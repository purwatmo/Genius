
master4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000013a  00800100  0001564e  00015702  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0001564e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000b7e  0080023a  0080023a  0001583c  2**0
                  ALLOC
  3 .eeprom       00000858  00810000  00810000  0001583c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         0000126c  00000000  00000000  00016094  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000004cb  00000000  00000000  00017300  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000140  00000000  00000000  000177cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00002575  00000000  00000000  0001790b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000bde3  00000000  00000000  00019e80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000fed  00000000  00000000  00025c63  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000d6c6  00000000  00000000  00026c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001200  00000000  00000000  00034318  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000054b0  00000000  00000000  00035518  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00008694  00000000  00000000  0003a9c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 0000071d  00000000  00000000  0004305c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000a8  00000000  00000000  00043779  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f6 12 	jmp	0x25ec	; 0x25ec <__ctors_end>
       4:	0c 94 15 13 	jmp	0x262a	; 0x262a <__bad_interrupt>
       8:	0c 94 15 13 	jmp	0x262a	; 0x262a <__bad_interrupt>
       c:	0c 94 15 13 	jmp	0x262a	; 0x262a <__bad_interrupt>
      10:	0c 94 15 13 	jmp	0x262a	; 0x262a <__bad_interrupt>
      14:	0c 94 15 13 	jmp	0x262a	; 0x262a <__bad_interrupt>
      18:	0c 94 15 13 	jmp	0x262a	; 0x262a <__bad_interrupt>
      1c:	0c 94 15 13 	jmp	0x262a	; 0x262a <__bad_interrupt>
      20:	0c 94 15 13 	jmp	0x262a	; 0x262a <__bad_interrupt>
      24:	0c 94 15 13 	jmp	0x262a	; 0x262a <__bad_interrupt>
      28:	0c 94 15 13 	jmp	0x262a	; 0x262a <__bad_interrupt>
      2c:	0c 94 15 13 	jmp	0x262a	; 0x262a <__bad_interrupt>
      30:	0c 94 d2 13 	jmp	0x27a4	; 0x27a4 <__vector_12>
      34:	0c 94 15 13 	jmp	0x262a	; 0x262a <__bad_interrupt>
      38:	0c 94 15 13 	jmp	0x262a	; 0x262a <__bad_interrupt>
      3c:	0c 94 15 13 	jmp	0x262a	; 0x262a <__bad_interrupt>
      40:	0c 94 15 13 	jmp	0x262a	; 0x262a <__bad_interrupt>
      44:	0c 94 81 96 	jmp	0x12d02	; 0x12d02 <__vector_17>
      48:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <__vector_18>
      4c:	0c 94 15 13 	jmp	0x262a	; 0x262a <__bad_interrupt>
      50:	0c 94 15 13 	jmp	0x262a	; 0x262a <__bad_interrupt>
      54:	0c 94 15 13 	jmp	0x262a	; 0x262a <__bad_interrupt>
      58:	0c 94 15 13 	jmp	0x262a	; 0x262a <__bad_interrupt>
      5c:	0c 94 15 13 	jmp	0x262a	; 0x262a <__bad_interrupt>
      60:	0c 94 15 13 	jmp	0x262a	; 0x262a <__bad_interrupt>
      64:	0c 94 15 13 	jmp	0x262a	; 0x262a <__bad_interrupt>
      68:	0c 94 15 13 	jmp	0x262a	; 0x262a <__bad_interrupt>
      6c:	0c 94 15 13 	jmp	0x262a	; 0x262a <__bad_interrupt>
      70:	0c 94 15 13 	jmp	0x262a	; 0x262a <__bad_interrupt>
      74:	0c 94 15 13 	jmp	0x262a	; 0x262a <__bad_interrupt>
      78:	0c 94 52 93 	jmp	0x126a4	; 0x126a4 <__vector_30>
      7c:	0c 94 15 13 	jmp	0x262a	; 0x262a <__bad_interrupt>
      80:	0c 94 15 13 	jmp	0x262a	; 0x262a <__bad_interrupt>
      84:	0c 94 15 13 	jmp	0x262a	; 0x262a <__bad_interrupt>
      88:	0c 94 15 13 	jmp	0x262a	; 0x262a <__bad_interrupt>
      8c:	5b 42       	sbci	r21, 0x2B	; 43
      8e:	61 42       	sbci	r22, 0x21	; 33
      90:	65 42       	sbci	r22, 0x25	; 37
      92:	7c 42       	sbci	r23, 0x2C	; 44
      94:	96 42       	sbci	r25, 0x26	; 38
      96:	9a 42       	sbci	r25, 0x2A	; 42
      98:	c5 42       	sbci	r28, 0x25	; 37
      9a:	df 42       	sbci	r29, 0x2F	; 47
      9c:	e5 42       	sbci	r30, 0x25	; 37
      9e:	ed 42       	sbci	r30, 0x2D	; 45
      a0:	f0 42       	sbci	r31, 0x20	; 32
      a2:	f3 42       	sbci	r31, 0x23	; 35
      a4:	f6 42       	sbci	r31, 0x26	; 38
      a6:	f9 42       	sbci	r31, 0x29	; 41
      a8:	fc 42       	sbci	r31, 0x2C	; 44
      aa:	00 43       	sbci	r16, 0x30	; 48
      ac:	03 43       	sbci	r16, 0x33	; 51
      ae:	08 43       	sbci	r16, 0x38	; 56
      b0:	0f 43       	sbci	r16, 0x3F	; 63
      b2:	d4 51       	subi	r29, 0x14	; 20
      b4:	d8 51       	subi	r29, 0x18	; 24
      b6:	f4 51       	subi	r31, 0x14	; 20
      b8:	98 55       	subi	r25, 0x58	; 88
      ba:	98 55       	subi	r25, 0x58	; 88
      bc:	98 55       	subi	r25, 0x58	; 88
      be:	98 55       	subi	r25, 0x58	; 88
      c0:	37 52       	subi	r19, 0x27	; 39
      c2:	98 55       	subi	r25, 0x58	; 88
      c4:	57 52       	subi	r21, 0x27	; 39
      c6:	98 55       	subi	r25, 0x58	; 88
      c8:	74 52       	subi	r23, 0x24	; 36
      ca:	f9 52       	subi	r31, 0x29	; 41
      cc:	52 53       	subi	r21, 0x32	; 50
      ce:	75 53       	subi	r23, 0x35	; 53
      d0:	1a 52       	subi	r17, 0x2A	; 42
      d2:	98 55       	subi	r25, 0x58	; 88
      d4:	0c 53       	subi	r16, 0x3C	; 60
      d6:	8b 53       	subi	r24, 0x3B	; 59
      d8:	c3 53       	subi	r28, 0x33	; 51
      da:	db 53       	subi	r29, 0x3B	; 59
      dc:	0b 54       	subi	r16, 0x4B	; 75
      de:	18 54       	subi	r17, 0x48	; 72
      e0:	03 55       	subi	r16, 0x53	; 83
      e2:	13 55       	subi	r17, 0x53	; 83
      e4:	59 55       	subi	r21, 0x59	; 89
      e6:	78 55       	subi	r23, 0x58	; 88
      e8:	8a 55       	subi	r24, 0x5A	; 90
      ea:	90 55       	subi	r25, 0x50	; 80
      ec:	94 55       	subi	r25, 0x54	; 84
      ee:	00 5d       	subi	r16, 0xD0	; 208
      f0:	1a 5d       	subi	r17, 0xDA	; 218
      f2:	2c 5d       	subi	r18, 0xDC	; 220
      f4:	5f 5d       	subi	r21, 0xDF	; 223
      f6:	8f 5d       	subi	r24, 0xDF	; 223
      f8:	a5 5d       	subi	r26, 0xD5	; 213
      fa:	e0 5d       	subi	r30, 0xD0	; 208
      fc:	18 5e       	subi	r17, 0xE8	; 232
      fe:	5a 5e       	subi	r21, 0xEA	; 234
     100:	62 5e       	subi	r22, 0xE2	; 226
     102:	7a 5f       	subi	r23, 0xFA	; 250
     104:	86 5f       	subi	r24, 0xF6	; 246
     106:	bd 5f       	subi	r27, 0xFD	; 253
     108:	fb 5f       	subi	r31, 0xFB	; 251
     10a:	12 60       	ori	r17, 0x02	; 2
     10c:	2c 60       	ori	r18, 0x0C	; 12
     10e:	78 60       	ori	r23, 0x08	; 8
     110:	75 5d       	subi	r23, 0xD5	; 213
     112:	32 5e       	subi	r19, 0xE2	; 226
     114:	d7 5f       	subi	r29, 0xF7	; 247
     116:	fe 5d       	subi	r31, 0xDE	; 222
     118:	7a 5e       	subi	r23, 0xEA	; 234
     11a:	c3 5e       	subi	r28, 0xE3	; 227
     11c:	df 5e       	subi	r29, 0xEF	; 239
     11e:	f9 5e       	subi	r31, 0xE9	; 233
     120:	42 5f       	subi	r20, 0xF2	; 242
     122:	60 5f       	subi	r22, 0xF0	; 240
     124:	26 79       	andi	r18, 0x96	; 150
     126:	67 79       	andi	r22, 0x97	; 151
     128:	73 79       	andi	r23, 0x93	; 147
     12a:	b4 79       	andi	r27, 0x94	; 148
     12c:	c6 79       	andi	r28, 0x96	; 150
     12e:	d6 79       	andi	r29, 0x96	; 150
     130:	f9 79       	andi	r31, 0x99	; 153
     132:	a4 7a       	andi	r26, 0xA4	; 164
     134:	ae 7a       	andi	r26, 0xAE	; 174
     136:	7a 81       	ldd	r23, Y+2	; 0x02
     138:	10 7b       	andi	r17, 0xB0	; 176
     13a:	20 7c       	andi	r18, 0xC0	; 192
     13c:	75 7c       	andi	r23, 0xC5	; 197
     13e:	ba 7c       	andi	r27, 0xCA	; 202
     140:	2d 7d       	andi	r18, 0xDD	; 221
     142:	bd 7d       	andi	r27, 0xDD	; 221
     144:	e4 7d       	andi	r30, 0xD4	; 212
     146:	a7 7e       	andi	r26, 0xE7	; 231
     148:	d2 7e       	andi	r29, 0xE2	; 226
     14a:	8b 7f       	andi	r24, 0xFB	; 251
     14c:	a4 7f       	andi	r26, 0xF4	; 244
     14e:	94 80       	ldd	r9, Z+4	; 0x04
     150:	1b 80       	ldd	r1, Y+3	; 0x03
     152:	5d 80       	ldd	r5, Y+5	; 0x05
     154:	2d 81       	ldd	r18, Y+5	; 0x05
     156:	5b 81       	ldd	r21, Y+3	; 0x03
     158:	7a 81       	ldd	r23, Y+2	; 0x02
     15a:	9a 80       	ldd	r9, Y+2	; 0x02
     15c:	1c 81       	ldd	r17, Y+4	; 0x04
     15e:	5f 81       	ldd	r21, Y+7	; 0x07
     160:	65 81       	ldd	r22, Z+5	; 0x05
     162:	1e 82       	std	Y+6, r1	; 0x06
     164:	34 82       	std	Z+4, r3	; 0x04
     166:	39 82       	std	Y+1, r3	; 0x01
     168:	6e 82       	std	Y+6, r6	; 0x06
     16a:	9e 82       	std	Y+6, r9	; 0x06
     16c:	e3 82       	std	Z+3, r14	; 0x03
     16e:	01 83       	std	Z+1, r16	; 0x01
     170:	21 83       	std	Z+1, r18	; 0x01
     172:	5b 83       	std	Y+3, r21	; 0x03
     174:	be 83       	std	Y+6, r27	; 0x06
     176:	d3 87       	std	Z+11, r29	; 0x0b
     178:	84 82       	std	Z+4, r8	; 0x04
     17a:	fc 87       	std	Y+12, r31	; 0x0c
     17c:	f1 88       	ldd	r15, Z+17	; 0x11
     17e:	a0 88       	ldd	r10, Z+16	; 0x10
     180:	d7 88       	ldd	r13, Z+23	; 0x17
     182:	25 89       	ldd	r18, Z+21	; 0x15
     184:	0b 89       	ldd	r16, Y+19	; 0x13
     186:	3c 89       	ldd	r19, Y+20	; 0x14
     188:	55 89       	ldd	r21, Z+21	; 0x15
     18a:	67 89       	ldd	r22, Z+23	; 0x17
     18c:	16 88       	ldd	r1, Z+22	; 0x16
     18e:	69 88       	ldd	r6, Y+17	; 0x11
     190:	86 88       	ldd	r8, Z+22	; 0x16
     192:	cf 83       	std	Y+7, r28	; 0x07
     194:	eb 83       	std	Y+3, r30	; 0x03
     196:	10 84       	ldd	r1, Z+8	; 0x08
     198:	1d 84       	ldd	r1, Y+13	; 0x0d
     19a:	39 84       	ldd	r3, Y+9	; 0x09
     19c:	4e 84       	ldd	r4, Y+14	; 0x0e
     19e:	76 84       	ldd	r7, Z+14	; 0x0e
     1a0:	8b 84       	ldd	r8, Y+11	; 0x0b
     1a2:	b3 84       	ldd	r11, Z+11	; 0x0b
     1a4:	d3 84       	ldd	r13, Z+11	; 0x0b
     1a6:	04 85       	ldd	r16, Z+12	; 0x0c
     1a8:	11 85       	ldd	r17, Z+9	; 0x09
     1aa:	6a 85       	ldd	r22, Y+10	; 0x0a
     1ac:	e8 85       	ldd	r30, Y+8	; 0x08
     1ae:	fb 85       	ldd	r31, Y+11	; 0x0b
     1b0:	27 86       	std	Z+15, r2	; 0x0f
     1b2:	27 86       	std	Z+15, r2	; 0x0f
     1b4:	0e 86       	std	Y+14, r0	; 0x0e
     1b6:	21 86       	std	Z+9, r2	; 0x09
     1b8:	2a 86       	std	Y+10, r2	; 0x0a
     1ba:	45 86       	std	Z+13, r4	; 0x0d
     1bc:	58 86       	std	Y+8, r5	; 0x08
     1be:	63 86       	std	Z+11, r6	; 0x0b
     1c0:	78 86       	std	Y+8, r7	; 0x08
     1c2:	8d 86       	std	Y+13, r8	; 0x0d
     1c4:	ad 86       	std	Y+13, r10	; 0x0d
     1c6:	d1 86       	std	Z+9, r13	; 0x09
     1c8:	e6 86       	std	Z+14, r14	; 0x0e
     1ca:	fb 86       	std	Y+11, r15	; 0x0b
     1cc:	10 87       	std	Z+8, r17	; 0x08
     1ce:	25 87       	std	Z+13, r18	; 0x0d
     1d0:	3a 87       	std	Y+10, r19	; 0x0a
     1d2:	4f 87       	std	Y+15, r20	; 0x0f
     1d4:	64 87       	std	Z+12, r22	; 0x0c
     1d6:	71 87       	std	Z+9, r23	; 0x09
     1d8:	86 87       	std	Z+14, r24	; 0x0e
     1da:	a7 87       	std	Z+15, r26	; 0x0f
     1dc:	1b 9c       	mul	r1, r11
     1de:	37 9c       	mul	r3, r7
     1e0:	3b 9d       	mul	r19, r11
     1e2:	69 9d       	mul	r22, r9
     1e4:	92 9d       	mul	r25, r2
     1e6:	05 9e       	mul	r0, r21
     1e8:	13 9e       	mul	r1, r19
     1ea:	1a 9e       	mul	r1, r26
     1ec:	56 9e       	mul	r5, r22
     1ee:	7d 9e       	mul	r7, r29
     1f0:	c0 9e       	mul	r12, r16
     1f2:	ca 9e       	mul	r12, r26
     1f4:	89 9e       	mul	r8, r25
     1f6:	d0 9e       	mul	r13, r16
     1f8:	ea 9e       	mul	r14, r26
     1fa:	de 9e       	mul	r13, r30
     1fc:	e6 9e       	mul	r14, r22
     1fe:	47 9c       	mul	r4, r7
     200:	d7 9c       	mul	r13, r7
     202:	f9 9c       	mul	r15, r9
     204:	05 9d       	mul	r16, r5
     206:	17 9d       	mul	r17, r7
     208:	27 9d       	mul	r18, r7
     20a:	35 9d       	mul	r19, r5
     20c:	35 9d       	mul	r19, r5
     20e:	6c 9f       	mul	r22, r28
     210:	6f 9f       	mul	r22, r31
     212:	04 a0       	ldd	r0, Z+36	; 0x24
     214:	13 a0       	ldd	r1, Z+35	; 0x23
     216:	44 a0       	ldd	r4, Z+36	; 0x24
     218:	52 a0       	ldd	r5, Z+34	; 0x22
     21a:	7e a0       	ldd	r7, Y+38	; 0x26
     21c:	23 a0       	ldd	r2, Z+35	; 0x23
     21e:	30 a0       	ldd	r3, Z+32	; 0x20
     220:	3a a0       	ldd	r3, Y+34	; 0x22
     222:	88 a0       	ldd	r8, Y+32	; 0x20
     224:	95 a0       	ldd	r9, Z+37	; 0x25
     226:	a0 a0       	ldd	r10, Z+32	; 0x20
     228:	a3 a0       	ldd	r10, Z+35	; 0x23
     22a:	a6 a0       	ldd	r10, Z+38	; 0x26
     22c:	a9 a0       	ldd	r10, Y+33	; 0x21
     22e:	ac a0       	ldd	r10, Y+36	; 0x24
     230:	af a0       	ldd	r10, Y+39	; 0x27
     232:	b2 a0       	ldd	r11, Z+34	; 0x22
     234:	b5 a0       	ldd	r11, Z+37	; 0x25
     236:	d7 a0       	ldd	r13, Z+39	; 0x27
     238:	c5 a0       	ldd	r12, Z+37	; 0x25
     23a:	b8 a0       	ldd	r11, Y+32	; 0x20
     23c:	d0 a0       	ldd	r13, Z+32	; 0x20
     23e:	ee 9f       	mul	r30, r30

00000240 <__c.3074>:
     240:	49 6e 69 74 69 61 6c 69 7a 65 2e 2e 2e 20 00        Initialize... .

0000024f <__c.3069>:
     24f:	57 61 74 63 68 44 6f 67 00                          WatchDog.

00000258 <__c.3067>:
     258:	42 72 6f 77 6e 4f 75 74 00                          BrownOut.

00000261 <__c.3065>:
     261:	45 78 74 65 72 6e 61 6c 00                          External.

0000026a <__c.3060>:
     26a:	50 6f 77 65 72 4f 6e 00                             PowerOn.

00000272 <__prodloc>:
     272:	01 06 02 06 01 0d 02 0d 01 14 02 14                 ............

0000027e <__prntloc>:
     27e:	01 08 02 08 03 08 04 08 01 13 02 13                 ............

0000028a <__prntlmt>:
     28a:	02 03 04 02 0f 0f                                   ......

00000290 <__prntstr>:
     290:	01 01 00 00 00 00                                   ......

00000296 <__hostloc>:
     296:	01 0a 02 0a 03 0a                                   ......

0000029c <MaxKeyHit>:
     29c:	02 04 03 03 03 03 03 04 03 04                       ..........

000002a6 <strDispenserName1>:
     2a6:	4e 2f 41 00                                         N/A.

000002aa <strDispenserName2>:
     2aa:	47 69 6c 62 61 72 63 6f 00                          Gilbarco.

000002b3 <strDispenserName3>:
     2b3:	57 61 79 6e 65 20 44 41 52 54 00                    Wayne DART.

000002be <strDispenserName4>:
     2be:	54 61 74 73 75 6e 6f 00                             Tatsuno.

000002c6 <strDispenserName5>:
     2c6:	4c 47 00                                            LG.

000002c9 <DefListDispenserName>:
     2c9:	a6 02 aa 02 b3 02 be 02 c6 02                       ..........

000002d3 <__c.7346>:
     2d3:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     2e3:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     2f3:	20 20 20 20 20 20 20 20 00                                  .

000002fc <__c.7344>:
     2fc:	20 20 20 20 20 20 53 65 6d 6f 67 61 20 53 65 6c           Semoga Sel
     30c:	61 6d 61 74 20 53 61 6d 70 61 69 20 54 75 6a 75     amat Sampai Tuju
     31c:	61 6e 20 20 20 20 20 20 00                          an      .

00000325 <__c.7342>:
     325:	20 20 20 20 20 20 20 20 20 20 20 20 53 65 6c 61                 Sela
     335:	6d 61 74 20 20 4a 61 6c 61 6e 20 20 20 20 20 20     mat  Jalan      
     345:	20 20 20 20 20 20 20 20 00                                  .

0000034e <__c.7340>:
     34e:	20 20 20 20 20 20 20 20 20 20 20 20 20 54 65 72                  Ter
     35e:	69 6d 61 20 4b 61 73 69 68 20 20 20 20 20 20 20     ima Kasih       
     36e:	20 20 20 20 20 20 20 20 00                                  .

00000377 <__c.7338>:
     377:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     387:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     397:	20 20 20 20 20 20 20 20 00                                  .

000003a0 <__c.7336>:
     3a0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     3b0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     3c0:	20 20 20 20 20 20 20 20 00                                  .

000003c9 <__c.7334>:
     3c9:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     3d9:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     3e9:	20 20 20 20 20 20 20 20 00                                  .

000003f2 <__c.7332>:
     3f2:	20 20 20 20 20 20 20 20 20 20 20 20 4a 61 6b 61                 Jaka
     402:	72 74 61 20 53 65 6c 61 74 61 6e 20 20 20 20 20     rta Selatan     
     412:	20 20 20 20 20 20 20 20 00                                  .

0000041b <__c.7330>:
     41b:	20 20 20 20 20 20 20 20 4a 4c 2e 20 52 53 20 46             JL. RS F
     42b:	61 74 6d 61 77 61 74 69 20 4e 6f 2e 35 35 20 20     atmawati No.55  
     43b:	20 20 20 20 20 20 20 20 00                                  .

00000444 <__c.7328>:
     444:	20 20 20 20 50 54 2e 20 48 41 4e 49 4e 44 4f 20         PT. HANINDO 
     454:	41 55 54 4f 4d 41 54 49 4f 4e 20 53 4f 4c 55 54     AUTOMATION SOLUT
     464:	49 4f 4e 53 20 20 20 20 00                          IONS    .

0000046d <__c.7326>:
     46d:	30 30 30 30 30 30 00                                000000.

00000474 <__c.7324>:
     474:	42 52 49 00                                         BRI.

00000478 <__c.7322>:
     478:	42 4e 49 00                                         BNI.

0000047c <__c.7320>:
     47c:	4d 61 6e 64 69 72 69 00                             Mandiri.

00000484 <__c.7318>:
     484:	42 43 41 00                                         BCA.

00000488 <__c.7316>:
     488:	44 69 65 73 65 6c 20 20 00                          Diesel  .

00000491 <__c.7314>:
     491:	42 69 6f 53 6f 6c 72 20 00                          BioSolr .

0000049a <__c.7312>:
     49a:	53 6f 6c 61 72 20 20 20 00                          Solar   .

000004a3 <__c.7310>:
     4a3:	50 72 65 6d 69 75 6d 20 00                          Premium .

000004ac <__c.7308>:
     4ac:	50 65 72 74 61 6d 61 78 00                          Pertamax.

000004b5 <__c.7306>:
     4b5:	50 65 72 74 2b 20 20 20 00                          Pert+   .

000004be <__c.7304>:
     4be:	36 35 30 30 00                                      6500.

000004c3 <__c.7302>:
     4c3:	34 35 30 30 00                                      4500.

000004c8 <__c.7300>:
     4c8:	36 35 30 30 00                                      6500.

000004cd <__c.7298>:
     4cd:	34 35 30 30 00                                      4500.

000004d2 <__c.7296>:
     4d2:	37 32 35 30 00                                      7250.

000004d7 <__c.7294>:
     4d7:	36 35 30 30 00                                      6500.

000004dc <__c.7292>:
     4dc:	20 20 00                                              .

000004df <__c.7248>:
     4df:	25 64 00                                            %d.

000004e2 <__c.7246>:
     4e2:	54 25 2e 32 64 25 2e 32 64 25 73 25 73 25 73 25     T%.2d%.2d%s%s%s%
     4f2:	73 25 73 25 73 3a 00                                s%s%s:.

000004f9 <__c.7204>:
     4f9:	32 30 25 73 2f 25 73 2f 25 73 20 25 73 3a 25 73     20%s/%s/%s %s:%s
     509:	3a 25 73 00                                         :%s.

0000050d <__c.7181>:
     50d:	25 73 00                                            %s.

00000510 <__c.7175>:
     510:	25 73 00                                            %s.

00000513 <__c.7146>:
     513:	25 63 25 2e 32 64 3a 00                             %c%.2d:.

0000051b <__c.7130>:
     51b:	43 54 53 52 50 00                                   CTSRP.

00000521 <__c.7121>:
     521:	3a 00                                               :.

00000523 <__c.7019>:
     523:	4e 2f 41 00                                         N/A.

00000527 <__c.7010>:
     527:	25 73 00                                            %s.

0000052a <__c.7005>:
	...

0000052b <__c.6987>:
     52b:	25 64 2e 25 73 25 73 25 73 00                       %d.%s%s%s.

00000535 <__c.6985>:
     535:	25 64 2e 25 73 25 73 25 73 25 73 25 73 00           %d.%s%s%s%s%s.

00000543 <__c.6977>:
     543:	54 4f 54 41 4c 20 25 73 25 73 00                    TOTAL %s%s.

0000054e <__c.6975>:
     54e:	54 4f 54 41 4c 20 25 73 25 73 25 73 25 73 00        TOTAL %s%s%s%s.

0000055d <__c.6971>:
     55d:	25 73 25 73 00                                      %s%s.

00000562 <__c.6969>:
     562:	25 73 25 73 25 73 25 73 00                          %s%s%s%s.

0000056b <__c.6967>:
     56b:	25 73 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 20 20 20     %s-----------   
     57b:	20 20 20 20 20 20 20 20 20 20 20 20 20 00                        .

00000589 <__c.6965>:
     589:	25 73 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 20 20 20     %s-----------   
     599:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 00           -------------.

000005a7 <__c.6963>:
     5a7:	41 77 61 6c 20 3a 25 73 25 73 00                    Awal :%s%s.

000005b2 <__c.6961>:
     5b2:	41 77 61 6c 20 3a 25 73 25 73 25 73 25 73 00        Awal :%s%s%s%s.

000005c1 <__c.6959>:
     5c1:	41 6b 68 69 72 3a 25 73 25 73 00                    Akhir:%s%s.

000005cc <__c.6957>:
     5cc:	41 6b 68 69 72 3a 25 73 25 73 25 73 25 73 00        Akhir:%s%s%s%s.

000005db <__c.6955>:
     5db:	50 25 64 2e 25 64 20 2d 20 25 73 20 00              P%d.%d - %s .

000005e8 <__c.6953>:
     5e8:	50 25 64 2e 25 64 20 2d 20 25 73 20 25 73 20 25     P%d.%d - %s %s %
     5f8:	73 00                                               s.

000005fa <__c.6951>:
     5fa:	48 61 72 67 61 3a 20 52 70 2e 25 73 00              Harga: Rp.%s.

00000607 <__c.6947>:
     607:	4e 2f 41 00                                         N/A.

0000060b <__c.6943>:
     60b:	50 55 4d 50 2d 50 52 4f 44 55 43 54 20 20 20 56     PUMP-PRODUCT   V
     61b:	4f 4c 55 4d 45 28 4c 29 20 20 20 20 20 20 20 20     OLUME(L)        
     62b:	20 20 20 20 20 20 00                                      .

00000632 <__c.6941>:
     632:	50 55 4d 50 2d 50 52 4f 44 55 43 54 20 20 20 56     PUMP-PRODUCT   V
     642:	4f 4c 55 4d 45 28 4c 29 20 20 20 20 52 55 50 49     OLUME(L)    RUPI
     652:	41 48 28 52 50 29 00                                AH(RP).

00000659 <__c.6937>:
     659:	41 6b 68 69 72 20 53 68 69 66 74 20 3a 20 25 73     Akhir Shift : %s
     669:	20 00                                                .

0000066b <__c.6935>:
     66b:	41 77 61 6c 20 20 53 68 69 66 74 20 3a 20 25 73     Awal  Shift : %s
     67b:	20 00                                                .

0000067d <__c.6933>:
     67d:	54 65 72 6d 69 6e 61 6c 20 49 44 20 3a 20 25 2e     Terminal ID : %.
     68d:	32 64 20 20 20 20 20 20 20 20 20 20 20 20 20 20     2d              
     69d:	20 20 20 20 20 00                                        .

000006a3 <__c.6931>:
     6a3:	20 20 20 20 20 20 20 20 4c 61 70 6f 72 61 6e 20             Laporan 
     6b3:	54 75 74 75 70 20 53 68 69 66 74 3a 20 25 73 20     Tutup Shift: %s 
     6c3:	20 20 20 20 20 00                                        .

000006c9 <__c.6928>:
     6c9:	25 64 00                                            %d.

000006cc <__c.6888>:
     6cc:	25 73 00                                            %s.

000006cf <__c.6883>:
     6cf:	30 00                                               0.

000006d1 <__c.6881>:
     6d1:	30 00                                               0.

000006d3 <__c.6835>:
     6d3:	25 73 00                                            %s.

000006d6 <__c.6833>:
     6d6:	25 73 00                                            %s.

000006d9 <__c.6831>:
     6d9:	25 73 00                                            %s.

000006dc <__c.6829>:
     6dc:	25 73 00                                            %s.

000006df <__c.6827>:
     6df:	25 73 00                                            %s.

000006e2 <__c.6717>:
     6e2:	25 73 00                                            %s.

000006e5 <__c.6662>:
     6e5:	30 30 30 30 30 30 30 30 00                          00000000.

000006ee <__c.6643>:
     6ee:	4f 70 65 72 61 74 6f 72 3a 20 25 73 00              Operator: %s.

000006fb <__c.6638>:
     6fb:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     70b:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     71b:	2d 00                                               -.

0000071d <__c.6629>:
     71d:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     72d:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     73d:	20 20 20 00                                            .

00000741 <__c.6627>:
     741:	20 20 20 20 20 20 20 20 20 20 20 20 20 44 55 50                  DUP
     751:	4c 49 43 41 54 45 20 43 4f 50 59 20 20 20 20 20     LICATE COPY     
     761:	20 20 20 00                                            .

00000765 <__c.6571>:
     765:	20 20 20 20 20 4f 70 65 72 61 74 6f 72 3a 20 25          Operator: %
     775:	73 00                                               s.

00000777 <__c.6566>:
     777:	20 20 20 20 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d         ------------
     787:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     797:	2d 2d 00                                            --.

0000079a <__c.6563>:
     79a:	20 20 20 20 20 53 75 72 63 68 61 72 67 65 20 41          Surcharge A
     7aa:	6d 74 3a 20 25 73 00                                mt: %s.

000007b1 <__c.6560>:
     7b1:	20 20 20 20 20 53 75 72 63 68 61 72 67 65 20 44          Surcharge D
     7c1:	73 63 3a 20 25 73 00                                sc: %s.

000007c8 <__c.6557>:
     7c8:	20 20 20 20 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d         ------------
     7d8:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     7e8:	2d 2d 00                                            --.

000007eb <__c.6554>:
     7eb:	20 20 20 20 20 4d 6f 6e 74 68 20 43 6f 6e 73 20          Month Cons 
     7fb:	41 20 3a 20 52 70 2e 25 73 00                       A : Rp.%s.

00000805 <__c.6551>:
     805:	20 20 20 20 20 4d 6f 6e 74 68 20 43 6f 6e 73 20          Month Cons 
     815:	56 20 3a 20 25 73 20 4c 00                          V : %s L.

0000081e <__c.6548>:
     81e:	20 20 20 20 20 54 6f 74 61 6c 20 52 65 64 65 65          Total Redee
     82e:	6d 20 3a 20 25 73 00                                m : %s.

00000835 <__c.6545>:
     835:	20 20 20 20 20 45 78 70 69 72 79 20 20 20 20 20          Expiry     
     845:	20 20 3a 20 25 73 00                                  : %s.

0000084c <__c.6542>:
     84c:	20 20 20 20 20 43 75 72 72 20 50 6f 69 6e 74 73          Curr Points
     85c:	20 20 3a 20 25 73 00                                  : %s.

00000863 <__c.6539>:
     863:	20 20 20 20 20 50 72 65 76 20 50 6f 69 6e 74 73          Prev Points
     873:	20 20 3a 20 25 73 00                                  : %s.

0000087a <__c.6536>:
     87a:	20 20 20 20 20 47 61 69 6e 20 50 6f 69 6e 74 73          Gain Points
     88a:	20 20 3a 20 25 73 00                                  : %s.

00000891 <__c.6533>:
     891:	20 20 20 20 20 43 6f 72 70 20 4e 61 6d 65 20 20          Corp Name  
     8a1:	20 20 3a 20 25 73 00                                  : %s.

000008a8 <__c.6530>:
     8a8:	20 20 20 20 20 43 6f 72 70 20 49 44 20 20 20 20          Corp ID    
     8b8:	20 20 3a 20 25 73 00                                  : %s.

000008bf <__c.6527>:
     8bf:	20 20 20 20 20 43 61 72 64 20 48 6f 6c 64 65 72          Card Holder
     8cf:	20 20 3a 20 25 73 20 00                               : %s .

000008d7 <__c.6524>:
     8d7:	20 20 20 20 20 43 61 72 64 20 49 44 20 20 20 20          Card ID    
     8e7:	20 20 3a 20 25 73 00                                  : %s.

000008ee <__c.6521>:
     8ee:	20 20 20 20 20 20 20 20 20 4c 4f 59 41 4c 54 59              LOYALTY
     8fe:	20 49 4e 46 4f 52 4d 41 54 49 4f 4e 20 20 20 20      INFORMATION    
     90e:	20 20 00                                              .

00000911 <__c.6518>:
     911:	20 20 20 20 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d         ------------
     921:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     931:	2d 2d 00                                            --.

00000934 <__c.6515>:
     934:	20 20 20 20 2e 25 73 00                                 .%s.

0000093c <__c.6511>:
     93c:	20 20 20 20 54 61 6e 64 61 20 54 61 6e 67 61 6e         Tanda Tangan
     94c:	20 20 28 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f       (_____________
     95c:	5f 29 00                                            _).

0000095f <__c.6506>:
     95f:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     96f:	20 20 20 20 20 20 00                                      .

00000976 <__c.6503>:
     976:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     986:	20 20 20 20 20 20 00                                      .

0000098d <__c.6500>:
     98d:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     99d:	20 00                                                .

0000099f <__c.6498>:
     99f:	20 20 00                                              .

000009a2 <__c.6496>:
     9a2:	20 20 20 20 41 70 70 72 20 43 6f 64 65 3a 20 25         Appr Code: %
     9b2:	73 00                                               s.

000009b4 <__c.6494>:
     9b4:	25 73 20 20 00                                      %s  .

000009b9 <__c.6492>:
     9b9:	20 20 20 20 4e 61 6d 61 20 20 20 20 20 3a 20 25         Nama     : %
     9c9:	73 00                                               s.

000009cb <__c.6489>:
     9cb:	20 20 20 20 20 20 20 20 20 20 2a 2a 2a 20 50 55               *** PU
     9db:	4d 50 20 54 45 53 54 20 2a 2a 2a 20 20 20 20 20     MP TEST ***     
     9eb:	20 20 00                                              .

000009ee <__c.6487>:
     9ee:	20 20 20 20 56 6f 75 63 68 65 72 20 4e 6f 3a 20         Voucher No: 
     9fe:	25 73 00                                            %s.

00000a01 <__c.6485>:
     a01:	20 20 20 20 4b 61 72 74 75 20 49 44 20 3a 20 25         Kartu ID : %
     a11:	73 00                                               s.

00000a13 <__c.6482>:
     a13:	20 20 20 20 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d         ------------
     a23:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     a33:	2d 2d 00                                            --.

00000a36 <__c.6479>:
     a36:	20 20 20 20 20 20 4f 64 6f 6d 65 74 65 72 20 20           Odometer  
     a46:	20 20 3a 20 25 73 00                                  : %s.

00000a4d <__c.6476>:
     a4d:	20 20 20 20 20 20 4e 6f 2e 50 6f 6c 69 73 69 20           No.Polisi 
     a5d:	20 20 3a 20 25 73 00                                  : %s.

00000a64 <__c.6473>:
	...

00000a65 <__c.6471>:
     a65:	20 20 20 20 20 20 4a 6d 6c 20 52 75 70 69 61 68           Jml Rupiah
     a75:	20 20 3a 20 52 70 2e 25 73 00                         : Rp.%s.

00000a7f <__c.6468>:
     a7f:	20 20 20 20 20 20 4a 6d 6c 20 4c 69 74 65 72 20           Jml Liter 
     a8f:	20 20 3a 20 25 73 20 4c 00                            : %s L.

00000a98 <__c.6465>:
	...

00000a99 <__c.6463>:
     a99:	20 20 20 20 20 20 48 61 72 67 61 2f 4c 20 20 20           Harga/L   
     aa9:	20 20 3a 20 52 70 2e 25 73 00                         : Rp.%s.

00000ab3 <__c.6460>:
     ab3:	20 20 20 20 20 20 50 72 6f 64 75 6b 20 20 20 20           Produk    
     ac3:	20 20 3a 20 25 73 00                                  : %s.

00000aca <__c.6457>:
     aca:	20 20 20 20 20 20 50 75 6c 61 75 2f 50 6f 6d 70           Pulau/Pomp
     ada:	61 20 3a 20 5b 25 73 5d 2d 25 73 00                 a : [%s]-%s.

00000ae6 <__c.6454>:
     ae6:	20 20 20 20 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d         ------------
     af6:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     b06:	2d 2d 00                                            --.

00000b09 <__c.6451>:
     b09:	20 20 20 20 20 20 57 61 6b 74 75 3a 20 25 73 20           Waktu: %s 
     b19:	25 73 20 00                                         %s .

00000b1d <__c.6447>:
     b1d:	20 20 20 20 20 20 53 68 69 66 74 3a 20 25 73 20           Shift: %s 
     b2d:	20 4e 6f 2e 54 72 61 6e 73 3a 20 25 73 20 00         No.Trans: %s .

00000b3c <__c.6430>:
     b3c:	20 00                                                .

00000b3e <__c.6428>:
     b3e:	20 20 20 20 20 20 20 20 20 20 20 20 20 44 55 50                  DUP
     b4e:	4c 49 43 41 54 45 20 43 4f 50 59 20 20 20 20 20     LICATE COPY     
     b5e:	20 20 20 00                                            .

00000b62 <__c.6197>:
     b62:	45 72 72 6f 72 20 4e 6f 20 43 6f 6e 6e 65 63 74     Error No Connect
     b72:	69 6f 6e 00                                         ion.

00000b76 <__c.6191>:
     b76:	50 72 6f 73 65 73 00                                Proses.

00000b7d <__c.6189>:
     b7d:	53 65 6e 64 20 52 65 71 75 65 73 74 00              Send Request.

00000b8a <__c.6184>:
     b8a:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
     b9a:	6e 74 65 72 00                                      nter.

00000b9f <__c.6182>:
     b9f:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
     baf:	6e 74 65 72 00                                      nter.

00000bb4 <__c.6179>:
     bb4:	5b 2a 5d 43 61 6e 63 65 6c 20 20 5b 23 5d 45 6e     [*]Cancel  [#]En
     bc4:	74 65 72 20 00                                      ter .

00000bc9 <__c.6177>:
     bc9:	4f 64 6f 6d 65 74 65 72 3a 5f 20 00                 Odometer:_ .

00000bd5 <__c.6175>:
     bd5:	50 6c 61 74 20 4e 6f 3a 20 25 73 20 00              Plat No: %s .

00000be2 <__c.6172>:
     be2:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
     bf2:	6e 74 65 72 00                                      nter.

00000bf7 <__c.6170>:
     bf7:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
     c07:	6e 74 65 72 00                                      nter.

00000c0c <__c.6167>:
     c0c:	5b 2a 5d 43 61 6e 63 65 6c 20 20 5b 23 5d 45 6e     [*]Cancel  [#]En
     c1c:	74 65 72 20 00                                      ter .

00000c21 <__c.6165>:
     c21:	5f 00                                               _.

00000c23 <__c.6163>:
     c23:	49 6e 70 75 74 20 50 6c 61 74 20 4e 6f 3a 20 00     Input Plat No: .

00000c33 <__c.6137>:
     c33:	23 29 53 61 76 65 00                                #)Save.

00000c3a <__c.6135>:
     c3a:	34 29 54 65 72 6d 49 44 3a 25 64 20 00              4)TermID:%d .

00000c47 <__c.6133>:
     c47:	25 64 00                                            %d.

00000c4a <__c.6121>:
     c4a:	25 64 00                                            %d.

00000c4d <__c.6113>:
     c4d:	23 29 53 61 76 65 00                                #)Save.

00000c54 <__c.6111>:
     c54:	34 29 54 65 72 6d 49 44 3a 25 64 20 00              4)TermID:%d .

00000c61 <__c.6109>:
     c61:	33 29 4e 6f 74 69 66 20 3a 20 20 20 20 20 2a 29     3)Notif :     *)
     c71:	45 78 69 74 00                                      Exit.

00000c76 <__c.6107>:
     c76:	32 29 44 2f 54 20 20 20 3a 00                       2)D/T   :.

00000c80 <__c.6105>:
     c80:	31 29 4d 6f 6e 65 79 20 3a 00                       1)Money :.

00000c8a <__c.6090>:
     c8a:	25 2e 32 64 00                                      %.2d.

00000c8f <__c.6088>:
     c8f:	25 64 00                                            %d.

00000c92 <__c.6071>:
     c92:	25 2e 32 64 00                                      %.2d.

00000c97 <__c.6069>:
     c97:	25 64 00                                            %d.

00000c9a <__c.6061>:
     c9a:	34 29 43 75 74 20 3a 20 20 2a 29 45 78 69 74 00     4)Cut :  *)Exit.

00000caa <__c.6059>:
     caa:	33 29 4c 6f 67 6f 3a 20 20 23 29 53 61 76 65 00     3)Logo:  #)Save.

00000cba <__c.6057>:
     cba:	32 29 53 69 7a 65 3a 20 20 36 29 53 70 61 63 65     2)Size:  6)Space
     cca:	20 3a 00                                             :.

00000ccd <__c.6055>:
     ccd:	31 29 54 79 70 65 3a 20 20 35 29 53 63 72 6f 6c     1)Type:  5)Scrol
     cdd:	6c 3a 00                                            l:.

00000ce0 <__c.6031>:
     ce0:	2a 29 43 61 6e 63 65 6c 20 20 20 20 20 20 23 29     *)Cancel      #)
     cf0:	53 61 76 65 00                                      Save.

00000cf5 <__c.6029>:
     cf5:	54 49 4d 45 20 3a 20 00                             TIME : .

00000cfd <__c.6027>:
     cfd:	44 41 54 45 20 3a 20 00                             DATE : .

00000d05 <__c.6008>:
     d05:	25 64 00                                            %d.

00000d08 <__c.5997>:
     d08:	25 64 00                                            %d.

00000d0b <__c.5989>:
     d0b:	2a 29 45 78 69 74 20 20 20 20 20 20 20 20 23 29     *)Exit        #)
     d1b:	53 61 76 65 00                                      Save.

00000d20 <__c.5987>:
     d20:	32 29 4e 32 3a 20 20 34 29 4e 34 3a 20 20 36 29     2)N2:  4)N4:  6)
     d30:	4e 36 3a 00                                         N6:.

00000d34 <__c.5985>:
     d34:	31 29 4e 31 3a 20 20 33 29 4e 33 3a 20 20 35 29     1)N1:  3)N3:  5)
     d44:	4e 35 3a 00                                         N5:.

00000d48 <__c.5983>:
     d48:	50 72 6f 64 75 63 74 20 46 49 50 25 2e 32 64 00     Product FIP%.2d.

00000d58 <__c.5953>:
     d58:	43 6f 6d 70 6c 65 74 65 64 00                       Completed.

00000d62 <__c.5951>:
     d62:	43 61 6e 63 65 6c 20 20 20 20 20 00                 Cancel     .

00000d6e <__c.5948>:
     d6e:	49 64 5b 25 64 5d 3d 25 2e 32 64 20 20 00           Id[%d]=%.2d  .

00000d7c <__c.5945>:
     d7c:	53 61 76 69 6e 67 2e 2e 00                          Saving...

00000d85 <__c.5943>:
     d85:	2d 50 75 6d 70 49 44 2d 00                          -PumpID-.

00000d8e <__c.5939>:
     d8e:	20 20 20 20 4e 6f 74 20 41 6c 6c 6f 77 65 64 20         Not Allowed 
     d9e:	20 20 20 20 00                                          .

00000da3 <__c.5937>:
     da3:	20 20 44 75 70 6c 69 63 61 74 65 20 50 75 6d 70       Duplicate Pump
     db3:	49 44 20 20 00                                      ID  .

00000db8 <__c.5935>:
     db8:	20 20 20 20 20 20 57 61 72 6e 69 6e 67 21 20 20           Warning!  
     dc8:	20 20 20 20 00                                          .

00000dcd <__c.5923>:
     dcd:	25 64 2e 50 25 2e 32 64 20 7c 20 25 64 2e 50 25     %d.P%.2d | %d.P%
     ddd:	2e 32 64 00                                         .2d.

00000de1 <__c.5917>:
     de1:	23 29 53 61 76 65 00                                #)Save.

00000de8 <__c.5915>:
     de8:	2a 29 42 61 63 6b 00                                *)Back.

00000def <__c.5910>:
     def:	25 64 2e 50 25 2e 32 64 20 7c 20 25 64 2e 50 25     %d.P%.2d | %d.P%
     dff:	2e 32 64 00                                         .2d.

00000e03 <__c.5878>:
     e03:	25 2e 32 64 00                                      %.2d.

00000e08 <__c.5872>:
     e08:	25 2e 32 64 00                                      %.2d.

00000e0d <__c.5870>:
     e0d:	34 29 34 3a 20 20 20 38 29 38 3a 20 20 20 2a 29     4)4:   8)8:   *)
     e1d:	45 78 69 74 00                                      Exit.

00000e22 <__c.5868>:
     e22:	33 29 33 3a 20 20 20 37 29 37 3a 20 20 20 23 29     3)3:   7)7:   #)
     e32:	53 61 76 65 00                                      Save.

00000e37 <__c.5866>:
     e37:	32 29 32 3a 20 20 20 36 29 36 3a 00                 2)2:   6)6:.

00000e43 <__c.5864>:
     e43:	31 29 31 3a 20 20 20 35 29 35 3a 00                 1)1:   5)5:.

00000e4f <__c.5846>:
     e4f:	5b 2a 5d 45 78 69 74 20 20 5b 23 5d 43 68 61 6e     [*]Exit  [#]Chan
     e5f:	67 65 20 00                                         ge .

00000e63 <__c.5844>:
     e63:	25 64 2e 25 73 00                                   %d.%s.

00000e69 <__c.5839>:
     e69:	2d 44 69 73 70 65 6e 73 65 72 20 42 72 61 6e 64     -Dispenser Brand
     e79:	2d 00                                               -.

00000e7b <__c.5824>:
     e7b:	2a 29 45 78 69 74 00                                *)Exit.

00000e82 <__c.5822>:
     e82:	32 29 50 72 6f 64 75 63 74 00                       2)Product.

00000e8c <__c.5820>:
     e8c:	31 29 49 44 00                                      1)ID.

00000e91 <__c.5814>:
     e91:	2a 29 45 78 69 74 00                                *)Exit.

00000e98 <__c.5809>:
     e98:	25 64 2e 50 25 2e 32 64 20 7c 20 25 64 2e 50 25     %d.P%.2d | %d.P%
     ea8:	2e 32 64 20 00                                      .2d .

00000ead <__c.5801>:
     ead:	25 2e 32 64 00                                      %.2d.

00000eb2 <__c.5705>:
     eb2:	5b 2a 5d 45 78 69 74 00                             [*]Exit.

00000eba <__c.5703>:
     eba:	36 2e 41 63 74 3a 25 64 00                          6.Act:%d.

00000ec3 <__c.5701>:
     ec3:	35 2e 44 6c 79 3a 25 64 00                          5.Dly:%d.

00000ecc <__c.5699>:
     ecc:	34 2e 54 69 6d 50 6f 6f 6c 3a 25 64 00              4.TimPool:%d.

00000ed9 <__c.5697>:
     ed9:	33 2e 54 72 79 53 65 6e 64 3a 25 64 00              3.TrySend:%d.

00000ee6 <__c.5695>:
     ee6:	32 2e 6e 4e 6f 50 75 6d 70 3a 25 64 00              2.nNoPump:%d.

00000ef3 <__c.5693>:
     ef3:	31 2e 4d 61 78 50 75 6d 70 3a 25 64 00              1.MaxPump:%d.

00000f00 <__c.5675>:
     f00:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 00              [*]Back     .

00000f0d <__c.5670>:
     f0d:	43 4f 4d 25 64 3a 25 64 00                          COM%d:%d.

00000f16 <__c.5668>:
     f16:	20 20 20 20 20 2d 42 61 75 64 72 61 74 65 2d 20          -Baudrate- 
     f26:	20 20 20 20 00                                          .

00000f2b <__c.5663>:
     f2b:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 20 00           [*]Back      .

00000f39 <__c.5661>:
     f39:	33 2e 43 4f 4d 33 3a 34 38 35 00                    3.COM3:485.

00000f44 <__c.5659>:
     f44:	33 2e 43 4f 4d 33 3a 32 33 32 00                    3.COM3:232.

00000f4f <__c.5657>:
     f4f:	33 2e 43 4f 4d 33 3a 54 54 4c 00                    3.COM3:TTL.

00000f5a <__c.5655>:
     f5a:	32 2e 42 61 75 64 72 61 74 65 00                    2.Baudrate.

00000f65 <__c.5653>:
     f65:	31 2e 4d 6f 64 65 3a 53 74 61 6e 64 61 6c 6f 6e     1.Mode:Standalon
     f75:	65 00                                               e.

00000f77 <__c.5651>:
     f77:	31 2e 4d 6f 64 65 3a 53 6c 61 76 65 00              1.Mode:Slave.

00000f84 <__c.5649>:
     f84:	31 2e 4d 6f 64 65 3a 4e 6f 6e 65 00                 1.Mode:None.

00000f90 <__c.5631>:
     f90:	49 6e 76 61 6c 69 64 20 4f 6c 64 20 50 61 73 73     Invalid Old Pass
     fa0:	77 6f 72 64 00                                      word.

00000fa5 <__c.5629>:
     fa5:	20 20 20 20 20 20 45 52 52 4f 52 20 20 20 20 20           ERROR     
     fb5:	20 20 20 20 00                                          .

00000fba <__c.5627>:
     fba:	49 6e 76 61 6c 69 64 20 4e 65 77 20 50 61 73 73     Invalid New Pass
     fca:	77 6f 72 64 00                                      word.

00000fcf <__c.5625>:
     fcf:	20 20 20 20 20 20 45 52 52 4f 52 20 20 20 20 20           ERROR     
     fdf:	20 20 20 20 00                                          .

00000fe4 <__c.5623>:
     fe4:	20 20 20 50 61 73 73 77 6f 72 64 20 53 61 76 65        Password Save
     ff4:	64 20 20 20 00                                      d   .

00000ff9 <__c.5621>:
     ff9:	20 20 20 20 20 43 6f 6d 70 6c 65 74 65 64 20 20          Completed  
    1009:	20 20 20 20 00                                          .

0000100e <__c.5617>:
    100e:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    101e:	6e 74 65 72 00                                      nter.

00001023 <__c.5614>:
    1023:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
    1033:	6e 74 65 72 00                                      nter.

00001038 <__c.5611>:
    1038:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1048:	6e 74 65 72 00                                      nter.

0000104d <__c.5609>:
    104d:	4e 65 77 3a 5f 20 20 20 20 20 20 20 20 20 20 20     New:_           
    105d:	20 20 20 20 00                                          .

00001062 <__c.5605>:
    1062:	56 61 6c 69 64 61 74 69 6e 67 2e 2e 00              Validating...

0000106f <__c.5601>:
    106f:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    107f:	6e 74 65 72 00                                      nter.

00001084 <__c.5598>:
    1084:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
    1094:	6e 74 65 72 00                                      nter.

00001099 <__c.5593>:
    1099:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    10a9:	6e 74 65 72 00                                      nter.

000010ae <__c.5591>:
    10ae:	4e 65 77 3a 5f 20 20 20 20 20 20 20 20 20 20 20     New:_           
    10be:	20 20 20 20 00                                          .

000010c3 <__c.5587>:
    10c3:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    10d3:	6e 74 65 72 00                                      nter.

000010d8 <__c.5584>:
    10d8:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
    10e8:	6e 74 65 72 00                                      nter.

000010ed <__c.5579>:
    10ed:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    10fd:	6e 74 65 72 00                                      nter.

00001102 <__c.5577>:
    1102:	4e 65 77 3a 5f 20 20 20 20 20 20 20 20 20 20 20     New:_           
    1112:	20 20 20 20 00                                          .

00001117 <__c.5573>:
    1117:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1127:	6e 74 65 72 00                                      nter.

0000112c <__c.5571>:
    112c:	4f 6c 64 3a 5f 00                                   Old:_.

00001132 <__c.5569>:
    1132:	2d 41 64 6d 69 6e 69 73 74 72 61 74 6f 72 2d 00     -Administrator-.

00001142 <__c.5567>:
    1142:	2d 53 75 70 65 72 76 69 73 6f 72 2d 00              -Supervisor-.

0000114f <__c.5559>:
    114f:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 00              [*]Back     .

0000115c <__c.5557>:
    115c:	32 2e 41 64 6d 69 6e 69 73 74 72 61 74 6f 72 00     2.Administrator.

0000116c <__c.5555>:
    116c:	31 2e 53 75 70 65 72 76 69 73 6f 72 00              1.Supervisor.

00001179 <__c.5553>:
    1179:	2d 43 68 61 6e 67 65 20 50 61 73 73 77 6f 72 64     -Change Password
    1189:	2d 00                                               -.

0000118b <__c.5550>:
    118b:	53 61 76 65 64 20 00                                Saved .

00001192 <__c.5544>:
    1192:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    11a2:	6e 74 65 72 00                                      nter.

000011a7 <__c.5541>:
    11a7:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
    11b7:	6e 74 65 72 00                                      nter.

000011bc <__c.5536>:
    11bc:	5b 2a 5d 4e 6f 20 20 20 20 5b 23 5d 59 65 73 00     [*]No    [#]Yes.

000011cc <__c.5534>:
    11cc:	53 61 76 65 3f 00                                   Save?.

000011d2 <__c.5532>:
    11d2:	4e 65 77 20 4f 70 65 72 61 74 6f 72 3a 00           New Operator:.

000011e0 <__c.5530>:
    11e0:	25 73 00                                            %s.

000011e3 <__c.5526>:
    11e3:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    11f3:	6e 74 65 72 00                                      nter.

000011f8 <__c.5524>:
    11f8:	4e 65 77 20 3a 5f 20 20 20 20 20 20 20 20 20 20     New :_          
    1208:	20 20 20 20 00                                          .

0000120d <__c.5522>:
    120d:	4e 61 6d 65 3a 00                                   Name:.

00001213 <__c.5520>:
    1213:	25 73 00                                            %s.

00001216 <__c.5511>:
    1216:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 20 20 20 20     [*]Back         
    1226:	20 00                                                .

00001228 <__c.5509>:
    1228:	32 2e 43 68 61 6e 67 65 20 50 61 73 73 77 6f 72     2.Change Passwor
    1238:	64 00                                               d.

0000123a <__c.5507>:
    123a:	31 2e 43 68 61 6e 67 65 20 4f 70 65 72 61 74 6f     1.Change Operato
    124a:	72 00                                               r.

0000124c <__c.5474>:
    124c:	2a 29 42 61 63 6b 00                                *)Back.

00001253 <__c.5472>:
    1253:	34 2e 53 70 61 72 61 74 6f 72 3a 25 63 20 00        4.Sparator:%c .

00001262 <__c.5470>:
    1262:	33 2e 44 65 63 69 6d 61 6c 20 3a 25 63 20 00        3.Decimal :%c .

00001271 <__c.5468>:
    1271:	32 2e 54 2e 4d 6f 6e 65 79 20 3a 25 64 20 00        2.T.Money :%d .

00001280 <__c.5466>:
    1280:	31 2e 54 2e 56 6f 6c 75 6d 65 3a 25 64 20 00        1.T.Volume:%d .

0000128f <__c.5461>:
    128f:	5b 2a 5d 42 61 63 6b 20 20 5b 23 5d 4e 65 78 74     [*]Back  [#]Next
	...

000012a0 <__c.5459>:
    12a0:	33 2e 4d 6f 6e 65 79 20 3a 25 64 00                 3.Money :%d.

000012ac <__c.5457>:
    12ac:	32 2e 56 6f 6c 75 6d 65 3a 25 64 00                 2.Volume:%d.

000012b8 <__c.5455>:
    12b8:	31 2e 50 72 69 63 65 20 3a 25 64 00                 1.Price :%d.

000012c4 <__c.5440>:
    12c4:	34 29 42 72 61 6e 64 20 20 2a 29 45 78 69 74 00     4)Brand  *)Exit.

000012d4 <__c.5438>:
    12d4:	33 29 4c 61 62 65 6c 20 20 00                       3)Label  .

000012de <__c.5436>:
    12de:	32 29 50 72 6f 64 75 63 74 00                       2)Product.

000012e8 <__c.5434>:
    12e8:	31 29 49 44 20 20 20 20 20 00                       1)ID     .

000012f2 <__c.5425>:
    12f2:	2a 29 42 61 63 6b 20 20 20 20 23 29 4f 4b 20 20     *)Back    #)OK  
    1302:	20 20 20 20 00                                          .

00001307 <__c.5423>:
    1307:	4e 65 77 3a 5f 00                                   New:_.

0000130d <__c.5421>:
    130d:	4f 6c 64 3a 25 73 00                                Old:%s.

00001314 <__c.5419>:
    1314:	2a 29 42 61 63 6b 20 20 20 20 23 29 4f 4b 20 20     *)Back    #)OK  
    1324:	20 20 20 20 00                                          .

00001329 <__c.5417>:
    1329:	4e 65 77 3a 5f 00                                   New:_.

0000132f <__c.5415>:
    132f:	45 64 69 74 20 50 72 6f 64 75 63 74 20 4e 61 6d     Edit Product Nam
    133f:	65 20 20 20 00                                      e   .

00001344 <__c.5413>:
    1344:	4f 6c 64 3a 25 73 00                                Old:%s.

0000134b <__c.5410>:
    134b:	2a 29 42 61 63 6b 20 20 20 20 20 20 20 00           *)Back       .

00001359 <__c.5408>:
    1359:	32 29 25 73 00                                      2)%s.

0000135e <__c.5406>:
    135e:	31 29 25 73 00                                      1)%s.

00001363 <__c.5401>:
    1363:	2a 29 42 61 63 6b 00                                *)Back.

0000136a <__c.5396>:
    136a:	25 64 29 25 73 00                                   %d)%s.

00001370 <__c.5351>:
    1370:	2a 29 42 61 63 6b 20 20 20 20 20 20 20 20 20 20     *)Back          
    1380:	20 20 20 20 00                                          .

00001385 <__c.5349>:
    1385:	33 29 50 75 6d 70 50 6f 6f 6c 69 6e 67 20 20 20     3)PumpPooling   
    1395:	20 20 20 20 00                                          .

0000139a <__c.5347>:
    139a:	32 29 53 79 73 74 65 6d 20 20 20 20 20 20 20 20     2)System        
    13aa:	20 20 20 20 00                                          .

000013af <__c.5345>:
    13af:	31 29 4f 70 65 72 61 74 6f 72 20 20 20 20 20 20     1)Operator      
    13bf:	20 20 20 20 00                                          .

000013c4 <__c.5342>:
    13c4:	34 29 44 61 74 65 74 69 6d 65 20 2a 29 45 78 69     4)Datetime *)Exi
    13d4:	74 20 20 20 00                                      t   .

000013d9 <__c.5340>:
    13d9:	33 29 44 65 63 69 6d 61 6c 20 20 37 29 4e 65 78     3)Decimal  7)Nex
    13e9:	74 20 20 20 00                                      t   .

000013ee <__c.5338>:
    13ee:	32 29 50 75 6d 70 20 20 20 20 20 36 29 48 6f 73     2)Pump     6)Hos
    13fe:	74 20 20 20 00                                      t   .

00001403 <__c.5336>:
    1403:	31 29 50 72 6f 64 75 63 74 20 20 35 29 50 72 69     1)Product  5)Pri
    1413:	6e 74 65 72 00                                      nter.

00001418 <__c.5320>:
    1418:	2e 00                                               ..

0000141a <__c.5318>:
    141a:	25 64 00                                            %d.

0000141d <__c.5316>:
    141d:	20 20 20 00                                            .

00001421 <__c.5314>:
    1421:	2e 00                                               ..

00001423 <__c.5312>:
    1423:	25 64 00                                            %d.

00001426 <__c.5310>:
    1426:	20 20 20 00                                            .

0000142a <__c.5303>:
    142a:	5b 2a 5d 63 61 6e 63 65 6c 20 20 5b 23 5d 6e 65     [*]cancel  [#]ne
    143a:	78 74 20 20 00                                      xt  .

0000143f <__c.5301>:
    143f:	4e 65 77 3a 20 20 20 5f 2e 20 20 20 2e 20 20 20     New:   _.   .   
    144f:	2e 20 20 20 00                                      .   .

00001454 <__c.5299>:
    1454:	4f 6c 64 3a 20 25 64 2e 25 64 2e 25 64 2e 25 64     Old: %d.%d.%d.%d
	...

00001465 <__c.5297>:
    1465:	53 65 72 76 65 72 20 49 50 00                       Server IP.

0000146f <__c.5277>:
    146f:	2e 00                                               ..

00001471 <__c.5275>:
    1471:	25 64 00                                            %d.

00001474 <__c.5273>:
    1474:	20 20 20 00                                            .

00001478 <__c.5271>:
    1478:	2e 00                                               ..

0000147a <__c.5269>:
    147a:	25 64 00                                            %d.

0000147d <__c.5267>:
    147d:	20 20 20 00                                            .

00001481 <__c.5260>:
    1481:	5b 2a 5d 63 61 6e 63 65 6c 20 20 5b 23 5d 6e 65     [*]cancel  [#]ne
    1491:	78 74 20 20 00                                      xt  .

00001496 <__c.5258>:
    1496:	4e 65 77 3a 20 20 20 5f 2e 20 20 20 2e 20 20 20     New:   _.   .   
    14a6:	2e 20 20 20 00                                      .   .

000014ab <__c.5256>:
    14ab:	4f 6c 64 3a 20 25 64 2e 25 64 2e 25 64 2e 25 64     Old: %d.%d.%d.%d
	...

000014bc <__c.5254>:
    14bc:	43 6c 69 65 6e 74 20 49 50 00                       Client IP.

000014c6 <__c.5232>:
    14c6:	25 73 25 73 00                                      %s%s.

000014cb <__c.5228>:
    14cb:	5b 2a 5d 4e 6f 20 5b 23 5d 59 65 73 00              [*]No [#]Yes.

000014d8 <__c.5226>:
    14d8:	53 61 76 65 20 46 6f 6f 74 65 72 25 64 20 3f 00     Save Footer%d ?.

000014e8 <__c.5222>:
    14e8:	5b 2a 5d 4e 6f 20 20 5b 23 5d 59 65 73 00           [*]No  [#]Yes.

000014f6 <__c.5220>:
    14f6:	41 6c 69 67 6e 20 43 65 6e 74 65 72 3f 00           Align Center?.

00001504 <__c.5217>:
    1504:	5b 2a 5d 42 61 63 6b 20 20 5b 23 5d 4f 4b 00        [*]Back  [#]OK.

00001513 <__c.5215>:
    1513:	45 64 69 74 20 46 6f 6f 74 65 72 25 64 20 00        Edit Footer%d .

00001522 <__c.5211>:
    1522:	2a 29 45 78 69 74 20 20 20 20 20 20 20 20 20 20     *)Exit          
    1532:	20 20 20 20 00                                          .

00001537 <__c.5209>:
    1537:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    1547:	20 20 20 20 00                                          .

0000154c <__c.5207>:
    154c:	32 29 46 6f 6f 74 65 72 32 20 20 34 29 46 6f 6f     2)Footer2  4)Foo
    155c:	74 65 72 34 00                                      ter4.

00001561 <__c.5205>:
    1561:	31 29 46 6f 6f 74 65 72 31 20 20 33 29 46 6f 6f     1)Footer1  3)Foo
    1571:	74 65 72 33 00                                      ter3.

00001576 <__c.5192>:
    1576:	25 73 25 73 00                                      %s%s.

0000157b <__c.5188>:
    157b:	5b 2a 5d 4e 6f 20 5b 23 5d 59 65 73 00              [*]No [#]Yes.

00001588 <__c.5186>:
    1588:	53 61 76 65 20 48 65 61 64 65 72 25 64 20 3f 00     Save Header%d ?.

00001598 <__c.5182>:
    1598:	5b 2a 5d 4e 6f 20 20 5b 23 5d 59 65 73 00           [*]No  [#]Yes.

000015a6 <__c.5180>:
    15a6:	41 6c 69 67 6e 20 43 65 6e 74 65 72 3f 00           Align Center?.

000015b4 <__c.5177>:
    15b4:	5b 2a 5d 42 61 63 6b 20 20 5b 23 5d 4f 4b 00        [*]Back  [#]OK.

000015c3 <__c.5175>:
    15c3:	45 64 69 74 20 48 65 61 64 65 72 25 64 20 00        Edit Header%d .

000015d2 <__c.5171>:
    15d2:	2a 29 45 78 69 74 20 20 20 20 20 20 20 20 20 20     *)Exit          
    15e2:	20 20 20 20 00                                          .

000015e7 <__c.5169>:
    15e7:	33 29 48 65 61 64 65 72 33 20 20 36 29 48 65 61     3)Header3  6)Hea
    15f7:	64 65 72 36 00                                      der6.

000015fc <__c.5167>:
    15fc:	32 29 48 65 61 64 65 72 32 20 20 35 29 48 65 61     2)Header2  5)Hea
    160c:	64 65 72 35 00                                      der5.

00001611 <__c.5165>:
    1611:	31 29 48 65 61 64 65 72 31 20 20 34 29 48 65 61     1)Header1  4)Hea
    1621:	64 65 72 34 00                                      der4.

00001626 <__c.5137>:
    1626:	2a 29 45 78 69 74 00                                *)Exit.

0000162d <__c.5135>:
    162d:	33 29 50 61 73 73 77 6f 72 64 20 20 20 20 20 20     3)Password      
    163d:	20 20 20 20 00                                          .

00001642 <__c.5133>:
    1642:	32 29 46 6f 6f 74 65 72 20 20 20 20 20 20 20 20     2)Footer        
    1652:	20 20 20 20 00                                          .

00001657 <__c.5131>:
    1657:	31 29 48 65 61 64 65 72 20 20 20 20 20 20 20 20     1)Header        
    1667:	20 20 20 20 00                                          .

0000166c <__c.5129>:
    166c:	32 29 46 6f 6f 74 65 72 20 20 20 20 35 29 53 65     2)Footer    5)Se
    167c:	72 76 65 72 00                                      rver.

00001681 <__c.5127>:
    1681:	31 29 48 65 61 64 65 72 20 20 20 20 34 29 43 6c     1)Header    4)Cl
    1691:	69 65 6e 74 00                                      ient.

00001696 <__c.5113>:
    1696:	53 61 76 69 6e 67 20 53 68 69 66 74 44 61 74 61     Saving ShiftData
    16a6:	2e 2e 20 00                                         .. .

000016aa <__c.5108>:
    16aa:	25 73 20 25 73 00                                   %s %s.

000016b0 <__c.5106>:
    16b0:	50 72 69 6e 74 69 6e 67 20 54 6f 74 61 6c 69 7a     Printing Totaliz
    16c0:	65 72 00                                            er.

000016c3 <__c.5102>:
    16c3:	43 61 6e 63 65 6c 00                                Cancel.

000016ca <__c.5097>:
    16ca:	45 72 72 6f 72 20 2d 20 4e 6f 20 50 75 6d 70 3a     Error - No Pump:
    16da:	25 64 20 00                                         %d .

000016de <__c.5092>:
    16de:	57 61 69 74 20 50 75 6d 70 3a 25 64 20 00           Wait Pump:%d .

000016ec <__c.5088>:
    16ec:	57 61 69 74 20 50 75 6d 70 3a 25 64 20 00           Wait Pump:%d .

000016fa <__c.5086>:
    16fa:	54 6f 74 61 6c 69 7a 65 72 2e 2e 00                 Totalizer...

00001706 <__c.5038>:
    1706:	2a 29 45 78 69 74 00                                *)Exit.

0000170d <__c.5036>:
    170d:	33 2e 4c 6f 63 6b 20 50 75 6d 70 20 20 00           3.Lock Pump  .

0000171b <__c.5034>:
    171b:	32 2e 43 6c 6f 73 65 20 44 61 79 20 20 00           2.Close Day  .

00001729 <__c.5032>:
    1729:	31 2e 43 6c 6f 73 65 20 53 68 69 66 74 00           1.Close Shift.

00001737 <__c.5005>:
    1737:	34 29 53 65 74 74 69 6e 67 73 20 20 20 2a 29 45     4)Settings   *)E
    1747:	78 69 74 20 00                                      xit .

0000174c <__c.5003>:
    174c:	33 29 43 6c 6f 73 65 44 61 79 20 20 20 20 20 20     3)CloseDay      
    175c:	20 20 20 20 00                                          .

00001761 <__c.5001>:
    1761:	32 29 43 6c 6f 73 65 53 68 69 66 74 20 20 20 20     2)CloseShift    
    1771:	20 20 20 20 00                                          .

00001776 <__c.4999>:
    1776:	31 29 52 65 50 72 69 6e 74 20 20 20 20 20 20 20     1)RePrint       
    1786:	20 20 20 20 00                                          .

0000178b <__c.4987>:
    178b:	50 61 73 73 77 6f 72 64 20 52 65 73 74 6f 72 65     Password Restore
    179b:	64 00                                               d.

0000179d <__c.4983>:
    179d:	49 6e 76 61 6c 69 64 20 52 65 73 74 6f 72 65 20     Invalid Restore 
    17ad:	20 00                                                .

000017af <__c.4980>:
    17af:	30 30 30 30 30 00                                   00000.

000017b5 <__c.4978>:
    17b5:	31 31 31 31 31 00                                   11111.

000017bb <__c.4974>:
    17bb:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    17cb:	6e 74 65 72 00                                      nter.

000017d0 <__c.4971>:
    17d0:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
    17e0:	6e 74 65 72 00                                      nter.

000017e5 <__c.4964>:
    17e5:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    17f5:	6e 74 65 72 00                                      nter.

000017fa <__c.4962>:
    17fa:	5f 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20     _               
    180a:	20 20 20 20 00                                          .

0000180f <__c.4960>:
    180f:	45 6e 74 65 72 20 52 65 73 74 6f 72 65 20 43 6f     Enter Restore Co
    181f:	64 65 20 20 00                                      de  .

00001824 <__c.4958>:
    1824:	4b 65 79 20 53 74 61 6d 70 3a 25 73 20 00           Key Stamp:%s .

00001832 <__c.4954>:
    1832:	49 6e 76 61 6c 69 64 20 43 6f 64 65 20 20 20 20     Invalid Code    
    1842:	20 20 20 20 00                                          .

00001847 <__c.4951>:
	...

00001848 <__c.4949>:
    1848:	25 73 00                                            %s.

0000184b <__c.4947>:
    184b:	25 73 00                                            %s.

0000184e <__c.4944>:
    184e:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    185e:	6e 74 65 72 00                                      nter.

00001863 <__c.4941>:
    1863:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
    1873:	6e 74 65 72 00                                      nter.

00001878 <__c.4934>:
	...

00001879 <__c.4932>:
    1879:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1889:	6e 74 65 72 00                                      nter.

0000188e <__c.4930>:
    188e:	5f 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20     _               
    189e:	20 20 20 20 00                                          .

000018a3 <__c.4928>:
    18a3:	45 6e 74 65 72 20 47 65 4e 69 55 73 20 43 6f 64     Enter GeNiUs Cod
    18b3:	65 20 20 20 00                                      e   .

000018b8 <__c.4923>:
    18b8:	49 6e 76 61 6c 69 64 20 43 6f 64 65 20 20 20 20     Invalid Code    
    18c8:	20 20 20 20 00                                          .

000018cd <__c.4920>:
    18cd:	52 65 73 65 74 20 43 6f 6d 70 6c 65 74 65 00        Reset Complete.

000018dc <__c.4917>:
    18dc:	50 6c 65 61 73 65 20 57 61 69 74 2e 2e 00           Please Wait...

000018ea <__c.4915>:
    18ea:	52 65 73 65 74 20 45 45 50 52 4f 4d 00              Reset EEPROM.

000018f7 <__c.4911>:
    18f7:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1907:	6e 74 65 72 00                                      nter.

0000190c <__c.4908>:
    190c:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
    191c:	6e 74 65 72 00                                      nter.

00001921 <__c.4901>:
    1921:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1931:	6e 74 65 72 00                                      nter.

00001936 <__c.4899>:
    1936:	52 65 73 65 74 43 6f 64 65 3a 5f 20 20 20 20 20     ResetCode:_     
    1946:	20 20 20 20 00                                          .

0000194b <__c.4897>:
    194b:	53 65 65 64 20 43 6f 64 65 3a 25 73 00              Seed Code:%s.

00001958 <__c.4895>:
    1958:	2d 4d 61 73 74 65 72 20 52 65 73 65 74 2d 00        -Master Reset-.

00001967 <__c.4893>:
	...

00001968 <__c.4891>:
    1968:	32 32 33 34 35 36 37 38 00                          22345678.

00001971 <__c.4889>:
    1971:	25 73 00                                            %s.

00001974 <__c.4880>:
    1974:	5b 2a 5d 45 78 69 74 20 20 20 20 20 20 20 20 20     [*]Exit         
    1984:	20 20 20 20 00                                          .

00001989 <__c.4878>:
    1989:	32 2e 4d 61 73 74 65 72 20 52 65 73 65 74 20 20     2.Master Reset  
    1999:	20 20 20 20 00                                          .

0000199e <__c.4876>:
    199e:	31 2e 52 65 73 74 6f 72 65 20 50 61 73 73 77 6f     1.Restore Passwo
    19ae:	72 64 20 20 00                                      rd  .

000019b3 <__c.4874>:
    19b3:	2d 53 79 73 74 65 6d 20 41 64 6d 69 6e 20 4c 65     -System Admin Le
    19c3:	76 65 6c 2d 00                                      vel-.

000019c8 <__c.4845>:
    19c8:	25 73 25 73 00                                      %s%s.

000019cd <__c.4827>:
    19cd:	25 73 00                                            %s.

000019d0 <__c.4812>:
    19d0:	25 63 00                                            %c.

000019d3 <__c.4810>:
    19d3:	32 30 25 73 00                                      20%s.

000019d8 <__c.4798>:
    19d8:	25 73 00                                            %s.

000019db <__c.4772>:
    19db:	34 32 36 34 36 33 36 00                             4264636.

000019e3 <__c.4769>:
    19e3:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    19f3:	6e 74 65 72 00                                      nter.

000019f8 <__c.4767>:
    19f8:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
    1a08:	6e 74 65 72 00                                      nter.

00001a0d <__c.4763>:
    1a0d:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1a1d:	6e 74 65 72 00                                      nter.

00001a22 <__c.4761>:
    1a22:	5f 00                                               _.

00001a24 <__c.4759>:
    1a24:	50 41 53 53 57 4f 52 44 3a 00                       PASSWORD:.

00001a2e <__c.4744>:
    1a2e:	41 63 63 65 73 73 20 44 65 6e 69 65 64 00           Access Denied.

00001a3c <__c.4719>:
    1a3c:	54 43 50 2f 49 50 20 45 72 72 6f 72 00              TCP/IP Error.

00001a49 <__c.4717>:
    1a49:	4e 6f 20 52 65 70 6c 79 20 20 20 20 00              No Reply    .

00001a56 <__c.4713>:
    1a56:	20 20 20 20 20 20 20 00                                    .

00001a5e <__c.4710>:
    1a5e:	50 6c 65 61 73 65 20 57 61 69 74 00                 Please Wait.

00001a6a <__c.4707>:
    1a6a:	25 73 00                                            %s.

00001a6d <__c.4705>:
    1a6d:	50 55 4d 50 20 54 45 53 54 00                       PUMP TEST.

00001a77 <__c.4702>:
    1a77:	25 73 00                                            %s.

00001a7a <__c.4699>:
    1a7a:	25 73 00                                            %s.

00001a7d <__c.4697>:
    1a7d:	25 73 00                                            %s.

00001a80 <__c.4695>:
    1a80:	25 73 00                                            %s.

00001a83 <__c.4691>:
    1a83:	25 73 00                                            %s.

00001a86 <__c.4687>:
    1a86:	50 72 6f 73 65 73 00                                Proses.

00001a8d <__c.4685>:
    1a8d:	2d 4d 4f 50 20 56 6f 75 63 68 65 72 2d 00           -MOP Voucher-.

00001a9b <__c.4682>:
    1a9b:	50 72 6f 73 65 73 00                                Proses.

00001aa2 <__c.4680>:
    1aa2:	49 44 3a 25 73 00                                   ID:%s.

00001aa8 <__c.4676>:
    1aa8:	5b 2a 5d 42 61 63 6b 20 20 20 20 5b 23 5d 45 78     [*]Back    [#]Ex
    1ab8:	69 74 00                                            it.

00001abb <__c.4674>:
    1abb:	46 49 50 25 73 00                                   FIP%s.

00001ac1 <__c.4672>:
    1ac1:	54 61 70 20 4b 61 72 74 75 20 52 46 49 44 00        Tap Kartu RFID.

00001ad0 <__c.4663>:
    1ad0:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1ae0:	6e 74 65 72 00                                      nter.

00001ae5 <__c.4661>:
    1ae5:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
    1af5:	6e 74 65 72 00                                      nter.

00001afa <__c.4658>:
    1afa:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1b0a:	6e 74 65 72 00                                      nter.

00001b0f <__c.4656>:
    1b0f:	53 75 72 63 68 61 72 67 65 3a 20 20 20 5f 25 00     Surcharge:   _%.

00001b1f <__c.4654>:
    1b1f:	25 73 00                                            %s.

00001b22 <__c.4650>:
    1b22:	5b 2a 5d 42 61 63 6b 00                             [*]Back.

00001b2a <__c.4645>:
    1b2a:	25 64 2e 25 73 00                                   %d.%s.

00001b30 <__c.4643>:
    1b30:	53 65 6c 65 63 74 20 42 61 6e 6b 00                 Select Bank.

00001b3c <__c.4638>:
    1b3c:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1b4c:	6e 74 65 72 00                                      nter.

00001b51 <__c.4636>:
    1b51:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
    1b61:	6e 74 65 72 00                                      nter.

00001b66 <__c.4633>:
    1b66:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1b76:	6e 74 65 72 00                                      nter.

00001b7b <__c.4631>:
    1b7b:	5f 00                                               _.

00001b7d <__c.4629>:
    1b7d:	4b 6f 64 65 20 56 6f 75 63 68 65 72 00              Kode Voucher.

00001b8a <__c.4620>:
    1b8a:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 20 20 20 20     [*]Back         
    1b9a:	20 20 20 20 00                                          .

00001b9f <__c.4618>:
    1b9f:	32 2e 42 61 6e 6b 20 20 20 20 34 2e 50 75 6d 70     2.Bank    4.Pump
    1baf:	54 65 73 74 00                                      Test.

00001bb4 <__c.4616>:
    1bb4:	31 2e 41 63 63 6f 75 6e 74 20 33 2e 56 6f 75 63     1.Account 3.Vouc
    1bc4:	68 65 72 20 00                                      her .

00001bc9 <__c.4614>:
    1bc9:	20 20 20 53 65 6c 65 63 74 20 50 61 79 6d 65 6e        Select Paymen
    1bd9:	74 20 20 20 00                                      t   .

00001bde <__c.4584>:
    1bde:	43 52 45 44 49 54 43 41 52 44 00                    CREDITCARD.

00001be9 <__c.4578>:
    1be9:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 20 20 20 20     [*]Back         
    1bf9:	20 20 20 20 00                                          .

00001bfe <__c.4576>:
    1bfe:	32 2e 43 72 65 64 69 74 20 43 61 72 64 20 20 20     2.Credit Card   
    1c0e:	20 20 20 20 00                                          .

00001c13 <__c.4574>:
    1c13:	31 2e 44 65 62 69 74 2f 46 6c 61 73 68 20 43 61     1.Debit/Flash Ca
    1c23:	72 64 20 20 00                                      rd  .

00001c28 <__c.4572>:
    1c28:	53 65 6c 65 63 74 20 43 61 72 64 20 54 79 70 65     Select Card Type
	...

00001c39 <__c.4558>:
    1c39:	4e 6f 20 43 6f 6e 6e 65 63 74 69 6f 6e 00           No Connection.

00001c47 <__c.4556>:
    1c47:	54 43 50 2f 49 50 20 45 52 52 4f 52 20 00           TCP/IP ERROR .

00001c55 <__c.4549>:
    1c55:	50 72 65 73 73 20 41 6e 79 20 4b 65 79 00           Press Any Key.

00001c63 <__c.4547>:
    1c63:	43 6d 20 56 6f 6c 3a 25 73 00                       Cm Vol:%s.

00001c6d <__c.4545>:
    1c6d:	43 4d 20 41 6d 74 3a 25 73 00                       CM Amt:%s.

00001c77 <__c.4543>:
    1c77:	50 6f 69 6e 74 73 3a 25 73 00                       Points:%s.

00001c81 <__c.4541>:
    1c81:	25 73 3a 25 73 00                                   %s:%s.

00001c87 <__c.4534>:
    1c87:	50 72 6f 73 65 73 00                                Proses.

00001c8e <__c.4532>:
    1c8e:	49 44 3a 25 73 00                                   ID:%s.

00001c94 <__c.4528>:
    1c94:	5b 2a 5d 42 61 63 6b 20 20 20 20 5b 23 5d 45 78     [*]Back    [#]Ex
    1ca4:	69 74 00                                            it.

00001ca7 <__c.4526>:
    1ca7:	54 61 70 20 4b 61 72 74 75 20 52 46 49 44 00        Tap Kartu RFID.

00001cb6 <__c.4523>:
    1cb6:	5b 2a 5d 42 61 63 6b 20 20 20 20 5b 23 5d 45 78     [*]Back    [#]Ex
    1cc6:	69 74 00                                            it.

00001cc9 <__c.4521>:
    1cc9:	54 61 70 20 4b 61 72 74 75 20 52 46 49 44 00        Tap Kartu RFID.

00001cd8 <__c.4519>:
    1cd8:	46 49 50 3a 25 73 00                                FIP:%s.

00001cdf <__c.4513>:
    1cdf:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 20 20 20 20     [*]Back         
    1cef:	20 00                                                .

00001cf1 <__c.4511>:
    1cf1:	32 2e 4c 6f 79 61 6c 74 79 20 55 70 64 61 74 65     2.Loyalty Update
    1d01:	20 00                                                .

00001d03 <__c.4509>:
    1d03:	31 2e 45 6e 71 75 69 72 79 20 20 20 20 20 20 20     1.Enquiry       
    1d13:	20 00                                                .

00001d15 <__c.4507>:
    1d15:	20 20 4d 65 6e 75 20 4c 6f 79 61 6c 74 79 20 20       Menu Loyalty  
    1d25:	20 00                                                .

00001d27 <__c.4491>:
    1d27:	4e 6f 20 43 6f 6e 6e 65 63 74 69 6f 6e 00           No Connection.

00001d35 <__c.4489>:
    1d35:	54 43 50 2f 49 50 20 45 52 52 4f 52 20 00           TCP/IP ERROR .

00001d43 <__c.4483>:
    1d43:	5b 2a 5d 42 61 63 6b 20 20 20 20 5b 23 5d 45 78     [*]Back    [#]Ex
    1d53:	69 74 00                                            it.

00001d56 <__c.4481>:
    1d56:	54 61 70 20 53 75 70 65 72 76 69 73 6f 72 20 43     Tap Supervisor C
    1d66:	61 72 64 00                                         ard.

00001d6a <__c.4479>:
    1d6a:	52 65 50 72 69 6e 74 20 46 49 50 3a 25 73 20 00     RePrint FIP:%s .

00001d7a <__c.4475>:
    1d7a:	54 69 64 61 6b 20 41 64 61 20 54 72 61 6e 73 61     Tidak Ada Transa
    1d8a:	6b 73 69 20 00                                      ksi .

00001d8f <__c.4466>:
    1d8f:	41 63 63 65 73 73 20 44 65 6e 69 65 64 00           Access Denied.

00001d9d <__c.4448>:
    1d9d:	25 2e 32 64 00                                      %.2d.

00001da2 <__c.4444>:
    1da2:	2a 29 45 78 69 74 00                                *)Exit.

00001da9 <__c.4442>:
    1da9:	23 29 4f 4b 20 00                                   #)OK .

00001daf <__c.4440>:
    1daf:	20 20 20 20 20 00                                        .

00001db5 <__c.4438>:
    1db5:	46 49 50 3a 5f 00                                   FIP:_.

00001dbb <__c.4433>:
    1dbb:	25 64 2e 50 25 73 20 7c 20 25 64 2e 50 25 73 00     %d.P%s | %d.P%s.

00001dcb <__c.4396>:
    1dcb:	30 32 25 73 25 73 25 73 25 73 25 73 25 73 25 73     02%s%s%s%s%s%s%s
	...

00001ddc <__c.4371>:
    1ddc:	30 00                                               0.

00001dde <__c.4325>:
    1dde:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    1dee:	20 20 20 20 00                                          .

00001df3 <__c.4320>:
    1df3:	23 25 73 00                                         #%s.

00001df7 <__c.4318>:
    1df7:	25 2e 32 64 00                                      %.2d.

00001dfc <__c.4316>:
    1dfc:	40 46 49 50 3a 00                                   @FIP:.

00001e02 <__c.4314>:
    1e02:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    1e12:	20 20 20 20 00                                          .

00001e17 <__c.4310>:
    1e17:	50 72 69 6e 74 69 6e 67 20 46 49 50 25 73 20 00     Printing FIP%s .

00001e27 <__c.4293>:
    1e27:	44 3a 25 64 20 43 3a 25 63 20 20 00                 D:%d C:%c  .

00001e33 <__c.4284>:
    1e33:	25 73 20 25 73 00                                   %s %s.

00001e39 <__c.4275>:
    1e39:	4e 6f 20 50 75 6d 70 20 46 6f 75 6e 64 00           No Pump Found.

00001e47 <__c.4273>:
    1e47:	54 43 50 2f 49 50 20 45 72 72 6f 72 00              TCP/IP Error.

00001e54 <__c.4271>:
    1e54:	50 75 6d 70 46 6f 75 6e 64 00                       PumpFound.

00001e5e <__c.4269>:
    1e5e:	43 6f 6e 6e 65 63 74 65 64 20 20 20 20 20 20 20     Connected       
    1e6e:	20 20 20 20 00                                          .

00001e73 <__c.4264>:
    1e73:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    1e83:	20 20 20 00                                            .

00001e87 <__c.4262>:
    1e87:	25 73 00                                            %s.

00001e8a <__c.4257>:
    1e8a:	53 63 61 6e 20 50 75 6d 70 00                       Scan Pump.

00001e94 <__c.4252>:
    1e94:	43 6f 6e 6e 65 63 74 20 20 20 20 20 20 20 20 20     Connect         
	...

00001ea5 <__c.4250>:
    1ea5:	43 6f 6e 6e 65 63 74 00                             Connect.

00001ead <__c.4248>:
    1ead:	43 6f 6e 6e 65 63 74 20 20 20 20 20 20 20 20 20     Connect         
	...

00001ebe <__c.4230>:
    1ebe:	43 4f 4d 25 64 3a 25 69 20 20 20 20 20 20 20 20     COM%d:%i        
    1ece:	20 20 20 00                                            .

00001ed2 <__c.4228>:
    1ed2:	49 6e 69 74 69 61 6c 69 7a 65 20 43 4f 4d 20 2e     Initialize COM .
    1ee2:	2e 2e 00                                            ...

00001ee5 <__c.4205>:
    1ee5:	0a 47 65 4e 69 55 73 20 54 69 63 6b 65 74 20 50     .GeNiUs Ticket P
    1ef5:	72 69 6e 74 65 72 20 0a 20 56 65 72 73 69 6f 6e     rinter . Version
    1f05:	3a 25 73 0a 20 4c 61 73 74 20 55 70 64 61 74 65     :%s. Last Update
    1f15:	20 25 73 20 0a 20 48 61 6e 69 6e 64 6f 20 41 75      %s . Hanindo Au
    1f25:	74 6f 6d 61 74 69 6f 6e 20 53 6f 6c 75 74 69 6f     tomation Solutio
    1f35:	6e 73 20 0a 20 77 77 77 2e 68 61 6e 69 6e 64 6f     ns . www.hanindo
    1f45:	67 72 6f 75 70 2e 63 6f 6d 0a 0a 0a 0a 0a 0a 0a     group.com.......
    1f55:	0a 00                                               ..

00001f57 <__c.4203>:
    1f57:	32 37 2f 31 32 2f 32 30 31 31 00                    27/12/2011.

00001f62 <__c.4201>:
    1f62:	32 2e 34 34 00                                      2.44.

00001f67 <__c.4192>:
    1f67:	46 75 65 6c 69 6e 67 20 40 46 49 50 3a 23 25 64     Fueling @FIP:#%d
	...

00001f78 <__c.4190>:
    1f78:	54 72 61 6e 73 61 6b 73 69 20 53 65 6c 65 73 61     Transaksi Selesa
    1f88:	69 00                                               i.

00001f8a <__c.4186>:
    1f8a:	49 44 3a 20 25 73 00                                ID: %s.

00001f91 <__c.4184>:
    1f91:	25 73 00                                            %s.

00001f94 <__c.4182>:
    1f94:	50 25 73 20 25 73 20 00                             P%s %s .

00001f9c <__c.4178>:
    1f9c:	46 49 50 20 54 69 64 61 6b 20 53 69 61 70 20 20     FIP Tidak Siap  
    1fac:	20 20 00                                              .

00001faf <__c.4175>:
    1faf:	41 75 74 68 6f 72 69 73 61 73 69 20 42 65 72 68     Authorisasi Berh
    1fbf:	61 73 69 6c 00                                      asil.

00001fc4 <__c.4171>:
    1fc4:	41 75 74 68 6f 72 69 73 61 73 69 20 47 61 67 61     Authorisasi Gaga
    1fd4:	6c 20 20 20 00                                      l   .

00001fd9 <__c.4167>:
    1fd9:	20 20 20 20 20 20 20 00                                    .

00001fe1 <__c.4164>:
    1fe1:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    1ff1:	20 20 20 20 00                                          .

00001ff6 <__c.4162>:
    1ff6:	4d 6f 68 6f 6e 20 54 75 6e 67 67 75 20 20 20 20     Mohon Tunggu    
    2006:	20 20 20 20 00                                          .

0000200b <__c.4160>:
    200b:	25 73 00                                            %s.

0000200e <__c.4158>:
    200e:	50 25 73 20 25 73 20 00                             P%s %s .

00002016 <__c.4155>:
    2016:	43 61 6e 63 65 6c 20 54 72 61 6e 73 61 63 74 69     Cancel Transacti
    2026:	6f 6e 20 20 00                                      on  .

0000202b <__c.4152>:
    202b:	5b 2a 5d 42 61 63 6b 20 5b 30 5d 45 53 43 20 5b     [*]Back [0]ESC [
    203b:	23 5d 4f 4b 00                                      #]OK.

00002040 <__c.4150>:
    2040:	25 73 20 00                                         %s .

00002044 <__c.4148>:
    2044:	20 46 75 6c 6c 00                                    Full.

0000204a <__c.4146>:
    204a:	25 73 20 20 25 73 20 00                             %s  %s .

00002052 <__c.4144>:
    2052:	49 44 3a 20 25 73 00                                ID: %s.

00002059 <__c.4142>:
    2059:	25 73 20 00                                         %s .

0000205d <__c.4138>:
    205d:	5b 2a 5d 42 61 63 6b 20 20 5b 23 5d 4f 4b 20 20     [*]Back  [#]OK  
    206d:	20 00                                                .

0000206f <__c.4136>:
    206f:	4f 64 6f 6d 65 74 65 72 3a 5f 20 20 20 20 20 20     Odometer:_      
    207f:	20 00                                                .

00002081 <__c.4134>:
    2081:	25 73 20 00                                         %s .

00002085 <__c.4132>:
    2085:	20 20 25 73 20 25 73 20 00                            %s %s .

0000208e <__c.4130>:
    208e:	50 75 6d 70 20 50 72 6f 64 75 63 74 20 41 6d 6f     Pump Product Amo
    209e:	75 6e 74 00                                         unt.

000020a2 <__c.4128>:
    20a2:	50 75 6d 70 20 50 72 6f 64 75 63 74 20 56 6f 6c     Pump Product Vol
    20b2:	75 6d 65 00                                         ume.

000020b6 <__c.4126>:
    20b6:	20 20 54 61 6e 6b 00                                  Tank.

000020bd <__c.4124>:
    20bd:	20 20 25 73 20 25 73 20 00                            %s %s .

000020c6 <__c.4122>:
    20c6:	50 75 6d 70 20 50 72 6f 64 75 63 74 20 20 20 46     Pump Product   F
    20d6:	75 6c 6c 00                                         ull.

000020da <__c.4118>:
    20da:	5b 2a 5d 42 61 63 6b 20 20 5b 23 5d 4f 4b 20 20     [*]Back  [#]OK  
    20ea:	20 20 20 20 00                                          .

000020ef <__c.4116>:
    20ef:	5b 32 5d 41 6d 6f 75 6e 74 3a 5f 20 20 20 20 20     [2]Amount:_     
    20ff:	20 20 20 20 00                                          .

00002104 <__c.4114>:
    2104:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    2114:	20 20 20 20 00                                          .

00002119 <__c.4112>:
    2119:	50 25 73 2d 25 73 20 00                             P%s-%s .

00002121 <__c.4110>:
    2121:	5b 2a 5d 42 61 63 6b 20 20 5b 23 5d 4f 4b 20 20     [*]Back  [#]OK  
    2131:	20 20 20 20 00                                          .

00002136 <__c.4108>:
    2136:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    2146:	20 20 20 20 00                                          .

0000214b <__c.4106>:
    214b:	5b 31 5d 56 6f 6c 75 6d 65 3a 5f 20 20 20 20 20     [1]Volume:_     
    215b:	20 20 20 20 00                                          .

00002160 <__c.4104>:
    2160:	50 25 73 2d 25 73 20 00                             P%s-%s .

00002168 <__c.4101>:
    2168:	41 00                                               A.

0000216a <__c.4099>:
    216a:	41 00                                               A.

0000216c <__c.4097>:
    216c:	56 00                                               V.

0000216e <__c.4094>:
    216e:	5b 2a 5d 42 61 63 6b 20 20 20 20 5b 23 5d 4e 65     [*]Back    [#]Ne
    217e:	78 74 20 20 00                                      xt  .

00002183 <__c.4092>:
    2183:	5b 32 5d 41 6d 6f 75 6e 74 20 20 20 20 20 20 20     [2]Amount       
    2193:	20 20 20 20 00                                          .

00002198 <__c.4090>:
    2198:	5b 31 5d 56 6f 6c 75 6d 65 20 20 20 20 20 20 20     [1]Volume       
    21a8:	20 20 20 20 00                                          .

000021ad <__c.4088>:
    21ad:	50 25 73 2d 25 73 20 00                             P%s-%s .

000021b5 <__c.4085>:
    21b5:	25 73 00                                            %s.

000021b8 <__c.4082>:
    21b8:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 20 20 20 20     [*]Back         
    21c8:	20 20 20 20 00                                          .

000021cd <__c.4077>:
    21cd:	20 20 20 20 20 00                                        .

000021d3 <__c.4075>:
    21d3:	25 64 2e 25 73 00                                   %d.%s.

000021d9 <__c.4073>:
    21d9:	25 73 00                                            %s.

000021dc <__c.4071>:
    21dc:	50 6f 6d 70 61 2d 25 73 00                          Pompa-%s.

000021e5 <__c.4067>:
    21e5:	25 2e 32 64 00                                      %.2d.

000021ea <__c.4065>:
    21ea:	25 2e 32 64 00                                      %.2d.

000021ef <__c.4061>:
    21ef:	5b 2a 5d 42 61 74 61 6c 20 20 20 20 20 20 20 5b     [*]Batal       [
    21ff:	23 5d 4f 4b 00                                      #]OK.

00002204 <__c.4059>:
    2204:	25 73 20 25 73 00                                   %s %s.

0000220a <__c.4057>:
    220a:	25 73 00                                            %s.

0000220d <__c.4055>:
    220d:	25 73 00                                            %s.

00002210 <__c.4053>:
    2210:	25 73 00                                            %s.

00002213 <__c.4050>:
    2213:	4b 61 72 74 75 20 54 65 72 62 61 74 61 73 20 20     Kartu Terbatas  
    2223:	20 20 20 20 00                                          .

00002228 <__c.4048>:
    2228:	54 69 64 61 6b 20 54 65 72 64 61 66 74 61 72 20     Tidak Terdaftar 
    2238:	20 20 20 20 00                                          .

0000223d <__c.4045>:
    223d:	44 61 74 61 20 52 65 63 65 69 76 65 64 20 20 20     Data Received   
    224d:	20 20 20 20 00                                          .

00002252 <__c.4042>:
    2252:	54 43 50 2f 49 50 20 45 72 72 6f 72 20 20 20 20     TCP/IP Error    
    2262:	20 20 20 20 00                                          .

00002267 <__c.4040>:
    2267:	53 65 6e 64 69 6e 67 20 46 61 69 6c 65 64 20 20     Sending Failed  
    2277:	20 20 20 20 00                                          .

0000227c <__c.4037>:
    227c:	20 20 20 20 20 20 20 00                                    .

00002284 <__c.4032>:
    2284:	50 72 6f 73 65 73 00                                Proses.

0000228b <__c.4030>:
    228b:	49 44 3a 25 73 00                                   ID:%s.

00002291 <__c.4028>:
    2291:	20 20 20 4c 6f 63 61 6c 20 41 63 63 6f 75 6e 74        Local Account
    22a1:	20 20 20 00                                            .

000022a5 <__c.4025>:
    22a5:	54 69 6d 65 6f 75 74 20 20 20 20 20 00              Timeout     .

000022b2 <__c.3909>:
    22b2:	25 2e 32 64 00                                      %.2d.

000022b7 <__c.3882>:
    22b7:	46 39 36 38 43 46 46 42 00                          F968CFFB.

000022c0 <__c.3880>:
    22c0:	25 73 00                                            %s.

000022c3 <__c.3877>:
    22c3:	25 73 25 73 25 73 00                                %s%s%s.

000022ca <__c.3875>:
    22ca:	25 73 25 73 25 73 25 73 00                          %s%s%s%s.

000022d3 <__c.3872>:
    22d3:	25 73 25 73 00                                      %s%s.

000022d8 <__c.3869>:
    22d8:	25 73 00                                            %s.

000022db <__c.3867>:
    22db:	25 73 00                                            %s.

000022de <__c.3865>:
    22de:	46 30 30 30 30 30 30 30 45 31 32 33 34 35 36 46     F0000000E123456F
    22ee:	46 46 46 46 00                                      FFFF.

000022f3 <__c.3863>:
    22f3:	25 73 25 73 25 73 00                                %s%s%s.

000022fa <__c.3861>:
    22fa:	25 73 25 73 25 64 00                                %s%s%d.

00002301 <__c.3858>:
    2301:	25 73 56 25 73 00                                   %sV%s.

00002307 <__c.3855>:
    2307:	25 73 25 73 00                                      %s%s.

0000230c <__c.3853>:
    230c:	25 73 25 73 00                                      %s%s.

00002311 <__c.3851>:
    2311:	25 73 25 73 00                                      %s%s.

00002316 <__c.3848>:
    2316:	25 73 25 73 00                                      %s%s.

0000231b <__c.3845>:
    231b:	25 73 25 73 00                                      %s%s.

00002320 <__c.3842>:
    2320:	25 73 00                                            %s.

00002323 <__c.3837>:
    2323:	25 73 31 00                                         %s1.

00002327 <__c.3834>:
    2327:	25 2e 32 58 00                                      %.2X.

0000232c <__c.3832>:
    232c:	25 2e 33 64 2e 25 2e 33 64 2e 25 2e 33 64 2e 25     %.3d.%.3d.%.3d.%
    233c:	2e 33 64 00                                         .3d.

00002340 <__c.3830>:
    2340:	25 2e 33 64 2e 25 2e 33 64 2e 25 2e 33 64 2e 25     %.3d.%.3d.%.3d.%
    2350:	2e 33 64 00                                         .3d.

00002354 <__c.3828>:
    2354:	25 2e 32 64 00                                      %.2d.

00002359 <__c.3826>:
    2359:	25 2e 32 64 00                                      %.2d.

0000235e <__c.3775>:
    235e:	25 73 20 25 73 00                                   %s %s.

00002364 <__c.3773>:
    2364:	32 2e 34 34 00                                      2.44.

00002369 <__c.3771>:
    2369:	47 65 4e 69 55 73 00                                GeNiUs.

00002370 <__c.3761>:
    2370:	50 72 65 73 73 20 61 6e 79 20 6b 65 79 2e 2e 20     Press any key.. 
    2380:	20 20 20 20 00                                          .

00002385 <__c.3753>:
    2385:	5b 31 5d 53 6c 61 76 65 20 5b 32 5d 53 74 61 6e     [1]Slave [2]Stan
    2395:	64 61 6c 6f 6e 65 00                                dalone.

0000239c <__c.3724>:
    239c:	3e 00                                               >.

0000239e <__c.3719>:
    239e:	25 2e 32 64 00                                      %.2d.

000023a3 <__c.3717>:
    23a3:	25 2e 32 64 00                                      %.2d.

000023a8 <__c.3715>:
    23a8:	30 00                                               0.

000023aa <__c.3713>:
    23aa:	31 00                                               1.

000023ac <__c.3705>:
    23ac:	25 64 00                                            %d.

000023af <__c.3700>:
    23af:	25 2e 32 64 00                                      %.2d.

000023b4 <__c.3695>:
    23b4:	25 73 00                                            %s.

000023b7 <__c.3690>:
    23b7:	25 73 00                                            %s.

000023ba <__c.3685>:
    23ba:	25 73 00                                            %s.

000023bd <__c.3683>:
    23bd:	3c 00                                               <.

000023bf <__c.3662>:
    23bf:	3c 4f 4b 3e 00                                      <OK>.

000023c4 <__c.3657>:
    23c4:	25 64 00                                            %d.

000023c7 <__c.3655>:
    23c7:	25 64 00                                            %d.

000023ca <__c.3643>:
    23ca:	25 64 00                                            %d.

000023cd <__c.3632>:
    23cd:	3c 53 61 76 69 6e 67 3e 00                          <Saving>.

000023d6 <__c.3630>:
    23d6:	4c 65 6e 67 74 68 3a 25 64 00                       Length:%d.

000023e0 <__c.3598>:
    23e0:	20 00                                                .

000023e2 <__c.3596>:
    23e2:	25 63 00                                            %c.

000023e5 <__c.3591>:
    23e5:	25 73 00                                            %s.

000023e8 <__c.3589>:
    23e8:	25 2e 32 58 25 2e 32 58 25 2e 32 58 25 2e 32 58     %.2X%.2X%.2X%.2X
	...

000023f9 <__c.3587>:
    23f9:	20 00                                                .

000023fb <__c.3585>:
    23fb:	25 63 00                                            %c.

000023fe <__c.3521>:
    23fe:	25 73 00                                            %s.

00002401 <__c.3484>:
    2401:	31 30 00                                            10.

00002404 <__c.3482>:
    2404:	25 73 00                                            %s.

00002407 <__c.3480>:
    2407:	25 73 00                                            %s.

0000240a <__c.3478>:
    240a:	25 73 00                                            %s.

0000240d <__c.3476>:
    240d:	25 73 00                                            %s.

00002410 <__c.3474>:
    2410:	25 73 00                                            %s.

00002413 <__c.3472>:
    2413:	25 2e 32 64 00                                      %.2d.

00002418 <__c.3470>:
    2418:	25 64 00                                            %d.

0000241b <__c.3468>:
    241b:	25 73 00                                            %s.

0000241e <__c.3466>:
    241e:	25 73 00                                            %s.

00002421 <__c.3464>:
    2421:	25 73 00                                            %s.

00002424 <__c.3462>:
    2424:	25 64 00                                            %d.

00002427 <__c.3460>:
    2427:	4e 2f 41 00                                         N/A.

0000242b <__c.3418>:
    242b:	25 64 00                                            %d.

0000242e <__c.3416>:
    242e:	25 73 00                                            %s.

00002431 <__c.3414>:
    2431:	25 73 00                                            %s.

00002434 <__c.3380>:
    2434:	54 69 64 61 6b 20 41 64 61 20 54 72 61 6e 73 61     Tidak Ada Transa
    2444:	6b 73 69 20 00                                      ksi .

00002449 <__c.3377>:
    2449:	54 6f 74 61 6c 69 7a 65 72 41 6c 6c 20 20 20 20     TotalizerAll    
    2459:	20 00                                                .

0000245b <__c.3374>:
    245b:	43 6c 65 61 72 20 44 61 74 61 20 54 6f 74 61 6c     Clear Data Total
    246b:	69 7a 65 72 00                                      izer.

00002470 <__c.3362>:
    2470:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
	...

00002481 <__c.3359>:
    2481:	52 65 61 64 79 2e 2e 2e 20 20 20 20 20 20 20 20     Ready...        
    2491:	20 20 20 20 00                                          .

00002496 <__c.3356>:
    2496:	52 65 61 64 79 2e 2e 2e 20 20 20 20 20 20 20 20     Ready...        
    24a6:	20 20 20 20 00                                          .

000024ab <__c.3354>:
    24ab:	4e 6f 20 52 65 73 70 6f 6e 73 65 2e 2e 20 20 20     No Response..   
    24bb:	20 20 20 20 00                                          .

000024c0 <__c.3351>:
    24c0:	50 6c 65 61 73 65 20 57 61 69 74 2e 2e 20 20 20     Please Wait..   
    24d0:	20 20 20 20 00                                          .

000024d5 <__c.3348>:
    24d5:	52 65 61 64 79 2e 2e 2e 20 20 20 20 20 20 20 20     Ready...        
    24e5:	20 20 20 20 00                                          .

000024ea <__c.3345>:
    24ea:	54 69 64 61 6b 20 41 64 61 20 54 72 61 6e 73 61     Tidak Ada Transa
    24fa:	6b 73 69 20 00                                      ksi .

000024ff <__c.3340>:
    24ff:	53 65 64 61 6e 67 50 72 6f 73 65 73 00              SedangProses.

0000250c <__c.3337>:
    250c:	34 33 35 36 41 33 31 41 00                          4356A31A.

00002515 <__c.1815>:
    2515:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    2525:	20 20 20 20 00                                          .

0000252a <__c.1813>:
    252a:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    253a:	20 20 20 20 00                                          .

0000253f <__c.1811>:
    253f:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    254f:	20 20 20 20 00                                          .

00002554 <__c.1809>:
    2554:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    2564:	20 20 20 20 00                                          .

00002569 <__alphanum>:
    2569:	30 20 2e 00 00 00 31 2e 2c 3f 21 00 32 61 62 63     0 ....1.,?!.2abc
    2579:	00 00 33 64 65 66 00 00 34 67 68 69 00 00 35 6a     ..3def..4ghi..5j
    2589:	6b 6c 00 00 36 6d 6e 6f 00 00 37 70 71 72 73 00     kl..6mno..7pqrs.
    2599:	38 74 75 76 00 00 39 77 78 79 7a 00 30 20 2e 00     8tuv..9wxyz.0 ..
    25a9:	00 00 31 26 40 2b 2d 00 32 41 42 43 00 00 33 44     ..1&@+-.2ABC..3D
    25b9:	45 46 00 00 34 47 48 49 00 00 35 4a 4b 4c 00 00     EF..4GHI..5JKL..
    25c9:	36 4d 4e 4f 00 00 37 50 51 52 53 00 38 54 55 56     6MNO..7PQRS.8TUV
    25d9:	00 00 39 57 58 59 5a 00                             ..9WXYZ.

000025e1 <__maxchar>:
    25e1:	02 04 03 03 03 03 03 04 03 04 00                    ...........

000025ec <__ctors_end>:
    25ec:	11 24       	eor	r1, r1
    25ee:	1f be       	out	0x3f, r1	; 63
    25f0:	cf ef       	ldi	r28, 0xFF	; 255
    25f2:	d0 e1       	ldi	r29, 0x10	; 16
    25f4:	de bf       	out	0x3e, r29	; 62
    25f6:	cd bf       	out	0x3d, r28	; 61

000025f8 <__do_copy_data>:
    25f8:	12 e0       	ldi	r17, 0x02	; 2
    25fa:	a0 e0       	ldi	r26, 0x00	; 0
    25fc:	b1 e0       	ldi	r27, 0x01	; 1
    25fe:	ee e4       	ldi	r30, 0x4E	; 78
    2600:	f6 e5       	ldi	r31, 0x56	; 86
    2602:	01 e0       	ldi	r16, 0x01	; 1
    2604:	0b bf       	out	0x3b, r16	; 59
    2606:	02 c0       	rjmp	.+4      	; 0x260c <__do_copy_data+0x14>
    2608:	07 90       	elpm	r0, Z+
    260a:	0d 92       	st	X+, r0
    260c:	aa 33       	cpi	r26, 0x3A	; 58
    260e:	b1 07       	cpc	r27, r17
    2610:	d9 f7       	brne	.-10     	; 0x2608 <__do_copy_data+0x10>

00002612 <__do_clear_bss>:
    2612:	1d e0       	ldi	r17, 0x0D	; 13
    2614:	aa e3       	ldi	r26, 0x3A	; 58
    2616:	b2 e0       	ldi	r27, 0x02	; 2
    2618:	01 c0       	rjmp	.+2      	; 0x261c <.do_clear_bss_start>

0000261a <.do_clear_bss_loop>:
    261a:	1d 92       	st	X+, r1

0000261c <.do_clear_bss_start>:
    261c:	a8 3b       	cpi	r26, 0xB8	; 184
    261e:	b1 07       	cpc	r27, r17
    2620:	e1 f7       	brne	.-8      	; 0x261a <.do_clear_bss_loop>
    2622:	0e 94 cd 13 	call	0x279a	; 0x279a <main>
    2626:	0c 94 25 ab 	jmp	0x1564a	; 0x1564a <_exit>

0000262a <__bad_interrupt>:
    262a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000262e <systemOnReset>:


void systemOnReset(){
     char SubMenu,KeyPressed,KeyChar,IsMasterReset=False;

     IsPowerOn=False;
    262e:	10 92 9f 03 	sts	0x039F, r1
     if (MCUCSR & 1){   // Power-on Reset
    2632:	04 b6       	in	r0, 0x34	; 52
    2634:	00 fe       	sbrs	r0, 0
    2636:	32 c0       	rjmp	.+100    	; 0x269c <systemOnReset+0x6e>
         MCUCSR=0;lcd_printf(1,1,PSTR("PowerOn"));//Wiznet Blm Ready
    2638:	14 be       	out	0x34, r1	; 52
    263a:	81 e0       	ldi	r24, 0x01	; 1
    263c:	61 e0       	ldi	r22, 0x01	; 1
    263e:	4a e6       	ldi	r20, 0x6A	; 106
    2640:	52 e0       	ldi	r21, 0x02	; 2
    2642:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		 IsPowerOn=True;
    2646:	81 e0       	ldi	r24, 0x01	; 1
    2648:	80 93 9f 03 	sts	0x039F, r24
         //Master Reset Detection
		 PORTF = 0xFF; DDRF = 0xF0;
    264c:	8f ef       	ldi	r24, 0xFF	; 255
    264e:	80 93 62 00 	sts	0x0062, r24
    2652:	80 ef       	ldi	r24, 0xF0	; 240
    2654:	80 93 61 00 	sts	0x0061, r24
		 KeyPressed=_key_scan(1);
    2658:	81 e0       	ldi	r24, 0x01	; 1
    265a:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <_key_scan>
		 KeyChar= _key_btn(KeyPressed);
    265e:	0e 94 49 a3 	call	0x14692	; 0x14692 <_key_btn>
		 if (KeyChar=='5'){
    2662:	85 33       	cpi	r24, 0x35	; 53
    2664:	99 f5       	brne	.+102    	; 0x26cc <systemOnReset+0x9e>
		     system_beep(2);
    2666:	82 e0       	ldi	r24, 0x02	; 2
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	0e 94 ee 14 	call	0x29dc	; 0x29dc <system_beep>
		     IsMasterReset=True;
			 TCCR1B |= (1 << WGM12);
    266e:	8e b5       	in	r24, 0x2e	; 46
    2670:	88 60       	ori	r24, 0x08	; 8
    2672:	8e bd       	out	0x2e, r24	; 46
			 TIMSK |= (1 << OCIE1A);
    2674:	87 b7       	in	r24, 0x37	; 55
    2676:	80 61       	ori	r24, 0x10	; 16
    2678:	87 bf       	out	0x37, r24	; 55
			 sei();          //1/14745600=0,06781684028uS *1400 = 100uS 65535-1400+1=64136
    267a:	78 94       	sei
			 OCR1A   = 15624;//49911 -->0,33847384982639 ms
    267c:	88 e0       	ldi	r24, 0x08	; 8
    267e:	9d e3       	ldi	r25, 0x3D	; 61
    2680:	9b bd       	out	0x2b, r25	; 43
    2682:	8a bd       	out	0x2a, r24	; 42
			 TCCR1B |= ((1 << CS10) | (1 << CS11));
    2684:	8e b5       	in	r24, 0x2e	; 46
    2686:	83 60       	ori	r24, 0x03	; 3
    2688:	8e bd       	out	0x2e, r24	; 46
		     while(IsMasterReset==True){
    268a:	03 c0       	rjmp	.+6      	; 0x2692 <systemOnReset+0x64>
			       SubMenu=FMenuMaster();
				   if (SubMenu==MENU_DONE){
				       IsMasterReset=False;
					   lcd_clear();
    268c:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
					   break;
    2690:	1d c0       	rjmp	.+58     	; 0x26cc <systemOnReset+0x9e>
			 TIMSK |= (1 << OCIE1A);
			 sei();          //1/14745600=0,06781684028uS *1400 = 100uS 65535-1400+1=64136
			 OCR1A   = 15624;//49911 -->0,33847384982639 ms
			 TCCR1B |= ((1 << CS10) | (1 << CS11));
		     while(IsMasterReset==True){
			       SubMenu=FMenuMaster();
    2692:	0e 94 fc 9b 	call	0x137f8	; 0x137f8 <FMenuMaster>
				   if (SubMenu==MENU_DONE){
    2696:	81 30       	cpi	r24, 0x01	; 1
    2698:	e1 f7       	brne	.-8      	; 0x2692 <systemOnReset+0x64>
    269a:	f8 cf       	rjmp	.-16     	; 0x268c <systemOnReset+0x5e>
				   }
			 }		 
		 }
         }
     else 
     if (MCUCSR & 2){   // External Reset
    269c:	04 b6       	in	r0, 0x34	; 52
    269e:	01 fe       	sbrs	r0, 1
    26a0:	06 c0       	rjmp	.+12     	; 0x26ae <systemOnReset+0x80>
         MCUCSR=0;lcd_printf(1,1,PSTR("External"));
    26a2:	14 be       	out	0x34, r1	; 52
    26a4:	81 e0       	ldi	r24, 0x01	; 1
    26a6:	61 e0       	ldi	r22, 0x01	; 1
    26a8:	41 e6       	ldi	r20, 0x61	; 97
    26aa:	52 e0       	ldi	r21, 0x02	; 2
    26ac:	0d c0       	rjmp	.+26     	; 0x26c8 <systemOnReset+0x9a>
        }
     else 
     if (MCUCSR & 4){   // Brown-Out Reset
    26ae:	04 b6       	in	r0, 0x34	; 52
    26b0:	02 fe       	sbrs	r0, 2
    26b2:	06 c0       	rjmp	.+12     	; 0x26c0 <systemOnReset+0x92>
         MCUCSR=0;lcd_printf(1,1,PSTR("BrownOut"));
    26b4:	14 be       	out	0x34, r1	; 52
    26b6:	81 e0       	ldi	r24, 0x01	; 1
    26b8:	61 e0       	ldi	r22, 0x01	; 1
    26ba:	48 e5       	ldi	r20, 0x58	; 88
    26bc:	52 e0       	ldi	r21, 0x02	; 2
    26be:	04 c0       	rjmp	.+8      	; 0x26c8 <systemOnReset+0x9a>
         }
     else		  // Watchdog Reset
        {
         lcd_printf(1,1,PSTR("WatchDog"));
    26c0:	81 e0       	ldi	r24, 0x01	; 1
    26c2:	61 e0       	ldi	r22, 0x01	; 1
    26c4:	4f e4       	ldi	r20, 0x4F	; 79
    26c6:	52 e0       	ldi	r21, 0x02	; 2
    26c8:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
        };
     MCUCSR=0;		  
    26cc:	14 be       	out	0x34, r1	; 52
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    26ce:	8f ef       	ldi	r24, 0xFF	; 255
    26d0:	9f ef       	ldi	r25, 0xFF	; 255
    26d2:	a5 e3       	ldi	r26, 0x35	; 53
    26d4:	81 50       	subi	r24, 0x01	; 1
    26d6:	90 40       	sbci	r25, 0x00	; 0
    26d8:	a0 40       	sbci	r26, 0x00	; 0
    26da:	e1 f7       	brne	.-8      	; 0x26d4 <systemOnReset+0xa6>
    26dc:	00 c0       	rjmp	.+0      	; 0x26de <systemOnReset+0xb0>
    26de:	00 00       	nop
	 _delay_ms(1200);
}
    26e0:	08 95       	ret

000026e2 <SystemInit>:


void SystemInit(){
	unsigned int __delay =300;
	lcd_init();
    26e2:	0e 94 8b a1 	call	0x14316	; 0x14316 <lcd_init>
	lcd_clear();
    26e6:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
	BackLightTrig();
    26ea:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <BackLightTrig>
	systemOnReset();
    26ee:	0e 94 17 13 	call	0x262e	; 0x262e <systemOnReset>

	lcd_printf(4, 1, PSTR("Initialize... "));
    26f2:	84 e0       	ldi	r24, 0x04	; 4
    26f4:	61 e0       	ldi	r22, 0x01	; 1
    26f6:	40 e4       	ldi	r20, 0x40	; 64
    26f8:	52 e0       	ldi	r21, 0x02	; 2
    26fa:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
    26fe:	8f ef       	ldi	r24, 0xFF	; 255
    2700:	9f e7       	ldi	r25, 0x7F	; 127
    2702:	ad e0       	ldi	r26, 0x0D	; 13
    2704:	81 50       	subi	r24, 0x01	; 1
    2706:	90 40       	sbci	r25, 0x00	; 0
    2708:	a0 40       	sbci	r26, 0x00	; 0
    270a:	e1 f7       	brne	.-8      	; 0x2704 <SystemInit+0x22>
    270c:	00 c0       	rjmp	.+0      	; 0x270e <SystemInit+0x2c>
    270e:	00 00       	nop
	_delay_ms(__delay);
	PORTA = 0XFF;		// Buffer for PORTA
    2710:	8f ef       	ldi	r24, 0xFF	; 255
    2712:	8b bb       	out	0x1b, r24	; 27
	DDRA = 0xFF;		// Pin 3 out (SS _SPI_SLAVE)
    2714:	8a bb       	out	0x1a, r24	; 26
	sbi(PORTA, 3);		// Disable SS _SPI_SLAVE
    2716:	db 9a       	sbi	0x1b, 3	; 27

	//Buzzer PORTB.5
	PORTB = 0xFF;DDRB = 0xFF;
    2718:	88 bb       	out	0x18, r24	; 24
    271a:	87 bb       	out	0x17, r24	; 23
	PORTD = 0b00001101;
    271c:	9d e0       	ldi	r25, 0x0D	; 13
    271e:	92 bb       	out	0x12, r25	; 18
    DDRD =  0b00001001;
    2720:	99 e0       	ldi	r25, 0x09	; 9
    2722:	91 bb       	out	0x11, r25	; 17

	TWBR = 0xFF;
    2724:	80 93 70 00 	sts	0x0070, r24
    //MMC
	PORTE = 0x0E;		// Buffer for PORTE
    2728:	9e e0       	ldi	r25, 0x0E	; 14
    272a:	93 b9       	out	0x03, r25	; 3
	DDRE = 0x0E;		// Pin 3 out (SS _SPI_MMC), pin 2 out (HB)
    272c:	92 b9       	out	0x02, r25	; 2
	sbi(PORTE, 3);		// Disable SS _SPI_MMC
    272e:	1b 9a       	sbi	0x03, 3	; 3
	cbi(PORTE, 2);		// HB on
    2730:	1a 98       	cbi	0x03, 2	; 3

	//Keypad
	PORTF = 0xFF;		// Buffer for PORTF
    2732:	80 93 62 00 	sts	0x0062, r24
	DDRF = 0xF0;		// 4 bit row, 4 bit column
    2736:	80 ef       	ldi	r24, 0xF0	; 240
    2738:	80 93 61 00 	sts	0x0061, r24

  	_spi_init(0,1);//Slave
    273c:	80 e0       	ldi	r24, 0x00	; 0
    273e:	61 e0       	ldi	r22, 0x01	; 1
    2740:	0e 94 ef a3 	call	0x147de	; 0x147de <_spi_init>
	sbi(DDRB,3);sbi(PORTB,3);//MISO Output
    2744:	bb 9a       	sbi	0x17, 3	; 23
    2746:	c3 9a       	sbi	0x18, 3	; 24
	cbi(DDRB,2);sbi(PORTB,2);//MOSI Input
    2748:	ba 98       	cbi	0x17, 2	; 23
    274a:	c2 9a       	sbi	0x18, 2	; 24
	cbi(DDRB,1);sbi(PORTB,1);//SCK  Input
    274c:	b9 98       	cbi	0x17, 1	; 23
    274e:	c1 9a       	sbi	0x18, 1	; 24

	TCCR1B |= (1 << WGM12);
    2750:	8e b5       	in	r24, 0x2e	; 46
    2752:	88 60       	ori	r24, 0x08	; 8
    2754:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1 << OCIE1A);
    2756:	87 b7       	in	r24, 0x37	; 55
    2758:	80 61       	ori	r24, 0x10	; 16
    275a:	87 bf       	out	0x37, r24	; 55
	sei();          //1/14745600=0,06781684028uS *1400 = 100uS 65535-1400+1=64136
    275c:	78 94       	sei
	OCR1A   = 15624;//49911 -->0,33847384982639 ms
    275e:	88 e0       	ldi	r24, 0x08	; 8
    2760:	9d e3       	ldi	r25, 0x3D	; 61
    2762:	9b bd       	out	0x2b, r25	; 43
    2764:	8a bd       	out	0x2a, r24	; 42
	TCCR1B |= ((1 << CS10) | (1 << CS11));
    2766:	8e b5       	in	r24, 0x2e	; 46
    2768:	83 60       	ori	r24, 0x03	; 3
    276a:	8e bd       	out	0x2e, r24	; 46

	SendSlaveCommand(SC_SLAVE,ST_NONE);
    276c:	81 e0       	ldi	r24, 0x01	; 1
    276e:	60 e0       	ldi	r22, 0x00	; 0
    2770:	0e 94 29 19 	call	0x3252	; 0x3252 <SendSlaveCommand>
	
	InitComport();
    2774:	0e 94 79 19 	call	0x32f2	; 0x32f2 <InitComport>
	_LIGHT_SET;
    2778:	81 e0       	ldi	r24, 0x01	; 1
    277a:	80 93 91 03 	sts	0x0391, r24
    277e:	10 92 92 03 	sts	0x0392, r1
    2782:	e5 e6       	ldi	r30, 0x65	; 101
    2784:	f0 e0       	ldi	r31, 0x00	; 0
    2786:	80 81       	ld	r24, Z
    2788:	8d 7f       	andi	r24, 0xFD	; 253
    278a:	80 83       	st	Z, r24
	InitPrinter();
    278c:	0e 94 38 5c 	call	0xb870	; 0xb870 <InitPrinter>
    InitializeConnection();
    2790:	0e 94 c6 4b 	call	0x978c	; 0x978c <InitializeConnection>
	lcd_clear();
    2794:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
}
    2798:	08 95       	ret

0000279a <main>:

//Master4 =1+20++2+1
void SystemInit();
//Program Utama
int main(){
	SystemInit();
    279a:	0e 94 71 13 	call	0x26e2	; 0x26e2 <SystemInit>
	while(1){
	//FTestChar();
	//TestUserInput();
    FMenuIdle();
    279e:	0e 94 5c 9f 	call	0x13eb8	; 0x13eb8 <FMenuIdle>
    27a2:	fd cf       	rjmp	.-6      	; 0x279e <main+0x4>

000027a4 <__vector_12>:
	  strDispenserName3,
	  strDispenserName4,
	  strDispenserName5,
};

ISR(TIMER1_COMPA_vect){//Timer Overflow 1ms
    27a4:	1f 92       	push	r1
    27a6:	0f 92       	push	r0
    27a8:	0f b6       	in	r0, 0x3f	; 63
    27aa:	0f 92       	push	r0
    27ac:	11 24       	eor	r1, r1
    27ae:	6f 93       	push	r22
    27b0:	7f 93       	push	r23
    27b2:	8f 93       	push	r24
    27b4:	9f 93       	push	r25
	if(__key_light == 1){
    27b6:	80 91 91 03 	lds	r24, 0x0391
    27ba:	81 30       	cpi	r24, 0x01	; 1
    27bc:	81 f4       	brne	.+32     	; 0x27de <__vector_12+0x3a>
		__key_lgtcnt++;
    27be:	80 91 92 03 	lds	r24, 0x0392
    27c2:	8f 5f       	subi	r24, 0xFF	; 255
    27c4:	80 93 92 03 	sts	0x0392, r24
		if(__key_lgtcnt == 150){
    27c8:	86 39       	cpi	r24, 0x96	; 150
    27ca:	49 f4       	brne	.+18     	; 0x27de <__vector_12+0x3a>
		   __key_light = 0; 
    27cc:	10 92 91 03 	sts	0x0391, r1
		   __key_lgtcnt = 0; 
    27d0:	10 92 92 03 	sts	0x0392, r1
		   sbi(PORTG, 1);
    27d4:	80 91 65 00 	lds	r24, 0x0065
    27d8:	82 60       	ori	r24, 0x02	; 2
    27da:	80 93 65 00 	sts	0x0065, r24
		   }
	}

	//Beep
	if (TimBeep>0){
    27de:	80 91 9b 02 	lds	r24, 0x029B
    27e2:	88 23       	and	r24, r24
    27e4:	31 f0       	breq	.+12     	; 0x27f2 <__vector_12+0x4e>
	    TimBeep--;
    27e6:	81 50       	subi	r24, 0x01	; 1
    27e8:	80 93 9b 02 	sts	0x029B, r24
		DDRB=(DDRB|0b00100000);
    27ec:	bd 9a       	sbi	0x17, 5	; 23
	    PORTB=(PORTB&0b11011111);
    27ee:	c5 98       	cbi	0x18, 5	; 24
    27f0:	05 c0       	rjmp	.+10     	; 0x27fc <__vector_12+0x58>
	    }
	else{PORTB=(PORTB|~PORTB);
    27f2:	98 b3       	in	r25, 0x18	; 24
    27f4:	88 b3       	in	r24, 0x18	; 24
    27f6:	80 95       	com	r24
    27f8:	89 2b       	or	r24, r25
    27fa:	88 bb       	out	0x18, r24	; 24
		}
    //LocalAccount
	TimLocAcc++;
    27fc:	80 91 99 02 	lds	r24, 0x0299
    2800:	8f 5f       	subi	r24, 0xFF	; 255
    2802:	80 93 99 02 	sts	0x0299, r24
	//DisplaTicker
    TimTicker++;
    2806:	80 91 6e 02 	lds	r24, 0x026E
    280a:	8f 5f       	subi	r24, 0xFF	; 255
    280c:	80 93 6e 02 	sts	0x026E, r24
	TimPressed++;
    2810:	80 91 6f 02 	lds	r24, 0x026F
    2814:	8f 5f       	subi	r24, 0xFF	; 255
    2816:	80 93 6f 02 	sts	0x026F, r24
	if ((TimPressed%5)==0){
    281a:	65 e0       	ldi	r22, 0x05	; 5
    281c:	0e 94 7e a7 	call	0x14efc	; 0x14efc <__udivmodqi4>
    2820:	99 23       	and	r25, r25
    2822:	71 f4       	brne	.+28     	; 0x2840 <__vector_12+0x9c>
	    PORTE = PORTE^0x04;
    2824:	83 b1       	in	r24, 0x03	; 3
    2826:	94 e0       	ldi	r25, 0x04	; 4
    2828:	89 27       	eor	r24, r25
    282a:	83 b9       	out	0x03, r24	; 3
	    TimDisplay++;
    282c:	80 91 70 02 	lds	r24, 0x0270
    2830:	8f 5f       	subi	r24, 0xFF	; 255
    2832:	80 93 70 02 	sts	0x0270, r24
		TimPrintBusy++;
    2836:	80 91 95 02 	lds	r24, 0x0295
    283a:	8f 5f       	subi	r24, 0xFF	; 255
    283c:	80 93 95 02 	sts	0x0295, r24
	}
	if ((TimPressed%PRESSED_DELAY)==0){
    2840:	80 91 6f 02 	lds	r24, 0x026F
    2844:	6a e0       	ldi	r22, 0x0A	; 10
    2846:	0e 94 7e a7 	call	0x14efc	; 0x14efc <__udivmodqi4>
    284a:	99 23       	and	r25, r25
    284c:	91 f4       	brne	.+36     	; 0x2872 <__vector_12+0xce>
	     ProcTimeOut++;
    284e:	80 91 9a 02 	lds	r24, 0x029A
    2852:	8f 5f       	subi	r24, 0xFF	; 255
    2854:	80 93 9a 02 	sts	0x029A, r24
		 if (IsCardTransaction==True)
    2858:	80 91 77 02 	lds	r24, 0x0277
    285c:	81 30       	cpi	r24, 0x01	; 1
    285e:	49 f4       	brne	.+18     	; 0x2872 <__vector_12+0xce>
		     TimMenuTimeout++;
    2860:	80 91 96 03 	lds	r24, 0x0396
    2864:	90 91 97 03 	lds	r25, 0x0397
    2868:	01 96       	adiw	r24, 0x01	; 1
    286a:	90 93 97 03 	sts	0x0397, r25
    286e:	80 93 96 03 	sts	0x0396, r24
	}
	TimSend++;
    2872:	80 91 7d 0d 	lds	r24, 0x0D7D
    2876:	8f 5f       	subi	r24, 0xFF	; 255
    2878:	80 93 7d 0d 	sts	0x0D7D, r24
}
    287c:	9f 91       	pop	r25
    287e:	8f 91       	pop	r24
    2880:	7f 91       	pop	r23
    2882:	6f 91       	pop	r22
    2884:	0f 90       	pop	r0
    2886:	0f be       	out	0x3f, r0	; 63
    2888:	0f 90       	pop	r0
    288a:	1f 90       	pop	r1
    288c:	18 95       	reti

0000288e <RePrintStandalone>:

char RePrintStandalone(char FIPAddr){
     char Result=PS_NONE;

   return Result;
}
    288e:	86 e1       	ldi	r24, 0x16	; 22
    2890:	08 95       	ret

00002892 <GetPumpStatusLabel>:
	 //BAsedOnGrade
   return Result;
}


char GetPumpStatusLabel(char xPumpStatus){
    2892:	8e 31       	cpi	r24, 0x1E	; 30
    2894:	30 f4       	brcc	.+12     	; 0x28a2 <GetPumpStatusLabel+0x10>
    2896:	e8 2f       	mov	r30, r24
    2898:	f0 e0       	ldi	r31, 0x00	; 0
    289a:	e4 5a       	subi	r30, 0xA4	; 164
    289c:	fe 4f       	sbci	r31, 0xFE	; 254
    289e:	80 81       	ld	r24, Z
    28a0:	08 95       	ret
    28a2:	88 e7       	ldi	r24, 0x78	; 120
	 default:
          Result='x';
		  break;         	 
	 }
  return Result;	 
}
    28a4:	08 95       	ret

000028a6 <SendPoolingCommand>:
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
    28a6:	80 93 8b 06 	sts	0x068B, r24
	 PoolMsg=plMsg;
    28aa:	60 93 cc 0c 	sts	0x0CCC, r22
     IsControlPooling=True;
    28ae:	81 e0       	ldi	r24, 0x01	; 1
    28b0:	80 93 62 02 	sts	0x0262, r24
}
    28b4:	08 95       	ret

000028b6 <ScanHiddenKeyFlow>:
	    }
    }//MSGDetection
}

void ScanHiddenKeyFlow(char KeyIn){
}
    28b6:	08 95       	ret

000028b8 <__vector_18>:
	else
	if (IFType==IT_STANDALONE)ScanStandaloneFlow(dataSPI);

}

ISR(USART0_RX_vect){
    28b8:	1f 92       	push	r1
    28ba:	0f 92       	push	r0
    28bc:	0f b6       	in	r0, 0x3f	; 63
    28be:	0f 92       	push	r0
    28c0:	11 24       	eor	r1, r1
    28c2:	8f 93       	push	r24
    28c4:	9f 93       	push	r25
	char dataRX0,IsSPI=False;
	dataRX0= UDR0;
    28c6:	8c b1       	in	r24, 0x0c	; 12
	//PrintBusyDetection
	if ((IsBusyIdlePrinting==True)||(IsBusyFreePrinting==True)){
    28c8:	90 91 91 02 	lds	r25, 0x0291
    28cc:	91 30       	cpi	r25, 0x01	; 1
    28ce:	21 f0       	breq	.+8      	; 0x28d8 <__vector_18+0x20>
    28d0:	90 91 93 02 	lds	r25, 0x0293
    28d4:	91 30       	cpi	r25, 0x01	; 1
    28d6:	51 f4       	brne	.+20     	; 0x28ec <__vector_18+0x34>
	    if (dataRX0==19)IsBusyPrint=True;
    28d8:	83 31       	cpi	r24, 0x13	; 19
    28da:	21 f4       	brne	.+8      	; 0x28e4 <__vector_18+0x2c>
    28dc:	81 e0       	ldi	r24, 0x01	; 1
    28de:	80 93 92 02 	sts	0x0292, r24
    28e2:	04 c0       	rjmp	.+8      	; 0x28ec <__vector_18+0x34>
		else 
	    if (dataRX0==17)IsBusyPrint=False;	
    28e4:	81 31       	cpi	r24, 0x11	; 17
    28e6:	11 f4       	brne	.+4      	; 0x28ec <__vector_18+0x34>
    28e8:	10 92 92 02 	sts	0x0292, r1
	}
}
    28ec:	9f 91       	pop	r25
    28ee:	8f 91       	pop	r24
    28f0:	0f 90       	pop	r0
    28f2:	0f be       	out	0x3f, r0	; 63
    28f4:	0f 90       	pop	r0
    28f6:	1f 90       	pop	r1
    28f8:	18 95       	reti

000028fa <ScanCommand>:

char ScanCommand(char *strFlow,char *fCommand){
     char Result;
	 Result=False;
   return Result;
}
    28fa:	80 e0       	ldi	r24, 0x00	; 0
    28fc:	08 95       	ret

000028fe <ConfigProtocol>:
}

void ConfigProtocol(char dataIn){
     static char Conflow[7];
    //Configuration Data Request 
	if ((Conflow[6]=='i')&&(Conflow[5]=='C')&&(Conflow[4]=='o')&&(Conflow[3]=='n')&&(Conflow[2]=='f')&&(Conflow[1]=='?')&&(Conflow[0]==0x0D)&&(dataIn==0x0A)){
    28fe:	90 91 7e 03 	lds	r25, 0x037E
    2902:	99 36       	cpi	r25, 0x69	; 105
    2904:	e9 f4       	brne	.+58     	; 0x2940 <ConfigProtocol+0x42>
    2906:	90 91 7d 03 	lds	r25, 0x037D
    290a:	93 34       	cpi	r25, 0x43	; 67
    290c:	c9 f4       	brne	.+50     	; 0x2940 <ConfigProtocol+0x42>
    290e:	90 91 7c 03 	lds	r25, 0x037C
    2912:	9f 36       	cpi	r25, 0x6F	; 111
    2914:	a9 f4       	brne	.+42     	; 0x2940 <ConfigProtocol+0x42>
    2916:	90 91 7b 03 	lds	r25, 0x037B
    291a:	9e 36       	cpi	r25, 0x6E	; 110
    291c:	89 f4       	brne	.+34     	; 0x2940 <ConfigProtocol+0x42>
    291e:	90 91 7a 03 	lds	r25, 0x037A
    2922:	96 36       	cpi	r25, 0x66	; 102
    2924:	69 f4       	brne	.+26     	; 0x2940 <ConfigProtocol+0x42>
    2926:	90 91 79 03 	lds	r25, 0x0379
    292a:	9f 33       	cpi	r25, 0x3F	; 63
    292c:	49 f4       	brne	.+18     	; 0x2940 <ConfigProtocol+0x42>
    292e:	90 91 78 03 	lds	r25, 0x0378
    2932:	9d 30       	cpi	r25, 0x0D	; 13
    2934:	29 f4       	brne	.+10     	; 0x2940 <ConfigProtocol+0x42>
    2936:	8a 30       	cpi	r24, 0x0A	; 10
    2938:	19 f4       	brne	.+6      	; 0x2940 <ConfigProtocol+0x42>
	     //SendConfigParamater();        
		 ConfigCommand=CC_SEND_CONFIG;
    293a:	92 e0       	ldi	r25, 0x02	; 2
    293c:	90 93 8f 02 	sts	0x028F, r25
	}

	if (IsConfigFlow==True){        
    2940:	90 91 63 02 	lds	r25, 0x0263
    2944:	91 30       	cpi	r25, 0x01	; 1
    2946:	71 f4       	brne	.+28     	; 0x2964 <ConfigProtocol+0x66>
	    rcv_trans[char_count]=dataIn;
    2948:	20 91 67 02 	lds	r18, 0x0267
    294c:	30 91 68 02 	lds	r19, 0x0268
    2950:	f9 01       	movw	r30, r18
    2952:	ef 5f       	subi	r30, 0xFF	; 255
    2954:	f5 4f       	sbci	r31, 0xF5	; 245
    2956:	80 83       	st	Z, r24
	    char_count++; 
    2958:	2f 5f       	subi	r18, 0xFF	; 255
    295a:	3f 4f       	sbci	r19, 0xFF	; 255
    295c:	30 93 68 02 	sts	0x0268, r19
    2960:	20 93 67 02 	sts	0x0267, r18
	}
	if ((Conflow[0]==0x04)&&(dataIn==0x40)){
    2964:	90 91 78 03 	lds	r25, 0x0378
    2968:	94 30       	cpi	r25, 0x04	; 4
    296a:	51 f4       	brne	.+20     	; 0x2980 <ConfigProtocol+0x82>
    296c:	80 34       	cpi	r24, 0x40	; 64
    296e:	e9 f4       	brne	.+58     	; 0x29aa <ConfigProtocol+0xac>
	     IsConfigFlow=True;
    2970:	21 e0       	ldi	r18, 0x01	; 1
    2972:	20 93 63 02 	sts	0x0263, r18
		 char_count=0;
    2976:	10 92 68 02 	sts	0x0268, r1
    297a:	10 92 67 02 	sts	0x0267, r1
    297e:	15 c0       	rjmp	.+42     	; 0x29aa <ConfigProtocol+0xac>
	}
	//SavingData
	if ((Conflow[0]==0x05)&&(dataIn==0x50)){
    2980:	95 30       	cpi	r25, 0x05	; 5
    2982:	99 f4       	brne	.+38     	; 0x29aa <ConfigProtocol+0xac>
    2984:	80 35       	cpi	r24, 0x50	; 80
    2986:	89 f4       	brne	.+34     	; 0x29aa <ConfigProtocol+0xac>
	     transLength=char_count;
    2988:	20 91 67 02 	lds	r18, 0x0267
    298c:	30 91 68 02 	lds	r19, 0x0268
    2990:	30 93 6a 02 	sts	0x026A, r19
    2994:	20 93 69 02 	sts	0x0269, r18
		 char_count=0;
    2998:	10 92 68 02 	sts	0x0268, r1
    299c:	10 92 67 02 	sts	0x0267, r1
	     IsConfigFlow=False;
    29a0:	10 92 63 02 	sts	0x0263, r1
		 ConfigCommand=CC_SAVE_CONFIG;
    29a4:	21 e0       	ldi	r18, 0x01	; 1
    29a6:	20 93 8f 02 	sts	0x028F, r18
		 //SaveConfigParameter();
	}

	//Shifting
	Conflow[6]=Conflow[5];
    29aa:	20 91 7d 03 	lds	r18, 0x037D
    29ae:	20 93 7e 03 	sts	0x037E, r18
	Conflow[5]=Conflow[4];
    29b2:	20 91 7c 03 	lds	r18, 0x037C
    29b6:	20 93 7d 03 	sts	0x037D, r18
	Conflow[4]=Conflow[3];
    29ba:	20 91 7b 03 	lds	r18, 0x037B
    29be:	20 93 7c 03 	sts	0x037C, r18
	Conflow[3]=Conflow[2];
    29c2:	20 91 7a 03 	lds	r18, 0x037A
    29c6:	20 93 7b 03 	sts	0x037B, r18
	Conflow[2]=Conflow[1];
    29ca:	20 91 79 03 	lds	r18, 0x0379
    29ce:	20 93 7a 03 	sts	0x037A, r18
	Conflow[1]=Conflow[0];
    29d2:	90 93 79 03 	sts	0x0379, r25
	Conflow[0]=dataIn;
    29d6:	80 93 78 03 	sts	0x0378, r24

}
    29da:	08 95       	ret

000029dc <system_beep>:
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    29dc:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    29de:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    29e0:	80 93 9b 02 	sts	0x029B, r24
}
    29e4:	08 95       	ret

000029e6 <systemRestart>:
	 iRestart=0;
	 while(iRestart<100){
	       strRestart[iRestart]=iRestart;
	       iRestart++;	 
	 }
}
    29e6:	08 95       	ret

000029e8 <systemForceType>:

char systemForceType(){
     char Result,KeyChar;
	 lcd_printf(4,1,PSTR("[1]Slave [2]Standalone"));
    29e8:	84 e0       	ldi	r24, 0x04	; 4
    29ea:	61 e0       	ldi	r22, 0x01	; 1
    29ec:	45 e8       	ldi	r20, 0x85	; 133
    29ee:	53 e2       	ldi	r21, 0x23	; 35
    29f0:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
	 system_beep(1);
    29f4:	81 e0       	ldi	r24, 0x01	; 1
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	0e 94 ee 14 	call	0x29dc	; 0x29dc <system_beep>
    29fc:	8f e4       	ldi	r24, 0x4F	; 79
    29fe:	93 ec       	ldi	r25, 0xC3	; 195
    2a00:	01 97       	sbiw	r24, 0x01	; 1
    2a02:	f1 f7       	brne	.-4      	; 0x2a00 <systemForceType+0x18>
    2a04:	00 c0       	rjmp	.+0      	; 0x2a06 <systemForceType+0x1e>
    2a06:	00 00       	nop
	 _delay_ms(200);
	 system_beep(2);
    2a08:	82 e0       	ldi	r24, 0x02	; 2
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	0e 94 ee 14 	call	0x29dc	; 0x29dc <system_beep>
	 while(1){
	    KeyChar=_key_btn(_key_scan(1));
    2a10:	81 e0       	ldi	r24, 0x01	; 1
    2a12:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <_key_scan>
    2a16:	0e 94 49 a3 	call	0x14692	; 0x14692 <_key_btn>
		if ((KeyChar=='1')||(KeyChar=='2')){
    2a1a:	98 2f       	mov	r25, r24
    2a1c:	91 53       	subi	r25, 0x31	; 49
    2a1e:	92 30       	cpi	r25, 0x02	; 2
    2a20:	b8 f7       	brcc	.-18     	; 0x2a10 <systemForceType+0x28>
		    Result=KeyChar;
			break;
		}
	 }
	return Result;
}
    2a22:	08 95       	ret

00002a24 <system_stop>:

void system_stop(){
	 char __key,__num;
	 lcd_printf(4,1,PSTR("Press any key..     "));
    2a24:	84 e0       	ldi	r24, 0x04	; 4
    2a26:	61 e0       	ldi	r22, 0x01	; 1
    2a28:	40 e7       	ldi	r20, 0x70	; 112
    2a2a:	53 e2       	ldi	r21, 0x23	; 35
    2a2c:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
	 system_beep(5);
    2a30:	85 e0       	ldi	r24, 0x05	; 5
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	0e 94 ee 14 	call	0x29dc	; 0x29dc <system_beep>
	 while(1){
		__key = _key_scan(1);
    2a38:	81 e0       	ldi	r24, 0x01	; 1
    2a3a:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <_key_scan>
		__num = _key_btn(__key);
    2a3e:	0e 94 49 a3 	call	0x14692	; 0x14692 <_key_btn>
		if ((__num>='0')&&(__num<='9')||(IsStandAloneDetected==True)) 
    2a42:	80 53       	subi	r24, 0x30	; 48
    2a44:	8a 30       	cpi	r24, 0x0A	; 10
    2a46:	20 f0       	brcs	.+8      	; 0x2a50 <system_stop+0x2c>
    2a48:	80 91 7b 02 	lds	r24, 0x027B
    2a4c:	81 30       	cpi	r24, 0x01	; 1
    2a4e:	a1 f7       	brne	.-24     	; 0x2a38 <system_stop+0x14>
    2a50:	08 95       	ret

00002a52 <DisplayScreenIdle>:
		break;
	 }
}

void DisplayScreenIdle(void){
    2a52:	cf 92       	push	r12
    2a54:	df 92       	push	r13
    2a56:	ef 92       	push	r14
    2a58:	ff 92       	push	r15
    2a5a:	0f 93       	push	r16
    2a5c:	1f 93       	push	r17
    2a5e:	df 93       	push	r29
    2a60:	cf 93       	push	r28
    2a62:	cd b7       	in	r28, 0x3d	; 61
    2a64:	de b7       	in	r29, 0x3e	; 62
    2a66:	a8 97       	sbiw	r28, 0x28	; 40
    2a68:	0f b6       	in	r0, 0x3f	; 63
    2a6a:	f8 94       	cli
    2a6c:	de bf       	out	0x3e, r29	; 62
    2a6e:	0f be       	out	0x3f, r0	; 63
    2a70:	cd bf       	out	0x3d, r28	; 61
char strCodeName[10],strVersion[10],lcdteks[20];
    sprintf_P(strCodeName,PSTR(CODE_NAME)); 
    2a72:	00 d0       	rcall	.+0      	; 0x2a74 <DisplayScreenIdle+0x22>
    2a74:	00 d0       	rcall	.+0      	; 0x2a76 <DisplayScreenIdle+0x24>
    2a76:	7e 01       	movw	r14, r28
    2a78:	08 94       	sec
    2a7a:	e1 1c       	adc	r14, r1
    2a7c:	f1 1c       	adc	r15, r1
    2a7e:	ad b7       	in	r26, 0x3d	; 61
    2a80:	be b7       	in	r27, 0x3e	; 62
    2a82:	12 96       	adiw	r26, 0x02	; 2
    2a84:	fc 92       	st	X, r15
    2a86:	ee 92       	st	-X, r14
    2a88:	11 97       	sbiw	r26, 0x01	; 1
    2a8a:	89 e6       	ldi	r24, 0x69	; 105
    2a8c:	93 e2       	ldi	r25, 0x23	; 35
    2a8e:	14 96       	adiw	r26, 0x04	; 4
    2a90:	9c 93       	st	X, r25
    2a92:	8e 93       	st	-X, r24
    2a94:	13 97       	sbiw	r26, 0x03	; 3
    2a96:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    sprintf_P(strVersion,PSTR(VERSION_NUM)); 
    2a9a:	8e 01       	movw	r16, r28
    2a9c:	05 5f       	subi	r16, 0xF5	; 245
    2a9e:	1f 4f       	sbci	r17, 0xFF	; 255
    2aa0:	ed b7       	in	r30, 0x3d	; 61
    2aa2:	fe b7       	in	r31, 0x3e	; 62
    2aa4:	12 83       	std	Z+2, r17	; 0x02
    2aa6:	01 83       	std	Z+1, r16	; 0x01
    2aa8:	84 e6       	ldi	r24, 0x64	; 100
    2aaa:	93 e2       	ldi	r25, 0x23	; 35
    2aac:	94 83       	std	Z+4, r25	; 0x04
    2aae:	83 83       	std	Z+3, r24	; 0x03
    2ab0:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    sprintf_P(lcdteks,PSTR("%s %s"),strCodeName,strVersion); 
    2ab4:	00 d0       	rcall	.+0      	; 0x2ab6 <DisplayScreenIdle+0x64>
    2ab6:	00 d0       	rcall	.+0      	; 0x2ab8 <DisplayScreenIdle+0x66>
    2ab8:	ed b7       	in	r30, 0x3d	; 61
    2aba:	fe b7       	in	r31, 0x3e	; 62
    2abc:	31 96       	adiw	r30, 0x01	; 1
    2abe:	85 e1       	ldi	r24, 0x15	; 21
    2ac0:	c8 2e       	mov	r12, r24
    2ac2:	d1 2c       	mov	r13, r1
    2ac4:	cc 0e       	add	r12, r28
    2ac6:	dd 1e       	adc	r13, r29
    2ac8:	ad b7       	in	r26, 0x3d	; 61
    2aca:	be b7       	in	r27, 0x3e	; 62
    2acc:	12 96       	adiw	r26, 0x02	; 2
    2ace:	dc 92       	st	X, r13
    2ad0:	ce 92       	st	-X, r12
    2ad2:	11 97       	sbiw	r26, 0x01	; 1
    2ad4:	8e e5       	ldi	r24, 0x5E	; 94
    2ad6:	93 e2       	ldi	r25, 0x23	; 35
    2ad8:	93 83       	std	Z+3, r25	; 0x03
    2ada:	82 83       	std	Z+2, r24	; 0x02
    2adc:	f5 82       	std	Z+5, r15	; 0x05
    2ade:	e4 82       	std	Z+4, r14	; 0x04
    2ae0:	17 83       	std	Z+7, r17	; 0x07
    2ae2:	06 83       	std	Z+6, r16	; 0x06
    2ae4:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	lcd_clear();
    2ae8:	ed b7       	in	r30, 0x3d	; 61
    2aea:	fe b7       	in	r31, 0x3e	; 62
    2aec:	38 96       	adiw	r30, 0x08	; 8
    2aee:	0f b6       	in	r0, 0x3f	; 63
    2af0:	f8 94       	cli
    2af2:	fe bf       	out	0x3e, r31	; 62
    2af4:	0f be       	out	0x3f, r0	; 63
    2af6:	ed bf       	out	0x3d, r30	; 61
    2af8:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
	lcd_print(1,1,lcdteks);
    2afc:	81 e0       	ldi	r24, 0x01	; 1
    2afe:	61 e0       	ldi	r22, 0x01	; 1
    2b00:	a6 01       	movw	r20, r12
    2b02:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
}
    2b06:	a8 96       	adiw	r28, 0x28	; 40
    2b08:	0f b6       	in	r0, 0x3f	; 63
    2b0a:	f8 94       	cli
    2b0c:	de bf       	out	0x3e, r29	; 62
    2b0e:	0f be       	out	0x3f, r0	; 63
    2b10:	cd bf       	out	0x3d, r28	; 61
    2b12:	cf 91       	pop	r28
    2b14:	df 91       	pop	r29
    2b16:	1f 91       	pop	r17
    2b18:	0f 91       	pop	r16
    2b1a:	ff 90       	pop	r15
    2b1c:	ef 90       	pop	r14
    2b1e:	df 90       	pop	r13
    2b20:	cf 90       	pop	r12
    2b22:	08 95       	ret

00002b24 <Low>:

char Low(char X){
     char Result;
	 Result=(0x0F&X);
	 return Result;
}
    2b24:	8f 70       	andi	r24, 0x0F	; 15
    2b26:	08 95       	ret

00002b28 <High>:
char High(char X){
     char Result;
	 Result=((X>>4)&(0x0F));
	 return Result;
}
    2b28:	82 95       	swap	r24
    2b2a:	8f 70       	andi	r24, 0x0F	; 15
    2b2c:	08 95       	ret

00002b2e <Str>:
char Str(char H){
unsigned char Conv=0;
        if ((H>=0)&&(H<=9)) Conv='0'+H;
    2b2e:	8a 30       	cpi	r24, 0x0A	; 10
    2b30:	10 f4       	brcc	.+4      	; 0x2b36 <Str+0x8>
    2b32:	80 5d       	subi	r24, 0xD0	; 208
    2b34:	08 95       	ret
        else
        if ((H>=0x0A)&&(H<=0x0F)) Conv='A'+(H-10);    
    2b36:	98 2f       	mov	r25, r24
    2b38:	9a 50       	subi	r25, 0x0A	; 10
    2b3a:	96 30       	cpi	r25, 0x06	; 6
    2b3c:	10 f4       	brcc	.+4      	; 0x2b42 <Str+0x14>
    2b3e:	89 5c       	subi	r24, 0xC9	; 201
    2b40:	08 95       	ret
     char Result;
	 Result=((X>>4)&(0x0F));
	 return Result;
}
char Str(char H){
unsigned char Conv=0;
    2b42:	80 e0       	ldi	r24, 0x00	; 0
        if ((H>=0)&&(H<=9)) Conv='0'+H;
        else
        if ((H>=0x0A)&&(H<=0x0F)) Conv='A'+(H-10);    
        return (Conv);
}
    2b44:	08 95       	ret

00002b46 <charToHex>:

void charToHex(char X, char *Result){
    2b46:	1f 93       	push	r17
    2b48:	cf 93       	push	r28
    2b4a:	df 93       	push	r29
    2b4c:	18 2f       	mov	r17, r24
    2b4e:	eb 01       	movw	r28, r22
     Result[0]=Str(High(X));
    2b50:	82 95       	swap	r24
    2b52:	8f 70       	andi	r24, 0x0F	; 15
    2b54:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <Str>
    2b58:	88 83       	st	Y, r24
	 Result[1]=Str(Low(X));
    2b5a:	81 2f       	mov	r24, r17
    2b5c:	8f 70       	andi	r24, 0x0F	; 15
    2b5e:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <Str>
    2b62:	89 83       	std	Y+1, r24	; 0x01
	 Result[2]=0;
    2b64:	1a 82       	std	Y+2, r1	; 0x02
	 
}
    2b66:	df 91       	pop	r29
    2b68:	cf 91       	pop	r28
    2b6a:	1f 91       	pop	r17
    2b6c:	08 95       	ret

00002b6e <strToInt>:

char strToInt(char *str){
     char Result;
     Result=(((str[0]-'0')*10) +(str[0]-'0'));
    2b6e:	fc 01       	movw	r30, r24
    2b70:	90 81       	ld	r25, Z
    2b72:	8b e0       	ldi	r24, 0x0B	; 11
    2b74:	98 9f       	mul	r25, r24
    2b76:	80 2d       	mov	r24, r0
    2b78:	11 24       	eor	r1, r1
	 return Result;
}
    2b7a:	80 51       	subi	r24, 0x10	; 16
    2b7c:	08 95       	ret

00002b7e <intToStr>:

void intToStr(char X, char *str){
    2b7e:	28 2f       	mov	r18, r24
    2b80:	fb 01       	movw	r30, r22
     char R,P,S;
	 R=X/100;
    2b82:	64 e6       	ldi	r22, 0x64	; 100
    2b84:	0e 94 7e a7 	call	0x14efc	; 0x14efc <__udivmodqi4>
    2b88:	38 2f       	mov	r19, r24
    2b8a:	89 2f       	mov	r24, r25
	 P=(X%100)/10;
    2b8c:	6a e0       	ldi	r22, 0x0A	; 10
    2b8e:	0e 94 7e a7 	call	0x14efc	; 0x14efc <__udivmodqi4>
	 S=X-(R*100)-(P*10);
    2b92:	9c e9       	ldi	r25, 0x9C	; 156
    2b94:	39 9f       	mul	r19, r25
    2b96:	90 2d       	mov	r25, r0
    2b98:	11 24       	eor	r1, r1
    2b9a:	92 0f       	add	r25, r18
    2b9c:	46 ef       	ldi	r20, 0xF6	; 246
    2b9e:	84 9f       	mul	r24, r20
    2ba0:	40 2d       	mov	r20, r0
    2ba2:	11 24       	eor	r1, r1
    2ba4:	94 0f       	add	r25, r20
	 if (X>=100){
    2ba6:	24 36       	cpi	r18, 0x64	; 100
    2ba8:	40 f0       	brcs	.+16     	; 0x2bba <intToStr+0x3c>
	     str[0]=('0'+R);
    2baa:	30 5d       	subi	r19, 0xD0	; 208
    2bac:	30 83       	st	Z, r19
	     str[1]=('0'+P);
    2bae:	80 5d       	subi	r24, 0xD0	; 208
    2bb0:	81 83       	std	Z+1, r24	; 0x01
	     str[2]=('0'+S);
    2bb2:	90 5d       	subi	r25, 0xD0	; 208
    2bb4:	92 83       	std	Z+2, r25	; 0x02
	     str[3]=0;
    2bb6:	13 82       	std	Z+3, r1	; 0x03
    2bb8:	08 95       	ret
	 if ((X>=10)&&(X>100)){
	     str[0]=('0'+P);
	     str[1]=('0'+S);
	     str[2]=0;
	 }else 
	 if (X<=10){
    2bba:	2b 30       	cpi	r18, 0x0B	; 11
    2bbc:	18 f4       	brcc	.+6      	; 0x2bc4 <intToStr+0x46>
	     str[0]=('0'+S);
    2bbe:	90 5d       	subi	r25, 0xD0	; 208
    2bc0:	90 83       	st	Z, r25
	     str[1]=0;
    2bc2:	11 82       	std	Z+1, r1	; 0x01
    2bc4:	08 95       	ret

00002bc6 <UpdateClientIP>:
	 for(i=0;i<4;i++){
	     zeroIP(IP_blok[i],strIP[i]);
	 }
     sprintf_P(strClientIP,PSTR("%s.%s.%s.%s"),strIP[0],strIP[1],strIP[2],strIP[3]);
	 */
}
    2bc6:	08 95       	ret

00002bc8 <UpdateServerIP>:
	 for(i=0;i<4;i++){
	     zeroIP(IP_blok[i],strIP[i]);
	 }
		 sprintf_P(strServerIP,PSTR("%s.%s.%s.%s"),strIP[0],strIP[1],strIP[2],strIP[3]);
		 */
}
    2bc8:	08 95       	ret

00002bca <UpdateIFT_ID>:
void UpdateIFT_ID(){
    /* char IdIFT;
	 IdIFT=(eeprom_read_byte(&DefIFT_ID)%100);
	 sprintf_P(strIFT_ID,PSTR("%.2d"),IdIFT);
	 */
}
    2bca:	08 95       	ret

00002bcc <UpdateSeqNum>:
/*
     if (SeqNum<100)SeqNum++;
	 else SeqNum=0;
	 leadingZero(SeqNum,strSeqNum);
	 */
} 
    2bcc:	08 95       	ret

00002bce <UpdateCardID>:

void UpdateCardID(){
    2bce:	cf 93       	push	r28
    2bd0:	df 93       	push	r29
     char i,LengthID;
	 LengthID=strlen(strRFID);  //           +12345678  
    2bd2:	ea e4       	ldi	r30, 0x4A	; 74
    2bd4:	fd e0       	ldi	r31, 0x0D	; 13
    2bd6:	01 90       	ld	r0, Z+
    2bd8:	00 20       	and	r0, r0
    2bda:	e9 f7       	brne	.-6      	; 0x2bd6 <UpdateCardID+0x8>
    2bdc:	31 97       	sbiw	r30, 0x01	; 1
    2bde:	ea 54       	subi	r30, 0x4A	; 74
    2be0:	fd 40       	sbci	r31, 0x0D	; 13
    2be2:	ad e6       	ldi	r26, 0x6D	; 109
    2be4:	bc e0       	ldi	r27, 0x0C	; 12
	 for(i=0;i<20;i++){         //SSSSSSSSSSSS12345678
	    if (i<(20-LengthID))strCardID[i]=' ';
		else strCardID[i]=strRFID[i-(20-LengthID)];
    2be6:	f0 e0       	ldi	r31, 0x00	; 0
	 else SeqNum=0;
	 leadingZero(SeqNum,strSeqNum);
	 */
} 

void UpdateCardID(){
    2be8:	ef 01       	movw	r28, r30
    2bea:	ca 5c       	subi	r28, 0xCA	; 202
    2bec:	d2 4f       	sbci	r29, 0xF2	; 242
    2bee:	80 e0       	ldi	r24, 0x00	; 0
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
     char i,LengthID;
	 LengthID=strlen(strRFID);  //           +12345678  
	 for(i=0;i<20;i++){         //SSSSSSSSSSSS12345678
	    if (i<(20-LengthID))strCardID[i]=' ';
    2bf2:	24 e1       	ldi	r18, 0x14	; 20
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
    2bf6:	2e 1b       	sub	r18, r30
    2bf8:	3f 0b       	sbc	r19, r31
    2bfa:	40 e2       	ldi	r20, 0x20	; 32
    2bfc:	82 17       	cp	r24, r18
    2bfe:	93 07       	cpc	r25, r19
    2c00:	14 f4       	brge	.+4      	; 0x2c06 <UpdateCardID+0x38>
    2c02:	4c 93       	st	X, r20
    2c04:	02 c0       	rjmp	.+4      	; 0x2c0a <UpdateCardID+0x3c>
		else strCardID[i]=strRFID[i-(20-LengthID)];
    2c06:	58 81       	ld	r21, Y
    2c08:	5c 93       	st	X, r21
    2c0a:	01 96       	adiw	r24, 0x01	; 1
    2c0c:	11 96       	adiw	r26, 0x01	; 1
    2c0e:	21 96       	adiw	r28, 0x01	; 1
} 

void UpdateCardID(){
     char i,LengthID;
	 LengthID=strlen(strRFID);  //           +12345678  
	 for(i=0;i<20;i++){         //SSSSSSSSSSSS12345678
    2c10:	84 31       	cpi	r24, 0x14	; 20
    2c12:	91 05       	cpc	r25, r1
    2c14:	99 f7       	brne	.-26     	; 0x2bfc <UpdateCardID+0x2e>
	    if (i<(20-LengthID))strCardID[i]=' ';
		else strCardID[i]=strRFID[i-(20-LengthID)];
	 }strCardID[20]=0;
    2c16:	10 92 81 0c 	sts	0x0C81, r1

}
    2c1a:	df 91       	pop	r29
    2c1c:	cf 91       	pop	r28
    2c1e:	08 95       	ret

00002c20 <ViewCardID>:
	IsBusyMsg11=True;
}



void ViewCardID(){//+12345678 -->12345678
    2c20:	cf 93       	push	r28
    2c22:	df 93       	push	r29
     char i,Length;
	 Length=strlen(strRFID);
    2c24:	ea e4       	ldi	r30, 0x4A	; 74
    2c26:	fd e0       	ldi	r31, 0x0D	; 13
    2c28:	01 90       	ld	r0, Z+
    2c2a:	00 20       	and	r0, r0
    2c2c:	e9 f7       	brne	.-6      	; 0x2c28 <ViewCardID+0x8>
    2c2e:	31 97       	sbiw	r30, 0x01	; 1
    2c30:	ea 54       	subi	r30, 0x4A	; 74
    2c32:	fd 40       	sbci	r31, 0x0D	; 13
    2c34:	e3 31       	cpi	r30, 0x13	; 19
    2c36:	08 f0       	brcs	.+2      	; 0x2c3a <ViewCardID+0x1a>
    2c38:	e2 e1       	ldi	r30, 0x12	; 18
    2c3a:	aa e4       	ldi	r26, 0x4A	; 74
    2c3c:	bd e0       	ldi	r27, 0x0D	; 13
    2c3e:	cd e6       	ldi	r28, 0x6D	; 109
    2c40:	dc e0       	ldi	r29, 0x0C	; 12
	IsBusyMsg11=True;
}



void ViewCardID(){//+12345678 -->12345678
    2c42:	8e 2f       	mov	r24, r30
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	8a 0f       	add	r24, r26
    2c48:	9b 1f       	adc	r25, r27

	 if (Length>18)Length=18;

	 //for(i=0;i<8;i++){         //00000000000012345678	 

	 for(i=0;i<Length;i++){
    2c4a:	02 c0       	rjmp	.+4      	; 0x2c50 <ViewCardID+0x30>
		strCardID[i]=strRFID[i];
    2c4c:	2d 91       	ld	r18, X+
    2c4e:	29 93       	st	Y+, r18

	 if (Length>18)Length=18;

	 //for(i=0;i<8;i++){         //00000000000012345678	 

	 for(i=0;i<Length;i++){
    2c50:	a8 17       	cp	r26, r24
    2c52:	b9 07       	cpc	r27, r25
    2c54:	d9 f7       	brne	.-10     	; 0x2c4c <ViewCardID+0x2c>
		strCardID[i]=strRFID[i];
	 }strCardID[Length]=0;     
    2c56:	f0 e0       	ldi	r31, 0x00	; 0
    2c58:	e3 59       	subi	r30, 0x93	; 147
    2c5a:	f3 4f       	sbci	r31, 0xF3	; 243
    2c5c:	10 82       	st	Z, r1
}
    2c5e:	df 91       	pop	r29
    2c60:	cf 91       	pop	r28
    2c62:	08 95       	ret

00002c64 <StringCopy>:
//Message 56


void StringCopy(char *Source,char *Dest,char Length){
     char i;
	 for (i=0;i<Length;i++){
    2c64:	28 2f       	mov	r18, r24
    2c66:	39 2f       	mov	r19, r25
    2c68:	d9 01       	movw	r26, r18
    2c6a:	fb 01       	movw	r30, r22
    2c6c:	80 e0       	ldi	r24, 0x00	; 0
    2c6e:	03 c0       	rjmp	.+6      	; 0x2c76 <StringCopy+0x12>
	     Dest[i]=Source[i];
    2c70:	9d 91       	ld	r25, X+
    2c72:	91 93       	st	Z+, r25
//Message 56


void StringCopy(char *Source,char *Dest,char Length){
     char i;
	 for (i=0;i<Length;i++){
    2c74:	8f 5f       	subi	r24, 0xFF	; 255
    2c76:	84 17       	cp	r24, r20
    2c78:	d8 f3       	brcs	.-10     	; 0x2c70 <StringCopy+0xc>
	     Dest[i]=Source[i];
	 }Dest[Length]=0;
    2c7a:	64 0f       	add	r22, r20
    2c7c:	71 1d       	adc	r23, r1
    2c7e:	fb 01       	movw	r30, r22
    2c80:	10 82       	st	Z, r1
}
    2c82:	08 95       	ret

00002c84 <StringCopyPos>:
void StringCopyPos(char *Source,char *Dest,char SrcPos,char Length){
    2c84:	dc 01       	movw	r26, r24
    2c86:	a4 0f       	add	r26, r20
    2c88:	b1 1d       	adc	r27, r1
     char i;
	 for (i=0;i<Length;i++){
    2c8a:	fb 01       	movw	r30, r22
    2c8c:	80 e0       	ldi	r24, 0x00	; 0
    2c8e:	03 c0       	rjmp	.+6      	; 0x2c96 <StringCopyPos+0x12>
	     Dest[i]=Source[SrcPos+i];
    2c90:	9d 91       	ld	r25, X+
    2c92:	91 93       	st	Z+, r25
	     Dest[i]=Source[i];
	 }Dest[Length]=0;
}
void StringCopyPos(char *Source,char *Dest,char SrcPos,char Length){
     char i;
	 for (i=0;i<Length;i++){
    2c94:	8f 5f       	subi	r24, 0xFF	; 255
    2c96:	82 17       	cp	r24, r18
    2c98:	d8 f3       	brcs	.-10     	; 0x2c90 <StringCopyPos+0xc>
	     Dest[i]=Source[SrcPos+i];
	 }Dest[Length]=0;
    2c9a:	62 0f       	add	r22, r18
    2c9c:	71 1d       	adc	r23, r1
    2c9e:	fb 01       	movw	r30, r22
    2ca0:	10 82       	st	Z, r1
}
    2ca2:	08 95       	ret

00002ca4 <TestLocalAccount>:

void TestLocalAccount(){

}
    2ca4:	08 95       	ret

00002ca6 <BackLightTrig>:
	      }
     }      
}

void BackLightTrig(){    
     __key_light = 1; 
    2ca6:	81 e0       	ldi	r24, 0x01	; 1
    2ca8:	80 93 91 03 	sts	0x0391, r24
	 __key_lgtcnt = 0; 
    2cac:	10 92 92 03 	sts	0x0392, r1
	 PORTG=PORTG&0b11111101;
    2cb0:	e5 e6       	ldi	r30, 0x65	; 101
    2cb2:	f0 e0       	ldi	r31, 0x00	; 0
    2cb4:	80 81       	ld	r24, Z
    2cb6:	8d 7f       	andi	r24, 0xFD	; 253
    2cb8:	80 83       	st	Z, r24
}
    2cba:	08 95       	ret

00002cbc <ScanRFIDFlow>:
}

void ScanHiddenKeyFlow(char KeyIn){
}

void ScanRFIDFlow(char data){//                   12 11 10 9  8  7  6  5  4  3  2  1  0
    2cbc:	e4 e5       	ldi	r30, 0x54	; 84
    2cbe:	f9 e0       	ldi	r31, 0x09	; 9
	 static char IsCardType=False,cCardType,iRFID=0,IsStartRFID=False;      //2 50 51 65 68 68 68 54 67 13 10 3
	 char strSend[30];
     
	 //Shifting    
	 for(i=0;i<19;i++){
        strSerialFlow[19-i]=strSerialFlow[18-i];   
    2cc0:	92 91       	ld	r25, -Z
    2cc2:	91 83       	std	Z+1, r25	; 0x01
     char i=0,strSerial[20]; //Shift Data Serial; 02 32 33 44 31 30 41 36 43 0D 0A 0A 03 
	 static char IsCardType=False,cCardType,iRFID=0,IsStartRFID=False;      //2 50 51 65 68 68 68 54 67 13 10 3
	 char strSend[30];
     
	 //Shifting    
	 for(i=0;i<19;i++){
    2cc4:	99 e0       	ldi	r25, 0x09	; 9
    2cc6:	e1 34       	cpi	r30, 0x41	; 65
    2cc8:	f9 07       	cpc	r31, r25
    2cca:	d1 f7       	brne	.-12     	; 0x2cc0 <ScanRFIDFlow+0x4>
        strSerialFlow[19-i]=strSerialFlow[18-i];   
	 }  strSerialFlow[0]=data;
    2ccc:	80 93 41 09 	sts	0x0941, r24


	 //Saving
	 if (IsStartRFID==True){
    2cd0:	90 91 80 03 	lds	r25, 0x0380
    2cd4:	91 30       	cpi	r25, 0x01	; 1
    2cd6:	51 f4       	brne	.+20     	; 0x2cec <ScanRFIDFlow+0x30>
	     strRFID[iRFID]=data;
    2cd8:	20 91 81 03 	lds	r18, 0x0381
    2cdc:	e2 2f       	mov	r30, r18
    2cde:	f0 e0       	ldi	r31, 0x00	; 0
    2ce0:	e6 5b       	subi	r30, 0xB6	; 182
    2ce2:	f2 4f       	sbci	r31, 0xF2	; 242
    2ce4:	80 83       	st	Z, r24
		 iRFID++;
    2ce6:	2f 5f       	subi	r18, 0xFF	; 255
    2ce8:	20 93 81 03 	sts	0x0381, r18
	//	 uart(0,1,data);
	 }

     
     if (IsCardType==True){
    2cec:	20 91 83 03 	lds	r18, 0x0383
    2cf0:	21 30       	cpi	r18, 0x01	; 1
    2cf2:	41 f4       	brne	.+16     	; 0x2d04 <ScanRFIDFlow+0x48>
	     if (strSerialFlow[1]=='~'){
    2cf4:	20 91 42 09 	lds	r18, 0x0942
    2cf8:	2e 37       	cpi	r18, 0x7E	; 126
    2cfa:	21 f4       	brne	.+8      	; 0x2d04 <ScanRFIDFlow+0x48>
		     cCardType=strSerialFlow[0];
    2cfc:	80 93 82 03 	sts	0x0382, r24
			 IsCardType=False;
    2d00:	10 92 83 03 	sts	0x0383, r1
		 }	
	 }
	 //Close
	 if ((IsStartRFID==True)&&(data=='~')){
    2d04:	91 30       	cpi	r25, 0x01	; 1
    2d06:	61 f4       	brne	.+24     	; 0x2d20 <ScanRFIDFlow+0x64>
    2d08:	8e 37       	cpi	r24, 0x7E	; 126
    2d0a:	51 f4       	brne	.+20     	; 0x2d20 <ScanRFIDFlow+0x64>
	      strRFID[iRFID-1]=0;
    2d0c:	e0 91 81 03 	lds	r30, 0x0381
    2d10:	f0 e0       	ldi	r31, 0x00	; 0
    2d12:	e7 5b       	subi	r30, 0xB7	; 183
    2d14:	f2 4f       	sbci	r31, 0xF2	; 242
    2d16:	10 82       	st	Z, r1
	      IsStartRFID=False;
    2d18:	10 92 80 03 	sts	0x0380, r1
		  IsCardType=True;
    2d1c:	90 93 83 03 	sts	0x0383, r25
	//	  uart(0,1,'>');
	 }
    // uart(0,1,data);

	//EndDetection	
	if ((strSerialFlow[1]==0x0D)&&(strSerialFlow[0]==0x03)){
    2d20:	80 91 42 09 	lds	r24, 0x0942
    2d24:	8d 30       	cpi	r24, 0x0D	; 13
    2d26:	09 f0       	breq	.+2      	; 0x2d2a <ScanRFIDFlow+0x6e>
    2d28:	98 c0       	rjmp	.+304    	; 0x2e5a <ScanRFIDFlow+0x19e>
    2d2a:	80 91 41 09 	lds	r24, 0x0941
    2d2e:	83 30       	cpi	r24, 0x03	; 3
    2d30:	09 f0       	breq	.+2      	; 0x2d34 <ScanRFIDFlow+0x78>
    2d32:	93 c0       	rjmp	.+294    	; 0x2e5a <ScanRFIDFlow+0x19e>
	     sprintf_P(strCardType,PSTR("%c"),cCardType);
    2d34:	00 d0       	rcall	.+0      	; 0x2d36 <ScanRFIDFlow+0x7a>
    2d36:	00 d0       	rcall	.+0      	; 0x2d38 <ScanRFIDFlow+0x7c>
    2d38:	00 d0       	rcall	.+0      	; 0x2d3a <ScanRFIDFlow+0x7e>
    2d3a:	ed b7       	in	r30, 0x3d	; 61
    2d3c:	fe b7       	in	r31, 0x3e	; 62
    2d3e:	31 96       	adiw	r30, 0x01	; 1
    2d40:	88 ea       	ldi	r24, 0xA8	; 168
    2d42:	9d e0       	ldi	r25, 0x0D	; 13
    2d44:	ad b7       	in	r26, 0x3d	; 61
    2d46:	be b7       	in	r27, 0x3e	; 62
    2d48:	12 96       	adiw	r26, 0x02	; 2
    2d4a:	9c 93       	st	X, r25
    2d4c:	8e 93       	st	-X, r24
    2d4e:	11 97       	sbiw	r26, 0x01	; 1
    2d50:	8b ef       	ldi	r24, 0xFB	; 251
    2d52:	93 e2       	ldi	r25, 0x23	; 35
    2d54:	93 83       	std	Z+3, r25	; 0x03
    2d56:	82 83       	std	Z+2, r24	; 0x02
    2d58:	80 91 82 03 	lds	r24, 0x0382
    2d5c:	84 83       	std	Z+4, r24	; 0x04
    2d5e:	15 82       	std	Z+5, r1	; 0x05
    2d60:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
         sprintf_P(strMasterCard,PSTR(" "));
    2d64:	0f 90       	pop	r0
    2d66:	0f 90       	pop	r0
    2d68:	87 eb       	ldi	r24, 0xB7	; 183
    2d6a:	9c e0       	ldi	r25, 0x0C	; 12
    2d6c:	ed b7       	in	r30, 0x3d	; 61
    2d6e:	fe b7       	in	r31, 0x3e	; 62
    2d70:	92 83       	std	Z+2, r25	; 0x02
    2d72:	81 83       	std	Z+1, r24	; 0x01
    2d74:	89 ef       	ldi	r24, 0xF9	; 249
    2d76:	93 e2       	ldi	r25, 0x23	; 35
    2d78:	94 83       	std	Z+4, r25	; 0x04
    2d7a:	83 83       	std	Z+3, r24	; 0x03
    2d7c:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>

		 //-> Failed: 02 04 0C 91 C9 CF 0D 03 
		 if ((strSerialFlow[7]==0x02)&&(strSerialFlow[6]==0x04)){		      
    2d80:	0f 90       	pop	r0
    2d82:	0f 90       	pop	r0
    2d84:	0f 90       	pop	r0
    2d86:	0f 90       	pop	r0
    2d88:	80 91 48 09 	lds	r24, 0x0948
    2d8c:	82 30       	cpi	r24, 0x02	; 2
    2d8e:	c1 f5       	brne	.+112    	; 0x2e00 <ScanRFIDFlow+0x144>
    2d90:	80 91 47 09 	lds	r24, 0x0947
    2d94:	84 30       	cpi	r24, 0x04	; 4
    2d96:	a1 f5       	brne	.+104    	; 0x2e00 <ScanRFIDFlow+0x144>
		      sprintf_P(strRFID,PSTR("%.2X%.2X%.2X%.2X"),strSerialFlow[2],strSerialFlow[3],strSerialFlow[4],strSerialFlow[5]);
    2d98:	8d b7       	in	r24, 0x3d	; 61
    2d9a:	9e b7       	in	r25, 0x3e	; 62
    2d9c:	0c 97       	sbiw	r24, 0x0c	; 12
    2d9e:	0f b6       	in	r0, 0x3f	; 63
    2da0:	f8 94       	cli
    2da2:	9e bf       	out	0x3e, r25	; 62
    2da4:	0f be       	out	0x3f, r0	; 63
    2da6:	8d bf       	out	0x3d, r24	; 61
    2da8:	ed b7       	in	r30, 0x3d	; 61
    2daa:	fe b7       	in	r31, 0x3e	; 62
    2dac:	31 96       	adiw	r30, 0x01	; 1
    2dae:	8a e4       	ldi	r24, 0x4A	; 74
    2db0:	9d e0       	ldi	r25, 0x0D	; 13
    2db2:	ad b7       	in	r26, 0x3d	; 61
    2db4:	be b7       	in	r27, 0x3e	; 62
    2db6:	12 96       	adiw	r26, 0x02	; 2
    2db8:	9c 93       	st	X, r25
    2dba:	8e 93       	st	-X, r24
    2dbc:	11 97       	sbiw	r26, 0x01	; 1
    2dbe:	88 ee       	ldi	r24, 0xE8	; 232
    2dc0:	93 e2       	ldi	r25, 0x23	; 35
    2dc2:	93 83       	std	Z+3, r25	; 0x03
    2dc4:	82 83       	std	Z+2, r24	; 0x02
    2dc6:	80 91 43 09 	lds	r24, 0x0943
    2dca:	84 83       	std	Z+4, r24	; 0x04
    2dcc:	15 82       	std	Z+5, r1	; 0x05
    2dce:	80 91 44 09 	lds	r24, 0x0944
    2dd2:	86 83       	std	Z+6, r24	; 0x06
    2dd4:	17 82       	std	Z+7, r1	; 0x07
    2dd6:	80 91 45 09 	lds	r24, 0x0945
    2dda:	80 87       	std	Z+8, r24	; 0x08
    2ddc:	11 86       	std	Z+9, r1	; 0x09
    2dde:	80 91 46 09 	lds	r24, 0x0946
    2de2:	82 87       	std	Z+10, r24	; 0x0a
    2de4:	13 86       	std	Z+11, r1	; 0x0b
    2de6:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
              cCardType='0';     
    2dea:	80 e3       	ldi	r24, 0x30	; 48
    2dec:	80 93 82 03 	sts	0x0382, r24
    2df0:	ed b7       	in	r30, 0x3d	; 61
    2df2:	fe b7       	in	r31, 0x3e	; 62
    2df4:	3c 96       	adiw	r30, 0x0c	; 12
    2df6:	0f b6       	in	r0, 0x3f	; 63
    2df8:	f8 94       	cli
    2dfa:	fe bf       	out	0x3e, r31	; 62
    2dfc:	0f be       	out	0x3f, r0	; 63
    2dfe:	ed bf       	out	0x3d, r30	; 61
		 }

		 if (cCardType=='4'){
    2e00:	80 91 82 03 	lds	r24, 0x0382
    2e04:	84 33       	cpi	r24, 0x34	; 52
    2e06:	01 f5       	brne	.+64     	; 0x2e48 <ScanRFIDFlow+0x18c>
		     sprintf_P(strMasterCard,PSTR("%s"),strRFID);
    2e08:	00 d0       	rcall	.+0      	; 0x2e0a <ScanRFIDFlow+0x14e>
    2e0a:	00 d0       	rcall	.+0      	; 0x2e0c <ScanRFIDFlow+0x150>
    2e0c:	00 d0       	rcall	.+0      	; 0x2e0e <ScanRFIDFlow+0x152>
    2e0e:	ed b7       	in	r30, 0x3d	; 61
    2e10:	fe b7       	in	r31, 0x3e	; 62
    2e12:	31 96       	adiw	r30, 0x01	; 1
    2e14:	87 eb       	ldi	r24, 0xB7	; 183
    2e16:	9c e0       	ldi	r25, 0x0C	; 12
    2e18:	ad b7       	in	r26, 0x3d	; 61
    2e1a:	be b7       	in	r27, 0x3e	; 62
    2e1c:	12 96       	adiw	r26, 0x02	; 2
    2e1e:	9c 93       	st	X, r25
    2e20:	8e 93       	st	-X, r24
    2e22:	11 97       	sbiw	r26, 0x01	; 1
    2e24:	85 ee       	ldi	r24, 0xE5	; 229
    2e26:	93 e2       	ldi	r25, 0x23	; 35
    2e28:	93 83       	std	Z+3, r25	; 0x03
    2e2a:	82 83       	std	Z+2, r24	; 0x02
    2e2c:	8a e4       	ldi	r24, 0x4A	; 74
    2e2e:	9d e0       	ldi	r25, 0x0D	; 13
    2e30:	95 83       	std	Z+5, r25	; 0x05
    2e32:	84 83       	std	Z+4, r24	; 0x04
    2e34:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    2e38:	ed b7       	in	r30, 0x3d	; 61
    2e3a:	fe b7       	in	r31, 0x3e	; 62
    2e3c:	36 96       	adiw	r30, 0x06	; 6
    2e3e:	0f b6       	in	r0, 0x3f	; 63
    2e40:	f8 94       	cli
    2e42:	fe bf       	out	0x3e, r31	; 62
    2e44:	0f be       	out	0x3f, r0	; 63
    2e46:	ed bf       	out	0x3d, r30	; 61
		 }
		 if (IsCardTransaction!=True)
    2e48:	80 91 77 02 	lds	r24, 0x0277
    2e4c:	81 30       	cpi	r24, 0x01	; 1
    2e4e:	19 f0       	breq	.+6      	; 0x2e56 <ScanRFIDFlow+0x19a>
		     IsRFIDDetected=True;
    2e50:	81 e0       	ldi	r24, 0x01	; 1
    2e52:	80 93 76 02 	sts	0x0276, r24
		 BackLightTrig();
    2e56:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <BackLightTrig>
	}	
	   
	 //Detection                     //02 80 xx xx xx
     if ((strSerialFlow[1]==0x02)&&(strSerialFlow[0]==0x80)){
    2e5a:	80 91 42 09 	lds	r24, 0x0942
    2e5e:	82 30       	cpi	r24, 0x02	; 2
    2e60:	49 f4       	brne	.+18     	; 0x2e74 <ScanRFIDFlow+0x1b8>
    2e62:	80 91 41 09 	lds	r24, 0x0941
    2e66:	80 38       	cpi	r24, 0x80	; 128
    2e68:	29 f4       	brne	.+10     	; 0x2e74 <ScanRFIDFlow+0x1b8>
	      iRFID=0;
    2e6a:	10 92 81 03 	sts	0x0381, r1
          IsStartRFID=True;
    2e6e:	81 e0       	ldi	r24, 0x01	; 1
    2e70:	80 93 80 03 	sts	0x0380, r24
		//  uart(0,1,'<');
	 }	 
      
	 if ((strSerialFlow[11]==0x02)&&(strSerialFlow[1]==0x0A)&&(strSerialFlow[0]==0x03)){
    2e74:	80 91 4c 09 	lds	r24, 0x094C
    2e78:	82 30       	cpi	r24, 0x02	; 2
    2e7a:	09 f0       	breq	.+2      	; 0x2e7e <ScanRFIDFlow+0x1c2>
    2e7c:	49 c0       	rjmp	.+146    	; 0x2f10 <ScanRFIDFlow+0x254>
    2e7e:	80 91 42 09 	lds	r24, 0x0942
    2e82:	8a 30       	cpi	r24, 0x0A	; 10
    2e84:	09 f0       	breq	.+2      	; 0x2e88 <ScanRFIDFlow+0x1cc>
    2e86:	44 c0       	rjmp	.+136    	; 0x2f10 <ScanRFIDFlow+0x254>
    2e88:	80 91 41 09 	lds	r24, 0x0941
    2e8c:	83 30       	cpi	r24, 0x03	; 3
    2e8e:	09 f0       	breq	.+2      	; 0x2e92 <ScanRFIDFlow+0x1d6>
    2e90:	3f c0       	rjmp	.+126    	; 0x2f10 <ScanRFIDFlow+0x254>
    2e92:	ec e4       	ldi	r30, 0x4C	; 76
    2e94:	f9 e0       	ldi	r31, 0x09	; 9
    2e96:	aa e4       	ldi	r26, 0x4A	; 74
    2e98:	bd e0       	ldi	r27, 0x0D	; 13
		for(i=0;i<8;i++) strRFID[i]=strSerialFlow[10-i];
    2e9a:	82 91       	ld	r24, -Z
    2e9c:	8d 93       	st	X+, r24
    2e9e:	89 e0       	ldi	r24, 0x09	; 9
    2ea0:	e4 34       	cpi	r30, 0x44	; 68
    2ea2:	f8 07       	cpc	r31, r24
    2ea4:	d1 f7       	brne	.-12     	; 0x2e9a <ScanRFIDFlow+0x1de>
        strRFID[8]=0;
    2ea6:	10 92 52 0d 	sts	0x0D52, r1
        cCardType=0;
    2eaa:	10 92 82 03 	sts	0x0382, r1
		sprintf_P(strCardType,PSTR("%c"),cCardType);
    2eae:	00 d0       	rcall	.+0      	; 0x2eb0 <ScanRFIDFlow+0x1f4>
    2eb0:	00 d0       	rcall	.+0      	; 0x2eb2 <ScanRFIDFlow+0x1f6>
    2eb2:	00 d0       	rcall	.+0      	; 0x2eb4 <ScanRFIDFlow+0x1f8>
    2eb4:	ed b7       	in	r30, 0x3d	; 61
    2eb6:	fe b7       	in	r31, 0x3e	; 62
    2eb8:	31 96       	adiw	r30, 0x01	; 1
    2eba:	88 ea       	ldi	r24, 0xA8	; 168
    2ebc:	9d e0       	ldi	r25, 0x0D	; 13
    2ebe:	ad b7       	in	r26, 0x3d	; 61
    2ec0:	be b7       	in	r27, 0x3e	; 62
    2ec2:	12 96       	adiw	r26, 0x02	; 2
    2ec4:	9c 93       	st	X, r25
    2ec6:	8e 93       	st	-X, r24
    2ec8:	11 97       	sbiw	r26, 0x01	; 1
    2eca:	82 ee       	ldi	r24, 0xE2	; 226
    2ecc:	93 e2       	ldi	r25, 0x23	; 35
    2ece:	93 83       	std	Z+3, r25	; 0x03
    2ed0:	82 83       	std	Z+2, r24	; 0x02
    2ed2:	15 82       	std	Z+5, r1	; 0x05
    2ed4:	14 82       	std	Z+4, r1	; 0x04
    2ed6:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		sprintf_P(strMasterCard,PSTR(" "));
    2eda:	0f 90       	pop	r0
    2edc:	0f 90       	pop	r0
    2ede:	87 eb       	ldi	r24, 0xB7	; 183
    2ee0:	9c e0       	ldi	r25, 0x0C	; 12
    2ee2:	ed b7       	in	r30, 0x3d	; 61
    2ee4:	fe b7       	in	r31, 0x3e	; 62
    2ee6:	92 83       	std	Z+2, r25	; 0x02
    2ee8:	81 83       	std	Z+1, r24	; 0x01
    2eea:	80 ee       	ldi	r24, 0xE0	; 224
    2eec:	93 e2       	ldi	r25, 0x23	; 35
    2eee:	94 83       	std	Z+4, r25	; 0x04
    2ef0:	83 83       	std	Z+3, r24	; 0x03
    2ef2:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>

	    if (IsCardTransaction!=True)
    2ef6:	0f 90       	pop	r0
    2ef8:	0f 90       	pop	r0
    2efa:	0f 90       	pop	r0
    2efc:	0f 90       	pop	r0
    2efe:	80 91 77 02 	lds	r24, 0x0277
    2f02:	81 30       	cpi	r24, 0x01	; 1
    2f04:	19 f0       	breq	.+6      	; 0x2f0c <ScanRFIDFlow+0x250>
		    IsRFIDDetected=True;
    2f06:	81 e0       	ldi	r24, 0x01	; 1
    2f08:	80 93 76 02 	sts	0x0276, r24
		BackLightTrig();
    2f0c:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <BackLightTrig>
    2f10:	08 95       	ret

00002f12 <GeneratePrintInit>:





void GeneratePrintInit(){//Create Initialize Print 
    2f12:	cf 92       	push	r12
    2f14:	df 92       	push	r13
    2f16:	ef 92       	push	r14
    2f18:	ff 92       	push	r15
    2f1a:	0f 93       	push	r16
    2f1c:	1f 93       	push	r17
    2f1e:	df 93       	push	r29
    2f20:	cf 93       	push	r28
    2f22:	cd b7       	in	r28, 0x3d	; 61
    2f24:	de b7       	in	r29, 0x3e	; 62
    2f26:	62 97       	sbiw	r28, 0x12	; 18
    2f28:	0f b6       	in	r0, 0x3f	; 63
    2f2a:	f8 94       	cli
    2f2c:	de bf       	out	0x3e, r29	; 62
    2f2e:	0f be       	out	0x3f, r0	; 63
    2f30:	cd bf       	out	0x3d, r28	; 61
     char strVernum[6],strVerdate[12];
	 sprintf_P(strVernum,PSTR(VERSION_NUM));
    2f32:	00 d0       	rcall	.+0      	; 0x2f34 <GeneratePrintInit+0x22>
    2f34:	00 d0       	rcall	.+0      	; 0x2f36 <GeneratePrintInit+0x24>
    2f36:	7e 01       	movw	r14, r28
    2f38:	08 94       	sec
    2f3a:	e1 1c       	adc	r14, r1
    2f3c:	f1 1c       	adc	r15, r1
    2f3e:	ad b7       	in	r26, 0x3d	; 61
    2f40:	be b7       	in	r27, 0x3e	; 62
    2f42:	12 96       	adiw	r26, 0x02	; 2
    2f44:	fc 92       	st	X, r15
    2f46:	ee 92       	st	-X, r14
    2f48:	11 97       	sbiw	r26, 0x01	; 1
    2f4a:	82 e6       	ldi	r24, 0x62	; 98
    2f4c:	9f e1       	ldi	r25, 0x1F	; 31
    2f4e:	14 96       	adiw	r26, 0x04	; 4
    2f50:	9c 93       	st	X, r25
    2f52:	8e 93       	st	-X, r24
    2f54:	13 97       	sbiw	r26, 0x03	; 3
    2f56:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	 sprintf_P(strVerdate,PSTR(VERSION_DATE));
    2f5a:	97 e0       	ldi	r25, 0x07	; 7
    2f5c:	c9 2e       	mov	r12, r25
    2f5e:	d1 2c       	mov	r13, r1
    2f60:	cc 0e       	add	r12, r28
    2f62:	dd 1e       	adc	r13, r29
    2f64:	ed b7       	in	r30, 0x3d	; 61
    2f66:	fe b7       	in	r31, 0x3e	; 62
    2f68:	d2 82       	std	Z+2, r13	; 0x02
    2f6a:	c1 82       	std	Z+1, r12	; 0x01
    2f6c:	87 e5       	ldi	r24, 0x57	; 87
    2f6e:	9f e1       	ldi	r25, 0x1F	; 31
    2f70:	94 83       	std	Z+4, r25	; 0x04
    2f72:	83 83       	std	Z+3, r24	; 0x03
    2f74:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
     sprintf_P(PrintBuffer,PSTR("\nGeNiUs Ticket Printer \n Version:%s\n Last Update %s \n Hanindo Automation Solutions \n www.hanindogroup.com\n\n\n\n\n\n\n\n"),strVernum,strVerdate);
    2f78:	00 d0       	rcall	.+0      	; 0x2f7a <GeneratePrintInit+0x68>
    2f7a:	00 d0       	rcall	.+0      	; 0x2f7c <GeneratePrintInit+0x6a>
    2f7c:	ed b7       	in	r30, 0x3d	; 61
    2f7e:	fe b7       	in	r31, 0x3e	; 62
    2f80:	31 96       	adiw	r30, 0x01	; 1
    2f82:	00 ed       	ldi	r16, 0xD0	; 208
    2f84:	14 e0       	ldi	r17, 0x04	; 4
    2f86:	ad b7       	in	r26, 0x3d	; 61
    2f88:	be b7       	in	r27, 0x3e	; 62
    2f8a:	12 96       	adiw	r26, 0x02	; 2
    2f8c:	1c 93       	st	X, r17
    2f8e:	0e 93       	st	-X, r16
    2f90:	11 97       	sbiw	r26, 0x01	; 1
    2f92:	85 ee       	ldi	r24, 0xE5	; 229
    2f94:	9e e1       	ldi	r25, 0x1E	; 30
    2f96:	93 83       	std	Z+3, r25	; 0x03
    2f98:	82 83       	std	Z+2, r24	; 0x02
    2f9a:	f5 82       	std	Z+5, r15	; 0x05
    2f9c:	e4 82       	std	Z+4, r14	; 0x04
    2f9e:	d7 82       	std	Z+7, r13	; 0x07
    2fa0:	c6 82       	std	Z+6, r12	; 0x06
    2fa2:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	 uart_print(0,1,PrintBuffer);
    2fa6:	ed b7       	in	r30, 0x3d	; 61
    2fa8:	fe b7       	in	r31, 0x3e	; 62
    2faa:	38 96       	adiw	r30, 0x08	; 8
    2fac:	0f b6       	in	r0, 0x3f	; 63
    2fae:	f8 94       	cli
    2fb0:	fe bf       	out	0x3e, r31	; 62
    2fb2:	0f be       	out	0x3f, r0	; 63
    2fb4:	ed bf       	out	0x3d, r30	; 61
    2fb6:	80 e0       	ldi	r24, 0x00	; 0
    2fb8:	61 e0       	ldi	r22, 0x01	; 1
    2fba:	a8 01       	movw	r20, r16
    2fbc:	0e 94 03 a6 	call	0x14c06	; 0x14c06 <uart_print>
	 LengthMessage81=strlen(PrintBuffer);
    2fc0:	f8 01       	movw	r30, r16
    2fc2:	01 90       	ld	r0, Z+
    2fc4:	00 20       	and	r0, r0
    2fc6:	e9 f7       	brne	.-6      	; 0x2fc2 <GeneratePrintInit+0xb0>
    2fc8:	31 97       	sbiw	r30, 0x01	; 1
    2fca:	e0 1b       	sub	r30, r16
    2fcc:	f1 0b       	sbc	r31, r17
    2fce:	f0 93 6c 02 	sts	0x026C, r31
    2fd2:	e0 93 6b 02 	sts	0x026B, r30
	 //Spooling HFCx 0000
	 cmdPrint=0b00010000|(1<<PRN_PAPER_CUT);
    2fd6:	80 e3       	ldi	r24, 0x30	; 48
    2fd8:	80 93 94 02 	sts	0x0294, r24
	 IsFreePrinting=True;
    2fdc:	81 e0       	ldi	r24, 0x01	; 1
    2fde:	80 93 87 02 	sts	0x0287, r24
}
    2fe2:	62 96       	adiw	r28, 0x12	; 18
    2fe4:	0f b6       	in	r0, 0x3f	; 63
    2fe6:	f8 94       	cli
    2fe8:	de bf       	out	0x3e, r29	; 62
    2fea:	0f be       	out	0x3f, r0	; 63
    2fec:	cd bf       	out	0x3d, r28	; 61
    2fee:	cf 91       	pop	r28
    2ff0:	df 91       	pop	r29
    2ff2:	1f 91       	pop	r17
    2ff4:	0f 91       	pop	r16
    2ff6:	ff 90       	pop	r15
    2ff8:	ef 90       	pop	r14
    2ffa:	df 90       	pop	r13
    2ffc:	cf 90       	pop	r12
    2ffe:	08 95       	ret

00003000 <GetBaudrate>:
		 else SendSlaveCommand(SC_BAUDRATE,brMessage);
		 
	 }
}

int GetBaudrate(char brSetting){
    3000:	84 30       	cpi	r24, 0x04	; 4
    3002:	48 f4       	brcc	.+18     	; 0x3016 <GetBaudrate+0x16>
    3004:	e8 2f       	mov	r30, r24
    3006:	f0 e0       	ldi	r31, 0x00	; 0
    3008:	ee 0f       	add	r30, r30
    300a:	ff 1f       	adc	r31, r31
    300c:	e6 58       	subi	r30, 0x86	; 134
    300e:	fe 4f       	sbci	r31, 0xFE	; 254
    3010:	20 81       	ld	r18, Z
    3012:	31 81       	ldd	r19, Z+1	; 0x01
    3014:	02 c0       	rjmp	.+4      	; 0x301a <GetBaudrate+0x1a>
    3016:	20 e0       	ldi	r18, 0x00	; 0
    3018:	30 e0       	ldi	r19, 0x00	; 0
	 case br5787:
	      Result=5787;
     	  break;	 
	 }
   return Result;
}
    301a:	c9 01       	movw	r24, r18
    301c:	08 95       	ret

0000301e <InitMemory>:

	 }
}

void InitMemory(){
     PumpCountMax=eeprom_read_byte(&DefPoolingPumpMax);
    301e:	85 e4       	ldi	r24, 0x45	; 69
    3020:	91 e0       	ldi	r25, 0x01	; 1
    3022:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
    3026:	80 93 3a 02 	sts	0x023A, r24
	 ActivePump=eeprom_read_byte(&DefActivePump);
    302a:	8a e4       	ldi	r24, 0x4A	; 74
    302c:	91 e0       	ldi	r25, 0x01	; 1
    302e:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
    3032:	80 93 3b 02 	sts	0x023B, r24
}
    3036:	08 95       	ret

00003038 <InitStandalone>:
	      RunInitStandalone=False;
	      break;
	 }
  }
  */
}
    3038:	08 95       	ret

0000303a <DisplayQueueFIP>:


void DisplayQueueFIP(){// FIP:#1#2#3#4#5

}
    303a:	08 95       	ret

0000303c <DisplayDateTime>:

void DisplayDateTime(){
    303c:	cf 92       	push	r12
    303e:	df 92       	push	r13
    3040:	ef 92       	push	r14
    3042:	ff 92       	push	r15
    3044:	0f 93       	push	r16
    3046:	1f 93       	push	r17
    3048:	df 93       	push	r29
    304a:	cf 93       	push	r28
    304c:	cd b7       	in	r28, 0x3d	; 61
    304e:	de b7       	in	r29, 0x3e	; 62
    3050:	64 97       	sbiw	r28, 0x14	; 20
    3052:	0f b6       	in	r0, 0x3f	; 63
    3054:	f8 94       	cli
    3056:	de bf       	out	0x3e, r29	; 62
    3058:	0f be       	out	0x3f, r0	; 63
    305a:	cd bf       	out	0x3d, r28	; 61
char lcdteks[20];
	 _datetime(0, strSystemDate, strSystemTime);
    305c:	4e e9       	ldi	r20, 0x9E	; 158
    305e:	e4 2e       	mov	r14, r20
    3060:	44 e0       	ldi	r20, 0x04	; 4
    3062:	f4 2e       	mov	r15, r20
    3064:	38 e5       	ldi	r19, 0x58	; 88
    3066:	c3 2e       	mov	r12, r19
    3068:	39 e0       	ldi	r19, 0x09	; 9
    306a:	d3 2e       	mov	r13, r19
    306c:	80 e0       	ldi	r24, 0x00	; 0
    306e:	b7 01       	movw	r22, r14
    3070:	a6 01       	movw	r20, r12
    3072:	0e 94 e4 a4 	call	0x149c8	; 0x149c8 <_datetime>
	 sprintf_P(lcdteks,PSTR("%s %s"),strSystemDate,strSystemTime);
    3076:	8d b7       	in	r24, 0x3d	; 61
    3078:	9e b7       	in	r25, 0x3e	; 62
    307a:	08 97       	sbiw	r24, 0x08	; 8
    307c:	0f b6       	in	r0, 0x3f	; 63
    307e:	f8 94       	cli
    3080:	9e bf       	out	0x3e, r25	; 62
    3082:	0f be       	out	0x3f, r0	; 63
    3084:	8d bf       	out	0x3d, r24	; 61
    3086:	ed b7       	in	r30, 0x3d	; 61
    3088:	fe b7       	in	r31, 0x3e	; 62
    308a:	31 96       	adiw	r30, 0x01	; 1
    308c:	8e 01       	movw	r16, r28
    308e:	0f 5f       	subi	r16, 0xFF	; 255
    3090:	1f 4f       	sbci	r17, 0xFF	; 255
    3092:	ad b7       	in	r26, 0x3d	; 61
    3094:	be b7       	in	r27, 0x3e	; 62
    3096:	12 96       	adiw	r26, 0x02	; 2
    3098:	1c 93       	st	X, r17
    309a:	0e 93       	st	-X, r16
    309c:	11 97       	sbiw	r26, 0x01	; 1
    309e:	83 e3       	ldi	r24, 0x33	; 51
    30a0:	9e e1       	ldi	r25, 0x1E	; 30
    30a2:	93 83       	std	Z+3, r25	; 0x03
    30a4:	82 83       	std	Z+2, r24	; 0x02
    30a6:	f5 82       	std	Z+5, r15	; 0x05
    30a8:	e4 82       	std	Z+4, r14	; 0x04
    30aa:	d7 82       	std	Z+7, r13	; 0x07
    30ac:	c6 82       	std	Z+6, r12	; 0x06
    30ae:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	 lcd_print(2, 1, lcdteks);
    30b2:	8d b7       	in	r24, 0x3d	; 61
    30b4:	9e b7       	in	r25, 0x3e	; 62
    30b6:	08 96       	adiw	r24, 0x08	; 8
    30b8:	0f b6       	in	r0, 0x3f	; 63
    30ba:	f8 94       	cli
    30bc:	9e bf       	out	0x3e, r25	; 62
    30be:	0f be       	out	0x3f, r0	; 63
    30c0:	8d bf       	out	0x3d, r24	; 61
    30c2:	82 e0       	ldi	r24, 0x02	; 2
    30c4:	61 e0       	ldi	r22, 0x01	; 1
    30c6:	a8 01       	movw	r20, r16
    30c8:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
}
    30cc:	64 96       	adiw	r28, 0x14	; 20
    30ce:	0f b6       	in	r0, 0x3f	; 63
    30d0:	f8 94       	cli
    30d2:	de bf       	out	0x3e, r29	; 62
    30d4:	0f be       	out	0x3f, r0	; 63
    30d6:	cd bf       	out	0x3d, r28	; 61
    30d8:	cf 91       	pop	r28
    30da:	df 91       	pop	r29
    30dc:	1f 91       	pop	r17
    30de:	0f 91       	pop	r16
    30e0:	ff 90       	pop	r15
    30e2:	ef 90       	pop	r14
    30e4:	df 90       	pop	r13
    30e6:	cf 90       	pop	r12
    30e8:	08 95       	ret

000030ea <DisplayTicker>:
	case tiDelayLeft:
         if (TimTicker>TICKER_DELAY)stDisplayTicker=tiRight;	     
	     break;
	}
*/
    if (TimTicker>(TICKER_DELAY*2+1)){
    30ea:	80 91 6e 02 	lds	r24, 0x026E
    30ee:	86 31       	cpi	r24, 0x16	; 22
    30f0:	38 f0       	brcs	.+14     	; 0x3100 <DisplayTicker+0x16>
	    lcd_put(4, 1, '>');
    30f2:	84 e0       	ldi	r24, 0x04	; 4
    30f4:	61 e0       	ldi	r22, 0x01	; 1
    30f6:	4e e3       	ldi	r20, 0x3E	; 62
    30f8:	0e 94 c1 a2 	call	0x14582	; 0x14582 <lcd_put>
		TimTicker=0;
    30fc:	10 92 6e 02 	sts	0x026E, r1
	}
    if (TimTicker==TICKER_DELAY){
    3100:	80 91 6e 02 	lds	r24, 0x026E
    3104:	8a 30       	cpi	r24, 0x0A	; 10
    3106:	51 f4       	brne	.+20     	; 0x311c <DisplayTicker+0x32>
	    lcd_put(4, 1, '<');
    3108:	84 e0       	ldi	r24, 0x04	; 4
    310a:	61 e0       	ldi	r22, 0x01	; 1
    310c:	4c e3       	ldi	r20, 0x3C	; 60
    310e:	0e 94 c1 a2 	call	0x14582	; 0x14582 <lcd_put>
		TimTicker++;
    3112:	80 91 6e 02 	lds	r24, 0x026E
    3116:	8f 5f       	subi	r24, 0xFF	; 255
    3118:	80 93 6e 02 	sts	0x026E, r24
    311c:	08 95       	ret

0000311e <FTestChar>:
	}

}

char FTestChar(){
    311e:	0f 93       	push	r16
    3120:	1f 93       	push	r17
    3122:	df 93       	push	r29
    3124:	cf 93       	push	r28
    3126:	cd b7       	in	r28, 0x3d	; 61
    3128:	de b7       	in	r29, 0x3e	; 62
    312a:	64 97       	sbiw	r28, 0x14	; 20
    312c:	0f b6       	in	r0, 0x3f	; 63
    312e:	f8 94       	cli
    3130:	de bf       	out	0x3e, r29	; 62
    3132:	0f be       	out	0x3f, r0	; 63
    3134:	cd bf       	out	0x3d, r28	; 61
char lcdteks[20],Result;
char i=0;
     Result=MENU_NONE;
     sprintf_P(lcdteks,PSTR("D:%d C:%c  "),i,i);
    3136:	8d b7       	in	r24, 0x3d	; 61
    3138:	9e b7       	in	r25, 0x3e	; 62
    313a:	08 97       	sbiw	r24, 0x08	; 8
    313c:	0f b6       	in	r0, 0x3f	; 63
    313e:	f8 94       	cli
    3140:	9e bf       	out	0x3e, r25	; 62
    3142:	0f be       	out	0x3f, r0	; 63
    3144:	8d bf       	out	0x3d, r24	; 61
    3146:	ed b7       	in	r30, 0x3d	; 61
    3148:	fe b7       	in	r31, 0x3e	; 62
    314a:	31 96       	adiw	r30, 0x01	; 1
    314c:	8e 01       	movw	r16, r28
    314e:	0f 5f       	subi	r16, 0xFF	; 255
    3150:	1f 4f       	sbci	r17, 0xFF	; 255
    3152:	ad b7       	in	r26, 0x3d	; 61
    3154:	be b7       	in	r27, 0x3e	; 62
    3156:	12 96       	adiw	r26, 0x02	; 2
    3158:	1c 93       	st	X, r17
    315a:	0e 93       	st	-X, r16
    315c:	11 97       	sbiw	r26, 0x01	; 1
    315e:	87 e2       	ldi	r24, 0x27	; 39
    3160:	9e e1       	ldi	r25, 0x1E	; 30
    3162:	93 83       	std	Z+3, r25	; 0x03
    3164:	82 83       	std	Z+2, r24	; 0x02
    3166:	15 82       	std	Z+5, r1	; 0x05
    3168:	14 82       	std	Z+4, r1	; 0x04
    316a:	17 82       	std	Z+7, r1	; 0x07
    316c:	16 82       	std	Z+6, r1	; 0x06
    316e:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
     lcd_print(1,1,lcdteks);
    3172:	8d b7       	in	r24, 0x3d	; 61
    3174:	9e b7       	in	r25, 0x3e	; 62
    3176:	08 96       	adiw	r24, 0x08	; 8
    3178:	0f b6       	in	r0, 0x3f	; 63
    317a:	f8 94       	cli
    317c:	9e bf       	out	0x3e, r25	; 62
    317e:	0f be       	out	0x3f, r0	; 63
    3180:	8d bf       	out	0x3d, r24	; 61
    3182:	81 e0       	ldi	r24, 0x01	; 1
    3184:	61 e0       	ldi	r22, 0x01	; 1
    3186:	a8 01       	movw	r20, r16
    3188:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
    318c:	8f e1       	ldi	r24, 0x1F	; 31
    318e:	96 ed       	ldi	r25, 0xD6	; 214
    3190:	a3 e1       	ldi	r26, 0x13	; 19
    3192:	81 50       	subi	r24, 0x01	; 1
    3194:	90 40       	sbci	r25, 0x00	; 0
    3196:	a0 40       	sbci	r26, 0x00	; 0
    3198:	e1 f7       	brne	.-8      	; 0x3192 <FTestChar+0x74>
    319a:	00 c0       	rjmp	.+0      	; 0x319c <FTestChar+0x7e>
    319c:	00 00       	nop
	 if (i==0xFF)Result=MENU_DONE;
	 i++;
     _delay_ms(6500);
  return Result;
}
    319e:	80 e0       	ldi	r24, 0x00	; 0
    31a0:	64 96       	adiw	r28, 0x14	; 20
    31a2:	0f b6       	in	r0, 0x3f	; 63
    31a4:	f8 94       	cli
    31a6:	de bf       	out	0x3e, r29	; 62
    31a8:	0f be       	out	0x3f, r0	; 63
    31aa:	cd bf       	out	0x3d, r28	; 61
    31ac:	cf 91       	pop	r28
    31ae:	df 91       	pop	r29
    31b0:	1f 91       	pop	r17
    31b2:	0f 91       	pop	r16
    31b4:	08 95       	ret

000031b6 <DisplayStandaloneSequence>:

void DisplayStandaloneSequence(char x,char y, char PoolingSequence){
    31b6:	df 93       	push	r29
    31b8:	cf 93       	push	r28
    31ba:	cd b7       	in	r28, 0x3d	; 61
    31bc:	de b7       	in	r29, 0x3e	; 62
    31be:	28 97       	sbiw	r28, 0x08	; 8
    31c0:	0f b6       	in	r0, 0x3f	; 63
    31c2:	f8 94       	cli
    31c4:	de bf       	out	0x3e, r29	; 62
    31c6:	0f be       	out	0x3f, r0	; 63
    31c8:	cd bf       	out	0x3d, r28	; 61
     char MapSequence[8];

     //sprintf_P(MapSequence,PSTR("-\|/-|/"));
	 MapSequence[0]='-';
    31ca:	3d e2       	ldi	r19, 0x2D	; 45
    31cc:	39 83       	std	Y+1, r19	; 0x01
	 MapSequence[1]='`';//0x5C;
    31ce:	90 e6       	ldi	r25, 0x60	; 96
    31d0:	9a 83       	std	Y+2, r25	; 0x02
	 MapSequence[2]='|';
    31d2:	2c e7       	ldi	r18, 0x7C	; 124
    31d4:	2b 83       	std	Y+3, r18	; 0x03
	 MapSequence[3]='/';
    31d6:	9f e2       	ldi	r25, 0x2F	; 47
    31d8:	9c 83       	std	Y+4, r25	; 0x04
	 MapSequence[4]='-';
    31da:	3d 83       	std	Y+5, r19	; 0x05
	 MapSequence[5]=164;//0x5C;
    31dc:	34 ea       	ldi	r19, 0xA4	; 164
    31de:	3e 83       	std	Y+6, r19	; 0x06
	 MapSequence[6]='|';
    31e0:	2f 83       	std	Y+7, r18	; 0x07
	 MapSequence[7]='/';
    31e2:	98 87       	std	Y+8, r25	; 0x08
	 if (IsPoolingRestarted==False)lcd_put(x,y,MapSequence[(PoolingSequence%8)]);     
    31e4:	90 91 61 02 	lds	r25, 0x0261
    31e8:	99 23       	and	r25, r25
    31ea:	31 f4       	brne	.+12     	; 0x31f8 <DisplayStandaloneSequence+0x42>
    31ec:	47 70       	andi	r20, 0x07	; 7
    31ee:	fe 01       	movw	r30, r28
    31f0:	e4 0f       	add	r30, r20
    31f2:	f1 1d       	adc	r31, r1
    31f4:	41 81       	ldd	r20, Z+1	; 0x01
    31f6:	07 c0       	rjmp	.+14     	; 0x3206 <DisplayStandaloneSequence+0x50>
	 else if (IsPoolingRestarted==True){
    31f8:	90 91 61 02 	lds	r25, 0x0261
    31fc:	91 30       	cpi	r25, 0x01	; 1
    31fe:	29 f4       	brne	.+10     	; 0x320a <DisplayStandaloneSequence+0x54>
	          IsPoolingRestarted=False;
    3200:	10 92 61 02 	sts	0x0261, r1
	          lcd_put(x,y,'X');     
    3204:	48 e5       	ldi	r20, 0x58	; 88
    3206:	0e 94 c1 a2 	call	0x14582	; 0x14582 <lcd_put>
			  }

}
    320a:	28 96       	adiw	r28, 0x08	; 8
    320c:	0f b6       	in	r0, 0x3f	; 63
    320e:	f8 94       	cli
    3210:	de bf       	out	0x3e, r29	; 62
    3212:	0f be       	out	0x3f, r0	; 63
    3214:	cd bf       	out	0x3d, r28	; 61
    3216:	cf 91       	pop	r28
    3218:	df 91       	pop	r29
    321a:	08 95       	ret

0000321c <ShowMessage>:
	 }
}

void ShowMessage(char *Message){//Display Message on Line3
     char i;
}
    321c:	08 95       	ret

0000321e <systemSlave>:




void systemSlave(){
    _spi_enable(_SPI_NONE);	
    321e:	80 e0       	ldi	r24, 0x00	; 0
    3220:	0e 94 02 a4 	call	0x14804	; 0x14804 <_spi_enable>
  	_spi_init(0, 1);         //Slave
    3224:	80 e0       	ldi	r24, 0x00	; 0
    3226:	61 e0       	ldi	r22, 0x01	; 1
    3228:	0e 94 ef a3 	call	0x147de	; 0x147de <_spi_init>
	sbi(DDRB,3);             //MISO Output
    322c:	bb 9a       	sbi	0x17, 3	; 23
	sbi(DDRB,3);sbi(PORTB,3);//MISO Output
    322e:	bb 9a       	sbi	0x17, 3	; 23
    3230:	c3 9a       	sbi	0x18, 3	; 24
	cbi(DDRB,2);sbi(PORTB,2);//MOSI Input
    3232:	ba 98       	cbi	0x17, 2	; 23
    3234:	c2 9a       	sbi	0x18, 2	; 24
	cbi(DDRB,1);sbi(PORTB,1);//SCK  Input
    3236:	b9 98       	cbi	0x17, 1	; 23
    3238:	c1 9a       	sbi	0x18, 1	; 24
}
    323a:	08 95       	ret

0000323c <systemMaster>:

void systemMaster(){
  	_spi_init(1, 0);         //Master
    323c:	81 e0       	ldi	r24, 0x01	; 1
    323e:	60 e0       	ldi	r22, 0x00	; 0
    3240:	0e 94 ef a3 	call	0x147de	; 0x147de <_spi_init>
    _spi_enable(_SPI_SLAVE); //Enable SS 
    3244:	81 e0       	ldi	r24, 0x01	; 1
    3246:	0e 94 02 a4 	call	0x14804	; 0x14804 <_spi_enable>
	cbi(DDRB,3);sbi(PORTB,3);//MISO Input
    324a:	bb 98       	cbi	0x17, 3	; 23
    324c:	c3 9a       	sbi	0x18, 3	; 24
	sbi(DDRB,2);             //MOSI Output
    324e:	ba 9a       	sbi	0x17, 2	; 23
}
    3250:	08 95       	ret

00003252 <SendSlaveCommand>:
void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
	 PoolMsg=plMsg;
     IsControlPooling=True;
}
void SendSlaveCommand(char SlaveCommand,char SlaveMessage){     
    3252:	1f 93       	push	r17
    3254:	df 93       	push	r29
    3256:	cf 93       	push	r28
    3258:	0f 92       	push	r0
    325a:	cd b7       	in	r28, 0x3d	; 61
    325c:	de b7       	in	r29, 0x3e	; 62
    325e:	18 2f       	mov	r17, r24
	 systemMaster();
    3260:	69 83       	std	Y+1, r22	; 0x01
    3262:	0e 94 1e 19 	call	0x323c	; 0x323c <systemMaster>
	 _spi(0x05);
    3266:	85 e0       	ldi	r24, 0x05	; 5
    3268:	0e 94 1d a4 	call	0x1483a	; 0x1483a <_spi>
	 _spi(SlaveCommand);
    326c:	81 2f       	mov	r24, r17
    326e:	0e 94 1d a4 	call	0x1483a	; 0x1483a <_spi>
	 _spi(SlaveMessage);
    3272:	69 81       	ldd	r22, Y+1	; 0x01
    3274:	86 2f       	mov	r24, r22
    3276:	0e 94 1d a4 	call	0x1483a	; 0x1483a <_spi>
	 _spi(0x06);
    327a:	86 e0       	ldi	r24, 0x06	; 6
    327c:	0e 94 1d a4 	call	0x1483a	; 0x1483a <_spi>
	 systemSlave();
    3280:	0e 94 0f 19 	call	0x321e	; 0x321e <systemSlave>
}
    3284:	0f 90       	pop	r0
    3286:	cf 91       	pop	r28
    3288:	df 91       	pop	r29
    328a:	1f 91       	pop	r17
    328c:	08 95       	ret

0000328e <SetBaudRate>:

void SetBaudRate(char ComAddr,char brMap){//Com1..Com4
unsigned int brValue=9600;
char brMessage=0;

     if ((ComAddr>=1)&&(ComAddr<=2)){
    328e:	98 2f       	mov	r25, r24
    3290:	91 50       	subi	r25, 0x01	; 1
    3292:	92 30       	cpi	r25, 0x02	; 2
    3294:	98 f4       	brcc	.+38     	; 0x32bc <SetBaudRate+0x2e>
    3296:	64 30       	cpi	r22, 0x04	; 4
    3298:	48 f4       	brcc	.+18     	; 0x32ac <SetBaudRate+0x1e>
    329a:	e6 2f       	mov	r30, r22
    329c:	f0 e0       	ldi	r31, 0x00	; 0
    329e:	ee 0f       	add	r30, r30
    32a0:	ff 1f       	adc	r31, r31
    32a2:	e6 58       	subi	r30, 0x86	; 134
    32a4:	fe 4f       	sbci	r31, 0xFE	; 254
    32a6:	40 81       	ld	r20, Z
    32a8:	51 81       	ldd	r21, Z+1	; 0x01
    32aa:	02 c0       	rjmp	.+4      	; 0x32b0 <SetBaudRate+0x22>
    32ac:	40 e0       	ldi	r20, 0x00	; 0
    32ae:	50 e0       	ldi	r21, 0x00	; 0
	     brValue=GetBaudrate(brMap);
	      uart_init((ComAddr-1),brValue);
    32b0:	60 e0       	ldi	r22, 0x00	; 0
    32b2:	70 e0       	ldi	r23, 0x00	; 0
    32b4:	89 2f       	mov	r24, r25
    32b6:	0e 94 d5 a5 	call	0x14baa	; 0x14baa <uart_init>
    32ba:	08 95       	ret
	 }else
     if ((ComAddr>=3)&&(ComAddr<=4)){
    32bc:	98 2f       	mov	r25, r24
    32be:	93 50       	subi	r25, 0x03	; 3
    32c0:	92 30       	cpi	r25, 0x02	; 2
    32c2:	b0 f4       	brcc	.+44     	; 0x32f0 <SetBaudRate+0x62>
	     //[COM][Baud]
		 brMessage=((ComAddr<<4)|(0x0F&brMap));
    32c4:	e6 2f       	mov	r30, r22
    32c6:	ef 70       	andi	r30, 0x0F	; 15
    32c8:	68 2f       	mov	r22, r24
    32ca:	62 95       	swap	r22
    32cc:	60 7f       	andi	r22, 0xF0	; 240
    32ce:	6e 2b       	or	r22, r30
		 if (iSequencePooling>0)SendPoolingCommand(SC_BAUDRATE,brMessage);
    32d0:	80 91 5e 02 	lds	r24, 0x025E
    32d4:	88 23       	and	r24, r24
    32d6:	49 f0       	breq	.+18     	; 0x32ea <SetBaudRate+0x5c>
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
    32d8:	86 e0       	ldi	r24, 0x06	; 6
    32da:	80 93 8b 06 	sts	0x068B, r24
	 PoolMsg=plMsg;
    32de:	60 93 cc 0c 	sts	0x0CCC, r22
     IsControlPooling=True;
    32e2:	81 e0       	ldi	r24, 0x01	; 1
    32e4:	80 93 62 02 	sts	0x0262, r24
    32e8:	08 95       	ret
	 }else
     if ((ComAddr>=3)&&(ComAddr<=4)){
	     //[COM][Baud]
		 brMessage=((ComAddr<<4)|(0x0F&brMap));
		 if (iSequencePooling>0)SendPoolingCommand(SC_BAUDRATE,brMessage);
		 else SendSlaveCommand(SC_BAUDRATE,brMessage);
    32ea:	86 e0       	ldi	r24, 0x06	; 6
    32ec:	0e 94 29 19 	call	0x3252	; 0x3252 <SendSlaveCommand>
    32f0:	08 95       	ret

000032f2 <InitComport>:
     	  break;	 
	 }
   return Result;
}

void InitComport(){
    32f2:	9f 92       	push	r9
    32f4:	af 92       	push	r10
    32f6:	bf 92       	push	r11
    32f8:	cf 92       	push	r12
    32fa:	df 92       	push	r13
    32fc:	ef 92       	push	r14
    32fe:	ff 92       	push	r15
    3300:	0f 93       	push	r16
    3302:	1f 93       	push	r17
    3304:	df 93       	push	r29
    3306:	cf 93       	push	r28
    3308:	cd b7       	in	r28, 0x3d	; 61
    330a:	de b7       	in	r29, 0x3e	; 62
    330c:	64 97       	sbiw	r28, 0x14	; 20
    330e:	0f b6       	in	r0, 0x3f	; 63
    3310:	f8 94       	cli
    3312:	de bf       	out	0x3e, r29	; 62
    3314:	0f be       	out	0x3f, r0	; 63
    3316:	cd bf       	out	0x3d, r28	; 61
     char brMap,i=0,lcdteks[20];	 
	 int bValue;
	 lcd_printf(3, 1, PSTR("Initialize COM ..."));
    3318:	83 e0       	ldi	r24, 0x03	; 3
    331a:	61 e0       	ldi	r22, 0x01	; 1
    331c:	42 ed       	ldi	r20, 0xD2	; 210
    331e:	5e e1       	ldi	r21, 0x1E	; 30
    3320:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
    3324:	00 e0       	ldi	r16, 0x00	; 0
    3326:	10 e0       	ldi	r17, 0x00	; 0
     for(i=0;i<4;i++){
	     brMap=eeprom_read_byte(&DefBaudrate[i]);
		 bValue=GetBaudrate(brMap);
		 if (bValue==5787)bValue=12213;
		 sprintf_P(lcdteks,PSTR("COM%d:%i           "),i+1,bValue);
    3328:	6e 01       	movw	r12, r28
    332a:	08 94       	sec
    332c:	c1 1c       	adc	r12, r1
    332e:	d1 1c       	adc	r13, r1
    3330:	7e eb       	ldi	r23, 0xBE	; 190
    3332:	a7 2e       	mov	r10, r23
    3334:	7e e1       	ldi	r23, 0x1E	; 30
    3336:	b7 2e       	mov	r11, r23
    3338:	01 c0       	rjmp	.+2      	; 0x333c <InitComport+0x4a>

void InitComport(){
     char brMap,i=0,lcdteks[20];	 
	 int bValue;
	 lcd_printf(3, 1, PSTR("Initialize COM ..."));
     for(i=0;i<4;i++){
    333a:	87 01       	movw	r16, r14
	     brMap=eeprom_read_byte(&DefBaudrate[i]);
    333c:	c8 01       	movw	r24, r16
    333e:	8f 5b       	subi	r24, 0xBF	; 191
    3340:	9e 4f       	sbci	r25, 0xFE	; 254
    3342:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
    3346:	98 2e       	mov	r9, r24
    3348:	84 30       	cpi	r24, 0x04	; 4
    334a:	68 f4       	brcc	.+26     	; 0x3366 <InitComport+0x74>
    334c:	e8 2f       	mov	r30, r24
    334e:	f0 e0       	ldi	r31, 0x00	; 0
    3350:	ee 0f       	add	r30, r30
    3352:	ff 1f       	adc	r31, r31
    3354:	e6 58       	subi	r30, 0x86	; 134
    3356:	fe 4f       	sbci	r31, 0xFE	; 254
    3358:	80 81       	ld	r24, Z
    335a:	91 81       	ldd	r25, Z+1	; 0x01
		 bValue=GetBaudrate(brMap);
		 if (bValue==5787)bValue=12213;
    335c:	26 e1       	ldi	r18, 0x16	; 22
    335e:	8b 39       	cpi	r24, 0x9B	; 155
    3360:	92 07       	cpc	r25, r18
    3362:	21 f0       	breq	.+8      	; 0x336c <InitComport+0x7a>
    3364:	05 c0       	rjmp	.+10     	; 0x3370 <InitComport+0x7e>
    3366:	80 e0       	ldi	r24, 0x00	; 0
    3368:	90 e0       	ldi	r25, 0x00	; 0
    336a:	02 c0       	rjmp	.+4      	; 0x3370 <InitComport+0x7e>
    336c:	85 eb       	ldi	r24, 0xB5	; 181
    336e:	9f e2       	ldi	r25, 0x2F	; 47
     	  break;	 
	 }
   return Result;
}

void InitComport(){
    3370:	78 01       	movw	r14, r16
    3372:	08 94       	sec
    3374:	e1 1c       	adc	r14, r1
    3376:	f1 1c       	adc	r15, r1
	 lcd_printf(3, 1, PSTR("Initialize COM ..."));
     for(i=0;i<4;i++){
	     brMap=eeprom_read_byte(&DefBaudrate[i]);
		 bValue=GetBaudrate(brMap);
		 if (bValue==5787)bValue=12213;
		 sprintf_P(lcdteks,PSTR("COM%d:%i           "),i+1,bValue);
    3378:	ad b7       	in	r26, 0x3d	; 61
    337a:	be b7       	in	r27, 0x3e	; 62
    337c:	18 97       	sbiw	r26, 0x08	; 8
    337e:	0f b6       	in	r0, 0x3f	; 63
    3380:	f8 94       	cli
    3382:	be bf       	out	0x3e, r27	; 62
    3384:	0f be       	out	0x3f, r0	; 63
    3386:	ad bf       	out	0x3d, r26	; 61
    3388:	ed b7       	in	r30, 0x3d	; 61
    338a:	fe b7       	in	r31, 0x3e	; 62
    338c:	31 96       	adiw	r30, 0x01	; 1
    338e:	12 96       	adiw	r26, 0x02	; 2
    3390:	dc 92       	st	X, r13
    3392:	ce 92       	st	-X, r12
    3394:	11 97       	sbiw	r26, 0x01	; 1
    3396:	b3 82       	std	Z+3, r11	; 0x03
    3398:	a2 82       	std	Z+2, r10	; 0x02
    339a:	f5 82       	std	Z+5, r15	; 0x05
    339c:	e4 82       	std	Z+4, r14	; 0x04
    339e:	97 83       	std	Z+7, r25	; 0x07
    33a0:	86 83       	std	Z+6, r24	; 0x06
    33a2:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		 lcd_print(4,1,lcdteks);
    33a6:	2d b7       	in	r18, 0x3d	; 61
    33a8:	3e b7       	in	r19, 0x3e	; 62
    33aa:	28 5f       	subi	r18, 0xF8	; 248
    33ac:	3f 4f       	sbci	r19, 0xFF	; 255
    33ae:	0f b6       	in	r0, 0x3f	; 63
    33b0:	f8 94       	cli
    33b2:	3e bf       	out	0x3e, r19	; 62
    33b4:	0f be       	out	0x3f, r0	; 63
    33b6:	2d bf       	out	0x3d, r18	; 61
    33b8:	84 e0       	ldi	r24, 0x04	; 4
    33ba:	61 e0       	ldi	r22, 0x01	; 1
    33bc:	a6 01       	movw	r20, r12
    33be:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
		 SetBaudRate(i+1,brMap);
    33c2:	80 2f       	mov	r24, r16
    33c4:	8f 5f       	subi	r24, 0xFF	; 255
    33c6:	69 2d       	mov	r22, r9
    33c8:	0e 94 47 19 	call	0x328e	; 0x328e <SetBaudRate>
 	     TimDisplay=0;
    33cc:	10 92 70 02 	sts	0x0270, r1
	     while(TimDisplay<2){
    33d0:	04 c0       	rjmp	.+8      	; 0x33da <InitComport+0xe8>
		     if (TimDisplay>1)break;
    33d2:	80 91 70 02 	lds	r24, 0x0270
    33d6:	82 30       	cpi	r24, 0x02	; 2
    33d8:	20 f4       	brcc	.+8      	; 0x33e2 <InitComport+0xf0>
		 if (bValue==5787)bValue=12213;
		 sprintf_P(lcdteks,PSTR("COM%d:%i           "),i+1,bValue);
		 lcd_print(4,1,lcdteks);
		 SetBaudRate(i+1,brMap);
 	     TimDisplay=0;
	     while(TimDisplay<2){
    33da:	80 91 70 02 	lds	r24, 0x0270
    33de:	82 30       	cpi	r24, 0x02	; 2
    33e0:	c0 f3       	brcs	.-16     	; 0x33d2 <InitComport+0xe0>

void InitComport(){
     char brMap,i=0,lcdteks[20];	 
	 int bValue;
	 lcd_printf(3, 1, PSTR("Initialize COM ..."));
     for(i=0;i<4;i++){
    33e2:	34 e0       	ldi	r19, 0x04	; 4
    33e4:	e3 16       	cp	r14, r19
    33e6:	f1 04       	cpc	r15, r1
    33e8:	09 f0       	breq	.+2      	; 0x33ec <InitComport+0xfa>
    33ea:	a7 cf       	rjmp	.-178    	; 0x333a <InitComport+0x48>
	     while(TimDisplay<2){
		     if (TimDisplay>1)break;
		 };

	 }
}
    33ec:	64 96       	adiw	r28, 0x14	; 20
    33ee:	0f b6       	in	r0, 0x3f	; 63
    33f0:	f8 94       	cli
    33f2:	de bf       	out	0x3e, r29	; 62
    33f4:	0f be       	out	0x3f, r0	; 63
    33f6:	cd bf       	out	0x3d, r28	; 61
    33f8:	cf 91       	pop	r28
    33fa:	df 91       	pop	r29
    33fc:	1f 91       	pop	r17
    33fe:	0f 91       	pop	r16
    3400:	ff 90       	pop	r15
    3402:	ef 90       	pop	r14
    3404:	df 90       	pop	r13
    3406:	cf 90       	pop	r12
    3408:	bf 90       	pop	r11
    340a:	af 90       	pop	r10
    340c:	9f 90       	pop	r9
    340e:	08 95       	ret

00003410 <EDCSendByte>:
    _spi_enable(_SPI_SLAVE); //Enable SS 
	cbi(DDRB,3);sbi(PORTB,3);//MISO Input
	sbi(DDRB,2);             //MOSI Output
}

void EDCSendByte(char EDCData){
    3410:	df 93       	push	r29
    3412:	cf 93       	push	r28
    3414:	0f 92       	push	r0
    3416:	cd b7       	in	r28, 0x3d	; 61
    3418:	de b7       	in	r29, 0x3e	; 62
     systemMaster();	 
    341a:	89 83       	std	Y+1, r24	; 0x01
    341c:	0e 94 1e 19 	call	0x323c	; 0x323c <systemMaster>
     _spi(EDCData);
    3420:	89 81       	ldd	r24, Y+1	; 0x01
    3422:	0e 94 1d a4 	call	0x1483a	; 0x1483a <_spi>
     systemSlave();
    3426:	0e 94 0f 19 	call	0x321e	; 0x321e <systemSlave>
}
    342a:	0f 90       	pop	r0
    342c:	cf 91       	pop	r28
    342e:	df 91       	pop	r29
    3430:	08 95       	ret

00003432 <CalcLRC>:

char CalcLRC(char xLRC,char DataIn){
     char Result;
	 Result=xLRC^DataIn;
     return(Result);
}
    3432:	86 27       	eor	r24, r22
    3434:	08 95       	ret

00003436 <SendEDCMessage>:

void SendEDCMessage(){
    3436:	ef 92       	push	r14
    3438:	ff 92       	push	r15
    343a:	0f 93       	push	r16
    343c:	1f 93       	push	r17
    343e:	df 93       	push	r29
    3440:	cf 93       	push	r28
    3442:	cd b7       	in	r28, 0x3d	; 61
    3444:	de b7       	in	r29, 0x3e	; 62
    3446:	ec 97       	sbiw	r28, 0x3c	; 60
    3448:	0f b6       	in	r0, 0x3f	; 63
    344a:	f8 94       	cli
    344c:	de bf       	out	0x3e, r29	; 62
    344e:	0f be       	out	0x3f, r0	; 63
    3450:	cd bf       	out	0x3d, r28	; 61

     //GenerateData
	 //sprintf_P(strAmount,PSTR("%d"),100);//Testing Only
	 //AddZeroLead(strAmount,8);
	 //uart_printf(0,0,PSTR("StrStatus:"));uart_print(0,1,strStatus);
     sprintf_P(SerialEDC,PSTR("02%s%s%s%s%s%s%s"),strTranNo,strFIP_ID,strDescription,strPrice,strVolume,strAmount,strStatus);     
    3452:	8d b7       	in	r24, 0x3d	; 61
    3454:	9e b7       	in	r25, 0x3e	; 62
    3456:	42 97       	sbiw	r24, 0x12	; 18
    3458:	0f b6       	in	r0, 0x3f	; 63
    345a:	f8 94       	cli
    345c:	9e bf       	out	0x3e, r25	; 62
    345e:	0f be       	out	0x3f, r0	; 63
    3460:	8d bf       	out	0x3d, r24	; 61
    3462:	ed b7       	in	r30, 0x3d	; 61
    3464:	fe b7       	in	r31, 0x3e	; 62
    3466:	31 96       	adiw	r30, 0x01	; 1
    3468:	8e 01       	movw	r16, r28
    346a:	0f 5f       	subi	r16, 0xFF	; 255
    346c:	1f 4f       	sbci	r17, 0xFF	; 255
    346e:	ad b7       	in	r26, 0x3d	; 61
    3470:	be b7       	in	r27, 0x3e	; 62
    3472:	12 96       	adiw	r26, 0x02	; 2
    3474:	1c 93       	st	X, r17
    3476:	0e 93       	st	-X, r16
    3478:	11 97       	sbiw	r26, 0x01	; 1
    347a:	8b ec       	ldi	r24, 0xCB	; 203
    347c:	9d e1       	ldi	r25, 0x1D	; 29
    347e:	93 83       	std	Z+3, r25	; 0x03
    3480:	82 83       	std	Z+2, r24	; 0x02
    3482:	8c e8       	ldi	r24, 0x8C	; 140
    3484:	9d e0       	ldi	r25, 0x0D	; 13
    3486:	95 83       	std	Z+5, r25	; 0x05
    3488:	84 83       	std	Z+4, r24	; 0x04
    348a:	8d e9       	ldi	r24, 0x9D	; 157
    348c:	98 e0       	ldi	r25, 0x08	; 8
    348e:	97 83       	std	Z+7, r25	; 0x07
    3490:	86 83       	std	Z+6, r24	; 0x06
    3492:	86 e0       	ldi	r24, 0x06	; 6
    3494:	99 e0       	ldi	r25, 0x09	; 9
    3496:	91 87       	std	Z+9, r25	; 0x09
    3498:	80 87       	std	Z+8, r24	; 0x08
    349a:	82 e8       	ldi	r24, 0x82	; 130
    349c:	96 e0       	ldi	r25, 0x06	; 6
    349e:	93 87       	std	Z+11, r25	; 0x0b
    34a0:	82 87       	std	Z+10, r24	; 0x0a
    34a2:	8a e5       	ldi	r24, 0x5A	; 90
    34a4:	94 e0       	ldi	r25, 0x04	; 4
    34a6:	95 87       	std	Z+13, r25	; 0x0d
    34a8:	84 87       	std	Z+12, r24	; 0x0c
    34aa:	87 e9       	ldi	r24, 0x97	; 151
    34ac:	9c e0       	ldi	r25, 0x0C	; 12
    34ae:	97 87       	std	Z+15, r25	; 0x0f
    34b0:	86 87       	std	Z+14, r24	; 0x0e
    34b2:	8e e6       	ldi	r24, 0x6E	; 110
    34b4:	94 e0       	ldi	r25, 0x04	; 4
    34b6:	91 8b       	std	Z+17, r25	; 0x11
    34b8:	80 8b       	std	Z+16, r24	; 0x10
    34ba:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>

	 //SendingData
	 xCRC=0;EDCSendByte(0x02);
    34be:	ed b7       	in	r30, 0x3d	; 61
    34c0:	fe b7       	in	r31, 0x3e	; 62
    34c2:	72 96       	adiw	r30, 0x12	; 18
    34c4:	0f b6       	in	r0, 0x3f	; 63
    34c6:	f8 94       	cli
    34c8:	fe bf       	out	0x3e, r31	; 62
    34ca:	0f be       	out	0x3f, r0	; 63
    34cc:	ed bf       	out	0x3d, r30	; 61
    34ce:	82 e0       	ldi	r24, 0x02	; 2
    34d0:	0e 94 08 1a 	call	0x3410	; 0x3410 <EDCSendByte>
	 xCRC=CalcLRC(xCRC,0x02);	      
    34d4:	e2 e0       	ldi	r30, 0x02	; 2
    34d6:	fe 2e       	mov	r15, r30
	 for (i=0;i<strlen(SerialEDC);i++){
    34d8:	ee 24       	eor	r14, r14
    34da:	0e c0       	rjmp	.+28     	; 0x34f8 <SendEDCMessage+0xc2>
          xCRC=CalcLRC(xCRC,SerialEDC[i]);
    34dc:	20 0f       	add	r18, r16
    34de:	31 1f       	adc	r19, r17
    34e0:	d9 01       	movw	r26, r18
    34e2:	8c 91       	ld	r24, X
     systemSlave();
}

char CalcLRC(char xLRC,char DataIn){
     char Result;
	 Result=xLRC^DataIn;
    34e4:	f8 26       	eor	r15, r24
	 //SendingData
	 xCRC=0;EDCSendByte(0x02);
	 xCRC=CalcLRC(xCRC,0x02);	      
	 for (i=0;i<strlen(SerialEDC);i++){
          xCRC=CalcLRC(xCRC,SerialEDC[i]);
          EDCSendByte(SerialEDC[i]);
    34e6:	0e 94 08 1a 	call	0x3410	; 0x3410 <EDCSendByte>
    34ea:	e3 ed       	ldi	r30, 0xD3	; 211
    34ec:	f0 e3       	ldi	r31, 0x30	; 48
    34ee:	31 97       	sbiw	r30, 0x01	; 1
    34f0:	f1 f7       	brne	.-4      	; 0x34ee <SendEDCMessage+0xb8>
    34f2:	00 c0       	rjmp	.+0      	; 0x34f4 <SendEDCMessage+0xbe>
    34f4:	00 00       	nop
     sprintf_P(SerialEDC,PSTR("02%s%s%s%s%s%s%s"),strTranNo,strFIP_ID,strDescription,strPrice,strVolume,strAmount,strStatus);     

	 //SendingData
	 xCRC=0;EDCSendByte(0x02);
	 xCRC=CalcLRC(xCRC,0x02);	      
	 for (i=0;i<strlen(SerialEDC);i++){
    34f6:	e3 94       	inc	r14
    34f8:	f8 01       	movw	r30, r16
    34fa:	01 90       	ld	r0, Z+
    34fc:	00 20       	and	r0, r0
    34fe:	e9 f7       	brne	.-6      	; 0x34fa <SendEDCMessage+0xc4>
    3500:	31 97       	sbiw	r30, 0x01	; 1
    3502:	e0 1b       	sub	r30, r16
    3504:	f1 0b       	sbc	r31, r17
    3506:	2e 2d       	mov	r18, r14
    3508:	30 e0       	ldi	r19, 0x00	; 0
    350a:	2e 17       	cp	r18, r30
    350c:	3f 07       	cpc	r19, r31
    350e:	30 f3       	brcs	.-52     	; 0x34dc <SendEDCMessage+0xa6>
          xCRC=CalcLRC(xCRC,SerialEDC[i]);
          EDCSendByte(SerialEDC[i]);
		  //uart(0,1,SerialEDC[i]);
		  _delay_ms(SPI_EDC_DELAY);//min:8
	 }
     EDCSendByte(0x03);
    3510:	83 e0       	ldi	r24, 0x03	; 3
    3512:	0e 94 08 1a 	call	0x3410	; 0x3410 <EDCSendByte>
	 xCRC=CalcLRC(xCRC,0x03);	      
	 EDCSendByte(xCRC);
    3516:	83 e0       	ldi	r24, 0x03	; 3
    3518:	8f 25       	eor	r24, r15
    351a:	0e 94 08 1a 	call	0x3410	; 0x3410 <EDCSendByte>
}
    351e:	ec 96       	adiw	r28, 0x3c	; 60
    3520:	0f b6       	in	r0, 0x3f	; 63
    3522:	f8 94       	cli
    3524:	de bf       	out	0x3e, r29	; 62
    3526:	0f be       	out	0x3f, r0	; 63
    3528:	cd bf       	out	0x3d, r28	; 61
    352a:	cf 91       	pop	r28
    352c:	df 91       	pop	r29
    352e:	1f 91       	pop	r17
    3530:	0f 91       	pop	r16
    3532:	ff 90       	pop	r15
    3534:	ef 90       	pop	r14
    3536:	08 95       	ret

00003538 <systemEDC>:

void systemEDC(){//EDC Handler
     

}
    3538:	08 95       	ret

0000353a <FViewFreeMessage>:
char FViewFreeMessage(){
static char stFreeMessage=fmInit;
       char Result=MENU_NONE;
     
	 Result=MENU_NONE;
	 switch(stFreeMessage){
    353a:	80 91 4c 03 	lds	r24, 0x034C
    353e:	81 30       	cpi	r24, 0x01	; 1
    3540:	49 f0       	breq	.+18     	; 0x3554 <FViewFreeMessage+0x1a>
    3542:	81 30       	cpi	r24, 0x01	; 1
    3544:	28 f0       	brcs	.+10     	; 0x3550 <FViewFreeMessage+0x16>
    3546:	82 30       	cpi	r24, 0x02	; 2
    3548:	19 f1       	breq	.+70     	; 0x3590 <FViewFreeMessage+0x56>
    354a:	83 30       	cpi	r24, 0x03	; 3
    354c:	69 f5       	brne	.+90     	; 0x35a8 <FViewFreeMessage+0x6e>
    354e:	28 c0       	rjmp	.+80     	; 0x35a0 <FViewFreeMessage+0x66>
	 case fmInit:
	      stFreeMessage=fmDisplayFreeMessage;
    3550:	81 e0       	ldi	r24, 0x01	; 1
    3552:	23 c0       	rjmp	.+70     	; 0x359a <FViewFreeMessage+0x60>
	      break;
     case fmDisplayFreeMessage:
		  lcd_clear();
    3554:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
		  lcd_print(1,1,strFreeMessageLine1);
    3558:	81 e0       	ldi	r24, 0x01	; 1
    355a:	61 e0       	ldi	r22, 0x01	; 1
    355c:	46 e7       	ldi	r20, 0x76	; 118
    355e:	59 e0       	ldi	r21, 0x09	; 9
    3560:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
		  lcd_print(2,1,strFreeMessageLine2);
    3564:	82 e0       	ldi	r24, 0x02	; 2
    3566:	61 e0       	ldi	r22, 0x01	; 1
    3568:	47 e8       	ldi	r20, 0x87	; 135
    356a:	58 e0       	ldi	r21, 0x08	; 8
    356c:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
		  lcd_print(3,1,strFreeMessageLine3);
    3570:	83 e0       	ldi	r24, 0x03	; 3
    3572:	61 e0       	ldi	r22, 0x01	; 1
    3574:	40 ef       	ldi	r20, 0xF0	; 240
    3576:	58 e0       	ldi	r21, 0x08	; 8
    3578:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
		  lcd_print(4,1,strFreeMessageLine4);
    357c:	84 e0       	ldi	r24, 0x04	; 4
    357e:	61 e0       	ldi	r22, 0x01	; 1
    3580:	4f ec       	ldi	r20, 0xCF	; 207
    3582:	5c e0       	ldi	r21, 0x0C	; 12
    3584:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
	      TimDisplay=0;
    3588:	10 92 70 02 	sts	0x0270, r1
	      stFreeMessage=fmDelayViewMesage;
    358c:	82 e0       	ldi	r24, 0x02	; 2
    358e:	05 c0       	rjmp	.+10     	; 0x359a <FViewFreeMessage+0x60>
	      break;
	 case fmDelayViewMesage:  
	      if (TimDisplay>TIM_FREE_MESSAGE)stFreeMessage=fmFinishFreeMessage;
    3590:	80 91 70 02 	lds	r24, 0x0270
    3594:	8b 30       	cpi	r24, 0x0B	; 11
    3596:	50 f0       	brcs	.+20     	; 0x35ac <FViewFreeMessage+0x72>
    3598:	83 e0       	ldi	r24, 0x03	; 3
    359a:	80 93 4c 03 	sts	0x034C, r24
    359e:	04 c0       	rjmp	.+8      	; 0x35a8 <FViewFreeMessage+0x6e>
	      break;
     case fmFinishFreeMessage:
          stFreeMessage=fmInit;
    35a0:	10 92 4c 03 	sts	0x034C, r1
	      Result=MENU_DONE;
    35a4:	81 e0       	ldi	r24, 0x01	; 1
	      break;
    35a6:	08 95       	ret

char FViewFreeMessage(){
static char stFreeMessage=fmInit;
       char Result=MENU_NONE;
     
	 Result=MENU_NONE;
    35a8:	80 e0       	ldi	r24, 0x00	; 0
    35aa:	08 95       	ret
    35ac:	80 e0       	ldi	r24, 0x00	; 0
          stFreeMessage=fmInit;
	      Result=MENU_DONE;
	      break;
	 }
  return Result;
}
    35ae:	08 95       	ret

000035b0 <GeniusCalc>:


char GeniusCalc(char cOption, char valA, char valB){
     char valC_H,valC_L,xValA,xValB,Result;
	 Result=0;
     switch(cOption){
    35b0:	88 23       	and	r24, r24
    35b2:	19 f0       	breq	.+6      	; 0x35ba <GeniusCalc+0xa>
    35b4:	81 30       	cpi	r24, 0x01	; 1
    35b6:	d1 f4       	brne	.+52     	; 0x35ec <GeniusCalc+0x3c>
    35b8:	0a c0       	rjmp	.+20     	; 0x35ce <GeniusCalc+0x1e>
	 case G_PLUS:                  // 5 + 8 = 1 + 3 = 4
	      valC_H=(valA+valB)/10;   //  
    35ba:	86 2f       	mov	r24, r22
    35bc:	90 e0       	ldi	r25, 0x00	; 0
    35be:	84 0f       	add	r24, r20
    35c0:	91 1d       	adc	r25, r1
		  valC_L=(valA+valB)%10;   //
    35c2:	6a e0       	ldi	r22, 0x0A	; 10
    35c4:	70 e0       	ldi	r23, 0x00	; 0
    35c6:	0e 94 ab a7 	call	0x14f56	; 0x14f56 <__divmodhi4>
	      Result=valC_H+valC_L;
    35ca:	86 0f       	add	r24, r22
	      break;
    35cc:	08 95       	ret
	 case G_MULTY:                 
	      if (valA>0)xValA=valA;
    35ce:	66 23       	and	r22, r22
    35d0:	09 f4       	brne	.+2      	; 0x35d4 <GeniusCalc+0x24>
		  else xValA=1;
    35d2:	61 e0       	ldi	r22, 0x01	; 1
	      if (valB>0)xValB=valB;
    35d4:	44 23       	and	r20, r20
    35d6:	09 f4       	brne	.+2      	; 0x35da <GeniusCalc+0x2a>
		  else xValB=1;
    35d8:	41 e0       	ldi	r20, 0x01	; 1
	      valC_H=(xValA*xValB)/10;   //  
    35da:	46 9f       	mul	r20, r22
    35dc:	c0 01       	movw	r24, r0
    35de:	11 24       	eor	r1, r1
    35e0:	6a e0       	ldi	r22, 0x0A	; 10
    35e2:	70 e0       	ldi	r23, 0x00	; 0
    35e4:	0e 94 ab a7 	call	0x14f56	; 0x14f56 <__divmodhi4>
		  valC_L=(xValA*xValB)%10;   //
	      Result=GeniusCalc(G_PLUS,valC_H,valC_L);
    35e8:	48 2f       	mov	r20, r24
    35ea:	e7 cf       	rjmp	.-50     	; 0x35ba <GeniusCalc+0xa>
}


char GeniusCalc(char cOption, char valA, char valB){
     char valC_H,valC_L,xValA,xValB,Result;
	 Result=0;
    35ec:	80 e0       	ldi	r24, 0x00	; 0
	 case G_MINUS:
	      
	      break;
	 }
   return Result;
}
    35ee:	08 95       	ret

000035f0 <WrapCode>:

void WrapCode(char *strRawCode){
    35f0:	bf 92       	push	r11
    35f2:	cf 92       	push	r12
    35f4:	df 92       	push	r13
    35f6:	ef 92       	push	r14
    35f8:	ff 92       	push	r15
    35fa:	0f 93       	push	r16
    35fc:	1f 93       	push	r17
    35fe:	df 93       	push	r29
    3600:	cf 93       	push	r28
    3602:	cd b7       	in	r28, 0x3d	; 61
    3604:	de b7       	in	r29, 0x3e	; 62
    3606:	60 97       	sbiw	r28, 0x10	; 16
    3608:	0f b6       	in	r0, 0x3f	; 63
    360a:	f8 94       	cli
    360c:	de bf       	out	0x3e, r29	; 62
    360e:	0f be       	out	0x3f, r0	; 63
    3610:	cd bf       	out	0x3d, r28	; 61
    3612:	8c 01       	movw	r16, r24
     char i,seedKey;
	 char strTemp[15];
	 //62678677 ->68846445
	 seedKey=0;
    3614:	40 e0       	ldi	r20, 0x00	; 0
	 for (i=0;i<strlen(strRawCode);i++){
    3616:	bb 24       	eor	r11, r11
    3618:	6e 01       	movw	r12, r28
    361a:	08 94       	sec
    361c:	c1 1c       	adc	r12, r1
    361e:	d1 1c       	adc	r13, r1
    3620:	12 c0       	rjmp	.+36     	; 0x3646 <WrapCode+0x56>
	      strTemp[i]='0'+GeniusCalc(G_PLUS,(strRawCode[i]-'0'),seedKey);
    3622:	f8 01       	movw	r30, r16
    3624:	ee 0d       	add	r30, r14
    3626:	ff 1d       	adc	r31, r15
    3628:	90 81       	ld	r25, Z
    362a:	90 53       	subi	r25, 0x30	; 48
    362c:	80 e0       	ldi	r24, 0x00	; 0
    362e:	69 2f       	mov	r22, r25
    3630:	98 8b       	std	Y+16, r25	; 0x10
    3632:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <GeniusCalc>
    3636:	f6 01       	movw	r30, r12
    3638:	ee 0d       	add	r30, r14
    363a:	ff 1d       	adc	r31, r15
    363c:	80 5d       	subi	r24, 0xD0	; 208
    363e:	80 83       	st	Z, r24
void WrapCode(char *strRawCode){
     char i,seedKey;
	 char strTemp[15];
	 //62678677 ->68846445
	 seedKey=0;
	 for (i=0;i<strlen(strRawCode);i++){
    3640:	b3 94       	inc	r11
	      strTemp[i]='0'+GeniusCalc(G_PLUS,(strRawCode[i]-'0'),seedKey);
		  seedKey=strRawCode[i]-'0';
    3642:	98 89       	ldd	r25, Y+16	; 0x10
    3644:	49 2f       	mov	r20, r25
void WrapCode(char *strRawCode){
     char i,seedKey;
	 char strTemp[15];
	 //62678677 ->68846445
	 seedKey=0;
	 for (i=0;i<strlen(strRawCode);i++){
    3646:	eb 2c       	mov	r14, r11
    3648:	ff 24       	eor	r15, r15
    364a:	f8 01       	movw	r30, r16
    364c:	01 90       	ld	r0, Z+
    364e:	00 20       	and	r0, r0
    3650:	e9 f7       	brne	.-6      	; 0x364c <WrapCode+0x5c>
    3652:	31 97       	sbiw	r30, 0x01	; 1
    3654:	e0 1b       	sub	r30, r16
    3656:	f1 0b       	sbc	r31, r17
    3658:	ee 16       	cp	r14, r30
    365a:	ff 06       	cpc	r15, r31
    365c:	10 f3       	brcs	.-60     	; 0x3622 <WrapCode+0x32>
	      strTemp[i]='0'+GeniusCalc(G_PLUS,(strRawCode[i]-'0'),seedKey);
		  seedKey=strRawCode[i]-'0';
	 }strTemp[strlen(strRawCode)]=0;
    365e:	ec 0d       	add	r30, r12
    3660:	fd 1d       	adc	r31, r13
    3662:	10 82       	st	Z, r1
     sprintf_P(strRawCode,PSTR("%s"),strTemp);
    3664:	00 d0       	rcall	.+0      	; 0x3666 <WrapCode+0x76>
    3666:	00 d0       	rcall	.+0      	; 0x3668 <WrapCode+0x78>
    3668:	00 d0       	rcall	.+0      	; 0x366a <WrapCode+0x7a>
    366a:	ed b7       	in	r30, 0x3d	; 61
    366c:	fe b7       	in	r31, 0x3e	; 62
    366e:	31 96       	adiw	r30, 0x01	; 1
    3670:	ad b7       	in	r26, 0x3d	; 61
    3672:	be b7       	in	r27, 0x3e	; 62
    3674:	12 96       	adiw	r26, 0x02	; 2
    3676:	1c 93       	st	X, r17
    3678:	0e 93       	st	-X, r16
    367a:	11 97       	sbiw	r26, 0x01	; 1
    367c:	88 ed       	ldi	r24, 0xD8	; 216
    367e:	99 e1       	ldi	r25, 0x19	; 25
    3680:	93 83       	std	Z+3, r25	; 0x03
    3682:	82 83       	std	Z+2, r24	; 0x02
    3684:	d5 82       	std	Z+5, r13	; 0x05
    3686:	c4 82       	std	Z+4, r12	; 0x04
    3688:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    368c:	8d b7       	in	r24, 0x3d	; 61
    368e:	9e b7       	in	r25, 0x3e	; 62
    3690:	06 96       	adiw	r24, 0x06	; 6
    3692:	0f b6       	in	r0, 0x3f	; 63
    3694:	f8 94       	cli
    3696:	9e bf       	out	0x3e, r25	; 62
    3698:	0f be       	out	0x3f, r0	; 63
    369a:	8d bf       	out	0x3d, r24	; 61
}
    369c:	60 96       	adiw	r28, 0x10	; 16
    369e:	0f b6       	in	r0, 0x3f	; 63
    36a0:	f8 94       	cli
    36a2:	de bf       	out	0x3e, r29	; 62
    36a4:	0f be       	out	0x3f, r0	; 63
    36a6:	cd bf       	out	0x3d, r28	; 61
    36a8:	cf 91       	pop	r28
    36aa:	df 91       	pop	r29
    36ac:	1f 91       	pop	r17
    36ae:	0f 91       	pop	r16
    36b0:	ff 90       	pop	r15
    36b2:	ef 90       	pop	r14
    36b4:	df 90       	pop	r13
    36b6:	cf 90       	pop	r12
    36b8:	bf 90       	pop	r11
    36ba:	08 95       	ret

000036bc <RemoveChar>:
	   sprintf_P(strSend,PSTR("Wrap:%s"),strDestCode);
	   uart_print(1,1,strSend);     
	 #endif
}

void RemoveChar(char *strSource, char cRem){
    36bc:	1f 93       	push	r17
    36be:	df 93       	push	r29
    36c0:	cf 93       	push	r28
    36c2:	cd b7       	in	r28, 0x3d	; 61
    36c4:	de b7       	in	r29, 0x3e	; 62
    36c6:	64 97       	sbiw	r28, 0x14	; 20
    36c8:	0f b6       	in	r0, 0x3f	; 63
    36ca:	f8 94       	cli
    36cc:	de bf       	out	0x3e, r29	; 62
    36ce:	0f be       	out	0x3f, r0	; 63
    36d0:	cd bf       	out	0x3d, r28	; 61
     char i,iAdd,sTemp[20];
     iAdd=0;
    36d2:	70 e0       	ldi	r23, 0x00	; 0
	 for(i=0;i<strlen(strSource);i++){
    36d4:	10 e0       	ldi	r17, 0x00	; 0
	     if (strSource[i]!=cRem){
		     sTemp[iAdd]=strSource[i];
    36d6:	ae 01       	movw	r20, r28
    36d8:	4f 5f       	subi	r20, 0xFF	; 255
    36da:	5f 4f       	sbci	r21, 0xFF	; 255
}

void RemoveChar(char *strSource, char cRem){
     char i,iAdd,sTemp[20];
     iAdd=0;
	 for(i=0;i<strlen(strSource);i++){
    36dc:	0c c0       	rjmp	.+24     	; 0x36f6 <RemoveChar+0x3a>
	     if (strSource[i]!=cRem){
    36de:	28 0f       	add	r18, r24
    36e0:	39 1f       	adc	r19, r25
    36e2:	d9 01       	movw	r26, r18
    36e4:	2c 91       	ld	r18, X
    36e6:	26 17       	cp	r18, r22
    36e8:	29 f0       	breq	.+10     	; 0x36f4 <RemoveChar+0x38>
		     sTemp[iAdd]=strSource[i];
    36ea:	fa 01       	movw	r30, r20
    36ec:	e7 0f       	add	r30, r23
    36ee:	f1 1d       	adc	r31, r1
    36f0:	20 83       	st	Z, r18
			 iAdd++;
    36f2:	7f 5f       	subi	r23, 0xFF	; 255
}

void RemoveChar(char *strSource, char cRem){
     char i,iAdd,sTemp[20];
     iAdd=0;
	 for(i=0;i<strlen(strSource);i++){
    36f4:	1f 5f       	subi	r17, 0xFF	; 255
    36f6:	21 2f       	mov	r18, r17
    36f8:	30 e0       	ldi	r19, 0x00	; 0
    36fa:	fc 01       	movw	r30, r24
    36fc:	01 90       	ld	r0, Z+
    36fe:	00 20       	and	r0, r0
    3700:	e9 f7       	brne	.-6      	; 0x36fc <RemoveChar+0x40>
    3702:	31 97       	sbiw	r30, 0x01	; 1
    3704:	e8 1b       	sub	r30, r24
    3706:	f9 0b       	sbc	r31, r25
    3708:	2e 17       	cp	r18, r30
    370a:	3f 07       	cpc	r19, r31
    370c:	40 f3       	brcs	.-48     	; 0x36de <RemoveChar+0x22>
	     if (strSource[i]!=cRem){
		     sTemp[iAdd]=strSource[i];
			 iAdd++;
          }
	 }sTemp[iAdd]=0;
    370e:	9e 01       	movw	r18, r28
    3710:	2f 5f       	subi	r18, 0xFF	; 255
    3712:	3f 4f       	sbci	r19, 0xFF	; 255
    3714:	f9 01       	movw	r30, r18
    3716:	e7 0f       	add	r30, r23
    3718:	f1 1d       	adc	r31, r1
    371a:	10 82       	st	Z, r1
	 sprintf_P(strSource,PSTR("%s"),sTemp);
    371c:	00 d0       	rcall	.+0      	; 0x371e <RemoveChar+0x62>
    371e:	00 d0       	rcall	.+0      	; 0x3720 <RemoveChar+0x64>
    3720:	00 d0       	rcall	.+0      	; 0x3722 <RemoveChar+0x66>
    3722:	ed b7       	in	r30, 0x3d	; 61
    3724:	fe b7       	in	r31, 0x3e	; 62
    3726:	31 96       	adiw	r30, 0x01	; 1
    3728:	ad b7       	in	r26, 0x3d	; 61
    372a:	be b7       	in	r27, 0x3e	; 62
    372c:	12 96       	adiw	r26, 0x02	; 2
    372e:	9c 93       	st	X, r25
    3730:	8e 93       	st	-X, r24
    3732:	11 97       	sbiw	r26, 0x01	; 1
    3734:	8d ec       	ldi	r24, 0xCD	; 205
    3736:	99 e1       	ldi	r25, 0x19	; 25
    3738:	93 83       	std	Z+3, r25	; 0x03
    373a:	82 83       	std	Z+2, r24	; 0x02
    373c:	35 83       	std	Z+5, r19	; 0x05
    373e:	24 83       	std	Z+4, r18	; 0x04
    3740:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    3744:	ed b7       	in	r30, 0x3d	; 61
    3746:	fe b7       	in	r31, 0x3e	; 62
    3748:	36 96       	adiw	r30, 0x06	; 6
    374a:	0f b6       	in	r0, 0x3f	; 63
    374c:	f8 94       	cli
    374e:	fe bf       	out	0x3e, r31	; 62
    3750:	0f be       	out	0x3f, r0	; 63
    3752:	ed bf       	out	0x3d, r30	; 61
}
    3754:	64 96       	adiw	r28, 0x14	; 20
    3756:	0f b6       	in	r0, 0x3f	; 63
    3758:	f8 94       	cli
    375a:	de bf       	out	0x3e, r29	; 62
    375c:	0f be       	out	0x3f, r0	; 63
    375e:	cd bf       	out	0x3d, r28	; 61
    3760:	cf 91       	pop	r28
    3762:	df 91       	pop	r29
    3764:	1f 91       	pop	r17
    3766:	08 95       	ret

00003768 <GenerateKeyStamp>:


   return Result;
}

void GenerateKeyStamp(char *sTime, char *sGCode, char *strKeyStamp){//
    3768:	9f 92       	push	r9
    376a:	af 92       	push	r10
    376c:	bf 92       	push	r11
    376e:	cf 92       	push	r12
    3770:	df 92       	push	r13
    3772:	ef 92       	push	r14
    3774:	ff 92       	push	r15
    3776:	0f 93       	push	r16
    3778:	1f 93       	push	r17
    377a:	df 93       	push	r29
    377c:	cf 93       	push	r28
    377e:	cd b7       	in	r28, 0x3d	; 61
    3780:	de b7       	in	r29, 0x3e	; 62
    3782:	2d 97       	sbiw	r28, 0x0d	; 13
    3784:	0f b6       	in	r0, 0x3f	; 63
    3786:	f8 94       	cli
    3788:	de bf       	out	0x3e, r29	; 62
    378a:	0f be       	out	0x3f, r0	; 63
    378c:	cd bf       	out	0x3d, r28	; 61
    378e:	fc 01       	movw	r30, r24
    3790:	7b 01       	movw	r14, r22
    3792:	6a 01       	movw	r12, r20
       KeyStamp: 68623252
	             65585577
	 */
     char seedIdx,sSeed[10],sAdd[3],i;
     
	 seedIdx=(sTime[5]-'0')%8; 
    3794:	85 81       	ldd	r24, Z+5	; 0x05
    3796:	90 e0       	ldi	r25, 0x00	; 0
    3798:	c0 97       	sbiw	r24, 0x30	; 48
    379a:	28 e0       	ldi	r18, 0x08	; 8
    379c:	30 e0       	ldi	r19, 0x00	; 0
    379e:	b9 01       	movw	r22, r18
    37a0:	0e 94 ab a7 	call	0x14f56	; 0x14f56 <__divmodhi4>
	 sAdd[0]=sGCode[seedIdx];
    37a4:	d7 01       	movw	r26, r14
    37a6:	a8 0f       	add	r26, r24
    37a8:	b1 1d       	adc	r27, r1
    37aa:	8c 91       	ld	r24, X
    37ac:	89 83       	std	Y+1, r24	; 0x01
     seedIdx=(sTime[6]-'0')%8;
    37ae:	86 81       	ldd	r24, Z+6	; 0x06
    37b0:	90 e0       	ldi	r25, 0x00	; 0
    37b2:	c0 97       	sbiw	r24, 0x30	; 48
    37b4:	b9 01       	movw	r22, r18
    37b6:	0e 94 ab a7 	call	0x14f56	; 0x14f56 <__divmodhi4>
	 sAdd[1]=sGCode[seedIdx];
    37ba:	d7 01       	movw	r26, r14
    37bc:	a8 0f       	add	r26, r24
    37be:	b1 1d       	adc	r27, r1
    37c0:	8c 91       	ld	r24, X
    37c2:	8a 83       	std	Y+2, r24	; 0x02
	 sAdd[2]=0;
    37c4:	1b 82       	std	Y+3, r1	; 0x03

	 sprintf_P(sSeed,PSTR("%s%s"),sTime,sAdd);
    37c6:	8d b7       	in	r24, 0x3d	; 61
    37c8:	9e b7       	in	r25, 0x3e	; 62
    37ca:	08 97       	sbiw	r24, 0x08	; 8
    37cc:	0f b6       	in	r0, 0x3f	; 63
    37ce:	f8 94       	cli
    37d0:	9e bf       	out	0x3e, r25	; 62
    37d2:	0f be       	out	0x3f, r0	; 63
    37d4:	8d bf       	out	0x3d, r24	; 61
    37d6:	2d b7       	in	r18, 0x3d	; 61
    37d8:	3e b7       	in	r19, 0x3e	; 62
    37da:	2f 5f       	subi	r18, 0xFF	; 255
    37dc:	3f 4f       	sbci	r19, 0xFF	; 255
    37de:	8e 01       	movw	r16, r28
    37e0:	0c 5f       	subi	r16, 0xFC	; 252
    37e2:	1f 4f       	sbci	r17, 0xFF	; 255
    37e4:	ad b7       	in	r26, 0x3d	; 61
    37e6:	be b7       	in	r27, 0x3e	; 62
    37e8:	12 96       	adiw	r26, 0x02	; 2
    37ea:	1c 93       	st	X, r17
    37ec:	0e 93       	st	-X, r16
    37ee:	11 97       	sbiw	r26, 0x01	; 1
    37f0:	88 ec       	ldi	r24, 0xC8	; 200
    37f2:	99 e1       	ldi	r25, 0x19	; 25
    37f4:	d9 01       	movw	r26, r18
    37f6:	13 96       	adiw	r26, 0x03	; 3
    37f8:	9c 93       	st	X, r25
    37fa:	8e 93       	st	-X, r24
    37fc:	12 97       	sbiw	r26, 0x02	; 2
    37fe:	15 96       	adiw	r26, 0x05	; 5
    3800:	fc 93       	st	X, r31
    3802:	ee 93       	st	-X, r30
    3804:	14 97       	sbiw	r26, 0x04	; 4
    3806:	ce 01       	movw	r24, r28
    3808:	01 96       	adiw	r24, 0x01	; 1
    380a:	17 96       	adiw	r26, 0x07	; 7
    380c:	9c 93       	st	X, r25
    380e:	8e 93       	st	-X, r24
    3810:	16 97       	sbiw	r26, 0x06	; 6
    3812:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
     for(i=0;i<strlen(sGCode);i++){
    3816:	ed b7       	in	r30, 0x3d	; 61
    3818:	fe b7       	in	r31, 0x3e	; 62
    381a:	38 96       	adiw	r30, 0x08	; 8
    381c:	0f b6       	in	r0, 0x3f	; 63
    381e:	f8 94       	cli
    3820:	fe bf       	out	0x3e, r31	; 62
    3822:	0f be       	out	0x3f, r0	; 63
    3824:	ed bf       	out	0x3d, r30	; 61
    3826:	99 24       	eor	r9, r9
	     strKeyStamp[i]='0'+GeniusCalc(G_MULTY,(sSeed[i]-'0'),(sGCode[i]-'0'));		 
    3828:	58 01       	movw	r10, r16
     seedIdx=(sTime[6]-'0')%8;
	 sAdd[1]=sGCode[seedIdx];
	 sAdd[2]=0;

	 sprintf_P(sSeed,PSTR("%s%s"),sTime,sAdd);
     for(i=0;i<strlen(sGCode);i++){
    382a:	13 c0       	rjmp	.+38     	; 0x3852 <GenerateKeyStamp+0xea>
	     strKeyStamp[i]='0'+GeniusCalc(G_MULTY,(sSeed[i]-'0'),(sGCode[i]-'0'));		 
    382c:	f5 01       	movw	r30, r10
    382e:	e0 0f       	add	r30, r16
    3830:	f1 1f       	adc	r31, r17
    3832:	60 81       	ld	r22, Z
    3834:	60 53       	subi	r22, 0x30	; 48
    3836:	f7 01       	movw	r30, r14
    3838:	e0 0f       	add	r30, r16
    383a:	f1 1f       	adc	r31, r17
    383c:	40 81       	ld	r20, Z
    383e:	40 53       	subi	r20, 0x30	; 48
    3840:	81 e0       	ldi	r24, 0x01	; 1
    3842:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <GeniusCalc>
    3846:	f6 01       	movw	r30, r12
    3848:	e0 0f       	add	r30, r16
    384a:	f1 1f       	adc	r31, r17
    384c:	80 5d       	subi	r24, 0xD0	; 208
    384e:	80 83       	st	Z, r24
     seedIdx=(sTime[6]-'0')%8;
	 sAdd[1]=sGCode[seedIdx];
	 sAdd[2]=0;

	 sprintf_P(sSeed,PSTR("%s%s"),sTime,sAdd);
     for(i=0;i<strlen(sGCode);i++){
    3850:	93 94       	inc	r9
    3852:	09 2d       	mov	r16, r9
    3854:	10 e0       	ldi	r17, 0x00	; 0
    3856:	f7 01       	movw	r30, r14
    3858:	01 90       	ld	r0, Z+
    385a:	00 20       	and	r0, r0
    385c:	e9 f7       	brne	.-6      	; 0x3858 <GenerateKeyStamp+0xf0>
    385e:	31 97       	sbiw	r30, 0x01	; 1
    3860:	ee 19       	sub	r30, r14
    3862:	ff 09       	sbc	r31, r15
    3864:	0e 17       	cp	r16, r30
    3866:	1f 07       	cpc	r17, r31
    3868:	08 f3       	brcs	.-62     	; 0x382c <GenerateKeyStamp+0xc4>
	     strKeyStamp[i]='0'+GeniusCalc(G_MULTY,(sSeed[i]-'0'),(sGCode[i]-'0'));		 
	 }strKeyStamp[strlen(sGCode)]=0;
    386a:	ec 0d       	add	r30, r12
    386c:	fd 1d       	adc	r31, r13
    386e:	10 82       	st	Z, r1
     WrapCode(strKeyStamp);
    3870:	c6 01       	movw	r24, r12
    3872:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <WrapCode>
}
    3876:	2d 96       	adiw	r28, 0x0d	; 13
    3878:	0f b6       	in	r0, 0x3f	; 63
    387a:	f8 94       	cli
    387c:	de bf       	out	0x3e, r29	; 62
    387e:	0f be       	out	0x3f, r0	; 63
    3880:	cd bf       	out	0x3d, r28	; 61
    3882:	cf 91       	pop	r28
    3884:	df 91       	pop	r29
    3886:	1f 91       	pop	r17
    3888:	0f 91       	pop	r16
    388a:	ff 90       	pop	r15
    388c:	ef 90       	pop	r14
    388e:	df 90       	pop	r13
    3890:	cf 90       	pop	r12
    3892:	bf 90       	pop	r11
    3894:	af 90       	pop	r10
    3896:	9f 90       	pop	r9
    3898:	08 95       	ret

0000389a <ValidateRestoreCode>:

char ValidateRestoreCode(char *sKeyStamp, char *sRestoreCode){//==RC_VALID
    389a:	cf 92       	push	r12
    389c:	df 92       	push	r13
    389e:	ff 92       	push	r15
    38a0:	0f 93       	push	r16
    38a2:	1f 93       	push	r17
    38a4:	df 93       	push	r29
    38a6:	cf 93       	push	r28
    38a8:	0f 92       	push	r0
    38aa:	cd b7       	in	r28, 0x3d	; 61
    38ac:	de b7       	in	r29, 0x3e	; 62
    38ae:	6c 01       	movw	r12, r24
    38b0:	8b 01       	movw	r16, r22

	 //  KeyStamp: [6]5585577 WrapCode6x
	 //sprintf_P(strSend,PSTR("KeyStamp:%s"),sKeyStamp);
	 //uart_print(1,1,strSend);

	 nSum=sKeyStamp[0]-'0';
    38b2:	fc 01       	movw	r30, r24
    38b4:	20 81       	ld	r18, Z
    38b6:	20 53       	subi	r18, 0x30	; 48
	 for (i=0;i<nSum;i++){
    38b8:	ff 24       	eor	r15, r15
    38ba:	06 c0       	rjmp	.+12     	; 0x38c8 <ValidateRestoreCode+0x2e>
         WrapCode(sKeyStamp);
    38bc:	c6 01       	movw	r24, r12
    38be:	29 83       	std	Y+1, r18	; 0x01
    38c0:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <WrapCode>
	 //  KeyStamp: [6]5585577 WrapCode6x
	 //sprintf_P(strSend,PSTR("KeyStamp:%s"),sKeyStamp);
	 //uart_print(1,1,strSend);

	 nSum=sKeyStamp[0]-'0';
	 for (i=0;i<nSum;i++){
    38c4:	f3 94       	inc	r15
    38c6:	29 81       	ldd	r18, Y+1	; 0x01
    38c8:	f2 16       	cp	r15, r18
    38ca:	c0 f3       	brcs	.-16     	; 0x38bc <ValidateRestoreCode+0x22>
	 //uart_print(1,1,strSend);
     
	 //sprintf_P(strSend,PSTR("WrapStamp:%s"),sRestoreCode);
	 //uart_print(1,1,strSend);

	 if (strcmp(sKeyStamp,sRestoreCode)==0)
    38cc:	c6 01       	movw	r24, r12
    38ce:	b8 01       	movw	r22, r16
    38d0:	0e 94 05 a8 	call	0x1500a	; 0x1500a <strcmp>
    38d4:	00 97       	sbiw	r24, 0x00	; 0
    38d6:	11 f4       	brne	.+4      	; 0x38dc <ValidateRestoreCode+0x42>
	     Result=RC_VALID;	 
    38d8:	81 e0       	ldi	r24, 0x01	; 1
    38da:	01 c0       	rjmp	.+2      	; 0x38de <ValidateRestoreCode+0x44>
     else Result=RC_INVALID;
    38dc:	82 e0       	ldi	r24, 0x02	; 2

   return Result;
}
    38de:	0f 90       	pop	r0
    38e0:	cf 91       	pop	r28
    38e2:	df 91       	pop	r29
    38e4:	1f 91       	pop	r17
    38e6:	0f 91       	pop	r16
    38e8:	ff 90       	pop	r15
    38ea:	df 90       	pop	r13
    38ec:	cf 90       	pop	r12
    38ee:	08 95       	ret

000038f0 <FSubMenuAdmin>:

char FSubMenuAdmin(){
     char Result;
	 Result=MENU_DONE;
   return Result;
}
    38f0:	81 e0       	ldi	r24, 0x01	; 1
    38f2:	08 95       	ret

000038f4 <CountNoPumpSatus>:
}

char CountNoPumpSatus(char *strPumpStatusTotalizer){
char i,Result;
     Result=0;
	 for (i=0;i<PumpCountMax;i++){
    38f4:	60 91 3a 02 	lds	r22, 0x023A
    38f8:	28 2f       	mov	r18, r24
    38fa:	39 2f       	mov	r19, r25
    38fc:	f9 01       	movw	r30, r18
   return Result;
}

char CountNoPumpSatus(char *strPumpStatusTotalizer){
char i,Result;
     Result=0;
    38fe:	80 e0       	ldi	r24, 0x00	; 0
	 for (i=0;i<PumpCountMax;i++){
    3900:	90 e0       	ldi	r25, 0x00	; 0
    3902:	05 c0       	rjmp	.+10     	; 0x390e <CountNoPumpSatus+0x1a>
	      if (strPumpStatusTotalizer[i]==GetPumpStatusLabel(PUMP_NONE)){
    3904:	21 91       	ld	r18, Z+
    3906:	2d 32       	cpi	r18, 0x2D	; 45
    3908:	09 f4       	brne	.+2      	; 0x390c <CountNoPumpSatus+0x18>
		      Result++;		  
    390a:	8f 5f       	subi	r24, 0xFF	; 255
}

char CountNoPumpSatus(char *strPumpStatusTotalizer){
char i,Result;
     Result=0;
	 for (i=0;i<PumpCountMax;i++){
    390c:	9f 5f       	subi	r25, 0xFF	; 255
    390e:	96 17       	cp	r25, r22
    3910:	c8 f3       	brcs	.-14     	; 0x3904 <CountNoPumpSatus+0x10>
	      if (strPumpStatusTotalizer[i]==GetPumpStatusLabel(PUMP_NONE)){
		      Result++;		  
		  }	 
	 }
  return Result;
}
    3912:	08 95       	ret

00003914 <CountTotalizerSatus>:
char CountTotalizerSatus(char *strPumpStatusTotalizer){
    3914:	9c 01       	movw	r18, r24
char i,Result;
     Result=0;
	 for (i=0;i<strlen(strPumpStatusTotalizer);i++){
    3916:	fc 01       	movw	r30, r24
    3918:	01 90       	ld	r0, Z+
    391a:	00 20       	and	r0, r0
    391c:	e9 f7       	brne	.-6      	; 0x3918 <CountTotalizerSatus+0x4>
    391e:	31 97       	sbiw	r30, 0x01	; 1
    3920:	e8 1b       	sub	r30, r24
    3922:	f9 0b       	sbc	r31, r25
	 }
  return Result;
}
char CountTotalizerSatus(char *strPumpStatusTotalizer){
char i,Result;
     Result=0;
    3924:	80 e0       	ldi	r24, 0x00	; 0
	 for (i=0;i<strlen(strPumpStatusTotalizer);i++){
    3926:	90 e0       	ldi	r25, 0x00	; 0
    3928:	08 c0       	rjmp	.+16     	; 0x393a <CountTotalizerSatus+0x26>
	      if (strPumpStatusTotalizer[i]==GetPumpStatusLabel(PS_TOTALIZER)){
    392a:	42 0f       	add	r20, r18
    392c:	53 1f       	adc	r21, r19
    392e:	da 01       	movw	r26, r20
    3930:	4c 91       	ld	r20, X
    3932:	44 35       	cpi	r20, 0x54	; 84
    3934:	09 f4       	brne	.+2      	; 0x3938 <CountTotalizerSatus+0x24>
		      Result++;		  
    3936:	8f 5f       	subi	r24, 0xFF	; 255
  return Result;
}
char CountTotalizerSatus(char *strPumpStatusTotalizer){
char i,Result;
     Result=0;
	 for (i=0;i<strlen(strPumpStatusTotalizer);i++){
    3938:	9f 5f       	subi	r25, 0xFF	; 255
    393a:	49 2f       	mov	r20, r25
    393c:	50 e0       	ldi	r21, 0x00	; 0
    393e:	4e 17       	cp	r20, r30
    3940:	5f 07       	cpc	r21, r31
    3942:	98 f3       	brcs	.-26     	; 0x392a <CountTotalizerSatus+0x16>
	      if (strPumpStatusTotalizer[i]==GetPumpStatusLabel(PS_TOTALIZER)){
		      Result++;		  
		  }	 
	 }
  return Result;
}
    3944:	08 95       	ret

00003946 <FCloseDay>:
   return Result;
}

char FCloseDay(){

}
    3946:	08 95       	ret

00003948 <FLockPump>:
char FLockPump(){

}
    3948:	08 95       	ret

0000394a <FMenuSettingPassword>:
char FMenuSettingPassword(){
     char Result;
   //_menu_password();
   Result=MENU_DONE;
   return Result;
}
    394a:	81 e0       	ldi	r24, 0x01	; 1
    394c:	08 95       	ret

0000394e <FMenuSettingClientIP>:





char FMenuSettingClientIP(){
    394e:	ff 92       	push	r15
    3950:	0f 93       	push	r16
    3952:	1f 93       	push	r17
    3954:	df 93       	push	r29
    3956:	cf 93       	push	r28
    3958:	cd b7       	in	r28, 0x3d	; 61
    395a:	de b7       	in	r29, 0x3e	; 62
    395c:	64 97       	sbiw	r28, 0x14	; 20
    395e:	0f b6       	in	r0, 0x3f	; 63
    3960:	f8 94       	cli
    3962:	de bf       	out	0x3e, r29	; 62
    3964:	0f be       	out	0x3f, r0	; 63
    3966:	cd bf       	out	0x3d, r28	; 61
     //Client IP
     //Old: 192.168.123.000
	 //New:   _.   .   .
	 //--------------------
	 //*)cancel    #)next
     Result=MENU_NONE;
    3968:	10 92 1d 03 	sts	0x031D, r1
	 switch(stClientIP){
    396c:	80 91 59 01 	lds	r24, 0x0159
    3970:	82 30       	cpi	r24, 0x02	; 2
    3972:	09 f4       	brne	.+2      	; 0x3976 <FMenuSettingClientIP+0x28>
    3974:	79 c0       	rjmp	.+242    	; 0x3a68 <FMenuSettingClientIP+0x11a>
    3976:	83 30       	cpi	r24, 0x03	; 3
    3978:	20 f4       	brcc	.+8      	; 0x3982 <FMenuSettingClientIP+0x34>
    397a:	81 30       	cpi	r24, 0x01	; 1
    397c:	09 f0       	breq	.+2      	; 0x3980 <FMenuSettingClientIP+0x32>
    397e:	43 c2       	rjmp	.+1158   	; 0x3e06 <FMenuSettingClientIP+0x4b8>
    3980:	07 c0       	rjmp	.+14     	; 0x3990 <FMenuSettingClientIP+0x42>
    3982:	83 30       	cpi	r24, 0x03	; 3
    3984:	09 f4       	brne	.+2      	; 0x3988 <FMenuSettingClientIP+0x3a>
    3986:	3a c2       	rjmp	.+1140   	; 0x3dfc <FMenuSettingClientIP+0x4ae>
    3988:	84 30       	cpi	r24, 0x04	; 4
    398a:	09 f0       	breq	.+2      	; 0x398e <FMenuSettingClientIP+0x40>
    398c:	3c c2       	rjmp	.+1144   	; 0x3e06 <FMenuSettingClientIP+0x4b8>
    398e:	2a c2       	rjmp	.+1108   	; 0x3de4 <FMenuSettingClientIP+0x496>
		  case cipInit:
			   lcd_clear();
    3990:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
	           lcd_printf(1,1,PSTR("Client IP"));
    3994:	81 e0       	ldi	r24, 0x01	; 1
    3996:	61 e0       	ldi	r22, 0x01	; 1
    3998:	4c eb       	ldi	r20, 0xBC	; 188
    399a:	54 e1       	ldi	r21, 0x14	; 20
    399c:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
			   eeprom_read_block((void*)&IP_blok,(const void*)&DefClientIP,4);
    39a0:	86 e1       	ldi	r24, 0x16	; 22
    39a2:	93 e0       	ldi	r25, 0x03	; 3
    39a4:	68 e2       	ldi	r22, 0x28	; 40
    39a6:	70 e0       	ldi	r23, 0x00	; 0
    39a8:	44 e0       	ldi	r20, 0x04	; 4
    39aa:	50 e0       	ldi	r21, 0x00	; 0
    39ac:	0e 94 56 aa 	call	0x154ac	; 0x154ac <__eerd_block_m128>
	           sprintf_P(lcdteks,PSTR("Old: %d.%d.%d.%d"),IP_blok[0],IP_blok[1],IP_blok[2],IP_blok[3]);
    39b0:	8d b7       	in	r24, 0x3d	; 61
    39b2:	9e b7       	in	r25, 0x3e	; 62
    39b4:	0c 97       	sbiw	r24, 0x0c	; 12
    39b6:	0f b6       	in	r0, 0x3f	; 63
    39b8:	f8 94       	cli
    39ba:	9e bf       	out	0x3e, r25	; 62
    39bc:	0f be       	out	0x3f, r0	; 63
    39be:	8d bf       	out	0x3d, r24	; 61
    39c0:	ed b7       	in	r30, 0x3d	; 61
    39c2:	fe b7       	in	r31, 0x3e	; 62
    39c4:	31 96       	adiw	r30, 0x01	; 1
    39c6:	8e 01       	movw	r16, r28
    39c8:	0f 5f       	subi	r16, 0xFF	; 255
    39ca:	1f 4f       	sbci	r17, 0xFF	; 255
    39cc:	ad b7       	in	r26, 0x3d	; 61
    39ce:	be b7       	in	r27, 0x3e	; 62
    39d0:	12 96       	adiw	r26, 0x02	; 2
    39d2:	1c 93       	st	X, r17
    39d4:	0e 93       	st	-X, r16
    39d6:	11 97       	sbiw	r26, 0x01	; 1
    39d8:	8b ea       	ldi	r24, 0xAB	; 171
    39da:	94 e1       	ldi	r25, 0x14	; 20
    39dc:	93 83       	std	Z+3, r25	; 0x03
    39de:	82 83       	std	Z+2, r24	; 0x02
    39e0:	80 91 16 03 	lds	r24, 0x0316
    39e4:	84 83       	std	Z+4, r24	; 0x04
    39e6:	15 82       	std	Z+5, r1	; 0x05
    39e8:	80 91 17 03 	lds	r24, 0x0317
    39ec:	86 83       	std	Z+6, r24	; 0x06
    39ee:	17 82       	std	Z+7, r1	; 0x07
    39f0:	80 91 18 03 	lds	r24, 0x0318
    39f4:	80 87       	std	Z+8, r24	; 0x08
    39f6:	11 86       	std	Z+9, r1	; 0x09
    39f8:	80 91 19 03 	lds	r24, 0x0319
    39fc:	82 87       	std	Z+10, r24	; 0x0a
    39fe:	13 86       	std	Z+11, r1	; 0x0b
    3a00:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	           lcd_print(2,1,lcdteks);
    3a04:	ed b7       	in	r30, 0x3d	; 61
    3a06:	fe b7       	in	r31, 0x3e	; 62
    3a08:	3c 96       	adiw	r30, 0x0c	; 12
    3a0a:	0f b6       	in	r0, 0x3f	; 63
    3a0c:	f8 94       	cli
    3a0e:	fe bf       	out	0x3e, r31	; 62
    3a10:	0f be       	out	0x3f, r0	; 63
    3a12:	ed bf       	out	0x3d, r30	; 61
    3a14:	82 e0       	ldi	r24, 0x02	; 2
    3a16:	61 e0       	ldi	r22, 0x01	; 1
    3a18:	a8 01       	movw	r20, r16
    3a1a:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
			   lcd_printf(3,1,PSTR("New:   _.   .   .   "));
    3a1e:	83 e0       	ldi	r24, 0x03	; 3
    3a20:	61 e0       	ldi	r22, 0x01	; 1
    3a22:	46 e9       	ldi	r20, 0x96	; 150
    3a24:	54 e1       	ldi	r21, 0x14	; 20
    3a26:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
			   lcd_printf(4,1,PSTR("[*]cancel  [#]next  "));
    3a2a:	84 e0       	ldi	r24, 0x04	; 4
    3a2c:	61 e0       	ldi	r22, 0x01	; 1
    3a2e:	41 e8       	ldi	r20, 0x81	; 129
    3a30:	54 e1       	ldi	r21, 0x14	; 20
    3a32:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
               iLoop=0;
    3a36:	10 92 15 03 	sts	0x0315, r1
    3a3a:	10 92 14 03 	sts	0x0314, r1
			   y=3,x=8;
    3a3e:	83 e0       	ldi	r24, 0x03	; 3
    3a40:	80 93 1b 03 	sts	0x031B, r24
    3a44:	88 e0       	ldi	r24, 0x08	; 8
    3a46:	80 93 1c 03 	sts	0x031C, r24
			   iInput=0; iBlok=0;
    3a4a:	10 92 1a 03 	sts	0x031A, r1
    3a4e:	10 92 13 03 	sts	0x0313, r1
    3a52:	10 92 12 03 	sts	0x0312, r1
			   IPchar[0]='0';IPchar[1]='0';IPchar[2]='0';
    3a56:	80 e3       	ldi	r24, 0x30	; 48
    3a58:	80 93 1f 03 	sts	0x031F, r24
    3a5c:	80 93 20 03 	sts	0x0320, r24
    3a60:	80 93 21 03 	sts	0x0321, r24
			   stClientIP=cipInputIP; 
    3a64:	82 e0       	ldi	r24, 0x02	; 2
    3a66:	c7 c1       	rjmp	.+910    	; 0x3df6 <FMenuSettingClientIP+0x4a8>
		       break;
          case cipInputIP:
			   //Blinking 60% _ 
			   iLoop++;
    3a68:	80 91 14 03 	lds	r24, 0x0314
    3a6c:	90 91 15 03 	lds	r25, 0x0315
    3a70:	01 96       	adiw	r24, 0x01	; 1
    3a72:	90 93 15 03 	sts	0x0315, r25
    3a76:	80 93 14 03 	sts	0x0314, r24
			   if ((iLoop%2000)==0){
    3a7a:	60 ed       	ldi	r22, 0xD0	; 208
    3a7c:	77 e0       	ldi	r23, 0x07	; 7
    3a7e:	0e 94 97 a7 	call	0x14f2e	; 0x14f2e <__udivmodhi4>
    3a82:	00 97       	sbiw	r24, 0x00	; 0
    3a84:	61 f4       	brne	.+24     	; 0x3a9e <FMenuSettingClientIP+0x150>
			      lcd_put(y,(x+(iBlok*4)),'_'); 
    3a86:	60 91 12 03 	lds	r22, 0x0312
    3a8a:	66 0f       	add	r22, r22
    3a8c:	66 0f       	add	r22, r22
    3a8e:	80 91 1c 03 	lds	r24, 0x031C
    3a92:	68 0f       	add	r22, r24
    3a94:	80 91 1b 03 	lds	r24, 0x031B
    3a98:	4f e5       	ldi	r20, 0x5F	; 95
    3a9a:	0e 94 c1 a2 	call	0x14582	; 0x14582 <lcd_put>
			   }
			   if ((iLoop%2000)==1000){
    3a9e:	80 91 14 03 	lds	r24, 0x0314
    3aa2:	90 91 15 03 	lds	r25, 0x0315
    3aa6:	60 ed       	ldi	r22, 0xD0	; 208
    3aa8:	77 e0       	ldi	r23, 0x07	; 7
    3aaa:	0e 94 97 a7 	call	0x14f2e	; 0x14f2e <__udivmodhi4>
    3aae:	f3 e0       	ldi	r31, 0x03	; 3
    3ab0:	88 3e       	cpi	r24, 0xE8	; 232
    3ab2:	9f 07       	cpc	r25, r31
    3ab4:	61 f4       	brne	.+24     	; 0x3ace <FMenuSettingClientIP+0x180>
			      lcd_put(y,(x+(iBlok*4)),' '); 
    3ab6:	60 91 12 03 	lds	r22, 0x0312
    3aba:	66 0f       	add	r22, r22
    3abc:	66 0f       	add	r22, r22
    3abe:	80 91 1c 03 	lds	r24, 0x031C
    3ac2:	68 0f       	add	r22, r24
    3ac4:	80 91 1b 03 	lds	r24, 0x031B
    3ac8:	40 e2       	ldi	r20, 0x20	; 32
    3aca:	0e 94 c1 a2 	call	0x14582	; 0x14582 <lcd_put>
			   }
			   //GetKeyPressed
			   keyPressed=_key_scan(1);
    3ace:	81 e0       	ldi	r24, 0x01	; 1
    3ad0:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <_key_scan>
    3ad4:	f8 2e       	mov	r15, r24
			   keyChar=_key_btn(keyPressed);
    3ad6:	0e 94 49 a3 	call	0x14692	; 0x14692 <_key_btn>
               if ((keyChar>='0')&&(keyChar<='9')){
    3ada:	98 2f       	mov	r25, r24
    3adc:	90 53       	subi	r25, 0x30	; 48
    3ade:	9a 30       	cpi	r25, 0x0A	; 10
    3ae0:	08 f0       	brcs	.+2      	; 0x3ae4 <FMenuSettingClientIP+0x196>
    3ae2:	cc c0       	rjmp	.+408    	; 0x3c7c <FMenuSettingClientIP+0x32e>
    3ae4:	af e4       	ldi	r26, 0x4F	; 79
    3ae6:	b3 ec       	ldi	r27, 0xC3	; 195
    3ae8:	11 97       	sbiw	r26, 0x01	; 1
    3aea:	f1 f7       	brne	.-4      	; 0x3ae8 <FMenuSettingClientIP+0x19a>
    3aec:	00 c0       	rjmp	.+0      	; 0x3aee <FMenuSettingClientIP+0x1a0>
    3aee:	00 00       	nop
			       _delay_ms(200);
			       IPchar[iInput]=keyChar;
    3af0:	90 91 1a 03 	lds	r25, 0x031A
    3af4:	e9 2f       	mov	r30, r25
    3af6:	f0 e0       	ldi	r31, 0x00	; 0
    3af8:	e1 5e       	subi	r30, 0xE1	; 225
    3afa:	fc 4f       	sbci	r31, 0xFC	; 252
    3afc:	80 83       	st	Z, r24
				   iInput++;                    
    3afe:	9f 5f       	subi	r25, 0xFF	; 255
    3b00:	90 93 1a 03 	sts	0x031A, r25
				   for (i=1;i<(iInput+1);i++){
    3b04:	81 e0       	ldi	r24, 0x01	; 1
    3b06:	18 c0       	rjmp	.+48     	; 0x3b38 <FMenuSettingClientIP+0x1ea>
				       lcd_xy(y,((x+(iBlok*4))-(3-i)));_lcd(IPchar[i-1]);
    3b08:	60 91 1c 03 	lds	r22, 0x031C
    3b0c:	65 0f       	add	r22, r21
    3b0e:	63 50       	subi	r22, 0x03	; 3
    3b10:	80 91 12 03 	lds	r24, 0x0312
    3b14:	88 0f       	add	r24, r24
    3b16:	88 0f       	add	r24, r24
    3b18:	68 0f       	add	r22, r24
    3b1a:	80 91 1b 03 	lds	r24, 0x031B
    3b1e:	0e 94 19 a2 	call	0x14432	; 0x14432 <lcd_xy>
    3b22:	e0 91 1e 03 	lds	r30, 0x031E
    3b26:	f0 e0       	ldi	r31, 0x00	; 0
    3b28:	e2 5e       	subi	r30, 0xE2	; 226
    3b2a:	fc 4f       	sbci	r31, 0xFC	; 252
    3b2c:	80 81       	ld	r24, Z
    3b2e:	0e 94 e8 a1 	call	0x143d0	; 0x143d0 <_lcd>
			   keyChar=_key_btn(keyPressed);
               if ((keyChar>='0')&&(keyChar<='9')){
			       _delay_ms(200);
			       IPchar[iInput]=keyChar;
				   iInput++;                    
				   for (i=1;i<(iInput+1);i++){
    3b32:	80 91 1e 03 	lds	r24, 0x031E
    3b36:	8f 5f       	subi	r24, 0xFF	; 255
    3b38:	80 93 1e 03 	sts	0x031E, r24
    3b3c:	40 91 1a 03 	lds	r20, 0x031A
    3b40:	50 91 1e 03 	lds	r21, 0x031E
    3b44:	24 2f       	mov	r18, r20
    3b46:	30 e0       	ldi	r19, 0x00	; 0
    3b48:	85 2f       	mov	r24, r21
    3b4a:	90 e0       	ldi	r25, 0x00	; 0
    3b4c:	28 17       	cp	r18, r24
    3b4e:	39 07       	cpc	r19, r25
    3b50:	dc f6       	brge	.-74     	; 0x3b08 <FMenuSettingClientIP+0x1ba>
				       lcd_xy(y,((x+(iBlok*4))-(3-i)));_lcd(IPchar[i-1]);
				   }
                   //NextInput
				   if (iInput>=3){
    3b52:	43 30       	cpi	r20, 0x03	; 3
    3b54:	08 f4       	brcc	.+2      	; 0x3b58 <FMenuSettingClientIP+0x20a>
    3b56:	88 c0       	rjmp	.+272    	; 0x3c68 <FMenuSettingClientIP+0x31a>
				       IP_blok[iBlok]=((IPchar[0]-'0')*100)+((IPchar[1]-'0')*10)+((IPchar[2]-'0'));
    3b58:	60 91 12 03 	lds	r22, 0x0312
    3b5c:	70 91 13 03 	lds	r23, 0x0313
    3b60:	fb 01       	movw	r30, r22
    3b62:	ea 5e       	subi	r30, 0xEA	; 234
    3b64:	fc 4f       	sbci	r31, 0xFC	; 252
    3b66:	80 91 21 03 	lds	r24, 0x0321
    3b6a:	80 5d       	subi	r24, 0xD0	; 208
    3b6c:	20 91 1f 03 	lds	r18, 0x031F
    3b70:	94 e6       	ldi	r25, 0x64	; 100
    3b72:	29 9f       	mul	r18, r25
    3b74:	90 2d       	mov	r25, r0
    3b76:	11 24       	eor	r1, r1
    3b78:	89 0f       	add	r24, r25
    3b7a:	90 91 20 03 	lds	r25, 0x0320
    3b7e:	99 0f       	add	r25, r25
    3b80:	29 2f       	mov	r18, r25
    3b82:	22 0f       	add	r18, r18
    3b84:	22 0f       	add	r18, r18
    3b86:	29 0f       	add	r18, r25
    3b88:	82 0f       	add	r24, r18
    3b8a:	80 83       	st	Z, r24
					   IPchar[0]='0';IPchar[1]='0';IPchar[2]='0';
    3b8c:	80 e3       	ldi	r24, 0x30	; 48
    3b8e:	80 93 1f 03 	sts	0x031F, r24
    3b92:	80 93 20 03 	sts	0x0320, r24
    3b96:	80 93 21 03 	sts	0x0321, r24
					   //Reposition Value
					   lcd_printf(y,((x+(iBlok*4))-iInput),PSTR("   "));
    3b9a:	66 0f       	add	r22, r22
    3b9c:	66 0f       	add	r22, r22
    3b9e:	80 91 1c 03 	lds	r24, 0x031C
    3ba2:	68 0f       	add	r22, r24
    3ba4:	64 1b       	sub	r22, r20
    3ba6:	80 91 1b 03 	lds	r24, 0x031B
    3baa:	4d e7       	ldi	r20, 0x7D	; 125
    3bac:	54 e1       	ldi	r21, 0x14	; 20
    3bae:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
					   sprintf_P(lcdteks,PSTR("%d"),IP_blok[iBlok]);
    3bb2:	00 d0       	rcall	.+0      	; 0x3bb4 <FMenuSettingClientIP+0x266>
    3bb4:	00 d0       	rcall	.+0      	; 0x3bb6 <FMenuSettingClientIP+0x268>
    3bb6:	00 d0       	rcall	.+0      	; 0x3bb8 <FMenuSettingClientIP+0x26a>
    3bb8:	ed b7       	in	r30, 0x3d	; 61
    3bba:	fe b7       	in	r31, 0x3e	; 62
    3bbc:	31 96       	adiw	r30, 0x01	; 1
    3bbe:	8e 01       	movw	r16, r28
    3bc0:	0f 5f       	subi	r16, 0xFF	; 255
    3bc2:	1f 4f       	sbci	r17, 0xFF	; 255
    3bc4:	ad b7       	in	r26, 0x3d	; 61
    3bc6:	be b7       	in	r27, 0x3e	; 62
    3bc8:	12 96       	adiw	r26, 0x02	; 2
    3bca:	1c 93       	st	X, r17
    3bcc:	0e 93       	st	-X, r16
    3bce:	11 97       	sbiw	r26, 0x01	; 1
    3bd0:	8a e7       	ldi	r24, 0x7A	; 122
    3bd2:	94 e1       	ldi	r25, 0x14	; 20
    3bd4:	93 83       	std	Z+3, r25	; 0x03
    3bd6:	82 83       	std	Z+2, r24	; 0x02
    3bd8:	a0 91 12 03 	lds	r26, 0x0312
    3bdc:	b0 91 13 03 	lds	r27, 0x0313
    3be0:	aa 5e       	subi	r26, 0xEA	; 234
    3be2:	bc 4f       	sbci	r27, 0xFC	; 252
    3be4:	8c 91       	ld	r24, X
    3be6:	84 83       	std	Z+4, r24	; 0x04
    3be8:	15 82       	std	Z+5, r1	; 0x05
    3bea:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
                       lcd_print(y,1+((x+(iBlok*4))-strlen(lcdteks)),lcdteks);
    3bee:	f8 01       	movw	r30, r16
    3bf0:	01 90       	ld	r0, Z+
    3bf2:	00 20       	and	r0, r0
    3bf4:	e9 f7       	brne	.-6      	; 0x3bf0 <FMenuSettingClientIP+0x2a2>
    3bf6:	31 97       	sbiw	r30, 0x01	; 1
    3bf8:	e0 1b       	sub	r30, r16
    3bfa:	f1 0b       	sbc	r31, r17
    3bfc:	8d b7       	in	r24, 0x3d	; 61
    3bfe:	9e b7       	in	r25, 0x3e	; 62
    3c00:	06 96       	adiw	r24, 0x06	; 6
    3c02:	0f b6       	in	r0, 0x3f	; 63
    3c04:	f8 94       	cli
    3c06:	9e bf       	out	0x3e, r25	; 62
    3c08:	0f be       	out	0x3f, r0	; 63
    3c0a:	8d bf       	out	0x3d, r24	; 61
    3c0c:	60 91 1c 03 	lds	r22, 0x031C
    3c10:	6f 5f       	subi	r22, 0xFF	; 255
    3c12:	80 91 12 03 	lds	r24, 0x0312
    3c16:	88 0f       	add	r24, r24
    3c18:	88 0f       	add	r24, r24
    3c1a:	68 0f       	add	r22, r24
    3c1c:	6e 1b       	sub	r22, r30
    3c1e:	80 91 1b 03 	lds	r24, 0x031B
    3c22:	a8 01       	movw	r20, r16
    3c24:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
					   if (iBlok>0)lcd_printf(y,1+((x+((iBlok-1)*4))),PSTR("."));
    3c28:	80 91 12 03 	lds	r24, 0x0312
    3c2c:	90 91 13 03 	lds	r25, 0x0313
    3c30:	00 97       	sbiw	r24, 0x00	; 0
    3c32:	71 f0       	breq	.+28     	; 0x3c50 <FMenuSettingClientIP+0x302>
    3c34:	60 91 1c 03 	lds	r22, 0x031C
    3c38:	6f 5f       	subi	r22, 0xFF	; 255
    3c3a:	81 50       	subi	r24, 0x01	; 1
    3c3c:	90 4c       	sbci	r25, 0xC0	; 192
    3c3e:	88 0f       	add	r24, r24
    3c40:	88 0f       	add	r24, r24
    3c42:	68 0f       	add	r22, r24
    3c44:	80 91 1b 03 	lds	r24, 0x031B
    3c48:	48 e7       	ldi	r20, 0x78	; 120
    3c4a:	54 e1       	ldi	r21, 0x14	; 20
    3c4c:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
					   iInput=0;
    3c50:	10 92 1a 03 	sts	0x031A, r1
					   iBlok++;
    3c54:	20 91 12 03 	lds	r18, 0x0312
    3c58:	30 91 13 03 	lds	r19, 0x0313
    3c5c:	2f 5f       	subi	r18, 0xFF	; 255
    3c5e:	3f 4f       	sbci	r19, 0xFF	; 255
    3c60:	30 93 13 03 	sts	0x0313, r19
    3c64:	20 93 12 03 	sts	0x0312, r18

				   }
				   if (iBlok>=4)stClientIP=cipStoreIPblok;
    3c68:	80 91 12 03 	lds	r24, 0x0312
    3c6c:	90 91 13 03 	lds	r25, 0x0313
    3c70:	84 30       	cpi	r24, 0x04	; 4
    3c72:	91 05       	cpc	r25, r1
    3c74:	18 f0       	brcs	.+6      	; 0x3c7c <FMenuSettingClientIP+0x32e>
    3c76:	84 e0       	ldi	r24, 0x04	; 4
    3c78:	80 93 59 01 	sts	0x0159, r24
			   }

			   if (keyPressed==_KEY_CANCEL){
    3c7c:	9f 2d       	mov	r25, r15
    3c7e:	97 3e       	cpi	r25, 0xE7	; 231
    3c80:	09 f4       	brne	.+2      	; 0x3c84 <FMenuSettingClientIP+0x336>
    3c82:	b8 c0       	rjmp	.+368    	; 0x3df4 <FMenuSettingClientIP+0x4a6>
			       stClientIP=cipExit; 
			   }
			   else
			   if (keyPressed==_KEY_ENTER){
    3c84:	af 2d       	mov	r26, r15
    3c86:	a7 3b       	cpi	r26, 0xB7	; 183
    3c88:	09 f0       	breq	.+2      	; 0x3c8c <FMenuSettingClientIP+0x33e>
    3c8a:	bd c0       	rjmp	.+378    	; 0x3e06 <FMenuSettingClientIP+0x4b8>
			       //NextInput
			       if (iBlok<4){
    3c8c:	80 91 12 03 	lds	r24, 0x0312
    3c90:	90 91 13 03 	lds	r25, 0x0313
    3c94:	84 30       	cpi	r24, 0x04	; 4
    3c96:	91 05       	cpc	r25, r1
    3c98:	08 f0       	brcs	.+2      	; 0x3c9c <FMenuSettingClientIP+0x34e>
    3c9a:	9b c0       	rjmp	.+310    	; 0x3dd2 <FMenuSettingClientIP+0x484>
				       if (iInput==1)IP_blok[iBlok]=((IPchar[0]-'0'));
    3c9c:	20 91 1a 03 	lds	r18, 0x031A
    3ca0:	21 30       	cpi	r18, 0x01	; 1
    3ca2:	39 f4       	brne	.+14     	; 0x3cb2 <FMenuSettingClientIP+0x364>
    3ca4:	fc 01       	movw	r30, r24
    3ca6:	ea 5e       	subi	r30, 0xEA	; 234
    3ca8:	fc 4f       	sbci	r31, 0xFC	; 252
    3caa:	20 91 1f 03 	lds	r18, 0x031F
    3cae:	20 53       	subi	r18, 0x30	; 48
    3cb0:	22 c0       	rjmp	.+68     	; 0x3cf6 <FMenuSettingClientIP+0x3a8>
					   if (iInput==2)IP_blok[iBlok]=((IPchar[0]-'0')*10)+(IPchar[1]-'0');
    3cb2:	22 30       	cpi	r18, 0x02	; 2
    3cb4:	49 f4       	brne	.+18     	; 0x3cc8 <FMenuSettingClientIP+0x37a>
    3cb6:	fc 01       	movw	r30, r24
    3cb8:	ea 5e       	subi	r30, 0xEA	; 234
    3cba:	fc 4f       	sbci	r31, 0xFC	; 252
    3cbc:	20 91 20 03 	lds	r18, 0x0320
    3cc0:	20 51       	subi	r18, 0x10	; 16
    3cc2:	30 91 1f 03 	lds	r19, 0x031F
    3cc6:	11 c0       	rjmp	.+34     	; 0x3cea <FMenuSettingClientIP+0x39c>
					   if (iInput==3)IP_blok[iBlok]=((IPchar[0]-'0')*100)+((IPchar[1]-'0')*10)+((IPchar[2]-'0'));
    3cc8:	23 30       	cpi	r18, 0x03	; 3
    3cca:	b1 f4       	brne	.+44     	; 0x3cf8 <FMenuSettingClientIP+0x3aa>
    3ccc:	fc 01       	movw	r30, r24
    3cce:	ea 5e       	subi	r30, 0xEA	; 234
    3cd0:	fc 4f       	sbci	r31, 0xFC	; 252
    3cd2:	20 91 21 03 	lds	r18, 0x0321
    3cd6:	20 5d       	subi	r18, 0xD0	; 208
    3cd8:	40 91 1f 03 	lds	r20, 0x031F
    3cdc:	34 e6       	ldi	r19, 0x64	; 100
    3cde:	43 9f       	mul	r20, r19
    3ce0:	30 2d       	mov	r19, r0
    3ce2:	11 24       	eor	r1, r1
    3ce4:	23 0f       	add	r18, r19
    3ce6:	30 91 20 03 	lds	r19, 0x0320
    3cea:	33 0f       	add	r19, r19
    3cec:	43 2f       	mov	r20, r19
    3cee:	44 0f       	add	r20, r20
    3cf0:	44 0f       	add	r20, r20
    3cf2:	43 0f       	add	r20, r19
    3cf4:	24 0f       	add	r18, r20
    3cf6:	20 83       	st	Z, r18
				       
					   IPchar[0]='0';IPchar[1]='0';IPchar[2]='0';
    3cf8:	20 e3       	ldi	r18, 0x30	; 48
    3cfa:	20 93 1f 03 	sts	0x031F, r18
    3cfe:	20 93 20 03 	sts	0x0320, r18
    3d02:	20 93 21 03 	sts	0x0321, r18
					   //Reposition Value
					   lcd_printf(y,((x+(iBlok*4))-3),PSTR("   "));
    3d06:	60 91 1c 03 	lds	r22, 0x031C
    3d0a:	63 50       	subi	r22, 0x03	; 3
    3d0c:	88 0f       	add	r24, r24
    3d0e:	88 0f       	add	r24, r24
    3d10:	68 0f       	add	r22, r24
    3d12:	80 91 1b 03 	lds	r24, 0x031B
    3d16:	44 e7       	ldi	r20, 0x74	; 116
    3d18:	54 e1       	ldi	r21, 0x14	; 20
    3d1a:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
					   sprintf_P(lcdteks,PSTR("%d"),IP_blok[iBlok]);
    3d1e:	00 d0       	rcall	.+0      	; 0x3d20 <FMenuSettingClientIP+0x3d2>
    3d20:	00 d0       	rcall	.+0      	; 0x3d22 <FMenuSettingClientIP+0x3d4>
    3d22:	00 d0       	rcall	.+0      	; 0x3d24 <FMenuSettingClientIP+0x3d6>
    3d24:	ed b7       	in	r30, 0x3d	; 61
    3d26:	fe b7       	in	r31, 0x3e	; 62
    3d28:	31 96       	adiw	r30, 0x01	; 1
    3d2a:	8e 01       	movw	r16, r28
    3d2c:	0f 5f       	subi	r16, 0xFF	; 255
    3d2e:	1f 4f       	sbci	r17, 0xFF	; 255
    3d30:	ad b7       	in	r26, 0x3d	; 61
    3d32:	be b7       	in	r27, 0x3e	; 62
    3d34:	12 96       	adiw	r26, 0x02	; 2
    3d36:	1c 93       	st	X, r17
    3d38:	0e 93       	st	-X, r16
    3d3a:	11 97       	sbiw	r26, 0x01	; 1
    3d3c:	81 e7       	ldi	r24, 0x71	; 113
    3d3e:	94 e1       	ldi	r25, 0x14	; 20
    3d40:	93 83       	std	Z+3, r25	; 0x03
    3d42:	82 83       	std	Z+2, r24	; 0x02
    3d44:	a0 91 12 03 	lds	r26, 0x0312
    3d48:	b0 91 13 03 	lds	r27, 0x0313
    3d4c:	aa 5e       	subi	r26, 0xEA	; 234
    3d4e:	bc 4f       	sbci	r27, 0xFC	; 252
    3d50:	8c 91       	ld	r24, X
    3d52:	84 83       	std	Z+4, r24	; 0x04
    3d54:	15 82       	std	Z+5, r1	; 0x05
    3d56:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
                       lcd_print(y,1+((x+(iBlok*4))-strlen(lcdteks)),lcdteks);
    3d5a:	f8 01       	movw	r30, r16
    3d5c:	01 90       	ld	r0, Z+
    3d5e:	00 20       	and	r0, r0
    3d60:	e9 f7       	brne	.-6      	; 0x3d5c <FMenuSettingClientIP+0x40e>
    3d62:	31 97       	sbiw	r30, 0x01	; 1
    3d64:	e0 1b       	sub	r30, r16
    3d66:	f1 0b       	sbc	r31, r17
    3d68:	8d b7       	in	r24, 0x3d	; 61
    3d6a:	9e b7       	in	r25, 0x3e	; 62
    3d6c:	06 96       	adiw	r24, 0x06	; 6
    3d6e:	0f b6       	in	r0, 0x3f	; 63
    3d70:	f8 94       	cli
    3d72:	9e bf       	out	0x3e, r25	; 62
    3d74:	0f be       	out	0x3f, r0	; 63
    3d76:	8d bf       	out	0x3d, r24	; 61
    3d78:	60 91 1c 03 	lds	r22, 0x031C
    3d7c:	6f 5f       	subi	r22, 0xFF	; 255
    3d7e:	80 91 12 03 	lds	r24, 0x0312
    3d82:	88 0f       	add	r24, r24
    3d84:	88 0f       	add	r24, r24
    3d86:	68 0f       	add	r22, r24
    3d88:	6e 1b       	sub	r22, r30
    3d8a:	80 91 1b 03 	lds	r24, 0x031B
    3d8e:	a8 01       	movw	r20, r16
    3d90:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>

					   if (iBlok>0)lcd_printf(y,1+((x+((iBlok-1)*4))),PSTR("."));
    3d94:	80 91 12 03 	lds	r24, 0x0312
    3d98:	90 91 13 03 	lds	r25, 0x0313
    3d9c:	00 97       	sbiw	r24, 0x00	; 0
    3d9e:	71 f0       	breq	.+28     	; 0x3dbc <FMenuSettingClientIP+0x46e>
    3da0:	60 91 1c 03 	lds	r22, 0x031C
    3da4:	6f 5f       	subi	r22, 0xFF	; 255
    3da6:	81 50       	subi	r24, 0x01	; 1
    3da8:	90 4c       	sbci	r25, 0xC0	; 192
    3daa:	88 0f       	add	r24, r24
    3dac:	88 0f       	add	r24, r24
    3dae:	68 0f       	add	r22, r24
    3db0:	80 91 1b 03 	lds	r24, 0x031B
    3db4:	4f e6       	ldi	r20, 0x6F	; 111
    3db6:	54 e1       	ldi	r21, 0x14	; 20
    3db8:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
				       iInput=0;
    3dbc:	10 92 1a 03 	sts	0x031A, r1
					   iBlok++;	   
    3dc0:	80 91 12 03 	lds	r24, 0x0312
    3dc4:	90 91 13 03 	lds	r25, 0x0313
    3dc8:	01 96       	adiw	r24, 0x01	; 1
    3dca:	90 93 13 03 	sts	0x0313, r25
    3dce:	80 93 12 03 	sts	0x0312, r24
				   }
				   if (iBlok>=4)stClientIP=cipStoreIPblok;
    3dd2:	80 91 12 03 	lds	r24, 0x0312
    3dd6:	90 91 13 03 	lds	r25, 0x0313
    3dda:	84 30       	cpi	r24, 0x04	; 4
    3ddc:	91 05       	cpc	r25, r1
    3dde:	98 f0       	brcs	.+38     	; 0x3e06 <FMenuSettingClientIP+0x4b8>
    3de0:	84 e0       	ldi	r24, 0x04	; 4
    3de2:	09 c0       	rjmp	.+18     	; 0x3df6 <FMenuSettingClientIP+0x4a8>
			   }
		       break;
          case cipStoreIPblok://UpdateIPblok
			   eeprom_write_block((const void*) &IP_blok,(const void*) &DefClientIP,4);
    3de4:	86 e1       	ldi	r24, 0x16	; 22
    3de6:	93 e0       	ldi	r25, 0x03	; 3
    3de8:	68 e2       	ldi	r22, 0x28	; 40
    3dea:	70 e0       	ldi	r23, 0x00	; 0
    3dec:	44 e0       	ldi	r20, 0x04	; 4
    3dee:	50 e0       	ldi	r21, 0x00	; 0
    3df0:	0e 94 6e aa 	call	0x154dc	; 0x154dc <__eewr_block_m128>
			   stClientIP=cipExit;
    3df4:	83 e0       	ldi	r24, 0x03	; 3
    3df6:	80 93 59 01 	sts	0x0159, r24
		       break; 
    3dfa:	05 c0       	rjmp	.+10     	; 0x3e06 <FMenuSettingClientIP+0x4b8>
          case cipExit://Cancel IPConfig
		       stClientIP=cipInit;
    3dfc:	81 e0       	ldi	r24, 0x01	; 1
    3dfe:	80 93 59 01 	sts	0x0159, r24
		       Result=MENU_DONE;
    3e02:	80 93 1d 03 	sts	0x031D, r24
		       break;     
		  }//EndSwitch	 
    return Result;
}
    3e06:	80 91 1d 03 	lds	r24, 0x031D
    3e0a:	64 96       	adiw	r28, 0x14	; 20
    3e0c:	0f b6       	in	r0, 0x3f	; 63
    3e0e:	f8 94       	cli
    3e10:	de bf       	out	0x3e, r29	; 62
    3e12:	0f be       	out	0x3f, r0	; 63
    3e14:	cd bf       	out	0x3d, r28	; 61
    3e16:	cf 91       	pop	r28
    3e18:	df 91       	pop	r29
    3e1a:	1f 91       	pop	r17
    3e1c:	0f 91       	pop	r16
    3e1e:	ff 90       	pop	r15
    3e20:	08 95       	ret

00003e22 <FMenuSettingServerIP>:

char FMenuSettingServerIP(){
    3e22:	ff 92       	push	r15
    3e24:	0f 93       	push	r16
    3e26:	1f 93       	push	r17
    3e28:	df 93       	push	r29
    3e2a:	cf 93       	push	r28
    3e2c:	cd b7       	in	r28, 0x3d	; 61
    3e2e:	de b7       	in	r29, 0x3e	; 62
    3e30:	64 97       	sbiw	r28, 0x14	; 20
    3e32:	0f b6       	in	r0, 0x3f	; 63
    3e34:	f8 94       	cli
    3e36:	de bf       	out	0x3e, r29	; 62
    3e38:	0f be       	out	0x3f, r0	; 63
    3e3a:	cd bf       	out	0x3d, r28	; 61
     //Server IP
     //Old: 192.168.123.000
	 //New:   _.   .   .
	 //--------------------
	 //*)cancel    #)next
	 Result=MENU_NONE;
    3e3c:	10 92 0d 03 	sts	0x030D, r1
     switch(stClientIP){
    3e40:	80 91 58 01 	lds	r24, 0x0158
    3e44:	82 30       	cpi	r24, 0x02	; 2
    3e46:	09 f4       	brne	.+2      	; 0x3e4a <FMenuSettingServerIP+0x28>
    3e48:	79 c0       	rjmp	.+242    	; 0x3f3c <FMenuSettingServerIP+0x11a>
    3e4a:	83 30       	cpi	r24, 0x03	; 3
    3e4c:	20 f4       	brcc	.+8      	; 0x3e56 <FMenuSettingServerIP+0x34>
    3e4e:	81 30       	cpi	r24, 0x01	; 1
    3e50:	09 f0       	breq	.+2      	; 0x3e54 <FMenuSettingServerIP+0x32>
    3e52:	43 c2       	rjmp	.+1158   	; 0x42da <FMenuSettingServerIP+0x4b8>
    3e54:	07 c0       	rjmp	.+14     	; 0x3e64 <FMenuSettingServerIP+0x42>
    3e56:	83 30       	cpi	r24, 0x03	; 3
    3e58:	09 f4       	brne	.+2      	; 0x3e5c <FMenuSettingServerIP+0x3a>
    3e5a:	3a c2       	rjmp	.+1140   	; 0x42d0 <FMenuSettingServerIP+0x4ae>
    3e5c:	84 30       	cpi	r24, 0x04	; 4
    3e5e:	09 f0       	breq	.+2      	; 0x3e62 <FMenuSettingServerIP+0x40>
    3e60:	3c c2       	rjmp	.+1144   	; 0x42da <FMenuSettingServerIP+0x4b8>
    3e62:	2a c2       	rjmp	.+1108   	; 0x42b8 <FMenuSettingServerIP+0x496>
		  case cipInit:
			   lcd_clear();
    3e64:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
	           lcd_printf(1,1,PSTR("Server IP"));
    3e68:	81 e0       	ldi	r24, 0x01	; 1
    3e6a:	61 e0       	ldi	r22, 0x01	; 1
    3e6c:	45 e6       	ldi	r20, 0x65	; 101
    3e6e:	54 e1       	ldi	r21, 0x14	; 20
    3e70:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
			   eeprom_read_block((void*)&IP_blok,(const void*)&DefServerIP,4);
    3e74:	86 e0       	ldi	r24, 0x06	; 6
    3e76:	93 e0       	ldi	r25, 0x03	; 3
    3e78:	6c e2       	ldi	r22, 0x2C	; 44
    3e7a:	70 e0       	ldi	r23, 0x00	; 0
    3e7c:	44 e0       	ldi	r20, 0x04	; 4
    3e7e:	50 e0       	ldi	r21, 0x00	; 0
    3e80:	0e 94 56 aa 	call	0x154ac	; 0x154ac <__eerd_block_m128>
	           sprintf_P(lcdteks,PSTR("Old: %d.%d.%d.%d"),IP_blok[0],IP_blok[1],IP_blok[2],IP_blok[3]);
    3e84:	8d b7       	in	r24, 0x3d	; 61
    3e86:	9e b7       	in	r25, 0x3e	; 62
    3e88:	0c 97       	sbiw	r24, 0x0c	; 12
    3e8a:	0f b6       	in	r0, 0x3f	; 63
    3e8c:	f8 94       	cli
    3e8e:	9e bf       	out	0x3e, r25	; 62
    3e90:	0f be       	out	0x3f, r0	; 63
    3e92:	8d bf       	out	0x3d, r24	; 61
    3e94:	ed b7       	in	r30, 0x3d	; 61
    3e96:	fe b7       	in	r31, 0x3e	; 62
    3e98:	31 96       	adiw	r30, 0x01	; 1
    3e9a:	8e 01       	movw	r16, r28
    3e9c:	0f 5f       	subi	r16, 0xFF	; 255
    3e9e:	1f 4f       	sbci	r17, 0xFF	; 255
    3ea0:	ad b7       	in	r26, 0x3d	; 61
    3ea2:	be b7       	in	r27, 0x3e	; 62
    3ea4:	12 96       	adiw	r26, 0x02	; 2
    3ea6:	1c 93       	st	X, r17
    3ea8:	0e 93       	st	-X, r16
    3eaa:	11 97       	sbiw	r26, 0x01	; 1
    3eac:	84 e5       	ldi	r24, 0x54	; 84
    3eae:	94 e1       	ldi	r25, 0x14	; 20
    3eb0:	93 83       	std	Z+3, r25	; 0x03
    3eb2:	82 83       	std	Z+2, r24	; 0x02
    3eb4:	80 91 06 03 	lds	r24, 0x0306
    3eb8:	84 83       	std	Z+4, r24	; 0x04
    3eba:	15 82       	std	Z+5, r1	; 0x05
    3ebc:	80 91 07 03 	lds	r24, 0x0307
    3ec0:	86 83       	std	Z+6, r24	; 0x06
    3ec2:	17 82       	std	Z+7, r1	; 0x07
    3ec4:	80 91 08 03 	lds	r24, 0x0308
    3ec8:	80 87       	std	Z+8, r24	; 0x08
    3eca:	11 86       	std	Z+9, r1	; 0x09
    3ecc:	80 91 09 03 	lds	r24, 0x0309
    3ed0:	82 87       	std	Z+10, r24	; 0x0a
    3ed2:	13 86       	std	Z+11, r1	; 0x0b
    3ed4:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	           lcd_print(2,1,lcdteks);
    3ed8:	ed b7       	in	r30, 0x3d	; 61
    3eda:	fe b7       	in	r31, 0x3e	; 62
    3edc:	3c 96       	adiw	r30, 0x0c	; 12
    3ede:	0f b6       	in	r0, 0x3f	; 63
    3ee0:	f8 94       	cli
    3ee2:	fe bf       	out	0x3e, r31	; 62
    3ee4:	0f be       	out	0x3f, r0	; 63
    3ee6:	ed bf       	out	0x3d, r30	; 61
    3ee8:	82 e0       	ldi	r24, 0x02	; 2
    3eea:	61 e0       	ldi	r22, 0x01	; 1
    3eec:	a8 01       	movw	r20, r16
    3eee:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
			   lcd_printf(3,1,PSTR("New:   _.   .   .   "));
    3ef2:	83 e0       	ldi	r24, 0x03	; 3
    3ef4:	61 e0       	ldi	r22, 0x01	; 1
    3ef6:	4f e3       	ldi	r20, 0x3F	; 63
    3ef8:	54 e1       	ldi	r21, 0x14	; 20
    3efa:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
			   lcd_printf(4,1,PSTR("[*]cancel  [#]next  "));
    3efe:	84 e0       	ldi	r24, 0x04	; 4
    3f00:	61 e0       	ldi	r22, 0x01	; 1
    3f02:	4a e2       	ldi	r20, 0x2A	; 42
    3f04:	54 e1       	ldi	r21, 0x14	; 20
    3f06:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
               iLoop=0;
    3f0a:	10 92 05 03 	sts	0x0305, r1
    3f0e:	10 92 04 03 	sts	0x0304, r1
			   y=3,x=8;
    3f12:	83 e0       	ldi	r24, 0x03	; 3
    3f14:	80 93 0b 03 	sts	0x030B, r24
    3f18:	88 e0       	ldi	r24, 0x08	; 8
    3f1a:	80 93 0c 03 	sts	0x030C, r24
			   iInput=0; iBlok=0;
    3f1e:	10 92 0a 03 	sts	0x030A, r1
    3f22:	10 92 03 03 	sts	0x0303, r1
    3f26:	10 92 02 03 	sts	0x0302, r1
			   IPchar[0]='0';IPchar[1]='0';IPchar[2]='0';
    3f2a:	80 e3       	ldi	r24, 0x30	; 48
    3f2c:	80 93 0f 03 	sts	0x030F, r24
    3f30:	80 93 10 03 	sts	0x0310, r24
    3f34:	80 93 11 03 	sts	0x0311, r24
			   stClientIP=cipInputIP; 
    3f38:	82 e0       	ldi	r24, 0x02	; 2
    3f3a:	c7 c1       	rjmp	.+910    	; 0x42ca <FMenuSettingServerIP+0x4a8>
		       break;
          case cipInputIP:
			   //Blinking 60% _ 
			   iLoop++;
    3f3c:	80 91 04 03 	lds	r24, 0x0304
    3f40:	90 91 05 03 	lds	r25, 0x0305
    3f44:	01 96       	adiw	r24, 0x01	; 1
    3f46:	90 93 05 03 	sts	0x0305, r25
    3f4a:	80 93 04 03 	sts	0x0304, r24
			   if ((iLoop%2000)==0){
    3f4e:	60 ed       	ldi	r22, 0xD0	; 208
    3f50:	77 e0       	ldi	r23, 0x07	; 7
    3f52:	0e 94 97 a7 	call	0x14f2e	; 0x14f2e <__udivmodhi4>
    3f56:	00 97       	sbiw	r24, 0x00	; 0
    3f58:	61 f4       	brne	.+24     	; 0x3f72 <FMenuSettingServerIP+0x150>
			      lcd_put(y,(x+(iBlok*4)),'_'); 
    3f5a:	60 91 02 03 	lds	r22, 0x0302
    3f5e:	66 0f       	add	r22, r22
    3f60:	66 0f       	add	r22, r22
    3f62:	80 91 0c 03 	lds	r24, 0x030C
    3f66:	68 0f       	add	r22, r24
    3f68:	80 91 0b 03 	lds	r24, 0x030B
    3f6c:	4f e5       	ldi	r20, 0x5F	; 95
    3f6e:	0e 94 c1 a2 	call	0x14582	; 0x14582 <lcd_put>
			   }
			   if ((iLoop%2000)==1000){
    3f72:	80 91 04 03 	lds	r24, 0x0304
    3f76:	90 91 05 03 	lds	r25, 0x0305
    3f7a:	60 ed       	ldi	r22, 0xD0	; 208
    3f7c:	77 e0       	ldi	r23, 0x07	; 7
    3f7e:	0e 94 97 a7 	call	0x14f2e	; 0x14f2e <__udivmodhi4>
    3f82:	f3 e0       	ldi	r31, 0x03	; 3
    3f84:	88 3e       	cpi	r24, 0xE8	; 232
    3f86:	9f 07       	cpc	r25, r31
    3f88:	61 f4       	brne	.+24     	; 0x3fa2 <FMenuSettingServerIP+0x180>
			      lcd_put(y,(x+(iBlok*4)),' '); 
    3f8a:	60 91 02 03 	lds	r22, 0x0302
    3f8e:	66 0f       	add	r22, r22
    3f90:	66 0f       	add	r22, r22
    3f92:	80 91 0c 03 	lds	r24, 0x030C
    3f96:	68 0f       	add	r22, r24
    3f98:	80 91 0b 03 	lds	r24, 0x030B
    3f9c:	40 e2       	ldi	r20, 0x20	; 32
    3f9e:	0e 94 c1 a2 	call	0x14582	; 0x14582 <lcd_put>
			   }
			   //GetKeyPressed
			   keyPressed=_key_scan(1);
    3fa2:	81 e0       	ldi	r24, 0x01	; 1
    3fa4:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <_key_scan>
    3fa8:	f8 2e       	mov	r15, r24
			   keyChar=_key_btn(keyPressed);
    3faa:	0e 94 49 a3 	call	0x14692	; 0x14692 <_key_btn>
               if ((keyChar>='0')&&(keyChar<='9')){
    3fae:	98 2f       	mov	r25, r24
    3fb0:	90 53       	subi	r25, 0x30	; 48
    3fb2:	9a 30       	cpi	r25, 0x0A	; 10
    3fb4:	08 f0       	brcs	.+2      	; 0x3fb8 <FMenuSettingServerIP+0x196>
    3fb6:	cc c0       	rjmp	.+408    	; 0x4150 <FMenuSettingServerIP+0x32e>
    3fb8:	af e4       	ldi	r26, 0x4F	; 79
    3fba:	b3 ec       	ldi	r27, 0xC3	; 195
    3fbc:	11 97       	sbiw	r26, 0x01	; 1
    3fbe:	f1 f7       	brne	.-4      	; 0x3fbc <FMenuSettingServerIP+0x19a>
    3fc0:	00 c0       	rjmp	.+0      	; 0x3fc2 <FMenuSettingServerIP+0x1a0>
    3fc2:	00 00       	nop
			       _delay_ms(200);
			       IPchar[iInput]=keyChar;
    3fc4:	90 91 0a 03 	lds	r25, 0x030A
    3fc8:	e9 2f       	mov	r30, r25
    3fca:	f0 e0       	ldi	r31, 0x00	; 0
    3fcc:	e1 5f       	subi	r30, 0xF1	; 241
    3fce:	fc 4f       	sbci	r31, 0xFC	; 252
    3fd0:	80 83       	st	Z, r24
				   iInput++;                    
    3fd2:	9f 5f       	subi	r25, 0xFF	; 255
    3fd4:	90 93 0a 03 	sts	0x030A, r25
				   for (i=1;i<(iInput+1);i++){
    3fd8:	81 e0       	ldi	r24, 0x01	; 1
    3fda:	18 c0       	rjmp	.+48     	; 0x400c <FMenuSettingServerIP+0x1ea>
				       lcd_xy(y,((x+(iBlok*4))-(3-i)));_lcd(IPchar[i-1]);
    3fdc:	60 91 0c 03 	lds	r22, 0x030C
    3fe0:	65 0f       	add	r22, r21
    3fe2:	63 50       	subi	r22, 0x03	; 3
    3fe4:	80 91 02 03 	lds	r24, 0x0302
    3fe8:	88 0f       	add	r24, r24
    3fea:	88 0f       	add	r24, r24
    3fec:	68 0f       	add	r22, r24
    3fee:	80 91 0b 03 	lds	r24, 0x030B
    3ff2:	0e 94 19 a2 	call	0x14432	; 0x14432 <lcd_xy>
    3ff6:	e0 91 0e 03 	lds	r30, 0x030E
    3ffa:	f0 e0       	ldi	r31, 0x00	; 0
    3ffc:	e2 5f       	subi	r30, 0xF2	; 242
    3ffe:	fc 4f       	sbci	r31, 0xFC	; 252
    4000:	80 81       	ld	r24, Z
    4002:	0e 94 e8 a1 	call	0x143d0	; 0x143d0 <_lcd>
			   keyChar=_key_btn(keyPressed);
               if ((keyChar>='0')&&(keyChar<='9')){
			       _delay_ms(200);
			       IPchar[iInput]=keyChar;
				   iInput++;                    
				   for (i=1;i<(iInput+1);i++){
    4006:	80 91 0e 03 	lds	r24, 0x030E
    400a:	8f 5f       	subi	r24, 0xFF	; 255
    400c:	80 93 0e 03 	sts	0x030E, r24
    4010:	40 91 0a 03 	lds	r20, 0x030A
    4014:	50 91 0e 03 	lds	r21, 0x030E
    4018:	24 2f       	mov	r18, r20
    401a:	30 e0       	ldi	r19, 0x00	; 0
    401c:	85 2f       	mov	r24, r21
    401e:	90 e0       	ldi	r25, 0x00	; 0
    4020:	28 17       	cp	r18, r24
    4022:	39 07       	cpc	r19, r25
    4024:	dc f6       	brge	.-74     	; 0x3fdc <FMenuSettingServerIP+0x1ba>
				       lcd_xy(y,((x+(iBlok*4))-(3-i)));_lcd(IPchar[i-1]);
				   }
                   //NextInput
				   if (iInput>=3){
    4026:	43 30       	cpi	r20, 0x03	; 3
    4028:	08 f4       	brcc	.+2      	; 0x402c <FMenuSettingServerIP+0x20a>
    402a:	88 c0       	rjmp	.+272    	; 0x413c <FMenuSettingServerIP+0x31a>
				       IP_blok[iBlok]=((IPchar[0]-'0')*100)+((IPchar[1]-'0')*10)+((IPchar[2]-'0'));
    402c:	60 91 02 03 	lds	r22, 0x0302
    4030:	70 91 03 03 	lds	r23, 0x0303
    4034:	fb 01       	movw	r30, r22
    4036:	ea 5f       	subi	r30, 0xFA	; 250
    4038:	fc 4f       	sbci	r31, 0xFC	; 252
    403a:	80 91 11 03 	lds	r24, 0x0311
    403e:	80 5d       	subi	r24, 0xD0	; 208
    4040:	20 91 0f 03 	lds	r18, 0x030F
    4044:	94 e6       	ldi	r25, 0x64	; 100
    4046:	29 9f       	mul	r18, r25
    4048:	90 2d       	mov	r25, r0
    404a:	11 24       	eor	r1, r1
    404c:	89 0f       	add	r24, r25
    404e:	90 91 10 03 	lds	r25, 0x0310
    4052:	99 0f       	add	r25, r25
    4054:	29 2f       	mov	r18, r25
    4056:	22 0f       	add	r18, r18
    4058:	22 0f       	add	r18, r18
    405a:	29 0f       	add	r18, r25
    405c:	82 0f       	add	r24, r18
    405e:	80 83       	st	Z, r24
					   IPchar[0]='0';IPchar[1]='0';IPchar[2]='0';
    4060:	80 e3       	ldi	r24, 0x30	; 48
    4062:	80 93 0f 03 	sts	0x030F, r24
    4066:	80 93 10 03 	sts	0x0310, r24
    406a:	80 93 11 03 	sts	0x0311, r24
					   //Reposition Value
					   lcd_printf(y,((x+(iBlok*4))-iInput),PSTR("   "));
    406e:	66 0f       	add	r22, r22
    4070:	66 0f       	add	r22, r22
    4072:	80 91 0c 03 	lds	r24, 0x030C
    4076:	68 0f       	add	r22, r24
    4078:	64 1b       	sub	r22, r20
    407a:	80 91 0b 03 	lds	r24, 0x030B
    407e:	46 e2       	ldi	r20, 0x26	; 38
    4080:	54 e1       	ldi	r21, 0x14	; 20
    4082:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
					   sprintf_P(lcdteks,PSTR("%d"),IP_blok[iBlok]);
    4086:	00 d0       	rcall	.+0      	; 0x4088 <FMenuSettingServerIP+0x266>
    4088:	00 d0       	rcall	.+0      	; 0x408a <FMenuSettingServerIP+0x268>
    408a:	00 d0       	rcall	.+0      	; 0x408c <FMenuSettingServerIP+0x26a>
    408c:	ed b7       	in	r30, 0x3d	; 61
    408e:	fe b7       	in	r31, 0x3e	; 62
    4090:	31 96       	adiw	r30, 0x01	; 1
    4092:	8e 01       	movw	r16, r28
    4094:	0f 5f       	subi	r16, 0xFF	; 255
    4096:	1f 4f       	sbci	r17, 0xFF	; 255
    4098:	ad b7       	in	r26, 0x3d	; 61
    409a:	be b7       	in	r27, 0x3e	; 62
    409c:	12 96       	adiw	r26, 0x02	; 2
    409e:	1c 93       	st	X, r17
    40a0:	0e 93       	st	-X, r16
    40a2:	11 97       	sbiw	r26, 0x01	; 1
    40a4:	83 e2       	ldi	r24, 0x23	; 35
    40a6:	94 e1       	ldi	r25, 0x14	; 20
    40a8:	93 83       	std	Z+3, r25	; 0x03
    40aa:	82 83       	std	Z+2, r24	; 0x02
    40ac:	a0 91 02 03 	lds	r26, 0x0302
    40b0:	b0 91 03 03 	lds	r27, 0x0303
    40b4:	aa 5f       	subi	r26, 0xFA	; 250
    40b6:	bc 4f       	sbci	r27, 0xFC	; 252
    40b8:	8c 91       	ld	r24, X
    40ba:	84 83       	std	Z+4, r24	; 0x04
    40bc:	15 82       	std	Z+5, r1	; 0x05
    40be:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
                       lcd_print(y,1+((x+(iBlok*4))-strlen(lcdteks)),lcdteks);
    40c2:	f8 01       	movw	r30, r16
    40c4:	01 90       	ld	r0, Z+
    40c6:	00 20       	and	r0, r0
    40c8:	e9 f7       	brne	.-6      	; 0x40c4 <FMenuSettingServerIP+0x2a2>
    40ca:	31 97       	sbiw	r30, 0x01	; 1
    40cc:	e0 1b       	sub	r30, r16
    40ce:	f1 0b       	sbc	r31, r17
    40d0:	8d b7       	in	r24, 0x3d	; 61
    40d2:	9e b7       	in	r25, 0x3e	; 62
    40d4:	06 96       	adiw	r24, 0x06	; 6
    40d6:	0f b6       	in	r0, 0x3f	; 63
    40d8:	f8 94       	cli
    40da:	9e bf       	out	0x3e, r25	; 62
    40dc:	0f be       	out	0x3f, r0	; 63
    40de:	8d bf       	out	0x3d, r24	; 61
    40e0:	60 91 0c 03 	lds	r22, 0x030C
    40e4:	6f 5f       	subi	r22, 0xFF	; 255
    40e6:	80 91 02 03 	lds	r24, 0x0302
    40ea:	88 0f       	add	r24, r24
    40ec:	88 0f       	add	r24, r24
    40ee:	68 0f       	add	r22, r24
    40f0:	6e 1b       	sub	r22, r30
    40f2:	80 91 0b 03 	lds	r24, 0x030B
    40f6:	a8 01       	movw	r20, r16
    40f8:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
					   if (iBlok>0)lcd_printf(y,1+((x+((iBlok-1)*4))),PSTR("."));
    40fc:	80 91 02 03 	lds	r24, 0x0302
    4100:	90 91 03 03 	lds	r25, 0x0303
    4104:	00 97       	sbiw	r24, 0x00	; 0
    4106:	71 f0       	breq	.+28     	; 0x4124 <FMenuSettingServerIP+0x302>
    4108:	60 91 0c 03 	lds	r22, 0x030C
    410c:	6f 5f       	subi	r22, 0xFF	; 255
    410e:	81 50       	subi	r24, 0x01	; 1
    4110:	90 4c       	sbci	r25, 0xC0	; 192
    4112:	88 0f       	add	r24, r24
    4114:	88 0f       	add	r24, r24
    4116:	68 0f       	add	r22, r24
    4118:	80 91 0b 03 	lds	r24, 0x030B
    411c:	41 e2       	ldi	r20, 0x21	; 33
    411e:	54 e1       	ldi	r21, 0x14	; 20
    4120:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
					   iInput=0;
    4124:	10 92 0a 03 	sts	0x030A, r1
					   iBlok++;
    4128:	20 91 02 03 	lds	r18, 0x0302
    412c:	30 91 03 03 	lds	r19, 0x0303
    4130:	2f 5f       	subi	r18, 0xFF	; 255
    4132:	3f 4f       	sbci	r19, 0xFF	; 255
    4134:	30 93 03 03 	sts	0x0303, r19
    4138:	20 93 02 03 	sts	0x0302, r18

				   }
				   if (iBlok>=4)stClientIP=cipStoreIPblok;
    413c:	80 91 02 03 	lds	r24, 0x0302
    4140:	90 91 03 03 	lds	r25, 0x0303
    4144:	84 30       	cpi	r24, 0x04	; 4
    4146:	91 05       	cpc	r25, r1
    4148:	18 f0       	brcs	.+6      	; 0x4150 <FMenuSettingServerIP+0x32e>
    414a:	84 e0       	ldi	r24, 0x04	; 4
    414c:	80 93 58 01 	sts	0x0158, r24
			   }

			   if (keyPressed==_KEY_CANCEL){
    4150:	9f 2d       	mov	r25, r15
    4152:	97 3e       	cpi	r25, 0xE7	; 231
    4154:	09 f4       	brne	.+2      	; 0x4158 <FMenuSettingServerIP+0x336>
    4156:	b8 c0       	rjmp	.+368    	; 0x42c8 <FMenuSettingServerIP+0x4a6>
			       stClientIP=cipExit; 
			   }
			   else
			   if (keyPressed==_KEY_ENTER){
    4158:	af 2d       	mov	r26, r15
    415a:	a7 3b       	cpi	r26, 0xB7	; 183
    415c:	09 f0       	breq	.+2      	; 0x4160 <FMenuSettingServerIP+0x33e>
    415e:	bd c0       	rjmp	.+378    	; 0x42da <FMenuSettingServerIP+0x4b8>
			       //NextInput
			       if (iBlok<4){
    4160:	80 91 02 03 	lds	r24, 0x0302
    4164:	90 91 03 03 	lds	r25, 0x0303
    4168:	84 30       	cpi	r24, 0x04	; 4
    416a:	91 05       	cpc	r25, r1
    416c:	08 f0       	brcs	.+2      	; 0x4170 <FMenuSettingServerIP+0x34e>
    416e:	9b c0       	rjmp	.+310    	; 0x42a6 <FMenuSettingServerIP+0x484>
				       if (iInput==1)IP_blok[iBlok]=((IPchar[0]-'0'));
    4170:	20 91 0a 03 	lds	r18, 0x030A
    4174:	21 30       	cpi	r18, 0x01	; 1
    4176:	39 f4       	brne	.+14     	; 0x4186 <FMenuSettingServerIP+0x364>
    4178:	fc 01       	movw	r30, r24
    417a:	ea 5f       	subi	r30, 0xFA	; 250
    417c:	fc 4f       	sbci	r31, 0xFC	; 252
    417e:	20 91 0f 03 	lds	r18, 0x030F
    4182:	20 53       	subi	r18, 0x30	; 48
    4184:	22 c0       	rjmp	.+68     	; 0x41ca <FMenuSettingServerIP+0x3a8>
					   if (iInput==2)IP_blok[iBlok]=((IPchar[0]-'0')*10)+(IPchar[1]-'0');
    4186:	22 30       	cpi	r18, 0x02	; 2
    4188:	49 f4       	brne	.+18     	; 0x419c <FMenuSettingServerIP+0x37a>
    418a:	fc 01       	movw	r30, r24
    418c:	ea 5f       	subi	r30, 0xFA	; 250
    418e:	fc 4f       	sbci	r31, 0xFC	; 252
    4190:	20 91 10 03 	lds	r18, 0x0310
    4194:	20 51       	subi	r18, 0x10	; 16
    4196:	30 91 0f 03 	lds	r19, 0x030F
    419a:	11 c0       	rjmp	.+34     	; 0x41be <FMenuSettingServerIP+0x39c>
					   if (iInput==3)IP_blok[iBlok]=((IPchar[0]-'0')*100)+((IPchar[1]-'0')*10)+((IPchar[2]-'0'));
    419c:	23 30       	cpi	r18, 0x03	; 3
    419e:	b1 f4       	brne	.+44     	; 0x41cc <FMenuSettingServerIP+0x3aa>
    41a0:	fc 01       	movw	r30, r24
    41a2:	ea 5f       	subi	r30, 0xFA	; 250
    41a4:	fc 4f       	sbci	r31, 0xFC	; 252
    41a6:	20 91 11 03 	lds	r18, 0x0311
    41aa:	20 5d       	subi	r18, 0xD0	; 208
    41ac:	40 91 0f 03 	lds	r20, 0x030F
    41b0:	34 e6       	ldi	r19, 0x64	; 100
    41b2:	43 9f       	mul	r20, r19
    41b4:	30 2d       	mov	r19, r0
    41b6:	11 24       	eor	r1, r1
    41b8:	23 0f       	add	r18, r19
    41ba:	30 91 10 03 	lds	r19, 0x0310
    41be:	33 0f       	add	r19, r19
    41c0:	43 2f       	mov	r20, r19
    41c2:	44 0f       	add	r20, r20
    41c4:	44 0f       	add	r20, r20
    41c6:	43 0f       	add	r20, r19
    41c8:	24 0f       	add	r18, r20
    41ca:	20 83       	st	Z, r18
				       
					   IPchar[0]='0';IPchar[1]='0';IPchar[2]='0';
    41cc:	20 e3       	ldi	r18, 0x30	; 48
    41ce:	20 93 0f 03 	sts	0x030F, r18
    41d2:	20 93 10 03 	sts	0x0310, r18
    41d6:	20 93 11 03 	sts	0x0311, r18
					   //Reposition Value
					   lcd_printf(y,((x+(iBlok*4))-3),PSTR("   "));
    41da:	60 91 0c 03 	lds	r22, 0x030C
    41de:	63 50       	subi	r22, 0x03	; 3
    41e0:	88 0f       	add	r24, r24
    41e2:	88 0f       	add	r24, r24
    41e4:	68 0f       	add	r22, r24
    41e6:	80 91 0b 03 	lds	r24, 0x030B
    41ea:	4d e1       	ldi	r20, 0x1D	; 29
    41ec:	54 e1       	ldi	r21, 0x14	; 20
    41ee:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
					   sprintf_P(lcdteks,PSTR("%d"),IP_blok[iBlok]);
    41f2:	00 d0       	rcall	.+0      	; 0x41f4 <FMenuSettingServerIP+0x3d2>
    41f4:	00 d0       	rcall	.+0      	; 0x41f6 <FMenuSettingServerIP+0x3d4>
    41f6:	00 d0       	rcall	.+0      	; 0x41f8 <FMenuSettingServerIP+0x3d6>
    41f8:	ed b7       	in	r30, 0x3d	; 61
    41fa:	fe b7       	in	r31, 0x3e	; 62
    41fc:	31 96       	adiw	r30, 0x01	; 1
    41fe:	8e 01       	movw	r16, r28
    4200:	0f 5f       	subi	r16, 0xFF	; 255
    4202:	1f 4f       	sbci	r17, 0xFF	; 255
    4204:	ad b7       	in	r26, 0x3d	; 61
    4206:	be b7       	in	r27, 0x3e	; 62
    4208:	12 96       	adiw	r26, 0x02	; 2
    420a:	1c 93       	st	X, r17
    420c:	0e 93       	st	-X, r16
    420e:	11 97       	sbiw	r26, 0x01	; 1
    4210:	8a e1       	ldi	r24, 0x1A	; 26
    4212:	94 e1       	ldi	r25, 0x14	; 20
    4214:	93 83       	std	Z+3, r25	; 0x03
    4216:	82 83       	std	Z+2, r24	; 0x02
    4218:	a0 91 02 03 	lds	r26, 0x0302
    421c:	b0 91 03 03 	lds	r27, 0x0303
    4220:	aa 5f       	subi	r26, 0xFA	; 250
    4222:	bc 4f       	sbci	r27, 0xFC	; 252
    4224:	8c 91       	ld	r24, X
    4226:	84 83       	std	Z+4, r24	; 0x04
    4228:	15 82       	std	Z+5, r1	; 0x05
    422a:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
                       lcd_print(y,1+((x+(iBlok*4))-strlen(lcdteks)),lcdteks);
    422e:	f8 01       	movw	r30, r16
    4230:	01 90       	ld	r0, Z+
    4232:	00 20       	and	r0, r0
    4234:	e9 f7       	brne	.-6      	; 0x4230 <FMenuSettingServerIP+0x40e>
    4236:	31 97       	sbiw	r30, 0x01	; 1
    4238:	e0 1b       	sub	r30, r16
    423a:	f1 0b       	sbc	r31, r17
    423c:	8d b7       	in	r24, 0x3d	; 61
    423e:	9e b7       	in	r25, 0x3e	; 62
    4240:	06 96       	adiw	r24, 0x06	; 6
    4242:	0f b6       	in	r0, 0x3f	; 63
    4244:	f8 94       	cli
    4246:	9e bf       	out	0x3e, r25	; 62
    4248:	0f be       	out	0x3f, r0	; 63
    424a:	8d bf       	out	0x3d, r24	; 61
    424c:	60 91 0c 03 	lds	r22, 0x030C
    4250:	6f 5f       	subi	r22, 0xFF	; 255
    4252:	80 91 02 03 	lds	r24, 0x0302
    4256:	88 0f       	add	r24, r24
    4258:	88 0f       	add	r24, r24
    425a:	68 0f       	add	r22, r24
    425c:	6e 1b       	sub	r22, r30
    425e:	80 91 0b 03 	lds	r24, 0x030B
    4262:	a8 01       	movw	r20, r16
    4264:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>

					   if (iBlok>0)lcd_printf(y,1+((x+((iBlok-1)*4))),PSTR("."));
    4268:	80 91 02 03 	lds	r24, 0x0302
    426c:	90 91 03 03 	lds	r25, 0x0303
    4270:	00 97       	sbiw	r24, 0x00	; 0
    4272:	71 f0       	breq	.+28     	; 0x4290 <FMenuSettingServerIP+0x46e>
    4274:	60 91 0c 03 	lds	r22, 0x030C
    4278:	6f 5f       	subi	r22, 0xFF	; 255
    427a:	81 50       	subi	r24, 0x01	; 1
    427c:	90 4c       	sbci	r25, 0xC0	; 192
    427e:	88 0f       	add	r24, r24
    4280:	88 0f       	add	r24, r24
    4282:	68 0f       	add	r22, r24
    4284:	80 91 0b 03 	lds	r24, 0x030B
    4288:	48 e1       	ldi	r20, 0x18	; 24
    428a:	54 e1       	ldi	r21, 0x14	; 20
    428c:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
				       iInput=0;
    4290:	10 92 0a 03 	sts	0x030A, r1
					   iBlok++;	   
    4294:	80 91 02 03 	lds	r24, 0x0302
    4298:	90 91 03 03 	lds	r25, 0x0303
    429c:	01 96       	adiw	r24, 0x01	; 1
    429e:	90 93 03 03 	sts	0x0303, r25
    42a2:	80 93 02 03 	sts	0x0302, r24
				   }
				   if (iBlok>=4)stClientIP=cipStoreIPblok;
    42a6:	80 91 02 03 	lds	r24, 0x0302
    42aa:	90 91 03 03 	lds	r25, 0x0303
    42ae:	84 30       	cpi	r24, 0x04	; 4
    42b0:	91 05       	cpc	r25, r1
    42b2:	98 f0       	brcs	.+38     	; 0x42da <FMenuSettingServerIP+0x4b8>
    42b4:	84 e0       	ldi	r24, 0x04	; 4
    42b6:	09 c0       	rjmp	.+18     	; 0x42ca <FMenuSettingServerIP+0x4a8>
			   }
		       break;
          case cipStoreIPblok:
		       //UpdateIPblok
			   eeprom_write_block((const void*) &IP_blok,(const void*) &DefServerIP,4);
    42b8:	86 e0       	ldi	r24, 0x06	; 6
    42ba:	93 e0       	ldi	r25, 0x03	; 3
    42bc:	6c e2       	ldi	r22, 0x2C	; 44
    42be:	70 e0       	ldi	r23, 0x00	; 0
    42c0:	44 e0       	ldi	r20, 0x04	; 4
    42c2:	50 e0       	ldi	r21, 0x00	; 0
    42c4:	0e 94 6e aa 	call	0x154dc	; 0x154dc <__eewr_block_m128>
			   stClientIP=cipExit;
    42c8:	83 e0       	ldi	r24, 0x03	; 3
    42ca:	80 93 58 01 	sts	0x0158, r24
		       break; 
    42ce:	05 c0       	rjmp	.+10     	; 0x42da <FMenuSettingServerIP+0x4b8>
          case cipExit://Cancel IPConfig
			   stClientIP=cipInit;
    42d0:	81 e0       	ldi	r24, 0x01	; 1
    42d2:	80 93 58 01 	sts	0x0158, r24
			   Result=MENU_DONE;
    42d6:	80 93 0d 03 	sts	0x030D, r24
		       break;     
		  }//EndSwitch	 
	return Result;
}
    42da:	80 91 0d 03 	lds	r24, 0x030D
    42de:	64 96       	adiw	r28, 0x14	; 20
    42e0:	0f b6       	in	r0, 0x3f	; 63
    42e2:	f8 94       	cli
    42e4:	de bf       	out	0x3e, r29	; 62
    42e6:	0f be       	out	0x3f, r0	; 63
    42e8:	cd bf       	out	0x3d, r28	; 61
    42ea:	cf 91       	pop	r28
    42ec:	df 91       	pop	r29
    42ee:	1f 91       	pop	r17
    42f0:	0f 91       	pop	r16
    42f2:	ff 90       	pop	r15
    42f4:	08 95       	ret

000042f6 <menu_product>:
   return Result;
}

void menu_product(){

}
    42f6:	08 95       	ret

000042f8 <SelectMark>:
	      break;
	 }
    return Result;
}

char SelectMark(char InMark){
    42f8:	cf 92       	push	r12
    42fa:	df 92       	push	r13
    42fc:	ff 92       	push	r15
    42fe:	0f 93       	push	r16
    4300:	1f 93       	push	r17
    4302:	df 93       	push	r29
    4304:	cf 93       	push	r28
    4306:	00 d0       	rcall	.+0      	; 0x4308 <SelectMark+0x10>
    4308:	00 d0       	rcall	.+0      	; 0x430a <SelectMark+0x12>
    430a:	0f 92       	push	r0
    430c:	cd b7       	in	r28, 0x3d	; 61
    430e:	de b7       	in	r29, 0x3e	; 62
    4310:	f8 2e       	mov	r15, r24
char i,Result,PMark[5],Length;
     eeprom_read_block((void*)&PMark,(const void*)&DefMarkMap, sizeof(DefMarkMap));
    4312:	8e 01       	movw	r16, r28
    4314:	0f 5f       	subi	r16, 0xFF	; 255
    4316:	1f 4f       	sbci	r17, 0xFF	; 255
    4318:	c8 01       	movw	r24, r16
    431a:	61 e4       	ldi	r22, 0x41	; 65
    431c:	70 e0       	ldi	r23, 0x00	; 0
    431e:	45 e0       	ldi	r20, 0x05	; 5
    4320:	50 e0       	ldi	r21, 0x00	; 0
    4322:	0e 94 56 aa 	call	0x154ac	; 0x154ac <__eerd_block_m128>
    4326:	f8 01       	movw	r30, r16
	 Length=sizeof(DefMarkMap);
	 Result=InMark;
    4328:	8f 2d       	mov	r24, r15
    return Result;
}

char SelectMark(char InMark){
char i,Result,PMark[5],Length;
     eeprom_read_block((void*)&PMark,(const void*)&DefMarkMap, sizeof(DefMarkMap));
    432a:	20 e0       	ldi	r18, 0x00	; 0
    432c:	30 e0       	ldi	r19, 0x00	; 0
	 Length=sizeof(DefMarkMap);
	 Result=InMark;
     for(i=0;i<Length;i++){
	     if (InMark==PMark[i])
		     Result=PMark[(i+1)%Length];
    432e:	05 e0       	ldi	r16, 0x05	; 5
    4330:	10 e0       	ldi	r17, 0x00	; 0
    4332:	6f 01       	movw	r12, r30
char i,Result,PMark[5],Length;
     eeprom_read_block((void*)&PMark,(const void*)&DefMarkMap, sizeof(DefMarkMap));
	 Length=sizeof(DefMarkMap);
	 Result=InMark;
     for(i=0;i<Length;i++){
	     if (InMark==PMark[i])
    4334:	91 91       	ld	r25, Z+
    4336:	2f 5f       	subi	r18, 0xFF	; 255
    4338:	3f 4f       	sbci	r19, 0xFF	; 255
    433a:	f9 16       	cp	r15, r25
    433c:	41 f4       	brne	.+16     	; 0x434e <SelectMark+0x56>
		     Result=PMark[(i+1)%Length];
    433e:	c9 01       	movw	r24, r18
    4340:	b8 01       	movw	r22, r16
    4342:	0e 94 ab a7 	call	0x14f56	; 0x14f56 <__divmodhi4>
    4346:	8c 0d       	add	r24, r12
    4348:	9d 1d       	adc	r25, r13
    434a:	dc 01       	movw	r26, r24
    434c:	8c 91       	ld	r24, X
char SelectMark(char InMark){
char i,Result,PMark[5],Length;
     eeprom_read_block((void*)&PMark,(const void*)&DefMarkMap, sizeof(DefMarkMap));
	 Length=sizeof(DefMarkMap);
	 Result=InMark;
     for(i=0;i<Length;i++){
    434e:	25 30       	cpi	r18, 0x05	; 5
    4350:	31 05       	cpc	r19, r1
    4352:	81 f7       	brne	.-32     	; 0x4334 <SelectMark+0x3c>
	     if (InMark==PMark[i])
		     Result=PMark[(i+1)%Length];
	 }
     return Result;
}
    4354:	0f 90       	pop	r0
    4356:	0f 90       	pop	r0
    4358:	0f 90       	pop	r0
    435a:	0f 90       	pop	r0
    435c:	0f 90       	pop	r0
    435e:	cf 91       	pop	r28
    4360:	df 91       	pop	r29
    4362:	1f 91       	pop	r17
    4364:	0f 91       	pop	r16
    4366:	ff 90       	pop	r15
    4368:	df 90       	pop	r13
    436a:	cf 90       	pop	r12
    436c:	08 95       	ret

0000436e <FSettingDec>:

	Result=MENU_DONE;
	return Result;
}

char FSettingDec(){
    436e:	cf 92       	push	r12
    4370:	df 92       	push	r13
    4372:	ef 92       	push	r14
    4374:	ff 92       	push	r15
    4376:	0f 93       	push	r16
    4378:	1f 93       	push	r17
    437a:	df 93       	push	r29
    437c:	cf 93       	push	r28
    437e:	cd b7       	in	r28, 0x3d	; 61
    4380:	de b7       	in	r29, 0x3e	; 62
    4382:	64 97       	sbiw	r28, 0x14	; 20
    4384:	0f b6       	in	r0, 0x3f	; 63
    4386:	f8 94       	cli
    4388:	de bf       	out	0x3e, r29	; 62
    438a:	0f be       	out	0x3f, r0	; 63
    438c:	cd bf       	out	0x3d, r28	; 61
static char stSettingDecimal=sdInitDisplay;
     char PDecimalConfig[4],Addr,KeyChar,Result;
	 char lcdteks[20];

     Result=MENU_NONE;
	 switch(stSettingDecimal){
    438e:	80 91 fe 02 	lds	r24, 0x02FE
    4392:	82 30       	cpi	r24, 0x02	; 2
    4394:	09 f4       	brne	.+2      	; 0x4398 <FSettingDec+0x2a>
    4396:	b3 c0       	rjmp	.+358    	; 0x44fe <FSettingDec+0x190>
    4398:	83 30       	cpi	r24, 0x03	; 3
    439a:	30 f4       	brcc	.+12     	; 0x43a8 <FSettingDec+0x3a>
    439c:	88 23       	and	r24, r24
    439e:	71 f0       	breq	.+28     	; 0x43bc <FSettingDec+0x4e>
    43a0:	81 30       	cpi	r24, 0x01	; 1
    43a2:	09 f0       	breq	.+2      	; 0x43a6 <FSettingDec+0x38>
    43a4:	83 c1       	rjmp	.+774    	; 0x46ac <FSettingDec+0x33e>
    43a6:	89 c0       	rjmp	.+274    	; 0x44ba <FSettingDec+0x14c>
    43a8:	84 30       	cpi	r24, 0x04	; 4
    43aa:	09 f4       	brne	.+2      	; 0x43ae <FSettingDec+0x40>
    43ac:	77 c1       	rjmp	.+750    	; 0x469c <FSettingDec+0x32e>
    43ae:	84 30       	cpi	r24, 0x04	; 4
    43b0:	08 f4       	brcc	.+2      	; 0x43b4 <FSettingDec+0x46>
    43b2:	48 c1       	rjmp	.+656    	; 0x4644 <FSettingDec+0x2d6>
    43b4:	85 30       	cpi	r24, 0x05	; 5
    43b6:	09 f0       	breq	.+2      	; 0x43ba <FSettingDec+0x4c>
    43b8:	79 c1       	rjmp	.+754    	; 0x46ac <FSettingDec+0x33e>
    43ba:	74 c1       	rjmp	.+744    	; 0x46a4 <FSettingDec+0x336>
	 case sdInitDisplay:
	      lcd_clear();         //"12345678901234567890
    43bc:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
		  PDecimalConfig[0]=eeprom_read_byte(&DefDecimalPrice);
    43c0:	89 e3       	ldi	r24, 0x39	; 57
    43c2:	90 e0       	ldi	r25, 0x00	; 0
    43c4:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
    43c8:	d8 2e       	mov	r13, r24
		  PDecimalConfig[1]=eeprom_read_byte(&DefDecimalVolume);
    43ca:	8a e3       	ldi	r24, 0x3A	; 58
    43cc:	90 e0       	ldi	r25, 0x00	; 0
    43ce:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
    43d2:	e8 2e       	mov	r14, r24
		  PDecimalConfig[2]=eeprom_read_byte(&DefDecimalMoney);
    43d4:	8b e3       	ldi	r24, 0x3B	; 59
    43d6:	90 e0       	ldi	r25, 0x00	; 0
    43d8:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
    43dc:	f8 2e       	mov	r15, r24


		  sprintf_P(lcdteks,PSTR("1.Price :%d"),PDecimalConfig[0]);
    43de:	00 d0       	rcall	.+0      	; 0x43e0 <FSettingDec+0x72>
    43e0:	00 d0       	rcall	.+0      	; 0x43e2 <FSettingDec+0x74>
    43e2:	00 d0       	rcall	.+0      	; 0x43e4 <FSettingDec+0x76>
    43e4:	ed b7       	in	r30, 0x3d	; 61
    43e6:	fe b7       	in	r31, 0x3e	; 62
    43e8:	31 96       	adiw	r30, 0x01	; 1
    43ea:	8e 01       	movw	r16, r28
    43ec:	0f 5f       	subi	r16, 0xFF	; 255
    43ee:	1f 4f       	sbci	r17, 0xFF	; 255
    43f0:	ad b7       	in	r26, 0x3d	; 61
    43f2:	be b7       	in	r27, 0x3e	; 62
    43f4:	12 96       	adiw	r26, 0x02	; 2
    43f6:	1c 93       	st	X, r17
    43f8:	0e 93       	st	-X, r16
    43fa:	11 97       	sbiw	r26, 0x01	; 1
    43fc:	28 eb       	ldi	r18, 0xB8	; 184
    43fe:	32 e1       	ldi	r19, 0x12	; 18
    4400:	33 83       	std	Z+3, r19	; 0x03
    4402:	22 83       	std	Z+2, r18	; 0x02
    4404:	d4 82       	std	Z+4, r13	; 0x04
    4406:	15 82       	std	Z+5, r1	; 0x05
    4408:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		  lcd_print(1,1,lcdteks);
    440c:	8d b7       	in	r24, 0x3d	; 61
    440e:	9e b7       	in	r25, 0x3e	; 62
    4410:	06 96       	adiw	r24, 0x06	; 6
    4412:	0f b6       	in	r0, 0x3f	; 63
    4414:	f8 94       	cli
    4416:	9e bf       	out	0x3e, r25	; 62
    4418:	0f be       	out	0x3f, r0	; 63
    441a:	8d bf       	out	0x3d, r24	; 61
    441c:	81 e0       	ldi	r24, 0x01	; 1
    441e:	61 e0       	ldi	r22, 0x01	; 1
    4420:	a8 01       	movw	r20, r16
    4422:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
		  sprintf_P(lcdteks,PSTR("2.Volume:%d"),PDecimalConfig[1]);
    4426:	00 d0       	rcall	.+0      	; 0x4428 <FSettingDec+0xba>
    4428:	00 d0       	rcall	.+0      	; 0x442a <FSettingDec+0xbc>
    442a:	00 d0       	rcall	.+0      	; 0x442c <FSettingDec+0xbe>
    442c:	ed b7       	in	r30, 0x3d	; 61
    442e:	fe b7       	in	r31, 0x3e	; 62
    4430:	31 96       	adiw	r30, 0x01	; 1
    4432:	ad b7       	in	r26, 0x3d	; 61
    4434:	be b7       	in	r27, 0x3e	; 62
    4436:	12 96       	adiw	r26, 0x02	; 2
    4438:	1c 93       	st	X, r17
    443a:	0e 93       	st	-X, r16
    443c:	11 97       	sbiw	r26, 0x01	; 1
    443e:	2c ea       	ldi	r18, 0xAC	; 172
    4440:	32 e1       	ldi	r19, 0x12	; 18
    4442:	33 83       	std	Z+3, r19	; 0x03
    4444:	22 83       	std	Z+2, r18	; 0x02
    4446:	e4 82       	std	Z+4, r14	; 0x04
    4448:	15 82       	std	Z+5, r1	; 0x05
    444a:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		  lcd_print(2,1,lcdteks);
    444e:	8d b7       	in	r24, 0x3d	; 61
    4450:	9e b7       	in	r25, 0x3e	; 62
    4452:	06 96       	adiw	r24, 0x06	; 6
    4454:	0f b6       	in	r0, 0x3f	; 63
    4456:	f8 94       	cli
    4458:	9e bf       	out	0x3e, r25	; 62
    445a:	0f be       	out	0x3f, r0	; 63
    445c:	8d bf       	out	0x3d, r24	; 61
    445e:	82 e0       	ldi	r24, 0x02	; 2
    4460:	61 e0       	ldi	r22, 0x01	; 1
    4462:	a8 01       	movw	r20, r16
    4464:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
		  sprintf_P(lcdteks,PSTR("3.Money :%d"),PDecimalConfig[2]);
    4468:	00 d0       	rcall	.+0      	; 0x446a <FSettingDec+0xfc>
    446a:	00 d0       	rcall	.+0      	; 0x446c <FSettingDec+0xfe>
    446c:	00 d0       	rcall	.+0      	; 0x446e <FSettingDec+0x100>
    446e:	ed b7       	in	r30, 0x3d	; 61
    4470:	fe b7       	in	r31, 0x3e	; 62
    4472:	31 96       	adiw	r30, 0x01	; 1
    4474:	ad b7       	in	r26, 0x3d	; 61
    4476:	be b7       	in	r27, 0x3e	; 62
    4478:	12 96       	adiw	r26, 0x02	; 2
    447a:	1c 93       	st	X, r17
    447c:	0e 93       	st	-X, r16
    447e:	11 97       	sbiw	r26, 0x01	; 1
    4480:	80 ea       	ldi	r24, 0xA0	; 160
    4482:	92 e1       	ldi	r25, 0x12	; 18
    4484:	93 83       	std	Z+3, r25	; 0x03
    4486:	82 83       	std	Z+2, r24	; 0x02
    4488:	f4 82       	std	Z+4, r15	; 0x04
    448a:	15 82       	std	Z+5, r1	; 0x05
    448c:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		  lcd_print(3,1,lcdteks);
    4490:	8d b7       	in	r24, 0x3d	; 61
    4492:	9e b7       	in	r25, 0x3e	; 62
    4494:	06 96       	adiw	r24, 0x06	; 6
    4496:	0f b6       	in	r0, 0x3f	; 63
    4498:	f8 94       	cli
    449a:	9e bf       	out	0x3e, r25	; 62
    449c:	0f be       	out	0x3f, r0	; 63
    449e:	8d bf       	out	0x3d, r24	; 61
    44a0:	83 e0       	ldi	r24, 0x03	; 3
    44a2:	61 e0       	ldi	r22, 0x01	; 1
    44a4:	a8 01       	movw	r20, r16
    44a6:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
		  lcd_printf(4,1,PSTR("[*]Back  [#]Next"));		  
    44aa:	84 e0       	ldi	r24, 0x04	; 4
    44ac:	61 e0       	ldi	r22, 0x01	; 1
    44ae:	4f e8       	ldi	r20, 0x8F	; 143
    44b0:	52 e1       	ldi	r21, 0x12	; 18
    44b2:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  stSettingDecimal=sdSelectKey1;
    44b6:	81 e0       	ldi	r24, 0x01	; 1
    44b8:	f2 c0       	rjmp	.+484    	; 0x469e <FSettingDec+0x330>
		  break;
     case sdSelectKey1:
          KeyChar=_key_btn(_key_scan(1));
    44ba:	81 e0       	ldi	r24, 0x01	; 1
    44bc:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <_key_scan>
    44c0:	0e 94 49 a3 	call	0x14692	; 0x14692 <_key_btn>
		  if ((KeyChar>='1')&&(KeyChar<='3')){
    44c4:	08 2f       	mov	r16, r24
    44c6:	01 53       	subi	r16, 0x31	; 49
    44c8:	03 30       	cpi	r16, 0x03	; 3
    44ca:	88 f4       	brcc	.+34     	; 0x44ee <FSettingDec+0x180>
		      Addr=KeyChar-'1';
		  	  PDecimalConfig[Addr]=eeprom_read_byte(&DefDecimalPrice+Addr);
    44cc:	10 e0       	ldi	r17, 0x00	; 0
    44ce:	07 5c       	subi	r16, 0xC7	; 199
    44d0:	1f 4f       	sbci	r17, 0xFF	; 255
    44d2:	c8 01       	movw	r24, r16
    44d4:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
			  PDecimalConfig[Addr]=(PDecimalConfig[Addr]+1)%3;
    44d8:	90 e0       	ldi	r25, 0x00	; 0
    44da:	01 96       	adiw	r24, 0x01	; 1
    44dc:	63 e0       	ldi	r22, 0x03	; 3
    44de:	70 e0       	ldi	r23, 0x00	; 0
    44e0:	0e 94 ab a7 	call	0x14f56	; 0x14f56 <__divmodhi4>
    44e4:	68 2f       	mov	r22, r24
			  eeprom_write_byte(&DefDecimalPrice+Addr,PDecimalConfig[Addr]);
    44e6:	c8 01       	movw	r24, r16
    44e8:	0e 94 78 aa 	call	0x154f0	; 0x154f0 <__eewr_byte_m128>
    44ec:	d4 c0       	rjmp	.+424    	; 0x4696 <FSettingDec+0x328>
              stSettingDecimal=sdInitDisplay;
		  }else if (KeyChar=='*') stSettingDecimal=sdExitSettingDecimal;
    44ee:	8a 32       	cpi	r24, 0x2A	; 42
    44f0:	11 f4       	brne	.+4      	; 0x44f6 <FSettingDec+0x188>
    44f2:	85 e0       	ldi	r24, 0x05	; 5
    44f4:	d4 c0       	rjmp	.+424    	; 0x469e <FSettingDec+0x330>
		  else if (KeyChar=='#') stSettingDecimal=sdInitDisplay2;
    44f6:	83 32       	cpi	r24, 0x23	; 35
    44f8:	09 f0       	breq	.+2      	; 0x44fc <FSettingDec+0x18e>
    44fa:	d8 c0       	rjmp	.+432    	; 0x46ac <FSettingDec+0x33e>
    44fc:	cf c0       	rjmp	.+414    	; 0x469c <FSettingDec+0x32e>
          break;
     case sdInitDisplay2:
		  PDecimalConfig[0]=eeprom_read_byte(&DefDecimalTotalVolume);
    44fe:	8d e3       	ldi	r24, 0x3D	; 61
    4500:	90 e0       	ldi	r25, 0x00	; 0
    4502:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
    4506:	c8 2e       	mov	r12, r24
		  PDecimalConfig[1]=eeprom_read_byte(&DefDecimalTotalMoney);
    4508:	8e e3       	ldi	r24, 0x3E	; 62
    450a:	90 e0       	ldi	r25, 0x00	; 0
    450c:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
    4510:	d8 2e       	mov	r13, r24
		  PDecimalConfig[2]=eeprom_read_byte(&DefDecimalMark);
    4512:	8f e3       	ldi	r24, 0x3F	; 63
    4514:	90 e0       	ldi	r25, 0x00	; 0
    4516:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
    451a:	e8 2e       	mov	r14, r24
		  PDecimalConfig[3]=eeprom_read_byte(&DefCurrencyMark);
    451c:	80 e4       	ldi	r24, 0x40	; 64
    451e:	90 e0       	ldi	r25, 0x00	; 0
    4520:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
    4524:	f8 2e       	mov	r15, r24
		  sprintf_P(lcdteks,PSTR("1.T.Volume:%d "),PDecimalConfig[0]);
    4526:	00 d0       	rcall	.+0      	; 0x4528 <FSettingDec+0x1ba>
    4528:	00 d0       	rcall	.+0      	; 0x452a <FSettingDec+0x1bc>
    452a:	00 d0       	rcall	.+0      	; 0x452c <FSettingDec+0x1be>
    452c:	ed b7       	in	r30, 0x3d	; 61
    452e:	fe b7       	in	r31, 0x3e	; 62
    4530:	31 96       	adiw	r30, 0x01	; 1
    4532:	8e 01       	movw	r16, r28
    4534:	0f 5f       	subi	r16, 0xFF	; 255
    4536:	1f 4f       	sbci	r17, 0xFF	; 255
    4538:	ad b7       	in	r26, 0x3d	; 61
    453a:	be b7       	in	r27, 0x3e	; 62
    453c:	12 96       	adiw	r26, 0x02	; 2
    453e:	1c 93       	st	X, r17
    4540:	0e 93       	st	-X, r16
    4542:	11 97       	sbiw	r26, 0x01	; 1
    4544:	20 e8       	ldi	r18, 0x80	; 128
    4546:	32 e1       	ldi	r19, 0x12	; 18
    4548:	33 83       	std	Z+3, r19	; 0x03
    454a:	22 83       	std	Z+2, r18	; 0x02
    454c:	c4 82       	std	Z+4, r12	; 0x04
    454e:	15 82       	std	Z+5, r1	; 0x05
    4550:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		  lcd_print(1,1,lcdteks);
    4554:	8d b7       	in	r24, 0x3d	; 61
    4556:	9e b7       	in	r25, 0x3e	; 62
    4558:	06 96       	adiw	r24, 0x06	; 6
    455a:	0f b6       	in	r0, 0x3f	; 63
    455c:	f8 94       	cli
    455e:	9e bf       	out	0x3e, r25	; 62
    4560:	0f be       	out	0x3f, r0	; 63
    4562:	8d bf       	out	0x3d, r24	; 61
    4564:	81 e0       	ldi	r24, 0x01	; 1
    4566:	61 e0       	ldi	r22, 0x01	; 1
    4568:	a8 01       	movw	r20, r16
    456a:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
		  sprintf_P(lcdteks,PSTR("2.T.Money :%d "),PDecimalConfig[1]);
    456e:	00 d0       	rcall	.+0      	; 0x4570 <FSettingDec+0x202>
    4570:	00 d0       	rcall	.+0      	; 0x4572 <FSettingDec+0x204>
    4572:	00 d0       	rcall	.+0      	; 0x4574 <FSettingDec+0x206>
    4574:	ed b7       	in	r30, 0x3d	; 61
    4576:	fe b7       	in	r31, 0x3e	; 62
    4578:	31 96       	adiw	r30, 0x01	; 1
    457a:	ad b7       	in	r26, 0x3d	; 61
    457c:	be b7       	in	r27, 0x3e	; 62
    457e:	12 96       	adiw	r26, 0x02	; 2
    4580:	1c 93       	st	X, r17
    4582:	0e 93       	st	-X, r16
    4584:	11 97       	sbiw	r26, 0x01	; 1
    4586:	81 e7       	ldi	r24, 0x71	; 113
    4588:	92 e1       	ldi	r25, 0x12	; 18
    458a:	93 83       	std	Z+3, r25	; 0x03
    458c:	82 83       	std	Z+2, r24	; 0x02
    458e:	d4 82       	std	Z+4, r13	; 0x04
    4590:	15 82       	std	Z+5, r1	; 0x05
    4592:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		  lcd_print(2,1,lcdteks);
    4596:	8d b7       	in	r24, 0x3d	; 61
    4598:	9e b7       	in	r25, 0x3e	; 62
    459a:	06 96       	adiw	r24, 0x06	; 6
    459c:	0f b6       	in	r0, 0x3f	; 63
    459e:	f8 94       	cli
    45a0:	9e bf       	out	0x3e, r25	; 62
    45a2:	0f be       	out	0x3f, r0	; 63
    45a4:	8d bf       	out	0x3d, r24	; 61
    45a6:	82 e0       	ldi	r24, 0x02	; 2
    45a8:	61 e0       	ldi	r22, 0x01	; 1
    45aa:	a8 01       	movw	r20, r16
    45ac:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
		  sprintf_P(lcdteks,PSTR("3.Decimal :%c "),PDecimalConfig[2]);
    45b0:	00 d0       	rcall	.+0      	; 0x45b2 <FSettingDec+0x244>
    45b2:	00 d0       	rcall	.+0      	; 0x45b4 <FSettingDec+0x246>
    45b4:	00 d0       	rcall	.+0      	; 0x45b6 <FSettingDec+0x248>
    45b6:	ed b7       	in	r30, 0x3d	; 61
    45b8:	fe b7       	in	r31, 0x3e	; 62
    45ba:	31 96       	adiw	r30, 0x01	; 1
    45bc:	ad b7       	in	r26, 0x3d	; 61
    45be:	be b7       	in	r27, 0x3e	; 62
    45c0:	12 96       	adiw	r26, 0x02	; 2
    45c2:	1c 93       	st	X, r17
    45c4:	0e 93       	st	-X, r16
    45c6:	11 97       	sbiw	r26, 0x01	; 1
    45c8:	82 e6       	ldi	r24, 0x62	; 98
    45ca:	92 e1       	ldi	r25, 0x12	; 18
    45cc:	93 83       	std	Z+3, r25	; 0x03
    45ce:	82 83       	std	Z+2, r24	; 0x02
    45d0:	e4 82       	std	Z+4, r14	; 0x04
    45d2:	15 82       	std	Z+5, r1	; 0x05
    45d4:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		  lcd_print(3,1,lcdteks);
    45d8:	8d b7       	in	r24, 0x3d	; 61
    45da:	9e b7       	in	r25, 0x3e	; 62
    45dc:	06 96       	adiw	r24, 0x06	; 6
    45de:	0f b6       	in	r0, 0x3f	; 63
    45e0:	f8 94       	cli
    45e2:	9e bf       	out	0x3e, r25	; 62
    45e4:	0f be       	out	0x3f, r0	; 63
    45e6:	8d bf       	out	0x3d, r24	; 61
    45e8:	83 e0       	ldi	r24, 0x03	; 3
    45ea:	61 e0       	ldi	r22, 0x01	; 1
    45ec:	a8 01       	movw	r20, r16
    45ee:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
		  sprintf_P(lcdteks,PSTR("4.Sparator:%c "),PDecimalConfig[3]);
    45f2:	00 d0       	rcall	.+0      	; 0x45f4 <FSettingDec+0x286>
    45f4:	00 d0       	rcall	.+0      	; 0x45f6 <FSettingDec+0x288>
    45f6:	00 d0       	rcall	.+0      	; 0x45f8 <FSettingDec+0x28a>
    45f8:	ed b7       	in	r30, 0x3d	; 61
    45fa:	fe b7       	in	r31, 0x3e	; 62
    45fc:	31 96       	adiw	r30, 0x01	; 1
    45fe:	ad b7       	in	r26, 0x3d	; 61
    4600:	be b7       	in	r27, 0x3e	; 62
    4602:	12 96       	adiw	r26, 0x02	; 2
    4604:	1c 93       	st	X, r17
    4606:	0e 93       	st	-X, r16
    4608:	11 97       	sbiw	r26, 0x01	; 1
    460a:	83 e5       	ldi	r24, 0x53	; 83
    460c:	92 e1       	ldi	r25, 0x12	; 18
    460e:	93 83       	std	Z+3, r25	; 0x03
    4610:	82 83       	std	Z+2, r24	; 0x02
    4612:	f4 82       	std	Z+4, r15	; 0x04
    4614:	15 82       	std	Z+5, r1	; 0x05
    4616:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		  lcd_print(4,1,lcdteks);
    461a:	8d b7       	in	r24, 0x3d	; 61
    461c:	9e b7       	in	r25, 0x3e	; 62
    461e:	06 96       	adiw	r24, 0x06	; 6
    4620:	0f b6       	in	r0, 0x3f	; 63
    4622:	f8 94       	cli
    4624:	9e bf       	out	0x3e, r25	; 62
    4626:	0f be       	out	0x3f, r0	; 63
    4628:	8d bf       	out	0x3d, r24	; 61
    462a:	84 e0       	ldi	r24, 0x04	; 4
    462c:	61 e0       	ldi	r22, 0x01	; 1
    462e:	a8 01       	movw	r20, r16
    4630:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
		  lcd_printf(4,14,PSTR("*)Back"));
    4634:	84 e0       	ldi	r24, 0x04	; 4
    4636:	6e e0       	ldi	r22, 0x0E	; 14
    4638:	4c e4       	ldi	r20, 0x4C	; 76
    463a:	52 e1       	ldi	r21, 0x12	; 18
    463c:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
	      stSettingDecimal=sdSelectKey2;
    4640:	83 e0       	ldi	r24, 0x03	; 3
    4642:	2d c0       	rjmp	.+90     	; 0x469e <FSettingDec+0x330>
	      break;
     case sdSelectKey2:
          KeyChar=_key_btn(_key_scan(1));
    4644:	81 e0       	ldi	r24, 0x01	; 1
    4646:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <_key_scan>
    464a:	0e 94 49 a3 	call	0x14692	; 0x14692 <_key_btn>
		  if ((KeyChar>='1')&&(KeyChar<='2')){
    464e:	08 2f       	mov	r16, r24
    4650:	01 53       	subi	r16, 0x31	; 49
    4652:	02 30       	cpi	r16, 0x02	; 2
    4654:	68 f4       	brcc	.+26     	; 0x4670 <FSettingDec+0x302>
		      Addr=KeyChar-'1';
		  	  PDecimalConfig[Addr]=eeprom_read_byte(&DefDecimalTotalVolume+Addr);
    4656:	10 e0       	ldi	r17, 0x00	; 0
    4658:	03 5c       	subi	r16, 0xC3	; 195
    465a:	1f 4f       	sbci	r17, 0xFF	; 255
    465c:	c8 01       	movw	r24, r16
    465e:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
		      PDecimalConfig[Addr]=(PDecimalConfig[Addr]+1)%4;
    4662:	68 2f       	mov	r22, r24
    4664:	70 e0       	ldi	r23, 0x00	; 0
    4666:	6f 5f       	subi	r22, 0xFF	; 255
    4668:	7f 4f       	sbci	r23, 0xFF	; 255
    466a:	63 70       	andi	r22, 0x03	; 3
    466c:	70 70       	andi	r23, 0x00	; 0
    466e:	0d c0       	rjmp	.+26     	; 0x468a <FSettingDec+0x31c>

			  eeprom_write_byte(&DefDecimalTotalVolume+Addr,PDecimalConfig[Addr]);
              stSettingDecimal=sdInitDisplay2;
		  }else if ((KeyChar>='3')&&(KeyChar<='4')){
    4670:	98 2f       	mov	r25, r24
    4672:	93 53       	subi	r25, 0x33	; 51
    4674:	92 30       	cpi	r25, 0x02	; 2
    4676:	68 f4       	brcc	.+26     	; 0x4692 <FSettingDec+0x324>
		      Addr=KeyChar-'1';
		  	  PDecimalConfig[Addr]=eeprom_read_byte(&DefDecimalTotalVolume+Addr);
    4678:	10 e0       	ldi	r17, 0x00	; 0
    467a:	03 5c       	subi	r16, 0xC3	; 195
    467c:	1f 4f       	sbci	r17, 0xFF	; 255
    467e:	c8 01       	movw	r24, r16
    4680:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
			  PDecimalConfig[Addr]=SelectMark(PDecimalConfig[Addr]);
    4684:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <SelectMark>
    4688:	68 2f       	mov	r22, r24
			  eeprom_write_byte(&DefDecimalTotalVolume+Addr,PDecimalConfig[Addr]);
    468a:	c8 01       	movw	r24, r16
    468c:	0e 94 78 aa 	call	0x154f0	; 0x154f0 <__eewr_byte_m128>
    4690:	05 c0       	rjmp	.+10     	; 0x469c <FSettingDec+0x32e>
              stSettingDecimal=sdInitDisplay2;
		  }else if (KeyChar=='*') stSettingDecimal=sdInitDisplay;
    4692:	8a 32       	cpi	r24, 0x2A	; 42
    4694:	59 f4       	brne	.+22     	; 0x46ac <FSettingDec+0x33e>
    4696:	10 92 fe 02 	sts	0x02FE, r1
    469a:	08 c0       	rjmp	.+16     	; 0x46ac <FSettingDec+0x33e>
		          stSettingDecimal=sdTestInput;
				  }*/
          break;
     case sdTestInput:
	      //if (TestUserInput()==MENU_DONE)
		  stSettingDecimal=sdInitDisplay2;
    469c:	82 e0       	ldi	r24, 0x02	; 2
    469e:	80 93 fe 02 	sts	0x02FE, r24
    46a2:	04 c0       	rjmp	.+8      	; 0x46ac <FSettingDec+0x33e>
	      break;
	 case sdExitSettingDecimal:
          stSettingDecimal=sdInitDisplay;
    46a4:	10 92 fe 02 	sts	0x02FE, r1
		  Result=MENU_DONE;
    46a8:	81 e0       	ldi	r24, 0x01	; 1
	      break;
    46aa:	01 c0       	rjmp	.+2      	; 0x46ae <FSettingDec+0x340>
char FSettingDec(){
static char stSettingDecimal=sdInitDisplay;
     char PDecimalConfig[4],Addr,KeyChar,Result;
	 char lcdteks[20];

     Result=MENU_NONE;
    46ac:	80 e0       	ldi	r24, 0x00	; 0
          stSettingDecimal=sdInitDisplay;
		  Result=MENU_DONE;
	      break;
	 }
    return Result;
}
    46ae:	64 96       	adiw	r28, 0x14	; 20
    46b0:	0f b6       	in	r0, 0x3f	; 63
    46b2:	f8 94       	cli
    46b4:	de bf       	out	0x3e, r29	; 62
    46b6:	0f be       	out	0x3f, r0	; 63
    46b8:	cd bf       	out	0x3d, r28	; 61
    46ba:	cf 91       	pop	r28
    46bc:	df 91       	pop	r29
    46be:	1f 91       	pop	r17
    46c0:	0f 91       	pop	r16
    46c2:	ff 90       	pop	r15
    46c4:	ef 90       	pop	r14
    46c6:	df 90       	pop	r13
    46c8:	cf 90       	pop	r12
    46ca:	08 95       	ret

000046cc <FSettingPumpPooling>:
	      break;
	 }
     return Result;
}

char FSettingPumpPooling(){//Parameter: PumpCount,
    46cc:	ef 92       	push	r14
    46ce:	ff 92       	push	r15
    46d0:	0f 93       	push	r16
    46d2:	1f 93       	push	r17
    46d4:	df 93       	push	r29
    46d6:	cf 93       	push	r28
    46d8:	cd b7       	in	r28, 0x3d	; 61
    46da:	de b7       	in	r29, 0x3e	; 62
    46dc:	6b 97       	sbiw	r28, 0x1b	; 27
    46de:	0f b6       	in	r0, 0x3f	; 63
    46e0:	f8 94       	cli
    46e2:	de bf       	out	0x3e, r29	; 62
    46e4:	0f be       	out	0x3f, r0	; 63
    46e6:	cd bf       	out	0x3d, r28	; 61
static char stPumpPooling=ppInitMenu;
	   char i,lcdteks[20];
	   char KeyChar,Addr=0,PPoolingSetting[6];
     
	 Result=MENU_NONE;
     switch(stPumpPooling){
    46e8:	80 91 fa 02 	lds	r24, 0x02FA
    46ec:	82 30       	cpi	r24, 0x02	; 2
    46ee:	09 f4       	brne	.+2      	; 0x46f2 <FSettingPumpPooling+0x26>
    46f0:	16 c1       	rjmp	.+556    	; 0x491e <FSettingPumpPooling+0x252>
    46f2:	83 30       	cpi	r24, 0x03	; 3
    46f4:	30 f4       	brcc	.+12     	; 0x4702 <FSettingPumpPooling+0x36>
    46f6:	88 23       	and	r24, r24
    46f8:	59 f0       	breq	.+22     	; 0x4710 <FSettingPumpPooling+0x44>
    46fa:	81 30       	cpi	r24, 0x01	; 1
    46fc:	09 f0       	breq	.+2      	; 0x4700 <FSettingPumpPooling+0x34>
    46fe:	ea c1       	rjmp	.+980    	; 0x4ad4 <FSettingPumpPooling+0x408>
    4700:	04 c1       	rjmp	.+520    	; 0x490a <FSettingPumpPooling+0x23e>
    4702:	83 30       	cpi	r24, 0x03	; 3
    4704:	09 f4       	brne	.+2      	; 0x4708 <FSettingPumpPooling+0x3c>
    4706:	d7 c1       	rjmp	.+942    	; 0x4ab6 <FSettingPumpPooling+0x3ea>
    4708:	84 30       	cpi	r24, 0x04	; 4
    470a:	09 f0       	breq	.+2      	; 0x470e <FSettingPumpPooling+0x42>
    470c:	e3 c1       	rjmp	.+966    	; 0x4ad4 <FSettingPumpPooling+0x408>
    470e:	de c1       	rjmp	.+956    	; 0x4acc <FSettingPumpPooling+0x400>
	 case ppInitMenu:
          lcd_clear();
    4710:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
    4714:	05 e4       	ldi	r16, 0x45	; 69
    4716:	11 e0       	ldi	r17, 0x01	; 1
    4718:	7e 01       	movw	r14, r28
    471a:	08 94       	sec
    471c:	e1 1c       	adc	r14, r1
    471e:	f1 1c       	adc	r15, r1
		  for (i=0;i<6;i++){
		      PPoolingSetting[i]=eeprom_read_byte(&DefPoolingPumpMax+i);
    4720:	c8 01       	movw	r24, r16
    4722:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
    4726:	d7 01       	movw	r26, r14
    4728:	8d 93       	st	X+, r24
    472a:	7d 01       	movw	r14, r26
    472c:	0f 5f       	subi	r16, 0xFF	; 255
    472e:	1f 4f       	sbci	r17, 0xFF	; 255
     
	 Result=MENU_NONE;
     switch(stPumpPooling){
	 case ppInitMenu:
          lcd_clear();
		  for (i=0;i<6;i++){
    4730:	b1 e0       	ldi	r27, 0x01	; 1
    4732:	0b 34       	cpi	r16, 0x4B	; 75
    4734:	1b 07       	cpc	r17, r27
    4736:	a1 f7       	brne	.-24     	; 0x4720 <FSettingPumpPooling+0x54>
		      PPoolingSetting[i]=eeprom_read_byte(&DefPoolingPumpMax+i);
		  }

		  sprintf_P(lcdteks,PSTR("1.MaxPump:%d"),PPoolingSetting[0]);lcd_print(1,1,lcdteks);
    4738:	00 d0       	rcall	.+0      	; 0x473a <FSettingPumpPooling+0x6e>
    473a:	00 d0       	rcall	.+0      	; 0x473c <FSettingPumpPooling+0x70>
    473c:	00 d0       	rcall	.+0      	; 0x473e <FSettingPumpPooling+0x72>
    473e:	ed b7       	in	r30, 0x3d	; 61
    4740:	fe b7       	in	r31, 0x3e	; 62
    4742:	31 96       	adiw	r30, 0x01	; 1
    4744:	8e 01       	movw	r16, r28
    4746:	09 5f       	subi	r16, 0xF9	; 249
    4748:	1f 4f       	sbci	r17, 0xFF	; 255
    474a:	ad b7       	in	r26, 0x3d	; 61
    474c:	be b7       	in	r27, 0x3e	; 62
    474e:	12 96       	adiw	r26, 0x02	; 2
    4750:	1c 93       	st	X, r17
    4752:	0e 93       	st	-X, r16
    4754:	11 97       	sbiw	r26, 0x01	; 1
    4756:	83 ef       	ldi	r24, 0xF3	; 243
    4758:	9e e0       	ldi	r25, 0x0E	; 14
    475a:	93 83       	std	Z+3, r25	; 0x03
    475c:	82 83       	std	Z+2, r24	; 0x02
    475e:	89 81       	ldd	r24, Y+1	; 0x01
    4760:	84 83       	std	Z+4, r24	; 0x04
    4762:	15 82       	std	Z+5, r1	; 0x05
    4764:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    4768:	ed b7       	in	r30, 0x3d	; 61
    476a:	fe b7       	in	r31, 0x3e	; 62
    476c:	36 96       	adiw	r30, 0x06	; 6
    476e:	0f b6       	in	r0, 0x3f	; 63
    4770:	f8 94       	cli
    4772:	fe bf       	out	0x3e, r31	; 62
    4774:	0f be       	out	0x3f, r0	; 63
    4776:	ed bf       	out	0x3d, r30	; 61
    4778:	81 e0       	ldi	r24, 0x01	; 1
    477a:	61 e0       	ldi	r22, 0x01	; 1
    477c:	a8 01       	movw	r20, r16
    477e:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
          sprintf_P(lcdteks,PSTR("2.nNoPump:%d"),PPoolingSetting[1]);lcd_print(2,1,lcdteks);
    4782:	00 d0       	rcall	.+0      	; 0x4784 <FSettingPumpPooling+0xb8>
    4784:	00 d0       	rcall	.+0      	; 0x4786 <FSettingPumpPooling+0xba>
    4786:	00 d0       	rcall	.+0      	; 0x4788 <FSettingPumpPooling+0xbc>
    4788:	ed b7       	in	r30, 0x3d	; 61
    478a:	fe b7       	in	r31, 0x3e	; 62
    478c:	31 96       	adiw	r30, 0x01	; 1
    478e:	ad b7       	in	r26, 0x3d	; 61
    4790:	be b7       	in	r27, 0x3e	; 62
    4792:	12 96       	adiw	r26, 0x02	; 2
    4794:	1c 93       	st	X, r17
    4796:	0e 93       	st	-X, r16
    4798:	11 97       	sbiw	r26, 0x01	; 1
    479a:	86 ee       	ldi	r24, 0xE6	; 230
    479c:	9e e0       	ldi	r25, 0x0E	; 14
    479e:	93 83       	std	Z+3, r25	; 0x03
    47a0:	82 83       	std	Z+2, r24	; 0x02
    47a2:	8a 81       	ldd	r24, Y+2	; 0x02
    47a4:	84 83       	std	Z+4, r24	; 0x04
    47a6:	15 82       	std	Z+5, r1	; 0x05
    47a8:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    47ac:	ed b7       	in	r30, 0x3d	; 61
    47ae:	fe b7       	in	r31, 0x3e	; 62
    47b0:	36 96       	adiw	r30, 0x06	; 6
    47b2:	0f b6       	in	r0, 0x3f	; 63
    47b4:	f8 94       	cli
    47b6:	fe bf       	out	0x3e, r31	; 62
    47b8:	0f be       	out	0x3f, r0	; 63
    47ba:	ed bf       	out	0x3d, r30	; 61
    47bc:	82 e0       	ldi	r24, 0x02	; 2
    47be:	61 e0       	ldi	r22, 0x01	; 1
    47c0:	a8 01       	movw	r20, r16
    47c2:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
          sprintf_P(lcdteks,PSTR("3.TrySend:%d"),PPoolingSetting[2]);lcd_print(3,1,lcdteks);
    47c6:	00 d0       	rcall	.+0      	; 0x47c8 <FSettingPumpPooling+0xfc>
    47c8:	00 d0       	rcall	.+0      	; 0x47ca <FSettingPumpPooling+0xfe>
    47ca:	00 d0       	rcall	.+0      	; 0x47cc <FSettingPumpPooling+0x100>
    47cc:	ed b7       	in	r30, 0x3d	; 61
    47ce:	fe b7       	in	r31, 0x3e	; 62
    47d0:	31 96       	adiw	r30, 0x01	; 1
    47d2:	ad b7       	in	r26, 0x3d	; 61
    47d4:	be b7       	in	r27, 0x3e	; 62
    47d6:	12 96       	adiw	r26, 0x02	; 2
    47d8:	1c 93       	st	X, r17
    47da:	0e 93       	st	-X, r16
    47dc:	11 97       	sbiw	r26, 0x01	; 1
    47de:	89 ed       	ldi	r24, 0xD9	; 217
    47e0:	9e e0       	ldi	r25, 0x0E	; 14
    47e2:	93 83       	std	Z+3, r25	; 0x03
    47e4:	82 83       	std	Z+2, r24	; 0x02
    47e6:	8b 81       	ldd	r24, Y+3	; 0x03
    47e8:	84 83       	std	Z+4, r24	; 0x04
    47ea:	15 82       	std	Z+5, r1	; 0x05
    47ec:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    47f0:	ed b7       	in	r30, 0x3d	; 61
    47f2:	fe b7       	in	r31, 0x3e	; 62
    47f4:	36 96       	adiw	r30, 0x06	; 6
    47f6:	0f b6       	in	r0, 0x3f	; 63
    47f8:	f8 94       	cli
    47fa:	fe bf       	out	0x3e, r31	; 62
    47fc:	0f be       	out	0x3f, r0	; 63
    47fe:	ed bf       	out	0x3d, r30	; 61
    4800:	83 e0       	ldi	r24, 0x03	; 3
    4802:	61 e0       	ldi	r22, 0x01	; 1
    4804:	a8 01       	movw	r20, r16
    4806:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
          sprintf_P(lcdteks,PSTR("4.TimPool:%d"),PPoolingSetting[3]);lcd_print(4,1,lcdteks);
    480a:	00 d0       	rcall	.+0      	; 0x480c <FSettingPumpPooling+0x140>
    480c:	00 d0       	rcall	.+0      	; 0x480e <FSettingPumpPooling+0x142>
    480e:	00 d0       	rcall	.+0      	; 0x4810 <FSettingPumpPooling+0x144>
    4810:	ed b7       	in	r30, 0x3d	; 61
    4812:	fe b7       	in	r31, 0x3e	; 62
    4814:	31 96       	adiw	r30, 0x01	; 1
    4816:	ad b7       	in	r26, 0x3d	; 61
    4818:	be b7       	in	r27, 0x3e	; 62
    481a:	12 96       	adiw	r26, 0x02	; 2
    481c:	1c 93       	st	X, r17
    481e:	0e 93       	st	-X, r16
    4820:	11 97       	sbiw	r26, 0x01	; 1
    4822:	8c ec       	ldi	r24, 0xCC	; 204
    4824:	9e e0       	ldi	r25, 0x0E	; 14
    4826:	93 83       	std	Z+3, r25	; 0x03
    4828:	82 83       	std	Z+2, r24	; 0x02
    482a:	8c 81       	ldd	r24, Y+4	; 0x04
    482c:	84 83       	std	Z+4, r24	; 0x04
    482e:	15 82       	std	Z+5, r1	; 0x05
    4830:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    4834:	ed b7       	in	r30, 0x3d	; 61
    4836:	fe b7       	in	r31, 0x3e	; 62
    4838:	36 96       	adiw	r30, 0x06	; 6
    483a:	0f b6       	in	r0, 0x3f	; 63
    483c:	f8 94       	cli
    483e:	fe bf       	out	0x3e, r31	; 62
    4840:	0f be       	out	0x3f, r0	; 63
    4842:	ed bf       	out	0x3d, r30	; 61
    4844:	84 e0       	ldi	r24, 0x04	; 4
    4846:	61 e0       	ldi	r22, 0x01	; 1
    4848:	a8 01       	movw	r20, r16
    484a:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
          sprintf_P(lcdteks,PSTR("5.Dly:%d"),PPoolingSetting[4]);lcd_print(1,13,lcdteks);
    484e:	00 d0       	rcall	.+0      	; 0x4850 <FSettingPumpPooling+0x184>
    4850:	00 d0       	rcall	.+0      	; 0x4852 <FSettingPumpPooling+0x186>
    4852:	00 d0       	rcall	.+0      	; 0x4854 <FSettingPumpPooling+0x188>
    4854:	ed b7       	in	r30, 0x3d	; 61
    4856:	fe b7       	in	r31, 0x3e	; 62
    4858:	31 96       	adiw	r30, 0x01	; 1
    485a:	ad b7       	in	r26, 0x3d	; 61
    485c:	be b7       	in	r27, 0x3e	; 62
    485e:	12 96       	adiw	r26, 0x02	; 2
    4860:	1c 93       	st	X, r17
    4862:	0e 93       	st	-X, r16
    4864:	11 97       	sbiw	r26, 0x01	; 1
    4866:	83 ec       	ldi	r24, 0xC3	; 195
    4868:	9e e0       	ldi	r25, 0x0E	; 14
    486a:	93 83       	std	Z+3, r25	; 0x03
    486c:	82 83       	std	Z+2, r24	; 0x02
    486e:	8d 81       	ldd	r24, Y+5	; 0x05
    4870:	84 83       	std	Z+4, r24	; 0x04
    4872:	15 82       	std	Z+5, r1	; 0x05
    4874:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    4878:	ed b7       	in	r30, 0x3d	; 61
    487a:	fe b7       	in	r31, 0x3e	; 62
    487c:	36 96       	adiw	r30, 0x06	; 6
    487e:	0f b6       	in	r0, 0x3f	; 63
    4880:	f8 94       	cli
    4882:	fe bf       	out	0x3e, r31	; 62
    4884:	0f be       	out	0x3f, r0	; 63
    4886:	ed bf       	out	0x3d, r30	; 61
    4888:	81 e0       	ldi	r24, 0x01	; 1
    488a:	6d e0       	ldi	r22, 0x0D	; 13
    488c:	a8 01       	movw	r20, r16
    488e:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
          sprintf_P(lcdteks,PSTR("6.Act:%d"),PPoolingSetting[5]);lcd_print(2,13,lcdteks);
    4892:	00 d0       	rcall	.+0      	; 0x4894 <FSettingPumpPooling+0x1c8>
    4894:	00 d0       	rcall	.+0      	; 0x4896 <FSettingPumpPooling+0x1ca>
    4896:	00 d0       	rcall	.+0      	; 0x4898 <FSettingPumpPooling+0x1cc>
    4898:	ed b7       	in	r30, 0x3d	; 61
    489a:	fe b7       	in	r31, 0x3e	; 62
    489c:	31 96       	adiw	r30, 0x01	; 1
    489e:	ad b7       	in	r26, 0x3d	; 61
    48a0:	be b7       	in	r27, 0x3e	; 62
    48a2:	12 96       	adiw	r26, 0x02	; 2
    48a4:	1c 93       	st	X, r17
    48a6:	0e 93       	st	-X, r16
    48a8:	11 97       	sbiw	r26, 0x01	; 1
    48aa:	8a eb       	ldi	r24, 0xBA	; 186
    48ac:	9e e0       	ldi	r25, 0x0E	; 14
    48ae:	93 83       	std	Z+3, r25	; 0x03
    48b0:	82 83       	std	Z+2, r24	; 0x02
    48b2:	8e 81       	ldd	r24, Y+6	; 0x06
    48b4:	84 83       	std	Z+4, r24	; 0x04
    48b6:	15 82       	std	Z+5, r1	; 0x05
    48b8:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    48bc:	ed b7       	in	r30, 0x3d	; 61
    48be:	fe b7       	in	r31, 0x3e	; 62
    48c0:	36 96       	adiw	r30, 0x06	; 6
    48c2:	0f b6       	in	r0, 0x3f	; 63
    48c4:	f8 94       	cli
    48c6:	fe bf       	out	0x3e, r31	; 62
    48c8:	0f be       	out	0x3f, r0	; 63
    48ca:	ed bf       	out	0x3d, r30	; 61
    48cc:	82 e0       	ldi	r24, 0x02	; 2
    48ce:	6d e0       	ldi	r22, 0x0D	; 13
    48d0:	a8 01       	movw	r20, r16
    48d2:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
          sprintf_P(lcdteks,PSTR("[*]Exit"));lcd_print(4,13,lcdteks);
    48d6:	00 d0       	rcall	.+0      	; 0x48d8 <FSettingPumpPooling+0x20c>
    48d8:	00 d0       	rcall	.+0      	; 0x48da <FSettingPumpPooling+0x20e>
    48da:	ad b7       	in	r26, 0x3d	; 61
    48dc:	be b7       	in	r27, 0x3e	; 62
    48de:	12 96       	adiw	r26, 0x02	; 2
    48e0:	1c 93       	st	X, r17
    48e2:	0e 93       	st	-X, r16
    48e4:	11 97       	sbiw	r26, 0x01	; 1
    48e6:	82 eb       	ldi	r24, 0xB2	; 178
    48e8:	9e e0       	ldi	r25, 0x0E	; 14
    48ea:	14 96       	adiw	r26, 0x04	; 4
    48ec:	9c 93       	st	X, r25
    48ee:	8e 93       	st	-X, r24
    48f0:	13 97       	sbiw	r26, 0x03	; 3
    48f2:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    48f6:	0f 90       	pop	r0
    48f8:	0f 90       	pop	r0
    48fa:	0f 90       	pop	r0
    48fc:	0f 90       	pop	r0
    48fe:	84 e0       	ldi	r24, 0x04	; 4
    4900:	6d e0       	ldi	r22, 0x0D	; 13
    4902:	a8 01       	movw	r20, r16
    4904:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
    4908:	08 c0       	rjmp	.+16     	; 0x491a <FSettingPumpPooling+0x24e>

          stPumpPooling=ppPoolingSettingInput;
	      break;
     case ppDisplaySequence:
          IsNewPoolingSequence=False;
    490a:	10 92 5f 02 	sts	0x025F, r1
		  DisplayStandaloneSequence(3,14,iSequencePooling);
    490e:	83 e0       	ldi	r24, 0x03	; 3
    4910:	6e e0       	ldi	r22, 0x0E	; 14
    4912:	40 91 5e 02 	lds	r20, 0x025E
    4916:	0e 94 db 18 	call	0x31b6	; 0x31b6 <DisplayStandaloneSequence>
          stPumpPooling=ppPoolingSettingInput;
    491a:	82 e0       	ldi	r24, 0x02	; 2
    491c:	6e c0       	rjmp	.+220    	; 0x49fa <FSettingPumpPooling+0x32e>
	      break;
     case ppPoolingSettingInput:
	      if(IsNewPoolingSequence==True)stPumpPooling=ppDisplaySequence;
    491e:	80 91 5f 02 	lds	r24, 0x025F
    4922:	81 30       	cpi	r24, 0x01	; 1
    4924:	11 f4       	brne	.+4      	; 0x492a <FSettingPumpPooling+0x25e>
    4926:	80 93 fa 02 	sts	0x02FA, r24

          KeyChar=_key_btn(_key_scan(1));
    492a:	81 e0       	ldi	r24, 0x01	; 1
    492c:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <_key_scan>
    4930:	0e 94 49 a3 	call	0x14692	; 0x14692 <_key_btn>
		  if ((KeyChar>='1')&&(KeyChar<='6')){
    4934:	28 2f       	mov	r18, r24
    4936:	21 53       	subi	r18, 0x31	; 49
    4938:	26 30       	cpi	r18, 0x06	; 6
    493a:	28 f4       	brcc	.+10     	; 0x4946 <FSettingPumpPooling+0x27a>
		      Addr=KeyChar-'1';
			  TimSend=0;
    493c:	10 92 7d 0d 	sts	0x0D7D, r1
			  IsStandaloneAcknoledge=False;
    4940:	10 92 60 02 	sts	0x0260, r1
    4944:	01 c0       	rjmp	.+2      	; 0x4948 <FSettingPumpPooling+0x27c>
//SC_SET_POOLING_NO_PUMP_COUNT,SC_SET_POOLING_MAX_PUMP,SC_SET_POOLING_SEND,

char Result=MENU_NONE;
static char stPumpPooling=ppInitMenu;
	   char i,lcdteks[20];
	   char KeyChar,Addr=0,PPoolingSetting[6];
    4946:	20 e0       	ldi	r18, 0x00	; 0
		  if ((KeyChar>='1')&&(KeyChar<='6')){
		      Addr=KeyChar-'1';
			  TimSend=0;
			  IsStandaloneAcknoledge=False;
          }
		  switch(KeyChar){
    4948:	83 33       	cpi	r24, 0x33	; 51
    494a:	09 f4       	brne	.+2      	; 0x494e <FSettingPumpPooling+0x282>
    494c:	59 c0       	rjmp	.+178    	; 0x4a00 <FSettingPumpPooling+0x334>
    494e:	84 33       	cpi	r24, 0x34	; 52
    4950:	40 f4       	brcc	.+16     	; 0x4962 <FSettingPumpPooling+0x296>
    4952:	81 33       	cpi	r24, 0x31	; 49
    4954:	81 f0       	breq	.+32     	; 0x4976 <FSettingPumpPooling+0x2aa>
    4956:	82 33       	cpi	r24, 0x32	; 50
    4958:	b0 f5       	brcc	.+108    	; 0x49c6 <FSettingPumpPooling+0x2fa>
    495a:	8a 32       	cpi	r24, 0x2A	; 42
    495c:	09 f0       	breq	.+2      	; 0x4960 <FSettingPumpPooling+0x294>
    495e:	ba c0       	rjmp	.+372    	; 0x4ad4 <FSettingPumpPooling+0x408>
    4960:	a8 c0       	rjmp	.+336    	; 0x4ab2 <FSettingPumpPooling+0x3e6>
    4962:	85 33       	cpi	r24, 0x35	; 53
    4964:	09 f4       	brne	.+2      	; 0x4968 <FSettingPumpPooling+0x29c>
    4966:	7b c0       	rjmp	.+246    	; 0x4a5e <FSettingPumpPooling+0x392>
    4968:	85 33       	cpi	r24, 0x35	; 53
    496a:	08 f4       	brcc	.+2      	; 0x496e <FSettingPumpPooling+0x2a2>
    496c:	6a c0       	rjmp	.+212    	; 0x4a42 <FSettingPumpPooling+0x376>
    496e:	86 33       	cpi	r24, 0x36	; 54
    4970:	09 f0       	breq	.+2      	; 0x4974 <FSettingPumpPooling+0x2a8>
    4972:	b0 c0       	rjmp	.+352    	; 0x4ad4 <FSettingPumpPooling+0x408>
    4974:	82 c0       	rjmp	.+260    	; 0x4a7a <FSettingPumpPooling+0x3ae>
		  case '1'://MaxPump
		       PPoolingSetting[Addr]=((PPoolingSetting[Addr]+1)%17);
    4976:	02 2f       	mov	r16, r18
    4978:	10 e0       	ldi	r17, 0x00	; 0
    497a:	fe 01       	movw	r30, r28
    497c:	31 96       	adiw	r30, 0x01	; 1
    497e:	e0 0f       	add	r30, r16
    4980:	f1 1f       	adc	r31, r17
    4982:	80 81       	ld	r24, Z
    4984:	90 e0       	ldi	r25, 0x00	; 0
    4986:	01 96       	adiw	r24, 0x01	; 1
    4988:	61 e1       	ldi	r22, 0x11	; 17
    498a:	70 e0       	ldi	r23, 0x00	; 0
    498c:	0e 94 ab a7 	call	0x14f56	; 0x14f56 <__divmodhi4>
    4990:	80 83       	st	Z, r24
			   if (PPoolingSetting[Addr]==0)PPoolingSetting[Addr]=1;
    4992:	00 97       	sbiw	r24, 0x00	; 0
    4994:	11 f4       	brne	.+4      	; 0x499a <FSettingPumpPooling+0x2ce>
    4996:	81 e0       	ldi	r24, 0x01	; 1
    4998:	80 83       	st	Z, r24
			   //SendSlaveCommand(SC_SET_POOLING_MAX_PUMP,PPoolingSetting[Addr]);
			   SendPoolingCommand(SC_SET_POOLING_MAX_PUMP,PPoolingSetting[Addr]);
    499a:	fe 01       	movw	r30, r28
    499c:	e0 0f       	add	r30, r16
    499e:	f1 1f       	adc	r31, r17
    49a0:	01 81       	ldd	r16, Z+1	; 0x01
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
    49a2:	85 e1       	ldi	r24, 0x15	; 21
    49a4:	80 93 8b 06 	sts	0x068B, r24
	 PoolMsg=plMsg;
    49a8:	00 93 cc 0c 	sts	0x0CCC, r16
     IsControlPooling=True;
    49ac:	81 e0       	ldi	r24, 0x01	; 1
    49ae:	80 93 62 02 	sts	0x0262, r24
		       PPoolingSetting[Addr]=((PPoolingSetting[Addr]+1)%17);
			   if (PPoolingSetting[Addr]==0)PPoolingSetting[Addr]=1;
			   //SendSlaveCommand(SC_SET_POOLING_MAX_PUMP,PPoolingSetting[Addr]);
			   SendPoolingCommand(SC_SET_POOLING_MAX_PUMP,PPoolingSetting[Addr]);

			   eeprom_write_byte(&DefPoolingPumpMax+Addr,PPoolingSetting[Addr]);
    49b2:	82 2f       	mov	r24, r18
    49b4:	90 e0       	ldi	r25, 0x00	; 0
    49b6:	8b 5b       	subi	r24, 0xBB	; 187
    49b8:	9e 4f       	sbci	r25, 0xFE	; 254
    49ba:	60 2f       	mov	r22, r16
    49bc:	0e 94 78 aa 	call	0x154f0	; 0x154f0 <__eewr_byte_m128>
			   PumpCountMax=PPoolingSetting[Addr];
    49c0:	00 93 3a 02 	sts	0x023A, r16
    49c4:	19 c0       	rjmp	.+50     	; 0x49f8 <FSettingPumpPooling+0x32c>
			   //stPumpPooling=ppInitMenu;
			   stPumpPooling=ppWaitPoolingRespond;
		       break;
		  case '2'://NoPump
		       PPoolingSetting[Addr]=((PPoolingSetting[Addr]+1)%21);
    49c6:	30 e0       	ldi	r19, 0x00	; 0
    49c8:	fe 01       	movw	r30, r28
    49ca:	e2 0f       	add	r30, r18
    49cc:	f3 1f       	adc	r31, r19
    49ce:	81 81       	ldd	r24, Z+1	; 0x01
    49d0:	90 e0       	ldi	r25, 0x00	; 0
    49d2:	01 96       	adiw	r24, 0x01	; 1
    49d4:	65 e1       	ldi	r22, 0x15	; 21
    49d6:	70 e0       	ldi	r23, 0x00	; 0
    49d8:	0e 94 ab a7 	call	0x14f56	; 0x14f56 <__divmodhi4>
    49dc:	68 2f       	mov	r22, r24
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
    49de:	84 e1       	ldi	r24, 0x14	; 20
    49e0:	80 93 8b 06 	sts	0x068B, r24
	 PoolMsg=plMsg;
    49e4:	60 93 cc 0c 	sts	0x0CCC, r22
     IsControlPooling=True;
    49e8:	81 e0       	ldi	r24, 0x01	; 1
    49ea:	80 93 62 02 	sts	0x0262, r24
		  case '2'://NoPump
		       PPoolingSetting[Addr]=((PPoolingSetting[Addr]+1)%21);
			   //SendSlaveCommand(SC_SET_POOLING_NO_PUMP_COUNT,PPoolingSetting[Addr]);
			   SendPoolingCommand(SC_SET_POOLING_NO_PUMP_COUNT,PPoolingSetting[Addr]);

			   eeprom_write_byte(&DefPoolingPumpMax+Addr,PPoolingSetting[Addr]);
    49ee:	c9 01       	movw	r24, r18
    49f0:	8b 5b       	subi	r24, 0xBB	; 187
    49f2:	9e 4f       	sbci	r25, 0xFE	; 254
    49f4:	0e 94 78 aa 	call	0x154f0	; 0x154f0 <__eewr_byte_m128>
			   //stPumpPooling=ppInitMenu;
			   stPumpPooling=ppWaitPoolingRespond;
    49f8:	83 e0       	ldi	r24, 0x03	; 3
    49fa:	80 93 fa 02 	sts	0x02FA, r24
    49fe:	6a c0       	rjmp	.+212    	; 0x4ad4 <FSettingPumpPooling+0x408>
		       break;
		  case '3'://TrySend
		       PPoolingSetting[Addr]=((PPoolingSetting[Addr]+1)%21);
    4a00:	02 2f       	mov	r16, r18
    4a02:	10 e0       	ldi	r17, 0x00	; 0
    4a04:	fe 01       	movw	r30, r28
    4a06:	31 96       	adiw	r30, 0x01	; 1
    4a08:	e0 0f       	add	r30, r16
    4a0a:	f1 1f       	adc	r31, r17
    4a0c:	80 81       	ld	r24, Z
    4a0e:	90 e0       	ldi	r25, 0x00	; 0
    4a10:	01 96       	adiw	r24, 0x01	; 1
    4a12:	65 e1       	ldi	r22, 0x15	; 21
    4a14:	70 e0       	ldi	r23, 0x00	; 0
    4a16:	0e 94 ab a7 	call	0x14f56	; 0x14f56 <__divmodhi4>
    4a1a:	80 83       	st	Z, r24
			   if (PPoolingSetting[Addr]==0)PPoolingSetting[Addr]=1;
    4a1c:	00 97       	sbiw	r24, 0x00	; 0
    4a1e:	11 f4       	brne	.+4      	; 0x4a24 <FSettingPumpPooling+0x358>
    4a20:	81 e0       	ldi	r24, 0x01	; 1
    4a22:	80 83       	st	Z, r24
			   //SendSlaveCommand(SC_SET_POOLING_SEND,PPoolingSetting[Addr]);
			   SendPoolingCommand(SC_SET_POOLING_SEND,PPoolingSetting[Addr]);
    4a24:	fe 01       	movw	r30, r28
    4a26:	e0 0f       	add	r30, r16
    4a28:	f1 1f       	adc	r31, r17
    4a2a:	61 81       	ldd	r22, Z+1	; 0x01
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
    4a2c:	86 e1       	ldi	r24, 0x16	; 22
    4a2e:	80 93 8b 06 	sts	0x068B, r24
	 PoolMsg=plMsg;
    4a32:	60 93 cc 0c 	sts	0x0CCC, r22
     IsControlPooling=True;
    4a36:	81 e0       	ldi	r24, 0x01	; 1
    4a38:	80 93 62 02 	sts	0x0262, r24
		       PPoolingSetting[Addr]=((PPoolingSetting[Addr]+1)%21);
			   if (PPoolingSetting[Addr]==0)PPoolingSetting[Addr]=1;
			   //SendSlaveCommand(SC_SET_POOLING_SEND,PPoolingSetting[Addr]);
			   SendPoolingCommand(SC_SET_POOLING_SEND,PPoolingSetting[Addr]);

			   eeprom_write_byte(&DefPoolingPumpMax+Addr,PPoolingSetting[Addr]);
    4a3c:	82 2f       	mov	r24, r18
    4a3e:	90 e0       	ldi	r25, 0x00	; 0
    4a40:	d7 cf       	rjmp	.-82     	; 0x49f0 <FSettingPumpPooling+0x324>
			   //stPumpPooling=ppInitMenu;
			   stPumpPooling=ppWaitPoolingRespond;
		       break;
		  case '4'://TimPool
		       PPoolingSetting[Addr]=((PPoolingSetting[Addr]+1)%21);
    4a42:	30 e0       	ldi	r19, 0x00	; 0
    4a44:	fe 01       	movw	r30, r28
    4a46:	e2 0f       	add	r30, r18
    4a48:	f3 1f       	adc	r31, r19
    4a4a:	81 81       	ldd	r24, Z+1	; 0x01
    4a4c:	90 e0       	ldi	r25, 0x00	; 0
    4a4e:	01 96       	adiw	r24, 0x01	; 1
    4a50:	65 e1       	ldi	r22, 0x15	; 21
    4a52:	70 e0       	ldi	r23, 0x00	; 0
    4a54:	0e 94 ab a7 	call	0x14f56	; 0x14f56 <__divmodhi4>
    4a58:	68 2f       	mov	r22, r24
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
    4a5a:	87 e1       	ldi	r24, 0x17	; 23
    4a5c:	c1 cf       	rjmp	.-126    	; 0x49e0 <FSettingPumpPooling+0x314>
			   eeprom_write_byte(&DefPoolingPumpMax+Addr,PPoolingSetting[Addr]);
			   //stPumpPooling=ppInitMenu;
			   stPumpPooling=ppWaitPoolingRespond;
		       break;
		  case '5'://DelayNextPump
		       PPoolingSetting[Addr]=((PPoolingSetting[Addr]+1)%41); 
    4a5e:	30 e0       	ldi	r19, 0x00	; 0
    4a60:	fe 01       	movw	r30, r28
    4a62:	e2 0f       	add	r30, r18
    4a64:	f3 1f       	adc	r31, r19
    4a66:	81 81       	ldd	r24, Z+1	; 0x01
    4a68:	90 e0       	ldi	r25, 0x00	; 0
    4a6a:	01 96       	adiw	r24, 0x01	; 1
    4a6c:	69 e2       	ldi	r22, 0x29	; 41
    4a6e:	70 e0       	ldi	r23, 0x00	; 0
    4a70:	0e 94 ab a7 	call	0x14f56	; 0x14f56 <__divmodhi4>
    4a74:	68 2f       	mov	r22, r24
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
    4a76:	88 e1       	ldi	r24, 0x18	; 24
    4a78:	b3 cf       	rjmp	.-154    	; 0x49e0 <FSettingPumpPooling+0x314>
			   eeprom_write_byte(&DefPoolingPumpMax+Addr,PPoolingSetting[Addr]);
			   //stPumpPooling=ppInitMenu;
               stPumpPooling=ppWaitPoolingRespond;
		       break;
		  case '6'://ActivePump
		       PPoolingSetting[Addr]=((PPoolingSetting[Addr]+1)%(1+eeprom_read_byte(&DefPoolingPumpMax))); 			       
    4a7a:	85 e4       	ldi	r24, 0x45	; 69
    4a7c:	91 e0       	ldi	r25, 0x01	; 1
    4a7e:	2b 8f       	std	Y+27, r18	; 0x1b
    4a80:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
			   eeprom_write_byte(&DefPoolingPumpMax+Addr,PPoolingSetting[Addr]);
    4a84:	2b 8d       	ldd	r18, Y+27	; 0x1b
    4a86:	30 e0       	ldi	r19, 0x00	; 0
			   eeprom_write_byte(&DefPoolingPumpMax+Addr,PPoolingSetting[Addr]);
			   //stPumpPooling=ppInitMenu;
               stPumpPooling=ppWaitPoolingRespond;
		       break;
		  case '6'://ActivePump
		       PPoolingSetting[Addr]=((PPoolingSetting[Addr]+1)%(1+eeprom_read_byte(&DefPoolingPumpMax))); 			       
    4a88:	fe 01       	movw	r30, r28
    4a8a:	e2 0f       	add	r30, r18
    4a8c:	f3 1f       	adc	r31, r19
    4a8e:	41 81       	ldd	r20, Z+1	; 0x01
    4a90:	50 e0       	ldi	r21, 0x00	; 0
    4a92:	4f 5f       	subi	r20, 0xFF	; 255
    4a94:	5f 4f       	sbci	r21, 0xFF	; 255
    4a96:	68 2f       	mov	r22, r24
    4a98:	70 e0       	ldi	r23, 0x00	; 0
    4a9a:	6f 5f       	subi	r22, 0xFF	; 255
    4a9c:	7f 4f       	sbci	r23, 0xFF	; 255
    4a9e:	ca 01       	movw	r24, r20
    4aa0:	0e 94 ab a7 	call	0x14f56	; 0x14f56 <__divmodhi4>
    4aa4:	68 2f       	mov	r22, r24
			   eeprom_write_byte(&DefPoolingPumpMax+Addr,PPoolingSetting[Addr]);
    4aa6:	c9 01       	movw	r24, r18
    4aa8:	8b 5b       	subi	r24, 0xBB	; 187
    4aaa:	9e 4f       	sbci	r25, 0xFE	; 254
    4aac:	0e 94 78 aa 	call	0x154f0	; 0x154f0 <__eewr_byte_m128>
    4ab0:	0a c0       	rjmp	.+20     	; 0x4ac6 <FSettingPumpPooling+0x3fa>
			   stPumpPooling=ppInitMenu;
		       break;
		  case '*'://Exit
		       stPumpPooling=ppExitSettingPooling;		            
    4ab2:	84 e0       	ldi	r24, 0x04	; 4
    4ab4:	a2 cf       	rjmp	.-188    	; 0x49fa <FSettingPumpPooling+0x32e>
		       break;
		  }  
	      break;
     case ppWaitPoolingRespond:	    
	      if ((IsStandaloneAcknoledge==True)||(TimSend>5))stPumpPooling=ppInitMenu;
    4ab6:	80 91 60 02 	lds	r24, 0x0260
    4aba:	81 30       	cpi	r24, 0x01	; 1
    4abc:	21 f0       	breq	.+8      	; 0x4ac6 <FSettingPumpPooling+0x3fa>
    4abe:	80 91 7d 0d 	lds	r24, 0x0D7D
    4ac2:	86 30       	cpi	r24, 0x06	; 6
    4ac4:	38 f0       	brcs	.+14     	; 0x4ad4 <FSettingPumpPooling+0x408>
    4ac6:	10 92 fa 02 	sts	0x02FA, r1
    4aca:	04 c0       	rjmp	.+8      	; 0x4ad4 <FSettingPumpPooling+0x408>
	      break;
     case ppExitSettingPooling:
          stPumpPooling=ppInitMenu;
    4acc:	10 92 fa 02 	sts	0x02FA, r1
	      Result=MENU_DONE;
    4ad0:	81 e0       	ldi	r24, 0x01	; 1
	      break;
    4ad2:	01 c0       	rjmp	.+2      	; 0x4ad6 <FSettingPumpPooling+0x40a>
char Result=MENU_NONE;
static char stPumpPooling=ppInitMenu;
	   char i,lcdteks[20];
	   char KeyChar,Addr=0,PPoolingSetting[6];
     
	 Result=MENU_NONE;
    4ad4:	80 e0       	ldi	r24, 0x00	; 0
          stPumpPooling=ppInitMenu;
	      Result=MENU_DONE;
	      break;
    }
return Result;
}
    4ad6:	6b 96       	adiw	r28, 0x1b	; 27
    4ad8:	0f b6       	in	r0, 0x3f	; 63
    4ada:	f8 94       	cli
    4adc:	de bf       	out	0x3e, r29	; 62
    4ade:	0f be       	out	0x3f, r0	; 63
    4ae0:	cd bf       	out	0x3d, r28	; 61
    4ae2:	cf 91       	pop	r28
    4ae4:	df 91       	pop	r29
    4ae6:	1f 91       	pop	r17
    4ae8:	0f 91       	pop	r16
    4aea:	ff 90       	pop	r15
    4aec:	ef 90       	pop	r14
    4aee:	08 95       	ret

00004af0 <FSettingSystem>:
	      break;
	 }
     return Result;
}

char FSettingSystem(){
    4af0:	af 92       	push	r10
    4af2:	bf 92       	push	r11
    4af4:	cf 92       	push	r12
    4af6:	df 92       	push	r13
    4af8:	ef 92       	push	r14
    4afa:	ff 92       	push	r15
    4afc:	0f 93       	push	r16
    4afe:	1f 93       	push	r17
    4b00:	df 93       	push	r29
    4b02:	cf 93       	push	r28
    4b04:	cd b7       	in	r28, 0x3d	; 61
    4b06:	de b7       	in	r29, 0x3e	; 62
    4b08:	65 97       	sbiw	r28, 0x15	; 21
    4b0a:	0f b6       	in	r0, 0x3f	; 63
    4b0c:	f8 94       	cli
    4b0e:	de bf       	out	0x3e, r29	; 62
    4b10:	0f be       	out	0x3f, r0	; 63
    4b12:	cd bf       	out	0x3d, r28	; 61
       char SubMenu,Result=MENU_NONE;
	   char HGMode;
       char lcdteks[20];
	   int bValue;

     switch(stSettingSytem){
    4b14:	80 91 fb 02 	lds	r24, 0x02FB
    4b18:	82 30       	cpi	r24, 0x02	; 2
    4b1a:	09 f4       	brne	.+2      	; 0x4b1e <FSettingSystem+0x2e>
    4b1c:	bf c0       	rjmp	.+382    	; 0x4c9c <FSettingSystem+0x1ac>
    4b1e:	83 30       	cpi	r24, 0x03	; 3
    4b20:	30 f4       	brcc	.+12     	; 0x4b2e <FSettingSystem+0x3e>
    4b22:	88 23       	and	r24, r24
    4b24:	71 f0       	breq	.+28     	; 0x4b42 <FSettingSystem+0x52>
    4b26:	81 30       	cpi	r24, 0x01	; 1
    4b28:	09 f0       	breq	.+2      	; 0x4b2c <FSettingSystem+0x3c>
    4b2a:	57 c1       	rjmp	.+686    	; 0x4dda <FSettingSystem+0x2ea>
    4b2c:	7f c0       	rjmp	.+254    	; 0x4c2c <FSettingSystem+0x13c>
    4b2e:	84 30       	cpi	r24, 0x04	; 4
    4b30:	09 f4       	brne	.+2      	; 0x4b34 <FSettingSystem+0x44>
    4b32:	48 c1       	rjmp	.+656    	; 0x4dc4 <FSettingSystem+0x2d4>
    4b34:	84 30       	cpi	r24, 0x04	; 4
    4b36:	08 f4       	brcc	.+2      	; 0x4b3a <FSettingSystem+0x4a>
    4b38:	17 c1       	rjmp	.+558    	; 0x4d68 <FSettingSystem+0x278>
    4b3a:	85 30       	cpi	r24, 0x05	; 5
    4b3c:	09 f0       	breq	.+2      	; 0x4b40 <FSettingSystem+0x50>
    4b3e:	4d c1       	rjmp	.+666    	; 0x4dda <FSettingSystem+0x2ea>
    4b40:	48 c1       	rjmp	.+656    	; 0x4dd2 <FSettingSystem+0x2e2>
	 case ssInitSettingSystem:
	      IFType=eeprom_read_byte(&DefInitIFT);
    4b42:	87 e3       	ldi	r24, 0x37	; 55
    4b44:	91 e0       	ldi	r25, 0x01	; 1
    4b46:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
    4b4a:	18 2f       	mov	r17, r24
    4b4c:	80 93 00 01 	sts	0x0100, r24
		  HGMode=eeprom_read_byte(&DefHGMode);
    4b50:	83 ec       	ldi	r24, 0xC3	; 195
    4b52:	93 e0       	ldi	r25, 0x03	; 3
    4b54:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
    4b58:	08 2f       	mov	r16, r24

	      if (IFType==IT_NONE)sprintf_P(lcdteks,PSTR("1.Mode:None"));
    4b5a:	11 23       	and	r17, r17
    4b5c:	89 f4       	brne	.+34     	; 0x4b80 <FSettingSystem+0x90>
    4b5e:	00 d0       	rcall	.+0      	; 0x4b60 <FSettingSystem+0x70>
    4b60:	00 d0       	rcall	.+0      	; 0x4b62 <FSettingSystem+0x72>
    4b62:	ce 01       	movw	r24, r28
    4b64:	01 96       	adiw	r24, 0x01	; 1
    4b66:	ad b7       	in	r26, 0x3d	; 61
    4b68:	be b7       	in	r27, 0x3e	; 62
    4b6a:	12 96       	adiw	r26, 0x02	; 2
    4b6c:	9c 93       	st	X, r25
    4b6e:	8e 93       	st	-X, r24
    4b70:	11 97       	sbiw	r26, 0x01	; 1
    4b72:	84 e8       	ldi	r24, 0x84	; 132
    4b74:	9f e0       	ldi	r25, 0x0F	; 15
    4b76:	14 96       	adiw	r26, 0x04	; 4
    4b78:	9c 93       	st	X, r25
    4b7a:	8e 93       	st	-X, r24
    4b7c:	13 97       	sbiw	r26, 0x03	; 3
    4b7e:	23 c0       	rjmp	.+70     	; 0x4bc6 <FSettingSystem+0xd6>
		  else
	      if (IFType==IT_SLAVE)sprintf_P(lcdteks,PSTR("1.Mode:Slave"));
    4b80:	11 30       	cpi	r17, 0x01	; 1
    4b82:	71 f4       	brne	.+28     	; 0x4ba0 <FSettingSystem+0xb0>
    4b84:	00 d0       	rcall	.+0      	; 0x4b86 <FSettingSystem+0x96>
    4b86:	00 d0       	rcall	.+0      	; 0x4b88 <FSettingSystem+0x98>
    4b88:	9e 01       	movw	r18, r28
    4b8a:	2f 5f       	subi	r18, 0xFF	; 255
    4b8c:	3f 4f       	sbci	r19, 0xFF	; 255
    4b8e:	ed b7       	in	r30, 0x3d	; 61
    4b90:	fe b7       	in	r31, 0x3e	; 62
    4b92:	32 83       	std	Z+2, r19	; 0x02
    4b94:	21 83       	std	Z+1, r18	; 0x01
    4b96:	27 e7       	ldi	r18, 0x77	; 119
    4b98:	3f e0       	ldi	r19, 0x0F	; 15
    4b9a:	34 83       	std	Z+4, r19	; 0x04
    4b9c:	23 83       	std	Z+3, r18	; 0x03
    4b9e:	13 c0       	rjmp	.+38     	; 0x4bc6 <FSettingSystem+0xd6>
		  else
	      if (IFType==IT_STANDALONE)sprintf_P(lcdteks,PSTR("1.Mode:Standalone"));
    4ba0:	12 30       	cpi	r17, 0x02	; 2
    4ba2:	b9 f4       	brne	.+46     	; 0x4bd2 <FSettingSystem+0xe2>
    4ba4:	00 d0       	rcall	.+0      	; 0x4ba6 <FSettingSystem+0xb6>
    4ba6:	00 d0       	rcall	.+0      	; 0x4ba8 <FSettingSystem+0xb8>
    4ba8:	9e 01       	movw	r18, r28
    4baa:	2f 5f       	subi	r18, 0xFF	; 255
    4bac:	3f 4f       	sbci	r19, 0xFF	; 255
    4bae:	ad b7       	in	r26, 0x3d	; 61
    4bb0:	be b7       	in	r27, 0x3e	; 62
    4bb2:	12 96       	adiw	r26, 0x02	; 2
    4bb4:	3c 93       	st	X, r19
    4bb6:	2e 93       	st	-X, r18
    4bb8:	11 97       	sbiw	r26, 0x01	; 1
    4bba:	25 e6       	ldi	r18, 0x65	; 101
    4bbc:	3f e0       	ldi	r19, 0x0F	; 15
    4bbe:	14 96       	adiw	r26, 0x04	; 4
    4bc0:	3c 93       	st	X, r19
    4bc2:	2e 93       	st	-X, r18
    4bc4:	13 97       	sbiw	r26, 0x03	; 3
    4bc6:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    4bca:	0f 90       	pop	r0
    4bcc:	0f 90       	pop	r0
    4bce:	0f 90       	pop	r0
    4bd0:	0f 90       	pop	r0

	      lcd_clear();
    4bd2:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
		  lcd_print(1,1,lcdteks);
    4bd6:	81 e0       	ldi	r24, 0x01	; 1
    4bd8:	61 e0       	ldi	r22, 0x01	; 1
    4bda:	ae 01       	movw	r20, r28
    4bdc:	4f 5f       	subi	r20, 0xFF	; 255
    4bde:	5f 4f       	sbci	r21, 0xFF	; 255
    4be0:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
		  lcd_printf(2,1,PSTR("2.Baudrate"));
    4be4:	82 e0       	ldi	r24, 0x02	; 2
    4be6:	61 e0       	ldi	r22, 0x01	; 1
    4be8:	4a e5       	ldi	r20, 0x5A	; 90
    4bea:	5f e0       	ldi	r21, 0x0F	; 15
    4bec:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>

		  if (HGMode==HM_TTL)lcd_printf(3,1,PSTR("3.COM3:TTL"));
    4bf0:	00 23       	and	r16, r16
    4bf2:	29 f4       	brne	.+10     	; 0x4bfe <FSettingSystem+0x10e>
    4bf4:	83 e0       	ldi	r24, 0x03	; 3
    4bf6:	61 e0       	ldi	r22, 0x01	; 1
    4bf8:	4f e4       	ldi	r20, 0x4F	; 79
    4bfa:	5f e0       	ldi	r21, 0x0F	; 15
    4bfc:	0d c0       	rjmp	.+26     	; 0x4c18 <FSettingSystem+0x128>
		  else
		  if (HGMode==HM_232)lcd_printf(3,1,PSTR("3.COM3:232"));
    4bfe:	01 30       	cpi	r16, 0x01	; 1
    4c00:	29 f4       	brne	.+10     	; 0x4c0c <FSettingSystem+0x11c>
    4c02:	83 e0       	ldi	r24, 0x03	; 3
    4c04:	61 e0       	ldi	r22, 0x01	; 1
    4c06:	44 e4       	ldi	r20, 0x44	; 68
    4c08:	5f e0       	ldi	r21, 0x0F	; 15
    4c0a:	06 c0       	rjmp	.+12     	; 0x4c18 <FSettingSystem+0x128>
		  else
		  if (HGMode==HM_485)lcd_printf(3,1,PSTR("3.COM3:485"));		  
    4c0c:	02 30       	cpi	r16, 0x02	; 2
    4c0e:	31 f4       	brne	.+12     	; 0x4c1c <FSettingSystem+0x12c>
    4c10:	83 e0       	ldi	r24, 0x03	; 3
    4c12:	61 e0       	ldi	r22, 0x01	; 1
    4c14:	49 e3       	ldi	r20, 0x39	; 57
    4c16:	5f e0       	ldi	r21, 0x0F	; 15
    4c18:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  lcd_printf(4,1,PSTR("[*]Back      "));
    4c1c:	84 e0       	ldi	r24, 0x04	; 4
    4c1e:	61 e0       	ldi	r22, 0x01	; 1
    4c20:	4b e2       	ldi	r20, 0x2B	; 43
    4c22:	5f e0       	ldi	r21, 0x0F	; 15
    4c24:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  stSettingSytem=ssMenuSelect;
    4c28:	81 e0       	ldi	r24, 0x01	; 1
    4c2a:	c5 c0       	rjmp	.+394    	; 0x4db6 <FSettingSystem+0x2c6>
	      break;
     case ssMenuSelect:
          KeyPressed=_key_scan(1);
    4c2c:	81 e0       	ldi	r24, 0x01	; 1
    4c2e:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
    4c32:	0e 94 49 a3 	call	0x14692	; 0x14692 <_key_btn>
		  if (KeyChar=='1'){
    4c36:	81 33       	cpi	r24, 0x31	; 49
    4c38:	99 f4       	brne	.+38     	; 0x4c60 <FSettingSystem+0x170>
		      IFType=((IFType+1)%3);
    4c3a:	80 91 00 01 	lds	r24, 0x0100
    4c3e:	90 e0       	ldi	r25, 0x00	; 0
    4c40:	01 96       	adiw	r24, 0x01	; 1
    4c42:	63 e0       	ldi	r22, 0x03	; 3
    4c44:	70 e0       	ldi	r23, 0x00	; 0
    4c46:	0e 94 ab a7 	call	0x14f56	; 0x14f56 <__divmodhi4>
    4c4a:	80 93 00 01 	sts	0x0100, r24
			  SendSlaveCommand(IFType,DispenserBrand);
    4c4e:	60 91 3c 02 	lds	r22, 0x023C
    4c52:	0e 94 29 19 	call	0x3252	; 0x3252 <SendSlaveCommand>
			  eeprom_write_byte(&DefInitIFT,IFType);
    4c56:	87 e3       	ldi	r24, 0x37	; 55
    4c58:	91 e0       	ldi	r25, 0x01	; 1
    4c5a:	60 91 00 01 	lds	r22, 0x0100
    4c5e:	17 c0       	rjmp	.+46     	; 0x4c8e <FSettingSystem+0x19e>
			  stSettingSytem=ssInitSettingSystem;
		  }
		  else
		  if (KeyChar=='2'){
    4c60:	82 33       	cpi	r24, 0x32	; 50
    4c62:	09 f4       	brne	.+2      	; 0x4c66 <FSettingSystem+0x176>
    4c64:	a7 c0       	rjmp	.+334    	; 0x4db4 <FSettingSystem+0x2c4>
		      stSettingSytem=ssComSettings;
		  }
		  else
		  if (KeyChar=='3'){
    4c66:	83 33       	cpi	r24, 0x33	; 51
    4c68:	a9 f4       	brne	.+42     	; 0x4c94 <FSettingSystem+0x1a4>
		      HGMode=eeprom_read_byte(&DefHGMode);
    4c6a:	83 ec       	ldi	r24, 0xC3	; 195
    4c6c:	93 e0       	ldi	r25, 0x03	; 3
    4c6e:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
		      HGMode=((HGMode+1)%3);
    4c72:	90 e0       	ldi	r25, 0x00	; 0
    4c74:	01 96       	adiw	r24, 0x01	; 1
    4c76:	63 e0       	ldi	r22, 0x03	; 3
    4c78:	70 e0       	ldi	r23, 0x00	; 0
    4c7a:	0e 94 ab a7 	call	0x14f56	; 0x14f56 <__divmodhi4>
    4c7e:	08 2f       	mov	r16, r24
			  SendSlaveCommand(SC_HGM_MODE,HGMode);
    4c80:	81 e2       	ldi	r24, 0x21	; 33
    4c82:	60 2f       	mov	r22, r16
    4c84:	0e 94 29 19 	call	0x3252	; 0x3252 <SendSlaveCommand>
			  eeprom_write_byte(&DefHGMode,HGMode);
    4c88:	83 ec       	ldi	r24, 0xC3	; 195
    4c8a:	93 e0       	ldi	r25, 0x03	; 3
    4c8c:	60 2f       	mov	r22, r16
    4c8e:	0e 94 78 aa 	call	0x154f0	; 0x154f0 <__eewr_byte_m128>
    4c92:	9c c0       	rjmp	.+312    	; 0x4dcc <FSettingSystem+0x2dc>
			  stSettingSytem=ssInitSettingSystem;
		  }
		  //else
		  if (KeyChar=='*'){
    4c94:	8a 32       	cpi	r24, 0x2A	; 42
    4c96:	09 f4       	brne	.+2      	; 0x4c9a <FSettingSystem+0x1aa>
    4c98:	93 c0       	rjmp	.+294    	; 0x4dc0 <FSettingSystem+0x2d0>
    4c9a:	9f c0       	rjmp	.+318    	; 0x4dda <FSettingSystem+0x2ea>
		      stSettingSytem=ssExitSystemSettings;
		  }		  
		  break;
	 case ssComSettings:
	      lcd_clear();
    4c9c:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
		  lcd_printf(1,1,PSTR("     -Baudrate-     "));
    4ca0:	81 e0       	ldi	r24, 0x01	; 1
    4ca2:	61 e0       	ldi	r22, 0x01	; 1
    4ca4:	46 e1       	ldi	r20, 0x16	; 22
    4ca6:	5f e0       	ldi	r21, 0x0F	; 15
    4ca8:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
    4cac:	00 e0       	ldi	r16, 0x00	; 0
    4cae:	10 e0       	ldi	r17, 0x00	; 0

		  for (i=0;i<4;i++){
		       bValue=GetBaudrate(eeprom_read_byte(&DefBaudrate[i]));
			   if (bValue==5787)bValue=12213;
		       sprintf_P(lcdteks,PSTR("COM%d:%d"),i+1,bValue);
    4cb0:	7e 01       	movw	r14, r28
    4cb2:	08 94       	sec
    4cb4:	e1 1c       	adc	r14, r1
    4cb6:	f1 1c       	adc	r15, r1
    4cb8:	8d e0       	ldi	r24, 0x0D	; 13
    4cba:	c8 2e       	mov	r12, r24
    4cbc:	8f e0       	ldi	r24, 0x0F	; 15
    4cbe:	d8 2e       	mov	r13, r24
			   lcd_print((2+(i%2)),1+(i/2*11),lcdteks);
    4cc0:	bb e0       	ldi	r27, 0x0B	; 11
    4cc2:	bb 2e       	mov	r11, r27
		      stSettingSytem=ssExitSystemSettings;
		  }		  
		  break;
	 case ssComSettings:
	      lcd_clear();
		  lcd_printf(1,1,PSTR("     -Baudrate-     "));
    4cc4:	a0 2e       	mov	r10, r16

		  for (i=0;i<4;i++){
		       bValue=GetBaudrate(eeprom_read_byte(&DefBaudrate[i]));
    4cc6:	c8 01       	movw	r24, r16
    4cc8:	8f 5b       	subi	r24, 0xBF	; 191
    4cca:	9e 4f       	sbci	r25, 0xFE	; 254
    4ccc:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
    4cd0:	84 30       	cpi	r24, 0x04	; 4
    4cd2:	68 f4       	brcc	.+26     	; 0x4cee <FSettingSystem+0x1fe>
    4cd4:	e8 2f       	mov	r30, r24
    4cd6:	f0 e0       	ldi	r31, 0x00	; 0
    4cd8:	ee 0f       	add	r30, r30
    4cda:	ff 1f       	adc	r31, r31
    4cdc:	e6 58       	subi	r30, 0x86	; 134
    4cde:	fe 4f       	sbci	r31, 0xFE	; 254
    4ce0:	80 81       	ld	r24, Z
    4ce2:	91 81       	ldd	r25, Z+1	; 0x01
			   if (bValue==5787)bValue=12213;
    4ce4:	b6 e1       	ldi	r27, 0x16	; 22
    4ce6:	8b 39       	cpi	r24, 0x9B	; 155
    4ce8:	9b 07       	cpc	r25, r27
    4cea:	21 f0       	breq	.+8      	; 0x4cf4 <FSettingSystem+0x204>
    4cec:	05 c0       	rjmp	.+10     	; 0x4cf8 <FSettingSystem+0x208>
    4cee:	80 e0       	ldi	r24, 0x00	; 0
    4cf0:	90 e0       	ldi	r25, 0x00	; 0
    4cf2:	02 c0       	rjmp	.+4      	; 0x4cf8 <FSettingSystem+0x208>
    4cf4:	85 eb       	ldi	r24, 0xB5	; 181
    4cf6:	9f e2       	ldi	r25, 0x2F	; 47
	      break;
	 }
     return Result;
}

char FSettingSystem(){
    4cf8:	0f 5f       	subi	r16, 0xFF	; 255
    4cfa:	1f 4f       	sbci	r17, 0xFF	; 255
		  lcd_printf(1,1,PSTR("     -Baudrate-     "));

		  for (i=0;i<4;i++){
		       bValue=GetBaudrate(eeprom_read_byte(&DefBaudrate[i]));
			   if (bValue==5787)bValue=12213;
		       sprintf_P(lcdteks,PSTR("COM%d:%d"),i+1,bValue);
    4cfc:	ed b7       	in	r30, 0x3d	; 61
    4cfe:	fe b7       	in	r31, 0x3e	; 62
    4d00:	38 97       	sbiw	r30, 0x08	; 8
    4d02:	0f b6       	in	r0, 0x3f	; 63
    4d04:	f8 94       	cli
    4d06:	fe bf       	out	0x3e, r31	; 62
    4d08:	0f be       	out	0x3f, r0	; 63
    4d0a:	ed bf       	out	0x3d, r30	; 61
    4d0c:	31 96       	adiw	r30, 0x01	; 1
    4d0e:	ad b7       	in	r26, 0x3d	; 61
    4d10:	be b7       	in	r27, 0x3e	; 62
    4d12:	12 96       	adiw	r26, 0x02	; 2
    4d14:	fc 92       	st	X, r15
    4d16:	ee 92       	st	-X, r14
    4d18:	11 97       	sbiw	r26, 0x01	; 1
    4d1a:	d3 82       	std	Z+3, r13	; 0x03
    4d1c:	c2 82       	std	Z+2, r12	; 0x02
    4d1e:	15 83       	std	Z+5, r17	; 0x05
    4d20:	04 83       	std	Z+4, r16	; 0x04
    4d22:	97 83       	std	Z+7, r25	; 0x07
    4d24:	86 83       	std	Z+6, r24	; 0x06
    4d26:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
			   lcd_print((2+(i%2)),1+(i/2*11),lcdteks);
    4d2a:	ed b7       	in	r30, 0x3d	; 61
    4d2c:	fe b7       	in	r31, 0x3e	; 62
    4d2e:	38 96       	adiw	r30, 0x08	; 8
    4d30:	0f b6       	in	r0, 0x3f	; 63
    4d32:	f8 94       	cli
    4d34:	fe bf       	out	0x3e, r31	; 62
    4d36:	0f be       	out	0x3f, r0	; 63
    4d38:	ed bf       	out	0x3d, r30	; 61
    4d3a:	8a 2d       	mov	r24, r10
    4d3c:	81 70       	andi	r24, 0x01	; 1
    4d3e:	a6 94       	lsr	r10
    4d40:	ab 9c       	mul	r10, r11
    4d42:	60 2d       	mov	r22, r0
    4d44:	11 24       	eor	r1, r1
    4d46:	6f 5f       	subi	r22, 0xFF	; 255
    4d48:	8e 5f       	subi	r24, 0xFE	; 254
    4d4a:	a7 01       	movw	r20, r14
    4d4c:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
		  break;
	 case ssComSettings:
	      lcd_clear();
		  lcd_printf(1,1,PSTR("     -Baudrate-     "));

		  for (i=0;i<4;i++){
    4d50:	04 30       	cpi	r16, 0x04	; 4
    4d52:	11 05       	cpc	r17, r1
    4d54:	09 f0       	breq	.+2      	; 0x4d58 <FSettingSystem+0x268>
    4d56:	b6 cf       	rjmp	.-148    	; 0x4cc4 <FSettingSystem+0x1d4>
		       bValue=GetBaudrate(eeprom_read_byte(&DefBaudrate[i]));
			   if (bValue==5787)bValue=12213;
		       sprintf_P(lcdteks,PSTR("COM%d:%d"),i+1,bValue);
			   lcd_print((2+(i%2)),1+(i/2*11),lcdteks);
		  }
		  lcd_printf(4,1,PSTR("[*]Back     "));
    4d58:	84 e0       	ldi	r24, 0x04	; 4
    4d5a:	61 e0       	ldi	r22, 0x01	; 1
    4d5c:	40 e0       	ldi	r20, 0x00	; 0
    4d5e:	5f e0       	ldi	r21, 0x0F	; 15
    4d60:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  stSettingSytem=ssBaudrateInput;
    4d64:	83 e0       	ldi	r24, 0x03	; 3
    4d66:	27 c0       	rjmp	.+78     	; 0x4db6 <FSettingSystem+0x2c6>
	      break;
     case ssBaudrateInput:
	      KeyPressed=_key_scan(1);
    4d68:	81 e0       	ldi	r24, 0x01	; 1
    4d6a:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
    4d6e:	0e 94 49 a3 	call	0x14692	; 0x14692 <_key_btn>
    4d72:	48 2f       	mov	r20, r24
		  if ((KeyChar>='1')&&(KeyChar<='4')){
    4d74:	81 53       	subi	r24, 0x31	; 49
    4d76:	84 30       	cpi	r24, 0x04	; 4
    4d78:	08 f5       	brcc	.+66     	; 0x4dbc <FSettingSystem+0x2cc>
		       brVal=eeprom_read_byte(&DefBaudrate[KeyChar-'1']);
    4d7a:	04 2f       	mov	r16, r20
    4d7c:	10 e0       	ldi	r17, 0x00	; 0
    4d7e:	00 5f       	subi	r16, 0xF0	; 240
    4d80:	1e 4f       	sbci	r17, 0xFE	; 254
    4d82:	c8 01       	movw	r24, r16
    4d84:	4d 8b       	std	Y+21, r20	; 0x15
    4d86:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
			   brVal=((brVal+1)%3)+1;
    4d8a:	28 2f       	mov	r18, r24
    4d8c:	30 e0       	ldi	r19, 0x00	; 0
    4d8e:	2f 5f       	subi	r18, 0xFF	; 255
    4d90:	3f 4f       	sbci	r19, 0xFF	; 255
    4d92:	c9 01       	movw	r24, r18
    4d94:	63 e0       	ldi	r22, 0x03	; 3
    4d96:	70 e0       	ldi	r23, 0x00	; 0
    4d98:	0e 94 ab a7 	call	0x14f56	; 0x14f56 <__divmodhi4>
    4d9c:	e8 2e       	mov	r14, r24
    4d9e:	e3 94       	inc	r14
			   SetBaudRate(KeyChar-'0',brVal);
    4da0:	4d 89       	ldd	r20, Y+21	; 0x15
    4da2:	84 2f       	mov	r24, r20
    4da4:	80 53       	subi	r24, 0x30	; 48
    4da6:	6e 2d       	mov	r22, r14
    4da8:	0e 94 47 19 	call	0x328e	; 0x328e <SetBaudRate>
			   eeprom_write_byte(&DefBaudrate[KeyChar-'1'],brVal);
    4dac:	c8 01       	movw	r24, r16
    4dae:	6e 2d       	mov	r22, r14
    4db0:	0e 94 78 aa 	call	0x154f0	; 0x154f0 <__eewr_byte_m128>
               stSettingSytem=ssComSettings;
    4db4:	82 e0       	ldi	r24, 0x02	; 2
    4db6:	80 93 fb 02 	sts	0x02FB, r24
    4dba:	0f c0       	rjmp	.+30     	; 0x4dda <FSettingSystem+0x2ea>
		  }else if (KeyChar=='*')
    4dbc:	4a 32       	cpi	r20, 0x2A	; 42
    4dbe:	69 f4       	brne	.+26     	; 0x4dda <FSettingSystem+0x2ea>
		      stSettingSytem=ssExitSystemSettings;		  	
    4dc0:	85 e0       	ldi	r24, 0x05	; 5
    4dc2:	f9 cf       	rjmp	.-14     	; 0x4db6 <FSettingSystem+0x2c6>
	      break;
	 case ssPumpPoolingSettings:
          SubMenu=FSettingPumpPooling();
    4dc4:	0e 94 66 23 	call	0x46cc	; 0x46cc <FSettingPumpPooling>
		  if (SubMenu==MENU_DONE)stSettingSytem=ssInitSettingSystem;
    4dc8:	81 30       	cpi	r24, 0x01	; 1
    4dca:	39 f4       	brne	.+14     	; 0x4dda <FSettingSystem+0x2ea>
    4dcc:	10 92 fb 02 	sts	0x02FB, r1
    4dd0:	04 c0       	rjmp	.+8      	; 0x4dda <FSettingSystem+0x2ea>
	      break;
     case ssExitSystemSettings:
	      stSettingSytem=ssInitSettingSystem;
    4dd2:	10 92 fb 02 	sts	0x02FB, r1
	      Result=MENU_DONE;
    4dd6:	81 e0       	ldi	r24, 0x01	; 1
	      break;
    4dd8:	01 c0       	rjmp	.+2      	; 0x4ddc <FSettingSystem+0x2ec>
}

char FSettingSystem(){
static char stSettingSytem=ssInitSettingSystem;
       char KeyPressed,KeyChar,brVal,i;  
       char SubMenu,Result=MENU_NONE;
    4dda:	80 e0       	ldi	r24, 0x00	; 0
	      stSettingSytem=ssInitSettingSystem;
	      Result=MENU_DONE;
	      break;
	 }
     return Result;
}
    4ddc:	65 96       	adiw	r28, 0x15	; 21
    4dde:	0f b6       	in	r0, 0x3f	; 63
    4de0:	f8 94       	cli
    4de2:	de bf       	out	0x3e, r29	; 62
    4de4:	0f be       	out	0x3f, r0	; 63
    4de6:	cd bf       	out	0x3d, r28	; 61
    4de8:	cf 91       	pop	r28
    4dea:	df 91       	pop	r29
    4dec:	1f 91       	pop	r17
    4dee:	0f 91       	pop	r16
    4df0:	ff 90       	pop	r15
    4df2:	ef 90       	pop	r14
    4df4:	df 90       	pop	r13
    4df6:	cf 90       	pop	r12
    4df8:	bf 90       	pop	r11
    4dfa:	af 90       	pop	r10
    4dfc:	08 95       	ret

00004dfe <AddCharLag>:
}

//String Processing
void AddCharLag(char *String,char CharAdded,unsigned char Size){
char i,Length;
     Length=strlen(String);
    4dfe:	fc 01       	movw	r30, r24
    4e00:	01 90       	ld	r0, Z+
    4e02:	00 20       	and	r0, r0
    4e04:	e9 f7       	brne	.-6      	; 0x4e00 <AddCharLag+0x2>
    4e06:	31 97       	sbiw	r30, 0x01	; 1
    4e08:	e8 1b       	sub	r30, r24
    4e0a:	f9 0b       	sbc	r31, r25
  if (Length<Size){   
    4e0c:	e4 17       	cp	r30, r20
    4e0e:	58 f4       	brcc	.+22     	; 0x4e26 <AddCharLag+0x28>
     for(i=Length;i<Size;i++){
	    String[i]=CharAdded;
    4e10:	dc 01       	movw	r26, r24
    4e12:	ae 0f       	add	r26, r30
    4e14:	b1 1d       	adc	r27, r1
    4e16:	6c 93       	st	X, r22
//String Processing
void AddCharLag(char *String,char CharAdded,unsigned char Size){
char i,Length;
     Length=strlen(String);
  if (Length<Size){   
     for(i=Length;i<Size;i++){
    4e18:	ef 5f       	subi	r30, 0xFF	; 255
    4e1a:	e4 17       	cp	r30, r20
    4e1c:	c8 f3       	brcs	.-14     	; 0x4e10 <AddCharLag+0x12>
	    String[i]=CharAdded;
	 }String[Size]=0;
    4e1e:	84 0f       	add	r24, r20
    4e20:	91 1d       	adc	r25, r1
    4e22:	fc 01       	movw	r30, r24
    4e24:	10 82       	st	Z, r1
    4e26:	08 95       	ret

00004e28 <AddCharLead>:
  }

}

void AddCharLead(char *String,char CharAdded,unsigned char Size){//
    4e28:	9f 92       	push	r9
    4e2a:	af 92       	push	r10
    4e2c:	bf 92       	push	r11
    4e2e:	cf 92       	push	r12
    4e30:	df 92       	push	r13
    4e32:	ef 92       	push	r14
    4e34:	ff 92       	push	r15
    4e36:	0f 93       	push	r16
    4e38:	1f 93       	push	r17
    4e3a:	df 93       	push	r29
    4e3c:	cf 93       	push	r28
    4e3e:	cd b7       	in	r28, 0x3d	; 61
    4e40:	de b7       	in	r29, 0x3e	; 62
    4e42:	6e 97       	sbiw	r28, 0x1e	; 30
    4e44:	0f b6       	in	r0, 0x3f	; 63
    4e46:	f8 94       	cli
    4e48:	de bf       	out	0x3e, r29	; 62
    4e4a:	0f be       	out	0x3f, r0	; 63
    4e4c:	cd bf       	out	0x3d, r28	; 61
     char i,Length,strAdded[30];
     Length=strlen(String);
    4e4e:	dc 01       	movw	r26, r24
    4e50:	0d 90       	ld	r0, X+
    4e52:	00 20       	and	r0, r0
    4e54:	e9 f7       	brne	.-6      	; 0x4e50 <AddCharLead+0x28>
    4e56:	11 97       	sbiw	r26, 0x01	; 1
    4e58:	7a 2f       	mov	r23, r26
    4e5a:	78 1b       	sub	r23, r24

	 if (Size>Length){
    4e5c:	74 17       	cp	r23, r20
    4e5e:	d8 f5       	brcc	.+118    	; 0x4ed6 <AddCharLead+0xae>
    4e60:	fe 01       	movw	r30, r28
    4e62:	31 96       	adiw	r30, 0x01	; 1
	 }String[Size]=0;
  }

}

void AddCharLead(char *String,char CharAdded,unsigned char Size){//
    4e64:	c4 2e       	mov	r12, r20
    4e66:	dd 24       	eor	r13, r13
    4e68:	7f 01       	movw	r14, r30
    4e6a:	ec 0c       	add	r14, r12
    4e6c:	fd 1c       	adc	r15, r13
    4e6e:	df 01       	movw	r26, r30
    4e70:	01 c0       	rjmp	.+2      	; 0x4e74 <AddCharLead+0x4c>
     char i,Length,strAdded[30];
     Length=strlen(String);

	 if (Size>Length){
         for(i=0;i<Size;i++){
	         strAdded[i]=CharAdded;
    4e72:	6d 93       	st	X+, r22
void AddCharLead(char *String,char CharAdded,unsigned char Size){//
     char i,Length,strAdded[30];
     Length=strlen(String);

	 if (Size>Length){
         for(i=0;i<Size;i++){
    4e74:	ae 15       	cp	r26, r14
    4e76:	bf 05       	cpc	r27, r15
    4e78:	e1 f7       	brne	.-8      	; 0x4e72 <AddCharLead+0x4a>
	         strAdded[i]=CharAdded;
	     }strAdded[Size]=0;
    4e7a:	24 2f       	mov	r18, r20
    4e7c:	30 e0       	ldi	r19, 0x00	; 0
    4e7e:	8e 01       	movw	r16, r28
    4e80:	0f 5f       	subi	r16, 0xFF	; 255
    4e82:	1f 4f       	sbci	r17, 0xFF	; 255
    4e84:	d8 01       	movw	r26, r16
    4e86:	a2 0f       	add	r26, r18
    4e88:	b3 1f       	adc	r27, r19
    4e8a:	1c 92       	st	X, r1
	     //Copy
         for(i=(Size-Length);i<Size;i++){
    4e8c:	54 2f       	mov	r21, r20
    4e8e:	57 1b       	sub	r21, r23
	         strAdded[i]=String[i-(Size-Length)];
    4e90:	67 2f       	mov	r22, r23
    4e92:	70 e0       	ldi	r23, 0x00	; 0
    4e94:	62 1b       	sub	r22, r18
    4e96:	73 0b       	sbc	r23, r19
	 if (Size>Length){
         for(i=0;i<Size;i++){
	         strAdded[i]=CharAdded;
	     }strAdded[Size]=0;
	     //Copy
         for(i=(Size-Length);i<Size;i++){
    4e98:	0d c0       	rjmp	.+26     	; 0x4eb4 <AddCharLead+0x8c>
	         strAdded[i]=String[i-(Size-Length)];
    4e9a:	a5 2f       	mov	r26, r21
    4e9c:	b0 e0       	ldi	r27, 0x00	; 0
    4e9e:	58 01       	movw	r10, r16
    4ea0:	aa 0e       	add	r10, r26
    4ea2:	bb 1e       	adc	r11, r27
    4ea4:	a8 0f       	add	r26, r24
    4ea6:	b9 1f       	adc	r27, r25
    4ea8:	a6 0f       	add	r26, r22
    4eaa:	b7 1f       	adc	r27, r23
    4eac:	9c 90       	ld	r9, X
    4eae:	d5 01       	movw	r26, r10
    4eb0:	9c 92       	st	X, r9
	 if (Size>Length){
         for(i=0;i<Size;i++){
	         strAdded[i]=CharAdded;
	     }strAdded[Size]=0;
	     //Copy
         for(i=(Size-Length);i<Size;i++){
    4eb2:	5f 5f       	subi	r21, 0xFF	; 255
    4eb4:	54 17       	cp	r21, r20
    4eb6:	88 f3       	brcs	.-30     	; 0x4e9a <AddCharLead+0x72>
	         strAdded[i]=String[i-(Size-Length)];
	     }strAdded[Size]=0;
    4eb8:	d8 01       	movw	r26, r16
    4eba:	a2 0f       	add	r26, r18
    4ebc:	b3 1f       	adc	r27, r19
    4ebe:	1c 92       	st	X, r1
    4ec0:	dc 01       	movw	r26, r24
	     //Spaced
         for(i=0;i<Size;i++){
    4ec2:	02 c0       	rjmp	.+4      	; 0x4ec8 <AddCharLead+0xa0>
	         String[i]=strAdded[i];
    4ec4:	21 91       	ld	r18, Z+
    4ec6:	2d 93       	st	X+, r18
	     //Copy
         for(i=(Size-Length);i<Size;i++){
	         strAdded[i]=String[i-(Size-Length)];
	     }strAdded[Size]=0;
	     //Spaced
         for(i=0;i<Size;i++){
    4ec8:	ee 15       	cp	r30, r14
    4eca:	ff 05       	cpc	r31, r15
    4ecc:	d9 f7       	brne	.-10     	; 0x4ec4 <AddCharLead+0x9c>
	         String[i]=strAdded[i];
	     }String[Size]=0;
    4ece:	8c 0d       	add	r24, r12
    4ed0:	9d 1d       	adc	r25, r13
    4ed2:	fc 01       	movw	r30, r24
    4ed4:	10 82       	st	Z, r1
	 }
}
    4ed6:	6e 96       	adiw	r28, 0x1e	; 30
    4ed8:	0f b6       	in	r0, 0x3f	; 63
    4eda:	f8 94       	cli
    4edc:	de bf       	out	0x3e, r29	; 62
    4ede:	0f be       	out	0x3f, r0	; 63
    4ee0:	cd bf       	out	0x3d, r28	; 61
    4ee2:	cf 91       	pop	r28
    4ee4:	df 91       	pop	r29
    4ee6:	1f 91       	pop	r17
    4ee8:	0f 91       	pop	r16
    4eea:	ff 90       	pop	r15
    4eec:	ef 90       	pop	r14
    4eee:	df 90       	pop	r13
    4ef0:	cf 90       	pop	r12
    4ef2:	bf 90       	pop	r11
    4ef4:	af 90       	pop	r10
    4ef6:	9f 90       	pop	r9
    4ef8:	08 95       	ret

00004efa <AddSpaceLag>:



void AddSpaceLag(char *String,unsigned char Size){// [CREDITCARD             ]
char i,Length;
     Length=strlen(String);
    4efa:	fc 01       	movw	r30, r24
    4efc:	01 90       	ld	r0, Z+
    4efe:	00 20       	and	r0, r0
    4f00:	e9 f7       	brne	.-6      	; 0x4efc <AddSpaceLag+0x2>
    4f02:	31 97       	sbiw	r30, 0x01	; 1
    4f04:	e8 1b       	sub	r30, r24
    4f06:	f9 0b       	sbc	r31, r25
  if (Length<Size){   
    4f08:	e6 17       	cp	r30, r22
    4f0a:	60 f4       	brcc	.+24     	; 0x4f24 <AddSpaceLag+0x2a>
     for(i=Length;i<Size;i++){
	    String[i]=' ';
    4f0c:	20 e2       	ldi	r18, 0x20	; 32
    4f0e:	dc 01       	movw	r26, r24
    4f10:	ae 0f       	add	r26, r30
    4f12:	b1 1d       	adc	r27, r1
    4f14:	2c 93       	st	X, r18

void AddSpaceLag(char *String,unsigned char Size){// [CREDITCARD             ]
char i,Length;
     Length=strlen(String);
  if (Length<Size){   
     for(i=Length;i<Size;i++){
    4f16:	ef 5f       	subi	r30, 0xFF	; 255
    4f18:	e6 17       	cp	r30, r22
    4f1a:	c8 f3       	brcs	.-14     	; 0x4f0e <AddSpaceLag+0x14>
	    String[i]=' ';
	 }String[Size]=0;
    4f1c:	86 0f       	add	r24, r22
    4f1e:	91 1d       	adc	r25, r1
    4f20:	fc 01       	movw	r30, r24
    4f22:	10 82       	st	Z, r1
    4f24:	08 95       	ret

00004f26 <AddSpaceLead>:
  }
}

void AddSpaceLead(char *String,unsigned char Size){//
    4f26:	9f 92       	push	r9
    4f28:	af 92       	push	r10
    4f2a:	bf 92       	push	r11
    4f2c:	cf 92       	push	r12
    4f2e:	df 92       	push	r13
    4f30:	ef 92       	push	r14
    4f32:	ff 92       	push	r15
    4f34:	0f 93       	push	r16
    4f36:	1f 93       	push	r17
    4f38:	df 93       	push	r29
    4f3a:	cf 93       	push	r28
    4f3c:	cd b7       	in	r28, 0x3d	; 61
    4f3e:	de b7       	in	r29, 0x3e	; 62
    4f40:	e2 97       	sbiw	r28, 0x32	; 50
    4f42:	0f b6       	in	r0, 0x3f	; 63
    4f44:	f8 94       	cli
    4f46:	de bf       	out	0x3e, r29	; 62
    4f48:	0f be       	out	0x3f, r0	; 63
    4f4a:	cd bf       	out	0x3d, r28	; 61
     char i,Length,strAdded[50];
     Length=strlen(String);
    4f4c:	dc 01       	movw	r26, r24
    4f4e:	0d 90       	ld	r0, X+
    4f50:	00 20       	and	r0, r0
    4f52:	e9 f7       	brne	.-6      	; 0x4f4e <AddSpaceLead+0x28>
    4f54:	11 97       	sbiw	r26, 0x01	; 1
    4f56:	4a 2f       	mov	r20, r26
    4f58:	48 1b       	sub	r20, r24

	 if (Size>Length){
    4f5a:	46 17       	cp	r20, r22
    4f5c:	d8 f5       	brcc	.+118    	; 0x4fd4 <AddSpaceLead+0xae>
    4f5e:	fe 01       	movw	r30, r28
    4f60:	31 96       	adiw	r30, 0x01	; 1
	    String[i]=' ';
	 }String[Size]=0;
  }
}

void AddSpaceLead(char *String,unsigned char Size){//
    4f62:	c6 2e       	mov	r12, r22
    4f64:	dd 24       	eor	r13, r13
    4f66:	7f 01       	movw	r14, r30
    4f68:	ec 0c       	add	r14, r12
    4f6a:	fd 1c       	adc	r15, r13
    4f6c:	df 01       	movw	r26, r30
     char i,Length,strAdded[50];
     Length=strlen(String);

	 if (Size>Length){
         for(i=0;i<Size;i++){
	         strAdded[i]=' ';
    4f6e:	20 e2       	ldi	r18, 0x20	; 32
    4f70:	01 c0       	rjmp	.+2      	; 0x4f74 <AddSpaceLead+0x4e>
    4f72:	2d 93       	st	X+, r18
void AddSpaceLead(char *String,unsigned char Size){//
     char i,Length,strAdded[50];
     Length=strlen(String);

	 if (Size>Length){
         for(i=0;i<Size;i++){
    4f74:	ae 15       	cp	r26, r14
    4f76:	bf 05       	cpc	r27, r15
    4f78:	e1 f7       	brne	.-8      	; 0x4f72 <AddSpaceLead+0x4c>
	         strAdded[i]=' ';
	     }strAdded[Size]=0;
    4f7a:	26 2f       	mov	r18, r22
    4f7c:	30 e0       	ldi	r19, 0x00	; 0
    4f7e:	8e 01       	movw	r16, r28
    4f80:	0f 5f       	subi	r16, 0xFF	; 255
    4f82:	1f 4f       	sbci	r17, 0xFF	; 255
    4f84:	d8 01       	movw	r26, r16
    4f86:	a2 0f       	add	r26, r18
    4f88:	b3 1f       	adc	r27, r19
    4f8a:	1c 92       	st	X, r1
	     //Copy
         for(i=(Size-Length);i<Size;i++){
    4f8c:	76 2f       	mov	r23, r22
    4f8e:	74 1b       	sub	r23, r20
	         strAdded[i]=String[i-(Size-Length)];
    4f90:	50 e0       	ldi	r21, 0x00	; 0
    4f92:	42 1b       	sub	r20, r18
    4f94:	53 0b       	sbc	r21, r19
	 if (Size>Length){
         for(i=0;i<Size;i++){
	         strAdded[i]=' ';
	     }strAdded[Size]=0;
	     //Copy
         for(i=(Size-Length);i<Size;i++){
    4f96:	0d c0       	rjmp	.+26     	; 0x4fb2 <AddSpaceLead+0x8c>
	         strAdded[i]=String[i-(Size-Length)];
    4f98:	a7 2f       	mov	r26, r23
    4f9a:	b0 e0       	ldi	r27, 0x00	; 0
    4f9c:	58 01       	movw	r10, r16
    4f9e:	aa 0e       	add	r10, r26
    4fa0:	bb 1e       	adc	r11, r27
    4fa2:	a8 0f       	add	r26, r24
    4fa4:	b9 1f       	adc	r27, r25
    4fa6:	a4 0f       	add	r26, r20
    4fa8:	b5 1f       	adc	r27, r21
    4faa:	9c 90       	ld	r9, X
    4fac:	d5 01       	movw	r26, r10
    4fae:	9c 92       	st	X, r9
	 if (Size>Length){
         for(i=0;i<Size;i++){
	         strAdded[i]=' ';
	     }strAdded[Size]=0;
	     //Copy
         for(i=(Size-Length);i<Size;i++){
    4fb0:	7f 5f       	subi	r23, 0xFF	; 255
    4fb2:	76 17       	cp	r23, r22
    4fb4:	88 f3       	brcs	.-30     	; 0x4f98 <AddSpaceLead+0x72>
	         strAdded[i]=String[i-(Size-Length)];
	     }strAdded[Size]=0;
    4fb6:	d8 01       	movw	r26, r16
    4fb8:	a2 0f       	add	r26, r18
    4fba:	b3 1f       	adc	r27, r19
    4fbc:	1c 92       	st	X, r1
    4fbe:	dc 01       	movw	r26, r24
	     //Spaced
         for(i=0;i<Size;i++){
    4fc0:	02 c0       	rjmp	.+4      	; 0x4fc6 <AddSpaceLead+0xa0>
	         String[i]=strAdded[i];
    4fc2:	21 91       	ld	r18, Z+
    4fc4:	2d 93       	st	X+, r18
	     //Copy
         for(i=(Size-Length);i<Size;i++){
	         strAdded[i]=String[i-(Size-Length)];
	     }strAdded[Size]=0;
	     //Spaced
         for(i=0;i<Size;i++){
    4fc6:	ee 15       	cp	r30, r14
    4fc8:	ff 05       	cpc	r31, r15
    4fca:	d9 f7       	brne	.-10     	; 0x4fc2 <AddSpaceLead+0x9c>
	         String[i]=strAdded[i];
	     }String[Size]=0;
    4fcc:	8c 0d       	add	r24, r12
    4fce:	9d 1d       	adc	r25, r13
    4fd0:	fc 01       	movw	r30, r24
    4fd2:	10 82       	st	Z, r1
	 }
}
    4fd4:	e2 96       	adiw	r28, 0x32	; 50
    4fd6:	0f b6       	in	r0, 0x3f	; 63
    4fd8:	f8 94       	cli
    4fda:	de bf       	out	0x3e, r29	; 62
    4fdc:	0f be       	out	0x3f, r0	; 63
    4fde:	cd bf       	out	0x3d, r28	; 61
    4fe0:	cf 91       	pop	r28
    4fe2:	df 91       	pop	r29
    4fe4:	1f 91       	pop	r17
    4fe6:	0f 91       	pop	r16
    4fe8:	ff 90       	pop	r15
    4fea:	ef 90       	pop	r14
    4fec:	df 90       	pop	r13
    4fee:	cf 90       	pop	r12
    4ff0:	bf 90       	pop	r11
    4ff2:	af 90       	pop	r10
    4ff4:	9f 90       	pop	r9
    4ff6:	08 95       	ret

00004ff8 <IFTSendMessage>:
		else strCardID[i]=strRFID[i-(20-LengthID)];
	 }strCardID[20]=0;

}

void IFTSendMessage(char MsgCode){//<STX>[IFTID][Seq][No][SrceIP][DestIP][MsgCode]
    4ff8:	cf 92       	push	r12
    4ffa:	df 92       	push	r13
    4ffc:	ef 92       	push	r14
    4ffe:	ff 92       	push	r15
    5000:	0f 93       	push	r16
    5002:	1f 93       	push	r17
    5004:	df 93       	push	r29
    5006:	cf 93       	push	r28
    5008:	cd b7       	in	r28, 0x3d	; 61
    500a:	de b7       	in	r29, 0x3e	; 62
    500c:	c1 54       	subi	r28, 0x41	; 65
    500e:	d0 40       	sbci	r29, 0x00	; 0
    5010:	0f b6       	in	r0, 0x3f	; 63
    5012:	f8 94       	cli
    5014:	de bf       	out	0x3e, r29	; 62
    5016:	0f be       	out	0x3f, r0	; 63
    5018:	cd bf       	out	0x3d, r28	; 61
    501a:	28 2f       	mov	r18, r24
	 char strSeqNum[3];
	 char ReadIP[4];
	 char strSend[60];

     //STX
     uart(1, 1,0x01);
    501c:	81 e0       	ldi	r24, 0x01	; 1
    501e:	61 e0       	ldi	r22, 0x01	; 1
    5020:	41 e0       	ldi	r20, 0x01	; 1
    5022:	22 96       	adiw	r28, 0x02	; 2
    5024:	2f af       	std	Y+63, r18	; 0x3f
    5026:	22 97       	sbiw	r28, 0x02	; 2
    5028:	0e 94 e6 a5 	call	0x14bcc	; 0x14bcc <uart>
	 //[IFTID]
	 IdIFT=(eeprom_read_byte(&DefIFT_ID)%100);
    502c:	80 e0       	ldi	r24, 0x00	; 0
    502e:	90 e0       	ldi	r25, 0x00	; 0
    5030:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
	 sprintf_P(strSend,PSTR("%.2d"),IdIFT);
    5034:	00 d0       	rcall	.+0      	; 0x5036 <IFTSendMessage+0x3e>
    5036:	00 d0       	rcall	.+0      	; 0x5038 <IFTSendMessage+0x40>
    5038:	00 d0       	rcall	.+0      	; 0x503a <IFTSendMessage+0x42>
    503a:	ed b7       	in	r30, 0x3d	; 61
    503c:	fe b7       	in	r31, 0x3e	; 62
    503e:	31 96       	adiw	r30, 0x01	; 1
    5040:	8e 01       	movw	r16, r28
    5042:	0b 5f       	subi	r16, 0xFB	; 251
    5044:	1f 4f       	sbci	r17, 0xFF	; 255
    5046:	ad b7       	in	r26, 0x3d	; 61
    5048:	be b7       	in	r27, 0x3e	; 62
    504a:	12 96       	adiw	r26, 0x02	; 2
    504c:	1c 93       	st	X, r17
    504e:	0e 93       	st	-X, r16
    5050:	11 97       	sbiw	r26, 0x01	; 1
    5052:	49 e5       	ldi	r20, 0x59	; 89
    5054:	53 e2       	ldi	r21, 0x23	; 35
    5056:	53 83       	std	Z+3, r21	; 0x03
    5058:	42 83       	std	Z+2, r20	; 0x02
	 char strSend[60];

     //STX
     uart(1, 1,0x01);
	 //[IFTID]
	 IdIFT=(eeprom_read_byte(&DefIFT_ID)%100);
    505a:	64 e6       	ldi	r22, 0x64	; 100
    505c:	0e 94 7e a7 	call	0x14efc	; 0x14efc <__udivmodqi4>
	 sprintf_P(strSend,PSTR("%.2d"),IdIFT);
    5060:	94 83       	std	Z+4, r25	; 0x04
    5062:	15 82       	std	Z+5, r1	; 0x05
    5064:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	 uart_print(1, 0,strSend);
    5068:	8d b7       	in	r24, 0x3d	; 61
    506a:	9e b7       	in	r25, 0x3e	; 62
    506c:	06 96       	adiw	r24, 0x06	; 6
    506e:	0f b6       	in	r0, 0x3f	; 63
    5070:	f8 94       	cli
    5072:	9e bf       	out	0x3e, r25	; 62
    5074:	0f be       	out	0x3f, r0	; 63
    5076:	8d bf       	out	0x3d, r24	; 61
    5078:	81 e0       	ldi	r24, 0x01	; 1
    507a:	60 e0       	ldi	r22, 0x00	; 0
    507c:	a8 01       	movw	r20, r16
    507e:	0e 94 03 a6 	call	0x14c06	; 0x14c06 <uart_print>
     //[Seq]
	 SeqNum=((SeqNum+1)%100);
    5082:	80 91 8d 02 	lds	r24, 0x028D
    5086:	90 e0       	ldi	r25, 0x00	; 0
    5088:	01 96       	adiw	r24, 0x01	; 1
    508a:	64 e6       	ldi	r22, 0x64	; 100
    508c:	70 e0       	ldi	r23, 0x00	; 0
    508e:	0e 94 ab a7 	call	0x14f56	; 0x14f56 <__divmodhi4>
    5092:	80 93 8d 02 	sts	0x028D, r24
	 sprintf_P(strSend,PSTR("%.2d"),SeqNum);	 
    5096:	00 d0       	rcall	.+0      	; 0x5098 <IFTSendMessage+0xa0>
    5098:	00 d0       	rcall	.+0      	; 0x509a <IFTSendMessage+0xa2>
    509a:	00 d0       	rcall	.+0      	; 0x509c <IFTSendMessage+0xa4>
    509c:	ed b7       	in	r30, 0x3d	; 61
    509e:	fe b7       	in	r31, 0x3e	; 62
    50a0:	31 96       	adiw	r30, 0x01	; 1
    50a2:	ad b7       	in	r26, 0x3d	; 61
    50a4:	be b7       	in	r27, 0x3e	; 62
    50a6:	12 96       	adiw	r26, 0x02	; 2
    50a8:	1c 93       	st	X, r17
    50aa:	0e 93       	st	-X, r16
    50ac:	11 97       	sbiw	r26, 0x01	; 1
    50ae:	44 e5       	ldi	r20, 0x54	; 84
    50b0:	53 e2       	ldi	r21, 0x23	; 35
    50b2:	53 83       	std	Z+3, r21	; 0x03
    50b4:	42 83       	std	Z+2, r20	; 0x02
    50b6:	84 83       	std	Z+4, r24	; 0x04
    50b8:	15 82       	std	Z+5, r1	; 0x05
    50ba:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	 uart_print(1, 0,strSend);
    50be:	8d b7       	in	r24, 0x3d	; 61
    50c0:	9e b7       	in	r25, 0x3e	; 62
    50c2:	06 96       	adiw	r24, 0x06	; 6
    50c4:	0f b6       	in	r0, 0x3f	; 63
    50c6:	f8 94       	cli
    50c8:	9e bf       	out	0x3e, r25	; 62
    50ca:	0f be       	out	0x3f, r0	; 63
    50cc:	8d bf       	out	0x3d, r24	; 61
    50ce:	81 e0       	ldi	r24, 0x01	; 1
    50d0:	60 e0       	ldi	r22, 0x00	; 0
    50d2:	a8 01       	movw	r20, r16
    50d4:	0e 94 03 a6 	call	0x14c06	; 0x14c06 <uart_print>
	 //[ClientIP]
     eeprom_read_block((void*)&ReadIP,(const void*)&DefClientIP,4);
    50d8:	7e 01       	movw	r14, r28
    50da:	08 94       	sec
    50dc:	e1 1c       	adc	r14, r1
    50de:	f1 1c       	adc	r15, r1
    50e0:	c7 01       	movw	r24, r14
    50e2:	68 e2       	ldi	r22, 0x28	; 40
    50e4:	70 e0       	ldi	r23, 0x00	; 0
    50e6:	44 e0       	ldi	r20, 0x04	; 4
    50e8:	50 e0       	ldi	r21, 0x00	; 0
    50ea:	0e 94 56 aa 	call	0x154ac	; 0x154ac <__eerd_block_m128>
	 sprintf_P(strSend,PSTR("%.3d.%.3d.%.3d.%.3d"),ReadIP[0],ReadIP[1],ReadIP[2],ReadIP[3]);
    50ee:	ad b7       	in	r26, 0x3d	; 61
    50f0:	be b7       	in	r27, 0x3e	; 62
    50f2:	1c 97       	sbiw	r26, 0x0c	; 12
    50f4:	0f b6       	in	r0, 0x3f	; 63
    50f6:	f8 94       	cli
    50f8:	be bf       	out	0x3e, r27	; 62
    50fa:	0f be       	out	0x3f, r0	; 63
    50fc:	ad bf       	out	0x3d, r26	; 61
    50fe:	ed b7       	in	r30, 0x3d	; 61
    5100:	fe b7       	in	r31, 0x3e	; 62
    5102:	31 96       	adiw	r30, 0x01	; 1
    5104:	12 96       	adiw	r26, 0x02	; 2
    5106:	1c 93       	st	X, r17
    5108:	0e 93       	st	-X, r16
    510a:	11 97       	sbiw	r26, 0x01	; 1
    510c:	80 e4       	ldi	r24, 0x40	; 64
    510e:	93 e2       	ldi	r25, 0x23	; 35
    5110:	93 83       	std	Z+3, r25	; 0x03
    5112:	82 83       	std	Z+2, r24	; 0x02
    5114:	89 81       	ldd	r24, Y+1	; 0x01
    5116:	84 83       	std	Z+4, r24	; 0x04
    5118:	15 82       	std	Z+5, r1	; 0x05
    511a:	8a 81       	ldd	r24, Y+2	; 0x02
    511c:	86 83       	std	Z+6, r24	; 0x06
    511e:	17 82       	std	Z+7, r1	; 0x07
    5120:	8b 81       	ldd	r24, Y+3	; 0x03
    5122:	80 87       	std	Z+8, r24	; 0x08
    5124:	11 86       	std	Z+9, r1	; 0x09
    5126:	8c 81       	ldd	r24, Y+4	; 0x04
    5128:	82 87       	std	Z+10, r24	; 0x0a
    512a:	13 86       	std	Z+11, r1	; 0x0b
    512c:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	 uart_print(1, 0,strSend);
    5130:	8d b7       	in	r24, 0x3d	; 61
    5132:	9e b7       	in	r25, 0x3e	; 62
    5134:	0c 96       	adiw	r24, 0x0c	; 12
    5136:	0f b6       	in	r0, 0x3f	; 63
    5138:	f8 94       	cli
    513a:	9e bf       	out	0x3e, r25	; 62
    513c:	0f be       	out	0x3f, r0	; 63
    513e:	8d bf       	out	0x3d, r24	; 61
    5140:	81 e0       	ldi	r24, 0x01	; 1
    5142:	60 e0       	ldi	r22, 0x00	; 0
    5144:	a8 01       	movw	r20, r16
    5146:	0e 94 03 a6 	call	0x14c06	; 0x14c06 <uart_print>
	 //[ServerIP]
     eeprom_read_block((void*)&ReadIP,(const void*)&DefServerIP,4);
    514a:	c7 01       	movw	r24, r14
    514c:	6c e2       	ldi	r22, 0x2C	; 44
    514e:	70 e0       	ldi	r23, 0x00	; 0
    5150:	44 e0       	ldi	r20, 0x04	; 4
    5152:	50 e0       	ldi	r21, 0x00	; 0
    5154:	0e 94 56 aa 	call	0x154ac	; 0x154ac <__eerd_block_m128>
	 sprintf_P(strSend,PSTR("%.3d.%.3d.%.3d.%.3d"),ReadIP[0],ReadIP[1],ReadIP[2],ReadIP[3]);
    5158:	ad b7       	in	r26, 0x3d	; 61
    515a:	be b7       	in	r27, 0x3e	; 62
    515c:	1c 97       	sbiw	r26, 0x0c	; 12
    515e:	0f b6       	in	r0, 0x3f	; 63
    5160:	f8 94       	cli
    5162:	be bf       	out	0x3e, r27	; 62
    5164:	0f be       	out	0x3f, r0	; 63
    5166:	ad bf       	out	0x3d, r26	; 61
    5168:	ed b7       	in	r30, 0x3d	; 61
    516a:	fe b7       	in	r31, 0x3e	; 62
    516c:	31 96       	adiw	r30, 0x01	; 1
    516e:	12 96       	adiw	r26, 0x02	; 2
    5170:	1c 93       	st	X, r17
    5172:	0e 93       	st	-X, r16
    5174:	11 97       	sbiw	r26, 0x01	; 1
    5176:	8c e2       	ldi	r24, 0x2C	; 44
    5178:	93 e2       	ldi	r25, 0x23	; 35
    517a:	93 83       	std	Z+3, r25	; 0x03
    517c:	82 83       	std	Z+2, r24	; 0x02
    517e:	89 81       	ldd	r24, Y+1	; 0x01
    5180:	84 83       	std	Z+4, r24	; 0x04
    5182:	15 82       	std	Z+5, r1	; 0x05
    5184:	8a 81       	ldd	r24, Y+2	; 0x02
    5186:	86 83       	std	Z+6, r24	; 0x06
    5188:	17 82       	std	Z+7, r1	; 0x07
    518a:	8b 81       	ldd	r24, Y+3	; 0x03
    518c:	80 87       	std	Z+8, r24	; 0x08
    518e:	11 86       	std	Z+9, r1	; 0x09
    5190:	8c 81       	ldd	r24, Y+4	; 0x04
    5192:	82 87       	std	Z+10, r24	; 0x0a
    5194:	13 86       	std	Z+11, r1	; 0x0b
    5196:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	 uart_print(1, 0,strSend);
    519a:	8d b7       	in	r24, 0x3d	; 61
    519c:	9e b7       	in	r25, 0x3e	; 62
    519e:	0c 96       	adiw	r24, 0x0c	; 12
    51a0:	0f b6       	in	r0, 0x3f	; 63
    51a2:	f8 94       	cli
    51a4:	9e bf       	out	0x3e, r25	; 62
    51a6:	0f be       	out	0x3f, r0	; 63
    51a8:	8d bf       	out	0x3d, r24	; 61
    51aa:	81 e0       	ldi	r24, 0x01	; 1
    51ac:	60 e0       	ldi	r22, 0x00	; 0
    51ae:	a8 01       	movw	r20, r16
    51b0:	0e 94 03 a6 	call	0x14c06	; 0x14c06 <uart_print>
	 //[MsgCode]
	 sprintf_P(strSend,PSTR("%.2X"),MsgCode);	 
    51b4:	00 d0       	rcall	.+0      	; 0x51b6 <IFTSendMessage+0x1be>
    51b6:	00 d0       	rcall	.+0      	; 0x51b8 <IFTSendMessage+0x1c0>
    51b8:	00 d0       	rcall	.+0      	; 0x51ba <IFTSendMessage+0x1c2>
    51ba:	ed b7       	in	r30, 0x3d	; 61
    51bc:	fe b7       	in	r31, 0x3e	; 62
    51be:	31 96       	adiw	r30, 0x01	; 1
    51c0:	ad b7       	in	r26, 0x3d	; 61
    51c2:	be b7       	in	r27, 0x3e	; 62
    51c4:	12 96       	adiw	r26, 0x02	; 2
    51c6:	1c 93       	st	X, r17
    51c8:	0e 93       	st	-X, r16
    51ca:	11 97       	sbiw	r26, 0x01	; 1
    51cc:	87 e2       	ldi	r24, 0x27	; 39
    51ce:	93 e2       	ldi	r25, 0x23	; 35
    51d0:	93 83       	std	Z+3, r25	; 0x03
    51d2:	82 83       	std	Z+2, r24	; 0x02
    51d4:	22 96       	adiw	r28, 0x02	; 2
    51d6:	2f ad       	ldd	r18, Y+63	; 0x3f
    51d8:	22 97       	sbiw	r28, 0x02	; 2
    51da:	24 83       	std	Z+4, r18	; 0x04
    51dc:	15 82       	std	Z+5, r1	; 0x05
    51de:	22 96       	adiw	r28, 0x02	; 2
    51e0:	2f af       	std	Y+63, r18	; 0x3f
    51e2:	22 97       	sbiw	r28, 0x02	; 2
    51e4:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	 uart_print(1, 0,strSend);
    51e8:	8d b7       	in	r24, 0x3d	; 61
    51ea:	9e b7       	in	r25, 0x3e	; 62
    51ec:	06 96       	adiw	r24, 0x06	; 6
    51ee:	0f b6       	in	r0, 0x3f	; 63
    51f0:	f8 94       	cli
    51f2:	9e bf       	out	0x3e, r25	; 62
    51f4:	0f be       	out	0x3f, r0	; 63
    51f6:	8d bf       	out	0x3d, r24	; 61
    51f8:	81 e0       	ldi	r24, 0x01	; 1
    51fa:	60 e0       	ldi	r22, 0x00	; 0
    51fc:	a8 01       	movw	r20, r16
    51fe:	0e 94 03 a6 	call	0x14c06	; 0x14c06 <uart_print>

     switch(MsgCode){
    5202:	22 96       	adiw	r28, 0x02	; 2
    5204:	2f ad       	ldd	r18, Y+63	; 0x3f
    5206:	22 97       	sbiw	r28, 0x02	; 2
    5208:	22 33       	cpi	r18, 0x32	; 50
    520a:	09 f4       	brne	.+2      	; 0x520e <IFTSendMessage+0x216>
    520c:	84 c0       	rjmp	.+264    	; 0x5316 <IFTSendMessage+0x31e>
    520e:	23 33       	cpi	r18, 0x33	; 51
    5210:	78 f4       	brcc	.+30     	; 0x5230 <IFTSendMessage+0x238>
    5212:	22 32       	cpi	r18, 0x22	; 34
    5214:	99 f1       	breq	.+102    	; 0x527c <IFTSendMessage+0x284>
    5216:	23 32       	cpi	r18, 0x23	; 35
    5218:	20 f4       	brcc	.+8      	; 0x5222 <IFTSendMessage+0x22a>
    521a:	24 30       	cpi	r18, 0x04	; 4
    521c:	09 f0       	breq	.+2      	; 0x5220 <IFTSendMessage+0x228>
    521e:	50 c2       	rjmp	.+1184   	; 0x56c0 <IFTSendMessage+0x6c8>
    5220:	1a c0       	rjmp	.+52     	; 0x5256 <IFTSendMessage+0x25e>
    5222:	24 32       	cpi	r18, 0x24	; 36
    5224:	09 f4       	brne	.+2      	; 0x5228 <IFTSendMessage+0x230>
    5226:	3f c0       	rjmp	.+126    	; 0x52a6 <IFTSendMessage+0x2ae>
    5228:	28 32       	cpi	r18, 0x28	; 40
    522a:	09 f0       	breq	.+2      	; 0x522e <IFTSendMessage+0x236>
    522c:	49 c2       	rjmp	.+1170   	; 0x56c0 <IFTSendMessage+0x6c8>
    522e:	57 c0       	rjmp	.+174    	; 0x52de <IFTSendMessage+0x2e6>
    5230:	20 39       	cpi	r18, 0x90	; 144
    5232:	09 f4       	brne	.+2      	; 0x5236 <IFTSendMessage+0x23e>
    5234:	aa c1       	rjmp	.+852    	; 0x558a <IFTSendMessage+0x592>
    5236:	21 39       	cpi	r18, 0x91	; 145
    5238:	38 f4       	brcc	.+14     	; 0x5248 <IFTSendMessage+0x250>
    523a:	26 35       	cpi	r18, 0x56	; 86
    523c:	09 f4       	brne	.+2      	; 0x5240 <IFTSendMessage+0x248>
    523e:	db c0       	rjmp	.+438    	; 0x53f6 <IFTSendMessage+0x3fe>
    5240:	28 35       	cpi	r18, 0x58	; 88
    5242:	09 f0       	breq	.+2      	; 0x5246 <IFTSendMessage+0x24e>
    5244:	3d c2       	rjmp	.+1146   	; 0x56c0 <IFTSendMessage+0x6c8>
    5246:	f3 c0       	rjmp	.+486    	; 0x542e <IFTSendMessage+0x436>
    5248:	22 39       	cpi	r18, 0x92	; 146
    524a:	09 f4       	brne	.+2      	; 0x524e <IFTSendMessage+0x256>
    524c:	bf c1       	rjmp	.+894    	; 0x55cc <IFTSendMessage+0x5d4>
    524e:	28 39       	cpi	r18, 0x98	; 152
    5250:	09 f0       	breq	.+2      	; 0x5254 <IFTSendMessage+0x25c>
    5252:	36 c2       	rjmp	.+1132   	; 0x56c0 <IFTSendMessage+0x6c8>
    5254:	12 c2       	rjmp	.+1060   	; 0x567a <IFTSendMessage+0x682>
	 case MSG_04://Transaction Number
	      sprintf_P(strSend,PSTR("%s1"),strTranNo);
    5256:	00 d0       	rcall	.+0      	; 0x5258 <IFTSendMessage+0x260>
    5258:	00 d0       	rcall	.+0      	; 0x525a <IFTSendMessage+0x262>
    525a:	00 d0       	rcall	.+0      	; 0x525c <IFTSendMessage+0x264>
    525c:	ed b7       	in	r30, 0x3d	; 61
    525e:	fe b7       	in	r31, 0x3e	; 62
    5260:	31 96       	adiw	r30, 0x01	; 1
    5262:	ad b7       	in	r26, 0x3d	; 61
    5264:	be b7       	in	r27, 0x3e	; 62
    5266:	12 96       	adiw	r26, 0x02	; 2
    5268:	1c 93       	st	X, r17
    526a:	0e 93       	st	-X, r16
    526c:	11 97       	sbiw	r26, 0x01	; 1
    526e:	83 e2       	ldi	r24, 0x23	; 35
    5270:	93 e2       	ldi	r25, 0x23	; 35
    5272:	93 83       	std	Z+3, r25	; 0x03
    5274:	82 83       	std	Z+2, r24	; 0x02
    5276:	8c e8       	ldi	r24, 0x8C	; 140
    5278:	9d e0       	ldi	r25, 0x0D	; 13
    527a:	11 c2       	rjmp	.+1058   	; 0x569e <IFTSendMessage+0x6a6>
	      uart_print(1, 0,strSend);
	      break;
	 case MSG_10://No Additional Parameter
	      break;
	 case MSG_22://strCardID
	      UpdateCardID();
    527c:	0e 94 e7 15 	call	0x2bce	; 0x2bce <UpdateCardID>
	      sprintf_P(strSend,PSTR("%s"),strCardID);
    5280:	00 d0       	rcall	.+0      	; 0x5282 <IFTSendMessage+0x28a>
    5282:	00 d0       	rcall	.+0      	; 0x5284 <IFTSendMessage+0x28c>
    5284:	00 d0       	rcall	.+0      	; 0x5286 <IFTSendMessage+0x28e>
    5286:	ed b7       	in	r30, 0x3d	; 61
    5288:	fe b7       	in	r31, 0x3e	; 62
    528a:	31 96       	adiw	r30, 0x01	; 1
    528c:	ad b7       	in	r26, 0x3d	; 61
    528e:	be b7       	in	r27, 0x3e	; 62
    5290:	12 96       	adiw	r26, 0x02	; 2
    5292:	1c 93       	st	X, r17
    5294:	0e 93       	st	-X, r16
    5296:	11 97       	sbiw	r26, 0x01	; 1
    5298:	80 e2       	ldi	r24, 0x20	; 32
    529a:	93 e2       	ldi	r25, 0x23	; 35
    529c:	93 83       	std	Z+3, r25	; 0x03
    529e:	82 83       	std	Z+2, r24	; 0x02
    52a0:	8d e6       	ldi	r24, 0x6D	; 109
    52a2:	9c e0       	ldi	r25, 0x0C	; 12
    52a4:	fc c1       	rjmp	.+1016   	; 0x569e <IFTSendMessage+0x6a6>
	      uart_print(1, 0,strSend);
	      break;
	 case MSG_24://strCardID, FIP_ID
	      UpdateCardID();
    52a6:	0e 94 e7 15 	call	0x2bce	; 0x2bce <UpdateCardID>
	      sprintf_P(strSend,PSTR("%s%s"),strCardID,strFIP_ID);
    52aa:	ad b7       	in	r26, 0x3d	; 61
    52ac:	be b7       	in	r27, 0x3e	; 62
    52ae:	18 97       	sbiw	r26, 0x08	; 8
    52b0:	0f b6       	in	r0, 0x3f	; 63
    52b2:	f8 94       	cli
    52b4:	be bf       	out	0x3e, r27	; 62
    52b6:	0f be       	out	0x3f, r0	; 63
    52b8:	ad bf       	out	0x3d, r26	; 61
    52ba:	ed b7       	in	r30, 0x3d	; 61
    52bc:	fe b7       	in	r31, 0x3e	; 62
    52be:	31 96       	adiw	r30, 0x01	; 1
    52c0:	12 96       	adiw	r26, 0x02	; 2
    52c2:	1c 93       	st	X, r17
    52c4:	0e 93       	st	-X, r16
    52c6:	11 97       	sbiw	r26, 0x01	; 1
    52c8:	8b e1       	ldi	r24, 0x1B	; 27
    52ca:	93 e2       	ldi	r25, 0x23	; 35
    52cc:	93 83       	std	Z+3, r25	; 0x03
    52ce:	82 83       	std	Z+2, r24	; 0x02
    52d0:	8d e6       	ldi	r24, 0x6D	; 109
    52d2:	9c e0       	ldi	r25, 0x0C	; 12
    52d4:	95 83       	std	Z+5, r25	; 0x05
    52d6:	84 83       	std	Z+4, r24	; 0x04
    52d8:	8d e9       	ldi	r24, 0x9D	; 157
    52da:	98 e0       	ldi	r25, 0x08	; 8
    52dc:	6f c1       	rjmp	.+734    	; 0x55bc <IFTSendMessage+0x5c4>
	      uart_print(1, 0,strSend);
	      break;

	 case MSG_28://strCardID, FIP_ID
	      UpdateCardID();
    52de:	0e 94 e7 15 	call	0x2bce	; 0x2bce <UpdateCardID>
	      sprintf_P(strSend,PSTR("%s%s"),strFIP_ID,strCardID);
    52e2:	ad b7       	in	r26, 0x3d	; 61
    52e4:	be b7       	in	r27, 0x3e	; 62
    52e6:	18 97       	sbiw	r26, 0x08	; 8
    52e8:	0f b6       	in	r0, 0x3f	; 63
    52ea:	f8 94       	cli
    52ec:	be bf       	out	0x3e, r27	; 62
    52ee:	0f be       	out	0x3f, r0	; 63
    52f0:	ad bf       	out	0x3d, r26	; 61
    52f2:	ed b7       	in	r30, 0x3d	; 61
    52f4:	fe b7       	in	r31, 0x3e	; 62
    52f6:	31 96       	adiw	r30, 0x01	; 1
    52f8:	12 96       	adiw	r26, 0x02	; 2
    52fa:	1c 93       	st	X, r17
    52fc:	0e 93       	st	-X, r16
    52fe:	11 97       	sbiw	r26, 0x01	; 1
    5300:	86 e1       	ldi	r24, 0x16	; 22
    5302:	93 e2       	ldi	r25, 0x23	; 35
    5304:	93 83       	std	Z+3, r25	; 0x03
    5306:	82 83       	std	Z+2, r24	; 0x02
    5308:	8d e9       	ldi	r24, 0x9D	; 157
    530a:	98 e0       	ldi	r25, 0x08	; 8
    530c:	95 83       	std	Z+5, r25	; 0x05
    530e:	84 83       	std	Z+4, r24	; 0x04
    5310:	8d e6       	ldi	r24, 0x6D	; 109
    5312:	9c e0       	ldi	r25, 0x0C	; 12
    5314:	53 c1       	rjmp	.+678    	; 0x55bc <IFTSendMessage+0x5c4>
	      uart_print(1, 0,strSend);
	      break;
	 case MSG_32://Change MOP
	      UpdateCardID();
    5316:	0e 94 e7 15 	call	0x2bce	; 0x2bce <UpdateCardID>
	      sprintf_P(strSend,PSTR("%s%s"),strFIP_ID,strPaymentType);
    531a:	ad b7       	in	r26, 0x3d	; 61
    531c:	be b7       	in	r27, 0x3e	; 62
    531e:	18 97       	sbiw	r26, 0x08	; 8
    5320:	0f b6       	in	r0, 0x3f	; 63
    5322:	f8 94       	cli
    5324:	be bf       	out	0x3e, r27	; 62
    5326:	0f be       	out	0x3f, r0	; 63
    5328:	ad bf       	out	0x3d, r26	; 61
    532a:	ed b7       	in	r30, 0x3d	; 61
    532c:	fe b7       	in	r31, 0x3e	; 62
    532e:	31 96       	adiw	r30, 0x01	; 1
    5330:	12 96       	adiw	r26, 0x02	; 2
    5332:	1c 93       	st	X, r17
    5334:	0e 93       	st	-X, r16
    5336:	11 97       	sbiw	r26, 0x01	; 1
    5338:	81 e1       	ldi	r24, 0x11	; 17
    533a:	93 e2       	ldi	r25, 0x23	; 35
    533c:	93 83       	std	Z+3, r25	; 0x03
    533e:	82 83       	std	Z+2, r24	; 0x02
    5340:	8d e9       	ldi	r24, 0x9D	; 157
    5342:	98 e0       	ldi	r25, 0x08	; 8
    5344:	95 83       	std	Z+5, r25	; 0x05
    5346:	84 83       	std	Z+4, r24	; 0x04
    5348:	84 e3       	ldi	r24, 0x34	; 52
    534a:	98 e0       	ldi	r25, 0x08	; 8
    534c:	97 83       	std	Z+7, r25	; 0x07
    534e:	86 83       	std	Z+6, r24	; 0x06
    5350:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	      uart_print(1,0,strSend);
    5354:	8d b7       	in	r24, 0x3d	; 61
    5356:	9e b7       	in	r25, 0x3e	; 62
    5358:	08 96       	adiw	r24, 0x08	; 8
    535a:	0f b6       	in	r0, 0x3f	; 63
    535c:	f8 94       	cli
    535e:	9e bf       	out	0x3e, r25	; 62
    5360:	0f be       	out	0x3f, r0	; 63
    5362:	8d bf       	out	0x3d, r24	; 61
    5364:	81 e0       	ldi	r24, 0x01	; 1
    5366:	60 e0       	ldi	r22, 0x00	; 0
    5368:	a8 01       	movw	r20, r16
    536a:	0e 94 03 a6 	call	0x14c06	; 0x14c06 <uart_print>
		  sprintf_P(strSend,PSTR("%s%s"),strRef1,strRef2);
    536e:	ad b7       	in	r26, 0x3d	; 61
    5370:	be b7       	in	r27, 0x3e	; 62
    5372:	18 97       	sbiw	r26, 0x08	; 8
    5374:	0f b6       	in	r0, 0x3f	; 63
    5376:	f8 94       	cli
    5378:	be bf       	out	0x3e, r27	; 62
    537a:	0f be       	out	0x3f, r0	; 63
    537c:	ad bf       	out	0x3d, r26	; 61
    537e:	ed b7       	in	r30, 0x3d	; 61
    5380:	fe b7       	in	r31, 0x3e	; 62
    5382:	31 96       	adiw	r30, 0x01	; 1
    5384:	12 96       	adiw	r26, 0x02	; 2
    5386:	1c 93       	st	X, r17
    5388:	0e 93       	st	-X, r16
    538a:	11 97       	sbiw	r26, 0x01	; 1
    538c:	8c e0       	ldi	r24, 0x0C	; 12
    538e:	93 e2       	ldi	r25, 0x23	; 35
    5390:	93 83       	std	Z+3, r25	; 0x03
    5392:	82 83       	std	Z+2, r24	; 0x02
    5394:	83 e9       	ldi	r24, 0x93	; 147
    5396:	9d e0       	ldi	r25, 0x0D	; 13
    5398:	95 83       	std	Z+5, r25	; 0x05
    539a:	84 83       	std	Z+4, r24	; 0x04
    539c:	82 e8       	ldi	r24, 0x82	; 130
    539e:	9c e0       	ldi	r25, 0x0C	; 12
    53a0:	97 83       	std	Z+7, r25	; 0x07
    53a2:	86 83       	std	Z+6, r24	; 0x06
    53a4:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		  uart_print(1,0,strSend);
    53a8:	8d b7       	in	r24, 0x3d	; 61
    53aa:	9e b7       	in	r25, 0x3e	; 62
    53ac:	08 96       	adiw	r24, 0x08	; 8
    53ae:	0f b6       	in	r0, 0x3f	; 63
    53b0:	f8 94       	cli
    53b2:	9e bf       	out	0x3e, r25	; 62
    53b4:	0f be       	out	0x3f, r0	; 63
    53b6:	8d bf       	out	0x3d, r24	; 61
    53b8:	81 e0       	ldi	r24, 0x01	; 1
    53ba:	60 e0       	ldi	r22, 0x00	; 0
    53bc:	a8 01       	movw	r20, r16
    53be:	0e 94 03 a6 	call	0x14c06	; 0x14c06 <uart_print>
		  sprintf_P(strSend,PSTR("%s%s"),strRef3,strRef4);
    53c2:	ad b7       	in	r26, 0x3d	; 61
    53c4:	be b7       	in	r27, 0x3e	; 62
    53c6:	18 97       	sbiw	r26, 0x08	; 8
    53c8:	0f b6       	in	r0, 0x3f	; 63
    53ca:	f8 94       	cli
    53cc:	be bf       	out	0x3e, r27	; 62
    53ce:	0f be       	out	0x3f, r0	; 63
    53d0:	ad bf       	out	0x3d, r26	; 61
    53d2:	ed b7       	in	r30, 0x3d	; 61
    53d4:	fe b7       	in	r31, 0x3e	; 62
    53d6:	31 96       	adiw	r30, 0x01	; 1
    53d8:	12 96       	adiw	r26, 0x02	; 2
    53da:	1c 93       	st	X, r17
    53dc:	0e 93       	st	-X, r16
    53de:	11 97       	sbiw	r26, 0x01	; 1
    53e0:	87 e0       	ldi	r24, 0x07	; 7
    53e2:	93 e2       	ldi	r25, 0x23	; 35
    53e4:	93 83       	std	Z+3, r25	; 0x03
    53e6:	82 83       	std	Z+2, r24	; 0x02
    53e8:	81 e6       	ldi	r24, 0x61	; 97
    53ea:	99 e0       	ldi	r25, 0x09	; 9
    53ec:	95 83       	std	Z+5, r25	; 0x05
    53ee:	84 83       	std	Z+4, r24	; 0x04
    53f0:	89 e8       	ldi	r24, 0x89	; 137
    53f2:	94 e0       	ldi	r25, 0x04	; 4
    53f4:	e3 c0       	rjmp	.+454    	; 0x55bc <IFTSendMessage+0x5c4>
		  uart_print(1,0,strSend);
	      break;

	 case MSG_56://strCardID, FIP_ID
	      UpdateCardID();
    53f6:	0e 94 e7 15 	call	0x2bce	; 0x2bce <UpdateCardID>
	      sprintf_P(strSend,PSTR("%sV%s"),strCardID,strCardType);
    53fa:	ad b7       	in	r26, 0x3d	; 61
    53fc:	be b7       	in	r27, 0x3e	; 62
    53fe:	18 97       	sbiw	r26, 0x08	; 8
    5400:	0f b6       	in	r0, 0x3f	; 63
    5402:	f8 94       	cli
    5404:	be bf       	out	0x3e, r27	; 62
    5406:	0f be       	out	0x3f, r0	; 63
    5408:	ad bf       	out	0x3d, r26	; 61
    540a:	ed b7       	in	r30, 0x3d	; 61
    540c:	fe b7       	in	r31, 0x3e	; 62
    540e:	31 96       	adiw	r30, 0x01	; 1
    5410:	12 96       	adiw	r26, 0x02	; 2
    5412:	1c 93       	st	X, r17
    5414:	0e 93       	st	-X, r16
    5416:	11 97       	sbiw	r26, 0x01	; 1
    5418:	81 e0       	ldi	r24, 0x01	; 1
    541a:	93 e2       	ldi	r25, 0x23	; 35
    541c:	93 83       	std	Z+3, r25	; 0x03
    541e:	82 83       	std	Z+2, r24	; 0x02
    5420:	8d e6       	ldi	r24, 0x6D	; 109
    5422:	9c e0       	ldi	r25, 0x0C	; 12
    5424:	95 83       	std	Z+5, r25	; 0x05
    5426:	84 83       	std	Z+4, r24	; 0x04
    5428:	88 ea       	ldi	r24, 0xA8	; 168
    542a:	9d e0       	ldi	r25, 0x0D	; 13
    542c:	c7 c0       	rjmp	.+398    	; 0x55bc <IFTSendMessage+0x5c4>
		  //sprintf_P(strSend,PSTR("%s"),strCardID);
	      uart_print(1, 0,strSend);
	      break;
	 case MSG_58://Request Local Account Transaction
	      UpdateCardID();
    542e:	0e 94 e7 15 	call	0x2bce	; 0x2bce <UpdateCardID>
		  AddSpaceLead(strBalanceValue,13);
    5432:	38 e1       	ldi	r19, 0x18	; 24
    5434:	e3 2e       	mov	r14, r19
    5436:	3d e0       	ldi	r19, 0x0D	; 13
    5438:	f3 2e       	mov	r15, r19
    543a:	c7 01       	movw	r24, r14
    543c:	6d e0       	ldi	r22, 0x0D	; 13
    543e:	0e 94 93 27 	call	0x4f26	; 0x4f26 <AddSpaceLead>
		  AddSpaceLead(strOdometer,10);
    5442:	27 ea       	ldi	r18, 0xA7	; 167
    5444:	c2 2e       	mov	r12, r18
    5446:	24 e0       	ldi	r18, 0x04	; 4
    5448:	d2 2e       	mov	r13, r18
    544a:	c6 01       	movw	r24, r12
    544c:	6a e0       	ldi	r22, 0x0A	; 10
    544e:	0e 94 93 27 	call	0x4f26	; 0x4f26 <AddSpaceLead>
		  //CardType=0;
		  sprintf_P(strSend,PSTR("%s%s%d"),strCardID,strFIP_ID,NozzleID);
    5452:	ad b7       	in	r26, 0x3d	; 61
    5454:	be b7       	in	r27, 0x3e	; 62
    5456:	1a 97       	sbiw	r26, 0x0a	; 10
    5458:	0f b6       	in	r0, 0x3f	; 63
    545a:	f8 94       	cli
    545c:	be bf       	out	0x3e, r27	; 62
    545e:	0f be       	out	0x3f, r0	; 63
    5460:	ad bf       	out	0x3d, r26	; 61
    5462:	ed b7       	in	r30, 0x3d	; 61
    5464:	fe b7       	in	r31, 0x3e	; 62
    5466:	31 96       	adiw	r30, 0x01	; 1
    5468:	12 96       	adiw	r26, 0x02	; 2
    546a:	1c 93       	st	X, r17
    546c:	0e 93       	st	-X, r16
    546e:	11 97       	sbiw	r26, 0x01	; 1
    5470:	8a ef       	ldi	r24, 0xFA	; 250
    5472:	92 e2       	ldi	r25, 0x22	; 34
    5474:	93 83       	std	Z+3, r25	; 0x03
    5476:	82 83       	std	Z+2, r24	; 0x02
    5478:	8d e6       	ldi	r24, 0x6D	; 109
    547a:	9c e0       	ldi	r25, 0x0C	; 12
    547c:	95 83       	std	Z+5, r25	; 0x05
    547e:	84 83       	std	Z+4, r24	; 0x04
    5480:	8d e9       	ldi	r24, 0x9D	; 157
    5482:	98 e0       	ldi	r25, 0x08	; 8
    5484:	97 83       	std	Z+7, r25	; 0x07
    5486:	86 83       	std	Z+6, r24	; 0x06
    5488:	80 91 51 08 	lds	r24, 0x0851
    548c:	80 87       	std	Z+8, r24	; 0x08
    548e:	11 86       	std	Z+9, r1	; 0x09
    5490:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		  uart_print(1,0,strSend);
    5494:	8d b7       	in	r24, 0x3d	; 61
    5496:	9e b7       	in	r25, 0x3e	; 62
    5498:	0a 96       	adiw	r24, 0x0a	; 10
    549a:	0f b6       	in	r0, 0x3f	; 63
    549c:	f8 94       	cli
    549e:	9e bf       	out	0x3e, r25	; 62
    54a0:	0f be       	out	0x3f, r0	; 63
    54a2:	8d bf       	out	0x3d, r24	; 61
    54a4:	81 e0       	ldi	r24, 0x01	; 1
    54a6:	60 e0       	ldi	r22, 0x00	; 0
    54a8:	a8 01       	movw	r20, r16
    54aa:	0e 94 03 a6 	call	0x14c06	; 0x14c06 <uart_print>
		  //sprintf_P(strSend,PSTR("%s%s%d"),strBalanceType,strBalanceValue,CardType);
		  sprintf_P(strSend,PSTR("%s%s%s"),strBalanceType,strBalanceValue,strCardType);
    54ae:	ad b7       	in	r26, 0x3d	; 61
    54b0:	be b7       	in	r27, 0x3e	; 62
    54b2:	1a 97       	sbiw	r26, 0x0a	; 10
    54b4:	0f b6       	in	r0, 0x3f	; 63
    54b6:	f8 94       	cli
    54b8:	be bf       	out	0x3e, r27	; 62
    54ba:	0f be       	out	0x3f, r0	; 63
    54bc:	ad bf       	out	0x3d, r26	; 61
    54be:	ed b7       	in	r30, 0x3d	; 61
    54c0:	fe b7       	in	r31, 0x3e	; 62
    54c2:	31 96       	adiw	r30, 0x01	; 1
    54c4:	12 96       	adiw	r26, 0x02	; 2
    54c6:	1c 93       	st	X, r17
    54c8:	0e 93       	st	-X, r16
    54ca:	11 97       	sbiw	r26, 0x01	; 1
    54cc:	83 ef       	ldi	r24, 0xF3	; 243
    54ce:	92 e2       	ldi	r25, 0x22	; 34
    54d0:	93 83       	std	Z+3, r25	; 0x03
    54d2:	82 83       	std	Z+2, r24	; 0x02
    54d4:	87 e8       	ldi	r24, 0x87	; 135
    54d6:	94 e0       	ldi	r25, 0x04	; 4
    54d8:	95 83       	std	Z+5, r25	; 0x05
    54da:	84 83       	std	Z+4, r24	; 0x04
    54dc:	f7 82       	std	Z+7, r15	; 0x07
    54de:	e6 82       	std	Z+6, r14	; 0x06
    54e0:	88 ea       	ldi	r24, 0xA8	; 168
    54e2:	9d e0       	ldi	r25, 0x0D	; 13
    54e4:	91 87       	std	Z+9, r25	; 0x09
    54e6:	80 87       	std	Z+8, r24	; 0x08
    54e8:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		  uart_print(1,0,strSend);
    54ec:	8d b7       	in	r24, 0x3d	; 61
    54ee:	9e b7       	in	r25, 0x3e	; 62
    54f0:	0a 96       	adiw	r24, 0x0a	; 10
    54f2:	0f b6       	in	r0, 0x3f	; 63
    54f4:	f8 94       	cli
    54f6:	9e bf       	out	0x3e, r25	; 62
    54f8:	0f be       	out	0x3f, r0	; 63
    54fa:	8d bf       	out	0x3d, r24	; 61
    54fc:	81 e0       	ldi	r24, 0x01	; 1
    54fe:	60 e0       	ldi	r22, 0x00	; 0
    5500:	a8 01       	movw	r20, r16
    5502:	0e 94 03 a6 	call	0x14c06	; 0x14c06 <uart_print>
		  uart_printf(1,0,PSTR("F0000000E123456FFFFF"));
    5506:	81 e0       	ldi	r24, 0x01	; 1
    5508:	60 e0       	ldi	r22, 0x00	; 0
    550a:	4e ed       	ldi	r20, 0xDE	; 222
    550c:	52 e2       	ldi	r21, 0x22	; 34
    550e:	0e 94 2c a6 	call	0x14c58	; 0x14c58 <uart_printf>
		  sprintf_P(strSend,PSTR("%s"),strOdometer);
    5512:	00 d0       	rcall	.+0      	; 0x5514 <IFTSendMessage+0x51c>
    5514:	00 d0       	rcall	.+0      	; 0x5516 <IFTSendMessage+0x51e>
    5516:	00 d0       	rcall	.+0      	; 0x5518 <IFTSendMessage+0x520>
    5518:	ed b7       	in	r30, 0x3d	; 61
    551a:	fe b7       	in	r31, 0x3e	; 62
    551c:	31 96       	adiw	r30, 0x01	; 1
    551e:	ad b7       	in	r26, 0x3d	; 61
    5520:	be b7       	in	r27, 0x3e	; 62
    5522:	12 96       	adiw	r26, 0x02	; 2
    5524:	1c 93       	st	X, r17
    5526:	0e 93       	st	-X, r16
    5528:	11 97       	sbiw	r26, 0x01	; 1
    552a:	8b ed       	ldi	r24, 0xDB	; 219
    552c:	92 e2       	ldi	r25, 0x22	; 34
    552e:	93 83       	std	Z+3, r25	; 0x03
    5530:	82 83       	std	Z+2, r24	; 0x02
    5532:	d5 82       	std	Z+5, r13	; 0x05
    5534:	c4 82       	std	Z+4, r12	; 0x04
    5536:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		  uart_print(1,0,strSend);
    553a:	8d b7       	in	r24, 0x3d	; 61
    553c:	9e b7       	in	r25, 0x3e	; 62
    553e:	06 96       	adiw	r24, 0x06	; 6
    5540:	0f b6       	in	r0, 0x3f	; 63
    5542:	f8 94       	cli
    5544:	9e bf       	out	0x3e, r25	; 62
    5546:	0f be       	out	0x3f, r0	; 63
    5548:	8d bf       	out	0x3d, r24	; 61
    554a:	81 e0       	ldi	r24, 0x01	; 1
    554c:	60 e0       	ldi	r22, 0x00	; 0
    554e:	a8 01       	movw	r20, r16
    5550:	0e 94 03 a6 	call	0x14c06	; 0x14c06 <uart_print>
		  AddSpaceLead(strMasterCard,20);
    5554:	97 eb       	ldi	r25, 0xB7	; 183
    5556:	e9 2e       	mov	r14, r25
    5558:	9c e0       	ldi	r25, 0x0C	; 12
    555a:	f9 2e       	mov	r15, r25
    555c:	c7 01       	movw	r24, r14
    555e:	64 e1       	ldi	r22, 0x14	; 20
    5560:	0e 94 93 27 	call	0x4f26	; 0x4f26 <AddSpaceLead>
		  sprintf_P(strSend,PSTR("%s"),strMasterCard);
    5564:	00 d0       	rcall	.+0      	; 0x5566 <IFTSendMessage+0x56e>
    5566:	00 d0       	rcall	.+0      	; 0x5568 <IFTSendMessage+0x570>
    5568:	00 d0       	rcall	.+0      	; 0x556a <IFTSendMessage+0x572>
    556a:	ed b7       	in	r30, 0x3d	; 61
    556c:	fe b7       	in	r31, 0x3e	; 62
    556e:	31 96       	adiw	r30, 0x01	; 1
    5570:	ad b7       	in	r26, 0x3d	; 61
    5572:	be b7       	in	r27, 0x3e	; 62
    5574:	12 96       	adiw	r26, 0x02	; 2
    5576:	1c 93       	st	X, r17
    5578:	0e 93       	st	-X, r16
    557a:	11 97       	sbiw	r26, 0x01	; 1
    557c:	88 ed       	ldi	r24, 0xD8	; 216
    557e:	92 e2       	ldi	r25, 0x22	; 34
    5580:	93 83       	std	Z+3, r25	; 0x03
    5582:	82 83       	std	Z+2, r24	; 0x02
    5584:	f5 82       	std	Z+5, r15	; 0x05
    5586:	e4 82       	std	Z+4, r14	; 0x04
    5588:	8c c0       	rjmp	.+280    	; 0x56a2 <IFTSendMessage+0x6aa>
		  uart_print(1,0,strSend);

		  break;
	 case MSG_90://Request EDC
	      sprintf_P(strSend,PSTR("%s%s"),strFIP_ID,strRef1);
    558a:	ad b7       	in	r26, 0x3d	; 61
    558c:	be b7       	in	r27, 0x3e	; 62
    558e:	18 97       	sbiw	r26, 0x08	; 8
    5590:	0f b6       	in	r0, 0x3f	; 63
    5592:	f8 94       	cli
    5594:	be bf       	out	0x3e, r27	; 62
    5596:	0f be       	out	0x3f, r0	; 63
    5598:	ad bf       	out	0x3d, r26	; 61
    559a:	ed b7       	in	r30, 0x3d	; 61
    559c:	fe b7       	in	r31, 0x3e	; 62
    559e:	31 96       	adiw	r30, 0x01	; 1
    55a0:	12 96       	adiw	r26, 0x02	; 2
    55a2:	1c 93       	st	X, r17
    55a4:	0e 93       	st	-X, r16
    55a6:	11 97       	sbiw	r26, 0x01	; 1
    55a8:	83 ed       	ldi	r24, 0xD3	; 211
    55aa:	92 e2       	ldi	r25, 0x22	; 34
    55ac:	93 83       	std	Z+3, r25	; 0x03
    55ae:	82 83       	std	Z+2, r24	; 0x02
    55b0:	8d e9       	ldi	r24, 0x9D	; 157
    55b2:	98 e0       	ldi	r25, 0x08	; 8
    55b4:	95 83       	std	Z+5, r25	; 0x05
    55b6:	84 83       	std	Z+4, r24	; 0x04
    55b8:	83 e9       	ldi	r24, 0x93	; 147
    55ba:	9d e0       	ldi	r25, 0x0D	; 13
    55bc:	97 83       	std	Z+7, r25	; 0x07
    55be:	86 83       	std	Z+6, r24	; 0x06
    55c0:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	      uart_print(1, 0,strSend);
    55c4:	8d b7       	in	r24, 0x3d	; 61
    55c6:	9e b7       	in	r25, 0x3e	; 62
    55c8:	08 96       	adiw	r24, 0x08	; 8
    55ca:	70 c0       	rjmp	.+224    	; 0x56ac <IFTSendMessage+0x6b4>
	      break;
	 case MSG_92://EDC Approval
		  sprintf_P(strSend,PSTR("%s%s%s%s"),strTranNo,strFIP_ID,strCardType,strCardID);
    55cc:	ad b7       	in	r26, 0x3d	; 61
    55ce:	be b7       	in	r27, 0x3e	; 62
    55d0:	1c 97       	sbiw	r26, 0x0c	; 12
    55d2:	0f b6       	in	r0, 0x3f	; 63
    55d4:	f8 94       	cli
    55d6:	be bf       	out	0x3e, r27	; 62
    55d8:	0f be       	out	0x3f, r0	; 63
    55da:	ad bf       	out	0x3d, r26	; 61
    55dc:	ed b7       	in	r30, 0x3d	; 61
    55de:	fe b7       	in	r31, 0x3e	; 62
    55e0:	31 96       	adiw	r30, 0x01	; 1
    55e2:	12 96       	adiw	r26, 0x02	; 2
    55e4:	1c 93       	st	X, r17
    55e6:	0e 93       	st	-X, r16
    55e8:	11 97       	sbiw	r26, 0x01	; 1
    55ea:	8a ec       	ldi	r24, 0xCA	; 202
    55ec:	92 e2       	ldi	r25, 0x22	; 34
    55ee:	93 83       	std	Z+3, r25	; 0x03
    55f0:	82 83       	std	Z+2, r24	; 0x02
    55f2:	8c e8       	ldi	r24, 0x8C	; 140
    55f4:	9d e0       	ldi	r25, 0x0D	; 13
    55f6:	95 83       	std	Z+5, r25	; 0x05
    55f8:	84 83       	std	Z+4, r24	; 0x04
    55fa:	8d e9       	ldi	r24, 0x9D	; 157
    55fc:	98 e0       	ldi	r25, 0x08	; 8
    55fe:	97 83       	std	Z+7, r25	; 0x07
    5600:	86 83       	std	Z+6, r24	; 0x06
    5602:	88 ea       	ldi	r24, 0xA8	; 168
    5604:	9d e0       	ldi	r25, 0x0D	; 13
    5606:	91 87       	std	Z+9, r25	; 0x09
    5608:	80 87       	std	Z+8, r24	; 0x08
    560a:	8d e6       	ldi	r24, 0x6D	; 109
    560c:	9c e0       	ldi	r25, 0x0C	; 12
    560e:	93 87       	std	Z+11, r25	; 0x0b
    5610:	82 87       	std	Z+10, r24	; 0x0a
    5612:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	      uart_print(1,0,strSend);	    
    5616:	8d b7       	in	r24, 0x3d	; 61
    5618:	9e b7       	in	r25, 0x3e	; 62
    561a:	0c 96       	adiw	r24, 0x0c	; 12
    561c:	0f b6       	in	r0, 0x3f	; 63
    561e:	f8 94       	cli
    5620:	9e bf       	out	0x3e, r25	; 62
    5622:	0f be       	out	0x3f, r0	; 63
    5624:	8d bf       	out	0x3d, r24	; 61
    5626:	81 e0       	ldi	r24, 0x01	; 1
    5628:	60 e0       	ldi	r22, 0x00	; 0
    562a:	a8 01       	movw	r20, r16
    562c:	0e 94 03 a6 	call	0x14c06	; 0x14c06 <uart_print>
		  sprintf_P(strSend,PSTR("%s%s%s"),strApprovalCode,strInvoiceNumber,strDateTime);
    5630:	ad b7       	in	r26, 0x3d	; 61
    5632:	be b7       	in	r27, 0x3e	; 62
    5634:	1a 97       	sbiw	r26, 0x0a	; 10
    5636:	0f b6       	in	r0, 0x3f	; 63
    5638:	f8 94       	cli
    563a:	be bf       	out	0x3e, r27	; 62
    563c:	0f be       	out	0x3f, r0	; 63
    563e:	ad bf       	out	0x3d, r26	; 61
    5640:	ed b7       	in	r30, 0x3d	; 61
    5642:	fe b7       	in	r31, 0x3e	; 62
    5644:	31 96       	adiw	r30, 0x01	; 1
    5646:	12 96       	adiw	r26, 0x02	; 2
    5648:	1c 93       	st	X, r17
    564a:	0e 93       	st	-X, r16
    564c:	11 97       	sbiw	r26, 0x01	; 1
    564e:	83 ec       	ldi	r24, 0xC3	; 195
    5650:	92 e2       	ldi	r25, 0x22	; 34
    5652:	93 83       	std	Z+3, r25	; 0x03
    5654:	82 83       	std	Z+2, r24	; 0x02
    5656:	84 ed       	ldi	r24, 0xD4	; 212
    5658:	98 e0       	ldi	r25, 0x08	; 8
    565a:	95 83       	std	Z+5, r25	; 0x05
    565c:	84 83       	std	Z+4, r24	; 0x04
    565e:	87 e3       	ldi	r24, 0x37	; 55
    5660:	98 e0       	ldi	r25, 0x08	; 8
    5662:	97 83       	std	Z+7, r25	; 0x07
    5664:	86 83       	std	Z+6, r24	; 0x06
    5666:	83 ea       	ldi	r24, 0xA3	; 163
    5668:	9c e0       	ldi	r25, 0x0C	; 12
    566a:	91 87       	std	Z+9, r25	; 0x09
    566c:	80 87       	std	Z+8, r24	; 0x08
    566e:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	      uart_print(1,0,strSend);
    5672:	8d b7       	in	r24, 0x3d	; 61
    5674:	9e b7       	in	r25, 0x3e	; 62
    5676:	0a 96       	adiw	r24, 0x0a	; 10
    5678:	19 c0       	rjmp	.+50     	; 0x56ac <IFTSendMessage+0x6b4>
	      break;	 
	 case MSG_98://Request Transaction Info
	      sprintf_P(strSend,PSTR("%s"),strFIP_ID);
    567a:	00 d0       	rcall	.+0      	; 0x567c <IFTSendMessage+0x684>
    567c:	00 d0       	rcall	.+0      	; 0x567e <IFTSendMessage+0x686>
    567e:	00 d0       	rcall	.+0      	; 0x5680 <IFTSendMessage+0x688>
    5680:	ed b7       	in	r30, 0x3d	; 61
    5682:	fe b7       	in	r31, 0x3e	; 62
    5684:	31 96       	adiw	r30, 0x01	; 1
    5686:	ad b7       	in	r26, 0x3d	; 61
    5688:	be b7       	in	r27, 0x3e	; 62
    568a:	12 96       	adiw	r26, 0x02	; 2
    568c:	1c 93       	st	X, r17
    568e:	0e 93       	st	-X, r16
    5690:	11 97       	sbiw	r26, 0x01	; 1
    5692:	80 ec       	ldi	r24, 0xC0	; 192
    5694:	92 e2       	ldi	r25, 0x22	; 34
    5696:	93 83       	std	Z+3, r25	; 0x03
    5698:	82 83       	std	Z+2, r24	; 0x02
    569a:	8d e9       	ldi	r24, 0x9D	; 157
    569c:	98 e0       	ldi	r25, 0x08	; 8
    569e:	95 83       	std	Z+5, r25	; 0x05
    56a0:	84 83       	std	Z+4, r24	; 0x04
    56a2:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	      uart_print(1, 0,strSend);
    56a6:	8d b7       	in	r24, 0x3d	; 61
    56a8:	9e b7       	in	r25, 0x3e	; 62
    56aa:	06 96       	adiw	r24, 0x06	; 6
    56ac:	0f b6       	in	r0, 0x3f	; 63
    56ae:	f8 94       	cli
    56b0:	9e bf       	out	0x3e, r25	; 62
    56b2:	0f be       	out	0x3f, r0	; 63
    56b4:	8d bf       	out	0x3d, r24	; 61
    56b6:	81 e0       	ldi	r24, 0x01	; 1
    56b8:	60 e0       	ldi	r22, 0x00	; 0
    56ba:	a8 01       	movw	r20, r16
    56bc:	0e 94 03 a6 	call	0x14c06	; 0x14c06 <uart_print>
	      break;

	 }     
     //[Checksum]
	 uart_printf(1,0,PSTR("F968CFFB"));
    56c0:	81 e0       	ldi	r24, 0x01	; 1
    56c2:	60 e0       	ldi	r22, 0x00	; 0
    56c4:	47 eb       	ldi	r20, 0xB7	; 183
    56c6:	52 e2       	ldi	r21, 0x22	; 34
    56c8:	0e 94 2c a6 	call	0x14c58	; 0x14c58 <uart_printf>
	 //ETX
	 uart(1, 1,0x02);
    56cc:	81 e0       	ldi	r24, 0x01	; 1
    56ce:	61 e0       	ldi	r22, 0x01	; 1
    56d0:	42 e0       	ldi	r20, 0x02	; 2
    56d2:	0e 94 e6 a5 	call	0x14bcc	; 0x14bcc <uart>
}
    56d6:	cf 5b       	subi	r28, 0xBF	; 191
    56d8:	df 4f       	sbci	r29, 0xFF	; 255
    56da:	0f b6       	in	r0, 0x3f	; 63
    56dc:	f8 94       	cli
    56de:	de bf       	out	0x3e, r29	; 62
    56e0:	0f be       	out	0x3f, r0	; 63
    56e2:	cd bf       	out	0x3d, r28	; 61
    56e4:	cf 91       	pop	r28
    56e6:	df 91       	pop	r29
    56e8:	1f 91       	pop	r17
    56ea:	0f 91       	pop	r16
    56ec:	ff 90       	pop	r15
    56ee:	ef 90       	pop	r14
    56f0:	df 90       	pop	r13
    56f2:	cf 90       	pop	r12
    56f4:	08 95       	ret

000056f6 <sendMessage94>:
	sprintf_P(strSend,PSTR("E9445512"));
    //uart_print(0, 0,strSend);
    uart_print(1, 0,strSend);
	uart(1, 1,0x02);
	*/
	IFTSendMessage(MSG_94);
    56f6:	84 e9       	ldi	r24, 0x94	; 148
    56f8:	0e 94 fc 27 	call	0x4ff8	; 0x4ff8 <IFTSendMessage>
}
    56fc:	08 95       	ret

000056fe <sendMessage92>:
	sprintf_P(strSend,PSTR("E9445512"));
    //uart_print(0, 0,strSend);
    uart_print(1, 0,strSend);
	uart(1, 1,0x02);
	*/
	IFTSendMessage(MSG_92);
    56fe:	82 e9       	ldi	r24, 0x92	; 146
    5700:	0e 94 fc 27 	call	0x4ff8	; 0x4ff8 <IFTSendMessage>
}
    5704:	08 95       	ret

00005706 <sendMessage90>:
    uart_print(1, 0,strSend);
	sprintf_P(strSend,PSTR("E9445512"));
    uart_print(1, 0,strSend);
	uart(1, 1,0x02);
	*/
	IFTSendMessage(MSG_90);
    5706:	80 e9       	ldi	r24, 0x90	; 144
    5708:	0e 94 fc 27 	call	0x4ff8	; 0x4ff8 <IFTSendMessage>
}
    570c:	08 95       	ret

0000570e <sendMessage58>:
	CardType=0;
	sprintf_P(strSend,PSTR("%dF0000000E123456FFFFF%sE9445512"),CardType,strOdometer);
    uart_print(1, 0,strSend);
	uart(1, 1,0x02);
	*/
	IFTSendMessage(MSG_58);
    570e:	88 e5       	ldi	r24, 0x58	; 88
    5710:	0e 94 fc 27 	call	0x4ff8	; 0x4ff8 <IFTSendMessage>
}
    5714:	08 95       	ret

00005716 <sendMessage56>:
    uart_print(1, 0,strSend);	

	uart_printf(1,0,PSTR("AF968CFFB"));
	uart(1, 1,0x02);
	*/
	IFTSendMessage(MSG_56);
    5716:	86 e5       	ldi	r24, 0x56	; 86
    5718:	0e 94 fc 27 	call	0x4ff8	; 0x4ff8 <IFTSendMessage>
}
    571c:	08 95       	ret

0000571e <sendMessage32>:
	sprintf_P(strSend,PSTR("%s%s"),strRef3,strRef4);
    uart_print(1, 0,strSend);
	sprintf_P(strSend,PSTR("F968CFFB"));
    uart_print(1, 0,strSend);
	uart(1, 1,0x02);
*/IFTSendMessage(MSG_32);
    571e:	82 e3       	ldi	r24, 0x32	; 50
    5720:	0e 94 fc 27 	call	0x4ff8	; 0x4ff8 <IFTSendMessage>
}
    5724:	08 95       	ret

00005726 <sendMessage28>:
    uart_print(1, 0,strSend);
	UpdateCardID();
	sprintf_P(strSend,PSTR("%s%sF968CFFB"),strFIP_ID,strCardID);
    uart_print(1, 0,strSend);
	uart(1, 1,0x02);
	*/IFTSendMessage(MSG_28);
    5726:	88 e2       	ldi	r24, 0x28	; 40
    5728:	0e 94 fc 27 	call	0x4ff8	; 0x4ff8 <IFTSendMessage>
}
    572c:	08 95       	ret

0000572e <sendMessage24>:
    uart_print(1, 0,strSend);
	UpdateCardID();
	sprintf_P(strSend,PSTR("%s%sF968CFFB"),strCardID,strFIP_ID);
    uart_print(1, 0,strSend);
	uart(1, 1,0x02);
	*/IFTSendMessage(MSG_24);
    572e:	84 e2       	ldi	r24, 0x24	; 36
    5730:	0e 94 fc 27 	call	0x4ff8	; 0x4ff8 <IFTSendMessage>
}
    5734:	08 95       	ret

00005736 <sendMessage22>:
    uart_print(1, 0,strSend);
	UpdateCardID();
	sprintf_P(strSend,PSTR("%sF968CFFB"),strCardID);
    uart_print(1, 0,strSend);
	uart(1, 1,0x02);
	*/IFTSendMessage(MSG_22);
    5736:	82 e2       	ldi	r24, 0x22	; 34
    5738:	0e 94 fc 27 	call	0x4ff8	; 0x4ff8 <IFTSendMessage>
}
    573c:	08 95       	ret

0000573e <sendMessage10>:
	sprintf_P(strSend,PSTR("%s%s%s%s10F968CFFB"),strIFT_ID,strSeqNum,strClientIP,strServerIP);
    uart_print(1, 0,strSend);
	uart(1, 1,0x02);
	IsNewPacket=True;
	*/
	IsNewPacket=True;
    573e:	81 e0       	ldi	r24, 0x01	; 1
    5740:	80 93 66 02 	sts	0x0266, r24
	IFTSendMessage(MSG_10);
    5744:	80 e1       	ldi	r24, 0x10	; 16
    5746:	0e 94 fc 27 	call	0x4ff8	; 0x4ff8 <IFTSendMessage>
}
    574a:	08 95       	ret

0000574c <sendMessage04>:
	 UpdateServerIP();//ReadDestIP
	 //strTranNo = strReceiptNum
	 sprintf_P(strSend,PSTR("%s%s%s%s04%s1F968CFFB"),strIFT_ID,strSeqNum,strClientIP,strServerIP,strTranNo);
     uart_print(1, 0,strSend);
	 uart(1, 1,0x02);
	 */IFTSendMessage(MSG_04);
    574c:	84 e0       	ldi	r24, 0x04	; 4
    574e:	0e 94 fc 27 	call	0x4ff8	; 0x4ff8 <IFTSendMessage>
}
    5752:	08 95       	ret

00005754 <AddZeroLag>:
	 }
}

void AddZeroLag(char *String,unsigned char Size){// [123]->12300
char i,Length;
     Length=strlen(String);
    5754:	fc 01       	movw	r30, r24
    5756:	01 90       	ld	r0, Z+
    5758:	00 20       	and	r0, r0
    575a:	e9 f7       	brne	.-6      	; 0x5756 <AddZeroLag+0x2>
    575c:	31 97       	sbiw	r30, 0x01	; 1
    575e:	e8 1b       	sub	r30, r24
    5760:	f9 0b       	sbc	r31, r25
  if (Length<Size){   
    5762:	e6 17       	cp	r30, r22
    5764:	60 f4       	brcc	.+24     	; 0x577e <AddZeroLag+0x2a>
     for(i=Length;i<Size;i++){
	    String[i]='0';
    5766:	20 e3       	ldi	r18, 0x30	; 48
    5768:	dc 01       	movw	r26, r24
    576a:	ae 0f       	add	r26, r30
    576c:	b1 1d       	adc	r27, r1
    576e:	2c 93       	st	X, r18

void AddZeroLag(char *String,unsigned char Size){// [123]->12300
char i,Length;
     Length=strlen(String);
  if (Length<Size){   
     for(i=Length;i<Size;i++){
    5770:	ef 5f       	subi	r30, 0xFF	; 255
    5772:	e6 17       	cp	r30, r22
    5774:	c8 f3       	brcs	.-14     	; 0x5768 <AddZeroLag+0x14>
	    String[i]='0';
	 }String[Size]=0;
    5776:	86 0f       	add	r24, r22
    5778:	91 1d       	adc	r25, r1
    577a:	fc 01       	movw	r30, r24
    577c:	10 82       	st	Z, r1
    577e:	08 95       	ret

00005780 <AddZeroLead>:
  }
}


void AddZeroLead(char *String,unsigned char Size){// 1234 ->0000001234
    5780:	9f 92       	push	r9
    5782:	af 92       	push	r10
    5784:	bf 92       	push	r11
    5786:	cf 92       	push	r12
    5788:	df 92       	push	r13
    578a:	ef 92       	push	r14
    578c:	ff 92       	push	r15
    578e:	0f 93       	push	r16
    5790:	1f 93       	push	r17
    5792:	df 93       	push	r29
    5794:	cf 93       	push	r28
    5796:	cd b7       	in	r28, 0x3d	; 61
    5798:	de b7       	in	r29, 0x3e	; 62
    579a:	6e 97       	sbiw	r28, 0x1e	; 30
    579c:	0f b6       	in	r0, 0x3f	; 63
    579e:	f8 94       	cli
    57a0:	de bf       	out	0x3e, r29	; 62
    57a2:	0f be       	out	0x3f, r0	; 63
    57a4:	cd bf       	out	0x3d, r28	; 61
     char i,Length,strAdded[30];
     Length=strlen(String);
    57a6:	dc 01       	movw	r26, r24
    57a8:	0d 90       	ld	r0, X+
    57aa:	00 20       	and	r0, r0
    57ac:	e9 f7       	brne	.-6      	; 0x57a8 <AddZeroLead+0x28>
    57ae:	11 97       	sbiw	r26, 0x01	; 1
    57b0:	4a 2f       	mov	r20, r26
    57b2:	48 1b       	sub	r20, r24

	 if (Size>Length){
    57b4:	46 17       	cp	r20, r22
    57b6:	d8 f5       	brcc	.+118    	; 0x582e <AddZeroLead+0xae>
    57b8:	fe 01       	movw	r30, r28
    57ba:	31 96       	adiw	r30, 0x01	; 1
	 }String[Size]=0;
  }
}


void AddZeroLead(char *String,unsigned char Size){// 1234 ->0000001234
    57bc:	c6 2e       	mov	r12, r22
    57be:	dd 24       	eor	r13, r13
    57c0:	7f 01       	movw	r14, r30
    57c2:	ec 0c       	add	r14, r12
    57c4:	fd 1c       	adc	r15, r13
    57c6:	df 01       	movw	r26, r30
     char i,Length,strAdded[30];
     Length=strlen(String);

	 if (Size>Length){
         for(i=0;i<Size;i++){
	         strAdded[i]='0';
    57c8:	20 e3       	ldi	r18, 0x30	; 48
    57ca:	01 c0       	rjmp	.+2      	; 0x57ce <AddZeroLead+0x4e>
    57cc:	2d 93       	st	X+, r18
void AddZeroLead(char *String,unsigned char Size){// 1234 ->0000001234
     char i,Length,strAdded[30];
     Length=strlen(String);

	 if (Size>Length){
         for(i=0;i<Size;i++){
    57ce:	ae 15       	cp	r26, r14
    57d0:	bf 05       	cpc	r27, r15
    57d2:	e1 f7       	brne	.-8      	; 0x57cc <AddZeroLead+0x4c>
	         strAdded[i]='0';
	     }strAdded[Size]=0;
    57d4:	26 2f       	mov	r18, r22
    57d6:	30 e0       	ldi	r19, 0x00	; 0
    57d8:	8e 01       	movw	r16, r28
    57da:	0f 5f       	subi	r16, 0xFF	; 255
    57dc:	1f 4f       	sbci	r17, 0xFF	; 255
    57de:	d8 01       	movw	r26, r16
    57e0:	a2 0f       	add	r26, r18
    57e2:	b3 1f       	adc	r27, r19
    57e4:	1c 92       	st	X, r1
	     //Copy
         for(i=(Size-Length);i<Size;i++){
    57e6:	76 2f       	mov	r23, r22
    57e8:	74 1b       	sub	r23, r20
	         strAdded[i]=String[i-(Size-Length)];
    57ea:	50 e0       	ldi	r21, 0x00	; 0
    57ec:	42 1b       	sub	r20, r18
    57ee:	53 0b       	sbc	r21, r19
	 if (Size>Length){
         for(i=0;i<Size;i++){
	         strAdded[i]='0';
	     }strAdded[Size]=0;
	     //Copy
         for(i=(Size-Length);i<Size;i++){
    57f0:	0d c0       	rjmp	.+26     	; 0x580c <AddZeroLead+0x8c>
	         strAdded[i]=String[i-(Size-Length)];
    57f2:	a7 2f       	mov	r26, r23
    57f4:	b0 e0       	ldi	r27, 0x00	; 0
    57f6:	58 01       	movw	r10, r16
    57f8:	aa 0e       	add	r10, r26
    57fa:	bb 1e       	adc	r11, r27
    57fc:	a8 0f       	add	r26, r24
    57fe:	b9 1f       	adc	r27, r25
    5800:	a4 0f       	add	r26, r20
    5802:	b5 1f       	adc	r27, r21
    5804:	9c 90       	ld	r9, X
    5806:	d5 01       	movw	r26, r10
    5808:	9c 92       	st	X, r9
	 if (Size>Length){
         for(i=0;i<Size;i++){
	         strAdded[i]='0';
	     }strAdded[Size]=0;
	     //Copy
         for(i=(Size-Length);i<Size;i++){
    580a:	7f 5f       	subi	r23, 0xFF	; 255
    580c:	76 17       	cp	r23, r22
    580e:	88 f3       	brcs	.-30     	; 0x57f2 <AddZeroLead+0x72>
	         strAdded[i]=String[i-(Size-Length)];
	     }strAdded[Size]=0;
    5810:	d8 01       	movw	r26, r16
    5812:	a2 0f       	add	r26, r18
    5814:	b3 1f       	adc	r27, r19
    5816:	1c 92       	st	X, r1
    5818:	dc 01       	movw	r26, r24
	     //Zeroed
         for(i=0;i<Size;i++){
    581a:	02 c0       	rjmp	.+4      	; 0x5820 <AddZeroLead+0xa0>
	         String[i]=strAdded[i];
    581c:	21 91       	ld	r18, Z+
    581e:	2d 93       	st	X+, r18
	     //Copy
         for(i=(Size-Length);i<Size;i++){
	         strAdded[i]=String[i-(Size-Length)];
	     }strAdded[Size]=0;
	     //Zeroed
         for(i=0;i<Size;i++){
    5820:	ee 15       	cp	r30, r14
    5822:	ff 05       	cpc	r31, r15
    5824:	d9 f7       	brne	.-10     	; 0x581c <AddZeroLead+0x9c>
	         String[i]=strAdded[i];
	     }String[Size]=0;
    5826:	8c 0d       	add	r24, r12
    5828:	9d 1d       	adc	r25, r13
    582a:	fc 01       	movw	r30, r24
    582c:	10 82       	st	Z, r1
	 }
}
    582e:	6e 96       	adiw	r28, 0x1e	; 30
    5830:	0f b6       	in	r0, 0x3f	; 63
    5832:	f8 94       	cli
    5834:	de bf       	out	0x3e, r29	; 62
    5836:	0f be       	out	0x3f, r0	; 63
    5838:	cd bf       	out	0x3d, r28	; 61
    583a:	cf 91       	pop	r28
    583c:	df 91       	pop	r29
    583e:	1f 91       	pop	r17
    5840:	0f 91       	pop	r16
    5842:	ff 90       	pop	r15
    5844:	ef 90       	pop	r14
    5846:	df 90       	pop	r13
    5848:	cf 90       	pop	r12
    584a:	bf 90       	pop	r11
    584c:	af 90       	pop	r10
    584e:	9f 90       	pop	r9
    5850:	08 95       	ret

00005852 <FormatDecimal>:

void TestLocalAccount(){

}

void FormatDecimal(char *strRawData, char DecimalCfg){// 9-> 0,009 0,234 123 
    5852:	cf 92       	push	r12
    5854:	df 92       	push	r13
    5856:	ef 92       	push	r14
    5858:	ff 92       	push	r15
    585a:	0f 93       	push	r16
    585c:	1f 93       	push	r17
    585e:	df 93       	push	r29
    5860:	cf 93       	push	r28
    5862:	cd b7       	in	r28, 0x3d	; 61
    5864:	de b7       	in	r29, 0x3e	; 62
    5866:	65 97       	sbiw	r28, 0x15	; 21
    5868:	0f b6       	in	r0, 0x3f	; 63
    586a:	f8 94       	cli
    586c:	de bf       	out	0x3e, r29	; 62
    586e:	0f be       	out	0x3f, r0	; 63
    5870:	cd bf       	out	0x3d, r28	; 61
    5872:	8c 01       	movw	r16, r24
     char i,iPos,CommaPos,Length=0;                 //1->0,01 
	 char strDecimalFormated[20];
	 char DecPointMark;
     if (DecimalCfg>0){    
    5874:	66 23       	and	r22, r22
    5876:	09 f4       	brne	.+2      	; 0x587a <FormatDecimal+0x28>
    5878:	56 c0       	rjmp	.+172    	; 0x5926 <FormatDecimal+0xd4>
		 DecPointMark=eeprom_read_byte(&DefDecimalMark);	 
    587a:	8f e3       	ldi	r24, 0x3F	; 63
    587c:	90 e0       	ldi	r25, 0x00	; 0
    587e:	6d 8b       	std	Y+21, r22	; 0x15
    5880:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
    5884:	f8 2e       	mov	r15, r24
		 Length=strlen(strRawData);
    5886:	d8 01       	movw	r26, r16
    5888:	0d 90       	ld	r0, X+
    588a:	00 20       	and	r0, r0
    588c:	e9 f7       	brne	.-6      	; 0x5888 <FormatDecimal+0x36>
    588e:	11 97       	sbiw	r26, 0x01	; 1
    5890:	a0 1b       	sub	r26, r16

		 if (Length>DecimalCfg)CommaPos=Length-DecimalCfg;
    5892:	6d 89       	ldd	r22, Y+21	; 0x15
    5894:	6a 17       	cp	r22, r26
    5896:	d8 f5       	brcc	.+118    	; 0x590e <FormatDecimal+0xbc>
    5898:	ba 2f       	mov	r27, r26
    589a:	b6 1b       	sub	r27, r22
    589c:	98 01       	movw	r18, r16
			 CommaPos=1;
			 }

		 
		 iPos=0;
		 for(i=0;i<Length;i++){
    589e:	68 01       	movw	r12, r16
			 Length=strlen(strRawData);
			 CommaPos=1;
			 }

		 
		 iPos=0;
    58a0:	60 e0       	ldi	r22, 0x00	; 0
		 for(i=0;i<Length;i++){
    58a2:	70 e0       	ldi	r23, 0x00	; 0
			 if (i==CommaPos){
				 strDecimalFormated[iPos]=DecPointMark;
    58a4:	ce 01       	movw	r24, r28
    58a6:	01 96       	adiw	r24, 0x01	; 1
			 CommaPos=1;
			 }

		 
		 iPos=0;
		 for(i=0;i<Length;i++){
    58a8:	12 c0       	rjmp	.+36     	; 0x58ce <FormatDecimal+0x7c>
			 if (i==CommaPos){
    58aa:	7b 17       	cp	r23, r27
    58ac:	31 f4       	brne	.+12     	; 0x58ba <FormatDecimal+0x68>
				 strDecimalFormated[iPos]=DecPointMark;
    58ae:	ac 01       	movw	r20, r24
    58b0:	46 0f       	add	r20, r22
    58b2:	51 1d       	adc	r21, r1
    58b4:	fa 01       	movw	r30, r20
    58b6:	f0 82       	st	Z, r15
				 iPos++;
    58b8:	6f 5f       	subi	r22, 0xFF	; 255
			}
			strDecimalFormated[iPos]=strRawData[i];
    58ba:	f6 01       	movw	r30, r12
    58bc:	e1 90       	ld	r14, Z+
    58be:	6f 01       	movw	r12, r30
    58c0:	ac 01       	movw	r20, r24
    58c2:	46 0f       	add	r20, r22
    58c4:	51 1d       	adc	r21, r1
    58c6:	fa 01       	movw	r30, r20
    58c8:	e0 82       	st	Z, r14
			//strDecimalFormated[iPos+1]=0;
			iPos++;
    58ca:	6f 5f       	subi	r22, 0xFF	; 255
			 CommaPos=1;
			 }

		 
		 iPos=0;
		 for(i=0;i<Length;i++){
    58cc:	7f 5f       	subi	r23, 0xFF	; 255
    58ce:	7a 17       	cp	r23, r26
    58d0:	60 f3       	brcs	.-40     	; 0x58aa <FormatDecimal+0x58>
				 iPos++;
			}
			strDecimalFormated[iPos]=strRawData[i];
			//strDecimalFormated[iPos+1]=0;
			iPos++;
		 }strDecimalFormated[iPos]=0;
    58d2:	fe 01       	movw	r30, r28
    58d4:	31 96       	adiw	r30, 0x01	; 1
    58d6:	df 01       	movw	r26, r30
    58d8:	a6 0f       	add	r26, r22
    58da:	b1 1d       	adc	r27, r1
    58dc:	1c 92       	st	X, r1
		 
         //uart_print(1,1,strDecimalFormated); 

		 Length=strlen(strDecimalFormated);
    58de:	df 01       	movw	r26, r30
    58e0:	0d 90       	ld	r0, X+
    58e2:	00 20       	and	r0, r0
    58e4:	e9 f7       	brne	.-6      	; 0x58e0 <FormatDecimal+0x8e>
    58e6:	11 97       	sbiw	r26, 0x01	; 1

void TestLocalAccount(){

}

void FormatDecimal(char *strRawData, char DecimalCfg){// 9-> 0,009 0,234 123 
    58e8:	ae 1b       	sub	r26, r30
    58ea:	6a 2f       	mov	r22, r26
    58ec:	70 e0       	ldi	r23, 0x00	; 0
    58ee:	cf 01       	movw	r24, r30
    58f0:	86 0f       	add	r24, r22
    58f2:	97 1f       	adc	r25, r23
		 }strDecimalFormated[iPos]=0;
		 
         //uart_print(1,1,strDecimalFormated); 

		 Length=strlen(strDecimalFormated);
		 for(i=0;i<Length;i++){
    58f4:	04 c0       	rjmp	.+8      	; 0x58fe <FormatDecimal+0xac>
			 strRawData[i]=strDecimalFormated[i];
    58f6:	41 91       	ld	r20, Z+
    58f8:	d9 01       	movw	r26, r18
    58fa:	4d 93       	st	X+, r20
    58fc:	9d 01       	movw	r18, r26
		 }strDecimalFormated[iPos]=0;
		 
         //uart_print(1,1,strDecimalFormated); 

		 Length=strlen(strDecimalFormated);
		 for(i=0;i<Length;i++){
    58fe:	e8 17       	cp	r30, r24
    5900:	f9 07       	cpc	r31, r25
    5902:	c9 f7       	brne	.-14     	; 0x58f6 <FormatDecimal+0xa4>
			 strRawData[i]=strDecimalFormated[i];
		 }strRawData[Length]=0;
    5904:	db 01       	movw	r26, r22
    5906:	a0 0f       	add	r26, r16
    5908:	b1 1f       	adc	r27, r17
    590a:	1c 92       	st	X, r1
    590c:	0c c0       	rjmp	.+24     	; 0x5926 <FormatDecimal+0xd4>
		 if (Length>DecimalCfg)CommaPos=Length-DecimalCfg;
		 else CommaPos=1;


		 if (Length<=DecimalCfg){// 123 -> 0123
			 AddZeroLead(strRawData,(DecimalCfg+1));
    590e:	6f 5f       	subi	r22, 0xFF	; 255
    5910:	c8 01       	movw	r24, r16
    5912:	0e 94 c0 2b 	call	0x5780	; 0x5780 <AddZeroLead>
			 //AddZeroLead(strRawData,(DecimalCfg+2));
			 Length=strlen(strRawData);
    5916:	d8 01       	movw	r26, r16
    5918:	0d 90       	ld	r0, X+
    591a:	00 20       	and	r0, r0
    591c:	e9 f7       	brne	.-6      	; 0x5918 <FormatDecimal+0xc6>
    591e:	11 97       	sbiw	r26, 0x01	; 1
    5920:	a0 1b       	sub	r26, r16
			 CommaPos=1;
    5922:	b1 e0       	ldi	r27, 0x01	; 1
    5924:	bb cf       	rjmp	.-138    	; 0x589c <FormatDecimal+0x4a>
		 for(i=0;i<Length;i++){
			 strRawData[i]=strDecimalFormated[i];
		 }strRawData[Length]=0;
	 }
          //uart_print(1,1,strRawData); 
}
    5926:	65 96       	adiw	r28, 0x15	; 21
    5928:	0f b6       	in	r0, 0x3f	; 63
    592a:	f8 94       	cli
    592c:	de bf       	out	0x3e, r29	; 62
    592e:	0f be       	out	0x3f, r0	; 63
    5930:	cd bf       	out	0x3d, r28	; 61
    5932:	cf 91       	pop	r28
    5934:	df 91       	pop	r29
    5936:	1f 91       	pop	r17
    5938:	0f 91       	pop	r16
    593a:	ff 90       	pop	r15
    593c:	ef 90       	pop	r14
    593e:	df 90       	pop	r13
    5940:	cf 90       	pop	r12
    5942:	08 95       	ret

00005944 <FormatTotalizerVolume>:
     char DecCfg;
     DecCfg=eeprom_read_byte(&DefDecimalTotalMoney);
	 FormatDecimal(strRawMoney,DecCfg);
}

void FormatTotalizerVolume(char *strRawVolume){//96->0,96 
    5944:	cf 93       	push	r28
    5946:	df 93       	push	r29
    5948:	ec 01       	movw	r28, r24
     char DecCfg;
     DecCfg=eeprom_read_byte(&DefDecimalTotalVolume);
    594a:	8d e3       	ldi	r24, 0x3D	; 61
    594c:	90 e0       	ldi	r25, 0x00	; 0
    594e:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
    5952:	68 2f       	mov	r22, r24
	 FormatDecimal(strRawVolume,DecCfg);
    5954:	ce 01       	movw	r24, r28
    5956:	0e 94 29 2c 	call	0x5852	; 0x5852 <FormatDecimal>
}
    595a:	df 91       	pop	r29
    595c:	cf 91       	pop	r28
    595e:	08 95       	ret

00005960 <FormatTotalizerMoney>:
     char DecCfg;
     DecCfg=eeprom_read_byte(&DefDecimalVolume);
	 FormatDecimal(strRawVolume,DecCfg);
}

void FormatTotalizerMoney(char *strRawMoney){
    5960:	cf 93       	push	r28
    5962:	df 93       	push	r29
    5964:	ec 01       	movw	r28, r24
     char DecCfg;
     DecCfg=eeprom_read_byte(&DefDecimalTotalMoney);
    5966:	8e e3       	ldi	r24, 0x3E	; 62
    5968:	90 e0       	ldi	r25, 0x00	; 0
    596a:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
    596e:	68 2f       	mov	r22, r24
	 FormatDecimal(strRawMoney,DecCfg);
    5970:	ce 01       	movw	r24, r28
    5972:	0e 94 29 2c 	call	0x5852	; 0x5852 <FormatDecimal>
}
    5976:	df 91       	pop	r29
    5978:	cf 91       	pop	r28
    597a:	08 95       	ret

0000597c <FormatVolume>:
     char DecCfg;
     DecCfg=eeprom_read_byte(&DefDecimalMoney);
	 FormatDecimal(strRawMoney,DecCfg);
}

void FormatVolume(char *strRawVolume){//96->0,96 
    597c:	cf 93       	push	r28
    597e:	df 93       	push	r29
    5980:	ec 01       	movw	r28, r24
     char DecCfg;
     DecCfg=eeprom_read_byte(&DefDecimalVolume);
    5982:	8a e3       	ldi	r24, 0x3A	; 58
    5984:	90 e0       	ldi	r25, 0x00	; 0
    5986:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
    598a:	68 2f       	mov	r22, r24
	 FormatDecimal(strRawVolume,DecCfg);
    598c:	ce 01       	movw	r24, r28
    598e:	0e 94 29 2c 	call	0x5852	; 0x5852 <FormatDecimal>
}
    5992:	df 91       	pop	r29
    5994:	cf 91       	pop	r28
    5996:	08 95       	ret

00005998 <FormatMoney>:
     char DecCfg;
     DecCfg=eeprom_read_byte(&DefDecimalPrice);
	 FormatDecimal(strRawPrice,DecCfg);
}

void FormatMoney(char *strRawMoney){
    5998:	cf 93       	push	r28
    599a:	df 93       	push	r29
    599c:	ec 01       	movw	r28, r24
     char DecCfg;
     DecCfg=eeprom_read_byte(&DefDecimalMoney);
    599e:	8b e3       	ldi	r24, 0x3B	; 59
    59a0:	90 e0       	ldi	r25, 0x00	; 0
    59a2:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
    59a6:	68 2f       	mov	r22, r24
	 FormatDecimal(strRawMoney,DecCfg);
    59a8:	ce 01       	movw	r24, r28
    59aa:	0e 94 29 2c 	call	0x5852	; 0x5852 <FormatDecimal>
}
    59ae:	df 91       	pop	r29
    59b0:	cf 91       	pop	r28
    59b2:	08 95       	ret

000059b4 <FormatPrice>:
		 }strRawData[Length]=0;
	 }
          //uart_print(1,1,strRawData); 
}

void FormatPrice(char *strRawPrice){
    59b4:	cf 93       	push	r28
    59b6:	df 93       	push	r29
    59b8:	ec 01       	movw	r28, r24
     char DecCfg;
     DecCfg=eeprom_read_byte(&DefDecimalPrice);
    59ba:	89 e3       	ldi	r24, 0x39	; 57
    59bc:	90 e0       	ldi	r25, 0x00	; 0
    59be:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
    59c2:	68 2f       	mov	r22, r24
	 FormatDecimal(strRawPrice,DecCfg);
    59c4:	ce 01       	movw	r24, r28
    59c6:	0e 94 29 2c 	call	0x5852	; 0x5852 <FormatDecimal>
}
    59ca:	df 91       	pop	r29
    59cc:	cf 91       	pop	r28
    59ce:	08 95       	ret

000059d0 <leadingZero>:
	     }String[Size]=0;
	 }
}

void leadingZero(char Val,char *StrResult){
     sprintf_P(StrResult,PSTR("%.2d"),Val);
    59d0:	00 d0       	rcall	.+0      	; 0x59d2 <leadingZero+0x2>
    59d2:	00 d0       	rcall	.+0      	; 0x59d4 <leadingZero+0x4>
    59d4:	00 d0       	rcall	.+0      	; 0x59d6 <leadingZero+0x6>
    59d6:	ed b7       	in	r30, 0x3d	; 61
    59d8:	fe b7       	in	r31, 0x3e	; 62
    59da:	31 96       	adiw	r30, 0x01	; 1
    59dc:	ad b7       	in	r26, 0x3d	; 61
    59de:	be b7       	in	r27, 0x3e	; 62
    59e0:	12 96       	adiw	r26, 0x02	; 2
    59e2:	7c 93       	st	X, r23
    59e4:	6e 93       	st	-X, r22
    59e6:	11 97       	sbiw	r26, 0x01	; 1
    59e8:	2d ea       	ldi	r18, 0xAD	; 173
    59ea:	3e e0       	ldi	r19, 0x0E	; 14
    59ec:	33 83       	std	Z+3, r19	; 0x03
    59ee:	22 83       	std	Z+2, r18	; 0x02
    59f0:	84 83       	std	Z+4, r24	; 0x04
    59f2:	15 82       	std	Z+5, r1	; 0x05
    59f4:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    59f8:	8d b7       	in	r24, 0x3d	; 61
    59fa:	9e b7       	in	r25, 0x3e	; 62
    59fc:	06 96       	adiw	r24, 0x06	; 6
    59fe:	0f b6       	in	r0, 0x3f	; 63
    5a00:	f8 94       	cli
    5a02:	9e bf       	out	0x3e, r25	; 62
    5a04:	0f be       	out	0x3f, r0	; 63
    5a06:	8d bf       	out	0x3d, r24	; 61

}
    5a08:	08 95       	ret

00005a0a <menu_FIP>:
	 }
  return Result;
}


char menu_FIP(char *xFIP,char *sFIPUsed){
    5a0a:	6f 92       	push	r6
    5a0c:	7f 92       	push	r7
    5a0e:	8f 92       	push	r8
    5a10:	9f 92       	push	r9
    5a12:	af 92       	push	r10
    5a14:	bf 92       	push	r11
    5a16:	cf 92       	push	r12
    5a18:	df 92       	push	r13
    5a1a:	ef 92       	push	r14
    5a1c:	ff 92       	push	r15
    5a1e:	0f 93       	push	r16
    5a20:	1f 93       	push	r17
    5a22:	df 93       	push	r29
    5a24:	cf 93       	push	r28
    5a26:	cd b7       	in	r28, 0x3d	; 61
    5a28:	de b7       	in	r29, 0x3e	; 62
    5a2a:	a2 97       	sbiw	r28, 0x22	; 34
    5a2c:	0f b6       	in	r0, 0x3f	; 63
    5a2e:	f8 94       	cli
    5a30:	de bf       	out	0x3e, r29	; 62
    5a32:	0f be       	out	0x3f, r0	; 63
    5a34:	cd bf       	out	0x3d, r28	; 61
    5a36:	8c 01       	movw	r16, r24
    5a38:	7b 01       	movw	r14, r22

       char KeyPressed=0,KeyChar;
       char Result=FIP_NONE;
       char FIP[8],strPumpL[3],strPumpR[3],lcdteks[20];

       switch(stEnterFIP){
    5a3a:	80 91 4b 03 	lds	r24, 0x034B
    5a3e:	81 30       	cpi	r24, 0x01	; 1
    5a40:	09 f4       	brne	.+2      	; 0x5a44 <menu_FIP+0x3a>
    5a42:	b5 c0       	rjmp	.+362    	; 0x5bae <menu_FIP+0x1a4>
    5a44:	81 30       	cpi	r24, 0x01	; 1
    5a46:	20 f0       	brcs	.+8      	; 0x5a50 <menu_FIP+0x46>
    5a48:	82 30       	cpi	r24, 0x02	; 2
    5a4a:	09 f0       	breq	.+2      	; 0x5a4e <menu_FIP+0x44>
    5a4c:	37 c1       	rjmp	.+622    	; 0x5cbc <menu_FIP+0x2b2>
    5a4e:	34 c1       	rjmp	.+616    	; 0x5cb8 <menu_FIP+0x2ae>
 	   case efInit:
	 	    eeprom_read_block((void*) &FIP, (const void*) &DefPumpMap, 8);
    5a50:	8e 01       	movw	r16, r28
    5a52:	09 5f       	subi	r16, 0xF9	; 249
    5a54:	1f 4f       	sbci	r17, 0xFF	; 255
    5a56:	c8 01       	movw	r24, r16
    5a58:	66 e4       	ldi	r22, 0x46	; 70
    5a5a:	70 e0       	ldi	r23, 0x00	; 0
    5a5c:	48 e0       	ldi	r20, 0x08	; 8
    5a5e:	50 e0       	ldi	r21, 0x00	; 0
    5a60:	0e 94 56 aa 	call	0x154ac	; 0x154ac <__eerd_block_m128>
		    lcd_clear(); 
    5a64:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
		    for (iLoop=0;iLoop<8;iLoop++){
    5a68:	10 92 49 03 	sts	0x0349, r1
    5a6c:	10 92 48 03 	sts	0x0348, r1
    5a70:	f8 01       	movw	r30, r16
    5a72:	80 e0       	ldi	r24, 0x00	; 0
    5a74:	90 e0       	ldi	r25, 0x00	; 0
    5a76:	06 c0       	rjmp	.+12     	; 0x5a84 <menu_FIP+0x7a>
			     if (FIP[iLoop]>99) FIP[iLoop]=0;
    5a78:	20 81       	ld	r18, Z
    5a7a:	24 36       	cpi	r18, 0x64	; 100
    5a7c:	08 f0       	brcs	.+2      	; 0x5a80 <menu_FIP+0x76>
    5a7e:	10 82       	st	Z, r1
    5a80:	01 96       	adiw	r24, 0x01	; 1
    5a82:	31 96       	adiw	r30, 0x01	; 1

       switch(stEnterFIP){
 	   case efInit:
	 	    eeprom_read_block((void*) &FIP, (const void*) &DefPumpMap, 8);
		    lcd_clear(); 
		    for (iLoop=0;iLoop<8;iLoop++){
    5a84:	88 30       	cpi	r24, 0x08	; 8
    5a86:	91 05       	cpc	r25, r1
    5a88:	b8 f3       	brcs	.-18     	; 0x5a78 <menu_FIP+0x6e>
			     if (FIP[iLoop]>99) FIP[iLoop]=0;
		    }
		    for(iLoop=0;iLoop<4;iLoop++){
    5a8a:	10 92 49 03 	sts	0x0349, r1
    5a8e:	10 92 48 03 	sts	0x0348, r1
		        leadingZero(FIP[iLoop],strPumpL);leadingZero(FIP[iLoop+4],strPumpR);
    5a92:	f7 e0       	ldi	r31, 0x07	; 7
    5a94:	af 2e       	mov	r10, r31
    5a96:	b1 2c       	mov	r11, r1
    5a98:	ac 0e       	add	r10, r28
    5a9a:	bd 1e       	adc	r11, r29
    5a9c:	8e 01       	movw	r16, r28
    5a9e:	0f 5f       	subi	r16, 0xFF	; 255
    5aa0:	1f 4f       	sbci	r17, 0xFF	; 255
    5aa2:	eb e0       	ldi	r30, 0x0B	; 11
    5aa4:	8e 2e       	mov	r8, r30
    5aa6:	91 2c       	mov	r9, r1
    5aa8:	8c 0e       	add	r8, r28
    5aaa:	9d 1e       	adc	r9, r29
    5aac:	74 e0       	ldi	r23, 0x04	; 4
    5aae:	e7 2e       	mov	r14, r23
    5ab0:	f1 2c       	mov	r15, r1
    5ab2:	ec 0e       	add	r14, r28
    5ab4:	fd 1e       	adc	r15, r29
                sprintf_P(lcdteks,PSTR("%d.P%s | %d.P%s"),(iLoop+1),strPumpL,(iLoop+5),strPumpR);
    5ab6:	6f e0       	ldi	r22, 0x0F	; 15
    5ab8:	c6 2e       	mov	r12, r22
    5aba:	d1 2c       	mov	r13, r1
    5abc:	cc 0e       	add	r12, r28
    5abe:	dd 1e       	adc	r13, r29
    5ac0:	5b eb       	ldi	r21, 0xBB	; 187
    5ac2:	65 2e       	mov	r6, r21
    5ac4:	5d e1       	ldi	r21, 0x1D	; 29
    5ac6:	75 2e       	mov	r7, r21
	 	    eeprom_read_block((void*) &FIP, (const void*) &DefPumpMap, 8);
		    lcd_clear(); 
		    for (iLoop=0;iLoop<8;iLoop++){
			     if (FIP[iLoop]>99) FIP[iLoop]=0;
		    }
		    for(iLoop=0;iLoop<4;iLoop++){
    5ac8:	4c c0       	rjmp	.+152    	; 0x5b62 <menu_FIP+0x158>
		        leadingZero(FIP[iLoop],strPumpL);leadingZero(FIP[iLoop+4],strPumpR);
    5aca:	8a 0d       	add	r24, r10
    5acc:	9b 1d       	adc	r25, r11
    5ace:	dc 01       	movw	r26, r24
    5ad0:	8c 91       	ld	r24, X
    5ad2:	b8 01       	movw	r22, r16
    5ad4:	0e 94 e8 2c 	call	0x59d0	; 0x59d0 <leadingZero>
    5ad8:	e0 91 48 03 	lds	r30, 0x0348
    5adc:	f0 91 49 03 	lds	r31, 0x0349
    5ae0:	e8 0d       	add	r30, r8
    5ae2:	f9 1d       	adc	r31, r9
    5ae4:	80 81       	ld	r24, Z
    5ae6:	b7 01       	movw	r22, r14
    5ae8:	0e 94 e8 2c 	call	0x59d0	; 0x59d0 <leadingZero>
                sprintf_P(lcdteks,PSTR("%d.P%s | %d.P%s"),(iLoop+1),strPumpL,(iLoop+5),strPumpR);
    5aec:	80 91 48 03 	lds	r24, 0x0348
    5af0:	90 91 49 03 	lds	r25, 0x0349
    5af4:	ed b7       	in	r30, 0x3d	; 61
    5af6:	fe b7       	in	r31, 0x3e	; 62
    5af8:	3c 97       	sbiw	r30, 0x0c	; 12
    5afa:	0f b6       	in	r0, 0x3f	; 63
    5afc:	f8 94       	cli
    5afe:	fe bf       	out	0x3e, r31	; 62
    5b00:	0f be       	out	0x3f, r0	; 63
    5b02:	ed bf       	out	0x3d, r30	; 61
    5b04:	31 96       	adiw	r30, 0x01	; 1
    5b06:	ad b7       	in	r26, 0x3d	; 61
    5b08:	be b7       	in	r27, 0x3e	; 62
    5b0a:	12 96       	adiw	r26, 0x02	; 2
    5b0c:	dc 92       	st	X, r13
    5b0e:	ce 92       	st	-X, r12
    5b10:	11 97       	sbiw	r26, 0x01	; 1
    5b12:	73 82       	std	Z+3, r7	; 0x03
    5b14:	62 82       	std	Z+2, r6	; 0x02
    5b16:	9c 01       	movw	r18, r24
    5b18:	2f 5f       	subi	r18, 0xFF	; 255
    5b1a:	3f 4f       	sbci	r19, 0xFF	; 255
    5b1c:	35 83       	std	Z+5, r19	; 0x05
    5b1e:	24 83       	std	Z+4, r18	; 0x04
    5b20:	17 83       	std	Z+7, r17	; 0x07
    5b22:	06 83       	std	Z+6, r16	; 0x06
    5b24:	05 96       	adiw	r24, 0x05	; 5
    5b26:	91 87       	std	Z+9, r25	; 0x09
    5b28:	80 87       	std	Z+8, r24	; 0x08
    5b2a:	f3 86       	std	Z+11, r15	; 0x0b
    5b2c:	e2 86       	std	Z+10, r14	; 0x0a
    5b2e:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
			    lcd_print((iLoop+1),1,lcdteks);
    5b32:	ed b7       	in	r30, 0x3d	; 61
    5b34:	fe b7       	in	r31, 0x3e	; 62
    5b36:	3c 96       	adiw	r30, 0x0c	; 12
    5b38:	0f b6       	in	r0, 0x3f	; 63
    5b3a:	f8 94       	cli
    5b3c:	fe bf       	out	0x3e, r31	; 62
    5b3e:	0f be       	out	0x3f, r0	; 63
    5b40:	ed bf       	out	0x3d, r30	; 61
    5b42:	80 91 48 03 	lds	r24, 0x0348
    5b46:	8f 5f       	subi	r24, 0xFF	; 255
    5b48:	61 e0       	ldi	r22, 0x01	; 1
    5b4a:	a6 01       	movw	r20, r12
    5b4c:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
	 	    eeprom_read_block((void*) &FIP, (const void*) &DefPumpMap, 8);
		    lcd_clear(); 
		    for (iLoop=0;iLoop<8;iLoop++){
			     if (FIP[iLoop]>99) FIP[iLoop]=0;
		    }
		    for(iLoop=0;iLoop<4;iLoop++){
    5b50:	80 91 48 03 	lds	r24, 0x0348
    5b54:	90 91 49 03 	lds	r25, 0x0349
    5b58:	01 96       	adiw	r24, 0x01	; 1
    5b5a:	90 93 49 03 	sts	0x0349, r25
    5b5e:	80 93 48 03 	sts	0x0348, r24
    5b62:	80 91 48 03 	lds	r24, 0x0348
    5b66:	90 91 49 03 	lds	r25, 0x0349
    5b6a:	84 30       	cpi	r24, 0x04	; 4
    5b6c:	91 05       	cpc	r25, r1
    5b6e:	08 f4       	brcc	.+2      	; 0x5b72 <menu_FIP+0x168>
    5b70:	ac cf       	rjmp	.-168    	; 0x5aca <menu_FIP+0xc0>
		        leadingZero(FIP[iLoop],strPumpL);leadingZero(FIP[iLoop+4],strPumpR);
                sprintf_P(lcdteks,PSTR("%d.P%s | %d.P%s"),(iLoop+1),strPumpL,(iLoop+5),strPumpR);
			    lcd_print((iLoop+1),1,lcdteks);
			}
		    lcd_printf(1,15,PSTR("FIP:_"));    //"1.P01 | 5.P05 FIP:_ "                                                                      
    5b72:	81 e0       	ldi	r24, 0x01	; 1
    5b74:	6f e0       	ldi	r22, 0x0F	; 15
    5b76:	45 eb       	ldi	r20, 0xB5	; 181
    5b78:	5d e1       	ldi	r21, 0x1D	; 29
    5b7a:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		    lcd_printf(2,15,PSTR("     "));    //"2.P02 | 6.P05       "
    5b7e:	82 e0       	ldi	r24, 0x02	; 2
    5b80:	6f e0       	ldi	r22, 0x0F	; 15
    5b82:	4f ea       	ldi	r20, 0xAF	; 175
    5b84:	5d e1       	ldi	r21, 0x1D	; 29
    5b86:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		    lcd_printf(3,15,PSTR("#)OK "));    //"3.P03 | 7.P07 #)OK  "
    5b8a:	83 e0       	ldi	r24, 0x03	; 3
    5b8c:	6f e0       	ldi	r22, 0x0F	; 15
    5b8e:	49 ea       	ldi	r20, 0xA9	; 169
    5b90:	5d e1       	ldi	r21, 0x1D	; 29
    5b92:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
	        lcd_printf(4,15,PSTR("*)Exit"));   //"4.P04 | 8.P08 *)Exit"				
    5b96:	84 e0       	ldi	r24, 0x04	; 4
    5b98:	6f e0       	ldi	r22, 0x0F	; 15
    5b9a:	42 ea       	ldi	r20, 0xA2	; 162
    5b9c:	5d e1       	ldi	r21, 0x1D	; 29
    5b9e:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		    iLoop=0;
    5ba2:	10 92 49 03 	sts	0x0349, r1
    5ba6:	10 92 48 03 	sts	0x0348, r1
		    stEnterFIP=efFIPInput;
    5baa:	81 e0       	ldi	r24, 0x01	; 1
    5bac:	82 c0       	rjmp	.+260    	; 0x5cb2 <menu_FIP+0x2a8>
	        break;
	   case efFIPInput:
		    iLoop++;
    5bae:	80 91 48 03 	lds	r24, 0x0348
    5bb2:	90 91 49 03 	lds	r25, 0x0349
    5bb6:	01 96       	adiw	r24, 0x01	; 1
    5bb8:	90 93 49 03 	sts	0x0349, r25
    5bbc:	80 93 48 03 	sts	0x0348, r24
		    KeyPressed=_key_scan(1);
    5bc0:	81 e0       	ldi	r24, 0x01	; 1
    5bc2:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <_key_scan>
    5bc6:	c8 2e       	mov	r12, r24
		    KeyChar=_key_btn(KeyPressed);
    5bc8:	0e 94 49 a3 	call	0x14692	; 0x14692 <_key_btn>
		    if ((KeyChar>='1')&&(KeyChar<='8')){
    5bcc:	4f ec       	ldi	r20, 0xCF	; 207
    5bce:	a4 2e       	mov	r10, r20
    5bd0:	a8 0e       	add	r10, r24
    5bd2:	fa 2d       	mov	r31, r10
    5bd4:	f8 30       	cpi	r31, 0x08	; 8
    5bd6:	60 f4       	brcc	.+24     	; 0x5bf0 <menu_FIP+0x1e6>
		 	     if (KeyCharLast!=KeyChar){
    5bd8:	90 91 5a 01 	lds	r25, 0x015A
    5bdc:	98 17       	cp	r25, r24
    5bde:	41 f0       	breq	.+16     	; 0x5bf0 <menu_FIP+0x1e6>
				     KeyCharLast=KeyChar;
    5be0:	80 93 5a 01 	sts	0x015A, r24
				     iLoop=1000;
    5be4:	88 ee       	ldi	r24, 0xE8	; 232
    5be6:	93 e0       	ldi	r25, 0x03	; 3
    5be8:	90 93 49 03 	sts	0x0349, r25
    5bec:	80 93 48 03 	sts	0x0348, r24
                 }
		    }
 		    if ((iLoop%2000)==0){
    5bf0:	80 91 48 03 	lds	r24, 0x0348
    5bf4:	90 91 49 03 	lds	r25, 0x0349
    5bf8:	60 ed       	ldi	r22, 0xD0	; 208
    5bfa:	77 e0       	ldi	r23, 0x07	; 7
    5bfc:	0e 94 97 a7 	call	0x14f2e	; 0x14f2e <__udivmodhi4>
    5c00:	00 97       	sbiw	r24, 0x00	; 0
    5c02:	39 f4       	brne	.+14     	; 0x5c12 <menu_FIP+0x208>
		        lcd_xy(1,19);_lcd('_'); 
    5c04:	81 e0       	ldi	r24, 0x01	; 1
    5c06:	63 e1       	ldi	r22, 0x13	; 19
    5c08:	0e 94 19 a2 	call	0x14432	; 0x14432 <lcd_xy>
    5c0c:	8f e5       	ldi	r24, 0x5F	; 95
    5c0e:	0e 94 e8 a1 	call	0x143d0	; 0x143d0 <_lcd>
			   }
           if ((iLoop%2000)==1000){
    5c12:	80 91 48 03 	lds	r24, 0x0348
    5c16:	90 91 49 03 	lds	r25, 0x0349
    5c1a:	60 ed       	ldi	r22, 0xD0	; 208
    5c1c:	77 e0       	ldi	r23, 0x07	; 7
    5c1e:	0e 94 97 a7 	call	0x14f2e	; 0x14f2e <__udivmodhi4>
    5c22:	23 e0       	ldi	r18, 0x03	; 3
    5c24:	88 3e       	cpi	r24, 0xE8	; 232
    5c26:	92 07       	cpc	r25, r18
    5c28:	41 f4       	brne	.+16     	; 0x5c3a <menu_FIP+0x230>
			    lcd_xy(1,19);_lcd(KeyCharLast); 
    5c2a:	81 e0       	ldi	r24, 0x01	; 1
    5c2c:	63 e1       	ldi	r22, 0x13	; 19
    5c2e:	0e 94 19 a2 	call	0x14432	; 0x14432 <lcd_xy>
    5c32:	80 91 5a 01 	lds	r24, 0x015A
    5c36:	0e 94 e8 a1 	call	0x143d0	; 0x143d0 <_lcd>
			   }

		   if (((KeyChar>='1')&&(KeyChar<='8'))||(KeyPressed==_KEY_ENTER)&&(KeyCharLast!=' ')){ 
    5c3a:	3a 2d       	mov	r19, r10
    5c3c:	38 30       	cpi	r19, 0x08	; 8
    5c3e:	38 f0       	brcs	.+14     	; 0x5c4e <menu_FIP+0x244>
    5c40:	8c 2d       	mov	r24, r12
    5c42:	87 3b       	cpi	r24, 0xB7	; 183
    5c44:	91 f5       	brne	.+100    	; 0x5caa <menu_FIP+0x2a0>
    5c46:	80 91 5a 01 	lds	r24, 0x015A
    5c4a:	80 32       	cpi	r24, 0x20	; 32
    5c4c:	b9 f1       	breq	.+110    	; 0x5cbc <menu_FIP+0x2b2>
		         FIP_Used=FIP[KeyCharLast-'1'];
    5c4e:	80 91 5a 01 	lds	r24, 0x015A
    5c52:	fe 01       	movw	r30, r28
    5c54:	ba 97       	sbiw	r30, 0x2a	; 42
    5c56:	e8 0f       	add	r30, r24
    5c58:	f1 1d       	adc	r31, r1
    5c5a:	20 81       	ld	r18, Z
    5c5c:	20 93 4a 03 	sts	0x034A, r18
				 if (FIP_Used<=99){
    5c60:	24 36       	cpi	r18, 0x64	; 100
    5c62:	f0 f4       	brcc	.+60     	; 0x5ca0 <menu_FIP+0x296>
                     //leadingZero(FIP_Used,sFIPUsed);
					 //xFIP[0]=FIP_Used;
					 *xFIP=FIP_Used;
    5c64:	d8 01       	movw	r26, r16
    5c66:	2c 93       	st	X, r18
					 sprintf_P(sFIPUsed,PSTR("%.2d"),FIP_Used);
    5c68:	00 d0       	rcall	.+0      	; 0x5c6a <menu_FIP+0x260>
    5c6a:	00 d0       	rcall	.+0      	; 0x5c6c <menu_FIP+0x262>
    5c6c:	00 d0       	rcall	.+0      	; 0x5c6e <menu_FIP+0x264>
    5c6e:	ed b7       	in	r30, 0x3d	; 61
    5c70:	fe b7       	in	r31, 0x3e	; 62
    5c72:	31 96       	adiw	r30, 0x01	; 1
    5c74:	ad b7       	in	r26, 0x3d	; 61
    5c76:	be b7       	in	r27, 0x3e	; 62
    5c78:	12 96       	adiw	r26, 0x02	; 2
    5c7a:	fc 92       	st	X, r15
    5c7c:	ee 92       	st	-X, r14
    5c7e:	11 97       	sbiw	r26, 0x01	; 1
    5c80:	8d e9       	ldi	r24, 0x9D	; 157
    5c82:	9d e1       	ldi	r25, 0x1D	; 29
    5c84:	93 83       	std	Z+3, r25	; 0x03
    5c86:	82 83       	std	Z+2, r24	; 0x02
    5c88:	24 83       	std	Z+4, r18	; 0x04
    5c8a:	15 82       	std	Z+5, r1	; 0x05
    5c8c:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    5c90:	ed b7       	in	r30, 0x3d	; 61
    5c92:	fe b7       	in	r31, 0x3e	; 62
    5c94:	36 96       	adiw	r30, 0x06	; 6
    5c96:	0f b6       	in	r0, 0x3f	; 63
    5c98:	f8 94       	cli
    5c9a:	fe bf       	out	0x3e, r31	; 62
    5c9c:	0f be       	out	0x3f, r0	; 63
    5c9e:	ed bf       	out	0x3d, r30	; 61

					 }
				 Result=FIP_DONE;
                 stEnterFIP=efExitFIPInput;
    5ca0:	82 e0       	ldi	r24, 0x02	; 2
    5ca2:	80 93 4b 03 	sts	0x034B, r24
					 //xFIP[0]=FIP_Used;
					 *xFIP=FIP_Used;
					 sprintf_P(sFIPUsed,PSTR("%.2d"),FIP_Used);

					 }
				 Result=FIP_DONE;
    5ca6:	80 e0       	ldi	r24, 0x00	; 0
                 stEnterFIP=efExitFIPInput;
    5ca8:	0a c0       	rjmp	.+20     	; 0x5cbe <menu_FIP+0x2b4>
		   }
		   else
		   if (KeyPressed==_KEY_CANCEL){
    5caa:	fc 2d       	mov	r31, r12
    5cac:	f7 3e       	cpi	r31, 0xE7	; 231
    5cae:	31 f4       	brne	.+12     	; 0x5cbc <menu_FIP+0x2b2>
               Result=FIP_CANCEL;
			   stEnterFIP=efExitFIPInput;
    5cb0:	82 e0       	ldi	r24, 0x02	; 2
    5cb2:	80 93 4b 03 	sts	0x034B, r24
    5cb6:	03 c0       	rjmp	.+6      	; 0x5cbe <menu_FIP+0x2b4>
		   }
	       break;
      case efExitFIPInput:
           stEnterFIP=efInit;
    5cb8:	10 92 4b 03 	sts	0x034B, r1
static char stEnterFIP=efInit;
static char KeyCharLast=' ',FIP_Used=0;
static unsigned int iLoop;

       char KeyPressed=0,KeyChar;
       char Result=FIP_NONE;
    5cbc:	81 e0       	ldi	r24, 0x01	; 1
      case efExitFIPInput:
           stEnterFIP=efInit;
	       break;
	 }
return Result;
}
    5cbe:	a2 96       	adiw	r28, 0x22	; 34
    5cc0:	0f b6       	in	r0, 0x3f	; 63
    5cc2:	f8 94       	cli
    5cc4:	de bf       	out	0x3e, r29	; 62
    5cc6:	0f be       	out	0x3f, r0	; 63
    5cc8:	cd bf       	out	0x3d, r28	; 61
    5cca:	cf 91       	pop	r28
    5ccc:	df 91       	pop	r29
    5cce:	1f 91       	pop	r17
    5cd0:	0f 91       	pop	r16
    5cd2:	ff 90       	pop	r15
    5cd4:	ef 90       	pop	r14
    5cd6:	df 90       	pop	r13
    5cd8:	cf 90       	pop	r12
    5cda:	bf 90       	pop	r11
    5cdc:	af 90       	pop	r10
    5cde:	9f 90       	pop	r9
    5ce0:	8f 90       	pop	r8
    5ce2:	7f 90       	pop	r7
    5ce4:	6f 90       	pop	r6
    5ce6:	08 95       	ret

00005ce8 <_scr_pump>:

void leadingZero(char Val,char *StrResult){
     sprintf_P(StrResult,PSTR("%.2d"),Val);

}
void _scr_pump(void){
    5ce8:	8f 92       	push	r8
    5cea:	9f 92       	push	r9
    5cec:	af 92       	push	r10
    5cee:	bf 92       	push	r11
    5cf0:	cf 92       	push	r12
    5cf2:	df 92       	push	r13
    5cf4:	ef 92       	push	r14
    5cf6:	ff 92       	push	r15
    5cf8:	0f 93       	push	r16
    5cfa:	1f 93       	push	r17
    5cfc:	df 93       	push	r29
    5cfe:	cf 93       	push	r28
    5d00:	cd b7       	in	r28, 0x3d	; 61
    5d02:	de b7       	in	r29, 0x3e	; 62
    5d04:	6c 97       	sbiw	r28, 0x1c	; 28
    5d06:	0f b6       	in	r0, 0x3f	; 63
    5d08:	f8 94       	cli
    5d0a:	de bf       	out	0x3e, r29	; 62
    5d0c:	0f be       	out	0x3f, r0	; 63
    5d0e:	cd bf       	out	0x3d, r28	; 61
	 //char strPumpL[3],strPumpR[3];
	 char __pump_id[8];
	 char i;
     char lcdteks[20];
	 lcd_clear();_delay_ms(10);
    5d10:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
    5d14:	83 ec       	ldi	r24, 0xC3	; 195
    5d16:	99 e0       	ldi	r25, 0x09	; 9
    5d18:	01 97       	sbiw	r24, 0x01	; 1
    5d1a:	f1 f7       	brne	.-4      	; 0x5d18 <_scr_pump+0x30>
    5d1c:	00 c0       	rjmp	.+0      	; 0x5d1e <_scr_pump+0x36>
    5d1e:	00 00       	nop
	 //Display
		eeprom_read_block((void*) &__pump_id, (const void*) &DefPumpMap, 8);
    5d20:	6e 01       	movw	r12, r28
    5d22:	08 94       	sec
    5d24:	c1 1c       	adc	r12, r1
    5d26:	d1 1c       	adc	r13, r1
    5d28:	c6 01       	movw	r24, r12
    5d2a:	66 e4       	ldi	r22, 0x46	; 70
    5d2c:	70 e0       	ldi	r23, 0x00	; 0
    5d2e:	48 e0       	ldi	r20, 0x08	; 8
    5d30:	50 e0       	ldi	r21, 0x00	; 0
    5d32:	0e 94 56 aa 	call	0x154ac	; 0x154ac <__eerd_block_m128>
    5d36:	76 01       	movw	r14, r12
    5d38:	05 e0       	ldi	r16, 0x05	; 5
    5d3a:	10 e0       	ldi	r17, 0x00	; 0
        for (i=0;i<4;i++){
             //leadingZero(__pump_id[i],strPumpL);
			 //leadingZero(__pump_id[i+4],strPumpR);
             //sprintf_P(lcdteks,PSTR("%d.P%s | %.P%s  "),(i+1),strPumpL,(i+5),strPumpR);
			 sprintf_P(lcdteks,PSTR("%d.P%.2d | %d.P%.2d "),(i+1),__pump_id[i],(i+5),__pump_id[i+4]);
    5d3c:	b9 e0       	ldi	r27, 0x09	; 9
    5d3e:	ab 2e       	mov	r10, r27
    5d40:	b1 2c       	mov	r11, r1
    5d42:	ac 0e       	add	r10, r28
    5d44:	bd 1e       	adc	r11, r29
    5d46:	a8 e9       	ldi	r26, 0x98	; 152
    5d48:	8a 2e       	mov	r8, r26
    5d4a:	ae e0       	ldi	r26, 0x0E	; 14
    5d4c:	9a 2e       	mov	r9, r26
    5d4e:	d7 01       	movw	r26, r14
    5d50:	2d 91       	ld	r18, X+
    5d52:	7d 01       	movw	r14, r26
    5d54:	ed b7       	in	r30, 0x3d	; 61
    5d56:	fe b7       	in	r31, 0x3e	; 62
    5d58:	3c 97       	sbiw	r30, 0x0c	; 12
    5d5a:	0f b6       	in	r0, 0x3f	; 63
    5d5c:	f8 94       	cli
    5d5e:	fe bf       	out	0x3e, r31	; 62
    5d60:	0f be       	out	0x3f, r0	; 63
    5d62:	ed bf       	out	0x3d, r30	; 61
    5d64:	31 96       	adiw	r30, 0x01	; 1
    5d66:	ad b7       	in	r26, 0x3d	; 61
    5d68:	be b7       	in	r27, 0x3e	; 62
    5d6a:	12 96       	adiw	r26, 0x02	; 2
    5d6c:	bc 92       	st	X, r11
    5d6e:	ae 92       	st	-X, r10
    5d70:	11 97       	sbiw	r26, 0x01	; 1
    5d72:	93 82       	std	Z+3, r9	; 0x03
    5d74:	82 82       	std	Z+2, r8	; 0x02

void leadingZero(char Val,char *StrResult){
     sprintf_P(StrResult,PSTR("%.2d"),Val);

}
void _scr_pump(void){
    5d76:	c8 01       	movw	r24, r16
    5d78:	04 97       	sbiw	r24, 0x04	; 4
		eeprom_read_block((void*) &__pump_id, (const void*) &DefPumpMap, 8);
        for (i=0;i<4;i++){
             //leadingZero(__pump_id[i],strPumpL);
			 //leadingZero(__pump_id[i+4],strPumpR);
             //sprintf_P(lcdteks,PSTR("%d.P%s | %.P%s  "),(i+1),strPumpL,(i+5),strPumpR);
			 sprintf_P(lcdteks,PSTR("%d.P%.2d | %d.P%.2d "),(i+1),__pump_id[i],(i+5),__pump_id[i+4]);
    5d7a:	95 83       	std	Z+5, r25	; 0x05
    5d7c:	84 83       	std	Z+4, r24	; 0x04
    5d7e:	26 83       	std	Z+6, r18	; 0x06
    5d80:	17 82       	std	Z+7, r1	; 0x07
    5d82:	11 87       	std	Z+9, r17	; 0x09
    5d84:	00 87       	std	Z+8, r16	; 0x08
    5d86:	d7 01       	movw	r26, r14
    5d88:	13 96       	adiw	r26, 0x03	; 3
    5d8a:	8c 91       	ld	r24, X
    5d8c:	82 87       	std	Z+10, r24	; 0x0a
    5d8e:	13 86       	std	Z+11, r1	; 0x0b
    5d90:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
			 lcd_print((i+1),1,lcdteks);
    5d94:	ed b7       	in	r30, 0x3d	; 61
    5d96:	fe b7       	in	r31, 0x3e	; 62
    5d98:	3c 96       	adiw	r30, 0x0c	; 12
    5d9a:	0f b6       	in	r0, 0x3f	; 63
    5d9c:	f8 94       	cli
    5d9e:	fe bf       	out	0x3e, r31	; 62
    5da0:	0f be       	out	0x3f, r0	; 63
    5da2:	ed bf       	out	0x3d, r30	; 61
    5da4:	8e 2d       	mov	r24, r14
    5da6:	8c 19       	sub	r24, r12
    5da8:	61 e0       	ldi	r22, 0x01	; 1
    5daa:	a5 01       	movw	r20, r10
    5dac:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
    5db0:	0f 5f       	subi	r16, 0xFF	; 255
    5db2:	1f 4f       	sbci	r17, 0xFF	; 255
	 char i;
     char lcdteks[20];
	 lcd_clear();_delay_ms(10);
	 //Display
		eeprom_read_block((void*) &__pump_id, (const void*) &DefPumpMap, 8);
        for (i=0;i<4;i++){
    5db4:	09 30       	cpi	r16, 0x09	; 9
    5db6:	11 05       	cpc	r17, r1
    5db8:	51 f6       	brne	.-108    	; 0x5d4e <_scr_pump+0x66>
			 //leadingZero(__pump_id[i+4],strPumpR);
             //sprintf_P(lcdteks,PSTR("%d.P%s | %.P%s  "),(i+1),strPumpL,(i+5),strPumpR);
			 sprintf_P(lcdteks,PSTR("%d.P%.2d | %d.P%.2d "),(i+1),__pump_id[i],(i+5),__pump_id[i+4]);
			 lcd_print((i+1),1,lcdteks);
		}
        lcd_printf(4,15,PSTR("*)Exit"));
    5dba:	84 e0       	ldi	r24, 0x04	; 4
    5dbc:	6f e0       	ldi	r22, 0x0F	; 15
    5dbe:	41 e9       	ldi	r20, 0x91	; 145
    5dc0:	5e e0       	ldi	r21, 0x0E	; 14
    5dc2:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
}
    5dc6:	6c 96       	adiw	r28, 0x1c	; 28
    5dc8:	0f b6       	in	r0, 0x3f	; 63
    5dca:	f8 94       	cli
    5dcc:	de bf       	out	0x3e, r29	; 62
    5dce:	0f be       	out	0x3f, r0	; 63
    5dd0:	cd bf       	out	0x3d, r28	; 61
    5dd2:	cf 91       	pop	r28
    5dd4:	df 91       	pop	r29
    5dd6:	1f 91       	pop	r17
    5dd8:	0f 91       	pop	r16
    5dda:	ff 90       	pop	r15
    5ddc:	ef 90       	pop	r14
    5dde:	df 90       	pop	r13
    5de0:	cf 90       	pop	r12
    5de2:	bf 90       	pop	r11
    5de4:	af 90       	pop	r10
    5de6:	9f 90       	pop	r9
    5de8:	8f 90       	pop	r8
    5dea:	08 95       	ret

00005dec <FMenuPumpLabel>:
		       break;		         
	      }
	 }     
}

void FMenuPumpLabel(){
    5dec:	bf 92       	push	r11
    5dee:	cf 92       	push	r12
    5df0:	df 92       	push	r13
    5df2:	ef 92       	push	r14
    5df4:	ff 92       	push	r15
    5df6:	0f 93       	push	r16
    5df8:	1f 93       	push	r17
    5dfa:	df 93       	push	r29
    5dfc:	cf 93       	push	r28
    5dfe:	cd b7       	in	r28, 0x3d	; 61
    5e00:	de b7       	in	r29, 0x3e	; 62
    5e02:	2e 97       	sbiw	r28, 0x0e	; 14
    5e04:	0f b6       	in	r0, 0x3f	; 63
    5e06:	f8 94       	cli
    5e08:	de bf       	out	0x3e, r29	; 62
    5e0a:	0f be       	out	0x3f, r0	; 63
    5e0c:	cd bf       	out	0x3d, r28	; 61
	char PPumpLabel[8];
	unsigned char i, xPos,yPos,KeyPressed,KeyChar,strLabel[5];
	static char MaxCountId=16;

	eeprom_read_block((void*) &PPumpLabel, (const void*) &DefPumpLabel, 8);
    5e0e:	8e 01       	movw	r16, r28
    5e10:	0a 5f       	subi	r16, 0xFA	; 250
    5e12:	1f 4f       	sbci	r17, 0xFF	; 255
    5e14:	c8 01       	movw	r24, r16
    5e16:	6e e4       	ldi	r22, 0x4E	; 78
    5e18:	70 e0       	ldi	r23, 0x00	; 0
    5e1a:	48 e0       	ldi	r20, 0x08	; 8
    5e1c:	50 e0       	ldi	r21, 0x00	; 0
    5e1e:	0e 94 56 aa 	call	0x154ac	; 0x154ac <__eerd_block_m128>
	MaxCountId=99;
    5e22:	83 e6       	ldi	r24, 0x63	; 99
    5e24:	80 93 56 01 	sts	0x0156, r24
	lcd_clear();_delay_ms(10);
    5e28:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
    5e2c:	83 ec       	ldi	r24, 0xC3	; 195
    5e2e:	99 e0       	ldi	r25, 0x09	; 9
    5e30:	01 97       	sbiw	r24, 0x01	; 1
    5e32:	f1 f7       	brne	.-4      	; 0x5e30 <FMenuPumpLabel+0x44>
    5e34:	00 c0       	rjmp	.+0      	; 0x5e36 <FMenuPumpLabel+0x4a>
    5e36:	00 00       	nop
	lcd_printf(1, 1, PSTR("1)1:   5)5:"));
    5e38:	81 e0       	ldi	r24, 0x01	; 1
    5e3a:	61 e0       	ldi	r22, 0x01	; 1
    5e3c:	43 e4       	ldi	r20, 0x43	; 67
    5e3e:	5e e0       	ldi	r21, 0x0E	; 14
    5e40:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
	lcd_printf(2, 1, PSTR("2)2:   6)6:"));
    5e44:	82 e0       	ldi	r24, 0x02	; 2
    5e46:	61 e0       	ldi	r22, 0x01	; 1
    5e48:	47 e3       	ldi	r20, 0x37	; 55
    5e4a:	5e e0       	ldi	r21, 0x0E	; 14
    5e4c:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
	lcd_printf(3, 1, PSTR("3)3:   7)7:   #)Save"));
    5e50:	83 e0       	ldi	r24, 0x03	; 3
    5e52:	61 e0       	ldi	r22, 0x01	; 1
    5e54:	42 e2       	ldi	r20, 0x22	; 34
    5e56:	5e e0       	ldi	r21, 0x0E	; 14
    5e58:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
	lcd_printf(4, 1, PSTR("4)4:   8)8:   *)Exit"));
    5e5c:	84 e0       	ldi	r24, 0x04	; 4
    5e5e:	61 e0       	ldi	r22, 0x01	; 1
    5e60:	4d e0       	ldi	r20, 0x0D	; 13
    5e62:	5e e0       	ldi	r21, 0x0E	; 14
    5e64:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
    5e68:	78 01       	movw	r14, r16

	for(i=0;i< 8;i++){
    5e6a:	bb 24       	eor	r11, r11
	    sprintf_P(strLabel,PSTR("%.2d"),PPumpLabel[i]);
    5e6c:	8e 01       	movw	r16, r28
    5e6e:	0f 5f       	subi	r16, 0xFF	; 255
    5e70:	1f 4f       	sbci	r17, 0xFF	; 255
    5e72:	98 e0       	ldi	r25, 0x08	; 8
    5e74:	c9 2e       	mov	r12, r25
    5e76:	9e e0       	ldi	r25, 0x0E	; 14
    5e78:	d9 2e       	mov	r13, r25
    5e7a:	d7 01       	movw	r26, r14
    5e7c:	8d 91       	ld	r24, X+
    5e7e:	7d 01       	movw	r14, r26
    5e80:	00 d0       	rcall	.+0      	; 0x5e82 <FMenuPumpLabel+0x96>
    5e82:	00 d0       	rcall	.+0      	; 0x5e84 <FMenuPumpLabel+0x98>
    5e84:	00 d0       	rcall	.+0      	; 0x5e86 <FMenuPumpLabel+0x9a>
    5e86:	ed b7       	in	r30, 0x3d	; 61
    5e88:	fe b7       	in	r31, 0x3e	; 62
    5e8a:	31 96       	adiw	r30, 0x01	; 1
    5e8c:	ad b7       	in	r26, 0x3d	; 61
    5e8e:	be b7       	in	r27, 0x3e	; 62
    5e90:	12 96       	adiw	r26, 0x02	; 2
    5e92:	1c 93       	st	X, r17
    5e94:	0e 93       	st	-X, r16
    5e96:	11 97       	sbiw	r26, 0x01	; 1
    5e98:	d3 82       	std	Z+3, r13	; 0x03
    5e9a:	c2 82       	std	Z+2, r12	; 0x02
    5e9c:	84 83       	std	Z+4, r24	; 0x04
    5e9e:	15 82       	std	Z+5, r1	; 0x05
    5ea0:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		xPos=1+(i%4);
		yPos=5+(i/4)*8;
        lcd_print(xPos,yPos,strLabel);
    5ea4:	ed b7       	in	r30, 0x3d	; 61
    5ea6:	fe b7       	in	r31, 0x3e	; 62
    5ea8:	36 96       	adiw	r30, 0x06	; 6
    5eaa:	0f b6       	in	r0, 0x3f	; 63
    5eac:	f8 94       	cli
    5eae:	fe bf       	out	0x3e, r31	; 62
    5eb0:	0f be       	out	0x3f, r0	; 63
    5eb2:	ed bf       	out	0x3d, r30	; 61
	lcd_printf(3, 1, PSTR("3)3:   7)7:   #)Save"));
	lcd_printf(4, 1, PSTR("4)4:   8)8:   *)Exit"));

	for(i=0;i< 8;i++){
	    sprintf_P(strLabel,PSTR("%.2d"),PPumpLabel[i]);
		xPos=1+(i%4);
    5eb4:	8b 2d       	mov	r24, r11
    5eb6:	83 70       	andi	r24, 0x03	; 3
		yPos=5+(i/4)*8;
    5eb8:	6b 2d       	mov	r22, r11
    5eba:	66 95       	lsr	r22
    5ebc:	66 95       	lsr	r22
    5ebe:	66 0f       	add	r22, r22
    5ec0:	66 0f       	add	r22, r22
    5ec2:	66 0f       	add	r22, r22
    5ec4:	6b 5f       	subi	r22, 0xFB	; 251
        lcd_print(xPos,yPos,strLabel);
    5ec6:	8f 5f       	subi	r24, 0xFF	; 255
    5ec8:	a8 01       	movw	r20, r16
    5eca:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
	lcd_printf(1, 1, PSTR("1)1:   5)5:"));
	lcd_printf(2, 1, PSTR("2)2:   6)6:"));
	lcd_printf(3, 1, PSTR("3)3:   7)7:   #)Save"));
	lcd_printf(4, 1, PSTR("4)4:   8)8:   *)Exit"));

	for(i=0;i< 8;i++){
    5ece:	b3 94       	inc	r11
    5ed0:	fb 2d       	mov	r31, r11
    5ed2:	f8 30       	cpi	r31, 0x08	; 8
    5ed4:	91 f6       	brne	.-92     	; 0x5e7a <FMenuPumpLabel+0x8e>
			eeprom_write_block((const void*) &PPumpLabel, (void*) &DefPumpLabel, 8);
			break;
		}
		if ((KeyChar>='1') && (KeyChar<= '8')){
		     i=(KeyChar-'1');
			if(PPumpLabel[i] == MaxCountId)
    5ed6:	8e 01       	movw	r16, r28
    5ed8:	0a 5f       	subi	r16, 0xFA	; 250
    5eda:	1f 4f       	sbci	r17, 0xFF	; 255
			   PPumpLabel[i] = 0;
			else
			   PPumpLabel[i]++;
            xPos=1+(i%4);
		    yPos=5+(i/4)*8;
			sprintf_P(strLabel,PSTR("%.2d"),PPumpLabel[i]);
    5edc:	7e 01       	movw	r14, r28
    5ede:	08 94       	sec
    5ee0:	e1 1c       	adc	r14, r1
    5ee2:	f1 1c       	adc	r15, r1
    5ee4:	83 e0       	ldi	r24, 0x03	; 3
    5ee6:	c8 2e       	mov	r12, r24
    5ee8:	8e e0       	ldi	r24, 0x0E	; 14
    5eea:	d8 2e       	mov	r13, r24
		yPos=5+(i/4)*8;
        lcd_print(xPos,yPos,strLabel);
	}

	while(1){
		KeyPressed = _key_scan(1);
    5eec:	81 e0       	ldi	r24, 0x01	; 1
    5eee:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <_key_scan>
    5ef2:	98 2f       	mov	r25, r24
		KeyChar    = _key_btn(KeyPressed);
    5ef4:	9e 87       	std	Y+14, r25	; 0x0e
    5ef6:	0e 94 49 a3 	call	0x14692	; 0x14692 <_key_btn>
		if(KeyPressed == _KEY_CANCEL)break;
    5efa:	9e 85       	ldd	r25, Y+14	; 0x0e
    5efc:	97 3e       	cpi	r25, 0xE7	; 231
    5efe:	09 f4       	brne	.+2      	; 0x5f02 <FMenuPumpLabel+0x116>
    5f00:	4a c0       	rjmp	.+148    	; 0x5f96 <FMenuPumpLabel+0x1aa>
		else
		if(KeyPressed == _KEY_ENTER){
    5f02:	97 3b       	cpi	r25, 0xB7	; 183
    5f04:	49 f4       	brne	.+18     	; 0x5f18 <FMenuPumpLabel+0x12c>
			eeprom_write_block((const void*) &PPumpLabel, (void*) &DefPumpLabel, 8);
    5f06:	ce 01       	movw	r24, r28
    5f08:	06 96       	adiw	r24, 0x06	; 6
    5f0a:	6e e4       	ldi	r22, 0x4E	; 78
    5f0c:	70 e0       	ldi	r23, 0x00	; 0
    5f0e:	48 e0       	ldi	r20, 0x08	; 8
    5f10:	50 e0       	ldi	r21, 0x00	; 0
    5f12:	0e 94 6e aa 	call	0x154dc	; 0x154dc <__eewr_block_m128>
    5f16:	3f c0       	rjmp	.+126    	; 0x5f96 <FMenuPumpLabel+0x1aa>
			break;
		}
		if ((KeyChar>='1') && (KeyChar<= '8')){
    5f18:	68 2f       	mov	r22, r24
    5f1a:	61 53       	subi	r22, 0x31	; 49
    5f1c:	68 30       	cpi	r22, 0x08	; 8
    5f1e:	30 f7       	brcc	.-52     	; 0x5eec <FMenuPumpLabel+0x100>
		     i=(KeyChar-'1');
			if(PPumpLabel[i] == MaxCountId)
    5f20:	26 2f       	mov	r18, r22
    5f22:	30 e0       	ldi	r19, 0x00	; 0
    5f24:	f8 01       	movw	r30, r16
    5f26:	e2 0f       	add	r30, r18
    5f28:	f3 1f       	adc	r31, r19
    5f2a:	80 81       	ld	r24, Z
    5f2c:	90 91 56 01 	lds	r25, 0x0156
    5f30:	89 17       	cp	r24, r25
    5f32:	11 f4       	brne	.+4      	; 0x5f38 <FMenuPumpLabel+0x14c>
			   PPumpLabel[i] = 0;
    5f34:	10 82       	st	Z, r1
    5f36:	02 c0       	rjmp	.+4      	; 0x5f3c <FMenuPumpLabel+0x150>
			else
			   PPumpLabel[i]++;
    5f38:	8f 5f       	subi	r24, 0xFF	; 255
    5f3a:	80 83       	st	Z, r24
            xPos=1+(i%4);
		    yPos=5+(i/4)*8;
			sprintf_P(strLabel,PSTR("%.2d"),PPumpLabel[i]);
    5f3c:	00 d0       	rcall	.+0      	; 0x5f3e <FMenuPumpLabel+0x152>
    5f3e:	00 d0       	rcall	.+0      	; 0x5f40 <FMenuPumpLabel+0x154>
    5f40:	00 d0       	rcall	.+0      	; 0x5f42 <FMenuPumpLabel+0x156>
    5f42:	ed b7       	in	r30, 0x3d	; 61
    5f44:	fe b7       	in	r31, 0x3e	; 62
    5f46:	31 96       	adiw	r30, 0x01	; 1
    5f48:	ad b7       	in	r26, 0x3d	; 61
    5f4a:	be b7       	in	r27, 0x3e	; 62
    5f4c:	12 96       	adiw	r26, 0x02	; 2
    5f4e:	fc 92       	st	X, r15
    5f50:	ee 92       	st	-X, r14
    5f52:	11 97       	sbiw	r26, 0x01	; 1
    5f54:	d3 82       	std	Z+3, r13	; 0x03
    5f56:	c2 82       	std	Z+2, r12	; 0x02
    5f58:	20 0f       	add	r18, r16
    5f5a:	31 1f       	adc	r19, r17
    5f5c:	d9 01       	movw	r26, r18
    5f5e:	8c 91       	ld	r24, X
    5f60:	84 83       	std	Z+4, r24	; 0x04
    5f62:	15 82       	std	Z+5, r1	; 0x05
    5f64:	6e 87       	std	Y+14, r22	; 0x0e
    5f66:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
            lcd_print(xPos,yPos,strLabel);
    5f6a:	ed b7       	in	r30, 0x3d	; 61
    5f6c:	fe b7       	in	r31, 0x3e	; 62
    5f6e:	36 96       	adiw	r30, 0x06	; 6
    5f70:	0f b6       	in	r0, 0x3f	; 63
    5f72:	f8 94       	cli
    5f74:	fe bf       	out	0x3e, r31	; 62
    5f76:	0f be       	out	0x3f, r0	; 63
    5f78:	ed bf       	out	0x3d, r30	; 61
		     i=(KeyChar-'1');
			if(PPumpLabel[i] == MaxCountId)
			   PPumpLabel[i] = 0;
			else
			   PPumpLabel[i]++;
            xPos=1+(i%4);
    5f7a:	6e 85       	ldd	r22, Y+14	; 0x0e
    5f7c:	86 2f       	mov	r24, r22
    5f7e:	83 70       	andi	r24, 0x03	; 3
		    yPos=5+(i/4)*8;
    5f80:	66 95       	lsr	r22
    5f82:	66 95       	lsr	r22
    5f84:	66 0f       	add	r22, r22
    5f86:	66 0f       	add	r22, r22
    5f88:	66 0f       	add	r22, r22
    5f8a:	6b 5f       	subi	r22, 0xFB	; 251
			sprintf_P(strLabel,PSTR("%.2d"),PPumpLabel[i]);
            lcd_print(xPos,yPos,strLabel);
    5f8c:	8f 5f       	subi	r24, 0xFF	; 255
    5f8e:	a7 01       	movw	r20, r14
    5f90:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
    5f94:	ab cf       	rjmp	.-170    	; 0x5eec <FMenuPumpLabel+0x100>
		}
	}
}
    5f96:	2e 96       	adiw	r28, 0x0e	; 14
    5f98:	0f b6       	in	r0, 0x3f	; 63
    5f9a:	f8 94       	cli
    5f9c:	de bf       	out	0x3e, r29	; 62
    5f9e:	0f be       	out	0x3f, r0	; 63
    5fa0:	cd bf       	out	0x3d, r28	; 61
    5fa2:	cf 91       	pop	r28
    5fa4:	df 91       	pop	r29
    5fa6:	1f 91       	pop	r17
    5fa8:	0f 91       	pop	r16
    5faa:	ff 90       	pop	r15
    5fac:	ef 90       	pop	r14
    5fae:	df 90       	pop	r13
    5fb0:	cf 90       	pop	r12
    5fb2:	bf 90       	pop	r11
    5fb4:	08 95       	ret

00005fb6 <IncValue>:

void IncValue(char *Value,char MinValue,char MaxValue){
    5fb6:	fc 01       	movw	r30, r24
     if ((*Value)<MaxValue){
    5fb8:	80 81       	ld	r24, Z
    5fba:	84 17       	cp	r24, r20
    5fbc:	18 f4       	brcc	.+6      	; 0x5fc4 <IncValue+0xe>
	     (*Value)++;
    5fbe:	8f 5f       	subi	r24, 0xFF	; 255
    5fc0:	80 83       	st	Z, r24
    5fc2:	08 95       	ret
	 }else *Value=MinValue;
    5fc4:	60 83       	st	Z, r22
    5fc6:	08 95       	ret

00005fc8 <DecValue>:
}

void DecValue(char *Value,char MinValue,char MaxValue){
    5fc8:	fc 01       	movw	r30, r24
     if ((*Value)>MinValue){
    5fca:	80 81       	ld	r24, Z
    5fcc:	68 17       	cp	r22, r24
    5fce:	18 f4       	brcc	.+6      	; 0x5fd6 <DecValue+0xe>
	     (*Value)--;
    5fd0:	81 50       	subi	r24, 0x01	; 1
    5fd2:	80 83       	st	Z, r24
    5fd4:	08 95       	ret
	 }else *Value=MaxValue;
    5fd6:	40 83       	st	Z, r20
    5fd8:	08 95       	ret

00005fda <FSettingPumpID>:
}

char FSettingPumpID(){
    5fda:	9f 92       	push	r9
    5fdc:	af 92       	push	r10
    5fde:	bf 92       	push	r11
    5fe0:	cf 92       	push	r12
    5fe2:	df 92       	push	r13
    5fe4:	ef 92       	push	r14
    5fe6:	ff 92       	push	r15
    5fe8:	0f 93       	push	r16
    5fea:	1f 93       	push	r17
    5fec:	df 93       	push	r29
    5fee:	cf 93       	push	r28
    5ff0:	cd b7       	in	r28, 0x3d	; 61
    5ff2:	de b7       	in	r29, 0x3e	; 62
    5ff4:	64 97       	sbiw	r28, 0x14	; 20
    5ff6:	0f b6       	in	r0, 0x3f	; 63
    5ff8:	f8 94       	cli
    5ffa:	de bf       	out	0x3e, r29	; 62
    5ffc:	0f be       	out	0x3f, r0	; 63
    5ffe:	cd bf       	out	0x3d, r28	; 61
	 char iLoop,Result,KeyChar,KeyPressed,i,j,CheckPump;
	 char lcdteks[20];
	 static char Idx,PPumpId[8],MsgPumpId,PumpCount;
     
	 Result=MENU_NONE;
	 switch (stMenuPumpID){
    6000:	80 91 f9 02 	lds	r24, 0x02F9
    6004:	85 30       	cpi	r24, 0x05	; 5
    6006:	09 f4       	brne	.+2      	; 0x600a <FSettingPumpID+0x30>
    6008:	71 c1       	rjmp	.+738    	; 0x62ec <FSettingPumpID+0x312>
    600a:	86 30       	cpi	r24, 0x06	; 6
    600c:	90 f4       	brcc	.+36     	; 0x6032 <FSettingPumpID+0x58>
    600e:	82 30       	cpi	r24, 0x02	; 2
    6010:	09 f4       	brne	.+2      	; 0x6014 <FSettingPumpID+0x3a>
    6012:	87 c0       	rjmp	.+270    	; 0x6122 <FSettingPumpID+0x148>
    6014:	83 30       	cpi	r24, 0x03	; 3
    6016:	30 f4       	brcc	.+12     	; 0x6024 <FSettingPumpID+0x4a>
    6018:	88 23       	and	r24, r24
    601a:	f1 f0       	breq	.+60     	; 0x6058 <FSettingPumpID+0x7e>
    601c:	81 30       	cpi	r24, 0x01	; 1
    601e:	09 f0       	breq	.+2      	; 0x6022 <FSettingPumpID+0x48>
    6020:	45 c2       	rjmp	.+1162   	; 0x64ac <FSettingPumpID+0x4d2>
    6022:	2b c0       	rjmp	.+86     	; 0x607a <FSettingPumpID+0xa0>
    6024:	83 30       	cpi	r24, 0x03	; 3
    6026:	09 f4       	brne	.+2      	; 0x602a <FSettingPumpID+0x50>
    6028:	3e c1       	rjmp	.+636    	; 0x62a6 <FSettingPumpID+0x2cc>
    602a:	84 30       	cpi	r24, 0x04	; 4
    602c:	09 f0       	breq	.+2      	; 0x6030 <FSettingPumpID+0x56>
    602e:	3e c2       	rjmp	.+1148   	; 0x64ac <FSettingPumpID+0x4d2>
    6030:	56 c1       	rjmp	.+684    	; 0x62de <FSettingPumpID+0x304>
    6032:	88 30       	cpi	r24, 0x08	; 8
    6034:	09 f4       	brne	.+2      	; 0x6038 <FSettingPumpID+0x5e>
    6036:	dd c1       	rjmp	.+954    	; 0x63f2 <FSettingPumpID+0x418>
    6038:	89 30       	cpi	r24, 0x09	; 9
    603a:	38 f4       	brcc	.+14     	; 0x604a <FSettingPumpID+0x70>
    603c:	86 30       	cpi	r24, 0x06	; 6
    603e:	09 f4       	brne	.+2      	; 0x6042 <FSettingPumpID+0x68>
    6040:	80 c1       	rjmp	.+768    	; 0x6342 <FSettingPumpID+0x368>
    6042:	87 30       	cpi	r24, 0x07	; 7
    6044:	09 f0       	breq	.+2      	; 0x6048 <FSettingPumpID+0x6e>
    6046:	32 c2       	rjmp	.+1124   	; 0x64ac <FSettingPumpID+0x4d2>
    6048:	17 c2       	rjmp	.+1070   	; 0x6478 <FSettingPumpID+0x49e>
    604a:	89 30       	cpi	r24, 0x09	; 9
    604c:	09 f4       	brne	.+2      	; 0x6050 <FSettingPumpID+0x76>
    604e:	1c c2       	rjmp	.+1080   	; 0x6488 <FSettingPumpID+0x4ae>
    6050:	8a 30       	cpi	r24, 0x0A	; 10
    6052:	09 f0       	breq	.+2      	; 0x6056 <FSettingPumpID+0x7c>
    6054:	2b c2       	rjmp	.+1110   	; 0x64ac <FSettingPumpID+0x4d2>
    6056:	1e c2       	rjmp	.+1084   	; 0x6494 <FSettingPumpID+0x4ba>
	 case mpInitPumpId:	      
	      //Disable PumpPooling
		  if (IFType==IT_STANDALONE)SendSlaveCommand(SC_STOP_POOL_SEQUENCE,0);
    6058:	80 91 00 01 	lds	r24, 0x0100
    605c:	82 30       	cpi	r24, 0x02	; 2
    605e:	21 f4       	brne	.+8      	; 0x6068 <FSettingPumpID+0x8e>
    6060:	8f e1       	ldi	r24, 0x1F	; 31
    6062:	60 e0       	ldi	r22, 0x00	; 0
    6064:	0e 94 29 19 	call	0x3252	; 0x3252 <SendSlaveCommand>
		  eeprom_read_block((void*) &PPumpId, (const void*) &DefPumpMap,8);
    6068:	8f ee       	ldi	r24, 0xEF	; 239
    606a:	92 e0       	ldi	r25, 0x02	; 2
    606c:	66 e4       	ldi	r22, 0x46	; 70
    606e:	70 e0       	ldi	r23, 0x00	; 0
    6070:	48 e0       	ldi	r20, 0x08	; 8
    6072:	50 e0       	ldi	r21, 0x00	; 0
    6074:	0e 94 56 aa 	call	0x154ac	; 0x154ac <__eerd_block_m128>
    6078:	37 c1       	rjmp	.+622    	; 0x62e8 <FSettingPumpID+0x30e>
          stMenuPumpID=mpDisplayPumpId;
	      break;
	 case mpDisplayPumpId:
	      lcd_clear();		  
    607a:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
    607e:	6f ee       	ldi	r22, 0xEF	; 239
    6080:	e6 2e       	mov	r14, r22
    6082:	62 e0       	ldi	r22, 0x02	; 2
    6084:	f6 2e       	mov	r15, r22
    6086:	05 e0       	ldi	r16, 0x05	; 5
    6088:	10 e0       	ldi	r17, 0x00	; 0
		  for (iLoop=0;iLoop<4;iLoop++){
			  sprintf_P(lcdteks,PSTR("%d.P%.2d | %d.P%.2d"),(iLoop+1),PPumpId[iLoop],(iLoop+5),PPumpId[iLoop+4]);
    608a:	6e 01       	movw	r12, r28
    608c:	08 94       	sec
    608e:	c1 1c       	adc	r12, r1
    6090:	d1 1c       	adc	r13, r1
    6092:	5f ee       	ldi	r21, 0xEF	; 239
    6094:	a5 2e       	mov	r10, r21
    6096:	5d e0       	ldi	r21, 0x0D	; 13
    6098:	b5 2e       	mov	r11, r21
    609a:	d7 01       	movw	r26, r14
    609c:	2d 91       	ld	r18, X+
    609e:	7d 01       	movw	r14, r26
    60a0:	ed b7       	in	r30, 0x3d	; 61
    60a2:	fe b7       	in	r31, 0x3e	; 62
    60a4:	3c 97       	sbiw	r30, 0x0c	; 12
    60a6:	0f b6       	in	r0, 0x3f	; 63
    60a8:	f8 94       	cli
    60aa:	fe bf       	out	0x3e, r31	; 62
    60ac:	0f be       	out	0x3f, r0	; 63
    60ae:	ed bf       	out	0x3d, r30	; 61
    60b0:	31 96       	adiw	r30, 0x01	; 1
    60b2:	ad b7       	in	r26, 0x3d	; 61
    60b4:	be b7       	in	r27, 0x3e	; 62
    60b6:	12 96       	adiw	r26, 0x02	; 2
    60b8:	dc 92       	st	X, r13
    60ba:	ce 92       	st	-X, r12
    60bc:	11 97       	sbiw	r26, 0x01	; 1
    60be:	b3 82       	std	Z+3, r11	; 0x03
    60c0:	a2 82       	std	Z+2, r10	; 0x02
     if ((*Value)>MinValue){
	     (*Value)--;
	 }else *Value=MaxValue;
}

char FSettingPumpID(){
    60c2:	c8 01       	movw	r24, r16
    60c4:	04 97       	sbiw	r24, 0x04	; 4
          stMenuPumpID=mpDisplayPumpId;
	      break;
	 case mpDisplayPumpId:
	      lcd_clear();		  
		  for (iLoop=0;iLoop<4;iLoop++){
			  sprintf_P(lcdteks,PSTR("%d.P%.2d | %d.P%.2d"),(iLoop+1),PPumpId[iLoop],(iLoop+5),PPumpId[iLoop+4]);
    60c6:	95 83       	std	Z+5, r25	; 0x05
    60c8:	84 83       	std	Z+4, r24	; 0x04
    60ca:	26 83       	std	Z+6, r18	; 0x06
    60cc:	17 82       	std	Z+7, r1	; 0x07
    60ce:	11 87       	std	Z+9, r17	; 0x09
    60d0:	00 87       	std	Z+8, r16	; 0x08
    60d2:	d7 01       	movw	r26, r14
    60d4:	13 96       	adiw	r26, 0x03	; 3
    60d6:	8c 91       	ld	r24, X
    60d8:	82 87       	std	Z+10, r24	; 0x0a
    60da:	13 86       	std	Z+11, r1	; 0x0b
    60dc:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
			  lcd_print((iLoop+1),1,lcdteks);
    60e0:	ed b7       	in	r30, 0x3d	; 61
    60e2:	fe b7       	in	r31, 0x3e	; 62
    60e4:	3c 96       	adiw	r30, 0x0c	; 12
    60e6:	0f b6       	in	r0, 0x3f	; 63
    60e8:	f8 94       	cli
    60ea:	fe bf       	out	0x3e, r31	; 62
    60ec:	0f be       	out	0x3f, r0	; 63
    60ee:	ed bf       	out	0x3d, r30	; 61
    60f0:	80 2f       	mov	r24, r16
    60f2:	84 50       	subi	r24, 0x04	; 4
    60f4:	61 e0       	ldi	r22, 0x01	; 1
    60f6:	a6 01       	movw	r20, r12
    60f8:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
    60fc:	0f 5f       	subi	r16, 0xFF	; 255
    60fe:	1f 4f       	sbci	r17, 0xFF	; 255
		  eeprom_read_block((void*) &PPumpId, (const void*) &DefPumpMap,8);
          stMenuPumpID=mpDisplayPumpId;
	      break;
	 case mpDisplayPumpId:
	      lcd_clear();		  
		  for (iLoop=0;iLoop<4;iLoop++){
    6100:	09 30       	cpi	r16, 0x09	; 9
    6102:	11 05       	cpc	r17, r1
    6104:	51 f6       	brne	.-108    	; 0x609a <FSettingPumpID+0xc0>
			  sprintf_P(lcdteks,PSTR("%d.P%.2d | %d.P%.2d"),(iLoop+1),PPumpId[iLoop],(iLoop+5),PPumpId[iLoop+4]);
			  lcd_print((iLoop+1),1,lcdteks);
          }
          lcd_printf(3,15,PSTR("*)Back"));
    6106:	83 e0       	ldi	r24, 0x03	; 3
    6108:	6f e0       	ldi	r22, 0x0F	; 15
    610a:	48 ee       	ldi	r20, 0xE8	; 232
    610c:	5d e0       	ldi	r21, 0x0D	; 13
    610e:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
	      lcd_printf(4,15,PSTR("#)Save"));
    6112:	84 e0       	ldi	r24, 0x04	; 4
    6114:	6f e0       	ldi	r22, 0x0F	; 15
    6116:	41 ee       	ldi	r20, 0xE1	; 225
    6118:	5d e0       	ldi	r21, 0x0D	; 13
    611a:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
          stMenuPumpID=mpSelectInput;
    611e:	82 e0       	ldi	r24, 0x02	; 2
    6120:	b0 c1       	rjmp	.+864    	; 0x6482 <FSettingPumpID+0x4a8>
	      break;
     case mpSelectInput:
	      KeyPressed=_key_scan(1);
    6122:	81 e0       	ldi	r24, 0x01	; 1
    6124:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <_key_scan>
    6128:	98 2e       	mov	r9, r24
	      KeyChar=_key_btn(KeyPressed);
    612a:	0e 94 49 a3 	call	0x14692	; 0x14692 <_key_btn>
          if ((KeyChar>='1') && (KeyChar<='8')){
    612e:	98 2f       	mov	r25, r24
    6130:	91 53       	subi	r25, 0x31	; 49
    6132:	98 30       	cpi	r25, 0x08	; 8
    6134:	08 f0       	brcs	.+2      	; 0x6138 <FSettingPumpID+0x15e>
    6136:	7f c0       	rjmp	.+254    	; 0x6236 <FSettingPumpID+0x25c>
		      //eeprom_read_block((void*) &PPumpId, (const void*) &DefPumpMap,8);
			  switch(IFType){
    6138:	90 91 00 01 	lds	r25, 0x0100
    613c:	91 30       	cpi	r25, 0x01	; 1
    613e:	19 f0       	breq	.+6      	; 0x6146 <FSettingPumpID+0x16c>
    6140:	92 30       	cpi	r25, 0x02	; 2
    6142:	a1 f5       	brne	.+104    	; 0x61ac <FSettingPumpID+0x1d2>
    6144:	17 c0       	rjmp	.+46     	; 0x6174 <FSettingPumpID+0x19a>
			  case IT_SLAVE:
			       if (IsShift==False)IncValue(&PPumpId[KeyChar-'1'],0,99);//PPumpId[KeyChar-'1']=((PPumpId[KeyChar-'1']+1)%100);
    6146:	90 91 f8 02 	lds	r25, 0x02F8
    614a:	99 23       	and	r25, r25
    614c:	41 f4       	brne	.+16     	; 0x615e <FSettingPumpID+0x184>
    614e:	e8 2f       	mov	r30, r24
    6150:	f0 e0       	ldi	r31, 0x00	; 0
		}
	}
}

void IncValue(char *Value,char MinValue,char MaxValue){
     if ((*Value)<MaxValue){
    6152:	e2 54       	subi	r30, 0x42	; 66
    6154:	fd 4f       	sbci	r31, 0xFD	; 253
    6156:	80 81       	ld	r24, Z
    6158:	83 36       	cpi	r24, 0x63	; 99
    615a:	c8 f4       	brcc	.+50     	; 0x618e <FSettingPumpID+0x1b4>
    615c:	16 c0       	rjmp	.+44     	; 0x618a <FSettingPumpID+0x1b0>
		      //eeprom_read_block((void*) &PPumpId, (const void*) &DefPumpMap,8);
			  switch(IFType){
			  case IT_SLAVE:
			       if (IsShift==False)IncValue(&PPumpId[KeyChar-'1'],0,99);//PPumpId[KeyChar-'1']=((PPumpId[KeyChar-'1']+1)%100);
				   else
				   if (IsShift==True)DecValue(&PPumpId[KeyChar-'1'],0,99);//PPumpId[KeyChar-'1']=100-(100-((PPumpId[KeyChar-'1']+1)%100));
    615e:	91 30       	cpi	r25, 0x01	; 1
    6160:	29 f5       	brne	.+74     	; 0x61ac <FSettingPumpID+0x1d2>
    6162:	e8 2f       	mov	r30, r24
    6164:	f0 e0       	ldi	r31, 0x00	; 0
	     (*Value)++;
	 }else *Value=MinValue;
}

void DecValue(char *Value,char MinValue,char MaxValue){
     if ((*Value)>MinValue){
    6166:	e2 54       	subi	r30, 0x42	; 66
    6168:	fd 4f       	sbci	r31, 0xFD	; 253
    616a:	80 81       	ld	r24, Z
    616c:	88 23       	and	r24, r24
    616e:	d1 f4       	brne	.+52     	; 0x61a4 <FSettingPumpID+0x1ca>
	     (*Value)--;
	 }else *Value=MaxValue;
    6170:	83 e6       	ldi	r24, 0x63	; 99
    6172:	1b c0       	rjmp	.+54     	; 0x61aa <FSettingPumpID+0x1d0>
			       if (IsShift==False)IncValue(&PPumpId[KeyChar-'1'],0,99);//PPumpId[KeyChar-'1']=((PPumpId[KeyChar-'1']+1)%100);
				   else
				   if (IsShift==True)DecValue(&PPumpId[KeyChar-'1'],0,99);//PPumpId[KeyChar-'1']=100-(100-((PPumpId[KeyChar-'1']+1)%100));
			       break;
              case IT_STANDALONE:
			       if (IsShift==False)IncValue(&PPumpId[KeyChar-'1'],0,16);//PPumpId[KeyChar-'1']=((PPumpId[KeyChar-'1']+1)%16);
    6174:	90 91 f8 02 	lds	r25, 0x02F8
    6178:	99 23       	and	r25, r25
    617a:	59 f4       	brne	.+22     	; 0x6192 <FSettingPumpID+0x1b8>
    617c:	e8 2f       	mov	r30, r24
    617e:	f0 e0       	ldi	r31, 0x00	; 0
		}
	}
}

void IncValue(char *Value,char MinValue,char MaxValue){
     if ((*Value)<MaxValue){
    6180:	e2 54       	subi	r30, 0x42	; 66
    6182:	fd 4f       	sbci	r31, 0xFD	; 253
    6184:	80 81       	ld	r24, Z
    6186:	80 31       	cpi	r24, 0x10	; 16
    6188:	10 f4       	brcc	.+4      	; 0x618e <FSettingPumpID+0x1b4>
	     (*Value)++;
    618a:	8f 5f       	subi	r24, 0xFF	; 255
    618c:	0e c0       	rjmp	.+28     	; 0x61aa <FSettingPumpID+0x1d0>
	 }else *Value=MinValue;
    618e:	10 82       	st	Z, r1
    6190:	0d c0       	rjmp	.+26     	; 0x61ac <FSettingPumpID+0x1d2>
				   if (IsShift==True)DecValue(&PPumpId[KeyChar-'1'],0,99);//PPumpId[KeyChar-'1']=100-(100-((PPumpId[KeyChar-'1']+1)%100));
			       break;
              case IT_STANDALONE:
			       if (IsShift==False)IncValue(&PPumpId[KeyChar-'1'],0,16);//PPumpId[KeyChar-'1']=((PPumpId[KeyChar-'1']+1)%16);
				   else
				   if (IsShift==True)DecValue(&PPumpId[KeyChar-'1'],0,16);//PPumpId[KeyChar-'1']=17-(17-((PPumpId[KeyChar-'1']+1)%17));
    6192:	91 30       	cpi	r25, 0x01	; 1
    6194:	59 f4       	brne	.+22     	; 0x61ac <FSettingPumpID+0x1d2>
    6196:	e8 2f       	mov	r30, r24
    6198:	f0 e0       	ldi	r31, 0x00	; 0
	     (*Value)++;
	 }else *Value=MinValue;
}

void DecValue(char *Value,char MinValue,char MaxValue){
     if ((*Value)>MinValue){
    619a:	e2 54       	subi	r30, 0x42	; 66
    619c:	fd 4f       	sbci	r31, 0xFD	; 253
    619e:	80 81       	ld	r24, Z
    61a0:	88 23       	and	r24, r24
    61a2:	11 f0       	breq	.+4      	; 0x61a8 <FSettingPumpID+0x1ce>
	     (*Value)--;
    61a4:	81 50       	subi	r24, 0x01	; 1
    61a6:	01 c0       	rjmp	.+2      	; 0x61aa <FSettingPumpID+0x1d0>
	 }else *Value=MaxValue;
    61a8:	80 e1       	ldi	r24, 0x10	; 16
    61aa:	80 83       	st	Z, r24
    61ac:	4f ee       	ldi	r20, 0xEF	; 239
    61ae:	e4 2e       	mov	r14, r20
    61b0:	42 e0       	ldi	r20, 0x02	; 2
    61b2:	f4 2e       	mov	r15, r20
		  if (IFType==IT_STANDALONE)SendSlaveCommand(SC_STOP_POOL_SEQUENCE,0);
		  eeprom_read_block((void*) &PPumpId, (const void*) &DefPumpMap,8);
          stMenuPumpID=mpDisplayPumpId;
	      break;
	 case mpDisplayPumpId:
	      lcd_clear();		  
    61b4:	05 e0       	ldi	r16, 0x05	; 5
    61b6:	10 e0       	ldi	r17, 0x00	; 0
				   if (IsShift==True)DecValue(&PPumpId[KeyChar-'1'],0,16);//PPumpId[KeyChar-'1']=17-(17-((PPumpId[KeyChar-'1']+1)%17));
			       break;			  
			  }
			  //Redraw
			  for (iLoop=0;iLoop<4;iLoop++){
				  sprintf_P(lcdteks,PSTR("%d.P%.2d | %d.P%.2d"),(iLoop+1),PPumpId[iLoop],(iLoop+5),PPumpId[iLoop+4]);
    61b8:	6e 01       	movw	r12, r28
    61ba:	08 94       	sec
    61bc:	c1 1c       	adc	r12, r1
    61be:	d1 1c       	adc	r13, r1
    61c0:	3d ec       	ldi	r19, 0xCD	; 205
    61c2:	a3 2e       	mov	r10, r19
    61c4:	3d e0       	ldi	r19, 0x0D	; 13
    61c6:	b3 2e       	mov	r11, r19
    61c8:	d7 01       	movw	r26, r14
    61ca:	2d 91       	ld	r18, X+
    61cc:	7d 01       	movw	r14, r26
    61ce:	ed b7       	in	r30, 0x3d	; 61
    61d0:	fe b7       	in	r31, 0x3e	; 62
    61d2:	3c 97       	sbiw	r30, 0x0c	; 12
    61d4:	0f b6       	in	r0, 0x3f	; 63
    61d6:	f8 94       	cli
    61d8:	fe bf       	out	0x3e, r31	; 62
    61da:	0f be       	out	0x3f, r0	; 63
    61dc:	ed bf       	out	0x3d, r30	; 61
    61de:	31 96       	adiw	r30, 0x01	; 1
    61e0:	ad b7       	in	r26, 0x3d	; 61
    61e2:	be b7       	in	r27, 0x3e	; 62
    61e4:	12 96       	adiw	r26, 0x02	; 2
    61e6:	dc 92       	st	X, r13
    61e8:	ce 92       	st	-X, r12
    61ea:	11 97       	sbiw	r26, 0x01	; 1
    61ec:	b3 82       	std	Z+3, r11	; 0x03
    61ee:	a2 82       	std	Z+2, r10	; 0x02
     if ((*Value)>MinValue){
	     (*Value)--;
	 }else *Value=MaxValue;
}

char FSettingPumpID(){
    61f0:	c8 01       	movw	r24, r16
    61f2:	04 97       	sbiw	r24, 0x04	; 4
				   if (IsShift==True)DecValue(&PPumpId[KeyChar-'1'],0,16);//PPumpId[KeyChar-'1']=17-(17-((PPumpId[KeyChar-'1']+1)%17));
			       break;			  
			  }
			  //Redraw
			  for (iLoop=0;iLoop<4;iLoop++){
				  sprintf_P(lcdteks,PSTR("%d.P%.2d | %d.P%.2d"),(iLoop+1),PPumpId[iLoop],(iLoop+5),PPumpId[iLoop+4]);
    61f4:	95 83       	std	Z+5, r25	; 0x05
    61f6:	84 83       	std	Z+4, r24	; 0x04
    61f8:	26 83       	std	Z+6, r18	; 0x06
    61fa:	17 82       	std	Z+7, r1	; 0x07
    61fc:	11 87       	std	Z+9, r17	; 0x09
    61fe:	00 87       	std	Z+8, r16	; 0x08
    6200:	d7 01       	movw	r26, r14
    6202:	13 96       	adiw	r26, 0x03	; 3
    6204:	8c 91       	ld	r24, X
    6206:	82 87       	std	Z+10, r24	; 0x0a
    6208:	13 86       	std	Z+11, r1	; 0x0b
    620a:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
				  lcd_print((iLoop+1),1,lcdteks);
    620e:	ed b7       	in	r30, 0x3d	; 61
    6210:	fe b7       	in	r31, 0x3e	; 62
    6212:	3c 96       	adiw	r30, 0x0c	; 12
    6214:	0f b6       	in	r0, 0x3f	; 63
    6216:	f8 94       	cli
    6218:	fe bf       	out	0x3e, r31	; 62
    621a:	0f be       	out	0x3f, r0	; 63
    621c:	ed bf       	out	0x3d, r30	; 61
    621e:	80 2f       	mov	r24, r16
    6220:	84 50       	subi	r24, 0x04	; 4
    6222:	61 e0       	ldi	r22, 0x01	; 1
    6224:	a6 01       	movw	r20, r12
    6226:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
    622a:	0f 5f       	subi	r16, 0xFF	; 255
    622c:	1f 4f       	sbci	r17, 0xFF	; 255
				   else
				   if (IsShift==True)DecValue(&PPumpId[KeyChar-'1'],0,16);//PPumpId[KeyChar-'1']=17-(17-((PPumpId[KeyChar-'1']+1)%17));
			       break;			  
			  }
			  //Redraw
			  for (iLoop=0;iLoop<4;iLoop++){
    622e:	09 30       	cpi	r16, 0x09	; 9
    6230:	11 05       	cpc	r17, r1
    6232:	51 f6       	brne	.-108    	; 0x61c8 <FSettingPumpID+0x1ee>
    6234:	26 c0       	rjmp	.+76     	; 0x6282 <FSettingPumpID+0x2a8>
				  sprintf_P(lcdteks,PSTR("%d.P%.2d | %d.P%.2d"),(iLoop+1),PPumpId[iLoop],(iLoop+5),PPumpId[iLoop+4]);
				  lcd_print((iLoop+1),1,lcdteks);
	          }
		  }else if (KeyChar=='#'){
    6236:	83 32       	cpi	r24, 0x23	; 35
    6238:	f9 f4       	brne	.+62     	; 0x6278 <FSettingPumpID+0x29e>
		      //Evaluate same PumpID
			  PumpCount=0;
    623a:	af ee       	ldi	r26, 0xEF	; 239
    623c:	b2 e0       	ldi	r27, 0x02	; 2
    623e:	80 e0       	ldi	r24, 0x00	; 0
			  for (i=0;i<8;i++){
    6240:	90 e0       	ldi	r25, 0x00	; 0
			       CheckPump=PPumpId[i];
    6242:	3d 91       	ld	r19, X+
				   if (CheckPump>0){
    6244:	33 23       	and	r19, r19
    6246:	69 f0       	breq	.+26     	; 0x6262 <FSettingPumpID+0x288>
    6248:	ef ee       	ldi	r30, 0xEF	; 239
    624a:	f2 e0       	ldi	r31, 0x02	; 2
    624c:	20 e0       	ldi	r18, 0x00	; 0
				      for(j=0;j<8;j++){					      
					      if ((i!=j)&&(CheckPump==PPumpId[j]))
    624e:	92 17       	cp	r25, r18
    6250:	21 f0       	breq	.+8      	; 0x625a <FSettingPumpID+0x280>
    6252:	40 81       	ld	r20, Z
    6254:	34 17       	cp	r19, r20
    6256:	09 f4       	brne	.+2      	; 0x625a <FSettingPumpID+0x280>
						       PumpCount++;
    6258:	8f 5f       	subi	r24, 0xFF	; 255
		      //Evaluate same PumpID
			  PumpCount=0;
			  for (i=0;i<8;i++){
			       CheckPump=PPumpId[i];
				   if (CheckPump>0){
				      for(j=0;j<8;j++){					      
    625a:	2f 5f       	subi	r18, 0xFF	; 255
    625c:	31 96       	adiw	r30, 0x01	; 1
    625e:	28 30       	cpi	r18, 0x08	; 8
    6260:	b1 f7       	brne	.-20     	; 0x624e <FSettingPumpID+0x274>
				  lcd_print((iLoop+1),1,lcdteks);
	          }
		  }else if (KeyChar=='#'){
		      //Evaluate same PumpID
			  PumpCount=0;
			  for (i=0;i<8;i++){
    6262:	9f 5f       	subi	r25, 0xFF	; 255
    6264:	98 30       	cpi	r25, 0x08	; 8
    6266:	69 f7       	brne	.-38     	; 0x6242 <FSettingPumpID+0x268>
    6268:	80 93 ed 02 	sts	0x02ED, r24
					      if ((i!=j)&&(CheckPump==PPumpId[j]))
						       PumpCount++;
					  }
				    }				     
				  }			       			  			  
			  if (PumpCount>0) stMenuPumpID=mpSaveFailed;
    626c:	88 23       	and	r24, r24
    626e:	11 f0       	breq	.+4      	; 0x6274 <FSettingPumpID+0x29a>
    6270:	83 e0       	ldi	r24, 0x03	; 3
    6272:	05 c0       	rjmp	.+10     	; 0x627e <FSettingPumpID+0x2a4>
			  else stMenuPumpID=mpSavingPumpId;
    6274:	85 e0       	ldi	r24, 0x05	; 5
    6276:	03 c0       	rjmp	.+6      	; 0x627e <FSettingPumpID+0x2a4>
		  }	
		  else if (KeyChar=='*'){
    6278:	8a 32       	cpi	r24, 0x2A	; 42
    627a:	19 f4       	brne	.+6      	; 0x6282 <FSettingPumpID+0x2a8>
		      stMenuPumpID=mpExitPumpId;
    627c:	8a e0       	ldi	r24, 0x0A	; 10
    627e:	80 93 f9 02 	sts	0x02F9, r24
		  }
		  if (KeyPressed==_KEY_SHIFT){
    6282:	f9 2d       	mov	r31, r9
    6284:	fb 37       	cpi	r31, 0x7B	; 123
    6286:	09 f0       	breq	.+2      	; 0x628a <FSettingPumpID+0x2b0>
    6288:	11 c1       	rjmp	.+546    	; 0x64ac <FSettingPumpID+0x4d2>
		      if (IsShift==False)IsShift=True;
    628a:	80 91 f8 02 	lds	r24, 0x02F8
    628e:	88 23       	and	r24, r24
    6290:	21 f4       	brne	.+8      	; 0x629a <FSettingPumpID+0x2c0>
    6292:	81 e0       	ldi	r24, 0x01	; 1
    6294:	80 93 f8 02 	sts	0x02F8, r24
    6298:	09 c1       	rjmp	.+530    	; 0x64ac <FSettingPumpID+0x4d2>
			  else
			  if (IsShift==True)IsShift=False;
    629a:	81 30       	cpi	r24, 0x01	; 1
    629c:	09 f0       	breq	.+2      	; 0x62a0 <FSettingPumpID+0x2c6>
    629e:	06 c1       	rjmp	.+524    	; 0x64ac <FSettingPumpID+0x4d2>
    62a0:	10 92 f8 02 	sts	0x02F8, r1
    62a4:	03 c1       	rjmp	.+518    	; 0x64ac <FSettingPumpID+0x4d2>
		  }
	      break;
     case mpSaveFailed:
	      lcd_clear();
    62a6:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
		  lcd_printf(1,1,PSTR("      Warning!      "));
    62aa:	81 e0       	ldi	r24, 0x01	; 1
    62ac:	61 e0       	ldi	r22, 0x01	; 1
    62ae:	48 eb       	ldi	r20, 0xB8	; 184
    62b0:	5d e0       	ldi	r21, 0x0D	; 13
    62b2:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  lcd_printf(2,1,PSTR("  Duplicate PumpID  "));
    62b6:	82 e0       	ldi	r24, 0x02	; 2
    62b8:	61 e0       	ldi	r22, 0x01	; 1
    62ba:	43 ea       	ldi	r20, 0xA3	; 163
    62bc:	5d e0       	ldi	r21, 0x0D	; 13
    62be:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  lcd_printf(3,1,PSTR("    Not Allowed     "));		  
    62c2:	83 e0       	ldi	r24, 0x03	; 3
    62c4:	61 e0       	ldi	r22, 0x01	; 1
    62c6:	4e e8       	ldi	r20, 0x8E	; 142
    62c8:	5d e0       	ldi	r21, 0x0D	; 13
    62ca:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  system_beep(2);
    62ce:	82 e0       	ldi	r24, 0x02	; 2
    62d0:	90 e0       	ldi	r25, 0x00	; 0
    62d2:	0e 94 ee 14 	call	0x29dc	; 0x29dc <system_beep>
	      TimDisplay=0;
    62d6:	10 92 70 02 	sts	0x0270, r1
	      stMenuPumpID=mpDisplayFailed;
    62da:	84 e0       	ldi	r24, 0x04	; 4
    62dc:	d2 c0       	rjmp	.+420    	; 0x6482 <FSettingPumpID+0x4a8>
          break;	 
     case mpDisplayFailed:
	      if (TimDisplay>6) stMenuPumpID=mpDisplayPumpId;
    62de:	80 91 70 02 	lds	r24, 0x0270
    62e2:	87 30       	cpi	r24, 0x07	; 7
    62e4:	08 f4       	brcc	.+2      	; 0x62e8 <FSettingPumpID+0x30e>
    62e6:	e2 c0       	rjmp	.+452    	; 0x64ac <FSettingPumpID+0x4d2>
    62e8:	81 e0       	ldi	r24, 0x01	; 1
    62ea:	cb c0       	rjmp	.+406    	; 0x6482 <FSettingPumpID+0x4a8>
	      break;
     case mpSavingPumpId:
	      eeprom_write_block((const void*) &PPumpId, (void*) &DefPumpMap, 8);
    62ec:	8f ee       	ldi	r24, 0xEF	; 239
    62ee:	92 e0       	ldi	r25, 0x02	; 2
    62f0:	66 e4       	ldi	r22, 0x46	; 70
    62f2:	70 e0       	ldi	r23, 0x00	; 0
    62f4:	48 e0       	ldi	r20, 0x08	; 8
    62f6:	50 e0       	ldi	r21, 0x00	; 0
    62f8:	0e 94 6e aa 	call	0x154dc	; 0x154dc <__eewr_block_m128>
		  if (IFType==IT_STANDALONE){
    62fc:	80 91 00 01 	lds	r24, 0x0100
    6300:	82 30       	cpi	r24, 0x02	; 2
    6302:	d9 f4       	brne	.+54     	; 0x633a <FSettingPumpID+0x360>
		      //SendConfig to Slave
			  lcd_clear();
    6304:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
              lcd_printf(1,1,PSTR("-PumpID-"));
    6308:	81 e0       	ldi	r24, 0x01	; 1
    630a:	61 e0       	ldi	r22, 0x01	; 1
    630c:	45 e8       	ldi	r20, 0x85	; 133
    630e:	5d e0       	ldi	r21, 0x0D	; 13
    6310:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
              lcd_printf(2,1,PSTR("Saving.."));
    6314:	82 e0       	ldi	r24, 0x02	; 2
    6316:	61 e0       	ldi	r22, 0x01	; 1
    6318:	4c e7       	ldi	r20, 0x7C	; 124
    631a:	5d e0       	ldi	r21, 0x0D	; 13
    631c:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
			  Idx=0;
    6320:	10 92 f7 02 	sts	0x02F7, r1
			  PumpCount=0;
    6324:	10 92 ed 02 	sts	0x02ED, r1
              eeprom_read_block((void*) &PPumpId, (const void*) &DefPumpMap,8);
    6328:	8f ee       	ldi	r24, 0xEF	; 239
    632a:	92 e0       	ldi	r25, 0x02	; 2
    632c:	66 e4       	ldi	r22, 0x46	; 70
    632e:	70 e0       	ldi	r23, 0x00	; 0
    6330:	48 e0       	ldi	r20, 0x08	; 8
    6332:	50 e0       	ldi	r21, 0x00	; 0
    6334:	0e 94 56 aa 	call	0x154ac	; 0x154ac <__eerd_block_m128>
    6338:	a3 c0       	rjmp	.+326    	; 0x6480 <FSettingPumpID+0x4a6>
              stMenuPumpID=mpSendConfigToSlave;
		  }else if (IFType==IT_SLAVE){
    633a:	81 30       	cpi	r24, 0x01	; 1
    633c:	09 f0       	breq	.+2      	; 0x6340 <FSettingPumpID+0x366>
    633e:	b6 c0       	rjmp	.+364    	; 0x64ac <FSettingPumpID+0x4d2>
    6340:	a7 c0       	rjmp	.+334    	; 0x6490 <FSettingPumpID+0x4b6>
		      //SendConfig to Slave              
              stMenuPumpID=mpExitPumpId;
		  }
	      break;
     case mpSendConfigToSlave:
	      IsStandaloneAcknoledge=False;
    6342:	10 92 60 02 	sts	0x0260, r1
	      if (PPumpId[Idx]!=0){
    6346:	60 91 f7 02 	lds	r22, 0x02F7
    634a:	86 2f       	mov	r24, r22
    634c:	90 e0       	ldi	r25, 0x00	; 0
    634e:	fc 01       	movw	r30, r24
    6350:	e1 51       	subi	r30, 0x11	; 17
    6352:	fd 4f       	sbci	r31, 0xFD	; 253
    6354:	30 81       	ld	r19, Z
    6356:	33 23       	and	r19, r19
    6358:	89 f0       	breq	.+34     	; 0x637c <FSettingPumpID+0x3a2>
		      PumpCount++;
    635a:	20 91 ed 02 	lds	r18, 0x02ED
    635e:	2f 5f       	subi	r18, 0xFF	; 255
    6360:	20 93 ed 02 	sts	0x02ED, r18
		      MsgPumpId=((Idx<<4)|(0x0F&PPumpId[Idx]));//[Idx][PumpId]
    6364:	63 2f       	mov	r22, r19
    6366:	6f 70       	andi	r22, 0x0F	; 15
    6368:	24 e0       	ldi	r18, 0x04	; 4
    636a:	88 0f       	add	r24, r24
    636c:	99 1f       	adc	r25, r25
    636e:	2a 95       	dec	r18
    6370:	e1 f7       	brne	.-8      	; 0x636a <FSettingPumpID+0x390>
    6372:	68 2b       	or	r22, r24
    6374:	60 93 ee 02 	sts	0x02EE, r22
	         //SendPoolingCommand(SC_SET_PUMPID,MsgPumpId);
			  SendSlaveCommand(SC_SET_PUMPID,MsgPumpId);
    6378:	8d e1       	ldi	r24, 0x1D	; 29
    637a:	01 c0       	rjmp	.+2      	; 0x637e <FSettingPumpID+0x3a4>
		  }else SendSlaveCommand(SC_CLEAR_PUMPID,Idx);//SendPoolingCommand(SC_CLEAR_PUMPID,Idx);
    637c:	8e e1       	ldi	r24, 0x1E	; 30
    637e:	0e 94 29 19 	call	0x3252	; 0x3252 <SendSlaveCommand>
		  sprintf_P(lcdteks,PSTR("Id[%d]=%.2d  "),Idx+1,PPumpId[Idx]);
    6382:	80 91 f7 02 	lds	r24, 0x02F7
    6386:	90 e0       	ldi	r25, 0x00	; 0
    6388:	2d b7       	in	r18, 0x3d	; 61
    638a:	3e b7       	in	r19, 0x3e	; 62
    638c:	28 50       	subi	r18, 0x08	; 8
    638e:	30 40       	sbci	r19, 0x00	; 0
    6390:	0f b6       	in	r0, 0x3f	; 63
    6392:	f8 94       	cli
    6394:	3e bf       	out	0x3e, r19	; 62
    6396:	0f be       	out	0x3f, r0	; 63
    6398:	2d bf       	out	0x3d, r18	; 61
    639a:	ed b7       	in	r30, 0x3d	; 61
    639c:	fe b7       	in	r31, 0x3e	; 62
    639e:	31 96       	adiw	r30, 0x01	; 1
    63a0:	8e 01       	movw	r16, r28
    63a2:	0f 5f       	subi	r16, 0xFF	; 255
    63a4:	1f 4f       	sbci	r17, 0xFF	; 255
    63a6:	ad b7       	in	r26, 0x3d	; 61
    63a8:	be b7       	in	r27, 0x3e	; 62
    63aa:	12 96       	adiw	r26, 0x02	; 2
    63ac:	1c 93       	st	X, r17
    63ae:	0e 93       	st	-X, r16
    63b0:	11 97       	sbiw	r26, 0x01	; 1
    63b2:	2e e6       	ldi	r18, 0x6E	; 110
    63b4:	3d e0       	ldi	r19, 0x0D	; 13
    63b6:	33 83       	std	Z+3, r19	; 0x03
    63b8:	22 83       	std	Z+2, r18	; 0x02
    63ba:	9c 01       	movw	r18, r24
    63bc:	2f 5f       	subi	r18, 0xFF	; 255
    63be:	3f 4f       	sbci	r19, 0xFF	; 255
    63c0:	35 83       	std	Z+5, r19	; 0x05
    63c2:	24 83       	std	Z+4, r18	; 0x04
    63c4:	81 51       	subi	r24, 0x11	; 17
    63c6:	9d 4f       	sbci	r25, 0xFD	; 253
    63c8:	dc 01       	movw	r26, r24
    63ca:	8c 91       	ld	r24, X
    63cc:	86 83       	std	Z+6, r24	; 0x06
    63ce:	17 82       	std	Z+7, r1	; 0x07
    63d0:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		  lcd_print(3,1,lcdteks);
    63d4:	ed b7       	in	r30, 0x3d	; 61
    63d6:	fe b7       	in	r31, 0x3e	; 62
    63d8:	38 96       	adiw	r30, 0x08	; 8
    63da:	0f b6       	in	r0, 0x3f	; 63
    63dc:	f8 94       	cli
    63de:	fe bf       	out	0x3e, r31	; 62
    63e0:	0f be       	out	0x3f, r0	; 63
    63e2:	ed bf       	out	0x3d, r30	; 61
    63e4:	83 e0       	ldi	r24, 0x03	; 3
    63e6:	61 e0       	ldi	r22, 0x01	; 1
    63e8:	a8 01       	movw	r20, r16
    63ea:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
          stMenuPumpID=mpWaitSlaveReply;
    63ee:	88 e0       	ldi	r24, 0x08	; 8
    63f0:	48 c0       	rjmp	.+144    	; 0x6482 <FSettingPumpID+0x4a8>
	      break;
     case mpWaitSlaveReply:
	      KeyPressed=_key_scan(1);
    63f2:	81 e0       	ldi	r24, 0x01	; 1
    63f4:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <_key_scan>
	      KeyChar=_key_btn(KeyPressed);
    63f8:	0e 94 49 a3 	call	0x14692	; 0x14692 <_key_btn>
		  if (KeyChar=='*'){
    63fc:	8a 32       	cpi	r24, 0x2A	; 42
    63fe:	79 f4       	brne	.+30     	; 0x641e <FSettingPumpID+0x444>
		      system_beep(2);
    6400:	82 e0       	ldi	r24, 0x02	; 2
    6402:	90 e0       	ldi	r25, 0x00	; 0
    6404:	0e 94 ee 14 	call	0x29dc	; 0x29dc <system_beep>
		      lcd_printf(2,1,PSTR("Cancel     "));
    6408:	82 e0       	ldi	r24, 0x02	; 2
    640a:	61 e0       	ldi	r22, 0x01	; 1
    640c:	42 e6       	ldi	r20, 0x62	; 98
    640e:	5d e0       	ldi	r21, 0x0D	; 13
    6410:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
			  TimDisplay=0;
    6414:	10 92 70 02 	sts	0x0270, r1
		      stMenuPumpID=mpDelayExitPumpId;
    6418:	89 e0       	ldi	r24, 0x09	; 9
    641a:	80 93 f9 02 	sts	0x02F9, r24
			  }
          if (IsStandaloneAcknoledge==True){
    641e:	00 91 60 02 	lds	r16, 0x0260
    6422:	01 30       	cpi	r16, 0x01	; 1
    6424:	09 f0       	breq	.+2      	; 0x6428 <FSettingPumpID+0x44e>
    6426:	42 c0       	rjmp	.+132    	; 0x64ac <FSettingPumpID+0x4d2>
		      Idx++;
    6428:	80 91 f7 02 	lds	r24, 0x02F7
    642c:	8f 5f       	subi	r24, 0xFF	; 255
    642e:	80 93 f7 02 	sts	0x02F7, r24
		      if (Idx<8){//Finish, Send MaxPumpCount
    6432:	88 30       	cpi	r24, 0x08	; 8
    6434:	b8 f4       	brcc	.+46     	; 0x6464 <FSettingPumpID+0x48a>
			      eeprom_write_byte(&DefPoolingPumpMax,PumpCount);
    6436:	85 e4       	ldi	r24, 0x45	; 69
    6438:	91 e0       	ldi	r25, 0x01	; 1
    643a:	60 91 ed 02 	lds	r22, 0x02ED
    643e:	0e 94 78 aa 	call	0x154f0	; 0x154f0 <__eewr_byte_m128>
				  PumpCountMax=eeprom_read_byte(&DefPoolingPumpMax);
    6442:	85 e4       	ldi	r24, 0x45	; 69
    6444:	91 e0       	ldi	r25, 0x01	; 1
    6446:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
    644a:	80 93 3a 02 	sts	0x023A, r24
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
    644e:	95 e1       	ldi	r25, 0x15	; 21
    6450:	90 93 8b 06 	sts	0x068B, r25
	 PoolMsg=plMsg;
    6454:	80 93 cc 0c 	sts	0x0CCC, r24
     IsControlPooling=True;
    6458:	00 93 62 02 	sts	0x0262, r16
		      Idx++;
		      if (Idx<8){//Finish, Send MaxPumpCount
			      eeprom_write_byte(&DefPoolingPumpMax,PumpCount);
				  PumpCountMax=eeprom_read_byte(&DefPoolingPumpMax);
                  SendPoolingCommand(SC_SET_POOLING_MAX_PUMP,PumpCountMax);
			      TimDisplay=0;		 
    645c:	10 92 70 02 	sts	0x0270, r1
				  stMenuPumpID=mpDelaySaveConfig;
    6460:	87 e0       	ldi	r24, 0x07	; 7
    6462:	0f c0       	rjmp	.+30     	; 0x6482 <FSettingPumpID+0x4a8>
			  }else{lcd_printf(2,1,PSTR("Completed"));
    6464:	82 e0       	ldi	r24, 0x02	; 2
    6466:	61 e0       	ldi	r22, 0x01	; 1
    6468:	48 e5       	ldi	r20, 0x58	; 88
    646a:	5d e0       	ldi	r21, 0x0D	; 13
    646c:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
					TimDisplay=0;
    6470:	10 92 70 02 	sts	0x0270, r1
				    stMenuPumpID=mpDelayExitPumpId;
    6474:	89 e0       	ldi	r24, 0x09	; 9
    6476:	05 c0       	rjmp	.+10     	; 0x6482 <FSettingPumpID+0x4a8>
				   }
			  }		  
	      break;
     case mpDelaySaveConfig:
	      if (TimDisplay>2)stMenuPumpID=mpSendConfigToSlave;
    6478:	80 91 70 02 	lds	r24, 0x0270
    647c:	83 30       	cpi	r24, 0x03	; 3
    647e:	b0 f0       	brcs	.+44     	; 0x64ac <FSettingPumpID+0x4d2>
    6480:	86 e0       	ldi	r24, 0x06	; 6
    6482:	80 93 f9 02 	sts	0x02F9, r24
    6486:	12 c0       	rjmp	.+36     	; 0x64ac <FSettingPumpID+0x4d2>
	      break;
     case mpDelayExitPumpId:
	      if (TimDisplay>8)stMenuPumpID=mpExitPumpId;
    6488:	80 91 70 02 	lds	r24, 0x0270
    648c:	89 30       	cpi	r24, 0x09	; 9
    648e:	70 f0       	brcs	.+28     	; 0x64ac <FSettingPumpID+0x4d2>
    6490:	8a e0       	ldi	r24, 0x0A	; 10
    6492:	f7 cf       	rjmp	.-18     	; 0x6482 <FSettingPumpID+0x4a8>
	      break;
     case mpExitPumpId:
	      if (IFType==IT_STANDALONE)
    6494:	80 91 00 01 	lds	r24, 0x0100
    6498:	82 30       	cpi	r24, 0x02	; 2
    649a:	21 f4       	brne	.+8      	; 0x64a4 <FSettingPumpID+0x4ca>
		      SendSlaveCommand(SC_START_POOL_SEQUENCE,0);
    649c:	80 e2       	ldi	r24, 0x20	; 32
    649e:	60 e0       	ldi	r22, 0x00	; 0
    64a0:	0e 94 29 19 	call	0x3252	; 0x3252 <SendSlaveCommand>
	      Result=MENU_DONE;
          stMenuPumpID=mpInitPumpId;
    64a4:	10 92 f9 02 	sts	0x02F9, r1
	      if (TimDisplay>8)stMenuPumpID=mpExitPumpId;
	      break;
     case mpExitPumpId:
	      if (IFType==IT_STANDALONE)
		      SendSlaveCommand(SC_START_POOL_SEQUENCE,0);
	      Result=MENU_DONE;
    64a8:	81 e0       	ldi	r24, 0x01	; 1
          stMenuPumpID=mpInitPumpId;
	      break;
    64aa:	01 c0       	rjmp	.+2      	; 0x64ae <FSettingPumpID+0x4d4>
     static char stMenuPumpID=mpInitPumpId,IsShift=False;
	 char iLoop,Result,KeyChar,KeyPressed,i,j,CheckPump;
	 char lcdteks[20];
	 static char Idx,PPumpId[8],MsgPumpId,PumpCount;
     
	 Result=MENU_NONE;
    64ac:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
          stMenuPumpID=mpInitPumpId;
	      break;
	 }
   return Result;
}
    64ae:	64 96       	adiw	r28, 0x14	; 20
    64b0:	0f b6       	in	r0, 0x3f	; 63
    64b2:	f8 94       	cli
    64b4:	de bf       	out	0x3e, r29	; 62
    64b6:	0f be       	out	0x3f, r0	; 63
    64b8:	cd bf       	out	0x3d, r28	; 61
    64ba:	cf 91       	pop	r28
    64bc:	df 91       	pop	r29
    64be:	1f 91       	pop	r17
    64c0:	0f 91       	pop	r16
    64c2:	ff 90       	pop	r15
    64c4:	ef 90       	pop	r14
    64c6:	df 90       	pop	r13
    64c8:	cf 90       	pop	r12
    64ca:	bf 90       	pop	r11
    64cc:	af 90       	pop	r10
    64ce:	9f 90       	pop	r9
    64d0:	08 95       	ret

000064d2 <_menu_pumpid>:

void _menu_pumpid(void){
	while(1){
	   if (FSettingPumpID()==MENU_DONE){
    64d2:	0e 94 ed 2f 	call	0x5fda	; 0x5fda <FSettingPumpID>
    64d6:	81 30       	cpi	r24, 0x01	; 1
    64d8:	e1 f7       	brne	.-8      	; 0x64d2 <_menu_pumpid>
	       break;
	   }	   
	}
}
    64da:	08 95       	ret

000064dc <_menu_pumpprodinput>:
				*/
		}
	}
}

void _menu_pumpprodinput(unsigned char __select){
    64dc:	7f 92       	push	r7
    64de:	8f 92       	push	r8
    64e0:	9f 92       	push	r9
    64e2:	af 92       	push	r10
    64e4:	bf 92       	push	r11
    64e6:	cf 92       	push	r12
    64e8:	df 92       	push	r13
    64ea:	ef 92       	push	r14
    64ec:	ff 92       	push	r15
    64ee:	0f 93       	push	r16
    64f0:	1f 93       	push	r17
    64f2:	df 93       	push	r29
    64f4:	cf 93       	push	r28
    64f6:	cd b7       	in	r28, 0x3d	; 61
    64f8:	de b7       	in	r29, 0x3e	; 62
    64fa:	a8 97       	sbiw	r28, 0x28	; 40
    64fc:	0f b6       	in	r0, 0x3f	; 63
    64fe:	f8 94       	cli
    6500:	de bf       	out	0x3e, r29	; 62
    6502:	0f be       	out	0x3f, r0	; 63
    6504:	cd bf       	out	0x3d, r28	; 61
    6506:	a8 2e       	mov	r10, r24
	char 			__pump_prod[6],__pump_id[8];
	unsigned char	i, __x, __y, __key, __num, __buff[5];
	char lcdteks[20];

	eeprom_read_block((void*) &__pump_id, (const void*) &DefPumpMap, 8);
    6508:	1c e0       	ldi	r17, 0x0C	; 12
    650a:	e1 2e       	mov	r14, r17
    650c:	f1 2c       	mov	r15, r1
    650e:	ec 0e       	add	r14, r28
    6510:	fd 1e       	adc	r15, r29
    6512:	c7 01       	movw	r24, r14
    6514:	66 e4       	ldi	r22, 0x46	; 70
    6516:	70 e0       	ldi	r23, 0x00	; 0
    6518:	48 e0       	ldi	r20, 0x08	; 8
    651a:	50 e0       	ldi	r21, 0x00	; 0
    651c:	0e 94 56 aa 	call	0x154ac	; 0x154ac <__eerd_block_m128>
	eeprom_read_block((void*) &__pump_prod, (const void*) &DefNozzleMap[__select], 6);
    6520:	86 e0       	ldi	r24, 0x06	; 6
    6522:	9a 2d       	mov	r25, r10
    6524:	98 9f       	mul	r25, r24
    6526:	60 01       	movw	r12, r0
    6528:	11 24       	eor	r1, r1
    652a:	a6 e5       	ldi	r26, 0x56	; 86
    652c:	b0 e0       	ldi	r27, 0x00	; 0
    652e:	ca 0e       	add	r12, r26
    6530:	db 1e       	adc	r13, r27
    6532:	b6 e0       	ldi	r27, 0x06	; 6
    6534:	8b 2e       	mov	r8, r27
    6536:	91 2c       	mov	r9, r1
    6538:	8c 0e       	add	r8, r28
    653a:	9d 1e       	adc	r9, r29
    653c:	c4 01       	movw	r24, r8
    653e:	b6 01       	movw	r22, r12
    6540:	46 e0       	ldi	r20, 0x06	; 6
    6542:	50 e0       	ldi	r21, 0x00	; 0
    6544:	0e 94 56 aa 	call	0x154ac	; 0x154ac <__eerd_block_m128>

	lcd_clear();_delay_ms(10);
    6548:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
    654c:	e3 ec       	ldi	r30, 0xC3	; 195
    654e:	f9 e0       	ldi	r31, 0x09	; 9
    6550:	31 97       	sbiw	r30, 0x01	; 1
    6552:	f1 f7       	brne	.-4      	; 0x6550 <_menu_pumpprodinput+0x74>
    6554:	00 c0       	rjmp	.+0      	; 0x6556 <_menu_pumpprodinput+0x7a>
    6556:	00 00       	nop
    sprintf_P(lcdteks, PSTR("Product FIP%.2d"),__pump_id[__select]);
    6558:	00 d0       	rcall	.+0      	; 0x655a <_menu_pumpprodinput+0x7e>
    655a:	00 d0       	rcall	.+0      	; 0x655c <_menu_pumpprodinput+0x80>
    655c:	00 d0       	rcall	.+0      	; 0x655e <_menu_pumpprodinput+0x82>
    655e:	ed b7       	in	r30, 0x3d	; 61
    6560:	fe b7       	in	r31, 0x3e	; 62
    6562:	31 96       	adiw	r30, 0x01	; 1
    6564:	8e 01       	movw	r16, r28
    6566:	0c 5e       	subi	r16, 0xEC	; 236
    6568:	1f 4f       	sbci	r17, 0xFF	; 255
    656a:	ad b7       	in	r26, 0x3d	; 61
    656c:	be b7       	in	r27, 0x3e	; 62
    656e:	12 96       	adiw	r26, 0x02	; 2
    6570:	1c 93       	st	X, r17
    6572:	0e 93       	st	-X, r16
    6574:	11 97       	sbiw	r26, 0x01	; 1
    6576:	88 e4       	ldi	r24, 0x48	; 72
    6578:	9d e0       	ldi	r25, 0x0D	; 13
    657a:	93 83       	std	Z+3, r25	; 0x03
    657c:	82 83       	std	Z+2, r24	; 0x02
    657e:	d7 01       	movw	r26, r14
    6580:	aa 0d       	add	r26, r10
    6582:	b1 1d       	adc	r27, r1
    6584:	8c 91       	ld	r24, X
    6586:	84 83       	std	Z+4, r24	; 0x04
    6588:	15 82       	std	Z+5, r1	; 0x05
    658a:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    lcd_print(1, 1,lcdteks);
    658e:	ed b7       	in	r30, 0x3d	; 61
    6590:	fe b7       	in	r31, 0x3e	; 62
    6592:	36 96       	adiw	r30, 0x06	; 6
    6594:	0f b6       	in	r0, 0x3f	; 63
    6596:	f8 94       	cli
    6598:	fe bf       	out	0x3e, r31	; 62
    659a:	0f be       	out	0x3f, r0	; 63
    659c:	ed bf       	out	0x3d, r30	; 61
    659e:	81 e0       	ldi	r24, 0x01	; 1
    65a0:	61 e0       	ldi	r22, 0x01	; 1
    65a2:	a8 01       	movw	r20, r16
    65a4:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>

	lcd_printf(2, 1, PSTR("1)N1:  3)N3:  5)N5:"));
    65a8:	82 e0       	ldi	r24, 0x02	; 2
    65aa:	61 e0       	ldi	r22, 0x01	; 1
    65ac:	44 e3       	ldi	r20, 0x34	; 52
    65ae:	5d e0       	ldi	r21, 0x0D	; 13
    65b0:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
	lcd_printf(3, 1, PSTR("2)N2:  4)N4:  6)N6:"));
    65b4:	83 e0       	ldi	r24, 0x03	; 3
    65b6:	61 e0       	ldi	r22, 0x01	; 1
    65b8:	40 e2       	ldi	r20, 0x20	; 32
    65ba:	5d e0       	ldi	r21, 0x0D	; 13
    65bc:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
	lcd_printf(4, 1, PSTR("*)Exit        #)Save"));
    65c0:	84 e0       	ldi	r24, 0x04	; 4
    65c2:	61 e0       	ldi	r22, 0x01	; 1
    65c4:	4b e0       	ldi	r20, 0x0B	; 11
    65c6:	5d e0       	ldi	r21, 0x0D	; 13
    65c8:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
    65cc:	02 e7       	ldi	r16, 0x72	; 114
    65ce:	12 e0       	ldi	r17, 0x02	; 2
    65d0:	54 01       	movw	r10, r8

	for(i=0;i<6;i++){
		__x = pgm_read_byte(&__prodloc[i][0]);
		__y = pgm_read_byte(&__prodloc[i][1]);

        sprintf_P(__buff,PSTR("%d"),__pump_prod[i]);
    65d2:	7e 01       	movw	r14, r28
    65d4:	08 94       	sec
    65d6:	e1 1c       	adc	r14, r1
    65d8:	f1 1c       	adc	r15, r1
    65da:	a8 e0       	ldi	r26, 0x08	; 8
    65dc:	8a 2e       	mov	r8, r26
    65de:	ad e0       	ldi	r26, 0x0D	; 13
    65e0:	9a 2e       	mov	r9, r26
	lcd_printf(2, 1, PSTR("1)N1:  3)N3:  5)N5:"));
	lcd_printf(3, 1, PSTR("2)N2:  4)N4:  6)N6:"));
	lcd_printf(4, 1, PSTR("*)Exit        #)Save"));

	for(i=0;i<6;i++){
		__x = pgm_read_byte(&__prodloc[i][0]);
    65e2:	f8 01       	movw	r30, r16
    65e4:	74 90       	lpm	r7, Z+
		__y = pgm_read_byte(&__prodloc[i][1]);
    65e6:	31 96       	adiw	r30, 0x01	; 1
    65e8:	64 91       	lpm	r22, Z+

        sprintf_P(__buff,PSTR("%d"),__pump_prod[i]);
    65ea:	d5 01       	movw	r26, r10
    65ec:	8d 91       	ld	r24, X+
    65ee:	5d 01       	movw	r10, r26
    65f0:	00 d0       	rcall	.+0      	; 0x65f2 <_menu_pumpprodinput+0x116>
    65f2:	00 d0       	rcall	.+0      	; 0x65f4 <_menu_pumpprodinput+0x118>
    65f4:	00 d0       	rcall	.+0      	; 0x65f6 <_menu_pumpprodinput+0x11a>
    65f6:	ad b7       	in	r26, 0x3d	; 61
    65f8:	be b7       	in	r27, 0x3e	; 62
    65fa:	11 96       	adiw	r26, 0x01	; 1
    65fc:	ed b7       	in	r30, 0x3d	; 61
    65fe:	fe b7       	in	r31, 0x3e	; 62
    6600:	f2 82       	std	Z+2, r15	; 0x02
    6602:	e1 82       	std	Z+1, r14	; 0x01
    6604:	13 96       	adiw	r26, 0x03	; 3
    6606:	9c 92       	st	X, r9
    6608:	8e 92       	st	-X, r8
    660a:	12 97       	sbiw	r26, 0x02	; 2
    660c:	14 96       	adiw	r26, 0x04	; 4
    660e:	8c 93       	st	X, r24
    6610:	14 97       	sbiw	r26, 0x04	; 4
    6612:	15 96       	adiw	r26, 0x05	; 5
    6614:	1c 92       	st	X, r1
    6616:	68 a7       	std	Y+40, r22	; 0x28
    6618:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		lcd_print(__x+1, __y, __buff);
    661c:	8d b7       	in	r24, 0x3d	; 61
    661e:	9e b7       	in	r25, 0x3e	; 62
    6620:	06 96       	adiw	r24, 0x06	; 6
    6622:	0f b6       	in	r0, 0x3f	; 63
    6624:	f8 94       	cli
    6626:	9e bf       	out	0x3e, r25	; 62
    6628:	0f be       	out	0x3f, r0	; 63
    662a:	8d bf       	out	0x3d, r24	; 61
    662c:	87 2d       	mov	r24, r7
    662e:	8f 5f       	subi	r24, 0xFF	; 255
    6630:	68 a5       	ldd	r22, Y+40	; 0x28
    6632:	a7 01       	movw	r20, r14
    6634:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
    6638:	0e 5f       	subi	r16, 0xFE	; 254
    663a:	1f 4f       	sbci	r17, 0xFF	; 255

	lcd_printf(2, 1, PSTR("1)N1:  3)N3:  5)N5:"));
	lcd_printf(3, 1, PSTR("2)N2:  4)N4:  6)N6:"));
	lcd_printf(4, 1, PSTR("*)Exit        #)Save"));

	for(i=0;i<6;i++){
    663c:	92 e0       	ldi	r25, 0x02	; 2
    663e:	0e 37       	cpi	r16, 0x7E	; 126
    6640:	19 07       	cpc	r17, r25
    6642:	79 f6       	brne	.-98     	; 0x65e2 <_menu_pumpprodinput+0x106>
		if(__key == _KEY_ENTER){
			eeprom_write_block((const void*) &__pump_prod, (void*) &DefNozzleMap[__select], 6);
			return;
		}
		if(__num >= '1' && __num <= '6'){
			if(__pump_prod[__num - '1'] == 6)
    6644:	8e 01       	movw	r16, r28
    6646:	0a 5f       	subi	r16, 0xFA	; 250
    6648:	1f 4f       	sbci	r17, 0xFF	; 255
			else
				__pump_prod[__num - '1']++;

			__x = pgm_read_byte(&__prodloc[__num - 0x31][0]);
			__y = pgm_read_byte(&__prodloc[__num - 0x31][1]);
			sprintf_P(__buff,PSTR("%d"),__pump_prod[__num - 0x31]);
    664a:	7e 01       	movw	r14, r28
    664c:	08 94       	sec
    664e:	e1 1c       	adc	r14, r1
    6650:	f1 1c       	adc	r15, r1
    6652:	f5 e0       	ldi	r31, 0x05	; 5
    6654:	af 2e       	mov	r10, r31
    6656:	fd e0       	ldi	r31, 0x0D	; 13
    6658:	bf 2e       	mov	r11, r31
		//lcd_print(2+(i%2),(i/2)*6,lcdteks);
	}

	while(1){
		
		__key = _key_scan(1);
    665a:	81 e0       	ldi	r24, 0x01	; 1
    665c:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <_key_scan>
    6660:	98 2f       	mov	r25, r24
		__num = _key_btn(__key);
    6662:	98 a7       	std	Y+40, r25	; 0x28
    6664:	0e 94 49 a3 	call	0x14692	; 0x14692 <_key_btn>
		if(__key == _KEY_CANCEL)
    6668:	98 a5       	ldd	r25, Y+40	; 0x28
    666a:	97 3e       	cpi	r25, 0xE7	; 231
    666c:	09 f4       	brne	.+2      	; 0x6670 <_menu_pumpprodinput+0x194>
    666e:	53 c0       	rjmp	.+166    	; 0x6716 <_menu_pumpprodinput+0x23a>
			return;
		if(__key == _KEY_ENTER){
    6670:	97 3b       	cpi	r25, 0xB7	; 183
    6672:	41 f4       	brne	.+16     	; 0x6684 <_menu_pumpprodinput+0x1a8>
			eeprom_write_block((const void*) &__pump_prod, (void*) &DefNozzleMap[__select], 6);
    6674:	ce 01       	movw	r24, r28
    6676:	06 96       	adiw	r24, 0x06	; 6
    6678:	b6 01       	movw	r22, r12
    667a:	46 e0       	ldi	r20, 0x06	; 6
    667c:	50 e0       	ldi	r21, 0x00	; 0
    667e:	0e 94 6e aa 	call	0x154dc	; 0x154dc <__eewr_block_m128>
    6682:	49 c0       	rjmp	.+146    	; 0x6716 <_menu_pumpprodinput+0x23a>
			return;
		}
		if(__num >= '1' && __num <= '6'){
    6684:	98 2f       	mov	r25, r24
    6686:	91 53       	subi	r25, 0x31	; 49
    6688:	96 30       	cpi	r25, 0x06	; 6
    668a:	38 f7       	brcc	.-50     	; 0x665a <_menu_pumpprodinput+0x17e>
			if(__pump_prod[__num - '1'] == 6)
    668c:	28 2f       	mov	r18, r24
    668e:	30 e0       	ldi	r19, 0x00	; 0
    6690:	21 53       	subi	r18, 0x31	; 49
    6692:	30 40       	sbci	r19, 0x00	; 0
    6694:	f8 01       	movw	r30, r16
    6696:	e2 0f       	add	r30, r18
    6698:	f3 1f       	adc	r31, r19
    669a:	90 81       	ld	r25, Z
    669c:	96 30       	cpi	r25, 0x06	; 6
    669e:	11 f4       	brne	.+4      	; 0x66a4 <_menu_pumpprodinput+0x1c8>
				__pump_prod[__num - '1'] = 0;
    66a0:	10 82       	st	Z, r1
    66a2:	02 c0       	rjmp	.+4      	; 0x66a8 <_menu_pumpprodinput+0x1cc>
			else
				__pump_prod[__num - '1']++;
    66a4:	9f 5f       	subi	r25, 0xFF	; 255
    66a6:	90 83       	st	Z, r25

			__x = pgm_read_byte(&__prodloc[__num - 0x31][0]);
    66a8:	68 2f       	mov	r22, r24
    66aa:	70 e0       	ldi	r23, 0x00	; 0
    66ac:	61 53       	subi	r22, 0x31	; 49
    66ae:	70 40       	sbci	r23, 0x00	; 0
    66b0:	66 0f       	add	r22, r22
    66b2:	77 1f       	adc	r23, r23
    66b4:	fb 01       	movw	r30, r22
    66b6:	ee 58       	subi	r30, 0x8E	; 142
    66b8:	fd 4f       	sbci	r31, 0xFD	; 253
    66ba:	84 90       	lpm	r8, Z+
			__y = pgm_read_byte(&__prodloc[__num - 0x31][1]);
    66bc:	6d 58       	subi	r22, 0x8D	; 141
    66be:	7d 4f       	sbci	r23, 0xFD	; 253
    66c0:	fb 01       	movw	r30, r22
    66c2:	64 91       	lpm	r22, Z+
			sprintf_P(__buff,PSTR("%d"),__pump_prod[__num - 0x31]);
    66c4:	00 d0       	rcall	.+0      	; 0x66c6 <_menu_pumpprodinput+0x1ea>
    66c6:	00 d0       	rcall	.+0      	; 0x66c8 <_menu_pumpprodinput+0x1ec>
    66c8:	00 d0       	rcall	.+0      	; 0x66ca <_menu_pumpprodinput+0x1ee>
    66ca:	ad b7       	in	r26, 0x3d	; 61
    66cc:	be b7       	in	r27, 0x3e	; 62
    66ce:	11 96       	adiw	r26, 0x01	; 1
    66d0:	ed b7       	in	r30, 0x3d	; 61
    66d2:	fe b7       	in	r31, 0x3e	; 62
    66d4:	f2 82       	std	Z+2, r15	; 0x02
    66d6:	e1 82       	std	Z+1, r14	; 0x01
    66d8:	13 96       	adiw	r26, 0x03	; 3
    66da:	bc 92       	st	X, r11
    66dc:	ae 92       	st	-X, r10
    66de:	12 97       	sbiw	r26, 0x02	; 2
    66e0:	20 0f       	add	r18, r16
    66e2:	31 1f       	adc	r19, r17
    66e4:	f9 01       	movw	r30, r18
    66e6:	80 81       	ld	r24, Z
    66e8:	14 96       	adiw	r26, 0x04	; 4
    66ea:	8c 93       	st	X, r24
    66ec:	14 97       	sbiw	r26, 0x04	; 4
    66ee:	15 96       	adiw	r26, 0x05	; 5
    66f0:	1c 92       	st	X, r1
    66f2:	68 a7       	std	Y+40, r22	; 0x28
    66f4:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
			//_f_inttostr(__buff, __pump_prod[__num - 0x31]);
			lcd_print(__x+1, __y, __buff);
    66f8:	8d b7       	in	r24, 0x3d	; 61
    66fa:	9e b7       	in	r25, 0x3e	; 62
    66fc:	06 96       	adiw	r24, 0x06	; 6
    66fe:	0f b6       	in	r0, 0x3f	; 63
    6700:	f8 94       	cli
    6702:	9e bf       	out	0x3e, r25	; 62
    6704:	0f be       	out	0x3f, r0	; 63
    6706:	8d bf       	out	0x3d, r24	; 61
    6708:	88 2d       	mov	r24, r8
    670a:	8f 5f       	subi	r24, 0xFF	; 255
    670c:	68 a5       	ldd	r22, Y+40	; 0x28
    670e:	a7 01       	movw	r20, r14
    6710:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
    6714:	a2 cf       	rjmp	.-188    	; 0x665a <_menu_pumpprodinput+0x17e>
		}
	}
}
    6716:	a8 96       	adiw	r28, 0x28	; 40
    6718:	0f b6       	in	r0, 0x3f	; 63
    671a:	f8 94       	cli
    671c:	de bf       	out	0x3e, r29	; 62
    671e:	0f be       	out	0x3f, r0	; 63
    6720:	cd bf       	out	0x3d, r28	; 61
    6722:	cf 91       	pop	r28
    6724:	df 91       	pop	r29
    6726:	1f 91       	pop	r17
    6728:	0f 91       	pop	r16
    672a:	ff 90       	pop	r15
    672c:	ef 90       	pop	r14
    672e:	df 90       	pop	r13
    6730:	cf 90       	pop	r12
    6732:	bf 90       	pop	r11
    6734:	af 90       	pop	r10
    6736:	9f 90       	pop	r9
    6738:	8f 90       	pop	r8
    673a:	7f 90       	pop	r7
    673c:	08 95       	ret

0000673e <_menu_pumpprod>:
}

void _menu_pumpprod(void){
	char KeyPressed,KeyChar;
	while(1){
		lcd_clear();
    673e:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
		_scr_pump();
    6742:	0e 94 74 2e 	call	0x5ce8	; 0x5ce8 <_scr_pump>
		while(1){
			KeyPressed=_key_scan(1);
    6746:	81 e0       	ldi	r24, 0x01	; 1
    6748:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <_key_scan>
		    KeyChar=_key_btn(KeyPressed);
    674c:	0e 94 49 a3 	call	0x14692	; 0x14692 <_key_btn>
    6750:	98 2f       	mov	r25, r24

			if ((KeyChar>='1')&&(KeyChar<='8')){
    6752:	81 53       	subi	r24, 0x31	; 49
    6754:	88 30       	cpi	r24, 0x08	; 8
    6756:	18 f4       	brcc	.+6      	; 0x675e <_menu_pumpprod+0x20>
			     _menu_pumpprodinput(KeyChar-'1');
    6758:	0e 94 6e 32 	call	0x64dc	; 0x64dc <_menu_pumpprodinput>
			}
			if(__key == _KEY_CANCEL)
				return;
				*/
		}
	}
    675c:	f0 cf       	rjmp	.-32     	; 0x673e <_menu_pumpprod>
		    KeyChar=_key_btn(KeyPressed);

			if ((KeyChar>='1')&&(KeyChar<='8')){
			     _menu_pumpprodinput(KeyChar-'1');
				break;
			}else if (KeyChar=='*'){
    675e:	9a 32       	cpi	r25, 0x2A	; 42
    6760:	91 f7       	brne	.-28     	; 0x6746 <_menu_pumpprod+0x8>
			if(__key == _KEY_CANCEL)
				return;
				*/
		}
	}
}
    6762:	08 95       	ret

00006764 <_menu_pump>:

void _menu_pump(void){
	char __key;

	while(1){
		lcd_clear();_delay_ms(10);
    6764:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
    6768:	83 ec       	ldi	r24, 0xC3	; 195
    676a:	99 e0       	ldi	r25, 0x09	; 9
    676c:	01 97       	sbiw	r24, 0x01	; 1
    676e:	f1 f7       	brne	.-4      	; 0x676c <_menu_pump+0x8>
    6770:	00 c0       	rjmp	.+0      	; 0x6772 <_menu_pump+0xe>
    6772:	00 00       	nop
		lcd_printf(1, 1, PSTR("1)ID"));
    6774:	81 e0       	ldi	r24, 0x01	; 1
    6776:	61 e0       	ldi	r22, 0x01	; 1
    6778:	4c e8       	ldi	r20, 0x8C	; 140
    677a:	5e e0       	ldi	r21, 0x0E	; 14
    677c:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		lcd_printf(2, 1, PSTR("2)Product"));
    6780:	82 e0       	ldi	r24, 0x02	; 2
    6782:	61 e0       	ldi	r22, 0x01	; 1
    6784:	42 e8       	ldi	r20, 0x82	; 130
    6786:	5e e0       	ldi	r21, 0x0E	; 14
    6788:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		lcd_printf(4, 1, PSTR("*)Exit"));
    678c:	84 e0       	ldi	r24, 0x04	; 4
    678e:	61 e0       	ldi	r22, 0x01	; 1
    6790:	4b e7       	ldi	r20, 0x7B	; 123
    6792:	5e e0       	ldi	r21, 0x0E	; 14
    6794:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>

		while(1){
			__key = _key_scan(1);
    6798:	81 e0       	ldi	r24, 0x01	; 1
    679a:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <_key_scan>
			if(__key == _KEY_CANCEL)
    679e:	87 3e       	cpi	r24, 0xE7	; 231
    67a0:	51 f0       	breq	.+20     	; 0x67b6 <_menu_pump+0x52>
				return;
			if(__key == _KEY_1){
    67a2:	8e 3e       	cpi	r24, 0xEE	; 238
    67a4:	19 f4       	brne	.+6      	; 0x67ac <_menu_pump+0x48>
				_menu_pumpid();
    67a6:	0e 94 69 32 	call	0x64d2	; 0x64d2 <_menu_pumpid>
				break;
    67aa:	dc cf       	rjmp	.-72     	; 0x6764 <_menu_pump>
			}
			if(__key == _KEY_2){
    67ac:	8e 3d       	cpi	r24, 0xDE	; 222
    67ae:	a1 f7       	brne	.-24     	; 0x6798 <_menu_pump+0x34>
				_menu_pumpprod();
    67b0:	0e 94 9f 33 	call	0x673e	; 0x673e <_menu_pumpprod>
    67b4:	d7 cf       	rjmp	.-82     	; 0x6764 <_menu_pump>
    67b6:	08 95       	ret

000067b8 <FSettingPump>:
	      break;
	 
	 }
*/
	 char __key,Result;
		lcd_clear();_delay_ms(10);
    67b8:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
    67bc:	83 ec       	ldi	r24, 0xC3	; 195
    67be:	99 e0       	ldi	r25, 0x09	; 9
    67c0:	01 97       	sbiw	r24, 0x01	; 1
    67c2:	f1 f7       	brne	.-4      	; 0x67c0 <FSettingPump+0x8>
    67c4:	00 c0       	rjmp	.+0      	; 0x67c6 <FSettingPump+0xe>
    67c6:	00 00       	nop
		lcd_printf(1,1, PSTR("1)ID     "));
    67c8:	81 e0       	ldi	r24, 0x01	; 1
    67ca:	61 e0       	ldi	r22, 0x01	; 1
    67cc:	48 ee       	ldi	r20, 0xE8	; 232
    67ce:	52 e1       	ldi	r21, 0x12	; 18
    67d0:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		lcd_printf(2,1, PSTR("2)Product"));
    67d4:	82 e0       	ldi	r24, 0x02	; 2
    67d6:	61 e0       	ldi	r22, 0x01	; 1
    67d8:	4e ed       	ldi	r20, 0xDE	; 222
    67da:	52 e1       	ldi	r21, 0x12	; 18
    67dc:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		if (IFType==IT_STANDALONE){
    67e0:	80 91 00 01 	lds	r24, 0x0100
    67e4:	82 30       	cpi	r24, 0x02	; 2
    67e6:	61 f4       	brne	.+24     	; 0x6800 <FSettingPump+0x48>
		    lcd_printf(3,1, PSTR("3)Label  "));
    67e8:	83 e0       	ldi	r24, 0x03	; 3
    67ea:	61 e0       	ldi	r22, 0x01	; 1
    67ec:	44 ed       	ldi	r20, 0xD4	; 212
    67ee:	52 e1       	ldi	r21, 0x12	; 18
    67f0:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		    lcd_printf(4,1, PSTR("4)Brand  *)Exit"));
    67f4:	84 e0       	ldi	r24, 0x04	; 4
    67f6:	61 e0       	ldi	r22, 0x01	; 1
    67f8:	44 ec       	ldi	r20, 0xC4	; 196
    67fa:	52 e1       	ldi	r21, 0x12	; 18
    67fc:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		}

		while(1){
			__key = _key_scan(1);
    6800:	81 e0       	ldi	r24, 0x01	; 1
    6802:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <_key_scan>
			if(__key == _KEY_CANCEL)
    6806:	87 3e       	cpi	r24, 0xE7	; 231
    6808:	d9 f0       	breq	.+54     	; 0x6840 <FSettingPump+0x88>
				break;
			if(__key == _KEY_1){
    680a:	8e 3e       	cpi	r24, 0xEE	; 238
    680c:	19 f4       	brne	.+6      	; 0x6814 <FSettingPump+0x5c>
				_menu_pumpid();
    680e:	0e 94 69 32 	call	0x64d2	; 0x64d2 <_menu_pumpid>
				break;
    6812:	16 c0       	rjmp	.+44     	; 0x6840 <FSettingPump+0x88>
			}
			if(__key == _KEY_2){
    6814:	8e 3d       	cpi	r24, 0xDE	; 222
    6816:	19 f4       	brne	.+6      	; 0x681e <FSettingPump+0x66>
				_menu_pumpprod();
    6818:	0e 94 9f 33 	call	0x673e	; 0x673e <_menu_pumpprod>
				break;
    681c:	11 c0       	rjmp	.+34     	; 0x6840 <FSettingPump+0x88>
			}

			if((__key == _KEY_3)&&(IFType==IT_STANDALONE)){
    681e:	8e 3b       	cpi	r24, 0xBE	; 190
    6820:	39 f4       	brne	.+14     	; 0x6830 <FSettingPump+0x78>
    6822:	80 91 00 01 	lds	r24, 0x0100
    6826:	82 30       	cpi	r24, 0x02	; 2
    6828:	59 f7       	brne	.-42     	; 0x6800 <FSettingPump+0x48>
			    FMenuPumpLabel();
    682a:	0e 94 f6 2e 	call	0x5dec	; 0x5dec <FMenuPumpLabel>
				break;
    682e:	08 c0       	rjmp	.+16     	; 0x6840 <FSettingPump+0x88>
			}
			if((__key == _KEY_4)&&(IFType==IT_STANDALONE)){
    6830:	8d 3e       	cpi	r24, 0xED	; 237
    6832:	31 f7       	brne	.-52     	; 0x6800 <FSettingPump+0x48>
    6834:	80 91 00 01 	lds	r24, 0x0100
    6838:	82 30       	cpi	r24, 0x02	; 2
    683a:	11 f7       	brne	.-60     	; 0x6800 <FSettingPump+0x48>
			    FMenuPumpType();
    683c:	0e 94 8b 97 	call	0x12f16	; 0x12f16 <FMenuPumpType>

		}

	Result=MENU_DONE;
	return Result;
}
    6840:	81 e0       	ldi	r24, 0x01	; 1
    6842:	08 95       	ret

00006844 <_menu_datetime>:
		}
	}
}


void _menu_datetime(void){
    6844:	9f 92       	push	r9
    6846:	af 92       	push	r10
    6848:	bf 92       	push	r11
    684a:	cf 92       	push	r12
    684c:	df 92       	push	r13
    684e:	ef 92       	push	r14
    6850:	ff 92       	push	r15
    6852:	0f 93       	push	r16
    6854:	1f 93       	push	r17
    6856:	df 93       	push	r29
    6858:	cf 93       	push	r28
    685a:	cd b7       	in	r28, 0x3d	; 61
    685c:	de b7       	in	r29, 0x3e	; 62
    685e:	c2 54       	subi	r28, 0x42	; 66
    6860:	d0 40       	sbci	r29, 0x00	; 0
    6862:	0f b6       	in	r0, 0x3f	; 63
    6864:	f8 94       	cli
    6866:	de bf       	out	0x3e, r29	; 62
    6868:	0f be       	out	0x3f, r0	; 63
    686a:	cd bf       	out	0x3d, r28	; 61
	int		__i = 0, __ii = 0;
	char	__key, __chr;
	char	__date[9];
	char	__time[9];
	char	__map[12][4] = {	{1,  8, 0, 3}, {1,  9, 0, 9}, {1, 11, 0, 1}, {1, 12, 0, 9},
    686c:	de 01       	movw	r26, r28
    686e:	53 96       	adiw	r26, 0x13	; 19
    6870:	e6 e2       	ldi	r30, 0x26	; 38
    6872:	f1 e0       	ldi	r31, 0x01	; 1
    6874:	80 e3       	ldi	r24, 0x30	; 48
    6876:	01 90       	ld	r0, Z+
    6878:	0d 92       	st	X+, r0
    687a:	81 50       	subi	r24, 0x01	; 1
    687c:	e1 f7       	brne	.-8      	; 0x6876 <_menu_datetime+0x32>
								{1, 14, 0, 9}, {1, 15, 0, 9}, {2,  8, 0, 2}, {2,  9, 0, 9},
								{2, 11, 0, 5}, {2, 12, 0, 9}, {2, 14, 0, 5}, {2, 15, 0, 9}};

	_datetime(_DATETIME_READ, __date, __time);
    687e:	8e 01       	movw	r16, r28
    6880:	0f 5f       	subi	r16, 0xFF	; 255
    6882:	1f 4f       	sbci	r17, 0xFF	; 255
    6884:	b8 01       	movw	r22, r16
    6886:	ae 01       	movw	r20, r28
    6888:	46 5f       	subi	r20, 0xF6	; 246
    688a:	5f 4f       	sbci	r21, 0xFF	; 255
    688c:	0e 94 e4 a4 	call	0x149c8	; 0x149c8 <_datetime>
    6890:	65 e1       	ldi	r22, 0x15	; 21
    6892:	c6 2e       	mov	r12, r22
    6894:	d1 2c       	mov	r13, r1
    6896:	cc 0e       	add	r12, r28
    6898:	dd 1e       	adc	r13, r29
    689a:	f6 01       	movw	r30, r12
	for(__i = 0, __ii = 0; __i < 6; __i++, __ii++){
    689c:	20 e0       	ldi	r18, 0x00	; 0
    689e:	30 e0       	ldi	r19, 0x00	; 0
    68a0:	80 e0       	ldi	r24, 0x00	; 0
    68a2:	90 e0       	ldi	r25, 0x00	; 0
		if(__i == 2 || __i == 4)
    68a4:	82 30       	cpi	r24, 0x02	; 2
    68a6:	91 05       	cpc	r25, r1
    68a8:	19 f0       	breq	.+6      	; 0x68b0 <_menu_datetime+0x6c>
    68aa:	84 30       	cpi	r24, 0x04	; 4
    68ac:	91 05       	cpc	r25, r1
    68ae:	11 f4       	brne	.+4      	; 0x68b4 <_menu_datetime+0x70>
			__ii++;
    68b0:	2f 5f       	subi	r18, 0xFF	; 255
    68b2:	3f 4f       	sbci	r19, 0xFF	; 255
		__map[__i][2] = __date[__ii];
    68b4:	d8 01       	movw	r26, r16
    68b6:	a2 0f       	add	r26, r18
    68b8:	b3 1f       	adc	r27, r19
    68ba:	4c 91       	ld	r20, X
    68bc:	40 83       	st	Z, r20
	char	__map[12][4] = {	{1,  8, 0, 3}, {1,  9, 0, 9}, {1, 11, 0, 1}, {1, 12, 0, 9},
								{1, 14, 0, 9}, {1, 15, 0, 9}, {2,  8, 0, 2}, {2,  9, 0, 9},
								{2, 11, 0, 5}, {2, 12, 0, 9}, {2, 14, 0, 5}, {2, 15, 0, 9}};

	_datetime(_DATETIME_READ, __date, __time);
	for(__i = 0, __ii = 0; __i < 6; __i++, __ii++){
    68be:	01 96       	adiw	r24, 0x01	; 1
    68c0:	34 96       	adiw	r30, 0x04	; 4
    68c2:	86 30       	cpi	r24, 0x06	; 6
    68c4:	91 05       	cpc	r25, r1
    68c6:	19 f0       	breq	.+6      	; 0x68ce <_menu_datetime+0x8a>
    68c8:	2f 5f       	subi	r18, 0xFF	; 255
    68ca:	3f 4f       	sbci	r19, 0xFF	; 255
    68cc:	eb cf       	rjmp	.-42     	; 0x68a4 <_menu_datetime+0x60>
    68ce:	5d e2       	ldi	r21, 0x2D	; 45
    68d0:	a5 2e       	mov	r10, r21
    68d2:	b1 2c       	mov	r11, r1
    68d4:	ac 0e       	add	r10, r28
    68d6:	bd 1e       	adc	r11, r29
    68d8:	f5 01       	movw	r30, r10
    68da:	20 e0       	ldi	r18, 0x00	; 0
    68dc:	30 e0       	ldi	r19, 0x00	; 0
		__map[__i][2] = __date[__ii];
	}
	for(__i = 6, __ii = 0; __i < 12; __i++, __ii++){
		if(__i == 8 || __i == 10)
			__ii++;
		__map[__i][2] = __time[__ii];
    68de:	8e 01       	movw	r16, r28
    68e0:	06 5f       	subi	r16, 0xF6	; 246
    68e2:	1f 4f       	sbci	r17, 0xFF	; 255
		if(__i == 2 || __i == 4)
			__ii++;
		__map[__i][2] = __date[__ii];
	}
	for(__i = 6, __ii = 0; __i < 12; __i++, __ii++){
		if(__i == 8 || __i == 10)
    68e4:	88 30       	cpi	r24, 0x08	; 8
    68e6:	91 05       	cpc	r25, r1
    68e8:	19 f0       	breq	.+6      	; 0x68f0 <_menu_datetime+0xac>
    68ea:	8a 30       	cpi	r24, 0x0A	; 10
    68ec:	91 05       	cpc	r25, r1
    68ee:	11 f4       	brne	.+4      	; 0x68f4 <_menu_datetime+0xb0>
			__ii++;
    68f0:	2f 5f       	subi	r18, 0xFF	; 255
    68f2:	3f 4f       	sbci	r19, 0xFF	; 255
		__map[__i][2] = __time[__ii];
    68f4:	d8 01       	movw	r26, r16
    68f6:	a2 0f       	add	r26, r18
    68f8:	b3 1f       	adc	r27, r19
    68fa:	4c 91       	ld	r20, X
    68fc:	40 83       	st	Z, r20
	for(__i = 0, __ii = 0; __i < 6; __i++, __ii++){
		if(__i == 2 || __i == 4)
			__ii++;
		__map[__i][2] = __date[__ii];
	}
	for(__i = 6, __ii = 0; __i < 12; __i++, __ii++){
    68fe:	01 96       	adiw	r24, 0x01	; 1
    6900:	34 96       	adiw	r30, 0x04	; 4
    6902:	8c 30       	cpi	r24, 0x0C	; 12
    6904:	91 05       	cpc	r25, r1
    6906:	19 f0       	breq	.+6      	; 0x690e <_menu_datetime+0xca>
    6908:	2f 5f       	subi	r18, 0xFF	; 255
    690a:	3f 4f       	sbci	r19, 0xFF	; 255
    690c:	eb cf       	rjmp	.-42     	; 0x68e4 <_menu_datetime+0xa0>
		if(__i == 8 || __i == 10)
			__ii++;
		__map[__i][2] = __time[__ii];
	}

	lcd_clear();_delay_ms(10);
    690e:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
    6912:	83 ec       	ldi	r24, 0xC3	; 195
    6914:	99 e0       	ldi	r25, 0x09	; 9
    6916:	01 97       	sbiw	r24, 0x01	; 1
    6918:	f1 f7       	brne	.-4      	; 0x6916 <_menu_datetime+0xd2>
    691a:	00 c0       	rjmp	.+0      	; 0x691c <_menu_datetime+0xd8>
    691c:	00 00       	nop
	lcd_printf(1, 1, PSTR("DATE : "));
    691e:	81 e0       	ldi	r24, 0x01	; 1
    6920:	61 e0       	ldi	r22, 0x01	; 1
    6922:	4d ef       	ldi	r20, 0xFD	; 253
    6924:	5c e0       	ldi	r21, 0x0C	; 12
    6926:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
	lcd_printf(2, 1, PSTR("TIME : "));
    692a:	82 e0       	ldi	r24, 0x02	; 2
    692c:	61 e0       	ldi	r22, 0x01	; 1
    692e:	45 ef       	ldi	r20, 0xF5	; 245
    6930:	5c e0       	ldi	r21, 0x0C	; 12
    6932:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
	lcd_print(1, 8, __date);
    6936:	81 e0       	ldi	r24, 0x01	; 1
    6938:	68 e0       	ldi	r22, 0x08	; 8
    693a:	7e 01       	movw	r14, r28
    693c:	08 94       	sec
    693e:	e1 1c       	adc	r14, r1
    6940:	f1 1c       	adc	r15, r1
    6942:	a7 01       	movw	r20, r14
    6944:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
	lcd_print(2, 8, __time);
    6948:	82 e0       	ldi	r24, 0x02	; 2
    694a:	68 e0       	ldi	r22, 0x08	; 8
    694c:	a8 01       	movw	r20, r16
    694e:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
	lcd_printf(4, 1, PSTR("*)Cancel      #)Save"));
    6952:	84 e0       	ldi	r24, 0x04	; 4
    6954:	61 e0       	ldi	r22, 0x01	; 1
    6956:	40 ee       	ldi	r20, 0xE0	; 224
    6958:	5c e0       	ldi	r21, 0x0C	; 12
    695a:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>

	__i = 0;
	lcd_xy(__map[__i][0], __map[__i][1]);
    695e:	8b 89       	ldd	r24, Y+19	; 0x13
    6960:	6c 89       	ldd	r22, Y+20	; 0x14
    6962:	0e 94 19 a2 	call	0x14432	; 0x14432 <lcd_xy>
	CURSOR_SHOW;
    6966:	8f e0       	ldi	r24, 0x0F	; 15
    6968:	0e 94 53 a1 	call	0x142a6	; 0x142a6 <lcd_command>
	lcd_printf(2, 1, PSTR("TIME : "));
	lcd_print(1, 8, __date);
	lcd_print(2, 8, __time);
	lcd_printf(4, 1, PSTR("*)Cancel      #)Save"));

	__i = 0;
    696c:	00 e0       	ldi	r16, 0x00	; 0
    696e:	10 e0       	ldi	r17, 0x00	; 0
	lcd_xy(__map[__i][0], __map[__i][1]);
	CURSOR_SHOW;

	while(1){
		
		__key = _key_scan(1);
    6970:	81 e0       	ldi	r24, 0x01	; 1
    6972:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <_key_scan>
    6976:	98 2e       	mov	r9, r24
		__chr = _key_btn(__key);
    6978:	0e 94 49 a3 	call	0x14692	; 0x14692 <_key_btn>
		if(__chr >= 0x30 && __chr <= 0x39){
    697c:	98 2f       	mov	r25, r24
    697e:	90 53       	subi	r25, 0x30	; 48
    6980:	9a 30       	cpi	r25, 0x0A	; 10
    6982:	08 f0       	brcs	.+2      	; 0x6986 <_menu_datetime+0x142>
    6984:	68 c0       	rjmp	.+208    	; 0x6a56 <_menu_datetime+0x212>
			if(__i == 0 || __i == 2 || __i == 6 || __i == 8 || __i == 10){
    6986:	01 15       	cp	r16, r1
    6988:	11 05       	cpc	r17, r1
    698a:	61 f0       	breq	.+24     	; 0x69a4 <_menu_datetime+0x160>
    698c:	02 30       	cpi	r16, 0x02	; 2
    698e:	11 05       	cpc	r17, r1
    6990:	49 f0       	breq	.+18     	; 0x69a4 <_menu_datetime+0x160>
    6992:	06 30       	cpi	r16, 0x06	; 6
    6994:	11 05       	cpc	r17, r1
    6996:	31 f0       	breq	.+12     	; 0x69a4 <_menu_datetime+0x160>
    6998:	08 30       	cpi	r16, 0x08	; 8
    699a:	11 05       	cpc	r17, r1
    699c:	19 f0       	breq	.+6      	; 0x69a4 <_menu_datetime+0x160>
    699e:	0a 30       	cpi	r16, 0x0A	; 10
    69a0:	11 05       	cpc	r17, r1
    69a2:	89 f4       	brne	.+34     	; 0x69c6 <_menu_datetime+0x182>
				if((__chr - 0x30) <= __map[__i][3])
    69a4:	28 2f       	mov	r18, r24
    69a6:	30 e0       	ldi	r19, 0x00	; 0
    69a8:	20 53       	subi	r18, 0x30	; 48
    69aa:	30 40       	sbci	r19, 0x00	; 0
    69ac:	f8 01       	movw	r30, r16
    69ae:	ee 0f       	add	r30, r30
    69b0:	ff 1f       	adc	r31, r31
    69b2:	ee 0f       	add	r30, r30
    69b4:	ff 1f       	adc	r31, r31
    69b6:	ee 0d       	add	r30, r14
    69b8:	ff 1d       	adc	r31, r15
    69ba:	45 89       	ldd	r20, Z+21	; 0x15
    69bc:	50 e0       	ldi	r21, 0x00	; 0
    69be:	42 17       	cp	r20, r18
    69c0:	53 07       	cpc	r21, r19
    69c2:	6c f5       	brge	.+90     	; 0x6a1e <_menu_datetime+0x1da>
    69c4:	48 c0       	rjmp	.+144    	; 0x6a56 <_menu_datetime+0x212>
					goto CETAK;
				else
					goto LEWAT;
			}
			if(__i == 1){
    69c6:	01 30       	cpi	r16, 0x01	; 1
    69c8:	11 05       	cpc	r17, r1
    69ca:	61 f4       	brne	.+24     	; 0x69e4 <_menu_datetime+0x1a0>
				if((__map[0][2] - 0x30) < __map[0][3])
    69cc:	2d 89       	ldd	r18, Y+21	; 0x15
    69ce:	30 e0       	ldi	r19, 0x00	; 0
    69d0:	2f 52       	subi	r18, 0x2F	; 47
    69d2:	30 40       	sbci	r19, 0x00	; 0
    69d4:	4e 89       	ldd	r20, Y+22	; 0x16
    69d6:	50 e0       	ldi	r21, 0x00	; 0
    69d8:	42 17       	cp	r20, r18
    69da:	53 07       	cpc	r21, r19
    69dc:	04 f5       	brge	.+64     	; 0x6a1e <_menu_datetime+0x1da>
					goto CETAK;
				if((__map[0][2] - 0x30) >= __map[0][3]){
					if(__chr < 0x32)
    69de:	82 33       	cpi	r24, 0x32	; 50
    69e0:	f0 f0       	brcs	.+60     	; 0x6a1e <_menu_datetime+0x1da>
    69e2:	39 c0       	rjmp	.+114    	; 0x6a56 <_menu_datetime+0x212>
						goto CETAK;
					else
						goto LEWAT;
				}
			}
			if(__i == 3){
    69e4:	03 30       	cpi	r16, 0x03	; 3
    69e6:	11 05       	cpc	r17, r1
    69e8:	61 f4       	brne	.+24     	; 0x6a02 <_menu_datetime+0x1be>
				if((__map[2][2] - 0x30) < __map[2][3])
    69ea:	2d 8d       	ldd	r18, Y+29	; 0x1d
    69ec:	30 e0       	ldi	r19, 0x00	; 0
    69ee:	2f 52       	subi	r18, 0x2F	; 47
    69f0:	30 40       	sbci	r19, 0x00	; 0
    69f2:	4e 8d       	ldd	r20, Y+30	; 0x1e
    69f4:	50 e0       	ldi	r21, 0x00	; 0
    69f6:	42 17       	cp	r20, r18
    69f8:	53 07       	cpc	r21, r19
    69fa:	8c f4       	brge	.+34     	; 0x6a1e <_menu_datetime+0x1da>
					goto CETAK;
				if((__map[2][2] - 0x30) >= __map[2][3]){
					if(__chr < 0x33)
    69fc:	83 33       	cpi	r24, 0x33	; 51
    69fe:	78 f0       	brcs	.+30     	; 0x6a1e <_menu_datetime+0x1da>
    6a00:	2a c0       	rjmp	.+84     	; 0x6a56 <_menu_datetime+0x212>
						goto CETAK;
					else
						goto LEWAT;
				}
			}
			if(__i == 7){
    6a02:	07 30       	cpi	r16, 0x07	; 7
    6a04:	11 05       	cpc	r17, r1
    6a06:	59 f4       	brne	.+22     	; 0x6a1e <_menu_datetime+0x1da>
				if((__map[6][2] - 0x30) < __map[6][3])
    6a08:	2d a5       	ldd	r18, Y+45	; 0x2d
    6a0a:	30 e0       	ldi	r19, 0x00	; 0
    6a0c:	2f 52       	subi	r18, 0x2F	; 47
    6a0e:	30 40       	sbci	r19, 0x00	; 0
    6a10:	4e a5       	ldd	r20, Y+46	; 0x2e
    6a12:	50 e0       	ldi	r21, 0x00	; 0
    6a14:	42 17       	cp	r20, r18
    6a16:	53 07       	cpc	r21, r19
    6a18:	14 f4       	brge	.+4      	; 0x6a1e <_menu_datetime+0x1da>
					goto CETAK;
				if((__map[6][2] - 0x30) >= __map[6][3]){
					if(__chr < 0x34)
    6a1a:	84 33       	cpi	r24, 0x34	; 52
    6a1c:	e0 f4       	brcc	.+56     	; 0x6a56 <_menu_datetime+0x212>
					else
						goto LEWAT;
				}
			}
CETAK:
			__map[__i][2] = __chr;
    6a1e:	f8 01       	movw	r30, r16
    6a20:	ee 0f       	add	r30, r30
    6a22:	ff 1f       	adc	r31, r31
    6a24:	ee 0f       	add	r30, r30
    6a26:	ff 1f       	adc	r31, r31
    6a28:	ee 0d       	add	r30, r14
    6a2a:	ff 1d       	adc	r31, r15
    6a2c:	84 8b       	std	Z+20, r24	; 0x14
			_lcd(__chr);
    6a2e:	0e 94 e8 a1 	call	0x143d0	; 0x143d0 <_lcd>
			__i++;
    6a32:	0f 5f       	subi	r16, 0xFF	; 255
    6a34:	1f 4f       	sbci	r17, 0xFF	; 255
    6a36:	0c 30       	cpi	r16, 0x0C	; 12
    6a38:	11 05       	cpc	r17, r1
    6a3a:	14 f0       	brlt	.+4      	; 0x6a40 <_menu_datetime+0x1fc>
    6a3c:	0b e0       	ldi	r16, 0x0B	; 11
    6a3e:	10 e0       	ldi	r17, 0x00	; 0
			if(__i > 11)
				__i = 11;
			lcd_xy(__map[__i][0], __map[__i][1]);
    6a40:	f8 01       	movw	r30, r16
    6a42:	ee 0f       	add	r30, r30
    6a44:	ff 1f       	adc	r31, r31
    6a46:	ee 0f       	add	r30, r30
    6a48:	ff 1f       	adc	r31, r31
    6a4a:	ee 0d       	add	r30, r14
    6a4c:	ff 1d       	adc	r31, r15
    6a4e:	82 89       	ldd	r24, Z+18	; 0x12
    6a50:	63 89       	ldd	r22, Z+19	; 0x13
    6a52:	0e 94 19 a2 	call	0x14432	; 0x14432 <lcd_xy>
LEWAT:		;
		}
		if(__key == _KEY_SHIFT){
    6a56:	99 2d       	mov	r25, r9
    6a58:	9b 37       	cpi	r25, 0x7B	; 123
    6a5a:	41 f4       	brne	.+16     	; 0x6a6c <_menu_datetime+0x228>
			__i++;
    6a5c:	0f 5f       	subi	r16, 0xFF	; 255
    6a5e:	1f 4f       	sbci	r17, 0xFF	; 255
    6a60:	0c 30       	cpi	r16, 0x0C	; 12
    6a62:	11 05       	cpc	r17, r1
    6a64:	64 f0       	brlt	.+24     	; 0x6a7e <_menu_datetime+0x23a>
    6a66:	0b e0       	ldi	r16, 0x0B	; 11
    6a68:	10 e0       	ldi	r17, 0x00	; 0
    6a6a:	09 c0       	rjmp	.+18     	; 0x6a7e <_menu_datetime+0x23a>
			if(__i > 11)
				__i = 11;
			lcd_xy(__map[__i][0], __map[__i][1]);
		}
		if(__key == _KEY_CLEAR){
    6a6c:	a9 2d       	mov	r26, r9
    6a6e:	a7 37       	cpi	r26, 0x77	; 119
    6a70:	91 f4       	brne	.+36     	; 0x6a96 <_menu_datetime+0x252>
			__i--;
    6a72:	01 50       	subi	r16, 0x01	; 1
    6a74:	10 40       	sbci	r17, 0x00	; 0
    6a76:	17 ff       	sbrs	r17, 7
    6a78:	02 c0       	rjmp	.+4      	; 0x6a7e <_menu_datetime+0x23a>
    6a7a:	00 e0       	ldi	r16, 0x00	; 0
    6a7c:	10 e0       	ldi	r17, 0x00	; 0
			if(__i <= 0)
				__i = 0;
			lcd_xy(__map[__i][0], __map[__i][1]);
    6a7e:	f8 01       	movw	r30, r16
    6a80:	ee 0f       	add	r30, r30
    6a82:	ff 1f       	adc	r31, r31
    6a84:	ee 0f       	add	r30, r30
    6a86:	ff 1f       	adc	r31, r31
    6a88:	ee 0d       	add	r30, r14
    6a8a:	ff 1d       	adc	r31, r15
    6a8c:	82 89       	ldd	r24, Z+18	; 0x12
    6a8e:	63 89       	ldd	r22, Z+19	; 0x13
    6a90:	0e 94 19 a2 	call	0x14432	; 0x14432 <lcd_xy>
    6a94:	6d cf       	rjmp	.-294    	; 0x6970 <_menu_datetime+0x12c>
		}
		if(__key == _KEY_CANCEL)
    6a96:	b9 2d       	mov	r27, r9
    6a98:	b7 3e       	cpi	r27, 0xE7	; 231
    6a9a:	09 f4       	brne	.+2      	; 0x6a9e <_menu_datetime+0x25a>
    6a9c:	47 c0       	rjmp	.+142    	; 0x6b2c <_menu_datetime+0x2e8>
			break;
		if(__key == _KEY_ENTER){
    6a9e:	b7 3b       	cpi	r27, 0xB7	; 183
    6aa0:	09 f0       	breq	.+2      	; 0x6aa4 <_menu_datetime+0x260>
    6aa2:	66 cf       	rjmp	.-308    	; 0x6970 <_menu_datetime+0x12c>
    6aa4:	20 e0       	ldi	r18, 0x00	; 0
    6aa6:	30 e0       	ldi	r19, 0x00	; 0
    6aa8:	80 e0       	ldi	r24, 0x00	; 0
    6aaa:	90 e0       	ldi	r25, 0x00	; 0
			for(__i = 0, __ii = 0; __i < 6; __i++, __ii++){
				if(__i == 2 || __i == 4)
					__ii++;
				__date[__ii] = __map[__i][2];
    6aac:	ae 01       	movw	r20, r28
    6aae:	4f 5f       	subi	r20, 0xFF	; 255
    6ab0:	5f 4f       	sbci	r21, 0xFF	; 255
		}
		if(__key == _KEY_CANCEL)
			break;
		if(__key == _KEY_ENTER){
			for(__i = 0, __ii = 0; __i < 6; __i++, __ii++){
				if(__i == 2 || __i == 4)
    6ab2:	82 30       	cpi	r24, 0x02	; 2
    6ab4:	91 05       	cpc	r25, r1
    6ab6:	19 f0       	breq	.+6      	; 0x6abe <_menu_datetime+0x27a>
    6ab8:	84 30       	cpi	r24, 0x04	; 4
    6aba:	91 05       	cpc	r25, r1
    6abc:	11 f4       	brne	.+4      	; 0x6ac2 <_menu_datetime+0x27e>
					__ii++;
    6abe:	2f 5f       	subi	r18, 0xFF	; 255
    6ac0:	3f 4f       	sbci	r19, 0xFF	; 255
				__date[__ii] = __map[__i][2];
    6ac2:	fa 01       	movw	r30, r20
    6ac4:	e2 0f       	add	r30, r18
    6ac6:	f3 1f       	adc	r31, r19
    6ac8:	d6 01       	movw	r26, r12
    6aca:	6c 91       	ld	r22, X
    6acc:	60 83       	st	Z, r22
			lcd_xy(__map[__i][0], __map[__i][1]);
		}
		if(__key == _KEY_CANCEL)
			break;
		if(__key == _KEY_ENTER){
			for(__i = 0, __ii = 0; __i < 6; __i++, __ii++){
    6ace:	01 96       	adiw	r24, 0x01	; 1
    6ad0:	64 e0       	ldi	r22, 0x04	; 4
    6ad2:	70 e0       	ldi	r23, 0x00	; 0
    6ad4:	c6 0e       	add	r12, r22
    6ad6:	d7 1e       	adc	r13, r23
    6ad8:	86 30       	cpi	r24, 0x06	; 6
    6ada:	91 05       	cpc	r25, r1
    6adc:	19 f0       	breq	.+6      	; 0x6ae4 <_menu_datetime+0x2a0>
    6ade:	2f 5f       	subi	r18, 0xFF	; 255
    6ae0:	3f 4f       	sbci	r19, 0xFF	; 255
    6ae2:	e7 cf       	rjmp	.-50     	; 0x6ab2 <_menu_datetime+0x26e>
    6ae4:	20 e0       	ldi	r18, 0x00	; 0
    6ae6:	30 e0       	ldi	r19, 0x00	; 0
				__date[__ii] = __map[__i][2];
			}
			for(__i = 6, __ii = 0; __i < 12; __i++, __ii++){
				if(__i == 8 || __i == 10)
					__ii++;
				__time[__ii] = __map[__i][2];
    6ae8:	ae 01       	movw	r20, r28
    6aea:	46 5f       	subi	r20, 0xF6	; 246
    6aec:	5f 4f       	sbci	r21, 0xFF	; 255
				if(__i == 2 || __i == 4)
					__ii++;
				__date[__ii] = __map[__i][2];
			}
			for(__i = 6, __ii = 0; __i < 12; __i++, __ii++){
				if(__i == 8 || __i == 10)
    6aee:	88 30       	cpi	r24, 0x08	; 8
    6af0:	91 05       	cpc	r25, r1
    6af2:	19 f0       	breq	.+6      	; 0x6afa <_menu_datetime+0x2b6>
    6af4:	8a 30       	cpi	r24, 0x0A	; 10
    6af6:	91 05       	cpc	r25, r1
    6af8:	11 f4       	brne	.+4      	; 0x6afe <_menu_datetime+0x2ba>
					__ii++;
    6afa:	2f 5f       	subi	r18, 0xFF	; 255
    6afc:	3f 4f       	sbci	r19, 0xFF	; 255
				__time[__ii] = __map[__i][2];
    6afe:	fa 01       	movw	r30, r20
    6b00:	e2 0f       	add	r30, r18
    6b02:	f3 1f       	adc	r31, r19
    6b04:	d5 01       	movw	r26, r10
    6b06:	6c 91       	ld	r22, X
    6b08:	60 83       	st	Z, r22
			for(__i = 0, __ii = 0; __i < 6; __i++, __ii++){
				if(__i == 2 || __i == 4)
					__ii++;
				__date[__ii] = __map[__i][2];
			}
			for(__i = 6, __ii = 0; __i < 12; __i++, __ii++){
    6b0a:	01 96       	adiw	r24, 0x01	; 1
    6b0c:	64 e0       	ldi	r22, 0x04	; 4
    6b0e:	70 e0       	ldi	r23, 0x00	; 0
    6b10:	a6 0e       	add	r10, r22
    6b12:	b7 1e       	adc	r11, r23
    6b14:	8c 30       	cpi	r24, 0x0C	; 12
    6b16:	91 05       	cpc	r25, r1
    6b18:	19 f0       	breq	.+6      	; 0x6b20 <_menu_datetime+0x2dc>
    6b1a:	2f 5f       	subi	r18, 0xFF	; 255
    6b1c:	3f 4f       	sbci	r19, 0xFF	; 255
    6b1e:	e7 cf       	rjmp	.-50     	; 0x6aee <_menu_datetime+0x2aa>
				if(__i == 8 || __i == 10)
					__ii++;
				__time[__ii] = __map[__i][2];
			}
			_datetime(_DATETIME_WRITE, __date, __time);
    6b20:	81 e0       	ldi	r24, 0x01	; 1
    6b22:	be 01       	movw	r22, r28
    6b24:	6f 5f       	subi	r22, 0xFF	; 255
    6b26:	7f 4f       	sbci	r23, 0xFF	; 255
    6b28:	0e 94 e4 a4 	call	0x149c8	; 0x149c8 <_datetime>
			break;
		}
	}
	CURSOR_HIDE;
    6b2c:	8c e0       	ldi	r24, 0x0C	; 12
    6b2e:	0e 94 53 a1 	call	0x142a6	; 0x142a6 <lcd_command>
}
    6b32:	ce 5b       	subi	r28, 0xBE	; 190
    6b34:	df 4f       	sbci	r29, 0xFF	; 255
    6b36:	0f b6       	in	r0, 0x3f	; 63
    6b38:	f8 94       	cli
    6b3a:	de bf       	out	0x3e, r29	; 62
    6b3c:	0f be       	out	0x3f, r0	; 63
    6b3e:	cd bf       	out	0x3d, r28	; 61
    6b40:	cf 91       	pop	r28
    6b42:	df 91       	pop	r29
    6b44:	1f 91       	pop	r17
    6b46:	0f 91       	pop	r16
    6b48:	ff 90       	pop	r15
    6b4a:	ef 90       	pop	r14
    6b4c:	df 90       	pop	r13
    6b4e:	cf 90       	pop	r12
    6b50:	bf 90       	pop	r11
    6b52:	af 90       	pop	r10
    6b54:	9f 90       	pop	r9
    6b56:	08 95       	ret

00006b58 <FSettingDatetime>:
	 }
     return Result;
}

char FSettingDatetime(){
     _menu_datetime();
    6b58:	0e 94 22 34 	call	0x6844	; 0x6844 <_menu_datetime>
     return MENU_DONE;
}
    6b5c:	81 e0       	ldi	r24, 0x01	; 1
    6b5e:	08 95       	ret

00006b60 <_menu_printer>:
}

//*************************************************************************
//  ngeset printer

void _menu_printer(void){
    6b60:	4f 92       	push	r4
    6b62:	5f 92       	push	r5
    6b64:	6f 92       	push	r6
    6b66:	7f 92       	push	r7
    6b68:	8f 92       	push	r8
    6b6a:	9f 92       	push	r9
    6b6c:	af 92       	push	r10
    6b6e:	bf 92       	push	r11
    6b70:	cf 92       	push	r12
    6b72:	df 92       	push	r13
    6b74:	ef 92       	push	r14
    6b76:	ff 92       	push	r15
    6b78:	0f 93       	push	r16
    6b7a:	1f 93       	push	r17
    6b7c:	df 93       	push	r29
    6b7e:	cf 93       	push	r28
    6b80:	cd b7       	in	r28, 0x3d	; 61
    6b82:	de b7       	in	r29, 0x3e	; 62
    6b84:	2d 97       	sbiw	r28, 0x0d	; 13
    6b86:	0f b6       	in	r0, 0x3f	; 63
    6b88:	f8 94       	cli
    6b8a:	de bf       	out	0x3e, r29	; 62
    6b8c:	0f be       	out	0x3f, r0	; 63
    6b8e:	cd bf       	out	0x3d, r28	; 61
	char 			__value[6];
	char	__i, __x, __y, __lmt, __start, __key, __num, __buff[6];
//	char lcdteks[20];

	__value[0] = eeprom_read_byte(&DefPrinterType);
    6b90:	80 e3       	ldi	r24, 0x30	; 48
    6b92:	90 e0       	ldi	r25, 0x00	; 0
    6b94:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
    6b98:	89 83       	std	Y+1, r24	; 0x01
	__value[1] = eeprom_read_byte(&DefPrintSize);
    6b9a:	85 e3       	ldi	r24, 0x35	; 53
    6b9c:	90 e0       	ldi	r25, 0x00	; 0
    6b9e:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
    6ba2:	8a 83       	std	Y+2, r24	; 0x02
	__value[2] = eeprom_read_byte(&DefPrintLogo);
    6ba4:	84 e3       	ldi	r24, 0x34	; 52
    6ba6:	90 e0       	ldi	r25, 0x00	; 0
    6ba8:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
    6bac:	8b 83       	std	Y+3, r24	; 0x03
	__value[3] = eeprom_read_byte(&DefPrintAutoCut);
    6bae:	83 e3       	ldi	r24, 0x33	; 51
    6bb0:	90 e0       	ldi	r25, 0x00	; 0
    6bb2:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
    6bb6:	8c 83       	std	Y+4, r24	; 0x04
	__value[4] = eeprom_read_byte(&DefPrintScrollEnd);
    6bb8:	81 e3       	ldi	r24, 0x31	; 49
    6bba:	90 e0       	ldi	r25, 0x00	; 0
    6bbc:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
    6bc0:	8d 83       	std	Y+5, r24	; 0x05
	__value[5] = eeprom_read_byte(&DefPrintScrollSpace);
    6bc2:	82 e3       	ldi	r24, 0x32	; 50
    6bc4:	90 e0       	ldi	r25, 0x00	; 0
    6bc6:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
    6bca:	8e 83       	std	Y+6, r24	; 0x06

	lcd_clear();
    6bcc:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
	lcd_printf(1, 1, PSTR("1)Type:  5)Scroll:"));
    6bd0:	81 e0       	ldi	r24, 0x01	; 1
    6bd2:	61 e0       	ldi	r22, 0x01	; 1
    6bd4:	4d ec       	ldi	r20, 0xCD	; 205
    6bd6:	5c e0       	ldi	r21, 0x0C	; 12
    6bd8:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
	lcd_printf(2, 1, PSTR("2)Size:  6)Space :"));
    6bdc:	82 e0       	ldi	r24, 0x02	; 2
    6bde:	61 e0       	ldi	r22, 0x01	; 1
    6be0:	4a eb       	ldi	r20, 0xBA	; 186
    6be2:	5c e0       	ldi	r21, 0x0C	; 12
    6be4:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
	lcd_printf(3, 1, PSTR("3)Logo:  #)Save"));
    6be8:	83 e0       	ldi	r24, 0x03	; 3
    6bea:	61 e0       	ldi	r22, 0x01	; 1
    6bec:	4a ea       	ldi	r20, 0xAA	; 170
    6bee:	5c e0       	ldi	r21, 0x0C	; 12
    6bf0:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
	lcd_printf(4, 1, PSTR("4)Cut :  *)Exit"));
    6bf4:	84 e0       	ldi	r24, 0x04	; 4
    6bf6:	61 e0       	ldi	r22, 0x01	; 1
    6bf8:	4a e9       	ldi	r20, 0x9A	; 154
    6bfa:	5c e0       	ldi	r21, 0x0C	; 12
    6bfc:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
    6c00:	0e e7       	ldi	r16, 0x7E	; 126
    6c02:	12 e0       	ldi	r17, 0x02	; 2
    6c04:	6e 01       	movw	r12, r28
    6c06:	08 94       	sec
    6c08:	c1 1c       	adc	r12, r1
    6c0a:	d1 1c       	adc	r13, r1

	for(__i = 0; __i < 6; __i++){
    6c0c:	88 24       	eor	r8, r8
		__x = pgm_read_byte(&__prntloc[__i][0]);
		__y = pgm_read_byte(&__prntloc[__i][1]);
        sprintf_P(__buff,PSTR("%d"),__value[__i]);
    6c0e:	97 e0       	ldi	r25, 0x07	; 7
    6c10:	e9 2e       	mov	r14, r25
    6c12:	f1 2c       	mov	r15, r1
    6c14:	ec 0e       	add	r14, r28
    6c16:	fd 1e       	adc	r15, r29
    6c18:	87 e9       	ldi	r24, 0x97	; 151
    6c1a:	a8 2e       	mov	r10, r24
    6c1c:	8c e0       	ldi	r24, 0x0C	; 12
    6c1e:	b8 2e       	mov	r11, r24
		//_f_inttostr(__buff, __value[__i]);
		if(__i == 4) sprintf_P(__buff,PSTR("%.2d"),__value[__i]);
    6c20:	b2 e9       	ldi	r27, 0x92	; 146
    6c22:	4b 2e       	mov	r4, r27
    6c24:	bc e0       	ldi	r27, 0x0C	; 12
    6c26:	5b 2e       	mov	r5, r27
	lcd_printf(2, 1, PSTR("2)Size:  6)Space :"));
	lcd_printf(3, 1, PSTR("3)Logo:  #)Save"));
	lcd_printf(4, 1, PSTR("4)Cut :  *)Exit"));

	for(__i = 0; __i < 6; __i++){
		__x = pgm_read_byte(&__prntloc[__i][0]);
    6c28:	f8 01       	movw	r30, r16
    6c2a:	64 90       	lpm	r6, Z+
		__y = pgm_read_byte(&__prntloc[__i][1]);
    6c2c:	31 96       	adiw	r30, 0x01	; 1
    6c2e:	74 90       	lpm	r7, Z+
        sprintf_P(__buff,PSTR("%d"),__value[__i]);
    6c30:	d6 01       	movw	r26, r12
    6c32:	9d 90       	ld	r9, X+
    6c34:	6d 01       	movw	r12, r26
    6c36:	00 d0       	rcall	.+0      	; 0x6c38 <_menu_printer+0xd8>
    6c38:	00 d0       	rcall	.+0      	; 0x6c3a <_menu_printer+0xda>
    6c3a:	00 d0       	rcall	.+0      	; 0x6c3c <_menu_printer+0xdc>
    6c3c:	ad b7       	in	r26, 0x3d	; 61
    6c3e:	be b7       	in	r27, 0x3e	; 62
    6c40:	11 96       	adiw	r26, 0x01	; 1
    6c42:	ed b7       	in	r30, 0x3d	; 61
    6c44:	fe b7       	in	r31, 0x3e	; 62
    6c46:	f2 82       	std	Z+2, r15	; 0x02
    6c48:	e1 82       	std	Z+1, r14	; 0x01
    6c4a:	13 96       	adiw	r26, 0x03	; 3
    6c4c:	bc 92       	st	X, r11
    6c4e:	ae 92       	st	-X, r10
    6c50:	12 97       	sbiw	r26, 0x02	; 2
    6c52:	14 96       	adiw	r26, 0x04	; 4
    6c54:	9c 92       	st	X, r9
    6c56:	14 97       	sbiw	r26, 0x04	; 4
    6c58:	15 96       	adiw	r26, 0x05	; 5
    6c5a:	1c 92       	st	X, r1
    6c5c:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		//_f_inttostr(__buff, __value[__i]);
		if(__i == 4) sprintf_P(__buff,PSTR("%.2d"),__value[__i]);
    6c60:	2d b7       	in	r18, 0x3d	; 61
    6c62:	3e b7       	in	r19, 0x3e	; 62
    6c64:	2a 5f       	subi	r18, 0xFA	; 250
    6c66:	3f 4f       	sbci	r19, 0xFF	; 255
    6c68:	0f b6       	in	r0, 0x3f	; 63
    6c6a:	f8 94       	cli
    6c6c:	3e bf       	out	0x3e, r19	; 62
    6c6e:	0f be       	out	0x3f, r0	; 63
    6c70:	2d bf       	out	0x3d, r18	; 61
    6c72:	38 2d       	mov	r19, r8
    6c74:	34 30       	cpi	r19, 0x04	; 4
    6c76:	f1 f4       	brne	.+60     	; 0x6cb4 <_menu_printer+0x154>
    6c78:	00 d0       	rcall	.+0      	; 0x6c7a <_menu_printer+0x11a>
    6c7a:	00 d0       	rcall	.+0      	; 0x6c7c <_menu_printer+0x11c>
    6c7c:	00 d0       	rcall	.+0      	; 0x6c7e <_menu_printer+0x11e>
    6c7e:	ad b7       	in	r26, 0x3d	; 61
    6c80:	be b7       	in	r27, 0x3e	; 62
    6c82:	11 96       	adiw	r26, 0x01	; 1
    6c84:	ed b7       	in	r30, 0x3d	; 61
    6c86:	fe b7       	in	r31, 0x3e	; 62
    6c88:	f2 82       	std	Z+2, r15	; 0x02
    6c8a:	e1 82       	std	Z+1, r14	; 0x01
    6c8c:	13 96       	adiw	r26, 0x03	; 3
    6c8e:	5c 92       	st	X, r5
    6c90:	4e 92       	st	-X, r4
    6c92:	12 97       	sbiw	r26, 0x02	; 2
    6c94:	14 96       	adiw	r26, 0x04	; 4
    6c96:	9c 92       	st	X, r9
    6c98:	14 97       	sbiw	r26, 0x04	; 4
    6c9a:	15 96       	adiw	r26, 0x05	; 5
    6c9c:	1c 92       	st	X, r1
    6c9e:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    6ca2:	2d b7       	in	r18, 0x3d	; 61
    6ca4:	3e b7       	in	r19, 0x3e	; 62
    6ca6:	2a 5f       	subi	r18, 0xFA	; 250
    6ca8:	3f 4f       	sbci	r19, 0xFF	; 255
    6caa:	0f b6       	in	r0, 0x3f	; 63
    6cac:	f8 94       	cli
    6cae:	3e bf       	out	0x3e, r19	; 62
    6cb0:	0f be       	out	0x3f, r0	; 63
    6cb2:	2d bf       	out	0x3d, r18	; 61
		//_f_punctuation(__buff, 0, 2, 0);
		lcd_print(__x, __y, __buff);
    6cb4:	86 2d       	mov	r24, r6
    6cb6:	67 2d       	mov	r22, r7
    6cb8:	a7 01       	movw	r20, r14
    6cba:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
	lcd_printf(1, 1, PSTR("1)Type:  5)Scroll:"));
	lcd_printf(2, 1, PSTR("2)Size:  6)Space :"));
	lcd_printf(3, 1, PSTR("3)Logo:  #)Save"));
	lcd_printf(4, 1, PSTR("4)Cut :  *)Exit"));

	for(__i = 0; __i < 6; __i++){
    6cbe:	83 94       	inc	r8
    6cc0:	0e 5f       	subi	r16, 0xFE	; 254
    6cc2:	1f 4f       	sbci	r17, 0xFF	; 255
    6cc4:	38 2d       	mov	r19, r8
    6cc6:	36 30       	cpi	r19, 0x06	; 6
    6cc8:	09 f0       	breq	.+2      	; 0x6ccc <_menu_printer+0x16c>
    6cca:	ae cf       	rjmp	.-164    	; 0x6c28 <_menu_printer+0xc8>

		}
		if(__num >= 0x31 && __num <= 0x36){
			__lmt = pgm_read_byte(&__prntlmt[__num - 0x31]);
			__start = pgm_read_byte(&__prntstr[__num - 0x31]);
			if(__value[__num - 0x31] == __lmt)
    6ccc:	7e 01       	movw	r14, r28
    6cce:	08 94       	sec
    6cd0:	e1 1c       	adc	r14, r1
    6cd2:	f1 1c       	adc	r15, r1
				__value[__num - 0x31] = __start;
			else
				__value[__num - 0x31]++;
			__x = pgm_read_byte(&__prntloc[__num - 0x31][0]);
			__y = pgm_read_byte(&__prntloc[__num - 0x31][1]);
			sprintf_P(__buff,PSTR("%d"),__value[__num - 0x31]);
    6cd4:	8e 01       	movw	r16, r28
    6cd6:	09 5f       	subi	r16, 0xF9	; 249
    6cd8:	1f 4f       	sbci	r17, 0xFF	; 255
    6cda:	af e8       	ldi	r26, 0x8F	; 143
    6cdc:	ca 2e       	mov	r12, r26
    6cde:	ac e0       	ldi	r26, 0x0C	; 12
    6ce0:	da 2e       	mov	r13, r26
			//_f_inttostr(__buff, __value[__num - 0x31]);
			if((__num == 0x35)||(__num == 0x36))
			   sprintf_P(__buff,PSTR("%.2d"),__value[__num - 0x31]);
    6ce2:	fa e8       	ldi	r31, 0x8A	; 138
    6ce4:	8f 2e       	mov	r8, r31
    6ce6:	fc e0       	ldi	r31, 0x0C	; 12
    6ce8:	9f 2e       	mov	r9, r31
	}
    //sprintf_P(lcdteks,PSTR("6)Space :%.2d"),__value[5]);
	//lcd_print(2,10,lcdteks);

	while(1){	
		__key = _key_scan(1);
    6cea:	81 e0       	ldi	r24, 0x01	; 1
    6cec:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <_key_scan>
    6cf0:	98 2f       	mov	r25, r24
		__num = _key_btn(__key);
    6cf2:	9d 87       	std	Y+13, r25	; 0x0d
    6cf4:	0e 94 49 a3 	call	0x14692	; 0x14692 <_key_btn>
    6cf8:	a8 2e       	mov	r10, r24
		if(__key == _KEY_CANCEL)
    6cfa:	9d 85       	ldd	r25, Y+13	; 0x0d
    6cfc:	97 3e       	cpi	r25, 0xE7	; 231
    6cfe:	09 f4       	brne	.+2      	; 0x6d02 <_menu_printer+0x1a2>
    6d00:	8b c0       	rjmp	.+278    	; 0x6e18 <_menu_printer+0x2b8>
			return;
		if(__key==_KEY_ENTER){
    6d02:	97 3b       	cpi	r25, 0xB7	; 183
    6d04:	f1 f4       	brne	.+60     	; 0x6d42 <_menu_printer+0x1e2>
			eeprom_write_byte(&DefPrinterType, __value[0]);
    6d06:	80 e3       	ldi	r24, 0x30	; 48
    6d08:	90 e0       	ldi	r25, 0x00	; 0
    6d0a:	69 81       	ldd	r22, Y+1	; 0x01
    6d0c:	0e 94 78 aa 	call	0x154f0	; 0x154f0 <__eewr_byte_m128>
			eeprom_write_byte(&DefPrintSize, __value[1]);
    6d10:	85 e3       	ldi	r24, 0x35	; 53
    6d12:	90 e0       	ldi	r25, 0x00	; 0
    6d14:	6a 81       	ldd	r22, Y+2	; 0x02
    6d16:	0e 94 78 aa 	call	0x154f0	; 0x154f0 <__eewr_byte_m128>
			eeprom_write_byte(&DefPrintLogo, __value[2]);
    6d1a:	84 e3       	ldi	r24, 0x34	; 52
    6d1c:	90 e0       	ldi	r25, 0x00	; 0
    6d1e:	6b 81       	ldd	r22, Y+3	; 0x03
    6d20:	0e 94 78 aa 	call	0x154f0	; 0x154f0 <__eewr_byte_m128>
			eeprom_write_byte(&DefPrintAutoCut, __value[3]);
    6d24:	83 e3       	ldi	r24, 0x33	; 51
    6d26:	90 e0       	ldi	r25, 0x00	; 0
    6d28:	6c 81       	ldd	r22, Y+4	; 0x04
    6d2a:	0e 94 78 aa 	call	0x154f0	; 0x154f0 <__eewr_byte_m128>
			eeprom_write_byte(&DefPrintScrollEnd, __value[4]);
    6d2e:	81 e3       	ldi	r24, 0x31	; 49
    6d30:	90 e0       	ldi	r25, 0x00	; 0
    6d32:	6d 81       	ldd	r22, Y+5	; 0x05
    6d34:	0e 94 78 aa 	call	0x154f0	; 0x154f0 <__eewr_byte_m128>
			eeprom_write_byte(&DefPrintScrollSpace, __value[5]);
    6d38:	82 e3       	ldi	r24, 0x32	; 50
    6d3a:	90 e0       	ldi	r25, 0x00	; 0
    6d3c:	6e 81       	ldd	r22, Y+6	; 0x06
    6d3e:	0e 94 78 aa 	call	0x154f0	; 0x154f0 <__eewr_byte_m128>

		}
		if(__num >= 0x31 && __num <= 0x36){
    6d42:	8a 2d       	mov	r24, r10
    6d44:	81 53       	subi	r24, 0x31	; 49
    6d46:	86 30       	cpi	r24, 0x06	; 6
    6d48:	80 f6       	brcc	.-96     	; 0x6cea <_menu_printer+0x18a>
			__lmt = pgm_read_byte(&__prntlmt[__num - 0x31]);
    6d4a:	2a 2d       	mov	r18, r10
    6d4c:	30 e0       	ldi	r19, 0x00	; 0
    6d4e:	21 53       	subi	r18, 0x31	; 49
    6d50:	30 40       	sbci	r19, 0x00	; 0
    6d52:	f9 01       	movw	r30, r18
    6d54:	e6 57       	subi	r30, 0x76	; 118
    6d56:	fd 4f       	sbci	r31, 0xFD	; 253
    6d58:	84 91       	lpm	r24, Z+
			__start = pgm_read_byte(&__prntstr[__num - 0x31]);
    6d5a:	f9 01       	movw	r30, r18
    6d5c:	e0 57       	subi	r30, 0x70	; 112
    6d5e:	fd 4f       	sbci	r31, 0xFD	; 253
    6d60:	e4 91       	lpm	r30, Z+
			if(__value[__num - 0x31] == __lmt)
    6d62:	d7 01       	movw	r26, r14
    6d64:	a2 0f       	add	r26, r18
    6d66:	b3 1f       	adc	r27, r19
    6d68:	9c 91       	ld	r25, X
    6d6a:	98 17       	cp	r25, r24
    6d6c:	11 f4       	brne	.+4      	; 0x6d72 <_menu_printer+0x212>
				__value[__num - 0x31] = __start;
    6d6e:	ec 93       	st	X, r30
    6d70:	02 c0       	rjmp	.+4      	; 0x6d76 <_menu_printer+0x216>
			else
				__value[__num - 0x31]++;
    6d72:	9f 5f       	subi	r25, 0xFF	; 255
    6d74:	9c 93       	st	X, r25
			__x = pgm_read_byte(&__prntloc[__num - 0x31][0]);
    6d76:	b9 01       	movw	r22, r18
    6d78:	66 0f       	add	r22, r22
    6d7a:	77 1f       	adc	r23, r23
    6d7c:	fb 01       	movw	r30, r22
    6d7e:	e2 58       	subi	r30, 0x82	; 130
    6d80:	fd 4f       	sbci	r31, 0xFD	; 253
    6d82:	74 90       	lpm	r7, Z+
			__y = pgm_read_byte(&__prntloc[__num - 0x31][1]);
    6d84:	61 58       	subi	r22, 0x81	; 129
    6d86:	7d 4f       	sbci	r23, 0xFD	; 253
    6d88:	fb 01       	movw	r30, r22
    6d8a:	64 90       	lpm	r6, Z+
			sprintf_P(__buff,PSTR("%d"),__value[__num - 0x31]);
    6d8c:	2e 0d       	add	r18, r14
    6d8e:	3f 1d       	adc	r19, r15
    6d90:	d9 01       	movw	r26, r18
    6d92:	4c 90       	ld	r4, X
    6d94:	00 d0       	rcall	.+0      	; 0x6d96 <_menu_printer+0x236>
    6d96:	00 d0       	rcall	.+0      	; 0x6d98 <_menu_printer+0x238>
    6d98:	00 d0       	rcall	.+0      	; 0x6d9a <_menu_printer+0x23a>
    6d9a:	ed b7       	in	r30, 0x3d	; 61
    6d9c:	fe b7       	in	r31, 0x3e	; 62
    6d9e:	31 96       	adiw	r30, 0x01	; 1
    6da0:	ad b7       	in	r26, 0x3d	; 61
    6da2:	be b7       	in	r27, 0x3e	; 62
    6da4:	12 96       	adiw	r26, 0x02	; 2
    6da6:	1c 93       	st	X, r17
    6da8:	0e 93       	st	-X, r16
    6daa:	11 97       	sbiw	r26, 0x01	; 1
    6dac:	d3 82       	std	Z+3, r13	; 0x03
    6dae:	c2 82       	std	Z+2, r12	; 0x02
    6db0:	44 82       	std	Z+4, r4	; 0x04
    6db2:	15 82       	std	Z+5, r1	; 0x05
    6db4:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
			//_f_inttostr(__buff, __value[__num - 0x31]);
			if((__num == 0x35)||(__num == 0x36))
    6db8:	8a 2d       	mov	r24, r10
    6dba:	85 53       	subi	r24, 0x35	; 53
    6dbc:	ed b7       	in	r30, 0x3d	; 61
    6dbe:	fe b7       	in	r31, 0x3e	; 62
    6dc0:	36 96       	adiw	r30, 0x06	; 6
    6dc2:	0f b6       	in	r0, 0x3f	; 63
    6dc4:	f8 94       	cli
    6dc6:	fe bf       	out	0x3e, r31	; 62
    6dc8:	0f be       	out	0x3f, r0	; 63
    6dca:	ed bf       	out	0x3d, r30	; 61
    6dcc:	82 30       	cpi	r24, 0x02	; 2
    6dce:	f0 f4       	brcc	.+60     	; 0x6e0c <_menu_printer+0x2ac>
			   sprintf_P(__buff,PSTR("%.2d"),__value[__num - 0x31]);
    6dd0:	00 d0       	rcall	.+0      	; 0x6dd2 <_menu_printer+0x272>
    6dd2:	00 d0       	rcall	.+0      	; 0x6dd4 <_menu_printer+0x274>
    6dd4:	00 d0       	rcall	.+0      	; 0x6dd6 <_menu_printer+0x276>
    6dd6:	ad b7       	in	r26, 0x3d	; 61
    6dd8:	be b7       	in	r27, 0x3e	; 62
    6dda:	11 96       	adiw	r26, 0x01	; 1
    6ddc:	ed b7       	in	r30, 0x3d	; 61
    6dde:	fe b7       	in	r31, 0x3e	; 62
    6de0:	12 83       	std	Z+2, r17	; 0x02
    6de2:	01 83       	std	Z+1, r16	; 0x01
    6de4:	13 96       	adiw	r26, 0x03	; 3
    6de6:	9c 92       	st	X, r9
    6de8:	8e 92       	st	-X, r8
    6dea:	12 97       	sbiw	r26, 0x02	; 2
    6dec:	14 96       	adiw	r26, 0x04	; 4
    6dee:	4c 92       	st	X, r4
    6df0:	14 97       	sbiw	r26, 0x04	; 4
    6df2:	15 96       	adiw	r26, 0x05	; 5
    6df4:	1c 92       	st	X, r1
    6df6:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    6dfa:	2d b7       	in	r18, 0x3d	; 61
    6dfc:	3e b7       	in	r19, 0x3e	; 62
    6dfe:	2a 5f       	subi	r18, 0xFA	; 250
    6e00:	3f 4f       	sbci	r19, 0xFF	; 255
    6e02:	0f b6       	in	r0, 0x3f	; 63
    6e04:	f8 94       	cli
    6e06:	3e bf       	out	0x3e, r19	; 62
    6e08:	0f be       	out	0x3f, r0	; 63
    6e0a:	2d bf       	out	0x3d, r18	; 61
				//_f_punctuation(__buff, 0, 2, 0);

			lcd_print(__x, __y, __buff);
    6e0c:	87 2d       	mov	r24, r7
    6e0e:	66 2d       	mov	r22, r6
    6e10:	a8 01       	movw	r20, r16
    6e12:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
    6e16:	69 cf       	rjmp	.-302    	; 0x6cea <_menu_printer+0x18a>
		}
	}
}
    6e18:	2d 96       	adiw	r28, 0x0d	; 13
    6e1a:	0f b6       	in	r0, 0x3f	; 63
    6e1c:	f8 94       	cli
    6e1e:	de bf       	out	0x3e, r29	; 62
    6e20:	0f be       	out	0x3f, r0	; 63
    6e22:	cd bf       	out	0x3d, r28	; 61
    6e24:	cf 91       	pop	r28
    6e26:	df 91       	pop	r29
    6e28:	1f 91       	pop	r17
    6e2a:	0f 91       	pop	r16
    6e2c:	ff 90       	pop	r15
    6e2e:	ef 90       	pop	r14
    6e30:	df 90       	pop	r13
    6e32:	cf 90       	pop	r12
    6e34:	bf 90       	pop	r11
    6e36:	af 90       	pop	r10
    6e38:	9f 90       	pop	r9
    6e3a:	8f 90       	pop	r8
    6e3c:	7f 90       	pop	r7
    6e3e:	6f 90       	pop	r6
    6e40:	5f 90       	pop	r5
    6e42:	4f 90       	pop	r4
    6e44:	08 95       	ret

00006e46 <FSettingPrinter>:
char FSettingDatetime(){
     _menu_datetime();
     return MENU_DONE;
}
char FSettingPrinter(){
     _menu_printer();
    6e46:	0e 94 b0 35 	call	0x6b60	; 0x6b60 <_menu_printer>
	 return MENU_DONE;
}
    6e4a:	81 e0       	ldi	r24, 0x01	; 1
    6e4c:	08 95       	ret

00006e4e <_menu_host>:
			lcd_print(__x, __y, __buff);
		}
	}
}

void _menu_host(void){
    6e4e:	4f 92       	push	r4
    6e50:	5f 92       	push	r5
    6e52:	6f 92       	push	r6
    6e54:	7f 92       	push	r7
    6e56:	8f 92       	push	r8
    6e58:	9f 92       	push	r9
    6e5a:	af 92       	push	r10
    6e5c:	bf 92       	push	r11
    6e5e:	df 92       	push	r13
    6e60:	ef 92       	push	r14
    6e62:	ff 92       	push	r15
    6e64:	0f 93       	push	r16
    6e66:	1f 93       	push	r17
    6e68:	df 93       	push	r29
    6e6a:	cf 93       	push	r28
    6e6c:	cd b7       	in	r28, 0x3d	; 61
    6e6e:	de b7       	in	r29, 0x3e	; 62
    6e70:	6e 97       	sbiw	r28, 0x1e	; 30
    6e72:	0f b6       	in	r0, 0x3f	; 63
    6e74:	f8 94       	cli
    6e76:	de bf       	out	0x3e, r29	; 62
    6e78:	0f be       	out	0x3f, r0	; 63
    6e7a:	cd bf       	out	0x3d, r28	; 61
	char 			__value[4];
	unsigned char	__i, __x, __y, __key, __num, __buff[5];
	char lcdteks[20];
	char TermID;

	__value[0] = eeprom_read_byte(&DefPrintMoney);
    6e7c:	82 ec       	ldi	r24, 0xC2	; 194
    6e7e:	93 e0       	ldi	r25, 0x03	; 3
    6e80:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
    6e84:	89 83       	std	Y+1, r24	; 0x01
	__value[1] = eeprom_read_byte(&DefShowDateTime);
    6e86:	87 e3       	ldi	r24, 0x37	; 55
    6e88:	90 e0       	ldi	r25, 0x00	; 0
    6e8a:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
    6e8e:	8a 83       	std	Y+2, r24	; 0x02
	__value[2] = eeprom_read_byte(&DefNotifScreen);
    6e90:	88 e3       	ldi	r24, 0x38	; 56
    6e92:	90 e0       	ldi	r25, 0x00	; 0
    6e94:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
    6e98:	8b 83       	std	Y+3, r24	; 0x03
	TermID= eeprom_read_byte(&DefIFT_ID);
    6e9a:	80 e0       	ldi	r24, 0x00	; 0
    6e9c:	90 e0       	ldi	r25, 0x00	; 0
    6e9e:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
    6ea2:	d8 2e       	mov	r13, r24


	lcd_clear();_delay_ms(10);
    6ea4:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
    6ea8:	83 ec       	ldi	r24, 0xC3	; 195
    6eaa:	99 e0       	ldi	r25, 0x09	; 9
    6eac:	01 97       	sbiw	r24, 0x01	; 1
    6eae:	f1 f7       	brne	.-4      	; 0x6eac <_menu_host+0x5e>
    6eb0:	00 c0       	rjmp	.+0      	; 0x6eb2 <_menu_host+0x64>
    6eb2:	00 00       	nop
	lcd_printf(1, 1, PSTR("1)Money :"));
    6eb4:	81 e0       	ldi	r24, 0x01	; 1
    6eb6:	61 e0       	ldi	r22, 0x01	; 1
    6eb8:	40 e8       	ldi	r20, 0x80	; 128
    6eba:	5c e0       	ldi	r21, 0x0C	; 12
    6ebc:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
	lcd_printf(2, 1, PSTR("2)D/T   :"));
    6ec0:	82 e0       	ldi	r24, 0x02	; 2
    6ec2:	61 e0       	ldi	r22, 0x01	; 1
    6ec4:	46 e7       	ldi	r20, 0x76	; 118
    6ec6:	5c e0       	ldi	r21, 0x0C	; 12
    6ec8:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
	lcd_printf(3, 1, PSTR("3)Notif :     *)Exit"));
    6ecc:	83 e0       	ldi	r24, 0x03	; 3
    6ece:	61 e0       	ldi	r22, 0x01	; 1
    6ed0:	41 e6       	ldi	r20, 0x61	; 97
    6ed2:	5c e0       	ldi	r21, 0x0C	; 12
    6ed4:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
    sprintf_P(lcdteks,PSTR("4)TermID:%d "),TermID);
    6ed8:	00 d0       	rcall	.+0      	; 0x6eda <_menu_host+0x8c>
    6eda:	00 d0       	rcall	.+0      	; 0x6edc <_menu_host+0x8e>
    6edc:	00 d0       	rcall	.+0      	; 0x6ede <_menu_host+0x90>
    6ede:	ed b7       	in	r30, 0x3d	; 61
    6ee0:	fe b7       	in	r31, 0x3e	; 62
    6ee2:	31 96       	adiw	r30, 0x01	; 1
    6ee4:	8e 01       	movw	r16, r28
    6ee6:	06 5f       	subi	r16, 0xF6	; 246
    6ee8:	1f 4f       	sbci	r17, 0xFF	; 255
    6eea:	ad b7       	in	r26, 0x3d	; 61
    6eec:	be b7       	in	r27, 0x3e	; 62
    6eee:	12 96       	adiw	r26, 0x02	; 2
    6ef0:	1c 93       	st	X, r17
    6ef2:	0e 93       	st	-X, r16
    6ef4:	11 97       	sbiw	r26, 0x01	; 1
    6ef6:	84 e5       	ldi	r24, 0x54	; 84
    6ef8:	9c e0       	ldi	r25, 0x0C	; 12
    6efa:	93 83       	std	Z+3, r25	; 0x03
    6efc:	82 83       	std	Z+2, r24	; 0x02
    6efe:	d4 82       	std	Z+4, r13	; 0x04
    6f00:	15 82       	std	Z+5, r1	; 0x05
    6f02:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	lcd_print(4, 1,lcdteks);
    6f06:	ed b7       	in	r30, 0x3d	; 61
    6f08:	fe b7       	in	r31, 0x3e	; 62
    6f0a:	36 96       	adiw	r30, 0x06	; 6
    6f0c:	0f b6       	in	r0, 0x3f	; 63
    6f0e:	f8 94       	cli
    6f10:	fe bf       	out	0x3e, r31	; 62
    6f12:	0f be       	out	0x3f, r0	; 63
    6f14:	ed bf       	out	0x3d, r30	; 61
    6f16:	84 e0       	ldi	r24, 0x04	; 4
    6f18:	61 e0       	ldi	r22, 0x01	; 1
    6f1a:	a8 01       	movw	r20, r16
    6f1c:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
	lcd_printf(4, 15, PSTR("#)Save"));
    6f20:	84 e0       	ldi	r24, 0x04	; 4
    6f22:	6f e0       	ldi	r22, 0x0F	; 15
    6f24:	4d e4       	ldi	r20, 0x4D	; 77
    6f26:	5c e0       	ldi	r21, 0x0C	; 12
    6f28:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
    6f2c:	06 e9       	ldi	r16, 0x96	; 150
    6f2e:	12 e0       	ldi	r17, 0x02	; 2
    6f30:	7e 01       	movw	r14, r28
    6f32:	08 94       	sec
    6f34:	e1 1c       	adc	r14, r1
    6f36:	f1 1c       	adc	r15, r1

	for(__i = 0; __i < 3; __i++){
		__x = pgm_read_byte(&__hostloc[__i][0]);
		__y = pgm_read_byte(&__hostloc[__i][1]);
		sprintf_P(__buff,PSTR("%d"),__value[__i]);
    6f38:	f5 e0       	ldi	r31, 0x05	; 5
    6f3a:	af 2e       	mov	r10, r31
    6f3c:	b1 2c       	mov	r11, r1
    6f3e:	ac 0e       	add	r10, r28
    6f40:	bd 1e       	adc	r11, r29
    6f42:	ea e4       	ldi	r30, 0x4A	; 74
    6f44:	8e 2e       	mov	r8, r30
    6f46:	ec e0       	ldi	r30, 0x0C	; 12
    6f48:	9e 2e       	mov	r9, r30
    sprintf_P(lcdteks,PSTR("4)TermID:%d "),TermID);
	lcd_print(4, 1,lcdteks);
	lcd_printf(4, 15, PSTR("#)Save"));

	for(__i = 0; __i < 3; __i++){
		__x = pgm_read_byte(&__hostloc[__i][0]);
    6f4a:	f8 01       	movw	r30, r16
    6f4c:	64 90       	lpm	r6, Z+
		__y = pgm_read_byte(&__hostloc[__i][1]);
    6f4e:	31 96       	adiw	r30, 0x01	; 1
    6f50:	64 91       	lpm	r22, Z+
		sprintf_P(__buff,PSTR("%d"),__value[__i]);
    6f52:	d7 01       	movw	r26, r14
    6f54:	8d 91       	ld	r24, X+
    6f56:	7d 01       	movw	r14, r26
    6f58:	00 d0       	rcall	.+0      	; 0x6f5a <_menu_host+0x10c>
    6f5a:	00 d0       	rcall	.+0      	; 0x6f5c <_menu_host+0x10e>
    6f5c:	00 d0       	rcall	.+0      	; 0x6f5e <_menu_host+0x110>
    6f5e:	ad b7       	in	r26, 0x3d	; 61
    6f60:	be b7       	in	r27, 0x3e	; 62
    6f62:	11 96       	adiw	r26, 0x01	; 1
    6f64:	ed b7       	in	r30, 0x3d	; 61
    6f66:	fe b7       	in	r31, 0x3e	; 62
    6f68:	b2 82       	std	Z+2, r11	; 0x02
    6f6a:	a1 82       	std	Z+1, r10	; 0x01
    6f6c:	13 96       	adiw	r26, 0x03	; 3
    6f6e:	9c 92       	st	X, r9
    6f70:	8e 92       	st	-X, r8
    6f72:	12 97       	sbiw	r26, 0x02	; 2
    6f74:	14 96       	adiw	r26, 0x04	; 4
    6f76:	8c 93       	st	X, r24
    6f78:	14 97       	sbiw	r26, 0x04	; 4
    6f7a:	15 96       	adiw	r26, 0x05	; 5
    6f7c:	1c 92       	st	X, r1
    6f7e:	6e 8f       	std	Y+30, r22	; 0x1e
    6f80:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		//_f_inttostr(__buff, __value[__i]);
		lcd_print(__x, __y, __buff);
    6f84:	8d b7       	in	r24, 0x3d	; 61
    6f86:	9e b7       	in	r25, 0x3e	; 62
    6f88:	06 96       	adiw	r24, 0x06	; 6
    6f8a:	0f b6       	in	r0, 0x3f	; 63
    6f8c:	f8 94       	cli
    6f8e:	9e bf       	out	0x3e, r25	; 62
    6f90:	0f be       	out	0x3f, r0	; 63
    6f92:	8d bf       	out	0x3d, r24	; 61
    6f94:	86 2d       	mov	r24, r6
    6f96:	6e 8d       	ldd	r22, Y+30	; 0x1e
    6f98:	a5 01       	movw	r20, r10
    6f9a:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
    6f9e:	0e 5f       	subi	r16, 0xFE	; 254
    6fa0:	1f 4f       	sbci	r17, 0xFF	; 255
	lcd_printf(3, 1, PSTR("3)Notif :     *)Exit"));
    sprintf_P(lcdteks,PSTR("4)TermID:%d "),TermID);
	lcd_print(4, 1,lcdteks);
	lcd_printf(4, 15, PSTR("#)Save"));

	for(__i = 0; __i < 3; __i++){
    6fa2:	92 e0       	ldi	r25, 0x02	; 2
    6fa4:	0c 39       	cpi	r16, 0x9C	; 156
    6fa6:	19 07       	cpc	r17, r25
    6fa8:	81 f6       	brne	.-96     	; 0x6f4a <_menu_host+0xfc>
			lcd_print(__x, __y, __buff);
		}else
		if (__num=='4'){
		    if (TermID<=99)TermID++;
			else TermID=1;
	     sprintf_P(lcdteks,PSTR("4)TermID:%d "),TermID);
    6faa:	8e 01       	movw	r16, r28
    6fac:	06 5f       	subi	r16, 0xF6	; 246
    6fae:	1f 4f       	sbci	r17, 0xFF	; 255
    6fb0:	7a e3       	ldi	r23, 0x3A	; 58
    6fb2:	67 2e       	mov	r6, r23
    6fb4:	7c e0       	ldi	r23, 0x0C	; 12
    6fb6:	77 2e       	mov	r7, r23
			eeprom_write_byte(&DefNotifScreen, __value[2]);
			eeprom_write_byte(&DefIFT_ID,TermID);
			break;
		}
		if(__num >= 0x31 && __num <= 0x33){
			if(__value[__num - 0x31] == 1)
    6fb8:	7e 01       	movw	r14, r28
    6fba:	08 94       	sec
    6fbc:	e1 1c       	adc	r14, r1
    6fbe:	f1 1c       	adc	r15, r1
				__value[__num - 0x31] = 0;
			else
				__value[__num - 0x31]++;
			__x = pgm_read_byte(&__hostloc[__num - 0x31][0]);
			__y = pgm_read_byte(&__hostloc[__num - 0x31][1]);
			sprintf_P(__buff,PSTR("%d"),__value[__num - 0x31]);
    6fc0:	65 e0       	ldi	r22, 0x05	; 5
    6fc2:	a6 2e       	mov	r10, r22
    6fc4:	b1 2c       	mov	r11, r1
    6fc6:	ac 0e       	add	r10, r28
    6fc8:	bd 1e       	adc	r11, r29
    6fca:	57 e4       	ldi	r21, 0x47	; 71
    6fcc:	45 2e       	mov	r4, r21
    6fce:	5c e0       	ldi	r21, 0x0C	; 12
    6fd0:	55 2e       	mov	r5, r21
		//_f_inttostr(__buff, __value[__i]);
		lcd_print(__x, __y, __buff);
	}

	while(1){
		__key = _key_scan(1);
    6fd2:	81 e0       	ldi	r24, 0x01	; 1
    6fd4:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <_key_scan>
    6fd8:	98 2f       	mov	r25, r24
		__num = _key_btn(__key);
    6fda:	9e 8f       	std	Y+30, r25	; 0x1e
    6fdc:	0e 94 49 a3 	call	0x14692	; 0x14692 <_key_btn>

		if(__key == _KEY_CANCEL)
    6fe0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6fe2:	97 3e       	cpi	r25, 0xE7	; 231
    6fe4:	09 f4       	brne	.+2      	; 0x6fe8 <_menu_host+0x19a>
    6fe6:	90 c0       	rjmp	.+288    	; 0x7108 <_menu_host+0x2ba>
			return;
		if(__key==_KEY_ENTER){
    6fe8:	97 3b       	cpi	r25, 0xB7	; 183
    6fea:	a9 f4       	brne	.+42     	; 0x7016 <_menu_host+0x1c8>
			eeprom_write_byte(&DefPrintMoney, __value[0]);
    6fec:	82 ec       	ldi	r24, 0xC2	; 194
    6fee:	93 e0       	ldi	r25, 0x03	; 3
    6ff0:	69 81       	ldd	r22, Y+1	; 0x01
    6ff2:	0e 94 78 aa 	call	0x154f0	; 0x154f0 <__eewr_byte_m128>
			eeprom_write_byte(&DefShowDateTime, __value[1]);
    6ff6:	87 e3       	ldi	r24, 0x37	; 55
    6ff8:	90 e0       	ldi	r25, 0x00	; 0
    6ffa:	6a 81       	ldd	r22, Y+2	; 0x02
    6ffc:	0e 94 78 aa 	call	0x154f0	; 0x154f0 <__eewr_byte_m128>
			eeprom_write_byte(&DefNotifScreen, __value[2]);
    7000:	88 e3       	ldi	r24, 0x38	; 56
    7002:	90 e0       	ldi	r25, 0x00	; 0
    7004:	6b 81       	ldd	r22, Y+3	; 0x03
    7006:	0e 94 78 aa 	call	0x154f0	; 0x154f0 <__eewr_byte_m128>
			eeprom_write_byte(&DefIFT_ID,TermID);
    700a:	80 e0       	ldi	r24, 0x00	; 0
    700c:	90 e0       	ldi	r25, 0x00	; 0
    700e:	6d 2d       	mov	r22, r13
    7010:	0e 94 78 aa 	call	0x154f0	; 0x154f0 <__eewr_byte_m128>
    7014:	79 c0       	rjmp	.+242    	; 0x7108 <_menu_host+0x2ba>
			break;
		}
		if(__num >= 0x31 && __num <= 0x33){
    7016:	98 2f       	mov	r25, r24
    7018:	91 53       	subi	r25, 0x31	; 49
    701a:	93 30       	cpi	r25, 0x03	; 3
    701c:	08 f0       	brcs	.+2      	; 0x7020 <_menu_host+0x1d2>
    701e:	44 c0       	rjmp	.+136    	; 0x70a8 <_menu_host+0x25a>
			if(__value[__num - 0x31] == 1)
    7020:	28 2f       	mov	r18, r24
    7022:	30 e0       	ldi	r19, 0x00	; 0
    7024:	21 53       	subi	r18, 0x31	; 49
    7026:	30 40       	sbci	r19, 0x00	; 0
    7028:	f7 01       	movw	r30, r14
    702a:	e2 0f       	add	r30, r18
    702c:	f3 1f       	adc	r31, r19
    702e:	90 81       	ld	r25, Z
    7030:	91 30       	cpi	r25, 0x01	; 1
    7032:	11 f4       	brne	.+4      	; 0x7038 <_menu_host+0x1ea>
				__value[__num - 0x31] = 0;
    7034:	10 82       	st	Z, r1
    7036:	02 c0       	rjmp	.+4      	; 0x703c <_menu_host+0x1ee>
			else
				__value[__num - 0x31]++;
    7038:	9f 5f       	subi	r25, 0xFF	; 255
    703a:	90 83       	st	Z, r25
			__x = pgm_read_byte(&__hostloc[__num - 0x31][0]);
    703c:	68 2f       	mov	r22, r24
    703e:	70 e0       	ldi	r23, 0x00	; 0
    7040:	61 53       	subi	r22, 0x31	; 49
    7042:	70 40       	sbci	r23, 0x00	; 0
    7044:	66 0f       	add	r22, r22
    7046:	77 1f       	adc	r23, r23
    7048:	fb 01       	movw	r30, r22
    704a:	ea 56       	subi	r30, 0x6A	; 106
    704c:	fd 4f       	sbci	r31, 0xFD	; 253
    704e:	84 90       	lpm	r8, Z+
			__y = pgm_read_byte(&__hostloc[__num - 0x31][1]);
    7050:	69 56       	subi	r22, 0x69	; 105
    7052:	7d 4f       	sbci	r23, 0xFD	; 253
    7054:	fb 01       	movw	r30, r22
    7056:	64 91       	lpm	r22, Z+
			sprintf_P(__buff,PSTR("%d"),__value[__num - 0x31]);
    7058:	00 d0       	rcall	.+0      	; 0x705a <_menu_host+0x20c>
    705a:	00 d0       	rcall	.+0      	; 0x705c <_menu_host+0x20e>
    705c:	00 d0       	rcall	.+0      	; 0x705e <_menu_host+0x210>
    705e:	ad b7       	in	r26, 0x3d	; 61
    7060:	be b7       	in	r27, 0x3e	; 62
    7062:	11 96       	adiw	r26, 0x01	; 1
    7064:	ed b7       	in	r30, 0x3d	; 61
    7066:	fe b7       	in	r31, 0x3e	; 62
    7068:	b2 82       	std	Z+2, r11	; 0x02
    706a:	a1 82       	std	Z+1, r10	; 0x01
    706c:	13 96       	adiw	r26, 0x03	; 3
    706e:	5c 92       	st	X, r5
    7070:	4e 92       	st	-X, r4
    7072:	12 97       	sbiw	r26, 0x02	; 2
    7074:	2e 0d       	add	r18, r14
    7076:	3f 1d       	adc	r19, r15
    7078:	f9 01       	movw	r30, r18
    707a:	80 81       	ld	r24, Z
    707c:	14 96       	adiw	r26, 0x04	; 4
    707e:	8c 93       	st	X, r24
    7080:	14 97       	sbiw	r26, 0x04	; 4
    7082:	15 96       	adiw	r26, 0x05	; 5
    7084:	1c 92       	st	X, r1
    7086:	6e 8f       	std	Y+30, r22	; 0x1e
    7088:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
			//_f_inttostr(__buff, __value[__num - 0x31]);
			lcd_print(__x, __y, __buff);
    708c:	8d b7       	in	r24, 0x3d	; 61
    708e:	9e b7       	in	r25, 0x3e	; 62
    7090:	06 96       	adiw	r24, 0x06	; 6
    7092:	0f b6       	in	r0, 0x3f	; 63
    7094:	f8 94       	cli
    7096:	9e bf       	out	0x3e, r25	; 62
    7098:	0f be       	out	0x3f, r0	; 63
    709a:	8d bf       	out	0x3d, r24	; 61
    709c:	88 2d       	mov	r24, r8
    709e:	6e 8d       	ldd	r22, Y+30	; 0x1e
    70a0:	a5 01       	movw	r20, r10
    70a2:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
    70a6:	95 cf       	rjmp	.-214    	; 0x6fd2 <_menu_host+0x184>
		}else
		if (__num=='4'){
    70a8:	84 33       	cpi	r24, 0x34	; 52
    70aa:	09 f0       	breq	.+2      	; 0x70ae <_menu_host+0x260>
    70ac:	92 cf       	rjmp	.-220    	; 0x6fd2 <_menu_host+0x184>
		    if (TermID<=99)TermID++;
    70ae:	9d 2d       	mov	r25, r13
    70b0:	94 36       	cpi	r25, 0x64	; 100
    70b2:	10 f4       	brcc	.+4      	; 0x70b8 <_menu_host+0x26a>
    70b4:	d3 94       	inc	r13
    70b6:	02 c0       	rjmp	.+4      	; 0x70bc <_menu_host+0x26e>
			else TermID=1;
    70b8:	dd 24       	eor	r13, r13
    70ba:	d3 94       	inc	r13
	     sprintf_P(lcdteks,PSTR("4)TermID:%d "),TermID);
    70bc:	00 d0       	rcall	.+0      	; 0x70be <_menu_host+0x270>
    70be:	00 d0       	rcall	.+0      	; 0x70c0 <_menu_host+0x272>
    70c0:	00 d0       	rcall	.+0      	; 0x70c2 <_menu_host+0x274>
    70c2:	ed b7       	in	r30, 0x3d	; 61
    70c4:	fe b7       	in	r31, 0x3e	; 62
    70c6:	31 96       	adiw	r30, 0x01	; 1
    70c8:	ad b7       	in	r26, 0x3d	; 61
    70ca:	be b7       	in	r27, 0x3e	; 62
    70cc:	12 96       	adiw	r26, 0x02	; 2
    70ce:	1c 93       	st	X, r17
    70d0:	0e 93       	st	-X, r16
    70d2:	11 97       	sbiw	r26, 0x01	; 1
    70d4:	73 82       	std	Z+3, r7	; 0x03
    70d6:	62 82       	std	Z+2, r6	; 0x02
    70d8:	d4 82       	std	Z+4, r13	; 0x04
    70da:	15 82       	std	Z+5, r1	; 0x05
    70dc:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		 lcd_print(4, 1,lcdteks);lcd_printf(4, 15, PSTR("#)Save"));
    70e0:	ed b7       	in	r30, 0x3d	; 61
    70e2:	fe b7       	in	r31, 0x3e	; 62
    70e4:	36 96       	adiw	r30, 0x06	; 6
    70e6:	0f b6       	in	r0, 0x3f	; 63
    70e8:	f8 94       	cli
    70ea:	fe bf       	out	0x3e, r31	; 62
    70ec:	0f be       	out	0x3f, r0	; 63
    70ee:	ed bf       	out	0x3d, r30	; 61
    70f0:	84 e0       	ldi	r24, 0x04	; 4
    70f2:	61 e0       	ldi	r22, 0x01	; 1
    70f4:	a8 01       	movw	r20, r16
    70f6:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
    70fa:	84 e0       	ldi	r24, 0x04	; 4
    70fc:	6f e0       	ldi	r22, 0x0F	; 15
    70fe:	43 e3       	ldi	r20, 0x33	; 51
    7100:	5c e0       	ldi	r21, 0x0C	; 12
    7102:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
    7106:	65 cf       	rjmp	.-310    	; 0x6fd2 <_menu_host+0x184>
		 
		}

	}
}
    7108:	6e 96       	adiw	r28, 0x1e	; 30
    710a:	0f b6       	in	r0, 0x3f	; 63
    710c:	f8 94       	cli
    710e:	de bf       	out	0x3e, r29	; 62
    7110:	0f be       	out	0x3f, r0	; 63
    7112:	cd bf       	out	0x3d, r28	; 61
    7114:	cf 91       	pop	r28
    7116:	df 91       	pop	r29
    7118:	1f 91       	pop	r17
    711a:	0f 91       	pop	r16
    711c:	ff 90       	pop	r15
    711e:	ef 90       	pop	r14
    7120:	df 90       	pop	r13
    7122:	bf 90       	pop	r11
    7124:	af 90       	pop	r10
    7126:	9f 90       	pop	r9
    7128:	8f 90       	pop	r8
    712a:	7f 90       	pop	r7
    712c:	6f 90       	pop	r6
    712e:	5f 90       	pop	r5
    7130:	4f 90       	pop	r4
    7132:	08 95       	ret

00007134 <FSettingHost>:
char FSettingPrinter(){
     _menu_printer();
	 return MENU_DONE;
}
char FSettingHost(){
     _menu_host();
    7134:	0e 94 27 37 	call	0x6e4e	; 0x6e4e <_menu_host>
	 return MENU_DONE;
}
    7138:	81 e0       	ldi	r24, 0x01	; 1
    713a:	08 95       	ret

0000713c <zeroIP>:
		 
		}

	}
}
void zeroIP(unsigned char Val,char *StrResult){
    713c:	28 2f       	mov	r18, r24
    713e:	fb 01       	movw	r30, r22
     unsigned char R,P,S;
	 if (Val>=100){
    7140:	84 36       	cpi	r24, 0x64	; 100
    7142:	d0 f0       	brcs	.+52     	; 0x7178 <zeroIP+0x3c>
	    R=(Val/100);
    7144:	64 e6       	ldi	r22, 0x64	; 100
    7146:	0e 94 7e a7 	call	0x14efc	; 0x14efc <__udivmodqi4>
    714a:	38 2f       	mov	r19, r24
    714c:	89 2f       	mov	r24, r25
        P=((Val%100)/10);
    714e:	6a e0       	ldi	r22, 0x0A	; 10
    7150:	0e 94 7e a7 	call	0x14efc	; 0x14efc <__udivmodqi4>
		S=Val-((R*100)+(P*10)); 
        StrResult[0]='0'+R;//+(Val/100);
    7154:	93 2f       	mov	r25, r19
    7156:	90 5d       	subi	r25, 0xD0	; 208
    7158:	90 83       	st	Z, r25
	    StrResult[1]='0'+P;//+((Val%100)/10);
    715a:	98 2f       	mov	r25, r24
    715c:	90 5d       	subi	r25, 0xD0	; 208
    715e:	91 83       	std	Z+1, r25	; 0x01
void zeroIP(unsigned char Val,char *StrResult){
     unsigned char R,P,S;
	 if (Val>=100){
	    R=(Val/100);
        P=((Val%100)/10);
		S=Val-((R*100)+(P*10)); 
    7160:	20 5d       	subi	r18, 0xD0	; 208
    7162:	9c e9       	ldi	r25, 0x9C	; 156
    7164:	39 9f       	mul	r19, r25
    7166:	30 2d       	mov	r19, r0
    7168:	11 24       	eor	r1, r1
    716a:	23 0f       	add	r18, r19
    716c:	96 ef       	ldi	r25, 0xF6	; 246
    716e:	89 9f       	mul	r24, r25
    7170:	80 2d       	mov	r24, r0
    7172:	11 24       	eor	r1, r1
        StrResult[0]='0'+R;//+(Val/100);
	    StrResult[1]='0'+P;//+((Val%100)/10);
		StrResult[2]='0'+S;//+(Val-((Val/100)*100)-((Val%100)/10));
    7174:	28 0f       	add	r18, r24
    7176:	12 c0       	rjmp	.+36     	; 0x719c <zeroIP+0x60>
		StrResult[3]=0;
		}else     
	 if ((Val>=10)&&(Val<100)){
    7178:	8a 50       	subi	r24, 0x0A	; 10
    717a:	8a 35       	cpi	r24, 0x5A	; 90
    717c:	58 f4       	brcc	.+22     	; 0x7194 <zeroIP+0x58>
        StrResult[0]='0';
    717e:	80 e3       	ldi	r24, 0x30	; 48
    7180:	80 83       	st	Z, r24
	    StrResult[1]=('0'+(Val/10));
    7182:	82 2f       	mov	r24, r18
    7184:	6a e0       	ldi	r22, 0x0A	; 10
    7186:	0e 94 7e a7 	call	0x14efc	; 0x14efc <__udivmodqi4>
    718a:	80 5d       	subi	r24, 0xD0	; 208
    718c:	81 83       	std	Z+1, r24	; 0x01
		StrResult[2]=('0'+(Val%10));
    718e:	90 5d       	subi	r25, 0xD0	; 208
    7190:	92 83       	std	Z+2, r25	; 0x02
    7192:	05 c0       	rjmp	.+10     	; 0x719e <zeroIP+0x62>
		StrResult[3]=0;
		}
     else
	 if (Val<10){
	    StrResult[0]='0';
    7194:	80 e3       	ldi	r24, 0x30	; 48
    7196:	80 83       	st	Z, r24
		StrResult[1]='0';
    7198:	81 83       	std	Z+1, r24	; 0x01
	    StrResult[2]='0'+Val;
    719a:	20 5d       	subi	r18, 0xD0	; 208
    719c:	22 83       	std	Z+2, r18	; 0x02
	    StrResult[3]=0;
    719e:	13 82       	std	Z+3, r1	; 0x03
    71a0:	08 95       	ret

000071a2 <clearString>:
	     break;
	}
  return Result;
}

void clearString(char *str){
    71a2:	cf 93       	push	r28
    71a4:	df 93       	push	r29
     int i;
	 for(i=0;i<strlen(str);i++){
    71a6:	28 2f       	mov	r18, r24
    71a8:	39 2f       	mov	r19, r25
    71aa:	e9 01       	movw	r28, r18
    71ac:	20 e0       	ldi	r18, 0x00	; 0
    71ae:	30 e0       	ldi	r19, 0x00	; 0
    71b0:	03 c0       	rjmp	.+6      	; 0x71b8 <clearString+0x16>
	    str[i]=0;
    71b2:	19 92       	st	Y+, r1
  return Result;
}

void clearString(char *str){
     int i;
	 for(i=0;i<strlen(str);i++){
    71b4:	2f 5f       	subi	r18, 0xFF	; 255
    71b6:	3f 4f       	sbci	r19, 0xFF	; 255
    71b8:	fc 01       	movw	r30, r24
    71ba:	01 90       	ld	r0, Z+
    71bc:	00 20       	and	r0, r0
    71be:	e9 f7       	brne	.-6      	; 0x71ba <clearString+0x18>
    71c0:	31 97       	sbiw	r30, 0x01	; 1
    71c2:	e8 1b       	sub	r30, r24
    71c4:	f9 0b       	sbc	r31, r25
    71c6:	2e 17       	cp	r18, r30
    71c8:	3f 07       	cpc	r19, r31
    71ca:	98 f3       	brcs	.-26     	; 0x71b2 <clearString+0x10>
	    str[i]=0;
	 }
}
    71cc:	df 91       	pop	r29
    71ce:	cf 91       	pop	r28
    71d0:	08 95       	ret

000071d2 <GetLocAccStatus>:


char GetLocAccStatus(char paramMessage57){
     char Result;
	 Result=LA_NONE;
     if (paramMessage57==MSG57_INVALID)Result=LA_INVALID;
    71d2:	81 30       	cpi	r24, 0x01	; 1
    71d4:	31 f0       	breq	.+12     	; 0x71e2 <GetLocAccStatus+0x10>
	 else
     if (paramMessage57==MSG57_VALID)Result=LA_VALID;
    71d6:	82 30       	cpi	r24, 0x02	; 2
    71d8:	31 f0       	breq	.+12     	; 0x71e6 <GetLocAccStatus+0x14>
	 else
     if (paramMessage57==MSG57_LIMITED)Result=LA_LIMITED;
    71da:	83 30       	cpi	r24, 0x03	; 3
    71dc:	31 f0       	breq	.+12     	; 0x71ea <GetLocAccStatus+0x18>



char GetLocAccStatus(char paramMessage57){
     char Result;
	 Result=LA_NONE;
    71de:	80 e0       	ldi	r24, 0x00	; 0
    71e0:	08 95       	ret
     if (paramMessage57==MSG57_INVALID)Result=LA_INVALID;
    71e2:	81 e0       	ldi	r24, 0x01	; 1
    71e4:	08 95       	ret
	 else
     if (paramMessage57==MSG57_VALID)Result=LA_VALID;
    71e6:	82 e0       	ldi	r24, 0x02	; 2
    71e8:	08 95       	ret
	 else
     if (paramMessage57==MSG57_LIMITED)Result=LA_LIMITED;
    71ea:	83 e0       	ldi	r24, 0x03	; 3
	 return Result;
}
    71ec:	08 95       	ret

000071ee <RemSpaceLag>:
	 if (Spaced[0]==' ')Spaced[0]=0;
	 Spaced[strlen(Spaced)]=0;
}
*/
                                                      //012345678
void RemSpaceLag(char *Spaced){//Remove Space Character 1234SSSSS L=9 i=0 i=7
    71ee:	ef 92       	push	r14
    71f0:	ff 92       	push	r15
    71f2:	0f 93       	push	r16
    71f4:	1f 93       	push	r17
    71f6:	cf 93       	push	r28
    71f8:	df 93       	push	r29
    71fa:	fc 01       	movw	r30, r24
unsigned char i=0,Length=0,PosSpaced=0;
     Length=strlen(Spaced);
    71fc:	ec 01       	movw	r28, r24
    71fe:	09 90       	ld	r0, Y+
    7200:	00 20       	and	r0, r0
    7202:	e9 f7       	brne	.-6      	; 0x71fe <RemSpaceLag+0x10>
    7204:	21 97       	sbiw	r28, 0x01	; 1
    7206:	7e 01       	movw	r14, r28
    7208:	e8 1a       	sub	r14, r24
     for(i=0;i<(Length-1);i++){
    720a:	80 e0       	ldi	r24, 0x00	; 0
    720c:	90 e0       	ldi	r25, 0x00	; 0
	 Spaced[strlen(Spaced)]=0;
}
*/
                                                      //012345678
void RemSpaceLag(char *Spaced){//Remove Space Character 1234SSSSS L=9 i=0 i=7
unsigned char i=0,Length=0,PosSpaced=0;
    720e:	10 e0       	ldi	r17, 0x00	; 0
     Length=strlen(Spaced);
     for(i=0;i<(Length-1);i++){
    7210:	4e 2d       	mov	r20, r14
    7212:	50 e0       	ldi	r21, 0x00	; 0
    7214:	ba 01       	movw	r22, r20
    7216:	61 50       	subi	r22, 0x01	; 1
    7218:	70 40       	sbci	r23, 0x00	; 0
	 if (Spaced[0]==' ')Spaced[0]=0;
	 Spaced[strlen(Spaced)]=0;
}
*/
                                                      //012345678
void RemSpaceLag(char *Spaced){//Remove Space Character 1234SSSSS L=9 i=0 i=7
    721a:	0e 2d       	mov	r16, r14
    721c:	01 50       	subi	r16, 0x01	; 1
unsigned char i=0,Length=0,PosSpaced=0;
     Length=strlen(Spaced);
     for(i=0;i<(Length-1);i++){
    721e:	16 c0       	rjmp	.+44     	; 0x724c <RemSpaceLag+0x5e>
	     if ((Spaced[Length-i-2]==' ')&&(Spaced[Length-i-1]==' ')){
    7220:	da 01       	movw	r26, r20
    7222:	a2 1b       	sub	r26, r18
    7224:	b3 0b       	sbc	r27, r19
    7226:	9f 01       	movw	r18, r30
    7228:	2a 0f       	add	r18, r26
    722a:	3b 1f       	adc	r19, r27
    722c:	22 50       	subi	r18, 0x02	; 2
    722e:	30 40       	sbci	r19, 0x00	; 0
    7230:	e9 01       	movw	r28, r18
    7232:	28 81       	ld	r18, Y
    7234:	20 32       	cpi	r18, 0x20	; 32
    7236:	79 f4       	brne	.+30     	; 0x7256 <RemSpaceLag+0x68>
    7238:	11 97       	sbiw	r26, 0x01	; 1
    723a:	ae 0f       	add	r26, r30
    723c:	bf 1f       	adc	r27, r31
    723e:	01 96       	adiw	r24, 0x01	; 1
    7240:	2c 91       	ld	r18, X
    7242:	20 32       	cpi	r18, 0x20	; 32
    7244:	41 f4       	brne	.+16     	; 0x7256 <RemSpaceLag+0x68>
		      Spaced[Length-i-1]=0;
    7246:	1c 92       	st	X, r1
    7248:	10 2f       	mov	r17, r16
    724a:	18 1b       	sub	r17, r24
*/
                                                      //012345678
void RemSpaceLag(char *Spaced){//Remove Space Character 1234SSSSS L=9 i=0 i=7
unsigned char i=0,Length=0,PosSpaced=0;
     Length=strlen(Spaced);
     for(i=0;i<(Length-1);i++){
    724c:	28 2f       	mov	r18, r24
    724e:	30 e0       	ldi	r19, 0x00	; 0
    7250:	26 17       	cp	r18, r22
    7252:	37 07       	cpc	r19, r23
    7254:	2c f3       	brlt	.-54     	; 0x7220 <RemSpaceLag+0x32>
		      Spaced[Length-i-1]=0;
			  PosSpaced=Length-i-2;
			  }
         else break;
	 }
	 if (Spaced[PosSpaced]==' ')Spaced[PosSpaced]=0;
    7256:	df 01       	movw	r26, r30
    7258:	a1 0f       	add	r26, r17
    725a:	b1 1d       	adc	r27, r1
    725c:	8c 91       	ld	r24, X
    725e:	80 32       	cpi	r24, 0x20	; 32
    7260:	09 f4       	brne	.+2      	; 0x7264 <RemSpaceLag+0x76>
    7262:	1c 92       	st	X, r1
	 if (Spaced[0]==' ')Spaced[0]=0;
    7264:	80 81       	ld	r24, Z
    7266:	80 32       	cpi	r24, 0x20	; 32
    7268:	09 f4       	brne	.+2      	; 0x726c <RemSpaceLag+0x7e>
    726a:	10 82       	st	Z, r1
	 Spaced[strlen(Spaced)]=0;
    726c:	ee 2e       	mov	r14, r30
    726e:	e7 01       	movw	r28, r14
    7270:	7e 01       	movw	r14, r28
    7272:	ff 2e       	mov	r15, r31
    7274:	d7 01       	movw	r26, r14
    7276:	0d 90       	ld	r0, X+
    7278:	00 20       	and	r0, r0
    727a:	e9 f7       	brne	.-6      	; 0x7276 <RemSpaceLag+0x88>
    727c:	11 97       	sbiw	r26, 0x01	; 1
    727e:	ae 19       	sub	r26, r14
    7280:	bf 09       	sbc	r27, r15
    7282:	ae 0f       	add	r26, r30
    7284:	bf 1f       	adc	r27, r31
    7286:	1c 92       	st	X, r1
}
    7288:	df 91       	pop	r29
    728a:	cf 91       	pop	r28
    728c:	1f 91       	pop	r17
    728e:	0f 91       	pop	r16
    7290:	ff 90       	pop	r15
    7292:	ef 90       	pop	r14
    7294:	08 95       	ret

00007296 <RemSpaceLead>:

void RemSpaceLead(char *Zeroed){//Remove Space Character SSSSSS1234 12340234
    7296:	1f 93       	push	r17
unsigned char i=0,Length=0,ZeroPos=0,IsFound=False;;
     ZeroPos=0;Length=strlen(Zeroed);
    7298:	dc 01       	movw	r26, r24
    729a:	0d 90       	ld	r0, X+
    729c:	00 20       	and	r0, r0
    729e:	e9 f7       	brne	.-6      	; 0x729a <RemSpaceLead+0x4>
    72a0:	11 97       	sbiw	r26, 0x01	; 1
    72a2:	6a 2f       	mov	r22, r26
    72a4:	68 1b       	sub	r22, r24
	 if ((Length>1)&&(Zeroed[0]==' ')){
    72a6:	62 30       	cpi	r22, 0x02	; 2
    72a8:	d8 f1       	brcs	.+118    	; 0x7320 <RemSpaceLead+0x8a>
    72aa:	dc 01       	movw	r26, r24
    72ac:	2c 91       	ld	r18, X
    72ae:	20 32       	cpi	r18, 0x20	; 32
    72b0:	b9 f5       	brne	.+110    	; 0x7320 <RemSpaceLead+0x8a>
    72b2:	fc 01       	movw	r30, r24
    72b4:	40 e0       	ldi	r20, 0x00	; 0
    72b6:	20 e0       	ldi	r18, 0x00	; 0
    72b8:	30 e0       	ldi	r19, 0x00	; 0
	     for(i=0;i<Length;i++){
		     if ((Zeroed[i]==' ')&&(Zeroed[i+1]==' ')&&(IsFound==False)) ZeroPos++;
    72ba:	51 91       	ld	r21, Z+
    72bc:	50 32       	cpi	r21, 0x20	; 32
    72be:	41 f4       	brne	.+16     	; 0x72d0 <RemSpaceLead+0x3a>
    72c0:	50 81       	ld	r21, Z
    72c2:	50 32       	cpi	r21, 0x20	; 32
    72c4:	21 f4       	brne	.+8      	; 0x72ce <RemSpaceLead+0x38>
    72c6:	44 23       	and	r20, r20
    72c8:	19 f4       	brne	.+6      	; 0x72d0 <RemSpaceLead+0x3a>
    72ca:	2f 5f       	subi	r18, 0xFF	; 255
    72cc:	01 c0       	rjmp	.+2      	; 0x72d0 <RemSpaceLead+0x3a>
	         if((Zeroed[i]==' ')&&(Zeroed[i+1]!=' '))IsFound=True;
    72ce:	41 e0       	ldi	r20, 0x01	; 1

void RemSpaceLead(char *Zeroed){//Remove Space Character SSSSSS1234 12340234
unsigned char i=0,Length=0,ZeroPos=0,IsFound=False;;
     ZeroPos=0;Length=strlen(Zeroed);
	 if ((Length>1)&&(Zeroed[0]==' ')){
	     for(i=0;i<Length;i++){
    72d0:	3f 5f       	subi	r19, 0xFF	; 255
    72d2:	36 17       	cp	r19, r22
    72d4:	90 f3       	brcs	.-28     	; 0x72ba <RemSpaceLead+0x24>
		     if ((Zeroed[i]==' ')&&(Zeroed[i+1]==' ')&&(IsFound==False)) ZeroPos++;
	         if((Zeroed[i]==' ')&&(Zeroed[i+1]!=' '))IsFound=True;
		 }ZeroPos++;
    72d6:	12 2f       	mov	r17, r18
    72d8:	1f 5f       	subi	r17, 0xFF	; 255
	     for(i=0;i<strlen(Zeroed);i++){
    72da:	70 e0       	ldi	r23, 0x00	; 0
		     Zeroed[i]=Zeroed[i+ZeroPos];
    72dc:	41 2f       	mov	r20, r17
    72de:	50 e0       	ldi	r21, 0x00	; 0
	 if ((Length>1)&&(Zeroed[0]==' ')){
	     for(i=0;i<Length;i++){
		     if ((Zeroed[i]==' ')&&(Zeroed[i+1]==' ')&&(IsFound==False)) ZeroPos++;
	         if((Zeroed[i]==' ')&&(Zeroed[i+1]!=' '))IsFound=True;
		 }ZeroPos++;
	     for(i=0;i<strlen(Zeroed);i++){
    72e0:	09 c0       	rjmp	.+18     	; 0x72f4 <RemSpaceLead+0x5e>
		     Zeroed[i]=Zeroed[i+ZeroPos];
    72e2:	28 0f       	add	r18, r24
    72e4:	39 1f       	adc	r19, r25
    72e6:	f9 01       	movw	r30, r18
    72e8:	e4 0f       	add	r30, r20
    72ea:	f5 1f       	adc	r31, r21
    72ec:	e0 81       	ld	r30, Z
    72ee:	d9 01       	movw	r26, r18
    72f0:	ec 93       	st	X, r30
	 if ((Length>1)&&(Zeroed[0]==' ')){
	     for(i=0;i<Length;i++){
		     if ((Zeroed[i]==' ')&&(Zeroed[i+1]==' ')&&(IsFound==False)) ZeroPos++;
	         if((Zeroed[i]==' ')&&(Zeroed[i+1]!=' '))IsFound=True;
		 }ZeroPos++;
	     for(i=0;i<strlen(Zeroed);i++){
    72f2:	7f 5f       	subi	r23, 0xFF	; 255
    72f4:	27 2f       	mov	r18, r23
    72f6:	30 e0       	ldi	r19, 0x00	; 0
    72f8:	fc 01       	movw	r30, r24
    72fa:	01 90       	ld	r0, Z+
    72fc:	00 20       	and	r0, r0
    72fe:	e9 f7       	brne	.-6      	; 0x72fa <RemSpaceLead+0x64>
    7300:	31 97       	sbiw	r30, 0x01	; 1
    7302:	e8 1b       	sub	r30, r24
    7304:	f9 0b       	sbc	r31, r25
    7306:	2e 17       	cp	r18, r30
    7308:	3f 07       	cpc	r19, r31
    730a:	58 f3       	brcs	.-42     	; 0x72e2 <RemSpaceLead+0x4c>
		     Zeroed[i]=Zeroed[i+ZeroPos];
		 }
		 //Clearence
		 for(i=(Length-ZeroPos);i<Length;i++){
    730c:	26 2f       	mov	r18, r22
    730e:	21 1b       	sub	r18, r17
    7310:	05 c0       	rjmp	.+10     	; 0x731c <RemSpaceLead+0x86>
		     Zeroed[i]=0;
    7312:	fc 01       	movw	r30, r24
    7314:	e2 0f       	add	r30, r18
    7316:	f1 1d       	adc	r31, r1
    7318:	10 82       	st	Z, r1
		 }ZeroPos++;
	     for(i=0;i<strlen(Zeroed);i++){
		     Zeroed[i]=Zeroed[i+ZeroPos];
		 }
		 //Clearence
		 for(i=(Length-ZeroPos);i<Length;i++){
    731a:	2f 5f       	subi	r18, 0xFF	; 255
    731c:	26 17       	cp	r18, r22
    731e:	c8 f3       	brcs	.-14     	; 0x7312 <RemSpaceLead+0x7c>
		     Zeroed[i]=0;
		 }
     }
}
    7320:	1f 91       	pop	r17
    7322:	08 95       	ret

00007324 <FTestRemZero>:
	     RemZeroLead(strTest);  
		 uart_print(0,1,strTest);

	while (1){};
  #endif
}
    7324:	08 95       	ret

00007326 <RemZeroLead>:

void RemZeroLead(char *Zeroed){//Remove Zero Character 00001004 000050000 0 
unsigned char i=0,Length=0,ZeroPos=0,IsFound=False;;
     IsFound=False;
     ZeroPos=0;Length=strlen(Zeroed);
    7326:	dc 01       	movw	r26, r24
    7328:	0d 90       	ld	r0, X+
    732a:	00 20       	and	r0, r0
    732c:	e9 f7       	brne	.-6      	; 0x7328 <RemZeroLead+0x2>
    732e:	11 97       	sbiw	r26, 0x01	; 1
    7330:	a8 1b       	sub	r26, r24
  if ((Length>1)&&(Zeroed[0]=='0')){
    7332:	a2 30       	cpi	r26, 0x02	; 2
    7334:	b8 f1       	brcs	.+110    	; 0x73a4 <RemZeroLead+0x7e>
    7336:	fc 01       	movw	r30, r24
    7338:	20 81       	ld	r18, Z
    733a:	20 33       	cpi	r18, 0x30	; 48
    733c:	99 f5       	brne	.+102    	; 0x73a4 <RemZeroLead+0x7e>
    733e:	58 2f       	mov	r21, r24
    7340:	e8 2f       	mov	r30, r24
    7342:	f9 2f       	mov	r31, r25
    7344:	40 e0       	ldi	r20, 0x00	; 0
	 if (Zeroed[0]=='0'){
         for(i=0;i<Length;i++){//00000000->0
	         if ((Zeroed[i]=='0')&&(Zeroed[i+1]=='0')&&(IsFound==False)) ZeroPos++;
    7346:	21 91       	ld	r18, Z+
    7348:	20 33       	cpi	r18, 0x30	; 48
    734a:	49 f4       	brne	.+18     	; 0x735e <RemZeroLead+0x38>
    734c:	20 81       	ld	r18, Z
    734e:	20 33       	cpi	r18, 0x30	; 48
    7350:	31 f5       	brne	.+76     	; 0x739e <RemZeroLead+0x78>
    7352:	4f 5f       	subi	r20, 0xFF	; 255
    7354:	04 c0       	rjmp	.+8      	; 0x735e <RemZeroLead+0x38>
             if ((Zeroed[i]=='0')&&(Zeroed[i+1]!='0')){
			     if ((Zeroed[i+1]=='.')||(Zeroed[i+1]==','))ZeroPos--;
    7356:	2c 32       	cpi	r18, 0x2C	; 44
    7358:	39 f4       	brne	.+14     	; 0x7368 <RemZeroLead+0x42>
    735a:	41 50       	subi	r20, 0x01	; 1
    735c:	05 c0       	rjmp	.+10     	; 0x7368 <RemZeroLead+0x42>
unsigned char i=0,Length=0,ZeroPos=0,IsFound=False;;
     IsFound=False;
     ZeroPos=0;Length=strlen(Zeroed);
  if ((Length>1)&&(Zeroed[0]=='0')){
	 if (Zeroed[0]=='0'){
         for(i=0;i<Length;i++){//00000000->0
    735e:	2e 2f       	mov	r18, r30
    7360:	25 1b       	sub	r18, r21
    7362:	2a 17       	cp	r18, r26
    7364:	80 f3       	brcs	.-32     	; 0x7346 <RemZeroLead+0x20>
    7366:	01 c0       	rjmp	.+2      	; 0x736a <RemZeroLead+0x44>
		         IsFound=True;
			     break;			  
			     }
	      }

		  if (IsFound==True)ZeroPos++;
    7368:	4f 5f       	subi	r20, 0xFF	; 255
		  if (ZeroPos>=Length)ZeroPos=Length-1;
    736a:	4a 17       	cp	r20, r26
    736c:	10 f0       	brcs	.+4      	; 0x7372 <RemZeroLead+0x4c>
    736e:	4a 2f       	mov	r20, r26
    7370:	41 50       	subi	r20, 0x01	; 1
          for(i=0;i<(Length-ZeroPos);i++){
    7372:	60 e0       	ldi	r22, 0x00	; 0
    7374:	50 e0       	ldi	r21, 0x00	; 0
    7376:	2a 2f       	mov	r18, r26
    7378:	30 e0       	ldi	r19, 0x00	; 0
    737a:	24 1b       	sub	r18, r20
    737c:	35 0b       	sbc	r19, r21
    737e:	09 c0       	rjmp	.+18     	; 0x7392 <RemZeroLead+0x6c>
	          Zeroed[i]=Zeroed[i+ZeroPos];
    7380:	e8 0f       	add	r30, r24
    7382:	f9 1f       	adc	r31, r25
    7384:	df 01       	movw	r26, r30
    7386:	a4 0f       	add	r26, r20
    7388:	b5 1f       	adc	r27, r21
    738a:	7c 91       	ld	r23, X
    738c:	70 83       	st	Z, r23
		      Zeroed[i+1]=0;
    738e:	11 82       	std	Z+1, r1	; 0x01
			     }
	      }

		  if (IsFound==True)ZeroPos++;
		  if (ZeroPos>=Length)ZeroPos=Length-1;
          for(i=0;i<(Length-ZeroPos);i++){
    7390:	6f 5f       	subi	r22, 0xFF	; 255
    7392:	e6 2f       	mov	r30, r22
    7394:	f0 e0       	ldi	r31, 0x00	; 0
    7396:	e2 17       	cp	r30, r18
    7398:	f3 07       	cpc	r31, r19
    739a:	94 f3       	brlt	.-28     	; 0x7380 <RemZeroLead+0x5a>
    739c:	08 95       	ret
  if ((Length>1)&&(Zeroed[0]=='0')){
	 if (Zeroed[0]=='0'){
         for(i=0;i<Length;i++){//00000000->0
	         if ((Zeroed[i]=='0')&&(Zeroed[i+1]=='0')&&(IsFound==False)) ZeroPos++;
             if ((Zeroed[i]=='0')&&(Zeroed[i+1]!='0')){
			     if ((Zeroed[i+1]=='.')||(Zeroed[i+1]==','))ZeroPos--;
    739e:	2e 32       	cpi	r18, 0x2E	; 46
    73a0:	d1 f6       	brne	.-76     	; 0x7356 <RemZeroLead+0x30>
    73a2:	db cf       	rjmp	.-74     	; 0x735a <RemZeroLead+0x34>
    73a4:	08 95       	ret

000073a6 <UserInput>:
void ShowMessage(char *Message){//Display Message on Line3
     char i;
}


char UserInput(char TypeUI,char xPos, char yPos,char *strResult, unsigned int MaxValue, char MaxLength){
    73a6:	6f 92       	push	r6
    73a8:	7f 92       	push	r7
    73aa:	8f 92       	push	r8
    73ac:	9f 92       	push	r9
    73ae:	af 92       	push	r10
    73b0:	bf 92       	push	r11
    73b2:	cf 92       	push	r12
    73b4:	df 92       	push	r13
    73b6:	ef 92       	push	r14
    73b8:	ff 92       	push	r15
    73ba:	0f 93       	push	r16
    73bc:	1f 93       	push	r17
    73be:	df 93       	push	r29
    73c0:	cf 93       	push	r28
    73c2:	0f 92       	push	r0
    73c4:	cd b7       	in	r28, 0x3d	; 61
    73c6:	de b7       	in	r29, 0x3e	; 62
    73c8:	f8 2e       	mov	r15, r24
    73ca:	96 2e       	mov	r9, r22
    73cc:	d4 2e       	mov	r13, r20
    73ce:	39 01       	movw	r6, r18
	 static char iHit=0,IsShifted=False,IsSameKey=False,IsNextKey=False,IsNewKey=False,IsFirst=False;//,KeyByte=0;
	 static unsigned int iLoop=0,KeyTimeout;//,TimerPressed=0,NewKeyTimeout;
	        unsigned int NumbValue=0;
	 char KeyPressed=0,KeyChar=0,iDisp=0;
     Result=USER_NONE;
	 switch(stUserInput){// 100 ->199 500 90
    73d0:	90 91 5e 03 	lds	r25, 0x035E
    73d4:	92 30       	cpi	r25, 0x02	; 2
    73d6:	09 f4       	brne	.+2      	; 0x73da <UserInput+0x34>
    73d8:	2d c2       	rjmp	.+1114   	; 0x7834 <UserInput+0x48e>
    73da:	93 30       	cpi	r25, 0x03	; 3
    73dc:	30 f4       	brcc	.+12     	; 0x73ea <UserInput+0x44>
    73de:	99 23       	and	r25, r25
    73e0:	59 f0       	breq	.+22     	; 0x73f8 <UserInput+0x52>
    73e2:	91 30       	cpi	r25, 0x01	; 1
    73e4:	09 f0       	breq	.+2      	; 0x73e8 <UserInput+0x42>
    73e6:	f8 c2       	rjmp	.+1520   	; 0x79d8 <UserInput+0x632>
    73e8:	2c c0       	rjmp	.+88     	; 0x7442 <UserInput+0x9c>
    73ea:	93 30       	cpi	r25, 0x03	; 3
    73ec:	09 f4       	brne	.+2      	; 0x73f0 <UserInput+0x4a>
    73ee:	74 c2       	rjmp	.+1256   	; 0x78d8 <UserInput+0x532>
    73f0:	94 30       	cpi	r25, 0x04	; 4
    73f2:	09 f0       	breq	.+2      	; 0x73f6 <UserInput+0x50>
    73f4:	f1 c2       	rjmp	.+1506   	; 0x79d8 <UserInput+0x632>
    73f6:	eb c2       	rjmp	.+1494   	; 0x79ce <UserInput+0x628>
	 case uiInit:
	      iLoop=0;
    73f8:	10 92 50 03 	sts	0x0350, r1
    73fc:	10 92 4f 03 	sts	0x034F, r1
		  stUserInput=uiInput;
    7400:	81 e0       	ldi	r24, 0x01	; 1
    7402:	80 93 5e 03 	sts	0x035E, r24
		  xChar=xPos;yChar=yPos;
    7406:	60 93 5d 03 	sts	0x035D, r22
    740a:	40 93 5c 03 	sts	0x035C, r20
          iValuePos=0;
    740e:	10 92 5b 03 	sts	0x035B, r1
		  KeyTimeout=0;
    7412:	10 92 4e 03 	sts	0x034E, r1
    7416:	10 92 4d 03 	sts	0x034D, r1
		  IsSameKey=False;
    741a:	10 92 54 03 	sts	0x0354, r1
		  IsNextKey=False;
    741e:	10 92 53 03 	sts	0x0353, r1
		  IsNewKey=False;
    7422:	10 92 52 03 	sts	0x0352, r1
		  IsShifted=True;
    7426:	80 93 55 03 	sts	0x0355, r24
		  zKeyChar=' ';
    742a:	80 e2       	ldi	r24, 0x20	; 32
    742c:	80 93 5a 03 	sts	0x035A, r24
		  iHit=0;
    7430:	10 92 56 03 	sts	0x0356, r1
		  IsFirst=False;
    7434:	10 92 51 03 	sts	0x0351, r1
		  IsDelete=False;
    7438:	10 92 57 03 	sts	0x0357, r1
		  Result=USER_NO_DATA;
    743c:	15 e0       	ldi	r17, 0x05	; 5
    743e:	c1 2e       	mov	r12, r17
		  stUserInput=uiInput;
	      break;
    7440:	cc c2       	rjmp	.+1432   	; 0x79da <UserInput+0x634>
	 case uiInput:
	      KeyPressed=_key_scan(1);                  //  _  ABC DEF GHI JKL MNO PQRS TUV WXYZ
    7442:	81 e0       	ldi	r24, 0x01	; 1
    7444:	99 83       	std	Y+1, r25	; 0x01
    7446:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <_key_scan>
    744a:	88 2e       	mov	r8, r24
		  KeyChar= _key_btn(KeyPressed);            //  1   2   3   4   5   6   7    8   9
    744c:	0e 94 49 a3 	call	0x14692	; 0x14692 <_key_btn>
    7450:	c8 2e       	mov	r12, r24
		  if (KeyPressed==_KEY_SHIFT){
    7452:	99 81       	ldd	r25, Y+1	; 0x01
    7454:	28 2d       	mov	r18, r8
    7456:	2b 37       	cpi	r18, 0x7B	; 123
    7458:	59 f4       	brne	.+22     	; 0x7470 <UserInput+0xca>
		      if (IsShifted==False)IsShifted=True;
    745a:	80 91 55 03 	lds	r24, 0x0355
    745e:	88 23       	and	r24, r24
    7460:	19 f4       	brne	.+6      	; 0x7468 <UserInput+0xc2>
    7462:	90 93 55 03 	sts	0x0355, r25
    7466:	04 c0       	rjmp	.+8      	; 0x7470 <UserInput+0xca>
			  else
		      if (IsShifted==True)IsShifted=False;
    7468:	81 30       	cpi	r24, 0x01	; 1
    746a:	11 f4       	brne	.+4      	; 0x7470 <UserInput+0xca>
    746c:	10 92 55 03 	sts	0x0355, r1
			  }
          
		  if (IsSameKey==True){
    7470:	80 91 54 03 	lds	r24, 0x0354
    7474:	81 30       	cpi	r24, 0x01	; 1
    7476:	f1 f4       	brne	.+60     	; 0x74b4 <UserInput+0x10e>
		      KeyTimeout++;
    7478:	80 91 4d 03 	lds	r24, 0x034D
    747c:	90 91 4e 03 	lds	r25, 0x034E
    7480:	01 96       	adiw	r24, 0x01	; 1
    7482:	90 93 4e 03 	sts	0x034E, r25
    7486:	80 93 4d 03 	sts	0x034D, r24
              if (KeyTimeout>1000){
    748a:	e3 e0       	ldi	r30, 0x03	; 3
    748c:	89 3e       	cpi	r24, 0xE9	; 233
    748e:	9e 07       	cpc	r25, r30
    7490:	88 f0       	brcs	.+34     	; 0x74b4 <UserInput+0x10e>
			      if (TypeUI==UI_ALPHANUM_PASSWORD)lcd_put(xChar,yChar,'*');
    7492:	ff 2d       	mov	r31, r15
    7494:	f5 30       	cpi	r31, 0x05	; 5
    7496:	39 f4       	brne	.+14     	; 0x74a6 <UserInput+0x100>
    7498:	80 91 5d 03 	lds	r24, 0x035D
    749c:	60 91 5c 03 	lds	r22, 0x035C
    74a0:	4a e2       	ldi	r20, 0x2A	; 42
    74a2:	0e 94 c1 a2 	call	0x14582	; 0x14582 <lcd_put>

		          IsNextKey=True;
    74a6:	81 e0       	ldi	r24, 0x01	; 1
    74a8:	80 93 53 03 	sts	0x0353, r24
				  iLoop=0;
    74ac:	10 92 50 03 	sts	0x0350, r1
    74b0:	10 92 4f 03 	sts	0x034F, r1
			     }
              }
            
 
 		  //if (((KeyChar>='0')&&(KeyChar<='9')&&(iValuePos<=MaxLength))||(IsNextKey==True)){
		  if (((KeyChar>='0')&&(KeyChar<='9')&&(iValuePos<MaxLength))||(IsNextKey==True)){
    74b4:	8c 2d       	mov	r24, r12
    74b6:	80 53       	subi	r24, 0x30	; 48
    74b8:	8a 30       	cpi	r24, 0x0A	; 10
    74ba:	20 f4       	brcc	.+8      	; 0x74c4 <UserInput+0x11e>
    74bc:	80 91 5b 03 	lds	r24, 0x035B
    74c0:	8e 15       	cp	r24, r14
    74c2:	28 f0       	brcs	.+10     	; 0x74ce <UserInput+0x128>
    74c4:	80 91 53 03 	lds	r24, 0x0353
    74c8:	81 30       	cpi	r24, 0x01	; 1
    74ca:	09 f0       	breq	.+2      	; 0x74ce <UserInput+0x128>
    74cc:	bc c0       	rjmp	.+376    	; 0x7646 <UserInput+0x2a0>
    74ce:	83 e2       	ldi	r24, 0x23	; 35
    74d0:	94 ef       	ldi	r25, 0xF4	; 244
    74d2:	01 97       	sbiw	r24, 0x01	; 1
    74d4:	f1 f7       	brne	.-4      	; 0x74d2 <UserInput+0x12c>
    74d6:	00 c0       	rjmp	.+0      	; 0x74d8 <UserInput+0x132>
    74d8:	00 00       	nop
		       _delay_ms(250);
		       strResult[iValuePos]=KeyChar;
    74da:	80 91 5b 03 	lds	r24, 0x035B
    74de:	f3 01       	movw	r30, r6
    74e0:	e8 0f       	add	r30, r24
    74e2:	f1 1d       	adc	r31, r1
    74e4:	c0 82       	st	Z, r12
		       strResult[iValuePos+1]=0;
    74e6:	11 82       	std	Z+1, r1	; 0x01

			   if ((TypeUI==UI_NUMBER_R)||(TypeUI==UI_NUMBER_L)||(TypeUI==UI_NUM_PASSWORD)) 
    74e8:	8f 2d       	mov	r24, r15
    74ea:	81 50       	subi	r24, 0x01	; 1
    74ec:	82 30       	cpi	r24, 0x02	; 2
    74ee:	18 f0       	brcs	.+6      	; 0x74f6 <UserInput+0x150>
    74f0:	9f 2d       	mov	r25, r15
    74f2:	94 30       	cpi	r25, 0x04	; 4
    74f4:	31 f4       	brne	.+12     	; 0x7502 <UserInput+0x15c>
			        NumbValue=atoi(strResult);
    74f6:	c3 01       	movw	r24, r6
    74f8:	0e 94 e0 a7 	call	0x14fc0	; 0x14fc0 <atoi>
    74fc:	a8 2e       	mov	r10, r24
    74fe:	b9 2e       	mov	r11, r25
    7500:	02 c0       	rjmp	.+4      	; 0x7506 <UserInput+0x160>
			   else NumbValue=0;
    7502:	aa 24       	eor	r10, r10
    7504:	bb 24       	eor	r11, r11
				
			   if ((TypeUI==UI_ALPHANUM_R)||(TypeUI==UI_ALPHANUM_PASSWORD)){
    7506:	ef 2d       	mov	r30, r15
    7508:	e3 30       	cpi	r30, 0x03	; 3
    750a:	19 f0       	breq	.+6      	; 0x7512 <UserInput+0x16c>
    750c:	e5 30       	cpi	r30, 0x05	; 5
    750e:	09 f0       	breq	.+2      	; 0x7512 <UserInput+0x16c>
    7510:	61 c0       	rjmp	.+194    	; 0x75d4 <UserInput+0x22e>
			       if (KeyChar!=zKeyChar){
    7512:	e0 91 5a 03 	lds	r30, 0x035A
    7516:	ce 16       	cp	r12, r30
    7518:	71 f0       	breq	.+28     	; 0x7536 <UserInput+0x190>
					   IsSameKey=False;
    751a:	10 92 54 03 	sts	0x0354, r1
					   IsNewKey=True;
    751e:	81 e0       	ldi	r24, 0x01	; 1
    7520:	80 93 52 03 	sts	0x0352, r24
				       iHit=0;
    7524:	10 92 56 03 	sts	0x0356, r1
					   iLoop=1000;
    7528:	88 ee       	ldi	r24, 0xE8	; 232
    752a:	93 e0       	ldi	r25, 0x03	; 3
    752c:	90 93 50 03 	sts	0x0350, r25
    7530:	80 93 4f 03 	sts	0x034F, r24
    7534:	4f c0       	rjmp	.+158    	; 0x75d4 <UserInput+0x22e>
				   }
                   else{
				   if (IsNewKey==True){
    7536:	80 91 52 03 	lds	r24, 0x0352
    753a:	81 30       	cpi	r24, 0x01	; 1
    753c:	71 f4       	brne	.+28     	; 0x755a <UserInput+0x1b4>
					   IsNewKey=False;
    753e:	10 92 52 03 	sts	0x0352, r1
					   yChar--;
    7542:	80 91 5c 03 	lds	r24, 0x035C
    7546:	81 50       	subi	r24, 0x01	; 1
    7548:	80 93 5c 03 	sts	0x035C, r24
					   if (iValuePos>0) iValuePos--;
    754c:	80 91 5b 03 	lds	r24, 0x035B
    7550:	88 23       	and	r24, r24
    7552:	19 f0       	breq	.+6      	; 0x755a <UserInput+0x1b4>
    7554:	81 50       	subi	r24, 0x01	; 1
    7556:	80 93 5b 03 	sts	0x035B, r24
					   }
				   KeyTimeout=0;
    755a:	10 92 4e 03 	sts	0x034E, r1
    755e:	10 92 4d 03 	sts	0x034D, r1
				   IsSameKey=True;
    7562:	81 e0       	ldi	r24, 0x01	; 1
    7564:	80 93 54 03 	sts	0x0354, r24
				   if (iHit<pgm_read_byte(&MaxKeyHit[(zKeyChar-'0')])) 
    7568:	80 91 56 03 	lds	r24, 0x0356
    756c:	f0 e0       	ldi	r31, 0x00	; 0
    756e:	e4 59       	subi	r30, 0x94	; 148
    7570:	fd 4f       	sbci	r31, 0xFD	; 253
    7572:	e4 91       	lpm	r30, Z+
    7574:	8e 17       	cp	r24, r30
    7576:	20 f4       	brcc	.+8      	; 0x7580 <UserInput+0x1da>
				        iHit++;
    7578:	8f 5f       	subi	r24, 0xFF	; 255
    757a:	80 93 56 03 	sts	0x0356, r24
    757e:	02 c0       	rjmp	.+4      	; 0x7584 <UserInput+0x1de>
                   else iHit=0;
    7580:	10 92 56 03 	sts	0x0356, r1
				   iLoop=1000;
    7584:	88 ee       	ldi	r24, 0xE8	; 232
    7586:	93 e0       	ldi	r25, 0x03	; 3
    7588:	90 93 50 03 	sts	0x0350, r25
    758c:	80 93 4f 03 	sts	0x034F, r24

                   zAlphaChar=AlphaChar;
    7590:	80 91 58 03 	lds	r24, 0x0358
    7594:	80 93 59 03 	sts	0x0359, r24
			       AlphaChar=_table_alphanum(IsShifted,KeyPressed,iHit);			   
    7598:	80 91 55 03 	lds	r24, 0x0355
    759c:	68 2d       	mov	r22, r8
    759e:	40 91 56 03 	lds	r20, 0x0356
    75a2:	0e 94 c9 a3 	call	0x14792	; 0x14792 <_table_alphanum>
    75a6:	80 93 58 03 	sts	0x0358, r24
                   
				   if (IsNextKey==True){
    75aa:	80 91 53 03 	lds	r24, 0x0353
    75ae:	81 30       	cpi	r24, 0x01	; 1
    75b0:	41 f4       	brne	.+16     	; 0x75c2 <UserInput+0x21c>
                       AlphaChar=zAlphaChar;       
    75b2:	80 91 59 03 	lds	r24, 0x0359
    75b6:	80 93 58 03 	sts	0x0358, r24
					   IsNextKey=False;
    75ba:	10 92 53 03 	sts	0x0353, r1
					   IsSameKey=False;
    75be:	10 92 54 03 	sts	0x0354, r1
				   }   
				   strResult[iValuePos]=AlphaChar;
    75c2:	80 91 5b 03 	lds	r24, 0x035B
    75c6:	f3 01       	movw	r30, r6
    75c8:	e8 0f       	add	r30, r24
    75ca:	f1 1d       	adc	r31, r1
    75cc:	80 91 58 03 	lds	r24, 0x0358
    75d0:	80 83       	st	Z, r24
		           strResult[iValuePos+1]=0;
    75d2:	11 82       	std	Z+1, r1	; 0x01
				 }//endElse 
				 
			   }//EndAlphaNum

			 if (TypeUI==UI_NUMBER_L){
    75d4:	ff 2d       	mov	r31, r15
    75d6:	f2 30       	cpi	r31, 0x02	; 2
    75d8:	71 f4       	brne	.+28     	; 0x75f6 <UserInput+0x250>
			    if ((NumbValue<=MaxValue)||(MaxValue==0)){
    75da:	0a 15       	cp	r16, r10
    75dc:	1b 05       	cpc	r17, r11
    75de:	18 f4       	brcc	.+6      	; 0x75e6 <UserInput+0x240>
    75e0:	01 15       	cp	r16, r1
    75e2:	11 05       	cpc	r17, r1
    75e4:	59 f5       	brne	.+86     	; 0x763c <UserInput+0x296>
				     iValuePos++;
    75e6:	80 91 5b 03 	lds	r24, 0x035B
    75ea:	8f 5f       	subi	r24, 0xFF	; 255
    75ec:	80 93 5b 03 	sts	0x035B, r24
					 stUserInput=uiInputDisp;
    75f0:	83 e0       	ldi	r24, 0x03	; 3
    75f2:	80 93 5e 03 	sts	0x035E, r24
				} 
			 }
  
			   if ((NumbValue<=MaxValue)||(MaxValue==0)){
    75f6:	0a 15       	cp	r16, r10
    75f8:	1b 05       	cpc	r17, r11
    75fa:	18 f4       	brcc	.+6      	; 0x7602 <UserInput+0x25c>
    75fc:	01 15       	cp	r16, r1
    75fe:	11 05       	cpc	r17, r1
    7600:	e9 f4       	brne	.+58     	; 0x763c <UserInput+0x296>
			       if ((TypeUI==UI_NUMBER_R)||(TypeUI==UI_ALPHANUM_R)||
    7602:	2f 2d       	mov	r18, r15
    7604:	21 30       	cpi	r18, 0x01	; 1
    7606:	31 f0       	breq	.+12     	; 0x7614 <UserInput+0x26e>
    7608:	23 30       	cpi	r18, 0x03	; 3
    760a:	21 f0       	breq	.+8      	; 0x7614 <UserInput+0x26e>
    760c:	24 30       	cpi	r18, 0x04	; 4
    760e:	11 f0       	breq	.+4      	; 0x7614 <UserInput+0x26e>
				       (TypeUI==UI_NUM_PASSWORD)||(TypeUI==UI_ALPHANUM_PASSWORD)){
    7610:	25 30       	cpi	r18, 0x05	; 5
    7612:	a1 f4       	brne	.+40     	; 0x763c <UserInput+0x296>
				      if (IsSameKey==False){
    7614:	80 91 54 03 	lds	r24, 0x0354
    7618:	88 23       	and	r24, r24
    761a:	69 f4       	brne	.+26     	; 0x7636 <UserInput+0x290>
					      IsFirst=True;
    761c:	81 e0       	ldi	r24, 0x01	; 1
    761e:	80 93 51 03 	sts	0x0351, r24
					      iValuePos++;
    7622:	80 91 5b 03 	lds	r24, 0x035B
    7626:	8f 5f       	subi	r24, 0xFF	; 255
    7628:	80 93 5b 03 	sts	0x035B, r24
						  //FullEntry
						  if (iValuePos==MaxLength)Result=USER_FULL_ENTRY;
					      yChar++;
    762c:	80 91 5c 03 	lds	r24, 0x035C
    7630:	8f 5f       	subi	r24, 0xFF	; 255
    7632:	80 93 5c 03 	sts	0x035C, r24
						  //yChar=(yChar+1;//Max Display

						  }
                  stUserInput=uiInputDisp;
    7636:	83 e0       	ldi	r24, 0x03	; 3
    7638:	80 93 5e 03 	sts	0x035E, r24
				  }
			   }
              zKeyChar=KeyChar;
    763c:	c0 92 5a 03 	sts	0x035A, r12
             Result=USER_ENTRY;
    7640:	b4 e0       	ldi	r27, 0x04	; 4
    7642:	cb 2e       	mov	r12, r27
    7644:	03 c0       	rjmp	.+6      	; 0x764c <UserInput+0x2a6>
     char Result;
	 static char UserInputResult=USER_NONE;
	 static char stUserInput=uiInit,xChar=0,yChar=0,iValuePos=0,zKeyChar,zAlphaChar,AlphaChar,IsDelete=False;
	 static char iHit=0,IsShifted=False,IsSameKey=False,IsNextKey=False,IsNewKey=False,IsFirst=False;//,KeyByte=0;
	 static unsigned int iLoop=0,KeyTimeout;//,TimerPressed=0,NewKeyTimeout;
	        unsigned int NumbValue=0;
    7646:	aa 24       	eor	r10, r10
    7648:	bb 24       	eor	r11, r11
	 char KeyPressed=0,KeyChar=0,iDisp=0;
     Result=USER_NONE;
    764a:	cc 24       	eor	r12, r12
              zKeyChar=KeyChar;
             Result=USER_ENTRY;
             }//EndKeyChar
			 
                 
              if ((TypeUI==UI_NUMBER_R)||(TypeUI==UI_NUMBER_L)||(TypeUI==UI_NUM_PASSWORD)){
    764c:	2f 2d       	mov	r18, r15
    764e:	21 50       	subi	r18, 0x01	; 1
    7650:	22 30       	cpi	r18, 0x02	; 2
    7652:	18 f0       	brcs	.+6      	; 0x765a <UserInput+0x2b4>
    7654:	8f 2d       	mov	r24, r15
    7656:	84 30       	cpi	r24, 0x04	; 4
    7658:	81 f4       	brne	.+32     	; 0x767a <UserInput+0x2d4>
                   if((NumbValue>MaxValue)||(iValuePos==MaxLength)){
    765a:	0a 15       	cp	r16, r10
    765c:	1b 05       	cpc	r17, r11
    765e:	20 f0       	brcs	.+8      	; 0x7668 <UserInput+0x2c2>
    7660:	80 91 5b 03 	lds	r24, 0x035B
    7664:	8e 15       	cp	r24, r14
    7666:	49 f4       	brne	.+18     	; 0x767a <UserInput+0x2d4>
			           if (MaxValue>0)system_beep(1);
    7668:	01 15       	cp	r16, r1
    766a:	11 05       	cpc	r17, r1
    766c:	31 f0       	breq	.+12     	; 0x767a <UserInput+0x2d4>
    766e:	81 e0       	ldi	r24, 0x01	; 1
    7670:	90 e0       	ldi	r25, 0x00	; 0
    7672:	29 83       	std	Y+1, r18	; 0x01
    7674:	0e 94 ee 14 	call	0x29dc	; 0x29dc <system_beep>
    7678:	29 81       	ldd	r18, Y+1	; 0x01
				   }
                 }
		  
		  //CANCEL OK
		  if (KeyPressed==_KEY_CANCEL){
    767a:	98 2d       	mov	r25, r8
    767c:	97 3e       	cpi	r25, 0xE7	; 231
    767e:	71 f4       	brne	.+28     	; 0x769c <UserInput+0x2f6>
		      if (iValuePos>0){
    7680:	80 91 5b 03 	lds	r24, 0x035B
    7684:	88 23       	and	r24, r24
    7686:	41 f0       	breq	.+16     	; 0x7698 <UserInput+0x2f2>
			      iLoop=1999;
    7688:	8f ec       	ldi	r24, 0xCF	; 207
    768a:	97 e0       	ldi	r25, 0x07	; 7
    768c:	90 93 50 03 	sts	0x0350, r25
    7690:	80 93 4f 03 	sts	0x034F, r24
				  stUserInput=uiClearDisplay;
    7694:	82 e0       	ldi	r24, 0x02	; 2
    7696:	26 c0       	rjmp	.+76     	; 0x76e4 <UserInput+0x33e>
				  }
			  else{
			      UserInputResult=USER_CANCEL;
    7698:	81 e0       	ldi	r24, 0x01	; 1
    769a:	21 c0       	rjmp	.+66     	; 0x76de <UserInput+0x338>
			      stUserInput=uiFinished;
				  }
		  }
		  else {
		  if (KeyPressed==_KEY_ENTER){
    769c:	e8 2d       	mov	r30, r8
    769e:	e7 3b       	cpi	r30, 0xB7	; 183
    76a0:	19 f5       	brne	.+70     	; 0x76e8 <UserInput+0x342>
		      strResult[iValuePos]=0;
    76a2:	80 91 5b 03 	lds	r24, 0x035B
    76a6:	f3 01       	movw	r30, r6
    76a8:	e8 0f       	add	r30, r24
    76aa:	f1 1d       	adc	r31, r1
    76ac:	10 82       	st	Z, r1
			  if ((TypeUI==UI_NUMBER_R)||(TypeUI==UI_NUMBER_L)){
    76ae:	22 30       	cpi	r18, 0x02	; 2
    76b0:	a8 f4       	brcc	.+42     	; 0x76dc <UserInput+0x336>
			       if (iValuePos==0)sprintf_P(strResult,PSTR("0"));
    76b2:	88 23       	and	r24, r24
    76b4:	81 f4       	brne	.+32     	; 0x76d6 <UserInput+0x330>
    76b6:	00 d0       	rcall	.+0      	; 0x76b8 <UserInput+0x312>
    76b8:	00 d0       	rcall	.+0      	; 0x76ba <UserInput+0x314>
    76ba:	ed b7       	in	r30, 0x3d	; 61
    76bc:	fe b7       	in	r31, 0x3e	; 62
    76be:	72 82       	std	Z+2, r7	; 0x02
    76c0:	61 82       	std	Z+1, r6	; 0x01
    76c2:	8c ed       	ldi	r24, 0xDC	; 220
    76c4:	9d e1       	ldi	r25, 0x1D	; 29
    76c6:	94 83       	std	Z+4, r25	; 0x04
    76c8:	83 83       	std	Z+3, r24	; 0x03
    76ca:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    76ce:	0f 90       	pop	r0
    76d0:	0f 90       	pop	r0
    76d2:	0f 90       	pop	r0
    76d4:	0f 90       	pop	r0
			       RemZeroLead(strResult);
    76d6:	c3 01       	movw	r24, r6
    76d8:	0e 94 93 39 	call	0x7326	; 0x7326 <RemZeroLead>
				  }
		      UserInputResult=USER_OK;
    76dc:	83 e0       	ldi	r24, 0x03	; 3
    76de:	80 93 5f 03 	sts	0x035F, r24
		      stUserInput=uiFinished;
    76e2:	84 e0       	ldi	r24, 0x04	; 4
    76e4:	80 93 5e 03 	sts	0x035E, r24
			  }
		  }//EndElse

		  if ((iLoop%2000)==0){
    76e8:	80 91 4f 03 	lds	r24, 0x034F
    76ec:	90 91 50 03 	lds	r25, 0x0350
    76f0:	60 ed       	ldi	r22, 0xD0	; 208
    76f2:	77 e0       	ldi	r23, 0x07	; 7
    76f4:	0e 94 97 a7 	call	0x14f2e	; 0x14f2e <__udivmodhi4>
    76f8:	00 97       	sbiw	r24, 0x00	; 0
    76fa:	09 f0       	breq	.+2      	; 0x76fe <UserInput+0x358>
    76fc:	4b c0       	rjmp	.+150    	; 0x7794 <UserInput+0x3ee>
		      if (IsSameKey==True)
    76fe:	80 91 54 03 	lds	r24, 0x0354
    7702:	81 30       	cpi	r24, 0x01	; 1
    7704:	c9 f4       	brne	.+50     	; 0x7738 <UserInput+0x392>
			      //lcd_put(xChar,yChar,AlphaChar); 
				  lcd_put(xPos+((yPos+iValuePos-1)/20),yPos+(iValuePos%20),AlphaChar); 
    7706:	40 91 5b 03 	lds	r20, 0x035B
    770a:	84 2f       	mov	r24, r20
    770c:	90 e0       	ldi	r25, 0x00	; 0
    770e:	01 97       	sbiw	r24, 0x01	; 1
    7710:	8d 0d       	add	r24, r13
    7712:	91 1d       	adc	r25, r1
    7714:	64 e1       	ldi	r22, 0x14	; 20
    7716:	70 e0       	ldi	r23, 0x00	; 0
    7718:	0e 94 ab a7 	call	0x14f56	; 0x14f56 <__divmodhi4>
    771c:	56 2f       	mov	r21, r22
    771e:	84 2f       	mov	r24, r20
    7720:	64 e1       	ldi	r22, 0x14	; 20
    7722:	0e 94 7e a7 	call	0x14efc	; 0x14efc <__udivmodqi4>
    7726:	9d 0d       	add	r25, r13
    7728:	89 2d       	mov	r24, r9
    772a:	85 0f       	add	r24, r21
    772c:	69 2f       	mov	r22, r25
    772e:	40 91 58 03 	lds	r20, 0x0358
    7732:	0e 94 c1 a2 	call	0x14582	; 0x14582 <lcd_put>
    7736:	2e c0       	rjmp	.+92     	; 0x7794 <UserInput+0x3ee>
			  else {
			      if((TypeUI==UI_ALPHANUM_PASSWORD)&&(iValuePos>0))lcd_put(xChar,yChar-1,'*'); 
    7738:	ff 2d       	mov	r31, r15
    773a:	f5 30       	cpi	r31, 0x05	; 5
    773c:	61 f4       	brne	.+24     	; 0x7756 <UserInput+0x3b0>
    773e:	80 91 5b 03 	lds	r24, 0x035B
    7742:	88 23       	and	r24, r24
    7744:	41 f0       	breq	.+16     	; 0x7756 <UserInput+0x3b0>
    7746:	60 91 5c 03 	lds	r22, 0x035C
    774a:	61 50       	subi	r22, 0x01	; 1
    774c:	80 91 5d 03 	lds	r24, 0x035D
    7750:	4a e2       	ldi	r20, 0x2A	; 42
    7752:	0e 94 c1 a2 	call	0x14582	; 0x14582 <lcd_put>
			      //lcd_put(xChar,yChar,'_'); 
				  lcd_put(xPos+((yPos+iValuePos-1)/20),yPos+(iValuePos%20),'_'); 
    7756:	40 91 5b 03 	lds	r20, 0x035B
    775a:	84 2f       	mov	r24, r20
    775c:	90 e0       	ldi	r25, 0x00	; 0
    775e:	01 97       	sbiw	r24, 0x01	; 1
    7760:	8d 0d       	add	r24, r13
    7762:	91 1d       	adc	r25, r1
    7764:	64 e1       	ldi	r22, 0x14	; 20
    7766:	70 e0       	ldi	r23, 0x00	; 0
    7768:	0e 94 ab a7 	call	0x14f56	; 0x14f56 <__divmodhi4>
    776c:	56 2f       	mov	r21, r22
    776e:	84 2f       	mov	r24, r20
    7770:	64 e1       	ldi	r22, 0x14	; 20
    7772:	0e 94 7e a7 	call	0x14efc	; 0x14efc <__udivmodqi4>
    7776:	9d 0d       	add	r25, r13
    7778:	89 2d       	mov	r24, r9
    777a:	85 0f       	add	r24, r21
    777c:	69 2f       	mov	r22, r25
    777e:	4f e5       	ldi	r20, 0x5F	; 95
    7780:	0e 94 c1 a2 	call	0x14582	; 0x14582 <lcd_put>

				  if (IsFirst==True){
    7784:	80 91 51 03 	lds	r24, 0x0351
    7788:	81 30       	cpi	r24, 0x01	; 1
    778a:	21 f4       	brne	.+8      	; 0x7794 <UserInput+0x3ee>
				      IsFirst=False;
    778c:	10 92 51 03 	sts	0x0351, r1
				      zKeyChar=0;
    7790:	10 92 5a 03 	sts	0x035A, r1
					  }
				  }
			  }
          if ((iLoop%2000)==1000){
    7794:	80 91 4f 03 	lds	r24, 0x034F
    7798:	90 91 50 03 	lds	r25, 0x0350
    779c:	60 ed       	ldi	r22, 0xD0	; 208
    779e:	77 e0       	ldi	r23, 0x07	; 7
    77a0:	0e 94 97 a7 	call	0x14f2e	; 0x14f2e <__udivmodhi4>
    77a4:	23 e0       	ldi	r18, 0x03	; 3
    77a6:	88 3e       	cpi	r24, 0xE8	; 232
    77a8:	92 07       	cpc	r25, r18
    77aa:	d1 f5       	brne	.+116    	; 0x7820 <UserInput+0x47a>
		      if (IsSameKey==True){
    77ac:	80 91 54 03 	lds	r24, 0x0354
    77b0:	81 30       	cpi	r24, 0x01	; 1
    77b2:	f9 f4       	brne	.+62     	; 0x77f2 <UserInput+0x44c>
			      if (TypeUI!=UI_NUM_PASSWORD)
    77b4:	8f 2d       	mov	r24, r15
    77b6:	84 30       	cpi	r24, 0x04	; 4
    77b8:	b1 f0       	breq	.+44     	; 0x77e6 <UserInput+0x440>
				       //lcd_put(xChar,yChar,AlphaChar); 
					   lcd_put(xPos+((yPos+iValuePos-1)/20),yChar%21,AlphaChar); 
    77ba:	80 91 5b 03 	lds	r24, 0x035B
    77be:	90 e0       	ldi	r25, 0x00	; 0
    77c0:	01 97       	sbiw	r24, 0x01	; 1
    77c2:	8d 0d       	add	r24, r13
    77c4:	91 1d       	adc	r25, r1
    77c6:	64 e1       	ldi	r22, 0x14	; 20
    77c8:	70 e0       	ldi	r23, 0x00	; 0
    77ca:	0e 94 ab a7 	call	0x14f56	; 0x14f56 <__divmodhi4>
    77ce:	26 2f       	mov	r18, r22
    77d0:	80 91 5c 03 	lds	r24, 0x035C
    77d4:	65 e1       	ldi	r22, 0x15	; 21
    77d6:	0e 94 7e a7 	call	0x14efc	; 0x14efc <__udivmodqi4>
    77da:	89 2d       	mov	r24, r9
    77dc:	82 0f       	add	r24, r18
    77de:	69 2f       	mov	r22, r25
    77e0:	40 91 58 03 	lds	r20, 0x0358
    77e4:	1b c0       	rjmp	.+54     	; 0x781c <UserInput+0x476>
					   
				  else lcd_put(xChar,yChar,'*'); 
    77e6:	80 91 5d 03 	lds	r24, 0x035D
    77ea:	60 91 5c 03 	lds	r22, 0x035C
    77ee:	4a e2       	ldi	r20, 0x2A	; 42
    77f0:	15 c0       	rjmp	.+42     	; 0x781c <UserInput+0x476>
			  }
			  //else lcd_put(xChar,yChar,' '); 
			  else lcd_put(xPos+((yPos+iValuePos-1)/20),yPos+(iValuePos%20),' '); 			  
    77f2:	40 91 5b 03 	lds	r20, 0x035B
    77f6:	84 2f       	mov	r24, r20
    77f8:	90 e0       	ldi	r25, 0x00	; 0
    77fa:	01 97       	sbiw	r24, 0x01	; 1
    77fc:	8d 0d       	add	r24, r13
    77fe:	91 1d       	adc	r25, r1
    7800:	64 e1       	ldi	r22, 0x14	; 20
    7802:	70 e0       	ldi	r23, 0x00	; 0
    7804:	0e 94 ab a7 	call	0x14f56	; 0x14f56 <__divmodhi4>
    7808:	56 2f       	mov	r21, r22
    780a:	84 2f       	mov	r24, r20
    780c:	64 e1       	ldi	r22, 0x14	; 20
    780e:	0e 94 7e a7 	call	0x14efc	; 0x14efc <__udivmodqi4>
    7812:	9d 0d       	add	r25, r13
    7814:	89 2d       	mov	r24, r9
    7816:	85 0f       	add	r24, r21
    7818:	69 2f       	mov	r22, r25
    781a:	40 e2       	ldi	r20, 0x20	; 32
    781c:	0e 94 c1 a2 	call	0x14582	; 0x14582 <lcd_put>
			  }
          iLoop++;
    7820:	80 91 4f 03 	lds	r24, 0x034F
    7824:	90 91 50 03 	lds	r25, 0x0350
    7828:	01 96       	adiw	r24, 0x01	; 1
    782a:	90 93 50 03 	sts	0x0350, r25
    782e:	80 93 4f 03 	sts	0x034F, r24
          break;
    7832:	d3 c0       	rjmp	.+422    	; 0x79da <UserInput+0x634>
     case uiClearDisplay:
          if (TypeUI==UI_NUMBER_L){
    7834:	82 30       	cpi	r24, 0x02	; 2
    7836:	a1 f4       	brne	.+40     	; 0x7860 <UserInput+0x4ba>
		      lcd_put(xChar,(yChar-iValuePos),' '); // 123_ 1_
    7838:	60 91 5c 03 	lds	r22, 0x035C
    783c:	80 91 5b 03 	lds	r24, 0x035B
    7840:	68 1b       	sub	r22, r24
    7842:	80 91 5d 03 	lds	r24, 0x035D
    7846:	40 e2       	ldi	r20, 0x20	; 32
    7848:	0e 94 c1 a2 	call	0x14582	; 0x14582 <lcd_put>
		      strResult[iValuePos]=0;
    784c:	80 91 5b 03 	lds	r24, 0x035B
    7850:	f3 01       	movw	r30, r6
    7852:	e8 0f       	add	r30, r24
    7854:	f1 1d       	adc	r31, r1
    7856:	10 82       	st	Z, r1
		      iValuePos--;
    7858:	81 50       	subi	r24, 0x01	; 1
    785a:	80 93 5b 03 	sts	0x035B, r24
    785e:	30 c0       	rjmp	.+96     	; 0x78c0 <UserInput+0x51a>
			  }
          else
		  if ((TypeUI==UI_NUMBER_R)||(TypeUI==UI_ALPHANUM_R)||
    7860:	81 30       	cpi	r24, 0x01	; 1
    7862:	31 f0       	breq	.+12     	; 0x7870 <UserInput+0x4ca>
    7864:	83 30       	cpi	r24, 0x03	; 3
    7866:	21 f0       	breq	.+8      	; 0x7870 <UserInput+0x4ca>
    7868:	84 30       	cpi	r24, 0x04	; 4
    786a:	11 f0       	breq	.+4      	; 0x7870 <UserInput+0x4ca>
		      (TypeUI==UI_NUM_PASSWORD)||(TypeUI==UI_ALPHANUM_PASSWORD)){
    786c:	85 30       	cpi	r24, 0x05	; 5
    786e:	41 f5       	brne	.+80     	; 0x78c0 <UserInput+0x51a>
		      //lcd_put(xChar,yChar,' '); // 123_ 1_
			  lcd_put(xPos+((yPos+iValuePos-1)/20),yPos+(iValuePos%20),' '); // 123_ 1_
    7870:	40 91 5b 03 	lds	r20, 0x035B
    7874:	84 2f       	mov	r24, r20
    7876:	90 e0       	ldi	r25, 0x00	; 0
    7878:	01 97       	sbiw	r24, 0x01	; 1
    787a:	8d 0d       	add	r24, r13
    787c:	91 1d       	adc	r25, r1
    787e:	64 e1       	ldi	r22, 0x14	; 20
    7880:	70 e0       	ldi	r23, 0x00	; 0
    7882:	0e 94 ab a7 	call	0x14f56	; 0x14f56 <__divmodhi4>
    7886:	56 2f       	mov	r21, r22
    7888:	84 2f       	mov	r24, r20
    788a:	64 e1       	ldi	r22, 0x14	; 20
    788c:	0e 94 7e a7 	call	0x14efc	; 0x14efc <__udivmodqi4>
    7890:	9d 0d       	add	r25, r13
    7892:	89 2d       	mov	r24, r9
    7894:	85 0f       	add	r24, r21
    7896:	69 2f       	mov	r22, r25
    7898:	40 e2       	ldi	r20, 0x20	; 32
    789a:	0e 94 c1 a2 	call	0x14582	; 0x14582 <lcd_put>
			  
		      strResult[iValuePos]=0;
    789e:	80 91 5b 03 	lds	r24, 0x035B
    78a2:	f3 01       	movw	r30, r6
    78a4:	e8 0f       	add	r30, r24
    78a6:	f1 1d       	adc	r31, r1
    78a8:	10 82       	st	Z, r1
		      iValuePos--;
    78aa:	81 50       	subi	r24, 0x01	; 1
    78ac:	80 93 5b 03 	sts	0x035B, r24
			  yChar--;
    78b0:	80 91 5c 03 	lds	r24, 0x035C
    78b4:	81 50       	subi	r24, 0x01	; 1
    78b6:	80 93 5c 03 	sts	0x035C, r24
			  IsDelete=True;
    78ba:	81 e0       	ldi	r24, 0x01	; 1
    78bc:	80 93 57 03 	sts	0x0357, r24
		  }
		  if (iValuePos==0)Result=USER_NO_DATA;		  
    78c0:	80 91 5b 03 	lds	r24, 0x035B
    78c4:	88 23       	and	r24, r24
    78c6:	11 f0       	breq	.+4      	; 0x78cc <UserInput+0x526>
	 static char stUserInput=uiInit,xChar=0,yChar=0,iValuePos=0,zKeyChar,zAlphaChar,AlphaChar,IsDelete=False;
	 static char iHit=0,IsShifted=False,IsSameKey=False,IsNextKey=False,IsNewKey=False,IsFirst=False;//,KeyByte=0;
	 static unsigned int iLoop=0,KeyTimeout;//,TimerPressed=0,NewKeyTimeout;
	        unsigned int NumbValue=0;
	 char KeyPressed=0,KeyChar=0,iDisp=0;
     Result=USER_NONE;
    78c8:	cc 24       	eor	r12, r12
    78ca:	02 c0       	rjmp	.+4      	; 0x78d0 <UserInput+0x52a>
		      strResult[iValuePos]=0;
		      iValuePos--;
			  yChar--;
			  IsDelete=True;
		  }
		  if (iValuePos==0)Result=USER_NO_DATA;		  
    78cc:	a5 e0       	ldi	r26, 0x05	; 5
    78ce:	ca 2e       	mov	r12, r26
		  stUserInput=uiInputDisp;//Redraw
    78d0:	83 e0       	ldi	r24, 0x03	; 3
    78d2:	80 93 5e 03 	sts	0x035E, r24
	      break;      
    78d6:	81 c0       	rjmp	.+258    	; 0x79da <UserInput+0x634>
     case uiInputDisp:
	      if(TypeUI==UI_ALPHANUM_PASSWORD){
    78d8:	85 30       	cpi	r24, 0x05	; 5
    78da:	31 f5       	brne	.+76     	; 0x7928 <UserInput+0x582>
			  if (iValuePos>0){
    78dc:	80 91 5b 03 	lds	r24, 0x035B
    78e0:	88 23       	and	r24, r24
    78e2:	c1 f0       	breq	.+48     	; 0x7914 <UserInput+0x56e>
                  lcd_put(xChar,(yChar-2),'*');
    78e4:	60 91 5c 03 	lds	r22, 0x035C
    78e8:	62 50       	subi	r22, 0x02	; 2
    78ea:	80 91 5d 03 	lds	r24, 0x035D
    78ee:	4a e2       	ldi	r20, 0x2A	; 42
    78f0:	0e 94 c1 a2 	call	0x14582	; 0x14582 <lcd_put>
			      if (IsDelete==True){
    78f4:	80 91 57 03 	lds	r24, 0x0357
    78f8:	60 91 5c 03 	lds	r22, 0x035C
    78fc:	81 30       	cpi	r24, 0x01	; 1
    78fe:	89 f0       	breq	.+34     	; 0x7922 <UserInput+0x57c>
				      IsDelete=False;
			          lcd_put(xChar,(yChar-1),'*');
			          }
				  else lcd_put(xChar,(yChar-1),strResult[iValuePos-1]);
    7900:	61 50       	subi	r22, 0x01	; 1
    7902:	80 91 5b 03 	lds	r24, 0x035B
    7906:	f3 01       	movw	r30, r6
    7908:	e8 0f       	add	r30, r24
    790a:	f1 1d       	adc	r31, r1
    790c:	31 97       	sbiw	r30, 0x01	; 1
    790e:	80 91 5d 03 	lds	r24, 0x035D
    7912:	4d c0       	rjmp	.+154    	; 0x79ae <UserInput+0x608>
			      }
			  else{ if(IsDelete==True){
    7914:	80 91 57 03 	lds	r24, 0x0357
    7918:	60 91 5c 03 	lds	r22, 0x035C
    791c:	81 30       	cpi	r24, 0x01	; 1
    791e:	09 f0       	breq	.+2      	; 0x7922 <UserInput+0x57c>
    7920:	42 c0       	rjmp	.+132    	; 0x79a6 <UserInput+0x600>
			           IsDelete=False;
    7922:	10 92 57 03 	sts	0x0357, r1
    7926:	49 c0       	rjmp	.+146    	; 0x79ba <UserInput+0x614>
					   lcd_put(xChar,(yChar-1),'*');
			           }
			        else lcd_put(xChar,(yChar-1),strResult[iValuePos]);
			  }
		  }else
	      if (TypeUI==UI_NUMBER_L){
    7928:	82 30       	cpi	r24, 0x02	; 2
    792a:	a1 f4       	brne	.+40     	; 0x7954 <UserInput+0x5ae>
    792c:	00 e0       	ldi	r16, 0x00	; 0
    792e:	0d c0       	rjmp	.+26     	; 0x794a <UserInput+0x5a4>
	          for(iDisp=0;iDisp<iValuePos;iDisp++){
				  lcd_put(xChar,(yChar-(iValuePos-iDisp)),strResult[iDisp]);
    7930:	60 91 5c 03 	lds	r22, 0x035C
    7934:	68 1b       	sub	r22, r24
    7936:	60 0f       	add	r22, r16
    7938:	f3 01       	movw	r30, r6
    793a:	e0 0f       	add	r30, r16
    793c:	f1 1d       	adc	r31, r1
    793e:	80 91 5d 03 	lds	r24, 0x035D
    7942:	40 81       	ld	r20, Z
    7944:	0e 94 c1 a2 	call	0x14582	; 0x14582 <lcd_put>
			           }
			        else lcd_put(xChar,(yChar-1),strResult[iValuePos]);
			  }
		  }else
	      if (TypeUI==UI_NUMBER_L){
	          for(iDisp=0;iDisp<iValuePos;iDisp++){
    7948:	0f 5f       	subi	r16, 0xFF	; 255
    794a:	80 91 5b 03 	lds	r24, 0x035B
    794e:	08 17       	cp	r16, r24
    7950:	78 f3       	brcs	.-34     	; 0x7930 <UserInput+0x58a>
    7952:	39 c0       	rjmp	.+114    	; 0x79c6 <UserInput+0x620>
				  lcd_put(xChar,(yChar-(iValuePos-iDisp)),strResult[iDisp]);
		      }
		  }else
	      if ((TypeUI==UI_NUMBER_R)||(TypeUI==UI_ALPHANUM_R)){
    7954:	81 30       	cpi	r24, 0x01	; 1
    7956:	11 f0       	breq	.+4      	; 0x795c <UserInput+0x5b6>
    7958:	83 30       	cpi	r24, 0x03	; 3
    795a:	59 f5       	brne	.+86     	; 0x79b2 <UserInput+0x60c>
		      
			  //if (iValuePos>0) lcd_put(xChar,(yChar-1),strResult[iValuePos-1]);
			  if (iValuePos>0) lcd_put(xPos+((yPos+iValuePos-1)/21),yPos+((iValuePos-1)%20),strResult[iValuePos-1]);			  
    795c:	e0 91 5b 03 	lds	r30, 0x035B
    7960:	8d 2d       	mov	r24, r13
    7962:	90 e0       	ldi	r25, 0x00	; 0
    7964:	ee 23       	and	r30, r30
    7966:	c1 f0       	breq	.+48     	; 0x7998 <UserInput+0x5f2>
    7968:	f0 e0       	ldi	r31, 0x00	; 0
    796a:	9f 01       	movw	r18, r30
    796c:	21 50       	subi	r18, 0x01	; 1
    796e:	30 40       	sbci	r19, 0x00	; 0
    7970:	82 0f       	add	r24, r18
    7972:	93 1f       	adc	r25, r19
    7974:	65 e1       	ldi	r22, 0x15	; 21
    7976:	70 e0       	ldi	r23, 0x00	; 0
    7978:	0e 94 ab a7 	call	0x14f56	; 0x14f56 <__divmodhi4>
    797c:	46 2f       	mov	r20, r22
    797e:	c9 01       	movw	r24, r18
    7980:	64 e1       	ldi	r22, 0x14	; 20
    7982:	70 e0       	ldi	r23, 0x00	; 0
    7984:	0e 94 ab a7 	call	0x14f56	; 0x14f56 <__divmodhi4>
    7988:	6d 2d       	mov	r22, r13
    798a:	68 0f       	add	r22, r24
    798c:	e6 0d       	add	r30, r6
    798e:	f7 1d       	adc	r31, r7
    7990:	31 97       	sbiw	r30, 0x01	; 1
    7992:	89 2d       	mov	r24, r9
    7994:	84 0f       	add	r24, r20
    7996:	0b c0       	rjmp	.+22     	; 0x79ae <UserInput+0x608>
			  else{ if ((yChar-1)>=yPos)lcd_put(xChar,(yChar-1),strResult[iValuePos]);
    7998:	60 91 5c 03 	lds	r22, 0x035C
    799c:	26 2f       	mov	r18, r22
    799e:	30 e0       	ldi	r19, 0x00	; 0
    79a0:	82 17       	cp	r24, r18
    79a2:	93 07       	cpc	r25, r19
    79a4:	84 f4       	brge	.+32     	; 0x79c6 <UserInput+0x620>
    79a6:	61 50       	subi	r22, 0x01	; 1
    79a8:	80 91 5d 03 	lds	r24, 0x035D
    79ac:	f3 01       	movw	r30, r6
    79ae:	40 81       	ld	r20, Z
    79b0:	08 c0       	rjmp	.+16     	; 0x79c2 <UserInput+0x61c>
			  }
		  }else
		  //DisplayAsterik *
		  if (TypeUI==UI_NUM_PASSWORD){
    79b2:	84 30       	cpi	r24, 0x04	; 4
    79b4:	41 f4       	brne	.+16     	; 0x79c6 <UserInput+0x620>
		      lcd_put(xChar,(yChar-1),'*');
    79b6:	60 91 5c 03 	lds	r22, 0x035C
    79ba:	61 50       	subi	r22, 0x01	; 1
    79bc:	80 91 5d 03 	lds	r24, 0x035D
    79c0:	4a e2       	ldi	r20, 0x2A	; 42
    79c2:	0e 94 c1 a2 	call	0x14582	; 0x14582 <lcd_put>
		  }

          stUserInput=uiInput;
    79c6:	81 e0       	ldi	r24, 0x01	; 1
    79c8:	80 93 5e 03 	sts	0x035E, r24
    79cc:	05 c0       	rjmp	.+10     	; 0x79d8 <UserInput+0x632>
	      break;	 
     case uiFinished:
	      Result=UserInputResult;
    79ce:	c0 90 5f 03 	lds	r12, 0x035F
	      stUserInput=uiInit;
    79d2:	10 92 5e 03 	sts	0x035E, r1
	      break;
    79d6:	01 c0       	rjmp	.+2      	; 0x79da <UserInput+0x634>
	 static char stUserInput=uiInit,xChar=0,yChar=0,iValuePos=0,zKeyChar,zAlphaChar,AlphaChar,IsDelete=False;
	 static char iHit=0,IsShifted=False,IsSameKey=False,IsNextKey=False,IsNewKey=False,IsFirst=False;//,KeyByte=0;
	 static unsigned int iLoop=0,KeyTimeout;//,TimerPressed=0,NewKeyTimeout;
	        unsigned int NumbValue=0;
	 char KeyPressed=0,KeyChar=0,iDisp=0;
     Result=USER_NONE;
    79d8:	cc 24       	eor	r12, r12
	      Result=UserInputResult;
	      stUserInput=uiInit;
	      break;
	 }
	 return Result;
}
    79da:	8c 2d       	mov	r24, r12
    79dc:	0f 90       	pop	r0
    79de:	cf 91       	pop	r28
    79e0:	df 91       	pop	r29
    79e2:	1f 91       	pop	r17
    79e4:	0f 91       	pop	r16
    79e6:	ff 90       	pop	r15
    79e8:	ef 90       	pop	r14
    79ea:	df 90       	pop	r13
    79ec:	cf 90       	pop	r12
    79ee:	bf 90       	pop	r11
    79f0:	af 90       	pop	r10
    79f2:	9f 90       	pop	r9
    79f4:	8f 90       	pop	r8
    79f6:	7f 90       	pop	r7
    79f8:	6f 90       	pop	r6
    79fa:	08 95       	ret

000079fc <FSettingProduct>:

void menu_product(){

}

char FSettingProduct(){//Using strDescription
    79fc:	6f 92       	push	r6
    79fe:	7f 92       	push	r7
    7a00:	9f 92       	push	r9
    7a02:	af 92       	push	r10
    7a04:	bf 92       	push	r11
    7a06:	cf 92       	push	r12
    7a08:	df 92       	push	r13
    7a0a:	ef 92       	push	r14
    7a0c:	ff 92       	push	r15
    7a0e:	0f 93       	push	r16
    7a10:	1f 93       	push	r17
    7a12:	df 93       	push	r29
    7a14:	cf 93       	push	r28
    7a16:	cd b7       	in	r28, 0x3d	; 61
    7a18:	de b7       	in	r29, 0x3e	; 62
    7a1a:	a1 97       	sbiw	r28, 0x21	; 33
    7a1c:	0f b6       	in	r0, 0x3f	; 63
    7a1e:	f8 94       	cli
    7a20:	de bf       	out	0x3e, r29	; 62
    7a22:	0f be       	out	0x3f, r0	; 63
    7a24:	cd bf       	out	0x3d, r28	; 61
     char i;//,x,y;
	 char strProductName[13],lcdteks[20];
	 char Result=MENU_NONE;
	 
     Result=MENU_NONE;
     switch(stMenuProduct){
    7a26:	80 91 00 03 	lds	r24, 0x0300
    7a2a:	83 30       	cpi	r24, 0x03	; 3
    7a2c:	09 f4       	brne	.+2      	; 0x7a30 <FSettingProduct+0x34>
    7a2e:	f3 c0       	rjmp	.+486    	; 0x7c16 <FSettingProduct+0x21a>
    7a30:	84 30       	cpi	r24, 0x04	; 4
    7a32:	38 f4       	brcc	.+14     	; 0x7a42 <FSettingProduct+0x46>
    7a34:	81 30       	cpi	r24, 0x01	; 1
    7a36:	09 f4       	brne	.+2      	; 0x7a3a <FSettingProduct+0x3e>
    7a38:	6a c0       	rjmp	.+212    	; 0x7b0e <FSettingProduct+0x112>
    7a3a:	82 30       	cpi	r24, 0x02	; 2
    7a3c:	08 f0       	brcs	.+2      	; 0x7a40 <FSettingProduct+0x44>
    7a3e:	7a c0       	rjmp	.+244    	; 0x7b34 <FSettingProduct+0x138>
    7a40:	0a c0       	rjmp	.+20     	; 0x7a56 <FSettingProduct+0x5a>
    7a42:	85 30       	cpi	r24, 0x05	; 5
    7a44:	09 f4       	brne	.+2      	; 0x7a48 <FSettingProduct+0x4c>
    7a46:	72 c1       	rjmp	.+740    	; 0x7d2c <FSettingProduct+0x330>
    7a48:	85 30       	cpi	r24, 0x05	; 5
    7a4a:	08 f4       	brcc	.+2      	; 0x7a4e <FSettingProduct+0x52>
    7a4c:	8d c1       	rjmp	.+794    	; 0x7d68 <FSettingProduct+0x36c>
    7a4e:	86 30       	cpi	r24, 0x06	; 6
    7a50:	09 f0       	breq	.+2      	; 0x7a54 <FSettingProduct+0x58>
    7a52:	b0 c1       	rjmp	.+864    	; 0x7db4 <FSettingProduct+0x3b8>
    7a54:	ab c1       	rjmp	.+854    	; 0x7dac <FSettingProduct+0x3b0>
	 case mpInitProduct:
	      //DisplayProductName
		  lcd_clear();
    7a56:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
    7a5a:	fc eb       	ldi	r31, 0xBC	; 188
    7a5c:	ef 2e       	mov	r14, r31
    7a5e:	f0 e0       	ldi	r31, 0x00	; 0
    7a60:	ff 2e       	mov	r15, r31
    7a62:	00 e0       	ldi	r16, 0x00	; 0
    7a64:	10 e0       	ldi	r17, 0x00	; 0
		  //lcd_printf(1,1,PSTR("Product:"));
	      for(i=0;i<6;i++){//234 
	          eeprom_read_block((void*) &strProductName, (const void*) &DefProductName[i], 13);
    7a66:	6e 01       	movw	r12, r28
    7a68:	08 94       	sec
    7a6a:	c1 1c       	adc	r12, r1
    7a6c:	d1 1c       	adc	r13, r1
	          sprintf_P(lcdteks,PSTR("%d)%s"),(i+1),strProductName);
    7a6e:	ee e0       	ldi	r30, 0x0E	; 14
    7a70:	ae 2e       	mov	r10, r30
    7a72:	b1 2c       	mov	r11, r1
    7a74:	ac 0e       	add	r10, r28
    7a76:	bd 1e       	adc	r11, r29
    7a78:	7a e6       	ldi	r23, 0x6A	; 106
    7a7a:	67 2e       	mov	r6, r23
    7a7c:	73 e1       	ldi	r23, 0x13	; 19
    7a7e:	77 2e       	mov	r7, r23
	 
     Result=MENU_NONE;
     switch(stMenuProduct){
	 case mpInitProduct:
	      //DisplayProductName
		  lcd_clear();
    7a80:	90 2e       	mov	r9, r16
		  //lcd_printf(1,1,PSTR("Product:"));
	      for(i=0;i<6;i++){//234 
	          eeprom_read_block((void*) &strProductName, (const void*) &DefProductName[i], 13);
    7a82:	c6 01       	movw	r24, r12
    7a84:	b7 01       	movw	r22, r14
    7a86:	4d e0       	ldi	r20, 0x0D	; 13
    7a88:	50 e0       	ldi	r21, 0x00	; 0
    7a8a:	0e 94 56 aa 	call	0x154ac	; 0x154ac <__eerd_block_m128>

void menu_product(){

}

char FSettingProduct(){//Using strDescription
    7a8e:	0f 5f       	subi	r16, 0xFF	; 255
    7a90:	1f 4f       	sbci	r17, 0xFF	; 255
	      //DisplayProductName
		  lcd_clear();
		  //lcd_printf(1,1,PSTR("Product:"));
	      for(i=0;i<6;i++){//234 
	          eeprom_read_block((void*) &strProductName, (const void*) &DefProductName[i], 13);
	          sprintf_P(lcdteks,PSTR("%d)%s"),(i+1),strProductName);
    7a92:	8d b7       	in	r24, 0x3d	; 61
    7a94:	9e b7       	in	r25, 0x3e	; 62
    7a96:	08 97       	sbiw	r24, 0x08	; 8
    7a98:	0f b6       	in	r0, 0x3f	; 63
    7a9a:	f8 94       	cli
    7a9c:	9e bf       	out	0x3e, r25	; 62
    7a9e:	0f be       	out	0x3f, r0	; 63
    7aa0:	8d bf       	out	0x3d, r24	; 61
    7aa2:	ed b7       	in	r30, 0x3d	; 61
    7aa4:	fe b7       	in	r31, 0x3e	; 62
    7aa6:	31 96       	adiw	r30, 0x01	; 1
    7aa8:	ad b7       	in	r26, 0x3d	; 61
    7aaa:	be b7       	in	r27, 0x3e	; 62
    7aac:	12 96       	adiw	r26, 0x02	; 2
    7aae:	bc 92       	st	X, r11
    7ab0:	ae 92       	st	-X, r10
    7ab2:	11 97       	sbiw	r26, 0x01	; 1
    7ab4:	73 82       	std	Z+3, r7	; 0x03
    7ab6:	62 82       	std	Z+2, r6	; 0x02
    7ab8:	15 83       	std	Z+5, r17	; 0x05
    7aba:	04 83       	std	Z+4, r16	; 0x04
    7abc:	d7 82       	std	Z+7, r13	; 0x07
    7abe:	c6 82       	std	Z+6, r12	; 0x06
    7ac0:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
			  lcd_print((((i)%4)+1),(((i)/4)*10)+1,lcdteks);
    7ac4:	8d b7       	in	r24, 0x3d	; 61
    7ac6:	9e b7       	in	r25, 0x3e	; 62
    7ac8:	08 96       	adiw	r24, 0x08	; 8
    7aca:	0f b6       	in	r0, 0x3f	; 63
    7acc:	f8 94       	cli
    7ace:	9e bf       	out	0x3e, r25	; 62
    7ad0:	0f be       	out	0x3f, r0	; 63
    7ad2:	8d bf       	out	0x3d, r24	; 61
    7ad4:	89 2d       	mov	r24, r9
    7ad6:	83 70       	andi	r24, 0x03	; 3
    7ad8:	96 94       	lsr	r9
    7ada:	96 94       	lsr	r9
    7adc:	99 0c       	add	r9, r9
    7ade:	69 2d       	mov	r22, r9
    7ae0:	66 0f       	add	r22, r22
    7ae2:	66 0f       	add	r22, r22
    7ae4:	69 0d       	add	r22, r9
    7ae6:	6f 5f       	subi	r22, 0xFF	; 255
    7ae8:	8f 5f       	subi	r24, 0xFF	; 255
    7aea:	a5 01       	movw	r20, r10
    7aec:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
    7af0:	ad e0       	ldi	r26, 0x0D	; 13
    7af2:	b0 e0       	ldi	r27, 0x00	; 0
    7af4:	ea 0e       	add	r14, r26
    7af6:	fb 1e       	adc	r15, r27
     switch(stMenuProduct){
	 case mpInitProduct:
	      //DisplayProductName
		  lcd_clear();
		  //lcd_printf(1,1,PSTR("Product:"));
	      for(i=0;i<6;i++){//234 
    7af8:	06 30       	cpi	r16, 0x06	; 6
    7afa:	11 05       	cpc	r17, r1
    7afc:	09 f6       	brne	.-126    	; 0x7a80 <FSettingProduct+0x84>
	          eeprom_read_block((void*) &strProductName, (const void*) &DefProductName[i], 13);
	          sprintf_P(lcdteks,PSTR("%d)%s"),(i+1),strProductName);
			  lcd_print((((i)%4)+1),(((i)/4)*10)+1,lcdteks);
		  }
		  lcd_printf(4,11,PSTR("*)Back"));
    7afe:	84 e0       	ldi	r24, 0x04	; 4
    7b00:	6b e0       	ldi	r22, 0x0B	; 11
    7b02:	43 e6       	ldi	r20, 0x63	; 99
    7b04:	53 e1       	ldi	r21, 0x13	; 19
    7b06:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
          stMenuProduct=mpChangeProduct;
    7b0a:	81 e0       	ldi	r24, 0x01	; 1
    7b0c:	4c c1       	rjmp	.+664    	; 0x7da6 <FSettingProduct+0x3aa>
	      break;
     case mpChangeProduct:
		  KeyPressed=_key_scan(1);
    7b0e:	81 e0       	ldi	r24, 0x01	; 1
    7b10:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <_key_scan>
    7b14:	08 2f       	mov	r16, r24
		  KeyChar=_key_btn(KeyPressed);
    7b16:	0e 94 49 a3 	call	0x14692	; 0x14692 <_key_btn>
		  if ((KeyChar>='1')&&(KeyChar<='6')){
    7b1a:	81 53       	subi	r24, 0x31	; 49
    7b1c:	86 30       	cpi	r24, 0x06	; 6
    7b1e:	28 f4       	brcc	.+10     	; 0x7b2a <FSettingProduct+0x12e>
		      ProdID=KeyChar-'1';
    7b20:	80 93 ff 02 	sts	0x02FF, r24
			  stMenuProduct=mpDispPrice;
    7b24:	82 e0       	ldi	r24, 0x02	; 2
    7b26:	80 93 00 03 	sts	0x0300, r24
		  }
		  if (KeyPressed==_KEY_CANCEL){
    7b2a:	07 3e       	cpi	r16, 0xE7	; 231
    7b2c:	09 f0       	breq	.+2      	; 0x7b30 <FSettingProduct+0x134>
    7b2e:	42 c1       	rjmp	.+644    	; 0x7db4 <FSettingProduct+0x3b8>
		      stMenuProduct=mpExitMenuProduct;
    7b30:	86 e0       	ldi	r24, 0x06	; 6
    7b32:	39 c1       	rjmp	.+626    	; 0x7da6 <FSettingProduct+0x3aa>
		  }
	      break;
     case mpDispPrice:
	 	  eeprom_read_block((void*) &strProductName, (const void*) &DefProductName[ProdID], 13);
    7b34:	60 91 ff 02 	lds	r22, 0x02FF
    7b38:	8d e0       	ldi	r24, 0x0D	; 13
    7b3a:	68 9f       	mul	r22, r24
    7b3c:	b0 01       	movw	r22, r0
    7b3e:	11 24       	eor	r1, r1
    7b40:	64 54       	subi	r22, 0x44	; 68
    7b42:	7f 4f       	sbci	r23, 0xFF	; 255
    7b44:	7e 01       	movw	r14, r28
    7b46:	08 94       	sec
    7b48:	e1 1c       	adc	r14, r1
    7b4a:	f1 1c       	adc	r15, r1
    7b4c:	c7 01       	movw	r24, r14
    7b4e:	4d e0       	ldi	r20, 0x0D	; 13
    7b50:	50 e0       	ldi	r21, 0x00	; 0
    7b52:	0e 94 56 aa 	call	0x154ac	; 0x154ac <__eerd_block_m128>
		  eeprom_read_block((void*) &strPrice, (const void*) &DefProductPrice[ProdID], 9);
    7b56:	62 e8       	ldi	r22, 0x82	; 130
    7b58:	c6 2e       	mov	r12, r22
    7b5a:	66 e0       	ldi	r22, 0x06	; 6
    7b5c:	d6 2e       	mov	r13, r22
    7b5e:	60 91 ff 02 	lds	r22, 0x02FF
    7b62:	89 e0       	ldi	r24, 0x09	; 9
    7b64:	68 9f       	mul	r22, r24
    7b66:	b0 01       	movw	r22, r0
    7b68:	11 24       	eor	r1, r1
    7b6a:	6a 57       	subi	r22, 0x7A	; 122
    7b6c:	7f 4f       	sbci	r23, 0xFF	; 255
    7b6e:	c6 01       	movw	r24, r12
    7b70:	49 e0       	ldi	r20, 0x09	; 9
    7b72:	50 e0       	ldi	r21, 0x00	; 0
    7b74:	0e 94 56 aa 	call	0x154ac	; 0x154ac <__eerd_block_m128>
		  sprintf_P(lcdteks,PSTR("1)%s"),strProductName);
    7b78:	00 d0       	rcall	.+0      	; 0x7b7a <FSettingProduct+0x17e>
    7b7a:	00 d0       	rcall	.+0      	; 0x7b7c <FSettingProduct+0x180>
    7b7c:	00 d0       	rcall	.+0      	; 0x7b7e <FSettingProduct+0x182>
    7b7e:	ed b7       	in	r30, 0x3d	; 61
    7b80:	fe b7       	in	r31, 0x3e	; 62
    7b82:	31 96       	adiw	r30, 0x01	; 1
    7b84:	8e 01       	movw	r16, r28
    7b86:	02 5f       	subi	r16, 0xF2	; 242
    7b88:	1f 4f       	sbci	r17, 0xFF	; 255
    7b8a:	ad b7       	in	r26, 0x3d	; 61
    7b8c:	be b7       	in	r27, 0x3e	; 62
    7b8e:	12 96       	adiw	r26, 0x02	; 2
    7b90:	1c 93       	st	X, r17
    7b92:	0e 93       	st	-X, r16
    7b94:	11 97       	sbiw	r26, 0x01	; 1
    7b96:	8e e5       	ldi	r24, 0x5E	; 94
    7b98:	93 e1       	ldi	r25, 0x13	; 19
    7b9a:	93 83       	std	Z+3, r25	; 0x03
    7b9c:	82 83       	std	Z+2, r24	; 0x02
    7b9e:	f5 82       	std	Z+5, r15	; 0x05
    7ba0:	e4 82       	std	Z+4, r14	; 0x04
    7ba2:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		  lcd_clear();lcd_print(1,1,lcdteks);
    7ba6:	8d b7       	in	r24, 0x3d	; 61
    7ba8:	9e b7       	in	r25, 0x3e	; 62
    7baa:	06 96       	adiw	r24, 0x06	; 6
    7bac:	0f b6       	in	r0, 0x3f	; 63
    7bae:	f8 94       	cli
    7bb0:	9e bf       	out	0x3e, r25	; 62
    7bb2:	0f be       	out	0x3f, r0	; 63
    7bb4:	8d bf       	out	0x3d, r24	; 61
    7bb6:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
    7bba:	81 e0       	ldi	r24, 0x01	; 1
    7bbc:	61 e0       	ldi	r22, 0x01	; 1
    7bbe:	a8 01       	movw	r20, r16
    7bc0:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
		  sprintf_P(lcdteks,PSTR("2)%s"),strPrice);
    7bc4:	00 d0       	rcall	.+0      	; 0x7bc6 <FSettingProduct+0x1ca>
    7bc6:	00 d0       	rcall	.+0      	; 0x7bc8 <FSettingProduct+0x1cc>
    7bc8:	00 d0       	rcall	.+0      	; 0x7bca <FSettingProduct+0x1ce>
    7bca:	ed b7       	in	r30, 0x3d	; 61
    7bcc:	fe b7       	in	r31, 0x3e	; 62
    7bce:	31 96       	adiw	r30, 0x01	; 1
    7bd0:	ad b7       	in	r26, 0x3d	; 61
    7bd2:	be b7       	in	r27, 0x3e	; 62
    7bd4:	12 96       	adiw	r26, 0x02	; 2
    7bd6:	1c 93       	st	X, r17
    7bd8:	0e 93       	st	-X, r16
    7bda:	11 97       	sbiw	r26, 0x01	; 1
    7bdc:	89 e5       	ldi	r24, 0x59	; 89
    7bde:	93 e1       	ldi	r25, 0x13	; 19
    7be0:	93 83       	std	Z+3, r25	; 0x03
    7be2:	82 83       	std	Z+2, r24	; 0x02
    7be4:	d5 82       	std	Z+5, r13	; 0x05
    7be6:	c4 82       	std	Z+4, r12	; 0x04
    7be8:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		  lcd_print(2,1,lcdteks);
    7bec:	8d b7       	in	r24, 0x3d	; 61
    7bee:	9e b7       	in	r25, 0x3e	; 62
    7bf0:	06 96       	adiw	r24, 0x06	; 6
    7bf2:	0f b6       	in	r0, 0x3f	; 63
    7bf4:	f8 94       	cli
    7bf6:	9e bf       	out	0x3e, r25	; 62
    7bf8:	0f be       	out	0x3f, r0	; 63
    7bfa:	8d bf       	out	0x3d, r24	; 61
    7bfc:	82 e0       	ldi	r24, 0x02	; 2
    7bfe:	61 e0       	ldi	r22, 0x01	; 1
    7c00:	a8 01       	movw	r20, r16
    7c02:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
		  lcd_printf(4,1,PSTR("*)Back       "));
    7c06:	84 e0       	ldi	r24, 0x04	; 4
    7c08:	61 e0       	ldi	r22, 0x01	; 1
    7c0a:	4b e4       	ldi	r20, 0x4B	; 75
    7c0c:	53 e1       	ldi	r21, 0x13	; 19
    7c0e:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  stMenuProduct=mpIsEdit;
    7c12:	83 e0       	ldi	r24, 0x03	; 3
    7c14:	c8 c0       	rjmp	.+400    	; 0x7da6 <FSettingProduct+0x3aa>
	      break;
     case mpIsEdit:
		  KeyPressed=_key_scan(1);
    7c16:	81 e0       	ldi	r24, 0x01	; 1
    7c18:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
    7c1c:	0e 94 49 a3 	call	0x14692	; 0x14692 <_key_btn>
		  if (KeyChar=='*'){
    7c20:	8a 32       	cpi	r24, 0x2A	; 42
    7c22:	09 f4       	brne	.+2      	; 0x7c26 <FSettingProduct+0x22a>
    7c24:	9e c0       	rjmp	.+316    	; 0x7d62 <FSettingProduct+0x366>
		      stMenuProduct=mpInitProduct;
		  }else
		  if (KeyChar=='1'){
    7c26:	81 33       	cpi	r24, 0x31	; 49
    7c28:	09 f0       	breq	.+2      	; 0x7c2c <FSettingProduct+0x230>
    7c2a:	49 c0       	rjmp	.+146    	; 0x7cbe <FSettingProduct+0x2c2>
		      eeprom_read_block((void*) &strProductName, (const void*) &DefProductName[ProdID], 13);
    7c2c:	60 91 ff 02 	lds	r22, 0x02FF
    7c30:	8d e0       	ldi	r24, 0x0D	; 13
    7c32:	68 9f       	mul	r22, r24
    7c34:	b0 01       	movw	r22, r0
    7c36:	11 24       	eor	r1, r1
    7c38:	64 54       	subi	r22, 0x44	; 68
    7c3a:	7f 4f       	sbci	r23, 0xFF	; 255
    7c3c:	7e 01       	movw	r14, r28
    7c3e:	08 94       	sec
    7c40:	e1 1c       	adc	r14, r1
    7c42:	f1 1c       	adc	r15, r1
    7c44:	c7 01       	movw	r24, r14
    7c46:	4d e0       	ldi	r20, 0x0D	; 13
    7c48:	50 e0       	ldi	r21, 0x00	; 0
    7c4a:	0e 94 56 aa 	call	0x154ac	; 0x154ac <__eerd_block_m128>
		      sprintf_P(lcdteks,PSTR("Old:%s"),strProductName);
    7c4e:	00 d0       	rcall	.+0      	; 0x7c50 <FSettingProduct+0x254>
    7c50:	00 d0       	rcall	.+0      	; 0x7c52 <FSettingProduct+0x256>
    7c52:	00 d0       	rcall	.+0      	; 0x7c54 <FSettingProduct+0x258>
    7c54:	ed b7       	in	r30, 0x3d	; 61
    7c56:	fe b7       	in	r31, 0x3e	; 62
    7c58:	31 96       	adiw	r30, 0x01	; 1
    7c5a:	8e 01       	movw	r16, r28
    7c5c:	02 5f       	subi	r16, 0xF2	; 242
    7c5e:	1f 4f       	sbci	r17, 0xFF	; 255
    7c60:	ad b7       	in	r26, 0x3d	; 61
    7c62:	be b7       	in	r27, 0x3e	; 62
    7c64:	12 96       	adiw	r26, 0x02	; 2
    7c66:	1c 93       	st	X, r17
    7c68:	0e 93       	st	-X, r16
    7c6a:	11 97       	sbiw	r26, 0x01	; 1
    7c6c:	84 e4       	ldi	r24, 0x44	; 68
    7c6e:	93 e1       	ldi	r25, 0x13	; 19
    7c70:	93 83       	std	Z+3, r25	; 0x03
    7c72:	82 83       	std	Z+2, r24	; 0x02
    7c74:	f5 82       	std	Z+5, r15	; 0x05
    7c76:	e4 82       	std	Z+4, r14	; 0x04
    7c78:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
			  lcd_printf(1,1,PSTR("Edit Product Name   "));
    7c7c:	8d b7       	in	r24, 0x3d	; 61
    7c7e:	9e b7       	in	r25, 0x3e	; 62
    7c80:	06 96       	adiw	r24, 0x06	; 6
    7c82:	0f b6       	in	r0, 0x3f	; 63
    7c84:	f8 94       	cli
    7c86:	9e bf       	out	0x3e, r25	; 62
    7c88:	0f be       	out	0x3f, r0	; 63
    7c8a:	8d bf       	out	0x3d, r24	; 61
    7c8c:	81 e0       	ldi	r24, 0x01	; 1
    7c8e:	61 e0       	ldi	r22, 0x01	; 1
    7c90:	4f e2       	ldi	r20, 0x2F	; 47
    7c92:	53 e1       	ldi	r21, 0x13	; 19
    7c94:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		       lcd_print(2,1,lcdteks);
    7c98:	82 e0       	ldi	r24, 0x02	; 2
    7c9a:	61 e0       	ldi	r22, 0x01	; 1
    7c9c:	a8 01       	movw	r20, r16
    7c9e:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
			  lcd_printf(3,1,PSTR("New:_"));
    7ca2:	83 e0       	ldi	r24, 0x03	; 3
    7ca4:	61 e0       	ldi	r22, 0x01	; 1
    7ca6:	49 e2       	ldi	r20, 0x29	; 41
    7ca8:	53 e1       	ldi	r21, 0x13	; 19
    7caa:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		      lcd_printf(4,1,PSTR("*)Back    #)OK      "));
    7cae:	84 e0       	ldi	r24, 0x04	; 4
    7cb0:	61 e0       	ldi	r22, 0x01	; 1
    7cb2:	44 e1       	ldi	r20, 0x14	; 20
    7cb4:	53 e1       	ldi	r21, 0x13	; 19
    7cb6:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		      stMenuProduct=mpEditProductName;
    7cba:	85 e0       	ldi	r24, 0x05	; 5
    7cbc:	74 c0       	rjmp	.+232    	; 0x7da6 <FSettingProduct+0x3aa>
		  }else
		  if (KeyChar=='2'){
    7cbe:	82 33       	cpi	r24, 0x32	; 50
    7cc0:	09 f0       	breq	.+2      	; 0x7cc4 <FSettingProduct+0x2c8>
    7cc2:	78 c0       	rjmp	.+240    	; 0x7db4 <FSettingProduct+0x3b8>
		      uiResult=USER_NONE;
		      sprintf_P(lcdteks,PSTR("Old:%s"),strPrice);
    7cc4:	00 d0       	rcall	.+0      	; 0x7cc6 <FSettingProduct+0x2ca>
    7cc6:	00 d0       	rcall	.+0      	; 0x7cc8 <FSettingProduct+0x2cc>
    7cc8:	00 d0       	rcall	.+0      	; 0x7cca <FSettingProduct+0x2ce>
    7cca:	ed b7       	in	r30, 0x3d	; 61
    7ccc:	fe b7       	in	r31, 0x3e	; 62
    7cce:	31 96       	adiw	r30, 0x01	; 1
    7cd0:	8e 01       	movw	r16, r28
    7cd2:	02 5f       	subi	r16, 0xF2	; 242
    7cd4:	1f 4f       	sbci	r17, 0xFF	; 255
    7cd6:	ad b7       	in	r26, 0x3d	; 61
    7cd8:	be b7       	in	r27, 0x3e	; 62
    7cda:	12 96       	adiw	r26, 0x02	; 2
    7cdc:	1c 93       	st	X, r17
    7cde:	0e 93       	st	-X, r16
    7ce0:	11 97       	sbiw	r26, 0x01	; 1
    7ce2:	8d e0       	ldi	r24, 0x0D	; 13
    7ce4:	93 e1       	ldi	r25, 0x13	; 19
    7ce6:	93 83       	std	Z+3, r25	; 0x03
    7ce8:	82 83       	std	Z+2, r24	; 0x02
    7cea:	82 e8       	ldi	r24, 0x82	; 130
    7cec:	96 e0       	ldi	r25, 0x06	; 6
    7cee:	95 83       	std	Z+5, r25	; 0x05
    7cf0:	84 83       	std	Z+4, r24	; 0x04
    7cf2:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		       lcd_print(2,1,lcdteks);
    7cf6:	8d b7       	in	r24, 0x3d	; 61
    7cf8:	9e b7       	in	r25, 0x3e	; 62
    7cfa:	06 96       	adiw	r24, 0x06	; 6
    7cfc:	0f b6       	in	r0, 0x3f	; 63
    7cfe:	f8 94       	cli
    7d00:	9e bf       	out	0x3e, r25	; 62
    7d02:	0f be       	out	0x3f, r0	; 63
    7d04:	8d bf       	out	0x3d, r24	; 61
    7d06:	82 e0       	ldi	r24, 0x02	; 2
    7d08:	61 e0       	ldi	r22, 0x01	; 1
    7d0a:	a8 01       	movw	r20, r16
    7d0c:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
			  lcd_printf(3,1,PSTR("New:_"));
    7d10:	83 e0       	ldi	r24, 0x03	; 3
    7d12:	61 e0       	ldi	r22, 0x01	; 1
    7d14:	47 e0       	ldi	r20, 0x07	; 7
    7d16:	53 e1       	ldi	r21, 0x13	; 19
    7d18:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		      lcd_printf(4,1,PSTR("*)Back    #)OK      "));
    7d1c:	84 e0       	ldi	r24, 0x04	; 4
    7d1e:	61 e0       	ldi	r22, 0x01	; 1
    7d20:	42 ef       	ldi	r20, 0xF2	; 242
    7d22:	52 e1       	ldi	r21, 0x12	; 18
    7d24:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		      stMenuProduct=mpEditPrice;
    7d28:	84 e0       	ldi	r24, 0x04	; 4
    7d2a:	3d c0       	rjmp	.+122    	; 0x7da6 <FSettingProduct+0x3aa>
		  }
	      break;
     case mpEditProductName:
	      uiResult=UserInput(UI_ALPHANUM_R,3,5,strDescription,0,10);
    7d2c:	83 e0       	ldi	r24, 0x03	; 3
    7d2e:	63 e0       	ldi	r22, 0x03	; 3
    7d30:	45 e0       	ldi	r20, 0x05	; 5
    7d32:	26 e0       	ldi	r18, 0x06	; 6
    7d34:	39 e0       	ldi	r19, 0x09	; 9
    7d36:	00 e0       	ldi	r16, 0x00	; 0
    7d38:	10 e0       	ldi	r17, 0x00	; 0
    7d3a:	5a e0       	ldi	r21, 0x0A	; 10
    7d3c:	e5 2e       	mov	r14, r21
    7d3e:	0e 94 d3 39 	call	0x73a6	; 0x73a6 <UserInput>
		  if (uiResult==USER_OK){
    7d42:	83 30       	cpi	r24, 0x03	; 3
    7d44:	69 f5       	brne	.+90     	; 0x7da0 <FSettingProduct+0x3a4>
		      eeprom_write_block((const void*)&strDescription,(void*)&DefProductName[ProdID], 13);
    7d46:	60 91 ff 02 	lds	r22, 0x02FF
    7d4a:	8d e0       	ldi	r24, 0x0D	; 13
    7d4c:	68 9f       	mul	r22, r24
    7d4e:	b0 01       	movw	r22, r0
    7d50:	11 24       	eor	r1, r1
    7d52:	64 54       	subi	r22, 0x44	; 68
    7d54:	7f 4f       	sbci	r23, 0xFF	; 255
    7d56:	86 e0       	ldi	r24, 0x06	; 6
    7d58:	99 e0       	ldi	r25, 0x09	; 9
    7d5a:	4d e0       	ldi	r20, 0x0D	; 13
    7d5c:	50 e0       	ldi	r21, 0x00	; 0
    7d5e:	0e 94 6e aa 	call	0x154dc	; 0x154dc <__eewr_block_m128>
		      stMenuProduct=mpInitProduct;
    7d62:	10 92 00 03 	sts	0x0300, r1
    7d66:	26 c0       	rjmp	.+76     	; 0x7db4 <FSettingProduct+0x3b8>
			  }
		  else
		  if (uiResult==USER_CANCEL)stMenuProduct=mpDispPrice;
	      break;
     case mpEditPrice:
	      uiResult=UserInput(UI_NUMBER_R,3,5,strPrice,0,7);
    7d68:	81 e0       	ldi	r24, 0x01	; 1
    7d6a:	63 e0       	ldi	r22, 0x03	; 3
    7d6c:	45 e0       	ldi	r20, 0x05	; 5
    7d6e:	22 e8       	ldi	r18, 0x82	; 130
    7d70:	36 e0       	ldi	r19, 0x06	; 6
    7d72:	00 e0       	ldi	r16, 0x00	; 0
    7d74:	10 e0       	ldi	r17, 0x00	; 0
    7d76:	97 e0       	ldi	r25, 0x07	; 7
    7d78:	e9 2e       	mov	r14, r25
    7d7a:	0e 94 d3 39 	call	0x73a6	; 0x73a6 <UserInput>
		  if (uiResult==USER_OK){
    7d7e:	83 30       	cpi	r24, 0x03	; 3
    7d80:	79 f4       	brne	.+30     	; 0x7da0 <FSettingProduct+0x3a4>
		      eeprom_write_block((const void*)&strPrice,(void*)&DefProductPrice[ProdID], 9);
    7d82:	60 91 ff 02 	lds	r22, 0x02FF
    7d86:	89 e0       	ldi	r24, 0x09	; 9
    7d88:	68 9f       	mul	r22, r24
    7d8a:	b0 01       	movw	r22, r0
    7d8c:	11 24       	eor	r1, r1
    7d8e:	6a 57       	subi	r22, 0x7A	; 122
    7d90:	7f 4f       	sbci	r23, 0xFF	; 255
    7d92:	82 e8       	ldi	r24, 0x82	; 130
    7d94:	96 e0       	ldi	r25, 0x06	; 6
    7d96:	49 e0       	ldi	r20, 0x09	; 9
    7d98:	50 e0       	ldi	r21, 0x00	; 0
    7d9a:	0e 94 6e aa 	call	0x154dc	; 0x154dc <__eewr_block_m128>
    7d9e:	02 c0       	rjmp	.+4      	; 0x7da4 <FSettingProduct+0x3a8>
		      stMenuProduct=mpDispPrice;//stMenuProduct=mpInit;
			  }
		  else
		  if (uiResult==USER_CANCEL)stMenuProduct=mpDispPrice;
    7da0:	81 30       	cpi	r24, 0x01	; 1
    7da2:	41 f4       	brne	.+16     	; 0x7db4 <FSettingProduct+0x3b8>
    7da4:	82 e0       	ldi	r24, 0x02	; 2
    7da6:	80 93 00 03 	sts	0x0300, r24
    7daa:	04 c0       	rjmp	.+8      	; 0x7db4 <FSettingProduct+0x3b8>
	      break;
     case mpExitMenuProduct:
	      stMenuProduct=mpInitProduct;
    7dac:	10 92 00 03 	sts	0x0300, r1
	      Result=MENU_DONE;
    7db0:	81 e0       	ldi	r24, 0x01	; 1
	      break;
    7db2:	01 c0       	rjmp	.+2      	; 0x7db6 <FSettingProduct+0x3ba>
     char KeyPressed,KeyChar,uiResult=USER_NONE;
     char i;//,x,y;
	 char strProductName[13],lcdteks[20];
	 char Result=MENU_NONE;
	 
     Result=MENU_NONE;
    7db4:	80 e0       	ldi	r24, 0x00	; 0
	      stMenuProduct=mpInitProduct;
	      Result=MENU_DONE;
	      break;
	 }
   return Result;
}
    7db6:	a1 96       	adiw	r28, 0x21	; 33
    7db8:	0f b6       	in	r0, 0x3f	; 63
    7dba:	f8 94       	cli
    7dbc:	de bf       	out	0x3e, r29	; 62
    7dbe:	0f be       	out	0x3f, r0	; 63
    7dc0:	cd bf       	out	0x3d, r28	; 61
    7dc2:	cf 91       	pop	r28
    7dc4:	df 91       	pop	r29
    7dc6:	1f 91       	pop	r17
    7dc8:	0f 91       	pop	r16
    7dca:	ff 90       	pop	r15
    7dcc:	ef 90       	pop	r14
    7dce:	df 90       	pop	r13
    7dd0:	cf 90       	pop	r12
    7dd2:	bf 90       	pop	r11
    7dd4:	af 90       	pop	r10
    7dd6:	9f 90       	pop	r9
    7dd8:	7f 90       	pop	r7
    7dda:	6f 90       	pop	r6
    7ddc:	08 95       	ret

00007dde <FormatDate>:
	 }     
   }
}

              //Fmt:DATE_LONG_YEAR,DATE_SHORT_YEAR //0123456789    0123456789 
void FormatDate(char FmtYear, char *Date){         //2010/06/16 -> 16/06/2010
    7dde:	df 93       	push	r29
    7de0:	cf 93       	push	r28
    7de2:	cd b7       	in	r28, 0x3d	; 61
    7de4:	de b7       	in	r29, 0x3e	; 62
    7de6:	2b 97       	sbiw	r28, 0x0b	; 11
    7de8:	0f b6       	in	r0, 0x3f	; 63
    7dea:	f8 94       	cli
    7dec:	de bf       	out	0x3e, r29	; 62
    7dee:	0f be       	out	0x3f, r0	; 63
    7df0:	cd bf       	out	0x3d, r28	; 61
    7df2:	fb 01       	movw	r30, r22
     char i,sDate[11];

     sDate[0]=Date[8];
    7df4:	90 85       	ldd	r25, Z+8	; 0x08
    7df6:	99 83       	std	Y+1, r25	; 0x01
	 sDate[1]=Date[9];
    7df8:	91 85       	ldd	r25, Z+9	; 0x09
    7dfa:	9a 83       	std	Y+2, r25	; 0x02
     sDate[2]=Date[7];
    7dfc:	97 81       	ldd	r25, Z+7	; 0x07
    7dfe:	9b 83       	std	Y+3, r25	; 0x03
	 sDate[3]=Date[5];
    7e00:	95 81       	ldd	r25, Z+5	; 0x05
    7e02:	9c 83       	std	Y+4, r25	; 0x04
     sDate[4]=Date[6];
    7e04:	96 81       	ldd	r25, Z+6	; 0x06
    7e06:	9d 83       	std	Y+5, r25	; 0x05
	 sDate[5]=Date[4];
    7e08:	94 81       	ldd	r25, Z+4	; 0x04
    7e0a:	9e 83       	std	Y+6, r25	; 0x06
	 switch(FmtYear){
    7e0c:	88 23       	and	r24, r24
    7e0e:	41 f0       	breq	.+16     	; 0x7e20 <FormatDate+0x42>
    7e10:	81 30       	cpi	r24, 0x01	; 1
    7e12:	79 f4       	brne	.+30     	; 0x7e32 <FormatDate+0x54>
	 case DATE_LONG_YEAR:
	 	  for(i=0;i<4;i++)sDate[i+6]=Date[i];
          sDate[10]=0;
	      break;
	 case DATE_SHORT_YEAR:
	      for(i=0;i<2;i++)sDate[i+6]=Date[i+2];
    7e14:	82 81       	ldd	r24, Z+2	; 0x02
    7e16:	8f 83       	std	Y+7, r24	; 0x07
    7e18:	83 81       	ldd	r24, Z+3	; 0x03
    7e1a:	88 87       	std	Y+8, r24	; 0x08
          sDate[8]=0;
    7e1c:	19 86       	std	Y+9, r1	; 0x09
	      break;
    7e1e:	09 c0       	rjmp	.+18     	; 0x7e32 <FormatDate+0x54>
	 sDate[3]=Date[5];
     sDate[4]=Date[6];
	 sDate[5]=Date[4];
	 switch(FmtYear){
	 case DATE_LONG_YEAR:
	 	  for(i=0;i<4;i++)sDate[i+6]=Date[i];
    7e20:	80 81       	ld	r24, Z
    7e22:	8f 83       	std	Y+7, r24	; 0x07
    7e24:	81 81       	ldd	r24, Z+1	; 0x01
    7e26:	88 87       	std	Y+8, r24	; 0x08
    7e28:	82 81       	ldd	r24, Z+2	; 0x02
    7e2a:	89 87       	std	Y+9, r24	; 0x09
    7e2c:	83 81       	ldd	r24, Z+3	; 0x03
    7e2e:	8a 87       	std	Y+10, r24	; 0x0a
          sDate[10]=0;
    7e30:	1b 86       	std	Y+11, r1	; 0x0b
	 }     
   }
}

              //Fmt:DATE_LONG_YEAR,DATE_SHORT_YEAR //0123456789    0123456789 
void FormatDate(char FmtYear, char *Date){         //2010/06/16 -> 16/06/2010
    7e32:	40 e0       	ldi	r20, 0x00	; 0
	      for(i=0;i<2;i++)sDate[i+6]=Date[i+2];
          sDate[8]=0;
	      break;
	 }
	 //replace
	 for(i=0;i<strlen(sDate);i++)Date[i]=sDate[i];
    7e34:	ce 01       	movw	r24, r28
    7e36:	01 96       	adiw	r24, 0x01	; 1
    7e38:	0a c0       	rjmp	.+20     	; 0x7e4e <FormatDate+0x70>
    7e3a:	bf 01       	movw	r22, r30
    7e3c:	62 0f       	add	r22, r18
    7e3e:	73 1f       	adc	r23, r19
    7e40:	28 0f       	add	r18, r24
    7e42:	39 1f       	adc	r19, r25
    7e44:	d9 01       	movw	r26, r18
    7e46:	2c 91       	ld	r18, X
    7e48:	db 01       	movw	r26, r22
    7e4a:	2c 93       	st	X, r18
    7e4c:	4f 5f       	subi	r20, 0xFF	; 255
    7e4e:	24 2f       	mov	r18, r20
    7e50:	30 e0       	ldi	r19, 0x00	; 0
    7e52:	dc 01       	movw	r26, r24
    7e54:	0d 90       	ld	r0, X+
    7e56:	00 20       	and	r0, r0
    7e58:	e9 f7       	brne	.-6      	; 0x7e54 <FormatDate+0x76>
    7e5a:	11 97       	sbiw	r26, 0x01	; 1
    7e5c:	a8 1b       	sub	r26, r24
    7e5e:	b9 0b       	sbc	r27, r25
    7e60:	2a 17       	cp	r18, r26
    7e62:	3b 07       	cpc	r19, r27
    7e64:	50 f3       	brcs	.-44     	; 0x7e3a <FormatDate+0x5c>
}
    7e66:	2b 96       	adiw	r28, 0x0b	; 11
    7e68:	0f b6       	in	r0, 0x3f	; 63
    7e6a:	f8 94       	cli
    7e6c:	de bf       	out	0x3e, r29	; 62
    7e6e:	0f be       	out	0x3f, r0	; 63
    7e70:	cd bf       	out	0x3d, r28	; 61
    7e72:	cf 91       	pop	r28
    7e74:	df 91       	pop	r29
    7e76:	08 95       	ret

00007e78 <StrAlignCenter>:

void StrAlignCenter(char *Source, unsigned int Length){
    7e78:	0f 93       	push	r16
    7e7a:	1f 93       	push	r17
    7e7c:	cf 93       	push	r28
    7e7e:	df 93       	push	r29
    7e80:	8c 01       	movw	r16, r24
    7e82:	eb 01       	movw	r28, r22
char nAddedSpace,srcLength;
     RemSpaceLag(Source);
    7e84:	0e 94 f7 38 	call	0x71ee	; 0x71ee <RemSpaceLag>
	 RemSpaceLead(Source);
    7e88:	c8 01       	movw	r24, r16
    7e8a:	0e 94 4b 39 	call	0x7296	; 0x7296 <RemSpaceLead>
	 srcLength=strlen(Source);
    7e8e:	d8 01       	movw	r26, r16
    7e90:	0d 90       	ld	r0, X+
    7e92:	00 20       	and	r0, r0
    7e94:	e9 f7       	brne	.-6      	; 0x7e90 <StrAlignCenter+0x18>
    7e96:	11 97       	sbiw	r26, 0x01	; 1
    7e98:	a0 1b       	sub	r26, r16
     nAddedSpace=(Length-srcLength)/2;
    7e9a:	9e 01       	movw	r18, r28
    7e9c:	2a 1b       	sub	r18, r26
    7e9e:	31 09       	sbc	r19, r1
    7ea0:	36 95       	lsr	r19
    7ea2:	27 95       	ror	r18
     AddSpaceLead(Source,srcLength+nAddedSpace);
    7ea4:	6a 2f       	mov	r22, r26
    7ea6:	62 0f       	add	r22, r18
    7ea8:	c8 01       	movw	r24, r16
    7eaa:	0e 94 93 27 	call	0x4f26	; 0x4f26 <AddSpaceLead>
	 AddSpaceLag(Source,Length);
    7eae:	c8 01       	movw	r24, r16
    7eb0:	6c 2f       	mov	r22, r28
    7eb2:	0e 94 7d 27 	call	0x4efa	; 0x4efa <AddSpaceLag>
}
    7eb6:	df 91       	pop	r29
    7eb8:	cf 91       	pop	r28
    7eba:	1f 91       	pop	r17
    7ebc:	0f 91       	pop	r16
    7ebe:	08 95       	ret

00007ec0 <StrPosCopy>:

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
    7ec0:	fa 01       	movw	r30, r20
    7ec2:	e8 0f       	add	r30, r24
    7ec4:	f9 1f       	adc	r31, r25
unsigned int i;
     for(i=0;i<Length;i++){
    7ec6:	db 01       	movw	r26, r22
    7ec8:	80 e0       	ldi	r24, 0x00	; 0
    7eca:	90 e0       	ldi	r25, 0x00	; 0
    7ecc:	03 c0       	rjmp	.+6      	; 0x7ed4 <StrPosCopy+0x14>
	    Dest[i]=Source[IdxSource+i];
    7ece:	41 91       	ld	r20, Z+
    7ed0:	4d 93       	st	X+, r20
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    7ed2:	01 96       	adiw	r24, 0x01	; 1
    7ed4:	82 17       	cp	r24, r18
    7ed6:	93 07       	cpc	r25, r19
    7ed8:	d0 f3       	brcs	.-12     	; 0x7ece <StrPosCopy+0xe>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    7eda:	62 0f       	add	r22, r18
    7edc:	73 1f       	adc	r23, r19
    7ede:	fb 01       	movw	r30, r22
    7ee0:	10 82       	st	Z, r1
}
    7ee2:	08 95       	ret

00007ee4 <FSettingOperator>:
char FSettingHost(){
     _menu_host();
	 return MENU_DONE;
}

char FSettingOperator(){//Change Active Operator, Change Password
    7ee4:	ef 92       	push	r14
    7ee6:	ff 92       	push	r15
    7ee8:	0f 93       	push	r16
    7eea:	1f 93       	push	r17
    7eec:	df 93       	push	r29
    7eee:	cf 93       	push	r28
    7ef0:	cd b7       	in	r28, 0x3d	; 61
    7ef2:	de b7       	in	r29, 0x3e	; 62
    7ef4:	e5 97       	sbiw	r28, 0x35	; 53
    7ef6:	0f b6       	in	r0, 0x3f	; 63
    7ef8:	f8 94       	cli
    7efa:	de bf       	out	0x3e, r29	; 62
    7efc:	0f be       	out	0x3f, r0	; 63
    7efe:	cd bf       	out	0x3d, r28	; 61
	        char KeyPressed,KeyChar,lcdteks[20],strPassword[15];
			char strOperatorName[18];
			char uiResult=USER_NONE,Result=MENU_NONE;

	 Result=MENU_NONE;
	 switch(stSettingOperator){
    7f00:	80 91 fd 02 	lds	r24, 0x02FD
    7f04:	87 30       	cpi	r24, 0x07	; 7
    7f06:	09 f4       	brne	.+2      	; 0x7f0a <FSettingOperator+0x26>
    7f08:	68 c1       	rjmp	.+720    	; 0x81da <FSettingOperator+0x2f6>
    7f0a:	88 30       	cpi	r24, 0x08	; 8
    7f0c:	90 f4       	brcc	.+36     	; 0x7f32 <FSettingOperator+0x4e>
    7f0e:	83 30       	cpi	r24, 0x03	; 3
    7f10:	09 f4       	brne	.+2      	; 0x7f14 <FSettingOperator+0x30>
    7f12:	9f c0       	rjmp	.+318    	; 0x8052 <FSettingOperator+0x16e>
    7f14:	84 30       	cpi	r24, 0x04	; 4
    7f16:	30 f4       	brcc	.+12     	; 0x7f24 <FSettingOperator+0x40>
    7f18:	81 30       	cpi	r24, 0x01	; 1
    7f1a:	d1 f1       	breq	.+116    	; 0x7f90 <FSettingOperator+0xac>
    7f1c:	82 30       	cpi	r24, 0x02	; 2
    7f1e:	08 f0       	brcs	.+2      	; 0x7f22 <FSettingOperator+0x3e>
    7f20:	4a c0       	rjmp	.+148    	; 0x7fb6 <FSettingOperator+0xd2>
    7f22:	20 c0       	rjmp	.+64     	; 0x7f64 <FSettingOperator+0x80>
    7f24:	85 30       	cpi	r24, 0x05	; 5
    7f26:	09 f4       	brne	.+2      	; 0x7f2a <FSettingOperator+0x46>
    7f28:	29 c1       	rjmp	.+594    	; 0x817c <FSettingOperator+0x298>
    7f2a:	86 30       	cpi	r24, 0x06	; 6
    7f2c:	08 f0       	brcs	.+2      	; 0x7f30 <FSettingOperator+0x4c>
    7f2e:	42 c1       	rjmp	.+644    	; 0x81b4 <FSettingOperator+0x2d0>
    7f30:	f9 c0       	rjmp	.+498    	; 0x8124 <FSettingOperator+0x240>
    7f32:	8b 30       	cpi	r24, 0x0B	; 11
    7f34:	09 f4       	brne	.+2      	; 0x7f38 <FSettingOperator+0x54>
    7f36:	13 c2       	rjmp	.+1062   	; 0x835e <FSettingOperator+0x47a>
    7f38:	8c 30       	cpi	r24, 0x0C	; 12
    7f3a:	38 f4       	brcc	.+14     	; 0x7f4a <FSettingOperator+0x66>
    7f3c:	89 30       	cpi	r24, 0x09	; 9
    7f3e:	09 f4       	brne	.+2      	; 0x7f42 <FSettingOperator+0x5e>
    7f40:	9a c1       	rjmp	.+820    	; 0x8276 <FSettingOperator+0x392>
    7f42:	8a 30       	cpi	r24, 0x0A	; 10
    7f44:	08 f0       	brcs	.+2      	; 0x7f48 <FSettingOperator+0x64>
    7f46:	cc c1       	rjmp	.+920    	; 0x82e0 <FSettingOperator+0x3fc>
    7f48:	68 c1       	rjmp	.+720    	; 0x821a <FSettingOperator+0x336>
    7f4a:	8d 30       	cpi	r24, 0x0D	; 13
    7f4c:	09 f4       	brne	.+2      	; 0x7f50 <FSettingOperator+0x6c>
    7f4e:	86 c2       	rjmp	.+1292   	; 0x845c <FSettingOperator+0x578>
    7f50:	8d 30       	cpi	r24, 0x0D	; 13
    7f52:	08 f4       	brcc	.+2      	; 0x7f56 <FSettingOperator+0x72>
    7f54:	0b c2       	rjmp	.+1046   	; 0x836c <FSettingOperator+0x488>
    7f56:	8e 30       	cpi	r24, 0x0E	; 14
    7f58:	09 f4       	brne	.+2      	; 0x7f5c <FSettingOperator+0x78>
    7f5a:	85 c2       	rjmp	.+1290   	; 0x8466 <FSettingOperator+0x582>
    7f5c:	8f 30       	cpi	r24, 0x0F	; 15
    7f5e:	09 f0       	breq	.+2      	; 0x7f62 <FSettingOperator+0x7e>
    7f60:	8d c2       	rjmp	.+1306   	; 0x847c <FSettingOperator+0x598>
    7f62:	88 c2       	rjmp	.+1296   	; 0x8474 <FSettingOperator+0x590>
	 case soMenuOption:
	      lcd_clear();
    7f64:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
		  lcd_printf(1,1,PSTR("1.Change Operator"));
    7f68:	81 e0       	ldi	r24, 0x01	; 1
    7f6a:	61 e0       	ldi	r22, 0x01	; 1
    7f6c:	4a e3       	ldi	r20, 0x3A	; 58
    7f6e:	52 e1       	ldi	r21, 0x12	; 18
    7f70:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  lcd_printf(2,1,PSTR("2.Change Password"));
    7f74:	82 e0       	ldi	r24, 0x02	; 2
    7f76:	61 e0       	ldi	r22, 0x01	; 1
    7f78:	48 e2       	ldi	r20, 0x28	; 40
    7f7a:	52 e1       	ldi	r21, 0x12	; 18
    7f7c:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  lcd_printf(4,1,PSTR("[*]Back          "));
    7f80:	84 e0       	ldi	r24, 0x04	; 4
    7f82:	61 e0       	ldi	r22, 0x01	; 1
    7f84:	46 e1       	ldi	r20, 0x16	; 22
    7f86:	52 e1       	ldi	r21, 0x12	; 18
    7f88:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
          stSettingOperator=soMenuOptionInput;
    7f8c:	81 e0       	ldi	r24, 0x01	; 1
    7f8e:	3a c2       	rjmp	.+1140   	; 0x8404 <FSettingOperator+0x520>
	      break;
     case soMenuOptionInput:
	      KeyPressed=_key_scan(1);
    7f90:	81 e0       	ldi	r24, 0x01	; 1
    7f92:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
    7f96:	0e 94 49 a3 	call	0x14692	; 0x14692 <_key_btn>
		  switch(KeyChar){
    7f9a:	81 33       	cpi	r24, 0x31	; 49
    7f9c:	31 f0       	breq	.+12     	; 0x7faa <FSettingOperator+0xc6>
    7f9e:	82 33       	cpi	r24, 0x32	; 50
    7fa0:	31 f0       	breq	.+12     	; 0x7fae <FSettingOperator+0xca>
    7fa2:	8a 32       	cpi	r24, 0x2A	; 42
    7fa4:	09 f0       	breq	.+2      	; 0x7fa8 <FSettingOperator+0xc4>
    7fa6:	6a c2       	rjmp	.+1236   	; 0x847c <FSettingOperator+0x598>
    7fa8:	04 c0       	rjmp	.+8      	; 0x7fb2 <FSettingOperator+0xce>
		  case '1':
		       stSettingOperator=soChangeOperatorInit;
    7faa:	82 e0       	ldi	r24, 0x02	; 2
    7fac:	2b c2       	rjmp	.+1110   	; 0x8404 <FSettingOperator+0x520>
		       break;
          case '2':
		       stSettingOperator=soChangePasswordInit;
    7fae:	85 e0       	ldi	r24, 0x05	; 5
    7fb0:	29 c2       	rjmp	.+1106   	; 0x8404 <FSettingOperator+0x520>
		       break;
          case '*':
		       stSettingOperator=soExitSettingOperator;
    7fb2:	8f e0       	ldi	r24, 0x0F	; 15
    7fb4:	27 c2       	rjmp	.+1102   	; 0x8404 <FSettingOperator+0x520>
		       break;
		  }
	      break;
     case soChangeOperatorInit:
	      lcd_clear();		  
    7fb6:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
		  eeprom_read_block((void*) &strOperatorName, (const void*) &DefOperatorName,18);
    7fba:	8e 01       	movw	r16, r28
    7fbc:	00 5f       	subi	r16, 0xF0	; 240
    7fbe:	1f 4f       	sbci	r17, 0xFF	; 255
    7fc0:	c8 01       	movw	r24, r16
    7fc2:	65 e1       	ldi	r22, 0x15	; 21
    7fc4:	70 e0       	ldi	r23, 0x00	; 0
    7fc6:	42 e1       	ldi	r20, 0x12	; 18
    7fc8:	50 e0       	ldi	r21, 0x00	; 0
    7fca:	0e 94 56 aa 	call	0x154ac	; 0x154ac <__eerd_block_m128>
		  StrPosCopy(strOperatorName,strOperatorName,0,15);
    7fce:	c8 01       	movw	r24, r16
    7fd0:	b8 01       	movw	r22, r16
    7fd2:	40 e0       	ldi	r20, 0x00	; 0
    7fd4:	50 e0       	ldi	r21, 0x00	; 0
    7fd6:	2f e0       	ldi	r18, 0x0F	; 15
    7fd8:	30 e0       	ldi	r19, 0x00	; 0
    7fda:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>

		  sprintf_P(lcdteks,PSTR("%s"),strOperatorName);
    7fde:	00 d0       	rcall	.+0      	; 0x7fe0 <FSettingOperator+0xfc>
    7fe0:	00 d0       	rcall	.+0      	; 0x7fe2 <FSettingOperator+0xfe>
    7fe2:	00 d0       	rcall	.+0      	; 0x7fe4 <FSettingOperator+0x100>
    7fe4:	ed b7       	in	r30, 0x3d	; 61
    7fe6:	fe b7       	in	r31, 0x3e	; 62
    7fe8:	31 96       	adiw	r30, 0x01	; 1
    7fea:	a2 e2       	ldi	r26, 0x22	; 34
    7fec:	ea 2e       	mov	r14, r26
    7fee:	f1 2c       	mov	r15, r1
    7ff0:	ec 0e       	add	r14, r28
    7ff2:	fd 1e       	adc	r15, r29
    7ff4:	ad b7       	in	r26, 0x3d	; 61
    7ff6:	be b7       	in	r27, 0x3e	; 62
    7ff8:	12 96       	adiw	r26, 0x02	; 2
    7ffa:	fc 92       	st	X, r15
    7ffc:	ee 92       	st	-X, r14
    7ffe:	11 97       	sbiw	r26, 0x01	; 1
    8000:	83 e1       	ldi	r24, 0x13	; 19
    8002:	92 e1       	ldi	r25, 0x12	; 18
    8004:	93 83       	std	Z+3, r25	; 0x03
    8006:	82 83       	std	Z+2, r24	; 0x02
    8008:	15 83       	std	Z+5, r17	; 0x05
    800a:	04 83       	std	Z+4, r16	; 0x04
    800c:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		  lcd_printf(1,1,PSTR("Name:"));
    8010:	8d b7       	in	r24, 0x3d	; 61
    8012:	9e b7       	in	r25, 0x3e	; 62
    8014:	06 96       	adiw	r24, 0x06	; 6
    8016:	0f b6       	in	r0, 0x3f	; 63
    8018:	f8 94       	cli
    801a:	9e bf       	out	0x3e, r25	; 62
    801c:	0f be       	out	0x3f, r0	; 63
    801e:	8d bf       	out	0x3d, r24	; 61
    8020:	81 e0       	ldi	r24, 0x01	; 1
    8022:	61 e0       	ldi	r22, 0x01	; 1
    8024:	4d e0       	ldi	r20, 0x0D	; 13
    8026:	52 e1       	ldi	r21, 0x12	; 18
    8028:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  lcd_print (1,6,lcdteks);
    802c:	81 e0       	ldi	r24, 0x01	; 1
    802e:	66 e0       	ldi	r22, 0x06	; 6
    8030:	a7 01       	movw	r20, r14
    8032:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
		  lcd_printf(2,1,PSTR("New :_              "));
    8036:	82 e0       	ldi	r24, 0x02	; 2
    8038:	61 e0       	ldi	r22, 0x01	; 1
    803a:	48 ef       	ldi	r20, 0xF8	; 248
    803c:	51 e1       	ldi	r21, 0x11	; 17
    803e:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    8042:	84 e0       	ldi	r24, 0x04	; 4
    8044:	61 e0       	ldi	r22, 0x01	; 1
    8046:	43 ee       	ldi	r20, 0xE3	; 227
    8048:	51 e1       	ldi	r21, 0x11	; 17
    804a:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
          stSettingOperator=soOperatorNameInput;
    804e:	83 e0       	ldi	r24, 0x03	; 3
    8050:	d9 c1       	rjmp	.+946    	; 0x8404 <FSettingOperator+0x520>
	      break;
     case soOperatorNameInput:
          uiResult=USER_NONE;
	      uiResult=UserInput(UI_ALPHANUM_R,2,6,strFreeMessageLine1,0,16);
    8052:	83 e0       	ldi	r24, 0x03	; 3
    8054:	62 e0       	ldi	r22, 0x02	; 2
    8056:	46 e0       	ldi	r20, 0x06	; 6
    8058:	26 e7       	ldi	r18, 0x76	; 118
    805a:	39 e0       	ldi	r19, 0x09	; 9
    805c:	00 e0       	ldi	r16, 0x00	; 0
    805e:	10 e0       	ldi	r17, 0x00	; 0
    8060:	f0 e1       	ldi	r31, 0x10	; 16
    8062:	ef 2e       	mov	r14, r31
    8064:	0e 94 d3 39 	call	0x73a6	; 0x73a6 <UserInput>
		  switch(uiResult){
    8068:	83 30       	cpi	r24, 0x03	; 3
    806a:	51 f0       	breq	.+20     	; 0x8080 <FSettingOperator+0x19c>
    806c:	84 30       	cpi	r24, 0x04	; 4
    806e:	08 f4       	brcc	.+2      	; 0x8072 <FSettingOperator+0x18e>
    8070:	e3 c0       	rjmp	.+454    	; 0x8238 <FSettingOperator+0x354>
    8072:	84 30       	cpi	r24, 0x04	; 4
    8074:	09 f4       	brne	.+2      	; 0x8078 <FSettingOperator+0x194>
    8076:	4c c0       	rjmp	.+152    	; 0x8110 <FSettingOperator+0x22c>
    8078:	85 30       	cpi	r24, 0x05	; 5
    807a:	09 f0       	breq	.+2      	; 0x807e <FSettingOperator+0x19a>
    807c:	ff c1       	rjmp	.+1022   	; 0x847c <FSettingOperator+0x598>
    807e:	4d c0       	rjmp	.+154    	; 0x811a <FSettingOperator+0x236>
		  case USER_OK:
		       lcd_clear();
    8080:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
			   StrPosCopy(strFreeMessageLine1,strOperatorName,0,15);
    8084:	e0 e1       	ldi	r30, 0x10	; 16
    8086:	ee 2e       	mov	r14, r30
    8088:	f1 2c       	mov	r15, r1
    808a:	ec 0e       	add	r14, r28
    808c:	fd 1e       	adc	r15, r29
    808e:	86 e7       	ldi	r24, 0x76	; 118
    8090:	99 e0       	ldi	r25, 0x09	; 9
    8092:	b7 01       	movw	r22, r14
    8094:	40 e0       	ldi	r20, 0x00	; 0
    8096:	50 e0       	ldi	r21, 0x00	; 0
    8098:	2f e0       	ldi	r18, 0x0F	; 15
    809a:	30 e0       	ldi	r19, 0x00	; 0
    809c:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
		       sprintf_P(lcdteks,PSTR("%s"),strOperatorName);
    80a0:	00 d0       	rcall	.+0      	; 0x80a2 <FSettingOperator+0x1be>
    80a2:	00 d0       	rcall	.+0      	; 0x80a4 <FSettingOperator+0x1c0>
    80a4:	00 d0       	rcall	.+0      	; 0x80a6 <FSettingOperator+0x1c2>
    80a6:	ed b7       	in	r30, 0x3d	; 61
    80a8:	fe b7       	in	r31, 0x3e	; 62
    80aa:	31 96       	adiw	r30, 0x01	; 1
    80ac:	8e 01       	movw	r16, r28
    80ae:	0e 5d       	subi	r16, 0xDE	; 222
    80b0:	1f 4f       	sbci	r17, 0xFF	; 255
    80b2:	ad b7       	in	r26, 0x3d	; 61
    80b4:	be b7       	in	r27, 0x3e	; 62
    80b6:	12 96       	adiw	r26, 0x02	; 2
    80b8:	1c 93       	st	X, r17
    80ba:	0e 93       	st	-X, r16
    80bc:	11 97       	sbiw	r26, 0x01	; 1
    80be:	80 ee       	ldi	r24, 0xE0	; 224
    80c0:	91 e1       	ldi	r25, 0x11	; 17
    80c2:	93 83       	std	Z+3, r25	; 0x03
    80c4:	82 83       	std	Z+2, r24	; 0x02
    80c6:	f5 82       	std	Z+5, r15	; 0x05
    80c8:	e4 82       	std	Z+4, r14	; 0x04
    80ca:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
			   lcd_printf(1,1,PSTR("New Operator:"));
    80ce:	8d b7       	in	r24, 0x3d	; 61
    80d0:	9e b7       	in	r25, 0x3e	; 62
    80d2:	06 96       	adiw	r24, 0x06	; 6
    80d4:	0f b6       	in	r0, 0x3f	; 63
    80d6:	f8 94       	cli
    80d8:	9e bf       	out	0x3e, r25	; 62
    80da:	0f be       	out	0x3f, r0	; 63
    80dc:	8d bf       	out	0x3d, r24	; 61
    80de:	81 e0       	ldi	r24, 0x01	; 1
    80e0:	61 e0       	ldi	r22, 0x01	; 1
    80e2:	42 ed       	ldi	r20, 0xD2	; 210
    80e4:	51 e1       	ldi	r21, 0x11	; 17
    80e6:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
			   lcd_print (2,1,lcdteks);
    80ea:	82 e0       	ldi	r24, 0x02	; 2
    80ec:	61 e0       	ldi	r22, 0x01	; 1
    80ee:	a8 01       	movw	r20, r16
    80f0:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
			   lcd_printf(3,1,PSTR("Save?"));
    80f4:	83 e0       	ldi	r24, 0x03	; 3
    80f6:	61 e0       	ldi	r22, 0x01	; 1
    80f8:	4c ec       	ldi	r20, 0xCC	; 204
    80fa:	51 e1       	ldi	r21, 0x11	; 17
    80fc:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
			   lcd_printf(4,1,PSTR("[*]No    [#]Yes"));
    8100:	84 e0       	ldi	r24, 0x04	; 4
    8102:	61 e0       	ldi	r22, 0x01	; 1
    8104:	4c eb       	ldi	r20, 0xBC	; 188
    8106:	51 e1       	ldi	r21, 0x11	; 17
    8108:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
               stSettingOperator=soIsSaveOperatorName;
    810c:	84 e0       	ldi	r24, 0x04	; 4
    810e:	7a c1       	rjmp	.+756    	; 0x8404 <FSettingOperator+0x520>
		       break;
		  case USER_CANCEL:
               stSettingOperator=soMenuOption; 
		       break;
          case USER_ENTRY:
		       lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
    8110:	84 e0       	ldi	r24, 0x04	; 4
    8112:	61 e0       	ldi	r22, 0x01	; 1
    8114:	47 ea       	ldi	r20, 0xA7	; 167
    8116:	51 e1       	ldi	r21, 0x11	; 17
    8118:	db c0       	rjmp	.+438    	; 0x82d0 <FSettingOperator+0x3ec>
		       break;
          case USER_NO_DATA:
		       lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    811a:	84 e0       	ldi	r24, 0x04	; 4
    811c:	61 e0       	ldi	r22, 0x01	; 1
    811e:	42 e9       	ldi	r20, 0x92	; 146
    8120:	51 e1       	ldi	r21, 0x11	; 17
    8122:	d6 c0       	rjmp	.+428    	; 0x82d0 <FSettingOperator+0x3ec>
		       break;
		  }
	      break;
     case soIsSaveOperatorName:
          KeyPressed=_key_scan(1);
    8124:	81 e0       	ldi	r24, 0x01	; 1
    8126:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
    812a:	0e 94 49 a3 	call	0x14692	; 0x14692 <_key_btn>
		  switch(KeyChar){
    812e:	83 32       	cpi	r24, 0x23	; 35
    8130:	09 f0       	breq	.+2      	; 0x8134 <FSettingOperator+0x250>
    8132:	49 c0       	rjmp	.+146    	; 0x81c6 <FSettingOperator+0x2e2>
          case '*':
		       stSettingOperator=soMenuOption;
		       break;
          case '#':
		       StrPosCopy(strFreeMessageLine1,strOperatorName,0,15);
    8134:	8e 01       	movw	r16, r28
    8136:	00 5f       	subi	r16, 0xF0	; 240
    8138:	1f 4f       	sbci	r17, 0xFF	; 255
    813a:	86 e7       	ldi	r24, 0x76	; 118
    813c:	99 e0       	ldi	r25, 0x09	; 9
    813e:	b8 01       	movw	r22, r16
    8140:	40 e0       	ldi	r20, 0x00	; 0
    8142:	50 e0       	ldi	r21, 0x00	; 0
    8144:	2f e0       	ldi	r18, 0x0F	; 15
    8146:	30 e0       	ldi	r19, 0x00	; 0
    8148:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
               AddSpaceLag(strOperatorName,18); 
    814c:	c8 01       	movw	r24, r16
    814e:	62 e1       	ldi	r22, 0x12	; 18
    8150:	0e 94 7d 27 	call	0x4efa	; 0x4efa <AddSpaceLag>
		       eeprom_write_block((const void*) &strOperatorName, (void*) &DefOperatorName,18);
    8154:	c8 01       	movw	r24, r16
    8156:	65 e1       	ldi	r22, 0x15	; 21
    8158:	70 e0       	ldi	r23, 0x00	; 0
    815a:	42 e1       	ldi	r20, 0x12	; 18
    815c:	50 e0       	ldi	r21, 0x00	; 0
    815e:	0e 94 6e aa 	call	0x154dc	; 0x154dc <__eewr_block_m128>
		       lcd_printf(3,1,PSTR("Saved "));
    8162:	83 e0       	ldi	r24, 0x03	; 3
    8164:	61 e0       	ldi	r22, 0x01	; 1
    8166:	4b e8       	ldi	r20, 0x8B	; 139
    8168:	51 e1       	ldi	r21, 0x11	; 17
    816a:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
			   TimDisplay=0;
    816e:	10 92 70 02 	sts	0x0270, r1
			   system_beep(1);
    8172:	81 e0       	ldi	r24, 0x01	; 1
    8174:	90 e0       	ldi	r25, 0x00	; 0
    8176:	0e 94 ee 14 	call	0x29dc	; 0x29dc <system_beep>
    817a:	43 c1       	rjmp	.+646    	; 0x8402 <FSettingOperator+0x51e>
		       stSettingOperator=soDelayDisplaySaved;
		       break;
		  }	      
		  break;
     case soChangePasswordInit:
	      lcd_clear();
    817c:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
		  lcd_printf(1,1,PSTR("-Change Password-"));
    8180:	81 e0       	ldi	r24, 0x01	; 1
    8182:	61 e0       	ldi	r22, 0x01	; 1
    8184:	49 e7       	ldi	r20, 0x79	; 121
    8186:	51 e1       	ldi	r21, 0x11	; 17
    8188:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  lcd_printf(2,1,PSTR("1.Supervisor"));
    818c:	82 e0       	ldi	r24, 0x02	; 2
    818e:	61 e0       	ldi	r22, 0x01	; 1
    8190:	4c e6       	ldi	r20, 0x6C	; 108
    8192:	51 e1       	ldi	r21, 0x11	; 17
    8194:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  lcd_printf(3,1,PSTR("2.Administrator"));
    8198:	83 e0       	ldi	r24, 0x03	; 3
    819a:	61 e0       	ldi	r22, 0x01	; 1
    819c:	4c e5       	ldi	r20, 0x5C	; 92
    819e:	51 e1       	ldi	r21, 0x11	; 17
    81a0:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  lcd_printf(4,1,PSTR("[*]Back     "));
    81a4:	84 e0       	ldi	r24, 0x04	; 4
    81a6:	61 e0       	ldi	r22, 0x01	; 1
    81a8:	4f e4       	ldi	r20, 0x4F	; 79
    81aa:	51 e1       	ldi	r21, 0x11	; 17
    81ac:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
          stSettingOperator=soChangePasswordInput; 
    81b0:	86 e0       	ldi	r24, 0x06	; 6
    81b2:	28 c1       	rjmp	.+592    	; 0x8404 <FSettingOperator+0x520>
	      break;
     case soChangePasswordInput:
          KeyPressed=_key_scan(1);
    81b4:	81 e0       	ldi	r24, 0x01	; 1
    81b6:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
    81ba:	0e 94 49 a3 	call	0x14692	; 0x14692 <_key_btn>
		  switch(KeyChar){
    81be:	81 33       	cpi	r24, 0x31	; 49
    81c0:	31 f0       	breq	.+12     	; 0x81ce <FSettingOperator+0x2ea>
    81c2:	82 33       	cpi	r24, 0x32	; 50
    81c4:	31 f0       	breq	.+12     	; 0x81d2 <FSettingOperator+0x2ee>
    81c6:	8a 32       	cpi	r24, 0x2A	; 42
    81c8:	09 f0       	breq	.+2      	; 0x81cc <FSettingOperator+0x2e8>
    81ca:	58 c1       	rjmp	.+688    	; 0x847c <FSettingOperator+0x598>
    81cc:	50 c1       	rjmp	.+672    	; 0x846e <FSettingOperator+0x58a>
		  case '1':		 
		       PassType=PT_SUPERVISOR;
    81ce:	81 e0       	ldi	r24, 0x01	; 1
    81d0:	01 c0       	rjmp	.+2      	; 0x81d4 <FSettingOperator+0x2f0>
		       stSettingOperator=soOldPasswordDisplay;
		       break;
          case '2':		       
		       PassType=PT_ADMINISTRATOR;
    81d2:	82 e0       	ldi	r24, 0x02	; 2
    81d4:	80 93 fc 02 	sts	0x02FC, r24
    81d8:	75 c0       	rjmp	.+234    	; 0x82c4 <FSettingOperator+0x3e0>
		       stSettingOperator=soMenuOption;
		       break;
		  }	      
	      break;
     case soOldPasswordDisplay:
	 	  lcd_clear();
    81da:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
	      if (PassType==PT_SUPERVISOR){
    81de:	80 91 fc 02 	lds	r24, 0x02FC
    81e2:	81 30       	cpi	r24, 0x01	; 1
    81e4:	21 f4       	brne	.+8      	; 0x81ee <FSettingOperator+0x30a>
		      lcd_printf(1,1,PSTR("-Supervisor-"));              
    81e6:	61 e0       	ldi	r22, 0x01	; 1
    81e8:	42 e4       	ldi	r20, 0x42	; 66
    81ea:	51 e1       	ldi	r21, 0x11	; 17
    81ec:	06 c0       	rjmp	.+12     	; 0x81fa <FSettingOperator+0x316>
		  }else if (PassType==PT_ADMINISTRATOR){		       
    81ee:	82 30       	cpi	r24, 0x02	; 2
    81f0:	31 f4       	brne	.+12     	; 0x81fe <FSettingOperator+0x31a>
		       lcd_printf(1,1,PSTR("-Administrator-"));			   
    81f2:	81 e0       	ldi	r24, 0x01	; 1
    81f4:	61 e0       	ldi	r22, 0x01	; 1
    81f6:	42 e3       	ldi	r20, 0x32	; 50
    81f8:	51 e1       	ldi	r21, 0x11	; 17
    81fa:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  }
		      lcd_printf(2,1,PSTR("Old:_"));
    81fe:	82 e0       	ldi	r24, 0x02	; 2
    8200:	61 e0       	ldi	r22, 0x01	; 1
    8202:	4c e2       	ldi	r20, 0x2C	; 44
    8204:	51 e1       	ldi	r21, 0x11	; 17
    8206:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
			  lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    820a:	84 e0       	ldi	r24, 0x04	; 4
    820c:	61 e0       	ldi	r22, 0x01	; 1
    820e:	47 e1       	ldi	r20, 0x17	; 23
    8210:	51 e1       	ldi	r21, 0x11	; 17
    8212:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>

          stSettingOperator=soOldPasswordEntry;
    8216:	88 e0       	ldi	r24, 0x08	; 8
    8218:	f5 c0       	rjmp	.+490    	; 0x8404 <FSettingOperator+0x520>
	      break;
     case soOldPasswordEntry:
          uiResult=USER_NONE;
          uiResult=UserInput(UI_NUM_PASSWORD,2,5,strFreeMessageLine1,0,8);           
    821a:	84 e0       	ldi	r24, 0x04	; 4
    821c:	62 e0       	ldi	r22, 0x02	; 2
    821e:	45 e0       	ldi	r20, 0x05	; 5
    8220:	26 e7       	ldi	r18, 0x76	; 118
    8222:	39 e0       	ldi	r19, 0x09	; 9
    8224:	00 e0       	ldi	r16, 0x00	; 0
    8226:	10 e0       	ldi	r17, 0x00	; 0
    8228:	78 e0       	ldi	r23, 0x08	; 8
    822a:	e7 2e       	mov	r14, r23
    822c:	0e 94 d3 39 	call	0x73a6	; 0x73a6 <UserInput>
		  switch(uiResult){
    8230:	83 30       	cpi	r24, 0x03	; 3
    8232:	61 f0       	breq	.+24     	; 0x824c <FSettingOperator+0x368>
    8234:	84 30       	cpi	r24, 0x04	; 4
    8236:	20 f4       	brcc	.+8      	; 0x8240 <FSettingOperator+0x35c>
    8238:	81 30       	cpi	r24, 0x01	; 1
    823a:	09 f0       	breq	.+2      	; 0x823e <FSettingOperator+0x35a>
    823c:	1f c1       	rjmp	.+574    	; 0x847c <FSettingOperator+0x598>
    823e:	17 c1       	rjmp	.+558    	; 0x846e <FSettingOperator+0x58a>
    8240:	84 30       	cpi	r24, 0x04	; 4
    8242:	79 f0       	breq	.+30     	; 0x8262 <FSettingOperator+0x37e>
    8244:	85 30       	cpi	r24, 0x05	; 5
    8246:	09 f0       	breq	.+2      	; 0x824a <FSettingOperator+0x366>
    8248:	19 c1       	rjmp	.+562    	; 0x847c <FSettingOperator+0x598>
    824a:	10 c0       	rjmp	.+32     	; 0x826c <FSettingOperator+0x388>
		  case USER_OK:
		       lcd_printf(2,1,PSTR("New:_               "));
    824c:	82 e0       	ldi	r24, 0x02	; 2
    824e:	61 e0       	ldi	r22, 0x01	; 1
    8250:	42 e0       	ldi	r20, 0x02	; 2
    8252:	51 e1       	ldi	r21, 0x11	; 17
    8254:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
			   lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    8258:	84 e0       	ldi	r24, 0x04	; 4
    825a:	61 e0       	ldi	r22, 0x01	; 1
    825c:	4d ee       	ldi	r20, 0xED	; 237
    825e:	50 e1       	ldi	r21, 0x10	; 16
    8260:	70 c0       	rjmp	.+224    	; 0x8342 <FSettingOperator+0x45e>
		       break;
		  case USER_CANCEL:
               stSettingOperator=soMenuOption; 
		       break;
          case USER_ENTRY:
		       lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
    8262:	84 e0       	ldi	r24, 0x04	; 4
    8264:	61 e0       	ldi	r22, 0x01	; 1
    8266:	48 ed       	ldi	r20, 0xD8	; 216
    8268:	50 e1       	ldi	r21, 0x10	; 16
    826a:	32 c0       	rjmp	.+100    	; 0x82d0 <FSettingOperator+0x3ec>
		       break;
          case USER_NO_DATA:
		       lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    826c:	84 e0       	ldi	r24, 0x04	; 4
    826e:	61 e0       	ldi	r22, 0x01	; 1
    8270:	43 ec       	ldi	r20, 0xC3	; 195
    8272:	50 e1       	ldi	r21, 0x10	; 16
    8274:	2d c0       	rjmp	.+90     	; 0x82d0 <FSettingOperator+0x3ec>
		       break;
		  }
	      break;
     case soNewPasswordEntry1:
          uiResult=USER_NONE;
          uiResult=UserInput(UI_NUM_PASSWORD,2,5,strFreeMessageLine2,0,8);           
    8276:	84 e0       	ldi	r24, 0x04	; 4
    8278:	62 e0       	ldi	r22, 0x02	; 2
    827a:	45 e0       	ldi	r20, 0x05	; 5
    827c:	27 e8       	ldi	r18, 0x87	; 135
    827e:	38 e0       	ldi	r19, 0x08	; 8
    8280:	00 e0       	ldi	r16, 0x00	; 0
    8282:	10 e0       	ldi	r17, 0x00	; 0
    8284:	58 e0       	ldi	r21, 0x08	; 8
    8286:	e5 2e       	mov	r14, r21
    8288:	0e 94 d3 39 	call	0x73a6	; 0x73a6 <UserInput>
		  switch(uiResult){
    828c:	83 30       	cpi	r24, 0x03	; 3
    828e:	61 f0       	breq	.+24     	; 0x82a8 <FSettingOperator+0x3c4>
    8290:	84 30       	cpi	r24, 0x04	; 4
    8292:	20 f4       	brcc	.+8      	; 0x829c <FSettingOperator+0x3b8>
    8294:	81 30       	cpi	r24, 0x01	; 1
    8296:	09 f0       	breq	.+2      	; 0x829a <FSettingOperator+0x3b6>
    8298:	f1 c0       	rjmp	.+482    	; 0x847c <FSettingOperator+0x598>
    829a:	14 c0       	rjmp	.+40     	; 0x82c4 <FSettingOperator+0x3e0>
    829c:	84 30       	cpi	r24, 0x04	; 4
    829e:	a1 f0       	breq	.+40     	; 0x82c8 <FSettingOperator+0x3e4>
    82a0:	85 30       	cpi	r24, 0x05	; 5
    82a2:	09 f0       	breq	.+2      	; 0x82a6 <FSettingOperator+0x3c2>
    82a4:	eb c0       	rjmp	.+470    	; 0x847c <FSettingOperator+0x598>
    82a6:	17 c0       	rjmp	.+46     	; 0x82d6 <FSettingOperator+0x3f2>
		  case USER_OK:
		       lcd_printf(3,1,PSTR("New:_               "));
    82a8:	83 e0       	ldi	r24, 0x03	; 3
    82aa:	61 e0       	ldi	r22, 0x01	; 1
    82ac:	4e ea       	ldi	r20, 0xAE	; 174
    82ae:	50 e1       	ldi	r21, 0x10	; 16
    82b0:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
			   lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    82b4:	84 e0       	ldi	r24, 0x04	; 4
    82b6:	61 e0       	ldi	r22, 0x01	; 1
    82b8:	49 e9       	ldi	r20, 0x99	; 153
    82ba:	50 e1       	ldi	r21, 0x10	; 16
    82bc:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		       stSettingOperator=soNewPasswordEntry2;
    82c0:	8a e0       	ldi	r24, 0x0A	; 10
    82c2:	a0 c0       	rjmp	.+320    	; 0x8404 <FSettingOperator+0x520>
		       break;
		  case USER_CANCEL:		       
			   stSettingOperator=soOldPasswordDisplay;
    82c4:	87 e0       	ldi	r24, 0x07	; 7
    82c6:	9e c0       	rjmp	.+316    	; 0x8404 <FSettingOperator+0x520>
		       break;
          case USER_ENTRY:
		       lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
    82c8:	84 e0       	ldi	r24, 0x04	; 4
    82ca:	61 e0       	ldi	r22, 0x01	; 1
    82cc:	44 e8       	ldi	r20, 0x84	; 132
    82ce:	50 e1       	ldi	r21, 0x10	; 16
    82d0:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
    82d4:	d3 c0       	rjmp	.+422    	; 0x847c <FSettingOperator+0x598>
		       break;
          case USER_NO_DATA:
		       lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    82d6:	84 e0       	ldi	r24, 0x04	; 4
    82d8:	61 e0       	ldi	r22, 0x01	; 1
    82da:	4f e6       	ldi	r20, 0x6F	; 111
    82dc:	50 e1       	ldi	r21, 0x10	; 16
    82de:	f8 cf       	rjmp	.-16     	; 0x82d0 <FSettingOperator+0x3ec>
		       break;
		  }	      
	      break;
     case soNewPasswordEntry2:
          uiResult=USER_NONE;
          uiResult=UserInput(UI_NUM_PASSWORD,3,5,strFreeMessageLine3,0,8);           
    82e0:	84 e0       	ldi	r24, 0x04	; 4
    82e2:	63 e0       	ldi	r22, 0x03	; 3
    82e4:	45 e0       	ldi	r20, 0x05	; 5
    82e6:	20 ef       	ldi	r18, 0xF0	; 240
    82e8:	38 e0       	ldi	r19, 0x08	; 8
    82ea:	00 e0       	ldi	r16, 0x00	; 0
    82ec:	10 e0       	ldi	r17, 0x00	; 0
    82ee:	98 e0       	ldi	r25, 0x08	; 8
    82f0:	e9 2e       	mov	r14, r25
    82f2:	0e 94 d3 39 	call	0x73a6	; 0x73a6 <UserInput>
		  switch(uiResult){
    82f6:	83 30       	cpi	r24, 0x03	; 3
    82f8:	61 f0       	breq	.+24     	; 0x8312 <FSettingOperator+0x42e>
    82fa:	84 30       	cpi	r24, 0x04	; 4
    82fc:	20 f4       	brcc	.+8      	; 0x8306 <FSettingOperator+0x422>
    82fe:	81 30       	cpi	r24, 0x01	; 1
    8300:	09 f0       	breq	.+2      	; 0x8304 <FSettingOperator+0x420>
    8302:	bc c0       	rjmp	.+376    	; 0x847c <FSettingOperator+0x598>
    8304:	12 c0       	rjmp	.+36     	; 0x832a <FSettingOperator+0x446>
    8306:	84 30       	cpi	r24, 0x04	; 4
    8308:	01 f1       	breq	.+64     	; 0x834a <FSettingOperator+0x466>
    830a:	85 30       	cpi	r24, 0x05	; 5
    830c:	09 f0       	breq	.+2      	; 0x8310 <FSettingOperator+0x42c>
    830e:	b6 c0       	rjmp	.+364    	; 0x847c <FSettingOperator+0x598>
    8310:	21 c0       	rjmp	.+66     	; 0x8354 <FSettingOperator+0x470>
		  case USER_OK:
		       lcd_clear();
    8312:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
               lcd_printf(2,1,PSTR("Validating.."));
    8316:	82 e0       	ldi	r24, 0x02	; 2
    8318:	61 e0       	ldi	r22, 0x01	; 1
    831a:	42 e6       	ldi	r20, 0x62	; 98
    831c:	50 e1       	ldi	r21, 0x10	; 16
    831e:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
			   TimDisplay=0;
    8322:	10 92 70 02 	sts	0x0270, r1
		       stSettingOperator=soDispValidatePassword;
    8326:	8b e0       	ldi	r24, 0x0B	; 11
    8328:	6d c0       	rjmp	.+218    	; 0x8404 <FSettingOperator+0x520>
		       break;
		  case USER_CANCEL:
               lcd_clear();
    832a:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
               lcd_printf(2,1,PSTR("New:_               "));
    832e:	82 e0       	ldi	r24, 0x02	; 2
    8330:	61 e0       	ldi	r22, 0x01	; 1
    8332:	4d e4       	ldi	r20, 0x4D	; 77
    8334:	50 e1       	ldi	r21, 0x10	; 16
    8336:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
			   lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    833a:	84 e0       	ldi	r24, 0x04	; 4
    833c:	61 e0       	ldi	r22, 0x01	; 1
    833e:	48 e3       	ldi	r20, 0x38	; 56
    8340:	50 e1       	ldi	r21, 0x10	; 16
    8342:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		       stSettingOperator=soNewPasswordEntry1;
    8346:	89 e0       	ldi	r24, 0x09	; 9
    8348:	5d c0       	rjmp	.+186    	; 0x8404 <FSettingOperator+0x520>
		       break;
          case USER_ENTRY:
		       lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
    834a:	84 e0       	ldi	r24, 0x04	; 4
    834c:	61 e0       	ldi	r22, 0x01	; 1
    834e:	43 e2       	ldi	r20, 0x23	; 35
    8350:	50 e1       	ldi	r21, 0x10	; 16
    8352:	be cf       	rjmp	.-132    	; 0x82d0 <FSettingOperator+0x3ec>
		       break;
          case USER_NO_DATA:
		       lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    8354:	84 e0       	ldi	r24, 0x04	; 4
    8356:	61 e0       	ldi	r22, 0x01	; 1
    8358:	4e e0       	ldi	r20, 0x0E	; 14
    835a:	50 e1       	ldi	r21, 0x10	; 16
    835c:	b9 cf       	rjmp	.-142    	; 0x82d0 <FSettingOperator+0x3ec>
		       break;
		  }	      
	      break;
     case soDispValidatePassword:
	      if (TimDisplay>3)stSettingOperator=soValidatePassword;
    835e:	80 91 70 02 	lds	r24, 0x0270
    8362:	84 30       	cpi	r24, 0x04	; 4
    8364:	08 f4       	brcc	.+2      	; 0x8368 <FSettingOperator+0x484>
    8366:	8a c0       	rjmp	.+276    	; 0x847c <FSettingOperator+0x598>
    8368:	8c e0       	ldi	r24, 0x0C	; 12
    836a:	4c c0       	rjmp	.+152    	; 0x8404 <FSettingOperator+0x520>
	      break;
     case soValidatePassword:
          if (PassType==PT_SUPERVISOR) eeprom_read_block((void*) &strPassword, (const void*) &DefSysPassword, 10);		      			   
    836c:	80 91 fc 02 	lds	r24, 0x02FC
    8370:	81 30       	cpi	r24, 0x01	; 1
    8372:	29 f4       	brne	.+10     	; 0x837e <FSettingOperator+0x49a>
    8374:	ce 01       	movw	r24, r28
    8376:	01 96       	adiw	r24, 0x01	; 1
    8378:	6b e0       	ldi	r22, 0x0B	; 11
    837a:	70 e0       	ldi	r23, 0x00	; 0
    837c:	06 c0       	rjmp	.+12     	; 0x838a <FSettingOperator+0x4a6>
		  else 
		  if (PassType==PT_ADMINISTRATOR) eeprom_read_block((void*) &strPassword, (const void*) &DefSpvPassword, 10);    
    837e:	82 30       	cpi	r24, 0x02	; 2
    8380:	41 f4       	brne	.+16     	; 0x8392 <FSettingOperator+0x4ae>
    8382:	ce 01       	movw	r24, r28
    8384:	01 96       	adiw	r24, 0x01	; 1
    8386:	61 e0       	ldi	r22, 0x01	; 1
    8388:	70 e0       	ldi	r23, 0x00	; 0
    838a:	4a e0       	ldi	r20, 0x0A	; 10
    838c:	50 e0       	ldi	r21, 0x00	; 0
    838e:	0e 94 56 aa 	call	0x154ac	; 0x154ac <__eerd_block_m128>
		  
		  //Check Old Validity
		  if (strcmp(strPassword,strFreeMessageLine1)==0){//OldMessage Valid
    8392:	ce 01       	movw	r24, r28
    8394:	01 96       	adiw	r24, 0x01	; 1
    8396:	66 e7       	ldi	r22, 0x76	; 118
    8398:	79 e0       	ldi	r23, 0x09	; 9
    839a:	0e 94 05 a8 	call	0x1500a	; 0x1500a <strcmp>
    839e:	00 97       	sbiw	r24, 0x00	; 0
    83a0:	09 f0       	breq	.+2      	; 0x83a4 <FSettingOperator+0x4c0>
    83a2:	46 c0       	rjmp	.+140    	; 0x8430 <FSettingOperator+0x54c>
              if (strcmp(strFreeMessageLine2,strFreeMessageLine3)==0){
    83a4:	87 e8       	ldi	r24, 0x87	; 135
    83a6:	98 e0       	ldi	r25, 0x08	; 8
    83a8:	60 ef       	ldi	r22, 0xF0	; 240
    83aa:	78 e0       	ldi	r23, 0x08	; 8
    83ac:	0e 94 05 a8 	call	0x1500a	; 0x1500a <strcmp>
    83b0:	00 97       	sbiw	r24, 0x00	; 0
    83b2:	59 f5       	brne	.+86     	; 0x840a <FSettingOperator+0x526>
                  
			      if (PassType==PT_SUPERVISOR) eeprom_write_block((const void*) &strFreeMessageLine2, (void*) &DefSysPassword, 10);		      			   
    83b4:	80 91 fc 02 	lds	r24, 0x02FC
    83b8:	81 30       	cpi	r24, 0x01	; 1
    83ba:	29 f4       	brne	.+10     	; 0x83c6 <FSettingOperator+0x4e2>
    83bc:	87 e8       	ldi	r24, 0x87	; 135
    83be:	98 e0       	ldi	r25, 0x08	; 8
    83c0:	6b e0       	ldi	r22, 0x0B	; 11
    83c2:	70 e0       	ldi	r23, 0x00	; 0
    83c4:	06 c0       	rjmp	.+12     	; 0x83d2 <FSettingOperator+0x4ee>
		          else 
		          if (PassType==PT_ADMINISTRATOR) eeprom_write_block((const void*) &strFreeMessageLine2, (void*) &DefSpvPassword, 10);    
    83c6:	82 30       	cpi	r24, 0x02	; 2
    83c8:	41 f4       	brne	.+16     	; 0x83da <FSettingOperator+0x4f6>
    83ca:	87 e8       	ldi	r24, 0x87	; 135
    83cc:	98 e0       	ldi	r25, 0x08	; 8
    83ce:	61 e0       	ldi	r22, 0x01	; 1
    83d0:	70 e0       	ldi	r23, 0x00	; 0
    83d2:	4a e0       	ldi	r20, 0x0A	; 10
    83d4:	50 e0       	ldi	r21, 0x00	; 0
    83d6:	0e 94 6e aa 	call	0x154dc	; 0x154dc <__eewr_block_m128>

			      system_beep(1);
    83da:	81 e0       	ldi	r24, 0x01	; 1
    83dc:	90 e0       	ldi	r25, 0x00	; 0
    83de:	0e 94 ee 14 	call	0x29dc	; 0x29dc <system_beep>
				  lcd_clear();
    83e2:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
			      lcd_printf(2,1,PSTR("     Completed      "));
    83e6:	82 e0       	ldi	r24, 0x02	; 2
    83e8:	61 e0       	ldi	r22, 0x01	; 1
    83ea:	49 ef       	ldi	r20, 0xF9	; 249
    83ec:	5f e0       	ldi	r21, 0x0F	; 15
    83ee:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
			      lcd_printf(3,1,PSTR("   Password Saved   "));    
    83f2:	83 e0       	ldi	r24, 0x03	; 3
    83f4:	61 e0       	ldi	r22, 0x01	; 1
    83f6:	44 ee       	ldi	r20, 0xE4	; 228
    83f8:	5f e0       	ldi	r21, 0x0F	; 15
    83fa:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
				  TimDisplay=0;
    83fe:	10 92 70 02 	sts	0x0270, r1
				  stSettingOperator=soDelayDisplaySaved;
    8402:	8e e0       	ldi	r24, 0x0E	; 14
    8404:	80 93 fd 02 	sts	0x02FD, r24
    8408:	39 c0       	rjmp	.+114    	; 0x847c <FSettingOperator+0x598>
			  }else {
			  system_beep(2);
    840a:	82 e0       	ldi	r24, 0x02	; 2
    840c:	90 e0       	ldi	r25, 0x00	; 0
    840e:	0e 94 ee 14 	call	0x29dc	; 0x29dc <system_beep>
		      TimDisplay=0;
    8412:	10 92 70 02 	sts	0x0270, r1
		      lcd_clear();
    8416:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
		      lcd_printf(2,1,PSTR("      ERROR         "));
    841a:	82 e0       	ldi	r24, 0x02	; 2
    841c:	61 e0       	ldi	r22, 0x01	; 1
    841e:	4f ec       	ldi	r20, 0xCF	; 207
    8420:	5f e0       	ldi	r21, 0x0F	; 15
    8422:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		      lcd_printf(3,1,PSTR("Invalid New Password"));
    8426:	83 e0       	ldi	r24, 0x03	; 3
    8428:	61 e0       	ldi	r22, 0x01	; 1
    842a:	4a eb       	ldi	r20, 0xBA	; 186
    842c:	5f e0       	ldi	r21, 0x0F	; 15
    842e:	12 c0       	rjmp	.+36     	; 0x8454 <FSettingOperator+0x570>
		      stSettingOperator=soDisplayInvalidPassword;
			  }
		  }else {
		   //InvalidOld Password
		   system_beep(2);
    8430:	82 e0       	ldi	r24, 0x02	; 2
    8432:	90 e0       	ldi	r25, 0x00	; 0
    8434:	0e 94 ee 14 	call	0x29dc	; 0x29dc <system_beep>
		   TimDisplay=0;
    8438:	10 92 70 02 	sts	0x0270, r1
		   lcd_clear();
    843c:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
		   lcd_printf(2,1,PSTR("      ERROR         "));
    8440:	82 e0       	ldi	r24, 0x02	; 2
    8442:	61 e0       	ldi	r22, 0x01	; 1
    8444:	45 ea       	ldi	r20, 0xA5	; 165
    8446:	5f e0       	ldi	r21, 0x0F	; 15
    8448:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		   lcd_printf(3,1,PSTR("Invalid Old Password"));
    844c:	83 e0       	ldi	r24, 0x03	; 3
    844e:	61 e0       	ldi	r22, 0x01	; 1
    8450:	40 e9       	ldi	r20, 0x90	; 144
    8452:	5f e0       	ldi	r21, 0x0F	; 15
    8454:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		   stSettingOperator=soDisplayInvalidPassword;
    8458:	8d e0       	ldi	r24, 0x0D	; 13
    845a:	d4 cf       	rjmp	.-88     	; 0x8404 <FSettingOperator+0x520>
		   }
	      break;
     case soDisplayInvalidPassword:
	      if (TimDisplay>6)stSettingOperator=soMenuOption;
    845c:	80 91 70 02 	lds	r24, 0x0270
    8460:	87 30       	cpi	r24, 0x07	; 7
    8462:	60 f0       	brcs	.+24     	; 0x847c <FSettingOperator+0x598>
    8464:	04 c0       	rjmp	.+8      	; 0x846e <FSettingOperator+0x58a>
	      break;
     case soDelayDisplaySaved:
	      if (TimDisplay>4)stSettingOperator=soMenuOption;
    8466:	80 91 70 02 	lds	r24, 0x0270
    846a:	85 30       	cpi	r24, 0x05	; 5
    846c:	38 f0       	brcs	.+14     	; 0x847c <FSettingOperator+0x598>
    846e:	10 92 fd 02 	sts	0x02FD, r1
    8472:	04 c0       	rjmp	.+8      	; 0x847c <FSettingOperator+0x598>
	      break;
	 case soExitSettingOperator:
	      stSettingOperator=soMenuOption;
    8474:	10 92 fd 02 	sts	0x02FD, r1
	      Result=MENU_DONE;
    8478:	81 e0       	ldi	r24, 0x01	; 1
	      break;
    847a:	01 c0       	rjmp	.+2      	; 0x847e <FSettingOperator+0x59a>
	 static char PassType=PT_NONE;
	        char KeyPressed,KeyChar,lcdteks[20],strPassword[15];
			char strOperatorName[18];
			char uiResult=USER_NONE,Result=MENU_NONE;

	 Result=MENU_NONE;
    847c:	80 e0       	ldi	r24, 0x00	; 0
	      stSettingOperator=soMenuOption;
	      Result=MENU_DONE;
	      break;
	 }
     return Result;
}
    847e:	e5 96       	adiw	r28, 0x35	; 53
    8480:	0f b6       	in	r0, 0x3f	; 63
    8482:	f8 94       	cli
    8484:	de bf       	out	0x3e, r29	; 62
    8486:	0f be       	out	0x3f, r0	; 63
    8488:	cd bf       	out	0x3d, r28	; 61
    848a:	cf 91       	pop	r28
    848c:	df 91       	pop	r29
    848e:	1f 91       	pop	r17
    8490:	0f 91       	pop	r16
    8492:	ff 90       	pop	r15
    8494:	ef 90       	pop	r14
    8496:	08 95       	ret

00008498 <FMenuSettings>:
char FMenuSettings(){
char Result=MENU_NONE;
static char stMenuSettings=msInit,PageSetting=1;
     char KeyPressed,KeyChar,SubMenu;

     switch(stMenuSettings){
    8498:	e0 91 01 03 	lds	r30, 0x0301
    849c:	f0 e0       	ldi	r31, 0x00	; 0
    849e:	e3 31       	cpi	r30, 0x13	; 19
    84a0:	f1 05       	cpc	r31, r1
    84a2:	08 f0       	brcs	.+2      	; 0x84a6 <FMenuSettings+0xe>
    84a4:	c0 c0       	rjmp	.+384    	; 0x8626 <FMenuSettings+0x18e>
    84a6:	ea 5b       	subi	r30, 0xBA	; 186
    84a8:	ff 4f       	sbci	r31, 0xFF	; 255
    84aa:	ee 0f       	add	r30, r30
    84ac:	ff 1f       	adc	r31, r31
    84ae:	05 90       	lpm	r0, Z+
    84b0:	f4 91       	lpm	r31, Z+
    84b2:	e0 2d       	mov	r30, r0
    84b4:	09 94       	ijmp
	 case msInit:
		  lcd_clear();
    84b6:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
		  PageSetting=1;
    84ba:	81 e0       	ldi	r24, 0x01	; 1
    84bc:	80 93 57 01 	sts	0x0157, r24
    84c0:	ab c0       	rjmp	.+342    	; 0x8618 <FMenuSettings+0x180>
		  stMenuSettings=msDisplayPage;
		  break;
	 case msDisplayPage:
	      stMenuSettings=msDisplayPage+PageSetting;
    84c2:	80 91 57 01 	lds	r24, 0x0157
    84c6:	8f 5f       	subi	r24, 0xFF	; 255
    84c8:	a7 c0       	rjmp	.+334    	; 0x8618 <FMenuSettings+0x180>
          break; 	 
	 case msDisplayPage1:
		  lcd_printf(1, 1, PSTR("1)Product  5)Printer"));
    84ca:	81 e0       	ldi	r24, 0x01	; 1
    84cc:	61 e0       	ldi	r22, 0x01	; 1
    84ce:	43 e0       	ldi	r20, 0x03	; 3
    84d0:	54 e1       	ldi	r21, 0x14	; 20
    84d2:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  lcd_printf(2, 1, PSTR("2)Pump     6)Host   "));
    84d6:	82 e0       	ldi	r24, 0x02	; 2
    84d8:	61 e0       	ldi	r22, 0x01	; 1
    84da:	4e ee       	ldi	r20, 0xEE	; 238
    84dc:	53 e1       	ldi	r21, 0x13	; 19
    84de:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  lcd_printf(3, 1, PSTR("3)Decimal  7)Next   "));
    84e2:	83 e0       	ldi	r24, 0x03	; 3
    84e4:	61 e0       	ldi	r22, 0x01	; 1
    84e6:	49 ed       	ldi	r20, 0xD9	; 217
    84e8:	53 e1       	ldi	r21, 0x13	; 19
    84ea:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  lcd_printf(4, 1, PSTR("4)Datetime *)Exit   "));
    84ee:	84 e0       	ldi	r24, 0x04	; 4
    84f0:	61 e0       	ldi	r22, 0x01	; 1
    84f2:	44 ec       	ldi	r20, 0xC4	; 196
    84f4:	53 e1       	ldi	r21, 0x13	; 19
    84f6:	16 c0       	rjmp	.+44     	; 0x8524 <FMenuSettings+0x8c>
		  stMenuSettings=msSelection;
	      break;
	 case msDisplayPage2:
		  lcd_printf(1, 1, PSTR("1)Operator          "));
    84f8:	81 e0       	ldi	r24, 0x01	; 1
    84fa:	61 e0       	ldi	r22, 0x01	; 1
    84fc:	4f ea       	ldi	r20, 0xAF	; 175
    84fe:	53 e1       	ldi	r21, 0x13	; 19
    8500:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  lcd_printf(2, 1, PSTR("2)System            "));
    8504:	82 e0       	ldi	r24, 0x02	; 2
    8506:	61 e0       	ldi	r22, 0x01	; 1
    8508:	4a e9       	ldi	r20, 0x9A	; 154
    850a:	53 e1       	ldi	r21, 0x13	; 19
    850c:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  lcd_printf(3, 1, PSTR("3)PumpPooling       "));
    8510:	83 e0       	ldi	r24, 0x03	; 3
    8512:	61 e0       	ldi	r22, 0x01	; 1
    8514:	45 e8       	ldi	r20, 0x85	; 133
    8516:	53 e1       	ldi	r21, 0x13	; 19
    8518:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  lcd_printf(4, 1, PSTR("*)Back              "));
    851c:	84 e0       	ldi	r24, 0x04	; 4
    851e:	61 e0       	ldi	r22, 0x01	; 1
    8520:	40 e7       	ldi	r20, 0x70	; 112
    8522:	53 e1       	ldi	r21, 0x13	; 19
    8524:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  stMenuSettings=msSelection;
    8528:	84 e0       	ldi	r24, 0x04	; 4
    852a:	76 c0       	rjmp	.+236    	; 0x8618 <FMenuSettings+0x180>
	      break;
	 case msSelection:
	      stMenuSettings=msSelection+PageSetting;
    852c:	80 91 57 01 	lds	r24, 0x0157
    8530:	8c 5f       	subi	r24, 0xFC	; 252
    8532:	72 c0       	rjmp	.+228    	; 0x8618 <FMenuSettings+0x180>
          break;	 
	 case msSelectionPage1:
		  KeyPressed=_key_scan(1);
    8534:	81 e0       	ldi	r24, 0x01	; 1
    8536:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
    853a:	0e 94 49 a3 	call	0x14692	; 0x14692 <_key_btn>
		  switch(KeyChar){
    853e:	84 33       	cpi	r24, 0x34	; 52
    8540:	d1 f0       	breq	.+52     	; 0x8576 <FMenuSettings+0xde>
    8542:	85 33       	cpi	r24, 0x35	; 53
    8544:	50 f4       	brcc	.+20     	; 0x855a <FMenuSettings+0xc2>
    8546:	82 33       	cpi	r24, 0x32	; 50
    8548:	91 f0       	breq	.+36     	; 0x856e <FMenuSettings+0xd6>
    854a:	83 33       	cpi	r24, 0x33	; 51
    854c:	90 f4       	brcc	.+36     	; 0x8572 <FMenuSettings+0xda>
    854e:	8a 32       	cpi	r24, 0x2A	; 42
    8550:	d1 f0       	breq	.+52     	; 0x8586 <FMenuSettings+0xee>
    8552:	81 33       	cpi	r24, 0x31	; 49
    8554:	09 f0       	breq	.+2      	; 0x8558 <FMenuSettings+0xc0>
    8556:	67 c0       	rjmp	.+206    	; 0x8626 <FMenuSettings+0x18e>
    8558:	08 c0       	rjmp	.+16     	; 0x856a <FMenuSettings+0xd2>
    855a:	86 33       	cpi	r24, 0x36	; 54
    855c:	81 f0       	breq	.+32     	; 0x857e <FMenuSettings+0xe6>
    855e:	86 33       	cpi	r24, 0x36	; 54
    8560:	60 f0       	brcs	.+24     	; 0x857a <FMenuSettings+0xe2>
    8562:	87 33       	cpi	r24, 0x37	; 55
    8564:	09 f0       	breq	.+2      	; 0x8568 <FMenuSettings+0xd0>
    8566:	5f c0       	rjmp	.+190    	; 0x8626 <FMenuSettings+0x18e>
    8568:	0c c0       	rjmp	.+24     	; 0x8582 <FMenuSettings+0xea>
		  case '1':
		       stMenuSettings=msMenuSettingProduct;
    856a:	89 e0       	ldi	r24, 0x09	; 9
    856c:	55 c0       	rjmp	.+170    	; 0x8618 <FMenuSettings+0x180>
		       break;
		  case '2': 
		       stMenuSettings=msMenuSettingPump;
    856e:	8a e0       	ldi	r24, 0x0A	; 10
    8570:	53 c0       	rjmp	.+166    	; 0x8618 <FMenuSettings+0x180>
		       break;
		  case '3':
		       stMenuSettings=msMenuSettingDec;
    8572:	8b e0       	ldi	r24, 0x0B	; 11
    8574:	51 c0       	rjmp	.+162    	; 0x8618 <FMenuSettings+0x180>
		       break;
		  case '4':
		       stMenuSettings=msMenuSettingDatetime;
    8576:	8c e0       	ldi	r24, 0x0C	; 12
    8578:	4f c0       	rjmp	.+158    	; 0x8618 <FMenuSettings+0x180>
		       break;
		  case '5':
		       stMenuSettings=msMenuSettingPrinter;
    857a:	8d e0       	ldi	r24, 0x0D	; 13
    857c:	4d c0       	rjmp	.+154    	; 0x8618 <FMenuSettings+0x180>
		       break;
		  case '6':
		       stMenuSettings=msMenuSettingHost;
    857e:	8e e0       	ldi	r24, 0x0E	; 14
    8580:	4b c0       	rjmp	.+150    	; 0x8618 <FMenuSettings+0x180>
		       break;
		  case '7':
		       stMenuSettings=msMenuSettingNextPage;
    8582:	87 e0       	ldi	r24, 0x07	; 7
    8584:	49 c0       	rjmp	.+146    	; 0x8618 <FMenuSettings+0x180>
		       break;
		  case '*':
		       stMenuSettings=msMenuSettingExit;
    8586:	82 e1       	ldi	r24, 0x12	; 18
    8588:	47 c0       	rjmp	.+142    	; 0x8618 <FMenuSettings+0x180>
		       break;			   
		  }
	      break;
	 case msSelectionPage2:
	 	  KeyPressed=_key_scan(1);
    858a:	81 e0       	ldi	r24, 0x01	; 1
    858c:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
    8590:	0e 94 49 a3 	call	0x14692	; 0x14692 <_key_btn>
		  switch(KeyChar){
    8594:	82 33       	cpi	r24, 0x32	; 50
    8596:	69 f0       	breq	.+26     	; 0x85b2 <FMenuSettings+0x11a>
    8598:	83 33       	cpi	r24, 0x33	; 51
    859a:	30 f4       	brcc	.+12     	; 0x85a8 <FMenuSettings+0x110>
    859c:	8a 32       	cpi	r24, 0x2A	; 42
    859e:	69 f0       	breq	.+26     	; 0x85ba <FMenuSettings+0x122>
    85a0:	81 33       	cpi	r24, 0x31	; 49
    85a2:	09 f0       	breq	.+2      	; 0x85a6 <FMenuSettings+0x10e>
    85a4:	40 c0       	rjmp	.+128    	; 0x8626 <FMenuSettings+0x18e>
    85a6:	03 c0       	rjmp	.+6      	; 0x85ae <FMenuSettings+0x116>
    85a8:	83 33       	cpi	r24, 0x33	; 51
    85aa:	e9 f5       	brne	.+122    	; 0x8626 <FMenuSettings+0x18e>
    85ac:	04 c0       	rjmp	.+8      	; 0x85b6 <FMenuSettings+0x11e>
		  case '1':
		       stMenuSettings=msMenuSettingOperator;
    85ae:	8f e0       	ldi	r24, 0x0F	; 15
    85b0:	33 c0       	rjmp	.+102    	; 0x8618 <FMenuSettings+0x180>
		       break;
		  case '2':
		       stMenuSettings=msMenuSettingSystem;
    85b2:	80 e1       	ldi	r24, 0x10	; 16
    85b4:	31 c0       	rjmp	.+98     	; 0x8618 <FMenuSettings+0x180>
		       break;
		  case '3':
		       stMenuSettings=msMenuSettingPumpPooling;
    85b6:	81 e1       	ldi	r24, 0x11	; 17
    85b8:	2f c0       	rjmp	.+94     	; 0x8618 <FMenuSettings+0x180>
		       break;
		  case '*':
		       stMenuSettings=msMenuSettingBackPage;
    85ba:	88 e0       	ldi	r24, 0x08	; 8
    85bc:	2d c0       	rjmp	.+90     	; 0x8618 <FMenuSettings+0x180>
		       break;		  
		  }
	      break;
		  
	 case msMenuSettingNextPage:
	      if (PageSetting<2)PageSetting++;
    85be:	80 91 57 01 	lds	r24, 0x0157
    85c2:	82 30       	cpi	r24, 0x02	; 2
    85c4:	d8 f4       	brcc	.+54     	; 0x85fc <FMenuSettings+0x164>
    85c6:	8f 5f       	subi	r24, 0xFF	; 255
    85c8:	05 c0       	rjmp	.+10     	; 0x85d4 <FMenuSettings+0x13c>
		  stMenuSettings=msDisplayPage;
	      break;
	 case msMenuSettingBackPage:
	      if (PageSetting>1)PageSetting--;
    85ca:	80 91 57 01 	lds	r24, 0x0157
    85ce:	82 30       	cpi	r24, 0x02	; 2
    85d0:	a8 f0       	brcs	.+42     	; 0x85fc <FMenuSettings+0x164>
    85d2:	81 50       	subi	r24, 0x01	; 1
    85d4:	80 93 57 01 	sts	0x0157, r24
    85d8:	11 c0       	rjmp	.+34     	; 0x85fc <FMenuSettings+0x164>
		  stMenuSettings=msDisplayPage;
	      break;
//---Sub Menu Operations--------------------------------------------		  
     case msMenuSettingProduct:
	      SubMenu=FSettingProduct();
    85da:	0e 94 fe 3c 	call	0x79fc	; 0x79fc <FSettingProduct>
    85de:	15 c0       	rjmp	.+42     	; 0x860a <FMenuSettings+0x172>
		  if (SubMenu==MENU_DONE)stMenuSettings=msDisplayPage;
	      break;
	 case msMenuSettingPump:
	      SubMenu=FSettingPump();
    85e0:	0e 94 dc 33 	call	0x67b8	; 0x67b8 <FSettingPump>
    85e4:	12 c0       	rjmp	.+36     	; 0x860a <FMenuSettings+0x172>
		  if (SubMenu==MENU_DONE)stMenuSettings=msDisplayPage;
	      break;
	 case msMenuSettingDec:
	      SubMenu=FSettingDec();
    85e6:	0e 94 b7 21 	call	0x436e	; 0x436e <FSettingDec>
    85ea:	0f c0       	rjmp	.+30     	; 0x860a <FMenuSettings+0x172>
	 }
     return Result;
}

char FSettingDatetime(){
     _menu_datetime();
    85ec:	0e 94 22 34 	call	0x6844	; 0x6844 <_menu_datetime>
    85f0:	05 c0       	rjmp	.+10     	; 0x85fc <FMenuSettings+0x164>
     return MENU_DONE;
}
char FSettingPrinter(){
     _menu_printer();
    85f2:	0e 94 b0 35 	call	0x6b60	; 0x6b60 <_menu_printer>
    85f6:	02 c0       	rjmp	.+4      	; 0x85fc <FMenuSettings+0x164>
	 return MENU_DONE;
}
char FSettingHost(){
     _menu_host();
    85f8:	0e 94 27 37 	call	0x6e4e	; 0x6e4e <_menu_host>
	      SubMenu=FSettingPrinter();
		  if (SubMenu==MENU_DONE)stMenuSettings=msDisplayPage;
	      break;
	 case msMenuSettingHost:
	      SubMenu=FSettingHost();
		  if (SubMenu==MENU_DONE)stMenuSettings=msDisplayPage;
    85fc:	81 e0       	ldi	r24, 0x01	; 1
    85fe:	0c c0       	rjmp	.+24     	; 0x8618 <FMenuSettings+0x180>
	      break;
     case msMenuSettingOperator:
          SubMenu=FSettingOperator();
    8600:	0e 94 72 3f 	call	0x7ee4	; 0x7ee4 <FSettingOperator>
    8604:	02 c0       	rjmp	.+4      	; 0x860a <FMenuSettings+0x172>
		  if (SubMenu==MENU_DONE)stMenuSettings=msDisplayPage;
	      break;
	 case msMenuSettingSystem:
	      SubMenu=FSettingSystem();
    8606:	0e 94 78 25 	call	0x4af0	; 0x4af0 <FSettingSystem>
		  if (SubMenu==MENU_DONE)stMenuSettings=msDisplayPage;
    860a:	81 30       	cpi	r24, 0x01	; 1
    860c:	61 f4       	brne	.+24     	; 0x8626 <FMenuSettings+0x18e>
    860e:	04 c0       	rjmp	.+8      	; 0x8618 <FMenuSettings+0x180>
	      break;	 
     case msMenuSettingPumpPooling:
	      SubMenu=FSettingPumpPooling();
    8610:	0e 94 66 23 	call	0x46cc	; 0x46cc <FSettingPumpPooling>
		  if (SubMenu==MENU_DONE)stMenuSettings=msDisplayPage;
    8614:	81 30       	cpi	r24, 0x01	; 1
    8616:	49 f4       	brne	.+18     	; 0x862a <FMenuSettings+0x192>
    8618:	80 93 01 03 	sts	0x0301, r24
    861c:	04 c0       	rjmp	.+8      	; 0x8626 <FMenuSettings+0x18e>
	      break;
//------------------------------------------------------------------
     case msMenuSettingExit:
	      stMenuSettings=msInit;
    861e:	10 92 01 03 	sts	0x0301, r1
	      Result=MENU_DONE;
    8622:	81 e0       	ldi	r24, 0x01	; 1
	      break;
    8624:	08 95       	ret
}



char FMenuSettings(){
char Result=MENU_NONE;
    8626:	80 e0       	ldi	r24, 0x00	; 0
    8628:	08 95       	ret
    862a:	80 e0       	ldi	r24, 0x00	; 0
	      stMenuSettings=msInit;
	      Result=MENU_DONE;
	      break;
	 }
   return Result;
}
    862c:	08 95       	ret

0000862e <ScanEDCFlow>:


	 //uart(0,1,data);

     //EDC-MSG
     if (data==0x02){
    862e:	82 30       	cpi	r24, 0x02	; 2
    8630:	39 f4       	brne	.+14     	; 0x8640 <ScanEDCFlow+0x12>
	     IsEDCFlow=True;
    8632:	91 e0       	ldi	r25, 0x01	; 1
    8634:	90 93 86 03 	sts	0x0386, r25
		 nFlow=0;
    8638:	10 92 85 03 	sts	0x0385, r1
    863c:	10 92 84 03 	sts	0x0384, r1
	 }//FillMessage
     if (IsEDCFlow==True){
    8640:	90 91 86 03 	lds	r25, 0x0386
    8644:	91 30       	cpi	r25, 0x01	; 1
    8646:	71 f4       	brne	.+28     	; 0x8664 <ScanEDCFlow+0x36>
	     rcv_trans[nFlow]=data;
    8648:	20 91 84 03 	lds	r18, 0x0384
    864c:	30 91 85 03 	lds	r19, 0x0385
    8650:	f9 01       	movw	r30, r18
    8652:	ef 5f       	subi	r30, 0xFF	; 255
    8654:	f5 4f       	sbci	r31, 0xF5	; 245
    8656:	80 83       	st	Z, r24
		 nFlow++;
    8658:	2f 5f       	subi	r18, 0xFF	; 255
    865a:	3f 4f       	sbci	r19, 0xFF	; 255
    865c:	30 93 85 03 	sts	0x0385, r19
    8660:	20 93 84 03 	sts	0x0384, r18
	 }//CloseMessage
	 if ((data==0x03)||(nFlow>=MSG03_LENGTH)){
    8664:	83 30       	cpi	r24, 0x03	; 3
    8666:	41 f0       	breq	.+16     	; 0x8678 <ScanEDCFlow+0x4a>
    8668:	80 91 84 03 	lds	r24, 0x0384
    866c:	90 91 85 03 	lds	r25, 0x0385
    8670:	8d 34       	cpi	r24, 0x4D	; 77
    8672:	91 05       	cpc	r25, r1
    8674:	08 f4       	brcc	.+2      	; 0x8678 <ScanEDCFlow+0x4a>
    8676:	7f c0       	rjmp	.+254    	; 0x8776 <ScanEDCFlow+0x148>
	     //for(i=0;i<nFlow;i++){uart(0,1,rcv_trans[i]);}
	     IsEDCFlow=False;
    8678:	10 92 86 03 	sts	0x0386, r1
		 EDCMsgCode=((rcv_trans[1]-'0')*10)+(rcv_trans[2]-'0');
    867c:	80 91 03 0a 	lds	r24, 0x0A03
    8680:	80 51       	subi	r24, 0x10	; 16
    8682:	90 91 02 0a 	lds	r25, 0x0A02
    8686:	99 0f       	add	r25, r25
    8688:	29 2f       	mov	r18, r25
    868a:	22 0f       	add	r18, r18
    868c:	22 0f       	add	r18, r18
    868e:	29 0f       	add	r18, r25
    8690:	82 0f       	add	r24, r18

		 if (EDCMsgCode==0x03){
    8692:	83 30       	cpi	r24, 0x03	; 3
    8694:	09 f0       	breq	.+2      	; 0x8698 <ScanEDCFlow+0x6a>
    8696:	4c c0       	rjmp	.+152    	; 0x8730 <ScanEDCFlow+0x102>
	         StrPosCopy(rcv_trans,strTranNo,3,6);
    8698:	81 e0       	ldi	r24, 0x01	; 1
    869a:	9a e0       	ldi	r25, 0x0A	; 10
    869c:	6c e8       	ldi	r22, 0x8C	; 140
    869e:	7d e0       	ldi	r23, 0x0D	; 13
    86a0:	43 e0       	ldi	r20, 0x03	; 3
    86a2:	50 e0       	ldi	r21, 0x00	; 0
    86a4:	26 e0       	ldi	r18, 0x06	; 6
    86a6:	30 e0       	ldi	r19, 0x00	; 0
    86a8:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
             StrPosCopy(rcv_trans,strFIP_ID,9,2);
    86ac:	81 e0       	ldi	r24, 0x01	; 1
    86ae:	9a e0       	ldi	r25, 0x0A	; 10
    86b0:	6d e9       	ldi	r22, 0x9D	; 157
    86b2:	78 e0       	ldi	r23, 0x08	; 8
    86b4:	49 e0       	ldi	r20, 0x09	; 9
    86b6:	50 e0       	ldi	r21, 0x00	; 0
    86b8:	22 e0       	ldi	r18, 0x02	; 2
    86ba:	30 e0       	ldi	r19, 0x00	; 0
    86bc:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
             StrPosCopy(rcv_trans,strCardType,11,15);
    86c0:	81 e0       	ldi	r24, 0x01	; 1
    86c2:	9a e0       	ldi	r25, 0x0A	; 10
    86c4:	68 ea       	ldi	r22, 0xA8	; 168
    86c6:	7d e0       	ldi	r23, 0x0D	; 13
    86c8:	4b e0       	ldi	r20, 0x0B	; 11
    86ca:	50 e0       	ldi	r21, 0x00	; 0
    86cc:	2f e0       	ldi	r18, 0x0F	; 15
    86ce:	30 e0       	ldi	r19, 0x00	; 0
    86d0:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
             StrPosCopy(rcv_trans,strCardID,26,19);
    86d4:	81 e0       	ldi	r24, 0x01	; 1
    86d6:	9a e0       	ldi	r25, 0x0A	; 10
    86d8:	6d e6       	ldi	r22, 0x6D	; 109
    86da:	7c e0       	ldi	r23, 0x0C	; 12
    86dc:	4a e1       	ldi	r20, 0x1A	; 26
    86de:	50 e0       	ldi	r21, 0x00	; 0
    86e0:	23 e1       	ldi	r18, 0x13	; 19
    86e2:	30 e0       	ldi	r19, 0x00	; 0
    86e4:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
             StrPosCopy(rcv_trans,strApprovalCode,45,6);
    86e8:	81 e0       	ldi	r24, 0x01	; 1
    86ea:	9a e0       	ldi	r25, 0x0A	; 10
    86ec:	64 ed       	ldi	r22, 0xD4	; 212
    86ee:	78 e0       	ldi	r23, 0x08	; 8
    86f0:	4d e2       	ldi	r20, 0x2D	; 45
    86f2:	50 e0       	ldi	r21, 0x00	; 0
    86f4:	26 e0       	ldi	r18, 0x06	; 6
    86f6:	30 e0       	ldi	r19, 0x00	; 0
    86f8:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
             StrPosCopy(rcv_trans,strInvoiceNumber,51,10);
    86fc:	81 e0       	ldi	r24, 0x01	; 1
    86fe:	9a e0       	ldi	r25, 0x0A	; 10
    8700:	67 e3       	ldi	r22, 0x37	; 55
    8702:	78 e0       	ldi	r23, 0x08	; 8
    8704:	43 e3       	ldi	r20, 0x33	; 51
    8706:	50 e0       	ldi	r21, 0x00	; 0
    8708:	2a e0       	ldi	r18, 0x0A	; 10
    870a:	30 e0       	ldi	r19, 0x00	; 0
    870c:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
             StrPosCopy(rcv_trans,strDateTime,61,14);
    8710:	81 e0       	ldi	r24, 0x01	; 1
    8712:	9a e0       	ldi	r25, 0x0A	; 10
    8714:	63 ea       	ldi	r22, 0xA3	; 163
    8716:	7c e0       	ldi	r23, 0x0C	; 12
    8718:	4d e3       	ldi	r20, 0x3D	; 61
    871a:	50 e0       	ldi	r21, 0x00	; 0
    871c:	2e e0       	ldi	r18, 0x0E	; 14
    871e:	30 e0       	ldi	r19, 0x00	; 0
    8720:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
		     IsEDCApproved=True;//Sending Message 92
    8724:	81 e0       	ldi	r24, 0x01	; 1
    8726:	80 93 78 02 	sts	0x0278, r24
			 IsPrintApprovalCode=True;
    872a:	80 93 79 02 	sts	0x0279, r24
    872e:	08 95       	ret
	    }else
		 if (EDCMsgCode==0x04){
    8730:	84 30       	cpi	r24, 0x04	; 4
    8732:	09 f5       	brne	.+66     	; 0x8776 <ScanEDCFlow+0x148>
             StrPosCopy(rcv_trans,strApprovalCode,3,6);
    8734:	81 e0       	ldi	r24, 0x01	; 1
    8736:	9a e0       	ldi	r25, 0x0A	; 10
    8738:	64 ed       	ldi	r22, 0xD4	; 212
    873a:	78 e0       	ldi	r23, 0x08	; 8
    873c:	43 e0       	ldi	r20, 0x03	; 3
    873e:	50 e0       	ldi	r21, 0x00	; 0
    8740:	26 e0       	ldi	r18, 0x06	; 6
    8742:	30 e0       	ldi	r19, 0x00	; 0
    8744:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
             StrPosCopy(rcv_trans,strInvoiceNumber,9,10);
    8748:	81 e0       	ldi	r24, 0x01	; 1
    874a:	9a e0       	ldi	r25, 0x0A	; 10
    874c:	67 e3       	ldi	r22, 0x37	; 55
    874e:	78 e0       	ldi	r23, 0x08	; 8
    8750:	49 e0       	ldi	r20, 0x09	; 9
    8752:	50 e0       	ldi	r21, 0x00	; 0
    8754:	2a e0       	ldi	r18, 0x0A	; 10
    8756:	30 e0       	ldi	r19, 0x00	; 0
    8758:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
             StrPosCopy(rcv_trans,strDateTime,19,14);
    875c:	81 e0       	ldi	r24, 0x01	; 1
    875e:	9a e0       	ldi	r25, 0x0A	; 10
    8760:	63 ea       	ldi	r22, 0xA3	; 163
    8762:	7c e0       	ldi	r23, 0x0C	; 12
    8764:	43 e1       	ldi	r20, 0x13	; 19
    8766:	50 e0       	ldi	r21, 0x00	; 0
    8768:	2e e0       	ldi	r18, 0x0E	; 14
    876a:	30 e0       	ldi	r19, 0x00	; 0
    876c:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
			 IsVoidTransaction=True;
    8770:	81 e0       	ldi	r24, 0x01	; 1
    8772:	80 93 7a 02 	sts	0x027A, r24
    8776:	08 95       	ret

00008778 <GetMessageID>:
		  }
       IsStandaloneAcknoledge=True;
	  }
}

char GetMessageID(char *strMessageFlow){
    8778:	0f 93       	push	r16
    877a:	1f 93       	push	r17
    877c:	df 93       	push	r29
    877e:	cf 93       	push	r28
    8780:	00 d0       	rcall	.+0      	; 0x8782 <GetMessageID+0xa>
    8782:	0f 92       	push	r0
    8784:	cd b7       	in	r28, 0x3d	; 61
    8786:	de b7       	in	r29, 0x3e	; 62
     char Result,strMsgID[3];
	 StrPosCopy(strMessageFlow,strMsgID,0,2);
    8788:	8e 01       	movw	r16, r28
    878a:	0f 5f       	subi	r16, 0xFF	; 255
    878c:	1f 4f       	sbci	r17, 0xFF	; 255
    878e:	b8 01       	movw	r22, r16
    8790:	40 e0       	ldi	r20, 0x00	; 0
    8792:	50 e0       	ldi	r21, 0x00	; 0
    8794:	22 e0       	ldi	r18, 0x02	; 2
    8796:	30 e0       	ldi	r19, 0x00	; 0
    8798:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
	 RemZeroLead(strMsgID);
    879c:	c8 01       	movw	r24, r16
    879e:	0e 94 93 39 	call	0x7326	; 0x7326 <RemZeroLead>
	 Result=atoi(strMsgID);
    87a2:	c8 01       	movw	r24, r16
    87a4:	0e 94 e0 a7 	call	0x14fc0	; 0x14fc0 <atoi>
  return Result;
}
    87a8:	0f 90       	pop	r0
    87aa:	0f 90       	pop	r0
    87ac:	0f 90       	pop	r0
    87ae:	cf 91       	pop	r28
    87b0:	df 91       	pop	r29
    87b2:	1f 91       	pop	r17
    87b4:	0f 91       	pop	r16
    87b6:	08 95       	ret

000087b8 <DisplayPumpStatus>:
		  break;         	 
	 }
  return Result;	 
}

void DisplayPumpStatus(){
    87b8:	ef 92       	push	r14
    87ba:	ff 92       	push	r15
    87bc:	0f 93       	push	r16
    87be:	1f 93       	push	r17
    87c0:	df 93       	push	r29
    87c2:	cf 93       	push	r28
    87c4:	cd b7       	in	r28, 0x3d	; 61
    87c6:	de b7       	in	r29, 0x3e	; 62
    87c8:	a8 97       	sbiw	r28, 0x28	; 40
    87ca:	0f b6       	in	r0, 0x3f	; 63
    87cc:	f8 94       	cli
    87ce:	de bf       	out	0x3e, r29	; 62
    87d0:	0f be       	out	0x3f, r0	; 63
    87d2:	cd bf       	out	0x3d, r28	; 61
     char SPump[20],lcdteks[20];

	 if (IsNewPumpStatus==True){
    87d4:	80 91 01 01 	lds	r24, 0x0101
    87d8:	81 30       	cpi	r24, 0x01	; 1
    87da:	b1 f5       	brne	.+108    	; 0x8848 <DisplayPumpStatus+0x90>
	     IsNewPumpStatus=False;
    87dc:	10 92 01 01 	sts	0x0101, r1
		 BackLightTrig();
    87e0:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <BackLightTrig>
		 StrPosCopy(strPumpStatus,SPump,0,PumpCountMax);
    87e4:	20 91 3a 02 	lds	r18, 0x023A
    87e8:	82 e0       	ldi	r24, 0x02	; 2
    87ea:	91 e0       	ldi	r25, 0x01	; 1
    87ec:	7e 01       	movw	r14, r28
    87ee:	08 94       	sec
    87f0:	e1 1c       	adc	r14, r1
    87f2:	f1 1c       	adc	r15, r1
    87f4:	b7 01       	movw	r22, r14
    87f6:	40 e0       	ldi	r20, 0x00	; 0
    87f8:	50 e0       	ldi	r21, 0x00	; 0
    87fa:	30 e0       	ldi	r19, 0x00	; 0
    87fc:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
		 sprintf_P(lcdteks,PSTR("%s"),SPump);
    8800:	00 d0       	rcall	.+0      	; 0x8802 <DisplayPumpStatus+0x4a>
    8802:	00 d0       	rcall	.+0      	; 0x8804 <DisplayPumpStatus+0x4c>
    8804:	00 d0       	rcall	.+0      	; 0x8806 <DisplayPumpStatus+0x4e>
    8806:	ed b7       	in	r30, 0x3d	; 61
    8808:	fe b7       	in	r31, 0x3e	; 62
    880a:	31 96       	adiw	r30, 0x01	; 1
    880c:	8e 01       	movw	r16, r28
    880e:	0b 5e       	subi	r16, 0xEB	; 235
    8810:	1f 4f       	sbci	r17, 0xFF	; 255
    8812:	ad b7       	in	r26, 0x3d	; 61
    8814:	be b7       	in	r27, 0x3e	; 62
    8816:	12 96       	adiw	r26, 0x02	; 2
    8818:	1c 93       	st	X, r17
    881a:	0e 93       	st	-X, r16
    881c:	11 97       	sbiw	r26, 0x01	; 1
    881e:	8e ef       	ldi	r24, 0xFE	; 254
    8820:	93 e2       	ldi	r25, 0x23	; 35
    8822:	93 83       	std	Z+3, r25	; 0x03
    8824:	82 83       	std	Z+2, r24	; 0x02
    8826:	f5 82       	std	Z+5, r15	; 0x05
    8828:	e4 82       	std	Z+4, r14	; 0x04
    882a:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
         lcd_print(4,1,lcdteks);
    882e:	8d b7       	in	r24, 0x3d	; 61
    8830:	9e b7       	in	r25, 0x3e	; 62
    8832:	06 96       	adiw	r24, 0x06	; 6
    8834:	0f b6       	in	r0, 0x3f	; 63
    8836:	f8 94       	cli
    8838:	9e bf       	out	0x3e, r25	; 62
    883a:	0f be       	out	0x3f, r0	; 63
    883c:	8d bf       	out	0x3d, r24	; 61
    883e:	84 e0       	ldi	r24, 0x04	; 4
    8840:	61 e0       	ldi	r22, 0x01	; 1
    8842:	a8 01       	movw	r20, r16
    8844:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
     	 }
}
    8848:	a8 96       	adiw	r28, 0x28	; 40
    884a:	0f b6       	in	r0, 0x3f	; 63
    884c:	f8 94       	cli
    884e:	de bf       	out	0x3e, r29	; 62
    8850:	0f be       	out	0x3f, r0	; 63
    8852:	cd bf       	out	0x3d, r28	; 61
    8854:	cf 91       	pop	r28
    8856:	df 91       	pop	r29
    8858:	1f 91       	pop	r17
    885a:	0f 91       	pop	r16
    885c:	ff 90       	pop	r15
    885e:	ef 90       	pop	r14
    8860:	08 95       	ret

00008862 <DisplayIdle>:
	          lcd_put(x,y,'X');     
			  }

}

void DisplayIdle(){
    8862:	8f 92       	push	r8
    8864:	9f 92       	push	r9
    8866:	af 92       	push	r10
    8868:	bf 92       	push	r11
    886a:	cf 92       	push	r12
    886c:	df 92       	push	r13
    886e:	ef 92       	push	r14
    8870:	ff 92       	push	r15
    8872:	0f 93       	push	r16
    8874:	1f 93       	push	r17
    8876:	df 93       	push	r29
    8878:	cf 93       	push	r28
    887a:	cd b7       	in	r28, 0x3d	; 61
    887c:	de b7       	in	r29, 0x3e	; 62
    887e:	67 97       	sbiw	r28, 0x17	; 23
    8880:	0f b6       	in	r0, 0x3f	; 63
    8882:	f8 94       	cli
    8884:	de bf       	out	0x3e, r29	; 62
    8886:	0f be       	out	0x3f, r0	; 63
    8888:	cd bf       	out	0x3d, r28	; 61
static unsigned int iLoopDisplayIdle=0;
static char stDispIdle=diScan;
     char i,iDisp;
     char lcdteks[20],sFIP[3];

     iLoopDisplayIdle++;
    888a:	80 91 61 03 	lds	r24, 0x0361
    888e:	90 91 62 03 	lds	r25, 0x0362
    8892:	01 96       	adiw	r24, 0x01	; 1
    8894:	90 93 62 03 	sts	0x0362, r25
    8898:	80 93 61 03 	sts	0x0361, r24
     //Setting DateTime ON

	if ((iLoopDisplayIdle%50)==0){
    889c:	62 e3       	ldi	r22, 0x32	; 50
    889e:	70 e0       	ldi	r23, 0x00	; 0
    88a0:	0e 94 97 a7 	call	0x14f2e	; 0x14f2e <__udivmodhi4>
    88a4:	00 97       	sbiw	r24, 0x00	; 0
    88a6:	09 f5       	brne	.+66     	; 0x88ea <DisplayIdle+0x88>
	   if (IFType==IT_STANDALONE)DisplayPumpStatus();
    88a8:	80 91 00 01 	lds	r24, 0x0100
    88ac:	82 30       	cpi	r24, 0x02	; 2
    88ae:	11 f4       	brne	.+4      	; 0x88b4 <DisplayIdle+0x52>
    88b0:	0e 94 dc 43 	call	0x87b8	; 0x87b8 <DisplayPumpStatus>
	   if(eeprom_read_byte(&DefShowDateTime)) DisplayDateTime();
    88b4:	87 e3       	ldi	r24, 0x37	; 55
    88b6:	90 e0       	ldi	r25, 0x00	; 0
    88b8:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
    88bc:	88 23       	and	r24, r24
    88be:	19 f0       	breq	.+6      	; 0x88c6 <DisplayIdle+0x64>
    88c0:	0e 94 1e 18 	call	0x303c	; 0x303c <DisplayDateTime>
    88c4:	02 c0       	rjmp	.+4      	; 0x88ca <DisplayIdle+0x68>
       else DisplayTicker();
    88c6:	0e 94 75 18 	call	0x30ea	; 0x30ea <DisplayTicker>
	   //Display Standalone Sequnece
	   
	   if((IFType==IT_STANDALONE)&&(IsNewPoolingSequence==True)){
    88ca:	80 91 00 01 	lds	r24, 0x0100
    88ce:	82 30       	cpi	r24, 0x02	; 2
    88d0:	61 f4       	brne	.+24     	; 0x88ea <DisplayIdle+0x88>
    88d2:	80 91 5f 02 	lds	r24, 0x025F
    88d6:	81 30       	cpi	r24, 0x01	; 1
    88d8:	41 f4       	brne	.+16     	; 0x88ea <DisplayIdle+0x88>
	       IsNewPoolingSequence=False;
    88da:	10 92 5f 02 	sts	0x025F, r1
		   DisplayStandaloneSequence(4,18,iSequencePooling);
    88de:	84 e0       	ldi	r24, 0x04	; 4
    88e0:	62 e1       	ldi	r22, 0x12	; 18
    88e2:	40 91 5e 02 	lds	r20, 0x025E
    88e6:	0e 94 db 18 	call	0x31b6	; 0x31b6 <DisplayStandaloneSequence>

	 }
     //DisplayPumpStatus Standalone Mode

	 //Display Printing FIP
	 switch (stDispIdle){
    88ea:	e0 90 60 03 	lds	r14, 0x0360
    88ee:	ee 20       	and	r14, r14
    88f0:	29 f0       	breq	.+10     	; 0x88fc <DisplayIdle+0x9a>
    88f2:	8e 2d       	mov	r24, r14
    88f4:	81 30       	cpi	r24, 0x01	; 1
    88f6:	09 f0       	breq	.+2      	; 0x88fa <DisplayIdle+0x98>
    88f8:	58 c0       	rjmp	.+176    	; 0x89aa <DisplayIdle+0x148>
    88fa:	2f c0       	rjmp	.+94     	; 0x895a <DisplayIdle+0xf8>
	 case diScan:
	      if (IsBusyIdlePrinting==True){
    88fc:	e0 90 91 02 	lds	r14, 0x0291
    8900:	9e 2d       	mov	r25, r14
    8902:	91 30       	cpi	r25, 0x01	; 1
    8904:	09 f0       	breq	.+2      	; 0x8908 <DisplayIdle+0xa6>
    8906:	51 c0       	rjmp	.+162    	; 0x89aa <DisplayIdle+0x148>
		       sprintf_P(lcdteks,PSTR("Printing FIP%s "),strFIP_ID);
    8908:	00 d0       	rcall	.+0      	; 0x890a <DisplayIdle+0xa8>
    890a:	00 d0       	rcall	.+0      	; 0x890c <DisplayIdle+0xaa>
    890c:	00 d0       	rcall	.+0      	; 0x890e <DisplayIdle+0xac>
    890e:	ed b7       	in	r30, 0x3d	; 61
    8910:	fe b7       	in	r31, 0x3e	; 62
    8912:	31 96       	adiw	r30, 0x01	; 1
    8914:	8e 01       	movw	r16, r28
    8916:	0c 5f       	subi	r16, 0xFC	; 252
    8918:	1f 4f       	sbci	r17, 0xFF	; 255
    891a:	ad b7       	in	r26, 0x3d	; 61
    891c:	be b7       	in	r27, 0x3e	; 62
    891e:	12 96       	adiw	r26, 0x02	; 2
    8920:	1c 93       	st	X, r17
    8922:	0e 93       	st	-X, r16
    8924:	11 97       	sbiw	r26, 0x01	; 1
    8926:	87 e1       	ldi	r24, 0x17	; 23
    8928:	9e e1       	ldi	r25, 0x1E	; 30
    892a:	93 83       	std	Z+3, r25	; 0x03
    892c:	82 83       	std	Z+2, r24	; 0x02
    892e:	8d e9       	ldi	r24, 0x9D	; 157
    8930:	98 e0       	ldi	r25, 0x08	; 8
    8932:	95 83       	std	Z+5, r25	; 0x05
    8934:	84 83       	std	Z+4, r24	; 0x04
    8936:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
			   lcd_print(3,1,lcdteks);
    893a:	ed b7       	in	r30, 0x3d	; 61
    893c:	fe b7       	in	r31, 0x3e	; 62
    893e:	36 96       	adiw	r30, 0x06	; 6
    8940:	0f b6       	in	r0, 0x3f	; 63
    8942:	f8 94       	cli
    8944:	fe bf       	out	0x3e, r31	; 62
    8946:	0f be       	out	0x3f, r0	; 63
    8948:	ed bf       	out	0x3d, r30	; 61
    894a:	83 e0       	ldi	r24, 0x03	; 3
    894c:	61 e0       	ldi	r22, 0x01	; 1
    894e:	a8 01       	movw	r20, r16
    8950:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
			   stDispIdle=diWaitNoBusy;
    8954:	e0 92 60 03 	sts	0x0360, r14
    8958:	28 c0       	rjmp	.+80     	; 0x89aa <DisplayIdle+0x148>
		  }         
	      break;
     case diWaitNoBusy:
	      if (IsBusyIdlePrinting==False){
    895a:	80 91 91 02 	lds	r24, 0x0291
    895e:	88 23       	and	r24, r24
    8960:	21 f5       	brne	.+72     	; 0x89aa <DisplayIdle+0x148>
		       sprintf_P(lcdteks,PSTR("                    "));
    8962:	00 d0       	rcall	.+0      	; 0x8964 <DisplayIdle+0x102>
    8964:	00 d0       	rcall	.+0      	; 0x8966 <DisplayIdle+0x104>
    8966:	8e 01       	movw	r16, r28
    8968:	0c 5f       	subi	r16, 0xFC	; 252
    896a:	1f 4f       	sbci	r17, 0xFF	; 255
    896c:	ad b7       	in	r26, 0x3d	; 61
    896e:	be b7       	in	r27, 0x3e	; 62
    8970:	12 96       	adiw	r26, 0x02	; 2
    8972:	1c 93       	st	X, r17
    8974:	0e 93       	st	-X, r16
    8976:	11 97       	sbiw	r26, 0x01	; 1
    8978:	82 e0       	ldi	r24, 0x02	; 2
    897a:	9e e1       	ldi	r25, 0x1E	; 30
    897c:	14 96       	adiw	r26, 0x04	; 4
    897e:	9c 93       	st	X, r25
    8980:	8e 93       	st	-X, r24
    8982:	13 97       	sbiw	r26, 0x03	; 3
    8984:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
			   lcd_print(3,1,lcdteks);
    8988:	0f 90       	pop	r0
    898a:	0f 90       	pop	r0
    898c:	0f 90       	pop	r0
    898e:	0f 90       	pop	r0
    8990:	83 e0       	ldi	r24, 0x03	; 3
    8992:	61 e0       	ldi	r22, 0x01	; 1
    8994:	a8 01       	movw	r20, r16
    8996:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
			   stDispIdle=diScan;
    899a:	10 92 60 03 	sts	0x0360, r1
			   if (nLocalAccount>0)IsViewFillingFIP=True;
    899e:	80 91 6d 02 	lds	r24, 0x026D
    89a2:	88 23       	and	r24, r24
    89a4:	11 f0       	breq	.+4      	; 0x89aa <DisplayIdle+0x148>
    89a6:	e0 92 74 02 	sts	0x0274, r14
		  }
	      break;     
	 }
	 //Display Filling FIP
	 if (IsViewFillingFIP==True){
    89aa:	80 91 74 02 	lds	r24, 0x0274
    89ae:	81 30       	cpi	r24, 0x01	; 1
    89b0:	09 f0       	breq	.+2      	; 0x89b4 <DisplayIdle+0x152>
    89b2:	62 c0       	rjmp	.+196    	; 0x8a78 <DisplayIdle+0x216>
	     IsViewFillingFIP=False;
    89b4:	10 92 74 02 	sts	0x0274, r1
		 if (nLocalAccount>0){
    89b8:	80 91 6d 02 	lds	r24, 0x026D
    89bc:	88 23       	and	r24, r24
    89be:	09 f4       	brne	.+2      	; 0x89c2 <DisplayIdle+0x160>
    89c0:	55 c0       	rjmp	.+170    	; 0x8a6c <DisplayIdle+0x20a>
		     lcd_printf(3,1,PSTR("@FIP:"));
    89c2:	83 e0       	ldi	r24, 0x03	; 3
    89c4:	61 e0       	ldi	r22, 0x01	; 1
    89c6:	4c ef       	ldi	r20, 0xFC	; 252
    89c8:	5d e1       	ldi	r21, 0x1D	; 29
    89ca:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		     for (iDisp=0;iDisp<nLocalAccount;iDisp++){
    89ce:	26 e0       	ldi	r18, 0x06	; 6
    89d0:	82 2e       	mov	r8, r18
    89d2:	99 24       	eor	r9, r9
			      //leadingZero(LocalAccountFIP[iDisp],sFIP);
				  sprintf_P(sFIP,PSTR("%.2d"),LocalAccountFIP[iDisp]);
    89d4:	8e 01       	movw	r16, r28
    89d6:	0f 5f       	subi	r16, 0xFF	; 255
    89d8:	1f 4f       	sbci	r17, 0xFF	; 255
    89da:	97 ef       	ldi	r25, 0xF7	; 247
    89dc:	c9 2e       	mov	r12, r25
    89de:	9d e1       	ldi	r25, 0x1D	; 29
    89e0:	d9 2e       	mov	r13, r25
			      sprintf_P(lcdteks,PSTR("#%s"),sFIP);
    89e2:	84 e0       	ldi	r24, 0x04	; 4
    89e4:	e8 2e       	mov	r14, r24
    89e6:	f1 2c       	mov	r15, r1
    89e8:	ec 0e       	add	r14, r28
    89ea:	fd 1e       	adc	r15, r29
    89ec:	b3 ef       	ldi	r27, 0xF3	; 243
    89ee:	ab 2e       	mov	r10, r27
    89f0:	bd e1       	ldi	r27, 0x1D	; 29
    89f2:	bb 2e       	mov	r11, r27
	 //Display Filling FIP
	 if (IsViewFillingFIP==True){
	     IsViewFillingFIP=False;
		 if (nLocalAccount>0){
		     lcd_printf(3,1,PSTR("@FIP:"));
		     for (iDisp=0;iDisp<nLocalAccount;iDisp++){
    89f4:	36 c0       	rjmp	.+108    	; 0x8a62 <DisplayIdle+0x200>
			      //leadingZero(LocalAccountFIP[iDisp],sFIP);
				  sprintf_P(sFIP,PSTR("%.2d"),LocalAccountFIP[iDisp]);
    89f6:	00 d0       	rcall	.+0      	; 0x89f8 <DisplayIdle+0x196>
    89f8:	00 d0       	rcall	.+0      	; 0x89fa <DisplayIdle+0x198>
    89fa:	00 d0       	rcall	.+0      	; 0x89fc <DisplayIdle+0x19a>
    89fc:	ed b7       	in	r30, 0x3d	; 61
    89fe:	fe b7       	in	r31, 0x3e	; 62
    8a00:	31 96       	adiw	r30, 0x01	; 1
    8a02:	ad b7       	in	r26, 0x3d	; 61
    8a04:	be b7       	in	r27, 0x3e	; 62
    8a06:	12 96       	adiw	r26, 0x02	; 2
    8a08:	1c 93       	st	X, r17
    8a0a:	0e 93       	st	-X, r16
    8a0c:	11 97       	sbiw	r26, 0x01	; 1
    8a0e:	d3 82       	std	Z+3, r13	; 0x03
    8a10:	c2 82       	std	Z+2, r12	; 0x02
    8a12:	a9 2d       	mov	r26, r9
    8a14:	b0 e0       	ldi	r27, 0x00	; 0
    8a16:	a5 5c       	subi	r26, 0xC5	; 197
    8a18:	bb 4f       	sbci	r27, 0xFB	; 251
    8a1a:	8c 91       	ld	r24, X
    8a1c:	84 83       	std	Z+4, r24	; 0x04
    8a1e:	15 82       	std	Z+5, r1	; 0x05
    8a20:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
			      sprintf_P(lcdteks,PSTR("#%s"),sFIP);
    8a24:	ed b7       	in	r30, 0x3d	; 61
    8a26:	fe b7       	in	r31, 0x3e	; 62
    8a28:	31 96       	adiw	r30, 0x01	; 1
    8a2a:	ad b7       	in	r26, 0x3d	; 61
    8a2c:	be b7       	in	r27, 0x3e	; 62
    8a2e:	12 96       	adiw	r26, 0x02	; 2
    8a30:	fc 92       	st	X, r15
    8a32:	ee 92       	st	-X, r14
    8a34:	11 97       	sbiw	r26, 0x01	; 1
    8a36:	b3 82       	std	Z+3, r11	; 0x03
    8a38:	a2 82       	std	Z+2, r10	; 0x02
    8a3a:	15 83       	std	Z+5, r17	; 0x05
    8a3c:	04 83       	std	Z+4, r16	; 0x04
    8a3e:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
			      lcd_print(3,6+(iDisp*3),lcdteks);
    8a42:	ed b7       	in	r30, 0x3d	; 61
    8a44:	fe b7       	in	r31, 0x3e	; 62
    8a46:	36 96       	adiw	r30, 0x06	; 6
    8a48:	0f b6       	in	r0, 0x3f	; 63
    8a4a:	f8 94       	cli
    8a4c:	fe bf       	out	0x3e, r31	; 62
    8a4e:	0f be       	out	0x3f, r0	; 63
    8a50:	ed bf       	out	0x3d, r30	; 61
    8a52:	83 e0       	ldi	r24, 0x03	; 3
    8a54:	68 2d       	mov	r22, r8
    8a56:	a7 01       	movw	r20, r14
    8a58:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
	 //Display Filling FIP
	 if (IsViewFillingFIP==True){
	     IsViewFillingFIP=False;
		 if (nLocalAccount>0){
		     lcd_printf(3,1,PSTR("@FIP:"));
		     for (iDisp=0;iDisp<nLocalAccount;iDisp++){
    8a5c:	93 94       	inc	r9
    8a5e:	f3 e0       	ldi	r31, 0x03	; 3
    8a60:	8f 0e       	add	r8, r31
    8a62:	80 91 6d 02 	lds	r24, 0x026D
    8a66:	98 16       	cp	r9, r24
    8a68:	30 f2       	brcs	.-116    	; 0x89f6 <DisplayIdle+0x194>
    8a6a:	06 c0       	rjmp	.+12     	; 0x8a78 <DisplayIdle+0x216>
				  sprintf_P(sFIP,PSTR("%.2d"),LocalAccountFIP[iDisp]);
			      sprintf_P(lcdteks,PSTR("#%s"),sFIP);
			      lcd_print(3,6+(iDisp*3),lcdteks);
		     }
		 }else{
		 lcd_printf(3,1,PSTR("                    "));
    8a6c:	83 e0       	ldi	r24, 0x03	; 3
    8a6e:	61 e0       	ldi	r22, 0x01	; 1
    8a70:	4e ed       	ldi	r20, 0xDE	; 222
    8a72:	5d e1       	ldi	r21, 0x1D	; 29
    8a74:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		 }    
	 }
	 //Filling @FIP 
     if (IsCompleteFilling==True){
    8a78:	80 91 88 02 	lds	r24, 0x0288
    8a7c:	81 30       	cpi	r24, 0x01	; 1
    8a7e:	c1 f4       	brne	.+48     	; 0x8ab0 <DisplayIdle+0x24e>
	     IsCompleteFilling=False;
    8a80:	10 92 88 02 	sts	0x0288, r1
	     if (nLocalAccount>0){
    8a84:	20 91 6d 02 	lds	r18, 0x026D
    8a88:	22 23       	and	r18, r18
    8a8a:	91 f0       	breq	.+36     	; 0x8ab0 <DisplayIdle+0x24e>
    8a8c:	eb e3       	ldi	r30, 0x3B	; 59
    8a8e:	f4 e0       	ldi	r31, 0x04	; 4
	          lcd_put(x,y,'X');     
			  }

}

void DisplayIdle(){
    8a90:	82 2f       	mov	r24, r18
    8a92:	90 e0       	ldi	r25, 0x00	; 0
    8a94:	8e 0f       	add	r24, r30
    8a96:	9f 1f       	adc	r25, r31
    8a98:	02 c0       	rjmp	.+4      	; 0x8a9e <DisplayIdle+0x23c>
	 //Filling @FIP 
     if (IsCompleteFilling==True){
	     IsCompleteFilling=False;
	     if (nLocalAccount>0){
			 for(i=0;i<nLocalAccount;i++){//Shift data
			     LocalAccountFIP[i]=LocalAccountFIP[i+1];
    8a9a:	31 81       	ldd	r19, Z+1	; 0x01
    8a9c:	31 93       	st	Z+, r19
	 }
	 //Filling @FIP 
     if (IsCompleteFilling==True){
	     IsCompleteFilling=False;
	     if (nLocalAccount>0){
			 for(i=0;i<nLocalAccount;i++){//Shift data
    8a9e:	e8 17       	cp	r30, r24
    8aa0:	f9 07       	cpc	r31, r25
    8aa2:	d9 f7       	brne	.-10     	; 0x8a9a <DisplayIdle+0x238>
			     LocalAccountFIP[i]=LocalAccountFIP[i+1];
			 }
			 nLocalAccount--;
    8aa4:	21 50       	subi	r18, 0x01	; 1
    8aa6:	20 93 6d 02 	sts	0x026D, r18
             IsViewFillingFIP=True; 
    8aaa:	81 e0       	ldi	r24, 0x01	; 1
    8aac:	80 93 74 02 	sts	0x0274, r24
		 }
	 }
}
    8ab0:	67 96       	adiw	r28, 0x17	; 23
    8ab2:	0f b6       	in	r0, 0x3f	; 63
    8ab4:	f8 94       	cli
    8ab6:	de bf       	out	0x3e, r29	; 62
    8ab8:	0f be       	out	0x3f, r0	; 63
    8aba:	cd bf       	out	0x3d, r28	; 61
    8abc:	cf 91       	pop	r28
    8abe:	df 91       	pop	r29
    8ac0:	1f 91       	pop	r17
    8ac2:	0f 91       	pop	r16
    8ac4:	ff 90       	pop	r15
    8ac6:	ef 90       	pop	r14
    8ac8:	df 90       	pop	r13
    8aca:	cf 90       	pop	r12
    8acc:	bf 90       	pop	r11
    8ace:	af 90       	pop	r10
    8ad0:	9f 90       	pop	r9
    8ad2:	8f 90       	pop	r8
    8ad4:	08 95       	ret

00008ad6 <StrPosPaste>:
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
}
void StrPosPaste(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
    8ad6:	1f 93       	push	r17
unsigned int i;
     for(i=0;i<Length;i++){
    8ad8:	e8 2f       	mov	r30, r24
    8ada:	f9 2f       	mov	r31, r25
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
}
void StrPosPaste(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
    8adc:	db 01       	movw	r26, r22
    8ade:	a4 0f       	add	r26, r20
    8ae0:	b5 1f       	adc	r27, r21
unsigned int i;
     for(i=0;i<Length;i++){
    8ae2:	80 e0       	ldi	r24, 0x00	; 0
    8ae4:	90 e0       	ldi	r25, 0x00	; 0
    8ae6:	03 c0       	rjmp	.+6      	; 0x8aee <StrPosPaste+0x18>
	    Dest[IdxSource+i]=Source[i];
    8ae8:	11 91       	ld	r17, Z+
    8aea:	1d 93       	st	X+, r17
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
}
void StrPosPaste(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8aec:	01 96       	adiw	r24, 0x01	; 1
    8aee:	82 17       	cp	r24, r18
    8af0:	93 07       	cpc	r25, r19
    8af2:	d0 f3       	brcs	.-12     	; 0x8ae8 <StrPosPaste+0x12>
	    Dest[IdxSource+i]=Source[i];
	 }Dest[IdxSource+Length]=0;
    8af4:	64 0f       	add	r22, r20
    8af6:	75 1f       	adc	r23, r21
    8af8:	62 0f       	add	r22, r18
    8afa:	73 1f       	adc	r23, r19
    8afc:	fb 01       	movw	r30, r22
    8afe:	10 82       	st	Z, r1
}
    8b00:	1f 91       	pop	r17
    8b02:	08 95       	ret

00008b04 <GenerateGeniusCode>:
		  seedKey=strRawCode[i]-'0';
	 }strTemp[strlen(strRawCode)]=0;
     sprintf_P(strRawCode,PSTR("%s"),strTemp);
}

void GenerateGeniusCode(char *srcDate, char cSeed, char *strDestCode){
    8b04:	9f 92       	push	r9
    8b06:	af 92       	push	r10
    8b08:	bf 92       	push	r11
    8b0a:	cf 92       	push	r12
    8b0c:	df 92       	push	r13
    8b0e:	ef 92       	push	r14
    8b10:	ff 92       	push	r15
    8b12:	0f 93       	push	r16
    8b14:	1f 93       	push	r17
    8b16:	df 93       	push	r29
    8b18:	cf 93       	push	r28
    8b1a:	cd b7       	in	r28, 0x3d	; 61
    8b1c:	de b7       	in	r29, 0x3e	; 62
    8b1e:	28 97       	sbiw	r28, 0x08	; 8
    8b20:	0f b6       	in	r0, 0x3f	; 63
    8b22:	f8 94       	cli
    8b24:	de bf       	out	0x3e, r29	; 62
    8b26:	0f be       	out	0x3f, r0	; 63
    8b28:	cd bf       	out	0x3d, r28	; 61
    8b2a:	7c 01       	movw	r14, r24
    8b2c:	96 2e       	mov	r9, r22
    8b2e:	6a 01       	movw	r12, r20
	    sprintf_P(strSend,PSTR("Date[%s]"),srcDate);
		uart_print(1,1,strSend);
     #endif
    

	 StrPosCopy(srcDate,AddYear,strlen(srcDate)-2,2);
    8b30:	dc 01       	movw	r26, r24
    8b32:	0d 90       	ld	r0, X+
    8b34:	00 20       	and	r0, r0
    8b36:	e9 f7       	brne	.-6      	; 0x8b32 <GenerateGeniusCode+0x2e>
    8b38:	ad 01       	movw	r20, r26
    8b3a:	48 1b       	sub	r20, r24
    8b3c:	59 0b       	sbc	r21, r25
    8b3e:	43 50       	subi	r20, 0x03	; 3
    8b40:	50 40       	sbci	r21, 0x00	; 0
    8b42:	5e 01       	movw	r10, r28
    8b44:	08 94       	sec
    8b46:	a1 1c       	adc	r10, r1
    8b48:	b1 1c       	adc	r11, r1
    8b4a:	b5 01       	movw	r22, r10
    8b4c:	22 e0       	ldi	r18, 0x02	; 2
    8b4e:	30 e0       	ldi	r19, 0x00	; 0
    8b50:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
    #ifdef DEBUG_GENIUS_CODE
	    sprintf_P(strSend,PSTR("Year:[%s]"),AddYear);
		uart_print(1,1,strSend);
     #endif

	 sprintf_P(SYear,PSTR("20%s"),AddYear);
    8b54:	00 d0       	rcall	.+0      	; 0x8b56 <GenerateGeniusCode+0x52>
    8b56:	00 d0       	rcall	.+0      	; 0x8b58 <GenerateGeniusCode+0x54>
    8b58:	00 d0       	rcall	.+0      	; 0x8b5a <GenerateGeniusCode+0x56>
    8b5a:	ed b7       	in	r30, 0x3d	; 61
    8b5c:	fe b7       	in	r31, 0x3e	; 62
    8b5e:	31 96       	adiw	r30, 0x01	; 1
    8b60:	8e 01       	movw	r16, r28
    8b62:	0c 5f       	subi	r16, 0xFC	; 252
    8b64:	1f 4f       	sbci	r17, 0xFF	; 255
    8b66:	ad b7       	in	r26, 0x3d	; 61
    8b68:	be b7       	in	r27, 0x3e	; 62
    8b6a:	12 96       	adiw	r26, 0x02	; 2
    8b6c:	1c 93       	st	X, r17
    8b6e:	0e 93       	st	-X, r16
    8b70:	11 97       	sbiw	r26, 0x01	; 1
    8b72:	83 ed       	ldi	r24, 0xD3	; 211
    8b74:	99 e1       	ldi	r25, 0x19	; 25
    8b76:	93 83       	std	Z+3, r25	; 0x03
    8b78:	82 83       	std	Z+2, r24	; 0x02
    8b7a:	b5 82       	std	Z+5, r11	; 0x05
    8b7c:	a4 82       	std	Z+4, r10	; 0x04
    8b7e:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	 StrPosPaste(SYear,srcDate,strlen(srcDate)-2,strlen(SYear));
    8b82:	d7 01       	movw	r26, r14
    8b84:	0d 90       	ld	r0, X+
    8b86:	00 20       	and	r0, r0
    8b88:	e9 f7       	brne	.-6      	; 0x8b84 <GenerateGeniusCode+0x80>
    8b8a:	ad 01       	movw	r20, r26
    8b8c:	4e 19       	sub	r20, r14
    8b8e:	5f 09       	sbc	r21, r15
    8b90:	f8 01       	movw	r30, r16
    8b92:	01 90       	ld	r0, Z+
    8b94:	00 20       	and	r0, r0
    8b96:	e9 f7       	brne	.-6      	; 0x8b92 <GenerateGeniusCode+0x8e>
    8b98:	9f 01       	movw	r18, r30
    8b9a:	21 50       	subi	r18, 0x01	; 1
    8b9c:	30 40       	sbci	r19, 0x00	; 0
    8b9e:	20 1b       	sub	r18, r16
    8ba0:	31 0b       	sbc	r19, r17
    8ba2:	8d b7       	in	r24, 0x3d	; 61
    8ba4:	9e b7       	in	r25, 0x3e	; 62
    8ba6:	06 96       	adiw	r24, 0x06	; 6
    8ba8:	0f b6       	in	r0, 0x3f	; 63
    8baa:	f8 94       	cli
    8bac:	9e bf       	out	0x3e, r25	; 62
    8bae:	0f be       	out	0x3f, r0	; 63
    8bb0:	8d bf       	out	0x3d, r24	; 61
    8bb2:	43 50       	subi	r20, 0x03	; 3
    8bb4:	50 40       	sbci	r21, 0x00	; 0
    8bb6:	c8 01       	movw	r24, r16
    8bb8:	b7 01       	movw	r22, r14
    8bba:	0e 94 6b 45 	call	0x8ad6	; 0x8ad6 <StrPosPaste>
	 #ifdef DEBUG_GENIUS_CODE
	    sprintf_P(strSend,PSTR("NewDate[%s]"),srcDate);
		uart_print(1,1,strSend);
     #endif

	 sprintf_P(strDestCode,PSTR("%c"),cSeed);     
    8bbe:	00 d0       	rcall	.+0      	; 0x8bc0 <GenerateGeniusCode+0xbc>
    8bc0:	00 d0       	rcall	.+0      	; 0x8bc2 <GenerateGeniusCode+0xbe>
    8bc2:	00 d0       	rcall	.+0      	; 0x8bc4 <GenerateGeniusCode+0xc0>
    8bc4:	ed b7       	in	r30, 0x3d	; 61
    8bc6:	fe b7       	in	r31, 0x3e	; 62
    8bc8:	31 96       	adiw	r30, 0x01	; 1
    8bca:	ad b7       	in	r26, 0x3d	; 61
    8bcc:	be b7       	in	r27, 0x3e	; 62
    8bce:	12 96       	adiw	r26, 0x02	; 2
    8bd0:	dc 92       	st	X, r13
    8bd2:	ce 92       	st	-X, r12
    8bd4:	11 97       	sbiw	r26, 0x01	; 1
    8bd6:	80 ed       	ldi	r24, 0xD0	; 208
    8bd8:	99 e1       	ldi	r25, 0x19	; 25
    8bda:	93 83       	std	Z+3, r25	; 0x03
    8bdc:	82 83       	std	Z+2, r24	; 0x02
    8bde:	94 82       	std	Z+4, r9	; 0x04
    8be0:	15 82       	std	Z+5, r1	; 0x05
    8be2:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	 GCalcOpt=G_PLUS;
	 for (i=1;i<strlen(srcDate);i++){
    8be6:	ed b7       	in	r30, 0x3d	; 61
    8be8:	fe b7       	in	r31, 0x3e	; 62
    8bea:	36 96       	adiw	r30, 0x06	; 6
    8bec:	0f b6       	in	r0, 0x3f	; 63
    8bee:	f8 94       	cli
    8bf0:	fe bf       	out	0x3e, r31	; 62
    8bf2:	0f be       	out	0x3f, r0	; 63
    8bf4:	ed bf       	out	0x3d, r30	; 61
    8bf6:	aa 24       	eor	r10, r10
    8bf8:	a3 94       	inc	r10
	      strDestCode[i]='0'+GeniusCalc(GCalcOpt,(cSeed-'0'),(srcDate[i]-'0'));	 
    8bfa:	f0 ed       	ldi	r31, 0xD0	; 208
    8bfc:	9f 0e       	add	r9, r31
		uart_print(1,1,strSend);
     #endif

	 sprintf_P(strDestCode,PSTR("%c"),cSeed);     
	 GCalcOpt=G_PLUS;
	 for (i=1;i<strlen(srcDate);i++){
    8bfe:	0f c0       	rjmp	.+30     	; 0x8c1e <GenerateGeniusCode+0x11a>
	      strDestCode[i]='0'+GeniusCalc(GCalcOpt,(cSeed-'0'),(srcDate[i]-'0'));	 
    8c00:	f7 01       	movw	r30, r14
    8c02:	e0 0f       	add	r30, r16
    8c04:	f1 1f       	adc	r31, r17
    8c06:	40 81       	ld	r20, Z
    8c08:	40 53       	subi	r20, 0x30	; 48
    8c0a:	80 e0       	ldi	r24, 0x00	; 0
    8c0c:	69 2d       	mov	r22, r9
    8c0e:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <GeniusCalc>
    8c12:	f6 01       	movw	r30, r12
    8c14:	e0 0f       	add	r30, r16
    8c16:	f1 1f       	adc	r31, r17
    8c18:	80 5d       	subi	r24, 0xD0	; 208
    8c1a:	80 83       	st	Z, r24
		uart_print(1,1,strSend);
     #endif

	 sprintf_P(strDestCode,PSTR("%c"),cSeed);     
	 GCalcOpt=G_PLUS;
	 for (i=1;i<strlen(srcDate);i++){
    8c1c:	a3 94       	inc	r10
    8c1e:	0a 2d       	mov	r16, r10
    8c20:	10 e0       	ldi	r17, 0x00	; 0
    8c22:	f7 01       	movw	r30, r14
    8c24:	01 90       	ld	r0, Z+
    8c26:	00 20       	and	r0, r0
    8c28:	e9 f7       	brne	.-6      	; 0x8c24 <GenerateGeniusCode+0x120>
    8c2a:	31 97       	sbiw	r30, 0x01	; 1
    8c2c:	ee 19       	sub	r30, r14
    8c2e:	ff 09       	sbc	r31, r15
    8c30:	0e 17       	cp	r16, r30
    8c32:	1f 07       	cpc	r17, r31
    8c34:	28 f3       	brcs	.-54     	; 0x8c00 <GenerateGeniusCode+0xfc>
	      strDestCode[i]='0'+GeniusCalc(GCalcOpt,(cSeed-'0'),(srcDate[i]-'0'));	 
	 }strDestCode[strlen(srcDate)]=0;
    8c36:	ec 0d       	add	r30, r12
    8c38:	fd 1d       	adc	r31, r13
    8c3a:	10 82       	st	Z, r1
	 #ifdef DEBUG_GENIUS_CODE
       sprintf_P(strSend,PSTR("1st:%s"),strDestCode);
	   uart_print(1,1,strSend);     
	 #endif

	 WrapCode(strDestCode);
    8c3c:	c6 01       	movw	r24, r12
    8c3e:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <WrapCode>
	 #ifdef DEBUG_GENIUS_CODE
	   sprintf_P(strSend,PSTR("Wrap:%s"),strDestCode);
	   uart_print(1,1,strSend);     
	 #endif
}
    8c42:	28 96       	adiw	r28, 0x08	; 8
    8c44:	0f b6       	in	r0, 0x3f	; 63
    8c46:	f8 94       	cli
    8c48:	de bf       	out	0x3e, r29	; 62
    8c4a:	0f be       	out	0x3f, r0	; 63
    8c4c:	cd bf       	out	0x3d, r28	; 61
    8c4e:	cf 91       	pop	r28
    8c50:	df 91       	pop	r29
    8c52:	1f 91       	pop	r17
    8c54:	0f 91       	pop	r16
    8c56:	ff 90       	pop	r15
    8c58:	ef 90       	pop	r14
    8c5a:	df 90       	pop	r13
    8c5c:	cf 90       	pop	r12
    8c5e:	bf 90       	pop	r11
    8c60:	af 90       	pop	r10
    8c62:	9f 90       	pop	r9
    8c64:	08 95       	ret

00008c66 <ValidateGeniusCode>:
          }
	 }sTemp[iAdd]=0;
	 sprintf_P(strSource,PSTR("%s"),sTemp);
}

char ValidateGeniusCode(char *sDate, char *sGenCode){//==GC_VALID
    8c66:	ef 92       	push	r14
    8c68:	ff 92       	push	r15
    8c6a:	0f 93       	push	r16
    8c6c:	1f 93       	push	r17
    8c6e:	df 93       	push	r29
    8c70:	cf 93       	push	r28
    8c72:	cd b7       	in	r28, 0x3d	; 61
    8c74:	de b7       	in	r29, 0x3e	; 62
    8c76:	2a 97       	sbiw	r28, 0x0a	; 10
    8c78:	0f b6       	in	r0, 0x3f	; 63
    8c7a:	f8 94       	cli
    8c7c:	de bf       	out	0x3e, r29	; 62
    8c7e:	0f be       	out	0x3f, r0	; 63
    8c80:	cd bf       	out	0x3d, r28	; 61
    8c82:	7b 01       	movw	r14, r22

         #ifdef DEBUG_GENIUS_CODE
		 sprintf_P(strSend,PSTR("[%s]"),sGenCode); 
         uart_print(1,1,strSend);
		 #endif
	 if (strlen(sGenCode)==8){//Length musti  8
    8c84:	db 01       	movw	r26, r22
    8c86:	0d 90       	ld	r0, X+
    8c88:	00 20       	and	r0, r0
    8c8a:	e9 f7       	brne	.-6      	; 0x8c86 <ValidateGeniusCode+0x20>
    8c8c:	19 97       	sbiw	r26, 0x09	; 9
    8c8e:	a6 17       	cp	r26, r22
    8c90:	b7 07       	cpc	r27, r23
    8c92:	81 f4       	brne	.+32     	; 0x8cb4 <ValidateGeniusCode+0x4e>
	     //sDate: 05012001		 
		 GenerateGeniusCode(sDate,sGenCode[0],sAutoGen);
    8c94:	fb 01       	movw	r30, r22
    8c96:	60 81       	ld	r22, Z
    8c98:	8e 01       	movw	r16, r28
    8c9a:	0f 5f       	subi	r16, 0xFF	; 255
    8c9c:	1f 4f       	sbci	r17, 0xFF	; 255
    8c9e:	a8 01       	movw	r20, r16
    8ca0:	0e 94 82 45 	call	0x8b04	; 0x8b04 <GenerateGeniusCode>
         #ifdef DEBUG_GENIUS_CODE
		 sprintf_P(strSend,PSTR("%s|%s"),sAutoGen,sGenCode); 
         uart_print(1,1,strSend);
		 #endif

         if (strcmp(sAutoGen,sGenCode)==0)
    8ca4:	c8 01       	movw	r24, r16
    8ca6:	b7 01       	movw	r22, r14
    8ca8:	0e 94 05 a8 	call	0x1500a	; 0x1500a <strcmp>
    8cac:	00 97       	sbiw	r24, 0x00	; 0
    8cae:	21 f4       	brne	.+8      	; 0x8cb8 <ValidateGeniusCode+0x52>
	        Result=GC_VALID;	 
    8cb0:	81 e0       	ldi	r24, 0x01	; 1
    8cb2:	03 c0       	rjmp	.+6      	; 0x8cba <ValidateGeniusCode+0x54>
}

char ValidateGeniusCode(char *sDate, char *sGenCode){//==GC_VALID
     char Result=GC_NONE;
	 char sAutoGen[10],strSend[20];
     Result=GC_NONE;
    8cb4:	80 e0       	ldi	r24, 0x00	; 0
    8cb6:	01 c0       	rjmp	.+2      	; 0x8cba <ValidateGeniusCode+0x54>
         uart_print(1,1,strSend);
		 #endif

         if (strcmp(sAutoGen,sGenCode)==0)
	        Result=GC_VALID;	 
         else Result=GC_INVALID;
    8cb8:	82 e0       	ldi	r24, 0x02	; 2
	 }


   return Result;
}
    8cba:	2a 96       	adiw	r28, 0x0a	; 10
    8cbc:	0f b6       	in	r0, 0x3f	; 63
    8cbe:	f8 94       	cli
    8cc0:	de bf       	out	0x3e, r29	; 62
    8cc2:	0f be       	out	0x3f, r0	; 63
    8cc4:	cd bf       	out	0x3d, r28	; 61
    8cc6:	cf 91       	pop	r28
    8cc8:	df 91       	pop	r29
    8cca:	1f 91       	pop	r17
    8ccc:	0f 91       	pop	r16
    8cce:	ff 90       	pop	r15
    8cd0:	ef 90       	pop	r14
    8cd2:	08 95       	ret

00008cd4 <CharPosCopy>:
	    Dest[IdxSource+i]=Source[i];
	 }Dest[IdxSource+Length]=0;
}
char CharPosCopy(char *Source, unsigned int IdxSource){
     char Result;
     Result=Source[IdxSource];
    8cd4:	68 0f       	add	r22, r24
    8cd6:	79 1f       	adc	r23, r25
	 return Result;
}
    8cd8:	fb 01       	movw	r30, r22
    8cda:	80 81       	ld	r24, Z
    8cdc:	08 95       	ret

00008cde <procMessage00>:
*/
char procMessage00(){
     char Result,strSend[10];
	 Result=MSG00_NACK;
	 //Message57
	 if((rcv_trans[0]==0x01)&&(transLength==MSG00_LENGTH)){
    8cde:	80 91 01 0a 	lds	r24, 0x0A01
    8ce2:	81 30       	cpi	r24, 0x01	; 1
    8ce4:	59 f4       	brne	.+22     	; 0x8cfc <procMessage00+0x1e>
    8ce6:	80 91 69 02 	lds	r24, 0x0269
    8cea:	90 91 6a 02 	lds	r25, 0x026A
    8cee:	8f 32       	cpi	r24, 0x2F	; 47
    8cf0:	91 05       	cpc	r25, r1
    8cf2:	31 f4       	brne	.+12     	; 0x8d00 <procMessage00+0x22>
	     //Reply
		 Result=(CharPosCopy(rcv_trans,37)-'0');
    8cf4:	80 91 26 0a 	lds	r24, 0x0A26
    8cf8:	80 53       	subi	r24, 0x30	; 48
    8cfa:	08 95       	ret
				MSG00_NEW_PRICE,MSG00_SALE_INFO,MSG00_INVALID_PRODUCT,
				MSG00_SALES_PORT
*/
char procMessage00(){
     char Result,strSend[10];
	 Result=MSG00_NACK;
    8cfc:	80 e0       	ldi	r24, 0x00	; 0
    8cfe:	08 95       	ret
    8d00:	80 e0       	ldi	r24, 0x00	; 0
		 //sprintf(strSend,"R=%d",Result);
		 //uart_print(0,1,strSend);
		 //*/
		 }
     return Result;
}
    8d02:	08 95       	ret

00008d04 <SaveToEEPROM>:



char SaveToEEPROM(char *Src,char *Dest,unsigned int Length){
    8d04:	ef 92       	push	r14
    8d06:	ff 92       	push	r15
    8d08:	0f 93       	push	r16
    8d0a:	1f 93       	push	r17
    8d0c:	df 93       	push	r29
    8d0e:	cf 93       	push	r28
    8d10:	cd b7       	in	r28, 0x3d	; 61
    8d12:	de b7       	in	r29, 0x3e	; 62
    8d14:	ac 97       	sbiw	r28, 0x2c	; 44
    8d16:	0f b6       	in	r0, 0x3f	; 63
    8d18:	f8 94       	cli
    8d1a:	de bf       	out	0x3e, r29	; 62
    8d1c:	0f be       	out	0x3f, r0	; 63
    8d1e:	cd bf       	out	0x3d, r28	; 61
    8d20:	9a a7       	std	Y+42, r25	; 0x2a
    8d22:	89 a7       	std	Y+41, r24	; 0x29
    8d24:	7c a7       	std	Y+44, r23	; 0x2c
    8d26:	6b a7       	std	Y+43, r22	; 0x2b
    8d28:	7a 01       	movw	r14, r20
     char strCompare[40];
	 //Read Previous Data
     eeprom_read_block((void*)&Dest,(const void*)&strCompare, Length);
    8d2a:	8e 01       	movw	r16, r28
    8d2c:	05 5d       	subi	r16, 0xD5	; 213
    8d2e:	1f 4f       	sbci	r17, 0xFF	; 255
    8d30:	c8 01       	movw	r24, r16
    8d32:	be 01       	movw	r22, r28
    8d34:	6f 5f       	subi	r22, 0xFF	; 255
    8d36:	7f 4f       	sbci	r23, 0xFF	; 255
    8d38:	0e 94 56 aa 	call	0x154ac	; 0x154ac <__eerd_block_m128>
     //if 
     eeprom_write_block((const void*)&Src,(void*)&Dest, Length);
    8d3c:	ce 01       	movw	r24, r28
    8d3e:	89 96       	adiw	r24, 0x29	; 41
    8d40:	b8 01       	movw	r22, r16
    8d42:	a7 01       	movw	r20, r14
    8d44:	0e 94 6e aa 	call	0x154dc	; 0x154dc <__eewr_block_m128>
}
    8d48:	ac 96       	adiw	r28, 0x2c	; 44
    8d4a:	0f b6       	in	r0, 0x3f	; 63
    8d4c:	f8 94       	cli
    8d4e:	de bf       	out	0x3e, r29	; 62
    8d50:	0f be       	out	0x3f, r0	; 63
    8d52:	cd bf       	out	0x3d, r28	; 61
    8d54:	cf 91       	pop	r28
    8d56:	df 91       	pop	r29
    8d58:	1f 91       	pop	r17
    8d5a:	0f 91       	pop	r16
    8d5c:	ff 90       	pop	r15
    8d5e:	ef 90       	pop	r14
    8d60:	08 95       	ret

00008d62 <procMessage09>:

char procMessage09(){
    8d62:	1f 93       	push	r17
    8d64:	cf 93       	push	r28
    8d66:	df 93       	push	r29
     char Result;
     Result=(CharPosCopy(rcv_trans,39)-'0');
    8d68:	10 91 28 0a 	lds	r17, 0x0A28
    8d6c:	10 53       	subi	r17, 0x30	; 48
       StrPosCopy(rcv_trans,strFreeMessageLine1,39,20);
    8d6e:	c1 e0       	ldi	r28, 0x01	; 1
    8d70:	da e0       	ldi	r29, 0x0A	; 10
    8d72:	ce 01       	movw	r24, r28
    8d74:	66 e7       	ldi	r22, 0x76	; 118
    8d76:	79 e0       	ldi	r23, 0x09	; 9
    8d78:	47 e2       	ldi	r20, 0x27	; 39
    8d7a:	50 e0       	ldi	r21, 0x00	; 0
    8d7c:	24 e1       	ldi	r18, 0x14	; 20
    8d7e:	30 e0       	ldi	r19, 0x00	; 0
    8d80:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
       StrPosCopy(rcv_trans,strFreeMessageLine2,59,20);
    8d84:	ce 01       	movw	r24, r28
    8d86:	67 e8       	ldi	r22, 0x87	; 135
    8d88:	78 e0       	ldi	r23, 0x08	; 8
    8d8a:	4b e3       	ldi	r20, 0x3B	; 59
    8d8c:	50 e0       	ldi	r21, 0x00	; 0
    8d8e:	24 e1       	ldi	r18, 0x14	; 20
    8d90:	30 e0       	ldi	r19, 0x00	; 0
    8d92:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
       StrPosCopy(rcv_trans,strFreeMessageLine3,79,20);
    8d96:	ce 01       	movw	r24, r28
    8d98:	60 ef       	ldi	r22, 0xF0	; 240
    8d9a:	78 e0       	ldi	r23, 0x08	; 8
    8d9c:	4f e4       	ldi	r20, 0x4F	; 79
    8d9e:	50 e0       	ldi	r21, 0x00	; 0
    8da0:	24 e1       	ldi	r18, 0x14	; 20
    8da2:	30 e0       	ldi	r19, 0x00	; 0
    8da4:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
       StrPosCopy(rcv_trans,strFreeMessageLine4,99,20);
    8da8:	ce 01       	movw	r24, r28
    8daa:	6f ec       	ldi	r22, 0xCF	; 207
    8dac:	7c e0       	ldi	r23, 0x0C	; 12
    8dae:	43 e6       	ldi	r20, 0x63	; 99
    8db0:	50 e0       	ldi	r21, 0x00	; 0
    8db2:	24 e1       	ldi	r18, 0x14	; 20
    8db4:	30 e0       	ldi	r19, 0x00	; 0
    8db6:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
	 return Result;
}
    8dba:	81 2f       	mov	r24, r17
    8dbc:	df 91       	pop	r29
    8dbe:	cf 91       	pop	r28
    8dc0:	1f 91       	pop	r17
    8dc2:	08 95       	ret

00008dc4 <procMessage21>:

char procMessage21(){
    8dc4:	cf 92       	push	r12
    8dc6:	df 92       	push	r13
    8dc8:	ef 92       	push	r14
    8dca:	ff 92       	push	r15
    8dcc:	0f 93       	push	r16
    8dce:	1f 93       	push	r17
    8dd0:	df 93       	push	r29
    8dd2:	cf 93       	push	r28
    8dd4:	cd b7       	in	r28, 0x3d	; 61
    8dd6:	de b7       	in	r29, 0x3e	; 62
    8dd8:	2b 97       	sbiw	r28, 0x0b	; 11
    8dda:	0f b6       	in	r0, 0x3f	; 63
    8ddc:	f8 94       	cli
    8dde:	de bf       	out	0x3e, r29	; 62
    8de0:	0f be       	out	0x3f, r0	; 63
    8de2:	cd bf       	out	0x3d, r28	; 61
    8de4:	3a e0       	ldi	r19, 0x0A	; 10
    8de6:	e3 2e       	mov	r14, r19
    8de8:	31 e0       	ldi	r19, 0x01	; 1
    8dea:	f3 2e       	mov	r15, r19
    8dec:	05 e2       	ldi	r16, 0x25	; 37
    8dee:	10 e0       	ldi	r17, 0x00	; 0
     char i,Result,strBankName[11];
	 Result=0;
	 for(i=0;i<4;i++){
         StrPosCopy(rcv_trans,strBankName,(37+(i*10)),10);
    8df0:	6e 01       	movw	r12, r28
    8df2:	08 94       	sec
    8df4:	c1 1c       	adc	r12, r1
    8df6:	d1 1c       	adc	r13, r1
    8df8:	81 e0       	ldi	r24, 0x01	; 1
    8dfa:	9a e0       	ldi	r25, 0x0A	; 10
    8dfc:	b6 01       	movw	r22, r12
    8dfe:	a8 01       	movw	r20, r16
    8e00:	2a e0       	ldi	r18, 0x0A	; 10
    8e02:	30 e0       	ldi	r19, 0x00	; 0
    8e04:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
		 //Result=((Result<<1)|SaveToEEPROM(strBankName,DefBankName[i],11)); 
		 eeprom_write_block((const void*)&strBankName, (void*)&DefBankName[i], 11);
    8e08:	c6 01       	movw	r24, r12
    8e0a:	b7 01       	movw	r22, r14
    8e0c:	4b e0       	ldi	r20, 0x0B	; 11
    8e0e:	50 e0       	ldi	r21, 0x00	; 0
    8e10:	0e 94 6e aa 	call	0x154dc	; 0x154dc <__eewr_block_m128>
    8e14:	06 5f       	subi	r16, 0xF6	; 246
    8e16:	1f 4f       	sbci	r17, 0xFF	; 255
    8e18:	8b e0       	ldi	r24, 0x0B	; 11
    8e1a:	90 e0       	ldi	r25, 0x00	; 0
    8e1c:	e8 0e       	add	r14, r24
    8e1e:	f9 1e       	adc	r15, r25
}

char procMessage21(){
     char i,Result,strBankName[11];
	 Result=0;
	 for(i=0;i<4;i++){
    8e20:	0d 34       	cpi	r16, 0x4D	; 77
    8e22:	11 05       	cpc	r17, r1
    8e24:	49 f7       	brne	.-46     	; 0x8df8 <procMessage21+0x34>
         StrPosCopy(rcv_trans,strBankName,(37+(i*10)),10);
		 //Result=((Result<<1)|SaveToEEPROM(strBankName,DefBankName[i],11)); 
		 eeprom_write_block((const void*)&strBankName, (void*)&DefBankName[i], 11);
	 }
	 return Result;
}
    8e26:	80 e0       	ldi	r24, 0x00	; 0
    8e28:	2b 96       	adiw	r28, 0x0b	; 11
    8e2a:	0f b6       	in	r0, 0x3f	; 63
    8e2c:	f8 94       	cli
    8e2e:	de bf       	out	0x3e, r29	; 62
    8e30:	0f be       	out	0x3f, r0	; 63
    8e32:	cd bf       	out	0x3d, r28	; 61
    8e34:	cf 91       	pop	r28
    8e36:	df 91       	pop	r29
    8e38:	1f 91       	pop	r17
    8e3a:	0f 91       	pop	r16
    8e3c:	ff 90       	pop	r15
    8e3e:	ef 90       	pop	r14
    8e40:	df 90       	pop	r13
    8e42:	cf 90       	pop	r12
    8e44:	08 95       	ret

00008e46 <procMessage23>:

char procMessage23(){
    8e46:	cf 93       	push	r28
    8e48:	df 93       	push	r29
     char Result=0;
	 StrPosCopy(rcv_trans,strCardID,37,20);
    8e4a:	c1 e0       	ldi	r28, 0x01	; 1
    8e4c:	da e0       	ldi	r29, 0x0A	; 10
    8e4e:	ce 01       	movw	r24, r28
    8e50:	6d e6       	ldi	r22, 0x6D	; 109
    8e52:	7c e0       	ldi	r23, 0x0C	; 12
    8e54:	45 e2       	ldi	r20, 0x25	; 37
    8e56:	50 e0       	ldi	r21, 0x00	; 0
    8e58:	24 e1       	ldi	r18, 0x14	; 20
    8e5a:	30 e0       	ldi	r19, 0x00	; 0
    8e5c:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
     StrPosCopy(rcv_trans,strCardHolder,57,30);
    8e60:	ce 01       	movw	r24, r28
    8e62:	69 e0       	ldi	r22, 0x09	; 9
    8e64:	74 e0       	ldi	r23, 0x04	; 4
    8e66:	49 e3       	ldi	r20, 0x39	; 57
    8e68:	50 e0       	ldi	r21, 0x00	; 0
    8e6a:	2e e1       	ldi	r18, 0x1E	; 30
    8e6c:	30 e0       	ldi	r19, 0x00	; 0
    8e6e:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
     StrPosCopy(rcv_trans,strStatus,87,1);
    8e72:	ce 01       	movw	r24, r28
    8e74:	6e e6       	ldi	r22, 0x6E	; 110
    8e76:	74 e0       	ldi	r23, 0x04	; 4
    8e78:	47 e5       	ldi	r20, 0x57	; 87
    8e7a:	50 e0       	ldi	r21, 0x00	; 0
    8e7c:	21 e0       	ldi	r18, 0x01	; 1
    8e7e:	30 e0       	ldi	r19, 0x00	; 0
    8e80:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
     StrPosCopy(rcv_trans,strLoyCurrentPoints,88,8);
    8e84:	ce 01       	movw	r24, r28
    8e86:	69 e1       	ldi	r22, 0x19	; 25
    8e88:	79 e0       	ldi	r23, 0x09	; 9
    8e8a:	48 e5       	ldi	r20, 0x58	; 88
    8e8c:	50 e0       	ldi	r21, 0x00	; 0
    8e8e:	28 e0       	ldi	r18, 0x08	; 8
    8e90:	30 e0       	ldi	r19, 0x00	; 0
    8e92:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
     StrPosCopy(rcv_trans,strLoyCurrMonConsumeA,96,10);
    8e96:	ce 01       	movw	r24, r28
    8e98:	63 e6       	ldi	r22, 0x63	; 99
    8e9a:	74 e0       	ldi	r23, 0x04	; 4
    8e9c:	40 e6       	ldi	r20, 0x60	; 96
    8e9e:	50 e0       	ldi	r21, 0x00	; 0
    8ea0:	2a e0       	ldi	r18, 0x0A	; 10
    8ea2:	30 e0       	ldi	r19, 0x00	; 0
    8ea4:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
     StrPosCopy(rcv_trans,strLoyCurrMonConsumeV,106,10);
    8ea8:	ce 01       	movw	r24, r28
    8eaa:	66 ee       	ldi	r22, 0xE6	; 230
    8eac:	7c e0       	ldi	r23, 0x0C	; 12
    8eae:	4a e6       	ldi	r20, 0x6A	; 106
    8eb0:	50 e0       	ldi	r21, 0x00	; 0
    8eb2:	2a e0       	ldi	r18, 0x0A	; 10
    8eb4:	30 e0       	ldi	r19, 0x00	; 0
    8eb6:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
     StrPosCopy(rcv_trans,strDateTime,116,19);
    8eba:	ce 01       	movw	r24, r28
    8ebc:	63 ea       	ldi	r22, 0xA3	; 163
    8ebe:	7c e0       	ldi	r23, 0x0C	; 12
    8ec0:	44 e7       	ldi	r20, 0x74	; 116
    8ec2:	50 e0       	ldi	r21, 0x00	; 0
    8ec4:	23 e1       	ldi	r18, 0x13	; 19
    8ec6:	30 e0       	ldi	r19, 0x00	; 0
    8ec8:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
     StrPosCopy(rcv_trans,strAmount,135,7);
    8ecc:	ce 01       	movw	r24, r28
    8ece:	67 e9       	ldi	r22, 0x97	; 151
    8ed0:	7c e0       	ldi	r23, 0x0C	; 12
    8ed2:	47 e8       	ldi	r20, 0x87	; 135
    8ed4:	50 e0       	ldi	r21, 0x00	; 0
    8ed6:	27 e0       	ldi	r18, 0x07	; 7
    8ed8:	30 e0       	ldi	r19, 0x00	; 0
    8eda:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
     StrPosCopy(rcv_trans,strGainPoints,142,4);
    8ede:	ce 01       	movw	r24, r28
    8ee0:	60 ea       	ldi	r22, 0xA0	; 160
    8ee2:	73 e0       	ldi	r23, 0x03	; 3
    8ee4:	4e e8       	ldi	r20, 0x8E	; 142
    8ee6:	50 e0       	ldi	r21, 0x00	; 0
    8ee8:	24 e0       	ldi	r18, 0x04	; 4
    8eea:	30 e0       	ldi	r19, 0x00	; 0
    8eec:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
     return Result;
}
    8ef0:	80 e0       	ldi	r24, 0x00	; 0
    8ef2:	df 91       	pop	r29
    8ef4:	cf 91       	pop	r28
    8ef6:	08 95       	ret

00008ef8 <FMenuLoyalty>:
	      break;
	 }
  return Result;
}

char FMenuLoyalty(){
    8ef8:	cf 92       	push	r12
    8efa:	df 92       	push	r13
    8efc:	ef 92       	push	r14
    8efe:	ff 92       	push	r15
    8f00:	0f 93       	push	r16
    8f02:	1f 93       	push	r17
    8f04:	df 93       	push	r29
    8f06:	cf 93       	push	r28
    8f08:	cd b7       	in	r28, 0x3d	; 61
    8f0a:	de b7       	in	r29, 0x3e	; 62
    8f0c:	64 97       	sbiw	r28, 0x14	; 20
    8f0e:	0f b6       	in	r0, 0x3f	; 63
    8f10:	f8 94       	cli
    8f12:	de bf       	out	0x3e, r29	; 62
    8f14:	0f be       	out	0x3f, r0	; 63
    8f16:	cd bf       	out	0x3d, r28	; 61
       char FIPResult,FIP_USED;
	   char Result=MENU_NONE;
	   char KeyPressed=0,KeyChar;

     Result=MENU_NONE;
	 switch(stLoyalty){
    8f18:	00 91 44 03 	lds	r16, 0x0344
    8f1c:	07 30       	cpi	r16, 0x07	; 7
    8f1e:	09 f4       	brne	.+2      	; 0x8f22 <FMenuLoyalty+0x2a>
    8f20:	02 c1       	rjmp	.+516    	; 0x9126 <FMenuLoyalty+0x22e>
    8f22:	08 30       	cpi	r16, 0x08	; 8
    8f24:	98 f4       	brcc	.+38     	; 0x8f4c <FMenuLoyalty+0x54>
    8f26:	03 30       	cpi	r16, 0x03	; 3
    8f28:	09 f4       	brne	.+2      	; 0x8f2c <FMenuLoyalty+0x34>
    8f2a:	59 c0       	rjmp	.+178    	; 0x8fde <FMenuLoyalty+0xe6>
    8f2c:	04 30       	cpi	r16, 0x04	; 4
    8f2e:	38 f4       	brcc	.+14     	; 0x8f3e <FMenuLoyalty+0x46>
    8f30:	01 30       	cpi	r16, 0x01	; 1
    8f32:	09 f4       	brne	.+2      	; 0x8f36 <FMenuLoyalty+0x3e>
    8f34:	42 c0       	rjmp	.+132    	; 0x8fba <FMenuLoyalty+0xc2>
    8f36:	02 30       	cpi	r16, 0x02	; 2
    8f38:	08 f0       	brcs	.+2      	; 0x8f3c <FMenuLoyalty+0x44>
    8f3a:	5f c0       	rjmp	.+190    	; 0x8ffa <FMenuLoyalty+0x102>
    8f3c:	20 c0       	rjmp	.+64     	; 0x8f7e <FMenuLoyalty+0x86>
    8f3e:	05 30       	cpi	r16, 0x05	; 5
    8f40:	09 f4       	brne	.+2      	; 0x8f44 <FMenuLoyalty+0x4c>
    8f42:	a0 c0       	rjmp	.+320    	; 0x9084 <FMenuLoyalty+0x18c>
    8f44:	06 30       	cpi	r16, 0x06	; 6
    8f46:	08 f0       	brcs	.+2      	; 0x8f4a <FMenuLoyalty+0x52>
    8f48:	b8 c0       	rjmp	.+368    	; 0x90ba <FMenuLoyalty+0x1c2>
    8f4a:	8a c0       	rjmp	.+276    	; 0x9060 <FMenuLoyalty+0x168>
    8f4c:	0b 30       	cpi	r16, 0x0B	; 11
    8f4e:	09 f4       	brne	.+2      	; 0x8f52 <FMenuLoyalty+0x5a>
    8f50:	33 c1       	rjmp	.+614    	; 0x91b8 <FMenuLoyalty+0x2c0>
    8f52:	0c 30       	cpi	r16, 0x0C	; 12
    8f54:	38 f4       	brcc	.+14     	; 0x8f64 <FMenuLoyalty+0x6c>
    8f56:	09 30       	cpi	r16, 0x09	; 9
    8f58:	09 f4       	brne	.+2      	; 0x8f5c <FMenuLoyalty+0x64>
    8f5a:	ee c0       	rjmp	.+476    	; 0x9138 <FMenuLoyalty+0x240>
    8f5c:	0a 30       	cpi	r16, 0x0A	; 10
    8f5e:	08 f0       	brcs	.+2      	; 0x8f62 <FMenuLoyalty+0x6a>
    8f60:	0e c1       	rjmp	.+540    	; 0x917e <FMenuLoyalty+0x286>
    8f62:	e4 c0       	rjmp	.+456    	; 0x912c <FMenuLoyalty+0x234>
    8f64:	0d 30       	cpi	r16, 0x0D	; 13
    8f66:	09 f4       	brne	.+2      	; 0x8f6a <FMenuLoyalty+0x72>
    8f68:	e6 c1       	rjmp	.+972    	; 0x9336 <FMenuLoyalty+0x43e>
    8f6a:	0d 30       	cpi	r16, 0x0D	; 13
    8f6c:	08 f4       	brcc	.+2      	; 0x8f70 <FMenuLoyalty+0x78>
    8f6e:	ed c1       	rjmp	.+986    	; 0x934a <FMenuLoyalty+0x452>
    8f70:	0e 30       	cpi	r16, 0x0E	; 14
    8f72:	09 f4       	brne	.+2      	; 0x8f76 <FMenuLoyalty+0x7e>
    8f74:	fd c1       	rjmp	.+1018   	; 0x9370 <FMenuLoyalty+0x478>
    8f76:	0f 30       	cpi	r16, 0x0F	; 15
    8f78:	09 f0       	breq	.+2      	; 0x8f7c <FMenuLoyalty+0x84>
    8f7a:	08 c2       	rjmp	.+1040   	; 0x938c <FMenuLoyalty+0x494>
    8f7c:	01 c2       	rjmp	.+1026   	; 0x9380 <FMenuLoyalty+0x488>
	 case mlInit:
	      lcd_clear();
    8f7e:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
		  lcd_printf(1,1,PSTR("  Menu Loyalty   "));
    8f82:	81 e0       	ldi	r24, 0x01	; 1
    8f84:	61 e0       	ldi	r22, 0x01	; 1
    8f86:	45 e1       	ldi	r20, 0x15	; 21
    8f88:	5d e1       	ldi	r21, 0x1D	; 29
    8f8a:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
          lcd_printf(1,1,PSTR("1.Enquiry        "));
    8f8e:	81 e0       	ldi	r24, 0x01	; 1
    8f90:	61 e0       	ldi	r22, 0x01	; 1
    8f92:	43 e0       	ldi	r20, 0x03	; 3
    8f94:	5d e1       	ldi	r21, 0x1D	; 29
    8f96:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  lcd_printf(2,1,PSTR("2.Loyalty Update "));
    8f9a:	82 e0       	ldi	r24, 0x02	; 2
    8f9c:	61 e0       	ldi	r22, 0x01	; 1
    8f9e:	41 ef       	ldi	r20, 0xF1	; 241
    8fa0:	5c e1       	ldi	r21, 0x1C	; 28
    8fa2:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
	      lcd_printf(4,1,PSTR("[*]Back          "));
    8fa6:	84 e0       	ldi	r24, 0x04	; 4
    8fa8:	61 e0       	ldi	r22, 0x01	; 1
    8faa:	4f ed       	ldi	r20, 0xDF	; 223
    8fac:	5c e1       	ldi	r21, 0x1C	; 28
    8fae:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  IsLoyaltyUpdate=False;
    8fb2:	10 92 42 03 	sts	0x0342, r1
		  stLoyalty=mlLoyaltySelect;
    8fb6:	81 e0       	ldi	r24, 0x01	; 1
    8fb8:	e0 c1       	rjmp	.+960    	; 0x937a <FMenuLoyalty+0x482>
	      break;
	 case mlLoyaltySelect:
	 	  KeyPressed=_key_scan(1);
    8fba:	81 e0       	ldi	r24, 0x01	; 1
    8fbc:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <_key_scan>
		  if (KeyPressed==_KEY_1){
    8fc0:	8e 3e       	cpi	r24, 0xEE	; 238
    8fc2:	21 f4       	brne	.+8      	; 0x8fcc <FMenuLoyalty+0xd4>
		      IsLoyaltyUpdate=False;
    8fc4:	10 92 42 03 	sts	0x0342, r1
		      stLoyalty=mlShowEnquiry;
    8fc8:	84 e0       	ldi	r24, 0x04	; 4
    8fca:	d7 c1       	rjmp	.+942    	; 0x937a <FMenuLoyalty+0x482>
			  }
		  else
		  if (KeyPressed==_KEY_2){
    8fcc:	8e 3d       	cpi	r24, 0xDE	; 222
    8fce:	19 f4       	brne	.+6      	; 0x8fd6 <FMenuLoyalty+0xde>
		      IsLoyaltyUpdate=True;
    8fd0:	00 93 42 03 	sts	0x0342, r16
    8fd4:	69 c0       	rjmp	.+210    	; 0x90a8 <FMenuLoyalty+0x1b0>
			  stLoyalty=mlSelectFIP;
			  }
		  if (KeyPressed==_KEY_CANCEL)stLoyalty=mlExitLoyalty;
    8fd6:	87 3e       	cpi	r24, 0xE7	; 231
    8fd8:	09 f4       	brne	.+2      	; 0x8fdc <FMenuLoyalty+0xe4>
    8fda:	ce c1       	rjmp	.+924    	; 0x9378 <FMenuLoyalty+0x480>
    8fdc:	d7 c1       	rjmp	.+942    	; 0x938c <FMenuLoyalty+0x494>
	      break;
     case mlSelectFIP:
	      FIPResult=menu_FIP(&FIP_Used,strFIP_ID);
    8fde:	83 e4       	ldi	r24, 0x43	; 67
    8fe0:	93 e0       	ldi	r25, 0x03	; 3
    8fe2:	6d e9       	ldi	r22, 0x9D	; 157
    8fe4:	78 e0       	ldi	r23, 0x08	; 8
    8fe6:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <menu_FIP>
		  if (FIPResult==FIP_DONE)stLoyalty=mlUpdateLoyalty;
    8fea:	88 23       	and	r24, r24
    8fec:	11 f4       	brne	.+4      	; 0x8ff2 <FMenuLoyalty+0xfa>
    8fee:	82 e0       	ldi	r24, 0x02	; 2
    8ff0:	c4 c1       	rjmp	.+904    	; 0x937a <FMenuLoyalty+0x482>
		  else
		  if (FIPResult==FIP_CANCEL)stLoyalty=mlInit;
    8ff2:	82 30       	cpi	r24, 0x02	; 2
    8ff4:	09 f0       	breq	.+2      	; 0x8ff8 <FMenuLoyalty+0x100>
    8ff6:	ca c1       	rjmp	.+916    	; 0x938c <FMenuLoyalty+0x494>
    8ff8:	59 c0       	rjmp	.+178    	; 0x90ac <FMenuLoyalty+0x1b4>
	      break;
     case mlUpdateLoyalty: 
	      lcd_clear();
    8ffa:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
		  sprintf_P(lcdteks,PSTR("FIP:%s"),strFIP_ID);
    8ffe:	00 d0       	rcall	.+0      	; 0x9000 <FMenuLoyalty+0x108>
    9000:	00 d0       	rcall	.+0      	; 0x9002 <FMenuLoyalty+0x10a>
    9002:	00 d0       	rcall	.+0      	; 0x9004 <FMenuLoyalty+0x10c>
    9004:	ed b7       	in	r30, 0x3d	; 61
    9006:	fe b7       	in	r31, 0x3e	; 62
    9008:	31 96       	adiw	r30, 0x01	; 1
    900a:	8e 01       	movw	r16, r28
    900c:	0f 5f       	subi	r16, 0xFF	; 255
    900e:	1f 4f       	sbci	r17, 0xFF	; 255
    9010:	ad b7       	in	r26, 0x3d	; 61
    9012:	be b7       	in	r27, 0x3e	; 62
    9014:	12 96       	adiw	r26, 0x02	; 2
    9016:	1c 93       	st	X, r17
    9018:	0e 93       	st	-X, r16
    901a:	11 97       	sbiw	r26, 0x01	; 1
    901c:	88 ed       	ldi	r24, 0xD8	; 216
    901e:	9c e1       	ldi	r25, 0x1C	; 28
    9020:	93 83       	std	Z+3, r25	; 0x03
    9022:	82 83       	std	Z+2, r24	; 0x02
    9024:	8d e9       	ldi	r24, 0x9D	; 157
    9026:	98 e0       	ldi	r25, 0x08	; 8
    9028:	95 83       	std	Z+5, r25	; 0x05
    902a:	84 83       	std	Z+4, r24	; 0x04
    902c:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		  lcd_printf(1,1,PSTR("Tap Kartu RFID"));
    9030:	8d b7       	in	r24, 0x3d	; 61
    9032:	9e b7       	in	r25, 0x3e	; 62
    9034:	06 96       	adiw	r24, 0x06	; 6
    9036:	0f b6       	in	r0, 0x3f	; 63
    9038:	f8 94       	cli
    903a:	9e bf       	out	0x3e, r25	; 62
    903c:	0f be       	out	0x3f, r0	; 63
    903e:	8d bf       	out	0x3d, r24	; 61
    9040:	81 e0       	ldi	r24, 0x01	; 1
    9042:	61 e0       	ldi	r22, 0x01	; 1
    9044:	49 ec       	ldi	r20, 0xC9	; 201
    9046:	5c e1       	ldi	r21, 0x1C	; 28
    9048:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  lcd_print(2,1,lcdteks);
    904c:	82 e0       	ldi	r24, 0x02	; 2
    904e:	61 e0       	ldi	r22, 0x01	; 1
    9050:	a8 01       	movw	r20, r16
    9052:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
          lcd_printf(4,1,PSTR("[*]Back    [#]Exit"));
    9056:	84 e0       	ldi	r24, 0x04	; 4
    9058:	61 e0       	ldi	r22, 0x01	; 1
    905a:	46 eb       	ldi	r20, 0xB6	; 182
    905c:	5c e1       	ldi	r21, 0x1C	; 28
    905e:	0c c0       	rjmp	.+24     	; 0x9078 <FMenuLoyalty+0x180>
		  IsRFIDDetected=False;
	      stLoyalty=mlInputRFID;
	      break;
	 case mlShowEnquiry:
	      lcd_clear();
    9060:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
		  lcd_printf(1,1,PSTR("Tap Kartu RFID"));
    9064:	81 e0       	ldi	r24, 0x01	; 1
    9066:	61 e0       	ldi	r22, 0x01	; 1
    9068:	47 ea       	ldi	r20, 0xA7	; 167
    906a:	5c e1       	ldi	r21, 0x1C	; 28
    906c:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
          lcd_printf(4,1,PSTR("[*]Back    [#]Exit"));
    9070:	84 e0       	ldi	r24, 0x04	; 4
    9072:	61 e0       	ldi	r22, 0x01	; 1
    9074:	44 e9       	ldi	r20, 0x94	; 148
    9076:	5c e1       	ldi	r21, 0x1C	; 28
    9078:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  IsRFIDDetected=False;
    907c:	10 92 76 02 	sts	0x0276, r1
		  stLoyalty=mlInputRFID;
    9080:	85 e0       	ldi	r24, 0x05	; 5
    9082:	7b c1       	rjmp	.+758    	; 0x937a <FMenuLoyalty+0x482>
	      break;
     case mlInputRFID:
	      if (IsRFIDDetected==True){
    9084:	80 91 76 02 	lds	r24, 0x0276
    9088:	81 30       	cpi	r24, 0x01	; 1
    908a:	29 f4       	brne	.+10     	; 0x9096 <FMenuLoyalty+0x19e>
		      IsRFIDDetected=False;
    908c:	10 92 76 02 	sts	0x0276, r1
		      stLoyalty=mlShowProsesRFID;
    9090:	86 e0       	ldi	r24, 0x06	; 6
    9092:	80 93 44 03 	sts	0x0344, r24
		  }
	 	  KeyPressed=_key_scan(1);
    9096:	81 e0       	ldi	r24, 0x01	; 1
    9098:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <_key_scan>
		  if (KeyPressed==_KEY_CANCEL){
    909c:	87 3e       	cpi	r24, 0xE7	; 231
    909e:	49 f4       	brne	.+18     	; 0x90b2 <FMenuLoyalty+0x1ba>
		      if (IsLoyaltyUpdate==True)
    90a0:	80 91 42 03 	lds	r24, 0x0342
    90a4:	81 30       	cpi	r24, 0x01	; 1
    90a6:	11 f4       	brne	.+4      	; 0x90ac <FMenuLoyalty+0x1b4>
			       stLoyalty=mlSelectFIP;
    90a8:	83 e0       	ldi	r24, 0x03	; 3
    90aa:	67 c1       	rjmp	.+718    	; 0x937a <FMenuLoyalty+0x482>
			  else stLoyalty=mlInit;
    90ac:	10 92 44 03 	sts	0x0344, r1
    90b0:	6d c1       	rjmp	.+730    	; 0x938c <FMenuLoyalty+0x494>
			  }
		  else
		  if (KeyPressed==_KEY_ENTER)stLoyalty=mlExitLoyalty;
    90b2:	87 3b       	cpi	r24, 0xB7	; 183
    90b4:	09 f0       	breq	.+2      	; 0x90b8 <FMenuLoyalty+0x1c0>
    90b6:	6a c1       	rjmp	.+724    	; 0x938c <FMenuLoyalty+0x494>
    90b8:	5f c1       	rjmp	.+702    	; 0x9378 <FMenuLoyalty+0x480>
	      break;
     case mlShowProsesRFID:
	      lcd_clear();
    90ba:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
		  sprintf_P(lcdteks,PSTR("ID:%s"),strRFID);
    90be:	00 d0       	rcall	.+0      	; 0x90c0 <FMenuLoyalty+0x1c8>
    90c0:	00 d0       	rcall	.+0      	; 0x90c2 <FMenuLoyalty+0x1ca>
    90c2:	00 d0       	rcall	.+0      	; 0x90c4 <FMenuLoyalty+0x1cc>
    90c4:	ed b7       	in	r30, 0x3d	; 61
    90c6:	fe b7       	in	r31, 0x3e	; 62
    90c8:	31 96       	adiw	r30, 0x01	; 1
    90ca:	8e 01       	movw	r16, r28
    90cc:	0f 5f       	subi	r16, 0xFF	; 255
    90ce:	1f 4f       	sbci	r17, 0xFF	; 255
    90d0:	ad b7       	in	r26, 0x3d	; 61
    90d2:	be b7       	in	r27, 0x3e	; 62
    90d4:	12 96       	adiw	r26, 0x02	; 2
    90d6:	1c 93       	st	X, r17
    90d8:	0e 93       	st	-X, r16
    90da:	11 97       	sbiw	r26, 0x01	; 1
    90dc:	8e e8       	ldi	r24, 0x8E	; 142
    90de:	9c e1       	ldi	r25, 0x1C	; 28
    90e0:	93 83       	std	Z+3, r25	; 0x03
    90e2:	82 83       	std	Z+2, r24	; 0x02
    90e4:	8a e4       	ldi	r24, 0x4A	; 74
    90e6:	9d e0       	ldi	r25, 0x0D	; 13
    90e8:	95 83       	std	Z+5, r25	; 0x05
    90ea:	84 83       	std	Z+4, r24	; 0x04
    90ec:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		  lcd_print (1,1,lcdteks);	      
    90f0:	8d b7       	in	r24, 0x3d	; 61
    90f2:	9e b7       	in	r25, 0x3e	; 62
    90f4:	06 96       	adiw	r24, 0x06	; 6
    90f6:	0f b6       	in	r0, 0x3f	; 63
    90f8:	f8 94       	cli
    90fa:	9e bf       	out	0x3e, r25	; 62
    90fc:	0f be       	out	0x3f, r0	; 63
    90fe:	8d bf       	out	0x3d, r24	; 61
    9100:	81 e0       	ldi	r24, 0x01	; 1
    9102:	61 e0       	ldi	r22, 0x01	; 1
    9104:	a8 01       	movw	r20, r16
    9106:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
		  lcd_printf(2,1,PSTR("Proses"));	      
    910a:	82 e0       	ldi	r24, 0x02	; 2
    910c:	61 e0       	ldi	r22, 0x01	; 1
    910e:	47 e8       	ldi	r20, 0x87	; 135
    9110:	5c e1       	ldi	r21, 0x1C	; 28
    9112:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  if (IsLoyaltyUpdate==True)stLoyalty=mlSendMessage24;
    9116:	80 91 42 03 	lds	r24, 0x0342
    911a:	81 30       	cpi	r24, 0x01	; 1
    911c:	11 f4       	brne	.+4      	; 0x9122 <FMenuLoyalty+0x22a>
    911e:	88 e0       	ldi	r24, 0x08	; 8
    9120:	2c c1       	rjmp	.+600    	; 0x937a <FMenuLoyalty+0x482>
		  else stLoyalty=mlSendMessage22;
    9122:	87 e0       	ldi	r24, 0x07	; 7
    9124:	2a c1       	rjmp	.+596    	; 0x937a <FMenuLoyalty+0x482>
	      break;
     case mlSendMessage22:
	      sendMessage22();
    9126:	0e 94 9b 2b 	call	0x5736	; 0x5736 <sendMessage22>
    912a:	02 c0       	rjmp	.+4      	; 0x9130 <FMenuLoyalty+0x238>
		  TimSend=0;		  
          stLoyalty=mlWaitReply;
	      break;
     case mlSendMessage24:
	      sendMessage24();
    912c:	0e 94 97 2b 	call	0x572e	; 0x572e <sendMessage24>
		  TimSend=0;		  
    9130:	10 92 7d 0d 	sts	0x0D7D, r1
          stLoyalty=mlWaitReply;
    9134:	89 e0       	ldi	r24, 0x09	; 9
    9136:	21 c1       	rjmp	.+578    	; 0x937a <FMenuLoyalty+0x482>
	      break;
     case mlWaitReply:
	      if (TimSend>(TIM_SEND*3))
    9138:	80 91 7d 0d 	lds	r24, 0x0D7D
    913c:	8f 31       	cpi	r24, 0x1F	; 31
    913e:	18 f0       	brcs	.+6      	; 0x9146 <FMenuLoyalty+0x24e>
		      stLoyalty=mlNoConnection;
    9140:	8c e0       	ldi	r24, 0x0C	; 12
    9142:	80 93 44 03 	sts	0x0344, r24
	      if (IsMessage23==True){
    9146:	80 91 81 02 	lds	r24, 0x0281
    914a:	81 30       	cpi	r24, 0x01	; 1
    914c:	39 f4       	brne	.+14     	; 0x915c <FMenuLoyalty+0x264>
		      IsMessage23=False;
    914e:	10 92 81 02 	sts	0x0281, r1
			  procMessage23();
    9152:	0e 94 23 47 	call	0x8e46	; 0x8e46 <procMessage23>
			  stLoyalty=mlDispEnquiry;
    9156:	8b e0       	ldi	r24, 0x0B	; 11
    9158:	80 93 44 03 	sts	0x0344, r24
		  }
	      if (IsMessage09==True){
    915c:	80 91 82 02 	lds	r24, 0x0282
    9160:	81 30       	cpi	r24, 0x01	; 1
    9162:	39 f4       	brne	.+14     	; 0x9172 <FMenuLoyalty+0x27a>
		      IsMessage09=False;
    9164:	10 92 82 02 	sts	0x0282, r1
	          procMessage09();
    9168:	0e 94 b1 46 	call	0x8d62	; 0x8d62 <procMessage09>
              stLoyalty=mlDisplayFreeMessage;
    916c:	8a e0       	ldi	r24, 0x0A	; 10
    916e:	80 93 44 03 	sts	0x0344, r24
		  }
	      if (IsMessage99==True){
    9172:	80 91 7e 02 	lds	r24, 0x027E
    9176:	81 30       	cpi	r24, 0x01	; 1
    9178:	09 f0       	breq	.+2      	; 0x917c <FMenuLoyalty+0x284>
    917a:	08 c1       	rjmp	.+528    	; 0x938c <FMenuLoyalty+0x494>
    917c:	f7 c0       	rjmp	.+494    	; 0x936c <FMenuLoyalty+0x474>
              stLoyalty=mlDelayExitLoyalty;
		  }
	      break;
     case mlDisplayFreeMessage:
		  lcd_clear();
    917e:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
		  lcd_print(1,1,strFreeMessageLine1);
    9182:	81 e0       	ldi	r24, 0x01	; 1
    9184:	61 e0       	ldi	r22, 0x01	; 1
    9186:	46 e7       	ldi	r20, 0x76	; 118
    9188:	59 e0       	ldi	r21, 0x09	; 9
    918a:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
		  lcd_print(2,1,strFreeMessageLine2);
    918e:	82 e0       	ldi	r24, 0x02	; 2
    9190:	61 e0       	ldi	r22, 0x01	; 1
    9192:	47 e8       	ldi	r20, 0x87	; 135
    9194:	58 e0       	ldi	r21, 0x08	; 8
    9196:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
		  lcd_print(3,1,strFreeMessageLine3);
    919a:	83 e0       	ldi	r24, 0x03	; 3
    919c:	61 e0       	ldi	r22, 0x01	; 1
    919e:	40 ef       	ldi	r20, 0xF0	; 240
    91a0:	58 e0       	ldi	r21, 0x08	; 8
    91a2:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
		  lcd_print(4,1,strFreeMessageLine4);
    91a6:	84 e0       	ldi	r24, 0x04	; 4
    91a8:	61 e0       	ldi	r22, 0x01	; 1
    91aa:	4f ec       	ldi	r20, 0xCF	; 207
    91ac:	5c e0       	ldi	r21, 0x0C	; 12
    91ae:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
		  TimDisplay=0;
    91b2:	10 92 70 02 	sts	0x0270, r1
    91b6:	da c0       	rjmp	.+436    	; 0x936c <FMenuLoyalty+0x474>
		  stLoyalty=mlDelayExitLoyalty;
	      break;
     case mlDispEnquiry:	      
	      lcd_clear();
    91b8:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
		  RemSpaceLag(strCardID);RemSpaceLag(strCardHolder);
    91bc:	6d e6       	ldi	r22, 0x6D	; 109
    91be:	e6 2e       	mov	r14, r22
    91c0:	6c e0       	ldi	r22, 0x0C	; 12
    91c2:	f6 2e       	mov	r15, r22
    91c4:	c7 01       	movw	r24, r14
    91c6:	0e 94 f7 38 	call	0x71ee	; 0x71ee <RemSpaceLag>
    91ca:	59 e0       	ldi	r21, 0x09	; 9
    91cc:	c5 2e       	mov	r12, r21
    91ce:	54 e0       	ldi	r21, 0x04	; 4
    91d0:	d5 2e       	mov	r13, r21
    91d2:	c6 01       	movw	r24, r12
    91d4:	0e 94 f7 38 	call	0x71ee	; 0x71ee <RemSpaceLag>
		  sprintf_P(lcdteks,PSTR("%s:%s"),strCardID,strCardHolder);
    91d8:	ad b7       	in	r26, 0x3d	; 61
    91da:	be b7       	in	r27, 0x3e	; 62
    91dc:	18 97       	sbiw	r26, 0x08	; 8
    91de:	0f b6       	in	r0, 0x3f	; 63
    91e0:	f8 94       	cli
    91e2:	be bf       	out	0x3e, r27	; 62
    91e4:	0f be       	out	0x3f, r0	; 63
    91e6:	ad bf       	out	0x3d, r26	; 61
    91e8:	ed b7       	in	r30, 0x3d	; 61
    91ea:	fe b7       	in	r31, 0x3e	; 62
    91ec:	31 96       	adiw	r30, 0x01	; 1
    91ee:	8e 01       	movw	r16, r28
    91f0:	0f 5f       	subi	r16, 0xFF	; 255
    91f2:	1f 4f       	sbci	r17, 0xFF	; 255
    91f4:	12 96       	adiw	r26, 0x02	; 2
    91f6:	1c 93       	st	X, r17
    91f8:	0e 93       	st	-X, r16
    91fa:	11 97       	sbiw	r26, 0x01	; 1
    91fc:	81 e8       	ldi	r24, 0x81	; 129
    91fe:	9c e1       	ldi	r25, 0x1C	; 28
    9200:	93 83       	std	Z+3, r25	; 0x03
    9202:	82 83       	std	Z+2, r24	; 0x02
    9204:	f5 82       	std	Z+5, r15	; 0x05
    9206:	e4 82       	std	Z+4, r14	; 0x04
    9208:	d7 82       	std	Z+7, r13	; 0x07
    920a:	c6 82       	std	Z+6, r12	; 0x06
    920c:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		  lcd_print(1,1,lcdteks);RemSpaceLag(strLoyCurrentPoints);
    9210:	8d b7       	in	r24, 0x3d	; 61
    9212:	9e b7       	in	r25, 0x3e	; 62
    9214:	08 96       	adiw	r24, 0x08	; 8
    9216:	0f b6       	in	r0, 0x3f	; 63
    9218:	f8 94       	cli
    921a:	9e bf       	out	0x3e, r25	; 62
    921c:	0f be       	out	0x3f, r0	; 63
    921e:	8d bf       	out	0x3d, r24	; 61
    9220:	81 e0       	ldi	r24, 0x01	; 1
    9222:	61 e0       	ldi	r22, 0x01	; 1
    9224:	a8 01       	movw	r20, r16
    9226:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
    922a:	49 e1       	ldi	r20, 0x19	; 25
    922c:	e4 2e       	mov	r14, r20
    922e:	49 e0       	ldi	r20, 0x09	; 9
    9230:	f4 2e       	mov	r15, r20
    9232:	c7 01       	movw	r24, r14
    9234:	0e 94 f7 38 	call	0x71ee	; 0x71ee <RemSpaceLag>
		  sprintf_P(lcdteks,PSTR("Points:%s"),strLoyCurrentPoints);
    9238:	00 d0       	rcall	.+0      	; 0x923a <FMenuLoyalty+0x342>
    923a:	00 d0       	rcall	.+0      	; 0x923c <FMenuLoyalty+0x344>
    923c:	00 d0       	rcall	.+0      	; 0x923e <FMenuLoyalty+0x346>
    923e:	ed b7       	in	r30, 0x3d	; 61
    9240:	fe b7       	in	r31, 0x3e	; 62
    9242:	31 96       	adiw	r30, 0x01	; 1
    9244:	ad b7       	in	r26, 0x3d	; 61
    9246:	be b7       	in	r27, 0x3e	; 62
    9248:	12 96       	adiw	r26, 0x02	; 2
    924a:	1c 93       	st	X, r17
    924c:	0e 93       	st	-X, r16
    924e:	11 97       	sbiw	r26, 0x01	; 1
    9250:	87 e7       	ldi	r24, 0x77	; 119
    9252:	9c e1       	ldi	r25, 0x1C	; 28
    9254:	93 83       	std	Z+3, r25	; 0x03
    9256:	82 83       	std	Z+2, r24	; 0x02
    9258:	f5 82       	std	Z+5, r15	; 0x05
    925a:	e4 82       	std	Z+4, r14	; 0x04
    925c:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		  lcd_print(2,1,lcdteks);RemSpaceLag(strLoyCurrentPoints);
    9260:	8d b7       	in	r24, 0x3d	; 61
    9262:	9e b7       	in	r25, 0x3e	; 62
    9264:	06 96       	adiw	r24, 0x06	; 6
    9266:	0f b6       	in	r0, 0x3f	; 63
    9268:	f8 94       	cli
    926a:	9e bf       	out	0x3e, r25	; 62
    926c:	0f be       	out	0x3f, r0	; 63
    926e:	8d bf       	out	0x3d, r24	; 61
    9270:	82 e0       	ldi	r24, 0x02	; 2
    9272:	61 e0       	ldi	r22, 0x01	; 1
    9274:	a8 01       	movw	r20, r16
    9276:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
    927a:	c7 01       	movw	r24, r14
    927c:	0e 94 f7 38 	call	0x71ee	; 0x71ee <RemSpaceLag>
		  sprintf_P(lcdteks,PSTR("CM Amt:%s"),strLoyCurrMonConsumeA);
    9280:	00 d0       	rcall	.+0      	; 0x9282 <FMenuLoyalty+0x38a>
    9282:	00 d0       	rcall	.+0      	; 0x9284 <FMenuLoyalty+0x38c>
    9284:	00 d0       	rcall	.+0      	; 0x9286 <FMenuLoyalty+0x38e>
    9286:	ed b7       	in	r30, 0x3d	; 61
    9288:	fe b7       	in	r31, 0x3e	; 62
    928a:	31 96       	adiw	r30, 0x01	; 1
    928c:	ad b7       	in	r26, 0x3d	; 61
    928e:	be b7       	in	r27, 0x3e	; 62
    9290:	12 96       	adiw	r26, 0x02	; 2
    9292:	1c 93       	st	X, r17
    9294:	0e 93       	st	-X, r16
    9296:	11 97       	sbiw	r26, 0x01	; 1
    9298:	8d e6       	ldi	r24, 0x6D	; 109
    929a:	9c e1       	ldi	r25, 0x1C	; 28
    929c:	93 83       	std	Z+3, r25	; 0x03
    929e:	82 83       	std	Z+2, r24	; 0x02
    92a0:	83 e6       	ldi	r24, 0x63	; 99
    92a2:	94 e0       	ldi	r25, 0x04	; 4
    92a4:	95 83       	std	Z+5, r25	; 0x05
    92a6:	84 83       	std	Z+4, r24	; 0x04
    92a8:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		  lcd_print(3,1,lcdteks);RemSpaceLag(strLoyCurrentPoints);
    92ac:	8d b7       	in	r24, 0x3d	; 61
    92ae:	9e b7       	in	r25, 0x3e	; 62
    92b0:	06 96       	adiw	r24, 0x06	; 6
    92b2:	0f b6       	in	r0, 0x3f	; 63
    92b4:	f8 94       	cli
    92b6:	9e bf       	out	0x3e, r25	; 62
    92b8:	0f be       	out	0x3f, r0	; 63
    92ba:	8d bf       	out	0x3d, r24	; 61
    92bc:	83 e0       	ldi	r24, 0x03	; 3
    92be:	61 e0       	ldi	r22, 0x01	; 1
    92c0:	a8 01       	movw	r20, r16
    92c2:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
    92c6:	c7 01       	movw	r24, r14
    92c8:	0e 94 f7 38 	call	0x71ee	; 0x71ee <RemSpaceLag>
		  sprintf_P(lcdteks,PSTR("Cm Vol:%s"),strLoyCurrMonConsumeV);
    92cc:	00 d0       	rcall	.+0      	; 0x92ce <FMenuLoyalty+0x3d6>
    92ce:	00 d0       	rcall	.+0      	; 0x92d0 <FMenuLoyalty+0x3d8>
    92d0:	00 d0       	rcall	.+0      	; 0x92d2 <FMenuLoyalty+0x3da>
    92d2:	ed b7       	in	r30, 0x3d	; 61
    92d4:	fe b7       	in	r31, 0x3e	; 62
    92d6:	31 96       	adiw	r30, 0x01	; 1
    92d8:	ad b7       	in	r26, 0x3d	; 61
    92da:	be b7       	in	r27, 0x3e	; 62
    92dc:	12 96       	adiw	r26, 0x02	; 2
    92de:	1c 93       	st	X, r17
    92e0:	0e 93       	st	-X, r16
    92e2:	11 97       	sbiw	r26, 0x01	; 1
    92e4:	83 e6       	ldi	r24, 0x63	; 99
    92e6:	9c e1       	ldi	r25, 0x1C	; 28
    92e8:	93 83       	std	Z+3, r25	; 0x03
    92ea:	82 83       	std	Z+2, r24	; 0x02
    92ec:	86 ee       	ldi	r24, 0xE6	; 230
    92ee:	9c e0       	ldi	r25, 0x0C	; 12
    92f0:	95 83       	std	Z+5, r25	; 0x05
    92f2:	84 83       	std	Z+4, r24	; 0x04
    92f4:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		  lcd_print(4,1,lcdteks);
    92f8:	8d b7       	in	r24, 0x3d	; 61
    92fa:	9e b7       	in	r25, 0x3e	; 62
    92fc:	06 96       	adiw	r24, 0x06	; 6
    92fe:	0f b6       	in	r0, 0x3f	; 63
    9300:	f8 94       	cli
    9302:	9e bf       	out	0x3e, r25	; 62
    9304:	0f be       	out	0x3f, r0	; 63
    9306:	8d bf       	out	0x3d, r24	; 61
    9308:	84 e0       	ldi	r24, 0x04	; 4
    930a:	61 e0       	ldi	r22, 0x01	; 1
    930c:	a8 01       	movw	r20, r16
    930e:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
		  TimDisplay=0;
    9312:	10 92 70 02 	sts	0x0270, r1

		  if (eeprom_read_byte(&DefNotifScreen)==1) {
    9316:	88 e3       	ldi	r24, 0x38	; 56
    9318:	90 e0       	ldi	r25, 0x00	; 0
    931a:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
    931e:	81 30       	cpi	r24, 0x01	; 1
    9320:	29 f5       	brne	.+74     	; 0x936c <FMenuLoyalty+0x474>
		      stLoyalty=mlPressAnyKey;
    9322:	8d e0       	ldi	r24, 0x0D	; 13
    9324:	80 93 44 03 	sts	0x0344, r24
			  lcd_printf(2,1,PSTR("Press Any Key"));
    9328:	82 e0       	ldi	r24, 0x02	; 2
    932a:	61 e0       	ldi	r22, 0x01	; 1
    932c:	45 e5       	ldi	r20, 0x55	; 85
    932e:	5c e1       	ldi	r21, 0x1C	; 28
    9330:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
    9334:	2b c0       	rjmp	.+86     	; 0x938c <FMenuLoyalty+0x494>
          } else stLoyalty=mlDelayExitLoyalty;
		  break;
     case mlPressAnyKey:
	      KeyPressed=_key_scan(1);
    9336:	81 e0       	ldi	r24, 0x01	; 1
    9338:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <_key_scan>
	      KeyChar=_key_btn(KeyPressed);
    933c:	0e 94 49 a3 	call	0x14692	; 0x14692 <_key_btn>
	      switch(KeyChar){		  
    9340:	83 32       	cpi	r24, 0x23	; 35
    9342:	d1 f0       	breq	.+52     	; 0x9378 <FMenuLoyalty+0x480>
    9344:	8a 32       	cpi	r24, 0x2A	; 42
    9346:	11 f5       	brne	.+68     	; 0x938c <FMenuLoyalty+0x494>
    9348:	17 c0       	rjmp	.+46     	; 0x9378 <FMenuLoyalty+0x480>
               stLoyalty=mlExitLoyalty;
		       break;		  
		  }
	      break;
     case mlNoConnection:
	      lcd_clear();
    934a:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
		  lcd_printf(2,1,PSTR("TCP/IP ERROR "));
    934e:	82 e0       	ldi	r24, 0x02	; 2
    9350:	61 e0       	ldi	r22, 0x01	; 1
    9352:	47 e4       	ldi	r20, 0x47	; 71
    9354:	5c e1       	ldi	r21, 0x1C	; 28
    9356:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  lcd_printf(3,1,PSTR("No Connection"));
    935a:	83 e0       	ldi	r24, 0x03	; 3
    935c:	61 e0       	ldi	r22, 0x01	; 1
    935e:	49 e3       	ldi	r20, 0x39	; 57
    9360:	5c e1       	ldi	r21, 0x1C	; 28
    9362:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  TimDisplay=5;
    9366:	85 e0       	ldi	r24, 0x05	; 5
    9368:	80 93 70 02 	sts	0x0270, r24
		  stLoyalty=mlDelayExitLoyalty;
    936c:	8e e0       	ldi	r24, 0x0E	; 14
    936e:	05 c0       	rjmp	.+10     	; 0x937a <FMenuLoyalty+0x482>
	      break;
     case mlDelayExitLoyalty:
          if(TimDisplay>=10)stLoyalty=mlExitLoyalty;
    9370:	80 91 70 02 	lds	r24, 0x0270
    9374:	8a 30       	cpi	r24, 0x0A	; 10
    9376:	50 f0       	brcs	.+20     	; 0x938c <FMenuLoyalty+0x494>
    9378:	8f e0       	ldi	r24, 0x0F	; 15
    937a:	80 93 44 03 	sts	0x0344, r24
    937e:	06 c0       	rjmp	.+12     	; 0x938c <FMenuLoyalty+0x494>
	      break;
	 case mlExitLoyalty:
	      lcd_clear();
    9380:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
	      stLoyalty=mlInit;
    9384:	10 92 44 03 	sts	0x0344, r1
		  Result=MENU_DONE;
    9388:	81 e0       	ldi	r24, 0x01	; 1
	      break;
    938a:	01 c0       	rjmp	.+2      	; 0x938e <FMenuLoyalty+0x496>
       char lcdteks[20];
       char FIPResult,FIP_USED;
	   char Result=MENU_NONE;
	   char KeyPressed=0,KeyChar;

     Result=MENU_NONE;
    938c:	80 e0       	ldi	r24, 0x00	; 0
	      stLoyalty=mlInit;
		  Result=MENU_DONE;
	      break;
	 }
	 return Result;
}
    938e:	64 96       	adiw	r28, 0x14	; 20
    9390:	0f b6       	in	r0, 0x3f	; 63
    9392:	f8 94       	cli
    9394:	de bf       	out	0x3e, r29	; 62
    9396:	0f be       	out	0x3f, r0	; 63
    9398:	cd bf       	out	0x3d, r28	; 61
    939a:	cf 91       	pop	r28
    939c:	df 91       	pop	r29
    939e:	1f 91       	pop	r17
    93a0:	0f 91       	pop	r16
    93a2:	ff 90       	pop	r15
    93a4:	ef 90       	pop	r14
    93a6:	df 90       	pop	r13
    93a8:	cf 90       	pop	r12
    93aa:	08 95       	ret

000093ac <procMessage57>:
     StrPosCopy(rcv_trans,strAmount,135,7);
     StrPosCopy(rcv_trans,strGainPoints,142,4);
     return Result;
}

char procMessage57(){
    93ac:	ff 92       	push	r15
    93ae:	0f 93       	push	r16
    93b0:	1f 93       	push	r17
    93b2:	cf 93       	push	r28
    93b4:	df 93       	push	r29
     char i,Result,serialSend[20];
	 Result=MSG57_NONE;
	 //Message57
	 
	     //Card Status
		 Result=(CharPosCopy(rcv_trans,57)-'0')+1;
    93b6:	f0 90 3a 0a 	lds	r15, 0x0A3A
    93ba:	81 ed       	ldi	r24, 0xD1	; 209
    93bc:	f8 0e       	add	r15, r24
		 //CardID
		 StrPosCopy(strCardID,rcv_trans,37,20);
    93be:	0d e6       	ldi	r16, 0x6D	; 109
    93c0:	1c e0       	ldi	r17, 0x0C	; 12
    93c2:	c1 e0       	ldi	r28, 0x01	; 1
    93c4:	da e0       	ldi	r29, 0x0A	; 10
    93c6:	c8 01       	movw	r24, r16
    93c8:	be 01       	movw	r22, r28
    93ca:	45 e2       	ldi	r20, 0x25	; 37
    93cc:	50 e0       	ldi	r21, 0x00	; 0
    93ce:	24 e1       	ldi	r18, 0x14	; 20
    93d0:	30 e0       	ldi	r19, 0x00	; 0
    93d2:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
		 RemSpaceLead(strCardID);
    93d6:	c8 01       	movw	r24, r16
    93d8:	0e 94 4b 39 	call	0x7296	; 0x7296 <RemSpaceLead>
	     //Card Holder
		 StrPosCopy(rcv_trans,strCardHolder,60,40);
    93dc:	09 e0       	ldi	r16, 0x09	; 9
    93de:	14 e0       	ldi	r17, 0x04	; 4
    93e0:	ce 01       	movw	r24, r28
    93e2:	b8 01       	movw	r22, r16
    93e4:	4c e3       	ldi	r20, 0x3C	; 60
    93e6:	50 e0       	ldi	r21, 0x00	; 0
    93e8:	28 e2       	ldi	r18, 0x28	; 40
    93ea:	30 e0       	ldi	r19, 0x00	; 0
    93ec:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
		 RemSpaceLag(strCardHolder);
    93f0:	c8 01       	movw	r24, r16
    93f2:	0e 94 f7 38 	call	0x71ee	; 0x71ee <RemSpaceLag>
		 //BalanceTypePrint
		 StrPosCopy(rcv_trans,strBalanceTypePrint,154-2,25);
    93f6:	00 e4       	ldi	r16, 0x40	; 64
    93f8:	14 e0       	ldi	r17, 0x04	; 4
    93fa:	ce 01       	movw	r24, r28
    93fc:	b8 01       	movw	r22, r16
    93fe:	48 e9       	ldi	r20, 0x98	; 152
    9400:	50 e0       	ldi	r21, 0x00	; 0
    9402:	29 e1       	ldi	r18, 0x19	; 25
    9404:	30 e0       	ldi	r19, 0x00	; 0
    9406:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
		 RemSpaceLag(strBalanceTypePrint);
    940a:	c8 01       	movw	r24, r16
    940c:	0e 94 f7 38 	call	0x71ee	; 0x71ee <RemSpaceLag>
         //BalanceTypeCode
		 StrPosCopy(rcv_trans,strBalanceCode,177,1);
    9410:	ce 01       	movw	r24, r28
    9412:	6a ec       	ldi	r22, 0xCA	; 202
    9414:	73 e0       	ldi	r23, 0x03	; 3
    9416:	41 eb       	ldi	r20, 0xB1	; 177
    9418:	50 e0       	ldi	r21, 0x00	; 0
    941a:	21 e0       	ldi	r18, 0x01	; 1
    941c:	30 e0       	ldi	r19, 0x00	; 0
    941e:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
		 //Balance
		 StrPosCopy(rcv_trans,strBalance,178,13);
    9422:	01 ef       	ldi	r16, 0xF1	; 241
    9424:	1c e0       	ldi	r17, 0x0C	; 12
    9426:	ce 01       	movw	r24, r28
    9428:	b8 01       	movw	r22, r16
    942a:	42 eb       	ldi	r20, 0xB2	; 178
    942c:	50 e0       	ldi	r21, 0x00	; 0
    942e:	2d e0       	ldi	r18, 0x0D	; 13
    9430:	30 e0       	ldi	r19, 0x00	; 0
    9432:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
		 RemSpaceLead(strBalance);
    9436:	c8 01       	movw	r24, r16
    9438:	0e 94 4b 39 	call	0x7296	; 0x7296 <RemSpaceLead>
		 //LicPlate
		 StrPosCopy(rcv_trans,strLicPlate,193-2,10);
    943c:	0e ed       	ldi	r16, 0xDE	; 222
    943e:	19 e0       	ldi	r17, 0x09	; 9
    9440:	ce 01       	movw	r24, r28
    9442:	b8 01       	movw	r22, r16
    9444:	4f eb       	ldi	r20, 0xBF	; 191
    9446:	50 e0       	ldi	r21, 0x00	; 0
    9448:	2a e0       	ldi	r18, 0x0A	; 10
    944a:	30 e0       	ldi	r19, 0x00	; 0
    944c:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
		 RemSpaceLag(strLicPlate);
    9450:	c8 01       	movw	r24, r16
    9452:	0e 94 f7 38 	call	0x71ee	; 0x71ee <RemSpaceLag>
		 //CompName
		 StrPosCopy(rcv_trans,strCompName,203-2,20);
    9456:	0d e5       	ldi	r16, 0x5D	; 93
    9458:	18 e0       	ldi	r17, 0x08	; 8
    945a:	ce 01       	movw	r24, r28
    945c:	b8 01       	movw	r22, r16
    945e:	49 ec       	ldi	r20, 0xC9	; 201
    9460:	50 e0       	ldi	r21, 0x00	; 0
    9462:	24 e1       	ldi	r18, 0x14	; 20
    9464:	30 e0       	ldi	r19, 0x00	; 0
    9466:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
		 RemSpaceLag(strCompName);
    946a:	c8 01       	movw	r24, r16
    946c:	0e 94 f7 38 	call	0x71ee	; 0x71ee <RemSpaceLag>
		 uart_print(0,1,strCompName);
		 
uart_print(0,1,strCardID);
*/	
     return Result;
}
    9470:	8f 2d       	mov	r24, r15
    9472:	df 91       	pop	r29
    9474:	cf 91       	pop	r28
    9476:	1f 91       	pop	r17
    9478:	0f 91       	pop	r16
    947a:	ff 90       	pop	r15
    947c:	08 95       	ret

0000947e <procMessage81>:

char procMessage81(){// Result: HFCS0000
    947e:	1f 93       	push	r17
     char Result=0,PrintCopy=0;//
	 char lcdteks[20];
	 //PrintHeader
     if ((CharPosCopy(rcv_trans,37))=='Y') Result=(Result|(1<<7));
    9480:	80 91 26 0a 	lds	r24, 0x0A26
    9484:	89 35       	cpi	r24, 0x59	; 89
    9486:	11 f0       	breq	.+4      	; 0x948c <procMessage81+0xe>
*/	
     return Result;
}

char procMessage81(){// Result: HFCS0000
     char Result=0,PrintCopy=0;//
    9488:	10 e0       	ldi	r17, 0x00	; 0
    948a:	01 c0       	rjmp	.+2      	; 0x948e <procMessage81+0x10>
	 char lcdteks[20];
	 //PrintHeader
     if ((CharPosCopy(rcv_trans,37))=='Y') Result=(Result|(1<<7));
    948c:	10 e8       	ldi	r17, 0x80	; 128
     //PrintFooter
	 if ((CharPosCopy(rcv_trans,38))=='Y') Result=(Result|(1<<6));
    948e:	80 91 27 0a 	lds	r24, 0x0A27
    9492:	89 35       	cpi	r24, 0x59	; 89
    9494:	09 f4       	brne	.+2      	; 0x9498 <procMessage81+0x1a>
    9496:	10 64       	ori	r17, 0x40	; 64
	 //PaperCut
     if ((CharPosCopy(rcv_trans,39))=='Y') Result=(Result|(1<<5));
    9498:	80 91 28 0a 	lds	r24, 0x0A28
    949c:	89 35       	cpi	r24, 0x59	; 89
    949e:	09 f4       	brne	.+2      	; 0x94a2 <procMessage81+0x24>
    94a0:	10 62       	ori	r17, 0x20	; 32
	 //Scrool
	 Result=(Result|(1<<4));
    94a2:	10 61       	ori	r17, 0x10	; 16

	 //Copies
	 PrintCopy=(CharPosCopy(rcv_trans,40)-'0');
    94a4:	80 91 29 0a 	lds	r24, 0x0A29
    94a8:	80 53       	subi	r24, 0x30	; 48
     if (PrintCopy<=16) Result=Result|PrintCopy;
    94aa:	81 31       	cpi	r24, 0x11	; 17
    94ac:	08 f4       	brcc	.+2      	; 0x94b0 <procMessage81+0x32>
    94ae:	18 2b       	or	r17, r24
	 //Spooling
     StrPosCopy(rcv_trans,PrintBuffer,44,LengthMessage81);
    94b0:	20 91 6b 02 	lds	r18, 0x026B
    94b4:	30 91 6c 02 	lds	r19, 0x026C
    94b8:	81 e0       	ldi	r24, 0x01	; 1
    94ba:	9a e0       	ldi	r25, 0x0A	; 10
    94bc:	60 ed       	ldi	r22, 0xD0	; 208
    94be:	74 e0       	ldi	r23, 0x04	; 4
    94c0:	4c e2       	ldi	r20, 0x2C	; 44
    94c2:	50 e0       	ldi	r21, 0x00	; 0
    94c4:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
	 //sprintf(lcdteks,"cmdPrint:%d ",Result);
     //uart_print(0,1,lcdteks);

	 //while(1){};
	 return Result;
}
    94c8:	81 2f       	mov	r24, r17
    94ca:	1f 91       	pop	r17
    94cc:	08 95       	ret

000094ce <RemDecimal>:
	 }
}



void RemDecimal(char *strDecimal){//4500.00-->4500
    94ce:	ef 92       	push	r14
    94d0:	ff 92       	push	r15
    94d2:	cf 93       	push	r28
    94d4:	df 93       	push	r29
    94d6:	ec 01       	movw	r28, r24
char i,DecPointMark;
     DecPointMark=eeprom_read_byte(&DefDecimalMark);	 
    94d8:	8f e3       	ldi	r24, 0x3F	; 63
    94da:	90 e0       	ldi	r25, 0x00	; 0
    94dc:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>

     for(i=0;i<strlen(strDecimal);i++){
    94e0:	90 e0       	ldi	r25, 0x00	; 0
    94e2:	08 c0       	rjmp	.+16     	; 0x94f4 <RemDecimal+0x26>
	     if (strDecimal[i]==DecPointMark)
    94e4:	fe 01       	movw	r30, r28
    94e6:	e2 0f       	add	r30, r18
    94e8:	f3 1f       	adc	r31, r19
    94ea:	20 81       	ld	r18, Z
    94ec:	28 17       	cp	r18, r24
    94ee:	09 f4       	brne	.+2      	; 0x94f2 <RemDecimal+0x24>
		     strDecimal[i]=0;
    94f0:	10 82       	st	Z, r1

void RemDecimal(char *strDecimal){//4500.00-->4500
char i,DecPointMark;
     DecPointMark=eeprom_read_byte(&DefDecimalMark);	 

     for(i=0;i<strlen(strDecimal);i++){
    94f2:	9f 5f       	subi	r25, 0xFF	; 255
    94f4:	29 2f       	mov	r18, r25
    94f6:	30 e0       	ldi	r19, 0x00	; 0
    94f8:	7e 01       	movw	r14, r28
    94fa:	ac 2f       	mov	r26, r28
    94fc:	bf 2d       	mov	r27, r15
    94fe:	fd 01       	movw	r30, r26
    9500:	01 90       	ld	r0, Z+
    9502:	00 20       	and	r0, r0
    9504:	e9 f7       	brne	.-6      	; 0x9500 <RemDecimal+0x32>
    9506:	31 97       	sbiw	r30, 0x01	; 1
    9508:	ea 1b       	sub	r30, r26
    950a:	fb 0b       	sbc	r31, r27
    950c:	2e 17       	cp	r18, r30
    950e:	3f 07       	cpc	r19, r31
    9510:	48 f3       	brcs	.-46     	; 0x94e4 <RemDecimal+0x16>
	     if (strDecimal[i]==DecPointMark)
		     strDecimal[i]=0;
	 }
}
    9512:	df 91       	pop	r29
    9514:	cf 91       	pop	r28
    9516:	ff 90       	pop	r15
    9518:	ef 90       	pop	r14
    951a:	08 95       	ret

0000951c <SpaceOnly>:
char SpaceOnly(char *string){
     char Result,nChar=0;
	 unsigned int i=0;
	 nChar=0;
	 Result=False;
	 for(i=0;i<strlen(string);i++){
    951c:	fc 01       	movw	r30, r24
    951e:	01 90       	ld	r0, Z+
    9520:	00 20       	and	r0, r0
    9522:	e9 f7       	brne	.-6      	; 0x951e <SpaceOnly+0x2>
    9524:	31 97       	sbiw	r30, 0x01	; 1
    9526:	e8 1b       	sub	r30, r24
    9528:	f9 0b       	sbc	r31, r25
    952a:	dc 01       	movw	r26, r24
    952c:	80 e0       	ldi	r24, 0x00	; 0
    952e:	90 e0       	ldi	r25, 0x00	; 0
}

char SpaceOnly(char *string){
     char Result,nChar=0;
	 unsigned int i=0;
	 nChar=0;
    9530:	20 e0       	ldi	r18, 0x00	; 0
	 Result=False;
	 for(i=0;i<strlen(string);i++){
    9532:	05 c0       	rjmp	.+10     	; 0x953e <SpaceOnly+0x22>
	    if(string[i]!=' ') nChar++;
    9534:	3d 91       	ld	r19, X+
    9536:	30 32       	cpi	r19, 0x20	; 32
    9538:	09 f0       	breq	.+2      	; 0x953c <SpaceOnly+0x20>
    953a:	2f 5f       	subi	r18, 0xFF	; 255
char SpaceOnly(char *string){
     char Result,nChar=0;
	 unsigned int i=0;
	 nChar=0;
	 Result=False;
	 for(i=0;i<strlen(string);i++){
    953c:	01 96       	adiw	r24, 0x01	; 1
    953e:	8e 17       	cp	r24, r30
    9540:	9f 07       	cpc	r25, r31
    9542:	c0 f3       	brcs	.-16     	; 0x9534 <SpaceOnly+0x18>
	    if(string[i]!=' ') nChar++;
	 }
	 if (nChar>0) Result=False;
    9544:	81 e0       	ldi	r24, 0x01	; 1
    9546:	21 11       	cpse	r18, r1
    9548:	80 e0       	ldi	r24, 0x00	; 0
	 else Result=True;

	 return Result;
}
    954a:	08 95       	ret

0000954c <PaperCut>:


void PaperCut(){
    954c:	1f 93       	push	r17
     char CutType;
     CutType= eeprom_read_byte(&DefPrintAutoCut);
    954e:	83 e3       	ldi	r24, 0x33	; 51
    9550:	90 e0       	ldi	r25, 0x00	; 0
    9552:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
    9556:	18 2f       	mov	r17, r24
     uart(_COM_PRINTER, 1, 0x1B);
    9558:	80 e0       	ldi	r24, 0x00	; 0
    955a:	61 e0       	ldi	r22, 0x01	; 1
    955c:	4b e1       	ldi	r20, 0x1B	; 27
    955e:	0e 94 e6 a5 	call	0x14bcc	; 0x14bcc <uart>
	 if(CutType== 1) { uart(_COM_PRINTER, 1, 0x6D);}
    9562:	11 30       	cpi	r17, 0x01	; 1
    9564:	21 f4       	brne	.+8      	; 0x956e <PaperCut+0x22>
    9566:	80 e0       	ldi	r24, 0x00	; 0
    9568:	61 e0       	ldi	r22, 0x01	; 1
    956a:	4d e6       	ldi	r20, 0x6D	; 109
    956c:	05 c0       	rjmp	.+10     	; 0x9578 <PaperCut+0x2c>
	 if(CutType== 2) {uart(_COM_PRINTER, 1, 0x69);}
    956e:	12 30       	cpi	r17, 0x02	; 2
    9570:	29 f4       	brne	.+10     	; 0x957c <PaperCut+0x30>
    9572:	80 e0       	ldi	r24, 0x00	; 0
    9574:	61 e0       	ldi	r22, 0x01	; 1
    9576:	49 e6       	ldi	r20, 0x69	; 105
    9578:	0e 94 e6 a5 	call	0x14bcc	; 0x14bcc <uart>

}
    957c:	1f 91       	pop	r17
    957e:	08 95       	ret

00009580 <FillChar>:

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    9580:	28 2f       	mov	r18, r24
    9582:	39 2f       	mov	r19, r25
    9584:	f9 01       	movw	r30, r18
    9586:	80 e0       	ldi	r24, 0x00	; 0
    9588:	90 e0       	ldi	r25, 0x00	; 0
    958a:	02 c0       	rjmp	.+4      	; 0x9590 <FillChar+0x10>
	     strMemory[i]=data;
    958c:	41 93       	st	Z+, r20

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    958e:	01 96       	adiw	r24, 0x01	; 1
    9590:	86 17       	cp	r24, r22
    9592:	97 07       	cpc	r25, r23
    9594:	d8 f3       	brcs	.-10     	; 0x958c <FillChar+0xc>
	     strMemory[i]=data;
	 }
}
    9596:	08 95       	ret

00009598 <procMessage11>:
}




void procMessage11(){
    9598:	af 92       	push	r10
    959a:	bf 92       	push	r11
    959c:	cf 92       	push	r12
    959e:	df 92       	push	r13
    95a0:	ef 92       	push	r14
    95a2:	ff 92       	push	r15
    95a4:	0f 93       	push	r16
    95a6:	1f 93       	push	r17
    95a8:	df 93       	push	r29
    95aa:	cf 93       	push	r28
    95ac:	cd b7       	in	r28, 0x3d	; 61
    95ae:	de b7       	in	r29, 0x3e	; 62
    95b0:	c0 59       	subi	r28, 0x90	; 144
    95b2:	d0 40       	sbci	r29, 0x00	; 0
    95b4:	0f b6       	in	r0, 0x3f	; 63
    95b6:	f8 94       	cli
    95b8:	de bf       	out	0x3e, r29	; 62
    95ba:	0f be       	out	0x3f, r0	; 63
    95bc:	cd bf       	out	0x3d, r28	; 61
     unsigned int i;	 
     char buffHeader[50],strReadEEPROM[50];
	 char strProductName[13],strProductPrice[9],strTime[12],strDate[10];

     //Update Datetime
	 StrPosCopy(rcv_trans,strDate,43,10);//2004/09/14 19:05:36
    95be:	4a e0       	ldi	r20, 0x0A	; 10
    95c0:	e4 2e       	mov	r14, r20
    95c2:	f1 2c       	mov	r15, r1
    95c4:	ec 0e       	add	r14, r28
    95c6:	fd 1e       	adc	r15, r29
    95c8:	81 e0       	ldi	r24, 0x01	; 1
    95ca:	9a e0       	ldi	r25, 0x0A	; 10
    95cc:	b7 01       	movw	r22, r14
    95ce:	4b e2       	ldi	r20, 0x2B	; 43
    95d0:	50 e0       	ldi	r21, 0x00	; 0
    95d2:	2a e0       	ldi	r18, 0x0A	; 10
    95d4:	30 e0       	ldi	r19, 0x00	; 0
    95d6:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
	 FormatDate(DATE_SHORT_YEAR,strDate);
    95da:	81 e0       	ldi	r24, 0x01	; 1
    95dc:	b7 01       	movw	r22, r14
    95de:	0e 94 ef 3e 	call	0x7dde	; 0x7dde <FormatDate>
	 StrPosCopy(rcv_trans,strTime,54,8);
    95e2:	8e 01       	movw	r16, r28
    95e4:	0c 5e       	subi	r16, 0xEC	; 236
    95e6:	1f 4f       	sbci	r17, 0xFF	; 255
    95e8:	81 e0       	ldi	r24, 0x01	; 1
    95ea:	9a e0       	ldi	r25, 0x0A	; 10
    95ec:	b8 01       	movw	r22, r16
    95ee:	46 e3       	ldi	r20, 0x36	; 54
    95f0:	50 e0       	ldi	r21, 0x00	; 0
    95f2:	28 e0       	ldi	r18, 0x08	; 8
    95f4:	30 e0       	ldi	r19, 0x00	; 0
    95f6:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
	 _datetime(_DATETIME_WRITE,strDate,strTime);
    95fa:	81 e0       	ldi	r24, 0x01	; 1
    95fc:	b7 01       	movw	r22, r14
    95fe:	a8 01       	movw	r20, r16
    9600:	0e 94 e4 a4 	call	0x149c8	; 0x149c8 <_datetime>
    9604:	08 e2       	ldi	r16, 0x28	; 40
    9606:	12 e0       	ldi	r17, 0x02	; 2
    9608:	3e e3       	ldi	r19, 0x3E	; 62
    960a:	e3 2e       	mov	r14, r19
    960c:	f1 2c       	mov	r15, r1
	      
	 //HeaderFooter
	 for(i=0;i<10;i++){
	     FillChar(buffHeader,0,sizeof(buffHeader));   
    960e:	2d e2       	ldi	r18, 0x2D	; 45
    9610:	c2 2e       	mov	r12, r18
    9612:	d1 2c       	mov	r13, r1
    9614:	cc 0e       	add	r12, r28
    9616:	dd 1e       	adc	r13, r29
         StrPosCopy(rcv_trans,buffHeader,62+(i*40),40);
		 eeprom_read_block((void*) &strReadEEPROM, (const void*) &DefHeaderFooter[i],41);
    9618:	9f e5       	ldi	r25, 0x5F	; 95
    961a:	a9 2e       	mov	r10, r25
    961c:	b1 2c       	mov	r11, r1
    961e:	ac 0e       	add	r10, r28
    9620:	bd 1e       	adc	r11, r29
	 StrPosCopy(rcv_trans,strTime,54,8);
	 _datetime(_DATETIME_WRITE,strDate,strTime);
	      
	 //HeaderFooter
	 for(i=0;i<10;i++){
	     FillChar(buffHeader,0,sizeof(buffHeader));   
    9622:	c6 01       	movw	r24, r12
    9624:	60 e0       	ldi	r22, 0x00	; 0
    9626:	70 e0       	ldi	r23, 0x00	; 0
    9628:	42 e3       	ldi	r20, 0x32	; 50
    962a:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>
         StrPosCopy(rcv_trans,buffHeader,62+(i*40),40);
    962e:	81 e0       	ldi	r24, 0x01	; 1
    9630:	9a e0       	ldi	r25, 0x0A	; 10
    9632:	b6 01       	movw	r22, r12
    9634:	a7 01       	movw	r20, r14
    9636:	28 e2       	ldi	r18, 0x28	; 40
    9638:	30 e0       	ldi	r19, 0x00	; 0
    963a:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
		 eeprom_read_block((void*) &strReadEEPROM, (const void*) &DefHeaderFooter[i],41);
    963e:	c5 01       	movw	r24, r10
    9640:	b8 01       	movw	r22, r16
    9642:	49 e2       	ldi	r20, 0x29	; 41
    9644:	50 e0       	ldi	r21, 0x00	; 0
    9646:	0e 94 56 aa 	call	0x154ac	; 0x154ac <__eerd_block_m128>
	     if (strcmp(strReadEEPROM,buffHeader)!=0)
    964a:	c5 01       	movw	r24, r10
    964c:	b6 01       	movw	r22, r12
    964e:	0e 94 05 a8 	call	0x1500a	; 0x1500a <strcmp>
    9652:	00 97       	sbiw	r24, 0x00	; 0
    9654:	31 f0       	breq	.+12     	; 0x9662 <procMessage11+0xca>
		     eeprom_write_block((const void*) &buffHeader, (void*) &DefHeaderFooter[i], 41);
    9656:	c6 01       	movw	r24, r12
    9658:	b8 01       	movw	r22, r16
    965a:	49 e2       	ldi	r20, 0x29	; 41
    965c:	50 e0       	ldi	r21, 0x00	; 0
    965e:	0e 94 6e aa 	call	0x154dc	; 0x154dc <__eewr_block_m128>
    9662:	88 e2       	ldi	r24, 0x28	; 40
    9664:	90 e0       	ldi	r25, 0x00	; 0
    9666:	e8 0e       	add	r14, r24
    9668:	f9 1e       	adc	r15, r25
    966a:	07 5d       	subi	r16, 0xD7	; 215
    966c:	1f 4f       	sbci	r17, 0xFF	; 255
	 FormatDate(DATE_SHORT_YEAR,strDate);
	 StrPosCopy(rcv_trans,strTime,54,8);
	 _datetime(_DATETIME_WRITE,strDate,strTime);
	      
	 //HeaderFooter
	 for(i=0;i<10;i++){
    966e:	9e ec       	ldi	r25, 0xCE	; 206
    9670:	e9 16       	cp	r14, r25
    9672:	91 e0       	ldi	r25, 0x01	; 1
    9674:	f9 06       	cpc	r15, r25
    9676:	a9 f6       	brne	.-86     	; 0x9622 <procMessage11+0x8a>
    9678:	0c eb       	ldi	r16, 0xBC	; 188
    967a:	10 e0       	ldi	r17, 0x00	; 0
    967c:	86 ee       	ldi	r24, 0xE6	; 230
    967e:	e8 2e       	mov	r14, r24
    9680:	81 e0       	ldi	r24, 0x01	; 1
    9682:	f8 2e       	mov	r15, r24
     StrPosCopy(rcv_trans,buffHeader,422,40);
     eeprom_write_block((const void*) &buffHeader, (void*) &DefHeaderFooter[9], 40);
	 */
	 //ProductName
	 for(i=0;i<6;i++){
	    StrPosCopy(rcv_trans,strProductName,(486+(i*12)),12);
    9684:	b0 e2       	ldi	r27, 0x20	; 32
    9686:	cb 2e       	mov	r12, r27
    9688:	d1 2c       	mov	r13, r1
    968a:	cc 0e       	add	r12, r28
    968c:	dd 1e       	adc	r13, r29
		RemSpaceLag(strProductName);
		eeprom_read_block((void*) &strReadEEPROM, (const void*) &DefProductName[i],12);
    968e:	af e5       	ldi	r26, 0x5F	; 95
    9690:	aa 2e       	mov	r10, r26
    9692:	b1 2c       	mov	r11, r1
    9694:	ac 0e       	add	r10, r28
    9696:	bd 1e       	adc	r11, r29
     StrPosCopy(rcv_trans,buffHeader,422,40);
     eeprom_write_block((const void*) &buffHeader, (void*) &DefHeaderFooter[9], 40);
	 */
	 //ProductName
	 for(i=0;i<6;i++){
	    StrPosCopy(rcv_trans,strProductName,(486+(i*12)),12);
    9698:	81 e0       	ldi	r24, 0x01	; 1
    969a:	9a e0       	ldi	r25, 0x0A	; 10
    969c:	b6 01       	movw	r22, r12
    969e:	a7 01       	movw	r20, r14
    96a0:	2c e0       	ldi	r18, 0x0C	; 12
    96a2:	30 e0       	ldi	r19, 0x00	; 0
    96a4:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
		RemSpaceLag(strProductName);
    96a8:	c6 01       	movw	r24, r12
    96aa:	0e 94 f7 38 	call	0x71ee	; 0x71ee <RemSpaceLag>
		eeprom_read_block((void*) &strReadEEPROM, (const void*) &DefProductName[i],12);
    96ae:	c5 01       	movw	r24, r10
    96b0:	b8 01       	movw	r22, r16
    96b2:	4c e0       	ldi	r20, 0x0C	; 12
    96b4:	50 e0       	ldi	r21, 0x00	; 0
    96b6:	0e 94 56 aa 	call	0x154ac	; 0x154ac <__eerd_block_m128>
		if (strcmp(strReadEEPROM,strProductName)!=0)
    96ba:	c5 01       	movw	r24, r10
    96bc:	b6 01       	movw	r22, r12
    96be:	0e 94 05 a8 	call	0x1500a	; 0x1500a <strcmp>
    96c2:	00 97       	sbiw	r24, 0x00	; 0
    96c4:	31 f0       	breq	.+12     	; 0x96d2 <procMessage11+0x13a>
		    eeprom_write_block((const void*) &strProductName, (void*) &DefProductName[i], 12);
    96c6:	c6 01       	movw	r24, r12
    96c8:	b8 01       	movw	r22, r16
    96ca:	4c e0       	ldi	r20, 0x0C	; 12
    96cc:	50 e0       	ldi	r21, 0x00	; 0
    96ce:	0e 94 6e aa 	call	0x154dc	; 0x154dc <__eewr_block_m128>
    96d2:	8c e0       	ldi	r24, 0x0C	; 12
    96d4:	90 e0       	ldi	r25, 0x00	; 0
    96d6:	e8 0e       	add	r14, r24
    96d8:	f9 1e       	adc	r15, r25
    96da:	03 5f       	subi	r16, 0xF3	; 243
    96dc:	1f 4f       	sbci	r17, 0xFF	; 255
     eeprom_write_block((const void*) &buffHeader, (void*) &DefHeaderFooter[8], 40);
     StrPosCopy(rcv_trans,buffHeader,422,40);
     eeprom_write_block((const void*) &buffHeader, (void*) &DefHeaderFooter[9], 40);
	 */
	 //ProductName
	 for(i=0;i<6;i++){
    96de:	9e e2       	ldi	r25, 0x2E	; 46
    96e0:	e9 16       	cp	r14, r25
    96e2:	92 e0       	ldi	r25, 0x02	; 2
    96e4:	f9 06       	cpc	r15, r25
    96e6:	c1 f6       	brne	.-80     	; 0x9698 <procMessage11+0x100>
    96e8:	f6 e8       	ldi	r31, 0x86	; 134
    96ea:	ef 2e       	mov	r14, r31
    96ec:	f0 e0       	ldi	r31, 0x00	; 0
    96ee:	ff 2e       	mov	r15, r31
    96f0:	ee e2       	ldi	r30, 0x2E	; 46
    96f2:	ce 2e       	mov	r12, r30
    96f4:	e2 e0       	ldi	r30, 0x02	; 2
    96f6:	de 2e       	mov	r13, r30
		if (strcmp(strReadEEPROM,strProductName)!=0)
		    eeprom_write_block((const void*) &strProductName, (void*) &DefProductName[i], 12);
	 }
	 //ProductPrice
	 for(i=0;i<6;i++){
        StrPosCopy(rcv_trans,strProductPrice,(558+(i*8)),8);
    96f8:	8e 01       	movw	r16, r28
    96fa:	0f 5f       	subi	r16, 0xFF	; 255
    96fc:	1f 4f       	sbci	r17, 0xFF	; 255
		RemSpaceLag(strProductPrice);
		RemZeroLead(strProductPrice);
		RemDecimal(strProductPrice);

		eeprom_read_block((void*) &strReadEEPROM, (const void*) &DefProductPrice[i], 8);
    96fe:	7f e5       	ldi	r23, 0x5F	; 95
    9700:	a7 2e       	mov	r10, r23
    9702:	b1 2c       	mov	r11, r1
    9704:	ac 0e       	add	r10, r28
    9706:	bd 1e       	adc	r11, r29
		if (strcmp(strReadEEPROM,strProductName)!=0)
		    eeprom_write_block((const void*) &strProductName, (void*) &DefProductName[i], 12);
	 }
	 //ProductPrice
	 for(i=0;i<6;i++){
        StrPosCopy(rcv_trans,strProductPrice,(558+(i*8)),8);
    9708:	81 e0       	ldi	r24, 0x01	; 1
    970a:	9a e0       	ldi	r25, 0x0A	; 10
    970c:	b8 01       	movw	r22, r16
    970e:	a6 01       	movw	r20, r12
    9710:	28 e0       	ldi	r18, 0x08	; 8
    9712:	30 e0       	ldi	r19, 0x00	; 0
    9714:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
		RemSpaceLag(strProductPrice);
    9718:	c8 01       	movw	r24, r16
    971a:	0e 94 f7 38 	call	0x71ee	; 0x71ee <RemSpaceLag>
		RemZeroLead(strProductPrice);
    971e:	c8 01       	movw	r24, r16
    9720:	0e 94 93 39 	call	0x7326	; 0x7326 <RemZeroLead>
		RemDecimal(strProductPrice);
    9724:	c8 01       	movw	r24, r16
    9726:	0e 94 67 4a 	call	0x94ce	; 0x94ce <RemDecimal>

		eeprom_read_block((void*) &strReadEEPROM, (const void*) &DefProductPrice[i], 8);
    972a:	c5 01       	movw	r24, r10
    972c:	b7 01       	movw	r22, r14
    972e:	48 e0       	ldi	r20, 0x08	; 8
    9730:	50 e0       	ldi	r21, 0x00	; 0
    9732:	0e 94 56 aa 	call	0x154ac	; 0x154ac <__eerd_block_m128>
		if (strcmp(strReadEEPROM,strProductPrice)!=0)
    9736:	c5 01       	movw	r24, r10
    9738:	b8 01       	movw	r22, r16
    973a:	0e 94 05 a8 	call	0x1500a	; 0x1500a <strcmp>
    973e:	00 97       	sbiw	r24, 0x00	; 0
    9740:	31 f0       	breq	.+12     	; 0x974e <procMessage11+0x1b6>
		    eeprom_write_block((const void*) &strProductPrice, (void*) &DefProductPrice[i], 8);
    9742:	c8 01       	movw	r24, r16
    9744:	b7 01       	movw	r22, r14
    9746:	48 e0       	ldi	r20, 0x08	; 8
    9748:	50 e0       	ldi	r21, 0x00	; 0
    974a:	0e 94 6e aa 	call	0x154dc	; 0x154dc <__eewr_block_m128>
    974e:	88 e0       	ldi	r24, 0x08	; 8
    9750:	90 e0       	ldi	r25, 0x00	; 0
    9752:	c8 0e       	add	r12, r24
    9754:	d9 1e       	adc	r13, r25
    9756:	89 e0       	ldi	r24, 0x09	; 9
    9758:	90 e0       	ldi	r25, 0x00	; 0
    975a:	e8 0e       	add	r14, r24
    975c:	f9 1e       	adc	r15, r25
		eeprom_read_block((void*) &strReadEEPROM, (const void*) &DefProductName[i],12);
		if (strcmp(strReadEEPROM,strProductName)!=0)
		    eeprom_write_block((const void*) &strProductName, (void*) &DefProductName[i], 12);
	 }
	 //ProductPrice
	 for(i=0;i<6;i++){
    975e:	9e e5       	ldi	r25, 0x5E	; 94
    9760:	c9 16       	cp	r12, r25
    9762:	92 e0       	ldi	r25, 0x02	; 2
    9764:	d9 06       	cpc	r13, r25
    9766:	81 f6       	brne	.-96     	; 0x9708 <procMessage11+0x170>

		eeprom_read_block((void*) &strReadEEPROM, (const void*) &DefProductPrice[i], 8);
		if (strcmp(strReadEEPROM,strProductPrice)!=0)
		    eeprom_write_block((const void*) &strProductPrice, (void*) &DefProductPrice[i], 8);
	 }
}
    9768:	c0 57       	subi	r28, 0x70	; 112
    976a:	df 4f       	sbci	r29, 0xFF	; 255
    976c:	0f b6       	in	r0, 0x3f	; 63
    976e:	f8 94       	cli
    9770:	de bf       	out	0x3e, r29	; 62
    9772:	0f be       	out	0x3f, r0	; 63
    9774:	cd bf       	out	0x3d, r28	; 61
    9776:	cf 91       	pop	r28
    9778:	df 91       	pop	r29
    977a:	1f 91       	pop	r17
    977c:	0f 91       	pop	r16
    977e:	ff 90       	pop	r15
    9780:	ef 90       	pop	r14
    9782:	df 90       	pop	r13
    9784:	cf 90       	pop	r12
    9786:	bf 90       	pop	r11
    9788:	af 90       	pop	r10
    978a:	08 95       	ret

0000978c <InitializeConnection>:
void InitMemory(){
     PumpCountMax=eeprom_read_byte(&DefPoolingPumpMax);
	 ActivePump=eeprom_read_byte(&DefActivePump);
}

void InitializeConnection(){
    978c:	cf 92       	push	r12
    978e:	df 92       	push	r13
    9790:	ef 92       	push	r14
    9792:	ff 92       	push	r15
    9794:	0f 93       	push	r16
    9796:	1f 93       	push	r17
    9798:	df 93       	push	r29
    979a:	cf 93       	push	r28
    979c:	cd b7       	in	r28, 0x3d	; 61
    979e:	de b7       	in	r29, 0x3e	; 62
    97a0:	65 97       	sbiw	r28, 0x15	; 21
    97a2:	0f b6       	in	r0, 0x3f	; 63
    97a4:	f8 94       	cli
    97a6:	de bf       	out	0x3e, r29	; 62
    97a8:	0f be       	out	0x3f, r0	; 63
    97aa:	cd bf       	out	0x3d, r28	; 61
	unsigned int tConnect=0;
	char ForceType=IT_NONE,iCon=0,iTry=0,KeyPressed;
	char lcdteks[20];
	IFType=eeprom_read_byte(&DefInitIFT);
    97ac:	87 e3       	ldi	r24, 0x37	; 55
    97ae:	91 e0       	ldi	r25, 0x01	; 1
    97b0:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
    97b4:	08 2f       	mov	r16, r24
    97b6:	80 93 00 01 	sts	0x0100, r24
	DispenserBrand=eeprom_read_byte(&DefDispenserBrand);
    97ba:	88 e3       	ldi	r24, 0x38	; 56
    97bc:	91 e0       	ldi	r25, 0x01	; 1
    97be:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
    97c2:	80 93 3c 02 	sts	0x023C, r24

	//SendSlaveCommand(SC_STOP_POOL_SEQUENCE,0);

    //Send Msg10
	if  (IFType==IT_SLAVE){
    97c6:	01 30       	cpi	r16, 0x01	; 1
    97c8:	09 f0       	breq	.+2      	; 0x97cc <InitializeConnection+0x40>
    97ca:	63 c0       	rjmp	.+198    	; 0x9892 <InitializeConnection+0x106>
	     SendSlaveCommand(SC_SLAVE,ST_NONE);
    97cc:	81 e0       	ldi	r24, 0x01	; 1
    97ce:	60 e0       	ldi	r22, 0x00	; 0
    97d0:	0e 94 29 19 	call	0x3252	; 0x3252 <SendSlaveCommand>
		 char_count=0;
    97d4:	10 92 68 02 	sts	0x0268, r1
    97d8:	10 92 67 02 	sts	0x0267, r1
		 if (IsPowerOn==True){
    97dc:	80 91 9f 03 	lds	r24, 0x039F
    97e0:	81 30       	cpi	r24, 0x01	; 1
    97e2:	59 f4       	brne	.+22     	; 0x97fa <InitializeConnection+0x6e>
		     IsPowerOn=False;
    97e4:	10 92 9f 03 	sts	0x039F, r1
    97e8:	8f ef       	ldi	r24, 0xFF	; 255
    97ea:	99 e6       	ldi	r25, 0x69	; 105
    97ec:	a8 e1       	ldi	r26, 0x18	; 24
    97ee:	81 50       	subi	r24, 0x01	; 1
    97f0:	90 40       	sbci	r25, 0x00	; 0
    97f2:	a0 40       	sbci	r26, 0x00	; 0
    97f4:	e1 f7       	brne	.-8      	; 0x97ee <InitializeConnection+0x62>
    97f6:	00 c0       	rjmp	.+0      	; 0x97f8 <InitializeConnection+0x6c>
    97f8:	00 00       	nop
		     _delay_ms(8000);
			 }
         sendMessage10();
    97fa:	0e 94 9f 2b 	call	0x573e	; 0x573e <sendMessage10>
         sendMessage10();
    97fe:	0e 94 9f 2b 	call	0x573e	; 0x573e <sendMessage10>
         sendMessage10();
    9802:	0e 94 9f 2b 	call	0x573e	; 0x573e <sendMessage10>
         

         lcd_printf(4,1,PSTR("Connect         "));
    9806:	84 e0       	ldi	r24, 0x04	; 4
    9808:	61 e0       	ldi	r22, 0x01	; 1
    980a:	4d ea       	ldi	r20, 0xAD	; 173
    980c:	5e e1       	ldi	r21, 0x1E	; 30
    980e:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		 lcd_printf(4,1,PSTR("Connect"));
    9812:	84 e0       	ldi	r24, 0x04	; 4
    9814:	61 e0       	ldi	r22, 0x01	; 1
    9816:	45 ea       	ldi	r20, 0xA5	; 165
    9818:	5e e1       	ldi	r21, 0x1E	; 30
    981a:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		 //EstablishConnection TCP/IP
		 IsMessage11=False;
    981e:	10 92 7f 02 	sts	0x027F, r1
	 ActivePump=eeprom_read_byte(&DefActivePump);
}

void InitializeConnection(){
	unsigned int tConnect=0;
	char ForceType=IT_NONE,iCon=0,iTry=0,KeyPressed;
    9822:	dd 24       	eor	r13, r13
    9824:	20 e0       	ldi	r18, 0x00	; 0
     PumpCountMax=eeprom_read_byte(&DefPoolingPumpMax);
	 ActivePump=eeprom_read_byte(&DefActivePump);
}

void InitializeConnection(){
	unsigned int tConnect=0;
    9826:	00 e0       	ldi	r16, 0x00	; 0
    9828:	10 e0       	ldi	r17, 0x00	; 0
		  //SlaveIdentification		  
		 while (IsMessage11==False){
		        lcd_put(4,(8+iCon),'.');
                tConnect++;
				__key_lgtcnt=0;
			    if ((tConnect%200)==0)iCon++;
    982a:	78 ec       	ldi	r23, 0xC8	; 200
    982c:	e7 2e       	mov	r14, r23
    982e:	f1 2c       	mov	r15, r1
         lcd_printf(4,1,PSTR("Connect         "));
		 lcd_printf(4,1,PSTR("Connect"));
		 //EstablishConnection TCP/IP
		 IsMessage11=False;
		  //SlaveIdentification		  
		 while (IsMessage11==False){
    9830:	2c c0       	rjmp	.+88     	; 0x988a <InitializeConnection+0xfe>
		        lcd_put(4,(8+iCon),'.');
    9832:	62 2f       	mov	r22, r18
    9834:	68 5f       	subi	r22, 0xF8	; 248
    9836:	84 e0       	ldi	r24, 0x04	; 4
    9838:	4e e2       	ldi	r20, 0x2E	; 46
    983a:	2d 8b       	std	Y+21, r18	; 0x15
    983c:	0e 94 c1 a2 	call	0x14582	; 0x14582 <lcd_put>
                tConnect++;
    9840:	0f 5f       	subi	r16, 0xFF	; 255
    9842:	1f 4f       	sbci	r17, 0xFF	; 255
				__key_lgtcnt=0;
    9844:	10 92 92 03 	sts	0x0392, r1
			    if ((tConnect%200)==0)iCon++;
    9848:	c8 01       	movw	r24, r16
    984a:	b7 01       	movw	r22, r14
    984c:	0e 94 97 a7 	call	0x14f2e	; 0x14f2e <__udivmodhi4>
    9850:	2d 89       	ldd	r18, Y+21	; 0x15
    9852:	00 97       	sbiw	r24, 0x00	; 0
    9854:	09 f4       	brne	.+2      	; 0x9858 <InitializeConnection+0xcc>
    9856:	2f 5f       	subi	r18, 0xFF	; 255
			    if (iCon>8){
    9858:	29 30       	cpi	r18, 0x09	; 9
    985a:	70 f0       	brcs	.+28     	; 0x9878 <InitializeConnection+0xec>
			        lcd_printf(4,1,PSTR("Connect         "));
    985c:	84 e0       	ldi	r24, 0x04	; 4
    985e:	61 e0       	ldi	r22, 0x01	; 1
    9860:	44 e9       	ldi	r20, 0x94	; 148
    9862:	5e e1       	ldi	r21, 0x1E	; 30
    9864:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
					
				    sendMessage10();
    9868:	0e 94 9f 2b 	call	0x573e	; 0x573e <sendMessage10>
				    SendSlaveCommand(SC_SLAVE,ST_NONE);
    986c:	81 e0       	ldi	r24, 0x01	; 1
    986e:	60 e0       	ldi	r22, 0x00	; 0
    9870:	0e 94 29 19 	call	0x3252	; 0x3252 <SendSlaveCommand>
			        iCon=0;
				    iTry++;}
    9874:	d3 94       	inc	r13
			    if (iCon>8){
			        lcd_printf(4,1,PSTR("Connect         "));
					
				    sendMessage10();
				    SendSlaveCommand(SC_SLAVE,ST_NONE);
			        iCon=0;
    9876:	20 e0       	ldi	r18, 0x00	; 0
				    iTry++;}
			    if (iTry>3){
    9878:	9d 2d       	mov	r25, r13
    987a:	94 30       	cpi	r25, 0x04	; 4
    987c:	30 f0       	brcs	.+12     	; 0x988a <InitializeConnection+0xfe>
			        //IsErrorTCPIP=True;
				    IsAdvanzStartupInfo=False;		
    987e:	10 92 89 02 	sts	0x0289, r1
					IFType=IT_STANDALONE;
    9882:	82 e0       	ldi	r24, 0x02	; 2
    9884:	80 93 00 01 	sts	0x0100, r24
				    break;
    9888:	04 c0       	rjmp	.+8      	; 0x9892 <InitializeConnection+0x106>
         lcd_printf(4,1,PSTR("Connect         "));
		 lcd_printf(4,1,PSTR("Connect"));
		 //EstablishConnection TCP/IP
		 IsMessage11=False;
		  //SlaveIdentification		  
		 while (IsMessage11==False){
    988a:	80 91 7f 02 	lds	r24, 0x027F
    988e:	88 23       	and	r24, r24
    9890:	81 f2       	breq	.-96     	; 0x9832 <InitializeConnection+0xa6>

			    }
            }//EndWhile
		}

	if (IFType==IT_STANDALONE){
    9892:	80 91 00 01 	lds	r24, 0x0100
    9896:	82 30       	cpi	r24, 0x02	; 2
    9898:	09 f0       	breq	.+2      	; 0x989c <InitializeConnection+0x110>
    989a:	77 c0       	rjmp	.+238    	; 0x998a <InitializeConnection+0x1fe>
        IsStandAloneDetected=False;		
    989c:	10 92 7b 02 	sts	0x027B, r1
		SendSlaveCommand(SC_STANDALONE,DispenserBrand);
    98a0:	60 91 3c 02 	lds	r22, 0x023C
    98a4:	0e 94 29 19 	call	0x3252	; 0x3252 <SendSlaveCommand>
		tConnect=0,iCon=0,iTry=0;
	    lcd_clear();
    98a8:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
	    lcd_printf(1,1,PSTR("Scan Pump"));
    98ac:	81 e0       	ldi	r24, 0x01	; 1
    98ae:	61 e0       	ldi	r22, 0x01	; 1
    98b0:	4a e8       	ldi	r20, 0x8A	; 138
    98b2:	5e e1       	ldi	r21, 0x1E	; 30
    98b4:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		strcpy_P(lcdteks,(PGM_P)pgm_read_word(&(DefListDispenserName[eeprom_read_byte(&DefDispenserBrand)])));
    98b8:	88 e3       	ldi	r24, 0x38	; 56
    98ba:	91 e0       	ldi	r25, 0x01	; 1
    98bc:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
    98c0:	90 e0       	ldi	r25, 0x00	; 0
    98c2:	88 0f       	add	r24, r24
    98c4:	99 1f       	adc	r25, r25
    98c6:	87 53       	subi	r24, 0x37	; 55
    98c8:	9d 4f       	sbci	r25, 0xFD	; 253
    98ca:	fc 01       	movw	r30, r24
    98cc:	25 91       	lpm	r18, Z+
    98ce:	34 91       	lpm	r19, Z+
    98d0:	8e 01       	movw	r16, r28
    98d2:	0f 5f       	subi	r16, 0xFF	; 255
    98d4:	1f 4f       	sbci	r17, 0xFF	; 255
    98d6:	c8 01       	movw	r24, r16
    98d8:	b9 01       	movw	r22, r18
    98da:	0e 94 fe a7 	call	0x14ffc	; 0x14ffc <strcpy_P>
		sprintf_P(lcdteks,PSTR("%s"),lcdteks);
    98de:	00 d0       	rcall	.+0      	; 0x98e0 <InitializeConnection+0x154>
    98e0:	00 d0       	rcall	.+0      	; 0x98e2 <InitializeConnection+0x156>
    98e2:	00 d0       	rcall	.+0      	; 0x98e4 <InitializeConnection+0x158>
    98e4:	ed b7       	in	r30, 0x3d	; 61
    98e6:	fe b7       	in	r31, 0x3e	; 62
    98e8:	31 96       	adiw	r30, 0x01	; 1
    98ea:	ad b7       	in	r26, 0x3d	; 61
    98ec:	be b7       	in	r27, 0x3e	; 62
    98ee:	12 96       	adiw	r26, 0x02	; 2
    98f0:	1c 93       	st	X, r17
    98f2:	0e 93       	st	-X, r16
    98f4:	11 97       	sbiw	r26, 0x01	; 1
    98f6:	87 e8       	ldi	r24, 0x87	; 135
    98f8:	9e e1       	ldi	r25, 0x1E	; 30
    98fa:	93 83       	std	Z+3, r25	; 0x03
    98fc:	82 83       	std	Z+2, r24	; 0x02
    98fe:	15 83       	std	Z+5, r17	; 0x05
    9900:	04 83       	std	Z+4, r16	; 0x04
    9902:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	    lcd_print(2,1,lcdteks);
    9906:	8d b7       	in	r24, 0x3d	; 61
    9908:	9e b7       	in	r25, 0x3e	; 62
    990a:	06 96       	adiw	r24, 0x06	; 6
    990c:	0f b6       	in	r0, 0x3f	; 63
    990e:	f8 94       	cli
    9910:	9e bf       	out	0x3e, r25	; 62
    9912:	0f be       	out	0x3f, r0	; 63
    9914:	8d bf       	out	0x3d, r24	; 61
    9916:	82 e0       	ldi	r24, 0x02	; 2
    9918:	61 e0       	ldi	r22, 0x01	; 1
    991a:	a8 01       	movw	r20, r16
    991c:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
		}

	if (IFType==IT_STANDALONE){
        IsStandAloneDetected=False;		
		SendSlaveCommand(SC_STANDALONE,DispenserBrand);
		tConnect=0,iCon=0,iTry=0;
    9920:	cc 24       	eor	r12, r12
    9922:	dd 24       	eor	r13, r13
    9924:	00 e0       	ldi	r16, 0x00	; 0
    9926:	10 e0       	ldi	r17, 0x00	; 0
	    lcd_print(2,1,lcdteks);

	    while (IsStandAloneDetected==False){
		       lcd_put(4,(1+iCon),'.');
		       tConnect++;
		       if ((tConnect%100)==0)iCon++;
    9928:	54 e6       	ldi	r21, 0x64	; 100
    992a:	e5 2e       	mov	r14, r21
    992c:	f1 2c       	mov	r15, r1
	    lcd_printf(1,1,PSTR("Scan Pump"));
		strcpy_P(lcdteks,(PGM_P)pgm_read_word(&(DefListDispenserName[eeprom_read_byte(&DefDispenserBrand)])));
		sprintf_P(lcdteks,PSTR("%s"),lcdteks);
	    lcd_print(2,1,lcdteks);

	    while (IsStandAloneDetected==False){
    992e:	29 c0       	rjmp	.+82     	; 0x9982 <InitializeConnection+0x1f6>
		       lcd_put(4,(1+iCon),'.');
    9930:	2d 2d       	mov	r18, r13
    9932:	2f 5f       	subi	r18, 0xFF	; 255
    9934:	84 e0       	ldi	r24, 0x04	; 4
    9936:	62 2f       	mov	r22, r18
    9938:	4e e2       	ldi	r20, 0x2E	; 46
    993a:	2d 8b       	std	Y+21, r18	; 0x15
    993c:	0e 94 c1 a2 	call	0x14582	; 0x14582 <lcd_put>
		       tConnect++;
    9940:	0f 5f       	subi	r16, 0xFF	; 255
    9942:	1f 4f       	sbci	r17, 0xFF	; 255
		       if ((tConnect%100)==0)iCon++;
    9944:	c8 01       	movw	r24, r16
    9946:	b7 01       	movw	r22, r14
    9948:	0e 94 97 a7 	call	0x14f2e	; 0x14f2e <__udivmodhi4>
    994c:	2d 89       	ldd	r18, Y+21	; 0x15
    994e:	00 97       	sbiw	r24, 0x00	; 0
    9950:	09 f0       	breq	.+2      	; 0x9954 <InitializeConnection+0x1c8>
    9952:	2d 2d       	mov	r18, r13
		       if (iCon>16){
    9954:	21 31       	cpi	r18, 0x11	; 17
    9956:	88 f0       	brcs	.+34     	; 0x997a <InitializeConnection+0x1ee>
			       __key_lgtcnt=0;
    9958:	10 92 92 03 	sts	0x0392, r1
			       lcd_printf(4,1,PSTR("                   "));
    995c:	84 e0       	ldi	r24, 0x04	; 4
    995e:	61 e0       	ldi	r22, 0x01	; 1
    9960:	43 e7       	ldi	r20, 0x73	; 115
    9962:	5e e1       	ldi	r21, 0x1E	; 30
    9964:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
				   //IsStandaloneAcknoledge=False;
		           SendSlaveCommand(SC_STANDALONE,DispenserBrand);
    9968:	82 e0       	ldi	r24, 0x02	; 2
    996a:	60 91 3c 02 	lds	r22, 0x023C
    996e:	0e 94 29 19 	call	0x3252	; 0x3252 <SendSlaveCommand>
                   //InitStandalone();

			       DisplayPumpStatus();
    9972:	0e 94 dc 43 	call	0x87b8	; 0x87b8 <DisplayPumpStatus>
			       iCon=0;
			       iTry++;}
    9976:	c3 94       	inc	r12
				   //IsStandaloneAcknoledge=False;
		           SendSlaveCommand(SC_STANDALONE,DispenserBrand);
                   //InitStandalone();

			       DisplayPumpStatus();
			       iCon=0;
    9978:	20 e0       	ldi	r18, 0x00	; 0
			       iTry++;}
		           if (iTry>3) break; 
    997a:	9c 2d       	mov	r25, r12
    997c:	94 30       	cpi	r25, 0x04	; 4
    997e:	28 f4       	brcc	.+10     	; 0x998a <InitializeConnection+0x1fe>
    9980:	d2 2e       	mov	r13, r18
	    lcd_printf(1,1,PSTR("Scan Pump"));
		strcpy_P(lcdteks,(PGM_P)pgm_read_word(&(DefListDispenserName[eeprom_read_byte(&DefDispenserBrand)])));
		sprintf_P(lcdteks,PSTR("%s"),lcdteks);
	    lcd_print(2,1,lcdteks);

	    while (IsStandAloneDetected==False){
    9982:	80 91 7b 02 	lds	r24, 0x027B
    9986:	88 23       	and	r24, r24
    9988:	99 f2       	breq	.-90     	; 0x9930 <InitializeConnection+0x1a4>
			       iCon=0;
			       iTry++;}
		           if (iTry>3) break; 
	    }
	}//EndIf
	if(IsMessage11==True){
    998a:	00 91 7f 02 	lds	r16, 0x027F
    998e:	01 30       	cpi	r16, 0x01	; 1
    9990:	d1 f4       	brne	.+52     	; 0x99c6 <InitializeConnection+0x23a>
	   lcd_printf(4,1,PSTR("Connected           "));
    9992:	84 e0       	ldi	r24, 0x04	; 4
    9994:	61 e0       	ldi	r22, 0x01	; 1
    9996:	4e e5       	ldi	r20, 0x5E	; 94
    9998:	5e e1       	ldi	r21, 0x1E	; 30
    999a:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
	   eeprom_write_byte(&DefInitIFT,IT_SLAVE);
    999e:	87 e3       	ldi	r24, 0x37	; 55
    99a0:	91 e0       	ldi	r25, 0x01	; 1
    99a2:	61 e0       	ldi	r22, 0x01	; 1
    99a4:	0e 94 78 aa 	call	0x154f0	; 0x154f0 <__eewr_byte_m128>
	   IFType=IT_SLAVE;
    99a8:	00 93 00 01 	sts	0x0100, r16
    99ac:	8f eb       	ldi	r24, 0xBF	; 191
    99ae:	97 e2       	ldi	r25, 0x27	; 39
    99b0:	a9 e0       	ldi	r26, 0x09	; 9
    99b2:	81 50       	subi	r24, 0x01	; 1
    99b4:	90 40       	sbci	r25, 0x00	; 0
    99b6:	a0 40       	sbci	r26, 0x00	; 0
    99b8:	e1 f7       	brne	.-8      	; 0x99b2 <InitializeConnection+0x226>
    99ba:	00 c0       	rjmp	.+0      	; 0x99bc <InitializeConnection+0x230>
    99bc:	00 00       	nop
	   _delay_ms(3000);
	   //IsErrorTCPIP=False;
	   procMessage11();
    99be:	0e 94 cc 4a 	call	0x9598	; 0x9598 <procMessage11>
	   IsAdvanzStartupInfo=True;
    99c2:	00 93 89 02 	sts	0x0289, r16
	}
	if(IsStandAloneDetected==True){
    99c6:	80 91 7b 02 	lds	r24, 0x027B
    99ca:	81 30       	cpi	r24, 0x01	; 1
    99cc:	71 f4       	brne	.+28     	; 0x99ea <InitializeConnection+0x25e>
	   lcd_printf(4,1,PSTR("PumpFound"));
    99ce:	84 e0       	ldi	r24, 0x04	; 4
    99d0:	61 e0       	ldi	r22, 0x01	; 1
    99d2:	44 e5       	ldi	r20, 0x54	; 84
    99d4:	5e e1       	ldi	r21, 0x1E	; 30
    99d6:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
	   eeprom_write_byte(&DefInitIFT,IT_STANDALONE);
    99da:	87 e3       	ldi	r24, 0x37	; 55
    99dc:	91 e0       	ldi	r25, 0x01	; 1
    99de:	62 e0       	ldi	r22, 0x02	; 2
    99e0:	0e 94 78 aa 	call	0x154f0	; 0x154f0 <__eewr_byte_m128>
	   IFType=IT_STANDALONE;
    99e4:	82 e0       	ldi	r24, 0x02	; 2
    99e6:	80 93 00 01 	sts	0x0100, r24
	}
	//PrintStatus
	if (eeprom_read_byte(&DefPrintInitialize)==True)GeneratePrintInit();
    99ea:	86 e3       	ldi	r24, 0x36	; 54
    99ec:	91 e0       	ldi	r25, 0x01	; 1
    99ee:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
    99f2:	81 30       	cpi	r24, 0x01	; 1
    99f4:	11 f4       	brne	.+4      	; 0x99fa <InitializeConnection+0x26e>
    99f6:	0e 94 89 17 	call	0x2f12	; 0x2f12 <GeneratePrintInit>
	if ((IsStandAloneDetected==False)&&(IsMessage11==False)){		
    99fa:	80 91 7b 02 	lds	r24, 0x027B
    99fe:	88 23       	and	r24, r24
    9a00:	89 f5       	brne	.+98     	; 0x9a64 <InitializeConnection+0x2d8>
    9a02:	80 91 7f 02 	lds	r24, 0x027F
    9a06:	88 23       	and	r24, r24
    9a08:	69 f5       	brne	.+90     	; 0x9a64 <InitializeConnection+0x2d8>
		 lcd_printf(2,1,PSTR("TCP/IP Error"));
    9a0a:	82 e0       	ldi	r24, 0x02	; 2
    9a0c:	61 e0       	ldi	r22, 0x01	; 1
    9a0e:	47 e4       	ldi	r20, 0x47	; 71
    9a10:	5e e1       	ldi	r21, 0x1E	; 30
    9a12:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		 lcd_printf(3,1,PSTR("No Pump Found"));
    9a16:	83 e0       	ldi	r24, 0x03	; 3
    9a18:	61 e0       	ldi	r22, 0x01	; 1
    9a1a:	49 e3       	ldi	r20, 0x39	; 57
    9a1c:	5e e1       	ldi	r21, 0x1E	; 30
    9a1e:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
    9a22:	8f e7       	ldi	r24, 0x7F	; 127
    9a24:	9a e1       	ldi	r25, 0x1A	; 26
    9a26:	a6 e0       	ldi	r26, 0x06	; 6
    9a28:	81 50       	subi	r24, 0x01	; 1
    9a2a:	90 40       	sbci	r25, 0x00	; 0
    9a2c:	a0 40       	sbci	r26, 0x00	; 0
    9a2e:	e1 f7       	brne	.-8      	; 0x9a28 <InitializeConnection+0x29c>
    9a30:	00 c0       	rjmp	.+0      	; 0x9a32 <InitializeConnection+0x2a6>
    9a32:	00 00       	nop
		 _delay_ms(2000);
		 ForceType=systemForceType();
    9a34:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <systemForceType>
		 if (ForceType=='1'){
    9a38:	81 33       	cpi	r24, 0x31	; 49
    9a3a:	29 f4       	brne	.+10     	; 0x9a46 <InitializeConnection+0x2ba>
		     IFType=IT_SLAVE;
    9a3c:	81 e0       	ldi	r24, 0x01	; 1
    9a3e:	80 93 00 01 	sts	0x0100, r24
			 SendSlaveCommand(SC_SLAVE,ST_NONE);
    9a42:	60 e0       	ldi	r22, 0x00	; 0
    9a44:	07 c0       	rjmp	.+14     	; 0x9a54 <InitializeConnection+0x2c8>
         }
		 else
		 if (ForceType=='2'){
    9a46:	82 33       	cpi	r24, 0x32	; 50
    9a48:	39 f4       	brne	.+14     	; 0x9a58 <InitializeConnection+0x2cc>
		     IFType=IT_STANDALONE;
    9a4a:	82 e0       	ldi	r24, 0x02	; 2
    9a4c:	80 93 00 01 	sts	0x0100, r24
			 SendSlaveCommand(SC_STANDALONE,DispenserBrand);
    9a50:	60 91 3c 02 	lds	r22, 0x023C
    9a54:	0e 94 29 19 	call	0x3252	; 0x3252 <SendSlaveCommand>

			 //SendPoolingCommand(SC_SET_POOLING_MAX_PUMP,eeprom_read_byte(&DefPoolingPumpMax));

			 //InitStandalone();
         }
		 eeprom_write_byte(&DefInitIFT,IFType);
    9a58:	87 e3       	ldi	r24, 0x37	; 55
    9a5a:	91 e0       	ldi	r25, 0x01	; 1
    9a5c:	60 91 00 01 	lds	r22, 0x0100
    9a60:	0e 94 78 aa 	call	0x154f0	; 0x154f0 <__eewr_byte_m128>
	}
	InitMemory();
    9a64:	0e 94 0f 18 	call	0x301e	; 0x301e <InitMemory>
	//SendSlaveCommand(SC_START_POOL_SEQUENCE,0);
	
}
    9a68:	65 96       	adiw	r28, 0x15	; 21
    9a6a:	0f b6       	in	r0, 0x3f	; 63
    9a6c:	f8 94       	cli
    9a6e:	de bf       	out	0x3e, r29	; 62
    9a70:	0f be       	out	0x3f, r0	; 63
    9a72:	cd bf       	out	0x3d, r28	; 61
    9a74:	cf 91       	pop	r28
    9a76:	df 91       	pop	r29
    9a78:	1f 91       	pop	r17
    9a7a:	0f 91       	pop	r16
    9a7c:	ff 90       	pop	r15
    9a7e:	ef 90       	pop	r14
    9a80:	df 90       	pop	r13
    9a82:	cf 90       	pop	r12
    9a84:	08 95       	ret

00009a86 <FMenuSettingFooter>:
	 }
   //_menu_header();   
   return Result;
}

char FMenuSettingFooter(){
    9a86:	ef 92       	push	r14
    9a88:	0f 93       	push	r16
    9a8a:	1f 93       	push	r17
    9a8c:	df 93       	push	r29
    9a8e:	cf 93       	push	r28
    9a90:	cd b7       	in	r28, 0x3d	; 61
    9a92:	de b7       	in	r29, 0x3e	; 62
    9a94:	c6 54       	subi	r28, 0x46	; 70
    9a96:	d0 40       	sbci	r29, 0x00	; 0
    9a98:	0f b6       	in	r0, 0x3f	; 63
    9a9a:	f8 94       	cli
    9a9c:	de bf       	out	0x3e, r29	; 62
    9a9e:	0f be       	out	0x3f, r0	; 63
    9aa0:	cd bf       	out	0x3d, r28	; 61
	 char strHeaderFooter[50];
	 char KeyChar;
	 
	 Result=MENU_NONE;
     
	 switch (stSettingHeader){
    9aa2:	80 91 23 03 	lds	r24, 0x0323
    9aa6:	84 30       	cpi	r24, 0x04	; 4
    9aa8:	09 f4       	brne	.+2      	; 0x9aac <FMenuSettingFooter+0x26>
    9aaa:	27 c1       	rjmp	.+590    	; 0x9cfa <FMenuSettingFooter+0x274>
    9aac:	85 30       	cpi	r24, 0x05	; 5
    9aae:	40 f4       	brcc	.+16     	; 0x9ac0 <FMenuSettingFooter+0x3a>
    9ab0:	81 30       	cpi	r24, 0x01	; 1
    9ab2:	79 f1       	breq	.+94     	; 0x9b12 <FMenuSettingFooter+0x8c>
    9ab4:	81 30       	cpi	r24, 0x01	; 1
    9ab6:	88 f0       	brcs	.+34     	; 0x9ada <FMenuSettingFooter+0x54>
    9ab8:	82 30       	cpi	r24, 0x02	; 2
    9aba:	09 f0       	breq	.+2      	; 0x9abe <FMenuSettingFooter+0x38>
    9abc:	68 c1       	rjmp	.+720    	; 0x9d8e <FMenuSettingFooter+0x308>
    9abe:	72 c0       	rjmp	.+228    	; 0x9ba4 <FMenuSettingFooter+0x11e>
    9ac0:	86 30       	cpi	r24, 0x06	; 6
    9ac2:	09 f4       	brne	.+2      	; 0x9ac6 <FMenuSettingFooter+0x40>
    9ac4:	c8 c0       	rjmp	.+400    	; 0x9c56 <FMenuSettingFooter+0x1d0>
    9ac6:	86 30       	cpi	r24, 0x06	; 6
    9ac8:	08 f4       	brcc	.+2      	; 0x9acc <FMenuSettingFooter+0x46>
    9aca:	b2 c0       	rjmp	.+356    	; 0x9c30 <FMenuSettingFooter+0x1aa>
    9acc:	87 30       	cpi	r24, 0x07	; 7
    9ace:	09 f4       	brne	.+2      	; 0x9ad2 <FMenuSettingFooter+0x4c>
    9ad0:	22 c1       	rjmp	.+580    	; 0x9d16 <FMenuSettingFooter+0x290>
    9ad2:	88 30       	cpi	r24, 0x08	; 8
    9ad4:	09 f0       	breq	.+2      	; 0x9ad8 <FMenuSettingFooter+0x52>
    9ad6:	5b c1       	rjmp	.+694    	; 0x9d8e <FMenuSettingFooter+0x308>
    9ad8:	56 c1       	rjmp	.+684    	; 0x9d86 <FMenuSettingFooter+0x300>
	 case shInitHeader:
	      lcd_clear();
    9ada:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
		  lcd_printf(1,1,PSTR("1)Footer1  3)Footer3"));
    9ade:	81 e0       	ldi	r24, 0x01	; 1
    9ae0:	61 e0       	ldi	r22, 0x01	; 1
    9ae2:	41 e6       	ldi	r20, 0x61	; 97
    9ae4:	55 e1       	ldi	r21, 0x15	; 21
    9ae6:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  lcd_printf(2,1,PSTR("2)Footer2  4)Footer4"));
    9aea:	82 e0       	ldi	r24, 0x02	; 2
    9aec:	61 e0       	ldi	r22, 0x01	; 1
    9aee:	4c e4       	ldi	r20, 0x4C	; 76
    9af0:	55 e1       	ldi	r21, 0x15	; 21
    9af2:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  lcd_printf(3,1,PSTR("                    "));
    9af6:	83 e0       	ldi	r24, 0x03	; 3
    9af8:	61 e0       	ldi	r22, 0x01	; 1
    9afa:	47 e3       	ldi	r20, 0x37	; 55
    9afc:	55 e1       	ldi	r21, 0x15	; 21
    9afe:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  lcd_printf(4,1,PSTR("*)Exit              "));
    9b02:	84 e0       	ldi	r24, 0x04	; 4
    9b04:	61 e0       	ldi	r22, 0x01	; 1
    9b06:	42 e2       	ldi	r20, 0x22	; 34
    9b08:	55 e1       	ldi	r21, 0x15	; 21
    9b0a:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  stSettingHeader=shHeaderSelect;
    9b0e:	81 e0       	ldi	r24, 0x01	; 1
    9b10:	fc c0       	rjmp	.+504    	; 0x9d0a <FMenuSettingFooter+0x284>
	      break;
      case shHeaderSelect:
	      KeyChar=_key_btn(_key_scan(1));
    9b12:	81 e0       	ldi	r24, 0x01	; 1
    9b14:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <_key_scan>
    9b18:	0e 94 49 a3 	call	0x14692	; 0x14692 <_key_btn>
		  if ((KeyChar>='1')&&(KeyChar<='6')){
    9b1c:	98 2f       	mov	r25, r24
    9b1e:	91 53       	subi	r25, 0x31	; 49
    9b20:	96 30       	cpi	r25, 0x06	; 6
    9b22:	d8 f5       	brcc	.+118    	; 0x9b9a <FMenuSettingFooter+0x114>
		       HeaderIdx=KeyChar-'1';//
    9b24:	90 93 22 03 	sts	0x0322, r25
			   lcd_clear();
    9b28:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
			   sprintf_P(lcdteks,PSTR("Edit Footer%d "),HeaderIdx+1);
    9b2c:	00 d0       	rcall	.+0      	; 0x9b2e <FMenuSettingFooter+0xa8>
    9b2e:	00 d0       	rcall	.+0      	; 0x9b30 <FMenuSettingFooter+0xaa>
    9b30:	00 d0       	rcall	.+0      	; 0x9b32 <FMenuSettingFooter+0xac>
    9b32:	ed b7       	in	r30, 0x3d	; 61
    9b34:	fe b7       	in	r31, 0x3e	; 62
    9b36:	31 96       	adiw	r30, 0x01	; 1
    9b38:	8e 01       	movw	r16, r28
    9b3a:	0f 5f       	subi	r16, 0xFF	; 255
    9b3c:	1f 4f       	sbci	r17, 0xFF	; 255
    9b3e:	ad b7       	in	r26, 0x3d	; 61
    9b40:	be b7       	in	r27, 0x3e	; 62
    9b42:	12 96       	adiw	r26, 0x02	; 2
    9b44:	1c 93       	st	X, r17
    9b46:	0e 93       	st	-X, r16
    9b48:	11 97       	sbiw	r26, 0x01	; 1
    9b4a:	83 e1       	ldi	r24, 0x13	; 19
    9b4c:	95 e1       	ldi	r25, 0x15	; 21
    9b4e:	93 83       	std	Z+3, r25	; 0x03
    9b50:	82 83       	std	Z+2, r24	; 0x02
    9b52:	80 91 22 03 	lds	r24, 0x0322
    9b56:	90 e0       	ldi	r25, 0x00	; 0
    9b58:	01 96       	adiw	r24, 0x01	; 1
    9b5a:	95 83       	std	Z+5, r25	; 0x05
    9b5c:	84 83       	std	Z+4, r24	; 0x04
    9b5e:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
			   lcd_print(1,1,lcdteks);
    9b62:	8d b7       	in	r24, 0x3d	; 61
    9b64:	9e b7       	in	r25, 0x3e	; 62
    9b66:	06 96       	adiw	r24, 0x06	; 6
    9b68:	0f b6       	in	r0, 0x3f	; 63
    9b6a:	f8 94       	cli
    9b6c:	9e bf       	out	0x3e, r25	; 62
    9b6e:	0f be       	out	0x3f, r0	; 63
    9b70:	8d bf       	out	0x3d, r24	; 61
    9b72:	81 e0       	ldi	r24, 0x01	; 1
    9b74:	61 e0       	ldi	r22, 0x01	; 1
    9b76:	a8 01       	movw	r20, r16
    9b78:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
			   lcd_printf(4,1,PSTR("[*]Back  [#]OK"));
    9b7c:	84 e0       	ldi	r24, 0x04	; 4
    9b7e:	61 e0       	ldi	r22, 0x01	; 1
    9b80:	44 e0       	ldi	r20, 0x04	; 4
    9b82:	55 e1       	ldi	r21, 0x15	; 21
    9b84:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
			   FillChar(PrintBuffer,sizeof(PrintBuffer),0);
    9b88:	80 ed       	ldi	r24, 0xD0	; 208
    9b8a:	94 e0       	ldi	r25, 0x04	; 4
    9b8c:	61 e9       	ldi	r22, 0x91	; 145
    9b8e:	71 e0       	ldi	r23, 0x01	; 1
    9b90:	40 e0       	ldi	r20, 0x00	; 0
    9b92:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>
			   stSettingHeader=shEditHeader1;
    9b96:	82 e0       	ldi	r24, 0x02	; 2
    9b98:	b8 c0       	rjmp	.+368    	; 0x9d0a <FMenuSettingFooter+0x284>
		  }
		  if(KeyChar=='*')stSettingHeader=shExitSettingHeader;
    9b9a:	8a 32       	cpi	r24, 0x2A	; 42
    9b9c:	09 f0       	breq	.+2      	; 0x9ba0 <FMenuSettingFooter+0x11a>
    9b9e:	f7 c0       	rjmp	.+494    	; 0x9d8e <FMenuSettingFooter+0x308>
    9ba0:	88 e0       	ldi	r24, 0x08	; 8
    9ba2:	b3 c0       	rjmp	.+358    	; 0x9d0a <FMenuSettingFooter+0x284>
	      break;
     case shEditHeader1:
          //uiResult=UserInput(UI_ALPHANUM_R,2,1,strFreeMessageLine1,0,20);
		  uiResult=UserInput(UI_ALPHANUM_R,2,1,PrintBuffer,0,40);
    9ba4:	83 e0       	ldi	r24, 0x03	; 3
    9ba6:	62 e0       	ldi	r22, 0x02	; 2
    9ba8:	41 e0       	ldi	r20, 0x01	; 1
    9baa:	20 ed       	ldi	r18, 0xD0	; 208
    9bac:	34 e0       	ldi	r19, 0x04	; 4
    9bae:	00 e0       	ldi	r16, 0x00	; 0
    9bb0:	10 e0       	ldi	r17, 0x00	; 0
    9bb2:	e8 e2       	ldi	r30, 0x28	; 40
    9bb4:	ee 2e       	mov	r14, r30
    9bb6:	0e 94 d3 39 	call	0x73a6	; 0x73a6 <UserInput>
		  if (uiResult==USER_OK){
    9bba:	83 30       	cpi	r24, 0x03	; 3
    9bbc:	a9 f5       	brne	.+106    	; 0x9c28 <FMenuSettingFooter+0x1a2>
			  lcd_clear();
    9bbe:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
			  AddSpaceLag(PrintBuffer,40);
    9bc2:	80 ed       	ldi	r24, 0xD0	; 208
    9bc4:	94 e0       	ldi	r25, 0x04	; 4
    9bc6:	68 e2       	ldi	r22, 0x28	; 40
    9bc8:	0e 94 7d 27 	call	0x4efa	; 0x4efa <AddSpaceLag>
			  StrPosCopy(PrintBuffer,strFreeMessageLine1,0,20);
    9bcc:	80 ed       	ldi	r24, 0xD0	; 208
    9bce:	94 e0       	ldi	r25, 0x04	; 4
    9bd0:	66 e7       	ldi	r22, 0x76	; 118
    9bd2:	79 e0       	ldi	r23, 0x09	; 9
    9bd4:	40 e0       	ldi	r20, 0x00	; 0
    9bd6:	50 e0       	ldi	r21, 0x00	; 0
    9bd8:	24 e1       	ldi	r18, 0x14	; 20
    9bda:	30 e0       	ldi	r19, 0x00	; 0
    9bdc:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
			  StrPosCopy(PrintBuffer,strFreeMessageLine2,20,20);
    9be0:	80 ed       	ldi	r24, 0xD0	; 208
    9be2:	94 e0       	ldi	r25, 0x04	; 4
    9be4:	67 e8       	ldi	r22, 0x87	; 135
    9be6:	78 e0       	ldi	r23, 0x08	; 8
    9be8:	44 e1       	ldi	r20, 0x14	; 20
    9bea:	50 e0       	ldi	r21, 0x00	; 0
    9bec:	24 e1       	ldi	r18, 0x14	; 20
    9bee:	30 e0       	ldi	r19, 0x00	; 0
    9bf0:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>

			  lcd_print(1,1,strFreeMessageLine1);			  
    9bf4:	81 e0       	ldi	r24, 0x01	; 1
    9bf6:	61 e0       	ldi	r22, 0x01	; 1
    9bf8:	46 e7       	ldi	r20, 0x76	; 118
    9bfa:	59 e0       	ldi	r21, 0x09	; 9
    9bfc:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
			  lcd_print(2,1,strFreeMessageLine2);			  
    9c00:	82 e0       	ldi	r24, 0x02	; 2
    9c02:	61 e0       	ldi	r22, 0x01	; 1
    9c04:	47 e8       	ldi	r20, 0x87	; 135
    9c06:	58 e0       	ldi	r21, 0x08	; 8
    9c08:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
			  
			  lcd_printf(3,1,PSTR("Align Center?"));
    9c0c:	83 e0       	ldi	r24, 0x03	; 3
    9c0e:	61 e0       	ldi	r22, 0x01	; 1
    9c10:	46 ef       	ldi	r20, 0xF6	; 246
    9c12:	54 e1       	ldi	r21, 0x14	; 20
    9c14:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
			  lcd_printf(4,1,PSTR("[*]No  [#]Yes"));
    9c18:	84 e0       	ldi	r24, 0x04	; 4
    9c1a:	61 e0       	ldi	r22, 0x01	; 1
    9c1c:	48 ee       	ldi	r20, 0xE8	; 232
    9c1e:	54 e1       	ldi	r21, 0x14	; 20
    9c20:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		      stSettingHeader=shIsAlignCenter;
    9c24:	85 e0       	ldi	r24, 0x05	; 5
    9c26:	71 c0       	rjmp	.+226    	; 0x9d0a <FMenuSettingFooter+0x284>
		  }
		  else
		  if (uiResult==USER_CANCEL)stSettingHeader=shInitHeader;
    9c28:	81 30       	cpi	r24, 0x01	; 1
    9c2a:	09 f0       	breq	.+2      	; 0x9c2e <FMenuSettingFooter+0x1a8>
    9c2c:	b0 c0       	rjmp	.+352    	; 0x9d8e <FMenuSettingFooter+0x308>
    9c2e:	a8 c0       	rjmp	.+336    	; 0x9d80 <FMenuSettingFooter+0x2fa>
	      break;
     case shIsAlignCenter:
	      KeyChar=_key_btn(_key_scan(1));
    9c30:	81 e0       	ldi	r24, 0x01	; 1
    9c32:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <_key_scan>
    9c36:	0e 94 49 a3 	call	0x14692	; 0x14692 <_key_btn>
          if(KeyChar=='#'){
    9c3a:	83 32       	cpi	r24, 0x23	; 35
    9c3c:	39 f4       	brne	.+14     	; 0x9c4c <FMenuSettingFooter+0x1c6>
		      //AlignCenter			  
			  StrAlignCenter(PrintBuffer,40);
    9c3e:	80 ed       	ldi	r24, 0xD0	; 208
    9c40:	94 e0       	ldi	r25, 0x04	; 4
    9c42:	68 e2       	ldi	r22, 0x28	; 40
    9c44:	70 e0       	ldi	r23, 0x00	; 0
    9c46:	0e 94 3c 3f 	call	0x7e78	; 0x7e78 <StrAlignCenter>
    9c4a:	03 c0       	rjmp	.+6      	; 0x9c52 <FMenuSettingFooter+0x1cc>
			  stSettingHeader=shIsSaveHeader;
		  } else if(KeyChar=='*')stSettingHeader=shIsSaveHeader;		 
    9c4c:	8a 32       	cpi	r24, 0x2A	; 42
    9c4e:	09 f0       	breq	.+2      	; 0x9c52 <FMenuSettingFooter+0x1cc>
    9c50:	9e c0       	rjmp	.+316    	; 0x9d8e <FMenuSettingFooter+0x308>
    9c52:	86 e0       	ldi	r24, 0x06	; 6
    9c54:	5a c0       	rjmp	.+180    	; 0x9d0a <FMenuSettingFooter+0x284>
	      break;
     case shIsSaveHeader:
	      lcd_clear(); 
    9c56:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
		  StrPosCopy(PrintBuffer,strFreeMessageLine1,0,20);
    9c5a:	80 ed       	ldi	r24, 0xD0	; 208
    9c5c:	94 e0       	ldi	r25, 0x04	; 4
    9c5e:	66 e7       	ldi	r22, 0x76	; 118
    9c60:	79 e0       	ldi	r23, 0x09	; 9
    9c62:	40 e0       	ldi	r20, 0x00	; 0
    9c64:	50 e0       	ldi	r21, 0x00	; 0
    9c66:	24 e1       	ldi	r18, 0x14	; 20
    9c68:	30 e0       	ldi	r19, 0x00	; 0
    9c6a:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
		  StrPosCopy(PrintBuffer,strFreeMessageLine2,20,20);
    9c6e:	80 ed       	ldi	r24, 0xD0	; 208
    9c70:	94 e0       	ldi	r25, 0x04	; 4
    9c72:	67 e8       	ldi	r22, 0x87	; 135
    9c74:	78 e0       	ldi	r23, 0x08	; 8
    9c76:	44 e1       	ldi	r20, 0x14	; 20
    9c78:	50 e0       	ldi	r21, 0x00	; 0
    9c7a:	24 e1       	ldi	r18, 0x14	; 20
    9c7c:	30 e0       	ldi	r19, 0x00	; 0
    9c7e:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
          lcd_print(1,1,strFreeMessageLine1);
    9c82:	81 e0       	ldi	r24, 0x01	; 1
    9c84:	61 e0       	ldi	r22, 0x01	; 1
    9c86:	46 e7       	ldi	r20, 0x76	; 118
    9c88:	59 e0       	ldi	r21, 0x09	; 9
    9c8a:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
		  lcd_print(2,1,strFreeMessageLine2);
    9c8e:	82 e0       	ldi	r24, 0x02	; 2
    9c90:	61 e0       	ldi	r22, 0x01	; 1
    9c92:	47 e8       	ldi	r20, 0x87	; 135
    9c94:	58 e0       	ldi	r21, 0x08	; 8
    9c96:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
		  sprintf_P(lcdteks,PSTR("Save Footer%d ?"),HeaderIdx+1);
    9c9a:	00 d0       	rcall	.+0      	; 0x9c9c <FMenuSettingFooter+0x216>
    9c9c:	00 d0       	rcall	.+0      	; 0x9c9e <FMenuSettingFooter+0x218>
    9c9e:	00 d0       	rcall	.+0      	; 0x9ca0 <FMenuSettingFooter+0x21a>
    9ca0:	ed b7       	in	r30, 0x3d	; 61
    9ca2:	fe b7       	in	r31, 0x3e	; 62
    9ca4:	31 96       	adiw	r30, 0x01	; 1
    9ca6:	8e 01       	movw	r16, r28
    9ca8:	0f 5f       	subi	r16, 0xFF	; 255
    9caa:	1f 4f       	sbci	r17, 0xFF	; 255
    9cac:	ad b7       	in	r26, 0x3d	; 61
    9cae:	be b7       	in	r27, 0x3e	; 62
    9cb0:	12 96       	adiw	r26, 0x02	; 2
    9cb2:	1c 93       	st	X, r17
    9cb4:	0e 93       	st	-X, r16
    9cb6:	11 97       	sbiw	r26, 0x01	; 1
    9cb8:	88 ed       	ldi	r24, 0xD8	; 216
    9cba:	94 e1       	ldi	r25, 0x14	; 20
    9cbc:	93 83       	std	Z+3, r25	; 0x03
    9cbe:	82 83       	std	Z+2, r24	; 0x02
    9cc0:	80 91 22 03 	lds	r24, 0x0322
    9cc4:	90 e0       	ldi	r25, 0x00	; 0
    9cc6:	01 96       	adiw	r24, 0x01	; 1
    9cc8:	95 83       	std	Z+5, r25	; 0x05
    9cca:	84 83       	std	Z+4, r24	; 0x04
    9ccc:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		  lcd_print(3,1,lcdteks);
    9cd0:	8d b7       	in	r24, 0x3d	; 61
    9cd2:	9e b7       	in	r25, 0x3e	; 62
    9cd4:	06 96       	adiw	r24, 0x06	; 6
    9cd6:	0f b6       	in	r0, 0x3f	; 63
    9cd8:	f8 94       	cli
    9cda:	9e bf       	out	0x3e, r25	; 62
    9cdc:	0f be       	out	0x3f, r0	; 63
    9cde:	8d bf       	out	0x3d, r24	; 61
    9ce0:	83 e0       	ldi	r24, 0x03	; 3
    9ce2:	61 e0       	ldi	r22, 0x01	; 1
    9ce4:	a8 01       	movw	r20, r16
    9ce6:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
		  lcd_printf(4,1,PSTR("[*]No [#]Yes"));		      
    9cea:	84 e0       	ldi	r24, 0x04	; 4
    9cec:	61 e0       	ldi	r22, 0x01	; 1
    9cee:	4b ec       	ldi	r20, 0xCB	; 203
    9cf0:	54 e1       	ldi	r21, 0x14	; 20
    9cf2:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
	      stSettingHeader=shSaveHeaderQuestions;      
    9cf6:	84 e0       	ldi	r24, 0x04	; 4
    9cf8:	08 c0       	rjmp	.+16     	; 0x9d0a <FMenuSettingFooter+0x284>
	      break;       
     case shSaveHeaderQuestions:
          KeyChar=_key_btn(_key_scan(1));
    9cfa:	81 e0       	ldi	r24, 0x01	; 1
    9cfc:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <_key_scan>
    9d00:	0e 94 49 a3 	call	0x14692	; 0x14692 <_key_btn>
	      if(KeyChar=='#')stSettingHeader=shSaveHeader;
    9d04:	83 32       	cpi	r24, 0x23	; 35
    9d06:	21 f4       	brne	.+8      	; 0x9d10 <FMenuSettingFooter+0x28a>
    9d08:	87 e0       	ldi	r24, 0x07	; 7
    9d0a:	80 93 23 03 	sts	0x0323, r24
    9d0e:	3f c0       	rjmp	.+126    	; 0x9d8e <FMenuSettingFooter+0x308>
		  else
          if(KeyChar=='*')stSettingHeader=shInitHeader;
    9d10:	8a 32       	cpi	r24, 0x2A	; 42
    9d12:	e9 f5       	brne	.+122    	; 0x9d8e <FMenuSettingFooter+0x308>
    9d14:	35 c0       	rjmp	.+106    	; 0x9d80 <FMenuSettingFooter+0x2fa>
	      break;
     case shSaveHeader:
	      sprintf_P(strHeaderFooter,PSTR("%s%s"),strFreeMessageLine1,strFreeMessageLine2);
    9d16:	ad b7       	in	r26, 0x3d	; 61
    9d18:	be b7       	in	r27, 0x3e	; 62
    9d1a:	18 97       	sbiw	r26, 0x08	; 8
    9d1c:	0f b6       	in	r0, 0x3f	; 63
    9d1e:	f8 94       	cli
    9d20:	be bf       	out	0x3e, r27	; 62
    9d22:	0f be       	out	0x3f, r0	; 63
    9d24:	ad bf       	out	0x3d, r26	; 61
    9d26:	ed b7       	in	r30, 0x3d	; 61
    9d28:	fe b7       	in	r31, 0x3e	; 62
    9d2a:	31 96       	adiw	r30, 0x01	; 1
    9d2c:	8e 01       	movw	r16, r28
    9d2e:	0b 5e       	subi	r16, 0xEB	; 235
    9d30:	1f 4f       	sbci	r17, 0xFF	; 255
    9d32:	12 96       	adiw	r26, 0x02	; 2
    9d34:	1c 93       	st	X, r17
    9d36:	0e 93       	st	-X, r16
    9d38:	11 97       	sbiw	r26, 0x01	; 1
    9d3a:	86 ec       	ldi	r24, 0xC6	; 198
    9d3c:	94 e1       	ldi	r25, 0x14	; 20
    9d3e:	93 83       	std	Z+3, r25	; 0x03
    9d40:	82 83       	std	Z+2, r24	; 0x02
    9d42:	86 e7       	ldi	r24, 0x76	; 118
    9d44:	99 e0       	ldi	r25, 0x09	; 9
    9d46:	95 83       	std	Z+5, r25	; 0x05
    9d48:	84 83       	std	Z+4, r24	; 0x04
    9d4a:	87 e8       	ldi	r24, 0x87	; 135
    9d4c:	98 e0       	ldi	r25, 0x08	; 8
    9d4e:	97 83       	std	Z+7, r25	; 0x07
    9d50:	86 83       	std	Z+6, r24	; 0x06
    9d52:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	      eeprom_write_block((const void*) &strHeaderFooter, (void*) &DefHeaderFooter[HeaderIdx+6],40);
    9d56:	8d b7       	in	r24, 0x3d	; 61
    9d58:	9e b7       	in	r25, 0x3e	; 62
    9d5a:	08 96       	adiw	r24, 0x08	; 8
    9d5c:	0f b6       	in	r0, 0x3f	; 63
    9d5e:	f8 94       	cli
    9d60:	9e bf       	out	0x3e, r25	; 62
    9d62:	0f be       	out	0x3f, r0	; 63
    9d64:	8d bf       	out	0x3d, r24	; 61
    9d66:	60 91 22 03 	lds	r22, 0x0322
    9d6a:	89 e2       	ldi	r24, 0x29	; 41
    9d6c:	68 9f       	mul	r22, r24
    9d6e:	b0 01       	movw	r22, r0
    9d70:	11 24       	eor	r1, r1
    9d72:	62 5e       	subi	r22, 0xE2	; 226
    9d74:	7c 4f       	sbci	r23, 0xFC	; 252
    9d76:	c8 01       	movw	r24, r16
    9d78:	48 e2       	ldi	r20, 0x28	; 40
    9d7a:	50 e0       	ldi	r21, 0x00	; 0
    9d7c:	0e 94 6e aa 	call	0x154dc	; 0x154dc <__eewr_block_m128>
		  //eeprom_write_block((const void*) &PrintBuffer, (void*) &DefHeaderFooter[HeaderIdx+6],40);

          stSettingHeader=shInitHeader;
    9d80:	10 92 23 03 	sts	0x0323, r1
    9d84:	04 c0       	rjmp	.+8      	; 0x9d8e <FMenuSettingFooter+0x308>
	      break;
     case shExitSettingHeader:
          stSettingHeader=shInitHeader;
    9d86:	10 92 23 03 	sts	0x0323, r1
	      Result=MENU_DONE;
    9d8a:	81 e0       	ldi	r24, 0x01	; 1
	      break;	 
    9d8c:	01 c0       	rjmp	.+2      	; 0x9d90 <FMenuSettingFooter+0x30a>
     char Result,uiResult;
	 char lcdteks[20];
	 char strHeaderFooter[50];
	 char KeyChar;
	 
	 Result=MENU_NONE;
    9d8e:	80 e0       	ldi	r24, 0x00	; 0
          stSettingHeader=shInitHeader;
	      Result=MENU_DONE;
	      break;	 
	 }
   return Result;
}
    9d90:	ca 5b       	subi	r28, 0xBA	; 186
    9d92:	df 4f       	sbci	r29, 0xFF	; 255
    9d94:	0f b6       	in	r0, 0x3f	; 63
    9d96:	f8 94       	cli
    9d98:	de bf       	out	0x3e, r29	; 62
    9d9a:	0f be       	out	0x3f, r0	; 63
    9d9c:	cd bf       	out	0x3d, r28	; 61
    9d9e:	cf 91       	pop	r28
    9da0:	df 91       	pop	r29
    9da2:	1f 91       	pop	r17
    9da4:	0f 91       	pop	r16
    9da6:	ef 90       	pop	r14
    9da8:	08 95       	ret

00009daa <FMenuSettingHeader>:
	      break;
	 }
   return Result;
}

char FMenuSettingHeader(){
    9daa:	ef 92       	push	r14
    9dac:	0f 93       	push	r16
    9dae:	1f 93       	push	r17
    9db0:	df 93       	push	r29
    9db2:	cf 93       	push	r28
    9db4:	cd b7       	in	r28, 0x3d	; 61
    9db6:	de b7       	in	r29, 0x3e	; 62
    9db8:	c6 54       	subi	r28, 0x46	; 70
    9dba:	d0 40       	sbci	r29, 0x00	; 0
    9dbc:	0f b6       	in	r0, 0x3f	; 63
    9dbe:	f8 94       	cli
    9dc0:	de bf       	out	0x3e, r29	; 62
    9dc2:	0f be       	out	0x3f, r0	; 63
    9dc4:	cd bf       	out	0x3d, r28	; 61
	 char lcdteks[20];
	 char strHeaderFooter[50];
	 
	 Result=MENU_NONE;
     
	 switch (stSettingHeader){
    9dc6:	80 91 25 03 	lds	r24, 0x0325
    9dca:	84 30       	cpi	r24, 0x04	; 4
    9dcc:	09 f4       	brne	.+2      	; 0x9dd0 <FMenuSettingHeader+0x26>
    9dce:	27 c1       	rjmp	.+590    	; 0xa01e <FMenuSettingHeader+0x274>
    9dd0:	85 30       	cpi	r24, 0x05	; 5
    9dd2:	40 f4       	brcc	.+16     	; 0x9de4 <FMenuSettingHeader+0x3a>
    9dd4:	81 30       	cpi	r24, 0x01	; 1
    9dd6:	79 f1       	breq	.+94     	; 0x9e36 <FMenuSettingHeader+0x8c>
    9dd8:	81 30       	cpi	r24, 0x01	; 1
    9dda:	88 f0       	brcs	.+34     	; 0x9dfe <FMenuSettingHeader+0x54>
    9ddc:	82 30       	cpi	r24, 0x02	; 2
    9dde:	09 f0       	breq	.+2      	; 0x9de2 <FMenuSettingHeader+0x38>
    9de0:	68 c1       	rjmp	.+720    	; 0xa0b2 <FMenuSettingHeader+0x308>
    9de2:	72 c0       	rjmp	.+228    	; 0x9ec8 <FMenuSettingHeader+0x11e>
    9de4:	86 30       	cpi	r24, 0x06	; 6
    9de6:	09 f4       	brne	.+2      	; 0x9dea <FMenuSettingHeader+0x40>
    9de8:	c8 c0       	rjmp	.+400    	; 0x9f7a <FMenuSettingHeader+0x1d0>
    9dea:	86 30       	cpi	r24, 0x06	; 6
    9dec:	08 f4       	brcc	.+2      	; 0x9df0 <FMenuSettingHeader+0x46>
    9dee:	b2 c0       	rjmp	.+356    	; 0x9f54 <FMenuSettingHeader+0x1aa>
    9df0:	87 30       	cpi	r24, 0x07	; 7
    9df2:	09 f4       	brne	.+2      	; 0x9df6 <FMenuSettingHeader+0x4c>
    9df4:	22 c1       	rjmp	.+580    	; 0xa03a <FMenuSettingHeader+0x290>
    9df6:	88 30       	cpi	r24, 0x08	; 8
    9df8:	09 f0       	breq	.+2      	; 0x9dfc <FMenuSettingHeader+0x52>
    9dfa:	5b c1       	rjmp	.+694    	; 0xa0b2 <FMenuSettingHeader+0x308>
    9dfc:	56 c1       	rjmp	.+684    	; 0xa0aa <FMenuSettingHeader+0x300>
	 case shInitHeader:
	      lcd_clear();
    9dfe:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
		  lcd_printf(1,1,PSTR("1)Header1  4)Header4"));
    9e02:	81 e0       	ldi	r24, 0x01	; 1
    9e04:	61 e0       	ldi	r22, 0x01	; 1
    9e06:	41 e1       	ldi	r20, 0x11	; 17
    9e08:	56 e1       	ldi	r21, 0x16	; 22
    9e0a:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  lcd_printf(2,1,PSTR("2)Header2  5)Header5"));
    9e0e:	82 e0       	ldi	r24, 0x02	; 2
    9e10:	61 e0       	ldi	r22, 0x01	; 1
    9e12:	4c ef       	ldi	r20, 0xFC	; 252
    9e14:	55 e1       	ldi	r21, 0x15	; 21
    9e16:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  lcd_printf(3,1,PSTR("3)Header3  6)Header6"));
    9e1a:	83 e0       	ldi	r24, 0x03	; 3
    9e1c:	61 e0       	ldi	r22, 0x01	; 1
    9e1e:	47 ee       	ldi	r20, 0xE7	; 231
    9e20:	55 e1       	ldi	r21, 0x15	; 21
    9e22:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  lcd_printf(4,1,PSTR("*)Exit              "));
    9e26:	84 e0       	ldi	r24, 0x04	; 4
    9e28:	61 e0       	ldi	r22, 0x01	; 1
    9e2a:	42 ed       	ldi	r20, 0xD2	; 210
    9e2c:	55 e1       	ldi	r21, 0x15	; 21
    9e2e:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  stSettingHeader=shHeaderSelect;
    9e32:	81 e0       	ldi	r24, 0x01	; 1
    9e34:	fc c0       	rjmp	.+504    	; 0xa02e <FMenuSettingHeader+0x284>
	      break;
     case shHeaderSelect:
	      KeyChar=_key_btn(_key_scan(1));
    9e36:	81 e0       	ldi	r24, 0x01	; 1
    9e38:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <_key_scan>
    9e3c:	0e 94 49 a3 	call	0x14692	; 0x14692 <_key_btn>
		  if ((KeyChar>='1')&&(KeyChar<='6')){
    9e40:	98 2f       	mov	r25, r24
    9e42:	91 53       	subi	r25, 0x31	; 49
    9e44:	96 30       	cpi	r25, 0x06	; 6
    9e46:	d8 f5       	brcc	.+118    	; 0x9ebe <FMenuSettingHeader+0x114>
		       HeaderIdx=KeyChar-'1';//
    9e48:	90 93 24 03 	sts	0x0324, r25
			   lcd_clear();
    9e4c:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
			   sprintf_P(lcdteks,PSTR("Edit Header%d "),HeaderIdx+1);
    9e50:	00 d0       	rcall	.+0      	; 0x9e52 <FMenuSettingHeader+0xa8>
    9e52:	00 d0       	rcall	.+0      	; 0x9e54 <FMenuSettingHeader+0xaa>
    9e54:	00 d0       	rcall	.+0      	; 0x9e56 <FMenuSettingHeader+0xac>
    9e56:	ed b7       	in	r30, 0x3d	; 61
    9e58:	fe b7       	in	r31, 0x3e	; 62
    9e5a:	31 96       	adiw	r30, 0x01	; 1
    9e5c:	8e 01       	movw	r16, r28
    9e5e:	0f 5f       	subi	r16, 0xFF	; 255
    9e60:	1f 4f       	sbci	r17, 0xFF	; 255
    9e62:	ad b7       	in	r26, 0x3d	; 61
    9e64:	be b7       	in	r27, 0x3e	; 62
    9e66:	12 96       	adiw	r26, 0x02	; 2
    9e68:	1c 93       	st	X, r17
    9e6a:	0e 93       	st	-X, r16
    9e6c:	11 97       	sbiw	r26, 0x01	; 1
    9e6e:	83 ec       	ldi	r24, 0xC3	; 195
    9e70:	95 e1       	ldi	r25, 0x15	; 21
    9e72:	93 83       	std	Z+3, r25	; 0x03
    9e74:	82 83       	std	Z+2, r24	; 0x02
    9e76:	80 91 24 03 	lds	r24, 0x0324
    9e7a:	90 e0       	ldi	r25, 0x00	; 0
    9e7c:	01 96       	adiw	r24, 0x01	; 1
    9e7e:	95 83       	std	Z+5, r25	; 0x05
    9e80:	84 83       	std	Z+4, r24	; 0x04
    9e82:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
			   lcd_print(1,1,lcdteks);
    9e86:	8d b7       	in	r24, 0x3d	; 61
    9e88:	9e b7       	in	r25, 0x3e	; 62
    9e8a:	06 96       	adiw	r24, 0x06	; 6
    9e8c:	0f b6       	in	r0, 0x3f	; 63
    9e8e:	f8 94       	cli
    9e90:	9e bf       	out	0x3e, r25	; 62
    9e92:	0f be       	out	0x3f, r0	; 63
    9e94:	8d bf       	out	0x3d, r24	; 61
    9e96:	81 e0       	ldi	r24, 0x01	; 1
    9e98:	61 e0       	ldi	r22, 0x01	; 1
    9e9a:	a8 01       	movw	r20, r16
    9e9c:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
			   lcd_printf(4,1,PSTR("[*]Back  [#]OK"));
    9ea0:	84 e0       	ldi	r24, 0x04	; 4
    9ea2:	61 e0       	ldi	r22, 0x01	; 1
    9ea4:	44 eb       	ldi	r20, 0xB4	; 180
    9ea6:	55 e1       	ldi	r21, 0x15	; 21
    9ea8:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
			   FillChar(PrintBuffer,sizeof(PrintBuffer),0);
    9eac:	80 ed       	ldi	r24, 0xD0	; 208
    9eae:	94 e0       	ldi	r25, 0x04	; 4
    9eb0:	61 e9       	ldi	r22, 0x91	; 145
    9eb2:	71 e0       	ldi	r23, 0x01	; 1
    9eb4:	40 e0       	ldi	r20, 0x00	; 0
    9eb6:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>
			   stSettingHeader=shEditHeader1;
    9eba:	82 e0       	ldi	r24, 0x02	; 2
    9ebc:	b8 c0       	rjmp	.+368    	; 0xa02e <FMenuSettingHeader+0x284>
		  }
		  if(KeyChar=='*')stSettingHeader=shExitSettingHeader;
    9ebe:	8a 32       	cpi	r24, 0x2A	; 42
    9ec0:	09 f0       	breq	.+2      	; 0x9ec4 <FMenuSettingHeader+0x11a>
    9ec2:	f7 c0       	rjmp	.+494    	; 0xa0b2 <FMenuSettingHeader+0x308>
    9ec4:	88 e0       	ldi	r24, 0x08	; 8
    9ec6:	b3 c0       	rjmp	.+358    	; 0xa02e <FMenuSettingHeader+0x284>
	      break;
     case shEditHeader1:
          //uiResult=UserInput(UI_ALPHANUM_R,2,1,strFreeMessageLine1,0,20);
		  uiResult=UserInput(UI_ALPHANUM_R,2,1,PrintBuffer,0,40);
    9ec8:	83 e0       	ldi	r24, 0x03	; 3
    9eca:	62 e0       	ldi	r22, 0x02	; 2
    9ecc:	41 e0       	ldi	r20, 0x01	; 1
    9ece:	20 ed       	ldi	r18, 0xD0	; 208
    9ed0:	34 e0       	ldi	r19, 0x04	; 4
    9ed2:	00 e0       	ldi	r16, 0x00	; 0
    9ed4:	10 e0       	ldi	r17, 0x00	; 0
    9ed6:	f8 e2       	ldi	r31, 0x28	; 40
    9ed8:	ef 2e       	mov	r14, r31
    9eda:	0e 94 d3 39 	call	0x73a6	; 0x73a6 <UserInput>
		  if (uiResult==USER_OK){
    9ede:	83 30       	cpi	r24, 0x03	; 3
    9ee0:	a9 f5       	brne	.+106    	; 0x9f4c <FMenuSettingHeader+0x1a2>
			  lcd_clear();
    9ee2:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
			  AddSpaceLag(PrintBuffer,40);
    9ee6:	80 ed       	ldi	r24, 0xD0	; 208
    9ee8:	94 e0       	ldi	r25, 0x04	; 4
    9eea:	68 e2       	ldi	r22, 0x28	; 40
    9eec:	0e 94 7d 27 	call	0x4efa	; 0x4efa <AddSpaceLag>
			  StrPosCopy(PrintBuffer,strFreeMessageLine1,0,20);
    9ef0:	80 ed       	ldi	r24, 0xD0	; 208
    9ef2:	94 e0       	ldi	r25, 0x04	; 4
    9ef4:	66 e7       	ldi	r22, 0x76	; 118
    9ef6:	79 e0       	ldi	r23, 0x09	; 9
    9ef8:	40 e0       	ldi	r20, 0x00	; 0
    9efa:	50 e0       	ldi	r21, 0x00	; 0
    9efc:	24 e1       	ldi	r18, 0x14	; 20
    9efe:	30 e0       	ldi	r19, 0x00	; 0
    9f00:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
			  StrPosCopy(PrintBuffer,strFreeMessageLine2,20,20);
    9f04:	80 ed       	ldi	r24, 0xD0	; 208
    9f06:	94 e0       	ldi	r25, 0x04	; 4
    9f08:	67 e8       	ldi	r22, 0x87	; 135
    9f0a:	78 e0       	ldi	r23, 0x08	; 8
    9f0c:	44 e1       	ldi	r20, 0x14	; 20
    9f0e:	50 e0       	ldi	r21, 0x00	; 0
    9f10:	24 e1       	ldi	r18, 0x14	; 20
    9f12:	30 e0       	ldi	r19, 0x00	; 0
    9f14:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>

			  lcd_print(1,1,strFreeMessageLine1);			  
    9f18:	81 e0       	ldi	r24, 0x01	; 1
    9f1a:	61 e0       	ldi	r22, 0x01	; 1
    9f1c:	46 e7       	ldi	r20, 0x76	; 118
    9f1e:	59 e0       	ldi	r21, 0x09	; 9
    9f20:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
			  lcd_print(2,1,strFreeMessageLine2);			  
    9f24:	82 e0       	ldi	r24, 0x02	; 2
    9f26:	61 e0       	ldi	r22, 0x01	; 1
    9f28:	47 e8       	ldi	r20, 0x87	; 135
    9f2a:	58 e0       	ldi	r21, 0x08	; 8
    9f2c:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
			  
			  lcd_printf(3,1,PSTR("Align Center?"));
    9f30:	83 e0       	ldi	r24, 0x03	; 3
    9f32:	61 e0       	ldi	r22, 0x01	; 1
    9f34:	46 ea       	ldi	r20, 0xA6	; 166
    9f36:	55 e1       	ldi	r21, 0x15	; 21
    9f38:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
			  lcd_printf(4,1,PSTR("[*]No  [#]Yes"));
    9f3c:	84 e0       	ldi	r24, 0x04	; 4
    9f3e:	61 e0       	ldi	r22, 0x01	; 1
    9f40:	48 e9       	ldi	r20, 0x98	; 152
    9f42:	55 e1       	ldi	r21, 0x15	; 21
    9f44:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		      stSettingHeader=shIsAlignCenter;
    9f48:	85 e0       	ldi	r24, 0x05	; 5
    9f4a:	71 c0       	rjmp	.+226    	; 0xa02e <FMenuSettingHeader+0x284>
		  }
		  else
		  if (uiResult==USER_CANCEL)stSettingHeader=shInitHeader;
    9f4c:	81 30       	cpi	r24, 0x01	; 1
    9f4e:	09 f0       	breq	.+2      	; 0x9f52 <FMenuSettingHeader+0x1a8>
    9f50:	b0 c0       	rjmp	.+352    	; 0xa0b2 <FMenuSettingHeader+0x308>
    9f52:	a8 c0       	rjmp	.+336    	; 0xa0a4 <FMenuSettingHeader+0x2fa>
	      break;
     case shIsAlignCenter:
	      KeyChar=_key_btn(_key_scan(1));
    9f54:	81 e0       	ldi	r24, 0x01	; 1
    9f56:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <_key_scan>
    9f5a:	0e 94 49 a3 	call	0x14692	; 0x14692 <_key_btn>
          if(KeyChar=='#'){
    9f5e:	83 32       	cpi	r24, 0x23	; 35
    9f60:	39 f4       	brne	.+14     	; 0x9f70 <FMenuSettingHeader+0x1c6>
		      //AlignCenter			  
			  StrAlignCenter(PrintBuffer,40);
    9f62:	80 ed       	ldi	r24, 0xD0	; 208
    9f64:	94 e0       	ldi	r25, 0x04	; 4
    9f66:	68 e2       	ldi	r22, 0x28	; 40
    9f68:	70 e0       	ldi	r23, 0x00	; 0
    9f6a:	0e 94 3c 3f 	call	0x7e78	; 0x7e78 <StrAlignCenter>
    9f6e:	03 c0       	rjmp	.+6      	; 0x9f76 <FMenuSettingHeader+0x1cc>
			  stSettingHeader=shIsSaveHeader;
		  } else if(KeyChar=='*')stSettingHeader=shIsSaveHeader;		 
    9f70:	8a 32       	cpi	r24, 0x2A	; 42
    9f72:	09 f0       	breq	.+2      	; 0x9f76 <FMenuSettingHeader+0x1cc>
    9f74:	9e c0       	rjmp	.+316    	; 0xa0b2 <FMenuSettingHeader+0x308>
    9f76:	86 e0       	ldi	r24, 0x06	; 6
    9f78:	5a c0       	rjmp	.+180    	; 0xa02e <FMenuSettingHeader+0x284>
	      break;
     case shIsSaveHeader:
	      lcd_clear(); 
    9f7a:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
		  StrPosCopy(PrintBuffer,strFreeMessageLine1,0,20);
    9f7e:	80 ed       	ldi	r24, 0xD0	; 208
    9f80:	94 e0       	ldi	r25, 0x04	; 4
    9f82:	66 e7       	ldi	r22, 0x76	; 118
    9f84:	79 e0       	ldi	r23, 0x09	; 9
    9f86:	40 e0       	ldi	r20, 0x00	; 0
    9f88:	50 e0       	ldi	r21, 0x00	; 0
    9f8a:	24 e1       	ldi	r18, 0x14	; 20
    9f8c:	30 e0       	ldi	r19, 0x00	; 0
    9f8e:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
		  StrPosCopy(PrintBuffer,strFreeMessageLine2,20,20);
    9f92:	80 ed       	ldi	r24, 0xD0	; 208
    9f94:	94 e0       	ldi	r25, 0x04	; 4
    9f96:	67 e8       	ldi	r22, 0x87	; 135
    9f98:	78 e0       	ldi	r23, 0x08	; 8
    9f9a:	44 e1       	ldi	r20, 0x14	; 20
    9f9c:	50 e0       	ldi	r21, 0x00	; 0
    9f9e:	24 e1       	ldi	r18, 0x14	; 20
    9fa0:	30 e0       	ldi	r19, 0x00	; 0
    9fa2:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
          lcd_print(1,1,strFreeMessageLine1);
    9fa6:	81 e0       	ldi	r24, 0x01	; 1
    9fa8:	61 e0       	ldi	r22, 0x01	; 1
    9faa:	46 e7       	ldi	r20, 0x76	; 118
    9fac:	59 e0       	ldi	r21, 0x09	; 9
    9fae:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
		  lcd_print(2,1,strFreeMessageLine2);
    9fb2:	82 e0       	ldi	r24, 0x02	; 2
    9fb4:	61 e0       	ldi	r22, 0x01	; 1
    9fb6:	47 e8       	ldi	r20, 0x87	; 135
    9fb8:	58 e0       	ldi	r21, 0x08	; 8
    9fba:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
		  sprintf_P(lcdteks,PSTR("Save Header%d ?"),HeaderIdx+1);
    9fbe:	00 d0       	rcall	.+0      	; 0x9fc0 <FMenuSettingHeader+0x216>
    9fc0:	00 d0       	rcall	.+0      	; 0x9fc2 <FMenuSettingHeader+0x218>
    9fc2:	00 d0       	rcall	.+0      	; 0x9fc4 <FMenuSettingHeader+0x21a>
    9fc4:	ed b7       	in	r30, 0x3d	; 61
    9fc6:	fe b7       	in	r31, 0x3e	; 62
    9fc8:	31 96       	adiw	r30, 0x01	; 1
    9fca:	8e 01       	movw	r16, r28
    9fcc:	0f 5f       	subi	r16, 0xFF	; 255
    9fce:	1f 4f       	sbci	r17, 0xFF	; 255
    9fd0:	ad b7       	in	r26, 0x3d	; 61
    9fd2:	be b7       	in	r27, 0x3e	; 62
    9fd4:	12 96       	adiw	r26, 0x02	; 2
    9fd6:	1c 93       	st	X, r17
    9fd8:	0e 93       	st	-X, r16
    9fda:	11 97       	sbiw	r26, 0x01	; 1
    9fdc:	88 e8       	ldi	r24, 0x88	; 136
    9fde:	95 e1       	ldi	r25, 0x15	; 21
    9fe0:	93 83       	std	Z+3, r25	; 0x03
    9fe2:	82 83       	std	Z+2, r24	; 0x02
    9fe4:	80 91 24 03 	lds	r24, 0x0324
    9fe8:	90 e0       	ldi	r25, 0x00	; 0
    9fea:	01 96       	adiw	r24, 0x01	; 1
    9fec:	95 83       	std	Z+5, r25	; 0x05
    9fee:	84 83       	std	Z+4, r24	; 0x04
    9ff0:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		  lcd_print(3,1,lcdteks);
    9ff4:	8d b7       	in	r24, 0x3d	; 61
    9ff6:	9e b7       	in	r25, 0x3e	; 62
    9ff8:	06 96       	adiw	r24, 0x06	; 6
    9ffa:	0f b6       	in	r0, 0x3f	; 63
    9ffc:	f8 94       	cli
    9ffe:	9e bf       	out	0x3e, r25	; 62
    a000:	0f be       	out	0x3f, r0	; 63
    a002:	8d bf       	out	0x3d, r24	; 61
    a004:	83 e0       	ldi	r24, 0x03	; 3
    a006:	61 e0       	ldi	r22, 0x01	; 1
    a008:	a8 01       	movw	r20, r16
    a00a:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
		  lcd_printf(4,1,PSTR("[*]No [#]Yes"));		      
    a00e:	84 e0       	ldi	r24, 0x04	; 4
    a010:	61 e0       	ldi	r22, 0x01	; 1
    a012:	4b e7       	ldi	r20, 0x7B	; 123
    a014:	55 e1       	ldi	r21, 0x15	; 21
    a016:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
	      stSettingHeader=shSaveHeaderQuestions;      
    a01a:	84 e0       	ldi	r24, 0x04	; 4
    a01c:	08 c0       	rjmp	.+16     	; 0xa02e <FMenuSettingHeader+0x284>
	      break;    
     case shSaveHeaderQuestions:
	      KeyChar=_key_btn(_key_scan(1));
    a01e:	81 e0       	ldi	r24, 0x01	; 1
    a020:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <_key_scan>
    a024:	0e 94 49 a3 	call	0x14692	; 0x14692 <_key_btn>
	      if(KeyChar=='#')stSettingHeader=shSaveHeader;
    a028:	83 32       	cpi	r24, 0x23	; 35
    a02a:	21 f4       	brne	.+8      	; 0xa034 <FMenuSettingHeader+0x28a>
    a02c:	87 e0       	ldi	r24, 0x07	; 7
    a02e:	80 93 25 03 	sts	0x0325, r24
    a032:	3f c0       	rjmp	.+126    	; 0xa0b2 <FMenuSettingHeader+0x308>
		  else
          if(KeyChar=='*')stSettingHeader=shInitHeader;
    a034:	8a 32       	cpi	r24, 0x2A	; 42
    a036:	e9 f5       	brne	.+122    	; 0xa0b2 <FMenuSettingHeader+0x308>
    a038:	35 c0       	rjmp	.+106    	; 0xa0a4 <FMenuSettingHeader+0x2fa>
	      break;
     case shSaveHeader:
	      sprintf_P(strHeaderFooter,PSTR("%s%s"),strFreeMessageLine1,strFreeMessageLine2);
    a03a:	ad b7       	in	r26, 0x3d	; 61
    a03c:	be b7       	in	r27, 0x3e	; 62
    a03e:	18 97       	sbiw	r26, 0x08	; 8
    a040:	0f b6       	in	r0, 0x3f	; 63
    a042:	f8 94       	cli
    a044:	be bf       	out	0x3e, r27	; 62
    a046:	0f be       	out	0x3f, r0	; 63
    a048:	ad bf       	out	0x3d, r26	; 61
    a04a:	ed b7       	in	r30, 0x3d	; 61
    a04c:	fe b7       	in	r31, 0x3e	; 62
    a04e:	31 96       	adiw	r30, 0x01	; 1
    a050:	8e 01       	movw	r16, r28
    a052:	0b 5e       	subi	r16, 0xEB	; 235
    a054:	1f 4f       	sbci	r17, 0xFF	; 255
    a056:	12 96       	adiw	r26, 0x02	; 2
    a058:	1c 93       	st	X, r17
    a05a:	0e 93       	st	-X, r16
    a05c:	11 97       	sbiw	r26, 0x01	; 1
    a05e:	86 e7       	ldi	r24, 0x76	; 118
    a060:	95 e1       	ldi	r25, 0x15	; 21
    a062:	93 83       	std	Z+3, r25	; 0x03
    a064:	82 83       	std	Z+2, r24	; 0x02
    a066:	86 e7       	ldi	r24, 0x76	; 118
    a068:	99 e0       	ldi	r25, 0x09	; 9
    a06a:	95 83       	std	Z+5, r25	; 0x05
    a06c:	84 83       	std	Z+4, r24	; 0x04
    a06e:	87 e8       	ldi	r24, 0x87	; 135
    a070:	98 e0       	ldi	r25, 0x08	; 8
    a072:	97 83       	std	Z+7, r25	; 0x07
    a074:	86 83       	std	Z+6, r24	; 0x06
    a076:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	      eeprom_write_block((const void*) &strHeaderFooter, (void*) &DefHeaderFooter[HeaderIdx],40);
    a07a:	8d b7       	in	r24, 0x3d	; 61
    a07c:	9e b7       	in	r25, 0x3e	; 62
    a07e:	08 96       	adiw	r24, 0x08	; 8
    a080:	0f b6       	in	r0, 0x3f	; 63
    a082:	f8 94       	cli
    a084:	9e bf       	out	0x3e, r25	; 62
    a086:	0f be       	out	0x3f, r0	; 63
    a088:	8d bf       	out	0x3d, r24	; 61
    a08a:	60 91 24 03 	lds	r22, 0x0324
    a08e:	89 e2       	ldi	r24, 0x29	; 41
    a090:	68 9f       	mul	r22, r24
    a092:	b0 01       	movw	r22, r0
    a094:	11 24       	eor	r1, r1
    a096:	68 5d       	subi	r22, 0xD8	; 216
    a098:	7d 4f       	sbci	r23, 0xFD	; 253
    a09a:	c8 01       	movw	r24, r16
    a09c:	48 e2       	ldi	r20, 0x28	; 40
    a09e:	50 e0       	ldi	r21, 0x00	; 0
    a0a0:	0e 94 6e aa 	call	0x154dc	; 0x154dc <__eewr_block_m128>
		  //eeprom_write_block((const void*) &PrintBuffer, (void*) &DefHeaderFooter[HeaderIdx],40);
          stSettingHeader=shInitHeader;
    a0a4:	10 92 25 03 	sts	0x0325, r1
    a0a8:	04 c0       	rjmp	.+8      	; 0xa0b2 <FMenuSettingHeader+0x308>
	      break;
     case shExitSettingHeader:
          stSettingHeader=shInitHeader;
    a0aa:	10 92 25 03 	sts	0x0325, r1
	      Result=MENU_DONE;
    a0ae:	81 e0       	ldi	r24, 0x01	; 1
	      break;	 
    a0b0:	01 c0       	rjmp	.+2      	; 0xa0b4 <FMenuSettingHeader+0x30a>
static char stSettingHeader=shInitHeader,HeaderIdx=0;
     char Result,uiResult,KeyChar;
	 char lcdteks[20];
	 char strHeaderFooter[50];
	 
	 Result=MENU_NONE;
    a0b2:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
	      break;	 
	 }
   //_menu_header();   
   return Result;
}
    a0b4:	ca 5b       	subi	r28, 0xBA	; 186
    a0b6:	df 4f       	sbci	r29, 0xFF	; 255
    a0b8:	0f b6       	in	r0, 0x3f	; 63
    a0ba:	f8 94       	cli
    a0bc:	de bf       	out	0x3e, r29	; 62
    a0be:	0f be       	out	0x3f, r0	; 63
    a0c0:	cd bf       	out	0x3d, r28	; 61
    a0c2:	cf 91       	pop	r28
    a0c4:	df 91       	pop	r29
    a0c6:	1f 91       	pop	r17
    a0c8:	0f 91       	pop	r16
    a0ca:	ef 90       	pop	r14
    a0cc:	08 95       	ret

0000a0ce <FMenuAdminSettings>:

char FMenuAdminSettings(){
     static char stAdminSettings=asInitMenu;
	 char SubMenu,Result,KeyChar;
	 Result=MENU_NONE;
	 switch(stAdminSettings){
    a0ce:	80 91 26 03 	lds	r24, 0x0326
    a0d2:	83 30       	cpi	r24, 0x03	; 3
    a0d4:	09 f4       	brne	.+2      	; 0xa0d8 <FMenuAdminSettings+0xa>
    a0d6:	6d c0       	rjmp	.+218    	; 0xa1b2 <FMenuAdminSettings+0xe4>
    a0d8:	84 30       	cpi	r24, 0x04	; 4
    a0da:	30 f4       	brcc	.+12     	; 0xa0e8 <FMenuAdminSettings+0x1a>
    a0dc:	81 30       	cpi	r24, 0x01	; 1
    a0de:	e9 f1       	breq	.+122    	; 0xa15a <FMenuAdminSettings+0x8c>
    a0e0:	82 30       	cpi	r24, 0x02	; 2
    a0e2:	08 f0       	brcs	.+2      	; 0xa0e6 <FMenuAdminSettings+0x18>
    a0e4:	63 c0       	rjmp	.+198    	; 0xa1ac <FMenuAdminSettings+0xde>
    a0e6:	0d c0       	rjmp	.+26     	; 0xa102 <FMenuAdminSettings+0x34>
    a0e8:	85 30       	cpi	r24, 0x05	; 5
    a0ea:	09 f4       	brne	.+2      	; 0xa0ee <FMenuAdminSettings+0x20>
    a0ec:	65 c0       	rjmp	.+202    	; 0xa1b8 <FMenuAdminSettings+0xea>
    a0ee:	85 30       	cpi	r24, 0x05	; 5
    a0f0:	08 f4       	brcc	.+2      	; 0xa0f4 <FMenuAdminSettings+0x26>
    a0f2:	6b c0       	rjmp	.+214    	; 0xa1ca <FMenuAdminSettings+0xfc>
    a0f4:	86 30       	cpi	r24, 0x06	; 6
    a0f6:	09 f4       	brne	.+2      	; 0xa0fa <FMenuAdminSettings+0x2c>
    a0f8:	64 c0       	rjmp	.+200    	; 0xa1c2 <FMenuAdminSettings+0xf4>
    a0fa:	87 30       	cpi	r24, 0x07	; 7
    a0fc:	09 f0       	breq	.+2      	; 0xa100 <FMenuAdminSettings+0x32>
    a0fe:	6c c0       	rjmp	.+216    	; 0xa1d8 <FMenuAdminSettings+0x10a>
    a100:	67 c0       	rjmp	.+206    	; 0xa1d0 <FMenuAdminSettings+0x102>
	 case asInitMenu:
          lcd_clear();
    a102:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
		  if (IFType==IT_SLAVE){
    a106:	80 91 00 01 	lds	r24, 0x0100
    a10a:	81 30       	cpi	r24, 0x01	; 1
    a10c:	51 f4       	brne	.+20     	; 0xa122 <FMenuAdminSettings+0x54>
		      lcd_printf(1,1, PSTR("1)Header    4)Client"));
    a10e:	61 e0       	ldi	r22, 0x01	; 1
    a110:	41 e8       	ldi	r20, 0x81	; 129
    a112:	56 e1       	ldi	r21, 0x16	; 22
    a114:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		      lcd_printf(2,1, PSTR("2)Footer    5)Server"));
    a118:	82 e0       	ldi	r24, 0x02	; 2
    a11a:	61 e0       	ldi	r22, 0x01	; 1
    a11c:	4c e6       	ldi	r20, 0x6C	; 108
    a11e:	56 e1       	ldi	r21, 0x16	; 22
    a120:	0c c0       	rjmp	.+24     	; 0xa13a <FMenuAdminSettings+0x6c>
		  }else
		  if (IFType==IT_STANDALONE){
    a122:	82 30       	cpi	r24, 0x02	; 2
    a124:	61 f4       	brne	.+24     	; 0xa13e <FMenuAdminSettings+0x70>
		      lcd_printf(1,1, PSTR("1)Header            "));
    a126:	81 e0       	ldi	r24, 0x01	; 1
    a128:	61 e0       	ldi	r22, 0x01	; 1
    a12a:	47 e5       	ldi	r20, 0x57	; 87
    a12c:	56 e1       	ldi	r21, 0x16	; 22
    a12e:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		      lcd_printf(2,1, PSTR("2)Footer            "));
    a132:	82 e0       	ldi	r24, 0x02	; 2
    a134:	61 e0       	ldi	r22, 0x01	; 1
    a136:	42 e4       	ldi	r20, 0x42	; 66
    a138:	56 e1       	ldi	r21, 0x16	; 22
    a13a:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  }
		  lcd_printf(3,1, PSTR("3)Password          "));
    a13e:	83 e0       	ldi	r24, 0x03	; 3
    a140:	61 e0       	ldi	r22, 0x01	; 1
    a142:	4d e2       	ldi	r20, 0x2D	; 45
    a144:	56 e1       	ldi	r21, 0x16	; 22
    a146:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  lcd_printf(4,1, PSTR("*)Exit"));
    a14a:	84 e0       	ldi	r24, 0x04	; 4
    a14c:	61 e0       	ldi	r22, 0x01	; 1
    a14e:	46 e2       	ldi	r20, 0x26	; 38
    a150:	56 e1       	ldi	r21, 0x16	; 22
    a152:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  stAdminSettings=asAdminSettingsOption;
    a156:	81 e0       	ldi	r24, 0x01	; 1
    a158:	26 c0       	rjmp	.+76     	; 0xa1a6 <FMenuAdminSettings+0xd8>
		  break;
     case asAdminSettingsOption:
	      KeyChar=_key_btn(_key_scan(1));
    a15a:	81 e0       	ldi	r24, 0x01	; 1
    a15c:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <_key_scan>
    a160:	0e 94 49 a3 	call	0x14692	; 0x14692 <_key_btn>
		  switch(KeyChar){
    a164:	82 33       	cpi	r24, 0x32	; 50
    a166:	61 f0       	breq	.+24     	; 0xa180 <FMenuAdminSettings+0xb2>
    a168:	83 33       	cpi	r24, 0x33	; 51
    a16a:	28 f4       	brcc	.+10     	; 0xa176 <FMenuAdminSettings+0xa8>
    a16c:	8a 32       	cpi	r24, 0x2A	; 42
    a16e:	61 f0       	breq	.+24     	; 0xa188 <FMenuAdminSettings+0xba>
    a170:	81 33       	cpi	r24, 0x31	; 49
    a172:	69 f4       	brne	.+26     	; 0xa18e <FMenuAdminSettings+0xc0>
    a174:	03 c0       	rjmp	.+6      	; 0xa17c <FMenuAdminSettings+0xae>
    a176:	83 33       	cpi	r24, 0x33	; 51
    a178:	51 f4       	brne	.+20     	; 0xa18e <FMenuAdminSettings+0xc0>
    a17a:	04 c0       	rjmp	.+8      	; 0xa184 <FMenuAdminSettings+0xb6>
		  case '1':stAdminSettings=asAdminSettingHeader;
    a17c:	92 e0       	ldi	r25, 0x02	; 2
    a17e:	05 c0       	rjmp	.+10     	; 0xa18a <FMenuAdminSettings+0xbc>
		       break;
		  case '2':stAdminSettings=asAdminSettingFooter;
    a180:	93 e0       	ldi	r25, 0x03	; 3
    a182:	03 c0       	rjmp	.+6      	; 0xa18a <FMenuAdminSettings+0xbc>
		       break;
		  case '3':stAdminSettings=asAdminSettingPassword;
    a184:	94 e0       	ldi	r25, 0x04	; 4
    a186:	01 c0       	rjmp	.+2      	; 0xa18a <FMenuAdminSettings+0xbc>
		       break;
		  case '*':stAdminSettings=asExitAdminSetting;
    a188:	97 e0       	ldi	r25, 0x07	; 7
    a18a:	90 93 26 03 	sts	0x0326, r25
		       break;			   
		  }
		  if (IFType==IT_SLAVE){
    a18e:	90 91 00 01 	lds	r25, 0x0100
    a192:	91 30       	cpi	r25, 0x01	; 1
    a194:	09 f5       	brne	.+66     	; 0xa1d8 <FMenuAdminSettings+0x10a>
			  switch(KeyChar){
    a196:	84 33       	cpi	r24, 0x34	; 52
    a198:	19 f0       	breq	.+6      	; 0xa1a0 <FMenuAdminSettings+0xd2>
    a19a:	85 33       	cpi	r24, 0x35	; 53
    a19c:	e9 f4       	brne	.+58     	; 0xa1d8 <FMenuAdminSettings+0x10a>
    a19e:	02 c0       	rjmp	.+4      	; 0xa1a4 <FMenuAdminSettings+0xd6>
			  case '4':stAdminSettings=asAdminSettingClientIP;
    a1a0:	85 e0       	ldi	r24, 0x05	; 5
    a1a2:	01 c0       	rjmp	.+2      	; 0xa1a6 <FMenuAdminSettings+0xd8>
				   break;
			  case '5':stAdminSettings=asAdminSettingServerIP;
    a1a4:	86 e0       	ldi	r24, 0x06	; 6
    a1a6:	80 93 26 03 	sts	0x0326, r24
    a1aa:	16 c0       	rjmp	.+44     	; 0xa1d8 <FMenuAdminSettings+0x10a>
				   break;
			  }
		  }
	      break;
	 case asAdminSettingHeader:
	      SubMenu=FMenuSettingHeader();
    a1ac:	0e 94 d5 4e 	call	0x9daa	; 0x9daa <FMenuSettingHeader>
    a1b0:	05 c0       	rjmp	.+10     	; 0xa1bc <FMenuAdminSettings+0xee>
	      if (SubMenu==MENU_DONE)stAdminSettings=asInitMenu;
	      break;
	 case asAdminSettingFooter:
	      SubMenu=FMenuSettingFooter();
    a1b2:	0e 94 43 4d 	call	0x9a86	; 0x9a86 <FMenuSettingFooter>
    a1b6:	02 c0       	rjmp	.+4      	; 0xa1bc <FMenuAdminSettings+0xee>
	 case asAdminSettingPassword:
	      SubMenu=FMenuSettingPassword();
	      if (SubMenu==MENU_DONE)stAdminSettings=asInitMenu;	 
	      break;
     case asAdminSettingClientIP:
	      SubMenu=FMenuSettingClientIP();
    a1b8:	0e 94 a7 1c 	call	0x394e	; 0x394e <FMenuSettingClientIP>
	      if (SubMenu==MENU_DONE)stAdminSettings=asInitMenu;	 
    a1bc:	81 30       	cpi	r24, 0x01	; 1
    a1be:	61 f4       	brne	.+24     	; 0xa1d8 <FMenuAdminSettings+0x10a>
    a1c0:	04 c0       	rjmp	.+8      	; 0xa1ca <FMenuAdminSettings+0xfc>
	      break;
	 case asAdminSettingServerIP:
	      SubMenu=FMenuSettingServerIP();
    a1c2:	0e 94 11 1f 	call	0x3e22	; 0x3e22 <FMenuSettingServerIP>
	      if (SubMenu==MENU_DONE)stAdminSettings=asInitMenu;	 
    a1c6:	81 30       	cpi	r24, 0x01	; 1
    a1c8:	49 f4       	brne	.+18     	; 0xa1dc <FMenuAdminSettings+0x10e>
    a1ca:	10 92 26 03 	sts	0x0326, r1
    a1ce:	04 c0       	rjmp	.+8      	; 0xa1d8 <FMenuAdminSettings+0x10a>
	      break;
     case asExitAdminSetting:
	      stAdminSettings=asInitMenu;
    a1d0:	10 92 26 03 	sts	0x0326, r1
	      Result=MENU_DONE;
    a1d4:	81 e0       	ldi	r24, 0x01	; 1
	      break;
    a1d6:	08 95       	ret
}

char FMenuAdminSettings(){
     static char stAdminSettings=asInitMenu;
	 char SubMenu,Result,KeyChar;
	 Result=MENU_NONE;
    a1d8:	80 e0       	ldi	r24, 0x00	; 0
    a1da:	08 95       	ret
    a1dc:	80 e0       	ldi	r24, 0x00	; 0
	      stAdminSettings=asInitMenu;
	      Result=MENU_DONE;
	      break;
	 }
   return Result;
}
    a1de:	08 95       	ret

0000a1e0 <FMenuPassword>:
   return Result;	 
}



char FMenuPassword(){
    a1e0:	bf 92       	push	r11
    a1e2:	cf 92       	push	r12
    a1e4:	df 92       	push	r13
    a1e6:	ef 92       	push	r14
    a1e8:	ff 92       	push	r15
    a1ea:	0f 93       	push	r16
    a1ec:	1f 93       	push	r17
    a1ee:	df 93       	push	r29
    a1f0:	cf 93       	push	r28
    a1f2:	cd b7       	in	r28, 0x3d	; 61
    a1f4:	de b7       	in	r29, 0x3e	; 62
    a1f6:	6e 97       	sbiw	r28, 0x1e	; 30
    a1f8:	0f b6       	in	r0, 0x3f	; 63
    a1fa:	f8 94       	cli
    a1fc:	de bf       	out	0x3e, r29	; 62
    a1fe:	0f be       	out	0x3f, r0	; 63
    a200:	cd bf       	out	0x3d, r28	; 61
static char stMenuPasword=mpInitPassword,strPassword[10],PassStatus=MP_NONE;;
       char Result=MP_NONE,strMasterPass[10],strSystemPass[10],strAdminPass[10];
       char uiResult;

     Result=MP_NONE;
     switch(stMenuPasword){
    a202:	b0 90 37 03 	lds	r11, 0x0337
    a206:	8b 2d       	mov	r24, r11
    a208:	81 30       	cpi	r24, 0x01	; 1
    a20a:	31 f1       	breq	.+76     	; 0xa258 <FMenuPassword+0x78>
    a20c:	81 30       	cpi	r24, 0x01	; 1
    a20e:	38 f0       	brcs	.+14     	; 0xa21e <FMenuPassword+0x3e>
    a210:	82 30       	cpi	r24, 0x02	; 2
    a212:	09 f4       	brne	.+2      	; 0xa216 <FMenuPassword+0x36>
    a214:	43 c0       	rjmp	.+134    	; 0xa29c <FMenuPassword+0xbc>
    a216:	83 30       	cpi	r24, 0x03	; 3
    a218:	09 f0       	breq	.+2      	; 0xa21c <FMenuPassword+0x3c>
    a21a:	93 c0       	rjmp	.+294    	; 0xa342 <FMenuPassword+0x162>
    a21c:	8d c0       	rjmp	.+282    	; 0xa338 <FMenuPassword+0x158>
	 case mpInitPassword:
	      lcd_clear();
    a21e:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
		  lcd_printf(1,1,PSTR("PASSWORD:"));
    a222:	81 e0       	ldi	r24, 0x01	; 1
    a224:	61 e0       	ldi	r22, 0x01	; 1
    a226:	44 e2       	ldi	r20, 0x24	; 36
    a228:	5a e1       	ldi	r21, 0x1A	; 26
    a22a:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  lcd_printf(2,1,PSTR("_"));
    a22e:	82 e0       	ldi	r24, 0x02	; 2
    a230:	61 e0       	ldi	r22, 0x01	; 1
    a232:	42 e2       	ldi	r20, 0x22	; 34
    a234:	5a e1       	ldi	r21, 0x1A	; 26
    a236:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    a23a:	84 e0       	ldi	r24, 0x04	; 4
    a23c:	61 e0       	ldi	r22, 0x01	; 1
    a23e:	4d e0       	ldi	r20, 0x0D	; 13
    a240:	5a e1       	ldi	r21, 0x1A	; 26
    a242:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  FillChar(strPassword,0,sizeof(strPassword));
    a246:	8d e2       	ldi	r24, 0x2D	; 45
    a248:	93 e0       	ldi	r25, 0x03	; 3
    a24a:	60 e0       	ldi	r22, 0x00	; 0
    a24c:	70 e0       	ldi	r23, 0x00	; 0
    a24e:	4a e0       	ldi	r20, 0x0A	; 10
    a250:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>
		  stMenuPasword=mpInputPasword;
    a254:	81 e0       	ldi	r24, 0x01	; 1
    a256:	6d c0       	rjmp	.+218    	; 0xa332 <FMenuPassword+0x152>
	      break;
     case mpInputPasword:
	 	      uiResult=UserInput(UI_NUM_PASSWORD,2,1,strPassword,0,8);
    a258:	84 e0       	ldi	r24, 0x04	; 4
    a25a:	62 e0       	ldi	r22, 0x02	; 2
    a25c:	41 e0       	ldi	r20, 0x01	; 1
    a25e:	2d e2       	ldi	r18, 0x2D	; 45
    a260:	33 e0       	ldi	r19, 0x03	; 3
    a262:	00 e0       	ldi	r16, 0x00	; 0
    a264:	10 e0       	ldi	r17, 0x00	; 0
    a266:	98 e0       	ldi	r25, 0x08	; 8
    a268:	e9 2e       	mov	r14, r25
    a26a:	0e 94 d3 39 	call	0x73a6	; 0x73a6 <UserInput>
		  if (uiResult==USER_OK){
    a26e:	83 30       	cpi	r24, 0x03	; 3
    a270:	11 f4       	brne	.+4      	; 0xa276 <FMenuPassword+0x96>
		      stMenuPasword=mpProcessPassword;
    a272:	82 e0       	ldi	r24, 0x02	; 2
    a274:	5e c0       	rjmp	.+188    	; 0xa332 <FMenuPassword+0x152>
			  }
		  else
		  if (uiResult==USER_CANCEL){
    a276:	81 30       	cpi	r24, 0x01	; 1
    a278:	09 f4       	brne	.+2      	; 0xa27c <FMenuPassword+0x9c>
    a27a:	4c c0       	rjmp	.+152    	; 0xa314 <FMenuPassword+0x134>
		      PassStatus=MP_CANCEL;
		      stMenuPasword=mpExit;
			  }
		  else
		  if (uiResult==USER_ENTRY)lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
    a27c:	84 30       	cpi	r24, 0x04	; 4
    a27e:	21 f4       	brne	.+8      	; 0xa288 <FMenuPassword+0xa8>
    a280:	61 e0       	ldi	r22, 0x01	; 1
    a282:	48 ef       	ldi	r20, 0xF8	; 248
    a284:	59 e1       	ldi	r21, 0x19	; 25
    a286:	07 c0       	rjmp	.+14     	; 0xa296 <FMenuPassword+0xb6>
		  else
		  if (uiResult==USER_NO_DATA)lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    a288:	85 30       	cpi	r24, 0x05	; 5
    a28a:	09 f0       	breq	.+2      	; 0xa28e <FMenuPassword+0xae>
    a28c:	5a c0       	rjmp	.+180    	; 0xa342 <FMenuPassword+0x162>
    a28e:	84 e0       	ldi	r24, 0x04	; 4
    a290:	61 e0       	ldi	r22, 0x01	; 1
    a292:	43 ee       	ldi	r20, 0xE3	; 227
    a294:	59 e1       	ldi	r21, 0x19	; 25
    a296:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
    a29a:	53 c0       	rjmp	.+166    	; 0xa342 <FMenuPassword+0x162>
          break;	 
	 case mpProcessPassword:
		      
	      sprintf_P(strMasterPass,PSTR(MASTER_PASSWORD)); 
    a29c:	00 d0       	rcall	.+0      	; 0xa29e <FMenuPassword+0xbe>
    a29e:	00 d0       	rcall	.+0      	; 0xa2a0 <FMenuPassword+0xc0>
    a2a0:	8e 01       	movw	r16, r28
    a2a2:	0f 5f       	subi	r16, 0xFF	; 255
    a2a4:	1f 4f       	sbci	r17, 0xFF	; 255
    a2a6:	ed b7       	in	r30, 0x3d	; 61
    a2a8:	fe b7       	in	r31, 0x3e	; 62
    a2aa:	12 83       	std	Z+2, r17	; 0x02
    a2ac:	01 83       	std	Z+1, r16	; 0x01
    a2ae:	8b ed       	ldi	r24, 0xDB	; 219
    a2b0:	99 e1       	ldi	r25, 0x19	; 25
    a2b2:	94 83       	std	Z+4, r25	; 0x04
    a2b4:	83 83       	std	Z+3, r24	; 0x03
    a2b6:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	      eeprom_read_block((void*) &strAdminPass, (const void*) &DefSpvPassword, 10);
    a2ba:	0f 90       	pop	r0
    a2bc:	0f 90       	pop	r0
    a2be:	0f 90       	pop	r0
    a2c0:	0f 90       	pop	r0
    a2c2:	b5 e1       	ldi	r27, 0x15	; 21
    a2c4:	eb 2e       	mov	r14, r27
    a2c6:	f1 2c       	mov	r15, r1
    a2c8:	ec 0e       	add	r14, r28
    a2ca:	fd 1e       	adc	r15, r29
    a2cc:	c7 01       	movw	r24, r14
    a2ce:	61 e0       	ldi	r22, 0x01	; 1
    a2d0:	70 e0       	ldi	r23, 0x00	; 0
    a2d2:	4a e0       	ldi	r20, 0x0A	; 10
    a2d4:	50 e0       	ldi	r21, 0x00	; 0
    a2d6:	0e 94 56 aa 	call	0x154ac	; 0x154ac <__eerd_block_m128>
	      eeprom_read_block((void*) &strSystemPass, (const void*) &DefSysPassword, 10);
    a2da:	ab e0       	ldi	r26, 0x0B	; 11
    a2dc:	ca 2e       	mov	r12, r26
    a2de:	d1 2c       	mov	r13, r1
    a2e0:	cc 0e       	add	r12, r28
    a2e2:	dd 1e       	adc	r13, r29
    a2e4:	c6 01       	movw	r24, r12
    a2e6:	6b e0       	ldi	r22, 0x0B	; 11
    a2e8:	70 e0       	ldi	r23, 0x00	; 0
    a2ea:	4a e0       	ldi	r20, 0x0A	; 10
    a2ec:	50 e0       	ldi	r21, 0x00	; 0
    a2ee:	0e 94 56 aa 	call	0x154ac	; 0x154ac <__eerd_block_m128>
		  
		  if (strcmp(strMasterPass,strPassword)==0)
    a2f2:	c8 01       	movw	r24, r16
    a2f4:	6d e2       	ldi	r22, 0x2D	; 45
    a2f6:	73 e0       	ldi	r23, 0x03	; 3
    a2f8:	0e 94 05 a8 	call	0x1500a	; 0x1500a <strcmp>
    a2fc:	00 97       	sbiw	r24, 0x00	; 0
    a2fe:	11 f4       	brne	.+4      	; 0xa304 <FMenuPassword+0x124>
		       PassStatus=MP_VALID_MASTER;
    a300:	83 e0       	ldi	r24, 0x03	; 3
    a302:	08 c0       	rjmp	.+16     	; 0xa314 <FMenuPassword+0x134>
		  else
	      if (strcmp(strAdminPass,strPassword)==0){
    a304:	c7 01       	movw	r24, r14
    a306:	6d e2       	ldi	r22, 0x2D	; 45
    a308:	73 e0       	ldi	r23, 0x03	; 3
    a30a:	0e 94 05 a8 	call	0x1500a	; 0x1500a <strcmp>
    a30e:	00 97       	sbiw	r24, 0x00	; 0
    a310:	21 f4       	brne	.+8      	; 0xa31a <FMenuPassword+0x13a>
		       PassStatus=MP_VALID_ADMIN;
    a312:	84 e0       	ldi	r24, 0x04	; 4
    a314:	80 93 2c 03 	sts	0x032C, r24
    a318:	0b c0       	rjmp	.+22     	; 0xa330 <FMenuPassword+0x150>
               //lcd_printf(3,1,PSTR("Admin"));
               //_delay_ms(5000);
			   }
		  else if (strcmp(strSystemPass,strPassword)==0){
    a31a:	c6 01       	movw	r24, r12
    a31c:	6d e2       	ldi	r22, 0x2D	; 45
    a31e:	73 e0       	ldi	r23, 0x03	; 3
    a320:	0e 94 05 a8 	call	0x1500a	; 0x1500a <strcmp>
    a324:	00 97       	sbiw	r24, 0x00	; 0
    a326:	11 f4       	brne	.+4      	; 0xa32c <FMenuPassword+0x14c>
		       PassStatus=MP_VALID_SYSTEM;
    a328:	85 e0       	ldi	r24, 0x05	; 5
    a32a:	f4 cf       	rjmp	.-24     	; 0xa314 <FMenuPassword+0x134>
			   //lcd_printf(3,1,PSTR("System"));
               //_delay_ms(5000);
			   }
		  else PassStatus=MP_INVALID;
    a32c:	b0 92 2c 03 	sts	0x032C, r11
		  stMenuPasword=mpExit;
    a330:	83 e0       	ldi	r24, 0x03	; 3
    a332:	80 93 37 03 	sts	0x0337, r24
    a336:	05 c0       	rjmp	.+10     	; 0xa342 <FMenuPassword+0x162>
	      break;
	 case mpExit:
	      //lcd_print(3,1,strPassword);
		  //_delay_ms(5000);
	      stMenuPasword=mpInitPassword;
    a338:	10 92 37 03 	sts	0x0337, r1
	      Result=PassStatus;
    a33c:	80 91 2c 03 	lds	r24, 0x032C
	      break;
    a340:	01 c0       	rjmp	.+2      	; 0xa344 <FMenuPassword+0x164>
char FMenuPassword(){
static char stMenuPasword=mpInitPassword,strPassword[10],PassStatus=MP_NONE;;
       char Result=MP_NONE,strMasterPass[10],strSystemPass[10],strAdminPass[10];
       char uiResult;

     Result=MP_NONE;
    a342:	80 e0       	ldi	r24, 0x00	; 0
	      stMenuPasword=mpInitPassword;
	      Result=PassStatus;
	      break;
	 }
   return Result;
}
    a344:	6e 96       	adiw	r28, 0x1e	; 30
    a346:	0f b6       	in	r0, 0x3f	; 63
    a348:	f8 94       	cli
    a34a:	de bf       	out	0x3e, r29	; 62
    a34c:	0f be       	out	0x3f, r0	; 63
    a34e:	cd bf       	out	0x3d, r28	; 61
    a350:	cf 91       	pop	r28
    a352:	df 91       	pop	r29
    a354:	1f 91       	pop	r17
    a356:	0f 91       	pop	r16
    a358:	ff 90       	pop	r15
    a35a:	ef 90       	pop	r14
    a35c:	df 90       	pop	r13
    a35e:	cf 90       	pop	r12
    a360:	bf 90       	pop	r11
    a362:	08 95       	ret

0000a364 <FMenuChangeMOP>:
	      break;
	 }
   return Result;
}

char FMenuChangeMOP(){
    a364:	9f 92       	push	r9
    a366:	af 92       	push	r10
    a368:	bf 92       	push	r11
    a36a:	cf 92       	push	r12
    a36c:	df 92       	push	r13
    a36e:	ef 92       	push	r14
    a370:	ff 92       	push	r15
    a372:	0f 93       	push	r16
    a374:	1f 93       	push	r17
    a376:	df 93       	push	r29
    a378:	cf 93       	push	r28
    a37a:	cd b7       	in	r28, 0x3d	; 61
    a37c:	de b7       	in	r29, 0x3e	; 62
    a37e:	a3 97       	sbiw	r28, 0x23	; 35
    a380:	0f b6       	in	r0, 0x3f	; 63
    a382:	f8 94       	cli
    a384:	de bf       	out	0x3e, r29	; 62
    a386:	0f be       	out	0x3f, r0	; 63
    a388:	cd bf       	out	0x3d, r28	; 61
       char lcdteks[20],i,msgResult;       
	   char strBankName[11],strSurcharge[4],Result;
       char uiResult,KeyPressed=0,KeyChar,FIPResult;

     Result=MENU_NONE; 
	 switch(stChangeMOP){
    a38a:	e0 91 40 03 	lds	r30, 0x0340
    a38e:	f0 e0       	ldi	r31, 0x00	; 0
    a390:	ee 31       	cpi	r30, 0x1E	; 30
    a392:	f1 05       	cpc	r31, r1
    a394:	08 f0       	brcs	.+2      	; 0xa398 <FMenuChangeMOP+0x34>
    a396:	cc c3       	rjmp	.+1944   	; 0xab30 <FMenuChangeMOP+0x7cc>
    a398:	e7 5a       	subi	r30, 0xA7	; 167
    a39a:	ff 4f       	sbci	r31, 0xFF	; 255
    a39c:	ee 0f       	add	r30, r30
    a39e:	ff 1f       	adc	r31, r31
    a3a0:	05 90       	lpm	r0, Z+
    a3a2:	f4 91       	lpm	r31, Z+
    a3a4:	e0 2d       	mov	r30, r0
    a3a6:	09 94       	ijmp
	 case cmInit:
	      MOPType=PAY_NONE;
    a3a8:	85 e0       	ldi	r24, 0x05	; 5
    a3aa:	80 93 97 02 	sts	0x0297, r24
    a3ae:	32 c1       	rjmp	.+612    	; 0xa614 <FMenuChangeMOP+0x2b0>
		  stChangeMOP=cmDisplayMOPOption;
	      break;
	 case cmDisplayMOPOption: //12345678901234567890
	      lcd_clear();
    a3b0:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
	      lcd_printf(1,1,PSTR("   Select Payment   "));
    a3b4:	81 e0       	ldi	r24, 0x01	; 1
    a3b6:	61 e0       	ldi	r22, 0x01	; 1
    a3b8:	49 ec       	ldi	r20, 0xC9	; 201
    a3ba:	5b e1       	ldi	r21, 0x1B	; 27
    a3bc:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
	      lcd_printf(2,1,PSTR("1.Account 3.Voucher "));
    a3c0:	82 e0       	ldi	r24, 0x02	; 2
    a3c2:	61 e0       	ldi	r22, 0x01	; 1
    a3c4:	44 eb       	ldi	r20, 0xB4	; 180
    a3c6:	5b e1       	ldi	r21, 0x1B	; 27
    a3c8:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
	      lcd_printf(3,1,PSTR("2.Bank    4.PumpTest"));
    a3cc:	83 e0       	ldi	r24, 0x03	; 3
    a3ce:	61 e0       	ldi	r22, 0x01	; 1
    a3d0:	4f e9       	ldi	r20, 0x9F	; 159
    a3d2:	5b e1       	ldi	r21, 0x1B	; 27
    a3d4:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
	      lcd_printf(4,1,PSTR("[*]Back             "));
    a3d8:	84 e0       	ldi	r24, 0x04	; 4
    a3da:	61 e0       	ldi	r22, 0x01	; 1
    a3dc:	4a e8       	ldi	r20, 0x8A	; 138
    a3de:	5b e1       	ldi	r21, 0x1B	; 27
    a3e0:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
          stChangeMOP=cmInputMOP;		 
    a3e4:	82 e0       	ldi	r24, 0x02	; 2
    a3e6:	9d c3       	rjmp	.+1850   	; 0xab22 <FMenuChangeMOP+0x7be>
		  break;
	 case cmInputMOP:
	      KeyPressed=_key_scan(1);
    a3e8:	81 e0       	ldi	r24, 0x01	; 1
    a3ea:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <_key_scan>
    a3ee:	08 2f       	mov	r16, r24
		  KeyChar=_key_btn(KeyPressed);
    a3f0:	0e 94 49 a3 	call	0x14692	; 0x14692 <_key_btn>
		  if ((KeyChar>='1')&&(KeyChar<='4')){
    a3f4:	98 2f       	mov	r25, r24
    a3f6:	91 53       	subi	r25, 0x31	; 49
    a3f8:	94 30       	cpi	r25, 0x04	; 4
    a3fa:	c0 f4       	brcc	.+48     	; 0xa42c <FMenuChangeMOP+0xc8>
              switch(KeyChar){
    a3fc:	83 33       	cpi	r24, 0x33	; 51
    a3fe:	59 f0       	breq	.+22     	; 0xa416 <FMenuChangeMOP+0xb2>
    a400:	84 33       	cpi	r24, 0x34	; 52
    a402:	71 f0       	breq	.+28     	; 0xa420 <FMenuChangeMOP+0xbc>
    a404:	82 33       	cpi	r24, 0x32	; 50
    a406:	11 f0       	breq	.+4      	; 0xa40c <FMenuChangeMOP+0xa8>
		        case '1':MOPType=PAY_ACCOUNT; stChangeMOP=cmSelectFIP;         break;
    a408:	81 e0       	ldi	r24, 0x01	; 1
    a40a:	0b c0       	rjmp	.+22     	; 0xa422 <FMenuChangeMOP+0xbe>
		        case '2':MOPType=PAY_BANK;    stChangeMOP=cmSelectBankName;    break;
    a40c:	82 e0       	ldi	r24, 0x02	; 2
    a40e:	80 93 97 02 	sts	0x0297, r24
    a412:	8b e0       	ldi	r24, 0x0B	; 11
    a414:	09 c0       	rjmp	.+18     	; 0xa428 <FMenuChangeMOP+0xc4>
		        case '3':MOPType=PAY_VOUCHER; stChangeMOP=cmDispInputVoucher;  break;
    a416:	83 e0       	ldi	r24, 0x03	; 3
    a418:	80 93 97 02 	sts	0x0297, r24
    a41c:	8f e0       	ldi	r24, 0x0F	; 15
    a41e:	04 c0       	rjmp	.+8      	; 0xa428 <FMenuChangeMOP+0xc4>
		        case '4':MOPType=PAY_PUMPTEST;stChangeMOP=cmSelectFIP;         break;
    a420:	84 e0       	ldi	r24, 0x04	; 4
    a422:	80 93 97 02 	sts	0x0297, r24
    a426:	89 e0       	ldi	r24, 0x09	; 9
    a428:	80 93 40 03 	sts	0x0340, r24
		     }
		  }
		  if (KeyPressed==_KEY_CANCEL) stChangeMOP=cmExitChangeMOP;
    a42c:	07 3e       	cpi	r16, 0xE7	; 231
    a42e:	09 f0       	breq	.+2      	; 0xa432 <FMenuChangeMOP+0xce>
    a430:	7f c3       	rjmp	.+1790   	; 0xab30 <FMenuChangeMOP+0x7cc>
    a432:	74 c3       	rjmp	.+1768   	; 0xab1c <FMenuChangeMOP+0x7b8>
	      break;
	 case cmDispInputVoucher://Enter Voucher number
          lcd_clear();
    a434:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
		  lcd_printf(1,1,PSTR("Kode Voucher"));
    a438:	81 e0       	ldi	r24, 0x01	; 1
    a43a:	61 e0       	ldi	r22, 0x01	; 1
    a43c:	4d e7       	ldi	r20, 0x7D	; 125
    a43e:	5b e1       	ldi	r21, 0x1B	; 27
    a440:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  lcd_printf(2,1,PSTR("_"));
    a444:	82 e0       	ldi	r24, 0x02	; 2
    a446:	61 e0       	ldi	r22, 0x01	; 1
    a448:	4b e7       	ldi	r20, 0x7B	; 123
    a44a:	5b e1       	ldi	r21, 0x1B	; 27
    a44c:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    a450:	84 e0       	ldi	r24, 0x04	; 4
    a452:	61 e0       	ldi	r22, 0x01	; 1
    a454:	46 e6       	ldi	r20, 0x66	; 102
    a456:	5b e1       	ldi	r21, 0x1B	; 27
    a458:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  FillChar(strVoucherNum,sizeof(strVoucherNum),0);
    a45c:	85 e3       	ldi	r24, 0x35	; 53
    a45e:	9d e0       	ldi	r25, 0x0D	; 13
    a460:	65 e1       	ldi	r22, 0x15	; 21
    a462:	70 e0       	ldi	r23, 0x00	; 0
    a464:	40 e0       	ldi	r20, 0x00	; 0
    a466:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>
          stChangeMOP=cmInputVoucher;		  
    a46a:	87 e0       	ldi	r24, 0x07	; 7
    a46c:	5a c3       	rjmp	.+1716   	; 0xab22 <FMenuChangeMOP+0x7be>
	      break;
     case cmInputVoucher:
          uiResult=UserInput(UI_NUMBER_R,2,1,strVoucherNum,0,13);
    a46e:	81 e0       	ldi	r24, 0x01	; 1
    a470:	62 e0       	ldi	r22, 0x02	; 2
    a472:	41 e0       	ldi	r20, 0x01	; 1
    a474:	25 e3       	ldi	r18, 0x35	; 53
    a476:	3d e0       	ldi	r19, 0x0D	; 13
    a478:	00 e0       	ldi	r16, 0x00	; 0
    a47a:	10 e0       	ldi	r17, 0x00	; 0
    a47c:	9d e0       	ldi	r25, 0x0D	; 13
    a47e:	e9 2e       	mov	r14, r25
    a480:	0e 94 d3 39 	call	0x73a6	; 0x73a6 <UserInput>
	      if (uiResult==USER_OK){
    a484:	83 30       	cpi	r24, 0x03	; 3
    a486:	11 f4       	brne	.+4      	; 0xa48c <FMenuChangeMOP+0x128>
		     stChangeMOP=cmSelectFIP;
    a488:	89 e0       	ldi	r24, 0x09	; 9
    a48a:	4b c3       	rjmp	.+1686   	; 0xab22 <FMenuChangeMOP+0x7be>
			 }
		  else
	      if (uiResult==USER_CANCEL)stChangeMOP=cmDisplayMOPOption;
    a48c:	81 30       	cpi	r24, 0x01	; 1
    a48e:	09 f4       	brne	.+2      	; 0xa492 <FMenuChangeMOP+0x12e>
    a490:	48 c3       	rjmp	.+1680   	; 0xab22 <FMenuChangeMOP+0x7be>
		  else
		  if (uiResult==USER_ENTRY)lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
    a492:	84 30       	cpi	r24, 0x04	; 4
    a494:	21 f4       	brne	.+8      	; 0xa49e <FMenuChangeMOP+0x13a>
    a496:	61 e0       	ldi	r22, 0x01	; 1
    a498:	41 e5       	ldi	r20, 0x51	; 81
    a49a:	5b e1       	ldi	r21, 0x1B	; 27
    a49c:	23 c1       	rjmp	.+582    	; 0xa6e4 <FMenuChangeMOP+0x380>
		  else
		  if (uiResult==USER_NO_DATA)lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    a49e:	85 30       	cpi	r24, 0x05	; 5
    a4a0:	09 f0       	breq	.+2      	; 0xa4a4 <FMenuChangeMOP+0x140>
    a4a2:	46 c3       	rjmp	.+1676   	; 0xab30 <FMenuChangeMOP+0x7cc>
    a4a4:	84 e0       	ldi	r24, 0x04	; 4
    a4a6:	61 e0       	ldi	r22, 0x01	; 1
    a4a8:	4c e3       	ldi	r20, 0x3C	; 60
    a4aa:	5b e1       	ldi	r21, 0x1B	; 27
    a4ac:	1b c1       	rjmp	.+566    	; 0xa6e4 <FMenuChangeMOP+0x380>
	      break;
	 case cmSelectFIP:
	      FIPResult=menu_FIP(&FIP_Used,strFIP_ID);
    a4ae:	8f e3       	ldi	r24, 0x3F	; 63
    a4b0:	93 e0       	ldi	r25, 0x03	; 3
    a4b2:	6d e9       	ldi	r22, 0x9D	; 157
    a4b4:	78 e0       	ldi	r23, 0x08	; 8
    a4b6:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <menu_FIP>
		  if (FIPResult==FIP_DONE){
    a4ba:	88 23       	and	r24, r24
    a4bc:	11 f4       	brne	.+4      	; 0xa4c2 <FMenuChangeMOP+0x15e>
		      //sprintf_P(strFIP_ID,PSTR("%.2d"),FIP_Used);
		      stChangeMOP=cmFlowFIP;
    a4be:	8e e0       	ldi	r24, 0x0E	; 14
    a4c0:	30 c3       	rjmp	.+1632   	; 0xab22 <FMenuChangeMOP+0x7be>
		  }
		  else
		  if (FIPResult==FIP_CANCEL){
    a4c2:	82 30       	cpi	r24, 0x02	; 2
    a4c4:	09 f0       	breq	.+2      	; 0xa4c8 <FMenuChangeMOP+0x164>
    a4c6:	34 c3       	rjmp	.+1640   	; 0xab30 <FMenuChangeMOP+0x7cc>
		      if (MOPType==PAY_ACCOUNT)stChangeMOP=cmDisplayMOPOption;
    a4c8:	80 91 97 02 	lds	r24, 0x0297
    a4cc:	81 30       	cpi	r24, 0x01	; 1
    a4ce:	09 f4       	brne	.+2      	; 0xa4d2 <FMenuChangeMOP+0x16e>
    a4d0:	28 c3       	rjmp	.+1616   	; 0xab22 <FMenuChangeMOP+0x7be>
		      if (MOPType==PAY_BANK)stChangeMOP=cmSelectBankName;
    a4d2:	82 30       	cpi	r24, 0x02	; 2
    a4d4:	09 f4       	brne	.+2      	; 0xa4d8 <FMenuChangeMOP+0x174>
    a4d6:	f7 c0       	rjmp	.+494    	; 0xa6c6 <FMenuChangeMOP+0x362>
		      if (MOPType==PAY_VOUCHER)stChangeMOP=cmDispInputVoucher;
    a4d8:	83 30       	cpi	r24, 0x03	; 3
    a4da:	11 f4       	brne	.+4      	; 0xa4e0 <FMenuChangeMOP+0x17c>
    a4dc:	8f e0       	ldi	r24, 0x0F	; 15
    a4de:	21 c3       	rjmp	.+1602   	; 0xab22 <FMenuChangeMOP+0x7be>
		      if (MOPType==PAY_PUMPTEST)stChangeMOP=cmDisplayMOPOption;		  
    a4e0:	84 30       	cpi	r24, 0x04	; 4
    a4e2:	09 f4       	brne	.+2      	; 0xa4e6 <FMenuChangeMOP+0x182>
    a4e4:	97 c0       	rjmp	.+302    	; 0xa614 <FMenuChangeMOP+0x2b0>
    a4e6:	24 c3       	rjmp	.+1608   	; 0xab30 <FMenuChangeMOP+0x7cc>
     case cmSelectFIPInput:
		
	      break;
		  //Load Bank Information
	 case cmSelectBankName:
	      lcd_clear();
    a4e8:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
		  lcd_printf(1,1,PSTR("Select Bank"));
    a4ec:	81 e0       	ldi	r24, 0x01	; 1
    a4ee:	61 e0       	ldi	r22, 0x01	; 1
    a4f0:	40 e3       	ldi	r20, 0x30	; 48
    a4f2:	5b e1       	ldi	r21, 0x1B	; 27
    a4f4:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  iLoop=0;
    a4f8:	10 92 3b 03 	sts	0x033B, r1
    a4fc:	10 92 3a 03 	sts	0x033A, r1
	      for(iLoop=0;iLoop<4;iLoop++){
			  eeprom_read_block((void*) &strBankName, (const void*) &DefBankName[iLoop], 11);
    a500:	8e 01       	movw	r16, r28
    a502:	0b 5f       	subi	r16, 0xFB	; 251
    a504:	1f 4f       	sbci	r17, 0xFF	; 255
    a506:	8b e0       	ldi	r24, 0x0B	; 11
    a508:	c8 2e       	mov	r12, r24
    a50a:	d1 2c       	mov	r13, r1
			  if (strlen(strBankName<=10)){
			     sprintf_P(lcdteks,PSTR("%d.%s"),(iLoop+1),strBankName);
    a50c:	b0 e1       	ldi	r27, 0x10	; 16
    a50e:	eb 2e       	mov	r14, r27
    a510:	f1 2c       	mov	r15, r1
    a512:	ec 0e       	add	r14, r28
    a514:	fd 1e       	adc	r15, r29
    a516:	aa e2       	ldi	r26, 0x2A	; 42
    a518:	aa 2e       	mov	r10, r26
    a51a:	ab e1       	ldi	r26, 0x1B	; 27
    a51c:	ba 2e       	mov	r11, r26
			     lcd_print((2+(iLoop%2)),(1+((iLoop/2)*12)),lcdteks);
    a51e:	fc e0       	ldi	r31, 0x0C	; 12
    a520:	9f 2e       	mov	r9, r31
		  //Load Bank Information
	 case cmSelectBankName:
	      lcd_clear();
		  lcd_printf(1,1,PSTR("Select Bank"));
		  iLoop=0;
	      for(iLoop=0;iLoop<4;iLoop++){
    a522:	57 c0       	rjmp	.+174    	; 0xa5d2 <FMenuChangeMOP+0x26e>
			  eeprom_read_block((void*) &strBankName, (const void*) &DefBankName[iLoop], 11);
    a524:	8c 9d       	mul	r24, r12
    a526:	b0 01       	movw	r22, r0
    a528:	8d 9d       	mul	r24, r13
    a52a:	70 0d       	add	r23, r0
    a52c:	9c 9d       	mul	r25, r12
    a52e:	70 0d       	add	r23, r0
    a530:	11 24       	eor	r1, r1
    a532:	66 5f       	subi	r22, 0xF6	; 246
    a534:	7e 4f       	sbci	r23, 0xFE	; 254
    a536:	c8 01       	movw	r24, r16
    a538:	4b e0       	ldi	r20, 0x0B	; 11
    a53a:	50 e0       	ldi	r21, 0x00	; 0
    a53c:	0e 94 56 aa 	call	0x154ac	; 0x154ac <__eerd_block_m128>
	      break;
	 }
   return Result;
}

char FMenuChangeMOP(){
    a540:	e1 e0       	ldi	r30, 0x01	; 1
    a542:	f0 e0       	ldi	r31, 0x00	; 0
    a544:	0b 30       	cpi	r16, 0x0B	; 11
    a546:	11 05       	cpc	r17, r1
    a548:	10 f0       	brcs	.+4      	; 0xa54e <FMenuChangeMOP+0x1ea>
    a54a:	e0 e0       	ldi	r30, 0x00	; 0
    a54c:	f0 e0       	ldi	r31, 0x00	; 0
	      lcd_clear();
		  lcd_printf(1,1,PSTR("Select Bank"));
		  iLoop=0;
	      for(iLoop=0;iLoop<4;iLoop++){
			  eeprom_read_block((void*) &strBankName, (const void*) &DefBankName[iLoop], 11);
			  if (strlen(strBankName<=10)){
    a54e:	80 81       	ld	r24, Z
    a550:	88 23       	and	r24, r24
    a552:	b1 f1       	breq	.+108    	; 0xa5c0 <FMenuChangeMOP+0x25c>
			     sprintf_P(lcdteks,PSTR("%d.%s"),(iLoop+1),strBankName);
    a554:	8d b7       	in	r24, 0x3d	; 61
    a556:	9e b7       	in	r25, 0x3e	; 62
    a558:	08 97       	sbiw	r24, 0x08	; 8
    a55a:	0f b6       	in	r0, 0x3f	; 63
    a55c:	f8 94       	cli
    a55e:	9e bf       	out	0x3e, r25	; 62
    a560:	0f be       	out	0x3f, r0	; 63
    a562:	8d bf       	out	0x3d, r24	; 61
    a564:	ed b7       	in	r30, 0x3d	; 61
    a566:	fe b7       	in	r31, 0x3e	; 62
    a568:	31 96       	adiw	r30, 0x01	; 1
    a56a:	ad b7       	in	r26, 0x3d	; 61
    a56c:	be b7       	in	r27, 0x3e	; 62
    a56e:	12 96       	adiw	r26, 0x02	; 2
    a570:	fc 92       	st	X, r15
    a572:	ee 92       	st	-X, r14
    a574:	11 97       	sbiw	r26, 0x01	; 1
    a576:	b3 82       	std	Z+3, r11	; 0x03
    a578:	a2 82       	std	Z+2, r10	; 0x02
    a57a:	80 91 3a 03 	lds	r24, 0x033A
    a57e:	90 91 3b 03 	lds	r25, 0x033B
    a582:	01 96       	adiw	r24, 0x01	; 1
    a584:	95 83       	std	Z+5, r25	; 0x05
    a586:	84 83       	std	Z+4, r24	; 0x04
    a588:	17 83       	std	Z+7, r17	; 0x07
    a58a:	06 83       	std	Z+6, r16	; 0x06
    a58c:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
			     lcd_print((2+(iLoop%2)),(1+((iLoop/2)*12)),lcdteks);
    a590:	60 91 3a 03 	lds	r22, 0x033A
    a594:	70 91 3b 03 	lds	r23, 0x033B
    a598:	ed b7       	in	r30, 0x3d	; 61
    a59a:	fe b7       	in	r31, 0x3e	; 62
    a59c:	38 96       	adiw	r30, 0x08	; 8
    a59e:	0f b6       	in	r0, 0x3f	; 63
    a5a0:	f8 94       	cli
    a5a2:	fe bf       	out	0x3e, r31	; 62
    a5a4:	0f be       	out	0x3f, r0	; 63
    a5a6:	ed bf       	out	0x3d, r30	; 61
    a5a8:	86 2f       	mov	r24, r22
    a5aa:	81 70       	andi	r24, 0x01	; 1
    a5ac:	76 95       	lsr	r23
    a5ae:	67 95       	ror	r22
    a5b0:	69 9d       	mul	r22, r9
    a5b2:	60 2d       	mov	r22, r0
    a5b4:	11 24       	eor	r1, r1
    a5b6:	6f 5f       	subi	r22, 0xFF	; 255
    a5b8:	8e 5f       	subi	r24, 0xFE	; 254
    a5ba:	a7 01       	movw	r20, r14
    a5bc:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
		  //Load Bank Information
	 case cmSelectBankName:
	      lcd_clear();
		  lcd_printf(1,1,PSTR("Select Bank"));
		  iLoop=0;
	      for(iLoop=0;iLoop<4;iLoop++){
    a5c0:	80 91 3a 03 	lds	r24, 0x033A
    a5c4:	90 91 3b 03 	lds	r25, 0x033B
    a5c8:	01 96       	adiw	r24, 0x01	; 1
    a5ca:	90 93 3b 03 	sts	0x033B, r25
    a5ce:	80 93 3a 03 	sts	0x033A, r24
    a5d2:	80 91 3a 03 	lds	r24, 0x033A
    a5d6:	90 91 3b 03 	lds	r25, 0x033B
    a5da:	84 30       	cpi	r24, 0x04	; 4
    a5dc:	91 05       	cpc	r25, r1
    a5de:	08 f4       	brcc	.+2      	; 0xa5e2 <FMenuChangeMOP+0x27e>
    a5e0:	a1 cf       	rjmp	.-190    	; 0xa524 <FMenuChangeMOP+0x1c0>
			  if (strlen(strBankName<=10)){
			     sprintf_P(lcdteks,PSTR("%d.%s"),(iLoop+1),strBankName);
			     lcd_print((2+(iLoop%2)),(1+((iLoop/2)*12)),lcdteks);
				 }
		  }
	      lcd_printf(4,1,PSTR("[*]Back"));
    a5e2:	84 e0       	ldi	r24, 0x04	; 4
    a5e4:	61 e0       	ldi	r22, 0x01	; 1
    a5e6:	42 e2       	ldi	r20, 0x22	; 34
    a5e8:	5b e1       	ldi	r21, 0x1B	; 27
    a5ea:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  stChangeMOP=cmSelectBankNameInput;
    a5ee:	8c e0       	ldi	r24, 0x0C	; 12
    a5f0:	98 c2       	rjmp	.+1328   	; 0xab22 <FMenuChangeMOP+0x7be>
	      break;
     case cmSelectBankNameInput:
		  KeyPressed=_key_scan(1);
    a5f2:	81 e0       	ldi	r24, 0x01	; 1
    a5f4:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <_key_scan>
    a5f8:	08 2f       	mov	r16, r24
		  KeyChar=_key_btn(KeyPressed);
    a5fa:	0e 94 49 a3 	call	0x14692	; 0x14692 <_key_btn>
          if ((KeyChar>='1')&&(KeyChar<='4')){
    a5fe:	81 53       	subi	r24, 0x31	; 49
    a600:	84 30       	cpi	r24, 0x04	; 4
    a602:	28 f4       	brcc	.+10     	; 0xa60e <FMenuChangeMOP+0x2aa>
		      BankIdx=KeyChar-'1';
    a604:	80 93 3e 03 	sts	0x033E, r24
			  stChangeMOP=cmSelectFIP;
    a608:	89 e0       	ldi	r24, 0x09	; 9
    a60a:	80 93 40 03 	sts	0x0340, r24
		  }
		  if (KeyPressed==_KEY_CANCEL) stChangeMOP=cmDisplayMOPOption;
    a60e:	07 3e       	cpi	r16, 0xE7	; 231
    a610:	09 f0       	breq	.+2      	; 0xa614 <FMenuChangeMOP+0x2b0>
    a612:	8e c2       	rjmp	.+1308   	; 0xab30 <FMenuChangeMOP+0x7cc>
    a614:	81 e0       	ldi	r24, 0x01	; 1
    a616:	85 c2       	rjmp	.+1290   	; 0xab22 <FMenuChangeMOP+0x7be>

	      break;
     case cmDispBankSurcharge:
	      lcd_clear();
    a618:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
		  eeprom_read_block((void*) &strBankName, (const void*) &DefBankName[BankIdx], 11);
    a61c:	65 e0       	ldi	r22, 0x05	; 5
    a61e:	e6 2e       	mov	r14, r22
    a620:	f1 2c       	mov	r15, r1
    a622:	ec 0e       	add	r14, r28
    a624:	fd 1e       	adc	r15, r29
    a626:	60 91 3e 03 	lds	r22, 0x033E
    a62a:	8b e0       	ldi	r24, 0x0B	; 11
    a62c:	68 9f       	mul	r22, r24
    a62e:	b0 01       	movw	r22, r0
    a630:	11 24       	eor	r1, r1
    a632:	66 5f       	subi	r22, 0xF6	; 246
    a634:	7e 4f       	sbci	r23, 0xFE	; 254
    a636:	c7 01       	movw	r24, r14
    a638:	4b e0       	ldi	r20, 0x0B	; 11
    a63a:	50 e0       	ldi	r21, 0x00	; 0
    a63c:	0e 94 56 aa 	call	0x154ac	; 0x154ac <__eerd_block_m128>
		  sprintf_P(lcdteks,PSTR("%s"),strBankName);
    a640:	00 d0       	rcall	.+0      	; 0xa642 <FMenuChangeMOP+0x2de>
    a642:	00 d0       	rcall	.+0      	; 0xa644 <FMenuChangeMOP+0x2e0>
    a644:	00 d0       	rcall	.+0      	; 0xa646 <FMenuChangeMOP+0x2e2>
    a646:	ed b7       	in	r30, 0x3d	; 61
    a648:	fe b7       	in	r31, 0x3e	; 62
    a64a:	31 96       	adiw	r30, 0x01	; 1
    a64c:	8e 01       	movw	r16, r28
    a64e:	00 5f       	subi	r16, 0xF0	; 240
    a650:	1f 4f       	sbci	r17, 0xFF	; 255
    a652:	ad b7       	in	r26, 0x3d	; 61
    a654:	be b7       	in	r27, 0x3e	; 62
    a656:	12 96       	adiw	r26, 0x02	; 2
    a658:	1c 93       	st	X, r17
    a65a:	0e 93       	st	-X, r16
    a65c:	11 97       	sbiw	r26, 0x01	; 1
    a65e:	8f e1       	ldi	r24, 0x1F	; 31
    a660:	9b e1       	ldi	r25, 0x1B	; 27
    a662:	93 83       	std	Z+3, r25	; 0x03
    a664:	82 83       	std	Z+2, r24	; 0x02
    a666:	f5 82       	std	Z+5, r15	; 0x05
    a668:	e4 82       	std	Z+4, r14	; 0x04
    a66a:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		  lcd_print(1,1,lcdteks);
    a66e:	ed b7       	in	r30, 0x3d	; 61
    a670:	fe b7       	in	r31, 0x3e	; 62
    a672:	36 96       	adiw	r30, 0x06	; 6
    a674:	0f b6       	in	r0, 0x3f	; 63
    a676:	f8 94       	cli
    a678:	fe bf       	out	0x3e, r31	; 62
    a67a:	0f be       	out	0x3f, r0	; 63
    a67c:	ed bf       	out	0x3d, r30	; 61
    a67e:	81 e0       	ldi	r24, 0x01	; 1
    a680:	61 e0       	ldi	r22, 0x01	; 1
    a682:	a8 01       	movw	r20, r16
    a684:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
		  lcd_printf(2,1,PSTR("Surcharge:   _%"));
    a688:	82 e0       	ldi	r24, 0x02	; 2
    a68a:	61 e0       	ldi	r22, 0x01	; 1
    a68c:	4f e0       	ldi	r20, 0x0F	; 15
    a68e:	5b e1       	ldi	r21, 0x1B	; 27
    a690:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
	      lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    a694:	84 e0       	ldi	r24, 0x04	; 4
    a696:	61 e0       	ldi	r22, 0x01	; 1
    a698:	4a ef       	ldi	r20, 0xFA	; 250
    a69a:	5a e1       	ldi	r21, 0x1A	; 26
    a69c:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
          stChangeMOP=cmInputBankSurcharge;
    a6a0:	8d e0       	ldi	r24, 0x0D	; 13
    a6a2:	3f c2       	rjmp	.+1150   	; 0xab22 <FMenuChangeMOP+0x7be>
	      break;
	 case cmInputBankSurcharge:
	      //uiResult=UserInput(UI_NUMBER_L,2,14,ValueChar,100,3);
		  uiResult=UserInput(UI_NUMBER_L,2,14,strSurcharge,100,3);
    a6a4:	82 e0       	ldi	r24, 0x02	; 2
    a6a6:	62 e0       	ldi	r22, 0x02	; 2
    a6a8:	4e e0       	ldi	r20, 0x0E	; 14
    a6aa:	9e 01       	movw	r18, r28
    a6ac:	2f 5f       	subi	r18, 0xFF	; 255
    a6ae:	3f 4f       	sbci	r19, 0xFF	; 255
    a6b0:	04 e6       	ldi	r16, 0x64	; 100
    a6b2:	10 e0       	ldi	r17, 0x00	; 0
    a6b4:	53 e0       	ldi	r21, 0x03	; 3
    a6b6:	e5 2e       	mov	r14, r21
    a6b8:	0e 94 d3 39 	call	0x73a6	; 0x73a6 <UserInput>
	      if (uiResult==USER_OK)stChangeMOP=cmGenerateData;
    a6bc:	83 30       	cpi	r24, 0x03	; 3
    a6be:	09 f4       	brne	.+2      	; 0xa6c2 <FMenuChangeMOP+0x35e>
    a6c0:	a8 c0       	rjmp	.+336    	; 0xa812 <FMenuChangeMOP+0x4ae>
		  else
	      if (uiResult==USER_CANCEL)stChangeMOP=cmSelectBankName;
    a6c2:	81 30       	cpi	r24, 0x01	; 1
    a6c4:	11 f4       	brne	.+4      	; 0xa6ca <FMenuChangeMOP+0x366>
    a6c6:	8b e0       	ldi	r24, 0x0B	; 11
    a6c8:	2c c2       	rjmp	.+1112   	; 0xab22 <FMenuChangeMOP+0x7be>
		  else
		  if (uiResult==USER_ENTRY)lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
    a6ca:	84 30       	cpi	r24, 0x04	; 4
    a6cc:	21 f4       	brne	.+8      	; 0xa6d6 <FMenuChangeMOP+0x372>
    a6ce:	61 e0       	ldi	r22, 0x01	; 1
    a6d0:	45 ee       	ldi	r20, 0xE5	; 229
    a6d2:	5a e1       	ldi	r21, 0x1A	; 26
    a6d4:	07 c0       	rjmp	.+14     	; 0xa6e4 <FMenuChangeMOP+0x380>
		  else
		  if (uiResult==USER_NO_DATA)lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    a6d6:	85 30       	cpi	r24, 0x05	; 5
    a6d8:	09 f0       	breq	.+2      	; 0xa6dc <FMenuChangeMOP+0x378>
    a6da:	2a c2       	rjmp	.+1108   	; 0xab30 <FMenuChangeMOP+0x7cc>
    a6dc:	84 e0       	ldi	r24, 0x04	; 4
    a6de:	61 e0       	ldi	r22, 0x01	; 1
    a6e0:	40 ed       	ldi	r20, 0xD0	; 208
    a6e2:	5a e1       	ldi	r21, 0x1A	; 26
    a6e4:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
    a6e8:	23 c2       	rjmp	.+1094   	; 0xab30 <FMenuChangeMOP+0x7cc>
	      break;
     case cmFlowFIP:
          switch(MOPType){
    a6ea:	80 91 97 02 	lds	r24, 0x0297
    a6ee:	82 30       	cpi	r24, 0x02	; 2
    a6f0:	61 f0       	breq	.+24     	; 0xa70a <FMenuChangeMOP+0x3a6>
    a6f2:	83 30       	cpi	r24, 0x03	; 3
    a6f4:	20 f4       	brcc	.+8      	; 0xa6fe <FMenuChangeMOP+0x39a>
    a6f6:	81 30       	cpi	r24, 0x01	; 1
    a6f8:	09 f0       	breq	.+2      	; 0xa6fc <FMenuChangeMOP+0x398>
    a6fa:	1a c2       	rjmp	.+1076   	; 0xab30 <FMenuChangeMOP+0x7cc>
    a6fc:	0a c0       	rjmp	.+20     	; 0xa712 <FMenuChangeMOP+0x3ae>
    a6fe:	83 30       	cpi	r24, 0x03	; 3
    a700:	31 f0       	breq	.+12     	; 0xa70e <FMenuChangeMOP+0x3aa>
    a702:	84 30       	cpi	r24, 0x04	; 4
    a704:	09 f0       	breq	.+2      	; 0xa708 <FMenuChangeMOP+0x3a4>
    a706:	14 c2       	rjmp	.+1064   	; 0xab30 <FMenuChangeMOP+0x7cc>
    a708:	04 c0       	rjmp	.+8      	; 0xa712 <FMenuChangeMOP+0x3ae>
		  case PAY_ACCOUNT: stChangeMOP=cmDispCardTap;       break;
		  case PAY_BANK:    stChangeMOP=cmDispBankSurcharge; break;
    a70a:	81 e1       	ldi	r24, 0x11	; 17
    a70c:	0a c2       	rjmp	.+1044   	; 0xab22 <FMenuChangeMOP+0x7be>
		  case PAY_VOUCHER: stChangeMOP=cmProsesVoucher;      break;
    a70e:	85 e1       	ldi	r24, 0x15	; 21
    a710:	08 c2       	rjmp	.+1040   	; 0xab22 <FMenuChangeMOP+0x7be>
		  case PAY_PUMPTEST:stChangeMOP=cmDispCardTap;       break;
    a712:	82 e1       	ldi	r24, 0x12	; 18
    a714:	06 c2       	rjmp	.+1036   	; 0xab22 <FMenuChangeMOP+0x7be>
		  }
	      break;
     case cmDispCardTap:
	      lcd_clear();
    a716:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
	      lcd_printf(1,1,PSTR("Tap Kartu RFID"));
    a71a:	81 e0       	ldi	r24, 0x01	; 1
    a71c:	61 e0       	ldi	r22, 0x01	; 1
    a71e:	41 ec       	ldi	r20, 0xC1	; 193
    a720:	5a e1       	ldi	r21, 0x1A	; 26
    a722:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  sprintf_P(lcdteks,PSTR("FIP%s"),strFIP_ID);
    a726:	00 d0       	rcall	.+0      	; 0xa728 <FMenuChangeMOP+0x3c4>
    a728:	00 d0       	rcall	.+0      	; 0xa72a <FMenuChangeMOP+0x3c6>
    a72a:	00 d0       	rcall	.+0      	; 0xa72c <FMenuChangeMOP+0x3c8>
    a72c:	ed b7       	in	r30, 0x3d	; 61
    a72e:	fe b7       	in	r31, 0x3e	; 62
    a730:	31 96       	adiw	r30, 0x01	; 1
    a732:	8e 01       	movw	r16, r28
    a734:	00 5f       	subi	r16, 0xF0	; 240
    a736:	1f 4f       	sbci	r17, 0xFF	; 255
    a738:	ad b7       	in	r26, 0x3d	; 61
    a73a:	be b7       	in	r27, 0x3e	; 62
    a73c:	12 96       	adiw	r26, 0x02	; 2
    a73e:	1c 93       	st	X, r17
    a740:	0e 93       	st	-X, r16
    a742:	11 97       	sbiw	r26, 0x01	; 1
    a744:	8b eb       	ldi	r24, 0xBB	; 187
    a746:	9a e1       	ldi	r25, 0x1A	; 26
    a748:	93 83       	std	Z+3, r25	; 0x03
    a74a:	82 83       	std	Z+2, r24	; 0x02
    a74c:	8d e9       	ldi	r24, 0x9D	; 157
    a74e:	98 e0       	ldi	r25, 0x08	; 8
    a750:	95 83       	std	Z+5, r25	; 0x05
    a752:	84 83       	std	Z+4, r24	; 0x04
    a754:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		  lcd_print(2,1,lcdteks);
    a758:	ed b7       	in	r30, 0x3d	; 61
    a75a:	fe b7       	in	r31, 0x3e	; 62
    a75c:	36 96       	adiw	r30, 0x06	; 6
    a75e:	0f b6       	in	r0, 0x3f	; 63
    a760:	f8 94       	cli
    a762:	fe bf       	out	0x3e, r31	; 62
    a764:	0f be       	out	0x3f, r0	; 63
    a766:	ed bf       	out	0x3d, r30	; 61
    a768:	82 e0       	ldi	r24, 0x02	; 2
    a76a:	61 e0       	ldi	r22, 0x01	; 1
    a76c:	a8 01       	movw	r20, r16
    a76e:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
          lcd_printf(4,1,PSTR("[*]Back    [#]Exit"));
    a772:	84 e0       	ldi	r24, 0x04	; 4
    a774:	61 e0       	ldi	r22, 0x01	; 1
    a776:	48 ea       	ldi	r20, 0xA8	; 168
    a778:	5a e1       	ldi	r21, 0x1A	; 26
    a77a:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  IsRFIDDetected=False;
    a77e:	10 92 76 02 	sts	0x0276, r1
          stChangeMOP=cmRFIDCardInput;
    a782:	83 e1       	ldi	r24, 0x13	; 19
    a784:	ce c1       	rjmp	.+924    	; 0xab22 <FMenuChangeMOP+0x7be>
	      break;
	 case cmRFIDCardInput:
		  KeyPressed=_key_scan(1);
    a786:	81 e0       	ldi	r24, 0x01	; 1
    a788:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <_key_scan>
    a78c:	08 2f       	mov	r16, r24
		  KeyChar=_key_btn(KeyPressed);
    a78e:	0e 94 49 a3 	call	0x14692	; 0x14692 <_key_btn>
		  if (KeyPressed==_KEY_ENTER){
    a792:	07 3b       	cpi	r16, 0xB7	; 183
    a794:	11 f4       	brne	.+4      	; 0xa79a <FMenuChangeMOP+0x436>
		      stChangeMOP=cmExitChangeMOP;
    a796:	8c e1       	ldi	r24, 0x1C	; 28
    a798:	03 c0       	rjmp	.+6      	; 0xa7a0 <FMenuChangeMOP+0x43c>
		  }
		  else
		  if (KeyPressed==_KEY_CANCEL){
    a79a:	07 3e       	cpi	r16, 0xE7	; 231
    a79c:	19 f4       	brne	.+6      	; 0xa7a4 <FMenuChangeMOP+0x440>
   		      stChangeMOP=cmSelectFIP;
    a79e:	89 e0       	ldi	r24, 0x09	; 9
    a7a0:	80 93 40 03 	sts	0x0340, r24
			 }
          if (IsRFIDDetected==True){
    a7a4:	80 91 76 02 	lds	r24, 0x0276
    a7a8:	81 30       	cpi	r24, 0x01	; 1
    a7aa:	09 f0       	breq	.+2      	; 0xa7ae <FMenuChangeMOP+0x44a>
    a7ac:	c1 c1       	rjmp	.+898    	; 0xab30 <FMenuChangeMOP+0x7cc>
		      IsRFIDDetected=False;
    a7ae:	10 92 76 02 	sts	0x0276, r1
			   stChangeMOP=cmProsesRFID;
    a7b2:	84 e1       	ldi	r24, 0x14	; 20
    a7b4:	b6 c1       	rjmp	.+876    	; 0xab22 <FMenuChangeMOP+0x7be>
			 }
	      break;
     case cmProsesRFID:
	      ViewCardID();
    a7b6:	0e 94 10 16 	call	0x2c20	; 0x2c20 <ViewCardID>
          sprintf_P(lcdteks,PSTR("ID:%s"),strCardID);lcd_print(2,1,lcdteks);
    a7ba:	00 d0       	rcall	.+0      	; 0xa7bc <FMenuChangeMOP+0x458>
    a7bc:	00 d0       	rcall	.+0      	; 0xa7be <FMenuChangeMOP+0x45a>
    a7be:	00 d0       	rcall	.+0      	; 0xa7c0 <FMenuChangeMOP+0x45c>
    a7c0:	ed b7       	in	r30, 0x3d	; 61
    a7c2:	fe b7       	in	r31, 0x3e	; 62
    a7c4:	31 96       	adiw	r30, 0x01	; 1
    a7c6:	8e 01       	movw	r16, r28
    a7c8:	00 5f       	subi	r16, 0xF0	; 240
    a7ca:	1f 4f       	sbci	r17, 0xFF	; 255
    a7cc:	ad b7       	in	r26, 0x3d	; 61
    a7ce:	be b7       	in	r27, 0x3e	; 62
    a7d0:	12 96       	adiw	r26, 0x02	; 2
    a7d2:	1c 93       	st	X, r17
    a7d4:	0e 93       	st	-X, r16
    a7d6:	11 97       	sbiw	r26, 0x01	; 1
    a7d8:	82 ea       	ldi	r24, 0xA2	; 162
    a7da:	9a e1       	ldi	r25, 0x1A	; 26
    a7dc:	93 83       	std	Z+3, r25	; 0x03
    a7de:	82 83       	std	Z+2, r24	; 0x02
    a7e0:	8d e6       	ldi	r24, 0x6D	; 109
    a7e2:	9c e0       	ldi	r25, 0x0C	; 12
    a7e4:	95 83       	std	Z+5, r25	; 0x05
    a7e6:	84 83       	std	Z+4, r24	; 0x04
    a7e8:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    a7ec:	ed b7       	in	r30, 0x3d	; 61
    a7ee:	fe b7       	in	r31, 0x3e	; 62
    a7f0:	36 96       	adiw	r30, 0x06	; 6
    a7f2:	0f b6       	in	r0, 0x3f	; 63
    a7f4:	f8 94       	cli
    a7f6:	fe bf       	out	0x3e, r31	; 62
    a7f8:	0f be       	out	0x3f, r0	; 63
    a7fa:	ed bf       	out	0x3d, r30	; 61
    a7fc:	82 e0       	ldi	r24, 0x02	; 2
    a7fe:	61 e0       	ldi	r22, 0x01	; 1
    a800:	a8 01       	movw	r20, r16
    a802:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
          lcd_printf(3,1,PSTR("Proses"));
    a806:	83 e0       	ldi	r24, 0x03	; 3
    a808:	61 e0       	ldi	r22, 0x01	; 1
    a80a:	4b e9       	ldi	r20, 0x9B	; 155
    a80c:	5a e1       	ldi	r21, 0x1A	; 26
    a80e:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  stChangeMOP=cmGenerateData;
    a812:	86 e1       	ldi	r24, 0x16	; 22
    a814:	86 c1       	rjmp	.+780    	; 0xab22 <FMenuChangeMOP+0x7be>
	      break;
     case cmProsesVoucher:
          lcd_clear();
    a816:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
          lcd_printf(1,1,PSTR("-MOP Voucher-")); 
    a81a:	81 e0       	ldi	r24, 0x01	; 1
    a81c:	61 e0       	ldi	r22, 0x01	; 1
    a81e:	4d e8       	ldi	r20, 0x8D	; 141
    a820:	5a e1       	ldi	r21, 0x1A	; 26
    a822:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
          lcd_printf(3,1,PSTR("Proses"));
    a826:	83 e0       	ldi	r24, 0x03	; 3
    a828:	61 e0       	ldi	r22, 0x01	; 1
    a82a:	46 e8       	ldi	r20, 0x86	; 134
    a82c:	5a e1       	ldi	r21, 0x1A	; 26
    a82e:	ef cf       	rjmp	.-34     	; 0xa80e <FMenuChangeMOP+0x4aa>
		  stChangeMOP=cmGenerateData;
	      break;

     case cmGenerateData:
	      FillChar(strRef1,sizeof(strRef1),0);
    a830:	03 e9       	ldi	r16, 0x93	; 147
    a832:	1d e0       	ldi	r17, 0x0D	; 13
    a834:	c8 01       	movw	r24, r16
    a836:	65 e1       	ldi	r22, 0x15	; 21
    a838:	70 e0       	ldi	r23, 0x00	; 0
    a83a:	40 e0       	ldi	r20, 0x00	; 0
    a83c:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>
	      FillChar(strRef2,sizeof(strRef2),0);
    a840:	42 e8       	ldi	r20, 0x82	; 130
    a842:	e4 2e       	mov	r14, r20
    a844:	4c e0       	ldi	r20, 0x0C	; 12
    a846:	f4 2e       	mov	r15, r20
    a848:	c7 01       	movw	r24, r14
    a84a:	65 e1       	ldi	r22, 0x15	; 21
    a84c:	70 e0       	ldi	r23, 0x00	; 0
    a84e:	40 e0       	ldi	r20, 0x00	; 0
    a850:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>
	      FillChar(strRef3,sizeof(strRef3),0);
    a854:	81 e6       	ldi	r24, 0x61	; 97
    a856:	99 e0       	ldi	r25, 0x09	; 9
    a858:	65 e1       	ldi	r22, 0x15	; 21
    a85a:	70 e0       	ldi	r23, 0x00	; 0
    a85c:	40 e0       	ldi	r20, 0x00	; 0
    a85e:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>
	      FillChar(strRef4,sizeof(strRef4),0);
    a862:	39 e8       	ldi	r19, 0x89	; 137
    a864:	c3 2e       	mov	r12, r19
    a866:	34 e0       	ldi	r19, 0x04	; 4
    a868:	d3 2e       	mov	r13, r19
    a86a:	c6 01       	movw	r24, r12
    a86c:	65 e1       	ldi	r22, 0x15	; 21
    a86e:	70 e0       	ldi	r23, 0x00	; 0
    a870:	40 e0       	ldi	r20, 0x00	; 0
    a872:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>
          switch(MOPType){
    a876:	80 91 97 02 	lds	r24, 0x0297
    a87a:	82 30       	cpi	r24, 0x02	; 2
    a87c:	e1 f0       	breq	.+56     	; 0xa8b6 <FMenuChangeMOP+0x552>
    a87e:	83 30       	cpi	r24, 0x03	; 3
    a880:	20 f4       	brcc	.+8      	; 0xa88a <FMenuChangeMOP+0x526>
    a882:	81 30       	cpi	r24, 0x01	; 1
    a884:	09 f0       	breq	.+2      	; 0xa888 <FMenuChangeMOP+0x524>
    a886:	9f c0       	rjmp	.+318    	; 0xa9c6 <FMenuChangeMOP+0x662>
    a888:	07 c0       	rjmp	.+14     	; 0xa898 <FMenuChangeMOP+0x534>
    a88a:	83 30       	cpi	r24, 0x03	; 3
    a88c:	09 f4       	brne	.+2      	; 0xa890 <FMenuChangeMOP+0x52c>
    a88e:	5c c0       	rjmp	.+184    	; 0xa948 <FMenuChangeMOP+0x5e4>
    a890:	84 30       	cpi	r24, 0x04	; 4
    a892:	09 f0       	breq	.+2      	; 0xa896 <FMenuChangeMOP+0x532>
    a894:	98 c0       	rjmp	.+304    	; 0xa9c6 <FMenuChangeMOP+0x662>
    a896:	6b c0       	rjmp	.+214    	; 0xa96e <FMenuChangeMOP+0x60a>
		  case PAY_ACCOUNT:
		       sprintf_P(strRef1,PSTR("%s"),strCardID); 
    a898:	00 d0       	rcall	.+0      	; 0xa89a <FMenuChangeMOP+0x536>
    a89a:	00 d0       	rcall	.+0      	; 0xa89c <FMenuChangeMOP+0x538>
    a89c:	00 d0       	rcall	.+0      	; 0xa89e <FMenuChangeMOP+0x53a>
    a89e:	ed b7       	in	r30, 0x3d	; 61
    a8a0:	fe b7       	in	r31, 0x3e	; 62
    a8a2:	31 96       	adiw	r30, 0x01	; 1
    a8a4:	ad b7       	in	r26, 0x3d	; 61
    a8a6:	be b7       	in	r27, 0x3e	; 62
    a8a8:	12 96       	adiw	r26, 0x02	; 2
    a8aa:	1c 93       	st	X, r17
    a8ac:	0e 93       	st	-X, r16
    a8ae:	11 97       	sbiw	r26, 0x01	; 1
    a8b0:	83 e8       	ldi	r24, 0x83	; 131
    a8b2:	9a e1       	ldi	r25, 0x1A	; 26
    a8b4:	78 c0       	rjmp	.+240    	; 0xa9a6 <FMenuChangeMOP+0x642>
		       break;
		  case PAY_BANK:
		  	   eeprom_read_block((void*) &strBankName, (const void*) &DefBankName[BankIdx], 11);
    a8b6:	25 e0       	ldi	r18, 0x05	; 5
    a8b8:	e2 2e       	mov	r14, r18
    a8ba:	f1 2c       	mov	r15, r1
    a8bc:	ec 0e       	add	r14, r28
    a8be:	fd 1e       	adc	r15, r29
    a8c0:	60 91 3e 03 	lds	r22, 0x033E
    a8c4:	8b e0       	ldi	r24, 0x0B	; 11
    a8c6:	68 9f       	mul	r22, r24
    a8c8:	b0 01       	movw	r22, r0
    a8ca:	11 24       	eor	r1, r1
    a8cc:	66 5f       	subi	r22, 0xF6	; 246
    a8ce:	7e 4f       	sbci	r23, 0xFE	; 254
    a8d0:	c7 01       	movw	r24, r14
    a8d2:	4b e0       	ldi	r20, 0x0B	; 11
    a8d4:	50 e0       	ldi	r21, 0x00	; 0
    a8d6:	0e 94 56 aa 	call	0x154ac	; 0x154ac <__eerd_block_m128>
		       sprintf_P(lcdteks,PSTR("%s"),strBankName);
    a8da:	00 d0       	rcall	.+0      	; 0xa8dc <FMenuChangeMOP+0x578>
    a8dc:	00 d0       	rcall	.+0      	; 0xa8de <FMenuChangeMOP+0x57a>
    a8de:	00 d0       	rcall	.+0      	; 0xa8e0 <FMenuChangeMOP+0x57c>
    a8e0:	ed b7       	in	r30, 0x3d	; 61
    a8e2:	fe b7       	in	r31, 0x3e	; 62
    a8e4:	31 96       	adiw	r30, 0x01	; 1
    a8e6:	ce 01       	movw	r24, r28
    a8e8:	40 96       	adiw	r24, 0x10	; 16
    a8ea:	ad b7       	in	r26, 0x3d	; 61
    a8ec:	be b7       	in	r27, 0x3e	; 62
    a8ee:	12 96       	adiw	r26, 0x02	; 2
    a8f0:	9c 93       	st	X, r25
    a8f2:	8e 93       	st	-X, r24
    a8f4:	11 97       	sbiw	r26, 0x01	; 1
    a8f6:	80 e8       	ldi	r24, 0x80	; 128
    a8f8:	9a e1       	ldi	r25, 0x1A	; 26
    a8fa:	93 83       	std	Z+3, r25	; 0x03
    a8fc:	82 83       	std	Z+2, r24	; 0x02
    a8fe:	f5 82       	std	Z+5, r15	; 0x05
    a900:	e4 82       	std	Z+4, r14	; 0x04
    a902:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		       sprintf_P(strRef1,PSTR("%s"),strBankName); 
    a906:	ed b7       	in	r30, 0x3d	; 61
    a908:	fe b7       	in	r31, 0x3e	; 62
    a90a:	31 96       	adiw	r30, 0x01	; 1
    a90c:	ad b7       	in	r26, 0x3d	; 61
    a90e:	be b7       	in	r27, 0x3e	; 62
    a910:	12 96       	adiw	r26, 0x02	; 2
    a912:	1c 93       	st	X, r17
    a914:	0e 93       	st	-X, r16
    a916:	11 97       	sbiw	r26, 0x01	; 1
    a918:	8d e7       	ldi	r24, 0x7D	; 125
    a91a:	9a e1       	ldi	r25, 0x1A	; 26
    a91c:	93 83       	std	Z+3, r25	; 0x03
    a91e:	82 83       	std	Z+2, r24	; 0x02
    a920:	f5 82       	std	Z+5, r15	; 0x05
    a922:	e4 82       	std	Z+4, r14	; 0x04
    a924:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		       sprintf_P(strRef4,PSTR("%s"),strSurcharge); 
    a928:	ed b7       	in	r30, 0x3d	; 61
    a92a:	fe b7       	in	r31, 0x3e	; 62
    a92c:	31 96       	adiw	r30, 0x01	; 1
    a92e:	ad b7       	in	r26, 0x3d	; 61
    a930:	be b7       	in	r27, 0x3e	; 62
    a932:	12 96       	adiw	r26, 0x02	; 2
    a934:	dc 92       	st	X, r13
    a936:	ce 92       	st	-X, r12
    a938:	11 97       	sbiw	r26, 0x01	; 1
    a93a:	8a e7       	ldi	r24, 0x7A	; 122
    a93c:	9a e1       	ldi	r25, 0x1A	; 26
    a93e:	93 83       	std	Z+3, r25	; 0x03
    a940:	82 83       	std	Z+2, r24	; 0x02
    a942:	ce 01       	movw	r24, r28
    a944:	01 96       	adiw	r24, 0x01	; 1
    a946:	33 c0       	rjmp	.+102    	; 0xa9ae <FMenuChangeMOP+0x64a>
		       break;
		  case PAY_VOUCHER://Load data Ref1=Voucher on cmVoucherInput
		  	   sprintf_P(strRef1,PSTR("%s"),strVoucherNum); 
    a948:	00 d0       	rcall	.+0      	; 0xa94a <FMenuChangeMOP+0x5e6>
    a94a:	00 d0       	rcall	.+0      	; 0xa94c <FMenuChangeMOP+0x5e8>
    a94c:	00 d0       	rcall	.+0      	; 0xa94e <FMenuChangeMOP+0x5ea>
    a94e:	ed b7       	in	r30, 0x3d	; 61
    a950:	fe b7       	in	r31, 0x3e	; 62
    a952:	31 96       	adiw	r30, 0x01	; 1
    a954:	ad b7       	in	r26, 0x3d	; 61
    a956:	be b7       	in	r27, 0x3e	; 62
    a958:	12 96       	adiw	r26, 0x02	; 2
    a95a:	1c 93       	st	X, r17
    a95c:	0e 93       	st	-X, r16
    a95e:	11 97       	sbiw	r26, 0x01	; 1
    a960:	87 e7       	ldi	r24, 0x77	; 119
    a962:	9a e1       	ldi	r25, 0x1A	; 26
    a964:	93 83       	std	Z+3, r25	; 0x03
    a966:	82 83       	std	Z+2, r24	; 0x02
    a968:	85 e3       	ldi	r24, 0x35	; 53
    a96a:	9d e0       	ldi	r25, 0x0D	; 13
    a96c:	20 c0       	rjmp	.+64     	; 0xa9ae <FMenuChangeMOP+0x64a>
		       break;
		  case PAY_PUMPTEST:
		  	   sprintf_P(strRef1,PSTR("PUMP TEST")); 
    a96e:	00 d0       	rcall	.+0      	; 0xa970 <FMenuChangeMOP+0x60c>
    a970:	00 d0       	rcall	.+0      	; 0xa972 <FMenuChangeMOP+0x60e>
    a972:	ad b7       	in	r26, 0x3d	; 61
    a974:	be b7       	in	r27, 0x3e	; 62
    a976:	12 96       	adiw	r26, 0x02	; 2
    a978:	1c 93       	st	X, r17
    a97a:	0e 93       	st	-X, r16
    a97c:	11 97       	sbiw	r26, 0x01	; 1
    a97e:	8d e6       	ldi	r24, 0x6D	; 109
    a980:	9a e1       	ldi	r25, 0x1A	; 26
    a982:	14 96       	adiw	r26, 0x04	; 4
    a984:	9c 93       	st	X, r25
    a986:	8e 93       	st	-X, r24
    a988:	13 97       	sbiw	r26, 0x03	; 3
    a98a:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		  	   sprintf_P(strRef2,PSTR("%s"),strCardID); 	       
    a98e:	00 d0       	rcall	.+0      	; 0xa990 <FMenuChangeMOP+0x62c>
    a990:	ed b7       	in	r30, 0x3d	; 61
    a992:	fe b7       	in	r31, 0x3e	; 62
    a994:	31 96       	adiw	r30, 0x01	; 1
    a996:	ad b7       	in	r26, 0x3d	; 61
    a998:	be b7       	in	r27, 0x3e	; 62
    a99a:	12 96       	adiw	r26, 0x02	; 2
    a99c:	fc 92       	st	X, r15
    a99e:	ee 92       	st	-X, r14
    a9a0:	11 97       	sbiw	r26, 0x01	; 1
    a9a2:	8a e6       	ldi	r24, 0x6A	; 106
    a9a4:	9a e1       	ldi	r25, 0x1A	; 26
    a9a6:	93 83       	std	Z+3, r25	; 0x03
    a9a8:	82 83       	std	Z+2, r24	; 0x02
    a9aa:	8d e6       	ldi	r24, 0x6D	; 109
    a9ac:	9c e0       	ldi	r25, 0x0C	; 12
    a9ae:	95 83       	std	Z+5, r25	; 0x05
    a9b0:	84 83       	std	Z+4, r24	; 0x04
    a9b2:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		       break;
    a9b6:	ed b7       	in	r30, 0x3d	; 61
    a9b8:	fe b7       	in	r31, 0x3e	; 62
    a9ba:	36 96       	adiw	r30, 0x06	; 6
    a9bc:	0f b6       	in	r0, 0x3f	; 63
    a9be:	f8 94       	cli
    a9c0:	fe bf       	out	0x3e, r31	; 62
    a9c2:	0f be       	out	0x3f, r0	; 63
    a9c4:	ed bf       	out	0x3d, r30	; 61
		  }
		  leadingZero(MOPType,strPaymentType);
    a9c6:	80 91 97 02 	lds	r24, 0x0297
    a9ca:	64 e3       	ldi	r22, 0x34	; 52
    a9cc:	78 e0       	ldi	r23, 0x08	; 8
    a9ce:	0e 94 e8 2c 	call	0x59d0	; 0x59d0 <leadingZero>
		  AddSpaceLead(strRef1,20);
    a9d2:	83 e9       	ldi	r24, 0x93	; 147
    a9d4:	9d e0       	ldi	r25, 0x0D	; 13
    a9d6:	64 e1       	ldi	r22, 0x14	; 20
    a9d8:	0e 94 93 27 	call	0x4f26	; 0x4f26 <AddSpaceLead>
		  AddSpaceLead(strRef2,20);
    a9dc:	82 e8       	ldi	r24, 0x82	; 130
    a9de:	9c e0       	ldi	r25, 0x0C	; 12
    a9e0:	64 e1       	ldi	r22, 0x14	; 20
    a9e2:	0e 94 93 27 	call	0x4f26	; 0x4f26 <AddSpaceLead>
		  AddSpaceLead(strRef3,20);
    a9e6:	81 e6       	ldi	r24, 0x61	; 97
    a9e8:	99 e0       	ldi	r25, 0x09	; 9
    a9ea:	64 e1       	ldi	r22, 0x14	; 20
    a9ec:	0e 94 93 27 	call	0x4f26	; 0x4f26 <AddSpaceLead>
		  AddSpaceLead(strRef4,20);
    a9f0:	89 e8       	ldi	r24, 0x89	; 137
    a9f2:	94 e0       	ldi	r25, 0x04	; 4
    a9f4:	64 e1       	ldi	r22, 0x14	; 20
    a9f6:	0e 94 93 27 	call	0x4f26	; 0x4f26 <AddSpaceLead>
		  iWait=0;
    a9fa:	10 92 3c 03 	sts	0x033C, r1
		  IsMessage09=False;
    a9fe:	10 92 82 02 	sts	0x0282, r1
		  stChangeMOP=cmSendMessage32;	      
    aa02:	87 e1       	ldi	r24, 0x17	; 23
    aa04:	8e c0       	rjmp	.+284    	; 0xab22 <FMenuChangeMOP+0x7be>
	      break;
     case cmSendMessage32://SendMessage32
	      sendMessage32();
    aa06:	0e 94 8f 2b 	call	0x571e	; 0x571e <sendMessage32>
		  iLoop=0;
    aa0a:	10 92 3b 03 	sts	0x033B, r1
    aa0e:	10 92 3a 03 	sts	0x033A, r1
		  iPos=0;
    aa12:	10 92 3d 03 	sts	0x033D, r1
		  lcd_printf(3,1,PSTR("Please Wait"));
    aa16:	83 e0       	ldi	r24, 0x03	; 3
    aa18:	61 e0       	ldi	r22, 0x01	; 1
    aa1a:	4e e5       	ldi	r20, 0x5E	; 94
    aa1c:	5a e1       	ldi	r21, 0x1A	; 26
    aa1e:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  stChangeMOP=cmWaitReplyMessage;	      
    aa22:	88 e1       	ldi	r24, 0x18	; 24
    aa24:	7e c0       	rjmp	.+252    	; 0xab22 <FMenuChangeMOP+0x7be>
	      break;
     case cmWaitReplyMessage:
          iLoop++;
    aa26:	80 91 3a 03 	lds	r24, 0x033A
    aa2a:	90 91 3b 03 	lds	r25, 0x033B
    aa2e:	01 96       	adiw	r24, 0x01	; 1
    aa30:	90 93 3b 03 	sts	0x033B, r25
    aa34:	80 93 3a 03 	sts	0x033A, r24
		  if ((iLoop%MSG_WAIT_TIMOUT)==0){
    aa38:	68 e9       	ldi	r22, 0x98	; 152
    aa3a:	7a e3       	ldi	r23, 0x3A	; 58
    aa3c:	0e 94 97 a7 	call	0x14f2e	; 0x14f2e <__udivmodhi4>
    aa40:	00 97       	sbiw	r24, 0x00	; 0
    aa42:	19 f5       	brne	.+70     	; 0xaa8a <FMenuChangeMOP+0x726>
			 if (iPos<5){
    aa44:	60 91 3d 03 	lds	r22, 0x033D
    aa48:	65 30       	cpi	r22, 0x05	; 5
    aa4a:	68 f4       	brcc	.+26     	; 0xaa66 <FMenuChangeMOP+0x702>
				 lcd_xy(3,(13+iPos));_lcd('.');
    aa4c:	63 5f       	subi	r22, 0xF3	; 243
    aa4e:	83 e0       	ldi	r24, 0x03	; 3
    aa50:	0e 94 19 a2 	call	0x14432	; 0x14432 <lcd_xy>
    aa54:	8e e2       	ldi	r24, 0x2E	; 46
    aa56:	0e 94 e8 a1 	call	0x143d0	; 0x143d0 <_lcd>
				 iPos++;
    aa5a:	80 91 3d 03 	lds	r24, 0x033D
    aa5e:	8f 5f       	subi	r24, 0xFF	; 255
    aa60:	80 93 3d 03 	sts	0x033D, r24
    aa64:	12 c0       	rjmp	.+36     	; 0xaa8a <FMenuChangeMOP+0x726>
				}
			 else{
				 iPos=0;
    aa66:	10 92 3d 03 	sts	0x033D, r1
				 lcd_printf(3,(13+iPos),PSTR("       "));
    aa6a:	83 e0       	ldi	r24, 0x03	; 3
    aa6c:	6d e0       	ldi	r22, 0x0D	; 13
    aa6e:	46 e5       	ldi	r20, 0x56	; 86
    aa70:	5a e1       	ldi	r21, 0x1A	; 26
    aa72:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
				 //Resend Message32
				 if (iWait<5)stChangeMOP=cmSendMessage32;
    aa76:	80 91 3c 03 	lds	r24, 0x033C
    aa7a:	85 30       	cpi	r24, 0x05	; 5
    aa7c:	18 f4       	brcc	.+6      	; 0xaa84 <FMenuChangeMOP+0x720>
    aa7e:	97 e1       	ldi	r25, 0x17	; 23
    aa80:	90 93 40 03 	sts	0x0340, r25
				iWait++;
    aa84:	8f 5f       	subi	r24, 0xFF	; 255
    aa86:	80 93 3c 03 	sts	0x033C, r24
				}
		  }
		  if (iWait>5)stChangeMOP=cmNoReply;
    aa8a:	80 91 3c 03 	lds	r24, 0x033C
    aa8e:	86 30       	cpi	r24, 0x06	; 6
    aa90:	18 f0       	brcs	.+6      	; 0xaa98 <FMenuChangeMOP+0x734>
    aa92:	8a e1       	ldi	r24, 0x1A	; 26
    aa94:	80 93 40 03 	sts	0x0340, r24
		  if (IsMessage09==True)stChangeMOP=cmDisplayFreeMessage;
    aa98:	80 91 82 02 	lds	r24, 0x0282
    aa9c:	81 30       	cpi	r24, 0x01	; 1
    aa9e:	19 f4       	brne	.+6      	; 0xaaa6 <FMenuChangeMOP+0x742>
    aaa0:	89 e1       	ldi	r24, 0x19	; 25
    aaa2:	80 93 40 03 	sts	0x0340, r24
		  if (IsMessage99==True)stChangeMOP=cmFinishChangeMOP;
    aaa6:	80 91 7e 02 	lds	r24, 0x027E
    aaaa:	81 30       	cpi	r24, 0x01	; 1
    aaac:	09 f0       	breq	.+2      	; 0xaab0 <FMenuChangeMOP+0x74c>
    aaae:	40 c0       	rjmp	.+128    	; 0xab30 <FMenuChangeMOP+0x7cc>
    aab0:	37 c0       	rjmp	.+110    	; 0xab20 <FMenuChangeMOP+0x7bc>
		  break;
     case cmDisplayFreeMessage:
	      IsMessage09=False;
    aab2:	10 92 82 02 	sts	0x0282, r1
	      msgResult=procMessage09();
    aab6:	0e 94 b1 46 	call	0x8d62	; 0x8d62 <procMessage09>
		  lcd_clear();
    aaba:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
		  lcd_print(1,1,strFreeMessageLine1);
    aabe:	81 e0       	ldi	r24, 0x01	; 1
    aac0:	61 e0       	ldi	r22, 0x01	; 1
    aac2:	46 e7       	ldi	r20, 0x76	; 118
    aac4:	59 e0       	ldi	r21, 0x09	; 9
    aac6:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
		  lcd_print(2,1,strFreeMessageLine2);
    aaca:	82 e0       	ldi	r24, 0x02	; 2
    aacc:	61 e0       	ldi	r22, 0x01	; 1
    aace:	47 e8       	ldi	r20, 0x87	; 135
    aad0:	58 e0       	ldi	r21, 0x08	; 8
    aad2:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
		  lcd_print(3,1,strFreeMessageLine3);
    aad6:	83 e0       	ldi	r24, 0x03	; 3
    aad8:	61 e0       	ldi	r22, 0x01	; 1
    aada:	40 ef       	ldi	r20, 0xF0	; 240
    aadc:	58 e0       	ldi	r21, 0x08	; 8
    aade:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
		  lcd_print(4,1,strFreeMessageLine4);
    aae2:	84 e0       	ldi	r24, 0x04	; 4
    aae4:	61 e0       	ldi	r22, 0x01	; 1
    aae6:	4f ec       	ldi	r20, 0xCF	; 207
    aae8:	5c e0       	ldi	r21, 0x0C	; 12
    aaea:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
    aaee:	0e c0       	rjmp	.+28     	; 0xab0c <FMenuChangeMOP+0x7a8>
		  TimDisplay=0;
          stChangeMOP=cmDelayMOP;
	      break;
     case cmNoReply:
	      lcd_clear();
    aaf0:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
		  lcd_printf(2,1,PSTR("No Reply    "));
    aaf4:	82 e0       	ldi	r24, 0x02	; 2
    aaf6:	61 e0       	ldi	r22, 0x01	; 1
    aaf8:	49 e4       	ldi	r20, 0x49	; 73
    aafa:	5a e1       	ldi	r21, 0x1A	; 26
    aafc:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
	      lcd_printf(3,1,PSTR("TCP/IP Error"));
    ab00:	83 e0       	ldi	r24, 0x03	; 3
    ab02:	61 e0       	ldi	r22, 0x01	; 1
    ab04:	4c e3       	ldi	r20, 0x3C	; 60
    ab06:	5a e1       	ldi	r21, 0x1A	; 26
    ab08:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  TimDisplay=0;
    ab0c:	10 92 70 02 	sts	0x0270, r1
          stChangeMOP=cmDelayMOP;
    ab10:	8b e1       	ldi	r24, 0x1B	; 27
    ab12:	07 c0       	rjmp	.+14     	; 0xab22 <FMenuChangeMOP+0x7be>
	      break;
     case cmDelayMOP:
	      if (TimDisplay>9)stChangeMOP=cmExitChangeMOP;
    ab14:	80 91 70 02 	lds	r24, 0x0270
    ab18:	8a 30       	cpi	r24, 0x0A	; 10
    ab1a:	50 f0       	brcs	.+20     	; 0xab30 <FMenuChangeMOP+0x7cc>
    ab1c:	8c e1       	ldi	r24, 0x1C	; 28
    ab1e:	01 c0       	rjmp	.+2      	; 0xab22 <FMenuChangeMOP+0x7be>
	      break;
     case cmExitChangeMOP:
	      stChangeMOP=cmFinishChangeMOP;
    ab20:	8d e1       	ldi	r24, 0x1D	; 29
    ab22:	80 93 40 03 	sts	0x0340, r24
    ab26:	04 c0       	rjmp	.+8      	; 0xab30 <FMenuChangeMOP+0x7cc>
	      break;
     case cmFinishChangeMOP:
	      stChangeMOP=cmInit;
    ab28:	10 92 40 03 	sts	0x0340, r1
		  Result=MENU_DONE;
    ab2c:	81 e0       	ldi	r24, 0x01	; 1
	      break;
    ab2e:	01 c0       	rjmp	.+2      	; 0xab32 <FMenuChangeMOP+0x7ce>

       char lcdteks[20],i,msgResult;       
	   char strBankName[11],strSurcharge[4],Result;
       char uiResult,KeyPressed=0,KeyChar,FIPResult;

     Result=MENU_NONE; 
    ab30:	80 e0       	ldi	r24, 0x00	; 0
	      stChangeMOP=cmInit;
		  Result=MENU_DONE;
	      break;
	 }
  return Result;
}
    ab32:	a3 96       	adiw	r28, 0x23	; 35
    ab34:	0f b6       	in	r0, 0x3f	; 63
    ab36:	f8 94       	cli
    ab38:	de bf       	out	0x3e, r29	; 62
    ab3a:	0f be       	out	0x3f, r0	; 63
    ab3c:	cd bf       	out	0x3d, r28	; 61
    ab3e:	cf 91       	pop	r28
    ab40:	df 91       	pop	r29
    ab42:	1f 91       	pop	r17
    ab44:	0f 91       	pop	r16
    ab46:	ff 90       	pop	r15
    ab48:	ef 90       	pop	r14
    ab4a:	df 90       	pop	r13
    ab4c:	cf 90       	pop	r12
    ab4e:	bf 90       	pop	r11
    ab50:	af 90       	pop	r10
    ab52:	9f 90       	pop	r9
    ab54:	08 95       	ret

0000ab56 <FMenuEDCTransaction>:
	      break;
	 }
	 return Result;
}

char FMenuEDCTransaction(){
    ab56:	1f 93       	push	r17
    ab58:	cf 93       	push	r28
    ab5a:	df 93       	push	r29
static char FIP_Used=0;
       char lcdteks[20],Result=MENU_NONE;
       char KeyPressed=0,KeyChar,FIPResult;

     Result=MENU_NONE;
	 switch(stEtransaction){
    ab5c:	80 91 41 03 	lds	r24, 0x0341
    ab60:	85 30       	cpi	r24, 0x05	; 5
    ab62:	09 f4       	brne	.+2      	; 0xab66 <FMenuEDCTransaction+0x10>
    ab64:	91 c0       	rjmp	.+290    	; 0xac88 <FMenuEDCTransaction+0x132>
    ab66:	86 30       	cpi	r24, 0x06	; 6
    ab68:	90 f4       	brcc	.+36     	; 0xab8e <FMenuEDCTransaction+0x38>
    ab6a:	82 30       	cpi	r24, 0x02	; 2
    ab6c:	09 f4       	brne	.+2      	; 0xab70 <FMenuEDCTransaction+0x1a>
    ab6e:	52 c0       	rjmp	.+164    	; 0xac14 <FMenuEDCTransaction+0xbe>
    ab70:	83 30       	cpi	r24, 0x03	; 3
    ab72:	30 f4       	brcc	.+12     	; 0xab80 <FMenuEDCTransaction+0x2a>
    ab74:	88 23       	and	r24, r24
    ab76:	f1 f0       	breq	.+60     	; 0xabb4 <FMenuEDCTransaction+0x5e>
    ab78:	81 30       	cpi	r24, 0x01	; 1
    ab7a:	09 f0       	breq	.+2      	; 0xab7e <FMenuEDCTransaction+0x28>
    ab7c:	cd c0       	rjmp	.+410    	; 0xad18 <FMenuEDCTransaction+0x1c2>
    ab7e:	36 c0       	rjmp	.+108    	; 0xabec <FMenuEDCTransaction+0x96>
    ab80:	83 30       	cpi	r24, 0x03	; 3
    ab82:	09 f4       	brne	.+2      	; 0xab86 <FMenuEDCTransaction+0x30>
    ab84:	57 c0       	rjmp	.+174    	; 0xac34 <FMenuEDCTransaction+0xde>
    ab86:	84 30       	cpi	r24, 0x04	; 4
    ab88:	09 f0       	breq	.+2      	; 0xab8c <FMenuEDCTransaction+0x36>
    ab8a:	c6 c0       	rjmp	.+396    	; 0xad18 <FMenuEDCTransaction+0x1c2>
    ab8c:	77 c0       	rjmp	.+238    	; 0xac7c <FMenuEDCTransaction+0x126>
    ab8e:	88 30       	cpi	r24, 0x08	; 8
    ab90:	09 f4       	brne	.+2      	; 0xab94 <FMenuEDCTransaction+0x3e>
    ab92:	b0 c0       	rjmp	.+352    	; 0xacf4 <FMenuEDCTransaction+0x19e>
    ab94:	89 30       	cpi	r24, 0x09	; 9
    ab96:	38 f4       	brcc	.+14     	; 0xaba6 <FMenuEDCTransaction+0x50>
    ab98:	86 30       	cpi	r24, 0x06	; 6
    ab9a:	09 f4       	brne	.+2      	; 0xab9e <FMenuEDCTransaction+0x48>
    ab9c:	86 c0       	rjmp	.+268    	; 0xacaa <FMenuEDCTransaction+0x154>
    ab9e:	87 30       	cpi	r24, 0x07	; 7
    aba0:	09 f0       	breq	.+2      	; 0xaba4 <FMenuEDCTransaction+0x4e>
    aba2:	ba c0       	rjmp	.+372    	; 0xad18 <FMenuEDCTransaction+0x1c2>
    aba4:	84 c0       	rjmp	.+264    	; 0xacae <FMenuEDCTransaction+0x158>
    aba6:	89 30       	cpi	r24, 0x09	; 9
    aba8:	09 f4       	brne	.+2      	; 0xabac <FMenuEDCTransaction+0x56>
    abaa:	aa c0       	rjmp	.+340    	; 0xad00 <FMenuEDCTransaction+0x1aa>
    abac:	8a 30       	cpi	r24, 0x0A	; 10
    abae:	09 f0       	breq	.+2      	; 0xabb2 <FMenuEDCTransaction+0x5c>
    abb0:	b3 c0       	rjmp	.+358    	; 0xad18 <FMenuEDCTransaction+0x1c2>
    abb2:	ae c0       	rjmp	.+348    	; 0xad10 <FMenuEDCTransaction+0x1ba>
	 case etInit:
	      lcd_clear();
    abb4:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
		  lcd_printf(1,1,PSTR("Select Card Type"));
    abb8:	81 e0       	ldi	r24, 0x01	; 1
    abba:	61 e0       	ldi	r22, 0x01	; 1
    abbc:	48 e2       	ldi	r20, 0x28	; 40
    abbe:	5c e1       	ldi	r21, 0x1C	; 28
    abc0:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
          lcd_printf(1,1,PSTR("1.Debit/Flash Card  "));
    abc4:	81 e0       	ldi	r24, 0x01	; 1
    abc6:	61 e0       	ldi	r22, 0x01	; 1
    abc8:	43 e1       	ldi	r20, 0x13	; 19
    abca:	5c e1       	ldi	r21, 0x1C	; 28
    abcc:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  lcd_printf(2,1,PSTR("2.Credit Card       "));
    abd0:	82 e0       	ldi	r24, 0x02	; 2
    abd2:	61 e0       	ldi	r22, 0x01	; 1
    abd4:	4e ef       	ldi	r20, 0xFE	; 254
    abd6:	5b e1       	ldi	r21, 0x1B	; 27
    abd8:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
	      lcd_printf(4,1,PSTR("[*]Back             "));
    abdc:	84 e0       	ldi	r24, 0x04	; 4
    abde:	61 e0       	ldi	r22, 0x01	; 1
    abe0:	49 ee       	ldi	r20, 0xE9	; 233
    abe2:	5b e1       	ldi	r21, 0x1B	; 27
    abe4:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  stEtransaction=etInputEDC;
    abe8:	81 e0       	ldi	r24, 0x01	; 1
    abea:	8f c0       	rjmp	.+286    	; 0xad0a <FMenuEDCTransaction+0x1b4>
	      break;
     case etInputEDC:
	 	  KeyPressed=_key_scan(1);
    abec:	81 e0       	ldi	r24, 0x01	; 1
    abee:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <_key_scan>
    abf2:	18 2f       	mov	r17, r24
		  KeyChar=_key_btn(KeyPressed);
    abf4:	0e 94 49 a3 	call	0x14692	; 0x14692 <_key_btn>
		  if ((KeyChar>='1')&&(KeyChar<='2')){
    abf8:	98 2f       	mov	r25, r24
    abfa:	91 53       	subi	r25, 0x31	; 49
    abfc:	92 30       	cpi	r25, 0x02	; 2
    abfe:	30 f4       	brcc	.+12     	; 0xac0c <FMenuEDCTransaction+0xb6>
		       EDCType=KeyChar-'0';
    ac00:	80 53       	subi	r24, 0x30	; 48
    ac02:	80 93 ef 08 	sts	0x08EF, r24
		       stEtransaction=etSelectFIP;
    ac06:	82 e0       	ldi	r24, 0x02	; 2
    ac08:	80 93 41 03 	sts	0x0341, r24
		     }
		  if (KeyPressed==_KEY_CANCEL)stEtransaction=etExitEDCTransaction;
    ac0c:	17 3e       	cpi	r17, 0xE7	; 231
    ac0e:	09 f0       	breq	.+2      	; 0xac12 <FMenuEDCTransaction+0xbc>
    ac10:	83 c0       	rjmp	.+262    	; 0xad18 <FMenuEDCTransaction+0x1c2>
    ac12:	7a c0       	rjmp	.+244    	; 0xad08 <FMenuEDCTransaction+0x1b2>
	      break;
	 case etSelectFIP:
	      FIPResult=menu_FIP(FIP_Used,strFIP_ID);
    ac14:	80 e0       	ldi	r24, 0x00	; 0
    ac16:	90 e0       	ldi	r25, 0x00	; 0
    ac18:	6d e9       	ldi	r22, 0x9D	; 157
    ac1a:	78 e0       	ldi	r23, 0x08	; 8
    ac1c:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <menu_FIP>
		  if (FIPResult==FIP_DONE)stEtransaction=etInitMessage90;
    ac20:	88 23       	and	r24, r24
    ac22:	11 f4       	brne	.+4      	; 0xac28 <FMenuEDCTransaction+0xd2>
    ac24:	83 e0       	ldi	r24, 0x03	; 3
    ac26:	71 c0       	rjmp	.+226    	; 0xad0a <FMenuEDCTransaction+0x1b4>
		  else
		  if (FIPResult==FIP_CANCEL)stEtransaction=etInit;
    ac28:	82 30       	cpi	r24, 0x02	; 2
    ac2a:	09 f0       	breq	.+2      	; 0xac2e <FMenuEDCTransaction+0xd8>
    ac2c:	75 c0       	rjmp	.+234    	; 0xad18 <FMenuEDCTransaction+0x1c2>
    ac2e:	10 92 41 03 	sts	0x0341, r1
    ac32:	72 c0       	rjmp	.+228    	; 0xad18 <FMenuEDCTransaction+0x1c2>
	      break;
     case etInitMessage90:
	      FillChar(strRef1,sizeof(strRef1),0);
    ac34:	c3 e9       	ldi	r28, 0x93	; 147
    ac36:	dd e0       	ldi	r29, 0x0D	; 13
    ac38:	ce 01       	movw	r24, r28
    ac3a:	65 e1       	ldi	r22, 0x15	; 21
    ac3c:	70 e0       	ldi	r23, 0x00	; 0
    ac3e:	40 e0       	ldi	r20, 0x00	; 0
    ac40:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>
	      if (EDCType==1){
    ac44:	80 91 ef 08 	lds	r24, 0x08EF
    ac48:	81 30       	cpi	r24, 0x01	; 1
    ac4a:	91 f0       	breq	.+36     	; 0xac70 <FMenuEDCTransaction+0x11a>
		      AddSpaceLag(strRef1,20);
          }
		  else
	      if (EDCType==2){
    ac4c:	82 30       	cpi	r24, 0x02	; 2
    ac4e:	a1 f4       	brne	.+40     	; 0xac78 <FMenuEDCTransaction+0x122>
		      sprintf_P(strRef1,PSTR("CREDITCARD"));
    ac50:	00 d0       	rcall	.+0      	; 0xac52 <FMenuEDCTransaction+0xfc>
    ac52:	00 d0       	rcall	.+0      	; 0xac54 <FMenuEDCTransaction+0xfe>
    ac54:	ed b7       	in	r30, 0x3d	; 61
    ac56:	fe b7       	in	r31, 0x3e	; 62
    ac58:	d2 83       	std	Z+2, r29	; 0x02
    ac5a:	c1 83       	std	Z+1, r28	; 0x01
    ac5c:	8e ed       	ldi	r24, 0xDE	; 222
    ac5e:	9b e1       	ldi	r25, 0x1B	; 27
    ac60:	94 83       	std	Z+4, r25	; 0x04
    ac62:	83 83       	std	Z+3, r24	; 0x03
    ac64:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
			  AddSpaceLag(strRef1,20);
    ac68:	0f 90       	pop	r0
    ac6a:	0f 90       	pop	r0
    ac6c:	0f 90       	pop	r0
    ac6e:	0f 90       	pop	r0
    ac70:	ce 01       	movw	r24, r28
    ac72:	64 e1       	ldi	r22, 0x14	; 20
    ac74:	0e 94 7d 27 	call	0x4efa	; 0x4efa <AddSpaceLag>
		  }	 
	      stEtransaction=etSendingMessage90;
    ac78:	84 e0       	ldi	r24, 0x04	; 4
    ac7a:	47 c0       	rjmp	.+142    	; 0xad0a <FMenuEDCTransaction+0x1b4>
	      break;
     case etSendingMessage90:
          sendMessage90();
    ac7c:	0e 94 83 2b 	call	0x5706	; 0x5706 <sendMessage90>
		  TimSend=0;
    ac80:	10 92 7d 0d 	sts	0x0D7D, r1
          stEtransaction=etWaitReply;
    ac84:	85 e0       	ldi	r24, 0x05	; 5
    ac86:	41 c0       	rjmp	.+130    	; 0xad0a <FMenuEDCTransaction+0x1b4>
	      break;
     case etWaitReply:
	      if (TimSend>TIM_SEND*2)stEtransaction=etNoConnection;
    ac88:	80 91 7d 0d 	lds	r24, 0x0D7D
    ac8c:	85 31       	cpi	r24, 0x15	; 21
    ac8e:	18 f0       	brcs	.+6      	; 0xac96 <FMenuEDCTransaction+0x140>
    ac90:	88 e0       	ldi	r24, 0x08	; 8
    ac92:	80 93 41 03 	sts	0x0341, r24
		  if ((IsMessage91==True)||(IsMessage09==True))
    ac96:	80 91 86 02 	lds	r24, 0x0286
    ac9a:	81 30       	cpi	r24, 0x01	; 1
    ac9c:	21 f0       	breq	.+8      	; 0xaca6 <FMenuEDCTransaction+0x150>
    ac9e:	80 91 82 02 	lds	r24, 0x0282
    aca2:	81 30       	cpi	r24, 0x01	; 1
    aca4:	c9 f5       	brne	.+114    	; 0xad18 <FMenuEDCTransaction+0x1c2>
		       stEtransaction=etSuccesEDC;
    aca6:	86 e0       	ldi	r24, 0x06	; 6
    aca8:	30 c0       	rjmp	.+96     	; 0xad0a <FMenuEDCTransaction+0x1b4>
	      break;
     case etSuccesEDC:
	      stEtransaction=etDisplayFreeMessage;
    acaa:	87 e0       	ldi	r24, 0x07	; 7
    acac:	2e c0       	rjmp	.+92     	; 0xad0a <FMenuEDCTransaction+0x1b4>
	      break;
     case etDisplayFreeMessage:
	      if (IsMessage09==True){
    acae:	80 91 82 02 	lds	r24, 0x0282
    acb2:	81 30       	cpi	r24, 0x01	; 1
    acb4:	19 f5       	brne	.+70     	; 0xacfc <FMenuEDCTransaction+0x1a6>
		      IsMessage09=False;
    acb6:	10 92 82 02 	sts	0x0282, r1
	          procMessage09();
    acba:	0e 94 b1 46 	call	0x8d62	; 0x8d62 <procMessage09>
		      lcd_clear();
    acbe:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
		      lcd_print(1,1,strFreeMessageLine1);
    acc2:	81 e0       	ldi	r24, 0x01	; 1
    acc4:	61 e0       	ldi	r22, 0x01	; 1
    acc6:	46 e7       	ldi	r20, 0x76	; 118
    acc8:	59 e0       	ldi	r21, 0x09	; 9
    acca:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
		      lcd_print(2,1,strFreeMessageLine2);
    acce:	82 e0       	ldi	r24, 0x02	; 2
    acd0:	61 e0       	ldi	r22, 0x01	; 1
    acd2:	47 e8       	ldi	r20, 0x87	; 135
    acd4:	58 e0       	ldi	r21, 0x08	; 8
    acd6:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
		      lcd_print(3,1,strFreeMessageLine3);
    acda:	83 e0       	ldi	r24, 0x03	; 3
    acdc:	61 e0       	ldi	r22, 0x01	; 1
    acde:	40 ef       	ldi	r20, 0xF0	; 240
    ace0:	58 e0       	ldi	r21, 0x08	; 8
    ace2:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
			  lcd_print(4,1,strFreeMessageLine4);
    ace6:	84 e0       	ldi	r24, 0x04	; 4
    ace8:	61 e0       	ldi	r22, 0x01	; 1
    acea:	4f ec       	ldi	r20, 0xCF	; 207
    acec:	5c e0       	ldi	r21, 0x0C	; 12
    acee:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
    acf2:	02 c0       	rjmp	.+4      	; 0xacf8 <FMenuEDCTransaction+0x1a2>
			  TimDisplay=0;
			  }
		  stEtransaction=etDelayExit;
	      break;
     case etNoConnection:
	      lcd_clear();
    acf4:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
		  TimDisplay=0;
    acf8:	10 92 70 02 	sts	0x0270, r1
		  stEtransaction=etDelayExit;
    acfc:	89 e0       	ldi	r24, 0x09	; 9
    acfe:	05 c0       	rjmp	.+10     	; 0xad0a <FMenuEDCTransaction+0x1b4>
	      break;
     case etDelayExit:
	      if (TimDisplay>8)stEtransaction=etExitEDCTransaction;
    ad00:	80 91 70 02 	lds	r24, 0x0270
    ad04:	89 30       	cpi	r24, 0x09	; 9
    ad06:	40 f0       	brcs	.+16     	; 0xad18 <FMenuEDCTransaction+0x1c2>
    ad08:	8a e0       	ldi	r24, 0x0A	; 10
    ad0a:	80 93 41 03 	sts	0x0341, r24
    ad0e:	04 c0       	rjmp	.+8      	; 0xad18 <FMenuEDCTransaction+0x1c2>
	      break;
     case etExitEDCTransaction:
	      stEtransaction=etInit;
    ad10:	10 92 41 03 	sts	0x0341, r1
	      Result=MENU_DONE;
    ad14:	81 e0       	ldi	r24, 0x01	; 1
	      break;
    ad16:	01 c0       	rjmp	.+2      	; 0xad1a <FMenuEDCTransaction+0x1c4>
static char stEtransaction=etInit;
static char FIP_Used=0;
       char lcdteks[20],Result=MENU_NONE;
       char KeyPressed=0,KeyChar,FIPResult;

     Result=MENU_NONE;
    ad18:	80 e0       	ldi	r24, 0x00	; 0
	      stEtransaction=etInit;
	      Result=MENU_DONE;
	      break;
	 }
   return Result;
}
    ad1a:	df 91       	pop	r29
    ad1c:	cf 91       	pop	r28
    ad1e:	1f 91       	pop	r17
    ad20:	08 95       	ret

0000ad22 <FormatCurrency>:
     DecCfg=eeprom_read_byte(&DefDecimalTotalVolume);
	 FormatDecimal(strRawVolume,DecCfg);
}


void FormatCurrency(char *strCurrency){// 5000000.00 5,000,000.00
    ad22:	8f 92       	push	r8
    ad24:	9f 92       	push	r9
    ad26:	af 92       	push	r10
    ad28:	bf 92       	push	r11
    ad2a:	cf 92       	push	r12
    ad2c:	df 92       	push	r13
    ad2e:	ef 92       	push	r14
    ad30:	ff 92       	push	r15
    ad32:	0f 93       	push	r16
    ad34:	1f 93       	push	r17
    ad36:	df 93       	push	r29
    ad38:	cf 93       	push	r28
    ad3a:	cd b7       	in	r28, 0x3d	; 61
    ad3c:	de b7       	in	r29, 0x3e	; 62
    ad3e:	64 97       	sbiw	r28, 0x14	; 20
    ad40:	0f b6       	in	r0, 0x3f	; 63
    ad42:	f8 94       	cli
    ad44:	de bf       	out	0x3e, r29	; 62
    ad46:	0f be       	out	0x3f, r0	; 63
    ad48:	cd bf       	out	0x3d, r28	; 61
    ad4a:	8c 01       	movw	r16, r24
     char i,dotPos=0,iPos=0,Length=0,nComa=0;//cPos=0,;
	 char fmtCurrency[20];
	 char CurrencyMark,DecimalMark;

	 CurrencyMark=eeprom_read_byte(&DefCurrencyMark);
    ad4c:	80 e4       	ldi	r24, 0x40	; 64
    ad4e:	90 e0       	ldi	r25, 0x00	; 0
    ad50:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
    ad54:	98 2e       	mov	r9, r24
	 DecimalMark=eeprom_read_byte(&DefDecimalMark);
    ad56:	8f e3       	ldi	r24, 0x3F	; 63
    ad58:	90 e0       	ldi	r25, 0x00	; 0
    ad5a:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
    ad5e:	a8 2e       	mov	r10, r24

	 Length=strlen(strCurrency);//123,456
    ad60:	d8 01       	movw	r26, r16
    ad62:	0d 90       	ld	r0, X+
    ad64:	00 20       	and	r0, r0
    ad66:	e9 f7       	brne	.-6      	; 0xad62 <FormatCurrency+0x40>
    ad68:	7d 01       	movw	r14, r26
    ad6a:	08 94       	sec
    ad6c:	e1 08       	sbc	r14, r1
    ad6e:	f1 08       	sbc	r15, r1
    ad70:	e0 1a       	sub	r14, r16
    ad72:	f1 0a       	sbc	r15, r17
    ad74:	8e 2c       	mov	r8, r14
	 dotPos=Length;
	 nComa=0;
	 FillChar(fmtCurrency,sizeof(fmtCurrency),0);
    ad76:	ce 01       	movw	r24, r28
    ad78:	01 96       	adiw	r24, 0x01	; 1
    ad7a:	64 e1       	ldi	r22, 0x14	; 20
    ad7c:	70 e0       	ldi	r23, 0x00	; 0
    ad7e:	40 e0       	ldi	r20, 0x00	; 0
    ad80:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>
    ad84:	68 01       	movw	r12, r16
	 //Detection
	 for(i=0;i<Length;i++){// 123,456 
    ad86:	f8 01       	movw	r30, r16
	 CurrencyMark=eeprom_read_byte(&DefCurrencyMark);
	 DecimalMark=eeprom_read_byte(&DefDecimalMark);

	 Length=strlen(strCurrency);//123,456
	 dotPos=Length;
	 nComa=0;
    ad88:	90 e0       	ldi	r25, 0x00	; 0
	 FillChar(fmtCurrency,sizeof(fmtCurrency),0);
	 //Detection
	 for(i=0;i<Length;i++){// 123,456 
    ad8a:	80 e0       	ldi	r24, 0x00	; 0
    ad8c:	08 c0       	rjmp	.+16     	; 0xad9e <FormatCurrency+0x7c>
	     if (strCurrency[i]==DecimalMark) dotPos=i;//3
    ad8e:	21 91       	ld	r18, Z+
    ad90:	2a 15       	cp	r18, r10
    ad92:	09 f4       	brne	.+2      	; 0xad96 <FormatCurrency+0x74>
    ad94:	e8 2e       	mov	r14, r24
		 if (strCurrency[i]==CurrencyMark) nComa++;//0
    ad96:	29 15       	cp	r18, r9
    ad98:	09 f4       	brne	.+2      	; 0xad9c <FormatCurrency+0x7a>
    ad9a:	9f 5f       	subi	r25, 0xFF	; 255
	 Length=strlen(strCurrency);//123,456
	 dotPos=Length;
	 nComa=0;
	 FillChar(fmtCurrency,sizeof(fmtCurrency),0);
	 //Detection
	 for(i=0;i<Length;i++){// 123,456 
    ad9c:	8f 5f       	subi	r24, 0xFF	; 255
    ad9e:	88 15       	cp	r24, r8
    ada0:	b0 f3       	brcs	.-20     	; 0xad8e <FormatCurrency+0x6c>
	     if (strCurrency[i]==DecimalMark) dotPos=i;//3
		 if (strCurrency[i]==CurrencyMark) nComa++;//0
	 }

	 if((nComa==0)&&(dotPos>3)){		 
    ada2:	99 23       	and	r25, r25
    ada4:	09 f0       	breq	.+2      	; 0xada8 <FormatCurrency+0x86>
    ada6:	5b c0       	rjmp	.+182    	; 0xae5e <FormatCurrency+0x13c>
    ada8:	be 2d       	mov	r27, r14
    adaa:	b4 30       	cpi	r27, 0x04	; 4
    adac:	08 f4       	brcc	.+2      	; 0xadb0 <FormatCurrency+0x8e>
    adae:	57 c0       	rjmp	.+174    	; 0xae5e <FormatCurrency+0x13c>
    adb0:	2e 2d       	mov	r18, r14
    adb2:	30 e0       	ldi	r19, 0x00	; 0
    adb4:	40 e0       	ldi	r20, 0x00	; 0
    adb6:	ff 24       	eor	r15, r15
         iPos=0;
	     for(i=0;i<dotPos;i++){
	         if ((((dotPos-i)%3)==0)&&(i<(dotPos))&&(i>0)){ 
    adb8:	53 e0       	ldi	r21, 0x03	; 3
    adba:	a5 2e       	mov	r10, r21
    adbc:	b1 2c       	mov	r11, r1
		        fmtCurrency[iPos]=CurrencyMark;
    adbe:	fe 01       	movw	r30, r28
    adc0:	31 96       	adiw	r30, 0x01	; 1
	 }

	 if((nComa==0)&&(dotPos>3)){		 
         iPos=0;
	     for(i=0;i<dotPos;i++){
	         if ((((dotPos-i)%3)==0)&&(i<(dotPos))&&(i>0)){ 
    adc2:	c9 01       	movw	r24, r18
    adc4:	b5 01       	movw	r22, r10
    adc6:	0e 94 ab a7 	call	0x14f56	; 0x14f56 <__divmodhi4>
    adca:	00 97       	sbiw	r24, 0x00	; 0
    adcc:	49 f4       	brne	.+18     	; 0xade0 <FormatCurrency+0xbe>
    adce:	fe 14       	cp	r15, r14
    add0:	38 f4       	brcc	.+14     	; 0xade0 <FormatCurrency+0xbe>
    add2:	ff 20       	and	r15, r15
    add4:	29 f0       	breq	.+10     	; 0xade0 <FormatCurrency+0xbe>
		        fmtCurrency[iPos]=CurrencyMark;
    add6:	df 01       	movw	r26, r30
    add8:	a4 0f       	add	r26, r20
    adda:	b1 1d       	adc	r27, r1
    addc:	9c 92       	st	X, r9
		        iPos++;
    adde:	4f 5f       	subi	r20, 0xFF	; 255
		        }
		        fmtCurrency[iPos]=strCurrency[i];
    ade0:	d6 01       	movw	r26, r12
    ade2:	8d 91       	ld	r24, X+
    ade4:	6d 01       	movw	r12, r26
    ade6:	df 01       	movw	r26, r30
    ade8:	a4 0f       	add	r26, r20
    adea:	b1 1d       	adc	r27, r1
    adec:	8c 93       	st	X, r24
			    iPos++;
    adee:	4f 5f       	subi	r20, 0xFF	; 255
			    fmtCurrency[iPos]=0;
    adf0:	df 01       	movw	r26, r30
    adf2:	a4 0f       	add	r26, r20
    adf4:	b1 1d       	adc	r27, r1
    adf6:	1c 92       	st	X, r1
		 if (strCurrency[i]==CurrencyMark) nComa++;//0
	 }

	 if((nComa==0)&&(dotPos>3)){		 
         iPos=0;
	     for(i=0;i<dotPos;i++){
    adf8:	f3 94       	inc	r15
    adfa:	21 50       	subi	r18, 0x01	; 1
    adfc:	30 40       	sbci	r19, 0x00	; 0
    adfe:	fe 14       	cp	r15, r14
    ae00:	00 f3       	brcs	.-64     	; 0xadc2 <FormatCurrency+0xa0>
			    iPos++;
			    fmtCurrency[iPos]=0;
	         }
         
	     for(i=dotPos;i<Length;i++){
		        fmtCurrency[iPos]=strCurrency[i];
    ae02:	ce 01       	movw	r24, r28
    ae04:	01 96       	adiw	r24, 0x01	; 1
    ae06:	0e c0       	rjmp	.+28     	; 0xae24 <FormatCurrency+0x102>
    ae08:	fc 01       	movw	r30, r24
    ae0a:	e4 0f       	add	r30, r20
    ae0c:	f1 1d       	adc	r31, r1
    ae0e:	d8 01       	movw	r26, r16
    ae10:	ae 0d       	add	r26, r14
    ae12:	b1 1d       	adc	r27, r1
    ae14:	2c 91       	ld	r18, X
    ae16:	20 83       	st	Z, r18
			    iPos++;
    ae18:	4f 5f       	subi	r20, 0xFF	; 255
			    fmtCurrency[iPos]=0;
    ae1a:	fc 01       	movw	r30, r24
    ae1c:	e4 0f       	add	r30, r20
    ae1e:	f1 1d       	adc	r31, r1
    ae20:	10 82       	st	Z, r1
		        fmtCurrency[iPos]=strCurrency[i];
			    iPos++;
			    fmtCurrency[iPos]=0;
	         }
         
	     for(i=dotPos;i<Length;i++){
    ae22:	e3 94       	inc	r14
    ae24:	e8 14       	cp	r14, r8
    ae26:	80 f3       	brcs	.-32     	; 0xae08 <FormatCurrency+0xe6>
    ae28:	20 e0       	ldi	r18, 0x00	; 0
		        fmtCurrency[iPos]=strCurrency[i];
			    iPos++;
			    fmtCurrency[iPos]=0;
	         }
	      for(i=0;i<strlen(fmtCurrency);i++){
    ae2a:	de 01       	movw	r26, r28
    ae2c:	11 96       	adiw	r26, 0x01	; 1
    ae2e:	0b c0       	rjmp	.+22     	; 0xae46 <FormatCurrency+0x124>
	          strCurrency[i]=fmtCurrency[i];
    ae30:	a8 01       	movw	r20, r16
    ae32:	48 0f       	add	r20, r24
    ae34:	59 1f       	adc	r21, r25
    ae36:	8a 0f       	add	r24, r26
    ae38:	9b 1f       	adc	r25, r27
    ae3a:	fc 01       	movw	r30, r24
    ae3c:	80 81       	ld	r24, Z
    ae3e:	fa 01       	movw	r30, r20
    ae40:	80 83       	st	Z, r24
			  strCurrency[i+1]=0;
    ae42:	11 82       	std	Z+1, r1	; 0x01
	     for(i=dotPos;i<Length;i++){
		        fmtCurrency[iPos]=strCurrency[i];
			    iPos++;
			    fmtCurrency[iPos]=0;
	         }
	      for(i=0;i<strlen(fmtCurrency);i++){
    ae44:	2f 5f       	subi	r18, 0xFF	; 255
    ae46:	82 2f       	mov	r24, r18
    ae48:	90 e0       	ldi	r25, 0x00	; 0
    ae4a:	fd 01       	movw	r30, r26
    ae4c:	01 90       	ld	r0, Z+
    ae4e:	00 20       	and	r0, r0
    ae50:	e9 f7       	brne	.-6      	; 0xae4c <FormatCurrency+0x12a>
    ae52:	31 97       	sbiw	r30, 0x01	; 1
    ae54:	ea 1b       	sub	r30, r26
    ae56:	fb 0b       	sbc	r31, r27
    ae58:	8e 17       	cp	r24, r30
    ae5a:	9f 07       	cpc	r25, r31
    ae5c:	48 f3       	brcs	.-46     	; 0xae30 <FormatCurrency+0x10e>
	          strCurrency[i]=fmtCurrency[i];
			  strCurrency[i+1]=0;
	      }
     }      
}
    ae5e:	64 96       	adiw	r28, 0x14	; 20
    ae60:	0f b6       	in	r0, 0x3f	; 63
    ae62:	f8 94       	cli
    ae64:	de bf       	out	0x3e, r29	; 62
    ae66:	0f be       	out	0x3f, r0	; 63
    ae68:	cd bf       	out	0x3d, r28	; 61
    ae6a:	cf 91       	pop	r28
    ae6c:	df 91       	pop	r29
    ae6e:	1f 91       	pop	r17
    ae70:	0f 91       	pop	r16
    ae72:	ff 90       	pop	r15
    ae74:	ef 90       	pop	r14
    ae76:	df 90       	pop	r13
    ae78:	cf 90       	pop	r12
    ae7a:	bf 90       	pop	r11
    ae7c:	af 90       	pop	r10
    ae7e:	9f 90       	pop	r9
    ae80:	8f 90       	pop	r8
    ae82:	08 95       	ret

0000ae84 <SendConfigParamater>:
          stConfigProtocol=cpWaitSend;
	      break;
	 }
}

void SendConfigParamater(){
    ae84:	9f 92       	push	r9
    ae86:	af 92       	push	r10
    ae88:	bf 92       	push	r11
    ae8a:	cf 92       	push	r12
    ae8c:	df 92       	push	r13
    ae8e:	ef 92       	push	r14
    ae90:	ff 92       	push	r15
    ae92:	0f 93       	push	r16
    ae94:	1f 93       	push	r17
    ae96:	df 93       	push	r29
    ae98:	cf 93       	push	r28
    ae9a:	cd b7       	in	r28, 0x3d	; 61
    ae9c:	de b7       	in	r29, 0x3e	; 62
    ae9e:	c6 56       	subi	r28, 0x66	; 102
    aea0:	d0 40       	sbci	r29, 0x00	; 0
    aea2:	0f b6       	in	r0, 0x3f	; 63
    aea4:	f8 94       	cli
    aea6:	de bf       	out	0x3e, r29	; 62
    aea8:	0f be       	out	0x3f, r0	; 63
    aeaa:	cd bf       	out	0x3d, r28	; 61
char i,j,strSend[60];
char strEEPROM[41],xEEPROM;

     //Start
	 uart_printf(1,0,PSTR("<"));
    aeac:	81 e0       	ldi	r24, 0x01	; 1
    aeae:	60 e0       	ldi	r22, 0x00	; 0
    aeb0:	4d eb       	ldi	r20, 0xBD	; 189
    aeb2:	53 e2       	ldi	r21, 0x23	; 35
    aeb4:	0e 94 2c a6 	call	0x14c58	; 0x14c58 <uart_printf>
    aeb8:	08 e2       	ldi	r16, 0x28	; 40
    aeba:	12 e0       	ldi	r17, 0x02	; 2
     //Header Footer 400
	 for (i=0;i<10;i++){
	      eeprom_read_block((void*) &strEEPROM, (const void*) &DefHeaderFooter[i],sizeof(DefHeaderFooter[i]));
    aebc:	6e 01       	movw	r12, r28
    aebe:	08 94       	sec
    aec0:	c1 1c       	adc	r12, r1
    aec2:	d1 1c       	adc	r13, r1
		  FillChar(strSend,0,sizeof(strSend));
    aec4:	4a e2       	ldi	r20, 0x2A	; 42
    aec6:	e4 2e       	mov	r14, r20
    aec8:	f1 2c       	mov	r15, r1
    aeca:	ec 0e       	add	r14, r28
    aecc:	fd 1e       	adc	r15, r29
	      sprintf_P(strSend,PSTR("%s"),strEEPROM);
    aece:	3a eb       	ldi	r19, 0xBA	; 186
    aed0:	a3 2e       	mov	r10, r19
    aed2:	33 e2       	ldi	r19, 0x23	; 35
    aed4:	b3 2e       	mov	r11, r19

     //Start
	 uart_printf(1,0,PSTR("<"));
     //Header Footer 400
	 for (i=0;i<10;i++){
	      eeprom_read_block((void*) &strEEPROM, (const void*) &DefHeaderFooter[i],sizeof(DefHeaderFooter[i]));
    aed6:	c6 01       	movw	r24, r12
    aed8:	b8 01       	movw	r22, r16
    aeda:	49 e2       	ldi	r20, 0x29	; 41
    aedc:	50 e0       	ldi	r21, 0x00	; 0
    aede:	0e 94 56 aa 	call	0x154ac	; 0x154ac <__eerd_block_m128>
		  FillChar(strSend,0,sizeof(strSend));
    aee2:	c7 01       	movw	r24, r14
    aee4:	60 e0       	ldi	r22, 0x00	; 0
    aee6:	70 e0       	ldi	r23, 0x00	; 0
    aee8:	4c e3       	ldi	r20, 0x3C	; 60
    aeea:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>
	      sprintf_P(strSend,PSTR("%s"),strEEPROM);
    aeee:	00 d0       	rcall	.+0      	; 0xaef0 <SendConfigParamater+0x6c>
    aef0:	00 d0       	rcall	.+0      	; 0xaef2 <SendConfigParamater+0x6e>
    aef2:	00 d0       	rcall	.+0      	; 0xaef4 <SendConfigParamater+0x70>
    aef4:	ed b7       	in	r30, 0x3d	; 61
    aef6:	fe b7       	in	r31, 0x3e	; 62
    aef8:	31 96       	adiw	r30, 0x01	; 1
    aefa:	ad b7       	in	r26, 0x3d	; 61
    aefc:	be b7       	in	r27, 0x3e	; 62
    aefe:	12 96       	adiw	r26, 0x02	; 2
    af00:	fc 92       	st	X, r15
    af02:	ee 92       	st	-X, r14
    af04:	11 97       	sbiw	r26, 0x01	; 1
    af06:	b3 82       	std	Z+3, r11	; 0x03
    af08:	a2 82       	std	Z+2, r10	; 0x02
    af0a:	d5 82       	std	Z+5, r13	; 0x05
    af0c:	c4 82       	std	Z+4, r12	; 0x04
    af0e:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		  AddSpaceLag(strSend,40);
    af12:	ed b7       	in	r30, 0x3d	; 61
    af14:	fe b7       	in	r31, 0x3e	; 62
    af16:	36 96       	adiw	r30, 0x06	; 6
    af18:	0f b6       	in	r0, 0x3f	; 63
    af1a:	f8 94       	cli
    af1c:	fe bf       	out	0x3e, r31	; 62
    af1e:	0f be       	out	0x3f, r0	; 63
    af20:	ed bf       	out	0x3d, r30	; 61
    af22:	c7 01       	movw	r24, r14
    af24:	68 e2       	ldi	r22, 0x28	; 40
    af26:	0e 94 7d 27 	call	0x4efa	; 0x4efa <AddSpaceLag>
		  uart_print(1,0,strSend);
    af2a:	81 e0       	ldi	r24, 0x01	; 1
    af2c:	60 e0       	ldi	r22, 0x00	; 0
    af2e:	a7 01       	movw	r20, r14
    af30:	0e 94 03 a6 	call	0x14c06	; 0x14c06 <uart_print>
    af34:	07 5d       	subi	r16, 0xD7	; 215
    af36:	1f 4f       	sbci	r17, 0xFF	; 255
char strEEPROM[41],xEEPROM;

     //Start
	 uart_printf(1,0,PSTR("<"));
     //Header Footer 400
	 for (i=0;i<10;i++){
    af38:	f3 e0       	ldi	r31, 0x03	; 3
    af3a:	02 3c       	cpi	r16, 0xC2	; 194
    af3c:	1f 07       	cpc	r17, r31
    af3e:	59 f6       	brne	.-106    	; 0xaed6 <SendConfigParamater+0x52>
    af40:	0c eb       	ldi	r16, 0xBC	; 188
    af42:	10 e0       	ldi	r17, 0x00	; 0
		  AddSpaceLag(strSend,40);
		  uart_print(1,0,strSend);
	 }
	 //ProductName 72 
	 for (i=0;i<6;i++){
		 eeprom_read_block((void*) &strEEPROM, (const void*) &DefProductName[i],sizeof(DefProductName[i]));
    af44:	6e 01       	movw	r12, r28
    af46:	08 94       	sec
    af48:	c1 1c       	adc	r12, r1
    af4a:	d1 1c       	adc	r13, r1
		 FillChar(strSend,0,sizeof(strSend));
    af4c:	2a e2       	ldi	r18, 0x2A	; 42
    af4e:	e2 2e       	mov	r14, r18
    af50:	f1 2c       	mov	r15, r1
    af52:	ec 0e       	add	r14, r28
    af54:	fd 1e       	adc	r15, r29
	     sprintf_P(strSend,PSTR("%s"),strEEPROM);
    af56:	97 eb       	ldi	r25, 0xB7	; 183
    af58:	a9 2e       	mov	r10, r25
    af5a:	93 e2       	ldi	r25, 0x23	; 35
    af5c:	b9 2e       	mov	r11, r25
		  AddSpaceLag(strSend,40);
		  uart_print(1,0,strSend);
	 }
	 //ProductName 72 
	 for (i=0;i<6;i++){
		 eeprom_read_block((void*) &strEEPROM, (const void*) &DefProductName[i],sizeof(DefProductName[i]));
    af5e:	c6 01       	movw	r24, r12
    af60:	b8 01       	movw	r22, r16
    af62:	4d e0       	ldi	r20, 0x0D	; 13
    af64:	50 e0       	ldi	r21, 0x00	; 0
    af66:	0e 94 56 aa 	call	0x154ac	; 0x154ac <__eerd_block_m128>
		 FillChar(strSend,0,sizeof(strSend));
    af6a:	c7 01       	movw	r24, r14
    af6c:	60 e0       	ldi	r22, 0x00	; 0
    af6e:	70 e0       	ldi	r23, 0x00	; 0
    af70:	4c e3       	ldi	r20, 0x3C	; 60
    af72:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>
	     sprintf_P(strSend,PSTR("%s"),strEEPROM);
    af76:	00 d0       	rcall	.+0      	; 0xaf78 <SendConfigParamater+0xf4>
    af78:	00 d0       	rcall	.+0      	; 0xaf7a <SendConfigParamater+0xf6>
    af7a:	00 d0       	rcall	.+0      	; 0xaf7c <SendConfigParamater+0xf8>
    af7c:	ed b7       	in	r30, 0x3d	; 61
    af7e:	fe b7       	in	r31, 0x3e	; 62
    af80:	31 96       	adiw	r30, 0x01	; 1
    af82:	ad b7       	in	r26, 0x3d	; 61
    af84:	be b7       	in	r27, 0x3e	; 62
    af86:	12 96       	adiw	r26, 0x02	; 2
    af88:	fc 92       	st	X, r15
    af8a:	ee 92       	st	-X, r14
    af8c:	11 97       	sbiw	r26, 0x01	; 1
    af8e:	b3 82       	std	Z+3, r11	; 0x03
    af90:	a2 82       	std	Z+2, r10	; 0x02
    af92:	d5 82       	std	Z+5, r13	; 0x05
    af94:	c4 82       	std	Z+4, r12	; 0x04
    af96:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		 AddSpaceLag(strSend,12);
    af9a:	ed b7       	in	r30, 0x3d	; 61
    af9c:	fe b7       	in	r31, 0x3e	; 62
    af9e:	36 96       	adiw	r30, 0x06	; 6
    afa0:	0f b6       	in	r0, 0x3f	; 63
    afa2:	f8 94       	cli
    afa4:	fe bf       	out	0x3e, r31	; 62
    afa6:	0f be       	out	0x3f, r0	; 63
    afa8:	ed bf       	out	0x3d, r30	; 61
    afaa:	c7 01       	movw	r24, r14
    afac:	6c e0       	ldi	r22, 0x0C	; 12
    afae:	0e 94 7d 27 	call	0x4efa	; 0x4efa <AddSpaceLag>
		 uart_print(1,0,strSend);
    afb2:	81 e0       	ldi	r24, 0x01	; 1
    afb4:	60 e0       	ldi	r22, 0x00	; 0
    afb6:	a7 01       	movw	r20, r14
    afb8:	0e 94 03 a6 	call	0x14c06	; 0x14c06 <uart_print>
    afbc:	03 5f       	subi	r16, 0xF3	; 243
    afbe:	1f 4f       	sbci	r17, 0xFF	; 255
	      sprintf_P(strSend,PSTR("%s"),strEEPROM);
		  AddSpaceLag(strSend,40);
		  uart_print(1,0,strSend);
	 }
	 //ProductName 72 
	 for (i=0;i<6;i++){
    afc0:	f1 e0       	ldi	r31, 0x01	; 1
    afc2:	0a 30       	cpi	r16, 0x0A	; 10
    afc4:	1f 07       	cpc	r17, r31
    afc6:	59 f6       	brne	.-106    	; 0xaf5e <SendConfigParamater+0xda>
    afc8:	06 e8       	ldi	r16, 0x86	; 134
    afca:	10 e0       	ldi	r17, 0x00	; 0
		 AddSpaceLag(strSend,12);
		 uart_print(1,0,strSend);
	 }
	 //ProductPrice 30
	 for (i=0;i<6;i++){
		 eeprom_read_block((void*) &strEEPROM, (const void*) &DefProductPrice[i],sizeof(DefProductPrice[i]));
    afcc:	6e 01       	movw	r12, r28
    afce:	08 94       	sec
    afd0:	c1 1c       	adc	r12, r1
    afd2:	d1 1c       	adc	r13, r1
		 FillChar(strSend,0,sizeof(strSend));
    afd4:	8a e2       	ldi	r24, 0x2A	; 42
    afd6:	e8 2e       	mov	r14, r24
    afd8:	f1 2c       	mov	r15, r1
    afda:	ec 0e       	add	r14, r28
    afdc:	fd 1e       	adc	r15, r29
	     sprintf_P(strSend,PSTR("%s"),strEEPROM);
    afde:	b4 eb       	ldi	r27, 0xB4	; 180
    afe0:	ab 2e       	mov	r10, r27
    afe2:	b3 e2       	ldi	r27, 0x23	; 35
    afe4:	bb 2e       	mov	r11, r27
		 AddSpaceLag(strSend,12);
		 uart_print(1,0,strSend);
	 }
	 //ProductPrice 30
	 for (i=0;i<6;i++){
		 eeprom_read_block((void*) &strEEPROM, (const void*) &DefProductPrice[i],sizeof(DefProductPrice[i]));
    afe6:	c6 01       	movw	r24, r12
    afe8:	b8 01       	movw	r22, r16
    afea:	49 e0       	ldi	r20, 0x09	; 9
    afec:	50 e0       	ldi	r21, 0x00	; 0
    afee:	0e 94 56 aa 	call	0x154ac	; 0x154ac <__eerd_block_m128>
		 FillChar(strSend,0,sizeof(strSend));
    aff2:	c7 01       	movw	r24, r14
    aff4:	60 e0       	ldi	r22, 0x00	; 0
    aff6:	70 e0       	ldi	r23, 0x00	; 0
    aff8:	4c e3       	ldi	r20, 0x3C	; 60
    affa:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>
	     sprintf_P(strSend,PSTR("%s"),strEEPROM);
    affe:	00 d0       	rcall	.+0      	; 0xb000 <SendConfigParamater+0x17c>
    b000:	00 d0       	rcall	.+0      	; 0xb002 <SendConfigParamater+0x17e>
    b002:	00 d0       	rcall	.+0      	; 0xb004 <SendConfigParamater+0x180>
    b004:	ed b7       	in	r30, 0x3d	; 61
    b006:	fe b7       	in	r31, 0x3e	; 62
    b008:	31 96       	adiw	r30, 0x01	; 1
    b00a:	ad b7       	in	r26, 0x3d	; 61
    b00c:	be b7       	in	r27, 0x3e	; 62
    b00e:	12 96       	adiw	r26, 0x02	; 2
    b010:	fc 92       	st	X, r15
    b012:	ee 92       	st	-X, r14
    b014:	11 97       	sbiw	r26, 0x01	; 1
    b016:	b3 82       	std	Z+3, r11	; 0x03
    b018:	a2 82       	std	Z+2, r10	; 0x02
    b01a:	d5 82       	std	Z+5, r13	; 0x05
    b01c:	c4 82       	std	Z+4, r12	; 0x04
    b01e:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		 AddSpaceLag(strSend,5);
    b022:	ed b7       	in	r30, 0x3d	; 61
    b024:	fe b7       	in	r31, 0x3e	; 62
    b026:	36 96       	adiw	r30, 0x06	; 6
    b028:	0f b6       	in	r0, 0x3f	; 63
    b02a:	f8 94       	cli
    b02c:	fe bf       	out	0x3e, r31	; 62
    b02e:	0f be       	out	0x3f, r0	; 63
    b030:	ed bf       	out	0x3d, r30	; 61
    b032:	c7 01       	movw	r24, r14
    b034:	65 e0       	ldi	r22, 0x05	; 5
    b036:	0e 94 7d 27 	call	0x4efa	; 0x4efa <AddSpaceLag>
		 uart_print(1,0,strSend);
    b03a:	81 e0       	ldi	r24, 0x01	; 1
    b03c:	60 e0       	ldi	r22, 0x00	; 0
    b03e:	a7 01       	movw	r20, r14
    b040:	0e 94 03 a6 	call	0x14c06	; 0x14c06 <uart_print>
    b044:	07 5f       	subi	r16, 0xF7	; 247
    b046:	1f 4f       	sbci	r17, 0xFF	; 255
	     sprintf_P(strSend,PSTR("%s"),strEEPROM);
		 AddSpaceLag(strSend,12);
		 uart_print(1,0,strSend);
	 }
	 //ProductPrice 30
	 for (i=0;i<6;i++){
    b048:	f0 e0       	ldi	r31, 0x00	; 0
    b04a:	0c 3b       	cpi	r16, 0xBC	; 188
    b04c:	1f 07       	cpc	r17, r31
    b04e:	59 f6       	brne	.-106    	; 0xafe6 <SendConfigParamater+0x162>
    b050:	00 e0       	ldi	r16, 0x00	; 0
    b052:	10 e0       	ldi	r17, 0x00	; 0
	 }
	 //PumpID Config 8
	 for (i=0;i<8;i++){
	      xEEPROM=eeprom_read_byte(&DefPumpMap[i]);
		  if (xEEPROM>=100)xEEPROM=0;
		  FillChar(strSend,0,sizeof(strSend));
    b054:	aa e2       	ldi	r26, 0x2A	; 42
    b056:	ea 2e       	mov	r14, r26
    b058:	f1 2c       	mov	r15, r1
    b05a:	ec 0e       	add	r14, r28
    b05c:	fd 1e       	adc	r15, r29
	      sprintf_P(strSend,PSTR("%.2d"),xEEPROM);
    b05e:	ff ea       	ldi	r31, 0xAF	; 175
    b060:	cf 2e       	mov	r12, r31
    b062:	f3 e2       	ldi	r31, 0x23	; 35
    b064:	df 2e       	mov	r13, r31
		 AddSpaceLag(strSend,5);
		 uart_print(1,0,strSend);
	 }
	 //PumpID Config 8
	 for (i=0;i<8;i++){
	      xEEPROM=eeprom_read_byte(&DefPumpMap[i]);
    b066:	c8 01       	movw	r24, r16
    b068:	8a 5b       	subi	r24, 0xBA	; 186
    b06a:	9f 4f       	sbci	r25, 0xFF	; 255
    b06c:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
    b070:	28 2f       	mov	r18, r24
		  if (xEEPROM>=100)xEEPROM=0;
    b072:	84 36       	cpi	r24, 0x64	; 100
    b074:	08 f0       	brcs	.+2      	; 0xb078 <SendConfigParamater+0x1f4>
    b076:	20 e0       	ldi	r18, 0x00	; 0
		  FillChar(strSend,0,sizeof(strSend));
    b078:	c7 01       	movw	r24, r14
    b07a:	60 e0       	ldi	r22, 0x00	; 0
    b07c:	70 e0       	ldi	r23, 0x00	; 0
    b07e:	4c e3       	ldi	r20, 0x3C	; 60
    b080:	a7 96       	adiw	r28, 0x27	; 39
    b082:	2f af       	std	Y+63, r18	; 0x3f
    b084:	a7 97       	sbiw	r28, 0x27	; 39
    b086:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>
	      sprintf_P(strSend,PSTR("%.2d"),xEEPROM);
    b08a:	00 d0       	rcall	.+0      	; 0xb08c <SendConfigParamater+0x208>
    b08c:	00 d0       	rcall	.+0      	; 0xb08e <SendConfigParamater+0x20a>
    b08e:	00 d0       	rcall	.+0      	; 0xb090 <SendConfigParamater+0x20c>
    b090:	ed b7       	in	r30, 0x3d	; 61
    b092:	fe b7       	in	r31, 0x3e	; 62
    b094:	31 96       	adiw	r30, 0x01	; 1
    b096:	ad b7       	in	r26, 0x3d	; 61
    b098:	be b7       	in	r27, 0x3e	; 62
    b09a:	12 96       	adiw	r26, 0x02	; 2
    b09c:	fc 92       	st	X, r15
    b09e:	ee 92       	st	-X, r14
    b0a0:	11 97       	sbiw	r26, 0x01	; 1
    b0a2:	d3 82       	std	Z+3, r13	; 0x03
    b0a4:	c2 82       	std	Z+2, r12	; 0x02
    b0a6:	a7 96       	adiw	r28, 0x27	; 39
    b0a8:	2f ad       	ldd	r18, Y+63	; 0x3f
    b0aa:	a7 97       	sbiw	r28, 0x27	; 39
    b0ac:	24 83       	std	Z+4, r18	; 0x04
    b0ae:	15 82       	std	Z+5, r1	; 0x05
    b0b0:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		  AddSpaceLag(strSend,2);
    b0b4:	ed b7       	in	r30, 0x3d	; 61
    b0b6:	fe b7       	in	r31, 0x3e	; 62
    b0b8:	36 96       	adiw	r30, 0x06	; 6
    b0ba:	0f b6       	in	r0, 0x3f	; 63
    b0bc:	f8 94       	cli
    b0be:	fe bf       	out	0x3e, r31	; 62
    b0c0:	0f be       	out	0x3f, r0	; 63
    b0c2:	ed bf       	out	0x3d, r30	; 61
    b0c4:	c7 01       	movw	r24, r14
    b0c6:	62 e0       	ldi	r22, 0x02	; 2
    b0c8:	0e 94 7d 27 	call	0x4efa	; 0x4efa <AddSpaceLag>
		 uart_print(1,0,strSend);
    b0cc:	81 e0       	ldi	r24, 0x01	; 1
    b0ce:	60 e0       	ldi	r22, 0x00	; 0
    b0d0:	a7 01       	movw	r20, r14
    b0d2:	0e 94 03 a6 	call	0x14c06	; 0x14c06 <uart_print>
    b0d6:	0f 5f       	subi	r16, 0xFF	; 255
    b0d8:	1f 4f       	sbci	r17, 0xFF	; 255
	     sprintf_P(strSend,PSTR("%s"),strEEPROM);
		 AddSpaceLag(strSend,5);
		 uart_print(1,0,strSend);
	 }
	 //PumpID Config 8
	 for (i=0;i<8;i++){
    b0da:	08 30       	cpi	r16, 0x08	; 8
    b0dc:	11 05       	cpc	r17, r1
    b0de:	19 f6       	brne	.-122    	; 0xb066 <SendConfigParamater+0x1e2>
    b0e0:	06 e5       	ldi	r16, 0x56	; 86
    b0e2:	10 e0       	ldi	r17, 0x00	; 0
	 //PumpID NozzleConfig 48
	 for (i=0;i<8;i++){
	      for (j=0;j<6;j++){
		       xEEPROM=eeprom_read_byte(&DefNozzleMap[i][j]);     
			   if (xEEPROM>=10)xEEPROM=0;
			   sprintf_P(strSend,PSTR("%d"),xEEPROM);
    b0e4:	ea e2       	ldi	r30, 0x2A	; 42
    b0e6:	ee 2e       	mov	r14, r30
    b0e8:	f1 2c       	mov	r15, r1
    b0ea:	ec 0e       	add	r14, r28
    b0ec:	fd 1e       	adc	r15, r29
    b0ee:	7c ea       	ldi	r23, 0xAC	; 172
    b0f0:	a7 2e       	mov	r10, r23
    b0f2:	73 e2       	ldi	r23, 0x23	; 35
    b0f4:	b7 2e       	mov	r11, r23
    b0f6:	31 c0       	rjmp	.+98     	; 0xb15a <SendConfigParamater+0x2d6>
		 uart_print(1,0,strSend);
	 }
	 //PumpID NozzleConfig 48
	 for (i=0;i<8;i++){
	      for (j=0;j<6;j++){
		       xEEPROM=eeprom_read_byte(&DefNozzleMap[i][j]);     
    b0f8:	c6 01       	movw	r24, r12
    b0fa:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
			   if (xEEPROM>=10)xEEPROM=0;
    b0fe:	8a 30       	cpi	r24, 0x0A	; 10
    b100:	08 f0       	brcs	.+2      	; 0xb104 <SendConfigParamater+0x280>
    b102:	80 e0       	ldi	r24, 0x00	; 0
			   sprintf_P(strSend,PSTR("%d"),xEEPROM);
    b104:	00 d0       	rcall	.+0      	; 0xb106 <SendConfigParamater+0x282>
    b106:	00 d0       	rcall	.+0      	; 0xb108 <SendConfigParamater+0x284>
    b108:	00 d0       	rcall	.+0      	; 0xb10a <SendConfigParamater+0x286>
    b10a:	ed b7       	in	r30, 0x3d	; 61
    b10c:	fe b7       	in	r31, 0x3e	; 62
    b10e:	31 96       	adiw	r30, 0x01	; 1
    b110:	ad b7       	in	r26, 0x3d	; 61
    b112:	be b7       	in	r27, 0x3e	; 62
    b114:	12 96       	adiw	r26, 0x02	; 2
    b116:	fc 92       	st	X, r15
    b118:	ee 92       	st	-X, r14
    b11a:	11 97       	sbiw	r26, 0x01	; 1
    b11c:	b3 82       	std	Z+3, r11	; 0x03
    b11e:	a2 82       	std	Z+2, r10	; 0x02
    b120:	84 83       	std	Z+4, r24	; 0x04
    b122:	15 82       	std	Z+5, r1	; 0x05
    b124:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
			   uart_print(1,0,strSend);
    b128:	ed b7       	in	r30, 0x3d	; 61
    b12a:	fe b7       	in	r31, 0x3e	; 62
    b12c:	36 96       	adiw	r30, 0x06	; 6
    b12e:	0f b6       	in	r0, 0x3f	; 63
    b130:	f8 94       	cli
    b132:	fe bf       	out	0x3e, r31	; 62
    b134:	0f be       	out	0x3f, r0	; 63
    b136:	ed bf       	out	0x3d, r30	; 61
    b138:	81 e0       	ldi	r24, 0x01	; 1
    b13a:	60 e0       	ldi	r22, 0x00	; 0
    b13c:	a7 01       	movw	r20, r14
    b13e:	0e 94 03 a6 	call	0x14c06	; 0x14c06 <uart_print>
    b142:	9a 94       	dec	r9
    b144:	08 94       	sec
    b146:	c1 1c       	adc	r12, r1
    b148:	d1 1c       	adc	r13, r1
		  AddSpaceLag(strSend,2);
		 uart_print(1,0,strSend);
	 }
	 //PumpID NozzleConfig 48
	 for (i=0;i<8;i++){
	      for (j=0;j<6;j++){
    b14a:	99 20       	and	r9, r9
    b14c:	a9 f6       	brne	.-86     	; 0xb0f8 <SendConfigParamater+0x274>
    b14e:	0a 5f       	subi	r16, 0xFA	; 250
    b150:	1f 4f       	sbci	r17, 0xFF	; 255
	      sprintf_P(strSend,PSTR("%.2d"),xEEPROM);
		  AddSpaceLag(strSend,2);
		 uart_print(1,0,strSend);
	 }
	 //PumpID NozzleConfig 48
	 for (i=0;i<8;i++){
    b152:	f0 e0       	ldi	r31, 0x00	; 0
    b154:	06 38       	cpi	r16, 0x86	; 134
    b156:	1f 07       	cpc	r17, r31
    b158:	21 f0       	breq	.+8      	; 0xb162 <SendConfigParamater+0x2de>
		 uart_print(1,0,strSend);
	 }
	 //PumpID Config 8
	 for (i=0;i<8;i++){
	      xEEPROM=eeprom_read_byte(&DefPumpMap[i]);
		  if (xEEPROM>=100)xEEPROM=0;
    b15a:	68 01       	movw	r12, r16
    b15c:	66 e0       	ldi	r22, 0x06	; 6
    b15e:	96 2e       	mov	r9, r22
    b160:	cb cf       	rjmp	.-106    	; 0xb0f8 <SendConfigParamater+0x274>
			   sprintf_P(strSend,PSTR("%d"),xEEPROM);
			   uart_print(1,0,strSend);
		  }
	 }
	 //PrintNoMoney
	 xEEPROM=eeprom_read_byte(&DefPrintMoney);
    b162:	82 ec       	ldi	r24, 0xC2	; 194
    b164:	93 e0       	ldi	r25, 0x03	; 3
    b166:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
	 if (xEEPROM==True){
    b16a:	81 30       	cpi	r24, 0x01	; 1
    b16c:	79 f4       	brne	.+30     	; 0xb18c <SendConfigParamater+0x308>
		 sprintf_P(strSend,PSTR("1"));
    b16e:	00 d0       	rcall	.+0      	; 0xb170 <SendConfigParamater+0x2ec>
    b170:	00 d0       	rcall	.+0      	; 0xb172 <SendConfigParamater+0x2ee>
    b172:	ad b7       	in	r26, 0x3d	; 61
    b174:	be b7       	in	r27, 0x3e	; 62
    b176:	12 96       	adiw	r26, 0x02	; 2
    b178:	fc 92       	st	X, r15
    b17a:	ee 92       	st	-X, r14
    b17c:	11 97       	sbiw	r26, 0x01	; 1
    b17e:	8a ea       	ldi	r24, 0xAA	; 170
    b180:	93 e2       	ldi	r25, 0x23	; 35
    b182:	14 96       	adiw	r26, 0x04	; 4
    b184:	9c 93       	st	X, r25
    b186:	8e 93       	st	-X, r24
    b188:	13 97       	sbiw	r26, 0x03	; 3
    b18a:	0a c0       	rjmp	.+20     	; 0xb1a0 <SendConfigParamater+0x31c>
	 }else{
	     sprintf_P(strSend,PSTR("0"));
    b18c:	00 d0       	rcall	.+0      	; 0xb18e <SendConfigParamater+0x30a>
    b18e:	00 d0       	rcall	.+0      	; 0xb190 <SendConfigParamater+0x30c>
    b190:	ed b7       	in	r30, 0x3d	; 61
    b192:	fe b7       	in	r31, 0x3e	; 62
    b194:	f2 82       	std	Z+2, r15	; 0x02
    b196:	e1 82       	std	Z+1, r14	; 0x01
    b198:	88 ea       	ldi	r24, 0xA8	; 168
    b19a:	93 e2       	ldi	r25, 0x23	; 35
    b19c:	94 83       	std	Z+4, r25	; 0x04
    b19e:	83 83       	std	Z+3, r24	; 0x03
    b1a0:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    b1a4:	0f 90       	pop	r0
    b1a6:	0f 90       	pop	r0
    b1a8:	0f 90       	pop	r0
    b1aa:	0f 90       	pop	r0
	 }uart_print(1,0,strSend);
    b1ac:	8e 01       	movw	r16, r28
    b1ae:	06 5d       	subi	r16, 0xD6	; 214
    b1b0:	1f 4f       	sbci	r17, 0xFF	; 255
    b1b2:	81 e0       	ldi	r24, 0x01	; 1
    b1b4:	60 e0       	ldi	r22, 0x00	; 0
    b1b6:	a8 01       	movw	r20, r16
    b1b8:	0e 94 03 a6 	call	0x14c06	; 0x14c06 <uart_print>
	 //TermId
     xEEPROM=eeprom_read_byte(&DefIFT_ID);     
    b1bc:	80 e0       	ldi	r24, 0x00	; 0
    b1be:	90 e0       	ldi	r25, 0x00	; 0
    b1c0:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
     sprintf_P(strSend,PSTR("%.2d"),xEEPROM);
    b1c4:	00 d0       	rcall	.+0      	; 0xb1c6 <SendConfigParamater+0x342>
    b1c6:	00 d0       	rcall	.+0      	; 0xb1c8 <SendConfigParamater+0x344>
    b1c8:	00 d0       	rcall	.+0      	; 0xb1ca <SendConfigParamater+0x346>
    b1ca:	ed b7       	in	r30, 0x3d	; 61
    b1cc:	fe b7       	in	r31, 0x3e	; 62
    b1ce:	31 96       	adiw	r30, 0x01	; 1
    b1d0:	ad b7       	in	r26, 0x3d	; 61
    b1d2:	be b7       	in	r27, 0x3e	; 62
    b1d4:	12 96       	adiw	r26, 0x02	; 2
    b1d6:	1c 93       	st	X, r17
    b1d8:	0e 93       	st	-X, r16
    b1da:	11 97       	sbiw	r26, 0x01	; 1
    b1dc:	23 ea       	ldi	r18, 0xA3	; 163
    b1de:	33 e2       	ldi	r19, 0x23	; 35
    b1e0:	33 83       	std	Z+3, r19	; 0x03
    b1e2:	22 83       	std	Z+2, r18	; 0x02
    b1e4:	84 83       	std	Z+4, r24	; 0x04
    b1e6:	15 82       	std	Z+5, r1	; 0x05
    b1e8:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
     uart_print(1,0,strSend);
    b1ec:	ed b7       	in	r30, 0x3d	; 61
    b1ee:	fe b7       	in	r31, 0x3e	; 62
    b1f0:	36 96       	adiw	r30, 0x06	; 6
    b1f2:	0f b6       	in	r0, 0x3f	; 63
    b1f4:	f8 94       	cli
    b1f6:	fe bf       	out	0x3e, r31	; 62
    b1f8:	0f be       	out	0x3f, r0	; 63
    b1fa:	ed bf       	out	0x3d, r30	; 61
    b1fc:	81 e0       	ldi	r24, 0x01	; 1
    b1fe:	60 e0       	ldi	r22, 0x00	; 0
    b200:	a8 01       	movw	r20, r16
    b202:	0e 94 03 a6 	call	0x14c06	; 0x14c06 <uart_print>
    b206:	ee 24       	eor	r14, r14
    b208:	ff 24       	eor	r15, r15
	 //PumpLabel
     for (i=0;i<8;i++){
	      xEEPROM=eeprom_read_byte(&DefPumpLabel[i]);
		  if (xEEPROM>=100)xEEPROM=0;
		  FillChar(strSend,0,sizeof(strSend));
    b20a:	c0 2e       	mov	r12, r16
    b20c:	a1 2e       	mov	r10, r17
	      sprintf_P(strSend,PSTR("%.2d"),xEEPROM);
    b20e:	0e e9       	ldi	r16, 0x9E	; 158
    b210:	13 e2       	ldi	r17, 0x23	; 35
     xEEPROM=eeprom_read_byte(&DefIFT_ID);     
     sprintf_P(strSend,PSTR("%.2d"),xEEPROM);
     uart_print(1,0,strSend);
	 //PumpLabel
     for (i=0;i<8;i++){
	      xEEPROM=eeprom_read_byte(&DefPumpLabel[i]);
    b212:	c7 01       	movw	r24, r14
    b214:	82 5b       	subi	r24, 0xB2	; 178
    b216:	9f 4f       	sbci	r25, 0xFF	; 255
    b218:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
    b21c:	28 2f       	mov	r18, r24
		  if (xEEPROM>=100)xEEPROM=0;
    b21e:	84 36       	cpi	r24, 0x64	; 100
    b220:	08 f0       	brcs	.+2      	; 0xb224 <SendConfigParamater+0x3a0>
    b222:	20 e0       	ldi	r18, 0x00	; 0
		  FillChar(strSend,0,sizeof(strSend));
    b224:	8c 2d       	mov	r24, r12
    b226:	9a 2d       	mov	r25, r10
    b228:	60 e0       	ldi	r22, 0x00	; 0
    b22a:	70 e0       	ldi	r23, 0x00	; 0
    b22c:	4c e3       	ldi	r20, 0x3C	; 60
    b22e:	a7 96       	adiw	r28, 0x27	; 39
    b230:	2f af       	std	Y+63, r18	; 0x3f
    b232:	a7 97       	sbiw	r28, 0x27	; 39
    b234:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>
	      sprintf_P(strSend,PSTR("%.2d"),xEEPROM);
    b238:	00 d0       	rcall	.+0      	; 0xb23a <SendConfigParamater+0x3b6>
    b23a:	00 d0       	rcall	.+0      	; 0xb23c <SendConfigParamater+0x3b8>
    b23c:	00 d0       	rcall	.+0      	; 0xb23e <SendConfigParamater+0x3ba>
    b23e:	ed b7       	in	r30, 0x3d	; 61
    b240:	fe b7       	in	r31, 0x3e	; 62
    b242:	31 96       	adiw	r30, 0x01	; 1
    b244:	ad b7       	in	r26, 0x3d	; 61
    b246:	be b7       	in	r27, 0x3e	; 62
    b248:	11 96       	adiw	r26, 0x01	; 1
    b24a:	cc 92       	st	X, r12
    b24c:	11 97       	sbiw	r26, 0x01	; 1
    b24e:	12 96       	adiw	r26, 0x02	; 2
    b250:	ac 92       	st	X, r10
    b252:	13 83       	std	Z+3, r17	; 0x03
    b254:	02 83       	std	Z+2, r16	; 0x02
    b256:	a7 96       	adiw	r28, 0x27	; 39
    b258:	2f ad       	ldd	r18, Y+63	; 0x3f
    b25a:	a7 97       	sbiw	r28, 0x27	; 39
    b25c:	24 83       	std	Z+4, r18	; 0x04
    b25e:	15 82       	std	Z+5, r1	; 0x05
    b260:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		  AddSpaceLag(strSend,2);
    b264:	ed b7       	in	r30, 0x3d	; 61
    b266:	fe b7       	in	r31, 0x3e	; 62
    b268:	36 96       	adiw	r30, 0x06	; 6
    b26a:	0f b6       	in	r0, 0x3f	; 63
    b26c:	f8 94       	cli
    b26e:	fe bf       	out	0x3e, r31	; 62
    b270:	0f be       	out	0x3f, r0	; 63
    b272:	ed bf       	out	0x3d, r30	; 61
    b274:	8c 2d       	mov	r24, r12
    b276:	9a 2d       	mov	r25, r10
    b278:	62 e0       	ldi	r22, 0x02	; 2
    b27a:	0e 94 7d 27 	call	0x4efa	; 0x4efa <AddSpaceLag>
		 uart_print(1,0,strSend);
    b27e:	81 e0       	ldi	r24, 0x01	; 1
    b280:	60 e0       	ldi	r22, 0x00	; 0
    b282:	4c 2d       	mov	r20, r12
    b284:	5a 2d       	mov	r21, r10
    b286:	0e 94 03 a6 	call	0x14c06	; 0x14c06 <uart_print>
    b28a:	08 94       	sec
    b28c:	e1 1c       	adc	r14, r1
    b28e:	f1 1c       	adc	r15, r1
	 //TermId
     xEEPROM=eeprom_read_byte(&DefIFT_ID);     
     sprintf_P(strSend,PSTR("%.2d"),xEEPROM);
     uart_print(1,0,strSend);
	 //PumpLabel
     for (i=0;i<8;i++){
    b290:	f8 e0       	ldi	r31, 0x08	; 8
    b292:	ef 16       	cp	r14, r31
    b294:	f1 04       	cpc	r15, r1
    b296:	09 f0       	breq	.+2      	; 0xb29a <SendConfigParamater+0x416>
    b298:	bc cf       	rjmp	.-136    	; 0xb212 <SendConfigParamater+0x38e>
		  FillChar(strSend,0,sizeof(strSend));
	      sprintf_P(strSend,PSTR("%.2d"),xEEPROM);
		  AddSpaceLag(strSend,2);
		 uart_print(1,0,strSend);
	 }
	 uart_printf(1,1,PSTR(">"));
    b29a:	81 e0       	ldi	r24, 0x01	; 1
    b29c:	61 e0       	ldi	r22, 0x01	; 1
    b29e:	4c e9       	ldi	r20, 0x9C	; 156
    b2a0:	53 e2       	ldi	r21, 0x23	; 35
    b2a2:	0e 94 2c a6 	call	0x14c58	; 0x14c58 <uart_printf>
	 //End
}
    b2a6:	ca 59       	subi	r28, 0x9A	; 154
    b2a8:	df 4f       	sbci	r29, 0xFF	; 255
    b2aa:	0f b6       	in	r0, 0x3f	; 63
    b2ac:	f8 94       	cli
    b2ae:	de bf       	out	0x3e, r29	; 62
    b2b0:	0f be       	out	0x3f, r0	; 63
    b2b2:	cd bf       	out	0x3d, r28	; 61
    b2b4:	cf 91       	pop	r28
    b2b6:	df 91       	pop	r29
    b2b8:	1f 91       	pop	r17
    b2ba:	0f 91       	pop	r16
    b2bc:	ff 90       	pop	r15
    b2be:	ef 90       	pop	r14
    b2c0:	df 90       	pop	r13
    b2c2:	cf 90       	pop	r12
    b2c4:	bf 90       	pop	r11
    b2c6:	af 90       	pop	r10
    b2c8:	9f 90       	pop	r9
    b2ca:	08 95       	ret

0000b2cc <GenerateTransactionNum>:
		 //else Result=PS_NO_DATA;    		    
	 }	
   return Result;
}

void GenerateTransactionNum(char *sTransNumber){//Create and Save TransactionNumber to EEPROM
    b2cc:	af 92       	push	r10
    b2ce:	bf 92       	push	r11
    b2d0:	cf 92       	push	r12
    b2d2:	df 92       	push	r13
    b2d4:	ef 92       	push	r14
    b2d6:	ff 92       	push	r15
    b2d8:	0f 93       	push	r16
    b2da:	1f 93       	push	r17
    b2dc:	df 93       	push	r29
    b2de:	cf 93       	push	r28
    b2e0:	cd b7       	in	r28, 0x3d	; 61
    b2e2:	de b7       	in	r29, 0x3e	; 62
    b2e4:	27 97       	sbiw	r28, 0x07	; 7
    b2e6:	0f b6       	in	r0, 0x3f	; 63
    b2e8:	f8 94       	cli
    b2ea:	de bf       	out	0x3e, r29	; 62
    b2ec:	0f be       	out	0x3f, r0	; 63
    b2ee:	cd bf       	out	0x3d, r28	; 61
    b2f0:	7c 01       	movw	r14, r24
     char i,PTransNum[7],cNum,xNum=0,xAdd=0,Length=0;
	 FillChar(PTransNum,sizeof(PTransNum),0);//"999999"->"000000"
    b2f2:	8e 01       	movw	r16, r28
    b2f4:	0f 5f       	subi	r16, 0xFF	; 255
    b2f6:	1f 4f       	sbci	r17, 0xFF	; 255
    b2f8:	c8 01       	movw	r24, r16
    b2fa:	67 e0       	ldi	r22, 0x07	; 7
    b2fc:	70 e0       	ldi	r23, 0x00	; 0
    b2fe:	40 e0       	ldi	r20, 0x00	; 0
    b300:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>
     eeprom_read_block((void*) &PTransNum, (const void*) &DefTransactionNumber,sizeof(DefTransactionNumber));
    b304:	c8 01       	movw	r24, r16
    b306:	69 e3       	ldi	r22, 0x39	; 57
    b308:	71 e0       	ldi	r23, 0x01	; 1
    b30a:	47 e0       	ldi	r20, 0x07	; 7
    b30c:	50 e0       	ldi	r21, 0x00	; 0
    b30e:	0e 94 56 aa 	call	0x154ac	; 0x154ac <__eerd_block_m128>
     xAdd=1;
	 xNum=0;
	 Length=strlen(PTransNum);
    b312:	f8 01       	movw	r30, r16
    b314:	01 90       	ld	r0, Z+
    b316:	00 20       	and	r0, r0
    b318:	e9 f7       	brne	.-6      	; 0xb314 <GenerateTransactionNum+0x48>
    b31a:	af 01       	movw	r20, r30
    b31c:	41 50       	subi	r20, 0x01	; 1
    b31e:	50 40       	sbci	r21, 0x00	; 0
    b320:	40 1b       	sub	r20, r16
		 //else Result=PS_NO_DATA;    		    
	 }	
   return Result;
}

void GenerateTransactionNum(char *sTransNumber){//Create and Save TransactionNumber to EEPROM
    b322:	c4 2e       	mov	r12, r20
    b324:	dd 24       	eor	r13, r13
    b326:	98 01       	movw	r18, r16
    b328:	2c 0d       	add	r18, r12
    b32a:	3d 1d       	adc	r19, r13
    b32c:	ce 0c       	add	r12, r14
    b32e:	df 1c       	adc	r13, r15
    b330:	76 01       	movw	r14, r12
     char i,PTransNum[7],cNum,xNum=0,xAdd=0,Length=0;
	 FillChar(PTransNum,sizeof(PTransNum),0);//"999999"->"000000"
     eeprom_read_block((void*) &PTransNum, (const void*) &DefTransactionNumber,sizeof(DefTransactionNumber));
     xAdd=1;
    b332:	61 e0       	ldi	r22, 0x01	; 1
	 xNum=0;
	 Length=strlen(PTransNum);

	 for(i=0;i<Length;i++){//[000009] 999999 123456
	     xNum=PTransNum[Length-i-1]-'0';		 
		 cNum='0'+((xNum+xAdd)%10);
    b334:	5a e0       	ldi	r21, 0x0A	; 10
    b336:	a5 2e       	mov	r10, r21
    b338:	b1 2c       	mov	r11, r1
     eeprom_read_block((void*) &PTransNum, (const void*) &DefTransactionNumber,sizeof(DefTransactionNumber));
     xAdd=1;
	 xNum=0;
	 Length=strlen(PTransNum);

	 for(i=0;i<Length;i++){//[000009] 999999 123456
    b33a:	10 c0       	rjmp	.+32     	; 0xb35c <GenerateTransactionNum+0x90>
    b33c:	21 50       	subi	r18, 0x01	; 1
    b33e:	30 40       	sbci	r19, 0x00	; 0
		 //else Result=PS_NO_DATA;    		    
	 }	
   return Result;
}

void GenerateTransactionNum(char *sTransNumber){//Create and Save TransactionNumber to EEPROM
    b340:	f9 01       	movw	r30, r18
     xAdd=1;
	 xNum=0;
	 Length=strlen(PTransNum);

	 for(i=0;i<Length;i++){//[000009] 999999 123456
	     xNum=PTransNum[Length-i-1]-'0';		 
    b342:	80 81       	ld	r24, Z
    b344:	80 53       	subi	r24, 0x30	; 48
		 cNum='0'+((xNum+xAdd)%10);
    b346:	90 e0       	ldi	r25, 0x00	; 0
    b348:	86 0f       	add	r24, r22
    b34a:	91 1d       	adc	r25, r1
    b34c:	b5 01       	movw	r22, r10
    b34e:	0e 94 ab a7 	call	0x14f56	; 0x14f56 <__divmodhi4>
    b352:	80 5d       	subi	r24, 0xD0	; 208
		 xAdd=((xNum+xAdd)/10);
		 PTransNum[Length-i-1]=cNum;
    b354:	80 83       	st	Z, r24
		 sTransNumber[Length-i-1]=cNum;
    b356:	f7 01       	movw	r30, r14
    b358:	82 93       	st	-Z, r24
    b35a:	7f 01       	movw	r14, r30
     eeprom_read_block((void*) &PTransNum, (const void*) &DefTransactionNumber,sizeof(DefTransactionNumber));
     xAdd=1;
	 xNum=0;
	 Length=strlen(PTransNum);

	 for(i=0;i<Length;i++){//[000009] 999999 123456
    b35c:	20 17       	cp	r18, r16
    b35e:	31 07       	cpc	r19, r17
    b360:	69 f7       	brne	.-38     	; 0xb33c <GenerateTransactionNum+0x70>
		 cNum='0'+((xNum+xAdd)%10);
		 xAdd=((xNum+xAdd)/10);
		 PTransNum[Length-i-1]=cNum;
		 sTransNumber[Length-i-1]=cNum;
	 }
	 sTransNumber[Length]=0;
    b362:	f6 01       	movw	r30, r12
    b364:	10 82       	st	Z, r1
	 PTransNum[Length]=0;
    b366:	ce 01       	movw	r24, r28
    b368:	01 96       	adiw	r24, 0x01	; 1
    b36a:	fc 01       	movw	r30, r24
    b36c:	e4 0f       	add	r30, r20
    b36e:	f1 1d       	adc	r31, r1
    b370:	10 82       	st	Z, r1

     eeprom_write_block((const void*)&PTransNum,(void*)&DefTransactionNumber,sizeof(DefTransactionNumber));
    b372:	69 e3       	ldi	r22, 0x39	; 57
    b374:	71 e0       	ldi	r23, 0x01	; 1
    b376:	47 e0       	ldi	r20, 0x07	; 7
    b378:	50 e0       	ldi	r21, 0x00	; 0
    b37a:	0e 94 6e aa 	call	0x154dc	; 0x154dc <__eewr_block_m128>
}
    b37e:	27 96       	adiw	r28, 0x07	; 7
    b380:	0f b6       	in	r0, 0x3f	; 63
    b382:	f8 94       	cli
    b384:	de bf       	out	0x3e, r29	; 62
    b386:	0f be       	out	0x3f, r0	; 63
    b388:	cd bf       	out	0x3d, r28	; 61
    b38a:	cf 91       	pop	r28
    b38c:	df 91       	pop	r29
    b38e:	1f 91       	pop	r17
    b390:	0f 91       	pop	r16
    b392:	ff 90       	pop	r15
    b394:	ef 90       	pop	r14
    b396:	df 90       	pop	r13
    b398:	cf 90       	pop	r12
    b39a:	bf 90       	pop	r11
    b39c:	af 90       	pop	r10
    b39e:	08 95       	ret

0000b3a0 <ProcMessage91>:
	 for (i=0;i<Length;i++){
	     strMemory[i]=data;
	 }
}

void ProcMessage91(){
    b3a0:	cf 93       	push	r28
    b3a2:	df 93       	push	r29
     StrPosCopy(rcv_trans,strTranNo,37,6);
    b3a4:	c1 e0       	ldi	r28, 0x01	; 1
    b3a6:	da e0       	ldi	r29, 0x0A	; 10
    b3a8:	ce 01       	movw	r24, r28
    b3aa:	6c e8       	ldi	r22, 0x8C	; 140
    b3ac:	7d e0       	ldi	r23, 0x0D	; 13
    b3ae:	45 e2       	ldi	r20, 0x25	; 37
    b3b0:	50 e0       	ldi	r21, 0x00	; 0
    b3b2:	26 e0       	ldi	r18, 0x06	; 6
    b3b4:	30 e0       	ldi	r19, 0x00	; 0
    b3b6:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
     StrPosCopy(rcv_trans,strFIP_ID,43,2);
    b3ba:	ce 01       	movw	r24, r28
    b3bc:	6d e9       	ldi	r22, 0x9D	; 157
    b3be:	78 e0       	ldi	r23, 0x08	; 8
    b3c0:	4b e2       	ldi	r20, 0x2B	; 43
    b3c2:	50 e0       	ldi	r21, 0x00	; 0
    b3c4:	22 e0       	ldi	r18, 0x02	; 2
    b3c6:	30 e0       	ldi	r19, 0x00	; 0
    b3c8:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
     StrPosCopy(rcv_trans,strDescription,45,15);
    b3cc:	ce 01       	movw	r24, r28
    b3ce:	66 e0       	ldi	r22, 0x06	; 6
    b3d0:	79 e0       	ldi	r23, 0x09	; 9
    b3d2:	4d e2       	ldi	r20, 0x2D	; 45
    b3d4:	50 e0       	ldi	r21, 0x00	; 0
    b3d6:	2f e0       	ldi	r18, 0x0F	; 15
    b3d8:	30 e0       	ldi	r19, 0x00	; 0
    b3da:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
     StrPosCopy(rcv_trans,strPrice,60,6);
    b3de:	ce 01       	movw	r24, r28
    b3e0:	62 e8       	ldi	r22, 0x82	; 130
    b3e2:	76 e0       	ldi	r23, 0x06	; 6
    b3e4:	4c e3       	ldi	r20, 0x3C	; 60
    b3e6:	50 e0       	ldi	r21, 0x00	; 0
    b3e8:	26 e0       	ldi	r18, 0x06	; 6
    b3ea:	30 e0       	ldi	r19, 0x00	; 0
    b3ec:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
     StrPosCopy(rcv_trans,strVolume,66,8);
    b3f0:	ce 01       	movw	r24, r28
    b3f2:	6a e5       	ldi	r22, 0x5A	; 90
    b3f4:	74 e0       	ldi	r23, 0x04	; 4
    b3f6:	42 e4       	ldi	r20, 0x42	; 66
    b3f8:	50 e0       	ldi	r21, 0x00	; 0
    b3fa:	28 e0       	ldi	r18, 0x08	; 8
    b3fc:	30 e0       	ldi	r19, 0x00	; 0
    b3fe:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
     StrPosCopy(rcv_trans,strAmount,74,8); 
    b402:	ce 01       	movw	r24, r28
    b404:	67 e9       	ldi	r22, 0x97	; 151
    b406:	7c e0       	ldi	r23, 0x0C	; 12
    b408:	4a e4       	ldi	r20, 0x4A	; 74
    b40a:	50 e0       	ldi	r21, 0x00	; 0
    b40c:	28 e0       	ldi	r18, 0x08	; 8
    b40e:	30 e0       	ldi	r19, 0x00	; 0
    b410:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
	 StrPosCopy(rcv_trans,strStatus,82,1);
    b414:	ce 01       	movw	r24, r28
    b416:	6e e6       	ldi	r22, 0x6E	; 110
    b418:	74 e0       	ldi	r23, 0x04	; 4
    b41a:	42 e5       	ldi	r20, 0x52	; 82
    b41c:	50 e0       	ldi	r21, 0x00	; 0
    b41e:	21 e0       	ldi	r18, 0x01	; 1
    b420:	30 e0       	ldi	r19, 0x00	; 0
    b422:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
     StrPosCopy(rcv_trans,strSurcharge,83,9);    
    b426:	ce 01       	movw	r24, r28
    b428:	61 ee       	ldi	r22, 0xE1	; 225
    b42a:	73 e0       	ldi	r23, 0x03	; 3
    b42c:	43 e5       	ldi	r20, 0x53	; 83
    b42e:	50 e0       	ldi	r21, 0x00	; 0
    b430:	29 e0       	ldi	r18, 0x09	; 9
    b432:	30 e0       	ldi	r19, 0x00	; 0
    b434:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
}
    b438:	df 91       	pop	r29
    b43a:	cf 91       	pop	r28
    b43c:	08 95       	ret

0000b43e <IdentifyMessage>:
        //sprintf_P(strSerial,PSTR("RFID:%s"),strRFID);
        //uart_print(0,1,strSerial);
	 }
}

void IdentifyMessage(char STX,unsigned int Length){
    b43e:	1f 93       	push	r17
   if (STX==0x01){
    b440:	81 30       	cpi	r24, 0x01	; 1
    b442:	09 f0       	breq	.+2      	; 0xb446 <IdentifyMessage+0x8>
    b444:	5f c0       	rjmp	.+190    	; 0xb504 <IdentifyMessage+0xc6>
	    if ((Length==MSG00_LENGTH)||(MsgCode==0)) IsMessage00=True;//47
    b446:	6f 32       	cpi	r22, 0x2F	; 47
    b448:	71 05       	cpc	r23, r1
    b44a:	21 f0       	breq	.+8      	; 0xb454 <IdentifyMessage+0x16>
    b44c:	80 91 24 01 	lds	r24, 0x0124
    b450:	88 23       	and	r24, r24
    b452:	21 f4       	brne	.+8      	; 0xb45c <IdentifyMessage+0x1e>
    b454:	81 e0       	ldi	r24, 0x01	; 1
    b456:	80 93 7d 02 	sts	0x027D, r24
    b45a:	4a c0       	rjmp	.+148    	; 0xb4f0 <IdentifyMessage+0xb2>
		else
	    if ((Length==MSG09_LENGTH)||(MsgCode==9)) IsMessage09=True;//615
    b45c:	6c 36       	cpi	r22, 0x6C	; 108
    b45e:	71 05       	cpc	r23, r1
    b460:	11 f0       	breq	.+4      	; 0xb466 <IdentifyMessage+0x28>
    b462:	89 30       	cpi	r24, 0x09	; 9
    b464:	21 f4       	brne	.+8      	; 0xb46e <IdentifyMessage+0x30>
    b466:	81 e0       	ldi	r24, 0x01	; 1
    b468:	80 93 82 02 	sts	0x0282, r24
    b46c:	41 c0       	rjmp	.+130    	; 0xb4f0 <IdentifyMessage+0xb2>
		else
	    if ((Length==MSG11_LENGTH)||(MsgCode==11)) IsMessage11=True;//615
    b46e:	92 e0       	ldi	r25, 0x02	; 2
    b470:	67 36       	cpi	r22, 0x67	; 103
    b472:	79 07       	cpc	r23, r25
    b474:	11 f0       	breq	.+4      	; 0xb47a <IdentifyMessage+0x3c>
    b476:	8b 30       	cpi	r24, 0x0B	; 11
    b478:	21 f4       	brne	.+8      	; 0xb482 <IdentifyMessage+0x44>
    b47a:	81 e0       	ldi	r24, 0x01	; 1
    b47c:	80 93 7f 02 	sts	0x027F, r24
    b480:	37 c0       	rjmp	.+110    	; 0xb4f0 <IdentifyMessage+0xb2>
		else
	    if ((Length==MSG23_LENGTH)||(MsgCode==23)) IsMessage23=True;//145
    b482:	61 39       	cpi	r22, 0x91	; 145
    b484:	71 05       	cpc	r23, r1
    b486:	11 f0       	breq	.+4      	; 0xb48c <IdentifyMessage+0x4e>
    b488:	87 31       	cpi	r24, 0x17	; 23
    b48a:	21 f4       	brne	.+8      	; 0xb494 <IdentifyMessage+0x56>
    b48c:	81 e0       	ldi	r24, 0x01	; 1
    b48e:	80 93 81 02 	sts	0x0281, r24
    b492:	2e c0       	rjmp	.+92     	; 0xb4f0 <IdentifyMessage+0xb2>
		else
	    if ((Length==MSG57_LENGTH)||(MsgCode==57)) IsMessage57=True;//230
    b494:	66 3e       	cpi	r22, 0xE6	; 230
    b496:	71 05       	cpc	r23, r1
    b498:	11 f0       	breq	.+4      	; 0xb49e <IdentifyMessage+0x60>
    b49a:	89 33       	cpi	r24, 0x39	; 57
    b49c:	21 f4       	brne	.+8      	; 0xb4a6 <IdentifyMessage+0x68>
    b49e:	81 e0       	ldi	r24, 0x01	; 1
    b4a0:	80 93 84 02 	sts	0x0284, r24
    b4a4:	25 c0       	rjmp	.+74     	; 0xb4f0 <IdentifyMessage+0xb2>
		else
	    if ((Length==MSG99_LENGTH)||(MsgCode==99)) IsMessage99=True;//378
    b4a6:	91 e0       	ldi	r25, 0x01	; 1
    b4a8:	68 39       	cpi	r22, 0x98	; 152
    b4aa:	79 07       	cpc	r23, r25
    b4ac:	11 f0       	breq	.+4      	; 0xb4b2 <IdentifyMessage+0x74>
    b4ae:	83 36       	cpi	r24, 0x63	; 99
    b4b0:	21 f4       	brne	.+8      	; 0xb4ba <IdentifyMessage+0x7c>
    b4b2:	81 e0       	ldi	r24, 0x01	; 1
    b4b4:	80 93 7e 02 	sts	0x027E, r24
    b4b8:	1b c0       	rjmp	.+54     	; 0xb4f0 <IdentifyMessage+0xb2>
		else
	    if ((Length==MSG81_LENGTH)||(MsgCode==81)) IsMessage81=True;//426
    b4ba:	91 e0       	ldi	r25, 0x01	; 1
    b4bc:	66 3b       	cpi	r22, 0xB6	; 182
    b4be:	79 07       	cpc	r23, r25
    b4c0:	11 f0       	breq	.+4      	; 0xb4c6 <IdentifyMessage+0x88>
    b4c2:	81 35       	cpi	r24, 0x51	; 81
    b4c4:	21 f4       	brne	.+8      	; 0xb4ce <IdentifyMessage+0x90>
    b4c6:	81 e0       	ldi	r24, 0x01	; 1
    b4c8:	80 93 85 02 	sts	0x0285, r24
    b4cc:	11 c0       	rjmp	.+34     	; 0xb4f0 <IdentifyMessage+0xb2>
		else
	    if ((Length==MSG91_LENGTH)||(MsgCode==91)) IsMessage91=True;//426
    b4ce:	6c 35       	cpi	r22, 0x5C	; 92
    b4d0:	71 05       	cpc	r23, r1
    b4d2:	11 f0       	breq	.+4      	; 0xb4d8 <IdentifyMessage+0x9a>
    b4d4:	8b 35       	cpi	r24, 0x5B	; 91
    b4d6:	21 f4       	brne	.+8      	; 0xb4e0 <IdentifyMessage+0xa2>
    b4d8:	81 e0       	ldi	r24, 0x01	; 1
    b4da:	80 93 86 02 	sts	0x0286, r24
    b4de:	08 c0       	rjmp	.+16     	; 0xb4f0 <IdentifyMessage+0xb2>
		else
	    if ((Length==MSG21_LENGTH)||(MsgCode==21)) IsMessage21=True;//426
    b4e0:	66 35       	cpi	r22, 0x56	; 86
    b4e2:	71 05       	cpc	r23, r1
    b4e4:	11 f0       	breq	.+4      	; 0xb4ea <IdentifyMessage+0xac>
    b4e6:	85 31       	cpi	r24, 0x15	; 21
    b4e8:	19 f4       	brne	.+6      	; 0xb4f0 <IdentifyMessage+0xb2>
    b4ea:	81 e0       	ldi	r24, 0x01	; 1
    b4ec:	80 93 80 02 	sts	0x0280, r24
        //EDC AdvanZ Respond
		if (IsMessage91==True){
    b4f0:	10 91 86 02 	lds	r17, 0x0286
    b4f4:	11 30       	cpi	r17, 0x01	; 1
    b4f6:	31 f4       	brne	.+12     	; 0xb504 <IdentifyMessage+0xc6>
		    IsMessage91=False;
    b4f8:	10 92 86 02 	sts	0x0286, r1
		    ProcMessage91();
    b4fc:	0e 94 d0 59 	call	0xb3a0	; 0xb3a0 <ProcMessage91>
			IsSendMessageEDC=True;
    b500:	10 93 75 02 	sts	0x0275, r17
		  }

//	  sprintf(SerialSend,"Length:%i",Length);	 
//	  uart_print(1,0,SerialSend);
	 }
}
    b504:	1f 91       	pop	r17
    b506:	08 95       	ret

0000b508 <procMessage99>:
     StrPosCopy(rcv_trans,strAmount,74,8); 
	 StrPosCopy(rcv_trans,strStatus,82,1);
     StrPosCopy(rcv_trans,strSurcharge,83,9);    
}

char procMessage99(){//<STX>[IFT IDSeq N Srce IPDest IPMsg CodeTran NoShiftDateTimeIsland IDFIP IDProduct IDDescriptionPriceVolumeAmountMOP TypeMOP NameCard IDCard HolderBalance Type Balance MeterVolume MeterAmount Current TimePrint Count Checksum ETX
    b508:	1f 93       	push	r17
    b50a:	cf 93       	push	r28
    b50c:	df 93       	push	r29
     char Result;
	 Result=MSG99_NONE;
	 //Message99
	 if((rcv_trans[0]==0x01)&&(transLength>=378)){
    b50e:	10 91 01 0a 	lds	r17, 0x0A01
    b512:	11 30       	cpi	r17, 0x01	; 1
    b514:	09 f0       	breq	.+2      	; 0xb518 <procMessage99+0x10>
    b516:	6e c1       	rjmp	.+732    	; 0xb7f4 <procMessage99+0x2ec>
    b518:	80 91 69 02 	lds	r24, 0x0269
    b51c:	90 91 6a 02 	lds	r25, 0x026A
    b520:	21 e0       	ldi	r18, 0x01	; 1
    b522:	8a 37       	cpi	r24, 0x7A	; 122
    b524:	92 07       	cpc	r25, r18
    b526:	08 f4       	brcc	.+2      	; 0xb52a <procMessage99+0x22>
    b528:	65 c1       	rjmp	.+714    	; 0xb7f4 <procMessage99+0x2ec>
       StrPosCopy(rcv_trans,strTranNo,37,6);//Transaction Number
    b52a:	81 e0       	ldi	r24, 0x01	; 1
    b52c:	9a e0       	ldi	r25, 0x0A	; 10
    b52e:	6c e8       	ldi	r22, 0x8C	; 140
    b530:	7d e0       	ldi	r23, 0x0D	; 13
    b532:	45 e2       	ldi	r20, 0x25	; 37
    b534:	50 e0       	ldi	r21, 0x00	; 0
    b536:	26 e0       	ldi	r18, 0x06	; 6
    b538:	30 e0       	ldi	r19, 0x00	; 0
    b53a:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
       StrPosCopy(rcv_trans,strShift,43,1);
    b53e:	81 e0       	ldi	r24, 0x01	; 1
    b540:	9a e0       	ldi	r25, 0x0A	; 10
    b542:	6d e6       	ldi	r22, 0x6D	; 109
    b544:	7d e0       	ldi	r23, 0x0D	; 13
    b546:	4b e2       	ldi	r20, 0x2B	; 43
    b548:	50 e0       	ldi	r21, 0x00	; 0
    b54a:	21 e0       	ldi	r18, 0x01	; 1
    b54c:	30 e0       	ldi	r19, 0x00	; 0
    b54e:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
       Shift=(CharPosCopy(rcv_trans,43)-'0');
    b552:	80 91 2c 0a 	lds	r24, 0x0A2C
    b556:	80 53       	subi	r24, 0x30	; 48
    b558:	80 93 98 02 	sts	0x0298, r24
       StrPosCopy(rcv_trans,strDate,44,10);
    b55c:	81 e0       	ldi	r24, 0x01	; 1
    b55e:	9a e0       	ldi	r25, 0x0A	; 10
    b560:	62 e5       	ldi	r22, 0x52	; 82
    b562:	78 e0       	ldi	r23, 0x08	; 8
    b564:	4c e2       	ldi	r20, 0x2C	; 44
    b566:	50 e0       	ldi	r21, 0x00	; 0
    b568:	2a e0       	ldi	r18, 0x0A	; 10
    b56a:	30 e0       	ldi	r19, 0x00	; 0
    b56c:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
       StrPosCopy(rcv_trans,strTime,54,8);
    b570:	81 e0       	ldi	r24, 0x01	; 1
    b572:	9a e0       	ldi	r25, 0x0A	; 10
    b574:	62 e3       	ldi	r22, 0x32	; 50
    b576:	74 e0       	ldi	r23, 0x04	; 4
    b578:	46 e3       	ldi	r20, 0x36	; 54
    b57a:	50 e0       	ldi	r21, 0x00	; 0
    b57c:	28 e0       	ldi	r18, 0x08	; 8
    b57e:	30 e0       	ldi	r19, 0x00	; 0
    b580:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
       StrPosCopy(rcv_trans,strIslandID,62,2);
    b584:	81 e0       	ldi	r24, 0x01	; 1
    b586:	9a e0       	ldi	r25, 0x0A	; 10
    b588:	6b ed       	ldi	r22, 0xDB	; 219
    b58a:	79 e0       	ldi	r23, 0x09	; 9
    b58c:	4e e3       	ldi	r20, 0x3E	; 62
    b58e:	50 e0       	ldi	r21, 0x00	; 0
    b590:	22 e0       	ldi	r18, 0x02	; 2
    b592:	30 e0       	ldi	r19, 0x00	; 0
    b594:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
       StrPosCopy(rcv_trans,strFIP_ID,64,2);
    b598:	81 e0       	ldi	r24, 0x01	; 1
    b59a:	9a e0       	ldi	r25, 0x0A	; 10
    b59c:	6d e9       	ldi	r22, 0x9D	; 157
    b59e:	78 e0       	ldi	r23, 0x08	; 8
    b5a0:	40 e4       	ldi	r20, 0x40	; 64
    b5a2:	50 e0       	ldi	r21, 0x00	; 0
    b5a4:	22 e0       	ldi	r18, 0x02	; 2
    b5a6:	30 e0       	ldi	r19, 0x00	; 0
    b5a8:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
       StrPosCopy(rcv_trans,strProductID,66,2);
    b5ac:	81 e0       	ldi	r24, 0x01	; 1
    b5ae:	9a e0       	ldi	r25, 0x0A	; 10
    b5b0:	65 e5       	ldi	r22, 0x55	; 85
    b5b2:	79 e0       	ldi	r23, 0x09	; 9
    b5b4:	42 e4       	ldi	r20, 0x42	; 66
    b5b6:	50 e0       	ldi	r21, 0x00	; 0
    b5b8:	22 e0       	ldi	r18, 0x02	; 2
    b5ba:	30 e0       	ldi	r19, 0x00	; 0
    b5bc:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
       StrPosCopy(rcv_trans,strDescription,68,15);
    b5c0:	81 e0       	ldi	r24, 0x01	; 1
    b5c2:	9a e0       	ldi	r25, 0x0A	; 10
    b5c4:	66 e0       	ldi	r22, 0x06	; 6
    b5c6:	79 e0       	ldi	r23, 0x09	; 9
    b5c8:	44 e4       	ldi	r20, 0x44	; 68
    b5ca:	50 e0       	ldi	r21, 0x00	; 0
    b5cc:	2f e0       	ldi	r18, 0x0F	; 15
    b5ce:	30 e0       	ldi	r19, 0x00	; 0
    b5d0:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
       
	   //FillChar(strPrice,sizeof(strPrice),0);
       StrPosCopy(rcv_trans,strPrice,83,8);
    b5d4:	81 e0       	ldi	r24, 0x01	; 1
    b5d6:	9a e0       	ldi	r25, 0x0A	; 10
    b5d8:	62 e8       	ldi	r22, 0x82	; 130
    b5da:	76 e0       	ldi	r23, 0x06	; 6
    b5dc:	43 e5       	ldi	r20, 0x53	; 83
    b5de:	50 e0       	ldi	r21, 0x00	; 0
    b5e0:	28 e0       	ldi	r18, 0x08	; 8
    b5e2:	30 e0       	ldi	r19, 0x00	; 0
    b5e4:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>

	   //FillChar(strVolume,sizeof(strVolume),0);
       StrPosCopy(rcv_trans,strVolume,91,8);
    b5e8:	81 e0       	ldi	r24, 0x01	; 1
    b5ea:	9a e0       	ldi	r25, 0x0A	; 10
    b5ec:	6a e5       	ldi	r22, 0x5A	; 90
    b5ee:	74 e0       	ldi	r23, 0x04	; 4
    b5f0:	4b e5       	ldi	r20, 0x5B	; 91
    b5f2:	50 e0       	ldi	r21, 0x00	; 0
    b5f4:	28 e0       	ldi	r18, 0x08	; 8
    b5f6:	30 e0       	ldi	r19, 0x00	; 0
    b5f8:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>

	   //FillChar(strAmount,sizeof(strAmount),0);
       StrPosCopy(rcv_trans,strAmount,99,10);
    b5fc:	81 e0       	ldi	r24, 0x01	; 1
    b5fe:	9a e0       	ldi	r25, 0x0A	; 10
    b600:	67 e9       	ldi	r22, 0x97	; 151
    b602:	7c e0       	ldi	r23, 0x0C	; 12
    b604:	43 e6       	ldi	r20, 0x63	; 99
    b606:	50 e0       	ldi	r21, 0x00	; 0
    b608:	2a e0       	ldi	r18, 0x0A	; 10
    b60a:	30 e0       	ldi	r19, 0x00	; 0
    b60c:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>

       //StrPosCopy(rcv_trans,strMOPType,109,1);
       MOPType=(CharPosCopy(rcv_trans,109)-'0');
    b610:	80 91 6e 0a 	lds	r24, 0x0A6E
    b614:	80 53       	subi	r24, 0x30	; 48
    b616:	80 93 97 02 	sts	0x0297, r24
       StrPosCopy(rcv_trans,strMOPName,110,20);
    b61a:	81 e0       	ldi	r24, 0x01	; 1
    b61c:	9a e0       	ldi	r25, 0x0A	; 10
    b61e:	61 e6       	ldi	r22, 0x61	; 97
    b620:	76 e0       	ldi	r23, 0x06	; 6
    b622:	4e e6       	ldi	r20, 0x6E	; 110
    b624:	50 e0       	ldi	r21, 0x00	; 0
    b626:	24 e1       	ldi	r18, 0x14	; 20
    b628:	30 e0       	ldi	r19, 0x00	; 0
    b62a:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
       StrPosCopy(rcv_trans,strCardID,130,20);
    b62e:	81 e0       	ldi	r24, 0x01	; 1
    b630:	9a e0       	ldi	r25, 0x0A	; 10
    b632:	6d e6       	ldi	r22, 0x6D	; 109
    b634:	7c e0       	ldi	r23, 0x0C	; 12
    b636:	42 e8       	ldi	r20, 0x82	; 130
    b638:	50 e0       	ldi	r21, 0x00	; 0
    b63a:	24 e1       	ldi	r18, 0x14	; 20
    b63c:	30 e0       	ldi	r19, 0x00	; 0
    b63e:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
       StrPosCopy(rcv_trans,strCardHolder,150,40);
    b642:	81 e0       	ldi	r24, 0x01	; 1
    b644:	9a e0       	ldi	r25, 0x0A	; 10
    b646:	69 e0       	ldi	r22, 0x09	; 9
    b648:	74 e0       	ldi	r23, 0x04	; 4
    b64a:	46 e9       	ldi	r20, 0x96	; 150
    b64c:	50 e0       	ldi	r21, 0x00	; 0
    b64e:	28 e2       	ldi	r18, 0x28	; 40
    b650:	30 e0       	ldi	r19, 0x00	; 0
    b652:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
       StrPosCopy(rcv_trans,strBalanceTypePrint,190,25);
    b656:	81 e0       	ldi	r24, 0x01	; 1
    b658:	9a e0       	ldi	r25, 0x0A	; 10
    b65a:	60 e4       	ldi	r22, 0x40	; 64
    b65c:	74 e0       	ldi	r23, 0x04	; 4
    b65e:	4e eb       	ldi	r20, 0xBE	; 190
    b660:	50 e0       	ldi	r21, 0x00	; 0
    b662:	29 e1       	ldi	r18, 0x19	; 25
    b664:	30 e0       	ldi	r19, 0x00	; 0
    b666:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
       StrPosCopy(rcv_trans,strBalance,215,13);
    b66a:	81 e0       	ldi	r24, 0x01	; 1
    b66c:	9a e0       	ldi	r25, 0x0A	; 10
    b66e:	61 ef       	ldi	r22, 0xF1	; 241
    b670:	7c e0       	ldi	r23, 0x0C	; 12
    b672:	47 ed       	ldi	r20, 0xD7	; 215
    b674:	50 e0       	ldi	r21, 0x00	; 0
    b676:	2d e0       	ldi	r18, 0x0D	; 13
    b678:	30 e0       	ldi	r19, 0x00	; 0
    b67a:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
       StrPosCopy(rcv_trans,strMeterVolume,228,13);
    b67e:	81 e0       	ldi	r24, 0x01	; 1
    b680:	9a e0       	ldi	r25, 0x0A	; 10
    b682:	60 e7       	ldi	r22, 0x70	; 112
    b684:	74 e0       	ldi	r23, 0x04	; 4
    b686:	44 ee       	ldi	r20, 0xE4	; 228
    b688:	50 e0       	ldi	r21, 0x00	; 0
    b68a:	2d e0       	ldi	r18, 0x0D	; 13
    b68c:	30 e0       	ldi	r19, 0x00	; 0
    b68e:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
       StrPosCopy(rcv_trans,strMeterAmount,241,13);
    b692:	81 e0       	ldi	r24, 0x01	; 1
    b694:	9a e0       	ldi	r25, 0x0A	; 10
    b696:	6d ec       	ldi	r22, 0xCD	; 205
    b698:	79 e0       	ldi	r23, 0x09	; 9
    b69a:	41 ef       	ldi	r20, 0xF1	; 241
    b69c:	50 e0       	ldi	r21, 0x00	; 0
    b69e:	2d e0       	ldi	r18, 0x0D	; 13
    b6a0:	30 e0       	ldi	r19, 0x00	; 0
    b6a2:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
       StrPosCopy(rcv_trans,strCurrentTime,254,19);
    b6a6:	81 e0       	ldi	r24, 0x01	; 1
    b6a8:	9a e0       	ldi	r25, 0x0A	; 10
    b6aa:	60 ea       	ldi	r22, 0xA0	; 160
    b6ac:	78 e0       	ldi	r23, 0x08	; 8
    b6ae:	4e ef       	ldi	r20, 0xFE	; 254
    b6b0:	50 e0       	ldi	r21, 0x00	; 0
    b6b2:	23 e1       	ldi	r18, 0x13	; 19
    b6b4:	30 e0       	ldi	r19, 0x00	; 0
    b6b6:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
       StrPosCopy(rcv_trans,strPrintCount,273,2);
    b6ba:	81 e0       	ldi	r24, 0x01	; 1
    b6bc:	9a e0       	ldi	r25, 0x0A	; 10
    b6be:	69 e8       	ldi	r22, 0x89	; 137
    b6c0:	7d e0       	ldi	r23, 0x0D	; 13
    b6c2:	41 e1       	ldi	r20, 0x11	; 17
    b6c4:	51 e0       	ldi	r21, 0x01	; 1
    b6c6:	22 e0       	ldi	r18, 0x02	; 2
    b6c8:	30 e0       	ldi	r19, 0x00	; 0
    b6ca:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
       //Loyalty
	   StrPosCopy(rcv_trans,strPrevPoints,275,8);
    b6ce:	81 e0       	ldi	r24, 0x01	; 1
    b6d0:	9a e0       	ldi	r25, 0x0A	; 10
    b6d2:	68 ef       	ldi	r22, 0xF8	; 248
    b6d4:	79 e0       	ldi	r23, 0x09	; 9
    b6d6:	43 e1       	ldi	r20, 0x13	; 19
    b6d8:	51 e0       	ldi	r21, 0x01	; 1
    b6da:	28 e0       	ldi	r18, 0x08	; 8
    b6dc:	30 e0       	ldi	r19, 0x00	; 0
    b6de:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
       StrPosCopy(rcv_trans,strGainPoints,283,8);
    b6e2:	81 e0       	ldi	r24, 0x01	; 1
    b6e4:	9a e0       	ldi	r25, 0x0A	; 10
    b6e6:	60 ea       	ldi	r22, 0xA0	; 160
    b6e8:	73 e0       	ldi	r23, 0x03	; 3
    b6ea:	4b e1       	ldi	r20, 0x1B	; 27
    b6ec:	51 e0       	ldi	r21, 0x01	; 1
    b6ee:	28 e0       	ldi	r18, 0x08	; 8
    b6f0:	30 e0       	ldi	r19, 0x00	; 0
    b6f2:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
       StrPosCopy(rcv_trans,strLoyCardID,291,20);
    b6f6:	81 e0       	ldi	r24, 0x01	; 1
    b6f8:	9a e0       	ldi	r25, 0x0A	; 10
    b6fa:	6c ec       	ldi	r22, 0xCC	; 204
    b6fc:	73 e0       	ldi	r23, 0x03	; 3
    b6fe:	43 e2       	ldi	r20, 0x23	; 35
    b700:	51 e0       	ldi	r21, 0x01	; 1
    b702:	24 e1       	ldi	r18, 0x14	; 20
    b704:	30 e0       	ldi	r19, 0x00	; 0
    b706:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
       StrPosCopy(rcv_trans,strLoyCardHolder,311,30);
    b70a:	81 e0       	ldi	r24, 0x01	; 1
    b70c:	9a e0       	ldi	r25, 0x0A	; 10
    b70e:	69 ea       	ldi	r22, 0xA9	; 169
    b710:	73 e0       	ldi	r23, 0x03	; 3
    b712:	47 e3       	ldi	r20, 0x37	; 55
    b714:	51 e0       	ldi	r21, 0x01	; 1
    b716:	2e e1       	ldi	r18, 0x1E	; 30
    b718:	30 e0       	ldi	r19, 0x00	; 0
    b71a:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
       StrPosCopy(rcv_trans,strLoyCurrentPoints,341,8);
    b71e:	81 e0       	ldi	r24, 0x01	; 1
    b720:	9a e0       	ldi	r25, 0x0A	; 10
    b722:	69 e1       	ldi	r22, 0x19	; 25
    b724:	79 e0       	ldi	r23, 0x09	; 9
    b726:	45 e5       	ldi	r20, 0x55	; 85
    b728:	51 e0       	ldi	r21, 0x01	; 1
    b72a:	28 e0       	ldi	r18, 0x08	; 8
    b72c:	30 e0       	ldi	r19, 0x00	; 0
    b72e:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
       StrPosCopy(rcv_trans,strLoyCurrMonConsumeA,349,10);
    b732:	81 e0       	ldi	r24, 0x01	; 1
    b734:	9a e0       	ldi	r25, 0x0A	; 10
    b736:	63 e6       	ldi	r22, 0x63	; 99
    b738:	74 e0       	ldi	r23, 0x04	; 4
    b73a:	4d e5       	ldi	r20, 0x5D	; 93
    b73c:	51 e0       	ldi	r21, 0x01	; 1
    b73e:	2a e0       	ldi	r18, 0x0A	; 10
    b740:	30 e0       	ldi	r19, 0x00	; 0
    b742:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
       StrPosCopy(rcv_trans,strLoyCurrMonConsumeV,359,10);
    b746:	81 e0       	ldi	r24, 0x01	; 1
    b748:	9a e0       	ldi	r25, 0x0A	; 10
    b74a:	66 ee       	ldi	r22, 0xE6	; 230
    b74c:	7c e0       	ldi	r23, 0x0C	; 12
    b74e:	47 e6       	ldi	r20, 0x67	; 103
    b750:	51 e0       	ldi	r21, 0x01	; 1
    b752:	2a e0       	ldi	r18, 0x0A	; 10
    b754:	30 e0       	ldi	r19, 0x00	; 0
    b756:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
       StrPosCopy(rcv_trans,strSurchargeDesc,369,20);
    b75a:	81 e0       	ldi	r24, 0x01	; 1
    b75c:	9a e0       	ldi	r25, 0x0A	; 10
    b75e:	6f eb       	ldi	r22, 0xBF	; 191
    b760:	78 e0       	ldi	r23, 0x08	; 8
    b762:	41 e7       	ldi	r20, 0x71	; 113
    b764:	51 e0       	ldi	r21, 0x01	; 1
    b766:	24 e1       	ldi	r18, 0x14	; 20
    b768:	30 e0       	ldi	r19, 0x00	; 0
    b76a:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
       StrPosCopy(rcv_trans,strSurchargeAmount,389,10);
    b76e:	81 e0       	ldi	r24, 0x01	; 1
    b770:	9a e0       	ldi	r25, 0x0A	; 10
    b772:	66 e3       	ldi	r22, 0x36	; 54
    b774:	79 e0       	ldi	r23, 0x09	; 9
    b776:	45 e8       	ldi	r20, 0x85	; 133
    b778:	51 e0       	ldi	r21, 0x01	; 1
    b77a:	2a e0       	ldi	r18, 0x0A	; 10
    b77c:	30 e0       	ldi	r19, 0x00	; 0
    b77e:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
       StrPosCopy(rcv_trans,strLoyRedeemPoints,399,8);
    b782:	81 e0       	ldi	r24, 0x01	; 1
    b784:	9a e0       	ldi	r25, 0x0A	; 10
    b786:	6e e7       	ldi	r22, 0x7E	; 126
    b788:	74 e0       	ldi	r23, 0x04	; 4
    b78a:	4f e8       	ldi	r20, 0x8F	; 143
    b78c:	51 e0       	ldi	r21, 0x01	; 1
    b78e:	28 e0       	ldi	r18, 0x08	; 8
    b790:	30 e0       	ldi	r19, 0x00	; 0
    b792:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
       StrPosCopy(rcv_trans,strLoyExpiry,407,10);
    b796:	81 e0       	ldi	r24, 0x01	; 1
    b798:	9a e0       	ldi	r25, 0x0A	; 10
    b79a:	6e e7       	ldi	r22, 0x7E	; 126
    b79c:	7d e0       	ldi	r23, 0x0D	; 13
    b79e:	47 e9       	ldi	r20, 0x97	; 151
    b7a0:	51 e0       	ldi	r21, 0x01	; 1
    b7a2:	2a e0       	ldi	r18, 0x0A	; 10
    b7a4:	30 e0       	ldi	r19, 0x00	; 0
    b7a6:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
       StrPosCopy(rcv_trans,strCorporateID,417,20);
    b7aa:	81 e0       	ldi	r24, 0x01	; 1
    b7ac:	9a e0       	ldi	r25, 0x0A	; 10
    b7ae:	63 e0       	ldi	r22, 0x03	; 3
    b7b0:	7d e0       	ldi	r23, 0x0D	; 13
    b7b2:	41 ea       	ldi	r20, 0xA1	; 161
    b7b4:	51 e0       	ldi	r21, 0x01	; 1
    b7b6:	24 e1       	ldi	r18, 0x14	; 20
    b7b8:	30 e0       	ldi	r19, 0x00	; 0
    b7ba:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
       StrPosCopy(rcv_trans,strCorporateName,437,30);
    b7be:	81 e0       	ldi	r24, 0x01	; 1
    b7c0:	9a e0       	ldi	r25, 0x0A	; 10
    b7c2:	61 eb       	ldi	r22, 0xB1	; 177
    b7c4:	74 e0       	ldi	r23, 0x04	; 4
    b7c6:	45 eb       	ldi	r20, 0xB5	; 181
    b7c8:	51 e0       	ldi	r21, 0x01	; 1
    b7ca:	2e e1       	ldi	r18, 0x1E	; 30
    b7cc:	30 e0       	ldi	r19, 0x00	; 0
    b7ce:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
	   //


	   //FIP Detection LocalAccount Null Filling
	   if ((nLocalAccount>0)&&(LocalAccountFIP[0]==atoi(strFIP_ID))){
    b7d2:	80 91 6d 02 	lds	r24, 0x026D
    b7d6:	88 23       	and	r24, r24
    b7d8:	69 f0       	breq	.+26     	; 0xb7f4 <procMessage99+0x2ec>
    b7da:	80 91 3b 04 	lds	r24, 0x043B
    b7de:	c8 2f       	mov	r28, r24
    b7e0:	d0 e0       	ldi	r29, 0x00	; 0
    b7e2:	8d e9       	ldi	r24, 0x9D	; 157
    b7e4:	98 e0       	ldi	r25, 0x08	; 8
    b7e6:	0e 94 e0 a7 	call	0x14fc0	; 0x14fc0 <atoi>
    b7ea:	c8 17       	cp	r28, r24
    b7ec:	d9 07       	cpc	r29, r25
    b7ee:	11 f4       	brne	.+4      	; 0xb7f4 <procMessage99+0x2ec>
	        IsCompleteFilling=True;
    b7f0:	10 93 88 02 	sts	0x0288, r17
	   }

	  }
     return Result;     
}
    b7f4:	80 e0       	ldi	r24, 0x00	; 0
    b7f6:	df 91       	pop	r29
    b7f8:	cf 91       	pop	r28
    b7fa:	1f 91       	pop	r17
    b7fc:	08 95       	ret

0000b7fe <Tab>:

void Tab(char *sTab, char nTab){
     char i;
	 for(i=0;i<nTab;i++){
    b7fe:	fc 01       	movw	r30, r24
    b800:	20 e0       	ldi	r18, 0x00	; 0
	     sTab[i]=' ';
    b802:	30 e2       	ldi	r19, 0x20	; 32
     return Result;     
}

void Tab(char *sTab, char nTab){
     char i;
	 for(i=0;i<nTab;i++){
    b804:	02 c0       	rjmp	.+4      	; 0xb80a <Tab+0xc>
	     sTab[i]=' ';
    b806:	31 93       	st	Z+, r19
     return Result;     
}

void Tab(char *sTab, char nTab){
     char i;
	 for(i=0;i<nTab;i++){
    b808:	2f 5f       	subi	r18, 0xFF	; 255
    b80a:	26 17       	cp	r18, r22
    b80c:	e0 f3       	brcs	.-8      	; 0xb806 <Tab+0x8>
	     sTab[i]=' ';
	 }sTab[nTab]=0;
    b80e:	86 0f       	add	r24, r22
    b810:	91 1d       	adc	r25, r1
    b812:	fc 01       	movw	r30, r24
    b814:	10 82       	st	Z, r1
}
    b816:	08 95       	ret

0000b818 <PrintDoubleHeight>:

//void SetPrinterCharacterWidth

void PrintDoubleHeight(){
char PrinterType;
     PrinterType=eeprom_read_byte(&DefPrinterType);
    b818:	80 e3       	ldi	r24, 0x30	; 48
    b81a:	90 e0       	ldi	r25, 0x00	; 0
    b81c:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
	 if (PrinterType==PT_CUSTOM_CUBE){
    b820:	82 30       	cpi	r24, 0x02	; 2
    b822:	79 f4       	brne	.+30     	; 0xb842 <PrintDoubleHeight+0x2a>
	     uart(_COM_PRINTER, 1, 0x1D);uart(_COM_PRINTER, 1, 0x21);uart(_COM_PRINTER, 1, 0x01);
    b824:	80 e0       	ldi	r24, 0x00	; 0
    b826:	61 e0       	ldi	r22, 0x01	; 1
    b828:	4d e1       	ldi	r20, 0x1D	; 29
    b82a:	0e 94 e6 a5 	call	0x14bcc	; 0x14bcc <uart>
    b82e:	80 e0       	ldi	r24, 0x00	; 0
    b830:	61 e0       	ldi	r22, 0x01	; 1
    b832:	41 e2       	ldi	r20, 0x21	; 33
    b834:	0e 94 e6 a5 	call	0x14bcc	; 0x14bcc <uart>
    b838:	80 e0       	ldi	r24, 0x00	; 0
    b83a:	61 e0       	ldi	r22, 0x01	; 1
    b83c:	41 e0       	ldi	r20, 0x01	; 1
    b83e:	0e 94 e6 a5 	call	0x14bcc	; 0x14bcc <uart>
    b842:	08 95       	ret

0000b844 <PrintNormalHeight>:
		 }
}

void PrintNormalHeight(){
char PrinterType;
     PrinterType=eeprom_read_byte(&DefPrinterType);
    b844:	80 e3       	ldi	r24, 0x30	; 48
    b846:	90 e0       	ldi	r25, 0x00	; 0
    b848:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
	 if (PrinterType==PT_CUSTOM_CUBE){
    b84c:	82 30       	cpi	r24, 0x02	; 2
    b84e:	79 f4       	brne	.+30     	; 0xb86e <PrintNormalHeight+0x2a>
	     uart(_COM_PRINTER, 1, 0x1D);uart(_COM_PRINTER, 1, 0x21);uart(_COM_PRINTER, 1, 0x00);
    b850:	80 e0       	ldi	r24, 0x00	; 0
    b852:	61 e0       	ldi	r22, 0x01	; 1
    b854:	4d e1       	ldi	r20, 0x1D	; 29
    b856:	0e 94 e6 a5 	call	0x14bcc	; 0x14bcc <uart>
    b85a:	80 e0       	ldi	r24, 0x00	; 0
    b85c:	61 e0       	ldi	r22, 0x01	; 1
    b85e:	41 e2       	ldi	r20, 0x21	; 33
    b860:	0e 94 e6 a5 	call	0x14bcc	; 0x14bcc <uart>
    b864:	80 e0       	ldi	r24, 0x00	; 0
    b866:	61 e0       	ldi	r22, 0x01	; 1
    b868:	40 e0       	ldi	r20, 0x00	; 0
    b86a:	0e 94 e6 a5 	call	0x14bcc	; 0x14bcc <uart>
    b86e:	08 95       	ret

0000b870 <InitPrinter>:
		 }
}

void InitPrinter(){
char PrinterType;
     PrinterType=eeprom_read_byte(&DefPrinterType);
    b870:	80 e3       	ldi	r24, 0x30	; 48
    b872:	90 e0       	ldi	r25, 0x00	; 0
    b874:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
    //Custom Printer TG02
	//Density Lowest: 1D 7C 00
	if (PrinterType==PT_CUSTOM_TG02){
    b878:	81 30       	cpi	r24, 0x01	; 1
    b87a:	71 f5       	brne	.+92     	; 0xb8d8 <InitPrinter+0x68>
		uart(_COM_PRINTER, 1, 0x1D);uart(_COM_PRINTER, 1, 0x7C);uart(_COM_PRINTER, 1, 0x00);
    b87c:	80 e0       	ldi	r24, 0x00	; 0
    b87e:	61 e0       	ldi	r22, 0x01	; 1
    b880:	4d e1       	ldi	r20, 0x1D	; 29
    b882:	0e 94 e6 a5 	call	0x14bcc	; 0x14bcc <uart>
    b886:	80 e0       	ldi	r24, 0x00	; 0
    b888:	61 e0       	ldi	r22, 0x01	; 1
    b88a:	4c e7       	ldi	r20, 0x7C	; 124
    b88c:	0e 94 e6 a5 	call	0x14bcc	; 0x14bcc <uart>
    b890:	80 e0       	ldi	r24, 0x00	; 0
    b892:	61 e0       	ldi	r22, 0x01	; 1
    b894:	40 e0       	ldi	r20, 0x00	; 0
    b896:	0e 94 e6 a5 	call	0x14bcc	; 0x14bcc <uart>
		//Double Strike ON : 1B 47 01
		uart(_COM_PRINTER, 1, 0x1B);uart(_COM_PRINTER, 1, 0x47);uart(_COM_PRINTER, 1, 0x01);
    b89a:	80 e0       	ldi	r24, 0x00	; 0
    b89c:	61 e0       	ldi	r22, 0x01	; 1
    b89e:	4b e1       	ldi	r20, 0x1B	; 27
    b8a0:	0e 94 e6 a5 	call	0x14bcc	; 0x14bcc <uart>
    b8a4:	80 e0       	ldi	r24, 0x00	; 0
    b8a6:	61 e0       	ldi	r22, 0x01	; 1
    b8a8:	47 e4       	ldi	r20, 0x47	; 71
    b8aa:	0e 94 e6 a5 	call	0x14bcc	; 0x14bcc <uart>
    b8ae:	80 e0       	ldi	r24, 0x00	; 0
    b8b0:	61 e0       	ldi	r22, 0x01	; 1
    b8b2:	41 e0       	ldi	r20, 0x01	; 1
    b8b4:	0e 94 e6 a5 	call	0x14bcc	; 0x14bcc <uart>
		//Font Setting: 1D 21 01
		uart(_COM_PRINTER, 1, 0x1D);uart(_COM_PRINTER, 1, 0x21);uart(_COM_PRINTER, 1, 0x01);   
    b8b8:	80 e0       	ldi	r24, 0x00	; 0
    b8ba:	61 e0       	ldi	r22, 0x01	; 1
    b8bc:	4d e1       	ldi	r20, 0x1D	; 29
    b8be:	0e 94 e6 a5 	call	0x14bcc	; 0x14bcc <uart>
    b8c2:	80 e0       	ldi	r24, 0x00	; 0
    b8c4:	61 e0       	ldi	r22, 0x01	; 1
    b8c6:	41 e2       	ldi	r20, 0x21	; 33
    b8c8:	0e 94 e6 a5 	call	0x14bcc	; 0x14bcc <uart>
    b8cc:	80 e0       	ldi	r24, 0x00	; 0
    b8ce:	61 e0       	ldi	r22, 0x01	; 1
    b8d0:	41 e0       	ldi	r20, 0x01	; 1
    b8d2:	0e 94 e6 a5 	call	0x14bcc	; 0x14bcc <uart>
    b8d6:	08 95       	ret
		}
    else
	if (PrinterType==PT_CUSTOM_CUBE){
    b8d8:	82 30       	cpi	r24, 0x02	; 2
    b8da:	69 f5       	brne	.+90     	; 0xb936 <InitPrinter+0xc6>
        //Print Density 0%
		uart(_COM_PRINTER, 1, 0x1D);uart(_COM_PRINTER, 1, 0x7C);uart(_COM_PRINTER, 1, 0x04);
    b8dc:	80 e0       	ldi	r24, 0x00	; 0
    b8de:	61 e0       	ldi	r22, 0x01	; 1
    b8e0:	4d e1       	ldi	r20, 0x1D	; 29
    b8e2:	0e 94 e6 a5 	call	0x14bcc	; 0x14bcc <uart>
    b8e6:	80 e0       	ldi	r24, 0x00	; 0
    b8e8:	61 e0       	ldi	r22, 0x01	; 1
    b8ea:	4c e7       	ldi	r20, 0x7C	; 124
    b8ec:	0e 94 e6 a5 	call	0x14bcc	; 0x14bcc <uart>
    b8f0:	80 e0       	ldi	r24, 0x00	; 0
    b8f2:	61 e0       	ldi	r22, 0x01	; 1
    b8f4:	44 e0       	ldi	r20, 0x04	; 4
    b8f6:	0e 94 e6 a5 	call	0x14bcc	; 0x14bcc <uart>
		//Double Strike OFF : 1B 47 00
		uart(_COM_PRINTER, 1, 0x1B);uart(_COM_PRINTER, 1, 0x47);uart(_COM_PRINTER, 1, 0x00);
    b8fa:	80 e0       	ldi	r24, 0x00	; 0
    b8fc:	61 e0       	ldi	r22, 0x01	; 1
    b8fe:	4b e1       	ldi	r20, 0x1B	; 27
    b900:	0e 94 e6 a5 	call	0x14bcc	; 0x14bcc <uart>
    b904:	80 e0       	ldi	r24, 0x00	; 0
    b906:	61 e0       	ldi	r22, 0x01	; 1
    b908:	47 e4       	ldi	r20, 0x47	; 71
    b90a:	0e 94 e6 a5 	call	0x14bcc	; 0x14bcc <uart>
    b90e:	80 e0       	ldi	r24, 0x00	; 0
    b910:	61 e0       	ldi	r22, 0x01	; 1
    b912:	40 e0       	ldi	r20, 0x00	; 0
    b914:	0e 94 e6 a5 	call	0x14bcc	; 0x14bcc <uart>
		//Font Setting: 1D 21 01
		uart(_COM_PRINTER, 1, 0x1D);uart(_COM_PRINTER, 1, 0x21);uart(_COM_PRINTER, 1, 0x00);   
    b918:	80 e0       	ldi	r24, 0x00	; 0
    b91a:	61 e0       	ldi	r22, 0x01	; 1
    b91c:	4d e1       	ldi	r20, 0x1D	; 29
    b91e:	0e 94 e6 a5 	call	0x14bcc	; 0x14bcc <uart>
    b922:	80 e0       	ldi	r24, 0x00	; 0
    b924:	61 e0       	ldi	r22, 0x01	; 1
    b926:	41 e2       	ldi	r20, 0x21	; 33
    b928:	0e 94 e6 a5 	call	0x14bcc	; 0x14bcc <uart>
    b92c:	80 e0       	ldi	r24, 0x00	; 0
    b92e:	61 e0       	ldi	r22, 0x01	; 1
    b930:	40 e0       	ldi	r20, 0x00	; 0
    b932:	0e 94 e6 a5 	call	0x14bcc	; 0x14bcc <uart>
    b936:	08 95       	ret

0000b938 <CarriegeReturn>:
	      break;	 
	 }
}

void CarriegeReturn(){
     uart(_COM_PRINTER, 1, 0x0D);     
    b938:	80 e0       	ldi	r24, 0x00	; 0
    b93a:	61 e0       	ldi	r22, 0x01	; 1
    b93c:	4d e0       	ldi	r20, 0x0D	; 13
    b93e:	0e 94 e6 a5 	call	0x14bcc	; 0x14bcc <uart>
     uart(_COM_PRINTER, 1, 0x0A);
    b942:	80 e0       	ldi	r24, 0x00	; 0
    b944:	61 e0       	ldi	r22, 0x01	; 1
    b946:	4a e0       	ldi	r20, 0x0A	; 10
    b948:	0e 94 e6 a5 	call	0x14bcc	; 0x14bcc <uart>
}
    b94c:	08 95       	ret

0000b94e <PstrCopy>:

void PstrCopy(char *Dest,char *Source){
     char i=0;
	 for(i=0;i<strlen(Source);i++){
    b94e:	40 e0       	ldi	r20, 0x00	; 0
    b950:	09 c0       	rjmp	.+18     	; 0xb964 <PstrCopy+0x16>
	    Dest[i]=pgm_read_byte(&Source[i]);
    b952:	fb 01       	movw	r30, r22
    b954:	e2 0f       	add	r30, r18
    b956:	f3 1f       	adc	r31, r19
    b958:	e4 91       	lpm	r30, Z+
    b95a:	28 0f       	add	r18, r24
    b95c:	39 1f       	adc	r19, r25
    b95e:	d9 01       	movw	r26, r18
    b960:	ec 93       	st	X, r30
     uart(_COM_PRINTER, 1, 0x0A);
}

void PstrCopy(char *Dest,char *Source){
     char i=0;
	 for(i=0;i<strlen(Source);i++){
    b962:	4f 5f       	subi	r20, 0xFF	; 255
    b964:	24 2f       	mov	r18, r20
    b966:	30 e0       	ldi	r19, 0x00	; 0
    b968:	fb 01       	movw	r30, r22
    b96a:	01 90       	ld	r0, Z+
    b96c:	00 20       	and	r0, r0
    b96e:	e9 f7       	brne	.-6      	; 0xb96a <PstrCopy+0x1c>
    b970:	31 97       	sbiw	r30, 0x01	; 1
    b972:	e6 1b       	sub	r30, r22
    b974:	f7 0b       	sbc	r31, r23
    b976:	2e 17       	cp	r18, r30
    b978:	3f 07       	cpc	r19, r31
    b97a:	58 f3       	brcs	.-42     	; 0xb952 <PstrCopy+0x4>
	    Dest[i]=pgm_read_byte(&Source[i]);
	 }
}
    b97c:	08 95       	ret

0000b97e <SendPrint>:

void SendPrint(char xSend,char xSendLead){
    b97e:	1f 93       	push	r17
    b980:	18 2f       	mov	r17, r24
static char zSend;     
	 if (xSend==0x19){
    b982:	89 31       	cpi	r24, 0x19	; 25
    b984:	59 f4       	brne	.+22     	; 0xb99c <SendPrint+0x1e>
	     if (zSend==xSendLead)uart(_COM_PRINTER,1,xSendLead);
    b986:	40 91 d5 02 	lds	r20, 0x02D5
    b98a:	46 17       	cp	r20, r22
    b98c:	19 f4       	brne	.+6      	; 0xb994 <SendPrint+0x16>
    b98e:	80 e0       	ldi	r24, 0x00	; 0
    b990:	61 e0       	ldi	r22, 0x01	; 1
    b992:	07 c0       	rjmp	.+14     	; 0xb9a2 <SendPrint+0x24>
		 else uart(_COM_PRINTER,1,' ');	 
    b994:	80 e0       	ldi	r24, 0x00	; 0
    b996:	61 e0       	ldi	r22, 0x01	; 1
    b998:	40 e2       	ldi	r20, 0x20	; 32
    b99a:	03 c0       	rjmp	.+6      	; 0xb9a2 <SendPrint+0x24>
	 } 
	 else uart(_COM_PRINTER,1,xSend);
    b99c:	80 e0       	ldi	r24, 0x00	; 0
    b99e:	61 e0       	ldi	r22, 0x01	; 1
    b9a0:	41 2f       	mov	r20, r17
    b9a2:	0e 94 e6 a5 	call	0x14bcc	; 0x14bcc <uart>
	 zSend=xSend;
    b9a6:	10 93 d5 02 	sts	0x02D5, r17
}
    b9aa:	1f 91       	pop	r17
    b9ac:	08 95       	ret

0000b9ae <FreePrinting>:

void FreePrinting(){
    b9ae:	ef 92       	push	r14
    b9b0:	ff 92       	push	r15
    b9b2:	0f 93       	push	r16
    b9b4:	1f 93       	push	r17
    b9b6:	df 93       	push	r29
    b9b8:	cf 93       	push	r28
    b9ba:	cd b7       	in	r28, 0x3d	; 61
    b9bc:	de b7       	in	r29, 0x3e	; 62
    b9be:	64 97       	sbiw	r28, 0x14	; 20
    b9c0:	0f b6       	in	r0, 0x3f	; 63
    b9c2:	f8 94       	cli
    b9c4:	de bf       	out	0x3e, r29	; 62
    b9c6:	0f be       	out	0x3f, r0	; 63
    b9c8:	cd bf       	out	0x3d, r28	; 61
static char iPrinted=0,iHeader=0,iFooter=0,PrintCopy=0,iMargin=0,iScroll=0,nScroll=0;
static unsigned int iSend=0,LSend=0,iLoop=0;
       char strOperatorName[20];

     //Normalize FreePrintIdleState
     if ((IsFreePrinting==True)&&(stFreePrinting!=fpInit)){
    b9ca:	80 91 87 02 	lds	r24, 0x0287
    b9ce:	81 30       	cpi	r24, 0x01	; 1
    b9d0:	31 f4       	brne	.+12     	; 0xb9de <FreePrinting+0x30>
    b9d2:	90 91 25 01 	lds	r25, 0x0125
    b9d6:	91 30       	cpi	r25, 0x01	; 1
    b9d8:	11 f0       	breq	.+4      	; 0xb9de <FreePrinting+0x30>
	     stFreePrinting=fpInit;
    b9da:	80 93 25 01 	sts	0x0125, r24
	 }
	 switch (stFreePrinting){
    b9de:	80 91 25 01 	lds	r24, 0x0125
    b9e2:	90 e0       	ldi	r25, 0x00	; 0
    b9e4:	01 97       	sbiw	r24, 0x01	; 1
    b9e6:	8b 31       	cpi	r24, 0x1B	; 27
    b9e8:	91 05       	cpc	r25, r1
    b9ea:	08 f0       	brcs	.+2      	; 0xb9ee <FreePrinting+0x40>
    b9ec:	88 c3       	rjmp	.+1808   	; 0xc0fe <FreePrinting+0x750>
    b9ee:	89 58       	subi	r24, 0x89	; 137
    b9f0:	9f 4f       	sbci	r25, 0xFF	; 255
    b9f2:	fc 01       	movw	r30, r24
    b9f4:	ee 0f       	add	r30, r30
    b9f6:	ff 1f       	adc	r31, r31
    b9f8:	05 90       	lpm	r0, Z+
    b9fa:	f4 91       	lpm	r31, Z+
    b9fc:	e0 2d       	mov	r30, r0
    b9fe:	09 94       	ijmp
     case fpInit:
	      //uart_printf(0,1,PSTR("fpInit"));
	      if (IsFreePrinting==True){
    ba00:	80 91 87 02 	lds	r24, 0x0287
    ba04:	81 30       	cpi	r24, 0x01	; 1
    ba06:	09 f0       	breq	.+2      	; 0xba0a <FreePrinting+0x5c>
    ba08:	7a c3       	rjmp	.+1780   	; 0xc0fe <FreePrinting+0x750>
		      IsFreePrinting=False;
    ba0a:	10 92 87 02 	sts	0x0287, r1
			  IsBusyFreePrinting=True;
    ba0e:	80 93 93 02 	sts	0x0293, r24
			  IsBusyPrint=False;
    ba12:	10 92 92 02 	sts	0x0292, r1
			  iPrinted=0,iFooter=0;
    ba16:	10 92 d4 02 	sts	0x02D4, r1
    ba1a:	10 92 d2 02 	sts	0x02D2, r1

			  PrintCopy=(cmdPrint&0x0F);
    ba1e:	80 91 94 02 	lds	r24, 0x0294
    ba22:	8f 70       	andi	r24, 0x0F	; 15
    ba24:	80 93 d1 02 	sts	0x02D1, r24

			  //cmdPrint=cmdPrint|0b00100000;
			  //PrintCopy=2;

			  stFreePrinting=fpInitHeader;
    ba28:	82 e0       	ldi	r24, 0x02	; 2
    ba2a:	80 93 25 01 	sts	0x0125, r24
			  InitPrinter();
    ba2e:	0e 94 38 5c 	call	0xb870	; 0xb870 <InitPrinter>
    ba32:	65 c3       	rjmp	.+1738   	; 0xc0fe <FreePrinting+0x750>
			  }
	      break;
     case fpInitHeader:
	      //uart_printf(0,1,PSTR("fpInitHeader"));
		  iHeader=0;
    ba34:	10 92 d3 02 	sts	0x02D3, r1
	      if (((cmdPrint&0b10000000)>>7)==1){
    ba38:	80 91 94 02 	lds	r24, 0x0294
    ba3c:	88 1f       	adc	r24, r24
    ba3e:	88 27       	eor	r24, r24
    ba40:	88 1f       	adc	r24, r24
    ba42:	90 e0       	ldi	r25, 0x00	; 0
    ba44:	81 30       	cpi	r24, 0x01	; 1
    ba46:	91 05       	cpc	r25, r1
    ba48:	11 f1       	breq	.+68     	; 0xba8e <FreePrinting+0xe0>
		      stFreePrinting=fpLoadHeader;
			  }
		  else
	      if (((cmdPrint&0b10000000)>>7)==0) stFreePrinting=fpInitMessage;	      
    ba4a:	00 97       	sbiw	r24, 0x00	; 0
    ba4c:	09 f0       	breq	.+2      	; 0xba50 <FreePrinting+0xa2>
    ba4e:	57 c3       	rjmp	.+1710   	; 0xc0fe <FreePrinting+0x750>
    ba50:	85 e0       	ldi	r24, 0x05	; 5
    ba52:	80 93 25 01 	sts	0x0125, r24
    ba56:	53 c3       	rjmp	.+1702   	; 0xc0fe <FreePrinting+0x750>
	      break;
     case fpLoadHeader:
	      //uart_printf(0,1,PSTR("fpLoadHeader"));
          //Header 1
	      eeprom_read_block((void*) &strPrint, (const void*) &DefHeaderFooter[iHeader], 40);
    ba58:	60 91 d3 02 	lds	r22, 0x02D3
    ba5c:	89 e2       	ldi	r24, 0x29	; 41
    ba5e:	68 9f       	mul	r22, r24
    ba60:	b0 01       	movw	r22, r0
    ba62:	11 24       	eor	r1, r1
    ba64:	68 5d       	subi	r22, 0xD8	; 216
    ba66:	7d 4f       	sbci	r23, 0xFD	; 253
    ba68:	80 ea       	ldi	r24, 0xA0	; 160
    ba6a:	99 e0       	ldi	r25, 0x09	; 9
    ba6c:	48 e2       	ldi	r20, 0x28	; 40
    ba6e:	50 e0       	ldi	r21, 0x00	; 0
    ba70:	0e 94 56 aa 	call	0x154ac	; 0x154ac <__eerd_block_m128>
		  iHeader++;
    ba74:	00 91 d3 02 	lds	r16, 0x02D3
    ba78:	0f 5f       	subi	r16, 0xFF	; 255
    ba7a:	00 93 d3 02 	sts	0x02D3, r16
		  if (iHeader<6){
    ba7e:	06 30       	cpi	r16, 0x06	; 6
    ba80:	38 f7       	brcc	.-50     	; 0xba50 <FreePrinting+0xa2>
		      if (SpaceOnly(strPrint)==True){
    ba82:	80 ea       	ldi	r24, 0xA0	; 160
    ba84:	99 e0       	ldi	r25, 0x09	; 9
    ba86:	0e 94 8e 4a 	call	0x951c	; 0x951c <SpaceOnly>
    ba8a:	81 30       	cpi	r24, 0x01	; 1
    ba8c:	11 f4       	brne	.+4      	; 0xba92 <FreePrinting+0xe4>
			      stFreePrinting=fpLoadHeader;
    ba8e:	83 e0       	ldi	r24, 0x03	; 3
    ba90:	e0 cf       	rjmp	.-64     	; 0xba52 <FreePrinting+0xa4>
				  }	      
			  else{
			      stFreePrinting=fpPrintHeader;
    ba92:	84 e0       	ldi	r24, 0x04	; 4
    ba94:	80 93 25 01 	sts	0x0125, r24
			      iSend=0;
    ba98:	10 92 cd 02 	sts	0x02CD, r1
    ba9c:	10 92 cc 02 	sts	0x02CC, r1
				  iLoop=0;
    baa0:	10 92 c9 02 	sts	0x02C9, r1
    baa4:	10 92 c8 02 	sts	0x02C8, r1
				  //PrintDoubleHeight on 1st Header
				  if (iHeader==1) PrintDoubleHeight();
    baa8:	01 30       	cpi	r16, 0x01	; 1
    baaa:	19 f4       	brne	.+6      	; 0xbab2 <FreePrinting+0x104>
    baac:	0e 94 0c 5c 	call	0xb818	; 0xb818 <PrintDoubleHeight>
    bab0:	26 c3       	rjmp	.+1612   	; 0xc0fe <FreePrinting+0x750>
				  else 
				  if (iHeader==2) PrintNormalHeight();
    bab2:	02 30       	cpi	r16, 0x02	; 2
    bab4:	09 f0       	breq	.+2      	; 0xbab8 <FreePrinting+0x10a>
    bab6:	23 c3       	rjmp	.+1606   	; 0xc0fe <FreePrinting+0x750>
    bab8:	0e 94 22 5c 	call	0xb844	; 0xb844 <PrintNormalHeight>
    babc:	20 c3       	rjmp	.+1600   	; 0xc0fe <FreePrinting+0x750>
		  {stFreePrinting=fpInitMessage;
		  }
	      break;
     case fpPrintHeader:
	      //uart_printf(0,1,PSTR("fpPrintHeader"));
		  if (iSend<40){
    babe:	80 91 cc 02 	lds	r24, 0x02CC
    bac2:	90 91 cd 02 	lds	r25, 0x02CD
    bac6:	88 32       	cpi	r24, 0x28	; 40
    bac8:	91 05       	cpc	r25, r1
    baca:	68 f4       	brcc	.+26     	; 0xbae6 <FreePrinting+0x138>
		      iLoop++;
    bacc:	80 91 c8 02 	lds	r24, 0x02C8
    bad0:	90 91 c9 02 	lds	r25, 0x02C9
    bad4:	01 96       	adiw	r24, 0x01	; 1
    bad6:	90 93 c9 02 	sts	0x02C9, r25
    bada:	80 93 c8 02 	sts	0x02C8, r24
			  if ((iLoop%PRINT_DELAY)==0){
			     //uart(_COM_PRINTER,1,strPrint[iSend]);
		         //iSend++;
				 TimPrintBusy=0;
    bade:	10 92 95 02 	sts	0x0295, r1
				 stFreePrinting=fpCheckPrintStatusHeader;
    bae2:	82 e1       	ldi	r24, 0x12	; 18
    bae4:	b6 cf       	rjmp	.-148    	; 0xba52 <FreePrinting+0xa4>
				 }
			  }
          else{ 
		     stFreePrinting=fpLoadHeader;
    bae6:	83 e0       	ldi	r24, 0x03	; 3
    bae8:	5d c2       	rjmp	.+1210   	; 0xbfa4 <FreePrinting+0x5f6>
			 CarriegeReturn();
		  }
	      break;

     case fpCheckPrintStatusHeader:
	      if (IsBusyPrint==False){
    baea:	80 91 92 02 	lds	r24, 0x0292
    baee:	88 23       	and	r24, r24
    baf0:	09 f0       	breq	.+2      	; 0xbaf4 <FreePrinting+0x146>
    baf2:	77 c2       	rjmp	.+1262   	; 0xbfe2 <FreePrinting+0x634>
		      uart(_COM_PRINTER,1,strPrint[iSend]);
    baf4:	e0 91 cc 02 	lds	r30, 0x02CC
    baf8:	f0 91 cd 02 	lds	r31, 0x02CD
    bafc:	e0 56       	subi	r30, 0x60	; 96
    bafe:	f6 4f       	sbci	r31, 0xF6	; 246
    bb00:	61 e0       	ldi	r22, 0x01	; 1
    bb02:	40 81       	ld	r20, Z
    bb04:	0e 94 e6 a5 	call	0x14bcc	; 0x14bcc <uart>
		      iSend++;
    bb08:	80 91 cc 02 	lds	r24, 0x02CC
    bb0c:	90 91 cd 02 	lds	r25, 0x02CD
    bb10:	01 96       	adiw	r24, 0x01	; 1
    bb12:	90 93 cd 02 	sts	0x02CD, r25
    bb16:	80 93 cc 02 	sts	0x02CC, r24
		      stFreePrinting=fpPrintHeader;
    bb1a:	84 e0       	ldi	r24, 0x04	; 4
    bb1c:	60 c2       	rjmp	.+1216   	; 0xbfde <FreePrinting+0x630>
		      stFreePrinting=fpFinishFreePrinting;
			  }
	      break;
     case fpInitMessage:
	      //uart_printf(0,1,PSTR("fpInitMessage"));
	      iSend=0;iLoop=0;
    bb1e:	10 92 cd 02 	sts	0x02CD, r1
    bb22:	10 92 cc 02 	sts	0x02CC, r1
    bb26:	10 92 c9 02 	sts	0x02C9, r1
    bb2a:	10 92 c8 02 	sts	0x02C8, r1
          stFreePrinting=fpPrintMessage; 
    bb2e:	08 e0       	ldi	r16, 0x08	; 8
    bb30:	00 93 25 01 	sts	0x0125, r16
		  CarriegeReturn();
    bb34:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
		  if (iPrinted>0) stFreePrinting=fpInitDuplicate;
    bb38:	80 91 d4 02 	lds	r24, 0x02D4
    bb3c:	88 23       	and	r24, r24
    bb3e:	11 f0       	breq	.+4      	; 0xbb44 <FreePrinting+0x196>
    bb40:	86 e0       	ldi	r24, 0x06	; 6
    bb42:	87 cf       	rjmp	.-242    	; 0xba52 <FreePrinting+0xa4>
		  else stFreePrinting=fpPrintMessage; 
    bb44:	00 93 25 01 	sts	0x0125, r16
    bb48:	da c2       	rjmp	.+1460   	; 0xc0fe <FreePrinting+0x750>
	      break;
     case fpInitDuplicate:
	      //uart_printf(0,1,PSTR("fpInitDuplicate"));
          if (iPrinted>0)sprintf_P(strPrint,PSTR("             DUPLICATE COPY        "));
    bb4a:	20 91 d4 02 	lds	r18, 0x02D4
    bb4e:	80 ea       	ldi	r24, 0xA0	; 160
    bb50:	99 e0       	ldi	r25, 0x09	; 9
    bb52:	22 23       	and	r18, r18
    bb54:	79 f0       	breq	.+30     	; 0xbb74 <FreePrinting+0x1c6>
    bb56:	00 d0       	rcall	.+0      	; 0xbb58 <FreePrinting+0x1aa>
    bb58:	00 d0       	rcall	.+0      	; 0xbb5a <FreePrinting+0x1ac>
    bb5a:	ad b7       	in	r26, 0x3d	; 61
    bb5c:	be b7       	in	r27, 0x3e	; 62
    bb5e:	12 96       	adiw	r26, 0x02	; 2
    bb60:	9c 93       	st	X, r25
    bb62:	8e 93       	st	-X, r24
    bb64:	11 97       	sbiw	r26, 0x01	; 1
    bb66:	81 e4       	ldi	r24, 0x41	; 65
    bb68:	97 e0       	ldi	r25, 0x07	; 7
    bb6a:	14 96       	adiw	r26, 0x04	; 4
    bb6c:	9c 93       	st	X, r25
    bb6e:	8e 93       	st	-X, r24
    bb70:	13 97       	sbiw	r26, 0x03	; 3
    bb72:	0a c0       	rjmp	.+20     	; 0xbb88 <FreePrinting+0x1da>
          else           sprintf_P(strPrint,PSTR("                                   "));
    bb74:	00 d0       	rcall	.+0      	; 0xbb76 <FreePrinting+0x1c8>
    bb76:	00 d0       	rcall	.+0      	; 0xbb78 <FreePrinting+0x1ca>
    bb78:	ed b7       	in	r30, 0x3d	; 61
    bb7a:	fe b7       	in	r31, 0x3e	; 62
    bb7c:	92 83       	std	Z+2, r25	; 0x02
    bb7e:	81 83       	std	Z+1, r24	; 0x01
    bb80:	8d e1       	ldi	r24, 0x1D	; 29
    bb82:	97 e0       	ldi	r25, 0x07	; 7
    bb84:	94 83       	std	Z+4, r25	; 0x04
    bb86:	83 83       	std	Z+3, r24	; 0x03
    bb88:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    bb8c:	0f 90       	pop	r0
    bb8e:	0f 90       	pop	r0
    bb90:	0f 90       	pop	r0
    bb92:	0f 90       	pop	r0
		  iSend=0;
    bb94:	10 92 cd 02 	sts	0x02CD, r1
    bb98:	10 92 cc 02 	sts	0x02CC, r1
		  iLoop=0;
    bb9c:	10 92 c9 02 	sts	0x02C9, r1
    bba0:	10 92 c8 02 	sts	0x02C8, r1
		  LSend=strlen(strPrint);
    bba4:	e0 ea       	ldi	r30, 0xA0	; 160
    bba6:	f9 e0       	ldi	r31, 0x09	; 9
    bba8:	01 90       	ld	r0, Z+
    bbaa:	00 20       	and	r0, r0
    bbac:	e9 f7       	brne	.-6      	; 0xbba8 <FreePrinting+0x1fa>
    bbae:	31 97       	sbiw	r30, 0x01	; 1
    bbb0:	e0 5a       	subi	r30, 0xA0	; 160
    bbb2:	f9 40       	sbci	r31, 0x09	; 9
    bbb4:	f0 93 cb 02 	sts	0x02CB, r31
    bbb8:	e0 93 ca 02 	sts	0x02CA, r30
          stFreePrinting=fpPrintDuplicate; 
    bbbc:	87 e0       	ldi	r24, 0x07	; 7
    bbbe:	49 cf       	rjmp	.-366    	; 0xba52 <FreePrinting+0xa4>
	      break;
     case fpPrintDuplicate:
	      //uart_printf(0,1,PSTR("fpPrintDuplicate"));
		  if (iSend<LSend){
    bbc0:	20 91 cc 02 	lds	r18, 0x02CC
    bbc4:	30 91 cd 02 	lds	r19, 0x02CD
    bbc8:	80 91 ca 02 	lds	r24, 0x02CA
    bbcc:	90 91 cb 02 	lds	r25, 0x02CB
    bbd0:	28 17       	cp	r18, r24
    bbd2:	39 07       	cpc	r19, r25
    bbd4:	68 f4       	brcc	.+26     	; 0xbbf0 <FreePrinting+0x242>
		      iLoop++;
    bbd6:	80 91 c8 02 	lds	r24, 0x02C8
    bbda:	90 91 c9 02 	lds	r25, 0x02C9
    bbde:	01 96       	adiw	r24, 0x01	; 1
    bbe0:	90 93 c9 02 	sts	0x02C9, r25
    bbe4:	80 93 c8 02 	sts	0x02C8, r24
			  if((iLoop%PRINT_DELAY)==0){
			     //uart(_COM_PRINTER,1,strPrint[iSend]);
				 //iSend++;
				 TimPrintBusy=0;
    bbe8:	10 92 95 02 	sts	0x0295, r1
                 stFreePrinting=fpCheckPrintStatusDuplicate;
    bbec:	85 e1       	ldi	r24, 0x15	; 21
    bbee:	31 cf       	rjmp	.-414    	; 0xba52 <FreePrinting+0xa4>
				 }
			  }
          else {
		     iSend=0;
    bbf0:	10 92 cd 02 	sts	0x02CD, r1
    bbf4:	10 92 cc 02 	sts	0x02CC, r1
		     stFreePrinting=fpPrintMessage;
    bbf8:	88 e0       	ldi	r24, 0x08	; 8
    bbfa:	d4 c1       	rjmp	.+936    	; 0xbfa4 <FreePrinting+0x5f6>
			 CarriegeReturn();	      
			 }
	      break;
     case fpCheckPrintStatusDuplicate:
	      if (IsBusyPrint==False){
    bbfc:	80 91 92 02 	lds	r24, 0x0292
    bc00:	88 23       	and	r24, r24
    bc02:	09 f0       	breq	.+2      	; 0xbc06 <FreePrinting+0x258>
    bc04:	ee c1       	rjmp	.+988    	; 0xbfe2 <FreePrinting+0x634>
		      uart(_COM_PRINTER,1,strPrint[iSend]);
    bc06:	e0 91 cc 02 	lds	r30, 0x02CC
    bc0a:	f0 91 cd 02 	lds	r31, 0x02CD
    bc0e:	e0 56       	subi	r30, 0x60	; 96
    bc10:	f6 4f       	sbci	r31, 0xF6	; 246
    bc12:	61 e0       	ldi	r22, 0x01	; 1
    bc14:	40 81       	ld	r20, Z
    bc16:	0e 94 e6 a5 	call	0x14bcc	; 0x14bcc <uart>
		      iSend++;
    bc1a:	80 91 cc 02 	lds	r24, 0x02CC
    bc1e:	90 91 cd 02 	lds	r25, 0x02CD
    bc22:	01 96       	adiw	r24, 0x01	; 1
    bc24:	90 93 cd 02 	sts	0x02CD, r25
    bc28:	80 93 cc 02 	sts	0x02CC, r24
		      stFreePrinting=fpPrintDuplicate;
    bc2c:	87 e0       	ldi	r24, 0x07	; 7
    bc2e:	d7 c1       	rjmp	.+942    	; 0xbfde <FreePrinting+0x630>
		      stFreePrinting=fpFinishFreePrinting;
			  }
	      break;

     case fpPrintMessage:
		  if (iSend<LengthMessage81){
    bc30:	20 91 cc 02 	lds	r18, 0x02CC
    bc34:	30 91 cd 02 	lds	r19, 0x02CD
    bc38:	80 91 6b 02 	lds	r24, 0x026B
    bc3c:	90 91 6c 02 	lds	r25, 0x026C
    bc40:	28 17       	cp	r18, r24
    bc42:	39 07       	cpc	r19, r25
    bc44:	68 f4       	brcc	.+26     	; 0xbc60 <FreePrinting+0x2b2>
		      iLoop++;
    bc46:	80 91 c8 02 	lds	r24, 0x02C8
    bc4a:	90 91 c9 02 	lds	r25, 0x02C9
    bc4e:	01 96       	adiw	r24, 0x01	; 1
    bc50:	90 93 c9 02 	sts	0x02C9, r25
    bc54:	80 93 c8 02 	sts	0x02C8, r24
			  if((iLoop%PRINT_DELAY)==0){
			     TimPrintBusy=0;
    bc58:	10 92 95 02 	sts	0x0295, r1
				 stFreePrinting=fpCheckPrintStatusMessage;
    bc5c:	83 e1       	ldi	r24, 0x13	; 19
    bc5e:	f9 ce       	rjmp	.-526    	; 0xba52 <FreePrinting+0xa4>
				 }
			  }
          else stFreePrinting=fpLoadEndLine;//fpInitFooter;
    bc60:	86 e1       	ldi	r24, 0x16	; 22
    bc62:	f7 ce       	rjmp	.-530    	; 0xba52 <FreePrinting+0xa4>
	      break;
     
     case fpCheckPrintStatusMessage:
	      if (IsBusyPrint==False){
    bc64:	80 91 92 02 	lds	r24, 0x0292
    bc68:	88 23       	and	r24, r24
    bc6a:	09 f0       	breq	.+2      	; 0xbc6e <FreePrinting+0x2c0>
    bc6c:	ba c1       	rjmp	.+884    	; 0xbfe2 <FreePrinting+0x634>
              if ((PrintBuffer[iSend]!=0x0D)||(PrintBuffer[iSend]!=0x0A))
			      SendPrint(PrintBuffer[iSend],PrintBuffer[iSend+1]);
    bc6e:	e0 91 cc 02 	lds	r30, 0x02CC
    bc72:	f0 91 cd 02 	lds	r31, 0x02CD
    bc76:	e0 53       	subi	r30, 0x30	; 48
    bc78:	fb 4f       	sbci	r31, 0xFB	; 251
    bc7a:	80 81       	ld	r24, Z
    bc7c:	61 81       	ldd	r22, Z+1	; 0x01
    bc7e:	0e 94 bf 5c 	call	0xb97e	; 0xb97e <SendPrint>
			     // uart(_COM_PRINTER,1,PrintBuffer[iSend]);
              if ((PrintBuffer[iSend]==0x0D)||(PrintBuffer[iSend+1]==0x0A))
    bc82:	e0 91 cc 02 	lds	r30, 0x02CC
    bc86:	f0 91 cd 02 	lds	r31, 0x02CD
    bc8a:	e0 53       	subi	r30, 0x30	; 48
    bc8c:	fb 4f       	sbci	r31, 0xFB	; 251
    bc8e:	80 81       	ld	r24, Z
    bc90:	8d 30       	cpi	r24, 0x0D	; 13
    bc92:	19 f0       	breq	.+6      	; 0xbc9a <FreePrinting+0x2ec>
    bc94:	81 81       	ldd	r24, Z+1	; 0x01
    bc96:	8a 30       	cpi	r24, 0x0A	; 10
    bc98:	11 f4       	brne	.+4      	; 0xbc9e <FreePrinting+0x2f0>
			     CarriegeReturn();
    bc9a:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
             iSend++;
    bc9e:	80 91 cc 02 	lds	r24, 0x02CC
    bca2:	90 91 cd 02 	lds	r25, 0x02CD
    bca6:	01 96       	adiw	r24, 0x01	; 1
    bca8:	90 93 cd 02 	sts	0x02CD, r25
    bcac:	80 93 cc 02 	sts	0x02CC, r24
		     stFreePrinting=fpPrintMessage;
    bcb0:	88 e0       	ldi	r24, 0x08	; 8
    bcb2:	95 c1       	rjmp	.+810    	; 0xbfde <FreePrinting+0x630>
		      stFreePrinting=fpFinishFreePrinting;
			  }
	      break;
     //SpaceAdded
	 case fpInitSpace:
	      iLoop=0;
    bcb4:	10 92 c9 02 	sts	0x02C9, r1
    bcb8:	10 92 c8 02 	sts	0x02C8, r1
		  iMargin=0;
    bcbc:	10 92 d0 02 	sts	0x02D0, r1
		  stFreePrinting=fpPrintMargin;
    bcc0:	8a e0       	ldi	r24, 0x0A	; 10
    bcc2:	c7 ce       	rjmp	.-626    	; 0xba52 <FreePrinting+0xa4>
	      break;
	 case fpPrintMargin:
		  if (iMargin<PRINT_MARGIN){
    bcc4:	80 91 d0 02 	lds	r24, 0x02D0
    bcc8:	85 30       	cpi	r24, 0x05	; 5
    bcca:	90 f4       	brcc	.+36     	; 0xbcf0 <FreePrinting+0x342>
		      iMargin++;
    bccc:	8f 5f       	subi	r24, 0xFF	; 255
    bcce:	80 93 d0 02 	sts	0x02D0, r24
		      iLoop++;
    bcd2:	80 91 c8 02 	lds	r24, 0x02C8
    bcd6:	90 91 c9 02 	lds	r25, 0x02C9
    bcda:	01 96       	adiw	r24, 0x01	; 1
    bcdc:	90 93 c9 02 	sts	0x02C9, r25
    bce0:	80 93 c8 02 	sts	0x02C8, r24
	          if ((iLoop%PRINT_DELAY)==0)uart(_COM_PRINTER,1,' ');
    bce4:	80 e0       	ldi	r24, 0x00	; 0
    bce6:	61 e0       	ldi	r22, 0x01	; 1
    bce8:	40 e2       	ldi	r20, 0x20	; 32
    bcea:	0e 94 e6 a5 	call	0x14bcc	; 0x14bcc <uart>
    bcee:	07 c2       	rjmp	.+1038   	; 0xc0fe <FreePrinting+0x750>
			 }
          else stFreePrinting=fpPrintMessage;
    bcf0:	88 e0       	ldi	r24, 0x08	; 8
    bcf2:	af ce       	rjmp	.-674    	; 0xba52 <FreePrinting+0xa4>
	      break;
     
     //Added Operator Name:
	 case fpLoadEndLine:
		  eeprom_read_block((void*) &strOperatorName, (const void*) &DefOperatorName,18);
    bcf4:	8e 01       	movw	r16, r28
    bcf6:	0f 5f       	subi	r16, 0xFF	; 255
    bcf8:	1f 4f       	sbci	r17, 0xFF	; 255
    bcfa:	c8 01       	movw	r24, r16
    bcfc:	65 e1       	ldi	r22, 0x15	; 21
    bcfe:	70 e0       	ldi	r23, 0x00	; 0
    bd00:	42 e1       	ldi	r20, 0x12	; 18
    bd02:	50 e0       	ldi	r21, 0x00	; 0
    bd04:	0e 94 56 aa 	call	0x154ac	; 0x154ac <__eerd_block_m128>
          StrPosCopy(strOperatorName,strOperatorName,0,15);
    bd08:	c8 01       	movw	r24, r16
    bd0a:	b8 01       	movw	r22, r16
    bd0c:	40 e0       	ldi	r20, 0x00	; 0
    bd0e:	50 e0       	ldi	r21, 0x00	; 0
    bd10:	2f e0       	ldi	r18, 0x0F	; 15
    bd12:	30 e0       	ldi	r19, 0x00	; 0
    bd14:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
          if (strlen(strOperatorName)>0){
    bd18:	89 81       	ldd	r24, Y+1	; 0x01
    bd1a:	88 23       	and	r24, r24
    bd1c:	09 f4       	brne	.+2      	; 0xbd20 <FreePrinting+0x372>
    bd1e:	ce c0       	rjmp	.+412    	; 0xbebc <FreePrinting+0x50e>
		  	  if (SpaceOnly(strOperatorName)!=True){
    bd20:	c8 01       	movw	r24, r16
    bd22:	0e 94 8e 4a 	call	0x951c	; 0x951c <SpaceOnly>
    bd26:	81 30       	cpi	r24, 0x01	; 1
    bd28:	09 f4       	brne	.+2      	; 0xbd2c <FreePrinting+0x37e>
    bd2a:	c8 c0       	rjmp	.+400    	; 0xbebc <FreePrinting+0x50e>
			      sprintf_P(strPrint,PSTR("---------------------------------"));
    bd2c:	00 d0       	rcall	.+0      	; 0xbd2e <FreePrinting+0x380>
    bd2e:	00 d0       	rcall	.+0      	; 0xbd30 <FreePrinting+0x382>
    bd30:	00 ea       	ldi	r16, 0xA0	; 160
    bd32:	19 e0       	ldi	r17, 0x09	; 9
    bd34:	ad b7       	in	r26, 0x3d	; 61
    bd36:	be b7       	in	r27, 0x3e	; 62
    bd38:	12 96       	adiw	r26, 0x02	; 2
    bd3a:	1c 93       	st	X, r17
    bd3c:	0e 93       	st	-X, r16
    bd3e:	11 97       	sbiw	r26, 0x01	; 1
    bd40:	8b ef       	ldi	r24, 0xFB	; 251
    bd42:	96 e0       	ldi	r25, 0x06	; 6
    bd44:	14 96       	adiw	r26, 0x04	; 4
    bd46:	9c 93       	st	X, r25
    bd48:	8e 93       	st	-X, r24
    bd4a:	13 97       	sbiw	r26, 0x03	; 3
    bd4c:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
			      //AddSpaceLead(strPrint,(strlen(strPrint)+PRINT_MARGIN));
			      iSend=0;
    bd50:	10 92 cd 02 	sts	0x02CD, r1
    bd54:	10 92 cc 02 	sts	0x02CC, r1
				  iLoop=0;
    bd58:	10 92 c9 02 	sts	0x02C9, r1
    bd5c:	10 92 c8 02 	sts	0x02C8, r1
				  LSend=strlen(strPrint);
    bd60:	f8 01       	movw	r30, r16
    bd62:	01 90       	ld	r0, Z+
    bd64:	00 20       	and	r0, r0
    bd66:	e9 f7       	brne	.-6      	; 0xbd62 <FreePrinting+0x3b4>
    bd68:	31 97       	sbiw	r30, 0x01	; 1
    bd6a:	e0 1b       	sub	r30, r16
    bd6c:	f1 0b       	sbc	r31, r17
    bd6e:	f0 93 cb 02 	sts	0x02CB, r31
    bd72:	e0 93 ca 02 	sts	0x02CA, r30
				  stFreePrinting=fpPrintEndLine;	
    bd76:	87 e1       	ldi	r24, 0x17	; 23
    bd78:	80 93 25 01 	sts	0x0125, r24
    bd7c:	0f 90       	pop	r0
    bd7e:	0f 90       	pop	r0
    bd80:	0f 90       	pop	r0
    bd82:	0f 90       	pop	r0
    bd84:	bc c1       	rjmp	.+888    	; 0xc0fe <FreePrinting+0x750>
			   }else stFreePrinting=fpInitFooter;
		  }else stFreePrinting=fpInitFooter;
	      break;

	 case fpPrintEndLine:
		  if (iSend<LSend){
    bd86:	20 91 cc 02 	lds	r18, 0x02CC
    bd8a:	30 91 cd 02 	lds	r19, 0x02CD
    bd8e:	80 91 ca 02 	lds	r24, 0x02CA
    bd92:	90 91 cb 02 	lds	r25, 0x02CB
    bd96:	28 17       	cp	r18, r24
    bd98:	39 07       	cpc	r19, r25
    bd9a:	68 f4       	brcc	.+26     	; 0xbdb6 <FreePrinting+0x408>
		      iLoop++;
    bd9c:	80 91 c8 02 	lds	r24, 0x02C8
    bda0:	90 91 c9 02 	lds	r25, 0x02C9
    bda4:	01 96       	adiw	r24, 0x01	; 1
    bda6:	90 93 c9 02 	sts	0x02C9, r25
    bdaa:	80 93 c8 02 	sts	0x02C8, r24
			  if((iLoop%PRINT_DELAY)==0){
				  TimPrintBusy=0;
    bdae:	10 92 95 02 	sts	0x0295, r1
				  stFreePrinting=fpCheckPrintEndLine;
    bdb2:	88 e1       	ldi	r24, 0x18	; 24
    bdb4:	4e ce       	rjmp	.-868    	; 0xba52 <FreePrinting+0xa4>
				}
			  }
          else {
			  CarriegeReturn();
    bdb6:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
			  stFreePrinting=fpLoadOperatorName;
    bdba:	89 e1       	ldi	r24, 0x19	; 25
    bdbc:	4a ce       	rjmp	.-876    	; 0xba52 <FreePrinting+0xa4>
			  }
	      break;
	 case fpCheckPrintEndLine:
	      if (IsBusyPrint==False){
    bdbe:	80 91 92 02 	lds	r24, 0x0292
    bdc2:	88 23       	and	r24, r24
    bdc4:	09 f0       	breq	.+2      	; 0xbdc8 <FreePrinting+0x41a>
    bdc6:	0d c1       	rjmp	.+538    	; 0xbfe2 <FreePrinting+0x634>
		      uart(_COM_PRINTER,1,strPrint[iSend]);
    bdc8:	e0 91 cc 02 	lds	r30, 0x02CC
    bdcc:	f0 91 cd 02 	lds	r31, 0x02CD
    bdd0:	e0 56       	subi	r30, 0x60	; 96
    bdd2:	f6 4f       	sbci	r31, 0xF6	; 246
    bdd4:	61 e0       	ldi	r22, 0x01	; 1
    bdd6:	40 81       	ld	r20, Z
    bdd8:	0e 94 e6 a5 	call	0x14bcc	; 0x14bcc <uart>
		      iSend++;
    bddc:	80 91 cc 02 	lds	r24, 0x02CC
    bde0:	90 91 cd 02 	lds	r25, 0x02CD
    bde4:	01 96       	adiw	r24, 0x01	; 1
    bde6:	90 93 cd 02 	sts	0x02CD, r25
    bdea:	80 93 cc 02 	sts	0x02CC, r24
		      stFreePrinting=fpPrintEndLine;
    bdee:	87 e1       	ldi	r24, 0x17	; 23
    bdf0:	f6 c0       	rjmp	.+492    	; 0xbfde <FreePrinting+0x630>
		      stFreePrinting=fpFinishFreePrinting;
			  }
	      break;

	 case fpLoadOperatorName:
		  eeprom_read_block((void*) &strOperatorName, (const void*) &DefOperatorName,18);
    bdf2:	8e 01       	movw	r16, r28
    bdf4:	0f 5f       	subi	r16, 0xFF	; 255
    bdf6:	1f 4f       	sbci	r17, 0xFF	; 255
    bdf8:	c8 01       	movw	r24, r16
    bdfa:	65 e1       	ldi	r22, 0x15	; 21
    bdfc:	70 e0       	ldi	r23, 0x00	; 0
    bdfe:	42 e1       	ldi	r20, 0x12	; 18
    be00:	50 e0       	ldi	r21, 0x00	; 0
    be02:	0e 94 56 aa 	call	0x154ac	; 0x154ac <__eerd_block_m128>
		  StrPosCopy(strOperatorName,strOperatorName,0,15);
    be06:	c8 01       	movw	r24, r16
    be08:	b8 01       	movw	r22, r16
    be0a:	40 e0       	ldi	r20, 0x00	; 0
    be0c:	50 e0       	ldi	r21, 0x00	; 0
    be0e:	2f e0       	ldi	r18, 0x0F	; 15
    be10:	30 e0       	ldi	r19, 0x00	; 0
    be12:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
		  sprintf_P(strPrint,PSTR("Operator: %s"),strOperatorName);
    be16:	00 d0       	rcall	.+0      	; 0xbe18 <FreePrinting+0x46a>
    be18:	00 d0       	rcall	.+0      	; 0xbe1a <FreePrinting+0x46c>
    be1a:	00 d0       	rcall	.+0      	; 0xbe1c <FreePrinting+0x46e>
    be1c:	ed b7       	in	r30, 0x3d	; 61
    be1e:	fe b7       	in	r31, 0x3e	; 62
    be20:	31 96       	adiw	r30, 0x01	; 1
    be22:	60 ea       	ldi	r22, 0xA0	; 160
    be24:	e6 2e       	mov	r14, r22
    be26:	69 e0       	ldi	r22, 0x09	; 9
    be28:	f6 2e       	mov	r15, r22
    be2a:	ad b7       	in	r26, 0x3d	; 61
    be2c:	be b7       	in	r27, 0x3e	; 62
    be2e:	12 96       	adiw	r26, 0x02	; 2
    be30:	fc 92       	st	X, r15
    be32:	ee 92       	st	-X, r14
    be34:	11 97       	sbiw	r26, 0x01	; 1
    be36:	8e ee       	ldi	r24, 0xEE	; 238
    be38:	96 e0       	ldi	r25, 0x06	; 6
    be3a:	93 83       	std	Z+3, r25	; 0x03
    be3c:	82 83       	std	Z+2, r24	; 0x02
    be3e:	15 83       	std	Z+5, r17	; 0x05
    be40:	04 83       	std	Z+4, r16	; 0x04
    be42:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	      iSend=0;
    be46:	10 92 cd 02 	sts	0x02CD, r1
    be4a:	10 92 cc 02 	sts	0x02CC, r1
		  iLoop=0;
    be4e:	10 92 c9 02 	sts	0x02C9, r1
    be52:	10 92 c8 02 	sts	0x02C8, r1
		  LSend=strlen(strPrint);
    be56:	f7 01       	movw	r30, r14
    be58:	01 90       	ld	r0, Z+
    be5a:	00 20       	and	r0, r0
    be5c:	e9 f7       	brne	.-6      	; 0xbe58 <FreePrinting+0x4aa>
    be5e:	31 97       	sbiw	r30, 0x01	; 1
    be60:	ee 19       	sub	r30, r14
    be62:	ff 09       	sbc	r31, r15
    be64:	f0 93 cb 02 	sts	0x02CB, r31
    be68:	e0 93 ca 02 	sts	0x02CA, r30
		  stFreePrinting=fpPrintOperatorName;	
    be6c:	8a e1       	ldi	r24, 0x1A	; 26
    be6e:	80 93 25 01 	sts	0x0125, r24
	      break;
    be72:	ed b7       	in	r30, 0x3d	; 61
    be74:	fe b7       	in	r31, 0x3e	; 62
    be76:	36 96       	adiw	r30, 0x06	; 6
    be78:	0f b6       	in	r0, 0x3f	; 63
    be7a:	f8 94       	cli
    be7c:	fe bf       	out	0x3e, r31	; 62
    be7e:	0f be       	out	0x3f, r0	; 63
    be80:	ed bf       	out	0x3d, r30	; 61
    be82:	3d c1       	rjmp	.+634    	; 0xc0fe <FreePrinting+0x750>
	 case fpPrintOperatorName:
		  if (iSend<LSend){
    be84:	20 91 cc 02 	lds	r18, 0x02CC
    be88:	30 91 cd 02 	lds	r19, 0x02CD
    be8c:	80 91 ca 02 	lds	r24, 0x02CA
    be90:	90 91 cb 02 	lds	r25, 0x02CB
    be94:	28 17       	cp	r18, r24
    be96:	39 07       	cpc	r19, r25
    be98:	68 f4       	brcc	.+26     	; 0xbeb4 <FreePrinting+0x506>
		      iLoop++;
    be9a:	80 91 c8 02 	lds	r24, 0x02C8
    be9e:	90 91 c9 02 	lds	r25, 0x02C9
    bea2:	01 96       	adiw	r24, 0x01	; 1
    bea4:	90 93 c9 02 	sts	0x02C9, r25
    bea8:	80 93 c8 02 	sts	0x02C8, r24
			  if((iLoop%PRINT_DELAY)==0){
				  TimPrintBusy=0;
    beac:	10 92 95 02 	sts	0x0295, r1
				  stFreePrinting=fpCheckPrintOperatorName;
    beb0:	8b e1       	ldi	r24, 0x1B	; 27
    beb2:	cf cd       	rjmp	.-1122   	; 0xba52 <FreePrinting+0xa4>
				}
			  }
          else {
			  CarriegeReturn();
    beb4:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
			  CarriegeReturn();
    beb8:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
			  stFreePrinting=fpInitFooter;
    bebc:	8b e0       	ldi	r24, 0x0B	; 11
    bebe:	c9 cd       	rjmp	.-1134   	; 0xba52 <FreePrinting+0xa4>
			  }
	      break;
	 case fpCheckPrintOperatorName:
	      if (IsBusyPrint==False){
    bec0:	80 91 92 02 	lds	r24, 0x0292
    bec4:	88 23       	and	r24, r24
    bec6:	09 f0       	breq	.+2      	; 0xbeca <FreePrinting+0x51c>
    bec8:	8c c0       	rjmp	.+280    	; 0xbfe2 <FreePrinting+0x634>
		      uart(_COM_PRINTER,1,strPrint[iSend]);
    beca:	e0 91 cc 02 	lds	r30, 0x02CC
    bece:	f0 91 cd 02 	lds	r31, 0x02CD
    bed2:	e0 56       	subi	r30, 0x60	; 96
    bed4:	f6 4f       	sbci	r31, 0xF6	; 246
    bed6:	61 e0       	ldi	r22, 0x01	; 1
    bed8:	40 81       	ld	r20, Z
    beda:	0e 94 e6 a5 	call	0x14bcc	; 0x14bcc <uart>
		      iSend++;
    bede:	80 91 cc 02 	lds	r24, 0x02CC
    bee2:	90 91 cd 02 	lds	r25, 0x02CD
    bee6:	01 96       	adiw	r24, 0x01	; 1
    bee8:	90 93 cd 02 	sts	0x02CD, r25
    beec:	80 93 cc 02 	sts	0x02CC, r24
		      stFreePrinting=fpPrintOperatorName;
    bef0:	8a e1       	ldi	r24, 0x1A	; 26
    bef2:	75 c0       	rjmp	.+234    	; 0xbfde <FreePrinting+0x630>
			  }
	      break;

     case fpInitFooter:
	      //uart_printf(0,1,PSTR("fpInitFooter"));
          if (((cmdPrint&0b01000000)>>6)==1){
    bef4:	80 91 94 02 	lds	r24, 0x0294
    bef8:	86 ff       	sbrs	r24, 6
    befa:	06 c0       	rjmp	.+12     	; 0xbf08 <FreePrinting+0x55a>
		      stFreePrinting=fpLoadFooter;
    befc:	8c e0       	ldi	r24, 0x0C	; 12
    befe:	80 93 25 01 	sts	0x0125, r24
			  iFooter=0;
    bf02:	10 92 d2 02 	sts	0x02D2, r1
    bf06:	fb c0       	rjmp	.+502    	; 0xc0fe <FreePrinting+0x750>
			  }
		  else
	      if (((cmdPrint&0b01000000)>>6)==0) stFreePrinting=fpPaperCut;//fpInitScroll;	                
    bf08:	80 e1       	ldi	r24, 0x10	; 16
    bf0a:	a3 cd       	rjmp	.-1210   	; 0xba52 <FreePrinting+0xa4>
	      break;
     case fpLoadFooter:
	 	  //uart_printf(0,1,PSTR("fpLoadFooter"));
          //Footer 1
	      eeprom_read_block((void*) &strPrint, (const void*) &DefHeaderFooter[6+iFooter], 40);
    bf0c:	80 91 d2 02 	lds	r24, 0x02D2
    bf10:	90 e0       	ldi	r25, 0x00	; 0
    bf12:	06 96       	adiw	r24, 0x06	; 6
    bf14:	29 e2       	ldi	r18, 0x29	; 41
    bf16:	30 e0       	ldi	r19, 0x00	; 0
    bf18:	82 9f       	mul	r24, r18
    bf1a:	b0 01       	movw	r22, r0
    bf1c:	83 9f       	mul	r24, r19
    bf1e:	70 0d       	add	r23, r0
    bf20:	92 9f       	mul	r25, r18
    bf22:	70 0d       	add	r23, r0
    bf24:	11 24       	eor	r1, r1
    bf26:	68 5d       	subi	r22, 0xD8	; 216
    bf28:	7d 4f       	sbci	r23, 0xFD	; 253
    bf2a:	80 ea       	ldi	r24, 0xA0	; 160
    bf2c:	99 e0       	ldi	r25, 0x09	; 9
    bf2e:	48 e2       	ldi	r20, 0x28	; 40
    bf30:	50 e0       	ldi	r21, 0x00	; 0
    bf32:	0e 94 56 aa 	call	0x154ac	; 0x154ac <__eerd_block_m128>
		  iFooter++;
    bf36:	80 91 d2 02 	lds	r24, 0x02D2
    bf3a:	8f 5f       	subi	r24, 0xFF	; 255
    bf3c:	80 93 d2 02 	sts	0x02D2, r24
		  if (iFooter<=4){
    bf40:	85 30       	cpi	r24, 0x05	; 5
    bf42:	90 f4       	brcc	.+36     	; 0xbf68 <FreePrinting+0x5ba>
		      if (SpaceOnly(strPrint)==True){
    bf44:	80 ea       	ldi	r24, 0xA0	; 160
    bf46:	99 e0       	ldi	r25, 0x09	; 9
    bf48:	0e 94 8e 4a 	call	0x951c	; 0x951c <SpaceOnly>
    bf4c:	81 30       	cpi	r24, 0x01	; 1
    bf4e:	11 f4       	brne	.+4      	; 0xbf54 <FreePrinting+0x5a6>
			      stFreePrinting=fpLoadFooter;
    bf50:	8c e0       	ldi	r24, 0x0C	; 12
    bf52:	7f cd       	rjmp	.-1282   	; 0xba52 <FreePrinting+0xa4>
				  }
			  else{
			      iSend=0;
    bf54:	10 92 cd 02 	sts	0x02CD, r1
    bf58:	10 92 cc 02 	sts	0x02CC, r1
				  iLoop=0;
    bf5c:	10 92 c9 02 	sts	0x02C9, r1
    bf60:	10 92 c8 02 	sts	0x02C8, r1
				  stFreePrinting=fpPrintFooter;
    bf64:	8d e0       	ldi	r24, 0x0D	; 13
    bf66:	75 cd       	rjmp	.-1302   	; 0xba52 <FreePrinting+0xa4>
			      }
		  }else{
		    CarriegeReturn();
    bf68:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
			iPrinted++;
    bf6c:	80 91 d4 02 	lds	r24, 0x02D4
    bf70:	8f 5f       	subi	r24, 0xFF	; 255
    bf72:	80 93 d4 02 	sts	0x02D4, r24

			//if (eeprom_read_byte(&DefPrinterType)==PT_CUSTOM_CUBE){
			    stFreePrinting=fpInitScroll;
    bf76:	8e e0       	ldi	r24, 0x0E	; 14
    bf78:	6c cd       	rjmp	.-1320   	; 0xba52 <FreePrinting+0xa4>
			//}else stFreePrinting=fpPaperCut;

			}
	      break;
     case fpPrintFooter:
		  if (iSend<40){
    bf7a:	80 91 cc 02 	lds	r24, 0x02CC
    bf7e:	90 91 cd 02 	lds	r25, 0x02CD
    bf82:	88 32       	cpi	r24, 0x28	; 40
    bf84:	91 05       	cpc	r25, r1
    bf86:	68 f4       	brcc	.+26     	; 0xbfa2 <FreePrinting+0x5f4>
		      iLoop++;
    bf88:	80 91 c8 02 	lds	r24, 0x02C8
    bf8c:	90 91 c9 02 	lds	r25, 0x02C9
    bf90:	01 96       	adiw	r24, 0x01	; 1
    bf92:	90 93 c9 02 	sts	0x02C9, r25
    bf96:	80 93 c8 02 	sts	0x02C8, r24
			  if((iLoop%PRINT_DELAY)==0){
		        //uart(_COM_PRINTER,1,strPrint[iSend]);
		        //iSend++;
				TimPrintBusy=0;
    bf9a:	10 92 95 02 	sts	0x0295, r1
				stFreePrinting=fpCheckPrintStatusFooter;
    bf9e:	84 e1       	ldi	r24, 0x14	; 20
    bfa0:	58 cd       	rjmp	.-1360   	; 0xba52 <FreePrinting+0xa4>
				}
			  }
          else {
		      stFreePrinting=fpLoadFooter;
    bfa2:	8c e0       	ldi	r24, 0x0C	; 12
    bfa4:	80 93 25 01 	sts	0x0125, r24
			  CarriegeReturn();
    bfa8:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
    bfac:	a8 c0       	rjmp	.+336    	; 0xc0fe <FreePrinting+0x750>
			  }
	      break;
     
	 case fpCheckPrintStatusFooter:
	      if (IsBusyPrint==False){
    bfae:	80 91 92 02 	lds	r24, 0x0292
    bfb2:	88 23       	and	r24, r24
    bfb4:	b1 f4       	brne	.+44     	; 0xbfe2 <FreePrinting+0x634>
		      uart(_COM_PRINTER,1,strPrint[iSend]);
    bfb6:	e0 91 cc 02 	lds	r30, 0x02CC
    bfba:	f0 91 cd 02 	lds	r31, 0x02CD
    bfbe:	e0 56       	subi	r30, 0x60	; 96
    bfc0:	f6 4f       	sbci	r31, 0xF6	; 246
    bfc2:	61 e0       	ldi	r22, 0x01	; 1
    bfc4:	40 81       	ld	r20, Z
    bfc6:	0e 94 e6 a5 	call	0x14bcc	; 0x14bcc <uart>
		      iSend++;
    bfca:	80 91 cc 02 	lds	r24, 0x02CC
    bfce:	90 91 cd 02 	lds	r25, 0x02CD
    bfd2:	01 96       	adiw	r24, 0x01	; 1
    bfd4:	90 93 cd 02 	sts	0x02CD, r25
    bfd8:	80 93 cc 02 	sts	0x02CC, r24
		      stFreePrinting=fpPrintFooter;
    bfdc:	8d e0       	ldi	r24, 0x0D	; 13
    bfde:	80 93 25 01 	sts	0x0125, r24
		  }
		  if (TimPrintBusy>TIM_BUSY_PRINT){
    bfe2:	80 91 95 02 	lds	r24, 0x0295
    bfe6:	8b 30       	cpi	r24, 0x0B	; 11
    bfe8:	08 f4       	brcc	.+2      	; 0xbfec <FreePrinting+0x63e>
    bfea:	89 c0       	rjmp	.+274    	; 0xc0fe <FreePrinting+0x750>
		      IsPrintERROR=True;
    bfec:	81 e0       	ldi	r24, 0x01	; 1
    bfee:	80 93 90 02 	sts	0x0290, r24
		      stFreePrinting=fpFinishFreePrinting;
    bff2:	81 e1       	ldi	r24, 0x11	; 17
    bff4:	2e cd       	rjmp	.-1444   	; 0xba52 <FreePrinting+0xa4>
			  }
	      break;

     case fpInitScroll:
	      iScroll=0;
    bff6:	10 92 cf 02 	sts	0x02CF, r1
		  iSend=0;
    bffa:	10 92 cd 02 	sts	0x02CD, r1
    bffe:	10 92 cc 02 	sts	0x02CC, r1
		  if (iPrinted<PrintCopy)
    c002:	90 91 d4 02 	lds	r25, 0x02D4
    c006:	80 91 d1 02 	lds	r24, 0x02D1
    c00a:	98 17       	cp	r25, r24
    c00c:	18 f4       	brcc	.+6      	; 0xc014 <FreePrinting+0x666>
		      nScroll=eeprom_read_byte(&DefPrintScrollSpace);
    c00e:	82 e3       	ldi	r24, 0x32	; 50
    c010:	90 e0       	ldi	r25, 0x00	; 0
    c012:	02 c0       	rjmp	.+4      	; 0xc018 <FreePrinting+0x66a>
		  else if (iPrinted>=PrintCopy)
		  	  nScroll=eeprom_read_byte(&DefPrintScrollEnd);
    c014:	81 e3       	ldi	r24, 0x31	; 49
    c016:	90 e0       	ldi	r25, 0x00	; 0
    c018:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
    c01c:	80 93 ce 02 	sts	0x02CE, r24

          stFreePrinting=fpScrollPaper;
    c020:	8f e0       	ldi	r24, 0x0F	; 15
    c022:	17 cd       	rjmp	.-1490   	; 0xba52 <FreePrinting+0xa4>
	      break;
     case fpScrollPaper:
	      if (iScroll>nScroll)stFreePrinting=fpPaperCut;
    c024:	90 91 cf 02 	lds	r25, 0x02CF
    c028:	80 91 ce 02 	lds	r24, 0x02CE
    c02c:	89 17       	cp	r24, r25
    c02e:	18 f4       	brcc	.+6      	; 0xc036 <FreePrinting+0x688>
    c030:	80 e1       	ldi	r24, 0x10	; 16
    c032:	80 93 25 01 	sts	0x0125, r24
		  iSend++;
    c036:	80 91 cc 02 	lds	r24, 0x02CC
    c03a:	90 91 cd 02 	lds	r25, 0x02CD
    c03e:	01 96       	adiw	r24, 0x01	; 1
    c040:	90 93 cd 02 	sts	0x02CD, r25
    c044:	80 93 cc 02 	sts	0x02CC, r24
		  if (iSend%PRINT_DELAY==0){
		      CarriegeReturn();
    c048:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
			  iScroll++;
    c04c:	80 91 cf 02 	lds	r24, 0x02CF
    c050:	8f 5f       	subi	r24, 0xFF	; 255
    c052:	80 93 cf 02 	sts	0x02CF, r24
    c056:	53 c0       	rjmp	.+166    	; 0xc0fe <FreePrinting+0x750>
			  }
	      break;
     case fpPaperCut:
		  //uart_printf(0,1,PSTR("fpPaperCut"));
		  //iPrinted++;
          if (iPrinted<PrintCopy){
    c058:	90 91 d4 02 	lds	r25, 0x02D4
    c05c:	80 91 d1 02 	lds	r24, 0x02D1
    c060:	98 17       	cp	r25, r24
    c062:	20 f4       	brcc	.+8      	; 0xc06c <FreePrinting+0x6be>
		      CarriegeReturn();
    c064:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
              stFreePrinting=fpInitHeader;
    c068:	82 e0       	ldi	r24, 0x02	; 2
    c06a:	07 c0       	rjmp	.+14     	; 0xc07a <FreePrinting+0x6cc>
			  }
          else{
		      if (IFType==IT_SLAVE)sendMessage04();
    c06c:	80 91 00 01 	lds	r24, 0x0100
    c070:	81 30       	cpi	r24, 0x01	; 1
    c072:	11 f4       	brne	.+4      	; 0xc078 <FreePrinting+0x6ca>
    c074:	0e 94 a6 2b 	call	0x574c	; 0x574c <sendMessage04>
		      stFreePrinting=fpFinishFreePrinting;
    c078:	81 e1       	ldi	r24, 0x11	; 17
    c07a:	80 93 25 01 	sts	0x0125, r24
			  }
          
		  if (((cmdPrint&0b00100000)>>5)==1){
    c07e:	80 91 94 02 	lds	r24, 0x0294
    c082:	85 ff       	sbrs	r24, 5
    c084:	3c c0       	rjmp	.+120    	; 0xc0fe <FreePrinting+0x750>
		      if (iPrinted==0){
    c086:	80 91 d4 02 	lds	r24, 0x02D4
    c08a:	88 23       	and	r24, r24
    c08c:	41 f4       	brne	.+16     	; 0xc09e <FreePrinting+0x6f0>
			      CarriegeReturn();_delay_ms(50);
    c08e:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
    c092:	83 ed       	ldi	r24, 0xD3	; 211
    c094:	90 e3       	ldi	r25, 0x30	; 48
    c096:	01 97       	sbiw	r24, 0x01	; 1
    c098:	f1 f7       	brne	.-4      	; 0xc096 <FreePrinting+0x6e8>
    c09a:	00 c0       	rjmp	.+0      	; 0xc09c <FreePrinting+0x6ee>
    c09c:	00 00       	nop
				 }
              //HFCS 0000 : Header, Footer, Copy , Scrool [Copy:16x max]
		      if ((iPrinted==PrintCopy)){
    c09e:	90 91 d4 02 	lds	r25, 0x02D4
    c0a2:	80 91 d1 02 	lds	r24, 0x02D1
    c0a6:	98 17       	cp	r25, r24
    c0a8:	01 f5       	brne	.+64     	; 0xc0ea <FreePrinting+0x73c>
			      // if (((cmdPrint&0b00010000)>>4)==1){
				  CarriegeReturn();_delay_ms(50);
    c0aa:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
    c0ae:	a3 ed       	ldi	r26, 0xD3	; 211
    c0b0:	b0 e3       	ldi	r27, 0x30	; 48
    c0b2:	11 97       	sbiw	r26, 0x01	; 1
    c0b4:	f1 f7       	brne	.-4      	; 0xc0b2 <FreePrinting+0x704>
    c0b6:	00 c0       	rjmp	.+0      	; 0xc0b8 <FreePrinting+0x70a>
    c0b8:	00 00       	nop
				  CarriegeReturn();_delay_ms(50);
    c0ba:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
    c0be:	e3 ed       	ldi	r30, 0xD3	; 211
    c0c0:	f0 e3       	ldi	r31, 0x30	; 48
    c0c2:	31 97       	sbiw	r30, 0x01	; 1
    c0c4:	f1 f7       	brne	.-4      	; 0xc0c2 <FreePrinting+0x714>
    c0c6:	00 c0       	rjmp	.+0      	; 0xc0c8 <FreePrinting+0x71a>
    c0c8:	00 00       	nop
				  CarriegeReturn();_delay_ms(50);
    c0ca:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
    c0ce:	83 ed       	ldi	r24, 0xD3	; 211
    c0d0:	90 e3       	ldi	r25, 0x30	; 48
    c0d2:	01 97       	sbiw	r24, 0x01	; 1
    c0d4:	f1 f7       	brne	.-4      	; 0xc0d2 <FreePrinting+0x724>
    c0d6:	00 c0       	rjmp	.+0      	; 0xc0d8 <FreePrinting+0x72a>
    c0d8:	00 00       	nop
				  CarriegeReturn();_delay_ms(50);
    c0da:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
    c0de:	a3 ed       	ldi	r26, 0xD3	; 211
    c0e0:	b0 e3       	ldi	r27, 0x30	; 48
    c0e2:	11 97       	sbiw	r26, 0x01	; 1
    c0e4:	f1 f7       	brne	.-4      	; 0xc0e2 <FreePrinting+0x734>
    c0e6:	00 c0       	rjmp	.+0      	; 0xc0e8 <FreePrinting+0x73a>
    c0e8:	00 00       	nop
				   //}
				 }
		      PaperCut();
    c0ea:	0e 94 a6 4a 	call	0x954c	; 0x954c <PaperCut>
    c0ee:	07 c0       	rjmp	.+14     	; 0xc0fe <FreePrinting+0x750>
		   }
	      break;
     case fpFinishFreePrinting:
	 	  //uart_printf(0,1,PSTR("fpFinished"));
		  IsBusyFreePrinting=False;
    c0f0:	10 92 93 02 	sts	0x0293, r1
	      stFreePrinting=fpInit;
    c0f4:	81 e0       	ldi	r24, 0x01	; 1
    c0f6:	80 93 25 01 	sts	0x0125, r24
		  iPrinted=0;
    c0fa:	10 92 d4 02 	sts	0x02D4, r1
	      break;
	 }//EndCase
}
    c0fe:	64 96       	adiw	r28, 0x14	; 20
    c100:	0f b6       	in	r0, 0x3f	; 63
    c102:	f8 94       	cli
    c104:	de bf       	out	0x3e, r29	; 62
    c106:	0f be       	out	0x3f, r0	; 63
    c108:	cd bf       	out	0x3d, r28	; 61
    c10a:	cf 91       	pop	r28
    c10c:	df 91       	pop	r29
    c10e:	1f 91       	pop	r17
    c110:	0f 91       	pop	r16
    c112:	ff 90       	pop	r15
    c114:	ef 90       	pop	r14
    c116:	08 95       	ret

0000c118 <RawToStr>:
	 }if (nZerro==Length) Result=True;
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
    c118:	28 2f       	mov	r18, r24
    c11a:	39 2f       	mov	r19, r25
    c11c:	d9 01       	movw	r26, r18
    c11e:	fb 01       	movw	r30, r22
	      Dest[i]=xRaw;
	 }	      
}
void RawToStr(char *Source,char *Dest){//Source:   1234567890AB
     unsigned char i,xRaw,cA,cB;               //Dest  :  "12345678" 
	 for (i=0;i<6;i++){
    c120:	80 e0       	ldi	r24, 0x00	; 0
	      cA=Chr(Source[i]>>4);
    c122:	9d 91       	ld	r25, X+
    c124:	29 2f       	mov	r18, r25
    c126:	22 95       	swap	r18
    c128:	2f 70       	andi	r18, 0x0F	; 15
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
    c12a:	2a 30       	cpi	r18, 0x0A	; 10
    c12c:	10 f4       	brcc	.+4      	; 0xc132 <RawToStr+0x1a>
	    Result='0'+X;
    c12e:	20 5d       	subi	r18, 0xD0	; 208
    c130:	01 c0       	rjmp	.+2      	; 0xc134 <RawToStr+0x1c>
	 }if (nZerro==Length) Result=True;
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
    c132:	20 e3       	ldi	r18, 0x30	; 48
}
void RawToStr(char *Source,char *Dest){//Source:   1234567890AB
     unsigned char i,xRaw,cA,cB;               //Dest  :  "12345678" 
	 for (i=0;i<6;i++){
	      cA=Chr(Source[i]>>4);
	      cB=Chr(Source[i]&0x0F);
    c134:	9f 70       	andi	r25, 0x0F	; 15
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
    c136:	9a 30       	cpi	r25, 0x0A	; 10
    c138:	10 f4       	brcc	.+4      	; 0xc13e <RawToStr+0x26>
	    Result='0'+X;
    c13a:	90 5d       	subi	r25, 0xD0	; 208
    c13c:	01 c0       	rjmp	.+2      	; 0xc140 <RawToStr+0x28>
	 }if (nZerro==Length) Result=True;
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
    c13e:	90 e3       	ldi	r25, 0x30	; 48
void RawToStr(char *Source,char *Dest){//Source:   1234567890AB
     unsigned char i,xRaw,cA,cB;               //Dest  :  "12345678" 
	 for (i=0;i<6;i++){
	      cA=Chr(Source[i]>>4);
	      cB=Chr(Source[i]&0x0F);
          Dest[2*i]=cA;
    c140:	20 83       	st	Z, r18
          Dest[(2*i)+1]=cB;
    c142:	91 83       	std	Z+1, r25	; 0x01
	      Dest[i]=xRaw;
	 }	      
}
void RawToStr(char *Source,char *Dest){//Source:   1234567890AB
     unsigned char i,xRaw,cA,cB;               //Dest  :  "12345678" 
	 for (i=0;i<6;i++){
    c144:	8f 5f       	subi	r24, 0xFF	; 255
    c146:	32 96       	adiw	r30, 0x02	; 2
    c148:	86 30       	cpi	r24, 0x06	; 6
    c14a:	59 f7       	brne	.-42     	; 0xc122 <RawToStr+0xa>
	      cA=Chr(Source[i]>>4);
	      cB=Chr(Source[i]&0x0F);
          Dest[2*i]=cA;
          Dest[(2*i)+1]=cB;
	 }Dest[12]=0;
    c14c:	fb 01       	movw	r30, r22
    c14e:	14 86       	std	Z+12, r1	; 0x0c
}
    c150:	08 95       	ret

0000c152 <GetTotalizerData>:
	 if (TType==TMONEY)eeprom_write_block((const void*)&rawValue,(void*)&(TotalMoney[TAddr][iPumpAddr][iGrade]), sizeof(rawValue));
}



void GetTotalizerData(char TType, char TAddr, char xPumpAddr, char xGradeAddr, char *strValue){// 0 1 1 "0000000"
    c152:	0f 93       	push	r16
    c154:	1f 93       	push	r17
    c156:	df 93       	push	r29
    c158:	cf 93       	push	r28
    c15a:	00 d0       	rcall	.+0      	; 0xc15c <GetTotalizerData+0xa>
    c15c:	00 d0       	rcall	.+0      	; 0xc15e <GetTotalizerData+0xc>
    c15e:	00 d0       	rcall	.+0      	; 0xc160 <GetTotalizerData+0xe>
    c160:	cd b7       	in	r28, 0x3d	; 61
    c162:	de b7       	in	r29, 0x3e	; 62
     char rawValue[6],iPumpAddr,iGrade;

	 iPumpAddr=(xPumpAddr&0x0F);
    c164:	4f 70       	andi	r20, 0x0F	; 15
	 if ((xGradeAddr>=1)&&(xGradeAddr<=6))
    c166:	21 50       	subi	r18, 0x01	; 1
    c168:	26 30       	cpi	r18, 0x06	; 6
    c16a:	08 f4       	brcc	.+2      	; 0xc16e <GetTotalizerData+0x1c>
    c16c:	92 2f       	mov	r25, r18
	     iGrade=xGradeAddr-1;
     
//TotalVolume[2][16][6][6];
//GetTotalizerData(TVOLUME,TOTALIZER_LAST,PumpNum,xGrade,strLastVolume);
	 if (TType==TVOLUME)eeprom_read_block((void*) &rawValue, (const void*) &(TotalVolume[TAddr][iPumpAddr][iGrade]), sizeof(rawValue));
    c16e:	88 23       	and	r24, r24
    c170:	c9 f4       	brne	.+50     	; 0xc1a4 <GetTotalizerData+0x52>
    c172:	84 e2       	ldi	r24, 0x24	; 36
    c174:	48 9f       	mul	r20, r24
    c176:	a0 01       	movw	r20, r0
    c178:	11 24       	eor	r1, r1
    c17a:	70 e0       	ldi	r23, 0x00	; 0
    c17c:	e0 e2       	ldi	r30, 0x20	; 32
    c17e:	f1 e0       	ldi	r31, 0x01	; 1
    c180:	6e 9f       	mul	r22, r30
    c182:	90 01       	movw	r18, r0
    c184:	6f 9f       	mul	r22, r31
    c186:	30 0d       	add	r19, r0
    c188:	7e 9f       	mul	r23, r30
    c18a:	30 0d       	add	r19, r0
    c18c:	11 24       	eor	r1, r1
    c18e:	42 0f       	add	r20, r18
    c190:	53 1f       	adc	r21, r19
    c192:	86 e0       	ldi	r24, 0x06	; 6
    c194:	98 9f       	mul	r25, r24
    c196:	c0 01       	movw	r24, r0
    c198:	11 24       	eor	r1, r1
    c19a:	48 0f       	add	r20, r24
    c19c:	59 1f       	adc	r21, r25
    c19e:	4c 53       	subi	r20, 0x3C	; 60
    c1a0:	5c 4f       	sbci	r21, 0xFC	; 252
    c1a2:	1a c0       	rjmp	.+52     	; 0xc1d8 <GetTotalizerData+0x86>
	 else 
	 if (TType==TMONEY)eeprom_read_block((void*) &rawValue, (const void*) &(TotalMoney[TAddr][iPumpAddr][iGrade]), sizeof(rawValue));
    c1a4:	81 30       	cpi	r24, 0x01	; 1
    c1a6:	f9 f4       	brne	.+62     	; 0xc1e6 <GetTotalizerData+0x94>
    c1a8:	84 e2       	ldi	r24, 0x24	; 36
    c1aa:	48 9f       	mul	r20, r24
    c1ac:	a0 01       	movw	r20, r0
    c1ae:	11 24       	eor	r1, r1
    c1b0:	70 e0       	ldi	r23, 0x00	; 0
    c1b2:	e0 e2       	ldi	r30, 0x20	; 32
    c1b4:	f1 e0       	ldi	r31, 0x01	; 1
    c1b6:	6e 9f       	mul	r22, r30
    c1b8:	90 01       	movw	r18, r0
    c1ba:	6f 9f       	mul	r22, r31
    c1bc:	30 0d       	add	r19, r0
    c1be:	7e 9f       	mul	r23, r30
    c1c0:	30 0d       	add	r19, r0
    c1c2:	11 24       	eor	r1, r1
    c1c4:	42 0f       	add	r20, r18
    c1c6:	53 1f       	adc	r21, r19
    c1c8:	86 e0       	ldi	r24, 0x06	; 6
    c1ca:	98 9f       	mul	r25, r24
    c1cc:	c0 01       	movw	r24, r0
    c1ce:	11 24       	eor	r1, r1
    c1d0:	48 0f       	add	r20, r24
    c1d2:	59 1f       	adc	r21, r25
    c1d4:	4c 5f       	subi	r20, 0xFC	; 252
    c1d6:	59 4f       	sbci	r21, 0xF9	; 249
    c1d8:	ce 01       	movw	r24, r28
    c1da:	01 96       	adiw	r24, 0x01	; 1
    c1dc:	ba 01       	movw	r22, r20
    c1de:	46 e0       	ldi	r20, 0x06	; 6
    c1e0:	50 e0       	ldi	r21, 0x00	; 0
    c1e2:	0e 94 56 aa 	call	0x154ac	; 0x154ac <__eerd_block_m128>
	 //Convert RawData to String 
	 RawToStr(rawValue,strValue);
    c1e6:	ce 01       	movw	r24, r28
    c1e8:	01 96       	adiw	r24, 0x01	; 1
    c1ea:	b8 01       	movw	r22, r16
    c1ec:	0e 94 8c 60 	call	0xc118	; 0xc118 <RawToStr>
}
    c1f0:	26 96       	adiw	r28, 0x06	; 6
    c1f2:	0f b6       	in	r0, 0x3f	; 63
    c1f4:	f8 94       	cli
    c1f6:	de bf       	out	0x3e, r29	; 62
    c1f8:	0f be       	out	0x3f, r0	; 63
    c1fa:	cd bf       	out	0x3d, r28	; 61
    c1fc:	cf 91       	pop	r28
    c1fe:	df 91       	pop	r29
    c200:	1f 91       	pop	r17
    c202:	0f 91       	pop	r16
    c204:	08 95       	ret

0000c206 <CalcMinus>:

char CalcMinus(char A, char B){
     signed char xC;//,xA,xB;
	 char Result;
	 if (A>=B) xC=((A-'0')-(B-'0'));
    c206:	86 17       	cp	r24, r22
    c208:	08 f4       	brcc	.+2      	; 0xc20c <CalcMinus+0x6>
	 else xC=10+((A-'0')-(B-'0'));//
    c20a:	86 5f       	subi	r24, 0xF6	; 246
    c20c:	86 1b       	sub	r24, r22
	 Result='0'+xC;
  return Result;
}
    c20e:	80 5d       	subi	r24, 0xD0	; 208
    c210:	08 95       	ret

0000c212 <CalcPlus>:

char CalcPlus(char A, char B){
     signed char xA,xB,xC;
	 char Result;
	 xC=((A-'0')+(B-'0'));
    c212:	80 56       	subi	r24, 0x60	; 96
    c214:	86 0f       	add	r24, r22
     Result='0'+(xC%10);  
    c216:	6a e0       	ldi	r22, 0x0A	; 10
    c218:	0e 94 8a a7 	call	0x14f14	; 0x14f14 <__divmodqi4>
   return Result;
}
    c21c:	89 2f       	mov	r24, r25
    c21e:	80 5d       	subi	r24, 0xD0	; 208
    c220:	08 95       	ret

0000c222 <IsZerroAll>:

char IsZerroAll(char *strZerro){
     char i,Length,nZerro=0,Result;
	 Length=strlen(strZerro);
    c222:	dc 01       	movw	r26, r24
    c224:	0d 90       	ld	r0, X+
    c226:	00 20       	and	r0, r0
    c228:	e9 f7       	brne	.-6      	; 0xc224 <IsZerroAll+0x2>
    c22a:	11 97       	sbiw	r26, 0x01	; 1
    c22c:	a8 1b       	sub	r26, r24
	 xC=((A-'0')+(B-'0'));
     Result='0'+(xC%10);  
   return Result;
}

char IsZerroAll(char *strZerro){
    c22e:	ea 2f       	mov	r30, r26
    c230:	f0 e0       	ldi	r31, 0x00	; 0
    c232:	31 96       	adiw	r30, 0x01	; 1
    c234:	e8 0f       	add	r30, r24
    c236:	f9 1f       	adc	r31, r25
     char i,Length,nZerro=0,Result;
	 Length=strlen(strZerro);
	 nZerro=0;
    c238:	90 e0       	ldi	r25, 0x00	; 0
	 Result=False;
	 for(i=0;i<Length;i++){
    c23a:	80 e0       	ldi	r24, 0x00	; 0
    c23c:	05 c0       	rjmp	.+10     	; 0xc248 <IsZerroAll+0x26>
	     if (strZerro[Length-i]=='0')nZerro++;
    c23e:	22 91       	ld	r18, -Z
    c240:	20 33       	cpi	r18, 0x30	; 48
    c242:	09 f4       	brne	.+2      	; 0xc246 <IsZerroAll+0x24>
    c244:	9f 5f       	subi	r25, 0xFF	; 255
char IsZerroAll(char *strZerro){
     char i,Length,nZerro=0,Result;
	 Length=strlen(strZerro);
	 nZerro=0;
	 Result=False;
	 for(i=0;i<Length;i++){
    c246:	8f 5f       	subi	r24, 0xFF	; 255
    c248:	8a 17       	cp	r24, r26
    c24a:	c8 f3       	brcs	.-14     	; 0xc23e <IsZerroAll+0x1c>

char IsZerroAll(char *strZerro){
     char i,Length,nZerro=0,Result;
	 Length=strlen(strZerro);
	 nZerro=0;
	 Result=False;
    c24c:	81 e0       	ldi	r24, 0x01	; 1
    c24e:	9a 13       	cpse	r25, r26
    c250:	80 e0       	ldi	r24, 0x00	; 0
	 for(i=0;i<Length;i++){
	     if (strZerro[Length-i]=='0')nZerro++;
	 }if (nZerro==Length) Result=True;
  return Result;
}
    c252:	08 95       	ret

0000c254 <Chr>:

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
    c254:	8a 30       	cpi	r24, 0x0A	; 10
    c256:	10 f4       	brcc	.+4      	; 0xc25c <Chr+0x8>
	    Result='0'+X;
    c258:	80 5d       	subi	r24, 0xD0	; 208
    c25a:	08 95       	ret
	 }if (nZerro==Length) Result=True;
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
    c25c:	80 e3       	ldi	r24, 0x30	; 48
	 if ((X>=0)&&(X<=9)){
	    Result='0'+X;
	 }
	return Result;
}
    c25e:	08 95       	ret

0000c260 <Ord>:
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
    c260:	80 53       	subi	r24, 0x30	; 48
    c262:	8a 30       	cpi	r24, 0x0A	; 10
    c264:	08 f0       	brcs	.+2      	; 0xc268 <Ord+0x8>
	    Result='0'+X;
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
    c266:	80 e0       	ldi	r24, 0x00	; 0
	 if ((c>='0')&&(c<='9')){
	    Result=c-'0';
	 }
	return Result;
}
    c268:	08 95       	ret

0000c26a <StrToRaw>:
			  }
		  }
	 }
}
                                       //12byte->6Byte         0 1 2 3  
void StrToRaw(char *Source,char *Dest){//Source: "1234567890AB"
    c26a:	cf 92       	push	r12
    c26c:	df 92       	push	r13
    c26e:	ef 92       	push	r14
    c270:	ff 92       	push	r15
    c272:	0f 93       	push	r16
    c274:	1f 93       	push	r17
    c276:	df 93       	push	r29
    c278:	cf 93       	push	r28
    c27a:	0f 92       	push	r0
    c27c:	cd b7       	in	r28, 0x3d	; 61
    c27e:	de b7       	in	r29, 0x3e	; 62
     char i,xA,xB;                //Dest  :  12345678 
	 char xRaw=0;
	 for (i=0;i<6;i++){
    c280:	48 2f       	mov	r20, r24
    c282:	59 2f       	mov	r21, r25
    c284:	6a 01       	movw	r12, r20
    c286:	06 2f       	mov	r16, r22
    c288:	17 2f       	mov	r17, r23
    c28a:	90 e0       	ldi	r25, 0x00	; 0
	      xA=Ord(Source[(2*i)]);
    c28c:	f6 01       	movw	r30, r12
    c28e:	80 81       	ld	r24, Z
    c290:	99 83       	std	Y+1, r25	; 0x01
    c292:	0e 94 30 61 	call	0xc260	; 0xc260 <Ord>
    c296:	f8 2e       	mov	r15, r24
		  xB=(0x0F&Ord(Source[(2*i)+1]));
    c298:	f6 01       	movw	r30, r12
    c29a:	81 81       	ldd	r24, Z+1	; 0x01
    c29c:	0e 94 30 61 	call	0xc260	; 0xc260 <Ord>
	      xRaw=((xA<<4) | xB);
    c2a0:	f2 94       	swap	r15
    c2a2:	e0 ef       	ldi	r30, 0xF0	; 240
    c2a4:	fe 22       	and	r15, r30
void StrToRaw(char *Source,char *Dest){//Source: "1234567890AB"
     char i,xA,xB;                //Dest  :  12345678 
	 char xRaw=0;
	 for (i=0;i<6;i++){
	      xA=Ord(Source[(2*i)]);
		  xB=(0x0F&Ord(Source[(2*i)+1]));
    c2a6:	8f 70       	andi	r24, 0x0F	; 15
	      xRaw=((xA<<4) | xB);
    c2a8:	f8 2a       	or	r15, r24
	      Dest[i]=xRaw;
    c2aa:	f8 01       	movw	r30, r16
    c2ac:	f1 92       	st	Z+, r15
    c2ae:	8f 01       	movw	r16, r30
}
                                       //12byte->6Byte         0 1 2 3  
void StrToRaw(char *Source,char *Dest){//Source: "1234567890AB"
     char i,xA,xB;                //Dest  :  12345678 
	 char xRaw=0;
	 for (i=0;i<6;i++){
    c2b0:	99 81       	ldd	r25, Y+1	; 0x01
    c2b2:	9f 5f       	subi	r25, 0xFF	; 255
    c2b4:	72 e0       	ldi	r23, 0x02	; 2
    c2b6:	e7 2e       	mov	r14, r23
    c2b8:	f1 2c       	mov	r15, r1
    c2ba:	ce 0c       	add	r12, r14
    c2bc:	df 1c       	adc	r13, r15
    c2be:	96 30       	cpi	r25, 0x06	; 6
    c2c0:	29 f7       	brne	.-54     	; 0xc28c <StrToRaw+0x22>
	      xA=Ord(Source[(2*i)]);
		  xB=(0x0F&Ord(Source[(2*i)+1]));
	      xRaw=((xA<<4) | xB);
	      Dest[i]=xRaw;
	 }	      
}
    c2c2:	0f 90       	pop	r0
    c2c4:	cf 91       	pop	r28
    c2c6:	df 91       	pop	r29
    c2c8:	1f 91       	pop	r17
    c2ca:	0f 91       	pop	r16
    c2cc:	ff 90       	pop	r15
    c2ce:	ef 90       	pop	r14
    c2d0:	df 90       	pop	r13
    c2d2:	cf 90       	pop	r12
    c2d4:	08 95       	ret

0000c2d6 <SetTotalizerData>:
			  }
		  }
	 }
}

void SetTotalizerData(char TType, char TAddr, char xPumpAddr, char xGradeAddr, char *strValue){// 0 1 1 "00000000"
    c2d6:	9f 92       	push	r9
    c2d8:	af 92       	push	r10
    c2da:	bf 92       	push	r11
    c2dc:	cf 92       	push	r12
    c2de:	df 92       	push	r13
    c2e0:	ef 92       	push	r14
    c2e2:	ff 92       	push	r15
    c2e4:	0f 93       	push	r16
    c2e6:	1f 93       	push	r17
    c2e8:	df 93       	push	r29
    c2ea:	cf 93       	push	r28
    c2ec:	cd b7       	in	r28, 0x3d	; 61
    c2ee:	de b7       	in	r29, 0x3e	; 62
    c2f0:	66 97       	sbiw	r28, 0x16	; 22
    c2f2:	0f b6       	in	r0, 0x3f	; 63
    c2f4:	f8 94       	cli
    c2f6:	de bf       	out	0x3e, r29	; 62
    c2f8:	0f be       	out	0x3f, r0	; 63
    c2fa:	cd bf       	out	0x3d, r28	; 61
    c2fc:	f8 2e       	mov	r15, r24
    c2fe:	e6 2e       	mov	r14, r22
    c300:	c4 2e       	mov	r12, r20
    c302:	92 2e       	mov	r9, r18
    c304:	c8 01       	movw	r24, r16
     char rawValue[6],iPumpAddr,iGrade;
	 char strPValue[15];
	 char Idx;
	 char strSend[30];
	 //Convert String to RawData
	 if (strlen(strValue)<=12){
    c306:	f8 01       	movw	r30, r16
    c308:	01 90       	ld	r0, Z+
    c30a:	00 20       	and	r0, r0
    c30c:	e9 f7       	brne	.-6      	; 0xc308 <SetTotalizerData+0x32>
    c30e:	31 97       	sbiw	r30, 0x01	; 1
    c310:	e0 1b       	sub	r30, r16
    c312:	f1 0b       	sbc	r31, r17
    c314:	a7 e0       	ldi	r26, 0x07	; 7
    c316:	aa 2e       	mov	r10, r26
    c318:	b1 2c       	mov	r11, r1
    c31a:	ac 0e       	add	r10, r28
    c31c:	bd 1e       	adc	r11, r29
    c31e:	ed 30       	cpi	r30, 0x0D	; 13
    c320:	f1 05       	cpc	r31, r1
    c322:	58 f5       	brcc	.+86     	; 0xc37a <SetTotalizerData+0xa4>
	     sprintf_P(strPValue,PSTR("%s"),strValue);
    c324:	00 d0       	rcall	.+0      	; 0xc326 <SetTotalizerData+0x50>
    c326:	00 d0       	rcall	.+0      	; 0xc328 <SetTotalizerData+0x52>
    c328:	00 d0       	rcall	.+0      	; 0xc32a <SetTotalizerData+0x54>
    c32a:	ed b7       	in	r30, 0x3d	; 61
    c32c:	fe b7       	in	r31, 0x3e	; 62
    c32e:	31 96       	adiw	r30, 0x01	; 1
    c330:	ad b7       	in	r26, 0x3d	; 61
    c332:	be b7       	in	r27, 0x3e	; 62
    c334:	12 96       	adiw	r26, 0x02	; 2
    c336:	bc 92       	st	X, r11
    c338:	ae 92       	st	-X, r10
    c33a:	11 97       	sbiw	r26, 0x01	; 1
    c33c:	22 ee       	ldi	r18, 0xE2	; 226
    c33e:	36 e0       	ldi	r19, 0x06	; 6
    c340:	33 83       	std	Z+3, r19	; 0x03
    c342:	22 83       	std	Z+2, r18	; 0x02
    c344:	04 83       	std	Z+4, r16	; 0x04
    c346:	95 83       	std	Z+5, r25	; 0x05
    c348:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		 if (strlen(strPValue)<12)AddZeroLead(strPValue,12);
    c34c:	f5 01       	movw	r30, r10
    c34e:	01 90       	ld	r0, Z+
    c350:	00 20       	and	r0, r0
    c352:	e9 f7       	brne	.-6      	; 0xc34e <SetTotalizerData+0x78>
    c354:	31 97       	sbiw	r30, 0x01	; 1
    c356:	ea 19       	sub	r30, r10
    c358:	fb 09       	sbc	r31, r11
    c35a:	8d b7       	in	r24, 0x3d	; 61
    c35c:	9e b7       	in	r25, 0x3e	; 62
    c35e:	06 96       	adiw	r24, 0x06	; 6
    c360:	0f b6       	in	r0, 0x3f	; 63
    c362:	f8 94       	cli
    c364:	9e bf       	out	0x3e, r25	; 62
    c366:	0f be       	out	0x3f, r0	; 63
    c368:	8d bf       	out	0x3d, r24	; 61
    c36a:	ec 30       	cpi	r30, 0x0C	; 12
    c36c:	f1 05       	cpc	r31, r1
    c36e:	68 f4       	brcc	.+26     	; 0xc38a <SetTotalizerData+0xb4>
    c370:	c5 01       	movw	r24, r10
    c372:	6c e0       	ldi	r22, 0x0C	; 12
    c374:	0e 94 c0 2b 	call	0x5780	; 0x5780 <AddZeroLead>
    c378:	08 c0       	rjmp	.+16     	; 0xc38a <SetTotalizerData+0xb4>
	 }
	 else {//Lebih dari 8: 0123456789
	     Idx=strlen(strValue)-12;
    c37a:	4e 2f       	mov	r20, r30
    c37c:	4c 50       	subi	r20, 0x0C	; 12
	     StrPosCopy(strValue,strPValue,Idx,12);
    c37e:	b5 01       	movw	r22, r10
    c380:	50 e0       	ldi	r21, 0x00	; 0
    c382:	2c e0       	ldi	r18, 0x0C	; 12
    c384:	30 e0       	ldi	r19, 0x00	; 0
    c386:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
	 }

	 iPumpAddr=(xPumpAddr&0x0F);
    c38a:	2c 2d       	mov	r18, r12
    c38c:	2f 70       	andi	r18, 0x0F	; 15
	 if ((xGradeAddr>=1)&&(xGradeAddr<=6))
    c38e:	89 2d       	mov	r24, r9
    c390:	81 50       	subi	r24, 0x01	; 1
    c392:	86 30       	cpi	r24, 0x06	; 6
    c394:	08 f4       	brcc	.+2      	; 0xc398 <SetTotalizerData+0xc2>
    c396:	d8 2e       	mov	r13, r24
	     iGrade=xGradeAddr-1;
	 StrToRaw(strPValue,rawValue);
    c398:	ce 01       	movw	r24, r28
    c39a:	07 96       	adiw	r24, 0x07	; 7
    c39c:	8e 01       	movw	r16, r28
    c39e:	0f 5f       	subi	r16, 0xFF	; 255
    c3a0:	1f 4f       	sbci	r17, 0xFF	; 255
    c3a2:	b8 01       	movw	r22, r16
    c3a4:	2e 8b       	std	Y+22, r18	; 0x16
    c3a6:	0e 94 35 61 	call	0xc26a	; 0xc26a <StrToRaw>

	 if (TType==TVOLUME)eeprom_write_block((const void*)&rawValue,(void*)&(TotalVolume[TAddr][iPumpAddr][iGrade]), sizeof(rawValue));
    c3aa:	2e 89       	ldd	r18, Y+22	; 0x16
    c3ac:	ff 20       	and	r15, r15
    c3ae:	d1 f4       	brne	.+52     	; 0xc3e4 <SetTotalizerData+0x10e>
    c3b0:	64 e2       	ldi	r22, 0x24	; 36
    c3b2:	26 9f       	mul	r18, r22
    c3b4:	b0 01       	movw	r22, r0
    c3b6:	11 24       	eor	r1, r1
    c3b8:	ff 24       	eor	r15, r15
    c3ba:	20 e2       	ldi	r18, 0x20	; 32
    c3bc:	31 e0       	ldi	r19, 0x01	; 1
    c3be:	e2 9e       	mul	r14, r18
    c3c0:	c0 01       	movw	r24, r0
    c3c2:	e3 9e       	mul	r14, r19
    c3c4:	90 0d       	add	r25, r0
    c3c6:	f2 9e       	mul	r15, r18
    c3c8:	90 0d       	add	r25, r0
    c3ca:	11 24       	eor	r1, r1
    c3cc:	68 0f       	add	r22, r24
    c3ce:	79 1f       	adc	r23, r25
    c3d0:	86 e0       	ldi	r24, 0x06	; 6
    c3d2:	ad 2d       	mov	r26, r13
    c3d4:	a8 9f       	mul	r26, r24
    c3d6:	c0 01       	movw	r24, r0
    c3d8:	11 24       	eor	r1, r1
    c3da:	68 0f       	add	r22, r24
    c3dc:	79 1f       	adc	r23, r25
    c3de:	6c 53       	subi	r22, 0x3C	; 60
    c3e0:	7c 4f       	sbci	r23, 0xFC	; 252
    c3e2:	1c c0       	rjmp	.+56     	; 0xc41c <SetTotalizerData+0x146>
	 else 
	 if (TType==TMONEY)eeprom_write_block((const void*)&rawValue,(void*)&(TotalMoney[TAddr][iPumpAddr][iGrade]), sizeof(rawValue));
    c3e4:	bf 2d       	mov	r27, r15
    c3e6:	b1 30       	cpi	r27, 0x01	; 1
    c3e8:	f1 f4       	brne	.+60     	; 0xc426 <SetTotalizerData+0x150>
    c3ea:	64 e2       	ldi	r22, 0x24	; 36
    c3ec:	26 9f       	mul	r18, r22
    c3ee:	b0 01       	movw	r22, r0
    c3f0:	11 24       	eor	r1, r1
    c3f2:	ff 24       	eor	r15, r15
    c3f4:	20 e2       	ldi	r18, 0x20	; 32
    c3f6:	31 e0       	ldi	r19, 0x01	; 1
    c3f8:	e2 9e       	mul	r14, r18
    c3fa:	c0 01       	movw	r24, r0
    c3fc:	e3 9e       	mul	r14, r19
    c3fe:	90 0d       	add	r25, r0
    c400:	f2 9e       	mul	r15, r18
    c402:	90 0d       	add	r25, r0
    c404:	11 24       	eor	r1, r1
    c406:	68 0f       	add	r22, r24
    c408:	79 1f       	adc	r23, r25
    c40a:	86 e0       	ldi	r24, 0x06	; 6
    c40c:	2d 2d       	mov	r18, r13
    c40e:	28 9f       	mul	r18, r24
    c410:	c0 01       	movw	r24, r0
    c412:	11 24       	eor	r1, r1
    c414:	68 0f       	add	r22, r24
    c416:	79 1f       	adc	r23, r25
    c418:	6c 5f       	subi	r22, 0xFC	; 252
    c41a:	79 4f       	sbci	r23, 0xF9	; 249
    c41c:	c8 01       	movw	r24, r16
    c41e:	46 e0       	ldi	r20, 0x06	; 6
    c420:	50 e0       	ldi	r21, 0x00	; 0
    c422:	0e 94 6e aa 	call	0x154dc	; 0x154dc <__eewr_block_m128>
}
    c426:	66 96       	adiw	r28, 0x16	; 22
    c428:	0f b6       	in	r0, 0x3f	; 63
    c42a:	f8 94       	cli
    c42c:	de bf       	out	0x3e, r29	; 62
    c42e:	0f be       	out	0x3f, r0	; 63
    c430:	cd bf       	out	0x3d, r28	; 61
    c432:	cf 91       	pop	r28
    c434:	df 91       	pop	r29
    c436:	1f 91       	pop	r17
    c438:	0f 91       	pop	r16
    c43a:	ff 90       	pop	r15
    c43c:	ef 90       	pop	r14
    c43e:	df 90       	pop	r13
    c440:	cf 90       	pop	r12
    c442:	bf 90       	pop	r11
    c444:	af 90       	pop	r10
    c446:	9f 90       	pop	r9
    c448:	08 95       	ret

0000c44a <SaveConfigParameter>:
     char Result;
	 Result=False;
   return Result;
}

void SaveConfigParameter(){
    c44a:	7f 92       	push	r7
    c44c:	8f 92       	push	r8
    c44e:	9f 92       	push	r9
    c450:	af 92       	push	r10
    c452:	bf 92       	push	r11
    c454:	cf 92       	push	r12
    c456:	df 92       	push	r13
    c458:	ef 92       	push	r14
    c45a:	ff 92       	push	r15
    c45c:	0f 93       	push	r16
    c45e:	1f 93       	push	r17
    c460:	df 93       	push	r29
    c462:	cf 93       	push	r28
    c464:	cd b7       	in	r28, 0x3d	; 61
    c466:	de b7       	in	r29, 0x3e	; 62
    c468:	c7 54       	subi	r28, 0x47	; 71
    c46a:	d0 40       	sbci	r29, 0x00	; 0
    c46c:	0f b6       	in	r0, 0x3f	; 63
    c46e:	f8 94       	cli
    c470:	de bf       	out	0x3e, r29	; 62
    c472:	0f be       	out	0x3f, r0	; 63
    c474:	cd bf       	out	0x3d, r28	; 61
char i,j;
char strEEPROM[50],xEEPROM;
unsigned int StrPos;
char strSend[20];
     
	 sprintf_P(strSend,PSTR("Length:%d"),transLength);
    c476:	00 d0       	rcall	.+0      	; 0xc478 <SaveConfigParameter+0x2e>
    c478:	00 d0       	rcall	.+0      	; 0xc47a <SaveConfigParameter+0x30>
    c47a:	00 d0       	rcall	.+0      	; 0xc47c <SaveConfigParameter+0x32>
    c47c:	ed b7       	in	r30, 0x3d	; 61
    c47e:	fe b7       	in	r31, 0x3e	; 62
    c480:	31 96       	adiw	r30, 0x01	; 1
    c482:	8e 01       	movw	r16, r28
    c484:	0f 5f       	subi	r16, 0xFF	; 255
    c486:	1f 4f       	sbci	r17, 0xFF	; 255
    c488:	ad b7       	in	r26, 0x3d	; 61
    c48a:	be b7       	in	r27, 0x3e	; 62
    c48c:	12 96       	adiw	r26, 0x02	; 2
    c48e:	1c 93       	st	X, r17
    c490:	0e 93       	st	-X, r16
    c492:	11 97       	sbiw	r26, 0x01	; 1
    c494:	86 ed       	ldi	r24, 0xD6	; 214
    c496:	93 e2       	ldi	r25, 0x23	; 35
    c498:	93 83       	std	Z+3, r25	; 0x03
    c49a:	82 83       	std	Z+2, r24	; 0x02
    c49c:	80 91 69 02 	lds	r24, 0x0269
    c4a0:	90 91 6a 02 	lds	r25, 0x026A
    c4a4:	95 83       	std	Z+5, r25	; 0x05
    c4a6:	84 83       	std	Z+4, r24	; 0x04
    c4a8:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	 uart_print(1,1,strSend);
    c4ac:	ed b7       	in	r30, 0x3d	; 61
    c4ae:	fe b7       	in	r31, 0x3e	; 62
    c4b0:	36 96       	adiw	r30, 0x06	; 6
    c4b2:	0f b6       	in	r0, 0x3f	; 63
    c4b4:	f8 94       	cli
    c4b6:	fe bf       	out	0x3e, r31	; 62
    c4b8:	0f be       	out	0x3f, r0	; 63
    c4ba:	ed bf       	out	0x3d, r30	; 61
    c4bc:	81 e0       	ldi	r24, 0x01	; 1
    c4be:	61 e0       	ldi	r22, 0x01	; 1
    c4c0:	a8 01       	movw	r20, r16
    c4c2:	0e 94 03 a6 	call	0x14c06	; 0x14c06 <uart_print>

     StrPos=0;
	 uart_printf(1,1,PSTR("<Saving>")); 
    c4c6:	81 e0       	ldi	r24, 0x01	; 1
    c4c8:	61 e0       	ldi	r22, 0x01	; 1
    c4ca:	4d ec       	ldi	r20, 0xCD	; 205
    c4cc:	53 e2       	ldi	r21, 0x23	; 35
    c4ce:	0e 94 2c a6 	call	0x14c58	; 0x14c58 <uart_printf>
    c4d2:	b8 e2       	ldi	r27, 0x28	; 40
    c4d4:	eb 2e       	mov	r14, r27
    c4d6:	b2 e0       	ldi	r27, 0x02	; 2
    c4d8:	fb 2e       	mov	r15, r27
    c4da:	00 e0       	ldi	r16, 0x00	; 0
    c4dc:	10 e0       	ldi	r17, 0x00	; 0
     //HeaderFooter
	 for(i=0;i<10;i++){
         FillChar(strEEPROM,0,sizeof(strEEPROM));   
    c4de:	a5 e1       	ldi	r26, 0x15	; 21
    c4e0:	ca 2e       	mov	r12, r26
    c4e2:	d1 2c       	mov	r13, r1
    c4e4:	cc 0e       	add	r12, r28
    c4e6:	dd 1e       	adc	r13, r29
    c4e8:	c6 01       	movw	r24, r12
    c4ea:	60 e0       	ldi	r22, 0x00	; 0
    c4ec:	70 e0       	ldi	r23, 0x00	; 0
    c4ee:	42 e3       	ldi	r20, 0x32	; 50
    c4f0:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>
		 StrPosCopy(rcv_trans,strEEPROM,(StrPos+(40*i)),40);
    c4f4:	81 e0       	ldi	r24, 0x01	; 1
    c4f6:	9a e0       	ldi	r25, 0x0A	; 10
    c4f8:	b6 01       	movw	r22, r12
    c4fa:	a8 01       	movw	r20, r16
    c4fc:	28 e2       	ldi	r18, 0x28	; 40
    c4fe:	30 e0       	ldi	r19, 0x00	; 0
    c500:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
		 strEEPROM[40]=0;
    c504:	1d ae       	std	Y+61, r1	; 0x3d
		 eeprom_write_block((const void*) &strEEPROM, (void*) &DefHeaderFooter[i],41);
    c506:	c6 01       	movw	r24, r12
    c508:	b7 01       	movw	r22, r14
    c50a:	49 e2       	ldi	r20, 0x29	; 41
    c50c:	50 e0       	ldi	r21, 0x00	; 0
    c50e:	0e 94 6e aa 	call	0x154dc	; 0x154dc <__eewr_block_m128>
    c512:	08 5d       	subi	r16, 0xD8	; 216
    c514:	1f 4f       	sbci	r17, 0xFF	; 255
    c516:	89 e2       	ldi	r24, 0x29	; 41
    c518:	90 e0       	ldi	r25, 0x00	; 0
    c51a:	e8 0e       	add	r14, r24
    c51c:	f9 1e       	adc	r15, r25
	 uart_print(1,1,strSend);

     StrPos=0;
	 uart_printf(1,1,PSTR("<Saving>")); 
     //HeaderFooter
	 for(i=0;i<10;i++){
    c51e:	91 e0       	ldi	r25, 0x01	; 1
    c520:	00 39       	cpi	r16, 0x90	; 144
    c522:	19 07       	cpc	r17, r25
    c524:	09 f7       	brne	.-62     	; 0xc4e8 <SaveConfigParameter+0x9e>
    c526:	fc eb       	ldi	r31, 0xBC	; 188
    c528:	cf 2e       	mov	r12, r31
    c52a:	f0 e0       	ldi	r31, 0x00	; 0
    c52c:	df 2e       	mov	r13, r31
    c52e:	e0 e9       	ldi	r30, 0x90	; 144
    c530:	ee 2e       	mov	r14, r30
    c532:	e1 e0       	ldi	r30, 0x01	; 1
    c534:	fe 2e       	mov	r15, r30
		 //uart_print(1,1,strEEPROM);
	 }
	 //ProductName
	 StrPos=(40*10);
	 for(i=0;i<6;i++){
         FillChar(strEEPROM,0,sizeof(strEEPROM));   
    c536:	8e 01       	movw	r16, r28
    c538:	0b 5e       	subi	r16, 0xEB	; 235
    c53a:	1f 4f       	sbci	r17, 0xFF	; 255
    c53c:	c8 01       	movw	r24, r16
    c53e:	60 e0       	ldi	r22, 0x00	; 0
    c540:	70 e0       	ldi	r23, 0x00	; 0
    c542:	42 e3       	ldi	r20, 0x32	; 50
    c544:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>
		 StrPosCopy(rcv_trans,strEEPROM,(StrPos+(12*i)),12);
    c548:	81 e0       	ldi	r24, 0x01	; 1
    c54a:	9a e0       	ldi	r25, 0x0A	; 10
    c54c:	b8 01       	movw	r22, r16
    c54e:	a7 01       	movw	r20, r14
    c550:	2c e0       	ldi	r18, 0x0C	; 12
    c552:	30 e0       	ldi	r19, 0x00	; 0
    c554:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
		 RemSpaceLag(strEEPROM);
    c558:	c8 01       	movw	r24, r16
    c55a:	0e 94 f7 38 	call	0x71ee	; 0x71ee <RemSpaceLag>
		 strEEPROM[strlen(strEEPROM)]=0;
    c55e:	f8 01       	movw	r30, r16
    c560:	01 90       	ld	r0, Z+
    c562:	00 20       	and	r0, r0
    c564:	e9 f7       	brne	.-6      	; 0xc560 <SaveConfigParameter+0x116>
    c566:	31 97       	sbiw	r30, 0x01	; 1
    c568:	10 82       	st	Z, r1
		 eeprom_write_block((const void*) &strEEPROM, (void*) &DefProductName[i],sizeof(DefProductName[i]));
    c56a:	c8 01       	movw	r24, r16
    c56c:	b6 01       	movw	r22, r12
    c56e:	4d e0       	ldi	r20, 0x0D	; 13
    c570:	50 e0       	ldi	r21, 0x00	; 0
    c572:	0e 94 6e aa 	call	0x154dc	; 0x154dc <__eewr_block_m128>
    c576:	ac e0       	ldi	r26, 0x0C	; 12
    c578:	b0 e0       	ldi	r27, 0x00	; 0
    c57a:	ea 0e       	add	r14, r26
    c57c:	fb 1e       	adc	r15, r27
    c57e:	ed e0       	ldi	r30, 0x0D	; 13
    c580:	f0 e0       	ldi	r31, 0x00	; 0
    c582:	ce 0e       	add	r12, r30
    c584:	df 1e       	adc	r13, r31
		 eeprom_write_block((const void*) &strEEPROM, (void*) &DefHeaderFooter[i],41);
		 //uart_print(1,1,strEEPROM);
	 }
	 //ProductName
	 StrPos=(40*10);
	 for(i=0;i<6;i++){
    c586:	f8 ed       	ldi	r31, 0xD8	; 216
    c588:	ef 16       	cp	r14, r31
    c58a:	f1 e0       	ldi	r31, 0x01	; 1
    c58c:	ff 06       	cpc	r15, r31
    c58e:	b1 f6       	brne	.-84     	; 0xc53c <SaveConfigParameter+0xf2>
    c590:	76 e8       	ldi	r23, 0x86	; 134
    c592:	c7 2e       	mov	r12, r23
    c594:	70 e0       	ldi	r23, 0x00	; 0
    c596:	d7 2e       	mov	r13, r23
    c598:	08 ed       	ldi	r16, 0xD8	; 216
    c59a:	11 e0       	ldi	r17, 0x01	; 1

	 }    
	 //ProductPrice
	 StrPos=(40*10)+(12*6);
	 for(i=0;i<6;i++){
         FillChar(strEEPROM,0,sizeof(strEEPROM));   
    c59c:	65 e1       	ldi	r22, 0x15	; 21
    c59e:	e6 2e       	mov	r14, r22
    c5a0:	f1 2c       	mov	r15, r1
    c5a2:	ec 0e       	add	r14, r28
    c5a4:	fd 1e       	adc	r15, r29
    c5a6:	c7 01       	movw	r24, r14
    c5a8:	60 e0       	ldi	r22, 0x00	; 0
    c5aa:	70 e0       	ldi	r23, 0x00	; 0
    c5ac:	42 e3       	ldi	r20, 0x32	; 50
    c5ae:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>
		 StrPosCopy(rcv_trans,strEEPROM,(StrPos+(5*i)),5);
    c5b2:	81 e0       	ldi	r24, 0x01	; 1
    c5b4:	9a e0       	ldi	r25, 0x0A	; 10
    c5b6:	b7 01       	movw	r22, r14
    c5b8:	a8 01       	movw	r20, r16
    c5ba:	25 e0       	ldi	r18, 0x05	; 5
    c5bc:	30 e0       	ldi	r19, 0x00	; 0
    c5be:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
		 RemSpaceLag(strEEPROM);
    c5c2:	c7 01       	movw	r24, r14
    c5c4:	0e 94 f7 38 	call	0x71ee	; 0x71ee <RemSpaceLag>
		 eeprom_write_block((const void*) &strEEPROM, (void*) &DefProductPrice[i],sizeof(DefProductPrice[i]));
    c5c8:	c7 01       	movw	r24, r14
    c5ca:	b6 01       	movw	r22, r12
    c5cc:	49 e0       	ldi	r20, 0x09	; 9
    c5ce:	50 e0       	ldi	r21, 0x00	; 0
    c5d0:	0e 94 6e aa 	call	0x154dc	; 0x154dc <__eewr_block_m128>
    c5d4:	0b 5f       	subi	r16, 0xFB	; 251
    c5d6:	1f 4f       	sbci	r17, 0xFF	; 255
    c5d8:	89 e0       	ldi	r24, 0x09	; 9
    c5da:	90 e0       	ldi	r25, 0x00	; 0
    c5dc:	c8 0e       	add	r12, r24
    c5de:	d9 1e       	adc	r13, r25
		// uart_print(1,1,strEEPROM);

	 }    
	 //ProductPrice
	 StrPos=(40*10)+(12*6);
	 for(i=0;i<6;i++){
    c5e0:	91 e0       	ldi	r25, 0x01	; 1
    c5e2:	06 3f       	cpi	r16, 0xF6	; 246
    c5e4:	19 07       	cpc	r17, r25
    c5e6:	f9 f6       	brne	.-66     	; 0xc5a6 <SaveConfigParameter+0x15c>
    c5e8:	56 ef       	ldi	r21, 0xF6	; 246
    c5ea:	c5 2e       	mov	r12, r21
    c5ec:	51 e0       	ldi	r21, 0x01	; 1
    c5ee:	d5 2e       	mov	r13, r21
    c5f0:	00 e0       	ldi	r16, 0x00	; 0
    c5f2:	10 e0       	ldi	r17, 0x00	; 0

	 }    
	 //PumpID Config
	 StrPos=(40*10)+(12*6)+(5*6);
	 for(i=0;i<8;i++){
         FillChar(strEEPROM,0,sizeof(strEEPROM));   
    c5f4:	45 e1       	ldi	r20, 0x15	; 21
    c5f6:	e4 2e       	mov	r14, r20
    c5f8:	f1 2c       	mov	r15, r1
    c5fa:	ec 0e       	add	r14, r28
    c5fc:	fd 1e       	adc	r15, r29
		 StrPosCopy(rcv_trans,strEEPROM,(StrPos+(2*i)),2);
		 RemZeroLead(strEEPROM);
		 xEEPROM=atoi(strEEPROM);
         eeprom_write_byte(&DefPumpMap[i],xEEPROM);
		 sprintf_P(strSend,PSTR("%d"),xEEPROM);
    c5fe:	5e 01       	movw	r10, r28
    c600:	08 94       	sec
    c602:	a1 1c       	adc	r10, r1
    c604:	b1 1c       	adc	r11, r1
    c606:	3a ec       	ldi	r19, 0xCA	; 202
    c608:	83 2e       	mov	r8, r19
    c60a:	33 e2       	ldi	r19, 0x23	; 35
    c60c:	93 2e       	mov	r9, r19

	 }    
	 //PumpID Config
	 StrPos=(40*10)+(12*6)+(5*6);
	 for(i=0;i<8;i++){
         FillChar(strEEPROM,0,sizeof(strEEPROM));   
    c60e:	c7 01       	movw	r24, r14
    c610:	60 e0       	ldi	r22, 0x00	; 0
    c612:	70 e0       	ldi	r23, 0x00	; 0
    c614:	42 e3       	ldi	r20, 0x32	; 50
    c616:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>
		 StrPosCopy(rcv_trans,strEEPROM,(StrPos+(2*i)),2);
    c61a:	81 e0       	ldi	r24, 0x01	; 1
    c61c:	9a e0       	ldi	r25, 0x0A	; 10
    c61e:	b7 01       	movw	r22, r14
    c620:	a6 01       	movw	r20, r12
    c622:	22 e0       	ldi	r18, 0x02	; 2
    c624:	30 e0       	ldi	r19, 0x00	; 0
    c626:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
		 RemZeroLead(strEEPROM);
    c62a:	c7 01       	movw	r24, r14
    c62c:	0e 94 93 39 	call	0x7326	; 0x7326 <RemZeroLead>
		 xEEPROM=atoi(strEEPROM);
    c630:	c7 01       	movw	r24, r14
    c632:	0e 94 e0 a7 	call	0x14fc0	; 0x14fc0 <atoi>
    c636:	78 2e       	mov	r7, r24
         eeprom_write_byte(&DefPumpMap[i],xEEPROM);
    c638:	c8 01       	movw	r24, r16
    c63a:	8a 5b       	subi	r24, 0xBA	; 186
    c63c:	9f 4f       	sbci	r25, 0xFF	; 255
    c63e:	67 2d       	mov	r22, r7
    c640:	0e 94 78 aa 	call	0x154f0	; 0x154f0 <__eewr_byte_m128>
		 sprintf_P(strSend,PSTR("%d"),xEEPROM);
    c644:	00 d0       	rcall	.+0      	; 0xc646 <SaveConfigParameter+0x1fc>
    c646:	00 d0       	rcall	.+0      	; 0xc648 <SaveConfigParameter+0x1fe>
    c648:	00 d0       	rcall	.+0      	; 0xc64a <SaveConfigParameter+0x200>
    c64a:	ed b7       	in	r30, 0x3d	; 61
    c64c:	fe b7       	in	r31, 0x3e	; 62
    c64e:	31 96       	adiw	r30, 0x01	; 1
    c650:	ad b7       	in	r26, 0x3d	; 61
    c652:	be b7       	in	r27, 0x3e	; 62
    c654:	12 96       	adiw	r26, 0x02	; 2
    c656:	bc 92       	st	X, r11
    c658:	ae 92       	st	-X, r10
    c65a:	11 97       	sbiw	r26, 0x01	; 1
    c65c:	93 82       	std	Z+3, r9	; 0x03
    c65e:	82 82       	std	Z+2, r8	; 0x02
    c660:	74 82       	std	Z+4, r7	; 0x04
    c662:	15 82       	std	Z+5, r1	; 0x05
    c664:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    c668:	0f 5f       	subi	r16, 0xFF	; 255
    c66a:	1f 4f       	sbci	r17, 0xFF	; 255
    c66c:	e2 e0       	ldi	r30, 0x02	; 2
    c66e:	f0 e0       	ldi	r31, 0x00	; 0
    c670:	ce 0e       	add	r12, r30
    c672:	df 1e       	adc	r13, r31
		// uart_print(1,1,strEEPROM);

	 }    
	 //PumpID Config
	 StrPos=(40*10)+(12*6)+(5*6);
	 for(i=0;i<8;i++){
    c674:	8d b7       	in	r24, 0x3d	; 61
    c676:	9e b7       	in	r25, 0x3e	; 62
    c678:	06 96       	adiw	r24, 0x06	; 6
    c67a:	0f b6       	in	r0, 0x3f	; 63
    c67c:	f8 94       	cli
    c67e:	9e bf       	out	0x3e, r25	; 62
    c680:	0f be       	out	0x3f, r0	; 63
    c682:	8d bf       	out	0x3d, r24	; 61
    c684:	08 30       	cpi	r16, 0x08	; 8
    c686:	11 05       	cpc	r17, r1
    c688:	11 f6       	brne	.-124    	; 0xc60e <SaveConfigParameter+0x1c4>
    c68a:	06 e0       	ldi	r16, 0x06	; 6
    c68c:	12 e0       	ldi	r17, 0x02	; 2
    c68e:	1b c0       	rjmp	.+54     	; 0xc6c6 <SaveConfigParameter+0x27c>
	 }    
	 //PumpNozzle
	 StrPos=(40*10)+(12*6)+(5*6)+(2*8);
	 for (i=0;i<8;i++){
	     for (j=0;j<6;j++){
              xEEPROM=Ord(CharPosCopy(rcv_trans,StrPos+(i*6+j)));
    c690:	d6 01       	movw	r26, r12
    c692:	8d 91       	ld	r24, X+
    c694:	6d 01       	movw	r12, r26
    c696:	28 96       	adiw	r28, 0x08	; 8
    c698:	2f af       	std	Y+63, r18	; 0x3f
    c69a:	28 97       	sbiw	r28, 0x08	; 8
    c69c:	0e 94 30 61 	call	0xc260	; 0xc260 <Ord>
    c6a0:	68 2f       	mov	r22, r24
		      eeprom_write_byte(&DefNozzleMap[i][j],xEEPROM);
    c6a2:	c7 01       	movw	r24, r14
    c6a4:	0e 94 78 aa 	call	0x154f0	; 0x154f0 <__eewr_byte_m128>

	 }    
	 //PumpNozzle
	 StrPos=(40*10)+(12*6)+(5*6)+(2*8);
	 for (i=0;i<8;i++){
	     for (j=0;j<6;j++){
    c6a8:	28 96       	adiw	r28, 0x08	; 8
    c6aa:	2f ad       	ldd	r18, Y+63	; 0x3f
    c6ac:	28 97       	sbiw	r28, 0x08	; 8
    c6ae:	2f 5f       	subi	r18, 0xFF	; 255
    c6b0:	08 94       	sec
    c6b2:	e1 1c       	adc	r14, r1
    c6b4:	f1 1c       	adc	r15, r1
    c6b6:	26 30       	cpi	r18, 0x06	; 6
    c6b8:	59 f7       	brne	.-42     	; 0xc690 <SaveConfigParameter+0x246>
    c6ba:	0a 5f       	subi	r16, 0xFA	; 250
    c6bc:	1f 4f       	sbci	r17, 0xFF	; 255
		// uart_print(1,1,strSend); 

	 }    
	 //PumpNozzle
	 StrPos=(40*10)+(12*6)+(5*6)+(2*8);
	 for (i=0;i<8;i++){
    c6be:	b2 e0       	ldi	r27, 0x02	; 2
    c6c0:	06 33       	cpi	r16, 0x36	; 54
    c6c2:	1b 07       	cpc	r17, r27
    c6c4:	71 f0       	breq	.+28     	; 0xc6e2 <SaveConfigParameter+0x298>
     char Result;
	 Result=False;
   return Result;
}

void SaveConfigParameter(){
    c6c6:	21 e0       	ldi	r18, 0x01	; 1
    c6c8:	c2 2e       	mov	r12, r18
    c6ca:	2a e0       	ldi	r18, 0x0A	; 10
    c6cc:	d2 2e       	mov	r13, r18
    c6ce:	c0 0e       	add	r12, r16
    c6d0:	d1 1e       	adc	r13, r17
		// uart_print(1,1,strSend); 

	 }    
	 //PumpNozzle
	 StrPos=(40*10)+(12*6)+(5*6)+(2*8);
	 for (i=0;i<8;i++){
    c6d2:	90 e5       	ldi	r25, 0x50	; 80
    c6d4:	e9 2e       	mov	r14, r25
    c6d6:	9e ef       	ldi	r25, 0xFE	; 254
    c6d8:	f9 2e       	mov	r15, r25
    c6da:	e0 0e       	add	r14, r16
    c6dc:	f1 1e       	adc	r15, r17
     char Result;
	 Result=False;
   return Result;
}

void SaveConfigParameter(){
    c6de:	20 e0       	ldi	r18, 0x00	; 0
    c6e0:	d7 cf       	rjmp	.-82     	; 0xc690 <SaveConfigParameter+0x246>
       //       uart(1,1,Chr(xEEPROM));
		 }	 
	 }
	 //PrintNoMoney
	 StrPos=(40*10)+(12*6)+(5*6)+(2*8)+(6*8);
	 xEEPROM=Ord(CharPosCopy(rcv_trans,StrPos));
    c6e2:	80 91 37 0c 	lds	r24, 0x0C37
    c6e6:	0e 94 30 61 	call	0xc260	; 0xc260 <Ord>
	 if (xEEPROM==0)xEEPROM=False;
    c6ea:	61 e0       	ldi	r22, 0x01	; 1
    c6ec:	88 23       	and	r24, r24
    c6ee:	09 f4       	brne	.+2      	; 0xc6f2 <SaveConfigParameter+0x2a8>
    c6f0:	60 e0       	ldi	r22, 0x00	; 0
	 else xEEPROM=True;
	 eeprom_write_byte(&DefPrintMoney,xEEPROM);
    c6f2:	82 ec       	ldi	r24, 0xC2	; 194
    c6f4:	93 e0       	ldi	r25, 0x03	; 3
    c6f6:	0e 94 78 aa 	call	0x154f0	; 0x154f0 <__eewr_byte_m128>
//	 uart(1,1,Chr(xEEPROM));

	 //TermID
	 StrPos=(40*10)+(12*6)+(5*6)+(2*8)+(6*8)+1;
     FillChar(strEEPROM,0,sizeof(strEEPROM));   
    c6fa:	8e 01       	movw	r16, r28
    c6fc:	0b 5e       	subi	r16, 0xEB	; 235
    c6fe:	1f 4f       	sbci	r17, 0xFF	; 255
    c700:	c8 01       	movw	r24, r16
    c702:	60 e0       	ldi	r22, 0x00	; 0
    c704:	70 e0       	ldi	r23, 0x00	; 0
    c706:	42 e3       	ldi	r20, 0x32	; 50
    c708:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>
	 StrPosCopy(rcv_trans,strEEPROM,StrPos,2);
    c70c:	81 e0       	ldi	r24, 0x01	; 1
    c70e:	9a e0       	ldi	r25, 0x0A	; 10
    c710:	b8 01       	movw	r22, r16
    c712:	47 e3       	ldi	r20, 0x37	; 55
    c714:	52 e0       	ldi	r21, 0x02	; 2
    c716:	22 e0       	ldi	r18, 0x02	; 2
    c718:	30 e0       	ldi	r19, 0x00	; 0
    c71a:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
	 RemZeroLead(strEEPROM);
    c71e:	c8 01       	movw	r24, r16
    c720:	0e 94 93 39 	call	0x7326	; 0x7326 <RemZeroLead>
	 xEEPROM=atoi(strEEPROM);
    c724:	c8 01       	movw	r24, r16
    c726:	0e 94 e0 a7 	call	0x14fc0	; 0x14fc0 <atoi>
    c72a:	e8 2e       	mov	r14, r24
	 eeprom_write_byte(&DefIFT_ID,xEEPROM);
    c72c:	80 e0       	ldi	r24, 0x00	; 0
    c72e:	90 e0       	ldi	r25, 0x00	; 0
    c730:	6e 2d       	mov	r22, r14
    c732:	0e 94 78 aa 	call	0x154f0	; 0x154f0 <__eewr_byte_m128>
	 sprintf_P(strSend,PSTR("%d"),xEEPROM);
    c736:	00 d0       	rcall	.+0      	; 0xc738 <SaveConfigParameter+0x2ee>
    c738:	00 d0       	rcall	.+0      	; 0xc73a <SaveConfigParameter+0x2f0>
    c73a:	00 d0       	rcall	.+0      	; 0xc73c <SaveConfigParameter+0x2f2>
    c73c:	ed b7       	in	r30, 0x3d	; 61
    c73e:	fe b7       	in	r31, 0x3e	; 62
    c740:	31 96       	adiw	r30, 0x01	; 1
    c742:	5e 01       	movw	r10, r28
    c744:	08 94       	sec
    c746:	a1 1c       	adc	r10, r1
    c748:	b1 1c       	adc	r11, r1
    c74a:	ad b7       	in	r26, 0x3d	; 61
    c74c:	be b7       	in	r27, 0x3e	; 62
    c74e:	12 96       	adiw	r26, 0x02	; 2
    c750:	bc 92       	st	X, r11
    c752:	ae 92       	st	-X, r10
    c754:	11 97       	sbiw	r26, 0x01	; 1
    c756:	27 ec       	ldi	r18, 0xC7	; 199
    c758:	33 e2       	ldi	r19, 0x23	; 35
    c75a:	33 83       	std	Z+3, r19	; 0x03
    c75c:	22 83       	std	Z+2, r18	; 0x02
    c75e:	e4 82       	std	Z+4, r14	; 0x04
    c760:	15 82       	std	Z+5, r1	; 0x05
    c762:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    c766:	ed b7       	in	r30, 0x3d	; 61
    c768:	fe b7       	in	r31, 0x3e	; 62
    c76a:	36 96       	adiw	r30, 0x06	; 6
    c76c:	0f b6       	in	r0, 0x3f	; 63
    c76e:	f8 94       	cli
    c770:	fe bf       	out	0x3e, r31	; 62
    c772:	0f be       	out	0x3f, r0	; 63
    c774:	ed bf       	out	0x3d, r30	; 61
    c776:	89 e3       	ldi	r24, 0x39	; 57
    c778:	88 2e       	mov	r8, r24
    c77a:	82 e0       	ldi	r24, 0x02	; 2
    c77c:	98 2e       	mov	r9, r24
    c77e:	ee 24       	eor	r14, r14
    c780:	ff 24       	eor	r15, r15
//	 uart_print(1,1,strSend); 

	 //PumpLabel
	 StrPos=(40*10)+(12*6)+(5*6)+(2*8)+(6*8)+1+2;
	 for(i=0;i<8;i++){
         FillChar(strEEPROM,0,sizeof(strEEPROM));   
    c782:	c0 2e       	mov	r12, r16
    c784:	01 2f       	mov	r16, r17
		 StrPosCopy(rcv_trans,strEEPROM,(StrPos+(2*i)),2);
		 RemZeroLead(strEEPROM);
		 xEEPROM=atoi(strEEPROM);
         eeprom_write_byte(&DefPumpLabel[i],xEEPROM);
		 sprintf_P(strSend,PSTR("%d"),xEEPROM);
    c786:	1a 2d       	mov	r17, r10
    c788:	db 2c       	mov	r13, r11
    c78a:	b4 ec       	ldi	r27, 0xC4	; 196
    c78c:	ab 2e       	mov	r10, r27
    c78e:	b3 e2       	ldi	r27, 0x23	; 35
    c790:	bb 2e       	mov	r11, r27
//	 uart_print(1,1,strSend); 

	 //PumpLabel
	 StrPos=(40*10)+(12*6)+(5*6)+(2*8)+(6*8)+1+2;
	 for(i=0;i<8;i++){
         FillChar(strEEPROM,0,sizeof(strEEPROM));   
    c792:	8c 2d       	mov	r24, r12
    c794:	90 2f       	mov	r25, r16
    c796:	60 e0       	ldi	r22, 0x00	; 0
    c798:	70 e0       	ldi	r23, 0x00	; 0
    c79a:	42 e3       	ldi	r20, 0x32	; 50
    c79c:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>
		 StrPosCopy(rcv_trans,strEEPROM,(StrPos+(2*i)),2);
    c7a0:	81 e0       	ldi	r24, 0x01	; 1
    c7a2:	9a e0       	ldi	r25, 0x0A	; 10
    c7a4:	6c 2d       	mov	r22, r12
    c7a6:	70 2f       	mov	r23, r16
    c7a8:	a4 01       	movw	r20, r8
    c7aa:	22 e0       	ldi	r18, 0x02	; 2
    c7ac:	30 e0       	ldi	r19, 0x00	; 0
    c7ae:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
		 RemZeroLead(strEEPROM);
    c7b2:	8c 2d       	mov	r24, r12
    c7b4:	90 2f       	mov	r25, r16
    c7b6:	0e 94 93 39 	call	0x7326	; 0x7326 <RemZeroLead>
		 xEEPROM=atoi(strEEPROM);
    c7ba:	8c 2d       	mov	r24, r12
    c7bc:	90 2f       	mov	r25, r16
    c7be:	0e 94 e0 a7 	call	0x14fc0	; 0x14fc0 <atoi>
    c7c2:	78 2e       	mov	r7, r24
         eeprom_write_byte(&DefPumpLabel[i],xEEPROM);
    c7c4:	c7 01       	movw	r24, r14
    c7c6:	82 5b       	subi	r24, 0xB2	; 178
    c7c8:	9f 4f       	sbci	r25, 0xFF	; 255
    c7ca:	67 2d       	mov	r22, r7
    c7cc:	0e 94 78 aa 	call	0x154f0	; 0x154f0 <__eewr_byte_m128>
		 sprintf_P(strSend,PSTR("%d"),xEEPROM);
    c7d0:	00 d0       	rcall	.+0      	; 0xc7d2 <SaveConfigParameter+0x388>
    c7d2:	00 d0       	rcall	.+0      	; 0xc7d4 <SaveConfigParameter+0x38a>
    c7d4:	00 d0       	rcall	.+0      	; 0xc7d6 <SaveConfigParameter+0x38c>
    c7d6:	ed b7       	in	r30, 0x3d	; 61
    c7d8:	fe b7       	in	r31, 0x3e	; 62
    c7da:	31 96       	adiw	r30, 0x01	; 1
    c7dc:	ad b7       	in	r26, 0x3d	; 61
    c7de:	be b7       	in	r27, 0x3e	; 62
    c7e0:	11 96       	adiw	r26, 0x01	; 1
    c7e2:	1c 93       	st	X, r17
    c7e4:	11 97       	sbiw	r26, 0x01	; 1
    c7e6:	12 96       	adiw	r26, 0x02	; 2
    c7e8:	dc 92       	st	X, r13
    c7ea:	b3 82       	std	Z+3, r11	; 0x03
    c7ec:	a2 82       	std	Z+2, r10	; 0x02
    c7ee:	74 82       	std	Z+4, r7	; 0x04
    c7f0:	15 82       	std	Z+5, r1	; 0x05
    c7f2:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    c7f6:	08 94       	sec
    c7f8:	e1 1c       	adc	r14, r1
    c7fa:	f1 1c       	adc	r15, r1
    c7fc:	e2 e0       	ldi	r30, 0x02	; 2
    c7fe:	f0 e0       	ldi	r31, 0x00	; 0
    c800:	8e 0e       	add	r8, r30
    c802:	9f 1e       	adc	r9, r31
	 sprintf_P(strSend,PSTR("%d"),xEEPROM);
//	 uart_print(1,1,strSend); 

	 //PumpLabel
	 StrPos=(40*10)+(12*6)+(5*6)+(2*8)+(6*8)+1+2;
	 for(i=0;i<8;i++){
    c804:	8d b7       	in	r24, 0x3d	; 61
    c806:	9e b7       	in	r25, 0x3e	; 62
    c808:	06 96       	adiw	r24, 0x06	; 6
    c80a:	0f b6       	in	r0, 0x3f	; 63
    c80c:	f8 94       	cli
    c80e:	9e bf       	out	0x3e, r25	; 62
    c810:	0f be       	out	0x3f, r0	; 63
    c812:	8d bf       	out	0x3d, r24	; 61
    c814:	98 e0       	ldi	r25, 0x08	; 8
    c816:	e9 16       	cp	r14, r25
    c818:	f1 04       	cpc	r15, r1
    c81a:	09 f0       	breq	.+2      	; 0xc81e <SaveConfigParameter+0x3d4>
    c81c:	ba cf       	rjmp	.-140    	; 0xc792 <SaveConfigParameter+0x348>
		 xEEPROM=atoi(strEEPROM);
         eeprom_write_byte(&DefPumpLabel[i],xEEPROM);
		 sprintf_P(strSend,PSTR("%d"),xEEPROM);
//		 uart_print(1,1,strSend); 
	 }    
	 uart_printf(1,1,PSTR("<OK>")); 
    c81e:	81 e0       	ldi	r24, 0x01	; 1
    c820:	61 e0       	ldi	r22, 0x01	; 1
    c822:	4f eb       	ldi	r20, 0xBF	; 191
    c824:	53 e2       	ldi	r21, 0x23	; 35
    c826:	0e 94 2c a6 	call	0x14c58	; 0x14c58 <uart_printf>
}
    c82a:	c9 5b       	subi	r28, 0xB9	; 185
    c82c:	df 4f       	sbci	r29, 0xFF	; 255
    c82e:	0f b6       	in	r0, 0x3f	; 63
    c830:	f8 94       	cli
    c832:	de bf       	out	0x3e, r29	; 62
    c834:	0f be       	out	0x3f, r0	; 63
    c836:	cd bf       	out	0x3d, r28	; 61
    c838:	cf 91       	pop	r28
    c83a:	df 91       	pop	r29
    c83c:	1f 91       	pop	r17
    c83e:	0f 91       	pop	r16
    c840:	ff 90       	pop	r15
    c842:	ef 90       	pop	r14
    c844:	df 90       	pop	r13
    c846:	cf 90       	pop	r12
    c848:	bf 90       	pop	r11
    c84a:	af 90       	pop	r10
    c84c:	9f 90       	pop	r9
    c84e:	8f 90       	pop	r8
    c850:	7f 90       	pop	r7
    c852:	08 95       	ret

0000c854 <systemConfigProtocol>:



void systemConfigProtocol(){
     static char stConfigProtocol=cpWaitSend;
	 switch(stConfigProtocol){
    c854:	80 91 7f 03 	lds	r24, 0x037F
    c858:	81 30       	cpi	r24, 0x01	; 1
    c85a:	c1 f0       	breq	.+48     	; 0xc88c <systemConfigProtocol+0x38>
    c85c:	81 30       	cpi	r24, 0x01	; 1
    c85e:	18 f0       	brcs	.+6      	; 0xc866 <systemConfigProtocol+0x12>
    c860:	82 30       	cpi	r24, 0x02	; 2
    c862:	e9 f4       	brne	.+58     	; 0xc89e <systemConfigProtocol+0x4a>
    c864:	18 c0       	rjmp	.+48     	; 0xc896 <systemConfigProtocol+0x42>
	 case cpWaitSend:
	      switch(ConfigCommand){
    c866:	80 91 8f 02 	lds	r24, 0x028F
    c86a:	81 30       	cpi	r24, 0x01	; 1
    c86c:	31 f0       	breq	.+12     	; 0xc87a <systemConfigProtocol+0x26>
    c86e:	82 30       	cpi	r24, 0x02	; 2
    c870:	51 f4       	brne	.+20     	; 0xc886 <systemConfigProtocol+0x32>
		  case CC_SEND_CONFIG:
		       ConfigCommand=CC_NONE;
    c872:	10 92 8f 02 	sts	0x028F, r1
			   stConfigProtocol=cpSendingParameter;
    c876:	81 e0       	ldi	r24, 0x01	; 1
    c878:	03 c0       	rjmp	.+6      	; 0xc880 <systemConfigProtocol+0x2c>
		       break;
		  case CC_SAVE_CONFIG:
		       ConfigCommand=CC_NONE;
    c87a:	10 92 8f 02 	sts	0x028F, r1
			   stConfigProtocol=cpSavingParameter;
    c87e:	82 e0       	ldi	r24, 0x02	; 2
    c880:	80 93 7f 03 	sts	0x037F, r24
		       break;
    c884:	08 95       	ret
          default:
		       ConfigCommand=CC_NONE;
    c886:	10 92 8f 02 	sts	0x028F, r1
		       break;
    c88a:	08 95       	ret
		  }
	      break;
     case cpSendingParameter:
	      SendConfigParamater();
    c88c:	0e 94 42 57 	call	0xae84	; 0xae84 <SendConfigParamater>
          stConfigProtocol=cpWaitSend;
    c890:	10 92 7f 03 	sts	0x037F, r1
	      break;
    c894:	08 95       	ret
     case cpSavingParameter:
          SaveConfigParameter();
    c896:	0e 94 25 62 	call	0xc44a	; 0xc44a <SaveConfigParameter>
          stConfigProtocol=cpWaitSend;
    c89a:	10 92 7f 03 	sts	0x037F, r1
    c89e:	08 95       	ret

0000c8a0 <IsMoreThan>:
	    Result=c-'0';
	 }
	return Result;
}

char IsMoreThan(char *strA, char *strB){
    c8a0:	cf 92       	push	r12
    c8a2:	df 92       	push	r13
    c8a4:	ef 92       	push	r14
    c8a6:	ff 92       	push	r15
    c8a8:	0f 93       	push	r16
    c8aa:	1f 93       	push	r17
    c8ac:	cf 93       	push	r28
    c8ae:	df 93       	push	r29
    c8b0:	f8 2e       	mov	r15, r24
     char i,LengthA,LengthB,Result=False;
	 char strSend[20];	 
     //Check Length
	 LengthA=strlen(strA);
    c8b2:	e8 2f       	mov	r30, r24
    c8b4:	f9 2f       	mov	r31, r25
    c8b6:	df 01       	movw	r26, r30
    c8b8:	0d 90       	ld	r0, X+
    c8ba:	00 20       	and	r0, r0
    c8bc:	e9 f7       	brne	.-6      	; 0xc8b8 <IsMoreThan+0x18>
    c8be:	11 97       	sbiw	r26, 0x01	; 1
    c8c0:	ea 2e       	mov	r14, r26
    c8c2:	e8 1a       	sub	r14, r24
	 LengthB=strlen(strB);
    c8c4:	db 01       	movw	r26, r22
    c8c6:	0d 90       	ld	r0, X+
    c8c8:	00 20       	and	r0, r0
    c8ca:	e9 f7       	brne	.-6      	; 0xc8c6 <IsMoreThan+0x26>
    c8cc:	11 97       	sbiw	r26, 0x01	; 1
    c8ce:	a6 1b       	sub	r26, r22
	 Result=False;
	 if (LengthA>LengthB)Result=True;
    c8d0:	ae 15       	cp	r26, r14
    c8d2:	e0 f0       	brcs	.+56     	; 0xc90c <IsMoreThan+0x6c>
	 else 
	 if (LengthA==LengthB){          //456755 
    c8d4:	ea 16       	cp	r14, r26
    c8d6:	e1 f4       	brne	.+56     	; 0xc910 <IsMoreThan+0x70>
    c8d8:	06 2f       	mov	r16, r22
    c8da:	17 2f       	mov	r17, r23
    c8dc:	cf 2c       	mov	r12, r15
    c8de:	e6 01       	movw	r28, r12
    c8e0:	6e 01       	movw	r12, r28
    c8e2:	d9 2e       	mov	r13, r25
    c8e4:	e6 01       	movw	r28, r12
    c8e6:	0d c0       	rjmp	.+26     	; 0xc902 <IsMoreThan+0x62>
	     for(i=0;i<LengthA;i++){    //456410   
		     if (Ord(strA[i])>Ord(strB[i])){
    c8e8:	89 91       	ld	r24, Y+
    c8ea:	0e 94 30 61 	call	0xc260	; 0xc260 <Ord>
    c8ee:	d8 2e       	mov	r13, r24
    c8f0:	f8 01       	movw	r30, r16
    c8f2:	81 91       	ld	r24, Z+
    c8f4:	8f 01       	movw	r16, r30
    c8f6:	0e 94 30 61 	call	0xc260	; 0xc260 <Ord>
    c8fa:	8d 15       	cp	r24, r13
    c8fc:	38 f0       	brcs	.+14     	; 0xc90c <IsMoreThan+0x6c>
			     Result=True;
				 break;
			 }else if (Ord(strA[i])<Ord(strB[i])){
    c8fe:	d8 16       	cp	r13, r24
    c900:	38 f0       	brcs	.+14     	; 0xc910 <IsMoreThan+0x70>
	 LengthB=strlen(strB);
	 Result=False;
	 if (LengthA>LengthB)Result=True;
	 else 
	 if (LengthA==LengthB){          //456755 
	     for(i=0;i<LengthA;i++){    //456410   
    c902:	6e 01       	movw	r12, r28
    c904:	cf 18       	sub	r12, r15
    c906:	ce 14       	cp	r12, r14
    c908:	78 f3       	brcs	.-34     	; 0xc8e8 <IsMoreThan+0x48>
    c90a:	02 c0       	rjmp	.+4      	; 0xc910 <IsMoreThan+0x70>
		     if (Ord(strA[i])>Ord(strB[i])){
			     Result=True;
    c90c:	81 e0       	ldi	r24, 0x01	; 1
    c90e:	01 c0       	rjmp	.+2      	; 0xc912 <IsMoreThan+0x72>
				 break;
			 }else if (Ord(strA[i])<Ord(strB[i])){
			     Result=False;
    c910:	80 e0       	ldi	r24, 0x00	; 0
				 break;
			 }			 		 
		 }
	 }
  return Result;
}
    c912:	df 91       	pop	r29
    c914:	cf 91       	pop	r28
    c916:	1f 91       	pop	r17
    c918:	0f 91       	pop	r16
    c91a:	ff 90       	pop	r15
    c91c:	ef 90       	pop	r14
    c91e:	df 90       	pop	r13
    c920:	cf 90       	pop	r12
    c922:	08 95       	ret

0000c924 <FTestCalculation>:
		  else
		  if (KeyChar=='*')stTestCalc=tcInitData;
	      break;	 
	 }
*/
}
    c924:	08 95       	ret

0000c926 <GetMinusPos>:

char GetMinusPos(char *strNumber){
char i,Result;
     Result=0;
     for(i=0;i<strlen(strNumber);i++){
    c926:	fc 01       	movw	r30, r24
    c928:	01 90       	ld	r0, Z+
    c92a:	00 20       	and	r0, r0
    c92c:	e9 f7       	brne	.-6      	; 0xc928 <GetMinusPos+0x2>
    c92e:	31 97       	sbiw	r30, 0x01	; 1
    c930:	e8 1b       	sub	r30, r24
    c932:	f9 0b       	sbc	r31, r25
    c934:	40 e0       	ldi	r20, 0x00	; 0
    c936:	09 c0       	rjmp	.+18     	; 0xc94a <GetMinusPos+0x24>
	     if (strNumber[i]=='-'){
    c938:	28 0f       	add	r18, r24
    c93a:	39 1f       	adc	r19, r25
    c93c:	d9 01       	movw	r26, r18
    c93e:	2c 91       	ld	r18, X
    c940:	4f 5f       	subi	r20, 0xFF	; 255
    c942:	2d 32       	cpi	r18, 0x2D	; 45
    c944:	11 f4       	brne	.+4      	; 0xc94a <GetMinusPos+0x24>
		     Result=i+1;
    c946:	84 2f       	mov	r24, r20
			 break;
    c948:	08 95       	ret
}

char GetMinusPos(char *strNumber){
char i,Result;
     Result=0;
     for(i=0;i<strlen(strNumber);i++){
    c94a:	24 2f       	mov	r18, r20
    c94c:	30 e0       	ldi	r19, 0x00	; 0
    c94e:	2e 17       	cp	r18, r30
    c950:	3f 07       	cpc	r19, r31
    c952:	90 f3       	brcs	.-28     	; 0xc938 <GetMinusPos+0x12>
*/
}

char GetMinusPos(char *strNumber){
char i,Result;
     Result=0;
    c954:	80 e0       	ldi	r24, 0x00	; 0
		     Result=i+1;
			 break;
		 }
	 }
  return Result;     
}
    c956:	08 95       	ret

0000c958 <IsMinus>:

char IsMinus(char *strNumber){
char i,Result=False;
     Result=False;
	 if (GetMinusPos(strNumber)>0){
    c958:	0e 94 93 64 	call	0xc926	; 0xc926 <GetMinusPos>
  return Result;     
}

char IsMinus(char *strNumber){
char i,Result=False;
     Result=False;
    c95c:	91 e0       	ldi	r25, 0x01	; 1
    c95e:	88 23       	and	r24, r24
    c960:	09 f4       	brne	.+2      	; 0xc964 <IsMinus+0xc>
    c962:	90 e0       	ldi	r25, 0x00	; 0
	 if (GetMinusPos(strNumber)>0){
	     Result=True;
	 }     
  return Result;
}
    c964:	89 2f       	mov	r24, r25
    c966:	08 95       	ret

0000c968 <RemoveMinus>:

void RemoveMinus(char *strNumber){
    c968:	0f 93       	push	r16
    c96a:	1f 93       	push	r17
    c96c:	8c 01       	movw	r16, r24
     char MinPos,Length;

     if (IsMinus(strNumber)==True){
    c96e:	0e 94 ac 64 	call	0xc958	; 0xc958 <IsMinus>
    c972:	81 30       	cpi	r24, 0x01	; 1
    c974:	99 f4       	brne	.+38     	; 0xc99c <RemoveMinus+0x34>
	     MinPos=GetMinusPos(strNumber);
    c976:	c8 01       	movw	r24, r16
    c978:	0e 94 93 64 	call	0xc926	; 0xc926 <GetMinusPos>
    c97c:	48 2f       	mov	r20, r24
		 Length=strlen(strNumber);
    c97e:	d8 01       	movw	r26, r16
    c980:	0d 90       	ld	r0, X+
    c982:	00 20       	and	r0, r0
    c984:	e9 f7       	brne	.-6      	; 0xc980 <RemoveMinus+0x18>
    c986:	11 97       	sbiw	r26, 0x01	; 1
		 StrPosCopy(strNumber,strNumber,MinPos,(Length-MinPos));	      
    c988:	a0 1b       	sub	r26, r16
    c98a:	2a 2f       	mov	r18, r26
    c98c:	30 e0       	ldi	r19, 0x00	; 0
    c98e:	28 1b       	sub	r18, r24
    c990:	31 09       	sbc	r19, r1
    c992:	c8 01       	movw	r24, r16
    c994:	b8 01       	movw	r22, r16
    c996:	50 e0       	ldi	r21, 0x00	; 0
    c998:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
	 }
}
    c99c:	1f 91       	pop	r17
    c99e:	0f 91       	pop	r16
    c9a0:	08 95       	ret

0000c9a2 <CalcSegmen>:
		 */
		 CalcMultiply(strA,strB,strC);
	 }
}

void CalcSegmen(char *strMain, char cNum, char *strResult){
    c9a2:	6f 92       	push	r6
    c9a4:	7f 92       	push	r7
    c9a6:	8f 92       	push	r8
    c9a8:	9f 92       	push	r9
    c9aa:	af 92       	push	r10
    c9ac:	bf 92       	push	r11
    c9ae:	cf 92       	push	r12
    c9b0:	df 92       	push	r13
    c9b2:	ef 92       	push	r14
    c9b4:	ff 92       	push	r15
    c9b6:	0f 93       	push	r16
    c9b8:	1f 93       	push	r17
    c9ba:	df 93       	push	r29
    c9bc:	cf 93       	push	r28
    c9be:	cd b7       	in	r28, 0x3d	; 61
    c9c0:	de b7       	in	r29, 0x3e	; 62
    c9c2:	64 97       	sbiw	r28, 0x14	; 20
    c9c4:	0f b6       	in	r0, 0x3f	; 63
    c9c6:	f8 94       	cli
    c9c8:	de bf       	out	0x3e, r29	; 62
    c9ca:	0f be       	out	0x3f, r0	; 63
    c9cc:	cd bf       	out	0x3d, r28	; 61
    c9ce:	9c 01       	movw	r18, r24
       --------
         61725
	 */
	 char i,lenR,xCalc,xRes,xResNext,tmpResult[20];

	 xResNext=0;
    c9d0:	80 e0       	ldi	r24, 0x00	; 0
     xRes=0;

	 for(i=0;i<strlen(strMain);i++){           
    c9d2:	bb 24       	eor	r11, r11
         xCalc=(strMain[strlen(strMain)-1-i]-'0')*(cNum-'0')+xResNext;//Hasil
    c9d4:	66 2e       	mov	r6, r22
    c9d6:	77 24       	eor	r7, r7
    c9d8:	60 ed       	ldi	r22, 0xD0	; 208
    c9da:	7f ef       	ldi	r23, 0xFF	; 255
    c9dc:	66 0e       	add	r6, r22
    c9de:	77 1e       	adc	r7, r23
		 xRes=xCalc%10;
		 xResNext=xCalc/10;
    c9e0:	6a e0       	ldi	r22, 0x0A	; 10
    c9e2:	a6 2e       	mov	r10, r22
	     tmpResult[i]='0'+xRes;	 
    c9e4:	8e 01       	movw	r16, r28
    c9e6:	0f 5f       	subi	r16, 0xFF	; 255
    c9e8:	1f 4f       	sbci	r17, 0xFF	; 255
		 tmpResult[i+1]=0;
    c9ea:	92 e0       	ldi	r25, 0x02	; 2
    c9ec:	89 2e       	mov	r8, r25
    c9ee:	91 2c       	mov	r9, r1
    c9f0:	8c 0e       	add	r8, r28
    c9f2:	9d 1e       	adc	r9, r29
	 char i,lenR,xCalc,xRes,xResNext,tmpResult[20];

	 xResNext=0;
     xRes=0;

	 for(i=0;i<strlen(strMain);i++){           
    c9f4:	1c c0       	rjmp	.+56     	; 0xca2e <CalcSegmen+0x8c>
         xCalc=(strMain[strlen(strMain)-1-i]-'0')*(cNum-'0')+xResNext;//Hasil
    c9f6:	08 94       	sec
    c9f8:	e1 08       	sbc	r14, r1
    c9fa:	f1 08       	sbc	r15, r1
    c9fc:	ee 1a       	sub	r14, r30
    c9fe:	ff 0a       	sbc	r15, r31
    ca00:	e2 0e       	add	r14, r18
    ca02:	f3 1e       	adc	r15, r19
    ca04:	d7 01       	movw	r26, r14
    ca06:	9c 91       	ld	r25, X
    ca08:	90 53       	subi	r25, 0x30	; 48
    ca0a:	96 9d       	mul	r25, r6
    ca0c:	90 2d       	mov	r25, r0
    ca0e:	11 24       	eor	r1, r1
    ca10:	98 0f       	add	r25, r24
		 xRes=xCalc%10;
		 xResNext=xCalc/10;
    ca12:	89 2f       	mov	r24, r25
    ca14:	6a 2d       	mov	r22, r10
    ca16:	0e 94 7e a7 	call	0x14efc	; 0x14efc <__udivmodqi4>
	     tmpResult[i]='0'+xRes;	 
    ca1a:	78 01       	movw	r14, r16
    ca1c:	ee 0e       	add	r14, r30
    ca1e:	ff 1e       	adc	r15, r31
    ca20:	90 5d       	subi	r25, 0xD0	; 208
    ca22:	d7 01       	movw	r26, r14
    ca24:	9c 93       	st	X, r25
		 tmpResult[i+1]=0;
    ca26:	e8 0d       	add	r30, r8
    ca28:	f9 1d       	adc	r31, r9
    ca2a:	10 82       	st	Z, r1
	 char i,lenR,xCalc,xRes,xResNext,tmpResult[20];

	 xResNext=0;
     xRes=0;

	 for(i=0;i<strlen(strMain);i++){           
    ca2c:	b3 94       	inc	r11
    ca2e:	eb 2d       	mov	r30, r11
    ca30:	f0 e0       	ldi	r31, 0x00	; 0
    ca32:	d9 01       	movw	r26, r18
    ca34:	0d 90       	ld	r0, X+
    ca36:	00 20       	and	r0, r0
    ca38:	e9 f7       	brne	.-6      	; 0xca34 <CalcSegmen+0x92>
    ca3a:	7d 01       	movw	r14, r26
    ca3c:	08 94       	sec
    ca3e:	e1 08       	sbc	r14, r1
    ca40:	f1 08       	sbc	r15, r1
    ca42:	e2 1a       	sub	r14, r18
    ca44:	f3 0a       	sbc	r15, r19
    ca46:	ee 15       	cp	r30, r14
    ca48:	ff 05       	cpc	r31, r15
    ca4a:	a8 f2       	brcs	.-86     	; 0xc9f6 <CalcSegmen+0x54>
		 xRes=xCalc%10;
		 xResNext=xCalc/10;
	     tmpResult[i]='0'+xRes;	 
		 tmpResult[i+1]=0;
	 }
	 if (xResNext>0){
    ca4c:	88 23       	and	r24, r24
    ca4e:	91 f0       	breq	.+36     	; 0xca74 <CalcSegmen+0xd2>
	     lenR=strlen(tmpResult);
    ca50:	fe 01       	movw	r30, r28
    ca52:	31 96       	adiw	r30, 0x01	; 1
    ca54:	df 01       	movw	r26, r30
    ca56:	0d 90       	ld	r0, X+
    ca58:	00 20       	and	r0, r0
    ca5a:	e9 f7       	brne	.-6      	; 0xca56 <CalcSegmen+0xb4>
    ca5c:	11 97       	sbiw	r26, 0x01	; 1
	     tmpResult[lenR]='0'+xResNext;
    ca5e:	ae 1b       	sub	r26, r30
    ca60:	b0 e0       	ldi	r27, 0x00	; 0
    ca62:	ea 0f       	add	r30, r26
    ca64:	fb 1f       	adc	r31, r27
    ca66:	80 5d       	subi	r24, 0xD0	; 208
    ca68:	80 83       	st	Z, r24
		 tmpResult[lenR+1]=0;	 
    ca6a:	ac 0f       	add	r26, r28
    ca6c:	bd 1f       	adc	r27, r29
    ca6e:	12 96       	adiw	r26, 0x02	; 2
    ca70:	1c 92       	st	X, r1
    ca72:	12 97       	sbiw	r26, 0x02	; 2
	 }
	 lenR=strlen(tmpResult);
    ca74:	8e 01       	movw	r16, r28
    ca76:	0f 5f       	subi	r16, 0xFF	; 255
    ca78:	1f 4f       	sbci	r17, 0xFF	; 255
    ca7a:	f8 01       	movw	r30, r16
    ca7c:	01 90       	ld	r0, Z+
    ca7e:	00 20       	and	r0, r0
    ca80:	e9 f7       	brne	.-6      	; 0xca7c <CalcSegmen+0xda>
    ca82:	31 97       	sbiw	r30, 0x01	; 1
		 */
		 CalcMultiply(strA,strB,strC);
	 }
}

void CalcSegmen(char *strMain, char cNum, char *strResult){
    ca84:	e0 1b       	sub	r30, r16
    ca86:	8e 2f       	mov	r24, r30
    ca88:	90 e0       	ldi	r25, 0x00	; 0
    ca8a:	f8 01       	movw	r30, r16
    ca8c:	e8 0f       	add	r30, r24
    ca8e:	f9 1f       	adc	r31, r25
    ca90:	9a 01       	movw	r18, r20
	     lenR=strlen(tmpResult);
	     tmpResult[lenR]='0'+xResNext;
		 tmpResult[lenR+1]=0;	 
	 }
	 lenR=strlen(tmpResult);
	 for (i=0;i<lenR;i++){
    ca92:	05 c0       	rjmp	.+10     	; 0xca9e <CalcSegmen+0xfc>
    ca94:	31 97       	sbiw	r30, 0x01	; 1
	     strResult[i]=tmpResult[lenR-1-i];
    ca96:	60 81       	ld	r22, Z
    ca98:	d9 01       	movw	r26, r18
    ca9a:	6d 93       	st	X+, r22
    ca9c:	9d 01       	movw	r18, r26
	     lenR=strlen(tmpResult);
	     tmpResult[lenR]='0'+xResNext;
		 tmpResult[lenR+1]=0;	 
	 }
	 lenR=strlen(tmpResult);
	 for (i=0;i<lenR;i++){
    ca9e:	e0 17       	cp	r30, r16
    caa0:	f1 07       	cpc	r31, r17
    caa2:	c1 f7       	brne	.-16     	; 0xca94 <CalcSegmen+0xf2>
	     strResult[i]=tmpResult[lenR-1-i];
	 }
	 strResult[lenR]=0;
    caa4:	48 0f       	add	r20, r24
    caa6:	59 1f       	adc	r21, r25
    caa8:	fa 01       	movw	r30, r20
    caaa:	10 82       	st	Z, r1
}
    caac:	64 96       	adiw	r28, 0x14	; 20
    caae:	0f b6       	in	r0, 0x3f	; 63
    cab0:	f8 94       	cli
    cab2:	de bf       	out	0x3e, r29	; 62
    cab4:	0f be       	out	0x3f, r0	; 63
    cab6:	cd bf       	out	0x3d, r28	; 61
    cab8:	cf 91       	pop	r28
    caba:	df 91       	pop	r29
    cabc:	1f 91       	pop	r17
    cabe:	0f 91       	pop	r16
    cac0:	ff 90       	pop	r15
    cac2:	ef 90       	pop	r14
    cac4:	df 90       	pop	r13
    cac6:	cf 90       	pop	r12
    cac8:	bf 90       	pop	r11
    caca:	af 90       	pop	r10
    cacc:	9f 90       	pop	r9
    cace:	8f 90       	pop	r8
    cad0:	7f 90       	pop	r7
    cad2:	6f 90       	pop	r6
    cad4:	08 95       	ret

0000cad6 <CalcMultiply>:


void CalcMultiply(char *strA,char *strB,char *strC){
    cad6:	4f 92       	push	r4
    cad8:	5f 92       	push	r5
    cada:	6f 92       	push	r6
    cadc:	7f 92       	push	r7
    cade:	8f 92       	push	r8
    cae0:	9f 92       	push	r9
    cae2:	af 92       	push	r10
    cae4:	bf 92       	push	r11
    cae6:	cf 92       	push	r12
    cae8:	df 92       	push	r13
    caea:	ef 92       	push	r14
    caec:	ff 92       	push	r15
    caee:	0f 93       	push	r16
    caf0:	1f 93       	push	r17
    caf2:	df 93       	push	r29
    caf4:	cf 93       	push	r28
    caf6:	cd b7       	in	r28, 0x3d	; 61
    caf8:	de b7       	in	r29, 0x3e	; 62
    cafa:	a8 97       	sbiw	r28, 0x28	; 40
    cafc:	0f b6       	in	r0, 0x3f	; 63
    cafe:	f8 94       	cli
    cb00:	de bf       	out	0x3e, r29	; 62
    cb02:	0f be       	out	0x3f, r0	; 63
    cb04:	cd bf       	out	0x3d, r28	; 61
    cb06:	3c 01       	movw	r6, r24
    cb08:	6b 01       	movw	r12, r22
    cb0a:	2a 01       	movw	r4, r20
	 
	 */
	 char i,lenB;
	 char prevSeg[20],currSeg[20];

     RemZeroLead(strA);
    cb0c:	0e 94 93 39 	call	0x7326	; 0x7326 <RemZeroLead>
     RemZeroLead(strB);
    cb10:	c6 01       	movw	r24, r12
    cb12:	0e 94 93 39 	call	0x7326	; 0x7326 <RemZeroLead>
	 lenB=strlen(strB);
    cb16:	d6 01       	movw	r26, r12
    cb18:	0d 90       	ld	r0, X+
    cb1a:	00 20       	and	r0, r0
    cb1c:	e9 f7       	brne	.-6      	; 0xcb18 <CalcMultiply+0x42>
    cb1e:	11 97       	sbiw	r26, 0x01	; 1
    cb20:	8a 2e       	mov	r8, r26
    cb22:	8c 18       	sub	r8, r12
	 sprintf_P(prevSeg,PSTR("0"));
    cb24:	00 d0       	rcall	.+0      	; 0xcb26 <CalcMultiply+0x50>
    cb26:	00 d0       	rcall	.+0      	; 0xcb28 <CalcMultiply+0x52>
    cb28:	7e 01       	movw	r14, r28
    cb2a:	08 94       	sec
    cb2c:	e1 1c       	adc	r14, r1
    cb2e:	f1 1c       	adc	r15, r1
    cb30:	ad b7       	in	r26, 0x3d	; 61
    cb32:	be b7       	in	r27, 0x3e	; 62
    cb34:	12 96       	adiw	r26, 0x02	; 2
    cb36:	fc 92       	st	X, r15
    cb38:	ee 92       	st	-X, r14
    cb3a:	11 97       	sbiw	r26, 0x01	; 1
    cb3c:	81 ed       	ldi	r24, 0xD1	; 209
    cb3e:	96 e0       	ldi	r25, 0x06	; 6
    cb40:	14 96       	adiw	r26, 0x04	; 4
    cb42:	9c 93       	st	X, r25
    cb44:	8e 93       	st	-X, r24
    cb46:	13 97       	sbiw	r26, 0x03	; 3
    cb48:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	 sprintf_P(currSeg,PSTR("0"));
    cb4c:	8e 01       	movw	r16, r28
    cb4e:	0b 5e       	subi	r16, 0xEB	; 235
    cb50:	1f 4f       	sbci	r17, 0xFF	; 255
    cb52:	ed b7       	in	r30, 0x3d	; 61
    cb54:	fe b7       	in	r31, 0x3e	; 62
    cb56:	12 83       	std	Z+2, r17	; 0x02
    cb58:	01 83       	std	Z+1, r16	; 0x01
    cb5a:	8f ec       	ldi	r24, 0xCF	; 207
    cb5c:	96 e0       	ldi	r25, 0x06	; 6
    cb5e:	94 83       	std	Z+4, r25	; 0x04
    cb60:	83 83       	std	Z+3, r24	; 0x03
    cb62:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>

	 for(i=0;i<strlen(strB);i++){
    cb66:	0f 90       	pop	r0
    cb68:	0f 90       	pop	r0
    cb6a:	0f 90       	pop	r0
    cb6c:	0f 90       	pop	r0
    cb6e:	bb 24       	eor	r11, r11
    cb70:	ae 2c       	mov	r10, r14
    cb72:	9f 2c       	mov	r9, r15
	     //
         CalcSegmen(strA,strB[lenB-1-i],currSeg);
    cb74:	e8 2c       	mov	r14, r8
    cb76:	ff 24       	eor	r15, r15
    cb78:	08 94       	sec
    cb7a:	e1 08       	sbc	r14, r1
    cb7c:	f1 08       	sbc	r15, r1
     RemZeroLead(strB);
	 lenB=strlen(strB);
	 sprintf_P(prevSeg,PSTR("0"));
	 sprintf_P(currSeg,PSTR("0"));

	 for(i=0;i<strlen(strB);i++){
    cb7e:	1f c0       	rjmp	.+62     	; 0xcbbe <CalcMultiply+0xe8>
	     //
         CalcSegmen(strA,strB[lenB-1-i],currSeg);
    cb80:	f7 01       	movw	r30, r14
    cb82:	e8 1b       	sub	r30, r24
    cb84:	f9 0b       	sbc	r31, r25
    cb86:	ec 0d       	add	r30, r12
    cb88:	fd 1d       	adc	r31, r13
    cb8a:	c3 01       	movw	r24, r6
    cb8c:	60 81       	ld	r22, Z
    cb8e:	a8 01       	movw	r20, r16
    cb90:	0e 94 d1 64 	call	0xc9a2	; 0xc9a2 <CalcSegmen>
         AddZeroLag(currSeg,strlen(currSeg)+i);
    cb94:	f8 01       	movw	r30, r16
    cb96:	01 90       	ld	r0, Z+
    cb98:	00 20       	and	r0, r0
    cb9a:	e9 f7       	brne	.-6      	; 0xcb96 <CalcMultiply+0xc0>
    cb9c:	31 97       	sbiw	r30, 0x01	; 1
    cb9e:	e0 1b       	sub	r30, r16
    cba0:	f1 0b       	sbc	r31, r17
    cba2:	6b 2d       	mov	r22, r11
    cba4:	6e 0f       	add	r22, r30
    cba6:	c8 01       	movw	r24, r16
    cba8:	0e 94 aa 2b 	call	0x5754	; 0x5754 <AddZeroLag>
	     StrCalc(TPLUS,prevSeg,currSeg,prevSeg);
    cbac:	81 e0       	ldi	r24, 0x01	; 1
    cbae:	6a 2d       	mov	r22, r10
    cbb0:	79 2d       	mov	r23, r9
    cbb2:	a8 01       	movw	r20, r16
    cbb4:	2a 2d       	mov	r18, r10
    cbb6:	39 2d       	mov	r19, r9
    cbb8:	0e 94 1e 66 	call	0xcc3c	; 0xcc3c <StrCalc>
     RemZeroLead(strB);
	 lenB=strlen(strB);
	 sprintf_P(prevSeg,PSTR("0"));
	 sprintf_P(currSeg,PSTR("0"));

	 for(i=0;i<strlen(strB);i++){
    cbbc:	b3 94       	inc	r11
    cbbe:	f6 01       	movw	r30, r12
    cbc0:	01 90       	ld	r0, Z+
    cbc2:	00 20       	and	r0, r0
    cbc4:	e9 f7       	brne	.-6      	; 0xcbc0 <CalcMultiply+0xea>
    cbc6:	31 97       	sbiw	r30, 0x01	; 1
    cbc8:	ec 19       	sub	r30, r12
    cbca:	fd 09       	sbc	r31, r13
    cbcc:	8b 2d       	mov	r24, r11
    cbce:	90 e0       	ldi	r25, 0x00	; 0
    cbd0:	8e 17       	cp	r24, r30
    cbd2:	9f 07       	cpc	r25, r31
    cbd4:	a8 f2       	brcs	.-86     	; 0xcb80 <CalcMultiply+0xaa>
	     //
         CalcSegmen(strA,strB[lenB-1-i],currSeg);
         AddZeroLag(currSeg,strlen(currSeg)+i);
	     StrCalc(TPLUS,prevSeg,currSeg,prevSeg);
	 }
	 sprintf_P(strC,PSTR("%s"),prevSeg);
    cbd6:	00 d0       	rcall	.+0      	; 0xcbd8 <CalcMultiply+0x102>
    cbd8:	00 d0       	rcall	.+0      	; 0xcbda <CalcMultiply+0x104>
    cbda:	00 d0       	rcall	.+0      	; 0xcbdc <CalcMultiply+0x106>
    cbdc:	ed b7       	in	r30, 0x3d	; 61
    cbde:	fe b7       	in	r31, 0x3e	; 62
    cbe0:	31 96       	adiw	r30, 0x01	; 1
    cbe2:	ad b7       	in	r26, 0x3d	; 61
    cbe4:	be b7       	in	r27, 0x3e	; 62
    cbe6:	12 96       	adiw	r26, 0x02	; 2
    cbe8:	5c 92       	st	X, r5
    cbea:	4e 92       	st	-X, r4
    cbec:	11 97       	sbiw	r26, 0x01	; 1
    cbee:	8c ec       	ldi	r24, 0xCC	; 204
    cbf0:	96 e0       	ldi	r25, 0x06	; 6
    cbf2:	93 83       	std	Z+3, r25	; 0x03
    cbf4:	82 83       	std	Z+2, r24	; 0x02
    cbf6:	a4 82       	std	Z+4, r10	; 0x04
    cbf8:	95 82       	std	Z+5, r9	; 0x05
    cbfa:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    cbfe:	ed b7       	in	r30, 0x3d	; 61
    cc00:	fe b7       	in	r31, 0x3e	; 62
    cc02:	36 96       	adiw	r30, 0x06	; 6
    cc04:	0f b6       	in	r0, 0x3f	; 63
    cc06:	f8 94       	cli
    cc08:	fe bf       	out	0x3e, r31	; 62
    cc0a:	0f be       	out	0x3f, r0	; 63
    cc0c:	ed bf       	out	0x3d, r30	; 61
}
    cc0e:	a8 96       	adiw	r28, 0x28	; 40
    cc10:	0f b6       	in	r0, 0x3f	; 63
    cc12:	f8 94       	cli
    cc14:	de bf       	out	0x3e, r29	; 62
    cc16:	0f be       	out	0x3f, r0	; 63
    cc18:	cd bf       	out	0x3d, r28	; 61
    cc1a:	cf 91       	pop	r28
    cc1c:	df 91       	pop	r29
    cc1e:	1f 91       	pop	r17
    cc20:	0f 91       	pop	r16
    cc22:	ff 90       	pop	r15
    cc24:	ef 90       	pop	r14
    cc26:	df 90       	pop	r13
    cc28:	cf 90       	pop	r12
    cc2a:	bf 90       	pop	r11
    cc2c:	af 90       	pop	r10
    cc2e:	9f 90       	pop	r9
    cc30:	8f 90       	pop	r8
    cc32:	7f 90       	pop	r7
    cc34:	6f 90       	pop	r6
    cc36:	5f 90       	pop	r5
    cc38:	4f 90       	pop	r4
    cc3a:	08 95       	ret

0000cc3c <StrCalc>:
     
	 //if (NinePos<Length-4)
	 StrCalc(TPLUS,strMaxValue,strOverflowed,strOverflowed);
}
                                                                   //     1111111 
void StrCalc(char TOperation, char *strA , char *strB, char *strC){//  A: 00000000
    cc3c:	2f 92       	push	r2
    cc3e:	3f 92       	push	r3
    cc40:	4f 92       	push	r4
    cc42:	5f 92       	push	r5
    cc44:	6f 92       	push	r6
    cc46:	7f 92       	push	r7
    cc48:	8f 92       	push	r8
    cc4a:	9f 92       	push	r9
    cc4c:	af 92       	push	r10
    cc4e:	bf 92       	push	r11
    cc50:	cf 92       	push	r12
    cc52:	df 92       	push	r13
    cc54:	ef 92       	push	r14
    cc56:	ff 92       	push	r15
    cc58:	0f 93       	push	r16
    cc5a:	1f 93       	push	r17
    cc5c:	df 93       	push	r29
    cc5e:	cf 93       	push	r28
    cc60:	cd b7       	in	r28, 0x3d	; 61
    cc62:	de b7       	in	r29, 0x3e	; 62
    cc64:	cd 55       	subi	r28, 0x5D	; 93
    cc66:	d0 40       	sbci	r29, 0x00	; 0
    cc68:	0f b6       	in	r0, 0x3f	; 63
    cc6a:	f8 94       	cli
    cc6c:	de bf       	out	0x3e, r29	; 62
    cc6e:	0f be       	out	0x3f, r0	; 63
    cc70:	cd bf       	out	0x3d, r28	; 61
    cc72:	67 96       	adiw	r28, 0x17	; 23
    cc74:	8f af       	std	Y+63, r24	; 0x3f
    cc76:	67 97       	sbiw	r28, 0x17	; 23
    cc78:	6b 96       	adiw	r28, 0x1b	; 27
    cc7a:	7f af       	std	Y+63, r23	; 0x3f
    cc7c:	6e af       	std	Y+62, r22	; 0x3e
    cc7e:	6b 97       	sbiw	r28, 0x1b	; 27
    cc80:	6d 96       	adiw	r28, 0x1d	; 29
    cc82:	5f af       	std	Y+63, r21	; 0x3f
    cc84:	4e af       	std	Y+62, r20	; 0x3e
    cc86:	6d 97       	sbiw	r28, 0x1d	; 29
    cc88:	89 01       	movw	r16, r18
	 //long long valA,valB,valC;
	 
	 IsMinA=False;
	 IsMinB=False;
	 IsNegative=False;
	 FillChar(tmpA,sizeof(tmpA),0);
    cc8a:	7e 01       	movw	r14, r28
    cc8c:	08 94       	sec
    cc8e:	e1 1c       	adc	r14, r1
    cc90:	f1 1c       	adc	r15, r1
    cc92:	c7 01       	movw	r24, r14
    cc94:	64 e1       	ldi	r22, 0x14	; 20
    cc96:	70 e0       	ldi	r23, 0x00	; 0
    cc98:	40 e0       	ldi	r20, 0x00	; 0
    cc9a:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>
	 FillChar(tmpB,sizeof(tmpB),0);
    cc9e:	35 e1       	ldi	r19, 0x15	; 21
    cca0:	c3 2e       	mov	r12, r19
    cca2:	d1 2c       	mov	r13, r1
    cca4:	cc 0e       	add	r12, r28
    cca6:	dd 1e       	adc	r13, r29
    cca8:	c6 01       	movw	r24, r12
    ccaa:	64 e1       	ldi	r22, 0x14	; 20
    ccac:	70 e0       	ldi	r23, 0x00	; 0
    ccae:	40 e0       	ldi	r20, 0x00	; 0
    ccb0:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>
	 FillChar(Result,sizeof(Result),0);
    ccb4:	ce 01       	movw	r24, r28
    ccb6:	cd 96       	adiw	r24, 0x3d	; 61
    ccb8:	64 e1       	ldi	r22, 0x14	; 20
    ccba:	70 e0       	ldi	r23, 0x00	; 0
    ccbc:	40 e0       	ldi	r20, 0x00	; 0
    ccbe:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>
                                            // -5    -5     5    5
	                                        // -6 -   6 -  -6 -  6 -
                                            // -5+6   
	 sprintf_P(tmpA,PSTR("%s"),strA);       // 
    ccc2:	00 d0       	rcall	.+0      	; 0xccc4 <StrCalc+0x88>
    ccc4:	00 d0       	rcall	.+0      	; 0xccc6 <StrCalc+0x8a>
    ccc6:	00 d0       	rcall	.+0      	; 0xccc8 <StrCalc+0x8c>
    ccc8:	ed b7       	in	r30, 0x3d	; 61
    ccca:	fe b7       	in	r31, 0x3e	; 62
    cccc:	31 96       	adiw	r30, 0x01	; 1
    ccce:	ad b7       	in	r26, 0x3d	; 61
    ccd0:	be b7       	in	r27, 0x3e	; 62
    ccd2:	12 96       	adiw	r26, 0x02	; 2
    ccd4:	fc 92       	st	X, r15
    ccd6:	ee 92       	st	-X, r14
    ccd8:	11 97       	sbiw	r26, 0x01	; 1
    ccda:	8f ed       	ldi	r24, 0xDF	; 223
    ccdc:	96 e0       	ldi	r25, 0x06	; 6
    ccde:	93 83       	std	Z+3, r25	; 0x03
    cce0:	82 83       	std	Z+2, r24	; 0x02
    cce2:	6b 96       	adiw	r28, 0x1b	; 27
    cce4:	2e ad       	ldd	r18, Y+62	; 0x3e
    cce6:	3f ad       	ldd	r19, Y+63	; 0x3f
    cce8:	6b 97       	sbiw	r28, 0x1b	; 27
    ccea:	35 83       	std	Z+5, r19	; 0x05
    ccec:	24 83       	std	Z+4, r18	; 0x04
    ccee:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	 sprintf_P(tmpB,PSTR("%s"),strB);  
    ccf2:	ed b7       	in	r30, 0x3d	; 61
    ccf4:	fe b7       	in	r31, 0x3e	; 62
    ccf6:	31 96       	adiw	r30, 0x01	; 1
    ccf8:	ad b7       	in	r26, 0x3d	; 61
    ccfa:	be b7       	in	r27, 0x3e	; 62
    ccfc:	12 96       	adiw	r26, 0x02	; 2
    ccfe:	dc 92       	st	X, r13
    cd00:	ce 92       	st	-X, r12
    cd02:	11 97       	sbiw	r26, 0x01	; 1
    cd04:	8c ed       	ldi	r24, 0xDC	; 220
    cd06:	96 e0       	ldi	r25, 0x06	; 6
    cd08:	93 83       	std	Z+3, r25	; 0x03
    cd0a:	82 83       	std	Z+2, r24	; 0x02
    cd0c:	6d 96       	adiw	r28, 0x1d	; 29
    cd0e:	2e ad       	ldd	r18, Y+62	; 0x3e
    cd10:	3f ad       	ldd	r19, Y+63	; 0x3f
    cd12:	6d 97       	sbiw	r28, 0x1d	; 29
    cd14:	35 83       	std	Z+5, r19	; 0x05
    cd16:	24 83       	std	Z+4, r18	; 0x04
    cd18:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>

     if (IsMinus(tmpA)==True){
    cd1c:	4d b7       	in	r20, 0x3d	; 61
    cd1e:	5e b7       	in	r21, 0x3e	; 62
    cd20:	4a 5f       	subi	r20, 0xFA	; 250
    cd22:	5f 4f       	sbci	r21, 0xFF	; 255
    cd24:	0f b6       	in	r0, 0x3f	; 63
    cd26:	f8 94       	cli
    cd28:	5e bf       	out	0x3e, r21	; 62
    cd2a:	0f be       	out	0x3f, r0	; 63
    cd2c:	4d bf       	out	0x3d, r20	; 61
    cd2e:	c7 01       	movw	r24, r14
    cd30:	0e 94 ac 64 	call	0xc958	; 0xc958 <IsMinus>
    cd34:	81 30       	cpi	r24, 0x01	; 1
    cd36:	31 f4       	brne	.+12     	; 0xcd44 <StrCalc+0x108>
	     RemoveMinus(tmpA);
    cd38:	c7 01       	movw	r24, r14
    cd3a:	0e 94 b4 64 	call	0xc968	; 0xc968 <RemoveMinus>
		 IsMinA=True;
    cd3e:	99 24       	eor	r9, r9
    cd40:	93 94       	inc	r9
    cd42:	01 c0       	rjmp	.+2      	; 0xcd46 <StrCalc+0x10a>
	 char tmpA[20],tmpB[20],tmpC[20],Result[20],iPos=0;            //   ----------- 
	 char strSend[40],TCalc;	  							       //  C: 00000019
     char IsMinA,IsMinB,IsNegative,IsSwap;
	 //long long valA,valB,valC;
	 
	 IsMinA=False;
    cd44:	99 24       	eor	r9, r9

     if (IsMinus(tmpA)==True){
	     RemoveMinus(tmpA);
		 IsMinA=True;
	 }
     if (IsMinus(tmpB)==True){
    cd46:	25 e1       	ldi	r18, 0x15	; 21
    cd48:	e2 2e       	mov	r14, r18
    cd4a:	f1 2c       	mov	r15, r1
    cd4c:	ec 0e       	add	r14, r28
    cd4e:	fd 1e       	adc	r15, r29
    cd50:	c7 01       	movw	r24, r14
    cd52:	0e 94 ac 64 	call	0xc958	; 0xc958 <IsMinus>
    cd56:	81 30       	cpi	r24, 0x01	; 1
    cd58:	29 f4       	brne	.+10     	; 0xcd64 <StrCalc+0x128>
	     RemoveMinus(tmpB);
    cd5a:	c7 01       	movw	r24, r14
    cd5c:	0e 94 b4 64 	call	0xc968	; 0xc968 <RemoveMinus>
		 IsMinB=True;
    cd60:	21 e0       	ldi	r18, 0x01	; 1
    cd62:	01 c0       	rjmp	.+2      	; 0xcd66 <StrCalc+0x12a>
	 char strSend[40],TCalc;	  							       //  C: 00000019
     char IsMinA,IsMinB,IsNegative,IsSwap;
	 //long long valA,valB,valC;
	 
	 IsMinA=False;
	 IsMinB=False;
    cd64:	20 e0       	ldi	r18, 0x00	; 0
     if (IsMinus(tmpB)==True){
	     RemoveMinus(tmpB);
		 IsMinB=True;
	 }    	

     lenA=strlen(tmpA);
    cd66:	de 01       	movw	r26, r28
    cd68:	11 96       	adiw	r26, 0x01	; 1
    cd6a:	fd 01       	movw	r30, r26
    cd6c:	01 90       	ld	r0, Z+
    cd6e:	00 20       	and	r0, r0
    cd70:	e9 f7       	brne	.-6      	; 0xcd6c <StrCalc+0x130>
    cd72:	31 97       	sbiw	r30, 0x01	; 1
    cd74:	ea 1b       	sub	r30, r26
    cd76:	fb 0b       	sbc	r31, r27
     lenB=strlen(tmpB);
    cd78:	ce 01       	movw	r24, r28
    cd7a:	45 96       	adiw	r24, 0x15	; 21
    cd7c:	dc 01       	movw	r26, r24
    cd7e:	0d 90       	ld	r0, X+
    cd80:	00 20       	and	r0, r0
    cd82:	e9 f7       	brne	.-6      	; 0xcd7e <StrCalc+0x142>
    cd84:	11 97       	sbiw	r26, 0x01	; 1
     /*
	 sprintf_P(strSend,PSTR("A:%s"),strA);	 uart_print(0,1,strSend);
	 sprintf_P(strSend,PSTR("B:%s"),strB);	 uart_print(0,1,strSend);
     */

     AddZeroLead(tmpA,FixLen+1);
    cd86:	a8 1b       	sub	r26, r24
    cd88:	ae 17       	cp	r26, r30
    cd8a:	08 f4       	brcc	.+2      	; 0xcd8e <StrCalc+0x152>
    cd8c:	ae 2f       	mov	r26, r30
    cd8e:	aa 2e       	mov	r10, r26
    cd90:	a3 94       	inc	r10
    cd92:	7e 01       	movw	r14, r28
    cd94:	08 94       	sec
    cd96:	e1 1c       	adc	r14, r1
    cd98:	f1 1c       	adc	r15, r1
    cd9a:	c7 01       	movw	r24, r14
    cd9c:	6a 2d       	mov	r22, r10
    cd9e:	6e 96       	adiw	r28, 0x1e	; 30
    cda0:	2f af       	std	Y+63, r18	; 0x3f
    cda2:	6e 97       	sbiw	r28, 0x1e	; 30
    cda4:	0e 94 c0 2b 	call	0x5780	; 0x5780 <AddZeroLead>
     AddZeroLead(tmpB,FixLen+1);
    cda8:	95 e1       	ldi	r25, 0x15	; 21
    cdaa:	c9 2e       	mov	r12, r25
    cdac:	d1 2c       	mov	r13, r1
    cdae:	cc 0e       	add	r12, r28
    cdb0:	dd 1e       	adc	r13, r29
    cdb2:	c6 01       	movw	r24, r12
    cdb4:	6a 2d       	mov	r22, r10
    cdb6:	0e 94 c0 2b 	call	0x5780	; 0x5780 <AddZeroLead>
	 uart_print(0,1,strSend);
	 sprintf_P(strSend,PSTR("B:%s"),strB);
	 uart_print(0,1,strSend);
	 */

     lenA=strlen(tmpA);
    cdba:	f7 01       	movw	r30, r14
    cdbc:	01 90       	ld	r0, Z+
    cdbe:	00 20       	and	r0, r0
    cdc0:	e9 f7       	brne	.-6      	; 0xcdbc <StrCalc+0x180>
    cdc2:	31 97       	sbiw	r30, 0x01	; 1
    cdc4:	5e 2f       	mov	r21, r30
    cdc6:	5e 19       	sub	r21, r14
    cdc8:	66 96       	adiw	r28, 0x16	; 22
    cdca:	5f af       	std	Y+63, r21	; 0x3f
    cdcc:	66 97       	sbiw	r28, 0x16	; 22
     lenB=strlen(tmpB);
    cdce:	f6 01       	movw	r30, r12
    cdd0:	01 90       	ld	r0, Z+
    cdd2:	00 20       	and	r0, r0
    cdd4:	e9 f7       	brne	.-6      	; 0xcdd0 <StrCalc+0x194>
    cdd6:	31 97       	sbiw	r30, 0x01	; 1
    cdd8:	8e 2f       	mov	r24, r30
    cdda:	8c 19       	sub	r24, r12
    cddc:	62 96       	adiw	r28, 0x12	; 18
    cdde:	8f af       	std	Y+63, r24	; 0x3f
    cde0:	62 97       	sbiw	r28, 0x12	; 18
     IsNegative=False;
	 
	 IsNegative=False;
	 IsSwap=False;

	 if (IsMoreThan(tmpB,tmpA)==True){
    cde2:	c6 01       	movw	r24, r12
    cde4:	b7 01       	movw	r22, r14
    cde6:	0e 94 50 64 	call	0xc8a0	; 0xc8a0 <IsMoreThan>
    cdea:	6e 96       	adiw	r28, 0x1e	; 30
    cdec:	2f ad       	ldd	r18, Y+63	; 0x3f
    cdee:	6e 97       	sbiw	r28, 0x1e	; 30
    cdf0:	81 30       	cpi	r24, 0x01	; 1
    cdf2:	09 f0       	breq	.+2      	; 0xcdf6 <StrCalc+0x1ba>
    cdf4:	4b c0       	rjmp	.+150    	; 0xce8c <StrCalc+0x250>
	     IsSwap=True;
         sprintf_P(tmpC,PSTR("%s"),tmpA);
    cdf6:	00 d0       	rcall	.+0      	; 0xcdf8 <StrCalc+0x1bc>
    cdf8:	00 d0       	rcall	.+0      	; 0xcdfa <StrCalc+0x1be>
    cdfa:	00 d0       	rcall	.+0      	; 0xcdfc <StrCalc+0x1c0>
    cdfc:	ed b7       	in	r30, 0x3d	; 61
    cdfe:	fe b7       	in	r31, 0x3e	; 62
    ce00:	31 96       	adiw	r30, 0x01	; 1
    ce02:	89 e2       	ldi	r24, 0x29	; 41
    ce04:	a8 2e       	mov	r10, r24
    ce06:	b1 2c       	mov	r11, r1
    ce08:	ac 0e       	add	r10, r28
    ce0a:	bd 1e       	adc	r11, r29
    ce0c:	ad b7       	in	r26, 0x3d	; 61
    ce0e:	be b7       	in	r27, 0x3e	; 62
    ce10:	12 96       	adiw	r26, 0x02	; 2
    ce12:	bc 92       	st	X, r11
    ce14:	ae 92       	st	-X, r10
    ce16:	11 97       	sbiw	r26, 0x01	; 1
    ce18:	89 ed       	ldi	r24, 0xD9	; 217
    ce1a:	96 e0       	ldi	r25, 0x06	; 6
    ce1c:	93 83       	std	Z+3, r25	; 0x03
    ce1e:	82 83       	std	Z+2, r24	; 0x02
    ce20:	f5 82       	std	Z+5, r15	; 0x05
    ce22:	e4 82       	std	Z+4, r14	; 0x04
    ce24:	6e 96       	adiw	r28, 0x1e	; 30
    ce26:	2f af       	std	Y+63, r18	; 0x3f
    ce28:	6e 97       	sbiw	r28, 0x1e	; 30
    ce2a:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		 sprintf_P(tmpA,PSTR("%s"),tmpB);
    ce2e:	ed b7       	in	r30, 0x3d	; 61
    ce30:	fe b7       	in	r31, 0x3e	; 62
    ce32:	31 96       	adiw	r30, 0x01	; 1
    ce34:	ad b7       	in	r26, 0x3d	; 61
    ce36:	be b7       	in	r27, 0x3e	; 62
    ce38:	12 96       	adiw	r26, 0x02	; 2
    ce3a:	fc 92       	st	X, r15
    ce3c:	ee 92       	st	-X, r14
    ce3e:	11 97       	sbiw	r26, 0x01	; 1
    ce40:	86 ed       	ldi	r24, 0xD6	; 214
    ce42:	96 e0       	ldi	r25, 0x06	; 6
    ce44:	93 83       	std	Z+3, r25	; 0x03
    ce46:	82 83       	std	Z+2, r24	; 0x02
    ce48:	d5 82       	std	Z+5, r13	; 0x05
    ce4a:	c4 82       	std	Z+4, r12	; 0x04
    ce4c:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		 sprintf_P(tmpB,PSTR("%s"),tmpC);
    ce50:	ed b7       	in	r30, 0x3d	; 61
    ce52:	fe b7       	in	r31, 0x3e	; 62
    ce54:	31 96       	adiw	r30, 0x01	; 1
    ce56:	ad b7       	in	r26, 0x3d	; 61
    ce58:	be b7       	in	r27, 0x3e	; 62
    ce5a:	12 96       	adiw	r26, 0x02	; 2
    ce5c:	dc 92       	st	X, r13
    ce5e:	ce 92       	st	-X, r12
    ce60:	11 97       	sbiw	r26, 0x01	; 1
    ce62:	83 ed       	ldi	r24, 0xD3	; 211
    ce64:	96 e0       	ldi	r25, 0x06	; 6
    ce66:	93 83       	std	Z+3, r25	; 0x03
    ce68:	82 83       	std	Z+2, r24	; 0x02
    ce6a:	b5 82       	std	Z+5, r11	; 0x05
    ce6c:	a4 82       	std	Z+4, r10	; 0x04
    ce6e:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    ce72:	ed b7       	in	r30, 0x3d	; 61
    ce74:	fe b7       	in	r31, 0x3e	; 62
    ce76:	36 96       	adiw	r30, 0x06	; 6
    ce78:	0f b6       	in	r0, 0x3f	; 63
    ce7a:	f8 94       	cli
    ce7c:	fe bf       	out	0x3e, r31	; 62
    ce7e:	0f be       	out	0x3f, r0	; 63
    ce80:	ed bf       	out	0x3d, r30	; 61
	 
	 IsNegative=False;
	 IsSwap=False;

	 if (IsMoreThan(tmpB,tmpA)==True){
	     IsSwap=True;
    ce82:	81 e0       	ldi	r24, 0x01	; 1
    ce84:	6e 96       	adiw	r28, 0x1e	; 30
    ce86:	2f ad       	ldd	r18, Y+63	; 0x3f
    ce88:	6e 97       	sbiw	r28, 0x1e	; 30
    ce8a:	01 c0       	rjmp	.+2      	; 0xce8e <StrCalc+0x252>
     lenA=strlen(tmpA);
     lenB=strlen(tmpB);
     IsNegative=False;
	 
	 IsNegative=False;
	 IsSwap=False;
    ce8c:	80 e0       	ldi	r24, 0x00	; 0
         sprintf_P(tmpC,PSTR("%s"),tmpA);
		 sprintf_P(tmpA,PSTR("%s"),tmpB);
		 sprintf_P(tmpB,PSTR("%s"),tmpC);
	 }
    
	if (TOperation==TMINUS){
    ce8e:	67 96       	adiw	r28, 0x17	; 23
    ce90:	ff ad       	ldd	r31, Y+63	; 0x3f
    ce92:	67 97       	sbiw	r28, 0x17	; 23
    ce94:	ff 23       	and	r31, r31
    ce96:	b9 f4       	brne	.+46     	; 0xcec6 <StrCalc+0x28a>
	    TCalc=TOperation;
		IsNegative=False;
		if (IsSwap==True){
    ce98:	81 30       	cpi	r24, 0x01	; 1
    ce9a:	59 f4       	brne	.+22     	; 0xceb2 <StrCalc+0x276>
		    if ((IsMinA==True)&&(IsMinB==True)){IsNegative=False;TCalc=TMINUS;}
    ce9c:	39 2d       	mov	r19, r9
    ce9e:	31 30       	cpi	r19, 0x01	; 1
    cea0:	21 f4       	brne	.+8      	; 0xceaa <StrCalc+0x26e>
    cea2:	21 30       	cpi	r18, 0x01	; 1
    cea4:	09 f0       	breq	.+2      	; 0xcea8 <StrCalc+0x26c>
    cea6:	ea c1       	rjmp	.+980    	; 0xd27c <StrCalc+0x640>
    cea8:	29 c0       	rjmp	.+82     	; 0xcefc <StrCalc+0x2c0>
            else if ((IsMinA==True)&&(IsMinB==False)){IsNegative=True;TCalc=TPLUS;}
            else if ((IsMinA==False)&&(IsMinB==True)){IsNegative=False;TCalc=TPLUS;}
    ceaa:	21 30       	cpi	r18, 0x01	; 1
    ceac:	09 f0       	breq	.+2      	; 0xceb0 <StrCalc+0x274>
    ceae:	e2 c1       	rjmp	.+964    	; 0xd274 <StrCalc+0x638>
    ceb0:	e3 c1       	rjmp	.+966    	; 0xd278 <StrCalc+0x63c>
            else if ((IsMinA==False)&&(IsMinB==False)){IsNegative=True;TCalc=TMINUS;}
		}else
		if (IsSwap==False){
		    if ((IsMinA==True)&&(IsMinB==True)){IsNegative=True;TCalc=TMINUS;}
    ceb2:	49 2d       	mov	r20, r9
    ceb4:	41 30       	cpi	r20, 0x01	; 1
    ceb6:	21 f4       	brne	.+8      	; 0xcec0 <StrCalc+0x284>
    ceb8:	21 30       	cpi	r18, 0x01	; 1
    ceba:	09 f0       	breq	.+2      	; 0xcebe <StrCalc+0x282>
    cebc:	df c1       	rjmp	.+958    	; 0xd27c <StrCalc+0x640>
    cebe:	da c1       	rjmp	.+948    	; 0xd274 <StrCalc+0x638>
            else if ((IsMinA==True)&&(IsMinB==False)){IsNegative=True;TCalc=TPLUS;}
            else if ((IsMinA==False)&&(IsMinB==True)){IsNegative=False;TCalc=TPLUS;}
    cec0:	21 30       	cpi	r18, 0x01	; 1
    cec2:	e1 f4       	brne	.+56     	; 0xcefc <StrCalc+0x2c0>
    cec4:	d9 c1       	rjmp	.+946    	; 0xd278 <StrCalc+0x63c>
            else if ((IsMinA==False)&&(IsMinB==False)){IsNegative=False;TCalc=TMINUS;}
		}
	 }else
	if (TOperation==TPLUS){
    cec6:	67 96       	adiw	r28, 0x17	; 23
    cec8:	5f ad       	ldd	r21, Y+63	; 0x3f
    ceca:	67 97       	sbiw	r28, 0x17	; 23
    cecc:	51 30       	cpi	r21, 0x01	; 1
    cece:	b1 f4       	brne	.+44     	; 0xcefc <StrCalc+0x2c0>
	    TCalc=TOperation;
		IsNegative=False;
		if (IsSwap==True){
    ced0:	81 30       	cpi	r24, 0x01	; 1
    ced2:	51 f4       	brne	.+20     	; 0xcee8 <StrCalc+0x2ac>
		    if ((IsMinA==True)&&(IsMinB==True)){IsNegative=True;TCalc=TPLUS;}
    ced4:	89 2d       	mov	r24, r9
    ced6:	81 30       	cpi	r24, 0x01	; 1
    ced8:	19 f4       	brne	.+6      	; 0xcee0 <StrCalc+0x2a4>
    ceda:	21 30       	cpi	r18, 0x01	; 1
    cedc:	79 f4       	brne	.+30     	; 0xcefc <StrCalc+0x2c0>
    cede:	ce c1       	rjmp	.+924    	; 0xd27c <StrCalc+0x640>
            else if ((IsMinA==True)&&(IsMinB==False)){IsNegative=False;TCalc=TMINUS;}
            else if ((IsMinA==False)&&(IsMinB==True)){IsNegative=True;TCalc=TMINUS;}
    cee0:	21 30       	cpi	r18, 0x01	; 1
    cee2:	09 f0       	breq	.+2      	; 0xcee6 <StrCalc+0x2aa>
    cee4:	c9 c1       	rjmp	.+914    	; 0xd278 <StrCalc+0x63c>
    cee6:	c6 c1       	rjmp	.+908    	; 0xd274 <StrCalc+0x638>
            else if ((IsMinA==False)&&(IsMinB==False)){IsNegative=False;TCalc=TPLUS;}
		}else
		if (IsSwap==False){
		    if ((IsMinA==True)&&(IsMinB==True)){IsNegative=True;TCalc=TPLUS;}
    cee8:	99 2d       	mov	r25, r9
    ceea:	91 30       	cpi	r25, 0x01	; 1
    ceec:	21 f4       	brne	.+8      	; 0xcef6 <StrCalc+0x2ba>
    ceee:	21 30       	cpi	r18, 0x01	; 1
    cef0:	09 f0       	breq	.+2      	; 0xcef4 <StrCalc+0x2b8>
    cef2:	c0 c1       	rjmp	.+896    	; 0xd274 <StrCalc+0x638>
    cef4:	c3 c1       	rjmp	.+902    	; 0xd27c <StrCalc+0x640>
            else if ((IsMinA==True)&&(IsMinB==False)){IsNegative=True;TCalc=TMINUS;}
            else if ((IsMinA==False)&&(IsMinB==True)){IsNegative=False;TCalc=TMINUS;}
    cef6:	21 30       	cpi	r18, 0x01	; 1
    cef8:	09 f0       	breq	.+2      	; 0xcefc <StrCalc+0x2c0>
    cefa:	be c1       	rjmp	.+892    	; 0xd278 <StrCalc+0x63c>

     lenA=strlen(tmpA);
     lenB=strlen(tmpB);
     IsNegative=False;
	 
	 IsNegative=False;
    cefc:	20 e0       	ldi	r18, 0x00	; 0

	 if (TCalc==TMINUS){
	     for(i=0;i<lenA;i++){		 
		     if (Ord(tmpA[lenA-i-1])>=Ord(tmpB[lenB-i-1])){
			 //Cukup
			     Result[lenA-i-1]=Chr(Ord(tmpA[lenA-i-1])-Ord(tmpB[lenB-i-1]));
    cefe:	66 96       	adiw	r28, 0x16	; 22
    cf00:	af ad       	ldd	r26, Y+63	; 0x3f
    cf02:	66 97       	sbiw	r28, 0x16	; 22
    cf04:	4a 2e       	mov	r4, r26
    cf06:	55 24       	eor	r5, r5
    cf08:	f2 01       	movw	r30, r4
    cf0a:	31 97       	sbiw	r30, 0x01	; 1
    cf0c:	65 96       	adiw	r28, 0x15	; 21
    cf0e:	ff af       	std	Y+63, r31	; 0x3f
    cf10:	ee af       	std	Y+62, r30	; 0x3e
    cf12:	65 97       	sbiw	r28, 0x15	; 21
     
	 //if (NinePos<Length-4)
	 StrCalc(TPLUS,strMaxValue,strOverflowed,strOverflowed);
}
                                                                   //     1111111 
void StrCalc(char TOperation, char *strA , char *strB, char *strC){//  A: 00000000
    cf14:	bd e3       	ldi	r27, 0x3D	; 61
    cf16:	eb 2e       	mov	r14, r27
    cf18:	f1 2c       	mov	r15, r1
    cf1a:	ec 0e       	add	r14, r28
    cf1c:	fd 1e       	adc	r15, r29
    cf1e:	ee 0e       	add	r14, r30
    cf20:	ff 1e       	adc	r15, r31
    cf22:	4e 01       	movw	r8, r28
    cf24:	08 94       	sec
    cf26:	81 1c       	adc	r8, r1
    cf28:	91 1c       	adc	r9, r1
    cf2a:	54 01       	movw	r10, r8
    cf2c:	a4 0c       	add	r10, r4
    cf2e:	b5 1c       	adc	r11, r5
    cf30:	62 96       	adiw	r28, 0x12	; 18
    cf32:	ff ad       	ldd	r31, Y+63	; 0x3f
    cf34:	62 97       	sbiw	r28, 0x12	; 18
    cf36:	8f 2f       	mov	r24, r31
    cf38:	90 e0       	ldi	r25, 0x00	; 0
    cf3a:	a5 e1       	ldi	r26, 0x15	; 21
    cf3c:	ca 2e       	mov	r12, r26
    cf3e:	d1 2c       	mov	r13, r1
    cf40:	cc 0e       	add	r12, r28
    cf42:	dd 1e       	adc	r13, r29
    cf44:	c8 0e       	add	r12, r24
    cf46:	d9 1e       	adc	r13, r25
    cf48:	66 24       	eor	r6, r6
    cf4a:	63 94       	inc	r6
    cf4c:	68 96       	adiw	r28, 0x18	; 24
    cf4e:	2f af       	std	Y+63, r18	; 0x3f
    cf50:	68 97       	sbiw	r28, 0x18	; 24
    cf52:	5f c0       	rjmp	.+190    	; 0xd012 <StrCalc+0x3d6>
    cf54:	08 94       	sec
    cf56:	a1 08       	sbc	r10, r1
    cf58:	b1 08       	sbc	r11, r1
    cf5a:	63 96       	adiw	r28, 0x13	; 19
    cf5c:	bf ae       	std	Y+63, r11	; 0x3f
    cf5e:	ae ae       	std	Y+62, r10	; 0x3e
    cf60:	63 97       	sbiw	r28, 0x13	; 19
   // -----------
   // C: 099999

	 if (TCalc==TMINUS){
	     for(i=0;i<lenA;i++){		 
		     if (Ord(tmpA[lenA-i-1])>=Ord(tmpB[lenB-i-1])){
    cf62:	d5 01       	movw	r26, r10
    cf64:	8c 91       	ld	r24, X
    cf66:	0e 94 30 61 	call	0xc260	; 0xc260 <Ord>
    cf6a:	28 2e       	mov	r2, r24
    cf6c:	08 94       	sec
    cf6e:	c1 08       	sbc	r12, r1
    cf70:	d1 08       	sbc	r13, r1
    cf72:	f6 01       	movw	r30, r12
    cf74:	80 81       	ld	r24, Z
    cf76:	0e 94 30 61 	call	0xc260	; 0xc260 <Ord>
    cf7a:	78 2e       	mov	r7, r24
    cf7c:	28 16       	cp	r2, r24
    cf7e:	70 f1       	brcs	.+92     	; 0xcfdc <StrCalc+0x3a0>
			 //Cukup
			     Result[lenA-i-1]=Chr(Ord(tmpA[lenA-i-1])-Ord(tmpB[lenB-i-1]));
    cf80:	82 2d       	mov	r24, r2
    cf82:	87 19       	sub	r24, r7
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
    cf84:	8a 30       	cpi	r24, 0x0A	; 10
    cf86:	10 f4       	brcc	.+4      	; 0xcf8c <StrCalc+0x350>
	    Result='0'+X;
    cf88:	80 5d       	subi	r24, 0xD0	; 208
    cf8a:	01 c0       	rjmp	.+2      	; 0xcf8e <StrCalc+0x352>
	 }if (nZerro==Length) Result=True;
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
    cf8c:	80 e3       	ldi	r24, 0x30	; 48

	 if (TCalc==TMINUS){
	     for(i=0;i<lenA;i++){		 
		     if (Ord(tmpA[lenA-i-1])>=Ord(tmpB[lenB-i-1])){
			 //Cukup
			     Result[lenA-i-1]=Chr(Ord(tmpA[lenA-i-1])-Ord(tmpB[lenB-i-1]));
    cf8e:	d7 01       	movw	r26, r14
    cf90:	8c 93       	st	X, r24
    cf92:	3b c0       	rjmp	.+118    	; 0xd00a <StrCalc+0x3ce>
			 }else
			 if (Ord(tmpA[lenA-i-1])<Ord(tmpB[lenB-i-1])){
			 //Pinjaman
			     for(j=i+1;j<lenA;j++){
				     if (tmpA[lenA-j-1]=='0')tmpA[lenA-j-1]='9';
    cf94:	65 96       	adiw	r28, 0x15	; 21
    cf96:	2e ac       	ldd	r2, Y+62	; 0x3e
    cf98:	3f ac       	ldd	r3, Y+63	; 0x3f
    cf9a:	65 97       	sbiw	r28, 0x15	; 21
    cf9c:	29 1a       	sub	r2, r25
    cf9e:	31 08       	sbc	r3, r1
    cfa0:	e1 e0       	ldi	r30, 0x01	; 1
    cfa2:	f0 e0       	ldi	r31, 0x00	; 0
    cfa4:	ec 0f       	add	r30, r28
    cfa6:	fd 1f       	adc	r31, r29
    cfa8:	e2 0d       	add	r30, r2
    cfaa:	f3 1d       	adc	r31, r3
    cfac:	80 81       	ld	r24, Z
    cfae:	80 33       	cpi	r24, 0x30	; 48
    cfb0:	21 f4       	brne	.+8      	; 0xcfba <StrCalc+0x37e>
    cfb2:	b9 e3       	ldi	r27, 0x39	; 57
    cfb4:	b0 83       	st	Z, r27
			 //Cukup
			     Result[lenA-i-1]=Chr(Ord(tmpA[lenA-i-1])-Ord(tmpB[lenB-i-1]));
			 }else
			 if (Ord(tmpA[lenA-i-1])<Ord(tmpB[lenB-i-1])){
			 //Pinjaman
			     for(j=i+1;j<lenA;j++){
    cfb6:	9f 5f       	subi	r25, 0xFF	; 255
    cfb8:	12 c0       	rjmp	.+36     	; 0xcfde <StrCalc+0x3a2>
				     if (tmpA[lenA-j-1]=='0')tmpA[lenA-j-1]='9';
					 else
					 if (tmpA[lenA-j-1]!='0'){
					     tmpA[lenA-j-1]=Chr(Ord(tmpA[lenA-j-1])-1);
    cfba:	0e 94 30 61 	call	0xc260	; 0xc260 <Ord>
    cfbe:	98 2f       	mov	r25, r24
    cfc0:	91 50       	subi	r25, 0x01	; 1
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
    cfc2:	9a 30       	cpi	r25, 0x0A	; 10
    cfc4:	10 f4       	brcc	.+4      	; 0xcfca <StrCalc+0x38e>
	    Result='0'+X;
    cfc6:	81 5d       	subi	r24, 0xD1	; 209
    cfc8:	01 c0       	rjmp	.+2      	; 0xcfcc <StrCalc+0x390>
	 }if (nZerro==Length) Result=True;
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
    cfca:	80 e3       	ldi	r24, 0x30	; 48
			 //Pinjaman
			     for(j=i+1;j<lenA;j++){
				     if (tmpA[lenA-j-1]=='0')tmpA[lenA-j-1]='9';
					 else
					 if (tmpA[lenA-j-1]!='0'){
					     tmpA[lenA-j-1]=Chr(Ord(tmpA[lenA-j-1])-1);
    cfcc:	e1 e0       	ldi	r30, 0x01	; 1
    cfce:	f0 e0       	ldi	r31, 0x00	; 0
    cfd0:	ec 0f       	add	r30, r28
    cfd2:	fd 1f       	adc	r31, r29
    cfd4:	e2 0d       	add	r30, r2
    cfd6:	f3 1d       	adc	r31, r3
    cfd8:	80 83       	st	Z, r24
						 break;
    cfda:	06 c0       	rjmp	.+12     	; 0xcfe8 <StrCalc+0x3ac>
			 //Cukup
			     Result[lenA-i-1]=Chr(Ord(tmpA[lenA-i-1])-Ord(tmpB[lenB-i-1]));
			 }else
			 if (Ord(tmpA[lenA-i-1])<Ord(tmpB[lenB-i-1])){
			 //Pinjaman
			     for(j=i+1;j<lenA;j++){
    cfdc:	96 2d       	mov	r25, r6
    cfde:	66 96       	adiw	r28, 0x16	; 22
    cfe0:	ef ad       	ldd	r30, Y+63	; 0x3f
    cfe2:	66 97       	sbiw	r28, 0x16	; 22
    cfe4:	9e 17       	cp	r25, r30
    cfe6:	b0 f2       	brcs	.-84     	; 0xcf94 <StrCalc+0x358>
					 if (tmpA[lenA-j-1]!='0'){
					     tmpA[lenA-j-1]=Chr(Ord(tmpA[lenA-j-1])-1);
						 break;
					 }				 
				 }
				 Result[lenA-i-1]=Chr(10+Ord(tmpA[lenA-i-1])-Ord(tmpB[lenB-i-1]));
    cfe8:	63 96       	adiw	r28, 0x13	; 19
    cfea:	ae ad       	ldd	r26, Y+62	; 0x3e
    cfec:	bf ad       	ldd	r27, Y+63	; 0x3f
    cfee:	63 97       	sbiw	r28, 0x13	; 19
    cff0:	8c 91       	ld	r24, X
    cff2:	0e 94 30 61 	call	0xc260	; 0xc260 <Ord>
    cff6:	9a e0       	ldi	r25, 0x0A	; 10
    cff8:	97 19       	sub	r25, r7
    cffa:	98 0f       	add	r25, r24
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
    cffc:	9a 30       	cpi	r25, 0x0A	; 10
    cffe:	10 f4       	brcc	.+4      	; 0xd004 <StrCalc+0x3c8>
	    Result='0'+X;
    d000:	90 5d       	subi	r25, 0xD0	; 208
    d002:	01 c0       	rjmp	.+2      	; 0xd006 <StrCalc+0x3ca>
	 }if (nZerro==Length) Result=True;
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
    d004:	90 e3       	ldi	r25, 0x30	; 48
					 if (tmpA[lenA-j-1]!='0'){
					     tmpA[lenA-j-1]=Chr(Ord(tmpA[lenA-j-1])-1);
						 break;
					 }				 
				 }
				 Result[lenA-i-1]=Chr(10+Ord(tmpA[lenA-i-1])-Ord(tmpB[lenB-i-1]));
    d006:	f7 01       	movw	r30, r14
    d008:	90 83       	st	Z, r25
    d00a:	63 94       	inc	r6
    d00c:	08 94       	sec
    d00e:	e1 08       	sbc	r14, r1
    d010:	f1 08       	sbc	r15, r1
   // B: 000001 -
   // -----------
   // C: 099999

	 if (TCalc==TMINUS){
	     for(i=0;i<lenA;i++){		 
    d012:	a8 14       	cp	r10, r8
    d014:	b9 04       	cpc	r11, r9
    d016:	09 f0       	breq	.+2      	; 0xd01a <StrCalc+0x3de>
    d018:	9d cf       	rjmp	.-198    	; 0xcf54 <StrCalc+0x318>
    d01a:	68 96       	adiw	r28, 0x18	; 24
    d01c:	2f ad       	ldd	r18, Y+63	; 0x3f
    d01e:	68 97       	sbiw	r28, 0x18	; 24
						 break;
					 }				 
				 }
				 Result[lenA-i-1]=Chr(10+Ord(tmpA[lenA-i-1])-Ord(tmpB[lenB-i-1]));
			 }
		 }Result[lenA]=0;		    
    d020:	fd e3       	ldi	r31, 0x3D	; 61
    d022:	ef 2e       	mov	r14, r31
    d024:	f1 2c       	mov	r15, r1
    d026:	ec 0e       	add	r14, r28
    d028:	fd 1e       	adc	r15, r29
    d02a:	f7 01       	movw	r30, r14
    d02c:	e4 0d       	add	r30, r4
    d02e:	f5 1d       	adc	r31, r5
    d030:	10 82       	st	Z, r1
       RemZeroLead(Result);
    d032:	c7 01       	movw	r24, r14
    d034:	6e 96       	adiw	r28, 0x1e	; 30
    d036:	2f af       	std	Y+63, r18	; 0x3f
    d038:	6e 97       	sbiw	r28, 0x1e	; 30
    d03a:	0e 94 93 39 	call	0x7326	; 0x7326 <RemZeroLead>
//	 sprintf_P(strSend,PSTR("C':%s"),Result);
//	 uart_print(0,1,strSend);
		 
		 FixLen=strlen(Result);
    d03e:	f7 01       	movw	r30, r14
    d040:	01 90       	ld	r0, Z+
    d042:	00 20       	and	r0, r0
    d044:	e9 f7       	brne	.-6      	; 0xd040 <StrCalc+0x404>
    d046:	31 97       	sbiw	r30, 0x01	; 1
    d048:	ee 19       	sub	r30, r14
    d04a:	d7 01       	movw	r26, r14
		 iPos=0;
    d04c:	30 e0       	ldi	r19, 0x00	; 0
		 for(i=0;i<FixLen;i++){
    d04e:	40 e0       	ldi	r20, 0x00	; 0
		     if ((i==0)&&(IsNegative==True)){
			     strC[iPos]='-';
    d050:	5d e2       	ldi	r21, 0x2D	; 45
    d052:	7e 2f       	mov	r23, r30
    d054:	6e 96       	adiw	r28, 0x1e	; 30
    d056:	2f ad       	ldd	r18, Y+63	; 0x3f
    d058:	6e 97       	sbiw	r28, 0x1e	; 30
//	 sprintf_P(strSend,PSTR("C':%s"),Result);
//	 uart_print(0,1,strSend);
		 
		 FixLen=strlen(Result);
		 iPos=0;
		 for(i=0;i<FixLen;i++){
    d05a:	12 c0       	rjmp	.+36     	; 0xd080 <StrCalc+0x444>
		     if ((i==0)&&(IsNegative==True)){
    d05c:	44 23       	and	r20, r20
    d05e:	41 f4       	brne	.+16     	; 0xd070 <StrCalc+0x434>
    d060:	21 30       	cpi	r18, 0x01	; 1
    d062:	31 f4       	brne	.+12     	; 0xd070 <StrCalc+0x434>
			     strC[iPos]='-';
    d064:	c8 01       	movw	r24, r16
    d066:	83 0f       	add	r24, r19
    d068:	91 1d       	adc	r25, r1
    d06a:	fc 01       	movw	r30, r24
    d06c:	50 83       	st	Z, r21
				 iPos++;
    d06e:	3f 5f       	subi	r19, 0xFF	; 255
			 }
		     strC[iPos]=Result[i];
    d070:	6d 91       	ld	r22, X+
    d072:	c8 01       	movw	r24, r16
    d074:	83 0f       	add	r24, r19
    d076:	91 1d       	adc	r25, r1
    d078:	fc 01       	movw	r30, r24
    d07a:	60 83       	st	Z, r22
			 iPos++;
    d07c:	3f 5f       	subi	r19, 0xFF	; 255
//	 sprintf_P(strSend,PSTR("C':%s"),Result);
//	 uart_print(0,1,strSend);
		 
		 FixLen=strlen(Result);
		 iPos=0;
		 for(i=0;i<FixLen;i++){
    d07e:	4f 5f       	subi	r20, 0xFF	; 255
    d080:	47 17       	cp	r20, r23
    d082:	60 f3       	brcs	.-40     	; 0xd05c <StrCalc+0x420>
			     strC[iPos]='-';
				 iPos++;
			 }
		     strC[iPos]=Result[i];
			 iPos++;
		 }strC[iPos]=0;
    d084:	f8 01       	movw	r30, r16
    d086:	e3 0f       	add	r30, r19
    d088:	f1 1d       	adc	r31, r1
    d08a:	10 82       	st	Z, r1
    d08c:	e2 c0       	rjmp	.+452    	; 0xd252 <StrCalc+0x616>
	 }
	 else                     //         1
	 if (TCalc==TPLUS){  //A:099999999
    d08e:	ed e3       	ldi	r30, 0x3D	; 61
    d090:	ce 2e       	mov	r12, r30
    d092:	d1 2c       	mov	r13, r1
    d094:	cc 0e       	add	r12, r28
    d096:	dd 1e       	adc	r13, r29
     
	 //if (NinePos<Length-4)
	 StrCalc(TPLUS,strMaxValue,strOverflowed,strOverflowed);
}
                                                                   //     1111111 
void StrCalc(char TOperation, char *strA , char *strB, char *strC){//  A: 00000000
    d098:	66 96       	adiw	r28, 0x16	; 22
    d09a:	ff ad       	ldd	r31, Y+63	; 0x3f
    d09c:	66 97       	sbiw	r28, 0x16	; 22
    d09e:	6f 2e       	mov	r6, r31
    d0a0:	77 24       	eor	r7, r7
    d0a2:	1e 01       	movw	r2, r28
    d0a4:	08 94       	sec
    d0a6:	21 1c       	adc	r2, r1
    d0a8:	31 1c       	adc	r3, r1
    d0aa:	51 01       	movw	r10, r2
    d0ac:	a6 0c       	add	r10, r6
    d0ae:	b7 1c       	adc	r11, r7
    d0b0:	62 96       	adiw	r28, 0x12	; 18
    d0b2:	3f ad       	ldd	r19, Y+63	; 0x3f
    d0b4:	62 97       	sbiw	r28, 0x12	; 18
    d0b6:	83 2f       	mov	r24, r19
    d0b8:	90 e0       	ldi	r25, 0x00	; 0
    d0ba:	75 e1       	ldi	r23, 0x15	; 21
    d0bc:	e7 2e       	mov	r14, r23
    d0be:	f1 2c       	mov	r15, r1
    d0c0:	ec 0e       	add	r14, r28
    d0c2:	fd 1e       	adc	r15, r29
    d0c4:	e8 0e       	add	r14, r24
    d0c6:	f9 1e       	adc	r15, r25
    d0c8:	99 24       	eor	r9, r9
    d0ca:	93 94       	inc	r9
    d0cc:	90 e0       	ldi	r25, 0x00	; 0
	 }
	 else                     //         1
	 if (TCalc==TPLUS){  //A:099999999
	     zMin=0;              //B:000000001
	     for(i=0;i<lenA;i++){ //C:       00
		     newC=(Ord(tmpA[lenA-i-1])+Ord(tmpB[lenB-i-1]));			 
    d0ce:	a3 01       	movw	r20, r6
    d0d0:	41 50       	subi	r20, 0x01	; 1
    d0d2:	50 40       	sbci	r21, 0x00	; 0
    d0d4:	69 96       	adiw	r28, 0x19	; 25
    d0d6:	5f af       	std	Y+63, r21	; 0x3f
    d0d8:	4e af       	std	Y+62, r20	; 0x3e
    d0da:	69 97       	sbiw	r28, 0x19	; 25
    d0dc:	82 2e       	mov	r8, r18
    d0de:	28 01       	movw	r4, r16
    d0e0:	7a c0       	rjmp	.+244    	; 0xd1d6 <StrCalc+0x59a>
    d0e2:	08 94       	sec
    d0e4:	a1 08       	sbc	r10, r1
    d0e6:	b1 08       	sbc	r11, r1
    d0e8:	d5 01       	movw	r26, r10
    d0ea:	8c 91       	ld	r24, X
    d0ec:	0e 94 30 61 	call	0xc260	; 0xc260 <Ord>
    d0f0:	08 2f       	mov	r16, r24
    d0f2:	08 94       	sec
    d0f4:	e1 08       	sbc	r14, r1
    d0f6:	f1 08       	sbc	r15, r1
    d0f8:	f7 01       	movw	r30, r14
    d0fa:	80 81       	ld	r24, Z
    d0fc:	0e 94 30 61 	call	0xc260	; 0xc260 <Ord>
    d100:	80 0f       	add	r24, r16
			 if (newC<10){
    d102:	8a 30       	cpi	r24, 0x0A	; 10
    d104:	20 f4       	brcc	.+8      	; 0xd10e <StrCalc+0x4d2>
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
	    Result='0'+X;
    d106:	80 5d       	subi	r24, 0xD0	; 208
	 if (TCalc==TPLUS){  //A:099999999
	     zMin=0;              //B:000000001
	     for(i=0;i<lenA;i++){ //C:       00
		     newC=(Ord(tmpA[lenA-i-1])+Ord(tmpB[lenB-i-1]));			 
			 if (newC<10){
			     Result[i]=Chr(newC);
    d108:	d6 01       	movw	r26, r12
    d10a:	8c 93       	st	X, r24
    d10c:	52 c0       	rjmp	.+164    	; 0xd1b2 <StrCalc+0x576>
				 zMin=newC/10;
			 }else if (newC>=10){
                 //Lebih
				 Result[i]=Chr(newC%10);
    d10e:	6a e0       	ldi	r22, 0x0A	; 10
    d110:	0e 94 7e a7 	call	0x14efc	; 0x14efc <__udivmodqi4>
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
	    Result='0'+X;
    d114:	90 5d       	subi	r25, 0xD0	; 208
			 if (newC<10){
			     Result[i]=Chr(newC);
				 zMin=newC/10;
			 }else if (newC>=10){
                 //Lebih
				 Result[i]=Chr(newC%10);
    d116:	f6 01       	movw	r30, r12
    d118:	90 83       	st	Z, r25
				 zMin=newC/10;
    d11a:	98 2f       	mov	r25, r24
			     for(j=i+1;j<lenA;j++){
    d11c:	09 2d       	mov	r16, r9
    d11e:	64 96       	adiw	r28, 0x14	; 20
    d120:	9f ae       	std	Y+63, r9	; 0x3f
    d122:	64 97       	sbiw	r28, 0x14	; 20
    d124:	18 2d       	mov	r17, r8
    d126:	45 01       	movw	r8, r10
    d128:	57 01       	movw	r10, r14
    d12a:	45 c0       	rjmp	.+138    	; 0xd1b6 <StrCalc+0x57a>
				     if ((Ord(tmpA[lenA-j-1])+zMin)>=10){
    d12c:	69 96       	adiw	r28, 0x19	; 25
    d12e:	ee ac       	ldd	r14, Y+62	; 0x3e
    d130:	ff ac       	ldd	r15, Y+63	; 0x3f
    d132:	69 97       	sbiw	r28, 0x19	; 25
    d134:	e0 1a       	sub	r14, r16
    d136:	f1 08       	sbc	r15, r1
    d138:	21 e0       	ldi	r18, 0x01	; 1
    d13a:	30 e0       	ldi	r19, 0x00	; 0
    d13c:	2c 0f       	add	r18, r28
    d13e:	3d 1f       	adc	r19, r29
    d140:	2e 0d       	add	r18, r14
    d142:	3f 1d       	adc	r19, r15
    d144:	63 96       	adiw	r28, 0x13	; 19
    d146:	3f af       	std	Y+63, r19	; 0x3f
    d148:	2e af       	std	Y+62, r18	; 0x3e
    d14a:	63 97       	sbiw	r28, 0x13	; 19
    d14c:	d9 01       	movw	r26, r18
    d14e:	8c 91       	ld	r24, X
    d150:	6e 96       	adiw	r28, 0x1e	; 30
    d152:	9f af       	std	Y+63, r25	; 0x3f
    d154:	6e 97       	sbiw	r28, 0x1e	; 30
    d156:	0e 94 30 61 	call	0xc260	; 0xc260 <Ord>
    d15a:	6e 96       	adiw	r28, 0x1e	; 30
    d15c:	9f ad       	ldd	r25, Y+63	; 0x3f
    d15e:	6e 97       	sbiw	r28, 0x1e	; 30
    d160:	29 2f       	mov	r18, r25
    d162:	30 e0       	ldi	r19, 0x00	; 0
    d164:	28 0f       	add	r18, r24
    d166:	31 1d       	adc	r19, r1
    d168:	2a 30       	cpi	r18, 0x0A	; 10
    d16a:	31 05       	cpc	r19, r1
    d16c:	74 f0       	brlt	.+28     	; 0xd18a <StrCalc+0x54e>
					     tmpA[lenA-j-1]=Chr((Ord(tmpA[lenA-j-1])+zMin)%10);
    d16e:	c9 01       	movw	r24, r18
    d170:	6a e0       	ldi	r22, 0x0A	; 10
    d172:	70 e0       	ldi	r23, 0x00	; 0
    d174:	0e 94 ab a7 	call	0x14f56	; 0x14f56 <__divmodhi4>
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
	    Result='0'+X;
    d178:	80 5d       	subi	r24, 0xD0	; 208
                 //Lebih
				 Result[i]=Chr(newC%10);
				 zMin=newC/10;
			     for(j=i+1;j<lenA;j++){
				     if ((Ord(tmpA[lenA-j-1])+zMin)>=10){
					     tmpA[lenA-j-1]=Chr((Ord(tmpA[lenA-j-1])+zMin)%10);
    d17a:	63 96       	adiw	r28, 0x13	; 19
    d17c:	ee ad       	ldd	r30, Y+62	; 0x3e
    d17e:	ff ad       	ldd	r31, Y+63	; 0x3f
    d180:	63 97       	sbiw	r28, 0x13	; 19
    d182:	80 83       	st	Z, r24
				 zMin=newC/10;
			 }else if (newC>=10){
                 //Lebih
				 Result[i]=Chr(newC%10);
				 zMin=newC/10;
			     for(j=i+1;j<lenA;j++){
    d184:	0f 5f       	subi	r16, 0xFF	; 255
				     if ((Ord(tmpA[lenA-j-1])+zMin)>=10){
					     tmpA[lenA-j-1]=Chr((Ord(tmpA[lenA-j-1])+zMin)%10);
						 zMin=1;
    d186:	91 e0       	ldi	r25, 0x01	; 1
    d188:	16 c0       	rjmp	.+44     	; 0xd1b6 <StrCalc+0x57a>
    d18a:	a7 01       	movw	r20, r14
    d18c:	75 01       	movw	r14, r10
    d18e:	54 01       	movw	r10, r8
    d190:	64 96       	adiw	r28, 0x14	; 20
    d192:	9f ac       	ldd	r9, Y+63	; 0x3f
    d194:	64 97       	sbiw	r28, 0x14	; 20
    d196:	81 2e       	mov	r8, r17
					 }else{
					     tmpA[lenA-j-1]=Chr((Ord(tmpA[lenA-j-1])+zMin));
    d198:	98 0f       	add	r25, r24
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
    d19a:	9a 30       	cpi	r25, 0x0A	; 10
    d19c:	10 f4       	brcc	.+4      	; 0xd1a2 <StrCalc+0x566>
	    Result='0'+X;
    d19e:	90 5d       	subi	r25, 0xD0	; 208
    d1a0:	01 c0       	rjmp	.+2      	; 0xd1a4 <StrCalc+0x568>
	 }if (nZerro==Length) Result=True;
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
    d1a2:	90 e3       	ldi	r25, 0x30	; 48
			     for(j=i+1;j<lenA;j++){
				     if ((Ord(tmpA[lenA-j-1])+zMin)>=10){
					     tmpA[lenA-j-1]=Chr((Ord(tmpA[lenA-j-1])+zMin)%10);
						 zMin=1;
					 }else{
					     tmpA[lenA-j-1]=Chr((Ord(tmpA[lenA-j-1])+zMin));
    d1a4:	e1 e0       	ldi	r30, 0x01	; 1
    d1a6:	f0 e0       	ldi	r31, 0x00	; 0
    d1a8:	ec 0f       	add	r30, r28
    d1aa:	fd 1f       	adc	r31, r29
    d1ac:	e4 0f       	add	r30, r20
    d1ae:	f5 1f       	adc	r31, r21
    d1b0:	90 83       	st	Z, r25
						 zMin=0;	
    d1b2:	90 e0       	ldi	r25, 0x00	; 0
						 break;			     					 
    d1b4:	0c c0       	rjmp	.+24     	; 0xd1ce <StrCalc+0x592>
				 zMin=newC/10;
			 }else if (newC>=10){
                 //Lebih
				 Result[i]=Chr(newC%10);
				 zMin=newC/10;
			     for(j=i+1;j<lenA;j++){
    d1b6:	66 96       	adiw	r28, 0x16	; 22
    d1b8:	ff ad       	ldd	r31, Y+63	; 0x3f
    d1ba:	66 97       	sbiw	r28, 0x16	; 22
    d1bc:	0f 17       	cp	r16, r31
    d1be:	08 f4       	brcc	.+2      	; 0xd1c2 <StrCalc+0x586>
    d1c0:	b5 cf       	rjmp	.-150    	; 0xd12c <StrCalc+0x4f0>
    d1c2:	75 01       	movw	r14, r10
    d1c4:	54 01       	movw	r10, r8
    d1c6:	64 96       	adiw	r28, 0x14	; 20
    d1c8:	9f ac       	ldd	r9, Y+63	; 0x3f
    d1ca:	64 97       	sbiw	r28, 0x14	; 20
    d1cc:	81 2e       	mov	r8, r17
    d1ce:	93 94       	inc	r9
    d1d0:	08 94       	sec
    d1d2:	c1 1c       	adc	r12, r1
    d1d4:	d1 1c       	adc	r13, r1
		 }strC[iPos]=0;
	 }
	 else                     //         1
	 if (TCalc==TPLUS){  //A:099999999
	     zMin=0;              //B:000000001
	     for(i=0;i<lenA;i++){ //C:       00
    d1d6:	a2 14       	cp	r10, r2
    d1d8:	b3 04       	cpc	r11, r3
    d1da:	09 f0       	breq	.+2      	; 0xd1de <StrCalc+0x5a2>
    d1dc:	82 cf       	rjmp	.-252    	; 0xd0e2 <StrCalc+0x4a6>
    d1de:	28 2d       	mov	r18, r8
    d1e0:	82 01       	movw	r16, r4
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
    d1e2:	9a 30       	cpi	r25, 0x0A	; 10
    d1e4:	10 f4       	brcc	.+4      	; 0xd1ea <StrCalc+0x5ae>
	    Result='0'+X;
    d1e6:	90 5d       	subi	r25, 0xD0	; 208
    d1e8:	01 c0       	rjmp	.+2      	; 0xd1ec <StrCalc+0x5b0>
	 }if (nZerro==Length) Result=True;
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
    d1ea:	90 e3       	ldi	r25, 0x30	; 48
				 }//EndFor j                
			   }//End else
			 }//EndFor

		  //Result[lenA]==Chr(zMin); ???
		  Result[lenA]=Chr(zMin);
    d1ec:	de 01       	movw	r26, r28
    d1ee:	dd 96       	adiw	r26, 0x3d	; 61
    d1f0:	fd 01       	movw	r30, r26
    d1f2:	e6 0d       	add	r30, r6
    d1f4:	f7 1d       	adc	r31, r7
    d1f6:	90 83       	st	Z, r25
		  Result[lenA+1]=0;
    d1f8:	fe 01       	movw	r30, r28
    d1fa:	e6 0d       	add	r30, r6
    d1fc:	f7 1d       	adc	r31, r7
    d1fe:	16 ae       	std	Z+62, r1	; 0x3e
		 FixLen=strlen(Result);
		 for(i=0;i<FixLen;i++){
		     strC[i]=Result[FixLen-i-1];
		 }strC[FixLen]=0;
*/
         FixLen=strlen(Result);
    d200:	fd 01       	movw	r30, r26
    d202:	01 90       	ld	r0, Z+
    d204:	00 20       	and	r0, r0
    d206:	e9 f7       	brne	.-6      	; 0xd202 <StrCalc+0x5c6>
    d208:	31 97       	sbiw	r30, 0x01	; 1
    d20a:	3e 2f       	mov	r19, r30
    d20c:	3a 1b       	sub	r19, r26
     
	 //if (NinePos<Length-4)
	 StrCalc(TPLUS,strMaxValue,strOverflowed,strOverflowed);
}
                                                                   //     1111111 
void StrCalc(char TOperation, char *strA , char *strB, char *strC){//  A: 00000000
    d20e:	e3 2f       	mov	r30, r19
    d210:	f0 e0       	ldi	r31, 0x00	; 0
    d212:	ea 0f       	add	r30, r26
    d214:	fb 1f       	adc	r31, r27
		 for(i=0;i<FixLen;i++){
		     strC[i]=Result[FixLen-i-1];
		 }strC[FixLen]=0;
*/
         FixLen=strlen(Result);
		 iPos=0;
    d216:	80 e0       	ldi	r24, 0x00	; 0
		 for(i=0;i<FixLen;i++){
    d218:	90 e0       	ldi	r25, 0x00	; 0
		     if ((i==0)&&(IsNegative==True)){
			     strC[iPos]='-';
    d21a:	4d e2       	ldi	r20, 0x2D	; 45
		     strC[i]=Result[FixLen-i-1];
		 }strC[FixLen]=0;
*/
         FixLen=strlen(Result);
		 iPos=0;
		 for(i=0;i<FixLen;i++){
    d21c:	11 c0       	rjmp	.+34     	; 0xd240 <StrCalc+0x604>
		     if ((i==0)&&(IsNegative==True)){
    d21e:	99 23       	and	r25, r25
    d220:	39 f4       	brne	.+14     	; 0xd230 <StrCalc+0x5f4>
    d222:	21 30       	cpi	r18, 0x01	; 1
    d224:	29 f4       	brne	.+10     	; 0xd230 <StrCalc+0x5f4>
			     strC[iPos]='-';
    d226:	d8 01       	movw	r26, r16
    d228:	a8 0f       	add	r26, r24
    d22a:	b1 1d       	adc	r27, r1
    d22c:	4c 93       	st	X, r20
				 iPos++;
    d22e:	8f 5f       	subi	r24, 0xFF	; 255
    d230:	31 97       	sbiw	r30, 0x01	; 1
			 }
		     strC[iPos]=Result[FixLen-i-1];
    d232:	d8 01       	movw	r26, r16
    d234:	a8 0f       	add	r26, r24
    d236:	b1 1d       	adc	r27, r1
    d238:	50 81       	ld	r21, Z
    d23a:	5c 93       	st	X, r21
			 iPos++;
    d23c:	8f 5f       	subi	r24, 0xFF	; 255
		     strC[i]=Result[FixLen-i-1];
		 }strC[FixLen]=0;
*/
         FixLen=strlen(Result);
		 iPos=0;
		 for(i=0;i<FixLen;i++){
    d23e:	9f 5f       	subi	r25, 0xFF	; 255
    d240:	93 17       	cp	r25, r19
    d242:	68 f3       	brcs	.-38     	; 0xd21e <StrCalc+0x5e2>
			     strC[iPos]='-';
				 iPos++;
			 }
		     strC[iPos]=Result[FixLen-i-1];
			 iPos++;
		 }strC[iPos]=0;
    d244:	f8 01       	movw	r30, r16
    d246:	e8 0f       	add	r30, r24
    d248:	f1 1d       	adc	r31, r1
    d24a:	10 82       	st	Z, r1

       RemZeroLead(strC);
    d24c:	c8 01       	movw	r24, r16
    d24e:	0e 94 93 39 	call	0x7326	; 0x7326 <RemZeroLead>
  //    sprintf_P(strSend,PSTR("C':%s"),strC);
//	 uart_print(0,1,strSend);

	 }//EndIf 

	 if (TOperation==TMULTIPLY){
    d252:	67 96       	adiw	r28, 0x17	; 23
    d254:	2f ad       	ldd	r18, Y+63	; 0x3f
    d256:	67 97       	sbiw	r28, 0x17	; 23
    d258:	22 30       	cpi	r18, 0x02	; 2
    d25a:	91 f4       	brne	.+36     	; 0xd280 <StrCalc+0x644>
		 valA=atol(strA);
		 valB=atol(strB);
		 valC=valA*valB;		 
         ltoa(valC,strC,10);
		 */
		 CalcMultiply(strA,strB,strC);
    d25c:	6b 96       	adiw	r28, 0x1b	; 27
    d25e:	8e ad       	ldd	r24, Y+62	; 0x3e
    d260:	9f ad       	ldd	r25, Y+63	; 0x3f
    d262:	6b 97       	sbiw	r28, 0x1b	; 27
    d264:	6d 96       	adiw	r28, 0x1d	; 29
    d266:	6e ad       	ldd	r22, Y+62	; 0x3e
    d268:	7f ad       	ldd	r23, Y+63	; 0x3f
    d26a:	6d 97       	sbiw	r28, 0x1d	; 29
    d26c:	a8 01       	movw	r20, r16
    d26e:	0e 94 6b 65 	call	0xcad6	; 0xcad6 <CalcMultiply>
    d272:	06 c0       	rjmp	.+12     	; 0xd280 <StrCalc+0x644>
	    TCalc=TOperation;
		IsNegative=False;
		if (IsSwap==True){
		    if ((IsMinA==True)&&(IsMinB==True)){IsNegative=True;TCalc=TPLUS;}
            else if ((IsMinA==True)&&(IsMinB==False)){IsNegative=False;TCalc=TMINUS;}
            else if ((IsMinA==False)&&(IsMinB==True)){IsNegative=True;TCalc=TMINUS;}
    d274:	21 e0       	ldi	r18, 0x01	; 1
    d276:	43 ce       	rjmp	.-890    	; 0xcefe <StrCalc+0x2c2>
            else if ((IsMinA==False)&&(IsMinB==False)){IsNegative=True;TCalc=TMINUS;}
		}else
		if (IsSwap==False){
		    if ((IsMinA==True)&&(IsMinB==True)){IsNegative=True;TCalc=TMINUS;}
            else if ((IsMinA==True)&&(IsMinB==False)){IsNegative=True;TCalc=TPLUS;}
            else if ((IsMinA==False)&&(IsMinB==True)){IsNegative=False;TCalc=TPLUS;}
    d278:	20 e0       	ldi	r18, 0x00	; 0
    d27a:	09 cf       	rjmp	.-494    	; 0xd08e <StrCalc+0x452>
            else if ((IsMinA==True)&&(IsMinB==False)){IsNegative=False;TCalc=TMINUS;}
            else if ((IsMinA==False)&&(IsMinB==True)){IsNegative=True;TCalc=TMINUS;}
            else if ((IsMinA==False)&&(IsMinB==False)){IsNegative=False;TCalc=TPLUS;}
		}else
		if (IsSwap==False){
		    if ((IsMinA==True)&&(IsMinB==True)){IsNegative=True;TCalc=TPLUS;}
    d27c:	21 e0       	ldi	r18, 0x01	; 1
    d27e:	07 cf       	rjmp	.-498    	; 0xd08e <StrCalc+0x452>
		 valC=valA*valB;		 
         ltoa(valC,strC,10);
		 */
		 CalcMultiply(strA,strB,strC);
	 }
}
    d280:	c3 5a       	subi	r28, 0xA3	; 163
    d282:	df 4f       	sbci	r29, 0xFF	; 255
    d284:	0f b6       	in	r0, 0x3f	; 63
    d286:	f8 94       	cli
    d288:	de bf       	out	0x3e, r29	; 62
    d28a:	0f be       	out	0x3f, r0	; 63
    d28c:	cd bf       	out	0x3d, r28	; 61
    d28e:	cf 91       	pop	r28
    d290:	df 91       	pop	r29
    d292:	1f 91       	pop	r17
    d294:	0f 91       	pop	r16
    d296:	ff 90       	pop	r15
    d298:	ef 90       	pop	r14
    d29a:	df 90       	pop	r13
    d29c:	cf 90       	pop	r12
    d29e:	bf 90       	pop	r11
    d2a0:	af 90       	pop	r10
    d2a2:	9f 90       	pop	r9
    d2a4:	8f 90       	pop	r8
    d2a6:	7f 90       	pop	r7
    d2a8:	6f 90       	pop	r6
    d2aa:	5f 90       	pop	r5
    d2ac:	4f 90       	pop	r4
    d2ae:	3f 90       	pop	r3
    d2b0:	2f 90       	pop	r2
    d2b2:	08 95       	ret

0000d2b4 <NormalizeOverflow>:
		 Length=strlen(strNumber);
		 StrPosCopy(strNumber,strNumber,MinPos,(Length-MinPos));	      
	 }
}

void NormalizeOverflow(char *strOverflowed){
    d2b4:	ef 92       	push	r14
    d2b6:	ff 92       	push	r15
    d2b8:	0f 93       	push	r16
    d2ba:	1f 93       	push	r17
    d2bc:	df 93       	push	r29
    d2be:	cf 93       	push	r28
    d2c0:	cd b7       	in	r28, 0x3d	; 61
    d2c2:	de b7       	in	r29, 0x3e	; 62
    d2c4:	64 97       	sbiw	r28, 0x14	; 20
    d2c6:	0f b6       	in	r0, 0x3f	; 63
    d2c8:	f8 94       	cli
    d2ca:	de bf       	out	0x3e, r29	; 62
    d2cc:	0f be       	out	0x3f, r0	; 63
    d2ce:	cd bf       	out	0x3d, r28	; 61
    d2d0:	9c 01       	movw	r18, r24
char i,Length,strMaxValue[20];//-99999999

     Length=strlen(strOverflowed);//-999453
    d2d2:	fc 01       	movw	r30, r24
    d2d4:	01 90       	ld	r0, Z+
    d2d6:	00 20       	and	r0, r0
    d2d8:	e9 f7       	brne	.-6      	; 0xd2d4 <NormalizeOverflow+0x20>
    d2da:	31 97       	sbiw	r30, 0x01	; 1
    d2dc:	e8 1b       	sub	r30, r24
    d2de:	f0 e0       	ldi	r31, 0x00	; 0
    d2e0:	7e 01       	movw	r14, r28
    d2e2:	08 94       	sec
    d2e4:	e1 1c       	adc	r14, r1
    d2e6:	f1 1c       	adc	r15, r1
    d2e8:	8f 01       	movw	r16, r30
     for(i=0;i<Length;i++){//123456
    d2ea:	09 c0       	rjmp	.+18     	; 0xd2fe <NormalizeOverflow+0x4a>
	     strMaxValue[i]='0'+((Length-i)/Length);
    d2ec:	cf 01       	movw	r24, r30
    d2ee:	b8 01       	movw	r22, r16
    d2f0:	0e 94 ab a7 	call	0x14f56	; 0x14f56 <__divmodhi4>
    d2f4:	60 5d       	subi	r22, 0xD0	; 208
    d2f6:	d7 01       	movw	r26, r14
    d2f8:	6d 93       	st	X+, r22
    d2fa:	7d 01       	movw	r14, r26
    d2fc:	31 97       	sbiw	r30, 0x01	; 1

void NormalizeOverflow(char *strOverflowed){
char i,Length,strMaxValue[20];//-99999999

     Length=strlen(strOverflowed);//-999453
     for(i=0;i<Length;i++){//123456
    d2fe:	30 97       	sbiw	r30, 0x00	; 0
    d300:	a9 f7       	brne	.-22     	; 0xd2ec <NormalizeOverflow+0x38>
	     strMaxValue[i]='0'+((Length-i)/Length);
	 }strMaxValue[Length]=0;
    d302:	be 01       	movw	r22, r28
    d304:	6f 5f       	subi	r22, 0xFF	; 255
    d306:	7f 4f       	sbci	r23, 0xFF	; 255
    d308:	fb 01       	movw	r30, r22
    d30a:	e0 0f       	add	r30, r16
    d30c:	f1 1f       	adc	r31, r17
    d30e:	10 82       	st	Z, r1
     
	 //if (NinePos<Length-4)
	 StrCalc(TPLUS,strMaxValue,strOverflowed,strOverflowed);
    d310:	81 e0       	ldi	r24, 0x01	; 1
    d312:	a9 01       	movw	r20, r18
    d314:	0e 94 1e 66 	call	0xcc3c	; 0xcc3c <StrCalc>
}
    d318:	64 96       	adiw	r28, 0x14	; 20
    d31a:	0f b6       	in	r0, 0x3f	; 63
    d31c:	f8 94       	cli
    d31e:	de bf       	out	0x3e, r29	; 62
    d320:	0f be       	out	0x3f, r0	; 63
    d322:	cd bf       	out	0x3d, r28	; 61
    d324:	cf 91       	pop	r28
    d326:	df 91       	pop	r29
    d328:	1f 91       	pop	r17
    d32a:	0f 91       	pop	r16
    d32c:	ff 90       	pop	r15
    d32e:	ef 90       	pop	r14
    d330:	08 95       	ret

0000d332 <GetTabSpace>:
	     StrCalc(TPLUS,prevSeg,currSeg,prevSeg);
	 }
	 sprintf_P(strC,PSTR("%s"),prevSeg);
}

void GetTabSpace(signed char TabLength, char *strTab){
    d332:	fb 01       	movw	r30, r22
     char i,nTab;
	 if (TabLength>0){
    d334:	18 16       	cp	r1, r24
    d336:	5c f4       	brge	.+22     	; 0xd34e <GetTabSpace+0x1c>
		 nTab=TabLength;//%40;
    d338:	db 01       	movw	r26, r22
		 for(i=0;i<nTab;i++){
    d33a:	90 e0       	ldi	r25, 0x00	; 0
		     strTab[i]=' ';
    d33c:	20 e2       	ldi	r18, 0x20	; 32
    d33e:	2d 93       	st	X+, r18

void GetTabSpace(signed char TabLength, char *strTab){
     char i,nTab;
	 if (TabLength>0){
		 nTab=TabLength;//%40;
		 for(i=0;i<nTab;i++){
    d340:	9f 5f       	subi	r25, 0xFF	; 255
    d342:	98 17       	cp	r25, r24
    d344:	e0 f3       	brcs	.-8      	; 0xd33e <GetTabSpace+0xc>
		     strTab[i]=' ';
		 }strTab[nTab]=0;
    d346:	e8 0f       	add	r30, r24
    d348:	f1 1d       	adc	r31, r1
    d34a:	10 82       	st	Z, r1
    d34c:	08 95       	ret
     }else{
	 strTab[0]=' ';
    d34e:	80 e2       	ldi	r24, 0x20	; 32
    d350:	80 83       	st	Z, r24
	 strTab[1]=0;
    d352:	11 82       	std	Z+1, r1	; 0x01
    d354:	08 95       	ret

0000d356 <GetProductPrice>:
          stGenerateReport=grScanAction;
	      break;
	 }
}
//SaveTotalProduct(xGrade,strDeltaVolume,strDeltaMoney);
void GetProductPrice(char *sPrice,char xPumpID,char xNozzle){
    d356:	cf 92       	push	r12
    d358:	df 92       	push	r13
    d35a:	ef 92       	push	r14
    d35c:	ff 92       	push	r15
    d35e:	0f 93       	push	r16
    d360:	1f 93       	push	r17
    d362:	df 93       	push	r29
    d364:	cf 93       	push	r28
    d366:	cd b7       	in	r28, 0x3d	; 61
    d368:	de b7       	in	r29, 0x3e	; 62
    d36a:	67 97       	sbiw	r28, 0x17	; 23
    d36c:	0f b6       	in	r0, 0x3f	; 63
    d36e:	f8 94       	cli
    d370:	de bf       	out	0x3e, r29	; 62
    d372:	0f be       	out	0x3f, r0	; 63
    d374:	cd bf       	out	0x3d, r28	; 61
    d376:	7c 01       	movw	r14, r24
    d378:	c6 2e       	mov	r12, r22
    d37a:	d4 2e       	mov	r13, r20
char i,PPumpID[8],PProdID[6],strPrice[9],iPumpID,xProductID;
     sprintf_P(sPrice,PSTR(""));
    d37c:	00 d0       	rcall	.+0      	; 0xd37e <GetProductPrice+0x28>
    d37e:	00 d0       	rcall	.+0      	; 0xd380 <GetProductPrice+0x2a>
    d380:	ad b7       	in	r26, 0x3d	; 61
    d382:	be b7       	in	r27, 0x3e	; 62
    d384:	12 96       	adiw	r26, 0x02	; 2
    d386:	9c 93       	st	X, r25
    d388:	8e 93       	st	-X, r24
    d38a:	11 97       	sbiw	r26, 0x01	; 1
    d38c:	8a e2       	ldi	r24, 0x2A	; 42
    d38e:	95 e0       	ldi	r25, 0x05	; 5
    d390:	14 96       	adiw	r26, 0x04	; 4
    d392:	9c 93       	st	X, r25
    d394:	8e 93       	st	-X, r24
    d396:	13 97       	sbiw	r26, 0x03	; 3
    d398:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
     //FindPumpID
	 eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap,8);
    d39c:	0f 90       	pop	r0
    d39e:	0f 90       	pop	r0
    d3a0:	0f 90       	pop	r0
    d3a2:	0f 90       	pop	r0
    d3a4:	8e 01       	movw	r16, r28
    d3a6:	09 5f       	subi	r16, 0xF9	; 249
    d3a8:	1f 4f       	sbci	r17, 0xFF	; 255
    d3aa:	c8 01       	movw	r24, r16
    d3ac:	66 e4       	ldi	r22, 0x46	; 70
    d3ae:	70 e0       	ldi	r23, 0x00	; 0
    d3b0:	48 e0       	ldi	r20, 0x08	; 8
    d3b2:	50 e0       	ldi	r21, 0x00	; 0
    d3b4:	0e 94 56 aa 	call	0x154ac	; 0x154ac <__eerd_block_m128>
    d3b8:	f8 01       	movw	r30, r16
	 iPumpID=0;
	 for(i=0;i<8;i++){
    d3ba:	60 e0       	ldi	r22, 0x00	; 0
	     if (PPumpID[i]==xPumpID){
    d3bc:	81 91       	ld	r24, Z+
    d3be:	8c 15       	cp	r24, r12
    d3c0:	21 f0       	breq	.+8      	; 0xd3ca <GetProductPrice+0x74>
char i,PPumpID[8],PProdID[6],strPrice[9],iPumpID,xProductID;
     sprintf_P(sPrice,PSTR(""));
     //FindPumpID
	 eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap,8);
	 iPumpID=0;
	 for(i=0;i<8;i++){
    d3c2:	6f 5f       	subi	r22, 0xFF	; 255
    d3c4:	68 30       	cpi	r22, 0x08	; 8
    d3c6:	d1 f7       	brne	.-12     	; 0xd3bc <GetProductPrice+0x66>
void GetProductPrice(char *sPrice,char xPumpID,char xNozzle){
char i,PPumpID[8],PProdID[6],strPrice[9],iPumpID,xProductID;
     sprintf_P(sPrice,PSTR(""));
     //FindPumpID
	 eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap,8);
	 iPumpID=0;
    d3c8:	60 e0       	ldi	r22, 0x00	; 0
	     if (PPumpID[i]==xPumpID){
		     iPumpID=i;
			 break;
		 }	 
	 }
	 if ((iPumpID>=0)&&(xNozzle<6)){
    d3ca:	bd 2d       	mov	r27, r13
    d3cc:	b6 30       	cpi	r27, 0x06	; 6
    d3ce:	08 f0       	brcs	.+2      	; 0xd3d2 <GetProductPrice+0x7c>
    d3d0:	43 c0       	rjmp	.+134    	; 0xd458 <GetProductPrice+0x102>
         eeprom_read_block((void*) &PProdID,(const void*) &DefNozzleMap[iPumpID],6);
    d3d2:	86 e0       	ldi	r24, 0x06	; 6
    d3d4:	68 9f       	mul	r22, r24
    d3d6:	b0 01       	movw	r22, r0
    d3d8:	11 24       	eor	r1, r1
    d3da:	6a 5a       	subi	r22, 0xAA	; 170
    d3dc:	7f 4f       	sbci	r23, 0xFF	; 255
    d3de:	ce 01       	movw	r24, r28
    d3e0:	01 96       	adiw	r24, 0x01	; 1
    d3e2:	46 e0       	ldi	r20, 0x06	; 6
    d3e4:	50 e0       	ldi	r21, 0x00	; 0
    d3e6:	0e 94 56 aa 	call	0x154ac	; 0x154ac <__eerd_block_m128>
         xProductID=PProdID[xNozzle-1];
		 //Price
		 eeprom_read_block((void*) &strPrice, (const void*) &DefProductPrice[xProductID-1], 9);
    d3ea:	8e 01       	movw	r16, r28
    d3ec:	01 5f       	subi	r16, 0xF1	; 241
    d3ee:	1f 4f       	sbci	r17, 0xFF	; 255
			 break;
		 }	 
	 }
	 if ((iPumpID>=0)&&(xNozzle<6)){
         eeprom_read_block((void*) &PProdID,(const void*) &DefNozzleMap[iPumpID],6);
         xProductID=PProdID[xNozzle-1];
    d3f0:	fe 01       	movw	r30, r28
    d3f2:	ed 0d       	add	r30, r13
    d3f4:	f1 1d       	adc	r31, r1
		 //Price
		 eeprom_read_block((void*) &strPrice, (const void*) &DefProductPrice[xProductID-1], 9);
    d3f6:	80 81       	ld	r24, Z
    d3f8:	90 e0       	ldi	r25, 0x00	; 0
    d3fa:	01 97       	sbiw	r24, 0x01	; 1
    d3fc:	bc 01       	movw	r22, r24
    d3fe:	43 e0       	ldi	r20, 0x03	; 3
    d400:	66 0f       	add	r22, r22
    d402:	77 1f       	adc	r23, r23
    d404:	4a 95       	dec	r20
    d406:	e1 f7       	brne	.-8      	; 0xd400 <GetProductPrice+0xaa>
    d408:	68 0f       	add	r22, r24
    d40a:	79 1f       	adc	r23, r25
    d40c:	6a 57       	subi	r22, 0x7A	; 122
    d40e:	7f 4f       	sbci	r23, 0xFF	; 255
    d410:	c8 01       	movw	r24, r16
    d412:	49 e0       	ldi	r20, 0x09	; 9
    d414:	50 e0       	ldi	r21, 0x00	; 0
    d416:	0e 94 56 aa 	call	0x154ac	; 0x154ac <__eerd_block_m128>
		 RemDecimal(strPrice);
    d41a:	c8 01       	movw	r24, r16
    d41c:	0e 94 67 4a 	call	0x94ce	; 0x94ce <RemDecimal>
		 sprintf_P(sPrice,PSTR("%s"),strPrice);
    d420:	00 d0       	rcall	.+0      	; 0xd422 <GetProductPrice+0xcc>
    d422:	00 d0       	rcall	.+0      	; 0xd424 <GetProductPrice+0xce>
    d424:	00 d0       	rcall	.+0      	; 0xd426 <GetProductPrice+0xd0>
    d426:	ed b7       	in	r30, 0x3d	; 61
    d428:	fe b7       	in	r31, 0x3e	; 62
    d42a:	31 96       	adiw	r30, 0x01	; 1
    d42c:	ad b7       	in	r26, 0x3d	; 61
    d42e:	be b7       	in	r27, 0x3e	; 62
    d430:	12 96       	adiw	r26, 0x02	; 2
    d432:	fc 92       	st	X, r15
    d434:	ee 92       	st	-X, r14
    d436:	11 97       	sbiw	r26, 0x01	; 1
    d438:	87 e2       	ldi	r24, 0x27	; 39
    d43a:	95 e0       	ldi	r25, 0x05	; 5
    d43c:	93 83       	std	Z+3, r25	; 0x03
    d43e:	82 83       	std	Z+2, r24	; 0x02
    d440:	15 83       	std	Z+5, r17	; 0x05
    d442:	04 83       	std	Z+4, r16	; 0x04
    d444:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    d448:	ed b7       	in	r30, 0x3d	; 61
    d44a:	fe b7       	in	r31, 0x3e	; 62
    d44c:	36 96       	adiw	r30, 0x06	; 6
    d44e:	0f b6       	in	r0, 0x3f	; 63
    d450:	f8 94       	cli
    d452:	fe bf       	out	0x3e, r31	; 62
    d454:	0f be       	out	0x3f, r0	; 63
    d456:	ed bf       	out	0x3d, r30	; 61
	 }    
	 //Clear Decimal

}
    d458:	67 96       	adiw	r28, 0x17	; 23
    d45a:	0f b6       	in	r0, 0x3f	; 63
    d45c:	f8 94       	cli
    d45e:	de bf       	out	0x3e, r29	; 62
    d460:	0f be       	out	0x3f, r0	; 63
    d462:	cd bf       	out	0x3d, r28	; 61
    d464:	cf 91       	pop	r28
    d466:	df 91       	pop	r29
    d468:	1f 91       	pop	r17
    d46a:	0f 91       	pop	r16
    d46c:	ff 90       	pop	r15
    d46e:	ef 90       	pop	r14
    d470:	df 90       	pop	r13
    d472:	cf 90       	pop	r12
    d474:	08 95       	ret

0000d476 <GetProductName>:

void GetProductName(char GradeId,char *strProductName){
    d476:	df 92       	push	r13
    d478:	ef 92       	push	r14
    d47a:	ff 92       	push	r15
    d47c:	0f 93       	push	r16
    d47e:	1f 93       	push	r17
    d480:	df 93       	push	r29
    d482:	cf 93       	push	r28
    d484:	cd b7       	in	r28, 0x3d	; 61
    d486:	de b7       	in	r29, 0x3e	; 62
    d488:	2c 97       	sbiw	r28, 0x0c	; 12
    d48a:	0f b6       	in	r0, 0x3f	; 63
    d48c:	f8 94       	cli
    d48e:	de bf       	out	0x3e, r29	; 62
    d490:	0f be       	out	0x3f, r0	; 63
    d492:	cd bf       	out	0x3d, r28	; 61
    d494:	d8 2e       	mov	r13, r24
    d496:	7b 01       	movw	r14, r22
char SProductName[12],i,Length;
     FillChar(SProductName,sizeof(SProductName),0); 
    d498:	8e 01       	movw	r16, r28
    d49a:	0f 5f       	subi	r16, 0xFF	; 255
    d49c:	1f 4f       	sbci	r17, 0xFF	; 255
    d49e:	c8 01       	movw	r24, r16
    d4a0:	6c e0       	ldi	r22, 0x0C	; 12
    d4a2:	70 e0       	ldi	r23, 0x00	; 0
    d4a4:	40 e0       	ldi	r20, 0x00	; 0
    d4a6:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>
	 //eeprom_read_block((void*) &SProductName, (const void*) &DefProductName[GradeId-1],10);
	 if (GradeId>0) eeprom_read_block((void*) &SProductName, (const void*) &DefProductName[GradeId-1],10);
    d4aa:	dd 20       	and	r13, r13
    d4ac:	a1 f0       	breq	.+40     	; 0xd4d6 <GetProductName+0x60>
    d4ae:	8d 2d       	mov	r24, r13
    d4b0:	90 e0       	ldi	r25, 0x00	; 0
    d4b2:	01 97       	sbiw	r24, 0x01	; 1
    d4b4:	2d e0       	ldi	r18, 0x0D	; 13
    d4b6:	30 e0       	ldi	r19, 0x00	; 0
    d4b8:	82 9f       	mul	r24, r18
    d4ba:	b0 01       	movw	r22, r0
    d4bc:	83 9f       	mul	r24, r19
    d4be:	70 0d       	add	r23, r0
    d4c0:	92 9f       	mul	r25, r18
    d4c2:	70 0d       	add	r23, r0
    d4c4:	11 24       	eor	r1, r1
    d4c6:	64 54       	subi	r22, 0x44	; 68
    d4c8:	7f 4f       	sbci	r23, 0xFF	; 255
    d4ca:	c8 01       	movw	r24, r16
    d4cc:	4a e0       	ldi	r20, 0x0A	; 10
    d4ce:	50 e0       	ldi	r21, 0x00	; 0
    d4d0:	0e 94 56 aa 	call	0x154ac	; 0x154ac <__eerd_block_m128>
    d4d4:	14 c0       	rjmp	.+40     	; 0xd4fe <GetProductName+0x88>
	 else sprintf_P(SProductName,PSTR("N/A"));
    d4d6:	00 d0       	rcall	.+0      	; 0xd4d8 <GetProductName+0x62>
    d4d8:	00 d0       	rcall	.+0      	; 0xd4da <GetProductName+0x64>
    d4da:	ad b7       	in	r26, 0x3d	; 61
    d4dc:	be b7       	in	r27, 0x3e	; 62
    d4de:	12 96       	adiw	r26, 0x02	; 2
    d4e0:	1c 93       	st	X, r17
    d4e2:	0e 93       	st	-X, r16
    d4e4:	11 97       	sbiw	r26, 0x01	; 1
    d4e6:	83 e2       	ldi	r24, 0x23	; 35
    d4e8:	95 e0       	ldi	r25, 0x05	; 5
    d4ea:	14 96       	adiw	r26, 0x04	; 4
    d4ec:	9c 93       	st	X, r25
    d4ee:	8e 93       	st	-X, r24
    d4f0:	13 97       	sbiw	r26, 0x03	; 3
    d4f2:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    d4f6:	0f 90       	pop	r0
    d4f8:	0f 90       	pop	r0
    d4fa:	0f 90       	pop	r0
    d4fc:	0f 90       	pop	r0

     Length=strlen(SProductName);
    d4fe:	fe 01       	movw	r30, r28
    d500:	31 96       	adiw	r30, 0x01	; 1
    d502:	df 01       	movw	r26, r30
    d504:	0d 90       	ld	r0, X+
    d506:	00 20       	and	r0, r0
    d508:	e9 f7       	brne	.-6      	; 0xd504 <GetProductName+0x8e>
    d50a:	11 97       	sbiw	r26, 0x01	; 1
    d50c:	97 01       	movw	r18, r14
	 }    
	 //Clear Decimal

}

void GetProductName(char GradeId,char *strProductName){
    d50e:	ae 1b       	sub	r26, r30
    d510:	ab 30       	cpi	r26, 0x0B	; 11
    d512:	08 f0       	brcs	.+2      	; 0xd516 <GetProductName+0xa0>
    d514:	aa e0       	ldi	r26, 0x0A	; 10
    d516:	6a 2f       	mov	r22, r26
    d518:	70 e0       	ldi	r23, 0x00	; 0
    d51a:	ce 01       	movw	r24, r28
    d51c:	01 96       	adiw	r24, 0x01	; 1
    d51e:	86 0f       	add	r24, r22
    d520:	97 1f       	adc	r25, r23
	 else sprintf_P(SProductName,PSTR("N/A"));

     Length=strlen(SProductName);
	 if (Length>10)Length=10;

	 for(i=0;i<Length;i++){
    d522:	04 c0       	rjmp	.+8      	; 0xd52c <GetProductName+0xb6>
	     strProductName[i]=SProductName[i];
    d524:	41 91       	ld	r20, Z+
    d526:	d9 01       	movw	r26, r18
    d528:	4d 93       	st	X+, r20
    d52a:	9d 01       	movw	r18, r26
	 else sprintf_P(SProductName,PSTR("N/A"));

     Length=strlen(SProductName);
	 if (Length>10)Length=10;

	 for(i=0;i<Length;i++){
    d52c:	e8 17       	cp	r30, r24
    d52e:	f9 07       	cpc	r31, r25
    d530:	c9 f7       	brne	.-14     	; 0xd524 <GetProductName+0xae>
	     strProductName[i]=SProductName[i];
	 }strProductName[Length]=0;
    d532:	db 01       	movw	r26, r22
    d534:	ae 0d       	add	r26, r14
    d536:	bf 1d       	adc	r27, r15
    d538:	1c 92       	st	X, r1

	 AddSpaceLag(strProductName,10);
    d53a:	c7 01       	movw	r24, r14
    d53c:	6a e0       	ldi	r22, 0x0A	; 10
    d53e:	0e 94 7d 27 	call	0x4efa	; 0x4efa <AddSpaceLag>
}
    d542:	2c 96       	adiw	r28, 0x0c	; 12
    d544:	0f b6       	in	r0, 0x3f	; 63
    d546:	f8 94       	cli
    d548:	de bf       	out	0x3e, r29	; 62
    d54a:	0f be       	out	0x3f, r0	; 63
    d54c:	cd bf       	out	0x3d, r28	; 61
    d54e:	cf 91       	pop	r28
    d550:	df 91       	pop	r29
    d552:	1f 91       	pop	r17
    d554:	0f 91       	pop	r16
    d556:	ff 90       	pop	r15
    d558:	ef 90       	pop	r14
    d55a:	df 90       	pop	r13
    d55c:	08 95       	ret

0000d55e <ClearList>:

//AddListTotal(xGrade,strRef1);
void ClearList(char *strList){
     FillChar(strList,strlen(strList),0);
    d55e:	dc 01       	movw	r26, r24
    d560:	0d 90       	ld	r0, X+
    d562:	00 20       	and	r0, r0
    d564:	e9 f7       	brne	.-6      	; 0xd560 <ClearList+0x2>
    d566:	bd 01       	movw	r22, r26
    d568:	61 50       	subi	r22, 0x01	; 1
    d56a:	70 40       	sbci	r23, 0x00	; 0
    d56c:	68 1b       	sub	r22, r24
    d56e:	79 0b       	sbc	r23, r25
    d570:	40 e0       	ldi	r20, 0x00	; 0
    d572:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>
}
    d576:	08 95       	ret

0000d578 <AddList>:
void AddList(char GradeId, char *strList){
     char i,iPos,Length,IsFound=False;	 
	 if ((GradeId>=1)&&((GradeId<=6))){
    d578:	98 2f       	mov	r25, r24
    d57a:	91 50       	subi	r25, 0x01	; 1
    d57c:	96 30       	cpi	r25, 0x06	; 6
    d57e:	c8 f4       	brcc	.+50     	; 0xd5b2 <AddList+0x3a>
		 iPos=0;
		 IsFound=False;	
		 Length=strlen(strList);
    d580:	db 01       	movw	r26, r22
    d582:	0d 90       	ld	r0, X+
    d584:	00 20       	and	r0, r0
    d586:	e9 f7       	brne	.-6      	; 0xd582 <AddList+0xa>
    d588:	11 97       	sbiw	r26, 0x01	; 1
    d58a:	a6 1b       	sub	r26, r22
	     if (Length>0){
    d58c:	59 f0       	breq	.+22     	; 0xd5a4 <AddList+0x2c>
    d58e:	fb 01       	movw	r30, r22
    d590:	90 e0       	ldi	r25, 0x00	; 0
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
	    Result='0'+X;
    d592:	28 2f       	mov	r18, r24
    d594:	20 5d       	subi	r18, 0xD0	; 208
		 Length=strlen(strList);
	     if (Length>0){
			 for (i=0;i<Length;i++){//"123"
			      //uart(1,1,strList[i]);
			      iPos++;
			      if (strList[i]==Chr(GradeId)){
    d596:	31 91       	ld	r19, Z+
    d598:	32 17       	cp	r19, r18
    d59a:	59 f0       	breq	.+22     	; 0xd5b2 <AddList+0x3a>
		 IsFound=False;	
		 Length=strlen(strList);
	     if (Length>0){
			 for (i=0;i<Length;i++){//"123"
			      //uart(1,1,strList[i]);
			      iPos++;
    d59c:	9f 5f       	subi	r25, 0xFF	; 255
	 if ((GradeId>=1)&&((GradeId<=6))){
		 iPos=0;
		 IsFound=False;	
		 Length=strlen(strList);
	     if (Length>0){
			 for (i=0;i<Length;i++){//"123"
    d59e:	9a 17       	cp	r25, r26
    d5a0:	d0 f3       	brcs	.-12     	; 0xd596 <AddList+0x1e>
    d5a2:	01 c0       	rjmp	.+2      	; 0xd5a6 <AddList+0x2e>
     FillChar(strList,strlen(strList),0);
}
void AddList(char GradeId, char *strList){
     char i,iPos,Length,IsFound=False;	 
	 if ((GradeId>=1)&&((GradeId<=6))){
		 iPos=0;
    d5a4:	90 e0       	ldi	r25, 0x00	; 0
					  break;
				  }
			 }
	     }
		 if (IsFound==False){
		     strList[iPos]=Chr(GradeId);
    d5a6:	fb 01       	movw	r30, r22
    d5a8:	e9 0f       	add	r30, r25
    d5aa:	f1 1d       	adc	r31, r1
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
	    Result='0'+X;
    d5ac:	80 5d       	subi	r24, 0xD0	; 208
					  break;
				  }
			 }
	     }
		 if (IsFound==False){
		     strList[iPos]=Chr(GradeId);
    d5ae:	80 83       	st	Z, r24
		     strList[iPos+1]=0;
    d5b0:	11 82       	std	Z+1, r1	; 0x01
    d5b2:	08 95       	ret

0000d5b4 <GetBorderValue>:
     }
	 //uart_print(1,1,strList);

}

char GetBorderValue(char BoderType){
    d5b4:	81 50       	subi	r24, 0x01	; 1
    d5b6:	8c 30       	cpi	r24, 0x0C	; 12
    d5b8:	30 f4       	brcc	.+12     	; 0xd5c6 <GetBorderValue+0x12>
    d5ba:	e8 2f       	mov	r30, r24
    d5bc:	f0 e0       	ldi	r31, 0x00	; 0
    d5be:	ee 57       	subi	r30, 0x7E	; 126
    d5c0:	fe 4f       	sbci	r31, 0xFE	; 254
    d5c2:	80 81       	ld	r24, Z
    d5c4:	08 95       	ret
    d5c6:	80 e0       	ldi	r24, 0x00	; 0
        case btNewLine:
		     Result=0x0D;
			 break;	 
	 }
   return Result;
}
    d5c8:	08 95       	ret

0000d5ca <InserBorder.clone.0>:

void InserBorder(char BorderType, char *strPrnBuffer,char nLength,unsigned int *Pos){
    d5ca:	cf 92       	push	r12
    d5cc:	df 92       	push	r13
    d5ce:	ef 92       	push	r14
    d5d0:	ff 92       	push	r15
    d5d2:	0f 93       	push	r16
    d5d4:	1f 93       	push	r17
    d5d6:	df 93       	push	r29
    d5d8:	cf 93       	push	r28
    d5da:	0f 92       	push	r0
    d5dc:	cd b7       	in	r28, 0x3d	; 61
    d5de:	de b7       	in	r29, 0x3e	; 62
    d5e0:	f8 2e       	mov	r15, r24
     char i;//,BorderValue=0;
	 unsigned int StartPos,iPos=0;
	 
	 iPos=*Pos;
    d5e2:	00 91 b5 02 	lds	r16, 0x02B5
    d5e6:	10 91 b6 02 	lds	r17, 0x02B6
    d5ea:	68 01       	movw	r12, r16
	 StartPos=iPos;
	 for (i=0;i<nLength;i++){
    d5ec:	ee 24       	eor	r14, r14
    d5ee:	0d c0       	rjmp	.+26     	; 0xd60a <InserBorder.clone.0+0x40>
	      strPrnBuffer[iPos]=GetBorderValue(BorderType);
    d5f0:	8f 2d       	mov	r24, r15
    d5f2:	69 83       	std	Y+1, r22	; 0x01
    d5f4:	0e 94 da 6a 	call	0xd5b4	; 0xd5b4 <GetBorderValue>
    d5f8:	f6 01       	movw	r30, r12
    d5fa:	e0 53       	subi	r30, 0x30	; 48
    d5fc:	fb 4f       	sbci	r31, 0xFB	; 251
    d5fe:	80 83       	st	Z, r24
		  iPos++;
    d600:	08 94       	sec
    d602:	c1 1c       	adc	r12, r1
    d604:	d1 1c       	adc	r13, r1
     char i;//,BorderValue=0;
	 unsigned int StartPos,iPos=0;
	 
	 iPos=*Pos;
	 StartPos=iPos;
	 for (i=0;i<nLength;i++){
    d606:	e3 94       	inc	r14
    d608:	69 81       	ldd	r22, Y+1	; 0x01
    d60a:	e6 16       	cp	r14, r22
    d60c:	88 f3       	brcs	.-30     	; 0xd5f0 <InserBorder.clone.0+0x26>
	 //for (i=0;i<nLength;i++){
	 //     if (strPrnBuffer[i+StartPos]!=GetBorderValue(BorderType)){
//		      strPrnBuffer[i+StartPos]=GetBorderValue(BorderType);
//		  }
//	 }
     *Pos=iPos;
    d60e:	06 0f       	add	r16, r22
    d610:	11 1d       	adc	r17, r1
    d612:	10 93 b6 02 	sts	0x02B6, r17
    d616:	00 93 b5 02 	sts	0x02B5, r16
}
    d61a:	0f 90       	pop	r0
    d61c:	cf 91       	pop	r28
    d61e:	df 91       	pop	r29
    d620:	1f 91       	pop	r17
    d622:	0f 91       	pop	r16
    d624:	ff 90       	pop	r15
    d626:	ef 90       	pop	r14
    d628:	df 90       	pop	r13
    d62a:	cf 90       	pop	r12
    d62c:	08 95       	ret

0000d62e <InserBorder>:
			 break;	 
	 }
   return Result;
}

void InserBorder(char BorderType, char *strPrnBuffer,char nLength,unsigned int *Pos){
    d62e:	af 92       	push	r10
    d630:	bf 92       	push	r11
    d632:	cf 92       	push	r12
    d634:	df 92       	push	r13
    d636:	ef 92       	push	r14
    d638:	ff 92       	push	r15
    d63a:	0f 93       	push	r16
    d63c:	1f 93       	push	r17
    d63e:	df 93       	push	r29
    d640:	cf 93       	push	r28
    d642:	0f 92       	push	r0
    d644:	cd b7       	in	r28, 0x3d	; 61
    d646:	de b7       	in	r29, 0x3e	; 62
    d648:	d8 2e       	mov	r13, r24
    d64a:	5b 01       	movw	r10, r22
    d64c:	89 01       	movw	r16, r18
     char i;//,BorderValue=0;
	 unsigned int StartPos,iPos=0;
	 
	 iPos=*Pos;
    d64e:	f9 01       	movw	r30, r18
    d650:	e0 80       	ld	r14, Z
    d652:	f1 80       	ldd	r15, Z+1	; 0x01
			 break;	 
	 }
   return Result;
}

void InserBorder(char BorderType, char *strPrnBuffer,char nLength,unsigned int *Pos){
    d654:	ae 0c       	add	r10, r14
    d656:	bf 1c       	adc	r11, r15
     char i;//,BorderValue=0;
	 unsigned int StartPos,iPos=0;
	 
	 iPos=*Pos;
	 StartPos=iPos;
	 for (i=0;i<nLength;i++){
    d658:	cc 24       	eor	r12, r12
    d65a:	09 c0       	rjmp	.+18     	; 0xd66e <InserBorder+0x40>
	      strPrnBuffer[iPos]=GetBorderValue(BorderType);
    d65c:	8d 2d       	mov	r24, r13
    d65e:	49 83       	std	Y+1, r20	; 0x01
    d660:	0e 94 da 6a 	call	0xd5b4	; 0xd5b4 <GetBorderValue>
    d664:	f5 01       	movw	r30, r10
    d666:	81 93       	st	Z+, r24
    d668:	5f 01       	movw	r10, r30
     char i;//,BorderValue=0;
	 unsigned int StartPos,iPos=0;
	 
	 iPos=*Pos;
	 StartPos=iPos;
	 for (i=0;i<nLength;i++){
    d66a:	c3 94       	inc	r12
    d66c:	49 81       	ldd	r20, Y+1	; 0x01
    d66e:	c4 16       	cp	r12, r20
    d670:	a8 f3       	brcs	.-22     	; 0xd65c <InserBorder+0x2e>
	 //for (i=0;i<nLength;i++){
	 //     if (strPrnBuffer[i+StartPos]!=GetBorderValue(BorderType)){
//		      strPrnBuffer[i+StartPos]=GetBorderValue(BorderType);
//		  }
//	 }
     *Pos=iPos;
    d672:	e4 0e       	add	r14, r20
    d674:	f1 1c       	adc	r15, r1
    d676:	f8 01       	movw	r30, r16
    d678:	f1 82       	std	Z+1, r15	; 0x01
    d67a:	e0 82       	st	Z, r14
}
    d67c:	0f 90       	pop	r0
    d67e:	cf 91       	pop	r28
    d680:	df 91       	pop	r29
    d682:	1f 91       	pop	r17
    d684:	0f 91       	pop	r16
    d686:	ff 90       	pop	r15
    d688:	ef 90       	pop	r14
    d68a:	df 90       	pop	r13
    d68c:	cf 90       	pop	r12
    d68e:	bf 90       	pop	r11
    d690:	af 90       	pop	r10
    d692:	08 95       	ret

0000d694 <CreateReport>:

void CreateReport(char *strData, char *strPrnBuffer, unsigned int *Pos){
    d694:	af 92       	push	r10
    d696:	bf 92       	push	r11
    d698:	cf 92       	push	r12
    d69a:	df 92       	push	r13
    d69c:	ef 92       	push	r14
    d69e:	ff 92       	push	r15
    d6a0:	0f 93       	push	r16
    d6a2:	1f 93       	push	r17
    d6a4:	cf 93       	push	r28
    d6a6:	df 93       	push	r29
    d6a8:	5c 01       	movw	r10, r24
    d6aa:	eb 01       	movw	r28, r22
    d6ac:	6a 01       	movw	r12, r20
     unsigned int iPos,PosResult,Length;
	 char i,strSend[20];
	 Length=strlen(strData);
    d6ae:	dc 01       	movw	r26, r24
    d6b0:	0d 90       	ld	r0, X+
    d6b2:	00 20       	and	r0, r0
    d6b4:	e9 f7       	brne	.-6      	; 0xd6b0 <CreateReport+0x1c>
    d6b6:	8d 01       	movw	r16, r26
    d6b8:	01 50       	subi	r16, 0x01	; 1
    d6ba:	10 40       	sbci	r17, 0x00	; 0
    d6bc:	08 1b       	sub	r16, r24
    d6be:	19 0b       	sbc	r17, r25
    d6c0:	0b 32       	cpi	r16, 0x2B	; 43
    d6c2:	11 05       	cpc	r17, r1
    d6c4:	10 f0       	brcs	.+4      	; 0xd6ca <CreateReport+0x36>
    d6c6:	0a e2       	ldi	r16, 0x2A	; 42
    d6c8:	10 e0       	ldi	r17, 0x00	; 0
	 if (Length>BORDER_LENGTH)Length=BORDER_LENGTH;
     
	 iPos=*Pos;
    d6ca:	f6 01       	movw	r30, r12
    d6cc:	e0 80       	ld	r14, Z
    d6ce:	f1 80       	ldd	r15, Z+1	; 0x01
	 strPrnBuffer[iPos]=GetBorderValue(btVertical);
    d6d0:	8a e0       	ldi	r24, 0x0A	; 10
    d6d2:	0e 94 da 6a 	call	0xd5b4	; 0xd5b4 <GetBorderValue>
    d6d6:	fe 01       	movw	r30, r28
    d6d8:	ee 0d       	add	r30, r14
    d6da:	ff 1d       	adc	r31, r15
    d6dc:	80 83       	st	Z, r24
     iPos++;
    d6de:	08 94       	sec
    d6e0:	e1 1c       	adc	r14, r1
    d6e2:	f1 1c       	adc	r15, r1
//		  }
//	 }
     *Pos=iPos;
}

void CreateReport(char *strData, char *strPrnBuffer, unsigned int *Pos){
    d6e4:	fe 01       	movw	r30, r28
    d6e6:	ee 0d       	add	r30, r14
    d6e8:	ff 1d       	adc	r31, r15
     
	 iPos=*Pos;
	 strPrnBuffer[iPos]=GetBorderValue(btVertical);
     iPos++;

	 for (i=0;i<Length;i++){	      
    d6ea:	90 e0       	ldi	r25, 0x00	; 0
    d6ec:	09 c0       	rjmp	.+18     	; 0xd700 <CreateReport+0x6c>
	      strPrnBuffer[iPos]=strData[i];	      	 
    d6ee:	2a 0d       	add	r18, r10
    d6f0:	3b 1d       	adc	r19, r11
    d6f2:	d9 01       	movw	r26, r18
    d6f4:	2c 91       	ld	r18, X
    d6f6:	21 93       	st	Z+, r18
		  iPos++;
    d6f8:	08 94       	sec
    d6fa:	e1 1c       	adc	r14, r1
    d6fc:	f1 1c       	adc	r15, r1
     
	 iPos=*Pos;
	 strPrnBuffer[iPos]=GetBorderValue(btVertical);
     iPos++;

	 for (i=0;i<Length;i++){	      
    d6fe:	9f 5f       	subi	r25, 0xFF	; 255
    d700:	29 2f       	mov	r18, r25
    d702:	30 e0       	ldi	r19, 0x00	; 0
    d704:	20 17       	cp	r18, r16
    d706:	31 07       	cpc	r19, r17
    d708:	90 f3       	brcs	.-28     	; 0xd6ee <CreateReport+0x5a>
    d70a:	6e 2d       	mov	r22, r14
	      strPrnBuffer[iPos]=strData[i];	      	 
		  iPos++;
	 }
	 if (Length<BORDER_LENGTH){
    d70c:	0a 32       	cpi	r16, 0x2A	; 42
    d70e:	11 05       	cpc	r17, r1
    d710:	99 f0       	breq	.+38     	; 0xd738 <CreateReport+0xa4>
//		  }
//	 }
     *Pos=iPos;
}

void CreateReport(char *strData, char *strPrnBuffer, unsigned int *Pos){
    d712:	fe 01       	movw	r30, r28
    d714:	ee 0d       	add	r30, r14
    d716:	ff 1d       	adc	r31, r15
	 for (i=0;i<Length;i++){	      
	      strPrnBuffer[iPos]=strData[i];	      	 
		  iPos++;
	 }
	 if (Length<BORDER_LENGTH){
	     for (i=0;i<(BORDER_LENGTH-Length);i++){	      
    d718:	2a e2       	ldi	r18, 0x2A	; 42
    d71a:	30 e0       	ldi	r19, 0x00	; 0
    d71c:	20 1b       	sub	r18, r16
    d71e:	31 0b       	sbc	r19, r17
	          strPrnBuffer[iPos]=' ';
    d720:	90 e2       	ldi	r25, 0x20	; 32
    d722:	04 c0       	rjmp	.+8      	; 0xd72c <CreateReport+0x98>
    d724:	91 93       	st	Z+, r25
		      iPos++;
    d726:	08 94       	sec
    d728:	e1 1c       	adc	r14, r1
    d72a:	f1 1c       	adc	r15, r1
	 for (i=0;i<Length;i++){	      
	      strPrnBuffer[iPos]=strData[i];	      	 
		  iPos++;
	 }
	 if (Length<BORDER_LENGTH){
	     for (i=0;i<(BORDER_LENGTH-Length);i++){	      
    d72c:	4e 2d       	mov	r20, r14
    d72e:	46 1b       	sub	r20, r22
    d730:	50 e0       	ldi	r21, 0x00	; 0
    d732:	42 17       	cp	r20, r18
    d734:	53 07       	cpc	r21, r19
    d736:	b0 f3       	brcs	.-20     	; 0xd724 <CreateReport+0x90>
	          strPrnBuffer[iPos]=' ';
		      iPos++;
	     }	    
	 }
	 strPrnBuffer[iPos]=GetBorderValue(btVertical);
    d738:	fe 01       	movw	r30, r28
    d73a:	ee 0d       	add	r30, r14
    d73c:	ff 1d       	adc	r31, r15
    d73e:	80 83       	st	Z, r24
     iPos++;
    d740:	08 94       	sec
    d742:	e1 1c       	adc	r14, r1
    d744:	f1 1c       	adc	r15, r1
     //PosResult=*Pos+Length;
	 strPrnBuffer[iPos]=0x0D; 
    d746:	ce 0d       	add	r28, r14
    d748:	df 1d       	adc	r29, r15
    d74a:	8d e0       	ldi	r24, 0x0D	; 13
    d74c:	88 83       	st	Y, r24
	 iPos++;
    d74e:	08 94       	sec
    d750:	e1 1c       	adc	r14, r1
    d752:	f1 1c       	adc	r15, r1

   //*Pos=PosResult+1;
   *Pos=iPos;
    d754:	f6 01       	movw	r30, r12
    d756:	f1 82       	std	Z+1, r15	; 0x01
    d758:	e0 82       	st	Z, r14
    //sprintf_P(strSend,PSTR("Pos:%d"),*Pos);
	//uart_print(0,1,strSend);
}
    d75a:	df 91       	pop	r29
    d75c:	cf 91       	pop	r28
    d75e:	1f 91       	pop	r17
    d760:	0f 91       	pop	r16
    d762:	ff 90       	pop	r15
    d764:	ef 90       	pop	r14
    d766:	df 90       	pop	r13
    d768:	cf 90       	pop	r12
    d76a:	bf 90       	pop	r11
    d76c:	af 90       	pop	r10
    d76e:	08 95       	ret

0000d770 <TestUserInput>:
	   //lcd_printf(1,1,PSTR("InputNumber:"));
       //lcd_printf(2,1,PSTR("_         "));
	}
  return Result;
  */
}
    d770:	08 95       	ret

0000d772 <Pos>:
		

//Genius Protocol Version:1.0 AKR
int Pos(char *Substr, char *String){//1245:4645
    d772:	0f 93       	push	r16
    d774:	1f 93       	push	r17
    d776:	cf 93       	push	r28
    d778:	df 93       	push	r29
    d77a:	fc 01       	movw	r30, r24
    char i,j,CountMatch;
	char Length,subLen,PosFound;

	Length=strlen(String);
    d77c:	eb 01       	movw	r28, r22
    d77e:	09 90       	ld	r0, Y+
    d780:	00 20       	and	r0, r0
    d782:	e9 f7       	brne	.-6      	; 0xd77e <Pos+0xc>
    d784:	21 97       	sbiw	r28, 0x01	; 1
    d786:	ce 01       	movw	r24, r28
    d788:	86 1b       	sub	r24, r22
    d78a:	18 2f       	mov	r17, r24
	subLen=strlen(Substr);
    d78c:	ef 01       	movw	r28, r30
    d78e:	09 90       	ld	r0, Y+
    d790:	00 20       	and	r0, r0
    d792:	e9 f7       	brne	.-6      	; 0xd78e <Pos+0x1c>
    d794:	21 97       	sbiw	r28, 0x01	; 1
    d796:	ce 01       	movw	r24, r28
    d798:	8e 1b       	sub	r24, r30
    d79a:	08 2f       	mov	r16, r24
    d79c:	a6 2f       	mov	r26, r22
    d79e:	b7 2f       	mov	r27, r23
	PosFound=Length;
	for(i=0;i<Length;i++){
    d7a0:	80 e0       	ldi	r24, 0x00	; 0
    d7a2:	16 c0       	rjmp	.+44     	; 0xd7d0 <Pos+0x5e>
	    if (String[i]==Substr[0]){
    d7a4:	2c 91       	ld	r18, X
    d7a6:	90 81       	ld	r25, Z
    d7a8:	29 17       	cp	r18, r25
    d7aa:	81 f4       	brne	.+32     	; 0xd7cc <Pos+0x5a>
    d7ac:	af 01       	movw	r20, r30
    d7ae:	9d 01       	movw	r18, r26
    d7b0:	90 e0       	ldi	r25, 0x00	; 0
    d7b2:	09 c0       	rjmp	.+18     	; 0xd7c6 <Pos+0x54>
		    CountMatch=0;
			for(j=0;j<subLen;j++){
			    //notFound
			    if (Substr[j]==String[i+j]){
    d7b4:	ea 01       	movw	r28, r20
    d7b6:	79 91       	ld	r23, Y+
    d7b8:	ae 01       	movw	r20, r28
    d7ba:	e9 01       	movw	r28, r18
    d7bc:	69 91       	ld	r22, Y+
    d7be:	9e 01       	movw	r18, r28
    d7c0:	76 17       	cp	r23, r22
    d7c2:	21 f4       	brne	.+8      	; 0xd7cc <Pos+0x5a>
	subLen=strlen(Substr);
	PosFound=Length;
	for(i=0;i<Length;i++){
	    if (String[i]==Substr[0]){
		    CountMatch=0;
			for(j=0;j<subLen;j++){
    d7c4:	9f 5f       	subi	r25, 0xFF	; 255
    d7c6:	90 17       	cp	r25, r16
    d7c8:	a8 f3       	brcs	.-22     	; 0xd7b4 <Pos+0x42>
    d7ca:	05 c0       	rjmp	.+10     	; 0xd7d6 <Pos+0x64>
	char Length,subLen,PosFound;

	Length=strlen(String);
	subLen=strlen(Substr);
	PosFound=Length;
	for(i=0;i<Length;i++){
    d7cc:	8f 5f       	subi	r24, 0xFF	; 255
    d7ce:	11 96       	adiw	r26, 0x01	; 1
    d7d0:	81 17       	cp	r24, r17
    d7d2:	40 f3       	brcs	.-48     	; 0xd7a4 <Pos+0x32>
    d7d4:	81 2f       	mov	r24, r17
			    break;  
			}
		}
	}
  return  PosFound;
}
    d7d6:	90 e0       	ldi	r25, 0x00	; 0
    d7d8:	df 91       	pop	r29
    d7da:	cf 91       	pop	r28
    d7dc:	1f 91       	pop	r17
    d7de:	0f 91       	pop	r16
    d7e0:	08 95       	ret

0000d7e2 <GetParameter>:


void GetParameter(char *GFlow,char FLength,char *GCmd,char *GPumpID, char *GeniCSum){
    d7e2:	8f 92       	push	r8
    d7e4:	9f 92       	push	r9
    d7e6:	af 92       	push	r10
    d7e8:	bf 92       	push	r11
    d7ea:	cf 92       	push	r12
    d7ec:	df 92       	push	r13
    d7ee:	ef 92       	push	r14
    d7f0:	ff 92       	push	r15
    d7f2:	0f 93       	push	r16
    d7f4:	1f 93       	push	r17
    d7f6:	df 93       	push	r29
    d7f8:	cf 93       	push	r28
    d7fa:	cd b7       	in	r28, 0x3d	; 61
    d7fc:	de b7       	in	r29, 0x3e	; 62
    d7fe:	a7 97       	sbiw	r28, 0x27	; 39
    d800:	0f b6       	in	r0, 0x3f	; 63
    d802:	f8 94       	cli
    d804:	de bf       	out	0x3e, r29	; 62
    d806:	0f be       	out	0x3f, r0	; 63
    d808:	cd bf       	out	0x3d, r28	; 61
    d80a:	59 01       	movw	r10, r18
    d80c:	48 01       	movw	r8, r16
    d80e:	26 2f       	mov	r18, r22
    d810:	30 e0       	ldi	r19, 0x00	; 0
    d812:	dc 01       	movw	r26, r24
    d814:	a2 0f       	add	r26, r18
    d816:	b3 1f       	adc	r27, r19
    d818:	fe 01       	movw	r30, r28
    d81a:	3a 96       	adiw	r30, 0x0a	; 10
    d81c:	2e 0f       	add	r18, r30
    d81e:	3f 1f       	adc	r19, r31
char SGeniusFlow[30];
char strSend[20],strSub[3];
int SumLength;

     //TransposeFlow
     for (i=0;i<FLength;i++){	 
    d820:	02 c0       	rjmp	.+4      	; 0xd826 <GetParameter+0x44>
	     SGeniusFlow[i]=GFlow[FLength-i-1];
    d822:	8e 91       	ld	r24, -X
    d824:	81 93       	st	Z+, r24
char SGeniusFlow[30];
char strSend[20],strSub[3];
int SumLength;

     //TransposeFlow
     for (i=0;i<FLength;i++){	 
    d826:	e2 17       	cp	r30, r18
    d828:	f3 07       	cpc	r31, r19
    d82a:	d9 f7       	brne	.-10     	; 0xd822 <GetParameter+0x40>
	     SGeniusFlow[i]=GFlow[FLength-i-1];
	 }SGeniusFlow[FLength]=0;
    d82c:	c6 2e       	mov	r12, r22
    d82e:	dd 24       	eor	r13, r13
    d830:	6a e0       	ldi	r22, 0x0A	; 10
    d832:	e6 2e       	mov	r14, r22
    d834:	f1 2c       	mov	r15, r1
    d836:	ec 0e       	add	r14, r28
    d838:	fd 1e       	adc	r15, r29
    d83a:	f7 01       	movw	r30, r14
    d83c:	ec 0d       	add	r30, r12
    d83e:	fd 1d       	adc	r31, r13
    d840:	10 82       	st	Z, r1

	 xCmd=CharPosCopy(SGeniusFlow,0);
	 *GCmd=xCmd;
    d842:	8a 85       	ldd	r24, Y+10	; 0x0a
    d844:	fa 01       	movw	r30, r20
    d846:	80 83       	st	Z, r24
	 StrPosCopy(SGeniusFlow,sPumpID,1,2);
    d848:	c7 01       	movw	r24, r14
    d84a:	8e 01       	movw	r16, r28
    d84c:	0f 5f       	subi	r16, 0xFF	; 255
    d84e:	1f 4f       	sbci	r17, 0xFF	; 255
    d850:	b8 01       	movw	r22, r16
    d852:	41 e0       	ldi	r20, 0x01	; 1
    d854:	50 e0       	ldi	r21, 0x00	; 0
    d856:	22 e0       	ldi	r18, 0x02	; 2
    d858:	30 e0       	ldi	r19, 0x00	; 0
    d85a:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
	 xPumpID=atoi(sPumpID);
    d85e:	c8 01       	movw	r24, r16
    d860:	0e 94 e0 a7 	call	0x14fc0	; 0x14fc0 <atoi>
    d864:	f5 01       	movw	r30, r10
    d866:	80 83       	st	Z, r24
	 *GPumpID=xPumpID;
	 sprintf_P(strSub,PSTR(":"));
    d868:	00 d0       	rcall	.+0      	; 0xd86a <GetParameter+0x88>
    d86a:	00 d0       	rcall	.+0      	; 0xd86c <GetParameter+0x8a>
    d86c:	8e 01       	movw	r16, r28
    d86e:	09 5f       	subi	r16, 0xF9	; 249
    d870:	1f 4f       	sbci	r17, 0xFF	; 255
    d872:	ed b7       	in	r30, 0x3d	; 61
    d874:	fe b7       	in	r31, 0x3e	; 62
    d876:	12 83       	std	Z+2, r17	; 0x02
    d878:	01 83       	std	Z+1, r16	; 0x01
    d87a:	81 e2       	ldi	r24, 0x21	; 33
    d87c:	95 e0       	ldi	r25, 0x05	; 5
    d87e:	94 83       	std	Z+4, r25	; 0x04
    d880:	83 83       	std	Z+3, r24	; 0x03
    d882:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	 if (Pos(strSub,SGeniusFlow)<FLength){
    d886:	0f 90       	pop	r0
    d888:	0f 90       	pop	r0
    d88a:	0f 90       	pop	r0
    d88c:	0f 90       	pop	r0
    d88e:	c8 01       	movw	r24, r16
    d890:	b7 01       	movw	r22, r14
    d892:	0e 94 b9 6b 	call	0xd772	; 0xd772 <Pos>
    d896:	8c 15       	cp	r24, r12
    d898:	9d 05       	cpc	r25, r13
    d89a:	94 f4       	brge	.+36     	; 0xd8c0 <GetParameter+0xde>
	     SumLength=FLength-Pos(strSub,SGeniusFlow);
	 	 StrPosCopy(SGeniusFlow,sCSum,Pos(strSub,SGeniusFlow)+1,SumLength);
    d89c:	8e 01       	movw	r16, r28
    d89e:	0c 5f       	subi	r16, 0xFC	; 252
    d8a0:	1f 4f       	sbci	r17, 0xFF	; 255
    d8a2:	ac 01       	movw	r20, r24
    d8a4:	4f 5f       	subi	r20, 0xFF	; 255
    d8a6:	5f 4f       	sbci	r21, 0xFF	; 255
	 StrPosCopy(SGeniusFlow,sPumpID,1,2);
	 xPumpID=atoi(sPumpID);
	 *GPumpID=xPumpID;
	 sprintf_P(strSub,PSTR(":"));
	 if (Pos(strSub,SGeniusFlow)<FLength){
	     SumLength=FLength-Pos(strSub,SGeniusFlow);
    d8a8:	96 01       	movw	r18, r12
    d8aa:	28 1b       	sub	r18, r24
    d8ac:	39 0b       	sbc	r19, r25
	 	 StrPosCopy(SGeniusFlow,sCSum,Pos(strSub,SGeniusFlow)+1,SumLength);
    d8ae:	c7 01       	movw	r24, r14
    d8b0:	b8 01       	movw	r22, r16
    d8b2:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
		 xCsum=atoi(sCSum);
    d8b6:	c8 01       	movw	r24, r16
    d8b8:	0e 94 e0 a7 	call	0x14fc0	; 0x14fc0 <atoi>
    d8bc:	f4 01       	movw	r30, r8
    d8be:	80 83       	st	Z, r24
	 sprintf_P(strSend,PSTR("%d"),xPumpID);
	 uart_print(1,1,strSend);
	 sprintf_P(strSend,PSTR("%s"),sCSum);
	 uart_print(1,1,strSend);
*/
}
    d8c0:	a7 96       	adiw	r28, 0x27	; 39
    d8c2:	0f b6       	in	r0, 0x3f	; 63
    d8c4:	f8 94       	cli
    d8c6:	de bf       	out	0x3e, r29	; 62
    d8c8:	0f be       	out	0x3f, r0	; 63
    d8ca:	cd bf       	out	0x3d, r28	; 61
    d8cc:	cf 91       	pop	r28
    d8ce:	df 91       	pop	r29
    d8d0:	1f 91       	pop	r17
    d8d2:	0f 91       	pop	r16
    d8d4:	ff 90       	pop	r15
    d8d6:	ef 90       	pop	r14
    d8d8:	df 90       	pop	r13
    d8da:	cf 90       	pop	r12
    d8dc:	bf 90       	pop	r11
    d8de:	af 90       	pop	r10
    d8e0:	9f 90       	pop	r9
    d8e2:	8f 90       	pop	r8
    d8e4:	08 95       	ret

0000d8e6 <IsGeniusCommand>:

char IsGeniusCommand(char GCommand){
    d8e6:	ff 92       	push	r15
    d8e8:	0f 93       	push	r16
    d8ea:	1f 93       	push	r17
    d8ec:	df 93       	push	r29
    d8ee:	cf 93       	push	r28
    d8f0:	cd b7       	in	r28, 0x3d	; 61
    d8f2:	de b7       	in	r29, 0x3e	; 62
    d8f4:	2a 97       	sbiw	r28, 0x0a	; 10
    d8f6:	0f b6       	in	r0, 0x3f	; 63
    d8f8:	f8 94       	cli
    d8fa:	de bf       	out	0x3e, r29	; 62
    d8fc:	0f be       	out	0x3f, r0	; 63
    d8fe:	cd bf       	out	0x3d, r28	; 61
    d900:	f8 2e       	mov	r15, r24
     char i,Result,CommandList[10];
     Result=False;
	 sprintf_P(CommandList,PSTR("CTSRP"));
    d902:	00 d0       	rcall	.+0      	; 0xd904 <IsGeniusCommand+0x1e>
    d904:	00 d0       	rcall	.+0      	; 0xd906 <IsGeniusCommand+0x20>
    d906:	8e 01       	movw	r16, r28
    d908:	0f 5f       	subi	r16, 0xFF	; 255
    d90a:	1f 4f       	sbci	r17, 0xFF	; 255
    d90c:	ad b7       	in	r26, 0x3d	; 61
    d90e:	be b7       	in	r27, 0x3e	; 62
    d910:	12 96       	adiw	r26, 0x02	; 2
    d912:	1c 93       	st	X, r17
    d914:	0e 93       	st	-X, r16
    d916:	11 97       	sbiw	r26, 0x01	; 1
    d918:	2b e1       	ldi	r18, 0x1B	; 27
    d91a:	35 e0       	ldi	r19, 0x05	; 5
    d91c:	14 96       	adiw	r26, 0x04	; 4
    d91e:	3c 93       	st	X, r19
    d920:	2e 93       	st	-X, r18
    d922:	13 97       	sbiw	r26, 0x03	; 3
    d924:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	 for(i=0;i<strlen(CommandList);i++){
    d928:	f8 01       	movw	r30, r16
    d92a:	01 90       	ld	r0, Z+
    d92c:	00 20       	and	r0, r0
    d92e:	e9 f7       	brne	.-6      	; 0xd92a <IsGeniusCommand+0x44>
    d930:	31 97       	sbiw	r30, 0x01	; 1
    d932:	e0 1b       	sub	r30, r16
    d934:	f1 0b       	sbc	r31, r17
    d936:	0f 90       	pop	r0
    d938:	0f 90       	pop	r0
    d93a:	0f 90       	pop	r0
    d93c:	0f 90       	pop	r0
    d93e:	80 e0       	ldi	r24, 0x00	; 0
    d940:	07 c0       	rjmp	.+14     	; 0xd950 <IsGeniusCommand+0x6a>
	    if (CommandList[i]==GCommand){
    d942:	20 0f       	add	r18, r16
    d944:	31 1f       	adc	r19, r17
    d946:	d9 01       	movw	r26, r18
    d948:	9c 91       	ld	r25, X
    d94a:	9f 15       	cp	r25, r15
    d94c:	41 f0       	breq	.+16     	; 0xd95e <IsGeniusCommand+0x78>

char IsGeniusCommand(char GCommand){
     char i,Result,CommandList[10];
     Result=False;
	 sprintf_P(CommandList,PSTR("CTSRP"));
	 for(i=0;i<strlen(CommandList);i++){
    d94e:	8f 5f       	subi	r24, 0xFF	; 255
    d950:	28 2f       	mov	r18, r24
    d952:	30 e0       	ldi	r19, 0x00	; 0
    d954:	2e 17       	cp	r18, r30
    d956:	3f 07       	cpc	r19, r31
    d958:	a0 f3       	brcs	.-24     	; 0xd942 <IsGeniusCommand+0x5c>
*/
}

char IsGeniusCommand(char GCommand){
     char i,Result,CommandList[10];
     Result=False;
    d95a:	80 e0       	ldi	r24, 0x00	; 0
    d95c:	01 c0       	rjmp	.+2      	; 0xd960 <IsGeniusCommand+0x7a>
	 sprintf_P(CommandList,PSTR("CTSRP"));
	 for(i=0;i<strlen(CommandList);i++){
	    if (CommandList[i]==GCommand){
		    Result=True;
    d95e:	81 e0       	ldi	r24, 0x01	; 1
			break;
			}
	 }
   return Result;	 
}
    d960:	2a 96       	adiw	r28, 0x0a	; 10
    d962:	0f b6       	in	r0, 0x3f	; 63
    d964:	f8 94       	cli
    d966:	de bf       	out	0x3e, r29	; 62
    d968:	0f be       	out	0x3f, r0	; 63
    d96a:	cd bf       	out	0x3d, r28	; 61
    d96c:	cf 91       	pop	r28
    d96e:	df 91       	pop	r29
    d970:	1f 91       	pop	r17
    d972:	0f 91       	pop	r16
    d974:	ff 90       	pop	r15
    d976:	08 95       	ret

0000d978 <SumChecksum>:
	Geniflow[1]=Geniflow[0];
	Geniflow[0]=dataIn;
*/
}

char SumChecksum(char *strChecked){
    d978:	9c 01       	movw	r18, r24
     unsigned int SigmaSum=0;
	 char i,Result;
	 for(i=0;i<strlen(strChecked);i++){
    d97a:	fc 01       	movw	r30, r24
    d97c:	01 90       	ld	r0, Z+
    d97e:	00 20       	and	r0, r0
    d980:	e9 f7       	brne	.-6      	; 0xd97c <SumChecksum+0x4>
    d982:	31 97       	sbiw	r30, 0x01	; 1
    d984:	e8 1b       	sub	r30, r24
    d986:	f9 0b       	sbc	r31, r25
    d988:	60 e0       	ldi	r22, 0x00	; 0
	Geniflow[0]=dataIn;
*/
}

char SumChecksum(char *strChecked){
     unsigned int SigmaSum=0;
    d98a:	80 e0       	ldi	r24, 0x00	; 0
    d98c:	90 e0       	ldi	r25, 0x00	; 0
	 char i,Result;
	 for(i=0;i<strlen(strChecked);i++){
    d98e:	07 c0       	rjmp	.+14     	; 0xd99e <SumChecksum+0x26>
	     SigmaSum=SigmaSum+strChecked[i];
    d990:	42 0f       	add	r20, r18
    d992:	53 1f       	adc	r21, r19
    d994:	da 01       	movw	r26, r20
    d996:	4c 91       	ld	r20, X
    d998:	84 0f       	add	r24, r20
    d99a:	91 1d       	adc	r25, r1
}

char SumChecksum(char *strChecked){
     unsigned int SigmaSum=0;
	 char i,Result;
	 for(i=0;i<strlen(strChecked);i++){
    d99c:	6f 5f       	subi	r22, 0xFF	; 255
    d99e:	46 2f       	mov	r20, r22
    d9a0:	50 e0       	ldi	r21, 0x00	; 0
    d9a2:	4e 17       	cp	r20, r30
    d9a4:	5f 07       	cpc	r21, r31
    d9a6:	a0 f3       	brcs	.-24     	; 0xd990 <SumChecksum+0x18>
	     SigmaSum=SigmaSum+strChecked[i];
	 }
	 Result=(SigmaSum%255);
    d9a8:	6f ef       	ldi	r22, 0xFF	; 255
    d9aa:	70 e0       	ldi	r23, 0x00	; 0
    d9ac:	0e 94 97 a7 	call	0x14f2e	; 0x14f2e <__udivmodhi4>
	 if (Result==0)Result=255;
    d9b0:	88 23       	and	r24, r24
    d9b2:	09 f4       	brne	.+2      	; 0xd9b6 <SumChecksum+0x3e>
    d9b4:	8f ef       	ldi	r24, 0xFF	; 255
   return Result;
}
    d9b6:	08 95       	ret

0000d9b8 <NormalizeDecimal>:

void NormalizeDecimal(char CurrentDecimal, char NewDecimal, char *Result){// 01234567,89
    d9b8:	68 2f       	mov	r22, r24
		 StrPosCopy(Result,SResult,DeltaDec,Length-DeltaDec);
		 	           
	 
     }
*/
     FormatDecimal(Result,CurrentDecimal);
    d9ba:	ca 01       	movw	r24, r20
    d9bc:	0e 94 29 2c 	call	0x5852	; 0x5852 <FormatDecimal>
}
    d9c0:	08 95       	ret

0000d9c2 <GetTransactionVolume>:

void GetTransactionVolume(char iPumpID,char *Result){
    d9c2:	1f 93       	push	r17
    d9c4:	cf 93       	push	r28
    d9c6:	df 93       	push	r29
    d9c8:	18 2f       	mov	r17, r24
    d9ca:	eb 01       	movw	r28, r22
     AddZeroLead(Result,10);
    d9cc:	cb 01       	movw	r24, r22
    d9ce:	6a e0       	ldi	r22, 0x0A	; 10
    d9d0:	0e 94 c0 2b 	call	0x5780	; 0x5780 <AddZeroLead>
     sprintf_P(Result,PSTR("%s"),RecPumpData[iPumpID&0x0F].Volume); 
    d9d4:	00 d0       	rcall	.+0      	; 0xd9d6 <GetTransactionVolume+0x14>
    d9d6:	00 d0       	rcall	.+0      	; 0xd9d8 <GetTransactionVolume+0x16>
    d9d8:	00 d0       	rcall	.+0      	; 0xd9da <GetTransactionVolume+0x18>
    d9da:	ed b7       	in	r30, 0x3d	; 61
    d9dc:	fe b7       	in	r31, 0x3e	; 62
    d9de:	31 96       	adiw	r30, 0x01	; 1
    d9e0:	ad b7       	in	r26, 0x3d	; 61
    d9e2:	be b7       	in	r27, 0x3e	; 62
    d9e4:	12 96       	adiw	r26, 0x02	; 2
    d9e6:	dc 93       	st	X, r29
    d9e8:	ce 93       	st	-X, r28
    d9ea:	11 97       	sbiw	r26, 0x01	; 1
    d9ec:	20 e1       	ldi	r18, 0x10	; 16
    d9ee:	35 e0       	ldi	r19, 0x05	; 5
    d9f0:	33 83       	std	Z+3, r19	; 0x03
    d9f2:	22 83       	std	Z+2, r18	; 0x02
    d9f4:	81 2f       	mov	r24, r17
    d9f6:	90 e0       	ldi	r25, 0x00	; 0
    d9f8:	8f 70       	andi	r24, 0x0F	; 15
    d9fa:	90 70       	andi	r25, 0x00	; 0
    d9fc:	45 e3       	ldi	r20, 0x35	; 53
    d9fe:	50 e0       	ldi	r21, 0x00	; 0
    da00:	84 9f       	mul	r24, r20
    da02:	90 01       	movw	r18, r0
    da04:	85 9f       	mul	r24, r21
    da06:	30 0d       	add	r19, r0
    da08:	94 9f       	mul	r25, r20
    da0a:	30 0d       	add	r19, r0
    da0c:	11 24       	eor	r1, r1
    da0e:	21 55       	subi	r18, 0x51	; 81
    da10:	39 4f       	sbci	r19, 0xF9	; 249
    da12:	35 83       	std	Z+5, r19	; 0x05
    da14:	24 83       	std	Z+4, r18	; 0x04
    da16:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    da1a:	8d b7       	in	r24, 0x3d	; 61
    da1c:	9e b7       	in	r25, 0x3e	; 62
    da1e:	06 96       	adiw	r24, 0x06	; 6
    da20:	0f b6       	in	r0, 0x3f	; 63
    da22:	f8 94       	cli
    da24:	9e bf       	out	0x3e, r25	; 62
    da26:	0f be       	out	0x3f, r0	; 63
    da28:	8d bf       	out	0x3d, r24	; 61
	 //NormalizeDecimal(eeprom_read_byte(&DefDecimalVolume),3,Result);
}
    da2a:	df 91       	pop	r29
    da2c:	cf 91       	pop	r28
    da2e:	1f 91       	pop	r17
    da30:	08 95       	ret

0000da32 <GetTransactionMoney>:
void GetTransactionMoney(char iPumpID,char *Result){
    da32:	1f 93       	push	r17
    da34:	cf 93       	push	r28
    da36:	df 93       	push	r29
    da38:	18 2f       	mov	r17, r24
    da3a:	eb 01       	movw	r28, r22
     AddZeroLead(Result,10);
    da3c:	cb 01       	movw	r24, r22
    da3e:	6a e0       	ldi	r22, 0x0A	; 10
    da40:	0e 94 c0 2b 	call	0x5780	; 0x5780 <AddZeroLead>
	 sprintf_P(Result,PSTR("%s"),RecPumpData[iPumpID&0x0F].Money);
    da44:	00 d0       	rcall	.+0      	; 0xda46 <GetTransactionMoney+0x14>
    da46:	00 d0       	rcall	.+0      	; 0xda48 <GetTransactionMoney+0x16>
    da48:	00 d0       	rcall	.+0      	; 0xda4a <GetTransactionMoney+0x18>
    da4a:	ed b7       	in	r30, 0x3d	; 61
    da4c:	fe b7       	in	r31, 0x3e	; 62
    da4e:	31 96       	adiw	r30, 0x01	; 1
    da50:	ad b7       	in	r26, 0x3d	; 61
    da52:	be b7       	in	r27, 0x3e	; 62
    da54:	12 96       	adiw	r26, 0x02	; 2
    da56:	dc 93       	st	X, r29
    da58:	ce 93       	st	-X, r28
    da5a:	11 97       	sbiw	r26, 0x01	; 1
    da5c:	2d e0       	ldi	r18, 0x0D	; 13
    da5e:	35 e0       	ldi	r19, 0x05	; 5
    da60:	33 83       	std	Z+3, r19	; 0x03
    da62:	22 83       	std	Z+2, r18	; 0x02
    da64:	81 2f       	mov	r24, r17
    da66:	90 e0       	ldi	r25, 0x00	; 0
    da68:	8f 70       	andi	r24, 0x0F	; 15
    da6a:	90 70       	andi	r25, 0x00	; 0
    da6c:	45 e3       	ldi	r20, 0x35	; 53
    da6e:	50 e0       	ldi	r21, 0x00	; 0
    da70:	84 9f       	mul	r24, r20
    da72:	90 01       	movw	r18, r0
    da74:	85 9f       	mul	r24, r21
    da76:	30 0d       	add	r19, r0
    da78:	94 9f       	mul	r25, r20
    da7a:	30 0d       	add	r19, r0
    da7c:	11 24       	eor	r1, r1
    da7e:	28 54       	subi	r18, 0x48	; 72
    da80:	39 4f       	sbci	r19, 0xF9	; 249
    da82:	35 83       	std	Z+5, r19	; 0x05
    da84:	24 83       	std	Z+4, r18	; 0x04
    da86:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    da8a:	8d b7       	in	r24, 0x3d	; 61
    da8c:	9e b7       	in	r25, 0x3e	; 62
    da8e:	06 96       	adiw	r24, 0x06	; 6
    da90:	0f b6       	in	r0, 0x3f	; 63
    da92:	f8 94       	cli
    da94:	9e bf       	out	0x3e, r25	; 62
    da96:	0f be       	out	0x3f, r0	; 63
    da98:	8d bf       	out	0x3d, r24	; 61
	 //NormalizeDecimal(eeprom_read_byte(&DefDecimalMoney),3,Result);
}
    da9a:	df 91       	pop	r29
    da9c:	cf 91       	pop	r28
    da9e:	1f 91       	pop	r17
    daa0:	08 95       	ret

0000daa2 <ComposeDatetime>:
	}
	 //NormalizeDecimal(eeprom_read_byte(&DefDecimalTotalMoney),2,Result);
}


void ComposeDatetime(char *Result){// 2010/10/01 16:27:44
    daa2:	2f 92       	push	r2
    daa4:	3f 92       	push	r3
    daa6:	4f 92       	push	r4
    daa8:	5f 92       	push	r5
    daaa:	6f 92       	push	r6
    daac:	7f 92       	push	r7
    daae:	8f 92       	push	r8
    dab0:	9f 92       	push	r9
    dab2:	af 92       	push	r10
    dab4:	bf 92       	push	r11
    dab6:	cf 92       	push	r12
    dab8:	df 92       	push	r13
    daba:	ef 92       	push	r14
    dabc:	ff 92       	push	r15
    dabe:	0f 93       	push	r16
    dac0:	1f 93       	push	r17
    dac2:	df 93       	push	r29
    dac4:	cf 93       	push	r28
    dac6:	cd b7       	in	r28, 0x3d	; 61
    dac8:	de b7       	in	r29, 0x3e	; 62
    daca:	62 97       	sbiw	r28, 0x12	; 18
    dacc:	0f b6       	in	r0, 0x3f	; 63
    dace:	f8 94       	cli
    dad0:	de bf       	out	0x3e, r29	; 62
    dad2:	0f be       	out	0x3f, r0	; 63
    dad4:	cd bf       	out	0x3d, r28	; 61
    dad6:	1c 01       	movw	r2, r24
	 char sYear[3],sMonth[3],sDay[3];
	 char sHour[3],sMinute[3],sSecond[3];
     
     StrPosCopy(strSystemDate,sDay,0,2);
    dad8:	0e e9       	ldi	r16, 0x9E	; 158
    dada:	14 e0       	ldi	r17, 0x04	; 4
    dadc:	b7 e0       	ldi	r27, 0x07	; 7
    dade:	4b 2e       	mov	r4, r27
    dae0:	51 2c       	mov	r5, r1
    dae2:	4c 0e       	add	r4, r28
    dae4:	5d 1e       	adc	r5, r29
    dae6:	c8 01       	movw	r24, r16
    dae8:	b2 01       	movw	r22, r4
    daea:	40 e0       	ldi	r20, 0x00	; 0
    daec:	50 e0       	ldi	r21, 0x00	; 0
    daee:	22 e0       	ldi	r18, 0x02	; 2
    daf0:	30 e0       	ldi	r19, 0x00	; 0
    daf2:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
     StrPosCopy(strSystemDate,sMonth,3,2);
    daf6:	a4 e0       	ldi	r26, 0x04	; 4
    daf8:	6a 2e       	mov	r6, r26
    dafa:	71 2c       	mov	r7, r1
    dafc:	6c 0e       	add	r6, r28
    dafe:	7d 1e       	adc	r7, r29
    db00:	c8 01       	movw	r24, r16
    db02:	b3 01       	movw	r22, r6
    db04:	43 e0       	ldi	r20, 0x03	; 3
    db06:	50 e0       	ldi	r21, 0x00	; 0
    db08:	22 e0       	ldi	r18, 0x02	; 2
    db0a:	30 e0       	ldi	r19, 0x00	; 0
    db0c:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
     StrPosCopy(strSystemDate,sYear,6,2);
    db10:	c8 01       	movw	r24, r16
    db12:	7e 01       	movw	r14, r28
    db14:	08 94       	sec
    db16:	e1 1c       	adc	r14, r1
    db18:	f1 1c       	adc	r15, r1
    db1a:	b7 01       	movw	r22, r14
    db1c:	46 e0       	ldi	r20, 0x06	; 6
    db1e:	50 e0       	ldi	r21, 0x00	; 0
    db20:	22 e0       	ldi	r18, 0x02	; 2
    db22:	30 e0       	ldi	r19, 0x00	; 0
    db24:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>

     StrPosCopy(strSystemTime,sHour,0,2);
    db28:	08 e5       	ldi	r16, 0x58	; 88
    db2a:	19 e0       	ldi	r17, 0x09	; 9
    db2c:	fa e0       	ldi	r31, 0x0A	; 10
    db2e:	cf 2e       	mov	r12, r31
    db30:	d1 2c       	mov	r13, r1
    db32:	cc 0e       	add	r12, r28
    db34:	dd 1e       	adc	r13, r29
    db36:	c8 01       	movw	r24, r16
    db38:	b6 01       	movw	r22, r12
    db3a:	40 e0       	ldi	r20, 0x00	; 0
    db3c:	50 e0       	ldi	r21, 0x00	; 0
    db3e:	22 e0       	ldi	r18, 0x02	; 2
    db40:	30 e0       	ldi	r19, 0x00	; 0
    db42:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
     StrPosCopy(strSystemTime,sMinute,3,2);
    db46:	ed e0       	ldi	r30, 0x0D	; 13
    db48:	ae 2e       	mov	r10, r30
    db4a:	b1 2c       	mov	r11, r1
    db4c:	ac 0e       	add	r10, r28
    db4e:	bd 1e       	adc	r11, r29
    db50:	c8 01       	movw	r24, r16
    db52:	b5 01       	movw	r22, r10
    db54:	43 e0       	ldi	r20, 0x03	; 3
    db56:	50 e0       	ldi	r21, 0x00	; 0
    db58:	22 e0       	ldi	r18, 0x02	; 2
    db5a:	30 e0       	ldi	r19, 0x00	; 0
    db5c:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
     StrPosCopy(strSystemTime,sSecond,6,2);
    db60:	70 e1       	ldi	r23, 0x10	; 16
    db62:	87 2e       	mov	r8, r23
    db64:	91 2c       	mov	r9, r1
    db66:	8c 0e       	add	r8, r28
    db68:	9d 1e       	adc	r9, r29
    db6a:	c8 01       	movw	r24, r16
    db6c:	b4 01       	movw	r22, r8
    db6e:	46 e0       	ldi	r20, 0x06	; 6
    db70:	50 e0       	ldi	r21, 0x00	; 0
    db72:	22 e0       	ldi	r18, 0x02	; 2
    db74:	30 e0       	ldi	r19, 0x00	; 0
    db76:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
	 sprintf_P(Result,PSTR("20%s/%s/%s %s:%s:%s"),sYear,sMonth,sDay,sHour,sMinute,sSecond);
    db7a:	8d b7       	in	r24, 0x3d	; 61
    db7c:	9e b7       	in	r25, 0x3e	; 62
    db7e:	40 97       	sbiw	r24, 0x10	; 16
    db80:	0f b6       	in	r0, 0x3f	; 63
    db82:	f8 94       	cli
    db84:	9e bf       	out	0x3e, r25	; 62
    db86:	0f be       	out	0x3f, r0	; 63
    db88:	8d bf       	out	0x3d, r24	; 61
    db8a:	ed b7       	in	r30, 0x3d	; 61
    db8c:	fe b7       	in	r31, 0x3e	; 62
    db8e:	31 96       	adiw	r30, 0x01	; 1
    db90:	ad b7       	in	r26, 0x3d	; 61
    db92:	be b7       	in	r27, 0x3e	; 62
    db94:	12 96       	adiw	r26, 0x02	; 2
    db96:	3c 92       	st	X, r3
    db98:	2e 92       	st	-X, r2
    db9a:	11 97       	sbiw	r26, 0x01	; 1
    db9c:	89 ef       	ldi	r24, 0xF9	; 249
    db9e:	94 e0       	ldi	r25, 0x04	; 4
    dba0:	93 83       	std	Z+3, r25	; 0x03
    dba2:	82 83       	std	Z+2, r24	; 0x02
    dba4:	f5 82       	std	Z+5, r15	; 0x05
    dba6:	e4 82       	std	Z+4, r14	; 0x04
    dba8:	77 82       	std	Z+7, r7	; 0x07
    dbaa:	66 82       	std	Z+6, r6	; 0x06
    dbac:	51 86       	std	Z+9, r5	; 0x09
    dbae:	40 86       	std	Z+8, r4	; 0x08
    dbb0:	d3 86       	std	Z+11, r13	; 0x0b
    dbb2:	c2 86       	std	Z+10, r12	; 0x0a
    dbb4:	b5 86       	std	Z+13, r11	; 0x0d
    dbb6:	a4 86       	std	Z+12, r10	; 0x0c
    dbb8:	97 86       	std	Z+15, r9	; 0x0f
    dbba:	86 86       	std	Z+14, r8	; 0x0e
    dbbc:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    dbc0:	8d b7       	in	r24, 0x3d	; 61
    dbc2:	9e b7       	in	r25, 0x3e	; 62
    dbc4:	40 96       	adiw	r24, 0x10	; 16
    dbc6:	0f b6       	in	r0, 0x3f	; 63
    dbc8:	f8 94       	cli
    dbca:	9e bf       	out	0x3e, r25	; 62
    dbcc:	0f be       	out	0x3f, r0	; 63
    dbce:	8d bf       	out	0x3d, r24	; 61
}
    dbd0:	62 96       	adiw	r28, 0x12	; 18
    dbd2:	0f b6       	in	r0, 0x3f	; 63
    dbd4:	f8 94       	cli
    dbd6:	de bf       	out	0x3e, r29	; 62
    dbd8:	0f be       	out	0x3f, r0	; 63
    dbda:	cd bf       	out	0x3d, r28	; 61
    dbdc:	cf 91       	pop	r28
    dbde:	df 91       	pop	r29
    dbe0:	1f 91       	pop	r17
    dbe2:	0f 91       	pop	r16
    dbe4:	ff 90       	pop	r15
    dbe6:	ef 90       	pop	r14
    dbe8:	df 90       	pop	r13
    dbea:	cf 90       	pop	r12
    dbec:	bf 90       	pop	r11
    dbee:	af 90       	pop	r10
    dbf0:	9f 90       	pop	r9
    dbf2:	8f 90       	pop	r8
    dbf4:	7f 90       	pop	r7
    dbf6:	6f 90       	pop	r6
    dbf8:	5f 90       	pop	r5
    dbfa:	4f 90       	pop	r4
    dbfc:	3f 90       	pop	r3
    dbfe:	2f 90       	pop	r2
    dc00:	08 95       	ret

0000dc02 <GetPumpID>:


char GetPumpID(char FIPAddr){//Find Stored PumpID in PumpMap
    dc02:	1f 93       	push	r17
    dc04:	df 93       	push	r29
    dc06:	cf 93       	push	r28
    dc08:	cd b7       	in	r28, 0x3d	; 61
    dc0a:	de b7       	in	r29, 0x3e	; 62
    dc0c:	28 97       	sbiw	r28, 0x08	; 8
    dc0e:	0f b6       	in	r0, 0x3f	; 63
    dc10:	f8 94       	cli
    dc12:	de bf       	out	0x3e, r29	; 62
    dc14:	0f be       	out	0x3f, r0	; 63
    dc16:	cd bf       	out	0x3d, r28	; 61
    dc18:	18 2f       	mov	r17, r24
     char PPumpID[8],Result;     
     eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap,8);
    dc1a:	ce 01       	movw	r24, r28
    dc1c:	01 96       	adiw	r24, 0x01	; 1
    dc1e:	66 e4       	ldi	r22, 0x46	; 70
    dc20:	70 e0       	ldi	r23, 0x00	; 0
    dc22:	48 e0       	ldi	r20, 0x08	; 8
    dc24:	50 e0       	ldi	r21, 0x00	; 0
    dc26:	0e 94 56 aa 	call	0x154ac	; 0x154ac <__eerd_block_m128>
	 Result=0;
	 if ((FIPAddr>0) && (FIPAddr<8)){
    dc2a:	81 2f       	mov	r24, r17
    dc2c:	81 50       	subi	r24, 0x01	; 1
    dc2e:	87 30       	cpi	r24, 0x07	; 7
    dc30:	28 f4       	brcc	.+10     	; 0xdc3c <GetPumpID+0x3a>
	    Result=PPumpID[FIPAddr-1];
    dc32:	fe 01       	movw	r30, r28
    dc34:	e1 0f       	add	r30, r17
    dc36:	f1 1d       	adc	r31, r1
    dc38:	80 81       	ld	r24, Z
    dc3a:	01 c0       	rjmp	.+2      	; 0xdc3e <GetPumpID+0x3c>


char GetPumpID(char FIPAddr){//Find Stored PumpID in PumpMap
     char PPumpID[8],Result;     
     eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap,8);
	 Result=0;
    dc3c:	80 e0       	ldi	r24, 0x00	; 0
	 if ((FIPAddr>0) && (FIPAddr<8)){
	    Result=PPumpID[FIPAddr-1];
	 }
   return Result;
}
    dc3e:	28 96       	adiw	r28, 0x08	; 8
    dc40:	0f b6       	in	r0, 0x3f	; 63
    dc42:	f8 94       	cli
    dc44:	de bf       	out	0x3e, r29	; 62
    dc46:	0f be       	out	0x3f, r0	; 63
    dc48:	cd bf       	out	0x3d, r28	; 61
    dc4a:	cf 91       	pop	r28
    dc4c:	df 91       	pop	r29
    dc4e:	1f 91       	pop	r17
    dc50:	08 95       	ret

0000dc52 <sendMessage98>:
	//if (xFIP_ID>16)xFIP_ID=16;
	sprintf_P(strSend,PSTR("%s%s%s%s98%.2dF968CFFB"),strIFT_ID,strSeqNum,strClientIP,strServerIP,xFIP_ID);
	uart_print(1, 0,strSend);
	uart(1, 1,0x02);
*/
    sprintf_P(strFIP_ID,PSTR("%.2d"),GetPumpID(FIPAddr));
    dc52:	0e 94 01 6e 	call	0xdc02	; 0xdc02 <GetPumpID>
    dc56:	00 d0       	rcall	.+0      	; 0xdc58 <sendMessage98+0x6>
    dc58:	00 d0       	rcall	.+0      	; 0xdc5a <sendMessage98+0x8>
    dc5a:	00 d0       	rcall	.+0      	; 0xdc5c <sendMessage98+0xa>
    dc5c:	ed b7       	in	r30, 0x3d	; 61
    dc5e:	fe b7       	in	r31, 0x3e	; 62
    dc60:	31 96       	adiw	r30, 0x01	; 1
    dc62:	2d e9       	ldi	r18, 0x9D	; 157
    dc64:	38 e0       	ldi	r19, 0x08	; 8
    dc66:	ad b7       	in	r26, 0x3d	; 61
    dc68:	be b7       	in	r27, 0x3e	; 62
    dc6a:	12 96       	adiw	r26, 0x02	; 2
    dc6c:	3c 93       	st	X, r19
    dc6e:	2e 93       	st	-X, r18
    dc70:	11 97       	sbiw	r26, 0x01	; 1
    dc72:	22 eb       	ldi	r18, 0xB2	; 178
    dc74:	32 e2       	ldi	r19, 0x22	; 34
    dc76:	33 83       	std	Z+3, r19	; 0x03
    dc78:	22 83       	std	Z+2, r18	; 0x02
    dc7a:	84 83       	std	Z+4, r24	; 0x04
    dc7c:	15 82       	std	Z+5, r1	; 0x05
    dc7e:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	IFTSendMessage(MSG_98);
    dc82:	8d b7       	in	r24, 0x3d	; 61
    dc84:	9e b7       	in	r25, 0x3e	; 62
    dc86:	06 96       	adiw	r24, 0x06	; 6
    dc88:	0f b6       	in	r0, 0x3f	; 63
    dc8a:	f8 94       	cli
    dc8c:	9e bf       	out	0x3e, r25	; 62
    dc8e:	0f be       	out	0x3f, r0	; 63
    dc90:	8d bf       	out	0x3d, r24	; 61
    dc92:	88 e9       	ldi	r24, 0x98	; 152
    dc94:	0e 94 fc 27 	call	0x4ff8	; 0x4ff8 <IFTSendMessage>
	IsBusyMsg11=True;
    dc98:	81 e0       	ldi	r24, 0x01	; 1
    dc9a:	80 93 8c 02 	sts	0x028C, r24
}
    dc9e:	08 95       	ret

0000dca0 <GetFIPAddr>:
	    Result=PPumpID[FIPAddr-1];
	 }
   return Result;
}

char GetFIPAddr(char iPumpID){//Find FIP Addr based on PumpID respectively: 
    dca0:	ff 92       	push	r15
    dca2:	0f 93       	push	r16
    dca4:	1f 93       	push	r17
    dca6:	df 93       	push	r29
    dca8:	cf 93       	push	r28
    dcaa:	cd b7       	in	r28, 0x3d	; 61
    dcac:	de b7       	in	r29, 0x3e	; 62
    dcae:	28 97       	sbiw	r28, 0x08	; 8
    dcb0:	0f b6       	in	r0, 0x3f	; 63
    dcb2:	f8 94       	cli
    dcb4:	de bf       	out	0x3e, r29	; 62
    dcb6:	0f be       	out	0x3f, r0	; 63
    dcb8:	cd bf       	out	0x3d, r28	; 61
    dcba:	f8 2e       	mov	r15, r24
char i,PPumpID[8],Result;     //FIP1..FIP8
	 Result=0; 
	 eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap,8);
    dcbc:	8e 01       	movw	r16, r28
    dcbe:	0f 5f       	subi	r16, 0xFF	; 255
    dcc0:	1f 4f       	sbci	r17, 0xFF	; 255
    dcc2:	c8 01       	movw	r24, r16
    dcc4:	66 e4       	ldi	r22, 0x46	; 70
    dcc6:	70 e0       	ldi	r23, 0x00	; 0
    dcc8:	48 e0       	ldi	r20, 0x08	; 8
    dcca:	50 e0       	ldi	r21, 0x00	; 0
    dccc:	0e 94 56 aa 	call	0x154ac	; 0x154ac <__eerd_block_m128>
    dcd0:	f8 01       	movw	r30, r16
     for(i=0;i<8;i++){
    dcd2:	80 e0       	ldi	r24, 0x00	; 0
	     if (PPumpID[i]==iPumpID){
    dcd4:	91 91       	ld	r25, Z+
    dcd6:	8f 5f       	subi	r24, 0xFF	; 255
    dcd8:	9f 15       	cp	r25, r15
    dcda:	19 f0       	breq	.+6      	; 0xdce2 <GetFIPAddr+0x42>

char GetFIPAddr(char iPumpID){//Find FIP Addr based on PumpID respectively: 
char i,PPumpID[8],Result;     //FIP1..FIP8
	 Result=0; 
	 eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap,8);
     for(i=0;i<8;i++){
    dcdc:	88 30       	cpi	r24, 0x08	; 8
    dcde:	d1 f7       	brne	.-12     	; 0xdcd4 <GetFIPAddr+0x34>
   return Result;
}

char GetFIPAddr(char iPumpID){//Find FIP Addr based on PumpID respectively: 
char i,PPumpID[8],Result;     //FIP1..FIP8
	 Result=0; 
    dce0:	80 e0       	ldi	r24, 0x00	; 0
		     Result=i+1;
			 break;
		 }
	 }
   return Result;
}
    dce2:	28 96       	adiw	r28, 0x08	; 8
    dce4:	0f b6       	in	r0, 0x3f	; 63
    dce6:	f8 94       	cli
    dce8:	de bf       	out	0x3e, r29	; 62
    dcea:	0f be       	out	0x3f, r0	; 63
    dcec:	cd bf       	out	0x3d, r28	; 61
    dcee:	cf 91       	pop	r28
    dcf0:	df 91       	pop	r29
    dcf2:	1f 91       	pop	r17
    dcf4:	0f 91       	pop	r16
    dcf6:	ff 90       	pop	r15
    dcf8:	08 95       	ret

0000dcfa <GetTotalizerMoney>:
	     FIPAddr=FIPAddr-1;	     
	     GetTotalizerData(TVOLUME,TOTALIZER_NOW,FIPAddr,iGrade,Result);
	 }
	 //NormalizeDecimal(eeprom_read_byte(&DefDecimalTotalVolume),2,Result);
}
void GetTotalizerMoney(char iPumpID,char iGrade, char *Result){
    dcfa:	ff 92       	push	r15
    dcfc:	0f 93       	push	r16
    dcfe:	1f 93       	push	r17
    dd00:	df 93       	push	r29
    dd02:	cf 93       	push	r28
    dd04:	0f 92       	push	r0
    dd06:	cd b7       	in	r28, 0x3d	; 61
    dd08:	de b7       	in	r29, 0x3e	; 62
    dd0a:	f8 2e       	mov	r15, r24
    dd0c:	26 2f       	mov	r18, r22
    dd0e:	8a 01       	movw	r16, r20
     char FIPAddr;
     AddZeroLead(Result,13); 
    dd10:	ca 01       	movw	r24, r20
    dd12:	6d e0       	ldi	r22, 0x0D	; 13
    dd14:	29 83       	std	Y+1, r18	; 0x01
    dd16:	0e 94 c0 2b 	call	0x5780	; 0x5780 <AddZeroLead>
	 FIPAddr=GetFIPAddr(iPumpID);
    dd1a:	8f 2d       	mov	r24, r15
    dd1c:	0e 94 50 6e 	call	0xdca0	; 0xdca0 <GetFIPAddr>
	 if (FIPAddr>0){
    dd20:	29 81       	ldd	r18, Y+1	; 0x01
    dd22:	88 23       	and	r24, r24
    dd24:	31 f0       	breq	.+12     	; 0xdd32 <GetTotalizerMoney+0x38>
	    FIPAddr=FIPAddr-1;
    dd26:	48 2f       	mov	r20, r24
    dd28:	41 50       	subi	r20, 0x01	; 1
	    GetTotalizerData(TMONEY,TOTALIZER_NOW,FIPAddr,iGrade,Result);
    dd2a:	81 e0       	ldi	r24, 0x01	; 1
    dd2c:	61 e0       	ldi	r22, 0x01	; 1
    dd2e:	0e 94 a9 60 	call	0xc152	; 0xc152 <GetTotalizerData>
	}
	 //NormalizeDecimal(eeprom_read_byte(&DefDecimalTotalMoney),2,Result);
}
    dd32:	0f 90       	pop	r0
    dd34:	cf 91       	pop	r28
    dd36:	df 91       	pop	r29
    dd38:	1f 91       	pop	r17
    dd3a:	0f 91       	pop	r16
    dd3c:	ff 90       	pop	r15
    dd3e:	08 95       	ret

0000dd40 <GetTotalizerVolume>:
     AddZeroLead(Result,10);
	 sprintf_P(Result,PSTR("%s"),RecPumpData[iPumpID&0x0F].Money);
	 //NormalizeDecimal(eeprom_read_byte(&DefDecimalMoney),3,Result);
}

void GetTotalizerVolume(char iPumpID,char iGrade,char *Result){
    dd40:	ff 92       	push	r15
    dd42:	0f 93       	push	r16
    dd44:	1f 93       	push	r17
    dd46:	df 93       	push	r29
    dd48:	cf 93       	push	r28
    dd4a:	0f 92       	push	r0
    dd4c:	cd b7       	in	r28, 0x3d	; 61
    dd4e:	de b7       	in	r29, 0x3e	; 62
    dd50:	f8 2e       	mov	r15, r24
    dd52:	26 2f       	mov	r18, r22
    dd54:	8a 01       	movw	r16, r20
     char FIPAddr;
     AddZeroLead(Result,11);
    dd56:	ca 01       	movw	r24, r20
    dd58:	6b e0       	ldi	r22, 0x0B	; 11
    dd5a:	29 83       	std	Y+1, r18	; 0x01
    dd5c:	0e 94 c0 2b 	call	0x5780	; 0x5780 <AddZeroLead>
	 FIPAddr=GetFIPAddr(iPumpID);
    dd60:	8f 2d       	mov	r24, r15
    dd62:	0e 94 50 6e 	call	0xdca0	; 0xdca0 <GetFIPAddr>
	 if (FIPAddr>0){
    dd66:	29 81       	ldd	r18, Y+1	; 0x01
    dd68:	88 23       	and	r24, r24
    dd6a:	31 f0       	breq	.+12     	; 0xdd78 <GetTotalizerVolume+0x38>
	     FIPAddr=FIPAddr-1;	     
    dd6c:	48 2f       	mov	r20, r24
    dd6e:	41 50       	subi	r20, 0x01	; 1
	     GetTotalizerData(TVOLUME,TOTALIZER_NOW,FIPAddr,iGrade,Result);
    dd70:	80 e0       	ldi	r24, 0x00	; 0
    dd72:	61 e0       	ldi	r22, 0x01	; 1
    dd74:	0e 94 a9 60 	call	0xc152	; 0xc152 <GetTotalizerData>
	 }
	 //NormalizeDecimal(eeprom_read_byte(&DefDecimalTotalVolume),2,Result);
}
    dd78:	0f 90       	pop	r0
    dd7a:	cf 91       	pop	r28
    dd7c:	df 91       	pop	r29
    dd7e:	1f 91       	pop	r17
    dd80:	0f 91       	pop	r16
    dd82:	ff 90       	pop	r15
    dd84:	08 95       	ret

0000dd86 <systemGenerateReport>:
	 }
}

//Spooling HFCS 0000 : Header, Footer, Copy , Scrool [Copy:16x max]
//			cmdPrint=procMessage81();
void systemGenerateReport(){
    dd86:	2f 92       	push	r2
    dd88:	3f 92       	push	r3
    dd8a:	4f 92       	push	r4
    dd8c:	5f 92       	push	r5
    dd8e:	6f 92       	push	r6
    dd90:	7f 92       	push	r7
    dd92:	8f 92       	push	r8
    dd94:	9f 92       	push	r9
    dd96:	af 92       	push	r10
    dd98:	bf 92       	push	r11
    dd9a:	cf 92       	push	r12
    dd9c:	df 92       	push	r13
    dd9e:	ef 92       	push	r14
    dda0:	ff 92       	push	r15
    dda2:	0f 93       	push	r16
    dda4:	1f 93       	push	r17
    dda6:	df 93       	push	r29
    dda8:	cf 93       	push	r28
    ddaa:	cd b7       	in	r28, 0x3d	; 61
    ddac:	de b7       	in	r29, 0x3e	; 62
    ddae:	c5 5f       	subi	r28, 0xF5	; 245
    ddb0:	d0 40       	sbci	r29, 0x00	; 0
    ddb2:	0f b6       	in	r0, 0x3f	; 63
    ddb4:	f8 94       	cli
    ddb6:	de bf       	out	0x3e, r29	; 62
    ddb8:	0f be       	out	0x3f, r0	; 63
    ddba:	cd bf       	out	0x3d, r28	; 61
	   char strTabSpace[20],strTabSpace2[20];
	   char iTotal;//,PadLength;
	   char sPrice[10],strProductPrice[20];
	   char FIPAddr;

     switch(stGenerateReport){
    ddbc:	80 91 c7 02 	lds	r24, 0x02C7
    ddc0:	86 30       	cpi	r24, 0x06	; 6
    ddc2:	09 f4       	brne	.+2      	; 0xddc6 <systemGenerateReport+0x40>
    ddc4:	f8 c1       	rjmp	.+1008   	; 0xe1b6 <systemGenerateReport+0x430>
    ddc6:	87 30       	cpi	r24, 0x07	; 7
    ddc8:	98 f4       	brcc	.+38     	; 0xddf0 <systemGenerateReport+0x6a>
    ddca:	82 30       	cpi	r24, 0x02	; 2
    ddcc:	09 f4       	brne	.+2      	; 0xddd0 <systemGenerateReport+0x4a>
    ddce:	9f c0       	rjmp	.+318    	; 0xdf0e <systemGenerateReport+0x188>
    ddd0:	83 30       	cpi	r24, 0x03	; 3
    ddd2:	38 f4       	brcc	.+14     	; 0xdde2 <systemGenerateReport+0x5c>
    ddd4:	88 23       	and	r24, r24
    ddd6:	31 f1       	breq	.+76     	; 0xde24 <systemGenerateReport+0x9e>
    ddd8:	81 30       	cpi	r24, 0x01	; 1
    ddda:	11 f0       	breq	.+4      	; 0xdde0 <systemGenerateReport+0x5a>
    dddc:	0c 94 10 78 	jmp	0xf020	; 0xf020 <systemGenerateReport+0x129a>
    dde0:	2d c0       	rjmp	.+90     	; 0xde3c <systemGenerateReport+0xb6>
    dde2:	84 30       	cpi	r24, 0x04	; 4
    dde4:	09 f4       	brne	.+2      	; 0xdde8 <systemGenerateReport+0x62>
    dde6:	84 c1       	rjmp	.+776    	; 0xe0f0 <systemGenerateReport+0x36a>
    dde8:	85 30       	cpi	r24, 0x05	; 5
    ddea:	08 f0       	brcs	.+2      	; 0xddee <systemGenerateReport+0x68>
    ddec:	1b c6       	rjmp	.+3126   	; 0xea24 <systemGenerateReport+0xc9e>
    ddee:	79 c1       	rjmp	.+754    	; 0xe0e2 <systemGenerateReport+0x35c>
    ddf0:	89 30       	cpi	r24, 0x09	; 9
    ddf2:	09 f4       	brne	.+2      	; 0xddf6 <systemGenerateReport+0x70>
    ddf4:	17 c6       	rjmp	.+3118   	; 0xea24 <systemGenerateReport+0xc9e>
    ddf6:	8a 30       	cpi	r24, 0x0A	; 10
    ddf8:	40 f4       	brcc	.+16     	; 0xde0a <systemGenerateReport+0x84>
    ddfa:	87 30       	cpi	r24, 0x07	; 7
    ddfc:	09 f4       	brne	.+2      	; 0xde00 <systemGenerateReport+0x7a>
    ddfe:	42 c2       	rjmp	.+1156   	; 0xe284 <systemGenerateReport+0x4fe>
    de00:	88 30       	cpi	r24, 0x08	; 8
    de02:	11 f0       	breq	.+4      	; 0xde08 <systemGenerateReport+0x82>
    de04:	0c 94 10 78 	jmp	0xf020	; 0xf020 <systemGenerateReport+0x129a>
    de08:	4a c2       	rjmp	.+1172   	; 0xe29e <systemGenerateReport+0x518>
    de0a:	8b 30       	cpi	r24, 0x0B	; 11
    de0c:	11 f4       	brne	.+4      	; 0xde12 <systemGenerateReport+0x8c>
    de0e:	0c 94 03 78 	jmp	0xf006	; 0xf006 <systemGenerateReport+0x1280>
    de12:	8b 30       	cpi	r24, 0x0B	; 11
    de14:	08 f4       	brcc	.+2      	; 0xde18 <systemGenerateReport+0x92>
    de16:	0d c6       	rjmp	.+3098   	; 0xea32 <systemGenerateReport+0xcac>
    de18:	8c 30       	cpi	r24, 0x0C	; 12
    de1a:	11 f0       	breq	.+4      	; 0xde20 <systemGenerateReport+0x9a>
    de1c:	0c 94 10 78 	jmp	0xf020	; 0xf020 <systemGenerateReport+0x129a>
    de20:	0c 94 0b 78 	jmp	0xf016	; 0xf016 <systemGenerateReport+0x1290>
	 case grScanAction://Wait for Complete incoming Totalizer data	      
		  if (IsGenerateReport==True){
    de24:	80 91 64 02 	lds	r24, 0x0264
    de28:	81 30       	cpi	r24, 0x01	; 1
    de2a:	11 f0       	breq	.+4      	; 0xde30 <systemGenerateReport+0xaa>
    de2c:	0c 94 10 78 	jmp	0xf020	; 0xf020 <systemGenerateReport+0x129a>
		      IsGenerateReport=False;
    de30:	10 92 64 02 	sts	0x0264, r1
			  IsFinishPrintingTotalizer=False;
    de34:	10 92 65 02 	sts	0x0265, r1
    de38:	0c 94 08 78 	jmp	0xf010	; 0xf010 <systemGenerateReport+0x128a>
			  stGenerateReport=grInitData;
		  }
	      break;
	 case grInitData:
	      xPump=1;
    de3c:	80 93 c6 02 	sts	0x02C6, r24
		  xNozzle=1;
    de40:	80 93 c5 02 	sts	0x02C5, r24
		  RepPos=0;
    de44:	10 92 b6 02 	sts	0x02B6, r1
    de48:	10 92 b5 02 	sts	0x02B5, r1
		  FillChar(PrintBuffer,sizeof(PrintBuffer),0);
    de4c:	80 ed       	ldi	r24, 0xD0	; 208
    de4e:	94 e0       	ldi	r25, 0x04	; 4
    de50:	61 e9       	ldi	r22, 0x91	; 145
    de52:	71 e0       	ldi	r23, 0x01	; 1
    de54:	40 e0       	ldi	r20, 0x00	; 0
    de56:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>
		  FillChar(strReport,sizeof(strReport),0);
    de5a:	ce 01       	movw	r24, r28
    de5c:	8b 55       	subi	r24, 0x5B	; 91
    de5e:	9f 4f       	sbci	r25, 0xFF	; 255
    de60:	60 e5       	ldi	r22, 0x50	; 80
    de62:	70 e0       	ldi	r23, 0x00	; 0
    de64:	40 e0       	ldi	r20, 0x00	; 0
    de66:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>

		  FillChar(strCurrentVolume,sizeof(strCurrentVolume),0);
    de6a:	ce 01       	movw	r24, r28
    de6c:	c7 96       	adiw	r24, 0x37	; 55
    de6e:	6f e0       	ldi	r22, 0x0F	; 15
    de70:	70 e0       	ldi	r23, 0x00	; 0
    de72:	40 e0       	ldi	r20, 0x00	; 0
    de74:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>
		  FillChar(strCurrentMoney,sizeof(strCurrentMoney),0);
    de78:	ce 01       	movw	r24, r28
    de7a:	8a 5b       	subi	r24, 0xBA	; 186
    de7c:	9f 4f       	sbci	r25, 0xFF	; 255
    de7e:	6f e0       	ldi	r22, 0x0F	; 15
    de80:	70 e0       	ldi	r23, 0x00	; 0
    de82:	40 e0       	ldi	r20, 0x00	; 0
    de84:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>

		  FillChar(strTotalVolume,sizeof(strTotalVolume),0);
    de88:	8b ed       	ldi	r24, 0xDB	; 219
    de8a:	98 e0       	ldi	r25, 0x08	; 8
    de8c:	64 e1       	ldi	r22, 0x14	; 20
    de8e:	70 e0       	ldi	r23, 0x00	; 0
    de90:	40 e0       	ldi	r20, 0x00	; 0
    de92:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>
		  FillChar(strTotalMoney,sizeof(strTotalMoney),0);
    de96:	8c e8       	ldi	r24, 0x8C	; 140
    de98:	99 e0       	ldi	r25, 0x09	; 9
    de9a:	64 e1       	ldi	r22, 0x14	; 20
    de9c:	70 e0       	ldi	r23, 0x00	; 0
    de9e:	40 e0       	ldi	r20, 0x00	; 0
    dea0:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>


		  FillChar(strDeltaMoney,sizeof(strDeltaMoney),0);
    dea4:	86 e2       	ldi	r24, 0x26	; 38
    dea6:	9d e0       	ldi	r25, 0x0D	; 13
    dea8:	6f e0       	ldi	r22, 0x0F	; 15
    deaa:	70 e0       	ldi	r23, 0x00	; 0
    deac:	40 e0       	ldi	r20, 0x00	; 0
    deae:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>
		  FillChar(strDeltaVolume,sizeof(strDeltaVolume),0);
    deb2:	89 ee       	ldi	r24, 0xE9	; 233
    deb4:	99 e0       	ldi	r25, 0x09	; 9
    deb6:	6f e0       	ldi	r22, 0x0F	; 15
    deb8:	70 e0       	ldi	r23, 0x00	; 0
    deba:	40 e0       	ldi	r20, 0x00	; 0
    debc:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>
		  sprintf_P(strShift,PSTR("%d"),eeprom_read_byte(&DefShift));
    dec0:	80 e4       	ldi	r24, 0x40	; 64
    dec2:	91 e0       	ldi	r25, 0x01	; 1
    dec4:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
    dec8:	00 d0       	rcall	.+0      	; 0xdeca <systemGenerateReport+0x144>
    deca:	00 d0       	rcall	.+0      	; 0xdecc <systemGenerateReport+0x146>
    decc:	00 d0       	rcall	.+0      	; 0xdece <systemGenerateReport+0x148>
    dece:	ed b7       	in	r30, 0x3d	; 61
    ded0:	fe b7       	in	r31, 0x3e	; 62
    ded2:	31 96       	adiw	r30, 0x01	; 1
    ded4:	2d e6       	ldi	r18, 0x6D	; 109
    ded6:	3d e0       	ldi	r19, 0x0D	; 13
    ded8:	ad b7       	in	r26, 0x3d	; 61
    deda:	be b7       	in	r27, 0x3e	; 62
    dedc:	12 96       	adiw	r26, 0x02	; 2
    dede:	3c 93       	st	X, r19
    dee0:	2e 93       	st	-X, r18
    dee2:	11 97       	sbiw	r26, 0x01	; 1
    dee4:	29 ec       	ldi	r18, 0xC9	; 201
    dee6:	36 e0       	ldi	r19, 0x06	; 6
    dee8:	33 83       	std	Z+3, r19	; 0x03
    deea:	22 83       	std	Z+2, r18	; 0x02
    deec:	84 83       	std	Z+4, r24	; 0x04
    deee:	15 82       	std	Z+5, r1	; 0x05
    def0:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>

          stGenerateReport=grCreateReportHeader;
    def4:	82 e0       	ldi	r24, 0x02	; 2
    def6:	80 93 c7 02 	sts	0x02C7, r24
	      break;
    defa:	ed b7       	in	r30, 0x3d	; 61
    defc:	fe b7       	in	r31, 0x3e	; 62
    defe:	36 96       	adiw	r30, 0x06	; 6
    df00:	0f b6       	in	r0, 0x3f	; 63
    df02:	f8 94       	cli
    df04:	fe bf       	out	0x3e, r31	; 62
    df06:	0f be       	out	0x3f, r0	; 63
    df08:	ed bf       	out	0x3d, r30	; 61
    df0a:	0c 94 10 78 	jmp	0xf020	; 0xf020 <systemGenerateReport+0x129a>
	 case grCreateReportHeader://Border: btTopLeft,btTopCenter,btTopRight,btMiddleLeft,btMiddleCenter,btMiddleRight,btBottomLeft,btBottomCenter,btBottomRight,btVertical,btHorizontal
		  eeprom_read_block((void*) &LastShiftDateTime, (const void*) &DefLastShiftDateTime, sizeof(DefLastShiftDateTime));
    df0e:	05 e5       	ldi	r16, 0x55	; 85
    df10:	e0 2e       	mov	r14, r16
    df12:	f1 2c       	mov	r15, r1
    df14:	ec 0e       	add	r14, r28
    df16:	fd 1e       	adc	r15, r29
    df18:	c7 01       	movw	r24, r14
    df1a:	64 e4       	ldi	r22, 0x44	; 68
    df1c:	78 e0       	ldi	r23, 0x08	; 8
    df1e:	44 e1       	ldi	r20, 0x14	; 20
    df20:	50 e0       	ldi	r21, 0x00	; 0
    df22:	0e 94 56 aa 	call	0x154ac	; 0x154ac <__eerd_block_m128>
          
		  InserBorder(btTopLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btTopRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);
    df26:	81 e0       	ldi	r24, 0x01	; 1
    df28:	61 e0       	ldi	r22, 0x01	; 1
    df2a:	0e 94 e5 6a 	call	0xd5ca	; 0xd5ca <InserBorder.clone.0>
    df2e:	8b e0       	ldi	r24, 0x0B	; 11
    df30:	6a e2       	ldi	r22, 0x2A	; 42
    df32:	0e 94 e5 6a 	call	0xd5ca	; 0xd5ca <InserBorder.clone.0>
    df36:	83 e0       	ldi	r24, 0x03	; 3
    df38:	61 e0       	ldi	r22, 0x01	; 1
    df3a:	0e 94 e5 6a 	call	0xd5ca	; 0xd5ca <InserBorder.clone.0>
    df3e:	8c e0       	ldi	r24, 0x0C	; 12
    df40:	61 e0       	ldi	r22, 0x01	; 1
    df42:	0e 94 e5 6a 	call	0xd5ca	; 0xd5ca <InserBorder.clone.0>
	      sprintf_P(strReport,PSTR("        Laporan Tutup Shift: %s      "),strShift);CreateReport(strReport,PrintBuffer,&RepPos);
    df46:	00 d0       	rcall	.+0      	; 0xdf48 <systemGenerateReport+0x1c2>
    df48:	00 d0       	rcall	.+0      	; 0xdf4a <systemGenerateReport+0x1c4>
    df4a:	00 d0       	rcall	.+0      	; 0xdf4c <systemGenerateReport+0x1c6>
    df4c:	ed b7       	in	r30, 0x3d	; 61
    df4e:	fe b7       	in	r31, 0x3e	; 62
    df50:	31 96       	adiw	r30, 0x01	; 1
    df52:	8e 01       	movw	r16, r28
    df54:	0b 55       	subi	r16, 0x5B	; 91
    df56:	1f 4f       	sbci	r17, 0xFF	; 255
    df58:	ad b7       	in	r26, 0x3d	; 61
    df5a:	be b7       	in	r27, 0x3e	; 62
    df5c:	12 96       	adiw	r26, 0x02	; 2
    df5e:	1c 93       	st	X, r17
    df60:	0e 93       	st	-X, r16
    df62:	11 97       	sbiw	r26, 0x01	; 1
    df64:	83 ea       	ldi	r24, 0xA3	; 163
    df66:	96 e0       	ldi	r25, 0x06	; 6
    df68:	93 83       	std	Z+3, r25	; 0x03
    df6a:	82 83       	std	Z+2, r24	; 0x02
    df6c:	8d e6       	ldi	r24, 0x6D	; 109
    df6e:	9d e0       	ldi	r25, 0x0D	; 13
    df70:	95 83       	std	Z+5, r25	; 0x05
    df72:	84 83       	std	Z+4, r24	; 0x04
    df74:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    df78:	ed b7       	in	r30, 0x3d	; 61
    df7a:	fe b7       	in	r31, 0x3e	; 62
    df7c:	36 96       	adiw	r30, 0x06	; 6
    df7e:	0f b6       	in	r0, 0x3f	; 63
    df80:	f8 94       	cli
    df82:	fe bf       	out	0x3e, r31	; 62
    df84:	0f be       	out	0x3f, r0	; 63
    df86:	ed bf       	out	0x3d, r30	; 61
    df88:	c8 01       	movw	r24, r16
    df8a:	60 ed       	ldi	r22, 0xD0	; 208
    df8c:	74 e0       	ldi	r23, 0x04	; 4
    df8e:	45 eb       	ldi	r20, 0xB5	; 181
    df90:	52 e0       	ldi	r21, 0x02	; 2
    df92:	0e 94 4a 6b 	call	0xd694	; 0xd694 <CreateReport>
		  InserBorder(btMiddleLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btMiddleRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);     
    df96:	84 e0       	ldi	r24, 0x04	; 4
    df98:	61 e0       	ldi	r22, 0x01	; 1
    df9a:	0e 94 e5 6a 	call	0xd5ca	; 0xd5ca <InserBorder.clone.0>
    df9e:	8b e0       	ldi	r24, 0x0B	; 11
    dfa0:	6a e2       	ldi	r22, 0x2A	; 42
    dfa2:	0e 94 e5 6a 	call	0xd5ca	; 0xd5ca <InserBorder.clone.0>
    dfa6:	86 e0       	ldi	r24, 0x06	; 6
    dfa8:	61 e0       	ldi	r22, 0x01	; 1
    dfaa:	0e 94 e5 6a 	call	0xd5ca	; 0xd5ca <InserBorder.clone.0>
    dfae:	8c e0       	ldi	r24, 0x0C	; 12
    dfb0:	61 e0       	ldi	r22, 0x01	; 1
    dfb2:	0e 94 e5 6a 	call	0xd5ca	; 0xd5ca <InserBorder.clone.0>
	      sprintf_P(strReport,PSTR("Terminal ID : %.2d                   "),eeprom_read_byte(&DefIFT_ID));CreateReport(strReport,PrintBuffer,&RepPos);
    dfb6:	80 e0       	ldi	r24, 0x00	; 0
    dfb8:	90 e0       	ldi	r25, 0x00	; 0
    dfba:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
    dfbe:	00 d0       	rcall	.+0      	; 0xdfc0 <systemGenerateReport+0x23a>
    dfc0:	00 d0       	rcall	.+0      	; 0xdfc2 <systemGenerateReport+0x23c>
    dfc2:	00 d0       	rcall	.+0      	; 0xdfc4 <systemGenerateReport+0x23e>
    dfc4:	ed b7       	in	r30, 0x3d	; 61
    dfc6:	fe b7       	in	r31, 0x3e	; 62
    dfc8:	31 96       	adiw	r30, 0x01	; 1
    dfca:	ad b7       	in	r26, 0x3d	; 61
    dfcc:	be b7       	in	r27, 0x3e	; 62
    dfce:	12 96       	adiw	r26, 0x02	; 2
    dfd0:	1c 93       	st	X, r17
    dfd2:	0e 93       	st	-X, r16
    dfd4:	11 97       	sbiw	r26, 0x01	; 1
    dfd6:	2d e7       	ldi	r18, 0x7D	; 125
    dfd8:	36 e0       	ldi	r19, 0x06	; 6
    dfda:	33 83       	std	Z+3, r19	; 0x03
    dfdc:	22 83       	std	Z+2, r18	; 0x02
    dfde:	84 83       	std	Z+4, r24	; 0x04
    dfe0:	15 82       	std	Z+5, r1	; 0x05
    dfe2:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    dfe6:	ed b7       	in	r30, 0x3d	; 61
    dfe8:	fe b7       	in	r31, 0x3e	; 62
    dfea:	36 96       	adiw	r30, 0x06	; 6
    dfec:	0f b6       	in	r0, 0x3f	; 63
    dfee:	f8 94       	cli
    dff0:	fe bf       	out	0x3e, r31	; 62
    dff2:	0f be       	out	0x3f, r0	; 63
    dff4:	ed bf       	out	0x3d, r30	; 61
    dff6:	c8 01       	movw	r24, r16
    dff8:	60 ed       	ldi	r22, 0xD0	; 208
    dffa:	74 e0       	ldi	r23, 0x04	; 4
    dffc:	45 eb       	ldi	r20, 0xB5	; 181
    dffe:	52 e0       	ldi	r21, 0x02	; 2
    e000:	0e 94 4a 6b 	call	0xd694	; 0xd694 <CreateReport>
	      sprintf_P(strReport,PSTR("Awal  Shift : %s "),LastShiftDateTime);             CreateReport(strReport,PrintBuffer,&RepPos);
    e004:	00 d0       	rcall	.+0      	; 0xe006 <systemGenerateReport+0x280>
    e006:	00 d0       	rcall	.+0      	; 0xe008 <systemGenerateReport+0x282>
    e008:	00 d0       	rcall	.+0      	; 0xe00a <systemGenerateReport+0x284>
    e00a:	ed b7       	in	r30, 0x3d	; 61
    e00c:	fe b7       	in	r31, 0x3e	; 62
    e00e:	31 96       	adiw	r30, 0x01	; 1
    e010:	ad b7       	in	r26, 0x3d	; 61
    e012:	be b7       	in	r27, 0x3e	; 62
    e014:	12 96       	adiw	r26, 0x02	; 2
    e016:	1c 93       	st	X, r17
    e018:	0e 93       	st	-X, r16
    e01a:	11 97       	sbiw	r26, 0x01	; 1
    e01c:	8b e6       	ldi	r24, 0x6B	; 107
    e01e:	96 e0       	ldi	r25, 0x06	; 6
    e020:	93 83       	std	Z+3, r25	; 0x03
    e022:	82 83       	std	Z+2, r24	; 0x02
    e024:	f5 82       	std	Z+5, r15	; 0x05
    e026:	e4 82       	std	Z+4, r14	; 0x04
    e028:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    e02c:	ed b7       	in	r30, 0x3d	; 61
    e02e:	fe b7       	in	r31, 0x3e	; 62
    e030:	36 96       	adiw	r30, 0x06	; 6
    e032:	0f b6       	in	r0, 0x3f	; 63
    e034:	f8 94       	cli
    e036:	fe bf       	out	0x3e, r31	; 62
    e038:	0f be       	out	0x3f, r0	; 63
    e03a:	ed bf       	out	0x3d, r30	; 61
    e03c:	c8 01       	movw	r24, r16
    e03e:	60 ed       	ldi	r22, 0xD0	; 208
    e040:	74 e0       	ldi	r23, 0x04	; 4
    e042:	45 eb       	ldi	r20, 0xB5	; 181
    e044:	52 e0       	ldi	r21, 0x02	; 2
    e046:	0e 94 4a 6b 	call	0xd694	; 0xd694 <CreateReport>
	      sprintf_P(strReport,PSTR("Akhir Shift : %s "),CurrentShiftDateTime);      CreateReport(strReport,PrintBuffer,&RepPos);
    e04a:	00 d0       	rcall	.+0      	; 0xe04c <systemGenerateReport+0x2c6>
    e04c:	00 d0       	rcall	.+0      	; 0xe04e <systemGenerateReport+0x2c8>
    e04e:	00 d0       	rcall	.+0      	; 0xe050 <systemGenerateReport+0x2ca>
    e050:	ed b7       	in	r30, 0x3d	; 61
    e052:	fe b7       	in	r31, 0x3e	; 62
    e054:	31 96       	adiw	r30, 0x01	; 1
    e056:	ad b7       	in	r26, 0x3d	; 61
    e058:	be b7       	in	r27, 0x3e	; 62
    e05a:	12 96       	adiw	r26, 0x02	; 2
    e05c:	1c 93       	st	X, r17
    e05e:	0e 93       	st	-X, r16
    e060:	11 97       	sbiw	r26, 0x01	; 1
    e062:	89 e5       	ldi	r24, 0x59	; 89
    e064:	96 e0       	ldi	r25, 0x06	; 6
    e066:	93 83       	std	Z+3, r25	; 0x03
    e068:	82 83       	std	Z+2, r24	; 0x02
    e06a:	82 e7       	ldi	r24, 0x72	; 114
    e06c:	98 e0       	ldi	r25, 0x08	; 8
    e06e:	95 83       	std	Z+5, r25	; 0x05
    e070:	84 83       	std	Z+4, r24	; 0x04
    e072:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    e076:	ed b7       	in	r30, 0x3d	; 61
    e078:	fe b7       	in	r31, 0x3e	; 62
    e07a:	36 96       	adiw	r30, 0x06	; 6
    e07c:	0f b6       	in	r0, 0x3f	; 63
    e07e:	f8 94       	cli
    e080:	fe bf       	out	0x3e, r31	; 62
    e082:	0f be       	out	0x3f, r0	; 63
    e084:	ed bf       	out	0x3d, r30	; 61
    e086:	c8 01       	movw	r24, r16
    e088:	60 ed       	ldi	r22, 0xD0	; 208
    e08a:	74 e0       	ldi	r23, 0x04	; 4
    e08c:	45 eb       	ldi	r20, 0xB5	; 181
    e08e:	52 e0       	ldi	r21, 0x02	; 2
    e090:	0e 94 4a 6b 	call	0xd694	; 0xd694 <CreateReport>
	      //sprintf_P(strReport,PSTR("Transaksi   : %s "),DeltaTransaction);      CreateReport(strReport,PrintBuffer,&RepPos);
          InserBorder(btBottomLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btBottomRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);
    e094:	87 e0       	ldi	r24, 0x07	; 7
    e096:	61 e0       	ldi	r22, 0x01	; 1
    e098:	0e 94 e5 6a 	call	0xd5ca	; 0xd5ca <InserBorder.clone.0>
    e09c:	8b e0       	ldi	r24, 0x0B	; 11
    e09e:	6a e2       	ldi	r22, 0x2A	; 42
    e0a0:	0e 94 e5 6a 	call	0xd5ca	; 0xd5ca <InserBorder.clone.0>
    e0a4:	89 e0       	ldi	r24, 0x09	; 9
    e0a6:	61 e0       	ldi	r22, 0x01	; 1
    e0a8:	0e 94 e5 6a 	call	0xd5ca	; 0xd5ca <InserBorder.clone.0>
    e0ac:	8c e0       	ldi	r24, 0x0C	; 12
    e0ae:	61 e0       	ldi	r22, 0x01	; 1
    e0b0:	0e 94 e5 6a 	call	0xd5ca	; 0xd5ca <InserBorder.clone.0>
		  /*
	      if (eeprom_read_byte(&DefPrintMoney)==True)sprintf_P(strReport,PSTR("PUMP-PRODUCT   VOLUME(L)    RUPIAH(RP)"));         
	      else sprintf_P(strReport,PSTR("PUMP-PRODUCT   VOLUME(L)              "));CreateReport(strReport,PrintBuffer,&RepPos);
          InserBorder(btBottomLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btBottomRight,PrintBuffer,1,&RepPos);//InserBorder(btNewLine,PrintBuffer,1,&RepPos);         		 
          */
		  ClearList(GradeList);
    e0b4:	87 eb       	ldi	r24, 0xB7	; 183
    e0b6:	92 e0       	ldi	r25, 0x02	; 2
    e0b8:	0e 94 af 6a 	call	0xd55e	; 0xd55e <ClearList>
		  cmdPrint=0b10000000;//PrintHeader
    e0bc:	80 e8       	ldi	r24, 0x80	; 128
    e0be:	80 93 94 02 	sts	0x0294, r24
		  LengthMessage81=RepPos+1;
    e0c2:	80 91 b5 02 	lds	r24, 0x02B5
    e0c6:	90 91 b6 02 	lds	r25, 0x02B6
    e0ca:	01 96       	adiw	r24, 0x01	; 1
    e0cc:	90 93 6c 02 	sts	0x026C, r25
    e0d0:	80 93 6b 02 	sts	0x026B, r24
		  IsFreePrinting=True;
    e0d4:	81 e0       	ldi	r24, 0x01	; 1
    e0d6:	80 93 87 02 	sts	0x0287, r24
          IsBusyFreePrinting=True;
    e0da:	80 93 93 02 	sts	0x0293, r24
		  		  
          stGenerateReport=grWaitPrinted1;
    e0de:	83 e0       	ldi	r24, 0x03	; 3
    e0e0:	97 c7       	rjmp	.+3886   	; 0xf010 <systemGenerateReport+0x128a>
	      break;
     case grWaitPrinted1:
          if (IsBusyFreePrinting==False)
    e0e2:	80 91 93 02 	lds	r24, 0x0293
    e0e6:	88 23       	and	r24, r24
    e0e8:	09 f0       	breq	.+2      	; 0xe0ec <systemGenerateReport+0x366>
    e0ea:	9a c7       	rjmp	.+3892   	; 0xf020 <systemGenerateReport+0x129a>
		      stGenerateReport=grGenerateLabel;//grGenerateReportData;//grFinishGenerateReport;
    e0ec:	84 e0       	ldi	r24, 0x04	; 4
    e0ee:	90 c7       	rjmp	.+3872   	; 0xf010 <systemGenerateReport+0x128a>
	      break;
     case grGenerateLabel:
          RepPos=0;
    e0f0:	10 92 b6 02 	sts	0x02B6, r1
    e0f4:	10 92 b5 02 	sts	0x02B5, r1
          InserBorder(btTopLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btTopRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);          
    e0f8:	81 e0       	ldi	r24, 0x01	; 1
    e0fa:	61 e0       	ldi	r22, 0x01	; 1
    e0fc:	0e 94 e5 6a 	call	0xd5ca	; 0xd5ca <InserBorder.clone.0>
    e100:	8b e0       	ldi	r24, 0x0B	; 11
    e102:	6a e2       	ldi	r22, 0x2A	; 42
    e104:	0e 94 e5 6a 	call	0xd5ca	; 0xd5ca <InserBorder.clone.0>
    e108:	83 e0       	ldi	r24, 0x03	; 3
    e10a:	61 e0       	ldi	r22, 0x01	; 1
    e10c:	0e 94 e5 6a 	call	0xd5ca	; 0xd5ca <InserBorder.clone.0>
    e110:	8c e0       	ldi	r24, 0x0C	; 12
    e112:	61 e0       	ldi	r22, 0x01	; 1
    e114:	0e 94 e5 6a 	call	0xd5ca	; 0xd5ca <InserBorder.clone.0>
	      if (eeprom_read_byte(&DefPrintMoney)==True)
    e118:	82 ec       	ldi	r24, 0xC2	; 194
    e11a:	93 e0       	ldi	r25, 0x03	; 3
    e11c:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
    e120:	8e 01       	movw	r16, r28
    e122:	0b 55       	subi	r16, 0x5B	; 91
    e124:	1f 4f       	sbci	r17, 0xFF	; 255
    e126:	81 30       	cpi	r24, 0x01	; 1
    e128:	79 f4       	brne	.+30     	; 0xe148 <systemGenerateReport+0x3c2>
		       sprintf_P(strReport,PSTR("PUMP-PRODUCT   VOLUME(L)    RUPIAH(RP)"));         
    e12a:	00 d0       	rcall	.+0      	; 0xe12c <systemGenerateReport+0x3a6>
    e12c:	00 d0       	rcall	.+0      	; 0xe12e <systemGenerateReport+0x3a8>
    e12e:	ad b7       	in	r26, 0x3d	; 61
    e130:	be b7       	in	r27, 0x3e	; 62
    e132:	12 96       	adiw	r26, 0x02	; 2
    e134:	1c 93       	st	X, r17
    e136:	0e 93       	st	-X, r16
    e138:	11 97       	sbiw	r26, 0x01	; 1
    e13a:	82 e3       	ldi	r24, 0x32	; 50
    e13c:	96 e0       	ldi	r25, 0x06	; 6
    e13e:	14 96       	adiw	r26, 0x04	; 4
    e140:	9c 93       	st	X, r25
    e142:	8e 93       	st	-X, r24
    e144:	13 97       	sbiw	r26, 0x03	; 3
    e146:	0a c0       	rjmp	.+20     	; 0xe15c <systemGenerateReport+0x3d6>
	      else sprintf_P(strReport,PSTR("PUMP-PRODUCT   VOLUME(L)              "));CreateReport(strReport,PrintBuffer,&RepPos);
    e148:	00 d0       	rcall	.+0      	; 0xe14a <systemGenerateReport+0x3c4>
    e14a:	00 d0       	rcall	.+0      	; 0xe14c <systemGenerateReport+0x3c6>
    e14c:	ed b7       	in	r30, 0x3d	; 61
    e14e:	fe b7       	in	r31, 0x3e	; 62
    e150:	12 83       	std	Z+2, r17	; 0x02
    e152:	01 83       	std	Z+1, r16	; 0x01
    e154:	8b e0       	ldi	r24, 0x0B	; 11
    e156:	96 e0       	ldi	r25, 0x06	; 6
    e158:	94 83       	std	Z+4, r25	; 0x04
    e15a:	83 83       	std	Z+3, r24	; 0x03
    e15c:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    e160:	0f 90       	pop	r0
    e162:	0f 90       	pop	r0
    e164:	0f 90       	pop	r0
    e166:	0f 90       	pop	r0
    e168:	ce 01       	movw	r24, r28
    e16a:	8b 55       	subi	r24, 0x5B	; 91
    e16c:	9f 4f       	sbci	r25, 0xFF	; 255
    e16e:	60 ed       	ldi	r22, 0xD0	; 208
    e170:	74 e0       	ldi	r23, 0x04	; 4
    e172:	45 eb       	ldi	r20, 0xB5	; 181
    e174:	52 e0       	ldi	r21, 0x02	; 2
    e176:	0e 94 4a 6b 	call	0xd694	; 0xd694 <CreateReport>
          InserBorder(btBottomLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btBottomRight,PrintBuffer,1,&RepPos);//InserBorder(btNewLine,PrintBuffer,1,&RepPos);         		 
    e17a:	87 e0       	ldi	r24, 0x07	; 7
    e17c:	61 e0       	ldi	r22, 0x01	; 1
    e17e:	0e 94 e5 6a 	call	0xd5ca	; 0xd5ca <InserBorder.clone.0>
    e182:	8b e0       	ldi	r24, 0x0B	; 11
    e184:	6a e2       	ldi	r22, 0x2A	; 42
    e186:	0e 94 e5 6a 	call	0xd5ca	; 0xd5ca <InserBorder.clone.0>
    e18a:	89 e0       	ldi	r24, 0x09	; 9
    e18c:	61 e0       	ldi	r22, 0x01	; 1
    e18e:	0e 94 e5 6a 	call	0xd5ca	; 0xd5ca <InserBorder.clone.0>
          
		  cmdPrint=0b00000000;
    e192:	10 92 94 02 	sts	0x0294, r1
		  LengthMessage81=RepPos+1;
    e196:	80 91 b5 02 	lds	r24, 0x02B5
    e19a:	90 91 b6 02 	lds	r25, 0x02B6
    e19e:	01 96       	adiw	r24, 0x01	; 1
    e1a0:	90 93 6c 02 	sts	0x026C, r25
    e1a4:	80 93 6b 02 	sts	0x026B, r24

		  IsFreePrinting=True;
    e1a8:	81 e0       	ldi	r24, 0x01	; 1
    e1aa:	80 93 87 02 	sts	0x0287, r24
	      IsBusyFreePrinting=True;
    e1ae:	80 93 93 02 	sts	0x0293, r24

		  stGenerateReport=grWaitLabelPrinted;
    e1b2:	85 e0       	ldi	r24, 0x05	; 5
    e1b4:	2d c7       	rjmp	.+3674   	; 0xf010 <systemGenerateReport+0x128a>
          if (IsBusyFreePrinting==False)
		      stGenerateReport=grGenerateReportData;//grFinishGenerateReport;
	      break;
     case grGenerateReportData:
	      //Generate: PumpNum, Nozzle, Product
	      if ((xPump>=1)&&(xPump<=8)){
    e1b6:	80 91 c6 02 	lds	r24, 0x02C6
    e1ba:	81 50       	subi	r24, 0x01	; 1
    e1bc:	88 30       	cpi	r24, 0x08	; 8
    e1be:	08 f0       	brcs	.+2      	; 0xe1c2 <systemGenerateReport+0x43c>
    e1c0:	2f c7       	rjmp	.+3678   	; 0xf020 <systemGenerateReport+0x129a>
		      eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap, 8);
    e1c2:	ce 01       	movw	r24, r28
    e1c4:	07 96       	adiw	r24, 0x07	; 7
    e1c6:	66 e4       	ldi	r22, 0x46	; 70
    e1c8:	70 e0       	ldi	r23, 0x00	; 0
    e1ca:	48 e0       	ldi	r20, 0x08	; 8
    e1cc:	50 e0       	ldi	r21, 0x00	; 0
    e1ce:	0e 94 56 aa 	call	0x154ac	; 0x154ac <__eerd_block_m128>
			  PumpNum=PPumpID[xPump-1];
    e1d2:	80 91 c6 02 	lds	r24, 0x02C6
    e1d6:	90 e0       	ldi	r25, 0x00	; 0
    e1d8:	fe 01       	movw	r30, r28
    e1da:	e8 0f       	add	r30, r24
    e1dc:	f9 1f       	adc	r31, r25
    e1de:	26 81       	ldd	r18, Z+6	; 0x06
    e1e0:	20 93 c3 02 	sts	0x02C3, r18
			  if (PumpNum>0){
    e1e4:	22 23       	and	r18, r18
    e1e6:	09 f4       	brne	.+2      	; 0xe1ea <systemGenerateReport+0x464>
    e1e8:	4b c0       	rjmp	.+150    	; 0xe280 <systemGenerateReport+0x4fa>
				  eeprom_read_block((void*) &PProductID, (const void*) &DefNozzleMap[xPump-1], 6);
    e1ea:	01 97       	sbiw	r24, 0x01	; 1
    e1ec:	bc 01       	movw	r22, r24
    e1ee:	66 0f       	add	r22, r22
    e1f0:	77 1f       	adc	r23, r23
    e1f2:	68 0f       	add	r22, r24
    e1f4:	79 1f       	adc	r23, r25
    e1f6:	66 0f       	add	r22, r22
    e1f8:	77 1f       	adc	r23, r23
    e1fa:	6a 5a       	subi	r22, 0xAA	; 170
    e1fc:	7f 4f       	sbci	r23, 0xFF	; 255
    e1fe:	ce 01       	movw	r24, r28
    e200:	01 96       	adiw	r24, 0x01	; 1
    e202:	46 e0       	ldi	r20, 0x06	; 6
    e204:	50 e0       	ldi	r21, 0x00	; 0
    e206:	0e 94 56 aa 	call	0x154ac	; 0x154ac <__eerd_block_m128>
				  xGrade=PProductID[xNozzle-1];
    e20a:	80 91 c5 02 	lds	r24, 0x02C5
    e20e:	fe 01       	movw	r30, r28
    e210:	e8 0f       	add	r30, r24
    e212:	f1 1d       	adc	r31, r1
    e214:	80 81       	ld	r24, Z
    e216:	80 93 c4 02 	sts	0x02C4, r24

				  if (xGrade>0){
    e21a:	88 23       	and	r24, r24
    e21c:	99 f0       	breq	.+38     	; 0xe244 <systemGenerateReport+0x4be>
				      GetProductName(xGrade,strProduct);
    e21e:	62 e4       	ldi	r22, 0x42	; 66
    e220:	78 e0       	ldi	r23, 0x08	; 8
    e222:	0e 94 3b 6a 	call	0xd476	; 0xd476 <GetProductName>
                      GradeUsed=xGrade;
    e226:	80 91 c4 02 	lds	r24, 0x02C4
    e22a:	80 93 c1 02 	sts	0x02C1, r24
					  xGrade=xNozzle;//
    e22e:	80 91 c5 02 	lds	r24, 0x02C5
    e232:	80 93 c4 02 	sts	0x02C4, r24
					  PumpNozzle=xNozzle;
    e236:	80 93 c2 02 	sts	0x02C2, r24
					  xNozzle++;
    e23a:	8f 5f       	subi	r24, 0xFF	; 255
    e23c:	80 93 c5 02 	sts	0x02C5, r24
					  stGenerateReport=grCreateReportTotalizer;
    e240:	88 e0       	ldi	r24, 0x08	; 8
    e242:	e6 c6       	rjmp	.+3532   	; 0xf010 <systemGenerateReport+0x128a>
				  }
				  else{sprintf_P(strProduct,PSTR("N/A"));			  
    e244:	00 d0       	rcall	.+0      	; 0xe246 <systemGenerateReport+0x4c0>
    e246:	00 d0       	rcall	.+0      	; 0xe248 <systemGenerateReport+0x4c2>
    e248:	82 e4       	ldi	r24, 0x42	; 66
    e24a:	98 e0       	ldi	r25, 0x08	; 8
    e24c:	ad b7       	in	r26, 0x3d	; 61
    e24e:	be b7       	in	r27, 0x3e	; 62
    e250:	12 96       	adiw	r26, 0x02	; 2
    e252:	9c 93       	st	X, r25
    e254:	8e 93       	st	-X, r24
    e256:	11 97       	sbiw	r26, 0x01	; 1
    e258:	87 e0       	ldi	r24, 0x07	; 7
    e25a:	96 e0       	ldi	r25, 0x06	; 6
    e25c:	14 96       	adiw	r26, 0x04	; 4
    e25e:	9c 93       	st	X, r25
    e260:	8e 93       	st	-X, r24
    e262:	13 97       	sbiw	r26, 0x03	; 3
    e264:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
					   xNozzle++;
    e268:	80 91 c5 02 	lds	r24, 0x02C5
    e26c:	8f 5f       	subi	r24, 0xFF	; 255
    e26e:	80 93 c5 02 	sts	0x02C5, r24
					   if (xNozzle>6)stGenerateReport=grNextPump;
    e272:	0f 90       	pop	r0
    e274:	0f 90       	pop	r0
    e276:	0f 90       	pop	r0
    e278:	0f 90       	pop	r0
    e27a:	87 30       	cpi	r24, 0x07	; 7
    e27c:	08 f4       	brcc	.+2      	; 0xe280 <systemGenerateReport+0x4fa>
    e27e:	d0 c6       	rjmp	.+3488   	; 0xf020 <systemGenerateReport+0x129a>
					  }
				}else stGenerateReport=grNextPump;
    e280:	87 e0       	ldi	r24, 0x07	; 7
    e282:	c6 c6       	rjmp	.+3468   	; 0xf010 <systemGenerateReport+0x128a>
			  }
	      break;
     case grNextPump:
	      xNozzle=1;
    e284:	81 e0       	ldi	r24, 0x01	; 1
    e286:	80 93 c5 02 	sts	0x02C5, r24
	      xPump++;
    e28a:	80 91 c6 02 	lds	r24, 0x02C6
    e28e:	8f 5f       	subi	r24, 0xFF	; 255
    e290:	80 93 c6 02 	sts	0x02C6, r24
	      if (xPump>8)stGenerateReport=grCreateReportFooter;
    e294:	89 30       	cpi	r24, 0x09	; 9
    e296:	08 f4       	brcc	.+2      	; 0xe29a <systemGenerateReport+0x514>
    e298:	ca c3       	rjmp	.+1940   	; 0xea2e <systemGenerateReport+0xca8>
    e29a:	8a e0       	ldi	r24, 0x0A	; 10
    e29c:	b9 c6       	rjmp	.+3442   	; 0xf010 <systemGenerateReport+0x128a>
		  else stGenerateReport=grGenerateReportData;
	      break;
     case grCreateReportTotalizer:

          RepPos=0;
    e29e:	10 92 b6 02 	sts	0x02B6, r1
    e2a2:	10 92 b5 02 	sts	0x02B5, r1
		  FillChar(PrintBuffer,sizeof(PrintBuffer),0);
    e2a6:	80 ed       	ldi	r24, 0xD0	; 208
    e2a8:	94 e0       	ldi	r25, 0x04	; 4
    e2aa:	61 e9       	ldi	r22, 0x91	; 145
    e2ac:	71 e0       	ldi	r23, 0x01	; 1
    e2ae:	40 e0       	ldi	r20, 0x00	; 0
    e2b0:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>
		  FillChar(strReport,sizeof(strReport),0);
    e2b4:	ce 01       	movw	r24, r28
    e2b6:	8b 55       	subi	r24, 0x5B	; 91
    e2b8:	9f 4f       	sbci	r25, 0xFF	; 255
    e2ba:	60 e5       	ldi	r22, 0x50	; 80
    e2bc:	70 e0       	ldi	r23, 0x00	; 0
    e2be:	40 e0       	ldi	r20, 0x00	; 0
    e2c0:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>

		  FillChar(strDeltaMoney,sizeof(strDeltaMoney),0);
    e2c4:	86 e2       	ldi	r24, 0x26	; 38
    e2c6:	9d e0       	ldi	r25, 0x0D	; 13
    e2c8:	6f e0       	ldi	r22, 0x0F	; 15
    e2ca:	70 e0       	ldi	r23, 0x00	; 0
    e2cc:	40 e0       	ldi	r20, 0x00	; 0
    e2ce:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>
		  FillChar(strDeltaVolume,sizeof(strDeltaVolume),0);
    e2d2:	89 ee       	ldi	r24, 0xE9	; 233
    e2d4:	99 e0       	ldi	r25, 0x09	; 9
    e2d6:	6f e0       	ldi	r22, 0x0F	; 15
    e2d8:	70 e0       	ldi	r23, 0x00	; 0
    e2da:	40 e0       	ldi	r20, 0x00	; 0
    e2dc:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>

		  FillChar(strLastVolume,sizeof(strLastVolume),0);
    e2e0:	8e 01       	movw	r16, r28
    e2e2:	07 5e       	subi	r16, 0xE7	; 231
    e2e4:	1f 4f       	sbci	r17, 0xFF	; 255
    e2e6:	c8 01       	movw	r24, r16
    e2e8:	6f e0       	ldi	r22, 0x0F	; 15
    e2ea:	70 e0       	ldi	r23, 0x00	; 0
    e2ec:	40 e0       	ldi	r20, 0x00	; 0
    e2ee:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>
		  FillChar(strLastMoney,sizeof(strLastMoney),0);
    e2f2:	a8 e2       	ldi	r26, 0x28	; 40
    e2f4:	ea 2e       	mov	r14, r26
    e2f6:	f1 2c       	mov	r15, r1
    e2f8:	ec 0e       	add	r14, r28
    e2fa:	fd 1e       	adc	r15, r29
    e2fc:	c7 01       	movw	r24, r14
    e2fe:	6f e0       	ldi	r22, 0x0F	; 15
    e300:	70 e0       	ldi	r23, 0x00	; 0
    e302:	40 e0       	ldi	r20, 0x00	; 0
    e304:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>

		  FillChar(strCurrentVolume,sizeof(strCurrentVolume),0);
    e308:	f7 e3       	ldi	r31, 0x37	; 55
    e30a:	cf 2e       	mov	r12, r31
    e30c:	d1 2c       	mov	r13, r1
    e30e:	cc 0e       	add	r12, r28
    e310:	dd 1e       	adc	r13, r29
    e312:	c6 01       	movw	r24, r12
    e314:	6f e0       	ldi	r22, 0x0F	; 15
    e316:	70 e0       	ldi	r23, 0x00	; 0
    e318:	40 e0       	ldi	r20, 0x00	; 0
    e31a:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>
		  FillChar(strCurrentMoney,sizeof(strCurrentMoney),0);
    e31e:	e6 e4       	ldi	r30, 0x46	; 70
    e320:	8e 2e       	mov	r8, r30
    e322:	91 2c       	mov	r9, r1
    e324:	8c 0e       	add	r8, r28
    e326:	9d 1e       	adc	r9, r29
    e328:	c4 01       	movw	r24, r8
    e32a:	6f e0       	ldi	r22, 0x0F	; 15
    e32c:	70 e0       	ldi	r23, 0x00	; 0
    e32e:	40 e0       	ldi	r20, 0x00	; 0
    e330:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>

          FIPAddr=GetFIPAddr(PumpNum); 
    e334:	80 91 c3 02 	lds	r24, 0x02C3
    e338:	0e 94 50 6e 	call	0xdca0	; 0xdca0 <GetFIPAddr>
		  if (FIPAddr>0){
    e33c:	88 23       	and	r24, r24
    e33e:	09 f1       	breq	.+66     	; 0xe382 <systemGenerateReport+0x5fc>
		      FIPAddr=FIPAddr-1;		  
    e340:	a8 2e       	mov	r10, r24
    e342:	aa 94       	dec	r10
			  GetTotalizerData(TVOLUME,TOTALIZER_LAST,FIPAddr,PumpNozzle,strLastVolume);
    e344:	80 e0       	ldi	r24, 0x00	; 0
    e346:	60 e0       	ldi	r22, 0x00	; 0
    e348:	4a 2d       	mov	r20, r10
    e34a:	20 91 c2 02 	lds	r18, 0x02C2
    e34e:	0e 94 a9 60 	call	0xc152	; 0xc152 <GetTotalizerData>
			  GetTotalizerData(TMONEY,TOTALIZER_LAST,FIPAddr,PumpNozzle,strLastMoney);
    e352:	81 e0       	ldi	r24, 0x01	; 1
    e354:	60 e0       	ldi	r22, 0x00	; 0
    e356:	4a 2d       	mov	r20, r10
    e358:	20 91 c2 02 	lds	r18, 0x02C2
    e35c:	87 01       	movw	r16, r14
    e35e:	0e 94 a9 60 	call	0xc152	; 0xc152 <GetTotalizerData>

			  GetTotalizerData(TVOLUME,TOTALIZER_NOW,FIPAddr,PumpNozzle,strCurrentVolume);
    e362:	80 e0       	ldi	r24, 0x00	; 0
    e364:	61 e0       	ldi	r22, 0x01	; 1
    e366:	4a 2d       	mov	r20, r10
    e368:	20 91 c2 02 	lds	r18, 0x02C2
    e36c:	86 01       	movw	r16, r12
    e36e:	0e 94 a9 60 	call	0xc152	; 0xc152 <GetTotalizerData>
			  GetTotalizerData(TMONEY,TOTALIZER_NOW,FIPAddr,PumpNozzle,strCurrentMoney);
    e372:	81 e0       	ldi	r24, 0x01	; 1
    e374:	61 e0       	ldi	r22, 0x01	; 1
    e376:	4a 2d       	mov	r20, r10
    e378:	20 91 c2 02 	lds	r18, 0x02C2
    e37c:	84 01       	movw	r16, r8
    e37e:	0e 94 a9 60 	call	0xc152	; 0xc152 <GetTotalizerData>
		  }

		  StrCalc(TMINUS,strCurrentVolume,strLastVolume,strDeltaVolume);
    e382:	80 e0       	ldi	r24, 0x00	; 0
    e384:	be 01       	movw	r22, r28
    e386:	69 5c       	subi	r22, 0xC9	; 201
    e388:	7f 4f       	sbci	r23, 0xFF	; 255
    e38a:	ae 01       	movw	r20, r28
    e38c:	47 5e       	subi	r20, 0xE7	; 231
    e38e:	5f 4f       	sbci	r21, 0xFF	; 255
    e390:	29 ee       	ldi	r18, 0xE9	; 233
    e392:	39 e0       	ldi	r19, 0x09	; 9
    e394:	0e 94 1e 66 	call	0xcc3c	; 0xcc3c <StrCalc>

		  if (IsMinus(strDeltaVolume)==True)
    e398:	89 ee       	ldi	r24, 0xE9	; 233
    e39a:	99 e0       	ldi	r25, 0x09	; 9
    e39c:	0e 94 ac 64 	call	0xc958	; 0xc958 <IsMinus>
    e3a0:	81 30       	cpi	r24, 0x01	; 1
    e3a2:	21 f4       	brne	.+8      	; 0xe3ac <systemGenerateReport+0x626>
		      NormalizeOverflow(strDeltaVolume);
    e3a4:	89 ee       	ldi	r24, 0xE9	; 233
    e3a6:	99 e0       	ldi	r25, 0x09	; 9
    e3a8:	0e 94 5a 69 	call	0xd2b4	; 0xd2b4 <NormalizeOverflow>

		  //Calculate Wayne Estimated Total Money
		  if (eeprom_read_byte(&DefDispenserBrand)==ST_WAYNE_DART){
    e3ac:	88 e3       	ldi	r24, 0x38	; 56
    e3ae:	91 e0       	ldi	r25, 0x01	; 1
    e3b0:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
    e3b4:	82 30       	cpi	r24, 0x02	; 2
    e3b6:	79 f4       	brne	.+30     	; 0xe3d6 <systemGenerateReport+0x650>
              GetProductPrice(sPrice,PumpNum,PumpNozzle);//Money = Price x Volume
    e3b8:	8e 01       	movw	r16, r28
    e3ba:	01 5f       	subi	r16, 0xF1	; 241
    e3bc:	1f 4f       	sbci	r17, 0xFF	; 255
    e3be:	c8 01       	movw	r24, r16
    e3c0:	60 91 c3 02 	lds	r22, 0x02C3
    e3c4:	40 91 c2 02 	lds	r20, 0x02C2
    e3c8:	0e 94 ab 69 	call	0xd356	; 0xd356 <GetProductPrice>
			  StrCalc(TMULTIPLY,sPrice,strDeltaVolume,strDeltaMoney);
    e3cc:	82 e0       	ldi	r24, 0x02	; 2
    e3ce:	b8 01       	movw	r22, r16
    e3d0:	49 ee       	ldi	r20, 0xE9	; 233
    e3d2:	59 e0       	ldi	r21, 0x09	; 9
    e3d4:	07 c0       	rjmp	.+14     	; 0xe3e4 <systemGenerateReport+0x65e>
			  
		  }else StrCalc(TMINUS,strCurrentMoney,strLastMoney,strDeltaMoney);
    e3d6:	80 e0       	ldi	r24, 0x00	; 0
    e3d8:	be 01       	movw	r22, r28
    e3da:	6a 5b       	subi	r22, 0xBA	; 186
    e3dc:	7f 4f       	sbci	r23, 0xFF	; 255
    e3de:	ae 01       	movw	r20, r28
    e3e0:	48 5d       	subi	r20, 0xD8	; 216
    e3e2:	5f 4f       	sbci	r21, 0xFF	; 255
    e3e4:	26 e2       	ldi	r18, 0x26	; 38
    e3e6:	3d e0       	ldi	r19, 0x0D	; 13
    e3e8:	0e 94 1e 66 	call	0xcc3c	; 0xcc3c <StrCalc>

		  if (IsMinus(strDeltaMoney)==True)
    e3ec:	86 e2       	ldi	r24, 0x26	; 38
    e3ee:	9d e0       	ldi	r25, 0x0D	; 13
    e3f0:	0e 94 ac 64 	call	0xc958	; 0xc958 <IsMinus>
    e3f4:	81 30       	cpi	r24, 0x01	; 1
    e3f6:	21 f4       	brne	.+8      	; 0xe400 <systemGenerateReport+0x67a>
		      NormalizeOverflow(strDeltaMoney);
    e3f8:	86 e2       	ldi	r24, 0x26	; 38
    e3fa:	9d e0       	ldi	r25, 0x0D	; 13
    e3fc:	0e 94 5a 69 	call	0xd2b4	; 0xd2b4 <NormalizeOverflow>

		  AddList(GradeUsed,GradeList);
    e400:	80 91 c1 02 	lds	r24, 0x02C1
    e404:	67 eb       	ldi	r22, 0xB7	; 183
    e406:	72 e0       	ldi	r23, 0x02	; 2
    e408:	0e 94 bc 6a 	call	0xd578	; 0xd578 <AddList>
		  
		  StrCalc(TPLUS,strTotalVolume,strDeltaVolume,strTotalVolume);
    e40c:	81 e0       	ldi	r24, 0x01	; 1
    e40e:	6b ed       	ldi	r22, 0xDB	; 219
    e410:	78 e0       	ldi	r23, 0x08	; 8
    e412:	49 ee       	ldi	r20, 0xE9	; 233
    e414:	59 e0       	ldi	r21, 0x09	; 9
    e416:	9b 01       	movw	r18, r22
    e418:	0e 94 1e 66 	call	0xcc3c	; 0xcc3c <StrCalc>
		  StrCalc(TPLUS,strTotalMoney,strDeltaMoney,strTotalMoney);
    e41c:	81 e0       	ldi	r24, 0x01	; 1
    e41e:	6c e8       	ldi	r22, 0x8C	; 140
    e420:	79 e0       	ldi	r23, 0x09	; 9
    e422:	46 e2       	ldi	r20, 0x26	; 38
    e424:	5d e0       	ldi	r21, 0x0D	; 13
    e426:	9b 01       	movw	r18, r22
    e428:	0e 94 1e 66 	call	0xcc3c	; 0xcc3c <StrCalc>


		  RemZeroLead(strDeltaMoney);
    e42c:	86 e2       	ldi	r24, 0x26	; 38
    e42e:	9d e0       	ldi	r25, 0x0D	; 13
    e430:	0e 94 93 39 	call	0x7326	; 0x7326 <RemZeroLead>
		  RemZeroLead(strCurrentMoney);
    e434:	76 e4       	ldi	r23, 0x46	; 70
    e436:	e7 2e       	mov	r14, r23
    e438:	f1 2c       	mov	r15, r1
    e43a:	ec 0e       	add	r14, r28
    e43c:	fd 1e       	adc	r15, r29
    e43e:	c7 01       	movw	r24, r14
    e440:	0e 94 93 39 	call	0x7326	; 0x7326 <RemZeroLead>
		  RemZeroLead(strLastMoney);
    e444:	68 e2       	ldi	r22, 0x28	; 40
    e446:	c6 2e       	mov	r12, r22
    e448:	d1 2c       	mov	r13, r1
    e44a:	cc 0e       	add	r12, r28
    e44c:	dd 1e       	adc	r13, r29
    e44e:	c6 01       	movw	r24, r12
    e450:	0e 94 93 39 	call	0x7326	; 0x7326 <RemZeroLead>

          RemZeroLead(strDeltaVolume);
    e454:	89 ee       	ldi	r24, 0xE9	; 233
    e456:	99 e0       	ldi	r25, 0x09	; 9
    e458:	0e 94 93 39 	call	0x7326	; 0x7326 <RemZeroLead>
          RemZeroLead(strCurrentVolume);
    e45c:	57 e3       	ldi	r21, 0x37	; 55
    e45e:	a5 2e       	mov	r10, r21
    e460:	b1 2c       	mov	r11, r1
    e462:	ac 0e       	add	r10, r28
    e464:	bd 1e       	adc	r11, r29
    e466:	c5 01       	movw	r24, r10
    e468:	0e 94 93 39 	call	0x7326	; 0x7326 <RemZeroLead>
          RemZeroLead(strLastVolume);
    e46c:	8e 01       	movw	r16, r28
    e46e:	07 5e       	subi	r16, 0xE7	; 231
    e470:	1f 4f       	sbci	r17, 0xFF	; 255
    e472:	c8 01       	movw	r24, r16
    e474:	0e 94 93 39 	call	0x7326	; 0x7326 <RemZeroLead>

		  FormatTotalizerMoney(strDeltaMoney);
    e478:	86 e2       	ldi	r24, 0x26	; 38
    e47a:	9d e0       	ldi	r25, 0x0D	; 13
    e47c:	0e 94 b0 2c 	call	0x5960	; 0x5960 <FormatTotalizerMoney>
		  FormatTotalizerMoney(strCurrentMoney);
    e480:	c7 01       	movw	r24, r14
    e482:	0e 94 b0 2c 	call	0x5960	; 0x5960 <FormatTotalizerMoney>
		  FormatTotalizerMoney(strLastMoney);
    e486:	c6 01       	movw	r24, r12
    e488:	0e 94 b0 2c 	call	0x5960	; 0x5960 <FormatTotalizerMoney>

		  FormatTotalizerVolume(strDeltaVolume);
    e48c:	89 ee       	ldi	r24, 0xE9	; 233
    e48e:	99 e0       	ldi	r25, 0x09	; 9
    e490:	0e 94 a2 2c 	call	0x5944	; 0x5944 <FormatTotalizerVolume>
		  FormatTotalizerVolume(strLastVolume);
    e494:	c8 01       	movw	r24, r16
    e496:	0e 94 a2 2c 	call	0x5944	; 0x5944 <FormatTotalizerVolume>
		  FormatTotalizerVolume(strCurrentVolume); 
    e49a:	c5 01       	movw	r24, r10
    e49c:	0e 94 a2 2c 	call	0x5944	; 0x5944 <FormatTotalizerVolume>

          FormatCurrency(strDeltaMoney);
    e4a0:	86 e2       	ldi	r24, 0x26	; 38
    e4a2:	9d e0       	ldi	r25, 0x0D	; 13
    e4a4:	0e 94 91 56 	call	0xad22	; 0xad22 <FormatCurrency>
		  FormatCurrency(strCurrentMoney);
    e4a8:	c7 01       	movw	r24, r14
    e4aa:	0e 94 91 56 	call	0xad22	; 0xad22 <FormatCurrency>
		  FormatCurrency(strLastMoney);
    e4ae:	c6 01       	movw	r24, r12
    e4b0:	0e 94 91 56 	call	0xad22	; 0xad22 <FormatCurrency>

		  FormatCurrency(strDeltaVolume);		  
    e4b4:	89 ee       	ldi	r24, 0xE9	; 233
    e4b6:	99 e0       	ldi	r25, 0x09	; 9
    e4b8:	0e 94 91 56 	call	0xad22	; 0xad22 <FormatCurrency>
		  FormatCurrency(strLastVolume);
    e4bc:	c8 01       	movw	r24, r16
    e4be:	0e 94 91 56 	call	0xad22	; 0xad22 <FormatCurrency>
          FormatCurrency(strCurrentVolume);
    e4c2:	c5 01       	movw	r24, r10
    e4c4:	0e 94 91 56 	call	0xad22	; 0xad22 <FormatCurrency>


          InserBorder(btTopLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btTopRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);          
    e4c8:	81 e0       	ldi	r24, 0x01	; 1
    e4ca:	61 e0       	ldi	r22, 0x01	; 1
    e4cc:	0e 94 e5 6a 	call	0xd5ca	; 0xd5ca <InserBorder.clone.0>
    e4d0:	8b e0       	ldi	r24, 0x0B	; 11
    e4d2:	6a e2       	ldi	r22, 0x2A	; 42
    e4d4:	0e 94 e5 6a 	call	0xd5ca	; 0xd5ca <InserBorder.clone.0>
    e4d8:	83 e0       	ldi	r24, 0x03	; 3
    e4da:	61 e0       	ldi	r22, 0x01	; 1
    e4dc:	0e 94 e5 6a 	call	0xd5ca	; 0xd5ca <InserBorder.clone.0>
    e4e0:	8c e0       	ldi	r24, 0x0C	; 12
    e4e2:	61 e0       	ldi	r22, 0x01	; 1
    e4e4:	0e 94 e5 6a 	call	0xd5ca	; 0xd5ca <InserBorder.clone.0>
          if (eeprom_read_byte(&DefDispenserBrand)==ST_WAYNE_DART){
    e4e8:	88 e3       	ldi	r24, 0x38	; 56
    e4ea:	91 e0       	ldi	r25, 0x01	; 1
    e4ec:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
    e4f0:	8e 01       	movw	r16, r28
    e4f2:	0b 55       	subi	r16, 0x5B	; 91
    e4f4:	1f 4f       	sbci	r17, 0xFF	; 255
    e4f6:	42 e4       	ldi	r20, 0x42	; 66
    e4f8:	c4 2e       	mov	r12, r20
    e4fa:	48 e0       	ldi	r20, 0x08	; 8
    e4fc:	d4 2e       	mov	r13, r20
    e4fe:	82 30       	cpi	r24, 0x02	; 2
    e500:	09 f0       	breq	.+2      	; 0xe504 <systemGenerateReport+0x77e>
    e502:	6c c0       	rjmp	.+216    	; 0xe5dc <systemGenerateReport+0x856>
		      GetProductPrice(sPrice,PumpNum,PumpNozzle);
    e504:	3f e0       	ldi	r19, 0x0F	; 15
    e506:	a3 2e       	mov	r10, r19
    e508:	b1 2c       	mov	r11, r1
    e50a:	ac 0e       	add	r10, r28
    e50c:	bd 1e       	adc	r11, r29
    e50e:	c5 01       	movw	r24, r10
    e510:	60 91 c3 02 	lds	r22, 0x02C3
    e514:	40 91 c2 02 	lds	r20, 0x02C2
    e518:	0e 94 ab 69 	call	0xd356	; 0xd356 <GetProductPrice>
			  sprintf_P(strProductPrice,PSTR("Harga: Rp.%s"),sPrice);
    e51c:	00 d0       	rcall	.+0      	; 0xe51e <systemGenerateReport+0x798>
    e51e:	00 d0       	rcall	.+0      	; 0xe520 <systemGenerateReport+0x79a>
    e520:	00 d0       	rcall	.+0      	; 0xe522 <systemGenerateReport+0x79c>
    e522:	ed b7       	in	r30, 0x3d	; 61
    e524:	fe b7       	in	r31, 0x3e	; 62
    e526:	31 96       	adiw	r30, 0x01	; 1
    e528:	21 e9       	ldi	r18, 0x91	; 145
    e52a:	e2 2e       	mov	r14, r18
    e52c:	f1 2c       	mov	r15, r1
    e52e:	ec 0e       	add	r14, r28
    e530:	fd 1e       	adc	r15, r29
    e532:	ad b7       	in	r26, 0x3d	; 61
    e534:	be b7       	in	r27, 0x3e	; 62
    e536:	12 96       	adiw	r26, 0x02	; 2
    e538:	fc 92       	st	X, r15
    e53a:	ee 92       	st	-X, r14
    e53c:	11 97       	sbiw	r26, 0x01	; 1
    e53e:	8a ef       	ldi	r24, 0xFA	; 250
    e540:	95 e0       	ldi	r25, 0x05	; 5
    e542:	93 83       	std	Z+3, r25	; 0x03
    e544:	82 83       	std	Z+2, r24	; 0x02
    e546:	b5 82       	std	Z+5, r11	; 0x05
    e548:	a4 82       	std	Z+4, r10	; 0x04
    e54a:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>

		      GetTabSpace(((17+10-strlen(strProduct))-strlen(strProductPrice)),strTabSpace2);
    e54e:	f6 01       	movw	r30, r12
    e550:	01 90       	ld	r0, Z+
    e552:	00 20       	and	r0, r0
    e554:	e9 f7       	brne	.-6      	; 0xe550 <systemGenerateReport+0x7ca>
    e556:	31 97       	sbiw	r30, 0x01	; 1
    e558:	ec 19       	sub	r30, r12
    e55a:	fd 09       	sbc	r31, r13
    e55c:	d7 01       	movw	r26, r14
    e55e:	0d 90       	ld	r0, X+
    e560:	00 20       	and	r0, r0
    e562:	e9 f7       	brne	.-6      	; 0xe55e <systemGenerateReport+0x7d8>
    e564:	11 97       	sbiw	r26, 0x01	; 1
    e566:	8d b7       	in	r24, 0x3d	; 61
    e568:	9e b7       	in	r25, 0x3e	; 62
    e56a:	06 96       	adiw	r24, 0x06	; 6
    e56c:	0f b6       	in	r0, 0x3f	; 63
    e56e:	f8 94       	cli
    e570:	9e bf       	out	0x3e, r25	; 62
    e572:	0f be       	out	0x3f, r0	; 63
    e574:	8d bf       	out	0x3d, r24	; 61
    e576:	8e 2d       	mov	r24, r14
    e578:	8a 1b       	sub	r24, r26
    e57a:	8e 1b       	sub	r24, r30
    e57c:	9d e7       	ldi	r25, 0x7D	; 125
    e57e:	a9 2e       	mov	r10, r25
    e580:	b1 2c       	mov	r11, r1
    e582:	ac 0e       	add	r10, r28
    e584:	bd 1e       	adc	r11, r29
    e586:	85 5e       	subi	r24, 0xE5	; 229
    e588:	b5 01       	movw	r22, r10
    e58a:	0e 94 99 69 	call	0xd332	; 0xd332 <GetTabSpace>
		      sprintf_P(strReport,PSTR("P%d.%d - %s %s %s"),PumpNum,PumpNozzle,strProduct,strTabSpace2,strProductPrice);
    e58e:	ad b7       	in	r26, 0x3d	; 61
    e590:	be b7       	in	r27, 0x3e	; 62
    e592:	1e 97       	sbiw	r26, 0x0e	; 14
    e594:	0f b6       	in	r0, 0x3f	; 63
    e596:	f8 94       	cli
    e598:	be bf       	out	0x3e, r27	; 62
    e59a:	0f be       	out	0x3f, r0	; 63
    e59c:	ad bf       	out	0x3d, r26	; 61
    e59e:	ed b7       	in	r30, 0x3d	; 61
    e5a0:	fe b7       	in	r31, 0x3e	; 62
    e5a2:	31 96       	adiw	r30, 0x01	; 1
    e5a4:	12 96       	adiw	r26, 0x02	; 2
    e5a6:	1c 93       	st	X, r17
    e5a8:	0e 93       	st	-X, r16
    e5aa:	11 97       	sbiw	r26, 0x01	; 1
    e5ac:	88 ee       	ldi	r24, 0xE8	; 232
    e5ae:	95 e0       	ldi	r25, 0x05	; 5
    e5b0:	93 83       	std	Z+3, r25	; 0x03
    e5b2:	82 83       	std	Z+2, r24	; 0x02
    e5b4:	80 91 c3 02 	lds	r24, 0x02C3
    e5b8:	84 83       	std	Z+4, r24	; 0x04
    e5ba:	15 82       	std	Z+5, r1	; 0x05
    e5bc:	80 91 c2 02 	lds	r24, 0x02C2
    e5c0:	86 83       	std	Z+6, r24	; 0x06
    e5c2:	17 82       	std	Z+7, r1	; 0x07
    e5c4:	d1 86       	std	Z+9, r13	; 0x09
    e5c6:	c0 86       	std	Z+8, r12	; 0x08
    e5c8:	b3 86       	std	Z+11, r11	; 0x0b
    e5ca:	a2 86       	std	Z+10, r10	; 0x0a
    e5cc:	f5 86       	std	Z+13, r15	; 0x0d
    e5ce:	e4 86       	std	Z+12, r14	; 0x0c
    e5d0:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    e5d4:	ed b7       	in	r30, 0x3d	; 61
    e5d6:	fe b7       	in	r31, 0x3e	; 62
    e5d8:	3e 96       	adiw	r30, 0x0e	; 14
    e5da:	24 c0       	rjmp	.+72     	; 0xe624 <systemGenerateReport+0x89e>
		  }
		  else sprintf_P(strReport,PSTR("P%d.%d - %s "),PumpNum,PumpNozzle,strProduct);
    e5dc:	8d b7       	in	r24, 0x3d	; 61
    e5de:	9e b7       	in	r25, 0x3e	; 62
    e5e0:	0a 97       	sbiw	r24, 0x0a	; 10
    e5e2:	0f b6       	in	r0, 0x3f	; 63
    e5e4:	f8 94       	cli
    e5e6:	9e bf       	out	0x3e, r25	; 62
    e5e8:	0f be       	out	0x3f, r0	; 63
    e5ea:	8d bf       	out	0x3d, r24	; 61
    e5ec:	ed b7       	in	r30, 0x3d	; 61
    e5ee:	fe b7       	in	r31, 0x3e	; 62
    e5f0:	31 96       	adiw	r30, 0x01	; 1
    e5f2:	ad b7       	in	r26, 0x3d	; 61
    e5f4:	be b7       	in	r27, 0x3e	; 62
    e5f6:	12 96       	adiw	r26, 0x02	; 2
    e5f8:	1c 93       	st	X, r17
    e5fa:	0e 93       	st	-X, r16
    e5fc:	11 97       	sbiw	r26, 0x01	; 1
    e5fe:	8b ed       	ldi	r24, 0xDB	; 219
    e600:	95 e0       	ldi	r25, 0x05	; 5
    e602:	93 83       	std	Z+3, r25	; 0x03
    e604:	82 83       	std	Z+2, r24	; 0x02
    e606:	80 91 c3 02 	lds	r24, 0x02C3
    e60a:	84 83       	std	Z+4, r24	; 0x04
    e60c:	15 82       	std	Z+5, r1	; 0x05
    e60e:	80 91 c2 02 	lds	r24, 0x02C2
    e612:	86 83       	std	Z+6, r24	; 0x06
    e614:	17 82       	std	Z+7, r1	; 0x07
    e616:	d1 86       	std	Z+9, r13	; 0x09
    e618:	c0 86       	std	Z+8, r12	; 0x08
    e61a:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    e61e:	ed b7       	in	r30, 0x3d	; 61
    e620:	fe b7       	in	r31, 0x3e	; 62
    e622:	3a 96       	adiw	r30, 0x0a	; 10
    e624:	0f b6       	in	r0, 0x3f	; 63
    e626:	f8 94       	cli
    e628:	fe bf       	out	0x3e, r31	; 62
    e62a:	0f be       	out	0x3f, r0	; 63
    e62c:	ed bf       	out	0x3d, r30	; 61
		  CreateReport(strReport,PrintBuffer,&RepPos);
    e62e:	15 ea       	ldi	r17, 0xA5	; 165
    e630:	c1 2e       	mov	r12, r17
    e632:	d1 2c       	mov	r13, r1
    e634:	cc 0e       	add	r12, r28
    e636:	dd 1e       	adc	r13, r29
    e638:	c6 01       	movw	r24, r12
    e63a:	60 ed       	ldi	r22, 0xD0	; 208
    e63c:	74 e0       	ldi	r23, 0x04	; 4
    e63e:	45 eb       	ldi	r20, 0xB5	; 181
    e640:	52 e0       	ldi	r21, 0x02	; 2
    e642:	0e 94 4a 6b 	call	0xd694	; 0xd694 <CreateReport>
          InserBorder(btMiddleLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btMiddleRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);          
    e646:	84 e0       	ldi	r24, 0x04	; 4
    e648:	61 e0       	ldi	r22, 0x01	; 1
    e64a:	0e 94 e5 6a 	call	0xd5ca	; 0xd5ca <InserBorder.clone.0>
    e64e:	8b e0       	ldi	r24, 0x0B	; 11
    e650:	6a e2       	ldi	r22, 0x2A	; 42
    e652:	0e 94 e5 6a 	call	0xd5ca	; 0xd5ca <InserBorder.clone.0>
    e656:	86 e0       	ldi	r24, 0x06	; 6
    e658:	61 e0       	ldi	r22, 0x01	; 1
    e65a:	0e 94 e5 6a 	call	0xd5ca	; 0xd5ca <InserBorder.clone.0>
    e65e:	8c e0       	ldi	r24, 0x0C	; 12
    e660:	61 e0       	ldi	r22, 0x01	; 1
    e662:	0e 94 e5 6a 	call	0xd5ca	; 0xd5ca <InserBorder.clone.0>

		  GetTabSpace((17-strlen(strCurrentVolume)),strTabSpace);
    e666:	8e 01       	movw	r16, r28
    e668:	09 5c       	subi	r16, 0xC9	; 201
    e66a:	1f 4f       	sbci	r17, 0xFF	; 255
    e66c:	f8 01       	movw	r30, r16
    e66e:	01 90       	ld	r0, Z+
    e670:	00 20       	and	r0, r0
    e672:	e9 f7       	brne	.-6      	; 0xe66e <systemGenerateReport+0x8e8>
    e674:	80 2f       	mov	r24, r16
    e676:	8e 1b       	sub	r24, r30
    e678:	b9 e6       	ldi	r27, 0x69	; 105
    e67a:	eb 2e       	mov	r14, r27
    e67c:	f1 2c       	mov	r15, r1
    e67e:	ec 0e       	add	r14, r28
    e680:	fd 1e       	adc	r15, r29
    e682:	8e 5e       	subi	r24, 0xEE	; 238
    e684:	b7 01       	movw	r22, r14
    e686:	0e 94 99 69 	call	0xd332	; 0xd332 <GetTabSpace>
		  GetTabSpace((15-strlen(strCurrentMoney)),strTabSpace2);
    e68a:	a6 e4       	ldi	r26, 0x46	; 70
    e68c:	aa 2e       	mov	r10, r26
    e68e:	b1 2c       	mov	r11, r1
    e690:	ac 0e       	add	r10, r28
    e692:	bd 1e       	adc	r11, r29
    e694:	f5 01       	movw	r30, r10
    e696:	01 90       	ld	r0, Z+
    e698:	00 20       	and	r0, r0
    e69a:	e9 f7       	brne	.-6      	; 0xe696 <systemGenerateReport+0x910>
    e69c:	8a 2d       	mov	r24, r10
    e69e:	8e 1b       	sub	r24, r30
    e6a0:	fd e7       	ldi	r31, 0x7D	; 125
    e6a2:	8f 2e       	mov	r8, r31
    e6a4:	91 2c       	mov	r9, r1
    e6a6:	8c 0e       	add	r8, r28
    e6a8:	9d 1e       	adc	r9, r29
    e6aa:	80 5f       	subi	r24, 0xF0	; 240
    e6ac:	b4 01       	movw	r22, r8
    e6ae:	0e 94 99 69 	call	0xd332	; 0xd332 <GetTabSpace>
		  //PrintMoney
		  if (eeprom_read_byte(&DefPrintMoney)==True) sprintf_P(strReport,PSTR("Akhir:%s%s%s%s"),strTabSpace,strCurrentVolume,strTabSpace2,strCurrentMoney);//CreateReport(strReport,PrintBuffer,&RepPos);
    e6b2:	82 ec       	ldi	r24, 0xC2	; 194
    e6b4:	93 e0       	ldi	r25, 0x03	; 3
    e6b6:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
    e6ba:	81 30       	cpi	r24, 0x01	; 1
    e6bc:	19 f5       	brne	.+70     	; 0xe704 <systemGenerateReport+0x97e>
    e6be:	8d b7       	in	r24, 0x3d	; 61
    e6c0:	9e b7       	in	r25, 0x3e	; 62
    e6c2:	0c 97       	sbiw	r24, 0x0c	; 12
    e6c4:	0f b6       	in	r0, 0x3f	; 63
    e6c6:	f8 94       	cli
    e6c8:	9e bf       	out	0x3e, r25	; 62
    e6ca:	0f be       	out	0x3f, r0	; 63
    e6cc:	8d bf       	out	0x3d, r24	; 61
    e6ce:	ed b7       	in	r30, 0x3d	; 61
    e6d0:	fe b7       	in	r31, 0x3e	; 62
    e6d2:	31 96       	adiw	r30, 0x01	; 1
    e6d4:	ad b7       	in	r26, 0x3d	; 61
    e6d6:	be b7       	in	r27, 0x3e	; 62
    e6d8:	12 96       	adiw	r26, 0x02	; 2
    e6da:	dc 92       	st	X, r13
    e6dc:	ce 92       	st	-X, r12
    e6de:	11 97       	sbiw	r26, 0x01	; 1
    e6e0:	8c ec       	ldi	r24, 0xCC	; 204
    e6e2:	95 e0       	ldi	r25, 0x05	; 5
    e6e4:	93 83       	std	Z+3, r25	; 0x03
    e6e6:	82 83       	std	Z+2, r24	; 0x02
    e6e8:	f5 82       	std	Z+5, r15	; 0x05
    e6ea:	e4 82       	std	Z+4, r14	; 0x04
    e6ec:	17 83       	std	Z+7, r17	; 0x07
    e6ee:	06 83       	std	Z+6, r16	; 0x06
    e6f0:	91 86       	std	Z+9, r9	; 0x09
    e6f2:	80 86       	std	Z+8, r8	; 0x08
    e6f4:	b3 86       	std	Z+11, r11	; 0x0b
    e6f6:	a2 86       	std	Z+10, r10	; 0x0a
    e6f8:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    e6fc:	ed b7       	in	r30, 0x3d	; 61
    e6fe:	fe b7       	in	r31, 0x3e	; 62
    e700:	3c 96       	adiw	r30, 0x0c	; 12
    e702:	1e c0       	rjmp	.+60     	; 0xe740 <systemGenerateReport+0x9ba>
		  else sprintf_P(strReport,PSTR("Akhir:%s%s"),strTabSpace,strCurrentVolume);
    e704:	8d b7       	in	r24, 0x3d	; 61
    e706:	9e b7       	in	r25, 0x3e	; 62
    e708:	08 97       	sbiw	r24, 0x08	; 8
    e70a:	0f b6       	in	r0, 0x3f	; 63
    e70c:	f8 94       	cli
    e70e:	9e bf       	out	0x3e, r25	; 62
    e710:	0f be       	out	0x3f, r0	; 63
    e712:	8d bf       	out	0x3d, r24	; 61
    e714:	ed b7       	in	r30, 0x3d	; 61
    e716:	fe b7       	in	r31, 0x3e	; 62
    e718:	31 96       	adiw	r30, 0x01	; 1
    e71a:	ad b7       	in	r26, 0x3d	; 61
    e71c:	be b7       	in	r27, 0x3e	; 62
    e71e:	12 96       	adiw	r26, 0x02	; 2
    e720:	dc 92       	st	X, r13
    e722:	ce 92       	st	-X, r12
    e724:	11 97       	sbiw	r26, 0x01	; 1
    e726:	81 ec       	ldi	r24, 0xC1	; 193
    e728:	95 e0       	ldi	r25, 0x05	; 5
    e72a:	93 83       	std	Z+3, r25	; 0x03
    e72c:	82 83       	std	Z+2, r24	; 0x02
    e72e:	f5 82       	std	Z+5, r15	; 0x05
    e730:	e4 82       	std	Z+4, r14	; 0x04
    e732:	17 83       	std	Z+7, r17	; 0x07
    e734:	06 83       	std	Z+6, r16	; 0x06
    e736:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    e73a:	ed b7       	in	r30, 0x3d	; 61
    e73c:	fe b7       	in	r31, 0x3e	; 62
    e73e:	38 96       	adiw	r30, 0x08	; 8
    e740:	0f b6       	in	r0, 0x3f	; 63
    e742:	f8 94       	cli
    e744:	fe bf       	out	0x3e, r31	; 62
    e746:	0f be       	out	0x3f, r0	; 63
    e748:	ed bf       	out	0x3d, r30	; 61
		  CreateReport(strReport,PrintBuffer,&RepPos);
    e74a:	e5 ea       	ldi	r30, 0xA5	; 165
    e74c:	ce 2e       	mov	r12, r30
    e74e:	d1 2c       	mov	r13, r1
    e750:	cc 0e       	add	r12, r28
    e752:	dd 1e       	adc	r13, r29
    e754:	c6 01       	movw	r24, r12
    e756:	60 ed       	ldi	r22, 0xD0	; 208
    e758:	74 e0       	ldi	r23, 0x04	; 4
    e75a:	45 eb       	ldi	r20, 0xB5	; 181
    e75c:	52 e0       	ldi	r21, 0x02	; 2
    e75e:	0e 94 4a 6b 	call	0xd694	; 0xd694 <CreateReport>

		  GetTabSpace((17-strlen(strLastVolume)),strTabSpace);
    e762:	8e 01       	movw	r16, r28
    e764:	07 5e       	subi	r16, 0xE7	; 231
    e766:	1f 4f       	sbci	r17, 0xFF	; 255
    e768:	f8 01       	movw	r30, r16
    e76a:	01 90       	ld	r0, Z+
    e76c:	00 20       	and	r0, r0
    e76e:	e9 f7       	brne	.-6      	; 0xe76a <systemGenerateReport+0x9e4>
    e770:	80 2f       	mov	r24, r16
    e772:	8e 1b       	sub	r24, r30
    e774:	79 e6       	ldi	r23, 0x69	; 105
    e776:	e7 2e       	mov	r14, r23
    e778:	f1 2c       	mov	r15, r1
    e77a:	ec 0e       	add	r14, r28
    e77c:	fd 1e       	adc	r15, r29
    e77e:	8e 5e       	subi	r24, 0xEE	; 238
    e780:	b7 01       	movw	r22, r14
    e782:	0e 94 99 69 	call	0xd332	; 0xd332 <GetTabSpace>
		  GetTabSpace((15-strlen(strLastMoney)),strTabSpace2);
    e786:	68 e2       	ldi	r22, 0x28	; 40
    e788:	a6 2e       	mov	r10, r22
    e78a:	b1 2c       	mov	r11, r1
    e78c:	ac 0e       	add	r10, r28
    e78e:	bd 1e       	adc	r11, r29
    e790:	f5 01       	movw	r30, r10
    e792:	01 90       	ld	r0, Z+
    e794:	00 20       	and	r0, r0
    e796:	e9 f7       	brne	.-6      	; 0xe792 <systemGenerateReport+0xa0c>
    e798:	8a 2d       	mov	r24, r10
    e79a:	8e 1b       	sub	r24, r30
    e79c:	5d e7       	ldi	r21, 0x7D	; 125
    e79e:	85 2e       	mov	r8, r21
    e7a0:	91 2c       	mov	r9, r1
    e7a2:	8c 0e       	add	r8, r28
    e7a4:	9d 1e       	adc	r9, r29
    e7a6:	80 5f       	subi	r24, 0xF0	; 240
    e7a8:	b4 01       	movw	r22, r8
    e7aa:	0e 94 99 69 	call	0xd332	; 0xd332 <GetTabSpace>
		  //PrintMoney
		  if (eeprom_read_byte(&DefPrintMoney)==True)sprintf_P(strReport,PSTR("Awal :%s%s%s%s"),strTabSpace,strLastVolume,strTabSpace2,strLastMoney);//CreateReport(strReport,PrintBuffer,&RepPos);
    e7ae:	82 ec       	ldi	r24, 0xC2	; 194
    e7b0:	93 e0       	ldi	r25, 0x03	; 3
    e7b2:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
    e7b6:	81 30       	cpi	r24, 0x01	; 1
    e7b8:	19 f5       	brne	.+70     	; 0xe800 <systemGenerateReport+0xa7a>
    e7ba:	8d b7       	in	r24, 0x3d	; 61
    e7bc:	9e b7       	in	r25, 0x3e	; 62
    e7be:	0c 97       	sbiw	r24, 0x0c	; 12
    e7c0:	0f b6       	in	r0, 0x3f	; 63
    e7c2:	f8 94       	cli
    e7c4:	9e bf       	out	0x3e, r25	; 62
    e7c6:	0f be       	out	0x3f, r0	; 63
    e7c8:	8d bf       	out	0x3d, r24	; 61
    e7ca:	ed b7       	in	r30, 0x3d	; 61
    e7cc:	fe b7       	in	r31, 0x3e	; 62
    e7ce:	31 96       	adiw	r30, 0x01	; 1
    e7d0:	ad b7       	in	r26, 0x3d	; 61
    e7d2:	be b7       	in	r27, 0x3e	; 62
    e7d4:	12 96       	adiw	r26, 0x02	; 2
    e7d6:	dc 92       	st	X, r13
    e7d8:	ce 92       	st	-X, r12
    e7da:	11 97       	sbiw	r26, 0x01	; 1
    e7dc:	82 eb       	ldi	r24, 0xB2	; 178
    e7de:	95 e0       	ldi	r25, 0x05	; 5
    e7e0:	93 83       	std	Z+3, r25	; 0x03
    e7e2:	82 83       	std	Z+2, r24	; 0x02
    e7e4:	f5 82       	std	Z+5, r15	; 0x05
    e7e6:	e4 82       	std	Z+4, r14	; 0x04
    e7e8:	17 83       	std	Z+7, r17	; 0x07
    e7ea:	06 83       	std	Z+6, r16	; 0x06
    e7ec:	91 86       	std	Z+9, r9	; 0x09
    e7ee:	80 86       	std	Z+8, r8	; 0x08
    e7f0:	b3 86       	std	Z+11, r11	; 0x0b
    e7f2:	a2 86       	std	Z+10, r10	; 0x0a
    e7f4:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    e7f8:	ed b7       	in	r30, 0x3d	; 61
    e7fa:	fe b7       	in	r31, 0x3e	; 62
    e7fc:	3c 96       	adiw	r30, 0x0c	; 12
    e7fe:	1e c0       	rjmp	.+60     	; 0xe83c <systemGenerateReport+0xab6>
		  else sprintf_P(strReport,PSTR("Awal :%s%s"),strTabSpace,strLastVolume);
    e800:	8d b7       	in	r24, 0x3d	; 61
    e802:	9e b7       	in	r25, 0x3e	; 62
    e804:	08 97       	sbiw	r24, 0x08	; 8
    e806:	0f b6       	in	r0, 0x3f	; 63
    e808:	f8 94       	cli
    e80a:	9e bf       	out	0x3e, r25	; 62
    e80c:	0f be       	out	0x3f, r0	; 63
    e80e:	8d bf       	out	0x3d, r24	; 61
    e810:	ed b7       	in	r30, 0x3d	; 61
    e812:	fe b7       	in	r31, 0x3e	; 62
    e814:	31 96       	adiw	r30, 0x01	; 1
    e816:	ad b7       	in	r26, 0x3d	; 61
    e818:	be b7       	in	r27, 0x3e	; 62
    e81a:	12 96       	adiw	r26, 0x02	; 2
    e81c:	dc 92       	st	X, r13
    e81e:	ce 92       	st	-X, r12
    e820:	11 97       	sbiw	r26, 0x01	; 1
    e822:	87 ea       	ldi	r24, 0xA7	; 167
    e824:	95 e0       	ldi	r25, 0x05	; 5
    e826:	93 83       	std	Z+3, r25	; 0x03
    e828:	82 83       	std	Z+2, r24	; 0x02
    e82a:	f5 82       	std	Z+5, r15	; 0x05
    e82c:	e4 82       	std	Z+4, r14	; 0x04
    e82e:	17 83       	std	Z+7, r17	; 0x07
    e830:	06 83       	std	Z+6, r16	; 0x06
    e832:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    e836:	ed b7       	in	r30, 0x3d	; 61
    e838:	fe b7       	in	r31, 0x3e	; 62
    e83a:	38 96       	adiw	r30, 0x08	; 8
    e83c:	0f b6       	in	r0, 0x3f	; 63
    e83e:	f8 94       	cli
    e840:	fe bf       	out	0x3e, r31	; 62
    e842:	0f be       	out	0x3f, r0	; 63
    e844:	ed bf       	out	0x3d, r30	; 61
		  CreateReport(strReport,PrintBuffer,&RepPos);
    e846:	45 ea       	ldi	r20, 0xA5	; 165
    e848:	e4 2e       	mov	r14, r20
    e84a:	f1 2c       	mov	r15, r1
    e84c:	ec 0e       	add	r14, r28
    e84e:	fd 1e       	adc	r15, r29
    e850:	c7 01       	movw	r24, r14
    e852:	60 ed       	ldi	r22, 0xD0	; 208
    e854:	74 e0       	ldi	r23, 0x04	; 4
    e856:	45 eb       	ldi	r20, 0xB5	; 181
    e858:	52 e0       	ldi	r21, 0x02	; 2
    e85a:	0e 94 4a 6b 	call	0xd694	; 0xd694 <CreateReport>

		  GetTabSpace(12,strTabSpace);
    e85e:	8e 01       	movw	r16, r28
    e860:	07 59       	subi	r16, 0x97	; 151
    e862:	1f 4f       	sbci	r17, 0xFF	; 255
    e864:	8c e0       	ldi	r24, 0x0C	; 12
    e866:	b8 01       	movw	r22, r16
    e868:	0e 94 99 69 	call	0xd332	; 0xd332 <GetTabSpace>
          //PrintMoney
          if (eeprom_read_byte(&DefPrintMoney)==True)sprintf_P(strReport,PSTR("%s-----------   -------------"),strTabSpace);//CreateReport(strReport,PrintBuffer,&RepPos);
    e86c:	82 ec       	ldi	r24, 0xC2	; 194
    e86e:	93 e0       	ldi	r25, 0x03	; 3
    e870:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
    e874:	81 30       	cpi	r24, 0x01	; 1
    e876:	79 f4       	brne	.+30     	; 0xe896 <systemGenerateReport+0xb10>
    e878:	00 d0       	rcall	.+0      	; 0xe87a <systemGenerateReport+0xaf4>
    e87a:	00 d0       	rcall	.+0      	; 0xe87c <systemGenerateReport+0xaf6>
    e87c:	00 d0       	rcall	.+0      	; 0xe87e <systemGenerateReport+0xaf8>
    e87e:	ed b7       	in	r30, 0x3d	; 61
    e880:	fe b7       	in	r31, 0x3e	; 62
    e882:	31 96       	adiw	r30, 0x01	; 1
    e884:	ad b7       	in	r26, 0x3d	; 61
    e886:	be b7       	in	r27, 0x3e	; 62
    e888:	12 96       	adiw	r26, 0x02	; 2
    e88a:	fc 92       	st	X, r15
    e88c:	ee 92       	st	-X, r14
    e88e:	11 97       	sbiw	r26, 0x01	; 1
    e890:	89 e8       	ldi	r24, 0x89	; 137
    e892:	95 e0       	ldi	r25, 0x05	; 5
    e894:	0e c0       	rjmp	.+28     	; 0xe8b2 <systemGenerateReport+0xb2c>
		  else sprintf_P(strReport,PSTR("%s-----------                "),strTabSpace);CreateReport(strReport,PrintBuffer,&RepPos);
    e896:	00 d0       	rcall	.+0      	; 0xe898 <systemGenerateReport+0xb12>
    e898:	00 d0       	rcall	.+0      	; 0xe89a <systemGenerateReport+0xb14>
    e89a:	00 d0       	rcall	.+0      	; 0xe89c <systemGenerateReport+0xb16>
    e89c:	ed b7       	in	r30, 0x3d	; 61
    e89e:	fe b7       	in	r31, 0x3e	; 62
    e8a0:	31 96       	adiw	r30, 0x01	; 1
    e8a2:	ad b7       	in	r26, 0x3d	; 61
    e8a4:	be b7       	in	r27, 0x3e	; 62
    e8a6:	12 96       	adiw	r26, 0x02	; 2
    e8a8:	fc 92       	st	X, r15
    e8aa:	ee 92       	st	-X, r14
    e8ac:	11 97       	sbiw	r26, 0x01	; 1
    e8ae:	8b e6       	ldi	r24, 0x6B	; 107
    e8b0:	95 e0       	ldi	r25, 0x05	; 5
    e8b2:	93 83       	std	Z+3, r25	; 0x03
    e8b4:	82 83       	std	Z+2, r24	; 0x02
    e8b6:	15 83       	std	Z+5, r17	; 0x05
    e8b8:	04 83       	std	Z+4, r16	; 0x04
    e8ba:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    e8be:	ed b7       	in	r30, 0x3d	; 61
    e8c0:	fe b7       	in	r31, 0x3e	; 62
    e8c2:	36 96       	adiw	r30, 0x06	; 6
    e8c4:	0f b6       	in	r0, 0x3f	; 63
    e8c6:	f8 94       	cli
    e8c8:	fe bf       	out	0x3e, r31	; 62
    e8ca:	0f be       	out	0x3f, r0	; 63
    e8cc:	ed bf       	out	0x3d, r30	; 61
    e8ce:	35 ea       	ldi	r19, 0xA5	; 165
    e8d0:	c3 2e       	mov	r12, r19
    e8d2:	d1 2c       	mov	r13, r1
    e8d4:	cc 0e       	add	r12, r28
    e8d6:	dd 1e       	adc	r13, r29
    e8d8:	c6 01       	movw	r24, r12
    e8da:	60 ed       	ldi	r22, 0xD0	; 208
    e8dc:	74 e0       	ldi	r23, 0x04	; 4
    e8de:	45 eb       	ldi	r20, 0xB5	; 181
    e8e0:	52 e0       	ldi	r21, 0x02	; 2
    e8e2:	0e 94 4a 6b 	call	0xd694	; 0xd694 <CreateReport>

		  GetTabSpace((23-strlen(strDeltaVolume)),strTabSpace);
    e8e6:	29 ee       	ldi	r18, 0xE9	; 233
    e8e8:	e2 2e       	mov	r14, r18
    e8ea:	29 e0       	ldi	r18, 0x09	; 9
    e8ec:	f2 2e       	mov	r15, r18
    e8ee:	f7 01       	movw	r30, r14
    e8f0:	01 90       	ld	r0, Z+
    e8f2:	00 20       	and	r0, r0
    e8f4:	e9 f7       	brne	.-6      	; 0xe8f0 <systemGenerateReport+0xb6a>
    e8f6:	31 97       	sbiw	r30, 0x01	; 1
    e8f8:	ee 19       	sub	r30, r14
    e8fa:	ff 09       	sbc	r31, r15
    e8fc:	8e 01       	movw	r16, r28
    e8fe:	07 59       	subi	r16, 0x97	; 151
    e900:	1f 4f       	sbci	r17, 0xFF	; 255
    e902:	87 e1       	ldi	r24, 0x17	; 23
    e904:	8e 1b       	sub	r24, r30
    e906:	b8 01       	movw	r22, r16
    e908:	0e 94 99 69 	call	0xd332	; 0xd332 <GetTabSpace>
		  GetTabSpace((15-strlen(strDeltaMoney)),strTabSpace2);
    e90c:	96 e2       	ldi	r25, 0x26	; 38
    e90e:	89 2e       	mov	r8, r25
    e910:	9d e0       	ldi	r25, 0x0D	; 13
    e912:	99 2e       	mov	r9, r25
    e914:	f4 01       	movw	r30, r8
    e916:	01 90       	ld	r0, Z+
    e918:	00 20       	and	r0, r0
    e91a:	e9 f7       	brne	.-6      	; 0xe916 <systemGenerateReport+0xb90>
    e91c:	31 97       	sbiw	r30, 0x01	; 1
    e91e:	e8 19       	sub	r30, r8
    e920:	f9 09       	sbc	r31, r9
    e922:	8d e7       	ldi	r24, 0x7D	; 125
    e924:	a8 2e       	mov	r10, r24
    e926:	b1 2c       	mov	r11, r1
    e928:	ac 0e       	add	r10, r28
    e92a:	bd 1e       	adc	r11, r29
    e92c:	8f e0       	ldi	r24, 0x0F	; 15
    e92e:	8e 1b       	sub	r24, r30
    e930:	b5 01       	movw	r22, r10
    e932:	0e 94 99 69 	call	0xd332	; 0xd332 <GetTabSpace>
          //PrintMoney
		  if (eeprom_read_byte(&DefPrintMoney)==True)sprintf_P(strReport,PSTR("%s%s%s%s"),strTabSpace,strDeltaVolume,strTabSpace2,strDeltaMoney);//CreateReport(strReport,PrintBuffer,&RepPos);
    e936:	82 ec       	ldi	r24, 0xC2	; 194
    e938:	93 e0       	ldi	r25, 0x03	; 3
    e93a:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
    e93e:	81 30       	cpi	r24, 0x01	; 1
    e940:	19 f5       	brne	.+70     	; 0xe988 <systemGenerateReport+0xc02>
    e942:	8d b7       	in	r24, 0x3d	; 61
    e944:	9e b7       	in	r25, 0x3e	; 62
    e946:	0c 97       	sbiw	r24, 0x0c	; 12
    e948:	0f b6       	in	r0, 0x3f	; 63
    e94a:	f8 94       	cli
    e94c:	9e bf       	out	0x3e, r25	; 62
    e94e:	0f be       	out	0x3f, r0	; 63
    e950:	8d bf       	out	0x3d, r24	; 61
    e952:	ed b7       	in	r30, 0x3d	; 61
    e954:	fe b7       	in	r31, 0x3e	; 62
    e956:	31 96       	adiw	r30, 0x01	; 1
    e958:	ad b7       	in	r26, 0x3d	; 61
    e95a:	be b7       	in	r27, 0x3e	; 62
    e95c:	12 96       	adiw	r26, 0x02	; 2
    e95e:	dc 92       	st	X, r13
    e960:	ce 92       	st	-X, r12
    e962:	11 97       	sbiw	r26, 0x01	; 1
    e964:	82 e6       	ldi	r24, 0x62	; 98
    e966:	95 e0       	ldi	r25, 0x05	; 5
    e968:	93 83       	std	Z+3, r25	; 0x03
    e96a:	82 83       	std	Z+2, r24	; 0x02
    e96c:	15 83       	std	Z+5, r17	; 0x05
    e96e:	04 83       	std	Z+4, r16	; 0x04
    e970:	f7 82       	std	Z+7, r15	; 0x07
    e972:	e6 82       	std	Z+6, r14	; 0x06
    e974:	b1 86       	std	Z+9, r11	; 0x09
    e976:	a0 86       	std	Z+8, r10	; 0x08
    e978:	93 86       	std	Z+11, r9	; 0x0b
    e97a:	82 86       	std	Z+10, r8	; 0x0a
    e97c:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    e980:	ed b7       	in	r30, 0x3d	; 61
    e982:	fe b7       	in	r31, 0x3e	; 62
    e984:	3c 96       	adiw	r30, 0x0c	; 12
    e986:	1e c0       	rjmp	.+60     	; 0xe9c4 <systemGenerateReport+0xc3e>
          else sprintf_P(strReport,PSTR("%s%s"),strTabSpace,strDeltaVolume);CreateReport(strReport,PrintBuffer,&RepPos);
    e988:	8d b7       	in	r24, 0x3d	; 61
    e98a:	9e b7       	in	r25, 0x3e	; 62
    e98c:	08 97       	sbiw	r24, 0x08	; 8
    e98e:	0f b6       	in	r0, 0x3f	; 63
    e990:	f8 94       	cli
    e992:	9e bf       	out	0x3e, r25	; 62
    e994:	0f be       	out	0x3f, r0	; 63
    e996:	8d bf       	out	0x3d, r24	; 61
    e998:	ed b7       	in	r30, 0x3d	; 61
    e99a:	fe b7       	in	r31, 0x3e	; 62
    e99c:	31 96       	adiw	r30, 0x01	; 1
    e99e:	ad b7       	in	r26, 0x3d	; 61
    e9a0:	be b7       	in	r27, 0x3e	; 62
    e9a2:	12 96       	adiw	r26, 0x02	; 2
    e9a4:	dc 92       	st	X, r13
    e9a6:	ce 92       	st	-X, r12
    e9a8:	11 97       	sbiw	r26, 0x01	; 1
    e9aa:	8d e5       	ldi	r24, 0x5D	; 93
    e9ac:	95 e0       	ldi	r25, 0x05	; 5
    e9ae:	93 83       	std	Z+3, r25	; 0x03
    e9b0:	82 83       	std	Z+2, r24	; 0x02
    e9b2:	15 83       	std	Z+5, r17	; 0x05
    e9b4:	04 83       	std	Z+4, r16	; 0x04
    e9b6:	f7 82       	std	Z+7, r15	; 0x07
    e9b8:	e6 82       	std	Z+6, r14	; 0x06
    e9ba:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    e9be:	ed b7       	in	r30, 0x3d	; 61
    e9c0:	fe b7       	in	r31, 0x3e	; 62
    e9c2:	38 96       	adiw	r30, 0x08	; 8
    e9c4:	0f b6       	in	r0, 0x3f	; 63
    e9c6:	f8 94       	cli
    e9c8:	fe bf       	out	0x3e, r31	; 62
    e9ca:	0f be       	out	0x3f, r0	; 63
    e9cc:	ed bf       	out	0x3d, r30	; 61
    e9ce:	ce 01       	movw	r24, r28
    e9d0:	8b 55       	subi	r24, 0x5B	; 91
    e9d2:	9f 4f       	sbci	r25, 0xFF	; 255
    e9d4:	60 ed       	ldi	r22, 0xD0	; 208
    e9d6:	74 e0       	ldi	r23, 0x04	; 4
    e9d8:	45 eb       	ldi	r20, 0xB5	; 181
    e9da:	52 e0       	ldi	r21, 0x02	; 2
    e9dc:	0e 94 4a 6b 	call	0xd694	; 0xd694 <CreateReport>

          InserBorder(btBottomLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btBottomRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);
    e9e0:	87 e0       	ldi	r24, 0x07	; 7
    e9e2:	61 e0       	ldi	r22, 0x01	; 1
    e9e4:	0e 94 e5 6a 	call	0xd5ca	; 0xd5ca <InserBorder.clone.0>
    e9e8:	8b e0       	ldi	r24, 0x0B	; 11
    e9ea:	6a e2       	ldi	r22, 0x2A	; 42
    e9ec:	0e 94 e5 6a 	call	0xd5ca	; 0xd5ca <InserBorder.clone.0>
    e9f0:	89 e0       	ldi	r24, 0x09	; 9
    e9f2:	61 e0       	ldi	r22, 0x01	; 1
    e9f4:	0e 94 e5 6a 	call	0xd5ca	; 0xd5ca <InserBorder.clone.0>
    e9f8:	8c e0       	ldi	r24, 0x0C	; 12
    e9fa:	61 e0       	ldi	r22, 0x01	; 1
    e9fc:	0e 94 e5 6a 	call	0xd5ca	; 0xd5ca <InserBorder.clone.0>


          cmdPrint=0b00000000;
    ea00:	10 92 94 02 	sts	0x0294, r1
		  LengthMessage81=RepPos+1;
    ea04:	80 91 b5 02 	lds	r24, 0x02B5
    ea08:	90 91 b6 02 	lds	r25, 0x02B6
    ea0c:	01 96       	adiw	r24, 0x01	; 1
    ea0e:	90 93 6c 02 	sts	0x026C, r25
    ea12:	80 93 6b 02 	sts	0x026B, r24

		  IsFreePrinting=True;
    ea16:	81 e0       	ldi	r24, 0x01	; 1
    ea18:	80 93 87 02 	sts	0x0287, r24
	      IsBusyFreePrinting=True;
    ea1c:	80 93 93 02 	sts	0x0293, r24

	      stGenerateReport=grWaitPrinted2;
    ea20:	89 e0       	ldi	r24, 0x09	; 9
    ea22:	f6 c2       	rjmp	.+1516   	; 0xf010 <systemGenerateReport+0x128a>
	      break;
     case grWaitPrinted2:
	 
          if (IsBusyFreePrinting==False)stGenerateReport=grGenerateReportData;
    ea24:	80 91 93 02 	lds	r24, 0x0293
    ea28:	88 23       	and	r24, r24
    ea2a:	09 f0       	breq	.+2      	; 0xea2e <systemGenerateReport+0xca8>
    ea2c:	f9 c2       	rjmp	.+1522   	; 0xf020 <systemGenerateReport+0x129a>
    ea2e:	86 e0       	ldi	r24, 0x06	; 6
    ea30:	ef c2       	rjmp	.+1502   	; 0xf010 <systemGenerateReport+0x128a>
	      break;
     case grCreateReportFooter:
          RepPos=0;
    ea32:	10 92 b6 02 	sts	0x02B6, r1
    ea36:	10 92 b5 02 	sts	0x02B5, r1
		  FillChar(PrintBuffer,sizeof(PrintBuffer),0);
    ea3a:	80 ed       	ldi	r24, 0xD0	; 208
    ea3c:	94 e0       	ldi	r25, 0x04	; 4
    ea3e:	61 e9       	ldi	r22, 0x91	; 145
    ea40:	71 e0       	ldi	r23, 0x01	; 1
    ea42:	40 e0       	ldi	r20, 0x00	; 0
    ea44:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>
		  FillChar(strReport,sizeof(strReport),0);
    ea48:	05 ea       	ldi	r16, 0xA5	; 165
    ea4a:	a0 2e       	mov	r10, r16
    ea4c:	b1 2c       	mov	r11, r1
    ea4e:	ac 0e       	add	r10, r28
    ea50:	bd 1e       	adc	r11, r29
    ea52:	c5 01       	movw	r24, r10
    ea54:	60 e5       	ldi	r22, 0x50	; 80
    ea56:	70 e0       	ldi	r23, 0x00	; 0
    ea58:	40 e0       	ldi	r20, 0x00	; 0
    ea5a:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>

		  RemZeroLead(strTotalMoney);
    ea5e:	1c e8       	ldi	r17, 0x8C	; 140
    ea60:	e1 2e       	mov	r14, r17
    ea62:	19 e0       	ldi	r17, 0x09	; 9
    ea64:	f1 2e       	mov	r15, r17
    ea66:	c7 01       	movw	r24, r14
    ea68:	0e 94 93 39 	call	0x7326	; 0x7326 <RemZeroLead>
		  RemZeroLead(strTotalVolume);
    ea6c:	0b ed       	ldi	r16, 0xDB	; 219
    ea6e:	18 e0       	ldi	r17, 0x08	; 8
    ea70:	c8 01       	movw	r24, r16
    ea72:	0e 94 93 39 	call	0x7326	; 0x7326 <RemZeroLead>

		  FormatTotalizerMoney(strTotalMoney);
    ea76:	c7 01       	movw	r24, r14
    ea78:	0e 94 b0 2c 	call	0x5960	; 0x5960 <FormatTotalizerMoney>
		  FormatCurrency(strTotalMoney);
    ea7c:	c7 01       	movw	r24, r14
    ea7e:	0e 94 91 56 	call	0xad22	; 0xad22 <FormatCurrency>
		  FormatTotalizerVolume(strTotalVolume);
    ea82:	c8 01       	movw	r24, r16
    ea84:	0e 94 a2 2c 	call	0x5944	; 0x5944 <FormatTotalizerVolume>
		  FormatCurrency(strTotalVolume);
    ea88:	c8 01       	movw	r24, r16
    ea8a:	0e 94 91 56 	call	0xad22	; 0xad22 <FormatCurrency>

          //Test
		  //RemZeroLead(strTotalMoney);
		  //RemZeroLead(strTotalVolume);

		  InserBorder(btTopLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btTopRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);          
    ea8e:	81 e0       	ldi	r24, 0x01	; 1
    ea90:	61 e0       	ldi	r22, 0x01	; 1
    ea92:	0e 94 e5 6a 	call	0xd5ca	; 0xd5ca <InserBorder.clone.0>
    ea96:	8b e0       	ldi	r24, 0x0B	; 11
    ea98:	6a e2       	ldi	r22, 0x2A	; 42
    ea9a:	0e 94 e5 6a 	call	0xd5ca	; 0xd5ca <InserBorder.clone.0>
    ea9e:	83 e0       	ldi	r24, 0x03	; 3
    eaa0:	61 e0       	ldi	r22, 0x01	; 1
    eaa2:	0e 94 e5 6a 	call	0xd5ca	; 0xd5ca <InserBorder.clone.0>
    eaa6:	8c e0       	ldi	r24, 0x0C	; 12
    eaa8:	61 e0       	ldi	r22, 0x01	; 1
    eaaa:	0e 94 e5 6a 	call	0xd5ca	; 0xd5ca <InserBorder.clone.0>
		  GetTabSpace((17-strlen(strTotalVolume)),strTabSpace);
    eaae:	f8 01       	movw	r30, r16
    eab0:	01 90       	ld	r0, Z+
    eab2:	00 20       	and	r0, r0
    eab4:	e9 f7       	brne	.-6      	; 0xeab0 <systemGenerateReport+0xd2a>
    eab6:	31 97       	sbiw	r30, 0x01	; 1
    eab8:	e0 1b       	sub	r30, r16
    eaba:	f1 0b       	sbc	r31, r17
    eabc:	b9 e6       	ldi	r27, 0x69	; 105
    eabe:	cb 2e       	mov	r12, r27
    eac0:	d1 2c       	mov	r13, r1
    eac2:	cc 0e       	add	r12, r28
    eac4:	dd 1e       	adc	r13, r29
    eac6:	81 e1       	ldi	r24, 0x11	; 17
    eac8:	8e 1b       	sub	r24, r30
    eaca:	b6 01       	movw	r22, r12
    eacc:	0e 94 99 69 	call	0xd332	; 0xd332 <GetTabSpace>
		  GetTabSpace((15-strlen(strTotalMoney)),strTabSpace2);
    ead0:	f7 01       	movw	r30, r14
    ead2:	01 90       	ld	r0, Z+
    ead4:	00 20       	and	r0, r0
    ead6:	e9 f7       	brne	.-6      	; 0xead2 <systemGenerateReport+0xd4c>
    ead8:	31 97       	sbiw	r30, 0x01	; 1
    eada:	ee 19       	sub	r30, r14
    eadc:	ff 09       	sbc	r31, r15
    eade:	ad e7       	ldi	r26, 0x7D	; 125
    eae0:	8a 2e       	mov	r8, r26
    eae2:	91 2c       	mov	r9, r1
    eae4:	8c 0e       	add	r8, r28
    eae6:	9d 1e       	adc	r9, r29
    eae8:	8f e0       	ldi	r24, 0x0F	; 15
    eaea:	8e 1b       	sub	r24, r30
    eaec:	b4 01       	movw	r22, r8
    eaee:	0e 94 99 69 	call	0xd332	; 0xd332 <GetTabSpace>
          //PrintMoney
		  if (eeprom_read_byte(&DefPrintMoney)==True)sprintf_P(strReport,PSTR("TOTAL %s%s%s%s"),strTabSpace,strTotalVolume,strTabSpace2,strTotalMoney);//CreateReport(strReport,PrintBuffer,&RepPos);
    eaf2:	82 ec       	ldi	r24, 0xC2	; 194
    eaf4:	93 e0       	ldi	r25, 0x03	; 3
    eaf6:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
    eafa:	81 30       	cpi	r24, 0x01	; 1
    eafc:	19 f5       	brne	.+70     	; 0xeb44 <systemGenerateReport+0xdbe>
    eafe:	8d b7       	in	r24, 0x3d	; 61
    eb00:	9e b7       	in	r25, 0x3e	; 62
    eb02:	0c 97       	sbiw	r24, 0x0c	; 12
    eb04:	0f b6       	in	r0, 0x3f	; 63
    eb06:	f8 94       	cli
    eb08:	9e bf       	out	0x3e, r25	; 62
    eb0a:	0f be       	out	0x3f, r0	; 63
    eb0c:	8d bf       	out	0x3d, r24	; 61
    eb0e:	ed b7       	in	r30, 0x3d	; 61
    eb10:	fe b7       	in	r31, 0x3e	; 62
    eb12:	31 96       	adiw	r30, 0x01	; 1
    eb14:	ad b7       	in	r26, 0x3d	; 61
    eb16:	be b7       	in	r27, 0x3e	; 62
    eb18:	12 96       	adiw	r26, 0x02	; 2
    eb1a:	bc 92       	st	X, r11
    eb1c:	ae 92       	st	-X, r10
    eb1e:	11 97       	sbiw	r26, 0x01	; 1
    eb20:	8e e4       	ldi	r24, 0x4E	; 78
    eb22:	95 e0       	ldi	r25, 0x05	; 5
    eb24:	93 83       	std	Z+3, r25	; 0x03
    eb26:	82 83       	std	Z+2, r24	; 0x02
    eb28:	d5 82       	std	Z+5, r13	; 0x05
    eb2a:	c4 82       	std	Z+4, r12	; 0x04
    eb2c:	17 83       	std	Z+7, r17	; 0x07
    eb2e:	06 83       	std	Z+6, r16	; 0x06
    eb30:	91 86       	std	Z+9, r9	; 0x09
    eb32:	80 86       	std	Z+8, r8	; 0x08
    eb34:	f3 86       	std	Z+11, r15	; 0x0b
    eb36:	e2 86       	std	Z+10, r14	; 0x0a
    eb38:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    eb3c:	ed b7       	in	r30, 0x3d	; 61
    eb3e:	fe b7       	in	r31, 0x3e	; 62
    eb40:	3c 96       	adiw	r30, 0x0c	; 12
    eb42:	1e c0       	rjmp	.+60     	; 0xeb80 <systemGenerateReport+0xdfa>
		  else sprintf_P(strReport,PSTR("TOTAL %s%s"),strTabSpace,strTotalVolume);CreateReport(strReport,PrintBuffer,&RepPos);
    eb44:	8d b7       	in	r24, 0x3d	; 61
    eb46:	9e b7       	in	r25, 0x3e	; 62
    eb48:	08 97       	sbiw	r24, 0x08	; 8
    eb4a:	0f b6       	in	r0, 0x3f	; 63
    eb4c:	f8 94       	cli
    eb4e:	9e bf       	out	0x3e, r25	; 62
    eb50:	0f be       	out	0x3f, r0	; 63
    eb52:	8d bf       	out	0x3d, r24	; 61
    eb54:	ed b7       	in	r30, 0x3d	; 61
    eb56:	fe b7       	in	r31, 0x3e	; 62
    eb58:	31 96       	adiw	r30, 0x01	; 1
    eb5a:	ad b7       	in	r26, 0x3d	; 61
    eb5c:	be b7       	in	r27, 0x3e	; 62
    eb5e:	12 96       	adiw	r26, 0x02	; 2
    eb60:	bc 92       	st	X, r11
    eb62:	ae 92       	st	-X, r10
    eb64:	11 97       	sbiw	r26, 0x01	; 1
    eb66:	83 e4       	ldi	r24, 0x43	; 67
    eb68:	95 e0       	ldi	r25, 0x05	; 5
    eb6a:	93 83       	std	Z+3, r25	; 0x03
    eb6c:	82 83       	std	Z+2, r24	; 0x02
    eb6e:	d5 82       	std	Z+5, r13	; 0x05
    eb70:	c4 82       	std	Z+4, r12	; 0x04
    eb72:	17 83       	std	Z+7, r17	; 0x07
    eb74:	06 83       	std	Z+6, r16	; 0x06
    eb76:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    eb7a:	ed b7       	in	r30, 0x3d	; 61
    eb7c:	fe b7       	in	r31, 0x3e	; 62
    eb7e:	38 96       	adiw	r30, 0x08	; 8
    eb80:	0f b6       	in	r0, 0x3f	; 63
    eb82:	f8 94       	cli
    eb84:	fe bf       	out	0x3e, r31	; 62
    eb86:	0f be       	out	0x3f, r0	; 63
    eb88:	ed bf       	out	0x3d, r30	; 61
    eb8a:	ce 01       	movw	r24, r28
    eb8c:	8b 55       	subi	r24, 0x5B	; 91
    eb8e:	9f 4f       	sbci	r25, 0xFF	; 255
    eb90:	60 ed       	ldi	r22, 0xD0	; 208
    eb92:	74 e0       	ldi	r23, 0x04	; 4
    eb94:	45 eb       	ldi	r20, 0xB5	; 181
    eb96:	52 e0       	ldi	r21, 0x02	; 2
    eb98:	0e 94 4a 6b 	call	0xd694	; 0xd694 <CreateReport>

		  InserBorder(btMiddleLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btMiddleRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);     	      
    eb9c:	84 e0       	ldi	r24, 0x04	; 4
    eb9e:	61 e0       	ldi	r22, 0x01	; 1
    eba0:	0e 94 e5 6a 	call	0xd5ca	; 0xd5ca <InserBorder.clone.0>
    eba4:	8b e0       	ldi	r24, 0x0B	; 11
    eba6:	6a e2       	ldi	r22, 0x2A	; 42
    eba8:	0e 94 e5 6a 	call	0xd5ca	; 0xd5ca <InserBorder.clone.0>
    ebac:	86 e0       	ldi	r24, 0x06	; 6
    ebae:	61 e0       	ldi	r22, 0x01	; 1
    ebb0:	0e 94 e5 6a 	call	0xd5ca	; 0xd5ca <InserBorder.clone.0>
    ebb4:	8c e0       	ldi	r24, 0x0C	; 12
    ebb6:	61 e0       	ldi	r22, 0x01	; 1
    ebb8:	0e 94 e5 6a 	call	0xd5ca	; 0xd5ca <InserBorder.clone.0>

		  for(iTotal=0;iTotal<strlen(GradeList);iTotal++){
    ebbc:	cb 50       	subi	r28, 0x0B	; 11
    ebbe:	df 4f       	sbci	r29, 0xFF	; 255
    ebc0:	18 82       	st	Y, r1
    ebc2:	c5 5f       	subi	r28, 0xF5	; 245
    ebc4:	d0 40       	sbci	r29, 0x00	; 0
							  //Found Grade
						      if (PProductID[xNozzle-1]==xGrade){

						          FillChar(strDeltaMoney,sizeof(strDeltaMoney),0);
								  FillChar(strDeltaVolume,sizeof(strDeltaVolume),0);
								  FillChar(strLastVolume,sizeof(strLastVolume),0);
    ebc6:	f9 e1       	ldi	r31, 0x19	; 25
    ebc8:	6f 2e       	mov	r6, r31
    ebca:	71 2c       	mov	r7, r1
    ebcc:	6c 0e       	add	r6, r28
    ebce:	7d 1e       	adc	r7, r29
								  FillChar(strLastMoney,sizeof(strLastMoney),0);
    ebd0:	e8 e2       	ldi	r30, 0x28	; 40
    ebd2:	2e 2e       	mov	r2, r30
    ebd4:	31 2c       	mov	r3, r1
    ebd6:	2c 0e       	add	r2, r28
    ebd8:	3d 1e       	adc	r3, r29
		  if (eeprom_read_byte(&DefPrintMoney)==True)sprintf_P(strReport,PSTR("TOTAL %s%s%s%s"),strTabSpace,strTotalVolume,strTabSpace2,strTotalMoney);//CreateReport(strReport,PrintBuffer,&RepPos);
		  else sprintf_P(strReport,PSTR("TOTAL %s%s"),strTabSpace,strTotalVolume);CreateReport(strReport,PrintBuffer,&RepPos);

		  InserBorder(btMiddleLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btMiddleRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);     	      

		  for(iTotal=0;iTotal<strlen(GradeList);iTotal++){
    ebda:	cb c1       	rjmp	.+918    	; 0xef72 <systemGenerateReport+0x11ec>
		      xGrade=Ord(GradeList[iTotal]);
    ebdc:	f5 01       	movw	r30, r10
    ebde:	e9 54       	subi	r30, 0x49	; 73
    ebe0:	fd 4f       	sbci	r31, 0xFD	; 253
    ebe2:	80 81       	ld	r24, Z
    ebe4:	0e 94 30 61 	call	0xc260	; 0xc260 <Ord>
    ebe8:	80 93 c4 02 	sts	0x02C4, r24
			  if (xGrade>0){
    ebec:	88 23       	and	r24, r24
    ebee:	09 f4       	brne	.+2      	; 0xebf2 <systemGenerateReport+0xe6c>
    ebf0:	b5 c1       	rjmp	.+874    	; 0xef5c <systemGenerateReport+0x11d6>
			      GetProductName(xGrade,strProduct);
    ebf2:	62 e4       	ldi	r22, 0x42	; 66
    ebf4:	78 e0       	ldi	r23, 0x08	; 8
    ebf6:	0e 94 3b 6a 	call	0xd476	; 0xd476 <GetProductName>
				  
				  FillChar(strTotalVolume,sizeof(strTotalVolume),0);
    ebfa:	8b ed       	ldi	r24, 0xDB	; 219
    ebfc:	98 e0       	ldi	r25, 0x08	; 8
    ebfe:	64 e1       	ldi	r22, 0x14	; 20
    ec00:	70 e0       	ldi	r23, 0x00	; 0
    ec02:	40 e0       	ldi	r20, 0x00	; 0
    ec04:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>
				  FillChar(strTotalMoney,sizeof(strTotalMoney),0);
    ec08:	8c e8       	ldi	r24, 0x8C	; 140
    ec0a:	99 e0       	ldi	r25, 0x09	; 9
    ec0c:	64 e1       	ldi	r22, 0x14	; 20
    ec0e:	70 e0       	ldi	r23, 0x00	; 0
    ec10:	40 e0       	ldi	r20, 0x00	; 0
    ec12:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>

				  for(xPump=1;xPump<=8;xPump++){
    ec16:	81 e0       	ldi	r24, 0x01	; 1
    ec18:	80 93 c6 02 	sts	0x02C6, r24
				      eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap, 8);
    ec1c:	77 e0       	ldi	r23, 0x07	; 7
    ec1e:	87 2e       	mov	r8, r23
    ec20:	91 2c       	mov	r9, r1
    ec22:	8c 0e       	add	r8, r28
    ec24:	9d 1e       	adc	r9, r29
			          PumpNum=PPumpID[xPump-1];
    ec26:	66 e0       	ldi	r22, 0x06	; 6
    ec28:	c6 2e       	mov	r12, r22
    ec2a:	d1 2c       	mov	r13, r1
    ec2c:	cc 0e       	add	r12, r28
    ec2e:	dd 1e       	adc	r13, r29
					  if (PumpNum>0){
						  for (xNozzle=1;xNozzle<=6;xNozzle++){
    ec30:	44 24       	eor	r4, r4
    ec32:	43 94       	inc	r4
			      GetProductName(xGrade,strProduct);
				  
				  FillChar(strTotalVolume,sizeof(strTotalVolume),0);
				  FillChar(strTotalMoney,sizeof(strTotalMoney),0);

				  for(xPump=1;xPump<=8;xPump++){
    ec34:	e4 c0       	rjmp	.+456    	; 0xedfe <systemGenerateReport+0x1078>
				      eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap, 8);
    ec36:	c4 01       	movw	r24, r8
    ec38:	66 e4       	ldi	r22, 0x46	; 70
    ec3a:	70 e0       	ldi	r23, 0x00	; 0
    ec3c:	48 e0       	ldi	r20, 0x08	; 8
    ec3e:	50 e0       	ldi	r21, 0x00	; 0
    ec40:	0e 94 56 aa 	call	0x154ac	; 0x154ac <__eerd_block_m128>
			          PumpNum=PPumpID[xPump-1];
    ec44:	80 91 c6 02 	lds	r24, 0x02C6
    ec48:	f6 01       	movw	r30, r12
    ec4a:	e8 0f       	add	r30, r24
    ec4c:	f1 1d       	adc	r31, r1
    ec4e:	80 81       	ld	r24, Z
    ec50:	80 93 c3 02 	sts	0x02C3, r24
					  if (PumpNum>0){
    ec54:	88 23       	and	r24, r24
    ec56:	09 f4       	brne	.+2      	; 0xec5a <systemGenerateReport+0xed4>
    ec58:	cd c0       	rjmp	.+410    	; 0xedf4 <systemGenerateReport+0x106e>
						  for (xNozzle=1;xNozzle<=6;xNozzle++){
    ec5a:	40 92 c5 02 	sts	0x02C5, r4
    ec5e:	c5 c0       	rjmp	.+394    	; 0xedea <systemGenerateReport+0x1064>
							  eeprom_read_block((void*) &PProductID, (const void*) &DefNozzleMap[xPump-1], 6);
    ec60:	80 91 c6 02 	lds	r24, 0x02C6
    ec64:	90 e0       	ldi	r25, 0x00	; 0
    ec66:	01 97       	sbiw	r24, 0x01	; 1
    ec68:	bc 01       	movw	r22, r24
    ec6a:	66 0f       	add	r22, r22
    ec6c:	77 1f       	adc	r23, r23
    ec6e:	68 0f       	add	r22, r24
    ec70:	79 1f       	adc	r23, r25
    ec72:	66 0f       	add	r22, r22
    ec74:	77 1f       	adc	r23, r23
    ec76:	6a 5a       	subi	r22, 0xAA	; 170
    ec78:	7f 4f       	sbci	r23, 0xFF	; 255
    ec7a:	ce 01       	movw	r24, r28
    ec7c:	01 96       	adiw	r24, 0x01	; 1
    ec7e:	46 e0       	ldi	r20, 0x06	; 6
    ec80:	50 e0       	ldi	r21, 0x00	; 0
    ec82:	0e 94 56 aa 	call	0x154ac	; 0x154ac <__eerd_block_m128>
							  //Found Grade
						      if (PProductID[xNozzle-1]==xGrade){
    ec86:	00 91 c5 02 	lds	r16, 0x02C5
    ec8a:	fe 01       	movw	r30, r28
    ec8c:	e0 0f       	add	r30, r16
    ec8e:	f1 1d       	adc	r31, r1
    ec90:	90 81       	ld	r25, Z
    ec92:	80 91 c4 02 	lds	r24, 0x02C4
    ec96:	98 17       	cp	r25, r24
    ec98:	09 f0       	breq	.+2      	; 0xec9c <systemGenerateReport+0xf16>
    ec9a:	a2 c0       	rjmp	.+324    	; 0xede0 <systemGenerateReport+0x105a>

						          FillChar(strDeltaMoney,sizeof(strDeltaMoney),0);
    ec9c:	86 e2       	ldi	r24, 0x26	; 38
    ec9e:	9d e0       	ldi	r25, 0x0D	; 13
    eca0:	6f e0       	ldi	r22, 0x0F	; 15
    eca2:	70 e0       	ldi	r23, 0x00	; 0
    eca4:	40 e0       	ldi	r20, 0x00	; 0
    eca6:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>
								  FillChar(strDeltaVolume,sizeof(strDeltaVolume),0);
    ecaa:	89 ee       	ldi	r24, 0xE9	; 233
    ecac:	99 e0       	ldi	r25, 0x09	; 9
    ecae:	6f e0       	ldi	r22, 0x0F	; 15
    ecb0:	70 e0       	ldi	r23, 0x00	; 0
    ecb2:	40 e0       	ldi	r20, 0x00	; 0
    ecb4:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>
								  FillChar(strLastVolume,sizeof(strLastVolume),0);
    ecb8:	c3 01       	movw	r24, r6
    ecba:	6f e0       	ldi	r22, 0x0F	; 15
    ecbc:	70 e0       	ldi	r23, 0x00	; 0
    ecbe:	40 e0       	ldi	r20, 0x00	; 0
    ecc0:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>
								  FillChar(strLastMoney,sizeof(strLastMoney),0);
    ecc4:	c1 01       	movw	r24, r2
    ecc6:	6f e0       	ldi	r22, 0x0F	; 15
    ecc8:	70 e0       	ldi	r23, 0x00	; 0
    ecca:	40 e0       	ldi	r20, 0x00	; 0
    eccc:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>
								  FillChar(strCurrentVolume,sizeof(strCurrentVolume),0);
    ecd0:	ce 01       	movw	r24, r28
    ecd2:	c7 96       	adiw	r24, 0x37	; 55
    ecd4:	6f e0       	ldi	r22, 0x0F	; 15
    ecd6:	70 e0       	ldi	r23, 0x00	; 0
    ecd8:	40 e0       	ldi	r20, 0x00	; 0
    ecda:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>
								  FillChar(strCurrentMoney,sizeof(strCurrentMoney),0);
    ecde:	ce 01       	movw	r24, r28
    ece0:	8a 5b       	subi	r24, 0xBA	; 186
    ece2:	9f 4f       	sbci	r25, 0xFF	; 255
    ece4:	6f e0       	ldi	r22, 0x0F	; 15
    ece6:	70 e0       	ldi	r23, 0x00	; 0
    ece8:	40 e0       	ldi	r20, 0x00	; 0
    ecea:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>

								  PumpNozzle=xNozzle;
    ecee:	00 93 c2 02 	sts	0x02C2, r16
								  
								  FIPAddr=GetFIPAddr(PumpNum); 
    ecf2:	80 91 c3 02 	lds	r24, 0x02C3
    ecf6:	0e 94 50 6e 	call	0xdca0	; 0xdca0 <GetFIPAddr>
								  if (FIPAddr>0){
    ecfa:	88 23       	and	r24, r24
    ecfc:	31 f1       	breq	.+76     	; 0xed4a <systemGenerateReport+0xfc4>
									  FIPAddr=FIPAddr-1;							  							  							      
    ecfe:	e8 2e       	mov	r14, r24
    ed00:	ea 94       	dec	r14
									  GetTotalizerData(TVOLUME,TOTALIZER_LAST,FIPAddr,PumpNozzle,strLastVolume);
    ed02:	80 e0       	ldi	r24, 0x00	; 0
    ed04:	60 e0       	ldi	r22, 0x00	; 0
    ed06:	4e 2d       	mov	r20, r14
    ed08:	20 91 c2 02 	lds	r18, 0x02C2
    ed0c:	83 01       	movw	r16, r6
    ed0e:	0e 94 a9 60 	call	0xc152	; 0xc152 <GetTotalizerData>
									  GetTotalizerData(TMONEY,TOTALIZER_LAST,FIPAddr,PumpNozzle,strLastMoney);
    ed12:	81 e0       	ldi	r24, 0x01	; 1
    ed14:	60 e0       	ldi	r22, 0x00	; 0
    ed16:	4e 2d       	mov	r20, r14
    ed18:	20 91 c2 02 	lds	r18, 0x02C2
    ed1c:	81 01       	movw	r16, r2
    ed1e:	0e 94 a9 60 	call	0xc152	; 0xc152 <GetTotalizerData>

									  GetTotalizerData(TVOLUME,TOTALIZER_NOW,FIPAddr,PumpNozzle,strCurrentVolume);
    ed22:	80 e0       	ldi	r24, 0x00	; 0
    ed24:	61 e0       	ldi	r22, 0x01	; 1
    ed26:	4e 2d       	mov	r20, r14
    ed28:	20 91 c2 02 	lds	r18, 0x02C2
    ed2c:	8e 01       	movw	r16, r28
    ed2e:	09 5c       	subi	r16, 0xC9	; 201
    ed30:	1f 4f       	sbci	r17, 0xFF	; 255
    ed32:	0e 94 a9 60 	call	0xc152	; 0xc152 <GetTotalizerData>
									  GetTotalizerData(TMONEY,TOTALIZER_NOW,FIPAddr,PumpNozzle,strCurrentMoney);
    ed36:	81 e0       	ldi	r24, 0x01	; 1
    ed38:	61 e0       	ldi	r22, 0x01	; 1
    ed3a:	4e 2d       	mov	r20, r14
    ed3c:	20 91 c2 02 	lds	r18, 0x02C2
    ed40:	8e 01       	movw	r16, r28
    ed42:	0a 5b       	subi	r16, 0xBA	; 186
    ed44:	1f 4f       	sbci	r17, 0xFF	; 255
    ed46:	0e 94 a9 60 	call	0xc152	; 0xc152 <GetTotalizerData>
								  }

								  StrCalc(TMINUS,strCurrentVolume,strLastVolume,strDeltaVolume);
    ed4a:	80 e0       	ldi	r24, 0x00	; 0
    ed4c:	be 01       	movw	r22, r28
    ed4e:	69 5c       	subi	r22, 0xC9	; 201
    ed50:	7f 4f       	sbci	r23, 0xFF	; 255
    ed52:	a3 01       	movw	r20, r6
    ed54:	29 ee       	ldi	r18, 0xE9	; 233
    ed56:	39 e0       	ldi	r19, 0x09	; 9
    ed58:	0e 94 1e 66 	call	0xcc3c	; 0xcc3c <StrCalc>
								  if (IsMinus(strDeltaVolume)==True)
    ed5c:	89 ee       	ldi	r24, 0xE9	; 233
    ed5e:	99 e0       	ldi	r25, 0x09	; 9
    ed60:	0e 94 ac 64 	call	0xc958	; 0xc958 <IsMinus>
    ed64:	81 30       	cpi	r24, 0x01	; 1
    ed66:	21 f4       	brne	.+8      	; 0xed70 <systemGenerateReport+0xfea>
								      NormalizeOverflow(strDeltaVolume);
    ed68:	89 ee       	ldi	r24, 0xE9	; 233
    ed6a:	99 e0       	ldi	r25, 0x09	; 9
    ed6c:	0e 94 5a 69 	call	0xd2b4	; 0xd2b4 <NormalizeOverflow>


								  //Calculate Wayne Estimated Total Money
								  if (eeprom_read_byte(&DefDispenserBrand)==ST_WAYNE_DART){
    ed70:	88 e3       	ldi	r24, 0x38	; 56
    ed72:	91 e0       	ldi	r25, 0x01	; 1
    ed74:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
    ed78:	82 30       	cpi	r24, 0x02	; 2
    ed7a:	79 f4       	brne	.+30     	; 0xed9a <systemGenerateReport+0x1014>
						              GetProductPrice(sPrice,PumpNum,PumpNozzle);//Money = Price x Volume
    ed7c:	ce 01       	movw	r24, r28
    ed7e:	0f 96       	adiw	r24, 0x0f	; 15
    ed80:	60 91 c3 02 	lds	r22, 0x02C3
    ed84:	40 91 c2 02 	lds	r20, 0x02C2
    ed88:	0e 94 ab 69 	call	0xd356	; 0xd356 <GetProductPrice>
									  StrCalc(TMULTIPLY,sPrice,strDeltaVolume,strDeltaMoney);
    ed8c:	82 e0       	ldi	r24, 0x02	; 2
    ed8e:	be 01       	movw	r22, r28
    ed90:	61 5f       	subi	r22, 0xF1	; 241
    ed92:	7f 4f       	sbci	r23, 0xFF	; 255
    ed94:	49 ee       	ldi	r20, 0xE9	; 233
    ed96:	59 e0       	ldi	r21, 0x09	; 9
    ed98:	05 c0       	rjmp	.+10     	; 0xeda4 <systemGenerateReport+0x101e>
								  }else StrCalc(TMINUS,strCurrentMoney,strLastMoney,strDeltaMoney);
    ed9a:	80 e0       	ldi	r24, 0x00	; 0
    ed9c:	be 01       	movw	r22, r28
    ed9e:	6a 5b       	subi	r22, 0xBA	; 186
    eda0:	7f 4f       	sbci	r23, 0xFF	; 255
    eda2:	a1 01       	movw	r20, r2
    eda4:	26 e2       	ldi	r18, 0x26	; 38
    eda6:	3d e0       	ldi	r19, 0x0D	; 13
    eda8:	0e 94 1e 66 	call	0xcc3c	; 0xcc3c <StrCalc>
								  //StrCalc(TMINUS,strCurrentMoney,strLastMoney,strDeltaMoney);
								  if (IsMinus(strDeltaMoney)==True)
    edac:	86 e2       	ldi	r24, 0x26	; 38
    edae:	9d e0       	ldi	r25, 0x0D	; 13
    edb0:	0e 94 ac 64 	call	0xc958	; 0xc958 <IsMinus>
    edb4:	81 30       	cpi	r24, 0x01	; 1
    edb6:	21 f4       	brne	.+8      	; 0xedc0 <systemGenerateReport+0x103a>
								      NormalizeOverflow(strDeltaMoney);
    edb8:	86 e2       	ldi	r24, 0x26	; 38
    edba:	9d e0       	ldi	r25, 0x0D	; 13
    edbc:	0e 94 5a 69 	call	0xd2b4	; 0xd2b4 <NormalizeOverflow>
		  
								  StrCalc(TPLUS,strTotalVolume,strDeltaVolume,strTotalVolume);
    edc0:	81 e0       	ldi	r24, 0x01	; 1
    edc2:	6b ed       	ldi	r22, 0xDB	; 219
    edc4:	78 e0       	ldi	r23, 0x08	; 8
    edc6:	49 ee       	ldi	r20, 0xE9	; 233
    edc8:	59 e0       	ldi	r21, 0x09	; 9
    edca:	9b 01       	movw	r18, r22
    edcc:	0e 94 1e 66 	call	0xcc3c	; 0xcc3c <StrCalc>
								  StrCalc(TPLUS,strTotalMoney,strDeltaMoney,strTotalMoney);
    edd0:	81 e0       	ldi	r24, 0x01	; 1
    edd2:	6c e8       	ldi	r22, 0x8C	; 140
    edd4:	79 e0       	ldi	r23, 0x09	; 9
    edd6:	46 e2       	ldi	r20, 0x26	; 38
    edd8:	5d e0       	ldi	r21, 0x0D	; 13
    edda:	9b 01       	movw	r18, r22
    eddc:	0e 94 1e 66 	call	0xcc3c	; 0xcc3c <StrCalc>

				  for(xPump=1;xPump<=8;xPump++){
				      eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap, 8);
			          PumpNum=PPumpID[xPump-1];
					  if (PumpNum>0){
						  for (xNozzle=1;xNozzle<=6;xNozzle++){
    ede0:	80 91 c5 02 	lds	r24, 0x02C5
    ede4:	8f 5f       	subi	r24, 0xFF	; 255
    ede6:	80 93 c5 02 	sts	0x02C5, r24
    edea:	80 91 c5 02 	lds	r24, 0x02C5
    edee:	87 30       	cpi	r24, 0x07	; 7
    edf0:	08 f4       	brcc	.+2      	; 0xedf4 <systemGenerateReport+0x106e>
    edf2:	36 cf       	rjmp	.-404    	; 0xec60 <systemGenerateReport+0xeda>
			      GetProductName(xGrade,strProduct);
				  
				  FillChar(strTotalVolume,sizeof(strTotalVolume),0);
				  FillChar(strTotalMoney,sizeof(strTotalMoney),0);

				  for(xPump=1;xPump<=8;xPump++){
    edf4:	80 91 c6 02 	lds	r24, 0x02C6
    edf8:	8f 5f       	subi	r24, 0xFF	; 255
    edfa:	80 93 c6 02 	sts	0x02C6, r24
    edfe:	80 91 c6 02 	lds	r24, 0x02C6
    ee02:	89 30       	cpi	r24, 0x09	; 9
    ee04:	08 f4       	brcc	.+2      	; 0xee08 <systemGenerateReport+0x1082>
    ee06:	17 cf       	rjmp	.-466    	; 0xec36 <systemGenerateReport+0xeb0>
							  }
						  }
					  }				  
				  }

				  RemZeroLead(strTotalMoney);
    ee08:	3c e8       	ldi	r19, 0x8C	; 140
    ee0a:	e3 2e       	mov	r14, r19
    ee0c:	39 e0       	ldi	r19, 0x09	; 9
    ee0e:	f3 2e       	mov	r15, r19
    ee10:	c7 01       	movw	r24, r14
    ee12:	0e 94 93 39 	call	0x7326	; 0x7326 <RemZeroLead>
				  RemZeroLead(strTotalVolume);
    ee16:	0b ed       	ldi	r16, 0xDB	; 219
    ee18:	18 e0       	ldi	r17, 0x08	; 8
    ee1a:	c8 01       	movw	r24, r16
    ee1c:	0e 94 93 39 	call	0x7326	; 0x7326 <RemZeroLead>

				  FormatTotalizerMoney(strTotalMoney);
    ee20:	c7 01       	movw	r24, r14
    ee22:	0e 94 b0 2c 	call	0x5960	; 0x5960 <FormatTotalizerMoney>
				  FormatCurrency(strTotalMoney);
    ee26:	c7 01       	movw	r24, r14
    ee28:	0e 94 91 56 	call	0xad22	; 0xad22 <FormatCurrency>

				  FormatTotalizerVolume(strTotalVolume);
    ee2c:	c8 01       	movw	r24, r16
    ee2e:	0e 94 a2 2c 	call	0x5944	; 0x5944 <FormatTotalizerVolume>
				  FormatCurrency(strTotalVolume);
    ee32:	c8 01       	movw	r24, r16
    ee34:	0e 94 91 56 	call	0xad22	; 0xad22 <FormatCurrency>
		          //Test
				 // RemZeroLead(strTotalMoney);
				 // RemZeroLead(strTotalVolume);


			      GetTabSpace((21-strlen(strProduct)-strlen(strTotalVolume)),strTabSpace);
    ee38:	22 e4       	ldi	r18, 0x42	; 66
    ee3a:	82 2e       	mov	r8, r18
    ee3c:	28 e0       	ldi	r18, 0x08	; 8
    ee3e:	92 2e       	mov	r9, r18
    ee40:	d4 01       	movw	r26, r8
    ee42:	0d 90       	ld	r0, X+
    ee44:	00 20       	and	r0, r0
    ee46:	e9 f7       	brne	.-6      	; 0xee42 <systemGenerateReport+0x10bc>
    ee48:	11 97       	sbiw	r26, 0x01	; 1
    ee4a:	a8 19       	sub	r26, r8
    ee4c:	b9 09       	sbc	r27, r9
    ee4e:	f8 01       	movw	r30, r16
    ee50:	01 90       	ld	r0, Z+
    ee52:	00 20       	and	r0, r0
    ee54:	e9 f7       	brne	.-6      	; 0xee50 <systemGenerateReport+0x10ca>
    ee56:	31 97       	sbiw	r30, 0x01	; 1
    ee58:	e0 1b       	sub	r30, r16
    ee5a:	f1 0b       	sbc	r31, r17
    ee5c:	8a 2f       	mov	r24, r26
    ee5e:	81 95       	neg	r24
    ee60:	8e 1b       	sub	r24, r30
    ee62:	99 e6       	ldi	r25, 0x69	; 105
    ee64:	c9 2e       	mov	r12, r25
    ee66:	d1 2c       	mov	r13, r1
    ee68:	cc 0e       	add	r12, r28
    ee6a:	dd 1e       	adc	r13, r29
    ee6c:	8b 5e       	subi	r24, 0xEB	; 235
    ee6e:	b6 01       	movw	r22, r12
    ee70:	0e 94 99 69 	call	0xd332	; 0xd332 <GetTabSpace>
			      GetTabSpace((15-strlen(strTotalMoney)),strTabSpace2);
    ee74:	f7 01       	movw	r30, r14
    ee76:	01 90       	ld	r0, Z+
    ee78:	00 20       	and	r0, r0
    ee7a:	e9 f7       	brne	.-6      	; 0xee76 <systemGenerateReport+0x10f0>
    ee7c:	31 97       	sbiw	r30, 0x01	; 1
    ee7e:	ee 19       	sub	r30, r14
    ee80:	ff 09       	sbc	r31, r15
    ee82:	8d e7       	ldi	r24, 0x7D	; 125
    ee84:	48 2e       	mov	r4, r24
    ee86:	51 2c       	mov	r5, r1
    ee88:	4c 0e       	add	r4, r28
    ee8a:	5d 1e       	adc	r5, r29
    ee8c:	8f e0       	ldi	r24, 0x0F	; 15
    ee8e:	8e 1b       	sub	r24, r30
    ee90:	b2 01       	movw	r22, r4
    ee92:	0e 94 99 69 	call	0xd332	; 0xd332 <GetTabSpace>

				  //PrintMoney
		          if (eeprom_read_byte(&DefPrintMoney)==True)sprintf_P(strReport,PSTR("%d.%s%s%s%s%s"),iTotal+1,strProduct,strTabSpace,strTotalVolume,strTabSpace2,strTotalMoney);
    ee96:	82 ec       	ldi	r24, 0xC2	; 194
    ee98:	93 e0       	ldi	r25, 0x03	; 3
    ee9a:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
    ee9e:	ae 01       	movw	r20, r28
    eea0:	4b 55       	subi	r20, 0x5B	; 91
    eea2:	5f 4f       	sbci	r21, 0xFF	; 255
    eea4:	95 01       	movw	r18, r10
    eea6:	2f 5f       	subi	r18, 0xFF	; 255
    eea8:	3f 4f       	sbci	r19, 0xFF	; 255
    eeaa:	81 30       	cpi	r24, 0x01	; 1
    eeac:	39 f5       	brne	.+78     	; 0xeefc <systemGenerateReport+0x1176>
    eeae:	8d b7       	in	r24, 0x3d	; 61
    eeb0:	9e b7       	in	r25, 0x3e	; 62
    eeb2:	40 97       	sbiw	r24, 0x10	; 16
    eeb4:	0f b6       	in	r0, 0x3f	; 63
    eeb6:	f8 94       	cli
    eeb8:	9e bf       	out	0x3e, r25	; 62
    eeba:	0f be       	out	0x3f, r0	; 63
    eebc:	8d bf       	out	0x3d, r24	; 61
    eebe:	ed b7       	in	r30, 0x3d	; 61
    eec0:	fe b7       	in	r31, 0x3e	; 62
    eec2:	31 96       	adiw	r30, 0x01	; 1
    eec4:	ad b7       	in	r26, 0x3d	; 61
    eec6:	be b7       	in	r27, 0x3e	; 62
    eec8:	12 96       	adiw	r26, 0x02	; 2
    eeca:	5c 93       	st	X, r21
    eecc:	4e 93       	st	-X, r20
    eece:	11 97       	sbiw	r26, 0x01	; 1
    eed0:	85 e3       	ldi	r24, 0x35	; 53
    eed2:	95 e0       	ldi	r25, 0x05	; 5
    eed4:	93 83       	std	Z+3, r25	; 0x03
    eed6:	82 83       	std	Z+2, r24	; 0x02
    eed8:	35 83       	std	Z+5, r19	; 0x05
    eeda:	24 83       	std	Z+4, r18	; 0x04
    eedc:	97 82       	std	Z+7, r9	; 0x07
    eede:	86 82       	std	Z+6, r8	; 0x06
    eee0:	d1 86       	std	Z+9, r13	; 0x09
    eee2:	c0 86       	std	Z+8, r12	; 0x08
    eee4:	13 87       	std	Z+11, r17	; 0x0b
    eee6:	02 87       	std	Z+10, r16	; 0x0a
    eee8:	55 86       	std	Z+13, r5	; 0x0d
    eeea:	44 86       	std	Z+12, r4	; 0x0c
    eeec:	f7 86       	std	Z+15, r15	; 0x0f
    eeee:	e6 86       	std	Z+14, r14	; 0x0e
    eef0:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    eef4:	ed b7       	in	r30, 0x3d	; 61
    eef6:	fe b7       	in	r31, 0x3e	; 62
    eef8:	70 96       	adiw	r30, 0x10	; 16
    eefa:	22 c0       	rjmp	.+68     	; 0xef40 <systemGenerateReport+0x11ba>
				  else sprintf_P(strReport,PSTR("%d.%s%s%s"),iTotal+1,strProduct,strTabSpace,strTotalVolume);
    eefc:	8d b7       	in	r24, 0x3d	; 61
    eefe:	9e b7       	in	r25, 0x3e	; 62
    ef00:	0c 97       	sbiw	r24, 0x0c	; 12
    ef02:	0f b6       	in	r0, 0x3f	; 63
    ef04:	f8 94       	cli
    ef06:	9e bf       	out	0x3e, r25	; 62
    ef08:	0f be       	out	0x3f, r0	; 63
    ef0a:	8d bf       	out	0x3d, r24	; 61
    ef0c:	ed b7       	in	r30, 0x3d	; 61
    ef0e:	fe b7       	in	r31, 0x3e	; 62
    ef10:	31 96       	adiw	r30, 0x01	; 1
    ef12:	ad b7       	in	r26, 0x3d	; 61
    ef14:	be b7       	in	r27, 0x3e	; 62
    ef16:	12 96       	adiw	r26, 0x02	; 2
    ef18:	5c 93       	st	X, r21
    ef1a:	4e 93       	st	-X, r20
    ef1c:	11 97       	sbiw	r26, 0x01	; 1
    ef1e:	8b e2       	ldi	r24, 0x2B	; 43
    ef20:	95 e0       	ldi	r25, 0x05	; 5
    ef22:	93 83       	std	Z+3, r25	; 0x03
    ef24:	82 83       	std	Z+2, r24	; 0x02
    ef26:	35 83       	std	Z+5, r19	; 0x05
    ef28:	24 83       	std	Z+4, r18	; 0x04
    ef2a:	97 82       	std	Z+7, r9	; 0x07
    ef2c:	86 82       	std	Z+6, r8	; 0x06
    ef2e:	d1 86       	std	Z+9, r13	; 0x09
    ef30:	c0 86       	std	Z+8, r12	; 0x08
    ef32:	13 87       	std	Z+11, r17	; 0x0b
    ef34:	02 87       	std	Z+10, r16	; 0x0a
    ef36:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    ef3a:	ed b7       	in	r30, 0x3d	; 61
    ef3c:	fe b7       	in	r31, 0x3e	; 62
    ef3e:	3c 96       	adiw	r30, 0x0c	; 12
    ef40:	0f b6       	in	r0, 0x3f	; 63
    ef42:	f8 94       	cli
    ef44:	fe bf       	out	0x3e, r31	; 62
    ef46:	0f be       	out	0x3f, r0	; 63
    ef48:	ed bf       	out	0x3d, r30	; 61

				  CreateReport(strReport,PrintBuffer,&RepPos);
    ef4a:	ce 01       	movw	r24, r28
    ef4c:	8b 55       	subi	r24, 0x5B	; 91
    ef4e:	9f 4f       	sbci	r25, 0xFF	; 255
    ef50:	60 ed       	ldi	r22, 0xD0	; 208
    ef52:	74 e0       	ldi	r23, 0x04	; 4
    ef54:	45 eb       	ldi	r20, 0xB5	; 181
    ef56:	52 e0       	ldi	r21, 0x02	; 2
    ef58:	0e 94 4a 6b 	call	0xd694	; 0xd694 <CreateReport>
		  if (eeprom_read_byte(&DefPrintMoney)==True)sprintf_P(strReport,PSTR("TOTAL %s%s%s%s"),strTabSpace,strTotalVolume,strTabSpace2,strTotalMoney);//CreateReport(strReport,PrintBuffer,&RepPos);
		  else sprintf_P(strReport,PSTR("TOTAL %s%s"),strTabSpace,strTotalVolume);CreateReport(strReport,PrintBuffer,&RepPos);

		  InserBorder(btMiddleLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btMiddleRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);     	      

		  for(iTotal=0;iTotal<strlen(GradeList);iTotal++){
    ef5c:	cb 50       	subi	r28, 0x0B	; 11
    ef5e:	df 4f       	sbci	r29, 0xFF	; 255
    ef60:	f8 81       	ld	r31, Y
    ef62:	c5 5f       	subi	r28, 0xF5	; 245
    ef64:	d0 40       	sbci	r29, 0x00	; 0
    ef66:	ff 5f       	subi	r31, 0xFF	; 255
    ef68:	cb 50       	subi	r28, 0x0B	; 11
    ef6a:	df 4f       	sbci	r29, 0xFF	; 255
    ef6c:	f8 83       	st	Y, r31
    ef6e:	c5 5f       	subi	r28, 0xF5	; 245
    ef70:	d0 40       	sbci	r29, 0x00	; 0
    ef72:	e7 eb       	ldi	r30, 0xB7	; 183
    ef74:	f2 e0       	ldi	r31, 0x02	; 2
    ef76:	01 90       	ld	r0, Z+
    ef78:	00 20       	and	r0, r0
    ef7a:	e9 f7       	brne	.-6      	; 0xef76 <systemGenerateReport+0x11f0>
    ef7c:	31 97       	sbiw	r30, 0x01	; 1
    ef7e:	e7 5b       	subi	r30, 0xB7	; 183
    ef80:	f2 40       	sbci	r31, 0x02	; 2
    ef82:	cb 50       	subi	r28, 0x0B	; 11
    ef84:	df 4f       	sbci	r29, 0xFF	; 255
    ef86:	88 81       	ld	r24, Y
    ef88:	c5 5f       	subi	r28, 0xF5	; 245
    ef8a:	d0 40       	sbci	r29, 0x00	; 0
    ef8c:	a8 2e       	mov	r10, r24
    ef8e:	bb 24       	eor	r11, r11
    ef90:	ae 16       	cp	r10, r30
    ef92:	bf 06       	cpc	r11, r31
    ef94:	08 f4       	brcc	.+2      	; 0xef98 <systemGenerateReport+0x1212>
    ef96:	22 ce       	rjmp	.-956    	; 0xebdc <systemGenerateReport+0xe56>
				  else sprintf_P(strReport,PSTR("%d.%s%s%s"),iTotal+1,strProduct,strTabSpace,strTotalVolume);

				  CreateReport(strReport,PrintBuffer,&RepPos);
               }
		  }
          InserBorder(btBottomLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btBottomRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);
    ef98:	87 e0       	ldi	r24, 0x07	; 7
    ef9a:	61 e0       	ldi	r22, 0x01	; 1
    ef9c:	0e 94 e5 6a 	call	0xd5ca	; 0xd5ca <InserBorder.clone.0>
    efa0:	8b e0       	ldi	r24, 0x0B	; 11
    efa2:	6a e2       	ldi	r22, 0x2A	; 42
    efa4:	0e 94 e5 6a 	call	0xd5ca	; 0xd5ca <InserBorder.clone.0>
    efa8:	89 e0       	ldi	r24, 0x09	; 9
    efaa:	61 e0       	ldi	r22, 0x01	; 1
    efac:	0e 94 e5 6a 	call	0xd5ca	; 0xd5ca <InserBorder.clone.0>
    efb0:	8c e0       	ldi	r24, 0x0C	; 12
    efb2:	61 e0       	ldi	r22, 0x01	; 1
    efb4:	0e 94 e5 6a 	call	0xd5ca	; 0xd5ca <InserBorder.clone.0>
		  InserBorder(btNewLine,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);
    efb8:	8c e0       	ldi	r24, 0x0C	; 12
    efba:	61 e0       	ldi	r22, 0x01	; 1
    efbc:	0e 94 e5 6a 	call	0xd5ca	; 0xd5ca <InserBorder.clone.0>
    efc0:	8c e0       	ldi	r24, 0x0C	; 12
    efc2:	61 e0       	ldi	r22, 0x01	; 1
    efc4:	0e 94 e5 6a 	call	0xd5ca	; 0xd5ca <InserBorder.clone.0>
    efc8:	8c e0       	ldi	r24, 0x0C	; 12
    efca:	61 e0       	ldi	r22, 0x01	; 1
    efcc:	0e 94 e5 6a 	call	0xd5ca	; 0xd5ca <InserBorder.clone.0>
    efd0:	8c e0       	ldi	r24, 0x0C	; 12
    efd2:	61 e0       	ldi	r22, 0x01	; 1
    efd4:	0e 94 e5 6a 	call	0xd5ca	; 0xd5ca <InserBorder.clone.0>
    efd8:	8c e0       	ldi	r24, 0x0C	; 12
    efda:	61 e0       	ldi	r22, 0x01	; 1
    efdc:	0e 94 e5 6a 	call	0xd5ca	; 0xd5ca <InserBorder.clone.0>


          cmdPrint=0b00010000|(1<<PRN_PAPER_CUT);
    efe0:	80 e3       	ldi	r24, 0x30	; 48
    efe2:	80 93 94 02 	sts	0x0294, r24
		  LengthMessage81=RepPos+1;
    efe6:	80 91 b5 02 	lds	r24, 0x02B5
    efea:	90 91 b6 02 	lds	r25, 0x02B6
    efee:	01 96       	adiw	r24, 0x01	; 1
    eff0:	90 93 6c 02 	sts	0x026C, r25
    eff4:	80 93 6b 02 	sts	0x026B, r24
		  IsFreePrinting=True;
    eff8:	81 e0       	ldi	r24, 0x01	; 1
    effa:	80 93 87 02 	sts	0x0287, r24
	      IsBusyFreePrinting=True; 
    effe:	80 93 93 02 	sts	0x0293, r24
         	       
	      stGenerateReport=grWaitPrinted3;
    f002:	8b e0       	ldi	r24, 0x0B	; 11
    f004:	05 c0       	rjmp	.+10     	; 0xf010 <systemGenerateReport+0x128a>
	      break;
     case grWaitPrinted3:
          if (IsBusyFreePrinting==False)stGenerateReport=grFinishGenerateReport;
    f006:	80 91 93 02 	lds	r24, 0x0293
    f00a:	88 23       	and	r24, r24
    f00c:	49 f4       	brne	.+18     	; 0xf020 <systemGenerateReport+0x129a>
    f00e:	8c e0       	ldi	r24, 0x0C	; 12
    f010:	80 93 c7 02 	sts	0x02C7, r24
    f014:	05 c0       	rjmp	.+10     	; 0xf020 <systemGenerateReport+0x129a>
	      break;
     case grFinishGenerateReport:
	      IsFinishPrintingTotalizer=True;
    f016:	81 e0       	ldi	r24, 0x01	; 1
    f018:	80 93 65 02 	sts	0x0265, r24
          stGenerateReport=grScanAction;
    f01c:	10 92 c7 02 	sts	0x02C7, r1
	      break;
	 }
}
    f020:	cb 50       	subi	r28, 0x0B	; 11
    f022:	df 4f       	sbci	r29, 0xFF	; 255
    f024:	0f b6       	in	r0, 0x3f	; 63
    f026:	f8 94       	cli
    f028:	de bf       	out	0x3e, r29	; 62
    f02a:	0f be       	out	0x3f, r0	; 63
    f02c:	cd bf       	out	0x3d, r28	; 61
    f02e:	cf 91       	pop	r28
    f030:	df 91       	pop	r29
    f032:	1f 91       	pop	r17
    f034:	0f 91       	pop	r16
    f036:	ff 90       	pop	r15
    f038:	ef 90       	pop	r14
    f03a:	df 90       	pop	r13
    f03c:	cf 90       	pop	r12
    f03e:	bf 90       	pop	r11
    f040:	af 90       	pop	r10
    f042:	9f 90       	pop	r9
    f044:	8f 90       	pop	r8
    f046:	7f 90       	pop	r7
    f048:	6f 90       	pop	r6
    f04a:	5f 90       	pop	r5
    f04c:	4f 90       	pop	r4
    f04e:	3f 90       	pop	r3
    f050:	2f 90       	pop	r2
    f052:	08 95       	ret

0000f054 <SaveTotalizerCurrentToLast>:
	 }Dest[12]=0;
}

//SetTotalizerData(TVOLUME,TOTALIZER_NOW,1,1,strVolume)

void SaveTotalizerCurrentToLast(){
    f054:	bf 92       	push	r11
    f056:	cf 92       	push	r12
    f058:	df 92       	push	r13
    f05a:	ef 92       	push	r14
    f05c:	ff 92       	push	r15
    f05e:	0f 93       	push	r16
    f060:	1f 93       	push	r17
    f062:	df 93       	push	r29
    f064:	cf 93       	push	r28
    f066:	cd b7       	in	r28, 0x3d	; 61
    f068:	de b7       	in	r29, 0x3e	; 62
    f06a:	2f 97       	sbiw	r28, 0x0f	; 15
    f06c:	0f b6       	in	r0, 0x3f	; 63
    f06e:	f8 94       	cli
    f070:	de bf       	out	0x3e, r29	; 62
    f072:	0f be       	out	0x3f, r0	; 63
    f074:	cd bf       	out	0x3d, r28	; 61
     char iPump,iGrade;
     char strValue[15];
     char FIPAddr;
	 
	 for (iPump=1;iPump<=16;iPump++){//Pump
    f076:	bb 24       	eor	r11, r11
    f078:	b3 94       	inc	r11
	      FIPAddr=GetFIPAddr(iPump);
		  if (FIPAddr>0){
		      FIPAddr=FIPAddr-1;
			  for(iGrade=1;iGrade<=6;iGrade++){
				  FillChar(strValue,sizeof(strValue),0);
    f07a:	7e 01       	movw	r14, r28
    f07c:	08 94       	sec
    f07e:	e1 1c       	adc	r14, r1
    f080:	f1 1c       	adc	r15, r1
     char iPump,iGrade;
     char strValue[15];
     char FIPAddr;
	 
	 for (iPump=1;iPump<=16;iPump++){//Pump
	      FIPAddr=GetFIPAddr(iPump);
    f082:	8b 2d       	mov	r24, r11
    f084:	0e 94 50 6e 	call	0xdca0	; 0xdca0 <GetFIPAddr>
		  if (FIPAddr>0){
    f088:	88 23       	and	r24, r24
    f08a:	69 f1       	breq	.+90     	; 0xf0e6 <SaveTotalizerCurrentToLast+0x92>
		      FIPAddr=FIPAddr-1;
    f08c:	c8 2e       	mov	r12, r24
    f08e:	ca 94       	dec	r12
			  for(iGrade=1;iGrade<=6;iGrade++){
    f090:	dd 24       	eor	r13, r13
    f092:	d3 94       	inc	r13
				  FillChar(strValue,sizeof(strValue),0);
    f094:	c7 01       	movw	r24, r14
    f096:	6f e0       	ldi	r22, 0x0F	; 15
    f098:	70 e0       	ldi	r23, 0x00	; 0
    f09a:	40 e0       	ldi	r20, 0x00	; 0
    f09c:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>
				  GetTotalizerData(TVOLUME,TOTALIZER_NOW,FIPAddr,iGrade,strValue);
    f0a0:	80 e0       	ldi	r24, 0x00	; 0
    f0a2:	61 e0       	ldi	r22, 0x01	; 1
    f0a4:	4c 2d       	mov	r20, r12
    f0a6:	2d 2d       	mov	r18, r13
    f0a8:	87 01       	movw	r16, r14
    f0aa:	0e 94 a9 60 	call	0xc152	; 0xc152 <GetTotalizerData>
				  SetTotalizerData(TVOLUME,TOTALIZER_LAST,FIPAddr,iGrade,strValue);
    f0ae:	80 e0       	ldi	r24, 0x00	; 0
    f0b0:	60 e0       	ldi	r22, 0x00	; 0
    f0b2:	4c 2d       	mov	r20, r12
    f0b4:	2d 2d       	mov	r18, r13
    f0b6:	0e 94 6b 61 	call	0xc2d6	; 0xc2d6 <SetTotalizerData>
				  FillChar(strValue,sizeof(strValue),0);
    f0ba:	c7 01       	movw	r24, r14
    f0bc:	6f e0       	ldi	r22, 0x0F	; 15
    f0be:	70 e0       	ldi	r23, 0x00	; 0
    f0c0:	40 e0       	ldi	r20, 0x00	; 0
    f0c2:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>
				  GetTotalizerData(TMONEY,TOTALIZER_NOW,FIPAddr,iGrade,strValue);
    f0c6:	81 e0       	ldi	r24, 0x01	; 1
    f0c8:	61 e0       	ldi	r22, 0x01	; 1
    f0ca:	4c 2d       	mov	r20, r12
    f0cc:	2d 2d       	mov	r18, r13
    f0ce:	0e 94 a9 60 	call	0xc152	; 0xc152 <GetTotalizerData>
				  SetTotalizerData(TMONEY,TOTALIZER_LAST,FIPAddr,iGrade,strValue);
    f0d2:	81 e0       	ldi	r24, 0x01	; 1
    f0d4:	60 e0       	ldi	r22, 0x00	; 0
    f0d6:	4c 2d       	mov	r20, r12
    f0d8:	2d 2d       	mov	r18, r13
    f0da:	0e 94 6b 61 	call	0xc2d6	; 0xc2d6 <SetTotalizerData>
	 
	 for (iPump=1;iPump<=16;iPump++){//Pump
	      FIPAddr=GetFIPAddr(iPump);
		  if (FIPAddr>0){
		      FIPAddr=FIPAddr-1;
			  for(iGrade=1;iGrade<=6;iGrade++){
    f0de:	d3 94       	inc	r13
    f0e0:	8d 2d       	mov	r24, r13
    f0e2:	87 30       	cpi	r24, 0x07	; 7
    f0e4:	b9 f6       	brne	.-82     	; 0xf094 <SaveTotalizerCurrentToLast+0x40>
void SaveTotalizerCurrentToLast(){
     char iPump,iGrade;
     char strValue[15];
     char FIPAddr;
	 
	 for (iPump=1;iPump<=16;iPump++){//Pump
    f0e6:	b3 94       	inc	r11
    f0e8:	8b 2d       	mov	r24, r11
    f0ea:	81 31       	cpi	r24, 0x11	; 17
    f0ec:	51 f6       	brne	.-108    	; 0xf082 <SaveTotalizerCurrentToLast+0x2e>
				  GetTotalizerData(TMONEY,TOTALIZER_NOW,FIPAddr,iGrade,strValue);
				  SetTotalizerData(TMONEY,TOTALIZER_LAST,FIPAddr,iGrade,strValue);
			  }
		  }
	 }
}
    f0ee:	2f 96       	adiw	r28, 0x0f	; 15
    f0f0:	0f b6       	in	r0, 0x3f	; 63
    f0f2:	f8 94       	cli
    f0f4:	de bf       	out	0x3e, r29	; 62
    f0f6:	0f be       	out	0x3f, r0	; 63
    f0f8:	cd bf       	out	0x3d, r28	; 61
    f0fa:	cf 91       	pop	r28
    f0fc:	df 91       	pop	r29
    f0fe:	1f 91       	pop	r17
    f100:	0f 91       	pop	r16
    f102:	ff 90       	pop	r15
    f104:	ef 90       	pop	r14
    f106:	df 90       	pop	r13
    f108:	cf 90       	pop	r12
    f10a:	bf 90       	pop	r11
    f10c:	08 95       	ret

0000f10e <ResetTotalizer>:
}

//-------------------Totalizer-----------------------------------------
//TAddr{TOTALIZER_LAST,TOTALIZER_NOW}
//TType:{TNONE,TVOLUME,TMONEY};
void ResetTotalizer(char TAddr){//Clear All TotalizerData;
    f10e:	af 92       	push	r10
    f110:	bf 92       	push	r11
    f112:	cf 92       	push	r12
    f114:	df 92       	push	r13
    f116:	ef 92       	push	r14
    f118:	ff 92       	push	r15
    f11a:	0f 93       	push	r16
    f11c:	1f 93       	push	r17
    f11e:	df 93       	push	r29
    f120:	cf 93       	push	r28
    f122:	cd b7       	in	r28, 0x3d	; 61
    f124:	de b7       	in	r29, 0x3e	; 62
    f126:	29 97       	sbiw	r28, 0x09	; 9
    f128:	0f b6       	in	r0, 0x3f	; 63
    f12a:	f8 94       	cli
    f12c:	de bf       	out	0x3e, r29	; 62
    f12e:	0f be       	out	0x3f, r0	; 63
    f130:	cd bf       	out	0x3d, r28	; 61
    f132:	d8 2e       	mov	r13, r24
     char iPump,iGrade;
     char strValue[9];
	 char FIPAddr;
	 
	 sprintf_P(strValue,PSTR("00000000"));
    f134:	00 d0       	rcall	.+0      	; 0xf136 <ResetTotalizer+0x28>
    f136:	00 d0       	rcall	.+0      	; 0xf138 <ResetTotalizer+0x2a>
    f138:	7e 01       	movw	r14, r28
    f13a:	08 94       	sec
    f13c:	e1 1c       	adc	r14, r1
    f13e:	f1 1c       	adc	r15, r1
    f140:	ed b7       	in	r30, 0x3d	; 61
    f142:	fe b7       	in	r31, 0x3e	; 62
    f144:	f2 82       	std	Z+2, r15	; 0x02
    f146:	e1 82       	std	Z+1, r14	; 0x01
    f148:	25 ee       	ldi	r18, 0xE5	; 229
    f14a:	36 e0       	ldi	r19, 0x06	; 6
    f14c:	34 83       	std	Z+4, r19	; 0x04
    f14e:	23 83       	std	Z+3, r18	; 0x03
    f150:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    f154:	0f 90       	pop	r0
    f156:	0f 90       	pop	r0
    f158:	0f 90       	pop	r0
    f15a:	0f 90       	pop	r0
	 for (iPump=1;iPump<=16;iPump++){//Pump
    f15c:	bb 24       	eor	r11, r11
    f15e:	b3 94       	inc	r11
	      FIPAddr=GetFIPAddr(iPump);
    f160:	8b 2d       	mov	r24, r11
    f162:	0e 94 50 6e 	call	0xdca0	; 0xdca0 <GetFIPAddr>
		  if (FIPAddr>0){
    f166:	88 23       	and	r24, r24
    f168:	a9 f0       	breq	.+42     	; 0xf194 <ResetTotalizer+0x86>
		      FIPAddr=FIPAddr-1;
    f16a:	a8 2e       	mov	r10, r24
    f16c:	aa 94       	dec	r10
			  for(iGrade=1;iGrade<=6;iGrade++){
    f16e:	cc 24       	eor	r12, r12
    f170:	c3 94       	inc	r12
				  SetTotalizerData(TVOLUME,TAddr,FIPAddr,iGrade,strValue);
    f172:	80 e0       	ldi	r24, 0x00	; 0
    f174:	6d 2d       	mov	r22, r13
    f176:	4a 2d       	mov	r20, r10
    f178:	2c 2d       	mov	r18, r12
    f17a:	87 01       	movw	r16, r14
    f17c:	0e 94 6b 61 	call	0xc2d6	; 0xc2d6 <SetTotalizerData>
				  SetTotalizerData(TMONEY,TAddr,FIPAddr,iGrade,strValue);
    f180:	81 e0       	ldi	r24, 0x01	; 1
    f182:	6d 2d       	mov	r22, r13
    f184:	4a 2d       	mov	r20, r10
    f186:	2c 2d       	mov	r18, r12
    f188:	0e 94 6b 61 	call	0xc2d6	; 0xc2d6 <SetTotalizerData>
	 sprintf_P(strValue,PSTR("00000000"));
	 for (iPump=1;iPump<=16;iPump++){//Pump
	      FIPAddr=GetFIPAddr(iPump);
		  if (FIPAddr>0){
		      FIPAddr=FIPAddr-1;
			  for(iGrade=1;iGrade<=6;iGrade++){
    f18c:	c3 94       	inc	r12
    f18e:	fc 2d       	mov	r31, r12
    f190:	f7 30       	cpi	r31, 0x07	; 7
    f192:	79 f7       	brne	.-34     	; 0xf172 <ResetTotalizer+0x64>
     char iPump,iGrade;
     char strValue[9];
	 char FIPAddr;
	 
	 sprintf_P(strValue,PSTR("00000000"));
	 for (iPump=1;iPump<=16;iPump++){//Pump
    f194:	b3 94       	inc	r11
    f196:	8b 2d       	mov	r24, r11
    f198:	81 31       	cpi	r24, 0x11	; 17
    f19a:	11 f7       	brne	.-60     	; 0xf160 <ResetTotalizer+0x52>
				  SetTotalizerData(TVOLUME,TAddr,FIPAddr,iGrade,strValue);
				  SetTotalizerData(TMONEY,TAddr,FIPAddr,iGrade,strValue);
			  }
		  }
	 }
}
    f19c:	29 96       	adiw	r28, 0x09	; 9
    f19e:	0f b6       	in	r0, 0x3f	; 63
    f1a0:	f8 94       	cli
    f1a2:	de bf       	out	0x3e, r29	; 62
    f1a4:	0f be       	out	0x3f, r0	; 63
    f1a6:	cd bf       	out	0x3d, r28	; 61
    f1a8:	cf 91       	pop	r28
    f1aa:	df 91       	pop	r29
    f1ac:	1f 91       	pop	r17
    f1ae:	0f 91       	pop	r16
    f1b0:	ff 90       	pop	r15
    f1b2:	ef 90       	pop	r14
    f1b4:	df 90       	pop	r13
    f1b6:	cf 90       	pop	r12
    f1b8:	bf 90       	pop	r11
    f1ba:	af 90       	pop	r10
    f1bc:	08 95       	ret

0000f1be <FMenuLocalAccount>:
	 PORTG=PORTG&0b11111101;
}

#define MENU_TIMEOUT 50

char FMenuLocalAccount(){
    f1be:	7f 92       	push	r7
    f1c0:	8f 92       	push	r8
    f1c2:	9f 92       	push	r9
    f1c4:	af 92       	push	r10
    f1c6:	bf 92       	push	r11
    f1c8:	cf 92       	push	r12
    f1ca:	df 92       	push	r13
    f1cc:	ef 92       	push	r14
    f1ce:	ff 92       	push	r15
    f1d0:	0f 93       	push	r16
    f1d2:	1f 93       	push	r17
    f1d4:	df 93       	push	r29
    f1d6:	cf 93       	push	r28
    f1d8:	cd b7       	in	r28, 0x3d	; 61
    f1da:	de b7       	in	r29, 0x3e	; 62
    f1dc:	e4 97       	sbiw	r28, 0x34	; 52
    f1de:	0f b6       	in	r0, 0x3f	; 63
    f1e0:	f8 94       	cli
    f1e2:	de bf       	out	0x3e, r29	; 62
    f1e4:	0f be       	out	0x3f, r0	; 63
    f1e6:	cd bf       	out	0x3d, r28	; 61
       char KeyPressed=0,KeyChar=0;
       char lcdteks[20],uiResult,FIPResult;
       char ProductName[11],strName[21];//,strPumpL[3],strPumpR[3];
       char Result;

       if ((IsCardTransaction==True)&&(TimMenuTimeout>MENU_TIMEOUT)){
    f1e8:	80 91 77 02 	lds	r24, 0x0277
    f1ec:	81 30       	cpi	r24, 0x01	; 1
    f1ee:	e1 f4       	brne	.+56     	; 0xf228 <FMenuLocalAccount+0x6a>
    f1f0:	80 91 96 03 	lds	r24, 0x0396
    f1f4:	90 91 97 03 	lds	r25, 0x0397
    f1f8:	83 33       	cpi	r24, 0x33	; 51
    f1fa:	91 05       	cpc	r25, r1
    f1fc:	ac f0       	brlt	.+42     	; 0xf228 <FMenuLocalAccount+0x6a>
            lcd_printf(3,1,PSTR("Timeout     ")); 
    f1fe:	83 e0       	ldi	r24, 0x03	; 3
    f200:	61 e0       	ldi	r22, 0x01	; 1
    f202:	45 ea       	ldi	r20, 0xA5	; 165
    f204:	52 e2       	ldi	r21, 0x22	; 34
    f206:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
			TimMenuTimeout=0;
    f20a:	10 92 97 03 	sts	0x0397, r1
    f20e:	10 92 96 03 	sts	0x0396, r1
			TimLocAcc=0;
    f212:	10 92 99 02 	sts	0x0299, r1
			system_beep(2);
    f216:	82 e0       	ldi	r24, 0x02	; 2
    f218:	90 e0       	ldi	r25, 0x00	; 0
    f21a:	0e 94 ee 14 	call	0x29dc	; 0x29dc <system_beep>
			IsCardTransaction=False;
    f21e:	10 92 77 02 	sts	0x0277, r1
			stLocalAccount=laDelayExit;
    f222:	8e e1       	ldi	r24, 0x1E	; 30
    f224:	80 93 5b 01 	sts	0x015B, r24
	   }

	   Result=MENU_NONE;
	                                 //|   Local Account   |          
	       switch(stLocalAccount){   //|ID: ACD12345       |
    f228:	80 91 5b 01 	lds	r24, 0x015B
    f22c:	90 e0       	ldi	r25, 0x00	; 0
    f22e:	01 97       	sbiw	r24, 0x01	; 1
    f230:	8f 31       	cpi	r24, 0x1F	; 31
    f232:	91 05       	cpc	r25, r1
    f234:	10 f0       	brcs	.+4      	; 0xf23a <FMenuLocalAccount+0x7c>
    f236:	0c 94 7a 81 	jmp	0x102f4	; 0x102f4 <FMenuLocalAccount+0x1136>
    f23a:	8e 56       	subi	r24, 0x6E	; 110
    f23c:	9f 4f       	sbci	r25, 0xFF	; 255
    f23e:	fc 01       	movw	r30, r24
    f240:	ee 0f       	add	r30, r30
    f242:	ff 1f       	adc	r31, r31
    f244:	05 90       	lpm	r0, Z+
    f246:	f4 91       	lpm	r31, Z+
    f248:	e0 2d       	mov	r30, r0
    f24a:	09 94       	ijmp
	       case laInit:              //|Process ...        |
		        //Process RFID Data  //|                   |
				//UpdateCardID();
                BackLightTrig();ViewCardID();
    f24c:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <BackLightTrig>
    f250:	0e 94 10 16 	call	0x2c20	; 0x2c20 <ViewCardID>
	            lcd_clear();
    f254:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
	            lcd_printf(1,1,PSTR("   Local Account   "));
    f258:	81 e0       	ldi	r24, 0x01	; 1
    f25a:	61 e0       	ldi	r22, 0x01	; 1
    f25c:	41 e9       	ldi	r20, 0x91	; 145
    f25e:	52 e2       	ldi	r21, 0x22	; 34
    f260:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
	            sprintf_P(lcdteks,PSTR("ID:%s"),strCardID);lcd_print(2,1,lcdteks);
    f264:	00 d0       	rcall	.+0      	; 0xf266 <FMenuLocalAccount+0xa8>
    f266:	00 d0       	rcall	.+0      	; 0xf268 <FMenuLocalAccount+0xaa>
    f268:	00 d0       	rcall	.+0      	; 0xf26a <FMenuLocalAccount+0xac>
    f26a:	ed b7       	in	r30, 0x3d	; 61
    f26c:	fe b7       	in	r31, 0x3e	; 62
    f26e:	31 96       	adiw	r30, 0x01	; 1
    f270:	8e 01       	movw	r16, r28
    f272:	04 5f       	subi	r16, 0xF4	; 244
    f274:	1f 4f       	sbci	r17, 0xFF	; 255
    f276:	ad b7       	in	r26, 0x3d	; 61
    f278:	be b7       	in	r27, 0x3e	; 62
    f27a:	12 96       	adiw	r26, 0x02	; 2
    f27c:	1c 93       	st	X, r17
    f27e:	0e 93       	st	-X, r16
    f280:	11 97       	sbiw	r26, 0x01	; 1
    f282:	8b e8       	ldi	r24, 0x8B	; 139
    f284:	92 e2       	ldi	r25, 0x22	; 34
    f286:	93 83       	std	Z+3, r25	; 0x03
    f288:	82 83       	std	Z+2, r24	; 0x02
    f28a:	8d e6       	ldi	r24, 0x6D	; 109
    f28c:	9c e0       	ldi	r25, 0x0C	; 12
    f28e:	95 83       	std	Z+5, r25	; 0x05
    f290:	84 83       	std	Z+4, r24	; 0x04
    f292:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    f296:	ed b7       	in	r30, 0x3d	; 61
    f298:	fe b7       	in	r31, 0x3e	; 62
    f29a:	36 96       	adiw	r30, 0x06	; 6
    f29c:	0f b6       	in	r0, 0x3f	; 63
    f29e:	f8 94       	cli
    f2a0:	fe bf       	out	0x3e, r31	; 62
    f2a2:	0f be       	out	0x3f, r0	; 63
    f2a4:	ed bf       	out	0x3d, r30	; 61
    f2a6:	82 e0       	ldi	r24, 0x02	; 2
    f2a8:	61 e0       	ldi	r22, 0x01	; 1
    f2aa:	a8 01       	movw	r20, r16
    f2ac:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
                lcd_printf(3,1,PSTR("Proses"));
    f2b0:	83 e0       	ldi	r24, 0x03	; 3
    f2b2:	61 e0       	ldi	r22, 0x01	; 1
    f2b4:	44 e8       	ldi	r20, 0x84	; 132
    f2b6:	52 e2       	ldi	r21, 0x22	; 34
    f2b8:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
				iPos=0;//iLoop=0;
    f2bc:	10 92 75 03 	sts	0x0375, r1
				IsFullAuthorized=False;
    f2c0:	10 92 65 03 	sts	0x0365, r1
				IsCardTransaction=True;
    f2c4:	81 e0       	ldi	r24, 0x01	; 1
    f2c6:	80 93 77 02 	sts	0x0277, r24
		        stLocalAccount=laSendID;
    f2ca:	82 e0       	ldi	r24, 0x02	; 2
    f2cc:	21 c6       	rjmp	.+3138   	; 0xff10 <FMenuLocalAccount+0xd52>
				break;         
           case laSendID://sendMessage56 
				IsMessage57=False;
    f2ce:	10 92 84 02 	sts	0x0284, r1
                sendMessage56();
    f2d2:	0e 94 8b 2b 	call	0x5716	; 0x5716 <sendMessage56>
				iWait=0;iPos=0;
    f2d6:	10 92 74 03 	sts	0x0374, r1
    f2da:	10 92 75 03 	sts	0x0375, r1
				//iLoop=0;
				TimSend=0;
    f2de:	10 92 7d 0d 	sts	0x0D7D, r1
				stLocalAccount=laWaitMessage57;
    f2e2:	83 e0       	ldi	r24, 0x03	; 3
    f2e4:	15 c6       	rjmp	.+3114   	; 0xff10 <FMenuLocalAccount+0xd52>
						 system_beep(2);
						 stLocalAccount=laConTimout;
				}
				*/
				
		        iLoop++;
    f2e6:	80 91 63 03 	lds	r24, 0x0363
    f2ea:	90 91 64 03 	lds	r25, 0x0364
    f2ee:	01 96       	adiw	r24, 0x01	; 1
    f2f0:	90 93 64 03 	sts	0x0364, r25
    f2f4:	80 93 63 03 	sts	0x0363, r24
				if ((iLoop%MSG_WAIT_TIMOUT)==0){
    f2f8:	68 e9       	ldi	r22, 0x98	; 152
    f2fa:	7a e3       	ldi	r23, 0x3A	; 58
    f2fc:	0e 94 97 a7 	call	0x14f2e	; 0x14f2e <__udivmodhi4>
    f300:	00 97       	sbiw	r24, 0x00	; 0
    f302:	e1 f4       	brne	.+56     	; 0xf33c <FMenuLocalAccount+0x17e>
				   if (iPos<5){
    f304:	60 91 75 03 	lds	r22, 0x0375
    f308:	65 30       	cpi	r22, 0x05	; 5
    f30a:	58 f4       	brcc	.+22     	; 0xf322 <FMenuLocalAccount+0x164>
					   lcd_put(3,(8+iPos),'.');
    f30c:	68 5f       	subi	r22, 0xF8	; 248
    f30e:	83 e0       	ldi	r24, 0x03	; 3
    f310:	4e e2       	ldi	r20, 0x2E	; 46
    f312:	0e 94 c1 a2 	call	0x14582	; 0x14582 <lcd_put>
				       iPos++;
    f316:	80 91 75 03 	lds	r24, 0x0375
    f31a:	8f 5f       	subi	r24, 0xFF	; 255
    f31c:	80 93 75 03 	sts	0x0375, r24
    f320:	0d c0       	rjmp	.+26     	; 0xf33c <FMenuLocalAccount+0x17e>
					   }
				   else{
				       iPos=0;
    f322:	10 92 75 03 	sts	0x0375, r1
					   lcd_printf(3,(9+iPos),PSTR("       "));
    f326:	83 e0       	ldi	r24, 0x03	; 3
    f328:	69 e0       	ldi	r22, 0x09	; 9
    f32a:	4c e7       	ldi	r20, 0x7C	; 124
    f32c:	52 e2       	ldi	r21, 0x22	; 34
    f32e:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
					   iWait++;
    f332:	80 91 74 03 	lds	r24, 0x0374
    f336:	8f 5f       	subi	r24, 0xFF	; 255
    f338:	80 93 74 03 	sts	0x0374, r24
					   }
				}
				if (iWait>3){
    f33c:	80 91 74 03 	lds	r24, 0x0374
    f340:	84 30       	cpi	r24, 0x04	; 4
    f342:	48 f0       	brcs	.+18     	; 0xf356 <FMenuLocalAccount+0x198>
				    stLocalAccount=laConTimout;
    f344:	84 e0       	ldi	r24, 0x04	; 4
    f346:	80 93 5b 01 	sts	0x015B, r24
					TimLocAcc=0;
    f34a:	10 92 99 02 	sts	0x0299, r1
					system_beep(2);
    f34e:	82 e0       	ldi	r24, 0x02	; 2
    f350:	90 e0       	ldi	r25, 0x00	; 0
    f352:	0e 94 ee 14 	call	0x29dc	; 0x29dc <system_beep>
				    }
                 
				if (IsMessage57==True){
    f356:	80 91 84 02 	lds	r24, 0x0284
    f35a:	81 30       	cpi	r24, 0x01	; 1
    f35c:	09 f0       	breq	.+2      	; 0xf360 <FMenuLocalAccount+0x1a2>
    f35e:	ca c7       	rjmp	.+3988   	; 0x102f4 <FMenuLocalAccount+0x1136>
				    IsMessage57=False;
    f360:	10 92 84 02 	sts	0x0284, r1
				    stLocalAccount=laProcMessage57;
    f364:	85 e0       	ldi	r24, 0x05	; 5
    f366:	d4 c5       	rjmp	.+2984   	; 0xff10 <FMenuLocalAccount+0xd52>
					}
		        break;
           case laConTimout:
		        //IsErrorTCPIP=True;
				lcd_printf(3,1,PSTR("Sending Failed      "));
    f368:	83 e0       	ldi	r24, 0x03	; 3
    f36a:	61 e0       	ldi	r22, 0x01	; 1
    f36c:	47 e6       	ldi	r20, 0x67	; 103
    f36e:	52 e2       	ldi	r21, 0x22	; 34
    f370:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
				lcd_printf(4,1,PSTR("TCP/IP Error        "));
    f374:	84 e0       	ldi	r24, 0x04	; 4
    f376:	61 e0       	ldi	r22, 0x01	; 1
    f378:	42 e5       	ldi	r20, 0x52	; 82
    f37a:	52 e2       	ldi	r21, 0x22	; 34
    f37c:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
                if (TimLocAcc>2)  stLocalAccount=laExitLocAcc;
    f380:	80 91 99 02 	lds	r24, 0x0299
    f384:	83 30       	cpi	r24, 0x03	; 3
    f386:	08 f4       	brcc	.+2      	; 0xf38a <FMenuLocalAccount+0x1cc>
    f388:	b5 c7       	rjmp	.+3946   	; 0x102f4 <FMenuLocalAccount+0x1136>
    f38a:	9d c7       	rjmp	.+3898   	; 0x102c6 <FMenuLocalAccount+0x1108>
		        break;
           case laProcMessage57://Process Message
				lcd_printf(3,1,PSTR("Data Received       "));
    f38c:	83 e0       	ldi	r24, 0x03	; 3
    f38e:	61 e0       	ldi	r22, 0x01	; 1
    f390:	4d e3       	ldi	r20, 0x3D	; 61
    f392:	52 e2       	ldi	r21, 0x22	; 34
    f394:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
				LocAccStatus=GetLocAccStatus(procMessage57());
    f398:	0e 94 d6 49 	call	0x93ac	; 0x93ac <procMessage57>
    f39c:	0e 94 e9 38 	call	0x71d2	; 0x71d2 <GetLocAccStatus>
    f3a0:	80 93 76 03 	sts	0x0376, r24
				TimLocAcc=0;
    f3a4:	10 92 99 02 	sts	0x0299, r1
				stLocalAccount=laDispStatus;
    f3a8:	86 e0       	ldi	r24, 0x06	; 6
    f3aa:	b2 c5       	rjmp	.+2916   	; 0xff10 <FMenuLocalAccount+0xd52>
		        break;
           case laDispStatus://Display Status
		        if (LocAccStatus==LA_INVALID){
    f3ac:	80 91 76 03 	lds	r24, 0x0376
    f3b0:	81 30       	cpi	r24, 0x01	; 1
    f3b2:	29 f4       	brne	.+10     	; 0xf3be <FMenuLocalAccount+0x200>
					lcd_printf(3,1,PSTR("Tidak Terdaftar     "));    
    f3b4:	83 e0       	ldi	r24, 0x03	; 3
    f3b6:	61 e0       	ldi	r22, 0x01	; 1
    f3b8:	48 e2       	ldi	r20, 0x28	; 40
    f3ba:	52 e2       	ldi	r21, 0x22	; 34
    f3bc:	0d c0       	rjmp	.+26     	; 0xf3d8 <FMenuLocalAccount+0x21a>
					TimLocAcc=0;
				    stLocalAccount=laDelayExit;
				}
				else
                if (LocAccStatus==LA_VALID) {
    f3be:	82 30       	cpi	r24, 0x02	; 2
    f3c0:	31 f4       	brne	.+12     	; 0xf3ce <FMenuLocalAccount+0x210>
				    stLocalAccount=laDispValid; 
    f3c2:	87 e0       	ldi	r24, 0x07	; 7
    f3c4:	80 93 5b 01 	sts	0x015B, r24
					lcd_clear();
    f3c8:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
    f3cc:	0c c0       	rjmp	.+24     	; 0xf3e6 <FMenuLocalAccount+0x228>
					}
				else
                if (LocAccStatus==LA_LIMITED){
    f3ce:	83 30       	cpi	r24, 0x03	; 3
    f3d0:	51 f4       	brne	.+20     	; 0xf3e6 <FMenuLocalAccount+0x228>
					lcd_printf(3,1,PSTR("Kartu Terbatas      "));    
    f3d2:	61 e0       	ldi	r22, 0x01	; 1
    f3d4:	43 e1       	ldi	r20, 0x13	; 19
    f3d6:	52 e2       	ldi	r21, 0x22	; 34
    f3d8:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
					TimLocAcc=0;
    f3dc:	10 92 99 02 	sts	0x0299, r1
				    stLocalAccount=laDelayExit;
    f3e0:	8e e1       	ldi	r24, 0x1E	; 30
    f3e2:	80 93 5b 01 	sts	0x015B, r24
				}
                if (TimLocAcc>5)stLocalAccount=laExitLocAcc;
    f3e6:	80 91 99 02 	lds	r24, 0x0299
    f3ea:	86 30       	cpi	r24, 0x06	; 6
    f3ec:	08 f4       	brcc	.+2      	; 0xf3f0 <FMenuLocalAccount+0x232>
    f3ee:	82 c7       	rjmp	.+3844   	; 0x102f4 <FMenuLocalAccount+0x1136>
    f3f0:	6a c7       	rjmp	.+3796   	; 0x102c6 <FMenuLocalAccount+0x1108>
		        break;
           case laDispValid://Display VALID ID
		        lcd_clear();
    f3f2:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
				sprintf_P(strBalanceValue,PSTR("%s"),strBalance);
    f3f6:	00 d0       	rcall	.+0      	; 0xf3f8 <FMenuLocalAccount+0x23a>
    f3f8:	00 d0       	rcall	.+0      	; 0xf3fa <FMenuLocalAccount+0x23c>
    f3fa:	00 d0       	rcall	.+0      	; 0xf3fc <FMenuLocalAccount+0x23e>
    f3fc:	ed b7       	in	r30, 0x3d	; 61
    f3fe:	fe b7       	in	r31, 0x3e	; 62
    f400:	31 96       	adiw	r30, 0x01	; 1
    f402:	88 e1       	ldi	r24, 0x18	; 24
    f404:	9d e0       	ldi	r25, 0x0D	; 13
    f406:	ad b7       	in	r26, 0x3d	; 61
    f408:	be b7       	in	r27, 0x3e	; 62
    f40a:	12 96       	adiw	r26, 0x02	; 2
    f40c:	9c 93       	st	X, r25
    f40e:	8e 93       	st	-X, r24
    f410:	11 97       	sbiw	r26, 0x01	; 1
    f412:	80 e1       	ldi	r24, 0x10	; 16
    f414:	92 e2       	ldi	r25, 0x22	; 34
    f416:	93 83       	std	Z+3, r25	; 0x03
    f418:	82 83       	std	Z+2, r24	; 0x02
    f41a:	41 ef       	ldi	r20, 0xF1	; 241
    f41c:	e4 2e       	mov	r14, r20
    f41e:	4c e0       	ldi	r20, 0x0C	; 12
    f420:	f4 2e       	mov	r15, r20
    f422:	f5 82       	std	Z+5, r15	; 0x05
    f424:	e4 82       	std	Z+4, r14	; 0x04
    f426:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
				FormatCurrency(strBalance);
    f42a:	ed b7       	in	r30, 0x3d	; 61
    f42c:	fe b7       	in	r31, 0x3e	; 62
    f42e:	36 96       	adiw	r30, 0x06	; 6
    f430:	0f b6       	in	r0, 0x3f	; 63
    f432:	f8 94       	cli
    f434:	fe bf       	out	0x3e, r31	; 62
    f436:	0f be       	out	0x3f, r0	; 63
    f438:	ed bf       	out	0x3d, r30	; 61
    f43a:	c7 01       	movw	r24, r14
    f43c:	0e 94 91 56 	call	0xad22	; 0xad22 <FormatCurrency>

		        StringCopy(strCardHolder,strName,20);  				                                                        
    f440:	30 e2       	ldi	r19, 0x20	; 32
    f442:	c3 2e       	mov	r12, r19
    f444:	d1 2c       	mov	r13, r1
    f446:	cc 0e       	add	r12, r28
    f448:	dd 1e       	adc	r13, r29
    f44a:	89 e0       	ldi	r24, 0x09	; 9
    f44c:	94 e0       	ldi	r25, 0x04	; 4
    f44e:	b6 01       	movw	r22, r12
    f450:	44 e1       	ldi	r20, 0x14	; 20
    f452:	0e 94 32 16 	call	0x2c64	; 0x2c64 <StringCopy>
		        sprintf_P(lcdteks,PSTR("%s"),strCompName);               lcd_print(1,1,lcdteks);   //[CompName]
    f456:	00 d0       	rcall	.+0      	; 0xf458 <FMenuLocalAccount+0x29a>
    f458:	00 d0       	rcall	.+0      	; 0xf45a <FMenuLocalAccount+0x29c>
    f45a:	00 d0       	rcall	.+0      	; 0xf45c <FMenuLocalAccount+0x29e>
    f45c:	ed b7       	in	r30, 0x3d	; 61
    f45e:	fe b7       	in	r31, 0x3e	; 62
    f460:	31 96       	adiw	r30, 0x01	; 1
    f462:	8e 01       	movw	r16, r28
    f464:	04 5f       	subi	r16, 0xF4	; 244
    f466:	1f 4f       	sbci	r17, 0xFF	; 255
    f468:	ad b7       	in	r26, 0x3d	; 61
    f46a:	be b7       	in	r27, 0x3e	; 62
    f46c:	12 96       	adiw	r26, 0x02	; 2
    f46e:	1c 93       	st	X, r17
    f470:	0e 93       	st	-X, r16
    f472:	11 97       	sbiw	r26, 0x01	; 1
    f474:	8d e0       	ldi	r24, 0x0D	; 13
    f476:	92 e2       	ldi	r25, 0x22	; 34
    f478:	93 83       	std	Z+3, r25	; 0x03
    f47a:	82 83       	std	Z+2, r24	; 0x02
    f47c:	8d e5       	ldi	r24, 0x5D	; 93
    f47e:	98 e0       	ldi	r25, 0x08	; 8
    f480:	95 83       	std	Z+5, r25	; 0x05
    f482:	84 83       	std	Z+4, r24	; 0x04
    f484:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    f488:	ed b7       	in	r30, 0x3d	; 61
    f48a:	fe b7       	in	r31, 0x3e	; 62
    f48c:	36 96       	adiw	r30, 0x06	; 6
    f48e:	0f b6       	in	r0, 0x3f	; 63
    f490:	f8 94       	cli
    f492:	fe bf       	out	0x3e, r31	; 62
    f494:	0f be       	out	0x3f, r0	; 63
    f496:	ed bf       	out	0x3d, r30	; 61
    f498:	81 e0       	ldi	r24, 0x01	; 1
    f49a:	61 e0       	ldi	r22, 0x01	; 1
    f49c:	a8 01       	movw	r20, r16
    f49e:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
                //sprintf(lcdteks,"%s %s",strCardID,strName);    lcd_print(2,1,lcdteks);   //[Card ID][Card Holder]
				sprintf_P(lcdteks,PSTR("%s"),strName);                   lcd_print(2,1,lcdteks);   //[Card ID][Card Holder]
    f4a2:	00 d0       	rcall	.+0      	; 0xf4a4 <FMenuLocalAccount+0x2e6>
    f4a4:	00 d0       	rcall	.+0      	; 0xf4a6 <FMenuLocalAccount+0x2e8>
    f4a6:	00 d0       	rcall	.+0      	; 0xf4a8 <FMenuLocalAccount+0x2ea>
    f4a8:	ed b7       	in	r30, 0x3d	; 61
    f4aa:	fe b7       	in	r31, 0x3e	; 62
    f4ac:	31 96       	adiw	r30, 0x01	; 1
    f4ae:	ad b7       	in	r26, 0x3d	; 61
    f4b0:	be b7       	in	r27, 0x3e	; 62
    f4b2:	12 96       	adiw	r26, 0x02	; 2
    f4b4:	1c 93       	st	X, r17
    f4b6:	0e 93       	st	-X, r16
    f4b8:	11 97       	sbiw	r26, 0x01	; 1
    f4ba:	8a e0       	ldi	r24, 0x0A	; 10
    f4bc:	92 e2       	ldi	r25, 0x22	; 34
    f4be:	93 83       	std	Z+3, r25	; 0x03
    f4c0:	82 83       	std	Z+2, r24	; 0x02
    f4c2:	d5 82       	std	Z+5, r13	; 0x05
    f4c4:	c4 82       	std	Z+4, r12	; 0x04
    f4c6:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    f4ca:	ed b7       	in	r30, 0x3d	; 61
    f4cc:	fe b7       	in	r31, 0x3e	; 62
    f4ce:	36 96       	adiw	r30, 0x06	; 6
    f4d0:	0f b6       	in	r0, 0x3f	; 63
    f4d2:	f8 94       	cli
    f4d4:	fe bf       	out	0x3e, r31	; 62
    f4d6:	0f be       	out	0x3f, r0	; 63
    f4d8:	ed bf       	out	0x3d, r30	; 61
    f4da:	82 e0       	ldi	r24, 0x02	; 2
    f4dc:	61 e0       	ldi	r22, 0x01	; 1
    f4de:	a8 01       	movw	r20, r16
    f4e0:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
				sprintf_P(lcdteks,PSTR("%s %s"),strLicPlate,strBalance); lcd_print(3,1,lcdteks);   //[LicPlate][Balance] 
    f4e4:	8d b7       	in	r24, 0x3d	; 61
    f4e6:	9e b7       	in	r25, 0x3e	; 62
    f4e8:	08 97       	sbiw	r24, 0x08	; 8
    f4ea:	0f b6       	in	r0, 0x3f	; 63
    f4ec:	f8 94       	cli
    f4ee:	9e bf       	out	0x3e, r25	; 62
    f4f0:	0f be       	out	0x3f, r0	; 63
    f4f2:	8d bf       	out	0x3d, r24	; 61
    f4f4:	ed b7       	in	r30, 0x3d	; 61
    f4f6:	fe b7       	in	r31, 0x3e	; 62
    f4f8:	31 96       	adiw	r30, 0x01	; 1
    f4fa:	ad b7       	in	r26, 0x3d	; 61
    f4fc:	be b7       	in	r27, 0x3e	; 62
    f4fe:	12 96       	adiw	r26, 0x02	; 2
    f500:	1c 93       	st	X, r17
    f502:	0e 93       	st	-X, r16
    f504:	11 97       	sbiw	r26, 0x01	; 1
    f506:	84 e0       	ldi	r24, 0x04	; 4
    f508:	92 e2       	ldi	r25, 0x22	; 34
    f50a:	93 83       	std	Z+3, r25	; 0x03
    f50c:	82 83       	std	Z+2, r24	; 0x02
    f50e:	8e ed       	ldi	r24, 0xDE	; 222
    f510:	99 e0       	ldi	r25, 0x09	; 9
    f512:	95 83       	std	Z+5, r25	; 0x05
    f514:	84 83       	std	Z+4, r24	; 0x04
    f516:	f7 82       	std	Z+7, r15	; 0x07
    f518:	e6 82       	std	Z+6, r14	; 0x06
    f51a:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    f51e:	ed b7       	in	r30, 0x3d	; 61
    f520:	fe b7       	in	r31, 0x3e	; 62
    f522:	38 96       	adiw	r30, 0x08	; 8
    f524:	0f b6       	in	r0, 0x3f	; 63
    f526:	f8 94       	cli
    f528:	fe bf       	out	0x3e, r31	; 62
    f52a:	0f be       	out	0x3f, r0	; 63
    f52c:	ed bf       	out	0x3d, r30	; 61
    f52e:	83 e0       	ldi	r24, 0x03	; 3
    f530:	61 e0       	ldi	r22, 0x01	; 1
    f532:	a8 01       	movw	r20, r16
    f534:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
	            lcd_printf(4,1,PSTR("[*]Batal       [#]OK"));   //[*]Batal       [#]OK
    f538:	84 e0       	ldi	r24, 0x04	; 4
    f53a:	61 e0       	ldi	r22, 0x01	; 1
    f53c:	4f ee       	ldi	r20, 0xEF	; 239
    f53e:	51 e2       	ldi	r21, 0x21	; 33
    f540:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
				stLocalAccount=laDispValidInput;
    f544:	88 e0       	ldi	r24, 0x08	; 8
    f546:	e4 c4       	rjmp	.+2504   	; 0xff10 <FMenuLocalAccount+0xd52>
		        break;
           case laDispValidInput:
                KeyPressed=_key_scan(1);
    f548:	81 e0       	ldi	r24, 0x01	; 1
    f54a:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <_key_scan>
				if (KeyPressed==_KEY_ENTER) stLocalAccount=laSelectFIP;
    f54e:	87 3b       	cpi	r24, 0xB7	; 183
    f550:	09 f4       	brne	.+2      	; 0xf554 <FMenuLocalAccount+0x396>
    f552:	c9 c1       	rjmp	.+914    	; 0xf8e6 <FMenuLocalAccount+0x728>
				else
				if (KeyPressed==_KEY_CANCEL)stLocalAccount=laExitLocAcc;
    f554:	87 3e       	cpi	r24, 0xE7	; 231
    f556:	09 f0       	breq	.+2      	; 0xf55a <FMenuLocalAccount+0x39c>
    f558:	cd c6       	rjmp	.+3482   	; 0x102f4 <FMenuLocalAccount+0x1136>
    f55a:	b5 c6       	rjmp	.+3434   	; 0x102c6 <FMenuLocalAccount+0x1108>
		        break;
           case laSelectFIP:      
			    FIPResult=menu_FIP(&FIP_Used,strFIP);
    f55c:	00 e7       	ldi	r16, 0x70	; 112
    f55e:	13 e0       	ldi	r17, 0x03	; 3
    f560:	87 e6       	ldi	r24, 0x67	; 103
    f562:	93 e0       	ldi	r25, 0x03	; 3
    f564:	b8 01       	movw	r22, r16
    f566:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <menu_FIP>

			    if ((FIPResult==FIP_DONE)&&(FIP_Used>0)){
    f56a:	88 23       	and	r24, r24
    f56c:	09 f0       	breq	.+2      	; 0xf570 <FMenuLocalAccount+0x3b2>
    f56e:	53 c0       	rjmp	.+166    	; 0xf616 <FMenuLocalAccount+0x458>
    f570:	20 91 67 03 	lds	r18, 0x0367
    f574:	22 23       	and	r18, r18
    f576:	09 f4       	brne	.+2      	; 0xf57a <FMenuLocalAccount+0x3bc>
    f578:	bd c6       	rjmp	.+3450   	; 0x102f4 <FMenuLocalAccount+0x1136>
                    sprintf_P(strFIP,PSTR("%.2d"),FIP_Used);
    f57a:	00 d0       	rcall	.+0      	; 0xf57c <FMenuLocalAccount+0x3be>
    f57c:	00 d0       	rcall	.+0      	; 0xf57e <FMenuLocalAccount+0x3c0>
    f57e:	00 d0       	rcall	.+0      	; 0xf580 <FMenuLocalAccount+0x3c2>
    f580:	ed b7       	in	r30, 0x3d	; 61
    f582:	fe b7       	in	r31, 0x3e	; 62
    f584:	31 96       	adiw	r30, 0x01	; 1
    f586:	ad b7       	in	r26, 0x3d	; 61
    f588:	be b7       	in	r27, 0x3e	; 62
    f58a:	12 96       	adiw	r26, 0x02	; 2
    f58c:	1c 93       	st	X, r17
    f58e:	0e 93       	st	-X, r16
    f590:	11 97       	sbiw	r26, 0x01	; 1
    f592:	8a ee       	ldi	r24, 0xEA	; 234
    f594:	91 e2       	ldi	r25, 0x21	; 33
    f596:	93 83       	std	Z+3, r25	; 0x03
    f598:	82 83       	std	Z+2, r24	; 0x02
    f59a:	24 83       	std	Z+4, r18	; 0x04
    f59c:	15 82       	std	Z+5, r1	; 0x05
    f59e:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
					sprintf_P(strFIP_ID,PSTR("%.2d"),FIP_Used);
    f5a2:	ed b7       	in	r30, 0x3d	; 61
    f5a4:	fe b7       	in	r31, 0x3e	; 62
    f5a6:	31 96       	adiw	r30, 0x01	; 1
    f5a8:	8d e9       	ldi	r24, 0x9D	; 157
    f5aa:	98 e0       	ldi	r25, 0x08	; 8
    f5ac:	ad b7       	in	r26, 0x3d	; 61
    f5ae:	be b7       	in	r27, 0x3e	; 62
    f5b0:	12 96       	adiw	r26, 0x02	; 2
    f5b2:	9c 93       	st	X, r25
    f5b4:	8e 93       	st	-X, r24
    f5b6:	11 97       	sbiw	r26, 0x01	; 1
    f5b8:	85 ee       	ldi	r24, 0xE5	; 229
    f5ba:	91 e2       	ldi	r25, 0x21	; 33
    f5bc:	93 83       	std	Z+3, r25	; 0x03
    f5be:	82 83       	std	Z+2, r24	; 0x02
    f5c0:	80 91 67 03 	lds	r24, 0x0367
    f5c4:	84 83       	std	Z+4, r24	; 0x04
    f5c6:	15 82       	std	Z+5, r1	; 0x05
    f5c8:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
                    //Load Product Info
					if (GetFIPAddr(FIP_Used)>0) 
    f5cc:	ed b7       	in	r30, 0x3d	; 61
    f5ce:	fe b7       	in	r31, 0x3e	; 62
    f5d0:	36 96       	adiw	r30, 0x06	; 6
    f5d2:	0f b6       	in	r0, 0x3f	; 63
    f5d4:	f8 94       	cli
    f5d6:	fe bf       	out	0x3e, r31	; 62
    f5d8:	0f be       	out	0x3f, r0	; 63
    f5da:	ed bf       	out	0x3d, r30	; 61
    f5dc:	80 91 67 03 	lds	r24, 0x0367
    f5e0:	0e 94 50 6e 	call	0xdca0	; 0xdca0 <GetFIPAddr>
    f5e4:	88 23       	and	r24, r24
    f5e6:	a9 f0       	breq	.+42     	; 0xf612 <FMenuLocalAccount+0x454>
					    eeprom_read_block((void*) &ProductID, (const void*) &DefNozzleMap[GetFIPAddr(FIP_Used)-1], 6);
    f5e8:	80 91 67 03 	lds	r24, 0x0367
    f5ec:	0e 94 50 6e 	call	0xdca0	; 0xdca0 <GetFIPAddr>
    f5f0:	90 e0       	ldi	r25, 0x00	; 0
    f5f2:	01 97       	sbiw	r24, 0x01	; 1
    f5f4:	bc 01       	movw	r22, r24
    f5f6:	66 0f       	add	r22, r22
    f5f8:	77 1f       	adc	r23, r23
    f5fa:	68 0f       	add	r22, r24
    f5fc:	79 1f       	adc	r23, r25
    f5fe:	66 0f       	add	r22, r22
    f600:	77 1f       	adc	r23, r23
    f602:	6a 5a       	subi	r22, 0xAA	; 170
    f604:	7f 4f       	sbci	r23, 0xFF	; 255
    f606:	88 e6       	ldi	r24, 0x68	; 104
    f608:	93 e0       	ldi	r25, 0x03	; 3
    f60a:	46 e0       	ldi	r20, 0x06	; 6
    f60c:	50 e0       	ldi	r21, 0x00	; 0
    f60e:	0e 94 56 aa 	call	0x154ac	; 0x154ac <__eerd_block_m128>
				    stLocalAccount=laSelectProduct;
    f612:	8b e0       	ldi	r24, 0x0B	; 11
    f614:	7d c4       	rjmp	.+2298   	; 0xff10 <FMenuLocalAccount+0xd52>
				}
			    else if (FIPResult==FIP_CANCEL){
    f616:	82 30       	cpi	r24, 0x02	; 2
    f618:	09 f0       	breq	.+2      	; 0xf61c <FMenuLocalAccount+0x45e>
    f61a:	6c c6       	rjmp	.+3288   	; 0x102f4 <FMenuLocalAccount+0x1136>
				    stLocalAccount=laDispValid;
    f61c:	87 e0       	ldi	r24, 0x07	; 7
    f61e:	78 c4       	rjmp	.+2288   	; 0xff10 <FMenuLocalAccount+0xd52>
		        break; 
           case laSelectFIPInput:

		        break;
           case laSelectProduct://NozzleID
				lcd_clear();
    f620:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
		        sprintf_P(lcdteks,PSTR("Pompa-%s"),strFIP);lcd_print(1,1,lcdteks);
    f624:	00 d0       	rcall	.+0      	; 0xf626 <FMenuLocalAccount+0x468>
    f626:	00 d0       	rcall	.+0      	; 0xf628 <FMenuLocalAccount+0x46a>
    f628:	00 d0       	rcall	.+0      	; 0xf62a <FMenuLocalAccount+0x46c>
    f62a:	ed b7       	in	r30, 0x3d	; 61
    f62c:	fe b7       	in	r31, 0x3e	; 62
    f62e:	31 96       	adiw	r30, 0x01	; 1
    f630:	8e 01       	movw	r16, r28
    f632:	04 5f       	subi	r16, 0xF4	; 244
    f634:	1f 4f       	sbci	r17, 0xFF	; 255
    f636:	ad b7       	in	r26, 0x3d	; 61
    f638:	be b7       	in	r27, 0x3e	; 62
    f63a:	12 96       	adiw	r26, 0x02	; 2
    f63c:	1c 93       	st	X, r17
    f63e:	0e 93       	st	-X, r16
    f640:	11 97       	sbiw	r26, 0x01	; 1
    f642:	8c ed       	ldi	r24, 0xDC	; 220
    f644:	91 e2       	ldi	r25, 0x21	; 33
    f646:	93 83       	std	Z+3, r25	; 0x03
    f648:	82 83       	std	Z+2, r24	; 0x02
    f64a:	80 e7       	ldi	r24, 0x70	; 112
    f64c:	93 e0       	ldi	r25, 0x03	; 3
    f64e:	95 83       	std	Z+5, r25	; 0x05
    f650:	84 83       	std	Z+4, r24	; 0x04
    f652:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    f656:	ed b7       	in	r30, 0x3d	; 61
    f658:	fe b7       	in	r31, 0x3e	; 62
    f65a:	36 96       	adiw	r30, 0x06	; 6
    f65c:	0f b6       	in	r0, 0x3f	; 63
    f65e:	f8 94       	cli
    f660:	fe bf       	out	0x3e, r31	; 62
    f662:	0f be       	out	0x3f, r0	; 63
    f664:	ed bf       	out	0x3d, r30	; 61
    f666:	81 e0       	ldi	r24, 0x01	; 1
    f668:	61 e0       	ldi	r22, 0x01	; 1
    f66a:	a8 01       	movw	r20, r16
    f66c:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
				//Not MPD->Single Product
				if ((ProductID[0]>=1)&&(ProductID[0]<=6)&&
    f670:	80 91 68 03 	lds	r24, 0x0368
    f674:	98 2f       	mov	r25, r24
    f676:	91 50       	subi	r25, 0x01	; 1
    f678:	96 30       	cpi	r25, 0x06	; 6
    f67a:	08 f0       	brcs	.+2      	; 0xf67e <FMenuLocalAccount+0x4c0>
    f67c:	50 c0       	rjmp	.+160    	; 0xf71e <FMenuLocalAccount+0x560>
    f67e:	90 91 69 03 	lds	r25, 0x0369
    f682:	99 23       	and	r25, r25
    f684:	09 f0       	breq	.+2      	; 0xf688 <FMenuLocalAccount+0x4ca>
    f686:	4b c0       	rjmp	.+150    	; 0xf71e <FMenuLocalAccount+0x560>
				    (ProductID[1]==0)&&(ProductID[2]==0)&&(ProductID[3]==0)){
    f688:	90 91 6a 03 	lds	r25, 0x036A
    f68c:	99 23       	and	r25, r25
    f68e:	09 f0       	breq	.+2      	; 0xf692 <FMenuLocalAccount+0x4d4>
    f690:	46 c0       	rjmp	.+140    	; 0xf71e <FMenuLocalAccount+0x560>
    f692:	90 91 6b 03 	lds	r25, 0x036B
    f696:	99 23       	and	r25, r25
    f698:	09 f0       	breq	.+2      	; 0xf69c <FMenuLocalAccount+0x4de>
    f69a:	41 c0       	rjmp	.+130    	; 0xf71e <FMenuLocalAccount+0x560>
                     //Load 1st Product      					 
					 ProdId=ProductID[0];
    f69c:	80 93 66 03 	sts	0x0366, r24
					 eeprom_read_block((void*) &ProductName, (const void*) &DefProductName[ProdId-1],10);
    f6a0:	90 e0       	ldi	r25, 0x00	; 0
    f6a2:	01 97       	sbiw	r24, 0x01	; 1
    f6a4:	2d e0       	ldi	r18, 0x0D	; 13
    f6a6:	30 e0       	ldi	r19, 0x00	; 0
    f6a8:	82 9f       	mul	r24, r18
    f6aa:	b0 01       	movw	r22, r0
    f6ac:	83 9f       	mul	r24, r19
    f6ae:	70 0d       	add	r23, r0
    f6b0:	92 9f       	mul	r25, r18
    f6b2:	70 0d       	add	r23, r0
    f6b4:	11 24       	eor	r1, r1
    f6b6:	64 54       	subi	r22, 0x44	; 68
    f6b8:	7f 4f       	sbci	r23, 0xFF	; 255
    f6ba:	8e 01       	movw	r16, r28
    f6bc:	0f 5f       	subi	r16, 0xFF	; 255
    f6be:	1f 4f       	sbci	r17, 0xFF	; 255
    f6c0:	c8 01       	movw	r24, r16
    f6c2:	4a e0       	ldi	r20, 0x0A	; 10
    f6c4:	50 e0       	ldi	r21, 0x00	; 0
    f6c6:	0e 94 56 aa 	call	0x154ac	; 0x154ac <__eerd_block_m128>
					 StrPosCopy(ProductName,ProductName,0,8);
    f6ca:	c8 01       	movw	r24, r16
    f6cc:	b8 01       	movw	r22, r16
    f6ce:	40 e0       	ldi	r20, 0x00	; 0
    f6d0:	50 e0       	ldi	r21, 0x00	; 0
    f6d2:	28 e0       	ldi	r18, 0x08	; 8
    f6d4:	30 e0       	ldi	r19, 0x00	; 0
    f6d6:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
					 sprintf_P(strProduct,PSTR("%s"),ProductName);
    f6da:	00 d0       	rcall	.+0      	; 0xf6dc <FMenuLocalAccount+0x51e>
    f6dc:	00 d0       	rcall	.+0      	; 0xf6de <FMenuLocalAccount+0x520>
    f6de:	00 d0       	rcall	.+0      	; 0xf6e0 <FMenuLocalAccount+0x522>
    f6e0:	ed b7       	in	r30, 0x3d	; 61
    f6e2:	fe b7       	in	r31, 0x3e	; 62
    f6e4:	31 96       	adiw	r30, 0x01	; 1
    f6e6:	82 e4       	ldi	r24, 0x42	; 66
    f6e8:	98 e0       	ldi	r25, 0x08	; 8
    f6ea:	ad b7       	in	r26, 0x3d	; 61
    f6ec:	be b7       	in	r27, 0x3e	; 62
    f6ee:	12 96       	adiw	r26, 0x02	; 2
    f6f0:	9c 93       	st	X, r25
    f6f2:	8e 93       	st	-X, r24
    f6f4:	11 97       	sbiw	r26, 0x01	; 1
    f6f6:	89 ed       	ldi	r24, 0xD9	; 217
    f6f8:	91 e2       	ldi	r25, 0x21	; 33
    f6fa:	93 83       	std	Z+3, r25	; 0x03
    f6fc:	82 83       	std	Z+2, r24	; 0x02
    f6fe:	15 83       	std	Z+5, r17	; 0x05
    f700:	04 83       	std	Z+4, r16	; 0x04
    f702:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
                     stLocalAccount=laSelectBalanceType;
    f706:	8d e0       	ldi	r24, 0x0D	; 13
    f708:	80 93 5b 01 	sts	0x015B, r24
    f70c:	ed b7       	in	r30, 0x3d	; 61
    f70e:	fe b7       	in	r31, 0x3e	; 62
    f710:	36 96       	adiw	r30, 0x06	; 6
    f712:	0f b6       	in	r0, 0x3f	; 63
    f714:	f8 94       	cli
    f716:	fe bf       	out	0x3e, r31	; 62
    f718:	0f be       	out	0x3f, r0	; 63
    f71a:	ed bf       	out	0x3d, r30	; 61
    f71c:	eb c5       	rjmp	.+3030   	; 0x102f4 <FMenuLocalAccount+0x1136>
					}else
                {
				//MultiProductDisplay Select:
				//Load Nozzle Configuration
				for(iNozzle=0;iNozzle<4;iNozzle++){
    f71e:	10 92 6e 03 	sts	0x036E, r1
    f722:	1c e0       	ldi	r17, 0x0C	; 12
    f724:	e1 2e       	mov	r14, r17
    f726:	f1 2c       	mov	r15, r1
    f728:	ec 0e       	add	r14, r28
    f72a:	fd 1e       	adc	r15, r29
				        eeprom_read_block((void*) &ProductName, (const void*) &DefProductName[ProdId-1],10);
						StrPosCopy(ProductName,ProductName,0,8);
					    sprintf_P(lcdteks,PSTR("%d.%s"),(iNozzle+1),ProductName);
                    }
					else{
					       sprintf_P(lcdteks,PSTR("     "));					
    f72c:	bd ec       	ldi	r27, 0xCD	; 205
    f72e:	cb 2e       	mov	r12, r27
    f730:	b1 e2       	ldi	r27, 0x21	; 33
    f732:	db 2e       	mov	r13, r27
				//Load Nozzle Configuration
				for(iNozzle=0;iNozzle<4;iNozzle++){
                    //Masalah 0-->void
				    ProdId=ProductID[iNozzle];
					if ((ProdId>=1)&&(ProdId<=6)){
				        eeprom_read_block((void*) &ProductName, (const void*) &DefProductName[ProdId-1],10);
    f734:	ad e0       	ldi	r26, 0x0D	; 13
    f736:	aa 2e       	mov	r10, r26
    f738:	b1 2c       	mov	r11, r1
    f73a:	8e 01       	movw	r16, r28
    f73c:	0f 5f       	subi	r16, 0xFF	; 255
    f73e:	1f 4f       	sbci	r17, 0xFF	; 255
						StrPosCopy(ProductName,ProductName,0,8);
					    sprintf_P(lcdteks,PSTR("%d.%s"),(iNozzle+1),ProductName);
    f740:	f3 ed       	ldi	r31, 0xD3	; 211
    f742:	8f 2e       	mov	r8, r31
    f744:	f1 e2       	ldi	r31, 0x21	; 33
    f746:	9f 2e       	mov	r9, r31
                    }
					else{
					       sprintf_P(lcdteks,PSTR("     "));					
					}
				    lcd_print(2+(iNozzle%2),1+(iNozzle/2)*11,lcdteks);
    f748:	eb e0       	ldi	r30, 0x0B	; 11
    f74a:	7e 2e       	mov	r7, r30
                     stLocalAccount=laSelectBalanceType;
					}else
                {
				//MultiProductDisplay Select:
				//Load Nozzle Configuration
				for(iNozzle=0;iNozzle<4;iNozzle++){
    f74c:	6c c0       	rjmp	.+216    	; 0xf826 <FMenuLocalAccount+0x668>
                    //Masalah 0-->void
				    ProdId=ProductID[iNozzle];
    f74e:	f0 e0       	ldi	r31, 0x00	; 0
    f750:	e8 59       	subi	r30, 0x98	; 152
    f752:	fc 4f       	sbci	r31, 0xFC	; 252
    f754:	80 81       	ld	r24, Z
    f756:	80 93 66 03 	sts	0x0366, r24
					if ((ProdId>=1)&&(ProdId<=6)){
    f75a:	98 2f       	mov	r25, r24
    f75c:	91 50       	subi	r25, 0x01	; 1
    f75e:	96 30       	cpi	r25, 0x06	; 6
    f760:	f0 f5       	brcc	.+124    	; 0xf7de <FMenuLocalAccount+0x620>
				        eeprom_read_block((void*) &ProductName, (const void*) &DefProductName[ProdId-1],10);
    f762:	90 e0       	ldi	r25, 0x00	; 0
    f764:	01 97       	sbiw	r24, 0x01	; 1
    f766:	8a 9d       	mul	r24, r10
    f768:	b0 01       	movw	r22, r0
    f76a:	8b 9d       	mul	r24, r11
    f76c:	70 0d       	add	r23, r0
    f76e:	9a 9d       	mul	r25, r10
    f770:	70 0d       	add	r23, r0
    f772:	11 24       	eor	r1, r1
    f774:	64 54       	subi	r22, 0x44	; 68
    f776:	7f 4f       	sbci	r23, 0xFF	; 255
    f778:	c8 01       	movw	r24, r16
    f77a:	4a e0       	ldi	r20, 0x0A	; 10
    f77c:	50 e0       	ldi	r21, 0x00	; 0
    f77e:	0e 94 56 aa 	call	0x154ac	; 0x154ac <__eerd_block_m128>
						StrPosCopy(ProductName,ProductName,0,8);
    f782:	c8 01       	movw	r24, r16
    f784:	b8 01       	movw	r22, r16
    f786:	40 e0       	ldi	r20, 0x00	; 0
    f788:	50 e0       	ldi	r21, 0x00	; 0
    f78a:	28 e0       	ldi	r18, 0x08	; 8
    f78c:	30 e0       	ldi	r19, 0x00	; 0
    f78e:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
					    sprintf_P(lcdteks,PSTR("%d.%s"),(iNozzle+1),ProductName);
    f792:	8d b7       	in	r24, 0x3d	; 61
    f794:	9e b7       	in	r25, 0x3e	; 62
    f796:	08 97       	sbiw	r24, 0x08	; 8
    f798:	0f b6       	in	r0, 0x3f	; 63
    f79a:	f8 94       	cli
    f79c:	9e bf       	out	0x3e, r25	; 62
    f79e:	0f be       	out	0x3f, r0	; 63
    f7a0:	8d bf       	out	0x3d, r24	; 61
    f7a2:	ed b7       	in	r30, 0x3d	; 61
    f7a4:	fe b7       	in	r31, 0x3e	; 62
    f7a6:	31 96       	adiw	r30, 0x01	; 1
    f7a8:	ad b7       	in	r26, 0x3d	; 61
    f7aa:	be b7       	in	r27, 0x3e	; 62
    f7ac:	12 96       	adiw	r26, 0x02	; 2
    f7ae:	fc 92       	st	X, r15
    f7b0:	ee 92       	st	-X, r14
    f7b2:	11 97       	sbiw	r26, 0x01	; 1
    f7b4:	93 82       	std	Z+3, r9	; 0x03
    f7b6:	82 82       	std	Z+2, r8	; 0x02
    f7b8:	80 91 6e 03 	lds	r24, 0x036E
    f7bc:	90 e0       	ldi	r25, 0x00	; 0
    f7be:	01 96       	adiw	r24, 0x01	; 1
    f7c0:	95 83       	std	Z+5, r25	; 0x05
    f7c2:	84 83       	std	Z+4, r24	; 0x04
    f7c4:	17 83       	std	Z+7, r17	; 0x07
    f7c6:	06 83       	std	Z+6, r16	; 0x06
    f7c8:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    f7cc:	ed b7       	in	r30, 0x3d	; 61
    f7ce:	fe b7       	in	r31, 0x3e	; 62
    f7d0:	38 96       	adiw	r30, 0x08	; 8
    f7d2:	0f b6       	in	r0, 0x3f	; 63
    f7d4:	f8 94       	cli
    f7d6:	fe bf       	out	0x3e, r31	; 62
    f7d8:	0f be       	out	0x3f, r0	; 63
    f7da:	ed bf       	out	0x3d, r30	; 61
    f7dc:	12 c0       	rjmp	.+36     	; 0xf802 <FMenuLocalAccount+0x644>
                    }
					else{
					       sprintf_P(lcdteks,PSTR("     "));					
    f7de:	00 d0       	rcall	.+0      	; 0xf7e0 <FMenuLocalAccount+0x622>
    f7e0:	00 d0       	rcall	.+0      	; 0xf7e2 <FMenuLocalAccount+0x624>
    f7e2:	ad b7       	in	r26, 0x3d	; 61
    f7e4:	be b7       	in	r27, 0x3e	; 62
    f7e6:	12 96       	adiw	r26, 0x02	; 2
    f7e8:	fc 92       	st	X, r15
    f7ea:	ee 92       	st	-X, r14
    f7ec:	11 97       	sbiw	r26, 0x01	; 1
    f7ee:	14 96       	adiw	r26, 0x04	; 4
    f7f0:	dc 92       	st	X, r13
    f7f2:	ce 92       	st	-X, r12
    f7f4:	13 97       	sbiw	r26, 0x03	; 3
    f7f6:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    f7fa:	0f 90       	pop	r0
    f7fc:	0f 90       	pop	r0
    f7fe:	0f 90       	pop	r0
    f800:	0f 90       	pop	r0
					}
				    lcd_print(2+(iNozzle%2),1+(iNozzle/2)*11,lcdteks);
    f802:	60 91 6e 03 	lds	r22, 0x036E
    f806:	86 2f       	mov	r24, r22
    f808:	81 70       	andi	r24, 0x01	; 1
    f80a:	66 95       	lsr	r22
    f80c:	67 9d       	mul	r22, r7
    f80e:	60 2d       	mov	r22, r0
    f810:	11 24       	eor	r1, r1
    f812:	6f 5f       	subi	r22, 0xFF	; 255
    f814:	8e 5f       	subi	r24, 0xFE	; 254
    f816:	a7 01       	movw	r20, r14
    f818:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
                     stLocalAccount=laSelectBalanceType;
					}else
                {
				//MultiProductDisplay Select:
				//Load Nozzle Configuration
				for(iNozzle=0;iNozzle<4;iNozzle++){
    f81c:	80 91 6e 03 	lds	r24, 0x036E
    f820:	8f 5f       	subi	r24, 0xFF	; 255
    f822:	80 93 6e 03 	sts	0x036E, r24
    f826:	e0 91 6e 03 	lds	r30, 0x036E
    f82a:	e4 30       	cpi	r30, 0x04	; 4
    f82c:	08 f4       	brcc	.+2      	; 0xf830 <FMenuLocalAccount+0x672>
    f82e:	8f cf       	rjmp	.-226    	; 0xf74e <FMenuLocalAccount+0x590>
					else{
					       sprintf_P(lcdteks,PSTR("     "));					
					}
				    lcd_print(2+(iNozzle%2),1+(iNozzle/2)*11,lcdteks);
				}
	            lcd_printf(4,1,PSTR("[*]Back             "));   //"[*]Back             "				
    f830:	84 e0       	ldi	r24, 0x04	; 4
    f832:	61 e0       	ldi	r22, 0x01	; 1
    f834:	48 eb       	ldi	r20, 0xB8	; 184
    f836:	51 e2       	ldi	r21, 0x21	; 33
    f838:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
				stLocalAccount=laSelectProductInput;
    f83c:	8c e0       	ldi	r24, 0x0C	; 12
    f83e:	68 c3       	rjmp	.+1744   	; 0xff10 <FMenuLocalAccount+0xd52>
				}
		        break; 
           case laSelectProductInput:
				KeyPressed=_key_scan(1);
    f840:	81 e0       	ldi	r24, 0x01	; 1
    f842:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <_key_scan>
    f846:	e8 2e       	mov	r14, r24
			    KeyChar=_key_btn(KeyPressed);
    f848:	0e 94 49 a3 	call	0x14692	; 0x14692 <_key_btn>
				if ((KeyChar>='1')&&(KeyChar<='4')){
    f84c:	81 53       	subi	r24, 0x31	; 49
    f84e:	84 30       	cpi	r24, 0x04	; 4
    f850:	08 f0       	brcs	.+2      	; 0xf854 <FMenuLocalAccount+0x696>
    f852:	45 c0       	rjmp	.+138    	; 0xf8de <FMenuLocalAccount+0x720>
				    iNozzle=KeyChar-'1';
    f854:	80 93 6e 03 	sts	0x036E, r24
				    eeprom_read_block((void*) &ProductName, (const void*) &DefProductName[ProductID[iNozzle]-1],10);
    f858:	e8 2f       	mov	r30, r24
    f85a:	f0 e0       	ldi	r31, 0x00	; 0
    f85c:	e8 59       	subi	r30, 0x98	; 152
    f85e:	fc 4f       	sbci	r31, 0xFC	; 252
    f860:	20 81       	ld	r18, Z
    f862:	30 e0       	ldi	r19, 0x00	; 0
    f864:	21 50       	subi	r18, 0x01	; 1
    f866:	30 40       	sbci	r19, 0x00	; 0
    f868:	8d e0       	ldi	r24, 0x0D	; 13
    f86a:	90 e0       	ldi	r25, 0x00	; 0
    f86c:	28 9f       	mul	r18, r24
    f86e:	b0 01       	movw	r22, r0
    f870:	29 9f       	mul	r18, r25
    f872:	70 0d       	add	r23, r0
    f874:	38 9f       	mul	r19, r24
    f876:	70 0d       	add	r23, r0
    f878:	11 24       	eor	r1, r1
    f87a:	64 54       	subi	r22, 0x44	; 68
    f87c:	7f 4f       	sbci	r23, 0xFF	; 255
    f87e:	8e 01       	movw	r16, r28
    f880:	0f 5f       	subi	r16, 0xFF	; 255
    f882:	1f 4f       	sbci	r17, 0xFF	; 255
    f884:	c8 01       	movw	r24, r16
    f886:	4a e0       	ldi	r20, 0x0A	; 10
    f888:	50 e0       	ldi	r21, 0x00	; 0
    f88a:	0e 94 56 aa 	call	0x154ac	; 0x154ac <__eerd_block_m128>
					sprintf_P(strProduct,PSTR("%s"),ProductName);
    f88e:	00 d0       	rcall	.+0      	; 0xf890 <FMenuLocalAccount+0x6d2>
    f890:	00 d0       	rcall	.+0      	; 0xf892 <FMenuLocalAccount+0x6d4>
    f892:	00 d0       	rcall	.+0      	; 0xf894 <FMenuLocalAccount+0x6d6>
    f894:	ed b7       	in	r30, 0x3d	; 61
    f896:	fe b7       	in	r31, 0x3e	; 62
    f898:	31 96       	adiw	r30, 0x01	; 1
    f89a:	82 e4       	ldi	r24, 0x42	; 66
    f89c:	98 e0       	ldi	r25, 0x08	; 8
    f89e:	ad b7       	in	r26, 0x3d	; 61
    f8a0:	be b7       	in	r27, 0x3e	; 62
    f8a2:	12 96       	adiw	r26, 0x02	; 2
    f8a4:	9c 93       	st	X, r25
    f8a6:	8e 93       	st	-X, r24
    f8a8:	11 97       	sbiw	r26, 0x01	; 1
    f8aa:	85 eb       	ldi	r24, 0xB5	; 181
    f8ac:	91 e2       	ldi	r25, 0x21	; 33
    f8ae:	93 83       	std	Z+3, r25	; 0x03
    f8b0:	82 83       	std	Z+2, r24	; 0x02
    f8b2:	15 83       	std	Z+5, r17	; 0x05
    f8b4:	04 83       	std	Z+4, r16	; 0x04
    f8b6:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
					NozzleID=iNozzle+1;
    f8ba:	80 91 6e 03 	lds	r24, 0x036E
    f8be:	8f 5f       	subi	r24, 0xFF	; 255
    f8c0:	80 93 51 08 	sts	0x0851, r24
                    stLocalAccount=laSelectBalanceType;
    f8c4:	8d e0       	ldi	r24, 0x0D	; 13
    f8c6:	80 93 5b 01 	sts	0x015B, r24
					lcd_clear();
    f8ca:	ed b7       	in	r30, 0x3d	; 61
    f8cc:	fe b7       	in	r31, 0x3e	; 62
    f8ce:	36 96       	adiw	r30, 0x06	; 6
    f8d0:	0f b6       	in	r0, 0x3f	; 63
    f8d2:	f8 94       	cli
    f8d4:	fe bf       	out	0x3e, r31	; 62
    f8d6:	0f be       	out	0x3f, r0	; 63
    f8d8:	ed bf       	out	0x3d, r30	; 61
    f8da:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
					}                
				if (KeyPressed==_KEY_CANCEL)stLocalAccount=laSelectFIP;//Back To Pump Selection
    f8de:	fe 2d       	mov	r31, r14
    f8e0:	f7 3e       	cpi	r31, 0xE7	; 231
    f8e2:	09 f0       	breq	.+2      	; 0xf8e6 <FMenuLocalAccount+0x728>
    f8e4:	07 c5       	rjmp	.+2574   	; 0x102f4 <FMenuLocalAccount+0x1136>
    f8e6:	89 e0       	ldi	r24, 0x09	; 9
    f8e8:	13 c3       	rjmp	.+1574   	; 0xff10 <FMenuLocalAccount+0xd52>
		        break;
           case laSelectBalanceType:
		        lcd_clear();
    f8ea:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
		        sprintf_P(lcdteks,PSTR("P%s-%s "),strFIP,strProduct);      
    f8ee:	8d b7       	in	r24, 0x3d	; 61
    f8f0:	9e b7       	in	r25, 0x3e	; 62
    f8f2:	08 97       	sbiw	r24, 0x08	; 8
    f8f4:	0f b6       	in	r0, 0x3f	; 63
    f8f6:	f8 94       	cli
    f8f8:	9e bf       	out	0x3e, r25	; 62
    f8fa:	0f be       	out	0x3f, r0	; 63
    f8fc:	8d bf       	out	0x3d, r24	; 61
    f8fe:	ed b7       	in	r30, 0x3d	; 61
    f900:	fe b7       	in	r31, 0x3e	; 62
    f902:	31 96       	adiw	r30, 0x01	; 1
    f904:	8e 01       	movw	r16, r28
    f906:	04 5f       	subi	r16, 0xF4	; 244
    f908:	1f 4f       	sbci	r17, 0xFF	; 255
    f90a:	ad b7       	in	r26, 0x3d	; 61
    f90c:	be b7       	in	r27, 0x3e	; 62
    f90e:	12 96       	adiw	r26, 0x02	; 2
    f910:	1c 93       	st	X, r17
    f912:	0e 93       	st	-X, r16
    f914:	11 97       	sbiw	r26, 0x01	; 1
    f916:	8d ea       	ldi	r24, 0xAD	; 173
    f918:	91 e2       	ldi	r25, 0x21	; 33
    f91a:	93 83       	std	Z+3, r25	; 0x03
    f91c:	82 83       	std	Z+2, r24	; 0x02
    f91e:	80 e7       	ldi	r24, 0x70	; 112
    f920:	93 e0       	ldi	r25, 0x03	; 3
    f922:	95 83       	std	Z+5, r25	; 0x05
    f924:	84 83       	std	Z+4, r24	; 0x04
    f926:	82 e4       	ldi	r24, 0x42	; 66
    f928:	98 e0       	ldi	r25, 0x08	; 8
    f92a:	97 83       	std	Z+7, r25	; 0x07
    f92c:	86 83       	std	Z+6, r24	; 0x06
    f92e:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
				 lcd_print(1,1,lcdteks);                        //"P01-Pertamax        "                                                                      
    f932:	ed b7       	in	r30, 0x3d	; 61
    f934:	fe b7       	in	r31, 0x3e	; 62
    f936:	38 96       	adiw	r30, 0x08	; 8
    f938:	0f b6       	in	r0, 0x3f	; 63
    f93a:	f8 94       	cli
    f93c:	fe bf       	out	0x3e, r31	; 62
    f93e:	0f be       	out	0x3f, r0	; 63
    f940:	ed bf       	out	0x3d, r30	; 61
    f942:	81 e0       	ldi	r24, 0x01	; 1
    f944:	61 e0       	ldi	r22, 0x01	; 1
    f946:	a8 01       	movw	r20, r16
    f948:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
		        lcd_printf(2,1,PSTR("[1]Volume           "));   //"[1]Premium          "                                                                      
    f94c:	82 e0       	ldi	r24, 0x02	; 2
    f94e:	61 e0       	ldi	r22, 0x01	; 1
    f950:	48 e9       	ldi	r20, 0x98	; 152
    f952:	51 e2       	ldi	r21, 0x21	; 33
    f954:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
				lcd_printf(3,1,PSTR("[2]Amount           "));   //"[2]Pertamax         "
    f958:	83 e0       	ldi	r24, 0x03	; 3
    f95a:	61 e0       	ldi	r22, 0x01	; 1
    f95c:	43 e8       	ldi	r20, 0x83	; 131
    f95e:	51 e2       	ldi	r21, 0x21	; 33
    f960:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
				lcd_printf(4,1,PSTR("[*]Back    [#]Next  "));   //"[*]Back             "						        
    f964:	84 e0       	ldi	r24, 0x04	; 4
    f966:	61 e0       	ldi	r22, 0x01	; 1
    f968:	4e e6       	ldi	r20, 0x6E	; 110
    f96a:	51 e2       	ldi	r21, 0x21	; 33
    f96c:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
	            //lcd_printf(4,1,PSTR("[*]Back    [#]Next  "));   //"[*]Back             "						        
                stLocalAccount=laSelectBalanceTypeInput;   
    f970:	8e e0       	ldi	r24, 0x0E	; 14
    f972:	ce c2       	rjmp	.+1436   	; 0xff10 <FMenuLocalAccount+0xd52>
		        break;
           case laSelectBalanceTypeInput:
				KeyPressed=_key_scan(1);
    f974:	81 e0       	ldi	r24, 0x01	; 1
    f976:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <_key_scan>
    f97a:	08 2f       	mov	r16, r24
			    KeyChar=_key_btn(KeyPressed);
    f97c:	0e 94 49 a3 	call	0x14692	; 0x14692 <_key_btn>
				if ((KeyChar>='1')&&(KeyChar<='2')){
    f980:	98 2f       	mov	r25, r24
    f982:	91 53       	subi	r25, 0x31	; 49
    f984:	92 30       	cpi	r25, 0x02	; 2
    f986:	60 f5       	brcc	.+88     	; 0xf9e0 <FMenuLocalAccount+0x822>
    f988:	27 e8       	ldi	r18, 0x87	; 135
    f98a:	34 e0       	ldi	r19, 0x04	; 4
                    if(KeyChar=='1'){
    f98c:	81 33       	cpi	r24, 0x31	; 49
    f98e:	91 f4       	brne	.+36     	; 0xf9b4 <FMenuLocalAccount+0x7f6>
					   BalanceType=1;
    f990:	81 e0       	ldi	r24, 0x01	; 1
    f992:	80 93 73 03 	sts	0x0373, r24
					   sprintf_P(strBalanceType,PSTR("V"));
    f996:	00 d0       	rcall	.+0      	; 0xf998 <FMenuLocalAccount+0x7da>
    f998:	00 d0       	rcall	.+0      	; 0xf99a <FMenuLocalAccount+0x7dc>
    f99a:	ad b7       	in	r26, 0x3d	; 61
    f99c:	be b7       	in	r27, 0x3e	; 62
    f99e:	12 96       	adiw	r26, 0x02	; 2
    f9a0:	3c 93       	st	X, r19
    f9a2:	2e 93       	st	-X, r18
    f9a4:	11 97       	sbiw	r26, 0x01	; 1
    f9a6:	2c e6       	ldi	r18, 0x6C	; 108
    f9a8:	31 e2       	ldi	r19, 0x21	; 33
    f9aa:	14 96       	adiw	r26, 0x04	; 4
    f9ac:	3c 93       	st	X, r19
    f9ae:	2e 93       	st	-X, r18
    f9b0:	13 97       	sbiw	r26, 0x03	; 3
    f9b2:	0d c0       	rjmp	.+26     	; 0xf9ce <FMenuLocalAccount+0x810>
					   }
					else
                    if(KeyChar=='2'){
					   BalanceType=2;
    f9b4:	82 e0       	ldi	r24, 0x02	; 2
    f9b6:	80 93 73 03 	sts	0x0373, r24
                       sprintf_P(strBalanceType,PSTR("A"));
    f9ba:	00 d0       	rcall	.+0      	; 0xf9bc <FMenuLocalAccount+0x7fe>
    f9bc:	00 d0       	rcall	.+0      	; 0xf9be <FMenuLocalAccount+0x800>
    f9be:	ed b7       	in	r30, 0x3d	; 61
    f9c0:	fe b7       	in	r31, 0x3e	; 62
    f9c2:	32 83       	std	Z+2, r19	; 0x02
    f9c4:	21 83       	std	Z+1, r18	; 0x01
    f9c6:	2a e6       	ldi	r18, 0x6A	; 106
    f9c8:	31 e2       	ldi	r19, 0x21	; 33
    f9ca:	34 83       	std	Z+4, r19	; 0x04
    f9cc:	23 83       	std	Z+3, r18	; 0x03
    f9ce:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    f9d2:	0f 90       	pop	r0
    f9d4:	0f 90       	pop	r0
    f9d6:	0f 90       	pop	r0
    f9d8:	0f 90       	pop	r0
					   }
				    stLocalAccount=laBalanceValue;  
    f9da:	8f e0       	ldi	r24, 0x0F	; 15
    f9dc:	80 93 5b 01 	sts	0x015B, r24
					}              
				if (KeyPressed==_KEY_CANCEL){
    f9e0:	07 3e       	cpi	r16, 0xE7	; 231
    f9e2:	c9 f4       	brne	.+50     	; 0xfa16 <FMenuLocalAccount+0x858>
				    if ((ProductID[0]>=1)&&(ProductID[0]<=6)&&(ProductID[1]==0)&&(ProductID[2]==0)&&(ProductID[3]==0))
    f9e4:	80 91 68 03 	lds	r24, 0x0368
    f9e8:	81 50       	subi	r24, 0x01	; 1
    f9ea:	86 30       	cpi	r24, 0x06	; 6
    f9ec:	70 f4       	brcc	.+28     	; 0xfa0a <FMenuLocalAccount+0x84c>
    f9ee:	80 91 69 03 	lds	r24, 0x0369
    f9f2:	88 23       	and	r24, r24
    f9f4:	51 f4       	brne	.+20     	; 0xfa0a <FMenuLocalAccount+0x84c>
    f9f6:	80 91 6a 03 	lds	r24, 0x036A
    f9fa:	88 23       	and	r24, r24
    f9fc:	31 f4       	brne	.+12     	; 0xfa0a <FMenuLocalAccount+0x84c>
    f9fe:	80 91 6b 03 	lds	r24, 0x036B
    fa02:	88 23       	and	r24, r24
    fa04:	11 f4       	brne	.+4      	; 0xfa0a <FMenuLocalAccount+0x84c>
					     stLocalAccount=laSelectFIP;//Back To FIP Select Non MPD
    fa06:	89 e0       	ldi	r24, 0x09	; 9
    fa08:	01 c0       	rjmp	.+2      	; 0xfa0c <FMenuLocalAccount+0x84e>
                    else stLocalAccount=laSelectProduct;//Back To Product Selection MPD
    fa0a:	8b e0       	ldi	r24, 0x0B	; 11
    fa0c:	80 93 5b 01 	sts	0x015B, r24
					lcd_clear();
    fa10:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
    fa14:	6f c4       	rjmp	.+2270   	; 0x102f4 <FMenuLocalAccount+0x1136>
					}
                else
				if (KeyPressed==_KEY_ENTER){
    fa16:	07 3b       	cpi	r16, 0xB7	; 183
    fa18:	09 f0       	breq	.+2      	; 0xfa1c <FMenuLocalAccount+0x85e>
    fa1a:	6c c4       	rjmp	.+2264   	; 0x102f4 <FMenuLocalAccount+0x1136>
				    BalanceType=1;
    fa1c:	01 e0       	ldi	r16, 0x01	; 1
    fa1e:	00 93 73 03 	sts	0x0373, r16
					sprintf_P(strBalanceType,PSTR("A"));
    fa22:	00 d0       	rcall	.+0      	; 0xfa24 <FMenuLocalAccount+0x866>
    fa24:	00 d0       	rcall	.+0      	; 0xfa26 <FMenuLocalAccount+0x868>
    fa26:	87 e8       	ldi	r24, 0x87	; 135
    fa28:	94 e0       	ldi	r25, 0x04	; 4
    fa2a:	ad b7       	in	r26, 0x3d	; 61
    fa2c:	be b7       	in	r27, 0x3e	; 62
    fa2e:	12 96       	adiw	r26, 0x02	; 2
    fa30:	9c 93       	st	X, r25
    fa32:	8e 93       	st	-X, r24
    fa34:	11 97       	sbiw	r26, 0x01	; 1
    fa36:	88 e6       	ldi	r24, 0x68	; 104
    fa38:	91 e2       	ldi	r25, 0x21	; 33
    fa3a:	14 96       	adiw	r26, 0x04	; 4
    fa3c:	9c 93       	st	X, r25
    fa3e:	8e 93       	st	-X, r24
    fa40:	13 97       	sbiw	r26, 0x03	; 3
    fa42:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
					//sprintf_P(strBalanceValue,PSTR("999"));
					IsFullAuthorized=True;
    fa46:	00 93 65 03 	sts	0x0365, r16
                    stLocalAccount=laOdometer;//FullAuthorized
    fa4a:	81 e1       	ldi	r24, 0x11	; 17
    fa4c:	80 93 5b 01 	sts	0x015B, r24
    fa50:	0f 90       	pop	r0
    fa52:	0f 90       	pop	r0
    fa54:	0f 90       	pop	r0
    fa56:	0f 90       	pop	r0
    fa58:	4d c4       	rjmp	.+2202   	; 0x102f4 <FMenuLocalAccount+0x1136>
					}

		        break;
           case laBalanceValue:
		        lcd_clear();
    fa5a:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
		        if(BalanceType==1){
    fa5e:	80 91 73 03 	lds	r24, 0x0373
    fa62:	81 30       	cpi	r24, 0x01	; 1
    fa64:	f1 f5       	brne	.+124    	; 0xfae2 <FMenuLocalAccount+0x924>
		           sprintf_P(lcdteks,PSTR("P%s-%s "),strFIP,strProduct);      
    fa66:	ed b7       	in	r30, 0x3d	; 61
    fa68:	fe b7       	in	r31, 0x3e	; 62
    fa6a:	38 97       	sbiw	r30, 0x08	; 8
    fa6c:	0f b6       	in	r0, 0x3f	; 63
    fa6e:	f8 94       	cli
    fa70:	fe bf       	out	0x3e, r31	; 62
    fa72:	0f be       	out	0x3f, r0	; 63
    fa74:	ed bf       	out	0x3d, r30	; 61
    fa76:	31 96       	adiw	r30, 0x01	; 1
    fa78:	8e 01       	movw	r16, r28
    fa7a:	04 5f       	subi	r16, 0xF4	; 244
    fa7c:	1f 4f       	sbci	r17, 0xFF	; 255
    fa7e:	ad b7       	in	r26, 0x3d	; 61
    fa80:	be b7       	in	r27, 0x3e	; 62
    fa82:	12 96       	adiw	r26, 0x02	; 2
    fa84:	1c 93       	st	X, r17
    fa86:	0e 93       	st	-X, r16
    fa88:	11 97       	sbiw	r26, 0x01	; 1
    fa8a:	80 e6       	ldi	r24, 0x60	; 96
    fa8c:	91 e2       	ldi	r25, 0x21	; 33
    fa8e:	93 83       	std	Z+3, r25	; 0x03
    fa90:	82 83       	std	Z+2, r24	; 0x02
    fa92:	80 e7       	ldi	r24, 0x70	; 112
    fa94:	93 e0       	ldi	r25, 0x03	; 3
    fa96:	95 83       	std	Z+5, r25	; 0x05
    fa98:	84 83       	std	Z+4, r24	; 0x04
    fa9a:	82 e4       	ldi	r24, 0x42	; 66
    fa9c:	98 e0       	ldi	r25, 0x08	; 8
    fa9e:	97 83       	std	Z+7, r25	; 0x07
    faa0:	86 83       	std	Z+6, r24	; 0x06
    faa2:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
				    lcd_print(1,1,lcdteks);                        //"P01-Pertamax        "                                                                      
    faa6:	ed b7       	in	r30, 0x3d	; 61
    faa8:	fe b7       	in	r31, 0x3e	; 62
    faaa:	38 96       	adiw	r30, 0x08	; 8
    faac:	0f b6       	in	r0, 0x3f	; 63
    faae:	f8 94       	cli
    fab0:	fe bf       	out	0x3e, r31	; 62
    fab2:	0f be       	out	0x3f, r0	; 63
    fab4:	ed bf       	out	0x3d, r30	; 61
    fab6:	81 e0       	ldi	r24, 0x01	; 1
    fab8:	61 e0       	ldi	r22, 0x01	; 1
    faba:	a8 01       	movw	r20, r16
    fabc:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
		           lcd_printf(2,1,PSTR("[1]Volume:_         "));   //"[1]Volume:_         "                                                                      
    fac0:	82 e0       	ldi	r24, 0x02	; 2
    fac2:	61 e0       	ldi	r22, 0x01	; 1
    fac4:	4b e4       	ldi	r20, 0x4B	; 75
    fac6:	51 e2       	ldi	r21, 0x21	; 33
    fac8:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
				   lcd_printf(3,1,PSTR("                    "));   //"                    "
    facc:	83 e0       	ldi	r24, 0x03	; 3
    face:	61 e0       	ldi	r22, 0x01	; 1
    fad0:	46 e3       	ldi	r20, 0x36	; 54
    fad2:	51 e2       	ldi	r21, 0x21	; 33
    fad4:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
	               lcd_printf(4,1,PSTR("[*]Back  [#]OK      "));   //"[*]Back  [#]OK     "						        
    fad8:	84 e0       	ldi	r24, 0x04	; 4
    fada:	61 e0       	ldi	r22, 0x01	; 1
    fadc:	41 e2       	ldi	r20, 0x21	; 33
    fade:	51 e2       	ldi	r21, 0x21	; 33
    fae0:	42 c0       	rjmp	.+132    	; 0xfb66 <FMenuLocalAccount+0x9a8>
				   }
                else
		        if(BalanceType==2){
    fae2:	82 30       	cpi	r24, 0x02	; 2
    fae4:	09 f0       	breq	.+2      	; 0xfae8 <FMenuLocalAccount+0x92a>
    fae6:	41 c0       	rjmp	.+130    	; 0xfb6a <FMenuLocalAccount+0x9ac>
		           sprintf_P(lcdteks,PSTR("P%s-%s "),strFIP,strProduct);      
    fae8:	8d b7       	in	r24, 0x3d	; 61
    faea:	9e b7       	in	r25, 0x3e	; 62
    faec:	08 97       	sbiw	r24, 0x08	; 8
    faee:	0f b6       	in	r0, 0x3f	; 63
    faf0:	f8 94       	cli
    faf2:	9e bf       	out	0x3e, r25	; 62
    faf4:	0f be       	out	0x3f, r0	; 63
    faf6:	8d bf       	out	0x3d, r24	; 61
    faf8:	ed b7       	in	r30, 0x3d	; 61
    fafa:	fe b7       	in	r31, 0x3e	; 62
    fafc:	31 96       	adiw	r30, 0x01	; 1
    fafe:	8e 01       	movw	r16, r28
    fb00:	04 5f       	subi	r16, 0xF4	; 244
    fb02:	1f 4f       	sbci	r17, 0xFF	; 255
    fb04:	ad b7       	in	r26, 0x3d	; 61
    fb06:	be b7       	in	r27, 0x3e	; 62
    fb08:	12 96       	adiw	r26, 0x02	; 2
    fb0a:	1c 93       	st	X, r17
    fb0c:	0e 93       	st	-X, r16
    fb0e:	11 97       	sbiw	r26, 0x01	; 1
    fb10:	89 e1       	ldi	r24, 0x19	; 25
    fb12:	91 e2       	ldi	r25, 0x21	; 33
    fb14:	93 83       	std	Z+3, r25	; 0x03
    fb16:	82 83       	std	Z+2, r24	; 0x02
    fb18:	80 e7       	ldi	r24, 0x70	; 112
    fb1a:	93 e0       	ldi	r25, 0x03	; 3
    fb1c:	95 83       	std	Z+5, r25	; 0x05
    fb1e:	84 83       	std	Z+4, r24	; 0x04
    fb20:	82 e4       	ldi	r24, 0x42	; 66
    fb22:	98 e0       	ldi	r25, 0x08	; 8
    fb24:	97 83       	std	Z+7, r25	; 0x07
    fb26:	86 83       	std	Z+6, r24	; 0x06
    fb28:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
				   lcd_print(1,1,lcdteks);                         //"P01-Pertamax        "                                                                      
    fb2c:	ed b7       	in	r30, 0x3d	; 61
    fb2e:	fe b7       	in	r31, 0x3e	; 62
    fb30:	38 96       	adiw	r30, 0x08	; 8
    fb32:	0f b6       	in	r0, 0x3f	; 63
    fb34:	f8 94       	cli
    fb36:	fe bf       	out	0x3e, r31	; 62
    fb38:	0f be       	out	0x3f, r0	; 63
    fb3a:	ed bf       	out	0x3d, r30	; 61
    fb3c:	81 e0       	ldi	r24, 0x01	; 1
    fb3e:	61 e0       	ldi	r22, 0x01	; 1
    fb40:	a8 01       	movw	r20, r16
    fb42:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
		           lcd_printf(2,1,PSTR("                    "));   //"                    "                                                                      
    fb46:	82 e0       	ldi	r24, 0x02	; 2
    fb48:	61 e0       	ldi	r22, 0x01	; 1
    fb4a:	44 e0       	ldi	r20, 0x04	; 4
    fb4c:	51 e2       	ldi	r21, 0x21	; 33
    fb4e:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
				   lcd_printf(3,1,PSTR("[2]Amount:_         "));   //"[2]Amount:_         "
    fb52:	83 e0       	ldi	r24, 0x03	; 3
    fb54:	61 e0       	ldi	r22, 0x01	; 1
    fb56:	4f ee       	ldi	r20, 0xEF	; 239
    fb58:	50 e2       	ldi	r21, 0x20	; 32
    fb5a:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
	               lcd_printf(4,1,PSTR("[*]Back  [#]OK      "));   //"[*]Back  [#]OK      "			        
    fb5e:	84 e0       	ldi	r24, 0x04	; 4
    fb60:	61 e0       	ldi	r22, 0x01	; 1
    fb62:	4a ed       	ldi	r20, 0xDA	; 218
    fb64:	50 e2       	ldi	r21, 0x20	; 32
    fb66:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
				   }
                iLoop=0;
    fb6a:	10 92 64 03 	sts	0x0364, r1
    fb6e:	10 92 63 03 	sts	0x0363, r1
				iValuePos=0;
    fb72:	10 92 6f 03 	sts	0x036F, r1
				//ValueChar[iValuePos]=' ';
		        stLocalAccount=laBalanceValueInput;  
    fb76:	80 e1       	ldi	r24, 0x10	; 16
    fb78:	cb c1       	rjmp	.+918    	; 0xff10 <FMenuLocalAccount+0xd52>
		        break; 
           case laBalanceValueInput:
		        uiResult=UserInput(UI_NUMBER_R,(1+BalanceType),11,strBalanceValue,0,10); 
    fb7a:	60 91 73 03 	lds	r22, 0x0373
    fb7e:	6f 5f       	subi	r22, 0xFF	; 255
    fb80:	81 e0       	ldi	r24, 0x01	; 1
    fb82:	4b e0       	ldi	r20, 0x0B	; 11
    fb84:	28 e1       	ldi	r18, 0x18	; 24
    fb86:	3d e0       	ldi	r19, 0x0D	; 13
    fb88:	00 e0       	ldi	r16, 0x00	; 0
    fb8a:	10 e0       	ldi	r17, 0x00	; 0
    fb8c:	7a e0       	ldi	r23, 0x0A	; 10
    fb8e:	e7 2e       	mov	r14, r23
    fb90:	0e 94 d3 39 	call	0x73a6	; 0x73a6 <UserInput>
				if (uiResult==USER_CANCEL){
    fb94:	81 30       	cpi	r24, 0x01	; 1
    fb96:	49 f4       	brne	.+18     	; 0xfbaa <FMenuLocalAccount+0x9ec>
				    lcd_clear();
    fb98:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
    fb9c:	87 ea       	ldi	r24, 0xA7	; 167
    fb9e:	91 e6       	ldi	r25, 0x61	; 97
    fba0:	01 97       	sbiw	r24, 0x01	; 1
    fba2:	f1 f7       	brne	.-4      	; 0xfba0 <FMenuLocalAccount+0x9e2>
    fba4:	00 c0       	rjmp	.+0      	; 0xfba6 <FMenuLocalAccount+0x9e8>
    fba6:	00 00       	nop
    fba8:	f9 c0       	rjmp	.+498    	; 0xfd9c <FMenuLocalAccount+0xbde>
					_delay_ms(100);		        
				    stLocalAccount=laSelectBalanceType;		        
					}
				else
				if (uiResult==USER_OK){				    
    fbaa:	83 30       	cpi	r24, 0x03	; 3
    fbac:	09 f0       	breq	.+2      	; 0xfbb0 <FMenuLocalAccount+0x9f2>
    fbae:	a2 c3       	rjmp	.+1860   	; 0x102f4 <FMenuLocalAccount+0x1136>
				    stLocalAccount=laOdometer;
    fbb0:	81 e1       	ldi	r24, 0x11	; 17
    fbb2:	80 93 5b 01 	sts	0x015B, r24
					lcd_clear();
    fbb6:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
    fbba:	a7 ea       	ldi	r26, 0xA7	; 167
    fbbc:	b1 e6       	ldi	r27, 0x61	; 97
    fbbe:	11 97       	sbiw	r26, 0x01	; 1
    fbc0:	f1 f7       	brne	.-4      	; 0xfbbe <FMenuLocalAccount+0xa00>
    fbc2:	00 c0       	rjmp	.+0      	; 0xfbc4 <FMenuLocalAccount+0xa06>
    fbc4:	00 00       	nop
    fbc6:	96 c3       	rjmp	.+1836   	; 0x102f4 <FMenuLocalAccount+0x1136>
					_delay_ms(100);		        
					}
*/
		        break;
           case laOdometer://GetOdometer			
		        lcd_clear();
    fbc8:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
				if (IsFullAuthorized==True){
    fbcc:	80 91 65 03 	lds	r24, 0x0365
    fbd0:	81 30       	cpi	r24, 0x01	; 1
    fbd2:	09 f0       	breq	.+2      	; 0xfbd6 <FMenuLocalAccount+0xa18>
    fbd4:	47 c0       	rjmp	.+142    	; 0xfc64 <FMenuLocalAccount+0xaa6>
				    lcd_printf(1,1,PSTR("Pump Product   Full"));
    fbd6:	61 e0       	ldi	r22, 0x01	; 1
    fbd8:	46 ec       	ldi	r20, 0xC6	; 198
    fbda:	50 e2       	ldi	r21, 0x20	; 32
    fbdc:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
					sprintf_P(lcdteks,PSTR("  %s %s "),strFIP,strProduct);    lcd_print(2,1,lcdteks);    //"P01  Pertamax       "
    fbe0:	ed b7       	in	r30, 0x3d	; 61
    fbe2:	fe b7       	in	r31, 0x3e	; 62
    fbe4:	38 97       	sbiw	r30, 0x08	; 8
    fbe6:	0f b6       	in	r0, 0x3f	; 63
    fbe8:	f8 94       	cli
    fbea:	fe bf       	out	0x3e, r31	; 62
    fbec:	0f be       	out	0x3f, r0	; 63
    fbee:	ed bf       	out	0x3d, r30	; 61
    fbf0:	31 96       	adiw	r30, 0x01	; 1
    fbf2:	8e 01       	movw	r16, r28
    fbf4:	04 5f       	subi	r16, 0xF4	; 244
    fbf6:	1f 4f       	sbci	r17, 0xFF	; 255
    fbf8:	ad b7       	in	r26, 0x3d	; 61
    fbfa:	be b7       	in	r27, 0x3e	; 62
    fbfc:	12 96       	adiw	r26, 0x02	; 2
    fbfe:	1c 93       	st	X, r17
    fc00:	0e 93       	st	-X, r16
    fc02:	11 97       	sbiw	r26, 0x01	; 1
    fc04:	8d eb       	ldi	r24, 0xBD	; 189
    fc06:	90 e2       	ldi	r25, 0x20	; 32
    fc08:	93 83       	std	Z+3, r25	; 0x03
    fc0a:	82 83       	std	Z+2, r24	; 0x02
    fc0c:	80 e7       	ldi	r24, 0x70	; 112
    fc0e:	93 e0       	ldi	r25, 0x03	; 3
    fc10:	95 83       	std	Z+5, r25	; 0x05
    fc12:	84 83       	std	Z+4, r24	; 0x04
    fc14:	82 e4       	ldi	r24, 0x42	; 66
    fc16:	98 e0       	ldi	r25, 0x08	; 8
    fc18:	97 83       	std	Z+7, r25	; 0x07
    fc1a:	86 83       	std	Z+6, r24	; 0x06
    fc1c:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    fc20:	ed b7       	in	r30, 0x3d	; 61
    fc22:	fe b7       	in	r31, 0x3e	; 62
    fc24:	38 96       	adiw	r30, 0x08	; 8
    fc26:	0f b6       	in	r0, 0x3f	; 63
    fc28:	f8 94       	cli
    fc2a:	fe bf       	out	0x3e, r31	; 62
    fc2c:	0f be       	out	0x3f, r0	; 63
    fc2e:	ed bf       	out	0x3d, r30	; 61
    fc30:	82 e0       	ldi	r24, 0x02	; 2
    fc32:	61 e0       	ldi	r22, 0x01	; 1
    fc34:	a8 01       	movw	r20, r16
    fc36:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
		            sprintf_P(lcdteks,PSTR("  Tank"));            lcd_print(2,14,lcdteks);   //"P01  Pertamax 500000"
    fc3a:	00 d0       	rcall	.+0      	; 0xfc3c <FMenuLocalAccount+0xa7e>
    fc3c:	00 d0       	rcall	.+0      	; 0xfc3e <FMenuLocalAccount+0xa80>
    fc3e:	ad b7       	in	r26, 0x3d	; 61
    fc40:	be b7       	in	r27, 0x3e	; 62
    fc42:	12 96       	adiw	r26, 0x02	; 2
    fc44:	1c 93       	st	X, r17
    fc46:	0e 93       	st	-X, r16
    fc48:	11 97       	sbiw	r26, 0x01	; 1
    fc4a:	86 eb       	ldi	r24, 0xB6	; 182
    fc4c:	90 e2       	ldi	r25, 0x20	; 32
    fc4e:	14 96       	adiw	r26, 0x04	; 4
    fc50:	9c 93       	st	X, r25
    fc52:	8e 93       	st	-X, r24
    fc54:	13 97       	sbiw	r26, 0x03	; 3
    fc56:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    fc5a:	0f 90       	pop	r0
    fc5c:	0f 90       	pop	r0
    fc5e:	0f 90       	pop	r0
    fc60:	0f 90       	pop	r0
    fc62:	5e c0       	rjmp	.+188    	; 0xfd20 <FMenuLocalAccount+0xb62>
				}
                else{
		            if (BalanceType==1) lcd_printf(1,1,PSTR("Pump Product Volume"));
    fc64:	80 91 73 03 	lds	r24, 0x0373
    fc68:	81 30       	cpi	r24, 0x01	; 1
    fc6a:	29 f4       	brne	.+10     	; 0xfc76 <FMenuLocalAccount+0xab8>
    fc6c:	61 e0       	ldi	r22, 0x01	; 1
    fc6e:	42 ea       	ldi	r20, 0xA2	; 162
    fc70:	50 e2       	ldi	r21, 0x20	; 32
    fc72:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
                    if (BalanceType==2) lcd_printf(1,1,PSTR("Pump Product Amount"));//"Pump Product  Amount" 
    fc76:	80 91 73 03 	lds	r24, 0x0373
    fc7a:	82 30       	cpi	r24, 0x02	; 2
    fc7c:	31 f4       	brne	.+12     	; 0xfc8a <FMenuLocalAccount+0xacc>
    fc7e:	81 e0       	ldi	r24, 0x01	; 1
    fc80:	61 e0       	ldi	r22, 0x01	; 1
    fc82:	4e e8       	ldi	r20, 0x8E	; 142
    fc84:	50 e2       	ldi	r21, 0x20	; 32
    fc86:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
					sprintf_P(lcdteks,PSTR("  %s %s "),strFIP,strProduct);    lcd_print(2,1,lcdteks);    //"P01  Pertamax       "
    fc8a:	ed b7       	in	r30, 0x3d	; 61
    fc8c:	fe b7       	in	r31, 0x3e	; 62
    fc8e:	38 97       	sbiw	r30, 0x08	; 8
    fc90:	0f b6       	in	r0, 0x3f	; 63
    fc92:	f8 94       	cli
    fc94:	fe bf       	out	0x3e, r31	; 62
    fc96:	0f be       	out	0x3f, r0	; 63
    fc98:	ed bf       	out	0x3d, r30	; 61
    fc9a:	31 96       	adiw	r30, 0x01	; 1
    fc9c:	8e 01       	movw	r16, r28
    fc9e:	04 5f       	subi	r16, 0xF4	; 244
    fca0:	1f 4f       	sbci	r17, 0xFF	; 255
    fca2:	ad b7       	in	r26, 0x3d	; 61
    fca4:	be b7       	in	r27, 0x3e	; 62
    fca6:	12 96       	adiw	r26, 0x02	; 2
    fca8:	1c 93       	st	X, r17
    fcaa:	0e 93       	st	-X, r16
    fcac:	11 97       	sbiw	r26, 0x01	; 1
    fcae:	85 e8       	ldi	r24, 0x85	; 133
    fcb0:	90 e2       	ldi	r25, 0x20	; 32
    fcb2:	93 83       	std	Z+3, r25	; 0x03
    fcb4:	82 83       	std	Z+2, r24	; 0x02
    fcb6:	80 e7       	ldi	r24, 0x70	; 112
    fcb8:	93 e0       	ldi	r25, 0x03	; 3
    fcba:	95 83       	std	Z+5, r25	; 0x05
    fcbc:	84 83       	std	Z+4, r24	; 0x04
    fcbe:	82 e4       	ldi	r24, 0x42	; 66
    fcc0:	98 e0       	ldi	r25, 0x08	; 8
    fcc2:	97 83       	std	Z+7, r25	; 0x07
    fcc4:	86 83       	std	Z+6, r24	; 0x06
    fcc6:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    fcca:	ed b7       	in	r30, 0x3d	; 61
    fccc:	fe b7       	in	r31, 0x3e	; 62
    fcce:	38 96       	adiw	r30, 0x08	; 8
    fcd0:	0f b6       	in	r0, 0x3f	; 63
    fcd2:	f8 94       	cli
    fcd4:	fe bf       	out	0x3e, r31	; 62
    fcd6:	0f be       	out	0x3f, r0	; 63
    fcd8:	ed bf       	out	0x3d, r30	; 61
    fcda:	82 e0       	ldi	r24, 0x02	; 2
    fcdc:	61 e0       	ldi	r22, 0x01	; 1
    fcde:	a8 01       	movw	r20, r16
    fce0:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
		            sprintf_P(lcdteks,PSTR("%s "),strBalanceValue);            lcd_print(2,14,lcdteks);   //"P01  Pertamax 500000"
    fce4:	00 d0       	rcall	.+0      	; 0xfce6 <FMenuLocalAccount+0xb28>
    fce6:	00 d0       	rcall	.+0      	; 0xfce8 <FMenuLocalAccount+0xb2a>
    fce8:	00 d0       	rcall	.+0      	; 0xfcea <FMenuLocalAccount+0xb2c>
    fcea:	ed b7       	in	r30, 0x3d	; 61
    fcec:	fe b7       	in	r31, 0x3e	; 62
    fcee:	31 96       	adiw	r30, 0x01	; 1
    fcf0:	ad b7       	in	r26, 0x3d	; 61
    fcf2:	be b7       	in	r27, 0x3e	; 62
    fcf4:	12 96       	adiw	r26, 0x02	; 2
    fcf6:	1c 93       	st	X, r17
    fcf8:	0e 93       	st	-X, r16
    fcfa:	11 97       	sbiw	r26, 0x01	; 1
    fcfc:	81 e8       	ldi	r24, 0x81	; 129
    fcfe:	90 e2       	ldi	r25, 0x20	; 32
    fd00:	93 83       	std	Z+3, r25	; 0x03
    fd02:	82 83       	std	Z+2, r24	; 0x02
    fd04:	88 e1       	ldi	r24, 0x18	; 24
    fd06:	9d e0       	ldi	r25, 0x0D	; 13
    fd08:	95 83       	std	Z+5, r25	; 0x05
    fd0a:	84 83       	std	Z+4, r24	; 0x04
    fd0c:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    fd10:	ed b7       	in	r30, 0x3d	; 61
    fd12:	fe b7       	in	r31, 0x3e	; 62
    fd14:	36 96       	adiw	r30, 0x06	; 6
    fd16:	0f b6       	in	r0, 0x3f	; 63
    fd18:	f8 94       	cli
    fd1a:	fe bf       	out	0x3e, r31	; 62
    fd1c:	0f be       	out	0x3f, r0	; 63
    fd1e:	ed bf       	out	0x3d, r30	; 61
    fd20:	82 e0       	ldi	r24, 0x02	; 2
    fd22:	6e e0       	ldi	r22, 0x0E	; 14
    fd24:	a8 01       	movw	r20, r16
    fd26:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>

				}
				lcd_printf(3,1,PSTR("Odometer:_       "));                                //"Odometer:_          "
    fd2a:	83 e0       	ldi	r24, 0x03	; 3
    fd2c:	61 e0       	ldi	r22, 0x01	; 1
    fd2e:	4f e6       	ldi	r20, 0x6F	; 111
    fd30:	50 e2       	ldi	r21, 0x20	; 32
    fd32:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
	            lcd_printf(4,1,PSTR("[*]Back  [#]OK   "));                                //"[*]Back  [#]OK      "						        
    fd36:	84 e0       	ldi	r24, 0x04	; 4
    fd38:	61 e0       	ldi	r22, 0x01	; 1
    fd3a:	4d e5       	ldi	r20, 0x5D	; 93
    fd3c:	50 e2       	ldi	r21, 0x20	; 32
    fd3e:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
				ClearMem(strOdometer);
    fd42:	87 ea       	ldi	r24, 0xA7	; 167
    fd44:	94 e0       	ldi	r25, 0x04	; 4
    fd46:	0e 94 33 a2 	call	0x14466	; 0x14466 <ClearMem>
		        stLocalAccount=laOdometerInput;
    fd4a:	82 e1       	ldi	r24, 0x12	; 18
    fd4c:	e1 c0       	rjmp	.+450    	; 0xff10 <FMenuLocalAccount+0xd52>
		        break;
           case laOdometerInput:
				uiResult=UserInput(UI_NUMBER_R,3,10,strOdometer,0,10);
    fd4e:	67 ea       	ldi	r22, 0xA7	; 167
    fd50:	c6 2e       	mov	r12, r22
    fd52:	64 e0       	ldi	r22, 0x04	; 4
    fd54:	d6 2e       	mov	r13, r22
    fd56:	81 e0       	ldi	r24, 0x01	; 1
    fd58:	63 e0       	ldi	r22, 0x03	; 3
    fd5a:	4a e0       	ldi	r20, 0x0A	; 10
    fd5c:	96 01       	movw	r18, r12
    fd5e:	00 e0       	ldi	r16, 0x00	; 0
    fd60:	10 e0       	ldi	r17, 0x00	; 0
    fd62:	5a e0       	ldi	r21, 0x0A	; 10
    fd64:	e5 2e       	mov	r14, r21
    fd66:	0e 94 d3 39 	call	0x73a6	; 0x73a6 <UserInput>
				if (uiResult==USER_OK){
    fd6a:	83 30       	cpi	r24, 0x03	; 3
    fd6c:	81 f4       	brne	.+32     	; 0xfd8e <FMenuLocalAccount+0xbd0>
				    if ((strlen(strOdometer)==1)&&(strOdometer[0]=='0'))
    fd6e:	f6 01       	movw	r30, r12
    fd70:	01 90       	ld	r0, Z+
    fd72:	00 20       	and	r0, r0
    fd74:	e9 f7       	brne	.-6      	; 0xfd70 <FMenuLocalAccount+0xbb2>
    fd76:	84 e0       	ldi	r24, 0x04	; 4
    fd78:	e9 3a       	cpi	r30, 0xA9	; 169
    fd7a:	f8 07       	cpc	r31, r24
    fd7c:	31 f4       	brne	.+12     	; 0xfd8a <FMenuLocalAccount+0xbcc>
    fd7e:	80 91 a7 04 	lds	r24, 0x04A7
    fd82:	80 33       	cpi	r24, 0x30	; 48
    fd84:	11 f4       	brne	.+4      	; 0xfd8a <FMenuLocalAccount+0xbcc>
					    strOdometer[0]=0;
    fd86:	10 92 a7 04 	sts	0x04A7, r1
				    stLocalAccount=laDataConfirm;
    fd8a:	83 e1       	ldi	r24, 0x13	; 19
    fd8c:	c1 c0       	rjmp	.+386    	; 0xff10 <FMenuLocalAccount+0xd52>
					}
			    else
			    if (uiResult==USER_CANCEL){
    fd8e:	81 30       	cpi	r24, 0x01	; 1
    fd90:	09 f0       	breq	.+2      	; 0xfd94 <FMenuLocalAccount+0xbd6>
    fd92:	b0 c2       	rjmp	.+1376   	; 0x102f4 <FMenuLocalAccount+0x1136>
				    if (IsFullAuthorized==True)
    fd94:	80 91 65 03 	lds	r24, 0x0365
    fd98:	81 30       	cpi	r24, 0x01	; 1
    fd9a:	11 f4       	brne	.+4      	; 0xfda0 <FMenuLocalAccount+0xbe2>
					     stLocalAccount=laSelectBalanceType;
    fd9c:	8d e0       	ldi	r24, 0x0D	; 13
    fd9e:	b8 c0       	rjmp	.+368    	; 0xff10 <FMenuLocalAccount+0xd52>
					else stLocalAccount=laBalanceValue;		        
    fda0:	8f e0       	ldi	r24, 0x0F	; 15
    fda2:	b6 c0       	rjmp	.+364    	; 0xff10 <FMenuLocalAccount+0xd52>
				 }
		        break;
           case laDataConfirm: 
		        lcd_clear();
    fda4:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
		        StringCopyPos(strCardHolder,strName,9,10);                                          //Data Confirmation   
    fda8:	20 e2       	ldi	r18, 0x20	; 32
    fdaa:	e2 2e       	mov	r14, r18
    fdac:	f1 2c       	mov	r15, r1
    fdae:	ec 0e       	add	r14, r28
    fdb0:	fd 1e       	adc	r15, r29
    fdb2:	89 e0       	ldi	r24, 0x09	; 9
    fdb4:	94 e0       	ldi	r25, 0x04	; 4
    fdb6:	b7 01       	movw	r22, r14
    fdb8:	49 e0       	ldi	r20, 0x09	; 9
    fdba:	2a e0       	ldi	r18, 0x0A	; 10
    fdbc:	0e 94 42 16 	call	0x2c84	; 0x2c84 <StringCopyPos>
                sprintf_P(lcdteks,PSTR("%s "),strName);                  lcd_print(1,1,lcdteks);    //"Iyan The Man        "
    fdc0:	00 d0       	rcall	.+0      	; 0xfdc2 <FMenuLocalAccount+0xc04>
    fdc2:	00 d0       	rcall	.+0      	; 0xfdc4 <FMenuLocalAccount+0xc06>
    fdc4:	00 d0       	rcall	.+0      	; 0xfdc6 <FMenuLocalAccount+0xc08>
    fdc6:	ed b7       	in	r30, 0x3d	; 61
    fdc8:	fe b7       	in	r31, 0x3e	; 62
    fdca:	31 96       	adiw	r30, 0x01	; 1
    fdcc:	8e 01       	movw	r16, r28
    fdce:	04 5f       	subi	r16, 0xF4	; 244
    fdd0:	1f 4f       	sbci	r17, 0xFF	; 255
    fdd2:	ad b7       	in	r26, 0x3d	; 61
    fdd4:	be b7       	in	r27, 0x3e	; 62
    fdd6:	12 96       	adiw	r26, 0x02	; 2
    fdd8:	1c 93       	st	X, r17
    fdda:	0e 93       	st	-X, r16
    fddc:	11 97       	sbiw	r26, 0x01	; 1
    fdde:	89 e5       	ldi	r24, 0x59	; 89
    fde0:	90 e2       	ldi	r25, 0x20	; 32
    fde2:	93 83       	std	Z+3, r25	; 0x03
    fde4:	82 83       	std	Z+2, r24	; 0x02
    fde6:	f5 82       	std	Z+5, r15	; 0x05
    fde8:	e4 82       	std	Z+4, r14	; 0x04
    fdea:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    fdee:	ed b7       	in	r30, 0x3d	; 61
    fdf0:	fe b7       	in	r31, 0x3e	; 62
    fdf2:	36 96       	adiw	r30, 0x06	; 6
    fdf4:	0f b6       	in	r0, 0x3f	; 63
    fdf6:	f8 94       	cli
    fdf8:	fe bf       	out	0x3e, r31	; 62
    fdfa:	0f be       	out	0x3f, r0	; 63
    fdfc:	ed bf       	out	0x3d, r30	; 61
    fdfe:	81 e0       	ldi	r24, 0x01	; 1
    fe00:	61 e0       	ldi	r22, 0x01	; 1
    fe02:	a8 01       	movw	r20, r16
    fe04:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
		        sprintf_P(lcdteks,PSTR("ID: %s"),strCardID);             lcd_print(2,1,lcdteks);    //"ID1CCDA565 OD:123456"
    fe08:	00 d0       	rcall	.+0      	; 0xfe0a <FMenuLocalAccount+0xc4c>
    fe0a:	00 d0       	rcall	.+0      	; 0xfe0c <FMenuLocalAccount+0xc4e>
    fe0c:	00 d0       	rcall	.+0      	; 0xfe0e <FMenuLocalAccount+0xc50>
    fe0e:	ed b7       	in	r30, 0x3d	; 61
    fe10:	fe b7       	in	r31, 0x3e	; 62
    fe12:	31 96       	adiw	r30, 0x01	; 1
    fe14:	ad b7       	in	r26, 0x3d	; 61
    fe16:	be b7       	in	r27, 0x3e	; 62
    fe18:	12 96       	adiw	r26, 0x02	; 2
    fe1a:	1c 93       	st	X, r17
    fe1c:	0e 93       	st	-X, r16
    fe1e:	11 97       	sbiw	r26, 0x01	; 1
    fe20:	82 e5       	ldi	r24, 0x52	; 82
    fe22:	90 e2       	ldi	r25, 0x20	; 32
    fe24:	93 83       	std	Z+3, r25	; 0x03
    fe26:	82 83       	std	Z+2, r24	; 0x02
    fe28:	8d e6       	ldi	r24, 0x6D	; 109
    fe2a:	9c e0       	ldi	r25, 0x0C	; 12
    fe2c:	95 83       	std	Z+5, r25	; 0x05
    fe2e:	84 83       	std	Z+4, r24	; 0x04
    fe30:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    fe34:	ed b7       	in	r30, 0x3d	; 61
    fe36:	fe b7       	in	r31, 0x3e	; 62
    fe38:	36 96       	adiw	r30, 0x06	; 6
    fe3a:	0f b6       	in	r0, 0x3f	; 63
    fe3c:	f8 94       	cli
    fe3e:	fe bf       	out	0x3e, r31	; 62
    fe40:	0f be       	out	0x3f, r0	; 63
    fe42:	ed bf       	out	0x3d, r30	; 61
    fe44:	82 e0       	ldi	r24, 0x02	; 2
    fe46:	61 e0       	ldi	r22, 0x01	; 1
    fe48:	a8 01       	movw	r20, r16
    fe4a:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
				sprintf_P(lcdteks,PSTR("%s  %s "),strFIP,strProduct);    lcd_print(3,1,lcdteks);    //"P01  Pertamax 500000"
    fe4e:	8d b7       	in	r24, 0x3d	; 61
    fe50:	9e b7       	in	r25, 0x3e	; 62
    fe52:	08 97       	sbiw	r24, 0x08	; 8
    fe54:	0f b6       	in	r0, 0x3f	; 63
    fe56:	f8 94       	cli
    fe58:	9e bf       	out	0x3e, r25	; 62
    fe5a:	0f be       	out	0x3f, r0	; 63
    fe5c:	8d bf       	out	0x3d, r24	; 61
    fe5e:	ed b7       	in	r30, 0x3d	; 61
    fe60:	fe b7       	in	r31, 0x3e	; 62
    fe62:	31 96       	adiw	r30, 0x01	; 1
    fe64:	ad b7       	in	r26, 0x3d	; 61
    fe66:	be b7       	in	r27, 0x3e	; 62
    fe68:	12 96       	adiw	r26, 0x02	; 2
    fe6a:	1c 93       	st	X, r17
    fe6c:	0e 93       	st	-X, r16
    fe6e:	11 97       	sbiw	r26, 0x01	; 1
    fe70:	8a e4       	ldi	r24, 0x4A	; 74
    fe72:	90 e2       	ldi	r25, 0x20	; 32
    fe74:	93 83       	std	Z+3, r25	; 0x03
    fe76:	82 83       	std	Z+2, r24	; 0x02
    fe78:	80 e7       	ldi	r24, 0x70	; 112
    fe7a:	93 e0       	ldi	r25, 0x03	; 3
    fe7c:	95 83       	std	Z+5, r25	; 0x05
    fe7e:	84 83       	std	Z+4, r24	; 0x04
    fe80:	82 e4       	ldi	r24, 0x42	; 66
    fe82:	98 e0       	ldi	r25, 0x08	; 8
    fe84:	97 83       	std	Z+7, r25	; 0x07
    fe86:	86 83       	std	Z+6, r24	; 0x06
    fe88:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    fe8c:	ed b7       	in	r30, 0x3d	; 61
    fe8e:	fe b7       	in	r31, 0x3e	; 62
    fe90:	38 96       	adiw	r30, 0x08	; 8
    fe92:	0f b6       	in	r0, 0x3f	; 63
    fe94:	f8 94       	cli
    fe96:	fe bf       	out	0x3e, r31	; 62
    fe98:	0f be       	out	0x3f, r0	; 63
    fe9a:	ed bf       	out	0x3d, r30	; 61
    fe9c:	83 e0       	ldi	r24, 0x03	; 3
    fe9e:	61 e0       	ldi	r22, 0x01	; 1
    fea0:	a8 01       	movw	r20, r16
    fea2:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
		        if (IsFullAuthorized==True){
    fea6:	80 91 65 03 	lds	r24, 0x0365
    feaa:	81 30       	cpi	r24, 0x01	; 1
    feac:	39 f4       	brne	.+14     	; 0xfebc <FMenuLocalAccount+0xcfe>
                    lcd_printf(3,15,PSTR(" Full"));
    feae:	83 e0       	ldi	r24, 0x03	; 3
    feb0:	6f e0       	ldi	r22, 0x0F	; 15
    feb2:	44 e4       	ldi	r20, 0x44	; 68
    feb4:	50 e2       	ldi	r21, 0x20	; 32
    feb6:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
    feba:	23 c0       	rjmp	.+70     	; 0xff02 <FMenuLocalAccount+0xd44>
				}
				else {
				    sprintf_P(lcdteks,PSTR("%s "),strBalanceValue);          lcd_print(3,15,lcdteks);   //"[*]Back [0]ESC [#]OK " 
    febc:	00 d0       	rcall	.+0      	; 0xfebe <FMenuLocalAccount+0xd00>
    febe:	00 d0       	rcall	.+0      	; 0xfec0 <FMenuLocalAccount+0xd02>
    fec0:	00 d0       	rcall	.+0      	; 0xfec2 <FMenuLocalAccount+0xd04>
    fec2:	ed b7       	in	r30, 0x3d	; 61
    fec4:	fe b7       	in	r31, 0x3e	; 62
    fec6:	31 96       	adiw	r30, 0x01	; 1
    fec8:	ad b7       	in	r26, 0x3d	; 61
    feca:	be b7       	in	r27, 0x3e	; 62
    fecc:	12 96       	adiw	r26, 0x02	; 2
    fece:	1c 93       	st	X, r17
    fed0:	0e 93       	st	-X, r16
    fed2:	11 97       	sbiw	r26, 0x01	; 1
    fed4:	80 e4       	ldi	r24, 0x40	; 64
    fed6:	90 e2       	ldi	r25, 0x20	; 32
    fed8:	93 83       	std	Z+3, r25	; 0x03
    feda:	82 83       	std	Z+2, r24	; 0x02
    fedc:	88 e1       	ldi	r24, 0x18	; 24
    fede:	9d e0       	ldi	r25, 0x0D	; 13
    fee0:	95 83       	std	Z+5, r25	; 0x05
    fee2:	84 83       	std	Z+4, r24	; 0x04
    fee4:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    fee8:	ed b7       	in	r30, 0x3d	; 61
    feea:	fe b7       	in	r31, 0x3e	; 62
    feec:	36 96       	adiw	r30, 0x06	; 6
    feee:	0f b6       	in	r0, 0x3f	; 63
    fef0:	f8 94       	cli
    fef2:	fe bf       	out	0x3e, r31	; 62
    fef4:	0f be       	out	0x3f, r0	; 63
    fef6:	ed bf       	out	0x3d, r30	; 61
    fef8:	83 e0       	ldi	r24, 0x03	; 3
    fefa:	6f e0       	ldi	r22, 0x0F	; 15
    fefc:	a8 01       	movw	r20, r16
    fefe:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
					}
	            lcd_printf(4,1,PSTR("[*]Back [0]ESC [#]OK"));    
    ff02:	84 e0       	ldi	r24, 0x04	; 4
    ff04:	61 e0       	ldi	r22, 0x01	; 1
    ff06:	4b e2       	ldi	r20, 0x2B	; 43
    ff08:	50 e2       	ldi	r21, 0x20	; 32
    ff0a:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
                stLocalAccount=laDataConfirmInput;
    ff0e:	84 e1       	ldi	r24, 0x14	; 20
    ff10:	80 93 5b 01 	sts	0x015B, r24
    ff14:	ef c1       	rjmp	.+990    	; 0x102f4 <FMenuLocalAccount+0x1136>
                //while(1){};   
		        break;
           case laDataConfirmInput:
                KeyPressed=_key_scan(1);
    ff16:	81 e0       	ldi	r24, 0x01	; 1
    ff18:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <_key_scan>
                if (KeyPressed==_KEY_CANCEL)stLocalAccount=laOdometer;		        
    ff1c:	87 3e       	cpi	r24, 0xE7	; 231
    ff1e:	11 f4       	brne	.+4      	; 0xff24 <FMenuLocalAccount+0xd66>
    ff20:	81 e1       	ldi	r24, 0x11	; 17
    ff22:	f6 cf       	rjmp	.-20     	; 0xff10 <FMenuLocalAccount+0xd52>
				else
				if (KeyPressed==_KEY_ENTER)stLocalAccount=laProceedTransaction;
    ff24:	87 3b       	cpi	r24, 0xB7	; 183
    ff26:	11 f4       	brne	.+4      	; 0xff2c <FMenuLocalAccount+0xd6e>
    ff28:	85 e1       	ldi	r24, 0x15	; 21
    ff2a:	f2 cf       	rjmp	.-28     	; 0xff10 <FMenuLocalAccount+0xd52>
				else
				if (KeyPressed==_KEY_0){
    ff2c:	87 3d       	cpi	r24, 0xD7	; 215
    ff2e:	09 f0       	breq	.+2      	; 0xff32 <FMenuLocalAccount+0xd74>
    ff30:	e1 c1       	rjmp	.+962    	; 0x102f4 <FMenuLocalAccount+0x1136>
				   //ShowCancel
				   TimLocAcc=0;
    ff32:	10 92 99 02 	sts	0x0299, r1
                   lcd_clear();
    ff36:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
				   lcd_printf(1,1,PSTR("Cancel Transaction  "));    //"Cancel Transaction"
    ff3a:	81 e0       	ldi	r24, 0x01	; 1
    ff3c:	61 e0       	ldi	r22, 0x01	; 1
    ff3e:	46 e1       	ldi	r20, 0x16	; 22
    ff40:	50 e2       	ldi	r21, 0x20	; 32
    ff42:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
    ff46:	b9 c1       	rjmp	.+882    	; 0x102ba <FMenuLocalAccount+0x10fc>
				   stLocalAccount=laDelayExit;
				   }
		        break;
           case laProceedTransaction:
		        sendMessage58();
    ff48:	0e 94 87 2b 	call	0x570e	; 0x570e <sendMessage58>
                RemZeroLead(strCardID);
    ff4c:	8d e6       	ldi	r24, 0x6D	; 109
    ff4e:	9c e0       	ldi	r25, 0x0C	; 12
    ff50:	0e 94 93 39 	call	0x7326	; 0x7326 <RemZeroLead>
                RemZeroLead(strBalanceValue);
    ff54:	98 e1       	ldi	r25, 0x18	; 24
    ff56:	e9 2e       	mov	r14, r25
    ff58:	9d e0       	ldi	r25, 0x0D	; 13
    ff5a:	f9 2e       	mov	r15, r25
    ff5c:	c7 01       	movw	r24, r14
    ff5e:	0e 94 93 39 	call	0x7326	; 0x7326 <RemZeroLead>
				sprintf_P(lcdteks,PSTR("P%s %s "),strFIP,strProduct);       lcd_print(1,1,lcdteks);    //"P01  Pertamax 500000"
    ff62:	8d b7       	in	r24, 0x3d	; 61
    ff64:	9e b7       	in	r25, 0x3e	; 62
    ff66:	08 97       	sbiw	r24, 0x08	; 8
    ff68:	0f b6       	in	r0, 0x3f	; 63
    ff6a:	f8 94       	cli
    ff6c:	9e bf       	out	0x3e, r25	; 62
    ff6e:	0f be       	out	0x3f, r0	; 63
    ff70:	8d bf       	out	0x3d, r24	; 61
    ff72:	ed b7       	in	r30, 0x3d	; 61
    ff74:	fe b7       	in	r31, 0x3e	; 62
    ff76:	31 96       	adiw	r30, 0x01	; 1
    ff78:	8e 01       	movw	r16, r28
    ff7a:	04 5f       	subi	r16, 0xF4	; 244
    ff7c:	1f 4f       	sbci	r17, 0xFF	; 255
    ff7e:	ad b7       	in	r26, 0x3d	; 61
    ff80:	be b7       	in	r27, 0x3e	; 62
    ff82:	12 96       	adiw	r26, 0x02	; 2
    ff84:	1c 93       	st	X, r17
    ff86:	0e 93       	st	-X, r16
    ff88:	11 97       	sbiw	r26, 0x01	; 1
    ff8a:	8e e0       	ldi	r24, 0x0E	; 14
    ff8c:	90 e2       	ldi	r25, 0x20	; 32
    ff8e:	93 83       	std	Z+3, r25	; 0x03
    ff90:	82 83       	std	Z+2, r24	; 0x02
    ff92:	80 e7       	ldi	r24, 0x70	; 112
    ff94:	93 e0       	ldi	r25, 0x03	; 3
    ff96:	95 83       	std	Z+5, r25	; 0x05
    ff98:	84 83       	std	Z+4, r24	; 0x04
    ff9a:	82 e4       	ldi	r24, 0x42	; 66
    ff9c:	98 e0       	ldi	r25, 0x08	; 8
    ff9e:	97 83       	std	Z+7, r25	; 0x07
    ffa0:	86 83       	std	Z+6, r24	; 0x06
    ffa2:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    ffa6:	ed b7       	in	r30, 0x3d	; 61
    ffa8:	fe b7       	in	r31, 0x3e	; 62
    ffaa:	38 96       	adiw	r30, 0x08	; 8
    ffac:	0f b6       	in	r0, 0x3f	; 63
    ffae:	f8 94       	cli
    ffb0:	fe bf       	out	0x3e, r31	; 62
    ffb2:	0f be       	out	0x3f, r0	; 63
    ffb4:	ed bf       	out	0x3d, r30	; 61
    ffb6:	81 e0       	ldi	r24, 0x01	; 1
    ffb8:	61 e0       	ldi	r22, 0x01	; 1
    ffba:	a8 01       	movw	r20, r16
    ffbc:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
		        sprintf_P(lcdteks,PSTR("%s"),strBalanceValue);              lcd_print(1,15,lcdteks);   //"ID1CCDA565          " 
    ffc0:	00 d0       	rcall	.+0      	; 0xffc2 <FMenuLocalAccount+0xe04>
    ffc2:	00 d0       	rcall	.+0      	; 0xffc4 <FMenuLocalAccount+0xe06>
    ffc4:	00 d0       	rcall	.+0      	; 0xffc6 <FMenuLocalAccount+0xe08>
    ffc6:	ed b7       	in	r30, 0x3d	; 61
    ffc8:	fe b7       	in	r31, 0x3e	; 62
    ffca:	31 96       	adiw	r30, 0x01	; 1
    ffcc:	ad b7       	in	r26, 0x3d	; 61
    ffce:	be b7       	in	r27, 0x3e	; 62
    ffd0:	12 96       	adiw	r26, 0x02	; 2
    ffd2:	1c 93       	st	X, r17
    ffd4:	0e 93       	st	-X, r16
    ffd6:	11 97       	sbiw	r26, 0x01	; 1
    ffd8:	8b e0       	ldi	r24, 0x0B	; 11
    ffda:	90 e2       	ldi	r25, 0x20	; 32
    ffdc:	93 83       	std	Z+3, r25	; 0x03
    ffde:	82 83       	std	Z+2, r24	; 0x02
    ffe0:	f5 82       	std	Z+5, r15	; 0x05
    ffe2:	e4 82       	std	Z+4, r14	; 0x04
    ffe4:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
    ffe8:	ed b7       	in	r30, 0x3d	; 61
    ffea:	fe b7       	in	r31, 0x3e	; 62
    ffec:	36 96       	adiw	r30, 0x06	; 6
    ffee:	0f b6       	in	r0, 0x3f	; 63
    fff0:	f8 94       	cli
    fff2:	fe bf       	out	0x3e, r31	; 62
    fff4:	0f be       	out	0x3f, r0	; 63
    fff6:	ed bf       	out	0x3d, r30	; 61
    fff8:	81 e0       	ldi	r24, 0x01	; 1
    fffa:	6f e0       	ldi	r22, 0x0F	; 15
    fffc:	a8 01       	movw	r20, r16
    fffe:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
                lcd_printf(3,1,PSTR("Mohon Tunggu        "));                                         //"Mohon Tunggu ...    "
   10002:	83 e0       	ldi	r24, 0x03	; 3
   10004:	61 e0       	ldi	r22, 0x01	; 1
   10006:	46 ef       	ldi	r20, 0xF6	; 246
   10008:	5f e1       	ldi	r21, 0x1F	; 31
   1000a:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		        lcd_printf(4,1,PSTR("                    "));                                  //"                    "
   1000e:	84 e0       	ldi	r24, 0x04	; 4
   10010:	61 e0       	ldi	r22, 0x01	; 1
   10012:	41 ee       	ldi	r20, 0xE1	; 225
   10014:	5f e1       	ldi	r21, 0x1F	; 31
   10016:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
				IsMessage00=False;
   1001a:	10 92 7d 02 	sts	0x027D, r1
				TimLocAcc=0;
   1001e:	10 92 99 02 	sts	0x0299, r1
				iLoop=0;iPos=0;iWait=0;
   10022:	10 92 64 03 	sts	0x0364, r1
   10026:	10 92 63 03 	sts	0x0363, r1
   1002a:	10 92 75 03 	sts	0x0375, r1
   1002e:	10 92 74 03 	sts	0x0374, r1
				stLocalAccount=laWaitMessage00;
   10032:	87 e1       	ldi	r24, 0x17	; 23
   10034:	6d cf       	rjmp	.-294    	; 0xff10 <FMenuLocalAccount+0xd52>
		        break;
           case laWaitMessage00:
                iLoop++;
   10036:	80 91 63 03 	lds	r24, 0x0363
   1003a:	90 91 64 03 	lds	r25, 0x0364
   1003e:	01 96       	adiw	r24, 0x01	; 1
   10040:	90 93 64 03 	sts	0x0364, r25
   10044:	80 93 63 03 	sts	0x0363, r24
				if ((iLoop%MSG_WAIT_TIMOUT)==0){
   10048:	68 e9       	ldi	r22, 0x98	; 152
   1004a:	7a e3       	ldi	r23, 0x3A	; 58
   1004c:	0e 94 97 a7 	call	0x14f2e	; 0x14f2e <__udivmodhi4>
   10050:	00 97       	sbiw	r24, 0x00	; 0
   10052:	e9 f4       	brne	.+58     	; 0x1008e <FMenuLocalAccount+0xed0>
				   if (iPos<5){
   10054:	60 91 75 03 	lds	r22, 0x0375
   10058:	65 30       	cpi	r22, 0x05	; 5
   1005a:	60 f4       	brcc	.+24     	; 0x10074 <FMenuLocalAccount+0xeb6>
				       iPos++;
   1005c:	86 2f       	mov	r24, r22
   1005e:	8f 5f       	subi	r24, 0xFF	; 255
   10060:	80 93 75 03 	sts	0x0375, r24
					   lcd_xy(3,(14+iPos));_lcd('.');
   10064:	61 5f       	subi	r22, 0xF1	; 241
   10066:	83 e0       	ldi	r24, 0x03	; 3
   10068:	0e 94 19 a2 	call	0x14432	; 0x14432 <lcd_xy>
   1006c:	8e e2       	ldi	r24, 0x2E	; 46
   1006e:	0e 94 e8 a1 	call	0x143d0	; 0x143d0 <_lcd>
   10072:	0d c0       	rjmp	.+26     	; 0x1008e <FMenuLocalAccount+0xed0>
					   }
				   else{
				       iPos=0;
   10074:	10 92 75 03 	sts	0x0375, r1
					   lcd_printf(3,(14+iPos),PSTR("       "));
   10078:	83 e0       	ldi	r24, 0x03	; 3
   1007a:	6e e0       	ldi	r22, 0x0E	; 14
   1007c:	49 ed       	ldi	r20, 0xD9	; 217
   1007e:	5f e1       	ldi	r21, 0x1F	; 31
   10080:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
					   iWait++;
   10084:	80 91 74 03 	lds	r24, 0x0374
   10088:	8f 5f       	subi	r24, 0xFF	; 255
   1008a:	80 93 74 03 	sts	0x0374, r24
					   }
				}
				if (iWait>5){
   1008e:	80 91 74 03 	lds	r24, 0x0374
   10092:	86 30       	cpi	r24, 0x06	; 6
   10094:	48 f0       	brcs	.+18     	; 0x100a8 <FMenuLocalAccount+0xeea>
				    stLocalAccount=laConTimout;
   10096:	84 e0       	ldi	r24, 0x04	; 4
   10098:	80 93 5b 01 	sts	0x015B, r24
					TimLocAcc=0;
   1009c:	10 92 99 02 	sts	0x0299, r1
					system_beep(2);
   100a0:	82 e0       	ldi	r24, 0x02	; 2
   100a2:	90 e0       	ldi	r25, 0x00	; 0
   100a4:	0e 94 ee 14 	call	0x29dc	; 0x29dc <system_beep>
				    }
				if (IsMessage00==True){
   100a8:	80 91 7d 02 	lds	r24, 0x027D
   100ac:	81 30       	cpi	r24, 0x01	; 1
   100ae:	09 f0       	breq	.+2      	; 0x100b2 <FMenuLocalAccount+0xef4>
   100b0:	21 c1       	rjmp	.+578    	; 0x102f4 <FMenuLocalAccount+0x1136>
                    IsMessage00=False;
   100b2:	10 92 7d 02 	sts	0x027D, r1
				    stLocalAccount=laProcMessage00;
   100b6:	88 e1       	ldi	r24, 0x18	; 24
   100b8:	2b cf       	rjmp	.-426    	; 0xff10 <FMenuLocalAccount+0xd52>
					}
		        break;
           case laProcMessage00:
		        LocAccStatus=procMessage00();
   100ba:	0e 94 6f 46 	call	0x8cde	; 0x8cde <procMessage00>
   100be:	80 93 76 03 	sts	0x0376, r24
                lcd_clear();
   100c2:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
		        switch(LocAccStatus){
   100c6:	00 91 76 03 	lds	r16, 0x0376
   100ca:	01 30       	cpi	r16, 0x01	; 1
   100cc:	59 f0       	breq	.+22     	; 0x100e4 <FMenuLocalAccount+0xf26>
   100ce:	01 30       	cpi	r16, 0x01	; 1
   100d0:	20 f0       	brcs	.+8      	; 0x100da <FMenuLocalAccount+0xf1c>
   100d2:	03 30       	cpi	r16, 0x03	; 3
   100d4:	09 f0       	breq	.+2      	; 0x100d8 <FMenuLocalAccount+0xf1a>
   100d6:	be c0       	rjmp	.+380    	; 0x10254 <FMenuLocalAccount+0x1096>
   100d8:	1b c0       	rjmp	.+54     	; 0x10110 <FMenuLocalAccount+0xf52>
				case MSG00_NACK:
                     lcd_printf(2,1,PSTR("Authorisasi Gagal   "));
   100da:	82 e0       	ldi	r24, 0x02	; 2
   100dc:	61 e0       	ldi	r22, 0x01	; 1
   100de:	44 ec       	ldi	r20, 0xC4	; 196
   100e0:	5f e1       	ldi	r21, 0x1F	; 31
   100e2:	1a c0       	rjmp	.+52     	; 0x10118 <FMenuLocalAccount+0xf5a>
					 system_beep(2); 
					 stLocalAccount=laDelayExit;
				     break;
                case MSG00_ACK:
				     lcd_printf(2,1,PSTR("Authorisasi Berhasil"));
   100e4:	82 e0       	ldi	r24, 0x02	; 2
   100e6:	61 e0       	ldi	r22, 0x01	; 1
   100e8:	4f ea       	ldi	r20, 0xAF	; 175
   100ea:	5f e1       	ldi	r21, 0x1F	; 31
   100ec:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
				     LocalAccountFIP[nLocalAccount]=FIP_Used;
   100f0:	80 91 6d 02 	lds	r24, 0x026D
   100f4:	e8 2f       	mov	r30, r24
   100f6:	f0 e0       	ldi	r31, 0x00	; 0
   100f8:	e5 5c       	subi	r30, 0xC5	; 197
   100fa:	fb 4f       	sbci	r31, 0xFB	; 251
   100fc:	90 91 67 03 	lds	r25, 0x0367
   10100:	90 83       	st	Z, r25
					 nLocalAccount++;
   10102:	8f 5f       	subi	r24, 0xFF	; 255
   10104:	80 93 6d 02 	sts	0x026D, r24
					 IsViewFillingFIP=True;
   10108:	00 93 74 02 	sts	0x0274, r16
					 stLocalAccount=laViewStatus;
   1010c:	86 e1       	ldi	r24, 0x16	; 22
   1010e:	a0 c0       	rjmp	.+320    	; 0x10250 <FMenuLocalAccount+0x1092>
				     break;
                case MSG00_NO_FIP:
                     lcd_printf(2,1,PSTR("FIP Tidak Siap    "));
   10110:	82 e0       	ldi	r24, 0x02	; 2
   10112:	61 e0       	ldi	r22, 0x01	; 1
   10114:	4c e9       	ldi	r20, 0x9C	; 156
   10116:	5f e1       	ldi	r21, 0x1F	; 31
   10118:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
					 system_beep(2);
   1011c:	82 e0       	ldi	r24, 0x02	; 2
   1011e:	90 e0       	ldi	r25, 0x00	; 0
   10120:	0e 94 ee 14 	call	0x29dc	; 0x29dc <system_beep>
					 stLocalAccount=laDelayExit;
   10124:	8e e1       	ldi	r24, 0x1E	; 30
   10126:	94 c0       	rjmp	.+296    	; 0x10250 <FMenuLocalAccount+0x1092>
				     break;
				}
				TimLocAcc=0;				
		        break;
           case laViewStatus:
                if (TimLocAcc>20)stLocalAccount=laExitLocAcc;//laDisplayTransaction;
   10128:	80 91 99 02 	lds	r24, 0x0299
   1012c:	85 31       	cpi	r24, 0x15	; 21
   1012e:	08 f4       	brcc	.+2      	; 0x10132 <FMenuLocalAccount+0xf74>
   10130:	e1 c0       	rjmp	.+450    	; 0x102f4 <FMenuLocalAccount+0x1136>
   10132:	c9 c0       	rjmp	.+402    	; 0x102c6 <FMenuLocalAccount+0x1108>
		        break; 
           case laDisplayTransaction:
		        lcd_clear();
   10134:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
                sprintf_P(lcdteks,PSTR("P%s %s "),strFIP,strProduct); lcd_print(1,1,lcdteks);    //"P01  Pertamax 500000"
   10138:	8d b7       	in	r24, 0x3d	; 61
   1013a:	9e b7       	in	r25, 0x3e	; 62
   1013c:	08 97       	sbiw	r24, 0x08	; 8
   1013e:	0f b6       	in	r0, 0x3f	; 63
   10140:	f8 94       	cli
   10142:	9e bf       	out	0x3e, r25	; 62
   10144:	0f be       	out	0x3f, r0	; 63
   10146:	8d bf       	out	0x3d, r24	; 61
   10148:	ed b7       	in	r30, 0x3d	; 61
   1014a:	fe b7       	in	r31, 0x3e	; 62
   1014c:	31 96       	adiw	r30, 0x01	; 1
   1014e:	8e 01       	movw	r16, r28
   10150:	04 5f       	subi	r16, 0xF4	; 244
   10152:	1f 4f       	sbci	r17, 0xFF	; 255
   10154:	ad b7       	in	r26, 0x3d	; 61
   10156:	be b7       	in	r27, 0x3e	; 62
   10158:	12 96       	adiw	r26, 0x02	; 2
   1015a:	1c 93       	st	X, r17
   1015c:	0e 93       	st	-X, r16
   1015e:	11 97       	sbiw	r26, 0x01	; 1
   10160:	84 e9       	ldi	r24, 0x94	; 148
   10162:	9f e1       	ldi	r25, 0x1F	; 31
   10164:	93 83       	std	Z+3, r25	; 0x03
   10166:	82 83       	std	Z+2, r24	; 0x02
   10168:	80 e7       	ldi	r24, 0x70	; 112
   1016a:	93 e0       	ldi	r25, 0x03	; 3
   1016c:	95 83       	std	Z+5, r25	; 0x05
   1016e:	84 83       	std	Z+4, r24	; 0x04
   10170:	82 e4       	ldi	r24, 0x42	; 66
   10172:	98 e0       	ldi	r25, 0x08	; 8
   10174:	97 83       	std	Z+7, r25	; 0x07
   10176:	86 83       	std	Z+6, r24	; 0x06
   10178:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
   1017c:	ed b7       	in	r30, 0x3d	; 61
   1017e:	fe b7       	in	r31, 0x3e	; 62
   10180:	38 96       	adiw	r30, 0x08	; 8
   10182:	0f b6       	in	r0, 0x3f	; 63
   10184:	f8 94       	cli
   10186:	fe bf       	out	0x3e, r31	; 62
   10188:	0f be       	out	0x3f, r0	; 63
   1018a:	ed bf       	out	0x3d, r30	; 61
   1018c:	81 e0       	ldi	r24, 0x01	; 1
   1018e:	61 e0       	ldi	r22, 0x01	; 1
   10190:	a8 01       	movw	r20, r16
   10192:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
		        sprintf_P(lcdteks,PSTR("%s"),strBalanceValue);        lcd_print(1,15,lcdteks);   //"ID1CCDA565          " 
   10196:	00 d0       	rcall	.+0      	; 0x10198 <FMenuLocalAccount+0xfda>
   10198:	00 d0       	rcall	.+0      	; 0x1019a <FMenuLocalAccount+0xfdc>
   1019a:	00 d0       	rcall	.+0      	; 0x1019c <FMenuLocalAccount+0xfde>
   1019c:	ed b7       	in	r30, 0x3d	; 61
   1019e:	fe b7       	in	r31, 0x3e	; 62
   101a0:	31 96       	adiw	r30, 0x01	; 1
   101a2:	ad b7       	in	r26, 0x3d	; 61
   101a4:	be b7       	in	r27, 0x3e	; 62
   101a6:	12 96       	adiw	r26, 0x02	; 2
   101a8:	1c 93       	st	X, r17
   101aa:	0e 93       	st	-X, r16
   101ac:	11 97       	sbiw	r26, 0x01	; 1
   101ae:	81 e9       	ldi	r24, 0x91	; 145
   101b0:	9f e1       	ldi	r25, 0x1F	; 31
   101b2:	93 83       	std	Z+3, r25	; 0x03
   101b4:	82 83       	std	Z+2, r24	; 0x02
   101b6:	88 e1       	ldi	r24, 0x18	; 24
   101b8:	9d e0       	ldi	r25, 0x0D	; 13
   101ba:	95 83       	std	Z+5, r25	; 0x05
   101bc:	84 83       	std	Z+4, r24	; 0x04
   101be:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
   101c2:	ed b7       	in	r30, 0x3d	; 61
   101c4:	fe b7       	in	r31, 0x3e	; 62
   101c6:	36 96       	adiw	r30, 0x06	; 6
   101c8:	0f b6       	in	r0, 0x3f	; 63
   101ca:	f8 94       	cli
   101cc:	fe bf       	out	0x3e, r31	; 62
   101ce:	0f be       	out	0x3f, r0	; 63
   101d0:	ed bf       	out	0x3d, r30	; 61
   101d2:	81 e0       	ldi	r24, 0x01	; 1
   101d4:	6f e0       	ldi	r22, 0x0F	; 15
   101d6:	a8 01       	movw	r20, r16
   101d8:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
                RemSpaceLead(strCardID);
   101dc:	8d e6       	ldi	r24, 0x6D	; 109
   101de:	e8 2e       	mov	r14, r24
   101e0:	8c e0       	ldi	r24, 0x0C	; 12
   101e2:	f8 2e       	mov	r15, r24
   101e4:	c7 01       	movw	r24, r14
   101e6:	0e 94 4b 39 	call	0x7296	; 0x7296 <RemSpaceLead>
				sprintf_P(lcdteks,PSTR("ID: %s"),strCardID);          lcd_print(2,1,lcdteks);
   101ea:	00 d0       	rcall	.+0      	; 0x101ec <FMenuLocalAccount+0x102e>
   101ec:	00 d0       	rcall	.+0      	; 0x101ee <FMenuLocalAccount+0x1030>
   101ee:	00 d0       	rcall	.+0      	; 0x101f0 <FMenuLocalAccount+0x1032>
   101f0:	ed b7       	in	r30, 0x3d	; 61
   101f2:	fe b7       	in	r31, 0x3e	; 62
   101f4:	31 96       	adiw	r30, 0x01	; 1
   101f6:	ad b7       	in	r26, 0x3d	; 61
   101f8:	be b7       	in	r27, 0x3e	; 62
   101fa:	12 96       	adiw	r26, 0x02	; 2
   101fc:	1c 93       	st	X, r17
   101fe:	0e 93       	st	-X, r16
   10200:	11 97       	sbiw	r26, 0x01	; 1
   10202:	8a e8       	ldi	r24, 0x8A	; 138
   10204:	9f e1       	ldi	r25, 0x1F	; 31
   10206:	93 83       	std	Z+3, r25	; 0x03
   10208:	82 83       	std	Z+2, r24	; 0x02
   1020a:	f5 82       	std	Z+5, r15	; 0x05
   1020c:	e4 82       	std	Z+4, r14	; 0x04
   1020e:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
   10212:	ed b7       	in	r30, 0x3d	; 61
   10214:	fe b7       	in	r31, 0x3e	; 62
   10216:	36 96       	adiw	r30, 0x06	; 6
   10218:	0f b6       	in	r0, 0x3f	; 63
   1021a:	f8 94       	cli
   1021c:	fe bf       	out	0x3e, r31	; 62
   1021e:	0f be       	out	0x3f, r0	; 63
   10220:	ed bf       	out	0x3d, r30	; 61
   10222:	82 e0       	ldi	r24, 0x02	; 2
   10224:	61 e0       	ldi	r22, 0x01	; 1
   10226:	a8 01       	movw	r20, r16
   10228:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
				TimLocAcc=0;
   1022c:	10 92 99 02 	sts	0x0299, r1
		        IsCompleteFilling=False;
   10230:	10 92 88 02 	sts	0x0288, r1
				stLocalAccount=laWaitFilling;
   10234:	8d e1       	ldi	r24, 0x1D	; 29
   10236:	6c ce       	rjmp	.-808    	; 0xff10 <FMenuLocalAccount+0xd52>
		        break; 
           case laWaitFilling:
				if ((IsCompleteFilling==True)||(TimLocAcc>FILLING_TIMOUT)){
   10238:	80 91 88 02 	lds	r24, 0x0288
   1023c:	81 30       	cpi	r24, 0x01	; 1
   1023e:	29 f0       	breq	.+10     	; 0x1024a <FMenuLocalAccount+0x108c>
   10240:	80 91 99 02 	lds	r24, 0x0299
   10244:	8b 30       	cpi	r24, 0x0B	; 11
   10246:	08 f4       	brcc	.+2      	; 0x1024a <FMenuLocalAccount+0x108c>
   10248:	55 c0       	rjmp	.+170    	; 0x102f4 <FMenuLocalAccount+0x1136>
				    IsCompleteFilling=False;
   1024a:	10 92 88 02 	sts	0x0288, r1
				    stLocalAccount=laSuccessTransaction;
   1024e:	89 e1       	ldi	r24, 0x19	; 25
   10250:	80 93 5b 01 	sts	0x015B, r24
					TimLocAcc=0;
   10254:	10 92 99 02 	sts	0x0299, r1
   10258:	4d c0       	rjmp	.+154    	; 0x102f4 <FMenuLocalAccount+0x1136>
					}
		        break;
           case laSuccessTransaction:
				lcd_clear();lcd_printf(2,1,PSTR("Transaksi Selesai"));
   1025a:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
   1025e:	82 e0       	ldi	r24, 0x02	; 2
   10260:	61 e0       	ldi	r22, 0x01	; 1
   10262:	48 e7       	ldi	r20, 0x78	; 120
   10264:	5f e1       	ldi	r21, 0x1F	; 31
   10266:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
				//Show Status FIP
				sprintf_P(lcdteks,PSTR("Fueling @FIP:#%d"),FIP_Used);
   1026a:	00 d0       	rcall	.+0      	; 0x1026c <FMenuLocalAccount+0x10ae>
   1026c:	00 d0       	rcall	.+0      	; 0x1026e <FMenuLocalAccount+0x10b0>
   1026e:	00 d0       	rcall	.+0      	; 0x10270 <FMenuLocalAccount+0x10b2>
   10270:	ed b7       	in	r30, 0x3d	; 61
   10272:	fe b7       	in	r31, 0x3e	; 62
   10274:	31 96       	adiw	r30, 0x01	; 1
   10276:	8e 01       	movw	r16, r28
   10278:	04 5f       	subi	r16, 0xF4	; 244
   1027a:	1f 4f       	sbci	r17, 0xFF	; 255
   1027c:	ad b7       	in	r26, 0x3d	; 61
   1027e:	be b7       	in	r27, 0x3e	; 62
   10280:	12 96       	adiw	r26, 0x02	; 2
   10282:	1c 93       	st	X, r17
   10284:	0e 93       	st	-X, r16
   10286:	11 97       	sbiw	r26, 0x01	; 1
   10288:	87 e6       	ldi	r24, 0x67	; 103
   1028a:	9f e1       	ldi	r25, 0x1F	; 31
   1028c:	93 83       	std	Z+3, r25	; 0x03
   1028e:	82 83       	std	Z+2, r24	; 0x02
   10290:	80 91 67 03 	lds	r24, 0x0367
   10294:	84 83       	std	Z+4, r24	; 0x04
   10296:	15 82       	std	Z+5, r1	; 0x05
   10298:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
				lcd_print(3,1,lcdteks);
   1029c:	ed b7       	in	r30, 0x3d	; 61
   1029e:	fe b7       	in	r31, 0x3e	; 62
   102a0:	36 96       	adiw	r30, 0x06	; 6
   102a2:	0f b6       	in	r0, 0x3f	; 63
   102a4:	f8 94       	cli
   102a6:	fe bf       	out	0x3e, r31	; 62
   102a8:	0f be       	out	0x3f, r0	; 63
   102aa:	ed bf       	out	0x3d, r30	; 61
   102ac:	83 e0       	ldi	r24, 0x03	; 3
   102ae:	61 e0       	ldi	r22, 0x01	; 1
   102b0:	a8 01       	movw	r20, r16
   102b2:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>

				TimLocAcc=0;
				stLocalAccount=laDelayExit;
		        break;
           case laFailedTransaction:
		        TimLocAcc=0;
   102b6:	10 92 99 02 	sts	0x0299, r1
		        //Show Failed Report
				stLocalAccount=laDelayExit;
   102ba:	8e e1       	ldi	r24, 0x1E	; 30
   102bc:	29 ce       	rjmp	.-942    	; 0xff10 <FMenuLocalAccount+0xd52>
		        break;
           case laDelayExit:
		        if (TimLocAcc>15)stLocalAccount=laExitLocAcc;
   102be:	80 91 99 02 	lds	r24, 0x0299
   102c2:	80 31       	cpi	r24, 0x10	; 16
   102c4:	b8 f0       	brcs	.+46     	; 0x102f4 <FMenuLocalAccount+0x1136>
   102c6:	8f e1       	ldi	r24, 0x1F	; 31
   102c8:	23 ce       	rjmp	.-954    	; 0xff10 <FMenuLocalAccount+0xd52>
		        break;
           case laExitLocAcc:
		        Result=MENU_DONE;
				ClearMem(strOdometer);
   102ca:	87 ea       	ldi	r24, 0xA7	; 167
   102cc:	94 e0       	ldi	r25, 0x04	; 4
   102ce:	0e 94 33 a2 	call	0x14466	; 0x14466 <ClearMem>
	            ClearMem(strLicPlate);
   102d2:	8e ed       	ldi	r24, 0xDE	; 222
   102d4:	99 e0       	ldi	r25, 0x09	; 9
   102d6:	0e 94 33 a2 	call	0x14466	; 0x14466 <ClearMem>
				stLocalAccount=laInit;
   102da:	81 e0       	ldi	r24, 0x01	; 1
   102dc:	80 93 5b 01 	sts	0x015B, r24
				lcd_clear();
   102e0:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
				TimMenuTimeout=0;
   102e4:	10 92 97 03 	sts	0x0397, r1
   102e8:	10 92 96 03 	sts	0x0396, r1
				IsCardTransaction=False;
   102ec:	10 92 77 02 	sts	0x0277, r1
		        break;
           case laDelayExit:
		        if (TimLocAcc>15)stLocalAccount=laExitLocAcc;
		        break;
           case laExitLocAcc:
		        Result=MENU_DONE;
   102f0:	81 e0       	ldi	r24, 0x01	; 1
	            ClearMem(strLicPlate);
				stLocalAccount=laInit;
				lcd_clear();
				TimMenuTimeout=0;
				IsCardTransaction=False;
		        break;
   102f2:	01 c0       	rjmp	.+2      	; 0x102f6 <FMenuLocalAccount+0x1138>
			system_beep(2);
			IsCardTransaction=False;
			stLocalAccount=laDelayExit;
	   }

	   Result=MENU_NONE;
   102f4:	80 e0       	ldi	r24, 0x00	; 0
				TimMenuTimeout=0;
				IsCardTransaction=False;
		        break;
	       }//EndSwitch
    return Result;
}
   102f6:	e4 96       	adiw	r28, 0x34	; 52
   102f8:	0f b6       	in	r0, 0x3f	; 63
   102fa:	f8 94       	cli
   102fc:	de bf       	out	0x3e, r29	; 62
   102fe:	0f be       	out	0x3f, r0	; 63
   10300:	cd bf       	out	0x3d, r28	; 61
   10302:	cf 91       	pop	r28
   10304:	df 91       	pop	r29
   10306:	1f 91       	pop	r17
   10308:	0f 91       	pop	r16
   1030a:	ff 90       	pop	r15
   1030c:	ef 90       	pop	r14
   1030e:	df 90       	pop	r13
   10310:	cf 90       	pop	r12
   10312:	bf 90       	pop	r11
   10314:	af 90       	pop	r10
   10316:	9f 90       	pop	r9
   10318:	8f 90       	pop	r8
   1031a:	7f 90       	pop	r7
   1031c:	08 95       	ret

0001031e <UpdateStandaloneStatus>:
		 sprintf_P(lcdteks,PSTR("%s"),SPump);
         lcd_print(4,1,lcdteks);
     	 }
}

void UpdateStandaloneStatus(char xPumpID,char xPumpStatus){//xPumpID: (1-16)&0x0F
   1031e:	0f 93       	push	r16
   10320:	1f 93       	push	r17
   10322:	df 93       	push	r29
   10324:	cf 93       	push	r28
   10326:	0f 92       	push	r0
   10328:	cd b7       	in	r28, 0x3d	; 61
   1032a:	de b7       	in	r29, 0x3e	; 62
   1032c:	18 2f       	mov	r17, r24
char strSend[20],iPumpID; //[xxxxxxxxxPx]
char iAddr;

	 if (xPumpID<16){
   1032e:	80 31       	cpi	r24, 0x10	; 16
   10330:	08 f0       	brcs	.+2      	; 0x10334 <UpdateStandaloneStatus+0x16>
   10332:	57 c0       	rjmp	.+174    	; 0x103e2 <UpdateStandaloneStatus+0xc4>
	     DispenserBrand=eeprom_read_byte(&DefDispenserBrand);
   10334:	88 e3       	ldi	r24, 0x38	; 56
   10336:	91 e0       	ldi	r25, 0x01	; 1
   10338:	69 83       	std	Y+1, r22	; 0x01
   1033a:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
   1033e:	80 93 3c 02 	sts	0x023C, r24
	     switch(DispenserBrand){
   10342:	81 50       	subi	r24, 0x01	; 1
   10344:	69 81       	ldd	r22, Y+1	; 0x01
   10346:	82 30       	cpi	r24, 0x02	; 2
   10348:	08 f4       	brcc	.+2      	; 0x1034c <UpdateStandaloneStatus+0x2e>
   1034a:	01 2f       	mov	r16, r17
	     case ST_WAYNE_DART:
              iPumpID=xPumpID;
	          break;				   
	     }

		 iAddr=GetFIPAddr(iPumpID);
   1034c:	80 2f       	mov	r24, r16
   1034e:	69 83       	std	Y+1, r22	; 0x01
   10350:	0e 94 50 6e 	call	0xdca0	; 0xdca0 <GetFIPAddr>
		 if (iAddr>0){
   10354:	69 81       	ldd	r22, Y+1	; 0x01
   10356:	88 23       	and	r24, r24
   10358:	09 f4       	brne	.+2      	; 0x1035c <UpdateStandaloneStatus+0x3e>
   1035a:	43 c0       	rjmp	.+134    	; 0x103e2 <UpdateStandaloneStatus+0xc4>
		     iAddr=iAddr-1;
   1035c:	81 50       	subi	r24, 0x01	; 1
			 if (strPumpStatus[iAddr]!=GetPumpStatusLabel(PS_PRINT_READY)){//iFdiiiiiiiiiiiii
   1035e:	90 e0       	ldi	r25, 0x00	; 0
   10360:	fc 01       	movw	r30, r24
   10362:	ee 5f       	subi	r30, 0xFE	; 254
   10364:	fe 4f       	sbci	r31, 0xFE	; 254
   10366:	20 81       	ld	r18, Z
   10368:	20 35       	cpi	r18, 0x50	; 80
   1036a:	d1 f0       	breq	.+52     	; 0x103a0 <UpdateStandaloneStatus+0x82>
		         if (xPumpStatus!=PS_PRINT_READY)
   1036c:	60 31       	cpi	r22, 0x10	; 16
   1036e:	31 f0       	breq	.+12     	; 0x1037c <UpdateStandaloneStatus+0x5e>
				     CurrentPumpStatus[iAddr]=xPumpStatus;
   10370:	fc 01       	movw	r30, r24
   10372:	e3 5c       	subi	r30, 0xC3	; 195
   10374:	fd 4f       	sbci	r31, 0xFD	; 253
   10376:	60 83       	st	Z, r22
   10378:	6e 31       	cpi	r22, 0x1E	; 30
   1037a:	30 f4       	brcc	.+12     	; 0x10388 <UpdateStandaloneStatus+0x6a>
   1037c:	e6 2f       	mov	r30, r22
   1037e:	f0 e0       	ldi	r31, 0x00	; 0
   10380:	e4 5a       	subi	r30, 0xA4	; 164
   10382:	fe 4f       	sbci	r31, 0xFE	; 254
   10384:	20 81       	ld	r18, Z
   10386:	01 c0       	rjmp	.+2      	; 0x1038a <UpdateStandaloneStatus+0x6c>
   10388:	28 e7       	ldi	r18, 0x78	; 120
			     strPumpStatus[iAddr]=GetPumpStatusLabel(xPumpStatus);
   1038a:	fc 01       	movw	r30, r24
   1038c:	ee 5f       	subi	r30, 0xFE	; 254
   1038e:	fe 4f       	sbci	r31, 0xFE	; 254
   10390:	20 83       	st	Z, r18
                 if (xPumpStatus==PS_FINISH_TOTALIZER)
   10392:	65 31       	cpi	r22, 0x15	; 21
   10394:	09 f5       	brne	.+66     	; 0x103d8 <UpdateStandaloneStatus+0xba>
				     strPumpStatus[iAddr]=GetPumpStatusLabel(CurrentPumpStatus[iAddr]);
   10396:	fc 01       	movw	r30, r24
   10398:	e3 5c       	subi	r30, 0xC3	; 195
   1039a:	fd 4f       	sbci	r31, 0xFD	; 253
   1039c:	e0 81       	ld	r30, Z
   1039e:	06 c0       	rjmp	.+12     	; 0x103ac <UpdateStandaloneStatus+0x8e>
   103a0:	dc 01       	movw	r26, r24
   103a2:	a3 5c       	subi	r26, 0xC3	; 195
   103a4:	bd 4f       	sbci	r27, 0xFD	; 253
		     }else if ((strPumpStatus[iAddr]==GetPumpStatusLabel(PS_PRINT_READY))||(xPumpStatus==PUMP_FEOT)||(xPumpStatus==PS_PRINTED)||(xPumpStatus==PS_TOTALIZER)){//P
			     if (xPumpStatus==PS_PRINTED){
   103a6:	61 31       	cpi	r22, 0x11	; 17
   103a8:	71 f4       	brne	.+28     	; 0x103c6 <UpdateStandaloneStatus+0xa8>
				 //New

				     //if (CurrentPumpStatus[iAddr]!=GetPumpStatusLabel(PS_PRINT_READY))
			             strPumpStatus[iAddr]=GetPumpStatusLabel(CurrentPumpStatus[iAddr]);
   103aa:	ec 91       	ld	r30, X
   103ac:	ee 31       	cpi	r30, 0x1E	; 30
   103ae:	28 f4       	brcc	.+10     	; 0x103ba <UpdateStandaloneStatus+0x9c>
   103b0:	f0 e0       	ldi	r31, 0x00	; 0
   103b2:	e4 5a       	subi	r30, 0xA4	; 164
   103b4:	fe 4f       	sbci	r31, 0xFE	; 254
   103b6:	20 81       	ld	r18, Z
   103b8:	01 c0       	rjmp	.+2      	; 0x103bc <UpdateStandaloneStatus+0x9e>
   103ba:	28 e7       	ldi	r18, 0x78	; 120
   103bc:	8e 5f       	subi	r24, 0xFE	; 254
   103be:	9e 4f       	sbci	r25, 0xFE	; 254
   103c0:	fc 01       	movw	r30, r24
   103c2:	20 83       	st	Z, r18
   103c4:	09 c0       	rjmp	.+18     	; 0x103d8 <UpdateStandaloneStatus+0xba>
					 //    CurrentPumpStatus[iAddr]=PUMP_OFF;
					 //    strPumpStatus[iAddr]=GetPumpStatusLabel(PUMP_OFF);
					 //}

				  }
			     else CurrentPumpStatus[iAddr]=xPumpStatus;			 
   103c6:	6c 93       	st	X, r22
			 if (xPumpStatus==PUMP_FEOT){
   103c8:	6b 30       	cpi	r22, 0x0B	; 11
   103ca:	11 f4       	brne	.+4      	; 0x103d0 <UpdateStandaloneStatus+0xb2>
			     CurrentPumpStatus[iAddr]=xPumpStatus;
			     strPumpStatus[iAddr]=GetPumpStatusLabel(CurrentPumpStatus[iAddr]);
   103cc:	86 e4       	ldi	r24, 0x46	; 70
   103ce:	03 c0       	rjmp	.+6      	; 0x103d6 <UpdateStandaloneStatus+0xb8>
				 }
             else if (xPumpStatus==PS_TOTALIZER){
   103d0:	64 31       	cpi	r22, 0x14	; 20
   103d2:	11 f4       	brne	.+4      	; 0x103d8 <UpdateStandaloneStatus+0xba>
			      strPumpStatus[iAddr]=GetPumpStatusLabel(xPumpStatus);
   103d4:	84 e5       	ldi	r24, 0x54	; 84
   103d6:	80 83       	st	Z, r24
				 }
		 }		 	     
         strPumpStatus[16]=0;
   103d8:	10 92 12 01 	sts	0x0112, r1
	     IsNewPumpStatus=True;		 
   103dc:	81 e0       	ldi	r24, 0x01	; 1
   103de:	80 93 01 01 	sts	0x0101, r24
		 }		 
	 }
}
   103e2:	0f 90       	pop	r0
   103e4:	cf 91       	pop	r28
   103e6:	df 91       	pop	r29
   103e8:	1f 91       	pop	r17
   103ea:	0f 91       	pop	r16
   103ec:	08 95       	ret

000103ee <PrintIdle>:
		//Font Setting: 1D 21 01
		uart(_COM_PRINTER, 1, 0x1D);uart(_COM_PRINTER, 1, 0x21);uart(_COM_PRINTER, 1, 0x00);   
		}
}

void PrintIdle(){
   103ee:	ef 92       	push	r14
   103f0:	ff 92       	push	r15
   103f2:	0f 93       	push	r16
   103f4:	1f 93       	push	r17
   103f6:	df 93       	push	r29
   103f8:	cf 93       	push	r28
   103fa:	cd b7       	in	r28, 0x3d	; 61
   103fc:	de b7       	in	r29, 0x3e	; 62
   103fe:	64 97       	sbiw	r28, 0x14	; 20
   10400:	0f b6       	in	r0, 0x3f	; 63
   10402:	f8 94       	cli
   10404:	de bf       	out	0x3e, r29	; 62
   10406:	0f be       	out	0x3f, r0	; 63
   10408:	cd bf       	out	0x3d, r28	; 61
		uart_print(1,1,strSend);
	 }
	 #endif

     //Normalize PrintIdleState
     if ((IsPrinting==True)&&(stPrintIdle!=piIdle)){
   1040a:	80 91 8b 02 	lds	r24, 0x028B
   1040e:	81 30       	cpi	r24, 0x01	; 1
   10410:	31 f4       	brne	.+12     	; 0x1041e <PrintIdle+0x30>
   10412:	80 91 e5 02 	lds	r24, 0x02E5
   10416:	88 23       	and	r24, r24
   10418:	11 f0       	breq	.+4      	; 0x1041e <PrintIdle+0x30>
	     stPrintIdle=piIdle;
   1041a:	10 92 e5 02 	sts	0x02E5, r1
	 }

     switch(stPrintIdle){
   1041e:	e0 91 e5 02 	lds	r30, 0x02E5
   10422:	f0 e0       	ldi	r31, 0x00	; 0
   10424:	e8 31       	cpi	r30, 0x18	; 24
   10426:	f1 05       	cpc	r31, r1
   10428:	08 f0       	brcs	.+2      	; 0x1042c <PrintIdle+0x3e>
   1042a:	67 c7       	rjmp	.+3790   	; 0x112fa <PrintIdle+0xf0c>
   1042c:	ef 54       	subi	r30, 0x4F	; 79
   1042e:	ff 4f       	sbci	r31, 0xFF	; 255
   10430:	ee 0f       	add	r30, r30
   10432:	ff 1f       	adc	r31, r31
   10434:	05 90       	lpm	r0, Z+
   10436:	f4 91       	lpm	r31, Z+
   10438:	e0 2d       	mov	r30, r0
   1043a:	09 94       	ijmp
	 case piIdle:
	      if (IsPrinting==True){
   1043c:	80 91 8b 02 	lds	r24, 0x028B
   10440:	81 30       	cpi	r24, 0x01	; 1
   10442:	09 f0       	breq	.+2      	; 0x10446 <PrintIdle+0x58>
   10444:	5a c7       	rjmp	.+3764   	; 0x112fa <PrintIdle+0xf0c>
		      IsPrinting=False;
   10446:	10 92 8b 02 	sts	0x028B, r1
			  IsBusyIdlePrinting=True;
   1044a:	80 93 91 02 	sts	0x0291, r24
			  IsBusyPrint=False;
   1044e:	10 92 92 02 	sts	0x0292, r1
			  iPrinted=0;
   10452:	10 92 d7 02 	sts	0x02D7, r1
			  PrintCopy=0;
   10456:	10 92 d6 02 	sts	0x02D6, r1
		      stPrintIdle=piInit;
   1045a:	80 93 e5 02 	sts	0x02E5, r24
			  InitPrinter();
   1045e:	0e 94 38 5c 	call	0xb870	; 0xb870 <InitPrinter>
			  IsSignedField=False;
   10462:	10 92 de 02 	sts	0x02DE, r1
   10466:	49 c7       	rjmp	.+3730   	; 0x112fa <PrintIdle+0xf0c>
			  }
	      break;
	 case piInit:
	      iHeader=0;
   10468:	10 92 e4 02 	sts	0x02E4, r1
		  CarriegeReturn();
   1046c:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
   10470:	1b c0       	rjmp	.+54     	; 0x104a8 <PrintIdle+0xba>
		  stPrintIdle=piLoadHeader;
	      break;
     case piLoadHeader:
	      eeprom_read_block((void*) &strPrint, (const void*) &DefHeaderFooter[iHeader], sizeof(DefHeaderFooter[iHeader]));
   10472:	60 91 e4 02 	lds	r22, 0x02E4
   10476:	89 e2       	ldi	r24, 0x29	; 41
   10478:	68 9f       	mul	r22, r24
   1047a:	b0 01       	movw	r22, r0
   1047c:	11 24       	eor	r1, r1
   1047e:	68 5d       	subi	r22, 0xD8	; 216
   10480:	7d 4f       	sbci	r23, 0xFD	; 253
   10482:	80 ea       	ldi	r24, 0xA0	; 160
   10484:	99 e0       	ldi	r25, 0x09	; 9
   10486:	49 e2       	ldi	r20, 0x29	; 41
   10488:	50 e0       	ldi	r21, 0x00	; 0
   1048a:	0e 94 56 aa 	call	0x154ac	; 0x154ac <__eerd_block_m128>
		  iHeader++;
   1048e:	00 91 e4 02 	lds	r16, 0x02E4
   10492:	0f 5f       	subi	r16, 0xFF	; 255
   10494:	00 93 e4 02 	sts	0x02E4, r16
		  if (iHeader<6){
   10498:	06 30       	cpi	r16, 0x06	; 6
   1049a:	f0 f4       	brcc	.+60     	; 0x104d8 <PrintIdle+0xea>
		      if (SpaceOnly(strPrint)==True){
   1049c:	80 ea       	ldi	r24, 0xA0	; 160
   1049e:	99 e0       	ldi	r25, 0x09	; 9
   104a0:	0e 94 8e 4a 	call	0x951c	; 0x951c <SpaceOnly>
   104a4:	81 30       	cpi	r24, 0x01	; 1
   104a6:	11 f4       	brne	.+4      	; 0x104ac <PrintIdle+0xbe>
			      stPrintIdle=piLoadHeader;
   104a8:	82 e0       	ldi	r24, 0x02	; 2
   104aa:	fc c6       	rjmp	.+3576   	; 0x112a4 <PrintIdle+0xeb6>
				  }	      
			  else{
			      stPrintIdle=piPrintHeader;
   104ac:	83 e0       	ldi	r24, 0x03	; 3
   104ae:	80 93 e5 02 	sts	0x02E5, r24
			      iSend=0;
   104b2:	10 92 dd 02 	sts	0x02DD, r1
   104b6:	10 92 dc 02 	sts	0x02DC, r1
				  iLoop=0;
   104ba:	10 92 d9 02 	sts	0x02D9, r1
   104be:	10 92 d8 02 	sts	0x02D8, r1
				  //PrintDoubleHeight on 1st Header
				  if (iHeader==1) PrintDoubleHeight();
   104c2:	01 30       	cpi	r16, 0x01	; 1
   104c4:	19 f4       	brne	.+6      	; 0x104cc <PrintIdle+0xde>
   104c6:	0e 94 0c 5c 	call	0xb818	; 0xb818 <PrintDoubleHeight>
   104ca:	17 c7       	rjmp	.+3630   	; 0x112fa <PrintIdle+0xf0c>
				  else 
				  if (iHeader==2) PrintNormalHeight();
   104cc:	02 30       	cpi	r16, 0x02	; 2
   104ce:	09 f0       	breq	.+2      	; 0x104d2 <PrintIdle+0xe4>
   104d0:	14 c7       	rjmp	.+3624   	; 0x112fa <PrintIdle+0xf0c>
   104d2:	0e 94 22 5c 	call	0xb844	; 0xb844 <PrintNormalHeight>
   104d6:	11 c7       	rjmp	.+3618   	; 0x112fa <PrintIdle+0xf0c>
			   }
		  }else{stPrintIdle=piInitDuplicate; //stPrintIdle=piInitMessage;//
   104d8:	84 e0       	ldi	r24, 0x04	; 4
   104da:	e4 c6       	rjmp	.+3528   	; 0x112a4 <PrintIdle+0xeb6>
		        //else stPrintIdle=piInitMessage;
		  }
	      break;
	 case piPrintHeader:
		  if (iSend<40){
   104dc:	80 91 dc 02 	lds	r24, 0x02DC
   104e0:	90 91 dd 02 	lds	r25, 0x02DD
   104e4:	88 32       	cpi	r24, 0x28	; 40
   104e6:	91 05       	cpc	r25, r1
   104e8:	68 f4       	brcc	.+26     	; 0x10504 <PrintIdle+0x116>
		      iLoop++;
   104ea:	80 91 d8 02 	lds	r24, 0x02D8
   104ee:	90 91 d9 02 	lds	r25, 0x02D9
   104f2:	01 96       	adiw	r24, 0x01	; 1
   104f4:	90 93 d9 02 	sts	0x02D9, r25
   104f8:	80 93 d8 02 	sts	0x02D8, r24
			  if ((iLoop%PRINT_DELAY)==0){
				 TimPrintBusy=0;
   104fc:	10 92 95 02 	sts	0x0295, r1
				 stPrintIdle=piCheckPrintStatusHeader;
   10500:	8b e0       	ldi	r24, 0x0B	; 11
   10502:	d0 c6       	rjmp	.+3488   	; 0x112a4 <PrintIdle+0xeb6>
				 }
			  }
          else{ 
		     stPrintIdle=piLoadHeader;
   10504:	82 e0       	ldi	r24, 0x02	; 2
   10506:	68 c6       	rjmp	.+3280   	; 0x111d8 <PrintIdle+0xdea>
			 CarriegeReturn();
		  }
	      break;
     case piCheckPrintStatusHeader:
	      if (IsBusyPrint==False){
   10508:	80 91 92 02 	lds	r24, 0x0292
   1050c:	88 23       	and	r24, r24
   1050e:	09 f0       	breq	.+2      	; 0x10512 <PrintIdle+0x124>
   10510:	c1 c6       	rjmp	.+3458   	; 0x11294 <PrintIdle+0xea6>
		      uart(_COM_PRINTER,1,strPrint[iSend]);
   10512:	e0 91 dc 02 	lds	r30, 0x02DC
   10516:	f0 91 dd 02 	lds	r31, 0x02DD
   1051a:	e0 56       	subi	r30, 0x60	; 96
   1051c:	f6 4f       	sbci	r31, 0xF6	; 246
   1051e:	61 e0       	ldi	r22, 0x01	; 1
   10520:	40 81       	ld	r20, Z
   10522:	0e 94 e6 a5 	call	0x14bcc	; 0x14bcc <uart>
		      iSend++;
   10526:	80 91 dc 02 	lds	r24, 0x02DC
   1052a:	90 91 dd 02 	lds	r25, 0x02DD
   1052e:	01 96       	adiw	r24, 0x01	; 1
   10530:	90 93 dd 02 	sts	0x02DD, r25
   10534:	80 93 dc 02 	sts	0x02DC, r24
		      stPrintIdle=piPrintHeader;
   10538:	83 e0       	ldi	r24, 0x03	; 3
   1053a:	aa c6       	rjmp	.+3412   	; 0x11290 <PrintIdle+0xea2>
		      stPrintIdle=piFinishPrintIdle;
			  }
	      break;

     case piInitDuplicate:
          if ((iPrinted>0)||(IsReprintTicket==True)){
   1053c:	80 91 d7 02 	lds	r24, 0x02D7
   10540:	88 23       	and	r24, r24
   10542:	21 f4       	brne	.+8      	; 0x1054c <PrintIdle+0x15e>
   10544:	80 91 5d 02 	lds	r24, 0x025D
   10548:	81 30       	cpi	r24, 0x01	; 1
   1054a:	a9 f4       	brne	.+42     	; 0x10576 <PrintIdle+0x188>
		      IsReprintTicket=False;
   1054c:	10 92 5d 02 	sts	0x025D, r1
		      CarriegeReturn(); 
   10550:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
		      sprintf_P(strPrint,PSTR("             DUPLICATE COPY        "));
   10554:	00 d0       	rcall	.+0      	; 0x10556 <PrintIdle+0x168>
   10556:	00 d0       	rcall	.+0      	; 0x10558 <PrintIdle+0x16a>
   10558:	80 ea       	ldi	r24, 0xA0	; 160
   1055a:	99 e0       	ldi	r25, 0x09	; 9
   1055c:	ad b7       	in	r26, 0x3d	; 61
   1055e:	be b7       	in	r27, 0x3e	; 62
   10560:	12 96       	adiw	r26, 0x02	; 2
   10562:	9c 93       	st	X, r25
   10564:	8e 93       	st	-X, r24
   10566:	11 97       	sbiw	r26, 0x01	; 1
   10568:	8e e3       	ldi	r24, 0x3E	; 62
   1056a:	9b e0       	ldi	r25, 0x0B	; 11
   1056c:	14 96       	adiw	r26, 0x04	; 4
   1056e:	9c 93       	st	X, r25
   10570:	8e 93       	st	-X, r24
   10572:	13 97       	sbiw	r26, 0x03	; 3
   10574:	0c c0       	rjmp	.+24     	; 0x1058e <PrintIdle+0x1a0>
		      }
          else{           sprintf_P(strPrint,PSTR(" "));
   10576:	00 d0       	rcall	.+0      	; 0x10578 <PrintIdle+0x18a>
   10578:	00 d0       	rcall	.+0      	; 0x1057a <PrintIdle+0x18c>
   1057a:	80 ea       	ldi	r24, 0xA0	; 160
   1057c:	99 e0       	ldi	r25, 0x09	; 9
   1057e:	ed b7       	in	r30, 0x3d	; 61
   10580:	fe b7       	in	r31, 0x3e	; 62
   10582:	92 83       	std	Z+2, r25	; 0x02
   10584:	81 83       	std	Z+1, r24	; 0x01
   10586:	8c e3       	ldi	r24, 0x3C	; 60
   10588:	9b e0       	ldi	r25, 0x0B	; 11
   1058a:	94 83       	std	Z+4, r25	; 0x04
   1058c:	83 83       	std	Z+3, r24	; 0x03
   1058e:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
   10592:	0f 90       	pop	r0
   10594:	0f 90       	pop	r0
   10596:	0f 90       	pop	r0
   10598:	0f 90       	pop	r0
		      }
		  iSend=0;
   1059a:	10 92 dd 02 	sts	0x02DD, r1
   1059e:	10 92 dc 02 	sts	0x02DC, r1
		  iLoop=0;
   105a2:	10 92 d9 02 	sts	0x02D9, r1
   105a6:	10 92 d8 02 	sts	0x02D8, r1
		  LSend=strlen(strPrint);
   105aa:	e0 ea       	ldi	r30, 0xA0	; 160
   105ac:	f9 e0       	ldi	r31, 0x09	; 9
   105ae:	01 90       	ld	r0, Z+
   105b0:	00 20       	and	r0, r0
   105b2:	e9 f7       	brne	.-6      	; 0x105ae <PrintIdle+0x1c0>
   105b4:	31 97       	sbiw	r30, 0x01	; 1
   105b6:	e0 5a       	subi	r30, 0xA0	; 160
   105b8:	f9 40       	sbci	r31, 0x09	; 9
   105ba:	f0 93 db 02 	sts	0x02DB, r31
   105be:	e0 93 da 02 	sts	0x02DA, r30
          stPrintIdle=piPrintDuplicate; 
   105c2:	85 e0       	ldi	r24, 0x05	; 5
   105c4:	6f c6       	rjmp	.+3294   	; 0x112a4 <PrintIdle+0xeb6>
	      break;
     case piPrintDuplicate:
		  if (iSend<LSend){
   105c6:	20 91 dc 02 	lds	r18, 0x02DC
   105ca:	30 91 dd 02 	lds	r19, 0x02DD
   105ce:	80 91 da 02 	lds	r24, 0x02DA
   105d2:	90 91 db 02 	lds	r25, 0x02DB
   105d6:	28 17       	cp	r18, r24
   105d8:	39 07       	cpc	r19, r25
   105da:	68 f4       	brcc	.+26     	; 0x105f6 <PrintIdle+0x208>
		      iLoop++;
   105dc:	80 91 d8 02 	lds	r24, 0x02D8
   105e0:	90 91 d9 02 	lds	r25, 0x02D9
   105e4:	01 96       	adiw	r24, 0x01	; 1
   105e6:	90 93 d9 02 	sts	0x02D9, r25
   105ea:	80 93 d8 02 	sts	0x02D8, r24
			  if((iLoop%PRINT_DELAY)==0){
				 TimPrintBusy=0;
   105ee:	10 92 95 02 	sts	0x0295, r1
                 stPrintIdle=piCheckPrintStatusDuplicate;
   105f2:	86 e0       	ldi	r24, 0x06	; 6
   105f4:	57 c6       	rjmp	.+3246   	; 0x112a4 <PrintIdle+0xeb6>
				 }
			  }
          else {
		     iSend=0;
   105f6:	10 92 dd 02 	sts	0x02DD, r1
   105fa:	10 92 dc 02 	sts	0x02DC, r1
		     stPrintIdle=piInitMessage;
   105fe:	87 e0       	ldi	r24, 0x07	; 7
   10600:	51 c6       	rjmp	.+3234   	; 0x112a4 <PrintIdle+0xeb6>
			 }
	      break;
     case piCheckPrintStatusDuplicate:
	      if (IsBusyPrint==False){
   10602:	80 91 92 02 	lds	r24, 0x0292
   10606:	88 23       	and	r24, r24
   10608:	09 f0       	breq	.+2      	; 0x1060c <PrintIdle+0x21e>
   1060a:	44 c6       	rjmp	.+3208   	; 0x11294 <PrintIdle+0xea6>
		      uart(_COM_PRINTER,1,strPrint[iSend]);
   1060c:	e0 91 dc 02 	lds	r30, 0x02DC
   10610:	f0 91 dd 02 	lds	r31, 0x02DD
   10614:	e0 56       	subi	r30, 0x60	; 96
   10616:	f6 4f       	sbci	r31, 0xF6	; 246
   10618:	61 e0       	ldi	r22, 0x01	; 1
   1061a:	40 81       	ld	r20, Z
   1061c:	0e 94 e6 a5 	call	0x14bcc	; 0x14bcc <uart>
   10620:	83 ec       	ldi	r24, 0xC3	; 195
   10622:	99 e0       	ldi	r25, 0x09	; 9
   10624:	01 97       	sbiw	r24, 0x01	; 1
   10626:	f1 f7       	brne	.-4      	; 0x10624 <PrintIdle+0x236>
   10628:	00 c0       	rjmp	.+0      	; 0x1062a <PrintIdle+0x23c>
   1062a:	00 00       	nop
			  _delay_ms(10);
		      iSend++;
   1062c:	80 91 dc 02 	lds	r24, 0x02DC
   10630:	90 91 dd 02 	lds	r25, 0x02DD
   10634:	01 96       	adiw	r24, 0x01	; 1
   10636:	90 93 dd 02 	sts	0x02DD, r25
   1063a:	80 93 dc 02 	sts	0x02DC, r24
		      stPrintIdle=piPrintDuplicate;
   1063e:	85 e0       	ldi	r24, 0x05	; 5
   10640:	27 c6       	rjmp	.+3150   	; 0x11290 <PrintIdle+0xea2>
		      stPrintIdle=piFinishPrintIdle;
			  }
	      break;

     case piInitMessage:
	      iSend=0;iLoop=0;
   10642:	10 92 dd 02 	sts	0x02DD, r1
   10646:	10 92 dc 02 	sts	0x02DC, r1
   1064a:	10 92 d9 02 	sts	0x02D9, r1
   1064e:	10 92 d8 02 	sts	0x02D8, r1
		  iMessage=0;
   10652:	10 92 e0 02 	sts	0x02E0, r1
		  switch(MOPType){
   10656:	80 91 97 02 	lds	r24, 0x0297
   1065a:	83 30       	cpi	r24, 0x03	; 3
   1065c:	81 f0       	breq	.+32     	; 0x1067e <PrintIdle+0x290>
   1065e:	84 30       	cpi	r24, 0x04	; 4
   10660:	28 f4       	brcc	.+10     	; 0x1066c <PrintIdle+0x27e>
   10662:	81 30       	cpi	r24, 0x01	; 1
   10664:	61 f0       	breq	.+24     	; 0x1067e <PrintIdle+0x290>
   10666:	82 30       	cpi	r24, 0x02	; 2
   10668:	40 f4       	brcc	.+16     	; 0x1067a <PrintIdle+0x28c>
   1066a:	10 c0       	rjmp	.+32     	; 0x1068c <PrintIdle+0x29e>
   1066c:	88 30       	cpi	r24, 0x08	; 8
   1066e:	49 f0       	breq	.+18     	; 0x10682 <PrintIdle+0x294>
   10670:	89 30       	cpi	r24, 0x09	; 9
   10672:	61 f0       	breq	.+24     	; 0x1068c <PrintIdle+0x29e>
   10674:	87 30       	cpi	r24, 0x07	; 7
   10676:	51 f4       	brne	.+20     	; 0x1068c <PrintIdle+0x29e>
   10678:	02 c0       	rjmp	.+4      	; 0x1067e <PrintIdle+0x290>
		  case MOP_CASH:
		       MessageLine=10;
			   PrintCopy=1;
		       break;
          case MOP_CREDIT_CARD:
		       MessageLine=10;
   1067a:	8a e0       	ldi	r24, 0x0A	; 10
   1067c:	03 c0       	rjmp	.+6      	; 0x10684 <PrintIdle+0x296>
          case MOP_LOCAL_ACCOUNT:
		       MessageLine=20;
			   PrintCopy=2;
		       break;
          case MOP_VOUCHER:
		       MessageLine=20;
   1067e:	84 e1       	ldi	r24, 0x14	; 20
   10680:	01 c0       	rjmp	.+2      	; 0x10684 <PrintIdle+0x296>
			   PrintCopy=2;
		       break;
          case MOP_PUMP_TEST:
		       MessageLine=12;
   10682:	8c e0       	ldi	r24, 0x0C	; 12
   10684:	80 93 df 02 	sts	0x02DF, r24
			   PrintCopy=2;
   10688:	82 e0       	ldi	r24, 0x02	; 2
   1068a:	04 c0       	rjmp	.+8      	; 0x10694 <PrintIdle+0x2a6>
          case MOP_VOID_CARD:
		       MessageLine=10;
			   PrintCopy=1;
		       break;          
          default:
		       MessageLine=10;
   1068c:	8a e0       	ldi	r24, 0x0A	; 10
   1068e:	80 93 df 02 	sts	0x02DF, r24
			   PrintCopy=1;
   10692:	81 e0       	ldi	r24, 0x01	; 1
   10694:	80 93 d6 02 	sts	0x02D6, r24
		       break; 
		  }
		  //LoyaltyDetection
          if ((strlen(strLoyCardID)>0)&&(SpaceOnly(strLoyCardID)==False)){
   10698:	80 91 cc 03 	lds	r24, 0x03CC
   1069c:	88 23       	and	r24, r24
   1069e:	49 f0       	breq	.+18     	; 0x106b2 <PrintIdle+0x2c4>
   106a0:	8c ec       	ldi	r24, 0xCC	; 204
   106a2:	93 e0       	ldi	r25, 0x03	; 3
   106a4:	0e 94 8e 4a 	call	0x951c	; 0x951c <SpaceOnly>
   106a8:	88 23       	and	r24, r24
   106aa:	19 f4       	brne	.+6      	; 0x106b2 <PrintIdle+0x2c4>
		       MessageLine=33;
   106ac:	81 e2       	ldi	r24, 0x21	; 33
   106ae:	80 93 df 02 	sts	0x02DF, r24
		  }
          //stPrintIdle=piLoadMessage;
		  stPrintIdle=piFormatingMessage;
   106b2:	88 e0       	ldi	r24, 0x08	; 8
   106b4:	f7 c5       	rjmp	.+3054   	; 0x112a4 <PrintIdle+0xeb6>
	      break;
     case piFormatingMessage:
	      if (iPrinted==0){
   106b6:	80 91 d7 02 	lds	r24, 0x02D7
   106ba:	88 23       	and	r24, r24
   106bc:	09 f0       	breq	.+2      	; 0x106c0 <PrintIdle+0x2d2>
   106be:	9a c4       	rjmp	.+2356   	; 0x10ff4 <PrintIdle+0xc06>

		      FormatDate(DATE_LONG_YEAR,strDate);
   106c0:	62 e5       	ldi	r22, 0x52	; 82
   106c2:	78 e0       	ldi	r23, 0x08	; 8
   106c4:	0e 94 ef 3e 	call	0x7dde	; 0x7dde <FormatDate>
              RemZeroLead(strIslandID);
   106c8:	8b ed       	ldi	r24, 0xDB	; 219
   106ca:	99 e0       	ldi	r25, 0x09	; 9
   106cc:	0e 94 93 39 	call	0x7326	; 0x7326 <RemZeroLead>
			  RemZeroLead(strFIP_ID);
   106d0:	8d e9       	ldi	r24, 0x9D	; 157
   106d2:	98 e0       	ldi	r25, 0x08	; 8
   106d4:	0e 94 93 39 	call	0x7326	; 0x7326 <RemZeroLead>
		      RemZeroLead(strPrice);              
   106d8:	82 e8       	ldi	r24, 0x82	; 130
   106da:	96 e0       	ldi	r25, 0x06	; 6
   106dc:	0e 94 93 39 	call	0x7326	; 0x7326 <RemZeroLead>
              if (IFType==IT_SLAVE)
   106e0:	80 91 00 01 	lds	r24, 0x0100
   106e4:	81 30       	cpi	r24, 0x01	; 1
   106e6:	21 f4       	brne	.+8      	; 0x106f0 <PrintIdle+0x302>
			      RemZeroLead(strVolume);
   106e8:	8a e5       	ldi	r24, 0x5A	; 90
   106ea:	94 e0       	ldi	r25, 0x04	; 4
   106ec:	0e 94 93 39 	call	0x7326	; 0x7326 <RemZeroLead>
              RemZeroLead(strAmount);
   106f0:	87 e9       	ldi	r24, 0x97	; 151
   106f2:	9c e0       	ldi	r25, 0x0C	; 12
   106f4:	0e 94 93 39 	call	0x7326	; 0x7326 <RemZeroLead>

			  RemDecimal(strPrice);
   106f8:	82 e8       	ldi	r24, 0x82	; 130
   106fa:	96 e0       	ldi	r25, 0x06	; 6
   106fc:	0e 94 67 4a 	call	0x94ce	; 0x94ce <RemDecimal>
			  RemDecimal(strAmount);
   10700:	87 e9       	ldi	r24, 0x97	; 151
   10702:	9c e0       	ldi	r25, 0x0C	; 12
   10704:	0e 94 67 4a 	call	0x94ce	; 0x94ce <RemDecimal>
	  
			  FormatCurrency(strPrice);
   10708:	82 e8       	ldi	r24, 0x82	; 130
   1070a:	96 e0       	ldi	r25, 0x06	; 6
   1070c:	0e 94 91 56 	call	0xad22	; 0xad22 <FormatCurrency>
			  FormatCurrency(strAmount);
   10710:	87 e9       	ldi	r24, 0x97	; 151
   10712:	9c e0       	ldi	r25, 0x0C	; 12
   10714:	0e 94 91 56 	call	0xad22	; 0xad22 <FormatCurrency>
              if (IFType==IT_SLAVE){
   10718:	80 91 00 01 	lds	r24, 0x0100
   1071c:	81 30       	cpi	r24, 0x01	; 1
   1071e:	09 f0       	breq	.+2      	; 0x10722 <PrintIdle+0x334>
   10720:	69 c4       	rjmp	.+2258   	; 0x10ff4 <PrintIdle+0xc06>
		          RemSpaceLag(strCardID);
   10722:	8d e6       	ldi	r24, 0x6D	; 109
   10724:	9c e0       	ldi	r25, 0x0C	; 12
   10726:	0e 94 f7 38 	call	0x71ee	; 0x71ee <RemSpaceLag>
		          RemSpaceLag(strCardHolder);
   1072a:	89 e0       	ldi	r24, 0x09	; 9
   1072c:	94 e0       	ldi	r25, 0x04	; 4
   1072e:	0e 94 f7 38 	call	0x71ee	; 0x71ee <RemSpaceLag>
		          RemSpaceLag(strMOPName);
   10732:	81 e6       	ldi	r24, 0x61	; 97
   10734:	96 e0       	ldi	r25, 0x06	; 6
   10736:	0e 94 f7 38 	call	0x71ee	; 0x71ee <RemSpaceLag>
		          RemSpaceLag(strLoyCardHolder);
   1073a:	89 ea       	ldi	r24, 0xA9	; 169
   1073c:	93 e0       	ldi	r25, 0x03	; 3
   1073e:	0e 94 f7 38 	call	0x71ee	; 0x71ee <RemSpaceLag>
		          RemSpaceLag(strCorporateID);
   10742:	83 e0       	ldi	r24, 0x03	; 3
   10744:	9d e0       	ldi	r25, 0x0D	; 13
   10746:	0e 94 f7 38 	call	0x71ee	; 0x71ee <RemSpaceLag>
		          RemSpaceLag(strCorporateName);
   1074a:	81 eb       	ldi	r24, 0xB1	; 177
   1074c:	94 e0       	ldi	r25, 0x04	; 4
   1074e:	0e 94 f7 38 	call	0x71ee	; 0x71ee <RemSpaceLag>
		          RemSpaceLag(strLoyRedeemPoints);
   10752:	8e e7       	ldi	r24, 0x7E	; 126
   10754:	94 e0       	ldi	r25, 0x04	; 4
   10756:	0e 94 f7 38 	call	0x71ee	; 0x71ee <RemSpaceLag>
		          RemSpaceLag(strLoyCurrMonConsumeV);
   1075a:	86 ee       	ldi	r24, 0xE6	; 230
   1075c:	9c e0       	ldi	r25, 0x0C	; 12
   1075e:	0e 94 f7 38 	call	0x71ee	; 0x71ee <RemSpaceLag>
				  RemSpaceLag(strLoyCurrMonConsumeA);
   10762:	83 e6       	ldi	r24, 0x63	; 99
   10764:	94 e0       	ldi	r25, 0x04	; 4
   10766:	0e 94 f7 38 	call	0x71ee	; 0x71ee <RemSpaceLag>
		          FormatCurrency(strLoyCurrMonConsumeV);              
   1076a:	86 ee       	ldi	r24, 0xE6	; 230
   1076c:	9c e0       	ldi	r25, 0x0C	; 12
   1076e:	0e 94 91 56 	call	0xad22	; 0xad22 <FormatCurrency>
		          FormatCurrency(strLoyCurrMonConsumeA);
   10772:	83 e6       	ldi	r24, 0x63	; 99
   10774:	94 e0       	ldi	r25, 0x04	; 4
   10776:	0e 94 91 56 	call	0xad22	; 0xad22 <FormatCurrency>
   1077a:	3c c4       	rjmp	.+2168   	; 0x10ff4 <PrintIdle+0xc06>
			   }
		  }
          stPrintIdle=piLoadMessage;
	      break;
     case piLoadMessage:
	      switch(iMessage){
   1077c:	e0 91 e0 02 	lds	r30, 0x02E0
   10780:	f0 e0       	ldi	r31, 0x00	; 0
   10782:	e5 32       	cpi	r30, 0x25	; 37
   10784:	f1 05       	cpc	r31, r1
   10786:	08 f0       	brcs	.+2      	; 0x1078a <PrintIdle+0x39c>
   10788:	f8 c3       	rjmp	.+2032   	; 0x10f7a <PrintIdle+0xb8c>
   1078a:	e7 53       	subi	r30, 0x37	; 55
   1078c:	ff 4f       	sbci	r31, 0xFF	; 255
   1078e:	00 ea       	ldi	r16, 0xA0	; 160
   10790:	19 e0       	ldi	r17, 0x09	; 9
   10792:	ee 0f       	add	r30, r30
   10794:	ff 1f       	adc	r31, r31
   10796:	05 90       	lpm	r0, Z+
   10798:	f4 91       	lpm	r31, Z+
   1079a:	e0 2d       	mov	r30, r0
   1079c:	09 94       	ijmp
		  case 0:
		       CarriegeReturn();
   1079e:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("      Shift: %s  No.Trans: %s "),strShift,strTranNo);
   107a2:	ad b7       	in	r26, 0x3d	; 61
   107a4:	be b7       	in	r27, 0x3e	; 62
   107a6:	18 97       	sbiw	r26, 0x08	; 8
   107a8:	0f b6       	in	r0, 0x3f	; 63
   107aa:	f8 94       	cli
   107ac:	be bf       	out	0x3e, r27	; 62
   107ae:	0f be       	out	0x3f, r0	; 63
   107b0:	ad bf       	out	0x3d, r26	; 61
   107b2:	ed b7       	in	r30, 0x3d	; 61
   107b4:	fe b7       	in	r31, 0x3e	; 62
   107b6:	31 96       	adiw	r30, 0x01	; 1
   107b8:	12 96       	adiw	r26, 0x02	; 2
   107ba:	1c 93       	st	X, r17
   107bc:	0e 93       	st	-X, r16
   107be:	11 97       	sbiw	r26, 0x01	; 1
   107c0:	8d e1       	ldi	r24, 0x1D	; 29
   107c2:	9b e0       	ldi	r25, 0x0B	; 11
   107c4:	93 83       	std	Z+3, r25	; 0x03
   107c6:	82 83       	std	Z+2, r24	; 0x02
   107c8:	8d e6       	ldi	r24, 0x6D	; 109
   107ca:	9d e0       	ldi	r25, 0x0D	; 13
   107cc:	95 83       	std	Z+5, r25	; 0x05
   107ce:	84 83       	std	Z+4, r24	; 0x04
   107d0:	8c e8       	ldi	r24, 0x8C	; 140
   107d2:	9d e0       	ldi	r25, 0x0D	; 13
   107d4:	1d c0       	rjmp	.+58     	; 0x10810 <PrintIdle+0x422>
		       break;
		  case 1:
		       //FormatDate(strDate);
			   CarriegeReturn();
   107d6:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("      Waktu: %s %s "),strDate,strTime);
   107da:	8d b7       	in	r24, 0x3d	; 61
   107dc:	9e b7       	in	r25, 0x3e	; 62
   107de:	08 97       	sbiw	r24, 0x08	; 8
   107e0:	0f b6       	in	r0, 0x3f	; 63
   107e2:	f8 94       	cli
   107e4:	9e bf       	out	0x3e, r25	; 62
   107e6:	0f be       	out	0x3f, r0	; 63
   107e8:	8d bf       	out	0x3d, r24	; 61
   107ea:	ed b7       	in	r30, 0x3d	; 61
   107ec:	fe b7       	in	r31, 0x3e	; 62
   107ee:	31 96       	adiw	r30, 0x01	; 1
   107f0:	ad b7       	in	r26, 0x3d	; 61
   107f2:	be b7       	in	r27, 0x3e	; 62
   107f4:	12 96       	adiw	r26, 0x02	; 2
   107f6:	1c 93       	st	X, r17
   107f8:	0e 93       	st	-X, r16
   107fa:	11 97       	sbiw	r26, 0x01	; 1
   107fc:	89 e0       	ldi	r24, 0x09	; 9
   107fe:	9b e0       	ldi	r25, 0x0B	; 11
   10800:	93 83       	std	Z+3, r25	; 0x03
   10802:	82 83       	std	Z+2, r24	; 0x02
   10804:	82 e5       	ldi	r24, 0x52	; 82
   10806:	98 e0       	ldi	r25, 0x08	; 8
   10808:	95 83       	std	Z+5, r25	; 0x05
   1080a:	84 83       	std	Z+4, r24	; 0x04
   1080c:	82 e3       	ldi	r24, 0x32	; 50
   1080e:	94 e0       	ldi	r25, 0x04	; 4
   10810:	97 83       	std	Z+7, r25	; 0x07
   10812:	86 83       	std	Z+6, r24	; 0x06
   10814:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		       break;
   10818:	ed b7       	in	r30, 0x3d	; 61
   1081a:	fe b7       	in	r31, 0x3e	; 62
   1081c:	38 96       	adiw	r30, 0x08	; 8
   1081e:	91 c3       	rjmp	.+1826   	; 0x10f42 <PrintIdle+0xb54>
		  case 2:
		       CarriegeReturn();
   10820:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("    ------------------------------"));
   10824:	00 d0       	rcall	.+0      	; 0x10826 <PrintIdle+0x438>
   10826:	00 d0       	rcall	.+0      	; 0x10828 <PrintIdle+0x43a>
   10828:	ad b7       	in	r26, 0x3d	; 61
   1082a:	be b7       	in	r27, 0x3e	; 62
   1082c:	12 96       	adiw	r26, 0x02	; 2
   1082e:	1c 93       	st	X, r17
   10830:	0e 93       	st	-X, r16
   10832:	11 97       	sbiw	r26, 0x01	; 1
   10834:	86 ee       	ldi	r24, 0xE6	; 230
   10836:	9a e0       	ldi	r25, 0x0A	; 10
   10838:	96 c3       	rjmp	.+1836   	; 0x10f66 <PrintIdle+0xb78>
		       break;
		  case 3:
		       CarriegeReturn();
   1083a:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
			   //RemZeroLead(strIslandID);
			   //RemZeroLead(strFIP_ID);
		       sprintf_P(strPrint,PSTR("      Pulau/Pompa : [%s]-%s"),strIslandID,strFIP_ID);
   1083e:	ed b7       	in	r30, 0x3d	; 61
   10840:	fe b7       	in	r31, 0x3e	; 62
   10842:	38 97       	sbiw	r30, 0x08	; 8
   10844:	0f b6       	in	r0, 0x3f	; 63
   10846:	f8 94       	cli
   10848:	fe bf       	out	0x3e, r31	; 62
   1084a:	0f be       	out	0x3f, r0	; 63
   1084c:	ed bf       	out	0x3d, r30	; 61
   1084e:	31 96       	adiw	r30, 0x01	; 1
   10850:	ad b7       	in	r26, 0x3d	; 61
   10852:	be b7       	in	r27, 0x3e	; 62
   10854:	12 96       	adiw	r26, 0x02	; 2
   10856:	1c 93       	st	X, r17
   10858:	0e 93       	st	-X, r16
   1085a:	11 97       	sbiw	r26, 0x01	; 1
   1085c:	8a ec       	ldi	r24, 0xCA	; 202
   1085e:	9a e0       	ldi	r25, 0x0A	; 10
   10860:	93 83       	std	Z+3, r25	; 0x03
   10862:	82 83       	std	Z+2, r24	; 0x02
   10864:	8b ed       	ldi	r24, 0xDB	; 219
   10866:	99 e0       	ldi	r25, 0x09	; 9
   10868:	95 83       	std	Z+5, r25	; 0x05
   1086a:	84 83       	std	Z+4, r24	; 0x04
   1086c:	8d e9       	ldi	r24, 0x9D	; 157
   1086e:	98 e0       	ldi	r25, 0x08	; 8
   10870:	cf cf       	rjmp	.-98     	; 0x10810 <PrintIdle+0x422>
		       break;
		  case 4:
		       CarriegeReturn();
   10872:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
			   sprintf_P(strPrint,PSTR("      Produk      : %s"),strDescription);
   10876:	00 d0       	rcall	.+0      	; 0x10878 <PrintIdle+0x48a>
   10878:	00 d0       	rcall	.+0      	; 0x1087a <PrintIdle+0x48c>
   1087a:	00 d0       	rcall	.+0      	; 0x1087c <PrintIdle+0x48e>
   1087c:	ed b7       	in	r30, 0x3d	; 61
   1087e:	fe b7       	in	r31, 0x3e	; 62
   10880:	31 96       	adiw	r30, 0x01	; 1
   10882:	ad b7       	in	r26, 0x3d	; 61
   10884:	be b7       	in	r27, 0x3e	; 62
   10886:	12 96       	adiw	r26, 0x02	; 2
   10888:	1c 93       	st	X, r17
   1088a:	0e 93       	st	-X, r16
   1088c:	11 97       	sbiw	r26, 0x01	; 1
   1088e:	83 eb       	ldi	r24, 0xB3	; 179
   10890:	9a e0       	ldi	r25, 0x0A	; 10
   10892:	93 83       	std	Z+3, r25	; 0x03
   10894:	82 83       	std	Z+2, r24	; 0x02
   10896:	86 e0       	ldi	r24, 0x06	; 6
   10898:	99 e0       	ldi	r25, 0x09	; 9
   1089a:	4c c3       	rjmp	.+1688   	; 0x10f34 <PrintIdle+0xb46>
		       break;
		  case 5:
		       //RemZeroLead(strPrice);
               //FormatCurrency(strPrice);
               if (eeprom_read_byte(&DefPrintMoney)==True){
   1089c:	82 ec       	ldi	r24, 0xC2	; 194
   1089e:	93 e0       	ldi	r25, 0x03	; 3
   108a0:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
   108a4:	00 ea       	ldi	r16, 0xA0	; 160
   108a6:	19 e0       	ldi	r17, 0x09	; 9
   108a8:	81 30       	cpi	r24, 0x01	; 1
   108aa:	a9 f4       	brne	.+42     	; 0x108d6 <PrintIdle+0x4e8>
			   	   CarriegeReturn();
   108ac:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("      Harga/L     : Rp.%s"),strPrice);
   108b0:	00 d0       	rcall	.+0      	; 0x108b2 <PrintIdle+0x4c4>
   108b2:	00 d0       	rcall	.+0      	; 0x108b4 <PrintIdle+0x4c6>
   108b4:	00 d0       	rcall	.+0      	; 0x108b6 <PrintIdle+0x4c8>
   108b6:	ed b7       	in	r30, 0x3d	; 61
   108b8:	fe b7       	in	r31, 0x3e	; 62
   108ba:	31 96       	adiw	r30, 0x01	; 1
   108bc:	ad b7       	in	r26, 0x3d	; 61
   108be:	be b7       	in	r27, 0x3e	; 62
   108c0:	12 96       	adiw	r26, 0x02	; 2
   108c2:	1c 93       	st	X, r17
   108c4:	0e 93       	st	-X, r16
   108c6:	11 97       	sbiw	r26, 0x01	; 1
   108c8:	89 e9       	ldi	r24, 0x99	; 153
   108ca:	9a e0       	ldi	r25, 0x0A	; 10
   108cc:	93 83       	std	Z+3, r25	; 0x03
   108ce:	82 83       	std	Z+2, r24	; 0x02
   108d0:	82 e8       	ldi	r24, 0x82	; 130
   108d2:	96 e0       	ldi	r25, 0x06	; 6
   108d4:	2f c3       	rjmp	.+1630   	; 0x10f34 <PrintIdle+0xb46>
			   }else sprintf_P(strPrint,PSTR(""));
   108d6:	00 d0       	rcall	.+0      	; 0x108d8 <PrintIdle+0x4ea>
   108d8:	00 d0       	rcall	.+0      	; 0x108da <PrintIdle+0x4ec>
   108da:	ad b7       	in	r26, 0x3d	; 61
   108dc:	be b7       	in	r27, 0x3e	; 62
   108de:	12 96       	adiw	r26, 0x02	; 2
   108e0:	1c 93       	st	X, r17
   108e2:	0e 93       	st	-X, r16
   108e4:	11 97       	sbiw	r26, 0x01	; 1
   108e6:	88 e9       	ldi	r24, 0x98	; 152
   108e8:	9a e0       	ldi	r25, 0x0A	; 10
   108ea:	3d c3       	rjmp	.+1658   	; 0x10f66 <PrintIdle+0xb78>

		       break;
		  case 6:
		       //RemZeroLead(strVolume);
		       CarriegeReturn();
   108ec:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
			   sprintf_P(strPrint,PSTR("      Jml Liter   : %s L"),strVolume);
   108f0:	00 d0       	rcall	.+0      	; 0x108f2 <PrintIdle+0x504>
   108f2:	00 d0       	rcall	.+0      	; 0x108f4 <PrintIdle+0x506>
   108f4:	00 d0       	rcall	.+0      	; 0x108f6 <PrintIdle+0x508>
   108f6:	ed b7       	in	r30, 0x3d	; 61
   108f8:	fe b7       	in	r31, 0x3e	; 62
   108fa:	31 96       	adiw	r30, 0x01	; 1
   108fc:	ad b7       	in	r26, 0x3d	; 61
   108fe:	be b7       	in	r27, 0x3e	; 62
   10900:	12 96       	adiw	r26, 0x02	; 2
   10902:	1c 93       	st	X, r17
   10904:	0e 93       	st	-X, r16
   10906:	11 97       	sbiw	r26, 0x01	; 1
   10908:	8f e7       	ldi	r24, 0x7F	; 127
   1090a:	9a e0       	ldi	r25, 0x0A	; 10
   1090c:	93 83       	std	Z+3, r25	; 0x03
   1090e:	82 83       	std	Z+2, r24	; 0x02
   10910:	8a e5       	ldi	r24, 0x5A	; 90
   10912:	94 e0       	ldi	r25, 0x04	; 4
   10914:	0f c3       	rjmp	.+1566   	; 0x10f34 <PrintIdle+0xb46>
		       break;
		  case 7:
		       //RemZeroLead(strAmount);		       
			   //FormatCurrency(strAmount);
               if (eeprom_read_byte(&DefPrintMoney)==True){
   10916:	82 ec       	ldi	r24, 0xC2	; 194
   10918:	93 e0       	ldi	r25, 0x03	; 3
   1091a:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
   1091e:	00 ea       	ldi	r16, 0xA0	; 160
   10920:	19 e0       	ldi	r17, 0x09	; 9
   10922:	81 30       	cpi	r24, 0x01	; 1
   10924:	a9 f4       	brne	.+42     	; 0x10950 <PrintIdle+0x562>
			   	   CarriegeReturn();
   10926:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("      Jml Rupiah  : Rp.%s"),strAmount);
   1092a:	00 d0       	rcall	.+0      	; 0x1092c <PrintIdle+0x53e>
   1092c:	00 d0       	rcall	.+0      	; 0x1092e <PrintIdle+0x540>
   1092e:	00 d0       	rcall	.+0      	; 0x10930 <PrintIdle+0x542>
   10930:	ed b7       	in	r30, 0x3d	; 61
   10932:	fe b7       	in	r31, 0x3e	; 62
   10934:	31 96       	adiw	r30, 0x01	; 1
   10936:	ad b7       	in	r26, 0x3d	; 61
   10938:	be b7       	in	r27, 0x3e	; 62
   1093a:	12 96       	adiw	r26, 0x02	; 2
   1093c:	1c 93       	st	X, r17
   1093e:	0e 93       	st	-X, r16
   10940:	11 97       	sbiw	r26, 0x01	; 1
   10942:	85 e6       	ldi	r24, 0x65	; 101
   10944:	9a e0       	ldi	r25, 0x0A	; 10
   10946:	93 83       	std	Z+3, r25	; 0x03
   10948:	82 83       	std	Z+2, r24	; 0x02
   1094a:	87 e9       	ldi	r24, 0x97	; 151
   1094c:	9c e0       	ldi	r25, 0x0C	; 12
   1094e:	f2 c2       	rjmp	.+1508   	; 0x10f34 <PrintIdle+0xb46>
			   }else sprintf_P(strPrint,PSTR(""));
   10950:	00 d0       	rcall	.+0      	; 0x10952 <PrintIdle+0x564>
   10952:	00 d0       	rcall	.+0      	; 0x10954 <PrintIdle+0x566>
   10954:	ad b7       	in	r26, 0x3d	; 61
   10956:	be b7       	in	r27, 0x3e	; 62
   10958:	12 96       	adiw	r26, 0x02	; 2
   1095a:	1c 93       	st	X, r17
   1095c:	0e 93       	st	-X, r16
   1095e:	11 97       	sbiw	r26, 0x01	; 1
   10960:	84 e6       	ldi	r24, 0x64	; 100
   10962:	9a e0       	ldi	r25, 0x0A	; 10
   10964:	00 c3       	rjmp	.+1536   	; 0x10f66 <PrintIdle+0xb78>

		       break;
		  case 8:
		       if ((strlen(strLicPlate)>0)&&(SpaceOnly(strLicPlate)==False)){
   10966:	0e ed       	ldi	r16, 0xDE	; 222
   10968:	19 e0       	ldi	r17, 0x09	; 9
   1096a:	80 91 de 09 	lds	r24, 0x09DE
   1096e:	88 23       	and	r24, r24
   10970:	09 f4       	brne	.+2      	; 0x10974 <PrintIdle+0x586>
   10972:	6d c1       	rjmp	.+730    	; 0x10c4e <PrintIdle+0x860>
   10974:	c8 01       	movw	r24, r16
   10976:	0e 94 8e 4a 	call	0x951c	; 0x951c <SpaceOnly>
   1097a:	88 23       	and	r24, r24
   1097c:	09 f0       	breq	.+2      	; 0x10980 <PrintIdle+0x592>
   1097e:	67 c1       	rjmp	.+718    	; 0x10c4e <PrintIdle+0x860>
			       CarriegeReturn();
   10980:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("      No.Polisi   : %s"),strLicPlate);
   10984:	00 d0       	rcall	.+0      	; 0x10986 <PrintIdle+0x598>
   10986:	00 d0       	rcall	.+0      	; 0x10988 <PrintIdle+0x59a>
   10988:	00 d0       	rcall	.+0      	; 0x1098a <PrintIdle+0x59c>
   1098a:	ed b7       	in	r30, 0x3d	; 61
   1098c:	fe b7       	in	r31, 0x3e	; 62
   1098e:	31 96       	adiw	r30, 0x01	; 1
   10990:	80 ea       	ldi	r24, 0xA0	; 160
   10992:	99 e0       	ldi	r25, 0x09	; 9
   10994:	ad b7       	in	r26, 0x3d	; 61
   10996:	be b7       	in	r27, 0x3e	; 62
   10998:	12 96       	adiw	r26, 0x02	; 2
   1099a:	9c 93       	st	X, r25
   1099c:	8e 93       	st	-X, r24
   1099e:	11 97       	sbiw	r26, 0x01	; 1
   109a0:	8d e4       	ldi	r24, 0x4D	; 77
   109a2:	9a e0       	ldi	r25, 0x0A	; 10
   109a4:	1f c0       	rjmp	.+62     	; 0x109e4 <PrintIdle+0x5f6>
                   ClearMem(strLicPlate);
				   }
               else ClearMem(strPrint);
		       break;
		  case 9:
		       if ((strlen(strOdometer)>0)&&(SpaceOnly(strOdometer)==False)){
   109a6:	07 ea       	ldi	r16, 0xA7	; 167
   109a8:	14 e0       	ldi	r17, 0x04	; 4
   109aa:	80 91 a7 04 	lds	r24, 0x04A7
   109ae:	88 23       	and	r24, r24
   109b0:	09 f4       	brne	.+2      	; 0x109b4 <PrintIdle+0x5c6>
   109b2:	4d c1       	rjmp	.+666    	; 0x10c4e <PrintIdle+0x860>
   109b4:	c8 01       	movw	r24, r16
   109b6:	0e 94 8e 4a 	call	0x951c	; 0x951c <SpaceOnly>
   109ba:	88 23       	and	r24, r24
   109bc:	09 f0       	breq	.+2      	; 0x109c0 <PrintIdle+0x5d2>
   109be:	47 c1       	rjmp	.+654    	; 0x10c4e <PrintIdle+0x860>
			       CarriegeReturn();
   109c0:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
		           sprintf_P(strPrint,PSTR("      Odometer    : %s"),strOdometer);
   109c4:	00 d0       	rcall	.+0      	; 0x109c6 <PrintIdle+0x5d8>
   109c6:	00 d0       	rcall	.+0      	; 0x109c8 <PrintIdle+0x5da>
   109c8:	00 d0       	rcall	.+0      	; 0x109ca <PrintIdle+0x5dc>
   109ca:	ed b7       	in	r30, 0x3d	; 61
   109cc:	fe b7       	in	r31, 0x3e	; 62
   109ce:	31 96       	adiw	r30, 0x01	; 1
   109d0:	80 ea       	ldi	r24, 0xA0	; 160
   109d2:	99 e0       	ldi	r25, 0x09	; 9
   109d4:	ad b7       	in	r26, 0x3d	; 61
   109d6:	be b7       	in	r27, 0x3e	; 62
   109d8:	12 96       	adiw	r26, 0x02	; 2
   109da:	9c 93       	st	X, r25
   109dc:	8e 93       	st	-X, r24
   109de:	11 97       	sbiw	r26, 0x01	; 1
   109e0:	86 e3       	ldi	r24, 0x36	; 54
   109e2:	9a e0       	ldi	r25, 0x0A	; 10
   109e4:	93 83       	std	Z+3, r25	; 0x03
   109e6:	82 83       	std	Z+2, r24	; 0x02
   109e8:	15 83       	std	Z+5, r17	; 0x05
   109ea:	04 83       	std	Z+4, r16	; 0x04
   109ec:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
				   ClearMem(strOdometer);
   109f0:	ed b7       	in	r30, 0x3d	; 61
   109f2:	fe b7       	in	r31, 0x3e	; 62
   109f4:	36 96       	adiw	r30, 0x06	; 6
   109f6:	0f b6       	in	r0, 0x3f	; 63
   109f8:	f8 94       	cli
   109fa:	fe bf       	out	0x3e, r31	; 62
   109fc:	0f be       	out	0x3f, r0	; 63
   109fe:	ed bf       	out	0x3d, r30	; 61
   10a00:	c8 01       	movw	r24, r16
   10a02:	0e 94 33 a2 	call	0x14466	; 0x14466 <ClearMem>
   10a06:	b9 c2       	rjmp	.+1394   	; 0x10f7a <PrintIdle+0xb8c>
			   }else ClearMem(strPrint);
		       break;
		  case 10:
		       CarriegeReturn();
   10a08:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("    ------------------------------"));
   10a0c:	00 d0       	rcall	.+0      	; 0x10a0e <PrintIdle+0x620>
   10a0e:	00 d0       	rcall	.+0      	; 0x10a10 <PrintIdle+0x622>
   10a10:	ad b7       	in	r26, 0x3d	; 61
   10a12:	be b7       	in	r27, 0x3e	; 62
   10a14:	12 96       	adiw	r26, 0x02	; 2
   10a16:	1c 93       	st	X, r17
   10a18:	0e 93       	st	-X, r16
   10a1a:	11 97       	sbiw	r26, 0x01	; 1
   10a1c:	83 e1       	ldi	r24, 0x13	; 19
   10a1e:	9a e0       	ldi	r25, 0x0A	; 10
   10a20:	a2 c2       	rjmp	.+1348   	; 0x10f66 <PrintIdle+0xb78>
		       break;
          //ChangeMOPPrint
		  case 11:
			   if ((MOPType==MOP_LOCAL_ACCOUNT)||(MOPType==MOP_DEBIT_CARD)||(MOPType==MOP_LOYALTY_LOCAL_ACCOUNT)){
   10a22:	80 91 97 02 	lds	r24, 0x0297
   10a26:	81 30       	cpi	r24, 0x01	; 1
   10a28:	21 f0       	breq	.+8      	; 0x10a32 <PrintIdle+0x644>
   10a2a:	83 30       	cpi	r24, 0x03	; 3
   10a2c:	11 f0       	breq	.+4      	; 0x10a32 <PrintIdle+0x644>
   10a2e:	86 30       	cpi	r24, 0x06	; 6
   10a30:	b9 f4       	brne	.+46     	; 0x10a60 <PrintIdle+0x672>
			       //RemSpaceLag(strCardID);
				   CarriegeReturn();
   10a32:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("    Kartu ID : %s"),strCardID);
   10a36:	00 d0       	rcall	.+0      	; 0x10a38 <PrintIdle+0x64a>
   10a38:	00 d0       	rcall	.+0      	; 0x10a3a <PrintIdle+0x64c>
   10a3a:	00 d0       	rcall	.+0      	; 0x10a3c <PrintIdle+0x64e>
   10a3c:	ed b7       	in	r30, 0x3d	; 61
   10a3e:	fe b7       	in	r31, 0x3e	; 62
   10a40:	31 96       	adiw	r30, 0x01	; 1
   10a42:	80 ea       	ldi	r24, 0xA0	; 160
   10a44:	99 e0       	ldi	r25, 0x09	; 9
   10a46:	ad b7       	in	r26, 0x3d	; 61
   10a48:	be b7       	in	r27, 0x3e	; 62
   10a4a:	12 96       	adiw	r26, 0x02	; 2
   10a4c:	9c 93       	st	X, r25
   10a4e:	8e 93       	st	-X, r24
   10a50:	11 97       	sbiw	r26, 0x01	; 1
   10a52:	81 e0       	ldi	r24, 0x01	; 1
   10a54:	9a e0       	ldi	r25, 0x0A	; 10
   10a56:	93 83       	std	Z+3, r25	; 0x03
   10a58:	82 83       	std	Z+2, r24	; 0x02
   10a5a:	8d e6       	ldi	r24, 0x6D	; 109
   10a5c:	9c e0       	ldi	r25, 0x0C	; 12
   10a5e:	18 c0       	rjmp	.+48     	; 0x10a90 <PrintIdle+0x6a2>
				   IsSignedField=True;
				   }
	           else
			   if (MOPType==MOP_VOUCHER){
   10a60:	87 30       	cpi	r24, 0x07	; 7
   10a62:	f1 f4       	brne	.+60     	; 0x10aa0 <PrintIdle+0x6b2>
			       //RemSpaceLag(strCardID);
				   CarriegeReturn();
   10a64:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("    Voucher No: %s"),strVoucherNum);
   10a68:	00 d0       	rcall	.+0      	; 0x10a6a <PrintIdle+0x67c>
   10a6a:	00 d0       	rcall	.+0      	; 0x10a6c <PrintIdle+0x67e>
   10a6c:	00 d0       	rcall	.+0      	; 0x10a6e <PrintIdle+0x680>
   10a6e:	ed b7       	in	r30, 0x3d	; 61
   10a70:	fe b7       	in	r31, 0x3e	; 62
   10a72:	31 96       	adiw	r30, 0x01	; 1
   10a74:	80 ea       	ldi	r24, 0xA0	; 160
   10a76:	99 e0       	ldi	r25, 0x09	; 9
   10a78:	ad b7       	in	r26, 0x3d	; 61
   10a7a:	be b7       	in	r27, 0x3e	; 62
   10a7c:	12 96       	adiw	r26, 0x02	; 2
   10a7e:	9c 93       	st	X, r25
   10a80:	8e 93       	st	-X, r24
   10a82:	11 97       	sbiw	r26, 0x01	; 1
   10a84:	8e ee       	ldi	r24, 0xEE	; 238
   10a86:	99 e0       	ldi	r25, 0x09	; 9
   10a88:	93 83       	std	Z+3, r25	; 0x03
   10a8a:	82 83       	std	Z+2, r24	; 0x02
   10a8c:	85 e3       	ldi	r24, 0x35	; 53
   10a8e:	9d e0       	ldi	r25, 0x0D	; 13
   10a90:	95 83       	std	Z+5, r25	; 0x05
   10a92:	84 83       	std	Z+4, r24	; 0x04
   10a94:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
				   IsSignedField=True;
   10a98:	81 e0       	ldi	r24, 0x01	; 1
   10a9a:	80 93 de 02 	sts	0x02DE, r24
   10a9e:	4e c2       	rjmp	.+1180   	; 0x10f3c <PrintIdle+0xb4e>
				   }
			   else
			   if (MOPType==MOP_PUMP_TEST) {
   10aa0:	88 30       	cpi	r24, 0x08	; 8
   10aa2:	09 f0       	breq	.+2      	; 0x10aa6 <PrintIdle+0x6b8>
   10aa4:	d4 c0       	rjmp	.+424    	; 0x10c4e <PrintIdle+0x860>
			       CarriegeReturn();
   10aa6:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("          *** PUMP TEST ***       "));
   10aaa:	00 d0       	rcall	.+0      	; 0x10aac <PrintIdle+0x6be>
   10aac:	00 d0       	rcall	.+0      	; 0x10aae <PrintIdle+0x6c0>
   10aae:	80 ea       	ldi	r24, 0xA0	; 160
   10ab0:	99 e0       	ldi	r25, 0x09	; 9
   10ab2:	ad b7       	in	r26, 0x3d	; 61
   10ab4:	be b7       	in	r27, 0x3e	; 62
   10ab6:	12 96       	adiw	r26, 0x02	; 2
   10ab8:	9c 93       	st	X, r25
   10aba:	8e 93       	st	-X, r24
   10abc:	11 97       	sbiw	r26, 0x01	; 1
   10abe:	8b ec       	ldi	r24, 0xCB	; 203
   10ac0:	99 e0       	ldi	r25, 0x09	; 9
   10ac2:	14 96       	adiw	r26, 0x04	; 4
   10ac4:	9c 93       	st	X, r25
   10ac6:	8e 93       	st	-X, r24
   10ac8:	13 97       	sbiw	r26, 0x03	; 3
   10aca:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
				   IsSignedField=False;
   10ace:	10 92 de 02 	sts	0x02DE, r1
   10ad2:	4f c2       	rjmp	.+1182   	; 0x10f72 <PrintIdle+0xb84>
				   }
               else ClearMem(strPrint);
		       break;
          case 12:
			   if (MOPType==MOP_LOCAL_ACCOUNT) {
   10ad4:	80 91 97 02 	lds	r24, 0x0297
   10ad8:	81 30       	cpi	r24, 0x01	; 1
   10ada:	99 f4       	brne	.+38     	; 0x10b02 <PrintIdle+0x714>
			       //RemSpaceLag(strCardHolder);
				   CarriegeReturn();
   10adc:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("    Nama     : %s"),strCardHolder);
   10ae0:	00 d0       	rcall	.+0      	; 0x10ae2 <PrintIdle+0x6f4>
   10ae2:	00 d0       	rcall	.+0      	; 0x10ae4 <PrintIdle+0x6f6>
   10ae4:	00 d0       	rcall	.+0      	; 0x10ae6 <PrintIdle+0x6f8>
   10ae6:	ed b7       	in	r30, 0x3d	; 61
   10ae8:	fe b7       	in	r31, 0x3e	; 62
   10aea:	31 96       	adiw	r30, 0x01	; 1
   10aec:	80 ea       	ldi	r24, 0xA0	; 160
   10aee:	99 e0       	ldi	r25, 0x09	; 9
   10af0:	ad b7       	in	r26, 0x3d	; 61
   10af2:	be b7       	in	r27, 0x3e	; 62
   10af4:	12 96       	adiw	r26, 0x02	; 2
   10af6:	9c 93       	st	X, r25
   10af8:	8e 93       	st	-X, r24
   10afa:	11 97       	sbiw	r26, 0x01	; 1
   10afc:	89 eb       	ldi	r24, 0xB9	; 185
   10afe:	99 e0       	ldi	r25, 0x09	; 9
   10b00:	41 c0       	rjmp	.+130    	; 0x10b84 <PrintIdle+0x796>
				   }
               else 
               if (MOPType==MOP_DEBIT_CARD) {//EDCApprovalCode
   10b02:	83 30       	cpi	r24, 0x03	; 3
   10b04:	09 f0       	breq	.+2      	; 0x10b08 <PrintIdle+0x71a>
   10b06:	43 c0       	rjmp	.+134    	; 0x10b8e <PrintIdle+0x7a0>
			       if (IsPrintApprovalCode==True){
   10b08:	80 91 79 02 	lds	r24, 0x0279
   10b0c:	81 30       	cpi	r24, 0x01	; 1
   10b0e:	41 f5       	brne	.+80     	; 0x10b60 <PrintIdle+0x772>
				       IsPrintApprovalCode=False;
   10b10:	10 92 79 02 	sts	0x0279, r1
					   FillChar(strCardHolder,0,sizeof(strCardHolder));
   10b14:	09 e0       	ldi	r16, 0x09	; 9
   10b16:	14 e0       	ldi	r17, 0x04	; 4
   10b18:	c8 01       	movw	r24, r16
   10b1a:	60 e0       	ldi	r22, 0x00	; 0
   10b1c:	70 e0       	ldi	r23, 0x00	; 0
   10b1e:	49 e2       	ldi	r20, 0x29	; 41
   10b20:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>
					   sprintf_P(strCardHolder,PSTR("%s  "),strApprovalCode);
   10b24:	00 d0       	rcall	.+0      	; 0x10b26 <PrintIdle+0x738>
   10b26:	00 d0       	rcall	.+0      	; 0x10b28 <PrintIdle+0x73a>
   10b28:	00 d0       	rcall	.+0      	; 0x10b2a <PrintIdle+0x73c>
   10b2a:	ed b7       	in	r30, 0x3d	; 61
   10b2c:	fe b7       	in	r31, 0x3e	; 62
   10b2e:	31 96       	adiw	r30, 0x01	; 1
   10b30:	ad b7       	in	r26, 0x3d	; 61
   10b32:	be b7       	in	r27, 0x3e	; 62
   10b34:	12 96       	adiw	r26, 0x02	; 2
   10b36:	1c 93       	st	X, r17
   10b38:	0e 93       	st	-X, r16
   10b3a:	11 97       	sbiw	r26, 0x01	; 1
   10b3c:	84 eb       	ldi	r24, 0xB4	; 180
   10b3e:	99 e0       	ldi	r25, 0x09	; 9
   10b40:	93 83       	std	Z+3, r25	; 0x03
   10b42:	82 83       	std	Z+2, r24	; 0x02
   10b44:	84 ed       	ldi	r24, 0xD4	; 212
   10b46:	98 e0       	ldi	r25, 0x08	; 8
   10b48:	95 83       	std	Z+5, r25	; 0x05
   10b4a:	84 83       	std	Z+4, r24	; 0x04
   10b4c:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
   10b50:	ed b7       	in	r30, 0x3d	; 61
   10b52:	fe b7       	in	r31, 0x3e	; 62
   10b54:	36 96       	adiw	r30, 0x06	; 6
   10b56:	0f b6       	in	r0, 0x3f	; 63
   10b58:	f8 94       	cli
   10b5a:	fe bf       	out	0x3e, r31	; 62
   10b5c:	0f be       	out	0x3f, r0	; 63
   10b5e:	ed bf       	out	0x3d, r30	; 61
				   }
			       //RemSpaceLag(strCardHolder);
				   CarriegeReturn();
   10b60:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("    Appr Code: %s"),strCardHolder);
   10b64:	00 d0       	rcall	.+0      	; 0x10b66 <PrintIdle+0x778>
   10b66:	00 d0       	rcall	.+0      	; 0x10b68 <PrintIdle+0x77a>
   10b68:	00 d0       	rcall	.+0      	; 0x10b6a <PrintIdle+0x77c>
   10b6a:	ed b7       	in	r30, 0x3d	; 61
   10b6c:	fe b7       	in	r31, 0x3e	; 62
   10b6e:	31 96       	adiw	r30, 0x01	; 1
   10b70:	80 ea       	ldi	r24, 0xA0	; 160
   10b72:	99 e0       	ldi	r25, 0x09	; 9
   10b74:	ad b7       	in	r26, 0x3d	; 61
   10b76:	be b7       	in	r27, 0x3e	; 62
   10b78:	12 96       	adiw	r26, 0x02	; 2
   10b7a:	9c 93       	st	X, r25
   10b7c:	8e 93       	st	-X, r24
   10b7e:	11 97       	sbiw	r26, 0x01	; 1
   10b80:	82 ea       	ldi	r24, 0xA2	; 162
   10b82:	99 e0       	ldi	r25, 0x09	; 9
   10b84:	93 83       	std	Z+3, r25	; 0x03
   10b86:	82 83       	std	Z+2, r24	; 0x02
   10b88:	89 e0       	ldi	r24, 0x09	; 9
   10b8a:	94 e0       	ldi	r25, 0x04	; 4
   10b8c:	d3 c1       	rjmp	.+934    	; 0x10f34 <PrintIdle+0xb46>
				   }
               else
			   if (MOPType==MOP_VOUCHER){
   10b8e:	87 30       	cpi	r24, 0x07	; 7
   10b90:	79 f4       	brne	.+30     	; 0x10bb0 <PrintIdle+0x7c2>
			       CarriegeReturn();
   10b92:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("  "));
   10b96:	00 d0       	rcall	.+0      	; 0x10b98 <PrintIdle+0x7aa>
   10b98:	00 d0       	rcall	.+0      	; 0x10b9a <PrintIdle+0x7ac>
   10b9a:	80 ea       	ldi	r24, 0xA0	; 160
   10b9c:	99 e0       	ldi	r25, 0x09	; 9
   10b9e:	ad b7       	in	r26, 0x3d	; 61
   10ba0:	be b7       	in	r27, 0x3e	; 62
   10ba2:	12 96       	adiw	r26, 0x02	; 2
   10ba4:	9c 93       	st	X, r25
   10ba6:	8e 93       	st	-X, r24
   10ba8:	11 97       	sbiw	r26, 0x01	; 1
   10baa:	8f e9       	ldi	r24, 0x9F	; 159
   10bac:	99 e0       	ldi	r25, 0x09	; 9
   10bae:	db c1       	rjmp	.+950    	; 0x10f66 <PrintIdle+0xb78>
				   }
			   else
			   if (MOPType==MOP_PUMP_TEST) {
   10bb0:	88 30       	cpi	r24, 0x08	; 8
   10bb2:	09 f0       	breq	.+2      	; 0x10bb6 <PrintIdle+0x7c8>
   10bb4:	4c c0       	rjmp	.+152    	; 0x10c4e <PrintIdle+0x860>
			       CarriegeReturn();
   10bb6:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("                 "));
   10bba:	00 d0       	rcall	.+0      	; 0x10bbc <PrintIdle+0x7ce>
   10bbc:	00 d0       	rcall	.+0      	; 0x10bbe <PrintIdle+0x7d0>
   10bbe:	80 ea       	ldi	r24, 0xA0	; 160
   10bc0:	99 e0       	ldi	r25, 0x09	; 9
   10bc2:	ed b7       	in	r30, 0x3d	; 61
   10bc4:	fe b7       	in	r31, 0x3e	; 62
   10bc6:	92 83       	std	Z+2, r25	; 0x02
   10bc8:	81 83       	std	Z+1, r24	; 0x01
   10bca:	8d e8       	ldi	r24, 0x8D	; 141
   10bcc:	99 e0       	ldi	r25, 0x09	; 9
   10bce:	23 c0       	rjmp	.+70     	; 0x10c16 <PrintIdle+0x828>
				   }
               else ClearMem(strPrint);
		       break;
          case 13:
		       if (IsSignedField==True){
   10bd0:	80 91 de 02 	lds	r24, 0x02DE
   10bd4:	81 30       	cpi	r24, 0x01	; 1
   10bd6:	d9 f5       	brne	.+118    	; 0x10c4e <PrintIdle+0x860>
			       CarriegeReturn();
   10bd8:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("                      "));
   10bdc:	00 d0       	rcall	.+0      	; 0x10bde <PrintIdle+0x7f0>
   10bde:	00 d0       	rcall	.+0      	; 0x10be0 <PrintIdle+0x7f2>
   10be0:	80 ea       	ldi	r24, 0xA0	; 160
   10be2:	99 e0       	ldi	r25, 0x09	; 9
   10be4:	ad b7       	in	r26, 0x3d	; 61
   10be6:	be b7       	in	r27, 0x3e	; 62
   10be8:	12 96       	adiw	r26, 0x02	; 2
   10bea:	9c 93       	st	X, r25
   10bec:	8e 93       	st	-X, r24
   10bee:	11 97       	sbiw	r26, 0x01	; 1
   10bf0:	86 e7       	ldi	r24, 0x76	; 118
   10bf2:	99 e0       	ldi	r25, 0x09	; 9
   10bf4:	b8 c1       	rjmp	.+880    	; 0x10f66 <PrintIdle+0xb78>
               }else ClearMem(strPrint);
		       break;
          case 14:
		       if (IsSignedField==True){
   10bf6:	80 91 de 02 	lds	r24, 0x02DE
   10bfa:	81 30       	cpi	r24, 0x01	; 1
   10bfc:	41 f5       	brne	.+80     	; 0x10c4e <PrintIdle+0x860>
			       CarriegeReturn();
   10bfe:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("                      "));
   10c02:	00 d0       	rcall	.+0      	; 0x10c04 <PrintIdle+0x816>
   10c04:	00 d0       	rcall	.+0      	; 0x10c06 <PrintIdle+0x818>
   10c06:	80 ea       	ldi	r24, 0xA0	; 160
   10c08:	99 e0       	ldi	r25, 0x09	; 9
   10c0a:	ed b7       	in	r30, 0x3d	; 61
   10c0c:	fe b7       	in	r31, 0x3e	; 62
   10c0e:	92 83       	std	Z+2, r25	; 0x02
   10c10:	81 83       	std	Z+1, r24	; 0x01
   10c12:	8f e5       	ldi	r24, 0x5F	; 95
   10c14:	99 e0       	ldi	r25, 0x09	; 9
   10c16:	94 83       	std	Z+4, r25	; 0x04
   10c18:	83 83       	std	Z+3, r24	; 0x03
   10c1a:	a9 c1       	rjmp	.+850    	; 0x10f6e <PrintIdle+0xb80>
			       //sprintf_P(strPrint,PSTR("                      "));
				   ClearMem(strPrint);
               }else ClearMem(strPrint);
		       break;
          case 17:
		       if (IsSignedField==True){
   10c1c:	80 91 de 02 	lds	r24, 0x02DE
   10c20:	81 30       	cpi	r24, 0x01	; 1
   10c22:	a9 f4       	brne	.+42     	; 0x10c4e <PrintIdle+0x860>
			       CarriegeReturn();
   10c24:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("    Tanda Tangan  (______________)"));
   10c28:	00 d0       	rcall	.+0      	; 0x10c2a <PrintIdle+0x83c>
   10c2a:	00 d0       	rcall	.+0      	; 0x10c2c <PrintIdle+0x83e>
   10c2c:	80 ea       	ldi	r24, 0xA0	; 160
   10c2e:	99 e0       	ldi	r25, 0x09	; 9
   10c30:	ad b7       	in	r26, 0x3d	; 61
   10c32:	be b7       	in	r27, 0x3e	; 62
   10c34:	12 96       	adiw	r26, 0x02	; 2
   10c36:	9c 93       	st	X, r25
   10c38:	8e 93       	st	-X, r24
   10c3a:	11 97       	sbiw	r26, 0x01	; 1
   10c3c:	8c e3       	ldi	r24, 0x3C	; 60
   10c3e:	99 e0       	ldi	r25, 0x09	; 9
   10c40:	92 c1       	rjmp	.+804    	; 0x10f66 <PrintIdle+0xb78>
               }else ClearMem(strPrint);
		       break;
          case 18:
		       if (IsSignedField==True){
   10c42:	80 91 de 02 	lds	r24, 0x02DE
   10c46:	81 30       	cpi	r24, 0x01	; 1
   10c48:	11 f4       	brne	.+4      	; 0x10c4e <PrintIdle+0x860>
			       IsSignedField=False;
   10c4a:	10 92 de 02 	sts	0x02DE, r1
			       //CarriegeReturn();
			       //sprintf_P(strPrint,PSTR("                      "));
				   ClearMem(strPrint);
   10c4e:	80 ea       	ldi	r24, 0xA0	; 160
   10c50:	99 e0       	ldi	r25, 0x09	; 9
   10c52:	d7 ce       	rjmp	.-594    	; 0x10a02 <PrintIdle+0x614>
               }else ClearMem(strPrint);
		       break;
          case 19://PrintMOP Name
		       if (MOPType!=MOP_CASH){
   10c54:	80 91 97 02 	lds	r24, 0x0297
   10c58:	88 23       	and	r24, r24
   10c5a:	c9 f3       	breq	.-14     	; 0x10c4e <PrintIdle+0x860>
			       CarriegeReturn();
   10c5c:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
			       //RemSpaceLag(strMOPName);
			       sprintf_P(strPrint,PSTR("    .%s"),strMOPName);
   10c60:	00 d0       	rcall	.+0      	; 0x10c62 <PrintIdle+0x874>
   10c62:	00 d0       	rcall	.+0      	; 0x10c64 <PrintIdle+0x876>
   10c64:	00 d0       	rcall	.+0      	; 0x10c66 <PrintIdle+0x878>
   10c66:	ed b7       	in	r30, 0x3d	; 61
   10c68:	fe b7       	in	r31, 0x3e	; 62
   10c6a:	31 96       	adiw	r30, 0x01	; 1
   10c6c:	80 ea       	ldi	r24, 0xA0	; 160
   10c6e:	99 e0       	ldi	r25, 0x09	; 9
   10c70:	ad b7       	in	r26, 0x3d	; 61
   10c72:	be b7       	in	r27, 0x3e	; 62
   10c74:	12 96       	adiw	r26, 0x02	; 2
   10c76:	9c 93       	st	X, r25
   10c78:	8e 93       	st	-X, r24
   10c7a:	11 97       	sbiw	r26, 0x01	; 1
   10c7c:	84 e3       	ldi	r24, 0x34	; 52
   10c7e:	99 e0       	ldi	r25, 0x09	; 9
   10c80:	93 83       	std	Z+3, r25	; 0x03
   10c82:	82 83       	std	Z+2, r24	; 0x02
   10c84:	81 e6       	ldi	r24, 0x61	; 97
   10c86:	96 e0       	ldi	r25, 0x06	; 6
   10c88:	55 c1       	rjmp	.+682    	; 0x10f34 <PrintIdle+0xb46>
			   }else ClearMem(strPrint);
		       break;
		  case 20:
		       if (MOPType!=MOP_CASH){
   10c8a:	80 91 97 02 	lds	r24, 0x0297
   10c8e:	88 23       	and	r24, r24
   10c90:	f1 f2       	breq	.-68     	; 0x10c4e <PrintIdle+0x860>
			       CarriegeReturn();
   10c92:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
		           sprintf_P(strPrint,PSTR("    ------------------------------"));
   10c96:	00 d0       	rcall	.+0      	; 0x10c98 <PrintIdle+0x8aa>
   10c98:	00 d0       	rcall	.+0      	; 0x10c9a <PrintIdle+0x8ac>
   10c9a:	80 ea       	ldi	r24, 0xA0	; 160
   10c9c:	99 e0       	ldi	r25, 0x09	; 9
   10c9e:	ad b7       	in	r26, 0x3d	; 61
   10ca0:	be b7       	in	r27, 0x3e	; 62
   10ca2:	12 96       	adiw	r26, 0x02	; 2
   10ca4:	9c 93       	st	X, r25
   10ca6:	8e 93       	st	-X, r24
   10ca8:	11 97       	sbiw	r26, 0x01	; 1
   10caa:	81 e1       	ldi	r24, 0x11	; 17
   10cac:	99 e0       	ldi	r25, 0x09	; 9
   10cae:	5b c1       	rjmp	.+694    	; 0x10f66 <PrintIdle+0xb78>
			   }else ClearMem(strPrint);
		       break;          
          //Loyalty
		  case 21:
		       CarriegeReturn();
   10cb0:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("         LOYALTY INFORMATION      "));
   10cb4:	00 d0       	rcall	.+0      	; 0x10cb6 <PrintIdle+0x8c8>
   10cb6:	00 d0       	rcall	.+0      	; 0x10cb8 <PrintIdle+0x8ca>
   10cb8:	ed b7       	in	r30, 0x3d	; 61
   10cba:	fe b7       	in	r31, 0x3e	; 62
   10cbc:	12 83       	std	Z+2, r17	; 0x02
   10cbe:	01 83       	std	Z+1, r16	; 0x01
   10cc0:	8e ee       	ldi	r24, 0xEE	; 238
   10cc2:	98 e0       	ldi	r25, 0x08	; 8
   10cc4:	a8 cf       	rjmp	.-176    	; 0x10c16 <PrintIdle+0x828>
		       break; 			            
		  case 22:
		       CarriegeReturn();
   10cc6:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("     Card ID      : %s"),strLoyCardID);
   10cca:	00 d0       	rcall	.+0      	; 0x10ccc <PrintIdle+0x8de>
   10ccc:	00 d0       	rcall	.+0      	; 0x10cce <PrintIdle+0x8e0>
   10cce:	00 d0       	rcall	.+0      	; 0x10cd0 <PrintIdle+0x8e2>
   10cd0:	ed b7       	in	r30, 0x3d	; 61
   10cd2:	fe b7       	in	r31, 0x3e	; 62
   10cd4:	31 96       	adiw	r30, 0x01	; 1
   10cd6:	ad b7       	in	r26, 0x3d	; 61
   10cd8:	be b7       	in	r27, 0x3e	; 62
   10cda:	12 96       	adiw	r26, 0x02	; 2
   10cdc:	1c 93       	st	X, r17
   10cde:	0e 93       	st	-X, r16
   10ce0:	11 97       	sbiw	r26, 0x01	; 1
   10ce2:	87 ed       	ldi	r24, 0xD7	; 215
   10ce4:	98 e0       	ldi	r25, 0x08	; 8
   10ce6:	93 83       	std	Z+3, r25	; 0x03
   10ce8:	82 83       	std	Z+2, r24	; 0x02
   10cea:	8c ec       	ldi	r24, 0xCC	; 204
   10cec:	93 e0       	ldi	r25, 0x03	; 3
   10cee:	22 c1       	rjmp	.+580    	; 0x10f34 <PrintIdle+0xb46>
		       break;
		  case 23:
		       CarriegeReturn();
   10cf0:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
			   //RemSpaceLag(strLoyCardHolder);
		       sprintf_P(strPrint,PSTR("     Card Holder  : %s "),strLoyCardHolder);
   10cf4:	00 d0       	rcall	.+0      	; 0x10cf6 <PrintIdle+0x908>
   10cf6:	00 d0       	rcall	.+0      	; 0x10cf8 <PrintIdle+0x90a>
   10cf8:	00 d0       	rcall	.+0      	; 0x10cfa <PrintIdle+0x90c>
   10cfa:	ed b7       	in	r30, 0x3d	; 61
   10cfc:	fe b7       	in	r31, 0x3e	; 62
   10cfe:	31 96       	adiw	r30, 0x01	; 1
   10d00:	ad b7       	in	r26, 0x3d	; 61
   10d02:	be b7       	in	r27, 0x3e	; 62
   10d04:	12 96       	adiw	r26, 0x02	; 2
   10d06:	1c 93       	st	X, r17
   10d08:	0e 93       	st	-X, r16
   10d0a:	11 97       	sbiw	r26, 0x01	; 1
   10d0c:	8f eb       	ldi	r24, 0xBF	; 191
   10d0e:	98 e0       	ldi	r25, 0x08	; 8
   10d10:	93 83       	std	Z+3, r25	; 0x03
   10d12:	82 83       	std	Z+2, r24	; 0x02
   10d14:	89 ea       	ldi	r24, 0xA9	; 169
   10d16:	93 e0       	ldi	r25, 0x03	; 3
   10d18:	0d c1       	rjmp	.+538    	; 0x10f34 <PrintIdle+0xb46>
		       break;
		  case 24:
		       if ((strlen(strCorporateID)>0)&&(SpaceOnly(strCorporateID)==False)){
   10d1a:	03 e0       	ldi	r16, 0x03	; 3
   10d1c:	1d e0       	ldi	r17, 0x0D	; 13
   10d1e:	80 91 03 0d 	lds	r24, 0x0D03
   10d22:	88 23       	and	r24, r24
   10d24:	09 f4       	brne	.+2      	; 0x10d28 <PrintIdle+0x93a>
   10d26:	93 cf       	rjmp	.-218    	; 0x10c4e <PrintIdle+0x860>
   10d28:	c8 01       	movw	r24, r16
   10d2a:	0e 94 8e 4a 	call	0x951c	; 0x951c <SpaceOnly>
   10d2e:	88 23       	and	r24, r24
   10d30:	09 f0       	breq	.+2      	; 0x10d34 <PrintIdle+0x946>
   10d32:	8d cf       	rjmp	.-230    	; 0x10c4e <PrintIdle+0x860>
		           CarriegeReturn();
   10d34:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
				   //RemSpaceLag(strCorporateID);
		           sprintf_P(strPrint,PSTR("     Corp ID      : %s"),strCorporateID);
   10d38:	00 d0       	rcall	.+0      	; 0x10d3a <PrintIdle+0x94c>
   10d3a:	00 d0       	rcall	.+0      	; 0x10d3c <PrintIdle+0x94e>
   10d3c:	00 d0       	rcall	.+0      	; 0x10d3e <PrintIdle+0x950>
   10d3e:	ed b7       	in	r30, 0x3d	; 61
   10d40:	fe b7       	in	r31, 0x3e	; 62
   10d42:	31 96       	adiw	r30, 0x01	; 1
   10d44:	80 ea       	ldi	r24, 0xA0	; 160
   10d46:	99 e0       	ldi	r25, 0x09	; 9
   10d48:	ad b7       	in	r26, 0x3d	; 61
   10d4a:	be b7       	in	r27, 0x3e	; 62
   10d4c:	12 96       	adiw	r26, 0x02	; 2
   10d4e:	9c 93       	st	X, r25
   10d50:	8e 93       	st	-X, r24
   10d52:	11 97       	sbiw	r26, 0x01	; 1
   10d54:	88 ea       	ldi	r24, 0xA8	; 168
   10d56:	98 e0       	ldi	r25, 0x08	; 8
   10d58:	1f c0       	rjmp	.+62     	; 0x10d98 <PrintIdle+0x9aa>
			   }else ClearMem(strPrint);
		       break;
		  case 25:
		       if ((strlen(strCorporateName)>0)&&(SpaceOnly(strCorporateName)==False)){
   10d5a:	01 eb       	ldi	r16, 0xB1	; 177
   10d5c:	14 e0       	ldi	r17, 0x04	; 4
   10d5e:	80 91 b1 04 	lds	r24, 0x04B1
   10d62:	88 23       	and	r24, r24
   10d64:	09 f4       	brne	.+2      	; 0x10d68 <PrintIdle+0x97a>
   10d66:	73 cf       	rjmp	.-282    	; 0x10c4e <PrintIdle+0x860>
   10d68:	c8 01       	movw	r24, r16
   10d6a:	0e 94 8e 4a 	call	0x951c	; 0x951c <SpaceOnly>
   10d6e:	88 23       	and	r24, r24
   10d70:	09 f0       	breq	.+2      	; 0x10d74 <PrintIdle+0x986>
   10d72:	6d cf       	rjmp	.-294    	; 0x10c4e <PrintIdle+0x860>
		           CarriegeReturn();
   10d74:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
				   //RemSpaceLag(strCorporateName);
		           sprintf_P(strPrint,PSTR("     Corp Name    : %s"),strCorporateName);
   10d78:	00 d0       	rcall	.+0      	; 0x10d7a <PrintIdle+0x98c>
   10d7a:	00 d0       	rcall	.+0      	; 0x10d7c <PrintIdle+0x98e>
   10d7c:	00 d0       	rcall	.+0      	; 0x10d7e <PrintIdle+0x990>
   10d7e:	ed b7       	in	r30, 0x3d	; 61
   10d80:	fe b7       	in	r31, 0x3e	; 62
   10d82:	31 96       	adiw	r30, 0x01	; 1
   10d84:	80 ea       	ldi	r24, 0xA0	; 160
   10d86:	99 e0       	ldi	r25, 0x09	; 9
   10d88:	ad b7       	in	r26, 0x3d	; 61
   10d8a:	be b7       	in	r27, 0x3e	; 62
   10d8c:	12 96       	adiw	r26, 0x02	; 2
   10d8e:	9c 93       	st	X, r25
   10d90:	8e 93       	st	-X, r24
   10d92:	11 97       	sbiw	r26, 0x01	; 1
   10d94:	81 e9       	ldi	r24, 0x91	; 145
   10d96:	98 e0       	ldi	r25, 0x08	; 8
   10d98:	93 83       	std	Z+3, r25	; 0x03
   10d9a:	82 83       	std	Z+2, r24	; 0x02
   10d9c:	15 83       	std	Z+5, r17	; 0x05
   10d9e:	04 83       	std	Z+4, r16	; 0x04
   10da0:	cb c0       	rjmp	.+406    	; 0x10f38 <PrintIdle+0xb4a>
			   }else ClearMem(strPrint);
		       break;
		  case 26:
		       CarriegeReturn();
   10da2:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("     Gain Points  : %s"),strGainPoints);
   10da6:	00 d0       	rcall	.+0      	; 0x10da8 <PrintIdle+0x9ba>
   10da8:	00 d0       	rcall	.+0      	; 0x10daa <PrintIdle+0x9bc>
   10daa:	00 d0       	rcall	.+0      	; 0x10dac <PrintIdle+0x9be>
   10dac:	ed b7       	in	r30, 0x3d	; 61
   10dae:	fe b7       	in	r31, 0x3e	; 62
   10db0:	31 96       	adiw	r30, 0x01	; 1
   10db2:	ad b7       	in	r26, 0x3d	; 61
   10db4:	be b7       	in	r27, 0x3e	; 62
   10db6:	12 96       	adiw	r26, 0x02	; 2
   10db8:	1c 93       	st	X, r17
   10dba:	0e 93       	st	-X, r16
   10dbc:	11 97       	sbiw	r26, 0x01	; 1
   10dbe:	8a e7       	ldi	r24, 0x7A	; 122
   10dc0:	98 e0       	ldi	r25, 0x08	; 8
   10dc2:	93 83       	std	Z+3, r25	; 0x03
   10dc4:	82 83       	std	Z+2, r24	; 0x02
   10dc6:	80 ea       	ldi	r24, 0xA0	; 160
   10dc8:	93 e0       	ldi	r25, 0x03	; 3
   10dca:	b4 c0       	rjmp	.+360    	; 0x10f34 <PrintIdle+0xb46>
		       break;
		  case 27:
		       CarriegeReturn();
   10dcc:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("     Prev Points  : %s"),strPrevPoints);
   10dd0:	00 d0       	rcall	.+0      	; 0x10dd2 <PrintIdle+0x9e4>
   10dd2:	00 d0       	rcall	.+0      	; 0x10dd4 <PrintIdle+0x9e6>
   10dd4:	00 d0       	rcall	.+0      	; 0x10dd6 <PrintIdle+0x9e8>
   10dd6:	ed b7       	in	r30, 0x3d	; 61
   10dd8:	fe b7       	in	r31, 0x3e	; 62
   10dda:	31 96       	adiw	r30, 0x01	; 1
   10ddc:	ad b7       	in	r26, 0x3d	; 61
   10dde:	be b7       	in	r27, 0x3e	; 62
   10de0:	12 96       	adiw	r26, 0x02	; 2
   10de2:	1c 93       	st	X, r17
   10de4:	0e 93       	st	-X, r16
   10de6:	11 97       	sbiw	r26, 0x01	; 1
   10de8:	83 e6       	ldi	r24, 0x63	; 99
   10dea:	98 e0       	ldi	r25, 0x08	; 8
   10dec:	93 83       	std	Z+3, r25	; 0x03
   10dee:	82 83       	std	Z+2, r24	; 0x02
   10df0:	88 ef       	ldi	r24, 0xF8	; 248
   10df2:	99 e0       	ldi	r25, 0x09	; 9
   10df4:	9f c0       	rjmp	.+318    	; 0x10f34 <PrintIdle+0xb46>
		       break;
		  case 28:
		       CarriegeReturn();
   10df6:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("     Curr Points  : %s"),strLoyCurrentPoints);
   10dfa:	00 d0       	rcall	.+0      	; 0x10dfc <PrintIdle+0xa0e>
   10dfc:	00 d0       	rcall	.+0      	; 0x10dfe <PrintIdle+0xa10>
   10dfe:	00 d0       	rcall	.+0      	; 0x10e00 <PrintIdle+0xa12>
   10e00:	ed b7       	in	r30, 0x3d	; 61
   10e02:	fe b7       	in	r31, 0x3e	; 62
   10e04:	31 96       	adiw	r30, 0x01	; 1
   10e06:	ad b7       	in	r26, 0x3d	; 61
   10e08:	be b7       	in	r27, 0x3e	; 62
   10e0a:	12 96       	adiw	r26, 0x02	; 2
   10e0c:	1c 93       	st	X, r17
   10e0e:	0e 93       	st	-X, r16
   10e10:	11 97       	sbiw	r26, 0x01	; 1
   10e12:	8c e4       	ldi	r24, 0x4C	; 76
   10e14:	98 e0       	ldi	r25, 0x08	; 8
   10e16:	93 83       	std	Z+3, r25	; 0x03
   10e18:	82 83       	std	Z+2, r24	; 0x02
   10e1a:	89 e1       	ldi	r24, 0x19	; 25
   10e1c:	99 e0       	ldi	r25, 0x09	; 9
   10e1e:	8a c0       	rjmp	.+276    	; 0x10f34 <PrintIdle+0xb46>
		       break;
		  case 29:
		       CarriegeReturn();
   10e20:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("     Expiry       : %s"),strLoyExpiry);
   10e24:	00 d0       	rcall	.+0      	; 0x10e26 <PrintIdle+0xa38>
   10e26:	00 d0       	rcall	.+0      	; 0x10e28 <PrintIdle+0xa3a>
   10e28:	00 d0       	rcall	.+0      	; 0x10e2a <PrintIdle+0xa3c>
   10e2a:	ed b7       	in	r30, 0x3d	; 61
   10e2c:	fe b7       	in	r31, 0x3e	; 62
   10e2e:	31 96       	adiw	r30, 0x01	; 1
   10e30:	ad b7       	in	r26, 0x3d	; 61
   10e32:	be b7       	in	r27, 0x3e	; 62
   10e34:	12 96       	adiw	r26, 0x02	; 2
   10e36:	1c 93       	st	X, r17
   10e38:	0e 93       	st	-X, r16
   10e3a:	11 97       	sbiw	r26, 0x01	; 1
   10e3c:	85 e3       	ldi	r24, 0x35	; 53
   10e3e:	98 e0       	ldi	r25, 0x08	; 8
   10e40:	93 83       	std	Z+3, r25	; 0x03
   10e42:	82 83       	std	Z+2, r24	; 0x02
   10e44:	8e e7       	ldi	r24, 0x7E	; 126
   10e46:	9d e0       	ldi	r25, 0x0D	; 13
   10e48:	75 c0       	rjmp	.+234    	; 0x10f34 <PrintIdle+0xb46>
		       break;
		  case 30:
		       CarriegeReturn();
   10e4a:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
			   //RemSpaceLag(strLoyRedeemPoints);
		       sprintf_P(strPrint,PSTR("     Total Redeem : %s"),strLoyRedeemPoints);
   10e4e:	00 d0       	rcall	.+0      	; 0x10e50 <PrintIdle+0xa62>
   10e50:	00 d0       	rcall	.+0      	; 0x10e52 <PrintIdle+0xa64>
   10e52:	00 d0       	rcall	.+0      	; 0x10e54 <PrintIdle+0xa66>
   10e54:	ed b7       	in	r30, 0x3d	; 61
   10e56:	fe b7       	in	r31, 0x3e	; 62
   10e58:	31 96       	adiw	r30, 0x01	; 1
   10e5a:	ad b7       	in	r26, 0x3d	; 61
   10e5c:	be b7       	in	r27, 0x3e	; 62
   10e5e:	12 96       	adiw	r26, 0x02	; 2
   10e60:	1c 93       	st	X, r17
   10e62:	0e 93       	st	-X, r16
   10e64:	11 97       	sbiw	r26, 0x01	; 1
   10e66:	8e e1       	ldi	r24, 0x1E	; 30
   10e68:	98 e0       	ldi	r25, 0x08	; 8
   10e6a:	93 83       	std	Z+3, r25	; 0x03
   10e6c:	82 83       	std	Z+2, r24	; 0x02
   10e6e:	8e e7       	ldi	r24, 0x7E	; 126
   10e70:	94 e0       	ldi	r25, 0x04	; 4
   10e72:	60 c0       	rjmp	.+192    	; 0x10f34 <PrintIdle+0xb46>
		       break;
		  case 31:
		       CarriegeReturn();
   10e74:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
			   //RemSpaceLag(strLoyCurrMonConsumeV);
			   //FormatCurrency(strLoyCurrMonConsumeV);
		       sprintf_P(strPrint,PSTR("     Month Cons V : %s L"),strLoyCurrMonConsumeV);
   10e78:	00 d0       	rcall	.+0      	; 0x10e7a <PrintIdle+0xa8c>
   10e7a:	00 d0       	rcall	.+0      	; 0x10e7c <PrintIdle+0xa8e>
   10e7c:	00 d0       	rcall	.+0      	; 0x10e7e <PrintIdle+0xa90>
   10e7e:	ed b7       	in	r30, 0x3d	; 61
   10e80:	fe b7       	in	r31, 0x3e	; 62
   10e82:	31 96       	adiw	r30, 0x01	; 1
   10e84:	ad b7       	in	r26, 0x3d	; 61
   10e86:	be b7       	in	r27, 0x3e	; 62
   10e88:	12 96       	adiw	r26, 0x02	; 2
   10e8a:	1c 93       	st	X, r17
   10e8c:	0e 93       	st	-X, r16
   10e8e:	11 97       	sbiw	r26, 0x01	; 1
   10e90:	85 e0       	ldi	r24, 0x05	; 5
   10e92:	98 e0       	ldi	r25, 0x08	; 8
   10e94:	93 83       	std	Z+3, r25	; 0x03
   10e96:	82 83       	std	Z+2, r24	; 0x02
   10e98:	86 ee       	ldi	r24, 0xE6	; 230
   10e9a:	9c e0       	ldi	r25, 0x0C	; 12
   10e9c:	4b c0       	rjmp	.+150    	; 0x10f34 <PrintIdle+0xb46>
		       break;
		  case 32:
		       CarriegeReturn();
   10e9e:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
			   //RemSpaceLag(strLoyCurrMonConsumeA);
			   //FormatCurrency(strLoyCurrMonConsumeA);
		       sprintf_P(strPrint,PSTR("     Month Cons A : Rp.%s"),strLoyCurrMonConsumeA);
   10ea2:	00 d0       	rcall	.+0      	; 0x10ea4 <PrintIdle+0xab6>
   10ea4:	00 d0       	rcall	.+0      	; 0x10ea6 <PrintIdle+0xab8>
   10ea6:	00 d0       	rcall	.+0      	; 0x10ea8 <PrintIdle+0xaba>
   10ea8:	ed b7       	in	r30, 0x3d	; 61
   10eaa:	fe b7       	in	r31, 0x3e	; 62
   10eac:	31 96       	adiw	r30, 0x01	; 1
   10eae:	ad b7       	in	r26, 0x3d	; 61
   10eb0:	be b7       	in	r27, 0x3e	; 62
   10eb2:	12 96       	adiw	r26, 0x02	; 2
   10eb4:	1c 93       	st	X, r17
   10eb6:	0e 93       	st	-X, r16
   10eb8:	11 97       	sbiw	r26, 0x01	; 1
   10eba:	8b ee       	ldi	r24, 0xEB	; 235
   10ebc:	97 e0       	ldi	r25, 0x07	; 7
   10ebe:	93 83       	std	Z+3, r25	; 0x03
   10ec0:	82 83       	std	Z+2, r24	; 0x02
   10ec2:	83 e6       	ldi	r24, 0x63	; 99
   10ec4:	94 e0       	ldi	r25, 0x04	; 4
   10ec6:	36 c0       	rjmp	.+108    	; 0x10f34 <PrintIdle+0xb46>
		       break;
		  case 33://EndOfLoyalty
		       CarriegeReturn();
   10ec8:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("    ------------------------------"));
   10ecc:	00 d0       	rcall	.+0      	; 0x10ece <PrintIdle+0xae0>
   10ece:	00 d0       	rcall	.+0      	; 0x10ed0 <PrintIdle+0xae2>
   10ed0:	ad b7       	in	r26, 0x3d	; 61
   10ed2:	be b7       	in	r27, 0x3e	; 62
   10ed4:	12 96       	adiw	r26, 0x02	; 2
   10ed6:	1c 93       	st	X, r17
   10ed8:	0e 93       	st	-X, r16
   10eda:	11 97       	sbiw	r26, 0x01	; 1
   10edc:	88 ec       	ldi	r24, 0xC8	; 200
   10ede:	97 e0       	ldi	r25, 0x07	; 7
   10ee0:	42 c0       	rjmp	.+132    	; 0x10f66 <PrintIdle+0xb78>
		       break;
		  case 34:
		       CarriegeReturn();
   10ee2:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("     Surcharge Dsc: %s"),strSurchargeDesc);
   10ee6:	00 d0       	rcall	.+0      	; 0x10ee8 <PrintIdle+0xafa>
   10ee8:	00 d0       	rcall	.+0      	; 0x10eea <PrintIdle+0xafc>
   10eea:	00 d0       	rcall	.+0      	; 0x10eec <PrintIdle+0xafe>
   10eec:	ed b7       	in	r30, 0x3d	; 61
   10eee:	fe b7       	in	r31, 0x3e	; 62
   10ef0:	31 96       	adiw	r30, 0x01	; 1
   10ef2:	ad b7       	in	r26, 0x3d	; 61
   10ef4:	be b7       	in	r27, 0x3e	; 62
   10ef6:	12 96       	adiw	r26, 0x02	; 2
   10ef8:	1c 93       	st	X, r17
   10efa:	0e 93       	st	-X, r16
   10efc:	11 97       	sbiw	r26, 0x01	; 1
   10efe:	81 eb       	ldi	r24, 0xB1	; 177
   10f00:	97 e0       	ldi	r25, 0x07	; 7
   10f02:	93 83       	std	Z+3, r25	; 0x03
   10f04:	82 83       	std	Z+2, r24	; 0x02
   10f06:	8f eb       	ldi	r24, 0xBF	; 191
   10f08:	98 e0       	ldi	r25, 0x08	; 8
   10f0a:	14 c0       	rjmp	.+40     	; 0x10f34 <PrintIdle+0xb46>
		       break;
		  case 35:
		       CarriegeReturn();
   10f0c:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("     Surcharge Amt: %s"),strSurchargeAmount);
   10f10:	00 d0       	rcall	.+0      	; 0x10f12 <PrintIdle+0xb24>
   10f12:	00 d0       	rcall	.+0      	; 0x10f14 <PrintIdle+0xb26>
   10f14:	00 d0       	rcall	.+0      	; 0x10f16 <PrintIdle+0xb28>
   10f16:	ed b7       	in	r30, 0x3d	; 61
   10f18:	fe b7       	in	r31, 0x3e	; 62
   10f1a:	31 96       	adiw	r30, 0x01	; 1
   10f1c:	ad b7       	in	r26, 0x3d	; 61
   10f1e:	be b7       	in	r27, 0x3e	; 62
   10f20:	12 96       	adiw	r26, 0x02	; 2
   10f22:	1c 93       	st	X, r17
   10f24:	0e 93       	st	-X, r16
   10f26:	11 97       	sbiw	r26, 0x01	; 1
   10f28:	8a e9       	ldi	r24, 0x9A	; 154
   10f2a:	97 e0       	ldi	r25, 0x07	; 7
   10f2c:	93 83       	std	Z+3, r25	; 0x03
   10f2e:	82 83       	std	Z+2, r24	; 0x02
   10f30:	86 e3       	ldi	r24, 0x36	; 54
   10f32:	99 e0       	ldi	r25, 0x09	; 9
   10f34:	95 83       	std	Z+5, r25	; 0x05
   10f36:	84 83       	std	Z+4, r24	; 0x04
   10f38:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		       break;
   10f3c:	ed b7       	in	r30, 0x3d	; 61
   10f3e:	fe b7       	in	r31, 0x3e	; 62
   10f40:	36 96       	adiw	r30, 0x06	; 6
   10f42:	0f b6       	in	r0, 0x3f	; 63
   10f44:	f8 94       	cli
   10f46:	fe bf       	out	0x3e, r31	; 62
   10f48:	0f be       	out	0x3f, r0	; 63
   10f4a:	ed bf       	out	0x3d, r30	; 61
   10f4c:	16 c0       	rjmp	.+44     	; 0x10f7a <PrintIdle+0xb8c>
		  case 36:
		       CarriegeReturn();
   10f4e:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("    ------------------------------"));
   10f52:	00 d0       	rcall	.+0      	; 0x10f54 <PrintIdle+0xb66>
   10f54:	00 d0       	rcall	.+0      	; 0x10f56 <PrintIdle+0xb68>
   10f56:	ad b7       	in	r26, 0x3d	; 61
   10f58:	be b7       	in	r27, 0x3e	; 62
   10f5a:	12 96       	adiw	r26, 0x02	; 2
   10f5c:	1c 93       	st	X, r17
   10f5e:	0e 93       	st	-X, r16
   10f60:	11 97       	sbiw	r26, 0x01	; 1
   10f62:	87 e7       	ldi	r24, 0x77	; 119
   10f64:	97 e0       	ldi	r25, 0x07	; 7
   10f66:	14 96       	adiw	r26, 0x04	; 4
   10f68:	9c 93       	st	X, r25
   10f6a:	8e 93       	st	-X, r24
   10f6c:	13 97       	sbiw	r26, 0x03	; 3
   10f6e:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		       break;
   10f72:	0f 90       	pop	r0
   10f74:	0f 90       	pop	r0
   10f76:	0f 90       	pop	r0
   10f78:	0f 90       	pop	r0
		  }
		  iLoop=0;iSend=0;LSend=strlen(strPrint);
   10f7a:	10 92 d9 02 	sts	0x02D9, r1
   10f7e:	10 92 d8 02 	sts	0x02D8, r1
   10f82:	10 92 dd 02 	sts	0x02DD, r1
   10f86:	10 92 dc 02 	sts	0x02DC, r1
   10f8a:	e0 ea       	ldi	r30, 0xA0	; 160
   10f8c:	f9 e0       	ldi	r31, 0x09	; 9
   10f8e:	01 90       	ld	r0, Z+
   10f90:	00 20       	and	r0, r0
   10f92:	e9 f7       	brne	.-6      	; 0x10f8e <PrintIdle+0xba0>
   10f94:	31 97       	sbiw	r30, 0x01	; 1
   10f96:	e0 5a       	subi	r30, 0xA0	; 160
   10f98:	f9 40       	sbci	r31, 0x09	; 9
   10f9a:	f0 93 db 02 	sts	0x02DB, r31
   10f9e:	e0 93 da 02 	sts	0x02DA, r30
          stPrintIdle=piPrintMessage;
   10fa2:	8a e0       	ldi	r24, 0x0A	; 10
   10fa4:	7f c1       	rjmp	.+766    	; 0x112a4 <PrintIdle+0xeb6>
	      break;
     case piPrintMessage:
	      if (iSend<LSend){
   10fa6:	20 91 dc 02 	lds	r18, 0x02DC
   10faa:	30 91 dd 02 	lds	r19, 0x02DD
   10fae:	80 91 da 02 	lds	r24, 0x02DA
   10fb2:	90 91 db 02 	lds	r25, 0x02DB
   10fb6:	28 17       	cp	r18, r24
   10fb8:	39 07       	cpc	r19, r25
   10fba:	68 f4       	brcc	.+26     	; 0x10fd6 <PrintIdle+0xbe8>
		      iLoop++;
   10fbc:	80 91 d8 02 	lds	r24, 0x02D8
   10fc0:	90 91 d9 02 	lds	r25, 0x02D9
   10fc4:	01 96       	adiw	r24, 0x01	; 1
   10fc6:	90 93 d9 02 	sts	0x02D9, r25
   10fca:	80 93 d8 02 	sts	0x02D8, r24
			  if((iLoop%PRINT_DELAY)==0){
				 TimPrintBusy=0;
   10fce:	10 92 95 02 	sts	0x0295, r1
				 stPrintIdle=piCheckPrintStatusMessage;
   10fd2:	8c e0       	ldi	r24, 0x0C	; 12
   10fd4:	67 c1       	rjmp	.+718    	; 0x112a4 <PrintIdle+0xeb6>
				 }
			  }
          else{iMessage++;
   10fd6:	80 91 e0 02 	lds	r24, 0x02E0
   10fda:	8f 5f       	subi	r24, 0xFF	; 255
   10fdc:	80 93 e0 02 	sts	0x02E0, r24
		      if (iMessage>MessageLine){
   10fe0:	90 91 df 02 	lds	r25, 0x02DF
   10fe4:	98 17       	cp	r25, r24
   10fe6:	30 f4       	brcc	.+12     	; 0x10ff4 <PrintIdle+0xc06>
			      iFooter=0;				  
   10fe8:	10 92 e3 02 	sts	0x02E3, r1
				  CarriegeReturn();
   10fec:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
				  stPrintIdle=piLoadOperatorName;//piLoadFooter;
   10ff0:	85 e1       	ldi	r24, 0x15	; 21
   10ff2:	58 c1       	rjmp	.+688    	; 0x112a4 <PrintIdle+0xeb6>
			  }
			  else stPrintIdle=piLoadMessage;
   10ff4:	89 e0       	ldi	r24, 0x09	; 9
   10ff6:	56 c1       	rjmp	.+684    	; 0x112a4 <PrintIdle+0xeb6>
			  }
	      break;
     case piCheckPrintStatusMessage:
	      if (IsBusyPrint==False){
   10ff8:	80 91 92 02 	lds	r24, 0x0292
   10ffc:	88 23       	and	r24, r24
   10ffe:	09 f0       	breq	.+2      	; 0x11002 <PrintIdle+0xc14>
   11000:	49 c1       	rjmp	.+658    	; 0x11294 <PrintIdle+0xea6>
		      uart(_COM_PRINTER,1,strPrint[iSend]);
   11002:	e0 91 dc 02 	lds	r30, 0x02DC
   11006:	f0 91 dd 02 	lds	r31, 0x02DD
   1100a:	e0 56       	subi	r30, 0x60	; 96
   1100c:	f6 4f       	sbci	r31, 0xF6	; 246
   1100e:	61 e0       	ldi	r22, 0x01	; 1
   11010:	40 81       	ld	r20, Z
   11012:	0e 94 e6 a5 	call	0x14bcc	; 0x14bcc <uart>
		      iSend++;
   11016:	80 91 dc 02 	lds	r24, 0x02DC
   1101a:	90 91 dd 02 	lds	r25, 0x02DD
   1101e:	01 96       	adiw	r24, 0x01	; 1
   11020:	90 93 dd 02 	sts	0x02DD, r25
   11024:	80 93 dc 02 	sts	0x02DC, r24
		      stPrintIdle=piPrintMessage;
   11028:	8a e0       	ldi	r24, 0x0A	; 10
   1102a:	32 c1       	rjmp	.+612    	; 0x11290 <PrintIdle+0xea2>


	//Added Operator Name:
	 case piLoadOperatorName:
	      //CheckEmpty
		  eeprom_read_block((void*) &strOperatorName, (const void*) &DefOperatorName,18);
   1102c:	8e 01       	movw	r16, r28
   1102e:	0f 5f       	subi	r16, 0xFF	; 255
   11030:	1f 4f       	sbci	r17, 0xFF	; 255
   11032:	c8 01       	movw	r24, r16
   11034:	65 e1       	ldi	r22, 0x15	; 21
   11036:	70 e0       	ldi	r23, 0x00	; 0
   11038:	42 e1       	ldi	r20, 0x12	; 18
   1103a:	50 e0       	ldi	r21, 0x00	; 0
   1103c:	0e 94 56 aa 	call	0x154ac	; 0x154ac <__eerd_block_m128>
		  StrPosCopy(strOperatorName,strOperatorName,0,15);
   11040:	c8 01       	movw	r24, r16
   11042:	b8 01       	movw	r22, r16
   11044:	40 e0       	ldi	r20, 0x00	; 0
   11046:	50 e0       	ldi	r21, 0x00	; 0
   11048:	2f e0       	ldi	r18, 0x0F	; 15
   1104a:	30 e0       	ldi	r19, 0x00	; 0
   1104c:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
		  if (strlen(strOperatorName)>0){
   11050:	89 81       	ldd	r24, Y+1	; 0x01
   11052:	88 23       	and	r24, r24
   11054:	09 f4       	brne	.+2      	; 0x11058 <PrintIdle+0xc6a>
   11056:	9d c0       	rjmp	.+314    	; 0x11192 <PrintIdle+0xda4>
			  if (SpaceOnly(strOperatorName)!=True){		      				  
   11058:	c8 01       	movw	r24, r16
   1105a:	0e 94 8e 4a 	call	0x951c	; 0x951c <SpaceOnly>
   1105e:	81 30       	cpi	r24, 0x01	; 1
   11060:	09 f4       	brne	.+2      	; 0x11064 <PrintIdle+0xc76>
   11062:	97 c0       	rjmp	.+302    	; 0x11192 <PrintIdle+0xda4>
				  sprintf_P(strPrint,PSTR("     Operator: %s"),strOperatorName);			   
   11064:	00 d0       	rcall	.+0      	; 0x11066 <PrintIdle+0xc78>
   11066:	00 d0       	rcall	.+0      	; 0x11068 <PrintIdle+0xc7a>
   11068:	00 d0       	rcall	.+0      	; 0x1106a <PrintIdle+0xc7c>
   1106a:	ed b7       	in	r30, 0x3d	; 61
   1106c:	fe b7       	in	r31, 0x3e	; 62
   1106e:	31 96       	adiw	r30, 0x01	; 1
   11070:	50 ea       	ldi	r21, 0xA0	; 160
   11072:	e5 2e       	mov	r14, r21
   11074:	59 e0       	ldi	r21, 0x09	; 9
   11076:	f5 2e       	mov	r15, r21
   11078:	ad b7       	in	r26, 0x3d	; 61
   1107a:	be b7       	in	r27, 0x3e	; 62
   1107c:	12 96       	adiw	r26, 0x02	; 2
   1107e:	fc 92       	st	X, r15
   11080:	ee 92       	st	-X, r14
   11082:	11 97       	sbiw	r26, 0x01	; 1
   11084:	85 e6       	ldi	r24, 0x65	; 101
   11086:	97 e0       	ldi	r25, 0x07	; 7
   11088:	93 83       	std	Z+3, r25	; 0x03
   1108a:	82 83       	std	Z+2, r24	; 0x02
   1108c:	15 83       	std	Z+5, r17	; 0x05
   1108e:	04 83       	std	Z+4, r16	; 0x04
   11090:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
			      iSend=0;iLoop=0;
   11094:	10 92 dd 02 	sts	0x02DD, r1
   11098:	10 92 dc 02 	sts	0x02DC, r1
   1109c:	10 92 d9 02 	sts	0x02D9, r1
   110a0:	10 92 d8 02 	sts	0x02D8, r1
				  LSend=strlen(strPrint);
   110a4:	f7 01       	movw	r30, r14
   110a6:	01 90       	ld	r0, Z+
   110a8:	00 20       	and	r0, r0
   110aa:	e9 f7       	brne	.-6      	; 0x110a6 <PrintIdle+0xcb8>
   110ac:	31 97       	sbiw	r30, 0x01	; 1
   110ae:	ee 19       	sub	r30, r14
   110b0:	ff 09       	sbc	r31, r15
   110b2:	f0 93 db 02 	sts	0x02DB, r31
   110b6:	e0 93 da 02 	sts	0x02DA, r30
				  stPrintIdle=piPrintOperatorName;
   110ba:	86 e1       	ldi	r24, 0x16	; 22
   110bc:	80 93 e5 02 	sts	0x02E5, r24
   110c0:	ed b7       	in	r30, 0x3d	; 61
   110c2:	fe b7       	in	r31, 0x3e	; 62
   110c4:	36 96       	adiw	r30, 0x06	; 6
   110c6:	0f b6       	in	r0, 0x3f	; 63
   110c8:	f8 94       	cli
   110ca:	fe bf       	out	0x3e, r31	; 62
   110cc:	0f be       	out	0x3f, r0	; 63
   110ce:	ed bf       	out	0x3d, r30	; 61
   110d0:	14 c1       	rjmp	.+552    	; 0x112fa <PrintIdle+0xf0c>
			  }else stPrintIdle=piLoadFooter;
          }  
          else stPrintIdle=piLoadFooter;
	      break;
	 case piPrintOperatorName:
		  if (iSend<LSend){
   110d2:	20 91 dc 02 	lds	r18, 0x02DC
   110d6:	30 91 dd 02 	lds	r19, 0x02DD
   110da:	80 91 da 02 	lds	r24, 0x02DA
   110de:	90 91 db 02 	lds	r25, 0x02DB
   110e2:	28 17       	cp	r18, r24
   110e4:	39 07       	cpc	r19, r25
   110e6:	68 f4       	brcc	.+26     	; 0x11102 <PrintIdle+0xd14>
		      iLoop++;
   110e8:	80 91 d8 02 	lds	r24, 0x02D8
   110ec:	90 91 d9 02 	lds	r25, 0x02D9
   110f0:	01 96       	adiw	r24, 0x01	; 1
   110f2:	90 93 d9 02 	sts	0x02D9, r25
   110f6:	80 93 d8 02 	sts	0x02D8, r24
			  if((iLoop%PRINT_DELAY)==0){
				  TimPrintBusy=0;
   110fa:	10 92 95 02 	sts	0x0295, r1
				  stPrintIdle=piCheckPrintOperatorName;
   110fe:	87 e1       	ldi	r24, 0x17	; 23
   11100:	d1 c0       	rjmp	.+418    	; 0x112a4 <PrintIdle+0xeb6>
				}
			  }
          else {
			  CarriegeReturn();
   11102:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
			  CarriegeReturn();
   11106:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
   1110a:	43 c0       	rjmp	.+134    	; 0x11192 <PrintIdle+0xda4>
			  stPrintIdle=piLoadFooter;
			  }
	      break;
	 case piCheckPrintOperatorName:
	      if (IsBusyPrint==False){
   1110c:	80 91 92 02 	lds	r24, 0x0292
   11110:	88 23       	and	r24, r24
   11112:	09 f0       	breq	.+2      	; 0x11116 <PrintIdle+0xd28>
   11114:	bf c0       	rjmp	.+382    	; 0x11294 <PrintIdle+0xea6>
		      uart(_COM_PRINTER,1,strPrint[iSend]);
   11116:	e0 91 dc 02 	lds	r30, 0x02DC
   1111a:	f0 91 dd 02 	lds	r31, 0x02DD
   1111e:	e0 56       	subi	r30, 0x60	; 96
   11120:	f6 4f       	sbci	r31, 0xF6	; 246
   11122:	61 e0       	ldi	r22, 0x01	; 1
   11124:	40 81       	ld	r20, Z
   11126:	0e 94 e6 a5 	call	0x14bcc	; 0x14bcc <uart>
		      iSend++;
   1112a:	80 91 dc 02 	lds	r24, 0x02DC
   1112e:	90 91 dd 02 	lds	r25, 0x02DD
   11132:	01 96       	adiw	r24, 0x01	; 1
   11134:	90 93 dd 02 	sts	0x02DD, r25
   11138:	80 93 dc 02 	sts	0x02DC, r24
		      stPrintIdle=piPrintOperatorName;
   1113c:	86 e1       	ldi	r24, 0x16	; 22
   1113e:	a8 c0       	rjmp	.+336    	; 0x11290 <PrintIdle+0xea2>
			  }
	      break;

	 	       
     case piLoadFooter:
	      FillChar(strPrint,0,sizeof(strPrint));
   11140:	80 ea       	ldi	r24, 0xA0	; 160
   11142:	99 e0       	ldi	r25, 0x09	; 9
   11144:	60 e0       	ldi	r22, 0x00	; 0
   11146:	70 e0       	ldi	r23, 0x00	; 0
   11148:	4d e2       	ldi	r20, 0x2D	; 45
   1114a:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>
	      eeprom_read_block((void*) &strPrint, (const void*) &DefHeaderFooter[6+iFooter], 40);
   1114e:	80 91 e3 02 	lds	r24, 0x02E3
   11152:	90 e0       	ldi	r25, 0x00	; 0
   11154:	06 96       	adiw	r24, 0x06	; 6
   11156:	29 e2       	ldi	r18, 0x29	; 41
   11158:	30 e0       	ldi	r19, 0x00	; 0
   1115a:	82 9f       	mul	r24, r18
   1115c:	b0 01       	movw	r22, r0
   1115e:	83 9f       	mul	r24, r19
   11160:	70 0d       	add	r23, r0
   11162:	92 9f       	mul	r25, r18
   11164:	70 0d       	add	r23, r0
   11166:	11 24       	eor	r1, r1
   11168:	68 5d       	subi	r22, 0xD8	; 216
   1116a:	7d 4f       	sbci	r23, 0xFD	; 253
   1116c:	80 ea       	ldi	r24, 0xA0	; 160
   1116e:	99 e0       	ldi	r25, 0x09	; 9
   11170:	48 e2       	ldi	r20, 0x28	; 40
   11172:	50 e0       	ldi	r21, 0x00	; 0
   11174:	0e 94 56 aa 	call	0x154ac	; 0x154ac <__eerd_block_m128>
		  iFooter++;
   11178:	80 91 e3 02 	lds	r24, 0x02E3
   1117c:	8f 5f       	subi	r24, 0xFF	; 255
   1117e:	80 93 e3 02 	sts	0x02E3, r24
		  if (iFooter<=4){
   11182:	85 30       	cpi	r24, 0x05	; 5
   11184:	90 f4       	brcc	.+36     	; 0x111aa <PrintIdle+0xdbc>
		      if (SpaceOnly(strPrint)==True){
   11186:	80 ea       	ldi	r24, 0xA0	; 160
   11188:	99 e0       	ldi	r25, 0x09	; 9
   1118a:	0e 94 8e 4a 	call	0x951c	; 0x951c <SpaceOnly>
   1118e:	81 30       	cpi	r24, 0x01	; 1
   11190:	11 f4       	brne	.+4      	; 0x11196 <PrintIdle+0xda8>
			      stPrintIdle=piLoadFooter;
   11192:	8e e0       	ldi	r24, 0x0E	; 14
   11194:	87 c0       	rjmp	.+270    	; 0x112a4 <PrintIdle+0xeb6>
				  }
			  else{
			      iSend=0;
   11196:	10 92 dd 02 	sts	0x02DD, r1
   1119a:	10 92 dc 02 	sts	0x02DC, r1
				  iLoop=0;
   1119e:	10 92 d9 02 	sts	0x02D9, r1
   111a2:	10 92 d8 02 	sts	0x02D8, r1
				  stPrintIdle=piPrintFooter;
   111a6:	8f e0       	ldi	r24, 0x0F	; 15
   111a8:	7d c0       	rjmp	.+250    	; 0x112a4 <PrintIdle+0xeb6>
				  //RemSpaceLag(strPrint);
				  //CarriegeReturn();
			      }
		  }else{stPrintIdle=piInitScroll;
   111aa:	81 e1       	ldi	r24, 0x11	; 17
   111ac:	7b c0       	rjmp	.+246    	; 0x112a4 <PrintIdle+0xeb6>
		        //iPrinted++;
			}
	      break;
     case piPrintFooter:
		  if (iSend<40){
   111ae:	80 91 dc 02 	lds	r24, 0x02DC
   111b2:	90 91 dd 02 	lds	r25, 0x02DD
   111b6:	88 32       	cpi	r24, 0x28	; 40
   111b8:	91 05       	cpc	r25, r1
   111ba:	68 f4       	brcc	.+26     	; 0x111d6 <PrintIdle+0xde8>
		      iLoop++;
   111bc:	80 91 d8 02 	lds	r24, 0x02D8
   111c0:	90 91 d9 02 	lds	r25, 0x02D9
   111c4:	01 96       	adiw	r24, 0x01	; 1
   111c6:	90 93 d9 02 	sts	0x02D9, r25
   111ca:	80 93 d8 02 	sts	0x02D8, r24
			  if((iLoop%PRINT_DELAY)==0){
				TimPrintBusy=0;
   111ce:	10 92 95 02 	sts	0x0295, r1
				stPrintIdle=piCheckPrintStatusFooter;
   111d2:	8d e0       	ldi	r24, 0x0D	; 13
   111d4:	67 c0       	rjmp	.+206    	; 0x112a4 <PrintIdle+0xeb6>
				}
			  }
          else {
		      stPrintIdle=piLoadFooter;
   111d6:	8e e0       	ldi	r24, 0x0E	; 14
   111d8:	80 93 e5 02 	sts	0x02E5, r24
			  CarriegeReturn();
   111dc:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
   111e0:	8c c0       	rjmp	.+280    	; 0x112fa <PrintIdle+0xf0c>
			  }
	      break;
     case piCheckPrintStatusFooter:
	      if (IsBusyPrint==False){
   111e2:	80 91 92 02 	lds	r24, 0x0292
   111e6:	88 23       	and	r24, r24
   111e8:	09 f0       	breq	.+2      	; 0x111ec <PrintIdle+0xdfe>
   111ea:	54 c0       	rjmp	.+168    	; 0x11294 <PrintIdle+0xea6>
		      uart(_COM_PRINTER,1,strPrint[iSend]);
   111ec:	e0 91 dc 02 	lds	r30, 0x02DC
   111f0:	f0 91 dd 02 	lds	r31, 0x02DD
   111f4:	e0 56       	subi	r30, 0x60	; 96
   111f6:	f6 4f       	sbci	r31, 0xF6	; 246
   111f8:	61 e0       	ldi	r22, 0x01	; 1
   111fa:	40 81       	ld	r20, Z
   111fc:	0e 94 e6 a5 	call	0x14bcc	; 0x14bcc <uart>
		      iSend++;
   11200:	80 91 dc 02 	lds	r24, 0x02DC
   11204:	90 91 dd 02 	lds	r25, 0x02DD
   11208:	01 96       	adiw	r24, 0x01	; 1
   1120a:	90 93 dd 02 	sts	0x02DD, r25
   1120e:	80 93 dc 02 	sts	0x02DC, r24
		      stPrintIdle=piPrintFooter;
   11212:	8f e0       	ldi	r24, 0x0F	; 15
   11214:	3d c0       	rjmp	.+122    	; 0x11290 <PrintIdle+0xea2>
		      stPrintIdle=piFinishPrintIdle;
			  }
	      break;

     case piInitScroll:
	      iPrinted++;
   11216:	80 91 d7 02 	lds	r24, 0x02D7
   1121a:	8f 5f       	subi	r24, 0xFF	; 255
   1121c:	80 93 d7 02 	sts	0x02D7, r24
		  iScroll=0;
   11220:	10 92 e2 02 	sts	0x02E2, r1
		  iLoop=0;
   11224:	10 92 d9 02 	sts	0x02D9, r1
   11228:	10 92 d8 02 	sts	0x02D8, r1
		  if (iPrinted<PrintCopy){
   1122c:	90 91 d6 02 	lds	r25, 0x02D6
   11230:	89 17       	cp	r24, r25
   11232:	18 f4       	brcc	.+6      	; 0x1123a <PrintIdle+0xe4c>
		      nScroll=eeprom_read_byte(&DefPrintScrollSpace);
   11234:	82 e3       	ldi	r24, 0x32	; 50
   11236:	90 e0       	ldi	r25, 0x00	; 0
   11238:	02 c0       	rjmp	.+4      	; 0x1123e <PrintIdle+0xe50>
		  }else if (iPrinted>=PrintCopy){		  	  
		      nScroll=eeprom_read_byte(&DefPrintScrollEnd);
   1123a:	81 e3       	ldi	r24, 0x31	; 49
   1123c:	90 e0       	ldi	r25, 0x00	; 0
   1123e:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
   11242:	80 93 e1 02 	sts	0x02E1, r24
		  if (eeprom_read_byte(&DefPrinterType)==PT_CUSTOM_TG02){
		      uart_printf(0,1,PSTR("----Scrolled2-----"));

		      stPrintIdle=piPaperCut;
		  }*/
          stPrintIdle=piScrollPaper;              
   11246:	80 e1       	ldi	r24, 0x10	; 16
   11248:	2d c0       	rjmp	.+90     	; 0x112a4 <PrintIdle+0xeb6>
	      break;
     case piScrollPaper:
	      iLoop++;
   1124a:	80 91 d8 02 	lds	r24, 0x02D8
   1124e:	90 91 d9 02 	lds	r25, 0x02D9
   11252:	01 96       	adiw	r24, 0x01	; 1
   11254:	90 93 d9 02 	sts	0x02D9, r25
   11258:	80 93 d8 02 	sts	0x02D8, r24
		  if (iLoop%PRINT_DELAY==0){
			  TimPrintBusy=0;
   1125c:	10 92 95 02 	sts	0x0295, r1
			  stPrintIdle=piCheckPrintStatusScroll;
   11260:	82 e1       	ldi	r24, 0x12	; 18
   11262:	80 93 e5 02 	sts	0x02E5, r24
			  }
	      if (iScroll>nScroll)stPrintIdle=piPaperCut;
   11266:	90 91 e2 02 	lds	r25, 0x02E2
   1126a:	80 91 e1 02 	lds	r24, 0x02E1
   1126e:	89 17       	cp	r24, r25
   11270:	08 f0       	brcs	.+2      	; 0x11274 <PrintIdle+0xe86>
   11272:	43 c0       	rjmp	.+134    	; 0x112fa <PrintIdle+0xf0c>
   11274:	83 e1       	ldi	r24, 0x13	; 19
   11276:	16 c0       	rjmp	.+44     	; 0x112a4 <PrintIdle+0xeb6>
	      break;
     case piCheckPrintStatusScroll:
	      if (IsBusyPrint==False){
   11278:	80 91 92 02 	lds	r24, 0x0292
   1127c:	88 23       	and	r24, r24
   1127e:	51 f4       	brne	.+20     	; 0x11294 <PrintIdle+0xea6>
		      iScroll++;
   11280:	80 91 e2 02 	lds	r24, 0x02E2
   11284:	8f 5f       	subi	r24, 0xFF	; 255
   11286:	80 93 e2 02 	sts	0x02E2, r24
		      CarriegeReturn();
   1128a:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
		      stPrintIdle=piScrollPaper;
   1128e:	80 e1       	ldi	r24, 0x10	; 16
   11290:	80 93 e5 02 	sts	0x02E5, r24
		  }
		  if (TimPrintBusy>TIM_BUSY_PRINT){
   11294:	80 91 95 02 	lds	r24, 0x0295
   11298:	8b 30       	cpi	r24, 0x0B	; 11
   1129a:	78 f1       	brcs	.+94     	; 0x112fa <PrintIdle+0xf0c>
		      IsPrintERROR=True;
   1129c:	81 e0       	ldi	r24, 0x01	; 1
   1129e:	80 93 90 02 	sts	0x0290, r24
		      stPrintIdle=piFinishPrintIdle;
   112a2:	84 e1       	ldi	r24, 0x14	; 20
   112a4:	80 93 e5 02 	sts	0x02E5, r24
   112a8:	28 c0       	rjmp	.+80     	; 0x112fa <PrintIdle+0xf0c>
	      break;
     case piPaperCut:
	      //sprintf_P(strSend,PSTR("i:%d Copy:%d"),iPrinted,PrintCopy);
		  //uart_print(0,1,strSend);

          if (iPrinted>=PrintCopy){
   112aa:	90 91 d7 02 	lds	r25, 0x02D7
   112ae:	80 91 d6 02 	lds	r24, 0x02D6
   112b2:	98 17       	cp	r25, r24
   112b4:	10 f0       	brcs	.+4      	; 0x112ba <PrintIdle+0xecc>
		      stPrintIdle=piFinishPrintIdle;
   112b6:	84 e1       	ldi	r24, 0x14	; 20
   112b8:	05 c0       	rjmp	.+10     	; 0x112c4 <PrintIdle+0xed6>
			  }
		  else {CarriegeReturn();
   112ba:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
		        CarriegeReturn();
   112be:	0e 94 9c 5c 	call	0xb938	; 0xb938 <CarriegeReturn>
		        stPrintIdle=piInit;
   112c2:	81 e0       	ldi	r24, 0x01	; 1
   112c4:	80 93 e5 02 	sts	0x02E5, r24
		       }
		  PaperCut();
   112c8:	0e 94 a6 4a 	call	0x954c	; 0x954c <PaperCut>
	      break;
   112cc:	16 c0       	rjmp	.+44     	; 0x112fa <PrintIdle+0xf0c>
     case piFinishPrintIdle:	      
	      switch(IFType){
   112ce:	80 91 00 01 	lds	r24, 0x0100
   112d2:	81 30       	cpi	r24, 0x01	; 1
   112d4:	19 f0       	breq	.+6      	; 0x112dc <PrintIdle+0xeee>
   112d6:	82 30       	cpi	r24, 0x02	; 2
   112d8:	61 f4       	brne	.+24     	; 0x112f2 <PrintIdle+0xf04>
   112da:	03 c0       	rjmp	.+6      	; 0x112e2 <PrintIdle+0xef4>
		  case IT_SLAVE:
		       sendMessage04();
   112dc:	0e 94 a6 2b 	call	0x574c	; 0x574c <sendMessage04>
		       break;
   112e0:	08 c0       	rjmp	.+16     	; 0x112f2 <PrintIdle+0xf04>
		  case IT_STANDALONE:		  
		       UpdateStandaloneStatus((atoi(strFIP_ID)&0x0F),PS_PRINTED);
   112e2:	8d e9       	ldi	r24, 0x9D	; 157
   112e4:	98 e0       	ldi	r25, 0x08	; 8
   112e6:	0e 94 e0 a7 	call	0x14fc0	; 0x14fc0 <atoi>
   112ea:	8f 70       	andi	r24, 0x0F	; 15
   112ec:	61 e1       	ldi	r22, 0x11	; 17
   112ee:	0e 94 8f 81 	call	0x1031e	; 0x1031e <UpdateStandaloneStatus>
			   //CurrentPumpStatus[FIPAddr]=PUMP_OFF;
			   //strPumpStatus[FIPAddr]=GetPumpStatusLabel(PUMP_OFF);			   
			   //IsNewPumpStatus=True;//UpdateDisplay
		       break;
		  }
		  IsBusyIdlePrinting=False;
   112f2:	10 92 91 02 	sts	0x0291, r1
          stPrintIdle=piIdle;
   112f6:	10 92 e5 02 	sts	0x02E5, r1
	      break;	 
	 }
}
   112fa:	64 96       	adiw	r28, 0x14	; 20
   112fc:	0f b6       	in	r0, 0x3f	; 63
   112fe:	f8 94       	cli
   11300:	de bf       	out	0x3e, r29	; 62
   11302:	0f be       	out	0x3f, r0	; 63
   11304:	cd bf       	out	0x3d, r28	; 61
   11306:	cf 91       	pop	r28
   11308:	df 91       	pop	r29
   1130a:	1f 91       	pop	r17
   1130c:	0f 91       	pop	r16
   1130e:	ff 90       	pop	r15
   11310:	ef 90       	pop	r14
   11312:	08 95       	ret

00011314 <systemPrinting>:
     

}

void systemPrinting(){
	 FreePrinting();
   11314:	0e 94 d7 5c 	call	0xb9ae	; 0xb9ae <FreePrinting>
	 PrintIdle();
   11318:	0e 94 f7 81 	call	0x103ee	; 0x103ee <PrintIdle>
}
   1131c:	08 95       	ret

0001131e <FCloseShift>:
	 }
  return Result;
}


char FCloseShift(char ShiftType){//SHIFT_NONE,NEW_SHIFT,CONTINUE_SHIFT
   1131e:	ef 92       	push	r14
   11320:	ff 92       	push	r15
   11322:	0f 93       	push	r16
   11324:	1f 93       	push	r17
   11326:	df 93       	push	r29
   11328:	cf 93       	push	r28
   1132a:	cd b7       	in	r28, 0x3d	; 61
   1132c:	de b7       	in	r29, 0x3e	; 62
   1132e:	64 97       	sbiw	r28, 0x14	; 20
   11330:	0f b6       	in	r0, 0x3f	; 63
   11332:	f8 94       	cli
   11334:	de bf       	out	0x3e, r29	; 62
   11336:	0f be       	out	0x3f, r0	; 63
   11338:	cd bf       	out	0x3d, r28	; 61
   1133a:	08 2f       	mov	r16, r24
	 char KeyPressed;
	 char FIPAddr;


	 Result=MENU_NONE;
	 switch(stCloseShift){
   1133c:	80 91 28 03 	lds	r24, 0x0328
   11340:	87 30       	cpi	r24, 0x07	; 7
   11342:	09 f4       	brne	.+2      	; 0x11346 <FCloseShift+0x28>
   11344:	7b c1       	rjmp	.+758    	; 0x1163c <FCloseShift+0x31e>
   11346:	88 30       	cpi	r24, 0x08	; 8
   11348:	78 f4       	brcc	.+30     	; 0x11368 <FCloseShift+0x4a>
   1134a:	84 30       	cpi	r24, 0x04	; 4
   1134c:	09 f4       	brne	.+2      	; 0x11350 <FCloseShift+0x32>
   1134e:	55 c0       	rjmp	.+170    	; 0x113fa <FCloseShift+0xdc>
   11350:	85 30       	cpi	r24, 0x05	; 5
   11352:	18 f4       	brcc	.+6      	; 0x1135a <FCloseShift+0x3c>
   11354:	88 23       	and	r24, r24
   11356:	c1 f0       	breq	.+48     	; 0x11388 <FCloseShift+0x6a>
   11358:	e6 c1       	rjmp	.+972    	; 0x11726 <FCloseShift+0x408>
   1135a:	85 30       	cpi	r24, 0x05	; 5
   1135c:	09 f4       	brne	.+2      	; 0x11360 <FCloseShift+0x42>
   1135e:	90 c0       	rjmp	.+288    	; 0x11480 <FCloseShift+0x162>
   11360:	86 30       	cpi	r24, 0x06	; 6
   11362:	09 f0       	breq	.+2      	; 0x11366 <FCloseShift+0x48>
   11364:	e0 c1       	rjmp	.+960    	; 0x11726 <FCloseShift+0x408>
   11366:	92 c0       	rjmp	.+292    	; 0x1148c <FCloseShift+0x16e>
   11368:	8a 30       	cpi	r24, 0x0A	; 10
   1136a:	09 f4       	brne	.+2      	; 0x1136e <FCloseShift+0x50>
   1136c:	aa c1       	rjmp	.+852    	; 0x116c2 <FCloseShift+0x3a4>
   1136e:	8b 30       	cpi	r24, 0x0B	; 11
   11370:	20 f4       	brcc	.+8      	; 0x1137a <FCloseShift+0x5c>
   11372:	88 30       	cpi	r24, 0x08	; 8
   11374:	09 f0       	breq	.+2      	; 0x11378 <FCloseShift+0x5a>
   11376:	d7 c1       	rjmp	.+942    	; 0x11726 <FCloseShift+0x408>
   11378:	67 c1       	rjmp	.+718    	; 0x11648 <FCloseShift+0x32a>
   1137a:	8b 30       	cpi	r24, 0x0B	; 11
   1137c:	09 f4       	brne	.+2      	; 0x11380 <FCloseShift+0x62>
   1137e:	cf c1       	rjmp	.+926    	; 0x1171e <FCloseShift+0x400>
   11380:	8c 30       	cpi	r24, 0x0C	; 12
   11382:	09 f0       	breq	.+2      	; 0x11386 <FCloseShift+0x68>
   11384:	d0 c1       	rjmp	.+928    	; 0x11726 <FCloseShift+0x408>
   11386:	a5 c1       	rjmp	.+842    	; 0x116d2 <FCloseShift+0x3b4>
	 case csInitCloseShift:
	      ActivePump=eeprom_read_byte(&DefActivePump);
   11388:	8a e4       	ldi	r24, 0x4A	; 74
   1138a:	91 e0       	ldi	r25, 0x01	; 1
   1138c:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
   11390:	80 93 3b 02 	sts	0x023B, r24
		  IsPumpBusy=False;
   11394:	10 92 27 03 	sts	0x0327, r1
		  //FindBusy Pump
		  for (FIPAddr=0;FIPAddr<ActivePump;FIPAddr++){		       
   11398:	ee 24       	eor	r14, r14
					
		       if (strPumpStatus[FIPAddr]==GetPumpStatusLabel(PS_TOTALIZER))
			        UpdateStandaloneStatus(GetPumpID(FIPAddr),PUMP_OFF);
					
               if (strPumpStatus[FIPAddr]==GetPumpStatusLabel(PUMP_BUSY))
			       IsPumpBusy=True;
   1139a:	ff 24       	eor	r15, r15
   1139c:	f3 94       	inc	r15
	 switch(stCloseShift){
	 case csInitCloseShift:
	      ActivePump=eeprom_read_byte(&DefActivePump);
		  IsPumpBusy=False;
		  //FindBusy Pump
		  for (FIPAddr=0;FIPAddr<ActivePump;FIPAddr++){		       
   1139e:	27 c0       	rjmp	.+78     	; 0x113ee <FCloseShift+0xd0>
		       if ((strPumpStatus[FIPAddr]!=GetPumpStatusLabel(PUMP_NONE))&&(strPumpStatus[FIPAddr]!=GetPumpStatusLabel(PUMP_OFF))&&(strPumpStatus[FIPAddr]!=GetPumpStatusLabel(PUMP_BUSY)))
   113a0:	0e 2d       	mov	r16, r14
   113a2:	10 e0       	ldi	r17, 0x00	; 0
   113a4:	f8 01       	movw	r30, r16
   113a6:	ee 5f       	subi	r30, 0xFE	; 254
   113a8:	fe 4f       	sbci	r31, 0xFE	; 254
   113aa:	80 81       	ld	r24, Z
   113ac:	8d 32       	cpi	r24, 0x2D	; 45
   113ae:	51 f0       	breq	.+20     	; 0x113c4 <FCloseShift+0xa6>
   113b0:	89 36       	cpi	r24, 0x69	; 105
   113b2:	41 f0       	breq	.+16     	; 0x113c4 <FCloseShift+0xa6>
   113b4:	84 36       	cpi	r24, 0x64	; 100
   113b6:	31 f0       	breq	.+12     	; 0x113c4 <FCloseShift+0xa6>
				    UpdateStandaloneStatus(GetPumpID(FIPAddr),PUMP_OFF);
   113b8:	8e 2d       	mov	r24, r14
   113ba:	0e 94 01 6e 	call	0xdc02	; 0xdc02 <GetPumpID>
   113be:	66 e0       	ldi	r22, 0x06	; 6
   113c0:	0e 94 8f 81 	call	0x1031e	; 0x1031e <UpdateStandaloneStatus>
					
		       if (strPumpStatus[FIPAddr]==GetPumpStatusLabel(PS_TOTALIZER))
   113c4:	f8 01       	movw	r30, r16
   113c6:	ee 5f       	subi	r30, 0xFE	; 254
   113c8:	fe 4f       	sbci	r31, 0xFE	; 254
   113ca:	80 81       	ld	r24, Z
   113cc:	84 35       	cpi	r24, 0x54	; 84
   113ce:	31 f4       	brne	.+12     	; 0x113dc <FCloseShift+0xbe>
			        UpdateStandaloneStatus(GetPumpID(FIPAddr),PUMP_OFF);
   113d0:	8e 2d       	mov	r24, r14
   113d2:	0e 94 01 6e 	call	0xdc02	; 0xdc02 <GetPumpID>
   113d6:	66 e0       	ldi	r22, 0x06	; 6
   113d8:	0e 94 8f 81 	call	0x1031e	; 0x1031e <UpdateStandaloneStatus>
					
               if (strPumpStatus[FIPAddr]==GetPumpStatusLabel(PUMP_BUSY))
   113dc:	f8 01       	movw	r30, r16
   113de:	ee 5f       	subi	r30, 0xFE	; 254
   113e0:	fe 4f       	sbci	r31, 0xFE	; 254
   113e2:	80 81       	ld	r24, Z
   113e4:	84 36       	cpi	r24, 0x64	; 100
   113e6:	11 f4       	brne	.+4      	; 0x113ec <FCloseShift+0xce>
			       IsPumpBusy=True;
   113e8:	f0 92 27 03 	sts	0x0327, r15
	 switch(stCloseShift){
	 case csInitCloseShift:
	      ActivePump=eeprom_read_byte(&DefActivePump);
		  IsPumpBusy=False;
		  //FindBusy Pump
		  for (FIPAddr=0;FIPAddr<ActivePump;FIPAddr++){		       
   113ec:	e3 94       	inc	r14
   113ee:	80 91 3b 02 	lds	r24, 0x023B
   113f2:	e8 16       	cp	r14, r24
   113f4:	a8 f2       	brcs	.-86     	; 0x113a0 <FCloseShift+0x82>
					
               if (strPumpStatus[FIPAddr]==GetPumpStatusLabel(PUMP_BUSY))
			       IsPumpBusy=True;
			   }

          stCloseShift=csSendTotalizerALL;
   113f6:	84 e0       	ldi	r24, 0x04	; 4
   113f8:	8f c1       	rjmp	.+798    	; 0x11718 <FCloseShift+0x3fa>
			  */
	      break;
     case csWaitPumpLocked:	     
	      break;
     case csSendTotalizerALL:
	      lcd_clear();
   113fa:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
		  lcd_printf(1,1,PSTR("Totalizer.."));
   113fe:	81 e0       	ldi	r24, 0x01	; 1
   11400:	61 e0       	ldi	r22, 0x01	; 1
   11402:	4a ef       	ldi	r20, 0xFA	; 250
   11404:	56 e1       	ldi	r21, 0x16	; 22
   11406:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  
		  sprintf_P(lcdteks,PSTR("Wait Pump:%d "),(ActivePump-CountTotalizerSatus(strPumpStatus)));
   1140a:	82 e0       	ldi	r24, 0x02	; 2
   1140c:	91 e0       	ldi	r25, 0x01	; 1
   1140e:	0e 94 8a 1c 	call	0x3914	; 0x3914 <CountTotalizerSatus>
   11412:	00 d0       	rcall	.+0      	; 0x11414 <FCloseShift+0xf6>
   11414:	00 d0       	rcall	.+0      	; 0x11416 <FCloseShift+0xf8>
   11416:	00 d0       	rcall	.+0      	; 0x11418 <FCloseShift+0xfa>
   11418:	ed b7       	in	r30, 0x3d	; 61
   1141a:	fe b7       	in	r31, 0x3e	; 62
   1141c:	31 96       	adiw	r30, 0x01	; 1
   1141e:	8e 01       	movw	r16, r28
   11420:	0f 5f       	subi	r16, 0xFF	; 255
   11422:	1f 4f       	sbci	r17, 0xFF	; 255
   11424:	ad b7       	in	r26, 0x3d	; 61
   11426:	be b7       	in	r27, 0x3e	; 62
   11428:	12 96       	adiw	r26, 0x02	; 2
   1142a:	1c 93       	st	X, r17
   1142c:	0e 93       	st	-X, r16
   1142e:	11 97       	sbiw	r26, 0x01	; 1
   11430:	2c ee       	ldi	r18, 0xEC	; 236
   11432:	36 e1       	ldi	r19, 0x16	; 22
   11434:	33 83       	std	Z+3, r19	; 0x03
   11436:	22 83       	std	Z+2, r18	; 0x02
   11438:	20 91 3b 02 	lds	r18, 0x023B
   1143c:	30 e0       	ldi	r19, 0x00	; 0
   1143e:	28 1b       	sub	r18, r24
   11440:	31 09       	sbc	r19, r1
   11442:	35 83       	std	Z+5, r19	; 0x05
   11444:	24 83       	std	Z+4, r18	; 0x04
   11446:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		  lcd_print(2,1,lcdteks);
   1144a:	ed b7       	in	r30, 0x3d	; 61
   1144c:	fe b7       	in	r31, 0x3e	; 62
   1144e:	36 96       	adiw	r30, 0x06	; 6
   11450:	0f b6       	in	r0, 0x3f	; 63
   11452:	f8 94       	cli
   11454:	fe bf       	out	0x3e, r31	; 62
   11456:	0f be       	out	0x3f, r0	; 63
   11458:	ed bf       	out	0x3d, r30	; 61
   1145a:	82 e0       	ldi	r24, 0x02	; 2
   1145c:	61 e0       	ldi	r22, 0x01	; 1
   1145e:	a8 01       	movw	r20, r16
   11460:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>


          IsNewPumpStatus=True;
   11464:	01 e0       	ldi	r16, 0x01	; 1
   11466:	00 93 01 01 	sts	0x0101, r16
		  DisplayPumpStatus(); 
   1146a:	0e 94 dc 43 	call	0x87b8	; 0x87b8 <DisplayPumpStatus>
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
   1146e:	85 e0       	ldi	r24, 0x05	; 5
   11470:	80 93 8b 06 	sts	0x068B, r24
	 PoolMsg=plMsg;
   11474:	92 e1       	ldi	r25, 0x12	; 18
   11476:	90 93 cc 0c 	sts	0x0CCC, r25
     IsControlPooling=True;
   1147a:	00 93 62 02 	sts	0x0262, r16
   1147e:	4c c1       	rjmp	.+664    	; 0x11718 <FCloseShift+0x3fa>
	      //SendSlaveCommand(SC_TOTALIZER,PUMP_ALL);          
		  SendPoolingCommand(SC_TOTALIZER,PUMP_ALL);
		  stCloseShift=csDisplayPumpStatus;
	      break;
     case csDisplayPumpStatus:
		  DisplayPumpStatus(); 
   11480:	0e 94 dc 43 	call	0x87b8	; 0x87b8 <DisplayPumpStatus>
		  TimDisplay=0;         
   11484:	10 92 70 02 	sts	0x0270, r1
          stCloseShift=csWaitTotalizerComplete;
   11488:	86 e0       	ldi	r24, 0x06	; 6
   1148a:	46 c1       	rjmp	.+652    	; 0x11718 <FCloseShift+0x3fa>
	      break;
     case csWaitTotalizerComplete:
	      KeyPressed=_key_scan(1);
   1148c:	81 e0       	ldi	r24, 0x01	; 1
   1148e:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <_key_scan>
   11492:	e8 2e       	mov	r14, r24
		  if (IsNewPumpStatus==True){
   11494:	80 91 01 01 	lds	r24, 0x0101
   11498:	81 30       	cpi	r24, 0x01	; 1
   1149a:	81 f5       	brne	.+96     	; 0x114fc <FCloseShift+0x1de>
			  sprintf_P(lcdteks,PSTR("Wait Pump:%d "),(ActivePump-CountTotalizerSatus(strPumpStatus)));
   1149c:	82 e0       	ldi	r24, 0x02	; 2
   1149e:	91 e0       	ldi	r25, 0x01	; 1
   114a0:	0e 94 8a 1c 	call	0x3914	; 0x3914 <CountTotalizerSatus>
   114a4:	00 d0       	rcall	.+0      	; 0x114a6 <FCloseShift+0x188>
   114a6:	00 d0       	rcall	.+0      	; 0x114a8 <FCloseShift+0x18a>
   114a8:	00 d0       	rcall	.+0      	; 0x114aa <FCloseShift+0x18c>
   114aa:	ed b7       	in	r30, 0x3d	; 61
   114ac:	fe b7       	in	r31, 0x3e	; 62
   114ae:	31 96       	adiw	r30, 0x01	; 1
   114b0:	8e 01       	movw	r16, r28
   114b2:	0f 5f       	subi	r16, 0xFF	; 255
   114b4:	1f 4f       	sbci	r17, 0xFF	; 255
   114b6:	ad b7       	in	r26, 0x3d	; 61
   114b8:	be b7       	in	r27, 0x3e	; 62
   114ba:	12 96       	adiw	r26, 0x02	; 2
   114bc:	1c 93       	st	X, r17
   114be:	0e 93       	st	-X, r16
   114c0:	11 97       	sbiw	r26, 0x01	; 1
   114c2:	2e ed       	ldi	r18, 0xDE	; 222
   114c4:	36 e1       	ldi	r19, 0x16	; 22
   114c6:	33 83       	std	Z+3, r19	; 0x03
   114c8:	22 83       	std	Z+2, r18	; 0x02
   114ca:	20 91 3b 02 	lds	r18, 0x023B
   114ce:	30 e0       	ldi	r19, 0x00	; 0
   114d0:	28 1b       	sub	r18, r24
   114d2:	31 09       	sbc	r19, r1
   114d4:	35 83       	std	Z+5, r19	; 0x05
   114d6:	24 83       	std	Z+4, r18	; 0x04
   114d8:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
			  lcd_print(2,1,lcdteks);
   114dc:	ed b7       	in	r30, 0x3d	; 61
   114de:	fe b7       	in	r31, 0x3e	; 62
   114e0:	36 96       	adiw	r30, 0x06	; 6
   114e2:	0f b6       	in	r0, 0x3f	; 63
   114e4:	f8 94       	cli
   114e6:	fe bf       	out	0x3e, r31	; 62
   114e8:	0f be       	out	0x3f, r0	; 63
   114ea:	ed bf       	out	0x3d, r30	; 61
   114ec:	82 e0       	ldi	r24, 0x02	; 2
   114ee:	61 e0       	ldi	r22, 0x01	; 1
   114f0:	a8 01       	movw	r20, r16
   114f2:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
		  	  stCloseShift=csDisplayPumpStatus;	 
   114f6:	85 e0       	ldi	r24, 0x05	; 5
   114f8:	80 93 28 03 	sts	0x0328, r24
		  }
		  if ((CountTotalizerSatus(strPumpStatus)>=ActivePump)&&(TimDisplay>5)){
   114fc:	82 e0       	ldi	r24, 0x02	; 2
   114fe:	91 e0       	ldi	r25, 0x01	; 1
   11500:	0e 94 8a 1c 	call	0x3914	; 0x3914 <CountTotalizerSatus>
   11504:	90 91 3b 02 	lds	r25, 0x023B
   11508:	89 17       	cp	r24, r25
   1150a:	a0 f0       	brcs	.+40     	; 0x11534 <FCloseShift+0x216>
   1150c:	80 91 70 02 	lds	r24, 0x0270
   11510:	86 30       	cpi	r24, 0x06	; 6
   11512:	80 f0       	brcs	.+32     	; 0x11534 <FCloseShift+0x216>
   11514:	00 e0       	ldi	r16, 0x00	; 0
   11516:	07 c0       	rjmp	.+14     	; 0x11526 <FCloseShift+0x208>
		      for (FIPAddr=0;FIPAddr<ActivePump;FIPAddr++)
			       UpdateStandaloneStatus(GetPumpID(FIPAddr),PUMP_OFF);
   11518:	80 2f       	mov	r24, r16
   1151a:	0e 94 01 6e 	call	0xdc02	; 0xdc02 <GetPumpID>
   1151e:	66 e0       	ldi	r22, 0x06	; 6
   11520:	0e 94 8f 81 	call	0x1031e	; 0x1031e <UpdateStandaloneStatus>
			  sprintf_P(lcdteks,PSTR("Wait Pump:%d "),(ActivePump-CountTotalizerSatus(strPumpStatus)));
			  lcd_print(2,1,lcdteks);
		  	  stCloseShift=csDisplayPumpStatus;	 
		  }
		  if ((CountTotalizerSatus(strPumpStatus)>=ActivePump)&&(TimDisplay>5)){
		      for (FIPAddr=0;FIPAddr<ActivePump;FIPAddr++)
   11524:	0f 5f       	subi	r16, 0xFF	; 255
   11526:	80 91 3b 02 	lds	r24, 0x023B
   1152a:	08 17       	cp	r16, r24
   1152c:	a8 f3       	brcs	.-22     	; 0x11518 <FCloseShift+0x1fa>
			       UpdateStandaloneStatus(GetPumpID(FIPAddr),PUMP_OFF);

		      stCloseShift=csGenerateReport;		      
   1152e:	88 e0       	ldi	r24, 0x08	; 8
   11530:	80 93 28 03 	sts	0x0328, r24
			  }
          //sprintf_P(lcdteks,PSTR("TimSend:%d"),TimDisplay);
		  //lcd_print(3,1,lcdteks);

          if ((TimDisplay>15)&&(IsPumpBusy!=True)){
   11534:	80 91 70 02 	lds	r24, 0x0270
   11538:	80 31       	cpi	r24, 0x10	; 16
   1153a:	08 f4       	brcc	.+2      	; 0x1153e <FCloseShift+0x220>
   1153c:	57 c0       	rjmp	.+174    	; 0x115ec <FCloseShift+0x2ce>
   1153e:	80 91 27 03 	lds	r24, 0x0327
   11542:	81 30       	cpi	r24, 0x01	; 1
   11544:	09 f4       	brne	.+2      	; 0x11548 <FCloseShift+0x22a>
   11546:	52 c0       	rjmp	.+164    	; 0x115ec <FCloseShift+0x2ce>
		      if(CountNoPumpSatus(strPumpStatus)>=eeprom_read_byte(&DefActivePump)){
   11548:	82 e0       	ldi	r24, 0x02	; 2
   1154a:	91 e0       	ldi	r25, 0x01	; 1
   1154c:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <CountNoPumpSatus>
   11550:	f8 2e       	mov	r15, r24
   11552:	8a e4       	ldi	r24, 0x4A	; 74
   11554:	91 e0       	ldi	r25, 0x01	; 1
   11556:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
   1155a:	f8 16       	cp	r15, r24
   1155c:	08 f4       	brcc	.+2      	; 0x11560 <FCloseShift+0x242>
   1155e:	46 c0       	rjmp	.+140    	; 0x115ec <FCloseShift+0x2ce>
			  //lcd_printf(2,1,PSTR("NoPumpFound  ")); 
			  //sprintf_P(lcdteks,PSTR("NoPumpFound:%d"),CountNoPumpSatus(strPumpStatus));
			  sprintf_P(lcdteks,PSTR("Error - No Pump:%d "),ActivePump-CountNoPumpSatus(strPumpStatus));
   11560:	00 d0       	rcall	.+0      	; 0x11562 <FCloseShift+0x244>
   11562:	00 d0       	rcall	.+0      	; 0x11564 <FCloseShift+0x246>
   11564:	00 d0       	rcall	.+0      	; 0x11566 <FCloseShift+0x248>
   11566:	ed b7       	in	r30, 0x3d	; 61
   11568:	fe b7       	in	r31, 0x3e	; 62
   1156a:	31 96       	adiw	r30, 0x01	; 1
   1156c:	8e 01       	movw	r16, r28
   1156e:	0f 5f       	subi	r16, 0xFF	; 255
   11570:	1f 4f       	sbci	r17, 0xFF	; 255
   11572:	ad b7       	in	r26, 0x3d	; 61
   11574:	be b7       	in	r27, 0x3e	; 62
   11576:	12 96       	adiw	r26, 0x02	; 2
   11578:	1c 93       	st	X, r17
   1157a:	0e 93       	st	-X, r16
   1157c:	11 97       	sbiw	r26, 0x01	; 1
   1157e:	2a ec       	ldi	r18, 0xCA	; 202
   11580:	36 e1       	ldi	r19, 0x16	; 22
   11582:	33 83       	std	Z+3, r19	; 0x03
   11584:	22 83       	std	Z+2, r18	; 0x02
   11586:	20 91 3b 02 	lds	r18, 0x023B
   1158a:	30 e0       	ldi	r19, 0x00	; 0
   1158c:	2f 19       	sub	r18, r15
   1158e:	31 09       	sbc	r19, r1
   11590:	35 83       	std	Z+5, r19	; 0x05
   11592:	24 83       	std	Z+4, r18	; 0x04
   11594:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
			  lcd_print(3,1,lcdteks);
   11598:	ed b7       	in	r30, 0x3d	; 61
   1159a:	fe b7       	in	r31, 0x3e	; 62
   1159c:	36 96       	adiw	r30, 0x06	; 6
   1159e:	0f b6       	in	r0, 0x3f	; 63
   115a0:	f8 94       	cli
   115a2:	fe bf       	out	0x3e, r31	; 62
   115a4:	0f be       	out	0x3f, r0	; 63
   115a6:	ed bf       	out	0x3d, r30	; 61
   115a8:	83 e0       	ldi	r24, 0x03	; 3
   115aa:	61 e0       	ldi	r22, 0x01	; 1
   115ac:	a8 01       	movw	r20, r16
   115ae:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
			  
			  for (FIPAddr=0;FIPAddr<ActivePump;FIPAddr++){
   115b2:	00 e0       	ldi	r16, 0x00	; 0
   115b4:	0e c0       	rjmp	.+28     	; 0x115d2 <FCloseShift+0x2b4>
		           if (strPumpStatus[FIPAddr]==GetPumpStatusLabel(PS_TOTALIZER))
   115b6:	e0 2f       	mov	r30, r16
   115b8:	f0 e0       	ldi	r31, 0x00	; 0
   115ba:	ee 5f       	subi	r30, 0xFE	; 254
   115bc:	fe 4f       	sbci	r31, 0xFE	; 254
   115be:	80 81       	ld	r24, Z
   115c0:	84 35       	cpi	r24, 0x54	; 84
   115c2:	31 f4       	brne	.+12     	; 0x115d0 <FCloseShift+0x2b2>
			           UpdateStandaloneStatus(GetPumpID(FIPAddr),PUMP_OFF);
   115c4:	80 2f       	mov	r24, r16
   115c6:	0e 94 01 6e 	call	0xdc02	; 0xdc02 <GetPumpID>
   115ca:	66 e0       	ldi	r22, 0x06	; 6
   115cc:	0e 94 8f 81 	call	0x1031e	; 0x1031e <UpdateStandaloneStatus>
			  //lcd_printf(2,1,PSTR("NoPumpFound  ")); 
			  //sprintf_P(lcdteks,PSTR("NoPumpFound:%d"),CountNoPumpSatus(strPumpStatus));
			  sprintf_P(lcdteks,PSTR("Error - No Pump:%d "),ActivePump-CountNoPumpSatus(strPumpStatus));
			  lcd_print(3,1,lcdteks);
			  
			  for (FIPAddr=0;FIPAddr<ActivePump;FIPAddr++){
   115d0:	0f 5f       	subi	r16, 0xFF	; 255
   115d2:	80 91 3b 02 	lds	r24, 0x023B
   115d6:	08 17       	cp	r16, r24
   115d8:	70 f3       	brcs	.-36     	; 0x115b6 <FCloseShift+0x298>
		           if (strPumpStatus[FIPAddr]==GetPumpStatusLabel(PS_TOTALIZER))
			           UpdateStandaloneStatus(GetPumpID(FIPAddr),PUMP_OFF);
			  }

			  system_beep(1);
   115da:	81 e0       	ldi	r24, 0x01	; 1
   115dc:	90 e0       	ldi	r25, 0x00	; 0
   115de:	0e 94 ee 14 	call	0x29dc	; 0x29dc <system_beep>
			  TimDisplay=0;
   115e2:	10 92 70 02 	sts	0x0270, r1
			  stCloseShift=csNoPumpFound;		     
   115e6:	87 e0       	ldi	r24, 0x07	; 7
   115e8:	80 93 28 03 	sts	0x0328, r24
			  }			  
		  }
		  if (KeyPressed==_KEY_CANCEL){
   115ec:	fe 2d       	mov	r31, r14
   115ee:	f7 3e       	cpi	r31, 0xE7	; 231
   115f0:	09 f0       	breq	.+2      	; 0x115f4 <FCloseShift+0x2d6>
   115f2:	99 c0       	rjmp	.+306    	; 0x11726 <FCloseShift+0x408>
			  sprintf_P(lcdteks,PSTR("Cancel"));
   115f4:	00 d0       	rcall	.+0      	; 0x115f6 <FCloseShift+0x2d8>
   115f6:	00 d0       	rcall	.+0      	; 0x115f8 <FCloseShift+0x2da>
   115f8:	8e 01       	movw	r16, r28
   115fa:	0f 5f       	subi	r16, 0xFF	; 255
   115fc:	1f 4f       	sbci	r17, 0xFF	; 255
   115fe:	ad b7       	in	r26, 0x3d	; 61
   11600:	be b7       	in	r27, 0x3e	; 62
   11602:	12 96       	adiw	r26, 0x02	; 2
   11604:	1c 93       	st	X, r17
   11606:	0e 93       	st	-X, r16
   11608:	11 97       	sbiw	r26, 0x01	; 1
   1160a:	83 ec       	ldi	r24, 0xC3	; 195
   1160c:	96 e1       	ldi	r25, 0x16	; 22
   1160e:	14 96       	adiw	r26, 0x04	; 4
   11610:	9c 93       	st	X, r25
   11612:	8e 93       	st	-X, r24
   11614:	13 97       	sbiw	r26, 0x03	; 3
   11616:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
			  lcd_print(3,1,lcdteks);
   1161a:	0f 90       	pop	r0
   1161c:	0f 90       	pop	r0
   1161e:	0f 90       	pop	r0
   11620:	0f 90       	pop	r0
   11622:	83 e0       	ldi	r24, 0x03	; 3
   11624:	61 e0       	ldi	r22, 0x01	; 1
   11626:	a8 01       	movw	r20, r16
   11628:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
			  system_beep(1);
   1162c:	81 e0       	ldi	r24, 0x01	; 1
   1162e:	90 e0       	ldi	r25, 0x00	; 0
   11630:	0e 94 ee 14 	call	0x29dc	; 0x29dc <system_beep>
			  TimDisplay=0;
   11634:	10 92 70 02 	sts	0x0270, r1
			  stCloseShift=csNoPumpFound;		     		  
   11638:	87 e0       	ldi	r24, 0x07	; 7
   1163a:	6e c0       	rjmp	.+220    	; 0x11718 <FCloseShift+0x3fa>
		  }
	      break;
     case csNoPumpFound:
	      if (TimDisplay>TIM_DISPLAY){
   1163c:	80 91 70 02 	lds	r24, 0x0270
   11640:	8b 30       	cpi	r24, 0x0B	; 11
   11642:	08 f4       	brcc	.+2      	; 0x11646 <FCloseShift+0x328>
   11644:	70 c0       	rjmp	.+224    	; 0x11726 <FCloseShift+0x408>
   11646:	67 c0       	rjmp	.+206    	; 0x11716 <FCloseShift+0x3f8>
		      stCloseShift=csFinishCloseShift;
		  }	      
	      break;
     case csGenerateReport:
		  lcd_printf(1,1,PSTR("Printing Totalizer"));
   11648:	81 e0       	ldi	r24, 0x01	; 1
   1164a:	61 e0       	ldi	r22, 0x01	; 1
   1164c:	40 eb       	ldi	r20, 0xB0	; 176
   1164e:	56 e1       	ldi	r21, 0x16	; 22
   11650:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
          _datetime(0, strSystemDate, strSystemTime);
   11654:	0e e9       	ldi	r16, 0x9E	; 158
   11656:	14 e0       	ldi	r17, 0x04	; 4
   11658:	68 e5       	ldi	r22, 0x58	; 88
   1165a:	e6 2e       	mov	r14, r22
   1165c:	69 e0       	ldi	r22, 0x09	; 9
   1165e:	f6 2e       	mov	r15, r22
   11660:	80 e0       	ldi	r24, 0x00	; 0
   11662:	b8 01       	movw	r22, r16
   11664:	a7 01       	movw	r20, r14
   11666:	0e 94 e4 a4 	call	0x149c8	; 0x149c8 <_datetime>
		  sprintf_P(CurrentShiftDateTime,PSTR("%s %s"),strSystemDate,strSystemTime);
   1166a:	ed b7       	in	r30, 0x3d	; 61
   1166c:	fe b7       	in	r31, 0x3e	; 62
   1166e:	38 97       	sbiw	r30, 0x08	; 8
   11670:	0f b6       	in	r0, 0x3f	; 63
   11672:	f8 94       	cli
   11674:	fe bf       	out	0x3e, r31	; 62
   11676:	0f be       	out	0x3f, r0	; 63
   11678:	ed bf       	out	0x3d, r30	; 61
   1167a:	31 96       	adiw	r30, 0x01	; 1
   1167c:	82 e7       	ldi	r24, 0x72	; 114
   1167e:	98 e0       	ldi	r25, 0x08	; 8
   11680:	ad b7       	in	r26, 0x3d	; 61
   11682:	be b7       	in	r27, 0x3e	; 62
   11684:	12 96       	adiw	r26, 0x02	; 2
   11686:	9c 93       	st	X, r25
   11688:	8e 93       	st	-X, r24
   1168a:	11 97       	sbiw	r26, 0x01	; 1
   1168c:	8a ea       	ldi	r24, 0xAA	; 170
   1168e:	96 e1       	ldi	r25, 0x16	; 22
   11690:	93 83       	std	Z+3, r25	; 0x03
   11692:	82 83       	std	Z+2, r24	; 0x02
   11694:	15 83       	std	Z+5, r17	; 0x05
   11696:	04 83       	std	Z+4, r16	; 0x04
   11698:	f7 82       	std	Z+7, r15	; 0x07
   1169a:	e6 82       	std	Z+6, r14	; 0x06
   1169c:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		  IsGenerateReport=True;
   116a0:	81 e0       	ldi	r24, 0x01	; 1
   116a2:	80 93 64 02 	sts	0x0264, r24
		  IsFinishPrintingTotalizer=False;
   116a6:	10 92 65 02 	sts	0x0265, r1
		  stCloseShift=csWaitPrintTotalizerComplete;
   116aa:	8a e0       	ldi	r24, 0x0A	; 10
   116ac:	80 93 28 03 	sts	0x0328, r24
	      break;
   116b0:	ed b7       	in	r30, 0x3d	; 61
   116b2:	fe b7       	in	r31, 0x3e	; 62
   116b4:	38 96       	adiw	r30, 0x08	; 8
   116b6:	0f b6       	in	r0, 0x3f	; 63
   116b8:	f8 94       	cli
   116ba:	fe bf       	out	0x3e, r31	; 62
   116bc:	0f be       	out	0x3f, r0	; 63
   116be:	ed bf       	out	0x3d, r30	; 61
   116c0:	32 c0       	rjmp	.+100    	; 0x11726 <FCloseShift+0x408>
     case csWaitTotalizerALL:
	      break;
     case csWaitPrintTotalizerComplete:
	      if (IsFinishPrintingTotalizer==True){
   116c2:	80 91 65 02 	lds	r24, 0x0265
   116c6:	81 30       	cpi	r24, 0x01	; 1
   116c8:	71 f5       	brne	.+92     	; 0x11726 <FCloseShift+0x408>
		      IsFinishPrintingTotalizer=False;
   116ca:	10 92 65 02 	sts	0x0265, r1
		      stCloseShift=csDumpShift;
   116ce:	8c e0       	ldi	r24, 0x0C	; 12
   116d0:	23 c0       	rjmp	.+70     	; 0x11718 <FCloseShift+0x3fa>
		  }
	      break;
     case csDumpShift://Increment CurrentShift save Current to Last
		  lcd_printf(1,1,PSTR("Saving ShiftData.. "));
   116d2:	81 e0       	ldi	r24, 0x01	; 1
   116d4:	61 e0       	ldi	r22, 0x01	; 1
   116d6:	46 e9       	ldi	r20, 0x96	; 150
   116d8:	56 e1       	ldi	r21, 0x16	; 22
   116da:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
	      if (ShiftType==CONTINUE_SHIFT)//Shift=Shift+1
   116de:	02 30       	cpi	r16, 0x02	; 2
   116e0:	49 f4       	brne	.+18     	; 0x116f4 <FCloseShift+0x3d6>
		      eeprom_write_byte(&DefShift,eeprom_read_byte(&DefShift)+1);	 
   116e2:	80 e4       	ldi	r24, 0x40	; 64
   116e4:	91 e0       	ldi	r25, 0x01	; 1
   116e6:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
   116ea:	68 2f       	mov	r22, r24
   116ec:	6f 5f       	subi	r22, 0xFF	; 255
   116ee:	80 e4       	ldi	r24, 0x40	; 64
   116f0:	91 e0       	ldi	r25, 0x01	; 1
   116f2:	05 c0       	rjmp	.+10     	; 0x116fe <FCloseShift+0x3e0>
          else if (ShiftType==NEW_SHIFT)//Shift=1
   116f4:	01 30       	cpi	r16, 0x01	; 1
   116f6:	29 f4       	brne	.+10     	; 0x11702 <FCloseShift+0x3e4>
		      eeprom_write_byte(&DefShift,1);	 
   116f8:	80 e4       	ldi	r24, 0x40	; 64
   116fa:	91 e0       	ldi	r25, 0x01	; 1
   116fc:	61 e0       	ldi	r22, 0x01	; 1
   116fe:	0e 94 78 aa 	call	0x154f0	; 0x154f0 <__eewr_byte_m128>

          SaveTotalizerCurrentToLast();
   11702:	0e 94 2a 78 	call	0xf054	; 0xf054 <SaveTotalizerCurrentToLast>
          eeprom_write_block((const void*) &CurrentShiftDateTime, (void*) &DefLastShiftDateTime,sizeof(DefLastShiftDateTime));
   11706:	82 e7       	ldi	r24, 0x72	; 114
   11708:	98 e0       	ldi	r25, 0x08	; 8
   1170a:	64 e4       	ldi	r22, 0x44	; 68
   1170c:	78 e0       	ldi	r23, 0x08	; 8
   1170e:	44 e1       	ldi	r20, 0x14	; 20
   11710:	50 e0       	ldi	r21, 0x00	; 0
   11712:	0e 94 6e aa 	call	0x154dc	; 0x154dc <__eewr_block_m128>
		  stCloseShift=csFinishCloseShift;
   11716:	8b e0       	ldi	r24, 0x0B	; 11
   11718:	80 93 28 03 	sts	0x0328, r24
   1171c:	04 c0       	rjmp	.+8      	; 0x11726 <FCloseShift+0x408>
	      break;
     case csFinishCloseShift:
          stCloseShift=csInitCloseShift;
   1171e:	10 92 28 03 	sts	0x0328, r1
		  Result=MENU_DONE;
   11722:	81 e0       	ldi	r24, 0x01	; 1
	      break;
   11724:	01 c0       	rjmp	.+2      	; 0x11728 <FCloseShift+0x40a>
     char Result=MENU_NONE;
	 char KeyPressed;
	 char FIPAddr;


	 Result=MENU_NONE;
   11726:	80 e0       	ldi	r24, 0x00	; 0
		  Result=MENU_DONE;
	      break;
	 }
	 //uart_printf(0,1,PSTR("Close Shift"));	
   return Result;
}
   11728:	64 96       	adiw	r28, 0x14	; 20
   1172a:	0f b6       	in	r0, 0x3f	; 63
   1172c:	f8 94       	cli
   1172e:	de bf       	out	0x3e, r29	; 62
   11730:	0f be       	out	0x3f, r0	; 63
   11732:	cd bf       	out	0x3d, r28	; 61
   11734:	cf 91       	pop	r28
   11736:	df 91       	pop	r29
   11738:	1f 91       	pop	r17
   1173a:	0f 91       	pop	r16
   1173c:	ff 90       	pop	r15
   1173e:	ef 90       	pop	r14
   11740:	08 95       	ret

00011742 <FMenuShift>:
static char stMenuShift=msInitMenuShift;
     char SubMenu,KeyChar,KeyPressed;
     char Result;

Result=MENU_NONE;
     switch(stMenuShift){
   11742:	80 91 29 03 	lds	r24, 0x0329
   11746:	82 30       	cpi	r24, 0x02	; 2
   11748:	09 f4       	brne	.+2      	; 0x1174c <FMenuShift+0xa>
   1174a:	48 c0       	rjmp	.+144    	; 0x117dc <FMenuShift+0x9a>
   1174c:	83 30       	cpi	r24, 0x03	; 3
   1174e:	30 f4       	brcc	.+12     	; 0x1175c <FMenuShift+0x1a>
   11750:	88 23       	and	r24, r24
   11752:	69 f0       	breq	.+26     	; 0x1176e <FMenuShift+0x2c>
   11754:	81 30       	cpi	r24, 0x01	; 1
   11756:	09 f0       	breq	.+2      	; 0x1175a <FMenuShift+0x18>
   11758:	4f c0       	rjmp	.+158    	; 0x117f8 <FMenuShift+0xb6>
   1175a:	25 c0       	rjmp	.+74     	; 0x117a6 <FMenuShift+0x64>
   1175c:	84 30       	cpi	r24, 0x04	; 4
   1175e:	09 f4       	brne	.+2      	; 0x11762 <FMenuShift+0x20>
   11760:	4d c0       	rjmp	.+154    	; 0x117fc <FMenuShift+0xba>
   11762:	84 30       	cpi	r24, 0x04	; 4
   11764:	e8 f1       	brcs	.+122    	; 0x117e0 <FMenuShift+0x9e>
   11766:	85 30       	cpi	r24, 0x05	; 5
   11768:	09 f0       	breq	.+2      	; 0x1176c <FMenuShift+0x2a>
   1176a:	46 c0       	rjmp	.+140    	; 0x117f8 <FMenuShift+0xb6>
   1176c:	41 c0       	rjmp	.+130    	; 0x117f0 <FMenuShift+0xae>
	 case msInitMenuShift:
	      lcd_clear();
   1176e:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
		  lcd_printf(1,1,PSTR("1.Close Shift"));
   11772:	81 e0       	ldi	r24, 0x01	; 1
   11774:	61 e0       	ldi	r22, 0x01	; 1
   11776:	49 e2       	ldi	r20, 0x29	; 41
   11778:	57 e1       	ldi	r21, 0x17	; 23
   1177a:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  lcd_printf(2,1,PSTR("2.Close Day  "));
   1177e:	82 e0       	ldi	r24, 0x02	; 2
   11780:	61 e0       	ldi	r22, 0x01	; 1
   11782:	4b e1       	ldi	r20, 0x1B	; 27
   11784:	57 e1       	ldi	r21, 0x17	; 23
   11786:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  lcd_printf(3,1,PSTR("3.Lock Pump  "));
   1178a:	83 e0       	ldi	r24, 0x03	; 3
   1178c:	61 e0       	ldi	r22, 0x01	; 1
   1178e:	4d e0       	ldi	r20, 0x0D	; 13
   11790:	57 e1       	ldi	r21, 0x17	; 23
   11792:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  lcd_printf(4,1,PSTR("*)Exit"));
   11796:	84 e0       	ldi	r24, 0x04	; 4
   11798:	61 e0       	ldi	r22, 0x01	; 1
   1179a:	46 e0       	ldi	r20, 0x06	; 6
   1179c:	57 e1       	ldi	r21, 0x17	; 23
   1179e:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  stMenuShift=msSelectShift;
   117a2:	81 e0       	ldi	r24, 0x01	; 1
   117a4:	18 c0       	rjmp	.+48     	; 0x117d6 <FMenuShift+0x94>
	      break;
     case msSelectShift:
          KeyPressed=_key_scan(1);
   117a6:	81 e0       	ldi	r24, 0x01	; 1
   117a8:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
   117ac:	0e 94 49 a3 	call	0x14692	; 0x14692 <_key_btn>
          switch(KeyChar){
   117b0:	82 33       	cpi	r24, 0x32	; 50
   117b2:	61 f0       	breq	.+24     	; 0x117cc <FMenuShift+0x8a>
   117b4:	83 33       	cpi	r24, 0x33	; 51
   117b6:	28 f4       	brcc	.+10     	; 0x117c2 <FMenuShift+0x80>
   117b8:	8a 32       	cpi	r24, 0x2A	; 42
   117ba:	61 f0       	breq	.+24     	; 0x117d4 <FMenuShift+0x92>
   117bc:	81 33       	cpi	r24, 0x31	; 49
   117be:	e1 f4       	brne	.+56     	; 0x117f8 <FMenuShift+0xb6>
   117c0:	03 c0       	rjmp	.+6      	; 0x117c8 <FMenuShift+0x86>
   117c2:	83 33       	cpi	r24, 0x33	; 51
   117c4:	c9 f4       	brne	.+50     	; 0x117f8 <FMenuShift+0xb6>
   117c6:	04 c0       	rjmp	.+8      	; 0x117d0 <FMenuShift+0x8e>
		  case '1':
		       SubMenu=MENU_NONE;
		       stMenuShift=msCloseShift;
   117c8:	82 e0       	ldi	r24, 0x02	; 2
   117ca:	05 c0       	rjmp	.+10     	; 0x117d6 <FMenuShift+0x94>
		       break; 
		  case '2':
		       SubMenu=MENU_NONE;
		       stMenuShift=msCloseDay;
   117cc:	83 e0       	ldi	r24, 0x03	; 3
   117ce:	03 c0       	rjmp	.+6      	; 0x117d6 <FMenuShift+0x94>
		       break; 
		  case '3':
		       SubMenu=MENU_NONE;
		       stMenuShift=msLockPump;
   117d0:	84 e0       	ldi	r24, 0x04	; 4
   117d2:	01 c0       	rjmp	.+2      	; 0x117d6 <FMenuShift+0x94>
		       break; 
		  case '*':
		       stMenuShift=msExitShift;
   117d4:	85 e0       	ldi	r24, 0x05	; 5
   117d6:	80 93 29 03 	sts	0x0329, r24
   117da:	0e c0       	rjmp	.+28     	; 0x117f8 <FMenuShift+0xb6>
		       break; 			   		  
		  }
		  break;
     case msCloseShift:
	      SubMenu=FCloseShift(CONTINUE_SHIFT);
   117dc:	82 e0       	ldi	r24, 0x02	; 2
   117de:	01 c0       	rjmp	.+2      	; 0x117e2 <FMenuShift+0xa0>
		  if (SubMenu==MENU_DONE)stMenuShift=msInitMenuShift;
		  //IsGenerateReport=True;		  
	      break;
     case msCloseDay:
	      SubMenu=FCloseShift(NEW_SHIFT);
   117e0:	81 e0       	ldi	r24, 0x01	; 1
   117e2:	0e 94 8f 89 	call	0x1131e	; 0x1131e <FCloseShift>
		  if (SubMenu==MENU_DONE)stMenuShift=msInitMenuShift;
   117e6:	81 30       	cpi	r24, 0x01	; 1
   117e8:	39 f4       	brne	.+14     	; 0x117f8 <FMenuShift+0xb6>
   117ea:	10 92 29 03 	sts	0x0329, r1
   117ee:	04 c0       	rjmp	.+8      	; 0x117f8 <FMenuShift+0xb6>
     case msLockPump:
	      SubMenu=FLockPump();
		  if (SubMenu==MENU_DONE)stMenuShift=msInitMenuShift;
	      break;
     case msExitShift:
          stMenuShift=msInitMenuShift;
   117f0:	10 92 29 03 	sts	0x0329, r1
	      Result=MENU_DONE;
   117f4:	81 e0       	ldi	r24, 0x01	; 1
	      break;	 
   117f6:	08 95       	ret
char FMenuShift(){//Close Shift,Close Day
static char stMenuShift=msInitMenuShift;
     char SubMenu,KeyChar,KeyPressed;
     char Result;

Result=MENU_NONE;
   117f8:	80 e0       	ldi	r24, 0x00	; 0
   117fa:	08 95       	ret
   117fc:	80 e0       	ldi	r24, 0x00	; 0
          stMenuShift=msInitMenuShift;
	      Result=MENU_DONE;
	      break;	 
	 } 
   return Result;
}
   117fe:	08 95       	ret

00011800 <GenerateStandaloneTransData>:

     eeprom_write_block((const void*)&PTransNum,(void*)&DefTransactionNumber,sizeof(DefTransactionNumber));
}


char GenerateStandaloneTransData(char xPumpID, char *PNozzle){//[1,2,3..16]->[1,2,3..0]
   11800:	bf 92       	push	r11
   11802:	cf 92       	push	r12
   11804:	df 92       	push	r13
   11806:	ef 92       	push	r14
   11808:	ff 92       	push	r15
   1180a:	0f 93       	push	r16
   1180c:	1f 93       	push	r17
   1180e:	df 93       	push	r29
   11810:	cf 93       	push	r28
   11812:	cd b7       	in	r28, 0x3d	; 61
   11814:	de b7       	in	r29, 0x3e	; 62
   11816:	6e 97       	sbiw	r28, 0x1e	; 30
   11818:	0f b6       	in	r0, 0x3f	; 63
   1181a:	f8 94       	cli
   1181c:	de bf       	out	0x3e, r29	; 62
   1181e:	0f be       	out	0x3f, r0	; 63
   11820:	cd bf       	out	0x3d, r28	; 61
   11822:	c8 2e       	mov	r12, r24
   11824:	7b 01       	movw	r14, r22
	 char strConfUnitPrice[10];
	 unsigned int PumpPrice,ConfigPrice;
	 char strConst[5];

	 iPumpID=(xPumpID&0x0F);
	 FIPAddr=GetFIPAddr(iPumpID);
   11826:	8f 70       	andi	r24, 0x0F	; 15
   11828:	0e 94 50 6e 	call	0xdca0	; 0xdca0 <GetFIPAddr>
     if (FIPAddr>0){
   1182c:	88 23       	and	r24, r24
   1182e:	09 f4       	brne	.+2      	; 0x11832 <GenerateStandaloneTransData+0x32>
   11830:	ad c1       	rjmp	.+858    	; 0x11b8c <GenerateStandaloneTransData+0x38c>
	     FIPAddr=FIPAddr-1;
   11832:	81 50       	subi	r24, 0x01	; 1
		 iProdID=PNozzle[RecPumpData[FIPAddr].Grade];
   11834:	08 2f       	mov	r16, r24
   11836:	10 e0       	ldi	r17, 0x00	; 0
   11838:	85 e3       	ldi	r24, 0x35	; 53
   1183a:	90 e0       	ldi	r25, 0x00	; 0
   1183c:	08 9f       	mul	r16, r24
   1183e:	f0 01       	movw	r30, r0
   11840:	09 9f       	mul	r16, r25
   11842:	f0 0d       	add	r31, r0
   11844:	18 9f       	mul	r17, r24
   11846:	f0 0d       	add	r31, r0
   11848:	11 24       	eor	r1, r1
   1184a:	e4 57       	subi	r30, 0x74	; 116
   1184c:	f9 4f       	sbci	r31, 0xF9	; 249
   1184e:	80 81       	ld	r24, Z
   11850:	f7 01       	movw	r30, r14
   11852:	e8 0f       	add	r30, r24
   11854:	f1 1d       	adc	r31, r1
   11856:	d0 80       	ld	r13, Z
   11858:	ce 01       	movw	r24, r28
   1185a:	40 96       	adiw	r24, 0x10	; 16

		 if (iProdID>0) eeprom_read_block((void*) &ProductName, (const void*) &DefProductName[iProdID-1],sizeof(DefProductName[iProdID-1]));
   1185c:	dd 20       	and	r13, r13
   1185e:	91 f0       	breq	.+36     	; 0x11884 <GenerateStandaloneTransData+0x84>
   11860:	2d 2d       	mov	r18, r13
   11862:	30 e0       	ldi	r19, 0x00	; 0
   11864:	21 50       	subi	r18, 0x01	; 1
   11866:	30 40       	sbci	r19, 0x00	; 0
   11868:	4d e0       	ldi	r20, 0x0D	; 13
   1186a:	50 e0       	ldi	r21, 0x00	; 0
   1186c:	24 9f       	mul	r18, r20
   1186e:	b0 01       	movw	r22, r0
   11870:	25 9f       	mul	r18, r21
   11872:	70 0d       	add	r23, r0
   11874:	34 9f       	mul	r19, r20
   11876:	70 0d       	add	r23, r0
   11878:	11 24       	eor	r1, r1
   1187a:	64 54       	subi	r22, 0x44	; 68
   1187c:	7f 4f       	sbci	r23, 0xFF	; 255
   1187e:	0e 94 56 aa 	call	0x154ac	; 0x154ac <__eerd_block_m128>
   11882:	14 c0       	rjmp	.+40     	; 0x118ac <GenerateStandaloneTransData+0xac>
		 else sprintf_P(ProductName,PSTR("N/A"));
   11884:	00 d0       	rcall	.+0      	; 0x11886 <GenerateStandaloneTransData+0x86>
   11886:	00 d0       	rcall	.+0      	; 0x11888 <GenerateStandaloneTransData+0x88>
   11888:	ad b7       	in	r26, 0x3d	; 61
   1188a:	be b7       	in	r27, 0x3e	; 62
   1188c:	12 96       	adiw	r26, 0x02	; 2
   1188e:	9c 93       	st	X, r25
   11890:	8e 93       	st	-X, r24
   11892:	11 97       	sbiw	r26, 0x01	; 1
   11894:	87 e2       	ldi	r24, 0x27	; 39
   11896:	94 e2       	ldi	r25, 0x24	; 36
   11898:	14 96       	adiw	r26, 0x04	; 4
   1189a:	9c 93       	st	X, r25
   1189c:	8e 93       	st	-X, r24
   1189e:	13 97       	sbiw	r26, 0x03	; 3
   118a0:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
   118a4:	0f 90       	pop	r0
   118a6:	0f 90       	pop	r0
   118a8:	0f 90       	pop	r0
   118aa:	0f 90       	pop	r0

		 TermID=eeprom_read_byte(&DefIFT_ID);
   118ac:	80 e0       	ldi	r24, 0x00	; 0
   118ae:	90 e0       	ldi	r25, 0x00	; 0
   118b0:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
   118b4:	b8 2e       	mov	r11, r24

		 //Shift,TransNum,Date,Time
		 sprintf_P(strShift,PSTR("%d"),RecPumpData[FIPAddr].Shift);
   118b6:	00 d0       	rcall	.+0      	; 0x118b8 <GenerateStandaloneTransData+0xb8>
   118b8:	00 d0       	rcall	.+0      	; 0x118ba <GenerateStandaloneTransData+0xba>
   118ba:	00 d0       	rcall	.+0      	; 0x118bc <GenerateStandaloneTransData+0xbc>
   118bc:	ed b7       	in	r30, 0x3d	; 61
   118be:	fe b7       	in	r31, 0x3e	; 62
   118c0:	31 96       	adiw	r30, 0x01	; 1
   118c2:	8d e6       	ldi	r24, 0x6D	; 109
   118c4:	9d e0       	ldi	r25, 0x0D	; 13
   118c6:	ad b7       	in	r26, 0x3d	; 61
   118c8:	be b7       	in	r27, 0x3e	; 62
   118ca:	12 96       	adiw	r26, 0x02	; 2
   118cc:	9c 93       	st	X, r25
   118ce:	8e 93       	st	-X, r24
   118d0:	11 97       	sbiw	r26, 0x01	; 1
   118d2:	84 e2       	ldi	r24, 0x24	; 36
   118d4:	94 e2       	ldi	r25, 0x24	; 36
   118d6:	93 83       	std	Z+3, r25	; 0x03
   118d8:	82 83       	std	Z+2, r24	; 0x02
   118da:	85 e3       	ldi	r24, 0x35	; 53
   118dc:	90 e0       	ldi	r25, 0x00	; 0
   118de:	08 9f       	mul	r16, r24
   118e0:	70 01       	movw	r14, r0
   118e2:	09 9f       	mul	r16, r25
   118e4:	f0 0c       	add	r15, r0
   118e6:	18 9f       	mul	r17, r24
   118e8:	f0 0c       	add	r15, r0
   118ea:	11 24       	eor	r1, r1
   118ec:	d7 01       	movw	r26, r14
   118ee:	a4 57       	subi	r26, 0x74	; 116
   118f0:	b9 4f       	sbci	r27, 0xF9	; 249
   118f2:	12 96       	adiw	r26, 0x02	; 2
   118f4:	8c 91       	ld	r24, X
   118f6:	84 83       	std	Z+4, r24	; 0x04
   118f8:	15 82       	std	Z+5, r1	; 0x05
   118fa:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		 sprintf_P(strTranNo,PSTR("%s"),RecPumpData[FIPAddr].strTransNum);
   118fe:	ed b7       	in	r30, 0x3d	; 61
   11900:	fe b7       	in	r31, 0x3e	; 62
   11902:	31 96       	adiw	r30, 0x01	; 1
   11904:	8c e8       	ldi	r24, 0x8C	; 140
   11906:	9d e0       	ldi	r25, 0x0D	; 13
   11908:	ad b7       	in	r26, 0x3d	; 61
   1190a:	be b7       	in	r27, 0x3e	; 62
   1190c:	12 96       	adiw	r26, 0x02	; 2
   1190e:	9c 93       	st	X, r25
   11910:	8e 93       	st	-X, r24
   11912:	11 97       	sbiw	r26, 0x01	; 1
   11914:	81 e2       	ldi	r24, 0x21	; 33
   11916:	94 e2       	ldi	r25, 0x24	; 36
   11918:	93 83       	std	Z+3, r25	; 0x03
   1191a:	82 83       	std	Z+2, r24	; 0x02
   1191c:	c7 01       	movw	r24, r14
   1191e:	81 57       	subi	r24, 0x71	; 113
   11920:	99 4f       	sbci	r25, 0xF9	; 249
   11922:	95 83       	std	Z+5, r25	; 0x05
   11924:	84 83       	std	Z+4, r24	; 0x04
   11926:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	     sprintf_P(strDate,PSTR("%s"),RecPumpData[FIPAddr].strTransDate);
   1192a:	ed b7       	in	r30, 0x3d	; 61
   1192c:	fe b7       	in	r31, 0x3e	; 62
   1192e:	31 96       	adiw	r30, 0x01	; 1
   11930:	82 e5       	ldi	r24, 0x52	; 82
   11932:	98 e0       	ldi	r25, 0x08	; 8
   11934:	ad b7       	in	r26, 0x3d	; 61
   11936:	be b7       	in	r27, 0x3e	; 62
   11938:	12 96       	adiw	r26, 0x02	; 2
   1193a:	9c 93       	st	X, r25
   1193c:	8e 93       	st	-X, r24
   1193e:	11 97       	sbiw	r26, 0x01	; 1
   11940:	8e e1       	ldi	r24, 0x1E	; 30
   11942:	94 e2       	ldi	r25, 0x24	; 36
   11944:	93 83       	std	Z+3, r25	; 0x03
   11946:	82 83       	std	Z+2, r24	; 0x02
   11948:	c7 01       	movw	r24, r14
   1194a:	8a 56       	subi	r24, 0x6A	; 106
   1194c:	99 4f       	sbci	r25, 0xF9	; 249
   1194e:	95 83       	std	Z+5, r25	; 0x05
   11950:	84 83       	std	Z+4, r24	; 0x04
   11952:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		 sprintf_P(strTime,PSTR("%s"),RecPumpData[FIPAddr].strTransTime);	 
   11956:	ed b7       	in	r30, 0x3d	; 61
   11958:	fe b7       	in	r31, 0x3e	; 62
   1195a:	31 96       	adiw	r30, 0x01	; 1
   1195c:	82 e3       	ldi	r24, 0x32	; 50
   1195e:	94 e0       	ldi	r25, 0x04	; 4
   11960:	ad b7       	in	r26, 0x3d	; 61
   11962:	be b7       	in	r27, 0x3e	; 62
   11964:	12 96       	adiw	r26, 0x02	; 2
   11966:	9c 93       	st	X, r25
   11968:	8e 93       	st	-X, r24
   1196a:	11 97       	sbiw	r26, 0x01	; 1
   1196c:	8b e1       	ldi	r24, 0x1B	; 27
   1196e:	94 e2       	ldi	r25, 0x24	; 36
   11970:	93 83       	std	Z+3, r25	; 0x03
   11972:	82 83       	std	Z+2, r24	; 0x02
   11974:	c7 01       	movw	r24, r14
   11976:	81 56       	subi	r24, 0x61	; 97
   11978:	99 4f       	sbci	r25, 0xF9	; 249
   1197a:	95 83       	std	Z+5, r25	; 0x05
   1197c:	84 83       	std	Z+4, r24	; 0x04
   1197e:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>

	     //TermID,FIP_ID,Product
		 sprintf_P(strIslandID,PSTR("%d"),TermID);
   11982:	ed b7       	in	r30, 0x3d	; 61
   11984:	fe b7       	in	r31, 0x3e	; 62
   11986:	31 96       	adiw	r30, 0x01	; 1
   11988:	8b ed       	ldi	r24, 0xDB	; 219
   1198a:	99 e0       	ldi	r25, 0x09	; 9
   1198c:	ad b7       	in	r26, 0x3d	; 61
   1198e:	be b7       	in	r27, 0x3e	; 62
   11990:	12 96       	adiw	r26, 0x02	; 2
   11992:	9c 93       	st	X, r25
   11994:	8e 93       	st	-X, r24
   11996:	11 97       	sbiw	r26, 0x01	; 1
   11998:	88 e1       	ldi	r24, 0x18	; 24
   1199a:	94 e2       	ldi	r25, 0x24	; 36
   1199c:	93 83       	std	Z+3, r25	; 0x03
   1199e:	82 83       	std	Z+2, r24	; 0x02
   119a0:	b4 82       	std	Z+4, r11	; 0x04
   119a2:	15 82       	std	Z+5, r1	; 0x05
   119a4:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		 sprintf_P(strFIP_ID,PSTR("%.2d"),xPumpID);
   119a8:	ed b7       	in	r30, 0x3d	; 61
   119aa:	fe b7       	in	r31, 0x3e	; 62
   119ac:	31 96       	adiw	r30, 0x01	; 1
   119ae:	8d e9       	ldi	r24, 0x9D	; 157
   119b0:	98 e0       	ldi	r25, 0x08	; 8
   119b2:	ad b7       	in	r26, 0x3d	; 61
   119b4:	be b7       	in	r27, 0x3e	; 62
   119b6:	12 96       	adiw	r26, 0x02	; 2
   119b8:	9c 93       	st	X, r25
   119ba:	8e 93       	st	-X, r24
   119bc:	11 97       	sbiw	r26, 0x01	; 1
   119be:	83 e1       	ldi	r24, 0x13	; 19
   119c0:	94 e2       	ldi	r25, 0x24	; 36
   119c2:	93 83       	std	Z+3, r25	; 0x03
   119c4:	82 83       	std	Z+2, r24	; 0x02
   119c6:	c4 82       	std	Z+4, r12	; 0x04
   119c8:	15 82       	std	Z+5, r1	; 0x05
   119ca:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	     sprintf_P(strDescription,PSTR("%s"),ProductName);
   119ce:	ed b7       	in	r30, 0x3d	; 61
   119d0:	fe b7       	in	r31, 0x3e	; 62
   119d2:	31 96       	adiw	r30, 0x01	; 1
   119d4:	86 e0       	ldi	r24, 0x06	; 6
   119d6:	99 e0       	ldi	r25, 0x09	; 9
   119d8:	ad b7       	in	r26, 0x3d	; 61
   119da:	be b7       	in	r27, 0x3e	; 62
   119dc:	12 96       	adiw	r26, 0x02	; 2
   119de:	9c 93       	st	X, r25
   119e0:	8e 93       	st	-X, r24
   119e2:	11 97       	sbiw	r26, 0x01	; 1
   119e4:	80 e1       	ldi	r24, 0x10	; 16
   119e6:	94 e2       	ldi	r25, 0x24	; 36
   119e8:	93 83       	std	Z+3, r25	; 0x03
   119ea:	82 83       	std	Z+2, r24	; 0x02
   119ec:	ce 01       	movw	r24, r28
   119ee:	40 96       	adiw	r24, 0x10	; 16
   119f0:	95 83       	std	Z+5, r25	; 0x05
   119f2:	84 83       	std	Z+4, r24	; 0x04
   119f4:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>

		 //Price Volume Money
		 sprintf_P(strPrice,PSTR("%s"),RecPumpData[FIPAddr].Price);
   119f8:	ed b7       	in	r30, 0x3d	; 61
   119fa:	fe b7       	in	r31, 0x3e	; 62
   119fc:	31 96       	adiw	r30, 0x01	; 1
   119fe:	02 e8       	ldi	r16, 0x82	; 130
   11a00:	16 e0       	ldi	r17, 0x06	; 6
   11a02:	ad b7       	in	r26, 0x3d	; 61
   11a04:	be b7       	in	r27, 0x3e	; 62
   11a06:	12 96       	adiw	r26, 0x02	; 2
   11a08:	1c 93       	st	X, r17
   11a0a:	0e 93       	st	-X, r16
   11a0c:	11 97       	sbiw	r26, 0x01	; 1
   11a0e:	8d e0       	ldi	r24, 0x0D	; 13
   11a10:	94 e2       	ldi	r25, 0x24	; 36
   11a12:	93 83       	std	Z+3, r25	; 0x03
   11a14:	82 83       	std	Z+2, r24	; 0x02
   11a16:	c7 01       	movw	r24, r14
   11a18:	88 55       	subi	r24, 0x58	; 88
   11a1a:	99 4f       	sbci	r25, 0xF9	; 249
   11a1c:	95 83       	std	Z+5, r25	; 0x05
   11a1e:	84 83       	std	Z+4, r24	; 0x04
   11a20:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	     sprintf_P(strVolume,PSTR("%s"),RecPumpData[FIPAddr].Volume);
   11a24:	ed b7       	in	r30, 0x3d	; 61
   11a26:	fe b7       	in	r31, 0x3e	; 62
   11a28:	31 96       	adiw	r30, 0x01	; 1
   11a2a:	8a e5       	ldi	r24, 0x5A	; 90
   11a2c:	94 e0       	ldi	r25, 0x04	; 4
   11a2e:	ad b7       	in	r26, 0x3d	; 61
   11a30:	be b7       	in	r27, 0x3e	; 62
   11a32:	12 96       	adiw	r26, 0x02	; 2
   11a34:	9c 93       	st	X, r25
   11a36:	8e 93       	st	-X, r24
   11a38:	11 97       	sbiw	r26, 0x01	; 1
   11a3a:	8a e0       	ldi	r24, 0x0A	; 10
   11a3c:	94 e2       	ldi	r25, 0x24	; 36
   11a3e:	93 83       	std	Z+3, r25	; 0x03
   11a40:	82 83       	std	Z+2, r24	; 0x02
   11a42:	c7 01       	movw	r24, r14
   11a44:	81 55       	subi	r24, 0x51	; 81
   11a46:	99 4f       	sbci	r25, 0xF9	; 249
   11a48:	95 83       	std	Z+5, r25	; 0x05
   11a4a:	84 83       	std	Z+4, r24	; 0x04
   11a4c:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		 sprintf_P(strAmount,PSTR("%s"),RecPumpData[FIPAddr].Money);
   11a50:	ed b7       	in	r30, 0x3d	; 61
   11a52:	fe b7       	in	r31, 0x3e	; 62
   11a54:	31 96       	adiw	r30, 0x01	; 1
   11a56:	87 e9       	ldi	r24, 0x97	; 151
   11a58:	9c e0       	ldi	r25, 0x0C	; 12
   11a5a:	ad b7       	in	r26, 0x3d	; 61
   11a5c:	be b7       	in	r27, 0x3e	; 62
   11a5e:	12 96       	adiw	r26, 0x02	; 2
   11a60:	9c 93       	st	X, r25
   11a62:	8e 93       	st	-X, r24
   11a64:	11 97       	sbiw	r26, 0x01	; 1
   11a66:	87 e0       	ldi	r24, 0x07	; 7
   11a68:	94 e2       	ldi	r25, 0x24	; 36
   11a6a:	93 83       	std	Z+3, r25	; 0x03
   11a6c:	82 83       	std	Z+2, r24	; 0x02
   11a6e:	c7 01       	movw	r24, r14
   11a70:	88 54       	subi	r24, 0x48	; 72
   11a72:	99 4f       	sbci	r25, 0xF9	; 249
   11a74:	95 83       	std	Z+5, r25	; 0x05
   11a76:	84 83       	std	Z+4, r24	; 0x04
   11a78:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>

		 
		 //Genius4.23 ->Enhanced Multiplication for 6 Digit Pump
		 //Read Price Configuration
		 if (iProdID>0) eeprom_read_block((void*) &strConfUnitPrice, (const void*) &DefProductPrice[iProdID-1],sizeof(DefProductPrice[iProdID-1]));
   11a7c:	ed b7       	in	r30, 0x3d	; 61
   11a7e:	fe b7       	in	r31, 0x3e	; 62
   11a80:	36 96       	adiw	r30, 0x06	; 6
   11a82:	0f b6       	in	r0, 0x3f	; 63
   11a84:	f8 94       	cli
   11a86:	fe bf       	out	0x3e, r31	; 62
   11a88:	0f be       	out	0x3f, r0	; 63
   11a8a:	ed bf       	out	0x3d, r30	; 61
   11a8c:	ce 01       	movw	r24, r28
   11a8e:	06 96       	adiw	r24, 0x06	; 6
   11a90:	dd 20       	and	r13, r13
   11a92:	99 f0       	breq	.+38     	; 0x11aba <GenerateStandaloneTransData+0x2ba>
   11a94:	2d 2d       	mov	r18, r13
   11a96:	30 e0       	ldi	r19, 0x00	; 0
   11a98:	21 50       	subi	r18, 0x01	; 1
   11a9a:	30 40       	sbci	r19, 0x00	; 0
   11a9c:	b9 01       	movw	r22, r18
   11a9e:	e3 e0       	ldi	r30, 0x03	; 3
   11aa0:	66 0f       	add	r22, r22
   11aa2:	77 1f       	adc	r23, r23
   11aa4:	ea 95       	dec	r30
   11aa6:	e1 f7       	brne	.-8      	; 0x11aa0 <GenerateStandaloneTransData+0x2a0>
   11aa8:	62 0f       	add	r22, r18
   11aaa:	73 1f       	adc	r23, r19
   11aac:	6a 57       	subi	r22, 0x7A	; 122
   11aae:	7f 4f       	sbci	r23, 0xFF	; 255
   11ab0:	49 e0       	ldi	r20, 0x09	; 9
   11ab2:	50 e0       	ldi	r21, 0x00	; 0
   11ab4:	0e 94 56 aa 	call	0x154ac	; 0x154ac <__eerd_block_m128>
   11ab8:	1c c0       	rjmp	.+56     	; 0x11af2 <GenerateStandaloneTransData+0x2f2>
		 else sprintf_P(strConfUnitPrice,PSTR("%s"),strPrice);
   11aba:	00 d0       	rcall	.+0      	; 0x11abc <GenerateStandaloneTransData+0x2bc>
   11abc:	00 d0       	rcall	.+0      	; 0x11abe <GenerateStandaloneTransData+0x2be>
   11abe:	00 d0       	rcall	.+0      	; 0x11ac0 <GenerateStandaloneTransData+0x2c0>
   11ac0:	ed b7       	in	r30, 0x3d	; 61
   11ac2:	fe b7       	in	r31, 0x3e	; 62
   11ac4:	31 96       	adiw	r30, 0x01	; 1
   11ac6:	ad b7       	in	r26, 0x3d	; 61
   11ac8:	be b7       	in	r27, 0x3e	; 62
   11aca:	12 96       	adiw	r26, 0x02	; 2
   11acc:	9c 93       	st	X, r25
   11ace:	8e 93       	st	-X, r24
   11ad0:	11 97       	sbiw	r26, 0x01	; 1
   11ad2:	84 e0       	ldi	r24, 0x04	; 4
   11ad4:	94 e2       	ldi	r25, 0x24	; 36
   11ad6:	93 83       	std	Z+3, r25	; 0x03
   11ad8:	82 83       	std	Z+2, r24	; 0x02
   11ada:	15 83       	std	Z+5, r17	; 0x05
   11adc:	04 83       	std	Z+4, r16	; 0x04
   11ade:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
   11ae2:	ed b7       	in	r30, 0x3d	; 61
   11ae4:	fe b7       	in	r31, 0x3e	; 62
   11ae6:	36 96       	adiw	r30, 0x06	; 6
   11ae8:	0f b6       	in	r0, 0x3f	; 63
   11aea:	f8 94       	cli
   11aec:	fe bf       	out	0x3e, r31	; 62
   11aee:	0f be       	out	0x3f, r0	; 63
   11af0:	ed bf       	out	0x3d, r30	; 61

		 PumpPrice=atoi(strPrice);
   11af2:	82 e8       	ldi	r24, 0x82	; 130
   11af4:	96 e0       	ldi	r25, 0x06	; 6
   11af6:	0e 94 e0 a7 	call	0x14fc0	; 0x14fc0 <atoi>
   11afa:	7c 01       	movw	r14, r24
		 ConfigPrice=atoi(strConfUnitPrice);
   11afc:	8e 01       	movw	r16, r28
   11afe:	0a 5f       	subi	r16, 0xFA	; 250
   11b00:	1f 4f       	sbci	r17, 0xFF	; 255
   11b02:	c8 01       	movw	r24, r16
   11b04:	0e 94 e0 a7 	call	0x14fc0	; 0x14fc0 <atoi>

		 if ((strlen(strConfUnitPrice)>=5)&&(ConfigPrice>PumpPrice)){//if Price Configured > Pump Price
   11b08:	f8 01       	movw	r30, r16
   11b0a:	01 90       	ld	r0, Z+
   11b0c:	00 20       	and	r0, r0
   11b0e:	e9 f7       	brne	.-6      	; 0x11b0a <GenerateStandaloneTransData+0x30a>
   11b10:	31 97       	sbiw	r30, 0x01	; 1
   11b12:	e0 1b       	sub	r30, r16
   11b14:	f1 0b       	sbc	r31, r17
   11b16:	e5 30       	cpi	r30, 0x05	; 5
   11b18:	f1 05       	cpc	r31, r1
   11b1a:	30 f1       	brcs	.+76     	; 0x11b68 <GenerateStandaloneTransData+0x368>
   11b1c:	e8 16       	cp	r14, r24
   11b1e:	f9 06       	cpc	r15, r25
   11b20:	18 f5       	brcc	.+70     	; 0x11b68 <GenerateStandaloneTransData+0x368>
		     sprintf_P(strConst,PSTR("10"));
   11b22:	00 d0       	rcall	.+0      	; 0x11b24 <GenerateStandaloneTransData+0x324>
   11b24:	00 d0       	rcall	.+0      	; 0x11b26 <GenerateStandaloneTransData+0x326>
   11b26:	8e 01       	movw	r16, r28
   11b28:	0f 5f       	subi	r16, 0xFF	; 255
   11b2a:	1f 4f       	sbci	r17, 0xFF	; 255
   11b2c:	ad b7       	in	r26, 0x3d	; 61
   11b2e:	be b7       	in	r27, 0x3e	; 62
   11b30:	12 96       	adiw	r26, 0x02	; 2
   11b32:	1c 93       	st	X, r17
   11b34:	0e 93       	st	-X, r16
   11b36:	11 97       	sbiw	r26, 0x01	; 1
   11b38:	81 e0       	ldi	r24, 0x01	; 1
   11b3a:	94 e2       	ldi	r25, 0x24	; 36
   11b3c:	14 96       	adiw	r26, 0x04	; 4
   11b3e:	9c 93       	st	X, r25
   11b40:	8e 93       	st	-X, r24
   11b42:	13 97       	sbiw	r26, 0x03	; 3
   11b44:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		     CalcMultiply(strPrice,strConst,strPrice);
   11b48:	0f 90       	pop	r0
   11b4a:	0f 90       	pop	r0
   11b4c:	0f 90       	pop	r0
   11b4e:	0f 90       	pop	r0
   11b50:	82 e8       	ldi	r24, 0x82	; 130
   11b52:	96 e0       	ldi	r25, 0x06	; 6
   11b54:	b8 01       	movw	r22, r16
   11b56:	ac 01       	movw	r20, r24
   11b58:	0e 94 6b 65 	call	0xcad6	; 0xcad6 <CalcMultiply>
			 CalcMultiply(strAmount,strConst,strAmount);
   11b5c:	87 e9       	ldi	r24, 0x97	; 151
   11b5e:	9c e0       	ldi	r25, 0x0C	; 12
   11b60:	b8 01       	movw	r22, r16
   11b62:	ac 01       	movw	r20, r24
   11b64:	0e 94 6b 65 	call	0xcad6	; 0xcad6 <CalcMultiply>
		 }       

		 //Formating Decimal Genius 4.32 Previus In StoreStandaloneTransData

		 FormatPrice(strPrice);
   11b68:	82 e8       	ldi	r24, 0x82	; 130
   11b6a:	96 e0       	ldi	r25, 0x06	; 6
   11b6c:	0e 94 da 2c 	call	0x59b4	; 0x59b4 <FormatPrice>
		 FormatVolume(strVolume);
   11b70:	8a e5       	ldi	r24, 0x5A	; 90
   11b72:	94 e0       	ldi	r25, 0x04	; 4
   11b74:	0e 94 be 2c 	call	0x597c	; 0x597c <FormatVolume>
		 FormatMoney(strAmount);		 
   11b78:	87 e9       	ldi	r24, 0x97	; 151
   11b7a:	9c e0       	ldi	r25, 0x0C	; 12
   11b7c:	0e 94 cc 2c 	call	0x5998	; 0x5998 <FormatMoney>

		 MOPType=MOP_CASH;
   11b80:	10 92 97 02 	sts	0x0297, r1
	     IsPrinting=True;	 
   11b84:	81 e0       	ldi	r24, 0x01	; 1
   11b86:	80 93 8b 02 	sts	0x028B, r24
   11b8a:	01 c0       	rjmp	.+2      	; 0x11b8e <GenerateStandaloneTransData+0x38e>


char GenerateStandaloneTransData(char xPumpID, char *PNozzle){//[1,2,3..16]->[1,2,3..0]
	 char ProductName[15];//,strPPU[7],strPVolume[8],strPMoney[8];
     char iPumpID,iProdID=0,TermID;//,PPumpID[8];
     char Result=GS_NONE;
   11b8c:	80 e0       	ldi	r24, 0x00	; 0
	 }
	 //ProductName	 
	 //iProdID=PNozzle[RecPumpData[iPumpID].Nozzle];
	 //BAsedOnGrade
   return Result;
}
   11b8e:	6e 96       	adiw	r28, 0x1e	; 30
   11b90:	0f b6       	in	r0, 0x3f	; 63
   11b92:	f8 94       	cli
   11b94:	de bf       	out	0x3e, r29	; 62
   11b96:	0f be       	out	0x3f, r0	; 63
   11b98:	cd bf       	out	0x3d, r28	; 61
   11b9a:	cf 91       	pop	r28
   11b9c:	df 91       	pop	r29
   11b9e:	1f 91       	pop	r17
   11ba0:	0f 91       	pop	r16
   11ba2:	ff 90       	pop	r15
   11ba4:	ef 90       	pop	r14
   11ba6:	df 90       	pop	r13
   11ba8:	cf 90       	pop	r12
   11baa:	bf 90       	pop	r11
   11bac:	08 95       	ret

00011bae <PrintStandalone>:
     char Result=PS_NONE;

   return Result;
}

char PrintStandalone(char FIPAddr,char IsReprint){
   11bae:	ef 92       	push	r14
   11bb0:	ff 92       	push	r15
   11bb2:	0f 93       	push	r16
   11bb4:	1f 93       	push	r17
   11bb6:	df 93       	push	r29
   11bb8:	cf 93       	push	r28
   11bba:	00 d0       	rcall	.+0      	; 0x11bbc <PrintStandalone+0xe>
   11bbc:	00 d0       	rcall	.+0      	; 0x11bbe <PrintStandalone+0x10>
   11bbe:	00 d0       	rcall	.+0      	; 0x11bc0 <PrintStandalone+0x12>
   11bc0:	cd b7       	in	r28, 0x3d	; 61
   11bc2:	de b7       	in	r29, 0x3e	; 62
   11bc4:	08 2f       	mov	r16, r24
   11bc6:	f6 2e       	mov	r15, r22
	 char LFIPAddr;
	      
	 Result=PS_NO_DATA;

//	 eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap, 8);
	 iPumpID=GetPumpID(FIPAddr);//PPumpID[FIPAddr-1];
   11bc8:	0e 94 01 6e 	call	0xdc02	; 0xdc02 <GetPumpID>
   11bcc:	e8 2e       	mov	r14, r24
     LFIPAddr=GetFIPAddr(iPumpID);
   11bce:	0e 94 50 6e 	call	0xdca0	; 0xdca0 <GetFIPAddr>

     if (LFIPAddr>0){
   11bd2:	88 23       	and	r24, r24
   11bd4:	b1 f1       	breq	.+108    	; 0x11c42 <PrintStandalone+0x94>
	     LFIPAddr=LFIPAddr-1;
	     if ((IsReprint==True)||(iPumpID>0)&&(strPumpStatus[LFIPAddr]==GetPumpStatusLabel(PS_PRINT_READY))){    	 
   11bd6:	9f 2d       	mov	r25, r15
   11bd8:	91 30       	cpi	r25, 0x01	; 1
   11bda:	51 f0       	breq	.+20     	; 0x11bf0 <PrintStandalone+0x42>
   11bdc:	ee 20       	and	r14, r14
   11bde:	89 f1       	breq	.+98     	; 0x11c42 <PrintStandalone+0x94>
//	 eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap, 8);
	 iPumpID=GetPumpID(FIPAddr);//PPumpID[FIPAddr-1];
     LFIPAddr=GetFIPAddr(iPumpID);

     if (LFIPAddr>0){
	     LFIPAddr=LFIPAddr-1;
   11be0:	81 50       	subi	r24, 0x01	; 1
	     if ((IsReprint==True)||(iPumpID>0)&&(strPumpStatus[LFIPAddr]==GetPumpStatusLabel(PS_PRINT_READY))){    	 
   11be2:	e8 2f       	mov	r30, r24
   11be4:	f0 e0       	ldi	r31, 0x00	; 0
   11be6:	ee 5f       	subi	r30, 0xFE	; 254
   11be8:	fe 4f       	sbci	r31, 0xFE	; 254
   11bea:	80 81       	ld	r24, Z
   11bec:	80 35       	cpi	r24, 0x50	; 80
   11bee:	49 f5       	brne	.+82     	; 0x11c42 <PrintStandalone+0x94>
		     eeprom_read_block((void*) &PProductID, (const void*) &DefNozzleMap[FIPAddr-1], 6);		 
   11bf0:	10 e0       	ldi	r17, 0x00	; 0
   11bf2:	c8 01       	movw	r24, r16
   11bf4:	01 97       	sbiw	r24, 0x01	; 1
   11bf6:	9c 01       	movw	r18, r24
   11bf8:	22 0f       	add	r18, r18
   11bfa:	33 1f       	adc	r19, r19
   11bfc:	28 0f       	add	r18, r24
   11bfe:	39 1f       	adc	r19, r25
   11c00:	22 0f       	add	r18, r18
   11c02:	33 1f       	adc	r19, r19
   11c04:	2a 5a       	subi	r18, 0xAA	; 170
   11c06:	3f 4f       	sbci	r19, 0xFF	; 255
   11c08:	ce 01       	movw	r24, r28
   11c0a:	01 96       	adiw	r24, 0x01	; 1
   11c0c:	b9 01       	movw	r22, r18
   11c0e:	46 e0       	ldi	r20, 0x06	; 6
   11c10:	50 e0       	ldi	r21, 0x00	; 0
   11c12:	0e 94 56 aa 	call	0x154ac	; 0x154ac <__eerd_block_m128>
		     if (((ReprintReady[FIPAddr-1]==True))||(IsReprint==False)){
   11c16:	f8 01       	movw	r30, r16
   11c18:	ee 5e       	subi	r30, 0xEE	; 238
   11c1a:	fe 4f       	sbci	r31, 0xFE	; 254
   11c1c:	80 81       	ld	r24, Z
   11c1e:	81 30       	cpi	r24, 0x01	; 1
   11c20:	19 f0       	breq	.+6      	; 0x11c28 <PrintStandalone+0x7a>
   11c22:	ff 20       	and	r15, r15
   11c24:	31 f0       	breq	.+12     	; 0x11c32 <PrintStandalone+0x84>
   11c26:	0d c0       	rjmp	.+26     	; 0x11c42 <PrintStandalone+0x94>
			       if (IsReprint==True)IsReprintTicket=True;
   11c28:	8f 2d       	mov	r24, r15
   11c2a:	81 30       	cpi	r24, 0x01	; 1
   11c2c:	11 f4       	brne	.+4      	; 0x11c32 <PrintStandalone+0x84>
   11c2e:	f0 92 5d 02 	sts	0x025D, r15
			       GenerateStandaloneTransData(iPumpID,PProductID);		 			   
   11c32:	8e 2d       	mov	r24, r14
   11c34:	be 01       	movw	r22, r28
   11c36:	6f 5f       	subi	r22, 0xFF	; 255
   11c38:	7f 4f       	sbci	r23, 0xFF	; 255
   11c3a:	0e 94 00 8c 	call	0x11800	; 0x11800 <GenerateStandaloneTransData>
	               Result=PS_PRINTED;
   11c3e:	81 e1       	ldi	r24, 0x11	; 17
   11c40:	01 c0       	rjmp	.+2      	; 0x11c44 <PrintStandalone+0x96>
char PrintStandalone(char FIPAddr,char IsReprint){
     char iPumpID,Result=PS_NONE;
	 char PProductID[6];//,PPumpID[8];
	 char LFIPAddr;
	      
	 Result=PS_NO_DATA;
   11c42:	82 e1       	ldi	r24, 0x12	; 18
			 }//else Result=PS_NO_DATA;
		 }
		 //else Result=PS_NO_DATA;    		    
	 }	
   return Result;
}
   11c44:	26 96       	adiw	r28, 0x06	; 6
   11c46:	0f b6       	in	r0, 0x3f	; 63
   11c48:	f8 94       	cli
   11c4a:	de bf       	out	0x3e, r29	; 62
   11c4c:	0f be       	out	0x3f, r0	; 63
   11c4e:	cd bf       	out	0x3d, r28	; 61
   11c50:	cf 91       	pop	r28
   11c52:	df 91       	pop	r29
   11c54:	1f 91       	pop	r17
   11c56:	0f 91       	pop	r16
   11c58:	ff 90       	pop	r15
   11c5a:	ef 90       	pop	r14
   11c5c:	08 95       	ret

00011c5e <FMenuTicket>:
	    StrResult[2]='0'+Val;
	    StrResult[3]=0;
		}   
}

char FMenuTicket(){
   11c5e:	ef 92       	push	r14
   11c60:	0f 93       	push	r16
   11c62:	1f 93       	push	r17
   11c64:	df 93       	push	r29
   11c66:	cf 93       	push	r28
   11c68:	cd b7       	in	r28, 0x3d	; 61
   11c6a:	de b7       	in	r29, 0x3e	; 62
   11c6c:	64 97       	sbiw	r28, 0x14	; 20
   11c6e:	0f b6       	in	r0, 0x3f	; 63
   11c70:	f8 94       	cli
   11c72:	de bf       	out	0x3e, r29	; 62
   11c74:	0f be       	out	0x3f, r0	; 63
   11c76:	cd bf       	out	0x3d, r28	; 61
static unsigned int iLoop=0;
     char uiResult=USER_NONE,KeyPressed,KeyChar;
     char Result=MENU_NONE,lcdteks[20];

    Result=MENU_NONE;   
    switch(stMenuTicket){
   11c78:	80 91 ec 02 	lds	r24, 0x02EC
   11c7c:	86 30       	cpi	r24, 0x06	; 6
   11c7e:	09 f4       	brne	.+2      	; 0x11c82 <FMenuTicket+0x24>
   11c80:	be c0       	rjmp	.+380    	; 0x11dfe <FMenuTicket+0x1a0>
   11c82:	87 30       	cpi	r24, 0x07	; 7
   11c84:	88 f4       	brcc	.+34     	; 0x11ca8 <FMenuTicket+0x4a>
   11c86:	82 30       	cpi	r24, 0x02	; 2
   11c88:	e9 f1       	breq	.+122    	; 0x11d04 <FMenuTicket+0xa6>
   11c8a:	83 30       	cpi	r24, 0x03	; 3
   11c8c:	30 f4       	brcc	.+12     	; 0x11c9a <FMenuTicket+0x3c>
   11c8e:	88 23       	and	r24, r24
   11c90:	09 f1       	breq	.+66     	; 0x11cd4 <FMenuTicket+0x76>
   11c92:	81 30       	cpi	r24, 0x01	; 1
   11c94:	09 f0       	breq	.+2      	; 0x11c98 <FMenuTicket+0x3a>
   11c96:	22 c1       	rjmp	.+580    	; 0x11edc <FMenuTicket+0x27e>
   11c98:	1f c0       	rjmp	.+62     	; 0x11cd8 <FMenuTicket+0x7a>
   11c9a:	84 30       	cpi	r24, 0x04	; 4
   11c9c:	09 f4       	brne	.+2      	; 0x11ca0 <FMenuTicket+0x42>
   11c9e:	87 c0       	rjmp	.+270    	; 0x11dae <FMenuTicket+0x150>
   11ca0:	85 30       	cpi	r24, 0x05	; 5
   11ca2:	08 f0       	brcs	.+2      	; 0x11ca6 <FMenuTicket+0x48>
   11ca4:	a6 c0       	rjmp	.+332    	; 0x11df2 <FMenuTicket+0x194>
   11ca6:	4d c0       	rjmp	.+154    	; 0x11d42 <FMenuTicket+0xe4>
   11ca8:	89 30       	cpi	r24, 0x09	; 9
   11caa:	09 f4       	brne	.+2      	; 0x11cae <FMenuTicket+0x50>
   11cac:	f4 c0       	rjmp	.+488    	; 0x11e96 <FMenuTicket+0x238>
   11cae:	8a 30       	cpi	r24, 0x0A	; 10
   11cb0:	38 f4       	brcc	.+14     	; 0x11cc0 <FMenuTicket+0x62>
   11cb2:	87 30       	cpi	r24, 0x07	; 7
   11cb4:	09 f4       	brne	.+2      	; 0x11cb8 <FMenuTicket+0x5a>
   11cb6:	d2 c0       	rjmp	.+420    	; 0x11e5c <FMenuTicket+0x1fe>
   11cb8:	88 30       	cpi	r24, 0x08	; 8
   11cba:	09 f0       	breq	.+2      	; 0x11cbe <FMenuTicket+0x60>
   11cbc:	0f c1       	rjmp	.+542    	; 0x11edc <FMenuTicket+0x27e>
   11cbe:	be c0       	rjmp	.+380    	; 0x11e3c <FMenuTicket+0x1de>
   11cc0:	8b 30       	cpi	r24, 0x0B	; 11
   11cc2:	09 f4       	brne	.+2      	; 0x11cc6 <FMenuTicket+0x68>
   11cc4:	ee c0       	rjmp	.+476    	; 0x11ea2 <FMenuTicket+0x244>
   11cc6:	8b 30       	cpi	r24, 0x0B	; 11
   11cc8:	08 f4       	brcc	.+2      	; 0x11ccc <FMenuTicket+0x6e>
   11cca:	00 c1       	rjmp	.+512    	; 0x11ecc <FMenuTicket+0x26e>
   11ccc:	8c 30       	cpi	r24, 0x0C	; 12
   11cce:	09 f0       	breq	.+2      	; 0x11cd2 <FMenuTicket+0x74>
   11cd0:	05 c1       	rjmp	.+522    	; 0x11edc <FMenuTicket+0x27e>
   11cd2:	00 c1       	rjmp	.+512    	; 0x11ed4 <FMenuTicket+0x276>
	case mtInit:
		 stMenuTicket=mtPlatNo;
   11cd4:	81 e0       	ldi	r24, 0x01	; 1
   11cd6:	fb c0       	rjmp	.+502    	; 0x11ece <FMenuTicket+0x270>
	     break;
    case mtPlatNo:
	     lcd_clear();
   11cd8:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
	     lcd_printf(1,1,PSTR("Input Plat No: "));
   11cdc:	81 e0       	ldi	r24, 0x01	; 1
   11cde:	61 e0       	ldi	r22, 0x01	; 1
   11ce0:	43 e2       	ldi	r20, 0x23	; 35
   11ce2:	5c e0       	ldi	r21, 0x0C	; 12
   11ce4:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
	     lcd_printf(2,1,PSTR("_"));
   11ce8:	82 e0       	ldi	r24, 0x02	; 2
   11cea:	61 e0       	ldi	r22, 0x01	; 1
   11cec:	41 e2       	ldi	r20, 0x21	; 33
   11cee:	5c e0       	ldi	r21, 0x0C	; 12
   11cf0:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
	     lcd_printf(4,1,PSTR("[*]Cancel  [#]Enter "));
   11cf4:	84 e0       	ldi	r24, 0x04	; 4
   11cf6:	61 e0       	ldi	r22, 0x01	; 1
   11cf8:	4c e0       	ldi	r20, 0x0C	; 12
   11cfa:	5c e0       	ldi	r21, 0x0C	; 12
   11cfc:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		 uiResult=USER_NONE;
		 stMenuTicket=mtInputPlatNo;
   11d00:	82 e0       	ldi	r24, 0x02	; 2
   11d02:	e5 c0       	rjmp	.+458    	; 0x11ece <FMenuTicket+0x270>
	     break;
    case mtInputPlatNo:
	     uiResult=UserInput(UI_ALPHANUM_R,2,1,strLicPlate,0,10);
   11d04:	83 e0       	ldi	r24, 0x03	; 3
   11d06:	62 e0       	ldi	r22, 0x02	; 2
   11d08:	41 e0       	ldi	r20, 0x01	; 1
   11d0a:	2e ed       	ldi	r18, 0xDE	; 222
   11d0c:	39 e0       	ldi	r19, 0x09	; 9
   11d0e:	00 e0       	ldi	r16, 0x00	; 0
   11d10:	10 e0       	ldi	r17, 0x00	; 0
   11d12:	9a e0       	ldi	r25, 0x0A	; 10
   11d14:	e9 2e       	mov	r14, r25
   11d16:	0e 94 d3 39 	call	0x73a6	; 0x73a6 <UserInput>
		 if (uiResult==USER_OK)stMenuTicket=mtOdometer;
   11d1a:	83 30       	cpi	r24, 0x03	; 3
   11d1c:	09 f4       	brne	.+2      	; 0x11d20 <FMenuTicket+0xc2>
   11d1e:	d7 c0       	rjmp	.+430    	; 0x11ece <FMenuTicket+0x270>
		 else
		 if (uiResult==USER_CANCEL)stMenuTicket=mtExitMenuTicket;
   11d20:	81 30       	cpi	r24, 0x01	; 1
   11d22:	09 f4       	brne	.+2      	; 0x11d26 <FMenuTicket+0xc8>
   11d24:	d3 c0       	rjmp	.+422    	; 0x11ecc <FMenuTicket+0x26e>
         else
		 if (uiResult==USER_ENTRY)lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
   11d26:	84 30       	cpi	r24, 0x04	; 4
   11d28:	21 f4       	brne	.+8      	; 0x11d32 <FMenuTicket+0xd4>
   11d2a:	61 e0       	ldi	r22, 0x01	; 1
   11d2c:	47 ef       	ldi	r20, 0xF7	; 247
   11d2e:	5b e0       	ldi	r21, 0x0B	; 11
   11d30:	55 c0       	rjmp	.+170    	; 0x11ddc <FMenuTicket+0x17e>
		 else
		 if (uiResult==USER_NO_DATA)lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
   11d32:	85 30       	cpi	r24, 0x05	; 5
   11d34:	09 f0       	breq	.+2      	; 0x11d38 <FMenuTicket+0xda>
   11d36:	d2 c0       	rjmp	.+420    	; 0x11edc <FMenuTicket+0x27e>
   11d38:	84 e0       	ldi	r24, 0x04	; 4
   11d3a:	61 e0       	ldi	r22, 0x01	; 1
   11d3c:	42 ee       	ldi	r20, 0xE2	; 226
   11d3e:	5b e0       	ldi	r21, 0x0B	; 11
   11d40:	4d c0       	rjmp	.+154    	; 0x11ddc <FMenuTicket+0x17e>
	     break;
    case mtOdometer:
	     lcd_clear();
   11d42:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
		 sprintf_P(lcdteks,PSTR("Plat No: %s "),strLicPlate);
   11d46:	00 d0       	rcall	.+0      	; 0x11d48 <FMenuTicket+0xea>
   11d48:	00 d0       	rcall	.+0      	; 0x11d4a <FMenuTicket+0xec>
   11d4a:	00 d0       	rcall	.+0      	; 0x11d4c <FMenuTicket+0xee>
   11d4c:	ed b7       	in	r30, 0x3d	; 61
   11d4e:	fe b7       	in	r31, 0x3e	; 62
   11d50:	31 96       	adiw	r30, 0x01	; 1
   11d52:	8e 01       	movw	r16, r28
   11d54:	0f 5f       	subi	r16, 0xFF	; 255
   11d56:	1f 4f       	sbci	r17, 0xFF	; 255
   11d58:	ad b7       	in	r26, 0x3d	; 61
   11d5a:	be b7       	in	r27, 0x3e	; 62
   11d5c:	12 96       	adiw	r26, 0x02	; 2
   11d5e:	1c 93       	st	X, r17
   11d60:	0e 93       	st	-X, r16
   11d62:	11 97       	sbiw	r26, 0x01	; 1
   11d64:	85 ed       	ldi	r24, 0xD5	; 213
   11d66:	9b e0       	ldi	r25, 0x0B	; 11
   11d68:	93 83       	std	Z+3, r25	; 0x03
   11d6a:	82 83       	std	Z+2, r24	; 0x02
   11d6c:	8e ed       	ldi	r24, 0xDE	; 222
   11d6e:	99 e0       	ldi	r25, 0x09	; 9
   11d70:	95 83       	std	Z+5, r25	; 0x05
   11d72:	84 83       	std	Z+4, r24	; 0x04
   11d74:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	     lcd_print(1,1,lcdteks);
   11d78:	8d b7       	in	r24, 0x3d	; 61
   11d7a:	9e b7       	in	r25, 0x3e	; 62
   11d7c:	06 96       	adiw	r24, 0x06	; 6
   11d7e:	0f b6       	in	r0, 0x3f	; 63
   11d80:	f8 94       	cli
   11d82:	9e bf       	out	0x3e, r25	; 62
   11d84:	0f be       	out	0x3f, r0	; 63
   11d86:	8d bf       	out	0x3d, r24	; 61
   11d88:	81 e0       	ldi	r24, 0x01	; 1
   11d8a:	61 e0       	ldi	r22, 0x01	; 1
   11d8c:	a8 01       	movw	r20, r16
   11d8e:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
	     lcd_printf(2,1,PSTR("Odometer:_ "));
   11d92:	82 e0       	ldi	r24, 0x02	; 2
   11d94:	61 e0       	ldi	r22, 0x01	; 1
   11d96:	49 ec       	ldi	r20, 0xC9	; 201
   11d98:	5b e0       	ldi	r21, 0x0B	; 11
   11d9a:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
	     lcd_printf(4,1,PSTR("[*]Cancel  [#]Enter "));
   11d9e:	84 e0       	ldi	r24, 0x04	; 4
   11da0:	61 e0       	ldi	r22, 0x01	; 1
   11da2:	44 eb       	ldi	r20, 0xB4	; 180
   11da4:	5b e0       	ldi	r21, 0x0B	; 11
   11da6:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		 uiResult=USER_NONE;
		 stMenuTicket=mtInputOdometer;
   11daa:	84 e0       	ldi	r24, 0x04	; 4
   11dac:	90 c0       	rjmp	.+288    	; 0x11ece <FMenuTicket+0x270>
	     break;
    case mtInputOdometer:
	     uiResult=UserInput(UI_NUMBER_R,2,10,strOdometer,0,10);
   11dae:	81 e0       	ldi	r24, 0x01	; 1
   11db0:	62 e0       	ldi	r22, 0x02	; 2
   11db2:	4a e0       	ldi	r20, 0x0A	; 10
   11db4:	27 ea       	ldi	r18, 0xA7	; 167
   11db6:	34 e0       	ldi	r19, 0x04	; 4
   11db8:	00 e0       	ldi	r16, 0x00	; 0
   11dba:	10 e0       	ldi	r17, 0x00	; 0
   11dbc:	ba e0       	ldi	r27, 0x0A	; 10
   11dbe:	eb 2e       	mov	r14, r27
   11dc0:	0e 94 d3 39 	call	0x73a6	; 0x73a6 <UserInput>
		 if (uiResult==USER_OK)stMenuTicket=mtFIP;
   11dc4:	83 30       	cpi	r24, 0x03	; 3
   11dc6:	11 f4       	brne	.+4      	; 0x11dcc <FMenuTicket+0x16e>
   11dc8:	85 e0       	ldi	r24, 0x05	; 5
   11dca:	81 c0       	rjmp	.+258    	; 0x11ece <FMenuTicket+0x270>
		 else
		 if (uiResult==USER_CANCEL)stMenuTicket=mtPlatNo;
   11dcc:	81 30       	cpi	r24, 0x01	; 1
   11dce:	09 f4       	brne	.+2      	; 0x11dd2 <FMenuTicket+0x174>
   11dd0:	7e c0       	rjmp	.+252    	; 0x11ece <FMenuTicket+0x270>
		 else
		 if (uiResult==USER_ENTRY)lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
   11dd2:	84 30       	cpi	r24, 0x04	; 4
   11dd4:	31 f4       	brne	.+12     	; 0x11de2 <FMenuTicket+0x184>
   11dd6:	61 e0       	ldi	r22, 0x01	; 1
   11dd8:	4f e9       	ldi	r20, 0x9F	; 159
   11dda:	5b e0       	ldi	r21, 0x0B	; 11
   11ddc:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
   11de0:	7d c0       	rjmp	.+250    	; 0x11edc <FMenuTicket+0x27e>
		 else
		 if (uiResult==USER_NO_DATA)lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
   11de2:	85 30       	cpi	r24, 0x05	; 5
   11de4:	09 f0       	breq	.+2      	; 0x11de8 <FMenuTicket+0x18a>
   11de6:	7a c0       	rjmp	.+244    	; 0x11edc <FMenuTicket+0x27e>
   11de8:	84 e0       	ldi	r24, 0x04	; 4
   11dea:	61 e0       	ldi	r22, 0x01	; 1
   11dec:	4a e8       	ldi	r20, 0x8A	; 138
   11dee:	5b e0       	ldi	r21, 0x0B	; 11
   11df0:	f5 cf       	rjmp	.-22     	; 0x11ddc <FMenuTicket+0x17e>
	     break;
    case mtFIP:
	     lcd_clear();
   11df2:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
		 _scr_pump();
   11df6:	0e 94 74 2e 	call	0x5ce8	; 0x5ce8 <_scr_pump>
		 stMenuTicket=mtInputFIP;
   11dfa:	86 e0       	ldi	r24, 0x06	; 6
   11dfc:	68 c0       	rjmp	.+208    	; 0x11ece <FMenuTicket+0x270>
	     break;
    case mtInputFIP:
	     KeyPressed=_key_scan(1);
   11dfe:	81 e0       	ldi	r24, 0x01	; 1
   11e00:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <_key_scan>
   11e04:	08 2f       	mov	r16, r24
		 KeyChar=_key_btn(KeyPressed);
   11e06:	0e 94 49 a3 	call	0x14692	; 0x14692 <_key_btn>
		 if ((KeyChar>='1')&&(KeyChar<='8')){
   11e0a:	98 2f       	mov	r25, r24
   11e0c:	91 53       	subi	r25, 0x31	; 49
   11e0e:	98 30       	cpi	r25, 0x08	; 8
   11e10:	40 f4       	brcc	.+16     	; 0x11e22 <FMenuTicket+0x1c4>
		     FIP_Used=KeyChar-'0';
   11e12:	80 53       	subi	r24, 0x30	; 48
   11e14:	80 93 e9 02 	sts	0x02E9, r24
			 zFIP_Used=FIP_Used;
   11e18:	80 93 e8 02 	sts	0x02E8, r24
		     stMenuTicket=mtSendMsg98;
   11e1c:	87 e0       	ldi	r24, 0x07	; 7
   11e1e:	80 93 ec 02 	sts	0x02EC, r24
		 }
		 if (KeyPressed==_KEY_CANCEL){
   11e22:	07 3e       	cpi	r16, 0xE7	; 231
   11e24:	11 f4       	brne	.+4      	; 0x11e2a <FMenuTicket+0x1cc>
             stMenuTicket=mtOdometer;
   11e26:	83 e0       	ldi	r24, 0x03	; 3
   11e28:	52 c0       	rjmp	.+164    	; 0x11ece <FMenuTicket+0x270>
		 }else
		 if (KeyPressed==_KEY_ENTER){
   11e2a:	07 3b       	cpi	r16, 0xB7	; 183
   11e2c:	09 f0       	breq	.+2      	; 0x11e30 <FMenuTicket+0x1d2>
   11e2e:	56 c0       	rjmp	.+172    	; 0x11edc <FMenuTicket+0x27e>
		     FIP_Used=zFIP_Used;
   11e30:	80 91 e8 02 	lds	r24, 0x02E8
   11e34:	80 93 e9 02 	sts	0x02E9, r24
             stMenuTicket=mtInitWaitMessage99;
   11e38:	88 e0       	ldi	r24, 0x08	; 8
   11e3a:	49 c0       	rjmp	.+146    	; 0x11ece <FMenuTicket+0x270>
		 }
	     break;	
    case mtInitWaitMessage99:
	     lcd_clear();
   11e3c:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
		 lcd_printf(2,1,PSTR("Send Request"));
   11e40:	82 e0       	ldi	r24, 0x02	; 2
   11e42:	61 e0       	ldi	r22, 0x01	; 1
   11e44:	4d e7       	ldi	r20, 0x7D	; 125
   11e46:	5b e0       	ldi	r21, 0x0B	; 11
   11e48:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		 lcd_printf(3,1,PSTR("Proses"));
   11e4c:	83 e0       	ldi	r24, 0x03	; 3
   11e4e:	61 e0       	ldi	r22, 0x01	; 1
   11e50:	46 e7       	ldi	r20, 0x76	; 118
   11e52:	5b e0       	ldi	r21, 0x0B	; 11
   11e54:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
         stMenuTicket=mtSendMsg98;
   11e58:	87 e0       	ldi	r24, 0x07	; 7
   11e5a:	39 c0       	rjmp	.+114    	; 0x11ece <FMenuTicket+0x270>
	     break;
    case mtSendMsg98:
	     iPos=0;
   11e5c:	10 92 eb 02 	sts	0x02EB, r1
		 iSend=0;
   11e60:	10 92 ea 02 	sts	0x02EA, r1
		 IsMessage99=False;
   11e64:	10 92 7e 02 	sts	0x027E, r1
		 TimSend=0;
   11e68:	10 92 7d 0d 	sts	0x0D7D, r1
		 iLoop=0;
   11e6c:	10 92 e7 02 	sts	0x02E7, r1
   11e70:	10 92 e6 02 	sts	0x02E6, r1
		 if (IFType==IT_SLAVE)sendMessage98(FIP_Used);
   11e74:	80 91 00 01 	lds	r24, 0x0100
   11e78:	81 30       	cpi	r24, 0x01	; 1
   11e7a:	29 f4       	brne	.+10     	; 0x11e86 <FMenuTicket+0x228>
   11e7c:	80 91 e9 02 	lds	r24, 0x02E9
   11e80:	0e 94 29 6e 	call	0xdc52	; 0xdc52 <sendMessage98>
   11e84:	23 c0       	rjmp	.+70     	; 0x11ecc <FMenuTicket+0x26e>
		 else 
		 if (IFType==IT_STANDALONE)PrintStandalone(FIP_Used,False);
   11e86:	82 30       	cpi	r24, 0x02	; 2
   11e88:	09 f5       	brne	.+66     	; 0x11ecc <FMenuTicket+0x26e>
   11e8a:	80 91 e9 02 	lds	r24, 0x02E9
   11e8e:	60 e0       	ldi	r22, 0x00	; 0
   11e90:	0e 94 d7 8d 	call	0x11bae	; 0x11bae <PrintStandalone>
   11e94:	1b c0       	rjmp	.+54     	; 0x11ecc <FMenuTicket+0x26e>
	                     stMenuTicket=mtSendMsg98;
				  }
			 }
		 }
		 */
		 if (IsMessage99==True){ 
   11e96:	80 91 7e 02 	lds	r24, 0x027E
   11e9a:	81 30       	cpi	r24, 0x01	; 1
   11e9c:	f9 f4       	brne	.+62     	; 0x11edc <FMenuTicket+0x27e>
		    stMenuTicket=mtMessage99Received;
   11e9e:	8a e0       	ldi	r24, 0x0A	; 10
   11ea0:	16 c0       	rjmp	.+44     	; 0x11ece <FMenuTicket+0x270>
	     break;
    case mtMessage99Received:
	     stMenuTicket=mtExitMenuTicket;
		 break;
    case mtNoConnection:
	     lcd_clear();
   11ea2:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
		 lcd_printf(2,1,PSTR("Error No Connection"));
   11ea6:	82 e0       	ldi	r24, 0x02	; 2
   11ea8:	61 e0       	ldi	r22, 0x01	; 1
   11eaa:	42 e6       	ldi	r20, 0x62	; 98
   11eac:	5b e0       	ldi	r21, 0x0B	; 11
   11eae:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		 system_beep(2);
   11eb2:	82 e0       	ldi	r24, 0x02	; 2
   11eb4:	90 e0       	ldi	r25, 0x00	; 0
   11eb6:	0e 94 ee 14 	call	0x29dc	; 0x29dc <system_beep>
   11eba:	8f e7       	ldi	r24, 0x7F	; 127
   11ebc:	9a e1       	ldi	r25, 0x1A	; 26
   11ebe:	a6 e0       	ldi	r26, 0x06	; 6
   11ec0:	81 50       	subi	r24, 0x01	; 1
   11ec2:	90 40       	sbci	r25, 0x00	; 0
   11ec4:	a0 40       	sbci	r26, 0x00	; 0
   11ec6:	e1 f7       	brne	.-8      	; 0x11ec0 <FMenuTicket+0x262>
   11ec8:	00 c0       	rjmp	.+0      	; 0x11eca <FMenuTicket+0x26c>
   11eca:	00 00       	nop
		 _delay_ms(2000);
         stMenuTicket=mtExitMenuTicket;
   11ecc:	8c e0       	ldi	r24, 0x0C	; 12
   11ece:	80 93 ec 02 	sts	0x02EC, r24
   11ed2:	04 c0       	rjmp	.+8      	; 0x11edc <FMenuTicket+0x27e>
	     break;
    case mtExitMenuTicket:
	     Result=MENU_DONE;
	     stMenuTicket=mtInit;
   11ed4:	10 92 ec 02 	sts	0x02EC, r1
		 system_beep(2);
		 _delay_ms(2000);
         stMenuTicket=mtExitMenuTicket;
	     break;
    case mtExitMenuTicket:
	     Result=MENU_DONE;
   11ed8:	81 e0       	ldi	r24, 0x01	; 1
	     stMenuTicket=mtInit;
	     break;
   11eda:	01 c0       	rjmp	.+2      	; 0x11ede <FMenuTicket+0x280>
static char iPos,iSend,FIP_Used,zFIP_Used;
static unsigned int iLoop=0;
     char uiResult=USER_NONE,KeyPressed,KeyChar;
     char Result=MENU_NONE,lcdteks[20];

    Result=MENU_NONE;   
   11edc:	80 e0       	ldi	r24, 0x00	; 0
	     Result=MENU_DONE;
	     stMenuTicket=mtInit;
	     break;
	}
  return Result;
}
   11ede:	64 96       	adiw	r28, 0x14	; 20
   11ee0:	0f b6       	in	r0, 0x3f	; 63
   11ee2:	f8 94       	cli
   11ee4:	de bf       	out	0x3e, r29	; 62
   11ee6:	0f be       	out	0x3f, r0	; 63
   11ee8:	cd bf       	out	0x3d, r28	; 61
   11eea:	cf 91       	pop	r28
   11eec:	df 91       	pop	r29
   11eee:	1f 91       	pop	r17
   11ef0:	0f 91       	pop	r16
   11ef2:	ef 90       	pop	r14
   11ef4:	08 95       	ret

00011ef6 <FMenuReprint>:
	       break;
	 }
return Result;
}

char FMenuReprint(){
   11ef6:	0f 93       	push	r16
   11ef8:	1f 93       	push	r17
   11efa:	df 93       	push	r29
   11efc:	cf 93       	push	r28
   11efe:	cd b7       	in	r28, 0x3d	; 61
   11f00:	de b7       	in	r29, 0x3e	; 62
   11f02:	64 97       	sbiw	r28, 0x14	; 20
   11f04:	0f b6       	in	r0, 0x3f	; 63
   11f06:	f8 94       	cli
   11f08:	de bf       	out	0x3e, r29	; 62
   11f0a:	0f be       	out	0x3f, r0	; 63
   11f0c:	cd bf       	out	0x3d, r28	; 61
static char KeyPressed=0,FIP_Used=0;
       char lcdteks[20],FIPResult,KeyChar;//,FIP_USED;
	   char PassResult,Result=MENU_NONE,ReprintResult;

     Result=MENU_NONE;
	 switch(stReprint){
   11f0e:	80 91 47 03 	lds	r24, 0x0347
   11f12:	87 30       	cpi	r24, 0x07	; 7
   11f14:	09 f4       	brne	.+2      	; 0x11f18 <FMenuReprint+0x22>
   11f16:	92 c0       	rjmp	.+292    	; 0x1203c <FMenuReprint+0x146>
   11f18:	88 30       	cpi	r24, 0x08	; 8
   11f1a:	88 f4       	brcc	.+34     	; 0x11f3e <FMenuReprint+0x48>
   11f1c:	83 30       	cpi	r24, 0x03	; 3
   11f1e:	e9 f1       	breq	.+122    	; 0x11f9a <FMenuReprint+0xa4>
   11f20:	84 30       	cpi	r24, 0x04	; 4
   11f22:	30 f4       	brcc	.+12     	; 0x11f30 <FMenuReprint+0x3a>
   11f24:	81 30       	cpi	r24, 0x01	; 1
   11f26:	09 f4       	brne	.+2      	; 0x11f2a <FMenuReprint+0x34>
   11f28:	4b c0       	rjmp	.+150    	; 0x11fc0 <FMenuReprint+0xca>
   11f2a:	82 30       	cpi	r24, 0x02	; 2
   11f2c:	48 f5       	brcc	.+82     	; 0x11f80 <FMenuReprint+0x8a>
   11f2e:	1d c0       	rjmp	.+58     	; 0x11f6a <FMenuReprint+0x74>
   11f30:	85 30       	cpi	r24, 0x05	; 5
   11f32:	09 f4       	brne	.+2      	; 0x11f36 <FMenuReprint+0x40>
   11f34:	75 c0       	rjmp	.+234    	; 0x12020 <FMenuReprint+0x12a>
   11f36:	86 30       	cpi	r24, 0x06	; 6
   11f38:	08 f0       	brcs	.+2      	; 0x11f3c <FMenuReprint+0x46>
   11f3a:	46 c0       	rjmp	.+140    	; 0x11fc8 <FMenuReprint+0xd2>
   11f3c:	3b c0       	rjmp	.+118    	; 0x11fb4 <FMenuReprint+0xbe>
   11f3e:	8b 30       	cpi	r24, 0x0B	; 11
   11f40:	09 f4       	brne	.+2      	; 0x11f44 <FMenuReprint+0x4e>
   11f42:	dd c0       	rjmp	.+442    	; 0x120fe <FMenuReprint+0x208>
   11f44:	8c 30       	cpi	r24, 0x0C	; 12
   11f46:	38 f4       	brcc	.+14     	; 0x11f56 <FMenuReprint+0x60>
   11f48:	89 30       	cpi	r24, 0x09	; 9
   11f4a:	09 f4       	brne	.+2      	; 0x11f4e <FMenuReprint+0x58>
   11f4c:	bd c0       	rjmp	.+378    	; 0x120c8 <FMenuReprint+0x1d2>
   11f4e:	8a 30       	cpi	r24, 0x0A	; 10
   11f50:	08 f0       	brcs	.+2      	; 0x11f54 <FMenuReprint+0x5e>
   11f52:	cf c0       	rjmp	.+414    	; 0x120f2 <FMenuReprint+0x1fc>
   11f54:	81 c0       	rjmp	.+258    	; 0x12058 <FMenuReprint+0x162>
   11f56:	8d 30       	cpi	r24, 0x0D	; 13
   11f58:	09 f4       	brne	.+2      	; 0x11f5c <FMenuReprint+0x66>
   11f5a:	f0 c0       	rjmp	.+480    	; 0x1213c <FMenuReprint+0x246>
   11f5c:	8d 30       	cpi	r24, 0x0D	; 13
   11f5e:	08 f4       	brcc	.+2      	; 0x11f62 <FMenuReprint+0x6c>
   11f60:	da c0       	rjmp	.+436    	; 0x12116 <FMenuReprint+0x220>
   11f62:	8e 30       	cpi	r24, 0x0E	; 14
   11f64:	09 f0       	breq	.+2      	; 0x11f68 <FMenuReprint+0x72>
   11f66:	f6 c0       	rjmp	.+492    	; 0x12154 <FMenuReprint+0x25e>
   11f68:	f1 c0       	rjmp	.+482    	; 0x1214c <FMenuReprint+0x256>
	 case rtInit:
	      lcd_clear();
   11f6a:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
          if (IFType==IT_SLAVE)stReprint=rtFIP;
   11f6e:	80 91 00 01 	lds	r24, 0x0100
   11f72:	81 30       	cpi	r24, 0x01	; 1
   11f74:	09 f4       	brne	.+2      	; 0x11f78 <FMenuReprint+0x82>
   11f76:	b8 c0       	rjmp	.+368    	; 0x120e8 <FMenuReprint+0x1f2>
		  else
		  if (IFType==IT_STANDALONE)stReprint=rtStandaloneFIP;//rtValidPassword;//rtStandaloneFIP;
   11f78:	82 30       	cpi	r24, 0x02	; 2
   11f7a:	09 f0       	breq	.+2      	; 0x11f7e <FMenuReprint+0x88>
   11f7c:	eb c0       	rjmp	.+470    	; 0x12154 <FMenuReprint+0x25e>
   11f7e:	04 c0       	rjmp	.+8      	; 0x11f88 <FMenuReprint+0x92>
	      break;
     case rtValidPassword:
	      PassResult=FMenuPassword();
   11f80:	0e 94 f0 50 	call	0xa1e0	; 0xa1e0 <FMenuPassword>
	      if (PassResult==MP_VALID_ADMIN)stReprint=rtStandaloneFIP;
   11f84:	84 30       	cpi	r24, 0x04	; 4
   11f86:	11 f4       	brne	.+4      	; 0x11f8c <FMenuReprint+0x96>
   11f88:	81 e0       	ldi	r24, 0x01	; 1
   11f8a:	dd c0       	rjmp	.+442    	; 0x12146 <FMenuReprint+0x250>
		  else
	      if (PassResult==MP_VALID_SYSTEM)stReprint=rtInvalidPassword;
   11f8c:	85 30       	cpi	r24, 0x05	; 5
   11f8e:	19 f0       	breq	.+6      	; 0x11f96 <FMenuReprint+0xa0>
          else
	      if (PassResult==MP_INVALID)stReprint=rtInvalidPassword;
   11f90:	82 30       	cpi	r24, 0x02	; 2
   11f92:	09 f0       	breq	.+2      	; 0x11f96 <FMenuReprint+0xa0>
   11f94:	bd c0       	rjmp	.+378    	; 0x12110 <FMenuReprint+0x21a>
   11f96:	83 e0       	ldi	r24, 0x03	; 3
   11f98:	d6 c0       	rjmp	.+428    	; 0x12146 <FMenuReprint+0x250>
		  else
	      if (PassResult==MP_CANCEL)stReprint=rtExitReprint;
	      break;
     case rtInvalidPassword:
          TimDisplay=0;
   11f9a:	10 92 70 02 	sts	0x0270, r1
		  system_beep(1);
   11f9e:	81 e0       	ldi	r24, 0x01	; 1
   11fa0:	90 e0       	ldi	r25, 0x00	; 0
   11fa2:	0e 94 ee 14 	call	0x29dc	; 0x29dc <system_beep>
		  lcd_printf(3,1,PSTR("Access Denied"));
   11fa6:	83 e0       	ldi	r24, 0x03	; 3
   11fa8:	61 e0       	ldi	r22, 0x01	; 1
   11faa:	4f e8       	ldi	r20, 0x8F	; 143
   11fac:	5d e1       	ldi	r21, 0x1D	; 29
   11fae:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
   11fb2:	42 c0       	rjmp	.+132    	; 0x12038 <FMenuReprint+0x142>
          stReprint=rtTimDisplayInvalid;
	      break;
     case rtTimDisplayInvalid:
	      if (TimDisplay>2)stReprint=rtExitReprint;
   11fb4:	80 91 70 02 	lds	r24, 0x0270
   11fb8:	83 30       	cpi	r24, 0x03	; 3
   11fba:	08 f4       	brcc	.+2      	; 0x11fbe <FMenuReprint+0xc8>
   11fbc:	cb c0       	rjmp	.+406    	; 0x12154 <FMenuReprint+0x25e>
   11fbe:	c2 c0       	rjmp	.+388    	; 0x12144 <FMenuReprint+0x24e>
	      break;
     case rtStandaloneFIP:
	      _scr_pump();
   11fc0:	0e 94 74 2e 	call	0x5ce8	; 0x5ce8 <_scr_pump>
		  stReprint=rtStandaloneInputFIP;
   11fc4:	86 e0       	ldi	r24, 0x06	; 6
   11fc6:	bf c0       	rjmp	.+382    	; 0x12146 <FMenuReprint+0x250>
	      break;
     case rtStandaloneInputFIP:
		  KeyChar=_key_btn(_key_scan(1));
   11fc8:	81 e0       	ldi	r24, 0x01	; 1
   11fca:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <_key_scan>
   11fce:	0e 94 49 a3 	call	0x14692	; 0x14692 <_key_btn>
		  if ((KeyChar>='1')&&(KeyChar<='8')){
   11fd2:	98 2f       	mov	r25, r24
   11fd4:	91 53       	subi	r25, 0x31	; 49
   11fd6:	98 30       	cpi	r25, 0x08	; 8
   11fd8:	f8 f4       	brcc	.+62     	; 0x12018 <FMenuReprint+0x122>
		       SendPoolingCommand(SC_TRANSACTION,GetPumpID(KeyChar-'0'));
   11fda:	08 2f       	mov	r16, r24
   11fdc:	00 53       	subi	r16, 0x30	; 48
   11fde:	80 2f       	mov	r24, r16
   11fe0:	0e 94 01 6e 	call	0xdc02	; 0xdc02 <GetPumpID>
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
   11fe4:	94 e0       	ldi	r25, 0x04	; 4
   11fe6:	90 93 8b 06 	sts	0x068B, r25
	 PoolMsg=plMsg;
   11fea:	80 93 cc 0c 	sts	0x0CCC, r24
     IsControlPooling=True;
   11fee:	81 e0       	ldi	r24, 0x01	; 1
   11ff0:	80 93 62 02 	sts	0x0262, r24
	      break;
     case rtStandaloneInputFIP:
		  KeyChar=_key_btn(_key_scan(1));
		  if ((KeyChar>='1')&&(KeyChar<='8')){
		       SendPoolingCommand(SC_TRANSACTION,GetPumpID(KeyChar-'0'));
			   TimSend=0;
   11ff4:	10 92 7d 0d 	sts	0x0D7D, r1
			   while(TimSend<6){};
   11ff8:	80 91 7d 0d 	lds	r24, 0x0D7D
   11ffc:	86 30       	cpi	r24, 0x06	; 6
   11ffe:	e0 f3       	brcs	.-8      	; 0x11ff8 <FMenuReprint+0x102>
		       ReprintResult=PrintStandalone(KeyChar-'0',True);
   12000:	80 2f       	mov	r24, r16
   12002:	61 e0       	ldi	r22, 0x01	; 1
   12004:	0e 94 d7 8d 	call	0x11bae	; 0x11bae <PrintStandalone>
			   if (ReprintResult==PS_NO_DATA)stReprint=rtDisplayNoTransaction;
   12008:	82 31       	cpi	r24, 0x12	; 18
   1200a:	11 f4       	brne	.+4      	; 0x12010 <FMenuReprint+0x11a>
   1200c:	85 e0       	ldi	r24, 0x05	; 5
   1200e:	9b c0       	rjmp	.+310    	; 0x12146 <FMenuReprint+0x250>
			   else if (ReprintResult==PS_PRINTED)stReprint=rtExitReprint;               
   12010:	81 31       	cpi	r24, 0x11	; 17
   12012:	09 f0       	breq	.+2      	; 0x12016 <FMenuReprint+0x120>
   12014:	9f c0       	rjmp	.+318    	; 0x12154 <FMenuReprint+0x25e>
   12016:	96 c0       	rjmp	.+300    	; 0x12144 <FMenuReprint+0x24e>
			   //stReprint=rtExitReprint;
		  }else if (KeyChar=='*')stReprint=rtExitReprint;
   12018:	8a 32       	cpi	r24, 0x2A	; 42
   1201a:	09 f0       	breq	.+2      	; 0x1201e <FMenuReprint+0x128>
   1201c:	9b c0       	rjmp	.+310    	; 0x12154 <FMenuReprint+0x25e>
   1201e:	92 c0       	rjmp	.+292    	; 0x12144 <FMenuReprint+0x24e>
	      break;
     case rtDisplayNoTransaction:
	      lcd_printf(3, 1,PSTR("Tidak Ada Transaksi "));
   12020:	83 e0       	ldi	r24, 0x03	; 3
   12022:	61 e0       	ldi	r22, 0x01	; 1
   12024:	4a e7       	ldi	r20, 0x7A	; 122
   12026:	5d e1       	ldi	r21, 0x1D	; 29
   12028:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  system_beep(1);
   1202c:	81 e0       	ldi	r24, 0x01	; 1
   1202e:	90 e0       	ldi	r25, 0x00	; 0
   12030:	0e 94 ee 14 	call	0x29dc	; 0x29dc <system_beep>
          TimDisplay=0;
   12034:	10 92 70 02 	sts	0x0270, r1
		  stReprint=rtTimDisplayInvalid;
   12038:	84 e0       	ldi	r24, 0x04	; 4
   1203a:	85 c0       	rjmp	.+266    	; 0x12146 <FMenuReprint+0x250>
	      break;
	 case rtFIP:
	      FIPResult=menu_FIP(&FIP_Used,strFIP_ID);
   1203c:	85 e4       	ldi	r24, 0x45	; 69
   1203e:	93 e0       	ldi	r25, 0x03	; 3
   12040:	6d e9       	ldi	r22, 0x9D	; 157
   12042:	78 e0       	ldi	r23, 0x08	; 8
   12044:	0e 94 05 2d 	call	0x5a0a	; 0x5a0a <menu_FIP>
		  if (FIPResult==FIP_DONE){
   12048:	88 23       	and	r24, r24
   1204a:	11 f4       	brne	.+4      	; 0x12050 <FMenuReprint+0x15a>
		      stReprint=rtRFID;
   1204c:	88 e0       	ldi	r24, 0x08	; 8
   1204e:	7b c0       	rjmp	.+246    	; 0x12146 <FMenuReprint+0x250>
			  }
		  else
		  if (FIPResult==FIP_CANCEL)stReprint=rtExitReprint;
   12050:	82 30       	cpi	r24, 0x02	; 2
   12052:	09 f0       	breq	.+2      	; 0x12056 <FMenuReprint+0x160>
   12054:	7f c0       	rjmp	.+254    	; 0x12154 <FMenuReprint+0x25e>
   12056:	76 c0       	rjmp	.+236    	; 0x12144 <FMenuReprint+0x24e>
	      break;
	 case rtRFID:
	      lcd_clear();
   12058:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
		  sprintf_P(lcdteks,PSTR("RePrint FIP:%s "),strFIP_ID);lcd_print(1,1,lcdteks);
   1205c:	00 d0       	rcall	.+0      	; 0x1205e <FMenuReprint+0x168>
   1205e:	00 d0       	rcall	.+0      	; 0x12060 <FMenuReprint+0x16a>
   12060:	00 d0       	rcall	.+0      	; 0x12062 <FMenuReprint+0x16c>
   12062:	ed b7       	in	r30, 0x3d	; 61
   12064:	fe b7       	in	r31, 0x3e	; 62
   12066:	31 96       	adiw	r30, 0x01	; 1
   12068:	8e 01       	movw	r16, r28
   1206a:	0f 5f       	subi	r16, 0xFF	; 255
   1206c:	1f 4f       	sbci	r17, 0xFF	; 255
   1206e:	ad b7       	in	r26, 0x3d	; 61
   12070:	be b7       	in	r27, 0x3e	; 62
   12072:	12 96       	adiw	r26, 0x02	; 2
   12074:	1c 93       	st	X, r17
   12076:	0e 93       	st	-X, r16
   12078:	11 97       	sbiw	r26, 0x01	; 1
   1207a:	8a e6       	ldi	r24, 0x6A	; 106
   1207c:	9d e1       	ldi	r25, 0x1D	; 29
   1207e:	93 83       	std	Z+3, r25	; 0x03
   12080:	82 83       	std	Z+2, r24	; 0x02
   12082:	8d e9       	ldi	r24, 0x9D	; 157
   12084:	98 e0       	ldi	r25, 0x08	; 8
   12086:	95 83       	std	Z+5, r25	; 0x05
   12088:	84 83       	std	Z+4, r24	; 0x04
   1208a:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
   1208e:	8d b7       	in	r24, 0x3d	; 61
   12090:	9e b7       	in	r25, 0x3e	; 62
   12092:	06 96       	adiw	r24, 0x06	; 6
   12094:	0f b6       	in	r0, 0x3f	; 63
   12096:	f8 94       	cli
   12098:	9e bf       	out	0x3e, r25	; 62
   1209a:	0f be       	out	0x3f, r0	; 63
   1209c:	8d bf       	out	0x3d, r24	; 61
   1209e:	81 e0       	ldi	r24, 0x01	; 1
   120a0:	61 e0       	ldi	r22, 0x01	; 1
   120a2:	a8 01       	movw	r20, r16
   120a4:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
		  lcd_printf(2,1,PSTR(  "Tap Supervisor Card"));
   120a8:	82 e0       	ldi	r24, 0x02	; 2
   120aa:	61 e0       	ldi	r22, 0x01	; 1
   120ac:	46 e5       	ldi	r20, 0x56	; 86
   120ae:	5d e1       	ldi	r21, 0x1D	; 29
   120b0:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
          lcd_printf(4,1,PSTR(  "[*]Back    [#]Exit"));
   120b4:	84 e0       	ldi	r24, 0x04	; 4
   120b6:	61 e0       	ldi	r22, 0x01	; 1
   120b8:	43 e4       	ldi	r20, 0x43	; 67
   120ba:	5d e1       	ldi	r21, 0x1D	; 29
   120bc:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  IsRFIDDetected=False;
   120c0:	10 92 76 02 	sts	0x0276, r1
		  stReprint=rtInputRFID;
   120c4:	89 e0       	ldi	r24, 0x09	; 9
   120c6:	3f c0       	rjmp	.+126    	; 0x12146 <FMenuReprint+0x250>
	      break;
	 case rtInputRFID:
	      if (IsRFIDDetected==True){
   120c8:	80 91 76 02 	lds	r24, 0x0276
   120cc:	81 30       	cpi	r24, 0x01	; 1
   120ce:	29 f4       	brne	.+10     	; 0x120da <FMenuReprint+0x1e4>
		      IsRFIDDetected=False;
   120d0:	10 92 76 02 	sts	0x0276, r1
		      stReprint=rtSendMessage28;
   120d4:	8a e0       	ldi	r24, 0x0A	; 10
   120d6:	80 93 47 03 	sts	0x0347, r24
		  }
	 	  KeyPressed=_key_scan(1);
   120da:	81 e0       	ldi	r24, 0x01	; 1
   120dc:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <_key_scan>
   120e0:	80 93 46 03 	sts	0x0346, r24
		  if (KeyPressed==_KEY_CANCEL){
   120e4:	87 3e       	cpi	r24, 0xE7	; 231
   120e6:	11 f4       	brne	.+4      	; 0x120ec <FMenuReprint+0x1f6>
		      stReprint=rtFIP;
   120e8:	87 e0       	ldi	r24, 0x07	; 7
   120ea:	2d c0       	rjmp	.+90     	; 0x12146 <FMenuReprint+0x250>
			  }
		  else
		  if (KeyPressed==_KEY_ENTER)stReprint=rtExitReprint;
   120ec:	87 3b       	cpi	r24, 0xB7	; 183
   120ee:	91 f5       	brne	.+100    	; 0x12154 <FMenuReprint+0x25e>
   120f0:	29 c0       	rjmp	.+82     	; 0x12144 <FMenuReprint+0x24e>
	      break;
     case rtSendMessage28:
		  sendMessage28();
   120f2:	0e 94 93 2b 	call	0x5726	; 0x5726 <sendMessage28>
		  TimSend=0;
   120f6:	10 92 7d 0d 	sts	0x0D7D, r1
		  stReprint=rtWaitReply;
   120fa:	8b e0       	ldi	r24, 0x0B	; 11
   120fc:	24 c0       	rjmp	.+72     	; 0x12146 <FMenuReprint+0x250>
		  break;
     case rtWaitReply:
	      if (TimSend>TIM_SEND*3)stReprint=rtNoConnection;
   120fe:	80 91 7d 0d 	lds	r24, 0x0D7D
   12102:	8f 31       	cpi	r24, 0x1F	; 31
   12104:	18 f0       	brcs	.+6      	; 0x1210c <FMenuReprint+0x216>
   12106:	8c e0       	ldi	r24, 0x0C	; 12
   12108:	80 93 47 03 	sts	0x0347, r24
	      if (IsMessage99==True){
   1210c:	80 91 7e 02 	lds	r24, 0x027E
   12110:	81 30       	cpi	r24, 0x01	; 1
   12112:	01 f5       	brne	.+64     	; 0x12154 <FMenuReprint+0x25e>
   12114:	17 c0       	rjmp	.+46     	; 0x12144 <FMenuReprint+0x24e>
		      stReprint=rtExitReprint;
		  }
	      break;
     case rtNoConnection:
	      lcd_clear();
   12116:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
		  lcd_printf(2,1,PSTR("TCP/IP ERROR "));
   1211a:	82 e0       	ldi	r24, 0x02	; 2
   1211c:	61 e0       	ldi	r22, 0x01	; 1
   1211e:	45 e3       	ldi	r20, 0x35	; 53
   12120:	5d e1       	ldi	r21, 0x1D	; 29
   12122:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  lcd_printf(3,1,PSTR("No Connection"));
   12126:	83 e0       	ldi	r24, 0x03	; 3
   12128:	61 e0       	ldi	r22, 0x01	; 1
   1212a:	47 e2       	ldi	r20, 0x27	; 39
   1212c:	5d e1       	ldi	r21, 0x1D	; 29
   1212e:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  TimDisplay=5;
   12132:	85 e0       	ldi	r24, 0x05	; 5
   12134:	80 93 70 02 	sts	0x0270, r24
		  stReprint=rtDelayExitReprint;
   12138:	8d e0       	ldi	r24, 0x0D	; 13
   1213a:	05 c0       	rjmp	.+10     	; 0x12146 <FMenuReprint+0x250>
	      break;
     case rtDelayExitReprint:
	      if(TimDisplay>=10)stReprint=rtExitReprint;
   1213c:	80 91 70 02 	lds	r24, 0x0270
   12140:	8a 30       	cpi	r24, 0x0A	; 10
   12142:	40 f0       	brcs	.+16     	; 0x12154 <FMenuReprint+0x25e>
   12144:	8e e0       	ldi	r24, 0x0E	; 14
   12146:	80 93 47 03 	sts	0x0347, r24
   1214a:	04 c0       	rjmp	.+8      	; 0x12154 <FMenuReprint+0x25e>
	      break;
	 case rtExitReprint:
	      stReprint=rtInit;
   1214c:	10 92 47 03 	sts	0x0347, r1
		  Result=MENU_DONE;
   12150:	81 e0       	ldi	r24, 0x01	; 1
	      break;
   12152:	01 c0       	rjmp	.+2      	; 0x12156 <FMenuReprint+0x260>
static char stReprint=rtInit;
static char KeyPressed=0,FIP_Used=0;
       char lcdteks[20],FIPResult,KeyChar;//,FIP_USED;
	   char PassResult,Result=MENU_NONE,ReprintResult;

     Result=MENU_NONE;
   12154:	80 e0       	ldi	r24, 0x00	; 0
	      stReprint=rtInit;
		  Result=MENU_DONE;
	      break;
	 }
  return Result;
}
   12156:	64 96       	adiw	r28, 0x14	; 20
   12158:	0f b6       	in	r0, 0x3f	; 63
   1215a:	f8 94       	cli
   1215c:	de bf       	out	0x3e, r29	; 62
   1215e:	0f be       	out	0x3f, r0	; 63
   12160:	cd bf       	out	0x3d, r28	; 61
   12162:	cf 91       	pop	r28
   12164:	df 91       	pop	r29
   12166:	1f 91       	pop	r17
   12168:	0f 91       	pop	r16
   1216a:	08 95       	ret

0001216c <FMenuAdmin>:

char FMenuAdmin(){
static char stMenuAdmin=maInitAdmin;
	 char SubMenu,KeyPressed,KeyChar,Result=MENU_NONE;
     
	 switch(stMenuAdmin){
   1216c:	80 91 2a 03 	lds	r24, 0x032A
   12170:	83 30       	cpi	r24, 0x03	; 3
   12172:	09 f4       	brne	.+2      	; 0x12176 <FMenuAdmin+0xa>
   12174:	67 c0       	rjmp	.+206    	; 0x12244 <FMenuAdmin+0xd8>
   12176:	84 30       	cpi	r24, 0x04	; 4
   12178:	30 f4       	brcc	.+12     	; 0x12186 <FMenuAdmin+0x1a>
   1217a:	81 30       	cpi	r24, 0x01	; 1
   1217c:	69 f1       	breq	.+90     	; 0x121d8 <FMenuAdmin+0x6c>
   1217e:	82 30       	cpi	r24, 0x02	; 2
   12180:	08 f0       	brcs	.+2      	; 0x12184 <FMenuAdmin+0x18>
   12182:	51 c0       	rjmp	.+162    	; 0x12226 <FMenuAdmin+0xba>
   12184:	0d c0       	rjmp	.+26     	; 0x121a0 <FMenuAdmin+0x34>
   12186:	85 30       	cpi	r24, 0x05	; 5
   12188:	09 f4       	brne	.+2      	; 0x1218c <FMenuAdmin+0x20>
   1218a:	52 c0       	rjmp	.+164    	; 0x12230 <FMenuAdmin+0xc4>
   1218c:	85 30       	cpi	r24, 0x05	; 5
   1218e:	08 f4       	brcc	.+2      	; 0x12192 <FMenuAdmin+0x26>
   12190:	4d c0       	rjmp	.+154    	; 0x1222c <FMenuAdmin+0xc0>
   12192:	86 30       	cpi	r24, 0x06	; 6
   12194:	09 f4       	brne	.+2      	; 0x12198 <FMenuAdmin+0x2c>
   12196:	52 c0       	rjmp	.+164    	; 0x1223c <FMenuAdmin+0xd0>
   12198:	87 30       	cpi	r24, 0x07	; 7
   1219a:	09 f0       	breq	.+2      	; 0x1219e <FMenuAdmin+0x32>
   1219c:	5a c0       	rjmp	.+180    	; 0x12252 <FMenuAdmin+0xe6>
   1219e:	55 c0       	rjmp	.+170    	; 0x1224a <FMenuAdmin+0xde>
	 case maInitAdmin:
		  lcd_clear();
   121a0:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
		  lcd_printf(1,1,PSTR("1)RePrint           "));
   121a4:	81 e0       	ldi	r24, 0x01	; 1
   121a6:	61 e0       	ldi	r22, 0x01	; 1
   121a8:	46 e7       	ldi	r20, 0x76	; 118
   121aa:	57 e1       	ldi	r21, 0x17	; 23
   121ac:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  lcd_printf(2,1,PSTR("2)CloseShift        "));
   121b0:	82 e0       	ldi	r24, 0x02	; 2
   121b2:	61 e0       	ldi	r22, 0x01	; 1
   121b4:	41 e6       	ldi	r20, 0x61	; 97
   121b6:	57 e1       	ldi	r21, 0x17	; 23
   121b8:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  lcd_printf(3,1,PSTR("3)CloseDay          "));		  
   121bc:	83 e0       	ldi	r24, 0x03	; 3
   121be:	61 e0       	ldi	r22, 0x01	; 1
   121c0:	4c e4       	ldi	r20, 0x4C	; 76
   121c2:	57 e1       	ldi	r21, 0x17	; 23
   121c4:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  lcd_printf(4,1,PSTR("4)Settings   *)Exit "));
   121c8:	84 e0       	ldi	r24, 0x04	; 4
   121ca:	61 e0       	ldi	r22, 0x01	; 1
   121cc:	47 e3       	ldi	r20, 0x37	; 55
   121ce:	57 e1       	ldi	r21, 0x17	; 23
   121d0:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
	      stMenuAdmin=maSelectOptions;
   121d4:	81 e0       	ldi	r24, 0x01	; 1
   121d6:	24 c0       	rjmp	.+72     	; 0x12220 <FMenuAdmin+0xb4>
	      break;
	 case maSelectOptions:
          KeyPressed=_key_scan(1);
   121d8:	81 e0       	ldi	r24, 0x01	; 1
   121da:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
   121de:	0e 94 49 a3 	call	0x14692	; 0x14692 <_key_btn>
		  switch (KeyChar){
   121e2:	82 33       	cpi	r24, 0x32	; 50
   121e4:	71 f0       	breq	.+28     	; 0x12202 <FMenuAdmin+0x96>
   121e6:	83 33       	cpi	r24, 0x33	; 51
   121e8:	28 f4       	brcc	.+10     	; 0x121f4 <FMenuAdmin+0x88>
   121ea:	8a 32       	cpi	r24, 0x2A	; 42
   121ec:	c1 f0       	breq	.+48     	; 0x1221e <FMenuAdmin+0xb2>
   121ee:	81 33       	cpi	r24, 0x31	; 49
   121f0:	81 f5       	brne	.+96     	; 0x12252 <FMenuAdmin+0xe6>
   121f2:	05 c0       	rjmp	.+10     	; 0x121fe <FMenuAdmin+0x92>
   121f4:	83 33       	cpi	r24, 0x33	; 51
   121f6:	59 f0       	breq	.+22     	; 0x1220e <FMenuAdmin+0xa2>
   121f8:	84 33       	cpi	r24, 0x34	; 52
   121fa:	59 f5       	brne	.+86     	; 0x12252 <FMenuAdmin+0xe6>
   121fc:	0e c0       	rjmp	.+28     	; 0x1221a <FMenuAdmin+0xae>
		  case '1':
		       stMenuAdmin=maMenuReprint;//maMenuAdminConfig;
   121fe:	82 e0       	ldi	r24, 0x02	; 2
   12200:	0f c0       	rjmp	.+30     	; 0x12220 <FMenuAdmin+0xb4>
		       break;  
		  case '2':
		       if (IFType==IT_STANDALONE)
   12202:	80 91 00 01 	lds	r24, 0x0100
   12206:	82 30       	cpi	r24, 0x02	; 2
   12208:	e9 f4       	brne	.+58     	; 0x12244 <FMenuAdmin+0xd8>
			       stMenuAdmin=maMenuCloseShift;
   1220a:	84 e0       	ldi	r24, 0x04	; 4
   1220c:	09 c0       	rjmp	.+18     	; 0x12220 <FMenuAdmin+0xb4>
               else stMenuAdmin=maInitAdmin;
		       break;  
		  case '3':
		       if (IFType==IT_STANDALONE)stMenuAdmin=maMenuCloseDay;
   1220e:	80 91 00 01 	lds	r24, 0x0100
   12212:	82 30       	cpi	r24, 0x02	; 2
   12214:	b9 f4       	brne	.+46     	; 0x12244 <FMenuAdmin+0xd8>
   12216:	85 e0       	ldi	r24, 0x05	; 5
   12218:	03 c0       	rjmp	.+6      	; 0x12220 <FMenuAdmin+0xb4>
               else stMenuAdmin=maInitAdmin;
		       break;  
		  case '4':
		  	   stMenuAdmin=maMenuAdminSettings;
   1221a:	86 e0       	ldi	r24, 0x06	; 6
   1221c:	01 c0       	rjmp	.+2      	; 0x12220 <FMenuAdmin+0xb4>
		       break;  
		  case '*':
    		   stMenuAdmin=maExitMenuAdmin;
   1221e:	87 e0       	ldi	r24, 0x07	; 7
   12220:	80 93 2a 03 	sts	0x032A, r24
   12224:	16 c0       	rjmp	.+44     	; 0x12252 <FMenuAdmin+0xe6>
		       break;  		  
		  }		  
	      break;
     case maMenuReprint:
	      SubMenu=FMenuReprint();
   12226:	0e 94 7b 8f 	call	0x11ef6	; 0x11ef6 <FMenuReprint>
   1222a:	05 c0       	rjmp	.+10     	; 0x12236 <FMenuAdmin+0xca>
	 case maMenuAdminConfig://ChangePassword[],RePrint,PumpTest
	      SubMenu=FSubMenuAdmin();
		  if (SubMenu==MENU_DONE)stMenuAdmin=maInitAdmin;
          break;	 
	 case maMenuCloseShift:
	 	  SubMenu=FCloseShift(CONTINUE_SHIFT);
   1222c:	82 e0       	ldi	r24, 0x02	; 2
   1222e:	01 c0       	rjmp	.+2      	; 0x12232 <FMenuAdmin+0xc6>
		  if (SubMenu==MENU_DONE)stMenuAdmin=maExitMenuAdmin;
	      break;
     case maMenuCloseDay://maMenuCloseShift,maMenuCloseDay
	 	  SubMenu=FCloseShift(NEW_SHIFT);
   12230:	81 e0       	ldi	r24, 0x01	; 1
   12232:	0e 94 8f 89 	call	0x1131e	; 0x1131e <FCloseShift>
		  if (SubMenu==MENU_DONE)stMenuAdmin=maExitMenuAdmin;
   12236:	81 30       	cpi	r24, 0x01	; 1
   12238:	61 f4       	brne	.+24     	; 0x12252 <FMenuAdmin+0xe6>
   1223a:	f1 cf       	rjmp	.-30     	; 0x1221e <FMenuAdmin+0xb2>
	      break;
     case maMenuAdminSettings:
	      SubMenu=FMenuAdminSettings();
   1223c:	0e 94 67 50 	call	0xa0ce	; 0xa0ce <FMenuAdminSettings>
		  if (SubMenu==MENU_DONE)stMenuAdmin=maInitAdmin;	      
   12240:	81 30       	cpi	r24, 0x01	; 1
   12242:	49 f4       	brne	.+18     	; 0x12256 <FMenuAdmin+0xea>
   12244:	10 92 2a 03 	sts	0x032A, r1
   12248:	04 c0       	rjmp	.+8      	; 0x12252 <FMenuAdmin+0xe6>
	      break;
     case maExitMenuAdmin:
	      stMenuAdmin=maInitAdmin;	      
   1224a:	10 92 2a 03 	sts	0x032A, r1
	      Result=MENU_DONE;
   1224e:	81 e0       	ldi	r24, 0x01	; 1
          break;	 
   12250:	08 95       	ret

}

char FMenuAdmin(){
static char stMenuAdmin=maInitAdmin;
	 char SubMenu,KeyPressed,KeyChar,Result=MENU_NONE;
   12252:	80 e0       	ldi	r24, 0x00	; 0
   12254:	08 95       	ret
   12256:	80 e0       	ldi	r24, 0x00	; 0
	      stMenuAdmin=maInitAdmin;	      
	      Result=MENU_DONE;
          break;	 
	 }
   return Result;
}
   12258:	08 95       	ret

0001225a <StoreStandaloneTotalizerData>:
	  systemEDC();
	  systemConfigProtocol();
	  //systemGeniusProtocol(); //AKR-->Protocol disabled
}

void StoreStandaloneTotalizerData(char *strRawTransData){//Sending FlowSPI_Protocol <STX>   [MsgID][PumpID][Volume1][Amount1][Volume2][Amount2][Volume3][Amount3][Volume4][Amount4][Volume5][Amount5][Volume6][Amount6]<ETX>
   1225a:	5f 92       	push	r5
   1225c:	6f 92       	push	r6
   1225e:	7f 92       	push	r7
   12260:	8f 92       	push	r8
   12262:	9f 92       	push	r9
   12264:	af 92       	push	r10
   12266:	bf 92       	push	r11
   12268:	cf 92       	push	r12
   1226a:	df 92       	push	r13
   1226c:	ef 92       	push	r14
   1226e:	ff 92       	push	r15
   12270:	0f 93       	push	r16
   12272:	1f 93       	push	r17
   12274:	df 93       	push	r29
   12276:	cf 93       	push	r28
   12278:	cd b7       	in	r28, 0x3d	; 61
   1227a:	de b7       	in	r29, 0x3e	; 62
   1227c:	a1 97       	sbiw	r28, 0x21	; 33
   1227e:	0f b6       	in	r0, 0x3f	; 63
   12280:	f8 94       	cli
   12282:	de bf       	out	0x3e, r29	; 62
   12284:	0f be       	out	0x3f, r0	; 63
   12286:	cd bf       	out	0x3d, r28	; 61
   12288:	5c 01       	movw	r10, r24

	 //for(i=0;i<strlen(strRawTransData);i++){
	 //    uart(1,1,strRawTransData[i]); 
	 // }

     StrPosCopy(strRawTransData,strPumpID,2,2);
   1228a:	8e 01       	movw	r16, r28
   1228c:	0f 5f       	subi	r16, 0xFF	; 255
   1228e:	1f 4f       	sbci	r17, 0xFF	; 255
   12290:	b8 01       	movw	r22, r16
   12292:	42 e0       	ldi	r20, 0x02	; 2
   12294:	50 e0       	ldi	r21, 0x00	; 0
   12296:	22 e0       	ldi	r18, 0x02	; 2
   12298:	30 e0       	ldi	r19, 0x00	; 0
   1229a:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
	 //IdIFT(strPumpID);
	 iPumpID=atoi(strPumpID);  
   1229e:	c8 01       	movw	r24, r16
   122a0:	0e 94 e0 a7 	call	0x14fc0	; 0x14fc0 <atoi>
   122a4:	e8 2e       	mov	r14, r24
	 
	 FIPAddr=GetFIPAddr(iPumpID);
   122a6:	0e 94 50 6e 	call	0xdca0	; 0xdca0 <GetFIPAddr>
	 if (FIPAddr>0){
   122aa:	88 23       	and	r24, r24
   122ac:	b9 f1       	breq	.+110    	; 0x1231c <StoreStandaloneTotalizerData+0xc2>
	     FIPAddr=FIPAddr-1;
   122ae:	58 2e       	mov	r5, r24
   122b0:	5a 94       	dec	r5
   122b2:	44 e0       	ldi	r20, 0x04	; 4
   122b4:	c4 2e       	mov	r12, r20
   122b6:	d1 2c       	mov	r13, r1
		 //uart_printf(1,1,PSTR("Totalizer:"));

		 for (iGrade=1;iGrade<=6;iGrade++){          
   122b8:	ff 24       	eor	r15, r15
   122ba:	f3 94       	inc	r15
			  StrPosCopy(strRawTransData,strGVolume,(4+((iGrade-1)*24)),12);
   122bc:	34 e0       	ldi	r19, 0x04	; 4
   122be:	83 2e       	mov	r8, r19
   122c0:	91 2c       	mov	r9, r1
   122c2:	8c 0e       	add	r8, r28
   122c4:	9d 1e       	adc	r9, r29
			  StrPosCopy(strRawTransData,strGMoney,(16+((iGrade-1)*24)),12);
   122c6:	23 e1       	ldi	r18, 0x13	; 19
   122c8:	62 2e       	mov	r6, r18
   122ca:	71 2c       	mov	r7, r1
   122cc:	6c 0e       	add	r6, r28
   122ce:	7d 1e       	adc	r7, r29
	 if (FIPAddr>0){
	     FIPAddr=FIPAddr-1;
		 //uart_printf(1,1,PSTR("Totalizer:"));

		 for (iGrade=1;iGrade<=6;iGrade++){          
			  StrPosCopy(strRawTransData,strGVolume,(4+((iGrade-1)*24)),12);
   122d0:	c5 01       	movw	r24, r10
   122d2:	b4 01       	movw	r22, r8
   122d4:	a6 01       	movw	r20, r12
   122d6:	2c e0       	ldi	r18, 0x0C	; 12
   122d8:	30 e0       	ldi	r19, 0x00	; 0
   122da:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
			  StrPosCopy(strRawTransData,strGMoney,(16+((iGrade-1)*24)),12);
   122de:	a6 01       	movw	r20, r12
   122e0:	44 5f       	subi	r20, 0xF4	; 244
   122e2:	5f 4f       	sbci	r21, 0xFF	; 255
   122e4:	c5 01       	movw	r24, r10
   122e6:	b3 01       	movw	r22, r6
   122e8:	2c e0       	ldi	r18, 0x0C	; 12
   122ea:	30 e0       	ldi	r19, 0x00	; 0
   122ec:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
			  
			  SetTotalizerData(TVOLUME,TOTALIZER_NOW,FIPAddr,iGrade,strGVolume);
   122f0:	80 e0       	ldi	r24, 0x00	; 0
   122f2:	61 e0       	ldi	r22, 0x01	; 1
   122f4:	45 2d       	mov	r20, r5
   122f6:	2f 2d       	mov	r18, r15
   122f8:	84 01       	movw	r16, r8
   122fa:	0e 94 6b 61 	call	0xc2d6	; 0xc2d6 <SetTotalizerData>
			  SetTotalizerData(TMONEY,TOTALIZER_NOW,FIPAddr,iGrade,strGMoney);
   122fe:	81 e0       	ldi	r24, 0x01	; 1
   12300:	61 e0       	ldi	r22, 0x01	; 1
   12302:	45 2d       	mov	r20, r5
   12304:	2f 2d       	mov	r18, r15
   12306:	83 01       	movw	r16, r6
   12308:	0e 94 6b 61 	call	0xc2d6	; 0xc2d6 <SetTotalizerData>
	 FIPAddr=GetFIPAddr(iPumpID);
	 if (FIPAddr>0){
	     FIPAddr=FIPAddr-1;
		 //uart_printf(1,1,PSTR("Totalizer:"));

		 for (iGrade=1;iGrade<=6;iGrade++){          
   1230c:	f3 94       	inc	r15
   1230e:	88 e1       	ldi	r24, 0x18	; 24
   12310:	90 e0       	ldi	r25, 0x00	; 0
   12312:	c8 0e       	add	r12, r24
   12314:	d9 1e       	adc	r13, r25
   12316:	9f 2d       	mov	r25, r15
   12318:	97 30       	cpi	r25, 0x07	; 7
   1231a:	d1 f6       	brne	.-76     	; 0x122d0 <StoreStandaloneTotalizerData+0x76>
			  SetTotalizerData(TMONEY,TOTALIZER_NOW,FIPAddr,iGrade,strGMoney);
			  //sprintf_P(strSend,PSTR("Nozzle:%d Volume:%s Money:%s"),iGrade,strGVolume,strGMoney);
			  //uart_print(0,1,strSend);
		 }	
	}
     SendSlaveCommand(SC_TOTALIZER_ACK,iPumpID);
   1231c:	8d e0       	ldi	r24, 0x0D	; 13
   1231e:	6e 2d       	mov	r22, r14
   12320:	0e 94 29 19 	call	0x3252	; 0x3252 <SendSlaveCommand>
	 UpdateStandaloneStatus((iPumpID&0x0F),PS_TOTALIZER);	 
   12324:	8e 2d       	mov	r24, r14
   12326:	8f 70       	andi	r24, 0x0F	; 15
   12328:	64 e1       	ldi	r22, 0x14	; 20
   1232a:	0e 94 8f 81 	call	0x1031e	; 0x1031e <UpdateStandaloneStatus>
}
   1232e:	a1 96       	adiw	r28, 0x21	; 33
   12330:	0f b6       	in	r0, 0x3f	; 63
   12332:	f8 94       	cli
   12334:	de bf       	out	0x3e, r29	; 62
   12336:	0f be       	out	0x3f, r0	; 63
   12338:	cd bf       	out	0x3d, r28	; 61
   1233a:	cf 91       	pop	r28
   1233c:	df 91       	pop	r29
   1233e:	1f 91       	pop	r17
   12340:	0f 91       	pop	r16
   12342:	ff 90       	pop	r15
   12344:	ef 90       	pop	r14
   12346:	df 90       	pop	r13
   12348:	cf 90       	pop	r12
   1234a:	bf 90       	pop	r11
   1234c:	af 90       	pop	r10
   1234e:	9f 90       	pop	r9
   12350:	8f 90       	pop	r8
   12352:	7f 90       	pop	r7
   12354:	6f 90       	pop	r6
   12356:	5f 90       	pop	r5
   12358:	08 95       	ret

0001235a <GeniusSendPumpStatus>:
   return Result;
}

void GeniusSendPumpStatus(char iPumpID){
     
}
   1235a:	08 95       	ret

0001235c <GeniusSendStopPump>:
void GeniusSendStopPump(char iPumpID){
}
   1235c:	08 95       	ret

0001235e <GeniusSendResumePump>:
void GeniusSendResumePump(char iPumpID){
}
   1235e:	08 95       	ret

00012360 <GeniusSendPumpPreset>:
void GeniusSendPumpPreset(char iPumpID){
}
   12360:	08 95       	ret

00012362 <GeniusSendLastTransaction>:


void GeniusSendLastTransaction(char iPumpID){
   12362:	2f 92       	push	r2
   12364:	3f 92       	push	r3
   12366:	4f 92       	push	r4
   12368:	5f 92       	push	r5
   1236a:	6f 92       	push	r6
   1236c:	7f 92       	push	r7
   1236e:	8f 92       	push	r8
   12370:	9f 92       	push	r9
   12372:	af 92       	push	r10
   12374:	bf 92       	push	r11
   12376:	cf 92       	push	r12
   12378:	df 92       	push	r13
   1237a:	ef 92       	push	r14
   1237c:	ff 92       	push	r15
   1237e:	0f 93       	push	r16
   12380:	1f 93       	push	r17
   12382:	df 93       	push	r29
   12384:	cf 93       	push	r28
   12386:	cd b7       	in	r28, 0x3d	; 61
   12388:	de b7       	in	r29, 0x3e	; 62
   1238a:	c2 5b       	subi	r28, 0xB2	; 178
   1238c:	d0 40       	sbci	r29, 0x00	; 0
   1238e:	0f b6       	in	r0, 0x3f	; 63
   12390:	f8 94       	cli
   12392:	de bf       	out	0x3e, r29	; 62
   12394:	0f be       	out	0x3f, r0	; 63
   12396:	cd bf       	out	0x3d, r28	; 61
   12398:	08 2f       	mov	r16, r24
	 char SDatetime[20];
     char strSend[90],cSum;
	 char FIPAddr,PProductID[6],iNozzle,iProdID;
     
	 //Init
	 FillChar(SVolume,sizeof(SVolume),0);
   1239a:	87 e0       	ldi	r24, 0x07	; 7
   1239c:	e8 2e       	mov	r14, r24
   1239e:	f1 2c       	mov	r15, r1
   123a0:	ec 0e       	add	r14, r28
   123a2:	fd 1e       	adc	r15, r29
   123a4:	c7 01       	movw	r24, r14
   123a6:	6f e0       	ldi	r22, 0x0F	; 15
   123a8:	70 e0       	ldi	r23, 0x00	; 0
   123aa:	40 e0       	ldi	r20, 0x00	; 0
   123ac:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>
	 FillChar(SMoney,sizeof(SMoney),0);
   123b0:	16 e1       	ldi	r17, 0x16	; 22
   123b2:	c1 2e       	mov	r12, r17
   123b4:	d1 2c       	mov	r13, r1
   123b6:	cc 0e       	add	r12, r28
   123b8:	dd 1e       	adc	r13, r29
   123ba:	c6 01       	movw	r24, r12
   123bc:	6f e0       	ldi	r22, 0x0F	; 15
   123be:	70 e0       	ldi	r23, 0x00	; 0
   123c0:	40 e0       	ldi	r20, 0x00	; 0
   123c2:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>
	 FillChar(STotalVolume,sizeof(STotalVolume),0);
   123c6:	b5 e2       	ldi	r27, 0x25	; 37
   123c8:	ab 2e       	mov	r10, r27
   123ca:	b1 2c       	mov	r11, r1
   123cc:	ac 0e       	add	r10, r28
   123ce:	bd 1e       	adc	r11, r29
   123d0:	c5 01       	movw	r24, r10
   123d2:	6f e0       	ldi	r22, 0x0F	; 15
   123d4:	70 e0       	ldi	r23, 0x00	; 0
   123d6:	40 e0       	ldi	r20, 0x00	; 0
   123d8:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>
	 FillChar(STotalMoney,sizeof(STotalMoney),0);
   123dc:	a4 e3       	ldi	r26, 0x34	; 52
   123de:	4a 2e       	mov	r4, r26
   123e0:	51 2c       	mov	r5, r1
   123e2:	4c 0e       	add	r4, r28
   123e4:	5d 1e       	adc	r5, r29
   123e6:	c2 01       	movw	r24, r4
   123e8:	6f e0       	ldi	r22, 0x0F	; 15
   123ea:	70 e0       	ldi	r23, 0x00	; 0
   123ec:	40 e0       	ldi	r20, 0x00	; 0
   123ee:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>
	      

	 //Generate
	 FIPAddr=GetFIPAddr(iPumpID);
   123f2:	80 2f       	mov	r24, r16
   123f4:	0e 94 50 6e 	call	0xdca0	; 0xdca0 <GetFIPAddr>
     eeprom_read_block((void*) &PProductID, (const void*) &DefNozzleMap[FIPAddr-1], 6);
   123f8:	90 e0       	ldi	r25, 0x00	; 0
   123fa:	01 97       	sbiw	r24, 0x01	; 1
   123fc:	bc 01       	movw	r22, r24
   123fe:	66 0f       	add	r22, r22
   12400:	77 1f       	adc	r23, r23
   12402:	68 0f       	add	r22, r24
   12404:	79 1f       	adc	r23, r25
   12406:	66 0f       	add	r22, r22
   12408:	77 1f       	adc	r23, r23
   1240a:	6a 5a       	subi	r22, 0xAA	; 170
   1240c:	7f 4f       	sbci	r23, 0xFF	; 255
   1240e:	4e 01       	movw	r8, r28
   12410:	08 94       	sec
   12412:	81 1c       	adc	r8, r1
   12414:	91 1c       	adc	r9, r1
   12416:	c4 01       	movw	r24, r8
   12418:	46 e0       	ldi	r20, 0x06	; 6
   1241a:	50 e0       	ldi	r21, 0x00	; 0
   1241c:	0e 94 56 aa 	call	0x154ac	; 0x154ac <__eerd_block_m128>
	 iNozzle=RecPumpData[iPumpID&0x0F].Grade;
   12420:	80 2f       	mov	r24, r16
   12422:	90 e0       	ldi	r25, 0x00	; 0
   12424:	cf 54       	subi	r28, 0x4F	; 79
   12426:	df 4f       	sbci	r29, 0xFF	; 255
   12428:	99 83       	std	Y+1, r25	; 0x01
   1242a:	88 83       	st	Y, r24
   1242c:	c1 5b       	subi	r28, 0xB1	; 177
   1242e:	d0 40       	sbci	r29, 0x00	; 0
   12430:	9c 01       	movw	r18, r24
   12432:	2f 70       	andi	r18, 0x0F	; 15
   12434:	30 70       	andi	r19, 0x00	; 0
   12436:	85 e3       	ldi	r24, 0x35	; 53
   12438:	90 e0       	ldi	r25, 0x00	; 0
   1243a:	28 9f       	mul	r18, r24
   1243c:	f0 01       	movw	r30, r0
   1243e:	29 9f       	mul	r18, r25
   12440:	f0 0d       	add	r31, r0
   12442:	38 9f       	mul	r19, r24
   12444:	f0 0d       	add	r31, r0
   12446:	11 24       	eor	r1, r1
   12448:	e4 57       	subi	r30, 0x74	; 116
   1244a:	f9 4f       	sbci	r31, 0xF9	; 249
   1244c:	10 81       	ld	r17, Z
	 iProdID=PProductID[iNozzle];
   1244e:	21 2e       	mov	r2, r17
   12450:	33 24       	eor	r3, r3
   12452:	f4 01       	movw	r30, r8
   12454:	e2 0d       	add	r30, r2
   12456:	f3 1d       	adc	r31, r3

	 GetProductName(iProdID,strProduct);
   12458:	62 e4       	ldi	r22, 0x42	; 66
   1245a:	66 2e       	mov	r6, r22
   1245c:	68 e0       	ldi	r22, 0x08	; 8
   1245e:	76 2e       	mov	r7, r22
   12460:	80 81       	ld	r24, Z
   12462:	b3 01       	movw	r22, r6
   12464:	0e 94 3b 6a 	call	0xd476	; 0xd476 <GetProductName>
	 GetTransactionVolume(iPumpID,SVolume);
   12468:	80 2f       	mov	r24, r16
   1246a:	b7 01       	movw	r22, r14
   1246c:	0e 94 e1 6c 	call	0xd9c2	; 0xd9c2 <GetTransactionVolume>
	 GetTransactionMoney(iPumpID,SMoney);
   12470:	80 2f       	mov	r24, r16
   12472:	b6 01       	movw	r22, r12
   12474:	0e 94 19 6d 	call	0xda32	; 0xda32 <GetTransactionMoney>
	 GetTotalizerVolume(iPumpID,iNozzle,STotalVolume);
   12478:	80 2f       	mov	r24, r16
   1247a:	61 2f       	mov	r22, r17
   1247c:	a5 01       	movw	r20, r10
   1247e:	0e 94 a0 6e 	call	0xdd40	; 0xdd40 <GetTotalizerVolume>
	 GetTotalizerMoney(iPumpID,iNozzle,STotalMoney);
   12482:	80 2f       	mov	r24, r16
   12484:	61 2f       	mov	r22, r17
   12486:	a2 01       	movw	r20, r4
   12488:	0e 94 7d 6e 	call	0xdcfa	; 0xdcfa <GetTotalizerMoney>
	 
     ComposeDatetime(SDatetime);
   1248c:	53 e4       	ldi	r21, 0x43	; 67
   1248e:	85 2e       	mov	r8, r21
   12490:	91 2c       	mov	r9, r1
   12492:	8c 0e       	add	r8, r28
   12494:	9d 1e       	adc	r9, r29
   12496:	c4 01       	movw	r24, r8
   12498:	0e 94 51 6d 	call	0xdaa2	; 0xdaa2 <ComposeDatetime>

	 //Compose
	 sprintf_P(strSend,PSTR("T%.2d%.2d%s%s%s%s%s%s:"),iPumpID,iNozzle,strProduct,SDatetime,SVolume,SMoney,STotalVolume,STotalMoney);
   1249c:	ad b7       	in	r26, 0x3d	; 61
   1249e:	be b7       	in	r27, 0x3e	; 62
   124a0:	54 97       	sbiw	r26, 0x14	; 20
   124a2:	0f b6       	in	r0, 0x3f	; 63
   124a4:	f8 94       	cli
   124a6:	be bf       	out	0x3e, r27	; 62
   124a8:	0f be       	out	0x3f, r0	; 63
   124aa:	ad bf       	out	0x3d, r26	; 61
   124ac:	ed b7       	in	r30, 0x3d	; 61
   124ae:	fe b7       	in	r31, 0x3e	; 62
   124b0:	31 96       	adiw	r30, 0x01	; 1
   124b2:	8e 01       	movw	r16, r28
   124b4:	09 5a       	subi	r16, 0xA9	; 169
   124b6:	1f 4f       	sbci	r17, 0xFF	; 255
   124b8:	12 96       	adiw	r26, 0x02	; 2
   124ba:	1c 93       	st	X, r17
   124bc:	0e 93       	st	-X, r16
   124be:	11 97       	sbiw	r26, 0x01	; 1
   124c0:	82 ee       	ldi	r24, 0xE2	; 226
   124c2:	94 e0       	ldi	r25, 0x04	; 4
   124c4:	93 83       	std	Z+3, r25	; 0x03
   124c6:	82 83       	std	Z+2, r24	; 0x02
   124c8:	cf 54       	subi	r28, 0x4F	; 79
   124ca:	df 4f       	sbci	r29, 0xFF	; 255
   124cc:	88 81       	ld	r24, Y
   124ce:	99 81       	ldd	r25, Y+1	; 0x01
   124d0:	c1 5b       	subi	r28, 0xB1	; 177
   124d2:	d0 40       	sbci	r29, 0x00	; 0
   124d4:	95 83       	std	Z+5, r25	; 0x05
   124d6:	84 83       	std	Z+4, r24	; 0x04
   124d8:	37 82       	std	Z+7, r3	; 0x07
   124da:	26 82       	std	Z+6, r2	; 0x06
   124dc:	71 86       	std	Z+9, r7	; 0x09
   124de:	60 86       	std	Z+8, r6	; 0x08
   124e0:	93 86       	std	Z+11, r9	; 0x0b
   124e2:	82 86       	std	Z+10, r8	; 0x0a
   124e4:	f5 86       	std	Z+13, r15	; 0x0d
   124e6:	e4 86       	std	Z+12, r14	; 0x0c
   124e8:	d7 86       	std	Z+15, r13	; 0x0f
   124ea:	c6 86       	std	Z+14, r12	; 0x0e
   124ec:	b1 8a       	std	Z+17, r11	; 0x11
   124ee:	a0 8a       	std	Z+16, r10	; 0x10
   124f0:	53 8a       	std	Z+19, r5	; 0x13
   124f2:	42 8a       	std	Z+18, r4	; 0x12
   124f4:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	 cSum=SumChecksum(strSend);
   124f8:	ad b7       	in	r26, 0x3d	; 61
   124fa:	be b7       	in	r27, 0x3e	; 62
   124fc:	54 96       	adiw	r26, 0x14	; 20
   124fe:	0f b6       	in	r0, 0x3f	; 63
   12500:	f8 94       	cli
   12502:	be bf       	out	0x3e, r27	; 62
   12504:	0f be       	out	0x3f, r0	; 63
   12506:	ad bf       	out	0x3d, r26	; 61
   12508:	c8 01       	movw	r24, r16
   1250a:	0e 94 bc 6c 	call	0xd978	; 0xd978 <SumChecksum>
   1250e:	e8 2e       	mov	r14, r24
	 uart_print(1,0,strSend);
   12510:	81 e0       	ldi	r24, 0x01	; 1
   12512:	60 e0       	ldi	r22, 0x00	; 0
   12514:	a8 01       	movw	r20, r16
   12516:	0e 94 03 a6 	call	0x14c06	; 0x14c06 <uart_print>
	 FillChar(strSend,sizeof(strSend),0);      
   1251a:	c8 01       	movw	r24, r16
   1251c:	6a e5       	ldi	r22, 0x5A	; 90
   1251e:	70 e0       	ldi	r23, 0x00	; 0
   12520:	40 e0       	ldi	r20, 0x00	; 0
   12522:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>
	 sprintf_P(strSend,PSTR("%d"),cSum);
   12526:	00 d0       	rcall	.+0      	; 0x12528 <GeniusSendLastTransaction+0x1c6>
   12528:	00 d0       	rcall	.+0      	; 0x1252a <GeniusSendLastTransaction+0x1c8>
   1252a:	00 d0       	rcall	.+0      	; 0x1252c <GeniusSendLastTransaction+0x1ca>
   1252c:	ed b7       	in	r30, 0x3d	; 61
   1252e:	fe b7       	in	r31, 0x3e	; 62
   12530:	31 96       	adiw	r30, 0x01	; 1
   12532:	ad b7       	in	r26, 0x3d	; 61
   12534:	be b7       	in	r27, 0x3e	; 62
   12536:	12 96       	adiw	r26, 0x02	; 2
   12538:	1c 93       	st	X, r17
   1253a:	0e 93       	st	-X, r16
   1253c:	11 97       	sbiw	r26, 0x01	; 1
   1253e:	2f ed       	ldi	r18, 0xDF	; 223
   12540:	34 e0       	ldi	r19, 0x04	; 4
   12542:	33 83       	std	Z+3, r19	; 0x03
   12544:	22 83       	std	Z+2, r18	; 0x02
   12546:	e4 82       	std	Z+4, r14	; 0x04
   12548:	15 82       	std	Z+5, r1	; 0x05
   1254a:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	 uart_print(1,1,strSend);	 
   1254e:	8d b7       	in	r24, 0x3d	; 61
   12550:	9e b7       	in	r25, 0x3e	; 62
   12552:	06 96       	adiw	r24, 0x06	; 6
   12554:	0f b6       	in	r0, 0x3f	; 63
   12556:	f8 94       	cli
   12558:	9e bf       	out	0x3e, r25	; 62
   1255a:	0f be       	out	0x3f, r0	; 63
   1255c:	8d bf       	out	0x3d, r24	; 61
   1255e:	81 e0       	ldi	r24, 0x01	; 1
   12560:	61 e0       	ldi	r22, 0x01	; 1
   12562:	a8 01       	movw	r20, r16
   12564:	0e 94 03 a6 	call	0x14c06	; 0x14c06 <uart_print>
}
   12568:	ce 54       	subi	r28, 0x4E	; 78
   1256a:	df 4f       	sbci	r29, 0xFF	; 255
   1256c:	0f b6       	in	r0, 0x3f	; 63
   1256e:	f8 94       	cli
   12570:	de bf       	out	0x3e, r29	; 62
   12572:	0f be       	out	0x3f, r0	; 63
   12574:	cd bf       	out	0x3d, r28	; 61
   12576:	cf 91       	pop	r28
   12578:	df 91       	pop	r29
   1257a:	1f 91       	pop	r17
   1257c:	0f 91       	pop	r16
   1257e:	ff 90       	pop	r15
   12580:	ef 90       	pop	r14
   12582:	df 90       	pop	r13
   12584:	cf 90       	pop	r12
   12586:	bf 90       	pop	r11
   12588:	af 90       	pop	r10
   1258a:	9f 90       	pop	r9
   1258c:	8f 90       	pop	r8
   1258e:	7f 90       	pop	r7
   12590:	6f 90       	pop	r6
   12592:	5f 90       	pop	r5
   12594:	4f 90       	pop	r4
   12596:	3f 90       	pop	r3
   12598:	2f 90       	pop	r2
   1259a:	08 95       	ret

0001259c <GeniusProtocol>:
   return Result;	 
}

//enum eGeniusProtocolCommand{GP_PUMP_STATUS,GP_PUMP_LAST_TRANSACTION,GP_PUMP_STOP,GP_PUMP_RESUME,GP_PUMP_PRESET};

void GeniusProtocol(char dataIn){
   1259c:	ff 92       	push	r15
   1259e:	0f 93       	push	r16
   125a0:	1f 93       	push	r17
   125a2:	df 93       	push	r29
   125a4:	cf 93       	push	r28
   125a6:	cd b7       	in	r28, 0x3d	; 61
   125a8:	de b7       	in	r29, 0x3e	; 62
   125aa:	67 97       	sbiw	r28, 0x17	; 23
   125ac:	0f b6       	in	r0, 0x3f	; 63
   125ae:	f8 94       	cli
   125b0:	de bf       	out	0x3e, r29	; 62
   125b2:	0f be       	out	0x3f, r0	; 63
   125b4:	cd bf       	out	0x3d, r28	; 61
   125b6:	f8 2e       	mov	r15, r24
	 char i,GeniCmd,GeniPumpID,GeniCSum;//,sCmd[7];
	 char strSend[20];

    //uart(1,1,dataIn);

	if (dataIn==0x0D){	
   125b8:	8d 30       	cpi	r24, 0x0D	; 13
   125ba:	09 f0       	breq	.+2      	; 0x125be <GeniusProtocol+0x22>
   125bc:	4d c0       	rjmp	.+154    	; 0x12658 <GeniusProtocol+0xbc>
	    GetParameter(Geniflow,FlowLength,&GeniCmd,&GeniPumpID,&GeniCSum);
   125be:	81 ea       	ldi	r24, 0xA1	; 161
   125c0:	92 e0       	ldi	r25, 0x02	; 2
   125c2:	60 91 a0 02 	lds	r22, 0x02A0
   125c6:	ae 01       	movw	r20, r28
   125c8:	4f 5f       	subi	r20, 0xFF	; 255
   125ca:	5f 4f       	sbci	r21, 0xFF	; 255
   125cc:	9e 01       	movw	r18, r28
   125ce:	2e 5f       	subi	r18, 0xFE	; 254
   125d0:	3f 4f       	sbci	r19, 0xFF	; 255
   125d2:	8e 01       	movw	r16, r28
   125d4:	0d 5f       	subi	r16, 0xFD	; 253
   125d6:	1f 4f       	sbci	r17, 0xFF	; 255
   125d8:	0e 94 f1 6b 	call	0xd7e2	; 0xd7e2 <GetParameter>
		FlowLength=0;
   125dc:	10 92 a0 02 	sts	0x02A0, r1
		IsGeniusFlow=False;
   125e0:	10 92 9f 02 	sts	0x029F, r1
		FillChar(strSend,0,sizeof(strSend));
   125e4:	8e 01       	movw	r16, r28
   125e6:	0c 5f       	subi	r16, 0xFC	; 252
   125e8:	1f 4f       	sbci	r17, 0xFF	; 255
   125ea:	c8 01       	movw	r24, r16
   125ec:	60 e0       	ldi	r22, 0x00	; 0
   125ee:	70 e0       	ldi	r23, 0x00	; 0
   125f0:	44 e1       	ldi	r20, 0x14	; 20
   125f2:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>
		sprintf_P(strSend,PSTR("%c%.2d:"),GeniCmd,GeniPumpID);
   125f6:	8d b7       	in	r24, 0x3d	; 61
   125f8:	9e b7       	in	r25, 0x3e	; 62
   125fa:	08 97       	sbiw	r24, 0x08	; 8
   125fc:	0f b6       	in	r0, 0x3f	; 63
   125fe:	f8 94       	cli
   12600:	9e bf       	out	0x3e, r25	; 62
   12602:	0f be       	out	0x3f, r0	; 63
   12604:	8d bf       	out	0x3d, r24	; 61
   12606:	ed b7       	in	r30, 0x3d	; 61
   12608:	fe b7       	in	r31, 0x3e	; 62
   1260a:	31 96       	adiw	r30, 0x01	; 1
   1260c:	ad b7       	in	r26, 0x3d	; 61
   1260e:	be b7       	in	r27, 0x3e	; 62
   12610:	12 96       	adiw	r26, 0x02	; 2
   12612:	1c 93       	st	X, r17
   12614:	0e 93       	st	-X, r16
   12616:	11 97       	sbiw	r26, 0x01	; 1
   12618:	83 e1       	ldi	r24, 0x13	; 19
   1261a:	95 e0       	ldi	r25, 0x05	; 5
   1261c:	93 83       	std	Z+3, r25	; 0x03
   1261e:	82 83       	std	Z+2, r24	; 0x02
   12620:	89 81       	ldd	r24, Y+1	; 0x01
   12622:	84 83       	std	Z+4, r24	; 0x04
   12624:	15 82       	std	Z+5, r1	; 0x05
   12626:	8a 81       	ldd	r24, Y+2	; 0x02
   12628:	86 83       	std	Z+6, r24	; 0x06
   1262a:	17 82       	std	Z+7, r1	; 0x07
   1262c:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		//uart_print(1,1,strSend);


		if ((SumChecksum(strSend))==GeniCSum){
   12630:	8d b7       	in	r24, 0x3d	; 61
   12632:	9e b7       	in	r25, 0x3e	; 62
   12634:	08 96       	adiw	r24, 0x08	; 8
   12636:	0f b6       	in	r0, 0x3f	; 63
   12638:	f8 94       	cli
   1263a:	9e bf       	out	0x3e, r25	; 62
   1263c:	0f be       	out	0x3f, r0	; 63
   1263e:	8d bf       	out	0x3d, r24	; 61
   12640:	c8 01       	movw	r24, r16
   12642:	0e 94 bc 6c 	call	0xd978	; 0xd978 <SumChecksum>
   12646:	9b 81       	ldd	r25, Y+3	; 0x03
   12648:	89 17       	cp	r24, r25
   1264a:	31 f4       	brne	.+12     	; 0x12658 <GeniusProtocol+0xbc>
		     switch(GeniCmd){
   1264c:	89 81       	ldd	r24, Y+1	; 0x01
   1264e:	84 35       	cpi	r24, 0x54	; 84
   12650:	19 f4       	brne	.+6      	; 0x12658 <GeniusProtocol+0xbc>
			 case 'C'://PumpStatus
			      GeniusSendPumpStatus(GeniPumpID);
			      break;
             case 'T'://Transaction Request: T01:239<0D>
			      GeniusSendLastTransaction(GeniPumpID);
   12652:	8a 81       	ldd	r24, Y+2	; 0x02
   12654:	0e 94 b1 91 	call	0x12362	; 0x12362 <GeniusSendLastTransaction>
			      break; 
   12658:	e4 eb       	ldi	r30, 0xB4	; 180
   1265a:	f2 e0       	ldi	r31, 0x02	; 2
			 }
		}
	}
	//Shifting
	for(i=19;i>0;i--){
	    Geniflow[i]=Geniflow[i-1];	
   1265c:	82 91       	ld	r24, -Z
   1265e:	81 83       	std	Z+1, r24	; 0x01
			      break;
			 }
		}
	}
	//Shifting
	for(i=19;i>0;i--){
   12660:	92 e0       	ldi	r25, 0x02	; 2
   12662:	e1 3a       	cpi	r30, 0xA1	; 161
   12664:	f9 07       	cpc	r31, r25
   12666:	d1 f7       	brne	.-12     	; 0x1265c <GeniusProtocol+0xc0>
	    Geniflow[i]=Geniflow[i-1];	
	}Geniflow[0]=dataIn;
   12668:	f0 92 a1 02 	sts	0x02A1, r15

	if (IsGeniusCommand(dataIn)==True)IsGeniusFlow=True;
   1266c:	8f 2d       	mov	r24, r15
   1266e:	0e 94 73 6c 	call	0xd8e6	; 0xd8e6 <IsGeniusCommand>
   12672:	81 30       	cpi	r24, 0x01	; 1
   12674:	11 f4       	brne	.+4      	; 0x1267a <GeniusProtocol+0xde>
   12676:	80 93 9f 02 	sts	0x029F, r24
	if (IsGeniusFlow==True)FlowLength++;
   1267a:	80 91 9f 02 	lds	r24, 0x029F
   1267e:	81 30       	cpi	r24, 0x01	; 1
   12680:	29 f4       	brne	.+10     	; 0x1268c <GeniusProtocol+0xf0>
   12682:	80 91 a0 02 	lds	r24, 0x02A0
   12686:	8f 5f       	subi	r24, 0xFF	; 255
   12688:	80 93 a0 02 	sts	0x02A0, r24
	Geniflow[3]=Geniflow[2];
	Geniflow[2]=Geniflow[1];
	Geniflow[1]=Geniflow[0];
	Geniflow[0]=dataIn;
*/
}
   1268c:	67 96       	adiw	r28, 0x17	; 23
   1268e:	0f b6       	in	r0, 0x3f	; 63
   12690:	f8 94       	cli
   12692:	de bf       	out	0x3e, r29	; 62
   12694:	0f be       	out	0x3f, r0	; 63
   12696:	cd bf       	out	0x3d, r28	; 61
   12698:	cf 91       	pop	r28
   1269a:	df 91       	pop	r29
   1269c:	1f 91       	pop	r17
   1269e:	0f 91       	pop	r16
   126a0:	ff 90       	pop	r15
   126a2:	08 95       	ret

000126a4 <__vector_30>:
}

// NotSuccessful! 


ISR(USART1_RX_vect){
   126a4:	1f 92       	push	r1
   126a6:	0f 92       	push	r0
   126a8:	0f b6       	in	r0, 0x3f	; 63
   126aa:	0f 92       	push	r0
   126ac:	0b b6       	in	r0, 0x3b	; 59
   126ae:	0f 92       	push	r0
   126b0:	11 24       	eor	r1, r1
   126b2:	1f 93       	push	r17
   126b4:	2f 93       	push	r18
   126b6:	3f 93       	push	r19
   126b8:	4f 93       	push	r20
   126ba:	5f 93       	push	r21
   126bc:	6f 93       	push	r22
   126be:	7f 93       	push	r23
   126c0:	8f 93       	push	r24
   126c2:	9f 93       	push	r25
   126c4:	af 93       	push	r26
   126c6:	bf 93       	push	r27
   126c8:	ef 93       	push	r30
   126ca:	ff 93       	push	r31
	char dataTX1,serialSend[12];
	static char IsAdvanZProtocol=False;
	unsigned int i;
	dataTX1 = UDR1;
   126cc:	10 91 9c 00 	lds	r17, 0x009C
    //Not Successfull!
	//NewPacket
	if (IsNewPacket==True){
   126d0:	80 91 66 02 	lds	r24, 0x0266
   126d4:	81 30       	cpi	r24, 0x01	; 1
   126d6:	51 f4       	brne	.+20     	; 0x126ec <__vector_30+0x48>
	    if (dataTX1==0x01){
   126d8:	11 30       	cpi	r17, 0x01	; 1
   126da:	41 f4       	brne	.+16     	; 0x126ec <__vector_30+0x48>
		    char_count=0;
   126dc:	10 92 68 02 	sts	0x0268, r1
   126e0:	10 92 67 02 	sts	0x0267, r1
            IsNewPacket=False;
   126e4:	10 92 66 02 	sts	0x0266, r1
			IsAdvanZProtocol=True;
   126e8:	10 93 77 03 	sts	0x0377, r17
			}
	}
    //Save data to buffer if AdvanZ MSG
	if (IsAdvanZProtocol==True){
   126ec:	80 91 77 03 	lds	r24, 0x0377
   126f0:	81 30       	cpi	r24, 0x01	; 1
   126f2:	71 f4       	brne	.+28     	; 0x12710 <__vector_30+0x6c>
	    rcv_trans[char_count]=dataTX1;
   126f4:	20 91 67 02 	lds	r18, 0x0267
   126f8:	30 91 68 02 	lds	r19, 0x0268
   126fc:	f9 01       	movw	r30, r18
   126fe:	ef 5f       	subi	r30, 0xFF	; 255
   12700:	f5 4f       	sbci	r31, 0xF5	; 245
   12702:	10 83       	st	Z, r17
	    char_count++; 
   12704:	2f 5f       	subi	r18, 0xFF	; 255
   12706:	3f 4f       	sbci	r19, 0xFF	; 255
   12708:	30 93 68 02 	sts	0x0268, r19
   1270c:	20 93 67 02 	sts	0x0267, r18
	}

	if (dataTX1==0x02){
   12710:	12 30       	cpi	r17, 0x02	; 2
   12712:	c1 f5       	brne	.+112    	; 0x12784 <__vector_30+0xe0>
		transLength=char_count;
   12714:	60 91 67 02 	lds	r22, 0x0267
   12718:	70 91 68 02 	lds	r23, 0x0268
   1271c:	70 93 6a 02 	sts	0x026A, r23
   12720:	60 93 69 02 	sts	0x0269, r22
		char_count=0;
   12724:	10 92 68 02 	sts	0x0268, r1
   12728:	10 92 67 02 	sts	0x0267, r1
		IsAdvanZProtocol=False;
   1272c:	10 92 77 03 	sts	0x0377, r1

		//MessageIdentification
        if (MsgCode!=MSG_NONE)MsgCode=MSG_NONE;
	    MsgCode=((rcv_trans[35]-'0')*10)+(rcv_trans[36]-'0');
   12730:	80 91 25 0a 	lds	r24, 0x0A25
   12734:	80 51       	subi	r24, 0x10	; 16
   12736:	90 91 24 0a 	lds	r25, 0x0A24
   1273a:	99 0f       	add	r25, r25
   1273c:	29 2f       	mov	r18, r25
   1273e:	22 0f       	add	r18, r18
   12740:	22 0f       	add	r18, r18
   12742:	29 0f       	add	r18, r25
   12744:	82 0f       	add	r24, r18
   12746:	80 93 24 01 	sts	0x0124, r24
     
	    IdentifyMessage(rcv_trans[0],transLength);
   1274a:	80 91 01 0a 	lds	r24, 0x0A01
   1274e:	0e 94 1f 5a 	call	0xb43e	; 0xb43e <IdentifyMessage>
		IsNewPacket=True;
   12752:	81 e0       	ldi	r24, 0x01	; 1
   12754:	80 93 66 02 	sts	0x0266, r24

		if ((rcv_trans[35]=='8')&&(rcv_trans[36]=='1')){
   12758:	90 91 24 0a 	lds	r25, 0x0A24
   1275c:	98 33       	cpi	r25, 0x38	; 56
   1275e:	91 f4       	brne	.+36     	; 0x12784 <__vector_30+0xe0>
   12760:	90 91 25 0a 	lds	r25, 0x0A25
   12764:	91 33       	cpi	r25, 0x31	; 49
   12766:	71 f4       	brne	.+28     	; 0x12784 <__vector_30+0xe0>
		   LengthMessage81=transLength-12-44;
   12768:	20 91 69 02 	lds	r18, 0x0269
   1276c:	30 91 6a 02 	lds	r19, 0x026A
   12770:	28 53       	subi	r18, 0x38	; 56
   12772:	30 40       	sbci	r19, 0x00	; 0
   12774:	30 93 6c 02 	sts	0x026C, r19
   12778:	20 93 6b 02 	sts	0x026B, r18
		   IsMessage81=True;
   1277c:	80 93 85 02 	sts	0x0285, r24
		   IsCompleteFilling=True;
   12780:	80 93 88 02 	sts	0x0288, r24
		

	}//Endif(dataTX1==0x02)

	//ConfigDetection: iConf?<0D><0A>
	if (IsNewPacket!=True)
   12784:	80 91 66 02 	lds	r24, 0x0266
   12788:	81 30       	cpi	r24, 0x01	; 1
   1278a:	19 f0       	breq	.+6      	; 0x12792 <__vector_30+0xee>
	    ConfigProtocol(dataTX1);
   1278c:	81 2f       	mov	r24, r17
   1278e:	0e 94 7f 14 	call	0x28fe	; 0x28fe <ConfigProtocol>
	//GeniusDetection: [CMD][MSG][CSUM][0x0D]
	if ((IFType==IT_STANDALONE)&&(IsNewPacket!=True))
   12792:	80 91 00 01 	lds	r24, 0x0100
   12796:	82 30       	cpi	r24, 0x02	; 2
   12798:	39 f4       	brne	.+14     	; 0x127a8 <__vector_30+0x104>
   1279a:	80 91 66 02 	lds	r24, 0x0266
   1279e:	81 30       	cpi	r24, 0x01	; 1
   127a0:	19 f0       	breq	.+6      	; 0x127a8 <__vector_30+0x104>
	     GeniusProtocol(dataTX1);		
   127a2:	81 2f       	mov	r24, r17
   127a4:	0e 94 ce 92 	call	0x1259c	; 0x1259c <GeniusProtocol>
    //uart(0,1,dataTX1);
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}
   127a8:	ff 91       	pop	r31
   127aa:	ef 91       	pop	r30
   127ac:	bf 91       	pop	r27
   127ae:	af 91       	pop	r26
   127b0:	9f 91       	pop	r25
   127b2:	8f 91       	pop	r24
   127b4:	7f 91       	pop	r23
   127b6:	6f 91       	pop	r22
   127b8:	5f 91       	pop	r21
   127ba:	4f 91       	pop	r20
   127bc:	3f 91       	pop	r19
   127be:	2f 91       	pop	r18
   127c0:	1f 91       	pop	r17
   127c2:	0f 90       	pop	r0
   127c4:	0b be       	out	0x3b, r0	; 59
   127c6:	0f 90       	pop	r0
   127c8:	0f be       	out	0x3f, r0	; 63
   127ca:	0f 90       	pop	r0
   127cc:	1f 90       	pop	r1
   127ce:	18 95       	reti

000127d0 <SetIncomingTransStatus>:
}


void SetIncomingTransStatus(char iPumpID,char xTransStatus){
char iStatus,xMaskA,xMaskB,xMaskC,xPumpID;
	 xPumpID=(iPumpID&0x0F);
   127d0:	98 2f       	mov	r25, r24
   127d2:	9f 70       	andi	r25, 0x0F	; 15
     iStatus=IncomingTransaction[xPumpID/8];
   127d4:	e9 2f       	mov	r30, r25
   127d6:	e6 95       	lsr	r30
   127d8:	e6 95       	lsr	r30
   127da:	e6 95       	lsr	r30
   127dc:	f0 e0       	ldi	r31, 0x00	; 0
   127de:	e3 53       	subi	r30, 0x33	; 51
   127e0:	f3 4f       	sbci	r31, 0xF3	; 243
   127e2:	40 81       	ld	r20, Z
	 if (xTransStatus==TS_NEW){
   127e4:	62 30       	cpi	r22, 0x02	; 2
   127e6:	61 f4       	brne	.+24     	; 0x12800 <SetIncomingTransStatus+0x30>
	     iStatus=(iStatus|(1<<(xPumpID%8)));	 
   127e8:	29 2f       	mov	r18, r25
   127ea:	27 70       	andi	r18, 0x07	; 7
   127ec:	81 e0       	ldi	r24, 0x01	; 1
   127ee:	90 e0       	ldi	r25, 0x00	; 0
   127f0:	02 c0       	rjmp	.+4      	; 0x127f6 <SetIncomingTransStatus+0x26>
   127f2:	88 0f       	add	r24, r24
   127f4:	99 1f       	adc	r25, r25
   127f6:	2a 95       	dec	r18
   127f8:	e2 f7       	brpl	.-8      	; 0x127f2 <SetIncomingTransStatus+0x22>
   127fa:	84 2b       	or	r24, r20
		 IncomingTransaction[xPumpID/8]=iStatus;
   127fc:	80 83       	st	Z, r24
   127fe:	08 95       	ret
	 }else if (xTransStatus==TS_OLD){
   12800:	63 30       	cpi	r22, 0x03	; 3
   12802:	c9 f4       	brne	.+50     	; 0x12836 <SetIncomingTransStatus+0x66>
		 xMaskA=(0xFE<<(xPumpID%8));
   12804:	97 70       	andi	r25, 0x07	; 7
   12806:	2e ef       	ldi	r18, 0xFE	; 254
   12808:	30 e0       	ldi	r19, 0x00	; 0
   1280a:	52 2f       	mov	r21, r18
   1280c:	01 c0       	rjmp	.+2      	; 0x12810 <SetIncomingTransStatus+0x40>
   1280e:	55 0f       	add	r21, r21
   12810:	9a 95       	dec	r25
   12812:	ea f7       	brpl	.-6      	; 0x1280e <SetIncomingTransStatus+0x3e>
   12814:	95 2f       	mov	r25, r21
		 xMaskB=(~xMaskA)>>1;
		 xMaskC=xMaskA|xMaskB;
		 iStatus=iStatus&xMaskC;
		 IncomingTransaction[iPumpID/8]=iStatus;
   12816:	86 95       	lsr	r24
   12818:	86 95       	lsr	r24
   1281a:	86 95       	lsr	r24
   1281c:	e8 2f       	mov	r30, r24
   1281e:	f0 e0       	ldi	r31, 0x00	; 0
   12820:	e3 53       	subi	r30, 0x33	; 51
   12822:	f3 4f       	sbci	r31, 0xF3	; 243
	 if (xTransStatus==TS_NEW){
	     iStatus=(iStatus|(1<<(xPumpID%8)));	 
		 IncomingTransaction[xPumpID/8]=iStatus;
	 }else if (xTransStatus==TS_OLD){
		 xMaskA=(0xFE<<(xPumpID%8));
		 xMaskB=(~xMaskA)>>1;
   12824:	25 2f       	mov	r18, r21
   12826:	30 e0       	ldi	r19, 0x00	; 0
   12828:	20 95       	com	r18
   1282a:	30 95       	com	r19
   1282c:	35 95       	asr	r19
   1282e:	27 95       	ror	r18
		 xMaskC=xMaskA|xMaskB;
   12830:	29 2b       	or	r18, r25
		 iStatus=iStatus&xMaskC;
   12832:	24 23       	and	r18, r20
		 IncomingTransaction[iPumpID/8]=iStatus;
   12834:	20 83       	st	Z, r18
   12836:	08 95       	ret

00012838 <StoreStandaloneTransData>:
     SendSlaveCommand(SC_TOTALIZER_ACK,iPumpID);
	 UpdateStandaloneStatus((iPumpID&0x0F),PS_TOTALIZER);	 
}
         
			                                         //      STX     MSGID  PumpID              6        8        8
void StoreStandaloneTransData(char *strRawTransData){//  [0x50,0x05]  01      01      1       004500   00000200  00000012 [0x06,0x60] = 24
   12838:	2f 92       	push	r2
   1283a:	3f 92       	push	r3
   1283c:	4f 92       	push	r4
   1283e:	5f 92       	push	r5
   12840:	6f 92       	push	r6
   12842:	7f 92       	push	r7
   12844:	8f 92       	push	r8
   12846:	9f 92       	push	r9
   12848:	af 92       	push	r10
   1284a:	bf 92       	push	r11
   1284c:	cf 92       	push	r12
   1284e:	df 92       	push	r13
   12850:	ef 92       	push	r14
   12852:	ff 92       	push	r15
   12854:	0f 93       	push	r16
   12856:	1f 93       	push	r17
   12858:	df 93       	push	r29
   1285a:	cf 93       	push	r28
   1285c:	cd b7       	in	r28, 0x3d	; 61
   1285e:	de b7       	in	r29, 0x3e	; 62
   12860:	e4 97       	sbiw	r28, 0x34	; 52
   12862:	0f b6       	in	r0, 0x3f	; 63
   12864:	f8 94       	cli
   12866:	de bf       	out	0x3e, r29	; 62
   12868:	0f be       	out	0x3f, r0	; 63
   1286a:	cd bf       	out	0x3d, r28	; 61
   1286c:	7c 01       	movw	r14, r24
	 char strTransDate[9],strTransTime[9];
	 char strSend[30];
	 char TransDigit;
	 char FIPAddr;
      
	 StrPosCopy(strRawTransData,strPumpID,2,2);
   1286e:	8e 01       	movw	r16, r28
   12870:	0f 5f       	subi	r16, 0xFF	; 255
   12872:	1f 4f       	sbci	r17, 0xFF	; 255
   12874:	b8 01       	movw	r22, r16
   12876:	42 e0       	ldi	r20, 0x02	; 2
   12878:	50 e0       	ldi	r21, 0x00	; 0
   1287a:	22 e0       	ldi	r18, 0x02	; 2
   1287c:	30 e0       	ldi	r19, 0x00	; 0
   1287e:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
	 RemZeroLead(strPumpID);
   12882:	c8 01       	movw	r24, r16
   12884:	0e 94 93 39 	call	0x7326	; 0x7326 <RemZeroLead>
	 iPumpID=atoi(strPumpID); 
   12888:	c8 01       	movw	r24, r16
   1288a:	0e 94 e0 a7 	call	0x14fc0	; 0x14fc0 <atoi>
   1288e:	89 ab       	std	Y+49, r24	; 0x31
	 
	 FIPAddr=GetFIPAddr(iPumpID);
   12890:	0e 94 50 6e 	call	0xdca0	; 0xdca0 <GetFIPAddr>
   12894:	78 2e       	mov	r7, r24
	 if (FIPAddr>0){
   12896:	88 23       	and	r24, r24
   12898:	09 f4       	brne	.+2      	; 0x1289c <StoreStandaloneTransData+0x64>
   1289a:	74 c1       	rjmp	.+744    	; 0x12b84 <StoreStandaloneTransData+0x34c>
	    Dest[IdxSource+i]=Source[i];
	 }Dest[IdxSource+Length]=0;
}
char CharPosCopy(char *Source, unsigned int IdxSource){
     char Result;
     Result=Source[IdxSource];
   1289c:	d7 01       	movw	r26, r14
   1289e:	14 96       	adiw	r26, 0x04	; 4
   128a0:	bc 91       	ld	r27, X
   128a2:	bb ab       	std	Y+51, r27	; 0x33
   128a4:	f7 01       	movw	r30, r14
   128a6:	f5 81       	ldd	r31, Z+5	; 0x05
   128a8:	fc ab       	std	Y+52, r31	; 0x34
	     FIPAddr=FIPAddr-1;
	     //01 01 1 1 004500 0000055 0002475 
		 PNozzle=CharPosCopy(strRawTransData,4)-'0';
		 PGrade=CharPosCopy(strRawTransData,5)-'0';

		 FillChar(strPPU,sizeof(strPPU),0);
   128aa:	24 e0       	ldi	r18, 0x04	; 4
   128ac:	c2 2e       	mov	r12, r18
   128ae:	d1 2c       	mov	r13, r1
   128b0:	cc 0e       	add	r12, r28
   128b2:	dd 1e       	adc	r13, r29
   128b4:	c6 01       	movw	r24, r12
   128b6:	67 e0       	ldi	r22, 0x07	; 7
   128b8:	70 e0       	ldi	r23, 0x00	; 0
   128ba:	40 e0       	ldi	r20, 0x00	; 0
   128bc:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>
		 FillChar(strPVolume,sizeof(strPVolume),0);
   128c0:	9d e1       	ldi	r25, 0x1D	; 29
   128c2:	a9 2e       	mov	r10, r25
   128c4:	b1 2c       	mov	r11, r1
   128c6:	ac 0e       	add	r10, r28
   128c8:	bd 1e       	adc	r11, r29
   128ca:	c5 01       	movw	r24, r10
   128cc:	6a e0       	ldi	r22, 0x0A	; 10
   128ce:	70 e0       	ldi	r23, 0x00	; 0
   128d0:	40 e0       	ldi	r20, 0x00	; 0
   128d2:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>
		 FillChar(strPMoney,sizeof(strPMoney),0);
   128d6:	8e 01       	movw	r16, r28
   128d8:	09 5d       	subi	r16, 0xD9	; 217
   128da:	1f 4f       	sbci	r17, 0xFF	; 255
   128dc:	c8 01       	movw	r24, r16
   128de:	6a e0       	ldi	r22, 0x0A	; 10
   128e0:	70 e0       	ldi	r23, 0x00	; 0
   128e2:	40 e0       	ldi	r20, 0x00	; 0
   128e4:	0e 94 c0 4a 	call	0x9580	; 0x9580 <FillChar>

		 StrPosCopy(strRawTransData,strPPU,6,6);	 
   128e8:	c7 01       	movw	r24, r14
   128ea:	b6 01       	movw	r22, r12
   128ec:	46 e0       	ldi	r20, 0x06	; 6
   128ee:	50 e0       	ldi	r21, 0x00	; 0
   128f0:	26 e0       	ldi	r18, 0x06	; 6
   128f2:	30 e0       	ldi	r19, 0x00	; 0
   128f4:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
		 StrPosCopy(strRawTransData,strPVolume,12,8);
   128f8:	c7 01       	movw	r24, r14
   128fa:	b5 01       	movw	r22, r10
   128fc:	4c e0       	ldi	r20, 0x0C	; 12
   128fe:	50 e0       	ldi	r21, 0x00	; 0
   12900:	28 e0       	ldi	r18, 0x08	; 8
   12902:	30 e0       	ldi	r19, 0x00	; 0
   12904:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
		 StrPosCopy(strRawTransData,strPMoney,20,8);
   12908:	c7 01       	movw	r24, r14
   1290a:	b8 01       	movw	r22, r16
   1290c:	44 e1       	ldi	r20, 0x14	; 20
   1290e:	50 e0       	ldi	r21, 0x00	; 0
   12910:	28 e0       	ldi	r18, 0x08	; 8
   12912:	30 e0       	ldi	r19, 0x00	; 0
   12914:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>

		 TransDigit=Ord(CharPosCopy(strRawTransData,28));
   12918:	d7 01       	movw	r26, r14
   1291a:	5c 96       	adiw	r26, 0x1c	; 28
   1291c:	8c 91       	ld	r24, X
   1291e:	0e 94 30 61 	call	0xc260	; 0xc260 <Ord>
		 //Normalize7Digit
		 //sprintf_P(strSend,PSTR("Digit: %d"),TransDigit);
		 //uart_print(1,1,strSend);
		 if  (TransDigit==8){
   12922:	88 30       	cpi	r24, 0x08	; 8
   12924:	79 f4       	brne	.+30     	; 0x12944 <StoreStandaloneTransData+0x10c>
			  StrPosCopy(strPMoney,strPMoney,0,strlen(strPMoney)-1);	 
   12926:	f8 01       	movw	r30, r16
   12928:	01 90       	ld	r0, Z+
   1292a:	00 20       	and	r0, r0
   1292c:	e9 f7       	brne	.-6      	; 0x12928 <StoreStandaloneTransData+0xf0>
   1292e:	9f 01       	movw	r18, r30
   12930:	20 1b       	sub	r18, r16
   12932:	31 0b       	sbc	r19, r17
   12934:	22 50       	subi	r18, 0x02	; 2
   12936:	30 40       	sbci	r19, 0x00	; 0
   12938:	c8 01       	movw	r24, r16
   1293a:	b8 01       	movw	r22, r16
   1293c:	40 e0       	ldi	r20, 0x00	; 0
   1293e:	50 e0       	ldi	r21, 0x00	; 0
   12940:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
		 }
		 RemZeroLead(strPPU);
   12944:	84 e0       	ldi	r24, 0x04	; 4
   12946:	48 2e       	mov	r4, r24
   12948:	51 2c       	mov	r5, r1
   1294a:	4c 0e       	add	r4, r28
   1294c:	5d 1e       	adc	r5, r29
   1294e:	c2 01       	movw	r24, r4
   12950:	0e 94 93 39 	call	0x7326	; 0x7326 <RemZeroLead>
		 RemZeroLead(strPVolume);
   12954:	0d e1       	ldi	r16, 0x1D	; 29
   12956:	20 2e       	mov	r2, r16
   12958:	31 2c       	mov	r3, r1
   1295a:	2c 0e       	add	r2, r28
   1295c:	3d 1e       	adc	r3, r29
   1295e:	c1 01       	movw	r24, r2
   12960:	0e 94 93 39 	call	0x7326	; 0x7326 <RemZeroLead>
		 RemZeroLead(strPMoney);
   12964:	17 e2       	ldi	r17, 0x27	; 39
   12966:	81 2e       	mov	r8, r17
   12968:	91 2c       	mov	r9, r1
   1296a:	8c 0e       	add	r8, r28
   1296c:	9d 1e       	adc	r9, r29
   1296e:	c4 01       	movw	r24, r8
   12970:	0e 94 93 39 	call	0x7326	; 0x7326 <RemZeroLead>
		 //sprintf_P(strSend,PSTR("Money: %s"),strPMoney);
		 //uart_print(1,1,strSend);


		 //Void Detection
		 if (atoi(strPMoney)==0)TransactionStatus=TS_VOID;
   12974:	c4 01       	movw	r24, r8
   12976:	0e 94 e0 a7 	call	0x14fc0	; 0x14fc0 <atoi>
   1297a:	f9 a9       	ldd	r31, Y+49	; 0x31
   1297c:	ff 70       	andi	r31, 0x0F	; 15
   1297e:	fa ab       	std	Y+50, r31	; 0x32
   12980:	00 97       	sbiw	r24, 0x00	; 0
   12982:	29 f4       	brne	.+10     	; 0x1298e <StoreStandaloneTransData+0x156>
		 else TransactionStatus=TS_NEW;
		 
		 if (TransactionStatus==TS_VOID){//RejectData
			 UpdateStandaloneStatus((iPumpID&0x0F),PS_VOID);
   12984:	8f 2f       	mov	r24, r31
   12986:	63 e1       	ldi	r22, 0x13	; 19
   12988:	0e 94 8f 81 	call	0x1031e	; 0x1031e <UpdateStandaloneStatus>
   1298c:	fb c0       	rjmp	.+502    	; 0x12b84 <StoreStandaloneTransData+0x34c>
	 RemZeroLead(strPumpID);
	 iPumpID=atoi(strPumpID); 
	 
	 FIPAddr=GetFIPAddr(iPumpID);
	 if (FIPAddr>0){
	     FIPAddr=FIPAddr-1;
   1298e:	7a 94       	dec	r7
			 UpdateStandaloneStatus((iPumpID&0x0F),PS_VOID);
		 }
		 else 
		 if (TransactionStatus=TS_NEW){ 
			 //Update ReprintReady
			 ReprintReady[FIPAddr]=True;//Ready for Printing
   12990:	67 2c       	mov	r6, r7
   12992:	77 24       	eor	r7, r7
   12994:	f3 01       	movw	r30, r6
   12996:	ed 5e       	subi	r30, 0xED	; 237
   12998:	fe 4f       	sbci	r31, 0xFE	; 254
   1299a:	81 e0       	ldi	r24, 0x01	; 1
   1299c:	80 83       	st	Z, r24
			 //FormatMoney(strPMoney);
			 //FormatVolume(strPVolume);

			 //uart_print(1,1,strPVolume);
			 
			 GenerateTransactionNum(strTranNo);		 
   1299e:	bc e8       	ldi	r27, 0x8C	; 140
   129a0:	eb 2e       	mov	r14, r27
   129a2:	bd e0       	ldi	r27, 0x0D	; 13
   129a4:	fb 2e       	mov	r15, r27
   129a6:	c7 01       	movw	r24, r14
   129a8:	0e 94 66 59 	call	0xb2cc	; 0xb2cc <GenerateTransactionNum>
			 sprintf_P(strTransDate,PSTR("%s"),strSystemDate);
   129ac:	00 d0       	rcall	.+0      	; 0x129ae <StoreStandaloneTransData+0x176>
   129ae:	00 d0       	rcall	.+0      	; 0x129b0 <StoreStandaloneTransData+0x178>
   129b0:	00 d0       	rcall	.+0      	; 0x129b2 <StoreStandaloneTransData+0x17a>
   129b2:	ed b7       	in	r30, 0x3d	; 61
   129b4:	fe b7       	in	r31, 0x3e	; 62
   129b6:	31 96       	adiw	r30, 0x01	; 1
   129b8:	ab e0       	ldi	r26, 0x0B	; 11
   129ba:	ca 2e       	mov	r12, r26
   129bc:	d1 2c       	mov	r13, r1
   129be:	cc 0e       	add	r12, r28
   129c0:	dd 1e       	adc	r13, r29
   129c2:	ad b7       	in	r26, 0x3d	; 61
   129c4:	be b7       	in	r27, 0x3e	; 62
   129c6:	12 96       	adiw	r26, 0x02	; 2
   129c8:	dc 92       	st	X, r13
   129ca:	ce 92       	st	-X, r12
   129cc:	11 97       	sbiw	r26, 0x01	; 1
   129ce:	81 e3       	ldi	r24, 0x31	; 49
   129d0:	94 e2       	ldi	r25, 0x24	; 36
   129d2:	93 83       	std	Z+3, r25	; 0x03
   129d4:	82 83       	std	Z+2, r24	; 0x02
   129d6:	8e e9       	ldi	r24, 0x9E	; 158
   129d8:	94 e0       	ldi	r25, 0x04	; 4
   129da:	95 83       	std	Z+5, r25	; 0x05
   129dc:	84 83       	std	Z+4, r24	; 0x04
   129de:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
			 sprintf_P(strTransTime,PSTR("%s"),strSystemTime);
   129e2:	ed b7       	in	r30, 0x3d	; 61
   129e4:	fe b7       	in	r31, 0x3e	; 62
   129e6:	31 96       	adiw	r30, 0x01	; 1
   129e8:	74 e1       	ldi	r23, 0x14	; 20
   129ea:	a7 2e       	mov	r10, r23
   129ec:	b1 2c       	mov	r11, r1
   129ee:	ac 0e       	add	r10, r28
   129f0:	bd 1e       	adc	r11, r29
   129f2:	ad b7       	in	r26, 0x3d	; 61
   129f4:	be b7       	in	r27, 0x3e	; 62
   129f6:	12 96       	adiw	r26, 0x02	; 2
   129f8:	bc 92       	st	X, r11
   129fa:	ae 92       	st	-X, r10
   129fc:	11 97       	sbiw	r26, 0x01	; 1
   129fe:	8e e2       	ldi	r24, 0x2E	; 46
   12a00:	94 e2       	ldi	r25, 0x24	; 36
   12a02:	93 83       	std	Z+3, r25	; 0x03
   12a04:	82 83       	std	Z+2, r24	; 0x02
   12a06:	88 e5       	ldi	r24, 0x58	; 88
   12a08:	99 e0       	ldi	r25, 0x09	; 9
   12a0a:	95 83       	std	Z+5, r25	; 0x05
   12a0c:	84 83       	std	Z+4, r24	; 0x04
   12a0e:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
			 sprintf_P(strShift,PSTR("%d"),eeprom_read_byte(&DefShift));
   12a12:	ed b7       	in	r30, 0x3d	; 61
   12a14:	fe b7       	in	r31, 0x3e	; 62
   12a16:	36 96       	adiw	r30, 0x06	; 6
   12a18:	0f b6       	in	r0, 0x3f	; 63
   12a1a:	f8 94       	cli
   12a1c:	fe bf       	out	0x3e, r31	; 62
   12a1e:	0f be       	out	0x3f, r0	; 63
   12a20:	ed bf       	out	0x3d, r30	; 61
   12a22:	80 e4       	ldi	r24, 0x40	; 64
   12a24:	91 e0       	ldi	r25, 0x01	; 1
   12a26:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
   12a2a:	00 d0       	rcall	.+0      	; 0x12a2c <StoreStandaloneTransData+0x1f4>
   12a2c:	00 d0       	rcall	.+0      	; 0x12a2e <StoreStandaloneTransData+0x1f6>
   12a2e:	00 d0       	rcall	.+0      	; 0x12a30 <StoreStandaloneTransData+0x1f8>
   12a30:	ed b7       	in	r30, 0x3d	; 61
   12a32:	fe b7       	in	r31, 0x3e	; 62
   12a34:	31 96       	adiw	r30, 0x01	; 1
   12a36:	2d e6       	ldi	r18, 0x6D	; 109
   12a38:	3d e0       	ldi	r19, 0x0D	; 13
   12a3a:	ad b7       	in	r26, 0x3d	; 61
   12a3c:	be b7       	in	r27, 0x3e	; 62
   12a3e:	12 96       	adiw	r26, 0x02	; 2
   12a40:	3c 93       	st	X, r19
   12a42:	2e 93       	st	-X, r18
   12a44:	11 97       	sbiw	r26, 0x01	; 1
   12a46:	2b e2       	ldi	r18, 0x2B	; 43
   12a48:	34 e2       	ldi	r19, 0x24	; 36
   12a4a:	33 83       	std	Z+3, r19	; 0x03
   12a4c:	22 83       	std	Z+2, r18	; 0x02
   12a4e:	84 83       	std	Z+4, r24	; 0x04
   12a50:	15 82       	std	Z+5, r1	; 0x05
   12a52:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
					 
			 //TransNum,Date,Time
			 StrPosCopy(strTranNo,RecPumpData[FIPAddr].strTransNum,0,strlen(strTranNo));
   12a56:	d7 01       	movw	r26, r14
   12a58:	0d 90       	ld	r0, X+
   12a5a:	00 20       	and	r0, r0
   12a5c:	e9 f7       	brne	.-6      	; 0x12a58 <StoreStandaloneTransData+0x220>
   12a5e:	9d 01       	movw	r18, r26
   12a60:	21 50       	subi	r18, 0x01	; 1
   12a62:	30 40       	sbci	r19, 0x00	; 0
   12a64:	2e 19       	sub	r18, r14
   12a66:	3f 09       	sbc	r19, r15
   12a68:	ed b7       	in	r30, 0x3d	; 61
   12a6a:	fe b7       	in	r31, 0x3e	; 62
   12a6c:	36 96       	adiw	r30, 0x06	; 6
   12a6e:	0f b6       	in	r0, 0x3f	; 63
   12a70:	f8 94       	cli
   12a72:	fe bf       	out	0x3e, r31	; 62
   12a74:	0f be       	out	0x3f, r0	; 63
   12a76:	ed bf       	out	0x3d, r30	; 61
   12a78:	85 e3       	ldi	r24, 0x35	; 53
   12a7a:	90 e0       	ldi	r25, 0x00	; 0
   12a7c:	68 9e       	mul	r6, r24
   12a7e:	80 01       	movw	r16, r0
   12a80:	69 9e       	mul	r6, r25
   12a82:	10 0d       	add	r17, r0
   12a84:	78 9e       	mul	r7, r24
   12a86:	10 0d       	add	r17, r0
   12a88:	11 24       	eor	r1, r1
   12a8a:	b8 01       	movw	r22, r16
   12a8c:	61 57       	subi	r22, 0x71	; 113
   12a8e:	79 4f       	sbci	r23, 0xF9	; 249
   12a90:	c7 01       	movw	r24, r14
   12a92:	40 e0       	ldi	r20, 0x00	; 0
   12a94:	50 e0       	ldi	r21, 0x00	; 0
   12a96:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
			 StrPosCopy(strTransDate,RecPumpData[FIPAddr].strTransDate,0,strlen(strTransDate));
   12a9a:	d6 01       	movw	r26, r12
   12a9c:	0d 90       	ld	r0, X+
   12a9e:	00 20       	and	r0, r0
   12aa0:	e9 f7       	brne	.-6      	; 0x12a9c <StoreStandaloneTransData+0x264>
   12aa2:	9d 01       	movw	r18, r26
   12aa4:	21 50       	subi	r18, 0x01	; 1
   12aa6:	30 40       	sbci	r19, 0x00	; 0
   12aa8:	2c 19       	sub	r18, r12
   12aaa:	3d 09       	sbc	r19, r13
   12aac:	b8 01       	movw	r22, r16
   12aae:	6a 56       	subi	r22, 0x6A	; 106
   12ab0:	79 4f       	sbci	r23, 0xF9	; 249
   12ab2:	c6 01       	movw	r24, r12
   12ab4:	40 e0       	ldi	r20, 0x00	; 0
   12ab6:	50 e0       	ldi	r21, 0x00	; 0
   12ab8:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
			 StrPosCopy(strTransTime,RecPumpData[FIPAddr].strTransTime,0,strlen(strTransTime));
   12abc:	f5 01       	movw	r30, r10
   12abe:	01 90       	ld	r0, Z+
   12ac0:	00 20       	and	r0, r0
   12ac2:	e9 f7       	brne	.-6      	; 0x12abe <StoreStandaloneTransData+0x286>
   12ac4:	9f 01       	movw	r18, r30
   12ac6:	21 50       	subi	r18, 0x01	; 1
   12ac8:	30 40       	sbci	r19, 0x00	; 0
   12aca:	2a 19       	sub	r18, r10
   12acc:	3b 09       	sbc	r19, r11
   12ace:	b8 01       	movw	r22, r16
   12ad0:	61 56       	subi	r22, 0x61	; 97
   12ad2:	79 4f       	sbci	r23, 0xF9	; 249
   12ad4:	c5 01       	movw	r24, r10
   12ad6:	40 e0       	ldi	r20, 0x00	; 0
   12ad8:	50 e0       	ldi	r21, 0x00	; 0
   12ada:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
			 //Grade Nozzle Shift
			 RecPumpData[FIPAddr].Grade=PGrade;
   12ade:	6c e8       	ldi	r22, 0x8C	; 140
   12ae0:	e6 2e       	mov	r14, r22
   12ae2:	66 e0       	ldi	r22, 0x06	; 6
   12ae4:	f6 2e       	mov	r15, r22
   12ae6:	e0 0e       	add	r14, r16
   12ae8:	f1 1e       	adc	r15, r17
	 FIPAddr=GetFIPAddr(iPumpID);
	 if (FIPAddr>0){
	     FIPAddr=FIPAddr-1;
	     //01 01 1 1 004500 0000055 0002475 
		 PNozzle=CharPosCopy(strRawTransData,4)-'0';
		 PGrade=CharPosCopy(strRawTransData,5)-'0';
   12aea:	8c a9       	ldd	r24, Y+52	; 0x34
   12aec:	80 53       	subi	r24, 0x30	; 48
			 //TransNum,Date,Time
			 StrPosCopy(strTranNo,RecPumpData[FIPAddr].strTransNum,0,strlen(strTranNo));
			 StrPosCopy(strTransDate,RecPumpData[FIPAddr].strTransDate,0,strlen(strTransDate));
			 StrPosCopy(strTransTime,RecPumpData[FIPAddr].strTransTime,0,strlen(strTransTime));
			 //Grade Nozzle Shift
			 RecPumpData[FIPAddr].Grade=PGrade;
   12aee:	d7 01       	movw	r26, r14
   12af0:	8c 93       	st	X, r24
	 
	 FIPAddr=GetFIPAddr(iPumpID);
	 if (FIPAddr>0){
	     FIPAddr=FIPAddr-1;
	     //01 01 1 1 004500 0000055 0002475 
		 PNozzle=CharPosCopy(strRawTransData,4)-'0';
   12af2:	8b a9       	ldd	r24, Y+51	; 0x33
   12af4:	80 53       	subi	r24, 0x30	; 48
			 StrPosCopy(strTranNo,RecPumpData[FIPAddr].strTransNum,0,strlen(strTranNo));
			 StrPosCopy(strTransDate,RecPumpData[FIPAddr].strTransDate,0,strlen(strTransDate));
			 StrPosCopy(strTransTime,RecPumpData[FIPAddr].strTransTime,0,strlen(strTransTime));
			 //Grade Nozzle Shift
			 RecPumpData[FIPAddr].Grade=PGrade;
			 RecPumpData[FIPAddr].Nozzle=PNozzle;
   12af6:	11 96       	adiw	r26, 0x01	; 1
   12af8:	8c 93       	st	X, r24
			 RecPumpData[FIPAddr].Shift=atoi(strShift);
   12afa:	8d e6       	ldi	r24, 0x6D	; 109
   12afc:	9d e0       	ldi	r25, 0x0D	; 13
   12afe:	0e 94 e0 a7 	call	0x14fc0	; 0x14fc0 <atoi>
   12b02:	f7 01       	movw	r30, r14
   12b04:	82 83       	std	Z+2, r24	; 0x02
			 //Price Volume Money
			 StrPosCopy(strPPU,RecPumpData[FIPAddr].Price,0,strlen(strPPU));
   12b06:	d2 01       	movw	r26, r4
   12b08:	0d 90       	ld	r0, X+
   12b0a:	00 20       	and	r0, r0
   12b0c:	e9 f7       	brne	.-6      	; 0x12b08 <StoreStandaloneTransData+0x2d0>
   12b0e:	9d 01       	movw	r18, r26
   12b10:	21 50       	subi	r18, 0x01	; 1
   12b12:	30 40       	sbci	r19, 0x00	; 0
   12b14:	24 19       	sub	r18, r4
   12b16:	35 09       	sbc	r19, r5
   12b18:	b8 01       	movw	r22, r16
   12b1a:	68 55       	subi	r22, 0x58	; 88
   12b1c:	79 4f       	sbci	r23, 0xF9	; 249
   12b1e:	c2 01       	movw	r24, r4
   12b20:	40 e0       	ldi	r20, 0x00	; 0
   12b22:	50 e0       	ldi	r21, 0x00	; 0
   12b24:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
			 StrPosCopy(strPVolume,RecPumpData[FIPAddr].Volume,0,strlen(strPVolume));
   12b28:	f1 01       	movw	r30, r2
   12b2a:	01 90       	ld	r0, Z+
   12b2c:	00 20       	and	r0, r0
   12b2e:	e9 f7       	brne	.-6      	; 0x12b2a <StoreStandaloneTransData+0x2f2>
   12b30:	9f 01       	movw	r18, r30
   12b32:	21 50       	subi	r18, 0x01	; 1
   12b34:	30 40       	sbci	r19, 0x00	; 0
   12b36:	22 19       	sub	r18, r2
   12b38:	33 09       	sbc	r19, r3
   12b3a:	b8 01       	movw	r22, r16
   12b3c:	61 55       	subi	r22, 0x51	; 81
   12b3e:	79 4f       	sbci	r23, 0xF9	; 249
   12b40:	c1 01       	movw	r24, r2
   12b42:	40 e0       	ldi	r20, 0x00	; 0
   12b44:	50 e0       	ldi	r21, 0x00	; 0
   12b46:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>
			 StrPosCopy(strPMoney,RecPumpData[FIPAddr].Money,0,strlen(strPMoney));
   12b4a:	d4 01       	movw	r26, r8
   12b4c:	0d 90       	ld	r0, X+
   12b4e:	00 20       	and	r0, r0
   12b50:	e9 f7       	brne	.-6      	; 0x12b4c <StoreStandaloneTransData+0x314>
   12b52:	9d 01       	movw	r18, r26
   12b54:	21 50       	subi	r18, 0x01	; 1
   12b56:	30 40       	sbci	r19, 0x00	; 0
   12b58:	28 19       	sub	r18, r8
   12b5a:	39 09       	sbc	r19, r9
   12b5c:	b8 01       	movw	r22, r16
   12b5e:	68 54       	subi	r22, 0x48	; 72
   12b60:	79 4f       	sbci	r23, 0xF9	; 249
   12b62:	c4 01       	movw	r24, r8
   12b64:	40 e0       	ldi	r20, 0x00	; 0
   12b66:	50 e0       	ldi	r21, 0x00	; 0
   12b68:	0e 94 60 3f 	call	0x7ec0	; 0x7ec0 <StrPosCopy>

			 UpdateStandaloneStatus((iPumpID&0x0F),PS_PRINT_READY);
   12b6c:	8a a9       	ldd	r24, Y+50	; 0x32
   12b6e:	60 e1       	ldi	r22, 0x10	; 16
   12b70:	0e 94 8f 81 	call	0x1031e	; 0x1031e <UpdateStandaloneStatus>
			 
			 SetIncomingTransStatus(iPumpID,TS_NEW);		 
   12b74:	89 a9       	ldd	r24, Y+49	; 0x31
   12b76:	62 e0       	ldi	r22, 0x02	; 2
   12b78:	0e 94 e8 93 	call	0x127d0	; 0x127d0 <SetIncomingTransStatus>

			 SendSlaveCommand(SC_TRANSACTION_ACK,iPumpID);
   12b7c:	8b e0       	ldi	r24, 0x0B	; 11
   12b7e:	69 a9       	ldd	r22, Y+49	; 0x31
   12b80:	0e 94 29 19 	call	0x3252	; 0x3252 <SendSlaveCommand>
		 }		 
	 }    
     //uart_print(0,1,strRawTransData);
}
   12b84:	e4 96       	adiw	r28, 0x34	; 52
   12b86:	0f b6       	in	r0, 0x3f	; 63
   12b88:	f8 94       	cli
   12b8a:	de bf       	out	0x3e, r29	; 62
   12b8c:	0f be       	out	0x3f, r0	; 63
   12b8e:	cd bf       	out	0x3d, r28	; 61
   12b90:	cf 91       	pop	r28
   12b92:	df 91       	pop	r29
   12b94:	1f 91       	pop	r17
   12b96:	0f 91       	pop	r16
   12b98:	ff 90       	pop	r15
   12b9a:	ef 90       	pop	r14
   12b9c:	df 90       	pop	r13
   12b9e:	cf 90       	pop	r12
   12ba0:	bf 90       	pop	r11
   12ba2:	af 90       	pop	r10
   12ba4:	9f 90       	pop	r9
   12ba6:	8f 90       	pop	r8
   12ba8:	7f 90       	pop	r7
   12baa:	6f 90       	pop	r6
   12bac:	5f 90       	pop	r5
   12bae:	4f 90       	pop	r4
   12bb0:	3f 90       	pop	r3
   12bb2:	2f 90       	pop	r2
   12bb4:	08 95       	ret

00012bb6 <ScanStandaloneFlow>:
	 _spi(SlaveMessage);
	 _spi(0x06);
	 systemSlave();
}

void ScanStandaloneFlow(char data){  //<STX>[PumpID][STA]<ETX> --> 0x07 0xF1 0xF2 0x08
   12bb6:	0f 93       	push	r16
   12bb8:	1f 93       	push	r17
   12bba:	18 2f       	mov	r17, r24

      DataPumpID=0;
      DataPumpStatus=0;
	  MixData=0;
      //Shift data
      zDataFlow[4]=zDataFlow[3];
   12bbc:	80 91 8c 03 	lds	r24, 0x038C
   12bc0:	80 93 8d 03 	sts	0x038D, r24
	  zDataFlow[3]=zDataFlow[2];
   12bc4:	80 91 8b 03 	lds	r24, 0x038B
   12bc8:	80 93 8c 03 	sts	0x038C, r24
	  zDataFlow[2]=zDataFlow[1];
   12bcc:	90 91 8a 03 	lds	r25, 0x038A
   12bd0:	90 93 8b 03 	sts	0x038B, r25
      zDataFlow[1]=zDataFlow[0];
   12bd4:	80 91 89 03 	lds	r24, 0x0389
   12bd8:	80 93 8a 03 	sts	0x038A, r24
      zDataFlow[0]=data;
   12bdc:	10 93 89 03 	sts	0x0389, r17

      //Scan UpdatedPumpStatus Flow
	  //<STX>[ID][STA]<ETX>: 0x07[ID STA]0x08
	  if((zDataFlow[2]==0x07)&&(zDataFlow[0]==0x08)){
   12be0:	97 30       	cpi	r25, 0x07	; 7
   12be2:	71 f4       	brne	.+28     	; 0x12c00 <ScanStandaloneFlow+0x4a>
   12be4:	18 30       	cpi	r17, 0x08	; 8
   12be6:	61 f4       	brne	.+24     	; 0x12c00 <ScanStandaloneFlow+0x4a>
          MixData=zDataFlow[1];
	      DataPumpID=((MixData&0xF0)>>4);
		  DataPumpStatus=(MixData&0x0F);
   12be8:	08 2f       	mov	r16, r24
   12bea:	0f 70       	andi	r16, 0x0F	; 15
		  UpdateStandaloneStatus(DataPumpID,DataPumpStatus);
   12bec:	82 95       	swap	r24
   12bee:	8f 70       	andi	r24, 0x0F	; 15
   12bf0:	60 2f       	mov	r22, r16
   12bf2:	0e 94 8f 81 	call	0x1031e	; 0x1031e <UpdateStandaloneStatus>
		  if (DataPumpStatus!=PUMP_NONE)IsStandAloneDetected=True;
   12bf6:	0e 30       	cpi	r16, 0x0E	; 14
   12bf8:	19 f0       	breq	.+6      	; 0x12c00 <ScanStandaloneFlow+0x4a>
   12bfa:	81 e0       	ldi	r24, 0x01	; 1
   12bfc:	80 93 7b 02 	sts	0x027B, r24
		  //sprintf_P(strSend,PSTR("PS:%d Id:%d"),MixData,DataPumpID);
		  //uart_print(0,1,strSend);
	  }

	  //Scan Transaction Completion FEOT
	  if (IsStandaloneTrans==True){
   12c00:	80 91 7c 02 	lds	r24, 0x027C
   12c04:	81 30       	cpi	r24, 0x01	; 1
   12c06:	71 f4       	brne	.+28     	; 0x12c24 <ScanStandaloneFlow+0x6e>
	      strStandReceived[iFlow]=data;
   12c08:	20 91 87 03 	lds	r18, 0x0387
   12c0c:	30 91 88 03 	lds	r19, 0x0388
   12c10:	f9 01       	movw	r30, r18
   12c12:	e5 51       	subi	r30, 0x15	; 21
   12c14:	fc 4f       	sbci	r31, 0xFC	; 252
   12c16:	10 83       	st	Z, r17
		  iFlow++;
   12c18:	2f 5f       	subi	r18, 0xFF	; 255
   12c1a:	3f 4f       	sbci	r19, 0xFF	; 255
   12c1c:	30 93 88 03 	sts	0x0388, r19
   12c20:	20 93 87 03 	sts	0x0387, r18
	  }
	  if((zDataFlow[1]==0x05)&&(zDataFlow[0]==0x50)){
   12c24:	80 91 8a 03 	lds	r24, 0x038A
   12c28:	85 30       	cpi	r24, 0x05	; 5
   12c2a:	61 f4       	brne	.+24     	; 0x12c44 <ScanStandaloneFlow+0x8e>
   12c2c:	80 91 89 03 	lds	r24, 0x0389
   12c30:	80 35       	cpi	r24, 0x50	; 80
   12c32:	41 f5       	brne	.+80     	; 0x12c84 <ScanStandaloneFlow+0xce>
	      IsStandaloneTrans=True;
   12c34:	81 e0       	ldi	r24, 0x01	; 1
   12c36:	80 93 7c 02 	sts	0x027C, r24
		  iFlow=0;
   12c3a:	10 92 88 03 	sts	0x0388, r1
   12c3e:	10 92 87 03 	sts	0x0387, r1
   12c42:	20 c0       	rjmp	.+64     	; 0x12c84 <ScanStandaloneFlow+0xce>
	  }
	  if((zDataFlow[1]==0x06)&&(zDataFlow[0]==0x60)){
   12c44:	86 30       	cpi	r24, 0x06	; 6
   12c46:	f1 f4       	brne	.+60     	; 0x12c84 <ScanStandaloneFlow+0xce>
   12c48:	80 91 89 03 	lds	r24, 0x0389
   12c4c:	80 36       	cpi	r24, 0x60	; 96
   12c4e:	d1 f4       	brne	.+52     	; 0x12c84 <ScanStandaloneFlow+0xce>
	      IsStandaloneTrans=False;
   12c50:	10 92 7c 02 	sts	0x027C, r1
	      strStandReceived[iFlow]=0;
   12c54:	e0 91 87 03 	lds	r30, 0x0387
   12c58:	f0 91 88 03 	lds	r31, 0x0388
   12c5c:	e5 51       	subi	r30, 0x15	; 21
   12c5e:	fc 4f       	sbci	r31, 0xFC	; 252
   12c60:	10 82       	st	Z, r1

		  //uart_print(1,1,strStandReceived);

		  MsgIDx=GetMessageID(strStandReceived);
   12c62:	8b ee       	ldi	r24, 0xEB	; 235
   12c64:	93 e0       	ldi	r25, 0x03	; 3
   12c66:	0e 94 bc 43 	call	0x8778	; 0x8778 <GetMessageID>
          if (MsgIDx==0x01)StoreStandaloneTransData(strStandReceived);
   12c6a:	81 30       	cpi	r24, 0x01	; 1
   12c6c:	29 f4       	brne	.+10     	; 0x12c78 <ScanStandaloneFlow+0xc2>
   12c6e:	8b ee       	ldi	r24, 0xEB	; 235
   12c70:	93 e0       	ldi	r25, 0x03	; 3
   12c72:	0e 94 1c 94 	call	0x12838	; 0x12838 <StoreStandaloneTransData>
   12c76:	06 c0       	rjmp	.+12     	; 0x12c84 <ScanStandaloneFlow+0xce>
		  else
          if (MsgIDx==0x02)StoreStandaloneTotalizerData(strStandReceived);
   12c78:	82 30       	cpi	r24, 0x02	; 2
   12c7a:	21 f4       	brne	.+8      	; 0x12c84 <ScanStandaloneFlow+0xce>
   12c7c:	8b ee       	ldi	r24, 0xEB	; 235
   12c7e:	93 e0       	ldi	r25, 0x03	; 3
   12c80:	0e 94 2d 91 	call	0x1225a	; 0x1225a <StoreStandaloneTotalizerData>
	  }
	  //AcknoledgeCommand
	  if ((zDataFlow[3]==0x09)&&(zDataFlow[0]==0x0A)){
   12c84:	80 91 8c 03 	lds	r24, 0x038C
   12c88:	89 30       	cpi	r24, 0x09	; 9
   12c8a:	c1 f5       	brne	.+112    	; 0x12cfc <ScanStandaloneFlow+0x146>
   12c8c:	80 91 89 03 	lds	r24, 0x0389
   12c90:	8a 30       	cpi	r24, 0x0A	; 10
   12c92:	a1 f5       	brne	.+104    	; 0x12cfc <ScanStandaloneFlow+0x146>
	      
	      AcknoledgePump=zDataFlow[1];
   12c94:	90 91 8a 03 	lds	r25, 0x038A
   12c98:	90 93 e5 0c 	sts	0x0CE5, r25
	      AcknoledgeCommand=zDataFlow[2];	  
   12c9c:	80 91 8b 03 	lds	r24, 0x038B
   12ca0:	80 93 81 06 	sts	0x0681, r24
		  switch(AcknoledgeCommand){
   12ca4:	89 31       	cpi	r24, 0x19	; 25
   12ca6:	51 f0       	breq	.+20     	; 0x12cbc <ScanStandaloneFlow+0x106>
   12ca8:	8a 31       	cpi	r24, 0x1A	; 26
   12caa:	18 f4       	brcc	.+6      	; 0x12cb2 <ScanStandaloneFlow+0xfc>
   12cac:	85 30       	cpi	r24, 0x05	; 5
   12cae:	19 f5       	brne	.+70     	; 0x12cf6 <ScanStandaloneFlow+0x140>
   12cb0:	17 c0       	rjmp	.+46     	; 0x12ce0 <ScanStandaloneFlow+0x12a>
   12cb2:	8a 31       	cpi	r24, 0x1A	; 26
   12cb4:	c9 f0       	breq	.+50     	; 0x12ce8 <ScanStandaloneFlow+0x132>
   12cb6:	8c 31       	cpi	r24, 0x1C	; 28
   12cb8:	f1 f4       	brne	.+60     	; 0x12cf6 <ScanStandaloneFlow+0x140>
   12cba:	1a c0       	rjmp	.+52     	; 0x12cf0 <ScanStandaloneFlow+0x13a>
		  case SC_LIVE_SEQUENCE:
		       iSequencePooling=AcknoledgePump;
   12cbc:	90 93 5e 02 	sts	0x025E, r25
			   IsNewPoolingSequence=True;
   12cc0:	81 e0       	ldi	r24, 0x01	; 1
   12cc2:	80 93 5f 02 	sts	0x025F, r24
			   //SendPoolingCommand()
			   if (IsControlPooling==True){
   12cc6:	80 91 62 02 	lds	r24, 0x0262
   12cca:	81 30       	cpi	r24, 0x01	; 1
   12ccc:	a1 f4       	brne	.+40     	; 0x12cf6 <ScanStandaloneFlow+0x140>
			       IsControlPooling=False;
   12cce:	10 92 62 02 	sts	0x0262, r1
				   SendSlaveCommand(PoolCmd,PoolMsg);
   12cd2:	80 91 8b 06 	lds	r24, 0x068B
   12cd6:	60 91 cc 0c 	lds	r22, 0x0CCC
   12cda:	0e 94 29 19 	call	0x3252	; 0x3252 <SendSlaveCommand>
   12cde:	0b c0       	rjmp	.+22     	; 0x12cf6 <ScanStandaloneFlow+0x140>
                }
		       break;
          case SC_TOTALIZER:
		       IsTotalizerReceived=True;
   12ce0:	81 e0       	ldi	r24, 0x01	; 1
   12ce2:	80 93 8e 02 	sts	0x028E, r24
		       break;
   12ce6:	07 c0       	rjmp	.+14     	; 0x12cf6 <ScanStandaloneFlow+0x140>
		  case SC_POOL_RESTARTED:
		       IsPoolingRestarted=True;
   12ce8:	81 e0       	ldi	r24, 0x01	; 1
   12cea:	80 93 61 02 	sts	0x0261, r24
		       break;
   12cee:	03 c0       	rjmp	.+6      	; 0x12cf6 <ScanStandaloneFlow+0x140>
          case SC_SET_PUMP_TYPE:
		       IsSetPumpType=True;
   12cf0:	81 e0       	ldi	r24, 0x01	; 1
   12cf2:	80 93 23 01 	sts	0x0123, r24
		       break;
		  }
       IsStandaloneAcknoledge=True;
   12cf6:	81 e0       	ldi	r24, 0x01	; 1
   12cf8:	80 93 60 02 	sts	0x0260, r24
	  }
}
   12cfc:	1f 91       	pop	r17
   12cfe:	0f 91       	pop	r16
   12d00:	08 95       	ret

00012d02 <__vector_17>:
//	  sprintf(SerialSend,"Length:%i",Length);	 
//	  uart_print(1,0,SerialSend);
	 }
}

ISR(SPI_STC_vect){
   12d02:	1f 92       	push	r1
   12d04:	0f 92       	push	r0
   12d06:	0f b6       	in	r0, 0x3f	; 63
   12d08:	0f 92       	push	r0
   12d0a:	0b b6       	in	r0, 0x3b	; 59
   12d0c:	0f 92       	push	r0
   12d0e:	11 24       	eor	r1, r1
   12d10:	1f 93       	push	r17
   12d12:	2f 93       	push	r18
   12d14:	3f 93       	push	r19
   12d16:	4f 93       	push	r20
   12d18:	5f 93       	push	r21
   12d1a:	6f 93       	push	r22
   12d1c:	7f 93       	push	r23
   12d1e:	8f 93       	push	r24
   12d20:	9f 93       	push	r25
   12d22:	af 93       	push	r26
   12d24:	bf 93       	push	r27
   12d26:	ef 93       	push	r30
   12d28:	ff 93       	push	r31
char dataSPI;
//char Reply=0;
    //uart(0,1,SPDR);
	dataSPI=SPDR;
   12d2a:	1f b1       	in	r17, 0x0f	; 15

	ScanRFIDFlow(dataSPI);
   12d2c:	81 2f       	mov	r24, r17
   12d2e:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <ScanRFIDFlow>
	if (IFType==IT_SLAVE)ScanEDCFlow(dataSPI);
   12d32:	80 91 00 01 	lds	r24, 0x0100
   12d36:	81 30       	cpi	r24, 0x01	; 1
   12d38:	21 f4       	brne	.+8      	; 0x12d42 <__vector_17+0x40>
   12d3a:	81 2f       	mov	r24, r17
   12d3c:	0e 94 17 43 	call	0x862e	; 0x862e <ScanEDCFlow>
   12d40:	05 c0       	rjmp	.+10     	; 0x12d4c <__vector_17+0x4a>
	else
	if (IFType==IT_STANDALONE)ScanStandaloneFlow(dataSPI);
   12d42:	82 30       	cpi	r24, 0x02	; 2
   12d44:	19 f4       	brne	.+6      	; 0x12d4c <__vector_17+0x4a>
   12d46:	81 2f       	mov	r24, r17
   12d48:	0e 94 db 95 	call	0x12bb6	; 0x12bb6 <ScanStandaloneFlow>

}
   12d4c:	ff 91       	pop	r31
   12d4e:	ef 91       	pop	r30
   12d50:	bf 91       	pop	r27
   12d52:	af 91       	pop	r26
   12d54:	9f 91       	pop	r25
   12d56:	8f 91       	pop	r24
   12d58:	7f 91       	pop	r23
   12d5a:	6f 91       	pop	r22
   12d5c:	5f 91       	pop	r21
   12d5e:	4f 91       	pop	r20
   12d60:	3f 91       	pop	r19
   12d62:	2f 91       	pop	r18
   12d64:	1f 91       	pop	r17
   12d66:	0f 90       	pop	r0
   12d68:	0b be       	out	0x3b, r0	; 59
   12d6a:	0f 90       	pop	r0
   12d6c:	0f be       	out	0x3f, r0	; 63
   12d6e:	0f 90       	pop	r0
   12d70:	1f 90       	pop	r1
   12d72:	18 95       	reti

00012d74 <GetIncomingTransStatus>:
		 IncomingTransaction[iPumpID/8]=iStatus;
	 }
}
char GetIncomingTransStatus(char iPumpID){
     char xPumpID,Result;
	 xPumpID=(iPumpID&0x0F);
   12d74:	8f 70       	andi	r24, 0x0F	; 15
	 Result=TS_NONE;
     if((IncomingTransaction[xPumpID/8]>>(xPumpID%8))==1){
   12d76:	e8 2f       	mov	r30, r24
   12d78:	e6 95       	lsr	r30
   12d7a:	e6 95       	lsr	r30
   12d7c:	e6 95       	lsr	r30
   12d7e:	f0 e0       	ldi	r31, 0x00	; 0
   12d80:	e3 53       	subi	r30, 0x33	; 51
   12d82:	f3 4f       	sbci	r31, 0xF3	; 243
   12d84:	20 81       	ld	r18, Z
   12d86:	30 e0       	ldi	r19, 0x00	; 0
   12d88:	87 70       	andi	r24, 0x07	; 7
   12d8a:	02 c0       	rjmp	.+4      	; 0x12d90 <GetIncomingTransStatus+0x1c>
   12d8c:	35 95       	asr	r19
   12d8e:	27 95       	ror	r18
   12d90:	8a 95       	dec	r24
   12d92:	e2 f7       	brpl	.-8      	; 0x12d8c <GetIncomingTransStatus+0x18>
   12d94:	21 30       	cpi	r18, 0x01	; 1
   12d96:	31 05       	cpc	r19, r1
   12d98:	29 f0       	breq	.+10     	; 0x12da4 <GetIncomingTransStatus+0x30>
	     Result=TS_NEW;
	 }else
     if((IncomingTransaction[xPumpID/8]>>(xPumpID%8))==0){
   12d9a:	21 15       	cp	r18, r1
   12d9c:	31 05       	cpc	r19, r1
   12d9e:	21 f0       	breq	.+8      	; 0x12da8 <GetIncomingTransStatus+0x34>
	 }
}
char GetIncomingTransStatus(char iPumpID){
     char xPumpID,Result;
	 xPumpID=(iPumpID&0x0F);
	 Result=TS_NONE;
   12da0:	80 e0       	ldi	r24, 0x00	; 0
   12da2:	08 95       	ret
     if((IncomingTransaction[xPumpID/8]>>(xPumpID%8))==1){
	     Result=TS_NEW;
   12da4:	82 e0       	ldi	r24, 0x02	; 2
   12da6:	08 95       	ret
	 }else
     if((IncomingTransaction[xPumpID/8]>>(xPumpID%8))==0){
	     Result=TS_OLD;
   12da8:	83 e0       	ldi	r24, 0x03	; 3
	 }
   return Result;
}
   12daa:	08 95       	ret

00012dac <systemGeniusProtocol>:

void systemGeniusProtocol(){
   12dac:	1f 93       	push	r17
static char stGeniusProtocol=gpInitScan;
static char iPumpID;
	 
	 switch(stGeniusProtocol){
   12dae:	80 91 9e 02 	lds	r24, 0x029E
   12db2:	83 30       	cpi	r24, 0x03	; 3
   12db4:	61 f1       	breq	.+88     	; 0x12e0e <systemGeniusProtocol+0x62>
   12db6:	84 30       	cpi	r24, 0x04	; 4
   12db8:	28 f4       	brcc	.+10     	; 0x12dc4 <systemGeniusProtocol+0x18>
   12dba:	81 30       	cpi	r24, 0x01	; 1
   12dbc:	81 f0       	breq	.+32     	; 0x12dde <systemGeniusProtocol+0x32>
   12dbe:	82 30       	cpi	r24, 0x02	; 2
   12dc0:	c0 f4       	brcc	.+48     	; 0x12df2 <systemGeniusProtocol+0x46>
   12dc2:	09 c0       	rjmp	.+18     	; 0x12dd6 <systemGeniusProtocol+0x2a>
   12dc4:	85 30       	cpi	r24, 0x05	; 5
   12dc6:	09 f4       	brne	.+2      	; 0x12dca <systemGeniusProtocol+0x1e>
   12dc8:	43 c0       	rjmp	.+134    	; 0x12e50 <systemGeniusProtocol+0xa4>
   12dca:	85 30       	cpi	r24, 0x05	; 5
   12dcc:	a0 f1       	brcs	.+104    	; 0x12e36 <systemGeniusProtocol+0x8a>
   12dce:	86 30       	cpi	r24, 0x06	; 6
   12dd0:	09 f0       	breq	.+2      	; 0x12dd4 <systemGeniusProtocol+0x28>
   12dd2:	52 c0       	rjmp	.+164    	; 0x12e78 <systemGeniusProtocol+0xcc>
   12dd4:	43 c0       	rjmp	.+134    	; 0x12e5c <systemGeniusProtocol+0xb0>
	 case gpInitScan:
	      iPumpID=1;
   12dd6:	81 e0       	ldi	r24, 0x01	; 1
   12dd8:	80 93 9d 02 	sts	0x029D, r24
   12ddc:	4b c0       	rjmp	.+150    	; 0x12e74 <systemGeniusProtocol+0xc8>
          stGeniusProtocol=gpScanNewTransaction;
	      break;
	 case gpScanNewTransaction:
	      if (GetIncomingTransStatus(PumpID)==TS_NEW){
   12dde:	80 91 9c 02 	lds	r24, 0x029C
   12de2:	0e 94 ba 96 	call	0x12d74	; 0x12d74 <GetIncomingTransStatus>
   12de6:	82 30       	cpi	r24, 0x02	; 2
   12de8:	09 f0       	breq	.+2      	; 0x12dec <systemGeniusProtocol+0x40>
   12dea:	46 c0       	rjmp	.+140    	; 0x12e78 <systemGeniusProtocol+0xcc>
		      IsTotalizerReceived=False;
   12dec:	10 92 8e 02 	sts	0x028E, r1
   12df0:	41 c0       	rjmp	.+130    	; 0x12e74 <systemGeniusProtocol+0xc8>
		      stGeniusProtocol=gpRequestTotalizer;
		  }
	      break;
     case gpRequestTotalizer:
	      SendPoolingCommand(SC_TOTALIZER,iPumpID);
   12df2:	80 91 9d 02 	lds	r24, 0x029D
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
   12df6:	95 e0       	ldi	r25, 0x05	; 5
   12df8:	90 93 8b 06 	sts	0x068B, r25
	 PoolMsg=plMsg;
   12dfc:	80 93 cc 0c 	sts	0x0CCC, r24
     IsControlPooling=True;
   12e00:	81 e0       	ldi	r24, 0x01	; 1
   12e02:	80 93 62 02 	sts	0x0262, r24
		      stGeniusProtocol=gpRequestTotalizer;
		  }
	      break;
     case gpRequestTotalizer:
	      SendPoolingCommand(SC_TOTALIZER,iPumpID);
		  TimSend=0;
   12e06:	10 92 7d 0d 	sts	0x0D7D, r1
		  stGeniusProtocol=gpWaitRequestedTotalizer;
   12e0a:	83 e0       	ldi	r24, 0x03	; 3
   12e0c:	33 c0       	rjmp	.+102    	; 0x12e74 <systemGeniusProtocol+0xc8>
	      break;
     case gpWaitRequestedTotalizer:
	      if ((IsTotalizerReceived==True)&&(AcknoledgePump==iPumpID)){
   12e0e:	80 91 8e 02 	lds	r24, 0x028E
   12e12:	81 30       	cpi	r24, 0x01	; 1
   12e14:	59 f4       	brne	.+22     	; 0x12e2c <systemGeniusProtocol+0x80>
   12e16:	90 91 e5 0c 	lds	r25, 0x0CE5
   12e1a:	80 91 9d 02 	lds	r24, 0x029D
   12e1e:	98 17       	cp	r25, r24
   12e20:	29 f4       	brne	.+10     	; 0x12e2c <systemGeniusProtocol+0x80>
		      IsTotalizerReceived=False;
   12e22:	10 92 8e 02 	sts	0x028E, r1
			  stGeniusProtocol=gpSendTransactionData;
   12e26:	84 e0       	ldi	r24, 0x04	; 4
   12e28:	80 93 9e 02 	sts	0x029E, r24
		  }
	      if (TimSend>TIM_SEND*2)stGeniusProtocol=gpNextPumpScan;
   12e2c:	80 91 7d 0d 	lds	r24, 0x0D7D
   12e30:	85 31       	cpi	r24, 0x15	; 21
   12e32:	10 f1       	brcs	.+68     	; 0x12e78 <systemGeniusProtocol+0xcc>
   12e34:	11 c0       	rjmp	.+34     	; 0x12e58 <systemGeniusProtocol+0xac>
	      break;
     case gpSendTransactionData:
          GeniusSendLastTransaction(iPumpID);
   12e36:	80 91 9d 02 	lds	r24, 0x029D
   12e3a:	0e 94 b1 91 	call	0x12362	; 0x12362 <GeniusSendLastTransaction>
		  SetIncomingTransStatus(iPumpID,TS_OLD);
   12e3e:	80 91 9d 02 	lds	r24, 0x029D
   12e42:	63 e0       	ldi	r22, 0x03	; 3
   12e44:	0e 94 e8 93 	call	0x127d0	; 0x127d0 <SetIncomingTransStatus>
		  
		  TimSend=0;
   12e48:	10 92 7d 0d 	sts	0x0D7D, r1
          stGeniusProtocol=gpDelayNextPumpScan;
   12e4c:	85 e0       	ldi	r24, 0x05	; 5
   12e4e:	12 c0       	rjmp	.+36     	; 0x12e74 <systemGeniusProtocol+0xc8>
	      break;
     case gpDelayNextPumpScan:
          if (TimSend>1)stGeniusProtocol=gpNextPumpScan;
   12e50:	80 91 7d 0d 	lds	r24, 0x0D7D
   12e54:	82 30       	cpi	r24, 0x02	; 2
   12e56:	80 f0       	brcs	.+32     	; 0x12e78 <systemGeniusProtocol+0xcc>
   12e58:	86 e0       	ldi	r24, 0x06	; 6
   12e5a:	0c c0       	rjmp	.+24     	; 0x12e74 <systemGeniusProtocol+0xc8>
	      break;
     case gpNextPumpScan:
          if (iPumpID<=eeprom_read_byte(&DefPoolingPumpMax)){
   12e5c:	10 91 9d 02 	lds	r17, 0x029D
   12e60:	85 e4       	ldi	r24, 0x45	; 69
   12e62:	91 e0       	ldi	r25, 0x01	; 1
   12e64:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
   12e68:	81 17       	cp	r24, r17
   12e6a:	30 f0       	brcs	.+12     	; 0x12e78 <systemGeniusProtocol+0xcc>
		      iPumpID++;
   12e6c:	1f 5f       	subi	r17, 0xFF	; 255
   12e6e:	10 93 9d 02 	sts	0x029D, r17
              stGeniusProtocol=gpScanNewTransaction;
   12e72:	81 e0       	ldi	r24, 0x01	; 1
   12e74:	80 93 9e 02 	sts	0x029E, r24
		  }
	      break;
	 }
}
   12e78:	1f 91       	pop	r17
   12e7a:	08 95       	ret

00012e7c <SetDispenser>:

void SetDispenser(char DispType){
   12e7c:	ef 92       	push	r14
   12e7e:	ff 92       	push	r15
   12e80:	0f 93       	push	r16
   12e82:	1f 93       	push	r17
   12e84:	df 93       	push	r29
   12e86:	cf 93       	push	r28
   12e88:	00 d0       	rcall	.+0      	; 0x12e8a <SetDispenser+0xe>
   12e8a:	00 d0       	rcall	.+0      	; 0x12e8c <SetDispenser+0x10>
   12e8c:	0f 92       	push	r0
   12e8e:	cd b7       	in	r28, 0x3d	; 61
   12e90:	de b7       	in	r29, 0x3e	; 62
   12e92:	08 2f       	mov	r16, r24
     char CurrentDispenser;
	 char i,DecimalSetting[5];
     CurrentDispenser=eeprom_read_byte(&DefDispenserBrand);
   12e94:	88 e3       	ldi	r24, 0x38	; 56
   12e96:	91 e0       	ldi	r25, 0x01	; 1
   12e98:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
	 if (CurrentDispenser!=DispType){
   12e9c:	80 17       	cp	r24, r16
   12e9e:	29 f0       	breq	.+10     	; 0x12eaa <SetDispenser+0x2e>
	     eeprom_write_byte(&DefDispenserBrand,DispType);
   12ea0:	88 e3       	ldi	r24, 0x38	; 56
   12ea2:	91 e0       	ldi	r25, 0x01	; 1
   12ea4:	60 2f       	mov	r22, r16
   12ea6:	0e 94 78 aa 	call	0x154f0	; 0x154f0 <__eewr_byte_m128>
	 }
     //Apply Setting for Pump respectively
	 switch(DispType){
   12eaa:	01 30       	cpi	r16, 0x01	; 1
   12eac:	19 f0       	breq	.+6      	; 0x12eb4 <SetDispenser+0x38>
   12eae:	02 30       	cpi	r16, 0x02	; 2
   12eb0:	41 f4       	brne	.+16     	; 0x12ec2 <SetDispenser+0x46>
   12eb2:	0e c0       	rjmp	.+28     	; 0x12ed0 <SetDispenser+0x54>
	 case ST_GILBARCO:
          DecimalSetting[0]=0;//Price
   12eb4:	19 82       	std	Y+1, r1	; 0x01
		  DecimalSetting[1]=3;//Volume
   12eb6:	83 e0       	ldi	r24, 0x03	; 3
   12eb8:	8a 83       	std	Y+2, r24	; 0x02
		  DecimalSetting[2]=0;//Money
   12eba:	1b 82       	std	Y+3, r1	; 0x03
		  DecimalSetting[3]=2;//TotalVolume
   12ebc:	82 e0       	ldi	r24, 0x02	; 2
   12ebe:	8c 83       	std	Y+4, r24	; 0x04
		  DecimalSetting[4]=0;//TotalMoney 
   12ec0:	1d 82       	std	Y+5, r1	; 0x05
	      break;
   12ec2:	09 e3       	ldi	r16, 0x39	; 57
   12ec4:	10 e0       	ldi	r17, 0x00	; 0
   12ec6:	7e 01       	movw	r14, r28
   12ec8:	08 94       	sec
   12eca:	e1 1c       	adc	r14, r1
   12ecc:	f1 1c       	adc	r15, r1
   12ece:	06 c0       	rjmp	.+12     	; 0x12edc <SetDispenser+0x60>
	 case ST_WAYNE_DART:
          DecimalSetting[0]=0;//Price
   12ed0:	19 82       	std	Y+1, r1	; 0x01
		  DecimalSetting[1]=2;//Volume
   12ed2:	0a 83       	std	Y+2, r16	; 0x02
		  DecimalSetting[2]=0;//Money
   12ed4:	1b 82       	std	Y+3, r1	; 0x03
		  DecimalSetting[3]=2;//TotalVolume
   12ed6:	0c 83       	std	Y+4, r16	; 0x04
		  DecimalSetting[4]=2;//TotalMoney 
   12ed8:	0d 83       	std	Y+5, r16	; 0x05
	      break;	 
   12eda:	f3 cf       	rjmp	.-26     	; 0x12ec2 <SetDispenser+0x46>
	 }
	 //ApplyChanges
     for (i=0;i<5;i++){
	     if (eeprom_read_byte(&DefDecimalPrice+i)!=DecimalSetting[i]){
   12edc:	c8 01       	movw	r24, r16
   12ede:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
   12ee2:	f7 01       	movw	r30, r14
   12ee4:	61 91       	ld	r22, Z+
   12ee6:	7f 01       	movw	r14, r30
   12ee8:	86 17       	cp	r24, r22
   12eea:	19 f0       	breq	.+6      	; 0x12ef2 <SetDispenser+0x76>
		     eeprom_write_byte(&DefDecimalPrice+i,DecimalSetting[i]);
   12eec:	c8 01       	movw	r24, r16
   12eee:	0e 94 78 aa 	call	0x154f0	; 0x154f0 <__eewr_byte_m128>
   12ef2:	0f 5f       	subi	r16, 0xFF	; 255
   12ef4:	1f 4f       	sbci	r17, 0xFF	; 255
		  DecimalSetting[3]=2;//TotalVolume
		  DecimalSetting[4]=2;//TotalMoney 
	      break;	 
	 }
	 //ApplyChanges
     for (i=0;i<5;i++){
   12ef6:	f0 e0       	ldi	r31, 0x00	; 0
   12ef8:	0e 33       	cpi	r16, 0x3E	; 62
   12efa:	1f 07       	cpc	r17, r31
   12efc:	79 f7       	brne	.-34     	; 0x12edc <SetDispenser+0x60>
	     if (eeprom_read_byte(&DefDecimalPrice+i)!=DecimalSetting[i]){
		     eeprom_write_byte(&DefDecimalPrice+i,DecimalSetting[i]);
		 }
	 }
}
   12efe:	0f 90       	pop	r0
   12f00:	0f 90       	pop	r0
   12f02:	0f 90       	pop	r0
   12f04:	0f 90       	pop	r0
   12f06:	0f 90       	pop	r0
   12f08:	cf 91       	pop	r28
   12f0a:	df 91       	pop	r29
   12f0c:	1f 91       	pop	r17
   12f0e:	0f 91       	pop	r16
   12f10:	ff 90       	pop	r15
   12f12:	ef 90       	pop	r14
   12f14:	08 95       	ret

00012f16 <FMenuPumpType>:





void FMenuPumpType(){
   12f16:	cf 92       	push	r12
   12f18:	df 92       	push	r13
   12f1a:	ef 92       	push	r14
   12f1c:	ff 92       	push	r15
   12f1e:	0f 93       	push	r16
   12f20:	1f 93       	push	r17
   12f22:	df 93       	push	r29
   12f24:	cf 93       	push	r28
   12f26:	cd b7       	in	r28, 0x3d	; 61
   12f28:	de b7       	in	r29, 0x3e	; 62
   12f2a:	a8 97       	sbiw	r28, 0x28	; 40
   12f2c:	0f b6       	in	r0, 0x3f	; 63
   12f2e:	f8 94       	cli
   12f30:	de bf       	out	0x3e, r29	; 62
   12f32:	0f be       	out	0x3f, r0	; 63
   12f34:	cd bf       	out	0x3d, r28	; 61
     stPumpType=ptInitMenu;
	 IsRunPumpType=True;
	 while(IsRunPumpType==True){
		  switch(stPumpType){
		  case ptInitMenu:
		       lcd_clear();
   12f36:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
			   lcd_printf(1,1,PSTR("-Dispenser Brand-"));
   12f3a:	81 e0       	ldi	r24, 0x01	; 1
   12f3c:	61 e0       	ldi	r22, 0x01	; 1
   12f3e:	49 e6       	ldi	r20, 0x69	; 105
   12f40:	5e e0       	ldi	r21, 0x0E	; 14
   12f42:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
			   IdxType=eeprom_read_byte(&DefDispenserBrand);
   12f46:	88 e3       	ldi	r24, 0x38	; 56
   12f48:	91 e0       	ldi	r25, 0x01	; 1
   12f4a:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
			   //Brand Selection
			   if (IdxType>=3) IdxType=0;
   12f4e:	83 30       	cpi	r24, 0x03	; 3
   12f50:	08 f0       	brcs	.+2      	; 0x12f54 <FMenuPumpType+0x3e>
   12f52:	80 e0       	ldi	r24, 0x00	; 0
               strcpy_P(DispenserBrandName,(PGM_P)pgm_read_word(&(DefListDispenserName[IdxType])));
   12f54:	e8 2e       	mov	r14, r24
   12f56:	ff 24       	eor	r15, r15
   12f58:	f7 01       	movw	r30, r14
   12f5a:	ee 0f       	add	r30, r30
   12f5c:	ff 1f       	adc	r31, r31
   12f5e:	e7 53       	subi	r30, 0x37	; 55
   12f60:	fd 4f       	sbci	r31, 0xFD	; 253
   12f62:	25 91       	lpm	r18, Z+
   12f64:	34 91       	lpm	r19, Z+
   12f66:	45 e1       	ldi	r20, 0x15	; 21
   12f68:	c4 2e       	mov	r12, r20
   12f6a:	d1 2c       	mov	r13, r1
   12f6c:	cc 0e       	add	r12, r28
   12f6e:	dd 1e       	adc	r13, r29
   12f70:	c6 01       	movw	r24, r12
   12f72:	b9 01       	movw	r22, r18
   12f74:	0e 94 fe a7 	call	0x14ffc	; 0x14ffc <strcpy_P>
			   sprintf_P(lcdteks,PSTR("%d.%s"),IdxType+1,DispenserBrandName);
   12f78:	8d b7       	in	r24, 0x3d	; 61
   12f7a:	9e b7       	in	r25, 0x3e	; 62
   12f7c:	08 97       	sbiw	r24, 0x08	; 8
   12f7e:	0f b6       	in	r0, 0x3f	; 63
   12f80:	f8 94       	cli
   12f82:	9e bf       	out	0x3e, r25	; 62
   12f84:	0f be       	out	0x3f, r0	; 63
   12f86:	8d bf       	out	0x3d, r24	; 61
   12f88:	ed b7       	in	r30, 0x3d	; 61
   12f8a:	fe b7       	in	r31, 0x3e	; 62
   12f8c:	31 96       	adiw	r30, 0x01	; 1
   12f8e:	8e 01       	movw	r16, r28
   12f90:	0f 5f       	subi	r16, 0xFF	; 255
   12f92:	1f 4f       	sbci	r17, 0xFF	; 255
   12f94:	ad b7       	in	r26, 0x3d	; 61
   12f96:	be b7       	in	r27, 0x3e	; 62
   12f98:	12 96       	adiw	r26, 0x02	; 2
   12f9a:	1c 93       	st	X, r17
   12f9c:	0e 93       	st	-X, r16
   12f9e:	11 97       	sbiw	r26, 0x01	; 1
   12fa0:	83 e6       	ldi	r24, 0x63	; 99
   12fa2:	9e e0       	ldi	r25, 0x0E	; 14
   12fa4:	93 83       	std	Z+3, r25	; 0x03
   12fa6:	82 83       	std	Z+2, r24	; 0x02
   12fa8:	08 94       	sec
   12faa:	e1 1c       	adc	r14, r1
   12fac:	f1 1c       	adc	r15, r1
   12fae:	f5 82       	std	Z+5, r15	; 0x05
   12fb0:	e4 82       	std	Z+4, r14	; 0x04
   12fb2:	d7 82       	std	Z+7, r13	; 0x07
   12fb4:	c6 82       	std	Z+6, r12	; 0x06
   12fb6:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
			   lcd_print(2,1,lcdteks);
   12fba:	8d b7       	in	r24, 0x3d	; 61
   12fbc:	9e b7       	in	r25, 0x3e	; 62
   12fbe:	08 96       	adiw	r24, 0x08	; 8
   12fc0:	0f b6       	in	r0, 0x3f	; 63
   12fc2:	f8 94       	cli
   12fc4:	9e bf       	out	0x3e, r25	; 62
   12fc6:	0f be       	out	0x3f, r0	; 63
   12fc8:	8d bf       	out	0x3d, r24	; 61
   12fca:	82 e0       	ldi	r24, 0x02	; 2
   12fcc:	61 e0       	ldi	r22, 0x01	; 1
   12fce:	a8 01       	movw	r20, r16
   12fd0:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
			   lcd_printf(4,1,PSTR("[*]Exit  [#]Change "));
   12fd4:	84 e0       	ldi	r24, 0x04	; 4
   12fd6:	61 e0       	ldi	r22, 0x01	; 1
   12fd8:	4f e4       	ldi	r20, 0x4F	; 79
   12fda:	5e e0       	ldi	r21, 0x0E	; 14
   12fdc:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
			   if (IFType==IT_STANDALONE)
   12fe0:	80 91 00 01 	lds	r24, 0x0100
   12fe4:	82 30       	cpi	r24, 0x02	; 2
   12fe6:	21 f4       	brne	.+8      	; 0x12ff0 <FMenuPumpType+0xda>
			       SendSlaveCommand(SC_STOP_POOL_SEQUENCE,0);
   12fe8:	8f e1       	ldi	r24, 0x1F	; 31
   12fea:	60 e0       	ldi	r22, 0x00	; 0
   12fec:	0e 94 29 19 	call	0x3252	; 0x3252 <SendSlaveCommand>
			   stPumpType=ptSelectBrand;
	 		   break;
          case ptSelectBrand:
		       KeyPressed = _key_scan(1);
   12ff0:	81 e0       	ldi	r24, 0x01	; 1
   12ff2:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <_key_scan>
		       KeyChar    = _key_btn(KeyPressed);
   12ff6:	0e 94 49 a3 	call	0x14692	; 0x14692 <_key_btn>

			   if (KeyChar=='#'){
   12ffa:	83 32       	cpi	r24, 0x23	; 35
   12ffc:	11 f5       	brne	.+68     	; 0x13042 <FMenuPumpType+0x12c>
			       DispenserBrand=eeprom_read_byte(&DefDispenserBrand);
   12ffe:	88 e3       	ldi	r24, 0x38	; 56
   13000:	91 e0       	ldi	r25, 0x01	; 1
   13002:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
				   if (DispenserBrand<ST_WAYNE_DART)
   13006:	82 30       	cpi	r24, 0x02	; 2
   13008:	20 f4       	brcc	.+8      	; 0x13012 <FMenuPumpType+0xfc>
				        DispenserBrand++;
   1300a:	8f 5f       	subi	r24, 0xFF	; 255
   1300c:	80 93 3c 02 	sts	0x023C, r24
   13010:	02 c0       	rjmp	.+4      	; 0x13016 <FMenuPumpType+0x100>
				   else DispenserBrand=ST_NONE;
   13012:	10 92 3c 02 	sts	0x023C, r1
                   //Apply DecimalSetting  
				   SetDispenser(DispenserBrand);
   13016:	80 91 3c 02 	lds	r24, 0x023C
   1301a:	0e 94 3e 97 	call	0x12e7c	; 0x12e7c <SetDispenser>
			       eeprom_write_byte(&DefDispenserBrand,DispenserBrand);
   1301e:	88 e3       	ldi	r24, 0x38	; 56
   13020:	91 e0       	ldi	r25, 0x01	; 1
   13022:	60 91 3c 02 	lds	r22, 0x023C
   13026:	0e 94 78 aa 	call	0x154f0	; 0x154f0 <__eewr_byte_m128>
				   //SendPoolingCommand(SC_SET_PUMP_TYPE,eeprom_read_byte(&DefDispenserBrand));
				   SendSlaveCommand(SC_SET_PUMP_TYPE,eeprom_read_byte(&DefDispenserBrand));
   1302a:	88 e3       	ldi	r24, 0x38	; 56
   1302c:	91 e0       	ldi	r25, 0x01	; 1
   1302e:	0e 94 66 aa 	call	0x154cc	; 0x154cc <__eerd_byte_m128>
   13032:	68 2f       	mov	r22, r24
   13034:	8c e1       	ldi	r24, 0x1C	; 28
   13036:	0e 94 29 19 	call	0x3252	; 0x3252 <SendSlaveCommand>
				   IsSetPumpType=True;//False;
   1303a:	81 e0       	ldi	r24, 0x01	; 1
   1303c:	80 93 23 01 	sts	0x0123, r24
   13040:	0b c0       	rjmp	.+22     	; 0x13058 <FMenuPumpType+0x142>
			       stPumpType=ptUpdated;			   
			   }else
			   if (KeyChar=='*'){
   13042:	8a 32       	cpi	r24, 0x2A	; 42
   13044:	a9 f6       	brne	.-86     	; 0x12ff0 <FMenuPumpType+0xda>
			       IsRunPumpType=False;
				   if (IFType==IT_STANDALONE)SendSlaveCommand(SC_START_POOL_SEQUENCE,0);
   13046:	80 91 00 01 	lds	r24, 0x0100
   1304a:	82 30       	cpi	r24, 0x02	; 2
   1304c:	51 f4       	brne	.+20     	; 0x13062 <FMenuPumpType+0x14c>
   1304e:	80 e2       	ldi	r24, 0x20	; 32
   13050:	60 e0       	ldi	r22, 0x00	; 0
   13052:	0e 94 29 19 	call	0x3252	; 0x3252 <SendSlaveCommand>
   13056:	05 c0       	rjmp	.+10     	; 0x13062 <FMenuPumpType+0x14c>
			   }
		       break;
          case ptUpdated:
		       if (IsSetPumpType==True){
   13058:	80 91 23 01 	lds	r24, 0x0123
   1305c:	81 30       	cpi	r24, 0x01	; 1
   1305e:	e1 f7       	brne	.-8      	; 0x13058 <FMenuPumpType+0x142>
   13060:	6a cf       	rjmp	.-300    	; 0x12f36 <FMenuPumpType+0x20>
			       stPumpType=ptInitMenu;
			   }
		       break;		         
	      }
	 }     
}
   13062:	a8 96       	adiw	r28, 0x28	; 40
   13064:	0f b6       	in	r0, 0x3f	; 63
   13066:	f8 94       	cli
   13068:	de bf       	out	0x3e, r29	; 62
   1306a:	0f be       	out	0x3f, r0	; 63
   1306c:	cd bf       	out	0x3d, r28	; 61
   1306e:	cf 91       	pop	r28
   13070:	df 91       	pop	r29
   13072:	1f 91       	pop	r17
   13074:	0f 91       	pop	r16
   13076:	ff 90       	pop	r15
   13078:	ef 90       	pop	r14
   1307a:	df 90       	pop	r13
   1307c:	cf 90       	pop	r12
   1307e:	08 95       	ret

00013080 <MasterReset>:
		     eeprom_write_byte(&DefDecimalPrice+i,DecimalSetting[i]);
		 }
	 }
}

void MasterReset(){
   13080:	bf 92       	push	r11
   13082:	cf 92       	push	r12
   13084:	df 92       	push	r13
   13086:	ef 92       	push	r14
   13088:	ff 92       	push	r15
   1308a:	0f 93       	push	r16
   1308c:	1f 93       	push	r17
   1308e:	df 93       	push	r29
   13090:	cf 93       	push	r28
   13092:	cd b7       	in	r28, 0x3d	; 61
   13094:	de b7       	in	r29, 0x3e	; 62
   13096:	ec 97       	sbiw	r28, 0x3c	; 60
   13098:	0f b6       	in	r0, 0x3f	; 63
   1309a:	f8 94       	cli
   1309c:	de bf       	out	0x3e, r29	; 62
   1309e:	0f be       	out	0x3f, r0	; 63
   130a0:	cd bf       	out	0x3d, r28	; 61
     char strEEP[50];
	 char xArray[10];
     //Restore All Stored EEPROM data to the Default
     sprintf_P(strEEP,PSTR("  "));
   130a2:	00 d0       	rcall	.+0      	; 0x130a4 <MasterReset+0x24>
   130a4:	00 d0       	rcall	.+0      	; 0x130a6 <MasterReset+0x26>
   130a6:	7b e0       	ldi	r23, 0x0B	; 11
   130a8:	e7 2e       	mov	r14, r23
   130aa:	f1 2c       	mov	r15, r1
   130ac:	ec 0e       	add	r14, r28
   130ae:	fd 1e       	adc	r15, r29
   130b0:	ed b7       	in	r30, 0x3d	; 61
   130b2:	fe b7       	in	r31, 0x3e	; 62
   130b4:	f2 82       	std	Z+2, r15	; 0x02
   130b6:	e1 82       	std	Z+1, r14	; 0x01
   130b8:	8c ed       	ldi	r24, 0xDC	; 220
   130ba:	94 e0       	ldi	r25, 0x04	; 4
   130bc:	94 83       	std	Z+4, r25	; 0x04
   130be:	83 83       	std	Z+3, r24	; 0x03
   130c0:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefOperatorName, sizeof(DefOperatorName));
   130c4:	0f 90       	pop	r0
   130c6:	0f 90       	pop	r0
   130c8:	0f 90       	pop	r0
   130ca:	0f 90       	pop	r0
   130cc:	c7 01       	movw	r24, r14
   130ce:	65 e1       	ldi	r22, 0x15	; 21
   130d0:	70 e0       	ldi	r23, 0x00	; 0
   130d2:	43 e1       	ldi	r20, 0x13	; 19
   130d4:	50 e0       	ldi	r21, 0x00	; 0
   130d6:	0e 94 6e aa 	call	0x154dc	; 0x154dc <__eewr_block_m128>

	 xArray[0]=192;	 xArray[1]=168; 	 xArray[2]=16;	 xArray[3]=70; 
   130da:	60 ec       	ldi	r22, 0xC0	; 192
   130dc:	b6 2e       	mov	r11, r22
   130de:	b9 82       	std	Y+1, r11	; 0x01
   130e0:	18 ea       	ldi	r17, 0xA8	; 168
   130e2:	1a 83       	std	Y+2, r17	; 0x02
   130e4:	00 e1       	ldi	r16, 0x10	; 16
   130e6:	0b 83       	std	Y+3, r16	; 0x03
   130e8:	86 e4       	ldi	r24, 0x46	; 70
   130ea:	8c 83       	std	Y+4, r24	; 0x04
	 eeprom_write_block((const void*) &xArray, (void*) &DefClientIP, 4);
   130ec:	6e 01       	movw	r12, r28
   130ee:	08 94       	sec
   130f0:	c1 1c       	adc	r12, r1
   130f2:	d1 1c       	adc	r13, r1
   130f4:	c6 01       	movw	r24, r12
   130f6:	68 e2       	ldi	r22, 0x28	; 40
   130f8:	70 e0       	ldi	r23, 0x00	; 0
   130fa:	44 e0       	ldi	r20, 0x04	; 4
   130fc:	50 e0       	ldi	r21, 0x00	; 0
   130fe:	0e 94 6e aa 	call	0x154dc	; 0x154dc <__eewr_block_m128>

	 xArray[0]=192;	 xArray[1]=168; 	 xArray[2]=16;	 xArray[3]=180; 
   13102:	b9 82       	std	Y+1, r11	; 0x01
   13104:	1a 83       	std	Y+2, r17	; 0x02
   13106:	0b 83       	std	Y+3, r16	; 0x03
   13108:	84 eb       	ldi	r24, 0xB4	; 180
   1310a:	8c 83       	std	Y+4, r24	; 0x04
	 eeprom_write_block((const void*) &xArray, (void*) &DefServerIP, 4);
   1310c:	c6 01       	movw	r24, r12
   1310e:	6c e2       	ldi	r22, 0x2C	; 44
   13110:	70 e0       	ldi	r23, 0x00	; 0
   13112:	44 e0       	ldi	r20, 0x04	; 4
   13114:	50 e0       	ldi	r21, 0x00	; 0
   13116:	0e 94 6e aa 	call	0x154dc	; 0x154dc <__eewr_block_m128>

     eeprom_write_byte(&DefPrinterType,PT_CUSTOM_TG02);
   1311a:	80 e3       	ldi	r24, 0x30	; 48
   1311c:	90 e0       	ldi	r25, 0x00	; 0
   1311e:	61 e0       	ldi	r22, 0x01	; 1
   13120:	0e 94 78 aa 	call	0x154f0	; 0x154f0 <__eewr_byte_m128>

	 eeprom_write_byte(&DefPrintScrollEnd,7);
   13124:	81 e3       	ldi	r24, 0x31	; 49
   13126:	90 e0       	ldi	r25, 0x00	; 0
   13128:	67 e0       	ldi	r22, 0x07	; 7
   1312a:	0e 94 78 aa 	call	0x154f0	; 0x154f0 <__eewr_byte_m128>
	 eeprom_write_byte(&DefPrintScrollSpace,5);
   1312e:	82 e3       	ldi	r24, 0x32	; 50
   13130:	90 e0       	ldi	r25, 0x00	; 0
   13132:	65 e0       	ldi	r22, 0x05	; 5
   13134:	0e 94 78 aa 	call	0x154f0	; 0x154f0 <__eewr_byte_m128>
	 eeprom_write_byte(&DefPrintAutoCut,2);
   13138:	83 e3       	ldi	r24, 0x33	; 51
   1313a:	90 e0       	ldi	r25, 0x00	; 0
   1313c:	62 e0       	ldi	r22, 0x02	; 2
   1313e:	0e 94 78 aa 	call	0x154f0	; 0x154f0 <__eewr_byte_m128>
	 eeprom_write_byte(&DefPrintLogo,0);
   13142:	84 e3       	ldi	r24, 0x34	; 52
   13144:	90 e0       	ldi	r25, 0x00	; 0
   13146:	60 e0       	ldi	r22, 0x00	; 0
   13148:	0e 94 78 aa 	call	0x154f0	; 0x154f0 <__eewr_byte_m128>
	 eeprom_write_byte(&DefPrintSize,3);
   1314c:	85 e3       	ldi	r24, 0x35	; 53
   1314e:	90 e0       	ldi	r25, 0x00	; 0
   13150:	63 e0       	ldi	r22, 0x03	; 3
   13152:	0e 94 78 aa 	call	0x154f0	; 0x154f0 <__eewr_byte_m128>

	 eeprom_write_byte(&DefConnectionHost,0);
   13156:	86 e3       	ldi	r24, 0x36	; 54
   13158:	90 e0       	ldi	r25, 0x00	; 0
   1315a:	60 e0       	ldi	r22, 0x00	; 0
   1315c:	0e 94 78 aa 	call	0x154f0	; 0x154f0 <__eewr_byte_m128>
	 eeprom_write_byte(&DefShowDateTime,1);
   13160:	87 e3       	ldi	r24, 0x37	; 55
   13162:	90 e0       	ldi	r25, 0x00	; 0
   13164:	61 e0       	ldi	r22, 0x01	; 1
   13166:	0e 94 78 aa 	call	0x154f0	; 0x154f0 <__eewr_byte_m128>
	 eeprom_write_byte(&DefNotifScreen,1);
   1316a:	88 e3       	ldi	r24, 0x38	; 56
   1316c:	90 e0       	ldi	r25, 0x00	; 0
   1316e:	61 e0       	ldi	r22, 0x01	; 1
   13170:	0e 94 78 aa 	call	0x154f0	; 0x154f0 <__eewr_byte_m128>

	 eeprom_write_byte(&DefDecimalPrice,0);
   13174:	89 e3       	ldi	r24, 0x39	; 57
   13176:	90 e0       	ldi	r25, 0x00	; 0
   13178:	60 e0       	ldi	r22, 0x00	; 0
   1317a:	0e 94 78 aa 	call	0x154f0	; 0x154f0 <__eewr_byte_m128>
	 eeprom_write_byte(&DefDecimalVolume,3);
   1317e:	8a e3       	ldi	r24, 0x3A	; 58
   13180:	90 e0       	ldi	r25, 0x00	; 0
   13182:	63 e0       	ldi	r22, 0x03	; 3
   13184:	0e 94 78 aa 	call	0x154f0	; 0x154f0 <__eewr_byte_m128>
	 eeprom_write_byte(&DefDecimalMoney,0);
   13188:	8b e3       	ldi	r24, 0x3B	; 59
   1318a:	90 e0       	ldi	r25, 0x00	; 0
   1318c:	60 e0       	ldi	r22, 0x00	; 0
   1318e:	0e 94 78 aa 	call	0x154f0	; 0x154f0 <__eewr_byte_m128>
	 eeprom_write_byte(&DefDecimalTotalVolume,2);
   13192:	8d e3       	ldi	r24, 0x3D	; 61
   13194:	90 e0       	ldi	r25, 0x00	; 0
   13196:	62 e0       	ldi	r22, 0x02	; 2
   13198:	0e 94 78 aa 	call	0x154f0	; 0x154f0 <__eewr_byte_m128>
	 eeprom_write_byte(&DefDecimalTotalMoney,0);
   1319c:	8e e3       	ldi	r24, 0x3E	; 62
   1319e:	90 e0       	ldi	r25, 0x00	; 0
   131a0:	60 e0       	ldi	r22, 0x00	; 0
   131a2:	0e 94 78 aa 	call	0x154f0	; 0x154f0 <__eewr_byte_m128>
	 eeprom_write_byte(&DefDecimalMark,',');
   131a6:	8f e3       	ldi	r24, 0x3F	; 63
   131a8:	90 e0       	ldi	r25, 0x00	; 0
   131aa:	6c e2       	ldi	r22, 0x2C	; 44
   131ac:	0e 94 78 aa 	call	0x154f0	; 0x154f0 <__eewr_byte_m128>
	 eeprom_write_byte(&DefCurrencyMark,'.');
   131b0:	80 e4       	ldi	r24, 0x40	; 64
   131b2:	90 e0       	ldi	r25, 0x00	; 0
   131b4:	6e e2       	ldi	r22, 0x2E	; 46
   131b6:	0e 94 78 aa 	call	0x154f0	; 0x154f0 <__eewr_byte_m128>

	 xArray[0]=',';	 xArray[1]='.'; 	 xArray[2]=' ';	 xArray[3]='/';  xArray[4]='-'; 
   131ba:	8c e2       	ldi	r24, 0x2C	; 44
   131bc:	89 83       	std	Y+1, r24	; 0x01
   131be:	8e e2       	ldi	r24, 0x2E	; 46
   131c0:	8a 83       	std	Y+2, r24	; 0x02
   131c2:	80 e2       	ldi	r24, 0x20	; 32
   131c4:	8b 83       	std	Y+3, r24	; 0x03
   131c6:	8f e2       	ldi	r24, 0x2F	; 47
   131c8:	8c 83       	std	Y+4, r24	; 0x04
   131ca:	8d e2       	ldi	r24, 0x2D	; 45
   131cc:	8d 83       	std	Y+5, r24	; 0x05
	 eeprom_write_block((const void*) &xArray, (void*) &DefMarkMap, 5);
   131ce:	c6 01       	movw	r24, r12
   131d0:	61 e4       	ldi	r22, 0x41	; 65
   131d2:	70 e0       	ldi	r23, 0x00	; 0
   131d4:	45 e0       	ldi	r20, 0x05	; 5
   131d6:	50 e0       	ldi	r21, 0x00	; 0
   131d8:	0e 94 6e aa 	call	0x154dc	; 0x154dc <__eewr_block_m128>

	 xArray[0]=1;	 xArray[1]=2; 	 xArray[2]=0;	 xArray[3]=0; xArray[4]=0;	 xArray[5]=0; xArray[6]=0;	 	 
   131dc:	bb 24       	eor	r11, r11
   131de:	b3 94       	inc	r11
   131e0:	b9 82       	std	Y+1, r11	; 0x01
   131e2:	02 e0       	ldi	r16, 0x02	; 2
   131e4:	0a 83       	std	Y+2, r16	; 0x02
   131e6:	1b 82       	std	Y+3, r1	; 0x03
   131e8:	1c 82       	std	Y+4, r1	; 0x04
   131ea:	1d 82       	std	Y+5, r1	; 0x05
   131ec:	1e 82       	std	Y+6, r1	; 0x06
   131ee:	1f 82       	std	Y+7, r1	; 0x07
	 eeprom_write_block((const void*) &xArray, (void*) &DefPumpMap, 8);
   131f0:	c6 01       	movw	r24, r12
   131f2:	66 e4       	ldi	r22, 0x46	; 70
   131f4:	70 e0       	ldi	r23, 0x00	; 0
   131f6:	48 e0       	ldi	r20, 0x08	; 8
   131f8:	50 e0       	ldi	r21, 0x00	; 0
   131fa:	0e 94 6e aa 	call	0x154dc	; 0x154dc <__eewr_block_m128>
	 eeprom_write_block((const void*) &xArray, (void*) &DefPumpLabel, 8);
   131fe:	c6 01       	movw	r24, r12
   13200:	6e e4       	ldi	r22, 0x4E	; 78
   13202:	70 e0       	ldi	r23, 0x00	; 0
   13204:	48 e0       	ldi	r20, 0x08	; 8
   13206:	50 e0       	ldi	r21, 0x00	; 0
   13208:	0e 94 6e aa 	call	0x154dc	; 0x154dc <__eewr_block_m128>

	 xArray[0]=1;	 xArray[1]=2; 	 xArray[2]=0;	 xArray[3]=0; xArray[4]=0;	 xArray[5]=0; 
   1320c:	b9 82       	std	Y+1, r11	; 0x01
   1320e:	0a 83       	std	Y+2, r16	; 0x02
   13210:	1b 82       	std	Y+3, r1	; 0x03
   13212:	1c 82       	std	Y+4, r1	; 0x04
   13214:	1d 82       	std	Y+5, r1	; 0x05
   13216:	1e 82       	std	Y+6, r1	; 0x06
	 eeprom_write_block((const void*) &xArray, (void*) &DefNozzleMap[0], 6);
   13218:	06 e5       	ldi	r16, 0x56	; 86
   1321a:	10 e0       	ldi	r17, 0x00	; 0
   1321c:	c6 01       	movw	r24, r12
   1321e:	b8 01       	movw	r22, r16
   13220:	46 e0       	ldi	r20, 0x06	; 6
   13222:	50 e0       	ldi	r21, 0x00	; 0
   13224:	0e 94 6e aa 	call	0x154dc	; 0x154dc <__eewr_block_m128>
	 eeprom_write_block((const void*) &xArray, (void*) &DefNozzleMap[1], 6);
   13228:	b8 01       	movw	r22, r16
   1322a:	6a 5f       	subi	r22, 0xFA	; 250
   1322c:	7f 4f       	sbci	r23, 0xFF	; 255
   1322e:	c6 01       	movw	r24, r12
   13230:	46 e0       	ldi	r20, 0x06	; 6
   13232:	50 e0       	ldi	r21, 0x00	; 0
   13234:	0e 94 6e aa 	call	0x154dc	; 0x154dc <__eewr_block_m128>

	 sprintf_P(strEEP,PSTR("6500"));
   13238:	00 d0       	rcall	.+0      	; 0x1323a <MasterReset+0x1ba>
   1323a:	00 d0       	rcall	.+0      	; 0x1323c <MasterReset+0x1bc>
   1323c:	ed b7       	in	r30, 0x3d	; 61
   1323e:	fe b7       	in	r31, 0x3e	; 62
   13240:	f2 82       	std	Z+2, r15	; 0x02
   13242:	e1 82       	std	Z+1, r14	; 0x01
   13244:	87 ed       	ldi	r24, 0xD7	; 215
   13246:	94 e0       	ldi	r25, 0x04	; 4
   13248:	94 83       	std	Z+4, r25	; 0x04
   1324a:	83 83       	std	Z+3, r24	; 0x03
   1324c:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductPrice[0], sizeof(DefProductPrice[0]));
   13250:	0f 90       	pop	r0
   13252:	0f 90       	pop	r0
   13254:	0f 90       	pop	r0
   13256:	0f 90       	pop	r0
   13258:	06 e8       	ldi	r16, 0x86	; 134
   1325a:	10 e0       	ldi	r17, 0x00	; 0
   1325c:	c7 01       	movw	r24, r14
   1325e:	b8 01       	movw	r22, r16
   13260:	49 e0       	ldi	r20, 0x09	; 9
   13262:	50 e0       	ldi	r21, 0x00	; 0
   13264:	0e 94 6e aa 	call	0x154dc	; 0x154dc <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("7250"));
   13268:	00 d0       	rcall	.+0      	; 0x1326a <MasterReset+0x1ea>
   1326a:	00 d0       	rcall	.+0      	; 0x1326c <MasterReset+0x1ec>
   1326c:	ed b7       	in	r30, 0x3d	; 61
   1326e:	fe b7       	in	r31, 0x3e	; 62
   13270:	f2 82       	std	Z+2, r15	; 0x02
   13272:	e1 82       	std	Z+1, r14	; 0x01
   13274:	82 ed       	ldi	r24, 0xD2	; 210
   13276:	94 e0       	ldi	r25, 0x04	; 4
   13278:	94 83       	std	Z+4, r25	; 0x04
   1327a:	83 83       	std	Z+3, r24	; 0x03
   1327c:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductPrice[1], sizeof(DefProductPrice[1]));
   13280:	0f 90       	pop	r0
   13282:	0f 90       	pop	r0
   13284:	0f 90       	pop	r0
   13286:	0f 90       	pop	r0
   13288:	b8 01       	movw	r22, r16
   1328a:	67 5f       	subi	r22, 0xF7	; 247
   1328c:	7f 4f       	sbci	r23, 0xFF	; 255
   1328e:	c7 01       	movw	r24, r14
   13290:	49 e0       	ldi	r20, 0x09	; 9
   13292:	50 e0       	ldi	r21, 0x00	; 0
   13294:	0e 94 6e aa 	call	0x154dc	; 0x154dc <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("4500"));
   13298:	00 d0       	rcall	.+0      	; 0x1329a <MasterReset+0x21a>
   1329a:	00 d0       	rcall	.+0      	; 0x1329c <MasterReset+0x21c>
   1329c:	ed b7       	in	r30, 0x3d	; 61
   1329e:	fe b7       	in	r31, 0x3e	; 62
   132a0:	f2 82       	std	Z+2, r15	; 0x02
   132a2:	e1 82       	std	Z+1, r14	; 0x01
   132a4:	8d ec       	ldi	r24, 0xCD	; 205
   132a6:	94 e0       	ldi	r25, 0x04	; 4
   132a8:	94 83       	std	Z+4, r25	; 0x04
   132aa:	83 83       	std	Z+3, r24	; 0x03
   132ac:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductPrice[2], sizeof(DefProductPrice[2]));
   132b0:	0f 90       	pop	r0
   132b2:	0f 90       	pop	r0
   132b4:	0f 90       	pop	r0
   132b6:	0f 90       	pop	r0
   132b8:	b8 01       	movw	r22, r16
   132ba:	6e 5e       	subi	r22, 0xEE	; 238
   132bc:	7f 4f       	sbci	r23, 0xFF	; 255
   132be:	c7 01       	movw	r24, r14
   132c0:	49 e0       	ldi	r20, 0x09	; 9
   132c2:	50 e0       	ldi	r21, 0x00	; 0
   132c4:	0e 94 6e aa 	call	0x154dc	; 0x154dc <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("6500"));
   132c8:	00 d0       	rcall	.+0      	; 0x132ca <MasterReset+0x24a>
   132ca:	00 d0       	rcall	.+0      	; 0x132cc <MasterReset+0x24c>
   132cc:	ed b7       	in	r30, 0x3d	; 61
   132ce:	fe b7       	in	r31, 0x3e	; 62
   132d0:	f2 82       	std	Z+2, r15	; 0x02
   132d2:	e1 82       	std	Z+1, r14	; 0x01
   132d4:	88 ec       	ldi	r24, 0xC8	; 200
   132d6:	94 e0       	ldi	r25, 0x04	; 4
   132d8:	94 83       	std	Z+4, r25	; 0x04
   132da:	83 83       	std	Z+3, r24	; 0x03
   132dc:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductPrice[3], sizeof(DefProductPrice[3]));
   132e0:	0f 90       	pop	r0
   132e2:	0f 90       	pop	r0
   132e4:	0f 90       	pop	r0
   132e6:	0f 90       	pop	r0
   132e8:	b8 01       	movw	r22, r16
   132ea:	65 5e       	subi	r22, 0xE5	; 229
   132ec:	7f 4f       	sbci	r23, 0xFF	; 255
   132ee:	c7 01       	movw	r24, r14
   132f0:	49 e0       	ldi	r20, 0x09	; 9
   132f2:	50 e0       	ldi	r21, 0x00	; 0
   132f4:	0e 94 6e aa 	call	0x154dc	; 0x154dc <__eewr_block_m128>
     sprintf_P(strEEP,PSTR("4500"));
   132f8:	00 d0       	rcall	.+0      	; 0x132fa <MasterReset+0x27a>
   132fa:	00 d0       	rcall	.+0      	; 0x132fc <MasterReset+0x27c>
   132fc:	ed b7       	in	r30, 0x3d	; 61
   132fe:	fe b7       	in	r31, 0x3e	; 62
   13300:	f2 82       	std	Z+2, r15	; 0x02
   13302:	e1 82       	std	Z+1, r14	; 0x01
   13304:	83 ec       	ldi	r24, 0xC3	; 195
   13306:	94 e0       	ldi	r25, 0x04	; 4
   13308:	94 83       	std	Z+4, r25	; 0x04
   1330a:	83 83       	std	Z+3, r24	; 0x03
   1330c:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductPrice[4], sizeof(DefProductPrice[4]));
   13310:	0f 90       	pop	r0
   13312:	0f 90       	pop	r0
   13314:	0f 90       	pop	r0
   13316:	0f 90       	pop	r0
   13318:	b8 01       	movw	r22, r16
   1331a:	6c 5d       	subi	r22, 0xDC	; 220
   1331c:	7f 4f       	sbci	r23, 0xFF	; 255
   1331e:	c7 01       	movw	r24, r14
   13320:	49 e0       	ldi	r20, 0x09	; 9
   13322:	50 e0       	ldi	r21, 0x00	; 0
   13324:	0e 94 6e aa 	call	0x154dc	; 0x154dc <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("6500"));
   13328:	00 d0       	rcall	.+0      	; 0x1332a <MasterReset+0x2aa>
   1332a:	00 d0       	rcall	.+0      	; 0x1332c <MasterReset+0x2ac>
   1332c:	ed b7       	in	r30, 0x3d	; 61
   1332e:	fe b7       	in	r31, 0x3e	; 62
   13330:	f2 82       	std	Z+2, r15	; 0x02
   13332:	e1 82       	std	Z+1, r14	; 0x01
   13334:	8e eb       	ldi	r24, 0xBE	; 190
   13336:	94 e0       	ldi	r25, 0x04	; 4
   13338:	94 83       	std	Z+4, r25	; 0x04
   1333a:	83 83       	std	Z+3, r24	; 0x03
   1333c:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductPrice[5], sizeof(DefProductPrice[5]));
   13340:	0f 90       	pop	r0
   13342:	0f 90       	pop	r0
   13344:	0f 90       	pop	r0
   13346:	0f 90       	pop	r0
   13348:	b8 01       	movw	r22, r16
   1334a:	63 5d       	subi	r22, 0xD3	; 211
   1334c:	7f 4f       	sbci	r23, 0xFF	; 255
   1334e:	c7 01       	movw	r24, r14
   13350:	49 e0       	ldi	r20, 0x09	; 9
   13352:	50 e0       	ldi	r21, 0x00	; 0
   13354:	0e 94 6e aa 	call	0x154dc	; 0x154dc <__eewr_block_m128>

	 sprintf_P(strEEP,PSTR("Pert+   "));
   13358:	00 d0       	rcall	.+0      	; 0x1335a <MasterReset+0x2da>
   1335a:	00 d0       	rcall	.+0      	; 0x1335c <MasterReset+0x2dc>
   1335c:	ed b7       	in	r30, 0x3d	; 61
   1335e:	fe b7       	in	r31, 0x3e	; 62
   13360:	f2 82       	std	Z+2, r15	; 0x02
   13362:	e1 82       	std	Z+1, r14	; 0x01
   13364:	85 eb       	ldi	r24, 0xB5	; 181
   13366:	94 e0       	ldi	r25, 0x04	; 4
   13368:	94 83       	std	Z+4, r25	; 0x04
   1336a:	83 83       	std	Z+3, r24	; 0x03
   1336c:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductName[0], sizeof(DefProductName[0]));
   13370:	0f 90       	pop	r0
   13372:	0f 90       	pop	r0
   13374:	0f 90       	pop	r0
   13376:	0f 90       	pop	r0
   13378:	0c eb       	ldi	r16, 0xBC	; 188
   1337a:	10 e0       	ldi	r17, 0x00	; 0
   1337c:	c7 01       	movw	r24, r14
   1337e:	b8 01       	movw	r22, r16
   13380:	4d e0       	ldi	r20, 0x0D	; 13
   13382:	50 e0       	ldi	r21, 0x00	; 0
   13384:	0e 94 6e aa 	call	0x154dc	; 0x154dc <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("Pertamax"));
   13388:	00 d0       	rcall	.+0      	; 0x1338a <MasterReset+0x30a>
   1338a:	00 d0       	rcall	.+0      	; 0x1338c <MasterReset+0x30c>
   1338c:	ed b7       	in	r30, 0x3d	; 61
   1338e:	fe b7       	in	r31, 0x3e	; 62
   13390:	f2 82       	std	Z+2, r15	; 0x02
   13392:	e1 82       	std	Z+1, r14	; 0x01
   13394:	8c ea       	ldi	r24, 0xAC	; 172
   13396:	94 e0       	ldi	r25, 0x04	; 4
   13398:	94 83       	std	Z+4, r25	; 0x04
   1339a:	83 83       	std	Z+3, r24	; 0x03
   1339c:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductName[1], sizeof(DefProductName[1]));
   133a0:	0f 90       	pop	r0
   133a2:	0f 90       	pop	r0
   133a4:	0f 90       	pop	r0
   133a6:	0f 90       	pop	r0
   133a8:	b8 01       	movw	r22, r16
   133aa:	63 5f       	subi	r22, 0xF3	; 243
   133ac:	7f 4f       	sbci	r23, 0xFF	; 255
   133ae:	c7 01       	movw	r24, r14
   133b0:	4d e0       	ldi	r20, 0x0D	; 13
   133b2:	50 e0       	ldi	r21, 0x00	; 0
   133b4:	0e 94 6e aa 	call	0x154dc	; 0x154dc <__eewr_block_m128>
     sprintf_P(strEEP,PSTR("Premium "));
   133b8:	00 d0       	rcall	.+0      	; 0x133ba <MasterReset+0x33a>
   133ba:	00 d0       	rcall	.+0      	; 0x133bc <MasterReset+0x33c>
   133bc:	ed b7       	in	r30, 0x3d	; 61
   133be:	fe b7       	in	r31, 0x3e	; 62
   133c0:	f2 82       	std	Z+2, r15	; 0x02
   133c2:	e1 82       	std	Z+1, r14	; 0x01
   133c4:	83 ea       	ldi	r24, 0xA3	; 163
   133c6:	94 e0       	ldi	r25, 0x04	; 4
   133c8:	94 83       	std	Z+4, r25	; 0x04
   133ca:	83 83       	std	Z+3, r24	; 0x03
   133cc:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductName[2], sizeof(DefProductName[2]));
   133d0:	0f 90       	pop	r0
   133d2:	0f 90       	pop	r0
   133d4:	0f 90       	pop	r0
   133d6:	0f 90       	pop	r0
   133d8:	b8 01       	movw	r22, r16
   133da:	66 5e       	subi	r22, 0xE6	; 230
   133dc:	7f 4f       	sbci	r23, 0xFF	; 255
   133de:	c7 01       	movw	r24, r14
   133e0:	4d e0       	ldi	r20, 0x0D	; 13
   133e2:	50 e0       	ldi	r21, 0x00	; 0
   133e4:	0e 94 6e aa 	call	0x154dc	; 0x154dc <__eewr_block_m128>
     sprintf_P(strEEP,PSTR("Solar   "));
   133e8:	00 d0       	rcall	.+0      	; 0x133ea <MasterReset+0x36a>
   133ea:	00 d0       	rcall	.+0      	; 0x133ec <MasterReset+0x36c>
   133ec:	ed b7       	in	r30, 0x3d	; 61
   133ee:	fe b7       	in	r31, 0x3e	; 62
   133f0:	f2 82       	std	Z+2, r15	; 0x02
   133f2:	e1 82       	std	Z+1, r14	; 0x01
   133f4:	8a e9       	ldi	r24, 0x9A	; 154
   133f6:	94 e0       	ldi	r25, 0x04	; 4
   133f8:	94 83       	std	Z+4, r25	; 0x04
   133fa:	83 83       	std	Z+3, r24	; 0x03
   133fc:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductName[3], sizeof(DefProductName[3]));
   13400:	0f 90       	pop	r0
   13402:	0f 90       	pop	r0
   13404:	0f 90       	pop	r0
   13406:	0f 90       	pop	r0
   13408:	b8 01       	movw	r22, r16
   1340a:	69 5d       	subi	r22, 0xD9	; 217
   1340c:	7f 4f       	sbci	r23, 0xFF	; 255
   1340e:	c7 01       	movw	r24, r14
   13410:	4d e0       	ldi	r20, 0x0D	; 13
   13412:	50 e0       	ldi	r21, 0x00	; 0
   13414:	0e 94 6e aa 	call	0x154dc	; 0x154dc <__eewr_block_m128>
     sprintf_P(strEEP,PSTR("BioSolr "));
   13418:	00 d0       	rcall	.+0      	; 0x1341a <MasterReset+0x39a>
   1341a:	00 d0       	rcall	.+0      	; 0x1341c <MasterReset+0x39c>
   1341c:	ed b7       	in	r30, 0x3d	; 61
   1341e:	fe b7       	in	r31, 0x3e	; 62
   13420:	f2 82       	std	Z+2, r15	; 0x02
   13422:	e1 82       	std	Z+1, r14	; 0x01
   13424:	81 e9       	ldi	r24, 0x91	; 145
   13426:	94 e0       	ldi	r25, 0x04	; 4
   13428:	94 83       	std	Z+4, r25	; 0x04
   1342a:	83 83       	std	Z+3, r24	; 0x03
   1342c:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductName[4], sizeof(DefProductName[4]));
   13430:	0f 90       	pop	r0
   13432:	0f 90       	pop	r0
   13434:	0f 90       	pop	r0
   13436:	0f 90       	pop	r0
   13438:	b8 01       	movw	r22, r16
   1343a:	6c 5c       	subi	r22, 0xCC	; 204
   1343c:	7f 4f       	sbci	r23, 0xFF	; 255
   1343e:	c7 01       	movw	r24, r14
   13440:	4d e0       	ldi	r20, 0x0D	; 13
   13442:	50 e0       	ldi	r21, 0x00	; 0
   13444:	0e 94 6e aa 	call	0x154dc	; 0x154dc <__eewr_block_m128>
     sprintf_P(strEEP,PSTR("Diesel  "));
   13448:	00 d0       	rcall	.+0      	; 0x1344a <MasterReset+0x3ca>
   1344a:	00 d0       	rcall	.+0      	; 0x1344c <MasterReset+0x3cc>
   1344c:	ed b7       	in	r30, 0x3d	; 61
   1344e:	fe b7       	in	r31, 0x3e	; 62
   13450:	f2 82       	std	Z+2, r15	; 0x02
   13452:	e1 82       	std	Z+1, r14	; 0x01
   13454:	88 e8       	ldi	r24, 0x88	; 136
   13456:	94 e0       	ldi	r25, 0x04	; 4
   13458:	94 83       	std	Z+4, r25	; 0x04
   1345a:	83 83       	std	Z+3, r24	; 0x03
   1345c:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductName[5], sizeof(DefProductName[5]));
   13460:	0f 90       	pop	r0
   13462:	0f 90       	pop	r0
   13464:	0f 90       	pop	r0
   13466:	0f 90       	pop	r0
   13468:	c7 01       	movw	r24, r14
   1346a:	6d ef       	ldi	r22, 0xFD	; 253
   1346c:	70 e0       	ldi	r23, 0x00	; 0
   1346e:	4d e0       	ldi	r20, 0x0D	; 13
   13470:	50 e0       	ldi	r21, 0x00	; 0
   13472:	0e 94 6e aa 	call	0x154dc	; 0x154dc <__eewr_block_m128>

	 sprintf_P(strEEP,PSTR("BCA"));
   13476:	00 d0       	rcall	.+0      	; 0x13478 <MasterReset+0x3f8>
   13478:	00 d0       	rcall	.+0      	; 0x1347a <MasterReset+0x3fa>
   1347a:	ed b7       	in	r30, 0x3d	; 61
   1347c:	fe b7       	in	r31, 0x3e	; 62
   1347e:	f2 82       	std	Z+2, r15	; 0x02
   13480:	e1 82       	std	Z+1, r14	; 0x01
   13482:	84 e8       	ldi	r24, 0x84	; 132
   13484:	94 e0       	ldi	r25, 0x04	; 4
   13486:	94 83       	std	Z+4, r25	; 0x04
   13488:	83 83       	std	Z+3, r24	; 0x03
   1348a:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefBankName[0], sizeof(DefBankName[0]));
   1348e:	0f 90       	pop	r0
   13490:	0f 90       	pop	r0
   13492:	0f 90       	pop	r0
   13494:	0f 90       	pop	r0
   13496:	0a e0       	ldi	r16, 0x0A	; 10
   13498:	11 e0       	ldi	r17, 0x01	; 1
   1349a:	c7 01       	movw	r24, r14
   1349c:	b8 01       	movw	r22, r16
   1349e:	4b e0       	ldi	r20, 0x0B	; 11
   134a0:	50 e0       	ldi	r21, 0x00	; 0
   134a2:	0e 94 6e aa 	call	0x154dc	; 0x154dc <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("Mandiri"));
   134a6:	00 d0       	rcall	.+0      	; 0x134a8 <MasterReset+0x428>
   134a8:	00 d0       	rcall	.+0      	; 0x134aa <MasterReset+0x42a>
   134aa:	ed b7       	in	r30, 0x3d	; 61
   134ac:	fe b7       	in	r31, 0x3e	; 62
   134ae:	f2 82       	std	Z+2, r15	; 0x02
   134b0:	e1 82       	std	Z+1, r14	; 0x01
   134b2:	8c e7       	ldi	r24, 0x7C	; 124
   134b4:	94 e0       	ldi	r25, 0x04	; 4
   134b6:	94 83       	std	Z+4, r25	; 0x04
   134b8:	83 83       	std	Z+3, r24	; 0x03
   134ba:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefBankName[1], sizeof(DefBankName[1]));
   134be:	0f 90       	pop	r0
   134c0:	0f 90       	pop	r0
   134c2:	0f 90       	pop	r0
   134c4:	0f 90       	pop	r0
   134c6:	b8 01       	movw	r22, r16
   134c8:	65 5f       	subi	r22, 0xF5	; 245
   134ca:	7f 4f       	sbci	r23, 0xFF	; 255
   134cc:	c7 01       	movw	r24, r14
   134ce:	4b e0       	ldi	r20, 0x0B	; 11
   134d0:	50 e0       	ldi	r21, 0x00	; 0
   134d2:	0e 94 6e aa 	call	0x154dc	; 0x154dc <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("BNI"));
   134d6:	00 d0       	rcall	.+0      	; 0x134d8 <MasterReset+0x458>
   134d8:	00 d0       	rcall	.+0      	; 0x134da <MasterReset+0x45a>
   134da:	ed b7       	in	r30, 0x3d	; 61
   134dc:	fe b7       	in	r31, 0x3e	; 62
   134de:	f2 82       	std	Z+2, r15	; 0x02
   134e0:	e1 82       	std	Z+1, r14	; 0x01
   134e2:	88 e7       	ldi	r24, 0x78	; 120
   134e4:	94 e0       	ldi	r25, 0x04	; 4
   134e6:	94 83       	std	Z+4, r25	; 0x04
   134e8:	83 83       	std	Z+3, r24	; 0x03
   134ea:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefBankName[2], sizeof(DefBankName[2]));
   134ee:	0f 90       	pop	r0
   134f0:	0f 90       	pop	r0
   134f2:	0f 90       	pop	r0
   134f4:	0f 90       	pop	r0
   134f6:	b8 01       	movw	r22, r16
   134f8:	6a 5e       	subi	r22, 0xEA	; 234
   134fa:	7f 4f       	sbci	r23, 0xFF	; 255
   134fc:	c7 01       	movw	r24, r14
   134fe:	4b e0       	ldi	r20, 0x0B	; 11
   13500:	50 e0       	ldi	r21, 0x00	; 0
   13502:	0e 94 6e aa 	call	0x154dc	; 0x154dc <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("BRI"));
   13506:	00 d0       	rcall	.+0      	; 0x13508 <MasterReset+0x488>
   13508:	00 d0       	rcall	.+0      	; 0x1350a <MasterReset+0x48a>
   1350a:	ed b7       	in	r30, 0x3d	; 61
   1350c:	fe b7       	in	r31, 0x3e	; 62
   1350e:	f2 82       	std	Z+2, r15	; 0x02
   13510:	e1 82       	std	Z+1, r14	; 0x01
   13512:	84 e7       	ldi	r24, 0x74	; 116
   13514:	94 e0       	ldi	r25, 0x04	; 4
   13516:	94 83       	std	Z+4, r25	; 0x04
   13518:	83 83       	std	Z+3, r24	; 0x03
   1351a:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefBankName[3], sizeof(DefBankName[3]));
   1351e:	0f 90       	pop	r0
   13520:	0f 90       	pop	r0
   13522:	0f 90       	pop	r0
   13524:	0f 90       	pop	r0
   13526:	b8 01       	movw	r22, r16
   13528:	6f 5d       	subi	r22, 0xDF	; 223
   1352a:	7f 4f       	sbci	r23, 0xFF	; 255
   1352c:	c7 01       	movw	r24, r14
   1352e:	4b e0       	ldi	r20, 0x0B	; 11
   13530:	50 e0       	ldi	r21, 0x00	; 0
   13532:	0e 94 6e aa 	call	0x154dc	; 0x154dc <__eewr_block_m128>

	 eeprom_write_byte(&DefPrintInitialize,False);
   13536:	86 e3       	ldi	r24, 0x36	; 54
   13538:	91 e0       	ldi	r25, 0x01	; 1
   1353a:	60 e0       	ldi	r22, 0x00	; 0
   1353c:	0e 94 78 aa 	call	0x154f0	; 0x154f0 <__eewr_byte_m128>
	 eeprom_write_byte(&DefInitIFT,IT_SLAVE);
   13540:	87 e3       	ldi	r24, 0x37	; 55
   13542:	91 e0       	ldi	r25, 0x01	; 1
   13544:	61 e0       	ldi	r22, 0x01	; 1
   13546:	0e 94 78 aa 	call	0x154f0	; 0x154f0 <__eewr_byte_m128>
	 eeprom_write_byte(&DefDispenserBrand,ST_GILBARCO);//ST_WAYNE_DART;
   1354a:	88 e3       	ldi	r24, 0x38	; 56
   1354c:	91 e0       	ldi	r25, 0x01	; 1
   1354e:	61 e0       	ldi	r22, 0x01	; 1
   13550:	0e 94 78 aa 	call	0x154f0	; 0x154f0 <__eewr_byte_m128>

	 sprintf_P(strEEP,PSTR("000000"));
   13554:	00 d0       	rcall	.+0      	; 0x13556 <MasterReset+0x4d6>
   13556:	00 d0       	rcall	.+0      	; 0x13558 <MasterReset+0x4d8>
   13558:	ed b7       	in	r30, 0x3d	; 61
   1355a:	fe b7       	in	r31, 0x3e	; 62
   1355c:	f2 82       	std	Z+2, r15	; 0x02
   1355e:	e1 82       	std	Z+1, r14	; 0x01
   13560:	8d e6       	ldi	r24, 0x6D	; 109
   13562:	94 e0       	ldi	r25, 0x04	; 4
   13564:	94 83       	std	Z+4, r25	; 0x04
   13566:	83 83       	std	Z+3, r24	; 0x03
   13568:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefTransactionNumber, sizeof(DefTransactionNumber));
   1356c:	0f 90       	pop	r0
   1356e:	0f 90       	pop	r0
   13570:	0f 90       	pop	r0
   13572:	0f 90       	pop	r0
   13574:	c7 01       	movw	r24, r14
   13576:	69 e3       	ldi	r22, 0x39	; 57
   13578:	71 e0       	ldi	r23, 0x01	; 1
   1357a:	47 e0       	ldi	r20, 0x07	; 7
   1357c:	50 e0       	ldi	r21, 0x00	; 0
   1357e:	0e 94 6e aa 	call	0x154dc	; 0x154dc <__eewr_block_m128>

     eeprom_write_byte(&DefShift,1);
   13582:	80 e4       	ldi	r24, 0x40	; 64
   13584:	91 e0       	ldi	r25, 0x01	; 1
   13586:	61 e0       	ldi	r22, 0x01	; 1
   13588:	0e 94 78 aa 	call	0x154f0	; 0x154f0 <__eewr_byte_m128>

	 xArray[0]=br9600;	 xArray[1]=br9600; 	 xArray[2]=br5787;	 xArray[3]=br9600;
   1358c:	b9 82       	std	Y+1, r11	; 0x01
   1358e:	ba 82       	std	Y+2, r11	; 0x02
   13590:	83 e0       	ldi	r24, 0x03	; 3
   13592:	8b 83       	std	Y+3, r24	; 0x03
   13594:	bc 82       	std	Y+4, r11	; 0x04
	 eeprom_write_block((const void*) &xArray, (void*) &DefBaudrate, 4);
   13596:	c6 01       	movw	r24, r12
   13598:	61 e4       	ldi	r22, 0x41	; 65
   1359a:	71 e0       	ldi	r23, 0x01	; 1
   1359c:	44 e0       	ldi	r20, 0x04	; 4
   1359e:	50 e0       	ldi	r21, 0x00	; 0
   135a0:	0e 94 6e aa 	call	0x154dc	; 0x154dc <__eewr_block_m128>

     eeprom_write_byte(&DefPoolingPumpMax,MAX_PUMP);
   135a4:	85 e4       	ldi	r24, 0x45	; 69
   135a6:	91 e0       	ldi	r25, 0x01	; 1
   135a8:	64 e0       	ldi	r22, 0x04	; 4
   135aa:	0e 94 78 aa 	call	0x154f0	; 0x154f0 <__eewr_byte_m128>
     eeprom_write_byte(&DefPoolingNoPumpCount,NO_PUMP_COUNT_MAX);
   135ae:	86 e4       	ldi	r24, 0x46	; 70
   135b0:	91 e0       	ldi	r25, 0x01	; 1
   135b2:	65 e0       	ldi	r22, 0x05	; 5
   135b4:	0e 94 78 aa 	call	0x154f0	; 0x154f0 <__eewr_byte_m128>
     eeprom_write_byte(&DefPoolingTryResend,TRY_RESEND);
   135b8:	87 e4       	ldi	r24, 0x47	; 71
   135ba:	91 e0       	ldi	r25, 0x01	; 1
   135bc:	62 e0       	ldi	r22, 0x02	; 2
   135be:	0e 94 78 aa 	call	0x154f0	; 0x154f0 <__eewr_byte_m128>
     eeprom_write_byte(&DefPoolingSendTimeout,SEND_TIMEOUT);
   135c2:	88 e4       	ldi	r24, 0x48	; 72
   135c4:	91 e0       	ldi	r25, 0x01	; 1
   135c6:	65 e0       	ldi	r22, 0x05	; 5
   135c8:	0e 94 78 aa 	call	0x154f0	; 0x154f0 <__eewr_byte_m128>
     eeprom_write_byte(&DefPoolingDelayNextPump,DELAY_NEXT_PUMP);
   135cc:	89 e4       	ldi	r24, 0x49	; 73
   135ce:	91 e0       	ldi	r25, 0x01	; 1
   135d0:	65 e0       	ldi	r22, 0x05	; 5
   135d2:	0e 94 78 aa 	call	0x154f0	; 0x154f0 <__eewr_byte_m128>
     eeprom_write_byte(&DefActivePump,ACTIVE_PUMP);
   135d6:	8a e4       	ldi	r24, 0x4A	; 74
   135d8:	91 e0       	ldi	r25, 0x01	; 1
   135da:	64 e0       	ldi	r22, 0x04	; 4
   135dc:	0e 94 78 aa 	call	0x154f0	; 0x154f0 <__eewr_byte_m128>
     eeprom_write_byte(&DefSequenceTimeout,SEQUENCE_TIMEOUT);
   135e0:	8b e4       	ldi	r24, 0x4B	; 75
   135e2:	91 e0       	ldi	r25, 0x01	; 1
   135e4:	6a e0       	ldi	r22, 0x0A	; 10
   135e6:	0e 94 78 aa 	call	0x154f0	; 0x154f0 <__eewr_byte_m128>

     eeprom_write_byte(&DefPrintMoney,True);
   135ea:	82 ec       	ldi	r24, 0xC2	; 194
   135ec:	93 e0       	ldi	r25, 0x03	; 3
   135ee:	61 e0       	ldi	r22, 0x01	; 1
   135f0:	0e 94 78 aa 	call	0x154f0	; 0x154f0 <__eewr_byte_m128>
	 eeprom_write_byte(&DefHGMode,HM_232);//HM_TTL,HM_232,HM_485
   135f4:	83 ec       	ldi	r24, 0xC3	; 195
   135f6:	93 e0       	ldi	r25, 0x03	; 3
   135f8:	61 e0       	ldi	r22, 0x01	; 1
   135fa:	0e 94 78 aa 	call	0x154f0	; 0x154f0 <__eewr_byte_m128>

	 sprintf_P(strEEP,PSTR("    PT. HANINDO AUTOMATION SOLUTIONS    "));
   135fe:	00 d0       	rcall	.+0      	; 0x13600 <MasterReset+0x580>
   13600:	00 d0       	rcall	.+0      	; 0x13602 <MasterReset+0x582>
   13602:	ed b7       	in	r30, 0x3d	; 61
   13604:	fe b7       	in	r31, 0x3e	; 62
   13606:	f2 82       	std	Z+2, r15	; 0x02
   13608:	e1 82       	std	Z+1, r14	; 0x01
   1360a:	84 e4       	ldi	r24, 0x44	; 68
   1360c:	94 e0       	ldi	r25, 0x04	; 4
   1360e:	94 83       	std	Z+4, r25	; 0x04
   13610:	83 83       	std	Z+3, r24	; 0x03
   13612:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefHeaderFooter[0],41);
   13616:	0f 90       	pop	r0
   13618:	0f 90       	pop	r0
   1361a:	0f 90       	pop	r0
   1361c:	0f 90       	pop	r0
   1361e:	08 e2       	ldi	r16, 0x28	; 40
   13620:	12 e0       	ldi	r17, 0x02	; 2
   13622:	c7 01       	movw	r24, r14
   13624:	b8 01       	movw	r22, r16
   13626:	49 e2       	ldi	r20, 0x29	; 41
   13628:	50 e0       	ldi	r21, 0x00	; 0
   1362a:	0e 94 6e aa 	call	0x154dc	; 0x154dc <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("        JL. RS Fatmawati No.55          "));
   1362e:	00 d0       	rcall	.+0      	; 0x13630 <MasterReset+0x5b0>
   13630:	00 d0       	rcall	.+0      	; 0x13632 <MasterReset+0x5b2>
   13632:	ed b7       	in	r30, 0x3d	; 61
   13634:	fe b7       	in	r31, 0x3e	; 62
   13636:	f2 82       	std	Z+2, r15	; 0x02
   13638:	e1 82       	std	Z+1, r14	; 0x01
   1363a:	8b e1       	ldi	r24, 0x1B	; 27
   1363c:	94 e0       	ldi	r25, 0x04	; 4
   1363e:	94 83       	std	Z+4, r25	; 0x04
   13640:	83 83       	std	Z+3, r24	; 0x03
   13642:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefHeaderFooter[1],41);
   13646:	0f 90       	pop	r0
   13648:	0f 90       	pop	r0
   1364a:	0f 90       	pop	r0
   1364c:	0f 90       	pop	r0
   1364e:	b8 01       	movw	r22, r16
   13650:	67 5d       	subi	r22, 0xD7	; 215
   13652:	7f 4f       	sbci	r23, 0xFF	; 255
   13654:	c7 01       	movw	r24, r14
   13656:	49 e2       	ldi	r20, 0x29	; 41
   13658:	50 e0       	ldi	r21, 0x00	; 0
   1365a:	0e 94 6e aa 	call	0x154dc	; 0x154dc <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("            Jakarta Selatan             "));
   1365e:	00 d0       	rcall	.+0      	; 0x13660 <MasterReset+0x5e0>
   13660:	00 d0       	rcall	.+0      	; 0x13662 <MasterReset+0x5e2>
   13662:	ed b7       	in	r30, 0x3d	; 61
   13664:	fe b7       	in	r31, 0x3e	; 62
   13666:	f2 82       	std	Z+2, r15	; 0x02
   13668:	e1 82       	std	Z+1, r14	; 0x01
   1366a:	82 ef       	ldi	r24, 0xF2	; 242
   1366c:	93 e0       	ldi	r25, 0x03	; 3
   1366e:	94 83       	std	Z+4, r25	; 0x04
   13670:	83 83       	std	Z+3, r24	; 0x03
   13672:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefHeaderFooter[2],41);
   13676:	0f 90       	pop	r0
   13678:	0f 90       	pop	r0
   1367a:	0f 90       	pop	r0
   1367c:	0f 90       	pop	r0
   1367e:	c7 01       	movw	r24, r14
   13680:	6a e7       	ldi	r22, 0x7A	; 122
   13682:	72 e0       	ldi	r23, 0x02	; 2
   13684:	49 e2       	ldi	r20, 0x29	; 41
   13686:	50 e0       	ldi	r21, 0x00	; 0
   13688:	0e 94 6e aa 	call	0x154dc	; 0x154dc <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("                                        "));
   1368c:	00 d0       	rcall	.+0      	; 0x1368e <MasterReset+0x60e>
   1368e:	00 d0       	rcall	.+0      	; 0x13690 <MasterReset+0x610>
   13690:	ed b7       	in	r30, 0x3d	; 61
   13692:	fe b7       	in	r31, 0x3e	; 62
   13694:	f2 82       	std	Z+2, r15	; 0x02
   13696:	e1 82       	std	Z+1, r14	; 0x01
   13698:	89 ec       	ldi	r24, 0xC9	; 201
   1369a:	93 e0       	ldi	r25, 0x03	; 3
   1369c:	94 83       	std	Z+4, r25	; 0x04
   1369e:	83 83       	std	Z+3, r24	; 0x03
   136a0:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefHeaderFooter[3],41);
   136a4:	0f 90       	pop	r0
   136a6:	0f 90       	pop	r0
   136a8:	0f 90       	pop	r0
   136aa:	0f 90       	pop	r0
   136ac:	c7 01       	movw	r24, r14
   136ae:	63 ea       	ldi	r22, 0xA3	; 163
   136b0:	72 e0       	ldi	r23, 0x02	; 2
   136b2:	49 e2       	ldi	r20, 0x29	; 41
   136b4:	50 e0       	ldi	r21, 0x00	; 0
   136b6:	0e 94 6e aa 	call	0x154dc	; 0x154dc <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("                                        "));
   136ba:	00 d0       	rcall	.+0      	; 0x136bc <MasterReset+0x63c>
   136bc:	00 d0       	rcall	.+0      	; 0x136be <MasterReset+0x63e>
   136be:	ed b7       	in	r30, 0x3d	; 61
   136c0:	fe b7       	in	r31, 0x3e	; 62
   136c2:	f2 82       	std	Z+2, r15	; 0x02
   136c4:	e1 82       	std	Z+1, r14	; 0x01
   136c6:	80 ea       	ldi	r24, 0xA0	; 160
   136c8:	93 e0       	ldi	r25, 0x03	; 3
   136ca:	94 83       	std	Z+4, r25	; 0x04
   136cc:	83 83       	std	Z+3, r24	; 0x03
   136ce:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefHeaderFooter[4],41);
   136d2:	0f 90       	pop	r0
   136d4:	0f 90       	pop	r0
   136d6:	0f 90       	pop	r0
   136d8:	0f 90       	pop	r0
   136da:	c7 01       	movw	r24, r14
   136dc:	6c ec       	ldi	r22, 0xCC	; 204
   136de:	72 e0       	ldi	r23, 0x02	; 2
   136e0:	49 e2       	ldi	r20, 0x29	; 41
   136e2:	50 e0       	ldi	r21, 0x00	; 0
   136e4:	0e 94 6e aa 	call	0x154dc	; 0x154dc <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("                                        "));
   136e8:	00 d0       	rcall	.+0      	; 0x136ea <MasterReset+0x66a>
   136ea:	00 d0       	rcall	.+0      	; 0x136ec <MasterReset+0x66c>
   136ec:	ed b7       	in	r30, 0x3d	; 61
   136ee:	fe b7       	in	r31, 0x3e	; 62
   136f0:	f2 82       	std	Z+2, r15	; 0x02
   136f2:	e1 82       	std	Z+1, r14	; 0x01
   136f4:	87 e7       	ldi	r24, 0x77	; 119
   136f6:	93 e0       	ldi	r25, 0x03	; 3
   136f8:	94 83       	std	Z+4, r25	; 0x04
   136fa:	83 83       	std	Z+3, r24	; 0x03
   136fc:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefHeaderFooter[5],41);
   13700:	0f 90       	pop	r0
   13702:	0f 90       	pop	r0
   13704:	0f 90       	pop	r0
   13706:	0f 90       	pop	r0
   13708:	c7 01       	movw	r24, r14
   1370a:	65 ef       	ldi	r22, 0xF5	; 245
   1370c:	72 e0       	ldi	r23, 0x02	; 2
   1370e:	49 e2       	ldi	r20, 0x29	; 41
   13710:	50 e0       	ldi	r21, 0x00	; 0
   13712:	0e 94 6e aa 	call	0x154dc	; 0x154dc <__eewr_block_m128>

	 sprintf_P(strEEP,PSTR("             Terima Kasih               "));
   13716:	00 d0       	rcall	.+0      	; 0x13718 <MasterReset+0x698>
   13718:	00 d0       	rcall	.+0      	; 0x1371a <MasterReset+0x69a>
   1371a:	ed b7       	in	r30, 0x3d	; 61
   1371c:	fe b7       	in	r31, 0x3e	; 62
   1371e:	f2 82       	std	Z+2, r15	; 0x02
   13720:	e1 82       	std	Z+1, r14	; 0x01
   13722:	8e e4       	ldi	r24, 0x4E	; 78
   13724:	93 e0       	ldi	r25, 0x03	; 3
   13726:	94 83       	std	Z+4, r25	; 0x04
   13728:	83 83       	std	Z+3, r24	; 0x03
   1372a:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefHeaderFooter[6],41);
   1372e:	0f 90       	pop	r0
   13730:	0f 90       	pop	r0
   13732:	0f 90       	pop	r0
   13734:	0f 90       	pop	r0
   13736:	c7 01       	movw	r24, r14
   13738:	6e e1       	ldi	r22, 0x1E	; 30
   1373a:	73 e0       	ldi	r23, 0x03	; 3
   1373c:	49 e2       	ldi	r20, 0x29	; 41
   1373e:	50 e0       	ldi	r21, 0x00	; 0
   13740:	0e 94 6e aa 	call	0x154dc	; 0x154dc <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("            Selamat  Jalan              "));
   13744:	00 d0       	rcall	.+0      	; 0x13746 <MasterReset+0x6c6>
   13746:	00 d0       	rcall	.+0      	; 0x13748 <MasterReset+0x6c8>
   13748:	ed b7       	in	r30, 0x3d	; 61
   1374a:	fe b7       	in	r31, 0x3e	; 62
   1374c:	f2 82       	std	Z+2, r15	; 0x02
   1374e:	e1 82       	std	Z+1, r14	; 0x01
   13750:	85 e2       	ldi	r24, 0x25	; 37
   13752:	93 e0       	ldi	r25, 0x03	; 3
   13754:	94 83       	std	Z+4, r25	; 0x04
   13756:	83 83       	std	Z+3, r24	; 0x03
   13758:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefHeaderFooter[7],41);
   1375c:	0f 90       	pop	r0
   1375e:	0f 90       	pop	r0
   13760:	0f 90       	pop	r0
   13762:	0f 90       	pop	r0
   13764:	c7 01       	movw	r24, r14
   13766:	67 e4       	ldi	r22, 0x47	; 71
   13768:	73 e0       	ldi	r23, 0x03	; 3
   1376a:	49 e2       	ldi	r20, 0x29	; 41
   1376c:	50 e0       	ldi	r21, 0x00	; 0
   1376e:	0e 94 6e aa 	call	0x154dc	; 0x154dc <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("      Semoga Selamat Sampai Tujuan      "));
   13772:	00 d0       	rcall	.+0      	; 0x13774 <MasterReset+0x6f4>
   13774:	00 d0       	rcall	.+0      	; 0x13776 <MasterReset+0x6f6>
   13776:	ed b7       	in	r30, 0x3d	; 61
   13778:	fe b7       	in	r31, 0x3e	; 62
   1377a:	f2 82       	std	Z+2, r15	; 0x02
   1377c:	e1 82       	std	Z+1, r14	; 0x01
   1377e:	8c ef       	ldi	r24, 0xFC	; 252
   13780:	92 e0       	ldi	r25, 0x02	; 2
   13782:	94 83       	std	Z+4, r25	; 0x04
   13784:	83 83       	std	Z+3, r24	; 0x03
   13786:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefHeaderFooter[8],41);
   1378a:	0f 90       	pop	r0
   1378c:	0f 90       	pop	r0
   1378e:	0f 90       	pop	r0
   13790:	0f 90       	pop	r0
   13792:	c7 01       	movw	r24, r14
   13794:	60 e7       	ldi	r22, 0x70	; 112
   13796:	73 e0       	ldi	r23, 0x03	; 3
   13798:	49 e2       	ldi	r20, 0x29	; 41
   1379a:	50 e0       	ldi	r21, 0x00	; 0
   1379c:	0e 94 6e aa 	call	0x154dc	; 0x154dc <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("                                        "));
   137a0:	00 d0       	rcall	.+0      	; 0x137a2 <MasterReset+0x722>
   137a2:	00 d0       	rcall	.+0      	; 0x137a4 <MasterReset+0x724>
   137a4:	ed b7       	in	r30, 0x3d	; 61
   137a6:	fe b7       	in	r31, 0x3e	; 62
   137a8:	f2 82       	std	Z+2, r15	; 0x02
   137aa:	e1 82       	std	Z+1, r14	; 0x01
   137ac:	83 ed       	ldi	r24, 0xD3	; 211
   137ae:	92 e0       	ldi	r25, 0x02	; 2
   137b0:	94 83       	std	Z+4, r25	; 0x04
   137b2:	83 83       	std	Z+3, r24	; 0x03
   137b4:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefHeaderFooter[9],41);
   137b8:	0f 90       	pop	r0
   137ba:	0f 90       	pop	r0
   137bc:	0f 90       	pop	r0
   137be:	0f 90       	pop	r0
   137c0:	c7 01       	movw	r24, r14
   137c2:	69 e9       	ldi	r22, 0x99	; 153
   137c4:	73 e0       	ldi	r23, 0x03	; 3
   137c6:	49 e2       	ldi	r20, 0x29	; 41
   137c8:	50 e0       	ldi	r21, 0x00	; 0
   137ca:	0e 94 6e aa 	call	0x154dc	; 0x154dc <__eewr_block_m128>
	 
	 eeprom_write_byte(&DefIFT_ID,1);
   137ce:	80 e0       	ldi	r24, 0x00	; 0
   137d0:	90 e0       	ldi	r25, 0x00	; 0
   137d2:	61 e0       	ldi	r22, 0x01	; 1
   137d4:	0e 94 78 aa 	call	0x154f0	; 0x154f0 <__eewr_byte_m128>
}
   137d8:	ec 96       	adiw	r28, 0x3c	; 60
   137da:	0f b6       	in	r0, 0x3f	; 63
   137dc:	f8 94       	cli
   137de:	de bf       	out	0x3e, r29	; 62
   137e0:	0f be       	out	0x3f, r0	; 63
   137e2:	cd bf       	out	0x3d, r28	; 61
   137e4:	cf 91       	pop	r28
   137e6:	df 91       	pop	r29
   137e8:	1f 91       	pop	r17
   137ea:	0f 91       	pop	r16
   137ec:	ff 90       	pop	r15
   137ee:	ef 90       	pop	r14
   137f0:	df 90       	pop	r13
   137f2:	cf 90       	pop	r12
   137f4:	bf 90       	pop	r11
   137f6:	08 95       	ret

000137f8 <FMenuMaster>:
     else Result=RC_INVALID;

   return Result;
}

char FMenuMaster(){ 
   137f8:	cf 92       	push	r12
   137fa:	df 92       	push	r13
   137fc:	ef 92       	push	r14
   137fe:	ff 92       	push	r15
   13800:	0f 93       	push	r16
   13802:	1f 93       	push	r17
   13804:	df 93       	push	r29
   13806:	cf 93       	push	r28
   13808:	cd b7       	in	r28, 0x3d	; 61
   1380a:	de b7       	in	r29, 0x3e	; 62
   1380c:	e2 97       	sbiw	r28, 0x32	; 50
   1380e:	0f b6       	in	r0, 0x3f	; 63
   13810:	f8 94       	cli
   13812:	de bf       	out	0x3e, r29	; 62
   13814:	0f be       	out	0x3f, r0	; 63
   13816:	cd bf       	out	0x3d, r28	; 61
static char stMenuMaster=mmInitMaster;
     char KeyPressed,KeyChar,Result=MENU_NONE;
	 char uiResult,lcdteks[20],PTime[10],PDate[10],strNewPassword[10];
	 char strSend[20];

	 switch(stMenuMaster){
   13818:	e0 91 2b 03 	lds	r30, 0x032B
   1381c:	f0 e0       	ldi	r31, 0x00	; 0
   1381e:	e9 31       	cpi	r30, 0x19	; 25
   13820:	f1 05       	cpc	r31, r1
   13822:	08 f0       	brcs	.+2      	; 0x13826 <FMenuMaster+0x2e>
   13824:	d7 c2       	rjmp	.+1454   	; 0x13dd4 <FMenuMaster+0x5dc>
   13826:	e2 51       	subi	r30, 0x12	; 18
   13828:	ff 4f       	sbci	r31, 0xFF	; 255
   1382a:	ee 0f       	add	r30, r30
   1382c:	ff 1f       	adc	r31, r31
   1382e:	05 90       	lpm	r0, Z+
   13830:	f4 91       	lpm	r31, Z+
   13832:	e0 2d       	mov	r30, r0
   13834:	09 94       	ijmp
	 case mmInitMaster:
	      lcd_clear();
   13836:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
		  lcd_printf(1,1,PSTR("-System Admin Level-"));
   1383a:	81 e0       	ldi	r24, 0x01	; 1
   1383c:	61 e0       	ldi	r22, 0x01	; 1
   1383e:	43 eb       	ldi	r20, 0xB3	; 179
   13840:	59 e1       	ldi	r21, 0x19	; 25
   13842:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  lcd_printf(2,1,PSTR("1.Restore Password  "));
   13846:	82 e0       	ldi	r24, 0x02	; 2
   13848:	61 e0       	ldi	r22, 0x01	; 1
   1384a:	4e e9       	ldi	r20, 0x9E	; 158
   1384c:	59 e1       	ldi	r21, 0x19	; 25
   1384e:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  lcd_printf(3,1,PSTR("2.Master Reset      "));
   13852:	83 e0       	ldi	r24, 0x03	; 3
   13854:	61 e0       	ldi	r22, 0x01	; 1
   13856:	49 e8       	ldi	r20, 0x89	; 137
   13858:	59 e1       	ldi	r21, 0x19	; 25
   1385a:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  lcd_printf(4,1,PSTR("[*]Exit             "));
   1385e:	84 e0       	ldi	r24, 0x04	; 4
   13860:	61 e0       	ldi	r22, 0x01	; 1
   13862:	44 e7       	ldi	r20, 0x74	; 116
   13864:	59 e1       	ldi	r21, 0x19	; 25
   13866:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>

		  //uart_printf(1,1,PSTR("-System Admin Level-"));

		  stMenuMaster=mmMasterSelect;
   1386a:	81 e0       	ldi	r24, 0x01	; 1
   1386c:	ac c2       	rjmp	.+1368   	; 0x13dc6 <FMenuMaster+0x5ce>
	      break;
     case mmMasterSelect:
	 	  KeyPressed=_key_scan(1);
   1386e:	81 e0       	ldi	r24, 0x01	; 1
   13870:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
   13874:	0e 94 49 a3 	call	0x14692	; 0x14692 <_key_btn>
          switch(KeyChar){
   13878:	81 33       	cpi	r24, 0x31	; 49
   1387a:	09 f4       	brne	.+2      	; 0x1387e <FMenuMaster+0x86>
   1387c:	d9 c1       	rjmp	.+946    	; 0x13c30 <FMenuMaster+0x438>
   1387e:	82 33       	cpi	r24, 0x32	; 50
   13880:	21 f0       	breq	.+8      	; 0x1388a <FMenuMaster+0x92>
   13882:	8a 32       	cpi	r24, 0x2A	; 42
   13884:	09 f0       	breq	.+2      	; 0x13888 <FMenuMaster+0x90>
   13886:	a6 c2       	rjmp	.+1356   	; 0x13dd4 <FMenuMaster+0x5dc>
   13888:	9d c2       	rjmp	.+1338   	; 0x13dc4 <FMenuMaster+0x5cc>
		  case '1':
               stMenuMaster=mmRestorePasswordMenu;
		       break;
		  case '2':
		       stMenuMaster=mmMasterReset;
   1388a:	81 e1       	ldi	r24, 0x11	; 17
   1388c:	9c c2       	rjmp	.+1336   	; 0x13dc6 <FMenuMaster+0x5ce>
		       break;
		  }
	      break;
     case mmMasterReset:
		  
	      _datetime(0, strSystemDate, strSystemTime);
   1388e:	28 e5       	ldi	r18, 0x58	; 88
   13890:	e2 2e       	mov	r14, r18
   13892:	29 e0       	ldi	r18, 0x09	; 9
   13894:	f2 2e       	mov	r15, r18
   13896:	80 e0       	ldi	r24, 0x00	; 0
   13898:	6e e9       	ldi	r22, 0x9E	; 158
   1389a:	74 e0       	ldi	r23, 0x04	; 4
   1389c:	a7 01       	movw	r20, r14
   1389e:	0e 94 e4 a4 	call	0x149c8	; 0x149c8 <_datetime>
	      sprintf_P(PTime,PSTR("%s"),strSystemTime);
   138a2:	00 d0       	rcall	.+0      	; 0x138a4 <FMenuMaster+0xac>
   138a4:	00 d0       	rcall	.+0      	; 0x138a6 <FMenuMaster+0xae>
   138a6:	00 d0       	rcall	.+0      	; 0x138a8 <FMenuMaster+0xb0>
   138a8:	ed b7       	in	r30, 0x3d	; 61
   138aa:	fe b7       	in	r31, 0x3e	; 62
   138ac:	31 96       	adiw	r30, 0x01	; 1
   138ae:	8e 01       	movw	r16, r28
   138b0:	0f 5f       	subi	r16, 0xFF	; 255
   138b2:	1f 4f       	sbci	r17, 0xFF	; 255
   138b4:	ad b7       	in	r26, 0x3d	; 61
   138b6:	be b7       	in	r27, 0x3e	; 62
   138b8:	12 96       	adiw	r26, 0x02	; 2
   138ba:	1c 93       	st	X, r17
   138bc:	0e 93       	st	-X, r16
   138be:	11 97       	sbiw	r26, 0x01	; 1
   138c0:	81 e7       	ldi	r24, 0x71	; 113
   138c2:	99 e1       	ldi	r25, 0x19	; 25
   138c4:	93 83       	std	Z+3, r25	; 0x03
   138c6:	82 83       	std	Z+2, r24	; 0x02
   138c8:	f5 82       	std	Z+5, r15	; 0x05
   138ca:	e4 82       	std	Z+4, r14	; 0x04
   138cc:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		  sprintf_P(strGeniusCode,PSTR("22345678"));		  
   138d0:	0f 90       	pop	r0
   138d2:	0f 90       	pop	r0
   138d4:	96 e7       	ldi	r25, 0x76	; 118
   138d6:	e9 2e       	mov	r14, r25
   138d8:	96 e0       	ldi	r25, 0x06	; 6
   138da:	f9 2e       	mov	r15, r25
   138dc:	ed b7       	in	r30, 0x3d	; 61
   138de:	fe b7       	in	r31, 0x3e	; 62
   138e0:	f2 82       	std	Z+2, r15	; 0x02
   138e2:	e1 82       	std	Z+1, r14	; 0x01
   138e4:	88 e6       	ldi	r24, 0x68	; 104
   138e6:	99 e1       	ldi	r25, 0x19	; 25
   138e8:	94 83       	std	Z+4, r25	; 0x04
   138ea:	83 83       	std	Z+3, r24	; 0x03
   138ec:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		  RemoveChar(PTime,':');sprintf_P(strKeyStamp,PSTR(""));
   138f0:	0f 90       	pop	r0
   138f2:	0f 90       	pop	r0
   138f4:	0f 90       	pop	r0
   138f6:	0f 90       	pop	r0
   138f8:	c8 01       	movw	r24, r16
   138fa:	6a e3       	ldi	r22, 0x3A	; 58
   138fc:	0e 94 5e 1b 	call	0x36bc	; 0x36bc <RemoveChar>
   13900:	00 d0       	rcall	.+0      	; 0x13902 <FMenuMaster+0x10a>
   13902:	00 d0       	rcall	.+0      	; 0x13904 <FMenuMaster+0x10c>
   13904:	84 eb       	ldi	r24, 0xB4	; 180
   13906:	c8 2e       	mov	r12, r24
   13908:	88 e0       	ldi	r24, 0x08	; 8
   1390a:	d8 2e       	mov	r13, r24
   1390c:	ad b7       	in	r26, 0x3d	; 61
   1390e:	be b7       	in	r27, 0x3e	; 62
   13910:	12 96       	adiw	r26, 0x02	; 2
   13912:	dc 92       	st	X, r13
   13914:	ce 92       	st	-X, r12
   13916:	11 97       	sbiw	r26, 0x01	; 1
   13918:	87 e6       	ldi	r24, 0x67	; 103
   1391a:	99 e1       	ldi	r25, 0x19	; 25
   1391c:	14 96       	adiw	r26, 0x04	; 4
   1391e:	9c 93       	st	X, r25
   13920:	8e 93       	st	-X, r24
   13922:	13 97       	sbiw	r26, 0x03	; 3
   13924:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		  GenerateKeyStamp(PTime,strGeniusCode,strKeyStamp);
   13928:	0f 90       	pop	r0
   1392a:	0f 90       	pop	r0
   1392c:	0f 90       	pop	r0
   1392e:	0f 90       	pop	r0
   13930:	c8 01       	movw	r24, r16
   13932:	b7 01       	movw	r22, r14
   13934:	a6 01       	movw	r20, r12
   13936:	0e 94 b4 1b 	call	0x3768	; 0x3768 <GenerateKeyStamp>

		  lcd_clear();
   1393a:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
		  lcd_printf(1,1,PSTR("-Master Reset-"));
   1393e:	81 e0       	ldi	r24, 0x01	; 1
   13940:	61 e0       	ldi	r22, 0x01	; 1
   13942:	48 e5       	ldi	r20, 0x58	; 88
   13944:	59 e1       	ldi	r21, 0x19	; 25
   13946:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  sprintf_P(lcdteks,PSTR("Seed Code:%s"),strKeyStamp);
   1394a:	00 d0       	rcall	.+0      	; 0x1394c <FMenuMaster+0x154>
   1394c:	00 d0       	rcall	.+0      	; 0x1394e <FMenuMaster+0x156>
   1394e:	00 d0       	rcall	.+0      	; 0x13950 <FMenuMaster+0x158>
   13950:	ed b7       	in	r30, 0x3d	; 61
   13952:	fe b7       	in	r31, 0x3e	; 62
   13954:	31 96       	adiw	r30, 0x01	; 1
   13956:	8e 01       	movw	r16, r28
   13958:	01 5e       	subi	r16, 0xE1	; 225
   1395a:	1f 4f       	sbci	r17, 0xFF	; 255
   1395c:	ad b7       	in	r26, 0x3d	; 61
   1395e:	be b7       	in	r27, 0x3e	; 62
   13960:	12 96       	adiw	r26, 0x02	; 2
   13962:	1c 93       	st	X, r17
   13964:	0e 93       	st	-X, r16
   13966:	11 97       	sbiw	r26, 0x01	; 1
   13968:	8b e4       	ldi	r24, 0x4B	; 75
   1396a:	99 e1       	ldi	r25, 0x19	; 25
   1396c:	93 83       	std	Z+3, r25	; 0x03
   1396e:	82 83       	std	Z+2, r24	; 0x02
   13970:	d5 82       	std	Z+5, r13	; 0x05
   13972:	c4 82       	std	Z+4, r12	; 0x04
   13974:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		  lcd_print(2,1,lcdteks);
   13978:	ed b7       	in	r30, 0x3d	; 61
   1397a:	fe b7       	in	r31, 0x3e	; 62
   1397c:	36 96       	adiw	r30, 0x06	; 6
   1397e:	0f b6       	in	r0, 0x3f	; 63
   13980:	f8 94       	cli
   13982:	fe bf       	out	0x3e, r31	; 62
   13984:	0f be       	out	0x3f, r0	; 63
   13986:	ed bf       	out	0x3d, r30	; 61
   13988:	82 e0       	ldi	r24, 0x02	; 2
   1398a:	61 e0       	ldi	r22, 0x01	; 1
   1398c:	a8 01       	movw	r20, r16
   1398e:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
		  lcd_printf(3,1,   PSTR("ResetCode:_         "));
   13992:	83 e0       	ldi	r24, 0x03	; 3
   13994:	61 e0       	ldi	r22, 0x01	; 1
   13996:	46 e3       	ldi	r20, 0x36	; 54
   13998:	59 e1       	ldi	r21, 0x19	; 25
   1399a:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  lcd_printf(4,1,   PSTR("[*]Cancel   [#]Enter"));		          
   1399e:	84 e0       	ldi	r24, 0x04	; 4
   139a0:	61 e0       	ldi	r22, 0x01	; 1
   139a2:	41 e2       	ldi	r20, 0x21	; 33
   139a4:	59 e1       	ldi	r21, 0x19	; 25
   139a6:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
	      stMenuMaster=mmResetCodeEntry;
   139aa:	82 e1       	ldi	r24, 0x12	; 18
   139ac:	0c c2       	rjmp	.+1048   	; 0x13dc6 <FMenuMaster+0x5ce>
	      break;
     case mmResetCodeEntry:
          uiResult=UserInput(UI_NUMBER_R,3,11,strRestoreCode,0,9);
   139ae:	81 e0       	ldi	r24, 0x01	; 1
   139b0:	63 e0       	ldi	r22, 0x03	; 3
   139b2:	4b e0       	ldi	r20, 0x0B	; 11
   139b4:	20 e6       	ldi	r18, 0x60	; 96
   139b6:	3d e0       	ldi	r19, 0x0D	; 13
   139b8:	00 e0       	ldi	r16, 0x00	; 0
   139ba:	10 e0       	ldi	r17, 0x00	; 0
   139bc:	b9 e0       	ldi	r27, 0x09	; 9
   139be:	eb 2e       	mov	r14, r27
   139c0:	0e 94 d3 39 	call	0x73a6	; 0x73a6 <UserInput>
		  switch(uiResult){
   139c4:	83 30       	cpi	r24, 0x03	; 3
   139c6:	49 f0       	breq	.+18     	; 0x139da <FMenuMaster+0x1e2>
   139c8:	84 30       	cpi	r24, 0x04	; 4
   139ca:	08 f4       	brcc	.+2      	; 0x139ce <FMenuMaster+0x1d6>
   139cc:	7e c1       	rjmp	.+764    	; 0x13cca <FMenuMaster+0x4d2>
   139ce:	84 30       	cpi	r24, 0x04	; 4
   139d0:	31 f0       	breq	.+12     	; 0x139de <FMenuMaster+0x1e6>
   139d2:	85 30       	cpi	r24, 0x05	; 5
   139d4:	09 f0       	breq	.+2      	; 0x139d8 <FMenuMaster+0x1e0>
   139d6:	fe c1       	rjmp	.+1020   	; 0x13dd4 <FMenuMaster+0x5dc>
   139d8:	07 c0       	rjmp	.+14     	; 0x139e8 <FMenuMaster+0x1f0>
		  case USER_OK:
               stMenuMaster=mmIsValidResetCode;
   139da:	83 e1       	ldi	r24, 0x13	; 19
   139dc:	f4 c1       	rjmp	.+1000   	; 0x13dc6 <FMenuMaster+0x5ce>
		       break;
          case USER_CANCEL:
		       stMenuMaster=mmExitMaster;
		       break;
		  case USER_ENTRY:
		       lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
   139de:	84 e0       	ldi	r24, 0x04	; 4
   139e0:	61 e0       	ldi	r22, 0x01	; 1
   139e2:	4c e0       	ldi	r20, 0x0C	; 12
   139e4:	59 e1       	ldi	r21, 0x19	; 25
   139e6:	86 c1       	rjmp	.+780    	; 0x13cf4 <FMenuMaster+0x4fc>
		       break;
          case USER_NO_DATA:
		       lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
   139e8:	84 e0       	ldi	r24, 0x04	; 4
   139ea:	61 e0       	ldi	r22, 0x01	; 1
   139ec:	47 ef       	ldi	r20, 0xF7	; 247
   139ee:	58 e1       	ldi	r21, 0x18	; 24
   139f0:	81 c1       	rjmp	.+770    	; 0x13cf4 <FMenuMaster+0x4fc>
		       break;
		  }	      
	      break;
     case mmIsValidResetCode:
	      if (ValidateRestoreCode(strKeyStamp,strRestoreCode)==RC_VALID){
   139f2:	84 eb       	ldi	r24, 0xB4	; 180
   139f4:	98 e0       	ldi	r25, 0x08	; 8
   139f6:	60 e6       	ldi	r22, 0x60	; 96
   139f8:	7d e0       	ldi	r23, 0x0D	; 13
   139fa:	0e 94 4d 1c 	call	0x389a	; 0x389a <ValidateRestoreCode>
   139fe:	81 30       	cpi	r24, 0x01	; 1
   13a00:	11 f4       	brne	.+4      	; 0x13a06 <FMenuMaster+0x20e>
		      stMenuMaster=mmMasterResetExec;
   13a02:	84 e1       	ldi	r24, 0x14	; 20
   13a04:	e0 c1       	rjmp	.+960    	; 0x13dc6 <FMenuMaster+0x5ce>
		  }else stMenuMaster=mmDisplayInvalidResetCode;
   13a06:	86 e1       	ldi	r24, 0x16	; 22
   13a08:	de c1       	rjmp	.+956    	; 0x13dc6 <FMenuMaster+0x5ce>
	      break;
     case mmMasterResetExec:
	      lcd_clear();
   13a0a:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
	      lcd_printf(1,1,PSTR("Reset EEPROM"));
   13a0e:	81 e0       	ldi	r24, 0x01	; 1
   13a10:	61 e0       	ldi	r22, 0x01	; 1
   13a12:	4a ee       	ldi	r20, 0xEA	; 234
   13a14:	58 e1       	ldi	r21, 0x18	; 24
   13a16:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
	      lcd_printf(2,1,PSTR("Please Wait.."));
   13a1a:	82 e0       	ldi	r24, 0x02	; 2
   13a1c:	61 e0       	ldi	r22, 0x01	; 1
   13a1e:	4c ed       	ldi	r20, 0xDC	; 220
   13a20:	58 e1       	ldi	r21, 0x18	; 24
   13a22:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
	      MasterReset();
   13a26:	0e 94 40 98 	call	0x13080	; 0x13080 <MasterReset>
          stMenuMaster=mmSuccesfullReset;
   13a2a:	85 e1       	ldi	r24, 0x15	; 21
   13a2c:	cc c1       	rjmp	.+920    	; 0x13dc6 <FMenuMaster+0x5ce>
	      break;
     case mmSuccesfullReset:
	      lcd_clear();
   13a2e:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
		  system_beep(1);
   13a32:	81 e0       	ldi	r24, 0x01	; 1
   13a34:	90 e0       	ldi	r25, 0x00	; 0
   13a36:	0e 94 ee 14 	call	0x29dc	; 0x29dc <system_beep>
	      lcd_printf(2,1,PSTR("Reset Complete"));
   13a3a:	82 e0       	ldi	r24, 0x02	; 2
   13a3c:	61 e0       	ldi	r22, 0x01	; 1
   13a3e:	4d ec       	ldi	r20, 0xCD	; 205
   13a40:	58 e1       	ldi	r21, 0x18	; 24
   13a42:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
	      TimDisplay=0; 
   13a46:	10 92 70 02 	sts	0x0270, r1
		  stMenuMaster=mmDelayDisplayComplete;
   13a4a:	88 e1       	ldi	r24, 0x18	; 24
   13a4c:	bc c1       	rjmp	.+888    	; 0x13dc6 <FMenuMaster+0x5ce>
	      break;
     case mmDisplayInvalidResetCode:
          system_beep(1);
   13a4e:	81 e0       	ldi	r24, 0x01	; 1
   13a50:	90 e0       	ldi	r25, 0x00	; 0
   13a52:	0e 94 ee 14 	call	0x29dc	; 0x29dc <system_beep>
          lcd_printf(3,1,PSTR("Invalid Code        "));
   13a56:	83 e0       	ldi	r24, 0x03	; 3
   13a58:	61 e0       	ldi	r22, 0x01	; 1
   13a5a:	48 eb       	ldi	r20, 0xB8	; 184
   13a5c:	58 e1       	ldi	r21, 0x18	; 24
   13a5e:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
          TimDisplay=0; 
   13a62:	10 92 70 02 	sts	0x0270, r1
		  stMenuMaster=mmDelayDisplayInvalidResetCode;
   13a66:	87 e1       	ldi	r24, 0x17	; 23
   13a68:	ae c1       	rjmp	.+860    	; 0x13dc6 <FMenuMaster+0x5ce>
     case mmDelayDisplayInvalidResetCode:
          if (TimDisplay>5)stMenuMaster=mmExitMaster;
	      break;
     
	 case mmDelayDisplayComplete:
          if (TimDisplay>5)stMenuMaster=mmExitMaster;
   13a6a:	80 91 70 02 	lds	r24, 0x0270
   13a6e:	86 30       	cpi	r24, 0x06	; 6
   13a70:	08 f4       	brcc	.+2      	; 0x13a74 <FMenuMaster+0x27c>
   13a72:	b0 c1       	rjmp	.+864    	; 0x13dd4 <FMenuMaster+0x5dc>
   13a74:	a7 c1       	rjmp	.+846    	; 0x13dc4 <FMenuMaster+0x5cc>
	      break;

     case mmRestorePasswordMenu:	      
	      lcd_clear();
   13a76:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
		  lcd_printf(1,1,PSTR("Enter GeNiUs Code   "));
   13a7a:	81 e0       	ldi	r24, 0x01	; 1
   13a7c:	61 e0       	ldi	r22, 0x01	; 1
   13a7e:	43 ea       	ldi	r20, 0xA3	; 163
   13a80:	58 e1       	ldi	r21, 0x18	; 24
   13a82:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  lcd_printf(2,1,PSTR("_                   "));
   13a86:	82 e0       	ldi	r24, 0x02	; 2
   13a88:	61 e0       	ldi	r22, 0x01	; 1
   13a8a:	4e e8       	ldi	r20, 0x8E	; 142
   13a8c:	58 e1       	ldi	r21, 0x18	; 24
   13a8e:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  lcd_printf(4,4,PSTR("[*]Cancel   [#]Enter"));
   13a92:	84 e0       	ldi	r24, 0x04	; 4
   13a94:	64 e0       	ldi	r22, 0x04	; 4
   13a96:	49 e7       	ldi	r20, 0x79	; 121
   13a98:	58 e1       	ldi	r21, 0x18	; 24
   13a9a:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  sprintf_P(strGeniusCode,PSTR(""));
   13a9e:	00 d0       	rcall	.+0      	; 0x13aa0 <FMenuMaster+0x2a8>
   13aa0:	00 d0       	rcall	.+0      	; 0x13aa2 <FMenuMaster+0x2aa>
   13aa2:	86 e7       	ldi	r24, 0x76	; 118
   13aa4:	96 e0       	ldi	r25, 0x06	; 6
   13aa6:	ad b7       	in	r26, 0x3d	; 61
   13aa8:	be b7       	in	r27, 0x3e	; 62
   13aaa:	12 96       	adiw	r26, 0x02	; 2
   13aac:	9c 93       	st	X, r25
   13aae:	8e 93       	st	-X, r24
   13ab0:	11 97       	sbiw	r26, 0x01	; 1
   13ab2:	88 e7       	ldi	r24, 0x78	; 120
   13ab4:	98 e1       	ldi	r25, 0x18	; 24
   13ab6:	14 96       	adiw	r26, 0x04	; 4
   13ab8:	9c 93       	st	X, r25
   13aba:	8e 93       	st	-X, r24
   13abc:	13 97       	sbiw	r26, 0x03	; 3
   13abe:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
          stMenuMaster=mmGeniusCodeEntry;
   13ac2:	83 e0       	ldi	r24, 0x03	; 3
   13ac4:	80 93 2b 03 	sts	0x032B, r24
	      break;
   13ac8:	0f 90       	pop	r0
   13aca:	0f 90       	pop	r0
   13acc:	0f 90       	pop	r0
   13ace:	0f 90       	pop	r0
   13ad0:	81 c1       	rjmp	.+770    	; 0x13dd4 <FMenuMaster+0x5dc>
     case mmGeniusCodeEntry:
	 	  uiResult=UserInput(UI_NUMBER_R,2,1,strGeniusCode,0,10);
   13ad2:	81 e0       	ldi	r24, 0x01	; 1
   13ad4:	62 e0       	ldi	r22, 0x02	; 2
   13ad6:	41 e0       	ldi	r20, 0x01	; 1
   13ad8:	26 e7       	ldi	r18, 0x76	; 118
   13ada:	36 e0       	ldi	r19, 0x06	; 6
   13adc:	00 e0       	ldi	r16, 0x00	; 0
   13ade:	10 e0       	ldi	r17, 0x00	; 0
   13ae0:	aa e0       	ldi	r26, 0x0A	; 10
   13ae2:	ea 2e       	mov	r14, r26
   13ae4:	0e 94 d3 39 	call	0x73a6	; 0x73a6 <UserInput>
		  switch(uiResult){
   13ae8:	83 30       	cpi	r24, 0x03	; 3
   13aea:	49 f0       	breq	.+18     	; 0x13afe <FMenuMaster+0x306>
   13aec:	84 30       	cpi	r24, 0x04	; 4
   13aee:	08 f4       	brcc	.+2      	; 0x13af2 <FMenuMaster+0x2fa>
   13af0:	ec c0       	rjmp	.+472    	; 0x13cca <FMenuMaster+0x4d2>
   13af2:	84 30       	cpi	r24, 0x04	; 4
   13af4:	69 f0       	breq	.+26     	; 0x13b10 <FMenuMaster+0x318>
   13af6:	85 30       	cpi	r24, 0x05	; 5
   13af8:	09 f0       	breq	.+2      	; 0x13afc <FMenuMaster+0x304>
   13afa:	6c c1       	rjmp	.+728    	; 0x13dd4 <FMenuMaster+0x5dc>
   13afc:	0e c0       	rjmp	.+28     	; 0x13b1a <FMenuMaster+0x322>
		  case USER_OK:               
			   //uart_printf(1,0,PSTR("GeniusCode: "));
			   //uart_print(1,1,strGeniusCode);
		       _datetime(0, strSystemDate, strSystemTime);
   13afe:	80 e0       	ldi	r24, 0x00	; 0
   13b00:	6e e9       	ldi	r22, 0x9E	; 158
   13b02:	74 e0       	ldi	r23, 0x04	; 4
   13b04:	48 e5       	ldi	r20, 0x58	; 88
   13b06:	59 e0       	ldi	r21, 0x09	; 9
   13b08:	0e 94 e4 a4 	call	0x149c8	; 0x149c8 <_datetime>
               stMenuMaster=mmIsValidGeniusCode;
   13b0c:	84 e0       	ldi	r24, 0x04	; 4
   13b0e:	5b c1       	rjmp	.+694    	; 0x13dc6 <FMenuMaster+0x5ce>
		       break;
          case USER_CANCEL:
		       stMenuMaster=mmExitMaster;
		       break;
		  case USER_ENTRY:
		       lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
   13b10:	84 e0       	ldi	r24, 0x04	; 4
   13b12:	61 e0       	ldi	r22, 0x01	; 1
   13b14:	43 e6       	ldi	r20, 0x63	; 99
   13b16:	58 e1       	ldi	r21, 0x18	; 24
   13b18:	ed c0       	rjmp	.+474    	; 0x13cf4 <FMenuMaster+0x4fc>
		       break;
          case USER_NO_DATA:
		       lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
   13b1a:	84 e0       	ldi	r24, 0x04	; 4
   13b1c:	61 e0       	ldi	r22, 0x01	; 1
   13b1e:	4e e4       	ldi	r20, 0x4E	; 78
   13b20:	58 e1       	ldi	r21, 0x18	; 24
   13b22:	e8 c0       	rjmp	.+464    	; 0x13cf4 <FMenuMaster+0x4fc>
		       break;
		  }
	      break;
     case mmIsValidGeniusCode:
	      //GetDate
		      sprintf_P(PDate,PSTR("%s"),strSystemDate);
   13b24:	00 d0       	rcall	.+0      	; 0x13b26 <FMenuMaster+0x32e>
   13b26:	00 d0       	rcall	.+0      	; 0x13b28 <FMenuMaster+0x330>
   13b28:	00 d0       	rcall	.+0      	; 0x13b2a <FMenuMaster+0x332>
   13b2a:	ed b7       	in	r30, 0x3d	; 61
   13b2c:	fe b7       	in	r31, 0x3e	; 62
   13b2e:	31 96       	adiw	r30, 0x01	; 1
   13b30:	8e 01       	movw	r16, r28
   13b32:	05 5f       	subi	r16, 0xF5	; 245
   13b34:	1f 4f       	sbci	r17, 0xFF	; 255
   13b36:	ad b7       	in	r26, 0x3d	; 61
   13b38:	be b7       	in	r27, 0x3e	; 62
   13b3a:	12 96       	adiw	r26, 0x02	; 2
   13b3c:	1c 93       	st	X, r17
   13b3e:	0e 93       	st	-X, r16
   13b40:	11 97       	sbiw	r26, 0x01	; 1
   13b42:	8b e4       	ldi	r24, 0x4B	; 75
   13b44:	98 e1       	ldi	r25, 0x18	; 24
   13b46:	93 83       	std	Z+3, r25	; 0x03
   13b48:	82 83       	std	Z+2, r24	; 0x02
   13b4a:	8e e9       	ldi	r24, 0x9E	; 158
   13b4c:	94 e0       	ldi	r25, 0x04	; 4
   13b4e:	95 83       	std	Z+5, r25	; 0x05
   13b50:	84 83       	std	Z+4, r24	; 0x04
   13b52:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
			  RemoveChar(PDate,'/');
   13b56:	ed b7       	in	r30, 0x3d	; 61
   13b58:	fe b7       	in	r31, 0x3e	; 62
   13b5a:	36 96       	adiw	r30, 0x06	; 6
   13b5c:	0f b6       	in	r0, 0x3f	; 63
   13b5e:	f8 94       	cli
   13b60:	fe bf       	out	0x3e, r31	; 62
   13b62:	0f be       	out	0x3f, r0	; 63
   13b64:	ed bf       	out	0x3d, r30	; 61
   13b66:	c8 01       	movw	r24, r16
   13b68:	6f e2       	ldi	r22, 0x2F	; 47
   13b6a:	0e 94 5e 1b 	call	0x36bc	; 0x36bc <RemoveChar>
		  if (ValidateGeniusCode(PDate,strGeniusCode)==GC_VALID){
   13b6e:	c8 01       	movw	r24, r16
   13b70:	66 e7       	ldi	r22, 0x76	; 118
   13b72:	76 e0       	ldi	r23, 0x06	; 6
   13b74:	0e 94 33 46 	call	0x8c66	; 0x8c66 <ValidateGeniusCode>
   13b78:	81 30       	cpi	r24, 0x01	; 1
   13b7a:	09 f0       	breq	.+2      	; 0x13b7e <FMenuMaster+0x386>
   13b7c:	44 c0       	rjmp	.+136    	; 0x13c06 <FMenuMaster+0x40e>

		  	  sprintf_P(PTime,PSTR("%s"),strSystemTime);
   13b7e:	00 d0       	rcall	.+0      	; 0x13b80 <FMenuMaster+0x388>
   13b80:	00 d0       	rcall	.+0      	; 0x13b82 <FMenuMaster+0x38a>
   13b82:	00 d0       	rcall	.+0      	; 0x13b84 <FMenuMaster+0x38c>
   13b84:	ed b7       	in	r30, 0x3d	; 61
   13b86:	fe b7       	in	r31, 0x3e	; 62
   13b88:	31 96       	adiw	r30, 0x01	; 1
   13b8a:	8e 01       	movw	r16, r28
   13b8c:	0f 5f       	subi	r16, 0xFF	; 255
   13b8e:	1f 4f       	sbci	r17, 0xFF	; 255
   13b90:	ad b7       	in	r26, 0x3d	; 61
   13b92:	be b7       	in	r27, 0x3e	; 62
   13b94:	12 96       	adiw	r26, 0x02	; 2
   13b96:	1c 93       	st	X, r17
   13b98:	0e 93       	st	-X, r16
   13b9a:	11 97       	sbiw	r26, 0x01	; 1
   13b9c:	88 e4       	ldi	r24, 0x48	; 72
   13b9e:	98 e1       	ldi	r25, 0x18	; 24
   13ba0:	93 83       	std	Z+3, r25	; 0x03
   13ba2:	82 83       	std	Z+2, r24	; 0x02
   13ba4:	88 e5       	ldi	r24, 0x58	; 88
   13ba6:	99 e0       	ldi	r25, 0x09	; 9
   13ba8:	95 83       	std	Z+5, r25	; 0x05
   13baa:	84 83       	std	Z+4, r24	; 0x04
   13bac:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
			  RemoveChar(PTime,':');sprintf_P(strKeyStamp,PSTR(""));
   13bb0:	ed b7       	in	r30, 0x3d	; 61
   13bb2:	fe b7       	in	r31, 0x3e	; 62
   13bb4:	36 96       	adiw	r30, 0x06	; 6
   13bb6:	0f b6       	in	r0, 0x3f	; 63
   13bb8:	f8 94       	cli
   13bba:	fe bf       	out	0x3e, r31	; 62
   13bbc:	0f be       	out	0x3f, r0	; 63
   13bbe:	ed bf       	out	0x3d, r30	; 61
   13bc0:	c8 01       	movw	r24, r16
   13bc2:	6a e3       	ldi	r22, 0x3A	; 58
   13bc4:	0e 94 5e 1b 	call	0x36bc	; 0x36bc <RemoveChar>
   13bc8:	00 d0       	rcall	.+0      	; 0x13bca <FMenuMaster+0x3d2>
   13bca:	00 d0       	rcall	.+0      	; 0x13bcc <FMenuMaster+0x3d4>
   13bcc:	f4 eb       	ldi	r31, 0xB4	; 180
   13bce:	ef 2e       	mov	r14, r31
   13bd0:	f8 e0       	ldi	r31, 0x08	; 8
   13bd2:	ff 2e       	mov	r15, r31
   13bd4:	ad b7       	in	r26, 0x3d	; 61
   13bd6:	be b7       	in	r27, 0x3e	; 62
   13bd8:	12 96       	adiw	r26, 0x02	; 2
   13bda:	fc 92       	st	X, r15
   13bdc:	ee 92       	st	-X, r14
   13bde:	11 97       	sbiw	r26, 0x01	; 1
   13be0:	87 e4       	ldi	r24, 0x47	; 71
   13be2:	98 e1       	ldi	r25, 0x18	; 24
   13be4:	14 96       	adiw	r26, 0x04	; 4
   13be6:	9c 93       	st	X, r25
   13be8:	8e 93       	st	-X, r24
   13bea:	13 97       	sbiw	r26, 0x03	; 3
   13bec:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>

              //sprintf_P(strSend,PSTR("Time:%s"),PTime);
			  // uart_print(1,1,strSend);

		      GenerateKeyStamp(PTime,strGeniusCode,strKeyStamp);			  
   13bf0:	0f 90       	pop	r0
   13bf2:	0f 90       	pop	r0
   13bf4:	0f 90       	pop	r0
   13bf6:	0f 90       	pop	r0
   13bf8:	c8 01       	movw	r24, r16
   13bfa:	66 e7       	ldi	r22, 0x76	; 118
   13bfc:	76 e0       	ldi	r23, 0x06	; 6
   13bfe:	a7 01       	movw	r20, r14
   13c00:	0e 94 b4 1b 	call	0x3768	; 0x3768 <GenerateKeyStamp>
   13c04:	cb c0       	rjmp	.+406    	; 0x13d9c <FMenuMaster+0x5a4>
			  stMenuMaster=mmDisplayKeyStamp;
		  }else stMenuMaster=mmDisplayInvalidCode;
   13c06:	85 e0       	ldi	r24, 0x05	; 5
   13c08:	de c0       	rjmp	.+444    	; 0x13dc6 <FMenuMaster+0x5ce>
	      break;
     case mmDisplayInvalidCode:
	      system_beep(1);
   13c0a:	81 e0       	ldi	r24, 0x01	; 1
   13c0c:	90 e0       	ldi	r25, 0x00	; 0
   13c0e:	0e 94 ee 14 	call	0x29dc	; 0x29dc <system_beep>
          lcd_printf(3,1,PSTR("Invalid Code        "));
   13c12:	83 e0       	ldi	r24, 0x03	; 3
   13c14:	61 e0       	ldi	r22, 0x01	; 1
   13c16:	42 e3       	ldi	r20, 0x32	; 50
   13c18:	58 e1       	ldi	r21, 0x18	; 24
   13c1a:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
          TimDisplay=0; 
   13c1e:	10 92 70 02 	sts	0x0270, r1
		  stMenuMaster=mmDelayDisplayInvalidCode;
   13c22:	86 e0       	ldi	r24, 0x06	; 6
   13c24:	d0 c0       	rjmp	.+416    	; 0x13dc6 <FMenuMaster+0x5ce>
	      break;

     case mmDelayDisplayInvalidCode:
	      if (TimDisplay>5)stMenuMaster=mmRestorePasswordMenu;
   13c26:	80 91 70 02 	lds	r24, 0x0270
   13c2a:	86 30       	cpi	r24, 0x06	; 6
   13c2c:	08 f4       	brcc	.+2      	; 0x13c30 <FMenuMaster+0x438>
   13c2e:	d2 c0       	rjmp	.+420    	; 0x13dd4 <FMenuMaster+0x5dc>
   13c30:	82 e0       	ldi	r24, 0x02	; 2
   13c32:	c9 c0       	rjmp	.+402    	; 0x13dc6 <FMenuMaster+0x5ce>
	      break;
     case mmDisplayKeyStamp:
	      lcd_clear();
   13c34:	0e 94 a8 a2 	call	0x14550	; 0x14550 <lcd_clear>
		  sprintf_P(lcdteks,PSTR("Key Stamp:%s "),strKeyStamp);
   13c38:	00 d0       	rcall	.+0      	; 0x13c3a <FMenuMaster+0x442>
   13c3a:	00 d0       	rcall	.+0      	; 0x13c3c <FMenuMaster+0x444>
   13c3c:	00 d0       	rcall	.+0      	; 0x13c3e <FMenuMaster+0x446>
   13c3e:	ed b7       	in	r30, 0x3d	; 61
   13c40:	fe b7       	in	r31, 0x3e	; 62
   13c42:	31 96       	adiw	r30, 0x01	; 1
   13c44:	8e 01       	movw	r16, r28
   13c46:	01 5e       	subi	r16, 0xE1	; 225
   13c48:	1f 4f       	sbci	r17, 0xFF	; 255
   13c4a:	ad b7       	in	r26, 0x3d	; 61
   13c4c:	be b7       	in	r27, 0x3e	; 62
   13c4e:	12 96       	adiw	r26, 0x02	; 2
   13c50:	1c 93       	st	X, r17
   13c52:	0e 93       	st	-X, r16
   13c54:	11 97       	sbiw	r26, 0x01	; 1
   13c56:	84 e2       	ldi	r24, 0x24	; 36
   13c58:	98 e1       	ldi	r25, 0x18	; 24
   13c5a:	93 83       	std	Z+3, r25	; 0x03
   13c5c:	82 83       	std	Z+2, r24	; 0x02
   13c5e:	84 eb       	ldi	r24, 0xB4	; 180
   13c60:	98 e0       	ldi	r25, 0x08	; 8
   13c62:	95 83       	std	Z+5, r25	; 0x05
   13c64:	84 83       	std	Z+4, r24	; 0x04
   13c66:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		  lcd_print(1,1,lcdteks);
   13c6a:	ed b7       	in	r30, 0x3d	; 61
   13c6c:	fe b7       	in	r31, 0x3e	; 62
   13c6e:	36 96       	adiw	r30, 0x06	; 6
   13c70:	0f b6       	in	r0, 0x3f	; 63
   13c72:	f8 94       	cli
   13c74:	fe bf       	out	0x3e, r31	; 62
   13c76:	0f be       	out	0x3f, r0	; 63
   13c78:	ed bf       	out	0x3d, r30	; 61
   13c7a:	81 e0       	ldi	r24, 0x01	; 1
   13c7c:	61 e0       	ldi	r22, 0x01	; 1
   13c7e:	a8 01       	movw	r20, r16
   13c80:	0e 94 47 a2 	call	0x1448e	; 0x1448e <lcd_print>
		  lcd_printf(2,1,PSTR("Enter Restore Code  "));
   13c84:	82 e0       	ldi	r24, 0x02	; 2
   13c86:	61 e0       	ldi	r22, 0x01	; 1
   13c88:	4f e0       	ldi	r20, 0x0F	; 15
   13c8a:	58 e1       	ldi	r21, 0x18	; 24
   13c8c:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  lcd_printf(3,1,PSTR("_                   "));
   13c90:	83 e0       	ldi	r24, 0x03	; 3
   13c92:	61 e0       	ldi	r22, 0x01	; 1
   13c94:	4a ef       	ldi	r20, 0xFA	; 250
   13c96:	57 e1       	ldi	r21, 0x17	; 23
   13c98:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
   13c9c:	84 e0       	ldi	r24, 0x04	; 4
   13c9e:	61 e0       	ldi	r22, 0x01	; 1
   13ca0:	45 ee       	ldi	r20, 0xE5	; 229
   13ca2:	57 e1       	ldi	r21, 0x17	; 23
   13ca4:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
          stMenuMaster=mmRestoreCodeEntry;
   13ca8:	88 e0       	ldi	r24, 0x08	; 8
   13caa:	8d c0       	rjmp	.+282    	; 0x13dc6 <FMenuMaster+0x5ce>
	      break;
     case mmRestoreCodeEntry:
	 	  uiResult=UserInput(UI_NUMBER_R,3,1,strRestoreCode,0,10);
   13cac:	81 e0       	ldi	r24, 0x01	; 1
   13cae:	63 e0       	ldi	r22, 0x03	; 3
   13cb0:	41 e0       	ldi	r20, 0x01	; 1
   13cb2:	20 e6       	ldi	r18, 0x60	; 96
   13cb4:	3d e0       	ldi	r19, 0x0D	; 13
   13cb6:	00 e0       	ldi	r16, 0x00	; 0
   13cb8:	10 e0       	ldi	r17, 0x00	; 0
   13cba:	ea e0       	ldi	r30, 0x0A	; 10
   13cbc:	ee 2e       	mov	r14, r30
   13cbe:	0e 94 d3 39 	call	0x73a6	; 0x73a6 <UserInput>
		  switch(uiResult){
   13cc2:	83 30       	cpi	r24, 0x03	; 3
   13cc4:	61 f0       	breq	.+24     	; 0x13cde <FMenuMaster+0x4e6>
   13cc6:	84 30       	cpi	r24, 0x04	; 4
   13cc8:	20 f4       	brcc	.+8      	; 0x13cd2 <FMenuMaster+0x4da>
   13cca:	81 30       	cpi	r24, 0x01	; 1
   13ccc:	09 f0       	breq	.+2      	; 0x13cd0 <FMenuMaster+0x4d8>
   13cce:	82 c0       	rjmp	.+260    	; 0x13dd4 <FMenuMaster+0x5dc>
   13cd0:	79 c0       	rjmp	.+242    	; 0x13dc4 <FMenuMaster+0x5cc>
   13cd2:	84 30       	cpi	r24, 0x04	; 4
   13cd4:	31 f0       	breq	.+12     	; 0x13ce2 <FMenuMaster+0x4ea>
   13cd6:	85 30       	cpi	r24, 0x05	; 5
   13cd8:	09 f0       	breq	.+2      	; 0x13cdc <FMenuMaster+0x4e4>
   13cda:	7c c0       	rjmp	.+248    	; 0x13dd4 <FMenuMaster+0x5dc>
   13cdc:	07 c0       	rjmp	.+14     	; 0x13cec <FMenuMaster+0x4f4>
		  case USER_OK:
               stMenuMaster=mmIsValidRestoreCode;
   13cde:	89 e0       	ldi	r24, 0x09	; 9
   13ce0:	72 c0       	rjmp	.+228    	; 0x13dc6 <FMenuMaster+0x5ce>
		       break;
          case USER_CANCEL:
		       stMenuMaster=mmExitMaster;
		       break;
		  case USER_ENTRY:
		       lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
   13ce2:	84 e0       	ldi	r24, 0x04	; 4
   13ce4:	61 e0       	ldi	r22, 0x01	; 1
   13ce6:	40 ed       	ldi	r20, 0xD0	; 208
   13ce8:	57 e1       	ldi	r21, 0x17	; 23
   13cea:	04 c0       	rjmp	.+8      	; 0x13cf4 <FMenuMaster+0x4fc>
		       break;
          case USER_NO_DATA:
		       lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
   13cec:	84 e0       	ldi	r24, 0x04	; 4
   13cee:	61 e0       	ldi	r22, 0x01	; 1
   13cf0:	4b eb       	ldi	r20, 0xBB	; 187
   13cf2:	57 e1       	ldi	r21, 0x17	; 23
   13cf4:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
   13cf8:	6d c0       	rjmp	.+218    	; 0x13dd4 <FMenuMaster+0x5dc>
		       break;
		  }
	      break;
     case mmIsValidRestoreCode:
	      if (ValidateRestoreCode(strKeyStamp,strRestoreCode)==RC_VALID){
   13cfa:	84 eb       	ldi	r24, 0xB4	; 180
   13cfc:	98 e0       	ldi	r25, 0x08	; 8
   13cfe:	60 e6       	ldi	r22, 0x60	; 96
   13d00:	7d e0       	ldi	r23, 0x0D	; 13
   13d02:	0e 94 4d 1c 	call	0x389a	; 0x389a <ValidateRestoreCode>
   13d06:	81 30       	cpi	r24, 0x01	; 1
   13d08:	11 f4       	brne	.+4      	; 0x13d0e <FMenuMaster+0x516>
		      stMenuMaster=mmRestorePassword;
   13d0a:	8c e0       	ldi	r24, 0x0C	; 12
   13d0c:	5c c0       	rjmp	.+184    	; 0x13dc6 <FMenuMaster+0x5ce>
		  }else stMenuMaster=mmDisplayInvalidRestoreCode;
   13d0e:	8a e0       	ldi	r24, 0x0A	; 10
   13d10:	5a c0       	rjmp	.+180    	; 0x13dc6 <FMenuMaster+0x5ce>
	      break;
     case mmRestorePassword:
	      sprintf_P(strNewPassword,PSTR(SPV_DEFAULT_PASS));
   13d12:	00 d0       	rcall	.+0      	; 0x13d14 <FMenuMaster+0x51c>
   13d14:	00 d0       	rcall	.+0      	; 0x13d16 <FMenuMaster+0x51e>
   13d16:	8e 01       	movw	r16, r28
   13d18:	0b 5e       	subi	r16, 0xEB	; 235
   13d1a:	1f 4f       	sbci	r17, 0xFF	; 255
   13d1c:	ad b7       	in	r26, 0x3d	; 61
   13d1e:	be b7       	in	r27, 0x3e	; 62
   13d20:	12 96       	adiw	r26, 0x02	; 2
   13d22:	1c 93       	st	X, r17
   13d24:	0e 93       	st	-X, r16
   13d26:	11 97       	sbiw	r26, 0x01	; 1
   13d28:	85 eb       	ldi	r24, 0xB5	; 181
   13d2a:	97 e1       	ldi	r25, 0x17	; 23
   13d2c:	14 96       	adiw	r26, 0x04	; 4
   13d2e:	9c 93       	st	X, r25
   13d30:	8e 93       	st	-X, r24
   13d32:	13 97       	sbiw	r26, 0x03	; 3
   13d34:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		  eeprom_write_block((const void*) &strNewPassword,(void*) &DefSpvPassword,sizeof(DefSpvPassword));
   13d38:	0f 90       	pop	r0
   13d3a:	0f 90       	pop	r0
   13d3c:	0f 90       	pop	r0
   13d3e:	0f 90       	pop	r0
   13d40:	c8 01       	movw	r24, r16
   13d42:	61 e0       	ldi	r22, 0x01	; 1
   13d44:	70 e0       	ldi	r23, 0x00	; 0
   13d46:	4a e0       	ldi	r20, 0x0A	; 10
   13d48:	50 e0       	ldi	r21, 0x00	; 0
   13d4a:	0e 94 6e aa 	call	0x154dc	; 0x154dc <__eewr_block_m128>
		  sprintf_P(strNewPassword,PSTR(SYS_DEFAULT_PASS));
   13d4e:	00 d0       	rcall	.+0      	; 0x13d50 <FMenuMaster+0x558>
   13d50:	00 d0       	rcall	.+0      	; 0x13d52 <FMenuMaster+0x55a>
   13d52:	ed b7       	in	r30, 0x3d	; 61
   13d54:	fe b7       	in	r31, 0x3e	; 62
   13d56:	12 83       	std	Z+2, r17	; 0x02
   13d58:	01 83       	std	Z+1, r16	; 0x01
   13d5a:	8f ea       	ldi	r24, 0xAF	; 175
   13d5c:	97 e1       	ldi	r25, 0x17	; 23
   13d5e:	94 83       	std	Z+4, r25	; 0x04
   13d60:	83 83       	std	Z+3, r24	; 0x03
   13d62:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
		  eeprom_write_block((const void*) &strNewPassword,(void*) &DefSysPassword,sizeof(DefSysPassword));	      		  
   13d66:	0f 90       	pop	r0
   13d68:	0f 90       	pop	r0
   13d6a:	0f 90       	pop	r0
   13d6c:	0f 90       	pop	r0
   13d6e:	c8 01       	movw	r24, r16
   13d70:	6b e0       	ldi	r22, 0x0B	; 11
   13d72:	70 e0       	ldi	r23, 0x00	; 0
   13d74:	4a e0       	ldi	r20, 0x0A	; 10
   13d76:	50 e0       	ldi	r21, 0x00	; 0
   13d78:	0e 94 6e aa 	call	0x154dc	; 0x154dc <__eewr_block_m128>
	      stMenuMaster=mmDisplaySuccess;
   13d7c:	8d e0       	ldi	r24, 0x0D	; 13
   13d7e:	23 c0       	rjmp	.+70     	; 0x13dc6 <FMenuMaster+0x5ce>
	      break;
     case mmDisplayInvalidRestoreCode:
	      lcd_printf(3,1,PSTR("Invalid Restore  "));
   13d80:	83 e0       	ldi	r24, 0x03	; 3
   13d82:	61 e0       	ldi	r22, 0x01	; 1
   13d84:	4d e9       	ldi	r20, 0x9D	; 157
   13d86:	57 e1       	ldi	r21, 0x17	; 23
   13d88:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  TimDisplay=0;
   13d8c:	10 92 70 02 	sts	0x0270, r1
          stMenuMaster=mmDelayInvalidRestoreCode;
   13d90:	8b e0       	ldi	r24, 0x0B	; 11
   13d92:	19 c0       	rjmp	.+50     	; 0x13dc6 <FMenuMaster+0x5ce>
	      break;
     case mmDelayInvalidRestoreCode:
	      if (TimDisplay>5)stMenuMaster=mmDisplayKeyStamp;
   13d94:	80 91 70 02 	lds	r24, 0x0270
   13d98:	86 30       	cpi	r24, 0x06	; 6
   13d9a:	e0 f0       	brcs	.+56     	; 0x13dd4 <FMenuMaster+0x5dc>
   13d9c:	87 e0       	ldi	r24, 0x07	; 7
   13d9e:	13 c0       	rjmp	.+38     	; 0x13dc6 <FMenuMaster+0x5ce>
	      break;
     case mmDisplaySuccess:
	      //lcd_clear();
		  lcd_printf(3,1,PSTR("Password Restored"));
   13da0:	83 e0       	ldi	r24, 0x03	; 3
   13da2:	61 e0       	ldi	r22, 0x01	; 1
   13da4:	4b e8       	ldi	r20, 0x8B	; 139
   13da6:	57 e1       	ldi	r21, 0x17	; 23
   13da8:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  system_beep(1);
   13dac:	81 e0       	ldi	r24, 0x01	; 1
   13dae:	90 e0       	ldi	r25, 0x00	; 0
   13db0:	0e 94 ee 14 	call	0x29dc	; 0x29dc <system_beep>
		  TimDisplay=0;
   13db4:	10 92 70 02 	sts	0x0270, r1
          stMenuMaster=mmDelayExit;
   13db8:	8f e0       	ldi	r24, 0x0F	; 15
   13dba:	05 c0       	rjmp	.+10     	; 0x13dc6 <FMenuMaster+0x5ce>
	      break;
     case mmDelayExit:
	      if (TimDisplay>=5)stMenuMaster=mmExitMaster;
   13dbc:	80 91 70 02 	lds	r24, 0x0270
   13dc0:	85 30       	cpi	r24, 0x05	; 5
   13dc2:	40 f0       	brcs	.+16     	; 0x13dd4 <FMenuMaster+0x5dc>
   13dc4:	80 e1       	ldi	r24, 0x10	; 16
   13dc6:	80 93 2b 03 	sts	0x032B, r24
   13dca:	04 c0       	rjmp	.+8      	; 0x13dd4 <FMenuMaster+0x5dc>
	      break;
     case mmExitMaster:
	      stMenuMaster=mmInitMaster;
   13dcc:	10 92 2b 03 	sts	0x032B, r1
	      Result=MENU_DONE;
   13dd0:	81 e0       	ldi	r24, 0x01	; 1
	      break;
   13dd2:	01 c0       	rjmp	.+2      	; 0x13dd6 <FMenuMaster+0x5de>
   return Result;
}

char FMenuMaster(){ 
static char stMenuMaster=mmInitMaster;
     char KeyPressed,KeyChar,Result=MENU_NONE;
   13dd4:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
	      break;
	 }
  return Result;

}
   13dd6:	e2 96       	adiw	r28, 0x32	; 50
   13dd8:	0f b6       	in	r0, 0x3f	; 63
   13dda:	f8 94       	cli
   13ddc:	de bf       	out	0x3e, r29	; 62
   13dde:	0f be       	out	0x3f, r0	; 63
   13de0:	cd bf       	out	0x3d, r28	; 61
   13de2:	cf 91       	pop	r28
   13de4:	df 91       	pop	r29
   13de6:	1f 91       	pop	r17
   13de8:	0f 91       	pop	r16
   13dea:	ff 90       	pop	r15
   13dec:	ef 90       	pop	r14
   13dee:	df 90       	pop	r13
   13df0:	cf 90       	pop	r12
   13df2:	08 95       	ret

00013df4 <FMenuAuthorization>:


char FMenuAuthorization(){
char Result=MENU_NONE,PassResult=MP_NONE,SubMenu=MENU_NONE;
static char stMenuAuthorization=maInit,PassTry=0;
     switch(stMenuAuthorization){
   13df4:	80 91 39 03 	lds	r24, 0x0339
   13df8:	83 30       	cpi	r24, 0x03	; 3
   13dfa:	51 f1       	breq	.+84     	; 0x13e50 <FMenuAuthorization+0x5c>
   13dfc:	84 30       	cpi	r24, 0x04	; 4
   13dfe:	28 f4       	brcc	.+10     	; 0x13e0a <FMenuAuthorization+0x16>
   13e00:	81 30       	cpi	r24, 0x01	; 1
   13e02:	81 f0       	breq	.+32     	; 0x13e24 <FMenuAuthorization+0x30>
   13e04:	82 30       	cpi	r24, 0x02	; 2
   13e06:	38 f5       	brcc	.+78     	; 0x13e56 <FMenuAuthorization+0x62>
   13e08:	0a c0       	rjmp	.+20     	; 0x13e1e <FMenuAuthorization+0x2a>
   13e0a:	85 30       	cpi	r24, 0x05	; 5
   13e0c:	61 f1       	breq	.+88     	; 0x13e66 <FMenuAuthorization+0x72>
   13e0e:	85 30       	cpi	r24, 0x05	; 5
   13e10:	28 f1       	brcs	.+74     	; 0x13e5c <FMenuAuthorization+0x68>
   13e12:	86 30       	cpi	r24, 0x06	; 6
   13e14:	d9 f1       	breq	.+118    	; 0x13e8c <FMenuAuthorization+0x98>
   13e16:	87 30       	cpi	r24, 0x07	; 7
   13e18:	09 f0       	breq	.+2      	; 0x13e1c <FMenuAuthorization+0x28>
   13e1a:	4a c0       	rjmp	.+148    	; 0x13eb0 <FMenuAuthorization+0xbc>
   13e1c:	45 c0       	rjmp	.+138    	; 0x13ea8 <FMenuAuthorization+0xb4>
	 case maInit:
	      PassTry=0;
   13e1e:	10 92 38 03 	sts	0x0338, r1
   13e22:	3c c0       	rjmp	.+120    	; 0x13e9c <FMenuAuthorization+0xa8>
		  stMenuAuthorization=maInputPassword;
	      break;
	 case maInputPassword:
	      PassResult=FMenuPassword();
   13e24:	0e 94 f0 50 	call	0xa1e0	; 0xa1e0 <FMenuPassword>
		  switch(PassResult){
   13e28:	83 30       	cpi	r24, 0x03	; 3
   13e2a:	d9 f1       	breq	.+118    	; 0x13ea2 <FMenuAuthorization+0xae>
   13e2c:	84 30       	cpi	r24, 0x04	; 4
   13e2e:	28 f4       	brcc	.+10     	; 0x13e3a <FMenuAuthorization+0x46>
   13e30:	81 30       	cpi	r24, 0x01	; 1
   13e32:	b1 f1       	breq	.+108    	; 0x13ea0 <FMenuAuthorization+0xac>
   13e34:	82 30       	cpi	r24, 0x02	; 2
   13e36:	e1 f5       	brne	.+120    	; 0x13eb0 <FMenuAuthorization+0xbc>
   13e38:	09 c0       	rjmp	.+18     	; 0x13e4c <FMenuAuthorization+0x58>
   13e3a:	84 30       	cpi	r24, 0x04	; 4
   13e3c:	19 f0       	breq	.+6      	; 0x13e44 <FMenuAuthorization+0x50>
   13e3e:	85 30       	cpi	r24, 0x05	; 5
   13e40:	b9 f5       	brne	.+110    	; 0x13eb0 <FMenuAuthorization+0xbc>
   13e42:	02 c0       	rjmp	.+4      	; 0x13e48 <FMenuAuthorization+0x54>
		  case MP_VALID_ADMIN:
		       stMenuAuthorization=maMenuAdmin;
   13e44:	82 e0       	ldi	r24, 0x02	; 2
   13e46:	2d c0       	rjmp	.+90     	; 0x13ea2 <FMenuAuthorization+0xae>
		       break;
		  case MP_VALID_SYSTEM:
		       stMenuAuthorization=maMenuSettings;
   13e48:	84 e0       	ldi	r24, 0x04	; 4
   13e4a:	2b c0       	rjmp	.+86     	; 0x13ea2 <FMenuAuthorization+0xae>
		       break;
		  case MP_INVALID:
		       stMenuAuthorization=maInvalidAuthorization;
   13e4c:	85 e0       	ldi	r24, 0x05	; 5
   13e4e:	29 c0       	rjmp	.+82     	; 0x13ea2 <FMenuAuthorization+0xae>
		  else
	      if (PassResult==MP_CANCEL)stMenuAuthorization=maExitAuthorization;
		  */
	      break;
	 case maMenuMaster:
	      SubMenu=FMenuMaster();
   13e50:	0e 94 fc 9b 	call	0x137f8	; 0x137f8 <FMenuMaster>
   13e54:	05 c0       	rjmp	.+10     	; 0x13e60 <FMenuAuthorization+0x6c>
		  if (SubMenu==MENU_DONE)stMenuAuthorization=maExitAuthorization;
	      break;
	 case maMenuAdmin:
          SubMenu=FMenuAdmin();
   13e56:	0e 94 b6 90 	call	0x1216c	; 0x1216c <FMenuAdmin>
   13e5a:	02 c0       	rjmp	.+4      	; 0x13e60 <FMenuAuthorization+0x6c>
		  if (SubMenu==MENU_DONE)stMenuAuthorization=maExitAuthorization;          
		  break;
	 case maMenuSettings:
	      SubMenu=FMenuSettings();
   13e5c:	0e 94 4c 42 	call	0x8498	; 0x8498 <FMenuSettings>
		  if (SubMenu==MENU_DONE)stMenuAuthorization=maExitAuthorization;
   13e60:	81 30       	cpi	r24, 0x01	; 1
   13e62:	31 f5       	brne	.+76     	; 0x13eb0 <FMenuAuthorization+0xbc>
   13e64:	1d c0       	rjmp	.+58     	; 0x13ea0 <FMenuAuthorization+0xac>
          break;	 
	 case maInvalidAuthorization:
	      PassTry++;
   13e66:	80 91 38 03 	lds	r24, 0x0338
   13e6a:	8f 5f       	subi	r24, 0xFF	; 255
   13e6c:	80 93 38 03 	sts	0x0338, r24
	      TimDisplay=0;
   13e70:	10 92 70 02 	sts	0x0270, r1
		  system_beep(1);
   13e74:	81 e0       	ldi	r24, 0x01	; 1
   13e76:	90 e0       	ldi	r25, 0x00	; 0
   13e78:	0e 94 ee 14 	call	0x29dc	; 0x29dc <system_beep>
		  lcd_printf(3,1,PSTR("Access Denied"));
   13e7c:	83 e0       	ldi	r24, 0x03	; 3
   13e7e:	61 e0       	ldi	r22, 0x01	; 1
   13e80:	4e e2       	ldi	r20, 0x2E	; 46
   13e82:	5a e1       	ldi	r21, 0x1A	; 26
   13e84:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		  stMenuAuthorization=maDelayExitAuthorization;
   13e88:	86 e0       	ldi	r24, 0x06	; 6
   13e8a:	0b c0       	rjmp	.+22     	; 0x13ea2 <FMenuAuthorization+0xae>
          break;	 
	 case maDelayExitAuthorization:
	      if (TimDisplay>2){
   13e8c:	80 91 70 02 	lds	r24, 0x0270
   13e90:	83 30       	cpi	r24, 0x03	; 3
   13e92:	80 f0       	brcs	.+32     	; 0x13eb4 <FMenuAuthorization+0xc0>
		      if (PassTry<3)stMenuAuthorization=maInputPassword;
   13e94:	80 91 38 03 	lds	r24, 0x0338
   13e98:	83 30       	cpi	r24, 0x03	; 3
   13e9a:	10 f4       	brcc	.+4      	; 0x13ea0 <FMenuAuthorization+0xac>
   13e9c:	81 e0       	ldi	r24, 0x01	; 1
   13e9e:	01 c0       	rjmp	.+2      	; 0x13ea2 <FMenuAuthorization+0xae>
			  else stMenuAuthorization=maExitAuthorization;
   13ea0:	87 e0       	ldi	r24, 0x07	; 7
   13ea2:	80 93 39 03 	sts	0x0339, r24
   13ea6:	04 c0       	rjmp	.+8      	; 0x13eb0 <FMenuAuthorization+0xbc>
		  }
	      break;
	 case maExitAuthorization:
	      stMenuAuthorization=maInit;
   13ea8:	10 92 39 03 	sts	0x0339, r1
	      Result=MENU_DONE;
   13eac:	81 e0       	ldi	r24, 0x01	; 1
	      break;
   13eae:	08 95       	ret
}



char FMenuAuthorization(){
char Result=MENU_NONE,PassResult=MP_NONE,SubMenu=MENU_NONE;
   13eb0:	80 e0       	ldi	r24, 0x00	; 0
   13eb2:	08 95       	ret
   13eb4:	80 e0       	ldi	r24, 0x00	; 0
	      stMenuAuthorization=maInit;
	      Result=MENU_DONE;
	      break;
	 }
   return Result;	 
}
   13eb6:	08 95       	ret

00013eb8 <FMenuIdle>:
		     TimMenuTimeout++;
	}
	TimSend++;
}

void FMenuIdle(){
   13eb8:	1f 93       	push	r17
	static char stMenuIdle=miInit,ButtonID=0;
	       char PrintStandaloneResult=PS_NONE;
	       char KeyPressed=0,KeyChar=0;
	       char lcdteks[20];

	switch(stMenuIdle){
   13eba:	e0 91 8f 03 	lds	r30, 0x038F
   13ebe:	f0 e0       	ldi	r31, 0x00	; 0
   13ec0:	e9 31       	cpi	r30, 0x19	; 25
   13ec2:	f1 05       	cpc	r31, r1
   13ec4:	08 f0       	brcs	.+2      	; 0x13ec8 <FMenuIdle+0x10>
   13ec6:	73 c1       	rjmp	.+742    	; 0x141ae <FMenuIdle+0x2f6>
   13ec8:	e9 5f       	subi	r30, 0xF9	; 249
   13eca:	fe 4f       	sbci	r31, 0xFE	; 254
   13ecc:	ee 0f       	add	r30, r30
   13ece:	ff 1f       	adc	r31, r31
   13ed0:	05 90       	lpm	r0, Z+
   13ed2:	f4 91       	lpm	r31, Z+
   13ed4:	e0 2d       	mov	r30, r0
   13ed6:	09 94       	ijmp
	case miInit:
         DisplayScreenIdle();
   13ed8:	0e 94 29 15 	call	0x2a52	; 0x2a52 <DisplayScreenIdle>
   13edc:	2f c1       	rjmp	.+606    	; 0x1413c <FMenuIdle+0x284>
		 stMenuIdle=miScan;		
	     break;
	case miScan:
         //Scan Key Pressed 
		 KeyPressed=_key_scan(1);
   13ede:	81 e0       	ldi	r24, 0x01	; 1
   13ee0:	0e 94 5a a3 	call	0x146b4	; 0x146b4 <_key_scan>
   13ee4:	18 2f       	mov	r17, r24
		 KeyChar= _key_btn(KeyPressed);       
   13ee6:	0e 94 49 a3 	call	0x14692	; 0x14692 <_key_btn>

		 switch(KeyPressed){
   13eea:	1b 3b       	cpi	r17, 0xBB	; 187
   13eec:	09 f4       	brne	.+2      	; 0x13ef0 <FMenuIdle+0x38>
   13eee:	70 c0       	rjmp	.+224    	; 0x13fd0 <FMenuIdle+0x118>
   13ef0:	1c 3b       	cpi	r17, 0xBC	; 188
   13ef2:	70 f4       	brcc	.+28     	; 0x13f10 <FMenuIdle+0x58>
   13ef4:	1b 37       	cpi	r17, 0x7B	; 123
   13ef6:	61 f1       	breq	.+88     	; 0x13f50 <FMenuIdle+0x98>
   13ef8:	1c 37       	cpi	r17, 0x7C	; 124
   13efa:	20 f4       	brcc	.+8      	; 0x13f04 <FMenuIdle+0x4c>
   13efc:	17 37       	cpi	r17, 0x77	; 119
   13efe:	09 f0       	breq	.+2      	; 0x13f02 <FMenuIdle+0x4a>
   13f00:	56 c1       	rjmp	.+684    	; 0x141ae <FMenuIdle+0x2f6>
   13f02:	2c c0       	rjmp	.+88     	; 0x13f5c <FMenuIdle+0xa4>
   13f04:	1d 37       	cpi	r17, 0x7D	; 125
   13f06:	e1 f0       	breq	.+56     	; 0x13f40 <FMenuIdle+0x88>
   13f08:	1e 37       	cpi	r17, 0x7E	; 126
   13f0a:	09 f0       	breq	.+2      	; 0x13f0e <FMenuIdle+0x56>
   13f0c:	50 c1       	rjmp	.+672    	; 0x141ae <FMenuIdle+0x2f6>
   13f0e:	12 c0       	rjmp	.+36     	; 0x13f34 <FMenuIdle+0x7c>
   13f10:	1d 3d       	cpi	r17, 0xDD	; 221
   13f12:	09 f4       	brne	.+2      	; 0x13f16 <FMenuIdle+0x5e>
   13f14:	47 c0       	rjmp	.+142    	; 0x13fa4 <FMenuIdle+0xec>
   13f16:	1e 3d       	cpi	r17, 0xDE	; 222
   13f18:	38 f4       	brcc	.+14     	; 0x13f28 <FMenuIdle+0x70>
   13f1a:	1d 3b       	cpi	r17, 0xBD	; 189
   13f1c:	09 f4       	brne	.+2      	; 0x13f20 <FMenuIdle+0x68>
   13f1e:	4d c0       	rjmp	.+154    	; 0x13fba <FMenuIdle+0x102>
   13f20:	17 3d       	cpi	r17, 0xD7	; 215
   13f22:	09 f0       	breq	.+2      	; 0x13f26 <FMenuIdle+0x6e>
   13f24:	44 c1       	rjmp	.+648    	; 0x141ae <FMenuIdle+0x2f6>
   13f26:	22 c0       	rjmp	.+68     	; 0x13f6c <FMenuIdle+0xb4>
   13f28:	1e 3d       	cpi	r17, 0xDE	; 222
   13f2a:	31 f1       	breq	.+76     	; 0x13f78 <FMenuIdle+0xc0>
   13f2c:	1d 3e       	cpi	r17, 0xED	; 237
   13f2e:	09 f0       	breq	.+2      	; 0x13f32 <FMenuIdle+0x7a>
   13f30:	3e c1       	rjmp	.+636    	; 0x141ae <FMenuIdle+0x2f6>
   13f32:	2d c0       	rjmp	.+90     	; 0x13f8e <FMenuIdle+0xd6>
		 case _KEY_TIKET:system_beep(2);ButtonID=1;stMenuIdle=miDisplayProses;break;
   13f34:	82 e0       	ldi	r24, 0x02	; 2
   13f36:	90 e0       	ldi	r25, 0x00	; 0
   13f38:	0e 94 ee 14 	call	0x29dc	; 0x29dc <system_beep>
   13f3c:	81 e0       	ldi	r24, 0x01	; 1
   13f3e:	13 c0       	rjmp	.+38     	; 0x13f66 <FMenuIdle+0xae>
		 case _KEY_MENU: system_beep(2);ButtonID=2;stMenuIdle=miDisplayProses;break;
   13f40:	82 e0       	ldi	r24, 0x02	; 2
   13f42:	90 e0       	ldi	r25, 0x00	; 0
   13f44:	0e 94 ee 14 	call	0x29dc	; 0x29dc <system_beep>
   13f48:	82 e0       	ldi	r24, 0x02	; 2
   13f4a:	80 93 8e 03 	sts	0x038E, r24
   13f4e:	2d c1       	rjmp	.+602    	; 0x141aa <FMenuIdle+0x2f2>
		 case _KEY_SHIFT:system_beep(2);ButtonID=3;stMenuIdle=miDisplayProses;break;
   13f50:	82 e0       	ldi	r24, 0x02	; 2
   13f52:	90 e0       	ldi	r25, 0x00	; 0
   13f54:	0e 94 ee 14 	call	0x29dc	; 0x29dc <system_beep>
   13f58:	83 e0       	ldi	r24, 0x03	; 3
   13f5a:	05 c0       	rjmp	.+10     	; 0x13f66 <FMenuIdle+0xae>
		 case _KEY_CLEAR:system_beep(2);ButtonID=4;stMenuIdle=miDisplayProses;break;//stMenuIdle=miTestMsg56;break;//miDisplayProses;break;
   13f5c:	82 e0       	ldi	r24, 0x02	; 2
   13f5e:	90 e0       	ldi	r25, 0x00	; 0
   13f60:	0e 94 ee 14 	call	0x29dc	; 0x29dc <system_beep>
   13f64:	84 e0       	ldi	r24, 0x04	; 4
   13f66:	80 93 8e 03 	sts	0x038E, r24
   13f6a:	4c c0       	rjmp	.+152    	; 0x14004 <FMenuIdle+0x14c>
		 case _KEY_0:    system_beep(2);           stMenuIdle=miRunTicket;    break;
   13f6c:	82 e0       	ldi	r24, 0x02	; 2
   13f6e:	90 e0       	ldi	r25, 0x00	; 0
   13f70:	0e 94 ee 14 	call	0x29dc	; 0x29dc <system_beep>
   13f74:	8c e0       	ldi	r24, 0x0C	; 12
   13f76:	19 c1       	rjmp	.+562    	; 0x141aa <FMenuIdle+0x2f2>
	   //case _KEY_1:    system_beep(2);           stMenuIdle=miRunTotalizer; break;
		 case _KEY_2: if(IFType==IT_SLAVE) {system_beep(2); stMenuIdle=miRunEDC;}       break;
   13f78:	80 91 00 01 	lds	r24, 0x0100
   13f7c:	81 30       	cpi	r24, 0x01	; 1
   13f7e:	09 f0       	breq	.+2      	; 0x13f82 <FMenuIdle+0xca>
   13f80:	16 c1       	rjmp	.+556    	; 0x141ae <FMenuIdle+0x2f6>
   13f82:	82 e0       	ldi	r24, 0x02	; 2
   13f84:	90 e0       	ldi	r25, 0x00	; 0
   13f86:	0e 94 ee 14 	call	0x29dc	; 0x29dc <system_beep>
   13f8a:	80 e1       	ldi	r24, 0x10	; 16
   13f8c:	0e c1       	rjmp	.+540    	; 0x141aa <FMenuIdle+0x2f2>
	   //case _KEY_3:    system_beep(2);           stMenuIdle=miClearTotalizer;break;
		 case _KEY_4: if(IFType==IT_SLAVE) {system_beep(2);stMenuIdle=miRunReprint;}   break;
   13f8e:	80 91 00 01 	lds	r24, 0x0100
   13f92:	81 30       	cpi	r24, 0x01	; 1
   13f94:	09 f0       	breq	.+2      	; 0x13f98 <FMenuIdle+0xe0>
   13f96:	0b c1       	rjmp	.+534    	; 0x141ae <FMenuIdle+0x2f6>
   13f98:	82 e0       	ldi	r24, 0x02	; 2
   13f9a:	90 e0       	ldi	r25, 0x00	; 0
   13f9c:	0e 94 ee 14 	call	0x29dc	; 0x29dc <system_beep>
   13fa0:	82 e1       	ldi	r24, 0x12	; 18
   13fa2:	03 c1       	rjmp	.+518    	; 0x141aa <FMenuIdle+0x2f2>
		 case _KEY_5: if(IFType==IT_SLAVE) {system_beep(2);stMenuIdle=miRunLoyalty;}   break;
   13fa4:	80 91 00 01 	lds	r24, 0x0100
   13fa8:	81 30       	cpi	r24, 0x01	; 1
   13faa:	09 f0       	breq	.+2      	; 0x13fae <FMenuIdle+0xf6>
   13fac:	00 c1       	rjmp	.+512    	; 0x141ae <FMenuIdle+0x2f6>
   13fae:	82 e0       	ldi	r24, 0x02	; 2
   13fb0:	90 e0       	ldi	r25, 0x00	; 0
   13fb2:	0e 94 ee 14 	call	0x29dc	; 0x29dc <system_beep>
   13fb6:	81 e1       	ldi	r24, 0x11	; 17
   13fb8:	f8 c0       	rjmp	.+496    	; 0x141aa <FMenuIdle+0x2f2>
		 case _KEY_6: if(IFType==IT_SLAVE) {system_beep(2);stMenuIdle=miRunChangeMOP;} break;
   13fba:	80 91 00 01 	lds	r24, 0x0100
   13fbe:	81 30       	cpi	r24, 0x01	; 1
   13fc0:	09 f0       	breq	.+2      	; 0x13fc4 <FMenuIdle+0x10c>
   13fc2:	f5 c0       	rjmp	.+490    	; 0x141ae <FMenuIdle+0x2f6>
   13fc4:	82 e0       	ldi	r24, 0x02	; 2
   13fc6:	90 e0       	ldi	r25, 0x00	; 0
   13fc8:	0e 94 ee 14 	call	0x29dc	; 0x29dc <system_beep>
   13fcc:	8f e0       	ldi	r24, 0x0F	; 15
   13fce:	ed c0       	rjmp	.+474    	; 0x141aa <FMenuIdle+0x2f2>
		 //case _KEY_8:    system_beep(2);           stMenuIdle=miRunTestChar;   break;
		 case _KEY_9:    system_beep(2);stMenuIdle=miRunAuth;      break;
   13fd0:	82 e0       	ldi	r24, 0x02	; 2
   13fd2:	90 e0       	ldi	r25, 0x00	; 0
   13fd4:	0e 94 ee 14 	call	0x29dc	; 0x29dc <system_beep>
   13fd8:	8d e0       	ldi	r24, 0x0D	; 13
   13fda:	e7 c0       	rjmp	.+462    	; 0x141aa <FMenuIdle+0x2f2>
		 }
	     break;
    case miTestMsg56:
	     sprintf_P(strCardID,PSTR("4356A31A"));
   13fdc:	00 d0       	rcall	.+0      	; 0x13fde <FMenuIdle+0x126>
   13fde:	00 d0       	rcall	.+0      	; 0x13fe0 <FMenuIdle+0x128>
   13fe0:	8d e6       	ldi	r24, 0x6D	; 109
   13fe2:	9c e0       	ldi	r25, 0x0C	; 12
   13fe4:	ed b7       	in	r30, 0x3d	; 61
   13fe6:	fe b7       	in	r31, 0x3e	; 62
   13fe8:	92 83       	std	Z+2, r25	; 0x02
   13fea:	81 83       	std	Z+1, r24	; 0x01
   13fec:	8c e0       	ldi	r24, 0x0C	; 12
   13fee:	95 e2       	ldi	r25, 0x25	; 37
   13ff0:	94 83       	std	Z+4, r25	; 0x04
   13ff2:	83 83       	std	Z+3, r24	; 0x03
   13ff4:	0e 94 16 a8 	call	0x1502c	; 0x1502c <sprintf_P>
	     sendMessage56();
   13ff8:	0f 90       	pop	r0
   13ffa:	0f 90       	pop	r0
   13ffc:	0f 90       	pop	r0
   13ffe:	0f 90       	pop	r0
   14000:	0e 94 8b 2b 	call	0x5716	; 0x5716 <sendMessage56>
         stMenuIdle=miDisplayProses;
   14004:	82 e0       	ldi	r24, 0x02	; 2
   14006:	d1 c0       	rjmp	.+418    	; 0x141aa <FMenuIdle+0x2f2>
	     break;
	case miDisplayProses:
	     if (IsBusyIdlePrinting==False){
   14008:	80 91 91 02 	lds	r24, 0x0291
   1400c:	88 23       	and	r24, r24
   1400e:	09 f0       	breq	.+2      	; 0x14012 <FMenuIdle+0x15a>
   14010:	95 c0       	rjmp	.+298    	; 0x1413c <FMenuIdle+0x284>
		     lcd_printf(3,1,PSTR("SedangProses"));
   14012:	83 e0       	ldi	r24, 0x03	; 3
   14014:	61 e0       	ldi	r22, 0x01	; 1
   14016:	4f ef       	ldi	r20, 0xFF	; 255
   14018:	54 e2       	ldi	r21, 0x24	; 36
   1401a:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
	         TimDisplay=0;
   1401e:	10 92 70 02 	sts	0x0270, r1
			 stMenuIdle=miWaitProses;
   14022:	83 e0       	ldi	r24, 0x03	; 3
   14024:	c2 c0       	rjmp	.+388    	; 0x141aa <FMenuIdle+0x2f2>
         }else stMenuIdle=miScan;
	     break;
    case miWaitProses:
	     if (TimDisplay>1){
   14026:	80 91 70 02 	lds	r24, 0x0270
   1402a:	82 30       	cpi	r24, 0x02	; 2
   1402c:	08 f4       	brcc	.+2      	; 0x14030 <FMenuIdle+0x178>
   1402e:	bf c0       	rjmp	.+382    	; 0x141ae <FMenuIdle+0x2f6>
		     if (IFType==IT_SLAVE)stMenuIdle=miSendMessage98;
   14030:	80 91 00 01 	lds	r24, 0x0100
   14034:	81 30       	cpi	r24, 0x01	; 1
   14036:	11 f4       	brne	.+4      	; 0x1403c <FMenuIdle+0x184>
   14038:	84 e0       	ldi	r24, 0x04	; 4
   1403a:	b7 c0       	rjmp	.+366    	; 0x141aa <FMenuIdle+0x2f2>
			 else
		     if (IFType==IT_STANDALONE)stMenuIdle=miPrintStandalone;
   1403c:	82 30       	cpi	r24, 0x02	; 2
   1403e:	09 f0       	breq	.+2      	; 0x14042 <FMenuIdle+0x18a>
   14040:	b6 c0       	rjmp	.+364    	; 0x141ae <FMenuIdle+0x2f6>
   14042:	87 e0       	ldi	r24, 0x07	; 7
   14044:	b2 c0       	rjmp	.+356    	; 0x141aa <FMenuIdle+0x2f2>
		 }
	     break;
    case miPrintStandalone:
	     PrintStandaloneResult=PrintStandalone(ButtonID,False);
   14046:	80 91 8e 03 	lds	r24, 0x038E
   1404a:	60 e0       	ldi	r22, 0x00	; 0
   1404c:	0e 94 d7 8d 	call	0x11bae	; 0x11bae <PrintStandalone>
	     if (PrintStandaloneResult==PS_PRINTED)stMenuIdle=miReady;
   14050:	81 31       	cpi	r24, 0x11	; 17
   14052:	09 f4       	brne	.+2      	; 0x14056 <FMenuIdle+0x19e>
   14054:	a9 c0       	rjmp	.+338    	; 0x141a8 <FMenuIdle+0x2f0>
		 else
		 if (PrintStandaloneResult==PS_NO_DATA)stMenuIdle=miDisplayNoTransaction;
   14056:	82 31       	cpi	r24, 0x12	; 18
   14058:	09 f0       	breq	.+2      	; 0x1405c <FMenuIdle+0x1a4>
   1405a:	a9 c0       	rjmp	.+338    	; 0x141ae <FMenuIdle+0x2f6>
   1405c:	88 e0       	ldi	r24, 0x08	; 8
   1405e:	a5 c0       	rjmp	.+330    	; 0x141aa <FMenuIdle+0x2f2>
	     break;
    case miDisplayNoTransaction:
	     lcd_printf(3, 1,PSTR("Tidak Ada Transaksi "));
   14060:	83 e0       	ldi	r24, 0x03	; 3
   14062:	61 e0       	ldi	r22, 0x01	; 1
   14064:	4a ee       	ldi	r20, 0xEA	; 234
   14066:	54 e2       	ldi	r21, 0x24	; 36
   14068:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
         TimDisplay=0;
   1406c:	10 92 70 02 	sts	0x0270, r1
		 stMenuIdle=miWaitDisplayNoTransaction;
   14070:	89 e0       	ldi	r24, 0x09	; 9
   14072:	9b c0       	rjmp	.+310    	; 0x141aa <FMenuIdle+0x2f2>
	     break;
    case miWaitDisplayNoTransaction:
	     if (TimDisplay>1){
   14074:	80 91 70 02 	lds	r24, 0x0270
   14078:	82 30       	cpi	r24, 0x02	; 2
   1407a:	08 f4       	brcc	.+2      	; 0x1407e <FMenuIdle+0x1c6>
   1407c:	98 c0       	rjmp	.+304    	; 0x141ae <FMenuIdle+0x2f6>
	         lcd_printf(3,1,PSTR("Ready...            "));
   1407e:	83 e0       	ldi	r24, 0x03	; 3
   14080:	61 e0       	ldi	r22, 0x01	; 1
   14082:	45 ed       	ldi	r20, 0xD5	; 213
   14084:	54 e2       	ldi	r21, 0x24	; 36
   14086:	32 c0       	rjmp	.+100    	; 0x140ec <FMenuIdle+0x234>
		     stMenuIdle=miWaitReady;
			 TimDisplay=0;
		 }
	     break;
    case miSendMessage98:
	     lcd_printf(3,1,PSTR("Please Wait..       "));
   14088:	83 e0       	ldi	r24, 0x03	; 3
   1408a:	61 e0       	ldi	r22, 0x01	; 1
   1408c:	40 ec       	ldi	r20, 0xC0	; 192
   1408e:	54 e2       	ldi	r21, 0x24	; 36
   14090:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
	     sendMessage98(ButtonID);
   14094:	80 91 8e 03 	lds	r24, 0x038E
   14098:	0e 94 29 6e 	call	0xdc52	; 0xdc52 <sendMessage98>
		 ProcTimeOut=0;
   1409c:	10 92 9a 02 	sts	0x029A, r1
		 stMenuIdle=miWaitPlease;
   140a0:	85 e0       	ldi	r24, 0x05	; 5
   140a2:	83 c0       	rjmp	.+262    	; 0x141aa <FMenuIdle+0x2f2>
	     break;
    case miWaitPlease:	     
         if (ProcTimeOut>TIM_NO_RESPONSE){
   140a4:	80 91 9a 02 	lds	r24, 0x029A
   140a8:	8f 30       	cpi	r24, 0x0F	; 15
   140aa:	58 f0       	brcs	.+22     	; 0x140c2 <FMenuIdle+0x20a>
	         lcd_printf(3,1,PSTR("No Response..       "));
   140ac:	83 e0       	ldi	r24, 0x03	; 3
   140ae:	61 e0       	ldi	r22, 0x01	; 1
   140b0:	4b ea       	ldi	r20, 0xAB	; 171
   140b2:	54 e2       	ldi	r21, 0x24	; 36
   140b4:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		     stMenuIdle=miNoResponse;
   140b8:	86 e0       	ldi	r24, 0x06	; 6
   140ba:	80 93 8f 03 	sts	0x038F, r24
			 TimDisplay=0;		 
   140be:	10 92 70 02 	sts	0x0270, r1
		 }
		 if ((IsMessage99==True)||(IsMessage00==True)){
   140c2:	80 91 7e 02 	lds	r24, 0x027E
   140c6:	81 30       	cpi	r24, 0x01	; 1
   140c8:	29 f0       	breq	.+10     	; 0x140d4 <FMenuIdle+0x21c>
   140ca:	80 91 7d 02 	lds	r24, 0x027D
   140ce:	81 30       	cpi	r24, 0x01	; 1
   140d0:	09 f0       	breq	.+2      	; 0x140d4 <FMenuIdle+0x21c>
   140d2:	6d c0       	rjmp	.+218    	; 0x141ae <FMenuIdle+0x2f6>
		     ClearMem(strOdometer);
   140d4:	87 ea       	ldi	r24, 0xA7	; 167
   140d6:	94 e0       	ldi	r25, 0x04	; 4
   140d8:	0e 94 33 a2 	call	0x14466	; 0x14466 <ClearMem>
		     ClearMem(strLicPlate);
   140dc:	8e ed       	ldi	r24, 0xDE	; 222
   140de:	99 e0       	ldi	r25, 0x09	; 9
   140e0:	0e 94 33 a2 	call	0x14466	; 0x14466 <ClearMem>
	         lcd_printf(3,1,PSTR("Ready...            "));
   140e4:	83 e0       	ldi	r24, 0x03	; 3
   140e6:	61 e0       	ldi	r22, 0x01	; 1
   140e8:	46 e9       	ldi	r20, 0x96	; 150
   140ea:	54 e2       	ldi	r21, 0x24	; 36
   140ec:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		     stMenuIdle=miWaitReady;
   140f0:	8a e0       	ldi	r24, 0x0A	; 10
   140f2:	80 93 8f 03 	sts	0x038F, r24
			 TimDisplay=0;
   140f6:	10 92 70 02 	sts	0x0270, r1
   140fa:	59 c0       	rjmp	.+178    	; 0x141ae <FMenuIdle+0x2f6>
			 }
	     break;
    case miNoResponse:
         if (TimDisplay>1){
   140fc:	80 91 70 02 	lds	r24, 0x0270
   14100:	82 30       	cpi	r24, 0x02	; 2
   14102:	08 f4       	brcc	.+2      	; 0x14106 <FMenuIdle+0x24e>
   14104:	54 c0       	rjmp	.+168    	; 0x141ae <FMenuIdle+0x2f6>
	         lcd_printf(3,1,PSTR("Ready...            "));
   14106:	83 e0       	ldi	r24, 0x03	; 3
   14108:	61 e0       	ldi	r22, 0x01	; 1
   1410a:	41 e8       	ldi	r20, 0x81	; 129
   1410c:	54 e2       	ldi	r21, 0x24	; 36
   1410e:	ee cf       	rjmp	.-36     	; 0x140ec <FMenuIdle+0x234>
		     stMenuIdle=miWaitReady;
			 TimDisplay=0;
			 }	     
	     break;
    case miWaitReady:
         if (TimDisplay>1){
   14110:	80 91 70 02 	lds	r24, 0x0270
   14114:	82 30       	cpi	r24, 0x02	; 2
   14116:	08 f4       	brcc	.+2      	; 0x1411a <FMenuIdle+0x262>
   14118:	4a c0       	rjmp	.+148    	; 0x141ae <FMenuIdle+0x2f6>
	         lcd_printf(3,1,PSTR("                "));
   1411a:	83 e0       	ldi	r24, 0x03	; 3
   1411c:	61 e0       	ldi	r22, 0x01	; 1
   1411e:	40 e7       	ldi	r20, 0x70	; 112
   14120:	54 e2       	ldi	r21, 0x24	; 36
   14122:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		     stMenuIdle=miReady;
   14126:	8b e0       	ldi	r24, 0x0B	; 11
   14128:	e4 cf       	rjmp	.-56     	; 0x140f2 <FMenuIdle+0x23a>
			 TimDisplay=0;
			 }	     
	     break;
    case miReady:
	     DisplayScreenIdle();
   1412a:	0e 94 29 15 	call	0x2a52	; 0x2a52 <DisplayScreenIdle>
		 if (IFType==IT_STANDALONE)IsNewPumpStatus=True;
   1412e:	80 91 00 01 	lds	r24, 0x0100
   14132:	82 30       	cpi	r24, 0x02	; 2
   14134:	19 f4       	brne	.+6      	; 0x1413c <FMenuIdle+0x284>
   14136:	81 e0       	ldi	r24, 0x01	; 1
   14138:	80 93 01 01 	sts	0x0101, r24
		 stMenuIdle=miScan;
   1413c:	81 e0       	ldi	r24, 0x01	; 1
   1413e:	35 c0       	rjmp	.+106    	; 0x141aa <FMenuIdle+0x2f2>
	     break;
	case miRunTicket://Slave,Standalone
		 if (FMenuTicket()==MENU_DONE)
   14140:	0e 94 2f 8e 	call	0x11c5e	; 0x11c5e <FMenuTicket>
   14144:	2f c0       	rjmp	.+94     	; 0x141a4 <FMenuIdle+0x2ec>
		     stMenuIdle=miReady;
	     break;
	case miRunAuth://Slave,Standalone
		 if (FMenuAuthorization()==MENU_DONE)
   14146:	0e 94 fa 9e 	call	0x13df4	; 0x13df4 <FMenuAuthorization>
   1414a:	2c c0       	rjmp	.+88     	; 0x141a4 <FMenuIdle+0x2ec>
		     stMenuIdle=miReady;
	     break;
		 
    case miRunLocalAccount://Slave
		 if (FMenuLocalAccount()==MENU_DONE)
   1414c:	0e 94 df 78 	call	0xf1be	; 0xf1be <FMenuLocalAccount>
   14150:	29 c0       	rjmp	.+82     	; 0x141a4 <FMenuIdle+0x2ec>
		     stMenuIdle=miReady;
	     break;  
    case miRunChangeMOP://Slave
	     if (FMenuChangeMOP()==MENU_DONE)
   14152:	0e 94 b2 51 	call	0xa364	; 0xa364 <FMenuChangeMOP>
   14156:	26 c0       	rjmp	.+76     	; 0x141a4 <FMenuIdle+0x2ec>
		     stMenuIdle=miReady;
	     break;
    case miRunEDC://Slave
	     if (FMenuEDCTransaction()==MENU_DONE)
   14158:	0e 94 ab 55 	call	0xab56	; 0xab56 <FMenuEDCTransaction>
   1415c:	23 c0       	rjmp	.+70     	; 0x141a4 <FMenuIdle+0x2ec>
		     stMenuIdle=miReady;
         break;
    case miRunLoyalty://Slave
	     if (FMenuLoyalty()==MENU_DONE)
   1415e:	0e 94 7c 47 	call	0x8ef8	; 0x8ef8 <FMenuLoyalty>
   14162:	20 c0       	rjmp	.+64     	; 0x141a4 <FMenuIdle+0x2ec>
		     stMenuIdle=miReady;
	     break;
    case miRunReprint://Slave,Standalone
	     if (FMenuReprint()==MENU_DONE)
   14164:	0e 94 7b 8f 	call	0x11ef6	; 0x11ef6 <FMenuReprint>
   14168:	1d c0       	rjmp	.+58     	; 0x141a4 <FMenuIdle+0x2ec>
		     stMenuIdle=miReady;
	     break;
    case miRunViewFreeMessage://Slave
	     if (FViewFreeMessage()==MENU_DONE)
   1416a:	0e 94 9d 1a 	call	0x353a	; 0x353a <FViewFreeMessage>
   1416e:	1a c0       	rjmp	.+52     	; 0x141a4 <FMenuIdle+0x2ec>
		     stMenuIdle=miReady;
	     break;
    case miClearTotalizer://Standalone
	     lcd_printf(3,1,PSTR("Clear Data Totalizer"));
   14170:	83 e0       	ldi	r24, 0x03	; 3
   14172:	61 e0       	ldi	r22, 0x01	; 1
   14174:	4b e5       	ldi	r20, 0x5B	; 91
   14176:	54 e2       	ldi	r21, 0x24	; 36
   14178:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
	     ResetTotalizer(TOTALIZER_LAST);
   1417c:	80 e0       	ldi	r24, 0x00	; 0
   1417e:	0e 94 87 78 	call	0xf10e	; 0xf10e <ResetTotalizer>
         ResetTotalizer(TOTALIZER_NOW);
   14182:	81 e0       	ldi	r24, 0x01	; 1
   14184:	0e 94 87 78 	call	0xf10e	; 0xf10e <ResetTotalizer>
   14188:	0f c0       	rjmp	.+30     	; 0x141a8 <FMenuIdle+0x2f0>
         stMenuIdle=miReady;	      
	     break;
    case miRunTotalizer://Standalone
	     lcd_printf(3,1,PSTR("TotalizerAll     "));
   1418a:	83 e0       	ldi	r24, 0x03	; 3
   1418c:	61 e0       	ldi	r22, 0x01	; 1
   1418e:	49 e4       	ldi	r20, 0x49	; 73
   14190:	54 e2       	ldi	r21, 0x24	; 36
   14192:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
	     SendSlaveCommand(SC_TOTALIZER,PUMP_ALL);
   14196:	85 e0       	ldi	r24, 0x05	; 5
   14198:	62 e1       	ldi	r22, 0x12	; 18
   1419a:	0e 94 29 19 	call	0x3252	; 0x3252 <SendSlaveCommand>
   1419e:	04 c0       	rjmp	.+8      	; 0x141a8 <FMenuIdle+0x2f0>
		 stMenuIdle=miReady;	      
	     break;
    case miRunTestChar:	     
 	     if (FTestChar()==MENU_DONE)
   141a0:	0e 94 8f 18 	call	0x311e	; 0x311e <FTestChar>
   141a4:	81 30       	cpi	r24, 0x01	; 1
   141a6:	19 f4       	brne	.+6      	; 0x141ae <FMenuIdle+0x2f6>
         stMenuIdle=miReady;
   141a8:	8b e0       	ldi	r24, 0x0B	; 11
   141aa:	80 93 8f 03 	sts	0x038F, r24
	     break;
	}
//----------SYSTEM_PROC--------------------------------

        //Bank InfoUpdated
        if (IsMessage21==True){
   141ae:	80 91 80 02 	lds	r24, 0x0280
   141b2:	81 30       	cpi	r24, 0x01	; 1
   141b4:	21 f4       	brne	.+8      	; 0x141be <FMenuIdle+0x306>
		    IsMessage21=False;
   141b6:	10 92 80 02 	sts	0x0280, r1
			procMessage21();
   141ba:	0e 94 e2 46 	call	0x8dc4	; 0x8dc4 <procMessage21>

        }
        //Transaction Status
        if (IsMessage00==True){
   141be:	10 91 7d 02 	lds	r17, 0x027D
   141c2:	11 30       	cpi	r17, 0x01	; 1
   141c4:	41 f4       	brne	.+16     	; 0x141d6 <FMenuIdle+0x31e>
		    IsMessage00=False;
   141c6:	10 92 7d 02 	sts	0x027D, r1
			if (procMessage00()==MSG00_NO_PRINT){
   141ca:	0e 94 6f 46 	call	0x8cde	; 0x8cde <procMessage00>
   141ce:	84 30       	cpi	r24, 0x04	; 4
   141d0:	11 f4       	brne	.+4      	; 0x141d6 <FMenuIdle+0x31e>
			    IsNoTransaction=True;
   141d2:	10 93 8a 02 	sts	0x028A, r17
				}
		}
  
		//Send EDC Message Information;
		if (IsSendMessageEDC==True){
   141d6:	80 91 75 02 	lds	r24, 0x0275
   141da:	81 30       	cpi	r24, 0x01	; 1
   141dc:	21 f4       	brne	.+8      	; 0x141e6 <FMenuIdle+0x32e>
		    IsSendMessageEDC=False;
   141de:	10 92 75 02 	sts	0x0275, r1
			SendEDCMessage();
   141e2:	0e 94 1b 1a 	call	0x3436	; 0x3436 <SendEDCMessage>
		}
		if (IsEDCApproved==True){
   141e6:	80 91 78 02 	lds	r24, 0x0278
   141ea:	81 30       	cpi	r24, 0x01	; 1
   141ec:	21 f4       	brne	.+8      	; 0x141f6 <FMenuIdle+0x33e>
		    IsEDCApproved=False;
   141ee:	10 92 78 02 	sts	0x0278, r1
            sendMessage92();
   141f2:	0e 94 7f 2b 	call	0x56fe	; 0x56fe <sendMessage92>
		}
		if (IsVoidTransaction==True){
   141f6:	80 91 7a 02 	lds	r24, 0x027A
   141fa:	81 30       	cpi	r24, 0x01	; 1
   141fc:	21 f4       	brne	.+8      	; 0x14206 <FMenuIdle+0x34e>
		    IsVoidTransaction=False;
   141fe:	10 92 7a 02 	sts	0x027A, r1
            sendMessage94();
   14202:	0e 94 7b 2b 	call	0x56f6	; 0x56f6 <sendMessage94>
		}


        //Message99 Detection 
        if (IsMessage99==True){
   14206:	10 91 7e 02 	lds	r17, 0x027E
   1420a:	11 30       	cpi	r17, 0x01	; 1
   1420c:	31 f4       	brne	.+12     	; 0x1421a <FMenuIdle+0x362>
	        IsMessage99=False;
   1420e:	10 92 7e 02 	sts	0x027E, r1
		    procMessage99();
   14212:	0e 94 84 5a 	call	0xb508	; 0xb508 <procMessage99>
		    IsPrinting=True;
   14216:	10 93 8b 02 	sts	0x028B, r17
		}
		//No Transaction
		if (IsNoTransaction==True){
   1421a:	80 91 8a 02 	lds	r24, 0x028A
   1421e:	81 30       	cpi	r24, 0x01	; 1
   14220:	41 f4       	brne	.+16     	; 0x14232 <FMenuIdle+0x37a>
			IsNoTransaction=False;
   14222:	10 92 8a 02 	sts	0x028A, r1
			lcd_printf(3, 1,PSTR("Tidak Ada Transaksi "));
   14226:	83 e0       	ldi	r24, 0x03	; 3
   14228:	61 e0       	ldi	r22, 0x01	; 1
   1422a:	44 e3       	ldi	r20, 0x34	; 52
   1422c:	54 e2       	ldi	r21, 0x24	; 36
   1422e:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
		}
        
		//Display Idle
		if (stMenuIdle==miScan){//||(stMenuIdle=miWaitPlease)){ 
   14232:	80 91 8f 03 	lds	r24, 0x038F
   14236:	81 30       	cpi	r24, 0x01	; 1
   14238:	11 f4       	brne	.+4      	; 0x1423e <FMenuIdle+0x386>
		    DisplayIdle();			
   1423a:	0e 94 31 44 	call	0x8862	; 0x8862 <DisplayIdle>
			}        

        //Display FreeMessage
		if (stMenuIdle==miScan){ 
   1423e:	80 91 8f 03 	lds	r24, 0x038F
   14242:	81 30       	cpi	r24, 0x01	; 1
   14244:	59 f4       	brne	.+22     	; 0x1425c <FMenuIdle+0x3a4>
		    if (IsMessage09==True){
   14246:	80 91 82 02 	lds	r24, 0x0282
   1424a:	81 30       	cpi	r24, 0x01	; 1
   1424c:	39 f4       	brne	.+14     	; 0x1425c <FMenuIdle+0x3a4>
			    IsMessage09=False;
   1424e:	10 92 82 02 	sts	0x0282, r1
				procMessage09();
   14252:	0e 94 b1 46 	call	0x8d62	; 0x8d62 <procMessage09>
				stMenuIdle=miRunViewFreeMessage;
   14256:	83 e1       	ldi	r24, 0x13	; 19
   14258:	80 93 8f 03 	sts	0x038F, r24
			   }
			}

        //LocalAccount Scanning
		if ((stMenuIdle==miScan)&&(IsRFIDDetected==True)){
   1425c:	80 91 8f 03 	lds	r24, 0x038F
   14260:	81 30       	cpi	r24, 0x01	; 1
   14262:	69 f4       	brne	.+26     	; 0x1427e <FMenuIdle+0x3c6>
   14264:	80 91 76 02 	lds	r24, 0x0276
   14268:	81 30       	cpi	r24, 0x01	; 1
   1426a:	49 f4       	brne	.+18     	; 0x1427e <FMenuIdle+0x3c6>
		    IsRFIDDetected=False;
   1426c:	10 92 76 02 	sts	0x0276, r1
		    system_beep(2);			
   14270:	82 e0       	ldi	r24, 0x02	; 2
   14272:	90 e0       	ldi	r25, 0x00	; 0
   14274:	0e 94 ee 14 	call	0x29dc	; 0x29dc <system_beep>
			stMenuIdle=miRunLocalAccount;
   14278:	8e e0       	ldi	r24, 0x0E	; 14
   1427a:	80 93 8f 03 	sts	0x038F, r24
		}
        //Print Spooling
		if (IsMessage81==True){
   1427e:	10 91 85 02 	lds	r17, 0x0285
   14282:	11 30       	cpi	r17, 0x01	; 1
   14284:	41 f4       	brne	.+16     	; 0x14296 <FMenuIdle+0x3de>
		    IsMessage81=False;
   14286:	10 92 85 02 	sts	0x0285, r1
			//Spooling HFCS 0000 : Header, Footer, Copy , Scrool [Copy:16x max]
			cmdPrint=procMessage81();
   1428a:	0e 94 3f 4a 	call	0x947e	; 0x947e <procMessage81>
   1428e:	80 93 94 02 	sts	0x0294, r24
			IsFreePrinting=True;
   14292:	10 93 87 02 	sts	0x0287, r17
         }

    //SystemService
      systemGenerateReport();
   14296:	0e 94 c3 6e 	call	0xdd86	; 0xdd86 <systemGenerateReport>
      systemPrinting();
   1429a:	0e 94 8a 89 	call	0x11314	; 0x11314 <systemPrinting>
	  systemEDC();
	  systemConfigProtocol();
   1429e:	0e 94 2a 64 	call	0xc854	; 0xc854 <systemConfigProtocol>
	  //systemGeniusProtocol(); //AKR-->Protocol disabled
}
   142a2:	1f 91       	pop	r17
   142a4:	08 95       	ret

000142a6 <lcd_command>:
	lcd_command(0x0c);
	lcd_command(0x06);
}

void lcd_command(unsigned char __chr){
	_LCD_PORT = __chr & 0xF0;
   142a6:	98 2f       	mov	r25, r24
   142a8:	90 7f       	andi	r25, 0xF0	; 240
   142aa:	95 bb       	out	0x15, r25	; 21
	cbi(_LCD_PORT, _LCD_RS);
   142ac:	ab 98       	cbi	0x15, 3	; 21
	sbi(_LCD_PORT, _LCD_E);
   142ae:	a9 9a       	sbi	0x15, 1	; 21
   142b0:	e7 ee       	ldi	r30, 0xE7	; 231
   142b2:	f3 e0       	ldi	r31, 0x03	; 3
   142b4:	31 97       	sbiw	r30, 0x01	; 1
   142b6:	f1 f7       	brne	.-4      	; 0x142b4 <lcd_command+0xe>
   142b8:	00 c0       	rjmp	.+0      	; 0x142ba <lcd_command+0x14>
   142ba:	00 00       	nop
	_LCD_BUSY;
	cbi(_LCD_PORT, _LCD_E);
   142bc:	a9 98       	cbi	0x15, 1	; 21
   142be:	e7 ee       	ldi	r30, 0xE7	; 231
   142c0:	f3 e0       	ldi	r31, 0x03	; 3
   142c2:	31 97       	sbiw	r30, 0x01	; 1
   142c4:	f1 f7       	brne	.-4      	; 0x142c2 <lcd_command+0x1c>
   142c6:	00 c0       	rjmp	.+0      	; 0x142c8 <lcd_command+0x22>
   142c8:	00 00       	nop
	_LCD_BUSY;

	_LCD_PORT = (__chr & 0x0F) << 4;
   142ca:	28 2f       	mov	r18, r24
   142cc:	30 e0       	ldi	r19, 0x00	; 0
   142ce:	94 e0       	ldi	r25, 0x04	; 4
   142d0:	22 0f       	add	r18, r18
   142d2:	33 1f       	adc	r19, r19
   142d4:	9a 95       	dec	r25
   142d6:	e1 f7       	brne	.-8      	; 0x142d0 <lcd_command+0x2a>
   142d8:	25 bb       	out	0x15, r18	; 21
	cbi(_LCD_PORT, _LCD_RS);
   142da:	ab 98       	cbi	0x15, 3	; 21
	sbi(_LCD_PORT, _LCD_E);
   142dc:	a9 9a       	sbi	0x15, 1	; 21
   142de:	e7 ee       	ldi	r30, 0xE7	; 231
   142e0:	f3 e0       	ldi	r31, 0x03	; 3
   142e2:	31 97       	sbiw	r30, 0x01	; 1
   142e4:	f1 f7       	brne	.-4      	; 0x142e2 <lcd_command+0x3c>
   142e6:	00 c0       	rjmp	.+0      	; 0x142e8 <lcd_command+0x42>
   142e8:	00 00       	nop
	_LCD_BUSY;
	cbi(_LCD_PORT, _LCD_E);
   142ea:	a9 98       	cbi	0x15, 1	; 21
   142ec:	e7 ee       	ldi	r30, 0xE7	; 231
   142ee:	f3 e0       	ldi	r31, 0x03	; 3
   142f0:	31 97       	sbiw	r30, 0x01	; 1
   142f2:	f1 f7       	brne	.-4      	; 0x142f0 <lcd_command+0x4a>
   142f4:	00 c0       	rjmp	.+0      	; 0x142f6 <lcd_command+0x50>
   142f6:	00 00       	nop
   142f8:	e7 ee       	ldi	r30, 0xE7	; 231
   142fa:	f3 e0       	ldi	r31, 0x03	; 3
   142fc:	31 97       	sbiw	r30, 0x01	; 1
   142fe:	f1 f7       	brne	.-4      	; 0x142fc <lcd_command+0x56>
   14300:	00 c0       	rjmp	.+0      	; 0x14302 <lcd_command+0x5c>
   14302:	00 00       	nop
	_LCD_BUSY;
	_LCD_BUSY;
	if (__chr==0x01) _delay_ms(50);
   14304:	81 30       	cpi	r24, 0x01	; 1
   14306:	31 f4       	brne	.+12     	; 0x14314 <lcd_command+0x6e>
   14308:	83 ed       	ldi	r24, 0xD3	; 211
   1430a:	90 e3       	ldi	r25, 0x30	; 48
   1430c:	01 97       	sbiw	r24, 0x01	; 1
   1430e:	f1 f7       	brne	.-4      	; 0x1430c <lcd_command+0x66>
   14310:	00 c0       	rjmp	.+0      	; 0x14312 <lcd_command+0x6c>
   14312:	00 00       	nop
   14314:	08 95       	ret

00014316 <lcd_init>:
   14316:	85 ea       	ldi	r24, 0xA5	; 165
   14318:	9e e0       	ldi	r25, 0x0E	; 14
   1431a:	01 97       	sbiw	r24, 0x01	; 1
   1431c:	f1 f7       	brne	.-4      	; 0x1431a <lcd_init+0x4>
   1431e:	00 c0       	rjmp	.+0      	; 0x14320 <lcd_init+0xa>
   14320:	00 00       	nop

#define _LCD_BUSY	_delay_ms(4);

void lcd_init(void){
	_delay_ms(15);
	_LCD_PORT = 0x00;
   14322:	15 ba       	out	0x15, r1	; 21
	_LCD_DDR |= (1 << _LCD_D7) | (1 << _LCD_D6) | (1 << _LCD_D5) | (1 << _LCD_D4);
   14324:	84 b3       	in	r24, 0x14	; 20
   14326:	80 6f       	ori	r24, 0xF0	; 240
   14328:	84 bb       	out	0x14, r24	; 20
	_LCD_DDR |= (1 << _LCD_E) | (1 << _LCD_RW) | (1 << _LCD_RS);
   1432a:	84 b3       	in	r24, 0x14	; 20
   1432c:	8e 60       	ori	r24, 0x0E	; 14
   1432e:	84 bb       	out	0x14, r24	; 20

	_LCD_PORT = 0x30;
   14330:	80 e3       	ldi	r24, 0x30	; 48
   14332:	85 bb       	out	0x15, r24	; 21
	sbi(_LCD_PORT, _LCD_E);
   14334:	a9 9a       	sbi	0x15, 1	; 21
   14336:	e7 ee       	ldi	r30, 0xE7	; 231
   14338:	f3 e0       	ldi	r31, 0x03	; 3
   1433a:	31 97       	sbiw	r30, 0x01	; 1
   1433c:	f1 f7       	brne	.-4      	; 0x1433a <lcd_init+0x24>
   1433e:	00 c0       	rjmp	.+0      	; 0x14340 <lcd_init+0x2a>
   14340:	00 00       	nop
	_LCD_BUSY;
	cbi(_LCD_PORT, _LCD_E);
   14342:	a9 98       	cbi	0x15, 1	; 21
   14344:	e7 ee       	ldi	r30, 0xE7	; 231
   14346:	f3 e0       	ldi	r31, 0x03	; 3
   14348:	31 97       	sbiw	r30, 0x01	; 1
   1434a:	f1 f7       	brne	.-4      	; 0x14348 <lcd_init+0x32>
   1434c:	00 c0       	rjmp	.+0      	; 0x1434e <lcd_init+0x38>
   1434e:	00 00       	nop
	_LCD_BUSY;

	_LCD_PORT = 0x30;
   14350:	85 bb       	out	0x15, r24	; 21
	sbi(_LCD_PORT, _LCD_E);
   14352:	a9 9a       	sbi	0x15, 1	; 21
   14354:	e7 ee       	ldi	r30, 0xE7	; 231
   14356:	f3 e0       	ldi	r31, 0x03	; 3
   14358:	31 97       	sbiw	r30, 0x01	; 1
   1435a:	f1 f7       	brne	.-4      	; 0x14358 <lcd_init+0x42>
   1435c:	00 c0       	rjmp	.+0      	; 0x1435e <lcd_init+0x48>
   1435e:	00 00       	nop
	_LCD_BUSY;
	cbi(_LCD_PORT, _LCD_E);
   14360:	a9 98       	cbi	0x15, 1	; 21
   14362:	e7 ee       	ldi	r30, 0xE7	; 231
   14364:	f3 e0       	ldi	r31, 0x03	; 3
   14366:	31 97       	sbiw	r30, 0x01	; 1
   14368:	f1 f7       	brne	.-4      	; 0x14366 <lcd_init+0x50>
   1436a:	00 c0       	rjmp	.+0      	; 0x1436c <lcd_init+0x56>
   1436c:	00 00       	nop
	_LCD_BUSY;

	_LCD_PORT = 0x30;
   1436e:	85 bb       	out	0x15, r24	; 21
	sbi(_LCD_PORT, _LCD_E);
   14370:	a9 9a       	sbi	0x15, 1	; 21
   14372:	87 ee       	ldi	r24, 0xE7	; 231
   14374:	93 e0       	ldi	r25, 0x03	; 3
   14376:	01 97       	sbiw	r24, 0x01	; 1
   14378:	f1 f7       	brne	.-4      	; 0x14376 <lcd_init+0x60>
   1437a:	00 c0       	rjmp	.+0      	; 0x1437c <lcd_init+0x66>
   1437c:	00 00       	nop
	_LCD_BUSY;
	cbi(_LCD_PORT, _LCD_E);
   1437e:	a9 98       	cbi	0x15, 1	; 21
   14380:	e7 ee       	ldi	r30, 0xE7	; 231
   14382:	f3 e0       	ldi	r31, 0x03	; 3
   14384:	31 97       	sbiw	r30, 0x01	; 1
   14386:	f1 f7       	brne	.-4      	; 0x14384 <lcd_init+0x6e>
   14388:	00 c0       	rjmp	.+0      	; 0x1438a <lcd_init+0x74>
   1438a:	00 00       	nop
	_LCD_BUSY;

	_LCD_PORT = 0x20;
   1438c:	80 e2       	ldi	r24, 0x20	; 32
   1438e:	85 bb       	out	0x15, r24	; 21
	sbi(_LCD_PORT, _LCD_E);
   14390:	a9 9a       	sbi	0x15, 1	; 21
   14392:	87 ee       	ldi	r24, 0xE7	; 231
   14394:	93 e0       	ldi	r25, 0x03	; 3
   14396:	01 97       	sbiw	r24, 0x01	; 1
   14398:	f1 f7       	brne	.-4      	; 0x14396 <lcd_init+0x80>
   1439a:	00 c0       	rjmp	.+0      	; 0x1439c <lcd_init+0x86>
   1439c:	00 00       	nop
	_LCD_BUSY;
	cbi(_LCD_PORT, _LCD_E);
   1439e:	a9 98       	cbi	0x15, 1	; 21
   143a0:	e7 ee       	ldi	r30, 0xE7	; 231
   143a2:	f3 e0       	ldi	r31, 0x03	; 3
   143a4:	31 97       	sbiw	r30, 0x01	; 1
   143a6:	f1 f7       	brne	.-4      	; 0x143a4 <lcd_init+0x8e>
   143a8:	00 c0       	rjmp	.+0      	; 0x143aa <lcd_init+0x94>
   143aa:	00 00       	nop
	_LCD_BUSY;

	_LIGHT_PORT = 0x01;
   143ac:	81 e0       	ldi	r24, 0x01	; 1
   143ae:	80 93 65 00 	sts	0x0065, r24
	_LIGHT_DDR |= (1 << _LIGHT_PIN);
   143b2:	e4 e6       	ldi	r30, 0x64	; 100
   143b4:	f0 e0       	ldi	r31, 0x00	; 0
   143b6:	80 81       	ld	r24, Z
   143b8:	82 60       	ori	r24, 0x02	; 2
   143ba:	80 83       	st	Z, r24

	lcd_command(0x28);
   143bc:	88 e2       	ldi	r24, 0x28	; 40
   143be:	0e 94 53 a1 	call	0x142a6	; 0x142a6 <lcd_command>
	lcd_command(0x0c);
   143c2:	8c e0       	ldi	r24, 0x0C	; 12
   143c4:	0e 94 53 a1 	call	0x142a6	; 0x142a6 <lcd_command>
	lcd_command(0x06);
   143c8:	86 e0       	ldi	r24, 0x06	; 6
   143ca:	0e 94 53 a1 	call	0x142a6	; 0x142a6 <lcd_command>
}
   143ce:	08 95       	ret

000143d0 <_lcd>:
	if (__chr==0x01) _delay_ms(50);

}

void _lcd(unsigned char __chr){
	_LCD_PORT =((__chr & 0xF0));
   143d0:	98 2f       	mov	r25, r24
   143d2:	90 7f       	andi	r25, 0xF0	; 240
   143d4:	95 bb       	out	0x15, r25	; 21
	sbi(_LCD_PORT, _LCD_RS);
   143d6:	ab 9a       	sbi	0x15, 3	; 21
	sbi(_LCD_PORT, _LCD_E);
   143d8:	a9 9a       	sbi	0x15, 1	; 21
	cbi(_LCD_PORT, _LCD_E);
   143da:	a9 98       	cbi	0x15, 1	; 21

	_LCD_PORT = (((__chr & 0x0F) << 4));
   143dc:	90 e0       	ldi	r25, 0x00	; 0
   143de:	24 e0       	ldi	r18, 0x04	; 4
   143e0:	88 0f       	add	r24, r24
   143e2:	99 1f       	adc	r25, r25
   143e4:	2a 95       	dec	r18
   143e6:	e1 f7       	brne	.-8      	; 0x143e0 <_lcd+0x10>
   143e8:	85 bb       	out	0x15, r24	; 21
	sbi(_LCD_PORT, _LCD_RS);
   143ea:	ab 9a       	sbi	0x15, 3	; 21
	sbi(_LCD_PORT, _LCD_E);
   143ec:	a9 9a       	sbi	0x15, 1	; 21
	cbi(_LCD_PORT, _LCD_E);
   143ee:	a9 98       	cbi	0x15, 1	; 21
   143f0:	87 ee       	ldi	r24, 0xE7	; 231
   143f2:	93 e0       	ldi	r25, 0x03	; 3
   143f4:	01 97       	sbiw	r24, 0x01	; 1
   143f6:	f1 f7       	brne	.-4      	; 0x143f4 <_lcd+0x24>
   143f8:	00 c0       	rjmp	.+0      	; 0x143fa <_lcd+0x2a>
   143fa:	00 00       	nop
   143fc:	89 ef       	ldi	r24, 0xF9	; 249
   143fe:	90 e0       	ldi	r25, 0x00	; 0
   14400:	01 97       	sbiw	r24, 0x01	; 1
   14402:	f1 f7       	brne	.-4      	; 0x14400 <_lcd+0x30>
   14404:	00 c0       	rjmp	.+0      	; 0x14406 <_lcd+0x36>
   14406:	00 00       	nop
	_LCD_BUSY;
	_delay_ms(1);
}
   14408:	08 95       	ret

0001440a <lcd_string>:
     lcd_printf(2,1,PSTR("                    "));
     lcd_printf(3,1,PSTR("                    "));
     lcd_printf(4,1,PSTR("                    "));
}

void lcd_string(char *__string){
   1440a:	ef 92       	push	r14
   1440c:	ff 92       	push	r15
   1440e:	cf 93       	push	r28
   14410:	df 93       	push	r29
   14412:	e8 2e       	mov	r14, r24
   14414:	e7 01       	movw	r28, r14
   14416:	7e 01       	movw	r14, r28
   14418:	f9 2e       	mov	r15, r25
   1441a:	e7 01       	movw	r28, r14
	while(*__string)
   1441c:	02 c0       	rjmp	.+4      	; 0x14422 <lcd_string+0x18>
		_lcd(*__string++);
   1441e:	0e 94 e8 a1 	call	0x143d0	; 0x143d0 <_lcd>
     lcd_printf(3,1,PSTR("                    "));
     lcd_printf(4,1,PSTR("                    "));
}

void lcd_string(char *__string){
	while(*__string)
   14422:	89 91       	ld	r24, Y+
   14424:	88 23       	and	r24, r24
   14426:	d9 f7       	brne	.-10     	; 0x1441e <lcd_string+0x14>
		_lcd(*__string++);
}
   14428:	df 91       	pop	r29
   1442a:	cf 91       	pop	r28
   1442c:	ff 90       	pop	r15
   1442e:	ef 90       	pop	r14
   14430:	08 95       	ret

00014432 <lcd_xy>:

void lcd_xy(unsigned char __x, unsigned char __y){
   14432:	98 2f       	mov	r25, r24
   14434:	86 2f       	mov	r24, r22
	switch(__x){
   14436:	92 30       	cpi	r25, 0x02	; 2
   14438:	61 f0       	breq	.+24     	; 0x14452 <lcd_xy+0x20>
   1443a:	93 30       	cpi	r25, 0x03	; 3
   1443c:	18 f4       	brcc	.+6      	; 0x14444 <lcd_xy+0x12>
   1443e:	91 30       	cpi	r25, 0x01	; 1
   14440:	89 f4       	brne	.+34     	; 0x14464 <lcd_xy+0x32>
   14442:	05 c0       	rjmp	.+10     	; 0x1444e <lcd_xy+0x1c>
   14444:	93 30       	cpi	r25, 0x03	; 3
   14446:	39 f0       	breq	.+14     	; 0x14456 <lcd_xy+0x24>
   14448:	94 30       	cpi	r25, 0x04	; 4
   1444a:	61 f4       	brne	.+24     	; 0x14464 <lcd_xy+0x32>
   1444c:	08 c0       	rjmp	.+16     	; 0x1445e <lcd_xy+0x2c>
		case 1:
			lcd_command(0x80 + __y - 1);
   1444e:	81 58       	subi	r24, 0x81	; 129
   14450:	03 c0       	rjmp	.+6      	; 0x14458 <lcd_xy+0x26>
			break;
		case 2:
			lcd_command(0xC0 + __y - 1);
   14452:	81 54       	subi	r24, 0x41	; 65
   14454:	01 c0       	rjmp	.+2      	; 0x14458 <lcd_xy+0x26>
			break;
		case 3:
			lcd_command(0x94 + __y - 1);
   14456:	8d 56       	subi	r24, 0x6D	; 109
   14458:	0e 94 53 a1 	call	0x142a6	; 0x142a6 <lcd_command>
			break;
   1445c:	08 95       	ret
		case 4:
			lcd_command(0xD4 + __y - 1);
   1445e:	8d 52       	subi	r24, 0x2D	; 45
   14460:	0e 94 53 a1 	call	0x142a6	; 0x142a6 <lcd_command>
   14464:	08 95       	ret

00014466 <ClearMem>:
	}
}

void ClearMem(char *string){
     char i;
	 for (i=0;i<strlen(string);i++){
   14466:	40 e0       	ldi	r20, 0x00	; 0
   14468:	05 c0       	rjmp	.+10     	; 0x14474 <ClearMem+0xe>
          string[i]=0;
   1446a:	28 0f       	add	r18, r24
   1446c:	39 1f       	adc	r19, r25
   1446e:	f9 01       	movw	r30, r18
   14470:	10 82       	st	Z, r1
	}
}

void ClearMem(char *string){
     char i;
	 for (i=0;i<strlen(string);i++){
   14472:	4f 5f       	subi	r20, 0xFF	; 255
   14474:	24 2f       	mov	r18, r20
   14476:	30 e0       	ldi	r19, 0x00	; 0
   14478:	fc 01       	movw	r30, r24
   1447a:	01 90       	ld	r0, Z+
   1447c:	00 20       	and	r0, r0
   1447e:	e9 f7       	brne	.-6      	; 0x1447a <ClearMem+0x14>
   14480:	31 97       	sbiw	r30, 0x01	; 1
   14482:	e8 1b       	sub	r30, r24
   14484:	f9 0b       	sbc	r31, r25
   14486:	2e 17       	cp	r18, r30
   14488:	3f 07       	cpc	r19, r31
   1448a:	78 f3       	brcs	.-34     	; 0x1446a <ClearMem+0x4>
          string[i]=0;
	 }     
}
   1448c:	08 95       	ret

0001448e <lcd_print>:

void lcd_print(unsigned char __x, unsigned char __y, char *__string){
   1448e:	cf 92       	push	r12
   14490:	df 92       	push	r13
   14492:	ef 92       	push	r14
   14494:	ff 92       	push	r15
   14496:	0f 93       	push	r16
   14498:	1f 93       	push	r17
   1449a:	df 93       	push	r29
   1449c:	cf 93       	push	r28
   1449e:	0f 92       	push	r0
   144a0:	cd b7       	in	r28, 0x3d	; 61
   144a2:	de b7       	in	r29, 0x3e	; 62
   144a4:	f6 2e       	mov	r15, r22
   144a6:	e4 2e       	mov	r14, r20
    char yPos,iPos=0;//Modified by Iyan string [20] maks
	lcd_xy(__x, __y);
   144a8:	59 83       	std	Y+1, r21	; 0x01
   144aa:	0e 94 19 a2 	call	0x14432	; 0x14432 <lcd_xy>
	iPos=0;
	while((*__string)&&(iPos<=(20-__y))){
   144ae:	59 81       	ldd	r21, Y+1	; 0x01
   144b0:	0e 2d       	mov	r16, r14
   144b2:	15 2f       	mov	r17, r21
   144b4:	34 e1       	ldi	r19, 0x14	; 20
   144b6:	c3 2e       	mov	r12, r19
   144b8:	d1 2c       	mov	r13, r1
   144ba:	cf 18       	sub	r12, r15
   144bc:	d1 08       	sbc	r13, r1
   144be:	02 c0       	rjmp	.+4      	; 0x144c4 <lcd_print+0x36>
		_lcd(*__string);__string++;
   144c0:	0e 94 e8 a1 	call	0x143d0	; 0x143d0 <_lcd>
   144c4:	20 2f       	mov	r18, r16
   144c6:	2e 19       	sub	r18, r14

void lcd_print(unsigned char __x, unsigned char __y, char *__string){
    char yPos,iPos=0;//Modified by Iyan string [20] maks
	lcd_xy(__x, __y);
	iPos=0;
	while((*__string)&&(iPos<=(20-__y))){
   144c8:	f8 01       	movw	r30, r16
   144ca:	81 91       	ld	r24, Z+
   144cc:	8f 01       	movw	r16, r30
   144ce:	88 23       	and	r24, r24
   144d0:	21 f0       	breq	.+8      	; 0x144da <lcd_print+0x4c>
   144d2:	30 e0       	ldi	r19, 0x00	; 0
   144d4:	c2 16       	cp	r12, r18
   144d6:	d3 06       	cpc	r13, r19
   144d8:	9c f7       	brge	.-26     	; 0x144c0 <lcd_print+0x32>
		_lcd(*__string);__string++;
		iPos++;
		}    
}
   144da:	0f 90       	pop	r0
   144dc:	cf 91       	pop	r28
   144de:	df 91       	pop	r29
   144e0:	1f 91       	pop	r17
   144e2:	0f 91       	pop	r16
   144e4:	ff 90       	pop	r15
   144e6:	ef 90       	pop	r14
   144e8:	df 90       	pop	r13
   144ea:	cf 90       	pop	r12
   144ec:	08 95       	ret

000144ee <lcd_printf>:

void lcd_printf(unsigned char __x, unsigned char __y, char *__string){
   144ee:	cf 92       	push	r12
   144f0:	df 92       	push	r13
   144f2:	ef 92       	push	r14
   144f4:	ff 92       	push	r15
   144f6:	0f 93       	push	r16
   144f8:	1f 93       	push	r17
   144fa:	df 93       	push	r29
   144fc:	cf 93       	push	r28
   144fe:	0f 92       	push	r0
   14500:	cd b7       	in	r28, 0x3d	; 61
   14502:	de b7       	in	r29, 0x3e	; 62
   14504:	f6 2e       	mov	r15, r22
   14506:	e4 2e       	mov	r14, r20
    char iPos=0;
	lcd_xy(__x, __y);
   14508:	59 83       	std	Y+1, r21	; 0x01
   1450a:	0e 94 19 a2 	call	0x14432	; 0x14432 <lcd_xy>
	iPos=0;
	while((pgm_read_byte(&(*__string)))&&(iPos<=(20-__y))){
   1450e:	59 81       	ldd	r21, Y+1	; 0x01
   14510:	4e 2d       	mov	r20, r14
   14512:	6a 01       	movw	r12, r20
   14514:	04 e1       	ldi	r16, 0x14	; 20
   14516:	10 e0       	ldi	r17, 0x00	; 0
   14518:	0f 19       	sub	r16, r15
   1451a:	11 09       	sbc	r17, r1
   1451c:	05 c0       	rjmp	.+10     	; 0x14528 <lcd_printf+0x3a>
		_lcd(pgm_read_byte(&(*__string)));
   1451e:	0e 94 e8 a1 	call	0x143d0	; 0x143d0 <_lcd>
		__string++;
   14522:	08 94       	sec
   14524:	c1 1c       	adc	r12, r1
   14526:	d1 1c       	adc	r13, r1
   14528:	2c 2d       	mov	r18, r12
   1452a:	2e 19       	sub	r18, r14

void lcd_printf(unsigned char __x, unsigned char __y, char *__string){
    char iPos=0;
	lcd_xy(__x, __y);
	iPos=0;
	while((pgm_read_byte(&(*__string)))&&(iPos<=(20-__y))){
   1452c:	f6 01       	movw	r30, r12
   1452e:	84 91       	lpm	r24, Z+
   14530:	88 23       	and	r24, r24
   14532:	21 f0       	breq	.+8      	; 0x1453c <lcd_printf+0x4e>
   14534:	30 e0       	ldi	r19, 0x00	; 0
   14536:	02 17       	cp	r16, r18
   14538:	13 07       	cpc	r17, r19
   1453a:	8c f7       	brge	.-30     	; 0x1451e <lcd_printf+0x30>
		_lcd(pgm_read_byte(&(*__string)));
		__string++;
		iPos++;
		}
}
   1453c:	0f 90       	pop	r0
   1453e:	cf 91       	pop	r28
   14540:	df 91       	pop	r29
   14542:	1f 91       	pop	r17
   14544:	0f 91       	pop	r16
   14546:	ff 90       	pop	r15
   14548:	ef 90       	pop	r14
   1454a:	df 90       	pop	r13
   1454c:	cf 90       	pop	r12
   1454e:	08 95       	ret

00014550 <lcd_clear>:
	_LCD_BUSY;
	_delay_ms(1);
}

void lcd_clear(){
     lcd_printf(1,1,PSTR("                    "));
   14550:	81 e0       	ldi	r24, 0x01	; 1
   14552:	61 e0       	ldi	r22, 0x01	; 1
   14554:	44 e5       	ldi	r20, 0x54	; 84
   14556:	55 e2       	ldi	r21, 0x25	; 37
   14558:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
     lcd_printf(2,1,PSTR("                    "));
   1455c:	82 e0       	ldi	r24, 0x02	; 2
   1455e:	61 e0       	ldi	r22, 0x01	; 1
   14560:	4f e3       	ldi	r20, 0x3F	; 63
   14562:	55 e2       	ldi	r21, 0x25	; 37
   14564:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
     lcd_printf(3,1,PSTR("                    "));
   14568:	83 e0       	ldi	r24, 0x03	; 3
   1456a:	61 e0       	ldi	r22, 0x01	; 1
   1456c:	4a e2       	ldi	r20, 0x2A	; 42
   1456e:	55 e2       	ldi	r21, 0x25	; 37
   14570:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
     lcd_printf(4,1,PSTR("                    "));
   14574:	84 e0       	ldi	r24, 0x04	; 4
   14576:	61 e0       	ldi	r22, 0x01	; 1
   14578:	45 e1       	ldi	r20, 0x15	; 21
   1457a:	55 e2       	ldi	r21, 0x25	; 37
   1457c:	0e 94 77 a2 	call	0x144ee	; 0x144ee <lcd_printf>
}
   14580:	08 95       	ret

00014582 <lcd_put>:
		__string++;
		iPos++;
		}
}

void lcd_put(unsigned char __x, unsigned char __y, unsigned char __chr){
   14582:	df 93       	push	r29
   14584:	cf 93       	push	r28
   14586:	0f 92       	push	r0
   14588:	cd b7       	in	r28, 0x3d	; 61
   1458a:	de b7       	in	r29, 0x3e	; 62
	lcd_xy(__x, __y);
   1458c:	49 83       	std	Y+1, r20	; 0x01
   1458e:	0e 94 19 a2 	call	0x14432	; 0x14432 <lcd_xy>
	_lcd(__chr);
   14592:	49 81       	ldd	r20, Y+1	; 0x01
   14594:	84 2f       	mov	r24, r20
   14596:	0e 94 e8 a1 	call	0x143d0	; 0x143d0 <_lcd>
}
   1459a:	0f 90       	pop	r0
   1459c:	cf 91       	pop	r28
   1459e:	df 91       	pop	r29
   145a0:	08 95       	ret

000145a2 <lcd_cgram>:

void lcd_cgram(unsigned char location, char *ptr){
   145a2:	ef 92       	push	r14
   145a4:	ff 92       	push	r15
   145a6:	1f 93       	push	r17
   145a8:	df 93       	push	r29
   145aa:	cf 93       	push	r28
   145ac:	00 d0       	rcall	.+0      	; 0x145ae <lcd_cgram+0xc>
   145ae:	cd b7       	in	r28, 0x3d	; 61
   145b0:	de b7       	in	r29, 0x3e	; 62
	unsigned char i;
    if(location < 8){
   145b2:	88 30       	cpi	r24, 0x08	; 8
   145b4:	a8 f4       	brcc	.+42     	; 0x145e0 <lcd_cgram+0x3e>
		lcd_command(0x40 + (location * 8));
   145b6:	88 0f       	add	r24, r24
   145b8:	88 0f       	add	r24, r24
   145ba:	88 0f       	add	r24, r24
   145bc:	80 5c       	subi	r24, 0xC0	; 192
   145be:	69 83       	std	Y+1, r22	; 0x01
   145c0:	7a 83       	std	Y+2, r23	; 0x02
   145c2:	0e 94 53 a1 	call	0x142a6	; 0x142a6 <lcd_command>
   145c6:	69 81       	ldd	r22, Y+1	; 0x01
   145c8:	7a 81       	ldd	r23, Y+2	; 0x02
   145ca:	46 2f       	mov	r20, r22
   145cc:	57 2f       	mov	r21, r23
   145ce:	7a 01       	movw	r14, r20
   145d0:	18 e0       	ldi	r17, 0x08	; 8
		for(i = 0; i < 8; i++)
			_lcd(ptr[i]);
   145d2:	f7 01       	movw	r30, r14
   145d4:	81 91       	ld	r24, Z+
   145d6:	7f 01       	movw	r14, r30
   145d8:	0e 94 e8 a1 	call	0x143d0	; 0x143d0 <_lcd>
   145dc:	11 50       	subi	r17, 0x01	; 1

void lcd_cgram(unsigned char location, char *ptr){
	unsigned char i;
    if(location < 8){
		lcd_command(0x40 + (location * 8));
		for(i = 0; i < 8; i++)
   145de:	c9 f7       	brne	.-14     	; 0x145d2 <lcd_cgram+0x30>
			_lcd(ptr[i]);
	}
}
   145e0:	0f 90       	pop	r0
   145e2:	0f 90       	pop	r0
   145e4:	cf 91       	pop	r28
   145e6:	df 91       	pop	r29
   145e8:	1f 91       	pop	r17
   145ea:	ff 90       	pop	r15
   145ec:	ef 90       	pop	r14
   145ee:	08 95       	ret

000145f0 <_key_hit>:
													 {'7', 'P', 'Q', 'R', 'S', '\0'},
											         {'8', 'T', 'U', 'V', '\0'}, 
													 {'9', 'W', 'X', 'Y', 'Z', '\0'}}};
const unsigned char __maxchar[10] PROGMEM = {2, 4, 3, 3, 3, 3, 3, 4, 3, 4};

char _key_hit(void){
   145f0:	df 93       	push	r29
   145f2:	cf 93       	push	r28
   145f4:	00 d0       	rcall	.+0      	; 0x145f6 <_key_hit+0x6>
   145f6:	00 d0       	rcall	.+0      	; 0x145f8 <_key_hit+0x8>
   145f8:	cd b7       	in	r28, 0x3d	; 61
   145fa:	de b7       	in	r29, 0x3e	; 62
	unsigned char	i, keyhit=0x00;
	unsigned char	outmap[4] = {0xef, 0xdf, 0xbf, 0x7f};
   145fc:	8f ee       	ldi	r24, 0xEF	; 239
   145fe:	89 83       	std	Y+1, r24	; 0x01
   14600:	8f ed       	ldi	r24, 0xDF	; 223
   14602:	8a 83       	std	Y+2, r24	; 0x02
   14604:	8f eb       	ldi	r24, 0xBF	; 191
   14606:	8b 83       	std	Y+3, r24	; 0x03
   14608:	8f e7       	ldi	r24, 0x7F	; 127
   1460a:	8c 83       	std	Y+4, r24	; 0x04
   1460c:	fe 01       	movw	r30, r28
   1460e:	31 96       	adiw	r30, 0x01	; 1
													 {'7', 'P', 'Q', 'R', 'S', '\0'},
											         {'8', 'T', 'U', 'V', '\0'}, 
													 {'9', 'W', 'X', 'Y', 'Z', '\0'}}};
const unsigned char __maxchar[10] PROGMEM = {2, 4, 3, 3, 3, 3, 3, 4, 3, 4};

char _key_hit(void){
   14610:	9e 01       	movw	r18, r28
   14612:	2b 5f       	subi	r18, 0xFB	; 251
   14614:	3f 4f       	sbci	r19, 0xFF	; 255
   14616:	89 ef       	ldi	r24, 0xF9	; 249
   14618:	90 e0       	ldi	r25, 0x00	; 0
   1461a:	01 97       	sbiw	r24, 0x01	; 1
   1461c:	f1 f7       	brne	.-4      	; 0x1461a <_key_hit+0x2a>
   1461e:	00 c0       	rjmp	.+0      	; 0x14620 <_key_hit+0x30>
   14620:	00 00       	nop
	unsigned char	i, keyhit=0x00;
	unsigned char	outmap[4] = {0xef, 0xdf, 0xbf, 0x7f};

	for(i=0; i<4; i++){
		_delay_ms(1);
		_KEY_PORT = outmap[i];
   14622:	91 91       	ld	r25, Z+
   14624:	90 93 62 00 	sts	0x0062, r25
   14628:	a9 ef       	ldi	r26, 0xF9	; 249
   1462a:	b0 e0       	ldi	r27, 0x00	; 0
   1462c:	11 97       	sbiw	r26, 0x01	; 1
   1462e:	f1 f7       	brne	.-4      	; 0x1462c <_key_hit+0x3c>
   14630:	00 c0       	rjmp	.+0      	; 0x14632 <_key_hit+0x42>
   14632:	00 00       	nop
		_delay_ms(1);
		keyhit = _KEY_MATRIX;
   14634:	80 b1       	in	r24, 0x00	; 0
		if (keyhit!=outmap[i]) 
   14636:	89 17       	cp	r24, r25
   14638:	19 f4       	brne	.+6      	; 0x14640 <_key_hit+0x50>

char _key_hit(void){
	unsigned char	i, keyhit=0x00;
	unsigned char	outmap[4] = {0xef, 0xdf, 0xbf, 0x7f};

	for(i=0; i<4; i++){
   1463a:	e2 17       	cp	r30, r18
   1463c:	f3 07       	cpc	r31, r19
   1463e:	59 f7       	brne	.-42     	; 0x14616 <_key_hit+0x26>
		keyhit = _KEY_MATRIX;
		if (keyhit!=outmap[i]) 
		    break;
	}
	return keyhit;
}
   14640:	0f 90       	pop	r0
   14642:	0f 90       	pop	r0
   14644:	0f 90       	pop	r0
   14646:	0f 90       	pop	r0
   14648:	cf 91       	pop	r28
   1464a:	df 91       	pop	r29
   1464c:	08 95       	ret

0001464e <_key_crr>:

char _key_crr(char __key){
	if(	__key != _KEY_1 && __key != _KEY_2 &&
   1464e:	8e 3e       	cpi	r24, 0xEE	; 238
   14650:	f9 f0       	breq	.+62     	; 0x14690 <_key_crr+0x42>
   14652:	8e 3d       	cpi	r24, 0xDE	; 222
   14654:	e9 f0       	breq	.+58     	; 0x14690 <_key_crr+0x42>
   14656:	8e 3b       	cpi	r24, 0xBE	; 190
   14658:	d9 f0       	breq	.+54     	; 0x14690 <_key_crr+0x42>
		__key != _KEY_3 && __key != _KEY_4 &&
   1465a:	8d 3e       	cpi	r24, 0xED	; 237
   1465c:	c9 f0       	breq	.+50     	; 0x14690 <_key_crr+0x42>
   1465e:	8d 3d       	cpi	r24, 0xDD	; 221
   14660:	b9 f0       	breq	.+46     	; 0x14690 <_key_crr+0x42>
		__key != _KEY_5 && __key != _KEY_6 &&
   14662:	8d 3b       	cpi	r24, 0xBD	; 189
   14664:	a9 f0       	breq	.+42     	; 0x14690 <_key_crr+0x42>
   14666:	8b 3e       	cpi	r24, 0xEB	; 235
   14668:	99 f0       	breq	.+38     	; 0x14690 <_key_crr+0x42>
		__key != _KEY_7 && __key != _KEY_8 &&
   1466a:	8b 3d       	cpi	r24, 0xDB	; 219
   1466c:	89 f0       	breq	.+34     	; 0x14690 <_key_crr+0x42>
   1466e:	8b 3b       	cpi	r24, 0xBB	; 187
   14670:	79 f0       	breq	.+30     	; 0x14690 <_key_crr+0x42>
		__key != _KEY_9 && __key != _KEY_0 &&
   14672:	87 3d       	cpi	r24, 0xD7	; 215
   14674:	69 f0       	breq	.+26     	; 0x14690 <_key_crr+0x42>
   14676:	87 3e       	cpi	r24, 0xE7	; 231
   14678:	59 f0       	breq	.+22     	; 0x14690 <_key_crr+0x42>
		__key != _KEY_CANCEL && __key != _KEY_ENTER &&
   1467a:	87 3b       	cpi	r24, 0xB7	; 183
   1467c:	49 f0       	breq	.+18     	; 0x14690 <_key_crr+0x42>
   1467e:	8e 37       	cpi	r24, 0x7E	; 126
   14680:	39 f0       	breq	.+14     	; 0x14690 <_key_crr+0x42>
		__key != _KEY_TIKET && __key != _KEY_MENU &&
   14682:	8d 37       	cpi	r24, 0x7D	; 125
   14684:	29 f0       	breq	.+10     	; 0x14690 <_key_crr+0x42>
   14686:	8b 37       	cpi	r24, 0x7B	; 123
   14688:	19 f0       	breq	.+6      	; 0x14690 <_key_crr+0x42>
		__key != _KEY_SHIFT && __key != _KEY_CLEAR)
   1468a:	87 37       	cpi	r24, 0x77	; 119
   1468c:	09 f0       	breq	.+2      	; 0x14690 <_key_crr+0x42>
		return _KEY_NULL;
   1468e:	80 e0       	ldi	r24, 0x00	; 0
	return __key;
}
   14690:	08 95       	ret

00014692 <_key_btn>:

char _key_btn(char __key){
   14692:	87 57       	subi	r24, 0x77	; 119
   14694:	88 37       	cpi	r24, 0x78	; 120
   14696:	60 f4       	brcc	.+24     	; 0x146b0 <_key_btn+0x1e>
   14698:	e8 2f       	mov	r30, r24
   1469a:	f0 e0       	ldi	r31, 0x00	; 0
   1469c:	e2 57       	subi	r30, 0x72	; 114
   1469e:	fe 4f       	sbci	r31, 0xFE	; 254
   146a0:	80 81       	ld	r24, Z
		default:
			__keychar = 0x00;
			break;

	}
	if (__keychar != 0x00)
   146a2:	88 23       	and	r24, r24
   146a4:	31 f0       	breq	.+12     	; 0x146b2 <_key_btn+0x20>
	    TimMenuTimeout=0;
   146a6:	10 92 97 03 	sts	0x0397, r1
   146aa:	10 92 96 03 	sts	0x0396, r1
   146ae:	08 95       	ret
		__key != _KEY_SHIFT && __key != _KEY_CLEAR)
		return _KEY_NULL;
	return __key;
}

char _key_btn(char __key){
   146b0:	80 e0       	ldi	r24, 0x00	; 0
	}
	if (__keychar != 0x00)
	    TimMenuTimeout=0;

	return __keychar;
}
   146b2:	08 95       	ret

000146b4 <_key_scan>:





char _key_scan(char __select){
   146b4:	1f 93       	push	r17
   146b6:	18 2f       	mov	r17, r24
	char	__key = 0;

	if(__select==_PAD_SINGLE || __select==_PAD_MULTI){
   146b8:	81 50       	subi	r24, 0x01	; 1
   146ba:	82 30       	cpi	r24, 0x02	; 2
   146bc:	08 f0       	brcs	.+2      	; 0x146c0 <_key_scan+0xc>
   146be:	64 c0       	rjmp	.+200    	; 0x14788 <_key_scan+0xd4>
		__key = _key_hit();
   146c0:	0e 94 f8 a2 	call	0x145f0	; 0x145f0 <_key_hit>
		__key = _key_crr(__key);
   146c4:	0e 94 27 a3 	call	0x1464e	; 0x1464e <_key_crr>

		if(__key!=_KEY_NULL){
   146c8:	88 23       	and	r24, r24
   146ca:	09 f4       	brne	.+2      	; 0x146ce <_key_scan+0x1a>
   146cc:	5e c0       	rjmp	.+188    	; 0x1478a <_key_scan+0xd6>
			_LIGHT_SET;
   146ce:	21 e0       	ldi	r18, 0x01	; 1
   146d0:	20 93 91 03 	sts	0x0391, r18
   146d4:	10 92 92 03 	sts	0x0392, r1
   146d8:	90 91 65 00 	lds	r25, 0x0065
   146dc:	9d 7f       	andi	r25, 0xFD	; 253
   146de:	90 93 65 00 	sts	0x0065, r25
			if(__sec_par)
   146e2:	90 91 9e 03 	lds	r25, 0x039E
   146e6:	99 23       	and	r25, r25
   146e8:	31 f0       	breq	.+12     	; 0x146f6 <_key_scan+0x42>
				_SEC_ON;
   146ea:	20 93 99 03 	sts	0x0399, r18
   146ee:	10 92 9b 03 	sts	0x039B, r1
   146f2:	10 92 9a 03 	sts	0x039A, r1

			if(_IS1st){
   146f6:	90 91 93 03 	lds	r25, 0x0393
   146fa:	99 23       	and	r25, r25
   146fc:	71 f4       	brne	.+28     	; 0x1471a <_key_scan+0x66>
				if(	__key == _KEY_CANCEL || __key == _KEY_ENTER)
   146fe:	87 3e       	cpi	r24, 0xE7	; 231
   14700:	11 f0       	breq	.+4      	; 0x14706 <_key_scan+0x52>
   14702:	87 3b       	cpi	r24, 0xB7	; 183
   14704:	31 f4       	brne	.+12     	; 0x14712 <_key_scan+0x5e>
					if(__lock_num)
   14706:	90 91 90 03 	lds	r25, 0x0390
   1470a:	99 23       	and	r25, r25
   1470c:	11 f0       	breq	.+4      	; 0x14712 <_key_scan+0x5e>
						__lock_num = 0;
   1470e:	10 92 90 03 	sts	0x0390, r1
				_PAD_2nd;
   14712:	91 e0       	ldi	r25, 0x01	; 1
   14714:	90 93 93 03 	sts	0x0393, r25
   14718:	30 c0       	rjmp	.+96     	; 0x1477a <_key_scan+0xc6>
				_delay_ms(5);
				return __key;
			}
			if(_IS2nd){
   1471a:	91 30       	cpi	r25, 0x01	; 1
   1471c:	b1 f5       	brne	.+108    	; 0x1478a <_key_scan+0xd6>
				if(__select==_PAD_MULTI){
   1471e:	12 30       	cpi	r17, 0x02	; 2
   14720:	21 f5       	brne	.+72     	; 0x1476a <_key_scan+0xb6>
					if(	__key==_KEY_0 || __key==_KEY_1 || __key==_KEY_2 || __key==_KEY_3||
   14722:	87 3d       	cpi	r24, 0xD7	; 215
   14724:	91 f0       	breq	.+36     	; 0x1474a <_key_scan+0x96>
   14726:	8e 3e       	cpi	r24, 0xEE	; 238
   14728:	81 f0       	breq	.+32     	; 0x1474a <_key_scan+0x96>
   1472a:	8e 3d       	cpi	r24, 0xDE	; 222
   1472c:	71 f0       	breq	.+28     	; 0x1474a <_key_scan+0x96>
   1472e:	8e 3b       	cpi	r24, 0xBE	; 190
   14730:	61 f0       	breq	.+24     	; 0x1474a <_key_scan+0x96>
   14732:	8d 3e       	cpi	r24, 0xED	; 237
   14734:	51 f0       	breq	.+20     	; 0x1474a <_key_scan+0x96>
						__key==_KEY_4 || __key==_KEY_5 || __key==_KEY_6 ||
   14736:	8d 3d       	cpi	r24, 0xDD	; 221
   14738:	41 f0       	breq	.+16     	; 0x1474a <_key_scan+0x96>
   1473a:	8d 3b       	cpi	r24, 0xBD	; 189
   1473c:	31 f0       	breq	.+12     	; 0x1474a <_key_scan+0x96>
   1473e:	8b 3e       	cpi	r24, 0xEB	; 235
   14740:	21 f0       	breq	.+8      	; 0x1474a <_key_scan+0x96>
						__key==_KEY_7 || __key==_KEY_8 || __key==_KEY_9){
   14742:	8b 3d       	cpi	r24, 0xDB	; 219
   14744:	11 f0       	breq	.+4      	; 0x1474a <_key_scan+0x96>
   14746:	8b 3b       	cpi	r24, 0xBB	; 187
   14748:	81 f4       	brne	.+32     	; 0x1476a <_key_scan+0xb6>
						if(__lock_num){
   1474a:	80 91 90 03 	lds	r24, 0x0390
   1474e:	88 23       	and	r24, r24
   14750:	49 f0       	breq	.+18     	; 0x14764 <_key_scan+0xb0>
							_SHIFT_SET;
   14752:	81 e0       	ldi	r24, 0x01	; 1
   14754:	80 93 94 03 	sts	0x0394, r24
   14758:	10 92 95 03 	sts	0x0395, r1
							CURSOR_HIDE;
   1475c:	8c e0       	ldi	r24, 0x0C	; 12
   1475e:	0e 94 53 a1 	call	0x142a6	; 0x142a6 <lcd_command>
   14762:	03 c0       	rjmp	.+6      	; 0x1476a <_key_scan+0xb6>
						}
						else
							__lock_num = 1;
   14764:	81 e0       	ldi	r24, 0x01	; 1
   14766:	80 93 90 03 	sts	0x0390, r24
					}
				}
				do{
					__key = _key_hit();
   1476a:	0e 94 f8 a2 	call	0x145f0	; 0x145f0 <_key_hit>
					__key = _key_crr(__key);
   1476e:	0e 94 27 a3 	call	0x1464e	; 0x1464e <_key_crr>
				}while(__key!=_KEY_NULL);
   14772:	88 23       	and	r24, r24
   14774:	d1 f7       	brne	.-12     	; 0x1476a <_key_scan+0xb6>
				_PAD_1st;
   14776:	10 92 93 03 	sts	0x0393, r1
   1477a:	e1 ee       	ldi	r30, 0xE1	; 225
   1477c:	f4 e0       	ldi	r31, 0x04	; 4
   1477e:	31 97       	sbiw	r30, 0x01	; 1
   14780:	f1 f7       	brne	.-4      	; 0x1477e <_key_scan+0xca>
   14782:	00 c0       	rjmp	.+0      	; 0x14784 <_key_scan+0xd0>
   14784:	00 00       	nop
				_delay_ms(5);
				return _KEY_NULL;
   14786:	03 c0       	rjmp	.+6      	; 0x1478e <_key_scan+0xda>




char _key_scan(char __select){
	char	__key = 0;
   14788:	80 e0       	ldi	r24, 0x00	; 0
				_delay_ms(5);
				return _KEY_NULL;
			}
		}
	}
	_PAD_1st;
   1478a:	10 92 93 03 	sts	0x0393, r1
	return __key;
}
   1478e:	1f 91       	pop	r17
   14790:	08 95       	ret

00014792 <_table_alphanum>:
			break;	
	}

	if(__hit <= pgm_read_byte(&__maxchar[__key]))
		__retchar = pgm_read_byte(&__alphanum[__caps][__key][__hit]);
	else __retchar = '\0';
   14792:	6b 5b       	subi	r22, 0xBB	; 187
   14794:	64 33       	cpi	r22, 0x34	; 52
   14796:	30 f4       	brcc	.+12     	; 0x147a4 <_table_alphanum+0x12>
   14798:	a6 2f       	mov	r26, r22
   1479a:	b0 e0       	ldi	r27, 0x00	; 0
   1479c:	aa 5f       	subi	r26, 0xFA	; 250
   1479e:	bd 4f       	sbci	r27, 0xFD	; 253
   147a0:	2c 91       	ld	r18, X
   147a2:	01 c0       	rjmp	.+2      	; 0x147a6 <_table_alphanum+0x14>
	}
	_PAD_1st;
	return __key;
}

char _table_alphanum(char __caps, char __key, char __hit){
   147a4:	20 e0       	ldi	r18, 0x00	; 0
		default:
			__key = 0;
			break;	
	}

	if(__hit <= pgm_read_byte(&__maxchar[__key]))
   147a6:	30 e0       	ldi	r19, 0x00	; 0
   147a8:	f9 01       	movw	r30, r18
   147aa:	ef 51       	subi	r30, 0x1F	; 31
   147ac:	fa 4d       	sbci	r31, 0xDA	; 218
   147ae:	e4 91       	lpm	r30, Z+
   147b0:	e4 17       	cp	r30, r20
   147b2:	98 f0       	brcs	.+38     	; 0x147da <_table_alphanum+0x48>
		__retchar = pgm_read_byte(&__alphanum[__caps][__key][__hit]);
   147b4:	ec e3       	ldi	r30, 0x3C	; 60
   147b6:	8e 9f       	mul	r24, r30
   147b8:	f0 01       	movw	r30, r0
   147ba:	11 24       	eor	r1, r1
   147bc:	e4 0f       	add	r30, r20
   147be:	f1 1d       	adc	r31, r1
   147c0:	c9 01       	movw	r24, r18
   147c2:	88 0f       	add	r24, r24
   147c4:	99 1f       	adc	r25, r25
   147c6:	82 0f       	add	r24, r18
   147c8:	93 1f       	adc	r25, r19
   147ca:	88 0f       	add	r24, r24
   147cc:	99 1f       	adc	r25, r25
   147ce:	e8 0f       	add	r30, r24
   147d0:	f9 1f       	adc	r31, r25
   147d2:	e7 59       	subi	r30, 0x97	; 151
   147d4:	fa 4d       	sbci	r31, 0xDA	; 218
   147d6:	84 91       	lpm	r24, Z+
   147d8:	08 95       	ret
	else __retchar = '\0';
   147da:	80 e0       	ldi	r24, 0x00	; 0

	return __retchar;
}
   147dc:	08 95       	ret

000147de <_spi_init>:
#include <util/delay.h>
#include <compat/deprecated.h>

#include "SPI.h"
void _spi_init(unsigned char __mode, unsigned char __interrupt){
	if(__mode){
   147de:	88 23       	and	r24, r24
   147e0:	41 f0       	breq	.+16     	; 0x147f2 <_spi_init+0x14>
		_SPI_DDR = (1 << _SPI_MOSI) | (1 << _SPI_SCK);
   147e2:	86 e0       	ldi	r24, 0x06	; 6
   147e4:	87 bb       	out	0x17, r24	; 23
		if(__interrupt)
   147e6:	66 23       	and	r22, r22
   147e8:	11 f0       	breq	.+4      	; 0x147ee <_spi_init+0x10>
			SPCR = (1 << SPIE) | (1 << SPE) | (1 << MSTR) | (1 << SPR1);
   147ea:	82 ed       	ldi	r24, 0xD2	; 210
   147ec:	09 c0       	rjmp	.+18     	; 0x14800 <_spi_init+0x22>
		else
			SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR1);
   147ee:	82 e5       	ldi	r24, 0x52	; 82
   147f0:	07 c0       	rjmp	.+14     	; 0x14800 <_spi_init+0x22>
	}
	else{
		_SPI_DDR = (1 << _SPI_MISO);
   147f2:	88 e0       	ldi	r24, 0x08	; 8
   147f4:	87 bb       	out	0x17, r24	; 23
		if(__interrupt)
   147f6:	66 23       	and	r22, r22
   147f8:	11 f0       	breq	.+4      	; 0x147fe <_spi_init+0x20>
			SPCR = (1 << SPIE) | (1 << SPE);
   147fa:	80 ec       	ldi	r24, 0xC0	; 192
   147fc:	01 c0       	rjmp	.+2      	; 0x14800 <_spi_init+0x22>
		else
			SPCR = (1 << SPE);
   147fe:	80 e4       	ldi	r24, 0x40	; 64
   14800:	8d b9       	out	0x0d, r24	; 13
   14802:	08 95       	ret

00014804 <_spi_enable>:
	}
}

void _spi_enable(unsigned char __select){
	if(__select == 0){
   14804:	88 23       	and	r24, r24
   14806:	19 f4       	brne	.+6      	; 0x1480e <_spi_enable+0xa>
		sbi(_SLAVE_PORT, _SLAVE_PIN);
   14808:	db 9a       	sbi	0x1b, 3	; 27
		sbi(_MMC_PORT, _MMC_PIN);
   1480a:	1b 9a       	sbi	0x03, 3	; 3
   1480c:	08 95       	ret
	}
	if(__select == 1){
   1480e:	81 30       	cpi	r24, 0x01	; 1
   14810:	49 f4       	brne	.+18     	; 0x14824 <_spi_enable+0x20>
		sbi(_MMC_PORT, _MMC_PIN);
   14812:	1b 9a       	sbi	0x03, 3	; 3
   14814:	81 ee       	ldi	r24, 0xE1	; 225
   14816:	94 e0       	ldi	r25, 0x04	; 4
   14818:	01 97       	sbiw	r24, 0x01	; 1
   1481a:	f1 f7       	brne	.-4      	; 0x14818 <_spi_enable+0x14>
   1481c:	00 c0       	rjmp	.+0      	; 0x1481e <_spi_enable+0x1a>
   1481e:	00 00       	nop
		_delay_ms(5);
		cbi(_SLAVE_PORT, _SLAVE_PIN);
   14820:	db 98       	cbi	0x1b, 3	; 27
   14822:	08 95       	ret
	}
	if(__select == 2){
   14824:	82 30       	cpi	r24, 0x02	; 2
   14826:	41 f4       	brne	.+16     	; 0x14838 <_spi_enable+0x34>
		sbi(_SLAVE_PORT, _SLAVE_PIN);
   14828:	db 9a       	sbi	0x1b, 3	; 27
   1482a:	81 ee       	ldi	r24, 0xE1	; 225
   1482c:	94 e0       	ldi	r25, 0x04	; 4
   1482e:	01 97       	sbiw	r24, 0x01	; 1
   14830:	f1 f7       	brne	.-4      	; 0x1482e <_spi_enable+0x2a>
   14832:	00 c0       	rjmp	.+0      	; 0x14834 <_spi_enable+0x30>
   14834:	00 00       	nop
		_delay_ms(5);
		cbi(_MMC_PORT, _MMC_PIN);
   14836:	1b 98       	cbi	0x03, 3	; 3
   14838:	08 95       	ret

0001483a <_spi>:
	}
}

unsigned char _spi(unsigned char __data){
	SPDR = __data;
   1483a:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1 << SPIF)));
   1483c:	77 9b       	sbis	0x0e, 7	; 14
   1483e:	fe cf       	rjmp	.-4      	; 0x1483c <_spi+0x2>
	return SPDR;
   14840:	8f b1       	in	r24, 0x0f	; 15
}
   14842:	08 95       	ret

00014844 <_rtc>:

unsigned char _rtc(int __addr, int __len, char* __datetime, unsigned char __dir){
	int				__twcr;
	unsigned char	__i = 0;
	
	if(__dir){
   14844:	22 23       	and	r18, r18
   14846:	09 f4       	brne	.+2      	; 0x1484a <_rtc+0x6>
   14848:	48 c0       	rjmp	.+144    	; 0x148da <_rtc+0x96>
		TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
   1484a:	94 ea       	ldi	r25, 0xA4	; 164
   1484c:	90 93 74 00 	sts	0x0074, r25
		_rtc_response;
   14850:	90 91 74 00 	lds	r25, 0x0074
   14854:	97 ff       	sbrs	r25, 7
   14856:	fc cf       	rjmp	.-8      	; 0x14850 <_rtc+0xc>
		if(TW_STATUS != TW_START)
   14858:	90 91 71 00 	lds	r25, 0x0071
   1485c:	98 7f       	andi	r25, 0xF8	; 248
   1485e:	98 30       	cpi	r25, 0x08	; 8
   14860:	09 f0       	breq	.+2      	; 0x14864 <_rtc+0x20>
   14862:	ae c0       	rjmp	.+348    	; 0x149c0 <_rtc+0x17c>
			return 1;

		TWDR = _DS1307W;
   14864:	90 ed       	ldi	r25, 0xD0	; 208
   14866:	90 93 73 00 	sts	0x0073, r25
		TWCR = _BV(TWINT) | _BV(TWEN);
   1486a:	94 e8       	ldi	r25, 0x84	; 132
   1486c:	90 93 74 00 	sts	0x0074, r25
		_rtc_response;
   14870:	90 91 74 00 	lds	r25, 0x0074
   14874:	97 ff       	sbrs	r25, 7
   14876:	fc cf       	rjmp	.-8      	; 0x14870 <_rtc+0x2c>
		if(TW_STATUS != TW_MT_SLA_ACK)
   14878:	90 91 71 00 	lds	r25, 0x0071
   1487c:	98 7f       	andi	r25, 0xF8	; 248
   1487e:	98 31       	cpi	r25, 0x18	; 24
   14880:	09 f0       	breq	.+2      	; 0x14884 <_rtc+0x40>
   14882:	9e c0       	rjmp	.+316    	; 0x149c0 <_rtc+0x17c>
			return 1;

		TWDR = __addr;
   14884:	80 93 73 00 	sts	0x0073, r24
		TWCR = _BV(TWINT) | _BV(TWEN);
   14888:	84 e8       	ldi	r24, 0x84	; 132
   1488a:	80 93 74 00 	sts	0x0074, r24
		_rtc_response;
   1488e:	80 91 74 00 	lds	r24, 0x0074
   14892:	87 ff       	sbrs	r24, 7
   14894:	fc cf       	rjmp	.-8      	; 0x1488e <_rtc+0x4a>
		if(TW_STATUS != TW_MT_DATA_ACK)
   14896:	80 91 71 00 	lds	r24, 0x0071
   1489a:	88 7f       	andi	r24, 0xF8	; 248
   1489c:	88 32       	cpi	r24, 0x28	; 40
   1489e:	09 f0       	breq	.+2      	; 0x148a2 <_rtc+0x5e>
   148a0:	8f c0       	rjmp	.+286    	; 0x149c0 <_rtc+0x17c>
   148a2:	cb 01       	movw	r24, r22
			return 1;

		for(; __len > 0; __len--){
			TWDR = __datetime[__i++];
			TWCR = _BV(TWINT) | _BV(TWEN);
   148a4:	34 e8       	ldi	r19, 0x84	; 132
   148a6:	13 c0       	rjmp	.+38     	; 0x148ce <_rtc+0x8a>
		_rtc_response;
		if(TW_STATUS != TW_MT_DATA_ACK)
			return 1;

		for(; __len > 0; __len--){
			TWDR = __datetime[__i++];
   148a8:	fa 01       	movw	r30, r20
   148aa:	e2 0f       	add	r30, r18
   148ac:	f1 1d       	adc	r31, r1
   148ae:	20 81       	ld	r18, Z
   148b0:	20 93 73 00 	sts	0x0073, r18
			TWCR = _BV(TWINT) | _BV(TWEN);
   148b4:	30 93 74 00 	sts	0x0074, r19
			_rtc_response;
   148b8:	20 91 74 00 	lds	r18, 0x0074
   148bc:	27 ff       	sbrs	r18, 7
   148be:	fc cf       	rjmp	.-8      	; 0x148b8 <_rtc+0x74>
			if(TW_STATUS == TW_MT_DATA_NACK)
   148c0:	20 91 71 00 	lds	r18, 0x0071
   148c4:	28 7f       	andi	r18, 0xF8	; 248
   148c6:	20 33       	cpi	r18, 0x30	; 48
   148c8:	09 f4       	brne	.+2      	; 0x148cc <_rtc+0x88>
   148ca:	7a c0       	rjmp	.+244    	; 0x149c0 <_rtc+0x17c>
		TWCR = _BV(TWINT) | _BV(TWEN);
		_rtc_response;
		if(TW_STATUS != TW_MT_DATA_ACK)
			return 1;

		for(; __len > 0; __len--){
   148cc:	01 97       	sbiw	r24, 0x01	; 1
   148ce:	26 2f       	mov	r18, r22
   148d0:	28 1b       	sub	r18, r24
   148d2:	18 16       	cp	r1, r24
   148d4:	19 06       	cpc	r1, r25
   148d6:	44 f3       	brlt	.-48     	; 0x148a8 <_rtc+0x64>
   148d8:	6e c0       	rjmp	.+220    	; 0x149b6 <_rtc+0x172>
		}

		TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
	}
	else{
		TWCR =_BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
   148da:	94 ea       	ldi	r25, 0xA4	; 164
   148dc:	90 93 74 00 	sts	0x0074, r25
		_rtc_response;
   148e0:	90 91 74 00 	lds	r25, 0x0074
   148e4:	97 ff       	sbrs	r25, 7
   148e6:	fc cf       	rjmp	.-8      	; 0x148e0 <_rtc+0x9c>
		if(TW_STATUS != TW_START)
   148e8:	90 91 71 00 	lds	r25, 0x0071
   148ec:	98 7f       	andi	r25, 0xF8	; 248
   148ee:	98 30       	cpi	r25, 0x08	; 8
   148f0:	09 f0       	breq	.+2      	; 0x148f4 <_rtc+0xb0>
   148f2:	66 c0       	rjmp	.+204    	; 0x149c0 <_rtc+0x17c>
			return 1;

		TWDR = _DS1307W;
   148f4:	90 ed       	ldi	r25, 0xD0	; 208
   148f6:	90 93 73 00 	sts	0x0073, r25
		TWCR = _BV(TWINT) | _BV(TWEN);
   148fa:	94 e8       	ldi	r25, 0x84	; 132
   148fc:	90 93 74 00 	sts	0x0074, r25
		_rtc_response;
   14900:	90 91 74 00 	lds	r25, 0x0074
   14904:	97 ff       	sbrs	r25, 7
   14906:	fc cf       	rjmp	.-8      	; 0x14900 <_rtc+0xbc>
		if(TW_STATUS != TW_MT_SLA_ACK)
   14908:	90 91 71 00 	lds	r25, 0x0071
   1490c:	98 7f       	andi	r25, 0xF8	; 248
   1490e:	98 31       	cpi	r25, 0x18	; 24
   14910:	09 f0       	breq	.+2      	; 0x14914 <_rtc+0xd0>
   14912:	56 c0       	rjmp	.+172    	; 0x149c0 <_rtc+0x17c>
			return 1;

		TWDR = __addr;
   14914:	80 93 73 00 	sts	0x0073, r24
		TWCR = _BV(TWINT) | _BV(TWEN);
   14918:	84 e8       	ldi	r24, 0x84	; 132
   1491a:	80 93 74 00 	sts	0x0074, r24
		_rtc_response;
   1491e:	80 91 74 00 	lds	r24, 0x0074
   14922:	87 ff       	sbrs	r24, 7
   14924:	fc cf       	rjmp	.-8      	; 0x1491e <_rtc+0xda>
		if(TW_STATUS != TW_MT_DATA_ACK)
   14926:	80 91 71 00 	lds	r24, 0x0071
   1492a:	88 7f       	andi	r24, 0xF8	; 248
   1492c:	88 32       	cpi	r24, 0x28	; 40
   1492e:	09 f0       	breq	.+2      	; 0x14932 <_rtc+0xee>
   14930:	47 c0       	rjmp	.+142    	; 0x149c0 <_rtc+0x17c>
			return 1;

		TWCR =_BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
   14932:	84 ea       	ldi	r24, 0xA4	; 164
   14934:	80 93 74 00 	sts	0x0074, r24
		_rtc_response;
   14938:	80 91 74 00 	lds	r24, 0x0074
   1493c:	87 ff       	sbrs	r24, 7
   1493e:	fc cf       	rjmp	.-8      	; 0x14938 <_rtc+0xf4>
		if(TW_STATUS != TW_REP_START)
   14940:	80 91 71 00 	lds	r24, 0x0071
   14944:	88 7f       	andi	r24, 0xF8	; 248
   14946:	80 31       	cpi	r24, 0x10	; 16
   14948:	d9 f5       	brne	.+118    	; 0x149c0 <_rtc+0x17c>
			return 1;

		TWDR = _DS1307R;
   1494a:	81 ed       	ldi	r24, 0xD1	; 209
   1494c:	80 93 73 00 	sts	0x0073, r24
		TWCR =_BV(TWINT) | _BV(TWEN);
   14950:	84 e8       	ldi	r24, 0x84	; 132
   14952:	80 93 74 00 	sts	0x0074, r24
		_rtc_response;
   14956:	80 91 74 00 	lds	r24, 0x0074
   1495a:	87 ff       	sbrs	r24, 7
   1495c:	fc cf       	rjmp	.-8      	; 0x14956 <_rtc+0x112>
		if(TW_STATUS != TW_MR_SLA_ACK)
   1495e:	80 91 71 00 	lds	r24, 0x0071
   14962:	88 7f       	andi	r24, 0xF8	; 248
   14964:	80 34       	cpi	r24, 0x40	; 64
   14966:	71 f5       	brne	.+92     	; 0x149c4 <_rtc+0x180>
   14968:	20 e0       	ldi	r18, 0x00	; 0
   1496a:	84 ec       	ldi	r24, 0xC4	; 196
   1496c:	90 e0       	ldi	r25, 0x00	; 0
   1496e:	20 c0       	rjmp	.+64     	; 0x149b0 <_rtc+0x16c>
			return 1;

		for(__twcr = _BV(TWINT) | _BV(TWEN) | _BV(TWEA); __len > 0; __len--){
			if(__len == 1)
   14970:	61 30       	cpi	r22, 0x01	; 1
   14972:	71 05       	cpc	r23, r1
   14974:	11 f4       	brne	.+4      	; 0x1497a <_rtc+0x136>
				__twcr = _BV(TWINT) | _BV(TWEN);
   14976:	84 e8       	ldi	r24, 0x84	; 132
   14978:	90 e0       	ldi	r25, 0x00	; 0
			TWCR = __twcr;
   1497a:	80 93 74 00 	sts	0x0074, r24
			_rtc_response;
   1497e:	30 91 74 00 	lds	r19, 0x0074
   14982:	37 ff       	sbrs	r19, 7
   14984:	fc cf       	rjmp	.-8      	; 0x1497e <_rtc+0x13a>
			if(TW_STATUS == TW_MR_DATA_NACK)
   14986:	30 91 71 00 	lds	r19, 0x0071
   1498a:	38 7f       	andi	r19, 0xF8	; 248
   1498c:	38 35       	cpi	r19, 0x58	; 88
   1498e:	11 f4       	brne	.+4      	; 0x14994 <_rtc+0x150>
				__len = 0;
   14990:	60 e0       	ldi	r22, 0x00	; 0
   14992:	70 e0       	ldi	r23, 0x00	; 0
			if(TW_STATUS == TW_MR_DATA_ACK)
   14994:	30 91 71 00 	lds	r19, 0x0071
   14998:	38 7f       	andi	r19, 0xF8	; 248
   1499a:	30 35       	cpi	r19, 0x50	; 80
   1499c:	39 f4       	brne	.+14     	; 0x149ac <_rtc+0x168>
				__datetime[__i++] = TWDR;
   1499e:	30 91 73 00 	lds	r19, 0x0073
   149a2:	fa 01       	movw	r30, r20
   149a4:	e2 0f       	add	r30, r18
   149a6:	f1 1d       	adc	r31, r1
   149a8:	30 83       	st	Z, r19
   149aa:	2f 5f       	subi	r18, 0xFF	; 255
		TWCR =_BV(TWINT) | _BV(TWEN);
		_rtc_response;
		if(TW_STATUS != TW_MR_SLA_ACK)
			return 1;

		for(__twcr = _BV(TWINT) | _BV(TWEN) | _BV(TWEA); __len > 0; __len--){
   149ac:	61 50       	subi	r22, 0x01	; 1
   149ae:	70 40       	sbci	r23, 0x00	; 0
   149b0:	16 16       	cp	r1, r22
   149b2:	17 06       	cpc	r1, r23
   149b4:	ec f2       	brlt	.-70     	; 0x14970 <_rtc+0x12c>
			if(TW_STATUS == TW_MR_DATA_NACK)
				__len = 0;
			if(TW_STATUS == TW_MR_DATA_ACK)
				__datetime[__i++] = TWDR;
		}
		TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
   149b6:	84 e9       	ldi	r24, 0x94	; 148
   149b8:	80 93 74 00 	sts	0x0074, r24
	}

    return 0;
   149bc:	80 e0       	ldi	r24, 0x00	; 0
   149be:	08 95       	ret
			return 1;

		TWCR =_BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
		_rtc_response;
		if(TW_STATUS != TW_REP_START)
			return 1;
   149c0:	81 e0       	ldi	r24, 0x01	; 1
   149c2:	08 95       	ret

		TWDR = _DS1307R;
		TWCR =_BV(TWINT) | _BV(TWEN);
		_rtc_response;
		if(TW_STATUS != TW_MR_SLA_ACK)
			return 1;
   149c4:	81 e0       	ldi	r24, 0x01	; 1
		}
		TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
	}

    return 0;
}
   149c6:	08 95       	ret

000149c8 <_datetime>:

void _datetime(unsigned char __mode, char* __date, char* __time){
   149c8:	ef 92       	push	r14
   149ca:	ff 92       	push	r15
   149cc:	0f 93       	push	r16
   149ce:	1f 93       	push	r17
   149d0:	df 93       	push	r29
   149d2:	cf 93       	push	r28
   149d4:	cd b7       	in	r28, 0x3d	; 61
   149d6:	de b7       	in	r29, 0x3e	; 62
   149d8:	64 97       	sbiw	r28, 0x14	; 20
   149da:	0f b6       	in	r0, 0x3f	; 63
   149dc:	f8 94       	cli
   149de:	de bf       	out	0x3e, r29	; 62
   149e0:	0f be       	out	0x3f, r0	; 63
   149e2:	cd bf       	out	0x3d, r28	; 61
   149e4:	28 2f       	mov	r18, r24
   149e6:	8b 01       	movw	r16, r22
   149e8:	7a 01       	movw	r14, r20
   149ea:	ae 01       	movw	r20, r28
   149ec:	4f 5f       	subi	r20, 0xFF	; 255
   149ee:	5f 4f       	sbci	r21, 0xFF	; 255
	char	__datetime[20];

	if(__mode){
   149f0:	88 23       	and	r24, r24
   149f2:	99 f1       	breq	.+102    	; 0x14a5a <_datetime+0x92>
		__datetime[4] = (((__date[0] - 0x30) & 0x0F) << 4) + ((__date[1] - 0x30) & 0x0F);
   149f4:	fb 01       	movw	r30, r22
   149f6:	80 81       	ld	r24, Z
   149f8:	82 95       	swap	r24
   149fa:	80 7f       	andi	r24, 0xF0	; 240
   149fc:	91 81       	ldd	r25, Z+1	; 0x01
   149fe:	9f 70       	andi	r25, 0x0F	; 15
   14a00:	89 0f       	add	r24, r25
   14a02:	8d 83       	std	Y+5, r24	; 0x05
		__datetime[5] = (((__date[3] - 0x30) & 0x0F) << 4) + ((__date[4] - 0x30) & 0x0F);
   14a04:	83 81       	ldd	r24, Z+3	; 0x03
   14a06:	82 95       	swap	r24
   14a08:	80 7f       	andi	r24, 0xF0	; 240
   14a0a:	94 81       	ldd	r25, Z+4	; 0x04
   14a0c:	9f 70       	andi	r25, 0x0F	; 15
   14a0e:	89 0f       	add	r24, r25
   14a10:	8e 83       	std	Y+6, r24	; 0x06
		__datetime[6] = (((__date[6] - 0x30) & 0x0F) << 4) + ((__date[7] - 0x30) & 0x0F);
   14a12:	86 81       	ldd	r24, Z+6	; 0x06
   14a14:	82 95       	swap	r24
   14a16:	80 7f       	andi	r24, 0xF0	; 240
   14a18:	97 81       	ldd	r25, Z+7	; 0x07
   14a1a:	9f 70       	andi	r25, 0x0F	; 15
   14a1c:	89 0f       	add	r24, r25
   14a1e:	8f 83       	std	Y+7, r24	; 0x07

		__datetime[2] = (((__time[0] - 0x30) & 0x0F) << 4) + ((__time[1] - 0x30) & 0x0F);
   14a20:	f7 01       	movw	r30, r14
   14a22:	80 81       	ld	r24, Z
   14a24:	82 95       	swap	r24
   14a26:	80 7f       	andi	r24, 0xF0	; 240
   14a28:	91 81       	ldd	r25, Z+1	; 0x01
   14a2a:	9f 70       	andi	r25, 0x0F	; 15
   14a2c:	89 0f       	add	r24, r25
   14a2e:	8b 83       	std	Y+3, r24	; 0x03
		__datetime[1] = (((__time[3] - 0x30) & 0x0F) << 4) + ((__time[4] - 0x30) & 0x0F);
   14a30:	83 81       	ldd	r24, Z+3	; 0x03
   14a32:	82 95       	swap	r24
   14a34:	80 7f       	andi	r24, 0xF0	; 240
   14a36:	94 81       	ldd	r25, Z+4	; 0x04
   14a38:	9f 70       	andi	r25, 0x0F	; 15
   14a3a:	89 0f       	add	r24, r25
   14a3c:	8a 83       	std	Y+2, r24	; 0x02
		__datetime[0] = (((__time[6] - 0x30) & 0x0F) << 4) + ((__time[7] - 0x30) & 0x0F);
   14a3e:	86 81       	ldd	r24, Z+6	; 0x06
   14a40:	82 95       	swap	r24
   14a42:	80 7f       	andi	r24, 0xF0	; 240
   14a44:	97 81       	ldd	r25, Z+7	; 0x07
   14a46:	9f 70       	andi	r25, 0x0F	; 15
   14a48:	89 0f       	add	r24, r25
   14a4a:	89 83       	std	Y+1, r24	; 0x01
		_rtc(0, 8, __datetime, __mode);
   14a4c:	80 e0       	ldi	r24, 0x00	; 0
   14a4e:	90 e0       	ldi	r25, 0x00	; 0
   14a50:	68 e0       	ldi	r22, 0x08	; 8
   14a52:	70 e0       	ldi	r23, 0x00	; 0
   14a54:	0e 94 22 a4 	call	0x14844	; 0x14844 <_rtc>
   14a58:	4a c0       	rjmp	.+148    	; 0x14aee <_datetime+0x126>
	}
	else
		if(_rtc(0, 8, __datetime, __mode) != 1){
   14a5a:	80 e0       	ldi	r24, 0x00	; 0
   14a5c:	90 e0       	ldi	r25, 0x00	; 0
   14a5e:	68 e0       	ldi	r22, 0x08	; 8
   14a60:	70 e0       	ldi	r23, 0x00	; 0
   14a62:	20 e0       	ldi	r18, 0x00	; 0
   14a64:	0e 94 22 a4 	call	0x14844	; 0x14844 <_rtc>
   14a68:	81 30       	cpi	r24, 0x01	; 1
   14a6a:	09 f4       	brne	.+2      	; 0x14a6e <_datetime+0xa6>
   14a6c:	40 c0       	rjmp	.+128    	; 0x14aee <_datetime+0x126>
			__date[0] = (__datetime[4] >> 4) + 0x30;
   14a6e:	8d 81       	ldd	r24, Y+5	; 0x05
   14a70:	98 2f       	mov	r25, r24
   14a72:	92 95       	swap	r25
   14a74:	9f 70       	andi	r25, 0x0F	; 15
   14a76:	90 5d       	subi	r25, 0xD0	; 208
   14a78:	f8 01       	movw	r30, r16
   14a7a:	90 83       	st	Z, r25
			__date[1] = (__datetime[4] & 0x0F) + 0x30;
   14a7c:	8f 70       	andi	r24, 0x0F	; 15
   14a7e:	80 5d       	subi	r24, 0xD0	; 208
   14a80:	81 83       	std	Z+1, r24	; 0x01
			__date[2] = '/';
   14a82:	2f e2       	ldi	r18, 0x2F	; 47
   14a84:	22 83       	std	Z+2, r18	; 0x02
			__date[3] = (__datetime[5] >> 4) + 0x30;
   14a86:	8e 81       	ldd	r24, Y+6	; 0x06
   14a88:	98 2f       	mov	r25, r24
   14a8a:	92 95       	swap	r25
   14a8c:	9f 70       	andi	r25, 0x0F	; 15
   14a8e:	90 5d       	subi	r25, 0xD0	; 208
   14a90:	93 83       	std	Z+3, r25	; 0x03
			__date[4] = (__datetime[5] & 0x0F) + 0x30;
   14a92:	8f 70       	andi	r24, 0x0F	; 15
   14a94:	80 5d       	subi	r24, 0xD0	; 208
   14a96:	84 83       	std	Z+4, r24	; 0x04
			__date[5] = '/';
   14a98:	25 83       	std	Z+5, r18	; 0x05
			__date[6] = (__datetime[6] >> 4) + 0x30;
   14a9a:	8f 81       	ldd	r24, Y+7	; 0x07
   14a9c:	98 2f       	mov	r25, r24
   14a9e:	92 95       	swap	r25
   14aa0:	9f 70       	andi	r25, 0x0F	; 15
   14aa2:	90 5d       	subi	r25, 0xD0	; 208
   14aa4:	96 83       	std	Z+6, r25	; 0x06
			__date[7] = (__datetime[6] & 0x0F) + 0x30;
   14aa6:	8f 70       	andi	r24, 0x0F	; 15
   14aa8:	80 5d       	subi	r24, 0xD0	; 208
   14aaa:	87 83       	std	Z+7, r24	; 0x07
			__date[8] = '\0';
   14aac:	10 86       	std	Z+8, r1	; 0x08

			__time[0] = (__datetime[2] >> 4) + 0x30;
   14aae:	8b 81       	ldd	r24, Y+3	; 0x03
   14ab0:	98 2f       	mov	r25, r24
   14ab2:	92 95       	swap	r25
   14ab4:	9f 70       	andi	r25, 0x0F	; 15
   14ab6:	90 5d       	subi	r25, 0xD0	; 208
   14ab8:	f7 01       	movw	r30, r14
   14aba:	90 83       	st	Z, r25
			__time[1] = (__datetime[2] & 0x0F) + 0x30;
   14abc:	8f 70       	andi	r24, 0x0F	; 15
   14abe:	80 5d       	subi	r24, 0xD0	; 208
   14ac0:	81 83       	std	Z+1, r24	; 0x01
			__time[2] = ':';
   14ac2:	2a e3       	ldi	r18, 0x3A	; 58
   14ac4:	22 83       	std	Z+2, r18	; 0x02
			__time[3] = (__datetime[1] >> 4) + 0x30;
   14ac6:	8a 81       	ldd	r24, Y+2	; 0x02
   14ac8:	98 2f       	mov	r25, r24
   14aca:	92 95       	swap	r25
   14acc:	9f 70       	andi	r25, 0x0F	; 15
   14ace:	90 5d       	subi	r25, 0xD0	; 208
   14ad0:	93 83       	std	Z+3, r25	; 0x03
			__time[4] = (__datetime[1] & 0x0F) + 0x30;
   14ad2:	8f 70       	andi	r24, 0x0F	; 15
   14ad4:	80 5d       	subi	r24, 0xD0	; 208
   14ad6:	84 83       	std	Z+4, r24	; 0x04
			__time[5] = ':';
   14ad8:	25 83       	std	Z+5, r18	; 0x05
			__time[6] = (__datetime[0] >> 4) + 0x30;
   14ada:	89 81       	ldd	r24, Y+1	; 0x01
   14adc:	98 2f       	mov	r25, r24
   14ade:	92 95       	swap	r25
   14ae0:	9f 70       	andi	r25, 0x0F	; 15
   14ae2:	90 5d       	subi	r25, 0xD0	; 208
   14ae4:	96 83       	std	Z+6, r25	; 0x06
			__time[7] = (__datetime[0] & 0x0F) + 0x30;
   14ae6:	8f 70       	andi	r24, 0x0F	; 15
   14ae8:	80 5d       	subi	r24, 0xD0	; 208
   14aea:	87 83       	std	Z+7, r24	; 0x07
			__time[8] = '\0';
   14aec:	10 86       	std	Z+8, r1	; 0x08
		}
}
   14aee:	64 96       	adiw	r28, 0x14	; 20
   14af0:	0f b6       	in	r0, 0x3f	; 63
   14af2:	f8 94       	cli
   14af4:	de bf       	out	0x3e, r29	; 62
   14af6:	0f be       	out	0x3f, r0	; 63
   14af8:	cd bf       	out	0x3d, r28	; 61
   14afa:	cf 91       	pop	r28
   14afc:	df 91       	pop	r29
   14afe:	1f 91       	pop	r17
   14b00:	0f 91       	pop	r16
   14b02:	ff 90       	pop	r15
   14b04:	ef 90       	pop	r14
   14b06:	08 95       	ret

00014b08 <_day>:

unsigned char _day(void){
   14b08:	df 93       	push	r29
   14b0a:	cf 93       	push	r28
   14b0c:	cd b7       	in	r28, 0x3d	; 61
   14b0e:	de b7       	in	r29, 0x3e	; 62
   14b10:	64 97       	sbiw	r28, 0x14	; 20
   14b12:	0f b6       	in	r0, 0x3f	; 63
   14b14:	f8 94       	cli
   14b16:	de bf       	out	0x3e, r29	; 62
   14b18:	0f be       	out	0x3f, r0	; 63
   14b1a:	cd bf       	out	0x3d, r28	; 61
	char	__datetime[20];

	if(_rtc(0, 8, __datetime, 0) != 1)
   14b1c:	80 e0       	ldi	r24, 0x00	; 0
   14b1e:	90 e0       	ldi	r25, 0x00	; 0
   14b20:	68 e0       	ldi	r22, 0x08	; 8
   14b22:	70 e0       	ldi	r23, 0x00	; 0
   14b24:	ae 01       	movw	r20, r28
   14b26:	4f 5f       	subi	r20, 0xFF	; 255
   14b28:	5f 4f       	sbci	r21, 0xFF	; 255
   14b2a:	20 e0       	ldi	r18, 0x00	; 0
   14b2c:	0e 94 22 a4 	call	0x14844	; 0x14844 <_rtc>
   14b30:	81 30       	cpi	r24, 0x01	; 1
   14b32:	19 f0       	breq	.+6      	; 0x14b3a <_day+0x32>
		return __datetime[3] & 0x0F;
   14b34:	8c 81       	ldd	r24, Y+4	; 0x04
   14b36:	8f 70       	andi	r24, 0x0F	; 15
   14b38:	01 c0       	rjmp	.+2      	; 0x14b3c <_day+0x34>
	return 0;
   14b3a:	80 e0       	ldi	r24, 0x00	; 0
   14b3c:	64 96       	adiw	r28, 0x14	; 20
   14b3e:	0f b6       	in	r0, 0x3f	; 63
   14b40:	f8 94       	cli
   14b42:	de bf       	out	0x3e, r29	; 62
   14b44:	0f be       	out	0x3f, r0	; 63
   14b46:	cd bf       	out	0x3d, r28	; 61
   14b48:	cf 91       	pop	r28
   14b4a:	df 91       	pop	r29
   14b4c:	08 95       	ret

00014b4e <uart_baudrate>:
	}

	uart_baudrate(__com, __baudrate);
}

void uart_baudrate(unsigned char __com, unsigned long __baudrate){
   14b4e:	1f 93       	push	r17
   14b50:	18 2f       	mov	r17, r24
   14b52:	9a 01       	movw	r18, r20
   14b54:	ab 01       	movw	r20, r22
	unsigned long __br;

	__br = (unsigned long)((_CPU_DEFAULT + (__baudrate * 8)) / (__baudrate * 16) - 1);
   14b56:	ca 01       	movw	r24, r20
   14b58:	b9 01       	movw	r22, r18
   14b5a:	60 50       	subi	r22, 0x00	; 0
   14b5c:	70 4e       	sbci	r23, 0xE0	; 224
   14b5e:	83 4e       	sbci	r24, 0xE3	; 227
   14b60:	9f 4f       	sbci	r25, 0xFF	; 255
   14b62:	f3 e0       	ldi	r31, 0x03	; 3
   14b64:	66 0f       	add	r22, r22
   14b66:	77 1f       	adc	r23, r23
   14b68:	88 1f       	adc	r24, r24
   14b6a:	99 1f       	adc	r25, r25
   14b6c:	fa 95       	dec	r31
   14b6e:	d1 f7       	brne	.-12     	; 0x14b64 <uart_baudrate+0x16>
   14b70:	e4 e0       	ldi	r30, 0x04	; 4
   14b72:	22 0f       	add	r18, r18
   14b74:	33 1f       	adc	r19, r19
   14b76:	44 1f       	adc	r20, r20
   14b78:	55 1f       	adc	r21, r21
   14b7a:	ea 95       	dec	r30
   14b7c:	d1 f7       	brne	.-12     	; 0x14b72 <uart_baudrate+0x24>
   14b7e:	0e 94 be a7 	call	0x14f7c	; 0x14f7c <__udivmodsi4>
   14b82:	21 50       	subi	r18, 0x01	; 1
   14b84:	30 40       	sbci	r19, 0x00	; 0
   14b86:	40 40       	sbci	r20, 0x00	; 0
   14b88:	50 40       	sbci	r21, 0x00	; 0
   14b8a:	bb 27       	eor	r27, r27
   14b8c:	a5 2f       	mov	r26, r21
   14b8e:	94 2f       	mov	r25, r20
   14b90:	83 2f       	mov	r24, r19

	if(__com){
   14b92:	11 23       	and	r17, r17
   14b94:	29 f0       	breq	.+10     	; 0x14ba0 <uart_baudrate+0x52>
		UBRR1L = __br;
   14b96:	20 93 99 00 	sts	0x0099, r18
		UBRR1H = __br >> 8;
   14b9a:	80 93 98 00 	sts	0x0098, r24
   14b9e:	03 c0       	rjmp	.+6      	; 0x14ba6 <uart_baudrate+0x58>
	}
	else{
		UBRR0L = __br;
   14ba0:	29 b9       	out	0x09, r18	; 9
		UBRR0H = __br >> 8;
   14ba2:	80 93 90 00 	sts	0x0090, r24
	}
}
   14ba6:	1f 91       	pop	r17
   14ba8:	08 95       	ret

00014baa <uart_init>:
#include <string.h>

#include "UART.h"

void uart_init(unsigned char __com, unsigned long __baudrate){
	if(__com){
   14baa:	88 23       	and	r24, r24
   14bac:	39 f0       	breq	.+14     	; 0x14bbc <uart_init+0x12>
		UCSR1B = _BV(RXCIE1) | _BV(RXEN1) | _BV(TXEN1);
   14bae:	98 e9       	ldi	r25, 0x98	; 152
   14bb0:	90 93 9a 00 	sts	0x009A, r25
		UCSR1C = _BV(UCSZ11) | _BV(UCSZ10);
   14bb4:	96 e0       	ldi	r25, 0x06	; 6
   14bb6:	90 93 9d 00 	sts	0x009D, r25
   14bba:	05 c0       	rjmp	.+10     	; 0x14bc6 <uart_init+0x1c>
	}
	else{
		UCSR0B = _BV(RXCIE0) | _BV(RXEN0) | _BV(TXEN0);
   14bbc:	98 e9       	ldi	r25, 0x98	; 152
   14bbe:	9a b9       	out	0x0a, r25	; 10
		UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
   14bc0:	96 e0       	ldi	r25, 0x06	; 6
   14bc2:	90 93 95 00 	sts	0x0095, r25
	}

	uart_baudrate(__com, __baudrate);
   14bc6:	0e 94 a7 a5 	call	0x14b4e	; 0x14b4e <uart_baudrate>
}
   14bca:	08 95       	ret

00014bcc <uart>:
		UBRR0H = __br >> 8;
	}
}

unsigned char uart(unsigned char __com, unsigned char __dir, unsigned char __chr){
	if(__com){
   14bcc:	88 23       	and	r24, r24
   14bce:	81 f0       	breq	.+32     	; 0x14bf0 <uart+0x24>
		if(__dir){
   14bd0:	66 23       	and	r22, r22
   14bd2:	39 f0       	breq	.+14     	; 0x14be2 <uart+0x16>
			loop_until_bit_is_set(UCSR1A, UDRE1);
   14bd4:	80 91 9b 00 	lds	r24, 0x009B
   14bd8:	85 ff       	sbrs	r24, 5
   14bda:	fc cf       	rjmp	.-8      	; 0x14bd4 <uart+0x8>
			UDR1 = __chr;
   14bdc:	40 93 9c 00 	sts	0x009C, r20
   14be0:	0c c0       	rjmp	.+24     	; 0x14bfa <uart+0x2e>
		}
		else{
			loop_until_bit_is_set(UCSR1A, RXC);
   14be2:	80 91 9b 00 	lds	r24, 0x009B
   14be6:	87 ff       	sbrs	r24, 7
   14be8:	fc cf       	rjmp	.-8      	; 0x14be2 <uart+0x16>
			return UDR1;
   14bea:	80 91 9c 00 	lds	r24, 0x009C
   14bee:	08 95       	ret
		}
	}
	else{
		if(__dir){
   14bf0:	66 23       	and	r22, r22
   14bf2:	29 f0       	breq	.+10     	; 0x14bfe <uart+0x32>
			loop_until_bit_is_set(UCSR0A, UDRE0);
   14bf4:	5d 9b       	sbis	0x0b, 5	; 11
   14bf6:	fe cf       	rjmp	.-4      	; 0x14bf4 <uart+0x28>
			UDR0 = __chr;
   14bf8:	4c b9       	out	0x0c, r20	; 12
			return UDR0;
		}

	}

	return 1;
   14bfa:	81 e0       	ldi	r24, 0x01	; 1
   14bfc:	08 95       	ret
		if(__dir){
			loop_until_bit_is_set(UCSR0A, UDRE0);
			UDR0 = __chr;
		}
		else{
			loop_until_bit_is_set(UCSR0A,  RXC);
   14bfe:	5f 9b       	sbis	0x0b, 7	; 11
   14c00:	fe cf       	rjmp	.-4      	; 0x14bfe <uart+0x32>
			return UDR0;
   14c02:	8c b1       	in	r24, 0x0c	; 12
		}

	}

	return 1;
}
   14c04:	08 95       	ret

00014c06 <uart_print>:

void uart_print(unsigned char __com, unsigned char __ret, char *__str){
   14c06:	0f 93       	push	r16
   14c08:	1f 93       	push	r17
   14c0a:	cf 93       	push	r28
   14c0c:	df 93       	push	r29
   14c0e:	18 2f       	mov	r17, r24
   14c10:	06 2f       	mov	r16, r22
   14c12:	ea 01       	movw	r28, r20
	if(strlen(__str)>0)
   14c14:	88 81       	ld	r24, Y
   14c16:	88 23       	and	r24, r24
   14c18:	41 f0       	breq	.+16     	; 0x14c2a <uart_print+0x24>
   14c1a:	04 c0       	rjmp	.+8      	; 0x14c24 <uart_print+0x1e>
		while(*__str)
		     uart(__com, 1, *__str++);
   14c1c:	81 2f       	mov	r24, r17
   14c1e:	61 e0       	ldi	r22, 0x01	; 1
   14c20:	0e 94 e6 a5 	call	0x14bcc	; 0x14bcc <uart>
	return 1;
}

void uart_print(unsigned char __com, unsigned char __ret, char *__str){
	if(strlen(__str)>0)
		while(*__str)
   14c24:	49 91       	ld	r20, Y+
   14c26:	44 23       	and	r20, r20
   14c28:	c9 f7       	brne	.-14     	; 0x14c1c <uart_print+0x16>
		     uart(__com, 1, *__str++);

	if(__ret){
   14c2a:	00 23       	and	r16, r16
   14c2c:	51 f0       	breq	.+20     	; 0x14c42 <uart_print+0x3c>
		uart(__com, 1, 0x0D);
   14c2e:	81 2f       	mov	r24, r17
   14c30:	61 e0       	ldi	r22, 0x01	; 1
   14c32:	4d e0       	ldi	r20, 0x0D	; 13
   14c34:	0e 94 e6 a5 	call	0x14bcc	; 0x14bcc <uart>
		uart(__com, 1, 0x0A);
   14c38:	81 2f       	mov	r24, r17
   14c3a:	61 e0       	ldi	r22, 0x01	; 1
   14c3c:	4a e0       	ldi	r20, 0x0A	; 10
   14c3e:	0e 94 e6 a5 	call	0x14bcc	; 0x14bcc <uart>
   14c42:	81 ee       	ldi	r24, 0xE1	; 225
   14c44:	94 e0       	ldi	r25, 0x04	; 4
   14c46:	01 97       	sbiw	r24, 0x01	; 1
   14c48:	f1 f7       	brne	.-4      	; 0x14c46 <uart_print+0x40>
   14c4a:	00 c0       	rjmp	.+0      	; 0x14c4c <uart_print+0x46>
   14c4c:	00 00       	nop
	}
	_delay_ms(5);
}
   14c4e:	df 91       	pop	r29
   14c50:	cf 91       	pop	r28
   14c52:	1f 91       	pop	r17
   14c54:	0f 91       	pop	r16
   14c56:	08 95       	ret

00014c58 <uart_printf>:

void uart_printf(unsigned char __com, unsigned char __ret, char *__str){
   14c58:	0f 93       	push	r16
   14c5a:	1f 93       	push	r17
   14c5c:	cf 93       	push	r28
   14c5e:	df 93       	push	r29
   14c60:	18 2f       	mov	r17, r24
   14c62:	06 2f       	mov	r16, r22
   14c64:	ea 01       	movw	r28, r20
	while(pgm_read_byte(&(*__str)))
   14c66:	07 c0       	rjmp	.+14     	; 0x14c76 <uart_printf+0x1e>
		uart(__com, 1, pgm_read_byte(&(*__str++)));
   14c68:	21 96       	adiw	r28, 0x01	; 1
   14c6a:	fa 01       	movw	r30, r20
   14c6c:	44 91       	lpm	r20, Z+
   14c6e:	81 2f       	mov	r24, r17
   14c70:	61 e0       	ldi	r22, 0x01	; 1
   14c72:	0e 94 e6 a5 	call	0x14bcc	; 0x14bcc <uart>
   14c76:	ae 01       	movw	r20, r28
	}
	_delay_ms(5);
}

void uart_printf(unsigned char __com, unsigned char __ret, char *__str){
	while(pgm_read_byte(&(*__str)))
   14c78:	fe 01       	movw	r30, r28
   14c7a:	84 91       	lpm	r24, Z+
   14c7c:	88 23       	and	r24, r24
   14c7e:	a1 f7       	brne	.-24     	; 0x14c68 <uart_printf+0x10>
		uart(__com, 1, pgm_read_byte(&(*__str++)));

	if(__ret){
   14c80:	00 23       	and	r16, r16
   14c82:	51 f0       	breq	.+20     	; 0x14c98 <uart_printf+0x40>
		uart(__com, 1, 0x0D);
   14c84:	81 2f       	mov	r24, r17
   14c86:	61 e0       	ldi	r22, 0x01	; 1
   14c88:	4d e0       	ldi	r20, 0x0D	; 13
   14c8a:	0e 94 e6 a5 	call	0x14bcc	; 0x14bcc <uart>
		uart(__com, 1, 0x0A);
   14c8e:	81 2f       	mov	r24, r17
   14c90:	61 e0       	ldi	r22, 0x01	; 1
   14c92:	4a e0       	ldi	r20, 0x0A	; 10
   14c94:	0e 94 e6 a5 	call	0x14bcc	; 0x14bcc <uart>
   14c98:	85 ea       	ldi	r24, 0xA5	; 165
   14c9a:	9e e0       	ldi	r25, 0x0E	; 14
   14c9c:	01 97       	sbiw	r24, 0x01	; 1
   14c9e:	f1 f7       	brne	.-4      	; 0x14c9c <uart_printf+0x44>
   14ca0:	00 c0       	rjmp	.+0      	; 0x14ca2 <uart_printf+0x4a>
   14ca2:	00 00       	nop
	}
	_delay_ms(15);
}
   14ca4:	df 91       	pop	r29
   14ca6:	cf 91       	pop	r28
   14ca8:	1f 91       	pop	r17
   14caa:	0f 91       	pop	r16
   14cac:	08 95       	ret

00014cae <Int2Str>:

void Int2Str(char* __string, unsigned long __value){
   14cae:	2f 92       	push	r2
   14cb0:	3f 92       	push	r3
   14cb2:	4f 92       	push	r4
   14cb4:	5f 92       	push	r5
   14cb6:	6f 92       	push	r6
   14cb8:	7f 92       	push	r7
   14cba:	8f 92       	push	r8
   14cbc:	9f 92       	push	r9
   14cbe:	af 92       	push	r10
   14cc0:	bf 92       	push	r11
   14cc2:	cf 92       	push	r12
   14cc4:	df 92       	push	r13
   14cc6:	ef 92       	push	r14
   14cc8:	ff 92       	push	r15
   14cca:	0f 93       	push	r16
   14ccc:	1f 93       	push	r17
   14cce:	cf 93       	push	r28
   14cd0:	df 93       	push	r29
   14cd2:	ec 01       	movw	r28, r24
	char			__flag = 0, __i = 0, __count;
	unsigned long	__num, __devider = 1000000000;
	int				__tmp;

	if(__value == 0){
   14cd4:	41 15       	cp	r20, r1
   14cd6:	51 05       	cpc	r21, r1
   14cd8:	61 05       	cpc	r22, r1
   14cda:	71 05       	cpc	r23, r1
   14cdc:	a1 f0       	breq	.+40     	; 0x14d06 <Int2Str+0x58>
   14cde:	4a 01       	movw	r8, r20
   14ce0:	5b 01       	movw	r10, r22
   14ce2:	0a e0       	ldi	r16, 0x0A	; 10
   14ce4:	c1 2c       	mov	r12, r1
   14ce6:	1a ec       	ldi	r17, 0xCA	; 202
   14ce8:	d1 2e       	mov	r13, r17
   14cea:	1a e9       	ldi	r17, 0x9A	; 154
   14cec:	e1 2e       	mov	r14, r17
   14cee:	1b e3       	ldi	r17, 0x3B	; 59
   14cf0:	f1 2e       	mov	r15, r17
   14cf2:	10 e0       	ldi	r17, 0x00	; 0
   14cf4:	77 24       	eor	r7, r7
			if(!__flag)
				__flag = 1;
		}
		else
			if(__flag)
				__string[__i++] = 0x30;
   14cf6:	b0 e3       	ldi	r27, 0x30	; 48
   14cf8:	6b 2e       	mov	r6, r27
		__devider = __devider / 10;
   14cfa:	aa e0       	ldi	r26, 0x0A	; 10
   14cfc:	2a 2e       	mov	r2, r26
   14cfe:	31 2c       	mov	r3, r1
   14d00:	41 2c       	mov	r4, r1
   14d02:	51 2c       	mov	r5, r1
   14d04:	04 c0       	rjmp	.+8      	; 0x14d0e <Int2Str+0x60>
	char			__flag = 0, __i = 0, __count;
	unsigned long	__num, __devider = 1000000000;
	int				__tmp;

	if(__value == 0){
		__string[0] = '0';
   14d06:	80 e3       	ldi	r24, 0x30	; 48
   14d08:	88 83       	st	Y, r24
		__string[1] = '\0';
   14d0a:	19 82       	std	Y+1, r1	; 0x01
		return;
   14d0c:	2e c0       	rjmp	.+92     	; 0x14d6a <Int2Str+0xbc>
	}

	__num = __value;
	for(__count = 0; __count < 10; __count++){
		if(__num >= __devider){
   14d0e:	8c 14       	cp	r8, r12
   14d10:	9d 04       	cpc	r9, r13
   14d12:	ae 04       	cpc	r10, r14
   14d14:	bf 04       	cpc	r11, r15
   14d16:	88 f0       	brcs	.+34     	; 0x14d3a <Int2Str+0x8c>
			__tmp = (int)(__num / __devider);
   14d18:	c5 01       	movw	r24, r10
   14d1a:	b4 01       	movw	r22, r8
   14d1c:	a7 01       	movw	r20, r14
   14d1e:	96 01       	movw	r18, r12
   14d20:	0e 94 be a7 	call	0x14f7c	; 0x14f7c <__udivmodsi4>
			__num = __num % __devider;
   14d24:	4b 01       	movw	r8, r22
   14d26:	5c 01       	movw	r10, r24
			__string[__i++] = __tmp + 0x30;
   14d28:	fe 01       	movw	r30, r28
   14d2a:	e1 0f       	add	r30, r17
   14d2c:	f1 1d       	adc	r31, r1
   14d2e:	20 5d       	subi	r18, 0xD0	; 208
   14d30:	20 83       	st	Z, r18
   14d32:	1f 5f       	subi	r17, 0xFF	; 255
			if(!__flag)
   14d34:	77 20       	and	r7, r7
   14d36:	49 f0       	breq	.+18     	; 0x14d4a <Int2Str+0x9c>
   14d38:	0a c0       	rjmp	.+20     	; 0x14d4e <Int2Str+0xa0>
				__flag = 1;
		}
		else
			if(__flag)
   14d3a:	77 20       	and	r7, r7
   14d3c:	41 f0       	breq	.+16     	; 0x14d4e <Int2Str+0xa0>
				__string[__i++] = 0x30;
   14d3e:	fe 01       	movw	r30, r28
   14d40:	e1 0f       	add	r30, r17
   14d42:	f1 1d       	adc	r31, r1
   14d44:	60 82       	st	Z, r6
   14d46:	1f 5f       	subi	r17, 0xFF	; 255
   14d48:	02 c0       	rjmp	.+4      	; 0x14d4e <Int2Str+0xa0>
		if(__num >= __devider){
			__tmp = (int)(__num / __devider);
			__num = __num % __devider;
			__string[__i++] = __tmp + 0x30;
			if(!__flag)
				__flag = 1;
   14d4a:	77 24       	eor	r7, r7
   14d4c:	73 94       	inc	r7
		}
		else
			if(__flag)
				__string[__i++] = 0x30;
   14d4e:	01 50       	subi	r16, 0x01	; 1
		__string[1] = '\0';
		return;
	}

	__num = __value;
	for(__count = 0; __count < 10; __count++){
   14d50:	49 f0       	breq	.+18     	; 0x14d64 <Int2Str+0xb6>
				__flag = 1;
		}
		else
			if(__flag)
				__string[__i++] = 0x30;
		__devider = __devider / 10;
   14d52:	c7 01       	movw	r24, r14
   14d54:	b6 01       	movw	r22, r12
   14d56:	a2 01       	movw	r20, r4
   14d58:	91 01       	movw	r18, r2
   14d5a:	0e 94 be a7 	call	0x14f7c	; 0x14f7c <__udivmodsi4>
   14d5e:	69 01       	movw	r12, r18
   14d60:	7a 01       	movw	r14, r20
   14d62:	d5 cf       	rjmp	.-86     	; 0x14d0e <Int2Str+0x60>
	}
	__string[__i] = '\0';
   14d64:	c1 0f       	add	r28, r17
   14d66:	d1 1d       	adc	r29, r1
   14d68:	18 82       	st	Y, r1
}
   14d6a:	df 91       	pop	r29
   14d6c:	cf 91       	pop	r28
   14d6e:	1f 91       	pop	r17
   14d70:	0f 91       	pop	r16
   14d72:	ff 90       	pop	r15
   14d74:	ef 90       	pop	r14
   14d76:	df 90       	pop	r13
   14d78:	cf 90       	pop	r12
   14d7a:	bf 90       	pop	r11
   14d7c:	af 90       	pop	r10
   14d7e:	9f 90       	pop	r9
   14d80:	8f 90       	pop	r8
   14d82:	7f 90       	pop	r7
   14d84:	6f 90       	pop	r6
   14d86:	5f 90       	pop	r5
   14d88:	4f 90       	pop	r4
   14d8a:	3f 90       	pop	r3
   14d8c:	2f 90       	pop	r2
   14d8e:	08 95       	ret

00014d90 <Str2Int>:

unsigned long Str2Int(char* __string){
   14d90:	2f 92       	push	r2
   14d92:	3f 92       	push	r3
   14d94:	4f 92       	push	r4
   14d96:	5f 92       	push	r5
   14d98:	6f 92       	push	r6
   14d9a:	7f 92       	push	r7
   14d9c:	8f 92       	push	r8
   14d9e:	9f 92       	push	r9
   14da0:	af 92       	push	r10
   14da2:	bf 92       	push	r11
   14da4:	cf 92       	push	r12
   14da6:	df 92       	push	r13
   14da8:	ef 92       	push	r14
   14daa:	ff 92       	push	r15
   14dac:	0f 93       	push	r16
   14dae:	1f 93       	push	r17
   14db0:	cf 93       	push	r28
   14db2:	df 93       	push	r29
	unsigned char	__i, __len;
	unsigned long	__multiplier = 1, __retval = 0;

	__len = strlen(__string);
   14db4:	dc 01       	movw	r26, r24
   14db6:	0d 90       	ld	r0, X+
   14db8:	00 20       	and	r0, r0
   14dba:	e9 f7       	brne	.-6      	; 0x14db6 <Str2Int+0x26>
   14dbc:	11 97       	sbiw	r26, 0x01	; 1
   14dbe:	9a 2e       	mov	r9, r26
   14dc0:	98 1a       	sub	r9, r24

	if(__len > 0 && __len < 11){
   14dc2:	29 2d       	mov	r18, r9
   14dc4:	21 50       	subi	r18, 0x01	; 1
   14dc6:	2a 30       	cpi	r18, 0x0A	; 10
   14dc8:	08 f0       	brcs	.+2      	; 0x14dcc <Str2Int+0x3c>
   14dca:	61 c0       	rjmp	.+194    	; 0x14e8e <Str2Int+0xfe>
   14dcc:	3c 01       	movw	r6, r24
   14dce:	fc 01       	movw	r30, r24
		for(__i = 0; __i < __len; __i++)
			if(__string[__i] < 0x30 || __string[__i] > 0x39)
   14dd0:	21 91       	ld	r18, Z+
   14dd2:	20 53       	subi	r18, 0x30	; 48
   14dd4:	2a 30       	cpi	r18, 0x0A	; 10
   14dd6:	08 f0       	brcs	.+2      	; 0x14dda <Str2Int+0x4a>
   14dd8:	5a c0       	rjmp	.+180    	; 0x14e8e <Str2Int+0xfe>
	unsigned long	__multiplier = 1, __retval = 0;

	__len = strlen(__string);

	if(__len > 0 && __len < 11){
		for(__i = 0; __i < __len; __i++)
   14dda:	2e 2f       	mov	r18, r30
   14ddc:	28 1b       	sub	r18, r24
   14dde:	29 15       	cp	r18, r9
   14de0:	b8 f3       	brcs	.-18     	; 0x14dd0 <Str2Int+0x40>
			if(__string[__i] < 0x30 || __string[__i] > 0x39)
				return 0;
		if(__len == 10){
   14de2:	29 2d       	mov	r18, r9
   14de4:	2a 30       	cpi	r18, 0x0A	; 10
   14de6:	91 f4       	brne	.+36     	; 0x14e0c <Str2Int+0x7c>
			if(__string[0] < 0x30 || __string[0] > 0x32)
   14de8:	fc 01       	movw	r30, r24
   14dea:	20 81       	ld	r18, Z
   14dec:	32 2f       	mov	r19, r18
   14dee:	30 53       	subi	r19, 0x30	; 48
   14df0:	33 30       	cpi	r19, 0x03	; 3
   14df2:	08 f0       	brcs	.+2      	; 0x14df6 <Str2Int+0x66>
   14df4:	4c c0       	rjmp	.+152    	; 0x14e8e <Str2Int+0xfe>
				return 0;
			if(__string[0] == 0x32){
   14df6:	22 33       	cpi	r18, 0x32	; 50
   14df8:	49 f4       	brne	.+18     	; 0x14e0c <Str2Int+0x7c>
		__devider = __devider / 10;
	}
	__string[__i] = '\0';
}

unsigned long Str2Int(char* __string){
   14dfa:	31 96       	adiw	r30, 0x01	; 1
   14dfc:	81 e0       	ldi	r24, 0x01	; 1
		if(__len == 10){
			if(__string[0] < 0x30 || __string[0] > 0x32)
				return 0;
			if(__string[0] == 0x32){
				for(__i = 1; __i < __len; __i++)
					if(__string[__i] < 0x30 || __string[__i] > 0x30)
   14dfe:	91 91       	ld	r25, Z+
   14e00:	90 33       	cpi	r25, 0x30	; 48
   14e02:	09 f0       	breq	.+2      	; 0x14e06 <Str2Int+0x76>
   14e04:	44 c0       	rjmp	.+136    	; 0x14e8e <Str2Int+0xfe>
				return 0;
		if(__len == 10){
			if(__string[0] < 0x30 || __string[0] > 0x32)
				return 0;
			if(__string[0] == 0x32){
				for(__i = 1; __i < __len; __i++)
   14e06:	8f 5f       	subi	r24, 0xFF	; 255
   14e08:	8a 30       	cpi	r24, 0x0A	; 10
   14e0a:	c9 f7       	brne	.-14     	; 0x14dfe <Str2Int+0x6e>
			if(__string[__i] < 0x30 || __string[__i] > 0x39)
				return 0;
		if(__len == 10){
			if(__string[0] < 0x30 || __string[0] > 0x32)
				return 0;
			if(__string[0] == 0x32){
   14e0c:	91 e0       	ldi	r25, 0x01	; 1
   14e0e:	e9 2e       	mov	r14, r25
   14e10:	f1 2c       	mov	r15, r1
   14e12:	01 2d       	mov	r16, r1
   14e14:	11 2d       	mov	r17, r1
   14e16:	aa 24       	eor	r10, r10
				for(__i = 1; __i < __len; __i++)
					if(__string[__i] < 0x30 || __string[__i] > 0x30)
						return 0;
			}
		}
		for(__i = 0; __i < __len - 1; __i++)
   14e18:	c9 2d       	mov	r28, r9
   14e1a:	d0 e0       	ldi	r29, 0x00	; 0
   14e1c:	21 97       	sbiw	r28, 0x01	; 1
   14e1e:	0b c0       	rjmp	.+22     	; 0x14e36 <Str2Int+0xa6>
			__multiplier *= 10;
   14e20:	c8 01       	movw	r24, r16
   14e22:	b7 01       	movw	r22, r14
   14e24:	2a e0       	ldi	r18, 0x0A	; 10
   14e26:	30 e0       	ldi	r19, 0x00	; 0
   14e28:	40 e0       	ldi	r20, 0x00	; 0
   14e2a:	50 e0       	ldi	r21, 0x00	; 0
   14e2c:	0e 94 5f a7 	call	0x14ebe	; 0x14ebe <__mulsi3>
   14e30:	7b 01       	movw	r14, r22
   14e32:	8c 01       	movw	r16, r24
				for(__i = 1; __i < __len; __i++)
					if(__string[__i] < 0x30 || __string[__i] > 0x30)
						return 0;
			}
		}
		for(__i = 0; __i < __len - 1; __i++)
   14e34:	a3 94       	inc	r10
   14e36:	8a 2d       	mov	r24, r10
   14e38:	90 e0       	ldi	r25, 0x00	; 0
   14e3a:	8c 17       	cp	r24, r28
   14e3c:	9d 07       	cpc	r25, r29
   14e3e:	84 f3       	brlt	.-32     	; 0x14e20 <Str2Int+0x90>
   14e40:	aa 24       	eor	r10, r10
   14e42:	bb 24       	eor	r11, r11
   14e44:	65 01       	movw	r12, r10
   14e46:	88 24       	eor	r8, r8
			__multiplier *= 10;
		for(__i = 0; __i < __len; __i++, __multiplier /= 10)
   14e48:	8a e0       	ldi	r24, 0x0A	; 10
   14e4a:	28 2e       	mov	r2, r24
   14e4c:	31 2c       	mov	r3, r1
   14e4e:	41 2c       	mov	r4, r1
   14e50:	51 2c       	mov	r5, r1
			__retval += ((unsigned long)(__string[__i] - 0x30) * __multiplier);
   14e52:	f3 01       	movw	r30, r6
   14e54:	21 91       	ld	r18, Z+
   14e56:	3f 01       	movw	r6, r30
   14e58:	30 e0       	ldi	r19, 0x00	; 0
   14e5a:	20 53       	subi	r18, 0x30	; 48
   14e5c:	30 40       	sbci	r19, 0x00	; 0
   14e5e:	44 27       	eor	r20, r20
   14e60:	37 fd       	sbrc	r19, 7
   14e62:	40 95       	com	r20
   14e64:	54 2f       	mov	r21, r20
   14e66:	c8 01       	movw	r24, r16
   14e68:	b7 01       	movw	r22, r14
   14e6a:	0e 94 5f a7 	call	0x14ebe	; 0x14ebe <__mulsi3>
   14e6e:	a6 0e       	add	r10, r22
   14e70:	b7 1e       	adc	r11, r23
   14e72:	c8 1e       	adc	r12, r24
   14e74:	d9 1e       	adc	r13, r25
						return 0;
			}
		}
		for(__i = 0; __i < __len - 1; __i++)
			__multiplier *= 10;
		for(__i = 0; __i < __len; __i++, __multiplier /= 10)
   14e76:	83 94       	inc	r8
   14e78:	c8 01       	movw	r24, r16
   14e7a:	b7 01       	movw	r22, r14
   14e7c:	a2 01       	movw	r20, r4
   14e7e:	91 01       	movw	r18, r2
   14e80:	0e 94 be a7 	call	0x14f7c	; 0x14f7c <__udivmodsi4>
   14e84:	79 01       	movw	r14, r18
   14e86:	8a 01       	movw	r16, r20
   14e88:	89 14       	cp	r8, r9
   14e8a:	18 f3       	brcs	.-58     	; 0x14e52 <Str2Int+0xc2>
   14e8c:	03 c0       	rjmp	.+6      	; 0x14e94 <Str2Int+0x104>
			if(__string[0] < 0x30 || __string[0] > 0x32)
				return 0;
			if(__string[0] == 0x32){
				for(__i = 1; __i < __len; __i++)
					if(__string[__i] < 0x30 || __string[__i] > 0x30)
						return 0;
   14e8e:	aa 24       	eor	r10, r10
   14e90:	bb 24       	eor	r11, r11
   14e92:	65 01       	movw	r12, r10
			__multiplier *= 10;
		for(__i = 0; __i < __len; __i++, __multiplier /= 10)
			__retval += ((unsigned long)(__string[__i] - 0x30) * __multiplier);
	}
	return __retval;
}
   14e94:	b5 01       	movw	r22, r10
   14e96:	c6 01       	movw	r24, r12
   14e98:	df 91       	pop	r29
   14e9a:	cf 91       	pop	r28
   14e9c:	1f 91       	pop	r17
   14e9e:	0f 91       	pop	r16
   14ea0:	ff 90       	pop	r15
   14ea2:	ef 90       	pop	r14
   14ea4:	df 90       	pop	r13
   14ea6:	cf 90       	pop	r12
   14ea8:	bf 90       	pop	r11
   14eaa:	af 90       	pop	r10
   14eac:	9f 90       	pop	r9
   14eae:	8f 90       	pop	r8
   14eb0:	7f 90       	pop	r7
   14eb2:	6f 90       	pop	r6
   14eb4:	5f 90       	pop	r5
   14eb6:	4f 90       	pop	r4
   14eb8:	3f 90       	pop	r3
   14eba:	2f 90       	pop	r2
   14ebc:	08 95       	ret

00014ebe <__mulsi3>:
   14ebe:	62 9f       	mul	r22, r18
   14ec0:	d0 01       	movw	r26, r0
   14ec2:	73 9f       	mul	r23, r19
   14ec4:	f0 01       	movw	r30, r0
   14ec6:	82 9f       	mul	r24, r18
   14ec8:	e0 0d       	add	r30, r0
   14eca:	f1 1d       	adc	r31, r1
   14ecc:	64 9f       	mul	r22, r20
   14ece:	e0 0d       	add	r30, r0
   14ed0:	f1 1d       	adc	r31, r1
   14ed2:	92 9f       	mul	r25, r18
   14ed4:	f0 0d       	add	r31, r0
   14ed6:	83 9f       	mul	r24, r19
   14ed8:	f0 0d       	add	r31, r0
   14eda:	74 9f       	mul	r23, r20
   14edc:	f0 0d       	add	r31, r0
   14ede:	65 9f       	mul	r22, r21
   14ee0:	f0 0d       	add	r31, r0
   14ee2:	99 27       	eor	r25, r25
   14ee4:	72 9f       	mul	r23, r18
   14ee6:	b0 0d       	add	r27, r0
   14ee8:	e1 1d       	adc	r30, r1
   14eea:	f9 1f       	adc	r31, r25
   14eec:	63 9f       	mul	r22, r19
   14eee:	b0 0d       	add	r27, r0
   14ef0:	e1 1d       	adc	r30, r1
   14ef2:	f9 1f       	adc	r31, r25
   14ef4:	bd 01       	movw	r22, r26
   14ef6:	cf 01       	movw	r24, r30
   14ef8:	11 24       	eor	r1, r1
   14efa:	08 95       	ret

00014efc <__udivmodqi4>:
   14efc:	99 1b       	sub	r25, r25
   14efe:	79 e0       	ldi	r23, 0x09	; 9
   14f00:	04 c0       	rjmp	.+8      	; 0x14f0a <__udivmodqi4_ep>

00014f02 <__udivmodqi4_loop>:
   14f02:	99 1f       	adc	r25, r25
   14f04:	96 17       	cp	r25, r22
   14f06:	08 f0       	brcs	.+2      	; 0x14f0a <__udivmodqi4_ep>
   14f08:	96 1b       	sub	r25, r22

00014f0a <__udivmodqi4_ep>:
   14f0a:	88 1f       	adc	r24, r24
   14f0c:	7a 95       	dec	r23
   14f0e:	c9 f7       	brne	.-14     	; 0x14f02 <__udivmodqi4_loop>
   14f10:	80 95       	com	r24
   14f12:	08 95       	ret

00014f14 <__divmodqi4>:
   14f14:	87 fb       	bst	r24, 7
   14f16:	08 2e       	mov	r0, r24
   14f18:	06 26       	eor	r0, r22
   14f1a:	87 fd       	sbrc	r24, 7
   14f1c:	81 95       	neg	r24
   14f1e:	67 fd       	sbrc	r22, 7
   14f20:	61 95       	neg	r22
   14f22:	ec df       	rcall	.-40     	; 0x14efc <__udivmodqi4>
   14f24:	0e f4       	brtc	.+2      	; 0x14f28 <__divmodqi4_1>
   14f26:	91 95       	neg	r25

00014f28 <__divmodqi4_1>:
   14f28:	07 fc       	sbrc	r0, 7
   14f2a:	81 95       	neg	r24

00014f2c <__divmodqi4_exit>:
   14f2c:	08 95       	ret

00014f2e <__udivmodhi4>:
   14f2e:	aa 1b       	sub	r26, r26
   14f30:	bb 1b       	sub	r27, r27
   14f32:	51 e1       	ldi	r21, 0x11	; 17
   14f34:	07 c0       	rjmp	.+14     	; 0x14f44 <__udivmodhi4_ep>

00014f36 <__udivmodhi4_loop>:
   14f36:	aa 1f       	adc	r26, r26
   14f38:	bb 1f       	adc	r27, r27
   14f3a:	a6 17       	cp	r26, r22
   14f3c:	b7 07       	cpc	r27, r23
   14f3e:	10 f0       	brcs	.+4      	; 0x14f44 <__udivmodhi4_ep>
   14f40:	a6 1b       	sub	r26, r22
   14f42:	b7 0b       	sbc	r27, r23

00014f44 <__udivmodhi4_ep>:
   14f44:	88 1f       	adc	r24, r24
   14f46:	99 1f       	adc	r25, r25
   14f48:	5a 95       	dec	r21
   14f4a:	a9 f7       	brne	.-22     	; 0x14f36 <__udivmodhi4_loop>
   14f4c:	80 95       	com	r24
   14f4e:	90 95       	com	r25
   14f50:	bc 01       	movw	r22, r24
   14f52:	cd 01       	movw	r24, r26
   14f54:	08 95       	ret

00014f56 <__divmodhi4>:
   14f56:	97 fb       	bst	r25, 7
   14f58:	09 2e       	mov	r0, r25
   14f5a:	07 26       	eor	r0, r23
   14f5c:	0a d0       	rcall	.+20     	; 0x14f72 <__divmodhi4_neg1>
   14f5e:	77 fd       	sbrc	r23, 7
   14f60:	04 d0       	rcall	.+8      	; 0x14f6a <__divmodhi4_neg2>
   14f62:	e5 df       	rcall	.-54     	; 0x14f2e <__udivmodhi4>
   14f64:	06 d0       	rcall	.+12     	; 0x14f72 <__divmodhi4_neg1>
   14f66:	00 20       	and	r0, r0
   14f68:	1a f4       	brpl	.+6      	; 0x14f70 <__divmodhi4_exit>

00014f6a <__divmodhi4_neg2>:
   14f6a:	70 95       	com	r23
   14f6c:	61 95       	neg	r22
   14f6e:	7f 4f       	sbci	r23, 0xFF	; 255

00014f70 <__divmodhi4_exit>:
   14f70:	08 95       	ret

00014f72 <__divmodhi4_neg1>:
   14f72:	f6 f7       	brtc	.-4      	; 0x14f70 <__divmodhi4_exit>
   14f74:	90 95       	com	r25
   14f76:	81 95       	neg	r24
   14f78:	9f 4f       	sbci	r25, 0xFF	; 255
   14f7a:	08 95       	ret

00014f7c <__udivmodsi4>:
   14f7c:	a1 e2       	ldi	r26, 0x21	; 33
   14f7e:	1a 2e       	mov	r1, r26
   14f80:	aa 1b       	sub	r26, r26
   14f82:	bb 1b       	sub	r27, r27
   14f84:	fd 01       	movw	r30, r26
   14f86:	0d c0       	rjmp	.+26     	; 0x14fa2 <__udivmodsi4_ep>

00014f88 <__udivmodsi4_loop>:
   14f88:	aa 1f       	adc	r26, r26
   14f8a:	bb 1f       	adc	r27, r27
   14f8c:	ee 1f       	adc	r30, r30
   14f8e:	ff 1f       	adc	r31, r31
   14f90:	a2 17       	cp	r26, r18
   14f92:	b3 07       	cpc	r27, r19
   14f94:	e4 07       	cpc	r30, r20
   14f96:	f5 07       	cpc	r31, r21
   14f98:	20 f0       	brcs	.+8      	; 0x14fa2 <__udivmodsi4_ep>
   14f9a:	a2 1b       	sub	r26, r18
   14f9c:	b3 0b       	sbc	r27, r19
   14f9e:	e4 0b       	sbc	r30, r20
   14fa0:	f5 0b       	sbc	r31, r21

00014fa2 <__udivmodsi4_ep>:
   14fa2:	66 1f       	adc	r22, r22
   14fa4:	77 1f       	adc	r23, r23
   14fa6:	88 1f       	adc	r24, r24
   14fa8:	99 1f       	adc	r25, r25
   14faa:	1a 94       	dec	r1
   14fac:	69 f7       	brne	.-38     	; 0x14f88 <__udivmodsi4_loop>
   14fae:	60 95       	com	r22
   14fb0:	70 95       	com	r23
   14fb2:	80 95       	com	r24
   14fb4:	90 95       	com	r25
   14fb6:	9b 01       	movw	r18, r22
   14fb8:	ac 01       	movw	r20, r24
   14fba:	bd 01       	movw	r22, r26
   14fbc:	cf 01       	movw	r24, r30
   14fbe:	08 95       	ret

00014fc0 <atoi>:
   14fc0:	fc 01       	movw	r30, r24
   14fc2:	88 27       	eor	r24, r24
   14fc4:	99 27       	eor	r25, r25
   14fc6:	e8 94       	clt
   14fc8:	21 91       	ld	r18, Z+
   14fca:	20 32       	cpi	r18, 0x20	; 32
   14fcc:	e9 f3       	breq	.-6      	; 0x14fc8 <atoi+0x8>
   14fce:	29 30       	cpi	r18, 0x09	; 9
   14fd0:	10 f0       	brcs	.+4      	; 0x14fd6 <atoi+0x16>
   14fd2:	2e 30       	cpi	r18, 0x0E	; 14
   14fd4:	c8 f3       	brcs	.-14     	; 0x14fc8 <atoi+0x8>
   14fd6:	2b 32       	cpi	r18, 0x2B	; 43
   14fd8:	41 f0       	breq	.+16     	; 0x14fea <atoi+0x2a>
   14fda:	2d 32       	cpi	r18, 0x2D	; 45
   14fdc:	39 f4       	brne	.+14     	; 0x14fec <atoi+0x2c>
   14fde:	68 94       	set
   14fe0:	04 c0       	rjmp	.+8      	; 0x14fea <atoi+0x2a>
   14fe2:	0e 94 0e a8 	call	0x1501c	; 0x1501c <__mulhi_const_10>
   14fe6:	82 0f       	add	r24, r18
   14fe8:	91 1d       	adc	r25, r1
   14fea:	21 91       	ld	r18, Z+
   14fec:	20 53       	subi	r18, 0x30	; 48
   14fee:	2a 30       	cpi	r18, 0x0A	; 10
   14ff0:	c0 f3       	brcs	.-16     	; 0x14fe2 <atoi+0x22>
   14ff2:	1e f4       	brtc	.+6      	; 0x14ffa <atoi+0x3a>
   14ff4:	90 95       	com	r25
   14ff6:	81 95       	neg	r24
   14ff8:	9f 4f       	sbci	r25, 0xFF	; 255
   14ffa:	08 95       	ret

00014ffc <strcpy_P>:
   14ffc:	fb 01       	movw	r30, r22
   14ffe:	dc 01       	movw	r26, r24
   15000:	05 90       	lpm	r0, Z+
   15002:	0d 92       	st	X+, r0
   15004:	00 20       	and	r0, r0
   15006:	e1 f7       	brne	.-8      	; 0x15000 <strcpy_P+0x4>
   15008:	08 95       	ret

0001500a <strcmp>:
   1500a:	fb 01       	movw	r30, r22
   1500c:	dc 01       	movw	r26, r24
   1500e:	8d 91       	ld	r24, X+
   15010:	01 90       	ld	r0, Z+
   15012:	80 19       	sub	r24, r0
   15014:	01 10       	cpse	r0, r1
   15016:	d9 f3       	breq	.-10     	; 0x1500e <strcmp+0x4>
   15018:	99 0b       	sbc	r25, r25
   1501a:	08 95       	ret

0001501c <__mulhi_const_10>:
   1501c:	7a e0       	ldi	r23, 0x0A	; 10
   1501e:	97 9f       	mul	r25, r23
   15020:	90 2d       	mov	r25, r0
   15022:	87 9f       	mul	r24, r23
   15024:	80 2d       	mov	r24, r0
   15026:	91 0d       	add	r25, r1
   15028:	11 24       	eor	r1, r1
   1502a:	08 95       	ret

0001502c <sprintf_P>:
   1502c:	0f 93       	push	r16
   1502e:	1f 93       	push	r17
   15030:	df 93       	push	r29
   15032:	cf 93       	push	r28
   15034:	cd b7       	in	r28, 0x3d	; 61
   15036:	de b7       	in	r29, 0x3e	; 62
   15038:	2e 97       	sbiw	r28, 0x0e	; 14
   1503a:	0f b6       	in	r0, 0x3f	; 63
   1503c:	f8 94       	cli
   1503e:	de bf       	out	0x3e, r29	; 62
   15040:	0f be       	out	0x3f, r0	; 63
   15042:	cd bf       	out	0x3d, r28	; 61
   15044:	0d 89       	ldd	r16, Y+21	; 0x15
   15046:	1e 89       	ldd	r17, Y+22	; 0x16
   15048:	8e e0       	ldi	r24, 0x0E	; 14
   1504a:	8c 83       	std	Y+4, r24	; 0x04
   1504c:	1a 83       	std	Y+2, r17	; 0x02
   1504e:	09 83       	std	Y+1, r16	; 0x01
   15050:	8f ef       	ldi	r24, 0xFF	; 255
   15052:	9f e7       	ldi	r25, 0x7F	; 127
   15054:	9e 83       	std	Y+6, r25	; 0x06
   15056:	8d 83       	std	Y+5, r24	; 0x05
   15058:	9e 01       	movw	r18, r28
   1505a:	27 5e       	subi	r18, 0xE7	; 231
   1505c:	3f 4f       	sbci	r19, 0xFF	; 255
   1505e:	ce 01       	movw	r24, r28
   15060:	01 96       	adiw	r24, 0x01	; 1
   15062:	6f 89       	ldd	r22, Y+23	; 0x17
   15064:	78 8d       	ldd	r23, Y+24	; 0x18
   15066:	a9 01       	movw	r20, r18
   15068:	0e 94 46 a8 	call	0x1508c	; 0x1508c <vfprintf>
   1506c:	ef 81       	ldd	r30, Y+7	; 0x07
   1506e:	f8 85       	ldd	r31, Y+8	; 0x08
   15070:	e0 0f       	add	r30, r16
   15072:	f1 1f       	adc	r31, r17
   15074:	10 82       	st	Z, r1
   15076:	2e 96       	adiw	r28, 0x0e	; 14
   15078:	0f b6       	in	r0, 0x3f	; 63
   1507a:	f8 94       	cli
   1507c:	de bf       	out	0x3e, r29	; 62
   1507e:	0f be       	out	0x3f, r0	; 63
   15080:	cd bf       	out	0x3d, r28	; 61
   15082:	cf 91       	pop	r28
   15084:	df 91       	pop	r29
   15086:	1f 91       	pop	r17
   15088:	0f 91       	pop	r16
   1508a:	08 95       	ret

0001508c <vfprintf>:
   1508c:	2f 92       	push	r2
   1508e:	3f 92       	push	r3
   15090:	4f 92       	push	r4
   15092:	5f 92       	push	r5
   15094:	6f 92       	push	r6
   15096:	7f 92       	push	r7
   15098:	8f 92       	push	r8
   1509a:	9f 92       	push	r9
   1509c:	af 92       	push	r10
   1509e:	bf 92       	push	r11
   150a0:	cf 92       	push	r12
   150a2:	df 92       	push	r13
   150a4:	ef 92       	push	r14
   150a6:	ff 92       	push	r15
   150a8:	0f 93       	push	r16
   150aa:	1f 93       	push	r17
   150ac:	df 93       	push	r29
   150ae:	cf 93       	push	r28
   150b0:	cd b7       	in	r28, 0x3d	; 61
   150b2:	de b7       	in	r29, 0x3e	; 62
   150b4:	2c 97       	sbiw	r28, 0x0c	; 12
   150b6:	0f b6       	in	r0, 0x3f	; 63
   150b8:	f8 94       	cli
   150ba:	de bf       	out	0x3e, r29	; 62
   150bc:	0f be       	out	0x3f, r0	; 63
   150be:	cd bf       	out	0x3d, r28	; 61
   150c0:	6c 01       	movw	r12, r24
   150c2:	1b 01       	movw	r2, r22
   150c4:	8a 01       	movw	r16, r20
   150c6:	fc 01       	movw	r30, r24
   150c8:	17 82       	std	Z+7, r1	; 0x07
   150ca:	16 82       	std	Z+6, r1	; 0x06
   150cc:	83 81       	ldd	r24, Z+3	; 0x03
   150ce:	81 ff       	sbrs	r24, 1
   150d0:	d1 c1       	rjmp	.+930    	; 0x15474 <vfprintf+0x3e8>
   150d2:	2e 01       	movw	r4, r28
   150d4:	08 94       	sec
   150d6:	41 1c       	adc	r4, r1
   150d8:	51 1c       	adc	r5, r1
   150da:	f6 01       	movw	r30, r12
   150dc:	93 81       	ldd	r25, Z+3	; 0x03
   150de:	f1 01       	movw	r30, r2
   150e0:	93 fd       	sbrc	r25, 3
   150e2:	85 91       	lpm	r24, Z+
   150e4:	93 ff       	sbrs	r25, 3
   150e6:	81 91       	ld	r24, Z+
   150e8:	1f 01       	movw	r2, r30
   150ea:	88 23       	and	r24, r24
   150ec:	09 f4       	brne	.+2      	; 0x150f0 <vfprintf+0x64>
   150ee:	be c1       	rjmp	.+892    	; 0x1546c <vfprintf+0x3e0>
   150f0:	85 32       	cpi	r24, 0x25	; 37
   150f2:	39 f4       	brne	.+14     	; 0x15102 <vfprintf+0x76>
   150f4:	93 fd       	sbrc	r25, 3
   150f6:	85 91       	lpm	r24, Z+
   150f8:	93 ff       	sbrs	r25, 3
   150fa:	81 91       	ld	r24, Z+
   150fc:	1f 01       	movw	r2, r30
   150fe:	85 32       	cpi	r24, 0x25	; 37
   15100:	29 f4       	brne	.+10     	; 0x1510c <vfprintf+0x80>
   15102:	90 e0       	ldi	r25, 0x00	; 0
   15104:	b6 01       	movw	r22, r12
   15106:	0e 94 9b aa 	call	0x15536	; 0x15536 <fputc>
   1510a:	e7 cf       	rjmp	.-50     	; 0x150da <vfprintf+0x4e>
   1510c:	ee 24       	eor	r14, r14
   1510e:	ff 24       	eor	r15, r15
   15110:	20 e0       	ldi	r18, 0x00	; 0
   15112:	20 32       	cpi	r18, 0x20	; 32
   15114:	b0 f4       	brcc	.+44     	; 0x15142 <vfprintf+0xb6>
   15116:	8b 32       	cpi	r24, 0x2B	; 43
   15118:	69 f0       	breq	.+26     	; 0x15134 <vfprintf+0xa8>
   1511a:	8c 32       	cpi	r24, 0x2C	; 44
   1511c:	28 f4       	brcc	.+10     	; 0x15128 <vfprintf+0x9c>
   1511e:	80 32       	cpi	r24, 0x20	; 32
   15120:	51 f0       	breq	.+20     	; 0x15136 <vfprintf+0xaa>
   15122:	83 32       	cpi	r24, 0x23	; 35
   15124:	71 f4       	brne	.+28     	; 0x15142 <vfprintf+0xb6>
   15126:	0b c0       	rjmp	.+22     	; 0x1513e <vfprintf+0xb2>
   15128:	8d 32       	cpi	r24, 0x2D	; 45
   1512a:	39 f0       	breq	.+14     	; 0x1513a <vfprintf+0xae>
   1512c:	80 33       	cpi	r24, 0x30	; 48
   1512e:	49 f4       	brne	.+18     	; 0x15142 <vfprintf+0xb6>
   15130:	21 60       	ori	r18, 0x01	; 1
   15132:	2c c0       	rjmp	.+88     	; 0x1518c <vfprintf+0x100>
   15134:	22 60       	ori	r18, 0x02	; 2
   15136:	24 60       	ori	r18, 0x04	; 4
   15138:	29 c0       	rjmp	.+82     	; 0x1518c <vfprintf+0x100>
   1513a:	28 60       	ori	r18, 0x08	; 8
   1513c:	27 c0       	rjmp	.+78     	; 0x1518c <vfprintf+0x100>
   1513e:	20 61       	ori	r18, 0x10	; 16
   15140:	25 c0       	rjmp	.+74     	; 0x1518c <vfprintf+0x100>
   15142:	27 fd       	sbrc	r18, 7
   15144:	2c c0       	rjmp	.+88     	; 0x1519e <vfprintf+0x112>
   15146:	38 2f       	mov	r19, r24
   15148:	30 53       	subi	r19, 0x30	; 48
   1514a:	3a 30       	cpi	r19, 0x0A	; 10
   1514c:	98 f4       	brcc	.+38     	; 0x15174 <vfprintf+0xe8>
   1514e:	26 ff       	sbrs	r18, 6
   15150:	08 c0       	rjmp	.+16     	; 0x15162 <vfprintf+0xd6>
   15152:	8e 2d       	mov	r24, r14
   15154:	88 0f       	add	r24, r24
   15156:	e8 2e       	mov	r14, r24
   15158:	ee 0c       	add	r14, r14
   1515a:	ee 0c       	add	r14, r14
   1515c:	e8 0e       	add	r14, r24
   1515e:	e3 0e       	add	r14, r19
   15160:	15 c0       	rjmp	.+42     	; 0x1518c <vfprintf+0x100>
   15162:	8f 2d       	mov	r24, r15
   15164:	88 0f       	add	r24, r24
   15166:	f8 2e       	mov	r15, r24
   15168:	ff 0c       	add	r15, r15
   1516a:	ff 0c       	add	r15, r15
   1516c:	f8 0e       	add	r15, r24
   1516e:	f3 0e       	add	r15, r19
   15170:	20 62       	ori	r18, 0x20	; 32
   15172:	0c c0       	rjmp	.+24     	; 0x1518c <vfprintf+0x100>
   15174:	8e 32       	cpi	r24, 0x2E	; 46
   15176:	21 f4       	brne	.+8      	; 0x15180 <vfprintf+0xf4>
   15178:	26 fd       	sbrc	r18, 6
   1517a:	78 c1       	rjmp	.+752    	; 0x1546c <vfprintf+0x3e0>
   1517c:	20 64       	ori	r18, 0x40	; 64
   1517e:	06 c0       	rjmp	.+12     	; 0x1518c <vfprintf+0x100>
   15180:	8c 36       	cpi	r24, 0x6C	; 108
   15182:	11 f4       	brne	.+4      	; 0x15188 <vfprintf+0xfc>
   15184:	20 68       	ori	r18, 0x80	; 128
   15186:	02 c0       	rjmp	.+4      	; 0x1518c <vfprintf+0x100>
   15188:	88 36       	cpi	r24, 0x68	; 104
   1518a:	49 f4       	brne	.+18     	; 0x1519e <vfprintf+0x112>
   1518c:	f1 01       	movw	r30, r2
   1518e:	93 fd       	sbrc	r25, 3
   15190:	85 91       	lpm	r24, Z+
   15192:	93 ff       	sbrs	r25, 3
   15194:	81 91       	ld	r24, Z+
   15196:	1f 01       	movw	r2, r30
   15198:	88 23       	and	r24, r24
   1519a:	09 f0       	breq	.+2      	; 0x1519e <vfprintf+0x112>
   1519c:	ba cf       	rjmp	.-140    	; 0x15112 <vfprintf+0x86>
   1519e:	98 2f       	mov	r25, r24
   151a0:	95 54       	subi	r25, 0x45	; 69
   151a2:	93 30       	cpi	r25, 0x03	; 3
   151a4:	18 f0       	brcs	.+6      	; 0x151ac <vfprintf+0x120>
   151a6:	90 52       	subi	r25, 0x20	; 32
   151a8:	93 30       	cpi	r25, 0x03	; 3
   151aa:	28 f4       	brcc	.+10     	; 0x151b6 <vfprintf+0x12a>
   151ac:	0c 5f       	subi	r16, 0xFC	; 252
   151ae:	1f 4f       	sbci	r17, 0xFF	; 255
   151b0:	ff e3       	ldi	r31, 0x3F	; 63
   151b2:	f9 83       	std	Y+1, r31	; 0x01
   151b4:	0d c0       	rjmp	.+26     	; 0x151d0 <vfprintf+0x144>
   151b6:	83 36       	cpi	r24, 0x63	; 99
   151b8:	31 f0       	breq	.+12     	; 0x151c6 <vfprintf+0x13a>
   151ba:	83 37       	cpi	r24, 0x73	; 115
   151bc:	71 f0       	breq	.+28     	; 0x151da <vfprintf+0x14e>
   151be:	83 35       	cpi	r24, 0x53	; 83
   151c0:	09 f0       	breq	.+2      	; 0x151c4 <vfprintf+0x138>
   151c2:	60 c0       	rjmp	.+192    	; 0x15284 <vfprintf+0x1f8>
   151c4:	22 c0       	rjmp	.+68     	; 0x1520a <vfprintf+0x17e>
   151c6:	f8 01       	movw	r30, r16
   151c8:	80 81       	ld	r24, Z
   151ca:	89 83       	std	Y+1, r24	; 0x01
   151cc:	0e 5f       	subi	r16, 0xFE	; 254
   151ce:	1f 4f       	sbci	r17, 0xFF	; 255
   151d0:	42 01       	movw	r8, r4
   151d2:	71 e0       	ldi	r23, 0x01	; 1
   151d4:	a7 2e       	mov	r10, r23
   151d6:	b1 2c       	mov	r11, r1
   151d8:	16 c0       	rjmp	.+44     	; 0x15206 <vfprintf+0x17a>
   151da:	62 e0       	ldi	r22, 0x02	; 2
   151dc:	66 2e       	mov	r6, r22
   151de:	71 2c       	mov	r7, r1
   151e0:	60 0e       	add	r6, r16
   151e2:	71 1e       	adc	r7, r17
   151e4:	f8 01       	movw	r30, r16
   151e6:	80 80       	ld	r8, Z
   151e8:	91 80       	ldd	r9, Z+1	; 0x01
   151ea:	26 ff       	sbrs	r18, 6
   151ec:	03 c0       	rjmp	.+6      	; 0x151f4 <vfprintf+0x168>
   151ee:	6e 2d       	mov	r22, r14
   151f0:	70 e0       	ldi	r23, 0x00	; 0
   151f2:	02 c0       	rjmp	.+4      	; 0x151f8 <vfprintf+0x16c>
   151f4:	6f ef       	ldi	r22, 0xFF	; 255
   151f6:	7f ef       	ldi	r23, 0xFF	; 255
   151f8:	c4 01       	movw	r24, r8
   151fa:	2c 87       	std	Y+12, r18	; 0x0c
   151fc:	0e 94 90 aa 	call	0x15520	; 0x15520 <strnlen>
   15200:	5c 01       	movw	r10, r24
   15202:	83 01       	movw	r16, r6
   15204:	2c 85       	ldd	r18, Y+12	; 0x0c
   15206:	2f 77       	andi	r18, 0x7F	; 127
   15208:	17 c0       	rjmp	.+46     	; 0x15238 <vfprintf+0x1ac>
   1520a:	52 e0       	ldi	r21, 0x02	; 2
   1520c:	65 2e       	mov	r6, r21
   1520e:	71 2c       	mov	r7, r1
   15210:	60 0e       	add	r6, r16
   15212:	71 1e       	adc	r7, r17
   15214:	f8 01       	movw	r30, r16
   15216:	80 80       	ld	r8, Z
   15218:	91 80       	ldd	r9, Z+1	; 0x01
   1521a:	26 ff       	sbrs	r18, 6
   1521c:	03 c0       	rjmp	.+6      	; 0x15224 <vfprintf+0x198>
   1521e:	6e 2d       	mov	r22, r14
   15220:	70 e0       	ldi	r23, 0x00	; 0
   15222:	02 c0       	rjmp	.+4      	; 0x15228 <vfprintf+0x19c>
   15224:	6f ef       	ldi	r22, 0xFF	; 255
   15226:	7f ef       	ldi	r23, 0xFF	; 255
   15228:	c4 01       	movw	r24, r8
   1522a:	2c 87       	std	Y+12, r18	; 0x0c
   1522c:	0e 94 85 aa 	call	0x1550a	; 0x1550a <strnlen_P>
   15230:	5c 01       	movw	r10, r24
   15232:	2c 85       	ldd	r18, Y+12	; 0x0c
   15234:	20 68       	ori	r18, 0x80	; 128
   15236:	83 01       	movw	r16, r6
   15238:	23 fd       	sbrc	r18, 3
   1523a:	20 c0       	rjmp	.+64     	; 0x1527c <vfprintf+0x1f0>
   1523c:	08 c0       	rjmp	.+16     	; 0x1524e <vfprintf+0x1c2>
   1523e:	80 e2       	ldi	r24, 0x20	; 32
   15240:	90 e0       	ldi	r25, 0x00	; 0
   15242:	b6 01       	movw	r22, r12
   15244:	2c 87       	std	Y+12, r18	; 0x0c
   15246:	0e 94 9b aa 	call	0x15536	; 0x15536 <fputc>
   1524a:	fa 94       	dec	r15
   1524c:	2c 85       	ldd	r18, Y+12	; 0x0c
   1524e:	8f 2d       	mov	r24, r15
   15250:	90 e0       	ldi	r25, 0x00	; 0
   15252:	a8 16       	cp	r10, r24
   15254:	b9 06       	cpc	r11, r25
   15256:	98 f3       	brcs	.-26     	; 0x1523e <vfprintf+0x1b2>
   15258:	11 c0       	rjmp	.+34     	; 0x1527c <vfprintf+0x1f0>
   1525a:	f4 01       	movw	r30, r8
   1525c:	27 fd       	sbrc	r18, 7
   1525e:	85 91       	lpm	r24, Z+
   15260:	27 ff       	sbrs	r18, 7
   15262:	81 91       	ld	r24, Z+
   15264:	4f 01       	movw	r8, r30
   15266:	90 e0       	ldi	r25, 0x00	; 0
   15268:	b6 01       	movw	r22, r12
   1526a:	2c 87       	std	Y+12, r18	; 0x0c
   1526c:	0e 94 9b aa 	call	0x15536	; 0x15536 <fputc>
   15270:	2c 85       	ldd	r18, Y+12	; 0x0c
   15272:	f1 10       	cpse	r15, r1
   15274:	fa 94       	dec	r15
   15276:	08 94       	sec
   15278:	a1 08       	sbc	r10, r1
   1527a:	b1 08       	sbc	r11, r1
   1527c:	a1 14       	cp	r10, r1
   1527e:	b1 04       	cpc	r11, r1
   15280:	61 f7       	brne	.-40     	; 0x1525a <vfprintf+0x1ce>
   15282:	f1 c0       	rjmp	.+482    	; 0x15466 <vfprintf+0x3da>
   15284:	84 36       	cpi	r24, 0x64	; 100
   15286:	11 f0       	breq	.+4      	; 0x1528c <vfprintf+0x200>
   15288:	89 36       	cpi	r24, 0x69	; 105
   1528a:	49 f5       	brne	.+82     	; 0x152de <vfprintf+0x252>
   1528c:	27 ff       	sbrs	r18, 7
   1528e:	08 c0       	rjmp	.+16     	; 0x152a0 <vfprintf+0x214>
   15290:	f8 01       	movw	r30, r16
   15292:	60 81       	ld	r22, Z
   15294:	71 81       	ldd	r23, Z+1	; 0x01
   15296:	82 81       	ldd	r24, Z+2	; 0x02
   15298:	93 81       	ldd	r25, Z+3	; 0x03
   1529a:	0c 5f       	subi	r16, 0xFC	; 252
   1529c:	1f 4f       	sbci	r17, 0xFF	; 255
   1529e:	09 c0       	rjmp	.+18     	; 0x152b2 <vfprintf+0x226>
   152a0:	f8 01       	movw	r30, r16
   152a2:	60 81       	ld	r22, Z
   152a4:	71 81       	ldd	r23, Z+1	; 0x01
   152a6:	88 27       	eor	r24, r24
   152a8:	77 fd       	sbrc	r23, 7
   152aa:	80 95       	com	r24
   152ac:	98 2f       	mov	r25, r24
   152ae:	0e 5f       	subi	r16, 0xFE	; 254
   152b0:	1f 4f       	sbci	r17, 0xFF	; 255
   152b2:	4f e6       	ldi	r20, 0x6F	; 111
   152b4:	b4 2e       	mov	r11, r20
   152b6:	b2 22       	and	r11, r18
   152b8:	97 ff       	sbrs	r25, 7
   152ba:	09 c0       	rjmp	.+18     	; 0x152ce <vfprintf+0x242>
   152bc:	90 95       	com	r25
   152be:	80 95       	com	r24
   152c0:	70 95       	com	r23
   152c2:	61 95       	neg	r22
   152c4:	7f 4f       	sbci	r23, 0xFF	; 255
   152c6:	8f 4f       	sbci	r24, 0xFF	; 255
   152c8:	9f 4f       	sbci	r25, 0xFF	; 255
   152ca:	f0 e8       	ldi	r31, 0x80	; 128
   152cc:	bf 2a       	or	r11, r31
   152ce:	a2 01       	movw	r20, r4
   152d0:	2a e0       	ldi	r18, 0x0A	; 10
   152d2:	30 e0       	ldi	r19, 0x00	; 0
   152d4:	0e 94 c7 aa 	call	0x1558e	; 0x1558e <__ultoa_invert>
   152d8:	78 2e       	mov	r7, r24
   152da:	74 18       	sub	r7, r4
   152dc:	45 c0       	rjmp	.+138    	; 0x15368 <vfprintf+0x2dc>
   152de:	85 37       	cpi	r24, 0x75	; 117
   152e0:	31 f4       	brne	.+12     	; 0x152ee <vfprintf+0x262>
   152e2:	3f ee       	ldi	r19, 0xEF	; 239
   152e4:	b3 2e       	mov	r11, r19
   152e6:	b2 22       	and	r11, r18
   152e8:	2a e0       	ldi	r18, 0x0A	; 10
   152ea:	30 e0       	ldi	r19, 0x00	; 0
   152ec:	25 c0       	rjmp	.+74     	; 0x15338 <vfprintf+0x2ac>
   152ee:	99 ef       	ldi	r25, 0xF9	; 249
   152f0:	b9 2e       	mov	r11, r25
   152f2:	b2 22       	and	r11, r18
   152f4:	8f 36       	cpi	r24, 0x6F	; 111
   152f6:	c1 f0       	breq	.+48     	; 0x15328 <vfprintf+0x29c>
   152f8:	80 37       	cpi	r24, 0x70	; 112
   152fa:	20 f4       	brcc	.+8      	; 0x15304 <vfprintf+0x278>
   152fc:	88 35       	cpi	r24, 0x58	; 88
   152fe:	09 f0       	breq	.+2      	; 0x15302 <vfprintf+0x276>
   15300:	b5 c0       	rjmp	.+362    	; 0x1546c <vfprintf+0x3e0>
   15302:	0d c0       	rjmp	.+26     	; 0x1531e <vfprintf+0x292>
   15304:	80 37       	cpi	r24, 0x70	; 112
   15306:	21 f0       	breq	.+8      	; 0x15310 <vfprintf+0x284>
   15308:	88 37       	cpi	r24, 0x78	; 120
   1530a:	09 f0       	breq	.+2      	; 0x1530e <vfprintf+0x282>
   1530c:	af c0       	rjmp	.+350    	; 0x1546c <vfprintf+0x3e0>
   1530e:	02 c0       	rjmp	.+4      	; 0x15314 <vfprintf+0x288>
   15310:	20 e1       	ldi	r18, 0x10	; 16
   15312:	b2 2a       	or	r11, r18
   15314:	b4 fe       	sbrs	r11, 4
   15316:	0b c0       	rjmp	.+22     	; 0x1532e <vfprintf+0x2a2>
   15318:	84 e0       	ldi	r24, 0x04	; 4
   1531a:	b8 2a       	or	r11, r24
   1531c:	08 c0       	rjmp	.+16     	; 0x1532e <vfprintf+0x2a2>
   1531e:	b4 fe       	sbrs	r11, 4
   15320:	09 c0       	rjmp	.+18     	; 0x15334 <vfprintf+0x2a8>
   15322:	e6 e0       	ldi	r30, 0x06	; 6
   15324:	be 2a       	or	r11, r30
   15326:	06 c0       	rjmp	.+12     	; 0x15334 <vfprintf+0x2a8>
   15328:	28 e0       	ldi	r18, 0x08	; 8
   1532a:	30 e0       	ldi	r19, 0x00	; 0
   1532c:	05 c0       	rjmp	.+10     	; 0x15338 <vfprintf+0x2ac>
   1532e:	20 e1       	ldi	r18, 0x10	; 16
   15330:	30 e0       	ldi	r19, 0x00	; 0
   15332:	02 c0       	rjmp	.+4      	; 0x15338 <vfprintf+0x2ac>
   15334:	20 e1       	ldi	r18, 0x10	; 16
   15336:	32 e0       	ldi	r19, 0x02	; 2
   15338:	b7 fe       	sbrs	r11, 7
   1533a:	08 c0       	rjmp	.+16     	; 0x1534c <vfprintf+0x2c0>
   1533c:	f8 01       	movw	r30, r16
   1533e:	60 81       	ld	r22, Z
   15340:	71 81       	ldd	r23, Z+1	; 0x01
   15342:	82 81       	ldd	r24, Z+2	; 0x02
   15344:	93 81       	ldd	r25, Z+3	; 0x03
   15346:	0c 5f       	subi	r16, 0xFC	; 252
   15348:	1f 4f       	sbci	r17, 0xFF	; 255
   1534a:	07 c0       	rjmp	.+14     	; 0x1535a <vfprintf+0x2ce>
   1534c:	f8 01       	movw	r30, r16
   1534e:	60 81       	ld	r22, Z
   15350:	71 81       	ldd	r23, Z+1	; 0x01
   15352:	80 e0       	ldi	r24, 0x00	; 0
   15354:	90 e0       	ldi	r25, 0x00	; 0
   15356:	0e 5f       	subi	r16, 0xFE	; 254
   15358:	1f 4f       	sbci	r17, 0xFF	; 255
   1535a:	a2 01       	movw	r20, r4
   1535c:	0e 94 c7 aa 	call	0x1558e	; 0x1558e <__ultoa_invert>
   15360:	78 2e       	mov	r7, r24
   15362:	74 18       	sub	r7, r4
   15364:	ff e7       	ldi	r31, 0x7F	; 127
   15366:	bf 22       	and	r11, r31
   15368:	b6 fe       	sbrs	r11, 6
   1536a:	0b c0       	rjmp	.+22     	; 0x15382 <vfprintf+0x2f6>
   1536c:	2e ef       	ldi	r18, 0xFE	; 254
   1536e:	b2 22       	and	r11, r18
   15370:	7e 14       	cp	r7, r14
   15372:	38 f4       	brcc	.+14     	; 0x15382 <vfprintf+0x2f6>
   15374:	b4 fe       	sbrs	r11, 4
   15376:	07 c0       	rjmp	.+14     	; 0x15386 <vfprintf+0x2fa>
   15378:	b2 fc       	sbrc	r11, 2
   1537a:	05 c0       	rjmp	.+10     	; 0x15386 <vfprintf+0x2fa>
   1537c:	8f ee       	ldi	r24, 0xEF	; 239
   1537e:	b8 22       	and	r11, r24
   15380:	02 c0       	rjmp	.+4      	; 0x15386 <vfprintf+0x2fa>
   15382:	a7 2c       	mov	r10, r7
   15384:	01 c0       	rjmp	.+2      	; 0x15388 <vfprintf+0x2fc>
   15386:	ae 2c       	mov	r10, r14
   15388:	8b 2d       	mov	r24, r11
   1538a:	90 e0       	ldi	r25, 0x00	; 0
   1538c:	b4 fe       	sbrs	r11, 4
   1538e:	0d c0       	rjmp	.+26     	; 0x153aa <vfprintf+0x31e>
   15390:	fe 01       	movw	r30, r28
   15392:	e7 0d       	add	r30, r7
   15394:	f1 1d       	adc	r31, r1
   15396:	20 81       	ld	r18, Z
   15398:	20 33       	cpi	r18, 0x30	; 48
   1539a:	19 f4       	brne	.+6      	; 0x153a2 <vfprintf+0x316>
   1539c:	e9 ee       	ldi	r30, 0xE9	; 233
   1539e:	be 22       	and	r11, r30
   153a0:	09 c0       	rjmp	.+18     	; 0x153b4 <vfprintf+0x328>
   153a2:	a3 94       	inc	r10
   153a4:	b2 fe       	sbrs	r11, 2
   153a6:	06 c0       	rjmp	.+12     	; 0x153b4 <vfprintf+0x328>
   153a8:	04 c0       	rjmp	.+8      	; 0x153b2 <vfprintf+0x326>
   153aa:	86 78       	andi	r24, 0x86	; 134
   153ac:	90 70       	andi	r25, 0x00	; 0
   153ae:	00 97       	sbiw	r24, 0x00	; 0
   153b0:	09 f0       	breq	.+2      	; 0x153b4 <vfprintf+0x328>
   153b2:	a3 94       	inc	r10
   153b4:	8b 2c       	mov	r8, r11
   153b6:	99 24       	eor	r9, r9
   153b8:	b3 fc       	sbrc	r11, 3
   153ba:	14 c0       	rjmp	.+40     	; 0x153e4 <vfprintf+0x358>
   153bc:	b0 fe       	sbrs	r11, 0
   153be:	0f c0       	rjmp	.+30     	; 0x153de <vfprintf+0x352>
   153c0:	af 14       	cp	r10, r15
   153c2:	28 f4       	brcc	.+10     	; 0x153ce <vfprintf+0x342>
   153c4:	e7 2c       	mov	r14, r7
   153c6:	ef 0c       	add	r14, r15
   153c8:	ea 18       	sub	r14, r10
   153ca:	af 2c       	mov	r10, r15
   153cc:	08 c0       	rjmp	.+16     	; 0x153de <vfprintf+0x352>
   153ce:	e7 2c       	mov	r14, r7
   153d0:	06 c0       	rjmp	.+12     	; 0x153de <vfprintf+0x352>
   153d2:	80 e2       	ldi	r24, 0x20	; 32
   153d4:	90 e0       	ldi	r25, 0x00	; 0
   153d6:	b6 01       	movw	r22, r12
   153d8:	0e 94 9b aa 	call	0x15536	; 0x15536 <fputc>
   153dc:	a3 94       	inc	r10
   153de:	af 14       	cp	r10, r15
   153e0:	c0 f3       	brcs	.-16     	; 0x153d2 <vfprintf+0x346>
   153e2:	04 c0       	rjmp	.+8      	; 0x153ec <vfprintf+0x360>
   153e4:	af 14       	cp	r10, r15
   153e6:	10 f4       	brcc	.+4      	; 0x153ec <vfprintf+0x360>
   153e8:	fa 18       	sub	r15, r10
   153ea:	01 c0       	rjmp	.+2      	; 0x153ee <vfprintf+0x362>
   153ec:	ff 24       	eor	r15, r15
   153ee:	84 fe       	sbrs	r8, 4
   153f0:	0f c0       	rjmp	.+30     	; 0x15410 <vfprintf+0x384>
   153f2:	80 e3       	ldi	r24, 0x30	; 48
   153f4:	90 e0       	ldi	r25, 0x00	; 0
   153f6:	b6 01       	movw	r22, r12
   153f8:	0e 94 9b aa 	call	0x15536	; 0x15536 <fputc>
   153fc:	82 fe       	sbrs	r8, 2
   153fe:	1f c0       	rjmp	.+62     	; 0x1543e <vfprintf+0x3b2>
   15400:	81 fe       	sbrs	r8, 1
   15402:	03 c0       	rjmp	.+6      	; 0x1540a <vfprintf+0x37e>
   15404:	88 e5       	ldi	r24, 0x58	; 88
   15406:	90 e0       	ldi	r25, 0x00	; 0
   15408:	10 c0       	rjmp	.+32     	; 0x1542a <vfprintf+0x39e>
   1540a:	88 e7       	ldi	r24, 0x78	; 120
   1540c:	90 e0       	ldi	r25, 0x00	; 0
   1540e:	0d c0       	rjmp	.+26     	; 0x1542a <vfprintf+0x39e>
   15410:	c4 01       	movw	r24, r8
   15412:	86 78       	andi	r24, 0x86	; 134
   15414:	90 70       	andi	r25, 0x00	; 0
   15416:	00 97       	sbiw	r24, 0x00	; 0
   15418:	91 f0       	breq	.+36     	; 0x1543e <vfprintf+0x3b2>
   1541a:	81 fc       	sbrc	r8, 1
   1541c:	02 c0       	rjmp	.+4      	; 0x15422 <vfprintf+0x396>
   1541e:	80 e2       	ldi	r24, 0x20	; 32
   15420:	01 c0       	rjmp	.+2      	; 0x15424 <vfprintf+0x398>
   15422:	8b e2       	ldi	r24, 0x2B	; 43
   15424:	b7 fc       	sbrc	r11, 7
   15426:	8d e2       	ldi	r24, 0x2D	; 45
   15428:	90 e0       	ldi	r25, 0x00	; 0
   1542a:	b6 01       	movw	r22, r12
   1542c:	0e 94 9b aa 	call	0x15536	; 0x15536 <fputc>
   15430:	06 c0       	rjmp	.+12     	; 0x1543e <vfprintf+0x3b2>
   15432:	80 e3       	ldi	r24, 0x30	; 48
   15434:	90 e0       	ldi	r25, 0x00	; 0
   15436:	b6 01       	movw	r22, r12
   15438:	0e 94 9b aa 	call	0x15536	; 0x15536 <fputc>
   1543c:	ea 94       	dec	r14
   1543e:	7e 14       	cp	r7, r14
   15440:	c0 f3       	brcs	.-16     	; 0x15432 <vfprintf+0x3a6>
   15442:	7a 94       	dec	r7
   15444:	f2 01       	movw	r30, r4
   15446:	e7 0d       	add	r30, r7
   15448:	f1 1d       	adc	r31, r1
   1544a:	80 81       	ld	r24, Z
   1544c:	90 e0       	ldi	r25, 0x00	; 0
   1544e:	b6 01       	movw	r22, r12
   15450:	0e 94 9b aa 	call	0x15536	; 0x15536 <fputc>
   15454:	77 20       	and	r7, r7
   15456:	a9 f7       	brne	.-22     	; 0x15442 <vfprintf+0x3b6>
   15458:	06 c0       	rjmp	.+12     	; 0x15466 <vfprintf+0x3da>
   1545a:	80 e2       	ldi	r24, 0x20	; 32
   1545c:	90 e0       	ldi	r25, 0x00	; 0
   1545e:	b6 01       	movw	r22, r12
   15460:	0e 94 9b aa 	call	0x15536	; 0x15536 <fputc>
   15464:	fa 94       	dec	r15
   15466:	ff 20       	and	r15, r15
   15468:	c1 f7       	brne	.-16     	; 0x1545a <vfprintf+0x3ce>
   1546a:	37 ce       	rjmp	.-914    	; 0x150da <vfprintf+0x4e>
   1546c:	f6 01       	movw	r30, r12
   1546e:	26 81       	ldd	r18, Z+6	; 0x06
   15470:	37 81       	ldd	r19, Z+7	; 0x07
   15472:	02 c0       	rjmp	.+4      	; 0x15478 <vfprintf+0x3ec>
   15474:	2f ef       	ldi	r18, 0xFF	; 255
   15476:	3f ef       	ldi	r19, 0xFF	; 255
   15478:	c9 01       	movw	r24, r18
   1547a:	2c 96       	adiw	r28, 0x0c	; 12
   1547c:	0f b6       	in	r0, 0x3f	; 63
   1547e:	f8 94       	cli
   15480:	de bf       	out	0x3e, r29	; 62
   15482:	0f be       	out	0x3f, r0	; 63
   15484:	cd bf       	out	0x3d, r28	; 61
   15486:	cf 91       	pop	r28
   15488:	df 91       	pop	r29
   1548a:	1f 91       	pop	r17
   1548c:	0f 91       	pop	r16
   1548e:	ff 90       	pop	r15
   15490:	ef 90       	pop	r14
   15492:	df 90       	pop	r13
   15494:	cf 90       	pop	r12
   15496:	bf 90       	pop	r11
   15498:	af 90       	pop	r10
   1549a:	9f 90       	pop	r9
   1549c:	8f 90       	pop	r8
   1549e:	7f 90       	pop	r7
   154a0:	6f 90       	pop	r6
   154a2:	5f 90       	pop	r5
   154a4:	4f 90       	pop	r4
   154a6:	3f 90       	pop	r3
   154a8:	2f 90       	pop	r2
   154aa:	08 95       	ret

000154ac <__eerd_block_m128>:
   154ac:	dc 01       	movw	r26, r24
   154ae:	cb 01       	movw	r24, r22

000154b0 <__eerd_blraw_m128>:
   154b0:	fc 01       	movw	r30, r24
   154b2:	e1 99       	sbic	0x1c, 1	; 28
   154b4:	fe cf       	rjmp	.-4      	; 0x154b2 <__eerd_blraw_m128+0x2>
   154b6:	06 c0       	rjmp	.+12     	; 0x154c4 <__eerd_blraw_m128+0x14>
   154b8:	ff bb       	out	0x1f, r31	; 31
   154ba:	ee bb       	out	0x1e, r30	; 30
   154bc:	e0 9a       	sbi	0x1c, 0	; 28
   154be:	31 96       	adiw	r30, 0x01	; 1
   154c0:	0d b2       	in	r0, 0x1d	; 29
   154c2:	0d 92       	st	X+, r0
   154c4:	41 50       	subi	r20, 0x01	; 1
   154c6:	50 40       	sbci	r21, 0x00	; 0
   154c8:	b8 f7       	brcc	.-18     	; 0x154b8 <__eerd_blraw_m128+0x8>
   154ca:	08 95       	ret

000154cc <__eerd_byte_m128>:
   154cc:	e1 99       	sbic	0x1c, 1	; 28
   154ce:	fe cf       	rjmp	.-4      	; 0x154cc <__eerd_byte_m128>
   154d0:	9f bb       	out	0x1f, r25	; 31
   154d2:	8e bb       	out	0x1e, r24	; 30
   154d4:	e0 9a       	sbi	0x1c, 0	; 28
   154d6:	99 27       	eor	r25, r25
   154d8:	8d b3       	in	r24, 0x1d	; 29
   154da:	08 95       	ret

000154dc <__eewr_block_m128>:
   154dc:	dc 01       	movw	r26, r24
   154de:	cb 01       	movw	r24, r22
   154e0:	03 c0       	rjmp	.+6      	; 0x154e8 <__eewr_block_m128+0xc>
   154e2:	2d 91       	ld	r18, X+
   154e4:	0e 94 79 aa 	call	0x154f2	; 0x154f2 <__eewr_r18_m128>
   154e8:	41 50       	subi	r20, 0x01	; 1
   154ea:	50 40       	sbci	r21, 0x00	; 0
   154ec:	d0 f7       	brcc	.-12     	; 0x154e2 <__eewr_block_m128+0x6>
   154ee:	08 95       	ret

000154f0 <__eewr_byte_m128>:
   154f0:	26 2f       	mov	r18, r22

000154f2 <__eewr_r18_m128>:
   154f2:	e1 99       	sbic	0x1c, 1	; 28
   154f4:	fe cf       	rjmp	.-4      	; 0x154f2 <__eewr_r18_m128>
   154f6:	9f bb       	out	0x1f, r25	; 31
   154f8:	8e bb       	out	0x1e, r24	; 30
   154fa:	2d bb       	out	0x1d, r18	; 29
   154fc:	0f b6       	in	r0, 0x3f	; 63
   154fe:	f8 94       	cli
   15500:	e2 9a       	sbi	0x1c, 2	; 28
   15502:	e1 9a       	sbi	0x1c, 1	; 28
   15504:	0f be       	out	0x3f, r0	; 63
   15506:	01 96       	adiw	r24, 0x01	; 1
   15508:	08 95       	ret

0001550a <strnlen_P>:
   1550a:	fc 01       	movw	r30, r24
   1550c:	05 90       	lpm	r0, Z+
   1550e:	61 50       	subi	r22, 0x01	; 1
   15510:	70 40       	sbci	r23, 0x00	; 0
   15512:	01 10       	cpse	r0, r1
   15514:	d8 f7       	brcc	.-10     	; 0x1550c <strnlen_P+0x2>
   15516:	80 95       	com	r24
   15518:	90 95       	com	r25
   1551a:	8e 0f       	add	r24, r30
   1551c:	9f 1f       	adc	r25, r31
   1551e:	08 95       	ret

00015520 <strnlen>:
   15520:	fc 01       	movw	r30, r24
   15522:	61 50       	subi	r22, 0x01	; 1
   15524:	70 40       	sbci	r23, 0x00	; 0
   15526:	01 90       	ld	r0, Z+
   15528:	01 10       	cpse	r0, r1
   1552a:	d8 f7       	brcc	.-10     	; 0x15522 <strnlen+0x2>
   1552c:	80 95       	com	r24
   1552e:	90 95       	com	r25
   15530:	8e 0f       	add	r24, r30
   15532:	9f 1f       	adc	r25, r31
   15534:	08 95       	ret

00015536 <fputc>:
   15536:	0f 93       	push	r16
   15538:	1f 93       	push	r17
   1553a:	cf 93       	push	r28
   1553c:	df 93       	push	r29
   1553e:	8c 01       	movw	r16, r24
   15540:	eb 01       	movw	r28, r22
   15542:	8b 81       	ldd	r24, Y+3	; 0x03
   15544:	81 ff       	sbrs	r24, 1
   15546:	1b c0       	rjmp	.+54     	; 0x1557e <fputc+0x48>
   15548:	82 ff       	sbrs	r24, 2
   1554a:	0d c0       	rjmp	.+26     	; 0x15566 <fputc+0x30>
   1554c:	2e 81       	ldd	r18, Y+6	; 0x06
   1554e:	3f 81       	ldd	r19, Y+7	; 0x07
   15550:	8c 81       	ldd	r24, Y+4	; 0x04
   15552:	9d 81       	ldd	r25, Y+5	; 0x05
   15554:	28 17       	cp	r18, r24
   15556:	39 07       	cpc	r19, r25
   15558:	64 f4       	brge	.+24     	; 0x15572 <fputc+0x3c>
   1555a:	e8 81       	ld	r30, Y
   1555c:	f9 81       	ldd	r31, Y+1	; 0x01
   1555e:	01 93       	st	Z+, r16
   15560:	f9 83       	std	Y+1, r31	; 0x01
   15562:	e8 83       	st	Y, r30
   15564:	06 c0       	rjmp	.+12     	; 0x15572 <fputc+0x3c>
   15566:	e8 85       	ldd	r30, Y+8	; 0x08
   15568:	f9 85       	ldd	r31, Y+9	; 0x09
   1556a:	80 2f       	mov	r24, r16
   1556c:	09 95       	icall
   1556e:	00 97       	sbiw	r24, 0x00	; 0
   15570:	31 f4       	brne	.+12     	; 0x1557e <fputc+0x48>
   15572:	8e 81       	ldd	r24, Y+6	; 0x06
   15574:	9f 81       	ldd	r25, Y+7	; 0x07
   15576:	01 96       	adiw	r24, 0x01	; 1
   15578:	9f 83       	std	Y+7, r25	; 0x07
   1557a:	8e 83       	std	Y+6, r24	; 0x06
   1557c:	02 c0       	rjmp	.+4      	; 0x15582 <fputc+0x4c>
   1557e:	0f ef       	ldi	r16, 0xFF	; 255
   15580:	1f ef       	ldi	r17, 0xFF	; 255
   15582:	c8 01       	movw	r24, r16
   15584:	df 91       	pop	r29
   15586:	cf 91       	pop	r28
   15588:	1f 91       	pop	r17
   1558a:	0f 91       	pop	r16
   1558c:	08 95       	ret

0001558e <__ultoa_invert>:
   1558e:	fa 01       	movw	r30, r20
   15590:	aa 27       	eor	r26, r26
   15592:	28 30       	cpi	r18, 0x08	; 8
   15594:	51 f1       	breq	.+84     	; 0x155ea <__ultoa_invert+0x5c>
   15596:	20 31       	cpi	r18, 0x10	; 16
   15598:	81 f1       	breq	.+96     	; 0x155fa <__ultoa_invert+0x6c>
   1559a:	e8 94       	clt
   1559c:	6f 93       	push	r22
   1559e:	6e 7f       	andi	r22, 0xFE	; 254
   155a0:	6e 5f       	subi	r22, 0xFE	; 254
   155a2:	7f 4f       	sbci	r23, 0xFF	; 255
   155a4:	8f 4f       	sbci	r24, 0xFF	; 255
   155a6:	9f 4f       	sbci	r25, 0xFF	; 255
   155a8:	af 4f       	sbci	r26, 0xFF	; 255
   155aa:	b1 e0       	ldi	r27, 0x01	; 1
   155ac:	3e d0       	rcall	.+124    	; 0x1562a <__ultoa_invert+0x9c>
   155ae:	b4 e0       	ldi	r27, 0x04	; 4
   155b0:	3c d0       	rcall	.+120    	; 0x1562a <__ultoa_invert+0x9c>
   155b2:	67 0f       	add	r22, r23
   155b4:	78 1f       	adc	r23, r24
   155b6:	89 1f       	adc	r24, r25
   155b8:	9a 1f       	adc	r25, r26
   155ba:	a1 1d       	adc	r26, r1
   155bc:	68 0f       	add	r22, r24
   155be:	79 1f       	adc	r23, r25
   155c0:	8a 1f       	adc	r24, r26
   155c2:	91 1d       	adc	r25, r1
   155c4:	a1 1d       	adc	r26, r1
   155c6:	6a 0f       	add	r22, r26
   155c8:	71 1d       	adc	r23, r1
   155ca:	81 1d       	adc	r24, r1
   155cc:	91 1d       	adc	r25, r1
   155ce:	a1 1d       	adc	r26, r1
   155d0:	20 d0       	rcall	.+64     	; 0x15612 <__ultoa_invert+0x84>
   155d2:	09 f4       	brne	.+2      	; 0x155d6 <__ultoa_invert+0x48>
   155d4:	68 94       	set
   155d6:	3f 91       	pop	r19
   155d8:	2a e0       	ldi	r18, 0x0A	; 10
   155da:	26 9f       	mul	r18, r22
   155dc:	11 24       	eor	r1, r1
   155de:	30 19       	sub	r19, r0
   155e0:	30 5d       	subi	r19, 0xD0	; 208
   155e2:	31 93       	st	Z+, r19
   155e4:	de f6       	brtc	.-74     	; 0x1559c <__ultoa_invert+0xe>
   155e6:	cf 01       	movw	r24, r30
   155e8:	08 95       	ret
   155ea:	46 2f       	mov	r20, r22
   155ec:	47 70       	andi	r20, 0x07	; 7
   155ee:	40 5d       	subi	r20, 0xD0	; 208
   155f0:	41 93       	st	Z+, r20
   155f2:	b3 e0       	ldi	r27, 0x03	; 3
   155f4:	0f d0       	rcall	.+30     	; 0x15614 <__ultoa_invert+0x86>
   155f6:	c9 f7       	brne	.-14     	; 0x155ea <__ultoa_invert+0x5c>
   155f8:	f6 cf       	rjmp	.-20     	; 0x155e6 <__ultoa_invert+0x58>
   155fa:	46 2f       	mov	r20, r22
   155fc:	4f 70       	andi	r20, 0x0F	; 15
   155fe:	40 5d       	subi	r20, 0xD0	; 208
   15600:	4a 33       	cpi	r20, 0x3A	; 58
   15602:	18 f0       	brcs	.+6      	; 0x1560a <__ultoa_invert+0x7c>
   15604:	49 5d       	subi	r20, 0xD9	; 217
   15606:	31 fd       	sbrc	r19, 1
   15608:	40 52       	subi	r20, 0x20	; 32
   1560a:	41 93       	st	Z+, r20
   1560c:	02 d0       	rcall	.+4      	; 0x15612 <__ultoa_invert+0x84>
   1560e:	a9 f7       	brne	.-22     	; 0x155fa <__ultoa_invert+0x6c>
   15610:	ea cf       	rjmp	.-44     	; 0x155e6 <__ultoa_invert+0x58>
   15612:	b4 e0       	ldi	r27, 0x04	; 4
   15614:	a6 95       	lsr	r26
   15616:	97 95       	ror	r25
   15618:	87 95       	ror	r24
   1561a:	77 95       	ror	r23
   1561c:	67 95       	ror	r22
   1561e:	ba 95       	dec	r27
   15620:	c9 f7       	brne	.-14     	; 0x15614 <__ultoa_invert+0x86>
   15622:	00 97       	sbiw	r24, 0x00	; 0
   15624:	61 05       	cpc	r22, r1
   15626:	71 05       	cpc	r23, r1
   15628:	08 95       	ret
   1562a:	9b 01       	movw	r18, r22
   1562c:	ac 01       	movw	r20, r24
   1562e:	0a 2e       	mov	r0, r26
   15630:	06 94       	lsr	r0
   15632:	57 95       	ror	r21
   15634:	47 95       	ror	r20
   15636:	37 95       	ror	r19
   15638:	27 95       	ror	r18
   1563a:	ba 95       	dec	r27
   1563c:	c9 f7       	brne	.-14     	; 0x15630 <__ultoa_invert+0xa2>
   1563e:	62 0f       	add	r22, r18
   15640:	73 1f       	adc	r23, r19
   15642:	84 1f       	adc	r24, r20
   15644:	95 1f       	adc	r25, r21
   15646:	a0 1d       	adc	r26, r0
   15648:	08 95       	ret

0001564a <_exit>:
   1564a:	f8 94       	cli

0001564c <__stop_program>:
   1564c:	ff cf       	rjmp	.-2      	; 0x1564c <__stop_program>
