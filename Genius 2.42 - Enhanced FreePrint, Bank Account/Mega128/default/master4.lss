
master4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800100  00015b14  00015bc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00015b14  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000b57  0080015c  0080015c  00015c24  2**0
                  ALLOC
  3 .eeprom       00000857  00810000  00810000  00015c24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 000000e0  00000000  00000000  0001647b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000024d7  00000000  00000000  0001655b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00010394  00000000  00000000  00018a32  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b11  00000000  00000000  00028dc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000c409  00000000  00000000  000298d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001190  00000000  00000000  00035ce0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000525e  00000000  00000000  00036e70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006ca4  00000000  00000000  0003c0ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000498  00000000  00000000  00042d72  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f8 12 	jmp	0x25f0	; 0x25f0 <__ctors_end>
       4:	0c 94 17 13 	jmp	0x262e	; 0x262e <__bad_interrupt>
       8:	0c 94 17 13 	jmp	0x262e	; 0x262e <__bad_interrupt>
       c:	0c 94 17 13 	jmp	0x262e	; 0x262e <__bad_interrupt>
      10:	0c 94 17 13 	jmp	0x262e	; 0x262e <__bad_interrupt>
      14:	0c 94 17 13 	jmp	0x262e	; 0x262e <__bad_interrupt>
      18:	0c 94 17 13 	jmp	0x262e	; 0x262e <__bad_interrupt>
      1c:	0c 94 17 13 	jmp	0x262e	; 0x262e <__bad_interrupt>
      20:	0c 94 17 13 	jmp	0x262e	; 0x262e <__bad_interrupt>
      24:	0c 94 17 13 	jmp	0x262e	; 0x262e <__bad_interrupt>
      28:	0c 94 17 13 	jmp	0x262e	; 0x262e <__bad_interrupt>
      2c:	0c 94 17 13 	jmp	0x262e	; 0x262e <__bad_interrupt>
      30:	0c 94 d2 13 	jmp	0x27a4	; 0x27a4 <__vector_12>
      34:	0c 94 17 13 	jmp	0x262e	; 0x262e <__bad_interrupt>
      38:	0c 94 17 13 	jmp	0x262e	; 0x262e <__bad_interrupt>
      3c:	0c 94 17 13 	jmp	0x262e	; 0x262e <__bad_interrupt>
      40:	0c 94 17 13 	jmp	0x262e	; 0x262e <__bad_interrupt>
      44:	0c 94 0e 67 	jmp	0xce1c	; 0xce1c <__vector_17>
      48:	0c 94 6c 15 	jmp	0x2ad8	; 0x2ad8 <__vector_18>
      4c:	0c 94 17 13 	jmp	0x262e	; 0x262e <__bad_interrupt>
      50:	0c 94 17 13 	jmp	0x262e	; 0x262e <__bad_interrupt>
      54:	0c 94 17 13 	jmp	0x262e	; 0x262e <__bad_interrupt>
      58:	0c 94 17 13 	jmp	0x262e	; 0x262e <__bad_interrupt>
      5c:	0c 94 17 13 	jmp	0x262e	; 0x262e <__bad_interrupt>
      60:	0c 94 17 13 	jmp	0x262e	; 0x262e <__bad_interrupt>
      64:	0c 94 17 13 	jmp	0x262e	; 0x262e <__bad_interrupt>
      68:	0c 94 17 13 	jmp	0x262e	; 0x262e <__bad_interrupt>
      6c:	0c 94 17 13 	jmp	0x262e	; 0x262e <__bad_interrupt>
      70:	0c 94 17 13 	jmp	0x262e	; 0x262e <__bad_interrupt>
      74:	0c 94 17 13 	jmp	0x262e	; 0x262e <__bad_interrupt>
      78:	0c 94 1c 42 	jmp	0x8438	; 0x8438 <__vector_30>
      7c:	0c 94 17 13 	jmp	0x262e	; 0x262e <__bad_interrupt>
      80:	0c 94 17 13 	jmp	0x262e	; 0x262e <__bad_interrupt>
      84:	0c 94 17 13 	jmp	0x262e	; 0x262e <__bad_interrupt>
      88:	0c 94 17 13 	jmp	0x262e	; 0x262e <__bad_interrupt>
      8c:	4d 14       	cp	r4, r13
      8e:	4b 14       	cp	r4, r11
      90:	4f 14       	cp	r4, r15
      92:	51 14       	cp	r5, r1
      94:	53 14       	cp	r5, r3
      96:	55 14       	cp	r5, r5
      98:	57 14       	cp	r5, r7
      9a:	59 14       	cp	r5, r9
      9c:	5b 14       	cp	r5, r11
      9e:	5d 14       	cp	r5, r13
      a0:	5f 14       	cp	r5, r15
      a2:	61 14       	cp	r6, r1
      a4:	63 14       	cp	r6, r3
      a6:	71 14       	cp	r7, r1
      a8:	65 14       	cp	r6, r5
      aa:	71 14       	cp	r7, r1
      ac:	67 14       	cp	r6, r7
      ae:	69 14       	cp	r6, r9
      b0:	71 14       	cp	r7, r1
      b2:	6b 14       	cp	r6, r11
      b4:	6d 14       	cp	r6, r13
      b6:	6f 14       	cp	r6, r15
      b8:	71 14       	cp	r7, r1
      ba:	71 14       	cp	r7, r1
      bc:	65 14       	cp	r6, r5
      be:	57 14       	cp	r5, r7
      c0:	71 14       	cp	r7, r1
      c2:	59 14       	cp	r5, r9
      c4:	5d 14       	cp	r5, r13
      c6:	61 14       	cp	r6, r1
      c8:	3f 73       	andi	r19, 0x3F	; 63
      ca:	5b 73       	andi	r21, 0x3B	; 59
      cc:	64 74       	andi	r22, 0x44	; 68
      ce:	93 74       	andi	r25, 0x43	; 67
      d0:	bc 74       	andi	r27, 0x4C	; 76
      d2:	2f 75       	andi	r18, 0x5F	; 95
      d4:	3e 75       	andi	r19, 0x5E	; 94
      d6:	45 75       	andi	r20, 0x55	; 85
      d8:	81 75       	andi	r24, 0x51	; 81
      da:	a8 75       	andi	r26, 0x58	; 88
      dc:	eb 75       	andi	r30, 0x5B	; 91
      de:	f5 75       	andi	r31, 0x55	; 85
      e0:	b4 75       	andi	r27, 0x54	; 84
      e2:	fb 75       	andi	r31, 0x5B	; 91
      e4:	13 76       	andi	r17, 0x63	; 99
      e6:	0a 76       	andi	r16, 0x6A	; 106
      e8:	0f 76       	andi	r16, 0x6F	; 111
      ea:	6f 73       	andi	r22, 0x3F	; 63
      ec:	fe 73       	andi	r31, 0x3E	; 62
      ee:	20 74       	andi	r18, 0x40	; 64
      f0:	2c 74       	andi	r18, 0x4C	; 76
      f2:	3e 74       	andi	r19, 0x4E	; 78
      f4:	4f 74       	andi	r20, 0x4F	; 79
      f6:	5e 74       	andi	r21, 0x4E	; 78
      f8:	5e 74       	andi	r21, 0x4E	; 78
      fa:	8e 78       	andi	r24, 0x8E	; 142
      fc:	94 78       	andi	r25, 0x84	; 132
      fe:	98 78       	andi	r25, 0x88	; 136
     100:	af 78       	andi	r26, 0x8F	; 143
     102:	c9 78       	andi	r28, 0x89	; 137
     104:	cd 78       	andi	r28, 0x8D	; 141
     106:	f8 78       	andi	r31, 0x88	; 136
     108:	12 79       	andi	r17, 0x92	; 146
     10a:	18 79       	andi	r17, 0x98	; 152
     10c:	20 79       	andi	r18, 0x90	; 144
     10e:	23 79       	andi	r18, 0x93	; 147
     110:	26 79       	andi	r18, 0x96	; 150
     112:	29 79       	andi	r18, 0x99	; 153
     114:	2c 79       	andi	r18, 0x9C	; 156
     116:	2f 79       	andi	r18, 0x9F	; 159
     118:	33 79       	andi	r19, 0x93	; 147
     11a:	36 79       	andi	r19, 0x96	; 150
     11c:	39 79       	andi	r19, 0x99	; 153
     11e:	41 79       	andi	r20, 0x91	; 145
     120:	9b 7f       	andi	r25, 0xFB	; 251
     122:	f0 7f       	andi	r31, 0xF0	; 240
     124:	ff 7f       	andi	r31, 0xFF	; 255
     126:	41 80       	ldd	r4, Z+1	; 0x01
     128:	53 80       	ldd	r5, Z+3	; 0x03
     12a:	68 80       	ld	r6, Y
     12c:	8b 80       	ldd	r8, Y+3	; 0x03
     12e:	41 81       	ldd	r20, Z+1	; 0x01
     130:	4b 81       	ldd	r20, Y+3	; 0x03
     132:	12 88       	ldd	r1, Z+18	; 0x12
     134:	a8 81       	ld	r26, Y
     136:	b0 82       	st	Z, r11
     138:	fc 82       	std	Y+4, r15	; 0x04
     13a:	42 83       	std	Z+2, r20	; 0x02
     13c:	ba 83       	std	Y+2, r27	; 0x02
     13e:	4b 84       	ldd	r4, Y+11	; 0x0b
     140:	6e 84       	ldd	r6, Y+14	; 0x0e
     142:	34 85       	ldd	r19, Z+12	; 0x0c
     144:	5e 85       	ldd	r21, Y+14	; 0x0e
     146:	17 86       	std	Z+15, r1	; 0x0f
     148:	30 86       	std	Z+8, r3	; 0x08
     14a:	2f 87       	std	Y+15, r18	; 0x0f
     14c:	a8 86       	std	Y+8, r10	; 0x08
     14e:	ea 86       	std	Y+10, r14	; 0x0a
     150:	c9 87       	std	Y+9, r28	; 0x09
     152:	f7 87       	std	Z+15, r31	; 0x0f
     154:	12 88       	ldd	r1, Z+18	; 0x12
     156:	35 87       	std	Z+13, r19	; 0x0d
     158:	b8 87       	std	Y+8, r27	; 0x08
     15a:	fc 87       	std	Y+12, r31	; 0x0c
     15c:	03 88       	ldd	r0, Z+19	; 0x13
     15e:	4e 88       	ldd	r4, Y+22	; 0x16
     160:	52 88       	ldd	r5, Z+18	; 0x12
     162:	6e 88       	ldd	r6, Y+22	; 0x16
     164:	4e 8c       	ldd	r4, Y+30	; 0x1e
     166:	4e 8c       	ldd	r4, Y+30	; 0x1e
     168:	4e 8c       	ldd	r4, Y+30	; 0x1e
     16a:	4e 8c       	ldd	r4, Y+30	; 0x1e
     16c:	b7 88       	ldd	r11, Z+23	; 0x17
     16e:	4e 8c       	ldd	r4, Y+30	; 0x1e
     170:	d7 88       	ldd	r13, Z+23	; 0x17
     172:	4e 8c       	ldd	r4, Y+30	; 0x1e
     174:	f4 88       	ldd	r15, Z+20	; 0x14
     176:	7b 89       	ldd	r23, Y+19	; 0x13
     178:	d4 89       	ldd	r29, Z+20	; 0x14
     17a:	f7 89       	ldd	r31, Z+23	; 0x17
     17c:	9a 88       	ldd	r9, Y+18	; 0x12
     17e:	4e 8c       	ldd	r4, Y+30	; 0x1e
     180:	8e 89       	ldd	r24, Y+22	; 0x16
     182:	0f 8a       	std	Y+23, r0	; 0x17
     184:	47 8a       	std	Z+23, r4	; 0x17
     186:	5f 8a       	std	Y+23, r5	; 0x17
     188:	9b 8a       	std	Y+19, r9	; 0x13
     18a:	ab 8a       	std	Y+19, r10	; 0x13
     18c:	ba 8b       	std	Y+18, r27	; 0x12
     18e:	ca 8b       	std	Y+18, r28	; 0x12
     190:	11 8c       	ldd	r1, Z+25	; 0x19
     192:	30 8c       	ldd	r3, Z+24	; 0x18
     194:	42 8c       	ldd	r4, Z+26	; 0x1a
     196:	48 8c       	ldd	r4, Y+24	; 0x18
     198:	4a 8c       	ldd	r4, Y+26	; 0x1a
     19a:	82 92       	st	-Z, r8
     19c:	9a 92       	st	-Y, r9
     19e:	ac 92       	st	X, r10
     1a0:	e1 92       	st	Z+, r14
     1a2:	10 93 26 93 	sts	0x9326, r17
     1a6:	61 93       	st	Z+, r22
     1a8:	99 93       	st	Y+, r25
     1aa:	db 93       	.word	0x93db	; ????
     1ac:	e3 93       	.word	0x93e3	; ????
     1ae:	02 95       	swap	r16
     1b0:	0e 95 3e 95 	call	0x412a7c	; 0x412a7c <__data_load_end+0x3fcf0c>
     1b4:	7b 95       	.word	0x957b	; ????
     1b6:	94 95       	.word	0x9594	; ????
     1b8:	ae 95 ee 95 	call	0x692bdc	; 0x692bdc <__data_load_end+0x67d06c>
     1bc:	f6 92       	.word	0x92f6	; ????
     1be:	b3 93       	.word	0x93b3	; ????
     1c0:	57 95       	ror	r21
     1c2:	7f 93       	push	r23
     1c4:	fb 93       	.word	0x93fb	; ????
     1c6:	48 94       	ses
     1c8:	64 94       	.word	0x9464	; ????
     1ca:	7e 94 ca 94 	call	0x1d2994	; 0x1d2994 <__data_load_end+0x1bce24>
     1ce:	e8 94       	clt
     1d0:	28 96       	adiw	r28, 0x08	; 8
     1d2:	3e 96       	adiw	r30, 0x0e	; 14
     1d4:	43 96       	adiw	r24, 0x13	; 19
     1d6:	7a 96       	adiw	r30, 0x1a	; 26
     1d8:	a9 96       	adiw	r28, 0x29	; 41
     1da:	ee 96       	adiw	r28, 0x3e	; 62
     1dc:	0c 97       	sbiw	r24, 0x0c	; 12
     1de:	2a 97       	sbiw	r28, 0x0a	; 10
     1e0:	64 97       	sbiw	r28, 0x14	; 20
     1e2:	c7 97       	sbiw	r24, 0x37	; 55
     1e4:	db 9b       	sbis	0x1b, 3	; 27
     1e6:	8f 96       	adiw	r24, 0x2f	; 47
     1e8:	04 9c       	mul	r0, r4
     1ea:	ee 9c       	mul	r14, r14
     1ec:	ac 9c       	mul	r10, r12
     1ee:	d5 9c       	mul	r13, r5
     1f0:	24 9d       	mul	r18, r4
     1f2:	08 9d       	mul	r16, r8
     1f4:	3b 9d       	mul	r19, r11
     1f6:	54 9d       	mul	r21, r4
     1f8:	66 9d       	mul	r22, r6
     1fa:	1e 9c       	mul	r1, r14
     1fc:	75 9c       	mul	r7, r5
     1fe:	92 9c       	mul	r9, r2
     200:	d9 97       	sbiw	r26, 0x39	; 57
     202:	f7 97       	sbiw	r30, 0x37	; 55
     204:	1c 98       	cbi	0x03, 4	; 3
     206:	29 98       	cbi	0x05, 1	; 5
     208:	45 98       	cbi	0x08, 5	; 8
     20a:	5a 98       	cbi	0x0b, 2	; 11
     20c:	82 98       	cbi	0x10, 2	; 16
     20e:	97 98       	cbi	0x12, 7	; 18
     210:	bf 98       	cbi	0x17, 7	; 23
     212:	df 98       	cbi	0x1b, 7	; 27
     214:	10 99       	sbic	0x02, 0	; 2
     216:	1d 99       	sbic	0x03, 5	; 3
     218:	76 99       	sbic	0x0e, 6	; 14
     21a:	ed 99       	sbic	0x1d, 5	; 29
     21c:	01 9a       	sbi	0x00, 1	; 0
     21e:	d6 9a       	sbi	0x1a, 6	; 26
     220:	d6 9a       	sbi	0x1a, 6	; 26
     222:	15 9a       	sbi	0x02, 5	; 2
     224:	29 9a       	sbi	0x05, 1	; 5
     226:	31 9a       	sbi	0x06, 1	; 6
     228:	4d 9a       	sbi	0x09, 5	; 9
     22a:	61 9a       	sbi	0x0c, 1	; 12
     22c:	6c 9a       	sbi	0x0d, 4	; 13
     22e:	81 9a       	sbi	0x10, 1	; 16
     230:	96 9a       	sbi	0x12, 6	; 18
     232:	b4 9a       	sbi	0x16, 4	; 22
     234:	d9 9a       	sbi	0x1b, 1	; 27
     236:	ee 9a       	sbi	0x1d, 6	; 29
     238:	03 9b       	sbis	0x00, 3	; 0
     23a:	18 9b       	sbis	0x03, 0	; 3
     23c:	2d 9b       	sbis	0x05, 5	; 5
     23e:	42 9b       	sbis	0x08, 2	; 8
     240:	57 9b       	sbis	0x0a, 7	; 10
     242:	6c 9b       	sbis	0x0d, 4	; 13
     244:	79 9b       	sbis	0x0f, 1	; 15
     246:	8e 9b       	sbis	0x11, 6	; 17
     248:	af 9b       	sbis	0x15, 7	; 21
     24a:	ac a1       	ldd	r26, Y+36	; 0x24
     24c:	af a1       	ldd	r26, Y+39	; 0x27
     24e:	4f a2       	std	Y+39, r4	; 0x27
     250:	5e a2       	std	Y+38, r5	; 0x26
     252:	8f a2       	std	Y+39, r8	; 0x27
     254:	9d a2       	std	Y+37, r9	; 0x25
     256:	c9 a2       	std	Y+33, r12	; 0x21
     258:	6e a2       	std	Y+38, r6	; 0x26
     25a:	7b a2       	std	Y+35, r7	; 0x23
     25c:	85 a2       	std	Z+37, r8	; 0x25
     25e:	d3 a2       	std	Z+35, r13	; 0x23
     260:	e0 a2       	std	Z+32, r14	; 0x20
     262:	eb a2       	std	Y+35, r14	; 0x23
     264:	ee a2       	std	Y+38, r14	; 0x26
     266:	f1 a2       	std	Z+33, r15	; 0x21
     268:	f4 a2       	std	Z+36, r15	; 0x24
     26a:	f7 a2       	std	Z+39, r15	; 0x27
     26c:	fa a2       	std	Y+34, r15	; 0x22
     26e:	fd a2       	std	Y+37, r15	; 0x25
     270:	00 a3       	std	Z+32, r16	; 0x20
     272:	22 a3       	std	Z+34, r18	; 0x22
     274:	10 a3       	std	Z+32, r17	; 0x20
     276:	03 a3       	std	Z+35, r16	; 0x23
     278:	1b a3       	std	Y+35, r17	; 0x23
     27a:	39 a2       	std	Y+33, r3	; 0x21

0000027c <__c.2986>:
     27c:	49 6e 69 74 69 61 6c 69 7a 65 2e 2e 2e 20 00        Initialize... .

0000028b <__c.2956>:
     28b:	57 61 74 63 68 44 6f 67 00                          WatchDog.

00000294 <__c.2954>:
     294:	42 72 6f 77 6e 4f 75 74 00                          BrownOut.

0000029d <__c.2952>:
     29d:	45 78 74 65 72 6e 61 6c 00                          External.

000002a6 <__c.2947>:
     2a6:	50 6f 77 65 72 4f 6e 00                             PowerOn.

000002ae <__prodloc>:
     2ae:	01 06 02 06 01 0d 02 0d 01 14 02 14                 ............

000002ba <__prntloc>:
     2ba:	01 08 02 08 03 08 04 08 01 13 02 13                 ............

000002c6 <__prntlmt>:
     2c6:	02 03 04 02 0f 0f                                   ......

000002cc <__prntstr>:
     2cc:	01 01 00 00 00 00                                   ......

000002d2 <__hostloc>:
     2d2:	01 0a 02 0a 03 0a                                   ......

000002d8 <MaxKeyHit>:
     2d8:	02 04 03 03 03 03 03 04 03 04                       ..........

000002e2 <strDispenserName1>:
     2e2:	4e 2f 41 00                                         N/A.

000002e6 <strDispenserName2>:
     2e6:	47 69 6c 62 61 72 63 6f 00                          Gilbarco.

000002ef <strDispenserName3>:
     2ef:	57 61 79 6e 65 20 44 41 52 54 00                    Wayne DART.

000002fa <strDispenserName4>:
     2fa:	54 61 74 73 75 6e 6f 00                             Tatsuno.

00000302 <strDispenserName5>:
     302:	4c 47 00                                            LG.

00000305 <DefListDispenserName>:
     305:	e2 02 e6 02 ef 02 fa 02 02 03                       ..........

0000030f <__c.9911>:
     30f:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     31f:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     32f:	20 20 20 20 20 20 20 20 00                                  .

00000338 <__c.9909>:
     338:	20 20 20 20 20 20 53 65 6d 6f 67 61 20 53 65 6c           Semoga Sel
     348:	61 6d 61 74 20 53 61 6d 70 61 69 20 54 75 6a 75     amat Sampai Tuju
     358:	61 6e 20 20 20 20 20 20 00                          an      .

00000361 <__c.9907>:
     361:	20 20 20 20 20 20 20 20 20 20 20 20 53 65 6c 61                 Sela
     371:	6d 61 74 20 20 4a 61 6c 61 6e 20 20 20 20 20 20     mat  Jalan      
     381:	20 20 20 20 20 20 20 20 00                                  .

0000038a <__c.9905>:
     38a:	20 20 20 20 20 20 20 20 20 20 20 20 20 54 65 72                  Ter
     39a:	69 6d 61 20 4b 61 73 69 68 20 20 20 20 20 20 20     ima Kasih       
     3aa:	20 20 20 20 20 20 20 20 00                                  .

000003b3 <__c.9903>:
     3b3:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     3c3:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     3d3:	20 20 20 20 20 20 20 20 00                                  .

000003dc <__c.9901>:
     3dc:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     3ec:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     3fc:	20 20 20 20 20 20 20 20 00                                  .

00000405 <__c.9899>:
     405:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     415:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     425:	20 20 20 20 20 20 20 20 00                                  .

0000042e <__c.9897>:
     42e:	20 20 20 20 20 20 20 20 20 20 20 20 4a 61 6b 61                 Jaka
     43e:	72 74 61 20 53 65 6c 61 74 61 6e 20 20 20 20 20     rta Selatan     
     44e:	20 20 20 20 20 20 20 20 00                                  .

00000457 <__c.9895>:
     457:	20 20 20 20 20 20 20 20 4a 4c 2e 20 52 53 20 46             JL. RS F
     467:	61 74 6d 61 77 61 74 69 20 4e 6f 2e 35 35 20 20     atmawati No.55  
     477:	20 20 20 20 20 20 20 20 00                                  .

00000480 <__c.9893>:
     480:	20 20 20 20 50 54 2e 20 48 41 4e 49 4e 44 4f 20         PT. HANINDO 
     490:	41 55 54 4f 4d 41 54 49 4f 4e 20 53 4f 4c 55 54     AUTOMATION SOLUT
     4a0:	49 4f 4e 53 20 20 20 20 00                          IONS    .

000004a9 <__c.9891>:
     4a9:	30 30 30 30 30 30 00                                000000.

000004b0 <__c.9889>:
     4b0:	42 52 49 00                                         BRI.

000004b4 <__c.9887>:
     4b4:	42 4e 49 00                                         BNI.

000004b8 <__c.9885>:
     4b8:	4d 61 6e 64 69 72 69 00                             Mandiri.

000004c0 <__c.9883>:
     4c0:	42 43 41 00                                         BCA.

000004c4 <__c.9881>:
     4c4:	44 69 65 73 65 6c 20 20 00                          Diesel  .

000004cd <__c.9879>:
     4cd:	42 69 6f 53 6f 6c 72 20 00                          BioSolr .

000004d6 <__c.9877>:
     4d6:	53 6f 6c 61 72 20 20 20 00                          Solar   .

000004df <__c.9875>:
     4df:	50 72 65 6d 69 75 6d 20 00                          Premium .

000004e8 <__c.9873>:
     4e8:	50 65 72 74 61 6d 61 78 00                          Pertamax.

000004f1 <__c.9871>:
     4f1:	50 65 72 74 2b 20 20 20 00                          Pert+   .

000004fa <__c.9869>:
     4fa:	36 35 30 30 00                                      6500.

000004ff <__c.9867>:
     4ff:	34 35 30 30 00                                      4500.

00000504 <__c.9865>:
     504:	36 35 30 30 00                                      6500.

00000509 <__c.9863>:
     509:	34 35 30 30 00                                      4500.

0000050e <__c.9861>:
     50e:	37 32 35 30 00                                      7250.

00000513 <__c.9859>:
     513:	36 35 30 30 00                                      6500.

00000518 <__c.9857>:
     518:	20 20 00                                              .

0000051b <__c.9761>:
     51b:	25 64 00                                            %d.

0000051e <__c.9759>:
     51e:	54 25 2e 32 64 25 2e 32 64 25 73 25 73 25 73 25     T%.2d%.2d%s%s%s%
     52e:	73 25 73 25 73 3a 00                                s%s%s:.

00000535 <__c.9710>:
     535:	32 30 25 73 2f 25 73 2f 25 73 20 25 73 3a 25 73     20%s/%s/%s %s:%s
     545:	3a 25 73 00                                         :%s.

00000549 <__c.9682>:
     549:	25 73 00                                            %s.

0000054c <__c.9673>:
     54c:	25 73 00                                            %s.

0000054f <__c.9622>:
     54f:	25 63 25 2e 32 64 3a 00                             %c%.2d:.

00000557 <__c.9601>:
     557:	43 54 53 52 50 00                                   CTSRP.

0000055d <__c.9577>:
     55d:	3a 00                                               :.

0000055f <__c.9423>:
     55f:	4e 2f 41 00                                         N/A.

00000563 <__c.9403>:
     563:	25 73 00                                            %s.

00000566 <__c.9398>:
	...

00000567 <__c.9271>:
     567:	25 64 2e 25 73 25 73 25 73 00                       %d.%s%s%s.

00000571 <__c.9269>:
     571:	25 64 2e 25 73 25 73 25 73 25 73 25 73 00           %d.%s%s%s%s%s.

0000057f <__c.9261>:
     57f:	54 4f 54 41 4c 20 25 73 25 73 00                    TOTAL %s%s.

0000058a <__c.9259>:
     58a:	54 4f 54 41 4c 20 25 73 25 73 25 73 25 73 00        TOTAL %s%s%s%s.

00000599 <__c.9255>:
     599:	25 73 25 73 00                                      %s%s.

0000059e <__c.9253>:
     59e:	25 73 25 73 25 73 25 73 00                          %s%s%s%s.

000005a7 <__c.9251>:
     5a7:	25 73 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 20 20 20     %s-----------   
     5b7:	20 20 20 20 20 20 20 20 20 20 20 20 20 00                        .

000005c5 <__c.9249>:
     5c5:	25 73 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 20 20 20     %s-----------   
     5d5:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 00           -------------.

000005e3 <__c.9247>:
     5e3:	41 77 61 6c 20 3a 25 73 25 73 00                    Awal :%s%s.

000005ee <__c.9245>:
     5ee:	41 77 61 6c 20 3a 25 73 25 73 25 73 25 73 00        Awal :%s%s%s%s.

000005fd <__c.9243>:
     5fd:	41 6b 68 69 72 3a 25 73 25 73 00                    Akhir:%s%s.

00000608 <__c.9241>:
     608:	41 6b 68 69 72 3a 25 73 25 73 25 73 25 73 00        Akhir:%s%s%s%s.

00000617 <__c.9239>:
     617:	50 25 64 2e 25 64 20 2d 20 25 73 20 00              P%d.%d - %s .

00000624 <__c.9237>:
     624:	50 25 64 2e 25 64 20 2d 20 25 73 20 25 73 20 25     P%d.%d - %s %s %
     634:	73 00                                               s.

00000636 <__c.9235>:
     636:	48 61 72 67 61 3a 20 52 70 2e 25 73 00              Harga: Rp.%s.

00000643 <__c.9231>:
     643:	4e 2f 41 00                                         N/A.

00000647 <__c.9227>:
     647:	50 55 4d 50 2d 50 52 4f 44 55 43 54 20 20 20 56     PUMP-PRODUCT   V
     657:	4f 4c 55 4d 45 28 4c 29 20 20 20 20 20 20 20 20     OLUME(L)        
     667:	20 20 20 20 20 20 00                                      .

0000066e <__c.9225>:
     66e:	50 55 4d 50 2d 50 52 4f 44 55 43 54 20 20 20 56     PUMP-PRODUCT   V
     67e:	4f 4c 55 4d 45 28 4c 29 20 20 20 20 52 55 50 49     OLUME(L)    RUPI
     68e:	41 48 28 52 50 29 00                                AH(RP).

00000695 <__c.9221>:
     695:	41 6b 68 69 72 20 53 68 69 66 74 20 3a 20 25 73     Akhir Shift : %s
     6a5:	20 00                                                .

000006a7 <__c.9219>:
     6a7:	41 77 61 6c 20 20 53 68 69 66 74 20 3a 20 25 73     Awal  Shift : %s
     6b7:	20 00                                                .

000006b9 <__c.9217>:
     6b9:	54 65 72 6d 69 6e 61 6c 20 49 44 20 3a 20 25 2e     Terminal ID : %.
     6c9:	32 64 20 20 20 20 20 20 20 20 20 20 20 20 20 20     2d              
     6d9:	20 20 20 20 20 00                                        .

000006df <__c.9215>:
     6df:	20 20 20 20 20 20 20 20 4c 61 70 6f 72 61 6e 20             Laporan 
     6ef:	54 75 74 75 70 20 53 68 69 66 74 3a 20 25 73 20     Tutup Shift: %s 
     6ff:	20 20 20 20 20 00                                        .

00000705 <__c.9212>:
     705:	25 64 00                                            %d.

00000708 <__c.9154>:
     708:	25 73 00                                            %s.

0000070b <__c.9149>:
     70b:	30 00                                               0.

0000070d <__c.9147>:
     70d:	30 00                                               0.

0000070f <__c.8983>:
     70f:	25 73 00                                            %s.

00000712 <__c.8981>:
     712:	25 73 00                                            %s.

00000715 <__c.8979>:
     715:	25 73 00                                            %s.

00000718 <__c.8977>:
     718:	25 73 00                                            %s.

0000071b <__c.8975>:
     71b:	25 73 00                                            %s.

0000071e <__c.8779>:
     71e:	25 73 00                                            %s.

00000721 <__c.8691>:
     721:	30 30 30 30 30 30 30 30 00                          00000000.

0000072a <__c.8610>:
     72a:	4f 70 65 72 61 74 6f 72 3a 20 25 73 00              Operator: %s.

00000737 <__c.8605>:
     737:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     747:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     757:	2d 00                                               -.

00000759 <__c.8596>:
     759:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     769:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     779:	20 20 20 00                                            .

0000077d <__c.8594>:
     77d:	20 20 20 20 20 20 20 20 20 20 20 20 20 44 55 50                  DUP
     78d:	4c 49 43 41 54 45 20 43 4f 50 59 20 20 20 20 20     LICATE COPY     
     79d:	20 20 20 00                                            .

000007a1 <__c.8442>:
     7a1:	20 20 20 20 20 4f 70 65 72 61 74 6f 72 3a 20 25          Operator: %
     7b1:	73 00                                               s.

000007b3 <__c.8437>:
     7b3:	20 20 20 20 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d         ------------
     7c3:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     7d3:	2d 2d 00                                            --.

000007d6 <__c.8434>:
     7d6:	20 20 20 20 20 53 75 72 63 68 61 72 67 65 20 41          Surcharge A
     7e6:	6d 74 3a 20 25 73 00                                mt: %s.

000007ed <__c.8431>:
     7ed:	20 20 20 20 20 53 75 72 63 68 61 72 67 65 20 44          Surcharge D
     7fd:	73 63 3a 20 25 73 00                                sc: %s.

00000804 <__c.8428>:
     804:	20 20 20 20 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d         ------------
     814:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     824:	2d 2d 00                                            --.

00000827 <__c.8425>:
     827:	20 20 20 20 20 4d 6f 6e 74 68 20 43 6f 6e 73 20          Month Cons 
     837:	41 20 3a 20 52 70 2e 25 73 00                       A : Rp.%s.

00000841 <__c.8422>:
     841:	20 20 20 20 20 4d 6f 6e 74 68 20 43 6f 6e 73 20          Month Cons 
     851:	56 20 3a 20 25 73 20 4c 00                          V : %s L.

0000085a <__c.8419>:
     85a:	20 20 20 20 20 54 6f 74 61 6c 20 52 65 64 65 65          Total Redee
     86a:	6d 20 3a 20 25 73 00                                m : %s.

00000871 <__c.8416>:
     871:	20 20 20 20 20 45 78 70 69 72 79 20 20 20 20 20          Expiry     
     881:	20 20 3a 20 25 73 00                                  : %s.

00000888 <__c.8413>:
     888:	20 20 20 20 20 43 75 72 72 20 50 6f 69 6e 74 73          Curr Points
     898:	20 20 3a 20 25 73 00                                  : %s.

0000089f <__c.8410>:
     89f:	20 20 20 20 20 50 72 65 76 20 50 6f 69 6e 74 73          Prev Points
     8af:	20 20 3a 20 25 73 00                                  : %s.

000008b6 <__c.8407>:
     8b6:	20 20 20 20 20 47 61 69 6e 20 50 6f 69 6e 74 73          Gain Points
     8c6:	20 20 3a 20 25 73 00                                  : %s.

000008cd <__c.8404>:
     8cd:	20 20 20 20 20 43 6f 72 70 20 4e 61 6d 65 20 20          Corp Name  
     8dd:	20 20 3a 20 25 73 00                                  : %s.

000008e4 <__c.8401>:
     8e4:	20 20 20 20 20 43 6f 72 70 20 49 44 20 20 20 20          Corp ID    
     8f4:	20 20 3a 20 25 73 00                                  : %s.

000008fb <__c.8398>:
     8fb:	20 20 20 20 20 43 61 72 64 20 48 6f 6c 64 65 72          Card Holder
     90b:	20 20 3a 20 25 73 20 00                               : %s .

00000913 <__c.8395>:
     913:	20 20 20 20 20 43 61 72 64 20 49 44 20 20 20 20          Card ID    
     923:	20 20 3a 20 25 73 00                                  : %s.

0000092a <__c.8392>:
     92a:	20 20 20 20 20 20 20 20 20 4c 4f 59 41 4c 54 59              LOYALTY
     93a:	20 49 4e 46 4f 52 4d 41 54 49 4f 4e 20 20 20 20      INFORMATION    
     94a:	20 20 00                                              .

0000094d <__c.8389>:
     94d:	20 20 20 20 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d         ------------
     95d:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     96d:	2d 2d 00                                            --.

00000970 <__c.8386>:
     970:	20 20 20 20 2e 25 73 00                                 .%s.

00000978 <__c.8382>:
     978:	20 20 20 20 54 61 6e 64 61 20 54 61 6e 67 61 6e         Tanda Tangan
     988:	20 20 28 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f       (_____________
     998:	5f 29 00                                            _).

0000099b <__c.8377>:
     99b:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     9ab:	20 20 20 20 20 20 00                                      .

000009b2 <__c.8374>:
     9b2:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     9c2:	20 20 20 20 20 20 00                                      .

000009c9 <__c.8371>:
     9c9:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     9d9:	20 00                                                .

000009db <__c.8369>:
     9db:	20 20 00                                              .

000009de <__c.8367>:
     9de:	20 20 20 20 41 70 70 72 20 43 6f 64 65 3a 20 25         Appr Code: %
     9ee:	73 00                                               s.

000009f0 <__c.8365>:
     9f0:	25 73 20 20 00                                      %s  .

000009f5 <__c.8363>:
     9f5:	20 20 20 20 4e 61 6d 61 20 20 20 20 20 3a 20 25         Nama     : %
     a05:	73 00                                               s.

00000a07 <__c.8360>:
     a07:	20 20 20 20 20 20 20 20 20 20 2a 2a 2a 20 50 55               *** PU
     a17:	4d 50 20 54 45 53 54 20 2a 2a 2a 20 20 20 20 20     MP TEST ***     
     a27:	20 20 00                                              .

00000a2a <__c.8358>:
     a2a:	20 20 20 20 56 6f 75 63 68 65 72 20 4e 6f 3a 20         Voucher No: 
     a3a:	25 73 00                                            %s.

00000a3d <__c.8356>:
     a3d:	20 20 20 20 4b 61 72 74 75 20 49 44 20 3a 20 25         Kartu ID : %
     a4d:	73 00                                               s.

00000a4f <__c.8353>:
     a4f:	20 20 20 20 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d         ------------
     a5f:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     a6f:	2d 2d 00                                            --.

00000a72 <__c.8350>:
     a72:	20 20 20 20 20 20 4f 64 6f 6d 65 74 65 72 20 20           Odometer  
     a82:	20 20 3a 20 25 73 00                                  : %s.

00000a89 <__c.8347>:
     a89:	20 20 20 20 20 20 4e 6f 2e 50 6f 6c 69 73 69 20           No.Polisi 
     a99:	20 20 3a 20 25 73 00                                  : %s.

00000aa0 <__c.8344>:
	...

00000aa1 <__c.8342>:
     aa1:	20 20 20 20 20 20 4a 6d 6c 20 52 75 70 69 61 68           Jml Rupiah
     ab1:	20 20 3a 20 52 70 2e 25 73 00                         : Rp.%s.

00000abb <__c.8339>:
     abb:	20 20 20 20 20 20 4a 6d 6c 20 4c 69 74 65 72 20           Jml Liter 
     acb:	20 20 3a 20 25 73 20 4c 00                            : %s L.

00000ad4 <__c.8336>:
	...

00000ad5 <__c.8334>:
     ad5:	20 20 20 20 20 20 48 61 72 67 61 2f 4c 20 20 20           Harga/L   
     ae5:	20 20 3a 20 52 70 2e 25 73 00                         : Rp.%s.

00000aef <__c.8331>:
     aef:	20 20 20 20 20 20 50 72 6f 64 75 6b 20 20 20 20           Produk    
     aff:	20 20 3a 20 25 73 00                                  : %s.

00000b06 <__c.8328>:
     b06:	20 20 20 20 20 20 50 75 6c 61 75 2f 50 6f 6d 70           Pulau/Pomp
     b16:	61 20 3a 20 5b 25 73 5d 2d 25 73 00                 a : [%s]-%s.

00000b22 <__c.8325>:
     b22:	20 20 20 20 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d         ------------
     b32:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     b42:	2d 2d 00                                            --.

00000b45 <__c.8322>:
     b45:	20 20 20 20 20 20 57 61 6b 74 75 3a 20 25 73 20           Waktu: %s 
     b55:	25 73 20 00                                         %s .

00000b59 <__c.8318>:
     b59:	20 20 20 20 20 20 53 68 69 66 74 3a 20 25 73 20           Shift: %s 
     b69:	20 4e 6f 2e 54 72 61 6e 73 3a 20 25 73 20 00         No.Trans: %s .

00000b78 <__c.8301>:
     b78:	20 00                                                .

00000b7a <__c.8299>:
     b7a:	20 20 20 20 20 20 20 20 20 20 20 20 20 44 55 50                  DUP
     b8a:	4c 49 43 41 54 45 20 43 4f 50 59 20 20 20 20 20     LICATE COPY     
     b9a:	20 20 20 00                                            .

00000b9e <__c.7887>:
     b9e:	45 72 72 6f 72 20 4e 6f 20 43 6f 6e 6e 65 63 74     Error No Connect
     bae:	69 6f 6e 00                                         ion.

00000bb2 <__c.7881>:
     bb2:	50 72 6f 73 65 73 00                                Proses.

00000bb9 <__c.7879>:
     bb9:	53 65 6e 64 20 52 65 71 75 65 73 74 00              Send Request.

00000bc6 <__c.7874>:
     bc6:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
     bd6:	6e 74 65 72 00                                      nter.

00000bdb <__c.7872>:
     bdb:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
     beb:	6e 74 65 72 00                                      nter.

00000bf0 <__c.7869>:
     bf0:	5b 2a 5d 43 61 6e 63 65 6c 20 20 5b 23 5d 45 6e     [*]Cancel  [#]En
     c00:	74 65 72 20 00                                      ter .

00000c05 <__c.7867>:
     c05:	4f 64 6f 6d 65 74 65 72 3a 5f 20 00                 Odometer:_ .

00000c11 <__c.7865>:
     c11:	50 6c 61 74 20 4e 6f 3a 20 25 73 20 00              Plat No: %s .

00000c1e <__c.7862>:
     c1e:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
     c2e:	6e 74 65 72 00                                      nter.

00000c33 <__c.7860>:
     c33:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
     c43:	6e 74 65 72 00                                      nter.

00000c48 <__c.7857>:
     c48:	5b 2a 5d 43 61 6e 63 65 6c 20 20 5b 23 5d 45 6e     [*]Cancel  [#]En
     c58:	74 65 72 20 00                                      ter .

00000c5d <__c.7855>:
     c5d:	5f 00                                               _.

00000c5f <__c.7853>:
     c5f:	49 6e 70 75 74 20 50 6c 61 74 20 4e 6f 3a 20 00     Input Plat No: .

00000c6f <__c.7777>:
     c6f:	23 29 53 61 76 65 00                                #)Save.

00000c76 <__c.7775>:
     c76:	34 29 54 65 72 6d 49 44 3a 25 64 20 00              4)TermID:%d .

00000c83 <__c.7773>:
     c83:	25 64 00                                            %d.

00000c86 <__c.7761>:
     c86:	25 64 00                                            %d.

00000c89 <__c.7753>:
     c89:	23 29 53 61 76 65 00                                #)Save.

00000c90 <__c.7751>:
     c90:	34 29 54 65 72 6d 49 44 3a 25 64 20 00              4)TermID:%d .

00000c9d <__c.7749>:
     c9d:	33 29 4e 6f 74 69 66 20 3a 20 20 20 20 20 2a 29     3)Notif :     *)
     cad:	45 78 69 74 00                                      Exit.

00000cb2 <__c.7747>:
     cb2:	32 29 44 2f 54 20 20 20 3a 00                       2)D/T   :.

00000cbc <__c.7745>:
     cbc:	31 29 4d 6f 6e 65 79 20 3a 00                       1)Money :.

00000cc6 <__c.7692>:
     cc6:	25 2e 32 64 00                                      %.2d.

00000ccb <__c.7690>:
     ccb:	25 64 00                                            %d.

00000cce <__c.7673>:
     cce:	25 2e 32 64 00                                      %.2d.

00000cd3 <__c.7671>:
     cd3:	25 64 00                                            %d.

00000cd6 <__c.7663>:
     cd6:	34 29 43 75 74 20 3a 20 20 2a 29 45 78 69 74 00     4)Cut :  *)Exit.

00000ce6 <__c.7661>:
     ce6:	33 29 4c 6f 67 6f 3a 20 20 23 29 53 61 76 65 00     3)Logo:  #)Save.

00000cf6 <__c.7659>:
     cf6:	32 29 53 69 7a 65 3a 20 20 36 29 53 70 61 63 65     2)Size:  6)Space
     d06:	20 3a 00                                             :.

00000d09 <__c.7657>:
     d09:	31 29 54 79 70 65 3a 20 20 35 29 53 63 72 6f 6c     1)Type:  5)Scrol
     d19:	6c 3a 00                                            l:.

00000d1c <__c.7593>:
     d1c:	2a 29 43 61 6e 63 65 6c 20 20 20 20 20 20 23 29     *)Cancel      #)
     d2c:	53 61 76 65 00                                      Save.

00000d31 <__c.7591>:
     d31:	54 49 4d 45 20 3a 20 00                             TIME : .

00000d39 <__c.7589>:
     d39:	44 41 54 45 20 3a 20 00                             DATE : .

00000d41 <__c.7539>:
     d41:	25 64 00                                            %d.

00000d44 <__c.7528>:
     d44:	25 64 00                                            %d.

00000d47 <__c.7520>:
     d47:	2a 29 45 78 69 74 20 20 20 20 20 20 20 20 23 29     *)Exit        #)
     d57:	53 61 76 65 00                                      Save.

00000d5c <__c.7518>:
     d5c:	32 29 4e 32 3a 20 20 34 29 4e 34 3a 20 20 36 29     2)N2:  4)N4:  6)
     d6c:	4e 36 3a 00                                         N6:.

00000d70 <__c.7516>:
     d70:	31 29 4e 31 3a 20 20 33 29 4e 33 3a 20 20 35 29     1)N1:  3)N3:  5)
     d80:	4e 35 3a 00                                         N5:.

00000d84 <__c.7514>:
     d84:	50 72 6f 64 75 63 74 20 46 49 50 25 2e 32 64 00     Product FIP%.2d.

00000d94 <__c.7430>:
     d94:	43 6f 6d 70 6c 65 74 65 64 00                       Completed.

00000d9e <__c.7428>:
     d9e:	43 61 6e 63 65 6c 20 20 20 20 20 00                 Cancel     .

00000daa <__c.7425>:
     daa:	49 64 5b 25 64 5d 3d 25 2e 32 64 20 20 00           Id[%d]=%.2d  .

00000db8 <__c.7422>:
     db8:	53 61 76 69 6e 67 2e 2e 00                          Saving...

00000dc1 <__c.7420>:
     dc1:	2d 50 75 6d 70 49 44 2d 00                          -PumpID-.

00000dca <__c.7416>:
     dca:	20 20 20 20 4e 6f 74 20 41 6c 6c 6f 77 65 64 20         Not Allowed 
     dda:	20 20 20 20 00                                          .

00000ddf <__c.7414>:
     ddf:	20 20 44 75 70 6c 69 63 61 74 65 20 50 75 6d 70       Duplicate Pump
     def:	49 44 20 20 00                                      ID  .

00000df4 <__c.7412>:
     df4:	20 20 20 20 20 20 57 61 72 6e 69 6e 67 21 20 20           Warning!  
     e04:	20 20 20 20 00                                          .

00000e09 <__c.7400>:
     e09:	25 64 2e 50 25 2e 32 64 20 7c 20 25 64 2e 50 25     %d.P%.2d | %d.P%
     e19:	2e 32 64 00                                         .2d.

00000e1d <__c.7394>:
     e1d:	23 29 53 61 76 65 00                                #)Save.

00000e24 <__c.7392>:
     e24:	2a 29 42 61 63 6b 00                                *)Back.

00000e2b <__c.7387>:
     e2b:	25 64 2e 50 25 2e 32 64 20 7c 20 25 64 2e 50 25     %d.P%.2d | %d.P%
     e3b:	2e 32 64 00                                         .2d.

00000e3f <__c.7338>:
     e3f:	25 2e 32 64 00                                      %.2d.

00000e44 <__c.7332>:
     e44:	25 2e 32 64 00                                      %.2d.

00000e49 <__c.7330>:
     e49:	34 29 34 3a 20 20 20 38 29 38 3a 20 20 20 2a 29     4)4:   8)8:   *)
     e59:	45 78 69 74 00                                      Exit.

00000e5e <__c.7328>:
     e5e:	33 29 33 3a 20 20 20 37 29 37 3a 20 20 20 23 29     3)3:   7)7:   #)
     e6e:	53 61 76 65 00                                      Save.

00000e73 <__c.7326>:
     e73:	32 29 32 3a 20 20 20 36 29 36 3a 00                 2)2:   6)6:.

00000e7f <__c.7324>:
     e7f:	31 29 31 3a 20 20 20 35 29 35 3a 00                 1)1:   5)5:.

00000e8b <__c.7290>:
     e8b:	5b 2a 5d 45 78 69 74 20 20 5b 23 5d 43 68 61 6e     [*]Exit  [#]Chan
     e9b:	67 65 20 00                                         ge .

00000e9f <__c.7288>:
     e9f:	25 64 2e 25 73 00                                   %d.%s.

00000ea5 <__c.7283>:
     ea5:	2d 44 69 73 70 65 6e 73 65 72 20 42 72 61 6e 64     -Dispenser Brand
     eb5:	2d 00                                               -.

00000eb7 <__c.7267>:
     eb7:	2a 29 45 78 69 74 00                                *)Exit.

00000ebe <__c.7265>:
     ebe:	32 29 50 72 6f 64 75 63 74 00                       2)Product.

00000ec8 <__c.7263>:
     ec8:	31 29 49 44 00                                      1)ID.

00000ecd <__c.7248>:
     ecd:	2a 29 45 78 69 74 00                                *)Exit.

00000ed4 <__c.7243>:
     ed4:	25 64 2e 50 25 2e 32 64 20 7c 20 25 64 2e 50 25     %d.P%.2d | %d.P%
     ee4:	2e 32 64 20 00                                      .2d .

00000ee9 <__c.7234>:
     ee9:	25 2e 32 64 00                                      %.2d.

00000eee <__c.7033>:
     eee:	5b 2a 5d 45 78 69 74 00                             [*]Exit.

00000ef6 <__c.7031>:
     ef6:	36 2e 41 63 74 3a 25 64 00                          6.Act:%d.

00000eff <__c.7029>:
     eff:	35 2e 44 6c 79 3a 25 64 00                          5.Dly:%d.

00000f08 <__c.7027>:
     f08:	34 2e 54 69 6d 50 6f 6f 6c 3a 25 64 00              4.TimPool:%d.

00000f15 <__c.7025>:
     f15:	33 2e 54 72 79 53 65 6e 64 3a 25 64 00              3.TrySend:%d.

00000f22 <__c.7023>:
     f22:	32 2e 6e 4e 6f 50 75 6d 70 3a 25 64 00              2.nNoPump:%d.

00000f2f <__c.7021>:
     f2f:	31 2e 4d 61 78 50 75 6d 70 3a 25 64 00              1.MaxPump:%d.

00000f3c <__c.6962>:
     f3c:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 00              [*]Back     .

00000f49 <__c.6957>:
     f49:	43 4f 4d 25 64 3a 25 64 00                          COM%d:%d.

00000f52 <__c.6955>:
     f52:	20 20 20 20 20 2d 42 61 75 64 72 61 74 65 2d 20          -Baudrate- 
     f62:	20 20 20 20 00                                          .

00000f67 <__c.6950>:
     f67:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 20 00           [*]Back      .

00000f75 <__c.6948>:
     f75:	33 2e 43 4f 4d 33 3a 34 38 35 00                    3.COM3:485.

00000f80 <__c.6946>:
     f80:	33 2e 43 4f 4d 33 3a 32 33 32 00                    3.COM3:232.

00000f8b <__c.6944>:
     f8b:	33 2e 43 4f 4d 33 3a 54 54 4c 00                    3.COM3:TTL.

00000f96 <__c.6942>:
     f96:	32 2e 42 61 75 64 72 61 74 65 00                    2.Baudrate.

00000fa1 <__c.6940>:
     fa1:	31 2e 4d 6f 64 65 3a 53 74 61 6e 64 61 6c 6f 6e     1.Mode:Standalon
     fb1:	65 00                                               e.

00000fb3 <__c.6938>:
     fb3:	31 2e 4d 6f 64 65 3a 53 6c 61 76 65 00              1.Mode:Slave.

00000fc0 <__c.6936>:
     fc0:	31 2e 4d 6f 64 65 3a 4e 6f 6e 65 00                 1.Mode:None.

00000fcc <__c.6889>:
     fcc:	49 6e 76 61 6c 69 64 20 4f 6c 64 20 50 61 73 73     Invalid Old Pass
     fdc:	77 6f 72 64 00                                      word.

00000fe1 <__c.6887>:
     fe1:	20 20 20 20 20 20 45 52 52 4f 52 20 20 20 20 20           ERROR     
     ff1:	20 20 20 20 00                                          .

00000ff6 <__c.6885>:
     ff6:	49 6e 76 61 6c 69 64 20 4e 65 77 20 50 61 73 73     Invalid New Pass
    1006:	77 6f 72 64 00                                      word.

0000100b <__c.6883>:
    100b:	20 20 20 20 20 20 45 52 52 4f 52 20 20 20 20 20           ERROR     
    101b:	20 20 20 20 00                                          .

00001020 <__c.6881>:
    1020:	20 20 20 50 61 73 73 77 6f 72 64 20 53 61 76 65        Password Save
    1030:	64 20 20 20 00                                      d   .

00001035 <__c.6879>:
    1035:	20 20 20 20 20 43 6f 6d 70 6c 65 74 65 64 20 20          Completed  
    1045:	20 20 20 20 00                                          .

0000104a <__c.6875>:
    104a:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    105a:	6e 74 65 72 00                                      nter.

0000105f <__c.6872>:
    105f:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
    106f:	6e 74 65 72 00                                      nter.

00001074 <__c.6869>:
    1074:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1084:	6e 74 65 72 00                                      nter.

00001089 <__c.6867>:
    1089:	4e 65 77 3a 5f 20 20 20 20 20 20 20 20 20 20 20     New:_           
    1099:	20 20 20 20 00                                          .

0000109e <__c.6863>:
    109e:	56 61 6c 69 64 61 74 69 6e 67 2e 2e 00              Validating...

000010ab <__c.6859>:
    10ab:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    10bb:	6e 74 65 72 00                                      nter.

000010c0 <__c.6856>:
    10c0:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
    10d0:	6e 74 65 72 00                                      nter.

000010d5 <__c.6851>:
    10d5:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    10e5:	6e 74 65 72 00                                      nter.

000010ea <__c.6849>:
    10ea:	4e 65 77 3a 5f 20 20 20 20 20 20 20 20 20 20 20     New:_           
    10fa:	20 20 20 20 00                                          .

000010ff <__c.6845>:
    10ff:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    110f:	6e 74 65 72 00                                      nter.

00001114 <__c.6842>:
    1114:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
    1124:	6e 74 65 72 00                                      nter.

00001129 <__c.6837>:
    1129:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1139:	6e 74 65 72 00                                      nter.

0000113e <__c.6835>:
    113e:	4e 65 77 3a 5f 20 20 20 20 20 20 20 20 20 20 20     New:_           
    114e:	20 20 20 20 00                                          .

00001153 <__c.6831>:
    1153:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1163:	6e 74 65 72 00                                      nter.

00001168 <__c.6829>:
    1168:	4f 6c 64 3a 5f 00                                   Old:_.

0000116e <__c.6827>:
    116e:	2d 41 64 6d 69 6e 69 73 74 72 61 74 6f 72 2d 00     -Administrator-.

0000117e <__c.6825>:
    117e:	2d 53 75 70 65 72 76 69 73 6f 72 2d 00              -Supervisor-.

0000118b <__c.6817>:
    118b:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 00              [*]Back     .

00001198 <__c.6815>:
    1198:	32 2e 41 64 6d 69 6e 69 73 74 72 61 74 6f 72 00     2.Administrator.

000011a8 <__c.6813>:
    11a8:	31 2e 53 75 70 65 72 76 69 73 6f 72 00              1.Supervisor.

000011b5 <__c.6811>:
    11b5:	2d 43 68 61 6e 67 65 20 50 61 73 73 77 6f 72 64     -Change Password
    11c5:	2d 00                                               -.

000011c7 <__c.6808>:
    11c7:	53 61 76 65 64 20 00                                Saved .

000011ce <__c.6802>:
    11ce:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    11de:	6e 74 65 72 00                                      nter.

000011e3 <__c.6799>:
    11e3:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
    11f3:	6e 74 65 72 00                                      nter.

000011f8 <__c.6794>:
    11f8:	5b 2a 5d 4e 6f 20 20 20 20 5b 23 5d 59 65 73 00     [*]No    [#]Yes.

00001208 <__c.6792>:
    1208:	53 61 76 65 3f 00                                   Save?.

0000120e <__c.6790>:
    120e:	4e 65 77 20 4f 70 65 72 61 74 6f 72 3a 00           New Operator:.

0000121c <__c.6788>:
    121c:	25 73 00                                            %s.

0000121f <__c.6784>:
    121f:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    122f:	6e 74 65 72 00                                      nter.

00001234 <__c.6782>:
    1234:	4e 65 77 20 3a 5f 20 20 20 20 20 20 20 20 20 20     New :_          
    1244:	20 20 20 20 00                                          .

00001249 <__c.6780>:
    1249:	4e 61 6d 65 3a 00                                   Name:.

0000124f <__c.6778>:
    124f:	25 73 00                                            %s.

00001252 <__c.6769>:
    1252:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 20 20 20 20     [*]Back         
    1262:	20 00                                                .

00001264 <__c.6767>:
    1264:	32 2e 43 68 61 6e 67 65 20 50 61 73 73 77 6f 72     2.Change Passwor
    1274:	64 00                                               d.

00001276 <__c.6765>:
    1276:	31 2e 43 68 61 6e 67 65 20 4f 70 65 72 61 74 6f     1.Change Operato
    1286:	72 00                                               r.

00001288 <__c.6683>:
    1288:	2a 29 42 61 63 6b 00                                *)Back.

0000128f <__c.6681>:
    128f:	34 2e 53 70 61 72 61 74 6f 72 3a 25 63 20 00        4.Sparator:%c .

0000129e <__c.6679>:
    129e:	33 2e 44 65 63 69 6d 61 6c 20 3a 25 63 20 00        3.Decimal :%c .

000012ad <__c.6677>:
    12ad:	32 2e 54 2e 4d 6f 6e 65 79 20 3a 25 64 20 00        2.T.Money :%d .

000012bc <__c.6675>:
    12bc:	31 2e 54 2e 56 6f 6c 75 6d 65 3a 25 64 20 00        1.T.Volume:%d .

000012cb <__c.6670>:
    12cb:	5b 2a 5d 42 61 63 6b 20 20 5b 23 5d 4e 65 78 74     [*]Back  [#]Next
	...

000012dc <__c.6668>:
    12dc:	33 2e 4d 6f 6e 65 79 20 3a 25 64 00                 3.Money :%d.

000012e8 <__c.6666>:
    12e8:	32 2e 56 6f 6c 75 6d 65 3a 25 64 00                 2.Volume:%d.

000012f4 <__c.6664>:
    12f4:	31 2e 50 72 69 63 65 20 3a 25 64 00                 1.Price :%d.

00001300 <__c.6647>:
    1300:	34 29 42 72 61 6e 64 20 20 2a 29 45 78 69 74 00     4)Brand  *)Exit.

00001310 <__c.6645>:
    1310:	33 29 4c 61 62 65 6c 20 20 00                       3)Label  .

0000131a <__c.6643>:
    131a:	32 29 50 72 6f 64 75 63 74 00                       2)Product.

00001324 <__c.6641>:
    1324:	31 29 49 44 20 20 20 20 20 00                       1)ID     .

0000132e <__c.6601>:
    132e:	2a 29 42 61 63 6b 20 20 20 20 23 29 4f 4b 20 20     *)Back    #)OK  
    133e:	20 20 20 20 00                                          .

00001343 <__c.6599>:
    1343:	4e 65 77 3a 5f 00                                   New:_.

00001349 <__c.6597>:
    1349:	4f 6c 64 3a 25 73 00                                Old:%s.

00001350 <__c.6595>:
    1350:	2a 29 42 61 63 6b 20 20 20 20 23 29 4f 4b 20 20     *)Back    #)OK  
    1360:	20 20 20 20 00                                          .

00001365 <__c.6593>:
    1365:	4e 65 77 3a 5f 00                                   New:_.

0000136b <__c.6591>:
    136b:	45 64 69 74 20 50 72 6f 64 75 63 74 20 4e 61 6d     Edit Product Nam
    137b:	65 20 20 20 00                                      e   .

00001380 <__c.6589>:
    1380:	4f 6c 64 3a 25 73 00                                Old:%s.

00001387 <__c.6586>:
    1387:	2a 29 42 61 63 6b 20 20 20 20 20 20 20 00           *)Back       .

00001395 <__c.6584>:
    1395:	32 29 25 73 00                                      2)%s.

0000139a <__c.6582>:
    139a:	31 29 25 73 00                                      1)%s.

0000139f <__c.6577>:
    139f:	2a 29 42 61 63 6b 00                                *)Back.

000013a6 <__c.6572>:
    13a6:	25 64 29 25 73 00                                   %d)%s.

000013ac <__c.6503>:
    13ac:	2a 29 42 61 63 6b 20 20 20 20 20 20 20 20 20 20     *)Back          
    13bc:	20 20 20 20 00                                          .

000013c1 <__c.6501>:
    13c1:	33 29 50 75 6d 70 50 6f 6f 6c 69 6e 67 20 20 20     3)PumpPooling   
    13d1:	20 20 20 20 00                                          .

000013d6 <__c.6499>:
    13d6:	32 29 53 79 73 74 65 6d 20 20 20 20 20 20 20 20     2)System        
    13e6:	20 20 20 20 00                                          .

000013eb <__c.6497>:
    13eb:	31 29 4f 70 65 72 61 74 6f 72 20 20 20 20 20 20     1)Operator      
    13fb:	20 20 20 20 00                                          .

00001400 <__c.6494>:
    1400:	34 29 44 61 74 65 74 69 6d 65 20 2a 29 45 78 69     4)Datetime *)Exi
    1410:	74 20 20 20 00                                      t   .

00001415 <__c.6492>:
    1415:	33 29 44 65 63 69 6d 61 6c 20 20 37 29 4e 65 78     3)Decimal  7)Nex
    1425:	74 20 20 20 00                                      t   .

0000142a <__c.6490>:
    142a:	32 29 50 75 6d 70 20 20 20 20 20 36 29 48 6f 73     2)Pump     6)Hos
    143a:	74 20 20 20 00                                      t   .

0000143f <__c.6488>:
    143f:	31 29 50 72 6f 64 75 63 74 20 20 35 29 50 72 69     1)Product  5)Pri
    144f:	6e 74 65 72 00                                      nter.

00001454 <__c.6403>:
    1454:	2e 00                                               ..

00001456 <__c.6401>:
    1456:	25 64 00                                            %d.

00001459 <__c.6399>:
    1459:	20 20 20 00                                            .

0000145d <__c.6397>:
    145d:	2e 00                                               ..

0000145f <__c.6395>:
    145f:	25 64 00                                            %d.

00001462 <__c.6393>:
    1462:	20 20 20 00                                            .

00001466 <__c.6386>:
    1466:	5b 2a 5d 63 61 6e 63 65 6c 20 20 5b 23 5d 6e 65     [*]cancel  [#]ne
    1476:	78 74 20 20 00                                      xt  .

0000147b <__c.6384>:
    147b:	4e 65 77 3a 20 20 20 5f 2e 20 20 20 2e 20 20 20     New:   _.   .   
    148b:	2e 20 20 20 00                                      .   .

00001490 <__c.6382>:
    1490:	4f 6c 64 3a 20 25 64 2e 25 64 2e 25 64 2e 25 64     Old: %d.%d.%d.%d
	...

000014a1 <__c.6380>:
    14a1:	53 65 72 76 65 72 20 49 50 00                       Server IP.

000014ab <__c.6291>:
    14ab:	2e 00                                               ..

000014ad <__c.6289>:
    14ad:	25 64 00                                            %d.

000014b0 <__c.6287>:
    14b0:	20 20 20 00                                            .

000014b4 <__c.6285>:
    14b4:	2e 00                                               ..

000014b6 <__c.6283>:
    14b6:	25 64 00                                            %d.

000014b9 <__c.6281>:
    14b9:	20 20 20 00                                            .

000014bd <__c.6274>:
    14bd:	5b 2a 5d 63 61 6e 63 65 6c 20 20 5b 23 5d 6e 65     [*]cancel  [#]ne
    14cd:	78 74 20 20 00                                      xt  .

000014d2 <__c.6272>:
    14d2:	4e 65 77 3a 20 20 20 5f 2e 20 20 20 2e 20 20 20     New:   _.   .   
    14e2:	2e 20 20 20 00                                      .   .

000014e7 <__c.6270>:
    14e7:	4f 6c 64 3a 20 25 64 2e 25 64 2e 25 64 2e 25 64     Old: %d.%d.%d.%d
	...

000014f8 <__c.6268>:
    14f8:	43 6c 69 65 6e 74 20 49 50 00                       Client IP.

00001502 <__c.6226>:
    1502:	25 73 25 73 00                                      %s%s.

00001507 <__c.6222>:
    1507:	5b 2a 5d 4e 6f 20 5b 23 5d 59 65 73 00              [*]No [#]Yes.

00001514 <__c.6220>:
    1514:	53 61 76 65 20 46 6f 6f 74 65 72 25 64 20 3f 00     Save Footer%d ?.

00001524 <__c.6216>:
    1524:	5b 2a 5d 4e 6f 20 20 5b 23 5d 59 65 73 00           [*]No  [#]Yes.

00001532 <__c.6214>:
    1532:	41 6c 69 67 6e 20 43 65 6e 74 65 72 3f 00           Align Center?.

00001540 <__c.6211>:
    1540:	5b 2a 5d 42 61 63 6b 20 20 5b 23 5d 4f 4b 00        [*]Back  [#]OK.

0000154f <__c.6209>:
    154f:	45 64 69 74 20 46 6f 6f 74 65 72 25 64 20 00        Edit Footer%d .

0000155e <__c.6205>:
    155e:	2a 29 45 78 69 74 20 20 20 20 20 20 20 20 20 20     *)Exit          
    156e:	20 20 20 20 00                                          .

00001573 <__c.6203>:
    1573:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    1583:	20 20 20 20 00                                          .

00001588 <__c.6201>:
    1588:	32 29 46 6f 6f 74 65 72 32 20 20 34 29 46 6f 6f     2)Footer2  4)Foo
    1598:	74 65 72 34 00                                      ter4.

0000159d <__c.6199>:
    159d:	31 29 46 6f 6f 74 65 72 31 20 20 33 29 46 6f 6f     1)Footer1  3)Foo
    15ad:	74 65 72 33 00                                      ter3.

000015b2 <__c.6168>:
    15b2:	25 73 25 73 00                                      %s%s.

000015b7 <__c.6164>:
    15b7:	5b 2a 5d 4e 6f 20 5b 23 5d 59 65 73 00              [*]No [#]Yes.

000015c4 <__c.6162>:
    15c4:	53 61 76 65 20 48 65 61 64 65 72 25 64 20 3f 00     Save Header%d ?.

000015d4 <__c.6158>:
    15d4:	5b 2a 5d 4e 6f 20 20 5b 23 5d 59 65 73 00           [*]No  [#]Yes.

000015e2 <__c.6156>:
    15e2:	41 6c 69 67 6e 20 43 65 6e 74 65 72 3f 00           Align Center?.

000015f0 <__c.6153>:
    15f0:	5b 2a 5d 42 61 63 6b 20 20 5b 23 5d 4f 4b 00        [*]Back  [#]OK.

000015ff <__c.6151>:
    15ff:	45 64 69 74 20 48 65 61 64 65 72 25 64 20 00        Edit Header%d .

0000160e <__c.6147>:
    160e:	2a 29 45 78 69 74 20 20 20 20 20 20 20 20 20 20     *)Exit          
    161e:	20 20 20 20 00                                          .

00001623 <__c.6145>:
    1623:	33 29 48 65 61 64 65 72 33 20 20 36 29 48 65 61     3)Header3  6)Hea
    1633:	64 65 72 36 00                                      der6.

00001638 <__c.6143>:
    1638:	32 29 48 65 61 64 65 72 32 20 20 35 29 48 65 61     2)Header2  5)Hea
    1648:	64 65 72 35 00                                      der5.

0000164d <__c.6141>:
    164d:	31 29 48 65 61 64 65 72 31 20 20 34 29 48 65 61     1)Header1  4)Hea
    165d:	64 65 72 34 00                                      der4.

00001662 <__c.6098>:
    1662:	2a 29 45 78 69 74 00                                *)Exit.

00001669 <__c.6096>:
    1669:	33 29 50 61 73 73 77 6f 72 64 20 20 20 20 20 20     3)Password      
    1679:	20 20 20 20 00                                          .

0000167e <__c.6094>:
    167e:	32 29 46 6f 6f 74 65 72 20 20 20 20 20 20 20 20     2)Footer        
    168e:	20 20 20 20 00                                          .

00001693 <__c.6092>:
    1693:	31 29 48 65 61 64 65 72 20 20 20 20 20 20 20 20     1)Header        
    16a3:	20 20 20 20 00                                          .

000016a8 <__c.6090>:
    16a8:	32 29 46 6f 6f 74 65 72 20 20 20 20 35 29 53 65     2)Footer    5)Se
    16b8:	72 76 65 72 00                                      rver.

000016bd <__c.6088>:
    16bd:	31 29 48 65 61 64 65 72 20 20 20 20 34 29 43 6c     1)Header    4)Cl
    16cd:	69 65 6e 74 00                                      ient.

000016d2 <__c.6034>:
    16d2:	53 61 76 69 6e 67 20 53 68 69 66 74 44 61 74 61     Saving ShiftData
    16e2:	2e 2e 20 00                                         .. .

000016e6 <__c.6029>:
    16e6:	25 73 20 25 73 00                                   %s %s.

000016ec <__c.6027>:
    16ec:	50 72 69 6e 74 69 6e 67 20 54 6f 74 61 6c 69 7a     Printing Totaliz
    16fc:	65 72 00                                            er.

000016ff <__c.6023>:
    16ff:	43 61 6e 63 65 6c 00                                Cancel.

00001706 <__c.6018>:
    1706:	45 72 72 6f 72 20 2d 20 4e 6f 20 50 75 6d 70 3a     Error - No Pump:
    1716:	25 64 20 00                                         %d .

0000171a <__c.6013>:
    171a:	57 61 69 74 20 50 75 6d 70 3a 25 64 20 00           Wait Pump:%d .

00001728 <__c.6009>:
    1728:	57 61 69 74 20 50 75 6d 70 3a 25 64 20 00           Wait Pump:%d .

00001736 <__c.6007>:
    1736:	54 6f 74 61 6c 69 7a 65 72 2e 2e 00                 Totalizer...

00001742 <__c.5935>:
    1742:	2a 29 45 78 69 74 00                                *)Exit.

00001749 <__c.5933>:
    1749:	33 2e 4c 6f 63 6b 20 50 75 6d 70 20 20 00           3.Lock Pump  .

00001757 <__c.5931>:
    1757:	32 2e 43 6c 6f 73 65 20 44 61 79 20 20 00           2.Close Day  .

00001765 <__c.5929>:
    1765:	31 2e 43 6c 6f 73 65 20 53 68 69 66 74 00           1.Close Shift.

00001773 <__c.5887>:
    1773:	34 29 53 65 74 74 69 6e 67 73 20 20 20 2a 29 45     4)Settings   *)E
    1783:	78 69 74 20 00                                      xit .

00001788 <__c.5885>:
    1788:	33 29 43 6c 6f 73 65 44 61 79 20 20 20 20 20 20     3)CloseDay      
    1798:	20 20 20 20 00                                          .

0000179d <__c.5883>:
    179d:	32 29 43 6c 6f 73 65 53 68 69 66 74 20 20 20 20     2)CloseShift    
    17ad:	20 20 20 20 00                                          .

000017b2 <__c.5881>:
    17b2:	31 29 52 65 50 72 69 6e 74 20 20 20 20 20 20 20     1)RePrint       
    17c2:	20 20 20 20 00                                          .

000017c7 <__c.5846>:
    17c7:	50 61 73 73 77 6f 72 64 20 52 65 73 74 6f 72 65     Password Restore
    17d7:	64 00                                               d.

000017d9 <__c.5842>:
    17d9:	49 6e 76 61 6c 69 64 20 52 65 73 74 6f 72 65 20     Invalid Restore 
    17e9:	20 00                                                .

000017eb <__c.5839>:
    17eb:	30 30 30 30 30 00                                   00000.

000017f1 <__c.5837>:
    17f1:	31 31 31 31 31 00                                   11111.

000017f7 <__c.5833>:
    17f7:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1807:	6e 74 65 72 00                                      nter.

0000180c <__c.5830>:
    180c:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
    181c:	6e 74 65 72 00                                      nter.

00001821 <__c.5823>:
    1821:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1831:	6e 74 65 72 00                                      nter.

00001836 <__c.5821>:
    1836:	5f 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20     _               
    1846:	20 20 20 20 00                                          .

0000184b <__c.5819>:
    184b:	45 6e 74 65 72 20 52 65 73 74 6f 72 65 20 43 6f     Enter Restore Co
    185b:	64 65 20 20 00                                      de  .

00001860 <__c.5817>:
    1860:	4b 65 79 20 53 74 61 6d 70 3a 25 73 20 00           Key Stamp:%s .

0000186e <__c.5813>:
    186e:	49 6e 76 61 6c 69 64 20 43 6f 64 65 20 20 20 20     Invalid Code    
    187e:	20 20 20 20 00                                          .

00001883 <__c.5810>:
	...

00001884 <__c.5808>:
    1884:	25 73 00                                            %s.

00001887 <__c.5806>:
    1887:	25 73 00                                            %s.

0000188a <__c.5803>:
    188a:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    189a:	6e 74 65 72 00                                      nter.

0000189f <__c.5800>:
    189f:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
    18af:	6e 74 65 72 00                                      nter.

000018b4 <__c.5793>:
	...

000018b5 <__c.5791>:
    18b5:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    18c5:	6e 74 65 72 00                                      nter.

000018ca <__c.5789>:
    18ca:	5f 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20     _               
    18da:	20 20 20 20 00                                          .

000018df <__c.5787>:
    18df:	45 6e 74 65 72 20 47 65 4e 69 55 73 20 43 6f 64     Enter GeNiUs Cod
    18ef:	65 20 20 20 00                                      e   .

000018f4 <__c.5782>:
    18f4:	49 6e 76 61 6c 69 64 20 43 6f 64 65 20 20 20 20     Invalid Code    
    1904:	20 20 20 20 00                                          .

00001909 <__c.5779>:
    1909:	52 65 73 65 74 20 43 6f 6d 70 6c 65 74 65 00        Reset Complete.

00001918 <__c.5776>:
    1918:	50 6c 65 61 73 65 20 57 61 69 74 2e 2e 00           Please Wait...

00001926 <__c.5774>:
    1926:	52 65 73 65 74 20 45 45 50 52 4f 4d 00              Reset EEPROM.

00001933 <__c.5770>:
    1933:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1943:	6e 74 65 72 00                                      nter.

00001948 <__c.5767>:
    1948:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
    1958:	6e 74 65 72 00                                      nter.

0000195d <__c.5760>:
    195d:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    196d:	6e 74 65 72 00                                      nter.

00001972 <__c.5758>:
    1972:	52 65 73 65 74 43 6f 64 65 3a 5f 20 20 20 20 20     ResetCode:_     
    1982:	20 20 20 20 00                                          .

00001987 <__c.5756>:
    1987:	53 65 65 64 20 43 6f 64 65 3a 25 73 00              Seed Code:%s.

00001994 <__c.5754>:
    1994:	2d 4d 61 73 74 65 72 20 52 65 73 65 74 2d 00        -Master Reset-.

000019a3 <__c.5752>:
	...

000019a4 <__c.5750>:
    19a4:	32 32 33 34 35 36 37 38 00                          22345678.

000019ad <__c.5748>:
    19ad:	25 73 00                                            %s.

000019b0 <__c.5739>:
    19b0:	5b 2a 5d 45 78 69 74 20 20 20 20 20 20 20 20 20     [*]Exit         
    19c0:	20 20 20 20 00                                          .

000019c5 <__c.5737>:
    19c5:	32 2e 4d 61 73 74 65 72 20 52 65 73 65 74 20 20     2.Master Reset  
    19d5:	20 20 20 20 00                                          .

000019da <__c.5735>:
    19da:	31 2e 52 65 73 74 6f 72 65 20 50 61 73 73 77 6f     1.Restore Passwo
    19ea:	72 64 20 20 00                                      rd  .

000019ef <__c.5733>:
    19ef:	2d 53 79 73 74 65 6d 20 41 64 6d 69 6e 20 4c 65     -System Admin Le
    19ff:	76 65 6c 2d 00                                      vel-.

00001a04 <__c.5674>:
    1a04:	25 73 25 73 00                                      %s%s.

00001a09 <__c.5646>:
    1a09:	25 73 00                                            %s.

00001a0c <__c.5613>:
    1a0c:	25 63 00                                            %c.

00001a0f <__c.5611>:
    1a0f:	32 30 25 73 00                                      20%s.

00001a14 <__c.5589>:
    1a14:	25 73 00                                            %s.

00001a17 <__c.5541>:
    1a17:	34 32 36 34 36 33 36 00                             4264636.

00001a1f <__c.5538>:
    1a1f:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1a2f:	6e 74 65 72 00                                      nter.

00001a34 <__c.5536>:
    1a34:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
    1a44:	6e 74 65 72 00                                      nter.

00001a49 <__c.5532>:
    1a49:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1a59:	6e 74 65 72 00                                      nter.

00001a5e <__c.5530>:
    1a5e:	5f 00                                               _.

00001a60 <__c.5528>:
    1a60:	50 41 53 53 57 4f 52 44 3a 00                       PASSWORD:.

00001a6a <__c.5500>:
    1a6a:	41 63 63 65 73 73 20 44 65 6e 69 65 64 00           Access Denied.

00001a78 <__c.5427>:
    1a78:	54 43 50 2f 49 50 20 45 72 72 6f 72 00              TCP/IP Error.

00001a85 <__c.5425>:
    1a85:	4e 6f 20 52 65 70 6c 79 20 20 20 20 00              No Reply    .

00001a92 <__c.5421>:
    1a92:	20 20 20 20 20 20 20 00                                    .

00001a9a <__c.5418>:
    1a9a:	50 6c 65 61 73 65 20 57 61 69 74 00                 Please Wait.

00001aa6 <__c.5415>:
    1aa6:	25 73 00                                            %s.

00001aa9 <__c.5413>:
    1aa9:	50 55 4d 50 20 54 45 53 54 00                       PUMP TEST.

00001ab3 <__c.5410>:
    1ab3:	25 73 00                                            %s.

00001ab6 <__c.5407>:
    1ab6:	25 73 00                                            %s.

00001ab9 <__c.5405>:
    1ab9:	25 73 00                                            %s.

00001abc <__c.5403>:
    1abc:	25 73 00                                            %s.

00001abf <__c.5399>:
    1abf:	25 73 00                                            %s.

00001ac2 <__c.5395>:
    1ac2:	50 72 6f 73 65 73 00                                Proses.

00001ac9 <__c.5393>:
    1ac9:	2d 4d 4f 50 20 56 6f 75 63 68 65 72 2d 00           -MOP Voucher-.

00001ad7 <__c.5390>:
    1ad7:	50 72 6f 73 65 73 00                                Proses.

00001ade <__c.5388>:
    1ade:	49 44 3a 25 73 00                                   ID:%s.

00001ae4 <__c.5384>:
    1ae4:	5b 2a 5d 42 61 63 6b 20 20 20 20 5b 23 5d 45 78     [*]Back    [#]Ex
    1af4:	69 74 00                                            it.

00001af7 <__c.5382>:
    1af7:	46 49 50 25 73 00                                   FIP%s.

00001afd <__c.5380>:
    1afd:	54 61 70 20 4b 61 72 74 75 20 52 46 49 44 00        Tap Kartu RFID.

00001b0c <__c.5371>:
    1b0c:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1b1c:	6e 74 65 72 00                                      nter.

00001b21 <__c.5369>:
    1b21:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
    1b31:	6e 74 65 72 00                                      nter.

00001b36 <__c.5366>:
    1b36:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1b46:	6e 74 65 72 00                                      nter.

00001b4b <__c.5364>:
    1b4b:	53 75 72 63 68 61 72 67 65 3a 20 20 20 5f 25 00     Surcharge:   _%.

00001b5b <__c.5362>:
    1b5b:	25 73 00                                            %s.

00001b5e <__c.5358>:
    1b5e:	5b 2a 5d 42 61 63 6b 00                             [*]Back.

00001b66 <__c.5353>:
    1b66:	25 64 2e 25 73 00                                   %d.%s.

00001b6c <__c.5351>:
    1b6c:	53 65 6c 65 63 74 20 42 61 6e 6b 00                 Select Bank.

00001b78 <__c.5346>:
    1b78:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1b88:	6e 74 65 72 00                                      nter.

00001b8d <__c.5344>:
    1b8d:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
    1b9d:	6e 74 65 72 00                                      nter.

00001ba2 <__c.5341>:
    1ba2:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1bb2:	6e 74 65 72 00                                      nter.

00001bb7 <__c.5339>:
    1bb7:	5f 00                                               _.

00001bb9 <__c.5337>:
    1bb9:	4b 6f 64 65 20 56 6f 75 63 68 65 72 00              Kode Voucher.

00001bc6 <__c.5328>:
    1bc6:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 20 20 20 20     [*]Back         
    1bd6:	20 20 20 20 00                                          .

00001bdb <__c.5326>:
    1bdb:	32 2e 42 61 6e 6b 20 20 20 20 34 2e 50 75 6d 70     2.Bank    4.Pump
    1beb:	54 65 73 74 00                                      Test.

00001bf0 <__c.5324>:
    1bf0:	31 2e 41 63 63 6f 75 6e 74 20 33 2e 56 6f 75 63     1.Account 3.Vouc
    1c00:	68 65 72 20 00                                      her .

00001c05 <__c.5322>:
    1c05:	20 20 20 53 65 6c 65 63 74 20 50 61 79 6d 65 6e        Select Paymen
    1c15:	74 20 20 20 00                                      t   .

00001c1a <__c.5273>:
    1c1a:	43 52 45 44 49 54 43 41 52 44 00                    CREDITCARD.

00001c25 <__c.5267>:
    1c25:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 20 20 20 20     [*]Back         
    1c35:	20 20 20 20 00                                          .

00001c3a <__c.5265>:
    1c3a:	32 2e 43 72 65 64 69 74 20 43 61 72 64 20 20 20     2.Credit Card   
    1c4a:	20 20 20 20 00                                          .

00001c4f <__c.5263>:
    1c4f:	31 2e 44 65 62 69 74 2f 46 6c 61 73 68 20 43 61     1.Debit/Flash Ca
    1c5f:	72 64 20 20 00                                      rd  .

00001c64 <__c.5261>:
    1c64:	53 65 6c 65 63 74 20 43 61 72 64 20 54 79 70 65     Select Card Type
	...

00001c75 <__c.5228>:
    1c75:	4e 6f 20 43 6f 6e 6e 65 63 74 69 6f 6e 00           No Connection.

00001c83 <__c.5226>:
    1c83:	54 43 50 2f 49 50 20 45 52 52 4f 52 20 00           TCP/IP ERROR .

00001c91 <__c.5219>:
    1c91:	50 72 65 73 73 20 41 6e 79 20 4b 65 79 00           Press Any Key.

00001c9f <__c.5217>:
    1c9f:	43 6d 20 56 6f 6c 3a 25 73 00                       Cm Vol:%s.

00001ca9 <__c.5215>:
    1ca9:	43 4d 20 41 6d 74 3a 25 73 00                       CM Amt:%s.

00001cb3 <__c.5213>:
    1cb3:	50 6f 69 6e 74 73 3a 25 73 00                       Points:%s.

00001cbd <__c.5211>:
    1cbd:	25 73 3a 25 73 00                                   %s:%s.

00001cc3 <__c.5204>:
    1cc3:	50 72 6f 73 65 73 00                                Proses.

00001cca <__c.5202>:
    1cca:	49 44 3a 25 73 00                                   ID:%s.

00001cd0 <__c.5198>:
    1cd0:	5b 2a 5d 42 61 63 6b 20 20 20 20 5b 23 5d 45 78     [*]Back    [#]Ex
    1ce0:	69 74 00                                            it.

00001ce3 <__c.5196>:
    1ce3:	54 61 70 20 4b 61 72 74 75 20 52 46 49 44 00        Tap Kartu RFID.

00001cf2 <__c.5193>:
    1cf2:	5b 2a 5d 42 61 63 6b 20 20 20 20 5b 23 5d 45 78     [*]Back    [#]Ex
    1d02:	69 74 00                                            it.

00001d05 <__c.5191>:
    1d05:	54 61 70 20 4b 61 72 74 75 20 52 46 49 44 00        Tap Kartu RFID.

00001d14 <__c.5189>:
    1d14:	46 49 50 3a 25 73 00                                FIP:%s.

00001d1b <__c.5183>:
    1d1b:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 20 20 20 20     [*]Back         
    1d2b:	20 00                                                .

00001d2d <__c.5181>:
    1d2d:	32 2e 4c 6f 79 61 6c 74 79 20 55 70 64 61 74 65     2.Loyalty Update
    1d3d:	20 00                                                .

00001d3f <__c.5179>:
    1d3f:	31 2e 45 6e 71 75 69 72 79 20 20 20 20 20 20 20     1.Enquiry       
    1d4f:	20 00                                                .

00001d51 <__c.5177>:
    1d51:	20 20 4d 65 6e 75 20 4c 6f 79 61 6c 74 79 20 20       Menu Loyalty  
    1d61:	20 00                                                .

00001d63 <__c.5140>:
    1d63:	4e 6f 20 43 6f 6e 6e 65 63 74 69 6f 6e 00           No Connection.

00001d71 <__c.5138>:
    1d71:	54 43 50 2f 49 50 20 45 52 52 4f 52 20 00           TCP/IP ERROR .

00001d7f <__c.5132>:
    1d7f:	5b 2a 5d 42 61 63 6b 20 20 20 20 5b 23 5d 45 78     [*]Back    [#]Ex
    1d8f:	69 74 00                                            it.

00001d92 <__c.5130>:
    1d92:	54 61 70 20 53 75 70 65 72 76 69 73 6f 72 20 43     Tap Supervisor C
    1da2:	61 72 64 00                                         ard.

00001da6 <__c.5128>:
    1da6:	52 65 50 72 69 6e 74 20 46 49 50 3a 25 73 20 00     RePrint FIP:%s .

00001db6 <__c.5124>:
    1db6:	54 69 64 61 6b 20 41 64 61 20 54 72 61 6e 73 61     Tidak Ada Transa
    1dc6:	6b 73 69 20 00                                      ksi .

00001dcb <__c.5115>:
    1dcb:	41 63 63 65 73 73 20 44 65 6e 69 65 64 00           Access Denied.

00001dd9 <__c.5072>:
    1dd9:	25 2e 32 64 00                                      %.2d.

00001dde <__c.5068>:
    1dde:	2a 29 45 78 69 74 00                                *)Exit.

00001de5 <__c.5066>:
    1de5:	23 29 4f 4b 20 00                                   #)OK .

00001deb <__c.5064>:
    1deb:	20 20 20 20 20 00                                        .

00001df1 <__c.5062>:
    1df1:	46 49 50 3a 5f 00                                   FIP:_.

00001df7 <__c.5057>:
    1df7:	25 64 2e 50 25 73 20 7c 20 25 64 2e 50 25 73 00     %d.P%s | %d.P%s.

00001e07 <__c.5008>:
    1e07:	30 32 25 73 25 73 25 73 25 73 25 73 25 73 25 73     02%s%s%s%s%s%s%s
	...

00001e18 <__c.4865>:
    1e18:	30 00                                               0.

00001e1a <__c.4796>:
    1e1a:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    1e2a:	20 20 20 20 00                                          .

00001e2f <__c.4791>:
    1e2f:	23 25 73 00                                         #%s.

00001e33 <__c.4789>:
    1e33:	25 2e 32 64 00                                      %.2d.

00001e38 <__c.4787>:
    1e38:	40 46 49 50 3a 00                                   @FIP:.

00001e3e <__c.4785>:
    1e3e:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    1e4e:	20 20 20 20 00                                          .

00001e53 <__c.4781>:
    1e53:	50 72 69 6e 74 69 6e 67 20 46 49 50 25 73 20 00     Printing FIP%s .

00001e63 <__c.4757>:
    1e63:	44 3a 25 64 20 43 3a 25 63 20 20 00                 D:%d C:%c  .

00001e6f <__c.4746>:
    1e6f:	25 73 20 25 73 00                                   %s %s.

00001e75 <__c.4718>:
    1e75:	4e 6f 20 50 75 6d 70 20 46 6f 75 6e 64 00           No Pump Found.

00001e83 <__c.4716>:
    1e83:	54 43 50 2f 49 50 20 45 72 72 6f 72 00              TCP/IP Error.

00001e90 <__c.4714>:
    1e90:	50 75 6d 70 46 6f 75 6e 64 00                       PumpFound.

00001e9a <__c.4712>:
    1e9a:	43 6f 6e 6e 65 63 74 65 64 20 20 20 20 20 20 20     Connected       
    1eaa:	20 20 20 20 00                                          .

00001eaf <__c.4707>:
    1eaf:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    1ebf:	20 20 20 00                                            .

00001ec3 <__c.4705>:
    1ec3:	25 73 00                                            %s.

00001ec6 <__c.4700>:
    1ec6:	53 63 61 6e 20 50 75 6d 70 00                       Scan Pump.

00001ed0 <__c.4695>:
    1ed0:	43 6f 6e 6e 65 63 74 20 20 20 20 20 20 20 20 20     Connect         
	...

00001ee1 <__c.4693>:
    1ee1:	43 6f 6e 6e 65 63 74 00                             Connect.

00001ee9 <__c.4691>:
    1ee9:	43 6f 6e 6e 65 63 74 20 20 20 20 20 20 20 20 20     Connect         
	...

00001efa <__c.4663>:
    1efa:	43 4f 4d 25 64 3a 25 69 20 20 20 20 20 20 20 20     COM%d:%i        
    1f0a:	20 20 20 00                                            .

00001f0e <__c.4661>:
    1f0e:	49 6e 69 74 69 61 6c 69 7a 65 20 43 4f 4d 20 2e     Initialize COM .
    1f1e:	2e 2e 00                                            ...

00001f21 <__c.4622>:
    1f21:	0a 47 65 4e 69 55 73 20 54 69 63 6b 65 74 20 50     .GeNiUs Ticket P
    1f31:	72 69 6e 74 65 72 20 0a 20 56 65 72 73 69 6f 6e     rinter . Version
    1f41:	3a 25 73 0a 20 4c 61 73 74 20 55 70 64 61 74 65     :%s. Last Update
    1f51:	20 25 73 20 0a 20 48 61 6e 69 6e 64 6f 20 41 75      %s . Hanindo Au
    1f61:	74 6f 6d 61 74 69 6f 6e 20 53 6f 6c 75 74 69 6f     tomation Solutio
    1f71:	6e 73 20 0a 20 77 77 77 2e 68 61 6e 69 6e 64 6f     ns . www.hanindo
    1f81:	67 72 6f 75 70 2e 63 6f 6d 0a 0a 0a 0a 0a 0a 0a     group.com.......
    1f91:	0a 00                                               ..

00001f93 <__c.4620>:
    1f93:	30 39 2f 30 38 2f 32 30 31 31 00                    09/08/2011.

00001f9e <__c.4618>:
    1f9e:	32 2e 34 32 00                                      2.42.

00001fa3 <__c.4524>:
    1fa3:	46 75 65 6c 69 6e 67 20 40 46 49 50 3a 23 25 64     Fueling @FIP:#%d
	...

00001fb4 <__c.4522>:
    1fb4:	54 72 61 6e 73 61 6b 73 69 20 53 65 6c 65 73 61     Transaksi Selesa
    1fc4:	69 00                                               i.

00001fc6 <__c.4518>:
    1fc6:	49 44 3a 20 25 73 00                                ID: %s.

00001fcd <__c.4516>:
    1fcd:	25 73 00                                            %s.

00001fd0 <__c.4514>:
    1fd0:	50 25 73 20 25 73 20 00                             P%s %s .

00001fd8 <__c.4510>:
    1fd8:	46 49 50 20 54 69 64 61 6b 20 53 69 61 70 20 20     FIP Tidak Siap  
    1fe8:	20 20 00                                              .

00001feb <__c.4507>:
    1feb:	41 75 74 68 6f 72 69 73 61 73 69 20 42 65 72 68     Authorisasi Berh
    1ffb:	61 73 69 6c 00                                      asil.

00002000 <__c.4503>:
    2000:	41 75 74 68 6f 72 69 73 61 73 69 20 47 61 67 61     Authorisasi Gaga
    2010:	6c 20 20 20 00                                      l   .

00002015 <__c.4499>:
    2015:	20 20 20 20 20 20 20 00                                    .

0000201d <__c.4496>:
    201d:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    202d:	20 20 20 20 00                                          .

00002032 <__c.4494>:
    2032:	4d 6f 68 6f 6e 20 54 75 6e 67 67 75 20 20 20 20     Mohon Tunggu    
    2042:	20 20 20 20 00                                          .

00002047 <__c.4492>:
    2047:	25 73 00                                            %s.

0000204a <__c.4490>:
    204a:	50 25 73 20 25 73 20 00                             P%s %s .

00002052 <__c.4487>:
    2052:	43 61 6e 63 65 6c 20 54 72 61 6e 73 61 63 74 69     Cancel Transacti
    2062:	6f 6e 20 20 00                                      on  .

00002067 <__c.4484>:
    2067:	5b 2a 5d 42 61 63 6b 20 5b 30 5d 45 53 43 20 5b     [*]Back [0]ESC [
    2077:	23 5d 4f 4b 00                                      #]OK.

0000207c <__c.4482>:
    207c:	25 73 20 00                                         %s .

00002080 <__c.4480>:
    2080:	20 46 75 6c 6c 00                                    Full.

00002086 <__c.4478>:
    2086:	25 73 20 20 25 73 20 00                             %s  %s .

0000208e <__c.4476>:
    208e:	49 44 3a 20 25 73 00                                ID: %s.

00002095 <__c.4474>:
    2095:	25 73 20 00                                         %s .

00002099 <__c.4470>:
    2099:	5b 2a 5d 42 61 63 6b 20 20 5b 23 5d 4f 4b 20 20     [*]Back  [#]OK  
    20a9:	20 00                                                .

000020ab <__c.4468>:
    20ab:	4f 64 6f 6d 65 74 65 72 3a 5f 20 20 20 20 20 20     Odometer:_      
    20bb:	20 00                                                .

000020bd <__c.4466>:
    20bd:	25 73 20 00                                         %s .

000020c1 <__c.4464>:
    20c1:	20 20 25 73 20 25 73 20 00                            %s %s .

000020ca <__c.4462>:
    20ca:	50 75 6d 70 20 50 72 6f 64 75 63 74 20 41 6d 6f     Pump Product Amo
    20da:	75 6e 74 00                                         unt.

000020de <__c.4460>:
    20de:	50 75 6d 70 20 50 72 6f 64 75 63 74 20 56 6f 6c     Pump Product Vol
    20ee:	75 6d 65 00                                         ume.

000020f2 <__c.4458>:
    20f2:	20 20 54 61 6e 6b 00                                  Tank.

000020f9 <__c.4456>:
    20f9:	20 20 25 73 20 25 73 20 00                            %s %s .

00002102 <__c.4454>:
    2102:	50 75 6d 70 20 50 72 6f 64 75 63 74 20 20 20 46     Pump Product   F
    2112:	75 6c 6c 00                                         ull.

00002116 <__c.4450>:
    2116:	5b 2a 5d 42 61 63 6b 20 20 5b 23 5d 4f 4b 20 20     [*]Back  [#]OK  
    2126:	20 20 20 20 00                                          .

0000212b <__c.4448>:
    212b:	5b 32 5d 41 6d 6f 75 6e 74 3a 5f 20 20 20 20 20     [2]Amount:_     
    213b:	20 20 20 20 00                                          .

00002140 <__c.4446>:
    2140:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    2150:	20 20 20 20 00                                          .

00002155 <__c.4444>:
    2155:	50 25 73 2d 25 73 20 00                             P%s-%s .

0000215d <__c.4442>:
    215d:	5b 2a 5d 42 61 63 6b 20 20 5b 23 5d 4f 4b 20 20     [*]Back  [#]OK  
    216d:	20 20 20 20 00                                          .

00002172 <__c.4440>:
    2172:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    2182:	20 20 20 20 00                                          .

00002187 <__c.4438>:
    2187:	5b 31 5d 56 6f 6c 75 6d 65 3a 5f 20 20 20 20 20     [1]Volume:_     
    2197:	20 20 20 20 00                                          .

0000219c <__c.4436>:
    219c:	50 25 73 2d 25 73 20 00                             P%s-%s .

000021a4 <__c.4433>:
    21a4:	41 00                                               A.

000021a6 <__c.4431>:
    21a6:	41 00                                               A.

000021a8 <__c.4429>:
    21a8:	56 00                                               V.

000021aa <__c.4426>:
    21aa:	5b 2a 5d 42 61 63 6b 20 20 20 20 5b 23 5d 4e 65     [*]Back    [#]Ne
    21ba:	78 74 20 20 00                                      xt  .

000021bf <__c.4424>:
    21bf:	5b 32 5d 41 6d 6f 75 6e 74 20 20 20 20 20 20 20     [2]Amount       
    21cf:	20 20 20 20 00                                          .

000021d4 <__c.4422>:
    21d4:	5b 31 5d 56 6f 6c 75 6d 65 20 20 20 20 20 20 20     [1]Volume       
    21e4:	20 20 20 20 00                                          .

000021e9 <__c.4420>:
    21e9:	50 25 73 2d 25 73 20 00                             P%s-%s .

000021f1 <__c.4417>:
    21f1:	25 73 00                                            %s.

000021f4 <__c.4414>:
    21f4:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 20 20 20 20     [*]Back         
    2204:	20 20 20 20 00                                          .

00002209 <__c.4409>:
    2209:	20 20 20 20 20 00                                        .

0000220f <__c.4407>:
    220f:	25 64 2e 25 73 00                                   %d.%s.

00002215 <__c.4405>:
    2215:	25 73 00                                            %s.

00002218 <__c.4403>:
    2218:	50 6f 6d 70 61 2d 25 73 00                          Pompa-%s.

00002221 <__c.4399>:
    2221:	25 2e 32 64 00                                      %.2d.

00002226 <__c.4397>:
    2226:	25 2e 32 64 00                                      %.2d.

0000222b <__c.4393>:
    222b:	5b 2a 5d 42 61 74 61 6c 20 20 20 20 20 20 20 5b     [*]Batal       [
    223b:	23 5d 4f 4b 00                                      #]OK.

00002240 <__c.4391>:
    2240:	25 73 20 25 73 00                                   %s %s.

00002246 <__c.4389>:
    2246:	25 73 00                                            %s.

00002249 <__c.4387>:
    2249:	25 73 00                                            %s.

0000224c <__c.4385>:
    224c:	25 73 00                                            %s.

0000224f <__c.4382>:
    224f:	4b 61 72 74 75 20 54 65 72 62 61 74 61 73 20 20     Kartu Terbatas  
    225f:	20 20 20 20 00                                          .

00002264 <__c.4380>:
    2264:	54 69 64 61 6b 20 54 65 72 64 61 66 74 61 72 20     Tidak Terdaftar 
    2274:	20 20 20 20 00                                          .

00002279 <__c.4377>:
    2279:	44 61 74 61 20 52 65 63 65 69 76 65 64 20 20 20     Data Received   
    2289:	20 20 20 20 00                                          .

0000228e <__c.4374>:
    228e:	54 43 50 2f 49 50 20 45 72 72 6f 72 20 20 20 20     TCP/IP Error    
    229e:	20 20 20 20 00                                          .

000022a3 <__c.4372>:
    22a3:	53 65 6e 64 69 6e 67 20 46 61 69 6c 65 64 20 20     Sending Failed  
    22b3:	20 20 20 20 00                                          .

000022b8 <__c.4369>:
    22b8:	20 20 20 20 20 20 20 00                                    .

000022c0 <__c.4364>:
    22c0:	50 72 6f 73 65 73 00                                Proses.

000022c7 <__c.4362>:
    22c7:	49 44 3a 25 73 00                                   ID:%s.

000022cd <__c.4360>:
    22cd:	20 20 20 4c 6f 63 61 6c 20 41 63 63 6f 75 6e 74        Local Account
    22dd:	20 20 20 00                                            .

000022e1 <__c.4196>:
    22e1:	25 2e 32 64 00                                      %.2d.

000022e6 <__c.4148>:
    22e6:	46 39 36 38 43 46 46 42 00                          F968CFFB.

000022ef <__c.4146>:
    22ef:	25 73 00                                            %s.

000022f2 <__c.4143>:
    22f2:	25 73 25 73 25 73 00                                %s%s%s.

000022f9 <__c.4141>:
    22f9:	25 73 25 73 25 73 25 73 00                          %s%s%s%s.

00002302 <__c.4138>:
    2302:	25 73 25 73 00                                      %s%s.

00002307 <__c.4135>:
    2307:	25 73 00                                            %s.

0000230a <__c.4133>:
    230a:	46 30 30 30 30 30 30 30 45 31 32 33 34 35 36 46     F0000000E123456F
    231a:	46 46 46 46 00                                      FFFF.

0000231f <__c.4131>:
    231f:	25 73 25 73 25 64 00                                %s%s%d.

00002326 <__c.4129>:
    2326:	25 73 25 73 25 64 00                                %s%s%d.

0000232d <__c.4126>:
    232d:	25 73 00                                            %s.

00002330 <__c.4123>:
    2330:	25 73 25 73 00                                      %s%s.

00002335 <__c.4121>:
    2335:	25 73 25 73 00                                      %s%s.

0000233a <__c.4119>:
    233a:	25 73 25 73 00                                      %s%s.

0000233f <__c.4116>:
    233f:	25 73 25 73 00                                      %s%s.

00002344 <__c.4113>:
    2344:	25 73 25 73 00                                      %s%s.

00002349 <__c.4110>:
    2349:	25 73 00                                            %s.

0000234c <__c.4105>:
    234c:	25 73 31 00                                         %s1.

00002350 <__c.4102>:
    2350:	25 2e 32 58 00                                      %.2X.

00002355 <__c.4100>:
    2355:	25 2e 33 64 2e 25 2e 33 64 2e 25 2e 33 64 2e 25     %.3d.%.3d.%.3d.%
    2365:	2e 33 64 00                                         .3d.

00002369 <__c.4098>:
    2369:	25 2e 33 64 2e 25 2e 33 64 2e 25 2e 33 64 2e 25     %.3d.%.3d.%.3d.%
    2379:	2e 33 64 00                                         .3d.

0000237d <__c.4096>:
    237d:	25 2e 32 64 00                                      %.2d.

00002382 <__c.4094>:
    2382:	25 2e 32 64 00                                      %.2d.

00002387 <__c.4006>:
    2387:	25 73 20 25 73 00                                   %s %s.

0000238d <__c.4004>:
    238d:	32 2e 34 32 00                                      2.42.

00002392 <__c.4002>:
    2392:	47 65 4e 69 55 73 00                                GeNiUs.

00002399 <__c.3988>:
    2399:	50 72 65 73 73 20 61 6e 79 20 6b 65 79 2e 2e 20     Press any key.. 
    23a9:	20 20 20 20 00                                          .

000023ae <__c.3976>:
    23ae:	5b 31 5d 53 6c 61 76 65 20 5b 32 5d 53 74 61 6e     [1]Slave [2]Stan
    23be:	64 61 6c 6f 6e 65 00                                dalone.

000023c5 <__c.3896>:
    23c5:	3e 00                                               >.

000023c7 <__c.3891>:
    23c7:	25 2e 32 64 00                                      %.2d.

000023cc <__c.3889>:
    23cc:	25 2e 32 64 00                                      %.2d.

000023d1 <__c.3887>:
    23d1:	30 00                                               0.

000023d3 <__c.3885>:
    23d3:	31 00                                               1.

000023d5 <__c.3877>:
    23d5:	25 64 00                                            %d.

000023d8 <__c.3872>:
    23d8:	25 2e 32 64 00                                      %.2d.

000023dd <__c.3867>:
    23dd:	25 73 00                                            %s.

000023e0 <__c.3862>:
    23e0:	25 73 00                                            %s.

000023e3 <__c.3857>:
    23e3:	25 73 00                                            %s.

000023e6 <__c.3855>:
    23e6:	3c 00                                               <.

000023e8 <__c.3787>:
    23e8:	3c 4f 4b 3e 00                                      <OK>.

000023ed <__c.3782>:
    23ed:	25 64 00                                            %d.

000023f0 <__c.3780>:
    23f0:	25 64 00                                            %d.

000023f3 <__c.3769>:
    23f3:	25 64 00                                            %d.

000023f6 <__c.3758>:
    23f6:	3c 53 61 76 69 6e 67 3e 00                          <Saving>.

000023ff <__c.3756>:
    23ff:	4c 65 6e 67 74 68 3a 25 64 00                       Length:%d.

00002409 <__c.3572>:
    2409:	25 73 00                                            %s.

0000240c <__c.3514>:
    240c:	25 73 00                                            %s.

0000240f <__c.3512>:
    240f:	25 73 00                                            %s.

00002412 <__c.3510>:
    2412:	25 73 00                                            %s.

00002415 <__c.3508>:
    2415:	25 73 00                                            %s.

00002418 <__c.3506>:
    2418:	25 2e 32 64 00                                      %.2d.

0000241d <__c.3504>:
    241d:	25 64 00                                            %d.

00002420 <__c.3502>:
    2420:	25 73 00                                            %s.

00002423 <__c.3500>:
    2423:	25 73 00                                            %s.

00002426 <__c.3498>:
    2426:	25 73 00                                            %s.

00002429 <__c.3496>:
    2429:	25 64 00                                            %d.

0000242c <__c.3494>:
    242c:	4e 2f 41 00                                         N/A.

00002430 <__c.3395>:
    2430:	25 64 00                                            %d.

00002433 <__c.3393>:
    2433:	25 73 00                                            %s.

00002436 <__c.3391>:
    2436:	25 73 00                                            %s.

00002439 <__c.3308>:
    2439:	54 69 64 61 6b 20 41 64 61 20 54 72 61 6e 73 61     Tidak Ada Transa
    2449:	6b 73 69 20 00                                      ksi .

0000244e <__c.3305>:
    244e:	54 6f 74 61 6c 69 7a 65 72 41 6c 6c 20 20 20 20     TotalizerAll    
    245e:	20 00                                                .

00002460 <__c.3302>:
    2460:	43 6c 65 61 72 20 44 61 74 61 20 54 6f 74 61 6c     Clear Data Total
    2470:	69 7a 65 72 00                                      izer.

00002475 <__c.3290>:
    2475:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
	...

00002486 <__c.3287>:
    2486:	52 65 61 64 79 2e 2e 2e 20 20 20 20 20 20 20 20     Ready...        
    2496:	20 20 20 20 00                                          .

0000249b <__c.3284>:
    249b:	52 65 61 64 79 2e 2e 2e 20 20 20 20 20 20 20 20     Ready...        
    24ab:	20 20 20 20 00                                          .

000024b0 <__c.3282>:
    24b0:	4e 6f 20 52 65 73 70 6f 6e 73 65 2e 2e 20 20 20     No Response..   
    24c0:	20 20 20 20 00                                          .

000024c5 <__c.3279>:
    24c5:	50 6c 65 61 73 65 20 57 61 69 74 2e 2e 20 20 20     Please Wait..   
    24d5:	20 20 20 20 00                                          .

000024da <__c.3276>:
    24da:	52 65 61 64 79 2e 2e 2e 20 20 20 20 20 20 20 20     Ready...        
    24ea:	20 20 20 20 00                                          .

000024ef <__c.3273>:
    24ef:	54 69 64 61 6b 20 41 64 61 20 54 72 61 6e 73 61     Tidak Ada Transa
    24ff:	6b 73 69 20 00                                      ksi .

00002504 <__c.3268>:
    2504:	53 65 64 61 6e 67 50 72 6f 73 65 73 00              SedangProses.

00002511 <__c.3265>:
    2511:	34 33 35 36 41 33 31 41 00                          4356A31A.

0000251a <__c.1762>:
    251a:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    252a:	20 20 20 20 00                                          .

0000252f <__c.1760>:
    252f:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    253f:	20 20 20 20 00                                          .

00002544 <__c.1758>:
    2544:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    2554:	20 20 20 20 00                                          .

00002559 <__c.1756>:
    2559:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    2569:	20 20 20 20 00                                          .

0000256e <__alphanum>:
    256e:	30 20 2e 00 00 00 31 2e 2c 3f 21 00 32 61 62 63     0 ....1.,?!.2abc
    257e:	00 00 33 64 65 66 00 00 34 67 68 69 00 00 35 6a     ..3def..4ghi..5j
    258e:	6b 6c 00 00 36 6d 6e 6f 00 00 37 70 71 72 73 00     kl..6mno..7pqrs.
    259e:	38 74 75 76 00 00 39 77 78 79 7a 00 30 20 2e 00     8tuv..9wxyz.0 ..
    25ae:	00 00 31 26 40 2b 2d 00 32 41 42 43 00 00 33 44     ..1&@+-.2ABC..3D
    25be:	45 46 00 00 34 47 48 49 00 00 35 4a 4b 4c 00 00     EF..4GHI..5JKL..
    25ce:	36 4d 4e 4f 00 00 37 50 51 52 53 00 38 54 55 56     6MNO..7PQRS.8TUV
    25de:	00 00 39 57 58 59 5a 00                             ..9WXYZ.

000025e6 <__maxchar>:
    25e6:	02 04 03 03 03 03 03 04 03 04                       ..........

000025f0 <__ctors_end>:
    25f0:	11 24       	eor	r1, r1
    25f2:	1f be       	out	0x3f, r1	; 63
    25f4:	cf ef       	ldi	r28, 0xFF	; 255
    25f6:	d0 e1       	ldi	r29, 0x10	; 16
    25f8:	de bf       	out	0x3e, r29	; 62
    25fa:	cd bf       	out	0x3d, r28	; 61

000025fc <__do_copy_data>:
    25fc:	11 e0       	ldi	r17, 0x01	; 1
    25fe:	a0 e0       	ldi	r26, 0x00	; 0
    2600:	b1 e0       	ldi	r27, 0x01	; 1
    2602:	e4 e1       	ldi	r30, 0x14	; 20
    2604:	fb e5       	ldi	r31, 0x5B	; 91
    2606:	01 e0       	ldi	r16, 0x01	; 1
    2608:	0b bf       	out	0x3b, r16	; 59
    260a:	02 c0       	rjmp	.+4      	; 0x2610 <__do_copy_data+0x14>
    260c:	07 90       	elpm	r0, Z+
    260e:	0d 92       	st	X+, r0
    2610:	ac 35       	cpi	r26, 0x5C	; 92
    2612:	b1 07       	cpc	r27, r17
    2614:	d9 f7       	brne	.-10     	; 0x260c <__do_copy_data+0x10>

00002616 <__do_clear_bss>:
    2616:	1c e0       	ldi	r17, 0x0C	; 12
    2618:	ac e5       	ldi	r26, 0x5C	; 92
    261a:	b1 e0       	ldi	r27, 0x01	; 1
    261c:	01 c0       	rjmp	.+2      	; 0x2620 <.do_clear_bss_start>

0000261e <.do_clear_bss_loop>:
    261e:	1d 92       	st	X+, r1

00002620 <.do_clear_bss_start>:
    2620:	a3 3b       	cpi	r26, 0xB3	; 179
    2622:	b1 07       	cpc	r27, r17
    2624:	e1 f7       	brne	.-8      	; 0x261e <.do_clear_bss_loop>
    2626:	0e 94 cd 13 	call	0x279a	; 0x279a <main>
    262a:	0c 94 88 ad 	jmp	0x15b10	; 0x15b10 <_exit>

0000262e <__bad_interrupt>:
    262e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00002632 <systemOnReset>:


void systemOnReset(){
     char SubMenu,KeyPressed,KeyChar,IsMasterReset=False;

     IsPowerOn=False;
    2632:	10 92 ba 02 	sts	0x02BA, r1
     if (MCUCSR & 1){   // Power-on Reset
    2636:	04 b6       	in	r0, 0x34	; 52
    2638:	00 fe       	sbrs	r0, 0
    263a:	30 c0       	rjmp	.+96     	; 0x269c <systemOnReset+0x6a>
         MCUCSR=0;lcd_printf(1,1,PSTR("PowerOn"));//Wiznet Blm Ready
    263c:	14 be       	out	0x34, r1	; 52
    263e:	81 e0       	ldi	r24, 0x01	; 1
    2640:	61 e0       	ldi	r22, 0x01	; 1
    2642:	46 ea       	ldi	r20, 0xA6	; 166
    2644:	52 e0       	ldi	r21, 0x02	; 2
    2646:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		 IsPowerOn=True;
    264a:	81 e0       	ldi	r24, 0x01	; 1
    264c:	80 93 ba 02 	sts	0x02BA, r24
         //Master Reset Detection
		 PORTF = 0xFF; DDRF = 0xF0;
    2650:	8f ef       	ldi	r24, 0xFF	; 255
    2652:	80 93 62 00 	sts	0x0062, r24
    2656:	80 ef       	ldi	r24, 0xF0	; 240
    2658:	80 93 61 00 	sts	0x0061, r24
		 KeyPressed=_key_scan(1);
    265c:	81 e0       	ldi	r24, 0x01	; 1
    265e:	0e 94 f6 a5 	call	0x14bec	; 0x14bec <_key_scan>
		 KeyChar= _key_btn(KeyPressed);
    2662:	0e 94 57 a5 	call	0x14aae	; 0x14aae <_key_btn>
		 if (KeyChar=='5'){
    2666:	85 33       	cpi	r24, 0x35	; 53
    2668:	89 f5       	brne	.+98     	; 0x26cc <systemOnReset+0x9a>
		     system_beep(2);
    266a:	82 e0       	ldi	r24, 0x02	; 2
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	0e 94 00 16 	call	0x2c00	; 0x2c00 <system_beep>
		     IsMasterReset=True;
			 TCCR1B |= (1 << WGM12);
    2672:	8e b5       	in	r24, 0x2e	; 46
    2674:	88 60       	ori	r24, 0x08	; 8
    2676:	8e bd       	out	0x2e, r24	; 46
			 TIMSK |= (1 << OCIE1A);
    2678:	87 b7       	in	r24, 0x37	; 55
    267a:	80 61       	ori	r24, 0x10	; 16
    267c:	87 bf       	out	0x37, r24	; 55
			 sei();          //1/14745600=0,06781684028uS *1400 = 100uS 65535-1400+1=64136
    267e:	78 94       	sei
			 OCR1A   = 15624;//49911 -->0,33847384982639 ms
    2680:	88 e0       	ldi	r24, 0x08	; 8
    2682:	9d e3       	ldi	r25, 0x3D	; 61
    2684:	9b bd       	out	0x2b, r25	; 43
    2686:	8a bd       	out	0x2a, r24	; 42
			 TCCR1B |= ((1 << CS10) | (1 << CS11));
    2688:	8e b5       	in	r24, 0x2e	; 46
    268a:	83 60       	ori	r24, 0x03	; 3
    268c:	8e bd       	out	0x2e, r24	; 46
		     while(IsMasterReset==True){
			       SubMenu=FMenuMaster();
    268e:	0e 94 1f 73 	call	0xe63e	; 0xe63e <FMenuMaster>
				   if (SubMenu==MENU_DONE){
    2692:	81 30       	cpi	r24, 0x01	; 1
    2694:	e1 f7       	brne	.-8      	; 0x268e <systemOnReset+0x5c>
				       IsMasterReset=False;
					   lcd_clear();
    2696:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
    269a:	18 c0       	rjmp	.+48     	; 0x26cc <systemOnReset+0x9a>
				   }
			 }		 
		 }
         }
     else 
     if (MCUCSR & 2){   // External Reset
    269c:	04 b6       	in	r0, 0x34	; 52
    269e:	01 fe       	sbrs	r0, 1
    26a0:	06 c0       	rjmp	.+12     	; 0x26ae <systemOnReset+0x7c>
         MCUCSR=0;lcd_printf(1,1,PSTR("External"));
    26a2:	14 be       	out	0x34, r1	; 52
    26a4:	81 e0       	ldi	r24, 0x01	; 1
    26a6:	61 e0       	ldi	r22, 0x01	; 1
    26a8:	4d e9       	ldi	r20, 0x9D	; 157
    26aa:	52 e0       	ldi	r21, 0x02	; 2
    26ac:	0d c0       	rjmp	.+26     	; 0x26c8 <systemOnReset+0x96>
        }
     else 
     if (MCUCSR & 4){   // Brown-Out Reset
    26ae:	04 b6       	in	r0, 0x34	; 52
    26b0:	02 fe       	sbrs	r0, 2
    26b2:	06 c0       	rjmp	.+12     	; 0x26c0 <systemOnReset+0x8e>
         MCUCSR=0;lcd_printf(1,1,PSTR("BrownOut"));
    26b4:	14 be       	out	0x34, r1	; 52
    26b6:	81 e0       	ldi	r24, 0x01	; 1
    26b8:	61 e0       	ldi	r22, 0x01	; 1
    26ba:	44 e9       	ldi	r20, 0x94	; 148
    26bc:	52 e0       	ldi	r21, 0x02	; 2
    26be:	04 c0       	rjmp	.+8      	; 0x26c8 <systemOnReset+0x96>
         }
     else		  // Watchdog Reset
        {
         lcd_printf(1,1,PSTR("WatchDog"));
    26c0:	81 e0       	ldi	r24, 0x01	; 1
    26c2:	61 e0       	ldi	r22, 0x01	; 1
    26c4:	4b e8       	ldi	r20, 0x8B	; 139
    26c6:	52 e0       	ldi	r21, 0x02	; 2
    26c8:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
        };
     MCUCSR=0;		  
    26cc:	14 be       	out	0x34, r1	; 52
    26ce:	80 ee       	ldi	r24, 0xE0	; 224
    26d0:	9e e2       	ldi	r25, 0x2E	; 46
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    26d2:	20 e7       	ldi	r18, 0x70	; 112
    26d4:	31 e0       	ldi	r19, 0x01	; 1
    26d6:	f9 01       	movw	r30, r18
    26d8:	31 97       	sbiw	r30, 0x01	; 1
    26da:	f1 f7       	brne	.-4      	; 0x26d8 <systemOnReset+0xa6>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26dc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26de:	d9 f7       	brne	.-10     	; 0x26d6 <systemOnReset+0xa4>
	 _delay_ms(1200);
}
    26e0:	08 95       	ret

000026e2 <SystemInit>:


void SystemInit(){
	unsigned int __delay =300;
	lcd_init();
    26e2:	0e 94 d2 a3 	call	0x147a4	; 0x147a4 <lcd_init>
	lcd_clear();
    26e6:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
	BackLightTrig();
    26ea:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <BackLightTrig>
	systemOnReset();
    26ee:	0e 94 19 13 	call	0x2632	; 0x2632 <systemOnReset>

	lcd_printf(4, 1, PSTR("Initialize... "));
    26f2:	84 e0       	ldi	r24, 0x04	; 4
    26f4:	61 e0       	ldi	r22, 0x01	; 1
    26f6:	4c e7       	ldi	r20, 0x7C	; 124
    26f8:	52 e0       	ldi	r21, 0x02	; 2
    26fa:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
    26fe:	88 eb       	ldi	r24, 0xB8	; 184
    2700:	9b e0       	ldi	r25, 0x0B	; 11
    2702:	20 e7       	ldi	r18, 0x70	; 112
    2704:	31 e0       	ldi	r19, 0x01	; 1
    2706:	f9 01       	movw	r30, r18
    2708:	31 97       	sbiw	r30, 0x01	; 1
    270a:	f1 f7       	brne	.-4      	; 0x2708 <SystemInit+0x26>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    270c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    270e:	d9 f7       	brne	.-10     	; 0x2706 <SystemInit+0x24>
	_delay_ms(__delay);
	PORTA = 0XFF;		// Buffer for PORTA
    2710:	9f ef       	ldi	r25, 0xFF	; 255
    2712:	9b bb       	out	0x1b, r25	; 27
	DDRA = 0xFF;		// Pin 3 out (SS _SPI_SLAVE)
    2714:	9a bb       	out	0x1a, r25	; 26
	sbi(PORTA, 3);		// Disable SS _SPI_SLAVE
    2716:	db 9a       	sbi	0x1b, 3	; 27

	//Buzzer PORTB.5
	PORTB = 0xFF;DDRB = 0xFF;
    2718:	98 bb       	out	0x18, r25	; 24
    271a:	97 bb       	out	0x17, r25	; 23
	PORTD = 0b00001101;
    271c:	8d e0       	ldi	r24, 0x0D	; 13
    271e:	82 bb       	out	0x12, r24	; 18
    DDRD =  0b00001001;
    2720:	89 e0       	ldi	r24, 0x09	; 9
    2722:	81 bb       	out	0x11, r24	; 17

	TWBR = 0xFF;
    2724:	90 93 70 00 	sts	0x0070, r25
    //MMC
	PORTE = 0x0E;		// Buffer for PORTE
    2728:	8e e0       	ldi	r24, 0x0E	; 14
    272a:	83 b9       	out	0x03, r24	; 3
	DDRE = 0x0E;		// Pin 3 out (SS _SPI_MMC), pin 2 out (HB)
    272c:	82 b9       	out	0x02, r24	; 2
	sbi(PORTE, 3);		// Disable SS _SPI_MMC
    272e:	1b 9a       	sbi	0x03, 3	; 3
	cbi(PORTE, 2);		// HB on
    2730:	1a 98       	cbi	0x03, 2	; 3

	//Keypad
	PORTF = 0xFF;		// Buffer for PORTF
    2732:	90 93 62 00 	sts	0x0062, r25
	DDRF = 0xF0;		// 4 bit row, 4 bit column
    2736:	80 ef       	ldi	r24, 0xF0	; 240
    2738:	80 93 61 00 	sts	0x0061, r24

  	_spi_init(0,1);//Slave
    273c:	80 e0       	ldi	r24, 0x00	; 0
    273e:	61 e0       	ldi	r22, 0x01	; 1
    2740:	0e 94 66 a6 	call	0x14ccc	; 0x14ccc <_spi_init>
	sbi(DDRB,3);sbi(PORTB,3);//MISO Output
    2744:	bb 9a       	sbi	0x17, 3	; 23
    2746:	c3 9a       	sbi	0x18, 3	; 24
	cbi(DDRB,2);sbi(PORTB,2);//MOSI Input
    2748:	ba 98       	cbi	0x17, 2	; 23
    274a:	c2 9a       	sbi	0x18, 2	; 24
	cbi(DDRB,1);sbi(PORTB,1);//SCK  Input
    274c:	b9 98       	cbi	0x17, 1	; 23
    274e:	c1 9a       	sbi	0x18, 1	; 24

	TCCR1B |= (1 << WGM12);
    2750:	8e b5       	in	r24, 0x2e	; 46
    2752:	88 60       	ori	r24, 0x08	; 8
    2754:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1 << OCIE1A);
    2756:	87 b7       	in	r24, 0x37	; 55
    2758:	80 61       	ori	r24, 0x10	; 16
    275a:	87 bf       	out	0x37, r24	; 55
	sei();          //1/14745600=0,06781684028uS *1400 = 100uS 65535-1400+1=64136
    275c:	78 94       	sei
	OCR1A   = 15624;//49911 -->0,33847384982639 ms
    275e:	88 e0       	ldi	r24, 0x08	; 8
    2760:	9d e3       	ldi	r25, 0x3D	; 61
    2762:	9b bd       	out	0x2b, r25	; 43
    2764:	8a bd       	out	0x2a, r24	; 42
	TCCR1B |= ((1 << CS10) | (1 << CS11));
    2766:	8e b5       	in	r24, 0x2e	; 46
    2768:	83 60       	ori	r24, 0x03	; 3
    276a:	8e bd       	out	0x2e, r24	; 46

	SendSlaveCommand(SC_SLAVE,ST_NONE);
    276c:	81 e0       	ldi	r24, 0x01	; 1
    276e:	60 e0       	ldi	r22, 0x00	; 0
    2770:	0e 94 91 5f 	call	0xbf22	; 0xbf22 <SendSlaveCommand>
	
	InitComport();
    2774:	0e 94 47 79 	call	0xf28e	; 0xf28e <InitComport>
	_LIGHT_SET;
    2778:	81 e0       	ldi	r24, 0x01	; 1
    277a:	80 93 ae 02 	sts	0x02AE, r24
    277e:	10 92 af 02 	sts	0x02AF, r1
    2782:	80 91 65 00 	lds	r24, 0x0065
    2786:	8d 7f       	andi	r24, 0xFD	; 253
    2788:	80 93 65 00 	sts	0x0065, r24
	InitPrinter();
    278c:	0e 94 2a 45 	call	0x8a54	; 0x8a54 <InitPrinter>
    InitializeConnection();
    2790:	0e 94 e4 90 	call	0x121c8	; 0x121c8 <InitializeConnection>
	lcd_clear();
    2794:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
}
    2798:	08 95       	ret

0000279a <main>:

//Master4 =1+20++2+1
void SystemInit();
//Program Utama
int main(){
	SystemInit();
    279a:	0e 94 71 13 	call	0x26e2	; 0x26e2 <SystemInit>
	while(1){
	//FTestChar();
	//TestUserInput();
    FMenuIdle();
    279e:	0e 94 9b a1 	call	0x14336	; 0x14336 <FMenuIdle>
    27a2:	fd cf       	rjmp	.-6      	; 0x279e <main+0x4>

000027a4 <__vector_12>:
	  strDispenserName3,
	  strDispenserName4,
	  strDispenserName5,
};

ISR(TIMER1_COMPA_vect){//Timer Overflow 1ms
    27a4:	1f 92       	push	r1
    27a6:	0f 92       	push	r0
    27a8:	0f b6       	in	r0, 0x3f	; 63
    27aa:	0f 92       	push	r0
    27ac:	11 24       	eor	r1, r1
    27ae:	2f 93       	push	r18
    27b0:	6f 93       	push	r22
    27b2:	7f 93       	push	r23
    27b4:	8f 93       	push	r24
    27b6:	9f 93       	push	r25
	if(__key_light == 1){
    27b8:	80 91 ae 02 	lds	r24, 0x02AE
    27bc:	81 30       	cpi	r24, 0x01	; 1
    27be:	81 f4       	brne	.+32     	; 0x27e0 <__vector_12+0x3c>
		__key_lgtcnt++;
    27c0:	80 91 af 02 	lds	r24, 0x02AF
    27c4:	8f 5f       	subi	r24, 0xFF	; 255
    27c6:	80 93 af 02 	sts	0x02AF, r24
		if(__key_lgtcnt == 150){
    27ca:	86 39       	cpi	r24, 0x96	; 150
    27cc:	49 f4       	brne	.+18     	; 0x27e0 <__vector_12+0x3c>
		   __key_light = 0; 
    27ce:	10 92 ae 02 	sts	0x02AE, r1
		   __key_lgtcnt = 0; 
    27d2:	10 92 af 02 	sts	0x02AF, r1
		   sbi(PORTG, 1);
    27d6:	80 91 65 00 	lds	r24, 0x0065
    27da:	82 60       	ori	r24, 0x02	; 2
    27dc:	80 93 65 00 	sts	0x0065, r24
		   }
	}

	//Beep
	if (TimBeep>0){
    27e0:	80 91 bc 01 	lds	r24, 0x01BC
    27e4:	88 23       	and	r24, r24
    27e6:	31 f0       	breq	.+12     	; 0x27f4 <__vector_12+0x50>
	    TimBeep--;
    27e8:	81 50       	subi	r24, 0x01	; 1
    27ea:	80 93 bc 01 	sts	0x01BC, r24
		DDRB=(DDRB|0b00100000);
    27ee:	bd 9a       	sbi	0x17, 5	; 23
	    PORTB=(PORTB&0b11011111);
    27f0:	c5 98       	cbi	0x18, 5	; 24
    27f2:	05 c0       	rjmp	.+10     	; 0x27fe <__vector_12+0x5a>
	    }
	else{PORTB=(PORTB|~PORTB);
    27f4:	98 b3       	in	r25, 0x18	; 24
    27f6:	88 b3       	in	r24, 0x18	; 24
    27f8:	80 95       	com	r24
    27fa:	89 2b       	or	r24, r25
    27fc:	88 bb       	out	0x18, r24	; 24
		}
    //LocalAccount
	TimLocAcc++;
    27fe:	80 91 ba 01 	lds	r24, 0x01BA
    2802:	8f 5f       	subi	r24, 0xFF	; 255
    2804:	80 93 ba 01 	sts	0x01BA, r24
	//DisplaTicker
    TimTicker++;
    2808:	80 91 90 01 	lds	r24, 0x0190
    280c:	8f 5f       	subi	r24, 0xFF	; 255
    280e:	80 93 90 01 	sts	0x0190, r24
	TimPressed++;
    2812:	20 91 91 01 	lds	r18, 0x0191
    2816:	2f 5f       	subi	r18, 0xFF	; 255
    2818:	20 93 91 01 	sts	0x0191, r18
	if ((TimPressed%5)==0){
    281c:	82 2f       	mov	r24, r18
    281e:	65 e0       	ldi	r22, 0x05	; 5
    2820:	0e 94 ea a9 	call	0x153d4	; 0x153d4 <__udivmodqi4>
    2824:	99 23       	and	r25, r25
    2826:	71 f4       	brne	.+28     	; 0x2844 <__vector_12+0xa0>
	    PORTE = PORTE^0x04;
    2828:	83 b1       	in	r24, 0x03	; 3
    282a:	94 e0       	ldi	r25, 0x04	; 4
    282c:	89 27       	eor	r24, r25
    282e:	83 b9       	out	0x03, r24	; 3
	    TimDisplay++;
    2830:	80 91 92 01 	lds	r24, 0x0192
    2834:	8f 5f       	subi	r24, 0xFF	; 255
    2836:	80 93 92 01 	sts	0x0192, r24
		TimPrintBusy++;
    283a:	80 91 b6 01 	lds	r24, 0x01B6
    283e:	8f 5f       	subi	r24, 0xFF	; 255
    2840:	80 93 b6 01 	sts	0x01B6, r24
	}
	if ((TimPressed%PRESSED_DELAY)==0){
    2844:	82 2f       	mov	r24, r18
    2846:	6a e0       	ldi	r22, 0x0A	; 10
    2848:	0e 94 ea a9 	call	0x153d4	; 0x153d4 <__udivmodqi4>
    284c:	99 23       	and	r25, r25
    284e:	29 f4       	brne	.+10     	; 0x285a <__vector_12+0xb6>
	     ProcTimeOut++;
    2850:	80 91 bb 01 	lds	r24, 0x01BB
    2854:	8f 5f       	subi	r24, 0xFF	; 255
    2856:	80 93 bb 01 	sts	0x01BB, r24
	}
	TimSend++;
    285a:	80 91 78 0c 	lds	r24, 0x0C78
    285e:	8f 5f       	subi	r24, 0xFF	; 255
    2860:	80 93 78 0c 	sts	0x0C78, r24
}
    2864:	9f 91       	pop	r25
    2866:	8f 91       	pop	r24
    2868:	7f 91       	pop	r23
    286a:	6f 91       	pop	r22
    286c:	2f 91       	pop	r18
    286e:	0f 90       	pop	r0
    2870:	0f be       	out	0x3f, r0	; 63
    2872:	0f 90       	pop	r0
    2874:	1f 90       	pop	r1
    2876:	18 95       	reti

00002878 <RePrintStandalone>:

char RePrintStandalone(char FIPAddr){
     char Result=PS_NONE;

   return Result;
}
    2878:	86 e1       	ldi	r24, 0x16	; 22
    287a:	08 95       	ret

0000287c <GetPumpStatusLabel>:


char GetPumpStatusLabel(char xPumpStatus){
     char Result;

	 switch(xPumpStatus){
    287c:	e8 2f       	mov	r30, r24
    287e:	f0 e0       	ldi	r31, 0x00	; 0
    2880:	ee 31       	cpi	r30, 0x1E	; 30
    2882:	f1 05       	cpc	r31, r1
    2884:	70 f5       	brcc	.+92     	; 0x28e2 <GetPumpStatusLabel+0x66>
    2886:	ea 5b       	subi	r30, 0xBA	; 186
    2888:	ff 4f       	sbci	r31, 0xFF	; 255
    288a:	ee 0f       	add	r30, r30
    288c:	ff 1f       	adc	r31, r31
    288e:	05 90       	lpm	r0, Z+
    2890:	f4 91       	lpm	r31, Z+
    2892:	e0 2d       	mov	r30, r0
    2894:	09 94       	ijmp
    2896:	81 e3       	ldi	r24, 0x31	; 49
    2898:	08 95       	ret
    289a:	85 e4       	ldi	r24, 0x45	; 69
    289c:	08 95       	ret
    289e:	82 e3       	ldi	r24, 0x32	; 50
    28a0:	08 95       	ret
	 case PUMP_ST1: 
	      Result='1';
		  break;
	 case PUMP_ST2: 
	 	  Result='2';
		  break;
    28a2:	83 e3       	ldi	r24, 0x33	; 51
    28a4:	08 95       	ret
     case PUMP_ST3:
	 	  Result='3';
		  break;	
    28a6:	84 e3       	ldi	r24, 0x34	; 52
    28a8:	08 95       	ret
	 case PUMP_ST4: 
          Result='4';
		  break;
    28aa:	85 e3       	ldi	r24, 0x35	; 53
    28ac:	08 95       	ret
	 case PUMP_ST5: 
	 	  Result='5';
		  break;
    28ae:	89 e6       	ldi	r24, 0x69	; 105
    28b0:	08 95       	ret
	 case PUMP_OFF: 
	 case PW_ONLINE:
	 	  Result='i';
		  break;
    28b2:	8e e6       	ldi	r24, 0x6E	; 110
    28b4:	08 95       	ret
     case PW_CALL:
	 case PUMP_CALL: 
	 	  Result='n';
		  break;     
    28b6:	81 e6       	ldi	r24, 0x61	; 97
    28b8:	08 95       	ret
	 case PUMP_AUTH: 
	 	  Result='a';
		  break;
    28ba:	84 e6       	ldi	r24, 0x64	; 100
    28bc:	08 95       	ret
     case PW_AUTHORIZED:
	 case PUMP_BUSY: 
	 	  Result='d';
		  break;
    28be:	8f e4       	ldi	r24, 0x4F	; 79
    28c0:	08 95       	ret
	 case PUMP_PEOT: 
	 	  Result='O';
		  break;
    28c2:	86 e4       	ldi	r24, 0x46	; 70
    28c4:	08 95       	ret
     case PW_END_DELIVERY:
	 case PUMP_FEOT: 
	 	  Result='F';
		  break;
    28c6:	83 e5       	ldi	r24, 0x53	; 83
    28c8:	08 95       	ret
	 case PUMP_STOP: 
	 	  Result='S';
		  break;
    28ca:	8d e2       	ldi	r24, 0x2D	; 45
    28cc:	08 95       	ret
	 case PUMP_NONE:
	 case PW_DISCONNECT:
	 	  Result='-';
		  break;
    28ce:	80 e5       	ldi	r24, 0x50	; 80
    28d0:	08 95       	ret
     case PS_PRINT_READY:
	      Result='P';
 	      break;
    28d2:	89 e4       	ldi	r24, 0x49	; 73
    28d4:	08 95       	ret
     case PS_PRINTED:
	      Result='I';
 	      break;
    28d6:	86 e5       	ldi	r24, 0x56	; 86
    28d8:	08 95       	ret
     case PS_VOID:
	      Result='V';
	      break;
    28da:	84 e5       	ldi	r24, 0x54	; 84
    28dc:	08 95       	ret
     case PS_TOTALIZER:
	      Result='T';
	      break;
    28de:	84 e7       	ldi	r24, 0x74	; 116
    28e0:	08 95       	ret
     case PS_FINISH_TOTALIZER:
	      Result='t';
	      break;
    28e2:	88 e7       	ldi	r24, 0x78	; 120
	 default:
          Result='x';
		  break;         	 
	 }
  return Result;	 
}
    28e4:	08 95       	ret

000028e6 <SendPoolingCommand>:
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
    28e6:	80 93 a7 05 	sts	0x05A7, r24
	 PoolMsg=plMsg;
    28ea:	60 93 d3 0b 	sts	0x0BD3, r22
     IsControlPooling=True;
    28ee:	81 e0       	ldi	r24, 0x01	; 1
    28f0:	80 93 84 01 	sts	0x0184, r24
}
    28f4:	08 95       	ret

000028f6 <ScanEDCFlow>:
	 RemZeroLead(strMsgID);
	 Result=atoi(strMsgID);
  return Result;
}

void ScanEDCFlow(char data){
    28f6:	28 2f       	mov	r18, r24


	 //uart(0,1,data);

     //EDC-MSG
     if (data==0x02){
    28f8:	82 30       	cpi	r24, 0x02	; 2
    28fa:	39 f4       	brne	.+14     	; 0x290a <ScanEDCFlow+0x14>
	     IsEDCFlow=True;
    28fc:	81 e0       	ldi	r24, 0x01	; 1
    28fe:	80 93 a3 02 	sts	0x02A3, r24
		 nFlow=0;
    2902:	10 92 a2 02 	sts	0x02A2, r1
    2906:	10 92 a1 02 	sts	0x02A1, r1
	 }//FillMessage
     if (IsEDCFlow==True){
    290a:	80 91 a3 02 	lds	r24, 0x02A3
    290e:	81 30       	cpi	r24, 0x01	; 1
    2910:	69 f4       	brne	.+26     	; 0x292c <ScanEDCFlow+0x36>
	     rcv_trans[nFlow]=data;
    2912:	80 91 a1 02 	lds	r24, 0x02A1
    2916:	90 91 a2 02 	lds	r25, 0x02A2
    291a:	fc 01       	movw	r30, r24
    291c:	e3 5e       	subi	r30, 0xE3	; 227
    291e:	f6 4f       	sbci	r31, 0xF6	; 246
    2920:	20 83       	st	Z, r18
		 nFlow++;
    2922:	01 96       	adiw	r24, 0x01	; 1
    2924:	90 93 a2 02 	sts	0x02A2, r25
    2928:	80 93 a1 02 	sts	0x02A1, r24
	 }//CloseMessage
	 if ((data==0x03)||(nFlow>=MSG03_LENGTH)){
    292c:	23 30       	cpi	r18, 0x03	; 3
    292e:	41 f0       	breq	.+16     	; 0x2940 <ScanEDCFlow+0x4a>
    2930:	80 91 a1 02 	lds	r24, 0x02A1
    2934:	90 91 a2 02 	lds	r25, 0x02A2
    2938:	8d 34       	cpi	r24, 0x4D	; 77
    293a:	91 05       	cpc	r25, r1
    293c:	08 f4       	brcc	.+2      	; 0x2940 <ScanEDCFlow+0x4a>
    293e:	99 c0       	rjmp	.+306    	; 0x2a72 <ScanEDCFlow+0x17c>
	     //for(i=0;i<nFlow;i++){uart(0,1,rcv_trans[i]);}
	     IsEDCFlow=False;
    2940:	10 92 a3 02 	sts	0x02A3, r1
		 EDCMsgCode=((rcv_trans[1]-'0')*10)+(rcv_trans[2]-'0');
    2944:	30 91 1f 09 	lds	r19, 0x091F
    2948:	30 51       	subi	r19, 0x10	; 16
    294a:	80 91 1e 09 	lds	r24, 0x091E
    294e:	2a e0       	ldi	r18, 0x0A	; 10
    2950:	82 9f       	mul	r24, r18
    2952:	c0 01       	movw	r24, r0
    2954:	11 24       	eor	r1, r1
    2956:	38 0f       	add	r19, r24

		 if (EDCMsgCode==0x03){
    2958:	33 30       	cpi	r19, 0x03	; 3
    295a:	09 f0       	breq	.+2      	; 0x295e <ScanEDCFlow+0x68>
    295c:	65 c0       	rjmp	.+202    	; 0x2a28 <ScanEDCFlow+0x132>
    295e:	e0 e2       	ldi	r30, 0x20	; 32
    2960:	f9 e0       	ldi	r31, 0x09	; 9
    2962:	a7 e8       	ldi	r26, 0x87	; 135
    2964:	bc e0       	ldi	r27, 0x0C	; 12
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    2966:	81 91       	ld	r24, Z+
    2968:	8d 93       	st	X+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    296a:	89 e0       	ldi	r24, 0x09	; 9
    296c:	e6 32       	cpi	r30, 0x26	; 38
    296e:	f8 07       	cpc	r31, r24
    2970:	d1 f7       	brne	.-12     	; 0x2966 <ScanEDCFlow+0x70>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    2972:	10 92 8d 0c 	sts	0x0C8D, r1
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    2976:	80 81       	ld	r24, Z
    2978:	80 93 b9 07 	sts	0x07B9, r24
    297c:	81 81       	ldd	r24, Z+1	; 0x01
    297e:	80 93 ba 07 	sts	0x07BA, r24
	 }Dest[Length]=0;
    2982:	10 92 bb 07 	sts	0x07BB, r1
    2986:	32 96       	adiw	r30, 0x02	; 2
    2988:	a3 ea       	ldi	r26, 0xA3	; 163
    298a:	bc e0       	ldi	r27, 0x0C	; 12
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    298c:	81 91       	ld	r24, Z+
    298e:	8d 93       	st	X+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    2990:	89 e0       	ldi	r24, 0x09	; 9
    2992:	e7 33       	cpi	r30, 0x37	; 55
    2994:	f8 07       	cpc	r31, r24
    2996:	d1 f7       	brne	.-12     	; 0x298c <ScanEDCFlow+0x96>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    2998:	10 92 b2 0c 	sts	0x0CB2, r1
    299c:	a9 e8       	ldi	r26, 0x89	; 137
    299e:	bb e0       	ldi	r27, 0x0B	; 11
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    29a0:	81 91       	ld	r24, Z+
    29a2:	8d 93       	st	X+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    29a4:	89 e0       	ldi	r24, 0x09	; 9
    29a6:	ea 34       	cpi	r30, 0x4A	; 74
    29a8:	f8 07       	cpc	r31, r24
    29aa:	d1 f7       	brne	.-12     	; 0x29a0 <ScanEDCFlow+0xaa>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    29ac:	10 92 9c 0b 	sts	0x0B9C, r1
    29b0:	20 e0       	ldi	r18, 0x00	; 0
    29b2:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    29b4:	f9 01       	movw	r30, r18
    29b6:	e0 51       	subi	r30, 0x10	; 16
    29b8:	f8 4f       	sbci	r31, 0xF8	; 248
    29ba:	d9 01       	movw	r26, r18
    29bc:	a3 5e       	subi	r26, 0xE3	; 227
    29be:	b6 4f       	sbci	r27, 0xF6	; 246
    29c0:	9d 96       	adiw	r26, 0x2d	; 45
    29c2:	8c 91       	ld	r24, X
    29c4:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    29c6:	2f 5f       	subi	r18, 0xFF	; 255
    29c8:	3f 4f       	sbci	r19, 0xFF	; 255
    29ca:	26 30       	cpi	r18, 0x06	; 6
    29cc:	31 05       	cpc	r19, r1
    29ce:	91 f7       	brne	.-28     	; 0x29b4 <ScanEDCFlow+0xbe>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    29d0:	10 92 f6 07 	sts	0x07F6, r1
    29d4:	20 e0       	ldi	r18, 0x00	; 0
    29d6:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    29d8:	f9 01       	movw	r30, r18
    29da:	ed 5a       	subi	r30, 0xAD	; 173
    29dc:	f8 4f       	sbci	r31, 0xF8	; 248
    29de:	d9 01       	movw	r26, r18
    29e0:	a3 5e       	subi	r26, 0xE3	; 227
    29e2:	b6 4f       	sbci	r27, 0xF6	; 246
    29e4:	d3 96       	adiw	r26, 0x33	; 51
    29e6:	8c 91       	ld	r24, X
    29e8:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    29ea:	2f 5f       	subi	r18, 0xFF	; 255
    29ec:	3f 4f       	sbci	r19, 0xFF	; 255
    29ee:	2a 30       	cpi	r18, 0x0A	; 10
    29f0:	31 05       	cpc	r19, r1
    29f2:	91 f7       	brne	.-28     	; 0x29d8 <ScanEDCFlow+0xe2>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    29f4:	10 92 5d 07 	sts	0x075D, r1
    29f8:	20 e0       	ldi	r18, 0x00	; 0
    29fa:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    29fc:	f9 01       	movw	r30, r18
    29fe:	e1 54       	subi	r30, 0x41	; 65
    2a00:	f4 4f       	sbci	r31, 0xF4	; 244
    2a02:	d9 01       	movw	r26, r18
    2a04:	a3 5e       	subi	r26, 0xE3	; 227
    2a06:	b6 4f       	sbci	r27, 0xF6	; 246
    2a08:	dd 96       	adiw	r26, 0x3d	; 61
    2a0a:	8c 91       	ld	r24, X
    2a0c:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    2a0e:	2f 5f       	subi	r18, 0xFF	; 255
    2a10:	3f 4f       	sbci	r19, 0xFF	; 255
    2a12:	2e 30       	cpi	r18, 0x0E	; 14
    2a14:	31 05       	cpc	r19, r1
    2a16:	91 f7       	brne	.-28     	; 0x29fc <ScanEDCFlow+0x106>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    2a18:	10 92 cd 0b 	sts	0x0BCD, r1
             StrPosCopy(rcv_trans,strCardType,11,15);
             StrPosCopy(rcv_trans,strCardID,26,19);
             StrPosCopy(rcv_trans,strApprovalCode,45,6);
             StrPosCopy(rcv_trans,strInvoiceNumber,51,10);
             StrPosCopy(rcv_trans,strDateTime,61,14);
		     IsEDCApproved=True;//Sending Message 92
    2a1c:	81 e0       	ldi	r24, 0x01	; 1
    2a1e:	80 93 99 01 	sts	0x0199, r24
			 IsPrintApprovalCode=True;
    2a22:	80 93 9a 01 	sts	0x019A, r24
    2a26:	08 95       	ret
	    }else
		 if (EDCMsgCode==0x04){
    2a28:	34 30       	cpi	r19, 0x04	; 4
    2a2a:	19 f5       	brne	.+70     	; 0x2a72 <ScanEDCFlow+0x17c>
    2a2c:	e0 e2       	ldi	r30, 0x20	; 32
    2a2e:	f9 e0       	ldi	r31, 0x09	; 9
    2a30:	a0 ef       	ldi	r26, 0xF0	; 240
    2a32:	b7 e0       	ldi	r27, 0x07	; 7
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    2a34:	81 91       	ld	r24, Z+
    2a36:	8d 93       	st	X+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    2a38:	89 e0       	ldi	r24, 0x09	; 9
    2a3a:	e6 32       	cpi	r30, 0x26	; 38
    2a3c:	f8 07       	cpc	r31, r24
    2a3e:	d1 f7       	brne	.-12     	; 0x2a34 <ScanEDCFlow+0x13e>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    2a40:	10 92 f6 07 	sts	0x07F6, r1
    2a44:	a3 e5       	ldi	r26, 0x53	; 83
    2a46:	b7 e0       	ldi	r27, 0x07	; 7
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    2a48:	81 91       	ld	r24, Z+
    2a4a:	8d 93       	st	X+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    2a4c:	89 e0       	ldi	r24, 0x09	; 9
    2a4e:	e0 33       	cpi	r30, 0x30	; 48
    2a50:	f8 07       	cpc	r31, r24
    2a52:	d1 f7       	brne	.-12     	; 0x2a48 <ScanEDCFlow+0x152>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    2a54:	10 92 5d 07 	sts	0x075D, r1
    2a58:	af eb       	ldi	r26, 0xBF	; 191
    2a5a:	bb e0       	ldi	r27, 0x0B	; 11
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    2a5c:	81 91       	ld	r24, Z+
    2a5e:	8d 93       	st	X+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    2a60:	89 e0       	ldi	r24, 0x09	; 9
    2a62:	ee 33       	cpi	r30, 0x3E	; 62
    2a64:	f8 07       	cpc	r31, r24
    2a66:	d1 f7       	brne	.-12     	; 0x2a5c <ScanEDCFlow+0x166>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    2a68:	10 92 cd 0b 	sts	0x0BCD, r1
	    }else
		 if (EDCMsgCode==0x04){
             StrPosCopy(rcv_trans,strApprovalCode,3,6);
             StrPosCopy(rcv_trans,strInvoiceNumber,9,10);
             StrPosCopy(rcv_trans,strDateTime,19,14);
			 IsVoidTransaction=True;
    2a6c:	81 e0       	ldi	r24, 0x01	; 1
    2a6e:	80 93 9b 01 	sts	0x019B, r24
    2a72:	08 95       	ret

00002a74 <ScanHiddenKeyFlow>:
	    }
    }//MSGDetection
}

void ScanHiddenKeyFlow(char KeyIn){
}
    2a74:	08 95       	ret

00002a76 <ScanRFIDFlow>:


void ScanRFIDFlow(char data){//                   12 11 10 9  8  7  6  5  4  3  2  1  0
    2a76:	98 2f       	mov	r25, r24
    2a78:	ef e6       	ldi	r30, 0x6F	; 111
    2a7a:	f8 e0       	ldi	r31, 0x08	; 8
     char i=0,strSerial[20]; //Shift Data Serial; 02 32 33 44 31 30 41 36 43 0D 0A 0A 03 
	                                                //2 50 51 65 68 68 68 54 67 13 10 3

	 for(i=0;i<19;i++){
        strSerialFlow[19-i]=strSerialFlow[18-i];   
    2a7c:	80 81       	ld	r24, Z
    2a7e:	81 83       	std	Z+1, r24	; 0x01
    2a80:	31 97       	sbiw	r30, 0x01	; 1

void ScanRFIDFlow(char data){//                   12 11 10 9  8  7  6  5  4  3  2  1  0
     char i=0,strSerial[20]; //Shift Data Serial; 02 32 33 44 31 30 41 36 43 0D 0A 0A 03 
	                                                //2 50 51 65 68 68 68 54 67 13 10 3

	 for(i=0;i<19;i++){
    2a82:	88 e0       	ldi	r24, 0x08	; 8
    2a84:	ec 35       	cpi	r30, 0x5C	; 92
    2a86:	f8 07       	cpc	r31, r24
    2a88:	c9 f7       	brne	.-14     	; 0x2a7c <ScanRFIDFlow+0x6>
        strSerialFlow[19-i]=strSerialFlow[18-i];   
	 }  strSerialFlow[0]=data;
    2a8a:	9f 01       	movw	r18, r30
    2a8c:	2f 5f       	subi	r18, 0xFF	; 255
    2a8e:	3f 4f       	sbci	r19, 0xFF	; 255
    2a90:	91 83       	std	Z+1, r25	; 0x01
	 //Detection
	 if ((strSerialFlow[11]==0x02)&&(strSerialFlow[1]==0x0A)&&(strSerialFlow[0]==0x03)){
    2a92:	84 85       	ldd	r24, Z+12	; 0x0c
    2a94:	82 30       	cpi	r24, 0x02	; 2
    2a96:	f9 f4       	brne	.+62     	; 0x2ad6 <ScanRFIDFlow+0x60>
    2a98:	80 91 5e 08 	lds	r24, 0x085E
    2a9c:	8a 30       	cpi	r24, 0x0A	; 10
    2a9e:	d9 f4       	brne	.+54     	; 0x2ad6 <ScanRFIDFlow+0x60>
    2aa0:	93 30       	cpi	r25, 0x03	; 3
    2aa2:	c9 f4       	brne	.+50     	; 0x2ad6 <ScanRFIDFlow+0x60>
    2aa4:	f9 01       	movw	r30, r18
    2aa6:	3a 96       	adiw	r30, 0x0a	; 10
    2aa8:	a1 e5       	ldi	r26, 0x51	; 81
    2aaa:	bc e0       	ldi	r27, 0x0C	; 12
		for(i=0;i<8;i++) strRFID[i]=strSerialFlow[10-i];
    2aac:	80 81       	ld	r24, Z
    2aae:	8d 93       	st	X+, r24
    2ab0:	31 97       	sbiw	r30, 0x01	; 1
    2ab2:	88 e0       	ldi	r24, 0x08	; 8
    2ab4:	ef 35       	cpi	r30, 0x5F	; 95
    2ab6:	f8 07       	cpc	r31, r24
    2ab8:	c9 f7       	brne	.-14     	; 0x2aac <ScanRFIDFlow+0x36>
        strRFID[8]=0;
    2aba:	10 92 59 0c 	sts	0x0C59, r1
	    IsRFIDDetected=True;
    2abe:	81 e0       	ldi	r24, 0x01	; 1
    2ac0:	80 93 98 01 	sts	0x0198, r24
	      }
     }      
}

void BackLightTrig(){    
     __key_light = 1; 
    2ac4:	80 93 ae 02 	sts	0x02AE, r24
	 __key_lgtcnt = 0; 
    2ac8:	10 92 af 02 	sts	0x02AF, r1
	 PORTG=PORTG&0b11111101;
    2acc:	80 91 65 00 	lds	r24, 0x0065
    2ad0:	8d 7f       	andi	r24, 0xFD	; 253
    2ad2:	80 93 65 00 	sts	0x0065, r24
    2ad6:	08 95       	ret

00002ad8 <__vector_18>:
	if (IFType==IT_SLAVE)ScanEDCFlow(dataSPI);
	else
	if (IFType==IT_STANDALONE)ScanStandaloneFlow(dataSPI);
}

ISR(USART0_RX_vect){
    2ad8:	1f 92       	push	r1
    2ada:	0f 92       	push	r0
    2adc:	0f b6       	in	r0, 0x3f	; 63
    2ade:	0f 92       	push	r0
    2ae0:	11 24       	eor	r1, r1
    2ae2:	8f 93       	push	r24
    2ae4:	9f 93       	push	r25
	char dataRX0,IsSPI=False;
	dataRX0= UDR0;
    2ae6:	9c b1       	in	r25, 0x0c	; 12
	//PrintBusyDetection
	if ((IsBusyIdlePrinting==True)||(IsBusyFreePrinting==True)){
    2ae8:	80 91 b2 01 	lds	r24, 0x01B2
    2aec:	81 30       	cpi	r24, 0x01	; 1
    2aee:	21 f0       	breq	.+8      	; 0x2af8 <__vector_18+0x20>
    2af0:	80 91 b4 01 	lds	r24, 0x01B4
    2af4:	81 30       	cpi	r24, 0x01	; 1
    2af6:	51 f4       	brne	.+20     	; 0x2b0c <__vector_18+0x34>
	    if (dataRX0==19)IsBusyPrint=True;
    2af8:	93 31       	cpi	r25, 0x13	; 19
    2afa:	21 f4       	brne	.+8      	; 0x2b04 <__vector_18+0x2c>
    2afc:	81 e0       	ldi	r24, 0x01	; 1
    2afe:	80 93 b3 01 	sts	0x01B3, r24
    2b02:	04 c0       	rjmp	.+8      	; 0x2b0c <__vector_18+0x34>
		else 
	    if (dataRX0==17)IsBusyPrint=False;	
    2b04:	91 31       	cpi	r25, 0x11	; 17
    2b06:	11 f4       	brne	.+4      	; 0x2b0c <__vector_18+0x34>
    2b08:	10 92 b3 01 	sts	0x01B3, r1
	}
}
    2b0c:	9f 91       	pop	r25
    2b0e:	8f 91       	pop	r24
    2b10:	0f 90       	pop	r0
    2b12:	0f be       	out	0x3f, r0	; 63
    2b14:	0f 90       	pop	r0
    2b16:	1f 90       	pop	r1
    2b18:	18 95       	reti

00002b1a <ScanCommand>:

char ScanCommand(char *strFlow,char *fCommand){
     char Result;
	 Result=False;
   return Result;
}
    2b1a:	80 e0       	ldi	r24, 0x00	; 0
    2b1c:	08 95       	ret

00002b1e <ConfigProtocol>:
	 }
	 uart_printf(1,1,PSTR(">"));
	 //End
}

void ConfigProtocol(char dataIn){
    2b1e:	28 2f       	mov	r18, r24
     static char Conflow[7];
    //Configuration Data Request 
	if ((Conflow[6]=='i')&&(Conflow[5]=='C')&&(Conflow[4]=='o')&&(Conflow[3]=='n')&&(Conflow[2]=='f')&&(Conflow[1]=='?')&&(Conflow[0]==0x0D)&&(dataIn==0x0A)){
    2b20:	80 91 9f 02 	lds	r24, 0x029F
    2b24:	89 36       	cpi	r24, 0x69	; 105
    2b26:	e9 f4       	brne	.+58     	; 0x2b62 <ConfigProtocol+0x44>
    2b28:	80 91 9e 02 	lds	r24, 0x029E
    2b2c:	83 34       	cpi	r24, 0x43	; 67
    2b2e:	c9 f4       	brne	.+50     	; 0x2b62 <ConfigProtocol+0x44>
    2b30:	80 91 9d 02 	lds	r24, 0x029D
    2b34:	8f 36       	cpi	r24, 0x6F	; 111
    2b36:	a9 f4       	brne	.+42     	; 0x2b62 <ConfigProtocol+0x44>
    2b38:	80 91 9c 02 	lds	r24, 0x029C
    2b3c:	8e 36       	cpi	r24, 0x6E	; 110
    2b3e:	89 f4       	brne	.+34     	; 0x2b62 <ConfigProtocol+0x44>
    2b40:	80 91 9b 02 	lds	r24, 0x029B
    2b44:	86 36       	cpi	r24, 0x66	; 102
    2b46:	69 f4       	brne	.+26     	; 0x2b62 <ConfigProtocol+0x44>
    2b48:	80 91 9a 02 	lds	r24, 0x029A
    2b4c:	8f 33       	cpi	r24, 0x3F	; 63
    2b4e:	49 f4       	brne	.+18     	; 0x2b62 <ConfigProtocol+0x44>
    2b50:	80 91 99 02 	lds	r24, 0x0299
    2b54:	8d 30       	cpi	r24, 0x0D	; 13
    2b56:	29 f4       	brne	.+10     	; 0x2b62 <ConfigProtocol+0x44>
    2b58:	2a 30       	cpi	r18, 0x0A	; 10
    2b5a:	19 f4       	brne	.+6      	; 0x2b62 <ConfigProtocol+0x44>
	     //SendConfigParamater();        
		 ConfigCommand=CC_SEND_CONFIG;
    2b5c:	82 e0       	ldi	r24, 0x02	; 2
    2b5e:	80 93 b0 01 	sts	0x01B0, r24
	}

	if (IsConfigFlow==True){        
    2b62:	80 91 85 01 	lds	r24, 0x0185
    2b66:	81 30       	cpi	r24, 0x01	; 1
    2b68:	69 f4       	brne	.+26     	; 0x2b84 <ConfigProtocol+0x66>
	    rcv_trans[char_count]=dataIn;
    2b6a:	80 91 89 01 	lds	r24, 0x0189
    2b6e:	90 91 8a 01 	lds	r25, 0x018A
    2b72:	fc 01       	movw	r30, r24
    2b74:	e3 5e       	subi	r30, 0xE3	; 227
    2b76:	f6 4f       	sbci	r31, 0xF6	; 246
    2b78:	20 83       	st	Z, r18
	    char_count++; 
    2b7a:	01 96       	adiw	r24, 0x01	; 1
    2b7c:	90 93 8a 01 	sts	0x018A, r25
    2b80:	80 93 89 01 	sts	0x0189, r24
	}
	if ((Conflow[0]==0x04)&&(dataIn==0x40)){
    2b84:	80 91 99 02 	lds	r24, 0x0299
    2b88:	84 30       	cpi	r24, 0x04	; 4
    2b8a:	51 f4       	brne	.+20     	; 0x2ba0 <ConfigProtocol+0x82>
    2b8c:	20 34       	cpi	r18, 0x40	; 64
    2b8e:	e9 f4       	brne	.+58     	; 0x2bca <ConfigProtocol+0xac>
	     IsConfigFlow=True;
    2b90:	81 e0       	ldi	r24, 0x01	; 1
    2b92:	80 93 85 01 	sts	0x0185, r24
		 char_count=0;
    2b96:	10 92 8a 01 	sts	0x018A, r1
    2b9a:	10 92 89 01 	sts	0x0189, r1
    2b9e:	15 c0       	rjmp	.+42     	; 0x2bca <ConfigProtocol+0xac>
	}
	//SavingData
	if ((Conflow[0]==0x05)&&(dataIn==0x50)){
    2ba0:	85 30       	cpi	r24, 0x05	; 5
    2ba2:	99 f4       	brne	.+38     	; 0x2bca <ConfigProtocol+0xac>
    2ba4:	20 35       	cpi	r18, 0x50	; 80
    2ba6:	89 f4       	brne	.+34     	; 0x2bca <ConfigProtocol+0xac>
	     transLength=char_count;
    2ba8:	80 91 89 01 	lds	r24, 0x0189
    2bac:	90 91 8a 01 	lds	r25, 0x018A
    2bb0:	90 93 8c 01 	sts	0x018C, r25
    2bb4:	80 93 8b 01 	sts	0x018B, r24
		 char_count=0;
    2bb8:	10 92 8a 01 	sts	0x018A, r1
    2bbc:	10 92 89 01 	sts	0x0189, r1
	     IsConfigFlow=False;
    2bc0:	10 92 85 01 	sts	0x0185, r1
		 ConfigCommand=CC_SAVE_CONFIG;
    2bc4:	81 e0       	ldi	r24, 0x01	; 1
    2bc6:	80 93 b0 01 	sts	0x01B0, r24
		 //SaveConfigParameter();
	}

	//Shifting
	Conflow[6]=Conflow[5];
    2bca:	80 91 9e 02 	lds	r24, 0x029E
    2bce:	80 93 9f 02 	sts	0x029F, r24
	Conflow[5]=Conflow[4];
    2bd2:	80 91 9d 02 	lds	r24, 0x029D
    2bd6:	80 93 9e 02 	sts	0x029E, r24
	Conflow[4]=Conflow[3];
    2bda:	80 91 9c 02 	lds	r24, 0x029C
    2bde:	80 93 9d 02 	sts	0x029D, r24
	Conflow[3]=Conflow[2];
    2be2:	80 91 9b 02 	lds	r24, 0x029B
    2be6:	80 93 9c 02 	sts	0x029C, r24
	Conflow[2]=Conflow[1];
    2bea:	80 91 9a 02 	lds	r24, 0x029A
    2bee:	80 93 9b 02 	sts	0x029B, r24
	Conflow[1]=Conflow[0];
    2bf2:	80 91 99 02 	lds	r24, 0x0299
    2bf6:	80 93 9a 02 	sts	0x029A, r24
	Conflow[0]=dataIn;
    2bfa:	20 93 99 02 	sts	0x0299, r18

}
    2bfe:	08 95       	ret

00002c00 <system_beep>:
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    2c00:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    2c02:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    2c04:	80 93 bc 01 	sts	0x01BC, r24
}
    2c08:	08 95       	ret

00002c0a <systemRestart>:
	 iRestart=0;
	 while(iRestart<100){
	       strRestart[iRestart]=iRestart;
	       iRestart++;	 
	 }
}
    2c0a:	08 95       	ret

00002c0c <Low>:

char Low(char X){
     char Result;
	 Result=(0x0F&X);
	 return Result;
}
    2c0c:	8f 70       	andi	r24, 0x0F	; 15
    2c0e:	08 95       	ret

00002c10 <High>:
char High(char X){
     char Result;
	 Result=((X>>4)&(0x0F));
	 return Result;
}
    2c10:	82 95       	swap	r24
    2c12:	8f 70       	andi	r24, 0x0F	; 15
    2c14:	08 95       	ret

00002c16 <Str>:
char Str(char H){
    2c16:	98 2f       	mov	r25, r24
unsigned char Conv=0;
        if ((H>=0)&&(H<=9)) Conv='0'+H;
    2c18:	8a 30       	cpi	r24, 0x0A	; 10
    2c1a:	10 f4       	brcc	.+4      	; 0x2c20 <Str+0xa>
    2c1c:	80 5d       	subi	r24, 0xD0	; 208
    2c1e:	08 95       	ret
        else
        if ((H>=0x0A)&&(H<=0x0F)) Conv='A'+(H-10);    
    2c20:	8a 50       	subi	r24, 0x0A	; 10
    2c22:	86 30       	cpi	r24, 0x06	; 6
    2c24:	10 f0       	brcs	.+4      	; 0x2c2a <Str+0x14>
    2c26:	80 e0       	ldi	r24, 0x00	; 0
    2c28:	08 95       	ret
    2c2a:	89 2f       	mov	r24, r25
    2c2c:	89 5c       	subi	r24, 0xC9	; 201
        return (Conv);
}
    2c2e:	08 95       	ret

00002c30 <charToHex>:

void charToHex(char X, char *Result){
    2c30:	ff 92       	push	r15
    2c32:	0f 93       	push	r16
    2c34:	1f 93       	push	r17
    2c36:	f8 2e       	mov	r15, r24
    2c38:	8b 01       	movw	r16, r22
     Result[0]=Str(High(X));
    2c3a:	82 95       	swap	r24
    2c3c:	8f 70       	andi	r24, 0x0F	; 15
    2c3e:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <Str>
    2c42:	f8 01       	movw	r30, r16
    2c44:	80 83       	st	Z, r24
	 Result[1]=Str(Low(X));
    2c46:	8f 2d       	mov	r24, r15
    2c48:	8f 70       	andi	r24, 0x0F	; 15
    2c4a:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <Str>
    2c4e:	f8 01       	movw	r30, r16
    2c50:	81 83       	std	Z+1, r24	; 0x01
	 Result[2]=0;
    2c52:	12 82       	std	Z+2, r1	; 0x02
	 
}
    2c54:	1f 91       	pop	r17
    2c56:	0f 91       	pop	r16
    2c58:	ff 90       	pop	r15
    2c5a:	08 95       	ret

00002c5c <strToInt>:

char strToInt(char *str){
    2c5c:	fc 01       	movw	r30, r24
     char Result;
     Result=(((str[0]-'0')*10) +(str[0]-'0'));
    2c5e:	80 81       	ld	r24, Z
    2c60:	2a e0       	ldi	r18, 0x0A	; 10
    2c62:	82 9f       	mul	r24, r18
    2c64:	90 01       	movw	r18, r0
    2c66:	11 24       	eor	r1, r1
    2c68:	80 51       	subi	r24, 0x10	; 16
	 return Result;
}
    2c6a:	82 0f       	add	r24, r18
    2c6c:	08 95       	ret

00002c6e <intToStr>:

void intToStr(char X, char *str){
    2c6e:	58 2f       	mov	r21, r24
    2c70:	fb 01       	movw	r30, r22
     char R,P,S;
	 R=X/100;
    2c72:	64 e6       	ldi	r22, 0x64	; 100
    2c74:	0e 94 ea a9 	call	0x153d4	; 0x153d4 <__udivmodqi4>
    2c78:	a8 2f       	mov	r26, r24
	 P=(X%100)/10;
    2c7a:	85 2f       	mov	r24, r21
    2c7c:	0e 94 ea a9 	call	0x153d4	; 0x153d4 <__udivmodqi4>
    2c80:	89 2f       	mov	r24, r25
    2c82:	6a e0       	ldi	r22, 0x0A	; 10
    2c84:	0e 94 ea a9 	call	0x153d4	; 0x153d4 <__udivmodqi4>
    2c88:	48 2f       	mov	r20, r24
	 S=X-(R*100)-(P*10);
    2c8a:	8c e9       	ldi	r24, 0x9C	; 156
    2c8c:	9f ef       	ldi	r25, 0xFF	; 255
    2c8e:	a8 9f       	mul	r26, r24
    2c90:	80 2d       	mov	r24, r0
    2c92:	11 24       	eor	r1, r1
    2c94:	85 0f       	add	r24, r21
    2c96:	26 ef       	ldi	r18, 0xF6	; 246
    2c98:	3f ef       	ldi	r19, 0xFF	; 255
    2c9a:	42 9f       	mul	r20, r18
    2c9c:	90 2d       	mov	r25, r0
    2c9e:	11 24       	eor	r1, r1
    2ca0:	98 0f       	add	r25, r24
	 if (X>=100){
    2ca2:	54 36       	cpi	r21, 0x64	; 100
    2ca4:	40 f0       	brcs	.+16     	; 0x2cb6 <intToStr+0x48>
	     str[0]=('0'+R);
    2ca6:	a0 5d       	subi	r26, 0xD0	; 208
    2ca8:	a0 83       	st	Z, r26
	     str[1]=('0'+P);
    2caa:	40 5d       	subi	r20, 0xD0	; 208
    2cac:	41 83       	std	Z+1, r20	; 0x01
	     str[2]=('0'+S);
    2cae:	90 5d       	subi	r25, 0xD0	; 208
    2cb0:	92 83       	std	Z+2, r25	; 0x02
	     str[3]=0;
    2cb2:	13 82       	std	Z+3, r1	; 0x03
    2cb4:	08 95       	ret
	 if ((X>=10)&&(X>100)){
	     str[0]=('0'+P);
	     str[1]=('0'+S);
	     str[2]=0;
	 }else 
	 if (X<=10){
    2cb6:	5b 30       	cpi	r21, 0x0B	; 11
    2cb8:	18 f4       	brcc	.+6      	; 0x2cc0 <intToStr+0x52>
	     str[0]=('0'+S);
    2cba:	90 5d       	subi	r25, 0xD0	; 208
    2cbc:	90 83       	st	Z, r25
	     str[1]=0;
    2cbe:	11 82       	std	Z+1, r1	; 0x01
    2cc0:	08 95       	ret

00002cc2 <UpdateClientIP>:
	 for(i=0;i<4;i++){
	     zeroIP(IP_blok[i],strIP[i]);
	 }
     sprintf_P(strClientIP,PSTR("%s.%s.%s.%s"),strIP[0],strIP[1],strIP[2],strIP[3]);
	 */
}
    2cc2:	08 95       	ret

00002cc4 <UpdateServerIP>:
	 for(i=0;i<4;i++){
	     zeroIP(IP_blok[i],strIP[i]);
	 }
		 sprintf_P(strServerIP,PSTR("%s.%s.%s.%s"),strIP[0],strIP[1],strIP[2],strIP[3]);
		 */
}
    2cc4:	08 95       	ret

00002cc6 <UpdateIFT_ID>:
void UpdateIFT_ID(){
    /* char IdIFT;
	 IdIFT=(eeprom_read_byte(&DefIFT_ID)%100);
	 sprintf_P(strIFT_ID,PSTR("%.2d"),IdIFT);
	 */
}
    2cc6:	08 95       	ret

00002cc8 <UpdateSeqNum>:
/*
     if (SeqNum<100)SeqNum++;
	 else SeqNum=0;
	 leadingZero(SeqNum,strSeqNum);
	 */
} 
    2cc8:	08 95       	ret

00002cca <ViewCardID>:
}




void ViewCardID(){//+12345678 -->12345678
    2cca:	20 e0       	ldi	r18, 0x00	; 0
    2ccc:	30 e0       	ldi	r19, 0x00	; 0
     char i;
	 for(i=0;i<8;i++){         //00000000000012345678
		strCardID[i]=strRFID[i];
    2cce:	f9 01       	movw	r30, r18
    2cd0:	e7 57       	subi	r30, 0x77	; 119
    2cd2:	f4 4f       	sbci	r31, 0xF4	; 244
    2cd4:	d9 01       	movw	r26, r18
    2cd6:	af 5a       	subi	r26, 0xAF	; 175
    2cd8:	b3 4f       	sbci	r27, 0xF3	; 243
    2cda:	8c 91       	ld	r24, X
    2cdc:	80 83       	st	Z, r24
    2cde:	2f 5f       	subi	r18, 0xFF	; 255
    2ce0:	3f 4f       	sbci	r19, 0xFF	; 255



void ViewCardID(){//+12345678 -->12345678
     char i;
	 for(i=0;i<8;i++){         //00000000000012345678
    2ce2:	28 30       	cpi	r18, 0x08	; 8
    2ce4:	31 05       	cpc	r19, r1
    2ce6:	99 f7       	brne	.-26     	; 0x2cce <ViewCardID+0x4>
		strCardID[i]=strRFID[i];
	 }strCardID[8]=0;     
    2ce8:	10 92 91 0b 	sts	0x0B91, r1
}
    2cec:	08 95       	ret

00002cee <StringCopy>:
//Message 56


void StringCopy(char *Source,char *Dest,char Length){
    2cee:	cf 93       	push	r28
    2cf0:	df 93       	push	r29
    2cf2:	db 01       	movw	r26, r22
    2cf4:	ec 01       	movw	r28, r24
    2cf6:	20 e0       	ldi	r18, 0x00	; 0
    2cf8:	30 e0       	ldi	r19, 0x00	; 0
    2cfa:	07 c0       	rjmp	.+14     	; 0x2d0a <StringCopy+0x1c>
     char i;
	 for (i=0;i<Length;i++){
	     Dest[i]=Source[i];
    2cfc:	fd 01       	movw	r30, r26
    2cfe:	e2 0f       	add	r30, r18
    2d00:	f3 1f       	adc	r31, r19
    2d02:	89 91       	ld	r24, Y+
    2d04:	80 83       	st	Z, r24
    2d06:	2f 5f       	subi	r18, 0xFF	; 255
    2d08:	3f 4f       	sbci	r19, 0xFF	; 255
//Message 56


void StringCopy(char *Source,char *Dest,char Length){
     char i;
	 for (i=0;i<Length;i++){
    2d0a:	24 17       	cp	r18, r20
    2d0c:	b8 f3       	brcs	.-18     	; 0x2cfc <StringCopy+0xe>
	     Dest[i]=Source[i];
	 }Dest[Length]=0;
    2d0e:	a4 0f       	add	r26, r20
    2d10:	b1 1d       	adc	r27, r1
    2d12:	1c 92       	st	X, r1
}
    2d14:	df 91       	pop	r29
    2d16:	cf 91       	pop	r28
    2d18:	08 95       	ret

00002d1a <StringCopyPos>:
void StringCopyPos(char *Source,char *Dest,char SrcPos,char Length){
    2d1a:	cf 93       	push	r28
    2d1c:	df 93       	push	r29
    2d1e:	db 01       	movw	r26, r22
    2d20:	ec 01       	movw	r28, r24
    2d22:	c4 0f       	add	r28, r20
    2d24:	d1 1d       	adc	r29, r1
    2d26:	40 e0       	ldi	r20, 0x00	; 0
    2d28:	50 e0       	ldi	r21, 0x00	; 0
    2d2a:	07 c0       	rjmp	.+14     	; 0x2d3a <StringCopyPos+0x20>
     char i;
	 for (i=0;i<Length;i++){
	     Dest[i]=Source[SrcPos+i];
    2d2c:	fd 01       	movw	r30, r26
    2d2e:	e4 0f       	add	r30, r20
    2d30:	f5 1f       	adc	r31, r21
    2d32:	89 91       	ld	r24, Y+
    2d34:	80 83       	st	Z, r24
    2d36:	4f 5f       	subi	r20, 0xFF	; 255
    2d38:	5f 4f       	sbci	r21, 0xFF	; 255
	     Dest[i]=Source[i];
	 }Dest[Length]=0;
}
void StringCopyPos(char *Source,char *Dest,char SrcPos,char Length){
     char i;
	 for (i=0;i<Length;i++){
    2d3a:	42 17       	cp	r20, r18
    2d3c:	b8 f3       	brcs	.-18     	; 0x2d2c <StringCopyPos+0x12>
	     Dest[i]=Source[SrcPos+i];
	 }Dest[Length]=0;
    2d3e:	a2 0f       	add	r26, r18
    2d40:	b1 1d       	adc	r27, r1
    2d42:	1c 92       	st	X, r1
}
    2d44:	df 91       	pop	r29
    2d46:	cf 91       	pop	r28
    2d48:	08 95       	ret

00002d4a <TestLocalAccount>:

void TestLocalAccount(){

}
    2d4a:	08 95       	ret

00002d4c <BackLightTrig>:
	      }
     }      
}

void BackLightTrig(){    
     __key_light = 1; 
    2d4c:	81 e0       	ldi	r24, 0x01	; 1
    2d4e:	80 93 ae 02 	sts	0x02AE, r24
	 __key_lgtcnt = 0; 
    2d52:	10 92 af 02 	sts	0x02AF, r1
	 PORTG=PORTG&0b11111101;
    2d56:	e5 e6       	ldi	r30, 0x65	; 101
    2d58:	f0 e0       	ldi	r31, 0x00	; 0
    2d5a:	80 81       	ld	r24, Z
    2d5c:	8d 7f       	andi	r24, 0xFD	; 253
    2d5e:	80 83       	st	Z, r24
}
    2d60:	08 95       	ret

00002d62 <GetBaudrate>:
	 }
}

int GetBaudrate(char brSetting){
int Result=0;
     switch(brSetting){
    2d62:	82 30       	cpi	r24, 0x02	; 2
    2d64:	59 f0       	breq	.+22     	; 0x2d7c <GetBaudrate+0x1a>
    2d66:	82 30       	cpi	r24, 0x02	; 2
    2d68:	18 f0       	brcs	.+6      	; 0x2d70 <GetBaudrate+0xe>
    2d6a:	83 30       	cpi	r24, 0x03	; 3
    2d6c:	21 f4       	brne	.+8      	; 0x2d76 <GetBaudrate+0x14>
    2d6e:	09 c0       	rjmp	.+18     	; 0x2d82 <GetBaudrate+0x20>
    2d70:	20 e8       	ldi	r18, 0x80	; 128
    2d72:	35 e2       	ldi	r19, 0x25	; 37
    2d74:	08 c0       	rjmp	.+16     	; 0x2d86 <GetBaudrate+0x24>
    2d76:	20 e0       	ldi	r18, 0x00	; 0
    2d78:	30 e0       	ldi	r19, 0x00	; 0
    2d7a:	05 c0       	rjmp	.+10     	; 0x2d86 <GetBaudrate+0x24>
    2d7c:	20 e0       	ldi	r18, 0x00	; 0
    2d7e:	3b e4       	ldi	r19, 0x4B	; 75
    2d80:	02 c0       	rjmp	.+4      	; 0x2d86 <GetBaudrate+0x24>
	 case br9600: 
	      Result=9600;
	      break;
	 case br19200:
	      Result=19200;
	      break;
    2d82:	2b e9       	ldi	r18, 0x9B	; 155
    2d84:	36 e1       	ldi	r19, 0x16	; 22
	 case br5787:
	      Result=5787;
     	  break;	 
	 }
   return Result;
}
    2d86:	c9 01       	movw	r24, r18
    2d88:	08 95       	ret

00002d8a <InitStandalone>:
	      RunInitStandalone=False;
	      break;
	 }
  }
  */
}
    2d8a:	08 95       	ret

00002d8c <DisplayQueueFIP>:


void DisplayQueueFIP(){// FIP:#1#2#3#4#5

}
    2d8c:	08 95       	ret

00002d8e <ShowMessage>:
	 }
}

void ShowMessage(char *Message){//Display Message on Line3
     char i;
}
    2d8e:	08 95       	ret

00002d90 <CalcLRC>:

char CalcLRC(char xLRC,char DataIn){
     char Result;
	 Result=xLRC^DataIn;
     return(Result);
}
    2d90:	86 27       	eor	r24, r22
    2d92:	08 95       	ret

00002d94 <systemEDC>:
}

void systemEDC(){//EDC Handler
     

}
    2d94:	08 95       	ret

00002d96 <GeniusCalc>:


char GeniusCalc(char cOption, char valA, char valB){
     char valC_H,valC_L,xValA,xValB,Result;
	 Result=0;
     switch(cOption){
    2d96:	88 23       	and	r24, r24
    2d98:	19 f0       	breq	.+6      	; 0x2da0 <GeniusCalc+0xa>
    2d9a:	81 30       	cpi	r24, 0x01	; 1
    2d9c:	49 f5       	brne	.+82     	; 0x2df0 <GeniusCalc+0x5a>
    2d9e:	11 c0       	rjmp	.+34     	; 0x2dc2 <GeniusCalc+0x2c>
	 case G_PLUS:                  // 5 + 8 = 1 + 3 = 4
	      valC_H=(valA+valB)/10;   //  
    2da0:	26 2f       	mov	r18, r22
    2da2:	30 e0       	ldi	r19, 0x00	; 0
    2da4:	24 0f       	add	r18, r20
    2da6:	31 1d       	adc	r19, r1
		  valC_L=(valA+valB)%10;   //
	      Result=valC_H+valC_L;
    2da8:	c9 01       	movw	r24, r18
    2daa:	6a e0       	ldi	r22, 0x0A	; 10
    2dac:	70 e0       	ldi	r23, 0x00	; 0
    2dae:	0e 94 17 aa 	call	0x1542e	; 0x1542e <__divmodhi4>
    2db2:	48 2f       	mov	r20, r24
    2db4:	c9 01       	movw	r24, r18
    2db6:	6a e0       	ldi	r22, 0x0A	; 10
    2db8:	70 e0       	ldi	r23, 0x00	; 0
    2dba:	0e 94 17 aa 	call	0x1542e	; 0x1542e <__divmodhi4>
    2dbe:	46 0f       	add	r20, r22
    2dc0:	18 c0       	rjmp	.+48     	; 0x2df2 <GeniusCalc+0x5c>
	      break;
	 case G_MULTY:                 
	      if (valA>0)xValA=valA;
    2dc2:	66 23       	and	r22, r22
    2dc4:	09 f4       	brne	.+2      	; 0x2dc8 <GeniusCalc+0x32>
    2dc6:	61 e0       	ldi	r22, 0x01	; 1
		  else xValA=1;
	      if (valB>0)xValB=valB;
    2dc8:	44 23       	and	r20, r20
    2dca:	09 f4       	brne	.+2      	; 0x2dce <GeniusCalc+0x38>
    2dcc:	41 e0       	ldi	r20, 0x01	; 1
		  else xValB=1;
	      valC_H=(xValA*xValB)/10;   //  
    2dce:	46 9f       	mul	r20, r22
    2dd0:	90 01       	movw	r18, r0
    2dd2:	11 24       	eor	r1, r1
    2dd4:	c9 01       	movw	r24, r18
    2dd6:	6a e0       	ldi	r22, 0x0A	; 10
    2dd8:	70 e0       	ldi	r23, 0x00	; 0
    2dda:	0e 94 17 aa 	call	0x1542e	; 0x1542e <__divmodhi4>
    2dde:	46 2f       	mov	r20, r22
		  valC_L=(xValA*xValB)%10;   //
    2de0:	c9 01       	movw	r24, r18
    2de2:	6a e0       	ldi	r22, 0x0A	; 10
    2de4:	70 e0       	ldi	r23, 0x00	; 0
    2de6:	0e 94 17 aa 	call	0x1542e	; 0x1542e <__divmodhi4>
    2dea:	64 2f       	mov	r22, r20
    2dec:	48 2f       	mov	r20, r24
    2dee:	d8 cf       	rjmp	.-80     	; 0x2da0 <GeniusCalc+0xa>
    2df0:	40 e0       	ldi	r20, 0x00	; 0
	 case G_MINUS:
	      
	      break;
	 }
   return Result;
}
    2df2:	84 2f       	mov	r24, r20
    2df4:	08 95       	ret

00002df6 <FSubMenuAdmin>:

char FSubMenuAdmin(){
     char Result;
	 Result=MENU_DONE;
   return Result;
}
    2df6:	81 e0       	ldi	r24, 0x01	; 1
    2df8:	08 95       	ret

00002dfa <CountNoPumpSatus>:
	      break;	 
	 } 
   return Result;
}

char CountNoPumpSatus(char *strPumpStatusTotalizer){
    2dfa:	ff 92       	push	r15
    2dfc:	0f 93       	push	r16
    2dfe:	1f 93       	push	r17
    2e00:	cf 93       	push	r28
    2e02:	df 93       	push	r29
char i,Result;
     Result=0;
	 for (i=0;i<PumpCountMax;i++){
    2e04:	f0 90 5c 01 	lds	r15, 0x015C
    2e08:	ec 01       	movw	r28, r24
    2e0a:	00 e0       	ldi	r16, 0x00	; 0
    2e0c:	10 e0       	ldi	r17, 0x00	; 0
    2e0e:	09 c0       	rjmp	.+18     	; 0x2e22 <CountNoPumpSatus+0x28>
	      if (strPumpStatusTotalizer[i]==GetPumpStatusLabel(PUMP_NONE)){
    2e10:	8e e0       	ldi	r24, 0x0E	; 14
    2e12:	0e 94 3e 14 	call	0x287c	; 0x287c <GetPumpStatusLabel>
    2e16:	98 81       	ld	r25, Y
    2e18:	98 17       	cp	r25, r24
    2e1a:	09 f4       	brne	.+2      	; 0x2e1e <CountNoPumpSatus+0x24>
		      Result++;		  
    2e1c:	1f 5f       	subi	r17, 0xFF	; 255
}

char CountNoPumpSatus(char *strPumpStatusTotalizer){
char i,Result;
     Result=0;
	 for (i=0;i<PumpCountMax;i++){
    2e1e:	0f 5f       	subi	r16, 0xFF	; 255
    2e20:	21 96       	adiw	r28, 0x01	; 1
    2e22:	0f 15       	cp	r16, r15
    2e24:	a8 f3       	brcs	.-22     	; 0x2e10 <CountNoPumpSatus+0x16>
	      if (strPumpStatusTotalizer[i]==GetPumpStatusLabel(PUMP_NONE)){
		      Result++;		  
		  }	 
	 }
  return Result;
}
    2e26:	81 2f       	mov	r24, r17
    2e28:	df 91       	pop	r29
    2e2a:	cf 91       	pop	r28
    2e2c:	1f 91       	pop	r17
    2e2e:	0f 91       	pop	r16
    2e30:	ff 90       	pop	r15
    2e32:	08 95       	ret

00002e34 <FCloseDay>:
   return Result;
}

char FCloseDay(){

}
    2e34:	08 95       	ret

00002e36 <FLockPump>:
char FLockPump(){

}
    2e36:	08 95       	ret

00002e38 <FMenuSettingPassword>:
char FMenuSettingPassword(){
     char Result;
   //_menu_password();
   Result=MENU_DONE;
   return Result;
}
    2e38:	81 e0       	ldi	r24, 0x01	; 1
    2e3a:	08 95       	ret

00002e3c <menu_product>:
   return Result;
}

void menu_product(){

}
    2e3c:	08 95       	ret

00002e3e <IncValue>:
            lcd_print(xPos,yPos,strLabel);
		}
	}
}

void IncValue(char *Value,char MinValue,char MaxValue){
    2e3e:	fc 01       	movw	r30, r24
     if ((*Value)<MaxValue){
    2e40:	80 81       	ld	r24, Z
    2e42:	84 17       	cp	r24, r20
    2e44:	18 f4       	brcc	.+6      	; 0x2e4c <IncValue+0xe>
	     (*Value)++;
    2e46:	8f 5f       	subi	r24, 0xFF	; 255
    2e48:	80 83       	st	Z, r24
    2e4a:	08 95       	ret
	 }else *Value=MinValue;
    2e4c:	60 83       	st	Z, r22
    2e4e:	08 95       	ret

00002e50 <DecValue>:
}

void DecValue(char *Value,char MinValue,char MaxValue){
    2e50:	fc 01       	movw	r30, r24
     if ((*Value)>MinValue){
    2e52:	80 81       	ld	r24, Z
    2e54:	68 17       	cp	r22, r24
    2e56:	18 f4       	brcc	.+6      	; 0x2e5e <DecValue+0xe>
	     (*Value)--;
    2e58:	81 50       	subi	r24, 0x01	; 1
    2e5a:	80 83       	st	Z, r24
    2e5c:	08 95       	ret
	 }else *Value=MaxValue;
    2e5e:	40 83       	st	Z, r20
    2e60:	08 95       	ret

00002e62 <zeroIP>:
		 
		}

	}
}
void zeroIP(unsigned char Val,char *StrResult){
    2e62:	58 2f       	mov	r21, r24
    2e64:	fb 01       	movw	r30, r22
     unsigned char R,P,S;
	 if (Val>=100){
    2e66:	84 36       	cpi	r24, 0x64	; 100
    2e68:	00 f1       	brcs	.+64     	; 0x2eaa <zeroIP+0x48>
	    R=(Val/100);
    2e6a:	64 e6       	ldi	r22, 0x64	; 100
    2e6c:	0e 94 ea a9 	call	0x153d4	; 0x153d4 <__udivmodqi4>
    2e70:	48 2f       	mov	r20, r24
        P=((Val%100)/10);
    2e72:	85 2f       	mov	r24, r21
    2e74:	0e 94 ea a9 	call	0x153d4	; 0x153d4 <__udivmodqi4>
    2e78:	89 2f       	mov	r24, r25
    2e7a:	6a e0       	ldi	r22, 0x0A	; 10
    2e7c:	0e 94 ea a9 	call	0x153d4	; 0x153d4 <__udivmodqi4>
		S=Val-((R*100)+(P*10)); 
        StrResult[0]='0'+R;//+(Val/100);
    2e80:	40 5d       	subi	r20, 0xD0	; 208
    2e82:	40 83       	st	Z, r20
    2e84:	40 53       	subi	r20, 0x30	; 48
	    StrResult[1]='0'+P;//+((Val%100)/10);
    2e86:	80 5d       	subi	r24, 0xD0	; 208
    2e88:	81 83       	std	Z+1, r24	; 0x01
    2e8a:	80 53       	subi	r24, 0x30	; 48
		StrResult[2]='0'+S;//+(Val-((Val/100)*100)-((Val%100)/10));
    2e8c:	50 5d       	subi	r21, 0xD0	; 208
    2e8e:	2c e9       	ldi	r18, 0x9C	; 156
    2e90:	3f ef       	ldi	r19, 0xFF	; 255
    2e92:	42 9f       	mul	r20, r18
    2e94:	40 2d       	mov	r20, r0
    2e96:	11 24       	eor	r1, r1
    2e98:	45 0f       	add	r20, r21
    2e9a:	26 ef       	ldi	r18, 0xF6	; 246
    2e9c:	3f ef       	ldi	r19, 0xFF	; 255
    2e9e:	82 9f       	mul	r24, r18
    2ea0:	80 2d       	mov	r24, r0
    2ea2:	11 24       	eor	r1, r1
    2ea4:	84 0f       	add	r24, r20
    2ea6:	82 83       	std	Z+2, r24	; 0x02
    2ea8:	10 c0       	rjmp	.+32     	; 0x2eca <zeroIP+0x68>
		StrResult[3]=0;
		}else     
	 if ((Val>=10)&&(Val<100)){
    2eaa:	8a 50       	subi	r24, 0x0A	; 10
    2eac:	8a 35       	cpi	r24, 0x5A	; 90
    2eae:	78 f4       	brcc	.+30     	; 0x2ece <zeroIP+0x6c>
        StrResult[0]='0';
    2eb0:	80 e3       	ldi	r24, 0x30	; 48
    2eb2:	80 83       	st	Z, r24
	    StrResult[1]=('0'+(Val/10));
    2eb4:	85 2f       	mov	r24, r21
    2eb6:	6a e0       	ldi	r22, 0x0A	; 10
    2eb8:	0e 94 ea a9 	call	0x153d4	; 0x153d4 <__udivmodqi4>
    2ebc:	80 5d       	subi	r24, 0xD0	; 208
    2ebe:	81 83       	std	Z+1, r24	; 0x01
		StrResult[2]=('0'+(Val%10));
    2ec0:	85 2f       	mov	r24, r21
    2ec2:	0e 94 ea a9 	call	0x153d4	; 0x153d4 <__udivmodqi4>
    2ec6:	90 5d       	subi	r25, 0xD0	; 208
    2ec8:	92 83       	std	Z+2, r25	; 0x02
		StrResult[3]=0;
    2eca:	13 82       	std	Z+3, r1	; 0x03
    2ecc:	08 95       	ret
		}
     else
	 if (Val<10){
    2ece:	5a 30       	cpi	r21, 0x0A	; 10
    2ed0:	30 f4       	brcc	.+12     	; 0x2ede <zeroIP+0x7c>
	    StrResult[0]='0';
    2ed2:	80 e3       	ldi	r24, 0x30	; 48
    2ed4:	80 83       	st	Z, r24
		StrResult[1]='0';
    2ed6:	81 83       	std	Z+1, r24	; 0x01
	    StrResult[2]='0'+Val;
    2ed8:	50 5d       	subi	r21, 0xD0	; 208
    2eda:	52 83       	std	Z+2, r21	; 0x02
	    StrResult[3]=0;
    2edc:	13 82       	std	Z+3, r1	; 0x03
    2ede:	08 95       	ret

00002ee0 <GetLocAccStatus>:


char GetLocAccStatus(char paramMessage57){
     char Result;
	 Result=LA_NONE;
     if (paramMessage57==MSG57_INVALID)Result=LA_INVALID;
    2ee0:	81 30       	cpi	r24, 0x01	; 1
    2ee2:	29 f0       	breq	.+10     	; 0x2eee <GetLocAccStatus+0xe>
	 else
     if (paramMessage57==MSG57_VALID)Result=LA_VALID;
    2ee4:	82 30       	cpi	r24, 0x02	; 2
    2ee6:	19 f0       	breq	.+6      	; 0x2eee <GetLocAccStatus+0xe>
	 else
     if (paramMessage57==MSG57_LIMITED)Result=LA_LIMITED;
    2ee8:	83 30       	cpi	r24, 0x03	; 3
    2eea:	09 f0       	breq	.+2      	; 0x2eee <GetLocAccStatus+0xe>
    2eec:	80 e0       	ldi	r24, 0x00	; 0
	 return Result;
}
    2eee:	08 95       	ret

00002ef0 <FTestRemZero>:
	     RemZeroLead(strTest);  
		 uart_print(0,1,strTest);

	while (1){};
  #endif
}
    2ef0:	08 95       	ret

00002ef2 <StrPosCopy>:
     nAddedSpace=(Length-srcLength)/2;
     AddSpaceLead(Source,srcLength+nAddedSpace);
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
    2ef2:	cf 93       	push	r28
    2ef4:	df 93       	push	r29
    2ef6:	eb 01       	movw	r28, r22
    2ef8:	da 01       	movw	r26, r20
    2efa:	a8 0f       	add	r26, r24
    2efc:	b9 1f       	adc	r27, r25
    2efe:	40 e0       	ldi	r20, 0x00	; 0
    2f00:	50 e0       	ldi	r21, 0x00	; 0
    2f02:	07 c0       	rjmp	.+14     	; 0x2f12 <StrPosCopy+0x20>
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    2f04:	fe 01       	movw	r30, r28
    2f06:	e4 0f       	add	r30, r20
    2f08:	f5 1f       	adc	r31, r21
    2f0a:	8d 91       	ld	r24, X+
    2f0c:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    2f0e:	4f 5f       	subi	r20, 0xFF	; 255
    2f10:	5f 4f       	sbci	r21, 0xFF	; 255
    2f12:	42 17       	cp	r20, r18
    2f14:	53 07       	cpc	r21, r19
    2f16:	b0 f3       	brcs	.-20     	; 0x2f04 <StrPosCopy+0x12>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    2f18:	c2 0f       	add	r28, r18
    2f1a:	d3 1f       	adc	r29, r19
    2f1c:	18 82       	st	Y, r1
}
    2f1e:	df 91       	pop	r29
    2f20:	cf 91       	pop	r28
    2f22:	08 95       	ret

00002f24 <StrPosPaste>:
void StrPosPaste(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
    2f24:	0f 93       	push	r16
    2f26:	1f 93       	push	r17
    2f28:	cf 93       	push	r28
    2f2a:	df 93       	push	r29
    2f2c:	8c 01       	movw	r16, r24
    2f2e:	db 01       	movw	r26, r22
    2f30:	eb 01       	movw	r28, r22
    2f32:	c4 0f       	add	r28, r20
    2f34:	d5 1f       	adc	r29, r21
    2f36:	60 e0       	ldi	r22, 0x00	; 0
    2f38:	70 e0       	ldi	r23, 0x00	; 0
    2f3a:	07 c0       	rjmp	.+14     	; 0x2f4a <StrPosPaste+0x26>
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[IdxSource+i]=Source[i];
    2f3c:	f8 01       	movw	r30, r16
    2f3e:	e6 0f       	add	r30, r22
    2f40:	f7 1f       	adc	r31, r23
    2f42:	80 81       	ld	r24, Z
    2f44:	89 93       	st	Y+, r24
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
}
void StrPosPaste(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    2f46:	6f 5f       	subi	r22, 0xFF	; 255
    2f48:	7f 4f       	sbci	r23, 0xFF	; 255
    2f4a:	62 17       	cp	r22, r18
    2f4c:	73 07       	cpc	r23, r19
    2f4e:	b0 f3       	brcs	.-20     	; 0x2f3c <StrPosPaste+0x18>
	    Dest[IdxSource+i]=Source[i];
	 }Dest[IdxSource+Length]=0;
    2f50:	a4 0f       	add	r26, r20
    2f52:	b5 1f       	adc	r27, r21
    2f54:	a2 0f       	add	r26, r18
    2f56:	b3 1f       	adc	r27, r19
    2f58:	1c 92       	st	X, r1
}
    2f5a:	df 91       	pop	r29
    2f5c:	cf 91       	pop	r28
    2f5e:	1f 91       	pop	r17
    2f60:	0f 91       	pop	r16
    2f62:	08 95       	ret

00002f64 <CharPosCopy>:
char CharPosCopy(char *Source, unsigned int IdxSource){
    2f64:	fb 01       	movw	r30, r22
    2f66:	e8 0f       	add	r30, r24
    2f68:	f9 1f       	adc	r31, r25
     char Result;
     Result=Source[IdxSource];
	 return Result;
}
    2f6a:	80 81       	ld	r24, Z
    2f6c:	08 95       	ret

00002f6e <procMessage00>:
*/
char procMessage00(){
     char Result,strSend[10];
	 Result=MSG00_NACK;
	 //Message57
	 if((rcv_trans[0]==0x01)&&(transLength==MSG00_LENGTH)){
    2f6e:	80 91 1d 09 	lds	r24, 0x091D
    2f72:	81 30       	cpi	r24, 0x01	; 1
    2f74:	51 f4       	brne	.+20     	; 0x2f8a <procMessage00+0x1c>
    2f76:	80 91 8b 01 	lds	r24, 0x018B
    2f7a:	90 91 8c 01 	lds	r25, 0x018C
    2f7e:	8f 97       	sbiw	r24, 0x2f	; 47
    2f80:	21 f4       	brne	.+8      	; 0x2f8a <procMessage00+0x1c>
	     //Reply
		 Result=(CharPosCopy(rcv_trans,37)-'0');
    2f82:	80 91 42 09 	lds	r24, 0x0942
    2f86:	80 53       	subi	r24, 0x30	; 48
    2f88:	08 95       	ret
    2f8a:	80 e0       	ldi	r24, 0x00	; 0
		 //sprintf(strSend,"R=%d",Result);
		 //uart_print(0,1,strSend);
		 //*/
		 }
     return Result;
}
    2f8c:	08 95       	ret

00002f8e <procMessage09>:
	    Dest[IdxSource+i]=Source[i];
	 }Dest[IdxSource+Length]=0;
}
char CharPosCopy(char *Source, unsigned int IdxSource){
     char Result;
     Result=Source[IdxSource];
    2f8e:	90 91 44 09 	lds	r25, 0x0944
    2f92:	20 e0       	ldi	r18, 0x00	; 0
    2f94:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    2f96:	f9 01       	movw	r30, r18
    2f98:	ee 56       	subi	r30, 0x6E	; 110
    2f9a:	f7 4f       	sbci	r31, 0xF7	; 247
    2f9c:	d9 01       	movw	r26, r18
    2f9e:	a3 5e       	subi	r26, 0xE3	; 227
    2fa0:	b6 4f       	sbci	r27, 0xF6	; 246
    2fa2:	97 96       	adiw	r26, 0x27	; 39
    2fa4:	8c 91       	ld	r24, X
    2fa6:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    2fa8:	2f 5f       	subi	r18, 0xFF	; 255
    2faa:	3f 4f       	sbci	r19, 0xFF	; 255
    2fac:	24 31       	cpi	r18, 0x14	; 20
    2fae:	31 05       	cpc	r19, r1
    2fb0:	91 f7       	brne	.-28     	; 0x2f96 <procMessage09+0x8>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    2fb2:	10 92 a6 08 	sts	0x08A6, r1
    2fb6:	20 e0       	ldi	r18, 0x00	; 0
    2fb8:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    2fba:	f9 01       	movw	r30, r18
    2fbc:	ed 55       	subi	r30, 0x5D	; 93
    2fbe:	f8 4f       	sbci	r31, 0xF8	; 248
    2fc0:	d9 01       	movw	r26, r18
    2fc2:	a3 5e       	subi	r26, 0xE3	; 227
    2fc4:	b6 4f       	sbci	r27, 0xF6	; 246
    2fc6:	db 96       	adiw	r26, 0x3b	; 59
    2fc8:	8c 91       	ld	r24, X
    2fca:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    2fcc:	2f 5f       	subi	r18, 0xFF	; 255
    2fce:	3f 4f       	sbci	r19, 0xFF	; 255
    2fd0:	24 31       	cpi	r18, 0x14	; 20
    2fd2:	31 05       	cpc	r19, r1
    2fd4:	91 f7       	brne	.-28     	; 0x2fba <procMessage09+0x2c>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    2fd6:	10 92 b7 07 	sts	0x07B7, r1
    2fda:	20 e0       	ldi	r18, 0x00	; 0
    2fdc:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    2fde:	f9 01       	movw	r30, r18
    2fe0:	e4 5e       	subi	r30, 0xE4	; 228
    2fe2:	f7 4f       	sbci	r31, 0xF7	; 247
    2fe4:	d9 01       	movw	r26, r18
    2fe6:	a4 59       	subi	r26, 0x94	; 148
    2fe8:	b6 4f       	sbci	r27, 0xF6	; 246
    2fea:	8c 91       	ld	r24, X
    2fec:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    2fee:	2f 5f       	subi	r18, 0xFF	; 255
    2ff0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ff2:	24 31       	cpi	r18, 0x14	; 20
    2ff4:	31 05       	cpc	r19, r1
    2ff6:	99 f7       	brne	.-26     	; 0x2fde <procMessage09+0x50>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    2ff8:	10 92 30 08 	sts	0x0830, r1
    2ffc:	20 e0       	ldi	r18, 0x00	; 0
    2ffe:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    3000:	f9 01       	movw	r30, r18
    3002:	ea 52       	subi	r30, 0x2A	; 42
    3004:	f4 4f       	sbci	r31, 0xF4	; 244
    3006:	d9 01       	movw	r26, r18
    3008:	a0 58       	subi	r26, 0x80	; 128
    300a:	b6 4f       	sbci	r27, 0xF6	; 246
    300c:	8c 91       	ld	r24, X
    300e:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    3010:	2f 5f       	subi	r18, 0xFF	; 255
    3012:	3f 4f       	sbci	r19, 0xFF	; 255
    3014:	24 31       	cpi	r18, 0x14	; 20
    3016:	31 05       	cpc	r19, r1
    3018:	99 f7       	brne	.-26     	; 0x3000 <procMessage09+0x72>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    301a:	10 92 ea 0b 	sts	0x0BEA, r1
       StrPosCopy(rcv_trans,strFreeMessageLine1,39,20);
       StrPosCopy(rcv_trans,strFreeMessageLine2,59,20);
       StrPosCopy(rcv_trans,strFreeMessageLine3,79,20);
       StrPosCopy(rcv_trans,strFreeMessageLine4,99,20);
	 return Result;
}
    301e:	89 2f       	mov	r24, r25
    3020:	80 53       	subi	r24, 0x30	; 48
    3022:	08 95       	ret

00003024 <procMessage23>:
		 eeprom_write_block((const void*)&strBankName, (void*)&DefBankName[i], 11);
	 }
	 return Result;
}

char procMessage23(){
    3024:	20 e0       	ldi	r18, 0x00	; 0
    3026:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    3028:	f9 01       	movw	r30, r18
    302a:	e7 57       	subi	r30, 0x77	; 119
    302c:	f4 4f       	sbci	r31, 0xF4	; 244
    302e:	d9 01       	movw	r26, r18
    3030:	a3 5e       	subi	r26, 0xE3	; 227
    3032:	b6 4f       	sbci	r27, 0xF6	; 246
    3034:	95 96       	adiw	r26, 0x25	; 37
    3036:	8c 91       	ld	r24, X
    3038:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    303a:	2f 5f       	subi	r18, 0xFF	; 255
    303c:	3f 4f       	sbci	r19, 0xFF	; 255
    303e:	24 31       	cpi	r18, 0x14	; 20
    3040:	31 05       	cpc	r19, r1
    3042:	91 f7       	brne	.-28     	; 0x3028 <procMessage23+0x4>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    3044:	10 92 9d 0b 	sts	0x0B9D, r1
    3048:	20 e0       	ldi	r18, 0x00	; 0
    304a:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    304c:	f9 01       	movw	r30, r18
    304e:	ec 5d       	subi	r30, 0xDC	; 220
    3050:	fc 4f       	sbci	r31, 0xFC	; 252
    3052:	d9 01       	movw	r26, r18
    3054:	a3 5e       	subi	r26, 0xE3	; 227
    3056:	b6 4f       	sbci	r27, 0xF6	; 246
    3058:	d9 96       	adiw	r26, 0x39	; 57
    305a:	8c 91       	ld	r24, X
    305c:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    305e:	2f 5f       	subi	r18, 0xFF	; 255
    3060:	3f 4f       	sbci	r19, 0xFF	; 255
    3062:	2e 31       	cpi	r18, 0x1E	; 30
    3064:	31 05       	cpc	r19, r1
    3066:	91 f7       	brne	.-28     	; 0x304c <procMessage23+0x28>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    3068:	10 92 42 03 	sts	0x0342, r1
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    306c:	80 91 74 09 	lds	r24, 0x0974
    3070:	80 93 8a 03 	sts	0x038A, r24
	 }Dest[Length]=0;
    3074:	10 92 8b 03 	sts	0x038B, r1
    3078:	20 e0       	ldi	r18, 0x00	; 0
    307a:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    307c:	f9 01       	movw	r30, r18
    307e:	eb 5c       	subi	r30, 0xCB	; 203
    3080:	f7 4f       	sbci	r31, 0xF7	; 247
    3082:	d9 01       	movw	r26, r18
    3084:	ab 58       	subi	r26, 0x8B	; 139
    3086:	b6 4f       	sbci	r27, 0xF6	; 246
    3088:	8c 91       	ld	r24, X
    308a:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    308c:	2f 5f       	subi	r18, 0xFF	; 255
    308e:	3f 4f       	sbci	r19, 0xFF	; 255
    3090:	28 30       	cpi	r18, 0x08	; 8
    3092:	31 05       	cpc	r19, r1
    3094:	99 f7       	brne	.-26     	; 0x307c <procMessage23+0x58>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    3096:	10 92 3d 08 	sts	0x083D, r1
    309a:	20 e0       	ldi	r18, 0x00	; 0
    309c:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    309e:	f9 01       	movw	r30, r18
    30a0:	e2 58       	subi	r30, 0x82	; 130
    30a2:	fc 4f       	sbci	r31, 0xFC	; 252
    30a4:	d9 01       	movw	r26, r18
    30a6:	a3 58       	subi	r26, 0x83	; 131
    30a8:	b6 4f       	sbci	r27, 0xF6	; 246
    30aa:	8c 91       	ld	r24, X
    30ac:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    30ae:	2f 5f       	subi	r18, 0xFF	; 255
    30b0:	3f 4f       	sbci	r19, 0xFF	; 255
    30b2:	2a 30       	cpi	r18, 0x0A	; 10
    30b4:	31 05       	cpc	r19, r1
    30b6:	99 f7       	brne	.-26     	; 0x309e <procMessage23+0x7a>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    30b8:	10 92 88 03 	sts	0x0388, r1
    30bc:	20 e0       	ldi	r18, 0x00	; 0
    30be:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    30c0:	f9 01       	movw	r30, r18
    30c2:	e3 51       	subi	r30, 0x13	; 19
    30c4:	f4 4f       	sbci	r31, 0xF4	; 244
    30c6:	d9 01       	movw	r26, r18
    30c8:	a9 57       	subi	r26, 0x79	; 121
    30ca:	b6 4f       	sbci	r27, 0xF6	; 246
    30cc:	8c 91       	ld	r24, X
    30ce:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    30d0:	2f 5f       	subi	r18, 0xFF	; 255
    30d2:	3f 4f       	sbci	r19, 0xFF	; 255
    30d4:	2a 30       	cpi	r18, 0x0A	; 10
    30d6:	31 05       	cpc	r19, r1
    30d8:	99 f7       	brne	.-26     	; 0x30c0 <procMessage23+0x9c>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    30da:	10 92 f7 0b 	sts	0x0BF7, r1
    30de:	20 e0       	ldi	r18, 0x00	; 0
    30e0:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    30e2:	f9 01       	movw	r30, r18
    30e4:	e1 54       	subi	r30, 0x41	; 65
    30e6:	f4 4f       	sbci	r31, 0xF4	; 244
    30e8:	d9 01       	movw	r26, r18
    30ea:	af 56       	subi	r26, 0x6F	; 111
    30ec:	b6 4f       	sbci	r27, 0xF6	; 246
    30ee:	8c 91       	ld	r24, X
    30f0:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    30f2:	2f 5f       	subi	r18, 0xFF	; 255
    30f4:	3f 4f       	sbci	r19, 0xFF	; 255
    30f6:	23 31       	cpi	r18, 0x13	; 19
    30f8:	31 05       	cpc	r19, r1
    30fa:	99 f7       	brne	.-26     	; 0x30e2 <procMessage23+0xbe>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    30fc:	10 92 d2 0b 	sts	0x0BD2, r1
    3100:	20 e0       	ldi	r18, 0x00	; 0
    3102:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    3104:	f9 01       	movw	r30, r18
    3106:	ed 54       	subi	r30, 0x4D	; 77
    3108:	f4 4f       	sbci	r31, 0xF4	; 244
    310a:	d9 01       	movw	r26, r18
    310c:	ac 55       	subi	r26, 0x5C	; 92
    310e:	b6 4f       	sbci	r27, 0xF6	; 246
    3110:	8c 91       	ld	r24, X
    3112:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    3114:	2f 5f       	subi	r18, 0xFF	; 255
    3116:	3f 4f       	sbci	r19, 0xFF	; 255
    3118:	27 30       	cpi	r18, 0x07	; 7
    311a:	31 05       	cpc	r19, r1
    311c:	99 f7       	brne	.-26     	; 0x3104 <procMessage23+0xe0>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    311e:	10 92 ba 0b 	sts	0x0BBA, r1
    3122:	20 e0       	ldi	r18, 0x00	; 0
    3124:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    3126:	f9 01       	movw	r30, r18
    3128:	e5 54       	subi	r30, 0x45	; 69
    312a:	fd 4f       	sbci	r31, 0xFD	; 253
    312c:	d9 01       	movw	r26, r18
    312e:	a5 55       	subi	r26, 0x55	; 85
    3130:	b6 4f       	sbci	r27, 0xF6	; 246
    3132:	8c 91       	ld	r24, X
    3134:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    3136:	2f 5f       	subi	r18, 0xFF	; 255
    3138:	3f 4f       	sbci	r19, 0xFF	; 255
    313a:	24 30       	cpi	r18, 0x04	; 4
    313c:	31 05       	cpc	r19, r1
    313e:	99 f7       	brne	.-26     	; 0x3126 <procMessage23+0x102>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    3140:	10 92 bf 02 	sts	0x02BF, r1
     StrPosCopy(rcv_trans,strLoyCurrMonConsumeV,106,10);
     StrPosCopy(rcv_trans,strDateTime,116,19);
     StrPosCopy(rcv_trans,strAmount,135,7);
     StrPosCopy(rcv_trans,strGainPoints,142,4);
     return Result;
}
    3144:	80 e0       	ldi	r24, 0x00	; 0
    3146:	08 95       	ret

00003148 <procMessage81>:
uart_print(0,1,strCardID);
*/	
     return Result;
}

char procMessage81(){// Result: HFCS0000
    3148:	cf 93       	push	r28
    314a:	df 93       	push	r29
     char Result=0,PrintCopy=0;//
	 char lcdteks[20];
	 //PrintHeader
     if ((CharPosCopy(rcv_trans,37))=='Y') Result=(Result|(1<<7));
    314c:	80 91 42 09 	lds	r24, 0x0942
    3150:	89 35       	cpi	r24, 0x59	; 89
    3152:	11 f4       	brne	.+4      	; 0x3158 <procMessage81+0x10>
    3154:	90 e8       	ldi	r25, 0x80	; 128
    3156:	01 c0       	rjmp	.+2      	; 0x315a <procMessage81+0x12>
    3158:	90 e0       	ldi	r25, 0x00	; 0
     //PrintFooter
	 if ((CharPosCopy(rcv_trans,38))=='Y') Result=(Result|(1<<6));
    315a:	80 91 43 09 	lds	r24, 0x0943
    315e:	89 35       	cpi	r24, 0x59	; 89
    3160:	09 f4       	brne	.+2      	; 0x3164 <procMessage81+0x1c>
    3162:	90 64       	ori	r25, 0x40	; 64
	 //PaperCut
     if ((CharPosCopy(rcv_trans,39))=='Y') Result=(Result|(1<<5));
    3164:	80 91 44 09 	lds	r24, 0x0944
    3168:	89 35       	cpi	r24, 0x59	; 89
    316a:	09 f4       	brne	.+2      	; 0x316e <procMessage81+0x26>
    316c:	90 62       	ori	r25, 0x20	; 32
	 //Scrool
	 Result=(Result|(1<<4));
    316e:	90 61       	ori	r25, 0x10	; 16

	 //Copies
	 PrintCopy=(CharPosCopy(rcv_trans,40)-'0');
    3170:	80 91 45 09 	lds	r24, 0x0945
    3174:	80 53       	subi	r24, 0x30	; 48
     if (PrintCopy<=16) Result=Result|PrintCopy;
    3176:	81 31       	cpi	r24, 0x11	; 17
    3178:	08 f4       	brcc	.+2      	; 0x317c <procMessage81+0x34>
    317a:	98 2b       	or	r25, r24
	 //Spooling
     StrPosCopy(rcv_trans,PrintBuffer,44,LengthMessage81);
    317c:	c0 91 8d 01 	lds	r28, 0x018D
    3180:	d0 91 8e 01 	lds	r29, 0x018E
    3184:	20 e0       	ldi	r18, 0x00	; 0
    3186:	30 e0       	ldi	r19, 0x00	; 0
    3188:	0b c0       	rjmp	.+22     	; 0x31a0 <procMessage81+0x58>
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    318a:	f9 01       	movw	r30, r18
    318c:	e4 51       	subi	r30, 0x14	; 20
    318e:	fc 4f       	sbci	r31, 0xFC	; 252
    3190:	d9 01       	movw	r26, r18
    3192:	a3 5e       	subi	r26, 0xE3	; 227
    3194:	b6 4f       	sbci	r27, 0xF6	; 246
    3196:	9c 96       	adiw	r26, 0x2c	; 44
    3198:	8c 91       	ld	r24, X
    319a:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    319c:	2f 5f       	subi	r18, 0xFF	; 255
    319e:	3f 4f       	sbci	r19, 0xFF	; 255
    31a0:	2c 17       	cp	r18, r28
    31a2:	3d 07       	cpc	r19, r29
    31a4:	90 f3       	brcs	.-28     	; 0x318a <procMessage81+0x42>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    31a6:	c4 51       	subi	r28, 0x14	; 20
    31a8:	dc 4f       	sbci	r29, 0xFC	; 252
    31aa:	18 82       	st	Y, r1
	 //sprintf(lcdteks,"cmdPrint:%d ",Result);
     //uart_print(0,1,lcdteks);

	 //while(1){};
	 return Result;
}
    31ac:	89 2f       	mov	r24, r25
    31ae:	df 91       	pop	r29
    31b0:	cf 91       	pop	r28
    31b2:	08 95       	ret

000031b4 <FillChar>:
	 if(CutType== 1) { uart(_COM_PRINTER, 1, 0x6D);}
	 if(CutType== 2) {uart(_COM_PRINTER, 1, 0x69);}

}

void FillChar(char *strMemory, unsigned int Length,char data){
    31b4:	20 e0       	ldi	r18, 0x00	; 0
    31b6:	30 e0       	ldi	r19, 0x00	; 0
    31b8:	06 c0       	rjmp	.+12     	; 0x31c6 <FillChar+0x12>
     unsigned int i;
	 for (i=0;i<Length;i++){
	     strMemory[i]=data;
    31ba:	fc 01       	movw	r30, r24
    31bc:	e2 0f       	add	r30, r18
    31be:	f3 1f       	adc	r31, r19
    31c0:	40 83       	st	Z, r20

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    31c2:	2f 5f       	subi	r18, 0xFF	; 255
    31c4:	3f 4f       	sbci	r19, 0xFF	; 255
    31c6:	26 17       	cp	r18, r22
    31c8:	37 07       	cpc	r19, r23
    31ca:	b8 f3       	brcs	.-18     	; 0x31ba <FillChar+0x6>
	     strMemory[i]=data;
	 }
}
    31cc:	08 95       	ret

000031ce <ProcMessage91>:

void ProcMessage91(){
    31ce:	20 e0       	ldi	r18, 0x00	; 0
    31d0:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    31d2:	f9 01       	movw	r30, r18
    31d4:	e9 57       	subi	r30, 0x79	; 121
    31d6:	f3 4f       	sbci	r31, 0xF3	; 243
    31d8:	d9 01       	movw	r26, r18
    31da:	a3 5e       	subi	r26, 0xE3	; 227
    31dc:	b6 4f       	sbci	r27, 0xF6	; 246
    31de:	95 96       	adiw	r26, 0x25	; 37
    31e0:	8c 91       	ld	r24, X
    31e2:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    31e4:	2f 5f       	subi	r18, 0xFF	; 255
    31e6:	3f 4f       	sbci	r19, 0xFF	; 255
    31e8:	26 30       	cpi	r18, 0x06	; 6
    31ea:	31 05       	cpc	r19, r1
    31ec:	91 f7       	brne	.-28     	; 0x31d2 <ProcMessage91+0x4>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    31ee:	10 92 8d 0c 	sts	0x0C8D, r1
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    31f2:	80 91 48 09 	lds	r24, 0x0948
    31f6:	80 93 b9 07 	sts	0x07B9, r24
    31fa:	80 91 49 09 	lds	r24, 0x0949
    31fe:	80 93 ba 07 	sts	0x07BA, r24
	 }Dest[Length]=0;
    3202:	10 92 bb 07 	sts	0x07BB, r1
    3206:	20 e0       	ldi	r18, 0x00	; 0
    3208:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    320a:	f9 01       	movw	r30, r18
    320c:	e4 5f       	subi	r30, 0xF4	; 244
    320e:	f7 4f       	sbci	r31, 0xF7	; 247
    3210:	d9 01       	movw	r26, r18
    3212:	a3 5e       	subi	r26, 0xE3	; 227
    3214:	b6 4f       	sbci	r27, 0xF6	; 246
    3216:	9d 96       	adiw	r26, 0x2d	; 45
    3218:	8c 91       	ld	r24, X
    321a:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    321c:	2f 5f       	subi	r18, 0xFF	; 255
    321e:	3f 4f       	sbci	r19, 0xFF	; 255
    3220:	2f 30       	cpi	r18, 0x0F	; 15
    3222:	31 05       	cpc	r19, r1
    3224:	91 f7       	brne	.-28     	; 0x320a <ProcMessage91+0x3c>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    3226:	10 92 1b 08 	sts	0x081B, r1
    322a:	20 e0       	ldi	r18, 0x00	; 0
    322c:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    322e:	f9 01       	movw	r30, r18
    3230:	e2 56       	subi	r30, 0x62	; 98
    3232:	fa 4f       	sbci	r31, 0xFA	; 250
    3234:	d9 01       	movw	r26, r18
    3236:	a3 5e       	subi	r26, 0xE3	; 227
    3238:	b6 4f       	sbci	r27, 0xF6	; 246
    323a:	dc 96       	adiw	r26, 0x3c	; 60
    323c:	8c 91       	ld	r24, X
    323e:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    3240:	2f 5f       	subi	r18, 0xFF	; 255
    3242:	3f 4f       	sbci	r19, 0xFF	; 255
    3244:	26 30       	cpi	r18, 0x06	; 6
    3246:	31 05       	cpc	r19, r1
    3248:	91 f7       	brne	.-28     	; 0x322e <ProcMessage91+0x60>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    324a:	10 92 a4 05 	sts	0x05A4, r1
    324e:	20 e0       	ldi	r18, 0x00	; 0
    3250:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    3252:	f9 01       	movw	r30, r18
    3254:	eb 58       	subi	r30, 0x8B	; 139
    3256:	fc 4f       	sbci	r31, 0xFC	; 252
    3258:	d9 01       	movw	r26, r18
    325a:	a1 5a       	subi	r26, 0xA1	; 161
    325c:	b6 4f       	sbci	r27, 0xF6	; 246
    325e:	8c 91       	ld	r24, X
    3260:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    3262:	2f 5f       	subi	r18, 0xFF	; 255
    3264:	3f 4f       	sbci	r19, 0xFF	; 255
    3266:	28 30       	cpi	r18, 0x08	; 8
    3268:	31 05       	cpc	r19, r1
    326a:	99 f7       	brne	.-26     	; 0x3252 <ProcMessage91+0x84>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    326c:	10 92 7d 03 	sts	0x037D, r1
    3270:	20 e0       	ldi	r18, 0x00	; 0
    3272:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    3274:	f9 01       	movw	r30, r18
    3276:	ed 54       	subi	r30, 0x4D	; 77
    3278:	f4 4f       	sbci	r31, 0xF4	; 244
    327a:	d9 01       	movw	r26, r18
    327c:	a9 59       	subi	r26, 0x99	; 153
    327e:	b6 4f       	sbci	r27, 0xF6	; 246
    3280:	8c 91       	ld	r24, X
    3282:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    3284:	2f 5f       	subi	r18, 0xFF	; 255
    3286:	3f 4f       	sbci	r19, 0xFF	; 255
    3288:	28 30       	cpi	r18, 0x08	; 8
    328a:	31 05       	cpc	r19, r1
    328c:	99 f7       	brne	.-26     	; 0x3274 <ProcMessage91+0xa6>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    328e:	10 92 bb 0b 	sts	0x0BBB, r1
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    3292:	80 91 6f 09 	lds	r24, 0x096F
    3296:	80 93 8a 03 	sts	0x038A, r24
	 }Dest[Length]=0;
    329a:	10 92 8b 03 	sts	0x038B, r1
    329e:	20 e0       	ldi	r18, 0x00	; 0
    32a0:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    32a2:	f9 01       	movw	r30, r18
    32a4:	e4 50       	subi	r30, 0x04	; 4
    32a6:	fd 4f       	sbci	r31, 0xFD	; 253
    32a8:	d9 01       	movw	r26, r18
    32aa:	a0 59       	subi	r26, 0x90	; 144
    32ac:	b6 4f       	sbci	r27, 0xF6	; 246
    32ae:	8c 91       	ld	r24, X
    32b0:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    32b2:	2f 5f       	subi	r18, 0xFF	; 255
    32b4:	3f 4f       	sbci	r19, 0xFF	; 255
    32b6:	29 30       	cpi	r18, 0x09	; 9
    32b8:	31 05       	cpc	r19, r1
    32ba:	99 f7       	brne	.-26     	; 0x32a2 <ProcMessage91+0xd4>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    32bc:	10 92 05 03 	sts	0x0305, r1
     StrPosCopy(rcv_trans,strPrice,60,6);
     StrPosCopy(rcv_trans,strVolume,66,8);
     StrPosCopy(rcv_trans,strAmount,74,8); 
	 StrPosCopy(rcv_trans,strStatus,82,1);
     StrPosCopy(rcv_trans,strSurcharge,83,9);    
}
    32c0:	08 95       	ret

000032c2 <IdentifyMessage>:
        //sprintf_P(strSerial,PSTR("RFID:%s"),strRFID);
        //uart_print(0,1,strSerial);
	 }
}

void IdentifyMessage(char STX,unsigned int Length){
    32c2:	1f 93       	push	r17
   if (STX==0x01){
    32c4:	81 30       	cpi	r24, 0x01	; 1
    32c6:	09 f0       	breq	.+2      	; 0x32ca <IdentifyMessage+0x8>
    32c8:	5f c0       	rjmp	.+190    	; 0x3388 <IdentifyMessage+0xc6>
	    if ((Length==MSG00_LENGTH)||(MsgCode==0)) IsMessage00=True;//47
    32ca:	6f 32       	cpi	r22, 0x2F	; 47
    32cc:	71 05       	cpc	r23, r1
    32ce:	21 f0       	breq	.+8      	; 0x32d8 <IdentifyMessage+0x16>
    32d0:	80 91 24 01 	lds	r24, 0x0124
    32d4:	88 23       	and	r24, r24
    32d6:	21 f4       	brne	.+8      	; 0x32e0 <IdentifyMessage+0x1e>
    32d8:	81 e0       	ldi	r24, 0x01	; 1
    32da:	80 93 9e 01 	sts	0x019E, r24
    32de:	4a c0       	rjmp	.+148    	; 0x3374 <IdentifyMessage+0xb2>
		else
	    if ((Length==MSG09_LENGTH)||(MsgCode==9)) IsMessage09=True;//615
    32e0:	6c 36       	cpi	r22, 0x6C	; 108
    32e2:	71 05       	cpc	r23, r1
    32e4:	11 f0       	breq	.+4      	; 0x32ea <IdentifyMessage+0x28>
    32e6:	89 30       	cpi	r24, 0x09	; 9
    32e8:	21 f4       	brne	.+8      	; 0x32f2 <IdentifyMessage+0x30>
    32ea:	81 e0       	ldi	r24, 0x01	; 1
    32ec:	80 93 a3 01 	sts	0x01A3, r24
    32f0:	41 c0       	rjmp	.+130    	; 0x3374 <IdentifyMessage+0xb2>
		else
	    if ((Length==MSG11_LENGTH)||(MsgCode==11)) IsMessage11=True;//615
    32f2:	92 e0       	ldi	r25, 0x02	; 2
    32f4:	67 36       	cpi	r22, 0x67	; 103
    32f6:	79 07       	cpc	r23, r25
    32f8:	11 f0       	breq	.+4      	; 0x32fe <IdentifyMessage+0x3c>
    32fa:	8b 30       	cpi	r24, 0x0B	; 11
    32fc:	21 f4       	brne	.+8      	; 0x3306 <IdentifyMessage+0x44>
    32fe:	81 e0       	ldi	r24, 0x01	; 1
    3300:	80 93 a0 01 	sts	0x01A0, r24
    3304:	37 c0       	rjmp	.+110    	; 0x3374 <IdentifyMessage+0xb2>
		else
	    if ((Length==MSG23_LENGTH)||(MsgCode==23)) IsMessage23=True;//145
    3306:	61 39       	cpi	r22, 0x91	; 145
    3308:	71 05       	cpc	r23, r1
    330a:	11 f0       	breq	.+4      	; 0x3310 <IdentifyMessage+0x4e>
    330c:	87 31       	cpi	r24, 0x17	; 23
    330e:	21 f4       	brne	.+8      	; 0x3318 <IdentifyMessage+0x56>
    3310:	81 e0       	ldi	r24, 0x01	; 1
    3312:	80 93 a2 01 	sts	0x01A2, r24
    3316:	2e c0       	rjmp	.+92     	; 0x3374 <IdentifyMessage+0xb2>
		else
	    if ((Length==MSG57_LENGTH)||(MsgCode==57)) IsMessage57=True;//230
    3318:	66 3e       	cpi	r22, 0xE6	; 230
    331a:	71 05       	cpc	r23, r1
    331c:	11 f0       	breq	.+4      	; 0x3322 <IdentifyMessage+0x60>
    331e:	89 33       	cpi	r24, 0x39	; 57
    3320:	21 f4       	brne	.+8      	; 0x332a <IdentifyMessage+0x68>
    3322:	81 e0       	ldi	r24, 0x01	; 1
    3324:	80 93 a5 01 	sts	0x01A5, r24
    3328:	25 c0       	rjmp	.+74     	; 0x3374 <IdentifyMessage+0xb2>
		else
	    if ((Length==MSG99_LENGTH)||(MsgCode==99)) IsMessage99=True;//378
    332a:	91 e0       	ldi	r25, 0x01	; 1
    332c:	68 39       	cpi	r22, 0x98	; 152
    332e:	79 07       	cpc	r23, r25
    3330:	11 f0       	breq	.+4      	; 0x3336 <IdentifyMessage+0x74>
    3332:	83 36       	cpi	r24, 0x63	; 99
    3334:	21 f4       	brne	.+8      	; 0x333e <IdentifyMessage+0x7c>
    3336:	81 e0       	ldi	r24, 0x01	; 1
    3338:	80 93 9f 01 	sts	0x019F, r24
    333c:	1b c0       	rjmp	.+54     	; 0x3374 <IdentifyMessage+0xb2>
		else
	    if ((Length==MSG81_LENGTH)||(MsgCode==81)) IsMessage81=True;//426
    333e:	91 e0       	ldi	r25, 0x01	; 1
    3340:	66 3b       	cpi	r22, 0xB6	; 182
    3342:	79 07       	cpc	r23, r25
    3344:	11 f0       	breq	.+4      	; 0x334a <IdentifyMessage+0x88>
    3346:	81 35       	cpi	r24, 0x51	; 81
    3348:	21 f4       	brne	.+8      	; 0x3352 <IdentifyMessage+0x90>
    334a:	81 e0       	ldi	r24, 0x01	; 1
    334c:	80 93 a6 01 	sts	0x01A6, r24
    3350:	11 c0       	rjmp	.+34     	; 0x3374 <IdentifyMessage+0xb2>
		else
	    if ((Length==MSG91_LENGTH)||(MsgCode==91)) IsMessage91=True;//426
    3352:	6c 35       	cpi	r22, 0x5C	; 92
    3354:	71 05       	cpc	r23, r1
    3356:	11 f0       	breq	.+4      	; 0x335c <IdentifyMessage+0x9a>
    3358:	8b 35       	cpi	r24, 0x5B	; 91
    335a:	21 f4       	brne	.+8      	; 0x3364 <IdentifyMessage+0xa2>
    335c:	81 e0       	ldi	r24, 0x01	; 1
    335e:	80 93 a7 01 	sts	0x01A7, r24
    3362:	08 c0       	rjmp	.+16     	; 0x3374 <IdentifyMessage+0xb2>
		else
	    if ((Length==MSG21_LENGTH)||(MsgCode==21)) IsMessage21=True;//426
    3364:	66 35       	cpi	r22, 0x56	; 86
    3366:	71 05       	cpc	r23, r1
    3368:	11 f0       	breq	.+4      	; 0x336e <IdentifyMessage+0xac>
    336a:	85 31       	cpi	r24, 0x15	; 21
    336c:	19 f4       	brne	.+6      	; 0x3374 <IdentifyMessage+0xb2>
    336e:	81 e0       	ldi	r24, 0x01	; 1
    3370:	80 93 a1 01 	sts	0x01A1, r24
        //EDC AdvanZ Respond
		if (IsMessage91==True){
    3374:	10 91 a7 01 	lds	r17, 0x01A7
    3378:	11 30       	cpi	r17, 0x01	; 1
    337a:	31 f4       	brne	.+12     	; 0x3388 <IdentifyMessage+0xc6>
		    IsMessage91=False;
    337c:	10 92 a7 01 	sts	0x01A7, r1
		    ProcMessage91();
    3380:	0e 94 e7 18 	call	0x31ce	; 0x31ce <ProcMessage91>
			IsSendMessageEDC=True;
    3384:	10 93 97 01 	sts	0x0197, r17
		  }

//	  sprintf(SerialSend,"Length:%i",Length);	 
//	  uart_print(1,0,SerialSend);
	 }
}
    3388:	1f 91       	pop	r17
    338a:	08 95       	ret

0000338c <Tab>:

	  }
     return Result;     
}

void Tab(char *sTab, char nTab){
    338c:	fc 01       	movw	r30, r24
    338e:	dc 01       	movw	r26, r24
    3390:	80 e0       	ldi	r24, 0x00	; 0
     char i;
	 for(i=0;i<nTab;i++){
	     sTab[i]=' ';
    3392:	90 e2       	ldi	r25, 0x20	; 32
    3394:	02 c0       	rjmp	.+4      	; 0x339a <Tab+0xe>
    3396:	9d 93       	st	X+, r25
     return Result;     
}

void Tab(char *sTab, char nTab){
     char i;
	 for(i=0;i<nTab;i++){
    3398:	8f 5f       	subi	r24, 0xFF	; 255
    339a:	86 17       	cp	r24, r22
    339c:	e0 f3       	brcs	.-8      	; 0x3396 <Tab+0xa>
	     sTab[i]=' ';
	 }sTab[nTab]=0;
    339e:	e6 0f       	add	r30, r22
    33a0:	f1 1d       	adc	r31, r1
    33a2:	10 82       	st	Z, r1
}
    33a4:	08 95       	ret

000033a6 <StrToRaw>:
			  }
		  }
	 }
}
                                       //12byte->6Byte         0 1 2 3  
void StrToRaw(char *Source,char *Dest){//Source: "1234567890AB"
    33a6:	dc 01       	movw	r26, r24
    33a8:	20 e0       	ldi	r18, 0x00	; 0
    33aa:	30 e0       	ldi	r19, 0x00	; 0
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
    33ac:	9c 91       	ld	r25, X
    33ae:	90 53       	subi	r25, 0x30	; 48
    33b0:	9a 30       	cpi	r25, 0x0A	; 10
    33b2:	08 f0       	brcs	.+2      	; 0x33b6 <StrToRaw+0x10>
    33b4:	90 e0       	ldi	r25, 0x00	; 0
	 char xRaw=0;
	 for (i=0;i<6;i++){
	      xA=Ord(Source[(2*i)]);
		  xB=(0x0F&Ord(Source[(2*i)+1]));
	      xRaw=((xA<<4) | xB);
	      Dest[i]=xRaw;
    33b6:	11 96       	adiw	r26, 0x01	; 1
    33b8:	8c 91       	ld	r24, X
    33ba:	11 97       	sbiw	r26, 0x01	; 1
    33bc:	80 53       	subi	r24, 0x30	; 48
    33be:	8a 30       	cpi	r24, 0x0A	; 10
    33c0:	08 f0       	brcs	.+2      	; 0x33c4 <StrToRaw+0x1e>
    33c2:	80 e0       	ldi	r24, 0x00	; 0
    33c4:	fb 01       	movw	r30, r22
    33c6:	e2 0f       	add	r30, r18
    33c8:	f3 1f       	adc	r31, r19
    33ca:	8f 70       	andi	r24, 0x0F	; 15
    33cc:	92 95       	swap	r25
    33ce:	90 7f       	andi	r25, 0xF0	; 240
    33d0:	98 2b       	or	r25, r24
    33d2:	90 83       	st	Z, r25
    33d4:	2f 5f       	subi	r18, 0xFF	; 255
    33d6:	3f 4f       	sbci	r19, 0xFF	; 255
    33d8:	12 96       	adiw	r26, 0x02	; 2
}
                                       //12byte->6Byte         0 1 2 3  
void StrToRaw(char *Source,char *Dest){//Source: "1234567890AB"
     char i,xA,xB;                //Dest  :  12345678 
	 char xRaw=0;
	 for (i=0;i<6;i++){
    33da:	26 30       	cpi	r18, 0x06	; 6
    33dc:	31 05       	cpc	r19, r1
    33de:	31 f7       	brne	.-52     	; 0x33ac <StrToRaw+0x6>
	      xA=Ord(Source[(2*i)]);
		  xB=(0x0F&Ord(Source[(2*i)+1]));
	      xRaw=((xA<<4) | xB);
	      Dest[i]=xRaw;
	 }	      
}
    33e0:	08 95       	ret

000033e2 <RawToStr>:
void RawToStr(char *Source,char *Dest){//Source:   1234567890AB
    33e2:	cf 93       	push	r28
    33e4:	df 93       	push	r29
    33e6:	eb 01       	movw	r28, r22
    33e8:	db 01       	movw	r26, r22
    33ea:	20 e0       	ldi	r18, 0x00	; 0
    33ec:	30 e0       	ldi	r19, 0x00	; 0
     unsigned char i,xRaw,cA,cB;               //Dest  :  "12345678" 
	 for (i=0;i<6;i++){
	      cA=Chr(Source[i]>>4);
    33ee:	fc 01       	movw	r30, r24
    33f0:	e2 0f       	add	r30, r18
    33f2:	f3 1f       	adc	r31, r19
    33f4:	e0 81       	ld	r30, Z
    33f6:	4e 2f       	mov	r20, r30
    33f8:	42 95       	swap	r20
    33fa:	4f 70       	andi	r20, 0x0F	; 15
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
    33fc:	4a 30       	cpi	r20, 0x0A	; 10
    33fe:	10 f0       	brcs	.+4      	; 0x3404 <RawToStr+0x22>
    3400:	40 e3       	ldi	r20, 0x30	; 48
    3402:	01 c0       	rjmp	.+2      	; 0x3406 <RawToStr+0x24>
	    Result='0'+X;
    3404:	40 5d       	subi	r20, 0xD0	; 208
}
void RawToStr(char *Source,char *Dest){//Source:   1234567890AB
     unsigned char i,xRaw,cA,cB;               //Dest  :  "12345678" 
	 for (i=0;i<6;i++){
	      cA=Chr(Source[i]>>4);
	      cB=Chr(Source[i]&0x0F);
    3406:	ef 70       	andi	r30, 0x0F	; 15
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
    3408:	ea 30       	cpi	r30, 0x0A	; 10
    340a:	10 f0       	brcs	.+4      	; 0x3410 <RawToStr+0x2e>
    340c:	e0 e3       	ldi	r30, 0x30	; 48
    340e:	01 c0       	rjmp	.+2      	; 0x3412 <RawToStr+0x30>
	    Result='0'+X;
    3410:	e0 5d       	subi	r30, 0xD0	; 208
void RawToStr(char *Source,char *Dest){//Source:   1234567890AB
     unsigned char i,xRaw,cA,cB;               //Dest  :  "12345678" 
	 for (i=0;i<6;i++){
	      cA=Chr(Source[i]>>4);
	      cB=Chr(Source[i]&0x0F);
          Dest[2*i]=cA;
    3412:	4c 93       	st	X, r20
          Dest[(2*i)+1]=cB;
    3414:	11 96       	adiw	r26, 0x01	; 1
    3416:	ec 93       	st	X, r30
    3418:	11 97       	sbiw	r26, 0x01	; 1
    341a:	2f 5f       	subi	r18, 0xFF	; 255
    341c:	3f 4f       	sbci	r19, 0xFF	; 255
    341e:	12 96       	adiw	r26, 0x02	; 2
	      Dest[i]=xRaw;
	 }	      
}
void RawToStr(char *Source,char *Dest){//Source:   1234567890AB
     unsigned char i,xRaw,cA,cB;               //Dest  :  "12345678" 
	 for (i=0;i<6;i++){
    3420:	26 30       	cpi	r18, 0x06	; 6
    3422:	31 05       	cpc	r19, r1
    3424:	21 f7       	brne	.-56     	; 0x33ee <RawToStr+0xc>
	      cA=Chr(Source[i]>>4);
	      cB=Chr(Source[i]&0x0F);
          Dest[2*i]=cA;
          Dest[(2*i)+1]=cB;
	 }Dest[12]=0;
    3426:	1c 86       	std	Y+12, r1	; 0x0c
}
    3428:	df 91       	pop	r29
    342a:	cf 91       	pop	r28
    342c:	08 95       	ret

0000342e <CalcMinus>:
}

char CalcMinus(char A, char B){
     signed char xC;//,xA,xB;
	 char Result;
	 if (A>=B) xC=((A-'0')-(B-'0'));
    342e:	86 17       	cp	r24, r22
    3430:	08 f4       	brcc	.+2      	; 0x3434 <CalcMinus+0x6>
	 else xC=10+((A-'0')-(B-'0'));//
    3432:	86 5f       	subi	r24, 0xF6	; 246
    3434:	86 1b       	sub	r24, r22
	 Result='0'+xC;
  return Result;
}
    3436:	80 5d       	subi	r24, 0xD0	; 208
    3438:	08 95       	ret

0000343a <CalcPlus>:

char CalcPlus(char A, char B){
    343a:	80 56       	subi	r24, 0x60	; 96
    343c:	86 0f       	add	r24, r22
    343e:	6a e0       	ldi	r22, 0x0A	; 10
    3440:	0e 94 f6 a9 	call	0x153ec	; 0x153ec <__divmodqi4>
     signed char xA,xB,xC;
	 char Result;
	 xC=((A-'0')+(B-'0'));
     Result='0'+(xC%10);  
   return Result;
}
    3444:	89 2f       	mov	r24, r25
    3446:	80 5d       	subi	r24, 0xD0	; 208
    3448:	08 95       	ret

0000344a <Chr>:
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
    344a:	8a 30       	cpi	r24, 0x0A	; 10
    344c:	10 f0       	brcs	.+4      	; 0x3452 <Chr+0x8>
    344e:	80 e3       	ldi	r24, 0x30	; 48
    3450:	08 95       	ret
	    Result='0'+X;
    3452:	80 5d       	subi	r24, 0xD0	; 208
	 }
	return Result;
}
    3454:	08 95       	ret

00003456 <Ord>:
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
    3456:	80 53       	subi	r24, 0x30	; 48
    3458:	8a 30       	cpi	r24, 0x0A	; 10
    345a:	08 f0       	brcs	.+2      	; 0x345e <Ord+0x8>
    345c:	80 e0       	ldi	r24, 0x00	; 0
	    Result=c-'0';
	 }
	return Result;
}
    345e:	08 95       	ret

00003460 <FTestCalculation>:
		  else
		  if (KeyChar=='*')stTestCalc=tcInitData;
	      break;	 
	 }
*/
}
    3460:	08 95       	ret

00003462 <GetTabSpace>:
	     StrCalc(TPLUS,prevSeg,currSeg,prevSeg);
	 }
	 sprintf_P(strC,PSTR("%s"),prevSeg);
}

void GetTabSpace(signed char TabLength, char *strTab){
    3462:	48 2f       	mov	r20, r24
    3464:	fb 01       	movw	r30, r22
     char i,nTab;
	 if (TabLength>0){
    3466:	18 16       	cp	r1, r24
    3468:	64 f4       	brge	.+24     	; 0x3482 <GetTabSpace+0x20>
		 nTab=TabLength;//%40;
    346a:	56 2f       	mov	r21, r22
    346c:	db 01       	movw	r26, r22
		 for(i=0;i<nTab;i++){
		     strTab[i]=' ';
    346e:	90 e2       	ldi	r25, 0x20	; 32
    3470:	9d 93       	st	X+, r25

void GetTabSpace(signed char TabLength, char *strTab){
     char i,nTab;
	 if (TabLength>0){
		 nTab=TabLength;//%40;
		 for(i=0;i<nTab;i++){
    3472:	8a 2f       	mov	r24, r26
    3474:	85 1b       	sub	r24, r21
    3476:	84 17       	cp	r24, r20
    3478:	d8 f3       	brcs	.-10     	; 0x3470 <GetTabSpace+0xe>
		     strTab[i]=' ';
		 }strTab[nTab]=0;
    347a:	e4 0f       	add	r30, r20
    347c:	f1 1d       	adc	r31, r1
    347e:	10 82       	st	Z, r1
    3480:	08 95       	ret
     }else{
	 strTab[0]=' ';
    3482:	80 e2       	ldi	r24, 0x20	; 32
    3484:	80 83       	st	Z, r24
	 strTab[1]=0;
    3486:	11 82       	std	Z+1, r1	; 0x01
    3488:	08 95       	ret

0000348a <GetBorderValue>:

}

char GetBorderValue(char BoderType){
     char Result=0;
	 switch (BoderType){
    348a:	86 30       	cpi	r24, 0x06	; 6
    348c:	51 f1       	breq	.+84     	; 0x34e2 <GetBorderValue+0x58>
    348e:	87 30       	cpi	r24, 0x07	; 7
    3490:	70 f4       	brcc	.+28     	; 0x34ae <GetBorderValue+0x24>
    3492:	83 30       	cpi	r24, 0x03	; 3
    3494:	11 f1       	breq	.+68     	; 0x34da <GetBorderValue+0x50>
    3496:	84 30       	cpi	r24, 0x04	; 4
    3498:	28 f4       	brcc	.+10     	; 0x34a4 <GetBorderValue+0x1a>
    349a:	81 30       	cpi	r24, 0x01	; 1
    349c:	c1 f0       	breq	.+48     	; 0x34ce <GetBorderValue+0x44>
    349e:	82 30       	cpi	r24, 0x02	; 2
    34a0:	c1 f4       	brne	.+48     	; 0x34d2 <GetBorderValue+0x48>
    34a2:	19 c0       	rjmp	.+50     	; 0x34d6 <GetBorderValue+0x4c>
    34a4:	84 30       	cpi	r24, 0x04	; 4
    34a6:	d9 f0       	breq	.+54     	; 0x34de <GetBorderValue+0x54>
    34a8:	85 30       	cpi	r24, 0x05	; 5
    34aa:	99 f4       	brne	.+38     	; 0x34d2 <GetBorderValue+0x48>
    34ac:	22 c0       	rjmp	.+68     	; 0x34f2 <GetBorderValue+0x68>
    34ae:	89 30       	cpi	r24, 0x09	; 9
    34b0:	f1 f0       	breq	.+60     	; 0x34ee <GetBorderValue+0x64>
    34b2:	8a 30       	cpi	r24, 0x0A	; 10
    34b4:	28 f4       	brcc	.+10     	; 0x34c0 <GetBorderValue+0x36>
    34b6:	87 30       	cpi	r24, 0x07	; 7
    34b8:	b1 f0       	breq	.+44     	; 0x34e6 <GetBorderValue+0x5c>
    34ba:	88 30       	cpi	r24, 0x08	; 8
    34bc:	51 f4       	brne	.+20     	; 0x34d2 <GetBorderValue+0x48>
    34be:	15 c0       	rjmp	.+42     	; 0x34ea <GetBorderValue+0x60>
    34c0:	8b 30       	cpi	r24, 0x0B	; 11
    34c2:	d9 f0       	breq	.+54     	; 0x34fa <GetBorderValue+0x70>
    34c4:	8b 30       	cpi	r24, 0x0B	; 11
    34c6:	b8 f0       	brcs	.+46     	; 0x34f6 <GetBorderValue+0x6c>
    34c8:	8c 30       	cpi	r24, 0x0C	; 12
    34ca:	19 f4       	brne	.+6      	; 0x34d2 <GetBorderValue+0x48>
    34cc:	18 c0       	rjmp	.+48     	; 0x34fe <GetBorderValue+0x74>
    34ce:	8a ed       	ldi	r24, 0xDA	; 218
    34d0:	08 95       	ret
    34d2:	80 e0       	ldi	r24, 0x00	; 0
    34d4:	08 95       	ret
    34d6:	82 ec       	ldi	r24, 0xC2	; 194
    34d8:	08 95       	ret
		case btTopLeft: 
		     Result=0xDA;
			 break;
		case btTopCenter: 
		     Result=0xC2;
			 break;
    34da:	8f eb       	ldi	r24, 0xBF	; 191
    34dc:	08 95       	ret
		case btTopRight:
		     Result=0xBF;		 
			 break;
    34de:	83 ec       	ldi	r24, 0xC3	; 195
    34e0:	08 95       	ret
		case btMiddleLeft: 
			 Result=0xC3;
			 break;
    34e2:	84 eb       	ldi	r24, 0xB4	; 180
    34e4:	08 95       	ret
		case btMiddleRight: 
			 Result=0xB4;
			 break;
    34e6:	80 ec       	ldi	r24, 0xC0	; 192
    34e8:	08 95       	ret
		case btBottomLeft: 
		     Result=0xC0;
			 break;
    34ea:	81 ec       	ldi	r24, 0xC1	; 193
    34ec:	08 95       	ret
		case btBottomCenter: 
			 Result=0xC1;
			 break;
    34ee:	89 ed       	ldi	r24, 0xD9	; 217
    34f0:	08 95       	ret
		case btBottomRight: 
			 Result=0xD9;
			 break;
    34f2:	85 ec       	ldi	r24, 0xC5	; 197
    34f4:	08 95       	ret
        case btMiddleCenter:
		     Result=0xC5;
		     break;
    34f6:	83 eb       	ldi	r24, 0xB3	; 179
    34f8:	08 95       	ret
		case btVertical: 
			 Result=0xB3;
			 break;
    34fa:	84 ec       	ldi	r24, 0xC4	; 196
    34fc:	08 95       	ret
		case btHorizontal:
			 Result=0xC4;
			 break;	 
    34fe:	8d e0       	ldi	r24, 0x0D	; 13
        case btNewLine:
		     Result=0x0D;
			 break;	 
	 }
   return Result;
}
    3500:	08 95       	ret

00003502 <InserBorder>:

void InserBorder(char BorderType, char *strPrnBuffer,char nLength,unsigned int *Pos){
    3502:	bf 92       	push	r11
    3504:	cf 92       	push	r12
    3506:	df 92       	push	r13
    3508:	ef 92       	push	r14
    350a:	ff 92       	push	r15
    350c:	0f 93       	push	r16
    350e:	1f 93       	push	r17
    3510:	cf 93       	push	r28
    3512:	df 93       	push	r29
    3514:	b8 2e       	mov	r11, r24
    3516:	8b 01       	movw	r16, r22
    3518:	e4 2e       	mov	r14, r20
    351a:	69 01       	movw	r12, r18
     char i;//,BorderValue=0;
	 unsigned int StartPos,iPos=0;
	 
	 iPos=*Pos;
    351c:	f9 01       	movw	r30, r18
    351e:	c0 81       	ld	r28, Z
    3520:	d1 81       	ldd	r29, Z+1	; 0x01
    3522:	0c 0f       	add	r16, r28
    3524:	1d 1f       	adc	r17, r29
    3526:	ff 24       	eor	r15, r15
    3528:	07 c0       	rjmp	.+14     	; 0x3538 <InserBorder+0x36>
	 StartPos=iPos;
	 for (i=0;i<nLength;i++){
	      strPrnBuffer[iPos]=GetBorderValue(BorderType);
    352a:	8b 2d       	mov	r24, r11
    352c:	0e 94 45 1a 	call	0x348a	; 0x348a <GetBorderValue>
    3530:	f8 01       	movw	r30, r16
    3532:	81 93       	st	Z+, r24
    3534:	8f 01       	movw	r16, r30
     char i;//,BorderValue=0;
	 unsigned int StartPos,iPos=0;
	 
	 iPos=*Pos;
	 StartPos=iPos;
	 for (i=0;i<nLength;i++){
    3536:	f3 94       	inc	r15
    3538:	fe 14       	cp	r15, r14
    353a:	b8 f3       	brcs	.-18     	; 0x352a <InserBorder+0x28>
	 //for (i=0;i<nLength;i++){
	 //     if (strPrnBuffer[i+StartPos]!=GetBorderValue(BorderType)){
//		      strPrnBuffer[i+StartPos]=GetBorderValue(BorderType);
//		  }
//	 }
     *Pos=iPos;
    353c:	ce 0d       	add	r28, r14
    353e:	d1 1d       	adc	r29, r1
    3540:	f6 01       	movw	r30, r12
    3542:	d1 83       	std	Z+1, r29	; 0x01
    3544:	c0 83       	st	Z, r28
}
    3546:	df 91       	pop	r29
    3548:	cf 91       	pop	r28
    354a:	1f 91       	pop	r17
    354c:	0f 91       	pop	r16
    354e:	ff 90       	pop	r15
    3550:	ef 90       	pop	r14
    3552:	df 90       	pop	r13
    3554:	cf 90       	pop	r12
    3556:	bf 90       	pop	r11
    3558:	08 95       	ret

0000355a <TestUserInput>:
	   //lcd_printf(1,1,PSTR("InputNumber:"));
       //lcd_printf(2,1,PSTR("_         "));
	}
  return Result;
  */
}
    355a:	08 95       	ret

0000355c <GeniusSendPumpStatus>:
   return Result;
}

void GeniusSendPumpStatus(char iPumpID){
     
}
    355c:	08 95       	ret

0000355e <GeniusSendStopPump>:
void GeniusSendStopPump(char iPumpID){
}
    355e:	08 95       	ret

00003560 <GeniusSendResumePump>:
void GeniusSendResumePump(char iPumpID){
}
    3560:	08 95       	ret

00003562 <GeniusSendPumpPreset>:
void GeniusSendPumpPreset(char iPumpID){
}
    3562:	08 95       	ret

00003564 <SetIncomingTransStatus>:
	 sprintf_P(strSend,PSTR("%d"),cSum);
	 uart_print(1,1,strSend);	 
}


void SetIncomingTransStatus(char iPumpID,char xTransStatus){
    3564:	e8 2f       	mov	r30, r24
char iStatus,xMaskA,xMaskB,xMaskC,xPumpID;
	 xPumpID=(iPumpID&0x0F);
    3566:	28 2f       	mov	r18, r24
    3568:	2f 70       	andi	r18, 0x0F	; 15
     iStatus=IncomingTransaction[xPumpID/8];
    356a:	82 2f       	mov	r24, r18
    356c:	86 95       	lsr	r24
    356e:	86 95       	lsr	r24
    3570:	86 95       	lsr	r24
    3572:	a8 2f       	mov	r26, r24
    3574:	b0 e0       	ldi	r27, 0x00	; 0
    3576:	ac 52       	subi	r26, 0x2C	; 44
    3578:	b4 4f       	sbci	r27, 0xF4	; 244
    357a:	4c 91       	ld	r20, X
	 if (xTransStatus==TS_NEW){
    357c:	62 30       	cpi	r22, 0x02	; 2
    357e:	59 f4       	brne	.+22     	; 0x3596 <SetIncomingTransStatus+0x32>
	     iStatus=(iStatus|(1<<(xPumpID%8)));	 
    3580:	27 70       	andi	r18, 0x07	; 7
    3582:	81 e0       	ldi	r24, 0x01	; 1
    3584:	90 e0       	ldi	r25, 0x00	; 0
    3586:	02 c0       	rjmp	.+4      	; 0x358c <SetIncomingTransStatus+0x28>
    3588:	88 0f       	add	r24, r24
    358a:	99 1f       	adc	r25, r25
    358c:	2a 95       	dec	r18
    358e:	e2 f7       	brpl	.-8      	; 0x3588 <SetIncomingTransStatus+0x24>
    3590:	48 2b       	or	r20, r24
		 IncomingTransaction[xPumpID/8]=iStatus;
    3592:	4c 93       	st	X, r20
    3594:	08 95       	ret
	 }else if (xTransStatus==TS_OLD){
    3596:	63 30       	cpi	r22, 0x03	; 3
    3598:	b1 f4       	brne	.+44     	; 0x35c6 <SetIncomingTransStatus+0x62>
		 xMaskA=(0xFE<<(xPumpID%8));
    359a:	27 70       	andi	r18, 0x07	; 7
    359c:	8e ef       	ldi	r24, 0xFE	; 254
    359e:	90 e0       	ldi	r25, 0x00	; 0
    35a0:	01 c0       	rjmp	.+2      	; 0x35a4 <SetIncomingTransStatus+0x40>
    35a2:	88 0f       	add	r24, r24
    35a4:	2a 95       	dec	r18
    35a6:	ea f7       	brpl	.-6      	; 0x35a2 <SetIncomingTransStatus+0x3e>
		 xMaskB=(~xMaskA)>>1;
		 xMaskC=xMaskA|xMaskB;
		 iStatus=iStatus&xMaskC;
		 IncomingTransaction[iPumpID/8]=iStatus;
    35a8:	e6 95       	lsr	r30
    35aa:	e6 95       	lsr	r30
    35ac:	e6 95       	lsr	r30
    35ae:	f0 e0       	ldi	r31, 0x00	; 0
    35b0:	ec 52       	subi	r30, 0x2C	; 44
    35b2:	f4 4f       	sbci	r31, 0xF4	; 244
    35b4:	28 2f       	mov	r18, r24
    35b6:	30 e0       	ldi	r19, 0x00	; 0
    35b8:	20 95       	com	r18
    35ba:	30 95       	com	r19
    35bc:	35 95       	asr	r19
    35be:	27 95       	ror	r18
    35c0:	82 2b       	or	r24, r18
    35c2:	84 23       	and	r24, r20
    35c4:	80 83       	st	Z, r24
    35c6:	08 95       	ret

000035c8 <GetIncomingTransStatus>:
	 }
}
char GetIncomingTransStatus(char iPumpID){
     char xPumpID,Result;
	 xPumpID=(iPumpID&0x0F);
    35c8:	8f 70       	andi	r24, 0x0F	; 15
	 Result=TS_NONE;
     if((IncomingTransaction[xPumpID/8]>>(xPumpID%8))==1){
    35ca:	e8 2f       	mov	r30, r24
    35cc:	e6 95       	lsr	r30
    35ce:	e6 95       	lsr	r30
    35d0:	e6 95       	lsr	r30
    35d2:	f0 e0       	ldi	r31, 0x00	; 0
    35d4:	ec 52       	subi	r30, 0x2C	; 44
    35d6:	f4 4f       	sbci	r31, 0xF4	; 244
    35d8:	90 81       	ld	r25, Z
    35da:	29 2f       	mov	r18, r25
    35dc:	30 e0       	ldi	r19, 0x00	; 0
    35de:	87 70       	andi	r24, 0x07	; 7
    35e0:	02 c0       	rjmp	.+4      	; 0x35e6 <GetIncomingTransStatus+0x1e>
    35e2:	35 95       	asr	r19
    35e4:	27 95       	ror	r18
    35e6:	8a 95       	dec	r24
    35e8:	e2 f7       	brpl	.-8      	; 0x35e2 <GetIncomingTransStatus+0x1a>
    35ea:	21 30       	cpi	r18, 0x01	; 1
    35ec:	31 05       	cpc	r19, r1
    35ee:	11 f4       	brne	.+4      	; 0x35f4 <GetIncomingTransStatus+0x2c>
    35f0:	82 e0       	ldi	r24, 0x02	; 2
    35f2:	08 95       	ret
	     Result=TS_NEW;
	 }else
     if((IncomingTransaction[xPumpID/8]>>(xPumpID%8))==0){
    35f4:	23 2b       	or	r18, r19
    35f6:	11 f4       	brne	.+4      	; 0x35fc <GetIncomingTransStatus+0x34>
    35f8:	83 e0       	ldi	r24, 0x03	; 3
    35fa:	08 95       	ret
    35fc:	80 e0       	ldi	r24, 0x00	; 0
	     Result=TS_OLD;
	 }
   return Result;
}
    35fe:	08 95       	ret

00003600 <ComposeDatetime>:
	}
	 //NormalizeDecimal(eeprom_read_byte(&DefDecimalTotalMoney),2,Result);
}


void ComposeDatetime(char *Result){// 2010/10/01 16:27:44
    3600:	df 93       	push	r29
    3602:	cf 93       	push	r28
    3604:	cd b7       	in	r28, 0x3d	; 61
    3606:	de b7       	in	r29, 0x3e	; 62
    3608:	62 97       	sbiw	r28, 0x12	; 18
    360a:	0f b6       	in	r0, 0x3f	; 63
    360c:	f8 94       	cli
    360e:	de bf       	out	0x3e, r29	; 62
    3610:	0f be       	out	0x3f, r0	; 63
    3612:	cd bf       	out	0x3d, r28	; 61
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    3614:	20 91 ba 03 	lds	r18, 0x03BA
    3618:	2f 83       	std	Y+7, r18	; 0x07
    361a:	20 91 bb 03 	lds	r18, 0x03BB
    361e:	28 87       	std	Y+8, r18	; 0x08
	 }Dest[Length]=0;
    3620:	19 86       	std	Y+9, r1	; 0x09
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    3622:	20 91 bd 03 	lds	r18, 0x03BD
    3626:	2c 83       	std	Y+4, r18	; 0x04
    3628:	20 91 be 03 	lds	r18, 0x03BE
    362c:	2d 83       	std	Y+5, r18	; 0x05
	 }Dest[Length]=0;
    362e:	1e 82       	std	Y+6, r1	; 0x06
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    3630:	20 91 c0 03 	lds	r18, 0x03C0
    3634:	29 83       	std	Y+1, r18	; 0x01
    3636:	20 91 c1 03 	lds	r18, 0x03C1
    363a:	2a 83       	std	Y+2, r18	; 0x02
	 }Dest[Length]=0;
    363c:	1b 82       	std	Y+3, r1	; 0x03
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    363e:	20 91 74 08 	lds	r18, 0x0874
    3642:	2a 87       	std	Y+10, r18	; 0x0a
    3644:	20 91 75 08 	lds	r18, 0x0875
    3648:	2b 87       	std	Y+11, r18	; 0x0b
	 }Dest[Length]=0;
    364a:	1c 86       	std	Y+12, r1	; 0x0c
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    364c:	20 91 77 08 	lds	r18, 0x0877
    3650:	2d 87       	std	Y+13, r18	; 0x0d
    3652:	20 91 78 08 	lds	r18, 0x0878
    3656:	2e 87       	std	Y+14, r18	; 0x0e
	 }Dest[Length]=0;
    3658:	1f 86       	std	Y+15, r1	; 0x0f
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    365a:	20 91 7a 08 	lds	r18, 0x087A
    365e:	28 8b       	std	Y+16, r18	; 0x10
    3660:	20 91 7b 08 	lds	r18, 0x087B
    3664:	29 8b       	std	Y+17, r18	; 0x11
	 }Dest[Length]=0;
    3666:	1a 8a       	std	Y+18, r1	; 0x12
     StrPosCopy(strSystemDate,sYear,6,2);

     StrPosCopy(strSystemTime,sHour,0,2);
     StrPosCopy(strSystemTime,sMinute,3,2);
     StrPosCopy(strSystemTime,sSecond,6,2);
	 sprintf_P(Result,PSTR("20%s/%s/%s %s:%s:%s"),sYear,sMonth,sDay,sHour,sMinute,sSecond);
    3668:	2d b7       	in	r18, 0x3d	; 61
    366a:	3e b7       	in	r19, 0x3e	; 62
    366c:	20 51       	subi	r18, 0x10	; 16
    366e:	30 40       	sbci	r19, 0x00	; 0
    3670:	0f b6       	in	r0, 0x3f	; 63
    3672:	f8 94       	cli
    3674:	3e bf       	out	0x3e, r19	; 62
    3676:	0f be       	out	0x3f, r0	; 63
    3678:	2d bf       	out	0x3d, r18	; 61
    367a:	ed b7       	in	r30, 0x3d	; 61
    367c:	fe b7       	in	r31, 0x3e	; 62
    367e:	31 96       	adiw	r30, 0x01	; 1
    3680:	ad b7       	in	r26, 0x3d	; 61
    3682:	be b7       	in	r27, 0x3e	; 62
    3684:	12 96       	adiw	r26, 0x02	; 2
    3686:	9c 93       	st	X, r25
    3688:	8e 93       	st	-X, r24
    368a:	11 97       	sbiw	r26, 0x01	; 1
    368c:	85 e3       	ldi	r24, 0x35	; 53
    368e:	95 e0       	ldi	r25, 0x05	; 5
    3690:	93 83       	std	Z+3, r25	; 0x03
    3692:	82 83       	std	Z+2, r24	; 0x02
    3694:	ce 01       	movw	r24, r28
    3696:	01 96       	adiw	r24, 0x01	; 1
    3698:	95 83       	std	Z+5, r25	; 0x05
    369a:	84 83       	std	Z+4, r24	; 0x04
    369c:	ce 01       	movw	r24, r28
    369e:	04 96       	adiw	r24, 0x04	; 4
    36a0:	97 83       	std	Z+7, r25	; 0x07
    36a2:	86 83       	std	Z+6, r24	; 0x06
    36a4:	ce 01       	movw	r24, r28
    36a6:	07 96       	adiw	r24, 0x07	; 7
    36a8:	91 87       	std	Z+9, r25	; 0x09
    36aa:	80 87       	std	Z+8, r24	; 0x08
    36ac:	ce 01       	movw	r24, r28
    36ae:	0a 96       	adiw	r24, 0x0a	; 10
    36b0:	93 87       	std	Z+11, r25	; 0x0b
    36b2:	82 87       	std	Z+10, r24	; 0x0a
    36b4:	ce 01       	movw	r24, r28
    36b6:	0d 96       	adiw	r24, 0x0d	; 13
    36b8:	95 87       	std	Z+13, r25	; 0x0d
    36ba:	84 87       	std	Z+12, r24	; 0x0c
    36bc:	ce 01       	movw	r24, r28
    36be:	40 96       	adiw	r24, 0x10	; 16
    36c0:	97 87       	std	Z+15, r25	; 0x0f
    36c2:	86 87       	std	Z+14, r24	; 0x0e
    36c4:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
    36c8:	2d b7       	in	r18, 0x3d	; 61
    36ca:	3e b7       	in	r19, 0x3e	; 62
    36cc:	20 5f       	subi	r18, 0xF0	; 240
    36ce:	3f 4f       	sbci	r19, 0xFF	; 255
    36d0:	0f b6       	in	r0, 0x3f	; 63
    36d2:	f8 94       	cli
    36d4:	3e bf       	out	0x3e, r19	; 62
    36d6:	0f be       	out	0x3f, r0	; 63
    36d8:	2d bf       	out	0x3d, r18	; 61
}
    36da:	62 96       	adiw	r28, 0x12	; 18
    36dc:	0f b6       	in	r0, 0x3f	; 63
    36de:	f8 94       	cli
    36e0:	de bf       	out	0x3e, r29	; 62
    36e2:	0f be       	out	0x3f, r0	; 63
    36e4:	cd bf       	out	0x3d, r28	; 61
    36e6:	cf 91       	pop	r28
    36e8:	df 91       	pop	r29
    36ea:	08 95       	ret

000036ec <leadingZero>:
	     }String[Size]=0;
	 }
}

void leadingZero(char Val,char *StrResult){
     sprintf_P(StrResult,PSTR("%.2d"),Val);
    36ec:	00 d0       	rcall	.+0      	; 0x36ee <leadingZero+0x2>
    36ee:	00 d0       	rcall	.+0      	; 0x36f0 <leadingZero+0x4>
    36f0:	00 d0       	rcall	.+0      	; 0x36f2 <leadingZero+0x6>
    36f2:	ed b7       	in	r30, 0x3d	; 61
    36f4:	fe b7       	in	r31, 0x3e	; 62
    36f6:	31 96       	adiw	r30, 0x01	; 1
    36f8:	ad b7       	in	r26, 0x3d	; 61
    36fa:	be b7       	in	r27, 0x3e	; 62
    36fc:	12 96       	adiw	r26, 0x02	; 2
    36fe:	7c 93       	st	X, r23
    3700:	6e 93       	st	-X, r22
    3702:	11 97       	sbiw	r26, 0x01	; 1
    3704:	29 ee       	ldi	r18, 0xE9	; 233
    3706:	3e e0       	ldi	r19, 0x0E	; 14
    3708:	33 83       	std	Z+3, r19	; 0x03
    370a:	22 83       	std	Z+2, r18	; 0x02
    370c:	84 83       	std	Z+4, r24	; 0x04
    370e:	15 82       	std	Z+5, r1	; 0x05
    3710:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
    3714:	8d b7       	in	r24, 0x3d	; 61
    3716:	9e b7       	in	r25, 0x3e	; 62
    3718:	06 96       	adiw	r24, 0x06	; 6
    371a:	0f b6       	in	r0, 0x3f	; 63
    371c:	f8 94       	cli
    371e:	9e bf       	out	0x3e, r25	; 62
    3720:	0f be       	out	0x3f, r0	; 63
    3722:	8d bf       	out	0x3d, r24	; 61

}
    3724:	08 95       	ret

00003726 <procMessage21>:
       StrPosCopy(rcv_trans,strFreeMessageLine3,79,20);
       StrPosCopy(rcv_trans,strFreeMessageLine4,99,20);
	 return Result;
}

char procMessage21(){
    3726:	af 92       	push	r10
    3728:	bf 92       	push	r11
    372a:	cf 92       	push	r12
    372c:	df 92       	push	r13
    372e:	ef 92       	push	r14
    3730:	ff 92       	push	r15
    3732:	0f 93       	push	r16
    3734:	1f 93       	push	r17
    3736:	df 93       	push	r29
    3738:	cf 93       	push	r28
    373a:	cd b7       	in	r28, 0x3d	; 61
    373c:	de b7       	in	r29, 0x3e	; 62
    373e:	2b 97       	sbiw	r28, 0x0b	; 11
    3740:	0f b6       	in	r0, 0x3f	; 63
    3742:	f8 94       	cli
    3744:	de bf       	out	0x3e, r29	; 62
    3746:	0f be       	out	0x3f, r0	; 63
    3748:	cd bf       	out	0x3d, r28	; 61
    374a:	09 e0       	ldi	r16, 0x09	; 9
    374c:	11 e0       	ldi	r17, 0x01	; 1
    374e:	32 e4       	ldi	r19, 0x42	; 66
    3750:	e3 2e       	mov	r14, r19
    3752:	39 e0       	ldi	r19, 0x09	; 9
    3754:	f3 2e       	mov	r15, r19
    3756:	6e 01       	movw	r12, r28
    3758:	08 94       	sec
    375a:	c1 1c       	adc	r12, r1
    375c:	d1 1c       	adc	r13, r1
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    375e:	2b e0       	ldi	r18, 0x0B	; 11
    3760:	a2 2e       	mov	r10, r18
    3762:	b1 2c       	mov	r11, r1
    3764:	ac 0e       	add	r10, r28
    3766:	bd 1e       	adc	r11, r29
       StrPosCopy(rcv_trans,strFreeMessageLine3,79,20);
       StrPosCopy(rcv_trans,strFreeMessageLine4,99,20);
	 return Result;
}

char procMessage21(){
    3768:	f6 01       	movw	r30, r12
    376a:	d7 01       	movw	r26, r14
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    376c:	8d 91       	ld	r24, X+
    376e:	81 93       	st	Z+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    3770:	ea 15       	cp	r30, r10
    3772:	fb 05       	cpc	r31, r11
    3774:	d9 f7       	brne	.-10     	; 0x376c <procMessage21+0x46>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    3776:	1b 86       	std	Y+11, r1	; 0x0b
     char i,Result,strBankName[11];
	 Result=0;
	 for(i=0;i<4;i++){
         StrPosCopy(rcv_trans,strBankName,(37+(i*10)),10);
		 //Result=((Result<<1)|SaveToEEPROM(strBankName,DefBankName[i],11)); 
		 eeprom_write_block((const void*)&strBankName, (void*)&DefBankName[i], 11);
    3778:	c6 01       	movw	r24, r12
    377a:	b8 01       	movw	r22, r16
    377c:	4b e0       	ldi	r20, 0x0B	; 11
    377e:	50 e0       	ldi	r21, 0x00	; 0
    3780:	0e 94 d1 ac 	call	0x159a2	; 0x159a2 <__eewr_block_m128>
    3784:	05 5f       	subi	r16, 0xF5	; 245
    3786:	1f 4f       	sbci	r17, 0xFF	; 255
    3788:	8a e0       	ldi	r24, 0x0A	; 10
    378a:	90 e0       	ldi	r25, 0x00	; 0
    378c:	e8 0e       	add	r14, r24
    378e:	f9 1e       	adc	r15, r25
}

char procMessage21(){
     char i,Result,strBankName[11];
	 Result=0;
	 for(i=0;i<4;i++){
    3790:	91 e0       	ldi	r25, 0x01	; 1
    3792:	05 33       	cpi	r16, 0x35	; 53
    3794:	19 07       	cpc	r17, r25
    3796:	41 f7       	brne	.-48     	; 0x3768 <procMessage21+0x42>
         StrPosCopy(rcv_trans,strBankName,(37+(i*10)),10);
		 //Result=((Result<<1)|SaveToEEPROM(strBankName,DefBankName[i],11)); 
		 eeprom_write_block((const void*)&strBankName, (void*)&DefBankName[i], 11);
	 }
	 return Result;
}
    3798:	80 e0       	ldi	r24, 0x00	; 0
    379a:	2b 96       	adiw	r28, 0x0b	; 11
    379c:	0f b6       	in	r0, 0x3f	; 63
    379e:	f8 94       	cli
    37a0:	de bf       	out	0x3e, r29	; 62
    37a2:	0f be       	out	0x3f, r0	; 63
    37a4:	cd bf       	out	0x3d, r28	; 61
    37a6:	cf 91       	pop	r28
    37a8:	df 91       	pop	r29
    37aa:	1f 91       	pop	r17
    37ac:	0f 91       	pop	r16
    37ae:	ff 90       	pop	r15
    37b0:	ef 90       	pop	r14
    37b2:	df 90       	pop	r13
    37b4:	cf 90       	pop	r12
    37b6:	bf 90       	pop	r11
    37b8:	af 90       	pop	r10
    37ba:	08 95       	ret

000037bc <MasterReset>:
		     eeprom_write_byte(&DefDecimalPrice+i,DecimalSetting[i]);
		 }
	 }
}

void MasterReset(){
    37bc:	af 92       	push	r10
    37be:	bf 92       	push	r11
    37c0:	df 92       	push	r13
    37c2:	ef 92       	push	r14
    37c4:	ff 92       	push	r15
    37c6:	0f 93       	push	r16
    37c8:	1f 93       	push	r17
    37ca:	df 93       	push	r29
    37cc:	cf 93       	push	r28
    37ce:	cd b7       	in	r28, 0x3d	; 61
    37d0:	de b7       	in	r29, 0x3e	; 62
    37d2:	ec 97       	sbiw	r28, 0x3c	; 60
    37d4:	0f b6       	in	r0, 0x3f	; 63
    37d6:	f8 94       	cli
    37d8:	de bf       	out	0x3e, r29	; 62
    37da:	0f be       	out	0x3f, r0	; 63
    37dc:	cd bf       	out	0x3d, r28	; 61
     char strEEP[50];
	 char xArray[10];
     //Restore All Stored EEPROM data to the Default
     sprintf_P(strEEP,PSTR("  "));
    37de:	00 d0       	rcall	.+0      	; 0x37e0 <MasterReset+0x24>
    37e0:	00 d0       	rcall	.+0      	; 0x37e2 <MasterReset+0x26>
    37e2:	5b e0       	ldi	r21, 0x0B	; 11
    37e4:	e5 2e       	mov	r14, r21
    37e6:	f1 2c       	mov	r15, r1
    37e8:	ec 0e       	add	r14, r28
    37ea:	fd 1e       	adc	r15, r29
    37ec:	ed b7       	in	r30, 0x3d	; 61
    37ee:	fe b7       	in	r31, 0x3e	; 62
    37f0:	f2 82       	std	Z+2, r15	; 0x02
    37f2:	e1 82       	std	Z+1, r14	; 0x01
    37f4:	88 e1       	ldi	r24, 0x18	; 24
    37f6:	95 e0       	ldi	r25, 0x05	; 5
    37f8:	94 83       	std	Z+4, r25	; 0x04
    37fa:	83 83       	std	Z+3, r24	; 0x03
    37fc:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefOperatorName, sizeof(DefOperatorName));
    3800:	0f 90       	pop	r0
    3802:	0f 90       	pop	r0
    3804:	0f 90       	pop	r0
    3806:	0f 90       	pop	r0
    3808:	c7 01       	movw	r24, r14
    380a:	65 e1       	ldi	r22, 0x15	; 21
    380c:	70 e0       	ldi	r23, 0x00	; 0
    380e:	43 e1       	ldi	r20, 0x13	; 19
    3810:	50 e0       	ldi	r21, 0x00	; 0
    3812:	0e 94 d1 ac 	call	0x159a2	; 0x159a2 <__eewr_block_m128>

	 xArray[0]=192;	 xArray[1]=168; 	 xArray[2]=16;	 xArray[3]=70; 
    3816:	40 ec       	ldi	r20, 0xC0	; 192
    3818:	d4 2e       	mov	r13, r20
    381a:	d9 82       	std	Y+1, r13	; 0x01
    381c:	08 ea       	ldi	r16, 0xA8	; 168
    381e:	0a 83       	std	Y+2, r16	; 0x02
    3820:	10 e1       	ldi	r17, 0x10	; 16
    3822:	1b 83       	std	Y+3, r17	; 0x03
    3824:	86 e4       	ldi	r24, 0x46	; 70
    3826:	8c 83       	std	Y+4, r24	; 0x04
	 eeprom_write_block((const void*) &xArray, (void*) &DefClientIP, 4);
    3828:	5e 01       	movw	r10, r28
    382a:	08 94       	sec
    382c:	a1 1c       	adc	r10, r1
    382e:	b1 1c       	adc	r11, r1
    3830:	c5 01       	movw	r24, r10
    3832:	68 e2       	ldi	r22, 0x28	; 40
    3834:	70 e0       	ldi	r23, 0x00	; 0
    3836:	44 e0       	ldi	r20, 0x04	; 4
    3838:	50 e0       	ldi	r21, 0x00	; 0
    383a:	0e 94 d1 ac 	call	0x159a2	; 0x159a2 <__eewr_block_m128>

	 xArray[0]=192;	 xArray[1]=168; 	 xArray[2]=16;	 xArray[3]=180; 
    383e:	d9 82       	std	Y+1, r13	; 0x01
    3840:	0a 83       	std	Y+2, r16	; 0x02
    3842:	1b 83       	std	Y+3, r17	; 0x03
    3844:	84 eb       	ldi	r24, 0xB4	; 180
    3846:	8c 83       	std	Y+4, r24	; 0x04
	 eeprom_write_block((const void*) &xArray, (void*) &DefServerIP, 4);
    3848:	c5 01       	movw	r24, r10
    384a:	6c e2       	ldi	r22, 0x2C	; 44
    384c:	70 e0       	ldi	r23, 0x00	; 0
    384e:	44 e0       	ldi	r20, 0x04	; 4
    3850:	50 e0       	ldi	r21, 0x00	; 0
    3852:	0e 94 d1 ac 	call	0x159a2	; 0x159a2 <__eewr_block_m128>

     eeprom_write_byte(&DefPrinterType,PT_CUSTOM_TG02);
    3856:	80 e3       	ldi	r24, 0x30	; 48
    3858:	90 e0       	ldi	r25, 0x00	; 0
    385a:	61 e0       	ldi	r22, 0x01	; 1
    385c:	0e 94 db ac 	call	0x159b6	; 0x159b6 <__eewr_byte_m128>

	 eeprom_write_byte(&DefPrintScrollEnd,7);
    3860:	81 e3       	ldi	r24, 0x31	; 49
    3862:	90 e0       	ldi	r25, 0x00	; 0
    3864:	67 e0       	ldi	r22, 0x07	; 7
    3866:	0e 94 db ac 	call	0x159b6	; 0x159b6 <__eewr_byte_m128>
	 eeprom_write_byte(&DefPrintScrollSpace,5);
    386a:	82 e3       	ldi	r24, 0x32	; 50
    386c:	90 e0       	ldi	r25, 0x00	; 0
    386e:	65 e0       	ldi	r22, 0x05	; 5
    3870:	0e 94 db ac 	call	0x159b6	; 0x159b6 <__eewr_byte_m128>
	 eeprom_write_byte(&DefPrintAutoCut,2);
    3874:	83 e3       	ldi	r24, 0x33	; 51
    3876:	90 e0       	ldi	r25, 0x00	; 0
    3878:	62 e0       	ldi	r22, 0x02	; 2
    387a:	0e 94 db ac 	call	0x159b6	; 0x159b6 <__eewr_byte_m128>
	 eeprom_write_byte(&DefPrintLogo,0);
    387e:	84 e3       	ldi	r24, 0x34	; 52
    3880:	90 e0       	ldi	r25, 0x00	; 0
    3882:	60 e0       	ldi	r22, 0x00	; 0
    3884:	0e 94 db ac 	call	0x159b6	; 0x159b6 <__eewr_byte_m128>
	 eeprom_write_byte(&DefPrintSize,3);
    3888:	85 e3       	ldi	r24, 0x35	; 53
    388a:	90 e0       	ldi	r25, 0x00	; 0
    388c:	63 e0       	ldi	r22, 0x03	; 3
    388e:	0e 94 db ac 	call	0x159b6	; 0x159b6 <__eewr_byte_m128>

	 eeprom_write_byte(&DefConnectionHost,0);
    3892:	86 e3       	ldi	r24, 0x36	; 54
    3894:	90 e0       	ldi	r25, 0x00	; 0
    3896:	60 e0       	ldi	r22, 0x00	; 0
    3898:	0e 94 db ac 	call	0x159b6	; 0x159b6 <__eewr_byte_m128>
	 eeprom_write_byte(&DefShowDateTime,1);
    389c:	87 e3       	ldi	r24, 0x37	; 55
    389e:	90 e0       	ldi	r25, 0x00	; 0
    38a0:	61 e0       	ldi	r22, 0x01	; 1
    38a2:	0e 94 db ac 	call	0x159b6	; 0x159b6 <__eewr_byte_m128>
	 eeprom_write_byte(&DefNotifScreen,1);
    38a6:	88 e3       	ldi	r24, 0x38	; 56
    38a8:	90 e0       	ldi	r25, 0x00	; 0
    38aa:	61 e0       	ldi	r22, 0x01	; 1
    38ac:	0e 94 db ac 	call	0x159b6	; 0x159b6 <__eewr_byte_m128>

	 eeprom_write_byte(&DefDecimalPrice,0);
    38b0:	89 e3       	ldi	r24, 0x39	; 57
    38b2:	90 e0       	ldi	r25, 0x00	; 0
    38b4:	60 e0       	ldi	r22, 0x00	; 0
    38b6:	0e 94 db ac 	call	0x159b6	; 0x159b6 <__eewr_byte_m128>
	 eeprom_write_byte(&DefDecimalVolume,3);
    38ba:	8a e3       	ldi	r24, 0x3A	; 58
    38bc:	90 e0       	ldi	r25, 0x00	; 0
    38be:	63 e0       	ldi	r22, 0x03	; 3
    38c0:	0e 94 db ac 	call	0x159b6	; 0x159b6 <__eewr_byte_m128>
	 eeprom_write_byte(&DefDecimalMoney,0);
    38c4:	8b e3       	ldi	r24, 0x3B	; 59
    38c6:	90 e0       	ldi	r25, 0x00	; 0
    38c8:	60 e0       	ldi	r22, 0x00	; 0
    38ca:	0e 94 db ac 	call	0x159b6	; 0x159b6 <__eewr_byte_m128>
	 eeprom_write_byte(&DefDecimalTotalVolume,2);
    38ce:	8c e3       	ldi	r24, 0x3C	; 60
    38d0:	90 e0       	ldi	r25, 0x00	; 0
    38d2:	62 e0       	ldi	r22, 0x02	; 2
    38d4:	0e 94 db ac 	call	0x159b6	; 0x159b6 <__eewr_byte_m128>
	 eeprom_write_byte(&DefDecimalTotalMoney,0);
    38d8:	8d e3       	ldi	r24, 0x3D	; 61
    38da:	90 e0       	ldi	r25, 0x00	; 0
    38dc:	60 e0       	ldi	r22, 0x00	; 0
    38de:	0e 94 db ac 	call	0x159b6	; 0x159b6 <__eewr_byte_m128>
	 eeprom_write_byte(&DefDecimalMark,',');
    38e2:	8e e3       	ldi	r24, 0x3E	; 62
    38e4:	90 e0       	ldi	r25, 0x00	; 0
    38e6:	6c e2       	ldi	r22, 0x2C	; 44
    38e8:	0e 94 db ac 	call	0x159b6	; 0x159b6 <__eewr_byte_m128>
	 eeprom_write_byte(&DefCurrencyMark,'.');
    38ec:	8f e3       	ldi	r24, 0x3F	; 63
    38ee:	90 e0       	ldi	r25, 0x00	; 0
    38f0:	6e e2       	ldi	r22, 0x2E	; 46
    38f2:	0e 94 db ac 	call	0x159b6	; 0x159b6 <__eewr_byte_m128>

	 xArray[0]=',';	 xArray[1]='.'; 	 xArray[2]=' ';	 xArray[3]='/';  xArray[4]='-'; 
    38f6:	8c e2       	ldi	r24, 0x2C	; 44
    38f8:	89 83       	std	Y+1, r24	; 0x01
    38fa:	8e e2       	ldi	r24, 0x2E	; 46
    38fc:	8a 83       	std	Y+2, r24	; 0x02
    38fe:	80 e2       	ldi	r24, 0x20	; 32
    3900:	8b 83       	std	Y+3, r24	; 0x03
    3902:	8f e2       	ldi	r24, 0x2F	; 47
    3904:	8c 83       	std	Y+4, r24	; 0x04
    3906:	8d e2       	ldi	r24, 0x2D	; 45
    3908:	8d 83       	std	Y+5, r24	; 0x05
	 eeprom_write_block((const void*) &xArray, (void*) &DefMarkMap, 5);
    390a:	c5 01       	movw	r24, r10
    390c:	60 e4       	ldi	r22, 0x40	; 64
    390e:	70 e0       	ldi	r23, 0x00	; 0
    3910:	45 e0       	ldi	r20, 0x05	; 5
    3912:	50 e0       	ldi	r21, 0x00	; 0
    3914:	0e 94 d1 ac 	call	0x159a2	; 0x159a2 <__eewr_block_m128>

	 xArray[0]=1;	 xArray[1]=2; 	 xArray[2]=0;	 xArray[3]=0; xArray[4]=0;	 xArray[5]=0; xArray[6]=0;	 	 
    3918:	dd 24       	eor	r13, r13
    391a:	d3 94       	inc	r13
    391c:	d9 82       	std	Y+1, r13	; 0x01
    391e:	12 e0       	ldi	r17, 0x02	; 2
    3920:	1a 83       	std	Y+2, r17	; 0x02
    3922:	1b 82       	std	Y+3, r1	; 0x03
    3924:	1c 82       	std	Y+4, r1	; 0x04
    3926:	1d 82       	std	Y+5, r1	; 0x05
    3928:	1e 82       	std	Y+6, r1	; 0x06
    392a:	1f 82       	std	Y+7, r1	; 0x07
	 eeprom_write_block((const void*) &xArray, (void*) &DefPumpMap, 8);
    392c:	c5 01       	movw	r24, r10
    392e:	65 e4       	ldi	r22, 0x45	; 69
    3930:	70 e0       	ldi	r23, 0x00	; 0
    3932:	48 e0       	ldi	r20, 0x08	; 8
    3934:	50 e0       	ldi	r21, 0x00	; 0
    3936:	0e 94 d1 ac 	call	0x159a2	; 0x159a2 <__eewr_block_m128>
	 eeprom_write_block((const void*) &xArray, (void*) &DefPumpLabel, 8);
    393a:	c5 01       	movw	r24, r10
    393c:	6d e4       	ldi	r22, 0x4D	; 77
    393e:	70 e0       	ldi	r23, 0x00	; 0
    3940:	48 e0       	ldi	r20, 0x08	; 8
    3942:	50 e0       	ldi	r21, 0x00	; 0
    3944:	0e 94 d1 ac 	call	0x159a2	; 0x159a2 <__eewr_block_m128>

	 xArray[0]=1;	 xArray[1]=2; 	 xArray[2]=0;	 xArray[3]=0; xArray[4]=0;	 xArray[5]=0; 
    3948:	d9 82       	std	Y+1, r13	; 0x01
    394a:	1a 83       	std	Y+2, r17	; 0x02
    394c:	1b 82       	std	Y+3, r1	; 0x03
    394e:	1c 82       	std	Y+4, r1	; 0x04
    3950:	1d 82       	std	Y+5, r1	; 0x05
    3952:	1e 82       	std	Y+6, r1	; 0x06
	 eeprom_write_block((const void*) &xArray, (void*) &DefNozzleMap[0], 6);
    3954:	05 e5       	ldi	r16, 0x55	; 85
    3956:	10 e0       	ldi	r17, 0x00	; 0
    3958:	c5 01       	movw	r24, r10
    395a:	b8 01       	movw	r22, r16
    395c:	46 e0       	ldi	r20, 0x06	; 6
    395e:	50 e0       	ldi	r21, 0x00	; 0
    3960:	0e 94 d1 ac 	call	0x159a2	; 0x159a2 <__eewr_block_m128>
	 eeprom_write_block((const void*) &xArray, (void*) &DefNozzleMap[1], 6);
    3964:	0a 5f       	subi	r16, 0xFA	; 250
    3966:	1f 4f       	sbci	r17, 0xFF	; 255
    3968:	c5 01       	movw	r24, r10
    396a:	b8 01       	movw	r22, r16
    396c:	46 e0       	ldi	r20, 0x06	; 6
    396e:	50 e0       	ldi	r21, 0x00	; 0
    3970:	0e 94 d1 ac 	call	0x159a2	; 0x159a2 <__eewr_block_m128>

	 sprintf_P(strEEP,PSTR("6500"));
    3974:	00 d0       	rcall	.+0      	; 0x3976 <MasterReset+0x1ba>
    3976:	00 d0       	rcall	.+0      	; 0x3978 <MasterReset+0x1bc>
    3978:	ed b7       	in	r30, 0x3d	; 61
    397a:	fe b7       	in	r31, 0x3e	; 62
    397c:	f2 82       	std	Z+2, r15	; 0x02
    397e:	e1 82       	std	Z+1, r14	; 0x01
    3980:	83 e1       	ldi	r24, 0x13	; 19
    3982:	95 e0       	ldi	r25, 0x05	; 5
    3984:	94 83       	std	Z+4, r25	; 0x04
    3986:	83 83       	std	Z+3, r24	; 0x03
    3988:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductPrice[0], sizeof(DefProductPrice[0]));
    398c:	0f 90       	pop	r0
    398e:	0f 90       	pop	r0
    3990:	0f 90       	pop	r0
    3992:	0f 90       	pop	r0
    3994:	05 e8       	ldi	r16, 0x85	; 133
    3996:	10 e0       	ldi	r17, 0x00	; 0
    3998:	c7 01       	movw	r24, r14
    399a:	b8 01       	movw	r22, r16
    399c:	49 e0       	ldi	r20, 0x09	; 9
    399e:	50 e0       	ldi	r21, 0x00	; 0
    39a0:	0e 94 d1 ac 	call	0x159a2	; 0x159a2 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("7250"));
    39a4:	00 d0       	rcall	.+0      	; 0x39a6 <MasterReset+0x1ea>
    39a6:	00 d0       	rcall	.+0      	; 0x39a8 <MasterReset+0x1ec>
    39a8:	ed b7       	in	r30, 0x3d	; 61
    39aa:	fe b7       	in	r31, 0x3e	; 62
    39ac:	f2 82       	std	Z+2, r15	; 0x02
    39ae:	e1 82       	std	Z+1, r14	; 0x01
    39b0:	8e e0       	ldi	r24, 0x0E	; 14
    39b2:	95 e0       	ldi	r25, 0x05	; 5
    39b4:	94 83       	std	Z+4, r25	; 0x04
    39b6:	83 83       	std	Z+3, r24	; 0x03
    39b8:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductPrice[1], sizeof(DefProductPrice[1]));
    39bc:	0f 90       	pop	r0
    39be:	0f 90       	pop	r0
    39c0:	0f 90       	pop	r0
    39c2:	0f 90       	pop	r0
    39c4:	07 5f       	subi	r16, 0xF7	; 247
    39c6:	1f 4f       	sbci	r17, 0xFF	; 255
    39c8:	c7 01       	movw	r24, r14
    39ca:	b8 01       	movw	r22, r16
    39cc:	49 e0       	ldi	r20, 0x09	; 9
    39ce:	50 e0       	ldi	r21, 0x00	; 0
    39d0:	0e 94 d1 ac 	call	0x159a2	; 0x159a2 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("4500"));
    39d4:	00 d0       	rcall	.+0      	; 0x39d6 <MasterReset+0x21a>
    39d6:	00 d0       	rcall	.+0      	; 0x39d8 <MasterReset+0x21c>
    39d8:	ed b7       	in	r30, 0x3d	; 61
    39da:	fe b7       	in	r31, 0x3e	; 62
    39dc:	f2 82       	std	Z+2, r15	; 0x02
    39de:	e1 82       	std	Z+1, r14	; 0x01
    39e0:	89 e0       	ldi	r24, 0x09	; 9
    39e2:	95 e0       	ldi	r25, 0x05	; 5
    39e4:	94 83       	std	Z+4, r25	; 0x04
    39e6:	83 83       	std	Z+3, r24	; 0x03
    39e8:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductPrice[2], sizeof(DefProductPrice[2]));
    39ec:	0f 90       	pop	r0
    39ee:	0f 90       	pop	r0
    39f0:	0f 90       	pop	r0
    39f2:	0f 90       	pop	r0
    39f4:	07 5f       	subi	r16, 0xF7	; 247
    39f6:	1f 4f       	sbci	r17, 0xFF	; 255
    39f8:	c7 01       	movw	r24, r14
    39fa:	b8 01       	movw	r22, r16
    39fc:	49 e0       	ldi	r20, 0x09	; 9
    39fe:	50 e0       	ldi	r21, 0x00	; 0
    3a00:	0e 94 d1 ac 	call	0x159a2	; 0x159a2 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("6500"));
    3a04:	00 d0       	rcall	.+0      	; 0x3a06 <MasterReset+0x24a>
    3a06:	00 d0       	rcall	.+0      	; 0x3a08 <MasterReset+0x24c>
    3a08:	ed b7       	in	r30, 0x3d	; 61
    3a0a:	fe b7       	in	r31, 0x3e	; 62
    3a0c:	f2 82       	std	Z+2, r15	; 0x02
    3a0e:	e1 82       	std	Z+1, r14	; 0x01
    3a10:	84 e0       	ldi	r24, 0x04	; 4
    3a12:	95 e0       	ldi	r25, 0x05	; 5
    3a14:	94 83       	std	Z+4, r25	; 0x04
    3a16:	83 83       	std	Z+3, r24	; 0x03
    3a18:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductPrice[3], sizeof(DefProductPrice[3]));
    3a1c:	0f 90       	pop	r0
    3a1e:	0f 90       	pop	r0
    3a20:	0f 90       	pop	r0
    3a22:	0f 90       	pop	r0
    3a24:	07 5f       	subi	r16, 0xF7	; 247
    3a26:	1f 4f       	sbci	r17, 0xFF	; 255
    3a28:	c7 01       	movw	r24, r14
    3a2a:	b8 01       	movw	r22, r16
    3a2c:	49 e0       	ldi	r20, 0x09	; 9
    3a2e:	50 e0       	ldi	r21, 0x00	; 0
    3a30:	0e 94 d1 ac 	call	0x159a2	; 0x159a2 <__eewr_block_m128>
     sprintf_P(strEEP,PSTR("4500"));
    3a34:	00 d0       	rcall	.+0      	; 0x3a36 <MasterReset+0x27a>
    3a36:	00 d0       	rcall	.+0      	; 0x3a38 <MasterReset+0x27c>
    3a38:	ed b7       	in	r30, 0x3d	; 61
    3a3a:	fe b7       	in	r31, 0x3e	; 62
    3a3c:	f2 82       	std	Z+2, r15	; 0x02
    3a3e:	e1 82       	std	Z+1, r14	; 0x01
    3a40:	8f ef       	ldi	r24, 0xFF	; 255
    3a42:	94 e0       	ldi	r25, 0x04	; 4
    3a44:	94 83       	std	Z+4, r25	; 0x04
    3a46:	83 83       	std	Z+3, r24	; 0x03
    3a48:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductPrice[4], sizeof(DefProductPrice[4]));
    3a4c:	0f 90       	pop	r0
    3a4e:	0f 90       	pop	r0
    3a50:	0f 90       	pop	r0
    3a52:	0f 90       	pop	r0
    3a54:	07 5f       	subi	r16, 0xF7	; 247
    3a56:	1f 4f       	sbci	r17, 0xFF	; 255
    3a58:	c7 01       	movw	r24, r14
    3a5a:	b8 01       	movw	r22, r16
    3a5c:	49 e0       	ldi	r20, 0x09	; 9
    3a5e:	50 e0       	ldi	r21, 0x00	; 0
    3a60:	0e 94 d1 ac 	call	0x159a2	; 0x159a2 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("6500"));
    3a64:	00 d0       	rcall	.+0      	; 0x3a66 <MasterReset+0x2aa>
    3a66:	00 d0       	rcall	.+0      	; 0x3a68 <MasterReset+0x2ac>
    3a68:	ed b7       	in	r30, 0x3d	; 61
    3a6a:	fe b7       	in	r31, 0x3e	; 62
    3a6c:	f2 82       	std	Z+2, r15	; 0x02
    3a6e:	e1 82       	std	Z+1, r14	; 0x01
    3a70:	8a ef       	ldi	r24, 0xFA	; 250
    3a72:	94 e0       	ldi	r25, 0x04	; 4
    3a74:	94 83       	std	Z+4, r25	; 0x04
    3a76:	83 83       	std	Z+3, r24	; 0x03
    3a78:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductPrice[5], sizeof(DefProductPrice[5]));
    3a7c:	0f 90       	pop	r0
    3a7e:	0f 90       	pop	r0
    3a80:	0f 90       	pop	r0
    3a82:	0f 90       	pop	r0
    3a84:	07 5f       	subi	r16, 0xF7	; 247
    3a86:	1f 4f       	sbci	r17, 0xFF	; 255
    3a88:	c7 01       	movw	r24, r14
    3a8a:	b8 01       	movw	r22, r16
    3a8c:	49 e0       	ldi	r20, 0x09	; 9
    3a8e:	50 e0       	ldi	r21, 0x00	; 0
    3a90:	0e 94 d1 ac 	call	0x159a2	; 0x159a2 <__eewr_block_m128>

	 sprintf_P(strEEP,PSTR("Pert+   "));
    3a94:	00 d0       	rcall	.+0      	; 0x3a96 <MasterReset+0x2da>
    3a96:	00 d0       	rcall	.+0      	; 0x3a98 <MasterReset+0x2dc>
    3a98:	ed b7       	in	r30, 0x3d	; 61
    3a9a:	fe b7       	in	r31, 0x3e	; 62
    3a9c:	f2 82       	std	Z+2, r15	; 0x02
    3a9e:	e1 82       	std	Z+1, r14	; 0x01
    3aa0:	81 ef       	ldi	r24, 0xF1	; 241
    3aa2:	94 e0       	ldi	r25, 0x04	; 4
    3aa4:	94 83       	std	Z+4, r25	; 0x04
    3aa6:	83 83       	std	Z+3, r24	; 0x03
    3aa8:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductName[0], sizeof(DefProductName[0]));
    3aac:	0f 90       	pop	r0
    3aae:	0f 90       	pop	r0
    3ab0:	0f 90       	pop	r0
    3ab2:	0f 90       	pop	r0
    3ab4:	0b eb       	ldi	r16, 0xBB	; 187
    3ab6:	10 e0       	ldi	r17, 0x00	; 0
    3ab8:	c7 01       	movw	r24, r14
    3aba:	b8 01       	movw	r22, r16
    3abc:	4d e0       	ldi	r20, 0x0D	; 13
    3abe:	50 e0       	ldi	r21, 0x00	; 0
    3ac0:	0e 94 d1 ac 	call	0x159a2	; 0x159a2 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("Pertamax"));
    3ac4:	00 d0       	rcall	.+0      	; 0x3ac6 <MasterReset+0x30a>
    3ac6:	00 d0       	rcall	.+0      	; 0x3ac8 <MasterReset+0x30c>
    3ac8:	ed b7       	in	r30, 0x3d	; 61
    3aca:	fe b7       	in	r31, 0x3e	; 62
    3acc:	f2 82       	std	Z+2, r15	; 0x02
    3ace:	e1 82       	std	Z+1, r14	; 0x01
    3ad0:	88 ee       	ldi	r24, 0xE8	; 232
    3ad2:	94 e0       	ldi	r25, 0x04	; 4
    3ad4:	94 83       	std	Z+4, r25	; 0x04
    3ad6:	83 83       	std	Z+3, r24	; 0x03
    3ad8:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductName[1], sizeof(DefProductName[1]));
    3adc:	0f 90       	pop	r0
    3ade:	0f 90       	pop	r0
    3ae0:	0f 90       	pop	r0
    3ae2:	0f 90       	pop	r0
    3ae4:	03 5f       	subi	r16, 0xF3	; 243
    3ae6:	1f 4f       	sbci	r17, 0xFF	; 255
    3ae8:	c7 01       	movw	r24, r14
    3aea:	b8 01       	movw	r22, r16
    3aec:	4d e0       	ldi	r20, 0x0D	; 13
    3aee:	50 e0       	ldi	r21, 0x00	; 0
    3af0:	0e 94 d1 ac 	call	0x159a2	; 0x159a2 <__eewr_block_m128>
     sprintf_P(strEEP,PSTR("Premium "));
    3af4:	00 d0       	rcall	.+0      	; 0x3af6 <MasterReset+0x33a>
    3af6:	00 d0       	rcall	.+0      	; 0x3af8 <MasterReset+0x33c>
    3af8:	ed b7       	in	r30, 0x3d	; 61
    3afa:	fe b7       	in	r31, 0x3e	; 62
    3afc:	f2 82       	std	Z+2, r15	; 0x02
    3afe:	e1 82       	std	Z+1, r14	; 0x01
    3b00:	8f ed       	ldi	r24, 0xDF	; 223
    3b02:	94 e0       	ldi	r25, 0x04	; 4
    3b04:	94 83       	std	Z+4, r25	; 0x04
    3b06:	83 83       	std	Z+3, r24	; 0x03
    3b08:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductName[2], sizeof(DefProductName[2]));
    3b0c:	0f 90       	pop	r0
    3b0e:	0f 90       	pop	r0
    3b10:	0f 90       	pop	r0
    3b12:	0f 90       	pop	r0
    3b14:	03 5f       	subi	r16, 0xF3	; 243
    3b16:	1f 4f       	sbci	r17, 0xFF	; 255
    3b18:	c7 01       	movw	r24, r14
    3b1a:	b8 01       	movw	r22, r16
    3b1c:	4d e0       	ldi	r20, 0x0D	; 13
    3b1e:	50 e0       	ldi	r21, 0x00	; 0
    3b20:	0e 94 d1 ac 	call	0x159a2	; 0x159a2 <__eewr_block_m128>
     sprintf_P(strEEP,PSTR("Solar   "));
    3b24:	00 d0       	rcall	.+0      	; 0x3b26 <MasterReset+0x36a>
    3b26:	00 d0       	rcall	.+0      	; 0x3b28 <MasterReset+0x36c>
    3b28:	ed b7       	in	r30, 0x3d	; 61
    3b2a:	fe b7       	in	r31, 0x3e	; 62
    3b2c:	f2 82       	std	Z+2, r15	; 0x02
    3b2e:	e1 82       	std	Z+1, r14	; 0x01
    3b30:	86 ed       	ldi	r24, 0xD6	; 214
    3b32:	94 e0       	ldi	r25, 0x04	; 4
    3b34:	94 83       	std	Z+4, r25	; 0x04
    3b36:	83 83       	std	Z+3, r24	; 0x03
    3b38:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductName[3], sizeof(DefProductName[3]));
    3b3c:	0f 90       	pop	r0
    3b3e:	0f 90       	pop	r0
    3b40:	0f 90       	pop	r0
    3b42:	0f 90       	pop	r0
    3b44:	03 5f       	subi	r16, 0xF3	; 243
    3b46:	1f 4f       	sbci	r17, 0xFF	; 255
    3b48:	c7 01       	movw	r24, r14
    3b4a:	b8 01       	movw	r22, r16
    3b4c:	4d e0       	ldi	r20, 0x0D	; 13
    3b4e:	50 e0       	ldi	r21, 0x00	; 0
    3b50:	0e 94 d1 ac 	call	0x159a2	; 0x159a2 <__eewr_block_m128>
     sprintf_P(strEEP,PSTR("BioSolr "));
    3b54:	00 d0       	rcall	.+0      	; 0x3b56 <MasterReset+0x39a>
    3b56:	00 d0       	rcall	.+0      	; 0x3b58 <MasterReset+0x39c>
    3b58:	ed b7       	in	r30, 0x3d	; 61
    3b5a:	fe b7       	in	r31, 0x3e	; 62
    3b5c:	f2 82       	std	Z+2, r15	; 0x02
    3b5e:	e1 82       	std	Z+1, r14	; 0x01
    3b60:	8d ec       	ldi	r24, 0xCD	; 205
    3b62:	94 e0       	ldi	r25, 0x04	; 4
    3b64:	94 83       	std	Z+4, r25	; 0x04
    3b66:	83 83       	std	Z+3, r24	; 0x03
    3b68:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductName[4], sizeof(DefProductName[4]));
    3b6c:	0f 90       	pop	r0
    3b6e:	0f 90       	pop	r0
    3b70:	0f 90       	pop	r0
    3b72:	0f 90       	pop	r0
    3b74:	03 5f       	subi	r16, 0xF3	; 243
    3b76:	1f 4f       	sbci	r17, 0xFF	; 255
    3b78:	c7 01       	movw	r24, r14
    3b7a:	b8 01       	movw	r22, r16
    3b7c:	4d e0       	ldi	r20, 0x0D	; 13
    3b7e:	50 e0       	ldi	r21, 0x00	; 0
    3b80:	0e 94 d1 ac 	call	0x159a2	; 0x159a2 <__eewr_block_m128>
     sprintf_P(strEEP,PSTR("Diesel  "));
    3b84:	00 d0       	rcall	.+0      	; 0x3b86 <MasterReset+0x3ca>
    3b86:	00 d0       	rcall	.+0      	; 0x3b88 <MasterReset+0x3cc>
    3b88:	ed b7       	in	r30, 0x3d	; 61
    3b8a:	fe b7       	in	r31, 0x3e	; 62
    3b8c:	f2 82       	std	Z+2, r15	; 0x02
    3b8e:	e1 82       	std	Z+1, r14	; 0x01
    3b90:	84 ec       	ldi	r24, 0xC4	; 196
    3b92:	94 e0       	ldi	r25, 0x04	; 4
    3b94:	94 83       	std	Z+4, r25	; 0x04
    3b96:	83 83       	std	Z+3, r24	; 0x03
    3b98:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductName[5], sizeof(DefProductName[5]));
    3b9c:	0f 90       	pop	r0
    3b9e:	0f 90       	pop	r0
    3ba0:	0f 90       	pop	r0
    3ba2:	0f 90       	pop	r0
    3ba4:	c7 01       	movw	r24, r14
    3ba6:	6c ef       	ldi	r22, 0xFC	; 252
    3ba8:	70 e0       	ldi	r23, 0x00	; 0
    3baa:	4d e0       	ldi	r20, 0x0D	; 13
    3bac:	50 e0       	ldi	r21, 0x00	; 0
    3bae:	0e 94 d1 ac 	call	0x159a2	; 0x159a2 <__eewr_block_m128>

	 sprintf_P(strEEP,PSTR("BCA"));
    3bb2:	00 d0       	rcall	.+0      	; 0x3bb4 <MasterReset+0x3f8>
    3bb4:	00 d0       	rcall	.+0      	; 0x3bb6 <MasterReset+0x3fa>
    3bb6:	ed b7       	in	r30, 0x3d	; 61
    3bb8:	fe b7       	in	r31, 0x3e	; 62
    3bba:	f2 82       	std	Z+2, r15	; 0x02
    3bbc:	e1 82       	std	Z+1, r14	; 0x01
    3bbe:	80 ec       	ldi	r24, 0xC0	; 192
    3bc0:	94 e0       	ldi	r25, 0x04	; 4
    3bc2:	94 83       	std	Z+4, r25	; 0x04
    3bc4:	83 83       	std	Z+3, r24	; 0x03
    3bc6:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefBankName[0], sizeof(DefBankName[0]));
    3bca:	0f 90       	pop	r0
    3bcc:	0f 90       	pop	r0
    3bce:	0f 90       	pop	r0
    3bd0:	0f 90       	pop	r0
    3bd2:	09 e0       	ldi	r16, 0x09	; 9
    3bd4:	11 e0       	ldi	r17, 0x01	; 1
    3bd6:	c7 01       	movw	r24, r14
    3bd8:	b8 01       	movw	r22, r16
    3bda:	4b e0       	ldi	r20, 0x0B	; 11
    3bdc:	50 e0       	ldi	r21, 0x00	; 0
    3bde:	0e 94 d1 ac 	call	0x159a2	; 0x159a2 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("Mandiri"));
    3be2:	00 d0       	rcall	.+0      	; 0x3be4 <MasterReset+0x428>
    3be4:	00 d0       	rcall	.+0      	; 0x3be6 <MasterReset+0x42a>
    3be6:	ed b7       	in	r30, 0x3d	; 61
    3be8:	fe b7       	in	r31, 0x3e	; 62
    3bea:	f2 82       	std	Z+2, r15	; 0x02
    3bec:	e1 82       	std	Z+1, r14	; 0x01
    3bee:	88 eb       	ldi	r24, 0xB8	; 184
    3bf0:	94 e0       	ldi	r25, 0x04	; 4
    3bf2:	94 83       	std	Z+4, r25	; 0x04
    3bf4:	83 83       	std	Z+3, r24	; 0x03
    3bf6:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefBankName[1], sizeof(DefBankName[1]));
    3bfa:	0f 90       	pop	r0
    3bfc:	0f 90       	pop	r0
    3bfe:	0f 90       	pop	r0
    3c00:	0f 90       	pop	r0
    3c02:	05 5f       	subi	r16, 0xF5	; 245
    3c04:	1f 4f       	sbci	r17, 0xFF	; 255
    3c06:	c7 01       	movw	r24, r14
    3c08:	b8 01       	movw	r22, r16
    3c0a:	4b e0       	ldi	r20, 0x0B	; 11
    3c0c:	50 e0       	ldi	r21, 0x00	; 0
    3c0e:	0e 94 d1 ac 	call	0x159a2	; 0x159a2 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("BNI"));
    3c12:	00 d0       	rcall	.+0      	; 0x3c14 <MasterReset+0x458>
    3c14:	00 d0       	rcall	.+0      	; 0x3c16 <MasterReset+0x45a>
    3c16:	ed b7       	in	r30, 0x3d	; 61
    3c18:	fe b7       	in	r31, 0x3e	; 62
    3c1a:	f2 82       	std	Z+2, r15	; 0x02
    3c1c:	e1 82       	std	Z+1, r14	; 0x01
    3c1e:	84 eb       	ldi	r24, 0xB4	; 180
    3c20:	94 e0       	ldi	r25, 0x04	; 4
    3c22:	94 83       	std	Z+4, r25	; 0x04
    3c24:	83 83       	std	Z+3, r24	; 0x03
    3c26:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefBankName[2], sizeof(DefBankName[2]));
    3c2a:	0f 90       	pop	r0
    3c2c:	0f 90       	pop	r0
    3c2e:	0f 90       	pop	r0
    3c30:	0f 90       	pop	r0
    3c32:	05 5f       	subi	r16, 0xF5	; 245
    3c34:	1f 4f       	sbci	r17, 0xFF	; 255
    3c36:	c7 01       	movw	r24, r14
    3c38:	b8 01       	movw	r22, r16
    3c3a:	4b e0       	ldi	r20, 0x0B	; 11
    3c3c:	50 e0       	ldi	r21, 0x00	; 0
    3c3e:	0e 94 d1 ac 	call	0x159a2	; 0x159a2 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("BRI"));
    3c42:	00 d0       	rcall	.+0      	; 0x3c44 <MasterReset+0x488>
    3c44:	00 d0       	rcall	.+0      	; 0x3c46 <MasterReset+0x48a>
    3c46:	ed b7       	in	r30, 0x3d	; 61
    3c48:	fe b7       	in	r31, 0x3e	; 62
    3c4a:	f2 82       	std	Z+2, r15	; 0x02
    3c4c:	e1 82       	std	Z+1, r14	; 0x01
    3c4e:	80 eb       	ldi	r24, 0xB0	; 176
    3c50:	94 e0       	ldi	r25, 0x04	; 4
    3c52:	94 83       	std	Z+4, r25	; 0x04
    3c54:	83 83       	std	Z+3, r24	; 0x03
    3c56:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefBankName[3], sizeof(DefBankName[3]));
    3c5a:	0f 90       	pop	r0
    3c5c:	0f 90       	pop	r0
    3c5e:	0f 90       	pop	r0
    3c60:	0f 90       	pop	r0
    3c62:	05 5f       	subi	r16, 0xF5	; 245
    3c64:	1f 4f       	sbci	r17, 0xFF	; 255
    3c66:	c7 01       	movw	r24, r14
    3c68:	b8 01       	movw	r22, r16
    3c6a:	4b e0       	ldi	r20, 0x0B	; 11
    3c6c:	50 e0       	ldi	r21, 0x00	; 0
    3c6e:	0e 94 d1 ac 	call	0x159a2	; 0x159a2 <__eewr_block_m128>

	 eeprom_write_byte(&DefPrintInitialize,False);
    3c72:	85 e3       	ldi	r24, 0x35	; 53
    3c74:	91 e0       	ldi	r25, 0x01	; 1
    3c76:	60 e0       	ldi	r22, 0x00	; 0
    3c78:	0e 94 db ac 	call	0x159b6	; 0x159b6 <__eewr_byte_m128>
	 eeprom_write_byte(&DefInitIFT,IT_SLAVE);
    3c7c:	86 e3       	ldi	r24, 0x36	; 54
    3c7e:	91 e0       	ldi	r25, 0x01	; 1
    3c80:	61 e0       	ldi	r22, 0x01	; 1
    3c82:	0e 94 db ac 	call	0x159b6	; 0x159b6 <__eewr_byte_m128>
	 eeprom_write_byte(&DefDispenserBrand,ST_GILBARCO);//ST_WAYNE_DART;
    3c86:	87 e3       	ldi	r24, 0x37	; 55
    3c88:	91 e0       	ldi	r25, 0x01	; 1
    3c8a:	61 e0       	ldi	r22, 0x01	; 1
    3c8c:	0e 94 db ac 	call	0x159b6	; 0x159b6 <__eewr_byte_m128>

	 sprintf_P(strEEP,PSTR("000000"));
    3c90:	00 d0       	rcall	.+0      	; 0x3c92 <MasterReset+0x4d6>
    3c92:	00 d0       	rcall	.+0      	; 0x3c94 <MasterReset+0x4d8>
    3c94:	ed b7       	in	r30, 0x3d	; 61
    3c96:	fe b7       	in	r31, 0x3e	; 62
    3c98:	f2 82       	std	Z+2, r15	; 0x02
    3c9a:	e1 82       	std	Z+1, r14	; 0x01
    3c9c:	89 ea       	ldi	r24, 0xA9	; 169
    3c9e:	94 e0       	ldi	r25, 0x04	; 4
    3ca0:	94 83       	std	Z+4, r25	; 0x04
    3ca2:	83 83       	std	Z+3, r24	; 0x03
    3ca4:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefTransactionNumber, sizeof(DefTransactionNumber));
    3ca8:	0f 90       	pop	r0
    3caa:	0f 90       	pop	r0
    3cac:	0f 90       	pop	r0
    3cae:	0f 90       	pop	r0
    3cb0:	c7 01       	movw	r24, r14
    3cb2:	68 e3       	ldi	r22, 0x38	; 56
    3cb4:	71 e0       	ldi	r23, 0x01	; 1
    3cb6:	47 e0       	ldi	r20, 0x07	; 7
    3cb8:	50 e0       	ldi	r21, 0x00	; 0
    3cba:	0e 94 d1 ac 	call	0x159a2	; 0x159a2 <__eewr_block_m128>

     eeprom_write_byte(&DefShift,1);
    3cbe:	8f e3       	ldi	r24, 0x3F	; 63
    3cc0:	91 e0       	ldi	r25, 0x01	; 1
    3cc2:	61 e0       	ldi	r22, 0x01	; 1
    3cc4:	0e 94 db ac 	call	0x159b6	; 0x159b6 <__eewr_byte_m128>

	 xArray[0]=br9600;	 xArray[1]=br9600; 	 xArray[2]=br5787;	 xArray[3]=br9600;
    3cc8:	d9 82       	std	Y+1, r13	; 0x01
    3cca:	da 82       	std	Y+2, r13	; 0x02
    3ccc:	83 e0       	ldi	r24, 0x03	; 3
    3cce:	8b 83       	std	Y+3, r24	; 0x03
    3cd0:	dc 82       	std	Y+4, r13	; 0x04
	 eeprom_write_block((const void*) &xArray, (void*) &DefBaudrate, 4);
    3cd2:	c5 01       	movw	r24, r10
    3cd4:	60 e4       	ldi	r22, 0x40	; 64
    3cd6:	71 e0       	ldi	r23, 0x01	; 1
    3cd8:	44 e0       	ldi	r20, 0x04	; 4
    3cda:	50 e0       	ldi	r21, 0x00	; 0
    3cdc:	0e 94 d1 ac 	call	0x159a2	; 0x159a2 <__eewr_block_m128>

     eeprom_write_byte(&DefPoolingPumpMax,MAX_PUMP);
    3ce0:	84 e4       	ldi	r24, 0x44	; 68
    3ce2:	91 e0       	ldi	r25, 0x01	; 1
    3ce4:	64 e0       	ldi	r22, 0x04	; 4
    3ce6:	0e 94 db ac 	call	0x159b6	; 0x159b6 <__eewr_byte_m128>
     eeprom_write_byte(&DefPoolingNoPumpCount,NO_PUMP_COUNT_MAX);
    3cea:	85 e4       	ldi	r24, 0x45	; 69
    3cec:	91 e0       	ldi	r25, 0x01	; 1
    3cee:	65 e0       	ldi	r22, 0x05	; 5
    3cf0:	0e 94 db ac 	call	0x159b6	; 0x159b6 <__eewr_byte_m128>
     eeprom_write_byte(&DefPoolingTryResend,TRY_RESEND);
    3cf4:	86 e4       	ldi	r24, 0x46	; 70
    3cf6:	91 e0       	ldi	r25, 0x01	; 1
    3cf8:	62 e0       	ldi	r22, 0x02	; 2
    3cfa:	0e 94 db ac 	call	0x159b6	; 0x159b6 <__eewr_byte_m128>
     eeprom_write_byte(&DefPoolingSendTimeout,SEND_TIMEOUT);
    3cfe:	87 e4       	ldi	r24, 0x47	; 71
    3d00:	91 e0       	ldi	r25, 0x01	; 1
    3d02:	65 e0       	ldi	r22, 0x05	; 5
    3d04:	0e 94 db ac 	call	0x159b6	; 0x159b6 <__eewr_byte_m128>
     eeprom_write_byte(&DefPoolingDelayNextPump,DELAY_NEXT_PUMP);
    3d08:	88 e4       	ldi	r24, 0x48	; 72
    3d0a:	91 e0       	ldi	r25, 0x01	; 1
    3d0c:	65 e0       	ldi	r22, 0x05	; 5
    3d0e:	0e 94 db ac 	call	0x159b6	; 0x159b6 <__eewr_byte_m128>
     eeprom_write_byte(&DefActivePump,ACTIVE_PUMP);
    3d12:	89 e4       	ldi	r24, 0x49	; 73
    3d14:	91 e0       	ldi	r25, 0x01	; 1
    3d16:	64 e0       	ldi	r22, 0x04	; 4
    3d18:	0e 94 db ac 	call	0x159b6	; 0x159b6 <__eewr_byte_m128>
     eeprom_write_byte(&DefSequenceTimeout,SEQUENCE_TIMEOUT);
    3d1c:	8a e4       	ldi	r24, 0x4A	; 74
    3d1e:	91 e0       	ldi	r25, 0x01	; 1
    3d20:	6a e0       	ldi	r22, 0x0A	; 10
    3d22:	0e 94 db ac 	call	0x159b6	; 0x159b6 <__eewr_byte_m128>

     eeprom_write_byte(&DefPrintMoney,True);
    3d26:	81 ec       	ldi	r24, 0xC1	; 193
    3d28:	93 e0       	ldi	r25, 0x03	; 3
    3d2a:	61 e0       	ldi	r22, 0x01	; 1
    3d2c:	0e 94 db ac 	call	0x159b6	; 0x159b6 <__eewr_byte_m128>
	 eeprom_write_byte(&DefHGMode,HM_232);//HM_TTL,HM_232,HM_485
    3d30:	82 ec       	ldi	r24, 0xC2	; 194
    3d32:	93 e0       	ldi	r25, 0x03	; 3
    3d34:	61 e0       	ldi	r22, 0x01	; 1
    3d36:	0e 94 db ac 	call	0x159b6	; 0x159b6 <__eewr_byte_m128>

	 sprintf_P(strEEP,PSTR("    PT. HANINDO AUTOMATION SOLUTIONS    "));
    3d3a:	00 d0       	rcall	.+0      	; 0x3d3c <MasterReset+0x580>
    3d3c:	00 d0       	rcall	.+0      	; 0x3d3e <MasterReset+0x582>
    3d3e:	ed b7       	in	r30, 0x3d	; 61
    3d40:	fe b7       	in	r31, 0x3e	; 62
    3d42:	f2 82       	std	Z+2, r15	; 0x02
    3d44:	e1 82       	std	Z+1, r14	; 0x01
    3d46:	80 e8       	ldi	r24, 0x80	; 128
    3d48:	94 e0       	ldi	r25, 0x04	; 4
    3d4a:	94 83       	std	Z+4, r25	; 0x04
    3d4c:	83 83       	std	Z+3, r24	; 0x03
    3d4e:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefHeaderFooter[0],41);
    3d52:	0f 90       	pop	r0
    3d54:	0f 90       	pop	r0
    3d56:	0f 90       	pop	r0
    3d58:	0f 90       	pop	r0
    3d5a:	07 e2       	ldi	r16, 0x27	; 39
    3d5c:	12 e0       	ldi	r17, 0x02	; 2
    3d5e:	c7 01       	movw	r24, r14
    3d60:	b8 01       	movw	r22, r16
    3d62:	49 e2       	ldi	r20, 0x29	; 41
    3d64:	50 e0       	ldi	r21, 0x00	; 0
    3d66:	0e 94 d1 ac 	call	0x159a2	; 0x159a2 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("        JL. RS Fatmawati No.55          "));
    3d6a:	00 d0       	rcall	.+0      	; 0x3d6c <MasterReset+0x5b0>
    3d6c:	00 d0       	rcall	.+0      	; 0x3d6e <MasterReset+0x5b2>
    3d6e:	ed b7       	in	r30, 0x3d	; 61
    3d70:	fe b7       	in	r31, 0x3e	; 62
    3d72:	f2 82       	std	Z+2, r15	; 0x02
    3d74:	e1 82       	std	Z+1, r14	; 0x01
    3d76:	87 e5       	ldi	r24, 0x57	; 87
    3d78:	94 e0       	ldi	r25, 0x04	; 4
    3d7a:	94 83       	std	Z+4, r25	; 0x04
    3d7c:	83 83       	std	Z+3, r24	; 0x03
    3d7e:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefHeaderFooter[1],41);
    3d82:	0f 90       	pop	r0
    3d84:	0f 90       	pop	r0
    3d86:	0f 90       	pop	r0
    3d88:	0f 90       	pop	r0
    3d8a:	07 5d       	subi	r16, 0xD7	; 215
    3d8c:	1f 4f       	sbci	r17, 0xFF	; 255
    3d8e:	c7 01       	movw	r24, r14
    3d90:	b8 01       	movw	r22, r16
    3d92:	49 e2       	ldi	r20, 0x29	; 41
    3d94:	50 e0       	ldi	r21, 0x00	; 0
    3d96:	0e 94 d1 ac 	call	0x159a2	; 0x159a2 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("            Jakarta Selatan             "));
    3d9a:	00 d0       	rcall	.+0      	; 0x3d9c <MasterReset+0x5e0>
    3d9c:	00 d0       	rcall	.+0      	; 0x3d9e <MasterReset+0x5e2>
    3d9e:	ed b7       	in	r30, 0x3d	; 61
    3da0:	fe b7       	in	r31, 0x3e	; 62
    3da2:	f2 82       	std	Z+2, r15	; 0x02
    3da4:	e1 82       	std	Z+1, r14	; 0x01
    3da6:	8e e2       	ldi	r24, 0x2E	; 46
    3da8:	94 e0       	ldi	r25, 0x04	; 4
    3daa:	94 83       	std	Z+4, r25	; 0x04
    3dac:	83 83       	std	Z+3, r24	; 0x03
    3dae:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefHeaderFooter[2],41);
    3db2:	0f 90       	pop	r0
    3db4:	0f 90       	pop	r0
    3db6:	0f 90       	pop	r0
    3db8:	0f 90       	pop	r0
    3dba:	c7 01       	movw	r24, r14
    3dbc:	69 e7       	ldi	r22, 0x79	; 121
    3dbe:	72 e0       	ldi	r23, 0x02	; 2
    3dc0:	49 e2       	ldi	r20, 0x29	; 41
    3dc2:	50 e0       	ldi	r21, 0x00	; 0
    3dc4:	0e 94 d1 ac 	call	0x159a2	; 0x159a2 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("                                        "));
    3dc8:	00 d0       	rcall	.+0      	; 0x3dca <MasterReset+0x60e>
    3dca:	00 d0       	rcall	.+0      	; 0x3dcc <MasterReset+0x610>
    3dcc:	ed b7       	in	r30, 0x3d	; 61
    3dce:	fe b7       	in	r31, 0x3e	; 62
    3dd0:	f2 82       	std	Z+2, r15	; 0x02
    3dd2:	e1 82       	std	Z+1, r14	; 0x01
    3dd4:	85 e0       	ldi	r24, 0x05	; 5
    3dd6:	94 e0       	ldi	r25, 0x04	; 4
    3dd8:	94 83       	std	Z+4, r25	; 0x04
    3dda:	83 83       	std	Z+3, r24	; 0x03
    3ddc:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefHeaderFooter[3],41);
    3de0:	0f 90       	pop	r0
    3de2:	0f 90       	pop	r0
    3de4:	0f 90       	pop	r0
    3de6:	0f 90       	pop	r0
    3de8:	c7 01       	movw	r24, r14
    3dea:	62 ea       	ldi	r22, 0xA2	; 162
    3dec:	72 e0       	ldi	r23, 0x02	; 2
    3dee:	49 e2       	ldi	r20, 0x29	; 41
    3df0:	50 e0       	ldi	r21, 0x00	; 0
    3df2:	0e 94 d1 ac 	call	0x159a2	; 0x159a2 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("                                        "));
    3df6:	00 d0       	rcall	.+0      	; 0x3df8 <MasterReset+0x63c>
    3df8:	00 d0       	rcall	.+0      	; 0x3dfa <MasterReset+0x63e>
    3dfa:	ed b7       	in	r30, 0x3d	; 61
    3dfc:	fe b7       	in	r31, 0x3e	; 62
    3dfe:	f2 82       	std	Z+2, r15	; 0x02
    3e00:	e1 82       	std	Z+1, r14	; 0x01
    3e02:	8c ed       	ldi	r24, 0xDC	; 220
    3e04:	93 e0       	ldi	r25, 0x03	; 3
    3e06:	94 83       	std	Z+4, r25	; 0x04
    3e08:	83 83       	std	Z+3, r24	; 0x03
    3e0a:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefHeaderFooter[4],41);
    3e0e:	0f 90       	pop	r0
    3e10:	0f 90       	pop	r0
    3e12:	0f 90       	pop	r0
    3e14:	0f 90       	pop	r0
    3e16:	c7 01       	movw	r24, r14
    3e18:	6b ec       	ldi	r22, 0xCB	; 203
    3e1a:	72 e0       	ldi	r23, 0x02	; 2
    3e1c:	49 e2       	ldi	r20, 0x29	; 41
    3e1e:	50 e0       	ldi	r21, 0x00	; 0
    3e20:	0e 94 d1 ac 	call	0x159a2	; 0x159a2 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("                                        "));
    3e24:	00 d0       	rcall	.+0      	; 0x3e26 <MasterReset+0x66a>
    3e26:	00 d0       	rcall	.+0      	; 0x3e28 <MasterReset+0x66c>
    3e28:	ed b7       	in	r30, 0x3d	; 61
    3e2a:	fe b7       	in	r31, 0x3e	; 62
    3e2c:	f2 82       	std	Z+2, r15	; 0x02
    3e2e:	e1 82       	std	Z+1, r14	; 0x01
    3e30:	83 eb       	ldi	r24, 0xB3	; 179
    3e32:	93 e0       	ldi	r25, 0x03	; 3
    3e34:	94 83       	std	Z+4, r25	; 0x04
    3e36:	83 83       	std	Z+3, r24	; 0x03
    3e38:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefHeaderFooter[5],41);
    3e3c:	0f 90       	pop	r0
    3e3e:	0f 90       	pop	r0
    3e40:	0f 90       	pop	r0
    3e42:	0f 90       	pop	r0
    3e44:	c7 01       	movw	r24, r14
    3e46:	64 ef       	ldi	r22, 0xF4	; 244
    3e48:	72 e0       	ldi	r23, 0x02	; 2
    3e4a:	49 e2       	ldi	r20, 0x29	; 41
    3e4c:	50 e0       	ldi	r21, 0x00	; 0
    3e4e:	0e 94 d1 ac 	call	0x159a2	; 0x159a2 <__eewr_block_m128>

	 sprintf_P(strEEP,PSTR("             Terima Kasih               "));
    3e52:	00 d0       	rcall	.+0      	; 0x3e54 <MasterReset+0x698>
    3e54:	00 d0       	rcall	.+0      	; 0x3e56 <MasterReset+0x69a>
    3e56:	ed b7       	in	r30, 0x3d	; 61
    3e58:	fe b7       	in	r31, 0x3e	; 62
    3e5a:	f2 82       	std	Z+2, r15	; 0x02
    3e5c:	e1 82       	std	Z+1, r14	; 0x01
    3e5e:	8a e8       	ldi	r24, 0x8A	; 138
    3e60:	93 e0       	ldi	r25, 0x03	; 3
    3e62:	94 83       	std	Z+4, r25	; 0x04
    3e64:	83 83       	std	Z+3, r24	; 0x03
    3e66:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefHeaderFooter[6],41);
    3e6a:	0f 90       	pop	r0
    3e6c:	0f 90       	pop	r0
    3e6e:	0f 90       	pop	r0
    3e70:	0f 90       	pop	r0
    3e72:	c7 01       	movw	r24, r14
    3e74:	6d e1       	ldi	r22, 0x1D	; 29
    3e76:	73 e0       	ldi	r23, 0x03	; 3
    3e78:	49 e2       	ldi	r20, 0x29	; 41
    3e7a:	50 e0       	ldi	r21, 0x00	; 0
    3e7c:	0e 94 d1 ac 	call	0x159a2	; 0x159a2 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("            Selamat  Jalan              "));
    3e80:	00 d0       	rcall	.+0      	; 0x3e82 <MasterReset+0x6c6>
    3e82:	00 d0       	rcall	.+0      	; 0x3e84 <MasterReset+0x6c8>
    3e84:	ed b7       	in	r30, 0x3d	; 61
    3e86:	fe b7       	in	r31, 0x3e	; 62
    3e88:	f2 82       	std	Z+2, r15	; 0x02
    3e8a:	e1 82       	std	Z+1, r14	; 0x01
    3e8c:	81 e6       	ldi	r24, 0x61	; 97
    3e8e:	93 e0       	ldi	r25, 0x03	; 3
    3e90:	94 83       	std	Z+4, r25	; 0x04
    3e92:	83 83       	std	Z+3, r24	; 0x03
    3e94:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefHeaderFooter[7],41);
    3e98:	0f 90       	pop	r0
    3e9a:	0f 90       	pop	r0
    3e9c:	0f 90       	pop	r0
    3e9e:	0f 90       	pop	r0
    3ea0:	c7 01       	movw	r24, r14
    3ea2:	66 e4       	ldi	r22, 0x46	; 70
    3ea4:	73 e0       	ldi	r23, 0x03	; 3
    3ea6:	49 e2       	ldi	r20, 0x29	; 41
    3ea8:	50 e0       	ldi	r21, 0x00	; 0
    3eaa:	0e 94 d1 ac 	call	0x159a2	; 0x159a2 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("      Semoga Selamat Sampai Tujuan      "));
    3eae:	00 d0       	rcall	.+0      	; 0x3eb0 <MasterReset+0x6f4>
    3eb0:	00 d0       	rcall	.+0      	; 0x3eb2 <MasterReset+0x6f6>
    3eb2:	ed b7       	in	r30, 0x3d	; 61
    3eb4:	fe b7       	in	r31, 0x3e	; 62
    3eb6:	f2 82       	std	Z+2, r15	; 0x02
    3eb8:	e1 82       	std	Z+1, r14	; 0x01
    3eba:	88 e3       	ldi	r24, 0x38	; 56
    3ebc:	93 e0       	ldi	r25, 0x03	; 3
    3ebe:	94 83       	std	Z+4, r25	; 0x04
    3ec0:	83 83       	std	Z+3, r24	; 0x03
    3ec2:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefHeaderFooter[8],41);
    3ec6:	0f 90       	pop	r0
    3ec8:	0f 90       	pop	r0
    3eca:	0f 90       	pop	r0
    3ecc:	0f 90       	pop	r0
    3ece:	c7 01       	movw	r24, r14
    3ed0:	6f e6       	ldi	r22, 0x6F	; 111
    3ed2:	73 e0       	ldi	r23, 0x03	; 3
    3ed4:	49 e2       	ldi	r20, 0x29	; 41
    3ed6:	50 e0       	ldi	r21, 0x00	; 0
    3ed8:	0e 94 d1 ac 	call	0x159a2	; 0x159a2 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("                                        "));
    3edc:	00 d0       	rcall	.+0      	; 0x3ede <MasterReset+0x722>
    3ede:	00 d0       	rcall	.+0      	; 0x3ee0 <MasterReset+0x724>
    3ee0:	ed b7       	in	r30, 0x3d	; 61
    3ee2:	fe b7       	in	r31, 0x3e	; 62
    3ee4:	f2 82       	std	Z+2, r15	; 0x02
    3ee6:	e1 82       	std	Z+1, r14	; 0x01
    3ee8:	8f e0       	ldi	r24, 0x0F	; 15
    3eea:	93 e0       	ldi	r25, 0x03	; 3
    3eec:	94 83       	std	Z+4, r25	; 0x04
    3eee:	83 83       	std	Z+3, r24	; 0x03
    3ef0:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefHeaderFooter[9],41);
    3ef4:	0f 90       	pop	r0
    3ef6:	0f 90       	pop	r0
    3ef8:	0f 90       	pop	r0
    3efa:	0f 90       	pop	r0
    3efc:	c7 01       	movw	r24, r14
    3efe:	68 e9       	ldi	r22, 0x98	; 152
    3f00:	73 e0       	ldi	r23, 0x03	; 3
    3f02:	49 e2       	ldi	r20, 0x29	; 41
    3f04:	50 e0       	ldi	r21, 0x00	; 0
    3f06:	0e 94 d1 ac 	call	0x159a2	; 0x159a2 <__eewr_block_m128>
	 
	 eeprom_write_byte(&DefIFT_ID,1);
    3f0a:	80 e0       	ldi	r24, 0x00	; 0
    3f0c:	90 e0       	ldi	r25, 0x00	; 0
    3f0e:	61 e0       	ldi	r22, 0x01	; 1
    3f10:	0e 94 db ac 	call	0x159b6	; 0x159b6 <__eewr_byte_m128>
}
    3f14:	ec 96       	adiw	r28, 0x3c	; 60
    3f16:	0f b6       	in	r0, 0x3f	; 63
    3f18:	f8 94       	cli
    3f1a:	de bf       	out	0x3e, r29	; 62
    3f1c:	0f be       	out	0x3f, r0	; 63
    3f1e:	cd bf       	out	0x3d, r28	; 61
    3f20:	cf 91       	pop	r28
    3f22:	df 91       	pop	r29
    3f24:	1f 91       	pop	r17
    3f26:	0f 91       	pop	r16
    3f28:	ff 90       	pop	r15
    3f2a:	ef 90       	pop	r14
    3f2c:	df 90       	pop	r13
    3f2e:	bf 90       	pop	r11
    3f30:	af 90       	pop	r10
    3f32:	08 95       	ret

00003f34 <SetDispenser>:
		  }
	      break;
	 }
}

void SetDispenser(char DispType){
    3f34:	ef 92       	push	r14
    3f36:	ff 92       	push	r15
    3f38:	0f 93       	push	r16
    3f3a:	1f 93       	push	r17
    3f3c:	df 93       	push	r29
    3f3e:	cf 93       	push	r28
    3f40:	00 d0       	rcall	.+0      	; 0x3f42 <SetDispenser+0xe>
    3f42:	00 d0       	rcall	.+0      	; 0x3f44 <SetDispenser+0x10>
    3f44:	0f 92       	push	r0
    3f46:	cd b7       	in	r28, 0x3d	; 61
    3f48:	de b7       	in	r29, 0x3e	; 62
    3f4a:	18 2f       	mov	r17, r24
     char CurrentDispenser;
	 char i,DecimalSetting[5];
     CurrentDispenser=eeprom_read_byte(&DefDispenserBrand);
    3f4c:	87 e3       	ldi	r24, 0x37	; 55
    3f4e:	91 e0       	ldi	r25, 0x01	; 1
    3f50:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
	 if (CurrentDispenser!=DispType){
    3f54:	81 17       	cp	r24, r17
    3f56:	29 f0       	breq	.+10     	; 0x3f62 <SetDispenser+0x2e>
	     eeprom_write_byte(&DefDispenserBrand,DispType);
    3f58:	87 e3       	ldi	r24, 0x37	; 55
    3f5a:	91 e0       	ldi	r25, 0x01	; 1
    3f5c:	61 2f       	mov	r22, r17
    3f5e:	0e 94 db ac 	call	0x159b6	; 0x159b6 <__eewr_byte_m128>
	 }
     //Apply Setting for Pump respectively
	 switch(DispType){
    3f62:	11 30       	cpi	r17, 0x01	; 1
    3f64:	19 f0       	breq	.+6      	; 0x3f6c <SetDispenser+0x38>
    3f66:	12 30       	cpi	r17, 0x02	; 2
    3f68:	71 f4       	brne	.+28     	; 0x3f86 <SetDispenser+0x52>
    3f6a:	08 c0       	rjmp	.+16     	; 0x3f7c <SetDispenser+0x48>
	 case ST_GILBARCO:
          DecimalSetting[0]=0;//Price
    3f6c:	19 82       	std	Y+1, r1	; 0x01
		  DecimalSetting[1]=3;//Volume
    3f6e:	83 e0       	ldi	r24, 0x03	; 3
    3f70:	8a 83       	std	Y+2, r24	; 0x02
		  DecimalSetting[2]=0;//Money
    3f72:	1b 82       	std	Y+3, r1	; 0x03
		  DecimalSetting[3]=2;//TotalVolume
    3f74:	82 e0       	ldi	r24, 0x02	; 2
    3f76:	8c 83       	std	Y+4, r24	; 0x04
		  DecimalSetting[4]=0;//TotalMoney 
    3f78:	1d 82       	std	Y+5, r1	; 0x05
    3f7a:	05 c0       	rjmp	.+10     	; 0x3f86 <SetDispenser+0x52>
	      break;
	 case ST_WAYNE_DART:
          DecimalSetting[0]=0;//Price
    3f7c:	19 82       	std	Y+1, r1	; 0x01
		  DecimalSetting[1]=2;//Volume
    3f7e:	1a 83       	std	Y+2, r17	; 0x02
		  DecimalSetting[2]=0;//Money
    3f80:	1b 82       	std	Y+3, r1	; 0x03
		  DecimalSetting[3]=2;//TotalVolume
    3f82:	1c 83       	std	Y+4, r17	; 0x04
		  DecimalSetting[4]=2;//TotalMoney 
    3f84:	1d 83       	std	Y+5, r17	; 0x05
    3f86:	09 e3       	ldi	r16, 0x39	; 57
    3f88:	10 e0       	ldi	r17, 0x00	; 0
    3f8a:	7e 01       	movw	r14, r28
    3f8c:	08 94       	sec
    3f8e:	e1 1c       	adc	r14, r1
    3f90:	f1 1c       	adc	r15, r1
	      break;	 
	 }
	 //ApplyChanges
     for (i=0;i<5;i++){
	     if (eeprom_read_byte(&DefDecimalPrice+i)!=DecimalSetting[i]){
    3f92:	c8 01       	movw	r24, r16
    3f94:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
    3f98:	f7 01       	movw	r30, r14
    3f9a:	60 81       	ld	r22, Z
    3f9c:	86 17       	cp	r24, r22
    3f9e:	19 f0       	breq	.+6      	; 0x3fa6 <SetDispenser+0x72>
		     eeprom_write_byte(&DefDecimalPrice+i,DecimalSetting[i]);
    3fa0:	c8 01       	movw	r24, r16
    3fa2:	0e 94 db ac 	call	0x159b6	; 0x159b6 <__eewr_byte_m128>
    3fa6:	0f 5f       	subi	r16, 0xFF	; 255
    3fa8:	1f 4f       	sbci	r17, 0xFF	; 255
    3faa:	08 94       	sec
    3fac:	e1 1c       	adc	r14, r1
    3fae:	f1 1c       	adc	r15, r1
		  DecimalSetting[3]=2;//TotalVolume
		  DecimalSetting[4]=2;//TotalMoney 
	      break;	 
	 }
	 //ApplyChanges
     for (i=0;i<5;i++){
    3fb0:	f0 e0       	ldi	r31, 0x00	; 0
    3fb2:	0e 33       	cpi	r16, 0x3E	; 62
    3fb4:	1f 07       	cpc	r17, r31
    3fb6:	69 f7       	brne	.-38     	; 0x3f92 <SetDispenser+0x5e>
	     if (eeprom_read_byte(&DefDecimalPrice+i)!=DecimalSetting[i]){
		     eeprom_write_byte(&DefDecimalPrice+i,DecimalSetting[i]);
		 }
	 }
}
    3fb8:	0f 90       	pop	r0
    3fba:	0f 90       	pop	r0
    3fbc:	0f 90       	pop	r0
    3fbe:	0f 90       	pop	r0
    3fc0:	0f 90       	pop	r0
    3fc2:	cf 91       	pop	r28
    3fc4:	df 91       	pop	r29
    3fc6:	1f 91       	pop	r17
    3fc8:	0f 91       	pop	r16
    3fca:	ff 90       	pop	r15
    3fcc:	ef 90       	pop	r14
    3fce:	08 95       	ret

00003fd0 <InitMemory>:

	 }
}

void InitMemory(){
     PumpCountMax=eeprom_read_byte(&DefPoolingPumpMax);
    3fd0:	84 e4       	ldi	r24, 0x44	; 68
    3fd2:	91 e0       	ldi	r25, 0x01	; 1
    3fd4:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
    3fd8:	80 93 5c 01 	sts	0x015C, r24
	 ActivePump=eeprom_read_byte(&DefActivePump);
    3fdc:	89 e4       	ldi	r24, 0x49	; 73
    3fde:	91 e0       	ldi	r25, 0x01	; 1
    3fe0:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
    3fe4:	80 93 5d 01 	sts	0x015D, r24
}
    3fe8:	08 95       	ret

00003fea <GetFIPAddr>:
	    Result=PPumpID[FIPAddr-1];
	 }
   return Result;
}

char GetFIPAddr(char iPumpID){//Find FIP Addr based on PumpID respectively: 
    3fea:	ff 92       	push	r15
    3fec:	0f 93       	push	r16
    3fee:	1f 93       	push	r17
    3ff0:	df 93       	push	r29
    3ff2:	cf 93       	push	r28
    3ff4:	cd b7       	in	r28, 0x3d	; 61
    3ff6:	de b7       	in	r29, 0x3e	; 62
    3ff8:	28 97       	sbiw	r28, 0x08	; 8
    3ffa:	0f b6       	in	r0, 0x3f	; 63
    3ffc:	f8 94       	cli
    3ffe:	de bf       	out	0x3e, r29	; 62
    4000:	0f be       	out	0x3f, r0	; 63
    4002:	cd bf       	out	0x3d, r28	; 61
    4004:	f8 2e       	mov	r15, r24
char i,PPumpID[8],Result;     //FIP1..FIP8
	 Result=0; 
	 eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap,8);
    4006:	8e 01       	movw	r16, r28
    4008:	0f 5f       	subi	r16, 0xFF	; 255
    400a:	1f 4f       	sbci	r17, 0xFF	; 255
    400c:	c8 01       	movw	r24, r16
    400e:	65 e4       	ldi	r22, 0x45	; 69
    4010:	70 e0       	ldi	r23, 0x00	; 0
    4012:	48 e0       	ldi	r20, 0x08	; 8
    4014:	50 e0       	ldi	r21, 0x00	; 0
    4016:	0e 94 b9 ac 	call	0x15972	; 0x15972 <__eerd_block_m128>
    401a:	f8 01       	movw	r30, r16
     for(i=0;i<8;i++){
    401c:	9e 01       	movw	r18, r28
    401e:	27 5f       	subi	r18, 0xF7	; 247
    4020:	3f 4f       	sbci	r19, 0xFF	; 255
}

char GetFIPAddr(char iPumpID){//Find FIP Addr based on PumpID respectively: 
char i,PPumpID[8],Result;     //FIP1..FIP8
	 Result=0; 
	 eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap,8);
    4022:	9e 2f       	mov	r25, r30
    4024:	90 1b       	sub	r25, r16
     for(i=0;i<8;i++){
	     if (PPumpID[i]==iPumpID){
    4026:	80 81       	ld	r24, Z
    4028:	8f 15       	cp	r24, r15
    402a:	19 f4       	brne	.+6      	; 0x4032 <GetFIPAddr+0x48>
		     Result=i+1;
    402c:	89 2f       	mov	r24, r25
    402e:	8f 5f       	subi	r24, 0xFF	; 255
    4030:	05 c0       	rjmp	.+10     	; 0x403c <GetFIPAddr+0x52>
			 break;
    4032:	31 96       	adiw	r30, 0x01	; 1

char GetFIPAddr(char iPumpID){//Find FIP Addr based on PumpID respectively: 
char i,PPumpID[8],Result;     //FIP1..FIP8
	 Result=0; 
	 eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap,8);
     for(i=0;i<8;i++){
    4034:	e2 17       	cp	r30, r18
    4036:	f3 07       	cpc	r31, r19
    4038:	a1 f7       	brne	.-24     	; 0x4022 <GetFIPAddr+0x38>
    403a:	80 e0       	ldi	r24, 0x00	; 0
		     Result=i+1;
			 break;
		 }
	 }
   return Result;
}
    403c:	28 96       	adiw	r28, 0x08	; 8
    403e:	0f b6       	in	r0, 0x3f	; 63
    4040:	f8 94       	cli
    4042:	de bf       	out	0x3e, r29	; 62
    4044:	0f be       	out	0x3f, r0	; 63
    4046:	cd bf       	out	0x3d, r28	; 61
    4048:	cf 91       	pop	r28
    404a:	df 91       	pop	r29
    404c:	1f 91       	pop	r17
    404e:	0f 91       	pop	r16
    4050:	ff 90       	pop	r15
    4052:	08 95       	ret

00004054 <UpdateStandaloneStatus>:
		 sprintf_P(lcdteks,PSTR("%s"),SPump);
         lcd_print(4,1,lcdteks);
     	 }
}

void UpdateStandaloneStatus(char xPumpID,char xPumpStatus){//xPumpID: (1-16)&0x0F
    4054:	ff 92       	push	r15
    4056:	0f 93       	push	r16
    4058:	1f 93       	push	r17
    405a:	cf 93       	push	r28
    405c:	df 93       	push	r29
    405e:	18 2f       	mov	r17, r24
    4060:	f6 2e       	mov	r15, r22
char strSend[20],iPumpID; //[xxxxxxxxxPx]
char iAddr;

	 if (xPumpID<16){
    4062:	80 31       	cpi	r24, 0x10	; 16
    4064:	08 f0       	brcs	.+2      	; 0x4068 <UpdateStandaloneStatus+0x14>
    4066:	4a c0       	rjmp	.+148    	; 0x40fc <UpdateStandaloneStatus+0xa8>
	     DispenserBrand=eeprom_read_byte(&DefDispenserBrand);
    4068:	87 e3       	ldi	r24, 0x37	; 55
    406a:	91 e0       	ldi	r25, 0x01	; 1
    406c:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
    4070:	80 93 5e 01 	sts	0x015E, r24
	     switch(DispenserBrand){
    4074:	81 50       	subi	r24, 0x01	; 1
    4076:	82 30       	cpi	r24, 0x02	; 2
    4078:	08 f4       	brcc	.+2      	; 0x407c <UpdateStandaloneStatus+0x28>
    407a:	81 2f       	mov	r24, r17
	     case ST_WAYNE_DART:
              iPumpID=xPumpID;
	          break;				   
	     }

		 iAddr=GetFIPAddr(iPumpID);
    407c:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <GetFIPAddr>
		 if (iAddr>0){
    4080:	88 23       	and	r24, r24
    4082:	e1 f1       	breq	.+120    	; 0x40fc <UpdateStandaloneStatus+0xa8>
		     iAddr=iAddr-1;
			 if (strPumpStatus[iAddr]!=GetPumpStatusLabel(PS_PRINT_READY)){//iFdiiiiiiiiiiiii
    4084:	81 50       	subi	r24, 0x01	; 1
    4086:	c8 2f       	mov	r28, r24
    4088:	d0 e0       	ldi	r29, 0x00	; 0
    408a:	80 e1       	ldi	r24, 0x10	; 16
    408c:	0e 94 3e 14 	call	0x287c	; 0x287c <GetPumpStatusLabel>
    4090:	8e 01       	movw	r16, r28
    4092:	0e 5f       	subi	r16, 0xFE	; 254
    4094:	1e 4f       	sbci	r17, 0xFE	; 254
    4096:	f8 01       	movw	r30, r16
    4098:	90 81       	ld	r25, Z
    409a:	98 17       	cp	r25, r24
    409c:	b1 f0       	breq	.+44     	; 0x40ca <UpdateStandaloneStatus+0x76>
		         if (xPumpStatus!=PS_PRINT_READY)
    409e:	f0 e1       	ldi	r31, 0x10	; 16
    40a0:	ff 16       	cp	r15, r31
    40a2:	21 f0       	breq	.+8      	; 0x40ac <UpdateStandaloneStatus+0x58>
				     CurrentPumpStatus[iAddr]=xPumpStatus;
    40a4:	fe 01       	movw	r30, r28
    40a6:	e1 5a       	subi	r30, 0xA1	; 161
    40a8:	fe 4f       	sbci	r31, 0xFE	; 254
    40aa:	f0 82       	st	Z, r15
			     strPumpStatus[iAddr]=GetPumpStatusLabel(xPumpStatus);
    40ac:	8f 2d       	mov	r24, r15
    40ae:	0e 94 3e 14 	call	0x287c	; 0x287c <GetPumpStatusLabel>
    40b2:	8e 01       	movw	r16, r28
    40b4:	0e 5f       	subi	r16, 0xFE	; 254
    40b6:	1e 4f       	sbci	r17, 0xFE	; 254
    40b8:	f8 01       	movw	r30, r16
    40ba:	80 83       	st	Z, r24
                 if (xPumpStatus==PS_FINISH_TOTALIZER)
    40bc:	f5 e1       	ldi	r31, 0x15	; 21
    40be:	ff 16       	cp	r15, r31
    40c0:	c1 f4       	brne	.+48     	; 0x40f2 <UpdateStandaloneStatus+0x9e>
				     strPumpStatus[iAddr]=GetPumpStatusLabel(CurrentPumpStatus[iAddr]);
    40c2:	c1 5a       	subi	r28, 0xA1	; 161
    40c4:	de 4f       	sbci	r29, 0xFE	; 254
    40c6:	88 81       	ld	r24, Y
    40c8:	10 c0       	rjmp	.+32     	; 0x40ea <UpdateStandaloneStatus+0x96>
    40ca:	fe 01       	movw	r30, r28
    40cc:	e1 5a       	subi	r30, 0xA1	; 161
    40ce:	fe 4f       	sbci	r31, 0xFE	; 254
		     }else if ((strPumpStatus[iAddr]==GetPumpStatusLabel(PS_PRINT_READY))||(xPumpStatus==PUMP_FEOT)||(xPumpStatus==PS_PRINTED)||(xPumpStatus==PS_TOTALIZER)){//P
			     if (xPumpStatus==PS_PRINTED){
    40d0:	81 e1       	ldi	r24, 0x11	; 17
    40d2:	f8 16       	cp	r15, r24
    40d4:	11 f4       	brne	.+4      	; 0x40da <UpdateStandaloneStatus+0x86>
				 //New

				     //if (CurrentPumpStatus[iAddr]!=GetPumpStatusLabel(PS_PRINT_READY))
			             strPumpStatus[iAddr]=GetPumpStatusLabel(CurrentPumpStatus[iAddr]);
    40d6:	80 81       	ld	r24, Z
    40d8:	08 c0       	rjmp	.+16     	; 0x40ea <UpdateStandaloneStatus+0x96>
					 //    CurrentPumpStatus[iAddr]=PUMP_OFF;
					 //    strPumpStatus[iAddr]=GetPumpStatusLabel(PUMP_OFF);
					 //}

				  }
			     else CurrentPumpStatus[iAddr]=xPumpStatus;			 
    40da:	f0 82       	st	Z, r15
			 if (xPumpStatus==PUMP_FEOT){
    40dc:	8b e0       	ldi	r24, 0x0B	; 11
    40de:	f8 16       	cp	r15, r24
    40e0:	21 f0       	breq	.+8      	; 0x40ea <UpdateStandaloneStatus+0x96>
			     CurrentPumpStatus[iAddr]=xPumpStatus;
			     strPumpStatus[iAddr]=GetPumpStatusLabel(CurrentPumpStatus[iAddr]);
				 }
             else if (xPumpStatus==PS_TOTALIZER){
    40e2:	f4 e1       	ldi	r31, 0x14	; 20
    40e4:	ff 16       	cp	r15, r31
    40e6:	29 f4       	brne	.+10     	; 0x40f2 <UpdateStandaloneStatus+0x9e>
			      strPumpStatus[iAddr]=GetPumpStatusLabel(xPumpStatus);
    40e8:	84 e1       	ldi	r24, 0x14	; 20
    40ea:	0e 94 3e 14 	call	0x287c	; 0x287c <GetPumpStatusLabel>
    40ee:	f8 01       	movw	r30, r16
    40f0:	80 83       	st	Z, r24
				 }
		 }		 	     
         strPumpStatus[16]=0;
    40f2:	10 92 12 01 	sts	0x0112, r1
	     IsNewPumpStatus=True;		 
    40f6:	81 e0       	ldi	r24, 0x01	; 1
    40f8:	80 93 01 01 	sts	0x0101, r24
		 }		 
	 }
}
    40fc:	df 91       	pop	r29
    40fe:	cf 91       	pop	r28
    4100:	1f 91       	pop	r17
    4102:	0f 91       	pop	r16
    4104:	ff 90       	pop	r15
    4106:	08 95       	ret

00004108 <GetPumpID>:
     StrPosCopy(strSystemTime,sSecond,6,2);
	 sprintf_P(Result,PSTR("20%s/%s/%s %s:%s:%s"),sYear,sMonth,sDay,sHour,sMinute,sSecond);
}


char GetPumpID(char FIPAddr){//Find Stored PumpID in PumpMap
    4108:	1f 93       	push	r17
    410a:	df 93       	push	r29
    410c:	cf 93       	push	r28
    410e:	cd b7       	in	r28, 0x3d	; 61
    4110:	de b7       	in	r29, 0x3e	; 62
    4112:	28 97       	sbiw	r28, 0x08	; 8
    4114:	0f b6       	in	r0, 0x3f	; 63
    4116:	f8 94       	cli
    4118:	de bf       	out	0x3e, r29	; 62
    411a:	0f be       	out	0x3f, r0	; 63
    411c:	cd bf       	out	0x3d, r28	; 61
    411e:	18 2f       	mov	r17, r24
     char PPumpID[8],Result;     
     eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap,8);
    4120:	ce 01       	movw	r24, r28
    4122:	01 96       	adiw	r24, 0x01	; 1
    4124:	65 e4       	ldi	r22, 0x45	; 69
    4126:	70 e0       	ldi	r23, 0x00	; 0
    4128:	48 e0       	ldi	r20, 0x08	; 8
    412a:	50 e0       	ldi	r21, 0x00	; 0
    412c:	0e 94 b9 ac 	call	0x15972	; 0x15972 <__eerd_block_m128>
	 Result=0;
	 if ((FIPAddr>0) && (FIPAddr<8)){
    4130:	81 2f       	mov	r24, r17
    4132:	81 50       	subi	r24, 0x01	; 1
    4134:	87 30       	cpi	r24, 0x07	; 7
    4136:	10 f0       	brcs	.+4      	; 0x413c <GetPumpID+0x34>
    4138:	80 e0       	ldi	r24, 0x00	; 0
    413a:	04 c0       	rjmp	.+8      	; 0x4144 <GetPumpID+0x3c>
	    Result=PPumpID[FIPAddr-1];
    413c:	fe 01       	movw	r30, r28
    413e:	e1 0f       	add	r30, r17
    4140:	f1 1d       	adc	r31, r1
    4142:	80 81       	ld	r24, Z
	 }
   return Result;
}
    4144:	28 96       	adiw	r28, 0x08	; 8
    4146:	0f b6       	in	r0, 0x3f	; 63
    4148:	f8 94       	cli
    414a:	de bf       	out	0x3e, r29	; 62
    414c:	0f be       	out	0x3f, r0	; 63
    414e:	cd bf       	out	0x3d, r28	; 61
    4150:	cf 91       	pop	r28
    4152:	df 91       	pop	r29
    4154:	1f 91       	pop	r17
    4156:	08 95       	ret

00004158 <GetTotalizerData>:
	 if (TType==TMONEY)eeprom_write_block((const void*)&rawValue,(void*)&(TotalMoney[TAddr][iPumpAddr][iGrade]), sizeof(rawValue));
}



void GetTotalizerData(char TType, char TAddr, char xPumpAddr, char xGradeAddr, char *strValue){// 0 1 1 "0000000"
    4158:	0f 93       	push	r16
    415a:	1f 93       	push	r17
    415c:	df 93       	push	r29
    415e:	cf 93       	push	r28
    4160:	00 d0       	rcall	.+0      	; 0x4162 <GetTotalizerData+0xa>
    4162:	00 d0       	rcall	.+0      	; 0x4164 <GetTotalizerData+0xc>
    4164:	00 d0       	rcall	.+0      	; 0x4166 <GetTotalizerData+0xe>
    4166:	cd b7       	in	r28, 0x3d	; 61
    4168:	de b7       	in	r29, 0x3e	; 62
    416a:	96 2f       	mov	r25, r22
     char rawValue[6],iPumpAddr,iGrade;

	 iPumpAddr=(xPumpAddr&0x0F);
    416c:	4f 70       	andi	r20, 0x0F	; 15
	 if ((xGradeAddr>=1)&&(xGradeAddr<=6))
    416e:	21 50       	subi	r18, 0x01	; 1
    4170:	26 30       	cpi	r18, 0x06	; 6
    4172:	08 f4       	brcc	.+2      	; 0x4176 <GetTotalizerData+0x1e>
    4174:	52 2f       	mov	r21, r18
	     iGrade=xGradeAddr-1;
     
//TotalVolume[2][16][6][6];
//GetTotalizerData(TVOLUME,TOTALIZER_LAST,PumpNum,xGrade,strLastVolume);
	 if (TType==TVOLUME)eeprom_read_block((void*) &rawValue, (const void*) &(TotalVolume[TAddr][iPumpAddr][iGrade]), sizeof(rawValue));
    4176:	88 23       	and	r24, r24
    4178:	d9 f4       	brne	.+54     	; 0x41b0 <GetTotalizerData+0x58>
    417a:	64 e2       	ldi	r22, 0x24	; 36
    417c:	46 9f       	mul	r20, r22
    417e:	b0 01       	movw	r22, r0
    4180:	11 24       	eor	r1, r1
    4182:	29 2f       	mov	r18, r25
    4184:	30 e0       	ldi	r19, 0x00	; 0
    4186:	80 e2       	ldi	r24, 0x20	; 32
    4188:	91 e0       	ldi	r25, 0x01	; 1
    418a:	fc 01       	movw	r30, r24
    418c:	2e 9f       	mul	r18, r30
    418e:	c0 01       	movw	r24, r0
    4190:	2f 9f       	mul	r18, r31
    4192:	90 0d       	add	r25, r0
    4194:	3e 9f       	mul	r19, r30
    4196:	90 0d       	add	r25, r0
    4198:	11 24       	eor	r1, r1
    419a:	68 0f       	add	r22, r24
    419c:	79 1f       	adc	r23, r25
    419e:	86 e0       	ldi	r24, 0x06	; 6
    41a0:	58 9f       	mul	r21, r24
    41a2:	c0 01       	movw	r24, r0
    41a4:	11 24       	eor	r1, r1
    41a6:	68 0f       	add	r22, r24
    41a8:	79 1f       	adc	r23, r25
    41aa:	6d 53       	subi	r22, 0x3D	; 61
    41ac:	7c 4f       	sbci	r23, 0xFC	; 252
    41ae:	1c c0       	rjmp	.+56     	; 0x41e8 <GetTotalizerData+0x90>
	 else 
	 if (TType==TMONEY)eeprom_read_block((void*) &rawValue, (const void*) &(TotalMoney[TAddr][iPumpAddr][iGrade]), sizeof(rawValue));
    41b0:	81 30       	cpi	r24, 0x01	; 1
    41b2:	01 f5       	brne	.+64     	; 0x41f4 <GetTotalizerData+0x9c>
    41b4:	64 e2       	ldi	r22, 0x24	; 36
    41b6:	46 9f       	mul	r20, r22
    41b8:	b0 01       	movw	r22, r0
    41ba:	11 24       	eor	r1, r1
    41bc:	29 2f       	mov	r18, r25
    41be:	30 e0       	ldi	r19, 0x00	; 0
    41c0:	80 e2       	ldi	r24, 0x20	; 32
    41c2:	91 e0       	ldi	r25, 0x01	; 1
    41c4:	fc 01       	movw	r30, r24
    41c6:	2e 9f       	mul	r18, r30
    41c8:	c0 01       	movw	r24, r0
    41ca:	2f 9f       	mul	r18, r31
    41cc:	90 0d       	add	r25, r0
    41ce:	3e 9f       	mul	r19, r30
    41d0:	90 0d       	add	r25, r0
    41d2:	11 24       	eor	r1, r1
    41d4:	68 0f       	add	r22, r24
    41d6:	79 1f       	adc	r23, r25
    41d8:	86 e0       	ldi	r24, 0x06	; 6
    41da:	58 9f       	mul	r21, r24
    41dc:	c0 01       	movw	r24, r0
    41de:	11 24       	eor	r1, r1
    41e0:	68 0f       	add	r22, r24
    41e2:	79 1f       	adc	r23, r25
    41e4:	6d 5f       	subi	r22, 0xFD	; 253
    41e6:	79 4f       	sbci	r23, 0xF9	; 249
    41e8:	ce 01       	movw	r24, r28
    41ea:	01 96       	adiw	r24, 0x01	; 1
    41ec:	46 e0       	ldi	r20, 0x06	; 6
    41ee:	50 e0       	ldi	r21, 0x00	; 0
    41f0:	0e 94 b9 ac 	call	0x15972	; 0x15972 <__eerd_block_m128>
	 //Convert RawData to String 
	 RawToStr(rawValue,strValue);
    41f4:	ce 01       	movw	r24, r28
    41f6:	01 96       	adiw	r24, 0x01	; 1
    41f8:	b8 01       	movw	r22, r16
    41fa:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <RawToStr>
}
    41fe:	26 96       	adiw	r28, 0x06	; 6
    4200:	0f b6       	in	r0, 0x3f	; 63
    4202:	f8 94       	cli
    4204:	de bf       	out	0x3e, r29	; 62
    4206:	0f be       	out	0x3f, r0	; 63
    4208:	cd bf       	out	0x3d, r28	; 61
    420a:	cf 91       	pop	r28
    420c:	df 91       	pop	r29
    420e:	1f 91       	pop	r17
    4210:	0f 91       	pop	r16
    4212:	08 95       	ret

00004214 <SaveToEEPROM>:
     return Result;
}



char SaveToEEPROM(char *Src,char *Dest,unsigned int Length){
    4214:	ef 92       	push	r14
    4216:	ff 92       	push	r15
    4218:	0f 93       	push	r16
    421a:	1f 93       	push	r17
    421c:	df 93       	push	r29
    421e:	cf 93       	push	r28
    4220:	cd b7       	in	r28, 0x3d	; 61
    4222:	de b7       	in	r29, 0x3e	; 62
    4224:	ac 97       	sbiw	r28, 0x2c	; 44
    4226:	0f b6       	in	r0, 0x3f	; 63
    4228:	f8 94       	cli
    422a:	de bf       	out	0x3e, r29	; 62
    422c:	0f be       	out	0x3f, r0	; 63
    422e:	cd bf       	out	0x3d, r28	; 61
    4230:	9a a7       	std	Y+42, r25	; 0x2a
    4232:	89 a7       	std	Y+41, r24	; 0x29
    4234:	7c a7       	std	Y+44, r23	; 0x2c
    4236:	6b a7       	std	Y+43, r22	; 0x2b
    4238:	7a 01       	movw	r14, r20
     char strCompare[40];
	 //Read Previous Data
     eeprom_read_block((void*)&Dest,(const void*)&strCompare, Length);
    423a:	8e 01       	movw	r16, r28
    423c:	05 5d       	subi	r16, 0xD5	; 213
    423e:	1f 4f       	sbci	r17, 0xFF	; 255
    4240:	c8 01       	movw	r24, r16
    4242:	be 01       	movw	r22, r28
    4244:	6f 5f       	subi	r22, 0xFF	; 255
    4246:	7f 4f       	sbci	r23, 0xFF	; 255
    4248:	0e 94 b9 ac 	call	0x15972	; 0x15972 <__eerd_block_m128>
     //if 
     eeprom_write_block((const void*)&Src,(void*)&Dest, Length);
    424c:	ce 01       	movw	r24, r28
    424e:	89 96       	adiw	r24, 0x29	; 41
    4250:	b8 01       	movw	r22, r16
    4252:	a7 01       	movw	r20, r14
    4254:	0e 94 d1 ac 	call	0x159a2	; 0x159a2 <__eewr_block_m128>
}
    4258:	ac 96       	adiw	r28, 0x2c	; 44
    425a:	0f b6       	in	r0, 0x3f	; 63
    425c:	f8 94       	cli
    425e:	de bf       	out	0x3e, r29	; 62
    4260:	0f be       	out	0x3f, r0	; 63
    4262:	cd bf       	out	0x3d, r28	; 61
    4264:	cf 91       	pop	r28
    4266:	df 91       	pop	r29
    4268:	1f 91       	pop	r17
    426a:	0f 91       	pop	r16
    426c:	ff 90       	pop	r15
    426e:	ef 90       	pop	r14
    4270:	08 95       	ret

00004272 <SelectMark>:
	      break;
	 }
    return Result;
}

char SelectMark(char InMark){
    4272:	df 92       	push	r13
    4274:	ef 92       	push	r14
    4276:	ff 92       	push	r15
    4278:	0f 93       	push	r16
    427a:	1f 93       	push	r17
    427c:	df 93       	push	r29
    427e:	cf 93       	push	r28
    4280:	00 d0       	rcall	.+0      	; 0x4282 <SelectMark+0x10>
    4282:	00 d0       	rcall	.+0      	; 0x4284 <SelectMark+0x12>
    4284:	0f 92       	push	r0
    4286:	cd b7       	in	r28, 0x3d	; 61
    4288:	de b7       	in	r29, 0x3e	; 62
    428a:	d8 2e       	mov	r13, r24
char i,Result,PMark[5],Length;
     eeprom_read_block((void*)&PMark,(const void*)&DefMarkMap, sizeof(DefMarkMap));
    428c:	8e 01       	movw	r16, r28
    428e:	0f 5f       	subi	r16, 0xFF	; 255
    4290:	1f 4f       	sbci	r17, 0xFF	; 255
    4292:	c8 01       	movw	r24, r16
    4294:	60 e4       	ldi	r22, 0x40	; 64
    4296:	70 e0       	ldi	r23, 0x00	; 0
    4298:	45 e0       	ldi	r20, 0x05	; 5
    429a:	50 e0       	ldi	r21, 0x00	; 0
    429c:	0e 94 b9 ac 	call	0x15972	; 0x15972 <__eerd_block_m128>
    42a0:	ed 2d       	mov	r30, r13
    42a2:	21 e0       	ldi	r18, 0x01	; 1
    42a4:	30 e0       	ldi	r19, 0x00	; 0
	 Length=sizeof(DefMarkMap);
	 Result=InMark;
     for(i=0;i<Length;i++){
	     if (InMark==PMark[i])
		     Result=PMark[(i+1)%Length];
    42a6:	78 01       	movw	r14, r16
char i,Result,PMark[5],Length;
     eeprom_read_block((void*)&PMark,(const void*)&DefMarkMap, sizeof(DefMarkMap));
	 Length=sizeof(DefMarkMap);
	 Result=InMark;
     for(i=0;i<Length;i++){
	     if (InMark==PMark[i])
    42a8:	d8 01       	movw	r26, r16
    42aa:	8c 91       	ld	r24, X
    42ac:	d8 16       	cp	r13, r24
    42ae:	49 f4       	brne	.+18     	; 0x42c2 <SelectMark+0x50>
		     Result=PMark[(i+1)%Length];
    42b0:	c9 01       	movw	r24, r18
    42b2:	65 e0       	ldi	r22, 0x05	; 5
    42b4:	70 e0       	ldi	r23, 0x00	; 0
    42b6:	0e 94 17 aa 	call	0x1542e	; 0x1542e <__divmodhi4>
    42ba:	f7 01       	movw	r30, r14
    42bc:	e8 0f       	add	r30, r24
    42be:	f9 1f       	adc	r31, r25
    42c0:	e0 81       	ld	r30, Z
    42c2:	0f 5f       	subi	r16, 0xFF	; 255
    42c4:	1f 4f       	sbci	r17, 0xFF	; 255
    42c6:	2f 5f       	subi	r18, 0xFF	; 255
    42c8:	3f 4f       	sbci	r19, 0xFF	; 255
char SelectMark(char InMark){
char i,Result,PMark[5],Length;
     eeprom_read_block((void*)&PMark,(const void*)&DefMarkMap, sizeof(DefMarkMap));
	 Length=sizeof(DefMarkMap);
	 Result=InMark;
     for(i=0;i<Length;i++){
    42ca:	26 30       	cpi	r18, 0x06	; 6
    42cc:	31 05       	cpc	r19, r1
    42ce:	61 f7       	brne	.-40     	; 0x42a8 <SelectMark+0x36>
	     if (InMark==PMark[i])
		     Result=PMark[(i+1)%Length];
	 }
     return Result;
}
    42d0:	8e 2f       	mov	r24, r30
    42d2:	0f 90       	pop	r0
    42d4:	0f 90       	pop	r0
    42d6:	0f 90       	pop	r0
    42d8:	0f 90       	pop	r0
    42da:	0f 90       	pop	r0
    42dc:	cf 91       	pop	r28
    42de:	df 91       	pop	r29
    42e0:	1f 91       	pop	r17
    42e2:	0f 91       	pop	r16
    42e4:	ff 90       	pop	r15
    42e6:	ef 90       	pop	r14
    42e8:	df 90       	pop	r13
    42ea:	08 95       	ret

000042ec <GenerateStandaloneTransData>:

     eeprom_write_block((const void*)&PTransNum,(void*)&DefTransactionNumber,sizeof(DefTransactionNumber));
}


char GenerateStandaloneTransData(char xPumpID, char *PNozzle){//[1,2,3..16]->[1,2,3..0]
    42ec:	cf 92       	push	r12
    42ee:	df 92       	push	r13
    42f0:	ef 92       	push	r14
    42f2:	ff 92       	push	r15
    42f4:	0f 93       	push	r16
    42f6:	1f 93       	push	r17
    42f8:	df 93       	push	r29
    42fa:	cf 93       	push	r28
    42fc:	cd b7       	in	r28, 0x3d	; 61
    42fe:	de b7       	in	r29, 0x3e	; 62
    4300:	2f 97       	sbiw	r28, 0x0f	; 15
    4302:	0f b6       	in	r0, 0x3f	; 63
    4304:	f8 94       	cli
    4306:	de bf       	out	0x3e, r29	; 62
    4308:	0f be       	out	0x3f, r0	; 63
    430a:	cd bf       	out	0x3d, r28	; 61
    430c:	e8 2e       	mov	r14, r24
    430e:	8b 01       	movw	r16, r22
     char Result=GS_NONE;
	 char strSend[30];
	 char FIPAddr;

	 iPumpID=(xPumpID&0x0F);
	 FIPAddr=GetFIPAddr(iPumpID);
    4310:	8f 70       	andi	r24, 0x0F	; 15
    4312:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <GetFIPAddr>
     if (FIPAddr>0){
    4316:	88 23       	and	r24, r24
    4318:	09 f4       	brne	.+2      	; 0x431c <GenerateStandaloneTransData+0x30>
    431a:	28 c1       	rjmp	.+592    	; 0x456c <GenerateStandaloneTransData+0x280>
	     FIPAddr=FIPAddr-1;
		 iProdID=PNozzle[RecPumpData[FIPAddr].Grade];
    431c:	81 50       	subi	r24, 0x01	; 1
    431e:	c8 2e       	mov	r12, r24
    4320:	dd 24       	eor	r13, r13
    4322:	85 e3       	ldi	r24, 0x35	; 53
    4324:	90 e0       	ldi	r25, 0x00	; 0
    4326:	c8 9e       	mul	r12, r24
    4328:	f0 01       	movw	r30, r0
    432a:	c9 9e       	mul	r12, r25
    432c:	f0 0d       	add	r31, r0
    432e:	d8 9e       	mul	r13, r24
    4330:	f0 0d       	add	r31, r0
    4332:	11 24       	eor	r1, r1
    4334:	e8 55       	subi	r30, 0x58	; 88
    4336:	fa 4f       	sbci	r31, 0xFA	; 250
    4338:	80 81       	ld	r24, Z
    433a:	08 0f       	add	r16, r24
    433c:	11 1d       	adc	r17, r1
    433e:	d8 01       	movw	r26, r16
    4340:	2c 91       	ld	r18, X
    4342:	ce 01       	movw	r24, r28
    4344:	01 96       	adiw	r24, 0x01	; 1

		 if (iProdID>0) eeprom_read_block((void*) &ProductName, (const void*) &DefProductName[iProdID-1],sizeof(DefProductName[iProdID-1]));
    4346:	22 23       	and	r18, r18
    4348:	59 f0       	breq	.+22     	; 0x4360 <GenerateStandaloneTransData+0x74>
    434a:	6d e0       	ldi	r22, 0x0D	; 13
    434c:	26 9f       	mul	r18, r22
    434e:	b0 01       	movw	r22, r0
    4350:	11 24       	eor	r1, r1
    4352:	62 55       	subi	r22, 0x52	; 82
    4354:	7f 4f       	sbci	r23, 0xFF	; 255
    4356:	4d e0       	ldi	r20, 0x0D	; 13
    4358:	50 e0       	ldi	r21, 0x00	; 0
    435a:	0e 94 b9 ac 	call	0x15972	; 0x15972 <__eerd_block_m128>
    435e:	10 c0       	rjmp	.+32     	; 0x4380 <GenerateStandaloneTransData+0x94>
		 else sprintf_P(ProductName,PSTR("N/A"));
    4360:	00 d0       	rcall	.+0      	; 0x4362 <GenerateStandaloneTransData+0x76>
    4362:	00 d0       	rcall	.+0      	; 0x4364 <GenerateStandaloneTransData+0x78>
    4364:	ed b7       	in	r30, 0x3d	; 61
    4366:	fe b7       	in	r31, 0x3e	; 62
    4368:	92 83       	std	Z+2, r25	; 0x02
    436a:	81 83       	std	Z+1, r24	; 0x01
    436c:	8c e2       	ldi	r24, 0x2C	; 44
    436e:	94 e2       	ldi	r25, 0x24	; 36
    4370:	94 83       	std	Z+4, r25	; 0x04
    4372:	83 83       	std	Z+3, r24	; 0x03
    4374:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
    4378:	0f 90       	pop	r0
    437a:	0f 90       	pop	r0
    437c:	0f 90       	pop	r0
    437e:	0f 90       	pop	r0

		 TermID=eeprom_read_byte(&DefIFT_ID);
    4380:	80 e0       	ldi	r24, 0x00	; 0
    4382:	90 e0       	ldi	r25, 0x00	; 0
    4384:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
    4388:	f8 2e       	mov	r15, r24

		 //Shift,TransNum,Date,Time
		 sprintf_P(strShift,PSTR("%d"),RecPumpData[FIPAddr].Shift);
    438a:	00 d0       	rcall	.+0      	; 0x438c <GenerateStandaloneTransData+0xa0>
    438c:	00 d0       	rcall	.+0      	; 0x438e <GenerateStandaloneTransData+0xa2>
    438e:	00 d0       	rcall	.+0      	; 0x4390 <GenerateStandaloneTransData+0xa4>
    4390:	ad b7       	in	r26, 0x3d	; 61
    4392:	be b7       	in	r27, 0x3e	; 62
    4394:	11 96       	adiw	r26, 0x01	; 1
    4396:	88 e6       	ldi	r24, 0x68	; 104
    4398:	9c e0       	ldi	r25, 0x0C	; 12
    439a:	ed b7       	in	r30, 0x3d	; 61
    439c:	fe b7       	in	r31, 0x3e	; 62
    439e:	92 83       	std	Z+2, r25	; 0x02
    43a0:	81 83       	std	Z+1, r24	; 0x01
    43a2:	89 e2       	ldi	r24, 0x29	; 41
    43a4:	94 e2       	ldi	r25, 0x24	; 36
    43a6:	13 96       	adiw	r26, 0x03	; 3
    43a8:	9c 93       	st	X, r25
    43aa:	8e 93       	st	-X, r24
    43ac:	12 97       	sbiw	r26, 0x02	; 2
    43ae:	85 e3       	ldi	r24, 0x35	; 53
    43b0:	90 e0       	ldi	r25, 0x00	; 0
    43b2:	c8 9e       	mul	r12, r24
    43b4:	80 01       	movw	r16, r0
    43b6:	c9 9e       	mul	r12, r25
    43b8:	10 0d       	add	r17, r0
    43ba:	d8 9e       	mul	r13, r24
    43bc:	10 0d       	add	r17, r0
    43be:	11 24       	eor	r1, r1
    43c0:	f8 01       	movw	r30, r16
    43c2:	e8 55       	subi	r30, 0x58	; 88
    43c4:	fa 4f       	sbci	r31, 0xFA	; 250
    43c6:	82 81       	ldd	r24, Z+2	; 0x02
    43c8:	14 96       	adiw	r26, 0x04	; 4
    43ca:	8c 93       	st	X, r24
    43cc:	14 97       	sbiw	r26, 0x04	; 4
    43ce:	15 96       	adiw	r26, 0x05	; 5
    43d0:	1c 92       	st	X, r1
    43d2:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
		 sprintf_P(strTranNo,PSTR("%s"),RecPumpData[FIPAddr].strTransNum);
    43d6:	ed b7       	in	r30, 0x3d	; 61
    43d8:	fe b7       	in	r31, 0x3e	; 62
    43da:	31 96       	adiw	r30, 0x01	; 1
    43dc:	87 e8       	ldi	r24, 0x87	; 135
    43de:	9c e0       	ldi	r25, 0x0C	; 12
    43e0:	ad b7       	in	r26, 0x3d	; 61
    43e2:	be b7       	in	r27, 0x3e	; 62
    43e4:	12 96       	adiw	r26, 0x02	; 2
    43e6:	9c 93       	st	X, r25
    43e8:	8e 93       	st	-X, r24
    43ea:	11 97       	sbiw	r26, 0x01	; 1
    43ec:	86 e2       	ldi	r24, 0x26	; 38
    43ee:	94 e2       	ldi	r25, 0x24	; 36
    43f0:	93 83       	std	Z+3, r25	; 0x03
    43f2:	82 83       	std	Z+2, r24	; 0x02
    43f4:	c8 01       	movw	r24, r16
    43f6:	85 55       	subi	r24, 0x55	; 85
    43f8:	9a 4f       	sbci	r25, 0xFA	; 250
    43fa:	95 83       	std	Z+5, r25	; 0x05
    43fc:	84 83       	std	Z+4, r24	; 0x04
    43fe:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	     sprintf_P(strDate,PSTR("%s"),RecPumpData[FIPAddr].strTransDate);
    4402:	ed b7       	in	r30, 0x3d	; 61
    4404:	fe b7       	in	r31, 0x3e	; 62
    4406:	31 96       	adiw	r30, 0x01	; 1
    4408:	8e e6       	ldi	r24, 0x6E	; 110
    440a:	97 e0       	ldi	r25, 0x07	; 7
    440c:	ad b7       	in	r26, 0x3d	; 61
    440e:	be b7       	in	r27, 0x3e	; 62
    4410:	12 96       	adiw	r26, 0x02	; 2
    4412:	9c 93       	st	X, r25
    4414:	8e 93       	st	-X, r24
    4416:	11 97       	sbiw	r26, 0x01	; 1
    4418:	83 e2       	ldi	r24, 0x23	; 35
    441a:	94 e2       	ldi	r25, 0x24	; 36
    441c:	93 83       	std	Z+3, r25	; 0x03
    441e:	82 83       	std	Z+2, r24	; 0x02
    4420:	c8 01       	movw	r24, r16
    4422:	8e 54       	subi	r24, 0x4E	; 78
    4424:	9a 4f       	sbci	r25, 0xFA	; 250
    4426:	95 83       	std	Z+5, r25	; 0x05
    4428:	84 83       	std	Z+4, r24	; 0x04
    442a:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
		 sprintf_P(strTime,PSTR("%s"),RecPumpData[FIPAddr].strTransTime);	 
    442e:	ed b7       	in	r30, 0x3d	; 61
    4430:	fe b7       	in	r31, 0x3e	; 62
    4432:	31 96       	adiw	r30, 0x01	; 1
    4434:	8d e4       	ldi	r24, 0x4D	; 77
    4436:	93 e0       	ldi	r25, 0x03	; 3
    4438:	ad b7       	in	r26, 0x3d	; 61
    443a:	be b7       	in	r27, 0x3e	; 62
    443c:	12 96       	adiw	r26, 0x02	; 2
    443e:	9c 93       	st	X, r25
    4440:	8e 93       	st	-X, r24
    4442:	11 97       	sbiw	r26, 0x01	; 1
    4444:	80 e2       	ldi	r24, 0x20	; 32
    4446:	94 e2       	ldi	r25, 0x24	; 36
    4448:	93 83       	std	Z+3, r25	; 0x03
    444a:	82 83       	std	Z+2, r24	; 0x02
    444c:	c8 01       	movw	r24, r16
    444e:	85 54       	subi	r24, 0x45	; 69
    4450:	9a 4f       	sbci	r25, 0xFA	; 250
    4452:	95 83       	std	Z+5, r25	; 0x05
    4454:	84 83       	std	Z+4, r24	; 0x04
    4456:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>

	     //TermID,FIP_ID,Product
		 sprintf_P(strIslandID,PSTR("%d"),TermID);
    445a:	ed b7       	in	r30, 0x3d	; 61
    445c:	fe b7       	in	r31, 0x3e	; 62
    445e:	31 96       	adiw	r30, 0x01	; 1
    4460:	87 ef       	ldi	r24, 0xF7	; 247
    4462:	98 e0       	ldi	r25, 0x08	; 8
    4464:	ad b7       	in	r26, 0x3d	; 61
    4466:	be b7       	in	r27, 0x3e	; 62
    4468:	12 96       	adiw	r26, 0x02	; 2
    446a:	9c 93       	st	X, r25
    446c:	8e 93       	st	-X, r24
    446e:	11 97       	sbiw	r26, 0x01	; 1
    4470:	8d e1       	ldi	r24, 0x1D	; 29
    4472:	94 e2       	ldi	r25, 0x24	; 36
    4474:	93 83       	std	Z+3, r25	; 0x03
    4476:	82 83       	std	Z+2, r24	; 0x02
    4478:	f4 82       	std	Z+4, r15	; 0x04
    447a:	15 82       	std	Z+5, r1	; 0x05
    447c:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
		 sprintf_P(strFIP_ID,PSTR("%.2d"),xPumpID);
    4480:	ed b7       	in	r30, 0x3d	; 61
    4482:	fe b7       	in	r31, 0x3e	; 62
    4484:	31 96       	adiw	r30, 0x01	; 1
    4486:	89 eb       	ldi	r24, 0xB9	; 185
    4488:	97 e0       	ldi	r25, 0x07	; 7
    448a:	ad b7       	in	r26, 0x3d	; 61
    448c:	be b7       	in	r27, 0x3e	; 62
    448e:	12 96       	adiw	r26, 0x02	; 2
    4490:	9c 93       	st	X, r25
    4492:	8e 93       	st	-X, r24
    4494:	11 97       	sbiw	r26, 0x01	; 1
    4496:	88 e1       	ldi	r24, 0x18	; 24
    4498:	94 e2       	ldi	r25, 0x24	; 36
    449a:	93 83       	std	Z+3, r25	; 0x03
    449c:	82 83       	std	Z+2, r24	; 0x02
    449e:	e4 82       	std	Z+4, r14	; 0x04
    44a0:	15 82       	std	Z+5, r1	; 0x05
    44a2:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	     sprintf_P(strDescription,PSTR("%s"),ProductName);
    44a6:	ed b7       	in	r30, 0x3d	; 61
    44a8:	fe b7       	in	r31, 0x3e	; 62
    44aa:	31 96       	adiw	r30, 0x01	; 1
    44ac:	8c e0       	ldi	r24, 0x0C	; 12
    44ae:	98 e0       	ldi	r25, 0x08	; 8
    44b0:	ad b7       	in	r26, 0x3d	; 61
    44b2:	be b7       	in	r27, 0x3e	; 62
    44b4:	12 96       	adiw	r26, 0x02	; 2
    44b6:	9c 93       	st	X, r25
    44b8:	8e 93       	st	-X, r24
    44ba:	11 97       	sbiw	r26, 0x01	; 1
    44bc:	85 e1       	ldi	r24, 0x15	; 21
    44be:	94 e2       	ldi	r25, 0x24	; 36
    44c0:	93 83       	std	Z+3, r25	; 0x03
    44c2:	82 83       	std	Z+2, r24	; 0x02
    44c4:	ce 01       	movw	r24, r28
    44c6:	01 96       	adiw	r24, 0x01	; 1
    44c8:	95 83       	std	Z+5, r25	; 0x05
    44ca:	84 83       	std	Z+4, r24	; 0x04
    44cc:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>

		 //Price Volume Money
		 sprintf_P(strPrice,PSTR("%s"),RecPumpData[FIPAddr].Price);
    44d0:	ed b7       	in	r30, 0x3d	; 61
    44d2:	fe b7       	in	r31, 0x3e	; 62
    44d4:	31 96       	adiw	r30, 0x01	; 1
    44d6:	8e e9       	ldi	r24, 0x9E	; 158
    44d8:	95 e0       	ldi	r25, 0x05	; 5
    44da:	ad b7       	in	r26, 0x3d	; 61
    44dc:	be b7       	in	r27, 0x3e	; 62
    44de:	12 96       	adiw	r26, 0x02	; 2
    44e0:	9c 93       	st	X, r25
    44e2:	8e 93       	st	-X, r24
    44e4:	11 97       	sbiw	r26, 0x01	; 1
    44e6:	82 e1       	ldi	r24, 0x12	; 18
    44e8:	94 e2       	ldi	r25, 0x24	; 36
    44ea:	93 83       	std	Z+3, r25	; 0x03
    44ec:	82 83       	std	Z+2, r24	; 0x02
    44ee:	c8 01       	movw	r24, r16
    44f0:	8c 53       	subi	r24, 0x3C	; 60
    44f2:	9a 4f       	sbci	r25, 0xFA	; 250
    44f4:	95 83       	std	Z+5, r25	; 0x05
    44f6:	84 83       	std	Z+4, r24	; 0x04
    44f8:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	     sprintf_P(strVolume,PSTR("%s"),RecPumpData[FIPAddr].Volume);
    44fc:	ed b7       	in	r30, 0x3d	; 61
    44fe:	fe b7       	in	r31, 0x3e	; 62
    4500:	31 96       	adiw	r30, 0x01	; 1
    4502:	85 e7       	ldi	r24, 0x75	; 117
    4504:	93 e0       	ldi	r25, 0x03	; 3
    4506:	ad b7       	in	r26, 0x3d	; 61
    4508:	be b7       	in	r27, 0x3e	; 62
    450a:	12 96       	adiw	r26, 0x02	; 2
    450c:	9c 93       	st	X, r25
    450e:	8e 93       	st	-X, r24
    4510:	11 97       	sbiw	r26, 0x01	; 1
    4512:	8f e0       	ldi	r24, 0x0F	; 15
    4514:	94 e2       	ldi	r25, 0x24	; 36
    4516:	93 83       	std	Z+3, r25	; 0x03
    4518:	82 83       	std	Z+2, r24	; 0x02
    451a:	c8 01       	movw	r24, r16
    451c:	85 53       	subi	r24, 0x35	; 53
    451e:	9a 4f       	sbci	r25, 0xFA	; 250
    4520:	95 83       	std	Z+5, r25	; 0x05
    4522:	84 83       	std	Z+4, r24	; 0x04
    4524:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
		 sprintf_P(strAmount,PSTR("%s"),RecPumpData[FIPAddr].Money);
    4528:	ed b7       	in	r30, 0x3d	; 61
    452a:	fe b7       	in	r31, 0x3e	; 62
    452c:	31 96       	adiw	r30, 0x01	; 1
    452e:	83 eb       	ldi	r24, 0xB3	; 179
    4530:	9b e0       	ldi	r25, 0x0B	; 11
    4532:	ad b7       	in	r26, 0x3d	; 61
    4534:	be b7       	in	r27, 0x3e	; 62
    4536:	12 96       	adiw	r26, 0x02	; 2
    4538:	9c 93       	st	X, r25
    453a:	8e 93       	st	-X, r24
    453c:	11 97       	sbiw	r26, 0x01	; 1
    453e:	8c e0       	ldi	r24, 0x0C	; 12
    4540:	94 e2       	ldi	r25, 0x24	; 36
    4542:	93 83       	std	Z+3, r25	; 0x03
    4544:	82 83       	std	Z+2, r24	; 0x02
    4546:	0c 52       	subi	r16, 0x2C	; 44
    4548:	1a 4f       	sbci	r17, 0xFA	; 250
    454a:	15 83       	std	Z+5, r17	; 0x05
    454c:	04 83       	std	Z+4, r16	; 0x04
    454e:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>

		 MOPType=MOP_CASH;
    4552:	10 92 b8 01 	sts	0x01B8, r1
	     IsPrinting=True;	 
    4556:	81 e0       	ldi	r24, 0x01	; 1
    4558:	80 93 ac 01 	sts	0x01AC, r24
    455c:	ed b7       	in	r30, 0x3d	; 61
    455e:	fe b7       	in	r31, 0x3e	; 62
    4560:	36 96       	adiw	r30, 0x06	; 6
    4562:	0f b6       	in	r0, 0x3f	; 63
    4564:	f8 94       	cli
    4566:	fe bf       	out	0x3e, r31	; 62
    4568:	0f be       	out	0x3f, r0	; 63
    456a:	ed bf       	out	0x3d, r30	; 61
	 }
	 //ProductName	 
	 //iProdID=PNozzle[RecPumpData[iPumpID].Nozzle];
	 //BAsedOnGrade
   return Result;
}
    456c:	2f 96       	adiw	r28, 0x0f	; 15
    456e:	0f b6       	in	r0, 0x3f	; 63
    4570:	f8 94       	cli
    4572:	de bf       	out	0x3e, r29	; 62
    4574:	0f be       	out	0x3f, r0	; 63
    4576:	cd bf       	out	0x3d, r28	; 61
    4578:	cf 91       	pop	r28
    457a:	df 91       	pop	r29
    457c:	1f 91       	pop	r17
    457e:	0f 91       	pop	r16
    4580:	ff 90       	pop	r15
    4582:	ef 90       	pop	r14
    4584:	df 90       	pop	r13
    4586:	cf 90       	pop	r12
    4588:	08 95       	ret

0000458a <PrintStandalone>:
     char Result=PS_NONE;

   return Result;
}

char PrintStandalone(char FIPAddr,char IsReprint){
    458a:	ef 92       	push	r14
    458c:	ff 92       	push	r15
    458e:	0f 93       	push	r16
    4590:	1f 93       	push	r17
    4592:	df 93       	push	r29
    4594:	cf 93       	push	r28
    4596:	00 d0       	rcall	.+0      	; 0x4598 <PrintStandalone+0xe>
    4598:	00 d0       	rcall	.+0      	; 0x459a <PrintStandalone+0x10>
    459a:	00 d0       	rcall	.+0      	; 0x459c <PrintStandalone+0x12>
    459c:	cd b7       	in	r28, 0x3d	; 61
    459e:	de b7       	in	r29, 0x3e	; 62
    45a0:	f8 2e       	mov	r15, r24
    45a2:	06 2f       	mov	r16, r22
	 char LFIPAddr;
	      
	 Result=PS_NO_DATA;

//	 eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap, 8);
	 iPumpID=GetPumpID(FIPAddr);//PPumpID[FIPAddr-1];
    45a4:	0e 94 84 20 	call	0x4108	; 0x4108 <GetPumpID>
    45a8:	e8 2e       	mov	r14, r24
     LFIPAddr=GetFIPAddr(iPumpID);
    45aa:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <GetFIPAddr>
    45ae:	18 2f       	mov	r17, r24

     if (LFIPAddr>0){
    45b0:	88 23       	and	r24, r24
    45b2:	89 f1       	breq	.+98     	; 0x4616 <PrintStandalone+0x8c>
	     LFIPAddr=LFIPAddr-1;
	     if ((IsReprint==True)||(iPumpID>0)&&(strPumpStatus[LFIPAddr]==GetPumpStatusLabel(PS_PRINT_READY))){    	 
    45b4:	01 30       	cpi	r16, 0x01	; 1
    45b6:	69 f0       	breq	.+26     	; 0x45d2 <PrintStandalone+0x48>
    45b8:	ee 20       	and	r14, r14
    45ba:	69 f1       	breq	.+90     	; 0x4616 <PrintStandalone+0x8c>
    45bc:	80 e1       	ldi	r24, 0x10	; 16
    45be:	0e 94 3e 14 	call	0x287c	; 0x287c <GetPumpStatusLabel>
    45c2:	11 50       	subi	r17, 0x01	; 1
    45c4:	e1 2f       	mov	r30, r17
    45c6:	f0 e0       	ldi	r31, 0x00	; 0
    45c8:	ee 5f       	subi	r30, 0xFE	; 254
    45ca:	fe 4f       	sbci	r31, 0xFE	; 254
    45cc:	90 81       	ld	r25, Z
    45ce:	98 17       	cp	r25, r24
    45d0:	11 f5       	brne	.+68     	; 0x4616 <PrintStandalone+0x8c>
		     eeprom_read_block((void*) &PProductID, (const void*) &DefNozzleMap[FIPAddr-1], 6);		 
    45d2:	66 e0       	ldi	r22, 0x06	; 6
    45d4:	f6 9e       	mul	r15, r22
    45d6:	b0 01       	movw	r22, r0
    45d8:	11 24       	eor	r1, r1
    45da:	61 5b       	subi	r22, 0xB1	; 177
    45dc:	7f 4f       	sbci	r23, 0xFF	; 255
    45de:	ce 01       	movw	r24, r28
    45e0:	01 96       	adiw	r24, 0x01	; 1
    45e2:	46 e0       	ldi	r20, 0x06	; 6
    45e4:	50 e0       	ldi	r21, 0x00	; 0
    45e6:	0e 94 b9 ac 	call	0x15972	; 0x15972 <__eerd_block_m128>
		     if (((ReprintReady[FIPAddr-1]==True))||(IsReprint==False)){
    45ea:	ef 2d       	mov	r30, r15
    45ec:	f0 e0       	ldi	r31, 0x00	; 0
    45ee:	ee 5e       	subi	r30, 0xEE	; 238
    45f0:	fe 4f       	sbci	r31, 0xFE	; 254
    45f2:	80 81       	ld	r24, Z
    45f4:	81 30       	cpi	r24, 0x01	; 1
    45f6:	19 f0       	breq	.+6      	; 0x45fe <PrintStandalone+0x74>
    45f8:	00 23       	and	r16, r16
    45fa:	29 f0       	breq	.+10     	; 0x4606 <PrintStandalone+0x7c>
    45fc:	0c c0       	rjmp	.+24     	; 0x4616 <PrintStandalone+0x8c>
			       if (IsReprint==True)IsReprintTicket=True;
    45fe:	01 30       	cpi	r16, 0x01	; 1
    4600:	11 f4       	brne	.+4      	; 0x4606 <PrintStandalone+0x7c>
    4602:	00 93 7f 01 	sts	0x017F, r16
			       GenerateStandaloneTransData(iPumpID,PProductID);		 			   
    4606:	8e 2d       	mov	r24, r14
    4608:	be 01       	movw	r22, r28
    460a:	6f 5f       	subi	r22, 0xFF	; 255
    460c:	7f 4f       	sbci	r23, 0xFF	; 255
    460e:	0e 94 76 21 	call	0x42ec	; 0x42ec <GenerateStandaloneTransData>
    4612:	81 e1       	ldi	r24, 0x11	; 17
    4614:	01 c0       	rjmp	.+2      	; 0x4618 <PrintStandalone+0x8e>
    4616:	82 e1       	ldi	r24, 0x12	; 18
			 }//else Result=PS_NO_DATA;
		 }
		 //else Result=PS_NO_DATA;    		    
	 }	
   return Result;
}
    4618:	26 96       	adiw	r28, 0x06	; 6
    461a:	0f b6       	in	r0, 0x3f	; 63
    461c:	f8 94       	cli
    461e:	de bf       	out	0x3e, r29	; 62
    4620:	0f be       	out	0x3f, r0	; 63
    4622:	cd bf       	out	0x3d, r28	; 61
    4624:	cf 91       	pop	r28
    4626:	df 91       	pop	r29
    4628:	1f 91       	pop	r17
    462a:	0f 91       	pop	r16
    462c:	ff 90       	pop	r15
    462e:	ef 90       	pop	r14
    4630:	08 95       	ret

00004632 <SumChecksum>:
	Geniflow[1]=Geniflow[0];
	Geniflow[0]=dataIn;
*/
}

char SumChecksum(char *strChecked){
    4632:	ac 01       	movw	r20, r24
     unsigned int SigmaSum=0;
	 char i,Result;
	 for(i=0;i<strlen(strChecked);i++){
    4634:	dc 01       	movw	r26, r24
    4636:	0d 90       	ld	r0, X+
    4638:	00 20       	and	r0, r0
    463a:	e9 f7       	brne	.-6      	; 0x4636 <SumChecksum+0x4>
    463c:	11 97       	sbiw	r26, 0x01	; 1
    463e:	a8 1b       	sub	r26, r24
    4640:	b9 0b       	sbc	r27, r25
    4642:	20 e0       	ldi	r18, 0x00	; 0
    4644:	30 e0       	ldi	r19, 0x00	; 0
    4646:	90 e0       	ldi	r25, 0x00	; 0
    4648:	06 c0       	rjmp	.+12     	; 0x4656 <SumChecksum+0x24>
	     SigmaSum=SigmaSum+strChecked[i];
    464a:	e4 0f       	add	r30, r20
    464c:	f5 1f       	adc	r31, r21
    464e:	80 81       	ld	r24, Z
    4650:	28 0f       	add	r18, r24
    4652:	31 1d       	adc	r19, r1
}

char SumChecksum(char *strChecked){
     unsigned int SigmaSum=0;
	 char i,Result;
	 for(i=0;i<strlen(strChecked);i++){
    4654:	9f 5f       	subi	r25, 0xFF	; 255
    4656:	e9 2f       	mov	r30, r25
    4658:	f0 e0       	ldi	r31, 0x00	; 0
    465a:	ea 17       	cp	r30, r26
    465c:	fb 07       	cpc	r31, r27
    465e:	a8 f3       	brcs	.-22     	; 0x464a <SumChecksum+0x18>
	     SigmaSum=SigmaSum+strChecked[i];
	 }
	 Result=(SigmaSum%255);
    4660:	c9 01       	movw	r24, r18
    4662:	6f ef       	ldi	r22, 0xFF	; 255
    4664:	70 e0       	ldi	r23, 0x00	; 0
    4666:	0e 94 03 aa 	call	0x15406	; 0x15406 <__udivmodhi4>
	 if (Result==0)Result=255;
    466a:	88 23       	and	r24, r24
    466c:	09 f4       	brne	.+2      	; 0x4670 <SumChecksum+0x3e>
    466e:	8f ef       	ldi	r24, 0xFF	; 255
   return Result;
}
    4670:	08 95       	ret

00004672 <IsGeniusCommand>:
	 sprintf_P(strSend,PSTR("%s"),sCSum);
	 uart_print(1,1,strSend);
*/
}

char IsGeniusCommand(char GCommand){
    4672:	ff 92       	push	r15
    4674:	0f 93       	push	r16
    4676:	1f 93       	push	r17
    4678:	df 93       	push	r29
    467a:	cf 93       	push	r28
    467c:	cd b7       	in	r28, 0x3d	; 61
    467e:	de b7       	in	r29, 0x3e	; 62
    4680:	2a 97       	sbiw	r28, 0x0a	; 10
    4682:	0f b6       	in	r0, 0x3f	; 63
    4684:	f8 94       	cli
    4686:	de bf       	out	0x3e, r29	; 62
    4688:	0f be       	out	0x3f, r0	; 63
    468a:	cd bf       	out	0x3d, r28	; 61
    468c:	f8 2e       	mov	r15, r24
     char i,Result,CommandList[10];
     Result=False;
	 sprintf_P(CommandList,PSTR("CTSRP"));
    468e:	00 d0       	rcall	.+0      	; 0x4690 <IsGeniusCommand+0x1e>
    4690:	00 d0       	rcall	.+0      	; 0x4692 <IsGeniusCommand+0x20>
    4692:	8e 01       	movw	r16, r28
    4694:	0f 5f       	subi	r16, 0xFF	; 255
    4696:	1f 4f       	sbci	r17, 0xFF	; 255
    4698:	ed b7       	in	r30, 0x3d	; 61
    469a:	fe b7       	in	r31, 0x3e	; 62
    469c:	12 83       	std	Z+2, r17	; 0x02
    469e:	01 83       	std	Z+1, r16	; 0x01
    46a0:	87 e5       	ldi	r24, 0x57	; 87
    46a2:	95 e0       	ldi	r25, 0x05	; 5
    46a4:	94 83       	std	Z+4, r25	; 0x04
    46a6:	83 83       	std	Z+3, r24	; 0x03
    46a8:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	 for(i=0;i<strlen(CommandList);i++){
    46ac:	d8 01       	movw	r26, r16
    46ae:	0d 90       	ld	r0, X+
    46b0:	00 20       	and	r0, r0
    46b2:	e9 f7       	brne	.-6      	; 0x46ae <IsGeniusCommand+0x3c>
    46b4:	11 97       	sbiw	r26, 0x01	; 1
    46b6:	a0 1b       	sub	r26, r16
    46b8:	b1 0b       	sbc	r27, r17
    46ba:	90 e0       	ldi	r25, 0x00	; 0
    46bc:	0f 90       	pop	r0
    46be:	0f 90       	pop	r0
    46c0:	0f 90       	pop	r0
    46c2:	0f 90       	pop	r0
	    if (CommandList[i]==GCommand){
    46c4:	98 01       	movw	r18, r16
    46c6:	08 c0       	rjmp	.+16     	; 0x46d8 <IsGeniusCommand+0x66>
    46c8:	e2 0f       	add	r30, r18
    46ca:	f3 1f       	adc	r31, r19
    46cc:	80 81       	ld	r24, Z
    46ce:	8f 15       	cp	r24, r15
    46d0:	11 f4       	brne	.+4      	; 0x46d6 <IsGeniusCommand+0x64>
    46d2:	81 e0       	ldi	r24, 0x01	; 1
    46d4:	07 c0       	rjmp	.+14     	; 0x46e4 <IsGeniusCommand+0x72>

char IsGeniusCommand(char GCommand){
     char i,Result,CommandList[10];
     Result=False;
	 sprintf_P(CommandList,PSTR("CTSRP"));
	 for(i=0;i<strlen(CommandList);i++){
    46d6:	9f 5f       	subi	r25, 0xFF	; 255
    46d8:	e9 2f       	mov	r30, r25
    46da:	f0 e0       	ldi	r31, 0x00	; 0
    46dc:	ea 17       	cp	r30, r26
    46de:	fb 07       	cpc	r31, r27
    46e0:	98 f3       	brcs	.-26     	; 0x46c8 <IsGeniusCommand+0x56>
    46e2:	80 e0       	ldi	r24, 0x00	; 0
		    Result=True;
			break;
			}
	 }
   return Result;	 
}
    46e4:	2a 96       	adiw	r28, 0x0a	; 10
    46e6:	0f b6       	in	r0, 0x3f	; 63
    46e8:	f8 94       	cli
    46ea:	de bf       	out	0x3e, r29	; 62
    46ec:	0f be       	out	0x3f, r0	; 63
    46ee:	cd bf       	out	0x3d, r28	; 61
    46f0:	cf 91       	pop	r28
    46f2:	df 91       	pop	r29
    46f4:	1f 91       	pop	r17
    46f6:	0f 91       	pop	r16
    46f8:	ff 90       	pop	r15
    46fa:	08 95       	ret

000046fc <Pos>:
  */
}
		

//Genius Protocol Version:1.0 AKR
int Pos(char *Substr, char *String){//1245:4645
    46fc:	0f 93       	push	r16
    46fe:	1f 93       	push	r17
    4700:	cf 93       	push	r28
    4702:	df 93       	push	r29
    4704:	ac 01       	movw	r20, r24
    char i,j,CountMatch;
	char Length,subLen,PosFound;

	Length=strlen(String);
    4706:	fb 01       	movw	r30, r22
    4708:	01 90       	ld	r0, Z+
    470a:	00 20       	and	r0, r0
    470c:	e9 f7       	brne	.-6      	; 0x4708 <Pos+0xc>
    470e:	31 97       	sbiw	r30, 0x01	; 1
    4710:	1e 2f       	mov	r17, r30
    4712:	16 1b       	sub	r17, r22
	subLen=strlen(Substr);
    4714:	fc 01       	movw	r30, r24
    4716:	01 90       	ld	r0, Z+
    4718:	00 20       	and	r0, r0
    471a:	e9 f7       	brne	.-6      	; 0x4716 <Pos+0x1a>
    471c:	31 97       	sbiw	r30, 0x01	; 1
    471e:	0e 2f       	mov	r16, r30
    4720:	08 1b       	sub	r16, r24
    4722:	db 01       	movw	r26, r22
    4724:	60 e0       	ldi	r22, 0x00	; 0
    4726:	18 c0       	rjmp	.+48     	; 0x4758 <Pos+0x5c>
	PosFound=Length;
	for(i=0;i<Length;i++){
	    if (String[i]==Substr[0]){
    4728:	9c 91       	ld	r25, X
    472a:	fa 01       	movw	r30, r20
    472c:	80 81       	ld	r24, Z
    472e:	98 17       	cp	r25, r24
    4730:	89 f4       	brne	.+34     	; 0x4754 <Pos+0x58>
    4732:	ed 01       	movw	r28, r26
    4734:	20 e0       	ldi	r18, 0x00	; 0
    4736:	30 e0       	ldi	r19, 0x00	; 0
    4738:	09 c0       	rjmp	.+18     	; 0x474c <Pos+0x50>
		    CountMatch=0;
			for(j=0;j<subLen;j++){
			    //notFound
			    if (Substr[j]==String[i+j]){
    473a:	fa 01       	movw	r30, r20
    473c:	e2 0f       	add	r30, r18
    473e:	f3 1f       	adc	r31, r19
    4740:	90 81       	ld	r25, Z
    4742:	89 91       	ld	r24, Y+
    4744:	2f 5f       	subi	r18, 0xFF	; 255
    4746:	3f 4f       	sbci	r19, 0xFF	; 255
    4748:	98 17       	cp	r25, r24
    474a:	21 f4       	brne	.+8      	; 0x4754 <Pos+0x58>
	subLen=strlen(Substr);
	PosFound=Length;
	for(i=0;i<Length;i++){
	    if (String[i]==Substr[0]){
		    CountMatch=0;
			for(j=0;j<subLen;j++){
    474c:	20 17       	cp	r18, r16
    474e:	a8 f3       	brcs	.-22     	; 0x473a <Pos+0x3e>
    4750:	86 2f       	mov	r24, r22
    4752:	05 c0       	rjmp	.+10     	; 0x475e <Pos+0x62>
	char Length,subLen,PosFound;

	Length=strlen(String);
	subLen=strlen(Substr);
	PosFound=Length;
	for(i=0;i<Length;i++){
    4754:	6f 5f       	subi	r22, 0xFF	; 255
    4756:	11 96       	adiw	r26, 0x01	; 1
    4758:	61 17       	cp	r22, r17
    475a:	30 f3       	brcs	.-52     	; 0x4728 <Pos+0x2c>
    475c:	81 2f       	mov	r24, r17
			    break;  
			}
		}
	}
  return  PosFound;
}
    475e:	90 e0       	ldi	r25, 0x00	; 0
    4760:	df 91       	pop	r29
    4762:	cf 91       	pop	r28
    4764:	1f 91       	pop	r17
    4766:	0f 91       	pop	r16
    4768:	08 95       	ret

0000476a <CreateReport>:
//		  }
//	 }
     *Pos=iPos;
}

void CreateReport(char *strData, char *strPrnBuffer, unsigned int *Pos){
    476a:	7f 92       	push	r7
    476c:	8f 92       	push	r8
    476e:	9f 92       	push	r9
    4770:	af 92       	push	r10
    4772:	bf 92       	push	r11
    4774:	cf 92       	push	r12
    4776:	df 92       	push	r13
    4778:	ef 92       	push	r14
    477a:	ff 92       	push	r15
    477c:	0f 93       	push	r16
    477e:	1f 93       	push	r17
    4780:	cf 93       	push	r28
    4782:	df 93       	push	r29
    4784:	5c 01       	movw	r10, r24
    4786:	6b 01       	movw	r12, r22
    4788:	4a 01       	movw	r8, r20
     unsigned int iPos,PosResult,Length;
	 char i,strSend[20];
	 Length=strlen(strData);
    478a:	ec 01       	movw	r28, r24
    478c:	09 90       	ld	r0, Y+
    478e:	00 20       	and	r0, r0
    4790:	e9 f7       	brne	.-6      	; 0x478c <CreateReport+0x22>
    4792:	21 97       	sbiw	r28, 0x01	; 1
    4794:	c8 1b       	sub	r28, r24
    4796:	d9 0b       	sbc	r29, r25
    4798:	cb 32       	cpi	r28, 0x2B	; 43
    479a:	d1 05       	cpc	r29, r1
    479c:	10 f0       	brcs	.+4      	; 0x47a2 <CreateReport+0x38>
    479e:	ca e2       	ldi	r28, 0x2A	; 42
    47a0:	d0 e0       	ldi	r29, 0x00	; 0
	 if (Length>BORDER_LENGTH)Length=BORDER_LENGTH;
     
	 iPos=*Pos;
    47a2:	f4 01       	movw	r30, r8
    47a4:	00 81       	ld	r16, Z
    47a6:	11 81       	ldd	r17, Z+1	; 0x01
	 strPrnBuffer[iPos]=GetBorderValue(btVertical);
    47a8:	76 01       	movw	r14, r12
    47aa:	e0 0e       	add	r14, r16
    47ac:	f1 1e       	adc	r15, r17
    47ae:	8a e0       	ldi	r24, 0x0A	; 10
    47b0:	0e 94 45 1a 	call	0x348a	; 0x348a <GetBorderValue>
    47b4:	78 2e       	mov	r7, r24
    47b6:	f7 01       	movw	r30, r14
    47b8:	80 83       	st	Z, r24
     iPos++;
    47ba:	98 01       	movw	r18, r16
    47bc:	2f 5f       	subi	r18, 0xFF	; 255
    47be:	3f 4f       	sbci	r19, 0xFF	; 255
    47c0:	d7 01       	movw	r26, r14
    47c2:	90 e0       	ldi	r25, 0x00	; 0
    47c4:	07 c0       	rjmp	.+14     	; 0x47d4 <CreateReport+0x6a>

	 for (i=0;i<Length;i++){	      
	      strPrnBuffer[iPos]=strData[i];	      	 
    47c6:	ea 0d       	add	r30, r10
    47c8:	fb 1d       	adc	r31, r11
    47ca:	80 81       	ld	r24, Z
    47cc:	8c 93       	st	X, r24
		  iPos++;
    47ce:	2f 5f       	subi	r18, 0xFF	; 255
    47d0:	3f 4f       	sbci	r19, 0xFF	; 255
     
	 iPos=*Pos;
	 strPrnBuffer[iPos]=GetBorderValue(btVertical);
     iPos++;

	 for (i=0;i<Length;i++){	      
    47d2:	9f 5f       	subi	r25, 0xFF	; 255
    47d4:	e9 2f       	mov	r30, r25
    47d6:	f0 e0       	ldi	r31, 0x00	; 0
    47d8:	11 96       	adiw	r26, 0x01	; 1
    47da:	ec 17       	cp	r30, r28
    47dc:	fd 07       	cpc	r31, r29
    47de:	98 f3       	brcs	.-26     	; 0x47c6 <CreateReport+0x5c>
    47e0:	62 2f       	mov	r22, r18
	      strPrnBuffer[iPos]=strData[i];	      	 
		  iPos++;
	 }
	 if (Length<BORDER_LENGTH){
    47e2:	ca 32       	cpi	r28, 0x2A	; 42
    47e4:	d1 05       	cpc	r29, r1
    47e6:	91 f0       	breq	.+36     	; 0x480c <CreateReport+0xa2>
    47e8:	f6 01       	movw	r30, r12
    47ea:	e2 0f       	add	r30, r18
    47ec:	f3 1f       	adc	r31, r19
	     for (i=0;i<(BORDER_LENGTH-Length);i++){	      
    47ee:	4a e2       	ldi	r20, 0x2A	; 42
    47f0:	50 e0       	ldi	r21, 0x00	; 0
    47f2:	4c 1b       	sub	r20, r28
    47f4:	5d 0b       	sbc	r21, r29
	          strPrnBuffer[iPos]=' ';
    47f6:	70 e2       	ldi	r23, 0x20	; 32
    47f8:	03 c0       	rjmp	.+6      	; 0x4800 <CreateReport+0x96>
    47fa:	71 93       	st	Z+, r23
		      iPos++;
    47fc:	2f 5f       	subi	r18, 0xFF	; 255
    47fe:	3f 4f       	sbci	r19, 0xFF	; 255
	 for (i=0;i<Length;i++){	      
	      strPrnBuffer[iPos]=strData[i];	      	 
		  iPos++;
	 }
	 if (Length<BORDER_LENGTH){
	     for (i=0;i<(BORDER_LENGTH-Length);i++){	      
    4800:	82 2f       	mov	r24, r18
    4802:	86 1b       	sub	r24, r22
    4804:	90 e0       	ldi	r25, 0x00	; 0
    4806:	84 17       	cp	r24, r20
    4808:	95 07       	cpc	r25, r21
    480a:	b8 f3       	brcs	.-18     	; 0x47fa <CreateReport+0x90>
	          strPrnBuffer[iPos]=' ';
		      iPos++;
	     }	    
	 }
	 strPrnBuffer[iPos]=GetBorderValue(btVertical);
    480c:	f6 01       	movw	r30, r12
    480e:	e2 0f       	add	r30, r18
    4810:	f3 1f       	adc	r31, r19
    4812:	70 82       	st	Z, r7
     iPos++;
    4814:	c9 01       	movw	r24, r18
    4816:	01 96       	adiw	r24, 0x01	; 1
     //PosResult=*Pos+Length;
	 strPrnBuffer[iPos]=0x0D; 
    4818:	c8 0e       	add	r12, r24
    481a:	d9 1e       	adc	r13, r25
    481c:	2d e0       	ldi	r18, 0x0D	; 13
    481e:	f6 01       	movw	r30, r12
    4820:	20 83       	st	Z, r18
	 iPos++;

   //*Pos=PosResult+1;
   *Pos=iPos;
    4822:	01 96       	adiw	r24, 0x01	; 1
    4824:	f4 01       	movw	r30, r8
    4826:	91 83       	std	Z+1, r25	; 0x01
    4828:	80 83       	st	Z, r24
    //sprintf_P(strSend,PSTR("Pos:%d"),*Pos);
	//uart_print(0,1,strSend);
}
    482a:	df 91       	pop	r29
    482c:	cf 91       	pop	r28
    482e:	1f 91       	pop	r17
    4830:	0f 91       	pop	r16
    4832:	ff 90       	pop	r15
    4834:	ef 90       	pop	r14
    4836:	df 90       	pop	r13
    4838:	cf 90       	pop	r12
    483a:	bf 90       	pop	r11
    483c:	af 90       	pop	r10
    483e:	9f 90       	pop	r9
    4840:	8f 90       	pop	r8
    4842:	7f 90       	pop	r7
    4844:	08 95       	ret

00004846 <AddList>:

//AddListTotal(xGrade,strRef1);
void ClearList(char *strList){
     FillChar(strList,strlen(strList),0);
}
void AddList(char GradeId, char *strList){
    4846:	38 2f       	mov	r19, r24
    4848:	ab 01       	movw	r20, r22
     char i,iPos,Length,IsFound=False;	 
	 if ((GradeId>=1)&&((GradeId<=6))){
    484a:	81 50       	subi	r24, 0x01	; 1
    484c:	86 30       	cpi	r24, 0x06	; 6
    484e:	68 f5       	brcc	.+90     	; 0x48aa <AddList+0x64>
		 iPos=0;
		 IsFound=False;	
		 Length=strlen(strList);
    4850:	fb 01       	movw	r30, r22
    4852:	01 90       	ld	r0, Z+
    4854:	00 20       	and	r0, r0
    4856:	e9 f7       	brne	.-6      	; 0x4852 <AddList+0xc>
    4858:	31 97       	sbiw	r30, 0x01	; 1
    485a:	e6 1b       	sub	r30, r22
    485c:	f7 0b       	sbc	r31, r23
    485e:	7e 2f       	mov	r23, r30
	     if (Length>0){
    4860:	ee 23       	and	r30, r30
    4862:	11 f4       	brne	.+4      	; 0x4868 <AddList+0x22>
    4864:	20 e0       	ldi	r18, 0x00	; 0
    4866:	14 c0       	rjmp	.+40     	; 0x4890 <AddList+0x4a>
    4868:	80 e0       	ldi	r24, 0x00	; 0
    486a:	90 e0       	ldi	r25, 0x00	; 0
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
	    Result='0'+X;
    486c:	63 2f       	mov	r22, r19
    486e:	60 5d       	subi	r22, 0xD0	; 208
		 Length=strlen(strList);
	     if (Length>0){
			 for (i=0;i<Length;i++){//"123"
			      //uart(1,1,strList[i]);
			      iPos++;
			      if (strList[i]==Chr(GradeId)){
    4870:	fa 01       	movw	r30, r20
    4872:	e8 0f       	add	r30, r24
    4874:	f9 1f       	adc	r31, r25
    4876:	e0 81       	ld	r30, Z
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
    4878:	3a 30       	cpi	r19, 0x0A	; 10
    487a:	10 f0       	brcs	.+4      	; 0x4880 <AddList+0x3a>
    487c:	20 e3       	ldi	r18, 0x30	; 48
    487e:	01 c0       	rjmp	.+2      	; 0x4882 <AddList+0x3c>
	    Result='0'+X;
    4880:	26 2f       	mov	r18, r22
		 Length=strlen(strList);
	     if (Length>0){
			 for (i=0;i<Length;i++){//"123"
			      //uart(1,1,strList[i]);
			      iPos++;
			      if (strList[i]==Chr(GradeId)){
    4882:	e2 17       	cp	r30, r18
    4884:	91 f0       	breq	.+36     	; 0x48aa <AddList+0x64>
    4886:	28 2f       	mov	r18, r24
    4888:	2f 5f       	subi	r18, 0xFF	; 255
    488a:	01 96       	adiw	r24, 0x01	; 1
	 if ((GradeId>=1)&&((GradeId<=6))){
		 iPos=0;
		 IsFound=False;	
		 Length=strlen(strList);
	     if (Length>0){
			 for (i=0;i<Length;i++){//"123"
    488c:	87 17       	cp	r24, r23
    488e:	80 f3       	brcs	.-32     	; 0x4870 <AddList+0x2a>
					  break;
				  }
			 }
	     }
		 if (IsFound==False){
		     strList[iPos]=Chr(GradeId);
    4890:	62 2f       	mov	r22, r18
    4892:	70 e0       	ldi	r23, 0x00	; 0
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
    4894:	3a 30       	cpi	r19, 0x0A	; 10
    4896:	10 f0       	brcs	.+4      	; 0x489c <AddList+0x56>
    4898:	80 e3       	ldi	r24, 0x30	; 48
    489a:	02 c0       	rjmp	.+4      	; 0x48a0 <AddList+0x5a>
	    Result='0'+X;
    489c:	83 2f       	mov	r24, r19
    489e:	80 5d       	subi	r24, 0xD0	; 208
					  break;
				  }
			 }
	     }
		 if (IsFound==False){
		     strList[iPos]=Chr(GradeId);
    48a0:	fa 01       	movw	r30, r20
    48a2:	e6 0f       	add	r30, r22
    48a4:	f7 1f       	adc	r31, r23
    48a6:	80 83       	st	Z, r24
		     strList[iPos+1]=0;
    48a8:	11 82       	std	Z+1, r1	; 0x01
    48aa:	08 95       	ret

000048ac <ClearList>:
	 AddSpaceLag(strProductName,10);
}

//AddListTotal(xGrade,strRef1);
void ClearList(char *strList){
     FillChar(strList,strlen(strList),0);
    48ac:	dc 01       	movw	r26, r24
    48ae:	0d 90       	ld	r0, X+
    48b0:	00 20       	and	r0, r0
    48b2:	e9 f7       	brne	.-6      	; 0x48ae <ClearList+0x2>
    48b4:	11 97       	sbiw	r26, 0x01	; 1
    48b6:	a8 1b       	sub	r26, r24
    48b8:	b9 0b       	sbc	r27, r25
    48ba:	20 e0       	ldi	r18, 0x00	; 0
    48bc:	30 e0       	ldi	r19, 0x00	; 0
    48be:	06 c0       	rjmp	.+12     	; 0x48cc <ClearList+0x20>
}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
	     strMemory[i]=data;
    48c0:	fc 01       	movw	r30, r24
    48c2:	e2 0f       	add	r30, r18
    48c4:	f3 1f       	adc	r31, r19
    48c6:	10 82       	st	Z, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    48c8:	2f 5f       	subi	r18, 0xFF	; 255
    48ca:	3f 4f       	sbci	r19, 0xFF	; 255
    48cc:	2a 17       	cp	r18, r26
    48ce:	3b 07       	cpc	r19, r27
    48d0:	b8 f3       	brcs	.-18     	; 0x48c0 <ClearList+0x14>
}

//AddListTotal(xGrade,strRef1);
void ClearList(char *strList){
     FillChar(strList,strlen(strList),0);
}
    48d2:	08 95       	ret

000048d4 <CalcSegmen>:
		 */
		 CalcMultiply(strA,strB,strC);
	 }
}

void CalcSegmen(char *strMain, char cNum, char *strResult){
    48d4:	6f 92       	push	r6
    48d6:	7f 92       	push	r7
    48d8:	8f 92       	push	r8
    48da:	9f 92       	push	r9
    48dc:	bf 92       	push	r11
    48de:	cf 92       	push	r12
    48e0:	df 92       	push	r13
    48e2:	ef 92       	push	r14
    48e4:	ff 92       	push	r15
    48e6:	0f 93       	push	r16
    48e8:	1f 93       	push	r17
    48ea:	df 93       	push	r29
    48ec:	cf 93       	push	r28
    48ee:	cd b7       	in	r28, 0x3d	; 61
    48f0:	de b7       	in	r29, 0x3e	; 62
    48f2:	64 97       	sbiw	r28, 0x14	; 20
    48f4:	0f b6       	in	r0, 0x3f	; 63
    48f6:	f8 94       	cli
    48f8:	de bf       	out	0x3e, r29	; 62
    48fa:	0f be       	out	0x3f, r0	; 63
    48fc:	cd bf       	out	0x3d, r28	; 61
    48fe:	7c 01       	movw	r14, r24
    4900:	6a 01       	movw	r12, r20
    4902:	bb 24       	eor	r11, r11
    4904:	30 e0       	ldi	r19, 0x00	; 0

	 xResNext=0;
     xRes=0;

	 for(i=0;i<strlen(strMain);i++){           
         xCalc=(strMain[strlen(strMain)-1-i]-'0')*(cNum-'0')+xResNext;//Hasil
    4906:	06 2f       	mov	r16, r22
    4908:	10 e0       	ldi	r17, 0x00	; 0
    490a:	00 53       	subi	r16, 0x30	; 48
    490c:	10 40       	sbci	r17, 0x00	; 0
		 xRes=xCalc%10;
		 xResNext=xCalc/10;
	     tmpResult[i]='0'+xRes;	 
    490e:	3e 01       	movw	r6, r28
    4910:	08 94       	sec
    4912:	61 1c       	adc	r6, r1
    4914:	71 1c       	adc	r7, r1
		 tmpResult[i+1]=0;
    4916:	62 e0       	ldi	r22, 0x02	; 2
    4918:	86 2e       	mov	r8, r22
    491a:	91 2c       	mov	r9, r1
    491c:	8c 0e       	add	r8, r28
    491e:	9d 1e       	adc	r9, r29
    4920:	24 c0       	rjmp	.+72     	; 0x496a <CalcSegmen+0x96>

	 xResNext=0;
     xRes=0;

	 for(i=0;i<strlen(strMain);i++){           
         xCalc=(strMain[strlen(strMain)-1-i]-'0')*(cNum-'0')+xResNext;//Hasil
    4922:	11 97       	sbiw	r26, 0x01	; 1
    4924:	a4 1b       	sub	r26, r20
    4926:	b5 0b       	sbc	r27, r21
    4928:	ae 0d       	add	r26, r14
    492a:	bf 1d       	adc	r27, r15
    492c:	8c 91       	ld	r24, X
    492e:	90 e0       	ldi	r25, 0x00	; 0
    4930:	c0 97       	sbiw	r24, 0x30	; 48
    4932:	bc 01       	movw	r22, r24
    4934:	60 9f       	mul	r22, r16
    4936:	c0 01       	movw	r24, r0
    4938:	61 9f       	mul	r22, r17
    493a:	90 0d       	add	r25, r0
    493c:	70 9f       	mul	r23, r16
    493e:	90 0d       	add	r25, r0
    4940:	11 24       	eor	r1, r1
    4942:	23 2f       	mov	r18, r19
    4944:	28 0f       	add	r18, r24
		 xRes=xCalc%10;
		 xResNext=xCalc/10;
    4946:	82 2f       	mov	r24, r18
    4948:	6a e0       	ldi	r22, 0x0A	; 10
    494a:	0e 94 ea a9 	call	0x153d4	; 0x153d4 <__udivmodqi4>
    494e:	38 2f       	mov	r19, r24
	     tmpResult[i]='0'+xRes;	 
    4950:	f3 01       	movw	r30, r6
    4952:	e4 0f       	add	r30, r20
    4954:	f5 1f       	adc	r31, r21
    4956:	82 2f       	mov	r24, r18
    4958:	0e 94 ea a9 	call	0x153d4	; 0x153d4 <__udivmodqi4>
    495c:	90 5d       	subi	r25, 0xD0	; 208
    495e:	90 83       	st	Z, r25
		 tmpResult[i+1]=0;
    4960:	48 0d       	add	r20, r8
    4962:	59 1d       	adc	r21, r9
    4964:	fa 01       	movw	r30, r20
    4966:	10 82       	st	Z, r1
	 char i,lenR,xCalc,xRes,xResNext,tmpResult[20];

	 xResNext=0;
     xRes=0;

	 for(i=0;i<strlen(strMain);i++){           
    4968:	b3 94       	inc	r11
    496a:	4b 2d       	mov	r20, r11
    496c:	50 e0       	ldi	r21, 0x00	; 0
    496e:	d7 01       	movw	r26, r14
    4970:	0d 90       	ld	r0, X+
    4972:	00 20       	and	r0, r0
    4974:	e9 f7       	brne	.-6      	; 0x4970 <CalcSegmen+0x9c>
    4976:	11 97       	sbiw	r26, 0x01	; 1
    4978:	ae 19       	sub	r26, r14
    497a:	bf 09       	sbc	r27, r15
    497c:	4a 17       	cp	r20, r26
    497e:	5b 07       	cpc	r21, r27
    4980:	80 f2       	brcs	.-96     	; 0x4922 <CalcSegmen+0x4e>
		 xRes=xCalc%10;
		 xResNext=xCalc/10;
	     tmpResult[i]='0'+xRes;	 
		 tmpResult[i+1]=0;
	 }
	 if (xResNext>0){
    4982:	33 23       	and	r19, r19
    4984:	89 f0       	breq	.+34     	; 0x49a8 <CalcSegmen+0xd4>
	     lenR=strlen(tmpResult);
    4986:	fe 01       	movw	r30, r28
    4988:	31 96       	adiw	r30, 0x01	; 1
    498a:	df 01       	movw	r26, r30
    498c:	0d 90       	ld	r0, X+
    498e:	00 20       	and	r0, r0
    4990:	e9 f7       	brne	.-6      	; 0x498c <CalcSegmen+0xb8>
    4992:	11 97       	sbiw	r26, 0x01	; 1
	     tmpResult[lenR]='0'+xResNext;
    4994:	ae 1b       	sub	r26, r30
    4996:	b0 e0       	ldi	r27, 0x00	; 0
    4998:	ea 0f       	add	r30, r26
    499a:	fb 1f       	adc	r31, r27
    499c:	30 5d       	subi	r19, 0xD0	; 208
    499e:	30 83       	st	Z, r19
		 tmpResult[lenR+1]=0;	 
    49a0:	ac 0f       	add	r26, r28
    49a2:	bd 1f       	adc	r27, r29
    49a4:	12 96       	adiw	r26, 0x02	; 2
    49a6:	1c 92       	st	X, r1
	 }
	 lenR=strlen(tmpResult);
    49a8:	de 01       	movw	r26, r28
    49aa:	11 96       	adiw	r26, 0x01	; 1
    49ac:	fd 01       	movw	r30, r26
    49ae:	01 90       	ld	r0, Z+
    49b0:	00 20       	and	r0, r0
    49b2:	e9 f7       	brne	.-6      	; 0x49ae <CalcSegmen+0xda>
    49b4:	31 97       	sbiw	r30, 0x01	; 1
    49b6:	9e 2f       	mov	r25, r30
    49b8:	9a 1b       	sub	r25, r26
    49ba:	a9 0f       	add	r26, r25
    49bc:	b1 1d       	adc	r27, r1
    49be:	f6 01       	movw	r30, r12
    49c0:	02 c0       	rjmp	.+4      	; 0x49c6 <CalcSegmen+0xf2>
	 for (i=0;i<lenR;i++){
	     strResult[i]=tmpResult[lenR-1-i];
    49c2:	8c 91       	ld	r24, X
    49c4:	81 93       	st	Z+, r24
    49c6:	11 97       	sbiw	r26, 0x01	; 1
	     lenR=strlen(tmpResult);
	     tmpResult[lenR]='0'+xResNext;
		 tmpResult[lenR+1]=0;	 
	 }
	 lenR=strlen(tmpResult);
	 for (i=0;i<lenR;i++){
    49c8:	ac 17       	cp	r26, r28
    49ca:	bd 07       	cpc	r27, r29
    49cc:	d1 f7       	brne	.-12     	; 0x49c2 <CalcSegmen+0xee>
	     strResult[i]=tmpResult[lenR-1-i];
	 }
	 strResult[lenR]=0;
    49ce:	c9 0e       	add	r12, r25
    49d0:	d1 1c       	adc	r13, r1
    49d2:	f6 01       	movw	r30, r12
    49d4:	10 82       	st	Z, r1
}
    49d6:	64 96       	adiw	r28, 0x14	; 20
    49d8:	0f b6       	in	r0, 0x3f	; 63
    49da:	f8 94       	cli
    49dc:	de bf       	out	0x3e, r29	; 62
    49de:	0f be       	out	0x3f, r0	; 63
    49e0:	cd bf       	out	0x3d, r28	; 61
    49e2:	cf 91       	pop	r28
    49e4:	df 91       	pop	r29
    49e6:	1f 91       	pop	r17
    49e8:	0f 91       	pop	r16
    49ea:	ff 90       	pop	r15
    49ec:	ef 90       	pop	r14
    49ee:	df 90       	pop	r13
    49f0:	cf 90       	pop	r12
    49f2:	bf 90       	pop	r11
    49f4:	9f 90       	pop	r9
    49f6:	8f 90       	pop	r8
    49f8:	7f 90       	pop	r7
    49fa:	6f 90       	pop	r6
    49fc:	08 95       	ret

000049fe <GetMinusPos>:
	      break;	 
	 }
*/
}

char GetMinusPos(char *strNumber){
    49fe:	ac 01       	movw	r20, r24
char i,Result;
     Result=0;
     for(i=0;i<strlen(strNumber);i++){
    4a00:	dc 01       	movw	r26, r24
    4a02:	0d 90       	ld	r0, X+
    4a04:	00 20       	and	r0, r0
    4a06:	e9 f7       	brne	.-6      	; 0x4a02 <GetMinusPos+0x4>
    4a08:	11 97       	sbiw	r26, 0x01	; 1
    4a0a:	a8 1b       	sub	r26, r24
    4a0c:	b9 0b       	sbc	r27, r25
    4a0e:	20 e0       	ldi	r18, 0x00	; 0
    4a10:	0a c0       	rjmp	.+20     	; 0x4a26 <GetMinusPos+0x28>
	     if (strNumber[i]=='-'){
    4a12:	e4 0f       	add	r30, r20
    4a14:	f5 1f       	adc	r31, r21
    4a16:	80 81       	ld	r24, Z
    4a18:	92 2f       	mov	r25, r18
    4a1a:	9f 5f       	subi	r25, 0xFF	; 255
    4a1c:	8d 32       	cpi	r24, 0x2D	; 45
    4a1e:	11 f4       	brne	.+4      	; 0x4a24 <GetMinusPos+0x26>
		     Result=i+1;
    4a20:	89 2f       	mov	r24, r25
    4a22:	08 95       	ret
}

char GetMinusPos(char *strNumber){
char i,Result;
     Result=0;
     for(i=0;i<strlen(strNumber);i++){
    4a24:	29 2f       	mov	r18, r25
    4a26:	e2 2f       	mov	r30, r18
    4a28:	f0 e0       	ldi	r31, 0x00	; 0
    4a2a:	ea 17       	cp	r30, r26
    4a2c:	fb 07       	cpc	r31, r27
    4a2e:	88 f3       	brcs	.-30     	; 0x4a12 <GetMinusPos+0x14>
    4a30:	80 e0       	ldi	r24, 0x00	; 0
		     Result=i+1;
			 break;
		 }
	 }
  return Result;     
}
    4a32:	08 95       	ret

00004a34 <IsMinus>:

char IsMinus(char *strNumber){
char i,Result=False;
     Result=False;
	 if (GetMinusPos(strNumber)>0){
    4a34:	0e 94 ff 24 	call	0x49fe	; 0x49fe <GetMinusPos>
    4a38:	81 11       	cpse	r24, r1
    4a3a:	81 e0       	ldi	r24, 0x01	; 1
	     Result=True;
	 }     
  return Result;
}
    4a3c:	08 95       	ret

00004a3e <RemoveMinus>:

void RemoveMinus(char *strNumber){
    4a3e:	cf 93       	push	r28
    4a40:	df 93       	push	r29
    4a42:	ec 01       	movw	r28, r24
     char MinPos,Length;

     if (IsMinus(strNumber)==True){
    4a44:	0e 94 1a 25 	call	0x4a34	; 0x4a34 <IsMinus>
    4a48:	81 30       	cpi	r24, 0x01	; 1
    4a4a:	19 f5       	brne	.+70     	; 0x4a92 <RemoveMinus+0x54>
	     MinPos=GetMinusPos(strNumber);
    4a4c:	ce 01       	movw	r24, r28
    4a4e:	0e 94 ff 24 	call	0x49fe	; 0x49fe <GetMinusPos>
		 Length=strlen(strNumber);
    4a52:	de 01       	movw	r26, r28
    4a54:	0d 90       	ld	r0, X+
    4a56:	00 20       	and	r0, r0
    4a58:	e9 f7       	brne	.-6      	; 0x4a54 <RemoveMinus+0x16>
    4a5a:	11 97       	sbiw	r26, 0x01	; 1
		 StrPosCopy(strNumber,strNumber,MinPos,(Length-MinPos));	      
    4a5c:	ac 1b       	sub	r26, r28
    4a5e:	b0 e0       	ldi	r27, 0x00	; 0
    4a60:	90 e0       	ldi	r25, 0x00	; 0
    4a62:	a8 1b       	sub	r26, r24
    4a64:	b9 0b       	sbc	r27, r25
    4a66:	ae 01       	movw	r20, r28
    4a68:	48 0f       	add	r20, r24
    4a6a:	59 1f       	adc	r21, r25
    4a6c:	20 e0       	ldi	r18, 0x00	; 0
    4a6e:	30 e0       	ldi	r19, 0x00	; 0
    4a70:	0a c0       	rjmp	.+20     	; 0x4a86 <RemoveMinus+0x48>
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    4a72:	be 01       	movw	r22, r28
    4a74:	62 0f       	add	r22, r18
    4a76:	73 1f       	adc	r23, r19
    4a78:	fa 01       	movw	r30, r20
    4a7a:	81 91       	ld	r24, Z+
    4a7c:	af 01       	movw	r20, r30
    4a7e:	fb 01       	movw	r30, r22
    4a80:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    4a82:	2f 5f       	subi	r18, 0xFF	; 255
    4a84:	3f 4f       	sbci	r19, 0xFF	; 255
    4a86:	2a 17       	cp	r18, r26
    4a88:	3b 07       	cpc	r19, r27
    4a8a:	98 f3       	brcs	.-26     	; 0x4a72 <RemoveMinus+0x34>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    4a8c:	ac 0f       	add	r26, r28
    4a8e:	bd 1f       	adc	r27, r29
    4a90:	1c 92       	st	X, r1
     if (IsMinus(strNumber)==True){
	     MinPos=GetMinusPos(strNumber);
		 Length=strlen(strNumber);
		 StrPosCopy(strNumber,strNumber,MinPos,(Length-MinPos));	      
	 }
}
    4a92:	df 91       	pop	r29
    4a94:	cf 91       	pop	r28
    4a96:	08 95       	ret

00004a98 <IsMoreThan>:
	    Result=c-'0';
	 }
	return Result;
}

char IsMoreThan(char *strA, char *strB){
    4a98:	ac 01       	movw	r20, r24
    4a9a:	27 2f       	mov	r18, r23
     char i,LengthA,LengthB,Result=False;
	 char strSend[20];	 
     //Check Length
	 LengthA=strlen(strA);
    4a9c:	fc 01       	movw	r30, r24
    4a9e:	01 90       	ld	r0, Z+
    4aa0:	00 20       	and	r0, r0
    4aa2:	e9 f7       	brne	.-6      	; 0x4a9e <IsMoreThan+0x6>
    4aa4:	31 97       	sbiw	r30, 0x01	; 1
    4aa6:	7e 2f       	mov	r23, r30
    4aa8:	78 1b       	sub	r23, r24
	 LengthB=strlen(strB);
    4aaa:	a6 2f       	mov	r26, r22
    4aac:	b2 2f       	mov	r27, r18
    4aae:	fd 01       	movw	r30, r26
    4ab0:	01 90       	ld	r0, Z+
    4ab2:	00 20       	and	r0, r0
    4ab4:	e9 f7       	brne	.-6      	; 0x4ab0 <IsMoreThan+0x18>
    4ab6:	31 97       	sbiw	r30, 0x01	; 1
    4ab8:	e6 1b       	sub	r30, r22
	 Result=False;
	 if (LengthA>LengthB)Result=True;
    4aba:	e7 17       	cp	r30, r23
    4abc:	48 f1       	brcs	.+82     	; 0x4b10 <IsMoreThan+0x78>
	 else 
	 if (LengthA==LengthB){          //456755 
    4abe:	7e 17       	cp	r23, r30
    4ac0:	49 f5       	brne	.+82     	; 0x4b14 <IsMoreThan+0x7c>
    4ac2:	86 2f       	mov	r24, r22
    4ac4:	92 2f       	mov	r25, r18
    4ac6:	9c 01       	movw	r18, r24
    4ac8:	d9 01       	movw	r26, r18
    4aca:	20 e0       	ldi	r18, 0x00	; 0
    4acc:	30 e0       	ldi	r19, 0x00	; 0
    4ace:	1d c0       	rjmp	.+58     	; 0x4b0a <IsMoreThan+0x72>
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
    4ad0:	fa 01       	movw	r30, r20
    4ad2:	e2 0f       	add	r30, r18
    4ad4:	f3 1f       	adc	r31, r19
    4ad6:	e0 81       	ld	r30, Z
    4ad8:	e0 53       	subi	r30, 0x30	; 48
    4ada:	ea 30       	cpi	r30, 0x0A	; 10
    4adc:	10 f0       	brcs	.+4      	; 0x4ae2 <IsMoreThan+0x4a>
    4ade:	60 e0       	ldi	r22, 0x00	; 0
    4ae0:	01 c0       	rjmp	.+2      	; 0x4ae4 <IsMoreThan+0x4c>
    4ae2:	6e 2f       	mov	r22, r30
	 Result=False;
	 if (LengthA>LengthB)Result=True;
	 else 
	 if (LengthA==LengthB){          //456755 
	     for(i=0;i<LengthA;i++){    //456410   
		     if (Ord(strA[i])>Ord(strB[i])){
    4ae4:	8c 91       	ld	r24, X
    4ae6:	80 53       	subi	r24, 0x30	; 48
    4ae8:	8a 30       	cpi	r24, 0x0A	; 10
    4aea:	10 f0       	brcs	.+4      	; 0x4af0 <IsMoreThan+0x58>
    4aec:	90 e0       	ldi	r25, 0x00	; 0
    4aee:	01 c0       	rjmp	.+2      	; 0x4af2 <IsMoreThan+0x5a>
    4af0:	98 2f       	mov	r25, r24
    4af2:	96 17       	cp	r25, r22
    4af4:	68 f0       	brcs	.+26     	; 0x4b10 <IsMoreThan+0x78>
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
    4af6:	ea 30       	cpi	r30, 0x0A	; 10
    4af8:	08 f0       	brcs	.+2      	; 0x4afc <IsMoreThan+0x64>
    4afa:	e0 e0       	ldi	r30, 0x00	; 0
	 if (LengthA==LengthB){          //456755 
	     for(i=0;i<LengthA;i++){    //456410   
		     if (Ord(strA[i])>Ord(strB[i])){
			     Result=True;
				 break;
			 }else if (Ord(strA[i])<Ord(strB[i])){
    4afc:	8a 30       	cpi	r24, 0x0A	; 10
    4afe:	10 f4       	brcc	.+4      	; 0x4b04 <IsMoreThan+0x6c>
    4b00:	e8 17       	cp	r30, r24
    4b02:	40 f0       	brcs	.+16     	; 0x4b14 <IsMoreThan+0x7c>
    4b04:	2f 5f       	subi	r18, 0xFF	; 255
    4b06:	3f 4f       	sbci	r19, 0xFF	; 255
    4b08:	11 96       	adiw	r26, 0x01	; 1
	 LengthB=strlen(strB);
	 Result=False;
	 if (LengthA>LengthB)Result=True;
	 else 
	 if (LengthA==LengthB){          //456755 
	     for(i=0;i<LengthA;i++){    //456410   
    4b0a:	27 17       	cp	r18, r23
    4b0c:	08 f3       	brcs	.-62     	; 0x4ad0 <IsMoreThan+0x38>
    4b0e:	02 c0       	rjmp	.+4      	; 0x4b14 <IsMoreThan+0x7c>
    4b10:	81 e0       	ldi	r24, 0x01	; 1
    4b12:	08 95       	ret
    4b14:	80 e0       	ldi	r24, 0x00	; 0
				 break;
			 }			 		 
		 }
	 }
  return Result;
}
    4b16:	08 95       	ret

00004b18 <IsZerroAll>:
   return Result;
}

char IsZerroAll(char *strZerro){
     char i,Length,nZerro=0,Result;
	 Length=strlen(strZerro);
    4b18:	fc 01       	movw	r30, r24
    4b1a:	01 90       	ld	r0, Z+
    4b1c:	00 20       	and	r0, r0
    4b1e:	e9 f7       	brne	.-6      	; 0x4b1a <IsZerroAll+0x2>
    4b20:	31 97       	sbiw	r30, 0x01	; 1
    4b22:	e8 1b       	sub	r30, r24
    4b24:	dc 01       	movw	r26, r24
    4b26:	ae 0f       	add	r26, r30
    4b28:	b1 1d       	adc	r27, r1
    4b2a:	90 e0       	ldi	r25, 0x00	; 0
    4b2c:	20 e0       	ldi	r18, 0x00	; 0
    4b2e:	06 c0       	rjmp	.+12     	; 0x4b3c <IsZerroAll+0x24>
	 nZerro=0;
	 Result=False;
	 for(i=0;i<Length;i++){
	     if (strZerro[Length-i]=='0')nZerro++;
    4b30:	8c 91       	ld	r24, X
    4b32:	80 33       	cpi	r24, 0x30	; 48
    4b34:	09 f4       	brne	.+2      	; 0x4b38 <IsZerroAll+0x20>
    4b36:	2f 5f       	subi	r18, 0xFF	; 255
char IsZerroAll(char *strZerro){
     char i,Length,nZerro=0,Result;
	 Length=strlen(strZerro);
	 nZerro=0;
	 Result=False;
	 for(i=0;i<Length;i++){
    4b38:	9f 5f       	subi	r25, 0xFF	; 255
    4b3a:	11 97       	sbiw	r26, 0x01	; 1
    4b3c:	9e 17       	cp	r25, r30
    4b3e:	c0 f3       	brcs	.-16     	; 0x4b30 <IsZerroAll+0x18>
    4b40:	80 e0       	ldi	r24, 0x00	; 0
    4b42:	2e 17       	cp	r18, r30
    4b44:	09 f4       	brne	.+2      	; 0x4b48 <IsZerroAll+0x30>
    4b46:	81 e0       	ldi	r24, 0x01	; 1
	     if (strZerro[Length-i]=='0')nZerro++;
	 }if (nZerro==Length) Result=True;
  return Result;
}
    4b48:	08 95       	ret

00004b4a <PstrCopy>:
void CarriegeReturn(){
     uart(_COM_PRINTER, 1, 0x0D);     
     uart(_COM_PRINTER, 1, 0x0A);
}

void PstrCopy(char *Dest,char *Source){
    4b4a:	cf 93       	push	r28
    4b4c:	df 93       	push	r29
    4b4e:	20 e0       	ldi	r18, 0x00	; 0
    4b50:	08 c0       	rjmp	.+16     	; 0x4b62 <PstrCopy+0x18>
     char i=0;
	 for(i=0;i<strlen(Source);i++){
	    Dest[i]=pgm_read_byte(&Source[i]);
    4b52:	fb 01       	movw	r30, r22
    4b54:	ec 0f       	add	r30, r28
    4b56:	fd 1f       	adc	r31, r29
    4b58:	e4 91       	lpm	r30, Z+
    4b5a:	c8 0f       	add	r28, r24
    4b5c:	d9 1f       	adc	r29, r25
    4b5e:	e8 83       	st	Y, r30
     uart(_COM_PRINTER, 1, 0x0A);
}

void PstrCopy(char *Dest,char *Source){
     char i=0;
	 for(i=0;i<strlen(Source);i++){
    4b60:	2f 5f       	subi	r18, 0xFF	; 255
    4b62:	c2 2f       	mov	r28, r18
    4b64:	d0 e0       	ldi	r29, 0x00	; 0
    4b66:	fb 01       	movw	r30, r22
    4b68:	01 90       	ld	r0, Z+
    4b6a:	00 20       	and	r0, r0
    4b6c:	e9 f7       	brne	.-6      	; 0x4b68 <PstrCopy+0x1e>
    4b6e:	31 97       	sbiw	r30, 0x01	; 1
    4b70:	e6 1b       	sub	r30, r22
    4b72:	f7 0b       	sbc	r31, r23
    4b74:	ce 17       	cp	r28, r30
    4b76:	df 07       	cpc	r29, r31
    4b78:	60 f3       	brcs	.-40     	; 0x4b52 <PstrCopy+0x8>
	    Dest[i]=pgm_read_byte(&Source[i]);
	 }
}
    4b7a:	df 91       	pop	r29
    4b7c:	cf 91       	pop	r28
    4b7e:	08 95       	ret

00004b80 <SpaceOnly>:
	     if (strDecimal[i]==DecPointMark)
		     strDecimal[i]=0;
	 }
}

char SpaceOnly(char *string){
    4b80:	ac 01       	movw	r20, r24
     char Result,nChar=0;
	 unsigned int i=0;
	 nChar=0;
	 Result=False;
	 for(i=0;i<strlen(string);i++){
    4b82:	dc 01       	movw	r26, r24
    4b84:	0d 90       	ld	r0, X+
    4b86:	00 20       	and	r0, r0
    4b88:	e9 f7       	brne	.-6      	; 0x4b84 <SpaceOnly+0x4>
    4b8a:	11 97       	sbiw	r26, 0x01	; 1
    4b8c:	a8 1b       	sub	r26, r24
    4b8e:	b9 0b       	sbc	r27, r25
    4b90:	90 e0       	ldi	r25, 0x00	; 0
    4b92:	20 e0       	ldi	r18, 0x00	; 0
    4b94:	30 e0       	ldi	r19, 0x00	; 0
    4b96:	09 c0       	rjmp	.+18     	; 0x4baa <SpaceOnly+0x2a>
	    if(string[i]!=' ') nChar++;
    4b98:	fa 01       	movw	r30, r20
    4b9a:	e2 0f       	add	r30, r18
    4b9c:	f3 1f       	adc	r31, r19
    4b9e:	80 81       	ld	r24, Z
    4ba0:	80 32       	cpi	r24, 0x20	; 32
    4ba2:	09 f0       	breq	.+2      	; 0x4ba6 <SpaceOnly+0x26>
    4ba4:	9f 5f       	subi	r25, 0xFF	; 255
char SpaceOnly(char *string){
     char Result,nChar=0;
	 unsigned int i=0;
	 nChar=0;
	 Result=False;
	 for(i=0;i<strlen(string);i++){
    4ba6:	2f 5f       	subi	r18, 0xFF	; 255
    4ba8:	3f 4f       	sbci	r19, 0xFF	; 255
    4baa:	2a 17       	cp	r18, r26
    4bac:	3b 07       	cpc	r19, r27
    4bae:	a0 f3       	brcs	.-24     	; 0x4b98 <SpaceOnly+0x18>
    4bb0:	80 e0       	ldi	r24, 0x00	; 0
    4bb2:	99 23       	and	r25, r25
    4bb4:	09 f4       	brne	.+2      	; 0x4bb8 <SpaceOnly+0x38>
    4bb6:	81 e0       	ldi	r24, 0x01	; 1
	 }
	 if (nChar>0) Result=False;
	 else Result=True;

	 return Result;
}
    4bb8:	08 95       	ret

00004bba <RemDecimal>:
	 }
}



void RemDecimal(char *strDecimal){//4500.00-->4500
    4bba:	cf 93       	push	r28
    4bbc:	df 93       	push	r29
    4bbe:	ec 01       	movw	r28, r24
char i,DecPointMark;
     DecPointMark=eeprom_read_byte(&DefDecimalMark);	 
    4bc0:	8e e3       	ldi	r24, 0x3E	; 62
    4bc2:	90 e0       	ldi	r25, 0x00	; 0
    4bc4:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
    4bc8:	38 2f       	mov	r19, r24
    4bca:	20 e0       	ldi	r18, 0x00	; 0
    4bcc:	08 c0       	rjmp	.+16     	; 0x4bde <RemDecimal+0x24>

     for(i=0;i<strlen(strDecimal);i++){
	     if (strDecimal[i]==DecPointMark)
    4bce:	fe 01       	movw	r30, r28
    4bd0:	e8 0f       	add	r30, r24
    4bd2:	f9 1f       	adc	r31, r25
    4bd4:	80 81       	ld	r24, Z
    4bd6:	83 17       	cp	r24, r19
    4bd8:	09 f4       	brne	.+2      	; 0x4bdc <RemDecimal+0x22>
		     strDecimal[i]=0;
    4bda:	10 82       	st	Z, r1

void RemDecimal(char *strDecimal){//4500.00-->4500
char i,DecPointMark;
     DecPointMark=eeprom_read_byte(&DefDecimalMark);	 

     for(i=0;i<strlen(strDecimal);i++){
    4bdc:	2f 5f       	subi	r18, 0xFF	; 255
    4bde:	82 2f       	mov	r24, r18
    4be0:	90 e0       	ldi	r25, 0x00	; 0
    4be2:	fe 01       	movw	r30, r28
    4be4:	01 90       	ld	r0, Z+
    4be6:	00 20       	and	r0, r0
    4be8:	e9 f7       	brne	.-6      	; 0x4be4 <RemDecimal+0x2a>
    4bea:	31 97       	sbiw	r30, 0x01	; 1
    4bec:	ec 1b       	sub	r30, r28
    4bee:	fd 0b       	sbc	r31, r29
    4bf0:	8e 17       	cp	r24, r30
    4bf2:	9f 07       	cpc	r25, r31
    4bf4:	60 f3       	brcs	.-40     	; 0x4bce <RemDecimal+0x14>
	     if (strDecimal[i]==DecPointMark)
		     strDecimal[i]=0;
	 }
}
    4bf6:	df 91       	pop	r29
    4bf8:	cf 91       	pop	r28
    4bfa:	08 95       	ret

00004bfc <GetProductPrice>:
          stGenerateReport=grScanAction;
	      break;
	 }
}
//SaveTotalProduct(xGrade,strDeltaVolume,strDeltaMoney);
void GetProductPrice(char *sPrice,char xPumpID,char xNozzle){
    4bfc:	cf 92       	push	r12
    4bfe:	df 92       	push	r13
    4c00:	ef 92       	push	r14
    4c02:	ff 92       	push	r15
    4c04:	0f 93       	push	r16
    4c06:	1f 93       	push	r17
    4c08:	df 93       	push	r29
    4c0a:	cf 93       	push	r28
    4c0c:	cd b7       	in	r28, 0x3d	; 61
    4c0e:	de b7       	in	r29, 0x3e	; 62
    4c10:	67 97       	sbiw	r28, 0x17	; 23
    4c12:	0f b6       	in	r0, 0x3f	; 63
    4c14:	f8 94       	cli
    4c16:	de bf       	out	0x3e, r29	; 62
    4c18:	0f be       	out	0x3f, r0	; 63
    4c1a:	cd bf       	out	0x3d, r28	; 61
    4c1c:	7c 01       	movw	r14, r24
    4c1e:	d6 2e       	mov	r13, r22
    4c20:	c4 2e       	mov	r12, r20
char i,PPumpID[8],PProdID[6],strPrice[9],iPumpID,xProductID;
     sprintf_P(sPrice,PSTR(""));
    4c22:	00 d0       	rcall	.+0      	; 0x4c24 <GetProductPrice+0x28>
    4c24:	00 d0       	rcall	.+0      	; 0x4c26 <GetProductPrice+0x2a>
    4c26:	ad b7       	in	r26, 0x3d	; 61
    4c28:	be b7       	in	r27, 0x3e	; 62
    4c2a:	12 96       	adiw	r26, 0x02	; 2
    4c2c:	9c 93       	st	X, r25
    4c2e:	8e 93       	st	-X, r24
    4c30:	11 97       	sbiw	r26, 0x01	; 1
    4c32:	86 e6       	ldi	r24, 0x66	; 102
    4c34:	95 e0       	ldi	r25, 0x05	; 5
    4c36:	14 96       	adiw	r26, 0x04	; 4
    4c38:	9c 93       	st	X, r25
    4c3a:	8e 93       	st	-X, r24
    4c3c:	13 97       	sbiw	r26, 0x03	; 3
    4c3e:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
     //FindPumpID
	 eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap,8);
    4c42:	0f 90       	pop	r0
    4c44:	0f 90       	pop	r0
    4c46:	0f 90       	pop	r0
    4c48:	0f 90       	pop	r0
    4c4a:	8e 01       	movw	r16, r28
    4c4c:	09 5f       	subi	r16, 0xF9	; 249
    4c4e:	1f 4f       	sbci	r17, 0xFF	; 255
    4c50:	c8 01       	movw	r24, r16
    4c52:	65 e4       	ldi	r22, 0x45	; 69
    4c54:	70 e0       	ldi	r23, 0x00	; 0
    4c56:	48 e0       	ldi	r20, 0x08	; 8
    4c58:	50 e0       	ldi	r21, 0x00	; 0
    4c5a:	0e 94 b9 ac 	call	0x15972	; 0x15972 <__eerd_block_m128>
    4c5e:	f8 01       	movw	r30, r16
	 iPumpID=0;
	 for(i=0;i<8;i++){
    4c60:	9e 01       	movw	r18, r28
    4c62:	21 5f       	subi	r18, 0xF1	; 241
    4c64:	3f 4f       	sbci	r19, 0xFF	; 255
//SaveTotalProduct(xGrade,strDeltaVolume,strDeltaMoney);
void GetProductPrice(char *sPrice,char xPumpID,char xNozzle){
char i,PPumpID[8],PProdID[6],strPrice[9],iPumpID,xProductID;
     sprintf_P(sPrice,PSTR(""));
     //FindPumpID
	 eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap,8);
    4c66:	9e 2f       	mov	r25, r30
    4c68:	90 1b       	sub	r25, r16
	 iPumpID=0;
	 for(i=0;i<8;i++){
	     if (PPumpID[i]==xPumpID){
    4c6a:	80 81       	ld	r24, Z
    4c6c:	8d 15       	cp	r24, r13
    4c6e:	11 f4       	brne	.+4      	; 0x4c74 <GetProductPrice+0x78>
    4c70:	89 2f       	mov	r24, r25
    4c72:	05 c0       	rjmp	.+10     	; 0x4c7e <GetProductPrice+0x82>
    4c74:	31 96       	adiw	r30, 0x01	; 1
char i,PPumpID[8],PProdID[6],strPrice[9],iPumpID,xProductID;
     sprintf_P(sPrice,PSTR(""));
     //FindPumpID
	 eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap,8);
	 iPumpID=0;
	 for(i=0;i<8;i++){
    4c76:	e2 17       	cp	r30, r18
    4c78:	f3 07       	cpc	r31, r19
    4c7a:	a9 f7       	brne	.-22     	; 0x4c66 <GetProductPrice+0x6a>
    4c7c:	80 e0       	ldi	r24, 0x00	; 0
	     if (PPumpID[i]==xPumpID){
		     iPumpID=i;
			 break;
		 }	 
	 }
	 if ((iPumpID>=0)&&(xNozzle<6)){
    4c7e:	b5 e0       	ldi	r27, 0x05	; 5
    4c80:	bc 15       	cp	r27, r12
    4c82:	e8 f1       	brcs	.+122    	; 0x4cfe <GetProductPrice+0x102>
         eeprom_read_block((void*) &PProdID,(const void*) &DefNozzleMap[iPumpID],6);
    4c84:	66 e0       	ldi	r22, 0x06	; 6
    4c86:	86 9f       	mul	r24, r22
    4c88:	b0 01       	movw	r22, r0
    4c8a:	11 24       	eor	r1, r1
    4c8c:	6b 5a       	subi	r22, 0xAB	; 171
    4c8e:	7f 4f       	sbci	r23, 0xFF	; 255
    4c90:	ce 01       	movw	r24, r28
    4c92:	01 96       	adiw	r24, 0x01	; 1
    4c94:	46 e0       	ldi	r20, 0x06	; 6
    4c96:	50 e0       	ldi	r21, 0x00	; 0
    4c98:	0e 94 b9 ac 	call	0x15972	; 0x15972 <__eerd_block_m128>
         xProductID=PProdID[xNozzle-1];
		 //Price
		 eeprom_read_block((void*) &strPrice, (const void*) &DefProductPrice[xProductID-1], 9);
    4c9c:	8e 01       	movw	r16, r28
    4c9e:	01 5f       	subi	r16, 0xF1	; 241
    4ca0:	1f 4f       	sbci	r17, 0xFF	; 255
    4ca2:	fe 01       	movw	r30, r28
    4ca4:	ec 0d       	add	r30, r12
    4ca6:	f1 1d       	adc	r31, r1
    4ca8:	60 81       	ld	r22, Z
    4caa:	89 e0       	ldi	r24, 0x09	; 9
    4cac:	68 9f       	mul	r22, r24
    4cae:	b0 01       	movw	r22, r0
    4cb0:	11 24       	eor	r1, r1
    4cb2:	64 58       	subi	r22, 0x84	; 132
    4cb4:	7f 4f       	sbci	r23, 0xFF	; 255
    4cb6:	c8 01       	movw	r24, r16
    4cb8:	49 e0       	ldi	r20, 0x09	; 9
    4cba:	50 e0       	ldi	r21, 0x00	; 0
    4cbc:	0e 94 b9 ac 	call	0x15972	; 0x15972 <__eerd_block_m128>
		 RemDecimal(strPrice);
    4cc0:	c8 01       	movw	r24, r16
    4cc2:	0e 94 dd 25 	call	0x4bba	; 0x4bba <RemDecimal>
		 sprintf_P(sPrice,PSTR("%s"),strPrice);
    4cc6:	00 d0       	rcall	.+0      	; 0x4cc8 <GetProductPrice+0xcc>
    4cc8:	00 d0       	rcall	.+0      	; 0x4cca <GetProductPrice+0xce>
    4cca:	00 d0       	rcall	.+0      	; 0x4ccc <GetProductPrice+0xd0>
    4ccc:	ed b7       	in	r30, 0x3d	; 61
    4cce:	fe b7       	in	r31, 0x3e	; 62
    4cd0:	31 96       	adiw	r30, 0x01	; 1
    4cd2:	ad b7       	in	r26, 0x3d	; 61
    4cd4:	be b7       	in	r27, 0x3e	; 62
    4cd6:	12 96       	adiw	r26, 0x02	; 2
    4cd8:	fc 92       	st	X, r15
    4cda:	ee 92       	st	-X, r14
    4cdc:	11 97       	sbiw	r26, 0x01	; 1
    4cde:	83 e6       	ldi	r24, 0x63	; 99
    4ce0:	95 e0       	ldi	r25, 0x05	; 5
    4ce2:	93 83       	std	Z+3, r25	; 0x03
    4ce4:	82 83       	std	Z+2, r24	; 0x02
    4ce6:	15 83       	std	Z+5, r17	; 0x05
    4ce8:	04 83       	std	Z+4, r16	; 0x04
    4cea:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
    4cee:	ed b7       	in	r30, 0x3d	; 61
    4cf0:	fe b7       	in	r31, 0x3e	; 62
    4cf2:	36 96       	adiw	r30, 0x06	; 6
    4cf4:	0f b6       	in	r0, 0x3f	; 63
    4cf6:	f8 94       	cli
    4cf8:	fe bf       	out	0x3e, r31	; 62
    4cfa:	0f be       	out	0x3f, r0	; 63
    4cfc:	ed bf       	out	0x3d, r30	; 61
	 }    
	 //Clear Decimal

}
    4cfe:	67 96       	adiw	r28, 0x17	; 23
    4d00:	0f b6       	in	r0, 0x3f	; 63
    4d02:	f8 94       	cli
    4d04:	de bf       	out	0x3e, r29	; 62
    4d06:	0f be       	out	0x3f, r0	; 63
    4d08:	cd bf       	out	0x3d, r28	; 61
    4d0a:	cf 91       	pop	r28
    4d0c:	df 91       	pop	r29
    4d0e:	1f 91       	pop	r17
    4d10:	0f 91       	pop	r16
    4d12:	ff 90       	pop	r15
    4d14:	ef 90       	pop	r14
    4d16:	df 90       	pop	r13
    4d18:	cf 90       	pop	r12
    4d1a:	08 95       	ret

00004d1c <FormatDate>:
	 }     
   }
}

              //Fmt:DATE_LONG_YEAR,DATE_SHORT_YEAR //0123456789    0123456789 
void FormatDate(char FmtYear, char *Date){         //2010/06/16 -> 16/06/2010
    4d1c:	df 93       	push	r29
    4d1e:	cf 93       	push	r28
    4d20:	cd b7       	in	r28, 0x3d	; 61
    4d22:	de b7       	in	r29, 0x3e	; 62
    4d24:	2b 97       	sbiw	r28, 0x0b	; 11
    4d26:	0f b6       	in	r0, 0x3f	; 63
    4d28:	f8 94       	cli
    4d2a:	de bf       	out	0x3e, r29	; 62
    4d2c:	0f be       	out	0x3f, r0	; 63
    4d2e:	cd bf       	out	0x3d, r28	; 61
    4d30:	98 2f       	mov	r25, r24
    4d32:	9b 01       	movw	r18, r22
     char i,sDate[11];

     sDate[0]=Date[8];
    4d34:	fb 01       	movw	r30, r22
    4d36:	80 85       	ldd	r24, Z+8	; 0x08
    4d38:	89 83       	std	Y+1, r24	; 0x01
	 sDate[1]=Date[9];
    4d3a:	81 85       	ldd	r24, Z+9	; 0x09
    4d3c:	8a 83       	std	Y+2, r24	; 0x02
     sDate[2]=Date[7];
    4d3e:	87 81       	ldd	r24, Z+7	; 0x07
    4d40:	8b 83       	std	Y+3, r24	; 0x03
	 sDate[3]=Date[5];
    4d42:	85 81       	ldd	r24, Z+5	; 0x05
    4d44:	8c 83       	std	Y+4, r24	; 0x04
     sDate[4]=Date[6];
    4d46:	86 81       	ldd	r24, Z+6	; 0x06
    4d48:	8d 83       	std	Y+5, r24	; 0x05
	 sDate[5]=Date[4];
    4d4a:	84 81       	ldd	r24, Z+4	; 0x04
    4d4c:	8e 83       	std	Y+6, r24	; 0x06
	 switch(FmtYear){
    4d4e:	99 23       	and	r25, r25
    4d50:	19 f0       	breq	.+6      	; 0x4d58 <FormatDate+0x3c>
    4d52:	91 30       	cpi	r25, 0x01	; 1
    4d54:	59 f4       	brne	.+22     	; 0x4d6c <FormatDate+0x50>
    4d56:	0f c0       	rjmp	.+30     	; 0x4d76 <FormatDate+0x5a>
	 case DATE_LONG_YEAR:
	 	  for(i=0;i<4;i++)sDate[i+6]=Date[i];
    4d58:	fb 01       	movw	r30, r22
    4d5a:	80 81       	ld	r24, Z
    4d5c:	8f 83       	std	Y+7, r24	; 0x07
    4d5e:	81 81       	ldd	r24, Z+1	; 0x01
    4d60:	88 87       	std	Y+8, r24	; 0x08
    4d62:	82 81       	ldd	r24, Z+2	; 0x02
    4d64:	89 87       	std	Y+9, r24	; 0x09
    4d66:	83 81       	ldd	r24, Z+3	; 0x03
    4d68:	8a 87       	std	Y+10, r24	; 0x0a
          sDate[10]=0;
    4d6a:	1b 86       	std	Y+11, r1	; 0x0b
    4d6c:	90 e0       	ldi	r25, 0x00	; 0
	      for(i=0;i<2;i++)sDate[i+6]=Date[i+2];
          sDate[8]=0;
	      break;
	 }
	 //replace
	 for(i=0;i<strlen(sDate);i++)Date[i]=sDate[i];
    4d6e:	ae 01       	movw	r20, r28
    4d70:	4f 5f       	subi	r20, 0xFF	; 255
    4d72:	5f 4f       	sbci	r21, 0xFF	; 255
    4d74:	0f c0       	rjmp	.+30     	; 0x4d94 <FormatDate+0x78>
	 case DATE_LONG_YEAR:
	 	  for(i=0;i<4;i++)sDate[i+6]=Date[i];
          sDate[10]=0;
	      break;
	 case DATE_SHORT_YEAR:
	      for(i=0;i<2;i++)sDate[i+6]=Date[i+2];
    4d76:	fb 01       	movw	r30, r22
    4d78:	82 81       	ldd	r24, Z+2	; 0x02
    4d7a:	8f 83       	std	Y+7, r24	; 0x07
    4d7c:	83 81       	ldd	r24, Z+3	; 0x03
    4d7e:	88 87       	std	Y+8, r24	; 0x08
          sDate[8]=0;
    4d80:	19 86       	std	Y+9, r1	; 0x09
    4d82:	f4 cf       	rjmp	.-24     	; 0x4d6c <FormatDate+0x50>
	      break;
	 }
	 //replace
	 for(i=0;i<strlen(sDate);i++)Date[i]=sDate[i];
    4d84:	f9 01       	movw	r30, r18
    4d86:	ea 0f       	add	r30, r26
    4d88:	fb 1f       	adc	r31, r27
    4d8a:	a4 0f       	add	r26, r20
    4d8c:	b5 1f       	adc	r27, r21
    4d8e:	8c 91       	ld	r24, X
    4d90:	80 83       	st	Z, r24
    4d92:	9f 5f       	subi	r25, 0xFF	; 255
    4d94:	a9 2f       	mov	r26, r25
    4d96:	b0 e0       	ldi	r27, 0x00	; 0
    4d98:	fa 01       	movw	r30, r20
    4d9a:	01 90       	ld	r0, Z+
    4d9c:	00 20       	and	r0, r0
    4d9e:	e9 f7       	brne	.-6      	; 0x4d9a <FormatDate+0x7e>
    4da0:	31 97       	sbiw	r30, 0x01	; 1
    4da2:	e4 1b       	sub	r30, r20
    4da4:	f5 0b       	sbc	r31, r21
    4da6:	ae 17       	cp	r26, r30
    4da8:	bf 07       	cpc	r27, r31
    4daa:	60 f3       	brcs	.-40     	; 0x4d84 <FormatDate+0x68>
}
    4dac:	2b 96       	adiw	r28, 0x0b	; 11
    4dae:	0f b6       	in	r0, 0x3f	; 63
    4db0:	f8 94       	cli
    4db2:	de bf       	out	0x3e, r29	; 62
    4db4:	0f be       	out	0x3f, r0	; 63
    4db6:	cd bf       	out	0x3d, r28	; 61
    4db8:	cf 91       	pop	r28
    4dba:	df 91       	pop	r29
    4dbc:	08 95       	ret

00004dbe <RemZeroLead>:

	while (1){};
  #endif
}

void RemZeroLead(char *Zeroed){//Remove Zero Character 00001004 000050000 0 
    4dbe:	cf 93       	push	r28
    4dc0:	df 93       	push	r29
    4dc2:	ec 01       	movw	r28, r24
unsigned char i=0,Length=0,ZeroPos=0,IsFound=False;;
     IsFound=False;
     ZeroPos=0;Length=strlen(Zeroed);
    4dc4:	fc 01       	movw	r30, r24
    4dc6:	01 90       	ld	r0, Z+
    4dc8:	00 20       	and	r0, r0
    4dca:	e9 f7       	brne	.-6      	; 0x4dc6 <RemZeroLead+0x8>
    4dcc:	31 97       	sbiw	r30, 0x01	; 1
    4dce:	e8 1b       	sub	r30, r24
  if ((Length>1)&&(Zeroed[0]=='0')){
    4dd0:	e2 30       	cpi	r30, 0x02	; 2
    4dd2:	d0 f1       	brcs	.+116    	; 0x4e48 <RemZeroLead+0x8a>
    4dd4:	88 81       	ld	r24, Y
    4dd6:	80 33       	cpi	r24, 0x30	; 48
    4dd8:	b9 f5       	brne	.+110    	; 0x4e48 <RemZeroLead+0x8a>
    4dda:	4c 2f       	mov	r20, r28
    4ddc:	de 01       	movw	r26, r28
    4dde:	90 e0       	ldi	r25, 0x00	; 0
	 if (Zeroed[0]=='0'){
         for(i=0;i<Length;i++){//00000000->0
	         if ((Zeroed[i]=='0')&&(Zeroed[i+1]=='0')&&(IsFound==False)) ZeroPos++;
    4de0:	8c 91       	ld	r24, X
    4de2:	80 33       	cpi	r24, 0x30	; 48
    4de4:	69 f4       	brne	.+26     	; 0x4e00 <RemZeroLead+0x42>
    4de6:	11 96       	adiw	r26, 0x01	; 1
    4de8:	8c 91       	ld	r24, X
    4dea:	11 97       	sbiw	r26, 0x01	; 1
    4dec:	80 33       	cpi	r24, 0x30	; 48
    4dee:	11 f4       	brne	.+4      	; 0x4df4 <RemZeroLead+0x36>
    4df0:	9f 5f       	subi	r25, 0xFF	; 255
    4df2:	06 c0       	rjmp	.+12     	; 0x4e00 <RemZeroLead+0x42>
             if ((Zeroed[i]=='0')&&(Zeroed[i+1]!='0')){
			     if ((Zeroed[i+1]=='.')||(Zeroed[i+1]==','))ZeroPos--;
    4df4:	8e 32       	cpi	r24, 0x2E	; 46
    4df6:	11 f0       	breq	.+4      	; 0x4dfc <RemZeroLead+0x3e>
    4df8:	8c 32       	cpi	r24, 0x2C	; 44
    4dfa:	41 f4       	brne	.+16     	; 0x4e0c <RemZeroLead+0x4e>
    4dfc:	91 50       	subi	r25, 0x01	; 1
    4dfe:	06 c0       	rjmp	.+12     	; 0x4e0c <RemZeroLead+0x4e>
    4e00:	11 96       	adiw	r26, 0x01	; 1
unsigned char i=0,Length=0,ZeroPos=0,IsFound=False;;
     IsFound=False;
     ZeroPos=0;Length=strlen(Zeroed);
  if ((Length>1)&&(Zeroed[0]=='0')){
	 if (Zeroed[0]=='0'){
         for(i=0;i<Length;i++){//00000000->0
    4e02:	8a 2f       	mov	r24, r26
    4e04:	84 1b       	sub	r24, r20
    4e06:	8e 17       	cp	r24, r30
    4e08:	58 f3       	brcs	.-42     	; 0x4de0 <RemZeroLead+0x22>
    4e0a:	01 c0       	rjmp	.+2      	; 0x4e0e <RemZeroLead+0x50>
		         IsFound=True;
			     break;			  
			     }
	      }

		  if (IsFound==True)ZeroPos++;
    4e0c:	9f 5f       	subi	r25, 0xFF	; 255
		  if (ZeroPos>=Length)ZeroPos=Length-1;
    4e0e:	9e 17       	cp	r25, r30
    4e10:	10 f0       	brcs	.+4      	; 0x4e16 <RemZeroLead+0x58>
    4e12:	9e 2f       	mov	r25, r30
    4e14:	91 50       	subi	r25, 0x01	; 1
    4e16:	40 e0       	ldi	r20, 0x00	; 0
          for(i=0;i<(Length-ZeroPos);i++){
    4e18:	89 2f       	mov	r24, r25
    4e1a:	90 e0       	ldi	r25, 0x00	; 0
    4e1c:	2e 2f       	mov	r18, r30
    4e1e:	30 e0       	ldi	r19, 0x00	; 0
    4e20:	28 1b       	sub	r18, r24
    4e22:	39 0b       	sbc	r19, r25
	          Zeroed[i]=Zeroed[i+ZeroPos];
    4e24:	be 01       	movw	r22, r28
    4e26:	68 0f       	add	r22, r24
    4e28:	79 1f       	adc	r23, r25
    4e2a:	09 c0       	rjmp	.+18     	; 0x4e3e <RemZeroLead+0x80>
    4e2c:	fe 01       	movw	r30, r28
    4e2e:	ea 0f       	add	r30, r26
    4e30:	fb 1f       	adc	r31, r27
    4e32:	a6 0f       	add	r26, r22
    4e34:	b7 1f       	adc	r27, r23
    4e36:	8c 91       	ld	r24, X
    4e38:	80 83       	st	Z, r24
		      Zeroed[i+1]=0;
    4e3a:	11 82       	std	Z+1, r1	; 0x01
			     }
	      }

		  if (IsFound==True)ZeroPos++;
		  if (ZeroPos>=Length)ZeroPos=Length-1;
          for(i=0;i<(Length-ZeroPos);i++){
    4e3c:	4f 5f       	subi	r20, 0xFF	; 255
    4e3e:	a4 2f       	mov	r26, r20
    4e40:	b0 e0       	ldi	r27, 0x00	; 0
    4e42:	a2 17       	cp	r26, r18
    4e44:	b3 07       	cpc	r27, r19
    4e46:	94 f3       	brlt	.-28     	; 0x4e2c <RemZeroLead+0x6e>
	          Zeroed[i]=Zeroed[i+ZeroPos];
		      Zeroed[i+1]=0;
	   }//Zeroed[Length-ZeroPos]=0;
	 }     
   }
}
    4e48:	df 91       	pop	r29
    4e4a:	cf 91       	pop	r28
    4e4c:	08 95       	ret

00004e4e <RemSpaceLead>:
	 if (Spaced[PosSpaced]==' ')Spaced[PosSpaced]=0;
	 if (Spaced[0]==' ')Spaced[0]=0;
	 Spaced[strlen(Spaced)]=0;
}

void RemSpaceLead(char *Zeroed){//Remove Space Character SSSSSS1234 12340234
    4e4e:	cf 93       	push	r28
    4e50:	df 93       	push	r29
    4e52:	ec 01       	movw	r28, r24
unsigned char i=0,Length=0,ZeroPos=0,IsFound=False;;
     ZeroPos=0;Length=strlen(Zeroed);
    4e54:	fc 01       	movw	r30, r24
    4e56:	01 90       	ld	r0, Z+
    4e58:	00 20       	and	r0, r0
    4e5a:	e9 f7       	brne	.-6      	; 0x4e56 <RemSpaceLead+0x8>
    4e5c:	31 97       	sbiw	r30, 0x01	; 1
    4e5e:	6e 2f       	mov	r22, r30
    4e60:	68 1b       	sub	r22, r24
	 if ((Length>1)&&(Zeroed[0]==' ')){
    4e62:	62 30       	cpi	r22, 0x02	; 2
    4e64:	e0 f1       	brcs	.+120    	; 0x4ede <RemSpaceLead+0x90>
    4e66:	88 81       	ld	r24, Y
    4e68:	80 32       	cpi	r24, 0x20	; 32
    4e6a:	c9 f5       	brne	.+114    	; 0x4ede <RemSpaceLead+0x90>
    4e6c:	4c 2f       	mov	r20, r28
    4e6e:	fe 01       	movw	r30, r28
    4e70:	90 e0       	ldi	r25, 0x00	; 0
    4e72:	20 e0       	ldi	r18, 0x00	; 0
	     for(i=0;i<Length;i++){
		     if ((Zeroed[i]==' ')&&(Zeroed[i+1]==' ')&&(IsFound==False)) ZeroPos++;
    4e74:	80 81       	ld	r24, Z
    4e76:	80 32       	cpi	r24, 0x20	; 32
    4e78:	41 f4       	brne	.+16     	; 0x4e8a <RemSpaceLead+0x3c>
    4e7a:	81 81       	ldd	r24, Z+1	; 0x01
    4e7c:	80 32       	cpi	r24, 0x20	; 32
    4e7e:	21 f4       	brne	.+8      	; 0x4e88 <RemSpaceLead+0x3a>
    4e80:	22 23       	and	r18, r18
    4e82:	19 f4       	brne	.+6      	; 0x4e8a <RemSpaceLead+0x3c>
    4e84:	9f 5f       	subi	r25, 0xFF	; 255
    4e86:	01 c0       	rjmp	.+2      	; 0x4e8a <RemSpaceLead+0x3c>
    4e88:	21 e0       	ldi	r18, 0x01	; 1
    4e8a:	31 96       	adiw	r30, 0x01	; 1

void RemSpaceLead(char *Zeroed){//Remove Space Character SSSSSS1234 12340234
unsigned char i=0,Length=0,ZeroPos=0,IsFound=False;;
     ZeroPos=0;Length=strlen(Zeroed);
	 if ((Length>1)&&(Zeroed[0]==' ')){
	     for(i=0;i<Length;i++){
    4e8c:	8e 2f       	mov	r24, r30
    4e8e:	84 1b       	sub	r24, r20
    4e90:	86 17       	cp	r24, r22
    4e92:	80 f3       	brcs	.-32     	; 0x4e74 <RemSpaceLead+0x26>
		     if ((Zeroed[i]==' ')&&(Zeroed[i+1]==' ')&&(IsFound==False)) ZeroPos++;
	         if((Zeroed[i]==' ')&&(Zeroed[i+1]!=' '))IsFound=True;
		 }ZeroPos++;
    4e94:	39 2f       	mov	r19, r25
    4e96:	3f 5f       	subi	r19, 0xFF	; 255
    4e98:	20 e0       	ldi	r18, 0x00	; 0
	     for(i=0;i<strlen(Zeroed);i++){
		     Zeroed[i]=Zeroed[i+ZeroPos];
    4e9a:	43 2f       	mov	r20, r19
    4e9c:	50 e0       	ldi	r21, 0x00	; 0
    4e9e:	09 c0       	rjmp	.+18     	; 0x4eb2 <RemSpaceLead+0x64>
    4ea0:	fe 01       	movw	r30, r28
    4ea2:	e8 0f       	add	r30, r24
    4ea4:	f9 1f       	adc	r31, r25
    4ea6:	df 01       	movw	r26, r30
    4ea8:	a4 0f       	add	r26, r20
    4eaa:	b5 1f       	adc	r27, r21
    4eac:	8c 91       	ld	r24, X
    4eae:	80 83       	st	Z, r24
	 if ((Length>1)&&(Zeroed[0]==' ')){
	     for(i=0;i<Length;i++){
		     if ((Zeroed[i]==' ')&&(Zeroed[i+1]==' ')&&(IsFound==False)) ZeroPos++;
	         if((Zeroed[i]==' ')&&(Zeroed[i+1]!=' '))IsFound=True;
		 }ZeroPos++;
	     for(i=0;i<strlen(Zeroed);i++){
    4eb0:	2f 5f       	subi	r18, 0xFF	; 255
    4eb2:	82 2f       	mov	r24, r18
    4eb4:	90 e0       	ldi	r25, 0x00	; 0
    4eb6:	fe 01       	movw	r30, r28
    4eb8:	01 90       	ld	r0, Z+
    4eba:	00 20       	and	r0, r0
    4ebc:	e9 f7       	brne	.-6      	; 0x4eb8 <RemSpaceLead+0x6a>
    4ebe:	31 97       	sbiw	r30, 0x01	; 1
    4ec0:	ec 1b       	sub	r30, r28
    4ec2:	fd 0b       	sbc	r31, r29
    4ec4:	8e 17       	cp	r24, r30
    4ec6:	9f 07       	cpc	r25, r31
    4ec8:	58 f3       	brcs	.-42     	; 0x4ea0 <RemSpaceLead+0x52>
		     Zeroed[i]=Zeroed[i+ZeroPos];
		 }
		 //Clearence
		 for(i=(Length-ZeroPos);i<Length;i++){
    4eca:	86 2f       	mov	r24, r22
    4ecc:	83 1b       	sub	r24, r19
    4ece:	05 c0       	rjmp	.+10     	; 0x4eda <RemSpaceLead+0x8c>
		     Zeroed[i]=0;
    4ed0:	fe 01       	movw	r30, r28
    4ed2:	e8 0f       	add	r30, r24
    4ed4:	f1 1d       	adc	r31, r1
    4ed6:	10 82       	st	Z, r1
		 }ZeroPos++;
	     for(i=0;i<strlen(Zeroed);i++){
		     Zeroed[i]=Zeroed[i+ZeroPos];
		 }
		 //Clearence
		 for(i=(Length-ZeroPos);i<Length;i++){
    4ed8:	8f 5f       	subi	r24, 0xFF	; 255
    4eda:	86 17       	cp	r24, r22
    4edc:	c8 f3       	brcs	.-14     	; 0x4ed0 <RemSpaceLead+0x82>
		     Zeroed[i]=0;
		 }
     }
}
    4ede:	df 91       	pop	r29
    4ee0:	cf 91       	pop	r28
    4ee2:	08 95       	ret

00004ee4 <RemSpaceLag>:
	 if (Spaced[0]==' ')Spaced[0]=0;
	 Spaced[strlen(Spaced)]=0;
}
*/
                                                      //012345678
void RemSpaceLag(char *Spaced){//Remove Space Character 1234SSSSS L=9 i=0 i=7
    4ee4:	0f 93       	push	r16
    4ee6:	1f 93       	push	r17
    4ee8:	cf 93       	push	r28
    4eea:	df 93       	push	r29
    4eec:	ec 01       	movw	r28, r24
unsigned char i=0,Length=0,PosSpaced=0;
     Length=strlen(Spaced);
    4eee:	dc 01       	movw	r26, r24
    4ef0:	0d 90       	ld	r0, X+
    4ef2:	00 20       	and	r0, r0
    4ef4:	e9 f7       	brne	.-6      	; 0x4ef0 <RemSpaceLag+0xc>
    4ef6:	11 97       	sbiw	r26, 0x01	; 1
    4ef8:	a8 1b       	sub	r26, r24
    4efa:	b0 e0       	ldi	r27, 0x00	; 0
    4efc:	20 e0       	ldi	r18, 0x00	; 0
    4efe:	30 e0       	ldi	r19, 0x00	; 0
     for(i=0;i<(Length-1);i++){
    4f00:	6a 2f       	mov	r22, r26
    4f02:	70 e0       	ldi	r23, 0x00	; 0
    4f04:	8b 01       	movw	r16, r22
    4f06:	01 50       	subi	r16, 0x01	; 1
    4f08:	10 40       	sbci	r17, 0x00	; 0
	     if ((Spaced[Length-i-2]==' ')&&(Spaced[Length-i-1]==' ')){
		      Spaced[Length-i-1]=0;
    4f0a:	a1 50       	subi	r26, 0x01	; 1
    4f0c:	16 c0       	rjmp	.+44     	; 0x4f3a <RemSpaceLag+0x56>
                                                      //012345678
void RemSpaceLag(char *Spaced){//Remove Space Character 1234SSSSS L=9 i=0 i=7
unsigned char i=0,Length=0,PosSpaced=0;
     Length=strlen(Spaced);
     for(i=0;i<(Length-1);i++){
	     if ((Spaced[Length-i-2]==' ')&&(Spaced[Length-i-1]==' ')){
    4f0e:	ab 01       	movw	r20, r22
    4f10:	48 1b       	sub	r20, r24
    4f12:	59 0b       	sbc	r21, r25
    4f14:	fe 01       	movw	r30, r28
    4f16:	e4 0f       	add	r30, r20
    4f18:	f5 1f       	adc	r31, r21
    4f1a:	32 97       	sbiw	r30, 0x02	; 2
    4f1c:	80 81       	ld	r24, Z
    4f1e:	80 32       	cpi	r24, 0x20	; 32
    4f20:	89 f4       	brne	.+34     	; 0x4f44 <RemSpaceLag+0x60>
    4f22:	fa 01       	movw	r30, r20
    4f24:	31 97       	sbiw	r30, 0x01	; 1
    4f26:	ec 0f       	add	r30, r28
    4f28:	fd 1f       	adc	r31, r29
    4f2a:	2f 5f       	subi	r18, 0xFF	; 255
    4f2c:	3f 4f       	sbci	r19, 0xFF	; 255
    4f2e:	80 81       	ld	r24, Z
    4f30:	80 32       	cpi	r24, 0x20	; 32
    4f32:	41 f4       	brne	.+16     	; 0x4f44 <RemSpaceLag+0x60>
		      Spaced[Length-i-1]=0;
    4f34:	10 82       	st	Z, r1
    4f36:	ba 2f       	mov	r27, r26
    4f38:	b2 1b       	sub	r27, r18
*/
                                                      //012345678
void RemSpaceLag(char *Spaced){//Remove Space Character 1234SSSSS L=9 i=0 i=7
unsigned char i=0,Length=0,PosSpaced=0;
     Length=strlen(Spaced);
     for(i=0;i<(Length-1);i++){
    4f3a:	82 2f       	mov	r24, r18
    4f3c:	90 e0       	ldi	r25, 0x00	; 0
    4f3e:	80 17       	cp	r24, r16
    4f40:	91 07       	cpc	r25, r17
    4f42:	2c f3       	brlt	.-54     	; 0x4f0e <RemSpaceLag+0x2a>
		      Spaced[Length-i-1]=0;
			  PosSpaced=Length-i-2;
			  }
         else break;
	 }
	 if (Spaced[PosSpaced]==' ')Spaced[PosSpaced]=0;
    4f44:	fe 01       	movw	r30, r28
    4f46:	eb 0f       	add	r30, r27
    4f48:	f1 1d       	adc	r31, r1
    4f4a:	80 81       	ld	r24, Z
    4f4c:	80 32       	cpi	r24, 0x20	; 32
    4f4e:	09 f4       	brne	.+2      	; 0x4f52 <RemSpaceLag+0x6e>
    4f50:	10 82       	st	Z, r1
	 if (Spaced[0]==' ')Spaced[0]=0;
    4f52:	88 81       	ld	r24, Y
    4f54:	80 32       	cpi	r24, 0x20	; 32
    4f56:	09 f4       	brne	.+2      	; 0x4f5a <RemSpaceLag+0x76>
    4f58:	18 82       	st	Y, r1
	 Spaced[strlen(Spaced)]=0;
    4f5a:	fe 01       	movw	r30, r28
    4f5c:	01 90       	ld	r0, Z+
    4f5e:	00 20       	and	r0, r0
    4f60:	e9 f7       	brne	.-6      	; 0x4f5c <RemSpaceLag+0x78>
    4f62:	31 97       	sbiw	r30, 0x01	; 1
    4f64:	ec 1b       	sub	r30, r28
    4f66:	fd 0b       	sbc	r31, r29
    4f68:	ec 0f       	add	r30, r28
    4f6a:	fd 1f       	adc	r31, r29
    4f6c:	10 82       	st	Z, r1
}
    4f6e:	df 91       	pop	r29
    4f70:	cf 91       	pop	r28
    4f72:	1f 91       	pop	r17
    4f74:	0f 91       	pop	r16
    4f76:	08 95       	ret

00004f78 <procMessage57>:
     StrPosCopy(rcv_trans,strAmount,135,7);
     StrPosCopy(rcv_trans,strGainPoints,142,4);
     return Result;
}

char procMessage57(){
    4f78:	1f 93       	push	r17
	    Dest[IdxSource+i]=Source[i];
	 }Dest[IdxSource+Length]=0;
}
char CharPosCopy(char *Source, unsigned int IdxSource){
     char Result;
     Result=Source[IdxSource];
    4f7a:	10 91 56 09 	lds	r17, 0x0956
    4f7e:	20 e0       	ldi	r18, 0x00	; 0
    4f80:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    4f82:	f9 01       	movw	r30, r18
    4f84:	e3 5e       	subi	r30, 0xE3	; 227
    4f86:	f6 4f       	sbci	r31, 0xF6	; 246
    4f88:	d9 01       	movw	r26, r18
    4f8a:	a7 57       	subi	r26, 0x77	; 119
    4f8c:	b4 4f       	sbci	r27, 0xF4	; 244
    4f8e:	95 96       	adiw	r26, 0x25	; 37
    4f90:	8c 91       	ld	r24, X
    4f92:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    4f94:	2f 5f       	subi	r18, 0xFF	; 255
    4f96:	3f 4f       	sbci	r19, 0xFF	; 255
    4f98:	24 31       	cpi	r18, 0x14	; 20
    4f9a:	31 05       	cpc	r19, r1
    4f9c:	91 f7       	brne	.-28     	; 0x4f82 <procMessage57+0xa>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    4f9e:	10 92 31 09 	sts	0x0931, r1
	 
	     //Card Status
		 Result=(CharPosCopy(rcv_trans,57)-'0')+1;
		 //CardID
		 StrPosCopy(strCardID,rcv_trans,37,20);
		 RemSpaceLead(strCardID);
    4fa2:	89 e8       	ldi	r24, 0x89	; 137
    4fa4:	9b e0       	ldi	r25, 0x0B	; 11
    4fa6:	0e 94 27 27 	call	0x4e4e	; 0x4e4e <RemSpaceLead>
    4faa:	20 e0       	ldi	r18, 0x00	; 0
    4fac:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    4fae:	f9 01       	movw	r30, r18
    4fb0:	ec 5d       	subi	r30, 0xDC	; 220
    4fb2:	fc 4f       	sbci	r31, 0xFC	; 252
    4fb4:	d9 01       	movw	r26, r18
    4fb6:	a3 5e       	subi	r26, 0xE3	; 227
    4fb8:	b6 4f       	sbci	r27, 0xF6	; 246
    4fba:	dc 96       	adiw	r26, 0x3c	; 60
    4fbc:	8c 91       	ld	r24, X
    4fbe:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    4fc0:	2f 5f       	subi	r18, 0xFF	; 255
    4fc2:	3f 4f       	sbci	r19, 0xFF	; 255
    4fc4:	28 32       	cpi	r18, 0x28	; 40
    4fc6:	31 05       	cpc	r19, r1
    4fc8:	91 f7       	brne	.-28     	; 0x4fae <procMessage57+0x36>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    4fca:	10 92 4c 03 	sts	0x034C, r1
		 //CardID
		 StrPosCopy(strCardID,rcv_trans,37,20);
		 RemSpaceLead(strCardID);
	     //Card Holder
		 StrPosCopy(rcv_trans,strCardHolder,60,40);
		 RemSpaceLag(strCardHolder);
    4fce:	84 e2       	ldi	r24, 0x24	; 36
    4fd0:	93 e0       	ldi	r25, 0x03	; 3
    4fd2:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <RemSpaceLag>
    4fd6:	20 e0       	ldi	r18, 0x00	; 0
    4fd8:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    4fda:	f9 01       	movw	r30, r18
    4fdc:	e5 5a       	subi	r30, 0xA5	; 165
    4fde:	fc 4f       	sbci	r31, 0xFC	; 252
    4fe0:	d9 01       	movw	r26, r18
    4fe2:	ab 54       	subi	r26, 0x4B	; 75
    4fe4:	b6 4f       	sbci	r27, 0xF6	; 246
    4fe6:	8c 91       	ld	r24, X
    4fe8:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    4fea:	2f 5f       	subi	r18, 0xFF	; 255
    4fec:	3f 4f       	sbci	r19, 0xFF	; 255
    4fee:	29 31       	cpi	r18, 0x19	; 25
    4ff0:	31 05       	cpc	r19, r1
    4ff2:	99 f7       	brne	.-26     	; 0x4fda <procMessage57+0x62>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    4ff4:	10 92 74 03 	sts	0x0374, r1
	     //Card Holder
		 StrPosCopy(rcv_trans,strCardHolder,60,40);
		 RemSpaceLag(strCardHolder);
		 //BalanceTypePrint
		 StrPosCopy(rcv_trans,strBalanceTypePrint,154-2,25);
		 RemSpaceLag(strBalanceTypePrint);
    4ff8:	8b e5       	ldi	r24, 0x5B	; 91
    4ffa:	93 e0       	ldi	r25, 0x03	; 3
    4ffc:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <RemSpaceLag>
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    5000:	80 91 ce 09 	lds	r24, 0x09CE
    5004:	80 93 e5 02 	sts	0x02E5, r24
	 }Dest[Length]=0;
    5008:	10 92 e6 02 	sts	0x02E6, r1
    500c:	20 e0       	ldi	r18, 0x00	; 0
    500e:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    5010:	f9 01       	movw	r30, r18
    5012:	e8 50       	subi	r30, 0x08	; 8
    5014:	f4 4f       	sbci	r31, 0xF4	; 244
    5016:	d9 01       	movw	r26, r18
    5018:	a1 53       	subi	r26, 0x31	; 49
    501a:	b6 4f       	sbci	r27, 0xF6	; 246
    501c:	8c 91       	ld	r24, X
    501e:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    5020:	2f 5f       	subi	r18, 0xFF	; 255
    5022:	3f 4f       	sbci	r19, 0xFF	; 255
    5024:	2d 30       	cpi	r18, 0x0D	; 13
    5026:	31 05       	cpc	r19, r1
    5028:	99 f7       	brne	.-26     	; 0x5010 <procMessage57+0x98>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    502a:	10 92 05 0c 	sts	0x0C05, r1
		 RemSpaceLag(strBalanceTypePrint);
         //BalanceTypeCode
		 StrPosCopy(rcv_trans,strBalanceCode,177,1);
		 //Balance
		 StrPosCopy(rcv_trans,strBalance,178,13);
		 RemSpaceLead(strBalance);
    502e:	88 ef       	ldi	r24, 0xF8	; 248
    5030:	9b e0       	ldi	r25, 0x0B	; 11
    5032:	0e 94 27 27 	call	0x4e4e	; 0x4e4e <RemSpaceLead>
    5036:	20 e0       	ldi	r18, 0x00	; 0
    5038:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    503a:	f9 01       	movw	r30, r18
    503c:	e6 50       	subi	r30, 0x06	; 6
    503e:	f7 4f       	sbci	r31, 0xF7	; 247
    5040:	d9 01       	movw	r26, r18
    5042:	a4 52       	subi	r26, 0x24	; 36
    5044:	b6 4f       	sbci	r27, 0xF6	; 246
    5046:	8c 91       	ld	r24, X
    5048:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    504a:	2f 5f       	subi	r18, 0xFF	; 255
    504c:	3f 4f       	sbci	r19, 0xFF	; 255
    504e:	2a 30       	cpi	r18, 0x0A	; 10
    5050:	31 05       	cpc	r19, r1
    5052:	99 f7       	brne	.-26     	; 0x503a <procMessage57+0xc2>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    5054:	10 92 04 09 	sts	0x0904, r1
		 //Balance
		 StrPosCopy(rcv_trans,strBalance,178,13);
		 RemSpaceLead(strBalance);
		 //LicPlate
		 StrPosCopy(rcv_trans,strLicPlate,193-2,10);
		 RemSpaceLag(strLicPlate);
    5058:	8a ef       	ldi	r24, 0xFA	; 250
    505a:	98 e0       	ldi	r25, 0x08	; 8
    505c:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <RemSpaceLag>
    5060:	20 e0       	ldi	r18, 0x00	; 0
    5062:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    5064:	f9 01       	movw	r30, r18
    5066:	e7 58       	subi	r30, 0x87	; 135
    5068:	f8 4f       	sbci	r31, 0xF8	; 248
    506a:	d9 01       	movw	r26, r18
    506c:	aa 51       	subi	r26, 0x1A	; 26
    506e:	b6 4f       	sbci	r27, 0xF6	; 246
    5070:	8c 91       	ld	r24, X
    5072:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    5074:	2f 5f       	subi	r18, 0xFF	; 255
    5076:	3f 4f       	sbci	r19, 0xFF	; 255
    5078:	24 31       	cpi	r18, 0x14	; 20
    507a:	31 05       	cpc	r19, r1
    507c:	99 f7       	brne	.-26     	; 0x5064 <procMessage57+0xec>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    507e:	10 92 8d 07 	sts	0x078D, r1
		 //LicPlate
		 StrPosCopy(rcv_trans,strLicPlate,193-2,10);
		 RemSpaceLag(strLicPlate);
		 //CompName
		 StrPosCopy(rcv_trans,strCompName,203-2,20);
		 RemSpaceLag(strCompName);
    5082:	89 e7       	ldi	r24, 0x79	; 121
    5084:	97 e0       	ldi	r25, 0x07	; 7
    5086:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <RemSpaceLag>
		 uart_print(0,1,strCompName);
		 
uart_print(0,1,strCardID);
*/	
     return Result;
}
    508a:	81 2f       	mov	r24, r17
    508c:	8f 52       	subi	r24, 0x2F	; 47
    508e:	1f 91       	pop	r17
    5090:	08 95       	ret

00005092 <clearString>:
	     break;
	}
  return Result;
}

void clearString(char *str){
    5092:	20 e0       	ldi	r18, 0x00	; 0
    5094:	30 e0       	ldi	r19, 0x00	; 0
    5096:	06 c0       	rjmp	.+12     	; 0x50a4 <clearString+0x12>
     int i;
	 for(i=0;i<strlen(str);i++){
	    str[i]=0;
    5098:	fc 01       	movw	r30, r24
    509a:	e2 0f       	add	r30, r18
    509c:	f3 1f       	adc	r31, r19
    509e:	10 82       	st	Z, r1
  return Result;
}

void clearString(char *str){
     int i;
	 for(i=0;i<strlen(str);i++){
    50a0:	2f 5f       	subi	r18, 0xFF	; 255
    50a2:	3f 4f       	sbci	r19, 0xFF	; 255
    50a4:	fc 01       	movw	r30, r24
    50a6:	01 90       	ld	r0, Z+
    50a8:	00 20       	and	r0, r0
    50aa:	e9 f7       	brne	.-6      	; 0x50a6 <clearString+0x14>
    50ac:	31 97       	sbiw	r30, 0x01	; 1
    50ae:	e8 1b       	sub	r30, r24
    50b0:	f9 0b       	sbc	r31, r25
    50b2:	2e 17       	cp	r18, r30
    50b4:	3f 07       	cpc	r19, r31
    50b6:	80 f3       	brcs	.-32     	; 0x5098 <clearString+0x6>
	    str[i]=0;
	 }
}
    50b8:	08 95       	ret

000050ba <AddZeroLead>:
	 }String[Size]=0;
  }
}


void AddZeroLead(char *String,unsigned char Size){// 1234 ->0000001234
    50ba:	bf 92       	push	r11
    50bc:	cf 92       	push	r12
    50be:	df 92       	push	r13
    50c0:	ef 92       	push	r14
    50c2:	ff 92       	push	r15
    50c4:	0f 93       	push	r16
    50c6:	1f 93       	push	r17
    50c8:	df 93       	push	r29
    50ca:	cf 93       	push	r28
    50cc:	cd b7       	in	r28, 0x3d	; 61
    50ce:	de b7       	in	r29, 0x3e	; 62
    50d0:	6e 97       	sbiw	r28, 0x1e	; 30
    50d2:	0f b6       	in	r0, 0x3f	; 63
    50d4:	f8 94       	cli
    50d6:	de bf       	out	0x3e, r29	; 62
    50d8:	0f be       	out	0x3f, r0	; 63
    50da:	cd bf       	out	0x3d, r28	; 61
    50dc:	8c 01       	movw	r16, r24
     char i,Length,strAdded[30];
     Length=strlen(String);
    50de:	fc 01       	movw	r30, r24
    50e0:	01 90       	ld	r0, Z+
    50e2:	00 20       	and	r0, r0
    50e4:	e9 f7       	brne	.-6      	; 0x50e0 <AddZeroLead+0x26>
    50e6:	31 97       	sbiw	r30, 0x01	; 1
    50e8:	2e 2f       	mov	r18, r30
    50ea:	28 1b       	sub	r18, r24

	 if (Size>Length){
    50ec:	26 17       	cp	r18, r22
    50ee:	e0 f5       	brcc	.+120    	; 0x5168 <AddZeroLead+0xae>
    50f0:	7e 01       	movw	r14, r28
    50f2:	08 94       	sec
    50f4:	e1 1c       	adc	r14, r1
    50f6:	f1 1c       	adc	r15, r1
    50f8:	f7 01       	movw	r30, r14
	 }String[Size]=0;
  }
}


void AddZeroLead(char *String,unsigned char Size){// 1234 ->0000001234
    50fa:	be 2c       	mov	r11, r14
     char i,Length,strAdded[30];
     Length=strlen(String);

	 if (Size>Length){
         for(i=0;i<Size;i++){
	         strAdded[i]='0';
    50fc:	90 e3       	ldi	r25, 0x30	; 48
    50fe:	01 c0       	rjmp	.+2      	; 0x5102 <AddZeroLead+0x48>
    5100:	91 93       	st	Z+, r25
void AddZeroLead(char *String,unsigned char Size){// 1234 ->0000001234
     char i,Length,strAdded[30];
     Length=strlen(String);

	 if (Size>Length){
         for(i=0;i<Size;i++){
    5102:	8e 2f       	mov	r24, r30
    5104:	8b 19       	sub	r24, r11
    5106:	86 17       	cp	r24, r22
    5108:	d8 f3       	brcs	.-10     	; 0x5100 <AddZeroLead+0x46>
	         strAdded[i]='0';
	     }strAdded[Size]=0;
    510a:	46 2f       	mov	r20, r22
    510c:	50 e0       	ldi	r21, 0x00	; 0
    510e:	ce 01       	movw	r24, r28
    5110:	01 96       	adiw	r24, 0x01	; 1
    5112:	fc 01       	movw	r30, r24
    5114:	e4 0f       	add	r30, r20
    5116:	f5 1f       	adc	r31, r21
    5118:	10 82       	st	Z, r1
	     //Copy
         for(i=(Size-Length);i<Size;i++){
    511a:	76 2f       	mov	r23, r22
    511c:	72 1b       	sub	r23, r18
    511e:	6c 01       	movw	r12, r24
	         strAdded[i]=String[i-(Size-Length)];
    5120:	30 e0       	ldi	r19, 0x00	; 0
    5122:	24 1b       	sub	r18, r20
    5124:	35 0b       	sbc	r19, r21
    5126:	0c c0       	rjmp	.+24     	; 0x5140 <AddZeroLead+0x86>
    5128:	e7 2f       	mov	r30, r23
    512a:	f0 e0       	ldi	r31, 0x00	; 0
    512c:	d6 01       	movw	r26, r12
    512e:	ae 0f       	add	r26, r30
    5130:	bf 1f       	adc	r27, r31
    5132:	e0 0f       	add	r30, r16
    5134:	f1 1f       	adc	r31, r17
    5136:	e2 0f       	add	r30, r18
    5138:	f3 1f       	adc	r31, r19
    513a:	80 81       	ld	r24, Z
    513c:	8c 93       	st	X, r24
	 if (Size>Length){
         for(i=0;i<Size;i++){
	         strAdded[i]='0';
	     }strAdded[Size]=0;
	     //Copy
         for(i=(Size-Length);i<Size;i++){
    513e:	7f 5f       	subi	r23, 0xFF	; 255
    5140:	76 17       	cp	r23, r22
    5142:	90 f3       	brcs	.-28     	; 0x5128 <AddZeroLead+0x6e>
	         strAdded[i]=String[i-(Size-Length)];
	     }strAdded[Size]=0;
    5144:	4c 0d       	add	r20, r12
    5146:	5d 1d       	adc	r21, r13
    5148:	da 01       	movw	r26, r20
    514a:	1c 92       	st	X, r1
    514c:	f8 01       	movw	r30, r16
    514e:	04 c0       	rjmp	.+8      	; 0x5158 <AddZeroLead+0x9e>
	     //Zeroed
         for(i=0;i<Size;i++){
	         String[i]=strAdded[i];
    5150:	d7 01       	movw	r26, r14
    5152:	8d 91       	ld	r24, X+
    5154:	7d 01       	movw	r14, r26
    5156:	81 93       	st	Z+, r24
	     //Copy
         for(i=(Size-Length);i<Size;i++){
	         strAdded[i]=String[i-(Size-Length)];
	     }strAdded[Size]=0;
	     //Zeroed
         for(i=0;i<Size;i++){
    5158:	8e 2d       	mov	r24, r14
    515a:	8b 19       	sub	r24, r11
    515c:	86 17       	cp	r24, r22
    515e:	c0 f3       	brcs	.-16     	; 0x5150 <AddZeroLead+0x96>
	         String[i]=strAdded[i];
	     }String[Size]=0;
    5160:	06 0f       	add	r16, r22
    5162:	11 1d       	adc	r17, r1
    5164:	f8 01       	movw	r30, r16
    5166:	10 82       	st	Z, r1
	 }
}
    5168:	6e 96       	adiw	r28, 0x1e	; 30
    516a:	0f b6       	in	r0, 0x3f	; 63
    516c:	f8 94       	cli
    516e:	de bf       	out	0x3e, r29	; 62
    5170:	0f be       	out	0x3f, r0	; 63
    5172:	cd bf       	out	0x3d, r28	; 61
    5174:	cf 91       	pop	r28
    5176:	df 91       	pop	r29
    5178:	1f 91       	pop	r17
    517a:	0f 91       	pop	r16
    517c:	ff 90       	pop	r15
    517e:	ef 90       	pop	r14
    5180:	df 90       	pop	r13
    5182:	cf 90       	pop	r12
    5184:	bf 90       	pop	r11
    5186:	08 95       	ret

00005188 <GetTotalizerMoney>:
	     FIPAddr=FIPAddr-1;	     
	     GetTotalizerData(TVOLUME,TOTALIZER_NOW,FIPAddr,iGrade,Result);
	 }
	 //NormalizeDecimal(eeprom_read_byte(&DefDecimalTotalVolume),2,Result);
}
void GetTotalizerMoney(char iPumpID,char iGrade, char *Result){
    5188:	0f 93       	push	r16
    518a:	1f 93       	push	r17
    518c:	cf 93       	push	r28
    518e:	df 93       	push	r29
    5190:	18 2f       	mov	r17, r24
    5192:	06 2f       	mov	r16, r22
    5194:	ea 01       	movw	r28, r20
     char FIPAddr;
     AddZeroLead(Result,13); 
    5196:	ca 01       	movw	r24, r20
    5198:	6d e0       	ldi	r22, 0x0D	; 13
    519a:	0e 94 5d 28 	call	0x50ba	; 0x50ba <AddZeroLead>
	 FIPAddr=GetFIPAddr(iPumpID);
    519e:	81 2f       	mov	r24, r17
    51a0:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <GetFIPAddr>
    51a4:	48 2f       	mov	r20, r24
	 if (FIPAddr>0){
    51a6:	88 23       	and	r24, r24
    51a8:	39 f0       	breq	.+14     	; 0x51b8 <GetTotalizerMoney+0x30>
	    FIPAddr=FIPAddr-1;
	    GetTotalizerData(TMONEY,TOTALIZER_NOW,FIPAddr,iGrade,Result);
    51aa:	41 50       	subi	r20, 0x01	; 1
    51ac:	81 e0       	ldi	r24, 0x01	; 1
    51ae:	61 e0       	ldi	r22, 0x01	; 1
    51b0:	20 2f       	mov	r18, r16
    51b2:	8e 01       	movw	r16, r28
    51b4:	0e 94 ac 20 	call	0x4158	; 0x4158 <GetTotalizerData>
	}
	 //NormalizeDecimal(eeprom_read_byte(&DefDecimalTotalMoney),2,Result);
}
    51b8:	df 91       	pop	r29
    51ba:	cf 91       	pop	r28
    51bc:	1f 91       	pop	r17
    51be:	0f 91       	pop	r16
    51c0:	08 95       	ret

000051c2 <GetTotalizerVolume>:
     AddZeroLead(Result,10);
	 sprintf_P(Result,PSTR("%s"),RecPumpData[iPumpID&0x0F].Money);
	 //NormalizeDecimal(eeprom_read_byte(&DefDecimalMoney),3,Result);
}

void GetTotalizerVolume(char iPumpID,char iGrade,char *Result){
    51c2:	0f 93       	push	r16
    51c4:	1f 93       	push	r17
    51c6:	cf 93       	push	r28
    51c8:	df 93       	push	r29
    51ca:	18 2f       	mov	r17, r24
    51cc:	06 2f       	mov	r16, r22
    51ce:	ea 01       	movw	r28, r20
     char FIPAddr;
     AddZeroLead(Result,11);
    51d0:	ca 01       	movw	r24, r20
    51d2:	6b e0       	ldi	r22, 0x0B	; 11
    51d4:	0e 94 5d 28 	call	0x50ba	; 0x50ba <AddZeroLead>
	 FIPAddr=GetFIPAddr(iPumpID);
    51d8:	81 2f       	mov	r24, r17
    51da:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <GetFIPAddr>
    51de:	48 2f       	mov	r20, r24
	 if (FIPAddr>0){
    51e0:	88 23       	and	r24, r24
    51e2:	39 f0       	breq	.+14     	; 0x51f2 <GetTotalizerVolume+0x30>
	     FIPAddr=FIPAddr-1;	     
	     GetTotalizerData(TVOLUME,TOTALIZER_NOW,FIPAddr,iGrade,Result);
    51e4:	41 50       	subi	r20, 0x01	; 1
    51e6:	80 e0       	ldi	r24, 0x00	; 0
    51e8:	61 e0       	ldi	r22, 0x01	; 1
    51ea:	20 2f       	mov	r18, r16
    51ec:	8e 01       	movw	r16, r28
    51ee:	0e 94 ac 20 	call	0x4158	; 0x4158 <GetTotalizerData>
	 }
	 //NormalizeDecimal(eeprom_read_byte(&DefDecimalTotalVolume),2,Result);
}
    51f2:	df 91       	pop	r29
    51f4:	cf 91       	pop	r28
    51f6:	1f 91       	pop	r17
    51f8:	0f 91       	pop	r16
    51fa:	08 95       	ret

000051fc <GetTransactionMoney>:
void GetTransactionVolume(char iPumpID,char *Result){
     AddZeroLead(Result,10);
     sprintf_P(Result,PSTR("%s"),RecPumpData[iPumpID&0x0F].Volume); 
	 //NormalizeDecimal(eeprom_read_byte(&DefDecimalVolume),3,Result);
}
void GetTransactionMoney(char iPumpID,char *Result){
    51fc:	ef 92       	push	r14
    51fe:	ff 92       	push	r15
    5200:	0f 93       	push	r16
    5202:	1f 93       	push	r17
    5204:	08 2f       	mov	r16, r24
    5206:	7b 01       	movw	r14, r22
     AddZeroLead(Result,10);
    5208:	cb 01       	movw	r24, r22
    520a:	6a e0       	ldi	r22, 0x0A	; 10
    520c:	0e 94 5d 28 	call	0x50ba	; 0x50ba <AddZeroLead>
	 sprintf_P(Result,PSTR("%s"),RecPumpData[iPumpID&0x0F].Money);
    5210:	00 d0       	rcall	.+0      	; 0x5212 <GetTransactionMoney+0x16>
    5212:	00 d0       	rcall	.+0      	; 0x5214 <GetTransactionMoney+0x18>
    5214:	00 d0       	rcall	.+0      	; 0x5216 <GetTransactionMoney+0x1a>
    5216:	ed b7       	in	r30, 0x3d	; 61
    5218:	fe b7       	in	r31, 0x3e	; 62
    521a:	31 96       	adiw	r30, 0x01	; 1
    521c:	ad b7       	in	r26, 0x3d	; 61
    521e:	be b7       	in	r27, 0x3e	; 62
    5220:	12 96       	adiw	r26, 0x02	; 2
    5222:	fc 92       	st	X, r15
    5224:	ee 92       	st	-X, r14
    5226:	11 97       	sbiw	r26, 0x01	; 1
    5228:	89 e4       	ldi	r24, 0x49	; 73
    522a:	95 e0       	ldi	r25, 0x05	; 5
    522c:	93 83       	std	Z+3, r25	; 0x03
    522e:	82 83       	std	Z+2, r24	; 0x02
    5230:	10 e0       	ldi	r17, 0x00	; 0
    5232:	0f 70       	andi	r16, 0x0F	; 15
    5234:	10 70       	andi	r17, 0x00	; 0
    5236:	85 e3       	ldi	r24, 0x35	; 53
    5238:	90 e0       	ldi	r25, 0x00	; 0
    523a:	9c 01       	movw	r18, r24
    523c:	02 9f       	mul	r16, r18
    523e:	c0 01       	movw	r24, r0
    5240:	03 9f       	mul	r16, r19
    5242:	90 0d       	add	r25, r0
    5244:	12 9f       	mul	r17, r18
    5246:	90 0d       	add	r25, r0
    5248:	11 24       	eor	r1, r1
    524a:	8c 52       	subi	r24, 0x2C	; 44
    524c:	9a 4f       	sbci	r25, 0xFA	; 250
    524e:	95 83       	std	Z+5, r25	; 0x05
    5250:	84 83       	std	Z+4, r24	; 0x04
    5252:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
    5256:	8d b7       	in	r24, 0x3d	; 61
    5258:	9e b7       	in	r25, 0x3e	; 62
    525a:	06 96       	adiw	r24, 0x06	; 6
    525c:	0f b6       	in	r0, 0x3f	; 63
    525e:	f8 94       	cli
    5260:	9e bf       	out	0x3e, r25	; 62
    5262:	0f be       	out	0x3f, r0	; 63
    5264:	8d bf       	out	0x3d, r24	; 61
	 //NormalizeDecimal(eeprom_read_byte(&DefDecimalMoney),3,Result);
}
    5266:	1f 91       	pop	r17
    5268:	0f 91       	pop	r16
    526a:	ff 90       	pop	r15
    526c:	ef 90       	pop	r14
    526e:	08 95       	ret

00005270 <GetTransactionVolume>:
     }
*/
     FormatDecimal(Result,CurrentDecimal);
}

void GetTransactionVolume(char iPumpID,char *Result){
    5270:	ef 92       	push	r14
    5272:	ff 92       	push	r15
    5274:	0f 93       	push	r16
    5276:	1f 93       	push	r17
    5278:	08 2f       	mov	r16, r24
    527a:	7b 01       	movw	r14, r22
     AddZeroLead(Result,10);
    527c:	cb 01       	movw	r24, r22
    527e:	6a e0       	ldi	r22, 0x0A	; 10
    5280:	0e 94 5d 28 	call	0x50ba	; 0x50ba <AddZeroLead>
     sprintf_P(Result,PSTR("%s"),RecPumpData[iPumpID&0x0F].Volume); 
    5284:	00 d0       	rcall	.+0      	; 0x5286 <GetTransactionVolume+0x16>
    5286:	00 d0       	rcall	.+0      	; 0x5288 <GetTransactionVolume+0x18>
    5288:	00 d0       	rcall	.+0      	; 0x528a <GetTransactionVolume+0x1a>
    528a:	ed b7       	in	r30, 0x3d	; 61
    528c:	fe b7       	in	r31, 0x3e	; 62
    528e:	31 96       	adiw	r30, 0x01	; 1
    5290:	ad b7       	in	r26, 0x3d	; 61
    5292:	be b7       	in	r27, 0x3e	; 62
    5294:	12 96       	adiw	r26, 0x02	; 2
    5296:	fc 92       	st	X, r15
    5298:	ee 92       	st	-X, r14
    529a:	11 97       	sbiw	r26, 0x01	; 1
    529c:	8c e4       	ldi	r24, 0x4C	; 76
    529e:	95 e0       	ldi	r25, 0x05	; 5
    52a0:	93 83       	std	Z+3, r25	; 0x03
    52a2:	82 83       	std	Z+2, r24	; 0x02
    52a4:	10 e0       	ldi	r17, 0x00	; 0
    52a6:	0f 70       	andi	r16, 0x0F	; 15
    52a8:	10 70       	andi	r17, 0x00	; 0
    52aa:	85 e3       	ldi	r24, 0x35	; 53
    52ac:	90 e0       	ldi	r25, 0x00	; 0
    52ae:	9c 01       	movw	r18, r24
    52b0:	02 9f       	mul	r16, r18
    52b2:	c0 01       	movw	r24, r0
    52b4:	03 9f       	mul	r16, r19
    52b6:	90 0d       	add	r25, r0
    52b8:	12 9f       	mul	r17, r18
    52ba:	90 0d       	add	r25, r0
    52bc:	11 24       	eor	r1, r1
    52be:	85 53       	subi	r24, 0x35	; 53
    52c0:	9a 4f       	sbci	r25, 0xFA	; 250
    52c2:	95 83       	std	Z+5, r25	; 0x05
    52c4:	84 83       	std	Z+4, r24	; 0x04
    52c6:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
    52ca:	8d b7       	in	r24, 0x3d	; 61
    52cc:	9e b7       	in	r25, 0x3e	; 62
    52ce:	06 96       	adiw	r24, 0x06	; 6
    52d0:	0f b6       	in	r0, 0x3f	; 63
    52d2:	f8 94       	cli
    52d4:	9e bf       	out	0x3e, r25	; 62
    52d6:	0f be       	out	0x3f, r0	; 63
    52d8:	8d bf       	out	0x3d, r24	; 61
	 //NormalizeDecimal(eeprom_read_byte(&DefDecimalVolume),3,Result);
}
    52da:	1f 91       	pop	r17
    52dc:	0f 91       	pop	r16
    52de:	ff 90       	pop	r15
    52e0:	ef 90       	pop	r14
    52e2:	08 95       	ret

000052e4 <SetTotalizerData>:
			  }
		  }
	 }
}

void SetTotalizerData(char TType, char TAddr, char xPumpAddr, char xGradeAddr, char *strValue){// 0 1 1 "00000000"
    52e4:	af 92       	push	r10
    52e6:	bf 92       	push	r11
    52e8:	cf 92       	push	r12
    52ea:	df 92       	push	r13
    52ec:	ef 92       	push	r14
    52ee:	ff 92       	push	r15
    52f0:	0f 93       	push	r16
    52f2:	1f 93       	push	r17
    52f4:	df 93       	push	r29
    52f6:	cf 93       	push	r28
    52f8:	cd b7       	in	r28, 0x3d	; 61
    52fa:	de b7       	in	r29, 0x3e	; 62
    52fc:	65 97       	sbiw	r28, 0x15	; 21
    52fe:	0f b6       	in	r0, 0x3f	; 63
    5300:	f8 94       	cli
    5302:	de bf       	out	0x3e, r29	; 62
    5304:	0f be       	out	0x3f, r0	; 63
    5306:	cd bf       	out	0x3d, r28	; 61
    5308:	d8 2e       	mov	r13, r24
    530a:	c6 2e       	mov	r12, r22
    530c:	b4 2e       	mov	r11, r20
    530e:	a2 2e       	mov	r10, r18
     char rawValue[6],iPumpAddr,iGrade;
	 char strPValue[15];
	 char Idx;
	 char strSend[30];
	 //Convert String to RawData
	 if (strlen(strValue)<=12){
    5310:	d8 01       	movw	r26, r16
    5312:	0d 90       	ld	r0, X+
    5314:	00 20       	and	r0, r0
    5316:	e9 f7       	brne	.-6      	; 0x5312 <SetTotalizerData+0x2e>
    5318:	11 97       	sbiw	r26, 0x01	; 1
    531a:	a0 1b       	sub	r26, r16
    531c:	b1 0b       	sbc	r27, r17
    531e:	77 e0       	ldi	r23, 0x07	; 7
    5320:	e7 2e       	mov	r14, r23
    5322:	f1 2c       	mov	r15, r1
    5324:	ec 0e       	add	r14, r28
    5326:	fd 1e       	adc	r15, r29
    5328:	ad 30       	cpi	r26, 0x0D	; 13
    532a:	b1 05       	cpc	r27, r1
    532c:	58 f5       	brcc	.+86     	; 0x5384 <SetTotalizerData+0xa0>
	     sprintf_P(strPValue,PSTR("%s"),strValue);
    532e:	00 d0       	rcall	.+0      	; 0x5330 <SetTotalizerData+0x4c>
    5330:	00 d0       	rcall	.+0      	; 0x5332 <SetTotalizerData+0x4e>
    5332:	00 d0       	rcall	.+0      	; 0x5334 <SetTotalizerData+0x50>
    5334:	ed b7       	in	r30, 0x3d	; 61
    5336:	fe b7       	in	r31, 0x3e	; 62
    5338:	31 96       	adiw	r30, 0x01	; 1
    533a:	ad b7       	in	r26, 0x3d	; 61
    533c:	be b7       	in	r27, 0x3e	; 62
    533e:	12 96       	adiw	r26, 0x02	; 2
    5340:	fc 92       	st	X, r15
    5342:	ee 92       	st	-X, r14
    5344:	11 97       	sbiw	r26, 0x01	; 1
    5346:	8e e1       	ldi	r24, 0x1E	; 30
    5348:	97 e0       	ldi	r25, 0x07	; 7
    534a:	93 83       	std	Z+3, r25	; 0x03
    534c:	82 83       	std	Z+2, r24	; 0x02
    534e:	15 83       	std	Z+5, r17	; 0x05
    5350:	04 83       	std	Z+4, r16	; 0x04
    5352:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
		 if (strlen(strPValue)<12)AddZeroLead(strPValue,12);
    5356:	f7 01       	movw	r30, r14
    5358:	01 90       	ld	r0, Z+
    535a:	00 20       	and	r0, r0
    535c:	e9 f7       	brne	.-6      	; 0x5358 <SetTotalizerData+0x74>
    535e:	31 97       	sbiw	r30, 0x01	; 1
    5360:	ee 19       	sub	r30, r14
    5362:	ff 09       	sbc	r31, r15
    5364:	4d b7       	in	r20, 0x3d	; 61
    5366:	5e b7       	in	r21, 0x3e	; 62
    5368:	4a 5f       	subi	r20, 0xFA	; 250
    536a:	5f 4f       	sbci	r21, 0xFF	; 255
    536c:	0f b6       	in	r0, 0x3f	; 63
    536e:	f8 94       	cli
    5370:	5e bf       	out	0x3e, r21	; 62
    5372:	0f be       	out	0x3f, r0	; 63
    5374:	4d bf       	out	0x3d, r20	; 61
    5376:	3c 97       	sbiw	r30, 0x0c	; 12
    5378:	a0 f4       	brcc	.+40     	; 0x53a2 <SetTotalizerData+0xbe>
    537a:	c7 01       	movw	r24, r14
    537c:	6c e0       	ldi	r22, 0x0C	; 12
    537e:	0e 94 5d 28 	call	0x50ba	; 0x50ba <AddZeroLead>
    5382:	0f c0       	rjmp	.+30     	; 0x53a2 <SetTotalizerData+0xbe>
    5384:	8a 2f       	mov	r24, r26
    5386:	8c 50       	subi	r24, 0x0C	; 12
    5388:	f8 01       	movw	r30, r16
    538a:	e8 0f       	add	r30, r24
    538c:	f1 1d       	adc	r31, r1
    538e:	d7 01       	movw	r26, r14
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    5390:	9e 01       	movw	r18, r28
    5392:	2d 5e       	subi	r18, 0xED	; 237
    5394:	3f 4f       	sbci	r19, 0xFF	; 255
	    Dest[i]=Source[IdxSource+i];
    5396:	81 91       	ld	r24, Z+
    5398:	8d 93       	st	X+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    539a:	a2 17       	cp	r26, r18
    539c:	b3 07       	cpc	r27, r19
    539e:	d9 f7       	brne	.-10     	; 0x5396 <SetTotalizerData+0xb2>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    53a0:	1b 8a       	std	Y+19, r1	; 0x13
	 else {//Lebih dari 8: 0123456789
	     Idx=strlen(strValue)-12;
	     StrPosCopy(strValue,strPValue,Idx,12);
	 }

	 iPumpAddr=(xPumpAddr&0x0F);
    53a2:	0b 2d       	mov	r16, r11
    53a4:	0f 70       	andi	r16, 0x0F	; 15
	 if ((xGradeAddr>=1)&&(xGradeAddr<=6))
    53a6:	1a 2d       	mov	r17, r10
    53a8:	11 50       	subi	r17, 0x01	; 1
    53aa:	16 30       	cpi	r17, 0x06	; 6
    53ac:	08 f0       	brcs	.+2      	; 0x53b0 <SetTotalizerData+0xcc>
    53ae:	10 e0       	ldi	r17, 0x00	; 0
	     iGrade=xGradeAddr-1;
	 StrToRaw(strPValue,rawValue);
    53b0:	ce 01       	movw	r24, r28
    53b2:	07 96       	adiw	r24, 0x07	; 7
    53b4:	7e 01       	movw	r14, r28
    53b6:	08 94       	sec
    53b8:	e1 1c       	adc	r14, r1
    53ba:	f1 1c       	adc	r15, r1
    53bc:	b7 01       	movw	r22, r14
    53be:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <StrToRaw>

	 if (TType==TVOLUME)eeprom_write_block((const void*)&rawValue,(void*)&(TotalVolume[TAddr][iPumpAddr][iGrade]), sizeof(rawValue));
    53c2:	dd 20       	and	r13, r13
    53c4:	d9 f4       	brne	.+54     	; 0x53fc <SetTotalizerData+0x118>
    53c6:	64 e2       	ldi	r22, 0x24	; 36
    53c8:	06 9f       	mul	r16, r22
    53ca:	b0 01       	movw	r22, r0
    53cc:	11 24       	eor	r1, r1
    53ce:	2c 2d       	mov	r18, r12
    53d0:	30 e0       	ldi	r19, 0x00	; 0
    53d2:	80 e2       	ldi	r24, 0x20	; 32
    53d4:	91 e0       	ldi	r25, 0x01	; 1
    53d6:	dc 01       	movw	r26, r24
    53d8:	2a 9f       	mul	r18, r26
    53da:	c0 01       	movw	r24, r0
    53dc:	2b 9f       	mul	r18, r27
    53de:	90 0d       	add	r25, r0
    53e0:	3a 9f       	mul	r19, r26
    53e2:	90 0d       	add	r25, r0
    53e4:	11 24       	eor	r1, r1
    53e6:	68 0f       	add	r22, r24
    53e8:	79 1f       	adc	r23, r25
    53ea:	86 e0       	ldi	r24, 0x06	; 6
    53ec:	18 9f       	mul	r17, r24
    53ee:	c0 01       	movw	r24, r0
    53f0:	11 24       	eor	r1, r1
    53f2:	68 0f       	add	r22, r24
    53f4:	79 1f       	adc	r23, r25
    53f6:	6d 53       	subi	r22, 0x3D	; 61
    53f8:	7c 4f       	sbci	r23, 0xFC	; 252
    53fa:	1d c0       	rjmp	.+58     	; 0x5436 <SetTotalizerData+0x152>
	 else 
	 if (TType==TMONEY)eeprom_write_block((const void*)&rawValue,(void*)&(TotalMoney[TAddr][iPumpAddr][iGrade]), sizeof(rawValue));
    53fc:	b1 e0       	ldi	r27, 0x01	; 1
    53fe:	db 16       	cp	r13, r27
    5400:	f9 f4       	brne	.+62     	; 0x5440 <SetTotalizerData+0x15c>
    5402:	64 e2       	ldi	r22, 0x24	; 36
    5404:	06 9f       	mul	r16, r22
    5406:	b0 01       	movw	r22, r0
    5408:	11 24       	eor	r1, r1
    540a:	2c 2d       	mov	r18, r12
    540c:	30 e0       	ldi	r19, 0x00	; 0
    540e:	80 e2       	ldi	r24, 0x20	; 32
    5410:	91 e0       	ldi	r25, 0x01	; 1
    5412:	ac 01       	movw	r20, r24
    5414:	24 9f       	mul	r18, r20
    5416:	c0 01       	movw	r24, r0
    5418:	25 9f       	mul	r18, r21
    541a:	90 0d       	add	r25, r0
    541c:	34 9f       	mul	r19, r20
    541e:	90 0d       	add	r25, r0
    5420:	11 24       	eor	r1, r1
    5422:	68 0f       	add	r22, r24
    5424:	79 1f       	adc	r23, r25
    5426:	86 e0       	ldi	r24, 0x06	; 6
    5428:	18 9f       	mul	r17, r24
    542a:	c0 01       	movw	r24, r0
    542c:	11 24       	eor	r1, r1
    542e:	68 0f       	add	r22, r24
    5430:	79 1f       	adc	r23, r25
    5432:	6d 5f       	subi	r22, 0xFD	; 253
    5434:	79 4f       	sbci	r23, 0xF9	; 249
    5436:	c7 01       	movw	r24, r14
    5438:	46 e0       	ldi	r20, 0x06	; 6
    543a:	50 e0       	ldi	r21, 0x00	; 0
    543c:	0e 94 d1 ac 	call	0x159a2	; 0x159a2 <__eewr_block_m128>
}
    5440:	65 96       	adiw	r28, 0x15	; 21
    5442:	0f b6       	in	r0, 0x3f	; 63
    5444:	f8 94       	cli
    5446:	de bf       	out	0x3e, r29	; 62
    5448:	0f be       	out	0x3f, r0	; 63
    544a:	cd bf       	out	0x3d, r28	; 61
    544c:	cf 91       	pop	r28
    544e:	df 91       	pop	r29
    5450:	1f 91       	pop	r17
    5452:	0f 91       	pop	r16
    5454:	ff 90       	pop	r15
    5456:	ef 90       	pop	r14
    5458:	df 90       	pop	r13
    545a:	cf 90       	pop	r12
    545c:	bf 90       	pop	r11
    545e:	af 90       	pop	r10
    5460:	08 95       	ret

00005462 <SaveTotalizerCurrentToLast>:
	 }Dest[12]=0;
}

//SetTotalizerData(TVOLUME,TOTALIZER_NOW,1,1,strVolume)

void SaveTotalizerCurrentToLast(){
    5462:	4f 92       	push	r4
    5464:	5f 92       	push	r5
    5466:	7f 92       	push	r7
    5468:	8f 92       	push	r8
    546a:	9f 92       	push	r9
    546c:	af 92       	push	r10
    546e:	bf 92       	push	r11
    5470:	cf 92       	push	r12
    5472:	df 92       	push	r13
    5474:	ef 92       	push	r14
    5476:	ff 92       	push	r15
    5478:	0f 93       	push	r16
    547a:	1f 93       	push	r17
    547c:	df 93       	push	r29
    547e:	cf 93       	push	r28
    5480:	cd b7       	in	r28, 0x3d	; 61
    5482:	de b7       	in	r29, 0x3e	; 62
    5484:	2f 97       	sbiw	r28, 0x0f	; 15
    5486:	0f b6       	in	r0, 0x3f	; 63
    5488:	f8 94       	cli
    548a:	de bf       	out	0x3e, r29	; 62
    548c:	0f be       	out	0x3f, r0	; 63
    548e:	cd bf       	out	0x3d, r28	; 61
    5490:	77 24       	eor	r7, r7
    5492:	73 94       	inc	r7
	 
	 for (iPump=1;iPump<=16;iPump++){//Pump
	      FIPAddr=GetFIPAddr(iPump);
		  if (FIPAddr>0){
		      FIPAddr=FIPAddr-1;
			  for(iGrade=1;iGrade<=6;iGrade++){
    5494:	4e 01       	movw	r8, r28
    5496:	08 94       	sec
    5498:	81 1c       	adc	r8, r1
    549a:	91 1c       	adc	r9, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    549c:	e0 e1       	ldi	r30, 0x10	; 16
    549e:	4e 2e       	mov	r4, r30
    54a0:	51 2c       	mov	r5, r1
    54a2:	4c 0e       	add	r4, r28
    54a4:	5d 1e       	adc	r5, r29
     char iPump,iGrade;
     char strValue[15];
     char FIPAddr;
	 
	 for (iPump=1;iPump<=16;iPump++){//Pump
	      FIPAddr=GetFIPAddr(iPump);
    54a6:	87 2d       	mov	r24, r7
    54a8:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <GetFIPAddr>
		  if (FIPAddr>0){
    54ac:	88 23       	and	r24, r24
    54ae:	91 f1       	breq	.+100    	; 0x5514 <SaveTotalizerCurrentToLast+0xb2>
		      FIPAddr=FIPAddr-1;
    54b0:	a8 2e       	mov	r10, r24
    54b2:	aa 94       	dec	r10
    54b4:	bb 24       	eor	r11, r11
    54b6:	b3 94       	inc	r11
    54b8:	2a c0       	rjmp	.+84     	; 0x550e <SaveTotalizerCurrentToLast+0xac>
}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
	     strMemory[i]=data;
    54ba:	f7 01       	movw	r30, r14
    54bc:	11 92       	st	Z+, r1
    54be:	7f 01       	movw	r14, r30

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    54c0:	e4 15       	cp	r30, r4
    54c2:	f5 05       	cpc	r31, r5
    54c4:	d1 f7       	brne	.-12     	; 0x54ba <SaveTotalizerCurrentToLast+0x58>
	      FIPAddr=GetFIPAddr(iPump);
		  if (FIPAddr>0){
		      FIPAddr=FIPAddr-1;
			  for(iGrade=1;iGrade<=6;iGrade++){
				  FillChar(strValue,sizeof(strValue),0);
				  GetTotalizerData(TVOLUME,TOTALIZER_NOW,FIPAddr,iGrade,strValue);
    54c6:	80 e0       	ldi	r24, 0x00	; 0
    54c8:	61 e0       	ldi	r22, 0x01	; 1
    54ca:	4a 2d       	mov	r20, r10
    54cc:	2b 2d       	mov	r18, r11
    54ce:	84 01       	movw	r16, r8
    54d0:	0e 94 ac 20 	call	0x4158	; 0x4158 <GetTotalizerData>
				  SetTotalizerData(TVOLUME,TOTALIZER_LAST,FIPAddr,iGrade,strValue);
    54d4:	80 e0       	ldi	r24, 0x00	; 0
    54d6:	60 e0       	ldi	r22, 0x00	; 0
    54d8:	4a 2d       	mov	r20, r10
    54da:	2b 2d       	mov	r18, r11
    54dc:	0e 94 72 29 	call	0x52e4	; 0x52e4 <SetTotalizerData>
}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
	     strMemory[i]=data;
    54e0:	f6 01       	movw	r30, r12
    54e2:	11 92       	st	Z+, r1
    54e4:	6f 01       	movw	r12, r30

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    54e6:	ee 15       	cp	r30, r14
    54e8:	ff 05       	cpc	r31, r15
    54ea:	d1 f7       	brne	.-12     	; 0x54e0 <SaveTotalizerCurrentToLast+0x7e>
			  for(iGrade=1;iGrade<=6;iGrade++){
				  FillChar(strValue,sizeof(strValue),0);
				  GetTotalizerData(TVOLUME,TOTALIZER_NOW,FIPAddr,iGrade,strValue);
				  SetTotalizerData(TVOLUME,TOTALIZER_LAST,FIPAddr,iGrade,strValue);
				  FillChar(strValue,sizeof(strValue),0);
				  GetTotalizerData(TMONEY,TOTALIZER_NOW,FIPAddr,iGrade,strValue);
    54ec:	81 e0       	ldi	r24, 0x01	; 1
    54ee:	61 e0       	ldi	r22, 0x01	; 1
    54f0:	4a 2d       	mov	r20, r10
    54f2:	2b 2d       	mov	r18, r11
    54f4:	84 01       	movw	r16, r8
    54f6:	0e 94 ac 20 	call	0x4158	; 0x4158 <GetTotalizerData>
				  SetTotalizerData(TMONEY,TOTALIZER_LAST,FIPAddr,iGrade,strValue);
    54fa:	81 e0       	ldi	r24, 0x01	; 1
    54fc:	60 e0       	ldi	r22, 0x00	; 0
    54fe:	4a 2d       	mov	r20, r10
    5500:	2b 2d       	mov	r18, r11
    5502:	0e 94 72 29 	call	0x52e4	; 0x52e4 <SetTotalizerData>
	 
	 for (iPump=1;iPump<=16;iPump++){//Pump
	      FIPAddr=GetFIPAddr(iPump);
		  if (FIPAddr>0){
		      FIPAddr=FIPAddr-1;
			  for(iGrade=1;iGrade<=6;iGrade++){
    5506:	b3 94       	inc	r11
    5508:	f7 e0       	ldi	r31, 0x07	; 7
    550a:	bf 16       	cp	r11, r31
    550c:	19 f0       	breq	.+6      	; 0x5514 <SaveTotalizerCurrentToLast+0xb2>
    550e:	64 01       	movw	r12, r8
    5510:	74 01       	movw	r14, r8
    5512:	d3 cf       	rjmp	.-90     	; 0x54ba <SaveTotalizerCurrentToLast+0x58>
void SaveTotalizerCurrentToLast(){
     char iPump,iGrade;
     char strValue[15];
     char FIPAddr;
	 
	 for (iPump=1;iPump<=16;iPump++){//Pump
    5514:	73 94       	inc	r7
    5516:	81 e1       	ldi	r24, 0x11	; 17
    5518:	78 16       	cp	r7, r24
    551a:	29 f6       	brne	.-118    	; 0x54a6 <SaveTotalizerCurrentToLast+0x44>
				  GetTotalizerData(TMONEY,TOTALIZER_NOW,FIPAddr,iGrade,strValue);
				  SetTotalizerData(TMONEY,TOTALIZER_LAST,FIPAddr,iGrade,strValue);
			  }
		  }
	 }
}
    551c:	2f 96       	adiw	r28, 0x0f	; 15
    551e:	0f b6       	in	r0, 0x3f	; 63
    5520:	f8 94       	cli
    5522:	de bf       	out	0x3e, r29	; 62
    5524:	0f be       	out	0x3f, r0	; 63
    5526:	cd bf       	out	0x3d, r28	; 61
    5528:	cf 91       	pop	r28
    552a:	df 91       	pop	r29
    552c:	1f 91       	pop	r17
    552e:	0f 91       	pop	r16
    5530:	ff 90       	pop	r15
    5532:	ef 90       	pop	r14
    5534:	df 90       	pop	r13
    5536:	cf 90       	pop	r12
    5538:	bf 90       	pop	r11
    553a:	af 90       	pop	r10
    553c:	9f 90       	pop	r9
    553e:	8f 90       	pop	r8
    5540:	7f 90       	pop	r7
    5542:	5f 90       	pop	r5
    5544:	4f 90       	pop	r4
    5546:	08 95       	ret

00005548 <ResetTotalizer>:
}

//-------------------Totalizer-----------------------------------------
//TAddr{TOTALIZER_LAST,TOTALIZER_NOW}
//TType:{TNONE,TVOLUME,TMONEY};
void ResetTotalizer(char TAddr){//Clear All TotalizerData;
    5548:	af 92       	push	r10
    554a:	bf 92       	push	r11
    554c:	cf 92       	push	r12
    554e:	df 92       	push	r13
    5550:	ef 92       	push	r14
    5552:	ff 92       	push	r15
    5554:	0f 93       	push	r16
    5556:	1f 93       	push	r17
    5558:	df 93       	push	r29
    555a:	cf 93       	push	r28
    555c:	cd b7       	in	r28, 0x3d	; 61
    555e:	de b7       	in	r29, 0x3e	; 62
    5560:	29 97       	sbiw	r28, 0x09	; 9
    5562:	0f b6       	in	r0, 0x3f	; 63
    5564:	f8 94       	cli
    5566:	de bf       	out	0x3e, r29	; 62
    5568:	0f be       	out	0x3f, r0	; 63
    556a:	cd bf       	out	0x3d, r28	; 61
    556c:	a8 2e       	mov	r10, r24
     char iPump,iGrade;
     char strValue[9];
	 char FIPAddr;
	 
	 sprintf_P(strValue,PSTR("00000000"));
    556e:	00 d0       	rcall	.+0      	; 0x5570 <ResetTotalizer+0x28>
    5570:	00 d0       	rcall	.+0      	; 0x5572 <ResetTotalizer+0x2a>
    5572:	6e 01       	movw	r12, r28
    5574:	08 94       	sec
    5576:	c1 1c       	adc	r12, r1
    5578:	d1 1c       	adc	r13, r1
    557a:	ed b7       	in	r30, 0x3d	; 61
    557c:	fe b7       	in	r31, 0x3e	; 62
    557e:	d2 82       	std	Z+2, r13	; 0x02
    5580:	c1 82       	std	Z+1, r12	; 0x01
    5582:	81 e2       	ldi	r24, 0x21	; 33
    5584:	97 e0       	ldi	r25, 0x07	; 7
    5586:	94 83       	std	Z+4, r25	; 0x04
    5588:	83 83       	std	Z+3, r24	; 0x03
    558a:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
    558e:	ee 24       	eor	r14, r14
    5590:	e3 94       	inc	r14
    5592:	0f 90       	pop	r0
    5594:	0f 90       	pop	r0
    5596:	0f 90       	pop	r0
    5598:	0f 90       	pop	r0
	 for (iPump=1;iPump<=16;iPump++){//Pump
	      FIPAddr=GetFIPAddr(iPump);
    559a:	8e 2d       	mov	r24, r14
    559c:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <GetFIPAddr>
		  if (FIPAddr>0){
    55a0:	88 23       	and	r24, r24
    55a2:	a9 f0       	breq	.+42     	; 0x55ce <ResetTotalizer+0x86>
		      FIPAddr=FIPAddr-1;
    55a4:	b8 2e       	mov	r11, r24
    55a6:	ba 94       	dec	r11
    55a8:	ff 24       	eor	r15, r15
    55aa:	f3 94       	inc	r15
			  for(iGrade=1;iGrade<=6;iGrade++){
				  SetTotalizerData(TVOLUME,TAddr,FIPAddr,iGrade,strValue);
    55ac:	80 e0       	ldi	r24, 0x00	; 0
    55ae:	6a 2d       	mov	r22, r10
    55b0:	4b 2d       	mov	r20, r11
    55b2:	2f 2d       	mov	r18, r15
    55b4:	86 01       	movw	r16, r12
    55b6:	0e 94 72 29 	call	0x52e4	; 0x52e4 <SetTotalizerData>
				  SetTotalizerData(TMONEY,TAddr,FIPAddr,iGrade,strValue);
    55ba:	81 e0       	ldi	r24, 0x01	; 1
    55bc:	6a 2d       	mov	r22, r10
    55be:	4b 2d       	mov	r20, r11
    55c0:	2f 2d       	mov	r18, r15
    55c2:	0e 94 72 29 	call	0x52e4	; 0x52e4 <SetTotalizerData>
	 sprintf_P(strValue,PSTR("00000000"));
	 for (iPump=1;iPump<=16;iPump++){//Pump
	      FIPAddr=GetFIPAddr(iPump);
		  if (FIPAddr>0){
		      FIPAddr=FIPAddr-1;
			  for(iGrade=1;iGrade<=6;iGrade++){
    55c6:	f3 94       	inc	r15
    55c8:	f7 e0       	ldi	r31, 0x07	; 7
    55ca:	ff 16       	cp	r15, r31
    55cc:	79 f7       	brne	.-34     	; 0x55ac <ResetTotalizer+0x64>
     char iPump,iGrade;
     char strValue[9];
	 char FIPAddr;
	 
	 sprintf_P(strValue,PSTR("00000000"));
	 for (iPump=1;iPump<=16;iPump++){//Pump
    55ce:	e3 94       	inc	r14
    55d0:	81 e1       	ldi	r24, 0x11	; 17
    55d2:	e8 16       	cp	r14, r24
    55d4:	11 f7       	brne	.-60     	; 0x559a <ResetTotalizer+0x52>
				  SetTotalizerData(TVOLUME,TAddr,FIPAddr,iGrade,strValue);
				  SetTotalizerData(TMONEY,TAddr,FIPAddr,iGrade,strValue);
			  }
		  }
	 }
}
    55d6:	29 96       	adiw	r28, 0x09	; 9
    55d8:	0f b6       	in	r0, 0x3f	; 63
    55da:	f8 94       	cli
    55dc:	de bf       	out	0x3e, r29	; 62
    55de:	0f be       	out	0x3f, r0	; 63
    55e0:	cd bf       	out	0x3d, r28	; 61
    55e2:	cf 91       	pop	r28
    55e4:	df 91       	pop	r29
    55e6:	1f 91       	pop	r17
    55e8:	0f 91       	pop	r16
    55ea:	ff 90       	pop	r15
    55ec:	ef 90       	pop	r14
    55ee:	df 90       	pop	r13
    55f0:	cf 90       	pop	r12
    55f2:	bf 90       	pop	r11
    55f4:	af 90       	pop	r10
    55f6:	08 95       	ret

000055f8 <AddZeroLag>:
	         String[i]=strAdded[i];
	     }String[Size]=0;
	 }
}

void AddZeroLag(char *String,unsigned char Size){// [123]->12300
    55f8:	cf 93       	push	r28
    55fa:	df 93       	push	r29
    55fc:	ec 01       	movw	r28, r24
char i,Length;
     Length=strlen(String);
    55fe:	dc 01       	movw	r26, r24
    5600:	0d 90       	ld	r0, X+
    5602:	00 20       	and	r0, r0
    5604:	e9 f7       	brne	.-6      	; 0x5600 <AddZeroLag+0x8>
    5606:	11 97       	sbiw	r26, 0x01	; 1
    5608:	a8 1b       	sub	r26, r24
    560a:	b9 0b       	sbc	r27, r25
  if (Length<Size){   
    560c:	a6 17       	cp	r26, r22
    560e:	60 f4       	brcc	.+24     	; 0x5628 <AddZeroLag+0x30>
    5610:	8a 2f       	mov	r24, r26
     for(i=Length;i<Size;i++){
	    String[i]='0';
    5612:	90 e3       	ldi	r25, 0x30	; 48
    5614:	fe 01       	movw	r30, r28
    5616:	e8 0f       	add	r30, r24
    5618:	f1 1d       	adc	r31, r1
    561a:	90 83       	st	Z, r25

void AddZeroLag(char *String,unsigned char Size){// [123]->12300
char i,Length;
     Length=strlen(String);
  if (Length<Size){   
     for(i=Length;i<Size;i++){
    561c:	8f 5f       	subi	r24, 0xFF	; 255
    561e:	86 17       	cp	r24, r22
    5620:	c8 f3       	brcs	.-14     	; 0x5614 <AddZeroLag+0x1c>
	    String[i]='0';
	 }String[Size]=0;
    5622:	c6 0f       	add	r28, r22
    5624:	d1 1d       	adc	r29, r1
    5626:	18 82       	st	Y, r1
  }
}
    5628:	df 91       	pop	r29
    562a:	cf 91       	pop	r28
    562c:	08 95       	ret

0000562e <StrCalc>:
     
	 //if (NinePos<Length-4)
	 StrCalc(TPLUS,strMaxValue,strOverflowed,strOverflowed);
}
                                                                   //     1111111 
void StrCalc(char TOperation, char *strA , char *strB, char *strC){//  A: 00000000
    562e:	3f 92       	push	r3
    5630:	4f 92       	push	r4
    5632:	5f 92       	push	r5
    5634:	6f 92       	push	r6
    5636:	7f 92       	push	r7
    5638:	8f 92       	push	r8
    563a:	9f 92       	push	r9
    563c:	af 92       	push	r10
    563e:	bf 92       	push	r11
    5640:	cf 92       	push	r12
    5642:	df 92       	push	r13
    5644:	ef 92       	push	r14
    5646:	ff 92       	push	r15
    5648:	0f 93       	push	r16
    564a:	1f 93       	push	r17
    564c:	df 93       	push	r29
    564e:	cf 93       	push	r28
    5650:	cd b7       	in	r28, 0x3d	; 61
    5652:	de b7       	in	r29, 0x3e	; 62
    5654:	c8 55       	subi	r28, 0x58	; 88
    5656:	d0 40       	sbci	r29, 0x00	; 0
    5658:	0f b6       	in	r0, 0x3f	; 63
    565a:	f8 94       	cli
    565c:	de bf       	out	0x3e, r29	; 62
    565e:	0f be       	out	0x3f, r0	; 63
    5660:	cd bf       	out	0x3d, r28	; 61
    5662:	68 2e       	mov	r6, r24
    5664:	67 96       	adiw	r28, 0x17	; 23
    5666:	7f af       	std	Y+63, r23	; 0x3f
    5668:	6e af       	std	Y+62, r22	; 0x3e
    566a:	67 97       	sbiw	r28, 0x17	; 23
    566c:	69 96       	adiw	r28, 0x19	; 25
    566e:	5f af       	std	Y+63, r21	; 0x3f
    5670:	4e af       	std	Y+62, r20	; 0x3e
    5672:	69 97       	sbiw	r28, 0x19	; 25
    5674:	59 01       	movw	r10, r18
    5676:	fe 01       	movw	r30, r28
    5678:	31 96       	adiw	r30, 0x01	; 1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    567a:	ce 01       	movw	r24, r28
    567c:	45 96       	adiw	r24, 0x15	; 21
	     strMemory[i]=data;
    567e:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    5680:	e8 17       	cp	r30, r24
    5682:	f9 07       	cpc	r31, r25
    5684:	e1 f7       	brne	.-8      	; 0x567e <StrCalc+0x50>
	     strMemory[i]=data;
    5686:	ce 01       	movw	r24, r28
    5688:	89 96       	adiw	r24, 0x29	; 41
    568a:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    568c:	e8 17       	cp	r30, r24
    568e:	f9 07       	cpc	r31, r25
    5690:	e1 f7       	brne	.-8      	; 0x568a <StrCalc+0x5c>
    5692:	fe 01       	movw	r30, r28
    5694:	fd 96       	adiw	r30, 0x3d	; 61
	     strMemory[i]=data;
    5696:	cf 01       	movw	r24, r30
    5698:	44 96       	adiw	r24, 0x14	; 20
    569a:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    569c:	e8 17       	cp	r30, r24
    569e:	f9 07       	cpc	r31, r25
    56a0:	e1 f7       	brne	.-8      	; 0x569a <StrCalc+0x6c>
	 FillChar(tmpB,sizeof(tmpB),0);
	 FillChar(Result,sizeof(Result),0);
                                            // -5    -5     5    5
	                                        // -6 -   6 -  -6 -  6 -
                                            // -5+6   
	 sprintf_P(tmpA,PSTR("%s"),strA);       // 
    56a2:	00 d0       	rcall	.+0      	; 0x56a4 <StrCalc+0x76>
    56a4:	00 d0       	rcall	.+0      	; 0x56a6 <StrCalc+0x78>
    56a6:	00 d0       	rcall	.+0      	; 0x56a8 <StrCalc+0x7a>
    56a8:	ed b7       	in	r30, 0x3d	; 61
    56aa:	fe b7       	in	r31, 0x3e	; 62
    56ac:	31 96       	adiw	r30, 0x01	; 1
    56ae:	8e 01       	movw	r16, r28
    56b0:	0f 5f       	subi	r16, 0xFF	; 255
    56b2:	1f 4f       	sbci	r17, 0xFF	; 255
    56b4:	ad b7       	in	r26, 0x3d	; 61
    56b6:	be b7       	in	r27, 0x3e	; 62
    56b8:	12 96       	adiw	r26, 0x02	; 2
    56ba:	1c 93       	st	X, r17
    56bc:	0e 93       	st	-X, r16
    56be:	11 97       	sbiw	r26, 0x01	; 1
    56c0:	8b e1       	ldi	r24, 0x1B	; 27
    56c2:	97 e0       	ldi	r25, 0x07	; 7
    56c4:	93 83       	std	Z+3, r25	; 0x03
    56c6:	82 83       	std	Z+2, r24	; 0x02
    56c8:	67 96       	adiw	r28, 0x17	; 23
    56ca:	2e ad       	ldd	r18, Y+62	; 0x3e
    56cc:	3f ad       	ldd	r19, Y+63	; 0x3f
    56ce:	67 97       	sbiw	r28, 0x17	; 23
    56d0:	35 83       	std	Z+5, r19	; 0x05
    56d2:	24 83       	std	Z+4, r18	; 0x04
    56d4:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	 sprintf_P(tmpB,PSTR("%s"),strB);  
    56d8:	ed b7       	in	r30, 0x3d	; 61
    56da:	fe b7       	in	r31, 0x3e	; 62
    56dc:	31 96       	adiw	r30, 0x01	; 1
    56de:	ce 01       	movw	r24, r28
    56e0:	45 96       	adiw	r24, 0x15	; 21
    56e2:	ad b7       	in	r26, 0x3d	; 61
    56e4:	be b7       	in	r27, 0x3e	; 62
    56e6:	12 96       	adiw	r26, 0x02	; 2
    56e8:	9c 93       	st	X, r25
    56ea:	8e 93       	st	-X, r24
    56ec:	11 97       	sbiw	r26, 0x01	; 1
    56ee:	88 e1       	ldi	r24, 0x18	; 24
    56f0:	97 e0       	ldi	r25, 0x07	; 7
    56f2:	93 83       	std	Z+3, r25	; 0x03
    56f4:	82 83       	std	Z+2, r24	; 0x02
    56f6:	69 96       	adiw	r28, 0x19	; 25
    56f8:	2e ad       	ldd	r18, Y+62	; 0x3e
    56fa:	3f ad       	ldd	r19, Y+63	; 0x3f
    56fc:	69 97       	sbiw	r28, 0x19	; 25
    56fe:	35 83       	std	Z+5, r19	; 0x05
    5700:	24 83       	std	Z+4, r18	; 0x04
    5702:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>

     if (IsMinus(tmpA)==True){
    5706:	8d b7       	in	r24, 0x3d	; 61
    5708:	9e b7       	in	r25, 0x3e	; 62
    570a:	06 96       	adiw	r24, 0x06	; 6
    570c:	0f b6       	in	r0, 0x3f	; 63
    570e:	f8 94       	cli
    5710:	9e bf       	out	0x3e, r25	; 62
    5712:	0f be       	out	0x3f, r0	; 63
    5714:	8d bf       	out	0x3d, r24	; 61
    5716:	c8 01       	movw	r24, r16
    5718:	0e 94 1a 25 	call	0x4a34	; 0x4a34 <IsMinus>
    571c:	81 30       	cpi	r24, 0x01	; 1
    571e:	21 f0       	breq	.+8      	; 0x5728 <StrCalc+0xfa>
    5720:	65 96       	adiw	r28, 0x15	; 21
    5722:	1f ae       	std	Y+63, r1	; 0x3f
    5724:	65 97       	sbiw	r28, 0x15	; 21
    5726:	07 c0       	rjmp	.+14     	; 0x5736 <StrCalc+0x108>
	     RemoveMinus(tmpA);
    5728:	c8 01       	movw	r24, r16
    572a:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <RemoveMinus>
    572e:	91 e0       	ldi	r25, 0x01	; 1
    5730:	65 96       	adiw	r28, 0x15	; 21
    5732:	9f af       	std	Y+63, r25	; 0x3f
    5734:	65 97       	sbiw	r28, 0x15	; 21
		 IsMinA=True;
	 }
     if (IsMinus(tmpB)==True){
    5736:	8e 01       	movw	r16, r28
    5738:	0b 5e       	subi	r16, 0xEB	; 235
    573a:	1f 4f       	sbci	r17, 0xFF	; 255
    573c:	c8 01       	movw	r24, r16
    573e:	0e 94 1a 25 	call	0x4a34	; 0x4a34 <IsMinus>
    5742:	81 30       	cpi	r24, 0x01	; 1
    5744:	21 f0       	breq	.+8      	; 0x574e <StrCalc+0x120>
    5746:	64 96       	adiw	r28, 0x14	; 20
    5748:	1f ae       	std	Y+63, r1	; 0x3f
    574a:	64 97       	sbiw	r28, 0x14	; 20
    574c:	07 c0       	rjmp	.+14     	; 0x575c <StrCalc+0x12e>
	     RemoveMinus(tmpB);
    574e:	c8 01       	movw	r24, r16
    5750:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <RemoveMinus>
    5754:	a1 e0       	ldi	r26, 0x01	; 1
    5756:	64 96       	adiw	r28, 0x14	; 20
    5758:	af af       	std	Y+63, r26	; 0x3f
    575a:	64 97       	sbiw	r28, 0x14	; 20
		 IsMinB=True;
	 }    	

     lenA=strlen(tmpA);
    575c:	fe 01       	movw	r30, r28
    575e:	31 96       	adiw	r30, 0x01	; 1
    5760:	df 01       	movw	r26, r30
    5762:	0d 90       	ld	r0, X+
    5764:	00 20       	and	r0, r0
    5766:	e9 f7       	brne	.-6      	; 0x5762 <StrCalc+0x134>
    5768:	cd 01       	movw	r24, r26
    576a:	01 97       	sbiw	r24, 0x01	; 1
    576c:	8e 1b       	sub	r24, r30
    576e:	9f 0b       	sbc	r25, r31
     lenB=strlen(tmpB);
    5770:	de 01       	movw	r26, r28
    5772:	55 96       	adiw	r26, 0x15	; 21
    5774:	fd 01       	movw	r30, r26
    5776:	01 90       	ld	r0, Z+
    5778:	00 20       	and	r0, r0
    577a:	e9 f7       	brne	.-6      	; 0x5776 <StrCalc+0x148>
    577c:	31 97       	sbiw	r30, 0x01	; 1
     /*
	 sprintf_P(strSend,PSTR("A:%s"),strA);	 uart_print(0,1,strSend);
	 sprintf_P(strSend,PSTR("B:%s"),strB);	 uart_print(0,1,strSend);
     */

     AddZeroLead(tmpA,FixLen+1);
    577e:	1e 2f       	mov	r17, r30
    5780:	1a 1b       	sub	r17, r26
    5782:	18 17       	cp	r17, r24
    5784:	08 f4       	brcc	.+2      	; 0x5788 <StrCalc+0x15a>
    5786:	18 2f       	mov	r17, r24
    5788:	1f 5f       	subi	r17, 0xFF	; 255
    578a:	7e 01       	movw	r14, r28
    578c:	08 94       	sec
    578e:	e1 1c       	adc	r14, r1
    5790:	f1 1c       	adc	r15, r1
    5792:	c7 01       	movw	r24, r14
    5794:	61 2f       	mov	r22, r17
    5796:	0e 94 5d 28 	call	0x50ba	; 0x50ba <AddZeroLead>
     AddZeroLead(tmpB,FixLen+1);
    579a:	05 e1       	ldi	r16, 0x15	; 21
    579c:	c0 2e       	mov	r12, r16
    579e:	d1 2c       	mov	r13, r1
    57a0:	cc 0e       	add	r12, r28
    57a2:	dd 1e       	adc	r13, r29
    57a4:	c6 01       	movw	r24, r12
    57a6:	61 2f       	mov	r22, r17
    57a8:	0e 94 5d 28 	call	0x50ba	; 0x50ba <AddZeroLead>
	 uart_print(0,1,strSend);
	 sprintf_P(strSend,PSTR("B:%s"),strB);
	 uart_print(0,1,strSend);
	 */

     lenA=strlen(tmpA);
    57ac:	f7 01       	movw	r30, r14
    57ae:	01 90       	ld	r0, Z+
    57b0:	00 20       	and	r0, r0
    57b2:	e9 f7       	brne	.-6      	; 0x57ae <StrCalc+0x180>
    57b4:	31 97       	sbiw	r30, 0x01	; 1
    57b6:	7e 2e       	mov	r7, r30
    57b8:	7e 18       	sub	r7, r14
     lenB=strlen(tmpB);
    57ba:	f6 01       	movw	r30, r12
    57bc:	01 90       	ld	r0, Z+
    57be:	00 20       	and	r0, r0
    57c0:	e9 f7       	brne	.-6      	; 0x57bc <StrCalc+0x18e>
    57c2:	31 97       	sbiw	r30, 0x01	; 1
    57c4:	9e 2e       	mov	r9, r30
    57c6:	9c 18       	sub	r9, r12
     IsNegative=False;
	 
	 IsNegative=False;
	 IsSwap=False;

	 if (IsMoreThan(tmpB,tmpA)==True){
    57c8:	c6 01       	movw	r24, r12
    57ca:	b7 01       	movw	r22, r14
    57cc:	0e 94 4c 25 	call	0x4a98	; 0x4a98 <IsMoreThan>
    57d0:	81 30       	cpi	r24, 0x01	; 1
    57d2:	11 f0       	breq	.+4      	; 0x57d8 <StrCalc+0x1aa>
    57d4:	80 e0       	ldi	r24, 0x00	; 0
    57d6:	42 c0       	rjmp	.+132    	; 0x585c <StrCalc+0x22e>
	     IsSwap=True;
         sprintf_P(tmpC,PSTR("%s"),tmpA);
    57d8:	00 d0       	rcall	.+0      	; 0x57da <StrCalc+0x1ac>
    57da:	00 d0       	rcall	.+0      	; 0x57dc <StrCalc+0x1ae>
    57dc:	00 d0       	rcall	.+0      	; 0x57de <StrCalc+0x1b0>
    57de:	ed b7       	in	r30, 0x3d	; 61
    57e0:	fe b7       	in	r31, 0x3e	; 62
    57e2:	31 96       	adiw	r30, 0x01	; 1
    57e4:	8e 01       	movw	r16, r28
    57e6:	07 5d       	subi	r16, 0xD7	; 215
    57e8:	1f 4f       	sbci	r17, 0xFF	; 255
    57ea:	ad b7       	in	r26, 0x3d	; 61
    57ec:	be b7       	in	r27, 0x3e	; 62
    57ee:	12 96       	adiw	r26, 0x02	; 2
    57f0:	1c 93       	st	X, r17
    57f2:	0e 93       	st	-X, r16
    57f4:	11 97       	sbiw	r26, 0x01	; 1
    57f6:	85 e1       	ldi	r24, 0x15	; 21
    57f8:	97 e0       	ldi	r25, 0x07	; 7
    57fa:	93 83       	std	Z+3, r25	; 0x03
    57fc:	82 83       	std	Z+2, r24	; 0x02
    57fe:	f5 82       	std	Z+5, r15	; 0x05
    5800:	e4 82       	std	Z+4, r14	; 0x04
    5802:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
		 sprintf_P(tmpA,PSTR("%s"),tmpB);
    5806:	ed b7       	in	r30, 0x3d	; 61
    5808:	fe b7       	in	r31, 0x3e	; 62
    580a:	31 96       	adiw	r30, 0x01	; 1
    580c:	ad b7       	in	r26, 0x3d	; 61
    580e:	be b7       	in	r27, 0x3e	; 62
    5810:	12 96       	adiw	r26, 0x02	; 2
    5812:	fc 92       	st	X, r15
    5814:	ee 92       	st	-X, r14
    5816:	11 97       	sbiw	r26, 0x01	; 1
    5818:	82 e1       	ldi	r24, 0x12	; 18
    581a:	97 e0       	ldi	r25, 0x07	; 7
    581c:	93 83       	std	Z+3, r25	; 0x03
    581e:	82 83       	std	Z+2, r24	; 0x02
    5820:	d5 82       	std	Z+5, r13	; 0x05
    5822:	c4 82       	std	Z+4, r12	; 0x04
    5824:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
		 sprintf_P(tmpB,PSTR("%s"),tmpC);
    5828:	ed b7       	in	r30, 0x3d	; 61
    582a:	fe b7       	in	r31, 0x3e	; 62
    582c:	31 96       	adiw	r30, 0x01	; 1
    582e:	ad b7       	in	r26, 0x3d	; 61
    5830:	be b7       	in	r27, 0x3e	; 62
    5832:	12 96       	adiw	r26, 0x02	; 2
    5834:	dc 92       	st	X, r13
    5836:	ce 92       	st	-X, r12
    5838:	11 97       	sbiw	r26, 0x01	; 1
    583a:	8f e0       	ldi	r24, 0x0F	; 15
    583c:	97 e0       	ldi	r25, 0x07	; 7
    583e:	93 83       	std	Z+3, r25	; 0x03
    5840:	82 83       	std	Z+2, r24	; 0x02
    5842:	15 83       	std	Z+5, r17	; 0x05
    5844:	04 83       	std	Z+4, r16	; 0x04
    5846:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
    584a:	81 e0       	ldi	r24, 0x01	; 1
    584c:	ed b7       	in	r30, 0x3d	; 61
    584e:	fe b7       	in	r31, 0x3e	; 62
    5850:	36 96       	adiw	r30, 0x06	; 6
    5852:	0f b6       	in	r0, 0x3f	; 63
    5854:	f8 94       	cli
    5856:	fe bf       	out	0x3e, r31	; 62
    5858:	0f be       	out	0x3f, r0	; 63
    585a:	ed bf       	out	0x3d, r30	; 61
	 }
    
	if (TOperation==TMINUS){
    585c:	66 20       	and	r6, r6
    585e:	39 f5       	brne	.+78     	; 0x58ae <StrCalc+0x280>
	    TCalc=TOperation;
		IsNegative=False;
		if (IsSwap==True){
    5860:	81 30       	cpi	r24, 0x01	; 1
    5862:	99 f4       	brne	.+38     	; 0x588a <StrCalc+0x25c>
		    if ((IsMinA==True)&&(IsMinB==True)){IsNegative=False;TCalc=TMINUS;}
    5864:	65 96       	adiw	r28, 0x15	; 21
    5866:	ff ad       	ldd	r31, Y+63	; 0x3f
    5868:	65 97       	sbiw	r28, 0x15	; 21
    586a:	f1 30       	cpi	r31, 0x01	; 1
    586c:	39 f4       	brne	.+14     	; 0x587c <StrCalc+0x24e>
    586e:	64 96       	adiw	r28, 0x14	; 20
    5870:	2f ad       	ldd	r18, Y+63	; 0x3f
    5872:	64 97       	sbiw	r28, 0x14	; 20
    5874:	21 30       	cpi	r18, 0x01	; 1
    5876:	09 f0       	breq	.+2      	; 0x587a <StrCalc+0x24c>
    5878:	9e c1       	rjmp	.+828    	; 0x5bb6 <StrCalc+0x588>
    587a:	42 c0       	rjmp	.+132    	; 0x5900 <StrCalc+0x2d2>
            else if ((IsMinA==True)&&(IsMinB==False)){IsNegative=True;TCalc=TPLUS;}
            else if ((IsMinA==False)&&(IsMinB==True)){IsNegative=False;TCalc=TPLUS;}
    587c:	64 96       	adiw	r28, 0x14	; 20
    587e:	3f ad       	ldd	r19, Y+63	; 0x3f
    5880:	64 97       	sbiw	r28, 0x14	; 20
    5882:	31 30       	cpi	r19, 0x01	; 1
    5884:	09 f0       	breq	.+2      	; 0x5888 <StrCalc+0x25a>
    5886:	8e c1       	rjmp	.+796    	; 0x5ba4 <StrCalc+0x576>
    5888:	92 c1       	rjmp	.+804    	; 0x5bae <StrCalc+0x580>
            else if ((IsMinA==False)&&(IsMinB==False)){IsNegative=True;TCalc=TMINUS;}
		}else
		if (IsSwap==False){
		    if ((IsMinA==True)&&(IsMinB==True)){IsNegative=True;TCalc=TMINUS;}
    588a:	65 96       	adiw	r28, 0x15	; 21
    588c:	8f ad       	ldd	r24, Y+63	; 0x3f
    588e:	65 97       	sbiw	r28, 0x15	; 21
    5890:	81 30       	cpi	r24, 0x01	; 1
    5892:	39 f4       	brne	.+14     	; 0x58a2 <StrCalc+0x274>
    5894:	64 96       	adiw	r28, 0x14	; 20
    5896:	9f ad       	ldd	r25, Y+63	; 0x3f
    5898:	64 97       	sbiw	r28, 0x14	; 20
    589a:	91 30       	cpi	r25, 0x01	; 1
    589c:	09 f0       	breq	.+2      	; 0x58a0 <StrCalc+0x272>
    589e:	8b c1       	rjmp	.+790    	; 0x5bb6 <StrCalc+0x588>
    58a0:	81 c1       	rjmp	.+770    	; 0x5ba4 <StrCalc+0x576>
            else if ((IsMinA==True)&&(IsMinB==False)){IsNegative=True;TCalc=TPLUS;}
            else if ((IsMinA==False)&&(IsMinB==True)){IsNegative=False;TCalc=TPLUS;}
    58a2:	64 96       	adiw	r28, 0x14	; 20
    58a4:	af ad       	ldd	r26, Y+63	; 0x3f
    58a6:	64 97       	sbiw	r28, 0x14	; 20
    58a8:	a1 30       	cpi	r26, 0x01	; 1
    58aa:	51 f5       	brne	.+84     	; 0x5900 <StrCalc+0x2d2>
    58ac:	80 c1       	rjmp	.+768    	; 0x5bae <StrCalc+0x580>
            else if ((IsMinA==False)&&(IsMinB==False)){IsNegative=False;TCalc=TMINUS;}
		}
	 }else
	if (TOperation==TPLUS){
    58ae:	b1 e0       	ldi	r27, 0x01	; 1
    58b0:	6b 16       	cp	r6, r27
    58b2:	31 f5       	brne	.+76     	; 0x5900 <StrCalc+0x2d2>
	    TCalc=TOperation;
		IsNegative=False;
		if (IsSwap==True){
    58b4:	81 30       	cpi	r24, 0x01	; 1
    58b6:	91 f4       	brne	.+36     	; 0x58dc <StrCalc+0x2ae>
		    if ((IsMinA==True)&&(IsMinB==True)){IsNegative=True;TCalc=TPLUS;}
    58b8:	65 96       	adiw	r28, 0x15	; 21
    58ba:	ef ad       	ldd	r30, Y+63	; 0x3f
    58bc:	65 97       	sbiw	r28, 0x15	; 21
    58be:	e1 30       	cpi	r30, 0x01	; 1
    58c0:	31 f4       	brne	.+12     	; 0x58ce <StrCalc+0x2a0>
    58c2:	64 96       	adiw	r28, 0x14	; 20
    58c4:	ff ad       	ldd	r31, Y+63	; 0x3f
    58c6:	64 97       	sbiw	r28, 0x14	; 20
    58c8:	f1 30       	cpi	r31, 0x01	; 1
    58ca:	d1 f4       	brne	.+52     	; 0x5900 <StrCalc+0x2d2>
    58cc:	74 c1       	rjmp	.+744    	; 0x5bb6 <StrCalc+0x588>
            else if ((IsMinA==True)&&(IsMinB==False)){IsNegative=False;TCalc=TMINUS;}
            else if ((IsMinA==False)&&(IsMinB==True)){IsNegative=True;TCalc=TMINUS;}
    58ce:	64 96       	adiw	r28, 0x14	; 20
    58d0:	2f ad       	ldd	r18, Y+63	; 0x3f
    58d2:	64 97       	sbiw	r28, 0x14	; 20
    58d4:	21 30       	cpi	r18, 0x01	; 1
    58d6:	09 f0       	breq	.+2      	; 0x58da <StrCalc+0x2ac>
    58d8:	6a c1       	rjmp	.+724    	; 0x5bae <StrCalc+0x580>
    58da:	64 c1       	rjmp	.+712    	; 0x5ba4 <StrCalc+0x576>
            else if ((IsMinA==False)&&(IsMinB==False)){IsNegative=False;TCalc=TPLUS;}
		}else
		if (IsSwap==False){
		    if ((IsMinA==True)&&(IsMinB==True)){IsNegative=True;TCalc=TPLUS;}
    58dc:	65 96       	adiw	r28, 0x15	; 21
    58de:	3f ad       	ldd	r19, Y+63	; 0x3f
    58e0:	65 97       	sbiw	r28, 0x15	; 21
    58e2:	31 30       	cpi	r19, 0x01	; 1
    58e4:	39 f4       	brne	.+14     	; 0x58f4 <StrCalc+0x2c6>
    58e6:	64 96       	adiw	r28, 0x14	; 20
    58e8:	8f ad       	ldd	r24, Y+63	; 0x3f
    58ea:	64 97       	sbiw	r28, 0x14	; 20
    58ec:	81 30       	cpi	r24, 0x01	; 1
    58ee:	09 f0       	breq	.+2      	; 0x58f2 <StrCalc+0x2c4>
    58f0:	59 c1       	rjmp	.+690    	; 0x5ba4 <StrCalc+0x576>
    58f2:	61 c1       	rjmp	.+706    	; 0x5bb6 <StrCalc+0x588>
            else if ((IsMinA==True)&&(IsMinB==False)){IsNegative=True;TCalc=TMINUS;}
            else if ((IsMinA==False)&&(IsMinB==True)){IsNegative=False;TCalc=TMINUS;}
    58f4:	64 96       	adiw	r28, 0x14	; 20
    58f6:	9f ad       	ldd	r25, Y+63	; 0x3f
    58f8:	64 97       	sbiw	r28, 0x14	; 20
    58fa:	91 30       	cpi	r25, 0x01	; 1
    58fc:	09 f0       	breq	.+2      	; 0x5900 <StrCalc+0x2d2>
    58fe:	57 c1       	rjmp	.+686    	; 0x5bae <StrCalc+0x580>
   // A: 100000
   // B: 000001 -
   // -----------
   // C: 099999

	 if (TCalc==TMINUS){
    5900:	62 96       	adiw	r28, 0x12	; 18
    5902:	1f ae       	std	Y+63, r1	; 0x3f
    5904:	62 97       	sbiw	r28, 0x12	; 18
     
	 //if (NinePos<Length-4)
	 StrCalc(TPLUS,strMaxValue,strOverflowed,strOverflowed);
}
                                                                   //     1111111 
void StrCalc(char TOperation, char *strA , char *strB, char *strC){//  A: 00000000
    5906:	e7 2c       	mov	r14, r7
    5908:	ff 24       	eor	r15, r15
    590a:	67 01       	movw	r12, r14
    590c:	08 94       	sec
    590e:	c1 08       	sbc	r12, r1
    5910:	d1 08       	sbc	r13, r1
    5912:	ae 01       	movw	r20, r28
    5914:	43 5c       	subi	r20, 0xC3	; 195
    5916:	5f 4f       	sbci	r21, 0xFF	; 255
    5918:	4c 0d       	add	r20, r12
    591a:	5d 1d       	adc	r21, r13
    591c:	ce 01       	movw	r24, r28
    591e:	01 96       	adiw	r24, 0x01	; 1
    5920:	8c 01       	movw	r16, r24
    5922:	0c 0d       	add	r16, r12
    5924:	1d 1d       	adc	r17, r13
    5926:	be 01       	movw	r22, r28
    5928:	69 0d       	add	r22, r9
    592a:	71 1d       	adc	r23, r1
    592c:	6c 5e       	subi	r22, 0xEC	; 236
    592e:	7f 4f       	sbci	r23, 0xFF	; 255
    5930:	99 24       	eor	r9, r9
			     Result[lenA-i-1]=Chr(Ord(tmpA[lenA-i-1])-Ord(tmpB[lenB-i-1]));
			 }else
			 if (Ord(tmpA[lenA-i-1])<Ord(tmpB[lenB-i-1])){
			 //Pinjaman
			     for(j=i+1;j<lenA;j++){
				     if (tmpA[lenA-j-1]=='0')tmpA[lenA-j-1]='9';
    5932:	2c 01       	movw	r4, r24
    5934:	b9 e3       	ldi	r27, 0x39	; 57
    5936:	8b 2e       	mov	r8, r27
					 if (tmpA[lenA-j-1]!='0'){
					     tmpA[lenA-j-1]=Chr(Ord(tmpA[lenA-j-1])-1);
						 break;
					 }				 
				 }
				 Result[lenA-i-1]=Chr(10+Ord(tmpA[lenA-i-1])-Ord(tmpB[lenB-i-1]));
    5938:	9a e0       	ldi	r25, 0x0A	; 10
    593a:	52 c0       	rjmp	.+164    	; 0x59e0 <StrCalc+0x3b2>
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
    593c:	d8 01       	movw	r26, r16
    593e:	8c 91       	ld	r24, X
    5940:	80 53       	subi	r24, 0x30	; 48
    5942:	8a 30       	cpi	r24, 0x0A	; 10
    5944:	10 f0       	brcs	.+4      	; 0x594a <StrCalc+0x31c>
    5946:	20 e0       	ldi	r18, 0x00	; 0
    5948:	01 c0       	rjmp	.+2      	; 0x594c <StrCalc+0x31e>
    594a:	28 2f       	mov	r18, r24
   // -----------
   // C: 099999

	 if (TCalc==TMINUS){
	     for(i=0;i<lenA;i++){		 
		     if (Ord(tmpA[lenA-i-1])>=Ord(tmpB[lenB-i-1])){
    594c:	fb 01       	movw	r30, r22
    594e:	30 81       	ld	r19, Z
    5950:	30 53       	subi	r19, 0x30	; 48
    5952:	3a 30       	cpi	r19, 0x0A	; 10
    5954:	10 f4       	brcc	.+4      	; 0x595a <StrCalc+0x32c>
    5956:	23 17       	cp	r18, r19
    5958:	40 f0       	brcs	.+16     	; 0x596a <StrCalc+0x33c>
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
    595a:	8a 30       	cpi	r24, 0x0A	; 10
    595c:	08 f0       	brcs	.+2      	; 0x5960 <StrCalc+0x332>
    595e:	80 e0       	ldi	r24, 0x00	; 0

	 if (TCalc==TMINUS){
	     for(i=0;i<lenA;i++){		 
		     if (Ord(tmpA[lenA-i-1])>=Ord(tmpB[lenB-i-1])){
			 //Cukup
			     Result[lenA-i-1]=Chr(Ord(tmpA[lenA-i-1])-Ord(tmpB[lenB-i-1]));
    5960:	3a 30       	cpi	r19, 0x0A	; 10
    5962:	08 f0       	brcs	.+2      	; 0x5966 <StrCalc+0x338>
    5964:	30 e0       	ldi	r19, 0x00	; 0
    5966:	83 1b       	sub	r24, r19
    5968:	2d c0       	rjmp	.+90     	; 0x59c4 <StrCalc+0x396>
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
    596a:	8a 30       	cpi	r24, 0x0A	; 10
    596c:	10 f4       	brcc	.+4      	; 0x5972 <StrCalc+0x344>
	     for(i=0;i<lenA;i++){		 
		     if (Ord(tmpA[lenA-i-1])>=Ord(tmpB[lenB-i-1])){
			 //Cukup
			     Result[lenA-i-1]=Chr(Ord(tmpA[lenA-i-1])-Ord(tmpB[lenB-i-1]));
			 }else
			 if (Ord(tmpA[lenA-i-1])<Ord(tmpB[lenB-i-1])){
    596e:	83 17       	cp	r24, r19
    5970:	80 f5       	brcc	.+96     	; 0x59d2 <StrCalc+0x3a4>
    5972:	29 2d       	mov	r18, r9
    5974:	0a c0       	rjmp	.+20     	; 0x598a <StrCalc+0x35c>
			 //Pinjaman
			     for(j=i+1;j<lenA;j++){
				     if (tmpA[lenA-j-1]=='0')tmpA[lenA-j-1]='9';
    5976:	f6 01       	movw	r30, r12
    5978:	e2 1b       	sub	r30, r18
    597a:	f1 09       	sbc	r31, r1
    597c:	d2 01       	movw	r26, r4
    597e:	ae 0f       	add	r26, r30
    5980:	bf 1f       	adc	r27, r31
    5982:	8c 91       	ld	r24, X
    5984:	80 33       	cpi	r24, 0x30	; 48
    5986:	29 f4       	brne	.+10     	; 0x5992 <StrCalc+0x364>
    5988:	8c 92       	st	X, r8
			 //Cukup
			     Result[lenA-i-1]=Chr(Ord(tmpA[lenA-i-1])-Ord(tmpB[lenB-i-1]));
			 }else
			 if (Ord(tmpA[lenA-i-1])<Ord(tmpB[lenB-i-1])){
			 //Pinjaman
			     for(j=i+1;j<lenA;j++){
    598a:	2f 5f       	subi	r18, 0xFF	; 255
    598c:	27 15       	cp	r18, r7
    598e:	98 f3       	brcs	.-26     	; 0x5976 <StrCalc+0x348>
    5990:	10 c0       	rjmp	.+32     	; 0x59b2 <StrCalc+0x384>
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
    5992:	28 2f       	mov	r18, r24
    5994:	20 53       	subi	r18, 0x30	; 48
    5996:	2a 30       	cpi	r18, 0x0A	; 10
    5998:	08 f0       	brcs	.+2      	; 0x599c <StrCalc+0x36e>
    599a:	20 e0       	ldi	r18, 0x00	; 0
			 //Pinjaman
			     for(j=i+1;j<lenA;j++){
				     if (tmpA[lenA-j-1]=='0')tmpA[lenA-j-1]='9';
					 else
					 if (tmpA[lenA-j-1]!='0'){
					     tmpA[lenA-j-1]=Chr(Ord(tmpA[lenA-j-1])-1);
    599c:	82 2f       	mov	r24, r18
    599e:	81 50       	subi	r24, 0x01	; 1
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
    59a0:	8a 30       	cpi	r24, 0x0A	; 10
    59a2:	10 f0       	brcs	.+4      	; 0x59a8 <StrCalc+0x37a>
    59a4:	80 e3       	ldi	r24, 0x30	; 48
    59a6:	02 c0       	rjmp	.+4      	; 0x59ac <StrCalc+0x37e>
	    Result='0'+X;
    59a8:	82 2f       	mov	r24, r18
    59aa:	81 5d       	subi	r24, 0xD1	; 209
			 //Pinjaman
			     for(j=i+1;j<lenA;j++){
				     if (tmpA[lenA-j-1]=='0')tmpA[lenA-j-1]='9';
					 else
					 if (tmpA[lenA-j-1]!='0'){
					     tmpA[lenA-j-1]=Chr(Ord(tmpA[lenA-j-1])-1);
    59ac:	e4 0d       	add	r30, r4
    59ae:	f5 1d       	adc	r31, r5
    59b0:	80 83       	st	Z, r24
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
    59b2:	f8 01       	movw	r30, r16
    59b4:	20 81       	ld	r18, Z
    59b6:	20 53       	subi	r18, 0x30	; 48
    59b8:	2a 30       	cpi	r18, 0x0A	; 10
    59ba:	08 f0       	brcs	.+2      	; 0x59be <StrCalc+0x390>
    59bc:	20 e0       	ldi	r18, 0x00	; 0
					 if (tmpA[lenA-j-1]!='0'){
					     tmpA[lenA-j-1]=Chr(Ord(tmpA[lenA-j-1])-1);
						 break;
					 }				 
				 }
				 Result[lenA-i-1]=Chr(10+Ord(tmpA[lenA-i-1])-Ord(tmpB[lenB-i-1]));
    59be:	89 2f       	mov	r24, r25
    59c0:	83 1b       	sub	r24, r19
    59c2:	82 0f       	add	r24, r18
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
    59c4:	8a 30       	cpi	r24, 0x0A	; 10
    59c6:	10 f0       	brcs	.+4      	; 0x59cc <StrCalc+0x39e>
    59c8:	80 e3       	ldi	r24, 0x30	; 48
    59ca:	01 c0       	rjmp	.+2      	; 0x59ce <StrCalc+0x3a0>
	    Result='0'+X;
    59cc:	80 5d       	subi	r24, 0xD0	; 208
					 if (tmpA[lenA-j-1]!='0'){
					     tmpA[lenA-j-1]=Chr(Ord(tmpA[lenA-j-1])-1);
						 break;
					 }				 
				 }
				 Result[lenA-i-1]=Chr(10+Ord(tmpA[lenA-i-1])-Ord(tmpB[lenB-i-1]));
    59ce:	da 01       	movw	r26, r20
    59d0:	8c 93       	st	X, r24
   // B: 000001 -
   // -----------
   // C: 099999

	 if (TCalc==TMINUS){
	     for(i=0;i<lenA;i++){		 
    59d2:	93 94       	inc	r9
    59d4:	41 50       	subi	r20, 0x01	; 1
    59d6:	50 40       	sbci	r21, 0x00	; 0
    59d8:	01 50       	subi	r16, 0x01	; 1
    59da:	10 40       	sbci	r17, 0x00	; 0
    59dc:	61 50       	subi	r22, 0x01	; 1
    59de:	70 40       	sbci	r23, 0x00	; 0
    59e0:	97 14       	cp	r9, r7
    59e2:	08 f4       	brcc	.+2      	; 0x59e6 <StrCalc+0x3b8>
    59e4:	ab cf       	rjmp	.-170    	; 0x593c <StrCalc+0x30e>
						 break;
					 }				 
				 }
				 Result[lenA-i-1]=Chr(10+Ord(tmpA[lenA-i-1])-Ord(tmpB[lenB-i-1]));
			 }
		 }Result[lenA]=0;		    
    59e6:	8e 01       	movw	r16, r28
    59e8:	03 5c       	subi	r16, 0xC3	; 195
    59ea:	1f 4f       	sbci	r17, 0xFF	; 255
    59ec:	e0 0e       	add	r14, r16
    59ee:	f1 1e       	adc	r15, r17
    59f0:	f7 01       	movw	r30, r14
    59f2:	10 82       	st	Z, r1
       RemZeroLead(Result);
    59f4:	c8 01       	movw	r24, r16
    59f6:	0e 94 df 26 	call	0x4dbe	; 0x4dbe <RemZeroLead>
//	 sprintf_P(strSend,PSTR("C':%s"),Result);
//	 uart_print(0,1,strSend);
		 
		 FixLen=strlen(Result);
    59fa:	f8 01       	movw	r30, r16
    59fc:	01 90       	ld	r0, Z+
    59fe:	00 20       	and	r0, r0
    5a00:	e9 f7       	brne	.-6      	; 0x59fc <StrCalc+0x3ce>
    5a02:	31 97       	sbiw	r30, 0x01	; 1
    5a04:	3e 2f       	mov	r19, r30
    5a06:	30 1b       	sub	r19, r16
    5a08:	d8 01       	movw	r26, r16
    5a0a:	20 e0       	ldi	r18, 0x00	; 0
    5a0c:	90 e0       	ldi	r25, 0x00	; 0
		 iPos=0;
		 for(i=0;i<FixLen;i++){
		     if ((i==0)&&(IsNegative==True)){
			     strC[iPos]='-';
    5a0e:	4d e2       	ldi	r20, 0x2D	; 45
    5a10:	13 c0       	rjmp	.+38     	; 0x5a38 <StrCalc+0x40a>
//	 uart_print(0,1,strSend);
		 
		 FixLen=strlen(Result);
		 iPos=0;
		 for(i=0;i<FixLen;i++){
		     if ((i==0)&&(IsNegative==True)){
    5a12:	22 23       	and	r18, r18
    5a14:	51 f4       	brne	.+20     	; 0x5a2a <StrCalc+0x3fc>
    5a16:	62 96       	adiw	r28, 0x12	; 18
    5a18:	ff ad       	ldd	r31, Y+63	; 0x3f
    5a1a:	62 97       	sbiw	r28, 0x12	; 18
    5a1c:	f1 30       	cpi	r31, 0x01	; 1
    5a1e:	29 f4       	brne	.+10     	; 0x5a2a <StrCalc+0x3fc>
			     strC[iPos]='-';
    5a20:	f5 01       	movw	r30, r10
    5a22:	e9 0f       	add	r30, r25
    5a24:	f1 1d       	adc	r31, r1
    5a26:	40 83       	st	Z, r20
				 iPos++;
    5a28:	9f 5f       	subi	r25, 0xFF	; 255
			 }
		     strC[iPos]=Result[i];
    5a2a:	f5 01       	movw	r30, r10
    5a2c:	e9 0f       	add	r30, r25
    5a2e:	f1 1d       	adc	r31, r1
    5a30:	8d 91       	ld	r24, X+
    5a32:	80 83       	st	Z, r24
			 iPos++;
    5a34:	9f 5f       	subi	r25, 0xFF	; 255
//	 sprintf_P(strSend,PSTR("C':%s"),Result);
//	 uart_print(0,1,strSend);
		 
		 FixLen=strlen(Result);
		 iPos=0;
		 for(i=0;i<FixLen;i++){
    5a36:	2f 5f       	subi	r18, 0xFF	; 255
    5a38:	23 17       	cp	r18, r19
    5a3a:	58 f3       	brcs	.-42     	; 0x5a12 <StrCalc+0x3e4>
			     strC[iPos]='-';
				 iPos++;
			 }
		     strC[iPos]=Result[i];
			 iPos++;
		 }strC[iPos]=0;
    5a3c:	f5 01       	movw	r30, r10
    5a3e:	e9 0f       	add	r30, r25
    5a40:	f1 1d       	adc	r31, r1
    5a42:	10 82       	st	Z, r1
    5a44:	a0 c0       	rjmp	.+320    	; 0x5b86 <StrCalc+0x558>
	 }
	 else                     //         1
	 if (TCalc==TPLUS){  //A:099999999
    5a46:	ad e3       	ldi	r26, 0x3D	; 61
    5a48:	ea 2e       	mov	r14, r26
    5a4a:	f1 2c       	mov	r15, r1
    5a4c:	ec 0e       	add	r14, r28
    5a4e:	fd 1e       	adc	r15, r29
    5a50:	ae 01       	movw	r20, r28
    5a52:	49 0d       	add	r20, r9
    5a54:	51 1d       	adc	r21, r1
    5a56:	4c 5e       	subi	r20, 0xEC	; 236
    5a58:	5f 4f       	sbci	r21, 0xFF	; 255
     
	 //if (NinePos<Length-4)
	 StrCalc(TPLUS,strMaxValue,strOverflowed,strOverflowed);
}
                                                                   //     1111111 
void StrCalc(char TOperation, char *strA , char *strB, char *strC){//  A: 00000000
    5a5a:	07 2d       	mov	r16, r7
    5a5c:	10 e0       	ldi	r17, 0x00	; 0
    5a5e:	48 01       	movw	r8, r16
    5a60:	08 94       	sec
    5a62:	81 08       	sbc	r8, r1
    5a64:	91 08       	sbc	r9, r1
    5a66:	ce 01       	movw	r24, r28
    5a68:	01 96       	adiw	r24, 0x01	; 1
    5a6a:	6c 01       	movw	r12, r24
    5a6c:	c8 0c       	add	r12, r8
    5a6e:	d9 1c       	adc	r13, r9
    5a70:	30 e0       	ldi	r19, 0x00	; 0
    5a72:	20 e0       	ldi	r18, 0x00	; 0
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
    5a74:	2c 01       	movw	r4, r24
                 //Lebih
				 Result[i]=Chr(newC%10);
				 zMin=newC/10;
			     for(j=i+1;j<lenA;j++){
				     if ((Ord(tmpA[lenA-j-1])+zMin)>=10){
					     tmpA[lenA-j-1]=Chr((Ord(tmpA[lenA-j-1])+zMin)%10);
    5a76:	f0 e3       	ldi	r31, 0x30	; 48
    5a78:	3f 2e       	mov	r3, r31
    5a7a:	47 c0       	rjmp	.+142    	; 0x5b0a <StrCalc+0x4dc>
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
    5a7c:	d6 01       	movw	r26, r12
    5a7e:	9c 91       	ld	r25, X
    5a80:	90 53       	subi	r25, 0x30	; 48
    5a82:	9a 30       	cpi	r25, 0x0A	; 10
    5a84:	08 f0       	brcs	.+2      	; 0x5a88 <StrCalc+0x45a>
    5a86:	90 e0       	ldi	r25, 0x00	; 0
	 }
	 else                     //         1
	 if (TCalc==TPLUS){  //A:099999999
	     zMin=0;              //B:000000001
	     for(i=0;i<lenA;i++){ //C:       00
		     newC=(Ord(tmpA[lenA-i-1])+Ord(tmpB[lenB-i-1]));			 
    5a88:	fa 01       	movw	r30, r20
    5a8a:	80 81       	ld	r24, Z
    5a8c:	80 53       	subi	r24, 0x30	; 48
    5a8e:	8a 30       	cpi	r24, 0x0A	; 10
    5a90:	08 f0       	brcs	.+2      	; 0x5a94 <StrCalc+0x466>
    5a92:	80 e0       	ldi	r24, 0x00	; 0
    5a94:	89 0f       	add	r24, r25
			 if (newC<10){
    5a96:	8a 30       	cpi	r24, 0x0A	; 10
    5a98:	18 f4       	brcc	.+6      	; 0x5aa0 <StrCalc+0x472>
			     Result[i]=Chr(newC);
    5a9a:	80 5d       	subi	r24, 0xD0	; 208
    5a9c:	d7 01       	movw	r26, r14
    5a9e:	28 c0       	rjmp	.+80     	; 0x5af0 <StrCalc+0x4c2>
				 zMin=newC/10;
			 }else if (newC>=10){
                 //Lebih
				 Result[i]=Chr(newC%10);
    5aa0:	6a e0       	ldi	r22, 0x0A	; 10
    5aa2:	0e 94 ea a9 	call	0x153d4	; 0x153d4 <__udivmodqi4>
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
    5aa6:	9a 30       	cpi	r25, 0x0A	; 10
    5aa8:	10 f0       	brcs	.+4      	; 0x5aae <StrCalc+0x480>
    5aaa:	90 e3       	ldi	r25, 0x30	; 48
    5aac:	01 c0       	rjmp	.+2      	; 0x5ab0 <StrCalc+0x482>
	    Result='0'+X;
    5aae:	90 5d       	subi	r25, 0xD0	; 208
			 if (newC<10){
			     Result[i]=Chr(newC);
				 zMin=newC/10;
			 }else if (newC>=10){
                 //Lebih
				 Result[i]=Chr(newC%10);
    5ab0:	f7 01       	movw	r30, r14
    5ab2:	90 83       	st	Z, r25
    5ab4:	83 2f       	mov	r24, r19
    5ab6:	0e c0       	rjmp	.+28     	; 0x5ad4 <StrCalc+0x4a6>
				 zMin=newC/10;
			     for(j=i+1;j<lenA;j++){
				     if ((Ord(tmpA[lenA-j-1])+zMin)>=10){
    5ab8:	d4 01       	movw	r26, r8
    5aba:	a8 1b       	sub	r26, r24
    5abc:	b1 09       	sbc	r27, r1
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
    5abe:	f2 01       	movw	r30, r4
    5ac0:	ea 0f       	add	r30, r26
    5ac2:	fb 1f       	adc	r31, r27
    5ac4:	90 81       	ld	r25, Z
    5ac6:	90 53       	subi	r25, 0x30	; 48
    5ac8:	9a 30       	cpi	r25, 0x0A	; 10
    5aca:	08 f0       	brcs	.+2      	; 0x5ace <StrCalc+0x4a0>
    5acc:	79 c0       	rjmp	.+242    	; 0x5bc0 <StrCalc+0x592>
			 }else if (newC>=10){
                 //Lebih
				 Result[i]=Chr(newC%10);
				 zMin=newC/10;
			     for(j=i+1;j<lenA;j++){
				     if ((Ord(tmpA[lenA-j-1])+zMin)>=10){
    5ace:	99 30       	cpi	r25, 0x09	; 9
    5ad0:	29 f4       	brne	.+10     	; 0x5adc <StrCalc+0x4ae>
					     tmpA[lenA-j-1]=Chr((Ord(tmpA[lenA-j-1])+zMin)%10);
    5ad2:	30 82       	st	Z, r3
				 zMin=newC/10;
			 }else if (newC>=10){
                 //Lebih
				 Result[i]=Chr(newC%10);
				 zMin=newC/10;
			     for(j=i+1;j<lenA;j++){
    5ad4:	8f 5f       	subi	r24, 0xFF	; 255
    5ad6:	87 15       	cp	r24, r7
    5ad8:	78 f3       	brcs	.-34     	; 0x5ab8 <StrCalc+0x48a>
    5ada:	0d c0       	rjmp	.+26     	; 0x5af6 <StrCalc+0x4c8>
				     if ((Ord(tmpA[lenA-j-1])+zMin)>=10){
					     tmpA[lenA-j-1]=Chr((Ord(tmpA[lenA-j-1])+zMin)%10);
						 zMin=1;
					 }else{
					     tmpA[lenA-j-1]=Chr((Ord(tmpA[lenA-j-1])+zMin));
    5adc:	89 2f       	mov	r24, r25
    5ade:	8f 5f       	subi	r24, 0xFF	; 255
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
    5ae0:	8a 30       	cpi	r24, 0x0A	; 10
    5ae2:	10 f0       	brcs	.+4      	; 0x5ae8 <StrCalc+0x4ba>
    5ae4:	80 e3       	ldi	r24, 0x30	; 48
    5ae6:	02 c0       	rjmp	.+4      	; 0x5aec <StrCalc+0x4be>
	    Result='0'+X;
    5ae8:	89 2f       	mov	r24, r25
    5aea:	8f 5c       	subi	r24, 0xCF	; 207
			     for(j=i+1;j<lenA;j++){
				     if ((Ord(tmpA[lenA-j-1])+zMin)>=10){
					     tmpA[lenA-j-1]=Chr((Ord(tmpA[lenA-j-1])+zMin)%10);
						 zMin=1;
					 }else{
					     tmpA[lenA-j-1]=Chr((Ord(tmpA[lenA-j-1])+zMin));
    5aec:	a4 0d       	add	r26, r4
    5aee:	b5 1d       	adc	r27, r5
    5af0:	8c 93       	st	X, r24
    5af2:	20 e0       	ldi	r18, 0x00	; 0
    5af4:	01 c0       	rjmp	.+2      	; 0x5af8 <StrCalc+0x4ca>
				 zMin=newC/10;
			 }else if (newC>=10){
                 //Lebih
				 Result[i]=Chr(newC%10);
				 zMin=newC/10;
			     for(j=i+1;j<lenA;j++){
    5af6:	21 e0       	ldi	r18, 0x01	; 1
		 }strC[iPos]=0;
	 }
	 else                     //         1
	 if (TCalc==TPLUS){  //A:099999999
	     zMin=0;              //B:000000001
	     for(i=0;i<lenA;i++){ //C:       00
    5af8:	3f 5f       	subi	r19, 0xFF	; 255
    5afa:	08 94       	sec
    5afc:	e1 1c       	adc	r14, r1
    5afe:	f1 1c       	adc	r15, r1
    5b00:	41 50       	subi	r20, 0x01	; 1
    5b02:	50 40       	sbci	r21, 0x00	; 0
    5b04:	08 94       	sec
    5b06:	c1 08       	sbc	r12, r1
    5b08:	d1 08       	sbc	r13, r1
    5b0a:	37 15       	cp	r19, r7
    5b0c:	08 f4       	brcc	.+2      	; 0x5b10 <StrCalc+0x4e2>
    5b0e:	b6 cf       	rjmp	.-148    	; 0x5a7c <StrCalc+0x44e>
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
	    Result='0'+X;
    5b10:	20 5d       	subi	r18, 0xD0	; 208
				 }//EndFor j                
			   }//End else
			 }//EndFor

		  //Result[lenA]==Chr(zMin); ???
		  Result[lenA]=Chr(zMin);
    5b12:	de 01       	movw	r26, r28
    5b14:	dd 96       	adiw	r26, 0x3d	; 61
    5b16:	fd 01       	movw	r30, r26
    5b18:	e0 0f       	add	r30, r16
    5b1a:	f1 1f       	adc	r31, r17
    5b1c:	20 83       	st	Z, r18
		  Result[lenA+1]=0;
    5b1e:	0c 0f       	add	r16, r28
    5b20:	1d 1f       	adc	r17, r29
    5b22:	f8 01       	movw	r30, r16
    5b24:	16 ae       	std	Z+62, r1	; 0x3e
		 FixLen=strlen(Result);
		 for(i=0;i<FixLen;i++){
		     strC[i]=Result[FixLen-i-1];
		 }strC[FixLen]=0;
*/
         FixLen=strlen(Result);
    5b26:	fd 01       	movw	r30, r26
    5b28:	01 90       	ld	r0, Z+
    5b2a:	00 20       	and	r0, r0
    5b2c:	e9 f7       	brne	.-6      	; 0x5b28 <StrCalc+0x4fa>
    5b2e:	31 97       	sbiw	r30, 0x01	; 1
    5b30:	5e 2f       	mov	r21, r30
    5b32:	5a 1b       	sub	r21, r26
    5b34:	25 2f       	mov	r18, r21
    5b36:	30 e0       	ldi	r19, 0x00	; 0
    5b38:	21 50       	subi	r18, 0x01	; 1
    5b3a:	30 40       	sbci	r19, 0x00	; 0
    5b3c:	2a 0f       	add	r18, r26
    5b3e:	3b 1f       	adc	r19, r27
    5b40:	40 e0       	ldi	r20, 0x00	; 0
    5b42:	90 e0       	ldi	r25, 0x00	; 0
		 iPos=0;
		 for(i=0;i<FixLen;i++){
		     if ((i==0)&&(IsNegative==True)){
			     strC[iPos]='-';
    5b44:	6d e2       	ldi	r22, 0x2D	; 45
    5b46:	16 c0       	rjmp	.+44     	; 0x5b74 <StrCalc+0x546>
		 }strC[FixLen]=0;
*/
         FixLen=strlen(Result);
		 iPos=0;
		 for(i=0;i<FixLen;i++){
		     if ((i==0)&&(IsNegative==True)){
    5b48:	44 23       	and	r20, r20
    5b4a:	51 f4       	brne	.+20     	; 0x5b60 <StrCalc+0x532>
    5b4c:	63 96       	adiw	r28, 0x13	; 19
    5b4e:	ff ad       	ldd	r31, Y+63	; 0x3f
    5b50:	63 97       	sbiw	r28, 0x13	; 19
    5b52:	f1 30       	cpi	r31, 0x01	; 1
    5b54:	29 f4       	brne	.+10     	; 0x5b60 <StrCalc+0x532>
			     strC[iPos]='-';
    5b56:	f5 01       	movw	r30, r10
    5b58:	e9 0f       	add	r30, r25
    5b5a:	f1 1d       	adc	r31, r1
    5b5c:	60 83       	st	Z, r22
				 iPos++;
    5b5e:	9f 5f       	subi	r25, 0xFF	; 255
			 }
		     strC[iPos]=Result[FixLen-i-1];
    5b60:	f5 01       	movw	r30, r10
    5b62:	e9 0f       	add	r30, r25
    5b64:	f1 1d       	adc	r31, r1
    5b66:	d9 01       	movw	r26, r18
    5b68:	8c 91       	ld	r24, X
    5b6a:	80 83       	st	Z, r24
			 iPos++;
    5b6c:	9f 5f       	subi	r25, 0xFF	; 255
		     strC[i]=Result[FixLen-i-1];
		 }strC[FixLen]=0;
*/
         FixLen=strlen(Result);
		 iPos=0;
		 for(i=0;i<FixLen;i++){
    5b6e:	4f 5f       	subi	r20, 0xFF	; 255
    5b70:	21 50       	subi	r18, 0x01	; 1
    5b72:	30 40       	sbci	r19, 0x00	; 0
    5b74:	45 17       	cp	r20, r21
    5b76:	40 f3       	brcs	.-48     	; 0x5b48 <StrCalc+0x51a>
			     strC[iPos]='-';
				 iPos++;
			 }
		     strC[iPos]=Result[FixLen-i-1];
			 iPos++;
		 }strC[iPos]=0;
    5b78:	f5 01       	movw	r30, r10
    5b7a:	e9 0f       	add	r30, r25
    5b7c:	f1 1d       	adc	r31, r1
    5b7e:	10 82       	st	Z, r1

       RemZeroLead(strC);
    5b80:	c5 01       	movw	r24, r10
    5b82:	0e 94 df 26 	call	0x4dbe	; 0x4dbe <RemZeroLead>
  //    sprintf_P(strSend,PSTR("C':%s"),strC);
//	 uart_print(0,1,strSend);

	 }//EndIf 

	 if (TOperation==TMULTIPLY){
    5b86:	b2 e0       	ldi	r27, 0x02	; 2
    5b88:	6b 16       	cp	r6, r27
    5b8a:	e1 f4       	brne	.+56     	; 0x5bc4 <StrCalc+0x596>
		 valA=atol(strA);
		 valB=atol(strB);
		 valC=valA*valB;		 
         ltoa(valC,strC,10);
		 */
		 CalcMultiply(strA,strB,strC);
    5b8c:	67 96       	adiw	r28, 0x17	; 23
    5b8e:	8e ad       	ldd	r24, Y+62	; 0x3e
    5b90:	9f ad       	ldd	r25, Y+63	; 0x3f
    5b92:	67 97       	sbiw	r28, 0x17	; 23
    5b94:	69 96       	adiw	r28, 0x19	; 25
    5b96:	6e ad       	ldd	r22, Y+62	; 0x3e
    5b98:	7f ad       	ldd	r23, Y+63	; 0x3f
    5b9a:	69 97       	sbiw	r28, 0x19	; 25
    5b9c:	a5 01       	movw	r20, r10
    5b9e:	0e 94 fb 2d 	call	0x5bf6	; 0x5bf6 <CalcMultiply>
    5ba2:	10 c0       	rjmp	.+32     	; 0x5bc4 <StrCalc+0x596>
	 }
}
    5ba4:	e1 e0       	ldi	r30, 0x01	; 1
    5ba6:	62 96       	adiw	r28, 0x12	; 18
    5ba8:	ef af       	std	Y+63, r30	; 0x3f
    5baa:	62 97       	sbiw	r28, 0x12	; 18
    5bac:	ac ce       	rjmp	.-680    	; 0x5906 <StrCalc+0x2d8>
    5bae:	63 96       	adiw	r28, 0x13	; 19
    5bb0:	1f ae       	std	Y+63, r1	; 0x3f
    5bb2:	63 97       	sbiw	r28, 0x13	; 19
    5bb4:	48 cf       	rjmp	.-368    	; 0x5a46 <StrCalc+0x418>
    5bb6:	f1 e0       	ldi	r31, 0x01	; 1
    5bb8:	63 96       	adiw	r28, 0x13	; 19
    5bba:	ff af       	std	Y+63, r31	; 0x3f
    5bbc:	63 97       	sbiw	r28, 0x13	; 19
    5bbe:	43 cf       	rjmp	.-378    	; 0x5a46 <StrCalc+0x418>
    5bc0:	90 e0       	ldi	r25, 0x00	; 0
    5bc2:	8c cf       	rjmp	.-232    	; 0x5adc <StrCalc+0x4ae>
    5bc4:	c8 5a       	subi	r28, 0xA8	; 168
    5bc6:	df 4f       	sbci	r29, 0xFF	; 255
    5bc8:	0f b6       	in	r0, 0x3f	; 63
    5bca:	f8 94       	cli
    5bcc:	de bf       	out	0x3e, r29	; 62
    5bce:	0f be       	out	0x3f, r0	; 63
    5bd0:	cd bf       	out	0x3d, r28	; 61
    5bd2:	cf 91       	pop	r28
    5bd4:	df 91       	pop	r29
    5bd6:	1f 91       	pop	r17
    5bd8:	0f 91       	pop	r16
    5bda:	ff 90       	pop	r15
    5bdc:	ef 90       	pop	r14
    5bde:	df 90       	pop	r13
    5be0:	cf 90       	pop	r12
    5be2:	bf 90       	pop	r11
    5be4:	af 90       	pop	r10
    5be6:	9f 90       	pop	r9
    5be8:	8f 90       	pop	r8
    5bea:	7f 90       	pop	r7
    5bec:	6f 90       	pop	r6
    5bee:	5f 90       	pop	r5
    5bf0:	4f 90       	pop	r4
    5bf2:	3f 90       	pop	r3
    5bf4:	08 95       	ret

00005bf6 <CalcMultiply>:
	 }
	 strResult[lenR]=0;
}


void CalcMultiply(char *strA,char *strB,char *strC){
    5bf6:	4f 92       	push	r4
    5bf8:	5f 92       	push	r5
    5bfa:	6f 92       	push	r6
    5bfc:	7f 92       	push	r7
    5bfe:	8f 92       	push	r8
    5c00:	9f 92       	push	r9
    5c02:	af 92       	push	r10
    5c04:	bf 92       	push	r11
    5c06:	cf 92       	push	r12
    5c08:	df 92       	push	r13
    5c0a:	ef 92       	push	r14
    5c0c:	ff 92       	push	r15
    5c0e:	0f 93       	push	r16
    5c10:	1f 93       	push	r17
    5c12:	df 93       	push	r29
    5c14:	cf 93       	push	r28
    5c16:	cd b7       	in	r28, 0x3d	; 61
    5c18:	de b7       	in	r29, 0x3e	; 62
    5c1a:	a8 97       	sbiw	r28, 0x28	; 40
    5c1c:	0f b6       	in	r0, 0x3f	; 63
    5c1e:	f8 94       	cli
    5c20:	de bf       	out	0x3e, r29	; 62
    5c22:	0f be       	out	0x3f, r0	; 63
    5c24:	cd bf       	out	0x3d, r28	; 61
    5c26:	3c 01       	movw	r6, r24
    5c28:	6b 01       	movw	r12, r22
    5c2a:	2a 01       	movw	r4, r20
	 
	 */
	 char i,lenB;
	 char prevSeg[20],currSeg[20];

     RemZeroLead(strA);
    5c2c:	0e 94 df 26 	call	0x4dbe	; 0x4dbe <RemZeroLead>
     RemZeroLead(strB);
    5c30:	c6 01       	movw	r24, r12
    5c32:	0e 94 df 26 	call	0x4dbe	; 0x4dbe <RemZeroLead>
	 lenB=strlen(strB);
    5c36:	d6 01       	movw	r26, r12
    5c38:	0d 90       	ld	r0, X+
    5c3a:	00 20       	and	r0, r0
    5c3c:	e9 f7       	brne	.-6      	; 0x5c38 <CalcMultiply+0x42>
    5c3e:	11 97       	sbiw	r26, 0x01	; 1
    5c40:	8a 2e       	mov	r8, r26
    5c42:	8c 18       	sub	r8, r12
	 sprintf_P(prevSeg,PSTR("0"));
    5c44:	00 d0       	rcall	.+0      	; 0x5c46 <CalcMultiply+0x50>
    5c46:	00 d0       	rcall	.+0      	; 0x5c48 <CalcMultiply+0x52>
    5c48:	8e 01       	movw	r16, r28
    5c4a:	0f 5f       	subi	r16, 0xFF	; 255
    5c4c:	1f 4f       	sbci	r17, 0xFF	; 255
    5c4e:	ad b7       	in	r26, 0x3d	; 61
    5c50:	be b7       	in	r27, 0x3e	; 62
    5c52:	12 96       	adiw	r26, 0x02	; 2
    5c54:	1c 93       	st	X, r17
    5c56:	0e 93       	st	-X, r16
    5c58:	11 97       	sbiw	r26, 0x01	; 1
    5c5a:	8d e0       	ldi	r24, 0x0D	; 13
    5c5c:	97 e0       	ldi	r25, 0x07	; 7
    5c5e:	14 96       	adiw	r26, 0x04	; 4
    5c60:	9c 93       	st	X, r25
    5c62:	8e 93       	st	-X, r24
    5c64:	13 97       	sbiw	r26, 0x03	; 3
    5c66:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	 sprintf_P(currSeg,PSTR("0"));
    5c6a:	85 e1       	ldi	r24, 0x15	; 21
    5c6c:	e8 2e       	mov	r14, r24
    5c6e:	f1 2c       	mov	r15, r1
    5c70:	ec 0e       	add	r14, r28
    5c72:	fd 1e       	adc	r15, r29
    5c74:	ed b7       	in	r30, 0x3d	; 61
    5c76:	fe b7       	in	r31, 0x3e	; 62
    5c78:	f2 82       	std	Z+2, r15	; 0x02
    5c7a:	e1 82       	std	Z+1, r14	; 0x01
    5c7c:	8b e0       	ldi	r24, 0x0B	; 11
    5c7e:	97 e0       	ldi	r25, 0x07	; 7
    5c80:	94 83       	std	Z+4, r25	; 0x04
    5c82:	83 83       	std	Z+3, r24	; 0x03
    5c84:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
    5c88:	bb 24       	eor	r11, r11
    5c8a:	0f 90       	pop	r0
    5c8c:	0f 90       	pop	r0
    5c8e:	0f 90       	pop	r0
    5c90:	0f 90       	pop	r0
    5c92:	a0 2e       	mov	r10, r16
    5c94:	91 2e       	mov	r9, r17

	 for(i=0;i<strlen(strB);i++){
	     //
         CalcSegmen(strA,strB[lenB-1-i],currSeg);
    5c96:	08 2d       	mov	r16, r8
    5c98:	10 e0       	ldi	r17, 0x00	; 0
    5c9a:	01 50       	subi	r16, 0x01	; 1
    5c9c:	10 40       	sbci	r17, 0x00	; 0
    5c9e:	1f c0       	rjmp	.+62     	; 0x5cde <CalcMultiply+0xe8>
    5ca0:	f8 01       	movw	r30, r16
    5ca2:	e8 1b       	sub	r30, r24
    5ca4:	f9 0b       	sbc	r31, r25
    5ca6:	ec 0d       	add	r30, r12
    5ca8:	fd 1d       	adc	r31, r13
    5caa:	c3 01       	movw	r24, r6
    5cac:	60 81       	ld	r22, Z
    5cae:	a7 01       	movw	r20, r14
    5cb0:	0e 94 6a 24 	call	0x48d4	; 0x48d4 <CalcSegmen>
         AddZeroLag(currSeg,strlen(currSeg)+i);
    5cb4:	f7 01       	movw	r30, r14
    5cb6:	01 90       	ld	r0, Z+
    5cb8:	00 20       	and	r0, r0
    5cba:	e9 f7       	brne	.-6      	; 0x5cb6 <CalcMultiply+0xc0>
    5cbc:	31 97       	sbiw	r30, 0x01	; 1
    5cbe:	ee 19       	sub	r30, r14
    5cc0:	ff 09       	sbc	r31, r15
    5cc2:	6b 2d       	mov	r22, r11
    5cc4:	6e 0f       	add	r22, r30
    5cc6:	c7 01       	movw	r24, r14
    5cc8:	0e 94 fc 2a 	call	0x55f8	; 0x55f8 <AddZeroLag>
	     StrCalc(TPLUS,prevSeg,currSeg,prevSeg);
    5ccc:	81 e0       	ldi	r24, 0x01	; 1
    5cce:	6a 2d       	mov	r22, r10
    5cd0:	79 2d       	mov	r23, r9
    5cd2:	a7 01       	movw	r20, r14
    5cd4:	2a 2d       	mov	r18, r10
    5cd6:	39 2d       	mov	r19, r9
    5cd8:	0e 94 17 2b 	call	0x562e	; 0x562e <StrCalc>
     RemZeroLead(strB);
	 lenB=strlen(strB);
	 sprintf_P(prevSeg,PSTR("0"));
	 sprintf_P(currSeg,PSTR("0"));

	 for(i=0;i<strlen(strB);i++){
    5cdc:	b3 94       	inc	r11
    5cde:	f6 01       	movw	r30, r12
    5ce0:	01 90       	ld	r0, Z+
    5ce2:	00 20       	and	r0, r0
    5ce4:	e9 f7       	brne	.-6      	; 0x5ce0 <CalcMultiply+0xea>
    5ce6:	31 97       	sbiw	r30, 0x01	; 1
    5ce8:	ec 19       	sub	r30, r12
    5cea:	fd 09       	sbc	r31, r13
    5cec:	8b 2d       	mov	r24, r11
    5cee:	90 e0       	ldi	r25, 0x00	; 0
    5cf0:	8e 17       	cp	r24, r30
    5cf2:	9f 07       	cpc	r25, r31
    5cf4:	a8 f2       	brcs	.-86     	; 0x5ca0 <CalcMultiply+0xaa>
	     //
         CalcSegmen(strA,strB[lenB-1-i],currSeg);
         AddZeroLag(currSeg,strlen(currSeg)+i);
	     StrCalc(TPLUS,prevSeg,currSeg,prevSeg);
	 }
	 sprintf_P(strC,PSTR("%s"),prevSeg);
    5cf6:	00 d0       	rcall	.+0      	; 0x5cf8 <CalcMultiply+0x102>
    5cf8:	00 d0       	rcall	.+0      	; 0x5cfa <CalcMultiply+0x104>
    5cfa:	00 d0       	rcall	.+0      	; 0x5cfc <CalcMultiply+0x106>
    5cfc:	ed b7       	in	r30, 0x3d	; 61
    5cfe:	fe b7       	in	r31, 0x3e	; 62
    5d00:	31 96       	adiw	r30, 0x01	; 1
    5d02:	ad b7       	in	r26, 0x3d	; 61
    5d04:	be b7       	in	r27, 0x3e	; 62
    5d06:	12 96       	adiw	r26, 0x02	; 2
    5d08:	5c 92       	st	X, r5
    5d0a:	4e 92       	st	-X, r4
    5d0c:	11 97       	sbiw	r26, 0x01	; 1
    5d0e:	88 e0       	ldi	r24, 0x08	; 8
    5d10:	97 e0       	ldi	r25, 0x07	; 7
    5d12:	93 83       	std	Z+3, r25	; 0x03
    5d14:	82 83       	std	Z+2, r24	; 0x02
    5d16:	a4 82       	std	Z+4, r10	; 0x04
    5d18:	95 82       	std	Z+5, r9	; 0x05
    5d1a:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
    5d1e:	ed b7       	in	r30, 0x3d	; 61
    5d20:	fe b7       	in	r31, 0x3e	; 62
    5d22:	36 96       	adiw	r30, 0x06	; 6
    5d24:	0f b6       	in	r0, 0x3f	; 63
    5d26:	f8 94       	cli
    5d28:	fe bf       	out	0x3e, r31	; 62
    5d2a:	0f be       	out	0x3f, r0	; 63
    5d2c:	ed bf       	out	0x3d, r30	; 61
}
    5d2e:	a8 96       	adiw	r28, 0x28	; 40
    5d30:	0f b6       	in	r0, 0x3f	; 63
    5d32:	f8 94       	cli
    5d34:	de bf       	out	0x3e, r29	; 62
    5d36:	0f be       	out	0x3f, r0	; 63
    5d38:	cd bf       	out	0x3d, r28	; 61
    5d3a:	cf 91       	pop	r28
    5d3c:	df 91       	pop	r29
    5d3e:	1f 91       	pop	r17
    5d40:	0f 91       	pop	r16
    5d42:	ff 90       	pop	r15
    5d44:	ef 90       	pop	r14
    5d46:	df 90       	pop	r13
    5d48:	cf 90       	pop	r12
    5d4a:	bf 90       	pop	r11
    5d4c:	af 90       	pop	r10
    5d4e:	9f 90       	pop	r9
    5d50:	8f 90       	pop	r8
    5d52:	7f 90       	pop	r7
    5d54:	6f 90       	pop	r6
    5d56:	5f 90       	pop	r5
    5d58:	4f 90       	pop	r4
    5d5a:	08 95       	ret

00005d5c <NormalizeOverflow>:
		 Length=strlen(strNumber);
		 StrPosCopy(strNumber,strNumber,MinPos,(Length-MinPos));	      
	 }
}

void NormalizeOverflow(char *strOverflowed){
    5d5c:	cf 92       	push	r12
    5d5e:	df 92       	push	r13
    5d60:	ef 92       	push	r14
    5d62:	ff 92       	push	r15
    5d64:	0f 93       	push	r16
    5d66:	1f 93       	push	r17
    5d68:	df 93       	push	r29
    5d6a:	cf 93       	push	r28
    5d6c:	cd b7       	in	r28, 0x3d	; 61
    5d6e:	de b7       	in	r29, 0x3e	; 62
    5d70:	64 97       	sbiw	r28, 0x14	; 20
    5d72:	0f b6       	in	r0, 0x3f	; 63
    5d74:	f8 94       	cli
    5d76:	de bf       	out	0x3e, r29	; 62
    5d78:	0f be       	out	0x3f, r0	; 63
    5d7a:	cd bf       	out	0x3d, r28	; 61
    5d7c:	d8 2e       	mov	r13, r24
    5d7e:	c9 2e       	mov	r12, r25
char i,Length,strMaxValue[20];//-99999999

     Length=strlen(strOverflowed);//-999453
    5d80:	a8 2f       	mov	r26, r24
    5d82:	b9 2f       	mov	r27, r25
    5d84:	fd 01       	movw	r30, r26
    5d86:	01 90       	ld	r0, Z+
    5d88:	00 20       	and	r0, r0
    5d8a:	e9 f7       	brne	.-6      	; 0x5d86 <NormalizeOverflow+0x2a>
    5d8c:	31 97       	sbiw	r30, 0x01	; 1
    5d8e:	4e 2f       	mov	r20, r30
    5d90:	48 1b       	sub	r20, r24
    5d92:	20 e0       	ldi	r18, 0x00	; 0
    5d94:	30 e0       	ldi	r19, 0x00	; 0
    5d96:	7e 01       	movw	r14, r28
    5d98:	08 94       	sec
    5d9a:	e1 1c       	adc	r14, r1
    5d9c:	f1 1c       	adc	r15, r1
    5d9e:	04 2f       	mov	r16, r20
    5da0:	10 e0       	ldi	r17, 0x00	; 0
    5da2:	0e c0       	rjmp	.+28     	; 0x5dc0 <NormalizeOverflow+0x64>
     for(i=0;i<Length;i++){//123456
	     strMaxValue[i]='0'+((Length-i)/Length);
    5da4:	f7 01       	movw	r30, r14
    5da6:	e2 0f       	add	r30, r18
    5da8:	f3 1f       	adc	r31, r19
    5daa:	c8 01       	movw	r24, r16
    5dac:	82 1b       	sub	r24, r18
    5dae:	93 0b       	sbc	r25, r19
    5db0:	64 2f       	mov	r22, r20
    5db2:	70 e0       	ldi	r23, 0x00	; 0
    5db4:	0e 94 17 aa 	call	0x1542e	; 0x1542e <__divmodhi4>
    5db8:	60 5d       	subi	r22, 0xD0	; 208
    5dba:	60 83       	st	Z, r22
    5dbc:	2f 5f       	subi	r18, 0xFF	; 255
    5dbe:	3f 4f       	sbci	r19, 0xFF	; 255

void NormalizeOverflow(char *strOverflowed){
char i,Length,strMaxValue[20];//-99999999

     Length=strlen(strOverflowed);//-999453
     for(i=0;i<Length;i++){//123456
    5dc0:	24 17       	cp	r18, r20
    5dc2:	80 f3       	brcs	.-32     	; 0x5da4 <NormalizeOverflow+0x48>
	     strMaxValue[i]='0'+((Length-i)/Length);
	 }strMaxValue[Length]=0;
    5dc4:	0e 0d       	add	r16, r14
    5dc6:	1f 1d       	adc	r17, r15
    5dc8:	f8 01       	movw	r30, r16
    5dca:	10 82       	st	Z, r1
     
	 //if (NinePos<Length-4)
	 StrCalc(TPLUS,strMaxValue,strOverflowed,strOverflowed);
    5dcc:	81 e0       	ldi	r24, 0x01	; 1
    5dce:	b7 01       	movw	r22, r14
    5dd0:	4d 2d       	mov	r20, r13
    5dd2:	5c 2d       	mov	r21, r12
    5dd4:	2d 2d       	mov	r18, r13
    5dd6:	3c 2d       	mov	r19, r12
    5dd8:	0e 94 17 2b 	call	0x562e	; 0x562e <StrCalc>
}
    5ddc:	64 96       	adiw	r28, 0x14	; 20
    5dde:	0f b6       	in	r0, 0x3f	; 63
    5de0:	f8 94       	cli
    5de2:	de bf       	out	0x3e, r29	; 62
    5de4:	0f be       	out	0x3f, r0	; 63
    5de6:	cd bf       	out	0x3d, r28	; 61
    5de8:	cf 91       	pop	r28
    5dea:	df 91       	pop	r29
    5dec:	1f 91       	pop	r17
    5dee:	0f 91       	pop	r16
    5df0:	ff 90       	pop	r15
    5df2:	ef 90       	pop	r14
    5df4:	df 90       	pop	r13
    5df6:	cf 90       	pop	r12
    5df8:	08 95       	ret

00005dfa <AddSpaceLead>:
	    String[i]=' ';
	 }String[Size]=0;
  }
}

void AddSpaceLead(char *String,unsigned char Size){//
    5dfa:	bf 92       	push	r11
    5dfc:	cf 92       	push	r12
    5dfe:	df 92       	push	r13
    5e00:	ef 92       	push	r14
    5e02:	ff 92       	push	r15
    5e04:	0f 93       	push	r16
    5e06:	1f 93       	push	r17
    5e08:	df 93       	push	r29
    5e0a:	cf 93       	push	r28
    5e0c:	cd b7       	in	r28, 0x3d	; 61
    5e0e:	de b7       	in	r29, 0x3e	; 62
    5e10:	e2 97       	sbiw	r28, 0x32	; 50
    5e12:	0f b6       	in	r0, 0x3f	; 63
    5e14:	f8 94       	cli
    5e16:	de bf       	out	0x3e, r29	; 62
    5e18:	0f be       	out	0x3f, r0	; 63
    5e1a:	cd bf       	out	0x3d, r28	; 61
    5e1c:	8c 01       	movw	r16, r24
     char i,Length,strAdded[50];
     Length=strlen(String);
    5e1e:	fc 01       	movw	r30, r24
    5e20:	01 90       	ld	r0, Z+
    5e22:	00 20       	and	r0, r0
    5e24:	e9 f7       	brne	.-6      	; 0x5e20 <AddSpaceLead+0x26>
    5e26:	31 97       	sbiw	r30, 0x01	; 1
    5e28:	2e 2f       	mov	r18, r30
    5e2a:	28 1b       	sub	r18, r24

	 if (Size>Length){
    5e2c:	26 17       	cp	r18, r22
    5e2e:	e0 f5       	brcc	.+120    	; 0x5ea8 <AddSpaceLead+0xae>
    5e30:	7e 01       	movw	r14, r28
    5e32:	08 94       	sec
    5e34:	e1 1c       	adc	r14, r1
    5e36:	f1 1c       	adc	r15, r1
    5e38:	f7 01       	movw	r30, r14
	    String[i]=' ';
	 }String[Size]=0;
  }
}

void AddSpaceLead(char *String,unsigned char Size){//
    5e3a:	be 2c       	mov	r11, r14
     char i,Length,strAdded[50];
     Length=strlen(String);

	 if (Size>Length){
         for(i=0;i<Size;i++){
	         strAdded[i]=' ';
    5e3c:	90 e2       	ldi	r25, 0x20	; 32
    5e3e:	01 c0       	rjmp	.+2      	; 0x5e42 <AddSpaceLead+0x48>
    5e40:	91 93       	st	Z+, r25
void AddSpaceLead(char *String,unsigned char Size){//
     char i,Length,strAdded[50];
     Length=strlen(String);

	 if (Size>Length){
         for(i=0;i<Size;i++){
    5e42:	8e 2f       	mov	r24, r30
    5e44:	8b 19       	sub	r24, r11
    5e46:	86 17       	cp	r24, r22
    5e48:	d8 f3       	brcs	.-10     	; 0x5e40 <AddSpaceLead+0x46>
	         strAdded[i]=' ';
	     }strAdded[Size]=0;
    5e4a:	46 2f       	mov	r20, r22
    5e4c:	50 e0       	ldi	r21, 0x00	; 0
    5e4e:	ce 01       	movw	r24, r28
    5e50:	01 96       	adiw	r24, 0x01	; 1
    5e52:	fc 01       	movw	r30, r24
    5e54:	e4 0f       	add	r30, r20
    5e56:	f5 1f       	adc	r31, r21
    5e58:	10 82       	st	Z, r1
	     //Copy
         for(i=(Size-Length);i<Size;i++){
    5e5a:	76 2f       	mov	r23, r22
    5e5c:	72 1b       	sub	r23, r18
    5e5e:	6c 01       	movw	r12, r24
	         strAdded[i]=String[i-(Size-Length)];
    5e60:	30 e0       	ldi	r19, 0x00	; 0
    5e62:	24 1b       	sub	r18, r20
    5e64:	35 0b       	sbc	r19, r21
    5e66:	0c c0       	rjmp	.+24     	; 0x5e80 <AddSpaceLead+0x86>
    5e68:	e7 2f       	mov	r30, r23
    5e6a:	f0 e0       	ldi	r31, 0x00	; 0
    5e6c:	d6 01       	movw	r26, r12
    5e6e:	ae 0f       	add	r26, r30
    5e70:	bf 1f       	adc	r27, r31
    5e72:	e0 0f       	add	r30, r16
    5e74:	f1 1f       	adc	r31, r17
    5e76:	e2 0f       	add	r30, r18
    5e78:	f3 1f       	adc	r31, r19
    5e7a:	80 81       	ld	r24, Z
    5e7c:	8c 93       	st	X, r24
	 if (Size>Length){
         for(i=0;i<Size;i++){
	         strAdded[i]=' ';
	     }strAdded[Size]=0;
	     //Copy
         for(i=(Size-Length);i<Size;i++){
    5e7e:	7f 5f       	subi	r23, 0xFF	; 255
    5e80:	76 17       	cp	r23, r22
    5e82:	90 f3       	brcs	.-28     	; 0x5e68 <AddSpaceLead+0x6e>
	         strAdded[i]=String[i-(Size-Length)];
	     }strAdded[Size]=0;
    5e84:	4c 0d       	add	r20, r12
    5e86:	5d 1d       	adc	r21, r13
    5e88:	da 01       	movw	r26, r20
    5e8a:	1c 92       	st	X, r1
    5e8c:	f8 01       	movw	r30, r16
    5e8e:	04 c0       	rjmp	.+8      	; 0x5e98 <AddSpaceLead+0x9e>
	     //Spaced
         for(i=0;i<Size;i++){
	         String[i]=strAdded[i];
    5e90:	d7 01       	movw	r26, r14
    5e92:	8d 91       	ld	r24, X+
    5e94:	7d 01       	movw	r14, r26
    5e96:	81 93       	st	Z+, r24
	     //Copy
         for(i=(Size-Length);i<Size;i++){
	         strAdded[i]=String[i-(Size-Length)];
	     }strAdded[Size]=0;
	     //Spaced
         for(i=0;i<Size;i++){
    5e98:	8e 2d       	mov	r24, r14
    5e9a:	8b 19       	sub	r24, r11
    5e9c:	86 17       	cp	r24, r22
    5e9e:	c0 f3       	brcs	.-16     	; 0x5e90 <AddSpaceLead+0x96>
	         String[i]=strAdded[i];
	     }String[Size]=0;
    5ea0:	06 0f       	add	r16, r22
    5ea2:	11 1d       	adc	r17, r1
    5ea4:	f8 01       	movw	r30, r16
    5ea6:	10 82       	st	Z, r1
	 }
}
    5ea8:	e2 96       	adiw	r28, 0x32	; 50
    5eaa:	0f b6       	in	r0, 0x3f	; 63
    5eac:	f8 94       	cli
    5eae:	de bf       	out	0x3e, r29	; 62
    5eb0:	0f be       	out	0x3f, r0	; 63
    5eb2:	cd bf       	out	0x3d, r28	; 61
    5eb4:	cf 91       	pop	r28
    5eb6:	df 91       	pop	r29
    5eb8:	1f 91       	pop	r17
    5eba:	0f 91       	pop	r16
    5ebc:	ff 90       	pop	r15
    5ebe:	ef 90       	pop	r14
    5ec0:	df 90       	pop	r13
    5ec2:	cf 90       	pop	r12
    5ec4:	bf 90       	pop	r11
    5ec6:	08 95       	ret

00005ec8 <AddSpaceLag>:
	 }
}



void AddSpaceLag(char *String,unsigned char Size){// [CREDITCARD             ]
    5ec8:	cf 93       	push	r28
    5eca:	df 93       	push	r29
    5ecc:	ec 01       	movw	r28, r24
char i,Length;
     Length=strlen(String);
    5ece:	dc 01       	movw	r26, r24
    5ed0:	0d 90       	ld	r0, X+
    5ed2:	00 20       	and	r0, r0
    5ed4:	e9 f7       	brne	.-6      	; 0x5ed0 <AddSpaceLag+0x8>
    5ed6:	11 97       	sbiw	r26, 0x01	; 1
    5ed8:	a8 1b       	sub	r26, r24
    5eda:	b9 0b       	sbc	r27, r25
  if (Length<Size){   
    5edc:	a6 17       	cp	r26, r22
    5ede:	60 f4       	brcc	.+24     	; 0x5ef8 <AddSpaceLag+0x30>
    5ee0:	8a 2f       	mov	r24, r26
     for(i=Length;i<Size;i++){
	    String[i]=' ';
    5ee2:	90 e2       	ldi	r25, 0x20	; 32
    5ee4:	fe 01       	movw	r30, r28
    5ee6:	e8 0f       	add	r30, r24
    5ee8:	f1 1d       	adc	r31, r1
    5eea:	90 83       	st	Z, r25

void AddSpaceLag(char *String,unsigned char Size){// [CREDITCARD             ]
char i,Length;
     Length=strlen(String);
  if (Length<Size){   
     for(i=Length;i<Size;i++){
    5eec:	8f 5f       	subi	r24, 0xFF	; 255
    5eee:	86 17       	cp	r24, r22
    5ef0:	c8 f3       	brcs	.-14     	; 0x5ee4 <AddSpaceLag+0x1c>
	    String[i]=' ';
	 }String[Size]=0;
    5ef2:	c6 0f       	add	r28, r22
    5ef4:	d1 1d       	adc	r29, r1
    5ef6:	18 82       	st	Y, r1
  }
}
    5ef8:	df 91       	pop	r29
    5efa:	cf 91       	pop	r28
    5efc:	08 95       	ret

00005efe <GetProductName>:
	 }    
	 //Clear Decimal

}

void GetProductName(char GradeId,char *strProductName){
    5efe:	0f 93       	push	r16
    5f00:	1f 93       	push	r17
    5f02:	df 93       	push	r29
    5f04:	cf 93       	push	r28
    5f06:	cd b7       	in	r28, 0x3d	; 61
    5f08:	de b7       	in	r29, 0x3e	; 62
    5f0a:	2c 97       	sbiw	r28, 0x0c	; 12
    5f0c:	0f b6       	in	r0, 0x3f	; 63
    5f0e:	f8 94       	cli
    5f10:	de bf       	out	0x3e, r29	; 62
    5f12:	0f be       	out	0x3f, r0	; 63
    5f14:	cd bf       	out	0x3d, r28	; 61
    5f16:	48 2f       	mov	r20, r24
    5f18:	8b 01       	movw	r16, r22
    5f1a:	fe 01       	movw	r30, r28
    5f1c:	31 96       	adiw	r30, 0x01	; 1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    5f1e:	9e 01       	movw	r18, r28
    5f20:	23 5f       	subi	r18, 0xF3	; 243
    5f22:	3f 4f       	sbci	r19, 0xFF	; 255
	     strMemory[i]=data;
    5f24:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    5f26:	e2 17       	cp	r30, r18
    5f28:	f3 07       	cpc	r31, r19
    5f2a:	e1 f7       	brne	.-8      	; 0x5f24 <GetProductName+0x26>
    5f2c:	ce 01       	movw	r24, r28
    5f2e:	01 96       	adiw	r24, 0x01	; 1

void GetProductName(char GradeId,char *strProductName){
char SProductName[12],i,Length;
     FillChar(SProductName,sizeof(SProductName),0); 
	 //eeprom_read_block((void*) &SProductName, (const void*) &DefProductName[GradeId-1],10);
	 if (GradeId>0) eeprom_read_block((void*) &SProductName, (const void*) &DefProductName[GradeId-1],10);
    5f30:	44 23       	and	r20, r20
    5f32:	59 f0       	breq	.+22     	; 0x5f4a <GetProductName+0x4c>
    5f34:	6d e0       	ldi	r22, 0x0D	; 13
    5f36:	46 9f       	mul	r20, r22
    5f38:	b0 01       	movw	r22, r0
    5f3a:	11 24       	eor	r1, r1
    5f3c:	62 55       	subi	r22, 0x52	; 82
    5f3e:	7f 4f       	sbci	r23, 0xFF	; 255
    5f40:	4a e0       	ldi	r20, 0x0A	; 10
    5f42:	50 e0       	ldi	r21, 0x00	; 0
    5f44:	0e 94 b9 ac 	call	0x15972	; 0x15972 <__eerd_block_m128>
    5f48:	14 c0       	rjmp	.+40     	; 0x5f72 <GetProductName+0x74>
	 else sprintf_P(SProductName,PSTR("N/A"));
    5f4a:	00 d0       	rcall	.+0      	; 0x5f4c <GetProductName+0x4e>
    5f4c:	00 d0       	rcall	.+0      	; 0x5f4e <GetProductName+0x50>
    5f4e:	ad b7       	in	r26, 0x3d	; 61
    5f50:	be b7       	in	r27, 0x3e	; 62
    5f52:	12 96       	adiw	r26, 0x02	; 2
    5f54:	9c 93       	st	X, r25
    5f56:	8e 93       	st	-X, r24
    5f58:	11 97       	sbiw	r26, 0x01	; 1
    5f5a:	8f e5       	ldi	r24, 0x5F	; 95
    5f5c:	95 e0       	ldi	r25, 0x05	; 5
    5f5e:	14 96       	adiw	r26, 0x04	; 4
    5f60:	9c 93       	st	X, r25
    5f62:	8e 93       	st	-X, r24
    5f64:	13 97       	sbiw	r26, 0x03	; 3
    5f66:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
    5f6a:	0f 90       	pop	r0
    5f6c:	0f 90       	pop	r0
    5f6e:	0f 90       	pop	r0
    5f70:	0f 90       	pop	r0

     Length=strlen(SProductName);
    5f72:	de 01       	movw	r26, r28
    5f74:	11 96       	adiw	r26, 0x01	; 1
    5f76:	fd 01       	movw	r30, r26
    5f78:	01 90       	ld	r0, Z+
    5f7a:	00 20       	and	r0, r0
    5f7c:	e9 f7       	brne	.-6      	; 0x5f78 <GetProductName+0x7a>
    5f7e:	31 97       	sbiw	r30, 0x01	; 1
    5f80:	ea 1b       	sub	r30, r26
    5f82:	eb 30       	cpi	r30, 0x0B	; 11
    5f84:	08 f0       	brcs	.+2      	; 0x5f88 <GetProductName+0x8a>
    5f86:	ea e0       	ldi	r30, 0x0A	; 10
    5f88:	ae 01       	movw	r20, r28
    5f8a:	4f 5f       	subi	r20, 0xFF	; 255
    5f8c:	5f 4f       	sbci	r21, 0xFF	; 255
    5f8e:	98 01       	movw	r18, r16
    5f90:	ba 01       	movw	r22, r20
    5f92:	06 c0       	rjmp	.+12     	; 0x5fa0 <GetProductName+0xa2>
	 if (Length>10)Length=10;

	 for(i=0;i<Length;i++){
	     strProductName[i]=SProductName[i];
    5f94:	db 01       	movw	r26, r22
    5f96:	8d 91       	ld	r24, X+
    5f98:	bd 01       	movw	r22, r26
    5f9a:	d9 01       	movw	r26, r18
    5f9c:	8d 93       	st	X+, r24
    5f9e:	9d 01       	movw	r18, r26
	 else sprintf_P(SProductName,PSTR("N/A"));

     Length=strlen(SProductName);
	 if (Length>10)Length=10;

	 for(i=0;i<Length;i++){
    5fa0:	86 2f       	mov	r24, r22
    5fa2:	84 1b       	sub	r24, r20
    5fa4:	8e 17       	cp	r24, r30
    5fa6:	b0 f3       	brcs	.-20     	; 0x5f94 <GetProductName+0x96>
	     strProductName[i]=SProductName[i];
	 }strProductName[Length]=0;
    5fa8:	c8 01       	movw	r24, r16
    5faa:	8e 0f       	add	r24, r30
    5fac:	91 1d       	adc	r25, r1
    5fae:	fc 01       	movw	r30, r24
    5fb0:	10 82       	st	Z, r1

	 AddSpaceLag(strProductName,10);
    5fb2:	c8 01       	movw	r24, r16
    5fb4:	6a e0       	ldi	r22, 0x0A	; 10
    5fb6:	0e 94 64 2f 	call	0x5ec8	; 0x5ec8 <AddSpaceLag>
}
    5fba:	2c 96       	adiw	r28, 0x0c	; 12
    5fbc:	0f b6       	in	r0, 0x3f	; 63
    5fbe:	f8 94       	cli
    5fc0:	de bf       	out	0x3e, r29	; 62
    5fc2:	0f be       	out	0x3f, r0	; 63
    5fc4:	cd bf       	out	0x3d, r28	; 61
    5fc6:	cf 91       	pop	r28
    5fc8:	df 91       	pop	r29
    5fca:	1f 91       	pop	r17
    5fcc:	0f 91       	pop	r16
    5fce:	08 95       	ret

00005fd0 <GeniusSendLastTransaction>:
}
void GeniusSendPumpPreset(char iPumpID){
}


void GeniusSendLastTransaction(char iPumpID){
    5fd0:	2f 92       	push	r2
    5fd2:	3f 92       	push	r3
    5fd4:	4f 92       	push	r4
    5fd6:	5f 92       	push	r5
    5fd8:	6f 92       	push	r6
    5fda:	7f 92       	push	r7
    5fdc:	8f 92       	push	r8
    5fde:	9f 92       	push	r9
    5fe0:	af 92       	push	r10
    5fe2:	bf 92       	push	r11
    5fe4:	cf 92       	push	r12
    5fe6:	df 92       	push	r13
    5fe8:	ef 92       	push	r14
    5fea:	ff 92       	push	r15
    5fec:	0f 93       	push	r16
    5fee:	1f 93       	push	r17
    5ff0:	df 93       	push	r29
    5ff2:	cf 93       	push	r28
    5ff4:	cd b7       	in	r28, 0x3d	; 61
    5ff6:	de b7       	in	r29, 0x3e	; 62
    5ff8:	c0 5b       	subi	r28, 0xB0	; 176
    5ffa:	d0 40       	sbci	r29, 0x00	; 0
    5ffc:	0f b6       	in	r0, 0x3f	; 63
    5ffe:	f8 94       	cli
    6000:	de bf       	out	0x3e, r29	; 62
    6002:	0f be       	out	0x3f, r0	; 63
    6004:	cd bf       	out	0x3d, r28	; 61
    6006:	e8 2e       	mov	r14, r24
    6008:	fe 01       	movw	r30, r28
    600a:	37 96       	adiw	r30, 0x07	; 7

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    600c:	ce 01       	movw	r24, r28
    600e:	46 96       	adiw	r24, 0x16	; 22
	     strMemory[i]=data;
    6010:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    6012:	e8 17       	cp	r30, r24
    6014:	f9 07       	cpc	r31, r25
    6016:	e1 f7       	brne	.-8      	; 0x6010 <GeniusSendLastTransaction+0x40>
	     strMemory[i]=data;
    6018:	ce 01       	movw	r24, r28
    601a:	85 96       	adiw	r24, 0x25	; 37
    601c:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    601e:	e8 17       	cp	r30, r24
    6020:	f9 07       	cpc	r31, r25
    6022:	e1 f7       	brne	.-8      	; 0x601c <GeniusSendLastTransaction+0x4c>
	     strMemory[i]=data;
    6024:	ce 01       	movw	r24, r28
    6026:	c4 96       	adiw	r24, 0x34	; 52
    6028:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    602a:	e8 17       	cp	r30, r24
    602c:	f9 07       	cpc	r31, r25
    602e:	e1 f7       	brne	.-8      	; 0x6028 <GeniusSendLastTransaction+0x58>
	     strMemory[i]=data;
    6030:	cf 01       	movw	r24, r30
    6032:	3f 01       	movw	r6, r30
    6034:	0f 96       	adiw	r24, 0x0f	; 15
    6036:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    6038:	e8 17       	cp	r30, r24
    603a:	f9 07       	cpc	r31, r25
    603c:	e1 f7       	brne	.-8      	; 0x6036 <GeniusSendLastTransaction+0x66>
	 FillChar(STotalVolume,sizeof(STotalVolume),0);
	 FillChar(STotalMoney,sizeof(STotalMoney),0);
	      

	 //Generate
	 FIPAddr=GetFIPAddr(iPumpID);
    603e:	8e 2d       	mov	r24, r14
    6040:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <GetFIPAddr>
     eeprom_read_block((void*) &PProductID, (const void*) &DefNozzleMap[FIPAddr-1], 6);
    6044:	96 e0       	ldi	r25, 0x06	; 6
    6046:	89 9f       	mul	r24, r25
    6048:	b0 01       	movw	r22, r0
    604a:	11 24       	eor	r1, r1
    604c:	61 5b       	subi	r22, 0xB1	; 177
    604e:	7f 4f       	sbci	r23, 0xFF	; 255
    6050:	8e 01       	movw	r16, r28
    6052:	0f 5f       	subi	r16, 0xFF	; 255
    6054:	1f 4f       	sbci	r17, 0xFF	; 255
    6056:	c8 01       	movw	r24, r16
    6058:	46 e0       	ldi	r20, 0x06	; 6
    605a:	50 e0       	ldi	r21, 0x00	; 0
    605c:	0e 94 b9 ac 	call	0x15972	; 0x15972 <__eerd_block_m128>
	 iNozzle=RecPumpData[iPumpID&0x0F].Grade;
    6060:	2e 2c       	mov	r2, r14
    6062:	33 24       	eor	r3, r3
    6064:	91 01       	movw	r18, r2
    6066:	2f 70       	andi	r18, 0x0F	; 15
    6068:	30 70       	andi	r19, 0x00	; 0
    606a:	85 e3       	ldi	r24, 0x35	; 53
    606c:	90 e0       	ldi	r25, 0x00	; 0
    606e:	28 9f       	mul	r18, r24
    6070:	f0 01       	movw	r30, r0
    6072:	29 9f       	mul	r18, r25
    6074:	f0 0d       	add	r31, r0
    6076:	38 9f       	mul	r19, r24
    6078:	f0 0d       	add	r31, r0
    607a:	11 24       	eor	r1, r1
    607c:	e8 55       	subi	r30, 0x58	; 88
    607e:	fa 4f       	sbci	r31, 0xFA	; 250
    6080:	f0 80       	ld	r15, Z
	 iProdID=PProductID[iNozzle];
    6082:	4f 2c       	mov	r4, r15
    6084:	55 24       	eor	r5, r5

	 GetProductName(iProdID,strProduct);
    6086:	04 0d       	add	r16, r4
    6088:	15 1d       	adc	r17, r5
    608a:	d8 01       	movw	r26, r16
    608c:	8c 91       	ld	r24, X
    608e:	6e e5       	ldi	r22, 0x5E	; 94
    6090:	77 e0       	ldi	r23, 0x07	; 7
    6092:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <GetProductName>
	 GetTransactionVolume(iPumpID,SVolume);
    6096:	47 e0       	ldi	r20, 0x07	; 7
    6098:	84 2e       	mov	r8, r20
    609a:	91 2c       	mov	r9, r1
    609c:	8c 0e       	add	r8, r28
    609e:	9d 1e       	adc	r9, r29
    60a0:	8e 2d       	mov	r24, r14
    60a2:	b4 01       	movw	r22, r8
    60a4:	0e 94 38 29 	call	0x5270	; 0x5270 <GetTransactionVolume>
	 GetTransactionMoney(iPumpID,SMoney);
    60a8:	36 e1       	ldi	r19, 0x16	; 22
    60aa:	a3 2e       	mov	r10, r19
    60ac:	b1 2c       	mov	r11, r1
    60ae:	ac 0e       	add	r10, r28
    60b0:	bd 1e       	adc	r11, r29
    60b2:	8e 2d       	mov	r24, r14
    60b4:	b5 01       	movw	r22, r10
    60b6:	0e 94 fe 28 	call	0x51fc	; 0x51fc <GetTransactionMoney>
	 GetTotalizerVolume(iPumpID,iNozzle,STotalVolume);
    60ba:	25 e2       	ldi	r18, 0x25	; 37
    60bc:	c2 2e       	mov	r12, r18
    60be:	d1 2c       	mov	r13, r1
    60c0:	cc 0e       	add	r12, r28
    60c2:	dd 1e       	adc	r13, r29
    60c4:	8e 2d       	mov	r24, r14
    60c6:	6f 2d       	mov	r22, r15
    60c8:	a6 01       	movw	r20, r12
    60ca:	0e 94 e1 28 	call	0x51c2	; 0x51c2 <GetTotalizerVolume>
	 GetTotalizerMoney(iPumpID,iNozzle,STotalMoney);
    60ce:	8e 2d       	mov	r24, r14
    60d0:	6f 2d       	mov	r22, r15
    60d2:	a3 01       	movw	r20, r6
    60d4:	0e 94 c4 28 	call	0x5188	; 0x5188 <GetTotalizerMoney>
	 
     ComposeDatetime(SDatetime);
    60d8:	93 e4       	ldi	r25, 0x43	; 67
    60da:	e9 2e       	mov	r14, r25
    60dc:	f1 2c       	mov	r15, r1
    60de:	ec 0e       	add	r14, r28
    60e0:	fd 1e       	adc	r15, r29
    60e2:	c7 01       	movw	r24, r14
    60e4:	0e 94 00 1b 	call	0x3600	; 0x3600 <ComposeDatetime>

	 //Compose
	 sprintf_P(strSend,PSTR("T%.2d%.2d%s%s%s%s%s%s:"),iPumpID,iNozzle,strProduct,SDatetime,SVolume,SMoney,STotalVolume,STotalMoney);
    60e8:	ed b7       	in	r30, 0x3d	; 61
    60ea:	fe b7       	in	r31, 0x3e	; 62
    60ec:	74 97       	sbiw	r30, 0x14	; 20
    60ee:	0f b6       	in	r0, 0x3f	; 63
    60f0:	f8 94       	cli
    60f2:	fe bf       	out	0x3e, r31	; 62
    60f4:	0f be       	out	0x3f, r0	; 63
    60f6:	ed bf       	out	0x3d, r30	; 61
    60f8:	31 96       	adiw	r30, 0x01	; 1
    60fa:	8e 01       	movw	r16, r28
    60fc:	09 5a       	subi	r16, 0xA9	; 169
    60fe:	1f 4f       	sbci	r17, 0xFF	; 255
    6100:	ad b7       	in	r26, 0x3d	; 61
    6102:	be b7       	in	r27, 0x3e	; 62
    6104:	12 96       	adiw	r26, 0x02	; 2
    6106:	1c 93       	st	X, r17
    6108:	0e 93       	st	-X, r16
    610a:	11 97       	sbiw	r26, 0x01	; 1
    610c:	8e e1       	ldi	r24, 0x1E	; 30
    610e:	95 e0       	ldi	r25, 0x05	; 5
    6110:	93 83       	std	Z+3, r25	; 0x03
    6112:	82 83       	std	Z+2, r24	; 0x02
    6114:	35 82       	std	Z+5, r3	; 0x05
    6116:	24 82       	std	Z+4, r2	; 0x04
    6118:	57 82       	std	Z+7, r5	; 0x07
    611a:	46 82       	std	Z+6, r4	; 0x06
    611c:	8e e5       	ldi	r24, 0x5E	; 94
    611e:	97 e0       	ldi	r25, 0x07	; 7
    6120:	91 87       	std	Z+9, r25	; 0x09
    6122:	80 87       	std	Z+8, r24	; 0x08
    6124:	f3 86       	std	Z+11, r15	; 0x0b
    6126:	e2 86       	std	Z+10, r14	; 0x0a
    6128:	95 86       	std	Z+13, r9	; 0x0d
    612a:	84 86       	std	Z+12, r8	; 0x0c
    612c:	b7 86       	std	Z+15, r11	; 0x0f
    612e:	a6 86       	std	Z+14, r10	; 0x0e
    6130:	d1 8a       	std	Z+17, r13	; 0x11
    6132:	c0 8a       	std	Z+16, r12	; 0x10
    6134:	62 8a       	std	Z+18, r6	; 0x12
    6136:	73 8a       	std	Z+19, r7	; 0x13
    6138:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	 cSum=SumChecksum(strSend);
    613c:	ad b7       	in	r26, 0x3d	; 61
    613e:	be b7       	in	r27, 0x3e	; 62
    6140:	54 96       	adiw	r26, 0x14	; 20
    6142:	0f b6       	in	r0, 0x3f	; 63
    6144:	f8 94       	cli
    6146:	be bf       	out	0x3e, r27	; 62
    6148:	0f be       	out	0x3f, r0	; 63
    614a:	ad bf       	out	0x3d, r26	; 61
    614c:	c8 01       	movw	r24, r16
    614e:	0e 94 19 23 	call	0x4632	; 0x4632 <SumChecksum>
    6152:	e8 2e       	mov	r14, r24
	 uart_print(1,0,strSend);
    6154:	81 e0       	ldi	r24, 0x01	; 1
    6156:	60 e0       	ldi	r22, 0x00	; 0
    6158:	a8 01       	movw	r20, r16
    615a:	0e 94 78 a8 	call	0x150f0	; 0x150f0 <uart_print>
    615e:	f8 01       	movw	r30, r16

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    6160:	c8 01       	movw	r24, r16
    6162:	f9 2e       	mov	r15, r25
    6164:	ce 01       	movw	r24, r28
    6166:	8f 54       	subi	r24, 0x4F	; 79
    6168:	9f 4f       	sbci	r25, 0xFF	; 255
	     strMemory[i]=data;
    616a:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    616c:	e8 17       	cp	r30, r24
    616e:	f9 07       	cpc	r31, r25
    6170:	e1 f7       	brne	.-8      	; 0x616a <GeniusSendLastTransaction+0x19a>
	 //Compose
	 sprintf_P(strSend,PSTR("T%.2d%.2d%s%s%s%s%s%s:"),iPumpID,iNozzle,strProduct,SDatetime,SVolume,SMoney,STotalVolume,STotalMoney);
	 cSum=SumChecksum(strSend);
	 uart_print(1,0,strSend);
	 FillChar(strSend,sizeof(strSend),0);      
	 sprintf_P(strSend,PSTR("%d"),cSum);
    6172:	00 d0       	rcall	.+0      	; 0x6174 <GeniusSendLastTransaction+0x1a4>
    6174:	00 d0       	rcall	.+0      	; 0x6176 <GeniusSendLastTransaction+0x1a6>
    6176:	00 d0       	rcall	.+0      	; 0x6178 <GeniusSendLastTransaction+0x1a8>
    6178:	ed b7       	in	r30, 0x3d	; 61
    617a:	fe b7       	in	r31, 0x3e	; 62
    617c:	31 96       	adiw	r30, 0x01	; 1
    617e:	ad b7       	in	r26, 0x3d	; 61
    6180:	be b7       	in	r27, 0x3e	; 62
    6182:	11 96       	adiw	r26, 0x01	; 1
    6184:	0c 93       	st	X, r16
    6186:	11 97       	sbiw	r26, 0x01	; 1
    6188:	12 96       	adiw	r26, 0x02	; 2
    618a:	fc 92       	st	X, r15
    618c:	8b e1       	ldi	r24, 0x1B	; 27
    618e:	95 e0       	ldi	r25, 0x05	; 5
    6190:	93 83       	std	Z+3, r25	; 0x03
    6192:	82 83       	std	Z+2, r24	; 0x02
    6194:	e4 82       	std	Z+4, r14	; 0x04
    6196:	15 82       	std	Z+5, r1	; 0x05
    6198:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	 uart_print(1,1,strSend);	 
    619c:	ed b7       	in	r30, 0x3d	; 61
    619e:	fe b7       	in	r31, 0x3e	; 62
    61a0:	36 96       	adiw	r30, 0x06	; 6
    61a2:	0f b6       	in	r0, 0x3f	; 63
    61a4:	f8 94       	cli
    61a6:	fe bf       	out	0x3e, r31	; 62
    61a8:	0f be       	out	0x3f, r0	; 63
    61aa:	ed bf       	out	0x3d, r30	; 61
    61ac:	81 e0       	ldi	r24, 0x01	; 1
    61ae:	61 e0       	ldi	r22, 0x01	; 1
    61b0:	40 2f       	mov	r20, r16
    61b2:	5f 2d       	mov	r21, r15
    61b4:	0e 94 78 a8 	call	0x150f0	; 0x150f0 <uart_print>
}
    61b8:	c0 55       	subi	r28, 0x50	; 80
    61ba:	df 4f       	sbci	r29, 0xFF	; 255
    61bc:	0f b6       	in	r0, 0x3f	; 63
    61be:	f8 94       	cli
    61c0:	de bf       	out	0x3e, r29	; 62
    61c2:	0f be       	out	0x3f, r0	; 63
    61c4:	cd bf       	out	0x3d, r28	; 61
    61c6:	cf 91       	pop	r28
    61c8:	df 91       	pop	r29
    61ca:	1f 91       	pop	r17
    61cc:	0f 91       	pop	r16
    61ce:	ff 90       	pop	r15
    61d0:	ef 90       	pop	r14
    61d2:	df 90       	pop	r13
    61d4:	cf 90       	pop	r12
    61d6:	bf 90       	pop	r11
    61d8:	af 90       	pop	r10
    61da:	9f 90       	pop	r9
    61dc:	8f 90       	pop	r8
    61de:	7f 90       	pop	r7
    61e0:	6f 90       	pop	r6
    61e2:	5f 90       	pop	r5
    61e4:	4f 90       	pop	r4
    61e6:	3f 90       	pop	r3
    61e8:	2f 90       	pop	r2
    61ea:	08 95       	ret

000061ec <systemGeniusProtocol>:
	     Result=TS_OLD;
	 }
   return Result;
}

void systemGeniusProtocol(){
    61ec:	1f 93       	push	r17
static char stGeniusProtocol=gpInitScan;
static char iPumpID;
	 
	 switch(stGeniusProtocol){
    61ee:	80 91 bf 01 	lds	r24, 0x01BF
    61f2:	83 30       	cpi	r24, 0x03	; 3
    61f4:	61 f1       	breq	.+88     	; 0x624e <systemGeniusProtocol+0x62>
    61f6:	84 30       	cpi	r24, 0x04	; 4
    61f8:	28 f4       	brcc	.+10     	; 0x6204 <systemGeniusProtocol+0x18>
    61fa:	81 30       	cpi	r24, 0x01	; 1
    61fc:	81 f0       	breq	.+32     	; 0x621e <systemGeniusProtocol+0x32>
    61fe:	82 30       	cpi	r24, 0x02	; 2
    6200:	c0 f4       	brcc	.+48     	; 0x6232 <systemGeniusProtocol+0x46>
    6202:	09 c0       	rjmp	.+18     	; 0x6216 <systemGeniusProtocol+0x2a>
    6204:	85 30       	cpi	r24, 0x05	; 5
    6206:	09 f4       	brne	.+2      	; 0x620a <systemGeniusProtocol+0x1e>
    6208:	43 c0       	rjmp	.+134    	; 0x6290 <systemGeniusProtocol+0xa4>
    620a:	85 30       	cpi	r24, 0x05	; 5
    620c:	a0 f1       	brcs	.+104    	; 0x6276 <systemGeniusProtocol+0x8a>
    620e:	86 30       	cpi	r24, 0x06	; 6
    6210:	09 f0       	breq	.+2      	; 0x6214 <systemGeniusProtocol+0x28>
    6212:	52 c0       	rjmp	.+164    	; 0x62b8 <systemGeniusProtocol+0xcc>
    6214:	43 c0       	rjmp	.+134    	; 0x629c <systemGeniusProtocol+0xb0>
	 case gpInitScan:
	      iPumpID=1;
    6216:	81 e0       	ldi	r24, 0x01	; 1
    6218:	80 93 be 01 	sts	0x01BE, r24
    621c:	4b c0       	rjmp	.+150    	; 0x62b4 <systemGeniusProtocol+0xc8>
          stGeniusProtocol=gpScanNewTransaction;
	      break;
	 case gpScanNewTransaction:
	      if (GetIncomingTransStatus(PumpID)==TS_NEW){
    621e:	80 91 bd 01 	lds	r24, 0x01BD
    6222:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <GetIncomingTransStatus>
    6226:	82 30       	cpi	r24, 0x02	; 2
    6228:	09 f0       	breq	.+2      	; 0x622c <systemGeniusProtocol+0x40>
    622a:	46 c0       	rjmp	.+140    	; 0x62b8 <systemGeniusProtocol+0xcc>
		      IsTotalizerReceived=False;
    622c:	10 92 af 01 	sts	0x01AF, r1
    6230:	41 c0       	rjmp	.+130    	; 0x62b4 <systemGeniusProtocol+0xc8>
		      stGeniusProtocol=gpRequestTotalizer;
		  }
	      break;
     case gpRequestTotalizer:
	      SendPoolingCommand(SC_TOTALIZER,iPumpID);
    6232:	90 91 be 01 	lds	r25, 0x01BE
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
    6236:	85 e0       	ldi	r24, 0x05	; 5
    6238:	80 93 a7 05 	sts	0x05A7, r24
	 PoolMsg=plMsg;
    623c:	90 93 d3 0b 	sts	0x0BD3, r25
     IsControlPooling=True;
    6240:	81 e0       	ldi	r24, 0x01	; 1
    6242:	80 93 84 01 	sts	0x0184, r24
		      stGeniusProtocol=gpRequestTotalizer;
		  }
	      break;
     case gpRequestTotalizer:
	      SendPoolingCommand(SC_TOTALIZER,iPumpID);
		  TimSend=0;
    6246:	10 92 78 0c 	sts	0x0C78, r1
		  stGeniusProtocol=gpWaitRequestedTotalizer;
    624a:	83 e0       	ldi	r24, 0x03	; 3
    624c:	33 c0       	rjmp	.+102    	; 0x62b4 <systemGeniusProtocol+0xc8>
	      break;
     case gpWaitRequestedTotalizer:
	      if ((IsTotalizerReceived==True)&&(AcknoledgePump==iPumpID)){
    624e:	80 91 af 01 	lds	r24, 0x01AF
    6252:	81 30       	cpi	r24, 0x01	; 1
    6254:	59 f4       	brne	.+22     	; 0x626c <systemGeniusProtocol+0x80>
    6256:	90 91 ec 0b 	lds	r25, 0x0BEC
    625a:	80 91 be 01 	lds	r24, 0x01BE
    625e:	98 17       	cp	r25, r24
    6260:	29 f4       	brne	.+10     	; 0x626c <systemGeniusProtocol+0x80>
		      IsTotalizerReceived=False;
    6262:	10 92 af 01 	sts	0x01AF, r1
			  stGeniusProtocol=gpSendTransactionData;
    6266:	84 e0       	ldi	r24, 0x04	; 4
    6268:	80 93 bf 01 	sts	0x01BF, r24
		  }
	      if (TimSend>TIM_SEND*2)stGeniusProtocol=gpNextPumpScan;
    626c:	80 91 78 0c 	lds	r24, 0x0C78
    6270:	85 31       	cpi	r24, 0x15	; 21
    6272:	10 f1       	brcs	.+68     	; 0x62b8 <systemGeniusProtocol+0xcc>
    6274:	11 c0       	rjmp	.+34     	; 0x6298 <systemGeniusProtocol+0xac>
	      break;
     case gpSendTransactionData:
          GeniusSendLastTransaction(iPumpID);
    6276:	80 91 be 01 	lds	r24, 0x01BE
    627a:	0e 94 e8 2f 	call	0x5fd0	; 0x5fd0 <GeniusSendLastTransaction>
		  SetIncomingTransStatus(iPumpID,TS_OLD);
    627e:	80 91 be 01 	lds	r24, 0x01BE
    6282:	63 e0       	ldi	r22, 0x03	; 3
    6284:	0e 94 b2 1a 	call	0x3564	; 0x3564 <SetIncomingTransStatus>
		  
		  TimSend=0;
    6288:	10 92 78 0c 	sts	0x0C78, r1
          stGeniusProtocol=gpDelayNextPumpScan;
    628c:	85 e0       	ldi	r24, 0x05	; 5
    628e:	12 c0       	rjmp	.+36     	; 0x62b4 <systemGeniusProtocol+0xc8>
	      break;
     case gpDelayNextPumpScan:
          if (TimSend>1)stGeniusProtocol=gpNextPumpScan;
    6290:	80 91 78 0c 	lds	r24, 0x0C78
    6294:	82 30       	cpi	r24, 0x02	; 2
    6296:	80 f0       	brcs	.+32     	; 0x62b8 <systemGeniusProtocol+0xcc>
    6298:	86 e0       	ldi	r24, 0x06	; 6
    629a:	0c c0       	rjmp	.+24     	; 0x62b4 <systemGeniusProtocol+0xc8>
	      break;
     case gpNextPumpScan:
          if (iPumpID<=eeprom_read_byte(&DefPoolingPumpMax)){
    629c:	10 91 be 01 	lds	r17, 0x01BE
    62a0:	84 e4       	ldi	r24, 0x44	; 68
    62a2:	91 e0       	ldi	r25, 0x01	; 1
    62a4:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
    62a8:	81 17       	cp	r24, r17
    62aa:	30 f0       	brcs	.+12     	; 0x62b8 <systemGeniusProtocol+0xcc>
		      iPumpID++;
    62ac:	1f 5f       	subi	r17, 0xFF	; 255
    62ae:	10 93 be 01 	sts	0x01BE, r17
              stGeniusProtocol=gpScanNewTransaction;
    62b2:	81 e0       	ldi	r24, 0x01	; 1
    62b4:	80 93 bf 01 	sts	0x01BF, r24
		  }
	      break;
	 }
}
    62b8:	1f 91       	pop	r17
    62ba:	08 95       	ret

000062bc <StrAlignCenter>:
	 }
	 //replace
	 for(i=0;i<strlen(sDate);i++)Date[i]=sDate[i];
}

void StrAlignCenter(char *Source, unsigned int Length){
    62bc:	ef 92       	push	r14
    62be:	ff 92       	push	r15
    62c0:	0f 93       	push	r16
    62c2:	1f 93       	push	r17
    62c4:	18 2f       	mov	r17, r24
    62c6:	09 2f       	mov	r16, r25
    62c8:	7b 01       	movw	r14, r22
char nAddedSpace,srcLength;
     RemSpaceLag(Source);
    62ca:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <RemSpaceLag>
	 RemSpaceLead(Source);
    62ce:	81 2f       	mov	r24, r17
    62d0:	90 2f       	mov	r25, r16
    62d2:	0e 94 27 27 	call	0x4e4e	; 0x4e4e <RemSpaceLead>
	 srcLength=strlen(Source);
    62d6:	a1 2f       	mov	r26, r17
    62d8:	b0 2f       	mov	r27, r16
    62da:	fd 01       	movw	r30, r26
    62dc:	01 90       	ld	r0, Z+
    62de:	00 20       	and	r0, r0
    62e0:	e9 f7       	brne	.-6      	; 0x62dc <StrAlignCenter+0x20>
    62e2:	31 97       	sbiw	r30, 0x01	; 1
    62e4:	e1 1b       	sub	r30, r17
     nAddedSpace=(Length-srcLength)/2;
     AddSpaceLead(Source,srcLength+nAddedSpace);
    62e6:	c7 01       	movw	r24, r14
    62e8:	8e 1b       	sub	r24, r30
    62ea:	91 09       	sbc	r25, r1
    62ec:	96 95       	lsr	r25
    62ee:	87 95       	ror	r24
    62f0:	e8 0f       	add	r30, r24
    62f2:	81 2f       	mov	r24, r17
    62f4:	90 2f       	mov	r25, r16
    62f6:	6e 2f       	mov	r22, r30
    62f8:	0e 94 fd 2e 	call	0x5dfa	; 0x5dfa <AddSpaceLead>
	 AddSpaceLag(Source,Length);
    62fc:	81 2f       	mov	r24, r17
    62fe:	90 2f       	mov	r25, r16
    6300:	6e 2d       	mov	r22, r14
    6302:	0e 94 64 2f 	call	0x5ec8	; 0x5ec8 <AddSpaceLag>
}
    6306:	1f 91       	pop	r17
    6308:	0f 91       	pop	r16
    630a:	ff 90       	pop	r15
    630c:	ef 90       	pop	r14
    630e:	08 95       	ret

00006310 <AddCharLead>:
	 }String[Size]=0;
  }

}

void AddCharLead(char *String,char CharAdded,unsigned char Size){//
    6310:	bf 92       	push	r11
    6312:	cf 92       	push	r12
    6314:	df 92       	push	r13
    6316:	ef 92       	push	r14
    6318:	ff 92       	push	r15
    631a:	0f 93       	push	r16
    631c:	1f 93       	push	r17
    631e:	df 93       	push	r29
    6320:	cf 93       	push	r28
    6322:	cd b7       	in	r28, 0x3d	; 61
    6324:	de b7       	in	r29, 0x3e	; 62
    6326:	6e 97       	sbiw	r28, 0x1e	; 30
    6328:	0f b6       	in	r0, 0x3f	; 63
    632a:	f8 94       	cli
    632c:	de bf       	out	0x3e, r29	; 62
    632e:	0f be       	out	0x3f, r0	; 63
    6330:	cd bf       	out	0x3d, r28	; 61
    6332:	8c 01       	movw	r16, r24
    6334:	e4 2e       	mov	r14, r20
     char i,Length,strAdded[30];
     Length=strlen(String);
    6336:	fc 01       	movw	r30, r24
    6338:	01 90       	ld	r0, Z+
    633a:	00 20       	and	r0, r0
    633c:	e9 f7       	brne	.-6      	; 0x6338 <AddCharLead+0x28>
    633e:	31 97       	sbiw	r30, 0x01	; 1
    6340:	2e 2f       	mov	r18, r30
    6342:	28 1b       	sub	r18, r24

	 if (Size>Length){
    6344:	24 17       	cp	r18, r20
    6346:	d0 f5       	brcc	.+116    	; 0x63bc <AddCharLead+0xac>
    6348:	ae 01       	movw	r20, r28
    634a:	4f 5f       	subi	r20, 0xFF	; 255
    634c:	5f 4f       	sbci	r21, 0xFF	; 255
    634e:	fa 01       	movw	r30, r20
	 }String[Size]=0;
  }

}

void AddCharLead(char *String,char CharAdded,unsigned char Size){//
    6350:	b4 2e       	mov	r11, r20
    6352:	01 c0       	rjmp	.+2      	; 0x6356 <AddCharLead+0x46>
     char i,Length,strAdded[30];
     Length=strlen(String);

	 if (Size>Length){
         for(i=0;i<Size;i++){
	         strAdded[i]=CharAdded;
    6354:	61 93       	st	Z+, r22
void AddCharLead(char *String,char CharAdded,unsigned char Size){//
     char i,Length,strAdded[30];
     Length=strlen(String);

	 if (Size>Length){
         for(i=0;i<Size;i++){
    6356:	8e 2f       	mov	r24, r30
    6358:	8b 19       	sub	r24, r11
    635a:	8e 15       	cp	r24, r14
    635c:	d8 f3       	brcs	.-10     	; 0x6354 <AddCharLead+0x44>
	         strAdded[i]=CharAdded;
	     }strAdded[Size]=0;
    635e:	6e 2d       	mov	r22, r14
    6360:	70 e0       	ldi	r23, 0x00	; 0
    6362:	ce 01       	movw	r24, r28
    6364:	01 96       	adiw	r24, 0x01	; 1
    6366:	fc 01       	movw	r30, r24
    6368:	e6 0f       	add	r30, r22
    636a:	f7 1f       	adc	r31, r23
    636c:	10 82       	st	Z, r1
	     //Copy
         for(i=(Size-Length);i<Size;i++){
    636e:	fe 2c       	mov	r15, r14
    6370:	f2 1a       	sub	r15, r18
    6372:	6c 01       	movw	r12, r24
	         strAdded[i]=String[i-(Size-Length)];
    6374:	30 e0       	ldi	r19, 0x00	; 0
    6376:	26 1b       	sub	r18, r22
    6378:	37 0b       	sbc	r19, r23
    637a:	0c c0       	rjmp	.+24     	; 0x6394 <AddCharLead+0x84>
    637c:	ef 2d       	mov	r30, r15
    637e:	f0 e0       	ldi	r31, 0x00	; 0
    6380:	d6 01       	movw	r26, r12
    6382:	ae 0f       	add	r26, r30
    6384:	bf 1f       	adc	r27, r31
    6386:	e0 0f       	add	r30, r16
    6388:	f1 1f       	adc	r31, r17
    638a:	e2 0f       	add	r30, r18
    638c:	f3 1f       	adc	r31, r19
    638e:	80 81       	ld	r24, Z
    6390:	8c 93       	st	X, r24
	 if (Size>Length){
         for(i=0;i<Size;i++){
	         strAdded[i]=CharAdded;
	     }strAdded[Size]=0;
	     //Copy
         for(i=(Size-Length);i<Size;i++){
    6392:	f3 94       	inc	r15
    6394:	fe 14       	cp	r15, r14
    6396:	90 f3       	brcs	.-28     	; 0x637c <AddCharLead+0x6c>
	         strAdded[i]=String[i-(Size-Length)];
	     }strAdded[Size]=0;
    6398:	6c 0d       	add	r22, r12
    639a:	7d 1d       	adc	r23, r13
    639c:	db 01       	movw	r26, r22
    639e:	1c 92       	st	X, r1
    63a0:	f8 01       	movw	r30, r16
    63a2:	04 c0       	rjmp	.+8      	; 0x63ac <AddCharLead+0x9c>
	     //Spaced
         for(i=0;i<Size;i++){
	         String[i]=strAdded[i];
    63a4:	da 01       	movw	r26, r20
    63a6:	8d 91       	ld	r24, X+
    63a8:	ad 01       	movw	r20, r26
    63aa:	81 93       	st	Z+, r24
	     //Copy
         for(i=(Size-Length);i<Size;i++){
	         strAdded[i]=String[i-(Size-Length)];
	     }strAdded[Size]=0;
	     //Spaced
         for(i=0;i<Size;i++){
    63ac:	84 2f       	mov	r24, r20
    63ae:	8b 19       	sub	r24, r11
    63b0:	8e 15       	cp	r24, r14
    63b2:	c0 f3       	brcs	.-16     	; 0x63a4 <AddCharLead+0x94>
	         String[i]=strAdded[i];
	     }String[Size]=0;
    63b4:	0e 0d       	add	r16, r14
    63b6:	11 1d       	adc	r17, r1
    63b8:	f8 01       	movw	r30, r16
    63ba:	10 82       	st	Z, r1
	 }
}
    63bc:	6e 96       	adiw	r28, 0x1e	; 30
    63be:	0f b6       	in	r0, 0x3f	; 63
    63c0:	f8 94       	cli
    63c2:	de bf       	out	0x3e, r29	; 62
    63c4:	0f be       	out	0x3f, r0	; 63
    63c6:	cd bf       	out	0x3d, r28	; 61
    63c8:	cf 91       	pop	r28
    63ca:	df 91       	pop	r29
    63cc:	1f 91       	pop	r17
    63ce:	0f 91       	pop	r16
    63d0:	ff 90       	pop	r15
    63d2:	ef 90       	pop	r14
    63d4:	df 90       	pop	r13
    63d6:	cf 90       	pop	r12
    63d8:	bf 90       	pop	r11
    63da:	08 95       	ret

000063dc <AddCharLag>:
    }
return Result;
}

//String Processing
void AddCharLag(char *String,char CharAdded,unsigned char Size){
    63dc:	cf 93       	push	r28
    63de:	df 93       	push	r29
    63e0:	ec 01       	movw	r28, r24
char i,Length;
     Length=strlen(String);
    63e2:	dc 01       	movw	r26, r24
    63e4:	0d 90       	ld	r0, X+
    63e6:	00 20       	and	r0, r0
    63e8:	e9 f7       	brne	.-6      	; 0x63e4 <AddCharLag+0x8>
    63ea:	11 97       	sbiw	r26, 0x01	; 1
    63ec:	a8 1b       	sub	r26, r24
    63ee:	b9 0b       	sbc	r27, r25
  if (Length<Size){   
    63f0:	a4 17       	cp	r26, r20
    63f2:	58 f4       	brcc	.+22     	; 0x640a <AddCharLag+0x2e>
    63f4:	8a 2f       	mov	r24, r26
     for(i=Length;i<Size;i++){
	    String[i]=CharAdded;
    63f6:	fe 01       	movw	r30, r28
    63f8:	e8 0f       	add	r30, r24
    63fa:	f1 1d       	adc	r31, r1
    63fc:	60 83       	st	Z, r22
//String Processing
void AddCharLag(char *String,char CharAdded,unsigned char Size){
char i,Length;
     Length=strlen(String);
  if (Length<Size){   
     for(i=Length;i<Size;i++){
    63fe:	8f 5f       	subi	r24, 0xFF	; 255
    6400:	84 17       	cp	r24, r20
    6402:	c8 f3       	brcs	.-14     	; 0x63f6 <AddCharLag+0x1a>
	    String[i]=CharAdded;
	 }String[Size]=0;
    6404:	c4 0f       	add	r28, r20
    6406:	d1 1d       	adc	r29, r1
    6408:	18 82       	st	Y, r1
  }

}
    640a:	df 91       	pop	r29
    640c:	cf 91       	pop	r28
    640e:	08 95       	ret

00006410 <CountTotalizerSatus>:
		      Result++;		  
		  }	 
	 }
  return Result;
}
char CountTotalizerSatus(char *strPumpStatusTotalizer){
    6410:	cf 92       	push	r12
    6412:	df 92       	push	r13
    6414:	ef 92       	push	r14
    6416:	ff 92       	push	r15
    6418:	0f 93       	push	r16
    641a:	1f 93       	push	r17
    641c:	cf 93       	push	r28
    641e:	df 93       	push	r29
    6420:	7c 01       	movw	r14, r24
char i,Result;
     Result=0;
	 for (i=0;i<strlen(strPumpStatusTotalizer);i++){
    6422:	dc 01       	movw	r26, r24
    6424:	0d 90       	ld	r0, X+
    6426:	00 20       	and	r0, r0
    6428:	e9 f7       	brne	.-6      	; 0x6424 <CountTotalizerSatus+0x14>
    642a:	8d 01       	movw	r16, r26
    642c:	01 50       	subi	r16, 0x01	; 1
    642e:	10 40       	sbci	r17, 0x00	; 0
    6430:	08 1b       	sub	r16, r24
    6432:	19 0b       	sbc	r17, r25
    6434:	cc 24       	eor	r12, r12
    6436:	dd 24       	eor	r13, r13
    6438:	0a c0       	rjmp	.+20     	; 0x644e <CountTotalizerSatus+0x3e>
	      if (strPumpStatusTotalizer[i]==GetPumpStatusLabel(PS_TOTALIZER)){
    643a:	84 e1       	ldi	r24, 0x14	; 20
    643c:	0e 94 3e 14 	call	0x287c	; 0x287c <GetPumpStatusLabel>
    6440:	ce 0d       	add	r28, r14
    6442:	df 1d       	adc	r29, r15
    6444:	98 81       	ld	r25, Y
    6446:	98 17       	cp	r25, r24
    6448:	09 f4       	brne	.+2      	; 0x644c <CountTotalizerSatus+0x3c>
		      Result++;		  
    644a:	d3 94       	inc	r13
  return Result;
}
char CountTotalizerSatus(char *strPumpStatusTotalizer){
char i,Result;
     Result=0;
	 for (i=0;i<strlen(strPumpStatusTotalizer);i++){
    644c:	c3 94       	inc	r12
    644e:	cc 2d       	mov	r28, r12
    6450:	d0 e0       	ldi	r29, 0x00	; 0
    6452:	c0 17       	cp	r28, r16
    6454:	d1 07       	cpc	r29, r17
    6456:	88 f3       	brcs	.-30     	; 0x643a <CountTotalizerSatus+0x2a>
	      if (strPumpStatusTotalizer[i]==GetPumpStatusLabel(PS_TOTALIZER)){
		      Result++;		  
		  }	 
	 }
  return Result;
}
    6458:	8d 2d       	mov	r24, r13
    645a:	df 91       	pop	r29
    645c:	cf 91       	pop	r28
    645e:	1f 91       	pop	r17
    6460:	0f 91       	pop	r16
    6462:	ff 90       	pop	r15
    6464:	ef 90       	pop	r14
    6466:	df 90       	pop	r13
    6468:	cf 90       	pop	r12
    646a:	08 95       	ret

0000646c <RemoveChar>:
	   sprintf_P(strSend,PSTR("Wrap:%s"),strDestCode);
	   uart_print(1,1,strSend);     
	 #endif
}

void RemoveChar(char *strSource, char cRem){
    646c:	1f 93       	push	r17
    646e:	df 93       	push	r29
    6470:	cf 93       	push	r28
    6472:	cd b7       	in	r28, 0x3d	; 61
    6474:	de b7       	in	r29, 0x3e	; 62
    6476:	64 97       	sbiw	r28, 0x14	; 20
    6478:	0f b6       	in	r0, 0x3f	; 63
    647a:	f8 94       	cli
    647c:	de bf       	out	0x3e, r29	; 62
    647e:	0f be       	out	0x3f, r0	; 63
    6480:	cd bf       	out	0x3d, r28	; 61
    6482:	16 2f       	mov	r17, r22
    6484:	50 e0       	ldi	r21, 0x00	; 0
    6486:	40 e0       	ldi	r20, 0x00	; 0
     char i,iAdd,sTemp[20];
     iAdd=0;
	 for(i=0;i<strlen(strSource);i++){
	     if (strSource[i]!=cRem){
		     sTemp[iAdd]=strSource[i];
    6488:	be 01       	movw	r22, r28
    648a:	6f 5f       	subi	r22, 0xFF	; 255
    648c:	7f 4f       	sbci	r23, 0xFF	; 255
    648e:	0c c0       	rjmp	.+24     	; 0x64a8 <RemoveChar+0x3c>

void RemoveChar(char *strSource, char cRem){
     char i,iAdd,sTemp[20];
     iAdd=0;
	 for(i=0;i<strlen(strSource);i++){
	     if (strSource[i]!=cRem){
    6490:	28 0f       	add	r18, r24
    6492:	39 1f       	adc	r19, r25
    6494:	d9 01       	movw	r26, r18
    6496:	2c 91       	ld	r18, X
    6498:	21 17       	cp	r18, r17
    649a:	29 f0       	breq	.+10     	; 0x64a6 <RemoveChar+0x3a>
		     sTemp[iAdd]=strSource[i];
    649c:	fb 01       	movw	r30, r22
    649e:	e4 0f       	add	r30, r20
    64a0:	f1 1d       	adc	r31, r1
    64a2:	20 83       	st	Z, r18
			 iAdd++;
    64a4:	4f 5f       	subi	r20, 0xFF	; 255
}

void RemoveChar(char *strSource, char cRem){
     char i,iAdd,sTemp[20];
     iAdd=0;
	 for(i=0;i<strlen(strSource);i++){
    64a6:	5f 5f       	subi	r21, 0xFF	; 255
    64a8:	25 2f       	mov	r18, r21
    64aa:	30 e0       	ldi	r19, 0x00	; 0
    64ac:	fc 01       	movw	r30, r24
    64ae:	01 90       	ld	r0, Z+
    64b0:	00 20       	and	r0, r0
    64b2:	e9 f7       	brne	.-6      	; 0x64ae <RemoveChar+0x42>
    64b4:	31 97       	sbiw	r30, 0x01	; 1
    64b6:	e8 1b       	sub	r30, r24
    64b8:	f9 0b       	sbc	r31, r25
    64ba:	2e 17       	cp	r18, r30
    64bc:	3f 07       	cpc	r19, r31
    64be:	40 f3       	brcs	.-48     	; 0x6490 <RemoveChar+0x24>
	     if (strSource[i]!=cRem){
		     sTemp[iAdd]=strSource[i];
			 iAdd++;
          }
	 }sTemp[iAdd]=0;
    64c0:	9e 01       	movw	r18, r28
    64c2:	2f 5f       	subi	r18, 0xFF	; 255
    64c4:	3f 4f       	sbci	r19, 0xFF	; 255
    64c6:	f9 01       	movw	r30, r18
    64c8:	e4 0f       	add	r30, r20
    64ca:	f1 1d       	adc	r31, r1
    64cc:	10 82       	st	Z, r1
	 sprintf_P(strSource,PSTR("%s"),sTemp);
    64ce:	00 d0       	rcall	.+0      	; 0x64d0 <RemoveChar+0x64>
    64d0:	00 d0       	rcall	.+0      	; 0x64d2 <RemoveChar+0x66>
    64d2:	00 d0       	rcall	.+0      	; 0x64d4 <RemoveChar+0x68>
    64d4:	ed b7       	in	r30, 0x3d	; 61
    64d6:	fe b7       	in	r31, 0x3e	; 62
    64d8:	31 96       	adiw	r30, 0x01	; 1
    64da:	ad b7       	in	r26, 0x3d	; 61
    64dc:	be b7       	in	r27, 0x3e	; 62
    64de:	12 96       	adiw	r26, 0x02	; 2
    64e0:	9c 93       	st	X, r25
    64e2:	8e 93       	st	-X, r24
    64e4:	11 97       	sbiw	r26, 0x01	; 1
    64e6:	89 e0       	ldi	r24, 0x09	; 9
    64e8:	9a e1       	ldi	r25, 0x1A	; 26
    64ea:	93 83       	std	Z+3, r25	; 0x03
    64ec:	82 83       	std	Z+2, r24	; 0x02
    64ee:	35 83       	std	Z+5, r19	; 0x05
    64f0:	24 83       	std	Z+4, r18	; 0x04
    64f2:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
    64f6:	ed b7       	in	r30, 0x3d	; 61
    64f8:	fe b7       	in	r31, 0x3e	; 62
    64fa:	36 96       	adiw	r30, 0x06	; 6
    64fc:	0f b6       	in	r0, 0x3f	; 63
    64fe:	f8 94       	cli
    6500:	fe bf       	out	0x3e, r31	; 62
    6502:	0f be       	out	0x3f, r0	; 63
    6504:	ed bf       	out	0x3d, r30	; 61
}
    6506:	64 96       	adiw	r28, 0x14	; 20
    6508:	0f b6       	in	r0, 0x3f	; 63
    650a:	f8 94       	cli
    650c:	de bf       	out	0x3e, r29	; 62
    650e:	0f be       	out	0x3f, r0	; 63
    6510:	cd bf       	out	0x3d, r28	; 61
    6512:	cf 91       	pop	r28
    6514:	df 91       	pop	r29
    6516:	1f 91       	pop	r17
    6518:	08 95       	ret

0000651a <WrapCode>:
	      break;
	 }
   return Result;
}

void WrapCode(char *strRawCode){
    651a:	8f 92       	push	r8
    651c:	9f 92       	push	r9
    651e:	bf 92       	push	r11
    6520:	cf 92       	push	r12
    6522:	df 92       	push	r13
    6524:	ef 92       	push	r14
    6526:	ff 92       	push	r15
    6528:	0f 93       	push	r16
    652a:	1f 93       	push	r17
    652c:	df 93       	push	r29
    652e:	cf 93       	push	r28
    6530:	cd b7       	in	r28, 0x3d	; 61
    6532:	de b7       	in	r29, 0x3e	; 62
    6534:	2f 97       	sbiw	r28, 0x0f	; 15
    6536:	0f b6       	in	r0, 0x3f	; 63
    6538:	f8 94       	cli
    653a:	de bf       	out	0x3e, r29	; 62
    653c:	0f be       	out	0x3f, r0	; 63
    653e:	cd bf       	out	0x3d, r28	; 61
    6540:	6c 01       	movw	r12, r24
    6542:	bb 24       	eor	r11, r11
    6544:	40 e0       	ldi	r20, 0x00	; 0
    6546:	4e 01       	movw	r8, r28
    6548:	08 94       	sec
    654a:	81 1c       	adc	r8, r1
    654c:	91 1c       	adc	r9, r1
    654e:	12 c0       	rjmp	.+36     	; 0x6574 <WrapCode+0x5a>
     char i,seedKey;
	 char strTemp[15];
	 //62678677 ->68846445
	 seedKey=0;
	 for (i=0;i<strlen(strRawCode);i++){
	      strTemp[i]='0'+GeniusCalc(G_PLUS,(strRawCode[i]-'0'),seedKey);
    6550:	86 01       	movw	r16, r12
    6552:	0e 0d       	add	r16, r14
    6554:	1f 1d       	adc	r17, r15
    6556:	d8 01       	movw	r26, r16
    6558:	6c 91       	ld	r22, X
    655a:	60 53       	subi	r22, 0x30	; 48
    655c:	80 e0       	ldi	r24, 0x00	; 0
    655e:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <GeniusCalc>
    6562:	e8 0c       	add	r14, r8
    6564:	f9 1c       	adc	r15, r9
    6566:	80 5d       	subi	r24, 0xD0	; 208
    6568:	f7 01       	movw	r30, r14
    656a:	80 83       	st	Z, r24
		  seedKey=strRawCode[i]-'0';
    656c:	d8 01       	movw	r26, r16
    656e:	4c 91       	ld	r20, X
    6570:	40 53       	subi	r20, 0x30	; 48
void WrapCode(char *strRawCode){
     char i,seedKey;
	 char strTemp[15];
	 //62678677 ->68846445
	 seedKey=0;
	 for (i=0;i<strlen(strRawCode);i++){
    6572:	b3 94       	inc	r11
    6574:	eb 2c       	mov	r14, r11
    6576:	ff 24       	eor	r15, r15
    6578:	d6 01       	movw	r26, r12
    657a:	0d 90       	ld	r0, X+
    657c:	00 20       	and	r0, r0
    657e:	e9 f7       	brne	.-6      	; 0x657a <WrapCode+0x60>
    6580:	11 97       	sbiw	r26, 0x01	; 1
    6582:	ac 19       	sub	r26, r12
    6584:	bd 09       	sbc	r27, r13
    6586:	ea 16       	cp	r14, r26
    6588:	fb 06       	cpc	r15, r27
    658a:	10 f3       	brcs	.-60     	; 0x6550 <WrapCode+0x36>
	      strTemp[i]='0'+GeniusCalc(G_PLUS,(strRawCode[i]-'0'),seedKey);
		  seedKey=strRawCode[i]-'0';
	 }strTemp[strlen(strRawCode)]=0;
    658c:	a8 0d       	add	r26, r8
    658e:	b9 1d       	adc	r27, r9
    6590:	1c 92       	st	X, r1
     sprintf_P(strRawCode,PSTR("%s"),strTemp);
    6592:	00 d0       	rcall	.+0      	; 0x6594 <WrapCode+0x7a>
    6594:	00 d0       	rcall	.+0      	; 0x6596 <WrapCode+0x7c>
    6596:	00 d0       	rcall	.+0      	; 0x6598 <WrapCode+0x7e>
    6598:	ed b7       	in	r30, 0x3d	; 61
    659a:	fe b7       	in	r31, 0x3e	; 62
    659c:	31 96       	adiw	r30, 0x01	; 1
    659e:	ad b7       	in	r26, 0x3d	; 61
    65a0:	be b7       	in	r27, 0x3e	; 62
    65a2:	12 96       	adiw	r26, 0x02	; 2
    65a4:	dc 92       	st	X, r13
    65a6:	ce 92       	st	-X, r12
    65a8:	11 97       	sbiw	r26, 0x01	; 1
    65aa:	84 e1       	ldi	r24, 0x14	; 20
    65ac:	9a e1       	ldi	r25, 0x1A	; 26
    65ae:	93 83       	std	Z+3, r25	; 0x03
    65b0:	82 83       	std	Z+2, r24	; 0x02
    65b2:	95 82       	std	Z+5, r9	; 0x05
    65b4:	84 82       	std	Z+4, r8	; 0x04
    65b6:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
    65ba:	ed b7       	in	r30, 0x3d	; 61
    65bc:	fe b7       	in	r31, 0x3e	; 62
    65be:	36 96       	adiw	r30, 0x06	; 6
    65c0:	0f b6       	in	r0, 0x3f	; 63
    65c2:	f8 94       	cli
    65c4:	fe bf       	out	0x3e, r31	; 62
    65c6:	0f be       	out	0x3f, r0	; 63
    65c8:	ed bf       	out	0x3d, r30	; 61
}
    65ca:	2f 96       	adiw	r28, 0x0f	; 15
    65cc:	0f b6       	in	r0, 0x3f	; 63
    65ce:	f8 94       	cli
    65d0:	de bf       	out	0x3e, r29	; 62
    65d2:	0f be       	out	0x3f, r0	; 63
    65d4:	cd bf       	out	0x3d, r28	; 61
    65d6:	cf 91       	pop	r28
    65d8:	df 91       	pop	r29
    65da:	1f 91       	pop	r17
    65dc:	0f 91       	pop	r16
    65de:	ff 90       	pop	r15
    65e0:	ef 90       	pop	r14
    65e2:	df 90       	pop	r13
    65e4:	cf 90       	pop	r12
    65e6:	bf 90       	pop	r11
    65e8:	9f 90       	pop	r9
    65ea:	8f 90       	pop	r8
    65ec:	08 95       	ret

000065ee <GenerateKeyStamp>:


   return Result;
}

void GenerateKeyStamp(char *sTime, char *sGCode, char *strKeyStamp){//
    65ee:	8f 92       	push	r8
    65f0:	9f 92       	push	r9
    65f2:	af 92       	push	r10
    65f4:	bf 92       	push	r11
    65f6:	df 92       	push	r13
    65f8:	ef 92       	push	r14
    65fa:	ff 92       	push	r15
    65fc:	0f 93       	push	r16
    65fe:	1f 93       	push	r17
    6600:	df 93       	push	r29
    6602:	cf 93       	push	r28
    6604:	cd b7       	in	r28, 0x3d	; 61
    6606:	de b7       	in	r29, 0x3e	; 62
    6608:	2d 97       	sbiw	r28, 0x0d	; 13
    660a:	0f b6       	in	r0, 0x3f	; 63
    660c:	f8 94       	cli
    660e:	de bf       	out	0x3e, r29	; 62
    6610:	0f be       	out	0x3f, r0	; 63
    6612:	cd bf       	out	0x3d, r28	; 61
    6614:	9c 01       	movw	r18, r24
    6616:	7b 01       	movw	r14, r22
    6618:	5a 01       	movw	r10, r20
	             65585577
	 */
     char seedIdx,sSeed[10],sAdd[3],i;
     
	 seedIdx=(sTime[5]-'0')%8; 
	 sAdd[0]=sGCode[seedIdx];
    661a:	dc 01       	movw	r26, r24
    661c:	15 96       	adiw	r26, 0x05	; 5
    661e:	8c 91       	ld	r24, X
    6620:	90 e0       	ldi	r25, 0x00	; 0
    6622:	c0 97       	sbiw	r24, 0x30	; 48
    6624:	68 e0       	ldi	r22, 0x08	; 8
    6626:	70 e0       	ldi	r23, 0x00	; 0
    6628:	0e 94 17 aa 	call	0x1542e	; 0x1542e <__divmodhi4>
    662c:	f7 01       	movw	r30, r14
    662e:	e8 0f       	add	r30, r24
    6630:	f1 1d       	adc	r31, r1
    6632:	80 81       	ld	r24, Z
    6634:	89 83       	std	Y+1, r24	; 0x01
     seedIdx=(sTime[6]-'0')%8;
	 sAdd[1]=sGCode[seedIdx];
    6636:	f9 01       	movw	r30, r18
    6638:	86 81       	ldd	r24, Z+6	; 0x06
    663a:	90 e0       	ldi	r25, 0x00	; 0
    663c:	c0 97       	sbiw	r24, 0x30	; 48
    663e:	68 e0       	ldi	r22, 0x08	; 8
    6640:	70 e0       	ldi	r23, 0x00	; 0
    6642:	0e 94 17 aa 	call	0x1542e	; 0x1542e <__divmodhi4>
    6646:	f7 01       	movw	r30, r14
    6648:	e8 0f       	add	r30, r24
    664a:	f1 1d       	adc	r31, r1
    664c:	80 81       	ld	r24, Z
    664e:	8a 83       	std	Y+2, r24	; 0x02
	 sAdd[2]=0;
    6650:	1b 82       	std	Y+3, r1	; 0x03

	 sprintf_P(sSeed,PSTR("%s%s"),sTime,sAdd);
    6652:	8d b7       	in	r24, 0x3d	; 61
    6654:	9e b7       	in	r25, 0x3e	; 62
    6656:	08 97       	sbiw	r24, 0x08	; 8
    6658:	0f b6       	in	r0, 0x3f	; 63
    665a:	f8 94       	cli
    665c:	9e bf       	out	0x3e, r25	; 62
    665e:	0f be       	out	0x3f, r0	; 63
    6660:	8d bf       	out	0x3d, r24	; 61
    6662:	ed b7       	in	r30, 0x3d	; 61
    6664:	fe b7       	in	r31, 0x3e	; 62
    6666:	31 96       	adiw	r30, 0x01	; 1
    6668:	8e 01       	movw	r16, r28
    666a:	0c 5f       	subi	r16, 0xFC	; 252
    666c:	1f 4f       	sbci	r17, 0xFF	; 255
    666e:	ad b7       	in	r26, 0x3d	; 61
    6670:	be b7       	in	r27, 0x3e	; 62
    6672:	12 96       	adiw	r26, 0x02	; 2
    6674:	1c 93       	st	X, r17
    6676:	0e 93       	st	-X, r16
    6678:	11 97       	sbiw	r26, 0x01	; 1
    667a:	84 e0       	ldi	r24, 0x04	; 4
    667c:	9a e1       	ldi	r25, 0x1A	; 26
    667e:	93 83       	std	Z+3, r25	; 0x03
    6680:	82 83       	std	Z+2, r24	; 0x02
    6682:	35 83       	std	Z+5, r19	; 0x05
    6684:	24 83       	std	Z+4, r18	; 0x04
    6686:	ce 01       	movw	r24, r28
    6688:	01 96       	adiw	r24, 0x01	; 1
    668a:	97 83       	std	Z+7, r25	; 0x07
    668c:	86 83       	std	Z+6, r24	; 0x06
    668e:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
    6692:	dd 24       	eor	r13, r13
    6694:	ed b7       	in	r30, 0x3d	; 61
    6696:	fe b7       	in	r31, 0x3e	; 62
    6698:	38 96       	adiw	r30, 0x08	; 8
    669a:	0f b6       	in	r0, 0x3f	; 63
    669c:	f8 94       	cli
    669e:	fe bf       	out	0x3e, r31	; 62
    66a0:	0f be       	out	0x3f, r0	; 63
    66a2:	ed bf       	out	0x3d, r30	; 61
     for(i=0;i<strlen(sGCode);i++){
	     strKeyStamp[i]='0'+GeniusCalc(G_MULTY,(sSeed[i]-'0'),(sGCode[i]-'0'));		 
    66a4:	48 01       	movw	r8, r16
    66a6:	13 c0       	rjmp	.+38     	; 0x66ce <GenerateKeyStamp+0xe0>
    66a8:	f4 01       	movw	r30, r8
    66aa:	e0 0f       	add	r30, r16
    66ac:	f1 1f       	adc	r31, r17
    66ae:	60 81       	ld	r22, Z
    66b0:	60 53       	subi	r22, 0x30	; 48
    66b2:	f7 01       	movw	r30, r14
    66b4:	e0 0f       	add	r30, r16
    66b6:	f1 1f       	adc	r31, r17
    66b8:	40 81       	ld	r20, Z
    66ba:	40 53       	subi	r20, 0x30	; 48
    66bc:	81 e0       	ldi	r24, 0x01	; 1
    66be:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <GeniusCalc>
    66c2:	0a 0d       	add	r16, r10
    66c4:	1b 1d       	adc	r17, r11
    66c6:	80 5d       	subi	r24, 0xD0	; 208
    66c8:	d8 01       	movw	r26, r16
    66ca:	8c 93       	st	X, r24
     seedIdx=(sTime[6]-'0')%8;
	 sAdd[1]=sGCode[seedIdx];
	 sAdd[2]=0;

	 sprintf_P(sSeed,PSTR("%s%s"),sTime,sAdd);
     for(i=0;i<strlen(sGCode);i++){
    66cc:	d3 94       	inc	r13
    66ce:	0d 2d       	mov	r16, r13
    66d0:	10 e0       	ldi	r17, 0x00	; 0
    66d2:	d7 01       	movw	r26, r14
    66d4:	0d 90       	ld	r0, X+
    66d6:	00 20       	and	r0, r0
    66d8:	e9 f7       	brne	.-6      	; 0x66d4 <GenerateKeyStamp+0xe6>
    66da:	11 97       	sbiw	r26, 0x01	; 1
    66dc:	ae 19       	sub	r26, r14
    66de:	bf 09       	sbc	r27, r15
    66e0:	0a 17       	cp	r16, r26
    66e2:	1b 07       	cpc	r17, r27
    66e4:	08 f3       	brcs	.-62     	; 0x66a8 <GenerateKeyStamp+0xba>
	     strKeyStamp[i]='0'+GeniusCalc(G_MULTY,(sSeed[i]-'0'),(sGCode[i]-'0'));		 
	 }strKeyStamp[strlen(sGCode)]=0;
    66e6:	aa 0d       	add	r26, r10
    66e8:	bb 1d       	adc	r27, r11
    66ea:	1c 92       	st	X, r1
     WrapCode(strKeyStamp);
    66ec:	c5 01       	movw	r24, r10
    66ee:	0e 94 8d 32 	call	0x651a	; 0x651a <WrapCode>
}
    66f2:	2d 96       	adiw	r28, 0x0d	; 13
    66f4:	0f b6       	in	r0, 0x3f	; 63
    66f6:	f8 94       	cli
    66f8:	de bf       	out	0x3e, r29	; 62
    66fa:	0f be       	out	0x3f, r0	; 63
    66fc:	cd bf       	out	0x3d, r28	; 61
    66fe:	cf 91       	pop	r28
    6700:	df 91       	pop	r29
    6702:	1f 91       	pop	r17
    6704:	0f 91       	pop	r16
    6706:	ff 90       	pop	r15
    6708:	ef 90       	pop	r14
    670a:	df 90       	pop	r13
    670c:	bf 90       	pop	r11
    670e:	af 90       	pop	r10
    6710:	9f 90       	pop	r9
    6712:	8f 90       	pop	r8
    6714:	08 95       	ret

00006716 <GenerateGeniusCode>:
		  seedKey=strRawCode[i]-'0';
	 }strTemp[strlen(strRawCode)]=0;
     sprintf_P(strRawCode,PSTR("%s"),strTemp);
}

void GenerateGeniusCode(char *srcDate, char cSeed, char *strDestCode){
    6716:	af 92       	push	r10
    6718:	bf 92       	push	r11
    671a:	cf 92       	push	r12
    671c:	df 92       	push	r13
    671e:	ef 92       	push	r14
    6720:	ff 92       	push	r15
    6722:	0f 93       	push	r16
    6724:	1f 93       	push	r17
    6726:	df 93       	push	r29
    6728:	cf 93       	push	r28
    672a:	cd b7       	in	r28, 0x3d	; 61
    672c:	de b7       	in	r29, 0x3e	; 62
    672e:	28 97       	sbiw	r28, 0x08	; 8
    6730:	0f b6       	in	r0, 0x3f	; 63
    6732:	f8 94       	cli
    6734:	de bf       	out	0x3e, r29	; 62
    6736:	0f be       	out	0x3f, r0	; 63
    6738:	cd bf       	out	0x3d, r28	; 61
    673a:	6c 01       	movw	r12, r24
    673c:	f6 2e       	mov	r15, r22
    673e:	5a 01       	movw	r10, r20
	    sprintf_P(strSend,PSTR("Date[%s]"),srcDate);
		uart_print(1,1,strSend);
     #endif
    

	 StrPosCopy(srcDate,AddYear,strlen(srcDate)-2,2);
    6740:	fc 01       	movw	r30, r24
    6742:	01 90       	ld	r0, Z+
    6744:	00 20       	and	r0, r0
    6746:	e9 f7       	brne	.-6      	; 0x6742 <GenerateGeniusCode+0x2c>
    6748:	e8 1b       	sub	r30, r24
    674a:	f9 0b       	sbc	r31, r25
    674c:	33 97       	sbiw	r30, 0x03	; 3
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    674e:	e8 0f       	add	r30, r24
    6750:	f9 1f       	adc	r31, r25
    6752:	80 81       	ld	r24, Z
    6754:	89 83       	std	Y+1, r24	; 0x01
    6756:	81 81       	ldd	r24, Z+1	; 0x01
    6758:	8a 83       	std	Y+2, r24	; 0x02
	 }Dest[Length]=0;
    675a:	1b 82       	std	Y+3, r1	; 0x03
    #ifdef DEBUG_GENIUS_CODE
	    sprintf_P(strSend,PSTR("Year:[%s]"),AddYear);
		uart_print(1,1,strSend);
     #endif

	 sprintf_P(SYear,PSTR("20%s"),AddYear);
    675c:	00 d0       	rcall	.+0      	; 0x675e <GenerateGeniusCode+0x48>
    675e:	00 d0       	rcall	.+0      	; 0x6760 <GenerateGeniusCode+0x4a>
    6760:	00 d0       	rcall	.+0      	; 0x6762 <GenerateGeniusCode+0x4c>
    6762:	ed b7       	in	r30, 0x3d	; 61
    6764:	fe b7       	in	r31, 0x3e	; 62
    6766:	31 96       	adiw	r30, 0x01	; 1
    6768:	8e 01       	movw	r16, r28
    676a:	0c 5f       	subi	r16, 0xFC	; 252
    676c:	1f 4f       	sbci	r17, 0xFF	; 255
    676e:	ad b7       	in	r26, 0x3d	; 61
    6770:	be b7       	in	r27, 0x3e	; 62
    6772:	12 96       	adiw	r26, 0x02	; 2
    6774:	1c 93       	st	X, r17
    6776:	0e 93       	st	-X, r16
    6778:	11 97       	sbiw	r26, 0x01	; 1
    677a:	8f e0       	ldi	r24, 0x0F	; 15
    677c:	9a e1       	ldi	r25, 0x1A	; 26
    677e:	93 83       	std	Z+3, r25	; 0x03
    6780:	82 83       	std	Z+2, r24	; 0x02
    6782:	ce 01       	movw	r24, r28
    6784:	01 96       	adiw	r24, 0x01	; 1
    6786:	95 83       	std	Z+5, r25	; 0x05
    6788:	84 83       	std	Z+4, r24	; 0x04
    678a:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	 StrPosPaste(SYear,srcDate,strlen(srcDate)-2,strlen(SYear));
    678e:	d6 01       	movw	r26, r12
    6790:	0d 90       	ld	r0, X+
    6792:	00 20       	and	r0, r0
    6794:	e9 f7       	brne	.-6      	; 0x6790 <GenerateGeniusCode+0x7a>
    6796:	ac 19       	sub	r26, r12
    6798:	bd 09       	sbc	r27, r13
    679a:	f8 01       	movw	r30, r16
    679c:	01 90       	ld	r0, Z+
    679e:	00 20       	and	r0, r0
    67a0:	e9 f7       	brne	.-6      	; 0x679c <GenerateGeniusCode+0x86>
    67a2:	31 97       	sbiw	r30, 0x01	; 1
    67a4:	e0 1b       	sub	r30, r16
    67a6:	f1 0b       	sbc	r31, r17
    67a8:	8d b7       	in	r24, 0x3d	; 61
    67aa:	9e b7       	in	r25, 0x3e	; 62
    67ac:	06 96       	adiw	r24, 0x06	; 6
    67ae:	0f b6       	in	r0, 0x3f	; 63
    67b0:	f8 94       	cli
    67b2:	9e bf       	out	0x3e, r25	; 62
    67b4:	0f be       	out	0x3f, r0	; 63
    67b6:	8d bf       	out	0x3d, r24	; 61
    67b8:	13 97       	sbiw	r26, 0x03	; 3
    67ba:	c8 01       	movw	r24, r16
    67bc:	b6 01       	movw	r22, r12
    67be:	ad 01       	movw	r20, r26
    67c0:	9f 01       	movw	r18, r30
    67c2:	0e 94 92 17 	call	0x2f24	; 0x2f24 <StrPosPaste>
	 #ifdef DEBUG_GENIUS_CODE
	    sprintf_P(strSend,PSTR("NewDate[%s]"),srcDate);
		uart_print(1,1,strSend);
     #endif

	 sprintf_P(strDestCode,PSTR("%c"),cSeed);     
    67c6:	00 d0       	rcall	.+0      	; 0x67c8 <GenerateGeniusCode+0xb2>
    67c8:	00 d0       	rcall	.+0      	; 0x67ca <GenerateGeniusCode+0xb4>
    67ca:	00 d0       	rcall	.+0      	; 0x67cc <GenerateGeniusCode+0xb6>
    67cc:	ed b7       	in	r30, 0x3d	; 61
    67ce:	fe b7       	in	r31, 0x3e	; 62
    67d0:	31 96       	adiw	r30, 0x01	; 1
    67d2:	ad b7       	in	r26, 0x3d	; 61
    67d4:	be b7       	in	r27, 0x3e	; 62
    67d6:	12 96       	adiw	r26, 0x02	; 2
    67d8:	bc 92       	st	X, r11
    67da:	ae 92       	st	-X, r10
    67dc:	11 97       	sbiw	r26, 0x01	; 1
    67de:	8c e0       	ldi	r24, 0x0C	; 12
    67e0:	9a e1       	ldi	r25, 0x1A	; 26
    67e2:	93 83       	std	Z+3, r25	; 0x03
    67e4:	82 83       	std	Z+2, r24	; 0x02
    67e6:	f4 82       	std	Z+4, r15	; 0x04
    67e8:	15 82       	std	Z+5, r1	; 0x05
    67ea:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
    67ee:	ee 24       	eor	r14, r14
    67f0:	e3 94       	inc	r14
    67f2:	ed b7       	in	r30, 0x3d	; 61
    67f4:	fe b7       	in	r31, 0x3e	; 62
    67f6:	36 96       	adiw	r30, 0x06	; 6
    67f8:	0f b6       	in	r0, 0x3f	; 63
    67fa:	f8 94       	cli
    67fc:	fe bf       	out	0x3e, r31	; 62
    67fe:	0f be       	out	0x3f, r0	; 63
    6800:	ed bf       	out	0x3d, r30	; 61
	 GCalcOpt=G_PLUS;
	 for (i=1;i<strlen(srcDate);i++){
	      strDestCode[i]='0'+GeniusCalc(GCalcOpt,(cSeed-'0'),(srcDate[i]-'0'));	 
    6802:	f0 ed       	ldi	r31, 0xD0	; 208
    6804:	ff 0e       	add	r15, r31
    6806:	0f c0       	rjmp	.+30     	; 0x6826 <GenerateGeniusCode+0x110>
    6808:	f6 01       	movw	r30, r12
    680a:	e0 0f       	add	r30, r16
    680c:	f1 1f       	adc	r31, r17
    680e:	40 81       	ld	r20, Z
    6810:	40 53       	subi	r20, 0x30	; 48
    6812:	80 e0       	ldi	r24, 0x00	; 0
    6814:	6f 2d       	mov	r22, r15
    6816:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <GeniusCalc>
    681a:	0a 0d       	add	r16, r10
    681c:	1b 1d       	adc	r17, r11
    681e:	80 5d       	subi	r24, 0xD0	; 208
    6820:	d8 01       	movw	r26, r16
    6822:	8c 93       	st	X, r24
		uart_print(1,1,strSend);
     #endif

	 sprintf_P(strDestCode,PSTR("%c"),cSeed);     
	 GCalcOpt=G_PLUS;
	 for (i=1;i<strlen(srcDate);i++){
    6824:	e3 94       	inc	r14
    6826:	0e 2d       	mov	r16, r14
    6828:	10 e0       	ldi	r17, 0x00	; 0
    682a:	d6 01       	movw	r26, r12
    682c:	0d 90       	ld	r0, X+
    682e:	00 20       	and	r0, r0
    6830:	e9 f7       	brne	.-6      	; 0x682c <GenerateGeniusCode+0x116>
    6832:	11 97       	sbiw	r26, 0x01	; 1
    6834:	ac 19       	sub	r26, r12
    6836:	bd 09       	sbc	r27, r13
    6838:	0a 17       	cp	r16, r26
    683a:	1b 07       	cpc	r17, r27
    683c:	28 f3       	brcs	.-54     	; 0x6808 <GenerateGeniusCode+0xf2>
	      strDestCode[i]='0'+GeniusCalc(GCalcOpt,(cSeed-'0'),(srcDate[i]-'0'));	 
	 }strDestCode[strlen(srcDate)]=0;
    683e:	aa 0d       	add	r26, r10
    6840:	bb 1d       	adc	r27, r11
    6842:	1c 92       	st	X, r1
	 #ifdef DEBUG_GENIUS_CODE
       sprintf_P(strSend,PSTR("1st:%s"),strDestCode);
	   uart_print(1,1,strSend);     
	 #endif

	 WrapCode(strDestCode);
    6844:	c5 01       	movw	r24, r10
    6846:	0e 94 8d 32 	call	0x651a	; 0x651a <WrapCode>
	 #ifdef DEBUG_GENIUS_CODE
	   sprintf_P(strSend,PSTR("Wrap:%s"),strDestCode);
	   uart_print(1,1,strSend);     
	 #endif
}
    684a:	28 96       	adiw	r28, 0x08	; 8
    684c:	0f b6       	in	r0, 0x3f	; 63
    684e:	f8 94       	cli
    6850:	de bf       	out	0x3e, r29	; 62
    6852:	0f be       	out	0x3f, r0	; 63
    6854:	cd bf       	out	0x3d, r28	; 61
    6856:	cf 91       	pop	r28
    6858:	df 91       	pop	r29
    685a:	1f 91       	pop	r17
    685c:	0f 91       	pop	r16
    685e:	ff 90       	pop	r15
    6860:	ef 90       	pop	r14
    6862:	df 90       	pop	r13
    6864:	cf 90       	pop	r12
    6866:	bf 90       	pop	r11
    6868:	af 90       	pop	r10
    686a:	08 95       	ret

0000686c <GeneratePrintInit>:





void GeneratePrintInit(){//Create Initialize Print 
    686c:	cf 92       	push	r12
    686e:	df 92       	push	r13
    6870:	ef 92       	push	r14
    6872:	ff 92       	push	r15
    6874:	0f 93       	push	r16
    6876:	1f 93       	push	r17
    6878:	df 93       	push	r29
    687a:	cf 93       	push	r28
    687c:	cd b7       	in	r28, 0x3d	; 61
    687e:	de b7       	in	r29, 0x3e	; 62
    6880:	62 97       	sbiw	r28, 0x12	; 18
    6882:	0f b6       	in	r0, 0x3f	; 63
    6884:	f8 94       	cli
    6886:	de bf       	out	0x3e, r29	; 62
    6888:	0f be       	out	0x3f, r0	; 63
    688a:	cd bf       	out	0x3d, r28	; 61
     char strVernum[6],strVerdate[12];
	 sprintf_P(strVernum,PSTR(VERSION_NUM));
    688c:	00 d0       	rcall	.+0      	; 0x688e <GeneratePrintInit+0x22>
    688e:	00 d0       	rcall	.+0      	; 0x6890 <GeneratePrintInit+0x24>
    6890:	6e 01       	movw	r12, r28
    6892:	08 94       	sec
    6894:	c1 1c       	adc	r12, r1
    6896:	d1 1c       	adc	r13, r1
    6898:	ad b7       	in	r26, 0x3d	; 61
    689a:	be b7       	in	r27, 0x3e	; 62
    689c:	12 96       	adiw	r26, 0x02	; 2
    689e:	dc 92       	st	X, r13
    68a0:	ce 92       	st	-X, r12
    68a2:	11 97       	sbiw	r26, 0x01	; 1
    68a4:	8e e9       	ldi	r24, 0x9E	; 158
    68a6:	9f e1       	ldi	r25, 0x1F	; 31
    68a8:	14 96       	adiw	r26, 0x04	; 4
    68aa:	9c 93       	st	X, r25
    68ac:	8e 93       	st	-X, r24
    68ae:	13 97       	sbiw	r26, 0x03	; 3
    68b0:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	 sprintf_P(strVerdate,PSTR(VERSION_DATE));
    68b4:	67 e0       	ldi	r22, 0x07	; 7
    68b6:	e6 2e       	mov	r14, r22
    68b8:	f1 2c       	mov	r15, r1
    68ba:	ec 0e       	add	r14, r28
    68bc:	fd 1e       	adc	r15, r29
    68be:	ed b7       	in	r30, 0x3d	; 61
    68c0:	fe b7       	in	r31, 0x3e	; 62
    68c2:	f2 82       	std	Z+2, r15	; 0x02
    68c4:	e1 82       	std	Z+1, r14	; 0x01
    68c6:	83 e9       	ldi	r24, 0x93	; 147
    68c8:	9f e1       	ldi	r25, 0x1F	; 31
    68ca:	94 83       	std	Z+4, r25	; 0x04
    68cc:	83 83       	std	Z+3, r24	; 0x03
    68ce:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
     sprintf_P(PrintBuffer,PSTR("\nGeNiUs Ticket Printer \n Version:%s\n Last Update %s \n Hanindo Automation Solutions \n www.hanindogroup.com\n\n\n\n\n\n\n\n"),strVernum,strVerdate);
    68d2:	00 d0       	rcall	.+0      	; 0x68d4 <GeneratePrintInit+0x68>
    68d4:	00 d0       	rcall	.+0      	; 0x68d6 <GeneratePrintInit+0x6a>
    68d6:	ed b7       	in	r30, 0x3d	; 61
    68d8:	fe b7       	in	r31, 0x3e	; 62
    68da:	31 96       	adiw	r30, 0x01	; 1
    68dc:	0c ee       	ldi	r16, 0xEC	; 236
    68de:	13 e0       	ldi	r17, 0x03	; 3
    68e0:	ad b7       	in	r26, 0x3d	; 61
    68e2:	be b7       	in	r27, 0x3e	; 62
    68e4:	12 96       	adiw	r26, 0x02	; 2
    68e6:	1c 93       	st	X, r17
    68e8:	0e 93       	st	-X, r16
    68ea:	11 97       	sbiw	r26, 0x01	; 1
    68ec:	81 e2       	ldi	r24, 0x21	; 33
    68ee:	9f e1       	ldi	r25, 0x1F	; 31
    68f0:	93 83       	std	Z+3, r25	; 0x03
    68f2:	82 83       	std	Z+2, r24	; 0x02
    68f4:	d5 82       	std	Z+5, r13	; 0x05
    68f6:	c4 82       	std	Z+4, r12	; 0x04
    68f8:	f7 82       	std	Z+7, r15	; 0x07
    68fa:	e6 82       	std	Z+6, r14	; 0x06
    68fc:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	 uart_print(0,1,PrintBuffer);
    6900:	ed b7       	in	r30, 0x3d	; 61
    6902:	fe b7       	in	r31, 0x3e	; 62
    6904:	38 96       	adiw	r30, 0x08	; 8
    6906:	0f b6       	in	r0, 0x3f	; 63
    6908:	f8 94       	cli
    690a:	fe bf       	out	0x3e, r31	; 62
    690c:	0f be       	out	0x3f, r0	; 63
    690e:	ed bf       	out	0x3d, r30	; 61
    6910:	80 e0       	ldi	r24, 0x00	; 0
    6912:	61 e0       	ldi	r22, 0x01	; 1
    6914:	a8 01       	movw	r20, r16
    6916:	0e 94 78 a8 	call	0x150f0	; 0x150f0 <uart_print>
	 LengthMessage81=strlen(PrintBuffer);
    691a:	f8 01       	movw	r30, r16
    691c:	01 90       	ld	r0, Z+
    691e:	00 20       	and	r0, r0
    6920:	e9 f7       	brne	.-6      	; 0x691c <GeneratePrintInit+0xb0>
    6922:	31 97       	sbiw	r30, 0x01	; 1
    6924:	e0 1b       	sub	r30, r16
    6926:	f1 0b       	sbc	r31, r17
    6928:	f0 93 8e 01 	sts	0x018E, r31
    692c:	e0 93 8d 01 	sts	0x018D, r30
	 //Spooling HFCx 0000
	 cmdPrint=0b00010000|(1<<PRN_PAPER_CUT);
    6930:	80 e3       	ldi	r24, 0x30	; 48
    6932:	80 93 b5 01 	sts	0x01B5, r24
	 IsFreePrinting=True;
    6936:	81 e0       	ldi	r24, 0x01	; 1
    6938:	80 93 a8 01 	sts	0x01A8, r24
}
    693c:	62 96       	adiw	r28, 0x12	; 18
    693e:	0f b6       	in	r0, 0x3f	; 63
    6940:	f8 94       	cli
    6942:	de bf       	out	0x3e, r29	; 62
    6944:	0f be       	out	0x3f, r0	; 63
    6946:	cd bf       	out	0x3d, r28	; 61
    6948:	cf 91       	pop	r28
    694a:	df 91       	pop	r29
    694c:	1f 91       	pop	r17
    694e:	0f 91       	pop	r16
    6950:	ff 90       	pop	r15
    6952:	ef 90       	pop	r14
    6954:	df 90       	pop	r13
    6956:	cf 90       	pop	r12
    6958:	08 95       	ret

0000695a <FormatCurrency>:
     DecCfg=eeprom_read_byte(&DefDecimalTotalVolume);
	 FormatDecimal(strRawVolume,DecCfg);
}


void FormatCurrency(char *strCurrency){// 5000000.00 5,000,000.00
    695a:	9f 92       	push	r9
    695c:	af 92       	push	r10
    695e:	bf 92       	push	r11
    6960:	cf 92       	push	r12
    6962:	df 92       	push	r13
    6964:	ef 92       	push	r14
    6966:	ff 92       	push	r15
    6968:	0f 93       	push	r16
    696a:	1f 93       	push	r17
    696c:	df 93       	push	r29
    696e:	cf 93       	push	r28
    6970:	cd b7       	in	r28, 0x3d	; 61
    6972:	de b7       	in	r29, 0x3e	; 62
    6974:	64 97       	sbiw	r28, 0x14	; 20
    6976:	0f b6       	in	r0, 0x3f	; 63
    6978:	f8 94       	cli
    697a:	de bf       	out	0x3e, r29	; 62
    697c:	0f be       	out	0x3f, r0	; 63
    697e:	cd bf       	out	0x3d, r28	; 61
    6980:	6c 01       	movw	r12, r24
     char i,dotPos=0,iPos=0,Length=0,nComa=0;//cPos=0,;
	 char fmtCurrency[20];
	 char CurrencyMark,DecimalMark;

	 CurrencyMark=eeprom_read_byte(&DefCurrencyMark);
    6982:	8f e3       	ldi	r24, 0x3F	; 63
    6984:	90 e0       	ldi	r25, 0x00	; 0
    6986:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
    698a:	98 2e       	mov	r9, r24
	 DecimalMark=eeprom_read_byte(&DefDecimalMark);
    698c:	8e e3       	ldi	r24, 0x3E	; 62
    698e:	90 e0       	ldi	r25, 0x00	; 0
    6990:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>

	 Length=strlen(strCurrency);//123,456
    6994:	f6 01       	movw	r30, r12
    6996:	01 90       	ld	r0, Z+
    6998:	00 20       	and	r0, r0
    699a:	e9 f7       	brne	.-6      	; 0x6996 <FormatCurrency+0x3c>
    699c:	31 97       	sbiw	r30, 0x01	; 1
    699e:	ee 2e       	mov	r14, r30
    69a0:	ec 18       	sub	r14, r12
    69a2:	fe 01       	movw	r30, r28
    69a4:	31 96       	adiw	r30, 0x01	; 1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    69a6:	9e 01       	movw	r18, r28
    69a8:	2b 5e       	subi	r18, 0xEB	; 235
    69aa:	3f 4f       	sbci	r19, 0xFF	; 255
	     strMemory[i]=data;
    69ac:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    69ae:	e2 17       	cp	r30, r18
    69b0:	f3 07       	cpc	r31, r19
    69b2:	e1 f7       	brne	.-8      	; 0x69ac <FormatCurrency+0x52>
    69b4:	f6 01       	movw	r30, r12
    69b6:	fe 2c       	mov	r15, r14
    69b8:	90 e0       	ldi	r25, 0x00	; 0
    69ba:	30 e0       	ldi	r19, 0x00	; 0
    69bc:	09 c0       	rjmp	.+18     	; 0x69d0 <FormatCurrency+0x76>
	 dotPos=Length;
	 nComa=0;
	 FillChar(fmtCurrency,sizeof(fmtCurrency),0);
	 //Detection
	 for(i=0;i<Length;i++){// 123,456 
	     if (strCurrency[i]==DecimalMark) dotPos=i;//3
    69be:	20 81       	ld	r18, Z
    69c0:	28 17       	cp	r18, r24
    69c2:	09 f4       	brne	.+2      	; 0x69c6 <FormatCurrency+0x6c>
    69c4:	f9 2e       	mov	r15, r25
		 if (strCurrency[i]==CurrencyMark) nComa++;//0
    69c6:	29 15       	cp	r18, r9
    69c8:	09 f4       	brne	.+2      	; 0x69cc <FormatCurrency+0x72>
    69ca:	3f 5f       	subi	r19, 0xFF	; 255
	 Length=strlen(strCurrency);//123,456
	 dotPos=Length;
	 nComa=0;
	 FillChar(fmtCurrency,sizeof(fmtCurrency),0);
	 //Detection
	 for(i=0;i<Length;i++){// 123,456 
    69cc:	9f 5f       	subi	r25, 0xFF	; 255
    69ce:	31 96       	adiw	r30, 0x01	; 1
    69d0:	9e 15       	cp	r25, r14
    69d2:	a8 f3       	brcs	.-22     	; 0x69be <FormatCurrency+0x64>
	     if (strCurrency[i]==DecimalMark) dotPos=i;//3
		 if (strCurrency[i]==CurrencyMark) nComa++;//0
	 }

	 if((nComa==0)&&(dotPos>3)){		 
    69d4:	33 23       	and	r19, r19
    69d6:	09 f0       	breq	.+2      	; 0x69da <FormatCurrency+0x80>
    69d8:	5e c0       	rjmp	.+188    	; 0x6a96 <FormatCurrency+0x13c>
    69da:	83 e0       	ldi	r24, 0x03	; 3
    69dc:	8f 15       	cp	r24, r15
    69de:	08 f0       	brcs	.+2      	; 0x69e2 <FormatCurrency+0x88>
    69e0:	5a c0       	rjmp	.+180    	; 0x6a96 <FormatCurrency+0x13c>
    69e2:	40 e0       	ldi	r20, 0x00	; 0
    69e4:	20 e0       	ldi	r18, 0x00	; 0
    69e6:	30 e0       	ldi	r19, 0x00	; 0
         iPos=0;
	     for(i=0;i<dotPos;i++){
	         if ((((dotPos-i)%3)==0)&&(i<(dotPos))&&(i>0)){ 
    69e8:	af 2c       	mov	r10, r15
    69ea:	bb 24       	eor	r11, r11
		        fmtCurrency[iPos]=CurrencyMark;
    69ec:	8e 01       	movw	r16, r28
    69ee:	0f 5f       	subi	r16, 0xFF	; 255
    69f0:	1f 4f       	sbci	r17, 0xFF	; 255
	 }

	 if((nComa==0)&&(dotPos>3)){		 
         iPos=0;
	     for(i=0;i<dotPos;i++){
	         if ((((dotPos-i)%3)==0)&&(i<(dotPos))&&(i>0)){ 
    69f2:	c5 01       	movw	r24, r10
    69f4:	82 1b       	sub	r24, r18
    69f6:	93 0b       	sbc	r25, r19
    69f8:	63 e0       	ldi	r22, 0x03	; 3
    69fa:	70 e0       	ldi	r23, 0x00	; 0
    69fc:	0e 94 17 aa 	call	0x1542e	; 0x1542e <__divmodhi4>
    6a00:	89 2b       	or	r24, r25
    6a02:	49 f4       	brne	.+18     	; 0x6a16 <FormatCurrency+0xbc>
    6a04:	2f 15       	cp	r18, r15
    6a06:	38 f4       	brcc	.+14     	; 0x6a16 <FormatCurrency+0xbc>
    6a08:	22 23       	and	r18, r18
    6a0a:	29 f0       	breq	.+10     	; 0x6a16 <FormatCurrency+0xbc>
		        fmtCurrency[iPos]=CurrencyMark;
    6a0c:	f8 01       	movw	r30, r16
    6a0e:	e4 0f       	add	r30, r20
    6a10:	f1 1d       	adc	r31, r1
    6a12:	90 82       	st	Z, r9
		        iPos++;
    6a14:	4f 5f       	subi	r20, 0xFF	; 255
		        }
		        fmtCurrency[iPos]=strCurrency[i];
    6a16:	d8 01       	movw	r26, r16
    6a18:	a4 0f       	add	r26, r20
    6a1a:	b1 1d       	adc	r27, r1
    6a1c:	f6 01       	movw	r30, r12
    6a1e:	e2 0f       	add	r30, r18
    6a20:	f3 1f       	adc	r31, r19
    6a22:	80 81       	ld	r24, Z
    6a24:	8c 93       	st	X, r24
			    iPos++;
    6a26:	4f 5f       	subi	r20, 0xFF	; 255
			    fmtCurrency[iPos]=0;
    6a28:	f8 01       	movw	r30, r16
    6a2a:	e4 0f       	add	r30, r20
    6a2c:	f1 1d       	adc	r31, r1
    6a2e:	10 82       	st	Z, r1
    6a30:	2f 5f       	subi	r18, 0xFF	; 255
    6a32:	3f 4f       	sbci	r19, 0xFF	; 255
		 if (strCurrency[i]==CurrencyMark) nComa++;//0
	 }

	 if((nComa==0)&&(dotPos>3)){		 
         iPos=0;
	     for(i=0;i<dotPos;i++){
    6a34:	2f 15       	cp	r18, r15
    6a36:	e8 f2       	brcs	.-70     	; 0x69f2 <FormatCurrency+0x98>
    6a38:	9f 2d       	mov	r25, r15
			    iPos++;
			    fmtCurrency[iPos]=0;
	         }
         
	     for(i=dotPos;i<Length;i++){
		        fmtCurrency[iPos]=strCurrency[i];
    6a3a:	9e 01       	movw	r18, r28
    6a3c:	2f 5f       	subi	r18, 0xFF	; 255
    6a3e:	3f 4f       	sbci	r19, 0xFF	; 255
    6a40:	0e c0       	rjmp	.+28     	; 0x6a5e <FormatCurrency+0x104>
    6a42:	d9 01       	movw	r26, r18
    6a44:	a4 0f       	add	r26, r20
    6a46:	b1 1d       	adc	r27, r1
    6a48:	f6 01       	movw	r30, r12
    6a4a:	e9 0f       	add	r30, r25
    6a4c:	f1 1d       	adc	r31, r1
    6a4e:	80 81       	ld	r24, Z
    6a50:	8c 93       	st	X, r24
			    iPos++;
    6a52:	4f 5f       	subi	r20, 0xFF	; 255
			    fmtCurrency[iPos]=0;
    6a54:	f9 01       	movw	r30, r18
    6a56:	e4 0f       	add	r30, r20
    6a58:	f1 1d       	adc	r31, r1
    6a5a:	10 82       	st	Z, r1
		        fmtCurrency[iPos]=strCurrency[i];
			    iPos++;
			    fmtCurrency[iPos]=0;
	         }
         
	     for(i=dotPos;i<Length;i++){
    6a5c:	9f 5f       	subi	r25, 0xFF	; 255
    6a5e:	9e 15       	cp	r25, r14
    6a60:	80 f3       	brcs	.-32     	; 0x6a42 <FormatCurrency+0xe8>
    6a62:	90 e0       	ldi	r25, 0x00	; 0
		        fmtCurrency[iPos]=strCurrency[i];
			    iPos++;
			    fmtCurrency[iPos]=0;
	         }
	      for(i=0;i<strlen(fmtCurrency);i++){
    6a64:	9e 01       	movw	r18, r28
    6a66:	2f 5f       	subi	r18, 0xFF	; 255
    6a68:	3f 4f       	sbci	r19, 0xFF	; 255
    6a6a:	09 c0       	rjmp	.+18     	; 0x6a7e <FormatCurrency+0x124>
	          strCurrency[i]=fmtCurrency[i];
    6a6c:	f6 01       	movw	r30, r12
    6a6e:	ea 0f       	add	r30, r26
    6a70:	fb 1f       	adc	r31, r27
    6a72:	a2 0f       	add	r26, r18
    6a74:	b3 1f       	adc	r27, r19
    6a76:	8c 91       	ld	r24, X
    6a78:	80 83       	st	Z, r24
			  strCurrency[i+1]=0;
    6a7a:	11 82       	std	Z+1, r1	; 0x01
	     for(i=dotPos;i<Length;i++){
		        fmtCurrency[iPos]=strCurrency[i];
			    iPos++;
			    fmtCurrency[iPos]=0;
	         }
	      for(i=0;i<strlen(fmtCurrency);i++){
    6a7c:	9f 5f       	subi	r25, 0xFF	; 255
    6a7e:	a9 2f       	mov	r26, r25
    6a80:	b0 e0       	ldi	r27, 0x00	; 0
    6a82:	f9 01       	movw	r30, r18
    6a84:	01 90       	ld	r0, Z+
    6a86:	00 20       	and	r0, r0
    6a88:	e9 f7       	brne	.-6      	; 0x6a84 <FormatCurrency+0x12a>
    6a8a:	31 97       	sbiw	r30, 0x01	; 1
    6a8c:	e2 1b       	sub	r30, r18
    6a8e:	f3 0b       	sbc	r31, r19
    6a90:	ae 17       	cp	r26, r30
    6a92:	bf 07       	cpc	r27, r31
    6a94:	58 f3       	brcs	.-42     	; 0x6a6c <FormatCurrency+0x112>
	          strCurrency[i]=fmtCurrency[i];
			  strCurrency[i+1]=0;
	      }
     }      
}
    6a96:	64 96       	adiw	r28, 0x14	; 20
    6a98:	0f b6       	in	r0, 0x3f	; 63
    6a9a:	f8 94       	cli
    6a9c:	de bf       	out	0x3e, r29	; 62
    6a9e:	0f be       	out	0x3f, r0	; 63
    6aa0:	cd bf       	out	0x3d, r28	; 61
    6aa2:	cf 91       	pop	r28
    6aa4:	df 91       	pop	r29
    6aa6:	1f 91       	pop	r17
    6aa8:	0f 91       	pop	r16
    6aaa:	ff 90       	pop	r15
    6aac:	ef 90       	pop	r14
    6aae:	df 90       	pop	r13
    6ab0:	cf 90       	pop	r12
    6ab2:	bf 90       	pop	r11
    6ab4:	af 90       	pop	r10
    6ab6:	9f 90       	pop	r9
    6ab8:	08 95       	ret

00006aba <FormatDecimal>:

void TestLocalAccount(){

}

void FormatDecimal(char *strRawData, char DecimalCfg){// 9-> 0,009 0,234 123 
    6aba:	ef 92       	push	r14
    6abc:	ff 92       	push	r15
    6abe:	0f 93       	push	r16
    6ac0:	1f 93       	push	r17
    6ac2:	df 93       	push	r29
    6ac4:	cf 93       	push	r28
    6ac6:	cd b7       	in	r28, 0x3d	; 61
    6ac8:	de b7       	in	r29, 0x3e	; 62
    6aca:	64 97       	sbiw	r28, 0x14	; 20
    6acc:	0f b6       	in	r0, 0x3f	; 63
    6ace:	f8 94       	cli
    6ad0:	de bf       	out	0x3e, r29	; 62
    6ad2:	0f be       	out	0x3f, r0	; 63
    6ad4:	cd bf       	out	0x3d, r28	; 61
    6ad6:	8c 01       	movw	r16, r24
    6ad8:	f6 2e       	mov	r15, r22
     char i,iPos,CommaPos,Length=0;                 //1->0,01 
	 char strDecimalFormated[20];
	 char DecPointMark;
     if (DecimalCfg>0){    
    6ada:	66 23       	and	r22, r22
    6adc:	09 f4       	brne	.+2      	; 0x6ae0 <FormatDecimal+0x26>
    6ade:	55 c0       	rjmp	.+170    	; 0x6b8a <FormatDecimal+0xd0>
		 DecPointMark=eeprom_read_byte(&DefDecimalMark);	 
    6ae0:	8e e3       	ldi	r24, 0x3E	; 62
    6ae2:	90 e0       	ldi	r25, 0x00	; 0
    6ae4:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
    6ae8:	e8 2e       	mov	r14, r24
		 Length=strlen(strRawData);
    6aea:	f8 01       	movw	r30, r16
    6aec:	01 90       	ld	r0, Z+
    6aee:	00 20       	and	r0, r0
    6af0:	e9 f7       	brne	.-6      	; 0x6aec <FormatDecimal+0x32>
    6af2:	31 97       	sbiw	r30, 0x01	; 1
    6af4:	3e 2f       	mov	r19, r30
    6af6:	30 1b       	sub	r19, r16

		 if (Length>DecimalCfg)CommaPos=Length-DecimalCfg;
    6af8:	f3 16       	cp	r15, r19
    6afa:	c0 f5       	brcc	.+112    	; 0x6b6c <FormatDecimal+0xb2>
    6afc:	83 2f       	mov	r24, r19
    6afe:	8f 19       	sub	r24, r15
    6b00:	f8 2e       	mov	r15, r24
    6b02:	b8 01       	movw	r22, r16
    6b04:	d8 01       	movw	r26, r16
    6b06:	20 e0       	ldi	r18, 0x00	; 0
    6b08:	90 e0       	ldi	r25, 0x00	; 0

		 
		 iPos=0;
		 for(i=0;i<Length;i++){
			 if (i==CommaPos){
				 strDecimalFormated[iPos]=DecPointMark;
    6b0a:	ae 01       	movw	r20, r28
    6b0c:	4f 5f       	subi	r20, 0xFF	; 255
    6b0e:	5f 4f       	sbci	r21, 0xFF	; 255
    6b10:	0e c0       	rjmp	.+28     	; 0x6b2e <FormatDecimal+0x74>
			 }

		 
		 iPos=0;
		 for(i=0;i<Length;i++){
			 if (i==CommaPos){
    6b12:	2f 15       	cp	r18, r15
    6b14:	29 f4       	brne	.+10     	; 0x6b20 <FormatDecimal+0x66>
				 strDecimalFormated[iPos]=DecPointMark;
    6b16:	fa 01       	movw	r30, r20
    6b18:	e9 0f       	add	r30, r25
    6b1a:	f1 1d       	adc	r31, r1
    6b1c:	e0 82       	st	Z, r14
				 iPos++;
    6b1e:	9f 5f       	subi	r25, 0xFF	; 255
			}
			strDecimalFormated[iPos]=strRawData[i];
    6b20:	fa 01       	movw	r30, r20
    6b22:	e9 0f       	add	r30, r25
    6b24:	f1 1d       	adc	r31, r1
    6b26:	8d 91       	ld	r24, X+
    6b28:	80 83       	st	Z, r24
			//strDecimalFormated[iPos+1]=0;
			iPos++;
    6b2a:	9f 5f       	subi	r25, 0xFF	; 255
			 CommaPos=1;
			 }

		 
		 iPos=0;
		 for(i=0;i<Length;i++){
    6b2c:	2f 5f       	subi	r18, 0xFF	; 255
    6b2e:	23 17       	cp	r18, r19
    6b30:	80 f3       	brcs	.-32     	; 0x6b12 <FormatDecimal+0x58>
				 iPos++;
			}
			strDecimalFormated[iPos]=strRawData[i];
			//strDecimalFormated[iPos+1]=0;
			iPos++;
		 }strDecimalFormated[iPos]=0;
    6b32:	9e 01       	movw	r18, r28
    6b34:	2f 5f       	subi	r18, 0xFF	; 255
    6b36:	3f 4f       	sbci	r19, 0xFF	; 255
    6b38:	f9 01       	movw	r30, r18
    6b3a:	e9 0f       	add	r30, r25
    6b3c:	f1 1d       	adc	r31, r1
    6b3e:	10 82       	st	Z, r1
		 
         //uart_print(1,1,strDecimalFormated); 

		 Length=strlen(strDecimalFormated);
    6b40:	f9 01       	movw	r30, r18
    6b42:	01 90       	ld	r0, Z+
    6b44:	00 20       	and	r0, r0
    6b46:	e9 f7       	brne	.-6      	; 0x6b42 <FormatDecimal+0x88>
    6b48:	31 97       	sbiw	r30, 0x01	; 1
    6b4a:	9e 2f       	mov	r25, r30
    6b4c:	92 1b       	sub	r25, r18
    6b4e:	d9 01       	movw	r26, r18
    6b50:	04 c0       	rjmp	.+8      	; 0x6b5a <FormatDecimal+0xa0>
		 for(i=0;i<Length;i++){
			 strRawData[i]=strDecimalFormated[i];
    6b52:	8d 91       	ld	r24, X+
    6b54:	fb 01       	movw	r30, r22
    6b56:	81 93       	st	Z+, r24
    6b58:	bf 01       	movw	r22, r30
		 }strDecimalFormated[iPos]=0;
		 
         //uart_print(1,1,strDecimalFormated); 

		 Length=strlen(strDecimalFormated);
		 for(i=0;i<Length;i++){
    6b5a:	8a 2f       	mov	r24, r26
    6b5c:	82 1b       	sub	r24, r18
    6b5e:	89 17       	cp	r24, r25
    6b60:	c0 f3       	brcs	.-16     	; 0x6b52 <FormatDecimal+0x98>
			 strRawData[i]=strDecimalFormated[i];
		 }strRawData[Length]=0;
    6b62:	09 0f       	add	r16, r25
    6b64:	11 1d       	adc	r17, r1
    6b66:	f8 01       	movw	r30, r16
    6b68:	10 82       	st	Z, r1
    6b6a:	0f c0       	rjmp	.+30     	; 0x6b8a <FormatDecimal+0xd0>
		 if (Length>DecimalCfg)CommaPos=Length-DecimalCfg;
		 else CommaPos=1;


		 if (Length<=DecimalCfg){// 123 -> 0123
			 AddZeroLead(strRawData,(DecimalCfg+1));
    6b6c:	f3 94       	inc	r15
    6b6e:	c8 01       	movw	r24, r16
    6b70:	6f 2d       	mov	r22, r15
    6b72:	0e 94 5d 28 	call	0x50ba	; 0x50ba <AddZeroLead>
			 //AddZeroLead(strRawData,(DecimalCfg+2));
			 Length=strlen(strRawData);
    6b76:	f8 01       	movw	r30, r16
    6b78:	01 90       	ld	r0, Z+
    6b7a:	00 20       	and	r0, r0
    6b7c:	e9 f7       	brne	.-6      	; 0x6b78 <FormatDecimal+0xbe>
    6b7e:	31 97       	sbiw	r30, 0x01	; 1
    6b80:	3e 2f       	mov	r19, r30
    6b82:	30 1b       	sub	r19, r16
    6b84:	ff 24       	eor	r15, r15
    6b86:	f3 94       	inc	r15
    6b88:	bc cf       	rjmp	.-136    	; 0x6b02 <FormatDecimal+0x48>
		 for(i=0;i<Length;i++){
			 strRawData[i]=strDecimalFormated[i];
		 }strRawData[Length]=0;
	 }
          //uart_print(1,1,strRawData); 
}
    6b8a:	64 96       	adiw	r28, 0x14	; 20
    6b8c:	0f b6       	in	r0, 0x3f	; 63
    6b8e:	f8 94       	cli
    6b90:	de bf       	out	0x3e, r29	; 62
    6b92:	0f be       	out	0x3f, r0	; 63
    6b94:	cd bf       	out	0x3d, r28	; 61
    6b96:	cf 91       	pop	r28
    6b98:	df 91       	pop	r29
    6b9a:	1f 91       	pop	r17
    6b9c:	0f 91       	pop	r16
    6b9e:	ff 90       	pop	r15
    6ba0:	ef 90       	pop	r14
    6ba2:	08 95       	ret

00006ba4 <NormalizeDecimal>:
	 Result=(SigmaSum%255);
	 if (Result==0)Result=255;
   return Result;
}

void NormalizeDecimal(char CurrentDecimal, char NewDecimal, char *Result){// 01234567,89
    6ba4:	68 2f       	mov	r22, r24
    6ba6:	ca 01       	movw	r24, r20
		 StrPosCopy(Result,SResult,DeltaDec,Length-DeltaDec);
		 	           
	 
     }
*/
     FormatDecimal(Result,CurrentDecimal);
    6ba8:	0e 94 5d 35 	call	0x6aba	; 0x6aba <FormatDecimal>
}
    6bac:	08 95       	ret

00006bae <FormatTotalizerVolume>:
     char DecCfg;
     DecCfg=eeprom_read_byte(&DefDecimalTotalMoney);
	 FormatDecimal(strRawMoney,DecCfg);
}

void FormatTotalizerVolume(char *strRawVolume){//96->0,96 
    6bae:	0f 93       	push	r16
    6bb0:	1f 93       	push	r17
    6bb2:	8c 01       	movw	r16, r24
     char DecCfg;
     DecCfg=eeprom_read_byte(&DefDecimalTotalVolume);
    6bb4:	8c e3       	ldi	r24, 0x3C	; 60
    6bb6:	90 e0       	ldi	r25, 0x00	; 0
    6bb8:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
    6bbc:	68 2f       	mov	r22, r24
	 FormatDecimal(strRawVolume,DecCfg);
    6bbe:	c8 01       	movw	r24, r16
    6bc0:	0e 94 5d 35 	call	0x6aba	; 0x6aba <FormatDecimal>
}
    6bc4:	1f 91       	pop	r17
    6bc6:	0f 91       	pop	r16
    6bc8:	08 95       	ret

00006bca <FormatTotalizerMoney>:
     char DecCfg;
     DecCfg=eeprom_read_byte(&DefDecimalVolume);
	 FormatDecimal(strRawVolume,DecCfg);
}

void FormatTotalizerMoney(char *strRawMoney){
    6bca:	0f 93       	push	r16
    6bcc:	1f 93       	push	r17
    6bce:	8c 01       	movw	r16, r24
     char DecCfg;
     DecCfg=eeprom_read_byte(&DefDecimalTotalMoney);
    6bd0:	8d e3       	ldi	r24, 0x3D	; 61
    6bd2:	90 e0       	ldi	r25, 0x00	; 0
    6bd4:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
    6bd8:	68 2f       	mov	r22, r24
	 FormatDecimal(strRawMoney,DecCfg);
    6bda:	c8 01       	movw	r24, r16
    6bdc:	0e 94 5d 35 	call	0x6aba	; 0x6aba <FormatDecimal>
}
    6be0:	1f 91       	pop	r17
    6be2:	0f 91       	pop	r16
    6be4:	08 95       	ret

00006be6 <FormatVolume>:
     char DecCfg;
     DecCfg=eeprom_read_byte(&DefDecimalMoney);
	 FormatDecimal(strRawMoney,DecCfg);
}

void FormatVolume(char *strRawVolume){//96->0,96 
    6be6:	0f 93       	push	r16
    6be8:	1f 93       	push	r17
    6bea:	8c 01       	movw	r16, r24
     char DecCfg;
     DecCfg=eeprom_read_byte(&DefDecimalVolume);
    6bec:	8a e3       	ldi	r24, 0x3A	; 58
    6bee:	90 e0       	ldi	r25, 0x00	; 0
    6bf0:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
    6bf4:	68 2f       	mov	r22, r24
	 FormatDecimal(strRawVolume,DecCfg);
    6bf6:	c8 01       	movw	r24, r16
    6bf8:	0e 94 5d 35 	call	0x6aba	; 0x6aba <FormatDecimal>
}
    6bfc:	1f 91       	pop	r17
    6bfe:	0f 91       	pop	r16
    6c00:	08 95       	ret

00006c02 <FormatMoney>:
     char DecCfg;
     DecCfg=eeprom_read_byte(&DefDecimalPrice);
	 FormatDecimal(strRawPrice,DecCfg);
}

void FormatMoney(char *strRawMoney){
    6c02:	0f 93       	push	r16
    6c04:	1f 93       	push	r17
    6c06:	8c 01       	movw	r16, r24
     char DecCfg;
     DecCfg=eeprom_read_byte(&DefDecimalMoney);
    6c08:	8b e3       	ldi	r24, 0x3B	; 59
    6c0a:	90 e0       	ldi	r25, 0x00	; 0
    6c0c:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
    6c10:	68 2f       	mov	r22, r24
	 FormatDecimal(strRawMoney,DecCfg);
    6c12:	c8 01       	movw	r24, r16
    6c14:	0e 94 5d 35 	call	0x6aba	; 0x6aba <FormatDecimal>
}
    6c18:	1f 91       	pop	r17
    6c1a:	0f 91       	pop	r16
    6c1c:	08 95       	ret

00006c1e <FormatPrice>:
		 }strRawData[Length]=0;
	 }
          //uart_print(1,1,strRawData); 
}

void FormatPrice(char *strRawPrice){
    6c1e:	0f 93       	push	r16
    6c20:	1f 93       	push	r17
    6c22:	8c 01       	movw	r16, r24
     char DecCfg;
     DecCfg=eeprom_read_byte(&DefDecimalPrice);
    6c24:	89 e3       	ldi	r24, 0x39	; 57
    6c26:	90 e0       	ldi	r25, 0x00	; 0
    6c28:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
    6c2c:	68 2f       	mov	r22, r24
	 FormatDecimal(strRawPrice,DecCfg);
    6c2e:	c8 01       	movw	r24, r16
    6c30:	0e 94 5d 35 	call	0x6aba	; 0x6aba <FormatDecimal>
}
    6c34:	1f 91       	pop	r17
    6c36:	0f 91       	pop	r16
    6c38:	08 95       	ret

00006c3a <systemGenerateReport>:
	 }
}

//Spooling HFCS 0000 : Header, Footer, Copy , Scrool [Copy:16x max]
//			cmdPrint=procMessage81();
void systemGenerateReport(){
    6c3a:	2f 92       	push	r2
    6c3c:	3f 92       	push	r3
    6c3e:	4f 92       	push	r4
    6c40:	5f 92       	push	r5
    6c42:	6f 92       	push	r6
    6c44:	7f 92       	push	r7
    6c46:	8f 92       	push	r8
    6c48:	9f 92       	push	r9
    6c4a:	af 92       	push	r10
    6c4c:	bf 92       	push	r11
    6c4e:	cf 92       	push	r12
    6c50:	df 92       	push	r13
    6c52:	ef 92       	push	r14
    6c54:	ff 92       	push	r15
    6c56:	0f 93       	push	r16
    6c58:	1f 93       	push	r17
    6c5a:	df 93       	push	r29
    6c5c:	cf 93       	push	r28
    6c5e:	cd b7       	in	r28, 0x3d	; 61
    6c60:	de b7       	in	r29, 0x3e	; 62
    6c62:	cb 5f       	subi	r28, 0xFB	; 251
    6c64:	d0 40       	sbci	r29, 0x00	; 0
    6c66:	0f b6       	in	r0, 0x3f	; 63
    6c68:	f8 94       	cli
    6c6a:	de bf       	out	0x3e, r29	; 62
    6c6c:	0f be       	out	0x3f, r0	; 63
    6c6e:	cd bf       	out	0x3d, r28	; 61
	   char strTabSpace[20],strTabSpace2[20];
	   char iTotal;//,PadLength;
	   char sPrice[10],strProductPrice[20];
	   char FIPAddr;

     switch(stGenerateReport){
    6c70:	10 91 e8 01 	lds	r17, 0x01E8
    6c74:	16 30       	cpi	r17, 0x06	; 6
    6c76:	09 f4       	brne	.+2      	; 0x6c7a <systemGenerateReport+0x40>
    6c78:	4d c2       	rjmp	.+1178   	; 0x7114 <systemGenerateReport+0x4da>
    6c7a:	17 30       	cpi	r17, 0x07	; 7
    6c7c:	98 f4       	brcc	.+38     	; 0x6ca4 <systemGenerateReport+0x6a>
    6c7e:	12 30       	cpi	r17, 0x02	; 2
    6c80:	09 f4       	brne	.+2      	; 0x6c84 <systemGenerateReport+0x4a>
    6c82:	a3 c0       	rjmp	.+326    	; 0x6dca <systemGenerateReport+0x190>
    6c84:	13 30       	cpi	r17, 0x03	; 3
    6c86:	38 f4       	brcc	.+14     	; 0x6c96 <systemGenerateReport+0x5c>
    6c88:	11 23       	and	r17, r17
    6c8a:	31 f1       	breq	.+76     	; 0x6cd8 <systemGenerateReport+0x9e>
    6c8c:	11 30       	cpi	r17, 0x01	; 1
    6c8e:	11 f0       	breq	.+4      	; 0x6c94 <systemGenerateReport+0x5a>
    6c90:	0c 94 54 40 	jmp	0x80a8	; 0x80a8 <systemGenerateReport+0x146e>
    6c94:	2d c0       	rjmp	.+90     	; 0x6cf0 <systemGenerateReport+0xb6>
    6c96:	14 30       	cpi	r17, 0x04	; 4
    6c98:	09 f4       	brne	.+2      	; 0x6c9c <systemGenerateReport+0x62>
    6c9a:	bb c1       	rjmp	.+886    	; 0x7012 <systemGenerateReport+0x3d8>
    6c9c:	15 30       	cpi	r17, 0x05	; 5
    6c9e:	08 f0       	brcs	.+2      	; 0x6ca2 <systemGenerateReport+0x68>
    6ca0:	9a c6       	rjmp	.+3380   	; 0x79d6 <systemGenerateReport+0xd9c>
    6ca2:	ae c1       	rjmp	.+860    	; 0x7000 <systemGenerateReport+0x3c6>
    6ca4:	19 30       	cpi	r17, 0x09	; 9
    6ca6:	09 f4       	brne	.+2      	; 0x6caa <systemGenerateReport+0x70>
    6ca8:	96 c6       	rjmp	.+3372   	; 0x79d6 <systemGenerateReport+0xd9c>
    6caa:	1a 30       	cpi	r17, 0x0A	; 10
    6cac:	40 f4       	brcc	.+16     	; 0x6cbe <systemGenerateReport+0x84>
    6cae:	17 30       	cpi	r17, 0x07	; 7
    6cb0:	09 f4       	brne	.+2      	; 0x6cb4 <systemGenerateReport+0x7a>
    6cb2:	92 c2       	rjmp	.+1316   	; 0x71d8 <systemGenerateReport+0x59e>
    6cb4:	18 30       	cpi	r17, 0x08	; 8
    6cb6:	11 f0       	breq	.+4      	; 0x6cbc <systemGenerateReport+0x82>
    6cb8:	0c 94 54 40 	jmp	0x80a8	; 0x80a8 <systemGenerateReport+0x146e>
    6cbc:	9a c2       	rjmp	.+1332   	; 0x71f2 <systemGenerateReport+0x5b8>
    6cbe:	1b 30       	cpi	r17, 0x0B	; 11
    6cc0:	11 f4       	brne	.+4      	; 0x6cc6 <systemGenerateReport+0x8c>
    6cc2:	0c 94 47 40 	jmp	0x808e	; 0x808e <systemGenerateReport+0x1454>
    6cc6:	1b 30       	cpi	r17, 0x0B	; 11
    6cc8:	08 f4       	brcc	.+2      	; 0x6ccc <systemGenerateReport+0x92>
    6cca:	8c c6       	rjmp	.+3352   	; 0x79e4 <systemGenerateReport+0xdaa>
    6ccc:	1c 30       	cpi	r17, 0x0C	; 12
    6cce:	11 f0       	breq	.+4      	; 0x6cd4 <systemGenerateReport+0x9a>
    6cd0:	0c 94 54 40 	jmp	0x80a8	; 0x80a8 <systemGenerateReport+0x146e>
    6cd4:	0c 94 4f 40 	jmp	0x809e	; 0x809e <systemGenerateReport+0x1464>
	 case grScanAction://Wait for Complete incoming Totalizer data	      
		  if (IsGenerateReport==True){
    6cd8:	80 91 86 01 	lds	r24, 0x0186
    6cdc:	81 30       	cpi	r24, 0x01	; 1
    6cde:	11 f0       	breq	.+4      	; 0x6ce4 <systemGenerateReport+0xaa>
    6ce0:	0c 94 54 40 	jmp	0x80a8	; 0x80a8 <systemGenerateReport+0x146e>
		      IsGenerateReport=False;
    6ce4:	10 92 86 01 	sts	0x0186, r1
			  IsFinishPrintingTotalizer=False;
    6ce8:	10 92 87 01 	sts	0x0187, r1
    6cec:	0c 94 4c 40 	jmp	0x8098	; 0x8098 <systemGenerateReport+0x145e>
			  stGenerateReport=grInitData;
		  }
	      break;
	 case grInitData:
	      xPump=1;
    6cf0:	10 93 e7 01 	sts	0x01E7, r17
		  xNozzle=1;
    6cf4:	10 93 e6 01 	sts	0x01E6, r17
		  RepPos=0;
    6cf8:	10 92 d7 01 	sts	0x01D7, r1
    6cfc:	10 92 d6 01 	sts	0x01D6, r1
    6d00:	ec ee       	ldi	r30, 0xEC	; 236
    6d02:	f3 e0       	ldi	r31, 0x03	; 3
}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
	     strMemory[i]=data;
    6d04:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    6d06:	85 e0       	ldi	r24, 0x05	; 5
    6d08:	ed 37       	cpi	r30, 0x7D	; 125
    6d0a:	f8 07       	cpc	r31, r24
    6d0c:	d9 f7       	brne	.-10     	; 0x6d04 <systemGenerateReport+0xca>
    6d0e:	fe 01       	movw	r30, r28
    6d10:	eb 55       	subi	r30, 0x5B	; 91
    6d12:	ff 4f       	sbci	r31, 0xFF	; 255
	     strMemory[i]=data;
    6d14:	ce 01       	movw	r24, r28
    6d16:	8b 50       	subi	r24, 0x0B	; 11
    6d18:	9f 4f       	sbci	r25, 0xFF	; 255
    6d1a:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    6d1c:	e8 17       	cp	r30, r24
    6d1e:	f9 07       	cpc	r31, r25
    6d20:	e1 f7       	brne	.-8      	; 0x6d1a <systemGenerateReport+0xe0>
    6d22:	fe 01       	movw	r30, r28
    6d24:	f7 96       	adiw	r30, 0x37	; 55
	     strMemory[i]=data;
    6d26:	cf 01       	movw	r24, r30
    6d28:	0f 96       	adiw	r24, 0x0f	; 15
    6d2a:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    6d2c:	e8 17       	cp	r30, r24
    6d2e:	f9 07       	cpc	r31, r25
    6d30:	e1 f7       	brne	.-8      	; 0x6d2a <systemGenerateReport+0xf0>
    6d32:	fe 01       	movw	r30, r28
    6d34:	ea 5b       	subi	r30, 0xBA	; 186
    6d36:	ff 4f       	sbci	r31, 0xFF	; 255
	     strMemory[i]=data;
    6d38:	cf 01       	movw	r24, r30
    6d3a:	0f 96       	adiw	r24, 0x0f	; 15
    6d3c:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    6d3e:	e8 17       	cp	r30, r24
    6d40:	f9 07       	cpc	r31, r25
    6d42:	e1 f7       	brne	.-8      	; 0x6d3c <systemGenerateReport+0x102>
    6d44:	e7 ef       	ldi	r30, 0xF7	; 247
    6d46:	f7 e0       	ldi	r31, 0x07	; 7
	     strMemory[i]=data;
    6d48:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    6d4a:	98 e0       	ldi	r25, 0x08	; 8
    6d4c:	eb 30       	cpi	r30, 0x0B	; 11
    6d4e:	f9 07       	cpc	r31, r25
    6d50:	d9 f7       	brne	.-10     	; 0x6d48 <systemGenerateReport+0x10e>
    6d52:	e8 ea       	ldi	r30, 0xA8	; 168
    6d54:	f8 e0       	ldi	r31, 0x08	; 8
	     strMemory[i]=data;
    6d56:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    6d58:	a8 e0       	ldi	r26, 0x08	; 8
    6d5a:	ec 3b       	cpi	r30, 0xBC	; 188
    6d5c:	fa 07       	cpc	r31, r26
    6d5e:	d9 f7       	brne	.-10     	; 0x6d56 <systemGenerateReport+0x11c>
    6d60:	ed e2       	ldi	r30, 0x2D	; 45
    6d62:	fc e0       	ldi	r31, 0x0C	; 12
	     strMemory[i]=data;
    6d64:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    6d66:	bc e0       	ldi	r27, 0x0C	; 12
    6d68:	ec 33       	cpi	r30, 0x3C	; 60
    6d6a:	fb 07       	cpc	r31, r27
    6d6c:	d9 f7       	brne	.-10     	; 0x6d64 <systemGenerateReport+0x12a>
    6d6e:	e5 e0       	ldi	r30, 0x05	; 5
    6d70:	f9 e0       	ldi	r31, 0x09	; 9
	     strMemory[i]=data;
    6d72:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    6d74:	89 e0       	ldi	r24, 0x09	; 9
    6d76:	e4 31       	cpi	r30, 0x14	; 20
    6d78:	f8 07       	cpc	r31, r24
    6d7a:	d9 f7       	brne	.-10     	; 0x6d72 <systemGenerateReport+0x138>
		  FillChar(strTotalMoney,sizeof(strTotalMoney),0);


		  FillChar(strDeltaMoney,sizeof(strDeltaMoney),0);
		  FillChar(strDeltaVolume,sizeof(strDeltaVolume),0);
		  sprintf_P(strShift,PSTR("%d"),eeprom_read_byte(&DefShift));
    6d7c:	8f e3       	ldi	r24, 0x3F	; 63
    6d7e:	91 e0       	ldi	r25, 0x01	; 1
    6d80:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
    6d84:	00 d0       	rcall	.+0      	; 0x6d86 <systemGenerateReport+0x14c>
    6d86:	00 d0       	rcall	.+0      	; 0x6d88 <systemGenerateReport+0x14e>
    6d88:	00 d0       	rcall	.+0      	; 0x6d8a <systemGenerateReport+0x150>
    6d8a:	ed b7       	in	r30, 0x3d	; 61
    6d8c:	fe b7       	in	r31, 0x3e	; 62
    6d8e:	31 96       	adiw	r30, 0x01	; 1
    6d90:	28 e6       	ldi	r18, 0x68	; 104
    6d92:	3c e0       	ldi	r19, 0x0C	; 12
    6d94:	ad b7       	in	r26, 0x3d	; 61
    6d96:	be b7       	in	r27, 0x3e	; 62
    6d98:	12 96       	adiw	r26, 0x02	; 2
    6d9a:	3c 93       	st	X, r19
    6d9c:	2e 93       	st	-X, r18
    6d9e:	11 97       	sbiw	r26, 0x01	; 1
    6da0:	25 e0       	ldi	r18, 0x05	; 5
    6da2:	37 e0       	ldi	r19, 0x07	; 7
    6da4:	33 83       	std	Z+3, r19	; 0x03
    6da6:	22 83       	std	Z+2, r18	; 0x02
    6da8:	84 83       	std	Z+4, r24	; 0x04
    6daa:	15 82       	std	Z+5, r1	; 0x05
    6dac:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>

          stGenerateReport=grCreateReportHeader;
    6db0:	82 e0       	ldi	r24, 0x02	; 2
    6db2:	80 93 e8 01 	sts	0x01E8, r24
    6db6:	ed b7       	in	r30, 0x3d	; 61
    6db8:	fe b7       	in	r31, 0x3e	; 62
    6dba:	36 96       	adiw	r30, 0x06	; 6
    6dbc:	0f b6       	in	r0, 0x3f	; 63
    6dbe:	f8 94       	cli
    6dc0:	fe bf       	out	0x3e, r31	; 62
    6dc2:	0f be       	out	0x3f, r0	; 63
    6dc4:	ed bf       	out	0x3d, r30	; 61
    6dc6:	0c 94 54 40 	jmp	0x80a8	; 0x80a8 <systemGenerateReport+0x146e>
	      break;
	 case grCreateReportHeader://Border: btTopLeft,btTopCenter,btTopRight,btMiddleLeft,btMiddleCenter,btMiddleRight,btBottomLeft,btBottomCenter,btBottomRight,btVertical,btHorizontal
		  eeprom_read_block((void*) &LastShiftDateTime, (const void*) &DefLastShiftDateTime, sizeof(DefLastShiftDateTime));
    6dca:	45 e5       	ldi	r20, 0x55	; 85
    6dcc:	e4 2e       	mov	r14, r20
    6dce:	f1 2c       	mov	r15, r1
    6dd0:	ec 0e       	add	r14, r28
    6dd2:	fd 1e       	adc	r15, r29
    6dd4:	c7 01       	movw	r24, r14
    6dd6:	63 e4       	ldi	r22, 0x43	; 67
    6dd8:	78 e0       	ldi	r23, 0x08	; 8
    6dda:	44 e1       	ldi	r20, 0x14	; 20
    6ddc:	50 e0       	ldi	r21, 0x00	; 0
    6dde:	0e 94 b9 ac 	call	0x15972	; 0x15972 <__eerd_block_m128>
          
		  InserBorder(btTopLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btTopRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);
    6de2:	81 e0       	ldi	r24, 0x01	; 1
    6de4:	6c ee       	ldi	r22, 0xEC	; 236
    6de6:	73 e0       	ldi	r23, 0x03	; 3
    6de8:	41 e0       	ldi	r20, 0x01	; 1
    6dea:	26 ed       	ldi	r18, 0xD6	; 214
    6dec:	31 e0       	ldi	r19, 0x01	; 1
    6dee:	0e 94 81 1a 	call	0x3502	; 0x3502 <InserBorder>
    6df2:	8b e0       	ldi	r24, 0x0B	; 11
    6df4:	6c ee       	ldi	r22, 0xEC	; 236
    6df6:	73 e0       	ldi	r23, 0x03	; 3
    6df8:	4a e2       	ldi	r20, 0x2A	; 42
    6dfa:	26 ed       	ldi	r18, 0xD6	; 214
    6dfc:	31 e0       	ldi	r19, 0x01	; 1
    6dfe:	0e 94 81 1a 	call	0x3502	; 0x3502 <InserBorder>
    6e02:	83 e0       	ldi	r24, 0x03	; 3
    6e04:	6c ee       	ldi	r22, 0xEC	; 236
    6e06:	73 e0       	ldi	r23, 0x03	; 3
    6e08:	41 e0       	ldi	r20, 0x01	; 1
    6e0a:	26 ed       	ldi	r18, 0xD6	; 214
    6e0c:	31 e0       	ldi	r19, 0x01	; 1
    6e0e:	0e 94 81 1a 	call	0x3502	; 0x3502 <InserBorder>
    6e12:	8c e0       	ldi	r24, 0x0C	; 12
    6e14:	6c ee       	ldi	r22, 0xEC	; 236
    6e16:	73 e0       	ldi	r23, 0x03	; 3
    6e18:	41 e0       	ldi	r20, 0x01	; 1
    6e1a:	26 ed       	ldi	r18, 0xD6	; 214
    6e1c:	31 e0       	ldi	r19, 0x01	; 1
    6e1e:	0e 94 81 1a 	call	0x3502	; 0x3502 <InserBorder>
	      sprintf_P(strReport,PSTR("        Laporan Tutup Shift: %s      "),strShift);CreateReport(strReport,PrintBuffer,&RepPos);
    6e22:	00 d0       	rcall	.+0      	; 0x6e24 <systemGenerateReport+0x1ea>
    6e24:	00 d0       	rcall	.+0      	; 0x6e26 <systemGenerateReport+0x1ec>
    6e26:	00 d0       	rcall	.+0      	; 0x6e28 <systemGenerateReport+0x1ee>
    6e28:	ed b7       	in	r30, 0x3d	; 61
    6e2a:	fe b7       	in	r31, 0x3e	; 62
    6e2c:	31 96       	adiw	r30, 0x01	; 1
    6e2e:	8e 01       	movw	r16, r28
    6e30:	0b 55       	subi	r16, 0x5B	; 91
    6e32:	1f 4f       	sbci	r17, 0xFF	; 255
    6e34:	ad b7       	in	r26, 0x3d	; 61
    6e36:	be b7       	in	r27, 0x3e	; 62
    6e38:	12 96       	adiw	r26, 0x02	; 2
    6e3a:	1c 93       	st	X, r17
    6e3c:	0e 93       	st	-X, r16
    6e3e:	11 97       	sbiw	r26, 0x01	; 1
    6e40:	8f ed       	ldi	r24, 0xDF	; 223
    6e42:	96 e0       	ldi	r25, 0x06	; 6
    6e44:	93 83       	std	Z+3, r25	; 0x03
    6e46:	82 83       	std	Z+2, r24	; 0x02
    6e48:	88 e6       	ldi	r24, 0x68	; 104
    6e4a:	9c e0       	ldi	r25, 0x0C	; 12
    6e4c:	95 83       	std	Z+5, r25	; 0x05
    6e4e:	84 83       	std	Z+4, r24	; 0x04
    6e50:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
    6e54:	ed b7       	in	r30, 0x3d	; 61
    6e56:	fe b7       	in	r31, 0x3e	; 62
    6e58:	36 96       	adiw	r30, 0x06	; 6
    6e5a:	0f b6       	in	r0, 0x3f	; 63
    6e5c:	f8 94       	cli
    6e5e:	fe bf       	out	0x3e, r31	; 62
    6e60:	0f be       	out	0x3f, r0	; 63
    6e62:	ed bf       	out	0x3d, r30	; 61
    6e64:	c8 01       	movw	r24, r16
    6e66:	6c ee       	ldi	r22, 0xEC	; 236
    6e68:	73 e0       	ldi	r23, 0x03	; 3
    6e6a:	46 ed       	ldi	r20, 0xD6	; 214
    6e6c:	51 e0       	ldi	r21, 0x01	; 1
    6e6e:	0e 94 b5 23 	call	0x476a	; 0x476a <CreateReport>
		  InserBorder(btMiddleLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btMiddleRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);     
    6e72:	84 e0       	ldi	r24, 0x04	; 4
    6e74:	6c ee       	ldi	r22, 0xEC	; 236
    6e76:	73 e0       	ldi	r23, 0x03	; 3
    6e78:	41 e0       	ldi	r20, 0x01	; 1
    6e7a:	26 ed       	ldi	r18, 0xD6	; 214
    6e7c:	31 e0       	ldi	r19, 0x01	; 1
    6e7e:	0e 94 81 1a 	call	0x3502	; 0x3502 <InserBorder>
    6e82:	8b e0       	ldi	r24, 0x0B	; 11
    6e84:	6c ee       	ldi	r22, 0xEC	; 236
    6e86:	73 e0       	ldi	r23, 0x03	; 3
    6e88:	4a e2       	ldi	r20, 0x2A	; 42
    6e8a:	26 ed       	ldi	r18, 0xD6	; 214
    6e8c:	31 e0       	ldi	r19, 0x01	; 1
    6e8e:	0e 94 81 1a 	call	0x3502	; 0x3502 <InserBorder>
    6e92:	86 e0       	ldi	r24, 0x06	; 6
    6e94:	6c ee       	ldi	r22, 0xEC	; 236
    6e96:	73 e0       	ldi	r23, 0x03	; 3
    6e98:	41 e0       	ldi	r20, 0x01	; 1
    6e9a:	26 ed       	ldi	r18, 0xD6	; 214
    6e9c:	31 e0       	ldi	r19, 0x01	; 1
    6e9e:	0e 94 81 1a 	call	0x3502	; 0x3502 <InserBorder>
    6ea2:	8c e0       	ldi	r24, 0x0C	; 12
    6ea4:	6c ee       	ldi	r22, 0xEC	; 236
    6ea6:	73 e0       	ldi	r23, 0x03	; 3
    6ea8:	41 e0       	ldi	r20, 0x01	; 1
    6eaa:	26 ed       	ldi	r18, 0xD6	; 214
    6eac:	31 e0       	ldi	r19, 0x01	; 1
    6eae:	0e 94 81 1a 	call	0x3502	; 0x3502 <InserBorder>
	      sprintf_P(strReport,PSTR("Terminal ID : %.2d                   "),eeprom_read_byte(&DefIFT_ID));CreateReport(strReport,PrintBuffer,&RepPos);
    6eb2:	80 e0       	ldi	r24, 0x00	; 0
    6eb4:	90 e0       	ldi	r25, 0x00	; 0
    6eb6:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
    6eba:	00 d0       	rcall	.+0      	; 0x6ebc <systemGenerateReport+0x282>
    6ebc:	00 d0       	rcall	.+0      	; 0x6ebe <systemGenerateReport+0x284>
    6ebe:	00 d0       	rcall	.+0      	; 0x6ec0 <systemGenerateReport+0x286>
    6ec0:	ed b7       	in	r30, 0x3d	; 61
    6ec2:	fe b7       	in	r31, 0x3e	; 62
    6ec4:	31 96       	adiw	r30, 0x01	; 1
    6ec6:	ad b7       	in	r26, 0x3d	; 61
    6ec8:	be b7       	in	r27, 0x3e	; 62
    6eca:	12 96       	adiw	r26, 0x02	; 2
    6ecc:	1c 93       	st	X, r17
    6ece:	0e 93       	st	-X, r16
    6ed0:	11 97       	sbiw	r26, 0x01	; 1
    6ed2:	29 eb       	ldi	r18, 0xB9	; 185
    6ed4:	36 e0       	ldi	r19, 0x06	; 6
    6ed6:	33 83       	std	Z+3, r19	; 0x03
    6ed8:	22 83       	std	Z+2, r18	; 0x02
    6eda:	84 83       	std	Z+4, r24	; 0x04
    6edc:	15 82       	std	Z+5, r1	; 0x05
    6ede:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
    6ee2:	ed b7       	in	r30, 0x3d	; 61
    6ee4:	fe b7       	in	r31, 0x3e	; 62
    6ee6:	36 96       	adiw	r30, 0x06	; 6
    6ee8:	0f b6       	in	r0, 0x3f	; 63
    6eea:	f8 94       	cli
    6eec:	fe bf       	out	0x3e, r31	; 62
    6eee:	0f be       	out	0x3f, r0	; 63
    6ef0:	ed bf       	out	0x3d, r30	; 61
    6ef2:	c8 01       	movw	r24, r16
    6ef4:	6c ee       	ldi	r22, 0xEC	; 236
    6ef6:	73 e0       	ldi	r23, 0x03	; 3
    6ef8:	46 ed       	ldi	r20, 0xD6	; 214
    6efa:	51 e0       	ldi	r21, 0x01	; 1
    6efc:	0e 94 b5 23 	call	0x476a	; 0x476a <CreateReport>
	      sprintf_P(strReport,PSTR("Awal  Shift : %s "),LastShiftDateTime);             CreateReport(strReport,PrintBuffer,&RepPos);
    6f00:	00 d0       	rcall	.+0      	; 0x6f02 <systemGenerateReport+0x2c8>
    6f02:	00 d0       	rcall	.+0      	; 0x6f04 <systemGenerateReport+0x2ca>
    6f04:	00 d0       	rcall	.+0      	; 0x6f06 <systemGenerateReport+0x2cc>
    6f06:	ed b7       	in	r30, 0x3d	; 61
    6f08:	fe b7       	in	r31, 0x3e	; 62
    6f0a:	31 96       	adiw	r30, 0x01	; 1
    6f0c:	ad b7       	in	r26, 0x3d	; 61
    6f0e:	be b7       	in	r27, 0x3e	; 62
    6f10:	12 96       	adiw	r26, 0x02	; 2
    6f12:	1c 93       	st	X, r17
    6f14:	0e 93       	st	-X, r16
    6f16:	11 97       	sbiw	r26, 0x01	; 1
    6f18:	87 ea       	ldi	r24, 0xA7	; 167
    6f1a:	96 e0       	ldi	r25, 0x06	; 6
    6f1c:	93 83       	std	Z+3, r25	; 0x03
    6f1e:	82 83       	std	Z+2, r24	; 0x02
    6f20:	f5 82       	std	Z+5, r15	; 0x05
    6f22:	e4 82       	std	Z+4, r14	; 0x04
    6f24:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
    6f28:	ed b7       	in	r30, 0x3d	; 61
    6f2a:	fe b7       	in	r31, 0x3e	; 62
    6f2c:	36 96       	adiw	r30, 0x06	; 6
    6f2e:	0f b6       	in	r0, 0x3f	; 63
    6f30:	f8 94       	cli
    6f32:	fe bf       	out	0x3e, r31	; 62
    6f34:	0f be       	out	0x3f, r0	; 63
    6f36:	ed bf       	out	0x3d, r30	; 61
    6f38:	c8 01       	movw	r24, r16
    6f3a:	6c ee       	ldi	r22, 0xEC	; 236
    6f3c:	73 e0       	ldi	r23, 0x03	; 3
    6f3e:	46 ed       	ldi	r20, 0xD6	; 214
    6f40:	51 e0       	ldi	r21, 0x01	; 1
    6f42:	0e 94 b5 23 	call	0x476a	; 0x476a <CreateReport>
	      sprintf_P(strReport,PSTR("Akhir Shift : %s "),CurrentShiftDateTime);      CreateReport(strReport,PrintBuffer,&RepPos);
    6f46:	00 d0       	rcall	.+0      	; 0x6f48 <systemGenerateReport+0x30e>
    6f48:	00 d0       	rcall	.+0      	; 0x6f4a <systemGenerateReport+0x310>
    6f4a:	00 d0       	rcall	.+0      	; 0x6f4c <systemGenerateReport+0x312>
    6f4c:	ed b7       	in	r30, 0x3d	; 61
    6f4e:	fe b7       	in	r31, 0x3e	; 62
    6f50:	31 96       	adiw	r30, 0x01	; 1
    6f52:	ad b7       	in	r26, 0x3d	; 61
    6f54:	be b7       	in	r27, 0x3e	; 62
    6f56:	12 96       	adiw	r26, 0x02	; 2
    6f58:	1c 93       	st	X, r17
    6f5a:	0e 93       	st	-X, r16
    6f5c:	11 97       	sbiw	r26, 0x01	; 1
    6f5e:	85 e9       	ldi	r24, 0x95	; 149
    6f60:	96 e0       	ldi	r25, 0x06	; 6
    6f62:	93 83       	std	Z+3, r25	; 0x03
    6f64:	82 83       	std	Z+2, r24	; 0x02
    6f66:	8e e8       	ldi	r24, 0x8E	; 142
    6f68:	97 e0       	ldi	r25, 0x07	; 7
    6f6a:	95 83       	std	Z+5, r25	; 0x05
    6f6c:	84 83       	std	Z+4, r24	; 0x04
    6f6e:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
    6f72:	ed b7       	in	r30, 0x3d	; 61
    6f74:	fe b7       	in	r31, 0x3e	; 62
    6f76:	36 96       	adiw	r30, 0x06	; 6
    6f78:	0f b6       	in	r0, 0x3f	; 63
    6f7a:	f8 94       	cli
    6f7c:	fe bf       	out	0x3e, r31	; 62
    6f7e:	0f be       	out	0x3f, r0	; 63
    6f80:	ed bf       	out	0x3d, r30	; 61
    6f82:	c8 01       	movw	r24, r16
    6f84:	6c ee       	ldi	r22, 0xEC	; 236
    6f86:	73 e0       	ldi	r23, 0x03	; 3
    6f88:	46 ed       	ldi	r20, 0xD6	; 214
    6f8a:	51 e0       	ldi	r21, 0x01	; 1
    6f8c:	0e 94 b5 23 	call	0x476a	; 0x476a <CreateReport>
	      //sprintf_P(strReport,PSTR("Transaksi   : %s "),DeltaTransaction);      CreateReport(strReport,PrintBuffer,&RepPos);
          InserBorder(btBottomLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btBottomRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);
    6f90:	87 e0       	ldi	r24, 0x07	; 7
    6f92:	6c ee       	ldi	r22, 0xEC	; 236
    6f94:	73 e0       	ldi	r23, 0x03	; 3
    6f96:	41 e0       	ldi	r20, 0x01	; 1
    6f98:	26 ed       	ldi	r18, 0xD6	; 214
    6f9a:	31 e0       	ldi	r19, 0x01	; 1
    6f9c:	0e 94 81 1a 	call	0x3502	; 0x3502 <InserBorder>
    6fa0:	8b e0       	ldi	r24, 0x0B	; 11
    6fa2:	6c ee       	ldi	r22, 0xEC	; 236
    6fa4:	73 e0       	ldi	r23, 0x03	; 3
    6fa6:	4a e2       	ldi	r20, 0x2A	; 42
    6fa8:	26 ed       	ldi	r18, 0xD6	; 214
    6faa:	31 e0       	ldi	r19, 0x01	; 1
    6fac:	0e 94 81 1a 	call	0x3502	; 0x3502 <InserBorder>
    6fb0:	89 e0       	ldi	r24, 0x09	; 9
    6fb2:	6c ee       	ldi	r22, 0xEC	; 236
    6fb4:	73 e0       	ldi	r23, 0x03	; 3
    6fb6:	41 e0       	ldi	r20, 0x01	; 1
    6fb8:	26 ed       	ldi	r18, 0xD6	; 214
    6fba:	31 e0       	ldi	r19, 0x01	; 1
    6fbc:	0e 94 81 1a 	call	0x3502	; 0x3502 <InserBorder>
    6fc0:	8c e0       	ldi	r24, 0x0C	; 12
    6fc2:	6c ee       	ldi	r22, 0xEC	; 236
    6fc4:	73 e0       	ldi	r23, 0x03	; 3
    6fc6:	41 e0       	ldi	r20, 0x01	; 1
    6fc8:	26 ed       	ldi	r18, 0xD6	; 214
    6fca:	31 e0       	ldi	r19, 0x01	; 1
    6fcc:	0e 94 81 1a 	call	0x3502	; 0x3502 <InserBorder>
		  /*
	      if (eeprom_read_byte(&DefPrintMoney)==True)sprintf_P(strReport,PSTR("PUMP-PRODUCT   VOLUME(L)    RUPIAH(RP)"));         
	      else sprintf_P(strReport,PSTR("PUMP-PRODUCT   VOLUME(L)              "));CreateReport(strReport,PrintBuffer,&RepPos);
          InserBorder(btBottomLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btBottomRight,PrintBuffer,1,&RepPos);//InserBorder(btNewLine,PrintBuffer,1,&RepPos);         		 
          */
		  ClearList(GradeList);
    6fd0:	88 ed       	ldi	r24, 0xD8	; 216
    6fd2:	91 e0       	ldi	r25, 0x01	; 1
    6fd4:	0e 94 56 24 	call	0x48ac	; 0x48ac <ClearList>
		  cmdPrint=0b10000000;//PrintHeader
    6fd8:	80 e8       	ldi	r24, 0x80	; 128
    6fda:	80 93 b5 01 	sts	0x01B5, r24
		  LengthMessage81=RepPos+1;
    6fde:	80 91 d6 01 	lds	r24, 0x01D6
    6fe2:	90 91 d7 01 	lds	r25, 0x01D7
    6fe6:	01 96       	adiw	r24, 0x01	; 1
    6fe8:	90 93 8e 01 	sts	0x018E, r25
    6fec:	80 93 8d 01 	sts	0x018D, r24
		  IsFreePrinting=True;
    6ff0:	81 e0       	ldi	r24, 0x01	; 1
    6ff2:	80 93 a8 01 	sts	0x01A8, r24
          IsBusyFreePrinting=True;
    6ff6:	80 93 b4 01 	sts	0x01B4, r24
		  		  
          stGenerateReport=grWaitPrinted1;
    6ffa:	83 e0       	ldi	r24, 0x03	; 3
    6ffc:	0c 94 4c 40 	jmp	0x8098	; 0x8098 <systemGenerateReport+0x145e>
	      break;
     case grWaitPrinted1:
          if (IsBusyFreePrinting==False)
    7000:	80 91 b4 01 	lds	r24, 0x01B4
    7004:	88 23       	and	r24, r24
    7006:	11 f0       	breq	.+4      	; 0x700c <systemGenerateReport+0x3d2>
    7008:	0c 94 54 40 	jmp	0x80a8	; 0x80a8 <systemGenerateReport+0x146e>
		      stGenerateReport=grGenerateLabel;//grGenerateReportData;//grFinishGenerateReport;
    700c:	84 e0       	ldi	r24, 0x04	; 4
    700e:	0c 94 4c 40 	jmp	0x8098	; 0x8098 <systemGenerateReport+0x145e>
	      break;
     case grGenerateLabel:
          RepPos=0;
    7012:	10 92 d7 01 	sts	0x01D7, r1
    7016:	10 92 d6 01 	sts	0x01D6, r1
          InserBorder(btTopLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btTopRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);          
    701a:	81 e0       	ldi	r24, 0x01	; 1
    701c:	6c ee       	ldi	r22, 0xEC	; 236
    701e:	73 e0       	ldi	r23, 0x03	; 3
    7020:	41 e0       	ldi	r20, 0x01	; 1
    7022:	26 ed       	ldi	r18, 0xD6	; 214
    7024:	31 e0       	ldi	r19, 0x01	; 1
    7026:	0e 94 81 1a 	call	0x3502	; 0x3502 <InserBorder>
    702a:	8b e0       	ldi	r24, 0x0B	; 11
    702c:	6c ee       	ldi	r22, 0xEC	; 236
    702e:	73 e0       	ldi	r23, 0x03	; 3
    7030:	4a e2       	ldi	r20, 0x2A	; 42
    7032:	26 ed       	ldi	r18, 0xD6	; 214
    7034:	31 e0       	ldi	r19, 0x01	; 1
    7036:	0e 94 81 1a 	call	0x3502	; 0x3502 <InserBorder>
    703a:	83 e0       	ldi	r24, 0x03	; 3
    703c:	6c ee       	ldi	r22, 0xEC	; 236
    703e:	73 e0       	ldi	r23, 0x03	; 3
    7040:	41 e0       	ldi	r20, 0x01	; 1
    7042:	26 ed       	ldi	r18, 0xD6	; 214
    7044:	31 e0       	ldi	r19, 0x01	; 1
    7046:	0e 94 81 1a 	call	0x3502	; 0x3502 <InserBorder>
    704a:	8c e0       	ldi	r24, 0x0C	; 12
    704c:	6c ee       	ldi	r22, 0xEC	; 236
    704e:	73 e0       	ldi	r23, 0x03	; 3
    7050:	41 e0       	ldi	r20, 0x01	; 1
    7052:	26 ed       	ldi	r18, 0xD6	; 214
    7054:	31 e0       	ldi	r19, 0x01	; 1
    7056:	0e 94 81 1a 	call	0x3502	; 0x3502 <InserBorder>
	      if (eeprom_read_byte(&DefPrintMoney)==True)
    705a:	81 ec       	ldi	r24, 0xC1	; 193
    705c:	93 e0       	ldi	r25, 0x03	; 3
    705e:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
    7062:	35 ea       	ldi	r19, 0xA5	; 165
    7064:	c3 2e       	mov	r12, r19
    7066:	d1 2c       	mov	r13, r1
    7068:	cc 0e       	add	r12, r28
    706a:	dd 1e       	adc	r13, r29
    706c:	81 30       	cpi	r24, 0x01	; 1
    706e:	79 f4       	brne	.+30     	; 0x708e <systemGenerateReport+0x454>
		       sprintf_P(strReport,PSTR("PUMP-PRODUCT   VOLUME(L)    RUPIAH(RP)"));         
    7070:	00 d0       	rcall	.+0      	; 0x7072 <systemGenerateReport+0x438>
    7072:	00 d0       	rcall	.+0      	; 0x7074 <systemGenerateReport+0x43a>
    7074:	ad b7       	in	r26, 0x3d	; 61
    7076:	be b7       	in	r27, 0x3e	; 62
    7078:	12 96       	adiw	r26, 0x02	; 2
    707a:	dc 92       	st	X, r13
    707c:	ce 92       	st	-X, r12
    707e:	11 97       	sbiw	r26, 0x01	; 1
    7080:	8e e6       	ldi	r24, 0x6E	; 110
    7082:	96 e0       	ldi	r25, 0x06	; 6
    7084:	14 96       	adiw	r26, 0x04	; 4
    7086:	9c 93       	st	X, r25
    7088:	8e 93       	st	-X, r24
    708a:	13 97       	sbiw	r26, 0x03	; 3
    708c:	0a c0       	rjmp	.+20     	; 0x70a2 <systemGenerateReport+0x468>
	      else sprintf_P(strReport,PSTR("PUMP-PRODUCT   VOLUME(L)              "));CreateReport(strReport,PrintBuffer,&RepPos);
    708e:	00 d0       	rcall	.+0      	; 0x7090 <systemGenerateReport+0x456>
    7090:	00 d0       	rcall	.+0      	; 0x7092 <systemGenerateReport+0x458>
    7092:	ed b7       	in	r30, 0x3d	; 61
    7094:	fe b7       	in	r31, 0x3e	; 62
    7096:	d2 82       	std	Z+2, r13	; 0x02
    7098:	c1 82       	std	Z+1, r12	; 0x01
    709a:	87 e4       	ldi	r24, 0x47	; 71
    709c:	96 e0       	ldi	r25, 0x06	; 6
    709e:	94 83       	std	Z+4, r25	; 0x04
    70a0:	83 83       	std	Z+3, r24	; 0x03
    70a2:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
    70a6:	0f 90       	pop	r0
    70a8:	0f 90       	pop	r0
    70aa:	0f 90       	pop	r0
    70ac:	0f 90       	pop	r0
    70ae:	ce 01       	movw	r24, r28
    70b0:	8b 55       	subi	r24, 0x5B	; 91
    70b2:	9f 4f       	sbci	r25, 0xFF	; 255
    70b4:	6c ee       	ldi	r22, 0xEC	; 236
    70b6:	73 e0       	ldi	r23, 0x03	; 3
    70b8:	46 ed       	ldi	r20, 0xD6	; 214
    70ba:	51 e0       	ldi	r21, 0x01	; 1
    70bc:	0e 94 b5 23 	call	0x476a	; 0x476a <CreateReport>
          InserBorder(btBottomLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btBottomRight,PrintBuffer,1,&RepPos);//InserBorder(btNewLine,PrintBuffer,1,&RepPos);         		 
    70c0:	87 e0       	ldi	r24, 0x07	; 7
    70c2:	6c ee       	ldi	r22, 0xEC	; 236
    70c4:	73 e0       	ldi	r23, 0x03	; 3
    70c6:	41 e0       	ldi	r20, 0x01	; 1
    70c8:	26 ed       	ldi	r18, 0xD6	; 214
    70ca:	31 e0       	ldi	r19, 0x01	; 1
    70cc:	0e 94 81 1a 	call	0x3502	; 0x3502 <InserBorder>
    70d0:	8b e0       	ldi	r24, 0x0B	; 11
    70d2:	6c ee       	ldi	r22, 0xEC	; 236
    70d4:	73 e0       	ldi	r23, 0x03	; 3
    70d6:	4a e2       	ldi	r20, 0x2A	; 42
    70d8:	26 ed       	ldi	r18, 0xD6	; 214
    70da:	31 e0       	ldi	r19, 0x01	; 1
    70dc:	0e 94 81 1a 	call	0x3502	; 0x3502 <InserBorder>
    70e0:	89 e0       	ldi	r24, 0x09	; 9
    70e2:	6c ee       	ldi	r22, 0xEC	; 236
    70e4:	73 e0       	ldi	r23, 0x03	; 3
    70e6:	41 e0       	ldi	r20, 0x01	; 1
    70e8:	26 ed       	ldi	r18, 0xD6	; 214
    70ea:	31 e0       	ldi	r19, 0x01	; 1
    70ec:	0e 94 81 1a 	call	0x3502	; 0x3502 <InserBorder>
          
		  cmdPrint=0b00000000;
    70f0:	10 92 b5 01 	sts	0x01B5, r1
		  LengthMessage81=RepPos+1;
    70f4:	80 91 d6 01 	lds	r24, 0x01D6
    70f8:	90 91 d7 01 	lds	r25, 0x01D7
    70fc:	01 96       	adiw	r24, 0x01	; 1
    70fe:	90 93 8e 01 	sts	0x018E, r25
    7102:	80 93 8d 01 	sts	0x018D, r24

		  IsFreePrinting=True;
    7106:	81 e0       	ldi	r24, 0x01	; 1
    7108:	80 93 a8 01 	sts	0x01A8, r24
	      IsBusyFreePrinting=True;
    710c:	80 93 b4 01 	sts	0x01B4, r24

		  stGenerateReport=grWaitLabelPrinted;
    7110:	85 e0       	ldi	r24, 0x05	; 5
    7112:	c2 c7       	rjmp	.+3972   	; 0x8098 <systemGenerateReport+0x145e>
          if (IsBusyFreePrinting==False)
		      stGenerateReport=grGenerateReportData;//grFinishGenerateReport;
	      break;
     case grGenerateReportData:
	      //Generate: PumpNum, Nozzle, Product
	      if ((xPump>=1)&&(xPump<=8)){
    7114:	80 91 e7 01 	lds	r24, 0x01E7
    7118:	81 50       	subi	r24, 0x01	; 1
    711a:	88 30       	cpi	r24, 0x08	; 8
    711c:	08 f0       	brcs	.+2      	; 0x7120 <systemGenerateReport+0x4e6>
    711e:	c4 c7       	rjmp	.+3976   	; 0x80a8 <systemGenerateReport+0x146e>
		      eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap, 8);
    7120:	ce 01       	movw	r24, r28
    7122:	07 96       	adiw	r24, 0x07	; 7
    7124:	65 e4       	ldi	r22, 0x45	; 69
    7126:	70 e0       	ldi	r23, 0x00	; 0
    7128:	48 e0       	ldi	r20, 0x08	; 8
    712a:	50 e0       	ldi	r21, 0x00	; 0
    712c:	0e 94 b9 ac 	call	0x15972	; 0x15972 <__eerd_block_m128>
			  PumpNum=PPumpID[xPump-1];
    7130:	90 91 e7 01 	lds	r25, 0x01E7
    7134:	fe 01       	movw	r30, r28
    7136:	e9 0f       	add	r30, r25
    7138:	f1 1d       	adc	r31, r1
    713a:	86 81       	ldd	r24, Z+6	; 0x06
    713c:	80 93 e4 01 	sts	0x01E4, r24
			  if (PumpNum>0){
    7140:	88 23       	and	r24, r24
    7142:	09 f4       	brne	.+2      	; 0x7146 <systemGenerateReport+0x50c>
    7144:	47 c0       	rjmp	.+142    	; 0x71d4 <systemGenerateReport+0x59a>
				  eeprom_read_block((void*) &PProductID, (const void*) &DefNozzleMap[xPump-1], 6);
    7146:	91 9f       	mul	r25, r17
    7148:	b0 01       	movw	r22, r0
    714a:	11 24       	eor	r1, r1
    714c:	61 5b       	subi	r22, 0xB1	; 177
    714e:	7f 4f       	sbci	r23, 0xFF	; 255
    7150:	ce 01       	movw	r24, r28
    7152:	01 96       	adiw	r24, 0x01	; 1
    7154:	46 e0       	ldi	r20, 0x06	; 6
    7156:	50 e0       	ldi	r21, 0x00	; 0
    7158:	0e 94 b9 ac 	call	0x15972	; 0x15972 <__eerd_block_m128>
				  xGrade=PProductID[xNozzle-1];
    715c:	80 91 e6 01 	lds	r24, 0x01E6
    7160:	fe 01       	movw	r30, r28
    7162:	e8 0f       	add	r30, r24
    7164:	f1 1d       	adc	r31, r1
    7166:	80 81       	ld	r24, Z
    7168:	80 93 e5 01 	sts	0x01E5, r24
    716c:	2e e5       	ldi	r18, 0x5E	; 94
    716e:	a2 2e       	mov	r10, r18
    7170:	27 e0       	ldi	r18, 0x07	; 7
    7172:	b2 2e       	mov	r11, r18

				  if (xGrade>0){
    7174:	88 23       	and	r24, r24
    7176:	91 f0       	breq	.+36     	; 0x719c <systemGenerateReport+0x562>
				      GetProductName(xGrade,strProduct);
    7178:	b5 01       	movw	r22, r10
    717a:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <GetProductName>
                      GradeUsed=xGrade;
    717e:	80 91 e5 01 	lds	r24, 0x01E5
    7182:	80 93 e2 01 	sts	0x01E2, r24
					  xGrade=xNozzle;//
    7186:	80 91 e6 01 	lds	r24, 0x01E6
    718a:	80 93 e5 01 	sts	0x01E5, r24
					  PumpNozzle=xNozzle;
    718e:	80 93 e3 01 	sts	0x01E3, r24
					  xNozzle++;
    7192:	8f 5f       	subi	r24, 0xFF	; 255
    7194:	80 93 e6 01 	sts	0x01E6, r24
					  stGenerateReport=grCreateReportTotalizer;
    7198:	88 e0       	ldi	r24, 0x08	; 8
    719a:	7e c7       	rjmp	.+3836   	; 0x8098 <systemGenerateReport+0x145e>
				  }
				  else{sprintf_P(strProduct,PSTR("N/A"));			  
    719c:	00 d0       	rcall	.+0      	; 0x719e <systemGenerateReport+0x564>
    719e:	00 d0       	rcall	.+0      	; 0x71a0 <systemGenerateReport+0x566>
    71a0:	ad b7       	in	r26, 0x3d	; 61
    71a2:	be b7       	in	r27, 0x3e	; 62
    71a4:	12 96       	adiw	r26, 0x02	; 2
    71a6:	bc 92       	st	X, r11
    71a8:	ae 92       	st	-X, r10
    71aa:	11 97       	sbiw	r26, 0x01	; 1
    71ac:	83 e4       	ldi	r24, 0x43	; 67
    71ae:	96 e0       	ldi	r25, 0x06	; 6
    71b0:	14 96       	adiw	r26, 0x04	; 4
    71b2:	9c 93       	st	X, r25
    71b4:	8e 93       	st	-X, r24
    71b6:	13 97       	sbiw	r26, 0x03	; 3
    71b8:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
					   xNozzle++;
    71bc:	80 91 e6 01 	lds	r24, 0x01E6
    71c0:	8f 5f       	subi	r24, 0xFF	; 255
    71c2:	80 93 e6 01 	sts	0x01E6, r24
					   if (xNozzle>6)stGenerateReport=grNextPump;
    71c6:	0f 90       	pop	r0
    71c8:	0f 90       	pop	r0
    71ca:	0f 90       	pop	r0
    71cc:	0f 90       	pop	r0
    71ce:	87 30       	cpi	r24, 0x07	; 7
    71d0:	08 f4       	brcc	.+2      	; 0x71d4 <systemGenerateReport+0x59a>
    71d2:	6a c7       	rjmp	.+3796   	; 0x80a8 <systemGenerateReport+0x146e>
					  }
				}else stGenerateReport=grNextPump;
    71d4:	87 e0       	ldi	r24, 0x07	; 7
    71d6:	60 c7       	rjmp	.+3776   	; 0x8098 <systemGenerateReport+0x145e>
			  }
	      break;
     case grNextPump:
	      xNozzle=1;
    71d8:	81 e0       	ldi	r24, 0x01	; 1
    71da:	80 93 e6 01 	sts	0x01E6, r24
	      xPump++;
    71de:	80 91 e7 01 	lds	r24, 0x01E7
    71e2:	8f 5f       	subi	r24, 0xFF	; 255
    71e4:	80 93 e7 01 	sts	0x01E7, r24
	      if (xPump>8)stGenerateReport=grCreateReportFooter;
    71e8:	89 30       	cpi	r24, 0x09	; 9
    71ea:	08 f4       	brcc	.+2      	; 0x71ee <systemGenerateReport+0x5b4>
    71ec:	f9 c3       	rjmp	.+2034   	; 0x79e0 <systemGenerateReport+0xda6>
    71ee:	8a e0       	ldi	r24, 0x0A	; 10
    71f0:	53 c7       	rjmp	.+3750   	; 0x8098 <systemGenerateReport+0x145e>
		  else stGenerateReport=grGenerateReportData;
	      break;
     case grCreateReportTotalizer:

          RepPos=0;
    71f2:	10 92 d7 01 	sts	0x01D7, r1
    71f6:	10 92 d6 01 	sts	0x01D6, r1
    71fa:	ec ee       	ldi	r30, 0xEC	; 236
    71fc:	f3 e0       	ldi	r31, 0x03	; 3
}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
	     strMemory[i]=data;
    71fe:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    7200:	b5 e0       	ldi	r27, 0x05	; 5
    7202:	ed 37       	cpi	r30, 0x7D	; 125
    7204:	fb 07       	cpc	r31, r27
    7206:	d9 f7       	brne	.-10     	; 0x71fe <systemGenerateReport+0x5c4>
    7208:	fe 01       	movw	r30, r28
    720a:	eb 55       	subi	r30, 0x5B	; 91
    720c:	ff 4f       	sbci	r31, 0xFF	; 255
	     strMemory[i]=data;
    720e:	ce 01       	movw	r24, r28
    7210:	8b 50       	subi	r24, 0x0B	; 11
    7212:	9f 4f       	sbci	r25, 0xFF	; 255
    7214:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    7216:	e8 17       	cp	r30, r24
    7218:	f9 07       	cpc	r31, r25
    721a:	e1 f7       	brne	.-8      	; 0x7214 <systemGenerateReport+0x5da>
    721c:	ed e2       	ldi	r30, 0x2D	; 45
    721e:	fc e0       	ldi	r31, 0x0C	; 12
	     strMemory[i]=data;
    7220:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    7222:	8c e0       	ldi	r24, 0x0C	; 12
    7224:	ec 33       	cpi	r30, 0x3C	; 60
    7226:	f8 07       	cpc	r31, r24
    7228:	d9 f7       	brne	.-10     	; 0x7220 <systemGenerateReport+0x5e6>
    722a:	e5 e0       	ldi	r30, 0x05	; 5
    722c:	f9 e0       	ldi	r31, 0x09	; 9
	     strMemory[i]=data;
    722e:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    7230:	99 e0       	ldi	r25, 0x09	; 9
    7232:	e4 31       	cpi	r30, 0x14	; 20
    7234:	f9 07       	cpc	r31, r25
    7236:	d9 f7       	brne	.-10     	; 0x722e <systemGenerateReport+0x5f4>
    7238:	fe 01       	movw	r30, r28
    723a:	79 96       	adiw	r30, 0x19	; 25
	     strMemory[i]=data;
    723c:	ce 01       	movw	r24, r28
    723e:	88 96       	adiw	r24, 0x28	; 40
    7240:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    7242:	e8 17       	cp	r30, r24
    7244:	f9 07       	cpc	r31, r25
    7246:	e1 f7       	brne	.-8      	; 0x7240 <systemGenerateReport+0x606>
	     strMemory[i]=data;
    7248:	ce 01       	movw	r24, r28
    724a:	c7 96       	adiw	r24, 0x37	; 55
    724c:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    724e:	e8 17       	cp	r30, r24
    7250:	f9 07       	cpc	r31, r25
    7252:	e1 f7       	brne	.-8      	; 0x724c <systemGenerateReport+0x612>
	     strMemory[i]=data;
    7254:	cf 01       	movw	r24, r30
    7256:	0f 96       	adiw	r24, 0x0f	; 15
    7258:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    725a:	e8 17       	cp	r30, r24
    725c:	f9 07       	cpc	r31, r25
    725e:	e1 f7       	brne	.-8      	; 0x7258 <systemGenerateReport+0x61e>
    7260:	fe 01       	movw	r30, r28
    7262:	ea 5b       	subi	r30, 0xBA	; 186
    7264:	ff 4f       	sbci	r31, 0xFF	; 255
	     strMemory[i]=data;
    7266:	cf 01       	movw	r24, r30
    7268:	ee 2e       	mov	r14, r30
    726a:	d9 2e       	mov	r13, r25
    726c:	0f 96       	adiw	r24, 0x0f	; 15
    726e:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    7270:	e8 17       	cp	r30, r24
    7272:	f9 07       	cpc	r31, r25
    7274:	e1 f7       	brne	.-8      	; 0x726e <systemGenerateReport+0x634>
		  FillChar(strLastMoney,sizeof(strLastMoney),0);

		  FillChar(strCurrentVolume,sizeof(strCurrentVolume),0);
		  FillChar(strCurrentMoney,sizeof(strCurrentMoney),0);

          FIPAddr=GetFIPAddr(PumpNum); 
    7276:	80 91 e4 01 	lds	r24, 0x01E4
    727a:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <GetFIPAddr>
		  if (FIPAddr>0){
    727e:	88 23       	and	r24, r24
    7280:	49 f1       	breq	.+82     	; 0x72d4 <systemGenerateReport+0x69a>
		      FIPAddr=FIPAddr-1;		  
    7282:	f8 2e       	mov	r15, r24
    7284:	fa 94       	dec	r15
			  GetTotalizerData(TVOLUME,TOTALIZER_LAST,FIPAddr,PumpNozzle,strLastVolume);
    7286:	80 e0       	ldi	r24, 0x00	; 0
    7288:	60 e0       	ldi	r22, 0x00	; 0
    728a:	4f 2d       	mov	r20, r15
    728c:	20 91 e3 01 	lds	r18, 0x01E3
    7290:	8e 01       	movw	r16, r28
    7292:	07 5e       	subi	r16, 0xE7	; 231
    7294:	1f 4f       	sbci	r17, 0xFF	; 255
    7296:	0e 94 ac 20 	call	0x4158	; 0x4158 <GetTotalizerData>
			  GetTotalizerData(TMONEY,TOTALIZER_LAST,FIPAddr,PumpNozzle,strLastMoney);
    729a:	81 e0       	ldi	r24, 0x01	; 1
    729c:	60 e0       	ldi	r22, 0x00	; 0
    729e:	4f 2d       	mov	r20, r15
    72a0:	20 91 e3 01 	lds	r18, 0x01E3
    72a4:	8e 01       	movw	r16, r28
    72a6:	08 5d       	subi	r16, 0xD8	; 216
    72a8:	1f 4f       	sbci	r17, 0xFF	; 255
    72aa:	0e 94 ac 20 	call	0x4158	; 0x4158 <GetTotalizerData>

			  GetTotalizerData(TVOLUME,TOTALIZER_NOW,FIPAddr,PumpNozzle,strCurrentVolume);
    72ae:	80 e0       	ldi	r24, 0x00	; 0
    72b0:	61 e0       	ldi	r22, 0x01	; 1
    72b2:	4f 2d       	mov	r20, r15
    72b4:	20 91 e3 01 	lds	r18, 0x01E3
    72b8:	8e 01       	movw	r16, r28
    72ba:	09 5c       	subi	r16, 0xC9	; 201
    72bc:	1f 4f       	sbci	r17, 0xFF	; 255
    72be:	0e 94 ac 20 	call	0x4158	; 0x4158 <GetTotalizerData>
			  GetTotalizerData(TMONEY,TOTALIZER_NOW,FIPAddr,PumpNozzle,strCurrentMoney);
    72c2:	81 e0       	ldi	r24, 0x01	; 1
    72c4:	61 e0       	ldi	r22, 0x01	; 1
    72c6:	4f 2d       	mov	r20, r15
    72c8:	20 91 e3 01 	lds	r18, 0x01E3
    72cc:	0e 2d       	mov	r16, r14
    72ce:	1d 2d       	mov	r17, r13
    72d0:	0e 94 ac 20 	call	0x4158	; 0x4158 <GetTotalizerData>
		  }

		  StrCalc(TMINUS,strCurrentVolume,strLastVolume,strDeltaVolume);
    72d4:	80 e0       	ldi	r24, 0x00	; 0
    72d6:	be 01       	movw	r22, r28
    72d8:	69 5c       	subi	r22, 0xC9	; 201
    72da:	7f 4f       	sbci	r23, 0xFF	; 255
    72dc:	ae 01       	movw	r20, r28
    72de:	47 5e       	subi	r20, 0xE7	; 231
    72e0:	5f 4f       	sbci	r21, 0xFF	; 255
    72e2:	25 e0       	ldi	r18, 0x05	; 5
    72e4:	39 e0       	ldi	r19, 0x09	; 9
    72e6:	0e 94 17 2b 	call	0x562e	; 0x562e <StrCalc>

		  if (IsMinus(strDeltaVolume)==True)
    72ea:	85 e0       	ldi	r24, 0x05	; 5
    72ec:	99 e0       	ldi	r25, 0x09	; 9
    72ee:	0e 94 1a 25 	call	0x4a34	; 0x4a34 <IsMinus>
    72f2:	81 30       	cpi	r24, 0x01	; 1
    72f4:	21 f4       	brne	.+8      	; 0x72fe <systemGenerateReport+0x6c4>
		      NormalizeOverflow(strDeltaVolume);
    72f6:	85 e0       	ldi	r24, 0x05	; 5
    72f8:	99 e0       	ldi	r25, 0x09	; 9
    72fa:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <NormalizeOverflow>

		  //Calculate Wayne Estimated Total Money
		  if (eeprom_read_byte(&DefDispenserBrand)==ST_WAYNE_DART){
    72fe:	87 e3       	ldi	r24, 0x37	; 55
    7300:	91 e0       	ldi	r25, 0x01	; 1
    7302:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
    7306:	82 30       	cpi	r24, 0x02	; 2
    7308:	79 f4       	brne	.+30     	; 0x7328 <systemGenerateReport+0x6ee>
              GetProductPrice(sPrice,PumpNum,PumpNozzle);//Money = Price x Volume
    730a:	8e 01       	movw	r16, r28
    730c:	01 5f       	subi	r16, 0xF1	; 241
    730e:	1f 4f       	sbci	r17, 0xFF	; 255
    7310:	c8 01       	movw	r24, r16
    7312:	60 91 e4 01 	lds	r22, 0x01E4
    7316:	40 91 e3 01 	lds	r20, 0x01E3
    731a:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <GetProductPrice>
			  StrCalc(TMULTIPLY,sPrice,strDeltaVolume,strDeltaMoney);
    731e:	82 e0       	ldi	r24, 0x02	; 2
    7320:	b8 01       	movw	r22, r16
    7322:	45 e0       	ldi	r20, 0x05	; 5
    7324:	59 e0       	ldi	r21, 0x09	; 9
    7326:	07 c0       	rjmp	.+14     	; 0x7336 <systemGenerateReport+0x6fc>
			  
		  }else StrCalc(TMINUS,strCurrentMoney,strLastMoney,strDeltaMoney);
    7328:	80 e0       	ldi	r24, 0x00	; 0
    732a:	be 01       	movw	r22, r28
    732c:	6a 5b       	subi	r22, 0xBA	; 186
    732e:	7f 4f       	sbci	r23, 0xFF	; 255
    7330:	ae 01       	movw	r20, r28
    7332:	48 5d       	subi	r20, 0xD8	; 216
    7334:	5f 4f       	sbci	r21, 0xFF	; 255
    7336:	2d e2       	ldi	r18, 0x2D	; 45
    7338:	3c e0       	ldi	r19, 0x0C	; 12
    733a:	0e 94 17 2b 	call	0x562e	; 0x562e <StrCalc>

		  if (IsMinus(strDeltaMoney)==True)
    733e:	8d e2       	ldi	r24, 0x2D	; 45
    7340:	9c e0       	ldi	r25, 0x0C	; 12
    7342:	0e 94 1a 25 	call	0x4a34	; 0x4a34 <IsMinus>
    7346:	81 30       	cpi	r24, 0x01	; 1
    7348:	21 f4       	brne	.+8      	; 0x7352 <systemGenerateReport+0x718>
		      NormalizeOverflow(strDeltaMoney);
    734a:	8d e2       	ldi	r24, 0x2D	; 45
    734c:	9c e0       	ldi	r25, 0x0C	; 12
    734e:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <NormalizeOverflow>

		  AddList(GradeUsed,GradeList);
    7352:	80 91 e2 01 	lds	r24, 0x01E2
    7356:	68 ed       	ldi	r22, 0xD8	; 216
    7358:	71 e0       	ldi	r23, 0x01	; 1
    735a:	0e 94 23 24 	call	0x4846	; 0x4846 <AddList>
		  
		  StrCalc(TPLUS,strTotalVolume,strDeltaVolume,strTotalVolume);
    735e:	81 e0       	ldi	r24, 0x01	; 1
    7360:	67 ef       	ldi	r22, 0xF7	; 247
    7362:	77 e0       	ldi	r23, 0x07	; 7
    7364:	45 e0       	ldi	r20, 0x05	; 5
    7366:	59 e0       	ldi	r21, 0x09	; 9
    7368:	9b 01       	movw	r18, r22
    736a:	0e 94 17 2b 	call	0x562e	; 0x562e <StrCalc>
		  StrCalc(TPLUS,strTotalMoney,strDeltaMoney,strTotalMoney);
    736e:	81 e0       	ldi	r24, 0x01	; 1
    7370:	68 ea       	ldi	r22, 0xA8	; 168
    7372:	78 e0       	ldi	r23, 0x08	; 8
    7374:	4d e2       	ldi	r20, 0x2D	; 45
    7376:	5c e0       	ldi	r21, 0x0C	; 12
    7378:	9b 01       	movw	r18, r22
    737a:	0e 94 17 2b 	call	0x562e	; 0x562e <StrCalc>


		  RemZeroLead(strDeltaMoney);
    737e:	8d e2       	ldi	r24, 0x2D	; 45
    7380:	9c e0       	ldi	r25, 0x0C	; 12
    7382:	0e 94 df 26 	call	0x4dbe	; 0x4dbe <RemZeroLead>
		  RemZeroLead(strCurrentMoney);
    7386:	96 e4       	ldi	r25, 0x46	; 70
    7388:	c9 2e       	mov	r12, r25
    738a:	d1 2c       	mov	r13, r1
    738c:	cc 0e       	add	r12, r28
    738e:	dd 1e       	adc	r13, r29
    7390:	c6 01       	movw	r24, r12
    7392:	0e 94 df 26 	call	0x4dbe	; 0x4dbe <RemZeroLead>
		  RemZeroLead(strLastMoney);
    7396:	88 e2       	ldi	r24, 0x28	; 40
    7398:	e8 2e       	mov	r14, r24
    739a:	f1 2c       	mov	r15, r1
    739c:	ec 0e       	add	r14, r28
    739e:	fd 1e       	adc	r15, r29
    73a0:	c7 01       	movw	r24, r14
    73a2:	0e 94 df 26 	call	0x4dbe	; 0x4dbe <RemZeroLead>

          RemZeroLead(strDeltaVolume);
    73a6:	85 e0       	ldi	r24, 0x05	; 5
    73a8:	99 e0       	ldi	r25, 0x09	; 9
    73aa:	0e 94 df 26 	call	0x4dbe	; 0x4dbe <RemZeroLead>
          RemZeroLead(strCurrentVolume);
    73ae:	07 e3       	ldi	r16, 0x37	; 55
    73b0:	a0 2e       	mov	r10, r16
    73b2:	b1 2c       	mov	r11, r1
    73b4:	ac 0e       	add	r10, r28
    73b6:	bd 1e       	adc	r11, r29
    73b8:	c5 01       	movw	r24, r10
    73ba:	0e 94 df 26 	call	0x4dbe	; 0x4dbe <RemZeroLead>
          RemZeroLead(strLastVolume);
    73be:	8e 01       	movw	r16, r28
    73c0:	07 5e       	subi	r16, 0xE7	; 231
    73c2:	1f 4f       	sbci	r17, 0xFF	; 255
    73c4:	c8 01       	movw	r24, r16
    73c6:	0e 94 df 26 	call	0x4dbe	; 0x4dbe <RemZeroLead>

		  FormatTotalizerMoney(strDeltaMoney);
    73ca:	8d e2       	ldi	r24, 0x2D	; 45
    73cc:	9c e0       	ldi	r25, 0x0C	; 12
    73ce:	0e 94 e5 35 	call	0x6bca	; 0x6bca <FormatTotalizerMoney>
		  FormatTotalizerMoney(strCurrentMoney);
    73d2:	c6 01       	movw	r24, r12
    73d4:	0e 94 e5 35 	call	0x6bca	; 0x6bca <FormatTotalizerMoney>
		  FormatTotalizerMoney(strLastMoney);
    73d8:	c7 01       	movw	r24, r14
    73da:	0e 94 e5 35 	call	0x6bca	; 0x6bca <FormatTotalizerMoney>

		  FormatTotalizerVolume(strDeltaVolume);
    73de:	85 e0       	ldi	r24, 0x05	; 5
    73e0:	99 e0       	ldi	r25, 0x09	; 9
    73e2:	0e 94 d7 35 	call	0x6bae	; 0x6bae <FormatTotalizerVolume>
		  FormatTotalizerVolume(strLastVolume);
    73e6:	c8 01       	movw	r24, r16
    73e8:	0e 94 d7 35 	call	0x6bae	; 0x6bae <FormatTotalizerVolume>
		  FormatTotalizerVolume(strCurrentVolume); 
    73ec:	c5 01       	movw	r24, r10
    73ee:	0e 94 d7 35 	call	0x6bae	; 0x6bae <FormatTotalizerVolume>

          FormatCurrency(strDeltaMoney);
    73f2:	8d e2       	ldi	r24, 0x2D	; 45
    73f4:	9c e0       	ldi	r25, 0x0C	; 12
    73f6:	0e 94 ad 34 	call	0x695a	; 0x695a <FormatCurrency>
		  FormatCurrency(strCurrentMoney);
    73fa:	c6 01       	movw	r24, r12
    73fc:	0e 94 ad 34 	call	0x695a	; 0x695a <FormatCurrency>
		  FormatCurrency(strLastMoney);
    7400:	c7 01       	movw	r24, r14
    7402:	0e 94 ad 34 	call	0x695a	; 0x695a <FormatCurrency>

		  FormatCurrency(strDeltaVolume);		  
    7406:	85 e0       	ldi	r24, 0x05	; 5
    7408:	99 e0       	ldi	r25, 0x09	; 9
    740a:	0e 94 ad 34 	call	0x695a	; 0x695a <FormatCurrency>
		  FormatCurrency(strLastVolume);
    740e:	c8 01       	movw	r24, r16
    7410:	0e 94 ad 34 	call	0x695a	; 0x695a <FormatCurrency>
          FormatCurrency(strCurrentVolume);
    7414:	c5 01       	movw	r24, r10
    7416:	0e 94 ad 34 	call	0x695a	; 0x695a <FormatCurrency>


          InserBorder(btTopLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btTopRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);          
    741a:	81 e0       	ldi	r24, 0x01	; 1
    741c:	6c ee       	ldi	r22, 0xEC	; 236
    741e:	73 e0       	ldi	r23, 0x03	; 3
    7420:	41 e0       	ldi	r20, 0x01	; 1
    7422:	26 ed       	ldi	r18, 0xD6	; 214
    7424:	31 e0       	ldi	r19, 0x01	; 1
    7426:	0e 94 81 1a 	call	0x3502	; 0x3502 <InserBorder>
    742a:	8b e0       	ldi	r24, 0x0B	; 11
    742c:	6c ee       	ldi	r22, 0xEC	; 236
    742e:	73 e0       	ldi	r23, 0x03	; 3
    7430:	4a e2       	ldi	r20, 0x2A	; 42
    7432:	26 ed       	ldi	r18, 0xD6	; 214
    7434:	31 e0       	ldi	r19, 0x01	; 1
    7436:	0e 94 81 1a 	call	0x3502	; 0x3502 <InserBorder>
    743a:	83 e0       	ldi	r24, 0x03	; 3
    743c:	6c ee       	ldi	r22, 0xEC	; 236
    743e:	73 e0       	ldi	r23, 0x03	; 3
    7440:	41 e0       	ldi	r20, 0x01	; 1
    7442:	26 ed       	ldi	r18, 0xD6	; 214
    7444:	31 e0       	ldi	r19, 0x01	; 1
    7446:	0e 94 81 1a 	call	0x3502	; 0x3502 <InserBorder>
    744a:	8c e0       	ldi	r24, 0x0C	; 12
    744c:	6c ee       	ldi	r22, 0xEC	; 236
    744e:	73 e0       	ldi	r23, 0x03	; 3
    7450:	41 e0       	ldi	r20, 0x01	; 1
    7452:	26 ed       	ldi	r18, 0xD6	; 214
    7454:	31 e0       	ldi	r19, 0x01	; 1
    7456:	0e 94 81 1a 	call	0x3502	; 0x3502 <InserBorder>
          if (eeprom_read_byte(&DefDispenserBrand)==ST_WAYNE_DART){
    745a:	87 e3       	ldi	r24, 0x37	; 55
    745c:	91 e0       	ldi	r25, 0x01	; 1
    745e:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
    7462:	15 ea       	ldi	r17, 0xA5	; 165
    7464:	c1 2e       	mov	r12, r17
    7466:	d1 2c       	mov	r13, r1
    7468:	cc 0e       	add	r12, r28
    746a:	dd 1e       	adc	r13, r29
    746c:	be e5       	ldi	r27, 0x5E	; 94
    746e:	ab 2e       	mov	r10, r27
    7470:	b7 e0       	ldi	r27, 0x07	; 7
    7472:	bb 2e       	mov	r11, r27
    7474:	82 30       	cpi	r24, 0x02	; 2
    7476:	09 f0       	breq	.+2      	; 0x747a <systemGenerateReport+0x840>
    7478:	6a c0       	rjmp	.+212    	; 0x754e <systemGenerateReport+0x914>
		      GetProductPrice(sPrice,PumpNum,PumpNozzle);
    747a:	af e0       	ldi	r26, 0x0F	; 15
    747c:	ea 2e       	mov	r14, r26
    747e:	f1 2c       	mov	r15, r1
    7480:	ec 0e       	add	r14, r28
    7482:	fd 1e       	adc	r15, r29
    7484:	c7 01       	movw	r24, r14
    7486:	60 91 e4 01 	lds	r22, 0x01E4
    748a:	40 91 e3 01 	lds	r20, 0x01E3
    748e:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <GetProductPrice>
			  sprintf_P(strProductPrice,PSTR("Harga: Rp.%s"),sPrice);
    7492:	00 d0       	rcall	.+0      	; 0x7494 <systemGenerateReport+0x85a>
    7494:	00 d0       	rcall	.+0      	; 0x7496 <systemGenerateReport+0x85c>
    7496:	00 d0       	rcall	.+0      	; 0x7498 <systemGenerateReport+0x85e>
    7498:	ed b7       	in	r30, 0x3d	; 61
    749a:	fe b7       	in	r31, 0x3e	; 62
    749c:	31 96       	adiw	r30, 0x01	; 1
    749e:	8e 01       	movw	r16, r28
    74a0:	0f 56       	subi	r16, 0x6F	; 111
    74a2:	1f 4f       	sbci	r17, 0xFF	; 255
    74a4:	ad b7       	in	r26, 0x3d	; 61
    74a6:	be b7       	in	r27, 0x3e	; 62
    74a8:	12 96       	adiw	r26, 0x02	; 2
    74aa:	1c 93       	st	X, r17
    74ac:	0e 93       	st	-X, r16
    74ae:	11 97       	sbiw	r26, 0x01	; 1
    74b0:	86 e3       	ldi	r24, 0x36	; 54
    74b2:	96 e0       	ldi	r25, 0x06	; 6
    74b4:	93 83       	std	Z+3, r25	; 0x03
    74b6:	82 83       	std	Z+2, r24	; 0x02
    74b8:	f5 82       	std	Z+5, r15	; 0x05
    74ba:	e4 82       	std	Z+4, r14	; 0x04
    74bc:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>

		      GetTabSpace(((17+10-strlen(strProduct))-strlen(strProductPrice)),strTabSpace2);
    74c0:	d5 01       	movw	r26, r10
    74c2:	0d 90       	ld	r0, X+
    74c4:	00 20       	and	r0, r0
    74c6:	e9 f7       	brne	.-6      	; 0x74c2 <systemGenerateReport+0x888>
    74c8:	11 97       	sbiw	r26, 0x01	; 1
    74ca:	aa 19       	sub	r26, r10
    74cc:	bb 09       	sbc	r27, r11
    74ce:	f8 01       	movw	r30, r16
    74d0:	01 90       	ld	r0, Z+
    74d2:	00 20       	and	r0, r0
    74d4:	e9 f7       	brne	.-6      	; 0x74d0 <systemGenerateReport+0x896>
    74d6:	31 97       	sbiw	r30, 0x01	; 1
    74d8:	8d b7       	in	r24, 0x3d	; 61
    74da:	9e b7       	in	r25, 0x3e	; 62
    74dc:	06 96       	adiw	r24, 0x06	; 6
    74de:	0f b6       	in	r0, 0x3f	; 63
    74e0:	f8 94       	cli
    74e2:	9e bf       	out	0x3e, r25	; 62
    74e4:	0f be       	out	0x3f, r0	; 63
    74e6:	8d bf       	out	0x3d, r24	; 61
    74e8:	80 2f       	mov	r24, r16
    74ea:	8e 1b       	sub	r24, r30
    74ec:	8a 1b       	sub	r24, r26
    74ee:	fd e7       	ldi	r31, 0x7D	; 125
    74f0:	ef 2e       	mov	r14, r31
    74f2:	f1 2c       	mov	r15, r1
    74f4:	ec 0e       	add	r14, r28
    74f6:	fd 1e       	adc	r15, r29
    74f8:	85 5e       	subi	r24, 0xE5	; 229
    74fa:	b7 01       	movw	r22, r14
    74fc:	0e 94 31 1a 	call	0x3462	; 0x3462 <GetTabSpace>
		      sprintf_P(strReport,PSTR("P%d.%d - %s %s %s"),PumpNum,PumpNozzle,strProduct,strTabSpace2,strProductPrice);
    7500:	ad b7       	in	r26, 0x3d	; 61
    7502:	be b7       	in	r27, 0x3e	; 62
    7504:	1e 97       	sbiw	r26, 0x0e	; 14
    7506:	0f b6       	in	r0, 0x3f	; 63
    7508:	f8 94       	cli
    750a:	be bf       	out	0x3e, r27	; 62
    750c:	0f be       	out	0x3f, r0	; 63
    750e:	ad bf       	out	0x3d, r26	; 61
    7510:	ed b7       	in	r30, 0x3d	; 61
    7512:	fe b7       	in	r31, 0x3e	; 62
    7514:	31 96       	adiw	r30, 0x01	; 1
    7516:	12 96       	adiw	r26, 0x02	; 2
    7518:	dc 92       	st	X, r13
    751a:	ce 92       	st	-X, r12
    751c:	11 97       	sbiw	r26, 0x01	; 1
    751e:	84 e2       	ldi	r24, 0x24	; 36
    7520:	96 e0       	ldi	r25, 0x06	; 6
    7522:	93 83       	std	Z+3, r25	; 0x03
    7524:	82 83       	std	Z+2, r24	; 0x02
    7526:	80 91 e4 01 	lds	r24, 0x01E4
    752a:	84 83       	std	Z+4, r24	; 0x04
    752c:	15 82       	std	Z+5, r1	; 0x05
    752e:	80 91 e3 01 	lds	r24, 0x01E3
    7532:	86 83       	std	Z+6, r24	; 0x06
    7534:	17 82       	std	Z+7, r1	; 0x07
    7536:	b1 86       	std	Z+9, r11	; 0x09
    7538:	a0 86       	std	Z+8, r10	; 0x08
    753a:	f3 86       	std	Z+11, r15	; 0x0b
    753c:	e2 86       	std	Z+10, r14	; 0x0a
    753e:	15 87       	std	Z+13, r17	; 0x0d
    7540:	04 87       	std	Z+12, r16	; 0x0c
    7542:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
    7546:	ed b7       	in	r30, 0x3d	; 61
    7548:	fe b7       	in	r31, 0x3e	; 62
    754a:	3e 96       	adiw	r30, 0x0e	; 14
    754c:	24 c0       	rjmp	.+72     	; 0x7596 <systemGenerateReport+0x95c>
		  }
		  else sprintf_P(strReport,PSTR("P%d.%d - %s "),PumpNum,PumpNozzle,strProduct);
    754e:	8d b7       	in	r24, 0x3d	; 61
    7550:	9e b7       	in	r25, 0x3e	; 62
    7552:	0a 97       	sbiw	r24, 0x0a	; 10
    7554:	0f b6       	in	r0, 0x3f	; 63
    7556:	f8 94       	cli
    7558:	9e bf       	out	0x3e, r25	; 62
    755a:	0f be       	out	0x3f, r0	; 63
    755c:	8d bf       	out	0x3d, r24	; 61
    755e:	ed b7       	in	r30, 0x3d	; 61
    7560:	fe b7       	in	r31, 0x3e	; 62
    7562:	31 96       	adiw	r30, 0x01	; 1
    7564:	ad b7       	in	r26, 0x3d	; 61
    7566:	be b7       	in	r27, 0x3e	; 62
    7568:	12 96       	adiw	r26, 0x02	; 2
    756a:	dc 92       	st	X, r13
    756c:	ce 92       	st	-X, r12
    756e:	11 97       	sbiw	r26, 0x01	; 1
    7570:	87 e1       	ldi	r24, 0x17	; 23
    7572:	96 e0       	ldi	r25, 0x06	; 6
    7574:	93 83       	std	Z+3, r25	; 0x03
    7576:	82 83       	std	Z+2, r24	; 0x02
    7578:	80 91 e4 01 	lds	r24, 0x01E4
    757c:	84 83       	std	Z+4, r24	; 0x04
    757e:	15 82       	std	Z+5, r1	; 0x05
    7580:	80 91 e3 01 	lds	r24, 0x01E3
    7584:	86 83       	std	Z+6, r24	; 0x06
    7586:	17 82       	std	Z+7, r1	; 0x07
    7588:	b1 86       	std	Z+9, r11	; 0x09
    758a:	a0 86       	std	Z+8, r10	; 0x08
    758c:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
    7590:	ed b7       	in	r30, 0x3d	; 61
    7592:	fe b7       	in	r31, 0x3e	; 62
    7594:	3a 96       	adiw	r30, 0x0a	; 10
    7596:	0f b6       	in	r0, 0x3f	; 63
    7598:	f8 94       	cli
    759a:	fe bf       	out	0x3e, r31	; 62
    759c:	0f be       	out	0x3f, r0	; 63
    759e:	ed bf       	out	0x3d, r30	; 61
		  CreateReport(strReport,PrintBuffer,&RepPos);
    75a0:	e5 ea       	ldi	r30, 0xA5	; 165
    75a2:	8e 2e       	mov	r8, r30
    75a4:	91 2c       	mov	r9, r1
    75a6:	8c 0e       	add	r8, r28
    75a8:	9d 1e       	adc	r9, r29
    75aa:	c4 01       	movw	r24, r8
    75ac:	6c ee       	ldi	r22, 0xEC	; 236
    75ae:	73 e0       	ldi	r23, 0x03	; 3
    75b0:	46 ed       	ldi	r20, 0xD6	; 214
    75b2:	51 e0       	ldi	r21, 0x01	; 1
    75b4:	0e 94 b5 23 	call	0x476a	; 0x476a <CreateReport>
          InserBorder(btMiddleLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btMiddleRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);          
    75b8:	84 e0       	ldi	r24, 0x04	; 4
    75ba:	6c ee       	ldi	r22, 0xEC	; 236
    75bc:	73 e0       	ldi	r23, 0x03	; 3
    75be:	41 e0       	ldi	r20, 0x01	; 1
    75c0:	26 ed       	ldi	r18, 0xD6	; 214
    75c2:	31 e0       	ldi	r19, 0x01	; 1
    75c4:	0e 94 81 1a 	call	0x3502	; 0x3502 <InserBorder>
    75c8:	8b e0       	ldi	r24, 0x0B	; 11
    75ca:	6c ee       	ldi	r22, 0xEC	; 236
    75cc:	73 e0       	ldi	r23, 0x03	; 3
    75ce:	4a e2       	ldi	r20, 0x2A	; 42
    75d0:	26 ed       	ldi	r18, 0xD6	; 214
    75d2:	31 e0       	ldi	r19, 0x01	; 1
    75d4:	0e 94 81 1a 	call	0x3502	; 0x3502 <InserBorder>
    75d8:	86 e0       	ldi	r24, 0x06	; 6
    75da:	6c ee       	ldi	r22, 0xEC	; 236
    75dc:	73 e0       	ldi	r23, 0x03	; 3
    75de:	41 e0       	ldi	r20, 0x01	; 1
    75e0:	26 ed       	ldi	r18, 0xD6	; 214
    75e2:	31 e0       	ldi	r19, 0x01	; 1
    75e4:	0e 94 81 1a 	call	0x3502	; 0x3502 <InserBorder>
    75e8:	8c e0       	ldi	r24, 0x0C	; 12
    75ea:	6c ee       	ldi	r22, 0xEC	; 236
    75ec:	73 e0       	ldi	r23, 0x03	; 3
    75ee:	41 e0       	ldi	r20, 0x01	; 1
    75f0:	26 ed       	ldi	r18, 0xD6	; 214
    75f2:	31 e0       	ldi	r19, 0x01	; 1
    75f4:	0e 94 81 1a 	call	0x3502	; 0x3502 <InserBorder>

		  GetTabSpace((17-strlen(strCurrentVolume)),strTabSpace);
    75f8:	77 e3       	ldi	r23, 0x37	; 55
    75fa:	e7 2e       	mov	r14, r23
    75fc:	f1 2c       	mov	r15, r1
    75fe:	ec 0e       	add	r14, r28
    7600:	fd 1e       	adc	r15, r29
    7602:	f7 01       	movw	r30, r14
    7604:	01 90       	ld	r0, Z+
    7606:	00 20       	and	r0, r0
    7608:	e9 f7       	brne	.-6      	; 0x7604 <systemGenerateReport+0x9ca>
    760a:	8e 2d       	mov	r24, r14
    760c:	8e 1b       	sub	r24, r30
    760e:	69 e6       	ldi	r22, 0x69	; 105
    7610:	c6 2e       	mov	r12, r22
    7612:	d1 2c       	mov	r13, r1
    7614:	cc 0e       	add	r12, r28
    7616:	dd 1e       	adc	r13, r29
    7618:	8e 5e       	subi	r24, 0xEE	; 238
    761a:	b6 01       	movw	r22, r12
    761c:	0e 94 31 1a 	call	0x3462	; 0x3462 <GetTabSpace>
		  GetTabSpace((15-strlen(strCurrentMoney)),strTabSpace2);
    7620:	8e 01       	movw	r16, r28
    7622:	0a 5b       	subi	r16, 0xBA	; 186
    7624:	1f 4f       	sbci	r17, 0xFF	; 255
    7626:	f8 01       	movw	r30, r16
    7628:	01 90       	ld	r0, Z+
    762a:	00 20       	and	r0, r0
    762c:	e9 f7       	brne	.-6      	; 0x7628 <systemGenerateReport+0x9ee>
    762e:	80 2f       	mov	r24, r16
    7630:	8e 1b       	sub	r24, r30
    7632:	5d e7       	ldi	r21, 0x7D	; 125
    7634:	a5 2e       	mov	r10, r21
    7636:	b1 2c       	mov	r11, r1
    7638:	ac 0e       	add	r10, r28
    763a:	bd 1e       	adc	r11, r29
    763c:	80 5f       	subi	r24, 0xF0	; 240
    763e:	b5 01       	movw	r22, r10
    7640:	0e 94 31 1a 	call	0x3462	; 0x3462 <GetTabSpace>
		  //PrintMoney
		  if (eeprom_read_byte(&DefPrintMoney)==True) sprintf_P(strReport,PSTR("Akhir:%s%s%s%s"),strTabSpace,strCurrentVolume,strTabSpace2,strCurrentMoney);//CreateReport(strReport,PrintBuffer,&RepPos);
    7644:	81 ec       	ldi	r24, 0xC1	; 193
    7646:	93 e0       	ldi	r25, 0x03	; 3
    7648:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
    764c:	81 30       	cpi	r24, 0x01	; 1
    764e:	19 f5       	brne	.+70     	; 0x7696 <systemGenerateReport+0xa5c>
    7650:	8d b7       	in	r24, 0x3d	; 61
    7652:	9e b7       	in	r25, 0x3e	; 62
    7654:	0c 97       	sbiw	r24, 0x0c	; 12
    7656:	0f b6       	in	r0, 0x3f	; 63
    7658:	f8 94       	cli
    765a:	9e bf       	out	0x3e, r25	; 62
    765c:	0f be       	out	0x3f, r0	; 63
    765e:	8d bf       	out	0x3d, r24	; 61
    7660:	ed b7       	in	r30, 0x3d	; 61
    7662:	fe b7       	in	r31, 0x3e	; 62
    7664:	31 96       	adiw	r30, 0x01	; 1
    7666:	ad b7       	in	r26, 0x3d	; 61
    7668:	be b7       	in	r27, 0x3e	; 62
    766a:	12 96       	adiw	r26, 0x02	; 2
    766c:	9c 92       	st	X, r9
    766e:	8e 92       	st	-X, r8
    7670:	11 97       	sbiw	r26, 0x01	; 1
    7672:	88 e0       	ldi	r24, 0x08	; 8
    7674:	96 e0       	ldi	r25, 0x06	; 6
    7676:	93 83       	std	Z+3, r25	; 0x03
    7678:	82 83       	std	Z+2, r24	; 0x02
    767a:	d5 82       	std	Z+5, r13	; 0x05
    767c:	c4 82       	std	Z+4, r12	; 0x04
    767e:	f7 82       	std	Z+7, r15	; 0x07
    7680:	e6 82       	std	Z+6, r14	; 0x06
    7682:	b1 86       	std	Z+9, r11	; 0x09
    7684:	a0 86       	std	Z+8, r10	; 0x08
    7686:	13 87       	std	Z+11, r17	; 0x0b
    7688:	02 87       	std	Z+10, r16	; 0x0a
    768a:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
    768e:	ed b7       	in	r30, 0x3d	; 61
    7690:	fe b7       	in	r31, 0x3e	; 62
    7692:	3c 96       	adiw	r30, 0x0c	; 12
    7694:	1e c0       	rjmp	.+60     	; 0x76d2 <systemGenerateReport+0xa98>
		  else sprintf_P(strReport,PSTR("Akhir:%s%s"),strTabSpace,strCurrentVolume);
    7696:	8d b7       	in	r24, 0x3d	; 61
    7698:	9e b7       	in	r25, 0x3e	; 62
    769a:	08 97       	sbiw	r24, 0x08	; 8
    769c:	0f b6       	in	r0, 0x3f	; 63
    769e:	f8 94       	cli
    76a0:	9e bf       	out	0x3e, r25	; 62
    76a2:	0f be       	out	0x3f, r0	; 63
    76a4:	8d bf       	out	0x3d, r24	; 61
    76a6:	ed b7       	in	r30, 0x3d	; 61
    76a8:	fe b7       	in	r31, 0x3e	; 62
    76aa:	31 96       	adiw	r30, 0x01	; 1
    76ac:	ad b7       	in	r26, 0x3d	; 61
    76ae:	be b7       	in	r27, 0x3e	; 62
    76b0:	12 96       	adiw	r26, 0x02	; 2
    76b2:	9c 92       	st	X, r9
    76b4:	8e 92       	st	-X, r8
    76b6:	11 97       	sbiw	r26, 0x01	; 1
    76b8:	8d ef       	ldi	r24, 0xFD	; 253
    76ba:	95 e0       	ldi	r25, 0x05	; 5
    76bc:	93 83       	std	Z+3, r25	; 0x03
    76be:	82 83       	std	Z+2, r24	; 0x02
    76c0:	d5 82       	std	Z+5, r13	; 0x05
    76c2:	c4 82       	std	Z+4, r12	; 0x04
    76c4:	f7 82       	std	Z+7, r15	; 0x07
    76c6:	e6 82       	std	Z+6, r14	; 0x06
    76c8:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
    76cc:	ed b7       	in	r30, 0x3d	; 61
    76ce:	fe b7       	in	r31, 0x3e	; 62
    76d0:	38 96       	adiw	r30, 0x08	; 8
    76d2:	0f b6       	in	r0, 0x3f	; 63
    76d4:	f8 94       	cli
    76d6:	fe bf       	out	0x3e, r31	; 62
    76d8:	0f be       	out	0x3f, r0	; 63
    76da:	ed bf       	out	0x3d, r30	; 61
		  CreateReport(strReport,PrintBuffer,&RepPos);
    76dc:	45 ea       	ldi	r20, 0xA5	; 165
    76de:	a4 2e       	mov	r10, r20
    76e0:	b1 2c       	mov	r11, r1
    76e2:	ac 0e       	add	r10, r28
    76e4:	bd 1e       	adc	r11, r29
    76e6:	c5 01       	movw	r24, r10
    76e8:	6c ee       	ldi	r22, 0xEC	; 236
    76ea:	73 e0       	ldi	r23, 0x03	; 3
    76ec:	46 ed       	ldi	r20, 0xD6	; 214
    76ee:	51 e0       	ldi	r21, 0x01	; 1
    76f0:	0e 94 b5 23 	call	0x476a	; 0x476a <CreateReport>

		  GetTabSpace((17-strlen(strLastVolume)),strTabSpace);
    76f4:	39 e1       	ldi	r19, 0x19	; 25
    76f6:	e3 2e       	mov	r14, r19
    76f8:	f1 2c       	mov	r15, r1
    76fa:	ec 0e       	add	r14, r28
    76fc:	fd 1e       	adc	r15, r29
    76fe:	f7 01       	movw	r30, r14
    7700:	01 90       	ld	r0, Z+
    7702:	00 20       	and	r0, r0
    7704:	e9 f7       	brne	.-6      	; 0x7700 <systemGenerateReport+0xac6>
    7706:	8e 2d       	mov	r24, r14
    7708:	8e 1b       	sub	r24, r30
    770a:	29 e6       	ldi	r18, 0x69	; 105
    770c:	c2 2e       	mov	r12, r18
    770e:	d1 2c       	mov	r13, r1
    7710:	cc 0e       	add	r12, r28
    7712:	dd 1e       	adc	r13, r29
    7714:	8e 5e       	subi	r24, 0xEE	; 238
    7716:	b6 01       	movw	r22, r12
    7718:	0e 94 31 1a 	call	0x3462	; 0x3462 <GetTabSpace>
		  GetTabSpace((15-strlen(strLastMoney)),strTabSpace2);
    771c:	8e 01       	movw	r16, r28
    771e:	08 5d       	subi	r16, 0xD8	; 216
    7720:	1f 4f       	sbci	r17, 0xFF	; 255
    7722:	f8 01       	movw	r30, r16
    7724:	01 90       	ld	r0, Z+
    7726:	00 20       	and	r0, r0
    7728:	e9 f7       	brne	.-6      	; 0x7724 <systemGenerateReport+0xaea>
    772a:	80 2f       	mov	r24, r16
    772c:	8e 1b       	sub	r24, r30
    772e:	9d e7       	ldi	r25, 0x7D	; 125
    7730:	89 2e       	mov	r8, r25
    7732:	91 2c       	mov	r9, r1
    7734:	8c 0e       	add	r8, r28
    7736:	9d 1e       	adc	r9, r29
    7738:	80 5f       	subi	r24, 0xF0	; 240
    773a:	b4 01       	movw	r22, r8
    773c:	0e 94 31 1a 	call	0x3462	; 0x3462 <GetTabSpace>
		  //PrintMoney
		  if (eeprom_read_byte(&DefPrintMoney)==True)sprintf_P(strReport,PSTR("Awal :%s%s%s%s"),strTabSpace,strLastVolume,strTabSpace2,strLastMoney);//CreateReport(strReport,PrintBuffer,&RepPos);
    7740:	81 ec       	ldi	r24, 0xC1	; 193
    7742:	93 e0       	ldi	r25, 0x03	; 3
    7744:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
    7748:	81 30       	cpi	r24, 0x01	; 1
    774a:	19 f5       	brne	.+70     	; 0x7792 <systemGenerateReport+0xb58>
    774c:	8d b7       	in	r24, 0x3d	; 61
    774e:	9e b7       	in	r25, 0x3e	; 62
    7750:	0c 97       	sbiw	r24, 0x0c	; 12
    7752:	0f b6       	in	r0, 0x3f	; 63
    7754:	f8 94       	cli
    7756:	9e bf       	out	0x3e, r25	; 62
    7758:	0f be       	out	0x3f, r0	; 63
    775a:	8d bf       	out	0x3d, r24	; 61
    775c:	ed b7       	in	r30, 0x3d	; 61
    775e:	fe b7       	in	r31, 0x3e	; 62
    7760:	31 96       	adiw	r30, 0x01	; 1
    7762:	ad b7       	in	r26, 0x3d	; 61
    7764:	be b7       	in	r27, 0x3e	; 62
    7766:	12 96       	adiw	r26, 0x02	; 2
    7768:	bc 92       	st	X, r11
    776a:	ae 92       	st	-X, r10
    776c:	11 97       	sbiw	r26, 0x01	; 1
    776e:	8e ee       	ldi	r24, 0xEE	; 238
    7770:	95 e0       	ldi	r25, 0x05	; 5
    7772:	93 83       	std	Z+3, r25	; 0x03
    7774:	82 83       	std	Z+2, r24	; 0x02
    7776:	d5 82       	std	Z+5, r13	; 0x05
    7778:	c4 82       	std	Z+4, r12	; 0x04
    777a:	f7 82       	std	Z+7, r15	; 0x07
    777c:	e6 82       	std	Z+6, r14	; 0x06
    777e:	91 86       	std	Z+9, r9	; 0x09
    7780:	80 86       	std	Z+8, r8	; 0x08
    7782:	13 87       	std	Z+11, r17	; 0x0b
    7784:	02 87       	std	Z+10, r16	; 0x0a
    7786:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
    778a:	ed b7       	in	r30, 0x3d	; 61
    778c:	fe b7       	in	r31, 0x3e	; 62
    778e:	3c 96       	adiw	r30, 0x0c	; 12
    7790:	1e c0       	rjmp	.+60     	; 0x77ce <systemGenerateReport+0xb94>
		  else sprintf_P(strReport,PSTR("Awal :%s%s"),strTabSpace,strLastVolume);
    7792:	8d b7       	in	r24, 0x3d	; 61
    7794:	9e b7       	in	r25, 0x3e	; 62
    7796:	08 97       	sbiw	r24, 0x08	; 8
    7798:	0f b6       	in	r0, 0x3f	; 63
    779a:	f8 94       	cli
    779c:	9e bf       	out	0x3e, r25	; 62
    779e:	0f be       	out	0x3f, r0	; 63
    77a0:	8d bf       	out	0x3d, r24	; 61
    77a2:	ed b7       	in	r30, 0x3d	; 61
    77a4:	fe b7       	in	r31, 0x3e	; 62
    77a6:	31 96       	adiw	r30, 0x01	; 1
    77a8:	ad b7       	in	r26, 0x3d	; 61
    77aa:	be b7       	in	r27, 0x3e	; 62
    77ac:	12 96       	adiw	r26, 0x02	; 2
    77ae:	bc 92       	st	X, r11
    77b0:	ae 92       	st	-X, r10
    77b2:	11 97       	sbiw	r26, 0x01	; 1
    77b4:	83 ee       	ldi	r24, 0xE3	; 227
    77b6:	95 e0       	ldi	r25, 0x05	; 5
    77b8:	93 83       	std	Z+3, r25	; 0x03
    77ba:	82 83       	std	Z+2, r24	; 0x02
    77bc:	d5 82       	std	Z+5, r13	; 0x05
    77be:	c4 82       	std	Z+4, r12	; 0x04
    77c0:	f7 82       	std	Z+7, r15	; 0x07
    77c2:	e6 82       	std	Z+6, r14	; 0x06
    77c4:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
    77c8:	ed b7       	in	r30, 0x3d	; 61
    77ca:	fe b7       	in	r31, 0x3e	; 62
    77cc:	38 96       	adiw	r30, 0x08	; 8
    77ce:	0f b6       	in	r0, 0x3f	; 63
    77d0:	f8 94       	cli
    77d2:	fe bf       	out	0x3e, r31	; 62
    77d4:	0f be       	out	0x3f, r0	; 63
    77d6:	ed bf       	out	0x3d, r30	; 61
		  CreateReport(strReport,PrintBuffer,&RepPos);
    77d8:	8e 01       	movw	r16, r28
    77da:	0b 55       	subi	r16, 0x5B	; 91
    77dc:	1f 4f       	sbci	r17, 0xFF	; 255
    77de:	c8 01       	movw	r24, r16
    77e0:	6c ee       	ldi	r22, 0xEC	; 236
    77e2:	73 e0       	ldi	r23, 0x03	; 3
    77e4:	46 ed       	ldi	r20, 0xD6	; 214
    77e6:	51 e0       	ldi	r21, 0x01	; 1
    77e8:	0e 94 b5 23 	call	0x476a	; 0x476a <CreateReport>

		  GetTabSpace(12,strTabSpace);
    77ec:	b9 e6       	ldi	r27, 0x69	; 105
    77ee:	eb 2e       	mov	r14, r27
    77f0:	f1 2c       	mov	r15, r1
    77f2:	ec 0e       	add	r14, r28
    77f4:	fd 1e       	adc	r15, r29
    77f6:	8c e0       	ldi	r24, 0x0C	; 12
    77f8:	b7 01       	movw	r22, r14
    77fa:	0e 94 31 1a 	call	0x3462	; 0x3462 <GetTabSpace>
          //PrintMoney
          if (eeprom_read_byte(&DefPrintMoney)==True)sprintf_P(strReport,PSTR("%s-----------   -------------"),strTabSpace);//CreateReport(strReport,PrintBuffer,&RepPos);
    77fe:	81 ec       	ldi	r24, 0xC1	; 193
    7800:	93 e0       	ldi	r25, 0x03	; 3
    7802:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
    7806:	81 30       	cpi	r24, 0x01	; 1
    7808:	79 f4       	brne	.+30     	; 0x7828 <systemGenerateReport+0xbee>
    780a:	00 d0       	rcall	.+0      	; 0x780c <systemGenerateReport+0xbd2>
    780c:	00 d0       	rcall	.+0      	; 0x780e <systemGenerateReport+0xbd4>
    780e:	00 d0       	rcall	.+0      	; 0x7810 <systemGenerateReport+0xbd6>
    7810:	ed b7       	in	r30, 0x3d	; 61
    7812:	fe b7       	in	r31, 0x3e	; 62
    7814:	31 96       	adiw	r30, 0x01	; 1
    7816:	ad b7       	in	r26, 0x3d	; 61
    7818:	be b7       	in	r27, 0x3e	; 62
    781a:	12 96       	adiw	r26, 0x02	; 2
    781c:	1c 93       	st	X, r17
    781e:	0e 93       	st	-X, r16
    7820:	11 97       	sbiw	r26, 0x01	; 1
    7822:	85 ec       	ldi	r24, 0xC5	; 197
    7824:	95 e0       	ldi	r25, 0x05	; 5
    7826:	0e c0       	rjmp	.+28     	; 0x7844 <systemGenerateReport+0xc0a>
		  else sprintf_P(strReport,PSTR("%s-----------                "),strTabSpace);CreateReport(strReport,PrintBuffer,&RepPos);
    7828:	00 d0       	rcall	.+0      	; 0x782a <systemGenerateReport+0xbf0>
    782a:	00 d0       	rcall	.+0      	; 0x782c <systemGenerateReport+0xbf2>
    782c:	00 d0       	rcall	.+0      	; 0x782e <systemGenerateReport+0xbf4>
    782e:	ed b7       	in	r30, 0x3d	; 61
    7830:	fe b7       	in	r31, 0x3e	; 62
    7832:	31 96       	adiw	r30, 0x01	; 1
    7834:	ad b7       	in	r26, 0x3d	; 61
    7836:	be b7       	in	r27, 0x3e	; 62
    7838:	12 96       	adiw	r26, 0x02	; 2
    783a:	1c 93       	st	X, r17
    783c:	0e 93       	st	-X, r16
    783e:	11 97       	sbiw	r26, 0x01	; 1
    7840:	87 ea       	ldi	r24, 0xA7	; 167
    7842:	95 e0       	ldi	r25, 0x05	; 5
    7844:	93 83       	std	Z+3, r25	; 0x03
    7846:	82 83       	std	Z+2, r24	; 0x02
    7848:	f5 82       	std	Z+5, r15	; 0x05
    784a:	e4 82       	std	Z+4, r14	; 0x04
    784c:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
    7850:	ed b7       	in	r30, 0x3d	; 61
    7852:	fe b7       	in	r31, 0x3e	; 62
    7854:	36 96       	adiw	r30, 0x06	; 6
    7856:	0f b6       	in	r0, 0x3f	; 63
    7858:	f8 94       	cli
    785a:	fe bf       	out	0x3e, r31	; 62
    785c:	0f be       	out	0x3f, r0	; 63
    785e:	ed bf       	out	0x3d, r30	; 61
    7860:	a5 ea       	ldi	r26, 0xA5	; 165
    7862:	ea 2e       	mov	r14, r26
    7864:	f1 2c       	mov	r15, r1
    7866:	ec 0e       	add	r14, r28
    7868:	fd 1e       	adc	r15, r29
    786a:	c7 01       	movw	r24, r14
    786c:	6c ee       	ldi	r22, 0xEC	; 236
    786e:	73 e0       	ldi	r23, 0x03	; 3
    7870:	46 ed       	ldi	r20, 0xD6	; 214
    7872:	51 e0       	ldi	r21, 0x01	; 1
    7874:	0e 94 b5 23 	call	0x476a	; 0x476a <CreateReport>

		  GetTabSpace((23-strlen(strDeltaVolume)),strTabSpace);
    7878:	f5 e0       	ldi	r31, 0x05	; 5
    787a:	cf 2e       	mov	r12, r31
    787c:	f9 e0       	ldi	r31, 0x09	; 9
    787e:	df 2e       	mov	r13, r31
    7880:	f6 01       	movw	r30, r12
    7882:	01 90       	ld	r0, Z+
    7884:	00 20       	and	r0, r0
    7886:	e9 f7       	brne	.-6      	; 0x7882 <systemGenerateReport+0xc48>
    7888:	31 97       	sbiw	r30, 0x01	; 1
    788a:	ec 19       	sub	r30, r12
    788c:	fd 09       	sbc	r31, r13
    788e:	8e 01       	movw	r16, r28
    7890:	07 59       	subi	r16, 0x97	; 151
    7892:	1f 4f       	sbci	r17, 0xFF	; 255
    7894:	87 e1       	ldi	r24, 0x17	; 23
    7896:	8e 1b       	sub	r24, r30
    7898:	b8 01       	movw	r22, r16
    789a:	0e 94 31 1a 	call	0x3462	; 0x3462 <GetTabSpace>
		  GetTabSpace((15-strlen(strDeltaMoney)),strTabSpace2);
    789e:	ed e2       	ldi	r30, 0x2D	; 45
    78a0:	8e 2e       	mov	r8, r30
    78a2:	ec e0       	ldi	r30, 0x0C	; 12
    78a4:	9e 2e       	mov	r9, r30
    78a6:	f4 01       	movw	r30, r8
    78a8:	01 90       	ld	r0, Z+
    78aa:	00 20       	and	r0, r0
    78ac:	e9 f7       	brne	.-6      	; 0x78a8 <systemGenerateReport+0xc6e>
    78ae:	31 97       	sbiw	r30, 0x01	; 1
    78b0:	e8 19       	sub	r30, r8
    78b2:	f9 09       	sbc	r31, r9
    78b4:	7d e7       	ldi	r23, 0x7D	; 125
    78b6:	a7 2e       	mov	r10, r23
    78b8:	b1 2c       	mov	r11, r1
    78ba:	ac 0e       	add	r10, r28
    78bc:	bd 1e       	adc	r11, r29
    78be:	8f e0       	ldi	r24, 0x0F	; 15
    78c0:	8e 1b       	sub	r24, r30
    78c2:	b5 01       	movw	r22, r10
    78c4:	0e 94 31 1a 	call	0x3462	; 0x3462 <GetTabSpace>
          //PrintMoney
		  if (eeprom_read_byte(&DefPrintMoney)==True)sprintf_P(strReport,PSTR("%s%s%s%s"),strTabSpace,strDeltaVolume,strTabSpace2,strDeltaMoney);//CreateReport(strReport,PrintBuffer,&RepPos);
    78c8:	81 ec       	ldi	r24, 0xC1	; 193
    78ca:	93 e0       	ldi	r25, 0x03	; 3
    78cc:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
    78d0:	81 30       	cpi	r24, 0x01	; 1
    78d2:	19 f5       	brne	.+70     	; 0x791a <systemGenerateReport+0xce0>
    78d4:	8d b7       	in	r24, 0x3d	; 61
    78d6:	9e b7       	in	r25, 0x3e	; 62
    78d8:	0c 97       	sbiw	r24, 0x0c	; 12
    78da:	0f b6       	in	r0, 0x3f	; 63
    78dc:	f8 94       	cli
    78de:	9e bf       	out	0x3e, r25	; 62
    78e0:	0f be       	out	0x3f, r0	; 63
    78e2:	8d bf       	out	0x3d, r24	; 61
    78e4:	ed b7       	in	r30, 0x3d	; 61
    78e6:	fe b7       	in	r31, 0x3e	; 62
    78e8:	31 96       	adiw	r30, 0x01	; 1
    78ea:	ad b7       	in	r26, 0x3d	; 61
    78ec:	be b7       	in	r27, 0x3e	; 62
    78ee:	12 96       	adiw	r26, 0x02	; 2
    78f0:	fc 92       	st	X, r15
    78f2:	ee 92       	st	-X, r14
    78f4:	11 97       	sbiw	r26, 0x01	; 1
    78f6:	8e e9       	ldi	r24, 0x9E	; 158
    78f8:	95 e0       	ldi	r25, 0x05	; 5
    78fa:	93 83       	std	Z+3, r25	; 0x03
    78fc:	82 83       	std	Z+2, r24	; 0x02
    78fe:	15 83       	std	Z+5, r17	; 0x05
    7900:	04 83       	std	Z+4, r16	; 0x04
    7902:	d7 82       	std	Z+7, r13	; 0x07
    7904:	c6 82       	std	Z+6, r12	; 0x06
    7906:	b1 86       	std	Z+9, r11	; 0x09
    7908:	a0 86       	std	Z+8, r10	; 0x08
    790a:	93 86       	std	Z+11, r9	; 0x0b
    790c:	82 86       	std	Z+10, r8	; 0x0a
    790e:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
    7912:	ed b7       	in	r30, 0x3d	; 61
    7914:	fe b7       	in	r31, 0x3e	; 62
    7916:	3c 96       	adiw	r30, 0x0c	; 12
    7918:	1e c0       	rjmp	.+60     	; 0x7956 <systemGenerateReport+0xd1c>
          else sprintf_P(strReport,PSTR("%s%s"),strTabSpace,strDeltaVolume);CreateReport(strReport,PrintBuffer,&RepPos);
    791a:	8d b7       	in	r24, 0x3d	; 61
    791c:	9e b7       	in	r25, 0x3e	; 62
    791e:	08 97       	sbiw	r24, 0x08	; 8
    7920:	0f b6       	in	r0, 0x3f	; 63
    7922:	f8 94       	cli
    7924:	9e bf       	out	0x3e, r25	; 62
    7926:	0f be       	out	0x3f, r0	; 63
    7928:	8d bf       	out	0x3d, r24	; 61
    792a:	ed b7       	in	r30, 0x3d	; 61
    792c:	fe b7       	in	r31, 0x3e	; 62
    792e:	31 96       	adiw	r30, 0x01	; 1
    7930:	ad b7       	in	r26, 0x3d	; 61
    7932:	be b7       	in	r27, 0x3e	; 62
    7934:	12 96       	adiw	r26, 0x02	; 2
    7936:	fc 92       	st	X, r15
    7938:	ee 92       	st	-X, r14
    793a:	11 97       	sbiw	r26, 0x01	; 1
    793c:	89 e9       	ldi	r24, 0x99	; 153
    793e:	95 e0       	ldi	r25, 0x05	; 5
    7940:	93 83       	std	Z+3, r25	; 0x03
    7942:	82 83       	std	Z+2, r24	; 0x02
    7944:	15 83       	std	Z+5, r17	; 0x05
    7946:	04 83       	std	Z+4, r16	; 0x04
    7948:	d7 82       	std	Z+7, r13	; 0x07
    794a:	c6 82       	std	Z+6, r12	; 0x06
    794c:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
    7950:	ed b7       	in	r30, 0x3d	; 61
    7952:	fe b7       	in	r31, 0x3e	; 62
    7954:	38 96       	adiw	r30, 0x08	; 8
    7956:	0f b6       	in	r0, 0x3f	; 63
    7958:	f8 94       	cli
    795a:	fe bf       	out	0x3e, r31	; 62
    795c:	0f be       	out	0x3f, r0	; 63
    795e:	ed bf       	out	0x3d, r30	; 61
    7960:	ce 01       	movw	r24, r28
    7962:	8b 55       	subi	r24, 0x5B	; 91
    7964:	9f 4f       	sbci	r25, 0xFF	; 255
    7966:	6c ee       	ldi	r22, 0xEC	; 236
    7968:	73 e0       	ldi	r23, 0x03	; 3
    796a:	46 ed       	ldi	r20, 0xD6	; 214
    796c:	51 e0       	ldi	r21, 0x01	; 1
    796e:	0e 94 b5 23 	call	0x476a	; 0x476a <CreateReport>

          InserBorder(btBottomLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btBottomRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);
    7972:	87 e0       	ldi	r24, 0x07	; 7
    7974:	6c ee       	ldi	r22, 0xEC	; 236
    7976:	73 e0       	ldi	r23, 0x03	; 3
    7978:	41 e0       	ldi	r20, 0x01	; 1
    797a:	26 ed       	ldi	r18, 0xD6	; 214
    797c:	31 e0       	ldi	r19, 0x01	; 1
    797e:	0e 94 81 1a 	call	0x3502	; 0x3502 <InserBorder>
    7982:	8b e0       	ldi	r24, 0x0B	; 11
    7984:	6c ee       	ldi	r22, 0xEC	; 236
    7986:	73 e0       	ldi	r23, 0x03	; 3
    7988:	4a e2       	ldi	r20, 0x2A	; 42
    798a:	26 ed       	ldi	r18, 0xD6	; 214
    798c:	31 e0       	ldi	r19, 0x01	; 1
    798e:	0e 94 81 1a 	call	0x3502	; 0x3502 <InserBorder>
    7992:	89 e0       	ldi	r24, 0x09	; 9
    7994:	6c ee       	ldi	r22, 0xEC	; 236
    7996:	73 e0       	ldi	r23, 0x03	; 3
    7998:	41 e0       	ldi	r20, 0x01	; 1
    799a:	26 ed       	ldi	r18, 0xD6	; 214
    799c:	31 e0       	ldi	r19, 0x01	; 1
    799e:	0e 94 81 1a 	call	0x3502	; 0x3502 <InserBorder>
    79a2:	8c e0       	ldi	r24, 0x0C	; 12
    79a4:	6c ee       	ldi	r22, 0xEC	; 236
    79a6:	73 e0       	ldi	r23, 0x03	; 3
    79a8:	41 e0       	ldi	r20, 0x01	; 1
    79aa:	26 ed       	ldi	r18, 0xD6	; 214
    79ac:	31 e0       	ldi	r19, 0x01	; 1
    79ae:	0e 94 81 1a 	call	0x3502	; 0x3502 <InserBorder>


          cmdPrint=0b00000000;
    79b2:	10 92 b5 01 	sts	0x01B5, r1
		  LengthMessage81=RepPos+1;
    79b6:	80 91 d6 01 	lds	r24, 0x01D6
    79ba:	90 91 d7 01 	lds	r25, 0x01D7
    79be:	01 96       	adiw	r24, 0x01	; 1
    79c0:	90 93 8e 01 	sts	0x018E, r25
    79c4:	80 93 8d 01 	sts	0x018D, r24

		  IsFreePrinting=True;
    79c8:	81 e0       	ldi	r24, 0x01	; 1
    79ca:	80 93 a8 01 	sts	0x01A8, r24
	      IsBusyFreePrinting=True;
    79ce:	80 93 b4 01 	sts	0x01B4, r24

	      stGenerateReport=grWaitPrinted2;
    79d2:	89 e0       	ldi	r24, 0x09	; 9
    79d4:	61 c3       	rjmp	.+1730   	; 0x8098 <systemGenerateReport+0x145e>
	      break;
     case grWaitPrinted2:
	 
          if (IsBusyFreePrinting==False)stGenerateReport=grGenerateReportData;
    79d6:	80 91 b4 01 	lds	r24, 0x01B4
    79da:	88 23       	and	r24, r24
    79dc:	09 f0       	breq	.+2      	; 0x79e0 <systemGenerateReport+0xda6>
    79de:	64 c3       	rjmp	.+1736   	; 0x80a8 <systemGenerateReport+0x146e>
    79e0:	86 e0       	ldi	r24, 0x06	; 6
    79e2:	5a c3       	rjmp	.+1716   	; 0x8098 <systemGenerateReport+0x145e>
	      break;
     case grCreateReportFooter:
          RepPos=0;
    79e4:	10 92 d7 01 	sts	0x01D7, r1
    79e8:	10 92 d6 01 	sts	0x01D6, r1
    79ec:	ec ee       	ldi	r30, 0xEC	; 236
    79ee:	f3 e0       	ldi	r31, 0x03	; 3
}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
	     strMemory[i]=data;
    79f0:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    79f2:	85 e0       	ldi	r24, 0x05	; 5
    79f4:	ed 37       	cpi	r30, 0x7D	; 125
    79f6:	f8 07       	cpc	r31, r24
    79f8:	d9 f7       	brne	.-10     	; 0x79f0 <systemGenerateReport+0xdb6>
    79fa:	fe 01       	movw	r30, r28
    79fc:	eb 55       	subi	r30, 0x5B	; 91
    79fe:	ff 4f       	sbci	r31, 0xFF	; 255
	     strMemory[i]=data;
    7a00:	cf 01       	movw	r24, r30
    7a02:	9e 2e       	mov	r9, r30
    7a04:	89 2e       	mov	r8, r25
    7a06:	ce 01       	movw	r24, r28
    7a08:	8b 50       	subi	r24, 0x0B	; 11
    7a0a:	9f 4f       	sbci	r25, 0xFF	; 255
    7a0c:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    7a0e:	e8 17       	cp	r30, r24
    7a10:	f9 07       	cpc	r31, r25
    7a12:	e1 f7       	brne	.-8      	; 0x7a0c <systemGenerateReport+0xdd2>
     case grCreateReportFooter:
          RepPos=0;
		  FillChar(PrintBuffer,sizeof(PrintBuffer),0);
		  FillChar(strReport,sizeof(strReport),0);

		  RemZeroLead(strTotalMoney);
    7a14:	68 ea       	ldi	r22, 0xA8	; 168
    7a16:	c6 2e       	mov	r12, r22
    7a18:	68 e0       	ldi	r22, 0x08	; 8
    7a1a:	d6 2e       	mov	r13, r22
    7a1c:	c6 01       	movw	r24, r12
    7a1e:	0e 94 df 26 	call	0x4dbe	; 0x4dbe <RemZeroLead>
		  RemZeroLead(strTotalVolume);
    7a22:	57 ef       	ldi	r21, 0xF7	; 247
    7a24:	e5 2e       	mov	r14, r21
    7a26:	57 e0       	ldi	r21, 0x07	; 7
    7a28:	f5 2e       	mov	r15, r21
    7a2a:	c7 01       	movw	r24, r14
    7a2c:	0e 94 df 26 	call	0x4dbe	; 0x4dbe <RemZeroLead>

		  FormatTotalizerMoney(strTotalMoney);
    7a30:	c6 01       	movw	r24, r12
    7a32:	0e 94 e5 35 	call	0x6bca	; 0x6bca <FormatTotalizerMoney>
		  FormatCurrency(strTotalMoney);
    7a36:	c6 01       	movw	r24, r12
    7a38:	0e 94 ad 34 	call	0x695a	; 0x695a <FormatCurrency>
		  FormatTotalizerVolume(strTotalVolume);
    7a3c:	c7 01       	movw	r24, r14
    7a3e:	0e 94 d7 35 	call	0x6bae	; 0x6bae <FormatTotalizerVolume>
		  FormatCurrency(strTotalVolume);
    7a42:	c7 01       	movw	r24, r14
    7a44:	0e 94 ad 34 	call	0x695a	; 0x695a <FormatCurrency>

          //Test
		  //RemZeroLead(strTotalMoney);
		  //RemZeroLead(strTotalVolume);

		  InserBorder(btTopLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btTopRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);          
    7a48:	81 e0       	ldi	r24, 0x01	; 1
    7a4a:	6c ee       	ldi	r22, 0xEC	; 236
    7a4c:	73 e0       	ldi	r23, 0x03	; 3
    7a4e:	41 e0       	ldi	r20, 0x01	; 1
    7a50:	26 ed       	ldi	r18, 0xD6	; 214
    7a52:	31 e0       	ldi	r19, 0x01	; 1
    7a54:	0e 94 81 1a 	call	0x3502	; 0x3502 <InserBorder>
    7a58:	8b e0       	ldi	r24, 0x0B	; 11
    7a5a:	6c ee       	ldi	r22, 0xEC	; 236
    7a5c:	73 e0       	ldi	r23, 0x03	; 3
    7a5e:	4a e2       	ldi	r20, 0x2A	; 42
    7a60:	26 ed       	ldi	r18, 0xD6	; 214
    7a62:	31 e0       	ldi	r19, 0x01	; 1
    7a64:	0e 94 81 1a 	call	0x3502	; 0x3502 <InserBorder>
    7a68:	83 e0       	ldi	r24, 0x03	; 3
    7a6a:	6c ee       	ldi	r22, 0xEC	; 236
    7a6c:	73 e0       	ldi	r23, 0x03	; 3
    7a6e:	41 e0       	ldi	r20, 0x01	; 1
    7a70:	26 ed       	ldi	r18, 0xD6	; 214
    7a72:	31 e0       	ldi	r19, 0x01	; 1
    7a74:	0e 94 81 1a 	call	0x3502	; 0x3502 <InserBorder>
    7a78:	8c e0       	ldi	r24, 0x0C	; 12
    7a7a:	6c ee       	ldi	r22, 0xEC	; 236
    7a7c:	73 e0       	ldi	r23, 0x03	; 3
    7a7e:	41 e0       	ldi	r20, 0x01	; 1
    7a80:	26 ed       	ldi	r18, 0xD6	; 214
    7a82:	31 e0       	ldi	r19, 0x01	; 1
    7a84:	0e 94 81 1a 	call	0x3502	; 0x3502 <InserBorder>
		  GetTabSpace((17-strlen(strTotalVolume)),strTabSpace);
    7a88:	f7 01       	movw	r30, r14
    7a8a:	01 90       	ld	r0, Z+
    7a8c:	00 20       	and	r0, r0
    7a8e:	e9 f7       	brne	.-6      	; 0x7a8a <systemGenerateReport+0xe50>
    7a90:	31 97       	sbiw	r30, 0x01	; 1
    7a92:	ee 19       	sub	r30, r14
    7a94:	ff 09       	sbc	r31, r15
    7a96:	8e 01       	movw	r16, r28
    7a98:	07 59       	subi	r16, 0x97	; 151
    7a9a:	1f 4f       	sbci	r17, 0xFF	; 255
    7a9c:	81 e1       	ldi	r24, 0x11	; 17
    7a9e:	8e 1b       	sub	r24, r30
    7aa0:	b8 01       	movw	r22, r16
    7aa2:	0e 94 31 1a 	call	0x3462	; 0x3462 <GetTabSpace>
		  GetTabSpace((15-strlen(strTotalMoney)),strTabSpace2);
    7aa6:	f6 01       	movw	r30, r12
    7aa8:	01 90       	ld	r0, Z+
    7aaa:	00 20       	and	r0, r0
    7aac:	e9 f7       	brne	.-6      	; 0x7aa8 <systemGenerateReport+0xe6e>
    7aae:	31 97       	sbiw	r30, 0x01	; 1
    7ab0:	ec 19       	sub	r30, r12
    7ab2:	fd 09       	sbc	r31, r13
    7ab4:	4d e7       	ldi	r20, 0x7D	; 125
    7ab6:	a4 2e       	mov	r10, r20
    7ab8:	b1 2c       	mov	r11, r1
    7aba:	ac 0e       	add	r10, r28
    7abc:	bd 1e       	adc	r11, r29
    7abe:	8f e0       	ldi	r24, 0x0F	; 15
    7ac0:	8e 1b       	sub	r24, r30
    7ac2:	b5 01       	movw	r22, r10
    7ac4:	0e 94 31 1a 	call	0x3462	; 0x3462 <GetTabSpace>
          //PrintMoney
		  if (eeprom_read_byte(&DefPrintMoney)==True)sprintf_P(strReport,PSTR("TOTAL %s%s%s%s"),strTabSpace,strTotalVolume,strTabSpace2,strTotalMoney);//CreateReport(strReport,PrintBuffer,&RepPos);
    7ac8:	81 ec       	ldi	r24, 0xC1	; 193
    7aca:	93 e0       	ldi	r25, 0x03	; 3
    7acc:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
    7ad0:	81 30       	cpi	r24, 0x01	; 1
    7ad2:	11 f5       	brne	.+68     	; 0x7b18 <systemGenerateReport+0xede>
    7ad4:	ad b7       	in	r26, 0x3d	; 61
    7ad6:	be b7       	in	r27, 0x3e	; 62
    7ad8:	1c 97       	sbiw	r26, 0x0c	; 12
    7ada:	0f b6       	in	r0, 0x3f	; 63
    7adc:	f8 94       	cli
    7ade:	be bf       	out	0x3e, r27	; 62
    7ae0:	0f be       	out	0x3f, r0	; 63
    7ae2:	ad bf       	out	0x3d, r26	; 61
    7ae4:	ed b7       	in	r30, 0x3d	; 61
    7ae6:	fe b7       	in	r31, 0x3e	; 62
    7ae8:	31 96       	adiw	r30, 0x01	; 1
    7aea:	11 96       	adiw	r26, 0x01	; 1
    7aec:	9c 92       	st	X, r9
    7aee:	11 97       	sbiw	r26, 0x01	; 1
    7af0:	12 96       	adiw	r26, 0x02	; 2
    7af2:	8c 92       	st	X, r8
    7af4:	8a e8       	ldi	r24, 0x8A	; 138
    7af6:	95 e0       	ldi	r25, 0x05	; 5
    7af8:	93 83       	std	Z+3, r25	; 0x03
    7afa:	82 83       	std	Z+2, r24	; 0x02
    7afc:	15 83       	std	Z+5, r17	; 0x05
    7afe:	04 83       	std	Z+4, r16	; 0x04
    7b00:	f7 82       	std	Z+7, r15	; 0x07
    7b02:	e6 82       	std	Z+6, r14	; 0x06
    7b04:	b1 86       	std	Z+9, r11	; 0x09
    7b06:	a0 86       	std	Z+8, r10	; 0x08
    7b08:	d3 86       	std	Z+11, r13	; 0x0b
    7b0a:	c2 86       	std	Z+10, r12	; 0x0a
    7b0c:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
    7b10:	ed b7       	in	r30, 0x3d	; 61
    7b12:	fe b7       	in	r31, 0x3e	; 62
    7b14:	3c 96       	adiw	r30, 0x0c	; 12
    7b16:	1f c0       	rjmp	.+62     	; 0x7b56 <systemGenerateReport+0xf1c>
		  else sprintf_P(strReport,PSTR("TOTAL %s%s"),strTabSpace,strTotalVolume);CreateReport(strReport,PrintBuffer,&RepPos);
    7b18:	8d b7       	in	r24, 0x3d	; 61
    7b1a:	9e b7       	in	r25, 0x3e	; 62
    7b1c:	08 97       	sbiw	r24, 0x08	; 8
    7b1e:	0f b6       	in	r0, 0x3f	; 63
    7b20:	f8 94       	cli
    7b22:	9e bf       	out	0x3e, r25	; 62
    7b24:	0f be       	out	0x3f, r0	; 63
    7b26:	8d bf       	out	0x3d, r24	; 61
    7b28:	ed b7       	in	r30, 0x3d	; 61
    7b2a:	fe b7       	in	r31, 0x3e	; 62
    7b2c:	31 96       	adiw	r30, 0x01	; 1
    7b2e:	ad b7       	in	r26, 0x3d	; 61
    7b30:	be b7       	in	r27, 0x3e	; 62
    7b32:	11 96       	adiw	r26, 0x01	; 1
    7b34:	9c 92       	st	X, r9
    7b36:	11 97       	sbiw	r26, 0x01	; 1
    7b38:	12 96       	adiw	r26, 0x02	; 2
    7b3a:	8c 92       	st	X, r8
    7b3c:	8f e7       	ldi	r24, 0x7F	; 127
    7b3e:	95 e0       	ldi	r25, 0x05	; 5
    7b40:	93 83       	std	Z+3, r25	; 0x03
    7b42:	82 83       	std	Z+2, r24	; 0x02
    7b44:	15 83       	std	Z+5, r17	; 0x05
    7b46:	04 83       	std	Z+4, r16	; 0x04
    7b48:	f7 82       	std	Z+7, r15	; 0x07
    7b4a:	e6 82       	std	Z+6, r14	; 0x06
    7b4c:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
    7b50:	ed b7       	in	r30, 0x3d	; 61
    7b52:	fe b7       	in	r31, 0x3e	; 62
    7b54:	38 96       	adiw	r30, 0x08	; 8
    7b56:	0f b6       	in	r0, 0x3f	; 63
    7b58:	f8 94       	cli
    7b5a:	fe bf       	out	0x3e, r31	; 62
    7b5c:	0f be       	out	0x3f, r0	; 63
    7b5e:	ed bf       	out	0x3d, r30	; 61
    7b60:	ce 01       	movw	r24, r28
    7b62:	8b 55       	subi	r24, 0x5B	; 91
    7b64:	9f 4f       	sbci	r25, 0xFF	; 255
    7b66:	6c ee       	ldi	r22, 0xEC	; 236
    7b68:	73 e0       	ldi	r23, 0x03	; 3
    7b6a:	46 ed       	ldi	r20, 0xD6	; 214
    7b6c:	51 e0       	ldi	r21, 0x01	; 1
    7b6e:	0e 94 b5 23 	call	0x476a	; 0x476a <CreateReport>

		  InserBorder(btMiddleLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btMiddleRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);     	      
    7b72:	84 e0       	ldi	r24, 0x04	; 4
    7b74:	6c ee       	ldi	r22, 0xEC	; 236
    7b76:	73 e0       	ldi	r23, 0x03	; 3
    7b78:	41 e0       	ldi	r20, 0x01	; 1
    7b7a:	26 ed       	ldi	r18, 0xD6	; 214
    7b7c:	31 e0       	ldi	r19, 0x01	; 1
    7b7e:	0e 94 81 1a 	call	0x3502	; 0x3502 <InserBorder>
    7b82:	8b e0       	ldi	r24, 0x0B	; 11
    7b84:	6c ee       	ldi	r22, 0xEC	; 236
    7b86:	73 e0       	ldi	r23, 0x03	; 3
    7b88:	4a e2       	ldi	r20, 0x2A	; 42
    7b8a:	26 ed       	ldi	r18, 0xD6	; 214
    7b8c:	31 e0       	ldi	r19, 0x01	; 1
    7b8e:	0e 94 81 1a 	call	0x3502	; 0x3502 <InserBorder>
    7b92:	86 e0       	ldi	r24, 0x06	; 6
    7b94:	6c ee       	ldi	r22, 0xEC	; 236
    7b96:	73 e0       	ldi	r23, 0x03	; 3
    7b98:	41 e0       	ldi	r20, 0x01	; 1
    7b9a:	26 ed       	ldi	r18, 0xD6	; 214
    7b9c:	31 e0       	ldi	r19, 0x01	; 1
    7b9e:	0e 94 81 1a 	call	0x3502	; 0x3502 <InserBorder>
    7ba2:	8c e0       	ldi	r24, 0x0C	; 12
    7ba4:	6c ee       	ldi	r22, 0xEC	; 236
    7ba6:	73 e0       	ldi	r23, 0x03	; 3
    7ba8:	41 e0       	ldi	r20, 0x01	; 1
    7baa:	26 ed       	ldi	r18, 0xD6	; 214
    7bac:	31 e0       	ldi	r19, 0x01	; 1
    7bae:	0e 94 81 1a 	call	0x3502	; 0x3502 <InserBorder>
    7bb2:	cb 50       	subi	r28, 0x0B	; 11
    7bb4:	df 4f       	sbci	r29, 0xFF	; 255
    7bb6:	18 82       	st	Y, r1
    7bb8:	c5 5f       	subi	r28, 0xF5	; 245
    7bba:	d0 40       	sbci	r29, 0x00	; 0

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    7bbc:	ce 01       	movw	r24, r28
    7bbe:	88 96       	adiw	r24, 0x28	; 40
    7bc0:	c6 50       	subi	r28, 0x06	; 6
    7bc2:	df 4f       	sbci	r29, 0xFF	; 255
    7bc4:	99 83       	std	Y+1, r25	; 0x01
    7bc6:	88 83       	st	Y, r24
    7bc8:	ca 5f       	subi	r28, 0xFA	; 250
    7bca:	d0 40       	sbci	r29, 0x00	; 0
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
    7bcc:	37 e3       	ldi	r19, 0x37	; 55
    7bce:	23 2e       	mov	r2, r19
    7bd0:	31 2c       	mov	r3, r1
    7bd2:	2c 0e       	add	r2, r28
    7bd4:	3d 1e       	adc	r3, r29
    7bd6:	d1 01       	movw	r26, r2
    7bd8:	1f 96       	adiw	r26, 0x0f	; 15
    7bda:	ca 50       	subi	r28, 0x0A	; 10
    7bdc:	df 4f       	sbci	r29, 0xFF	; 255
    7bde:	b9 83       	std	Y+1, r27	; 0x01
    7be0:	a8 83       	st	Y, r26
    7be2:	c6 5f       	subi	r28, 0xF6	; 246
    7be4:	d0 40       	sbci	r29, 0x00	; 0
    7be6:	e6 e4       	ldi	r30, 0x46	; 70
    7be8:	f0 e0       	ldi	r31, 0x00	; 0
    7bea:	ec 0f       	add	r30, r28
    7bec:	fd 1f       	adc	r31, r29
    7bee:	3f 96       	adiw	r30, 0x0f	; 15
    7bf0:	c8 50       	subi	r28, 0x08	; 8
    7bf2:	df 4f       	sbci	r29, 0xFF	; 255
    7bf4:	f9 83       	std	Y+1, r31	; 0x01
    7bf6:	e8 83       	st	Y, r30
    7bf8:	c8 5f       	subi	r28, 0xF8	; 248
    7bfa:	d0 40       	sbci	r29, 0x00	; 0
    7bfc:	da c1       	rjmp	.+948    	; 0x7fb2 <systemGenerateReport+0x1378>
    7bfe:	f2 01       	movw	r30, r4
    7c00:	e8 52       	subi	r30, 0x28	; 40
    7c02:	fe 4f       	sbci	r31, 0xFE	; 254
    7c04:	80 81       	ld	r24, Z
    7c06:	80 53       	subi	r24, 0x30	; 48
    7c08:	8a 30       	cpi	r24, 0x0A	; 10
    7c0a:	08 f0       	brcs	.+2      	; 0x7c0e <systemGenerateReport+0xfd4>
    7c0c:	80 e0       	ldi	r24, 0x00	; 0
		  else sprintf_P(strReport,PSTR("TOTAL %s%s"),strTabSpace,strTotalVolume);CreateReport(strReport,PrintBuffer,&RepPos);

		  InserBorder(btMiddleLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btMiddleRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);     	      

		  for(iTotal=0;iTotal<strlen(GradeList);iTotal++){
		      xGrade=Ord(GradeList[iTotal]);
    7c0e:	80 93 e5 01 	sts	0x01E5, r24
			  if (xGrade>0){
    7c12:	88 23       	and	r24, r24
    7c14:	09 f4       	brne	.+2      	; 0x7c18 <systemGenerateReport+0xfde>
    7c16:	c2 c1       	rjmp	.+900    	; 0x7f9c <systemGenerateReport+0x1362>
			      GetProductName(xGrade,strProduct);
    7c18:	6e e5       	ldi	r22, 0x5E	; 94
    7c1a:	77 e0       	ldi	r23, 0x07	; 7
    7c1c:	0e 94 7f 2f 	call	0x5efe	; 0x5efe <GetProductName>
    7c20:	e7 ef       	ldi	r30, 0xF7	; 247
    7c22:	f7 e0       	ldi	r31, 0x07	; 7
}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
	     strMemory[i]=data;
    7c24:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    7c26:	88 e0       	ldi	r24, 0x08	; 8
    7c28:	eb 30       	cpi	r30, 0x0B	; 11
    7c2a:	f8 07       	cpc	r31, r24
    7c2c:	d9 f7       	brne	.-10     	; 0x7c24 <systemGenerateReport+0xfea>
    7c2e:	e8 ea       	ldi	r30, 0xA8	; 168
    7c30:	f8 e0       	ldi	r31, 0x08	; 8
	     strMemory[i]=data;
    7c32:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    7c34:	98 e0       	ldi	r25, 0x08	; 8
    7c36:	ec 3b       	cpi	r30, 0xBC	; 188
    7c38:	f9 07       	cpc	r31, r25
    7c3a:	d9 f7       	brne	.-10     	; 0x7c32 <systemGenerateReport+0xff8>
			      GetProductName(xGrade,strProduct);
				  
				  FillChar(strTotalVolume,sizeof(strTotalVolume),0);
				  FillChar(strTotalMoney,sizeof(strTotalMoney),0);

				  for(xPump=1;xPump<=8;xPump++){
    7c3c:	81 e0       	ldi	r24, 0x01	; 1
    7c3e:	80 93 e7 01 	sts	0x01E7, r24
				      eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap, 8);
    7c42:	27 e0       	ldi	r18, 0x07	; 7
    7c44:	82 2e       	mov	r8, r18
    7c46:	91 2c       	mov	r9, r1
    7c48:	8c 0e       	add	r8, r28
    7c4a:	9d 1e       	adc	r9, r29

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    7c4c:	99 e1       	ldi	r25, 0x19	; 25
    7c4e:	c9 2e       	mov	r12, r25
    7c50:	d1 2c       	mov	r13, r1
    7c52:	cc 0e       	add	r12, r28
    7c54:	dd 1e       	adc	r13, r29
								      NormalizeOverflow(strDeltaVolume);


								  //Calculate Wayne Estimated Total Money
								  if (eeprom_read_byte(&DefDispenserBrand)==ST_WAYNE_DART){
						              GetProductPrice(sPrice,PumpNum,PumpNozzle);//Money = Price x Volume
    7c56:	8f e0       	ldi	r24, 0x0F	; 15
    7c58:	a8 2e       	mov	r10, r24
    7c5a:	b1 2c       	mov	r11, r1
    7c5c:	ac 0e       	add	r10, r28
    7c5e:	bd 1e       	adc	r11, r29
    7c60:	ee c0       	rjmp	.+476    	; 0x7e3e <systemGenerateReport+0x1204>
				  
				  FillChar(strTotalVolume,sizeof(strTotalVolume),0);
				  FillChar(strTotalMoney,sizeof(strTotalMoney),0);

				  for(xPump=1;xPump<=8;xPump++){
				      eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap, 8);
    7c62:	c4 01       	movw	r24, r8
    7c64:	65 e4       	ldi	r22, 0x45	; 69
    7c66:	70 e0       	ldi	r23, 0x00	; 0
    7c68:	48 e0       	ldi	r20, 0x08	; 8
    7c6a:	50 e0       	ldi	r21, 0x00	; 0
    7c6c:	0e 94 b9 ac 	call	0x15972	; 0x15972 <__eerd_block_m128>
			          PumpNum=PPumpID[xPump-1];
    7c70:	80 91 e7 01 	lds	r24, 0x01E7
    7c74:	fe 01       	movw	r30, r28
    7c76:	e8 0f       	add	r30, r24
    7c78:	f1 1d       	adc	r31, r1
    7c7a:	86 81       	ldd	r24, Z+6	; 0x06
    7c7c:	80 93 e4 01 	sts	0x01E4, r24
					  if (PumpNum>0){
    7c80:	88 23       	and	r24, r24
    7c82:	09 f4       	brne	.+2      	; 0x7c86 <systemGenerateReport+0x104c>
    7c84:	d7 c0       	rjmp	.+430    	; 0x7e34 <systemGenerateReport+0x11fa>
						  for (xNozzle=1;xNozzle<=6;xNozzle++){
    7c86:	81 e0       	ldi	r24, 0x01	; 1
    7c88:	80 93 e6 01 	sts	0x01E6, r24
							  eeprom_read_block((void*) &PProductID, (const void*) &DefNozzleMap[xPump-1], 6);
    7c8c:	06 e0       	ldi	r16, 0x06	; 6
    7c8e:	e0 2e       	mov	r14, r16
    7c90:	cc c0       	rjmp	.+408    	; 0x7e2a <systemGenerateReport+0x11f0>
    7c92:	60 91 e7 01 	lds	r22, 0x01E7
    7c96:	6e 9d       	mul	r22, r14
    7c98:	b0 01       	movw	r22, r0
    7c9a:	11 24       	eor	r1, r1
    7c9c:	61 5b       	subi	r22, 0xB1	; 177
    7c9e:	7f 4f       	sbci	r23, 0xFF	; 255
    7ca0:	ce 01       	movw	r24, r28
    7ca2:	01 96       	adiw	r24, 0x01	; 1
    7ca4:	46 e0       	ldi	r20, 0x06	; 6
    7ca6:	50 e0       	ldi	r21, 0x00	; 0
    7ca8:	0e 94 b9 ac 	call	0x15972	; 0x15972 <__eerd_block_m128>
							  //Found Grade
						      if (PProductID[xNozzle-1]==xGrade){
    7cac:	80 91 e6 01 	lds	r24, 0x01E6
    7cb0:	fe 01       	movw	r30, r28
    7cb2:	e8 0f       	add	r30, r24
    7cb4:	f1 1d       	adc	r31, r1
    7cb6:	90 81       	ld	r25, Z
    7cb8:	80 91 e5 01 	lds	r24, 0x01E5
    7cbc:	98 17       	cp	r25, r24
    7cbe:	09 f0       	breq	.+2      	; 0x7cc2 <systemGenerateReport+0x1088>
    7cc0:	af c0       	rjmp	.+350    	; 0x7e20 <systemGenerateReport+0x11e6>
    7cc2:	ed e2       	ldi	r30, 0x2D	; 45
    7cc4:	fc e0       	ldi	r31, 0x0C	; 12
}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
	     strMemory[i]=data;
    7cc6:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    7cc8:	ac e0       	ldi	r26, 0x0C	; 12
    7cca:	ec 33       	cpi	r30, 0x3C	; 60
    7ccc:	fa 07       	cpc	r31, r26
    7cce:	d9 f7       	brne	.-10     	; 0x7cc6 <systemGenerateReport+0x108c>
    7cd0:	e5 e0       	ldi	r30, 0x05	; 5
    7cd2:	f9 e0       	ldi	r31, 0x09	; 9
	     strMemory[i]=data;
    7cd4:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    7cd6:	b9 e0       	ldi	r27, 0x09	; 9
    7cd8:	e4 31       	cpi	r30, 0x14	; 20
    7cda:	fb 07       	cpc	r31, r27
    7cdc:	d9 f7       	brne	.-10     	; 0x7cd4 <systemGenerateReport+0x109a>
    7cde:	f6 01       	movw	r30, r12
	     strMemory[i]=data;
    7ce0:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    7ce2:	c6 50       	subi	r28, 0x06	; 6
    7ce4:	df 4f       	sbci	r29, 0xFF	; 255
    7ce6:	88 81       	ld	r24, Y
    7ce8:	99 81       	ldd	r25, Y+1	; 0x01
    7cea:	ca 5f       	subi	r28, 0xFA	; 250
    7cec:	d0 40       	sbci	r29, 0x00	; 0
    7cee:	e8 17       	cp	r30, r24
    7cf0:	f9 07       	cpc	r31, r25
    7cf2:	b1 f7       	brne	.-20     	; 0x7ce0 <systemGenerateReport+0x10a6>
    7cf4:	fe 01       	movw	r30, r28
    7cf6:	b8 96       	adiw	r30, 0x28	; 40
	     strMemory[i]=data;
    7cf8:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    7cfa:	e2 15       	cp	r30, r2
    7cfc:	f3 05       	cpc	r31, r3
    7cfe:	e1 f7       	brne	.-8      	; 0x7cf8 <systemGenerateReport+0x10be>
    7d00:	f1 01       	movw	r30, r2
	     strMemory[i]=data;
    7d02:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    7d04:	ca 50       	subi	r28, 0x0A	; 10
    7d06:	df 4f       	sbci	r29, 0xFF	; 255
    7d08:	a8 81       	ld	r26, Y
    7d0a:	b9 81       	ldd	r27, Y+1	; 0x01
    7d0c:	c6 5f       	subi	r28, 0xF6	; 246
    7d0e:	d0 40       	sbci	r29, 0x00	; 0
    7d10:	ea 17       	cp	r30, r26
    7d12:	fb 07       	cpc	r31, r27
    7d14:	b1 f7       	brne	.-20     	; 0x7d02 <systemGenerateReport+0x10c8>
    7d16:	fe 01       	movw	r30, r28
    7d18:	ea 5b       	subi	r30, 0xBA	; 186
    7d1a:	ff 4f       	sbci	r31, 0xFF	; 255
	     strMemory[i]=data;
    7d1c:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    7d1e:	c8 50       	subi	r28, 0x08	; 8
    7d20:	df 4f       	sbci	r29, 0xFF	; 255
    7d22:	88 81       	ld	r24, Y
    7d24:	99 81       	ldd	r25, Y+1	; 0x01
    7d26:	c8 5f       	subi	r28, 0xF8	; 248
    7d28:	d0 40       	sbci	r29, 0x00	; 0
    7d2a:	e8 17       	cp	r30, r24
    7d2c:	f9 07       	cpc	r31, r25
    7d2e:	b1 f7       	brne	.-20     	; 0x7d1c <systemGenerateReport+0x10e2>
								  FillChar(strLastVolume,sizeof(strLastVolume),0);
								  FillChar(strLastMoney,sizeof(strLastMoney),0);
								  FillChar(strCurrentVolume,sizeof(strCurrentVolume),0);
								  FillChar(strCurrentMoney,sizeof(strCurrentMoney),0);

								  PumpNozzle=xNozzle;
    7d30:	80 91 e6 01 	lds	r24, 0x01E6
    7d34:	80 93 e3 01 	sts	0x01E3, r24
								  
								  FIPAddr=GetFIPAddr(PumpNum); 
    7d38:	80 91 e4 01 	lds	r24, 0x01E4
    7d3c:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <GetFIPAddr>
								  if (FIPAddr>0){
    7d40:	88 23       	and	r24, r24
    7d42:	31 f1       	breq	.+76     	; 0x7d90 <systemGenerateReport+0x1156>
									  FIPAddr=FIPAddr-1;							  							  							      
    7d44:	f8 2e       	mov	r15, r24
    7d46:	fa 94       	dec	r15
									  GetTotalizerData(TVOLUME,TOTALIZER_LAST,FIPAddr,PumpNozzle,strLastVolume);
    7d48:	80 e0       	ldi	r24, 0x00	; 0
    7d4a:	60 e0       	ldi	r22, 0x00	; 0
    7d4c:	4f 2d       	mov	r20, r15
    7d4e:	20 91 e3 01 	lds	r18, 0x01E3
    7d52:	86 01       	movw	r16, r12
    7d54:	0e 94 ac 20 	call	0x4158	; 0x4158 <GetTotalizerData>
									  GetTotalizerData(TMONEY,TOTALIZER_LAST,FIPAddr,PumpNozzle,strLastMoney);
    7d58:	81 e0       	ldi	r24, 0x01	; 1
    7d5a:	60 e0       	ldi	r22, 0x00	; 0
    7d5c:	4f 2d       	mov	r20, r15
    7d5e:	20 91 e3 01 	lds	r18, 0x01E3
    7d62:	8e 01       	movw	r16, r28
    7d64:	08 5d       	subi	r16, 0xD8	; 216
    7d66:	1f 4f       	sbci	r17, 0xFF	; 255
    7d68:	0e 94 ac 20 	call	0x4158	; 0x4158 <GetTotalizerData>

									  GetTotalizerData(TVOLUME,TOTALIZER_NOW,FIPAddr,PumpNozzle,strCurrentVolume);
    7d6c:	80 e0       	ldi	r24, 0x00	; 0
    7d6e:	61 e0       	ldi	r22, 0x01	; 1
    7d70:	4f 2d       	mov	r20, r15
    7d72:	20 91 e3 01 	lds	r18, 0x01E3
    7d76:	81 01       	movw	r16, r2
    7d78:	0e 94 ac 20 	call	0x4158	; 0x4158 <GetTotalizerData>
									  GetTotalizerData(TMONEY,TOTALIZER_NOW,FIPAddr,PumpNozzle,strCurrentMoney);
    7d7c:	81 e0       	ldi	r24, 0x01	; 1
    7d7e:	61 e0       	ldi	r22, 0x01	; 1
    7d80:	4f 2d       	mov	r20, r15
    7d82:	20 91 e3 01 	lds	r18, 0x01E3
    7d86:	8e 01       	movw	r16, r28
    7d88:	0a 5b       	subi	r16, 0xBA	; 186
    7d8a:	1f 4f       	sbci	r17, 0xFF	; 255
    7d8c:	0e 94 ac 20 	call	0x4158	; 0x4158 <GetTotalizerData>
								  }

								  StrCalc(TMINUS,strCurrentVolume,strLastVolume,strDeltaVolume);
    7d90:	80 e0       	ldi	r24, 0x00	; 0
    7d92:	b1 01       	movw	r22, r2
    7d94:	a6 01       	movw	r20, r12
    7d96:	25 e0       	ldi	r18, 0x05	; 5
    7d98:	39 e0       	ldi	r19, 0x09	; 9
    7d9a:	0e 94 17 2b 	call	0x562e	; 0x562e <StrCalc>
								  if (IsMinus(strDeltaVolume)==True)
    7d9e:	85 e0       	ldi	r24, 0x05	; 5
    7da0:	99 e0       	ldi	r25, 0x09	; 9
    7da2:	0e 94 1a 25 	call	0x4a34	; 0x4a34 <IsMinus>
    7da6:	81 30       	cpi	r24, 0x01	; 1
    7da8:	21 f4       	brne	.+8      	; 0x7db2 <systemGenerateReport+0x1178>
								      NormalizeOverflow(strDeltaVolume);
    7daa:	85 e0       	ldi	r24, 0x05	; 5
    7dac:	99 e0       	ldi	r25, 0x09	; 9
    7dae:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <NormalizeOverflow>


								  //Calculate Wayne Estimated Total Money
								  if (eeprom_read_byte(&DefDispenserBrand)==ST_WAYNE_DART){
    7db2:	87 e3       	ldi	r24, 0x37	; 55
    7db4:	91 e0       	ldi	r25, 0x01	; 1
    7db6:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
    7dba:	82 30       	cpi	r24, 0x02	; 2
    7dbc:	61 f4       	brne	.+24     	; 0x7dd6 <systemGenerateReport+0x119c>
						              GetProductPrice(sPrice,PumpNum,PumpNozzle);//Money = Price x Volume
    7dbe:	c5 01       	movw	r24, r10
    7dc0:	60 91 e4 01 	lds	r22, 0x01E4
    7dc4:	40 91 e3 01 	lds	r20, 0x01E3
    7dc8:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <GetProductPrice>
									  StrCalc(TMULTIPLY,sPrice,strDeltaVolume,strDeltaMoney);
    7dcc:	82 e0       	ldi	r24, 0x02	; 2
    7dce:	b5 01       	movw	r22, r10
    7dd0:	45 e0       	ldi	r20, 0x05	; 5
    7dd2:	59 e0       	ldi	r21, 0x09	; 9
    7dd4:	07 c0       	rjmp	.+14     	; 0x7de4 <systemGenerateReport+0x11aa>
								  }else StrCalc(TMINUS,strCurrentMoney,strLastMoney,strDeltaMoney);
    7dd6:	80 e0       	ldi	r24, 0x00	; 0
    7dd8:	be 01       	movw	r22, r28
    7dda:	6a 5b       	subi	r22, 0xBA	; 186
    7ddc:	7f 4f       	sbci	r23, 0xFF	; 255
    7dde:	ae 01       	movw	r20, r28
    7de0:	48 5d       	subi	r20, 0xD8	; 216
    7de2:	5f 4f       	sbci	r21, 0xFF	; 255
    7de4:	2d e2       	ldi	r18, 0x2D	; 45
    7de6:	3c e0       	ldi	r19, 0x0C	; 12
    7de8:	0e 94 17 2b 	call	0x562e	; 0x562e <StrCalc>
								  //StrCalc(TMINUS,strCurrentMoney,strLastMoney,strDeltaMoney);
								  if (IsMinus(strDeltaMoney)==True)
    7dec:	8d e2       	ldi	r24, 0x2D	; 45
    7dee:	9c e0       	ldi	r25, 0x0C	; 12
    7df0:	0e 94 1a 25 	call	0x4a34	; 0x4a34 <IsMinus>
    7df4:	81 30       	cpi	r24, 0x01	; 1
    7df6:	21 f4       	brne	.+8      	; 0x7e00 <systemGenerateReport+0x11c6>
								      NormalizeOverflow(strDeltaMoney);
    7df8:	8d e2       	ldi	r24, 0x2D	; 45
    7dfa:	9c e0       	ldi	r25, 0x0C	; 12
    7dfc:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <NormalizeOverflow>
		  
								  StrCalc(TPLUS,strTotalVolume,strDeltaVolume,strTotalVolume);
    7e00:	81 e0       	ldi	r24, 0x01	; 1
    7e02:	67 ef       	ldi	r22, 0xF7	; 247
    7e04:	77 e0       	ldi	r23, 0x07	; 7
    7e06:	45 e0       	ldi	r20, 0x05	; 5
    7e08:	59 e0       	ldi	r21, 0x09	; 9
    7e0a:	9b 01       	movw	r18, r22
    7e0c:	0e 94 17 2b 	call	0x562e	; 0x562e <StrCalc>
								  StrCalc(TPLUS,strTotalMoney,strDeltaMoney,strTotalMoney);
    7e10:	81 e0       	ldi	r24, 0x01	; 1
    7e12:	68 ea       	ldi	r22, 0xA8	; 168
    7e14:	78 e0       	ldi	r23, 0x08	; 8
    7e16:	4d e2       	ldi	r20, 0x2D	; 45
    7e18:	5c e0       	ldi	r21, 0x0C	; 12
    7e1a:	9b 01       	movw	r18, r22
    7e1c:	0e 94 17 2b 	call	0x562e	; 0x562e <StrCalc>

				  for(xPump=1;xPump<=8;xPump++){
				      eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap, 8);
			          PumpNum=PPumpID[xPump-1];
					  if (PumpNum>0){
						  for (xNozzle=1;xNozzle<=6;xNozzle++){
    7e20:	80 91 e6 01 	lds	r24, 0x01E6
    7e24:	8f 5f       	subi	r24, 0xFF	; 255
    7e26:	80 93 e6 01 	sts	0x01E6, r24
    7e2a:	80 91 e6 01 	lds	r24, 0x01E6
    7e2e:	87 30       	cpi	r24, 0x07	; 7
    7e30:	08 f4       	brcc	.+2      	; 0x7e34 <systemGenerateReport+0x11fa>
    7e32:	2f cf       	rjmp	.-418    	; 0x7c92 <systemGenerateReport+0x1058>
			      GetProductName(xGrade,strProduct);
				  
				  FillChar(strTotalVolume,sizeof(strTotalVolume),0);
				  FillChar(strTotalMoney,sizeof(strTotalMoney),0);

				  for(xPump=1;xPump<=8;xPump++){
    7e34:	80 91 e7 01 	lds	r24, 0x01E7
    7e38:	8f 5f       	subi	r24, 0xFF	; 255
    7e3a:	80 93 e7 01 	sts	0x01E7, r24
    7e3e:	80 91 e7 01 	lds	r24, 0x01E7
    7e42:	89 30       	cpi	r24, 0x09	; 9
    7e44:	08 f4       	brcc	.+2      	; 0x7e48 <systemGenerateReport+0x120e>
    7e46:	0d cf       	rjmp	.-486    	; 0x7c62 <systemGenerateReport+0x1028>
							  }
						  }
					  }				  
				  }

				  RemZeroLead(strTotalMoney);
    7e48:	18 ea       	ldi	r17, 0xA8	; 168
    7e4a:	a1 2e       	mov	r10, r17
    7e4c:	18 e0       	ldi	r17, 0x08	; 8
    7e4e:	b1 2e       	mov	r11, r17
    7e50:	c5 01       	movw	r24, r10
    7e52:	0e 94 df 26 	call	0x4dbe	; 0x4dbe <RemZeroLead>
				  RemZeroLead(strTotalVolume);
    7e56:	07 ef       	ldi	r16, 0xF7	; 247
    7e58:	17 e0       	ldi	r17, 0x07	; 7
    7e5a:	c8 01       	movw	r24, r16
    7e5c:	0e 94 df 26 	call	0x4dbe	; 0x4dbe <RemZeroLead>

				  FormatTotalizerMoney(strTotalMoney);
    7e60:	c5 01       	movw	r24, r10
    7e62:	0e 94 e5 35 	call	0x6bca	; 0x6bca <FormatTotalizerMoney>
				  FormatCurrency(strTotalMoney);
    7e66:	c5 01       	movw	r24, r10
    7e68:	0e 94 ad 34 	call	0x695a	; 0x695a <FormatCurrency>

				  FormatTotalizerVolume(strTotalVolume);
    7e6c:	c8 01       	movw	r24, r16
    7e6e:	0e 94 d7 35 	call	0x6bae	; 0x6bae <FormatTotalizerVolume>
				  FormatCurrency(strTotalVolume);
    7e72:	c8 01       	movw	r24, r16
    7e74:	0e 94 ad 34 	call	0x695a	; 0x695a <FormatCurrency>
		          //Test
				 // RemZeroLead(strTotalMoney);
				 // RemZeroLead(strTotalVolume);


			      GetTabSpace((21-strlen(strProduct)-strlen(strTotalVolume)),strTabSpace);
    7e78:	be e5       	ldi	r27, 0x5E	; 94
    7e7a:	8b 2e       	mov	r8, r27
    7e7c:	b7 e0       	ldi	r27, 0x07	; 7
    7e7e:	9b 2e       	mov	r9, r27
    7e80:	f4 01       	movw	r30, r8
    7e82:	01 90       	ld	r0, Z+
    7e84:	00 20       	and	r0, r0
    7e86:	e9 f7       	brne	.-6      	; 0x7e82 <systemGenerateReport+0x1248>
    7e88:	31 97       	sbiw	r30, 0x01	; 1
    7e8a:	e8 19       	sub	r30, r8
    7e8c:	f9 09       	sbc	r31, r9
    7e8e:	d8 01       	movw	r26, r16
    7e90:	0d 90       	ld	r0, X+
    7e92:	00 20       	and	r0, r0
    7e94:	e9 f7       	brne	.-6      	; 0x7e90 <systemGenerateReport+0x1256>
    7e96:	11 97       	sbiw	r26, 0x01	; 1
    7e98:	a0 1b       	sub	r26, r16
    7e9a:	b1 0b       	sbc	r27, r17
    7e9c:	e1 95       	neg	r30
    7e9e:	ea 1b       	sub	r30, r26
    7ea0:	a9 e6       	ldi	r26, 0x69	; 105
    7ea2:	ea 2e       	mov	r14, r26
    7ea4:	f1 2c       	mov	r15, r1
    7ea6:	ec 0e       	add	r14, r28
    7ea8:	fd 1e       	adc	r15, r29
    7eaa:	8e 2f       	mov	r24, r30
    7eac:	8b 5e       	subi	r24, 0xEB	; 235
    7eae:	b7 01       	movw	r22, r14
    7eb0:	0e 94 31 1a 	call	0x3462	; 0x3462 <GetTabSpace>
			      GetTabSpace((15-strlen(strTotalMoney)),strTabSpace2);
    7eb4:	f5 01       	movw	r30, r10
    7eb6:	01 90       	ld	r0, Z+
    7eb8:	00 20       	and	r0, r0
    7eba:	e9 f7       	brne	.-6      	; 0x7eb6 <systemGenerateReport+0x127c>
    7ebc:	31 97       	sbiw	r30, 0x01	; 1
    7ebe:	ea 19       	sub	r30, r10
    7ec0:	fb 09       	sbc	r31, r11
    7ec2:	fd e7       	ldi	r31, 0x7D	; 125
    7ec4:	6f 2e       	mov	r6, r31
    7ec6:	71 2c       	mov	r7, r1
    7ec8:	6c 0e       	add	r6, r28
    7eca:	7d 1e       	adc	r7, r29
    7ecc:	8f e0       	ldi	r24, 0x0F	; 15
    7ece:	8e 1b       	sub	r24, r30
    7ed0:	b3 01       	movw	r22, r6
    7ed2:	0e 94 31 1a 	call	0x3462	; 0x3462 <GetTabSpace>

				  //PrintMoney
		          if (eeprom_read_byte(&DefPrintMoney)==True)sprintf_P(strReport,PSTR("%d.%s%s%s%s%s"),iTotal+1,strProduct,strTabSpace,strTotalVolume,strTabSpace2,strTotalMoney);
    7ed6:	81 ec       	ldi	r24, 0xC1	; 193
    7ed8:	93 e0       	ldi	r25, 0x03	; 3
    7eda:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
    7ede:	75 ea       	ldi	r23, 0xA5	; 165
    7ee0:	c7 2e       	mov	r12, r23
    7ee2:	d1 2c       	mov	r13, r1
    7ee4:	cc 0e       	add	r12, r28
    7ee6:	dd 1e       	adc	r13, r29
    7ee8:	92 01       	movw	r18, r4
    7eea:	2f 5f       	subi	r18, 0xFF	; 255
    7eec:	3f 4f       	sbci	r19, 0xFF	; 255
    7eee:	81 30       	cpi	r24, 0x01	; 1
    7ef0:	29 f5       	brne	.+74     	; 0x7f3c <systemGenerateReport+0x1302>
    7ef2:	ad b7       	in	r26, 0x3d	; 61
    7ef4:	be b7       	in	r27, 0x3e	; 62
    7ef6:	50 97       	sbiw	r26, 0x10	; 16
    7ef8:	0f b6       	in	r0, 0x3f	; 63
    7efa:	f8 94       	cli
    7efc:	be bf       	out	0x3e, r27	; 62
    7efe:	0f be       	out	0x3f, r0	; 63
    7f00:	ad bf       	out	0x3d, r26	; 61
    7f02:	ed b7       	in	r30, 0x3d	; 61
    7f04:	fe b7       	in	r31, 0x3e	; 62
    7f06:	31 96       	adiw	r30, 0x01	; 1
    7f08:	12 96       	adiw	r26, 0x02	; 2
    7f0a:	dc 92       	st	X, r13
    7f0c:	ce 92       	st	-X, r12
    7f0e:	11 97       	sbiw	r26, 0x01	; 1
    7f10:	81 e7       	ldi	r24, 0x71	; 113
    7f12:	95 e0       	ldi	r25, 0x05	; 5
    7f14:	93 83       	std	Z+3, r25	; 0x03
    7f16:	82 83       	std	Z+2, r24	; 0x02
    7f18:	35 83       	std	Z+5, r19	; 0x05
    7f1a:	24 83       	std	Z+4, r18	; 0x04
    7f1c:	97 82       	std	Z+7, r9	; 0x07
    7f1e:	86 82       	std	Z+6, r8	; 0x06
    7f20:	f1 86       	std	Z+9, r15	; 0x09
    7f22:	e0 86       	std	Z+8, r14	; 0x08
    7f24:	13 87       	std	Z+11, r17	; 0x0b
    7f26:	02 87       	std	Z+10, r16	; 0x0a
    7f28:	75 86       	std	Z+13, r7	; 0x0d
    7f2a:	64 86       	std	Z+12, r6	; 0x0c
    7f2c:	b7 86       	std	Z+15, r11	; 0x0f
    7f2e:	a6 86       	std	Z+14, r10	; 0x0e
    7f30:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
    7f34:	ed b7       	in	r30, 0x3d	; 61
    7f36:	fe b7       	in	r31, 0x3e	; 62
    7f38:	70 96       	adiw	r30, 0x10	; 16
    7f3a:	22 c0       	rjmp	.+68     	; 0x7f80 <systemGenerateReport+0x1346>
				  else sprintf_P(strReport,PSTR("%d.%s%s%s"),iTotal+1,strProduct,strTabSpace,strTotalVolume);
    7f3c:	8d b7       	in	r24, 0x3d	; 61
    7f3e:	9e b7       	in	r25, 0x3e	; 62
    7f40:	0c 97       	sbiw	r24, 0x0c	; 12
    7f42:	0f b6       	in	r0, 0x3f	; 63
    7f44:	f8 94       	cli
    7f46:	9e bf       	out	0x3e, r25	; 62
    7f48:	0f be       	out	0x3f, r0	; 63
    7f4a:	8d bf       	out	0x3d, r24	; 61
    7f4c:	ed b7       	in	r30, 0x3d	; 61
    7f4e:	fe b7       	in	r31, 0x3e	; 62
    7f50:	31 96       	adiw	r30, 0x01	; 1
    7f52:	ad b7       	in	r26, 0x3d	; 61
    7f54:	be b7       	in	r27, 0x3e	; 62
    7f56:	12 96       	adiw	r26, 0x02	; 2
    7f58:	dc 92       	st	X, r13
    7f5a:	ce 92       	st	-X, r12
    7f5c:	11 97       	sbiw	r26, 0x01	; 1
    7f5e:	87 e6       	ldi	r24, 0x67	; 103
    7f60:	95 e0       	ldi	r25, 0x05	; 5
    7f62:	93 83       	std	Z+3, r25	; 0x03
    7f64:	82 83       	std	Z+2, r24	; 0x02
    7f66:	35 83       	std	Z+5, r19	; 0x05
    7f68:	24 83       	std	Z+4, r18	; 0x04
    7f6a:	97 82       	std	Z+7, r9	; 0x07
    7f6c:	86 82       	std	Z+6, r8	; 0x06
    7f6e:	f1 86       	std	Z+9, r15	; 0x09
    7f70:	e0 86       	std	Z+8, r14	; 0x08
    7f72:	13 87       	std	Z+11, r17	; 0x0b
    7f74:	02 87       	std	Z+10, r16	; 0x0a
    7f76:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
    7f7a:	ed b7       	in	r30, 0x3d	; 61
    7f7c:	fe b7       	in	r31, 0x3e	; 62
    7f7e:	3c 96       	adiw	r30, 0x0c	; 12
    7f80:	0f b6       	in	r0, 0x3f	; 63
    7f82:	f8 94       	cli
    7f84:	fe bf       	out	0x3e, r31	; 62
    7f86:	0f be       	out	0x3f, r0	; 63
    7f88:	ed bf       	out	0x3d, r30	; 61

				  CreateReport(strReport,PrintBuffer,&RepPos);
    7f8a:	ce 01       	movw	r24, r28
    7f8c:	8b 55       	subi	r24, 0x5B	; 91
    7f8e:	9f 4f       	sbci	r25, 0xFF	; 255
    7f90:	6c ee       	ldi	r22, 0xEC	; 236
    7f92:	73 e0       	ldi	r23, 0x03	; 3
    7f94:	46 ed       	ldi	r20, 0xD6	; 214
    7f96:	51 e0       	ldi	r21, 0x01	; 1
    7f98:	0e 94 b5 23 	call	0x476a	; 0x476a <CreateReport>
		  if (eeprom_read_byte(&DefPrintMoney)==True)sprintf_P(strReport,PSTR("TOTAL %s%s%s%s"),strTabSpace,strTotalVolume,strTabSpace2,strTotalMoney);//CreateReport(strReport,PrintBuffer,&RepPos);
		  else sprintf_P(strReport,PSTR("TOTAL %s%s"),strTabSpace,strTotalVolume);CreateReport(strReport,PrintBuffer,&RepPos);

		  InserBorder(btMiddleLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btMiddleRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);     	      

		  for(iTotal=0;iTotal<strlen(GradeList);iTotal++){
    7f9c:	cb 50       	subi	r28, 0x0B	; 11
    7f9e:	df 4f       	sbci	r29, 0xFF	; 255
    7fa0:	f8 81       	ld	r31, Y
    7fa2:	c5 5f       	subi	r28, 0xF5	; 245
    7fa4:	d0 40       	sbci	r29, 0x00	; 0
    7fa6:	ff 5f       	subi	r31, 0xFF	; 255
    7fa8:	cb 50       	subi	r28, 0x0B	; 11
    7faa:	df 4f       	sbci	r29, 0xFF	; 255
    7fac:	f8 83       	st	Y, r31
    7fae:	c5 5f       	subi	r28, 0xF5	; 245
    7fb0:	d0 40       	sbci	r29, 0x00	; 0
    7fb2:	e8 ed       	ldi	r30, 0xD8	; 216
    7fb4:	f1 e0       	ldi	r31, 0x01	; 1
    7fb6:	01 90       	ld	r0, Z+
    7fb8:	00 20       	and	r0, r0
    7fba:	e9 f7       	brne	.-6      	; 0x7fb6 <systemGenerateReport+0x137c>
    7fbc:	31 97       	sbiw	r30, 0x01	; 1
    7fbe:	e8 5d       	subi	r30, 0xD8	; 216
    7fc0:	f1 40       	sbci	r31, 0x01	; 1
    7fc2:	cb 50       	subi	r28, 0x0B	; 11
    7fc4:	df 4f       	sbci	r29, 0xFF	; 255
    7fc6:	88 81       	ld	r24, Y
    7fc8:	c5 5f       	subi	r28, 0xF5	; 245
    7fca:	d0 40       	sbci	r29, 0x00	; 0
    7fcc:	48 2e       	mov	r4, r24
    7fce:	55 24       	eor	r5, r5
    7fd0:	4e 16       	cp	r4, r30
    7fd2:	5f 06       	cpc	r5, r31
    7fd4:	08 f4       	brcc	.+2      	; 0x7fd8 <systemGenerateReport+0x139e>
    7fd6:	13 ce       	rjmp	.-986    	; 0x7bfe <systemGenerateReport+0xfc4>
				  else sprintf_P(strReport,PSTR("%d.%s%s%s"),iTotal+1,strProduct,strTabSpace,strTotalVolume);

				  CreateReport(strReport,PrintBuffer,&RepPos);
               }
		  }
          InserBorder(btBottomLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btBottomRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);
    7fd8:	87 e0       	ldi	r24, 0x07	; 7
    7fda:	6c ee       	ldi	r22, 0xEC	; 236
    7fdc:	73 e0       	ldi	r23, 0x03	; 3
    7fde:	41 e0       	ldi	r20, 0x01	; 1
    7fe0:	26 ed       	ldi	r18, 0xD6	; 214
    7fe2:	31 e0       	ldi	r19, 0x01	; 1
    7fe4:	0e 94 81 1a 	call	0x3502	; 0x3502 <InserBorder>
    7fe8:	8b e0       	ldi	r24, 0x0B	; 11
    7fea:	6c ee       	ldi	r22, 0xEC	; 236
    7fec:	73 e0       	ldi	r23, 0x03	; 3
    7fee:	4a e2       	ldi	r20, 0x2A	; 42
    7ff0:	26 ed       	ldi	r18, 0xD6	; 214
    7ff2:	31 e0       	ldi	r19, 0x01	; 1
    7ff4:	0e 94 81 1a 	call	0x3502	; 0x3502 <InserBorder>
    7ff8:	89 e0       	ldi	r24, 0x09	; 9
    7ffa:	6c ee       	ldi	r22, 0xEC	; 236
    7ffc:	73 e0       	ldi	r23, 0x03	; 3
    7ffe:	41 e0       	ldi	r20, 0x01	; 1
    8000:	26 ed       	ldi	r18, 0xD6	; 214
    8002:	31 e0       	ldi	r19, 0x01	; 1
    8004:	0e 94 81 1a 	call	0x3502	; 0x3502 <InserBorder>
    8008:	8c e0       	ldi	r24, 0x0C	; 12
    800a:	6c ee       	ldi	r22, 0xEC	; 236
    800c:	73 e0       	ldi	r23, 0x03	; 3
    800e:	41 e0       	ldi	r20, 0x01	; 1
    8010:	26 ed       	ldi	r18, 0xD6	; 214
    8012:	31 e0       	ldi	r19, 0x01	; 1
    8014:	0e 94 81 1a 	call	0x3502	; 0x3502 <InserBorder>
		  InserBorder(btNewLine,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);
    8018:	8c e0       	ldi	r24, 0x0C	; 12
    801a:	6c ee       	ldi	r22, 0xEC	; 236
    801c:	73 e0       	ldi	r23, 0x03	; 3
    801e:	41 e0       	ldi	r20, 0x01	; 1
    8020:	26 ed       	ldi	r18, 0xD6	; 214
    8022:	31 e0       	ldi	r19, 0x01	; 1
    8024:	0e 94 81 1a 	call	0x3502	; 0x3502 <InserBorder>
    8028:	8c e0       	ldi	r24, 0x0C	; 12
    802a:	6c ee       	ldi	r22, 0xEC	; 236
    802c:	73 e0       	ldi	r23, 0x03	; 3
    802e:	41 e0       	ldi	r20, 0x01	; 1
    8030:	26 ed       	ldi	r18, 0xD6	; 214
    8032:	31 e0       	ldi	r19, 0x01	; 1
    8034:	0e 94 81 1a 	call	0x3502	; 0x3502 <InserBorder>
    8038:	8c e0       	ldi	r24, 0x0C	; 12
    803a:	6c ee       	ldi	r22, 0xEC	; 236
    803c:	73 e0       	ldi	r23, 0x03	; 3
    803e:	41 e0       	ldi	r20, 0x01	; 1
    8040:	26 ed       	ldi	r18, 0xD6	; 214
    8042:	31 e0       	ldi	r19, 0x01	; 1
    8044:	0e 94 81 1a 	call	0x3502	; 0x3502 <InserBorder>
    8048:	8c e0       	ldi	r24, 0x0C	; 12
    804a:	6c ee       	ldi	r22, 0xEC	; 236
    804c:	73 e0       	ldi	r23, 0x03	; 3
    804e:	41 e0       	ldi	r20, 0x01	; 1
    8050:	26 ed       	ldi	r18, 0xD6	; 214
    8052:	31 e0       	ldi	r19, 0x01	; 1
    8054:	0e 94 81 1a 	call	0x3502	; 0x3502 <InserBorder>
    8058:	8c e0       	ldi	r24, 0x0C	; 12
    805a:	6c ee       	ldi	r22, 0xEC	; 236
    805c:	73 e0       	ldi	r23, 0x03	; 3
    805e:	41 e0       	ldi	r20, 0x01	; 1
    8060:	26 ed       	ldi	r18, 0xD6	; 214
    8062:	31 e0       	ldi	r19, 0x01	; 1
    8064:	0e 94 81 1a 	call	0x3502	; 0x3502 <InserBorder>


          cmdPrint=0b00010000|(1<<PRN_PAPER_CUT);
    8068:	80 e3       	ldi	r24, 0x30	; 48
    806a:	80 93 b5 01 	sts	0x01B5, r24
		  LengthMessage81=RepPos+1;
    806e:	80 91 d6 01 	lds	r24, 0x01D6
    8072:	90 91 d7 01 	lds	r25, 0x01D7
    8076:	01 96       	adiw	r24, 0x01	; 1
    8078:	90 93 8e 01 	sts	0x018E, r25
    807c:	80 93 8d 01 	sts	0x018D, r24
		  IsFreePrinting=True;
    8080:	81 e0       	ldi	r24, 0x01	; 1
    8082:	80 93 a8 01 	sts	0x01A8, r24
	      IsBusyFreePrinting=True; 
    8086:	80 93 b4 01 	sts	0x01B4, r24
         	       
	      stGenerateReport=grWaitPrinted3;
    808a:	8b e0       	ldi	r24, 0x0B	; 11
    808c:	05 c0       	rjmp	.+10     	; 0x8098 <systemGenerateReport+0x145e>
	      break;
     case grWaitPrinted3:
          if (IsBusyFreePrinting==False)stGenerateReport=grFinishGenerateReport;
    808e:	80 91 b4 01 	lds	r24, 0x01B4
    8092:	88 23       	and	r24, r24
    8094:	49 f4       	brne	.+18     	; 0x80a8 <systemGenerateReport+0x146e>
    8096:	8c e0       	ldi	r24, 0x0C	; 12
    8098:	80 93 e8 01 	sts	0x01E8, r24
    809c:	05 c0       	rjmp	.+10     	; 0x80a8 <systemGenerateReport+0x146e>
	      break;
     case grFinishGenerateReport:
	      IsFinishPrintingTotalizer=True;
    809e:	81 e0       	ldi	r24, 0x01	; 1
    80a0:	80 93 87 01 	sts	0x0187, r24
          stGenerateReport=grScanAction;
    80a4:	10 92 e8 01 	sts	0x01E8, r1
	      break;
	 }
}
    80a8:	c5 50       	subi	r28, 0x05	; 5
    80aa:	df 4f       	sbci	r29, 0xFF	; 255
    80ac:	0f b6       	in	r0, 0x3f	; 63
    80ae:	f8 94       	cli
    80b0:	de bf       	out	0x3e, r29	; 62
    80b2:	0f be       	out	0x3f, r0	; 63
    80b4:	cd bf       	out	0x3d, r28	; 61
    80b6:	cf 91       	pop	r28
    80b8:	df 91       	pop	r29
    80ba:	1f 91       	pop	r17
    80bc:	0f 91       	pop	r16
    80be:	ff 90       	pop	r15
    80c0:	ef 90       	pop	r14
    80c2:	df 90       	pop	r13
    80c4:	cf 90       	pop	r12
    80c6:	bf 90       	pop	r11
    80c8:	af 90       	pop	r10
    80ca:	9f 90       	pop	r9
    80cc:	8f 90       	pop	r8
    80ce:	7f 90       	pop	r7
    80d0:	6f 90       	pop	r6
    80d2:	5f 90       	pop	r5
    80d4:	4f 90       	pop	r4
    80d6:	3f 90       	pop	r3
    80d8:	2f 90       	pop	r2
    80da:	08 95       	ret

000080dc <UpdateCardID>:
	 else SeqNum=0;
	 leadingZero(SeqNum,strSeqNum);
	 */
} 

void UpdateCardID(){
    80dc:	cf 93       	push	r28
    80de:	df 93       	push	r29
     char i,LengthID;
	 LengthID=strlen(strRFID);  //           +12345678  
    80e0:	e1 e5       	ldi	r30, 0x51	; 81
    80e2:	fc e0       	ldi	r31, 0x0C	; 12
    80e4:	01 90       	ld	r0, Z+
    80e6:	00 20       	and	r0, r0
    80e8:	e9 f7       	brne	.-6      	; 0x80e4 <UpdateCardID+0x8>
    80ea:	31 97       	sbiw	r30, 0x01	; 1
    80ec:	e1 55       	subi	r30, 0x51	; 81
    80ee:	fc 40       	sbci	r31, 0x0C	; 12
    80f0:	a9 e8       	ldi	r26, 0x89	; 137
    80f2:	bb e0       	ldi	r27, 0x0B	; 11
	 else SeqNum=0;
	 leadingZero(SeqNum,strSeqNum);
	 */
} 

void UpdateCardID(){
    80f4:	f0 e0       	ldi	r31, 0x00	; 0
    80f6:	ef 01       	movw	r28, r30
    80f8:	c3 5c       	subi	r28, 0xC3	; 195
    80fa:	d3 4f       	sbci	r29, 0xF3	; 243
    80fc:	20 e0       	ldi	r18, 0x00	; 0
    80fe:	30 e0       	ldi	r19, 0x00	; 0
     char i,LengthID;
	 LengthID=strlen(strRFID);  //           +12345678  
	 for(i=0;i<20;i++){         //SSSSSSSSSSSS12345678
	    if (i<(20-LengthID))strCardID[i]=' ';
    8100:	44 e1       	ldi	r20, 0x14	; 20
    8102:	50 e0       	ldi	r21, 0x00	; 0
    8104:	4e 1b       	sub	r20, r30
    8106:	5f 0b       	sbc	r21, r31
    8108:	90 e2       	ldi	r25, 0x20	; 32
    810a:	24 17       	cp	r18, r20
    810c:	35 07       	cpc	r19, r21
    810e:	14 f4       	brge	.+4      	; 0x8114 <UpdateCardID+0x38>
    8110:	9c 93       	st	X, r25
    8112:	02 c0       	rjmp	.+4      	; 0x8118 <UpdateCardID+0x3c>
		else strCardID[i]=strRFID[i-(20-LengthID)];
    8114:	88 81       	ld	r24, Y
    8116:	8c 93       	st	X, r24
    8118:	2f 5f       	subi	r18, 0xFF	; 255
    811a:	3f 4f       	sbci	r19, 0xFF	; 255
    811c:	11 96       	adiw	r26, 0x01	; 1
    811e:	21 96       	adiw	r28, 0x01	; 1
} 

void UpdateCardID(){
     char i,LengthID;
	 LengthID=strlen(strRFID);  //           +12345678  
	 for(i=0;i<20;i++){         //SSSSSSSSSSSS12345678
    8120:	24 31       	cpi	r18, 0x14	; 20
    8122:	31 05       	cpc	r19, r1
    8124:	91 f7       	brne	.-28     	; 0x810a <UpdateCardID+0x2e>
	    if (i<(20-LengthID))strCardID[i]=' ';
		else strCardID[i]=strRFID[i-(20-LengthID)];
	 }strCardID[20]=0;
    8126:	10 92 9d 0b 	sts	0x0B9D, r1

}
    812a:	df 91       	pop	r29
    812c:	cf 91       	pop	r28
    812e:	08 95       	ret

00008130 <GenerateTransactionNum>:
		 //else Result=PS_NO_DATA;    		    
	 }	
   return Result;
}

void GenerateTransactionNum(char *sTransNumber){//Create and Save TransactionNumber to EEPROM
    8130:	cf 92       	push	r12
    8132:	df 92       	push	r13
    8134:	ef 92       	push	r14
    8136:	ff 92       	push	r15
    8138:	0f 93       	push	r16
    813a:	1f 93       	push	r17
    813c:	df 93       	push	r29
    813e:	cf 93       	push	r28
    8140:	cd b7       	in	r28, 0x3d	; 61
    8142:	de b7       	in	r29, 0x3e	; 62
    8144:	27 97       	sbiw	r28, 0x07	; 7
    8146:	0f b6       	in	r0, 0x3f	; 63
    8148:	f8 94       	cli
    814a:	de bf       	out	0x3e, r29	; 62
    814c:	0f be       	out	0x3f, r0	; 63
    814e:	cd bf       	out	0x3d, r28	; 61
    8150:	6c 01       	movw	r12, r24
    8152:	fe 01       	movw	r30, r28
    8154:	31 96       	adiw	r30, 0x01	; 1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    8156:	ce 01       	movw	r24, r28
    8158:	08 96       	adiw	r24, 0x08	; 8
	     strMemory[i]=data;
    815a:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    815c:	e8 17       	cp	r30, r24
    815e:	f9 07       	cpc	r31, r25
    8160:	e1 f7       	brne	.-8      	; 0x815a <GenerateTransactionNum+0x2a>
}

void GenerateTransactionNum(char *sTransNumber){//Create and Save TransactionNumber to EEPROM
     char i,PTransNum[7],cNum,xNum=0,xAdd=0,Length=0;
	 FillChar(PTransNum,sizeof(PTransNum),0);//"999999"->"000000"
     eeprom_read_block((void*) &PTransNum, (const void*) &DefTransactionNumber,sizeof(DefTransactionNumber));
    8162:	8e 01       	movw	r16, r28
    8164:	0f 5f       	subi	r16, 0xFF	; 255
    8166:	1f 4f       	sbci	r17, 0xFF	; 255
    8168:	c8 01       	movw	r24, r16
    816a:	68 e3       	ldi	r22, 0x38	; 56
    816c:	71 e0       	ldi	r23, 0x01	; 1
    816e:	47 e0       	ldi	r20, 0x07	; 7
    8170:	50 e0       	ldi	r21, 0x00	; 0
    8172:	0e 94 b9 ac 	call	0x15972	; 0x15972 <__eerd_block_m128>
     xAdd=1;
	 xNum=0;
	 Length=strlen(PTransNum);
    8176:	f8 01       	movw	r30, r16
    8178:	01 90       	ld	r0, Z+
    817a:	00 20       	and	r0, r0
    817c:	e9 f7       	brne	.-6      	; 0x8178 <GenerateTransactionNum+0x48>
    817e:	31 97       	sbiw	r30, 0x01	; 1
    8180:	e0 1b       	sub	r30, r16
		 //else Result=PS_NO_DATA;    		    
	 }	
   return Result;
}

void GenerateTransactionNum(char *sTransNumber){//Create and Save TransactionNumber to EEPROM
    8182:	f0 e0       	ldi	r31, 0x00	; 0
    8184:	0e 0f       	add	r16, r30
    8186:	1f 1f       	adc	r17, r31
    8188:	31 97       	sbiw	r30, 0x01	; 1
    818a:	76 01       	movw	r14, r12
    818c:	ee 0e       	add	r14, r30
    818e:	ff 1e       	adc	r15, r31
    8190:	31 96       	adiw	r30, 0x01	; 1
    8192:	61 e0       	ldi	r22, 0x01	; 1
    8194:	19 c0       	rjmp	.+50     	; 0x81c8 <GenerateTransactionNum+0x98>
	 xNum=0;
	 Length=strlen(PTransNum);

	 for(i=0;i<Length;i++){//[000009] 999999 123456
	     xNum=PTransNum[Length-i-1]-'0';		 
		 cNum='0'+((xNum+xAdd)%10);
    8196:	d8 01       	movw	r26, r16
    8198:	2c 91       	ld	r18, X
    819a:	20 53       	subi	r18, 0x30	; 48
    819c:	30 e0       	ldi	r19, 0x00	; 0
    819e:	26 0f       	add	r18, r22
    81a0:	31 1d       	adc	r19, r1
    81a2:	c9 01       	movw	r24, r18
    81a4:	6a e0       	ldi	r22, 0x0A	; 10
    81a6:	70 e0       	ldi	r23, 0x00	; 0
    81a8:	0e 94 17 aa 	call	0x1542e	; 0x1542e <__divmodhi4>
    81ac:	48 2f       	mov	r20, r24
    81ae:	40 5d       	subi	r20, 0xD0	; 208
		 xAdd=((xNum+xAdd)/10);
    81b0:	c9 01       	movw	r24, r18
    81b2:	6a e0       	ldi	r22, 0x0A	; 10
    81b4:	70 e0       	ldi	r23, 0x00	; 0
    81b6:	0e 94 17 aa 	call	0x1542e	; 0x1542e <__divmodhi4>
		 PTransNum[Length-i-1]=cNum;
    81ba:	d8 01       	movw	r26, r16
    81bc:	4c 93       	st	X, r20
		 sTransNumber[Length-i-1]=cNum;
    81be:	d7 01       	movw	r26, r14
    81c0:	4c 93       	st	X, r20
    81c2:	08 94       	sec
    81c4:	e1 08       	sbc	r14, r1
    81c6:	f1 08       	sbc	r15, r1
    81c8:	01 50       	subi	r16, 0x01	; 1
    81ca:	10 40       	sbci	r17, 0x00	; 0
     eeprom_read_block((void*) &PTransNum, (const void*) &DefTransactionNumber,sizeof(DefTransactionNumber));
     xAdd=1;
	 xNum=0;
	 Length=strlen(PTransNum);

	 for(i=0;i<Length;i++){//[000009] 999999 123456
    81cc:	0c 17       	cp	r16, r28
    81ce:	1d 07       	cpc	r17, r29
    81d0:	11 f7       	brne	.-60     	; 0x8196 <GenerateTransactionNum+0x66>
		 cNum='0'+((xNum+xAdd)%10);
		 xAdd=((xNum+xAdd)/10);
		 PTransNum[Length-i-1]=cNum;
		 sTransNumber[Length-i-1]=cNum;
	 }
	 sTransNumber[Length]=0;
    81d2:	ce 0e       	add	r12, r30
    81d4:	df 1e       	adc	r13, r31
    81d6:	d6 01       	movw	r26, r12
    81d8:	1c 92       	st	X, r1
	 PTransNum[Length]=0;
    81da:	ce 01       	movw	r24, r28
    81dc:	01 96       	adiw	r24, 0x01	; 1
    81de:	e8 0f       	add	r30, r24
    81e0:	f9 1f       	adc	r31, r25
    81e2:	10 82       	st	Z, r1

     eeprom_write_block((const void*)&PTransNum,(void*)&DefTransactionNumber,sizeof(DefTransactionNumber));
    81e4:	68 e3       	ldi	r22, 0x38	; 56
    81e6:	71 e0       	ldi	r23, 0x01	; 1
    81e8:	47 e0       	ldi	r20, 0x07	; 7
    81ea:	50 e0       	ldi	r21, 0x00	; 0
    81ec:	0e 94 d1 ac 	call	0x159a2	; 0x159a2 <__eewr_block_m128>
}
    81f0:	27 96       	adiw	r28, 0x07	; 7
    81f2:	0f b6       	in	r0, 0x3f	; 63
    81f4:	f8 94       	cli
    81f6:	de bf       	out	0x3e, r29	; 62
    81f8:	0f be       	out	0x3f, r0	; 63
    81fa:	cd bf       	out	0x3d, r28	; 61
    81fc:	cf 91       	pop	r28
    81fe:	df 91       	pop	r29
    8200:	1f 91       	pop	r17
    8202:	0f 91       	pop	r16
    8204:	ff 90       	pop	r15
    8206:	ef 90       	pop	r14
    8208:	df 90       	pop	r13
    820a:	cf 90       	pop	r12
    820c:	08 95       	ret

0000820e <GetParameter>:
	}
  return  PosFound;
}


void GetParameter(char *GFlow,char FLength,char *GCmd,char *GPumpID, char *GeniCSum){
    820e:	8f 92       	push	r8
    8210:	9f 92       	push	r9
    8212:	af 92       	push	r10
    8214:	bf 92       	push	r11
    8216:	cf 92       	push	r12
    8218:	df 92       	push	r13
    821a:	ef 92       	push	r14
    821c:	ff 92       	push	r15
    821e:	0f 93       	push	r16
    8220:	1f 93       	push	r17
    8222:	df 93       	push	r29
    8224:	cf 93       	push	r28
    8226:	cd b7       	in	r28, 0x3d	; 61
    8228:	de b7       	in	r29, 0x3e	; 62
    822a:	a7 97       	sbiw	r28, 0x27	; 39
    822c:	0f b6       	in	r0, 0x3f	; 63
    822e:	f8 94       	cli
    8230:	de bf       	out	0x3e, r29	; 62
    8232:	0f be       	out	0x3f, r0	; 63
    8234:	cd bf       	out	0x3d, r28	; 61
    8236:	79 01       	movw	r14, r18
    8238:	48 01       	movw	r8, r16
    823a:	e6 2f       	mov	r30, r22
    823c:	f0 e0       	ldi	r31, 0x00	; 0
    823e:	31 97       	sbiw	r30, 0x01	; 1
    8240:	e8 0f       	add	r30, r24
    8242:	f9 1f       	adc	r31, r25
    8244:	9e 01       	movw	r18, r28
    8246:	26 5f       	subi	r18, 0xF6	; 246
    8248:	3f 4f       	sbci	r19, 0xFF	; 255
    824a:	d9 01       	movw	r26, r18
    824c:	03 c0       	rjmp	.+6      	; 0x8254 <GetParameter+0x46>
char strSend[20],strSub[3];
int SumLength;

     //TransposeFlow
     for (i=0;i<FLength;i++){	 
	     SGeniusFlow[i]=GFlow[FLength-i-1];
    824e:	80 81       	ld	r24, Z
    8250:	8d 93       	st	X+, r24
    8252:	31 97       	sbiw	r30, 0x01	; 1
char SGeniusFlow[30];
char strSend[20],strSub[3];
int SumLength;

     //TransposeFlow
     for (i=0;i<FLength;i++){	 
    8254:	8a 2f       	mov	r24, r26
    8256:	82 1b       	sub	r24, r18
    8258:	86 17       	cp	r24, r22
    825a:	c8 f3       	brcs	.-14     	; 0x824e <GetParameter+0x40>
	     SGeniusFlow[i]=GFlow[FLength-i-1];
	 }SGeniusFlow[FLength]=0;
    825c:	c6 2e       	mov	r12, r22
    825e:	dd 24       	eor	r13, r13
    8260:	6a e0       	ldi	r22, 0x0A	; 10
    8262:	a6 2e       	mov	r10, r22
    8264:	b1 2c       	mov	r11, r1
    8266:	ac 0e       	add	r10, r28
    8268:	bd 1e       	adc	r11, r29
    826a:	f5 01       	movw	r30, r10
    826c:	ec 0d       	add	r30, r12
    826e:	fd 1d       	adc	r31, r13
    8270:	10 82       	st	Z, r1

	 xCmd=CharPosCopy(SGeniusFlow,0);
	 *GCmd=xCmd;
    8272:	8a 85       	ldd	r24, Y+10	; 0x0a
    8274:	fa 01       	movw	r30, r20
    8276:	80 83       	st	Z, r24
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8278:	8b 85       	ldd	r24, Y+11	; 0x0b
    827a:	89 83       	std	Y+1, r24	; 0x01
    827c:	8c 85       	ldd	r24, Y+12	; 0x0c
    827e:	8a 83       	std	Y+2, r24	; 0x02
	 }Dest[Length]=0;
    8280:	1b 82       	std	Y+3, r1	; 0x03
	 }SGeniusFlow[FLength]=0;

	 xCmd=CharPosCopy(SGeniusFlow,0);
	 *GCmd=xCmd;
	 StrPosCopy(SGeniusFlow,sPumpID,1,2);
	 xPumpID=atoi(sPumpID);
    8282:	ce 01       	movw	r24, r28
    8284:	01 96       	adiw	r24, 0x01	; 1
    8286:	0e 94 4c aa 	call	0x15498	; 0x15498 <atoi>
	 *GPumpID=xPumpID;
    828a:	f7 01       	movw	r30, r14
    828c:	80 83       	st	Z, r24
	 sprintf_P(strSub,PSTR(":"));
    828e:	00 d0       	rcall	.+0      	; 0x8290 <GetParameter+0x82>
    8290:	00 d0       	rcall	.+0      	; 0x8292 <GetParameter+0x84>
    8292:	57 e0       	ldi	r21, 0x07	; 7
    8294:	e5 2e       	mov	r14, r21
    8296:	f1 2c       	mov	r15, r1
    8298:	ec 0e       	add	r14, r28
    829a:	fd 1e       	adc	r15, r29
    829c:	ed b7       	in	r30, 0x3d	; 61
    829e:	fe b7       	in	r31, 0x3e	; 62
    82a0:	f2 82       	std	Z+2, r15	; 0x02
    82a2:	e1 82       	std	Z+1, r14	; 0x01
    82a4:	8d e5       	ldi	r24, 0x5D	; 93
    82a6:	95 e0       	ldi	r25, 0x05	; 5
    82a8:	94 83       	std	Z+4, r25	; 0x04
    82aa:	83 83       	std	Z+3, r24	; 0x03
    82ac:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	 if (Pos(strSub,SGeniusFlow)<FLength){
    82b0:	0f 90       	pop	r0
    82b2:	0f 90       	pop	r0
    82b4:	0f 90       	pop	r0
    82b6:	0f 90       	pop	r0
    82b8:	c7 01       	movw	r24, r14
    82ba:	b5 01       	movw	r22, r10
    82bc:	0e 94 7e 23 	call	0x46fc	; 0x46fc <Pos>
    82c0:	8c 15       	cp	r24, r12
    82c2:	9d 05       	cpc	r25, r13
    82c4:	4c f5       	brge	.+82     	; 0x8318 <GetParameter+0x10a>
	     SumLength=FLength-Pos(strSub,SGeniusFlow);
    82c6:	c7 01       	movw	r24, r14
    82c8:	b5 01       	movw	r22, r10
    82ca:	0e 94 7e 23 	call	0x46fc	; 0x46fc <Pos>
    82ce:	8c 01       	movw	r16, r24
	 	 StrPosCopy(SGeniusFlow,sCSum,Pos(strSub,SGeniusFlow)+1,SumLength);
    82d0:	c7 01       	movw	r24, r14
    82d2:	b5 01       	movw	r22, r10
    82d4:	0e 94 7e 23 	call	0x46fc	; 0x46fc <Pos>
    82d8:	a6 01       	movw	r20, r12
    82da:	40 1b       	sub	r20, r16
    82dc:	51 0b       	sbc	r21, r17
    82de:	d5 01       	movw	r26, r10
    82e0:	a8 0f       	add	r26, r24
    82e2:	b9 1f       	adc	r27, r25
    82e4:	20 e0       	ldi	r18, 0x00	; 0
    82e6:	30 e0       	ldi	r19, 0x00	; 0
    82e8:	be 01       	movw	r22, r28
    82ea:	6c 5f       	subi	r22, 0xFC	; 252
    82ec:	7f 4f       	sbci	r23, 0xFF	; 255
    82ee:	07 c0       	rjmp	.+14     	; 0x82fe <GetParameter+0xf0>
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    82f0:	fb 01       	movw	r30, r22
    82f2:	e2 0f       	add	r30, r18
    82f4:	f3 1f       	adc	r31, r19
    82f6:	8c 91       	ld	r24, X
    82f8:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    82fa:	2f 5f       	subi	r18, 0xFF	; 255
    82fc:	3f 4f       	sbci	r19, 0xFF	; 255
    82fe:	11 96       	adiw	r26, 0x01	; 1
    8300:	24 17       	cp	r18, r20
    8302:	35 07       	cpc	r19, r21
    8304:	a8 f3       	brcs	.-22     	; 0x82f0 <GetParameter+0xe2>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8306:	46 0f       	add	r20, r22
    8308:	57 1f       	adc	r21, r23
    830a:	fa 01       	movw	r30, r20
    830c:	10 82       	st	Z, r1
	 *GPumpID=xPumpID;
	 sprintf_P(strSub,PSTR(":"));
	 if (Pos(strSub,SGeniusFlow)<FLength){
	     SumLength=FLength-Pos(strSub,SGeniusFlow);
	 	 StrPosCopy(SGeniusFlow,sCSum,Pos(strSub,SGeniusFlow)+1,SumLength);
		 xCsum=atoi(sCSum);
    830e:	cb 01       	movw	r24, r22
    8310:	0e 94 4c aa 	call	0x15498	; 0x15498 <atoi>
	     *GeniCSum=xCsum;
    8314:	f4 01       	movw	r30, r8
    8316:	80 83       	st	Z, r24
	 sprintf_P(strSend,PSTR("%d"),xPumpID);
	 uart_print(1,1,strSend);
	 sprintf_P(strSend,PSTR("%s"),sCSum);
	 uart_print(1,1,strSend);
*/
}
    8318:	a7 96       	adiw	r28, 0x27	; 39
    831a:	0f b6       	in	r0, 0x3f	; 63
    831c:	f8 94       	cli
    831e:	de bf       	out	0x3e, r29	; 62
    8320:	0f be       	out	0x3f, r0	; 63
    8322:	cd bf       	out	0x3d, r28	; 61
    8324:	cf 91       	pop	r28
    8326:	df 91       	pop	r29
    8328:	1f 91       	pop	r17
    832a:	0f 91       	pop	r16
    832c:	ff 90       	pop	r15
    832e:	ef 90       	pop	r14
    8330:	df 90       	pop	r13
    8332:	cf 90       	pop	r12
    8334:	bf 90       	pop	r11
    8336:	af 90       	pop	r10
    8338:	9f 90       	pop	r9
    833a:	8f 90       	pop	r8
    833c:	08 95       	ret

0000833e <GeniusProtocol>:
   return Result;	 
}

//enum eGeniusProtocolCommand{GP_PUMP_STATUS,GP_PUMP_LAST_TRANSACTION,GP_PUMP_STOP,GP_PUMP_RESUME,GP_PUMP_PRESET};

void GeniusProtocol(char dataIn){
    833e:	ff 92       	push	r15
    8340:	0f 93       	push	r16
    8342:	1f 93       	push	r17
    8344:	df 93       	push	r29
    8346:	cf 93       	push	r28
    8348:	cd b7       	in	r28, 0x3d	; 61
    834a:	de b7       	in	r29, 0x3e	; 62
    834c:	67 97       	sbiw	r28, 0x17	; 23
    834e:	0f b6       	in	r0, 0x3f	; 63
    8350:	f8 94       	cli
    8352:	de bf       	out	0x3e, r29	; 62
    8354:	0f be       	out	0x3f, r0	; 63
    8356:	cd bf       	out	0x3d, r28	; 61
    8358:	f8 2e       	mov	r15, r24
	 char i,GeniCmd,GeniPumpID,GeniCSum;//,sCmd[7];
	 char strSend[20];

    //uart(1,1,dataIn);

	if (dataIn==0x0D){	
    835a:	8d e0       	ldi	r24, 0x0D	; 13
    835c:	f8 16       	cp	r15, r24
    835e:	09 f0       	breq	.+2      	; 0x8362 <GeniusProtocol+0x24>
    8360:	45 c0       	rjmp	.+138    	; 0x83ec <GeniusProtocol+0xae>
	    GetParameter(Geniflow,FlowLength,&GeniCmd,&GeniPumpID,&GeniCSum);
    8362:	82 ec       	ldi	r24, 0xC2	; 194
    8364:	91 e0       	ldi	r25, 0x01	; 1
    8366:	60 91 c1 01 	lds	r22, 0x01C1
    836a:	ae 01       	movw	r20, r28
    836c:	4f 5f       	subi	r20, 0xFF	; 255
    836e:	5f 4f       	sbci	r21, 0xFF	; 255
    8370:	9e 01       	movw	r18, r28
    8372:	2e 5f       	subi	r18, 0xFE	; 254
    8374:	3f 4f       	sbci	r19, 0xFF	; 255
    8376:	8e 01       	movw	r16, r28
    8378:	0d 5f       	subi	r16, 0xFD	; 253
    837a:	1f 4f       	sbci	r17, 0xFF	; 255
    837c:	0e 94 07 41 	call	0x820e	; 0x820e <GetParameter>
		FlowLength=0;
    8380:	10 92 c1 01 	sts	0x01C1, r1
		IsGeniusFlow=False;
    8384:	10 92 c0 01 	sts	0x01C0, r1
		FillChar(strSend,0,sizeof(strSend));
		sprintf_P(strSend,PSTR("%c%.2d:"),GeniCmd,GeniPumpID);
    8388:	ad b7       	in	r26, 0x3d	; 61
    838a:	be b7       	in	r27, 0x3e	; 62
    838c:	18 97       	sbiw	r26, 0x08	; 8
    838e:	0f b6       	in	r0, 0x3f	; 63
    8390:	f8 94       	cli
    8392:	be bf       	out	0x3e, r27	; 62
    8394:	0f be       	out	0x3f, r0	; 63
    8396:	ad bf       	out	0x3d, r26	; 61
    8398:	ed b7       	in	r30, 0x3d	; 61
    839a:	fe b7       	in	r31, 0x3e	; 62
    839c:	31 96       	adiw	r30, 0x01	; 1
    839e:	8e 01       	movw	r16, r28
    83a0:	0c 5f       	subi	r16, 0xFC	; 252
    83a2:	1f 4f       	sbci	r17, 0xFF	; 255
    83a4:	12 96       	adiw	r26, 0x02	; 2
    83a6:	1c 93       	st	X, r17
    83a8:	0e 93       	st	-X, r16
    83aa:	11 97       	sbiw	r26, 0x01	; 1
    83ac:	8f e4       	ldi	r24, 0x4F	; 79
    83ae:	95 e0       	ldi	r25, 0x05	; 5
    83b0:	93 83       	std	Z+3, r25	; 0x03
    83b2:	82 83       	std	Z+2, r24	; 0x02
    83b4:	89 81       	ldd	r24, Y+1	; 0x01
    83b6:	84 83       	std	Z+4, r24	; 0x04
    83b8:	15 82       	std	Z+5, r1	; 0x05
    83ba:	8a 81       	ldd	r24, Y+2	; 0x02
    83bc:	86 83       	std	Z+6, r24	; 0x06
    83be:	17 82       	std	Z+7, r1	; 0x07
    83c0:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
		//uart_print(1,1,strSend);


		if ((SumChecksum(strSend))==GeniCSum){
    83c4:	8d b7       	in	r24, 0x3d	; 61
    83c6:	9e b7       	in	r25, 0x3e	; 62
    83c8:	08 96       	adiw	r24, 0x08	; 8
    83ca:	0f b6       	in	r0, 0x3f	; 63
    83cc:	f8 94       	cli
    83ce:	9e bf       	out	0x3e, r25	; 62
    83d0:	0f be       	out	0x3f, r0	; 63
    83d2:	8d bf       	out	0x3d, r24	; 61
    83d4:	c8 01       	movw	r24, r16
    83d6:	0e 94 19 23 	call	0x4632	; 0x4632 <SumChecksum>
    83da:	9b 81       	ldd	r25, Y+3	; 0x03
    83dc:	89 17       	cp	r24, r25
    83de:	31 f4       	brne	.+12     	; 0x83ec <GeniusProtocol+0xae>
		     switch(GeniCmd){
    83e0:	89 81       	ldd	r24, Y+1	; 0x01
    83e2:	84 35       	cpi	r24, 0x54	; 84
    83e4:	19 f4       	brne	.+6      	; 0x83ec <GeniusProtocol+0xae>
			 case 'C'://PumpStatus
			      GeniusSendPumpStatus(GeniPumpID);
			      break;
             case 'T'://Transaction Request: T01:239<0D>
			      GeniusSendLastTransaction(GeniPumpID);
    83e6:	8a 81       	ldd	r24, Y+2	; 0x02
    83e8:	0e 94 e8 2f 	call	0x5fd0	; 0x5fd0 <GeniusSendLastTransaction>
    83ec:	e4 ed       	ldi	r30, 0xD4	; 212
    83ee:	f1 e0       	ldi	r31, 0x01	; 1
			 }
		}
	}
	//Shifting
	for(i=19;i>0;i--){
	    Geniflow[i]=Geniflow[i-1];	
    83f0:	80 81       	ld	r24, Z
    83f2:	81 83       	std	Z+1, r24	; 0x01
    83f4:	31 97       	sbiw	r30, 0x01	; 1
			      break;
			 }
		}
	}
	//Shifting
	for(i=19;i>0;i--){
    83f6:	91 e0       	ldi	r25, 0x01	; 1
    83f8:	e1 3c       	cpi	r30, 0xC1	; 193
    83fa:	f9 07       	cpc	r31, r25
    83fc:	c9 f7       	brne	.-14     	; 0x83f0 <GeniusProtocol+0xb2>
	    Geniflow[i]=Geniflow[i-1];	
	}Geniflow[0]=dataIn;
    83fe:	f1 82       	std	Z+1, r15	; 0x01

	if (IsGeniusCommand(dataIn)==True)IsGeniusFlow=True;
    8400:	8f 2d       	mov	r24, r15
    8402:	0e 94 39 23 	call	0x4672	; 0x4672 <IsGeniusCommand>
    8406:	81 30       	cpi	r24, 0x01	; 1
    8408:	11 f4       	brne	.+4      	; 0x840e <GeniusProtocol+0xd0>
    840a:	80 93 c0 01 	sts	0x01C0, r24
	if (IsGeniusFlow==True)FlowLength++;
    840e:	80 91 c0 01 	lds	r24, 0x01C0
    8412:	81 30       	cpi	r24, 0x01	; 1
    8414:	29 f4       	brne	.+10     	; 0x8420 <GeniusProtocol+0xe2>
    8416:	80 91 c1 01 	lds	r24, 0x01C1
    841a:	8f 5f       	subi	r24, 0xFF	; 255
    841c:	80 93 c1 01 	sts	0x01C1, r24
	Geniflow[3]=Geniflow[2];
	Geniflow[2]=Geniflow[1];
	Geniflow[1]=Geniflow[0];
	Geniflow[0]=dataIn;
*/
}
    8420:	67 96       	adiw	r28, 0x17	; 23
    8422:	0f b6       	in	r0, 0x3f	; 63
    8424:	f8 94       	cli
    8426:	de bf       	out	0x3e, r29	; 62
    8428:	0f be       	out	0x3f, r0	; 63
    842a:	cd bf       	out	0x3d, r28	; 61
    842c:	cf 91       	pop	r28
    842e:	df 91       	pop	r29
    8430:	1f 91       	pop	r17
    8432:	0f 91       	pop	r16
    8434:	ff 90       	pop	r15
    8436:	08 95       	ret

00008438 <__vector_30>:
}

// NotSuccessful! 


ISR(USART1_RX_vect){
    8438:	1f 92       	push	r1
    843a:	0f 92       	push	r0
    843c:	0f b6       	in	r0, 0x3f	; 63
    843e:	0f 92       	push	r0
    8440:	0b b6       	in	r0, 0x3b	; 59
    8442:	0f 92       	push	r0
    8444:	11 24       	eor	r1, r1
    8446:	1f 93       	push	r17
    8448:	2f 93       	push	r18
    844a:	3f 93       	push	r19
    844c:	4f 93       	push	r20
    844e:	5f 93       	push	r21
    8450:	6f 93       	push	r22
    8452:	7f 93       	push	r23
    8454:	8f 93       	push	r24
    8456:	9f 93       	push	r25
    8458:	af 93       	push	r26
    845a:	bf 93       	push	r27
    845c:	ef 93       	push	r30
    845e:	ff 93       	push	r31
	char dataTX1,serialSend[12];
	static char IsAdvanZProtocol=False;
	unsigned int i;
	dataTX1 = UDR1;
    8460:	10 91 9c 00 	lds	r17, 0x009C
    //Not Successfull!
	//NewPacket
	if (IsNewPacket==True){
    8464:	80 91 88 01 	lds	r24, 0x0188
    8468:	81 30       	cpi	r24, 0x01	; 1
    846a:	51 f4       	brne	.+20     	; 0x8480 <__vector_30+0x48>
	    if (dataTX1==0x01){
    846c:	11 30       	cpi	r17, 0x01	; 1
    846e:	41 f4       	brne	.+16     	; 0x8480 <__vector_30+0x48>
		    char_count=0;
    8470:	10 92 8a 01 	sts	0x018A, r1
    8474:	10 92 89 01 	sts	0x0189, r1
            IsNewPacket=False;
    8478:	10 92 88 01 	sts	0x0188, r1
			IsAdvanZProtocol=True;
    847c:	10 93 98 02 	sts	0x0298, r17
			}
	}
    //Save data to buffer if AdvanZ MSG
	if (IsAdvanZProtocol==True){
    8480:	80 91 98 02 	lds	r24, 0x0298
    8484:	81 30       	cpi	r24, 0x01	; 1
    8486:	69 f4       	brne	.+26     	; 0x84a2 <__vector_30+0x6a>
	    rcv_trans[char_count]=dataTX1;
    8488:	80 91 89 01 	lds	r24, 0x0189
    848c:	90 91 8a 01 	lds	r25, 0x018A
    8490:	fc 01       	movw	r30, r24
    8492:	e3 5e       	subi	r30, 0xE3	; 227
    8494:	f6 4f       	sbci	r31, 0xF6	; 246
    8496:	10 83       	st	Z, r17
	    char_count++; 
    8498:	01 96       	adiw	r24, 0x01	; 1
    849a:	90 93 8a 01 	sts	0x018A, r25
    849e:	80 93 89 01 	sts	0x0189, r24
	}

	if (dataTX1==0x02){
    84a2:	12 30       	cpi	r17, 0x02	; 2
    84a4:	b1 f5       	brne	.+108    	; 0x8512 <__vector_30+0xda>
		transLength=char_count;
    84a6:	60 91 89 01 	lds	r22, 0x0189
    84aa:	70 91 8a 01 	lds	r23, 0x018A
    84ae:	70 93 8c 01 	sts	0x018C, r23
    84b2:	60 93 8b 01 	sts	0x018B, r22
		char_count=0;
    84b6:	10 92 8a 01 	sts	0x018A, r1
    84ba:	10 92 89 01 	sts	0x0189, r1
		IsAdvanZProtocol=False;
    84be:	10 92 98 02 	sts	0x0298, r1

		//MessageIdentification
        if (MsgCode!=MSG_NONE)MsgCode=MSG_NONE;
	    MsgCode=((rcv_trans[35]-'0')*10)+(rcv_trans[36]-'0');
    84c2:	20 91 41 09 	lds	r18, 0x0941
    84c6:	20 51       	subi	r18, 0x10	; 16
    84c8:	80 91 40 09 	lds	r24, 0x0940
    84cc:	3a e0       	ldi	r19, 0x0A	; 10
    84ce:	83 9f       	mul	r24, r19
    84d0:	c0 01       	movw	r24, r0
    84d2:	11 24       	eor	r1, r1
    84d4:	28 0f       	add	r18, r24
    84d6:	20 93 24 01 	sts	0x0124, r18
     
	    IdentifyMessage(rcv_trans[0],transLength);
    84da:	80 91 1d 09 	lds	r24, 0x091D
    84de:	0e 94 61 19 	call	0x32c2	; 0x32c2 <IdentifyMessage>
		IsNewPacket=True;
    84e2:	21 e0       	ldi	r18, 0x01	; 1
    84e4:	20 93 88 01 	sts	0x0188, r18

		if ((rcv_trans[35]=='8')&&(rcv_trans[36]=='1')){
    84e8:	80 91 40 09 	lds	r24, 0x0940
    84ec:	88 33       	cpi	r24, 0x38	; 56
    84ee:	89 f4       	brne	.+34     	; 0x8512 <__vector_30+0xda>
    84f0:	80 91 41 09 	lds	r24, 0x0941
    84f4:	81 33       	cpi	r24, 0x31	; 49
    84f6:	69 f4       	brne	.+26     	; 0x8512 <__vector_30+0xda>
		   LengthMessage81=transLength-12-44;
    84f8:	80 91 8b 01 	lds	r24, 0x018B
    84fc:	90 91 8c 01 	lds	r25, 0x018C
    8500:	c8 97       	sbiw	r24, 0x38	; 56
    8502:	90 93 8e 01 	sts	0x018E, r25
    8506:	80 93 8d 01 	sts	0x018D, r24
		   IsMessage81=True;
    850a:	20 93 a6 01 	sts	0x01A6, r18
		   IsCompleteFilling=True;
    850e:	20 93 a9 01 	sts	0x01A9, r18
		

	}//Endif(dataTX1==0x02)

	//ConfigDetection: iConf?<0D><0A>
	if (IsNewPacket!=True)
    8512:	80 91 88 01 	lds	r24, 0x0188
    8516:	81 30       	cpi	r24, 0x01	; 1
    8518:	19 f0       	breq	.+6      	; 0x8520 <__vector_30+0xe8>
	    ConfigProtocol(dataTX1);
    851a:	81 2f       	mov	r24, r17
    851c:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <ConfigProtocol>
	//GeniusDetection: [CMD][MSG][CSUM][0x0D]
	if ((IFType==IT_STANDALONE)&&(IsNewPacket!=True))
    8520:	80 91 00 01 	lds	r24, 0x0100
    8524:	82 30       	cpi	r24, 0x02	; 2
    8526:	39 f4       	brne	.+14     	; 0x8536 <__vector_30+0xfe>
    8528:	80 91 88 01 	lds	r24, 0x0188
    852c:	81 30       	cpi	r24, 0x01	; 1
    852e:	19 f0       	breq	.+6      	; 0x8536 <__vector_30+0xfe>
	     GeniusProtocol(dataTX1);		
    8530:	81 2f       	mov	r24, r17
    8532:	0e 94 9f 41 	call	0x833e	; 0x833e <GeniusProtocol>
    //uart(0,1,dataTX1);
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}
    8536:	ff 91       	pop	r31
    8538:	ef 91       	pop	r30
    853a:	bf 91       	pop	r27
    853c:	af 91       	pop	r26
    853e:	9f 91       	pop	r25
    8540:	8f 91       	pop	r24
    8542:	7f 91       	pop	r23
    8544:	6f 91       	pop	r22
    8546:	5f 91       	pop	r21
    8548:	4f 91       	pop	r20
    854a:	3f 91       	pop	r19
    854c:	2f 91       	pop	r18
    854e:	1f 91       	pop	r17
    8550:	0f 90       	pop	r0
    8552:	0b be       	out	0x3b, r0	; 59
    8554:	0f 90       	pop	r0
    8556:	0f be       	out	0x3f, r0	; 63
    8558:	0f 90       	pop	r0
    855a:	1f 90       	pop	r1
    855c:	18 95       	reti

0000855e <procMessage99>:
     StrPosCopy(rcv_trans,strAmount,74,8); 
	 StrPosCopy(rcv_trans,strStatus,82,1);
     StrPosCopy(rcv_trans,strSurcharge,83,9);    
}

char procMessage99(){//<STX>[IFT IDSeq N Srce IPDest IPMsg CodeTran NoShiftDateTimeIsland IDFIP IDProduct IDDescriptionPriceVolumeAmountMOP TypeMOP NameCard IDCard HolderBalance Type Balance MeterVolume MeterAmount Current TimePrint Count Checksum ETX
    855e:	0f 93       	push	r16
    8560:	1f 93       	push	r17
     char Result;
	 Result=MSG99_NONE;
	 //Message99
	 if((rcv_trans[0]==0x01)&&(transLength>=378)){
    8562:	80 91 1d 09 	lds	r24, 0x091D
    8566:	81 30       	cpi	r24, 0x01	; 1
    8568:	09 f0       	breq	.+2      	; 0x856c <procMessage99+0xe>
    856a:	2e c2       	rjmp	.+1116   	; 0x89c8 <procMessage99+0x46a>
    856c:	80 91 8b 01 	lds	r24, 0x018B
    8570:	90 91 8c 01 	lds	r25, 0x018C
    8574:	8a 57       	subi	r24, 0x7A	; 122
    8576:	91 40       	sbci	r25, 0x01	; 1
    8578:	08 f4       	brcc	.+2      	; 0x857c <procMessage99+0x1e>
    857a:	26 c2       	rjmp	.+1100   	; 0x89c8 <procMessage99+0x46a>
    857c:	20 e0       	ldi	r18, 0x00	; 0
    857e:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8580:	f9 01       	movw	r30, r18
    8582:	e9 57       	subi	r30, 0x79	; 121
    8584:	f3 4f       	sbci	r31, 0xF3	; 243
    8586:	d9 01       	movw	r26, r18
    8588:	a3 5e       	subi	r26, 0xE3	; 227
    858a:	b6 4f       	sbci	r27, 0xF6	; 246
    858c:	95 96       	adiw	r26, 0x25	; 37
    858e:	8c 91       	ld	r24, X
    8590:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8592:	2f 5f       	subi	r18, 0xFF	; 255
    8594:	3f 4f       	sbci	r19, 0xFF	; 255
    8596:	26 30       	cpi	r18, 0x06	; 6
    8598:	31 05       	cpc	r19, r1
    859a:	91 f7       	brne	.-28     	; 0x8580 <procMessage99+0x22>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    859c:	10 92 8d 0c 	sts	0x0C8D, r1
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    85a0:	80 91 48 09 	lds	r24, 0x0948
    85a4:	80 93 68 0c 	sts	0x0C68, r24
	 }Dest[Length]=0;
    85a8:	10 92 69 0c 	sts	0x0C69, r1
	 Result=MSG99_NONE;
	 //Message99
	 if((rcv_trans[0]==0x01)&&(transLength>=378)){
       StrPosCopy(rcv_trans,strTranNo,37,6);//Transaction Number
       StrPosCopy(rcv_trans,strShift,43,1);
       Shift=(CharPosCopy(rcv_trans,43)-'0');
    85ac:	80 53       	subi	r24, 0x30	; 48
    85ae:	80 93 b9 01 	sts	0x01B9, r24
    85b2:	20 e0       	ldi	r18, 0x00	; 0
    85b4:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    85b6:	f9 01       	movw	r30, r18
    85b8:	e2 59       	subi	r30, 0x92	; 146
    85ba:	f8 4f       	sbci	r31, 0xF8	; 248
    85bc:	d9 01       	movw	r26, r18
    85be:	a3 5e       	subi	r26, 0xE3	; 227
    85c0:	b6 4f       	sbci	r27, 0xF6	; 246
    85c2:	9c 96       	adiw	r26, 0x2c	; 44
    85c4:	8c 91       	ld	r24, X
    85c6:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    85c8:	2f 5f       	subi	r18, 0xFF	; 255
    85ca:	3f 4f       	sbci	r19, 0xFF	; 255
    85cc:	2a 30       	cpi	r18, 0x0A	; 10
    85ce:	31 05       	cpc	r19, r1
    85d0:	91 f7       	brne	.-28     	; 0x85b6 <procMessage99+0x58>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    85d2:	10 92 78 07 	sts	0x0778, r1
    85d6:	20 e0       	ldi	r18, 0x00	; 0
    85d8:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    85da:	f9 01       	movw	r30, r18
    85dc:	e3 5b       	subi	r30, 0xB3	; 179
    85de:	fc 4f       	sbci	r31, 0xFC	; 252
    85e0:	d9 01       	movw	r26, r18
    85e2:	a3 5e       	subi	r26, 0xE3	; 227
    85e4:	b6 4f       	sbci	r27, 0xF6	; 246
    85e6:	d6 96       	adiw	r26, 0x36	; 54
    85e8:	8c 91       	ld	r24, X
    85ea:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    85ec:	2f 5f       	subi	r18, 0xFF	; 255
    85ee:	3f 4f       	sbci	r19, 0xFF	; 255
    85f0:	28 30       	cpi	r18, 0x08	; 8
    85f2:	31 05       	cpc	r19, r1
    85f4:	91 f7       	brne	.-28     	; 0x85da <procMessage99+0x7c>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    85f6:	10 92 55 03 	sts	0x0355, r1
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    85fa:	80 91 5b 09 	lds	r24, 0x095B
    85fe:	80 93 f7 08 	sts	0x08F7, r24
    8602:	80 91 5c 09 	lds	r24, 0x095C
    8606:	80 93 f8 08 	sts	0x08F8, r24
	 }Dest[Length]=0;
    860a:	10 92 f9 08 	sts	0x08F9, r1
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    860e:	80 91 5d 09 	lds	r24, 0x095D
    8612:	80 93 b9 07 	sts	0x07B9, r24
    8616:	80 91 5e 09 	lds	r24, 0x095E
    861a:	80 93 ba 07 	sts	0x07BA, r24
	 }Dest[Length]=0;
    861e:	10 92 bb 07 	sts	0x07BB, r1
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8622:	80 91 5f 09 	lds	r24, 0x095F
    8626:	80 93 71 08 	sts	0x0871, r24
    862a:	80 91 60 09 	lds	r24, 0x0960
    862e:	80 93 72 08 	sts	0x0872, r24
	 }Dest[Length]=0;
    8632:	10 92 73 08 	sts	0x0873, r1
    8636:	20 e0       	ldi	r18, 0x00	; 0
    8638:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    863a:	f9 01       	movw	r30, r18
    863c:	e4 5f       	subi	r30, 0xF4	; 244
    863e:	f7 4f       	sbci	r31, 0xF7	; 247
    8640:	d9 01       	movw	r26, r18
    8642:	af 59       	subi	r26, 0x9F	; 159
    8644:	b6 4f       	sbci	r27, 0xF6	; 246
    8646:	8c 91       	ld	r24, X
    8648:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    864a:	2f 5f       	subi	r18, 0xFF	; 255
    864c:	3f 4f       	sbci	r19, 0xFF	; 255
    864e:	2f 30       	cpi	r18, 0x0F	; 15
    8650:	31 05       	cpc	r19, r1
    8652:	99 f7       	brne	.-26     	; 0x863a <procMessage99+0xdc>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8654:	10 92 1b 08 	sts	0x081B, r1
    8658:	20 e0       	ldi	r18, 0x00	; 0
    865a:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    865c:	f9 01       	movw	r30, r18
    865e:	e2 56       	subi	r30, 0x62	; 98
    8660:	fa 4f       	sbci	r31, 0xFA	; 250
    8662:	d9 01       	movw	r26, r18
    8664:	a0 59       	subi	r26, 0x90	; 144
    8666:	b6 4f       	sbci	r27, 0xF6	; 246
    8668:	8c 91       	ld	r24, X
    866a:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    866c:	2f 5f       	subi	r18, 0xFF	; 255
    866e:	3f 4f       	sbci	r19, 0xFF	; 255
    8670:	28 30       	cpi	r18, 0x08	; 8
    8672:	31 05       	cpc	r19, r1
    8674:	99 f7       	brne	.-26     	; 0x865c <procMessage99+0xfe>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8676:	10 92 a6 05 	sts	0x05A6, r1
    867a:	20 e0       	ldi	r18, 0x00	; 0
    867c:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    867e:	f9 01       	movw	r30, r18
    8680:	eb 58       	subi	r30, 0x8B	; 139
    8682:	fc 4f       	sbci	r31, 0xFC	; 252
    8684:	d9 01       	movw	r26, r18
    8686:	a8 58       	subi	r26, 0x88	; 136
    8688:	b6 4f       	sbci	r27, 0xF6	; 246
    868a:	8c 91       	ld	r24, X
    868c:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    868e:	2f 5f       	subi	r18, 0xFF	; 255
    8690:	3f 4f       	sbci	r19, 0xFF	; 255
    8692:	28 30       	cpi	r18, 0x08	; 8
    8694:	31 05       	cpc	r19, r1
    8696:	99 f7       	brne	.-26     	; 0x867e <procMessage99+0x120>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8698:	10 92 7d 03 	sts	0x037D, r1
    869c:	20 e0       	ldi	r18, 0x00	; 0
    869e:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    86a0:	f9 01       	movw	r30, r18
    86a2:	ed 54       	subi	r30, 0x4D	; 77
    86a4:	f4 4f       	sbci	r31, 0xF4	; 244
    86a6:	d9 01       	movw	r26, r18
    86a8:	a0 58       	subi	r26, 0x80	; 128
    86aa:	b6 4f       	sbci	r27, 0xF6	; 246
    86ac:	8c 91       	ld	r24, X
    86ae:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    86b0:	2f 5f       	subi	r18, 0xFF	; 255
    86b2:	3f 4f       	sbci	r19, 0xFF	; 255
    86b4:	2a 30       	cpi	r18, 0x0A	; 10
    86b6:	31 05       	cpc	r19, r1
    86b8:	99 f7       	brne	.-26     	; 0x86a0 <procMessage99+0x142>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    86ba:	10 92 bd 0b 	sts	0x0BBD, r1

	   //FillChar(strAmount,sizeof(strAmount),0);
       StrPosCopy(rcv_trans,strAmount,99,10);

       //StrPosCopy(rcv_trans,strMOPType,109,1);
       MOPType=(CharPosCopy(rcv_trans,109)-'0');
    86be:	80 91 8a 09 	lds	r24, 0x098A
    86c2:	80 53       	subi	r24, 0x30	; 48
    86c4:	80 93 b8 01 	sts	0x01B8, r24
    86c8:	20 e0       	ldi	r18, 0x00	; 0
    86ca:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    86cc:	f9 01       	movw	r30, r18
    86ce:	e3 58       	subi	r30, 0x83	; 131
    86d0:	fa 4f       	sbci	r31, 0xFA	; 250
    86d2:	d9 01       	movw	r26, r18
    86d4:	a5 57       	subi	r26, 0x75	; 117
    86d6:	b6 4f       	sbci	r27, 0xF6	; 246
    86d8:	8c 91       	ld	r24, X
    86da:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    86dc:	2f 5f       	subi	r18, 0xFF	; 255
    86de:	3f 4f       	sbci	r19, 0xFF	; 255
    86e0:	24 31       	cpi	r18, 0x14	; 20
    86e2:	31 05       	cpc	r19, r1
    86e4:	99 f7       	brne	.-26     	; 0x86cc <procMessage99+0x16e>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    86e6:	10 92 91 05 	sts	0x0591, r1
    86ea:	20 e0       	ldi	r18, 0x00	; 0
    86ec:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    86ee:	f9 01       	movw	r30, r18
    86f0:	e7 57       	subi	r30, 0x77	; 119
    86f2:	f4 4f       	sbci	r31, 0xF4	; 244
    86f4:	d9 01       	movw	r26, r18
    86f6:	a1 56       	subi	r26, 0x61	; 97
    86f8:	b6 4f       	sbci	r27, 0xF6	; 246
    86fa:	8c 91       	ld	r24, X
    86fc:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    86fe:	2f 5f       	subi	r18, 0xFF	; 255
    8700:	3f 4f       	sbci	r19, 0xFF	; 255
    8702:	24 31       	cpi	r18, 0x14	; 20
    8704:	31 05       	cpc	r19, r1
    8706:	99 f7       	brne	.-26     	; 0x86ee <procMessage99+0x190>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8708:	10 92 9d 0b 	sts	0x0B9D, r1
    870c:	20 e0       	ldi	r18, 0x00	; 0
    870e:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8710:	f9 01       	movw	r30, r18
    8712:	ec 5d       	subi	r30, 0xDC	; 220
    8714:	fc 4f       	sbci	r31, 0xFC	; 252
    8716:	d9 01       	movw	r26, r18
    8718:	ad 54       	subi	r26, 0x4D	; 77
    871a:	b6 4f       	sbci	r27, 0xF6	; 246
    871c:	8c 91       	ld	r24, X
    871e:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8720:	2f 5f       	subi	r18, 0xFF	; 255
    8722:	3f 4f       	sbci	r19, 0xFF	; 255
    8724:	28 32       	cpi	r18, 0x28	; 40
    8726:	31 05       	cpc	r19, r1
    8728:	99 f7       	brne	.-26     	; 0x8710 <procMessage99+0x1b2>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    872a:	10 92 4c 03 	sts	0x034C, r1
    872e:	20 e0       	ldi	r18, 0x00	; 0
    8730:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8732:	f9 01       	movw	r30, r18
    8734:	e5 5a       	subi	r30, 0xA5	; 165
    8736:	fc 4f       	sbci	r31, 0xFC	; 252
    8738:	d9 01       	movw	r26, r18
    873a:	a5 52       	subi	r26, 0x25	; 37
    873c:	b6 4f       	sbci	r27, 0xF6	; 246
    873e:	8c 91       	ld	r24, X
    8740:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8742:	2f 5f       	subi	r18, 0xFF	; 255
    8744:	3f 4f       	sbci	r19, 0xFF	; 255
    8746:	29 31       	cpi	r18, 0x19	; 25
    8748:	31 05       	cpc	r19, r1
    874a:	99 f7       	brne	.-26     	; 0x8732 <procMessage99+0x1d4>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    874c:	10 92 74 03 	sts	0x0374, r1
    8750:	20 e0       	ldi	r18, 0x00	; 0
    8752:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8754:	f9 01       	movw	r30, r18
    8756:	e8 50       	subi	r30, 0x08	; 8
    8758:	f4 4f       	sbci	r31, 0xF4	; 244
    875a:	d9 01       	movw	r26, r18
    875c:	ac 50       	subi	r26, 0x0C	; 12
    875e:	b6 4f       	sbci	r27, 0xF6	; 246
    8760:	8c 91       	ld	r24, X
    8762:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8764:	2f 5f       	subi	r18, 0xFF	; 255
    8766:	3f 4f       	sbci	r19, 0xFF	; 255
    8768:	2d 30       	cpi	r18, 0x0D	; 13
    876a:	31 05       	cpc	r19, r1
    876c:	99 f7       	brne	.-26     	; 0x8754 <procMessage99+0x1f6>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    876e:	10 92 05 0c 	sts	0x0C05, r1
    8772:	20 e0       	ldi	r18, 0x00	; 0
    8774:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8776:	f9 01       	movw	r30, r18
    8778:	e4 57       	subi	r30, 0x74	; 116
    877a:	fc 4f       	sbci	r31, 0xFC	; 252
    877c:	d9 01       	movw	r26, r18
    877e:	af 5f       	subi	r26, 0xFF	; 255
    8780:	b5 4f       	sbci	r27, 0xF5	; 245
    8782:	8c 91       	ld	r24, X
    8784:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8786:	2f 5f       	subi	r18, 0xFF	; 255
    8788:	3f 4f       	sbci	r19, 0xFF	; 255
    878a:	2d 30       	cpi	r18, 0x0D	; 13
    878c:	31 05       	cpc	r19, r1
    878e:	99 f7       	brne	.-26     	; 0x8776 <procMessage99+0x218>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8790:	10 92 99 03 	sts	0x0399, r1
    8794:	20 e0       	ldi	r18, 0x00	; 0
    8796:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8798:	f9 01       	movw	r30, r18
    879a:	e7 51       	subi	r30, 0x17	; 23
    879c:	f7 4f       	sbci	r31, 0xF7	; 247
    879e:	d9 01       	movw	r26, r18
    87a0:	a2 5f       	subi	r26, 0xF2	; 242
    87a2:	b5 4f       	sbci	r27, 0xF5	; 245
    87a4:	8c 91       	ld	r24, X
    87a6:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    87a8:	2f 5f       	subi	r18, 0xFF	; 255
    87aa:	3f 4f       	sbci	r19, 0xFF	; 255
    87ac:	2d 30       	cpi	r18, 0x0D	; 13
    87ae:	31 05       	cpc	r19, r1
    87b0:	99 f7       	brne	.-26     	; 0x8798 <procMessage99+0x23a>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    87b2:	10 92 f6 08 	sts	0x08F6, r1
    87b6:	20 e0       	ldi	r18, 0x00	; 0
    87b8:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    87ba:	f9 01       	movw	r30, r18
    87bc:	e4 54       	subi	r30, 0x44	; 68
    87be:	f8 4f       	sbci	r31, 0xF8	; 248
    87c0:	d9 01       	movw	r26, r18
    87c2:	a5 5e       	subi	r26, 0xE5	; 229
    87c4:	b5 4f       	sbci	r27, 0xF5	; 245
    87c6:	8c 91       	ld	r24, X
    87c8:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    87ca:	2f 5f       	subi	r18, 0xFF	; 255
    87cc:	3f 4f       	sbci	r19, 0xFF	; 255
    87ce:	23 31       	cpi	r18, 0x13	; 19
    87d0:	31 05       	cpc	r19, r1
    87d2:	99 f7       	brne	.-26     	; 0x87ba <procMessage99+0x25c>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    87d4:	10 92 cf 07 	sts	0x07CF, r1
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    87d8:	80 91 2e 0a 	lds	r24, 0x0A2E
    87dc:	80 93 84 0c 	sts	0x0C84, r24
    87e0:	80 91 2f 0a 	lds	r24, 0x0A2F
    87e4:	80 93 85 0c 	sts	0x0C85, r24
	 }Dest[Length]=0;
    87e8:	10 92 86 0c 	sts	0x0C86, r1
    87ec:	20 e0       	ldi	r18, 0x00	; 0
    87ee:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    87f0:	f9 01       	movw	r30, r18
    87f2:	ec 5e       	subi	r30, 0xEC	; 236
    87f4:	f6 4f       	sbci	r31, 0xF6	; 246
    87f6:	d9 01       	movw	r26, r18
    87f8:	a0 5d       	subi	r26, 0xD0	; 208
    87fa:	b5 4f       	sbci	r27, 0xF5	; 245
    87fc:	8c 91       	ld	r24, X
    87fe:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8800:	2f 5f       	subi	r18, 0xFF	; 255
    8802:	3f 4f       	sbci	r19, 0xFF	; 255
    8804:	28 30       	cpi	r18, 0x08	; 8
    8806:	31 05       	cpc	r19, r1
    8808:	99 f7       	brne	.-26     	; 0x87f0 <procMessage99+0x292>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    880a:	10 92 1c 09 	sts	0x091C, r1
    880e:	20 e0       	ldi	r18, 0x00	; 0
    8810:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8812:	f9 01       	movw	r30, r18
    8814:	e5 54       	subi	r30, 0x45	; 69
    8816:	fd 4f       	sbci	r31, 0xFD	; 253
    8818:	d9 01       	movw	r26, r18
    881a:	a8 5c       	subi	r26, 0xC8	; 200
    881c:	b5 4f       	sbci	r27, 0xF5	; 245
    881e:	8c 91       	ld	r24, X
    8820:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8822:	2f 5f       	subi	r18, 0xFF	; 255
    8824:	3f 4f       	sbci	r19, 0xFF	; 255
    8826:	28 30       	cpi	r18, 0x08	; 8
    8828:	31 05       	cpc	r19, r1
    882a:	99 f7       	brne	.-26     	; 0x8812 <procMessage99+0x2b4>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    882c:	10 92 c3 02 	sts	0x02C3, r1
    8830:	20 e0       	ldi	r18, 0x00	; 0
    8832:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8834:	f9 01       	movw	r30, r18
    8836:	e9 51       	subi	r30, 0x19	; 25
    8838:	fd 4f       	sbci	r31, 0xFD	; 253
    883a:	d9 01       	movw	r26, r18
    883c:	a0 5c       	subi	r26, 0xC0	; 192
    883e:	b5 4f       	sbci	r27, 0xF5	; 245
    8840:	8c 91       	ld	r24, X
    8842:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8844:	2f 5f       	subi	r18, 0xFF	; 255
    8846:	3f 4f       	sbci	r19, 0xFF	; 255
    8848:	24 31       	cpi	r18, 0x14	; 20
    884a:	31 05       	cpc	r19, r1
    884c:	99 f7       	brne	.-26     	; 0x8834 <procMessage99+0x2d6>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    884e:	10 92 fb 02 	sts	0x02FB, r1
    8852:	20 e0       	ldi	r18, 0x00	; 0
    8854:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8856:	f9 01       	movw	r30, r18
    8858:	ec 53       	subi	r30, 0x3C	; 60
    885a:	fd 4f       	sbci	r31, 0xFD	; 253
    885c:	d9 01       	movw	r26, r18
    885e:	ac 5a       	subi	r26, 0xAC	; 172
    8860:	b5 4f       	sbci	r27, 0xF5	; 245
    8862:	8c 91       	ld	r24, X
    8864:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8866:	2f 5f       	subi	r18, 0xFF	; 255
    8868:	3f 4f       	sbci	r19, 0xFF	; 255
    886a:	2e 31       	cpi	r18, 0x1E	; 30
    886c:	31 05       	cpc	r19, r1
    886e:	99 f7       	brne	.-26     	; 0x8856 <procMessage99+0x2f8>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8870:	10 92 e2 02 	sts	0x02E2, r1
    8874:	20 e0       	ldi	r18, 0x00	; 0
    8876:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8878:	f9 01       	movw	r30, r18
    887a:	eb 5c       	subi	r30, 0xCB	; 203
    887c:	f7 4f       	sbci	r31, 0xF7	; 247
    887e:	d9 01       	movw	r26, r18
    8880:	ae 58       	subi	r26, 0x8E	; 142
    8882:	b5 4f       	sbci	r27, 0xF5	; 245
    8884:	8c 91       	ld	r24, X
    8886:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8888:	2f 5f       	subi	r18, 0xFF	; 255
    888a:	3f 4f       	sbci	r19, 0xFF	; 255
    888c:	28 30       	cpi	r18, 0x08	; 8
    888e:	31 05       	cpc	r19, r1
    8890:	99 f7       	brne	.-26     	; 0x8878 <procMessage99+0x31a>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8892:	10 92 3d 08 	sts	0x083D, r1
    8896:	20 e0       	ldi	r18, 0x00	; 0
    8898:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    889a:	f9 01       	movw	r30, r18
    889c:	e2 58       	subi	r30, 0x82	; 130
    889e:	fc 4f       	sbci	r31, 0xFC	; 252
    88a0:	d9 01       	movw	r26, r18
    88a2:	a6 58       	subi	r26, 0x86	; 134
    88a4:	b5 4f       	sbci	r27, 0xF5	; 245
    88a6:	8c 91       	ld	r24, X
    88a8:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    88aa:	2f 5f       	subi	r18, 0xFF	; 255
    88ac:	3f 4f       	sbci	r19, 0xFF	; 255
    88ae:	2a 30       	cpi	r18, 0x0A	; 10
    88b0:	31 05       	cpc	r19, r1
    88b2:	99 f7       	brne	.-26     	; 0x889a <procMessage99+0x33c>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    88b4:	10 92 88 03 	sts	0x0388, r1
    88b8:	20 e0       	ldi	r18, 0x00	; 0
    88ba:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    88bc:	f9 01       	movw	r30, r18
    88be:	e3 51       	subi	r30, 0x13	; 19
    88c0:	f4 4f       	sbci	r31, 0xF4	; 244
    88c2:	d9 01       	movw	r26, r18
    88c4:	ac 57       	subi	r26, 0x7C	; 124
    88c6:	b5 4f       	sbci	r27, 0xF5	; 245
    88c8:	8c 91       	ld	r24, X
    88ca:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    88cc:	2f 5f       	subi	r18, 0xFF	; 255
    88ce:	3f 4f       	sbci	r19, 0xFF	; 255
    88d0:	2a 30       	cpi	r18, 0x0A	; 10
    88d2:	31 05       	cpc	r19, r1
    88d4:	99 f7       	brne	.-26     	; 0x88bc <procMessage99+0x35e>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    88d6:	10 92 f7 0b 	sts	0x0BF7, r1
    88da:	20 e0       	ldi	r18, 0x00	; 0
    88dc:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    88de:	f9 01       	movw	r30, r18
    88e0:	e5 52       	subi	r30, 0x25	; 37
    88e2:	f8 4f       	sbci	r31, 0xF8	; 248
    88e4:	d9 01       	movw	r26, r18
    88e6:	a2 57       	subi	r26, 0x72	; 114
    88e8:	b5 4f       	sbci	r27, 0xF5	; 245
    88ea:	8c 91       	ld	r24, X
    88ec:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    88ee:	2f 5f       	subi	r18, 0xFF	; 255
    88f0:	3f 4f       	sbci	r19, 0xFF	; 255
    88f2:	24 31       	cpi	r18, 0x14	; 20
    88f4:	31 05       	cpc	r19, r1
    88f6:	99 f7       	brne	.-26     	; 0x88de <procMessage99+0x380>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    88f8:	10 92 ef 07 	sts	0x07EF, r1
    88fc:	20 e0       	ldi	r18, 0x00	; 0
    88fe:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8900:	f9 01       	movw	r30, r18
    8902:	ee 5a       	subi	r30, 0xAE	; 174
    8904:	f7 4f       	sbci	r31, 0xF7	; 247
    8906:	d9 01       	movw	r26, r18
    8908:	ae 55       	subi	r26, 0x5E	; 94
    890a:	b5 4f       	sbci	r27, 0xF5	; 245
    890c:	8c 91       	ld	r24, X
    890e:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8910:	2f 5f       	subi	r18, 0xFF	; 255
    8912:	3f 4f       	sbci	r19, 0xFF	; 255
    8914:	2a 30       	cpi	r18, 0x0A	; 10
    8916:	31 05       	cpc	r19, r1
    8918:	99 f7       	brne	.-26     	; 0x8900 <procMessage99+0x3a2>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    891a:	10 92 5c 08 	sts	0x085C, r1
    891e:	20 e0       	ldi	r18, 0x00	; 0
    8920:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8922:	f9 01       	movw	r30, r18
    8924:	e6 56       	subi	r30, 0x66	; 102
    8926:	fc 4f       	sbci	r31, 0xFC	; 252
    8928:	d9 01       	movw	r26, r18
    892a:	a4 55       	subi	r26, 0x54	; 84
    892c:	b5 4f       	sbci	r27, 0xF5	; 245
    892e:	8c 91       	ld	r24, X
    8930:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8932:	2f 5f       	subi	r18, 0xFF	; 255
    8934:	3f 4f       	sbci	r19, 0xFF	; 255
    8936:	28 30       	cpi	r18, 0x08	; 8
    8938:	31 05       	cpc	r19, r1
    893a:	99 f7       	brne	.-26     	; 0x8922 <procMessage99+0x3c4>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    893c:	10 92 a2 03 	sts	0x03A2, r1
    8940:	20 e0       	ldi	r18, 0x00	; 0
    8942:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8944:	f9 01       	movw	r30, r18
    8946:	e7 58       	subi	r30, 0x87	; 135
    8948:	f3 4f       	sbci	r31, 0xF3	; 243
    894a:	d9 01       	movw	r26, r18
    894c:	ac 54       	subi	r26, 0x4C	; 76
    894e:	b5 4f       	sbci	r27, 0xF5	; 245
    8950:	8c 91       	ld	r24, X
    8952:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8954:	2f 5f       	subi	r18, 0xFF	; 255
    8956:	3f 4f       	sbci	r19, 0xFF	; 255
    8958:	2a 30       	cpi	r18, 0x0A	; 10
    895a:	31 05       	cpc	r19, r1
    895c:	99 f7       	brne	.-26     	; 0x8944 <procMessage99+0x3e6>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    895e:	10 92 83 0c 	sts	0x0C83, r1
    8962:	20 e0       	ldi	r18, 0x00	; 0
    8964:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8966:	f9 01       	movw	r30, r18
    8968:	e6 5f       	subi	r30, 0xF6	; 246
    896a:	f3 4f       	sbci	r31, 0xF3	; 243
    896c:	d9 01       	movw	r26, r18
    896e:	a2 54       	subi	r26, 0x42	; 66
    8970:	b5 4f       	sbci	r27, 0xF5	; 245
    8972:	8c 91       	ld	r24, X
    8974:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8976:	2f 5f       	subi	r18, 0xFF	; 255
    8978:	3f 4f       	sbci	r19, 0xFF	; 255
    897a:	24 31       	cpi	r18, 0x14	; 20
    897c:	31 05       	cpc	r19, r1
    897e:	99 f7       	brne	.-26     	; 0x8966 <procMessage99+0x408>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8980:	10 92 1e 0c 	sts	0x0C1E, r1
    8984:	20 e0       	ldi	r18, 0x00	; 0
    8986:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8988:	f9 01       	movw	r30, r18
    898a:	e3 53       	subi	r30, 0x33	; 51
    898c:	fc 4f       	sbci	r31, 0xFC	; 252
    898e:	d9 01       	movw	r26, r18
    8990:	ae 52       	subi	r26, 0x2E	; 46
    8992:	b5 4f       	sbci	r27, 0xF5	; 245
    8994:	8c 91       	ld	r24, X
    8996:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8998:	2f 5f       	subi	r18, 0xFF	; 255
    899a:	3f 4f       	sbci	r19, 0xFF	; 255
    899c:	2e 31       	cpi	r18, 0x1E	; 30
    899e:	31 05       	cpc	r19, r1
    89a0:	99 f7       	brne	.-26     	; 0x8988 <procMessage99+0x42a>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    89a2:	10 92 eb 03 	sts	0x03EB, r1
       StrPosCopy(rcv_trans,strCorporateName,437,30);
	   //


	   //FIP Detection LocalAccount Null Filling
	   if ((nLocalAccount>0)&&(LocalAccountFIP[0]==atoi(strFIP_ID))){
    89a6:	80 91 8f 01 	lds	r24, 0x018F
    89aa:	88 23       	and	r24, r24
    89ac:	69 f0       	breq	.+26     	; 0x89c8 <procMessage99+0x46a>
    89ae:	00 91 56 03 	lds	r16, 0x0356
    89b2:	10 e0       	ldi	r17, 0x00	; 0
    89b4:	89 eb       	ldi	r24, 0xB9	; 185
    89b6:	97 e0       	ldi	r25, 0x07	; 7
    89b8:	0e 94 4c aa 	call	0x15498	; 0x15498 <atoi>
    89bc:	08 17       	cp	r16, r24
    89be:	19 07       	cpc	r17, r25
    89c0:	19 f4       	brne	.+6      	; 0x89c8 <procMessage99+0x46a>
	        IsCompleteFilling=True;
    89c2:	81 e0       	ldi	r24, 0x01	; 1
    89c4:	80 93 a9 01 	sts	0x01A9, r24
	   }

	  }
     return Result;     
}
    89c8:	80 e0       	ldi	r24, 0x00	; 0
    89ca:	1f 91       	pop	r17
    89cc:	0f 91       	pop	r16
    89ce:	08 95       	ret

000089d0 <GetMessageID>:
		  }
       IsStandaloneAcknoledge=True;
	  }
}

char GetMessageID(char *strMessageFlow){
    89d0:	0f 93       	push	r16
    89d2:	1f 93       	push	r17
    89d4:	df 93       	push	r29
    89d6:	cf 93       	push	r28
    89d8:	00 d0       	rcall	.+0      	; 0x89da <GetMessageID+0xa>
    89da:	0f 92       	push	r0
    89dc:	cd b7       	in	r28, 0x3d	; 61
    89de:	de b7       	in	r29, 0x3e	; 62
    89e0:	fc 01       	movw	r30, r24
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    89e2:	80 81       	ld	r24, Z
    89e4:	89 83       	std	Y+1, r24	; 0x01
    89e6:	81 81       	ldd	r24, Z+1	; 0x01
    89e8:	8a 83       	std	Y+2, r24	; 0x02
	 }Dest[Length]=0;
    89ea:	1b 82       	std	Y+3, r1	; 0x03
}

char GetMessageID(char *strMessageFlow){
     char Result,strMsgID[3];
	 StrPosCopy(strMessageFlow,strMsgID,0,2);
	 RemZeroLead(strMsgID);
    89ec:	8e 01       	movw	r16, r28
    89ee:	0f 5f       	subi	r16, 0xFF	; 255
    89f0:	1f 4f       	sbci	r17, 0xFF	; 255
    89f2:	c8 01       	movw	r24, r16
    89f4:	0e 94 df 26 	call	0x4dbe	; 0x4dbe <RemZeroLead>
	 Result=atoi(strMsgID);
    89f8:	c8 01       	movw	r24, r16
    89fa:	0e 94 4c aa 	call	0x15498	; 0x15498 <atoi>
  return Result;
}
    89fe:	0f 90       	pop	r0
    8a00:	0f 90       	pop	r0
    8a02:	0f 90       	pop	r0
    8a04:	cf 91       	pop	r28
    8a06:	df 91       	pop	r29
    8a08:	1f 91       	pop	r17
    8a0a:	0f 91       	pop	r16
    8a0c:	08 95       	ret

00008a0e <SendPrint>:
	 for(i=0;i<strlen(Source);i++){
	    Dest[i]=pgm_read_byte(&Source[i]);
	 }
}

void SendPrint(char xSend,char xSendLead){
    8a0e:	1f 93       	push	r17
    8a10:	18 2f       	mov	r17, r24
static char zSend;     
	 if (xSend==0x19){
    8a12:	89 31       	cpi	r24, 0x19	; 25
    8a14:	59 f4       	brne	.+22     	; 0x8a2c <SendPrint+0x1e>
	     if (zSend==xSendLead)uart(_COM_PRINTER,1,xSendLead);
    8a16:	40 91 f6 01 	lds	r20, 0x01F6
    8a1a:	46 17       	cp	r20, r22
    8a1c:	19 f4       	brne	.+6      	; 0x8a24 <SendPrint+0x16>
    8a1e:	80 e0       	ldi	r24, 0x00	; 0
    8a20:	61 e0       	ldi	r22, 0x01	; 1
    8a22:	07 c0       	rjmp	.+14     	; 0x8a32 <SendPrint+0x24>
		 else uart(_COM_PRINTER,1,' ');	 
    8a24:	80 e0       	ldi	r24, 0x00	; 0
    8a26:	61 e0       	ldi	r22, 0x01	; 1
    8a28:	40 e2       	ldi	r20, 0x20	; 32
    8a2a:	03 c0       	rjmp	.+6      	; 0x8a32 <SendPrint+0x24>
	 } 
	 else uart(_COM_PRINTER,1,xSend);
    8a2c:	80 e0       	ldi	r24, 0x00	; 0
    8a2e:	61 e0       	ldi	r22, 0x01	; 1
    8a30:	41 2f       	mov	r20, r17
    8a32:	0e 94 5b a8 	call	0x150b6	; 0x150b6 <uart>
	 zSend=xSend;
    8a36:	10 93 f6 01 	sts	0x01F6, r17
}
    8a3a:	1f 91       	pop	r17
    8a3c:	08 95       	ret

00008a3e <CarriegeReturn>:
	      break;	 
	 }
}

void CarriegeReturn(){
     uart(_COM_PRINTER, 1, 0x0D);     
    8a3e:	80 e0       	ldi	r24, 0x00	; 0
    8a40:	61 e0       	ldi	r22, 0x01	; 1
    8a42:	4d e0       	ldi	r20, 0x0D	; 13
    8a44:	0e 94 5b a8 	call	0x150b6	; 0x150b6 <uart>
     uart(_COM_PRINTER, 1, 0x0A);
    8a48:	80 e0       	ldi	r24, 0x00	; 0
    8a4a:	61 e0       	ldi	r22, 0x01	; 1
    8a4c:	4a e0       	ldi	r20, 0x0A	; 10
    8a4e:	0e 94 5b a8 	call	0x150b6	; 0x150b6 <uart>
}
    8a52:	08 95       	ret

00008a54 <InitPrinter>:
		 }
}

void InitPrinter(){
char PrinterType;
     PrinterType=eeprom_read_byte(&DefPrinterType);
    8a54:	80 e3       	ldi	r24, 0x30	; 48
    8a56:	90 e0       	ldi	r25, 0x00	; 0
    8a58:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
    //Custom Printer TG02
	//Density Lowest: 1D 7C 00
	if (PrinterType==PT_CUSTOM_TG02){
    8a5c:	81 30       	cpi	r24, 0x01	; 1
    8a5e:	71 f5       	brne	.+92     	; 0x8abc <InitPrinter+0x68>
		uart(_COM_PRINTER, 1, 0x1D);uart(_COM_PRINTER, 1, 0x7C);uart(_COM_PRINTER, 1, 0x00);
    8a60:	80 e0       	ldi	r24, 0x00	; 0
    8a62:	61 e0       	ldi	r22, 0x01	; 1
    8a64:	4d e1       	ldi	r20, 0x1D	; 29
    8a66:	0e 94 5b a8 	call	0x150b6	; 0x150b6 <uart>
    8a6a:	80 e0       	ldi	r24, 0x00	; 0
    8a6c:	61 e0       	ldi	r22, 0x01	; 1
    8a6e:	4c e7       	ldi	r20, 0x7C	; 124
    8a70:	0e 94 5b a8 	call	0x150b6	; 0x150b6 <uart>
    8a74:	80 e0       	ldi	r24, 0x00	; 0
    8a76:	61 e0       	ldi	r22, 0x01	; 1
    8a78:	40 e0       	ldi	r20, 0x00	; 0
    8a7a:	0e 94 5b a8 	call	0x150b6	; 0x150b6 <uart>
		//Double Strike ON : 1B 47 01
		uart(_COM_PRINTER, 1, 0x1B);uart(_COM_PRINTER, 1, 0x47);uart(_COM_PRINTER, 1, 0x01);
    8a7e:	80 e0       	ldi	r24, 0x00	; 0
    8a80:	61 e0       	ldi	r22, 0x01	; 1
    8a82:	4b e1       	ldi	r20, 0x1B	; 27
    8a84:	0e 94 5b a8 	call	0x150b6	; 0x150b6 <uart>
    8a88:	80 e0       	ldi	r24, 0x00	; 0
    8a8a:	61 e0       	ldi	r22, 0x01	; 1
    8a8c:	47 e4       	ldi	r20, 0x47	; 71
    8a8e:	0e 94 5b a8 	call	0x150b6	; 0x150b6 <uart>
    8a92:	80 e0       	ldi	r24, 0x00	; 0
    8a94:	61 e0       	ldi	r22, 0x01	; 1
    8a96:	41 e0       	ldi	r20, 0x01	; 1
    8a98:	0e 94 5b a8 	call	0x150b6	; 0x150b6 <uart>
		//Font Setting: 1D 21 01
		uart(_COM_PRINTER, 1, 0x1D);uart(_COM_PRINTER, 1, 0x21);uart(_COM_PRINTER, 1, 0x01);   
    8a9c:	80 e0       	ldi	r24, 0x00	; 0
    8a9e:	61 e0       	ldi	r22, 0x01	; 1
    8aa0:	4d e1       	ldi	r20, 0x1D	; 29
    8aa2:	0e 94 5b a8 	call	0x150b6	; 0x150b6 <uart>
    8aa6:	80 e0       	ldi	r24, 0x00	; 0
    8aa8:	61 e0       	ldi	r22, 0x01	; 1
    8aaa:	41 e2       	ldi	r20, 0x21	; 33
    8aac:	0e 94 5b a8 	call	0x150b6	; 0x150b6 <uart>
    8ab0:	80 e0       	ldi	r24, 0x00	; 0
    8ab2:	61 e0       	ldi	r22, 0x01	; 1
    8ab4:	41 e0       	ldi	r20, 0x01	; 1
    8ab6:	0e 94 5b a8 	call	0x150b6	; 0x150b6 <uart>
    8aba:	08 95       	ret
		}
    else
	if (PrinterType==PT_CUSTOM_CUBE){
    8abc:	82 30       	cpi	r24, 0x02	; 2
    8abe:	69 f5       	brne	.+90     	; 0x8b1a <InitPrinter+0xc6>
        //Print Density 0%
		uart(_COM_PRINTER, 1, 0x1D);uart(_COM_PRINTER, 1, 0x7C);uart(_COM_PRINTER, 1, 0x04);
    8ac0:	80 e0       	ldi	r24, 0x00	; 0
    8ac2:	61 e0       	ldi	r22, 0x01	; 1
    8ac4:	4d e1       	ldi	r20, 0x1D	; 29
    8ac6:	0e 94 5b a8 	call	0x150b6	; 0x150b6 <uart>
    8aca:	80 e0       	ldi	r24, 0x00	; 0
    8acc:	61 e0       	ldi	r22, 0x01	; 1
    8ace:	4c e7       	ldi	r20, 0x7C	; 124
    8ad0:	0e 94 5b a8 	call	0x150b6	; 0x150b6 <uart>
    8ad4:	80 e0       	ldi	r24, 0x00	; 0
    8ad6:	61 e0       	ldi	r22, 0x01	; 1
    8ad8:	44 e0       	ldi	r20, 0x04	; 4
    8ada:	0e 94 5b a8 	call	0x150b6	; 0x150b6 <uart>
		//Double Strike OFF : 1B 47 00
		uart(_COM_PRINTER, 1, 0x1B);uart(_COM_PRINTER, 1, 0x47);uart(_COM_PRINTER, 1, 0x00);
    8ade:	80 e0       	ldi	r24, 0x00	; 0
    8ae0:	61 e0       	ldi	r22, 0x01	; 1
    8ae2:	4b e1       	ldi	r20, 0x1B	; 27
    8ae4:	0e 94 5b a8 	call	0x150b6	; 0x150b6 <uart>
    8ae8:	80 e0       	ldi	r24, 0x00	; 0
    8aea:	61 e0       	ldi	r22, 0x01	; 1
    8aec:	47 e4       	ldi	r20, 0x47	; 71
    8aee:	0e 94 5b a8 	call	0x150b6	; 0x150b6 <uart>
    8af2:	80 e0       	ldi	r24, 0x00	; 0
    8af4:	61 e0       	ldi	r22, 0x01	; 1
    8af6:	40 e0       	ldi	r20, 0x00	; 0
    8af8:	0e 94 5b a8 	call	0x150b6	; 0x150b6 <uart>
		//Font Setting: 1D 21 01
		uart(_COM_PRINTER, 1, 0x1D);uart(_COM_PRINTER, 1, 0x21);uart(_COM_PRINTER, 1, 0x00);   
    8afc:	80 e0       	ldi	r24, 0x00	; 0
    8afe:	61 e0       	ldi	r22, 0x01	; 1
    8b00:	4d e1       	ldi	r20, 0x1D	; 29
    8b02:	0e 94 5b a8 	call	0x150b6	; 0x150b6 <uart>
    8b06:	80 e0       	ldi	r24, 0x00	; 0
    8b08:	61 e0       	ldi	r22, 0x01	; 1
    8b0a:	41 e2       	ldi	r20, 0x21	; 33
    8b0c:	0e 94 5b a8 	call	0x150b6	; 0x150b6 <uart>
    8b10:	80 e0       	ldi	r24, 0x00	; 0
    8b12:	61 e0       	ldi	r22, 0x01	; 1
    8b14:	40 e0       	ldi	r20, 0x00	; 0
    8b16:	0e 94 5b a8 	call	0x150b6	; 0x150b6 <uart>
    8b1a:	08 95       	ret

00008b1c <PrintNormalHeight>:
		 }
}

void PrintNormalHeight(){
char PrinterType;
     PrinterType=eeprom_read_byte(&DefPrinterType);
    8b1c:	80 e3       	ldi	r24, 0x30	; 48
    8b1e:	90 e0       	ldi	r25, 0x00	; 0
    8b20:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
	 if (PrinterType==PT_CUSTOM_CUBE){
    8b24:	82 30       	cpi	r24, 0x02	; 2
    8b26:	79 f4       	brne	.+30     	; 0x8b46 <PrintNormalHeight+0x2a>
	     uart(_COM_PRINTER, 1, 0x1D);uart(_COM_PRINTER, 1, 0x21);uart(_COM_PRINTER, 1, 0x00);
    8b28:	80 e0       	ldi	r24, 0x00	; 0
    8b2a:	61 e0       	ldi	r22, 0x01	; 1
    8b2c:	4d e1       	ldi	r20, 0x1D	; 29
    8b2e:	0e 94 5b a8 	call	0x150b6	; 0x150b6 <uart>
    8b32:	80 e0       	ldi	r24, 0x00	; 0
    8b34:	61 e0       	ldi	r22, 0x01	; 1
    8b36:	41 e2       	ldi	r20, 0x21	; 33
    8b38:	0e 94 5b a8 	call	0x150b6	; 0x150b6 <uart>
    8b3c:	80 e0       	ldi	r24, 0x00	; 0
    8b3e:	61 e0       	ldi	r22, 0x01	; 1
    8b40:	40 e0       	ldi	r20, 0x00	; 0
    8b42:	0e 94 5b a8 	call	0x150b6	; 0x150b6 <uart>
    8b46:	08 95       	ret

00008b48 <PrintDoubleHeight>:

//void SetPrinterCharacterWidth

void PrintDoubleHeight(){
char PrinterType;
     PrinterType=eeprom_read_byte(&DefPrinterType);
    8b48:	80 e3       	ldi	r24, 0x30	; 48
    8b4a:	90 e0       	ldi	r25, 0x00	; 0
    8b4c:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
	 if (PrinterType==PT_CUSTOM_CUBE){
    8b50:	82 30       	cpi	r24, 0x02	; 2
    8b52:	79 f4       	brne	.+30     	; 0x8b72 <PrintDoubleHeight+0x2a>
	     uart(_COM_PRINTER, 1, 0x1D);uart(_COM_PRINTER, 1, 0x21);uart(_COM_PRINTER, 1, 0x01);
    8b54:	80 e0       	ldi	r24, 0x00	; 0
    8b56:	61 e0       	ldi	r22, 0x01	; 1
    8b58:	4d e1       	ldi	r20, 0x1D	; 29
    8b5a:	0e 94 5b a8 	call	0x150b6	; 0x150b6 <uart>
    8b5e:	80 e0       	ldi	r24, 0x00	; 0
    8b60:	61 e0       	ldi	r22, 0x01	; 1
    8b62:	41 e2       	ldi	r20, 0x21	; 33
    8b64:	0e 94 5b a8 	call	0x150b6	; 0x150b6 <uart>
    8b68:	80 e0       	ldi	r24, 0x00	; 0
    8b6a:	61 e0       	ldi	r22, 0x01	; 1
    8b6c:	41 e0       	ldi	r20, 0x01	; 1
    8b6e:	0e 94 5b a8 	call	0x150b6	; 0x150b6 <uart>
    8b72:	08 95       	ret

00008b74 <PaperCut>:

	 return Result;
}


void PaperCut(){
    8b74:	1f 93       	push	r17
     char CutType;
     CutType= eeprom_read_byte(&DefPrintAutoCut);
    8b76:	83 e3       	ldi	r24, 0x33	; 51
    8b78:	90 e0       	ldi	r25, 0x00	; 0
    8b7a:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
    8b7e:	18 2f       	mov	r17, r24
     uart(_COM_PRINTER, 1, 0x1B);
    8b80:	80 e0       	ldi	r24, 0x00	; 0
    8b82:	61 e0       	ldi	r22, 0x01	; 1
    8b84:	4b e1       	ldi	r20, 0x1B	; 27
    8b86:	0e 94 5b a8 	call	0x150b6	; 0x150b6 <uart>
	 if(CutType== 1) { uart(_COM_PRINTER, 1, 0x6D);}
    8b8a:	11 30       	cpi	r17, 0x01	; 1
    8b8c:	21 f4       	brne	.+8      	; 0x8b96 <PaperCut+0x22>
    8b8e:	80 e0       	ldi	r24, 0x00	; 0
    8b90:	61 e0       	ldi	r22, 0x01	; 1
    8b92:	4d e6       	ldi	r20, 0x6D	; 109
    8b94:	05 c0       	rjmp	.+10     	; 0x8ba0 <PaperCut+0x2c>
	 if(CutType== 2) {uart(_COM_PRINTER, 1, 0x69);}
    8b96:	12 30       	cpi	r17, 0x02	; 2
    8b98:	29 f4       	brne	.+10     	; 0x8ba4 <PaperCut+0x30>
    8b9a:	80 e0       	ldi	r24, 0x00	; 0
    8b9c:	61 e0       	ldi	r22, 0x01	; 1
    8b9e:	49 e6       	ldi	r20, 0x69	; 105
    8ba0:	0e 94 5b a8 	call	0x150b6	; 0x150b6 <uart>

}
    8ba4:	1f 91       	pop	r17
    8ba6:	08 95       	ret

00008ba8 <procMessage11>:
}




void procMessage11(){
    8ba8:	6f 92       	push	r6
    8baa:	7f 92       	push	r7
    8bac:	8f 92       	push	r8
    8bae:	9f 92       	push	r9
    8bb0:	af 92       	push	r10
    8bb2:	bf 92       	push	r11
    8bb4:	cf 92       	push	r12
    8bb6:	df 92       	push	r13
    8bb8:	ef 92       	push	r14
    8bba:	ff 92       	push	r15
    8bbc:	0f 93       	push	r16
    8bbe:	1f 93       	push	r17
    8bc0:	df 93       	push	r29
    8bc2:	cf 93       	push	r28
    8bc4:	cd b7       	in	r28, 0x3d	; 61
    8bc6:	de b7       	in	r29, 0x3e	; 62
    8bc8:	c0 59       	subi	r28, 0x90	; 144
    8bca:	d0 40       	sbci	r29, 0x00	; 0
    8bcc:	0f b6       	in	r0, 0x3f	; 63
    8bce:	f8 94       	cli
    8bd0:	de bf       	out	0x3e, r29	; 62
    8bd2:	0f be       	out	0x3f, r0	; 63
    8bd4:	cd bf       	out	0x3d, r28	; 61
    8bd6:	20 e0       	ldi	r18, 0x00	; 0
    8bd8:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8bda:	ae 01       	movw	r20, r28
    8bdc:	46 5f       	subi	r20, 0xF6	; 246
    8bde:	5f 4f       	sbci	r21, 0xFF	; 255
    8be0:	fa 01       	movw	r30, r20
    8be2:	e2 0f       	add	r30, r18
    8be4:	f3 1f       	adc	r31, r19
    8be6:	d9 01       	movw	r26, r18
    8be8:	a3 5e       	subi	r26, 0xE3	; 227
    8bea:	b6 4f       	sbci	r27, 0xF6	; 246
    8bec:	9b 96       	adiw	r26, 0x2b	; 43
    8bee:	8c 91       	ld	r24, X
    8bf0:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8bf2:	2f 5f       	subi	r18, 0xFF	; 255
    8bf4:	3f 4f       	sbci	r19, 0xFF	; 255
    8bf6:	2a 30       	cpi	r18, 0x0A	; 10
    8bf8:	31 05       	cpc	r19, r1
    8bfa:	91 f7       	brne	.-28     	; 0x8be0 <procMessage11+0x38>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8bfc:	fa 01       	movw	r30, r20
    8bfe:	12 86       	std	Z+10, r1	; 0x0a
     char buffHeader[50],strReadEEPROM[50];
	 char strProductName[13],strProductPrice[9],strTime[12],strDate[10];

     //Update Datetime
	 StrPosCopy(rcv_trans,strDate,43,10);//2004/09/14 19:05:36
	 FormatDate(DATE_SHORT_YEAR,strDate);
    8c00:	81 e0       	ldi	r24, 0x01	; 1
    8c02:	ba 01       	movw	r22, r20
    8c04:	0e 94 8e 26 	call	0x4d1c	; 0x4d1c <FormatDate>
    8c08:	20 e0       	ldi	r18, 0x00	; 0
    8c0a:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8c0c:	ae 01       	movw	r20, r28
    8c0e:	4c 5e       	subi	r20, 0xEC	; 236
    8c10:	5f 4f       	sbci	r21, 0xFF	; 255
    8c12:	fa 01       	movw	r30, r20
    8c14:	e2 0f       	add	r30, r18
    8c16:	f3 1f       	adc	r31, r19
    8c18:	d9 01       	movw	r26, r18
    8c1a:	a3 5e       	subi	r26, 0xE3	; 227
    8c1c:	b6 4f       	sbci	r27, 0xF6	; 246
    8c1e:	d6 96       	adiw	r26, 0x36	; 54
    8c20:	8c 91       	ld	r24, X
    8c22:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8c24:	2f 5f       	subi	r18, 0xFF	; 255
    8c26:	3f 4f       	sbci	r19, 0xFF	; 255
    8c28:	28 30       	cpi	r18, 0x08	; 8
    8c2a:	31 05       	cpc	r19, r1
    8c2c:	91 f7       	brne	.-28     	; 0x8c12 <procMessage11+0x6a>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8c2e:	1c 8e       	std	Y+28, r1	; 0x1c

     //Update Datetime
	 StrPosCopy(rcv_trans,strDate,43,10);//2004/09/14 19:05:36
	 FormatDate(DATE_SHORT_YEAR,strDate);
	 StrPosCopy(rcv_trans,strTime,54,8);
	 _datetime(_DATETIME_WRITE,strDate,strTime);
    8c30:	81 e0       	ldi	r24, 0x01	; 1
    8c32:	be 01       	movw	r22, r28
    8c34:	66 5f       	subi	r22, 0xF6	; 246
    8c36:	7f 4f       	sbci	r23, 0xFF	; 255
    8c38:	0e 94 57 a7 	call	0x14eae	; 0x14eae <_datetime>
    8c3c:	07 e2       	ldi	r16, 0x27	; 39
    8c3e:	12 e0       	ldi	r17, 0x02	; 2
    8c40:	6b e5       	ldi	r22, 0x5B	; 91
    8c42:	e6 2e       	mov	r14, r22
    8c44:	69 e0       	ldi	r22, 0x09	; 9
    8c46:	f6 2e       	mov	r15, r22
    8c48:	5d e2       	ldi	r21, 0x2D	; 45
    8c4a:	c5 2e       	mov	r12, r21
    8c4c:	d1 2c       	mov	r13, r1
    8c4e:	cc 0e       	add	r12, r28
    8c50:	dd 1e       	adc	r13, r29
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8c52:	48 e2       	ldi	r20, 0x28	; 40
    8c54:	a4 2e       	mov	r10, r20
    8c56:	b1 2c       	mov	r11, r1
    8c58:	ac 0c       	add	r10, r12
    8c5a:	bd 1c       	adc	r11, r13
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8c5c:	35 e5       	ldi	r19, 0x55	; 85
    8c5e:	63 2e       	mov	r6, r19
    8c60:	71 2c       	mov	r7, r1
    8c62:	6c 0e       	add	r6, r28
    8c64:	7d 1e       	adc	r7, r29
	      
	 //HeaderFooter
	 for(i=0;i<10;i++){
	     FillChar(buffHeader,0,sizeof(buffHeader));   
         StrPosCopy(rcv_trans,buffHeader,62+(i*40),40);
		 eeprom_read_block((void*) &strReadEEPROM, (const void*) &DefHeaderFooter[i],41);
    8c66:	2f e5       	ldi	r18, 0x5F	; 95
    8c68:	82 2e       	mov	r8, r18
    8c6a:	91 2c       	mov	r9, r1
    8c6c:	8c 0e       	add	r8, r28
    8c6e:	9d 1e       	adc	r9, r29

     //Update Datetime
	 StrPosCopy(rcv_trans,strDate,43,10);//2004/09/14 19:05:36
	 FormatDate(DATE_SHORT_YEAR,strDate);
	 StrPosCopy(rcv_trans,strTime,54,8);
	 _datetime(_DATETIME_WRITE,strDate,strTime);
    8c70:	f6 01       	movw	r30, r12
    8c72:	d7 01       	movw	r26, r14
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8c74:	8d 91       	ld	r24, X+
    8c76:	81 93       	st	Z+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8c78:	ea 15       	cp	r30, r10
    8c7a:	fb 05       	cpc	r31, r11
    8c7c:	d9 f7       	brne	.-10     	; 0x8c74 <procMessage11+0xcc>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8c7e:	f3 01       	movw	r30, r6
    8c80:	10 82       	st	Z, r1
	      
	 //HeaderFooter
	 for(i=0;i<10;i++){
	     FillChar(buffHeader,0,sizeof(buffHeader));   
         StrPosCopy(rcv_trans,buffHeader,62+(i*40),40);
		 eeprom_read_block((void*) &strReadEEPROM, (const void*) &DefHeaderFooter[i],41);
    8c82:	c4 01       	movw	r24, r8
    8c84:	b8 01       	movw	r22, r16
    8c86:	49 e2       	ldi	r20, 0x29	; 41
    8c88:	50 e0       	ldi	r21, 0x00	; 0
    8c8a:	0e 94 b9 ac 	call	0x15972	; 0x15972 <__eerd_block_m128>
	     if (strcmp(strReadEEPROM,buffHeader)!=0)
    8c8e:	c4 01       	movw	r24, r8
    8c90:	b6 01       	movw	r22, r12
    8c92:	0e 94 71 aa 	call	0x154e2	; 0x154e2 <strcmp>
    8c96:	00 97       	sbiw	r24, 0x00	; 0
    8c98:	31 f0       	breq	.+12     	; 0x8ca6 <procMessage11+0xfe>
		     eeprom_write_block((const void*) &buffHeader, (void*) &DefHeaderFooter[i], 41);
    8c9a:	c6 01       	movw	r24, r12
    8c9c:	b8 01       	movw	r22, r16
    8c9e:	49 e2       	ldi	r20, 0x29	; 41
    8ca0:	50 e0       	ldi	r21, 0x00	; 0
    8ca2:	0e 94 d1 ac 	call	0x159a2	; 0x159a2 <__eewr_block_m128>
    8ca6:	07 5d       	subi	r16, 0xD7	; 215
    8ca8:	1f 4f       	sbci	r17, 0xFF	; 255
    8caa:	88 e2       	ldi	r24, 0x28	; 40
    8cac:	90 e0       	ldi	r25, 0x00	; 0
    8cae:	e8 0e       	add	r14, r24
    8cb0:	f9 1e       	adc	r15, r25
	 FormatDate(DATE_SHORT_YEAR,strDate);
	 StrPosCopy(rcv_trans,strTime,54,8);
	 _datetime(_DATETIME_WRITE,strDate,strTime);
	      
	 //HeaderFooter
	 for(i=0;i<10;i++){
    8cb2:	93 e0       	ldi	r25, 0x03	; 3
    8cb4:	01 3c       	cpi	r16, 0xC1	; 193
    8cb6:	19 07       	cpc	r17, r25
    8cb8:	d9 f6       	brne	.-74     	; 0x8c70 <procMessage11+0xc8>
    8cba:	0b eb       	ldi	r16, 0xBB	; 187
    8cbc:	10 e0       	ldi	r17, 0x00	; 0
    8cbe:	93 e0       	ldi	r25, 0x03	; 3
    8cc0:	e9 2e       	mov	r14, r25
    8cc2:	9b e0       	ldi	r25, 0x0B	; 11
    8cc4:	f9 2e       	mov	r15, r25
    8cc6:	80 e2       	ldi	r24, 0x20	; 32
    8cc8:	c8 2e       	mov	r12, r24
    8cca:	d1 2c       	mov	r13, r1
    8ccc:	cc 0e       	add	r12, r28
    8cce:	dd 1e       	adc	r13, r29
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8cd0:	bc e2       	ldi	r27, 0x2C	; 44
    8cd2:	8b 2e       	mov	r8, r27
    8cd4:	91 2c       	mov	r9, r1
    8cd6:	8c 0e       	add	r8, r28
    8cd8:	9d 1e       	adc	r9, r29
	 */
	 //ProductName
	 for(i=0;i<6;i++){
	    StrPosCopy(rcv_trans,strProductName,(486+(i*12)),12);
		RemSpaceLag(strProductName);
		eeprom_read_block((void*) &strReadEEPROM, (const void*) &DefProductName[i],12);
    8cda:	af e5       	ldi	r26, 0x5F	; 95
    8cdc:	aa 2e       	mov	r10, r26
    8cde:	b1 2c       	mov	r11, r1
    8ce0:	ac 0e       	add	r10, r28
    8ce2:	bd 1e       	adc	r11, r29
	 FormatDate(DATE_SHORT_YEAR,strDate);
	 StrPosCopy(rcv_trans,strTime,54,8);
	 _datetime(_DATETIME_WRITE,strDate,strTime);
	      
	 //HeaderFooter
	 for(i=0;i<10;i++){
    8ce4:	f6 01       	movw	r30, r12
    8ce6:	d7 01       	movw	r26, r14
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8ce8:	8d 91       	ld	r24, X+
    8cea:	81 93       	st	Z+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8cec:	e8 15       	cp	r30, r8
    8cee:	f9 05       	cpc	r31, r9
    8cf0:	d9 f7       	brne	.-10     	; 0x8ce8 <procMessage11+0x140>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8cf2:	1c a6       	std	Y+44, r1	; 0x2c
     eeprom_write_block((const void*) &buffHeader, (void*) &DefHeaderFooter[9], 40);
	 */
	 //ProductName
	 for(i=0;i<6;i++){
	    StrPosCopy(rcv_trans,strProductName,(486+(i*12)),12);
		RemSpaceLag(strProductName);
    8cf4:	c6 01       	movw	r24, r12
    8cf6:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <RemSpaceLag>
		eeprom_read_block((void*) &strReadEEPROM, (const void*) &DefProductName[i],12);
    8cfa:	c5 01       	movw	r24, r10
    8cfc:	b8 01       	movw	r22, r16
    8cfe:	4c e0       	ldi	r20, 0x0C	; 12
    8d00:	50 e0       	ldi	r21, 0x00	; 0
    8d02:	0e 94 b9 ac 	call	0x15972	; 0x15972 <__eerd_block_m128>
		if (strcmp(strReadEEPROM,strProductName)!=0)
    8d06:	c5 01       	movw	r24, r10
    8d08:	b6 01       	movw	r22, r12
    8d0a:	0e 94 71 aa 	call	0x154e2	; 0x154e2 <strcmp>
    8d0e:	00 97       	sbiw	r24, 0x00	; 0
    8d10:	31 f0       	breq	.+12     	; 0x8d1e <procMessage11+0x176>
		    eeprom_write_block((const void*) &strProductName, (void*) &DefProductName[i], 12);
    8d12:	c6 01       	movw	r24, r12
    8d14:	b8 01       	movw	r22, r16
    8d16:	4c e0       	ldi	r20, 0x0C	; 12
    8d18:	50 e0       	ldi	r21, 0x00	; 0
    8d1a:	0e 94 d1 ac 	call	0x159a2	; 0x159a2 <__eewr_block_m128>
    8d1e:	03 5f       	subi	r16, 0xF3	; 243
    8d20:	1f 4f       	sbci	r17, 0xFF	; 255
    8d22:	ec e0       	ldi	r30, 0x0C	; 12
    8d24:	f0 e0       	ldi	r31, 0x00	; 0
    8d26:	ee 0e       	add	r14, r30
    8d28:	ff 1e       	adc	r15, r31
     eeprom_write_block((const void*) &buffHeader, (void*) &DefHeaderFooter[8], 40);
     StrPosCopy(rcv_trans,buffHeader,422,40);
     eeprom_write_block((const void*) &buffHeader, (void*) &DefHeaderFooter[9], 40);
	 */
	 //ProductName
	 for(i=0;i<6;i++){
    8d2a:	f1 e0       	ldi	r31, 0x01	; 1
    8d2c:	09 30       	cpi	r16, 0x09	; 9
    8d2e:	1f 07       	cpc	r17, r31
    8d30:	c9 f6       	brne	.-78     	; 0x8ce4 <procMessage11+0x13c>
    8d32:	05 e8       	ldi	r16, 0x85	; 133
    8d34:	10 e0       	ldi	r17, 0x00	; 0
    8d36:	fb e4       	ldi	r31, 0x4B	; 75
    8d38:	ef 2e       	mov	r14, r31
    8d3a:	fb e0       	ldi	r31, 0x0B	; 11
    8d3c:	ff 2e       	mov	r15, r31
    8d3e:	6e 01       	movw	r12, r28
    8d40:	08 94       	sec
    8d42:	c1 1c       	adc	r12, r1
    8d44:	d1 1c       	adc	r13, r1
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8d46:	e9 e0       	ldi	r30, 0x09	; 9
    8d48:	8e 2e       	mov	r8, r30
    8d4a:	91 2c       	mov	r9, r1
    8d4c:	8c 0e       	add	r8, r28
    8d4e:	9d 1e       	adc	r9, r29
        StrPosCopy(rcv_trans,strProductPrice,(558+(i*8)),8);
		RemSpaceLag(strProductPrice);
		RemZeroLead(strProductPrice);
		RemDecimal(strProductPrice);

		eeprom_read_block((void*) &strReadEEPROM, (const void*) &DefProductPrice[i], 8);
    8d50:	7f e5       	ldi	r23, 0x5F	; 95
    8d52:	a7 2e       	mov	r10, r23
    8d54:	b1 2c       	mov	r11, r1
    8d56:	ac 0e       	add	r10, r28
    8d58:	bd 1e       	adc	r11, r29
     eeprom_write_block((const void*) &buffHeader, (void*) &DefHeaderFooter[8], 40);
     StrPosCopy(rcv_trans,buffHeader,422,40);
     eeprom_write_block((const void*) &buffHeader, (void*) &DefHeaderFooter[9], 40);
	 */
	 //ProductName
	 for(i=0;i<6;i++){
    8d5a:	f6 01       	movw	r30, r12
    8d5c:	d7 01       	movw	r26, r14
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8d5e:	8d 91       	ld	r24, X+
    8d60:	81 93       	st	Z+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8d62:	e8 15       	cp	r30, r8
    8d64:	f9 05       	cpc	r31, r9
    8d66:	d9 f7       	brne	.-10     	; 0x8d5e <procMessage11+0x1b6>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8d68:	19 86       	std	Y+9, r1	; 0x09
		    eeprom_write_block((const void*) &strProductName, (void*) &DefProductName[i], 12);
	 }
	 //ProductPrice
	 for(i=0;i<6;i++){
        StrPosCopy(rcv_trans,strProductPrice,(558+(i*8)),8);
		RemSpaceLag(strProductPrice);
    8d6a:	c6 01       	movw	r24, r12
    8d6c:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <RemSpaceLag>
		RemZeroLead(strProductPrice);
    8d70:	c6 01       	movw	r24, r12
    8d72:	0e 94 df 26 	call	0x4dbe	; 0x4dbe <RemZeroLead>
		RemDecimal(strProductPrice);
    8d76:	c6 01       	movw	r24, r12
    8d78:	0e 94 dd 25 	call	0x4bba	; 0x4bba <RemDecimal>

		eeprom_read_block((void*) &strReadEEPROM, (const void*) &DefProductPrice[i], 8);
    8d7c:	c5 01       	movw	r24, r10
    8d7e:	b8 01       	movw	r22, r16
    8d80:	48 e0       	ldi	r20, 0x08	; 8
    8d82:	50 e0       	ldi	r21, 0x00	; 0
    8d84:	0e 94 b9 ac 	call	0x15972	; 0x15972 <__eerd_block_m128>
		if (strcmp(strReadEEPROM,strProductPrice)!=0)
    8d88:	c5 01       	movw	r24, r10
    8d8a:	b6 01       	movw	r22, r12
    8d8c:	0e 94 71 aa 	call	0x154e2	; 0x154e2 <strcmp>
    8d90:	00 97       	sbiw	r24, 0x00	; 0
    8d92:	31 f0       	breq	.+12     	; 0x8da0 <procMessage11+0x1f8>
		    eeprom_write_block((const void*) &strProductPrice, (void*) &DefProductPrice[i], 8);
    8d94:	c6 01       	movw	r24, r12
    8d96:	b8 01       	movw	r22, r16
    8d98:	48 e0       	ldi	r20, 0x08	; 8
    8d9a:	50 e0       	ldi	r21, 0x00	; 0
    8d9c:	0e 94 d1 ac 	call	0x159a2	; 0x159a2 <__eewr_block_m128>
    8da0:	07 5f       	subi	r16, 0xF7	; 247
    8da2:	1f 4f       	sbci	r17, 0xFF	; 255
    8da4:	88 e0       	ldi	r24, 0x08	; 8
    8da6:	90 e0       	ldi	r25, 0x00	; 0
    8da8:	e8 0e       	add	r14, r24
    8daa:	f9 1e       	adc	r15, r25
		eeprom_read_block((void*) &strReadEEPROM, (const void*) &DefProductName[i],12);
		if (strcmp(strReadEEPROM,strProductName)!=0)
		    eeprom_write_block((const void*) &strProductName, (void*) &DefProductName[i], 12);
	 }
	 //ProductPrice
	 for(i=0;i<6;i++){
    8dac:	90 e0       	ldi	r25, 0x00	; 0
    8dae:	0b 3b       	cpi	r16, 0xBB	; 187
    8db0:	19 07       	cpc	r17, r25
    8db2:	99 f6       	brne	.-90     	; 0x8d5a <procMessage11+0x1b2>

		eeprom_read_block((void*) &strReadEEPROM, (const void*) &DefProductPrice[i], 8);
		if (strcmp(strReadEEPROM,strProductPrice)!=0)
		    eeprom_write_block((const void*) &strProductPrice, (void*) &DefProductPrice[i], 8);
	 }
}
    8db4:	c0 57       	subi	r28, 0x70	; 112
    8db6:	df 4f       	sbci	r29, 0xFF	; 255
    8db8:	0f b6       	in	r0, 0x3f	; 63
    8dba:	f8 94       	cli
    8dbc:	de bf       	out	0x3e, r29	; 62
    8dbe:	0f be       	out	0x3f, r0	; 63
    8dc0:	cd bf       	out	0x3d, r28	; 61
    8dc2:	cf 91       	pop	r28
    8dc4:	df 91       	pop	r29
    8dc6:	1f 91       	pop	r17
    8dc8:	0f 91       	pop	r16
    8dca:	ff 90       	pop	r15
    8dcc:	ef 90       	pop	r14
    8dce:	df 90       	pop	r13
    8dd0:	cf 90       	pop	r12
    8dd2:	bf 90       	pop	r11
    8dd4:	af 90       	pop	r10
    8dd6:	9f 90       	pop	r9
    8dd8:	8f 90       	pop	r8
    8dda:	7f 90       	pop	r7
    8ddc:	6f 90       	pop	r6
    8dde:	08 95       	ret

00008de0 <ValidateRestoreCode>:
	     strKeyStamp[i]='0'+GeniusCalc(G_MULTY,(sSeed[i]-'0'),(sGCode[i]-'0'));		 
	 }strKeyStamp[strlen(sGCode)]=0;
     WrapCode(strKeyStamp);
}

char ValidateRestoreCode(char *sKeyStamp, char *sRestoreCode){//==RC_VALID
    8de0:	ef 92       	push	r14
    8de2:	ff 92       	push	r15
    8de4:	0f 93       	push	r16
    8de6:	1f 93       	push	r17
    8de8:	cf 93       	push	r28
    8dea:	df 93       	push	r29
    8dec:	ec 01       	movw	r28, r24
    8dee:	7b 01       	movw	r14, r22

	 //  KeyStamp: [6]5585577 WrapCode6x
	 //sprintf_P(strSend,PSTR("KeyStamp:%s"),sKeyStamp);
	 //uart_print(1,1,strSend);

	 nSum=sKeyStamp[0]-'0';
    8df0:	08 81       	ld	r16, Y
    8df2:	00 53       	subi	r16, 0x30	; 48
    8df4:	10 e0       	ldi	r17, 0x00	; 0
    8df6:	04 c0       	rjmp	.+8      	; 0x8e00 <ValidateRestoreCode+0x20>
	 for (i=0;i<nSum;i++){
         WrapCode(sKeyStamp);
    8df8:	ce 01       	movw	r24, r28
    8dfa:	0e 94 8d 32 	call	0x651a	; 0x651a <WrapCode>
	 //  KeyStamp: [6]5585577 WrapCode6x
	 //sprintf_P(strSend,PSTR("KeyStamp:%s"),sKeyStamp);
	 //uart_print(1,1,strSend);

	 nSum=sKeyStamp[0]-'0';
	 for (i=0;i<nSum;i++){
    8dfe:	1f 5f       	subi	r17, 0xFF	; 255
    8e00:	10 17       	cp	r17, r16
    8e02:	d0 f3       	brcs	.-12     	; 0x8df8 <ValidateRestoreCode+0x18>
	 //uart_print(1,1,strSend);
     
	 //sprintf_P(strSend,PSTR("WrapStamp:%s"),sRestoreCode);
	 //uart_print(1,1,strSend);

	 if (strcmp(sKeyStamp,sRestoreCode)==0)
    8e04:	ce 01       	movw	r24, r28
    8e06:	b7 01       	movw	r22, r14
    8e08:	0e 94 71 aa 	call	0x154e2	; 0x154e2 <strcmp>
    8e0c:	00 97       	sbiw	r24, 0x00	; 0
    8e0e:	11 f0       	breq	.+4      	; 0x8e14 <ValidateRestoreCode+0x34>
    8e10:	82 e0       	ldi	r24, 0x02	; 2
    8e12:	01 c0       	rjmp	.+2      	; 0x8e16 <ValidateRestoreCode+0x36>
    8e14:	81 e0       	ldi	r24, 0x01	; 1
	     Result=RC_VALID;	 
     else Result=RC_INVALID;

   return Result;
}
    8e16:	df 91       	pop	r29
    8e18:	cf 91       	pop	r28
    8e1a:	1f 91       	pop	r17
    8e1c:	0f 91       	pop	r16
    8e1e:	ff 90       	pop	r15
    8e20:	ef 90       	pop	r14
    8e22:	08 95       	ret

00008e24 <ValidateGeniusCode>:
          }
	 }sTemp[iAdd]=0;
	 sprintf_P(strSource,PSTR("%s"),sTemp);
}

char ValidateGeniusCode(char *sDate, char *sGenCode){//==GC_VALID
    8e24:	ef 92       	push	r14
    8e26:	ff 92       	push	r15
    8e28:	0f 93       	push	r16
    8e2a:	1f 93       	push	r17
    8e2c:	df 93       	push	r29
    8e2e:	cf 93       	push	r28
    8e30:	cd b7       	in	r28, 0x3d	; 61
    8e32:	de b7       	in	r29, 0x3e	; 62
    8e34:	2a 97       	sbiw	r28, 0x0a	; 10
    8e36:	0f b6       	in	r0, 0x3f	; 63
    8e38:	f8 94       	cli
    8e3a:	de bf       	out	0x3e, r29	; 62
    8e3c:	0f be       	out	0x3f, r0	; 63
    8e3e:	cd bf       	out	0x3d, r28	; 61
    8e40:	7b 01       	movw	r14, r22

         #ifdef DEBUG_GENIUS_CODE
		 sprintf_P(strSend,PSTR("[%s]"),sGenCode); 
         uart_print(1,1,strSend);
		 #endif
	 if (strlen(sGenCode)==8){//Length musti  8
    8e42:	fb 01       	movw	r30, r22
    8e44:	01 90       	ld	r0, Z+
    8e46:	00 20       	and	r0, r0
    8e48:	e9 f7       	brne	.-6      	; 0x8e44 <ValidateGeniusCode+0x20>
    8e4a:	39 97       	sbiw	r30, 0x09	; 9
    8e4c:	e6 17       	cp	r30, r22
    8e4e:	f7 07       	cpc	r31, r23
    8e50:	11 f0       	breq	.+4      	; 0x8e56 <ValidateGeniusCode+0x32>
    8e52:	80 e0       	ldi	r24, 0x00	; 0
    8e54:	11 c0       	rjmp	.+34     	; 0x8e78 <ValidateGeniusCode+0x54>
	     //sDate: 05012001		 
		 GenerateGeniusCode(sDate,sGenCode[0],sAutoGen);
    8e56:	fb 01       	movw	r30, r22
    8e58:	60 81       	ld	r22, Z
    8e5a:	8e 01       	movw	r16, r28
    8e5c:	0f 5f       	subi	r16, 0xFF	; 255
    8e5e:	1f 4f       	sbci	r17, 0xFF	; 255
    8e60:	a8 01       	movw	r20, r16
    8e62:	0e 94 8b 33 	call	0x6716	; 0x6716 <GenerateGeniusCode>
         #ifdef DEBUG_GENIUS_CODE
		 sprintf_P(strSend,PSTR("%s|%s"),sAutoGen,sGenCode); 
         uart_print(1,1,strSend);
		 #endif

         if (strcmp(sAutoGen,sGenCode)==0)
    8e66:	c8 01       	movw	r24, r16
    8e68:	b7 01       	movw	r22, r14
    8e6a:	0e 94 71 aa 	call	0x154e2	; 0x154e2 <strcmp>
    8e6e:	00 97       	sbiw	r24, 0x00	; 0
    8e70:	11 f0       	breq	.+4      	; 0x8e76 <ValidateGeniusCode+0x52>
    8e72:	82 e0       	ldi	r24, 0x02	; 2
    8e74:	01 c0       	rjmp	.+2      	; 0x8e78 <ValidateGeniusCode+0x54>
    8e76:	81 e0       	ldi	r24, 0x01	; 1
         else Result=GC_INVALID;
	 }


   return Result;
}
    8e78:	2a 96       	adiw	r28, 0x0a	; 10
    8e7a:	0f b6       	in	r0, 0x3f	; 63
    8e7c:	f8 94       	cli
    8e7e:	de bf       	out	0x3e, r29	; 62
    8e80:	0f be       	out	0x3f, r0	; 63
    8e82:	cd bf       	out	0x3d, r28	; 61
    8e84:	cf 91       	pop	r28
    8e86:	df 91       	pop	r29
    8e88:	1f 91       	pop	r17
    8e8a:	0f 91       	pop	r16
    8e8c:	ff 90       	pop	r15
    8e8e:	ef 90       	pop	r14
    8e90:	08 95       	ret

00008e92 <_scr_pump>:

void leadingZero(char Val,char *StrResult){
     sprintf_P(StrResult,PSTR("%.2d"),Val);

}
void _scr_pump(void){
    8e92:	8f 92       	push	r8
    8e94:	9f 92       	push	r9
    8e96:	af 92       	push	r10
    8e98:	bf 92       	push	r11
    8e9a:	cf 92       	push	r12
    8e9c:	df 92       	push	r13
    8e9e:	ef 92       	push	r14
    8ea0:	ff 92       	push	r15
    8ea2:	0f 93       	push	r16
    8ea4:	1f 93       	push	r17
    8ea6:	df 93       	push	r29
    8ea8:	cf 93       	push	r28
    8eaa:	cd b7       	in	r28, 0x3d	; 61
    8eac:	de b7       	in	r29, 0x3e	; 62
    8eae:	6c 97       	sbiw	r28, 0x1c	; 28
    8eb0:	0f b6       	in	r0, 0x3f	; 63
    8eb2:	f8 94       	cli
    8eb4:	de bf       	out	0x3e, r29	; 62
    8eb6:	0f be       	out	0x3f, r0	; 63
    8eb8:	cd bf       	out	0x3d, r28	; 61
	 //char strPumpL[3],strPumpR[3];
	 char __pump_id[8];
	 char i;
     char lcdteks[20];
	 lcd_clear();_delay_ms(10);
    8eba:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
    8ebe:	84 ec       	ldi	r24, 0xC4	; 196
    8ec0:	99 e0       	ldi	r25, 0x09	; 9
    8ec2:	01 97       	sbiw	r24, 0x01	; 1
    8ec4:	f1 f7       	brne	.-4      	; 0x8ec2 <_scr_pump+0x30>
	 //Display
		eeprom_read_block((void*) &__pump_id, (const void*) &DefPumpMap, 8);
    8ec6:	8e 01       	movw	r16, r28
    8ec8:	0f 5f       	subi	r16, 0xFF	; 255
    8eca:	1f 4f       	sbci	r17, 0xFF	; 255
    8ecc:	c8 01       	movw	r24, r16
    8ece:	65 e4       	ldi	r22, 0x45	; 69
    8ed0:	70 e0       	ldi	r23, 0x00	; 0
    8ed2:	48 e0       	ldi	r20, 0x08	; 8
    8ed4:	50 e0       	ldi	r21, 0x00	; 0
    8ed6:	0e 94 b9 ac 	call	0x15972	; 0x15972 <__eerd_block_m128>
    8eda:	78 01       	movw	r14, r16
    8edc:	01 e0       	ldi	r16, 0x01	; 1
    8ede:	10 e0       	ldi	r17, 0x00	; 0
        for (i=0;i<4;i++){
             //leadingZero(__pump_id[i],strPumpL);
			 //leadingZero(__pump_id[i+4],strPumpR);
             //sprintf_P(lcdteks,PSTR("%d.P%s | %.P%s  "),(i+1),strPumpL,(i+5),strPumpR);
			 sprintf_P(lcdteks,PSTR("%d.P%.2d | %d.P%.2d "),(i+1),__pump_id[i],(i+5),__pump_id[i+4]);
    8ee0:	f9 e0       	ldi	r31, 0x09	; 9
    8ee2:	cf 2e       	mov	r12, r31
    8ee4:	d1 2c       	mov	r13, r1
    8ee6:	cc 0e       	add	r12, r28
    8ee8:	dd 1e       	adc	r13, r29
    8eea:	e4 ed       	ldi	r30, 0xD4	; 212
    8eec:	8e 2e       	mov	r8, r30
    8eee:	ee e0       	ldi	r30, 0x0E	; 14
    8ef0:	9e 2e       	mov	r9, r30
	 char i;
     char lcdteks[20];
	 lcd_clear();_delay_ms(10);
	 //Display
		eeprom_read_block((void*) &__pump_id, (const void*) &DefPumpMap, 8);
        for (i=0;i<4;i++){
    8ef2:	75 e0       	ldi	r23, 0x05	; 5
    8ef4:	a7 2e       	mov	r10, r23
    8ef6:	b1 2c       	mov	r11, r1
    8ef8:	ac 0e       	add	r10, r28
    8efa:	bd 1e       	adc	r11, r29
             //leadingZero(__pump_id[i],strPumpL);
			 //leadingZero(__pump_id[i+4],strPumpR);
             //sprintf_P(lcdteks,PSTR("%d.P%s | %.P%s  "),(i+1),strPumpL,(i+5),strPumpR);
			 sprintf_P(lcdteks,PSTR("%d.P%.2d | %d.P%.2d "),(i+1),__pump_id[i],(i+5),__pump_id[i+4]);
    8efc:	8d b7       	in	r24, 0x3d	; 61
    8efe:	9e b7       	in	r25, 0x3e	; 62
    8f00:	0c 97       	sbiw	r24, 0x0c	; 12
    8f02:	0f b6       	in	r0, 0x3f	; 63
    8f04:	f8 94       	cli
    8f06:	9e bf       	out	0x3e, r25	; 62
    8f08:	0f be       	out	0x3f, r0	; 63
    8f0a:	8d bf       	out	0x3d, r24	; 61
    8f0c:	ed b7       	in	r30, 0x3d	; 61
    8f0e:	fe b7       	in	r31, 0x3e	; 62
    8f10:	31 96       	adiw	r30, 0x01	; 1
    8f12:	ad b7       	in	r26, 0x3d	; 61
    8f14:	be b7       	in	r27, 0x3e	; 62
    8f16:	12 96       	adiw	r26, 0x02	; 2
    8f18:	dc 92       	st	X, r13
    8f1a:	ce 92       	st	-X, r12
    8f1c:	11 97       	sbiw	r26, 0x01	; 1
    8f1e:	93 82       	std	Z+3, r9	; 0x03
    8f20:	82 82       	std	Z+2, r8	; 0x02
    8f22:	15 83       	std	Z+5, r17	; 0x05
    8f24:	04 83       	std	Z+4, r16	; 0x04
    8f26:	d7 01       	movw	r26, r14
    8f28:	8c 91       	ld	r24, X
    8f2a:	86 83       	std	Z+6, r24	; 0x06
    8f2c:	17 82       	std	Z+7, r1	; 0x07
    8f2e:	0c 5f       	subi	r16, 0xFC	; 252
    8f30:	1f 4f       	sbci	r17, 0xFF	; 255
    8f32:	11 87       	std	Z+9, r17	; 0x09
    8f34:	00 87       	std	Z+8, r16	; 0x08
    8f36:	04 50       	subi	r16, 0x04	; 4
    8f38:	10 40       	sbci	r17, 0x00	; 0
    8f3a:	14 96       	adiw	r26, 0x04	; 4
    8f3c:	8c 91       	ld	r24, X
    8f3e:	82 87       	std	Z+10, r24	; 0x0a
    8f40:	13 86       	std	Z+11, r1	; 0x0b
    8f42:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
			 lcd_print((i+1),1,lcdteks);
    8f46:	8d b7       	in	r24, 0x3d	; 61
    8f48:	9e b7       	in	r25, 0x3e	; 62
    8f4a:	0c 96       	adiw	r24, 0x0c	; 12
    8f4c:	0f b6       	in	r0, 0x3f	; 63
    8f4e:	f8 94       	cli
    8f50:	9e bf       	out	0x3e, r25	; 62
    8f52:	0f be       	out	0x3f, r0	; 63
    8f54:	8d bf       	out	0x3d, r24	; 61
    8f56:	80 2f       	mov	r24, r16
    8f58:	61 e0       	ldi	r22, 0x01	; 1
    8f5a:	a6 01       	movw	r20, r12
    8f5c:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
    8f60:	08 94       	sec
    8f62:	e1 1c       	adc	r14, r1
    8f64:	f1 1c       	adc	r15, r1
    8f66:	0f 5f       	subi	r16, 0xFF	; 255
    8f68:	1f 4f       	sbci	r17, 0xFF	; 255
	 char i;
     char lcdteks[20];
	 lcd_clear();_delay_ms(10);
	 //Display
		eeprom_read_block((void*) &__pump_id, (const void*) &DefPumpMap, 8);
        for (i=0;i<4;i++){
    8f6a:	ea 14       	cp	r14, r10
    8f6c:	fb 04       	cpc	r15, r11
    8f6e:	31 f6       	brne	.-116    	; 0x8efc <_scr_pump+0x6a>
			 //leadingZero(__pump_id[i+4],strPumpR);
             //sprintf_P(lcdteks,PSTR("%d.P%s | %.P%s  "),(i+1),strPumpL,(i+5),strPumpR);
			 sprintf_P(lcdteks,PSTR("%d.P%.2d | %d.P%.2d "),(i+1),__pump_id[i],(i+5),__pump_id[i+4]);
			 lcd_print((i+1),1,lcdteks);
		}
        lcd_printf(4,15,PSTR("*)Exit"));
    8f70:	84 e0       	ldi	r24, 0x04	; 4
    8f72:	6f e0       	ldi	r22, 0x0F	; 15
    8f74:	4d ec       	ldi	r20, 0xCD	; 205
    8f76:	5e e0       	ldi	r21, 0x0E	; 14
    8f78:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
}
    8f7c:	6c 96       	adiw	r28, 0x1c	; 28
    8f7e:	0f b6       	in	r0, 0x3f	; 63
    8f80:	f8 94       	cli
    8f82:	de bf       	out	0x3e, r29	; 62
    8f84:	0f be       	out	0x3f, r0	; 63
    8f86:	cd bf       	out	0x3d, r28	; 61
    8f88:	cf 91       	pop	r28
    8f8a:	df 91       	pop	r29
    8f8c:	1f 91       	pop	r17
    8f8e:	0f 91       	pop	r16
    8f90:	ff 90       	pop	r15
    8f92:	ef 90       	pop	r14
    8f94:	df 90       	pop	r13
    8f96:	cf 90       	pop	r12
    8f98:	bf 90       	pop	r11
    8f9a:	af 90       	pop	r10
    8f9c:	9f 90       	pop	r9
    8f9e:	8f 90       	pop	r8
    8fa0:	08 95       	ret

00008fa2 <FViewFreeMessage>:
char FViewFreeMessage(){
static char stFreeMessage=fmInit;
       char Result=MENU_NONE;
     
	 Result=MENU_NONE;
	 switch(stFreeMessage){
    8fa2:	80 91 6d 02 	lds	r24, 0x026D
    8fa6:	81 30       	cpi	r24, 0x01	; 1
    8fa8:	49 f0       	breq	.+18     	; 0x8fbc <FViewFreeMessage+0x1a>
    8faa:	81 30       	cpi	r24, 0x01	; 1
    8fac:	28 f0       	brcs	.+10     	; 0x8fb8 <FViewFreeMessage+0x16>
    8fae:	82 30       	cpi	r24, 0x02	; 2
    8fb0:	19 f1       	breq	.+70     	; 0x8ff8 <FViewFreeMessage+0x56>
    8fb2:	83 30       	cpi	r24, 0x03	; 3
    8fb4:	71 f5       	brne	.+92     	; 0x9012 <FViewFreeMessage+0x70>
    8fb6:	29 c0       	rjmp	.+82     	; 0x900a <FViewFreeMessage+0x68>
	 case fmInit:
	      stFreeMessage=fmDisplayFreeMessage;
    8fb8:	81 e0       	ldi	r24, 0x01	; 1
    8fba:	23 c0       	rjmp	.+70     	; 0x9002 <FViewFreeMessage+0x60>
	      break;
     case fmDisplayFreeMessage:
		  lcd_clear();
    8fbc:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
		  lcd_print(1,1,strFreeMessageLine1);
    8fc0:	81 e0       	ldi	r24, 0x01	; 1
    8fc2:	61 e0       	ldi	r22, 0x01	; 1
    8fc4:	42 e9       	ldi	r20, 0x92	; 146
    8fc6:	58 e0       	ldi	r21, 0x08	; 8
    8fc8:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
		  lcd_print(2,1,strFreeMessageLine2);
    8fcc:	82 e0       	ldi	r24, 0x02	; 2
    8fce:	61 e0       	ldi	r22, 0x01	; 1
    8fd0:	43 ea       	ldi	r20, 0xA3	; 163
    8fd2:	57 e0       	ldi	r21, 0x07	; 7
    8fd4:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
		  lcd_print(3,1,strFreeMessageLine3);
    8fd8:	83 e0       	ldi	r24, 0x03	; 3
    8fda:	61 e0       	ldi	r22, 0x01	; 1
    8fdc:	4c e1       	ldi	r20, 0x1C	; 28
    8fde:	58 e0       	ldi	r21, 0x08	; 8
    8fe0:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
		  lcd_print(4,1,strFreeMessageLine4);
    8fe4:	84 e0       	ldi	r24, 0x04	; 4
    8fe6:	61 e0       	ldi	r22, 0x01	; 1
    8fe8:	46 ed       	ldi	r20, 0xD6	; 214
    8fea:	5b e0       	ldi	r21, 0x0B	; 11
    8fec:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
	      TimDisplay=0;
    8ff0:	10 92 92 01 	sts	0x0192, r1
	      stFreeMessage=fmDelayViewMesage;
    8ff4:	82 e0       	ldi	r24, 0x02	; 2
    8ff6:	05 c0       	rjmp	.+10     	; 0x9002 <FViewFreeMessage+0x60>
	      break;
	 case fmDelayViewMesage:  
	      if (TimDisplay>TIM_FREE_MESSAGE)stFreeMessage=fmFinishFreeMessage;
    8ff8:	80 91 92 01 	lds	r24, 0x0192
    8ffc:	8b 30       	cpi	r24, 0x0B	; 11
    8ffe:	48 f0       	brcs	.+18     	; 0x9012 <FViewFreeMessage+0x70>
    9000:	83 e0       	ldi	r24, 0x03	; 3
    9002:	80 93 6d 02 	sts	0x026D, r24
    9006:	80 e0       	ldi	r24, 0x00	; 0
    9008:	08 95       	ret
	      break;
     case fmFinishFreeMessage:
          stFreeMessage=fmInit;
    900a:	10 92 6d 02 	sts	0x026D, r1
    900e:	81 e0       	ldi	r24, 0x01	; 1
    9010:	08 95       	ret
    9012:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
	      break;
	 }
  return Result;
}
    9014:	08 95       	ret

00009016 <FTestChar>:
		TimTicker++;
	}

}

char FTestChar(){
    9016:	0f 93       	push	r16
    9018:	1f 93       	push	r17
    901a:	df 93       	push	r29
    901c:	cf 93       	push	r28
    901e:	cd b7       	in	r28, 0x3d	; 61
    9020:	de b7       	in	r29, 0x3e	; 62
    9022:	64 97       	sbiw	r28, 0x14	; 20
    9024:	0f b6       	in	r0, 0x3f	; 63
    9026:	f8 94       	cli
    9028:	de bf       	out	0x3e, r29	; 62
    902a:	0f be       	out	0x3f, r0	; 63
    902c:	cd bf       	out	0x3d, r28	; 61
char lcdteks[20],Result;
char i=0;
     Result=MENU_NONE;
     sprintf_P(lcdteks,PSTR("D:%d C:%c  "),i,i);
    902e:	8d b7       	in	r24, 0x3d	; 61
    9030:	9e b7       	in	r25, 0x3e	; 62
    9032:	08 97       	sbiw	r24, 0x08	; 8
    9034:	0f b6       	in	r0, 0x3f	; 63
    9036:	f8 94       	cli
    9038:	9e bf       	out	0x3e, r25	; 62
    903a:	0f be       	out	0x3f, r0	; 63
    903c:	8d bf       	out	0x3d, r24	; 61
    903e:	ed b7       	in	r30, 0x3d	; 61
    9040:	fe b7       	in	r31, 0x3e	; 62
    9042:	31 96       	adiw	r30, 0x01	; 1
    9044:	8e 01       	movw	r16, r28
    9046:	0f 5f       	subi	r16, 0xFF	; 255
    9048:	1f 4f       	sbci	r17, 0xFF	; 255
    904a:	ad b7       	in	r26, 0x3d	; 61
    904c:	be b7       	in	r27, 0x3e	; 62
    904e:	12 96       	adiw	r26, 0x02	; 2
    9050:	1c 93       	st	X, r17
    9052:	0e 93       	st	-X, r16
    9054:	11 97       	sbiw	r26, 0x01	; 1
    9056:	83 e6       	ldi	r24, 0x63	; 99
    9058:	9e e1       	ldi	r25, 0x1E	; 30
    905a:	93 83       	std	Z+3, r25	; 0x03
    905c:	82 83       	std	Z+2, r24	; 0x02
    905e:	15 82       	std	Z+5, r1	; 0x05
    9060:	14 82       	std	Z+4, r1	; 0x04
    9062:	17 82       	std	Z+7, r1	; 0x07
    9064:	16 82       	std	Z+6, r1	; 0x06
    9066:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
     lcd_print(1,1,lcdteks);
    906a:	8d b7       	in	r24, 0x3d	; 61
    906c:	9e b7       	in	r25, 0x3e	; 62
    906e:	08 96       	adiw	r24, 0x08	; 8
    9070:	0f b6       	in	r0, 0x3f	; 63
    9072:	f8 94       	cli
    9074:	9e bf       	out	0x3e, r25	; 62
    9076:	0f be       	out	0x3f, r0	; 63
    9078:	8d bf       	out	0x3d, r24	; 61
    907a:	81 e0       	ldi	r24, 0x01	; 1
    907c:	61 e0       	ldi	r22, 0x01	; 1
    907e:	a8 01       	movw	r20, r16
    9080:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
    9084:	88 ee       	ldi	r24, 0xE8	; 232
    9086:	9d ef       	ldi	r25, 0xFD	; 253
    9088:	29 e1       	ldi	r18, 0x19	; 25
    908a:	30 e0       	ldi	r19, 0x00	; 0
    908c:	f9 01       	movw	r30, r18
    908e:	31 97       	sbiw	r30, 0x01	; 1
    9090:	f1 f7       	brne	.-4      	; 0x908e <FTestChar+0x78>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9092:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9094:	d9 f7       	brne	.-10     	; 0x908c <FTestChar+0x76>
	 if (i==0xFF)Result=MENU_DONE;
	 i++;
     _delay_ms(6500);
  return Result;
}
    9096:	80 e0       	ldi	r24, 0x00	; 0
    9098:	64 96       	adiw	r28, 0x14	; 20
    909a:	0f b6       	in	r0, 0x3f	; 63
    909c:	f8 94       	cli
    909e:	de bf       	out	0x3e, r29	; 62
    90a0:	0f be       	out	0x3f, r0	; 63
    90a2:	cd bf       	out	0x3d, r28	; 61
    90a4:	cf 91       	pop	r28
    90a6:	df 91       	pop	r29
    90a8:	1f 91       	pop	r17
    90aa:	0f 91       	pop	r16
    90ac:	08 95       	ret

000090ae <DisplayDateTime>:

void DisplayQueueFIP(){// FIP:#1#2#3#4#5

}

void DisplayDateTime(){
    90ae:	cf 92       	push	r12
    90b0:	df 92       	push	r13
    90b2:	ef 92       	push	r14
    90b4:	ff 92       	push	r15
    90b6:	0f 93       	push	r16
    90b8:	1f 93       	push	r17
    90ba:	df 93       	push	r29
    90bc:	cf 93       	push	r28
    90be:	cd b7       	in	r28, 0x3d	; 61
    90c0:	de b7       	in	r29, 0x3e	; 62
    90c2:	64 97       	sbiw	r28, 0x14	; 20
    90c4:	0f b6       	in	r0, 0x3f	; 63
    90c6:	f8 94       	cli
    90c8:	de bf       	out	0x3e, r29	; 62
    90ca:	0f be       	out	0x3f, r0	; 63
    90cc:	cd bf       	out	0x3d, r28	; 61
char lcdteks[20];
	 _datetime(0, strSystemDate, strSystemTime);
    90ce:	ba eb       	ldi	r27, 0xBA	; 186
    90d0:	eb 2e       	mov	r14, r27
    90d2:	b3 e0       	ldi	r27, 0x03	; 3
    90d4:	fb 2e       	mov	r15, r27
    90d6:	a4 e7       	ldi	r26, 0x74	; 116
    90d8:	ca 2e       	mov	r12, r26
    90da:	a8 e0       	ldi	r26, 0x08	; 8
    90dc:	da 2e       	mov	r13, r26
    90de:	80 e0       	ldi	r24, 0x00	; 0
    90e0:	b7 01       	movw	r22, r14
    90e2:	a6 01       	movw	r20, r12
    90e4:	0e 94 57 a7 	call	0x14eae	; 0x14eae <_datetime>
	 sprintf_P(lcdteks,PSTR("%s %s"),strSystemDate,strSystemTime);
    90e8:	8d b7       	in	r24, 0x3d	; 61
    90ea:	9e b7       	in	r25, 0x3e	; 62
    90ec:	08 97       	sbiw	r24, 0x08	; 8
    90ee:	0f b6       	in	r0, 0x3f	; 63
    90f0:	f8 94       	cli
    90f2:	9e bf       	out	0x3e, r25	; 62
    90f4:	0f be       	out	0x3f, r0	; 63
    90f6:	8d bf       	out	0x3d, r24	; 61
    90f8:	ed b7       	in	r30, 0x3d	; 61
    90fa:	fe b7       	in	r31, 0x3e	; 62
    90fc:	31 96       	adiw	r30, 0x01	; 1
    90fe:	8e 01       	movw	r16, r28
    9100:	0f 5f       	subi	r16, 0xFF	; 255
    9102:	1f 4f       	sbci	r17, 0xFF	; 255
    9104:	ad b7       	in	r26, 0x3d	; 61
    9106:	be b7       	in	r27, 0x3e	; 62
    9108:	12 96       	adiw	r26, 0x02	; 2
    910a:	1c 93       	st	X, r17
    910c:	0e 93       	st	-X, r16
    910e:	11 97       	sbiw	r26, 0x01	; 1
    9110:	8f e6       	ldi	r24, 0x6F	; 111
    9112:	9e e1       	ldi	r25, 0x1E	; 30
    9114:	93 83       	std	Z+3, r25	; 0x03
    9116:	82 83       	std	Z+2, r24	; 0x02
    9118:	f5 82       	std	Z+5, r15	; 0x05
    911a:	e4 82       	std	Z+4, r14	; 0x04
    911c:	d7 82       	std	Z+7, r13	; 0x07
    911e:	c6 82       	std	Z+6, r12	; 0x06
    9120:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	 lcd_print(2, 1, lcdteks);
    9124:	8d b7       	in	r24, 0x3d	; 61
    9126:	9e b7       	in	r25, 0x3e	; 62
    9128:	08 96       	adiw	r24, 0x08	; 8
    912a:	0f b6       	in	r0, 0x3f	; 63
    912c:	f8 94       	cli
    912e:	9e bf       	out	0x3e, r25	; 62
    9130:	0f be       	out	0x3f, r0	; 63
    9132:	8d bf       	out	0x3d, r24	; 61
    9134:	82 e0       	ldi	r24, 0x02	; 2
    9136:	61 e0       	ldi	r22, 0x01	; 1
    9138:	a8 01       	movw	r20, r16
    913a:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
}
    913e:	64 96       	adiw	r28, 0x14	; 20
    9140:	0f b6       	in	r0, 0x3f	; 63
    9142:	f8 94       	cli
    9144:	de bf       	out	0x3e, r29	; 62
    9146:	0f be       	out	0x3f, r0	; 63
    9148:	cd bf       	out	0x3d, r28	; 61
    914a:	cf 91       	pop	r28
    914c:	df 91       	pop	r29
    914e:	1f 91       	pop	r17
    9150:	0f 91       	pop	r16
    9152:	ff 90       	pop	r15
    9154:	ef 90       	pop	r14
    9156:	df 90       	pop	r13
    9158:	cf 90       	pop	r12
    915a:	08 95       	ret

0000915c <DisplayScreenIdle>:
		if ((__num>='0')&&(__num<='9')||(IsStandAloneDetected==True)) 
		break;
	 }
}

void DisplayScreenIdle(void){
    915c:	cf 92       	push	r12
    915e:	df 92       	push	r13
    9160:	ef 92       	push	r14
    9162:	ff 92       	push	r15
    9164:	0f 93       	push	r16
    9166:	1f 93       	push	r17
    9168:	df 93       	push	r29
    916a:	cf 93       	push	r28
    916c:	cd b7       	in	r28, 0x3d	; 61
    916e:	de b7       	in	r29, 0x3e	; 62
    9170:	a8 97       	sbiw	r28, 0x28	; 40
    9172:	0f b6       	in	r0, 0x3f	; 63
    9174:	f8 94       	cli
    9176:	de bf       	out	0x3e, r29	; 62
    9178:	0f be       	out	0x3f, r0	; 63
    917a:	cd bf       	out	0x3d, r28	; 61
char strCodeName[10],strVersion[10],lcdteks[20];
    sprintf_P(strCodeName,PSTR(CODE_NAME)); 
    917c:	00 d0       	rcall	.+0      	; 0x917e <DisplayScreenIdle+0x22>
    917e:	00 d0       	rcall	.+0      	; 0x9180 <DisplayScreenIdle+0x24>
    9180:	6e 01       	movw	r12, r28
    9182:	08 94       	sec
    9184:	c1 1c       	adc	r12, r1
    9186:	d1 1c       	adc	r13, r1
    9188:	ad b7       	in	r26, 0x3d	; 61
    918a:	be b7       	in	r27, 0x3e	; 62
    918c:	12 96       	adiw	r26, 0x02	; 2
    918e:	dc 92       	st	X, r13
    9190:	ce 92       	st	-X, r12
    9192:	11 97       	sbiw	r26, 0x01	; 1
    9194:	82 e9       	ldi	r24, 0x92	; 146
    9196:	93 e2       	ldi	r25, 0x23	; 35
    9198:	14 96       	adiw	r26, 0x04	; 4
    919a:	9c 93       	st	X, r25
    919c:	8e 93       	st	-X, r24
    919e:	13 97       	sbiw	r26, 0x03	; 3
    91a0:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
    sprintf_P(strVersion,PSTR(VERSION_NUM)); 
    91a4:	1b e0       	ldi	r17, 0x0B	; 11
    91a6:	e1 2e       	mov	r14, r17
    91a8:	f1 2c       	mov	r15, r1
    91aa:	ec 0e       	add	r14, r28
    91ac:	fd 1e       	adc	r15, r29
    91ae:	ed b7       	in	r30, 0x3d	; 61
    91b0:	fe b7       	in	r31, 0x3e	; 62
    91b2:	f2 82       	std	Z+2, r15	; 0x02
    91b4:	e1 82       	std	Z+1, r14	; 0x01
    91b6:	8d e8       	ldi	r24, 0x8D	; 141
    91b8:	93 e2       	ldi	r25, 0x23	; 35
    91ba:	94 83       	std	Z+4, r25	; 0x04
    91bc:	83 83       	std	Z+3, r24	; 0x03
    91be:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
    sprintf_P(lcdteks,PSTR("%s %s"),strCodeName,strVersion); 
    91c2:	00 d0       	rcall	.+0      	; 0x91c4 <DisplayScreenIdle+0x68>
    91c4:	00 d0       	rcall	.+0      	; 0x91c6 <DisplayScreenIdle+0x6a>
    91c6:	ed b7       	in	r30, 0x3d	; 61
    91c8:	fe b7       	in	r31, 0x3e	; 62
    91ca:	31 96       	adiw	r30, 0x01	; 1
    91cc:	8e 01       	movw	r16, r28
    91ce:	0b 5e       	subi	r16, 0xEB	; 235
    91d0:	1f 4f       	sbci	r17, 0xFF	; 255
    91d2:	ad b7       	in	r26, 0x3d	; 61
    91d4:	be b7       	in	r27, 0x3e	; 62
    91d6:	12 96       	adiw	r26, 0x02	; 2
    91d8:	1c 93       	st	X, r17
    91da:	0e 93       	st	-X, r16
    91dc:	11 97       	sbiw	r26, 0x01	; 1
    91de:	87 e8       	ldi	r24, 0x87	; 135
    91e0:	93 e2       	ldi	r25, 0x23	; 35
    91e2:	93 83       	std	Z+3, r25	; 0x03
    91e4:	82 83       	std	Z+2, r24	; 0x02
    91e6:	d5 82       	std	Z+5, r13	; 0x05
    91e8:	c4 82       	std	Z+4, r12	; 0x04
    91ea:	f7 82       	std	Z+7, r15	; 0x07
    91ec:	e6 82       	std	Z+6, r14	; 0x06
    91ee:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	lcd_clear();
    91f2:	ed b7       	in	r30, 0x3d	; 61
    91f4:	fe b7       	in	r31, 0x3e	; 62
    91f6:	38 96       	adiw	r30, 0x08	; 8
    91f8:	0f b6       	in	r0, 0x3f	; 63
    91fa:	f8 94       	cli
    91fc:	fe bf       	out	0x3e, r31	; 62
    91fe:	0f be       	out	0x3f, r0	; 63
    9200:	ed bf       	out	0x3d, r30	; 61
    9202:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
	lcd_print(1,1,lcdteks);
    9206:	81 e0       	ldi	r24, 0x01	; 1
    9208:	61 e0       	ldi	r22, 0x01	; 1
    920a:	a8 01       	movw	r20, r16
    920c:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
}
    9210:	a8 96       	adiw	r28, 0x28	; 40
    9212:	0f b6       	in	r0, 0x3f	; 63
    9214:	f8 94       	cli
    9216:	de bf       	out	0x3e, r29	; 62
    9218:	0f be       	out	0x3f, r0	; 63
    921a:	cd bf       	out	0x3d, r28	; 61
    921c:	cf 91       	pop	r28
    921e:	df 91       	pop	r29
    9220:	1f 91       	pop	r17
    9222:	0f 91       	pop	r16
    9224:	ff 90       	pop	r15
    9226:	ef 90       	pop	r14
    9228:	df 90       	pop	r13
    922a:	cf 90       	pop	r12
    922c:	08 95       	ret

0000922e <DisplayPumpStatus>:
		  break;         	 
	 }
  return Result;	 
}

void DisplayPumpStatus(){
    922e:	0f 93       	push	r16
    9230:	1f 93       	push	r17
    9232:	df 93       	push	r29
    9234:	cf 93       	push	r28
    9236:	cd b7       	in	r28, 0x3d	; 61
    9238:	de b7       	in	r29, 0x3e	; 62
    923a:	a8 97       	sbiw	r28, 0x28	; 40
    923c:	0f b6       	in	r0, 0x3f	; 63
    923e:	f8 94       	cli
    9240:	de bf       	out	0x3e, r29	; 62
    9242:	0f be       	out	0x3f, r0	; 63
    9244:	cd bf       	out	0x3d, r28	; 61
     char SPump[20],lcdteks[20];

	 if (IsNewPumpStatus==True){
    9246:	80 91 01 01 	lds	r24, 0x0101
    924a:	81 30       	cpi	r24, 0x01	; 1
    924c:	09 f0       	breq	.+2      	; 0x9250 <DisplayPumpStatus+0x22>
    924e:	4a c0       	rjmp	.+148    	; 0x92e4 <DisplayPumpStatus+0xb6>
	     IsNewPumpStatus=False;
    9250:	10 92 01 01 	sts	0x0101, r1
	      }
     }      
}

void BackLightTrig(){    
     __key_light = 1; 
    9254:	80 93 ae 02 	sts	0x02AE, r24
	 __key_lgtcnt = 0; 
    9258:	10 92 af 02 	sts	0x02AF, r1
	 PORTG=PORTG&0b11111101;
    925c:	80 91 65 00 	lds	r24, 0x0065
    9260:	8d 7f       	andi	r24, 0xFD	; 253
    9262:	80 93 65 00 	sts	0x0065, r24
     char SPump[20],lcdteks[20];

	 if (IsNewPumpStatus==True){
	     IsNewPumpStatus=False;
		 BackLightTrig();
		 StrPosCopy(strPumpStatus,SPump,0,PumpCountMax);
    9266:	80 91 5c 01 	lds	r24, 0x015C
    926a:	48 2f       	mov	r20, r24
    926c:	50 e0       	ldi	r21, 0x00	; 0
    926e:	20 e0       	ldi	r18, 0x00	; 0
    9270:	30 e0       	ldi	r19, 0x00	; 0
    9272:	be 01       	movw	r22, r28
    9274:	6f 5f       	subi	r22, 0xFF	; 255
    9276:	7f 4f       	sbci	r23, 0xFF	; 255
    9278:	0a c0       	rjmp	.+20     	; 0x928e <DisplayPumpStatus+0x60>
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    927a:	fb 01       	movw	r30, r22
    927c:	e2 0f       	add	r30, r18
    927e:	f3 1f       	adc	r31, r19
    9280:	d9 01       	movw	r26, r18
    9282:	ae 5f       	subi	r26, 0xFE	; 254
    9284:	be 4f       	sbci	r27, 0xFE	; 254
    9286:	8c 91       	ld	r24, X
    9288:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    928a:	2f 5f       	subi	r18, 0xFF	; 255
    928c:	3f 4f       	sbci	r19, 0xFF	; 255
    928e:	24 17       	cp	r18, r20
    9290:	35 07       	cpc	r19, r21
    9292:	98 f3       	brcs	.-26     	; 0x927a <DisplayPumpStatus+0x4c>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    9294:	46 0f       	add	r20, r22
    9296:	57 1f       	adc	r21, r23
    9298:	da 01       	movw	r26, r20
    929a:	1c 92       	st	X, r1

	 if (IsNewPumpStatus==True){
	     IsNewPumpStatus=False;
		 BackLightTrig();
		 StrPosCopy(strPumpStatus,SPump,0,PumpCountMax);
		 sprintf_P(lcdteks,PSTR("%s"),SPump);
    929c:	00 d0       	rcall	.+0      	; 0x929e <DisplayPumpStatus+0x70>
    929e:	00 d0       	rcall	.+0      	; 0x92a0 <DisplayPumpStatus+0x72>
    92a0:	00 d0       	rcall	.+0      	; 0x92a2 <DisplayPumpStatus+0x74>
    92a2:	ed b7       	in	r30, 0x3d	; 61
    92a4:	fe b7       	in	r31, 0x3e	; 62
    92a6:	31 96       	adiw	r30, 0x01	; 1
    92a8:	8e 01       	movw	r16, r28
    92aa:	0b 5e       	subi	r16, 0xEB	; 235
    92ac:	1f 4f       	sbci	r17, 0xFF	; 255
    92ae:	ad b7       	in	r26, 0x3d	; 61
    92b0:	be b7       	in	r27, 0x3e	; 62
    92b2:	12 96       	adiw	r26, 0x02	; 2
    92b4:	1c 93       	st	X, r17
    92b6:	0e 93       	st	-X, r16
    92b8:	11 97       	sbiw	r26, 0x01	; 1
    92ba:	89 e0       	ldi	r24, 0x09	; 9
    92bc:	94 e2       	ldi	r25, 0x24	; 36
    92be:	93 83       	std	Z+3, r25	; 0x03
    92c0:	82 83       	std	Z+2, r24	; 0x02
    92c2:	75 83       	std	Z+5, r23	; 0x05
    92c4:	64 83       	std	Z+4, r22	; 0x04
    92c6:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
         lcd_print(4,1,lcdteks);
    92ca:	ed b7       	in	r30, 0x3d	; 61
    92cc:	fe b7       	in	r31, 0x3e	; 62
    92ce:	36 96       	adiw	r30, 0x06	; 6
    92d0:	0f b6       	in	r0, 0x3f	; 63
    92d2:	f8 94       	cli
    92d4:	fe bf       	out	0x3e, r31	; 62
    92d6:	0f be       	out	0x3f, r0	; 63
    92d8:	ed bf       	out	0x3d, r30	; 61
    92da:	84 e0       	ldi	r24, 0x04	; 4
    92dc:	61 e0       	ldi	r22, 0x01	; 1
    92de:	a8 01       	movw	r20, r16
    92e0:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
     	 }
}
    92e4:	a8 96       	adiw	r28, 0x28	; 40
    92e6:	0f b6       	in	r0, 0x3f	; 63
    92e8:	f8 94       	cli
    92ea:	de bf       	out	0x3e, r29	; 62
    92ec:	0f be       	out	0x3f, r0	; 63
    92ee:	cd bf       	out	0x3d, r28	; 61
    92f0:	cf 91       	pop	r28
    92f2:	df 91       	pop	r29
    92f4:	1f 91       	pop	r17
    92f6:	0f 91       	pop	r16
    92f8:	08 95       	ret

000092fa <FCloseShift>:
	 }
  return Result;
}


char FCloseShift(char ShiftType){//SHIFT_NONE,NEW_SHIFT,CONTINUE_SHIFT
    92fa:	df 92       	push	r13
    92fc:	ef 92       	push	r14
    92fe:	ff 92       	push	r15
    9300:	0f 93       	push	r16
    9302:	1f 93       	push	r17
    9304:	df 93       	push	r29
    9306:	cf 93       	push	r28
    9308:	cd b7       	in	r28, 0x3d	; 61
    930a:	de b7       	in	r29, 0x3e	; 62
    930c:	64 97       	sbiw	r28, 0x14	; 20
    930e:	0f b6       	in	r0, 0x3f	; 63
    9310:	f8 94       	cli
    9312:	de bf       	out	0x3e, r29	; 62
    9314:	0f be       	out	0x3f, r0	; 63
    9316:	cd bf       	out	0x3d, r28	; 61
    9318:	18 2f       	mov	r17, r24
	 char KeyPressed;
	 char FIPAddr;


	 Result=MENU_NONE;
	 switch(stCloseShift){
    931a:	80 91 49 02 	lds	r24, 0x0249
    931e:	87 30       	cpi	r24, 0x07	; 7
    9320:	09 f4       	brne	.+2      	; 0x9324 <FCloseShift+0x2a>
    9322:	98 c1       	rjmp	.+816    	; 0x9654 <FCloseShift+0x35a>
    9324:	88 30       	cpi	r24, 0x08	; 8
    9326:	78 f4       	brcc	.+30     	; 0x9346 <FCloseShift+0x4c>
    9328:	84 30       	cpi	r24, 0x04	; 4
    932a:	09 f4       	brne	.+2      	; 0x932e <FCloseShift+0x34>
    932c:	64 c0       	rjmp	.+200    	; 0x93f6 <FCloseShift+0xfc>
    932e:	85 30       	cpi	r24, 0x05	; 5
    9330:	18 f4       	brcc	.+6      	; 0x9338 <FCloseShift+0x3e>
    9332:	88 23       	and	r24, r24
    9334:	c1 f0       	breq	.+48     	; 0x9366 <FCloseShift+0x6c>
    9336:	04 c2       	rjmp	.+1032   	; 0x9740 <FCloseShift+0x446>
    9338:	85 30       	cpi	r24, 0x05	; 5
    933a:	09 f4       	brne	.+2      	; 0x933e <FCloseShift+0x44>
    933c:	a2 c0       	rjmp	.+324    	; 0x9482 <FCloseShift+0x188>
    933e:	86 30       	cpi	r24, 0x06	; 6
    9340:	09 f0       	breq	.+2      	; 0x9344 <FCloseShift+0x4a>
    9342:	fe c1       	rjmp	.+1020   	; 0x9740 <FCloseShift+0x446>
    9344:	a4 c0       	rjmp	.+328    	; 0x948e <FCloseShift+0x194>
    9346:	8a 30       	cpi	r24, 0x0A	; 10
    9348:	09 f4       	brne	.+2      	; 0x934c <FCloseShift+0x52>
    934a:	c8 c1       	rjmp	.+912    	; 0x96dc <FCloseShift+0x3e2>
    934c:	8b 30       	cpi	r24, 0x0B	; 11
    934e:	20 f4       	brcc	.+8      	; 0x9358 <FCloseShift+0x5e>
    9350:	88 30       	cpi	r24, 0x08	; 8
    9352:	09 f0       	breq	.+2      	; 0x9356 <FCloseShift+0x5c>
    9354:	f5 c1       	rjmp	.+1002   	; 0x9740 <FCloseShift+0x446>
    9356:	84 c1       	rjmp	.+776    	; 0x9660 <FCloseShift+0x366>
    9358:	8b 30       	cpi	r24, 0x0B	; 11
    935a:	09 f4       	brne	.+2      	; 0x935e <FCloseShift+0x64>
    935c:	ed c1       	rjmp	.+986    	; 0x9738 <FCloseShift+0x43e>
    935e:	8c 30       	cpi	r24, 0x0C	; 12
    9360:	09 f0       	breq	.+2      	; 0x9364 <FCloseShift+0x6a>
    9362:	ee c1       	rjmp	.+988    	; 0x9740 <FCloseShift+0x446>
    9364:	c3 c1       	rjmp	.+902    	; 0x96ec <FCloseShift+0x3f2>
	 case csInitCloseShift:
	      ActivePump=eeprom_read_byte(&DefActivePump);
    9366:	89 e4       	ldi	r24, 0x49	; 73
    9368:	91 e0       	ldi	r25, 0x01	; 1
    936a:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
    936e:	80 93 5d 01 	sts	0x015D, r24
		  IsPumpBusy=False;
    9372:	10 92 48 02 	sts	0x0248, r1
    9376:	ff 24       	eor	r15, r15
					
		       if (strPumpStatus[FIPAddr]==GetPumpStatusLabel(PS_TOTALIZER))
			        UpdateStandaloneStatus(GetPumpID(FIPAddr),PUMP_OFF);
					
               if (strPumpStatus[FIPAddr]==GetPumpStatusLabel(PUMP_BUSY))
			       IsPumpBusy=True;
    9378:	dd 24       	eor	r13, r13
    937a:	d3 94       	inc	r13
    937c:	36 c0       	rjmp	.+108    	; 0x93ea <FCloseShift+0xf0>
	 case csInitCloseShift:
	      ActivePump=eeprom_read_byte(&DefActivePump);
		  IsPumpBusy=False;
		  //FindBusy Pump
		  for (FIPAddr=0;FIPAddr<ActivePump;FIPAddr++){		       
		       if ((strPumpStatus[FIPAddr]!=GetPumpStatusLabel(PUMP_NONE))&&(strPumpStatus[FIPAddr]!=GetPumpStatusLabel(PUMP_OFF))&&(strPumpStatus[FIPAddr]!=GetPumpStatusLabel(PUMP_BUSY)))
    937e:	0f 2d       	mov	r16, r15
    9380:	10 e0       	ldi	r17, 0x00	; 0
    9382:	f8 01       	movw	r30, r16
    9384:	ee 5f       	subi	r30, 0xFE	; 254
    9386:	fe 4f       	sbci	r31, 0xFE	; 254
    9388:	e0 80       	ld	r14, Z
    938a:	8e e0       	ldi	r24, 0x0E	; 14
    938c:	0e 94 3e 14 	call	0x287c	; 0x287c <GetPumpStatusLabel>
    9390:	e8 16       	cp	r14, r24
    9392:	81 f0       	breq	.+32     	; 0x93b4 <FCloseShift+0xba>
    9394:	86 e0       	ldi	r24, 0x06	; 6
    9396:	0e 94 3e 14 	call	0x287c	; 0x287c <GetPumpStatusLabel>
    939a:	e8 16       	cp	r14, r24
    939c:	59 f0       	breq	.+22     	; 0x93b4 <FCloseShift+0xba>
    939e:	89 e0       	ldi	r24, 0x09	; 9
    93a0:	0e 94 3e 14 	call	0x287c	; 0x287c <GetPumpStatusLabel>
    93a4:	e8 16       	cp	r14, r24
    93a6:	31 f0       	breq	.+12     	; 0x93b4 <FCloseShift+0xba>
				    UpdateStandaloneStatus(GetPumpID(FIPAddr),PUMP_OFF);
    93a8:	8f 2d       	mov	r24, r15
    93aa:	0e 94 84 20 	call	0x4108	; 0x4108 <GetPumpID>
    93ae:	66 e0       	ldi	r22, 0x06	; 6
    93b0:	0e 94 2a 20 	call	0x4054	; 0x4054 <UpdateStandaloneStatus>
					
		       if (strPumpStatus[FIPAddr]==GetPumpStatusLabel(PS_TOTALIZER))
    93b4:	84 e1       	ldi	r24, 0x14	; 20
    93b6:	0e 94 3e 14 	call	0x287c	; 0x287c <GetPumpStatusLabel>
    93ba:	f8 01       	movw	r30, r16
    93bc:	ee 5f       	subi	r30, 0xFE	; 254
    93be:	fe 4f       	sbci	r31, 0xFE	; 254
    93c0:	90 81       	ld	r25, Z
    93c2:	98 17       	cp	r25, r24
    93c4:	31 f4       	brne	.+12     	; 0x93d2 <FCloseShift+0xd8>
			        UpdateStandaloneStatus(GetPumpID(FIPAddr),PUMP_OFF);
    93c6:	8f 2d       	mov	r24, r15
    93c8:	0e 94 84 20 	call	0x4108	; 0x4108 <GetPumpID>
    93cc:	66 e0       	ldi	r22, 0x06	; 6
    93ce:	0e 94 2a 20 	call	0x4054	; 0x4054 <UpdateStandaloneStatus>
					
               if (strPumpStatus[FIPAddr]==GetPumpStatusLabel(PUMP_BUSY))
    93d2:	89 e0       	ldi	r24, 0x09	; 9
    93d4:	0e 94 3e 14 	call	0x287c	; 0x287c <GetPumpStatusLabel>
    93d8:	0e 5f       	subi	r16, 0xFE	; 254
    93da:	1e 4f       	sbci	r17, 0xFE	; 254
    93dc:	d8 01       	movw	r26, r16
    93de:	9c 91       	ld	r25, X
    93e0:	98 17       	cp	r25, r24
    93e2:	11 f4       	brne	.+4      	; 0x93e8 <FCloseShift+0xee>
			       IsPumpBusy=True;
    93e4:	d0 92 48 02 	sts	0x0248, r13
	 switch(stCloseShift){
	 case csInitCloseShift:
	      ActivePump=eeprom_read_byte(&DefActivePump);
		  IsPumpBusy=False;
		  //FindBusy Pump
		  for (FIPAddr=0;FIPAddr<ActivePump;FIPAddr++){		       
    93e8:	f3 94       	inc	r15
    93ea:	80 91 5d 01 	lds	r24, 0x015D
    93ee:	f8 16       	cp	r15, r24
    93f0:	30 f2       	brcs	.-116    	; 0x937e <FCloseShift+0x84>
					
               if (strPumpStatus[FIPAddr]==GetPumpStatusLabel(PUMP_BUSY))
			       IsPumpBusy=True;
			   }

          stCloseShift=csSendTotalizerALL;
    93f2:	84 e0       	ldi	r24, 0x04	; 4
    93f4:	9e c1       	rjmp	.+828    	; 0x9732 <FCloseShift+0x438>
			  */
	      break;
     case csWaitPumpLocked:	     
	      break;
     case csSendTotalizerALL:
	      lcd_clear();
    93f6:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
		  lcd_printf(1,1,PSTR("Totalizer.."));
    93fa:	81 e0       	ldi	r24, 0x01	; 1
    93fc:	61 e0       	ldi	r22, 0x01	; 1
    93fe:	46 e3       	ldi	r20, 0x36	; 54
    9400:	57 e1       	ldi	r21, 0x17	; 23
    9402:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  
		  sprintf_P(lcdteks,PSTR("Wait Pump:%d "),(ActivePump-CountTotalizerSatus(strPumpStatus)));
    9406:	00 91 5d 01 	lds	r16, 0x015D
    940a:	10 e0       	ldi	r17, 0x00	; 0
    940c:	82 e0       	ldi	r24, 0x02	; 2
    940e:	91 e0       	ldi	r25, 0x01	; 1
    9410:	0e 94 08 32 	call	0x6410	; 0x6410 <CountTotalizerSatus>
    9414:	00 d0       	rcall	.+0      	; 0x9416 <FCloseShift+0x11c>
    9416:	00 d0       	rcall	.+0      	; 0x9418 <FCloseShift+0x11e>
    9418:	00 d0       	rcall	.+0      	; 0x941a <FCloseShift+0x120>
    941a:	ed b7       	in	r30, 0x3d	; 61
    941c:	fe b7       	in	r31, 0x3e	; 62
    941e:	31 96       	adiw	r30, 0x01	; 1
    9420:	7e 01       	movw	r14, r28
    9422:	08 94       	sec
    9424:	e1 1c       	adc	r14, r1
    9426:	f1 1c       	adc	r15, r1
    9428:	ad b7       	in	r26, 0x3d	; 61
    942a:	be b7       	in	r27, 0x3e	; 62
    942c:	12 96       	adiw	r26, 0x02	; 2
    942e:	fc 92       	st	X, r15
    9430:	ee 92       	st	-X, r14
    9432:	11 97       	sbiw	r26, 0x01	; 1
    9434:	28 e2       	ldi	r18, 0x28	; 40
    9436:	37 e1       	ldi	r19, 0x17	; 23
    9438:	33 83       	std	Z+3, r19	; 0x03
    943a:	22 83       	std	Z+2, r18	; 0x02
    943c:	08 1b       	sub	r16, r24
    943e:	11 09       	sbc	r17, r1
    9440:	15 83       	std	Z+5, r17	; 0x05
    9442:	04 83       	std	Z+4, r16	; 0x04
    9444:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
		  lcd_print(2,1,lcdteks);
    9448:	ed b7       	in	r30, 0x3d	; 61
    944a:	fe b7       	in	r31, 0x3e	; 62
    944c:	36 96       	adiw	r30, 0x06	; 6
    944e:	0f b6       	in	r0, 0x3f	; 63
    9450:	f8 94       	cli
    9452:	fe bf       	out	0x3e, r31	; 62
    9454:	0f be       	out	0x3f, r0	; 63
    9456:	ed bf       	out	0x3d, r30	; 61
    9458:	82 e0       	ldi	r24, 0x02	; 2
    945a:	61 e0       	ldi	r22, 0x01	; 1
    945c:	a7 01       	movw	r20, r14
    945e:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>


          IsNewPumpStatus=True;
    9462:	11 e0       	ldi	r17, 0x01	; 1
    9464:	10 93 01 01 	sts	0x0101, r17
		  DisplayPumpStatus(); 
    9468:	0e 94 17 49 	call	0x922e	; 0x922e <DisplayPumpStatus>
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
    946c:	95 e0       	ldi	r25, 0x05	; 5
    946e:	90 93 a7 05 	sts	0x05A7, r25
	 PoolMsg=plMsg;
    9472:	82 e1       	ldi	r24, 0x12	; 18
    9474:	80 93 d3 0b 	sts	0x0BD3, r24
     IsControlPooling=True;
    9478:	10 93 84 01 	sts	0x0184, r17
          IsNewPumpStatus=True;
		  DisplayPumpStatus(); 
		  //SendCommand
	      //SendSlaveCommand(SC_TOTALIZER,PUMP_ALL);          
		  SendPoolingCommand(SC_TOTALIZER,PUMP_ALL);
		  stCloseShift=csDisplayPumpStatus;
    947c:	90 93 49 02 	sts	0x0249, r25
    9480:	5f c1       	rjmp	.+702    	; 0x9740 <FCloseShift+0x446>
	      break;
     case csDisplayPumpStatus:
		  DisplayPumpStatus(); 
    9482:	0e 94 17 49 	call	0x922e	; 0x922e <DisplayPumpStatus>
		  TimDisplay=0;         
    9486:	10 92 92 01 	sts	0x0192, r1
          stCloseShift=csWaitTotalizerComplete;
    948a:	86 e0       	ldi	r24, 0x06	; 6
    948c:	52 c1       	rjmp	.+676    	; 0x9732 <FCloseShift+0x438>
	      break;
     case csWaitTotalizerComplete:
	      KeyPressed=_key_scan(1);
    948e:	81 e0       	ldi	r24, 0x01	; 1
    9490:	0e 94 f6 a5 	call	0x14bec	; 0x14bec <_key_scan>
    9494:	d8 2e       	mov	r13, r24
		  if (IsNewPumpStatus==True){
    9496:	80 91 01 01 	lds	r24, 0x0101
    949a:	81 30       	cpi	r24, 0x01	; 1
    949c:	89 f5       	brne	.+98     	; 0x9500 <FCloseShift+0x206>
			  sprintf_P(lcdteks,PSTR("Wait Pump:%d "),(ActivePump-CountTotalizerSatus(strPumpStatus)));
    949e:	00 91 5d 01 	lds	r16, 0x015D
    94a2:	10 e0       	ldi	r17, 0x00	; 0
    94a4:	82 e0       	ldi	r24, 0x02	; 2
    94a6:	91 e0       	ldi	r25, 0x01	; 1
    94a8:	0e 94 08 32 	call	0x6410	; 0x6410 <CountTotalizerSatus>
    94ac:	00 d0       	rcall	.+0      	; 0x94ae <FCloseShift+0x1b4>
    94ae:	00 d0       	rcall	.+0      	; 0x94b0 <FCloseShift+0x1b6>
    94b0:	00 d0       	rcall	.+0      	; 0x94b2 <FCloseShift+0x1b8>
    94b2:	ed b7       	in	r30, 0x3d	; 61
    94b4:	fe b7       	in	r31, 0x3e	; 62
    94b6:	31 96       	adiw	r30, 0x01	; 1
    94b8:	7e 01       	movw	r14, r28
    94ba:	08 94       	sec
    94bc:	e1 1c       	adc	r14, r1
    94be:	f1 1c       	adc	r15, r1
    94c0:	ad b7       	in	r26, 0x3d	; 61
    94c2:	be b7       	in	r27, 0x3e	; 62
    94c4:	12 96       	adiw	r26, 0x02	; 2
    94c6:	fc 92       	st	X, r15
    94c8:	ee 92       	st	-X, r14
    94ca:	11 97       	sbiw	r26, 0x01	; 1
    94cc:	2a e1       	ldi	r18, 0x1A	; 26
    94ce:	37 e1       	ldi	r19, 0x17	; 23
    94d0:	33 83       	std	Z+3, r19	; 0x03
    94d2:	22 83       	std	Z+2, r18	; 0x02
    94d4:	08 1b       	sub	r16, r24
    94d6:	11 09       	sbc	r17, r1
    94d8:	15 83       	std	Z+5, r17	; 0x05
    94da:	04 83       	std	Z+4, r16	; 0x04
    94dc:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
			  lcd_print(2,1,lcdteks);
    94e0:	ed b7       	in	r30, 0x3d	; 61
    94e2:	fe b7       	in	r31, 0x3e	; 62
    94e4:	36 96       	adiw	r30, 0x06	; 6
    94e6:	0f b6       	in	r0, 0x3f	; 63
    94e8:	f8 94       	cli
    94ea:	fe bf       	out	0x3e, r31	; 62
    94ec:	0f be       	out	0x3f, r0	; 63
    94ee:	ed bf       	out	0x3d, r30	; 61
    94f0:	82 e0       	ldi	r24, 0x02	; 2
    94f2:	61 e0       	ldi	r22, 0x01	; 1
    94f4:	a7 01       	movw	r20, r14
    94f6:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
		  	  stCloseShift=csDisplayPumpStatus;	 
    94fa:	85 e0       	ldi	r24, 0x05	; 5
    94fc:	80 93 49 02 	sts	0x0249, r24
		  }
		  if ((CountTotalizerSatus(strPumpStatus)>=ActivePump)&&(TimDisplay>5)){
    9500:	82 e0       	ldi	r24, 0x02	; 2
    9502:	91 e0       	ldi	r25, 0x01	; 1
    9504:	0e 94 08 32 	call	0x6410	; 0x6410 <CountTotalizerSatus>
    9508:	90 91 5d 01 	lds	r25, 0x015D
    950c:	89 17       	cp	r24, r25
    950e:	a0 f0       	brcs	.+40     	; 0x9538 <FCloseShift+0x23e>
    9510:	80 91 92 01 	lds	r24, 0x0192
    9514:	86 30       	cpi	r24, 0x06	; 6
    9516:	80 f0       	brcs	.+32     	; 0x9538 <FCloseShift+0x23e>
    9518:	10 e0       	ldi	r17, 0x00	; 0
    951a:	07 c0       	rjmp	.+14     	; 0x952a <FCloseShift+0x230>
		      for (FIPAddr=0;FIPAddr<ActivePump;FIPAddr++)
			       UpdateStandaloneStatus(GetPumpID(FIPAddr),PUMP_OFF);
    951c:	81 2f       	mov	r24, r17
    951e:	0e 94 84 20 	call	0x4108	; 0x4108 <GetPumpID>
    9522:	66 e0       	ldi	r22, 0x06	; 6
    9524:	0e 94 2a 20 	call	0x4054	; 0x4054 <UpdateStandaloneStatus>
			  sprintf_P(lcdteks,PSTR("Wait Pump:%d "),(ActivePump-CountTotalizerSatus(strPumpStatus)));
			  lcd_print(2,1,lcdteks);
		  	  stCloseShift=csDisplayPumpStatus;	 
		  }
		  if ((CountTotalizerSatus(strPumpStatus)>=ActivePump)&&(TimDisplay>5)){
		      for (FIPAddr=0;FIPAddr<ActivePump;FIPAddr++)
    9528:	1f 5f       	subi	r17, 0xFF	; 255
    952a:	80 91 5d 01 	lds	r24, 0x015D
    952e:	18 17       	cp	r17, r24
    9530:	a8 f3       	brcs	.-22     	; 0x951c <FCloseShift+0x222>
			       UpdateStandaloneStatus(GetPumpID(FIPAddr),PUMP_OFF);

		      stCloseShift=csGenerateReport;		      
    9532:	88 e0       	ldi	r24, 0x08	; 8
    9534:	80 93 49 02 	sts	0x0249, r24
			  }
          //sprintf_P(lcdteks,PSTR("TimSend:%d"),TimDisplay);
		  //lcd_print(3,1,lcdteks);

          if ((TimDisplay>15)&&(IsPumpBusy!=True)){
    9538:	80 91 92 01 	lds	r24, 0x0192
    953c:	80 31       	cpi	r24, 0x10	; 16
    953e:	08 f4       	brcc	.+2      	; 0x9542 <FCloseShift+0x248>
    9540:	60 c0       	rjmp	.+192    	; 0x9602 <FCloseShift+0x308>
    9542:	80 91 48 02 	lds	r24, 0x0248
    9546:	81 30       	cpi	r24, 0x01	; 1
    9548:	09 f4       	brne	.+2      	; 0x954c <FCloseShift+0x252>
    954a:	5b c0       	rjmp	.+182    	; 0x9602 <FCloseShift+0x308>
		      if(CountNoPumpSatus(strPumpStatus)>=eeprom_read_byte(&DefActivePump)){
    954c:	82 e0       	ldi	r24, 0x02	; 2
    954e:	91 e0       	ldi	r25, 0x01	; 1
    9550:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <CountNoPumpSatus>
    9554:	18 2f       	mov	r17, r24
    9556:	89 e4       	ldi	r24, 0x49	; 73
    9558:	91 e0       	ldi	r25, 0x01	; 1
    955a:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
    955e:	18 17       	cp	r17, r24
    9560:	08 f4       	brcc	.+2      	; 0x9564 <FCloseShift+0x26a>
    9562:	4f c0       	rjmp	.+158    	; 0x9602 <FCloseShift+0x308>
			  //lcd_printf(2,1,PSTR("NoPumpFound  ")); 
			  //sprintf_P(lcdteks,PSTR("NoPumpFound:%d"),CountNoPumpSatus(strPumpStatus));
			  sprintf_P(lcdteks,PSTR("Error - No Pump:%d "),ActivePump-CountNoPumpSatus(strPumpStatus));
    9564:	00 91 5d 01 	lds	r16, 0x015D
    9568:	10 e0       	ldi	r17, 0x00	; 0
    956a:	82 e0       	ldi	r24, 0x02	; 2
    956c:	91 e0       	ldi	r25, 0x01	; 1
    956e:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <CountNoPumpSatus>
    9572:	00 d0       	rcall	.+0      	; 0x9574 <FCloseShift+0x27a>
    9574:	00 d0       	rcall	.+0      	; 0x9576 <FCloseShift+0x27c>
    9576:	00 d0       	rcall	.+0      	; 0x9578 <FCloseShift+0x27e>
    9578:	ed b7       	in	r30, 0x3d	; 61
    957a:	fe b7       	in	r31, 0x3e	; 62
    957c:	31 96       	adiw	r30, 0x01	; 1
    957e:	7e 01       	movw	r14, r28
    9580:	08 94       	sec
    9582:	e1 1c       	adc	r14, r1
    9584:	f1 1c       	adc	r15, r1
    9586:	ad b7       	in	r26, 0x3d	; 61
    9588:	be b7       	in	r27, 0x3e	; 62
    958a:	12 96       	adiw	r26, 0x02	; 2
    958c:	fc 92       	st	X, r15
    958e:	ee 92       	st	-X, r14
    9590:	11 97       	sbiw	r26, 0x01	; 1
    9592:	26 e0       	ldi	r18, 0x06	; 6
    9594:	37 e1       	ldi	r19, 0x17	; 23
    9596:	33 83       	std	Z+3, r19	; 0x03
    9598:	22 83       	std	Z+2, r18	; 0x02
    959a:	08 1b       	sub	r16, r24
    959c:	11 09       	sbc	r17, r1
    959e:	15 83       	std	Z+5, r17	; 0x05
    95a0:	04 83       	std	Z+4, r16	; 0x04
    95a2:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
			  lcd_print(3,1,lcdteks);
    95a6:	ed b7       	in	r30, 0x3d	; 61
    95a8:	fe b7       	in	r31, 0x3e	; 62
    95aa:	36 96       	adiw	r30, 0x06	; 6
    95ac:	0f b6       	in	r0, 0x3f	; 63
    95ae:	f8 94       	cli
    95b0:	fe bf       	out	0x3e, r31	; 62
    95b2:	0f be       	out	0x3f, r0	; 63
    95b4:	ed bf       	out	0x3d, r30	; 61
    95b6:	83 e0       	ldi	r24, 0x03	; 3
    95b8:	61 e0       	ldi	r22, 0x01	; 1
    95ba:	a7 01       	movw	r20, r14
    95bc:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
    95c0:	10 e0       	ldi	r17, 0x00	; 0
    95c2:	11 c0       	rjmp	.+34     	; 0x95e6 <FCloseShift+0x2ec>
			  
			  for (FIPAddr=0;FIPAddr<ActivePump;FIPAddr++){
		           if (strPumpStatus[FIPAddr]==GetPumpStatusLabel(PS_TOTALIZER))
    95c4:	84 e1       	ldi	r24, 0x14	; 20
    95c6:	0e 94 3e 14 	call	0x287c	; 0x287c <GetPumpStatusLabel>
    95ca:	e1 2f       	mov	r30, r17
    95cc:	f0 e0       	ldi	r31, 0x00	; 0
    95ce:	ee 5f       	subi	r30, 0xFE	; 254
    95d0:	fe 4f       	sbci	r31, 0xFE	; 254
    95d2:	90 81       	ld	r25, Z
    95d4:	98 17       	cp	r25, r24
    95d6:	31 f4       	brne	.+12     	; 0x95e4 <FCloseShift+0x2ea>
			           UpdateStandaloneStatus(GetPumpID(FIPAddr),PUMP_OFF);
    95d8:	81 2f       	mov	r24, r17
    95da:	0e 94 84 20 	call	0x4108	; 0x4108 <GetPumpID>
    95de:	66 e0       	ldi	r22, 0x06	; 6
    95e0:	0e 94 2a 20 	call	0x4054	; 0x4054 <UpdateStandaloneStatus>
			  //lcd_printf(2,1,PSTR("NoPumpFound  ")); 
			  //sprintf_P(lcdteks,PSTR("NoPumpFound:%d"),CountNoPumpSatus(strPumpStatus));
			  sprintf_P(lcdteks,PSTR("Error - No Pump:%d "),ActivePump-CountNoPumpSatus(strPumpStatus));
			  lcd_print(3,1,lcdteks);
			  
			  for (FIPAddr=0;FIPAddr<ActivePump;FIPAddr++){
    95e4:	1f 5f       	subi	r17, 0xFF	; 255
    95e6:	80 91 5d 01 	lds	r24, 0x015D
    95ea:	18 17       	cp	r17, r24
    95ec:	58 f3       	brcs	.-42     	; 0x95c4 <FCloseShift+0x2ca>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    95ee:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    95f0:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    95f2:	81 e0       	ldi	r24, 0x01	; 1
    95f4:	80 93 bc 01 	sts	0x01BC, r24
		           if (strPumpStatus[FIPAddr]==GetPumpStatusLabel(PS_TOTALIZER))
			           UpdateStandaloneStatus(GetPumpID(FIPAddr),PUMP_OFF);
			  }

			  system_beep(1);
			  TimDisplay=0;
    95f8:	10 92 92 01 	sts	0x0192, r1
			  stCloseShift=csNoPumpFound;		     
    95fc:	87 e0       	ldi	r24, 0x07	; 7
    95fe:	80 93 49 02 	sts	0x0249, r24
			  }			  
		  }
		  if (KeyPressed==_KEY_CANCEL){
    9602:	f7 ee       	ldi	r31, 0xE7	; 231
    9604:	df 16       	cp	r13, r31
    9606:	09 f0       	breq	.+2      	; 0x960a <FCloseShift+0x310>
    9608:	9b c0       	rjmp	.+310    	; 0x9740 <FCloseShift+0x446>
			  sprintf_P(lcdteks,PSTR("Cancel"));
    960a:	00 d0       	rcall	.+0      	; 0x960c <FCloseShift+0x312>
    960c:	00 d0       	rcall	.+0      	; 0x960e <FCloseShift+0x314>
    960e:	8e 01       	movw	r16, r28
    9610:	0f 5f       	subi	r16, 0xFF	; 255
    9612:	1f 4f       	sbci	r17, 0xFF	; 255
    9614:	ad b7       	in	r26, 0x3d	; 61
    9616:	be b7       	in	r27, 0x3e	; 62
    9618:	12 96       	adiw	r26, 0x02	; 2
    961a:	1c 93       	st	X, r17
    961c:	0e 93       	st	-X, r16
    961e:	11 97       	sbiw	r26, 0x01	; 1
    9620:	8f ef       	ldi	r24, 0xFF	; 255
    9622:	96 e1       	ldi	r25, 0x16	; 22
    9624:	14 96       	adiw	r26, 0x04	; 4
    9626:	9c 93       	st	X, r25
    9628:	8e 93       	st	-X, r24
    962a:	13 97       	sbiw	r26, 0x03	; 3
    962c:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
			  lcd_print(3,1,lcdteks);
    9630:	0f 90       	pop	r0
    9632:	0f 90       	pop	r0
    9634:	0f 90       	pop	r0
    9636:	0f 90       	pop	r0
    9638:	83 e0       	ldi	r24, 0x03	; 3
    963a:	61 e0       	ldi	r22, 0x01	; 1
    963c:	a8 01       	movw	r20, r16
    963e:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    9642:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    9644:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    9646:	81 e0       	ldi	r24, 0x01	; 1
    9648:	80 93 bc 01 	sts	0x01BC, r24
		  }
		  if (KeyPressed==_KEY_CANCEL){
			  sprintf_P(lcdteks,PSTR("Cancel"));
			  lcd_print(3,1,lcdteks);
			  system_beep(1);
			  TimDisplay=0;
    964c:	10 92 92 01 	sts	0x0192, r1
			  stCloseShift=csNoPumpFound;		     		  
    9650:	87 e0       	ldi	r24, 0x07	; 7
    9652:	6f c0       	rjmp	.+222    	; 0x9732 <FCloseShift+0x438>
		  }
	      break;
     case csNoPumpFound:
	      if (TimDisplay>TIM_DISPLAY){
    9654:	80 91 92 01 	lds	r24, 0x0192
    9658:	8b 30       	cpi	r24, 0x0B	; 11
    965a:	08 f4       	brcc	.+2      	; 0x965e <FCloseShift+0x364>
    965c:	71 c0       	rjmp	.+226    	; 0x9740 <FCloseShift+0x446>
    965e:	68 c0       	rjmp	.+208    	; 0x9730 <FCloseShift+0x436>
		      stCloseShift=csFinishCloseShift;
		  }	      
	      break;
     case csGenerateReport:
		  lcd_printf(1,1,PSTR("Printing Totalizer"));
    9660:	81 e0       	ldi	r24, 0x01	; 1
    9662:	61 e0       	ldi	r22, 0x01	; 1
    9664:	4c ee       	ldi	r20, 0xEC	; 236
    9666:	56 e1       	ldi	r21, 0x16	; 22
    9668:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
          _datetime(0, strSystemDate, strSystemTime);
    966c:	0a eb       	ldi	r16, 0xBA	; 186
    966e:	13 e0       	ldi	r17, 0x03	; 3
    9670:	84 e7       	ldi	r24, 0x74	; 116
    9672:	e8 2e       	mov	r14, r24
    9674:	88 e0       	ldi	r24, 0x08	; 8
    9676:	f8 2e       	mov	r15, r24
    9678:	80 e0       	ldi	r24, 0x00	; 0
    967a:	b8 01       	movw	r22, r16
    967c:	a7 01       	movw	r20, r14
    967e:	0e 94 57 a7 	call	0x14eae	; 0x14eae <_datetime>
		  sprintf_P(CurrentShiftDateTime,PSTR("%s %s"),strSystemDate,strSystemTime);
    9682:	ed b7       	in	r30, 0x3d	; 61
    9684:	fe b7       	in	r31, 0x3e	; 62
    9686:	38 97       	sbiw	r30, 0x08	; 8
    9688:	0f b6       	in	r0, 0x3f	; 63
    968a:	f8 94       	cli
    968c:	fe bf       	out	0x3e, r31	; 62
    968e:	0f be       	out	0x3f, r0	; 63
    9690:	ed bf       	out	0x3d, r30	; 61
    9692:	31 96       	adiw	r30, 0x01	; 1
    9694:	8e e8       	ldi	r24, 0x8E	; 142
    9696:	97 e0       	ldi	r25, 0x07	; 7
    9698:	ad b7       	in	r26, 0x3d	; 61
    969a:	be b7       	in	r27, 0x3e	; 62
    969c:	12 96       	adiw	r26, 0x02	; 2
    969e:	9c 93       	st	X, r25
    96a0:	8e 93       	st	-X, r24
    96a2:	11 97       	sbiw	r26, 0x01	; 1
    96a4:	86 ee       	ldi	r24, 0xE6	; 230
    96a6:	96 e1       	ldi	r25, 0x16	; 22
    96a8:	93 83       	std	Z+3, r25	; 0x03
    96aa:	82 83       	std	Z+2, r24	; 0x02
    96ac:	15 83       	std	Z+5, r17	; 0x05
    96ae:	04 83       	std	Z+4, r16	; 0x04
    96b0:	f7 82       	std	Z+7, r15	; 0x07
    96b2:	e6 82       	std	Z+6, r14	; 0x06
    96b4:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
		  IsGenerateReport=True;
    96b8:	81 e0       	ldi	r24, 0x01	; 1
    96ba:	80 93 86 01 	sts	0x0186, r24
		  IsFinishPrintingTotalizer=False;
    96be:	10 92 87 01 	sts	0x0187, r1
		  stCloseShift=csWaitPrintTotalizerComplete;
    96c2:	8a e0       	ldi	r24, 0x0A	; 10
    96c4:	80 93 49 02 	sts	0x0249, r24
    96c8:	80 e0       	ldi	r24, 0x00	; 0
    96ca:	ed b7       	in	r30, 0x3d	; 61
    96cc:	fe b7       	in	r31, 0x3e	; 62
    96ce:	38 96       	adiw	r30, 0x08	; 8
    96d0:	0f b6       	in	r0, 0x3f	; 63
    96d2:	f8 94       	cli
    96d4:	fe bf       	out	0x3e, r31	; 62
    96d6:	0f be       	out	0x3f, r0	; 63
    96d8:	ed bf       	out	0x3d, r30	; 61
    96da:	33 c0       	rjmp	.+102    	; 0x9742 <FCloseShift+0x448>
	      break;
     case csWaitTotalizerALL:
	      break;
     case csWaitPrintTotalizerComplete:
	      if (IsFinishPrintingTotalizer==True){
    96dc:	80 91 87 01 	lds	r24, 0x0187
    96e0:	81 30       	cpi	r24, 0x01	; 1
    96e2:	71 f5       	brne	.+92     	; 0x9740 <FCloseShift+0x446>
		      IsFinishPrintingTotalizer=False;
    96e4:	10 92 87 01 	sts	0x0187, r1
		      stCloseShift=csDumpShift;
    96e8:	8c e0       	ldi	r24, 0x0C	; 12
    96ea:	23 c0       	rjmp	.+70     	; 0x9732 <FCloseShift+0x438>
		  }
	      break;
     case csDumpShift://Increment CurrentShift save Current to Last
		  lcd_printf(1,1,PSTR("Saving ShiftData.. "));
    96ec:	81 e0       	ldi	r24, 0x01	; 1
    96ee:	61 e0       	ldi	r22, 0x01	; 1
    96f0:	42 ed       	ldi	r20, 0xD2	; 210
    96f2:	56 e1       	ldi	r21, 0x16	; 22
    96f4:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
	      if (ShiftType==CONTINUE_SHIFT)//Shift=Shift+1
    96f8:	12 30       	cpi	r17, 0x02	; 2
    96fa:	49 f4       	brne	.+18     	; 0x970e <FCloseShift+0x414>
		      eeprom_write_byte(&DefShift,eeprom_read_byte(&DefShift)+1);	 
    96fc:	8f e3       	ldi	r24, 0x3F	; 63
    96fe:	91 e0       	ldi	r25, 0x01	; 1
    9700:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
    9704:	68 2f       	mov	r22, r24
    9706:	6f 5f       	subi	r22, 0xFF	; 255
    9708:	8f e3       	ldi	r24, 0x3F	; 63
    970a:	91 e0       	ldi	r25, 0x01	; 1
    970c:	05 c0       	rjmp	.+10     	; 0x9718 <FCloseShift+0x41e>
          else if (ShiftType==NEW_SHIFT)//Shift=1
    970e:	11 30       	cpi	r17, 0x01	; 1
    9710:	29 f4       	brne	.+10     	; 0x971c <FCloseShift+0x422>
		      eeprom_write_byte(&DefShift,1);	 
    9712:	8f e3       	ldi	r24, 0x3F	; 63
    9714:	91 e0       	ldi	r25, 0x01	; 1
    9716:	61 e0       	ldi	r22, 0x01	; 1
    9718:	0e 94 db ac 	call	0x159b6	; 0x159b6 <__eewr_byte_m128>

          SaveTotalizerCurrentToLast();
    971c:	0e 94 31 2a 	call	0x5462	; 0x5462 <SaveTotalizerCurrentToLast>
          eeprom_write_block((const void*) &CurrentShiftDateTime, (void*) &DefLastShiftDateTime,sizeof(DefLastShiftDateTime));
    9720:	8e e8       	ldi	r24, 0x8E	; 142
    9722:	97 e0       	ldi	r25, 0x07	; 7
    9724:	63 e4       	ldi	r22, 0x43	; 67
    9726:	78 e0       	ldi	r23, 0x08	; 8
    9728:	44 e1       	ldi	r20, 0x14	; 20
    972a:	50 e0       	ldi	r21, 0x00	; 0
    972c:	0e 94 d1 ac 	call	0x159a2	; 0x159a2 <__eewr_block_m128>
		  stCloseShift=csFinishCloseShift;
    9730:	8b e0       	ldi	r24, 0x0B	; 11
    9732:	80 93 49 02 	sts	0x0249, r24
    9736:	04 c0       	rjmp	.+8      	; 0x9740 <FCloseShift+0x446>
	      break;
     case csFinishCloseShift:
          stCloseShift=csInitCloseShift;
    9738:	10 92 49 02 	sts	0x0249, r1
    973c:	81 e0       	ldi	r24, 0x01	; 1
    973e:	01 c0       	rjmp	.+2      	; 0x9742 <FCloseShift+0x448>
    9740:	80 e0       	ldi	r24, 0x00	; 0
		  Result=MENU_DONE;
	      break;
	 }
	 //uart_printf(0,1,PSTR("Close Shift"));	
   return Result;
}
    9742:	64 96       	adiw	r28, 0x14	; 20
    9744:	0f b6       	in	r0, 0x3f	; 63
    9746:	f8 94       	cli
    9748:	de bf       	out	0x3e, r29	; 62
    974a:	0f be       	out	0x3f, r0	; 63
    974c:	cd bf       	out	0x3d, r28	; 61
    974e:	cf 91       	pop	r28
    9750:	df 91       	pop	r29
    9752:	1f 91       	pop	r17
    9754:	0f 91       	pop	r16
    9756:	ff 90       	pop	r15
    9758:	ef 90       	pop	r14
    975a:	df 90       	pop	r13
    975c:	08 95       	ret

0000975e <_menu_host>:
			lcd_print(__x, __y, __buff);
		}
	}
}

void _menu_host(void){
    975e:	4f 92       	push	r4
    9760:	5f 92       	push	r5
    9762:	6f 92       	push	r6
    9764:	7f 92       	push	r7
    9766:	8f 92       	push	r8
    9768:	9f 92       	push	r9
    976a:	bf 92       	push	r11
    976c:	cf 92       	push	r12
    976e:	df 92       	push	r13
    9770:	ef 92       	push	r14
    9772:	ff 92       	push	r15
    9774:	0f 93       	push	r16
    9776:	1f 93       	push	r17
    9778:	df 93       	push	r29
    977a:	cf 93       	push	r28
    977c:	cd b7       	in	r28, 0x3d	; 61
    977e:	de b7       	in	r29, 0x3e	; 62
    9780:	6d 97       	sbiw	r28, 0x1d	; 29
    9782:	0f b6       	in	r0, 0x3f	; 63
    9784:	f8 94       	cli
    9786:	de bf       	out	0x3e, r29	; 62
    9788:	0f be       	out	0x3f, r0	; 63
    978a:	cd bf       	out	0x3d, r28	; 61
	char 			__value[4];
	unsigned char	__i, __x, __y, __key, __num, __buff[5];
	char lcdteks[20];
	char TermID;

	__value[0] = eeprom_read_byte(&DefPrintMoney);
    978c:	81 ec       	ldi	r24, 0xC1	; 193
    978e:	93 e0       	ldi	r25, 0x03	; 3
    9790:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
    9794:	89 83       	std	Y+1, r24	; 0x01
	__value[1] = eeprom_read_byte(&DefShowDateTime);
    9796:	87 e3       	ldi	r24, 0x37	; 55
    9798:	90 e0       	ldi	r25, 0x00	; 0
    979a:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
    979e:	8a 83       	std	Y+2, r24	; 0x02
	__value[2] = eeprom_read_byte(&DefNotifScreen);
    97a0:	88 e3       	ldi	r24, 0x38	; 56
    97a2:	90 e0       	ldi	r25, 0x00	; 0
    97a4:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
    97a8:	8b 83       	std	Y+3, r24	; 0x03
	TermID= eeprom_read_byte(&DefIFT_ID);
    97aa:	80 e0       	ldi	r24, 0x00	; 0
    97ac:	90 e0       	ldi	r25, 0x00	; 0
    97ae:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
    97b2:	b8 2e       	mov	r11, r24


	lcd_clear();_delay_ms(10);
    97b4:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
    97b8:	84 ec       	ldi	r24, 0xC4	; 196
    97ba:	99 e0       	ldi	r25, 0x09	; 9
    97bc:	01 97       	sbiw	r24, 0x01	; 1
    97be:	f1 f7       	brne	.-4      	; 0x97bc <_menu_host+0x5e>
	lcd_printf(1, 1, PSTR("1)Money :"));
    97c0:	81 e0       	ldi	r24, 0x01	; 1
    97c2:	61 e0       	ldi	r22, 0x01	; 1
    97c4:	4c eb       	ldi	r20, 0xBC	; 188
    97c6:	5c e0       	ldi	r21, 0x0C	; 12
    97c8:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
	lcd_printf(2, 1, PSTR("2)D/T   :"));
    97cc:	82 e0       	ldi	r24, 0x02	; 2
    97ce:	61 e0       	ldi	r22, 0x01	; 1
    97d0:	42 eb       	ldi	r20, 0xB2	; 178
    97d2:	5c e0       	ldi	r21, 0x0C	; 12
    97d4:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
	lcd_printf(3, 1, PSTR("3)Notif :     *)Exit"));
    97d8:	83 e0       	ldi	r24, 0x03	; 3
    97da:	61 e0       	ldi	r22, 0x01	; 1
    97dc:	4d e9       	ldi	r20, 0x9D	; 157
    97de:	5c e0       	ldi	r21, 0x0C	; 12
    97e0:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
    sprintf_P(lcdteks,PSTR("4)TermID:%d "),TermID);
    97e4:	00 d0       	rcall	.+0      	; 0x97e6 <_menu_host+0x88>
    97e6:	00 d0       	rcall	.+0      	; 0x97e8 <_menu_host+0x8a>
    97e8:	00 d0       	rcall	.+0      	; 0x97ea <_menu_host+0x8c>
    97ea:	ed b7       	in	r30, 0x3d	; 61
    97ec:	fe b7       	in	r31, 0x3e	; 62
    97ee:	31 96       	adiw	r30, 0x01	; 1
    97f0:	8e 01       	movw	r16, r28
    97f2:	06 5f       	subi	r16, 0xF6	; 246
    97f4:	1f 4f       	sbci	r17, 0xFF	; 255
    97f6:	ad b7       	in	r26, 0x3d	; 61
    97f8:	be b7       	in	r27, 0x3e	; 62
    97fa:	12 96       	adiw	r26, 0x02	; 2
    97fc:	1c 93       	st	X, r17
    97fe:	0e 93       	st	-X, r16
    9800:	11 97       	sbiw	r26, 0x01	; 1
    9802:	80 e9       	ldi	r24, 0x90	; 144
    9804:	9c e0       	ldi	r25, 0x0C	; 12
    9806:	93 83       	std	Z+3, r25	; 0x03
    9808:	82 83       	std	Z+2, r24	; 0x02
    980a:	b4 82       	std	Z+4, r11	; 0x04
    980c:	15 82       	std	Z+5, r1	; 0x05
    980e:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	lcd_print(4, 1,lcdteks);
    9812:	ed b7       	in	r30, 0x3d	; 61
    9814:	fe b7       	in	r31, 0x3e	; 62
    9816:	36 96       	adiw	r30, 0x06	; 6
    9818:	0f b6       	in	r0, 0x3f	; 63
    981a:	f8 94       	cli
    981c:	fe bf       	out	0x3e, r31	; 62
    981e:	0f be       	out	0x3f, r0	; 63
    9820:	ed bf       	out	0x3d, r30	; 61
    9822:	84 e0       	ldi	r24, 0x04	; 4
    9824:	61 e0       	ldi	r22, 0x01	; 1
    9826:	a8 01       	movw	r20, r16
    9828:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
	lcd_printf(4, 15, PSTR("#)Save"));
    982c:	84 e0       	ldi	r24, 0x04	; 4
    982e:	6f e0       	ldi	r22, 0x0F	; 15
    9830:	49 e8       	ldi	r20, 0x89	; 137
    9832:	5c e0       	ldi	r21, 0x0C	; 12
    9834:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
    9838:	e2 ed       	ldi	r30, 0xD2	; 210
    983a:	ee 2e       	mov	r14, r30
    983c:	e2 e0       	ldi	r30, 0x02	; 2
    983e:	fe 2e       	mov	r15, r30
    9840:	6e 01       	movw	r12, r28
    9842:	08 94       	sec
    9844:	c1 1c       	adc	r12, r1
    9846:	d1 1c       	adc	r13, r1

	for(__i = 0; __i < 3; __i++){
		__x = pgm_read_byte(&__hostloc[__i][0]);
		__y = pgm_read_byte(&__hostloc[__i][1]);
		sprintf_P(__buff,PSTR("%d"),__value[__i]);
    9848:	75 e0       	ldi	r23, 0x05	; 5
    984a:	87 2e       	mov	r8, r23
    984c:	91 2c       	mov	r9, r1
    984e:	8c 0e       	add	r8, r28
    9850:	9d 1e       	adc	r9, r29
    9852:	66 e8       	ldi	r22, 0x86	; 134
    9854:	66 2e       	mov	r6, r22
    9856:	6c e0       	ldi	r22, 0x0C	; 12
    9858:	76 2e       	mov	r7, r22
    sprintf_P(lcdteks,PSTR("4)TermID:%d "),TermID);
	lcd_print(4, 1,lcdteks);
	lcd_printf(4, 15, PSTR("#)Save"));

	for(__i = 0; __i < 3; __i++){
		__x = pgm_read_byte(&__hostloc[__i][0]);
    985a:	f7 01       	movw	r30, r14
    985c:	04 91       	lpm	r16, Z+
		__y = pgm_read_byte(&__hostloc[__i][1]);
    985e:	08 94       	sec
    9860:	e1 1c       	adc	r14, r1
    9862:	f1 1c       	adc	r15, r1
    9864:	f7 01       	movw	r30, r14
    9866:	14 91       	lpm	r17, Z+
		sprintf_P(__buff,PSTR("%d"),__value[__i]);
    9868:	00 d0       	rcall	.+0      	; 0x986a <_menu_host+0x10c>
    986a:	00 d0       	rcall	.+0      	; 0x986c <_menu_host+0x10e>
    986c:	00 d0       	rcall	.+0      	; 0x986e <_menu_host+0x110>
    986e:	ed b7       	in	r30, 0x3d	; 61
    9870:	fe b7       	in	r31, 0x3e	; 62
    9872:	31 96       	adiw	r30, 0x01	; 1
    9874:	ad b7       	in	r26, 0x3d	; 61
    9876:	be b7       	in	r27, 0x3e	; 62
    9878:	12 96       	adiw	r26, 0x02	; 2
    987a:	9c 92       	st	X, r9
    987c:	8e 92       	st	-X, r8
    987e:	11 97       	sbiw	r26, 0x01	; 1
    9880:	73 82       	std	Z+3, r7	; 0x03
    9882:	62 82       	std	Z+2, r6	; 0x02
    9884:	d6 01       	movw	r26, r12
    9886:	8d 91       	ld	r24, X+
    9888:	6d 01       	movw	r12, r26
    988a:	84 83       	std	Z+4, r24	; 0x04
    988c:	15 82       	std	Z+5, r1	; 0x05
    988e:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
		//_f_inttostr(__buff, __value[__i]);
		lcd_print(__x, __y, __buff);
    9892:	ed b7       	in	r30, 0x3d	; 61
    9894:	fe b7       	in	r31, 0x3e	; 62
    9896:	36 96       	adiw	r30, 0x06	; 6
    9898:	0f b6       	in	r0, 0x3f	; 63
    989a:	f8 94       	cli
    989c:	fe bf       	out	0x3e, r31	; 62
    989e:	0f be       	out	0x3f, r0	; 63
    98a0:	ed bf       	out	0x3d, r30	; 61
    98a2:	80 2f       	mov	r24, r16
    98a4:	61 2f       	mov	r22, r17
    98a6:	a4 01       	movw	r20, r8
    98a8:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
    98ac:	08 94       	sec
    98ae:	e1 1c       	adc	r14, r1
    98b0:	f1 1c       	adc	r15, r1
	lcd_printf(3, 1, PSTR("3)Notif :     *)Exit"));
    sprintf_P(lcdteks,PSTR("4)TermID:%d "),TermID);
	lcd_print(4, 1,lcdteks);
	lcd_printf(4, 15, PSTR("#)Save"));

	for(__i = 0; __i < 3; __i++){
    98b2:	f8 ed       	ldi	r31, 0xD8	; 216
    98b4:	ef 16       	cp	r14, r31
    98b6:	f2 e0       	ldi	r31, 0x02	; 2
    98b8:	ff 06       	cpc	r15, r31
    98ba:	79 f6       	brne	.-98     	; 0x985a <_menu_host+0xfc>
			lcd_print(__x, __y, __buff);
		}else
		if (__num=='4'){
		    if (TermID<=99)TermID++;
			else TermID=1;
	     sprintf_P(lcdteks,PSTR("4)TermID:%d "),TermID);
    98bc:	5a e0       	ldi	r21, 0x0A	; 10
    98be:	85 2e       	mov	r8, r21
    98c0:	91 2c       	mov	r9, r1
    98c2:	8c 0e       	add	r8, r28
    98c4:	9d 1e       	adc	r9, r29
    98c6:	46 e7       	ldi	r20, 0x76	; 118
    98c8:	44 2e       	mov	r4, r20
    98ca:	4c e0       	ldi	r20, 0x0C	; 12
    98cc:	54 2e       	mov	r5, r20
			eeprom_write_byte(&DefNotifScreen, __value[2]);
			eeprom_write_byte(&DefIFT_ID,TermID);
			break;
		}
		if(__num >= 0x31 && __num <= 0x33){
			if(__value[__num - 0x31] == 1)
    98ce:	6e 01       	movw	r12, r28
    98d0:	08 94       	sec
    98d2:	c1 1c       	adc	r12, r1
    98d4:	d1 1c       	adc	r13, r1
				__value[__num - 0x31] = 0;
			else
				__value[__num - 0x31]++;
			__x = pgm_read_byte(&__hostloc[__num - 0x31][0]);
			__y = pgm_read_byte(&__hostloc[__num - 0x31][1]);
			sprintf_P(__buff,PSTR("%d"),__value[__num - 0x31]);
    98d6:	35 e0       	ldi	r19, 0x05	; 5
    98d8:	e3 2e       	mov	r14, r19
    98da:	f1 2c       	mov	r15, r1
    98dc:	ec 0e       	add	r14, r28
    98de:	fd 1e       	adc	r15, r29
    98e0:	23 e8       	ldi	r18, 0x83	; 131
    98e2:	62 2e       	mov	r6, r18
    98e4:	2c e0       	ldi	r18, 0x0C	; 12
    98e6:	72 2e       	mov	r7, r18
		//_f_inttostr(__buff, __value[__i]);
		lcd_print(__x, __y, __buff);
	}

	while(1){
		__key = _key_scan(1);
    98e8:	81 e0       	ldi	r24, 0x01	; 1
    98ea:	0e 94 f6 a5 	call	0x14bec	; 0x14bec <_key_scan>
    98ee:	18 2f       	mov	r17, r24
		__num = _key_btn(__key);
    98f0:	0e 94 57 a5 	call	0x14aae	; 0x14aae <_key_btn>
    98f4:	98 2f       	mov	r25, r24

		if(__key == _KEY_CANCEL)
    98f6:	17 3e       	cpi	r17, 0xE7	; 231
    98f8:	09 f4       	brne	.+2      	; 0x98fc <_menu_host+0x19e>
    98fa:	8a c0       	rjmp	.+276    	; 0x9a10 <_menu_host+0x2b2>
			return;
		if(__key==_KEY_ENTER){
    98fc:	17 3b       	cpi	r17, 0xB7	; 183
    98fe:	a9 f4       	brne	.+42     	; 0x992a <_menu_host+0x1cc>
			eeprom_write_byte(&DefPrintMoney, __value[0]);
    9900:	81 ec       	ldi	r24, 0xC1	; 193
    9902:	93 e0       	ldi	r25, 0x03	; 3
    9904:	69 81       	ldd	r22, Y+1	; 0x01
    9906:	0e 94 db ac 	call	0x159b6	; 0x159b6 <__eewr_byte_m128>
			eeprom_write_byte(&DefShowDateTime, __value[1]);
    990a:	87 e3       	ldi	r24, 0x37	; 55
    990c:	90 e0       	ldi	r25, 0x00	; 0
    990e:	6a 81       	ldd	r22, Y+2	; 0x02
    9910:	0e 94 db ac 	call	0x159b6	; 0x159b6 <__eewr_byte_m128>
			eeprom_write_byte(&DefNotifScreen, __value[2]);
    9914:	88 e3       	ldi	r24, 0x38	; 56
    9916:	90 e0       	ldi	r25, 0x00	; 0
    9918:	6b 81       	ldd	r22, Y+3	; 0x03
    991a:	0e 94 db ac 	call	0x159b6	; 0x159b6 <__eewr_byte_m128>
			eeprom_write_byte(&DefIFT_ID,TermID);
    991e:	80 e0       	ldi	r24, 0x00	; 0
    9920:	90 e0       	ldi	r25, 0x00	; 0
    9922:	6b 2d       	mov	r22, r11
    9924:	0e 94 db ac 	call	0x159b6	; 0x159b6 <__eewr_byte_m128>
    9928:	73 c0       	rjmp	.+230    	; 0x9a10 <_menu_host+0x2b2>
			break;
		}
		if(__num >= 0x31 && __num <= 0x33){
    992a:	81 53       	subi	r24, 0x31	; 49
    992c:	83 30       	cpi	r24, 0x03	; 3
    992e:	08 f0       	brcs	.+2      	; 0x9932 <_menu_host+0x1d4>
    9930:	3f c0       	rjmp	.+126    	; 0x99b0 <_menu_host+0x252>
			if(__value[__num - 0x31] == 1)
    9932:	a9 2f       	mov	r26, r25
    9934:	b0 e0       	ldi	r27, 0x00	; 0
    9936:	d1 97       	sbiw	r26, 0x31	; 49
    9938:	f6 01       	movw	r30, r12
    993a:	ea 0f       	add	r30, r26
    993c:	fb 1f       	adc	r31, r27
    993e:	80 81       	ld	r24, Z
    9940:	81 30       	cpi	r24, 0x01	; 1
    9942:	11 f4       	brne	.+4      	; 0x9948 <_menu_host+0x1ea>
				__value[__num - 0x31] = 0;
    9944:	10 82       	st	Z, r1
    9946:	02 c0       	rjmp	.+4      	; 0x994c <_menu_host+0x1ee>
			else
				__value[__num - 0x31]++;
    9948:	8f 5f       	subi	r24, 0xFF	; 255
    994a:	80 83       	st	Z, r24
			__x = pgm_read_byte(&__hostloc[__num - 0x31][0]);
    994c:	29 2f       	mov	r18, r25
    994e:	30 e0       	ldi	r19, 0x00	; 0
    9950:	21 53       	subi	r18, 0x31	; 49
    9952:	30 40       	sbci	r19, 0x00	; 0
    9954:	22 0f       	add	r18, r18
    9956:	33 1f       	adc	r19, r19
    9958:	c9 01       	movw	r24, r18
    995a:	8e 52       	subi	r24, 0x2E	; 46
    995c:	9d 4f       	sbci	r25, 0xFD	; 253
    995e:	fc 01       	movw	r30, r24
    9960:	04 91       	lpm	r16, Z+
			__y = pgm_read_byte(&__hostloc[__num - 0x31][1]);
    9962:	2d 52       	subi	r18, 0x2D	; 45
    9964:	3d 4f       	sbci	r19, 0xFD	; 253
    9966:	f9 01       	movw	r30, r18
    9968:	14 91       	lpm	r17, Z+
			sprintf_P(__buff,PSTR("%d"),__value[__num - 0x31]);
    996a:	00 d0       	rcall	.+0      	; 0x996c <_menu_host+0x20e>
    996c:	00 d0       	rcall	.+0      	; 0x996e <_menu_host+0x210>
    996e:	00 d0       	rcall	.+0      	; 0x9970 <_menu_host+0x212>
    9970:	2d b7       	in	r18, 0x3d	; 61
    9972:	3e b7       	in	r19, 0x3e	; 62
    9974:	2f 5f       	subi	r18, 0xFF	; 255
    9976:	3f 4f       	sbci	r19, 0xFF	; 255
    9978:	ed b7       	in	r30, 0x3d	; 61
    997a:	fe b7       	in	r31, 0x3e	; 62
    997c:	f2 82       	std	Z+2, r15	; 0x02
    997e:	e1 82       	std	Z+1, r14	; 0x01
    9980:	f9 01       	movw	r30, r18
    9982:	73 82       	std	Z+3, r7	; 0x03
    9984:	62 82       	std	Z+2, r6	; 0x02
    9986:	ac 0d       	add	r26, r12
    9988:	bd 1d       	adc	r27, r13
    998a:	8c 91       	ld	r24, X
    998c:	84 83       	std	Z+4, r24	; 0x04
    998e:	15 82       	std	Z+5, r1	; 0x05
    9990:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
			//_f_inttostr(__buff, __value[__num - 0x31]);
			lcd_print(__x, __y, __buff);
    9994:	8d b7       	in	r24, 0x3d	; 61
    9996:	9e b7       	in	r25, 0x3e	; 62
    9998:	06 96       	adiw	r24, 0x06	; 6
    999a:	0f b6       	in	r0, 0x3f	; 63
    999c:	f8 94       	cli
    999e:	9e bf       	out	0x3e, r25	; 62
    99a0:	0f be       	out	0x3f, r0	; 63
    99a2:	8d bf       	out	0x3d, r24	; 61
    99a4:	80 2f       	mov	r24, r16
    99a6:	61 2f       	mov	r22, r17
    99a8:	a7 01       	movw	r20, r14
    99aa:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
    99ae:	9c cf       	rjmp	.-200    	; 0x98e8 <_menu_host+0x18a>
		}else
		if (__num=='4'){
    99b0:	94 33       	cpi	r25, 0x34	; 52
    99b2:	09 f0       	breq	.+2      	; 0x99b6 <_menu_host+0x258>
    99b4:	99 cf       	rjmp	.-206    	; 0x98e8 <_menu_host+0x18a>
		    if (TermID<=99)TermID++;
    99b6:	93 e6       	ldi	r25, 0x63	; 99
    99b8:	9b 15       	cp	r25, r11
    99ba:	18 f4       	brcc	.+6      	; 0x99c2 <_menu_host+0x264>
    99bc:	bb 24       	eor	r11, r11
    99be:	b3 94       	inc	r11
    99c0:	01 c0       	rjmp	.+2      	; 0x99c4 <_menu_host+0x266>
    99c2:	b3 94       	inc	r11
			else TermID=1;
	     sprintf_P(lcdteks,PSTR("4)TermID:%d "),TermID);
    99c4:	00 d0       	rcall	.+0      	; 0x99c6 <_menu_host+0x268>
    99c6:	00 d0       	rcall	.+0      	; 0x99c8 <_menu_host+0x26a>
    99c8:	00 d0       	rcall	.+0      	; 0x99ca <_menu_host+0x26c>
    99ca:	ed b7       	in	r30, 0x3d	; 61
    99cc:	fe b7       	in	r31, 0x3e	; 62
    99ce:	31 96       	adiw	r30, 0x01	; 1
    99d0:	ad b7       	in	r26, 0x3d	; 61
    99d2:	be b7       	in	r27, 0x3e	; 62
    99d4:	12 96       	adiw	r26, 0x02	; 2
    99d6:	9c 92       	st	X, r9
    99d8:	8e 92       	st	-X, r8
    99da:	11 97       	sbiw	r26, 0x01	; 1
    99dc:	53 82       	std	Z+3, r5	; 0x03
    99de:	42 82       	std	Z+2, r4	; 0x02
    99e0:	b4 82       	std	Z+4, r11	; 0x04
    99e2:	15 82       	std	Z+5, r1	; 0x05
    99e4:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
		 lcd_print(4, 1,lcdteks);lcd_printf(4, 15, PSTR("#)Save"));
    99e8:	ed b7       	in	r30, 0x3d	; 61
    99ea:	fe b7       	in	r31, 0x3e	; 62
    99ec:	36 96       	adiw	r30, 0x06	; 6
    99ee:	0f b6       	in	r0, 0x3f	; 63
    99f0:	f8 94       	cli
    99f2:	fe bf       	out	0x3e, r31	; 62
    99f4:	0f be       	out	0x3f, r0	; 63
    99f6:	ed bf       	out	0x3d, r30	; 61
    99f8:	84 e0       	ldi	r24, 0x04	; 4
    99fa:	61 e0       	ldi	r22, 0x01	; 1
    99fc:	a4 01       	movw	r20, r8
    99fe:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
    9a02:	84 e0       	ldi	r24, 0x04	; 4
    9a04:	6f e0       	ldi	r22, 0x0F	; 15
    9a06:	4f e6       	ldi	r20, 0x6F	; 111
    9a08:	5c e0       	ldi	r21, 0x0C	; 12
    9a0a:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
    9a0e:	6c cf       	rjmp	.-296    	; 0x98e8 <_menu_host+0x18a>
		 
		}

	}
}
    9a10:	6d 96       	adiw	r28, 0x1d	; 29
    9a12:	0f b6       	in	r0, 0x3f	; 63
    9a14:	f8 94       	cli
    9a16:	de bf       	out	0x3e, r29	; 62
    9a18:	0f be       	out	0x3f, r0	; 63
    9a1a:	cd bf       	out	0x3d, r28	; 61
    9a1c:	cf 91       	pop	r28
    9a1e:	df 91       	pop	r29
    9a20:	1f 91       	pop	r17
    9a22:	0f 91       	pop	r16
    9a24:	ff 90       	pop	r15
    9a26:	ef 90       	pop	r14
    9a28:	df 90       	pop	r13
    9a2a:	cf 90       	pop	r12
    9a2c:	bf 90       	pop	r11
    9a2e:	9f 90       	pop	r9
    9a30:	8f 90       	pop	r8
    9a32:	7f 90       	pop	r7
    9a34:	6f 90       	pop	r6
    9a36:	5f 90       	pop	r5
    9a38:	4f 90       	pop	r4
    9a3a:	08 95       	ret

00009a3c <FSettingHost>:
char FSettingPrinter(){
     _menu_printer();
	 return MENU_DONE;
}
char FSettingHost(){
     _menu_host();
    9a3c:	0e 94 af 4b 	call	0x975e	; 0x975e <_menu_host>
	 return MENU_DONE;
}
    9a40:	81 e0       	ldi	r24, 0x01	; 1
    9a42:	08 95       	ret

00009a44 <_menu_printer>:
}

//*************************************************************************
//  ngeset printer

void _menu_printer(void){
    9a44:	2f 92       	push	r2
    9a46:	3f 92       	push	r3
    9a48:	4f 92       	push	r4
    9a4a:	5f 92       	push	r5
    9a4c:	6f 92       	push	r6
    9a4e:	7f 92       	push	r7
    9a50:	8f 92       	push	r8
    9a52:	9f 92       	push	r9
    9a54:	af 92       	push	r10
    9a56:	bf 92       	push	r11
    9a58:	cf 92       	push	r12
    9a5a:	df 92       	push	r13
    9a5c:	ef 92       	push	r14
    9a5e:	ff 92       	push	r15
    9a60:	0f 93       	push	r16
    9a62:	1f 93       	push	r17
    9a64:	df 93       	push	r29
    9a66:	cf 93       	push	r28
    9a68:	cd b7       	in	r28, 0x3d	; 61
    9a6a:	de b7       	in	r29, 0x3e	; 62
    9a6c:	2c 97       	sbiw	r28, 0x0c	; 12
    9a6e:	0f b6       	in	r0, 0x3f	; 63
    9a70:	f8 94       	cli
    9a72:	de bf       	out	0x3e, r29	; 62
    9a74:	0f be       	out	0x3f, r0	; 63
    9a76:	cd bf       	out	0x3d, r28	; 61
	char 			__value[6];
	char	__i, __x, __y, __lmt, __start, __key, __num, __buff[6];
//	char lcdteks[20];

	__value[0] = eeprom_read_byte(&DefPrinterType);
    9a78:	80 e3       	ldi	r24, 0x30	; 48
    9a7a:	90 e0       	ldi	r25, 0x00	; 0
    9a7c:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
    9a80:	89 83       	std	Y+1, r24	; 0x01
	__value[1] = eeprom_read_byte(&DefPrintSize);
    9a82:	85 e3       	ldi	r24, 0x35	; 53
    9a84:	90 e0       	ldi	r25, 0x00	; 0
    9a86:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
    9a8a:	8a 83       	std	Y+2, r24	; 0x02
	__value[2] = eeprom_read_byte(&DefPrintLogo);
    9a8c:	84 e3       	ldi	r24, 0x34	; 52
    9a8e:	90 e0       	ldi	r25, 0x00	; 0
    9a90:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
    9a94:	8b 83       	std	Y+3, r24	; 0x03
	__value[3] = eeprom_read_byte(&DefPrintAutoCut);
    9a96:	83 e3       	ldi	r24, 0x33	; 51
    9a98:	90 e0       	ldi	r25, 0x00	; 0
    9a9a:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
    9a9e:	8c 83       	std	Y+4, r24	; 0x04
	__value[4] = eeprom_read_byte(&DefPrintScrollEnd);
    9aa0:	81 e3       	ldi	r24, 0x31	; 49
    9aa2:	90 e0       	ldi	r25, 0x00	; 0
    9aa4:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
    9aa8:	8d 83       	std	Y+5, r24	; 0x05
	__value[5] = eeprom_read_byte(&DefPrintScrollSpace);
    9aaa:	82 e3       	ldi	r24, 0x32	; 50
    9aac:	90 e0       	ldi	r25, 0x00	; 0
    9aae:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
    9ab2:	8e 83       	std	Y+6, r24	; 0x06

	lcd_clear();
    9ab4:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
	lcd_printf(1, 1, PSTR("1)Type:  5)Scroll:"));
    9ab8:	81 e0       	ldi	r24, 0x01	; 1
    9aba:	61 e0       	ldi	r22, 0x01	; 1
    9abc:	49 e0       	ldi	r20, 0x09	; 9
    9abe:	5d e0       	ldi	r21, 0x0D	; 13
    9ac0:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
	lcd_printf(2, 1, PSTR("2)Size:  6)Space :"));
    9ac4:	82 e0       	ldi	r24, 0x02	; 2
    9ac6:	61 e0       	ldi	r22, 0x01	; 1
    9ac8:	46 ef       	ldi	r20, 0xF6	; 246
    9aca:	5c e0       	ldi	r21, 0x0C	; 12
    9acc:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
	lcd_printf(3, 1, PSTR("3)Logo:  #)Save"));
    9ad0:	83 e0       	ldi	r24, 0x03	; 3
    9ad2:	61 e0       	ldi	r22, 0x01	; 1
    9ad4:	46 ee       	ldi	r20, 0xE6	; 230
    9ad6:	5c e0       	ldi	r21, 0x0C	; 12
    9ad8:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
	lcd_printf(4, 1, PSTR("4)Cut :  *)Exit"));
    9adc:	84 e0       	ldi	r24, 0x04	; 4
    9ade:	61 e0       	ldi	r22, 0x01	; 1
    9ae0:	46 ed       	ldi	r20, 0xD6	; 214
    9ae2:	5c e0       	ldi	r21, 0x0C	; 12
    9ae4:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
    9ae8:	0a eb       	ldi	r16, 0xBA	; 186
    9aea:	12 e0       	ldi	r17, 0x02	; 2
    9aec:	4e 01       	movw	r8, r28
    9aee:	08 94       	sec
    9af0:	81 1c       	adc	r8, r1
    9af2:	91 1c       	adc	r9, r1
    9af4:	74 01       	movw	r14, r8

	for(__i = 0; __i < 6; __i++){
		__x = pgm_read_byte(&__prntloc[__i][0]);
		__y = pgm_read_byte(&__prntloc[__i][1]);
        sprintf_P(__buff,PSTR("%d"),__value[__i]);
    9af6:	27 e0       	ldi	r18, 0x07	; 7
    9af8:	c2 2e       	mov	r12, r18
    9afa:	d1 2c       	mov	r13, r1
    9afc:	cc 0e       	add	r12, r28
    9afe:	dd 1e       	adc	r13, r29
    9b00:	93 ed       	ldi	r25, 0xD3	; 211
    9b02:	29 2e       	mov	r2, r25
    9b04:	9c e0       	ldi	r25, 0x0C	; 12
    9b06:	39 2e       	mov	r3, r25
		//_f_inttostr(__buff, __value[__i]);
		if(__i == 4) sprintf_P(__buff,PSTR("%.2d"),__value[__i]);
    9b08:	8e ec       	ldi	r24, 0xCE	; 206
    9b0a:	48 2e       	mov	r4, r24
    9b0c:	8c e0       	ldi	r24, 0x0C	; 12
    9b0e:	58 2e       	mov	r5, r24
	lcd_printf(2, 1, PSTR("2)Size:  6)Space :"));
	lcd_printf(3, 1, PSTR("3)Logo:  #)Save"));
	lcd_printf(4, 1, PSTR("4)Cut :  *)Exit"));

	for(__i = 0; __i < 6; __i++){
		__x = pgm_read_byte(&__prntloc[__i][0]);
    9b10:	f8 01       	movw	r30, r16
    9b12:	74 90       	lpm	r7, Z+
		__y = pgm_read_byte(&__prntloc[__i][1]);
    9b14:	0f 5f       	subi	r16, 0xFF	; 255
    9b16:	1f 4f       	sbci	r17, 0xFF	; 255
    9b18:	f8 01       	movw	r30, r16
    9b1a:	a4 90       	lpm	r10, Z+
    9b1c:	01 50       	subi	r16, 0x01	; 1
    9b1e:	10 40       	sbci	r17, 0x00	; 0
        sprintf_P(__buff,PSTR("%d"),__value[__i]);
    9b20:	d7 01       	movw	r26, r14
    9b22:	bc 90       	ld	r11, X
    9b24:	00 d0       	rcall	.+0      	; 0x9b26 <_menu_printer+0xe2>
    9b26:	00 d0       	rcall	.+0      	; 0x9b28 <_menu_printer+0xe4>
    9b28:	00 d0       	rcall	.+0      	; 0x9b2a <_menu_printer+0xe6>
    9b2a:	ed b7       	in	r30, 0x3d	; 61
    9b2c:	fe b7       	in	r31, 0x3e	; 62
    9b2e:	31 96       	adiw	r30, 0x01	; 1
    9b30:	ad b7       	in	r26, 0x3d	; 61
    9b32:	be b7       	in	r27, 0x3e	; 62
    9b34:	12 96       	adiw	r26, 0x02	; 2
    9b36:	dc 92       	st	X, r13
    9b38:	ce 92       	st	-X, r12
    9b3a:	11 97       	sbiw	r26, 0x01	; 1
    9b3c:	33 82       	std	Z+3, r3	; 0x03
    9b3e:	22 82       	std	Z+2, r2	; 0x02
    9b40:	b4 82       	std	Z+4, r11	; 0x04
    9b42:	15 82       	std	Z+5, r1	; 0x05
    9b44:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
		//_f_inttostr(__buff, __value[__i]);
		if(__i == 4) sprintf_P(__buff,PSTR("%.2d"),__value[__i]);
    9b48:	8e 2d       	mov	r24, r14
    9b4a:	88 19       	sub	r24, r8
    9b4c:	ed b7       	in	r30, 0x3d	; 61
    9b4e:	fe b7       	in	r31, 0x3e	; 62
    9b50:	36 96       	adiw	r30, 0x06	; 6
    9b52:	0f b6       	in	r0, 0x3f	; 63
    9b54:	f8 94       	cli
    9b56:	fe bf       	out	0x3e, r31	; 62
    9b58:	0f be       	out	0x3f, r0	; 63
    9b5a:	ed bf       	out	0x3d, r30	; 61
    9b5c:	84 30       	cpi	r24, 0x04	; 4
    9b5e:	d1 f4       	brne	.+52     	; 0x9b94 <_menu_printer+0x150>
    9b60:	00 d0       	rcall	.+0      	; 0x9b62 <_menu_printer+0x11e>
    9b62:	00 d0       	rcall	.+0      	; 0x9b64 <_menu_printer+0x120>
    9b64:	00 d0       	rcall	.+0      	; 0x9b66 <_menu_printer+0x122>
    9b66:	ed b7       	in	r30, 0x3d	; 61
    9b68:	fe b7       	in	r31, 0x3e	; 62
    9b6a:	31 96       	adiw	r30, 0x01	; 1
    9b6c:	ad b7       	in	r26, 0x3d	; 61
    9b6e:	be b7       	in	r27, 0x3e	; 62
    9b70:	12 96       	adiw	r26, 0x02	; 2
    9b72:	dc 92       	st	X, r13
    9b74:	ce 92       	st	-X, r12
    9b76:	11 97       	sbiw	r26, 0x01	; 1
    9b78:	53 82       	std	Z+3, r5	; 0x03
    9b7a:	42 82       	std	Z+2, r4	; 0x02
    9b7c:	b4 82       	std	Z+4, r11	; 0x04
    9b7e:	15 82       	std	Z+5, r1	; 0x05
    9b80:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
    9b84:	ed b7       	in	r30, 0x3d	; 61
    9b86:	fe b7       	in	r31, 0x3e	; 62
    9b88:	36 96       	adiw	r30, 0x06	; 6
    9b8a:	0f b6       	in	r0, 0x3f	; 63
    9b8c:	f8 94       	cli
    9b8e:	fe bf       	out	0x3e, r31	; 62
    9b90:	0f be       	out	0x3f, r0	; 63
    9b92:	ed bf       	out	0x3d, r30	; 61
		//_f_punctuation(__buff, 0, 2, 0);
		lcd_print(__x, __y, __buff);
    9b94:	87 2d       	mov	r24, r7
    9b96:	6a 2d       	mov	r22, r10
    9b98:	a6 01       	movw	r20, r12
    9b9a:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
    9b9e:	0e 5f       	subi	r16, 0xFE	; 254
    9ba0:	1f 4f       	sbci	r17, 0xFF	; 255
    9ba2:	08 94       	sec
    9ba4:	e1 1c       	adc	r14, r1
    9ba6:	f1 1c       	adc	r15, r1
	lcd_printf(1, 1, PSTR("1)Type:  5)Scroll:"));
	lcd_printf(2, 1, PSTR("2)Size:  6)Space :"));
	lcd_printf(3, 1, PSTR("3)Logo:  #)Save"));
	lcd_printf(4, 1, PSTR("4)Cut :  *)Exit"));

	for(__i = 0; __i < 6; __i++){
    9ba8:	f2 e0       	ldi	r31, 0x02	; 2
    9baa:	06 3c       	cpi	r16, 0xC6	; 198
    9bac:	1f 07       	cpc	r17, r31
    9bae:	09 f0       	breq	.+2      	; 0x9bb2 <_menu_printer+0x16e>
    9bb0:	af cf       	rjmp	.-162    	; 0x9b10 <_menu_printer+0xcc>

		}
		if(__num >= 0x31 && __num <= 0x36){
			__lmt = pgm_read_byte(&__prntlmt[__num - 0x31]);
			__start = pgm_read_byte(&__prntstr[__num - 0x31]);
			if(__value[__num - 0x31] == __lmt)
    9bb2:	2e 01       	movw	r4, r28
    9bb4:	08 94       	sec
    9bb6:	41 1c       	adc	r4, r1
    9bb8:	51 1c       	adc	r5, r1
				__value[__num - 0x31] = __start;
			else
				__value[__num - 0x31]++;
			__x = pgm_read_byte(&__prntloc[__num - 0x31][0]);
			__y = pgm_read_byte(&__prntloc[__num - 0x31][1]);
			sprintf_P(__buff,PSTR("%d"),__value[__num - 0x31]);
    9bba:	17 e0       	ldi	r17, 0x07	; 7
    9bbc:	e1 2e       	mov	r14, r17
    9bbe:	f1 2c       	mov	r15, r1
    9bc0:	ec 0e       	add	r14, r28
    9bc2:	fd 1e       	adc	r15, r29
    9bc4:	bb ec       	ldi	r27, 0xCB	; 203
    9bc6:	6b 2e       	mov	r6, r27
    9bc8:	bc e0       	ldi	r27, 0x0C	; 12
    9bca:	7b 2e       	mov	r7, r27
			//_f_inttostr(__buff, __value[__num - 0x31]);
			if((__num == 0x35)||(__num == 0x36))
			   sprintf_P(__buff,PSTR("%.2d"),__value[__num - 0x31]);
    9bcc:	a6 ec       	ldi	r26, 0xC6	; 198
    9bce:	2a 2e       	mov	r2, r26
    9bd0:	ac e0       	ldi	r26, 0x0C	; 12
    9bd2:	3a 2e       	mov	r3, r26
		__key = _key_scan(1);
		__num = _key_btn(__key);
		if(__key == _KEY_CANCEL)
			return;
		if(__key==_KEY_ENTER){
			eeprom_write_byte(&DefPrinterType, __value[0]);
    9bd4:	89 80       	ldd	r8, Y+1	; 0x01
			eeprom_write_byte(&DefPrintSize, __value[1]);
    9bd6:	9a 80       	ldd	r9, Y+2	; 0x02
			eeprom_write_byte(&DefPrintLogo, __value[2]);
    9bd8:	ab 80       	ldd	r10, Y+3	; 0x03
			eeprom_write_byte(&DefPrintAutoCut, __value[3]);
    9bda:	bc 80       	ldd	r11, Y+4	; 0x04
			eeprom_write_byte(&DefPrintScrollEnd, __value[4]);
    9bdc:	cd 80       	ldd	r12, Y+5	; 0x05
			eeprom_write_byte(&DefPrintScrollSpace, __value[5]);
    9bde:	de 80       	ldd	r13, Y+6	; 0x06
	}
    //sprintf_P(lcdteks,PSTR("6)Space :%.2d"),__value[5]);
	//lcd_print(2,10,lcdteks);

	while(1){	
		__key = _key_scan(1);
    9be0:	81 e0       	ldi	r24, 0x01	; 1
    9be2:	0e 94 f6 a5 	call	0x14bec	; 0x14bec <_key_scan>
    9be6:	18 2f       	mov	r17, r24
		__num = _key_btn(__key);
    9be8:	0e 94 57 a5 	call	0x14aae	; 0x14aae <_key_btn>
    9bec:	08 2f       	mov	r16, r24
		if(__key == _KEY_CANCEL)
    9bee:	17 3e       	cpi	r17, 0xE7	; 231
    9bf0:	09 f4       	brne	.+2      	; 0x9bf4 <_menu_printer+0x1b0>
    9bf2:	85 c0       	rjmp	.+266    	; 0x9cfe <_menu_printer+0x2ba>
			return;
		if(__key==_KEY_ENTER){
    9bf4:	17 3b       	cpi	r17, 0xB7	; 183
    9bf6:	f1 f4       	brne	.+60     	; 0x9c34 <_menu_printer+0x1f0>
			eeprom_write_byte(&DefPrinterType, __value[0]);
    9bf8:	80 e3       	ldi	r24, 0x30	; 48
    9bfa:	90 e0       	ldi	r25, 0x00	; 0
    9bfc:	68 2d       	mov	r22, r8
    9bfe:	0e 94 db ac 	call	0x159b6	; 0x159b6 <__eewr_byte_m128>
			eeprom_write_byte(&DefPrintSize, __value[1]);
    9c02:	85 e3       	ldi	r24, 0x35	; 53
    9c04:	90 e0       	ldi	r25, 0x00	; 0
    9c06:	69 2d       	mov	r22, r9
    9c08:	0e 94 db ac 	call	0x159b6	; 0x159b6 <__eewr_byte_m128>
			eeprom_write_byte(&DefPrintLogo, __value[2]);
    9c0c:	84 e3       	ldi	r24, 0x34	; 52
    9c0e:	90 e0       	ldi	r25, 0x00	; 0
    9c10:	6a 2d       	mov	r22, r10
    9c12:	0e 94 db ac 	call	0x159b6	; 0x159b6 <__eewr_byte_m128>
			eeprom_write_byte(&DefPrintAutoCut, __value[3]);
    9c16:	83 e3       	ldi	r24, 0x33	; 51
    9c18:	90 e0       	ldi	r25, 0x00	; 0
    9c1a:	6b 2d       	mov	r22, r11
    9c1c:	0e 94 db ac 	call	0x159b6	; 0x159b6 <__eewr_byte_m128>
			eeprom_write_byte(&DefPrintScrollEnd, __value[4]);
    9c20:	81 e3       	ldi	r24, 0x31	; 49
    9c22:	90 e0       	ldi	r25, 0x00	; 0
    9c24:	6c 2d       	mov	r22, r12
    9c26:	0e 94 db ac 	call	0x159b6	; 0x159b6 <__eewr_byte_m128>
			eeprom_write_byte(&DefPrintScrollSpace, __value[5]);
    9c2a:	82 e3       	ldi	r24, 0x32	; 50
    9c2c:	90 e0       	ldi	r25, 0x00	; 0
    9c2e:	6d 2d       	mov	r22, r13
    9c30:	0e 94 db ac 	call	0x159b6	; 0x159b6 <__eewr_byte_m128>

		}
		if(__num >= 0x31 && __num <= 0x36){
    9c34:	80 2f       	mov	r24, r16
    9c36:	81 53       	subi	r24, 0x31	; 49
    9c38:	86 30       	cpi	r24, 0x06	; 6
    9c3a:	90 f6       	brcc	.-92     	; 0x9be0 <_menu_printer+0x19c>
			__lmt = pgm_read_byte(&__prntlmt[__num - 0x31]);
    9c3c:	a0 2f       	mov	r26, r16
    9c3e:	b0 e0       	ldi	r27, 0x00	; 0
    9c40:	d1 97       	sbiw	r26, 0x31	; 49
    9c42:	fd 01       	movw	r30, r26
    9c44:	ea 53       	subi	r30, 0x3A	; 58
    9c46:	fd 4f       	sbci	r31, 0xFD	; 253
    9c48:	24 91       	lpm	r18, Z+
			__start = pgm_read_byte(&__prntstr[__num - 0x31]);
    9c4a:	fd 01       	movw	r30, r26
    9c4c:	e4 53       	subi	r30, 0x34	; 52
    9c4e:	fd 4f       	sbci	r31, 0xFD	; 253
    9c50:	94 91       	lpm	r25, Z+
			if(__value[__num - 0x31] == __lmt)
    9c52:	f2 01       	movw	r30, r4
    9c54:	ea 0f       	add	r30, r26
    9c56:	fb 1f       	adc	r31, r27
    9c58:	80 81       	ld	r24, Z
    9c5a:	82 17       	cp	r24, r18
    9c5c:	11 f4       	brne	.+4      	; 0x9c62 <_menu_printer+0x21e>
				__value[__num - 0x31] = __start;
    9c5e:	90 83       	st	Z, r25
    9c60:	02 c0       	rjmp	.+4      	; 0x9c66 <_menu_printer+0x222>
			else
				__value[__num - 0x31]++;
    9c62:	8f 5f       	subi	r24, 0xFF	; 255
    9c64:	80 83       	st	Z, r24
			__x = pgm_read_byte(&__prntloc[__num - 0x31][0]);
    9c66:	9d 01       	movw	r18, r26
    9c68:	22 0f       	add	r18, r18
    9c6a:	33 1f       	adc	r19, r19
    9c6c:	c9 01       	movw	r24, r18
    9c6e:	86 54       	subi	r24, 0x46	; 70
    9c70:	9d 4f       	sbci	r25, 0xFD	; 253
    9c72:	fc 01       	movw	r30, r24
    9c74:	c4 90       	lpm	r12, Z+
			__y = pgm_read_byte(&__prntloc[__num - 0x31][1]);
    9c76:	25 54       	subi	r18, 0x45	; 69
    9c78:	3d 4f       	sbci	r19, 0xFD	; 253
    9c7a:	f9 01       	movw	r30, r18
    9c7c:	d4 90       	lpm	r13, Z+
			sprintf_P(__buff,PSTR("%d"),__value[__num - 0x31]);
    9c7e:	a4 0d       	add	r26, r4
    9c80:	b5 1d       	adc	r27, r5
    9c82:	1c 91       	ld	r17, X
    9c84:	00 d0       	rcall	.+0      	; 0x9c86 <_menu_printer+0x242>
    9c86:	00 d0       	rcall	.+0      	; 0x9c88 <_menu_printer+0x244>
    9c88:	00 d0       	rcall	.+0      	; 0x9c8a <_menu_printer+0x246>
    9c8a:	ed b7       	in	r30, 0x3d	; 61
    9c8c:	fe b7       	in	r31, 0x3e	; 62
    9c8e:	31 96       	adiw	r30, 0x01	; 1
    9c90:	ad b7       	in	r26, 0x3d	; 61
    9c92:	be b7       	in	r27, 0x3e	; 62
    9c94:	12 96       	adiw	r26, 0x02	; 2
    9c96:	fc 92       	st	X, r15
    9c98:	ee 92       	st	-X, r14
    9c9a:	11 97       	sbiw	r26, 0x01	; 1
    9c9c:	73 82       	std	Z+3, r7	; 0x03
    9c9e:	62 82       	std	Z+2, r6	; 0x02
    9ca0:	14 83       	std	Z+4, r17	; 0x04
    9ca2:	15 82       	std	Z+5, r1	; 0x05
    9ca4:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
			//_f_inttostr(__buff, __value[__num - 0x31]);
			if((__num == 0x35)||(__num == 0x36))
    9ca8:	05 53       	subi	r16, 0x35	; 53
    9caa:	ed b7       	in	r30, 0x3d	; 61
    9cac:	fe b7       	in	r31, 0x3e	; 62
    9cae:	36 96       	adiw	r30, 0x06	; 6
    9cb0:	0f b6       	in	r0, 0x3f	; 63
    9cb2:	f8 94       	cli
    9cb4:	fe bf       	out	0x3e, r31	; 62
    9cb6:	0f be       	out	0x3f, r0	; 63
    9cb8:	ed bf       	out	0x3d, r30	; 61
    9cba:	02 30       	cpi	r16, 0x02	; 2
    9cbc:	d0 f4       	brcc	.+52     	; 0x9cf2 <_menu_printer+0x2ae>
			   sprintf_P(__buff,PSTR("%.2d"),__value[__num - 0x31]);
    9cbe:	00 d0       	rcall	.+0      	; 0x9cc0 <_menu_printer+0x27c>
    9cc0:	00 d0       	rcall	.+0      	; 0x9cc2 <_menu_printer+0x27e>
    9cc2:	00 d0       	rcall	.+0      	; 0x9cc4 <_menu_printer+0x280>
    9cc4:	ed b7       	in	r30, 0x3d	; 61
    9cc6:	fe b7       	in	r31, 0x3e	; 62
    9cc8:	31 96       	adiw	r30, 0x01	; 1
    9cca:	ad b7       	in	r26, 0x3d	; 61
    9ccc:	be b7       	in	r27, 0x3e	; 62
    9cce:	12 96       	adiw	r26, 0x02	; 2
    9cd0:	fc 92       	st	X, r15
    9cd2:	ee 92       	st	-X, r14
    9cd4:	11 97       	sbiw	r26, 0x01	; 1
    9cd6:	33 82       	std	Z+3, r3	; 0x03
    9cd8:	22 82       	std	Z+2, r2	; 0x02
    9cda:	14 83       	std	Z+4, r17	; 0x04
    9cdc:	15 82       	std	Z+5, r1	; 0x05
    9cde:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
    9ce2:	ed b7       	in	r30, 0x3d	; 61
    9ce4:	fe b7       	in	r31, 0x3e	; 62
    9ce6:	36 96       	adiw	r30, 0x06	; 6
    9ce8:	0f b6       	in	r0, 0x3f	; 63
    9cea:	f8 94       	cli
    9cec:	fe bf       	out	0x3e, r31	; 62
    9cee:	0f be       	out	0x3f, r0	; 63
    9cf0:	ed bf       	out	0x3d, r30	; 61
				//_f_punctuation(__buff, 0, 2, 0);

			lcd_print(__x, __y, __buff);
    9cf2:	8c 2d       	mov	r24, r12
    9cf4:	6d 2d       	mov	r22, r13
    9cf6:	a7 01       	movw	r20, r14
    9cf8:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
    9cfc:	6b cf       	rjmp	.-298    	; 0x9bd4 <_menu_printer+0x190>
		}
	}
}
    9cfe:	2c 96       	adiw	r28, 0x0c	; 12
    9d00:	0f b6       	in	r0, 0x3f	; 63
    9d02:	f8 94       	cli
    9d04:	de bf       	out	0x3e, r29	; 62
    9d06:	0f be       	out	0x3f, r0	; 63
    9d08:	cd bf       	out	0x3d, r28	; 61
    9d0a:	cf 91       	pop	r28
    9d0c:	df 91       	pop	r29
    9d0e:	1f 91       	pop	r17
    9d10:	0f 91       	pop	r16
    9d12:	ff 90       	pop	r15
    9d14:	ef 90       	pop	r14
    9d16:	df 90       	pop	r13
    9d18:	cf 90       	pop	r12
    9d1a:	bf 90       	pop	r11
    9d1c:	af 90       	pop	r10
    9d1e:	9f 90       	pop	r9
    9d20:	8f 90       	pop	r8
    9d22:	7f 90       	pop	r7
    9d24:	6f 90       	pop	r6
    9d26:	5f 90       	pop	r5
    9d28:	4f 90       	pop	r4
    9d2a:	3f 90       	pop	r3
    9d2c:	2f 90       	pop	r2
    9d2e:	08 95       	ret

00009d30 <FSettingPrinter>:
char FSettingDatetime(){
     _menu_datetime();
     return MENU_DONE;
}
char FSettingPrinter(){
     _menu_printer();
    9d30:	0e 94 22 4d 	call	0x9a44	; 0x9a44 <_menu_printer>
	 return MENU_DONE;
}
    9d34:	81 e0       	ldi	r24, 0x01	; 1
    9d36:	08 95       	ret

00009d38 <_menu_pumpprodinput>:
				*/
		}
	}
}

void _menu_pumpprodinput(unsigned char __select){
    9d38:	6f 92       	push	r6
    9d3a:	7f 92       	push	r7
    9d3c:	8f 92       	push	r8
    9d3e:	9f 92       	push	r9
    9d40:	af 92       	push	r10
    9d42:	bf 92       	push	r11
    9d44:	cf 92       	push	r12
    9d46:	df 92       	push	r13
    9d48:	ef 92       	push	r14
    9d4a:	ff 92       	push	r15
    9d4c:	0f 93       	push	r16
    9d4e:	1f 93       	push	r17
    9d50:	df 93       	push	r29
    9d52:	cf 93       	push	r28
    9d54:	cd b7       	in	r28, 0x3d	; 61
    9d56:	de b7       	in	r29, 0x3e	; 62
    9d58:	a7 97       	sbiw	r28, 0x27	; 39
    9d5a:	0f b6       	in	r0, 0x3f	; 63
    9d5c:	f8 94       	cli
    9d5e:	de bf       	out	0x3e, r29	; 62
    9d60:	0f be       	out	0x3f, r0	; 63
    9d62:	cd bf       	out	0x3d, r28	; 61
    9d64:	b8 2e       	mov	r11, r24
	char 			__pump_prod[6],__pump_id[8];
	unsigned char	i, __x, __y, __key, __num, __buff[5];
	char lcdteks[20];

	eeprom_read_block((void*) &__pump_id, (const void*) &DefPumpMap, 8);
    9d66:	8e 01       	movw	r16, r28
    9d68:	04 5f       	subi	r16, 0xF4	; 244
    9d6a:	1f 4f       	sbci	r17, 0xFF	; 255
    9d6c:	c8 01       	movw	r24, r16
    9d6e:	65 e4       	ldi	r22, 0x45	; 69
    9d70:	70 e0       	ldi	r23, 0x00	; 0
    9d72:	48 e0       	ldi	r20, 0x08	; 8
    9d74:	50 e0       	ldi	r21, 0x00	; 0
    9d76:	0e 94 b9 ac 	call	0x15972	; 0x15972 <__eerd_block_m128>
	eeprom_read_block((void*) &__pump_prod, (const void*) &DefNozzleMap[__select], 6);
    9d7a:	86 e0       	ldi	r24, 0x06	; 6
    9d7c:	b8 9e       	mul	r11, r24
    9d7e:	40 01       	movw	r8, r0
    9d80:	11 24       	eor	r1, r1
    9d82:	85 e5       	ldi	r24, 0x55	; 85
    9d84:	90 e0       	ldi	r25, 0x00	; 0
    9d86:	88 0e       	add	r8, r24
    9d88:	99 1e       	adc	r9, r25
    9d8a:	b6 e0       	ldi	r27, 0x06	; 6
    9d8c:	cb 2e       	mov	r12, r27
    9d8e:	d1 2c       	mov	r13, r1
    9d90:	cc 0e       	add	r12, r28
    9d92:	dd 1e       	adc	r13, r29
    9d94:	c6 01       	movw	r24, r12
    9d96:	b4 01       	movw	r22, r8
    9d98:	46 e0       	ldi	r20, 0x06	; 6
    9d9a:	50 e0       	ldi	r21, 0x00	; 0
    9d9c:	0e 94 b9 ac 	call	0x15972	; 0x15972 <__eerd_block_m128>

	lcd_clear();_delay_ms(10);
    9da0:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
    9da4:	84 ec       	ldi	r24, 0xC4	; 196
    9da6:	99 e0       	ldi	r25, 0x09	; 9
    9da8:	01 97       	sbiw	r24, 0x01	; 1
    9daa:	f1 f7       	brne	.-4      	; 0x9da8 <_menu_pumpprodinput+0x70>
    sprintf_P(lcdteks, PSTR("Product FIP%.2d"),__pump_id[__select]);
    9dac:	00 d0       	rcall	.+0      	; 0x9dae <_menu_pumpprodinput+0x76>
    9dae:	00 d0       	rcall	.+0      	; 0x9db0 <_menu_pumpprodinput+0x78>
    9db0:	00 d0       	rcall	.+0      	; 0x9db2 <_menu_pumpprodinput+0x7a>
    9db2:	ed b7       	in	r30, 0x3d	; 61
    9db4:	fe b7       	in	r31, 0x3e	; 62
    9db6:	31 96       	adiw	r30, 0x01	; 1
    9db8:	a4 e1       	ldi	r26, 0x14	; 20
    9dba:	ea 2e       	mov	r14, r26
    9dbc:	f1 2c       	mov	r15, r1
    9dbe:	ec 0e       	add	r14, r28
    9dc0:	fd 1e       	adc	r15, r29
    9dc2:	ad b7       	in	r26, 0x3d	; 61
    9dc4:	be b7       	in	r27, 0x3e	; 62
    9dc6:	12 96       	adiw	r26, 0x02	; 2
    9dc8:	fc 92       	st	X, r15
    9dca:	ee 92       	st	-X, r14
    9dcc:	11 97       	sbiw	r26, 0x01	; 1
    9dce:	84 e8       	ldi	r24, 0x84	; 132
    9dd0:	9d e0       	ldi	r25, 0x0D	; 13
    9dd2:	93 83       	std	Z+3, r25	; 0x03
    9dd4:	82 83       	std	Z+2, r24	; 0x02
    9dd6:	0b 0d       	add	r16, r11
    9dd8:	11 1d       	adc	r17, r1
    9dda:	d8 01       	movw	r26, r16
    9ddc:	8c 91       	ld	r24, X
    9dde:	84 83       	std	Z+4, r24	; 0x04
    9de0:	15 82       	std	Z+5, r1	; 0x05
    9de2:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
    lcd_print(1, 1,lcdteks);
    9de6:	ed b7       	in	r30, 0x3d	; 61
    9de8:	fe b7       	in	r31, 0x3e	; 62
    9dea:	36 96       	adiw	r30, 0x06	; 6
    9dec:	0f b6       	in	r0, 0x3f	; 63
    9dee:	f8 94       	cli
    9df0:	fe bf       	out	0x3e, r31	; 62
    9df2:	0f be       	out	0x3f, r0	; 63
    9df4:	ed bf       	out	0x3d, r30	; 61
    9df6:	81 e0       	ldi	r24, 0x01	; 1
    9df8:	61 e0       	ldi	r22, 0x01	; 1
    9dfa:	a7 01       	movw	r20, r14
    9dfc:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>

	lcd_printf(2, 1, PSTR("1)N1:  3)N3:  5)N5:"));
    9e00:	82 e0       	ldi	r24, 0x02	; 2
    9e02:	61 e0       	ldi	r22, 0x01	; 1
    9e04:	40 e7       	ldi	r20, 0x70	; 112
    9e06:	5d e0       	ldi	r21, 0x0D	; 13
    9e08:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
	lcd_printf(3, 1, PSTR("2)N2:  4)N4:  6)N6:"));
    9e0c:	83 e0       	ldi	r24, 0x03	; 3
    9e0e:	61 e0       	ldi	r22, 0x01	; 1
    9e10:	4c e5       	ldi	r20, 0x5C	; 92
    9e12:	5d e0       	ldi	r21, 0x0D	; 13
    9e14:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
	lcd_printf(4, 1, PSTR("*)Exit        #)Save"));
    9e18:	84 e0       	ldi	r24, 0x04	; 4
    9e1a:	61 e0       	ldi	r22, 0x01	; 1
    9e1c:	47 e4       	ldi	r20, 0x47	; 71
    9e1e:	5d e0       	ldi	r21, 0x0D	; 13
    9e20:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
    9e24:	ee ea       	ldi	r30, 0xAE	; 174
    9e26:	ee 2e       	mov	r14, r30
    9e28:	e2 e0       	ldi	r30, 0x02	; 2
    9e2a:	fe 2e       	mov	r15, r30

	for(i=0;i<6;i++){
		__x = pgm_read_byte(&__prodloc[i][0]);
		__y = pgm_read_byte(&__prodloc[i][1]);

        sprintf_P(__buff,PSTR("%d"),__pump_prod[i]);
    9e2c:	5e 01       	movw	r10, r28
    9e2e:	08 94       	sec
    9e30:	a1 1c       	adc	r10, r1
    9e32:	b1 1c       	adc	r11, r1
    9e34:	74 e4       	ldi	r23, 0x44	; 68
    9e36:	67 2e       	mov	r6, r23
    9e38:	7d e0       	ldi	r23, 0x0D	; 13
    9e3a:	77 2e       	mov	r7, r23
	lcd_printf(2, 1, PSTR("1)N1:  3)N3:  5)N5:"));
	lcd_printf(3, 1, PSTR("2)N2:  4)N4:  6)N6:"));
	lcd_printf(4, 1, PSTR("*)Exit        #)Save"));

	for(i=0;i<6;i++){
		__x = pgm_read_byte(&__prodloc[i][0]);
    9e3c:	f7 01       	movw	r30, r14
    9e3e:	04 91       	lpm	r16, Z+
		__y = pgm_read_byte(&__prodloc[i][1]);
    9e40:	08 94       	sec
    9e42:	e1 1c       	adc	r14, r1
    9e44:	f1 1c       	adc	r15, r1
    9e46:	f7 01       	movw	r30, r14
    9e48:	14 91       	lpm	r17, Z+

        sprintf_P(__buff,PSTR("%d"),__pump_prod[i]);
    9e4a:	00 d0       	rcall	.+0      	; 0x9e4c <_menu_pumpprodinput+0x114>
    9e4c:	00 d0       	rcall	.+0      	; 0x9e4e <_menu_pumpprodinput+0x116>
    9e4e:	00 d0       	rcall	.+0      	; 0x9e50 <_menu_pumpprodinput+0x118>
    9e50:	ed b7       	in	r30, 0x3d	; 61
    9e52:	fe b7       	in	r31, 0x3e	; 62
    9e54:	31 96       	adiw	r30, 0x01	; 1
    9e56:	ad b7       	in	r26, 0x3d	; 61
    9e58:	be b7       	in	r27, 0x3e	; 62
    9e5a:	12 96       	adiw	r26, 0x02	; 2
    9e5c:	bc 92       	st	X, r11
    9e5e:	ae 92       	st	-X, r10
    9e60:	11 97       	sbiw	r26, 0x01	; 1
    9e62:	73 82       	std	Z+3, r7	; 0x03
    9e64:	62 82       	std	Z+2, r6	; 0x02
    9e66:	d6 01       	movw	r26, r12
    9e68:	8d 91       	ld	r24, X+
    9e6a:	6d 01       	movw	r12, r26
    9e6c:	84 83       	std	Z+4, r24	; 0x04
    9e6e:	15 82       	std	Z+5, r1	; 0x05
    9e70:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
		lcd_print(__x+1, __y, __buff);
    9e74:	ed b7       	in	r30, 0x3d	; 61
    9e76:	fe b7       	in	r31, 0x3e	; 62
    9e78:	36 96       	adiw	r30, 0x06	; 6
    9e7a:	0f b6       	in	r0, 0x3f	; 63
    9e7c:	f8 94       	cli
    9e7e:	fe bf       	out	0x3e, r31	; 62
    9e80:	0f be       	out	0x3f, r0	; 63
    9e82:	ed bf       	out	0x3d, r30	; 61
    9e84:	80 2f       	mov	r24, r16
    9e86:	8f 5f       	subi	r24, 0xFF	; 255
    9e88:	61 2f       	mov	r22, r17
    9e8a:	a5 01       	movw	r20, r10
    9e8c:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
    9e90:	08 94       	sec
    9e92:	e1 1c       	adc	r14, r1
    9e94:	f1 1c       	adc	r15, r1

	lcd_printf(2, 1, PSTR("1)N1:  3)N3:  5)N5:"));
	lcd_printf(3, 1, PSTR("2)N2:  4)N4:  6)N6:"));
	lcd_printf(4, 1, PSTR("*)Exit        #)Save"));

	for(i=0;i<6;i++){
    9e96:	fa eb       	ldi	r31, 0xBA	; 186
    9e98:	ef 16       	cp	r14, r31
    9e9a:	f2 e0       	ldi	r31, 0x02	; 2
    9e9c:	ff 06       	cpc	r15, r31
    9e9e:	71 f6       	brne	.-100    	; 0x9e3c <_menu_pumpprodinput+0x104>
		if(__key == _KEY_ENTER){
			eeprom_write_block((const void*) &__pump_prod, (void*) &DefNozzleMap[__select], 6);
			return;
		}
		if(__num >= '1' && __num <= '6'){
			if(__pump_prod[__num - '1'] == 6)
    9ea0:	66 e0       	ldi	r22, 0x06	; 6
    9ea2:	c6 2e       	mov	r12, r22
    9ea4:	d1 2c       	mov	r13, r1
    9ea6:	cc 0e       	add	r12, r28
    9ea8:	dd 1e       	adc	r13, r29
			else
				__pump_prod[__num - '1']++;

			__x = pgm_read_byte(&__prodloc[__num - 0x31][0]);
			__y = pgm_read_byte(&__prodloc[__num - 0x31][1]);
			sprintf_P(__buff,PSTR("%d"),__pump_prod[__num - 0x31]);
    9eaa:	7e 01       	movw	r14, r28
    9eac:	08 94       	sec
    9eae:	e1 1c       	adc	r14, r1
    9eb0:	f1 1c       	adc	r15, r1
    9eb2:	51 e4       	ldi	r21, 0x41	; 65
    9eb4:	a5 2e       	mov	r10, r21
    9eb6:	5d e0       	ldi	r21, 0x0D	; 13
    9eb8:	b5 2e       	mov	r11, r21
		//lcd_print(2+(i%2),(i/2)*6,lcdteks);
	}

	while(1){
		
		__key = _key_scan(1);
    9eba:	81 e0       	ldi	r24, 0x01	; 1
    9ebc:	0e 94 f6 a5 	call	0x14bec	; 0x14bec <_key_scan>
    9ec0:	18 2f       	mov	r17, r24
		__num = _key_btn(__key);
    9ec2:	0e 94 57 a5 	call	0x14aae	; 0x14aae <_key_btn>
    9ec6:	98 2f       	mov	r25, r24
		if(__key == _KEY_CANCEL)
    9ec8:	17 3e       	cpi	r17, 0xE7	; 231
    9eca:	09 f4       	brne	.+2      	; 0x9ece <_menu_pumpprodinput+0x196>
    9ecc:	4d c0       	rjmp	.+154    	; 0x9f68 <_menu_pumpprodinput+0x230>
			return;
		if(__key == _KEY_ENTER){
    9ece:	17 3b       	cpi	r17, 0xB7	; 183
    9ed0:	41 f4       	brne	.+16     	; 0x9ee2 <_menu_pumpprodinput+0x1aa>
			eeprom_write_block((const void*) &__pump_prod, (void*) &DefNozzleMap[__select], 6);
    9ed2:	ce 01       	movw	r24, r28
    9ed4:	06 96       	adiw	r24, 0x06	; 6
    9ed6:	b4 01       	movw	r22, r8
    9ed8:	46 e0       	ldi	r20, 0x06	; 6
    9eda:	50 e0       	ldi	r21, 0x00	; 0
    9edc:	0e 94 d1 ac 	call	0x159a2	; 0x159a2 <__eewr_block_m128>
    9ee0:	43 c0       	rjmp	.+134    	; 0x9f68 <_menu_pumpprodinput+0x230>
			return;
		}
		if(__num >= '1' && __num <= '6'){
    9ee2:	81 53       	subi	r24, 0x31	; 49
    9ee4:	86 30       	cpi	r24, 0x06	; 6
    9ee6:	48 f7       	brcc	.-46     	; 0x9eba <_menu_pumpprodinput+0x182>
			if(__pump_prod[__num - '1'] == 6)
    9ee8:	a9 2f       	mov	r26, r25
    9eea:	b0 e0       	ldi	r27, 0x00	; 0
    9eec:	d1 97       	sbiw	r26, 0x31	; 49
    9eee:	f6 01       	movw	r30, r12
    9ef0:	ea 0f       	add	r30, r26
    9ef2:	fb 1f       	adc	r31, r27
    9ef4:	80 81       	ld	r24, Z
    9ef6:	86 30       	cpi	r24, 0x06	; 6
    9ef8:	11 f4       	brne	.+4      	; 0x9efe <_menu_pumpprodinput+0x1c6>
				__pump_prod[__num - '1'] = 0;
    9efa:	10 82       	st	Z, r1
    9efc:	02 c0       	rjmp	.+4      	; 0x9f02 <_menu_pumpprodinput+0x1ca>
			else
				__pump_prod[__num - '1']++;
    9efe:	8f 5f       	subi	r24, 0xFF	; 255
    9f00:	80 83       	st	Z, r24

			__x = pgm_read_byte(&__prodloc[__num - 0x31][0]);
    9f02:	29 2f       	mov	r18, r25
    9f04:	30 e0       	ldi	r19, 0x00	; 0
    9f06:	21 53       	subi	r18, 0x31	; 49
    9f08:	30 40       	sbci	r19, 0x00	; 0
    9f0a:	22 0f       	add	r18, r18
    9f0c:	33 1f       	adc	r19, r19
    9f0e:	c9 01       	movw	r24, r18
    9f10:	82 55       	subi	r24, 0x52	; 82
    9f12:	9d 4f       	sbci	r25, 0xFD	; 253
    9f14:	fc 01       	movw	r30, r24
    9f16:	04 91       	lpm	r16, Z+
			__y = pgm_read_byte(&__prodloc[__num - 0x31][1]);
    9f18:	21 55       	subi	r18, 0x51	; 81
    9f1a:	3d 4f       	sbci	r19, 0xFD	; 253
    9f1c:	f9 01       	movw	r30, r18
    9f1e:	14 91       	lpm	r17, Z+
			sprintf_P(__buff,PSTR("%d"),__pump_prod[__num - 0x31]);
    9f20:	00 d0       	rcall	.+0      	; 0x9f22 <_menu_pumpprodinput+0x1ea>
    9f22:	00 d0       	rcall	.+0      	; 0x9f24 <_menu_pumpprodinput+0x1ec>
    9f24:	00 d0       	rcall	.+0      	; 0x9f26 <_menu_pumpprodinput+0x1ee>
    9f26:	2d b7       	in	r18, 0x3d	; 61
    9f28:	3e b7       	in	r19, 0x3e	; 62
    9f2a:	2f 5f       	subi	r18, 0xFF	; 255
    9f2c:	3f 4f       	sbci	r19, 0xFF	; 255
    9f2e:	ed b7       	in	r30, 0x3d	; 61
    9f30:	fe b7       	in	r31, 0x3e	; 62
    9f32:	f2 82       	std	Z+2, r15	; 0x02
    9f34:	e1 82       	std	Z+1, r14	; 0x01
    9f36:	f9 01       	movw	r30, r18
    9f38:	b3 82       	std	Z+3, r11	; 0x03
    9f3a:	a2 82       	std	Z+2, r10	; 0x02
    9f3c:	ac 0d       	add	r26, r12
    9f3e:	bd 1d       	adc	r27, r13
    9f40:	8c 91       	ld	r24, X
    9f42:	84 83       	std	Z+4, r24	; 0x04
    9f44:	15 82       	std	Z+5, r1	; 0x05
    9f46:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
			//_f_inttostr(__buff, __pump_prod[__num - 0x31]);
			lcd_print(__x+1, __y, __buff);
    9f4a:	8d b7       	in	r24, 0x3d	; 61
    9f4c:	9e b7       	in	r25, 0x3e	; 62
    9f4e:	06 96       	adiw	r24, 0x06	; 6
    9f50:	0f b6       	in	r0, 0x3f	; 63
    9f52:	f8 94       	cli
    9f54:	9e bf       	out	0x3e, r25	; 62
    9f56:	0f be       	out	0x3f, r0	; 63
    9f58:	8d bf       	out	0x3d, r24	; 61
    9f5a:	80 2f       	mov	r24, r16
    9f5c:	8f 5f       	subi	r24, 0xFF	; 255
    9f5e:	61 2f       	mov	r22, r17
    9f60:	a7 01       	movw	r20, r14
    9f62:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
    9f66:	a9 cf       	rjmp	.-174    	; 0x9eba <_menu_pumpprodinput+0x182>
		}
	}
}
    9f68:	a7 96       	adiw	r28, 0x27	; 39
    9f6a:	0f b6       	in	r0, 0x3f	; 63
    9f6c:	f8 94       	cli
    9f6e:	de bf       	out	0x3e, r29	; 62
    9f70:	0f be       	out	0x3f, r0	; 63
    9f72:	cd bf       	out	0x3d, r28	; 61
    9f74:	cf 91       	pop	r28
    9f76:	df 91       	pop	r29
    9f78:	1f 91       	pop	r17
    9f7a:	0f 91       	pop	r16
    9f7c:	ff 90       	pop	r15
    9f7e:	ef 90       	pop	r14
    9f80:	df 90       	pop	r13
    9f82:	cf 90       	pop	r12
    9f84:	bf 90       	pop	r11
    9f86:	af 90       	pop	r10
    9f88:	9f 90       	pop	r9
    9f8a:	8f 90       	pop	r8
    9f8c:	7f 90       	pop	r7
    9f8e:	6f 90       	pop	r6
    9f90:	08 95       	ret

00009f92 <_menu_pumpprod>:
}

void _menu_pumpprod(void){
	char KeyPressed,KeyChar;
	while(1){
		lcd_clear();
    9f92:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
		_scr_pump();
    9f96:	0e 94 49 47 	call	0x8e92	; 0x8e92 <_scr_pump>
		while(1){
			KeyPressed=_key_scan(1);
    9f9a:	81 e0       	ldi	r24, 0x01	; 1
    9f9c:	0e 94 f6 a5 	call	0x14bec	; 0x14bec <_key_scan>
		    KeyChar=_key_btn(KeyPressed);
    9fa0:	0e 94 57 a5 	call	0x14aae	; 0x14aae <_key_btn>
    9fa4:	98 2f       	mov	r25, r24

			if ((KeyChar>='1')&&(KeyChar<='8')){
    9fa6:	81 53       	subi	r24, 0x31	; 49
    9fa8:	88 30       	cpi	r24, 0x08	; 8
    9faa:	18 f4       	brcc	.+6      	; 0x9fb2 <_menu_pumpprod+0x20>
			     _menu_pumpprodinput(KeyChar-'1');
    9fac:	0e 94 9c 4e 	call	0x9d38	; 0x9d38 <_menu_pumpprodinput>
    9fb0:	f0 cf       	rjmp	.-32     	; 0x9f92 <_menu_pumpprod>
				break;
			}else if (KeyChar=='*'){
    9fb2:	9a 32       	cpi	r25, 0x2A	; 42
    9fb4:	91 f7       	brne	.-28     	; 0x9f9a <_menu_pumpprod+0x8>
			if(__key == _KEY_CANCEL)
				return;
				*/
		}
	}
}
    9fb6:	08 95       	ret

00009fb8 <FMenuPumpLabel>:
		       break;		         
	      }
	 }     
}

void FMenuPumpLabel(){
    9fb8:	6f 92       	push	r6
    9fba:	7f 92       	push	r7
    9fbc:	8f 92       	push	r8
    9fbe:	9f 92       	push	r9
    9fc0:	af 92       	push	r10
    9fc2:	bf 92       	push	r11
    9fc4:	cf 92       	push	r12
    9fc6:	df 92       	push	r13
    9fc8:	ef 92       	push	r14
    9fca:	ff 92       	push	r15
    9fcc:	1f 93       	push	r17
    9fce:	df 93       	push	r29
    9fd0:	cf 93       	push	r28
    9fd2:	cd b7       	in	r28, 0x3d	; 61
    9fd4:	de b7       	in	r29, 0x3e	; 62
    9fd6:	2d 97       	sbiw	r28, 0x0d	; 13
    9fd8:	0f b6       	in	r0, 0x3f	; 63
    9fda:	f8 94       	cli
    9fdc:	de bf       	out	0x3e, r29	; 62
    9fde:	0f be       	out	0x3f, r0	; 63
    9fe0:	cd bf       	out	0x3d, r28	; 61
	char PPumpLabel[8];
	unsigned char i, xPos,yPos,KeyPressed,KeyChar,strLabel[5];
	static char MaxCountId=16;

	eeprom_read_block((void*) &PPumpLabel, (const void*) &DefPumpLabel, 8);
    9fe2:	36 e0       	ldi	r19, 0x06	; 6
    9fe4:	c3 2e       	mov	r12, r19
    9fe6:	d1 2c       	mov	r13, r1
    9fe8:	cc 0e       	add	r12, r28
    9fea:	dd 1e       	adc	r13, r29
    9fec:	c6 01       	movw	r24, r12
    9fee:	6d e4       	ldi	r22, 0x4D	; 77
    9ff0:	70 e0       	ldi	r23, 0x00	; 0
    9ff2:	48 e0       	ldi	r20, 0x08	; 8
    9ff4:	50 e0       	ldi	r21, 0x00	; 0
    9ff6:	0e 94 b9 ac 	call	0x15972	; 0x15972 <__eerd_block_m128>
	MaxCountId=99;
    9ffa:	83 e6       	ldi	r24, 0x63	; 99
    9ffc:	80 93 56 01 	sts	0x0156, r24
	lcd_clear();_delay_ms(10);
    a000:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
    a004:	84 ec       	ldi	r24, 0xC4	; 196
    a006:	99 e0       	ldi	r25, 0x09	; 9
    a008:	01 97       	sbiw	r24, 0x01	; 1
    a00a:	f1 f7       	brne	.-4      	; 0xa008 <FMenuPumpLabel+0x50>
	lcd_printf(1, 1, PSTR("1)1:   5)5:"));
    a00c:	81 e0       	ldi	r24, 0x01	; 1
    a00e:	61 e0       	ldi	r22, 0x01	; 1
    a010:	4f e7       	ldi	r20, 0x7F	; 127
    a012:	5e e0       	ldi	r21, 0x0E	; 14
    a014:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
	lcd_printf(2, 1, PSTR("2)2:   6)6:"));
    a018:	82 e0       	ldi	r24, 0x02	; 2
    a01a:	61 e0       	ldi	r22, 0x01	; 1
    a01c:	43 e7       	ldi	r20, 0x73	; 115
    a01e:	5e e0       	ldi	r21, 0x0E	; 14
    a020:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
	lcd_printf(3, 1, PSTR("3)3:   7)7:   #)Save"));
    a024:	83 e0       	ldi	r24, 0x03	; 3
    a026:	61 e0       	ldi	r22, 0x01	; 1
    a028:	4e e5       	ldi	r20, 0x5E	; 94
    a02a:	5e e0       	ldi	r21, 0x0E	; 14
    a02c:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
	lcd_printf(4, 1, PSTR("4)4:   8)8:   *)Exit"));
    a030:	84 e0       	ldi	r24, 0x04	; 4
    a032:	61 e0       	ldi	r22, 0x01	; 1
    a034:	49 e4       	ldi	r20, 0x49	; 73
    a036:	5e e0       	ldi	r21, 0x0E	; 14
    a038:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
    a03c:	76 01       	movw	r14, r12

	for(i=0;i< 8;i++){
	    sprintf_P(strLabel,PSTR("%.2d"),PPumpLabel[i]);
    a03e:	5e 01       	movw	r10, r28
    a040:	08 94       	sec
    a042:	a1 1c       	adc	r10, r1
    a044:	b1 1c       	adc	r11, r1
    a046:	24 e4       	ldi	r18, 0x44	; 68
    a048:	62 2e       	mov	r6, r18
    a04a:	2e e0       	ldi	r18, 0x0E	; 14
    a04c:	72 2e       	mov	r7, r18
	lcd_printf(1, 1, PSTR("1)1:   5)5:"));
	lcd_printf(2, 1, PSTR("2)2:   6)6:"));
	lcd_printf(3, 1, PSTR("3)3:   7)7:   #)Save"));
	lcd_printf(4, 1, PSTR("4)4:   8)8:   *)Exit"));

	for(i=0;i< 8;i++){
    a04e:	9e e0       	ldi	r25, 0x0E	; 14
    a050:	89 2e       	mov	r8, r25
    a052:	91 2c       	mov	r9, r1
    a054:	8c 0e       	add	r8, r28
    a056:	9d 1e       	adc	r9, r29
	MaxCountId=99;
	lcd_clear();_delay_ms(10);
	lcd_printf(1, 1, PSTR("1)1:   5)5:"));
	lcd_printf(2, 1, PSTR("2)2:   6)6:"));
	lcd_printf(3, 1, PSTR("3)3:   7)7:   #)Save"));
	lcd_printf(4, 1, PSTR("4)4:   8)8:   *)Exit"));
    a058:	1e 2d       	mov	r17, r14
    a05a:	1c 19       	sub	r17, r12

	for(i=0;i< 8;i++){
	    sprintf_P(strLabel,PSTR("%.2d"),PPumpLabel[i]);
    a05c:	00 d0       	rcall	.+0      	; 0xa05e <FMenuPumpLabel+0xa6>
    a05e:	00 d0       	rcall	.+0      	; 0xa060 <FMenuPumpLabel+0xa8>
    a060:	00 d0       	rcall	.+0      	; 0xa062 <FMenuPumpLabel+0xaa>
    a062:	ed b7       	in	r30, 0x3d	; 61
    a064:	fe b7       	in	r31, 0x3e	; 62
    a066:	31 96       	adiw	r30, 0x01	; 1
    a068:	ad b7       	in	r26, 0x3d	; 61
    a06a:	be b7       	in	r27, 0x3e	; 62
    a06c:	12 96       	adiw	r26, 0x02	; 2
    a06e:	bc 92       	st	X, r11
    a070:	ae 92       	st	-X, r10
    a072:	11 97       	sbiw	r26, 0x01	; 1
    a074:	73 82       	std	Z+3, r7	; 0x03
    a076:	62 82       	std	Z+2, r6	; 0x02
    a078:	d7 01       	movw	r26, r14
    a07a:	8d 91       	ld	r24, X+
    a07c:	7d 01       	movw	r14, r26
    a07e:	84 83       	std	Z+4, r24	; 0x04
    a080:	15 82       	std	Z+5, r1	; 0x05
    a082:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
		xPos=1+(i%4);
		yPos=5+(i/4)*8;
        lcd_print(xPos,yPos,strLabel);
    a086:	ed b7       	in	r30, 0x3d	; 61
    a088:	fe b7       	in	r31, 0x3e	; 62
    a08a:	36 96       	adiw	r30, 0x06	; 6
    a08c:	0f b6       	in	r0, 0x3f	; 63
    a08e:	f8 94       	cli
    a090:	fe bf       	out	0x3e, r31	; 62
    a092:	0f be       	out	0x3f, r0	; 63
    a094:	ed bf       	out	0x3d, r30	; 61
    a096:	61 2f       	mov	r22, r17
    a098:	66 95       	lsr	r22
    a09a:	66 95       	lsr	r22
    a09c:	66 0f       	add	r22, r22
    a09e:	66 0f       	add	r22, r22
    a0a0:	66 0f       	add	r22, r22
    a0a2:	6b 5f       	subi	r22, 0xFB	; 251
    a0a4:	13 70       	andi	r17, 0x03	; 3
    a0a6:	81 2f       	mov	r24, r17
    a0a8:	8f 5f       	subi	r24, 0xFF	; 255
    a0aa:	a5 01       	movw	r20, r10
    a0ac:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
	lcd_printf(1, 1, PSTR("1)1:   5)5:"));
	lcd_printf(2, 1, PSTR("2)2:   6)6:"));
	lcd_printf(3, 1, PSTR("3)3:   7)7:   #)Save"));
	lcd_printf(4, 1, PSTR("4)4:   8)8:   *)Exit"));

	for(i=0;i< 8;i++){
    a0b0:	e8 14       	cp	r14, r8
    a0b2:	f9 04       	cpc	r15, r9
    a0b4:	89 f6       	brne	.-94     	; 0xa058 <FMenuPumpLabel+0xa0>
			eeprom_write_block((const void*) &PPumpLabel, (void*) &DefPumpLabel, 8);
			break;
		}
		if ((KeyChar>='1') && (KeyChar<= '8')){
		     i=(KeyChar-'1');
			if(PPumpLabel[i] == MaxCountId)
    a0b6:	86 e0       	ldi	r24, 0x06	; 6
    a0b8:	c8 2e       	mov	r12, r24
    a0ba:	d1 2c       	mov	r13, r1
    a0bc:	cc 0e       	add	r12, r28
    a0be:	dd 1e       	adc	r13, r29
			   PPumpLabel[i] = 0;
			else
			   PPumpLabel[i]++;
            xPos=1+(i%4);
		    yPos=5+(i/4)*8;
			sprintf_P(strLabel,PSTR("%.2d"),PPumpLabel[i]);
    a0c0:	7e 01       	movw	r14, r28
    a0c2:	08 94       	sec
    a0c4:	e1 1c       	adc	r14, r1
    a0c6:	f1 1c       	adc	r15, r1
    a0c8:	1f e3       	ldi	r17, 0x3F	; 63
    a0ca:	a1 2e       	mov	r10, r17
    a0cc:	1e e0       	ldi	r17, 0x0E	; 14
    a0ce:	b1 2e       	mov	r11, r17
		yPos=5+(i/4)*8;
        lcd_print(xPos,yPos,strLabel);
	}

	while(1){
		KeyPressed = _key_scan(1);
    a0d0:	81 e0       	ldi	r24, 0x01	; 1
    a0d2:	0e 94 f6 a5 	call	0x14bec	; 0x14bec <_key_scan>
    a0d6:	18 2f       	mov	r17, r24
		KeyChar    = _key_btn(KeyPressed);
    a0d8:	0e 94 57 a5 	call	0x14aae	; 0x14aae <_key_btn>
		if(KeyPressed == _KEY_CANCEL)break;
    a0dc:	17 3e       	cpi	r17, 0xE7	; 231
    a0de:	09 f4       	brne	.+2      	; 0xa0e2 <FMenuPumpLabel+0x12a>
    a0e0:	48 c0       	rjmp	.+144    	; 0xa172 <FMenuPumpLabel+0x1ba>
		else
		if(KeyPressed == _KEY_ENTER){
    a0e2:	17 3b       	cpi	r17, 0xB7	; 183
    a0e4:	49 f4       	brne	.+18     	; 0xa0f8 <FMenuPumpLabel+0x140>
			eeprom_write_block((const void*) &PPumpLabel, (void*) &DefPumpLabel, 8);
    a0e6:	ce 01       	movw	r24, r28
    a0e8:	06 96       	adiw	r24, 0x06	; 6
    a0ea:	6d e4       	ldi	r22, 0x4D	; 77
    a0ec:	70 e0       	ldi	r23, 0x00	; 0
    a0ee:	48 e0       	ldi	r20, 0x08	; 8
    a0f0:	50 e0       	ldi	r21, 0x00	; 0
    a0f2:	0e 94 d1 ac 	call	0x159a2	; 0x159a2 <__eewr_block_m128>
    a0f6:	3d c0       	rjmp	.+122    	; 0xa172 <FMenuPumpLabel+0x1ba>
			break;
		}
		if ((KeyChar>='1') && (KeyChar<= '8')){
    a0f8:	18 2f       	mov	r17, r24
    a0fa:	11 53       	subi	r17, 0x31	; 49
    a0fc:	18 30       	cpi	r17, 0x08	; 8
    a0fe:	40 f7       	brcc	.-48     	; 0xa0d0 <FMenuPumpLabel+0x118>
		     i=(KeyChar-'1');
			if(PPumpLabel[i] == MaxCountId)
    a100:	a1 2f       	mov	r26, r17
    a102:	b0 e0       	ldi	r27, 0x00	; 0
    a104:	f6 01       	movw	r30, r12
    a106:	ea 0f       	add	r30, r26
    a108:	fb 1f       	adc	r31, r27
    a10a:	90 81       	ld	r25, Z
    a10c:	80 91 56 01 	lds	r24, 0x0156
    a110:	98 17       	cp	r25, r24
    a112:	11 f4       	brne	.+4      	; 0xa118 <FMenuPumpLabel+0x160>
			   PPumpLabel[i] = 0;
    a114:	10 82       	st	Z, r1
    a116:	02 c0       	rjmp	.+4      	; 0xa11c <FMenuPumpLabel+0x164>
			else
			   PPumpLabel[i]++;
    a118:	9f 5f       	subi	r25, 0xFF	; 255
    a11a:	90 83       	st	Z, r25
            xPos=1+(i%4);
		    yPos=5+(i/4)*8;
			sprintf_P(strLabel,PSTR("%.2d"),PPumpLabel[i]);
    a11c:	00 d0       	rcall	.+0      	; 0xa11e <FMenuPumpLabel+0x166>
    a11e:	00 d0       	rcall	.+0      	; 0xa120 <FMenuPumpLabel+0x168>
    a120:	00 d0       	rcall	.+0      	; 0xa122 <FMenuPumpLabel+0x16a>
    a122:	2d b7       	in	r18, 0x3d	; 61
    a124:	3e b7       	in	r19, 0x3e	; 62
    a126:	2f 5f       	subi	r18, 0xFF	; 255
    a128:	3f 4f       	sbci	r19, 0xFF	; 255
    a12a:	ed b7       	in	r30, 0x3d	; 61
    a12c:	fe b7       	in	r31, 0x3e	; 62
    a12e:	f2 82       	std	Z+2, r15	; 0x02
    a130:	e1 82       	std	Z+1, r14	; 0x01
    a132:	f9 01       	movw	r30, r18
    a134:	b3 82       	std	Z+3, r11	; 0x03
    a136:	a2 82       	std	Z+2, r10	; 0x02
    a138:	ac 0d       	add	r26, r12
    a13a:	bd 1d       	adc	r27, r13
    a13c:	8c 91       	ld	r24, X
    a13e:	84 83       	std	Z+4, r24	; 0x04
    a140:	15 82       	std	Z+5, r1	; 0x05
    a142:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
            lcd_print(xPos,yPos,strLabel);
    a146:	8d b7       	in	r24, 0x3d	; 61
    a148:	9e b7       	in	r25, 0x3e	; 62
    a14a:	06 96       	adiw	r24, 0x06	; 6
    a14c:	0f b6       	in	r0, 0x3f	; 63
    a14e:	f8 94       	cli
    a150:	9e bf       	out	0x3e, r25	; 62
    a152:	0f be       	out	0x3f, r0	; 63
    a154:	8d bf       	out	0x3d, r24	; 61
    a156:	61 2f       	mov	r22, r17
    a158:	66 95       	lsr	r22
    a15a:	66 95       	lsr	r22
    a15c:	66 0f       	add	r22, r22
    a15e:	66 0f       	add	r22, r22
    a160:	66 0f       	add	r22, r22
    a162:	6b 5f       	subi	r22, 0xFB	; 251
    a164:	13 70       	andi	r17, 0x03	; 3
    a166:	81 2f       	mov	r24, r17
    a168:	8f 5f       	subi	r24, 0xFF	; 255
    a16a:	a7 01       	movw	r20, r14
    a16c:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
    a170:	af cf       	rjmp	.-162    	; 0xa0d0 <FMenuPumpLabel+0x118>
		}
	}
}
    a172:	2d 96       	adiw	r28, 0x0d	; 13
    a174:	0f b6       	in	r0, 0x3f	; 63
    a176:	f8 94       	cli
    a178:	de bf       	out	0x3e, r29	; 62
    a17a:	0f be       	out	0x3f, r0	; 63
    a17c:	cd bf       	out	0x3d, r28	; 61
    a17e:	cf 91       	pop	r28
    a180:	df 91       	pop	r29
    a182:	1f 91       	pop	r17
    a184:	ff 90       	pop	r15
    a186:	ef 90       	pop	r14
    a188:	df 90       	pop	r13
    a18a:	cf 90       	pop	r12
    a18c:	bf 90       	pop	r11
    a18e:	af 90       	pop	r10
    a190:	9f 90       	pop	r9
    a192:	8f 90       	pop	r8
    a194:	7f 90       	pop	r7
    a196:	6f 90       	pop	r6
    a198:	08 95       	ret

0000a19a <FSettingDec>:

	Result=MENU_DONE;
	return Result;
}

char FSettingDec(){
    a19a:	cf 92       	push	r12
    a19c:	df 92       	push	r13
    a19e:	ef 92       	push	r14
    a1a0:	ff 92       	push	r15
    a1a2:	0f 93       	push	r16
    a1a4:	1f 93       	push	r17
    a1a6:	df 93       	push	r29
    a1a8:	cf 93       	push	r28
    a1aa:	cd b7       	in	r28, 0x3d	; 61
    a1ac:	de b7       	in	r29, 0x3e	; 62
    a1ae:	64 97       	sbiw	r28, 0x14	; 20
    a1b0:	0f b6       	in	r0, 0x3f	; 63
    a1b2:	f8 94       	cli
    a1b4:	de bf       	out	0x3e, r29	; 62
    a1b6:	0f be       	out	0x3f, r0	; 63
    a1b8:	cd bf       	out	0x3d, r28	; 61
static char stSettingDecimal=sdInitDisplay;
     char PDecimalConfig[4],Addr,KeyChar,Result;
	 char lcdteks[20];

     Result=MENU_NONE;
	 switch(stSettingDecimal){
    a1ba:	80 91 1f 02 	lds	r24, 0x021F
    a1be:	82 30       	cpi	r24, 0x02	; 2
    a1c0:	09 f4       	brne	.+2      	; 0xa1c4 <FSettingDec+0x2a>
    a1c2:	b2 c0       	rjmp	.+356    	; 0xa328 <FSettingDec+0x18e>
    a1c4:	83 30       	cpi	r24, 0x03	; 3
    a1c6:	30 f4       	brcc	.+12     	; 0xa1d4 <FSettingDec+0x3a>
    a1c8:	88 23       	and	r24, r24
    a1ca:	71 f0       	breq	.+28     	; 0xa1e8 <FSettingDec+0x4e>
    a1cc:	81 30       	cpi	r24, 0x01	; 1
    a1ce:	09 f0       	breq	.+2      	; 0xa1d2 <FSettingDec+0x38>
    a1d0:	82 c1       	rjmp	.+772    	; 0xa4d6 <FSettingDec+0x33c>
    a1d2:	89 c0       	rjmp	.+274    	; 0xa2e6 <FSettingDec+0x14c>
    a1d4:	84 30       	cpi	r24, 0x04	; 4
    a1d6:	09 f4       	brne	.+2      	; 0xa1da <FSettingDec+0x40>
    a1d8:	76 c1       	rjmp	.+748    	; 0xa4c6 <FSettingDec+0x32c>
    a1da:	84 30       	cpi	r24, 0x04	; 4
    a1dc:	08 f4       	brcc	.+2      	; 0xa1e0 <FSettingDec+0x46>
    a1de:	47 c1       	rjmp	.+654    	; 0xa46e <FSettingDec+0x2d4>
    a1e0:	85 30       	cpi	r24, 0x05	; 5
    a1e2:	09 f0       	breq	.+2      	; 0xa1e6 <FSettingDec+0x4c>
    a1e4:	78 c1       	rjmp	.+752    	; 0xa4d6 <FSettingDec+0x33c>
    a1e6:	73 c1       	rjmp	.+742    	; 0xa4ce <FSettingDec+0x334>
	 case sdInitDisplay:
	      lcd_clear();         //"12345678901234567890
    a1e8:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
		  PDecimalConfig[0]=eeprom_read_byte(&DefDecimalPrice);
    a1ec:	89 e3       	ldi	r24, 0x39	; 57
    a1ee:	90 e0       	ldi	r25, 0x00	; 0
    a1f0:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
    a1f4:	f8 2e       	mov	r15, r24
		  PDecimalConfig[1]=eeprom_read_byte(&DefDecimalVolume);
    a1f6:	8a e3       	ldi	r24, 0x3A	; 58
    a1f8:	90 e0       	ldi	r25, 0x00	; 0
    a1fa:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
    a1fe:	e8 2e       	mov	r14, r24
		  PDecimalConfig[2]=eeprom_read_byte(&DefDecimalMoney);
    a200:	8b e3       	ldi	r24, 0x3B	; 59
    a202:	90 e0       	ldi	r25, 0x00	; 0
    a204:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
    a208:	d8 2e       	mov	r13, r24

		  sprintf_P(lcdteks,PSTR("1.Price :%d"),PDecimalConfig[0]);
    a20a:	00 d0       	rcall	.+0      	; 0xa20c <FSettingDec+0x72>
    a20c:	00 d0       	rcall	.+0      	; 0xa20e <FSettingDec+0x74>
    a20e:	00 d0       	rcall	.+0      	; 0xa210 <FSettingDec+0x76>
    a210:	ed b7       	in	r30, 0x3d	; 61
    a212:	fe b7       	in	r31, 0x3e	; 62
    a214:	31 96       	adiw	r30, 0x01	; 1
    a216:	8e 01       	movw	r16, r28
    a218:	0f 5f       	subi	r16, 0xFF	; 255
    a21a:	1f 4f       	sbci	r17, 0xFF	; 255
    a21c:	ad b7       	in	r26, 0x3d	; 61
    a21e:	be b7       	in	r27, 0x3e	; 62
    a220:	12 96       	adiw	r26, 0x02	; 2
    a222:	1c 93       	st	X, r17
    a224:	0e 93       	st	-X, r16
    a226:	11 97       	sbiw	r26, 0x01	; 1
    a228:	84 ef       	ldi	r24, 0xF4	; 244
    a22a:	92 e1       	ldi	r25, 0x12	; 18
    a22c:	93 83       	std	Z+3, r25	; 0x03
    a22e:	82 83       	std	Z+2, r24	; 0x02
    a230:	f4 82       	std	Z+4, r15	; 0x04
    a232:	15 82       	std	Z+5, r1	; 0x05
    a234:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
		  lcd_print(1,1,lcdteks);
    a238:	8d b7       	in	r24, 0x3d	; 61
    a23a:	9e b7       	in	r25, 0x3e	; 62
    a23c:	06 96       	adiw	r24, 0x06	; 6
    a23e:	0f b6       	in	r0, 0x3f	; 63
    a240:	f8 94       	cli
    a242:	9e bf       	out	0x3e, r25	; 62
    a244:	0f be       	out	0x3f, r0	; 63
    a246:	8d bf       	out	0x3d, r24	; 61
    a248:	81 e0       	ldi	r24, 0x01	; 1
    a24a:	61 e0       	ldi	r22, 0x01	; 1
    a24c:	a8 01       	movw	r20, r16
    a24e:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
		  sprintf_P(lcdteks,PSTR("2.Volume:%d"),PDecimalConfig[1]);
    a252:	00 d0       	rcall	.+0      	; 0xa254 <FSettingDec+0xba>
    a254:	00 d0       	rcall	.+0      	; 0xa256 <FSettingDec+0xbc>
    a256:	00 d0       	rcall	.+0      	; 0xa258 <FSettingDec+0xbe>
    a258:	ed b7       	in	r30, 0x3d	; 61
    a25a:	fe b7       	in	r31, 0x3e	; 62
    a25c:	31 96       	adiw	r30, 0x01	; 1
    a25e:	ad b7       	in	r26, 0x3d	; 61
    a260:	be b7       	in	r27, 0x3e	; 62
    a262:	12 96       	adiw	r26, 0x02	; 2
    a264:	1c 93       	st	X, r17
    a266:	0e 93       	st	-X, r16
    a268:	11 97       	sbiw	r26, 0x01	; 1
    a26a:	88 ee       	ldi	r24, 0xE8	; 232
    a26c:	92 e1       	ldi	r25, 0x12	; 18
    a26e:	93 83       	std	Z+3, r25	; 0x03
    a270:	82 83       	std	Z+2, r24	; 0x02
    a272:	e4 82       	std	Z+4, r14	; 0x04
    a274:	15 82       	std	Z+5, r1	; 0x05
    a276:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
		  lcd_print(2,1,lcdteks);
    a27a:	8d b7       	in	r24, 0x3d	; 61
    a27c:	9e b7       	in	r25, 0x3e	; 62
    a27e:	06 96       	adiw	r24, 0x06	; 6
    a280:	0f b6       	in	r0, 0x3f	; 63
    a282:	f8 94       	cli
    a284:	9e bf       	out	0x3e, r25	; 62
    a286:	0f be       	out	0x3f, r0	; 63
    a288:	8d bf       	out	0x3d, r24	; 61
    a28a:	82 e0       	ldi	r24, 0x02	; 2
    a28c:	61 e0       	ldi	r22, 0x01	; 1
    a28e:	a8 01       	movw	r20, r16
    a290:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
		  sprintf_P(lcdteks,PSTR("3.Money :%d"),PDecimalConfig[2]);
    a294:	00 d0       	rcall	.+0      	; 0xa296 <FSettingDec+0xfc>
    a296:	00 d0       	rcall	.+0      	; 0xa298 <FSettingDec+0xfe>
    a298:	00 d0       	rcall	.+0      	; 0xa29a <FSettingDec+0x100>
    a29a:	ed b7       	in	r30, 0x3d	; 61
    a29c:	fe b7       	in	r31, 0x3e	; 62
    a29e:	31 96       	adiw	r30, 0x01	; 1
    a2a0:	ad b7       	in	r26, 0x3d	; 61
    a2a2:	be b7       	in	r27, 0x3e	; 62
    a2a4:	12 96       	adiw	r26, 0x02	; 2
    a2a6:	1c 93       	st	X, r17
    a2a8:	0e 93       	st	-X, r16
    a2aa:	11 97       	sbiw	r26, 0x01	; 1
    a2ac:	8c ed       	ldi	r24, 0xDC	; 220
    a2ae:	92 e1       	ldi	r25, 0x12	; 18
    a2b0:	93 83       	std	Z+3, r25	; 0x03
    a2b2:	82 83       	std	Z+2, r24	; 0x02
    a2b4:	d4 82       	std	Z+4, r13	; 0x04
    a2b6:	15 82       	std	Z+5, r1	; 0x05
    a2b8:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
		  lcd_print(3,1,lcdteks);
    a2bc:	8d b7       	in	r24, 0x3d	; 61
    a2be:	9e b7       	in	r25, 0x3e	; 62
    a2c0:	06 96       	adiw	r24, 0x06	; 6
    a2c2:	0f b6       	in	r0, 0x3f	; 63
    a2c4:	f8 94       	cli
    a2c6:	9e bf       	out	0x3e, r25	; 62
    a2c8:	0f be       	out	0x3f, r0	; 63
    a2ca:	8d bf       	out	0x3d, r24	; 61
    a2cc:	83 e0       	ldi	r24, 0x03	; 3
    a2ce:	61 e0       	ldi	r22, 0x01	; 1
    a2d0:	a8 01       	movw	r20, r16
    a2d2:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
		  lcd_printf(4,1,PSTR("[*]Back  [#]Next"));
    a2d6:	84 e0       	ldi	r24, 0x04	; 4
    a2d8:	61 e0       	ldi	r22, 0x01	; 1
    a2da:	4b ec       	ldi	r20, 0xCB	; 203
    a2dc:	52 e1       	ldi	r21, 0x12	; 18
    a2de:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  stSettingDecimal=sdSelectKey1;
    a2e2:	81 e0       	ldi	r24, 0x01	; 1
    a2e4:	f1 c0       	rjmp	.+482    	; 0xa4c8 <FSettingDec+0x32e>
		  break;
     case sdSelectKey1:
          KeyChar=_key_btn(_key_scan(1));
    a2e6:	81 e0       	ldi	r24, 0x01	; 1
    a2e8:	0e 94 f6 a5 	call	0x14bec	; 0x14bec <_key_scan>
    a2ec:	0e 94 57 a5 	call	0x14aae	; 0x14aae <_key_btn>
		  if ((KeyChar>='1')&&(KeyChar<='3')){
    a2f0:	08 2f       	mov	r16, r24
    a2f2:	01 53       	subi	r16, 0x31	; 49
    a2f4:	03 30       	cpi	r16, 0x03	; 3
    a2f6:	80 f4       	brcc	.+32     	; 0xa318 <FSettingDec+0x17e>
		      Addr=KeyChar-'1';
		  	  PDecimalConfig[Addr]=eeprom_read_byte(&DefDecimalPrice+Addr);
    a2f8:	10 e0       	ldi	r17, 0x00	; 0
    a2fa:	07 5c       	subi	r16, 0xC7	; 199
    a2fc:	1f 4f       	sbci	r17, 0xFF	; 255
    a2fe:	c8 01       	movw	r24, r16
    a300:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
			  PDecimalConfig[Addr]=(PDecimalConfig[Addr]+1)%4;

			  eeprom_write_byte(&DefDecimalPrice+Addr,PDecimalConfig[Addr]);
    a304:	68 2f       	mov	r22, r24
    a306:	70 e0       	ldi	r23, 0x00	; 0
    a308:	6f 5f       	subi	r22, 0xFF	; 255
    a30a:	7f 4f       	sbci	r23, 0xFF	; 255
    a30c:	63 70       	andi	r22, 0x03	; 3
    a30e:	70 70       	andi	r23, 0x00	; 0
    a310:	c8 01       	movw	r24, r16
    a312:	0e 94 db ac 	call	0x159b6	; 0x159b6 <__eewr_byte_m128>
    a316:	d4 c0       	rjmp	.+424    	; 0xa4c0 <FSettingDec+0x326>
              stSettingDecimal=sdInitDisplay;
		  }else if (KeyChar=='*') stSettingDecimal=sdExitSettingDecimal;
    a318:	8a 32       	cpi	r24, 0x2A	; 42
    a31a:	11 f4       	brne	.+4      	; 0xa320 <FSettingDec+0x186>
    a31c:	85 e0       	ldi	r24, 0x05	; 5
    a31e:	d4 c0       	rjmp	.+424    	; 0xa4c8 <FSettingDec+0x32e>
		  else if (KeyChar=='#') stSettingDecimal=sdInitDisplay2;
    a320:	83 32       	cpi	r24, 0x23	; 35
    a322:	09 f0       	breq	.+2      	; 0xa326 <FSettingDec+0x18c>
    a324:	d8 c0       	rjmp	.+432    	; 0xa4d6 <FSettingDec+0x33c>
    a326:	cf c0       	rjmp	.+414    	; 0xa4c6 <FSettingDec+0x32c>
          break;
     case sdInitDisplay2:
		  PDecimalConfig[0]=eeprom_read_byte(&DefDecimalTotalVolume);
    a328:	8c e3       	ldi	r24, 0x3C	; 60
    a32a:	90 e0       	ldi	r25, 0x00	; 0
    a32c:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
    a330:	f8 2e       	mov	r15, r24
		  PDecimalConfig[1]=eeprom_read_byte(&DefDecimalTotalMoney);
    a332:	8d e3       	ldi	r24, 0x3D	; 61
    a334:	90 e0       	ldi	r25, 0x00	; 0
    a336:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
    a33a:	e8 2e       	mov	r14, r24
		  PDecimalConfig[2]=eeprom_read_byte(&DefDecimalMark);
    a33c:	8e e3       	ldi	r24, 0x3E	; 62
    a33e:	90 e0       	ldi	r25, 0x00	; 0
    a340:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
    a344:	d8 2e       	mov	r13, r24
		  PDecimalConfig[3]=eeprom_read_byte(&DefCurrencyMark);
    a346:	8f e3       	ldi	r24, 0x3F	; 63
    a348:	90 e0       	ldi	r25, 0x00	; 0
    a34a:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
    a34e:	c8 2e       	mov	r12, r24
		  sprintf_P(lcdteks,PSTR("1.T.Volume:%d "),PDecimalConfig[0]);
    a350:	00 d0       	rcall	.+0      	; 0xa352 <FSettingDec+0x1b8>
    a352:	00 d0       	rcall	.+0      	; 0xa354 <FSettingDec+0x1ba>
    a354:	00 d0       	rcall	.+0      	; 0xa356 <FSettingDec+0x1bc>
    a356:	ed b7       	in	r30, 0x3d	; 61
    a358:	fe b7       	in	r31, 0x3e	; 62
    a35a:	31 96       	adiw	r30, 0x01	; 1
    a35c:	8e 01       	movw	r16, r28
    a35e:	0f 5f       	subi	r16, 0xFF	; 255
    a360:	1f 4f       	sbci	r17, 0xFF	; 255
    a362:	ad b7       	in	r26, 0x3d	; 61
    a364:	be b7       	in	r27, 0x3e	; 62
    a366:	12 96       	adiw	r26, 0x02	; 2
    a368:	1c 93       	st	X, r17
    a36a:	0e 93       	st	-X, r16
    a36c:	11 97       	sbiw	r26, 0x01	; 1
    a36e:	8c eb       	ldi	r24, 0xBC	; 188
    a370:	92 e1       	ldi	r25, 0x12	; 18
    a372:	93 83       	std	Z+3, r25	; 0x03
    a374:	82 83       	std	Z+2, r24	; 0x02
    a376:	f4 82       	std	Z+4, r15	; 0x04
    a378:	15 82       	std	Z+5, r1	; 0x05
    a37a:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
		  lcd_print(1,1,lcdteks);
    a37e:	8d b7       	in	r24, 0x3d	; 61
    a380:	9e b7       	in	r25, 0x3e	; 62
    a382:	06 96       	adiw	r24, 0x06	; 6
    a384:	0f b6       	in	r0, 0x3f	; 63
    a386:	f8 94       	cli
    a388:	9e bf       	out	0x3e, r25	; 62
    a38a:	0f be       	out	0x3f, r0	; 63
    a38c:	8d bf       	out	0x3d, r24	; 61
    a38e:	81 e0       	ldi	r24, 0x01	; 1
    a390:	61 e0       	ldi	r22, 0x01	; 1
    a392:	a8 01       	movw	r20, r16
    a394:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
		  sprintf_P(lcdteks,PSTR("2.T.Money :%d "),PDecimalConfig[1]);
    a398:	00 d0       	rcall	.+0      	; 0xa39a <FSettingDec+0x200>
    a39a:	00 d0       	rcall	.+0      	; 0xa39c <FSettingDec+0x202>
    a39c:	00 d0       	rcall	.+0      	; 0xa39e <FSettingDec+0x204>
    a39e:	ed b7       	in	r30, 0x3d	; 61
    a3a0:	fe b7       	in	r31, 0x3e	; 62
    a3a2:	31 96       	adiw	r30, 0x01	; 1
    a3a4:	ad b7       	in	r26, 0x3d	; 61
    a3a6:	be b7       	in	r27, 0x3e	; 62
    a3a8:	12 96       	adiw	r26, 0x02	; 2
    a3aa:	1c 93       	st	X, r17
    a3ac:	0e 93       	st	-X, r16
    a3ae:	11 97       	sbiw	r26, 0x01	; 1
    a3b0:	8d ea       	ldi	r24, 0xAD	; 173
    a3b2:	92 e1       	ldi	r25, 0x12	; 18
    a3b4:	93 83       	std	Z+3, r25	; 0x03
    a3b6:	82 83       	std	Z+2, r24	; 0x02
    a3b8:	e4 82       	std	Z+4, r14	; 0x04
    a3ba:	15 82       	std	Z+5, r1	; 0x05
    a3bc:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
		  lcd_print(2,1,lcdteks);
    a3c0:	8d b7       	in	r24, 0x3d	; 61
    a3c2:	9e b7       	in	r25, 0x3e	; 62
    a3c4:	06 96       	adiw	r24, 0x06	; 6
    a3c6:	0f b6       	in	r0, 0x3f	; 63
    a3c8:	f8 94       	cli
    a3ca:	9e bf       	out	0x3e, r25	; 62
    a3cc:	0f be       	out	0x3f, r0	; 63
    a3ce:	8d bf       	out	0x3d, r24	; 61
    a3d0:	82 e0       	ldi	r24, 0x02	; 2
    a3d2:	61 e0       	ldi	r22, 0x01	; 1
    a3d4:	a8 01       	movw	r20, r16
    a3d6:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
		  sprintf_P(lcdteks,PSTR("3.Decimal :%c "),PDecimalConfig[2]);
    a3da:	00 d0       	rcall	.+0      	; 0xa3dc <FSettingDec+0x242>
    a3dc:	00 d0       	rcall	.+0      	; 0xa3de <FSettingDec+0x244>
    a3de:	00 d0       	rcall	.+0      	; 0xa3e0 <FSettingDec+0x246>
    a3e0:	ed b7       	in	r30, 0x3d	; 61
    a3e2:	fe b7       	in	r31, 0x3e	; 62
    a3e4:	31 96       	adiw	r30, 0x01	; 1
    a3e6:	ad b7       	in	r26, 0x3d	; 61
    a3e8:	be b7       	in	r27, 0x3e	; 62
    a3ea:	12 96       	adiw	r26, 0x02	; 2
    a3ec:	1c 93       	st	X, r17
    a3ee:	0e 93       	st	-X, r16
    a3f0:	11 97       	sbiw	r26, 0x01	; 1
    a3f2:	8e e9       	ldi	r24, 0x9E	; 158
    a3f4:	92 e1       	ldi	r25, 0x12	; 18
    a3f6:	93 83       	std	Z+3, r25	; 0x03
    a3f8:	82 83       	std	Z+2, r24	; 0x02
    a3fa:	d4 82       	std	Z+4, r13	; 0x04
    a3fc:	15 82       	std	Z+5, r1	; 0x05
    a3fe:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
		  lcd_print(3,1,lcdteks);
    a402:	8d b7       	in	r24, 0x3d	; 61
    a404:	9e b7       	in	r25, 0x3e	; 62
    a406:	06 96       	adiw	r24, 0x06	; 6
    a408:	0f b6       	in	r0, 0x3f	; 63
    a40a:	f8 94       	cli
    a40c:	9e bf       	out	0x3e, r25	; 62
    a40e:	0f be       	out	0x3f, r0	; 63
    a410:	8d bf       	out	0x3d, r24	; 61
    a412:	83 e0       	ldi	r24, 0x03	; 3
    a414:	61 e0       	ldi	r22, 0x01	; 1
    a416:	a8 01       	movw	r20, r16
    a418:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
		  sprintf_P(lcdteks,PSTR("4.Sparator:%c "),PDecimalConfig[3]);
    a41c:	00 d0       	rcall	.+0      	; 0xa41e <FSettingDec+0x284>
    a41e:	00 d0       	rcall	.+0      	; 0xa420 <FSettingDec+0x286>
    a420:	00 d0       	rcall	.+0      	; 0xa422 <FSettingDec+0x288>
    a422:	ed b7       	in	r30, 0x3d	; 61
    a424:	fe b7       	in	r31, 0x3e	; 62
    a426:	31 96       	adiw	r30, 0x01	; 1
    a428:	ad b7       	in	r26, 0x3d	; 61
    a42a:	be b7       	in	r27, 0x3e	; 62
    a42c:	12 96       	adiw	r26, 0x02	; 2
    a42e:	1c 93       	st	X, r17
    a430:	0e 93       	st	-X, r16
    a432:	11 97       	sbiw	r26, 0x01	; 1
    a434:	8f e8       	ldi	r24, 0x8F	; 143
    a436:	92 e1       	ldi	r25, 0x12	; 18
    a438:	93 83       	std	Z+3, r25	; 0x03
    a43a:	82 83       	std	Z+2, r24	; 0x02
    a43c:	c4 82       	std	Z+4, r12	; 0x04
    a43e:	15 82       	std	Z+5, r1	; 0x05
    a440:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
		  lcd_print(4,1,lcdteks);
    a444:	8d b7       	in	r24, 0x3d	; 61
    a446:	9e b7       	in	r25, 0x3e	; 62
    a448:	06 96       	adiw	r24, 0x06	; 6
    a44a:	0f b6       	in	r0, 0x3f	; 63
    a44c:	f8 94       	cli
    a44e:	9e bf       	out	0x3e, r25	; 62
    a450:	0f be       	out	0x3f, r0	; 63
    a452:	8d bf       	out	0x3d, r24	; 61
    a454:	84 e0       	ldi	r24, 0x04	; 4
    a456:	61 e0       	ldi	r22, 0x01	; 1
    a458:	a8 01       	movw	r20, r16
    a45a:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
		  lcd_printf(4,14,PSTR("*)Back"));
    a45e:	84 e0       	ldi	r24, 0x04	; 4
    a460:	6e e0       	ldi	r22, 0x0E	; 14
    a462:	48 e8       	ldi	r20, 0x88	; 136
    a464:	52 e1       	ldi	r21, 0x12	; 18
    a466:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
	      stSettingDecimal=sdSelectKey2;
    a46a:	83 e0       	ldi	r24, 0x03	; 3
    a46c:	2d c0       	rjmp	.+90     	; 0xa4c8 <FSettingDec+0x32e>
	      break;
     case sdSelectKey2:
          KeyChar=_key_btn(_key_scan(1));
    a46e:	81 e0       	ldi	r24, 0x01	; 1
    a470:	0e 94 f6 a5 	call	0x14bec	; 0x14bec <_key_scan>
    a474:	0e 94 57 a5 	call	0x14aae	; 0x14aae <_key_btn>
    a478:	98 2f       	mov	r25, r24
		  if ((KeyChar>='1')&&(KeyChar<='2')){
    a47a:	08 2f       	mov	r16, r24
    a47c:	01 53       	subi	r16, 0x31	; 49
    a47e:	02 30       	cpi	r16, 0x02	; 2
    a480:	68 f4       	brcc	.+26     	; 0xa49c <FSettingDec+0x302>
		      Addr=KeyChar-'1';
		  	  PDecimalConfig[Addr]=eeprom_read_byte(&DefDecimalTotalVolume+Addr);
    a482:	10 e0       	ldi	r17, 0x00	; 0
    a484:	04 5c       	subi	r16, 0xC4	; 196
    a486:	1f 4f       	sbci	r17, 0xFF	; 255
    a488:	c8 01       	movw	r24, r16
    a48a:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
		      PDecimalConfig[Addr]=(PDecimalConfig[Addr]+1)%4;

			  eeprom_write_byte(&DefDecimalTotalVolume+Addr,PDecimalConfig[Addr]);
    a48e:	68 2f       	mov	r22, r24
    a490:	70 e0       	ldi	r23, 0x00	; 0
    a492:	6f 5f       	subi	r22, 0xFF	; 255
    a494:	7f 4f       	sbci	r23, 0xFF	; 255
    a496:	63 70       	andi	r22, 0x03	; 3
    a498:	70 70       	andi	r23, 0x00	; 0
    a49a:	0c c0       	rjmp	.+24     	; 0xa4b4 <FSettingDec+0x31a>
              stSettingDecimal=sdInitDisplay2;
		  }else if ((KeyChar>='3')&&(KeyChar<='4')){
    a49c:	83 53       	subi	r24, 0x33	; 51
    a49e:	82 30       	cpi	r24, 0x02	; 2
    a4a0:	68 f4       	brcc	.+26     	; 0xa4bc <FSettingDec+0x322>
		      Addr=KeyChar-'1';
		  	  PDecimalConfig[Addr]=eeprom_read_byte(&DefDecimalTotalVolume+Addr);
    a4a2:	10 e0       	ldi	r17, 0x00	; 0
    a4a4:	04 5c       	subi	r16, 0xC4	; 196
    a4a6:	1f 4f       	sbci	r17, 0xFF	; 255
    a4a8:	c8 01       	movw	r24, r16
    a4aa:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
			  PDecimalConfig[Addr]=SelectMark(PDecimalConfig[Addr]);
    a4ae:	0e 94 39 21 	call	0x4272	; 0x4272 <SelectMark>
    a4b2:	68 2f       	mov	r22, r24
			  eeprom_write_byte(&DefDecimalTotalVolume+Addr,PDecimalConfig[Addr]);
    a4b4:	c8 01       	movw	r24, r16
    a4b6:	0e 94 db ac 	call	0x159b6	; 0x159b6 <__eewr_byte_m128>
    a4ba:	05 c0       	rjmp	.+10     	; 0xa4c6 <FSettingDec+0x32c>
              stSettingDecimal=sdInitDisplay2;
		  }else if (KeyChar=='*') stSettingDecimal=sdInitDisplay;
    a4bc:	9a 32       	cpi	r25, 0x2A	; 42
    a4be:	59 f4       	brne	.+22     	; 0xa4d6 <FSettingDec+0x33c>
    a4c0:	10 92 1f 02 	sts	0x021F, r1
    a4c4:	08 c0       	rjmp	.+16     	; 0xa4d6 <FSettingDec+0x33c>
		          stSettingDecimal=sdTestInput;
				  }*/
          break;
     case sdTestInput:
	      //if (TestUserInput()==MENU_DONE)
		  stSettingDecimal=sdInitDisplay2;
    a4c6:	82 e0       	ldi	r24, 0x02	; 2
    a4c8:	80 93 1f 02 	sts	0x021F, r24
    a4cc:	04 c0       	rjmp	.+8      	; 0xa4d6 <FSettingDec+0x33c>
	      break;
	 case sdExitSettingDecimal:
          stSettingDecimal=sdInitDisplay;
    a4ce:	10 92 1f 02 	sts	0x021F, r1
    a4d2:	81 e0       	ldi	r24, 0x01	; 1
    a4d4:	01 c0       	rjmp	.+2      	; 0xa4d8 <FSettingDec+0x33e>
    a4d6:	80 e0       	ldi	r24, 0x00	; 0
		  Result=MENU_DONE;
	      break;
	 }
    return Result;
}
    a4d8:	64 96       	adiw	r28, 0x14	; 20
    a4da:	0f b6       	in	r0, 0x3f	; 63
    a4dc:	f8 94       	cli
    a4de:	de bf       	out	0x3e, r29	; 62
    a4e0:	0f be       	out	0x3f, r0	; 63
    a4e2:	cd bf       	out	0x3d, r28	; 61
    a4e4:	cf 91       	pop	r28
    a4e6:	df 91       	pop	r29
    a4e8:	1f 91       	pop	r17
    a4ea:	0f 91       	pop	r16
    a4ec:	ff 90       	pop	r15
    a4ee:	ef 90       	pop	r14
    a4f0:	df 90       	pop	r13
    a4f2:	cf 90       	pop	r12
    a4f4:	08 95       	ret

0000a4f6 <FMenuShift>:
static char stMenuShift=msInitMenuShift;
     char SubMenu,KeyChar,KeyPressed;
     char Result;

Result=MENU_NONE;
     switch(stMenuShift){
    a4f6:	80 91 4a 02 	lds	r24, 0x024A
    a4fa:	82 30       	cpi	r24, 0x02	; 2
    a4fc:	09 f4       	brne	.+2      	; 0xa500 <FMenuShift+0xa>
    a4fe:	48 c0       	rjmp	.+144    	; 0xa590 <FMenuShift+0x9a>
    a500:	83 30       	cpi	r24, 0x03	; 3
    a502:	30 f4       	brcc	.+12     	; 0xa510 <FMenuShift+0x1a>
    a504:	88 23       	and	r24, r24
    a506:	69 f0       	breq	.+26     	; 0xa522 <FMenuShift+0x2c>
    a508:	81 30       	cpi	r24, 0x01	; 1
    a50a:	09 f0       	breq	.+2      	; 0xa50e <FMenuShift+0x18>
    a50c:	50 c0       	rjmp	.+160    	; 0xa5ae <FMenuShift+0xb8>
    a50e:	25 c0       	rjmp	.+74     	; 0xa55a <FMenuShift+0x64>
    a510:	84 30       	cpi	r24, 0x04	; 4
    a512:	09 f4       	brne	.+2      	; 0xa516 <FMenuShift+0x20>
    a514:	4c c0       	rjmp	.+152    	; 0xa5ae <FMenuShift+0xb8>
    a516:	84 30       	cpi	r24, 0x04	; 4
    a518:	e8 f1       	brcs	.+122    	; 0xa594 <FMenuShift+0x9e>
    a51a:	85 30       	cpi	r24, 0x05	; 5
    a51c:	09 f0       	breq	.+2      	; 0xa520 <FMenuShift+0x2a>
    a51e:	47 c0       	rjmp	.+142    	; 0xa5ae <FMenuShift+0xb8>
    a520:	42 c0       	rjmp	.+132    	; 0xa5a6 <FMenuShift+0xb0>
	 case msInitMenuShift:
	      lcd_clear();
    a522:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
		  lcd_printf(1,1,PSTR("1.Close Shift"));
    a526:	81 e0       	ldi	r24, 0x01	; 1
    a528:	61 e0       	ldi	r22, 0x01	; 1
    a52a:	45 e6       	ldi	r20, 0x65	; 101
    a52c:	57 e1       	ldi	r21, 0x17	; 23
    a52e:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  lcd_printf(2,1,PSTR("2.Close Day  "));
    a532:	82 e0       	ldi	r24, 0x02	; 2
    a534:	61 e0       	ldi	r22, 0x01	; 1
    a536:	47 e5       	ldi	r20, 0x57	; 87
    a538:	57 e1       	ldi	r21, 0x17	; 23
    a53a:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  lcd_printf(3,1,PSTR("3.Lock Pump  "));
    a53e:	83 e0       	ldi	r24, 0x03	; 3
    a540:	61 e0       	ldi	r22, 0x01	; 1
    a542:	49 e4       	ldi	r20, 0x49	; 73
    a544:	57 e1       	ldi	r21, 0x17	; 23
    a546:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  lcd_printf(4,1,PSTR("*)Exit"));
    a54a:	84 e0       	ldi	r24, 0x04	; 4
    a54c:	61 e0       	ldi	r22, 0x01	; 1
    a54e:	42 e4       	ldi	r20, 0x42	; 66
    a550:	57 e1       	ldi	r21, 0x17	; 23
    a552:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  stMenuShift=msSelectShift;
    a556:	81 e0       	ldi	r24, 0x01	; 1
    a558:	18 c0       	rjmp	.+48     	; 0xa58a <FMenuShift+0x94>
	      break;
     case msSelectShift:
          KeyPressed=_key_scan(1);
    a55a:	81 e0       	ldi	r24, 0x01	; 1
    a55c:	0e 94 f6 a5 	call	0x14bec	; 0x14bec <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
    a560:	0e 94 57 a5 	call	0x14aae	; 0x14aae <_key_btn>
          switch(KeyChar){
    a564:	82 33       	cpi	r24, 0x32	; 50
    a566:	61 f0       	breq	.+24     	; 0xa580 <FMenuShift+0x8a>
    a568:	83 33       	cpi	r24, 0x33	; 51
    a56a:	28 f4       	brcc	.+10     	; 0xa576 <FMenuShift+0x80>
    a56c:	8a 32       	cpi	r24, 0x2A	; 42
    a56e:	61 f0       	breq	.+24     	; 0xa588 <FMenuShift+0x92>
    a570:	81 33       	cpi	r24, 0x31	; 49
    a572:	e9 f4       	brne	.+58     	; 0xa5ae <FMenuShift+0xb8>
    a574:	03 c0       	rjmp	.+6      	; 0xa57c <FMenuShift+0x86>
    a576:	83 33       	cpi	r24, 0x33	; 51
    a578:	d1 f4       	brne	.+52     	; 0xa5ae <FMenuShift+0xb8>
    a57a:	04 c0       	rjmp	.+8      	; 0xa584 <FMenuShift+0x8e>
		  case '1':
		       SubMenu=MENU_NONE;
		       stMenuShift=msCloseShift;
    a57c:	82 e0       	ldi	r24, 0x02	; 2
    a57e:	05 c0       	rjmp	.+10     	; 0xa58a <FMenuShift+0x94>
		       break; 
		  case '2':
		       SubMenu=MENU_NONE;
		       stMenuShift=msCloseDay;
    a580:	83 e0       	ldi	r24, 0x03	; 3
    a582:	03 c0       	rjmp	.+6      	; 0xa58a <FMenuShift+0x94>
		       break; 
		  case '3':
		       SubMenu=MENU_NONE;
		       stMenuShift=msLockPump;
    a584:	84 e0       	ldi	r24, 0x04	; 4
    a586:	01 c0       	rjmp	.+2      	; 0xa58a <FMenuShift+0x94>
		       break; 
		  case '*':
		       stMenuShift=msExitShift;
    a588:	85 e0       	ldi	r24, 0x05	; 5
    a58a:	80 93 4a 02 	sts	0x024A, r24
    a58e:	09 c0       	rjmp	.+18     	; 0xa5a2 <FMenuShift+0xac>
		       break; 			   		  
		  }
		  break;
     case msCloseShift:
	      SubMenu=FCloseShift(CONTINUE_SHIFT);
    a590:	82 e0       	ldi	r24, 0x02	; 2
    a592:	01 c0       	rjmp	.+2      	; 0xa596 <FMenuShift+0xa0>
		  if (SubMenu==MENU_DONE)stMenuShift=msInitMenuShift;
		  //IsGenerateReport=True;		  
	      break;
     case msCloseDay:
	      SubMenu=FCloseShift(NEW_SHIFT);
    a594:	81 e0       	ldi	r24, 0x01	; 1
    a596:	0e 94 7d 49 	call	0x92fa	; 0x92fa <FCloseShift>
		  if (SubMenu==MENU_DONE)stMenuShift=msInitMenuShift;
    a59a:	81 30       	cpi	r24, 0x01	; 1
    a59c:	41 f4       	brne	.+16     	; 0xa5ae <FMenuShift+0xb8>
    a59e:	10 92 4a 02 	sts	0x024A, r1
    a5a2:	80 e0       	ldi	r24, 0x00	; 0
    a5a4:	08 95       	ret
     case msLockPump:
	      SubMenu=FLockPump();
		  if (SubMenu==MENU_DONE)stMenuShift=msInitMenuShift;
	      break;
     case msExitShift:
          stMenuShift=msInitMenuShift;
    a5a6:	10 92 4a 02 	sts	0x024A, r1
    a5aa:	81 e0       	ldi	r24, 0x01	; 1
    a5ac:	08 95       	ret
    a5ae:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
	      break;	 
	 } 
   return Result;
}
    a5b0:	08 95       	ret

0000a5b2 <system_stop>:
	return Result;
}

void system_stop(){
	 char __key,__num;
	 lcd_printf(4,1,PSTR("Press any key..     "));
    a5b2:	84 e0       	ldi	r24, 0x04	; 4
    a5b4:	61 e0       	ldi	r22, 0x01	; 1
    a5b6:	49 e9       	ldi	r20, 0x99	; 153
    a5b8:	53 e2       	ldi	r21, 0x23	; 35
    a5ba:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    a5be:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    a5c0:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    a5c2:	85 e0       	ldi	r24, 0x05	; 5
    a5c4:	80 93 bc 01 	sts	0x01BC, r24
void system_stop(){
	 char __key,__num;
	 lcd_printf(4,1,PSTR("Press any key..     "));
	 system_beep(5);
	 while(1){
		__key = _key_scan(1);
    a5c8:	81 e0       	ldi	r24, 0x01	; 1
    a5ca:	0e 94 f6 a5 	call	0x14bec	; 0x14bec <_key_scan>
		__num = _key_btn(__key);
    a5ce:	0e 94 57 a5 	call	0x14aae	; 0x14aae <_key_btn>
		if ((__num>='0')&&(__num<='9')||(IsStandAloneDetected==True)) 
    a5d2:	80 53       	subi	r24, 0x30	; 48
    a5d4:	8a 30       	cpi	r24, 0x0A	; 10
    a5d6:	20 f0       	brcs	.+8      	; 0xa5e0 <system_stop+0x2e>
    a5d8:	80 91 9c 01 	lds	r24, 0x019C
    a5dc:	81 30       	cpi	r24, 0x01	; 1
    a5de:	a1 f7       	brne	.-24     	; 0xa5c8 <system_stop+0x16>
    a5e0:	08 95       	ret

0000a5e2 <systemForceType>:
	 }
}

char systemForceType(){
     char Result,KeyChar;
	 lcd_printf(4,1,PSTR("[1]Slave [2]Standalone"));
    a5e2:	84 e0       	ldi	r24, 0x04	; 4
    a5e4:	61 e0       	ldi	r22, 0x01	; 1
    a5e6:	4e ea       	ldi	r20, 0xAE	; 174
    a5e8:	53 e2       	ldi	r21, 0x23	; 35
    a5ea:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    a5ee:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    a5f0:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    a5f2:	81 e0       	ldi	r24, 0x01	; 1
    a5f4:	80 93 bc 01 	sts	0x01BC, r24
    a5f8:	80 e5       	ldi	r24, 0x50	; 80
    a5fa:	93 ec       	ldi	r25, 0xC3	; 195
    a5fc:	01 97       	sbiw	r24, 0x01	; 1
    a5fe:	f1 f7       	brne	.-4      	; 0xa5fc <systemForceType+0x1a>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    a600:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    a602:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    a604:	82 e0       	ldi	r24, 0x02	; 2
    a606:	80 93 bc 01 	sts	0x01BC, r24
	 lcd_printf(4,1,PSTR("[1]Slave [2]Standalone"));
	 system_beep(1);
	 _delay_ms(200);
	 system_beep(2);
	 while(1){
	    KeyChar=_key_btn(_key_scan(1));
    a60a:	81 e0       	ldi	r24, 0x01	; 1
    a60c:	0e 94 f6 a5 	call	0x14bec	; 0x14bec <_key_scan>
    a610:	0e 94 57 a5 	call	0x14aae	; 0x14aae <_key_btn>
    a614:	98 2f       	mov	r25, r24
		if ((KeyChar=='1')||(KeyChar=='2')){
    a616:	81 53       	subi	r24, 0x31	; 49
    a618:	82 30       	cpi	r24, 0x02	; 2
    a61a:	b8 f7       	brcc	.-18     	; 0xa60a <systemForceType+0x28>
		    Result=KeyChar;
			break;
		}
	 }
	return Result;
}
    a61c:	89 2f       	mov	r24, r25
    a61e:	08 95       	ret

0000a620 <_menu_datetime>:
		}
	}
}


void _menu_datetime(void){
    a620:	8f 92       	push	r8
    a622:	9f 92       	push	r9
    a624:	af 92       	push	r10
    a626:	bf 92       	push	r11
    a628:	cf 92       	push	r12
    a62a:	df 92       	push	r13
    a62c:	ef 92       	push	r14
    a62e:	ff 92       	push	r15
    a630:	0f 93       	push	r16
    a632:	1f 93       	push	r17
    a634:	df 93       	push	r29
    a636:	cf 93       	push	r28
    a638:	cd b7       	in	r28, 0x3d	; 61
    a63a:	de b7       	in	r29, 0x3e	; 62
    a63c:	c2 54       	subi	r28, 0x42	; 66
    a63e:	d0 40       	sbci	r29, 0x00	; 0
    a640:	0f b6       	in	r0, 0x3f	; 63
    a642:	f8 94       	cli
    a644:	de bf       	out	0x3e, r29	; 62
    a646:	0f be       	out	0x3f, r0	; 63
    a648:	cd bf       	out	0x3d, r28	; 61
	char	__key, __chr;
	char	__date[9];
	char	__time[9];
	char	__map[12][4] = {	{1,  8, 0, 3}, {1,  9, 0, 9}, {1, 11, 0, 1}, {1, 12, 0, 9},
								{1, 14, 0, 9}, {1, 15, 0, 9}, {2,  8, 0, 2}, {2,  9, 0, 9},
								{2, 11, 0, 5}, {2, 12, 0, 9}, {2, 14, 0, 5}, {2, 15, 0, 9}};
    a64a:	de 01       	movw	r26, r28
    a64c:	53 96       	adiw	r26, 0x13	; 19
    a64e:	e6 e2       	ldi	r30, 0x26	; 38
    a650:	f1 e0       	ldi	r31, 0x01	; 1
    a652:	80 e3       	ldi	r24, 0x30	; 48
    a654:	01 90       	ld	r0, Z+
    a656:	0d 92       	st	X+, r0
    a658:	81 50       	subi	r24, 0x01	; 1
    a65a:	e1 f7       	brne	.-8      	; 0xa654 <_menu_datetime+0x34>

	_datetime(_DATETIME_READ, __date, __time);
    a65c:	8e 01       	movw	r16, r28
    a65e:	0f 5f       	subi	r16, 0xFF	; 255
    a660:	1f 4f       	sbci	r17, 0xFF	; 255
    a662:	b8 01       	movw	r22, r16
    a664:	ae 01       	movw	r20, r28
    a666:	46 5f       	subi	r20, 0xF6	; 246
    a668:	5f 4f       	sbci	r21, 0xFF	; 255
    a66a:	0e 94 57 a7 	call	0x14eae	; 0x14eae <_datetime>
    a66e:	85 e1       	ldi	r24, 0x15	; 21
    a670:	88 2e       	mov	r8, r24
    a672:	91 2c       	mov	r9, r1
    a674:	8c 0e       	add	r8, r28
    a676:	9d 1e       	adc	r9, r29
    a678:	d4 01       	movw	r26, r8
    a67a:	20 e0       	ldi	r18, 0x00	; 0
    a67c:	30 e0       	ldi	r19, 0x00	; 0
    a67e:	40 e0       	ldi	r20, 0x00	; 0
    a680:	50 e0       	ldi	r21, 0x00	; 0
	for(__i = 0, __ii = 0; __i < 6; __i++, __ii++){
		if(__i == 2 || __i == 4)
    a682:	22 30       	cpi	r18, 0x02	; 2
    a684:	31 05       	cpc	r19, r1
    a686:	19 f0       	breq	.+6      	; 0xa68e <_menu_datetime+0x6e>
    a688:	24 30       	cpi	r18, 0x04	; 4
    a68a:	31 05       	cpc	r19, r1
    a68c:	11 f4       	brne	.+4      	; 0xa692 <_menu_datetime+0x72>
			__ii++;
    a68e:	4f 5f       	subi	r20, 0xFF	; 255
    a690:	5f 4f       	sbci	r21, 0xFF	; 255
		__map[__i][2] = __date[__ii];
    a692:	f8 01       	movw	r30, r16
    a694:	e4 0f       	add	r30, r20
    a696:	f5 1f       	adc	r31, r21
    a698:	80 81       	ld	r24, Z
    a69a:	8c 93       	st	X, r24
	char	__map[12][4] = {	{1,  8, 0, 3}, {1,  9, 0, 9}, {1, 11, 0, 1}, {1, 12, 0, 9},
								{1, 14, 0, 9}, {1, 15, 0, 9}, {2,  8, 0, 2}, {2,  9, 0, 9},
								{2, 11, 0, 5}, {2, 12, 0, 9}, {2, 14, 0, 5}, {2, 15, 0, 9}};

	_datetime(_DATETIME_READ, __date, __time);
	for(__i = 0, __ii = 0; __i < 6; __i++, __ii++){
    a69c:	2f 5f       	subi	r18, 0xFF	; 255
    a69e:	3f 4f       	sbci	r19, 0xFF	; 255
    a6a0:	14 96       	adiw	r26, 0x04	; 4
    a6a2:	26 30       	cpi	r18, 0x06	; 6
    a6a4:	31 05       	cpc	r19, r1
    a6a6:	19 f0       	breq	.+6      	; 0xa6ae <_menu_datetime+0x8e>
    a6a8:	4f 5f       	subi	r20, 0xFF	; 255
    a6aa:	5f 4f       	sbci	r21, 0xFF	; 255
    a6ac:	ea cf       	rjmp	.-44     	; 0xa682 <_menu_datetime+0x62>
    a6ae:	0d e2       	ldi	r16, 0x2D	; 45
    a6b0:	a0 2e       	mov	r10, r16
    a6b2:	b1 2c       	mov	r11, r1
    a6b4:	ac 0e       	add	r10, r28
    a6b6:	bd 1e       	adc	r11, r29
    a6b8:	d5 01       	movw	r26, r10
    a6ba:	40 e0       	ldi	r20, 0x00	; 0
    a6bc:	50 e0       	ldi	r21, 0x00	; 0
		__map[__i][2] = __date[__ii];
	}
	for(__i = 6, __ii = 0; __i < 12; __i++, __ii++){
		if(__i == 8 || __i == 10)
			__ii++;
		__map[__i][2] = __time[__ii];
    a6be:	1a e0       	ldi	r17, 0x0A	; 10
    a6c0:	e1 2e       	mov	r14, r17
    a6c2:	f1 2c       	mov	r15, r1
    a6c4:	ec 0e       	add	r14, r28
    a6c6:	fd 1e       	adc	r15, r29
		if(__i == 2 || __i == 4)
			__ii++;
		__map[__i][2] = __date[__ii];
	}
	for(__i = 6, __ii = 0; __i < 12; __i++, __ii++){
		if(__i == 8 || __i == 10)
    a6c8:	28 30       	cpi	r18, 0x08	; 8
    a6ca:	31 05       	cpc	r19, r1
    a6cc:	19 f0       	breq	.+6      	; 0xa6d4 <_menu_datetime+0xb4>
    a6ce:	2a 30       	cpi	r18, 0x0A	; 10
    a6d0:	31 05       	cpc	r19, r1
    a6d2:	11 f4       	brne	.+4      	; 0xa6d8 <_menu_datetime+0xb8>
			__ii++;
    a6d4:	4f 5f       	subi	r20, 0xFF	; 255
    a6d6:	5f 4f       	sbci	r21, 0xFF	; 255
		__map[__i][2] = __time[__ii];
    a6d8:	f7 01       	movw	r30, r14
    a6da:	e4 0f       	add	r30, r20
    a6dc:	f5 1f       	adc	r31, r21
    a6de:	80 81       	ld	r24, Z
    a6e0:	8c 93       	st	X, r24
	for(__i = 0, __ii = 0; __i < 6; __i++, __ii++){
		if(__i == 2 || __i == 4)
			__ii++;
		__map[__i][2] = __date[__ii];
	}
	for(__i = 6, __ii = 0; __i < 12; __i++, __ii++){
    a6e2:	2f 5f       	subi	r18, 0xFF	; 255
    a6e4:	3f 4f       	sbci	r19, 0xFF	; 255
    a6e6:	14 96       	adiw	r26, 0x04	; 4
    a6e8:	2c 30       	cpi	r18, 0x0C	; 12
    a6ea:	31 05       	cpc	r19, r1
    a6ec:	19 f0       	breq	.+6      	; 0xa6f4 <_menu_datetime+0xd4>
    a6ee:	4f 5f       	subi	r20, 0xFF	; 255
    a6f0:	5f 4f       	sbci	r21, 0xFF	; 255
    a6f2:	ea cf       	rjmp	.-44     	; 0xa6c8 <_menu_datetime+0xa8>
		if(__i == 8 || __i == 10)
			__ii++;
		__map[__i][2] = __time[__ii];
	}

	lcd_clear();_delay_ms(10);
    a6f4:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
    a6f8:	84 ec       	ldi	r24, 0xC4	; 196
    a6fa:	99 e0       	ldi	r25, 0x09	; 9
    a6fc:	01 97       	sbiw	r24, 0x01	; 1
    a6fe:	f1 f7       	brne	.-4      	; 0xa6fc <_menu_datetime+0xdc>
	lcd_printf(1, 1, PSTR("DATE : "));
    a700:	81 e0       	ldi	r24, 0x01	; 1
    a702:	61 e0       	ldi	r22, 0x01	; 1
    a704:	49 e3       	ldi	r20, 0x39	; 57
    a706:	5d e0       	ldi	r21, 0x0D	; 13
    a708:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
	lcd_printf(2, 1, PSTR("TIME : "));
    a70c:	82 e0       	ldi	r24, 0x02	; 2
    a70e:	61 e0       	ldi	r22, 0x01	; 1
    a710:	41 e3       	ldi	r20, 0x31	; 49
    a712:	5d e0       	ldi	r21, 0x0D	; 13
    a714:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
	lcd_print(1, 8, __date);
    a718:	81 e0       	ldi	r24, 0x01	; 1
    a71a:	68 e0       	ldi	r22, 0x08	; 8
    a71c:	8e 01       	movw	r16, r28
    a71e:	0f 5f       	subi	r16, 0xFF	; 255
    a720:	1f 4f       	sbci	r17, 0xFF	; 255
    a722:	a8 01       	movw	r20, r16
    a724:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
	lcd_print(2, 8, __time);
    a728:	82 e0       	ldi	r24, 0x02	; 2
    a72a:	68 e0       	ldi	r22, 0x08	; 8
    a72c:	a7 01       	movw	r20, r14
    a72e:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
	lcd_printf(4, 1, PSTR("*)Cancel      #)Save"));
    a732:	84 e0       	ldi	r24, 0x04	; 4
    a734:	61 e0       	ldi	r22, 0x01	; 1
    a736:	4c e1       	ldi	r20, 0x1C	; 28
    a738:	5d e0       	ldi	r21, 0x0D	; 13
    a73a:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>

	__i = 0;
	lcd_xy(__map[__i][0], __map[__i][1]);
    a73e:	8b 89       	ldd	r24, Y+19	; 0x13
    a740:	6c 89       	ldd	r22, Y+20	; 0x14
    a742:	0e 94 3c a4 	call	0x14878	; 0x14878 <lcd_xy>
	CURSOR_SHOW;
    a746:	8f e0       	ldi	r24, 0x0F	; 15
    a748:	0e 94 a9 a3 	call	0x14752	; 0x14752 <lcd_command>
    a74c:	ee 24       	eor	r14, r14
    a74e:	ff 24       	eor	r15, r15
					else
						goto LEWAT;
				}
			}
CETAK:
			__map[__i][2] = __chr;
    a750:	68 01       	movw	r12, r16
	lcd_xy(__map[__i][0], __map[__i][1]);
	CURSOR_SHOW;

	while(1){
		
		__key = _key_scan(1);
    a752:	81 e0       	ldi	r24, 0x01	; 1
    a754:	0e 94 f6 a5 	call	0x14bec	; 0x14bec <_key_scan>
    a758:	18 2f       	mov	r17, r24
		__chr = _key_btn(__key);
    a75a:	0e 94 57 a5 	call	0x14aae	; 0x14aae <_key_btn>
    a75e:	48 2f       	mov	r20, r24
		if(__chr >= 0x30 && __chr <= 0x39){
    a760:	80 53       	subi	r24, 0x30	; 48
    a762:	8a 30       	cpi	r24, 0x0A	; 10
    a764:	08 f0       	brcs	.+2      	; 0xa768 <_menu_datetime+0x148>
    a766:	72 c0       	rjmp	.+228    	; 0xa84c <_menu_datetime+0x22c>
			if(__i == 0 || __i == 2 || __i == 6 || __i == 8 || __i == 10){
    a768:	e1 14       	cp	r14, r1
    a76a:	f1 04       	cpc	r15, r1
    a76c:	81 f0       	breq	.+32     	; 0xa78e <_menu_datetime+0x16e>
    a76e:	82 e0       	ldi	r24, 0x02	; 2
    a770:	e8 16       	cp	r14, r24
    a772:	f1 04       	cpc	r15, r1
    a774:	61 f0       	breq	.+24     	; 0xa78e <_menu_datetime+0x16e>
    a776:	96 e0       	ldi	r25, 0x06	; 6
    a778:	e9 16       	cp	r14, r25
    a77a:	f1 04       	cpc	r15, r1
    a77c:	41 f0       	breq	.+16     	; 0xa78e <_menu_datetime+0x16e>
    a77e:	a8 e0       	ldi	r26, 0x08	; 8
    a780:	ea 16       	cp	r14, r26
    a782:	f1 04       	cpc	r15, r1
    a784:	21 f0       	breq	.+8      	; 0xa78e <_menu_datetime+0x16e>
    a786:	ba e0       	ldi	r27, 0x0A	; 10
    a788:	eb 16       	cp	r14, r27
    a78a:	f1 04       	cpc	r15, r1
    a78c:	81 f4       	brne	.+32     	; 0xa7ae <_menu_datetime+0x18e>
				if((__chr - 0x30) <= __map[__i][3])
    a78e:	84 2f       	mov	r24, r20
    a790:	90 e0       	ldi	r25, 0x00	; 0
    a792:	c0 97       	sbiw	r24, 0x30	; 48
    a794:	f7 01       	movw	r30, r14
    a796:	ee 0f       	add	r30, r30
    a798:	ff 1f       	adc	r31, r31
    a79a:	ee 0f       	add	r30, r30
    a79c:	ff 1f       	adc	r31, r31
    a79e:	ec 0d       	add	r30, r12
    a7a0:	fd 1d       	adc	r31, r13
    a7a2:	25 89       	ldd	r18, Z+21	; 0x15
    a7a4:	30 e0       	ldi	r19, 0x00	; 0
    a7a6:	28 17       	cp	r18, r24
    a7a8:	39 07       	cpc	r19, r25
    a7aa:	84 f5       	brge	.+96     	; 0xa80c <_menu_datetime+0x1ec>
    a7ac:	4f c0       	rjmp	.+158    	; 0xa84c <_menu_datetime+0x22c>
					goto CETAK;
				else
					goto LEWAT;
			}
			if(__i == 1){
    a7ae:	81 e0       	ldi	r24, 0x01	; 1
    a7b0:	e8 16       	cp	r14, r24
    a7b2:	f1 04       	cpc	r15, r1
    a7b4:	61 f4       	brne	.+24     	; 0xa7ce <_menu_datetime+0x1ae>
				if((__map[0][2] - 0x30) < __map[0][3])
    a7b6:	2d 89       	ldd	r18, Y+21	; 0x15
    a7b8:	30 e0       	ldi	r19, 0x00	; 0
    a7ba:	2f 52       	subi	r18, 0x2F	; 47
    a7bc:	30 40       	sbci	r19, 0x00	; 0
    a7be:	8e 89       	ldd	r24, Y+22	; 0x16
    a7c0:	90 e0       	ldi	r25, 0x00	; 0
    a7c2:	82 17       	cp	r24, r18
    a7c4:	93 07       	cpc	r25, r19
    a7c6:	14 f5       	brge	.+68     	; 0xa80c <_menu_datetime+0x1ec>
					goto CETAK;
				if((__map[0][2] - 0x30) >= __map[0][3]){
					if(__chr < 0x32)
    a7c8:	42 33       	cpi	r20, 0x32	; 50
    a7ca:	00 f1       	brcs	.+64     	; 0xa80c <_menu_datetime+0x1ec>
    a7cc:	3f c0       	rjmp	.+126    	; 0xa84c <_menu_datetime+0x22c>
						goto CETAK;
					else
						goto LEWAT;
				}
			}
			if(__i == 3){
    a7ce:	93 e0       	ldi	r25, 0x03	; 3
    a7d0:	e9 16       	cp	r14, r25
    a7d2:	f1 04       	cpc	r15, r1
    a7d4:	61 f4       	brne	.+24     	; 0xa7ee <_menu_datetime+0x1ce>
				if((__map[2][2] - 0x30) < __map[2][3])
    a7d6:	2d 8d       	ldd	r18, Y+29	; 0x1d
    a7d8:	30 e0       	ldi	r19, 0x00	; 0
    a7da:	2f 52       	subi	r18, 0x2F	; 47
    a7dc:	30 40       	sbci	r19, 0x00	; 0
    a7de:	8e 8d       	ldd	r24, Y+30	; 0x1e
    a7e0:	90 e0       	ldi	r25, 0x00	; 0
    a7e2:	82 17       	cp	r24, r18
    a7e4:	93 07       	cpc	r25, r19
    a7e6:	94 f4       	brge	.+36     	; 0xa80c <_menu_datetime+0x1ec>
					goto CETAK;
				if((__map[2][2] - 0x30) >= __map[2][3]){
					if(__chr < 0x33)
    a7e8:	43 33       	cpi	r20, 0x33	; 51
    a7ea:	80 f0       	brcs	.+32     	; 0xa80c <_menu_datetime+0x1ec>
    a7ec:	2f c0       	rjmp	.+94     	; 0xa84c <_menu_datetime+0x22c>
						goto CETAK;
					else
						goto LEWAT;
				}
			}
			if(__i == 7){
    a7ee:	a7 e0       	ldi	r26, 0x07	; 7
    a7f0:	ea 16       	cp	r14, r26
    a7f2:	f1 04       	cpc	r15, r1
    a7f4:	59 f4       	brne	.+22     	; 0xa80c <_menu_datetime+0x1ec>
				if((__map[6][2] - 0x30) < __map[6][3])
    a7f6:	2d a5       	ldd	r18, Y+45	; 0x2d
    a7f8:	30 e0       	ldi	r19, 0x00	; 0
    a7fa:	2f 52       	subi	r18, 0x2F	; 47
    a7fc:	30 40       	sbci	r19, 0x00	; 0
    a7fe:	8e a5       	ldd	r24, Y+46	; 0x2e
    a800:	90 e0       	ldi	r25, 0x00	; 0
    a802:	82 17       	cp	r24, r18
    a804:	93 07       	cpc	r25, r19
    a806:	14 f4       	brge	.+4      	; 0xa80c <_menu_datetime+0x1ec>
					goto CETAK;
				if((__map[6][2] - 0x30) >= __map[6][3]){
					if(__chr < 0x34)
    a808:	44 33       	cpi	r20, 0x34	; 52
    a80a:	00 f5       	brcc	.+64     	; 0xa84c <_menu_datetime+0x22c>
					else
						goto LEWAT;
				}
			}
CETAK:
			__map[__i][2] = __chr;
    a80c:	f7 01       	movw	r30, r14
    a80e:	ee 0f       	add	r30, r30
    a810:	ff 1f       	adc	r31, r31
    a812:	ee 0f       	add	r30, r30
    a814:	ff 1f       	adc	r31, r31
    a816:	ec 0d       	add	r30, r12
    a818:	fd 1d       	adc	r31, r13
    a81a:	44 8b       	std	Z+20, r20	; 0x14
			_lcd(__chr);
    a81c:	84 2f       	mov	r24, r20
    a81e:	0e 94 16 a4 	call	0x1482c	; 0x1482c <_lcd>
			__i++;
    a822:	08 94       	sec
    a824:	e1 1c       	adc	r14, r1
    a826:	f1 1c       	adc	r15, r1
    a828:	bc e0       	ldi	r27, 0x0C	; 12
    a82a:	eb 16       	cp	r14, r27
    a82c:	f1 04       	cpc	r15, r1
    a82e:	1c f0       	brlt	.+6      	; 0xa836 <_menu_datetime+0x216>
    a830:	7b e0       	ldi	r23, 0x0B	; 11
    a832:	e7 2e       	mov	r14, r23
    a834:	f1 2c       	mov	r15, r1
			if(__i > 11)
				__i = 11;
			lcd_xy(__map[__i][0], __map[__i][1]);
    a836:	f7 01       	movw	r30, r14
    a838:	ee 0f       	add	r30, r30
    a83a:	ff 1f       	adc	r31, r31
    a83c:	ee 0f       	add	r30, r30
    a83e:	ff 1f       	adc	r31, r31
    a840:	ec 0d       	add	r30, r12
    a842:	fd 1d       	adc	r31, r13
    a844:	82 89       	ldd	r24, Z+18	; 0x12
    a846:	63 89       	ldd	r22, Z+19	; 0x13
    a848:	0e 94 3c a4 	call	0x14878	; 0x14878 <lcd_xy>
LEWAT:		;
		}
		if(__key == _KEY_SHIFT){
    a84c:	1b 37       	cpi	r17, 0x7B	; 123
    a84e:	59 f4       	brne	.+22     	; 0xa866 <_menu_datetime+0x246>
			__i++;
    a850:	08 94       	sec
    a852:	e1 1c       	adc	r14, r1
    a854:	f1 1c       	adc	r15, r1
    a856:	8c e0       	ldi	r24, 0x0C	; 12
    a858:	e8 16       	cp	r14, r24
    a85a:	f1 04       	cpc	r15, r1
    a85c:	6c f0       	brlt	.+26     	; 0xa878 <_menu_datetime+0x258>
    a85e:	5b e0       	ldi	r21, 0x0B	; 11
    a860:	e5 2e       	mov	r14, r21
    a862:	f1 2c       	mov	r15, r1
    a864:	09 c0       	rjmp	.+18     	; 0xa878 <_menu_datetime+0x258>
			if(__i > 11)
				__i = 11;
			lcd_xy(__map[__i][0], __map[__i][1]);
		}
		if(__key == _KEY_CLEAR){
    a866:	17 37       	cpi	r17, 0x77	; 119
    a868:	99 f4       	brne	.+38     	; 0xa890 <_menu_datetime+0x270>
			__i--;
    a86a:	08 94       	sec
    a86c:	e1 08       	sbc	r14, r1
    a86e:	f1 08       	sbc	r15, r1
    a870:	f7 fe       	sbrs	r15, 7
    a872:	02 c0       	rjmp	.+4      	; 0xa878 <_menu_datetime+0x258>
    a874:	ee 24       	eor	r14, r14
    a876:	ff 24       	eor	r15, r15
			if(__i <= 0)
				__i = 0;
			lcd_xy(__map[__i][0], __map[__i][1]);
    a878:	f7 01       	movw	r30, r14
    a87a:	ee 0f       	add	r30, r30
    a87c:	ff 1f       	adc	r31, r31
    a87e:	ee 0f       	add	r30, r30
    a880:	ff 1f       	adc	r31, r31
    a882:	ec 0d       	add	r30, r12
    a884:	fd 1d       	adc	r31, r13
    a886:	82 89       	ldd	r24, Z+18	; 0x12
    a888:	63 89       	ldd	r22, Z+19	; 0x13
    a88a:	0e 94 3c a4 	call	0x14878	; 0x14878 <lcd_xy>
    a88e:	61 cf       	rjmp	.-318    	; 0xa752 <_menu_datetime+0x132>
		}
		if(__key == _KEY_CANCEL)
    a890:	17 3e       	cpi	r17, 0xE7	; 231
    a892:	09 f4       	brne	.+2      	; 0xa896 <_menu_datetime+0x276>
    a894:	49 c0       	rjmp	.+146    	; 0xa928 <_menu_datetime+0x308>
			break;
		if(__key == _KEY_ENTER){
    a896:	17 3b       	cpi	r17, 0xB7	; 183
    a898:	09 f0       	breq	.+2      	; 0xa89c <_menu_datetime+0x27c>
    a89a:	5b cf       	rjmp	.-330    	; 0xa752 <_menu_datetime+0x132>
    a89c:	20 e0       	ldi	r18, 0x00	; 0
    a89e:	30 e0       	ldi	r19, 0x00	; 0
    a8a0:	40 e0       	ldi	r20, 0x00	; 0
    a8a2:	50 e0       	ldi	r21, 0x00	; 0
			for(__i = 0, __ii = 0; __i < 6; __i++, __ii++){
				if(__i == 2 || __i == 4)
					__ii++;
				__date[__ii] = __map[__i][2];
    a8a4:	be 01       	movw	r22, r28
    a8a6:	6f 5f       	subi	r22, 0xFF	; 255
    a8a8:	7f 4f       	sbci	r23, 0xFF	; 255
		}
		if(__key == _KEY_CANCEL)
			break;
		if(__key == _KEY_ENTER){
			for(__i = 0, __ii = 0; __i < 6; __i++, __ii++){
				if(__i == 2 || __i == 4)
    a8aa:	22 30       	cpi	r18, 0x02	; 2
    a8ac:	31 05       	cpc	r19, r1
    a8ae:	19 f0       	breq	.+6      	; 0xa8b6 <_menu_datetime+0x296>
    a8b0:	24 30       	cpi	r18, 0x04	; 4
    a8b2:	31 05       	cpc	r19, r1
    a8b4:	11 f4       	brne	.+4      	; 0xa8ba <_menu_datetime+0x29a>
					__ii++;
    a8b6:	4f 5f       	subi	r20, 0xFF	; 255
    a8b8:	5f 4f       	sbci	r21, 0xFF	; 255
				__date[__ii] = __map[__i][2];
    a8ba:	fb 01       	movw	r30, r22
    a8bc:	e4 0f       	add	r30, r20
    a8be:	f5 1f       	adc	r31, r21
    a8c0:	d4 01       	movw	r26, r8
    a8c2:	8c 91       	ld	r24, X
    a8c4:	80 83       	st	Z, r24
			lcd_xy(__map[__i][0], __map[__i][1]);
		}
		if(__key == _KEY_CANCEL)
			break;
		if(__key == _KEY_ENTER){
			for(__i = 0, __ii = 0; __i < 6; __i++, __ii++){
    a8c6:	2f 5f       	subi	r18, 0xFF	; 255
    a8c8:	3f 4f       	sbci	r19, 0xFF	; 255
    a8ca:	84 e0       	ldi	r24, 0x04	; 4
    a8cc:	90 e0       	ldi	r25, 0x00	; 0
    a8ce:	88 0e       	add	r8, r24
    a8d0:	99 1e       	adc	r9, r25
    a8d2:	26 30       	cpi	r18, 0x06	; 6
    a8d4:	31 05       	cpc	r19, r1
    a8d6:	19 f0       	breq	.+6      	; 0xa8de <_menu_datetime+0x2be>
    a8d8:	4f 5f       	subi	r20, 0xFF	; 255
    a8da:	5f 4f       	sbci	r21, 0xFF	; 255
    a8dc:	e6 cf       	rjmp	.-52     	; 0xa8aa <_menu_datetime+0x28a>
    a8de:	60 e0       	ldi	r22, 0x00	; 0
    a8e0:	70 e0       	ldi	r23, 0x00	; 0
				__date[__ii] = __map[__i][2];
			}
			for(__i = 6, __ii = 0; __i < 12; __i++, __ii++){
				if(__i == 8 || __i == 10)
					__ii++;
				__time[__ii] = __map[__i][2];
    a8e2:	ae 01       	movw	r20, r28
    a8e4:	46 5f       	subi	r20, 0xF6	; 246
    a8e6:	5f 4f       	sbci	r21, 0xFF	; 255
				if(__i == 2 || __i == 4)
					__ii++;
				__date[__ii] = __map[__i][2];
			}
			for(__i = 6, __ii = 0; __i < 12; __i++, __ii++){
				if(__i == 8 || __i == 10)
    a8e8:	28 30       	cpi	r18, 0x08	; 8
    a8ea:	31 05       	cpc	r19, r1
    a8ec:	19 f0       	breq	.+6      	; 0xa8f4 <_menu_datetime+0x2d4>
    a8ee:	2a 30       	cpi	r18, 0x0A	; 10
    a8f0:	31 05       	cpc	r19, r1
    a8f2:	11 f4       	brne	.+4      	; 0xa8f8 <_menu_datetime+0x2d8>
					__ii++;
    a8f4:	6f 5f       	subi	r22, 0xFF	; 255
    a8f6:	7f 4f       	sbci	r23, 0xFF	; 255
				__time[__ii] = __map[__i][2];
    a8f8:	fa 01       	movw	r30, r20
    a8fa:	e6 0f       	add	r30, r22
    a8fc:	f7 1f       	adc	r31, r23
    a8fe:	d5 01       	movw	r26, r10
    a900:	8c 91       	ld	r24, X
    a902:	80 83       	st	Z, r24
			for(__i = 0, __ii = 0; __i < 6; __i++, __ii++){
				if(__i == 2 || __i == 4)
					__ii++;
				__date[__ii] = __map[__i][2];
			}
			for(__i = 6, __ii = 0; __i < 12; __i++, __ii++){
    a904:	2f 5f       	subi	r18, 0xFF	; 255
    a906:	3f 4f       	sbci	r19, 0xFF	; 255
    a908:	84 e0       	ldi	r24, 0x04	; 4
    a90a:	90 e0       	ldi	r25, 0x00	; 0
    a90c:	a8 0e       	add	r10, r24
    a90e:	b9 1e       	adc	r11, r25
    a910:	2c 30       	cpi	r18, 0x0C	; 12
    a912:	31 05       	cpc	r19, r1
    a914:	19 f0       	breq	.+6      	; 0xa91c <_menu_datetime+0x2fc>
    a916:	6f 5f       	subi	r22, 0xFF	; 255
    a918:	7f 4f       	sbci	r23, 0xFF	; 255
    a91a:	e6 cf       	rjmp	.-52     	; 0xa8e8 <_menu_datetime+0x2c8>
				if(__i == 8 || __i == 10)
					__ii++;
				__time[__ii] = __map[__i][2];
			}
			_datetime(_DATETIME_WRITE, __date, __time);
    a91c:	81 e0       	ldi	r24, 0x01	; 1
    a91e:	be 01       	movw	r22, r28
    a920:	6f 5f       	subi	r22, 0xFF	; 255
    a922:	7f 4f       	sbci	r23, 0xFF	; 255
    a924:	0e 94 57 a7 	call	0x14eae	; 0x14eae <_datetime>
			break;
		}
	}
	CURSOR_HIDE;
    a928:	8c e0       	ldi	r24, 0x0C	; 12
    a92a:	0e 94 a9 a3 	call	0x14752	; 0x14752 <lcd_command>
}
    a92e:	ce 5b       	subi	r28, 0xBE	; 190
    a930:	df 4f       	sbci	r29, 0xFF	; 255
    a932:	0f b6       	in	r0, 0x3f	; 63
    a934:	f8 94       	cli
    a936:	de bf       	out	0x3e, r29	; 62
    a938:	0f be       	out	0x3f, r0	; 63
    a93a:	cd bf       	out	0x3d, r28	; 61
    a93c:	cf 91       	pop	r28
    a93e:	df 91       	pop	r29
    a940:	1f 91       	pop	r17
    a942:	0f 91       	pop	r16
    a944:	ff 90       	pop	r15
    a946:	ef 90       	pop	r14
    a948:	df 90       	pop	r13
    a94a:	cf 90       	pop	r12
    a94c:	bf 90       	pop	r11
    a94e:	af 90       	pop	r10
    a950:	9f 90       	pop	r9
    a952:	8f 90       	pop	r8
    a954:	08 95       	ret

0000a956 <FSettingDatetime>:
	 }
     return Result;
}

char FSettingDatetime(){
     _menu_datetime();
    a956:	0e 94 10 53 	call	0xa620	; 0xa620 <_menu_datetime>
     return MENU_DONE;
}
    a95a:	81 e0       	ldi	r24, 0x01	; 1
    a95c:	08 95       	ret

0000a95e <menu_FIP>:
	 }
  return Result;
}


char menu_FIP(char *xFIP,char *sFIPUsed){
    a95e:	4f 92       	push	r4
    a960:	5f 92       	push	r5
    a962:	6f 92       	push	r6
    a964:	7f 92       	push	r7
    a966:	8f 92       	push	r8
    a968:	9f 92       	push	r9
    a96a:	af 92       	push	r10
    a96c:	bf 92       	push	r11
    a96e:	cf 92       	push	r12
    a970:	df 92       	push	r13
    a972:	ef 92       	push	r14
    a974:	ff 92       	push	r15
    a976:	0f 93       	push	r16
    a978:	1f 93       	push	r17
    a97a:	df 93       	push	r29
    a97c:	cf 93       	push	r28
    a97e:	cd b7       	in	r28, 0x3d	; 61
    a980:	de b7       	in	r29, 0x3e	; 62
    a982:	a2 97       	sbiw	r28, 0x22	; 34
    a984:	0f b6       	in	r0, 0x3f	; 63
    a986:	f8 94       	cli
    a988:	de bf       	out	0x3e, r29	; 62
    a98a:	0f be       	out	0x3f, r0	; 63
    a98c:	cd bf       	out	0x3d, r28	; 61
    a98e:	7c 01       	movw	r14, r24
    a990:	6b 01       	movw	r12, r22

       char KeyPressed=0,KeyChar;
       char Result=FIP_NONE;
       char FIP[8],strPumpL[3],strPumpR[3],lcdteks[20];

       switch(stEnterFIP){
    a992:	80 91 6c 02 	lds	r24, 0x026C
    a996:	81 30       	cpi	r24, 0x01	; 1
    a998:	09 f4       	brne	.+2      	; 0xa99c <menu_FIP+0x3e>
    a99a:	cd c0       	rjmp	.+410    	; 0xab36 <menu_FIP+0x1d8>
    a99c:	81 30       	cpi	r24, 0x01	; 1
    a99e:	20 f0       	brcs	.+8      	; 0xa9a8 <menu_FIP+0x4a>
    a9a0:	82 30       	cpi	r24, 0x02	; 2
    a9a2:	09 f0       	breq	.+2      	; 0xa9a6 <menu_FIP+0x48>
    a9a4:	4a c1       	rjmp	.+660    	; 0xac3a <menu_FIP+0x2dc>
    a9a6:	47 c1       	rjmp	.+654    	; 0xac36 <menu_FIP+0x2d8>
 	   case efInit:
	 	    eeprom_read_block((void*) &FIP, (const void*) &DefPumpMap, 8);
    a9a8:	8e 01       	movw	r16, r28
    a9aa:	09 5f       	subi	r16, 0xF9	; 249
    a9ac:	1f 4f       	sbci	r17, 0xFF	; 255
    a9ae:	c8 01       	movw	r24, r16
    a9b0:	65 e4       	ldi	r22, 0x45	; 69
    a9b2:	70 e0       	ldi	r23, 0x00	; 0
    a9b4:	48 e0       	ldi	r20, 0x08	; 8
    a9b6:	50 e0       	ldi	r21, 0x00	; 0
    a9b8:	0e 94 b9 ac 	call	0x15972	; 0x15972 <__eerd_block_m128>
		    lcd_clear(); 
    a9bc:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
    a9c0:	f8 01       	movw	r30, r16
    a9c2:	20 e0       	ldi	r18, 0x00	; 0
    a9c4:	30 e0       	ldi	r19, 0x00	; 0
    a9c6:	07 c0       	rjmp	.+14     	; 0xa9d6 <menu_FIP+0x78>
		    for (iLoop=0;iLoop<8;iLoop++){
			     if (FIP[iLoop]>99) FIP[iLoop]=0;
    a9c8:	80 81       	ld	r24, Z
    a9ca:	84 36       	cpi	r24, 0x64	; 100
    a9cc:	08 f0       	brcs	.+2      	; 0xa9d0 <menu_FIP+0x72>
    a9ce:	10 82       	st	Z, r1
    a9d0:	2f 5f       	subi	r18, 0xFF	; 255
    a9d2:	3f 4f       	sbci	r19, 0xFF	; 255
    a9d4:	31 96       	adiw	r30, 0x01	; 1

       switch(stEnterFIP){
 	   case efInit:
	 	    eeprom_read_block((void*) &FIP, (const void*) &DefPumpMap, 8);
		    lcd_clear(); 
		    for (iLoop=0;iLoop<8;iLoop++){
    a9d6:	28 30       	cpi	r18, 0x08	; 8
    a9d8:	31 05       	cpc	r19, r1
    a9da:	b0 f3       	brcs	.-20     	; 0xa9c8 <menu_FIP+0x6a>
			     if (FIP[iLoop]>99) FIP[iLoop]=0;
		    }
		    for(iLoop=0;iLoop<4;iLoop++){
    a9dc:	10 92 6a 02 	sts	0x026A, r1
    a9e0:	10 92 69 02 	sts	0x0269, r1
	     }String[Size]=0;
	 }
}

void leadingZero(char Val,char *StrResult){
     sprintf_P(StrResult,PSTR("%.2d"),Val);
    a9e4:	5e 01       	movw	r10, r28
    a9e6:	08 94       	sec
    a9e8:	a1 1c       	adc	r10, r1
    a9ea:	b1 1c       	adc	r11, r1
    a9ec:	59 ee       	ldi	r21, 0xE9	; 233
    a9ee:	c5 2e       	mov	r12, r21
    a9f0:	5e e0       	ldi	r21, 0x0E	; 14
    a9f2:	d5 2e       	mov	r13, r21
    a9f4:	47 e0       	ldi	r20, 0x07	; 7
    a9f6:	44 2e       	mov	r4, r20
    a9f8:	51 2c       	mov	r5, r1
    a9fa:	4c 0e       	add	r4, r28
    a9fc:	5d 1e       	adc	r5, r29
		    for (iLoop=0;iLoop<8;iLoop++){
			     if (FIP[iLoop]>99) FIP[iLoop]=0;
		    }
		    for(iLoop=0;iLoop<4;iLoop++){
		        leadingZero(FIP[iLoop],strPumpL);leadingZero(FIP[iLoop+4],strPumpR);
                sprintf_P(lcdteks,PSTR("%d.P%s | %d.P%s"),(iLoop+1),strPumpL,(iLoop+5),strPumpR);
    a9fe:	34 e0       	ldi	r19, 0x04	; 4
    aa00:	e3 2e       	mov	r14, r19
    aa02:	f1 2c       	mov	r15, r1
    aa04:	ec 0e       	add	r14, r28
    aa06:	fd 1e       	adc	r15, r29
    aa08:	2b e0       	ldi	r18, 0x0B	; 11
    aa0a:	62 2e       	mov	r6, r18
    aa0c:	71 2c       	mov	r7, r1
    aa0e:	6c 0e       	add	r6, r28
    aa10:	7d 1e       	adc	r7, r29
    aa12:	8e 01       	movw	r16, r28
    aa14:	01 5f       	subi	r16, 0xF1	; 241
    aa16:	1f 4f       	sbci	r17, 0xFF	; 255
    aa18:	97 ef       	ldi	r25, 0xF7	; 247
    aa1a:	89 2e       	mov	r8, r25
    aa1c:	9d e1       	ldi	r25, 0x1D	; 29
    aa1e:	99 2e       	mov	r9, r25
    aa20:	64 c0       	rjmp	.+200    	; 0xaaea <menu_FIP+0x18c>
	     }String[Size]=0;
	 }
}

void leadingZero(char Val,char *StrResult){
     sprintf_P(StrResult,PSTR("%.2d"),Val);
    aa22:	00 d0       	rcall	.+0      	; 0xaa24 <menu_FIP+0xc6>
    aa24:	00 d0       	rcall	.+0      	; 0xaa26 <menu_FIP+0xc8>
    aa26:	00 d0       	rcall	.+0      	; 0xaa28 <menu_FIP+0xca>
    aa28:	2d b7       	in	r18, 0x3d	; 61
    aa2a:	3e b7       	in	r19, 0x3e	; 62
    aa2c:	2f 5f       	subi	r18, 0xFF	; 255
    aa2e:	3f 4f       	sbci	r19, 0xFF	; 255
    aa30:	ed b7       	in	r30, 0x3d	; 61
    aa32:	fe b7       	in	r31, 0x3e	; 62
    aa34:	b2 82       	std	Z+2, r11	; 0x02
    aa36:	a1 82       	std	Z+1, r10	; 0x01
    aa38:	f9 01       	movw	r30, r18
    aa3a:	d3 82       	std	Z+3, r13	; 0x03
    aa3c:	c2 82       	std	Z+2, r12	; 0x02
    aa3e:	a4 0d       	add	r26, r4
    aa40:	b5 1d       	adc	r27, r5
    aa42:	8c 91       	ld	r24, X
    aa44:	84 83       	std	Z+4, r24	; 0x04
    aa46:	15 82       	std	Z+5, r1	; 0x05
    aa48:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
    aa4c:	ad b7       	in	r26, 0x3d	; 61
    aa4e:	be b7       	in	r27, 0x3e	; 62
    aa50:	11 96       	adiw	r26, 0x01	; 1
    aa52:	ed b7       	in	r30, 0x3d	; 61
    aa54:	fe b7       	in	r31, 0x3e	; 62
    aa56:	f2 82       	std	Z+2, r15	; 0x02
    aa58:	e1 82       	std	Z+1, r14	; 0x01
    aa5a:	13 96       	adiw	r26, 0x03	; 3
    aa5c:	dc 92       	st	X, r13
    aa5e:	ce 92       	st	-X, r12
    aa60:	12 97       	sbiw	r26, 0x02	; 2
    aa62:	e0 91 69 02 	lds	r30, 0x0269
    aa66:	f0 91 6a 02 	lds	r31, 0x026A
    aa6a:	e6 0d       	add	r30, r6
    aa6c:	f7 1d       	adc	r31, r7
    aa6e:	80 81       	ld	r24, Z
    aa70:	14 96       	adiw	r26, 0x04	; 4
    aa72:	8c 93       	st	X, r24
    aa74:	14 97       	sbiw	r26, 0x04	; 4
    aa76:	15 96       	adiw	r26, 0x05	; 5
    aa78:	1c 92       	st	X, r1
    aa7a:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
		    for (iLoop=0;iLoop<8;iLoop++){
			     if (FIP[iLoop]>99) FIP[iLoop]=0;
		    }
		    for(iLoop=0;iLoop<4;iLoop++){
		        leadingZero(FIP[iLoop],strPumpL);leadingZero(FIP[iLoop+4],strPumpR);
                sprintf_P(lcdteks,PSTR("%d.P%s | %d.P%s"),(iLoop+1),strPumpL,(iLoop+5),strPumpR);
    aa7e:	80 91 69 02 	lds	r24, 0x0269
    aa82:	90 91 6a 02 	lds	r25, 0x026A
    aa86:	00 d0       	rcall	.+0      	; 0xaa88 <menu_FIP+0x12a>
    aa88:	00 d0       	rcall	.+0      	; 0xaa8a <menu_FIP+0x12c>
    aa8a:	00 d0       	rcall	.+0      	; 0xaa8c <menu_FIP+0x12e>
    aa8c:	ed b7       	in	r30, 0x3d	; 61
    aa8e:	fe b7       	in	r31, 0x3e	; 62
    aa90:	31 96       	adiw	r30, 0x01	; 1
    aa92:	ad b7       	in	r26, 0x3d	; 61
    aa94:	be b7       	in	r27, 0x3e	; 62
    aa96:	12 96       	adiw	r26, 0x02	; 2
    aa98:	1c 93       	st	X, r17
    aa9a:	0e 93       	st	-X, r16
    aa9c:	11 97       	sbiw	r26, 0x01	; 1
    aa9e:	93 82       	std	Z+3, r9	; 0x03
    aaa0:	82 82       	std	Z+2, r8	; 0x02
    aaa2:	01 96       	adiw	r24, 0x01	; 1
    aaa4:	95 83       	std	Z+5, r25	; 0x05
    aaa6:	84 83       	std	Z+4, r24	; 0x04
    aaa8:	b7 82       	std	Z+7, r11	; 0x07
    aaaa:	a6 82       	std	Z+6, r10	; 0x06
    aaac:	04 96       	adiw	r24, 0x04	; 4
    aaae:	91 87       	std	Z+9, r25	; 0x09
    aab0:	80 87       	std	Z+8, r24	; 0x08
    aab2:	f3 86       	std	Z+11, r15	; 0x0b
    aab4:	e2 86       	std	Z+10, r14	; 0x0a
    aab6:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
			    lcd_print((iLoop+1),1,lcdteks);
    aaba:	ed b7       	in	r30, 0x3d	; 61
    aabc:	fe b7       	in	r31, 0x3e	; 62
    aabe:	3c 96       	adiw	r30, 0x0c	; 12
    aac0:	0f b6       	in	r0, 0x3f	; 63
    aac2:	f8 94       	cli
    aac4:	fe bf       	out	0x3e, r31	; 62
    aac6:	0f be       	out	0x3f, r0	; 63
    aac8:	ed bf       	out	0x3d, r30	; 61
    aaca:	80 91 69 02 	lds	r24, 0x0269
    aace:	8f 5f       	subi	r24, 0xFF	; 255
    aad0:	61 e0       	ldi	r22, 0x01	; 1
    aad2:	a8 01       	movw	r20, r16
    aad4:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
	 	    eeprom_read_block((void*) &FIP, (const void*) &DefPumpMap, 8);
		    lcd_clear(); 
		    for (iLoop=0;iLoop<8;iLoop++){
			     if (FIP[iLoop]>99) FIP[iLoop]=0;
		    }
		    for(iLoop=0;iLoop<4;iLoop++){
    aad8:	80 91 69 02 	lds	r24, 0x0269
    aadc:	90 91 6a 02 	lds	r25, 0x026A
    aae0:	01 96       	adiw	r24, 0x01	; 1
    aae2:	90 93 6a 02 	sts	0x026A, r25
    aae6:	80 93 69 02 	sts	0x0269, r24
    aaea:	a0 91 69 02 	lds	r26, 0x0269
    aaee:	b0 91 6a 02 	lds	r27, 0x026A
    aaf2:	a4 30       	cpi	r26, 0x04	; 4
    aaf4:	b1 05       	cpc	r27, r1
    aaf6:	08 f4       	brcc	.+2      	; 0xaafa <menu_FIP+0x19c>
    aaf8:	94 cf       	rjmp	.-216    	; 0xaa22 <menu_FIP+0xc4>
		        leadingZero(FIP[iLoop],strPumpL);leadingZero(FIP[iLoop+4],strPumpR);
                sprintf_P(lcdteks,PSTR("%d.P%s | %d.P%s"),(iLoop+1),strPumpL,(iLoop+5),strPumpR);
			    lcd_print((iLoop+1),1,lcdteks);
			}
		    lcd_printf(1,15,PSTR("FIP:_"));    //"1.P01 | 5.P05 FIP:_ "                                                                      
    aafa:	81 e0       	ldi	r24, 0x01	; 1
    aafc:	6f e0       	ldi	r22, 0x0F	; 15
    aafe:	41 ef       	ldi	r20, 0xF1	; 241
    ab00:	5d e1       	ldi	r21, 0x1D	; 29
    ab02:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		    lcd_printf(2,15,PSTR("     "));    //"2.P02 | 6.P05       "
    ab06:	82 e0       	ldi	r24, 0x02	; 2
    ab08:	6f e0       	ldi	r22, 0x0F	; 15
    ab0a:	4b ee       	ldi	r20, 0xEB	; 235
    ab0c:	5d e1       	ldi	r21, 0x1D	; 29
    ab0e:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		    lcd_printf(3,15,PSTR("#)OK "));    //"3.P03 | 7.P07 #)OK  "
    ab12:	83 e0       	ldi	r24, 0x03	; 3
    ab14:	6f e0       	ldi	r22, 0x0F	; 15
    ab16:	45 ee       	ldi	r20, 0xE5	; 229
    ab18:	5d e1       	ldi	r21, 0x1D	; 29
    ab1a:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
	        lcd_printf(4,15,PSTR("*)Exit"));   //"4.P04 | 8.P08 *)Exit"				
    ab1e:	84 e0       	ldi	r24, 0x04	; 4
    ab20:	6f e0       	ldi	r22, 0x0F	; 15
    ab22:	4e ed       	ldi	r20, 0xDE	; 222
    ab24:	5d e1       	ldi	r21, 0x1D	; 29
    ab26:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		    iLoop=0;
    ab2a:	10 92 6a 02 	sts	0x026A, r1
    ab2e:	10 92 69 02 	sts	0x0269, r1
		    stEnterFIP=efFIPInput;
    ab32:	81 e0       	ldi	r24, 0x01	; 1
    ab34:	7d c0       	rjmp	.+250    	; 0xac30 <menu_FIP+0x2d2>
	        break;
	   case efFIPInput:
		    iLoop++;
    ab36:	80 91 69 02 	lds	r24, 0x0269
    ab3a:	90 91 6a 02 	lds	r25, 0x026A
    ab3e:	01 96       	adiw	r24, 0x01	; 1
    ab40:	90 93 6a 02 	sts	0x026A, r25
    ab44:	80 93 69 02 	sts	0x0269, r24
		    KeyPressed=_key_scan(1);
    ab48:	81 e0       	ldi	r24, 0x01	; 1
    ab4a:	0e 94 f6 a5 	call	0x14bec	; 0x14bec <_key_scan>
    ab4e:	08 2f       	mov	r16, r24
		    KeyChar=_key_btn(KeyPressed);
    ab50:	0e 94 57 a5 	call	0x14aae	; 0x14aae <_key_btn>
    ab54:	98 2f       	mov	r25, r24
		    if ((KeyChar>='1')&&(KeyChar<='8')){
    ab56:	18 2f       	mov	r17, r24
    ab58:	11 53       	subi	r17, 0x31	; 49
    ab5a:	18 30       	cpi	r17, 0x08	; 8
    ab5c:	60 f4       	brcc	.+24     	; 0xab76 <menu_FIP+0x218>
		 	     if (KeyCharLast!=KeyChar){
    ab5e:	80 91 5a 01 	lds	r24, 0x015A
    ab62:	89 17       	cp	r24, r25
    ab64:	41 f0       	breq	.+16     	; 0xab76 <menu_FIP+0x218>
				     KeyCharLast=KeyChar;
    ab66:	90 93 5a 01 	sts	0x015A, r25
				     iLoop=1000;
    ab6a:	88 ee       	ldi	r24, 0xE8	; 232
    ab6c:	93 e0       	ldi	r25, 0x03	; 3
    ab6e:	90 93 6a 02 	sts	0x026A, r25
    ab72:	80 93 69 02 	sts	0x0269, r24
                 }
		    }
 		    if ((iLoop%2000)==0){
    ab76:	80 91 69 02 	lds	r24, 0x0269
    ab7a:	90 91 6a 02 	lds	r25, 0x026A
    ab7e:	60 ed       	ldi	r22, 0xD0	; 208
    ab80:	77 e0       	ldi	r23, 0x07	; 7
    ab82:	0e 94 03 aa 	call	0x15406	; 0x15406 <__udivmodhi4>
    ab86:	89 2b       	or	r24, r25
    ab88:	39 f4       	brne	.+14     	; 0xab98 <menu_FIP+0x23a>
		        lcd_xy(1,19);_lcd('_'); 
    ab8a:	81 e0       	ldi	r24, 0x01	; 1
    ab8c:	63 e1       	ldi	r22, 0x13	; 19
    ab8e:	0e 94 3c a4 	call	0x14878	; 0x14878 <lcd_xy>
    ab92:	8f e5       	ldi	r24, 0x5F	; 95
    ab94:	0e 94 16 a4 	call	0x1482c	; 0x1482c <_lcd>
			   }
           if ((iLoop%2000)==1000){
    ab98:	80 91 69 02 	lds	r24, 0x0269
    ab9c:	90 91 6a 02 	lds	r25, 0x026A
    aba0:	60 ed       	ldi	r22, 0xD0	; 208
    aba2:	77 e0       	ldi	r23, 0x07	; 7
    aba4:	0e 94 03 aa 	call	0x15406	; 0x15406 <__udivmodhi4>
    aba8:	88 5e       	subi	r24, 0xE8	; 232
    abaa:	93 40       	sbci	r25, 0x03	; 3
    abac:	41 f4       	brne	.+16     	; 0xabbe <menu_FIP+0x260>
			    lcd_xy(1,19);_lcd(KeyCharLast); 
    abae:	81 e0       	ldi	r24, 0x01	; 1
    abb0:	63 e1       	ldi	r22, 0x13	; 19
    abb2:	0e 94 3c a4 	call	0x14878	; 0x14878 <lcd_xy>
    abb6:	80 91 5a 01 	lds	r24, 0x015A
    abba:	0e 94 16 a4 	call	0x1482c	; 0x1482c <_lcd>
			   }

		   if (((KeyChar>='1')&&(KeyChar<='8'))||(KeyPressed==_KEY_ENTER)&&(KeyCharLast!=' ')){ 
    abbe:	18 30       	cpi	r17, 0x08	; 8
    abc0:	30 f0       	brcs	.+12     	; 0xabce <menu_FIP+0x270>
    abc2:	07 3b       	cpi	r16, 0xB7	; 183
    abc4:	91 f5       	brne	.+100    	; 0xac2a <menu_FIP+0x2cc>
    abc6:	80 91 5a 01 	lds	r24, 0x015A
    abca:	80 32       	cpi	r24, 0x20	; 32
    abcc:	b1 f1       	breq	.+108    	; 0xac3a <menu_FIP+0x2dc>
		         FIP_Used=FIP[KeyCharLast-'1'];
    abce:	80 91 5a 01 	lds	r24, 0x015A
    abd2:	fe 01       	movw	r30, r28
    abd4:	ba 97       	sbiw	r30, 0x2a	; 42
    abd6:	e8 0f       	add	r30, r24
    abd8:	f1 1d       	adc	r31, r1
    abda:	20 81       	ld	r18, Z
    abdc:	20 93 6b 02 	sts	0x026B, r18
				 if (FIP_Used<=99){
    abe0:	24 36       	cpi	r18, 0x64	; 100
    abe2:	f0 f4       	brcc	.+60     	; 0xac20 <menu_FIP+0x2c2>
                     //leadingZero(FIP_Used,sFIPUsed);
					 //xFIP[0]=FIP_Used;
					 *xFIP=FIP_Used;
    abe4:	d7 01       	movw	r26, r14
    abe6:	2c 93       	st	X, r18
					 sprintf_P(sFIPUsed,PSTR("%.2d"),FIP_Used);
    abe8:	00 d0       	rcall	.+0      	; 0xabea <menu_FIP+0x28c>
    abea:	00 d0       	rcall	.+0      	; 0xabec <menu_FIP+0x28e>
    abec:	00 d0       	rcall	.+0      	; 0xabee <menu_FIP+0x290>
    abee:	ed b7       	in	r30, 0x3d	; 61
    abf0:	fe b7       	in	r31, 0x3e	; 62
    abf2:	31 96       	adiw	r30, 0x01	; 1
    abf4:	ad b7       	in	r26, 0x3d	; 61
    abf6:	be b7       	in	r27, 0x3e	; 62
    abf8:	12 96       	adiw	r26, 0x02	; 2
    abfa:	dc 92       	st	X, r13
    abfc:	ce 92       	st	-X, r12
    abfe:	11 97       	sbiw	r26, 0x01	; 1
    ac00:	89 ed       	ldi	r24, 0xD9	; 217
    ac02:	9d e1       	ldi	r25, 0x1D	; 29
    ac04:	93 83       	std	Z+3, r25	; 0x03
    ac06:	82 83       	std	Z+2, r24	; 0x02
    ac08:	24 83       	std	Z+4, r18	; 0x04
    ac0a:	15 82       	std	Z+5, r1	; 0x05
    ac0c:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
    ac10:	ed b7       	in	r30, 0x3d	; 61
    ac12:	fe b7       	in	r31, 0x3e	; 62
    ac14:	36 96       	adiw	r30, 0x06	; 6
    ac16:	0f b6       	in	r0, 0x3f	; 63
    ac18:	f8 94       	cli
    ac1a:	fe bf       	out	0x3e, r31	; 62
    ac1c:	0f be       	out	0x3f, r0	; 63
    ac1e:	ed bf       	out	0x3d, r30	; 61

					 }
				 Result=FIP_DONE;
                 stEnterFIP=efExitFIPInput;
    ac20:	82 e0       	ldi	r24, 0x02	; 2
    ac22:	80 93 6c 02 	sts	0x026C, r24
    ac26:	80 e0       	ldi	r24, 0x00	; 0
    ac28:	09 c0       	rjmp	.+18     	; 0xac3c <menu_FIP+0x2de>
		   }
		   else
		   if (KeyPressed==_KEY_CANCEL){
    ac2a:	07 3e       	cpi	r16, 0xE7	; 231
    ac2c:	31 f4       	brne	.+12     	; 0xac3a <menu_FIP+0x2dc>
               Result=FIP_CANCEL;
			   stEnterFIP=efExitFIPInput;
    ac2e:	82 e0       	ldi	r24, 0x02	; 2
    ac30:	80 93 6c 02 	sts	0x026C, r24
    ac34:	03 c0       	rjmp	.+6      	; 0xac3c <menu_FIP+0x2de>
		   }
	       break;
      case efExitFIPInput:
           stEnterFIP=efInit;
    ac36:	10 92 6c 02 	sts	0x026C, r1
    ac3a:	81 e0       	ldi	r24, 0x01	; 1
	       break;
	 }
return Result;
}
    ac3c:	a2 96       	adiw	r28, 0x22	; 34
    ac3e:	0f b6       	in	r0, 0x3f	; 63
    ac40:	f8 94       	cli
    ac42:	de bf       	out	0x3e, r29	; 62
    ac44:	0f be       	out	0x3f, r0	; 63
    ac46:	cd bf       	out	0x3d, r28	; 61
    ac48:	cf 91       	pop	r28
    ac4a:	df 91       	pop	r29
    ac4c:	1f 91       	pop	r17
    ac4e:	0f 91       	pop	r16
    ac50:	ff 90       	pop	r15
    ac52:	ef 90       	pop	r14
    ac54:	df 90       	pop	r13
    ac56:	cf 90       	pop	r12
    ac58:	bf 90       	pop	r11
    ac5a:	af 90       	pop	r10
    ac5c:	9f 90       	pop	r9
    ac5e:	8f 90       	pop	r8
    ac60:	7f 90       	pop	r7
    ac62:	6f 90       	pop	r6
    ac64:	5f 90       	pop	r5
    ac66:	4f 90       	pop	r4
    ac68:	08 95       	ret

0000ac6a <FMenuSettingServerIP>:
		       break;     
		  }//EndSwitch	 
    return Result;
}

char FMenuSettingServerIP(){
    ac6a:	ff 92       	push	r15
    ac6c:	0f 93       	push	r16
    ac6e:	1f 93       	push	r17
    ac70:	df 93       	push	r29
    ac72:	cf 93       	push	r28
    ac74:	cd b7       	in	r28, 0x3d	; 61
    ac76:	de b7       	in	r29, 0x3e	; 62
    ac78:	64 97       	sbiw	r28, 0x14	; 20
    ac7a:	0f b6       	in	r0, 0x3f	; 63
    ac7c:	f8 94       	cli
    ac7e:	de bf       	out	0x3e, r29	; 62
    ac80:	0f be       	out	0x3f, r0	; 63
    ac82:	cd bf       	out	0x3d, r28	; 61
     //Server IP
     //Old: 192.168.123.000
	 //New:   _.   .   .
	 //--------------------
	 //*)cancel    #)next
	 Result=MENU_NONE;
    ac84:	10 92 2e 02 	sts	0x022E, r1
     switch(stClientIP){
    ac88:	80 91 58 01 	lds	r24, 0x0158
    ac8c:	82 30       	cpi	r24, 0x02	; 2
    ac8e:	09 f4       	brne	.+2      	; 0xac92 <FMenuSettingServerIP+0x28>
    ac90:	79 c0       	rjmp	.+242    	; 0xad84 <FMenuSettingServerIP+0x11a>
    ac92:	83 30       	cpi	r24, 0x03	; 3
    ac94:	20 f4       	brcc	.+8      	; 0xac9e <FMenuSettingServerIP+0x34>
    ac96:	81 30       	cpi	r24, 0x01	; 1
    ac98:	09 f0       	breq	.+2      	; 0xac9c <FMenuSettingServerIP+0x32>
    ac9a:	5e c2       	rjmp	.+1212   	; 0xb158 <FMenuSettingServerIP+0x4ee>
    ac9c:	07 c0       	rjmp	.+14     	; 0xacac <FMenuSettingServerIP+0x42>
    ac9e:	83 30       	cpi	r24, 0x03	; 3
    aca0:	09 f4       	brne	.+2      	; 0xaca4 <FMenuSettingServerIP+0x3a>
    aca2:	55 c2       	rjmp	.+1194   	; 0xb14e <FMenuSettingServerIP+0x4e4>
    aca4:	84 30       	cpi	r24, 0x04	; 4
    aca6:	09 f0       	breq	.+2      	; 0xacaa <FMenuSettingServerIP+0x40>
    aca8:	57 c2       	rjmp	.+1198   	; 0xb158 <FMenuSettingServerIP+0x4ee>
    acaa:	45 c2       	rjmp	.+1162   	; 0xb136 <FMenuSettingServerIP+0x4cc>
		  case cipInit:
			   lcd_clear();
    acac:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
	           lcd_printf(1,1,PSTR("Server IP"));
    acb0:	81 e0       	ldi	r24, 0x01	; 1
    acb2:	61 e0       	ldi	r22, 0x01	; 1
    acb4:	41 ea       	ldi	r20, 0xA1	; 161
    acb6:	54 e1       	ldi	r21, 0x14	; 20
    acb8:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
			   eeprom_read_block((void*)&IP_blok,(const void*)&DefServerIP,4);
    acbc:	87 e2       	ldi	r24, 0x27	; 39
    acbe:	92 e0       	ldi	r25, 0x02	; 2
    acc0:	6c e2       	ldi	r22, 0x2C	; 44
    acc2:	70 e0       	ldi	r23, 0x00	; 0
    acc4:	44 e0       	ldi	r20, 0x04	; 4
    acc6:	50 e0       	ldi	r21, 0x00	; 0
    acc8:	0e 94 b9 ac 	call	0x15972	; 0x15972 <__eerd_block_m128>
	           sprintf_P(lcdteks,PSTR("Old: %d.%d.%d.%d"),IP_blok[0],IP_blok[1],IP_blok[2],IP_blok[3]);
    accc:	8d b7       	in	r24, 0x3d	; 61
    acce:	9e b7       	in	r25, 0x3e	; 62
    acd0:	0c 97       	sbiw	r24, 0x0c	; 12
    acd2:	0f b6       	in	r0, 0x3f	; 63
    acd4:	f8 94       	cli
    acd6:	9e bf       	out	0x3e, r25	; 62
    acd8:	0f be       	out	0x3f, r0	; 63
    acda:	8d bf       	out	0x3d, r24	; 61
    acdc:	ed b7       	in	r30, 0x3d	; 61
    acde:	fe b7       	in	r31, 0x3e	; 62
    ace0:	31 96       	adiw	r30, 0x01	; 1
    ace2:	8e 01       	movw	r16, r28
    ace4:	0f 5f       	subi	r16, 0xFF	; 255
    ace6:	1f 4f       	sbci	r17, 0xFF	; 255
    ace8:	ad b7       	in	r26, 0x3d	; 61
    acea:	be b7       	in	r27, 0x3e	; 62
    acec:	12 96       	adiw	r26, 0x02	; 2
    acee:	1c 93       	st	X, r17
    acf0:	0e 93       	st	-X, r16
    acf2:	11 97       	sbiw	r26, 0x01	; 1
    acf4:	80 e9       	ldi	r24, 0x90	; 144
    acf6:	94 e1       	ldi	r25, 0x14	; 20
    acf8:	93 83       	std	Z+3, r25	; 0x03
    acfa:	82 83       	std	Z+2, r24	; 0x02
    acfc:	80 91 27 02 	lds	r24, 0x0227
    ad00:	84 83       	std	Z+4, r24	; 0x04
    ad02:	15 82       	std	Z+5, r1	; 0x05
    ad04:	80 91 28 02 	lds	r24, 0x0228
    ad08:	86 83       	std	Z+6, r24	; 0x06
    ad0a:	17 82       	std	Z+7, r1	; 0x07
    ad0c:	80 91 29 02 	lds	r24, 0x0229
    ad10:	80 87       	std	Z+8, r24	; 0x08
    ad12:	11 86       	std	Z+9, r1	; 0x09
    ad14:	80 91 2a 02 	lds	r24, 0x022A
    ad18:	82 87       	std	Z+10, r24	; 0x0a
    ad1a:	13 86       	std	Z+11, r1	; 0x0b
    ad1c:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	           lcd_print(2,1,lcdteks);
    ad20:	ed b7       	in	r30, 0x3d	; 61
    ad22:	fe b7       	in	r31, 0x3e	; 62
    ad24:	3c 96       	adiw	r30, 0x0c	; 12
    ad26:	0f b6       	in	r0, 0x3f	; 63
    ad28:	f8 94       	cli
    ad2a:	fe bf       	out	0x3e, r31	; 62
    ad2c:	0f be       	out	0x3f, r0	; 63
    ad2e:	ed bf       	out	0x3d, r30	; 61
    ad30:	82 e0       	ldi	r24, 0x02	; 2
    ad32:	61 e0       	ldi	r22, 0x01	; 1
    ad34:	a8 01       	movw	r20, r16
    ad36:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
			   lcd_printf(3,1,PSTR("New:   _.   .   .   "));
    ad3a:	83 e0       	ldi	r24, 0x03	; 3
    ad3c:	61 e0       	ldi	r22, 0x01	; 1
    ad3e:	4b e7       	ldi	r20, 0x7B	; 123
    ad40:	54 e1       	ldi	r21, 0x14	; 20
    ad42:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
			   lcd_printf(4,1,PSTR("[*]cancel  [#]next  "));
    ad46:	84 e0       	ldi	r24, 0x04	; 4
    ad48:	61 e0       	ldi	r22, 0x01	; 1
    ad4a:	46 e6       	ldi	r20, 0x66	; 102
    ad4c:	54 e1       	ldi	r21, 0x14	; 20
    ad4e:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
               iLoop=0;
    ad52:	10 92 26 02 	sts	0x0226, r1
    ad56:	10 92 25 02 	sts	0x0225, r1
			   y=3,x=8;
    ad5a:	83 e0       	ldi	r24, 0x03	; 3
    ad5c:	80 93 2c 02 	sts	0x022C, r24
    ad60:	88 e0       	ldi	r24, 0x08	; 8
    ad62:	80 93 2d 02 	sts	0x022D, r24
			   iInput=0; iBlok=0;
    ad66:	10 92 2b 02 	sts	0x022B, r1
    ad6a:	10 92 24 02 	sts	0x0224, r1
    ad6e:	10 92 23 02 	sts	0x0223, r1
			   IPchar[0]='0';IPchar[1]='0';IPchar[2]='0';
    ad72:	80 e3       	ldi	r24, 0x30	; 48
    ad74:	80 93 30 02 	sts	0x0230, r24
    ad78:	80 93 31 02 	sts	0x0231, r24
    ad7c:	80 93 32 02 	sts	0x0232, r24
			   stClientIP=cipInputIP; 
    ad80:	82 e0       	ldi	r24, 0x02	; 2
    ad82:	e2 c1       	rjmp	.+964    	; 0xb148 <FMenuSettingServerIP+0x4de>
		       break;
          case cipInputIP:
			   //Blinking 60% _ 
			   iLoop++;
    ad84:	80 91 25 02 	lds	r24, 0x0225
    ad88:	90 91 26 02 	lds	r25, 0x0226
    ad8c:	01 96       	adiw	r24, 0x01	; 1
    ad8e:	90 93 26 02 	sts	0x0226, r25
    ad92:	80 93 25 02 	sts	0x0225, r24
			   if ((iLoop%2000)==0){
    ad96:	60 ed       	ldi	r22, 0xD0	; 208
    ad98:	77 e0       	ldi	r23, 0x07	; 7
    ad9a:	0e 94 03 aa 	call	0x15406	; 0x15406 <__udivmodhi4>
    ad9e:	89 2b       	or	r24, r25
    ada0:	81 f4       	brne	.+32     	; 0xadc2 <FMenuSettingServerIP+0x158>
			      lcd_put(y,(x+(iBlok*4)),'_'); 
    ada2:	80 91 23 02 	lds	r24, 0x0223
    ada6:	90 91 24 02 	lds	r25, 0x0224
    adaa:	88 0f       	add	r24, r24
    adac:	99 1f       	adc	r25, r25
    adae:	88 0f       	add	r24, r24
    adb0:	99 1f       	adc	r25, r25
    adb2:	60 91 2d 02 	lds	r22, 0x022D
    adb6:	68 0f       	add	r22, r24
    adb8:	80 91 2c 02 	lds	r24, 0x022C
    adbc:	4f e5       	ldi	r20, 0x5F	; 95
    adbe:	0e 94 ca a4 	call	0x14994	; 0x14994 <lcd_put>
			   }
			   if ((iLoop%2000)==1000){
    adc2:	80 91 25 02 	lds	r24, 0x0225
    adc6:	90 91 26 02 	lds	r25, 0x0226
    adca:	60 ed       	ldi	r22, 0xD0	; 208
    adcc:	77 e0       	ldi	r23, 0x07	; 7
    adce:	0e 94 03 aa 	call	0x15406	; 0x15406 <__udivmodhi4>
    add2:	88 5e       	subi	r24, 0xE8	; 232
    add4:	93 40       	sbci	r25, 0x03	; 3
    add6:	81 f4       	brne	.+32     	; 0xadf8 <FMenuSettingServerIP+0x18e>
			      lcd_put(y,(x+(iBlok*4)),' '); 
    add8:	80 91 23 02 	lds	r24, 0x0223
    addc:	90 91 24 02 	lds	r25, 0x0224
    ade0:	88 0f       	add	r24, r24
    ade2:	99 1f       	adc	r25, r25
    ade4:	88 0f       	add	r24, r24
    ade6:	99 1f       	adc	r25, r25
    ade8:	60 91 2d 02 	lds	r22, 0x022D
    adec:	68 0f       	add	r22, r24
    adee:	80 91 2c 02 	lds	r24, 0x022C
    adf2:	40 e2       	ldi	r20, 0x20	; 32
    adf4:	0e 94 ca a4 	call	0x14994	; 0x14994 <lcd_put>
			   }
			   //GetKeyPressed
			   keyPressed=_key_scan(1);
    adf8:	81 e0       	ldi	r24, 0x01	; 1
    adfa:	0e 94 f6 a5 	call	0x14bec	; 0x14bec <_key_scan>
    adfe:	f8 2e       	mov	r15, r24
			   keyChar=_key_btn(keyPressed);
    ae00:	0e 94 57 a5 	call	0x14aae	; 0x14aae <_key_btn>
    ae04:	28 2f       	mov	r18, r24
               if ((keyChar>='0')&&(keyChar<='9')){
    ae06:	80 53       	subi	r24, 0x30	; 48
    ae08:	8a 30       	cpi	r24, 0x0A	; 10
    ae0a:	08 f0       	brcs	.+2      	; 0xae0e <FMenuSettingServerIP+0x1a4>
    ae0c:	d6 c0       	rjmp	.+428    	; 0xafba <FMenuSettingServerIP+0x350>
    ae0e:	80 e5       	ldi	r24, 0x50	; 80
    ae10:	93 ec       	ldi	r25, 0xC3	; 195
    ae12:	01 97       	sbiw	r24, 0x01	; 1
    ae14:	f1 f7       	brne	.-4      	; 0xae12 <FMenuSettingServerIP+0x1a8>
			       _delay_ms(200);
			       IPchar[iInput]=keyChar;
    ae16:	80 91 2b 02 	lds	r24, 0x022B
    ae1a:	e8 2f       	mov	r30, r24
    ae1c:	f0 e0       	ldi	r31, 0x00	; 0
    ae1e:	e0 5d       	subi	r30, 0xD0	; 208
    ae20:	fd 4f       	sbci	r31, 0xFD	; 253
    ae22:	20 83       	st	Z, r18
				   iInput++;                    
    ae24:	8f 5f       	subi	r24, 0xFF	; 255
    ae26:	80 93 2b 02 	sts	0x022B, r24
				   for (i=1;i<(iInput+1);i++){
    ae2a:	81 e0       	ldi	r24, 0x01	; 1
    ae2c:	1c c0       	rjmp	.+56     	; 0xae66 <FMenuSettingServerIP+0x1fc>
				       lcd_xy(y,((x+(iBlok*4))-(3-i)));_lcd(IPchar[i-1]);
    ae2e:	80 91 2d 02 	lds	r24, 0x022D
    ae32:	68 0f       	add	r22, r24
    ae34:	63 50       	subi	r22, 0x03	; 3
    ae36:	80 91 23 02 	lds	r24, 0x0223
    ae3a:	90 91 24 02 	lds	r25, 0x0224
    ae3e:	88 0f       	add	r24, r24
    ae40:	99 1f       	adc	r25, r25
    ae42:	88 0f       	add	r24, r24
    ae44:	99 1f       	adc	r25, r25
    ae46:	68 0f       	add	r22, r24
    ae48:	80 91 2c 02 	lds	r24, 0x022C
    ae4c:	0e 94 3c a4 	call	0x14878	; 0x14878 <lcd_xy>
    ae50:	e0 91 2f 02 	lds	r30, 0x022F
    ae54:	f0 e0       	ldi	r31, 0x00	; 0
    ae56:	e1 5d       	subi	r30, 0xD1	; 209
    ae58:	fd 4f       	sbci	r31, 0xFD	; 253
    ae5a:	80 81       	ld	r24, Z
    ae5c:	0e 94 16 a4 	call	0x1482c	; 0x1482c <_lcd>
			   keyChar=_key_btn(keyPressed);
               if ((keyChar>='0')&&(keyChar<='9')){
			       _delay_ms(200);
			       IPchar[iInput]=keyChar;
				   iInput++;                    
				   for (i=1;i<(iInput+1);i++){
    ae60:	80 91 2f 02 	lds	r24, 0x022F
    ae64:	8f 5f       	subi	r24, 0xFF	; 255
    ae66:	80 93 2f 02 	sts	0x022F, r24
    ae6a:	70 91 2b 02 	lds	r23, 0x022B
    ae6e:	60 91 2f 02 	lds	r22, 0x022F
    ae72:	27 2f       	mov	r18, r23
    ae74:	30 e0       	ldi	r19, 0x00	; 0
    ae76:	86 2f       	mov	r24, r22
    ae78:	90 e0       	ldi	r25, 0x00	; 0
    ae7a:	28 17       	cp	r18, r24
    ae7c:	39 07       	cpc	r19, r25
    ae7e:	bc f6       	brge	.-82     	; 0xae2e <FMenuSettingServerIP+0x1c4>
				       lcd_xy(y,((x+(iBlok*4))-(3-i)));_lcd(IPchar[i-1]);
				   }
                   //NextInput
				   if (iInput>=3){
    ae80:	73 30       	cpi	r23, 0x03	; 3
    ae82:	08 f4       	brcc	.+2      	; 0xae86 <FMenuSettingServerIP+0x21c>
    ae84:	91 c0       	rjmp	.+290    	; 0xafa8 <FMenuSettingServerIP+0x33e>
				       IP_blok[iBlok]=((IPchar[0]-'0')*100)+((IPchar[1]-'0')*10)+((IPchar[2]-'0'));
    ae86:	40 91 23 02 	lds	r20, 0x0223
    ae8a:	50 91 24 02 	lds	r21, 0x0224
    ae8e:	fa 01       	movw	r30, r20
    ae90:	e9 5d       	subi	r30, 0xD9	; 217
    ae92:	fd 4f       	sbci	r31, 0xFD	; 253
    ae94:	20 91 32 02 	lds	r18, 0x0232
    ae98:	20 5d       	subi	r18, 0xD0	; 208
    ae9a:	80 91 30 02 	lds	r24, 0x0230
    ae9e:	34 e6       	ldi	r19, 0x64	; 100
    aea0:	83 9f       	mul	r24, r19
    aea2:	c0 01       	movw	r24, r0
    aea4:	11 24       	eor	r1, r1
    aea6:	28 0f       	add	r18, r24
    aea8:	80 91 31 02 	lds	r24, 0x0231
    aeac:	3a e0       	ldi	r19, 0x0A	; 10
    aeae:	83 9f       	mul	r24, r19
    aeb0:	c0 01       	movw	r24, r0
    aeb2:	11 24       	eor	r1, r1
    aeb4:	28 0f       	add	r18, r24
    aeb6:	20 83       	st	Z, r18
					   IPchar[0]='0';IPchar[1]='0';IPchar[2]='0';
    aeb8:	80 e3       	ldi	r24, 0x30	; 48
    aeba:	80 93 30 02 	sts	0x0230, r24
    aebe:	80 93 31 02 	sts	0x0231, r24
    aec2:	80 93 32 02 	sts	0x0232, r24
					   //Reposition Value
					   lcd_printf(y,((x+(iBlok*4))-iInput),PSTR("   "));
    aec6:	44 0f       	add	r20, r20
    aec8:	55 1f       	adc	r21, r21
    aeca:	44 0f       	add	r20, r20
    aecc:	55 1f       	adc	r21, r21
    aece:	60 91 2d 02 	lds	r22, 0x022D
    aed2:	64 0f       	add	r22, r20
    aed4:	67 1b       	sub	r22, r23
    aed6:	80 91 2c 02 	lds	r24, 0x022C
    aeda:	42 e6       	ldi	r20, 0x62	; 98
    aedc:	54 e1       	ldi	r21, 0x14	; 20
    aede:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
					   sprintf_P(lcdteks,PSTR("%d"),IP_blok[iBlok]);
    aee2:	00 d0       	rcall	.+0      	; 0xaee4 <FMenuSettingServerIP+0x27a>
    aee4:	00 d0       	rcall	.+0      	; 0xaee6 <FMenuSettingServerIP+0x27c>
    aee6:	00 d0       	rcall	.+0      	; 0xaee8 <FMenuSettingServerIP+0x27e>
    aee8:	ad b7       	in	r26, 0x3d	; 61
    aeea:	be b7       	in	r27, 0x3e	; 62
    aeec:	11 96       	adiw	r26, 0x01	; 1
    aeee:	8e 01       	movw	r16, r28
    aef0:	0f 5f       	subi	r16, 0xFF	; 255
    aef2:	1f 4f       	sbci	r17, 0xFF	; 255
    aef4:	ed b7       	in	r30, 0x3d	; 61
    aef6:	fe b7       	in	r31, 0x3e	; 62
    aef8:	12 83       	std	Z+2, r17	; 0x02
    aefa:	01 83       	std	Z+1, r16	; 0x01
    aefc:	8f e5       	ldi	r24, 0x5F	; 95
    aefe:	94 e1       	ldi	r25, 0x14	; 20
    af00:	13 96       	adiw	r26, 0x03	; 3
    af02:	9c 93       	st	X, r25
    af04:	8e 93       	st	-X, r24
    af06:	12 97       	sbiw	r26, 0x02	; 2
    af08:	e0 91 23 02 	lds	r30, 0x0223
    af0c:	f0 91 24 02 	lds	r31, 0x0224
    af10:	e9 5d       	subi	r30, 0xD9	; 217
    af12:	fd 4f       	sbci	r31, 0xFD	; 253
    af14:	80 81       	ld	r24, Z
    af16:	14 96       	adiw	r26, 0x04	; 4
    af18:	8c 93       	st	X, r24
    af1a:	14 97       	sbiw	r26, 0x04	; 4
    af1c:	15 96       	adiw	r26, 0x05	; 5
    af1e:	1c 92       	st	X, r1
    af20:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
                       lcd_print(y,1+((x+(iBlok*4))-strlen(lcdteks)),lcdteks);
    af24:	f8 01       	movw	r30, r16
    af26:	01 90       	ld	r0, Z+
    af28:	00 20       	and	r0, r0
    af2a:	e9 f7       	brne	.-6      	; 0xaf26 <FMenuSettingServerIP+0x2bc>
    af2c:	31 97       	sbiw	r30, 0x01	; 1
    af2e:	e0 1b       	sub	r30, r16
    af30:	f1 0b       	sbc	r31, r17
    af32:	8d b7       	in	r24, 0x3d	; 61
    af34:	9e b7       	in	r25, 0x3e	; 62
    af36:	06 96       	adiw	r24, 0x06	; 6
    af38:	0f b6       	in	r0, 0x3f	; 63
    af3a:	f8 94       	cli
    af3c:	9e bf       	out	0x3e, r25	; 62
    af3e:	0f be       	out	0x3f, r0	; 63
    af40:	8d bf       	out	0x3d, r24	; 61
    af42:	60 91 2d 02 	lds	r22, 0x022D
    af46:	6f 5f       	subi	r22, 0xFF	; 255
    af48:	80 91 23 02 	lds	r24, 0x0223
    af4c:	90 91 24 02 	lds	r25, 0x0224
    af50:	88 0f       	add	r24, r24
    af52:	99 1f       	adc	r25, r25
    af54:	88 0f       	add	r24, r24
    af56:	99 1f       	adc	r25, r25
    af58:	68 0f       	add	r22, r24
    af5a:	6e 1b       	sub	r22, r30
    af5c:	80 91 2c 02 	lds	r24, 0x022C
    af60:	a8 01       	movw	r20, r16
    af62:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
					   if (iBlok>0)lcd_printf(y,1+((x+((iBlok-1)*4))),PSTR("."));
    af66:	80 91 23 02 	lds	r24, 0x0223
    af6a:	90 91 24 02 	lds	r25, 0x0224
    af6e:	00 97       	sbiw	r24, 0x00	; 0
    af70:	81 f0       	breq	.+32     	; 0xaf92 <FMenuSettingServerIP+0x328>
    af72:	60 91 2d 02 	lds	r22, 0x022D
    af76:	6f 5f       	subi	r22, 0xFF	; 255
    af78:	81 50       	subi	r24, 0x01	; 1
    af7a:	90 4c       	sbci	r25, 0xC0	; 192
    af7c:	88 0f       	add	r24, r24
    af7e:	99 1f       	adc	r25, r25
    af80:	88 0f       	add	r24, r24
    af82:	99 1f       	adc	r25, r25
    af84:	68 0f       	add	r22, r24
    af86:	80 91 2c 02 	lds	r24, 0x022C
    af8a:	4d e5       	ldi	r20, 0x5D	; 93
    af8c:	54 e1       	ldi	r21, 0x14	; 20
    af8e:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
					   iInput=0;
    af92:	10 92 2b 02 	sts	0x022B, r1
					   iBlok++;
    af96:	80 91 23 02 	lds	r24, 0x0223
    af9a:	90 91 24 02 	lds	r25, 0x0224
    af9e:	01 96       	adiw	r24, 0x01	; 1
    afa0:	90 93 24 02 	sts	0x0224, r25
    afa4:	80 93 23 02 	sts	0x0223, r24

				   }
				   if (iBlok>=4)stClientIP=cipStoreIPblok;
    afa8:	80 91 23 02 	lds	r24, 0x0223
    afac:	90 91 24 02 	lds	r25, 0x0224
    afb0:	04 97       	sbiw	r24, 0x04	; 4
    afb2:	18 f0       	brcs	.+6      	; 0xafba <FMenuSettingServerIP+0x350>
    afb4:	84 e0       	ldi	r24, 0x04	; 4
    afb6:	80 93 58 01 	sts	0x0158, r24
			   }

			   if (keyPressed==_KEY_CANCEL){
    afba:	97 ee       	ldi	r25, 0xE7	; 231
    afbc:	f9 16       	cp	r15, r25
    afbe:	09 f4       	brne	.+2      	; 0xafc2 <FMenuSettingServerIP+0x358>
    afc0:	c2 c0       	rjmp	.+388    	; 0xb146 <FMenuSettingServerIP+0x4dc>
			       stClientIP=cipExit; 
			   }
			   else
			   if (keyPressed==_KEY_ENTER){
    afc2:	a7 eb       	ldi	r26, 0xB7	; 183
    afc4:	fa 16       	cp	r15, r26
    afc6:	09 f0       	breq	.+2      	; 0xafca <FMenuSettingServerIP+0x360>
    afc8:	c7 c0       	rjmp	.+398    	; 0xb158 <FMenuSettingServerIP+0x4ee>
			       //NextInput
			       if (iBlok<4){
    afca:	40 91 23 02 	lds	r20, 0x0223
    afce:	50 91 24 02 	lds	r21, 0x0224
    afd2:	44 30       	cpi	r20, 0x04	; 4
    afd4:	51 05       	cpc	r21, r1
    afd6:	08 f0       	brcs	.+2      	; 0xafda <FMenuSettingServerIP+0x370>
    afd8:	a6 c0       	rjmp	.+332    	; 0xb126 <FMenuSettingServerIP+0x4bc>
				       if (iInput==1)IP_blok[iBlok]=((IPchar[0]-'0'));
    afda:	80 91 2b 02 	lds	r24, 0x022B
    afde:	81 30       	cpi	r24, 0x01	; 1
    afe0:	41 f4       	brne	.+16     	; 0xaff2 <FMenuSettingServerIP+0x388>
    afe2:	fa 01       	movw	r30, r20
    afe4:	e9 5d       	subi	r30, 0xD9	; 217
    afe6:	fd 4f       	sbci	r31, 0xFD	; 253
    afe8:	80 91 30 02 	lds	r24, 0x0230
    afec:	80 53       	subi	r24, 0x30	; 48
    afee:	80 83       	st	Z, r24
    aff0:	22 c0       	rjmp	.+68     	; 0xb036 <FMenuSettingServerIP+0x3cc>
					   if (iInput==2)IP_blok[iBlok]=((IPchar[0]-'0')*10)+(IPchar[1]-'0');
    aff2:	82 30       	cpi	r24, 0x02	; 2
    aff4:	49 f4       	brne	.+18     	; 0xb008 <FMenuSettingServerIP+0x39e>
    aff6:	fa 01       	movw	r30, r20
    aff8:	e9 5d       	subi	r30, 0xD9	; 217
    affa:	fd 4f       	sbci	r31, 0xFD	; 253
    affc:	20 91 31 02 	lds	r18, 0x0231
    b000:	20 51       	subi	r18, 0x10	; 16
    b002:	80 91 30 02 	lds	r24, 0x0230
    b006:	11 c0       	rjmp	.+34     	; 0xb02a <FMenuSettingServerIP+0x3c0>
					   if (iInput==3)IP_blok[iBlok]=((IPchar[0]-'0')*100)+((IPchar[1]-'0')*10)+((IPchar[2]-'0'));
    b008:	83 30       	cpi	r24, 0x03	; 3
    b00a:	a9 f4       	brne	.+42     	; 0xb036 <FMenuSettingServerIP+0x3cc>
    b00c:	fa 01       	movw	r30, r20
    b00e:	e9 5d       	subi	r30, 0xD9	; 217
    b010:	fd 4f       	sbci	r31, 0xFD	; 253
    b012:	20 91 32 02 	lds	r18, 0x0232
    b016:	20 5d       	subi	r18, 0xD0	; 208
    b018:	80 91 30 02 	lds	r24, 0x0230
    b01c:	34 e6       	ldi	r19, 0x64	; 100
    b01e:	83 9f       	mul	r24, r19
    b020:	c0 01       	movw	r24, r0
    b022:	11 24       	eor	r1, r1
    b024:	28 0f       	add	r18, r24
    b026:	80 91 31 02 	lds	r24, 0x0231
    b02a:	3a e0       	ldi	r19, 0x0A	; 10
    b02c:	83 9f       	mul	r24, r19
    b02e:	c0 01       	movw	r24, r0
    b030:	11 24       	eor	r1, r1
    b032:	28 0f       	add	r18, r24
    b034:	20 83       	st	Z, r18
				       
					   IPchar[0]='0';IPchar[1]='0';IPchar[2]='0';
    b036:	80 e3       	ldi	r24, 0x30	; 48
    b038:	80 93 30 02 	sts	0x0230, r24
    b03c:	80 93 31 02 	sts	0x0231, r24
    b040:	80 93 32 02 	sts	0x0232, r24
					   //Reposition Value
					   lcd_printf(y,((x+(iBlok*4))-3),PSTR("   "));
    b044:	60 91 2d 02 	lds	r22, 0x022D
    b048:	63 50       	subi	r22, 0x03	; 3
    b04a:	44 0f       	add	r20, r20
    b04c:	55 1f       	adc	r21, r21
    b04e:	44 0f       	add	r20, r20
    b050:	55 1f       	adc	r21, r21
    b052:	64 0f       	add	r22, r20
    b054:	80 91 2c 02 	lds	r24, 0x022C
    b058:	49 e5       	ldi	r20, 0x59	; 89
    b05a:	54 e1       	ldi	r21, 0x14	; 20
    b05c:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
					   sprintf_P(lcdteks,PSTR("%d"),IP_blok[iBlok]);
    b060:	00 d0       	rcall	.+0      	; 0xb062 <FMenuSettingServerIP+0x3f8>
    b062:	00 d0       	rcall	.+0      	; 0xb064 <FMenuSettingServerIP+0x3fa>
    b064:	00 d0       	rcall	.+0      	; 0xb066 <FMenuSettingServerIP+0x3fc>
    b066:	ad b7       	in	r26, 0x3d	; 61
    b068:	be b7       	in	r27, 0x3e	; 62
    b06a:	11 96       	adiw	r26, 0x01	; 1
    b06c:	8e 01       	movw	r16, r28
    b06e:	0f 5f       	subi	r16, 0xFF	; 255
    b070:	1f 4f       	sbci	r17, 0xFF	; 255
    b072:	ed b7       	in	r30, 0x3d	; 61
    b074:	fe b7       	in	r31, 0x3e	; 62
    b076:	12 83       	std	Z+2, r17	; 0x02
    b078:	01 83       	std	Z+1, r16	; 0x01
    b07a:	86 e5       	ldi	r24, 0x56	; 86
    b07c:	94 e1       	ldi	r25, 0x14	; 20
    b07e:	13 96       	adiw	r26, 0x03	; 3
    b080:	9c 93       	st	X, r25
    b082:	8e 93       	st	-X, r24
    b084:	12 97       	sbiw	r26, 0x02	; 2
    b086:	e0 91 23 02 	lds	r30, 0x0223
    b08a:	f0 91 24 02 	lds	r31, 0x0224
    b08e:	e9 5d       	subi	r30, 0xD9	; 217
    b090:	fd 4f       	sbci	r31, 0xFD	; 253
    b092:	80 81       	ld	r24, Z
    b094:	14 96       	adiw	r26, 0x04	; 4
    b096:	8c 93       	st	X, r24
    b098:	14 97       	sbiw	r26, 0x04	; 4
    b09a:	15 96       	adiw	r26, 0x05	; 5
    b09c:	1c 92       	st	X, r1
    b09e:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
                       lcd_print(y,1+((x+(iBlok*4))-strlen(lcdteks)),lcdteks);
    b0a2:	f8 01       	movw	r30, r16
    b0a4:	01 90       	ld	r0, Z+
    b0a6:	00 20       	and	r0, r0
    b0a8:	e9 f7       	brne	.-6      	; 0xb0a4 <FMenuSettingServerIP+0x43a>
    b0aa:	31 97       	sbiw	r30, 0x01	; 1
    b0ac:	e0 1b       	sub	r30, r16
    b0ae:	f1 0b       	sbc	r31, r17
    b0b0:	8d b7       	in	r24, 0x3d	; 61
    b0b2:	9e b7       	in	r25, 0x3e	; 62
    b0b4:	06 96       	adiw	r24, 0x06	; 6
    b0b6:	0f b6       	in	r0, 0x3f	; 63
    b0b8:	f8 94       	cli
    b0ba:	9e bf       	out	0x3e, r25	; 62
    b0bc:	0f be       	out	0x3f, r0	; 63
    b0be:	8d bf       	out	0x3d, r24	; 61
    b0c0:	60 91 2d 02 	lds	r22, 0x022D
    b0c4:	6f 5f       	subi	r22, 0xFF	; 255
    b0c6:	80 91 23 02 	lds	r24, 0x0223
    b0ca:	90 91 24 02 	lds	r25, 0x0224
    b0ce:	88 0f       	add	r24, r24
    b0d0:	99 1f       	adc	r25, r25
    b0d2:	88 0f       	add	r24, r24
    b0d4:	99 1f       	adc	r25, r25
    b0d6:	68 0f       	add	r22, r24
    b0d8:	6e 1b       	sub	r22, r30
    b0da:	80 91 2c 02 	lds	r24, 0x022C
    b0de:	a8 01       	movw	r20, r16
    b0e0:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>

					   if (iBlok>0)lcd_printf(y,1+((x+((iBlok-1)*4))),PSTR("."));
    b0e4:	80 91 23 02 	lds	r24, 0x0223
    b0e8:	90 91 24 02 	lds	r25, 0x0224
    b0ec:	00 97       	sbiw	r24, 0x00	; 0
    b0ee:	81 f0       	breq	.+32     	; 0xb110 <FMenuSettingServerIP+0x4a6>
    b0f0:	60 91 2d 02 	lds	r22, 0x022D
    b0f4:	6f 5f       	subi	r22, 0xFF	; 255
    b0f6:	81 50       	subi	r24, 0x01	; 1
    b0f8:	90 4c       	sbci	r25, 0xC0	; 192
    b0fa:	88 0f       	add	r24, r24
    b0fc:	99 1f       	adc	r25, r25
    b0fe:	88 0f       	add	r24, r24
    b100:	99 1f       	adc	r25, r25
    b102:	68 0f       	add	r22, r24
    b104:	80 91 2c 02 	lds	r24, 0x022C
    b108:	44 e5       	ldi	r20, 0x54	; 84
    b10a:	54 e1       	ldi	r21, 0x14	; 20
    b10c:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
				       iInput=0;
    b110:	10 92 2b 02 	sts	0x022B, r1
					   iBlok++;	   
    b114:	80 91 23 02 	lds	r24, 0x0223
    b118:	90 91 24 02 	lds	r25, 0x0224
    b11c:	01 96       	adiw	r24, 0x01	; 1
    b11e:	90 93 24 02 	sts	0x0224, r25
    b122:	80 93 23 02 	sts	0x0223, r24
				   }
				   if (iBlok>=4)stClientIP=cipStoreIPblok;
    b126:	80 91 23 02 	lds	r24, 0x0223
    b12a:	90 91 24 02 	lds	r25, 0x0224
    b12e:	04 97       	sbiw	r24, 0x04	; 4
    b130:	98 f0       	brcs	.+38     	; 0xb158 <FMenuSettingServerIP+0x4ee>
    b132:	84 e0       	ldi	r24, 0x04	; 4
    b134:	09 c0       	rjmp	.+18     	; 0xb148 <FMenuSettingServerIP+0x4de>
			   }
		       break;
          case cipStoreIPblok:
		       //UpdateIPblok
			   eeprom_write_block((const void*) &IP_blok,(const void*) &DefServerIP,4);
    b136:	87 e2       	ldi	r24, 0x27	; 39
    b138:	92 e0       	ldi	r25, 0x02	; 2
    b13a:	6c e2       	ldi	r22, 0x2C	; 44
    b13c:	70 e0       	ldi	r23, 0x00	; 0
    b13e:	44 e0       	ldi	r20, 0x04	; 4
    b140:	50 e0       	ldi	r21, 0x00	; 0
    b142:	0e 94 d1 ac 	call	0x159a2	; 0x159a2 <__eewr_block_m128>
			   stClientIP=cipExit;
    b146:	83 e0       	ldi	r24, 0x03	; 3
    b148:	80 93 58 01 	sts	0x0158, r24
    b14c:	05 c0       	rjmp	.+10     	; 0xb158 <FMenuSettingServerIP+0x4ee>
		       break; 
          case cipExit://Cancel IPConfig
			   stClientIP=cipInit;
    b14e:	81 e0       	ldi	r24, 0x01	; 1
    b150:	80 93 58 01 	sts	0x0158, r24
			   Result=MENU_DONE;
    b154:	80 93 2e 02 	sts	0x022E, r24
		       break;     
		  }//EndSwitch	 
	return Result;
}
    b158:	80 91 2e 02 	lds	r24, 0x022E
    b15c:	64 96       	adiw	r28, 0x14	; 20
    b15e:	0f b6       	in	r0, 0x3f	; 63
    b160:	f8 94       	cli
    b162:	de bf       	out	0x3e, r29	; 62
    b164:	0f be       	out	0x3f, r0	; 63
    b166:	cd bf       	out	0x3d, r28	; 61
    b168:	cf 91       	pop	r28
    b16a:	df 91       	pop	r29
    b16c:	1f 91       	pop	r17
    b16e:	0f 91       	pop	r16
    b170:	ff 90       	pop	r15
    b172:	08 95       	ret

0000b174 <FMenuSettingClientIP>:





char FMenuSettingClientIP(){
    b174:	ff 92       	push	r15
    b176:	0f 93       	push	r16
    b178:	1f 93       	push	r17
    b17a:	df 93       	push	r29
    b17c:	cf 93       	push	r28
    b17e:	cd b7       	in	r28, 0x3d	; 61
    b180:	de b7       	in	r29, 0x3e	; 62
    b182:	64 97       	sbiw	r28, 0x14	; 20
    b184:	0f b6       	in	r0, 0x3f	; 63
    b186:	f8 94       	cli
    b188:	de bf       	out	0x3e, r29	; 62
    b18a:	0f be       	out	0x3f, r0	; 63
    b18c:	cd bf       	out	0x3d, r28	; 61
     //Client IP
     //Old: 192.168.123.000
	 //New:   _.   .   .
	 //--------------------
	 //*)cancel    #)next
     Result=MENU_NONE;
    b18e:	10 92 3e 02 	sts	0x023E, r1
	 switch(stClientIP){
    b192:	80 91 59 01 	lds	r24, 0x0159
    b196:	82 30       	cpi	r24, 0x02	; 2
    b198:	09 f4       	brne	.+2      	; 0xb19c <FMenuSettingClientIP+0x28>
    b19a:	79 c0       	rjmp	.+242    	; 0xb28e <FMenuSettingClientIP+0x11a>
    b19c:	83 30       	cpi	r24, 0x03	; 3
    b19e:	20 f4       	brcc	.+8      	; 0xb1a8 <FMenuSettingClientIP+0x34>
    b1a0:	81 30       	cpi	r24, 0x01	; 1
    b1a2:	09 f0       	breq	.+2      	; 0xb1a6 <FMenuSettingClientIP+0x32>
    b1a4:	5e c2       	rjmp	.+1212   	; 0xb662 <FMenuSettingClientIP+0x4ee>
    b1a6:	07 c0       	rjmp	.+14     	; 0xb1b6 <FMenuSettingClientIP+0x42>
    b1a8:	83 30       	cpi	r24, 0x03	; 3
    b1aa:	09 f4       	brne	.+2      	; 0xb1ae <FMenuSettingClientIP+0x3a>
    b1ac:	55 c2       	rjmp	.+1194   	; 0xb658 <FMenuSettingClientIP+0x4e4>
    b1ae:	84 30       	cpi	r24, 0x04	; 4
    b1b0:	09 f0       	breq	.+2      	; 0xb1b4 <FMenuSettingClientIP+0x40>
    b1b2:	57 c2       	rjmp	.+1198   	; 0xb662 <FMenuSettingClientIP+0x4ee>
    b1b4:	45 c2       	rjmp	.+1162   	; 0xb640 <FMenuSettingClientIP+0x4cc>
		  case cipInit:
			   lcd_clear();
    b1b6:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
	           lcd_printf(1,1,PSTR("Client IP"));
    b1ba:	81 e0       	ldi	r24, 0x01	; 1
    b1bc:	61 e0       	ldi	r22, 0x01	; 1
    b1be:	48 ef       	ldi	r20, 0xF8	; 248
    b1c0:	54 e1       	ldi	r21, 0x14	; 20
    b1c2:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
			   eeprom_read_block((void*)&IP_blok,(const void*)&DefClientIP,4);
    b1c6:	87 e3       	ldi	r24, 0x37	; 55
    b1c8:	92 e0       	ldi	r25, 0x02	; 2
    b1ca:	68 e2       	ldi	r22, 0x28	; 40
    b1cc:	70 e0       	ldi	r23, 0x00	; 0
    b1ce:	44 e0       	ldi	r20, 0x04	; 4
    b1d0:	50 e0       	ldi	r21, 0x00	; 0
    b1d2:	0e 94 b9 ac 	call	0x15972	; 0x15972 <__eerd_block_m128>
	           sprintf_P(lcdteks,PSTR("Old: %d.%d.%d.%d"),IP_blok[0],IP_blok[1],IP_blok[2],IP_blok[3]);
    b1d6:	8d b7       	in	r24, 0x3d	; 61
    b1d8:	9e b7       	in	r25, 0x3e	; 62
    b1da:	0c 97       	sbiw	r24, 0x0c	; 12
    b1dc:	0f b6       	in	r0, 0x3f	; 63
    b1de:	f8 94       	cli
    b1e0:	9e bf       	out	0x3e, r25	; 62
    b1e2:	0f be       	out	0x3f, r0	; 63
    b1e4:	8d bf       	out	0x3d, r24	; 61
    b1e6:	ed b7       	in	r30, 0x3d	; 61
    b1e8:	fe b7       	in	r31, 0x3e	; 62
    b1ea:	31 96       	adiw	r30, 0x01	; 1
    b1ec:	8e 01       	movw	r16, r28
    b1ee:	0f 5f       	subi	r16, 0xFF	; 255
    b1f0:	1f 4f       	sbci	r17, 0xFF	; 255
    b1f2:	ad b7       	in	r26, 0x3d	; 61
    b1f4:	be b7       	in	r27, 0x3e	; 62
    b1f6:	12 96       	adiw	r26, 0x02	; 2
    b1f8:	1c 93       	st	X, r17
    b1fa:	0e 93       	st	-X, r16
    b1fc:	11 97       	sbiw	r26, 0x01	; 1
    b1fe:	87 ee       	ldi	r24, 0xE7	; 231
    b200:	94 e1       	ldi	r25, 0x14	; 20
    b202:	93 83       	std	Z+3, r25	; 0x03
    b204:	82 83       	std	Z+2, r24	; 0x02
    b206:	80 91 37 02 	lds	r24, 0x0237
    b20a:	84 83       	std	Z+4, r24	; 0x04
    b20c:	15 82       	std	Z+5, r1	; 0x05
    b20e:	80 91 38 02 	lds	r24, 0x0238
    b212:	86 83       	std	Z+6, r24	; 0x06
    b214:	17 82       	std	Z+7, r1	; 0x07
    b216:	80 91 39 02 	lds	r24, 0x0239
    b21a:	80 87       	std	Z+8, r24	; 0x08
    b21c:	11 86       	std	Z+9, r1	; 0x09
    b21e:	80 91 3a 02 	lds	r24, 0x023A
    b222:	82 87       	std	Z+10, r24	; 0x0a
    b224:	13 86       	std	Z+11, r1	; 0x0b
    b226:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	           lcd_print(2,1,lcdteks);
    b22a:	ed b7       	in	r30, 0x3d	; 61
    b22c:	fe b7       	in	r31, 0x3e	; 62
    b22e:	3c 96       	adiw	r30, 0x0c	; 12
    b230:	0f b6       	in	r0, 0x3f	; 63
    b232:	f8 94       	cli
    b234:	fe bf       	out	0x3e, r31	; 62
    b236:	0f be       	out	0x3f, r0	; 63
    b238:	ed bf       	out	0x3d, r30	; 61
    b23a:	82 e0       	ldi	r24, 0x02	; 2
    b23c:	61 e0       	ldi	r22, 0x01	; 1
    b23e:	a8 01       	movw	r20, r16
    b240:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
			   lcd_printf(3,1,PSTR("New:   _.   .   .   "));
    b244:	83 e0       	ldi	r24, 0x03	; 3
    b246:	61 e0       	ldi	r22, 0x01	; 1
    b248:	42 ed       	ldi	r20, 0xD2	; 210
    b24a:	54 e1       	ldi	r21, 0x14	; 20
    b24c:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
			   lcd_printf(4,1,PSTR("[*]cancel  [#]next  "));
    b250:	84 e0       	ldi	r24, 0x04	; 4
    b252:	61 e0       	ldi	r22, 0x01	; 1
    b254:	4d eb       	ldi	r20, 0xBD	; 189
    b256:	54 e1       	ldi	r21, 0x14	; 20
    b258:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
               iLoop=0;
    b25c:	10 92 36 02 	sts	0x0236, r1
    b260:	10 92 35 02 	sts	0x0235, r1
			   y=3,x=8;
    b264:	83 e0       	ldi	r24, 0x03	; 3
    b266:	80 93 3c 02 	sts	0x023C, r24
    b26a:	88 e0       	ldi	r24, 0x08	; 8
    b26c:	80 93 3d 02 	sts	0x023D, r24
			   iInput=0; iBlok=0;
    b270:	10 92 3b 02 	sts	0x023B, r1
    b274:	10 92 34 02 	sts	0x0234, r1
    b278:	10 92 33 02 	sts	0x0233, r1
			   IPchar[0]='0';IPchar[1]='0';IPchar[2]='0';
    b27c:	80 e3       	ldi	r24, 0x30	; 48
    b27e:	80 93 40 02 	sts	0x0240, r24
    b282:	80 93 41 02 	sts	0x0241, r24
    b286:	80 93 42 02 	sts	0x0242, r24
			   stClientIP=cipInputIP; 
    b28a:	82 e0       	ldi	r24, 0x02	; 2
    b28c:	e2 c1       	rjmp	.+964    	; 0xb652 <FMenuSettingClientIP+0x4de>
		       break;
          case cipInputIP:
			   //Blinking 60% _ 
			   iLoop++;
    b28e:	80 91 35 02 	lds	r24, 0x0235
    b292:	90 91 36 02 	lds	r25, 0x0236
    b296:	01 96       	adiw	r24, 0x01	; 1
    b298:	90 93 36 02 	sts	0x0236, r25
    b29c:	80 93 35 02 	sts	0x0235, r24
			   if ((iLoop%2000)==0){
    b2a0:	60 ed       	ldi	r22, 0xD0	; 208
    b2a2:	77 e0       	ldi	r23, 0x07	; 7
    b2a4:	0e 94 03 aa 	call	0x15406	; 0x15406 <__udivmodhi4>
    b2a8:	89 2b       	or	r24, r25
    b2aa:	81 f4       	brne	.+32     	; 0xb2cc <FMenuSettingClientIP+0x158>
			      lcd_put(y,(x+(iBlok*4)),'_'); 
    b2ac:	80 91 33 02 	lds	r24, 0x0233
    b2b0:	90 91 34 02 	lds	r25, 0x0234
    b2b4:	88 0f       	add	r24, r24
    b2b6:	99 1f       	adc	r25, r25
    b2b8:	88 0f       	add	r24, r24
    b2ba:	99 1f       	adc	r25, r25
    b2bc:	60 91 3d 02 	lds	r22, 0x023D
    b2c0:	68 0f       	add	r22, r24
    b2c2:	80 91 3c 02 	lds	r24, 0x023C
    b2c6:	4f e5       	ldi	r20, 0x5F	; 95
    b2c8:	0e 94 ca a4 	call	0x14994	; 0x14994 <lcd_put>
			   }
			   if ((iLoop%2000)==1000){
    b2cc:	80 91 35 02 	lds	r24, 0x0235
    b2d0:	90 91 36 02 	lds	r25, 0x0236
    b2d4:	60 ed       	ldi	r22, 0xD0	; 208
    b2d6:	77 e0       	ldi	r23, 0x07	; 7
    b2d8:	0e 94 03 aa 	call	0x15406	; 0x15406 <__udivmodhi4>
    b2dc:	88 5e       	subi	r24, 0xE8	; 232
    b2de:	93 40       	sbci	r25, 0x03	; 3
    b2e0:	81 f4       	brne	.+32     	; 0xb302 <FMenuSettingClientIP+0x18e>
			      lcd_put(y,(x+(iBlok*4)),' '); 
    b2e2:	80 91 33 02 	lds	r24, 0x0233
    b2e6:	90 91 34 02 	lds	r25, 0x0234
    b2ea:	88 0f       	add	r24, r24
    b2ec:	99 1f       	adc	r25, r25
    b2ee:	88 0f       	add	r24, r24
    b2f0:	99 1f       	adc	r25, r25
    b2f2:	60 91 3d 02 	lds	r22, 0x023D
    b2f6:	68 0f       	add	r22, r24
    b2f8:	80 91 3c 02 	lds	r24, 0x023C
    b2fc:	40 e2       	ldi	r20, 0x20	; 32
    b2fe:	0e 94 ca a4 	call	0x14994	; 0x14994 <lcd_put>
			   }
			   //GetKeyPressed
			   keyPressed=_key_scan(1);
    b302:	81 e0       	ldi	r24, 0x01	; 1
    b304:	0e 94 f6 a5 	call	0x14bec	; 0x14bec <_key_scan>
    b308:	f8 2e       	mov	r15, r24
			   keyChar=_key_btn(keyPressed);
    b30a:	0e 94 57 a5 	call	0x14aae	; 0x14aae <_key_btn>
    b30e:	28 2f       	mov	r18, r24
               if ((keyChar>='0')&&(keyChar<='9')){
    b310:	80 53       	subi	r24, 0x30	; 48
    b312:	8a 30       	cpi	r24, 0x0A	; 10
    b314:	08 f0       	brcs	.+2      	; 0xb318 <FMenuSettingClientIP+0x1a4>
    b316:	d6 c0       	rjmp	.+428    	; 0xb4c4 <FMenuSettingClientIP+0x350>
    b318:	80 e5       	ldi	r24, 0x50	; 80
    b31a:	93 ec       	ldi	r25, 0xC3	; 195
    b31c:	01 97       	sbiw	r24, 0x01	; 1
    b31e:	f1 f7       	brne	.-4      	; 0xb31c <FMenuSettingClientIP+0x1a8>
			       _delay_ms(200);
			       IPchar[iInput]=keyChar;
    b320:	80 91 3b 02 	lds	r24, 0x023B
    b324:	e8 2f       	mov	r30, r24
    b326:	f0 e0       	ldi	r31, 0x00	; 0
    b328:	e0 5c       	subi	r30, 0xC0	; 192
    b32a:	fd 4f       	sbci	r31, 0xFD	; 253
    b32c:	20 83       	st	Z, r18
				   iInput++;                    
    b32e:	8f 5f       	subi	r24, 0xFF	; 255
    b330:	80 93 3b 02 	sts	0x023B, r24
				   for (i=1;i<(iInput+1);i++){
    b334:	81 e0       	ldi	r24, 0x01	; 1
    b336:	1c c0       	rjmp	.+56     	; 0xb370 <FMenuSettingClientIP+0x1fc>
				       lcd_xy(y,((x+(iBlok*4))-(3-i)));_lcd(IPchar[i-1]);
    b338:	80 91 3d 02 	lds	r24, 0x023D
    b33c:	68 0f       	add	r22, r24
    b33e:	63 50       	subi	r22, 0x03	; 3
    b340:	80 91 33 02 	lds	r24, 0x0233
    b344:	90 91 34 02 	lds	r25, 0x0234
    b348:	88 0f       	add	r24, r24
    b34a:	99 1f       	adc	r25, r25
    b34c:	88 0f       	add	r24, r24
    b34e:	99 1f       	adc	r25, r25
    b350:	68 0f       	add	r22, r24
    b352:	80 91 3c 02 	lds	r24, 0x023C
    b356:	0e 94 3c a4 	call	0x14878	; 0x14878 <lcd_xy>
    b35a:	e0 91 3f 02 	lds	r30, 0x023F
    b35e:	f0 e0       	ldi	r31, 0x00	; 0
    b360:	e1 5c       	subi	r30, 0xC1	; 193
    b362:	fd 4f       	sbci	r31, 0xFD	; 253
    b364:	80 81       	ld	r24, Z
    b366:	0e 94 16 a4 	call	0x1482c	; 0x1482c <_lcd>
			   keyChar=_key_btn(keyPressed);
               if ((keyChar>='0')&&(keyChar<='9')){
			       _delay_ms(200);
			       IPchar[iInput]=keyChar;
				   iInput++;                    
				   for (i=1;i<(iInput+1);i++){
    b36a:	80 91 3f 02 	lds	r24, 0x023F
    b36e:	8f 5f       	subi	r24, 0xFF	; 255
    b370:	80 93 3f 02 	sts	0x023F, r24
    b374:	70 91 3b 02 	lds	r23, 0x023B
    b378:	60 91 3f 02 	lds	r22, 0x023F
    b37c:	27 2f       	mov	r18, r23
    b37e:	30 e0       	ldi	r19, 0x00	; 0
    b380:	86 2f       	mov	r24, r22
    b382:	90 e0       	ldi	r25, 0x00	; 0
    b384:	28 17       	cp	r18, r24
    b386:	39 07       	cpc	r19, r25
    b388:	bc f6       	brge	.-82     	; 0xb338 <FMenuSettingClientIP+0x1c4>
				       lcd_xy(y,((x+(iBlok*4))-(3-i)));_lcd(IPchar[i-1]);
				   }
                   //NextInput
				   if (iInput>=3){
    b38a:	73 30       	cpi	r23, 0x03	; 3
    b38c:	08 f4       	brcc	.+2      	; 0xb390 <FMenuSettingClientIP+0x21c>
    b38e:	91 c0       	rjmp	.+290    	; 0xb4b2 <FMenuSettingClientIP+0x33e>
				       IP_blok[iBlok]=((IPchar[0]-'0')*100)+((IPchar[1]-'0')*10)+((IPchar[2]-'0'));
    b390:	40 91 33 02 	lds	r20, 0x0233
    b394:	50 91 34 02 	lds	r21, 0x0234
    b398:	fa 01       	movw	r30, r20
    b39a:	e9 5c       	subi	r30, 0xC9	; 201
    b39c:	fd 4f       	sbci	r31, 0xFD	; 253
    b39e:	20 91 42 02 	lds	r18, 0x0242
    b3a2:	20 5d       	subi	r18, 0xD0	; 208
    b3a4:	80 91 40 02 	lds	r24, 0x0240
    b3a8:	34 e6       	ldi	r19, 0x64	; 100
    b3aa:	83 9f       	mul	r24, r19
    b3ac:	c0 01       	movw	r24, r0
    b3ae:	11 24       	eor	r1, r1
    b3b0:	28 0f       	add	r18, r24
    b3b2:	80 91 41 02 	lds	r24, 0x0241
    b3b6:	3a e0       	ldi	r19, 0x0A	; 10
    b3b8:	83 9f       	mul	r24, r19
    b3ba:	c0 01       	movw	r24, r0
    b3bc:	11 24       	eor	r1, r1
    b3be:	28 0f       	add	r18, r24
    b3c0:	20 83       	st	Z, r18
					   IPchar[0]='0';IPchar[1]='0';IPchar[2]='0';
    b3c2:	80 e3       	ldi	r24, 0x30	; 48
    b3c4:	80 93 40 02 	sts	0x0240, r24
    b3c8:	80 93 41 02 	sts	0x0241, r24
    b3cc:	80 93 42 02 	sts	0x0242, r24
					   //Reposition Value
					   lcd_printf(y,((x+(iBlok*4))-iInput),PSTR("   "));
    b3d0:	44 0f       	add	r20, r20
    b3d2:	55 1f       	adc	r21, r21
    b3d4:	44 0f       	add	r20, r20
    b3d6:	55 1f       	adc	r21, r21
    b3d8:	60 91 3d 02 	lds	r22, 0x023D
    b3dc:	64 0f       	add	r22, r20
    b3de:	67 1b       	sub	r22, r23
    b3e0:	80 91 3c 02 	lds	r24, 0x023C
    b3e4:	49 eb       	ldi	r20, 0xB9	; 185
    b3e6:	54 e1       	ldi	r21, 0x14	; 20
    b3e8:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
					   sprintf_P(lcdteks,PSTR("%d"),IP_blok[iBlok]);
    b3ec:	00 d0       	rcall	.+0      	; 0xb3ee <FMenuSettingClientIP+0x27a>
    b3ee:	00 d0       	rcall	.+0      	; 0xb3f0 <FMenuSettingClientIP+0x27c>
    b3f0:	00 d0       	rcall	.+0      	; 0xb3f2 <FMenuSettingClientIP+0x27e>
    b3f2:	ad b7       	in	r26, 0x3d	; 61
    b3f4:	be b7       	in	r27, 0x3e	; 62
    b3f6:	11 96       	adiw	r26, 0x01	; 1
    b3f8:	8e 01       	movw	r16, r28
    b3fa:	0f 5f       	subi	r16, 0xFF	; 255
    b3fc:	1f 4f       	sbci	r17, 0xFF	; 255
    b3fe:	ed b7       	in	r30, 0x3d	; 61
    b400:	fe b7       	in	r31, 0x3e	; 62
    b402:	12 83       	std	Z+2, r17	; 0x02
    b404:	01 83       	std	Z+1, r16	; 0x01
    b406:	86 eb       	ldi	r24, 0xB6	; 182
    b408:	94 e1       	ldi	r25, 0x14	; 20
    b40a:	13 96       	adiw	r26, 0x03	; 3
    b40c:	9c 93       	st	X, r25
    b40e:	8e 93       	st	-X, r24
    b410:	12 97       	sbiw	r26, 0x02	; 2
    b412:	e0 91 33 02 	lds	r30, 0x0233
    b416:	f0 91 34 02 	lds	r31, 0x0234
    b41a:	e9 5c       	subi	r30, 0xC9	; 201
    b41c:	fd 4f       	sbci	r31, 0xFD	; 253
    b41e:	80 81       	ld	r24, Z
    b420:	14 96       	adiw	r26, 0x04	; 4
    b422:	8c 93       	st	X, r24
    b424:	14 97       	sbiw	r26, 0x04	; 4
    b426:	15 96       	adiw	r26, 0x05	; 5
    b428:	1c 92       	st	X, r1
    b42a:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
                       lcd_print(y,1+((x+(iBlok*4))-strlen(lcdteks)),lcdteks);
    b42e:	f8 01       	movw	r30, r16
    b430:	01 90       	ld	r0, Z+
    b432:	00 20       	and	r0, r0
    b434:	e9 f7       	brne	.-6      	; 0xb430 <FMenuSettingClientIP+0x2bc>
    b436:	31 97       	sbiw	r30, 0x01	; 1
    b438:	e0 1b       	sub	r30, r16
    b43a:	f1 0b       	sbc	r31, r17
    b43c:	8d b7       	in	r24, 0x3d	; 61
    b43e:	9e b7       	in	r25, 0x3e	; 62
    b440:	06 96       	adiw	r24, 0x06	; 6
    b442:	0f b6       	in	r0, 0x3f	; 63
    b444:	f8 94       	cli
    b446:	9e bf       	out	0x3e, r25	; 62
    b448:	0f be       	out	0x3f, r0	; 63
    b44a:	8d bf       	out	0x3d, r24	; 61
    b44c:	60 91 3d 02 	lds	r22, 0x023D
    b450:	6f 5f       	subi	r22, 0xFF	; 255
    b452:	80 91 33 02 	lds	r24, 0x0233
    b456:	90 91 34 02 	lds	r25, 0x0234
    b45a:	88 0f       	add	r24, r24
    b45c:	99 1f       	adc	r25, r25
    b45e:	88 0f       	add	r24, r24
    b460:	99 1f       	adc	r25, r25
    b462:	68 0f       	add	r22, r24
    b464:	6e 1b       	sub	r22, r30
    b466:	80 91 3c 02 	lds	r24, 0x023C
    b46a:	a8 01       	movw	r20, r16
    b46c:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
					   if (iBlok>0)lcd_printf(y,1+((x+((iBlok-1)*4))),PSTR("."));
    b470:	80 91 33 02 	lds	r24, 0x0233
    b474:	90 91 34 02 	lds	r25, 0x0234
    b478:	00 97       	sbiw	r24, 0x00	; 0
    b47a:	81 f0       	breq	.+32     	; 0xb49c <FMenuSettingClientIP+0x328>
    b47c:	60 91 3d 02 	lds	r22, 0x023D
    b480:	6f 5f       	subi	r22, 0xFF	; 255
    b482:	81 50       	subi	r24, 0x01	; 1
    b484:	90 4c       	sbci	r25, 0xC0	; 192
    b486:	88 0f       	add	r24, r24
    b488:	99 1f       	adc	r25, r25
    b48a:	88 0f       	add	r24, r24
    b48c:	99 1f       	adc	r25, r25
    b48e:	68 0f       	add	r22, r24
    b490:	80 91 3c 02 	lds	r24, 0x023C
    b494:	44 eb       	ldi	r20, 0xB4	; 180
    b496:	54 e1       	ldi	r21, 0x14	; 20
    b498:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
					   iInput=0;
    b49c:	10 92 3b 02 	sts	0x023B, r1
					   iBlok++;
    b4a0:	80 91 33 02 	lds	r24, 0x0233
    b4a4:	90 91 34 02 	lds	r25, 0x0234
    b4a8:	01 96       	adiw	r24, 0x01	; 1
    b4aa:	90 93 34 02 	sts	0x0234, r25
    b4ae:	80 93 33 02 	sts	0x0233, r24

				   }
				   if (iBlok>=4)stClientIP=cipStoreIPblok;
    b4b2:	80 91 33 02 	lds	r24, 0x0233
    b4b6:	90 91 34 02 	lds	r25, 0x0234
    b4ba:	04 97       	sbiw	r24, 0x04	; 4
    b4bc:	18 f0       	brcs	.+6      	; 0xb4c4 <FMenuSettingClientIP+0x350>
    b4be:	84 e0       	ldi	r24, 0x04	; 4
    b4c0:	80 93 59 01 	sts	0x0159, r24
			   }

			   if (keyPressed==_KEY_CANCEL){
    b4c4:	97 ee       	ldi	r25, 0xE7	; 231
    b4c6:	f9 16       	cp	r15, r25
    b4c8:	09 f4       	brne	.+2      	; 0xb4cc <FMenuSettingClientIP+0x358>
    b4ca:	c2 c0       	rjmp	.+388    	; 0xb650 <FMenuSettingClientIP+0x4dc>
			       stClientIP=cipExit; 
			   }
			   else
			   if (keyPressed==_KEY_ENTER){
    b4cc:	a7 eb       	ldi	r26, 0xB7	; 183
    b4ce:	fa 16       	cp	r15, r26
    b4d0:	09 f0       	breq	.+2      	; 0xb4d4 <FMenuSettingClientIP+0x360>
    b4d2:	c7 c0       	rjmp	.+398    	; 0xb662 <FMenuSettingClientIP+0x4ee>
			       //NextInput
			       if (iBlok<4){
    b4d4:	40 91 33 02 	lds	r20, 0x0233
    b4d8:	50 91 34 02 	lds	r21, 0x0234
    b4dc:	44 30       	cpi	r20, 0x04	; 4
    b4de:	51 05       	cpc	r21, r1
    b4e0:	08 f0       	brcs	.+2      	; 0xb4e4 <FMenuSettingClientIP+0x370>
    b4e2:	a6 c0       	rjmp	.+332    	; 0xb630 <FMenuSettingClientIP+0x4bc>
				       if (iInput==1)IP_blok[iBlok]=((IPchar[0]-'0'));
    b4e4:	80 91 3b 02 	lds	r24, 0x023B
    b4e8:	81 30       	cpi	r24, 0x01	; 1
    b4ea:	41 f4       	brne	.+16     	; 0xb4fc <FMenuSettingClientIP+0x388>
    b4ec:	fa 01       	movw	r30, r20
    b4ee:	e9 5c       	subi	r30, 0xC9	; 201
    b4f0:	fd 4f       	sbci	r31, 0xFD	; 253
    b4f2:	80 91 40 02 	lds	r24, 0x0240
    b4f6:	80 53       	subi	r24, 0x30	; 48
    b4f8:	80 83       	st	Z, r24
    b4fa:	22 c0       	rjmp	.+68     	; 0xb540 <FMenuSettingClientIP+0x3cc>
					   if (iInput==2)IP_blok[iBlok]=((IPchar[0]-'0')*10)+(IPchar[1]-'0');
    b4fc:	82 30       	cpi	r24, 0x02	; 2
    b4fe:	49 f4       	brne	.+18     	; 0xb512 <FMenuSettingClientIP+0x39e>
    b500:	fa 01       	movw	r30, r20
    b502:	e9 5c       	subi	r30, 0xC9	; 201
    b504:	fd 4f       	sbci	r31, 0xFD	; 253
    b506:	20 91 41 02 	lds	r18, 0x0241
    b50a:	20 51       	subi	r18, 0x10	; 16
    b50c:	80 91 40 02 	lds	r24, 0x0240
    b510:	11 c0       	rjmp	.+34     	; 0xb534 <FMenuSettingClientIP+0x3c0>
					   if (iInput==3)IP_blok[iBlok]=((IPchar[0]-'0')*100)+((IPchar[1]-'0')*10)+((IPchar[2]-'0'));
    b512:	83 30       	cpi	r24, 0x03	; 3
    b514:	a9 f4       	brne	.+42     	; 0xb540 <FMenuSettingClientIP+0x3cc>
    b516:	fa 01       	movw	r30, r20
    b518:	e9 5c       	subi	r30, 0xC9	; 201
    b51a:	fd 4f       	sbci	r31, 0xFD	; 253
    b51c:	20 91 42 02 	lds	r18, 0x0242
    b520:	20 5d       	subi	r18, 0xD0	; 208
    b522:	80 91 40 02 	lds	r24, 0x0240
    b526:	34 e6       	ldi	r19, 0x64	; 100
    b528:	83 9f       	mul	r24, r19
    b52a:	c0 01       	movw	r24, r0
    b52c:	11 24       	eor	r1, r1
    b52e:	28 0f       	add	r18, r24
    b530:	80 91 41 02 	lds	r24, 0x0241
    b534:	3a e0       	ldi	r19, 0x0A	; 10
    b536:	83 9f       	mul	r24, r19
    b538:	c0 01       	movw	r24, r0
    b53a:	11 24       	eor	r1, r1
    b53c:	28 0f       	add	r18, r24
    b53e:	20 83       	st	Z, r18
				       
					   IPchar[0]='0';IPchar[1]='0';IPchar[2]='0';
    b540:	80 e3       	ldi	r24, 0x30	; 48
    b542:	80 93 40 02 	sts	0x0240, r24
    b546:	80 93 41 02 	sts	0x0241, r24
    b54a:	80 93 42 02 	sts	0x0242, r24
					   //Reposition Value
					   lcd_printf(y,((x+(iBlok*4))-3),PSTR("   "));
    b54e:	60 91 3d 02 	lds	r22, 0x023D
    b552:	63 50       	subi	r22, 0x03	; 3
    b554:	44 0f       	add	r20, r20
    b556:	55 1f       	adc	r21, r21
    b558:	44 0f       	add	r20, r20
    b55a:	55 1f       	adc	r21, r21
    b55c:	64 0f       	add	r22, r20
    b55e:	80 91 3c 02 	lds	r24, 0x023C
    b562:	40 eb       	ldi	r20, 0xB0	; 176
    b564:	54 e1       	ldi	r21, 0x14	; 20
    b566:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
					   sprintf_P(lcdteks,PSTR("%d"),IP_blok[iBlok]);
    b56a:	00 d0       	rcall	.+0      	; 0xb56c <FMenuSettingClientIP+0x3f8>
    b56c:	00 d0       	rcall	.+0      	; 0xb56e <FMenuSettingClientIP+0x3fa>
    b56e:	00 d0       	rcall	.+0      	; 0xb570 <FMenuSettingClientIP+0x3fc>
    b570:	ad b7       	in	r26, 0x3d	; 61
    b572:	be b7       	in	r27, 0x3e	; 62
    b574:	11 96       	adiw	r26, 0x01	; 1
    b576:	8e 01       	movw	r16, r28
    b578:	0f 5f       	subi	r16, 0xFF	; 255
    b57a:	1f 4f       	sbci	r17, 0xFF	; 255
    b57c:	ed b7       	in	r30, 0x3d	; 61
    b57e:	fe b7       	in	r31, 0x3e	; 62
    b580:	12 83       	std	Z+2, r17	; 0x02
    b582:	01 83       	std	Z+1, r16	; 0x01
    b584:	8d ea       	ldi	r24, 0xAD	; 173
    b586:	94 e1       	ldi	r25, 0x14	; 20
    b588:	13 96       	adiw	r26, 0x03	; 3
    b58a:	9c 93       	st	X, r25
    b58c:	8e 93       	st	-X, r24
    b58e:	12 97       	sbiw	r26, 0x02	; 2
    b590:	e0 91 33 02 	lds	r30, 0x0233
    b594:	f0 91 34 02 	lds	r31, 0x0234
    b598:	e9 5c       	subi	r30, 0xC9	; 201
    b59a:	fd 4f       	sbci	r31, 0xFD	; 253
    b59c:	80 81       	ld	r24, Z
    b59e:	14 96       	adiw	r26, 0x04	; 4
    b5a0:	8c 93       	st	X, r24
    b5a2:	14 97       	sbiw	r26, 0x04	; 4
    b5a4:	15 96       	adiw	r26, 0x05	; 5
    b5a6:	1c 92       	st	X, r1
    b5a8:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
                       lcd_print(y,1+((x+(iBlok*4))-strlen(lcdteks)),lcdteks);
    b5ac:	f8 01       	movw	r30, r16
    b5ae:	01 90       	ld	r0, Z+
    b5b0:	00 20       	and	r0, r0
    b5b2:	e9 f7       	brne	.-6      	; 0xb5ae <FMenuSettingClientIP+0x43a>
    b5b4:	31 97       	sbiw	r30, 0x01	; 1
    b5b6:	e0 1b       	sub	r30, r16
    b5b8:	f1 0b       	sbc	r31, r17
    b5ba:	8d b7       	in	r24, 0x3d	; 61
    b5bc:	9e b7       	in	r25, 0x3e	; 62
    b5be:	06 96       	adiw	r24, 0x06	; 6
    b5c0:	0f b6       	in	r0, 0x3f	; 63
    b5c2:	f8 94       	cli
    b5c4:	9e bf       	out	0x3e, r25	; 62
    b5c6:	0f be       	out	0x3f, r0	; 63
    b5c8:	8d bf       	out	0x3d, r24	; 61
    b5ca:	60 91 3d 02 	lds	r22, 0x023D
    b5ce:	6f 5f       	subi	r22, 0xFF	; 255
    b5d0:	80 91 33 02 	lds	r24, 0x0233
    b5d4:	90 91 34 02 	lds	r25, 0x0234
    b5d8:	88 0f       	add	r24, r24
    b5da:	99 1f       	adc	r25, r25
    b5dc:	88 0f       	add	r24, r24
    b5de:	99 1f       	adc	r25, r25
    b5e0:	68 0f       	add	r22, r24
    b5e2:	6e 1b       	sub	r22, r30
    b5e4:	80 91 3c 02 	lds	r24, 0x023C
    b5e8:	a8 01       	movw	r20, r16
    b5ea:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>

					   if (iBlok>0)lcd_printf(y,1+((x+((iBlok-1)*4))),PSTR("."));
    b5ee:	80 91 33 02 	lds	r24, 0x0233
    b5f2:	90 91 34 02 	lds	r25, 0x0234
    b5f6:	00 97       	sbiw	r24, 0x00	; 0
    b5f8:	81 f0       	breq	.+32     	; 0xb61a <FMenuSettingClientIP+0x4a6>
    b5fa:	60 91 3d 02 	lds	r22, 0x023D
    b5fe:	6f 5f       	subi	r22, 0xFF	; 255
    b600:	81 50       	subi	r24, 0x01	; 1
    b602:	90 4c       	sbci	r25, 0xC0	; 192
    b604:	88 0f       	add	r24, r24
    b606:	99 1f       	adc	r25, r25
    b608:	88 0f       	add	r24, r24
    b60a:	99 1f       	adc	r25, r25
    b60c:	68 0f       	add	r22, r24
    b60e:	80 91 3c 02 	lds	r24, 0x023C
    b612:	4b ea       	ldi	r20, 0xAB	; 171
    b614:	54 e1       	ldi	r21, 0x14	; 20
    b616:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
				       iInput=0;
    b61a:	10 92 3b 02 	sts	0x023B, r1
					   iBlok++;	   
    b61e:	80 91 33 02 	lds	r24, 0x0233
    b622:	90 91 34 02 	lds	r25, 0x0234
    b626:	01 96       	adiw	r24, 0x01	; 1
    b628:	90 93 34 02 	sts	0x0234, r25
    b62c:	80 93 33 02 	sts	0x0233, r24
				   }
				   if (iBlok>=4)stClientIP=cipStoreIPblok;
    b630:	80 91 33 02 	lds	r24, 0x0233
    b634:	90 91 34 02 	lds	r25, 0x0234
    b638:	04 97       	sbiw	r24, 0x04	; 4
    b63a:	98 f0       	brcs	.+38     	; 0xb662 <FMenuSettingClientIP+0x4ee>
    b63c:	84 e0       	ldi	r24, 0x04	; 4
    b63e:	09 c0       	rjmp	.+18     	; 0xb652 <FMenuSettingClientIP+0x4de>
			   }
		       break;
          case cipStoreIPblok://UpdateIPblok
			   eeprom_write_block((const void*) &IP_blok,(const void*) &DefClientIP,4);
    b640:	87 e3       	ldi	r24, 0x37	; 55
    b642:	92 e0       	ldi	r25, 0x02	; 2
    b644:	68 e2       	ldi	r22, 0x28	; 40
    b646:	70 e0       	ldi	r23, 0x00	; 0
    b648:	44 e0       	ldi	r20, 0x04	; 4
    b64a:	50 e0       	ldi	r21, 0x00	; 0
    b64c:	0e 94 d1 ac 	call	0x159a2	; 0x159a2 <__eewr_block_m128>
			   stClientIP=cipExit;
    b650:	83 e0       	ldi	r24, 0x03	; 3
    b652:	80 93 59 01 	sts	0x0159, r24
    b656:	05 c0       	rjmp	.+10     	; 0xb662 <FMenuSettingClientIP+0x4ee>
		       break; 
          case cipExit://Cancel IPConfig
		       stClientIP=cipInit;
    b658:	81 e0       	ldi	r24, 0x01	; 1
    b65a:	80 93 59 01 	sts	0x0159, r24
		       Result=MENU_DONE;
    b65e:	80 93 3e 02 	sts	0x023E, r24
		       break;     
		  }//EndSwitch	 
    return Result;
}
    b662:	80 91 3e 02 	lds	r24, 0x023E
    b666:	64 96       	adiw	r28, 0x14	; 20
    b668:	0f b6       	in	r0, 0x3f	; 63
    b66a:	f8 94       	cli
    b66c:	de bf       	out	0x3e, r29	; 62
    b66e:	0f be       	out	0x3f, r0	; 63
    b670:	cd bf       	out	0x3d, r28	; 61
    b672:	cf 91       	pop	r28
    b674:	df 91       	pop	r29
    b676:	1f 91       	pop	r17
    b678:	0f 91       	pop	r16
    b67a:	ff 90       	pop	r15
    b67c:	08 95       	ret

0000b67e <DisplayStandaloneSequence>:
	 i++;
     _delay_ms(6500);
  return Result;
}

void DisplayStandaloneSequence(char x,char y, char PoolingSequence){
    b67e:	df 93       	push	r29
    b680:	cf 93       	push	r28
    b682:	cd b7       	in	r28, 0x3d	; 61
    b684:	de b7       	in	r29, 0x3e	; 62
    b686:	28 97       	sbiw	r28, 0x08	; 8
    b688:	0f b6       	in	r0, 0x3f	; 63
    b68a:	f8 94       	cli
    b68c:	de bf       	out	0x3e, r29	; 62
    b68e:	0f be       	out	0x3f, r0	; 63
    b690:	cd bf       	out	0x3d, r28	; 61
    b692:	58 2f       	mov	r21, r24
	 MapSequence[3]='/';
	 MapSequence[4]='-';
	 MapSequence[5]=164;//0x5C;
	 MapSequence[6]='|';
	 MapSequence[7]='/';
	 if (IsPoolingRestarted==False)lcd_put(x,y,MapSequence[(PoolingSequence%8)]);     
    b694:	80 91 83 01 	lds	r24, 0x0183
    b698:	88 23       	and	r24, r24
    b69a:	a1 f4       	brne	.+40     	; 0xb6c4 <DisplayStandaloneSequence+0x46>

void DisplayStandaloneSequence(char x,char y, char PoolingSequence){
     char MapSequence[8];

     //sprintf_P(MapSequence,PSTR("-\|/-|/"));
	 MapSequence[0]='-';
    b69c:	3d e2       	ldi	r19, 0x2D	; 45
    b69e:	39 83       	std	Y+1, r19	; 0x01
	 MapSequence[1]='`';//0x5C;
    b6a0:	80 e6       	ldi	r24, 0x60	; 96
    b6a2:	8a 83       	std	Y+2, r24	; 0x02
	 MapSequence[2]='|';
    b6a4:	2c e7       	ldi	r18, 0x7C	; 124
    b6a6:	2b 83       	std	Y+3, r18	; 0x03
	 MapSequence[3]='/';
    b6a8:	9f e2       	ldi	r25, 0x2F	; 47
    b6aa:	9c 83       	std	Y+4, r25	; 0x04
	 MapSequence[4]='-';
    b6ac:	3d 83       	std	Y+5, r19	; 0x05
	 MapSequence[5]=164;//0x5C;
    b6ae:	84 ea       	ldi	r24, 0xA4	; 164
    b6b0:	8e 83       	std	Y+6, r24	; 0x06
	 MapSequence[6]='|';
    b6b2:	2f 83       	std	Y+7, r18	; 0x07
	 MapSequence[7]='/';
    b6b4:	98 87       	std	Y+8, r25	; 0x08
	 if (IsPoolingRestarted==False)lcd_put(x,y,MapSequence[(PoolingSequence%8)]);     
    b6b6:	47 70       	andi	r20, 0x07	; 7
    b6b8:	fe 01       	movw	r30, r28
    b6ba:	e4 0f       	add	r30, r20
    b6bc:	f1 1d       	adc	r31, r1
    b6be:	85 2f       	mov	r24, r21
    b6c0:	41 81       	ldd	r20, Z+1	; 0x01
    b6c2:	08 c0       	rjmp	.+16     	; 0xb6d4 <DisplayStandaloneSequence+0x56>
	 else if (IsPoolingRestarted==True){
    b6c4:	80 91 83 01 	lds	r24, 0x0183
    b6c8:	81 30       	cpi	r24, 0x01	; 1
    b6ca:	31 f4       	brne	.+12     	; 0xb6d8 <DisplayStandaloneSequence+0x5a>
	          IsPoolingRestarted=False;
    b6cc:	10 92 83 01 	sts	0x0183, r1
	          lcd_put(x,y,'X');     
    b6d0:	85 2f       	mov	r24, r21
    b6d2:	48 e5       	ldi	r20, 0x58	; 88
    b6d4:	0e 94 ca a4 	call	0x14994	; 0x14994 <lcd_put>
			  }

}
    b6d8:	28 96       	adiw	r28, 0x08	; 8
    b6da:	0f b6       	in	r0, 0x3f	; 63
    b6dc:	f8 94       	cli
    b6de:	de bf       	out	0x3e, r29	; 62
    b6e0:	0f be       	out	0x3f, r0	; 63
    b6e2:	cd bf       	out	0x3d, r28	; 61
    b6e4:	cf 91       	pop	r28
    b6e6:	df 91       	pop	r29
    b6e8:	08 95       	ret

0000b6ea <FSettingPumpPooling>:
	      break;
	 }
     return Result;
}

char FSettingPumpPooling(){//Parameter: PumpCount,
    b6ea:	ef 92       	push	r14
    b6ec:	ff 92       	push	r15
    b6ee:	0f 93       	push	r16
    b6f0:	1f 93       	push	r17
    b6f2:	df 93       	push	r29
    b6f4:	cf 93       	push	r28
    b6f6:	cd b7       	in	r28, 0x3d	; 61
    b6f8:	de b7       	in	r29, 0x3e	; 62
    b6fa:	6a 97       	sbiw	r28, 0x1a	; 26
    b6fc:	0f b6       	in	r0, 0x3f	; 63
    b6fe:	f8 94       	cli
    b700:	de bf       	out	0x3e, r29	; 62
    b702:	0f be       	out	0x3f, r0	; 63
    b704:	cd bf       	out	0x3d, r28	; 61
static char stPumpPooling=ppInitMenu;
	   char i,lcdteks[20];
	   char KeyChar,Addr=0,PPoolingSetting[6];
     
	 Result=MENU_NONE;
     switch(stPumpPooling){
    b706:	80 91 1b 02 	lds	r24, 0x021B
    b70a:	82 30       	cpi	r24, 0x02	; 2
    b70c:	09 f4       	brne	.+2      	; 0xb710 <FSettingPumpPooling+0x26>
    b70e:	18 c1       	rjmp	.+560    	; 0xb940 <FSettingPumpPooling+0x256>
    b710:	83 30       	cpi	r24, 0x03	; 3
    b712:	30 f4       	brcc	.+12     	; 0xb720 <FSettingPumpPooling+0x36>
    b714:	88 23       	and	r24, r24
    b716:	59 f0       	breq	.+22     	; 0xb72e <FSettingPumpPooling+0x44>
    b718:	81 30       	cpi	r24, 0x01	; 1
    b71a:	09 f0       	breq	.+2      	; 0xb71e <FSettingPumpPooling+0x34>
    b71c:	ed c1       	rjmp	.+986    	; 0xbaf8 <FSettingPumpPooling+0x40e>
    b71e:	06 c1       	rjmp	.+524    	; 0xb92c <FSettingPumpPooling+0x242>
    b720:	83 30       	cpi	r24, 0x03	; 3
    b722:	09 f4       	brne	.+2      	; 0xb726 <FSettingPumpPooling+0x3c>
    b724:	da c1       	rjmp	.+948    	; 0xbada <FSettingPumpPooling+0x3f0>
    b726:	84 30       	cpi	r24, 0x04	; 4
    b728:	09 f0       	breq	.+2      	; 0xb72c <FSettingPumpPooling+0x42>
    b72a:	e6 c1       	rjmp	.+972    	; 0xbaf8 <FSettingPumpPooling+0x40e>
    b72c:	e1 c1       	rjmp	.+962    	; 0xbaf0 <FSettingPumpPooling+0x406>
	 case ppInitMenu:
          lcd_clear();
    b72e:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
    b732:	00 e0       	ldi	r16, 0x00	; 0
    b734:	10 e0       	ldi	r17, 0x00	; 0
		  for (i=0;i<6;i++){
		      PPoolingSetting[i]=eeprom_read_byte(&DefPoolingPumpMax+i);
    b736:	7e 01       	movw	r14, r28
    b738:	08 94       	sec
    b73a:	e1 1c       	adc	r14, r1
    b73c:	f1 1c       	adc	r15, r1
    b73e:	c8 01       	movw	r24, r16
    b740:	8c 5b       	subi	r24, 0xBC	; 188
    b742:	9e 4f       	sbci	r25, 0xFE	; 254
    b744:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
    b748:	f7 01       	movw	r30, r14
    b74a:	e0 0f       	add	r30, r16
    b74c:	f1 1f       	adc	r31, r17
    b74e:	80 83       	st	Z, r24
    b750:	0f 5f       	subi	r16, 0xFF	; 255
    b752:	1f 4f       	sbci	r17, 0xFF	; 255
     
	 Result=MENU_NONE;
     switch(stPumpPooling){
	 case ppInitMenu:
          lcd_clear();
		  for (i=0;i<6;i++){
    b754:	06 30       	cpi	r16, 0x06	; 6
    b756:	11 05       	cpc	r17, r1
    b758:	91 f7       	brne	.-28     	; 0xb73e <FSettingPumpPooling+0x54>
		      PPoolingSetting[i]=eeprom_read_byte(&DefPoolingPumpMax+i);
		  }

		  sprintf_P(lcdteks,PSTR("1.MaxPump:%d"),PPoolingSetting[0]);lcd_print(1,1,lcdteks);
    b75a:	00 d0       	rcall	.+0      	; 0xb75c <FSettingPumpPooling+0x72>
    b75c:	00 d0       	rcall	.+0      	; 0xb75e <FSettingPumpPooling+0x74>
    b75e:	00 d0       	rcall	.+0      	; 0xb760 <FSettingPumpPooling+0x76>
    b760:	ed b7       	in	r30, 0x3d	; 61
    b762:	fe b7       	in	r31, 0x3e	; 62
    b764:	31 96       	adiw	r30, 0x01	; 1
    b766:	8e 01       	movw	r16, r28
    b768:	09 5f       	subi	r16, 0xF9	; 249
    b76a:	1f 4f       	sbci	r17, 0xFF	; 255
    b76c:	ad b7       	in	r26, 0x3d	; 61
    b76e:	be b7       	in	r27, 0x3e	; 62
    b770:	12 96       	adiw	r26, 0x02	; 2
    b772:	1c 93       	st	X, r17
    b774:	0e 93       	st	-X, r16
    b776:	11 97       	sbiw	r26, 0x01	; 1
    b778:	8f e2       	ldi	r24, 0x2F	; 47
    b77a:	9f e0       	ldi	r25, 0x0F	; 15
    b77c:	93 83       	std	Z+3, r25	; 0x03
    b77e:	82 83       	std	Z+2, r24	; 0x02
    b780:	89 81       	ldd	r24, Y+1	; 0x01
    b782:	84 83       	std	Z+4, r24	; 0x04
    b784:	15 82       	std	Z+5, r1	; 0x05
    b786:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
    b78a:	ed b7       	in	r30, 0x3d	; 61
    b78c:	fe b7       	in	r31, 0x3e	; 62
    b78e:	36 96       	adiw	r30, 0x06	; 6
    b790:	0f b6       	in	r0, 0x3f	; 63
    b792:	f8 94       	cli
    b794:	fe bf       	out	0x3e, r31	; 62
    b796:	0f be       	out	0x3f, r0	; 63
    b798:	ed bf       	out	0x3d, r30	; 61
    b79a:	81 e0       	ldi	r24, 0x01	; 1
    b79c:	61 e0       	ldi	r22, 0x01	; 1
    b79e:	a8 01       	movw	r20, r16
    b7a0:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
          sprintf_P(lcdteks,PSTR("2.nNoPump:%d"),PPoolingSetting[1]);lcd_print(2,1,lcdteks);
    b7a4:	00 d0       	rcall	.+0      	; 0xb7a6 <FSettingPumpPooling+0xbc>
    b7a6:	00 d0       	rcall	.+0      	; 0xb7a8 <FSettingPumpPooling+0xbe>
    b7a8:	00 d0       	rcall	.+0      	; 0xb7aa <FSettingPumpPooling+0xc0>
    b7aa:	ed b7       	in	r30, 0x3d	; 61
    b7ac:	fe b7       	in	r31, 0x3e	; 62
    b7ae:	31 96       	adiw	r30, 0x01	; 1
    b7b0:	ad b7       	in	r26, 0x3d	; 61
    b7b2:	be b7       	in	r27, 0x3e	; 62
    b7b4:	12 96       	adiw	r26, 0x02	; 2
    b7b6:	1c 93       	st	X, r17
    b7b8:	0e 93       	st	-X, r16
    b7ba:	11 97       	sbiw	r26, 0x01	; 1
    b7bc:	82 e2       	ldi	r24, 0x22	; 34
    b7be:	9f e0       	ldi	r25, 0x0F	; 15
    b7c0:	93 83       	std	Z+3, r25	; 0x03
    b7c2:	82 83       	std	Z+2, r24	; 0x02
    b7c4:	8a 81       	ldd	r24, Y+2	; 0x02
    b7c6:	84 83       	std	Z+4, r24	; 0x04
    b7c8:	15 82       	std	Z+5, r1	; 0x05
    b7ca:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
    b7ce:	ed b7       	in	r30, 0x3d	; 61
    b7d0:	fe b7       	in	r31, 0x3e	; 62
    b7d2:	36 96       	adiw	r30, 0x06	; 6
    b7d4:	0f b6       	in	r0, 0x3f	; 63
    b7d6:	f8 94       	cli
    b7d8:	fe bf       	out	0x3e, r31	; 62
    b7da:	0f be       	out	0x3f, r0	; 63
    b7dc:	ed bf       	out	0x3d, r30	; 61
    b7de:	82 e0       	ldi	r24, 0x02	; 2
    b7e0:	61 e0       	ldi	r22, 0x01	; 1
    b7e2:	a8 01       	movw	r20, r16
    b7e4:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
          sprintf_P(lcdteks,PSTR("3.TrySend:%d"),PPoolingSetting[2]);lcd_print(3,1,lcdteks);
    b7e8:	00 d0       	rcall	.+0      	; 0xb7ea <FSettingPumpPooling+0x100>
    b7ea:	00 d0       	rcall	.+0      	; 0xb7ec <FSettingPumpPooling+0x102>
    b7ec:	00 d0       	rcall	.+0      	; 0xb7ee <FSettingPumpPooling+0x104>
    b7ee:	ed b7       	in	r30, 0x3d	; 61
    b7f0:	fe b7       	in	r31, 0x3e	; 62
    b7f2:	31 96       	adiw	r30, 0x01	; 1
    b7f4:	ad b7       	in	r26, 0x3d	; 61
    b7f6:	be b7       	in	r27, 0x3e	; 62
    b7f8:	12 96       	adiw	r26, 0x02	; 2
    b7fa:	1c 93       	st	X, r17
    b7fc:	0e 93       	st	-X, r16
    b7fe:	11 97       	sbiw	r26, 0x01	; 1
    b800:	85 e1       	ldi	r24, 0x15	; 21
    b802:	9f e0       	ldi	r25, 0x0F	; 15
    b804:	93 83       	std	Z+3, r25	; 0x03
    b806:	82 83       	std	Z+2, r24	; 0x02
    b808:	8b 81       	ldd	r24, Y+3	; 0x03
    b80a:	84 83       	std	Z+4, r24	; 0x04
    b80c:	15 82       	std	Z+5, r1	; 0x05
    b80e:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
    b812:	ed b7       	in	r30, 0x3d	; 61
    b814:	fe b7       	in	r31, 0x3e	; 62
    b816:	36 96       	adiw	r30, 0x06	; 6
    b818:	0f b6       	in	r0, 0x3f	; 63
    b81a:	f8 94       	cli
    b81c:	fe bf       	out	0x3e, r31	; 62
    b81e:	0f be       	out	0x3f, r0	; 63
    b820:	ed bf       	out	0x3d, r30	; 61
    b822:	83 e0       	ldi	r24, 0x03	; 3
    b824:	61 e0       	ldi	r22, 0x01	; 1
    b826:	a8 01       	movw	r20, r16
    b828:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
          sprintf_P(lcdteks,PSTR("4.TimPool:%d"),PPoolingSetting[3]);lcd_print(4,1,lcdteks);
    b82c:	00 d0       	rcall	.+0      	; 0xb82e <FSettingPumpPooling+0x144>
    b82e:	00 d0       	rcall	.+0      	; 0xb830 <FSettingPumpPooling+0x146>
    b830:	00 d0       	rcall	.+0      	; 0xb832 <FSettingPumpPooling+0x148>
    b832:	ed b7       	in	r30, 0x3d	; 61
    b834:	fe b7       	in	r31, 0x3e	; 62
    b836:	31 96       	adiw	r30, 0x01	; 1
    b838:	ad b7       	in	r26, 0x3d	; 61
    b83a:	be b7       	in	r27, 0x3e	; 62
    b83c:	12 96       	adiw	r26, 0x02	; 2
    b83e:	1c 93       	st	X, r17
    b840:	0e 93       	st	-X, r16
    b842:	11 97       	sbiw	r26, 0x01	; 1
    b844:	88 e0       	ldi	r24, 0x08	; 8
    b846:	9f e0       	ldi	r25, 0x0F	; 15
    b848:	93 83       	std	Z+3, r25	; 0x03
    b84a:	82 83       	std	Z+2, r24	; 0x02
    b84c:	8c 81       	ldd	r24, Y+4	; 0x04
    b84e:	84 83       	std	Z+4, r24	; 0x04
    b850:	15 82       	std	Z+5, r1	; 0x05
    b852:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
    b856:	ed b7       	in	r30, 0x3d	; 61
    b858:	fe b7       	in	r31, 0x3e	; 62
    b85a:	36 96       	adiw	r30, 0x06	; 6
    b85c:	0f b6       	in	r0, 0x3f	; 63
    b85e:	f8 94       	cli
    b860:	fe bf       	out	0x3e, r31	; 62
    b862:	0f be       	out	0x3f, r0	; 63
    b864:	ed bf       	out	0x3d, r30	; 61
    b866:	84 e0       	ldi	r24, 0x04	; 4
    b868:	61 e0       	ldi	r22, 0x01	; 1
    b86a:	a8 01       	movw	r20, r16
    b86c:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
          sprintf_P(lcdteks,PSTR("5.Dly:%d"),PPoolingSetting[4]);lcd_print(1,13,lcdteks);
    b870:	00 d0       	rcall	.+0      	; 0xb872 <FSettingPumpPooling+0x188>
    b872:	00 d0       	rcall	.+0      	; 0xb874 <FSettingPumpPooling+0x18a>
    b874:	00 d0       	rcall	.+0      	; 0xb876 <FSettingPumpPooling+0x18c>
    b876:	ed b7       	in	r30, 0x3d	; 61
    b878:	fe b7       	in	r31, 0x3e	; 62
    b87a:	31 96       	adiw	r30, 0x01	; 1
    b87c:	ad b7       	in	r26, 0x3d	; 61
    b87e:	be b7       	in	r27, 0x3e	; 62
    b880:	12 96       	adiw	r26, 0x02	; 2
    b882:	1c 93       	st	X, r17
    b884:	0e 93       	st	-X, r16
    b886:	11 97       	sbiw	r26, 0x01	; 1
    b888:	8f ef       	ldi	r24, 0xFF	; 255
    b88a:	9e e0       	ldi	r25, 0x0E	; 14
    b88c:	93 83       	std	Z+3, r25	; 0x03
    b88e:	82 83       	std	Z+2, r24	; 0x02
    b890:	8d 81       	ldd	r24, Y+5	; 0x05
    b892:	84 83       	std	Z+4, r24	; 0x04
    b894:	15 82       	std	Z+5, r1	; 0x05
    b896:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
    b89a:	ed b7       	in	r30, 0x3d	; 61
    b89c:	fe b7       	in	r31, 0x3e	; 62
    b89e:	36 96       	adiw	r30, 0x06	; 6
    b8a0:	0f b6       	in	r0, 0x3f	; 63
    b8a2:	f8 94       	cli
    b8a4:	fe bf       	out	0x3e, r31	; 62
    b8a6:	0f be       	out	0x3f, r0	; 63
    b8a8:	ed bf       	out	0x3d, r30	; 61
    b8aa:	81 e0       	ldi	r24, 0x01	; 1
    b8ac:	6d e0       	ldi	r22, 0x0D	; 13
    b8ae:	a8 01       	movw	r20, r16
    b8b0:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
          sprintf_P(lcdteks,PSTR("6.Act:%d"),PPoolingSetting[5]);lcd_print(2,13,lcdteks);
    b8b4:	00 d0       	rcall	.+0      	; 0xb8b6 <FSettingPumpPooling+0x1cc>
    b8b6:	00 d0       	rcall	.+0      	; 0xb8b8 <FSettingPumpPooling+0x1ce>
    b8b8:	00 d0       	rcall	.+0      	; 0xb8ba <FSettingPumpPooling+0x1d0>
    b8ba:	ed b7       	in	r30, 0x3d	; 61
    b8bc:	fe b7       	in	r31, 0x3e	; 62
    b8be:	31 96       	adiw	r30, 0x01	; 1
    b8c0:	ad b7       	in	r26, 0x3d	; 61
    b8c2:	be b7       	in	r27, 0x3e	; 62
    b8c4:	12 96       	adiw	r26, 0x02	; 2
    b8c6:	1c 93       	st	X, r17
    b8c8:	0e 93       	st	-X, r16
    b8ca:	11 97       	sbiw	r26, 0x01	; 1
    b8cc:	86 ef       	ldi	r24, 0xF6	; 246
    b8ce:	9e e0       	ldi	r25, 0x0E	; 14
    b8d0:	93 83       	std	Z+3, r25	; 0x03
    b8d2:	82 83       	std	Z+2, r24	; 0x02
    b8d4:	8e 81       	ldd	r24, Y+6	; 0x06
    b8d6:	84 83       	std	Z+4, r24	; 0x04
    b8d8:	15 82       	std	Z+5, r1	; 0x05
    b8da:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
    b8de:	ed b7       	in	r30, 0x3d	; 61
    b8e0:	fe b7       	in	r31, 0x3e	; 62
    b8e2:	36 96       	adiw	r30, 0x06	; 6
    b8e4:	0f b6       	in	r0, 0x3f	; 63
    b8e6:	f8 94       	cli
    b8e8:	fe bf       	out	0x3e, r31	; 62
    b8ea:	0f be       	out	0x3f, r0	; 63
    b8ec:	ed bf       	out	0x3d, r30	; 61
    b8ee:	82 e0       	ldi	r24, 0x02	; 2
    b8f0:	6d e0       	ldi	r22, 0x0D	; 13
    b8f2:	a8 01       	movw	r20, r16
    b8f4:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
          sprintf_P(lcdteks,PSTR("[*]Exit"));lcd_print(4,13,lcdteks);
    b8f8:	00 d0       	rcall	.+0      	; 0xb8fa <FSettingPumpPooling+0x210>
    b8fa:	00 d0       	rcall	.+0      	; 0xb8fc <FSettingPumpPooling+0x212>
    b8fc:	ad b7       	in	r26, 0x3d	; 61
    b8fe:	be b7       	in	r27, 0x3e	; 62
    b900:	12 96       	adiw	r26, 0x02	; 2
    b902:	1c 93       	st	X, r17
    b904:	0e 93       	st	-X, r16
    b906:	11 97       	sbiw	r26, 0x01	; 1
    b908:	8e ee       	ldi	r24, 0xEE	; 238
    b90a:	9e e0       	ldi	r25, 0x0E	; 14
    b90c:	14 96       	adiw	r26, 0x04	; 4
    b90e:	9c 93       	st	X, r25
    b910:	8e 93       	st	-X, r24
    b912:	13 97       	sbiw	r26, 0x03	; 3
    b914:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
    b918:	0f 90       	pop	r0
    b91a:	0f 90       	pop	r0
    b91c:	0f 90       	pop	r0
    b91e:	0f 90       	pop	r0
    b920:	84 e0       	ldi	r24, 0x04	; 4
    b922:	6d e0       	ldi	r22, 0x0D	; 13
    b924:	a8 01       	movw	r20, r16
    b926:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
    b92a:	08 c0       	rjmp	.+16     	; 0xb93c <FSettingPumpPooling+0x252>

          stPumpPooling=ppPoolingSettingInput;
	      break;
     case ppDisplaySequence:
          IsNewPoolingSequence=False;
    b92c:	10 92 81 01 	sts	0x0181, r1
		  DisplayStandaloneSequence(3,14,iSequencePooling);
    b930:	83 e0       	ldi	r24, 0x03	; 3
    b932:	6e e0       	ldi	r22, 0x0E	; 14
    b934:	40 91 80 01 	lds	r20, 0x0180
    b938:	0e 94 3f 5b 	call	0xb67e	; 0xb67e <DisplayStandaloneSequence>
          stPumpPooling=ppPoolingSettingInput;
    b93c:	82 e0       	ldi	r24, 0x02	; 2
    b93e:	ca c0       	rjmp	.+404    	; 0xbad4 <FSettingPumpPooling+0x3ea>
	      break;
     case ppPoolingSettingInput:
	      if(IsNewPoolingSequence==True)stPumpPooling=ppDisplaySequence;
    b940:	80 91 81 01 	lds	r24, 0x0181
    b944:	81 30       	cpi	r24, 0x01	; 1
    b946:	11 f4       	brne	.+4      	; 0xb94c <FSettingPumpPooling+0x262>
    b948:	80 93 1b 02 	sts	0x021B, r24

          KeyChar=_key_btn(_key_scan(1));
    b94c:	81 e0       	ldi	r24, 0x01	; 1
    b94e:	0e 94 f6 a5 	call	0x14bec	; 0x14bec <_key_scan>
    b952:	0e 94 57 a5 	call	0x14aae	; 0x14aae <_key_btn>
		  if ((KeyChar>='1')&&(KeyChar<='6')){
    b956:	08 2f       	mov	r16, r24
    b958:	01 53       	subi	r16, 0x31	; 49
    b95a:	06 30       	cpi	r16, 0x06	; 6
    b95c:	10 f0       	brcs	.+4      	; 0xb962 <FSettingPumpPooling+0x278>
    b95e:	00 e0       	ldi	r16, 0x00	; 0
    b960:	04 c0       	rjmp	.+8      	; 0xb96a <FSettingPumpPooling+0x280>
		      Addr=KeyChar-'1';
			  TimSend=0;
    b962:	10 92 78 0c 	sts	0x0C78, r1
			  IsStandaloneAcknoledge=False;
    b966:	10 92 82 01 	sts	0x0182, r1
          }
		  switch(KeyChar){
    b96a:	83 33       	cpi	r24, 0x33	; 51
    b96c:	09 f4       	brne	.+2      	; 0xb970 <FSettingPumpPooling+0x286>
    b96e:	58 c0       	rjmp	.+176    	; 0xba20 <FSettingPumpPooling+0x336>
    b970:	84 33       	cpi	r24, 0x34	; 52
    b972:	40 f4       	brcc	.+16     	; 0xb984 <FSettingPumpPooling+0x29a>
    b974:	81 33       	cpi	r24, 0x31	; 49
    b976:	81 f0       	breq	.+32     	; 0xb998 <FSettingPumpPooling+0x2ae>
    b978:	82 33       	cpi	r24, 0x32	; 50
    b97a:	b0 f5       	brcc	.+108    	; 0xb9e8 <FSettingPumpPooling+0x2fe>
    b97c:	8a 32       	cpi	r24, 0x2A	; 42
    b97e:	09 f0       	breq	.+2      	; 0xb982 <FSettingPumpPooling+0x298>
    b980:	bb c0       	rjmp	.+374    	; 0xbaf8 <FSettingPumpPooling+0x40e>
    b982:	a7 c0       	rjmp	.+334    	; 0xbad2 <FSettingPumpPooling+0x3e8>
    b984:	85 33       	cpi	r24, 0x35	; 53
    b986:	09 f4       	brne	.+2      	; 0xb98a <FSettingPumpPooling+0x2a0>
    b988:	7c c0       	rjmp	.+248    	; 0xba82 <FSettingPumpPooling+0x398>
    b98a:	85 33       	cpi	r24, 0x35	; 53
    b98c:	08 f4       	brcc	.+2      	; 0xb990 <FSettingPumpPooling+0x2a6>
    b98e:	6a c0       	rjmp	.+212    	; 0xba64 <FSettingPumpPooling+0x37a>
    b990:	86 33       	cpi	r24, 0x36	; 54
    b992:	09 f0       	breq	.+2      	; 0xb996 <FSettingPumpPooling+0x2ac>
    b994:	b1 c0       	rjmp	.+354    	; 0xbaf8 <FSettingPumpPooling+0x40e>
    b996:	84 c0       	rjmp	.+264    	; 0xbaa0 <FSettingPumpPooling+0x3b6>
		  case '1'://MaxPump
		       PPoolingSetting[Addr]=((PPoolingSetting[Addr]+1)%17);
    b998:	20 2f       	mov	r18, r16
    b99a:	30 e0       	ldi	r19, 0x00	; 0
    b99c:	fe 01       	movw	r30, r28
    b99e:	31 96       	adiw	r30, 0x01	; 1
    b9a0:	e2 0f       	add	r30, r18
    b9a2:	f3 1f       	adc	r31, r19
    b9a4:	80 81       	ld	r24, Z
    b9a6:	90 e0       	ldi	r25, 0x00	; 0
    b9a8:	01 96       	adiw	r24, 0x01	; 1
    b9aa:	61 e1       	ldi	r22, 0x11	; 17
    b9ac:	70 e0       	ldi	r23, 0x00	; 0
    b9ae:	0e 94 17 aa 	call	0x1542e	; 0x1542e <__divmodhi4>
    b9b2:	80 83       	st	Z, r24
			   if (PPoolingSetting[Addr]==0)PPoolingSetting[Addr]=1;
    b9b4:	88 23       	and	r24, r24
    b9b6:	11 f4       	brne	.+4      	; 0xb9bc <FSettingPumpPooling+0x2d2>
    b9b8:	81 e0       	ldi	r24, 0x01	; 1
    b9ba:	80 83       	st	Z, r24
			   //SendSlaveCommand(SC_SET_POOLING_MAX_PUMP,PPoolingSetting[Addr]);
			   SendPoolingCommand(SC_SET_POOLING_MAX_PUMP,PPoolingSetting[Addr]);
    b9bc:	2c 0f       	add	r18, r28
    b9be:	3d 1f       	adc	r19, r29
    b9c0:	f9 01       	movw	r30, r18
    b9c2:	11 81       	ldd	r17, Z+1	; 0x01
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
    b9c4:	85 e1       	ldi	r24, 0x15	; 21
    b9c6:	80 93 a7 05 	sts	0x05A7, r24
	 PoolMsg=plMsg;
    b9ca:	10 93 d3 0b 	sts	0x0BD3, r17
     IsControlPooling=True;
    b9ce:	81 e0       	ldi	r24, 0x01	; 1
    b9d0:	80 93 84 01 	sts	0x0184, r24
		       PPoolingSetting[Addr]=((PPoolingSetting[Addr]+1)%17);
			   if (PPoolingSetting[Addr]==0)PPoolingSetting[Addr]=1;
			   //SendSlaveCommand(SC_SET_POOLING_MAX_PUMP,PPoolingSetting[Addr]);
			   SendPoolingCommand(SC_SET_POOLING_MAX_PUMP,PPoolingSetting[Addr]);

			   eeprom_write_byte(&DefPoolingPumpMax+Addr,PPoolingSetting[Addr]);
    b9d4:	80 2f       	mov	r24, r16
    b9d6:	90 e0       	ldi	r25, 0x00	; 0
    b9d8:	8c 5b       	subi	r24, 0xBC	; 188
    b9da:	9e 4f       	sbci	r25, 0xFE	; 254
    b9dc:	61 2f       	mov	r22, r17
    b9de:	0e 94 db ac 	call	0x159b6	; 0x159b6 <__eewr_byte_m128>
			   PumpCountMax=PPoolingSetting[Addr];
    b9e2:	10 93 5c 01 	sts	0x015C, r17
    b9e6:	1a c0       	rjmp	.+52     	; 0xba1c <FSettingPumpPooling+0x332>
			   //stPumpPooling=ppInitMenu;
			   stPumpPooling=ppWaitPoolingRespond;
		       break;
		  case '2'://NoPump
		       PPoolingSetting[Addr]=((PPoolingSetting[Addr]+1)%21);
    b9e8:	20 2f       	mov	r18, r16
    b9ea:	30 e0       	ldi	r19, 0x00	; 0
    b9ec:	fe 01       	movw	r30, r28
    b9ee:	e2 0f       	add	r30, r18
    b9f0:	f3 1f       	adc	r31, r19
    b9f2:	81 81       	ldd	r24, Z+1	; 0x01
    b9f4:	90 e0       	ldi	r25, 0x00	; 0
    b9f6:	01 96       	adiw	r24, 0x01	; 1
    b9f8:	65 e1       	ldi	r22, 0x15	; 21
    b9fa:	70 e0       	ldi	r23, 0x00	; 0
    b9fc:	0e 94 17 aa 	call	0x1542e	; 0x1542e <__divmodhi4>
    ba00:	68 2f       	mov	r22, r24
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
    ba02:	84 e1       	ldi	r24, 0x14	; 20
    ba04:	80 93 a7 05 	sts	0x05A7, r24
	 PoolMsg=plMsg;
    ba08:	60 93 d3 0b 	sts	0x0BD3, r22
     IsControlPooling=True;
    ba0c:	81 e0       	ldi	r24, 0x01	; 1
    ba0e:	80 93 84 01 	sts	0x0184, r24
		  case '2'://NoPump
		       PPoolingSetting[Addr]=((PPoolingSetting[Addr]+1)%21);
			   //SendSlaveCommand(SC_SET_POOLING_NO_PUMP_COUNT,PPoolingSetting[Addr]);
			   SendPoolingCommand(SC_SET_POOLING_NO_PUMP_COUNT,PPoolingSetting[Addr]);

			   eeprom_write_byte(&DefPoolingPumpMax+Addr,PPoolingSetting[Addr]);
    ba12:	c9 01       	movw	r24, r18
    ba14:	8c 5b       	subi	r24, 0xBC	; 188
    ba16:	9e 4f       	sbci	r25, 0xFE	; 254
    ba18:	0e 94 db ac 	call	0x159b6	; 0x159b6 <__eewr_byte_m128>
			   //stPumpPooling=ppInitMenu;
			   stPumpPooling=ppWaitPoolingRespond;
    ba1c:	83 e0       	ldi	r24, 0x03	; 3
    ba1e:	5a c0       	rjmp	.+180    	; 0xbad4 <FSettingPumpPooling+0x3ea>
		       break;
		  case '3'://TrySend
		       PPoolingSetting[Addr]=((PPoolingSetting[Addr]+1)%21);
    ba20:	20 2f       	mov	r18, r16
    ba22:	30 e0       	ldi	r19, 0x00	; 0
    ba24:	fe 01       	movw	r30, r28
    ba26:	31 96       	adiw	r30, 0x01	; 1
    ba28:	e2 0f       	add	r30, r18
    ba2a:	f3 1f       	adc	r31, r19
    ba2c:	80 81       	ld	r24, Z
    ba2e:	90 e0       	ldi	r25, 0x00	; 0
    ba30:	01 96       	adiw	r24, 0x01	; 1
    ba32:	65 e1       	ldi	r22, 0x15	; 21
    ba34:	70 e0       	ldi	r23, 0x00	; 0
    ba36:	0e 94 17 aa 	call	0x1542e	; 0x1542e <__divmodhi4>
    ba3a:	80 83       	st	Z, r24
			   if (PPoolingSetting[Addr]==0)PPoolingSetting[Addr]=1;
    ba3c:	88 23       	and	r24, r24
    ba3e:	11 f4       	brne	.+4      	; 0xba44 <FSettingPumpPooling+0x35a>
    ba40:	81 e0       	ldi	r24, 0x01	; 1
    ba42:	80 83       	st	Z, r24
			   //SendSlaveCommand(SC_SET_POOLING_SEND,PPoolingSetting[Addr]);
			   SendPoolingCommand(SC_SET_POOLING_SEND,PPoolingSetting[Addr]);
    ba44:	2c 0f       	add	r18, r28
    ba46:	3d 1f       	adc	r19, r29
    ba48:	d9 01       	movw	r26, r18
    ba4a:	11 96       	adiw	r26, 0x01	; 1
    ba4c:	6c 91       	ld	r22, X
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
    ba4e:	86 e1       	ldi	r24, 0x16	; 22
    ba50:	80 93 a7 05 	sts	0x05A7, r24
	 PoolMsg=plMsg;
    ba54:	60 93 d3 0b 	sts	0x0BD3, r22
     IsControlPooling=True;
    ba58:	81 e0       	ldi	r24, 0x01	; 1
    ba5a:	80 93 84 01 	sts	0x0184, r24
		       PPoolingSetting[Addr]=((PPoolingSetting[Addr]+1)%21);
			   if (PPoolingSetting[Addr]==0)PPoolingSetting[Addr]=1;
			   //SendSlaveCommand(SC_SET_POOLING_SEND,PPoolingSetting[Addr]);
			   SendPoolingCommand(SC_SET_POOLING_SEND,PPoolingSetting[Addr]);

			   eeprom_write_byte(&DefPoolingPumpMax+Addr,PPoolingSetting[Addr]);
    ba5e:	80 2f       	mov	r24, r16
    ba60:	90 e0       	ldi	r25, 0x00	; 0
    ba62:	d8 cf       	rjmp	.-80     	; 0xba14 <FSettingPumpPooling+0x32a>
			   //stPumpPooling=ppInitMenu;
			   stPumpPooling=ppWaitPoolingRespond;
		       break;
		  case '4'://TimPool
		       PPoolingSetting[Addr]=((PPoolingSetting[Addr]+1)%21);
    ba64:	20 2f       	mov	r18, r16
    ba66:	30 e0       	ldi	r19, 0x00	; 0
    ba68:	fe 01       	movw	r30, r28
    ba6a:	e2 0f       	add	r30, r18
    ba6c:	f3 1f       	adc	r31, r19
    ba6e:	81 81       	ldd	r24, Z+1	; 0x01
    ba70:	90 e0       	ldi	r25, 0x00	; 0
    ba72:	01 96       	adiw	r24, 0x01	; 1
    ba74:	65 e1       	ldi	r22, 0x15	; 21
    ba76:	70 e0       	ldi	r23, 0x00	; 0
    ba78:	0e 94 17 aa 	call	0x1542e	; 0x1542e <__divmodhi4>
    ba7c:	68 2f       	mov	r22, r24
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
    ba7e:	87 e1       	ldi	r24, 0x17	; 23
    ba80:	c1 cf       	rjmp	.-126    	; 0xba04 <FSettingPumpPooling+0x31a>
			   eeprom_write_byte(&DefPoolingPumpMax+Addr,PPoolingSetting[Addr]);
			   //stPumpPooling=ppInitMenu;
			   stPumpPooling=ppWaitPoolingRespond;
		       break;
		  case '5'://DelayNextPump
		       PPoolingSetting[Addr]=((PPoolingSetting[Addr]+1)%41); 
    ba82:	20 2f       	mov	r18, r16
    ba84:	30 e0       	ldi	r19, 0x00	; 0
    ba86:	fe 01       	movw	r30, r28
    ba88:	e2 0f       	add	r30, r18
    ba8a:	f3 1f       	adc	r31, r19
    ba8c:	81 81       	ldd	r24, Z+1	; 0x01
    ba8e:	90 e0       	ldi	r25, 0x00	; 0
    ba90:	01 96       	adiw	r24, 0x01	; 1
    ba92:	69 e2       	ldi	r22, 0x29	; 41
    ba94:	70 e0       	ldi	r23, 0x00	; 0
    ba96:	0e 94 17 aa 	call	0x1542e	; 0x1542e <__divmodhi4>
    ba9a:	68 2f       	mov	r22, r24
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
    ba9c:	88 e1       	ldi	r24, 0x18	; 24
    ba9e:	b2 cf       	rjmp	.-156    	; 0xba04 <FSettingPumpPooling+0x31a>
			   eeprom_write_byte(&DefPoolingPumpMax+Addr,PPoolingSetting[Addr]);
			   //stPumpPooling=ppInitMenu;
               stPumpPooling=ppWaitPoolingRespond;
		       break;
		  case '6'://ActivePump
		       PPoolingSetting[Addr]=((PPoolingSetting[Addr]+1)%(1+eeprom_read_byte(&DefPoolingPumpMax))); 			       
    baa0:	84 e4       	ldi	r24, 0x44	; 68
    baa2:	91 e0       	ldi	r25, 0x01	; 1
    baa4:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
			   eeprom_write_byte(&DefPoolingPumpMax+Addr,PPoolingSetting[Addr]);
    baa8:	10 e0       	ldi	r17, 0x00	; 0
    baaa:	fe 01       	movw	r30, r28
    baac:	e0 0f       	add	r30, r16
    baae:	f1 1f       	adc	r31, r17
    bab0:	21 81       	ldd	r18, Z+1	; 0x01
    bab2:	30 e0       	ldi	r19, 0x00	; 0
    bab4:	68 2f       	mov	r22, r24
    bab6:	70 e0       	ldi	r23, 0x00	; 0
    bab8:	6f 5f       	subi	r22, 0xFF	; 255
    baba:	7f 4f       	sbci	r23, 0xFF	; 255
    babc:	c9 01       	movw	r24, r18
    babe:	01 96       	adiw	r24, 0x01	; 1
    bac0:	0e 94 17 aa 	call	0x1542e	; 0x1542e <__divmodhi4>
    bac4:	68 2f       	mov	r22, r24
    bac6:	c8 01       	movw	r24, r16
    bac8:	8c 5b       	subi	r24, 0xBC	; 188
    baca:	9e 4f       	sbci	r25, 0xFE	; 254
    bacc:	0e 94 db ac 	call	0x159b6	; 0x159b6 <__eewr_byte_m128>
    bad0:	0c c0       	rjmp	.+24     	; 0xbaea <FSettingPumpPooling+0x400>
			   stPumpPooling=ppInitMenu;
		       break;
		  case '*'://Exit
		       stPumpPooling=ppExitSettingPooling;		            
    bad2:	84 e0       	ldi	r24, 0x04	; 4
    bad4:	80 93 1b 02 	sts	0x021B, r24
    bad8:	0f c0       	rjmp	.+30     	; 0xbaf8 <FSettingPumpPooling+0x40e>
		       break;
		  }  
	      break;
     case ppWaitPoolingRespond:	    
	      if ((IsStandaloneAcknoledge==True)||(TimSend>5))stPumpPooling=ppInitMenu;
    bada:	80 91 82 01 	lds	r24, 0x0182
    bade:	81 30       	cpi	r24, 0x01	; 1
    bae0:	21 f0       	breq	.+8      	; 0xbaea <FSettingPumpPooling+0x400>
    bae2:	80 91 78 0c 	lds	r24, 0x0C78
    bae6:	86 30       	cpi	r24, 0x06	; 6
    bae8:	38 f0       	brcs	.+14     	; 0xbaf8 <FSettingPumpPooling+0x40e>
    baea:	10 92 1b 02 	sts	0x021B, r1
    baee:	04 c0       	rjmp	.+8      	; 0xbaf8 <FSettingPumpPooling+0x40e>
	      break;
     case ppExitSettingPooling:
          stPumpPooling=ppInitMenu;
    baf0:	10 92 1b 02 	sts	0x021B, r1
    baf4:	81 e0       	ldi	r24, 0x01	; 1
    baf6:	01 c0       	rjmp	.+2      	; 0xbafa <FSettingPumpPooling+0x410>
    baf8:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
	      break;
    }
return Result;
}
    bafa:	6a 96       	adiw	r28, 0x1a	; 26
    bafc:	0f b6       	in	r0, 0x3f	; 63
    bafe:	f8 94       	cli
    bb00:	de bf       	out	0x3e, r29	; 62
    bb02:	0f be       	out	0x3f, r0	; 63
    bb04:	cd bf       	out	0x3d, r28	; 61
    bb06:	cf 91       	pop	r28
    bb08:	df 91       	pop	r29
    bb0a:	1f 91       	pop	r17
    bb0c:	0f 91       	pop	r16
    bb0e:	ff 90       	pop	r15
    bb10:	ef 90       	pop	r14
    bb12:	08 95       	ret

0000bb14 <DisplayTicker>:
	case tiDelayLeft:
         if (TimTicker>TICKER_DELAY)stDisplayTicker=tiRight;	     
	     break;
	}
*/
    if (TimTicker>(TICKER_DELAY*2+1)){
    bb14:	80 91 90 01 	lds	r24, 0x0190
    bb18:	86 31       	cpi	r24, 0x16	; 22
    bb1a:	38 f0       	brcs	.+14     	; 0xbb2a <DisplayTicker+0x16>
	    lcd_put(4, 1, '>');
    bb1c:	84 e0       	ldi	r24, 0x04	; 4
    bb1e:	61 e0       	ldi	r22, 0x01	; 1
    bb20:	4e e3       	ldi	r20, 0x3E	; 62
    bb22:	0e 94 ca a4 	call	0x14994	; 0x14994 <lcd_put>
		TimTicker=0;
    bb26:	10 92 90 01 	sts	0x0190, r1
	}
    if (TimTicker==TICKER_DELAY){
    bb2a:	80 91 90 01 	lds	r24, 0x0190
    bb2e:	8a 30       	cpi	r24, 0x0A	; 10
    bb30:	51 f4       	brne	.+20     	; 0xbb46 <DisplayTicker+0x32>
	    lcd_put(4, 1, '<');
    bb32:	84 e0       	ldi	r24, 0x04	; 4
    bb34:	61 e0       	ldi	r22, 0x01	; 1
    bb36:	4c e3       	ldi	r20, 0x3C	; 60
    bb38:	0e 94 ca a4 	call	0x14994	; 0x14994 <lcd_put>
		TimTicker++;
    bb3c:	80 91 90 01 	lds	r24, 0x0190
    bb40:	8f 5f       	subi	r24, 0xFF	; 255
    bb42:	80 93 90 01 	sts	0x0190, r24
    bb46:	08 95       	ret

0000bb48 <DisplayIdle>:
	          lcd_put(x,y,'X');     
			  }

}

void DisplayIdle(){
    bb48:	6f 92       	push	r6
    bb4a:	7f 92       	push	r7
    bb4c:	8f 92       	push	r8
    bb4e:	9f 92       	push	r9
    bb50:	af 92       	push	r10
    bb52:	bf 92       	push	r11
    bb54:	cf 92       	push	r12
    bb56:	df 92       	push	r13
    bb58:	ff 92       	push	r15
    bb5a:	0f 93       	push	r16
    bb5c:	1f 93       	push	r17
    bb5e:	df 93       	push	r29
    bb60:	cf 93       	push	r28
    bb62:	cd b7       	in	r28, 0x3d	; 61
    bb64:	de b7       	in	r29, 0x3e	; 62
    bb66:	67 97       	sbiw	r28, 0x17	; 23
    bb68:	0f b6       	in	r0, 0x3f	; 63
    bb6a:	f8 94       	cli
    bb6c:	de bf       	out	0x3e, r29	; 62
    bb6e:	0f be       	out	0x3f, r0	; 63
    bb70:	cd bf       	out	0x3d, r28	; 61
static unsigned int iLoopDisplayIdle=0;
static char stDispIdle=diScan;
     char i,iDisp;
     char lcdteks[20],sFIP[3];

     iLoopDisplayIdle++;
    bb72:	80 91 82 02 	lds	r24, 0x0282
    bb76:	90 91 83 02 	lds	r25, 0x0283
    bb7a:	01 96       	adiw	r24, 0x01	; 1
    bb7c:	90 93 83 02 	sts	0x0283, r25
    bb80:	80 93 82 02 	sts	0x0282, r24
     //Setting DateTime ON

	if ((iLoopDisplayIdle%50)==0){
    bb84:	62 e3       	ldi	r22, 0x32	; 50
    bb86:	70 e0       	ldi	r23, 0x00	; 0
    bb88:	0e 94 03 aa 	call	0x15406	; 0x15406 <__udivmodhi4>
    bb8c:	89 2b       	or	r24, r25
    bb8e:	09 f5       	brne	.+66     	; 0xbbd2 <DisplayIdle+0x8a>
	   if (IFType==IT_STANDALONE)DisplayPumpStatus();
    bb90:	80 91 00 01 	lds	r24, 0x0100
    bb94:	82 30       	cpi	r24, 0x02	; 2
    bb96:	11 f4       	brne	.+4      	; 0xbb9c <DisplayIdle+0x54>
    bb98:	0e 94 17 49 	call	0x922e	; 0x922e <DisplayPumpStatus>
	   if(eeprom_read_byte(&DefShowDateTime)) DisplayDateTime();
    bb9c:	87 e3       	ldi	r24, 0x37	; 55
    bb9e:	90 e0       	ldi	r25, 0x00	; 0
    bba0:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
    bba4:	88 23       	and	r24, r24
    bba6:	19 f0       	breq	.+6      	; 0xbbae <DisplayIdle+0x66>
    bba8:	0e 94 57 48 	call	0x90ae	; 0x90ae <DisplayDateTime>
    bbac:	02 c0       	rjmp	.+4      	; 0xbbb2 <DisplayIdle+0x6a>
       else DisplayTicker();
    bbae:	0e 94 8a 5d 	call	0xbb14	; 0xbb14 <DisplayTicker>
	   //Display Standalone Sequnece
	   
	   if((IFType==IT_STANDALONE)&&(IsNewPoolingSequence==True)){
    bbb2:	80 91 00 01 	lds	r24, 0x0100
    bbb6:	82 30       	cpi	r24, 0x02	; 2
    bbb8:	61 f4       	brne	.+24     	; 0xbbd2 <DisplayIdle+0x8a>
    bbba:	80 91 81 01 	lds	r24, 0x0181
    bbbe:	81 30       	cpi	r24, 0x01	; 1
    bbc0:	41 f4       	brne	.+16     	; 0xbbd2 <DisplayIdle+0x8a>
	       IsNewPoolingSequence=False;
    bbc2:	10 92 81 01 	sts	0x0181, r1
		   DisplayStandaloneSequence(4,18,iSequencePooling);
    bbc6:	84 e0       	ldi	r24, 0x04	; 4
    bbc8:	62 e1       	ldi	r22, 0x12	; 18
    bbca:	40 91 80 01 	lds	r20, 0x0180
    bbce:	0e 94 3f 5b 	call	0xb67e	; 0xb67e <DisplayStandaloneSequence>

	 }
     //DisplayPumpStatus Standalone Mode

	 //Display Printing FIP
	 switch (stDispIdle){
    bbd2:	f0 90 81 02 	lds	r15, 0x0281
    bbd6:	ff 20       	and	r15, r15
    bbd8:	29 f0       	breq	.+10     	; 0xbbe4 <DisplayIdle+0x9c>
    bbda:	81 e0       	ldi	r24, 0x01	; 1
    bbdc:	f8 16       	cp	r15, r24
    bbde:	09 f0       	breq	.+2      	; 0xbbe2 <DisplayIdle+0x9a>
    bbe0:	58 c0       	rjmp	.+176    	; 0xbc92 <DisplayIdle+0x14a>
    bbe2:	2f c0       	rjmp	.+94     	; 0xbc42 <DisplayIdle+0xfa>
	 case diScan:
	      if (IsBusyIdlePrinting==True){
    bbe4:	f0 90 b2 01 	lds	r15, 0x01B2
    bbe8:	91 e0       	ldi	r25, 0x01	; 1
    bbea:	f9 16       	cp	r15, r25
    bbec:	09 f0       	breq	.+2      	; 0xbbf0 <DisplayIdle+0xa8>
    bbee:	51 c0       	rjmp	.+162    	; 0xbc92 <DisplayIdle+0x14a>
		       sprintf_P(lcdteks,PSTR("Printing FIP%s "),strFIP_ID);
    bbf0:	00 d0       	rcall	.+0      	; 0xbbf2 <DisplayIdle+0xaa>
    bbf2:	00 d0       	rcall	.+0      	; 0xbbf4 <DisplayIdle+0xac>
    bbf4:	00 d0       	rcall	.+0      	; 0xbbf6 <DisplayIdle+0xae>
    bbf6:	ed b7       	in	r30, 0x3d	; 61
    bbf8:	fe b7       	in	r31, 0x3e	; 62
    bbfa:	31 96       	adiw	r30, 0x01	; 1
    bbfc:	8e 01       	movw	r16, r28
    bbfe:	0c 5f       	subi	r16, 0xFC	; 252
    bc00:	1f 4f       	sbci	r17, 0xFF	; 255
    bc02:	ad b7       	in	r26, 0x3d	; 61
    bc04:	be b7       	in	r27, 0x3e	; 62
    bc06:	12 96       	adiw	r26, 0x02	; 2
    bc08:	1c 93       	st	X, r17
    bc0a:	0e 93       	st	-X, r16
    bc0c:	11 97       	sbiw	r26, 0x01	; 1
    bc0e:	83 e5       	ldi	r24, 0x53	; 83
    bc10:	9e e1       	ldi	r25, 0x1E	; 30
    bc12:	93 83       	std	Z+3, r25	; 0x03
    bc14:	82 83       	std	Z+2, r24	; 0x02
    bc16:	89 eb       	ldi	r24, 0xB9	; 185
    bc18:	97 e0       	ldi	r25, 0x07	; 7
    bc1a:	95 83       	std	Z+5, r25	; 0x05
    bc1c:	84 83       	std	Z+4, r24	; 0x04
    bc1e:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
			   lcd_print(3,1,lcdteks);
    bc22:	ed b7       	in	r30, 0x3d	; 61
    bc24:	fe b7       	in	r31, 0x3e	; 62
    bc26:	36 96       	adiw	r30, 0x06	; 6
    bc28:	0f b6       	in	r0, 0x3f	; 63
    bc2a:	f8 94       	cli
    bc2c:	fe bf       	out	0x3e, r31	; 62
    bc2e:	0f be       	out	0x3f, r0	; 63
    bc30:	ed bf       	out	0x3d, r30	; 61
    bc32:	83 e0       	ldi	r24, 0x03	; 3
    bc34:	61 e0       	ldi	r22, 0x01	; 1
    bc36:	a8 01       	movw	r20, r16
    bc38:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
			   stDispIdle=diWaitNoBusy;
    bc3c:	f0 92 81 02 	sts	0x0281, r15
    bc40:	28 c0       	rjmp	.+80     	; 0xbc92 <DisplayIdle+0x14a>
		  }         
	      break;
     case diWaitNoBusy:
	      if (IsBusyIdlePrinting==False){
    bc42:	80 91 b2 01 	lds	r24, 0x01B2
    bc46:	88 23       	and	r24, r24
    bc48:	21 f5       	brne	.+72     	; 0xbc92 <DisplayIdle+0x14a>
		       sprintf_P(lcdteks,PSTR("                    "));
    bc4a:	00 d0       	rcall	.+0      	; 0xbc4c <DisplayIdle+0x104>
    bc4c:	00 d0       	rcall	.+0      	; 0xbc4e <DisplayIdle+0x106>
    bc4e:	8e 01       	movw	r16, r28
    bc50:	0c 5f       	subi	r16, 0xFC	; 252
    bc52:	1f 4f       	sbci	r17, 0xFF	; 255
    bc54:	ad b7       	in	r26, 0x3d	; 61
    bc56:	be b7       	in	r27, 0x3e	; 62
    bc58:	12 96       	adiw	r26, 0x02	; 2
    bc5a:	1c 93       	st	X, r17
    bc5c:	0e 93       	st	-X, r16
    bc5e:	11 97       	sbiw	r26, 0x01	; 1
    bc60:	8e e3       	ldi	r24, 0x3E	; 62
    bc62:	9e e1       	ldi	r25, 0x1E	; 30
    bc64:	14 96       	adiw	r26, 0x04	; 4
    bc66:	9c 93       	st	X, r25
    bc68:	8e 93       	st	-X, r24
    bc6a:	13 97       	sbiw	r26, 0x03	; 3
    bc6c:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
			   lcd_print(3,1,lcdteks);
    bc70:	0f 90       	pop	r0
    bc72:	0f 90       	pop	r0
    bc74:	0f 90       	pop	r0
    bc76:	0f 90       	pop	r0
    bc78:	83 e0       	ldi	r24, 0x03	; 3
    bc7a:	61 e0       	ldi	r22, 0x01	; 1
    bc7c:	a8 01       	movw	r20, r16
    bc7e:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
			   stDispIdle=diScan;
    bc82:	10 92 81 02 	sts	0x0281, r1
			   if (nLocalAccount>0)IsViewFillingFIP=True;
    bc86:	80 91 8f 01 	lds	r24, 0x018F
    bc8a:	88 23       	and	r24, r24
    bc8c:	11 f0       	breq	.+4      	; 0xbc92 <DisplayIdle+0x14a>
    bc8e:	f0 92 96 01 	sts	0x0196, r15
		  }
	      break;     
	 }
	 //Display Filling FIP
	 if (IsViewFillingFIP==True){
    bc92:	80 91 96 01 	lds	r24, 0x0196
    bc96:	81 30       	cpi	r24, 0x01	; 1
    bc98:	09 f0       	breq	.+2      	; 0xbc9c <DisplayIdle+0x154>
    bc9a:	69 c0       	rjmp	.+210    	; 0xbd6e <DisplayIdle+0x226>
	     IsViewFillingFIP=False;
    bc9c:	10 92 96 01 	sts	0x0196, r1
		 if (nLocalAccount>0){
    bca0:	80 91 8f 01 	lds	r24, 0x018F
    bca4:	88 23       	and	r24, r24
    bca6:	09 f4       	brne	.+2      	; 0xbcaa <DisplayIdle+0x162>
    bca8:	5c c0       	rjmp	.+184    	; 0xbd62 <DisplayIdle+0x21a>
		     lcd_printf(3,1,PSTR("@FIP:"));
    bcaa:	83 e0       	ldi	r24, 0x03	; 3
    bcac:	61 e0       	ldi	r22, 0x01	; 1
    bcae:	48 e3       	ldi	r20, 0x38	; 56
    bcb0:	5e e1       	ldi	r21, 0x1E	; 30
    bcb2:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
    bcb6:	ff 24       	eor	r15, r15
		     for (iDisp=0;iDisp<nLocalAccount;iDisp++){
			      //leadingZero(LocalAccountFIP[iDisp],sFIP);
				  sprintf_P(sFIP,PSTR("%.2d"),LocalAccountFIP[iDisp]);
    bcb8:	5e 01       	movw	r10, r28
    bcba:	08 94       	sec
    bcbc:	a1 1c       	adc	r10, r1
    bcbe:	b1 1c       	adc	r11, r1
    bcc0:	b3 e3       	ldi	r27, 0x33	; 51
    bcc2:	6b 2e       	mov	r6, r27
    bcc4:	be e1       	ldi	r27, 0x1E	; 30
    bcc6:	7b 2e       	mov	r7, r27
			      sprintf_P(lcdteks,PSTR("#%s"),sFIP);
    bcc8:	a4 e0       	ldi	r26, 0x04	; 4
    bcca:	ca 2e       	mov	r12, r26
    bccc:	d1 2c       	mov	r13, r1
    bcce:	cc 0e       	add	r12, r28
    bcd0:	dd 1e       	adc	r13, r29
    bcd2:	ff e2       	ldi	r31, 0x2F	; 47
    bcd4:	8f 2e       	mov	r8, r31
    bcd6:	fe e1       	ldi	r31, 0x1E	; 30
    bcd8:	9f 2e       	mov	r9, r31
    bcda:	3d c0       	rjmp	.+122    	; 0xbd56 <DisplayIdle+0x20e>
	     IsViewFillingFIP=False;
		 if (nLocalAccount>0){
		     lcd_printf(3,1,PSTR("@FIP:"));
		     for (iDisp=0;iDisp<nLocalAccount;iDisp++){
			      //leadingZero(LocalAccountFIP[iDisp],sFIP);
				  sprintf_P(sFIP,PSTR("%.2d"),LocalAccountFIP[iDisp]);
    bcdc:	0f 2d       	mov	r16, r15
    bcde:	10 e0       	ldi	r17, 0x00	; 0
    bce0:	00 d0       	rcall	.+0      	; 0xbce2 <DisplayIdle+0x19a>
    bce2:	00 d0       	rcall	.+0      	; 0xbce4 <DisplayIdle+0x19c>
    bce4:	00 d0       	rcall	.+0      	; 0xbce6 <DisplayIdle+0x19e>
    bce6:	ad b7       	in	r26, 0x3d	; 61
    bce8:	be b7       	in	r27, 0x3e	; 62
    bcea:	11 96       	adiw	r26, 0x01	; 1
    bcec:	ed b7       	in	r30, 0x3d	; 61
    bcee:	fe b7       	in	r31, 0x3e	; 62
    bcf0:	b2 82       	std	Z+2, r11	; 0x02
    bcf2:	a1 82       	std	Z+1, r10	; 0x01
    bcf4:	13 96       	adiw	r26, 0x03	; 3
    bcf6:	7c 92       	st	X, r7
    bcf8:	6e 92       	st	-X, r6
    bcfa:	12 97       	sbiw	r26, 0x02	; 2
    bcfc:	f8 01       	movw	r30, r16
    bcfe:	ea 5a       	subi	r30, 0xAA	; 170
    bd00:	fc 4f       	sbci	r31, 0xFC	; 252
    bd02:	80 81       	ld	r24, Z
    bd04:	14 96       	adiw	r26, 0x04	; 4
    bd06:	8c 93       	st	X, r24
    bd08:	14 97       	sbiw	r26, 0x04	; 4
    bd0a:	15 96       	adiw	r26, 0x05	; 5
    bd0c:	1c 92       	st	X, r1
    bd0e:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
			      sprintf_P(lcdteks,PSTR("#%s"),sFIP);
    bd12:	ed b7       	in	r30, 0x3d	; 61
    bd14:	fe b7       	in	r31, 0x3e	; 62
    bd16:	31 96       	adiw	r30, 0x01	; 1
    bd18:	ad b7       	in	r26, 0x3d	; 61
    bd1a:	be b7       	in	r27, 0x3e	; 62
    bd1c:	12 96       	adiw	r26, 0x02	; 2
    bd1e:	dc 92       	st	X, r13
    bd20:	ce 92       	st	-X, r12
    bd22:	11 97       	sbiw	r26, 0x01	; 1
    bd24:	93 82       	std	Z+3, r9	; 0x03
    bd26:	82 82       	std	Z+2, r8	; 0x02
    bd28:	b5 82       	std	Z+5, r11	; 0x05
    bd2a:	a4 82       	std	Z+4, r10	; 0x04
    bd2c:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
			      lcd_print(3,6+(iDisp*3),lcdteks);
    bd30:	ed b7       	in	r30, 0x3d	; 61
    bd32:	fe b7       	in	r31, 0x3e	; 62
    bd34:	36 96       	adiw	r30, 0x06	; 6
    bd36:	0f b6       	in	r0, 0x3f	; 63
    bd38:	f8 94       	cli
    bd3a:	fe bf       	out	0x3e, r31	; 62
    bd3c:	0f be       	out	0x3f, r0	; 63
    bd3e:	ed bf       	out	0x3d, r30	; 61
    bd40:	b8 01       	movw	r22, r16
    bd42:	66 0f       	add	r22, r22
    bd44:	77 1f       	adc	r23, r23
    bd46:	60 0f       	add	r22, r16
    bd48:	71 1f       	adc	r23, r17
    bd4a:	6a 5f       	subi	r22, 0xFA	; 250
    bd4c:	83 e0       	ldi	r24, 0x03	; 3
    bd4e:	a6 01       	movw	r20, r12
    bd50:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
	 //Display Filling FIP
	 if (IsViewFillingFIP==True){
	     IsViewFillingFIP=False;
		 if (nLocalAccount>0){
		     lcd_printf(3,1,PSTR("@FIP:"));
		     for (iDisp=0;iDisp<nLocalAccount;iDisp++){
    bd54:	f3 94       	inc	r15
    bd56:	80 91 8f 01 	lds	r24, 0x018F
    bd5a:	f8 16       	cp	r15, r24
    bd5c:	08 f4       	brcc	.+2      	; 0xbd60 <DisplayIdle+0x218>
    bd5e:	be cf       	rjmp	.-132    	; 0xbcdc <DisplayIdle+0x194>
    bd60:	06 c0       	rjmp	.+12     	; 0xbd6e <DisplayIdle+0x226>
				  sprintf_P(sFIP,PSTR("%.2d"),LocalAccountFIP[iDisp]);
			      sprintf_P(lcdteks,PSTR("#%s"),sFIP);
			      lcd_print(3,6+(iDisp*3),lcdteks);
		     }
		 }else{
		 lcd_printf(3,1,PSTR("                    "));
    bd62:	83 e0       	ldi	r24, 0x03	; 3
    bd64:	61 e0       	ldi	r22, 0x01	; 1
    bd66:	4a e1       	ldi	r20, 0x1A	; 26
    bd68:	5e e1       	ldi	r21, 0x1E	; 30
    bd6a:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		 }    
	 }
	 //Filling @FIP 
     if (IsCompleteFilling==True){
    bd6e:	80 91 a9 01 	lds	r24, 0x01A9
    bd72:	81 30       	cpi	r24, 0x01	; 1
    bd74:	c1 f4       	brne	.+48     	; 0xbda6 <DisplayIdle+0x25e>
	     IsCompleteFilling=False;
    bd76:	10 92 a9 01 	sts	0x01A9, r1
	     if (nLocalAccount>0){
    bd7a:	90 91 8f 01 	lds	r25, 0x018F
    bd7e:	99 23       	and	r25, r25
    bd80:	91 f0       	breq	.+36     	; 0xbda6 <DisplayIdle+0x25e>
    bd82:	e6 e5       	ldi	r30, 0x56	; 86
    bd84:	f3 e0       	ldi	r31, 0x03	; 3
			 for(i=0;i<nLocalAccount;i++){//Shift data
    bd86:	29 2f       	mov	r18, r25
    bd88:	30 e0       	ldi	r19, 0x00	; 0
    bd8a:	2e 0f       	add	r18, r30
    bd8c:	3f 1f       	adc	r19, r31
    bd8e:	02 c0       	rjmp	.+4      	; 0xbd94 <DisplayIdle+0x24c>
			     LocalAccountFIP[i]=LocalAccountFIP[i+1];
    bd90:	81 81       	ldd	r24, Z+1	; 0x01
    bd92:	81 93       	st	Z+, r24
	 }
	 //Filling @FIP 
     if (IsCompleteFilling==True){
	     IsCompleteFilling=False;
	     if (nLocalAccount>0){
			 for(i=0;i<nLocalAccount;i++){//Shift data
    bd94:	e2 17       	cp	r30, r18
    bd96:	f3 07       	cpc	r31, r19
    bd98:	d9 f7       	brne	.-10     	; 0xbd90 <DisplayIdle+0x248>
			     LocalAccountFIP[i]=LocalAccountFIP[i+1];
			 }
			 nLocalAccount--;
    bd9a:	91 50       	subi	r25, 0x01	; 1
    bd9c:	90 93 8f 01 	sts	0x018F, r25
             IsViewFillingFIP=True; 
    bda0:	81 e0       	ldi	r24, 0x01	; 1
    bda2:	80 93 96 01 	sts	0x0196, r24
		 }
	 }
}
    bda6:	67 96       	adiw	r28, 0x17	; 23
    bda8:	0f b6       	in	r0, 0x3f	; 63
    bdaa:	f8 94       	cli
    bdac:	de bf       	out	0x3e, r29	; 62
    bdae:	0f be       	out	0x3f, r0	; 63
    bdb0:	cd bf       	out	0x3d, r28	; 61
    bdb2:	cf 91       	pop	r28
    bdb4:	df 91       	pop	r29
    bdb6:	1f 91       	pop	r17
    bdb8:	0f 91       	pop	r16
    bdba:	ff 90       	pop	r15
    bdbc:	df 90       	pop	r13
    bdbe:	cf 90       	pop	r12
    bdc0:	bf 90       	pop	r11
    bdc2:	af 90       	pop	r10
    bdc4:	9f 90       	pop	r9
    bdc6:	8f 90       	pop	r8
    bdc8:	7f 90       	pop	r7
    bdca:	6f 90       	pop	r6
    bdcc:	08 95       	ret

0000bdce <systemMaster>:
	cbi(DDRB,2);sbi(PORTB,2);//MOSI Input
	cbi(DDRB,1);sbi(PORTB,1);//SCK  Input
}

void systemMaster(){
  	_spi_init(1, 0);         //Master
    bdce:	81 e0       	ldi	r24, 0x01	; 1
    bdd0:	60 e0       	ldi	r22, 0x00	; 0
    bdd2:	0e 94 66 a6 	call	0x14ccc	; 0x14ccc <_spi_init>
    _spi_enable(_SPI_SLAVE); //Enable SS 
    bdd6:	81 e0       	ldi	r24, 0x01	; 1
    bdd8:	0e 94 79 a6 	call	0x14cf2	; 0x14cf2 <_spi_enable>
	cbi(DDRB,3);sbi(PORTB,3);//MISO Input
    bddc:	bb 98       	cbi	0x17, 3	; 23
    bdde:	c3 9a       	sbi	0x18, 3	; 24
	sbi(DDRB,2);             //MOSI Output
    bde0:	ba 9a       	sbi	0x17, 2	; 23
}
    bde2:	08 95       	ret

0000bde4 <systemSlave>:




void systemSlave(){
    _spi_enable(_SPI_NONE);	
    bde4:	80 e0       	ldi	r24, 0x00	; 0
    bde6:	0e 94 79 a6 	call	0x14cf2	; 0x14cf2 <_spi_enable>
  	_spi_init(0, 1);         //Slave
    bdea:	80 e0       	ldi	r24, 0x00	; 0
    bdec:	61 e0       	ldi	r22, 0x01	; 1
    bdee:	0e 94 66 a6 	call	0x14ccc	; 0x14ccc <_spi_init>
	sbi(DDRB,3);             //MISO Output
    bdf2:	bb 9a       	sbi	0x17, 3	; 23
	sbi(DDRB,3);sbi(PORTB,3);//MISO Output
    bdf4:	bb 9a       	sbi	0x17, 3	; 23
    bdf6:	c3 9a       	sbi	0x18, 3	; 24
	cbi(DDRB,2);sbi(PORTB,2);//MOSI Input
    bdf8:	ba 98       	cbi	0x17, 2	; 23
    bdfa:	c2 9a       	sbi	0x18, 2	; 24
	cbi(DDRB,1);sbi(PORTB,1);//SCK  Input
    bdfc:	b9 98       	cbi	0x17, 1	; 23
    bdfe:	c1 9a       	sbi	0x18, 1	; 24
}
    be00:	08 95       	ret

0000be02 <EDCSendByte>:
    _spi_enable(_SPI_SLAVE); //Enable SS 
	cbi(DDRB,3);sbi(PORTB,3);//MISO Input
	sbi(DDRB,2);             //MOSI Output
}

void EDCSendByte(char EDCData){
    be02:	1f 93       	push	r17
    be04:	18 2f       	mov	r17, r24
     systemMaster();	 
    be06:	0e 94 e7 5e 	call	0xbdce	; 0xbdce <systemMaster>
     _spi(EDCData);
    be0a:	81 2f       	mov	r24, r17
    be0c:	0e 94 90 a6 	call	0x14d20	; 0x14d20 <_spi>
     systemSlave();
    be10:	0e 94 f2 5e 	call	0xbde4	; 0xbde4 <systemSlave>
}
    be14:	1f 91       	pop	r17
    be16:	08 95       	ret

0000be18 <SendEDCMessage>:
     char Result;
	 Result=xLRC^DataIn;
     return(Result);
}

void SendEDCMessage(){
    be18:	cf 92       	push	r12
    be1a:	df 92       	push	r13
    be1c:	ef 92       	push	r14
    be1e:	ff 92       	push	r15
    be20:	0f 93       	push	r16
    be22:	1f 93       	push	r17
    be24:	df 93       	push	r29
    be26:	cf 93       	push	r28
    be28:	cd b7       	in	r28, 0x3d	; 61
    be2a:	de b7       	in	r29, 0x3e	; 62
    be2c:	ec 97       	sbiw	r28, 0x3c	; 60
    be2e:	0f b6       	in	r0, 0x3f	; 63
    be30:	f8 94       	cli
    be32:	de bf       	out	0x3e, r29	; 62
    be34:	0f be       	out	0x3f, r0	; 63
    be36:	cd bf       	out	0x3d, r28	; 61

     //GenerateData
	 //sprintf_P(strAmount,PSTR("%d"),100);//Testing Only
	 //AddZeroLead(strAmount,8);
	 //uart_printf(0,0,PSTR("StrStatus:"));uart_print(0,1,strStatus);
     sprintf_P(SerialEDC,PSTR("02%s%s%s%s%s%s%s"),strTranNo,strFIP_ID,strDescription,strPrice,strVolume,strAmount,strStatus);     
    be38:	8d b7       	in	r24, 0x3d	; 61
    be3a:	9e b7       	in	r25, 0x3e	; 62
    be3c:	42 97       	sbiw	r24, 0x12	; 18
    be3e:	0f b6       	in	r0, 0x3f	; 63
    be40:	f8 94       	cli
    be42:	9e bf       	out	0x3e, r25	; 62
    be44:	0f be       	out	0x3f, r0	; 63
    be46:	8d bf       	out	0x3d, r24	; 61
    be48:	ed b7       	in	r30, 0x3d	; 61
    be4a:	fe b7       	in	r31, 0x3e	; 62
    be4c:	31 96       	adiw	r30, 0x01	; 1
    be4e:	8e 01       	movw	r16, r28
    be50:	0f 5f       	subi	r16, 0xFF	; 255
    be52:	1f 4f       	sbci	r17, 0xFF	; 255
    be54:	ad b7       	in	r26, 0x3d	; 61
    be56:	be b7       	in	r27, 0x3e	; 62
    be58:	12 96       	adiw	r26, 0x02	; 2
    be5a:	1c 93       	st	X, r17
    be5c:	0e 93       	st	-X, r16
    be5e:	11 97       	sbiw	r26, 0x01	; 1
    be60:	87 e0       	ldi	r24, 0x07	; 7
    be62:	9e e1       	ldi	r25, 0x1E	; 30
    be64:	93 83       	std	Z+3, r25	; 0x03
    be66:	82 83       	std	Z+2, r24	; 0x02
    be68:	87 e8       	ldi	r24, 0x87	; 135
    be6a:	9c e0       	ldi	r25, 0x0C	; 12
    be6c:	95 83       	std	Z+5, r25	; 0x05
    be6e:	84 83       	std	Z+4, r24	; 0x04
    be70:	89 eb       	ldi	r24, 0xB9	; 185
    be72:	97 e0       	ldi	r25, 0x07	; 7
    be74:	97 83       	std	Z+7, r25	; 0x07
    be76:	86 83       	std	Z+6, r24	; 0x06
    be78:	8c e0       	ldi	r24, 0x0C	; 12
    be7a:	98 e0       	ldi	r25, 0x08	; 8
    be7c:	91 87       	std	Z+9, r25	; 0x09
    be7e:	80 87       	std	Z+8, r24	; 0x08
    be80:	8e e9       	ldi	r24, 0x9E	; 158
    be82:	95 e0       	ldi	r25, 0x05	; 5
    be84:	93 87       	std	Z+11, r25	; 0x0b
    be86:	82 87       	std	Z+10, r24	; 0x0a
    be88:	85 e7       	ldi	r24, 0x75	; 117
    be8a:	93 e0       	ldi	r25, 0x03	; 3
    be8c:	95 87       	std	Z+13, r25	; 0x0d
    be8e:	84 87       	std	Z+12, r24	; 0x0c
    be90:	83 eb       	ldi	r24, 0xB3	; 179
    be92:	9b e0       	ldi	r25, 0x0B	; 11
    be94:	97 87       	std	Z+15, r25	; 0x0f
    be96:	86 87       	std	Z+14, r24	; 0x0e
    be98:	8a e8       	ldi	r24, 0x8A	; 138
    be9a:	93 e0       	ldi	r25, 0x03	; 3
    be9c:	91 8b       	std	Z+17, r25	; 0x11
    be9e:	80 8b       	std	Z+16, r24	; 0x10
    bea0:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>

	 //SendingData
	 xCRC=0;EDCSendByte(0x02);
    bea4:	8d b7       	in	r24, 0x3d	; 61
    bea6:	9e b7       	in	r25, 0x3e	; 62
    bea8:	42 96       	adiw	r24, 0x12	; 18
    beaa:	0f b6       	in	r0, 0x3f	; 63
    beac:	f8 94       	cli
    beae:	9e bf       	out	0x3e, r25	; 62
    beb0:	0f be       	out	0x3f, r0	; 63
    beb2:	8d bf       	out	0x3d, r24	; 61
    beb4:	82 e0       	ldi	r24, 0x02	; 2
    beb6:	0e 94 01 5f 	call	0xbe02	; 0xbe02 <EDCSendByte>
    beba:	ff 24       	eor	r15, r15
    bebc:	92 e0       	ldi	r25, 0x02	; 2
    bebe:	e9 2e       	mov	r14, r25
    bec0:	84 ed       	ldi	r24, 0xD4	; 212
    bec2:	c8 2e       	mov	r12, r24
    bec4:	80 e3       	ldi	r24, 0x30	; 48
    bec6:	d8 2e       	mov	r13, r24
    bec8:	0a c0       	rjmp	.+20     	; 0xbede <SendEDCMessage+0xc6>
	 xCRC=CalcLRC(xCRC,0x02);	      
	 for (i=0;i<strlen(SerialEDC);i++){
          xCRC=CalcLRC(xCRC,SerialEDC[i]);
    beca:	a0 0f       	add	r26, r16
    becc:	b1 1f       	adc	r27, r17
    bece:	8c 91       	ld	r24, X
     systemSlave();
}

char CalcLRC(char xLRC,char DataIn){
     char Result;
	 Result=xLRC^DataIn;
    bed0:	e8 26       	eor	r14, r24
	 //SendingData
	 xCRC=0;EDCSendByte(0x02);
	 xCRC=CalcLRC(xCRC,0x02);	      
	 for (i=0;i<strlen(SerialEDC);i++){
          xCRC=CalcLRC(xCRC,SerialEDC[i]);
          EDCSendByte(SerialEDC[i]);
    bed2:	0e 94 01 5f 	call	0xbe02	; 0xbe02 <EDCSendByte>
    bed6:	c6 01       	movw	r24, r12
    bed8:	01 97       	sbiw	r24, 0x01	; 1
    beda:	f1 f7       	brne	.-4      	; 0xbed8 <SendEDCMessage+0xc0>
     sprintf_P(SerialEDC,PSTR("02%s%s%s%s%s%s%s"),strTranNo,strFIP_ID,strDescription,strPrice,strVolume,strAmount,strStatus);     

	 //SendingData
	 xCRC=0;EDCSendByte(0x02);
	 xCRC=CalcLRC(xCRC,0x02);	      
	 for (i=0;i<strlen(SerialEDC);i++){
    bedc:	f3 94       	inc	r15
    bede:	f8 01       	movw	r30, r16
    bee0:	01 90       	ld	r0, Z+
    bee2:	00 20       	and	r0, r0
    bee4:	e9 f7       	brne	.-6      	; 0xbee0 <SendEDCMessage+0xc8>
    bee6:	31 97       	sbiw	r30, 0x01	; 1
    bee8:	e0 1b       	sub	r30, r16
    beea:	f1 0b       	sbc	r31, r17
    beec:	af 2d       	mov	r26, r15
    beee:	b0 e0       	ldi	r27, 0x00	; 0
    bef0:	ae 17       	cp	r26, r30
    bef2:	bf 07       	cpc	r27, r31
    bef4:	50 f3       	brcs	.-44     	; 0xbeca <SendEDCMessage+0xb2>
          xCRC=CalcLRC(xCRC,SerialEDC[i]);
          EDCSendByte(SerialEDC[i]);
		  //uart(0,1,SerialEDC[i]);
		  _delay_ms(SPI_EDC_DELAY);//min:8
	 }
     EDCSendByte(0x03);
    bef6:	83 e0       	ldi	r24, 0x03	; 3
    bef8:	0e 94 01 5f 	call	0xbe02	; 0xbe02 <EDCSendByte>
	 xCRC=CalcLRC(xCRC,0x03);	      
	 EDCSendByte(xCRC);
    befc:	83 e0       	ldi	r24, 0x03	; 3
    befe:	8e 25       	eor	r24, r14
    bf00:	0e 94 01 5f 	call	0xbe02	; 0xbe02 <EDCSendByte>
}
    bf04:	ec 96       	adiw	r28, 0x3c	; 60
    bf06:	0f b6       	in	r0, 0x3f	; 63
    bf08:	f8 94       	cli
    bf0a:	de bf       	out	0x3e, r29	; 62
    bf0c:	0f be       	out	0x3f, r0	; 63
    bf0e:	cd bf       	out	0x3d, r28	; 61
    bf10:	cf 91       	pop	r28
    bf12:	df 91       	pop	r29
    bf14:	1f 91       	pop	r17
    bf16:	0f 91       	pop	r16
    bf18:	ff 90       	pop	r15
    bf1a:	ef 90       	pop	r14
    bf1c:	df 90       	pop	r13
    bf1e:	cf 90       	pop	r12
    bf20:	08 95       	ret

0000bf22 <SendSlaveCommand>:
void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
	 PoolMsg=plMsg;
     IsControlPooling=True;
}
void SendSlaveCommand(char SlaveCommand,char SlaveMessage){     
    bf22:	0f 93       	push	r16
    bf24:	1f 93       	push	r17
    bf26:	18 2f       	mov	r17, r24
    bf28:	06 2f       	mov	r16, r22
	 systemMaster();
    bf2a:	0e 94 e7 5e 	call	0xbdce	; 0xbdce <systemMaster>
	 _spi(0x05);
    bf2e:	85 e0       	ldi	r24, 0x05	; 5
    bf30:	0e 94 90 a6 	call	0x14d20	; 0x14d20 <_spi>
	 _spi(SlaveCommand);
    bf34:	81 2f       	mov	r24, r17
    bf36:	0e 94 90 a6 	call	0x14d20	; 0x14d20 <_spi>
	 _spi(SlaveMessage);
    bf3a:	80 2f       	mov	r24, r16
    bf3c:	0e 94 90 a6 	call	0x14d20	; 0x14d20 <_spi>
	 _spi(0x06);
    bf40:	86 e0       	ldi	r24, 0x06	; 6
    bf42:	0e 94 90 a6 	call	0x14d20	; 0x14d20 <_spi>
	 systemSlave();
    bf46:	0e 94 f2 5e 	call	0xbde4	; 0xbde4 <systemSlave>
}
    bf4a:	1f 91       	pop	r17
    bf4c:	0f 91       	pop	r16
    bf4e:	08 95       	ret

0000bf50 <FSettingPumpID>:
     if ((*Value)>MinValue){
	     (*Value)--;
	 }else *Value=MaxValue;
}

char FSettingPumpID(){
    bf50:	9f 92       	push	r9
    bf52:	af 92       	push	r10
    bf54:	bf 92       	push	r11
    bf56:	cf 92       	push	r12
    bf58:	df 92       	push	r13
    bf5a:	ef 92       	push	r14
    bf5c:	ff 92       	push	r15
    bf5e:	0f 93       	push	r16
    bf60:	1f 93       	push	r17
    bf62:	df 93       	push	r29
    bf64:	cf 93       	push	r28
    bf66:	cd b7       	in	r28, 0x3d	; 61
    bf68:	de b7       	in	r29, 0x3e	; 62
    bf6a:	64 97       	sbiw	r28, 0x14	; 20
    bf6c:	0f b6       	in	r0, 0x3f	; 63
    bf6e:	f8 94       	cli
    bf70:	de bf       	out	0x3e, r29	; 62
    bf72:	0f be       	out	0x3f, r0	; 63
    bf74:	cd bf       	out	0x3d, r28	; 61
	 char iLoop,Result,KeyChar,KeyPressed,i,j,CheckPump;
	 char lcdteks[20];
	 static char Idx,PPumpId[8],MsgPumpId,PumpCount;
     
	 Result=MENU_NONE;
	 switch (stMenuPumpID){
    bf76:	80 91 1a 02 	lds	r24, 0x021A
    bf7a:	85 30       	cpi	r24, 0x05	; 5
    bf7c:	09 f4       	brne	.+2      	; 0xbf80 <FSettingPumpID+0x30>
    bf7e:	83 c1       	rjmp	.+774    	; 0xc286 <FSettingPumpID+0x336>
    bf80:	86 30       	cpi	r24, 0x06	; 6
    bf82:	90 f4       	brcc	.+36     	; 0xbfa8 <FSettingPumpID+0x58>
    bf84:	82 30       	cpi	r24, 0x02	; 2
    bf86:	09 f4       	brne	.+2      	; 0xbf8a <FSettingPumpID+0x3a>
    bf88:	8d c0       	rjmp	.+282    	; 0xc0a4 <FSettingPumpID+0x154>
    bf8a:	83 30       	cpi	r24, 0x03	; 3
    bf8c:	30 f4       	brcc	.+12     	; 0xbf9a <FSettingPumpID+0x4a>
    bf8e:	88 23       	and	r24, r24
    bf90:	f1 f0       	breq	.+60     	; 0xbfce <FSettingPumpID+0x7e>
    bf92:	81 30       	cpi	r24, 0x01	; 1
    bf94:	09 f0       	breq	.+2      	; 0xbf98 <FSettingPumpID+0x48>
    bf96:	5b c2       	rjmp	.+1206   	; 0xc44e <FSettingPumpID+0x4fe>
    bf98:	2b c0       	rjmp	.+86     	; 0xbff0 <FSettingPumpID+0xa0>
    bf9a:	83 30       	cpi	r24, 0x03	; 3
    bf9c:	09 f4       	brne	.+2      	; 0xbfa0 <FSettingPumpID+0x50>
    bf9e:	4f c1       	rjmp	.+670    	; 0xc23e <FSettingPumpID+0x2ee>
    bfa0:	84 30       	cpi	r24, 0x04	; 4
    bfa2:	09 f0       	breq	.+2      	; 0xbfa6 <FSettingPumpID+0x56>
    bfa4:	54 c2       	rjmp	.+1192   	; 0xc44e <FSettingPumpID+0x4fe>
    bfa6:	68 c1       	rjmp	.+720    	; 0xc278 <FSettingPumpID+0x328>
    bfa8:	88 30       	cpi	r24, 0x08	; 8
    bfaa:	09 f4       	brne	.+2      	; 0xbfae <FSettingPumpID+0x5e>
    bfac:	f3 c1       	rjmp	.+998    	; 0xc394 <FSettingPumpID+0x444>
    bfae:	89 30       	cpi	r24, 0x09	; 9
    bfb0:	38 f4       	brcc	.+14     	; 0xbfc0 <FSettingPumpID+0x70>
    bfb2:	86 30       	cpi	r24, 0x06	; 6
    bfb4:	09 f4       	brne	.+2      	; 0xbfb8 <FSettingPumpID+0x68>
    bfb6:	92 c1       	rjmp	.+804    	; 0xc2dc <FSettingPumpID+0x38c>
    bfb8:	87 30       	cpi	r24, 0x07	; 7
    bfba:	09 f0       	breq	.+2      	; 0xbfbe <FSettingPumpID+0x6e>
    bfbc:	48 c2       	rjmp	.+1168   	; 0xc44e <FSettingPumpID+0x4fe>
    bfbe:	2d c2       	rjmp	.+1114   	; 0xc41a <FSettingPumpID+0x4ca>
    bfc0:	89 30       	cpi	r24, 0x09	; 9
    bfc2:	09 f4       	brne	.+2      	; 0xbfc6 <FSettingPumpID+0x76>
    bfc4:	32 c2       	rjmp	.+1124   	; 0xc42a <FSettingPumpID+0x4da>
    bfc6:	8a 30       	cpi	r24, 0x0A	; 10
    bfc8:	09 f0       	breq	.+2      	; 0xbfcc <FSettingPumpID+0x7c>
    bfca:	41 c2       	rjmp	.+1154   	; 0xc44e <FSettingPumpID+0x4fe>
    bfcc:	34 c2       	rjmp	.+1128   	; 0xc436 <FSettingPumpID+0x4e6>
	 case mpInitPumpId:	      
	      //Disable PumpPooling
		  if (IFType==IT_STANDALONE)SendSlaveCommand(SC_STOP_POOL_SEQUENCE,0);
    bfce:	80 91 00 01 	lds	r24, 0x0100
    bfd2:	82 30       	cpi	r24, 0x02	; 2
    bfd4:	21 f4       	brne	.+8      	; 0xbfde <FSettingPumpID+0x8e>
    bfd6:	8f e1       	ldi	r24, 0x1F	; 31
    bfd8:	60 e0       	ldi	r22, 0x00	; 0
    bfda:	0e 94 91 5f 	call	0xbf22	; 0xbf22 <SendSlaveCommand>
		  eeprom_read_block((void*) &PPumpId, (const void*) &DefPumpMap,8);
    bfde:	80 e1       	ldi	r24, 0x10	; 16
    bfe0:	92 e0       	ldi	r25, 0x02	; 2
    bfe2:	65 e4       	ldi	r22, 0x45	; 69
    bfe4:	70 e0       	ldi	r23, 0x00	; 0
    bfe6:	48 e0       	ldi	r20, 0x08	; 8
    bfe8:	50 e0       	ldi	r21, 0x00	; 0
    bfea:	0e 94 b9 ac 	call	0x15972	; 0x15972 <__eerd_block_m128>
    bfee:	49 c1       	rjmp	.+658    	; 0xc282 <FSettingPumpID+0x332>
          stMenuPumpID=mpDisplayPumpId;
	      break;
	 case mpDisplayPumpId:
	      lcd_clear();		  
    bff0:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
    bff4:	e0 e1       	ldi	r30, 0x10	; 16
    bff6:	ee 2e       	mov	r14, r30
    bff8:	e2 e0       	ldi	r30, 0x02	; 2
    bffa:	fe 2e       	mov	r15, r30
    bffc:	01 e0       	ldi	r16, 0x01	; 1
    bffe:	10 e0       	ldi	r17, 0x00	; 0
		  for (iLoop=0;iLoop<4;iLoop++){
			  sprintf_P(lcdteks,PSTR("%d.P%.2d | %d.P%.2d"),(iLoop+1),PPumpId[iLoop],(iLoop+5),PPumpId[iLoop+4]);
    c000:	6e 01       	movw	r12, r28
    c002:	08 94       	sec
    c004:	c1 1c       	adc	r12, r1
    c006:	d1 1c       	adc	r13, r1
    c008:	7b e2       	ldi	r23, 0x2B	; 43
    c00a:	a7 2e       	mov	r10, r23
    c00c:	7e e0       	ldi	r23, 0x0E	; 14
    c00e:	b7 2e       	mov	r11, r23
    c010:	8d b7       	in	r24, 0x3d	; 61
    c012:	9e b7       	in	r25, 0x3e	; 62
    c014:	0c 97       	sbiw	r24, 0x0c	; 12
    c016:	0f b6       	in	r0, 0x3f	; 63
    c018:	f8 94       	cli
    c01a:	9e bf       	out	0x3e, r25	; 62
    c01c:	0f be       	out	0x3f, r0	; 63
    c01e:	8d bf       	out	0x3d, r24	; 61
    c020:	ed b7       	in	r30, 0x3d	; 61
    c022:	fe b7       	in	r31, 0x3e	; 62
    c024:	31 96       	adiw	r30, 0x01	; 1
    c026:	ad b7       	in	r26, 0x3d	; 61
    c028:	be b7       	in	r27, 0x3e	; 62
    c02a:	12 96       	adiw	r26, 0x02	; 2
    c02c:	dc 92       	st	X, r13
    c02e:	ce 92       	st	-X, r12
    c030:	11 97       	sbiw	r26, 0x01	; 1
    c032:	b3 82       	std	Z+3, r11	; 0x03
    c034:	a2 82       	std	Z+2, r10	; 0x02
    c036:	15 83       	std	Z+5, r17	; 0x05
    c038:	04 83       	std	Z+4, r16	; 0x04
    c03a:	d7 01       	movw	r26, r14
    c03c:	8c 91       	ld	r24, X
    c03e:	86 83       	std	Z+6, r24	; 0x06
    c040:	17 82       	std	Z+7, r1	; 0x07
    c042:	0c 5f       	subi	r16, 0xFC	; 252
    c044:	1f 4f       	sbci	r17, 0xFF	; 255
    c046:	11 87       	std	Z+9, r17	; 0x09
    c048:	00 87       	std	Z+8, r16	; 0x08
    c04a:	04 50       	subi	r16, 0x04	; 4
    c04c:	10 40       	sbci	r17, 0x00	; 0
    c04e:	14 96       	adiw	r26, 0x04	; 4
    c050:	8c 91       	ld	r24, X
    c052:	82 87       	std	Z+10, r24	; 0x0a
    c054:	13 86       	std	Z+11, r1	; 0x0b
    c056:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
			  lcd_print((iLoop+1),1,lcdteks);
    c05a:	ed b7       	in	r30, 0x3d	; 61
    c05c:	fe b7       	in	r31, 0x3e	; 62
    c05e:	3c 96       	adiw	r30, 0x0c	; 12
    c060:	0f b6       	in	r0, 0x3f	; 63
    c062:	f8 94       	cli
    c064:	fe bf       	out	0x3e, r31	; 62
    c066:	0f be       	out	0x3f, r0	; 63
    c068:	ed bf       	out	0x3d, r30	; 61
    c06a:	80 2f       	mov	r24, r16
    c06c:	61 e0       	ldi	r22, 0x01	; 1
    c06e:	a6 01       	movw	r20, r12
    c070:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
    c074:	08 94       	sec
    c076:	e1 1c       	adc	r14, r1
    c078:	f1 1c       	adc	r15, r1
    c07a:	0f 5f       	subi	r16, 0xFF	; 255
    c07c:	1f 4f       	sbci	r17, 0xFF	; 255
		  eeprom_read_block((void*) &PPumpId, (const void*) &DefPumpMap,8);
          stMenuPumpID=mpDisplayPumpId;
	      break;
	 case mpDisplayPumpId:
	      lcd_clear();		  
		  for (iLoop=0;iLoop<4;iLoop++){
    c07e:	f4 e1       	ldi	r31, 0x14	; 20
    c080:	ef 16       	cp	r14, r31
    c082:	f2 e0       	ldi	r31, 0x02	; 2
    c084:	ff 06       	cpc	r15, r31
    c086:	21 f6       	brne	.-120    	; 0xc010 <FSettingPumpID+0xc0>
			  sprintf_P(lcdteks,PSTR("%d.P%.2d | %d.P%.2d"),(iLoop+1),PPumpId[iLoop],(iLoop+5),PPumpId[iLoop+4]);
			  lcd_print((iLoop+1),1,lcdteks);
          }
          lcd_printf(3,15,PSTR("*)Back"));
    c088:	83 e0       	ldi	r24, 0x03	; 3
    c08a:	6f e0       	ldi	r22, 0x0F	; 15
    c08c:	44 e2       	ldi	r20, 0x24	; 36
    c08e:	5e e0       	ldi	r21, 0x0E	; 14
    c090:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
	      lcd_printf(4,15,PSTR("#)Save"));
    c094:	84 e0       	ldi	r24, 0x04	; 4
    c096:	6f e0       	ldi	r22, 0x0F	; 15
    c098:	4d e1       	ldi	r20, 0x1D	; 29
    c09a:	5e e0       	ldi	r21, 0x0E	; 14
    c09c:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
          stMenuPumpID=mpSelectInput;
    c0a0:	82 e0       	ldi	r24, 0x02	; 2
    c0a2:	c0 c1       	rjmp	.+896    	; 0xc424 <FSettingPumpID+0x4d4>
	      break;
     case mpSelectInput:
	      KeyPressed=_key_scan(1);
    c0a4:	81 e0       	ldi	r24, 0x01	; 1
    c0a6:	0e 94 f6 a5 	call	0x14bec	; 0x14bec <_key_scan>
    c0aa:	98 2e       	mov	r9, r24
	      KeyChar=_key_btn(KeyPressed);
    c0ac:	0e 94 57 a5 	call	0x14aae	; 0x14aae <_key_btn>
    c0b0:	98 2f       	mov	r25, r24
          if ((KeyChar>='1') && (KeyChar<='8')){
    c0b2:	81 53       	subi	r24, 0x31	; 49
    c0b4:	88 30       	cpi	r24, 0x08	; 8
    c0b6:	08 f0       	brcs	.+2      	; 0xc0ba <FSettingPumpID+0x16a>
    c0b8:	85 c0       	rjmp	.+266    	; 0xc1c4 <FSettingPumpID+0x274>
		      //eeprom_read_block((void*) &PPumpId, (const void*) &DefPumpMap,8);
			  switch(IFType){
    c0ba:	80 91 00 01 	lds	r24, 0x0100
    c0be:	81 30       	cpi	r24, 0x01	; 1
    c0c0:	19 f0       	breq	.+6      	; 0xc0c8 <FSettingPumpID+0x178>
    c0c2:	82 30       	cpi	r24, 0x02	; 2
    c0c4:	a1 f5       	brne	.+104    	; 0xc12e <FSettingPumpID+0x1de>
    c0c6:	17 c0       	rjmp	.+46     	; 0xc0f6 <FSettingPumpID+0x1a6>
			  case IT_SLAVE:
			       if (IsShift==False)IncValue(&PPumpId[KeyChar-'1'],0,99);//PPumpId[KeyChar-'1']=((PPumpId[KeyChar-'1']+1)%100);
    c0c8:	80 91 19 02 	lds	r24, 0x0219
    c0cc:	88 23       	and	r24, r24
    c0ce:	41 f4       	brne	.+16     	; 0xc0e0 <FSettingPumpID+0x190>
    c0d0:	e9 2f       	mov	r30, r25
    c0d2:	f0 e0       	ldi	r31, 0x00	; 0
    c0d4:	e1 52       	subi	r30, 0x21	; 33
    c0d6:	fe 4f       	sbci	r31, 0xFE	; 254
		}
	}
}

void IncValue(char *Value,char MinValue,char MaxValue){
     if ((*Value)<MaxValue){
    c0d8:	80 81       	ld	r24, Z
    c0da:	83 36       	cpi	r24, 0x63	; 99
    c0dc:	c8 f4       	brcc	.+50     	; 0xc110 <FSettingPumpID+0x1c0>
    c0de:	16 c0       	rjmp	.+44     	; 0xc10c <FSettingPumpID+0x1bc>
		      //eeprom_read_block((void*) &PPumpId, (const void*) &DefPumpMap,8);
			  switch(IFType){
			  case IT_SLAVE:
			       if (IsShift==False)IncValue(&PPumpId[KeyChar-'1'],0,99);//PPumpId[KeyChar-'1']=((PPumpId[KeyChar-'1']+1)%100);
				   else
				   if (IsShift==True)DecValue(&PPumpId[KeyChar-'1'],0,99);//PPumpId[KeyChar-'1']=100-(100-((PPumpId[KeyChar-'1']+1)%100));
    c0e0:	81 30       	cpi	r24, 0x01	; 1
    c0e2:	29 f5       	brne	.+74     	; 0xc12e <FSettingPumpID+0x1de>
    c0e4:	e9 2f       	mov	r30, r25
    c0e6:	f0 e0       	ldi	r31, 0x00	; 0
    c0e8:	e1 52       	subi	r30, 0x21	; 33
    c0ea:	fe 4f       	sbci	r31, 0xFE	; 254
	     (*Value)++;
	 }else *Value=MinValue;
}

void DecValue(char *Value,char MinValue,char MaxValue){
     if ((*Value)>MinValue){
    c0ec:	80 81       	ld	r24, Z
    c0ee:	88 23       	and	r24, r24
    c0f0:	d1 f4       	brne	.+52     	; 0xc126 <FSettingPumpID+0x1d6>
	     (*Value)--;
	 }else *Value=MaxValue;
    c0f2:	83 e6       	ldi	r24, 0x63	; 99
    c0f4:	1b c0       	rjmp	.+54     	; 0xc12c <FSettingPumpID+0x1dc>
			       if (IsShift==False)IncValue(&PPumpId[KeyChar-'1'],0,99);//PPumpId[KeyChar-'1']=((PPumpId[KeyChar-'1']+1)%100);
				   else
				   if (IsShift==True)DecValue(&PPumpId[KeyChar-'1'],0,99);//PPumpId[KeyChar-'1']=100-(100-((PPumpId[KeyChar-'1']+1)%100));
			       break;
              case IT_STANDALONE:
			       if (IsShift==False)IncValue(&PPumpId[KeyChar-'1'],0,16);//PPumpId[KeyChar-'1']=((PPumpId[KeyChar-'1']+1)%16);
    c0f6:	80 91 19 02 	lds	r24, 0x0219
    c0fa:	88 23       	and	r24, r24
    c0fc:	59 f4       	brne	.+22     	; 0xc114 <FSettingPumpID+0x1c4>
    c0fe:	e9 2f       	mov	r30, r25
    c100:	f0 e0       	ldi	r31, 0x00	; 0
    c102:	e1 52       	subi	r30, 0x21	; 33
    c104:	fe 4f       	sbci	r31, 0xFE	; 254
		}
	}
}

void IncValue(char *Value,char MinValue,char MaxValue){
     if ((*Value)<MaxValue){
    c106:	80 81       	ld	r24, Z
    c108:	80 31       	cpi	r24, 0x10	; 16
    c10a:	10 f4       	brcc	.+4      	; 0xc110 <FSettingPumpID+0x1c0>
	     (*Value)++;
    c10c:	8f 5f       	subi	r24, 0xFF	; 255
    c10e:	0e c0       	rjmp	.+28     	; 0xc12c <FSettingPumpID+0x1dc>
	 }else *Value=MinValue;
    c110:	10 82       	st	Z, r1
    c112:	0d c0       	rjmp	.+26     	; 0xc12e <FSettingPumpID+0x1de>
				   if (IsShift==True)DecValue(&PPumpId[KeyChar-'1'],0,99);//PPumpId[KeyChar-'1']=100-(100-((PPumpId[KeyChar-'1']+1)%100));
			       break;
              case IT_STANDALONE:
			       if (IsShift==False)IncValue(&PPumpId[KeyChar-'1'],0,16);//PPumpId[KeyChar-'1']=((PPumpId[KeyChar-'1']+1)%16);
				   else
				   if (IsShift==True)DecValue(&PPumpId[KeyChar-'1'],0,16);//PPumpId[KeyChar-'1']=17-(17-((PPumpId[KeyChar-'1']+1)%17));
    c114:	81 30       	cpi	r24, 0x01	; 1
    c116:	59 f4       	brne	.+22     	; 0xc12e <FSettingPumpID+0x1de>
    c118:	e9 2f       	mov	r30, r25
    c11a:	f0 e0       	ldi	r31, 0x00	; 0
    c11c:	e1 52       	subi	r30, 0x21	; 33
    c11e:	fe 4f       	sbci	r31, 0xFE	; 254
	     (*Value)++;
	 }else *Value=MinValue;
}

void DecValue(char *Value,char MinValue,char MaxValue){
     if ((*Value)>MinValue){
    c120:	80 81       	ld	r24, Z
    c122:	88 23       	and	r24, r24
    c124:	11 f0       	breq	.+4      	; 0xc12a <FSettingPumpID+0x1da>
	     (*Value)--;
    c126:	81 50       	subi	r24, 0x01	; 1
    c128:	01 c0       	rjmp	.+2      	; 0xc12c <FSettingPumpID+0x1dc>
	 }else *Value=MaxValue;
    c12a:	80 e1       	ldi	r24, 0x10	; 16
    c12c:	80 83       	st	Z, r24
    c12e:	60 e1       	ldi	r22, 0x10	; 16
    c130:	e6 2e       	mov	r14, r22
    c132:	62 e0       	ldi	r22, 0x02	; 2
    c134:	f6 2e       	mov	r15, r22
    c136:	01 e0       	ldi	r16, 0x01	; 1
    c138:	10 e0       	ldi	r17, 0x00	; 0
				   if (IsShift==True)DecValue(&PPumpId[KeyChar-'1'],0,16);//PPumpId[KeyChar-'1']=17-(17-((PPumpId[KeyChar-'1']+1)%17));
			       break;			  
			  }
			  //Redraw
			  for (iLoop=0;iLoop<4;iLoop++){
				  sprintf_P(lcdteks,PSTR("%d.P%.2d | %d.P%.2d"),(iLoop+1),PPumpId[iLoop],(iLoop+5),PPumpId[iLoop+4]);
    c13a:	6e 01       	movw	r12, r28
    c13c:	08 94       	sec
    c13e:	c1 1c       	adc	r12, r1
    c140:	d1 1c       	adc	r13, r1
    c142:	59 e0       	ldi	r21, 0x09	; 9
    c144:	a5 2e       	mov	r10, r21
    c146:	5e e0       	ldi	r21, 0x0E	; 14
    c148:	b5 2e       	mov	r11, r21
    c14a:	8d b7       	in	r24, 0x3d	; 61
    c14c:	9e b7       	in	r25, 0x3e	; 62
    c14e:	0c 97       	sbiw	r24, 0x0c	; 12
    c150:	0f b6       	in	r0, 0x3f	; 63
    c152:	f8 94       	cli
    c154:	9e bf       	out	0x3e, r25	; 62
    c156:	0f be       	out	0x3f, r0	; 63
    c158:	8d bf       	out	0x3d, r24	; 61
    c15a:	ed b7       	in	r30, 0x3d	; 61
    c15c:	fe b7       	in	r31, 0x3e	; 62
    c15e:	31 96       	adiw	r30, 0x01	; 1
    c160:	ad b7       	in	r26, 0x3d	; 61
    c162:	be b7       	in	r27, 0x3e	; 62
    c164:	12 96       	adiw	r26, 0x02	; 2
    c166:	dc 92       	st	X, r13
    c168:	ce 92       	st	-X, r12
    c16a:	11 97       	sbiw	r26, 0x01	; 1
    c16c:	b3 82       	std	Z+3, r11	; 0x03
    c16e:	a2 82       	std	Z+2, r10	; 0x02
    c170:	15 83       	std	Z+5, r17	; 0x05
    c172:	04 83       	std	Z+4, r16	; 0x04
    c174:	d7 01       	movw	r26, r14
    c176:	8c 91       	ld	r24, X
    c178:	86 83       	std	Z+6, r24	; 0x06
    c17a:	17 82       	std	Z+7, r1	; 0x07
    c17c:	0c 5f       	subi	r16, 0xFC	; 252
    c17e:	1f 4f       	sbci	r17, 0xFF	; 255
    c180:	11 87       	std	Z+9, r17	; 0x09
    c182:	00 87       	std	Z+8, r16	; 0x08
    c184:	04 50       	subi	r16, 0x04	; 4
    c186:	10 40       	sbci	r17, 0x00	; 0
    c188:	14 96       	adiw	r26, 0x04	; 4
    c18a:	8c 91       	ld	r24, X
    c18c:	82 87       	std	Z+10, r24	; 0x0a
    c18e:	13 86       	std	Z+11, r1	; 0x0b
    c190:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
				  lcd_print((iLoop+1),1,lcdteks);
    c194:	ed b7       	in	r30, 0x3d	; 61
    c196:	fe b7       	in	r31, 0x3e	; 62
    c198:	3c 96       	adiw	r30, 0x0c	; 12
    c19a:	0f b6       	in	r0, 0x3f	; 63
    c19c:	f8 94       	cli
    c19e:	fe bf       	out	0x3e, r31	; 62
    c1a0:	0f be       	out	0x3f, r0	; 63
    c1a2:	ed bf       	out	0x3d, r30	; 61
    c1a4:	80 2f       	mov	r24, r16
    c1a6:	61 e0       	ldi	r22, 0x01	; 1
    c1a8:	a6 01       	movw	r20, r12
    c1aa:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
    c1ae:	08 94       	sec
    c1b0:	e1 1c       	adc	r14, r1
    c1b2:	f1 1c       	adc	r15, r1
    c1b4:	0f 5f       	subi	r16, 0xFF	; 255
    c1b6:	1f 4f       	sbci	r17, 0xFF	; 255
				   else
				   if (IsShift==True)DecValue(&PPumpId[KeyChar-'1'],0,16);//PPumpId[KeyChar-'1']=17-(17-((PPumpId[KeyChar-'1']+1)%17));
			       break;			  
			  }
			  //Redraw
			  for (iLoop=0;iLoop<4;iLoop++){
    c1b8:	f4 e1       	ldi	r31, 0x14	; 20
    c1ba:	ef 16       	cp	r14, r31
    c1bc:	f2 e0       	ldi	r31, 0x02	; 2
    c1be:	ff 06       	cpc	r15, r31
    c1c0:	21 f6       	brne	.-120    	; 0xc14a <FSettingPumpID+0x1fa>
    c1c2:	2b c0       	rjmp	.+86     	; 0xc21a <FSettingPumpID+0x2ca>
				  sprintf_P(lcdteks,PSTR("%d.P%.2d | %d.P%.2d"),(iLoop+1),PPumpId[iLoop],(iLoop+5),PPumpId[iLoop+4]);
				  lcd_print((iLoop+1),1,lcdteks);
	          }
		  }else if (KeyChar=='#'){
    c1c4:	93 32       	cpi	r25, 0x23	; 35
    c1c6:	21 f5       	brne	.+72     	; 0xc210 <FSettingPumpID+0x2c0>
    c1c8:	40 e0       	ldi	r20, 0x00	; 0
    c1ca:	20 e0       	ldi	r18, 0x00	; 0
    c1cc:	30 e0       	ldi	r19, 0x00	; 0
    c1ce:	52 2f       	mov	r21, r18
		      //Evaluate same PumpID
			  PumpCount=0;
			  for (i=0;i<8;i++){
			       CheckPump=PPumpId[i];
    c1d0:	f9 01       	movw	r30, r18
    c1d2:	e0 5f       	subi	r30, 0xF0	; 240
    c1d4:	fd 4f       	sbci	r31, 0xFD	; 253
    c1d6:	e0 81       	ld	r30, Z
				   if (CheckPump>0){
    c1d8:	ee 23       	and	r30, r30
    c1da:	69 f0       	breq	.+26     	; 0xc1f6 <FSettingPumpID+0x2a6>
    c1dc:	a0 e1       	ldi	r26, 0x10	; 16
    c1de:	b2 e0       	ldi	r27, 0x02	; 2
    c1e0:	90 e0       	ldi	r25, 0x00	; 0
				      for(j=0;j<8;j++){					      
					      if ((i!=j)&&(CheckPump==PPumpId[j]))
    c1e2:	59 17       	cp	r21, r25
    c1e4:	21 f0       	breq	.+8      	; 0xc1ee <FSettingPumpID+0x29e>
    c1e6:	8c 91       	ld	r24, X
    c1e8:	e8 17       	cp	r30, r24
    c1ea:	09 f4       	brne	.+2      	; 0xc1ee <FSettingPumpID+0x29e>
						       PumpCount++;
    c1ec:	4f 5f       	subi	r20, 0xFF	; 255
		      //Evaluate same PumpID
			  PumpCount=0;
			  for (i=0;i<8;i++){
			       CheckPump=PPumpId[i];
				   if (CheckPump>0){
				      for(j=0;j<8;j++){					      
    c1ee:	9f 5f       	subi	r25, 0xFF	; 255
    c1f0:	11 96       	adiw	r26, 0x01	; 1
    c1f2:	98 30       	cpi	r25, 0x08	; 8
    c1f4:	b1 f7       	brne	.-20     	; 0xc1e2 <FSettingPumpID+0x292>
    c1f6:	2f 5f       	subi	r18, 0xFF	; 255
    c1f8:	3f 4f       	sbci	r19, 0xFF	; 255
				  lcd_print((iLoop+1),1,lcdteks);
	          }
		  }else if (KeyChar=='#'){
		      //Evaluate same PumpID
			  PumpCount=0;
			  for (i=0;i<8;i++){
    c1fa:	28 30       	cpi	r18, 0x08	; 8
    c1fc:	31 05       	cpc	r19, r1
    c1fe:	39 f7       	brne	.-50     	; 0xc1ce <FSettingPumpID+0x27e>
    c200:	40 93 0e 02 	sts	0x020E, r20
					      if ((i!=j)&&(CheckPump==PPumpId[j]))
						       PumpCount++;
					  }
				    }				     
				  }			       			  			  
			  if (PumpCount>0) stMenuPumpID=mpSaveFailed;
    c204:	44 23       	and	r20, r20
    c206:	11 f0       	breq	.+4      	; 0xc20c <FSettingPumpID+0x2bc>
    c208:	83 e0       	ldi	r24, 0x03	; 3
    c20a:	05 c0       	rjmp	.+10     	; 0xc216 <FSettingPumpID+0x2c6>
			  else stMenuPumpID=mpSavingPumpId;
    c20c:	85 e0       	ldi	r24, 0x05	; 5
    c20e:	03 c0       	rjmp	.+6      	; 0xc216 <FSettingPumpID+0x2c6>
		  }	
		  else if (KeyChar=='*'){
    c210:	9a 32       	cpi	r25, 0x2A	; 42
    c212:	19 f4       	brne	.+6      	; 0xc21a <FSettingPumpID+0x2ca>
		      stMenuPumpID=mpExitPumpId;
    c214:	8a e0       	ldi	r24, 0x0A	; 10
    c216:	80 93 1a 02 	sts	0x021A, r24
		  }
		  if (KeyPressed==_KEY_SHIFT){
    c21a:	8b e7       	ldi	r24, 0x7B	; 123
    c21c:	98 16       	cp	r9, r24
    c21e:	09 f0       	breq	.+2      	; 0xc222 <FSettingPumpID+0x2d2>
    c220:	16 c1       	rjmp	.+556    	; 0xc44e <FSettingPumpID+0x4fe>
		      if (IsShift==False)IsShift=True;
    c222:	80 91 19 02 	lds	r24, 0x0219
    c226:	88 23       	and	r24, r24
    c228:	21 f4       	brne	.+8      	; 0xc232 <FSettingPumpID+0x2e2>
    c22a:	81 e0       	ldi	r24, 0x01	; 1
    c22c:	80 93 19 02 	sts	0x0219, r24
    c230:	0e c1       	rjmp	.+540    	; 0xc44e <FSettingPumpID+0x4fe>
			  else
			  if (IsShift==True)IsShift=False;
    c232:	81 30       	cpi	r24, 0x01	; 1
    c234:	09 f0       	breq	.+2      	; 0xc238 <FSettingPumpID+0x2e8>
    c236:	0b c1       	rjmp	.+534    	; 0xc44e <FSettingPumpID+0x4fe>
    c238:	10 92 19 02 	sts	0x0219, r1
    c23c:	08 c1       	rjmp	.+528    	; 0xc44e <FSettingPumpID+0x4fe>
		  }
	      break;
     case mpSaveFailed:
	      lcd_clear();
    c23e:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
		  lcd_printf(1,1,PSTR("      Warning!      "));
    c242:	81 e0       	ldi	r24, 0x01	; 1
    c244:	61 e0       	ldi	r22, 0x01	; 1
    c246:	44 ef       	ldi	r20, 0xF4	; 244
    c248:	5d e0       	ldi	r21, 0x0D	; 13
    c24a:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  lcd_printf(2,1,PSTR("  Duplicate PumpID  "));
    c24e:	82 e0       	ldi	r24, 0x02	; 2
    c250:	61 e0       	ldi	r22, 0x01	; 1
    c252:	4f ed       	ldi	r20, 0xDF	; 223
    c254:	5d e0       	ldi	r21, 0x0D	; 13
    c256:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  lcd_printf(3,1,PSTR("    Not Allowed     "));		  
    c25a:	83 e0       	ldi	r24, 0x03	; 3
    c25c:	61 e0       	ldi	r22, 0x01	; 1
    c25e:	4a ec       	ldi	r20, 0xCA	; 202
    c260:	5d e0       	ldi	r21, 0x0D	; 13
    c262:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    c266:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    c268:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    c26a:	82 e0       	ldi	r24, 0x02	; 2
    c26c:	80 93 bc 01 	sts	0x01BC, r24
	      lcd_clear();
		  lcd_printf(1,1,PSTR("      Warning!      "));
		  lcd_printf(2,1,PSTR("  Duplicate PumpID  "));
		  lcd_printf(3,1,PSTR("    Not Allowed     "));		  
		  system_beep(2);
	      TimDisplay=0;
    c270:	10 92 92 01 	sts	0x0192, r1
	      stMenuPumpID=mpDisplayFailed;
    c274:	84 e0       	ldi	r24, 0x04	; 4
    c276:	d6 c0       	rjmp	.+428    	; 0xc424 <FSettingPumpID+0x4d4>
          break;	 
     case mpDisplayFailed:
	      if (TimDisplay>6) stMenuPumpID=mpDisplayPumpId;
    c278:	80 91 92 01 	lds	r24, 0x0192
    c27c:	87 30       	cpi	r24, 0x07	; 7
    c27e:	08 f4       	brcc	.+2      	; 0xc282 <FSettingPumpID+0x332>
    c280:	e6 c0       	rjmp	.+460    	; 0xc44e <FSettingPumpID+0x4fe>
    c282:	81 e0       	ldi	r24, 0x01	; 1
    c284:	cf c0       	rjmp	.+414    	; 0xc424 <FSettingPumpID+0x4d4>
	      break;
     case mpSavingPumpId:
	      eeprom_write_block((const void*) &PPumpId, (void*) &DefPumpMap, 8);
    c286:	80 e1       	ldi	r24, 0x10	; 16
    c288:	92 e0       	ldi	r25, 0x02	; 2
    c28a:	65 e4       	ldi	r22, 0x45	; 69
    c28c:	70 e0       	ldi	r23, 0x00	; 0
    c28e:	48 e0       	ldi	r20, 0x08	; 8
    c290:	50 e0       	ldi	r21, 0x00	; 0
    c292:	0e 94 d1 ac 	call	0x159a2	; 0x159a2 <__eewr_block_m128>
		  if (IFType==IT_STANDALONE){
    c296:	80 91 00 01 	lds	r24, 0x0100
    c29a:	82 30       	cpi	r24, 0x02	; 2
    c29c:	d9 f4       	brne	.+54     	; 0xc2d4 <FSettingPumpID+0x384>
		      //SendConfig to Slave
			  lcd_clear();
    c29e:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
              lcd_printf(1,1,PSTR("-PumpID-"));
    c2a2:	81 e0       	ldi	r24, 0x01	; 1
    c2a4:	61 e0       	ldi	r22, 0x01	; 1
    c2a6:	41 ec       	ldi	r20, 0xC1	; 193
    c2a8:	5d e0       	ldi	r21, 0x0D	; 13
    c2aa:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
              lcd_printf(2,1,PSTR("Saving.."));
    c2ae:	82 e0       	ldi	r24, 0x02	; 2
    c2b0:	61 e0       	ldi	r22, 0x01	; 1
    c2b2:	48 eb       	ldi	r20, 0xB8	; 184
    c2b4:	5d e0       	ldi	r21, 0x0D	; 13
    c2b6:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
			  Idx=0;
    c2ba:	10 92 18 02 	sts	0x0218, r1
			  PumpCount=0;
    c2be:	10 92 0e 02 	sts	0x020E, r1
              eeprom_read_block((void*) &PPumpId, (const void*) &DefPumpMap,8);
    c2c2:	80 e1       	ldi	r24, 0x10	; 16
    c2c4:	92 e0       	ldi	r25, 0x02	; 2
    c2c6:	65 e4       	ldi	r22, 0x45	; 69
    c2c8:	70 e0       	ldi	r23, 0x00	; 0
    c2ca:	48 e0       	ldi	r20, 0x08	; 8
    c2cc:	50 e0       	ldi	r21, 0x00	; 0
    c2ce:	0e 94 b9 ac 	call	0x15972	; 0x15972 <__eerd_block_m128>
    c2d2:	a7 c0       	rjmp	.+334    	; 0xc422 <FSettingPumpID+0x4d2>
              stMenuPumpID=mpSendConfigToSlave;
		  }else if (IFType==IT_SLAVE){
    c2d4:	81 30       	cpi	r24, 0x01	; 1
    c2d6:	09 f0       	breq	.+2      	; 0xc2da <FSettingPumpID+0x38a>
    c2d8:	ba c0       	rjmp	.+372    	; 0xc44e <FSettingPumpID+0x4fe>
    c2da:	ab c0       	rjmp	.+342    	; 0xc432 <FSettingPumpID+0x4e2>
		      //SendConfig to Slave              
              stMenuPumpID=mpExitPumpId;
		  }
	      break;
     case mpSendConfigToSlave:
	      IsStandaloneAcknoledge=False;
    c2dc:	10 92 82 01 	sts	0x0182, r1
	      if (PPumpId[Idx]!=0){
    c2e0:	90 91 18 02 	lds	r25, 0x0218
    c2e4:	29 2f       	mov	r18, r25
    c2e6:	30 e0       	ldi	r19, 0x00	; 0
    c2e8:	f9 01       	movw	r30, r18
    c2ea:	e0 5f       	subi	r30, 0xF0	; 240
    c2ec:	fd 4f       	sbci	r31, 0xFD	; 253
    c2ee:	60 81       	ld	r22, Z
    c2f0:	66 23       	and	r22, r22
    c2f2:	81 f0       	breq	.+32     	; 0xc314 <FSettingPumpID+0x3c4>
		      PumpCount++;
    c2f4:	80 91 0e 02 	lds	r24, 0x020E
    c2f8:	8f 5f       	subi	r24, 0xFF	; 255
    c2fa:	80 93 0e 02 	sts	0x020E, r24
		      MsgPumpId=((Idx<<4)|(0x0F&PPumpId[Idx]));//[Idx][PumpId]
    c2fe:	6f 70       	andi	r22, 0x0F	; 15
    c300:	44 e0       	ldi	r20, 0x04	; 4
    c302:	22 0f       	add	r18, r18
    c304:	33 1f       	adc	r19, r19
    c306:	4a 95       	dec	r20
    c308:	e1 f7       	brne	.-8      	; 0xc302 <FSettingPumpID+0x3b2>
    c30a:	62 2b       	or	r22, r18
    c30c:	60 93 0f 02 	sts	0x020F, r22
	         //SendPoolingCommand(SC_SET_PUMPID,MsgPumpId);
			  SendSlaveCommand(SC_SET_PUMPID,MsgPumpId);
    c310:	8d e1       	ldi	r24, 0x1D	; 29
    c312:	02 c0       	rjmp	.+4      	; 0xc318 <FSettingPumpID+0x3c8>
		  }else SendSlaveCommand(SC_CLEAR_PUMPID,Idx);//SendPoolingCommand(SC_CLEAR_PUMPID,Idx);
    c314:	8e e1       	ldi	r24, 0x1E	; 30
    c316:	69 2f       	mov	r22, r25
    c318:	0e 94 91 5f 	call	0xbf22	; 0xbf22 <SendSlaveCommand>
		  sprintf_P(lcdteks,PSTR("Id[%d]=%.2d  "),Idx+1,PPumpId[Idx]);
    c31c:	e0 91 18 02 	lds	r30, 0x0218
    c320:	f0 e0       	ldi	r31, 0x00	; 0
    c322:	ad b7       	in	r26, 0x3d	; 61
    c324:	be b7       	in	r27, 0x3e	; 62
    c326:	18 97       	sbiw	r26, 0x08	; 8
    c328:	0f b6       	in	r0, 0x3f	; 63
    c32a:	f8 94       	cli
    c32c:	be bf       	out	0x3e, r27	; 62
    c32e:	0f be       	out	0x3f, r0	; 63
    c330:	ad bf       	out	0x3d, r26	; 61
    c332:	2d b7       	in	r18, 0x3d	; 61
    c334:	3e b7       	in	r19, 0x3e	; 62
    c336:	2f 5f       	subi	r18, 0xFF	; 255
    c338:	3f 4f       	sbci	r19, 0xFF	; 255
    c33a:	8e 01       	movw	r16, r28
    c33c:	0f 5f       	subi	r16, 0xFF	; 255
    c33e:	1f 4f       	sbci	r17, 0xFF	; 255
    c340:	12 96       	adiw	r26, 0x02	; 2
    c342:	1c 93       	st	X, r17
    c344:	0e 93       	st	-X, r16
    c346:	11 97       	sbiw	r26, 0x01	; 1
    c348:	8a ea       	ldi	r24, 0xAA	; 170
    c34a:	9d e0       	ldi	r25, 0x0D	; 13
    c34c:	d9 01       	movw	r26, r18
    c34e:	13 96       	adiw	r26, 0x03	; 3
    c350:	9c 93       	st	X, r25
    c352:	8e 93       	st	-X, r24
    c354:	12 97       	sbiw	r26, 0x02	; 2
    c356:	31 96       	adiw	r30, 0x01	; 1
    c358:	15 96       	adiw	r26, 0x05	; 5
    c35a:	fc 93       	st	X, r31
    c35c:	ee 93       	st	-X, r30
    c35e:	14 97       	sbiw	r26, 0x04	; 4
    c360:	31 97       	sbiw	r30, 0x01	; 1
    c362:	e0 5f       	subi	r30, 0xF0	; 240
    c364:	fd 4f       	sbci	r31, 0xFD	; 253
    c366:	80 81       	ld	r24, Z
    c368:	16 96       	adiw	r26, 0x06	; 6
    c36a:	8c 93       	st	X, r24
    c36c:	16 97       	sbiw	r26, 0x06	; 6
    c36e:	17 96       	adiw	r26, 0x07	; 7
    c370:	1c 92       	st	X, r1
    c372:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
		  lcd_print(3,1,lcdteks);
    c376:	ed b7       	in	r30, 0x3d	; 61
    c378:	fe b7       	in	r31, 0x3e	; 62
    c37a:	38 96       	adiw	r30, 0x08	; 8
    c37c:	0f b6       	in	r0, 0x3f	; 63
    c37e:	f8 94       	cli
    c380:	fe bf       	out	0x3e, r31	; 62
    c382:	0f be       	out	0x3f, r0	; 63
    c384:	ed bf       	out	0x3d, r30	; 61
    c386:	83 e0       	ldi	r24, 0x03	; 3
    c388:	61 e0       	ldi	r22, 0x01	; 1
    c38a:	a8 01       	movw	r20, r16
    c38c:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
          stMenuPumpID=mpWaitSlaveReply;
    c390:	88 e0       	ldi	r24, 0x08	; 8
    c392:	48 c0       	rjmp	.+144    	; 0xc424 <FSettingPumpID+0x4d4>
	      break;
     case mpWaitSlaveReply:
	      KeyPressed=_key_scan(1);
    c394:	81 e0       	ldi	r24, 0x01	; 1
    c396:	0e 94 f6 a5 	call	0x14bec	; 0x14bec <_key_scan>
	      KeyChar=_key_btn(KeyPressed);
    c39a:	0e 94 57 a5 	call	0x14aae	; 0x14aae <_key_btn>
		  if (KeyChar=='*'){
    c39e:	8a 32       	cpi	r24, 0x2A	; 42
    c3a0:	79 f4       	brne	.+30     	; 0xc3c0 <FSettingPumpID+0x470>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    c3a2:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    c3a4:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    c3a6:	82 e0       	ldi	r24, 0x02	; 2
    c3a8:	80 93 bc 01 	sts	0x01BC, r24
     case mpWaitSlaveReply:
	      KeyPressed=_key_scan(1);
	      KeyChar=_key_btn(KeyPressed);
		  if (KeyChar=='*'){
		      system_beep(2);
		      lcd_printf(2,1,PSTR("Cancel     "));
    c3ac:	61 e0       	ldi	r22, 0x01	; 1
    c3ae:	4e e9       	ldi	r20, 0x9E	; 158
    c3b0:	5d e0       	ldi	r21, 0x0D	; 13
    c3b2:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
			  TimDisplay=0;
    c3b6:	10 92 92 01 	sts	0x0192, r1
		      stMenuPumpID=mpDelayExitPumpId;
    c3ba:	89 e0       	ldi	r24, 0x09	; 9
    c3bc:	80 93 1a 02 	sts	0x021A, r24
			  }
          if (IsStandaloneAcknoledge==True){
    c3c0:	10 91 82 01 	lds	r17, 0x0182
    c3c4:	11 30       	cpi	r17, 0x01	; 1
    c3c6:	09 f0       	breq	.+2      	; 0xc3ca <FSettingPumpID+0x47a>
    c3c8:	42 c0       	rjmp	.+132    	; 0xc44e <FSettingPumpID+0x4fe>
		      Idx++;
    c3ca:	80 91 18 02 	lds	r24, 0x0218
    c3ce:	8f 5f       	subi	r24, 0xFF	; 255
    c3d0:	80 93 18 02 	sts	0x0218, r24
		      if (Idx<8){//Finish, Send MaxPumpCount
    c3d4:	88 30       	cpi	r24, 0x08	; 8
    c3d6:	b8 f4       	brcc	.+46     	; 0xc406 <FSettingPumpID+0x4b6>
			      eeprom_write_byte(&DefPoolingPumpMax,PumpCount);
    c3d8:	84 e4       	ldi	r24, 0x44	; 68
    c3da:	91 e0       	ldi	r25, 0x01	; 1
    c3dc:	60 91 0e 02 	lds	r22, 0x020E
    c3e0:	0e 94 db ac 	call	0x159b6	; 0x159b6 <__eewr_byte_m128>
				  PumpCountMax=eeprom_read_byte(&DefPoolingPumpMax);
    c3e4:	84 e4       	ldi	r24, 0x44	; 68
    c3e6:	91 e0       	ldi	r25, 0x01	; 1
    c3e8:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
    c3ec:	80 93 5c 01 	sts	0x015C, r24
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
    c3f0:	95 e1       	ldi	r25, 0x15	; 21
    c3f2:	90 93 a7 05 	sts	0x05A7, r25
	 PoolMsg=plMsg;
    c3f6:	80 93 d3 0b 	sts	0x0BD3, r24
     IsControlPooling=True;
    c3fa:	10 93 84 01 	sts	0x0184, r17
		      Idx++;
		      if (Idx<8){//Finish, Send MaxPumpCount
			      eeprom_write_byte(&DefPoolingPumpMax,PumpCount);
				  PumpCountMax=eeprom_read_byte(&DefPoolingPumpMax);
                  SendPoolingCommand(SC_SET_POOLING_MAX_PUMP,PumpCountMax);
			      TimDisplay=0;		 
    c3fe:	10 92 92 01 	sts	0x0192, r1
				  stMenuPumpID=mpDelaySaveConfig;
    c402:	87 e0       	ldi	r24, 0x07	; 7
    c404:	0f c0       	rjmp	.+30     	; 0xc424 <FSettingPumpID+0x4d4>
			  }else{lcd_printf(2,1,PSTR("Completed"));
    c406:	82 e0       	ldi	r24, 0x02	; 2
    c408:	61 e0       	ldi	r22, 0x01	; 1
    c40a:	44 e9       	ldi	r20, 0x94	; 148
    c40c:	5d e0       	ldi	r21, 0x0D	; 13
    c40e:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
					TimDisplay=0;
    c412:	10 92 92 01 	sts	0x0192, r1
				    stMenuPumpID=mpDelayExitPumpId;
    c416:	89 e0       	ldi	r24, 0x09	; 9
    c418:	05 c0       	rjmp	.+10     	; 0xc424 <FSettingPumpID+0x4d4>
				   }
			  }		  
	      break;
     case mpDelaySaveConfig:
	      if (TimDisplay>2)stMenuPumpID=mpSendConfigToSlave;
    c41a:	80 91 92 01 	lds	r24, 0x0192
    c41e:	83 30       	cpi	r24, 0x03	; 3
    c420:	b0 f0       	brcs	.+44     	; 0xc44e <FSettingPumpID+0x4fe>
    c422:	86 e0       	ldi	r24, 0x06	; 6
    c424:	80 93 1a 02 	sts	0x021A, r24
    c428:	12 c0       	rjmp	.+36     	; 0xc44e <FSettingPumpID+0x4fe>
	      break;
     case mpDelayExitPumpId:
	      if (TimDisplay>8)stMenuPumpID=mpExitPumpId;
    c42a:	80 91 92 01 	lds	r24, 0x0192
    c42e:	89 30       	cpi	r24, 0x09	; 9
    c430:	70 f0       	brcs	.+28     	; 0xc44e <FSettingPumpID+0x4fe>
    c432:	8a e0       	ldi	r24, 0x0A	; 10
    c434:	f7 cf       	rjmp	.-18     	; 0xc424 <FSettingPumpID+0x4d4>
	      break;
     case mpExitPumpId:
	      if (IFType==IT_STANDALONE)
    c436:	80 91 00 01 	lds	r24, 0x0100
    c43a:	82 30       	cpi	r24, 0x02	; 2
    c43c:	21 f4       	brne	.+8      	; 0xc446 <FSettingPumpID+0x4f6>
		      SendSlaveCommand(SC_START_POOL_SEQUENCE,0);
    c43e:	80 e2       	ldi	r24, 0x20	; 32
    c440:	60 e0       	ldi	r22, 0x00	; 0
    c442:	0e 94 91 5f 	call	0xbf22	; 0xbf22 <SendSlaveCommand>
	      Result=MENU_DONE;
          stMenuPumpID=mpInitPumpId;
    c446:	10 92 1a 02 	sts	0x021A, r1
    c44a:	81 e0       	ldi	r24, 0x01	; 1
    c44c:	01 c0       	rjmp	.+2      	; 0xc450 <FSettingPumpID+0x500>
    c44e:	80 e0       	ldi	r24, 0x00	; 0
	      break;
	 }
   return Result;
}
    c450:	64 96       	adiw	r28, 0x14	; 20
    c452:	0f b6       	in	r0, 0x3f	; 63
    c454:	f8 94       	cli
    c456:	de bf       	out	0x3e, r29	; 62
    c458:	0f be       	out	0x3f, r0	; 63
    c45a:	cd bf       	out	0x3d, r28	; 61
    c45c:	cf 91       	pop	r28
    c45e:	df 91       	pop	r29
    c460:	1f 91       	pop	r17
    c462:	0f 91       	pop	r16
    c464:	ff 90       	pop	r15
    c466:	ef 90       	pop	r14
    c468:	df 90       	pop	r13
    c46a:	cf 90       	pop	r12
    c46c:	bf 90       	pop	r11
    c46e:	af 90       	pop	r10
    c470:	9f 90       	pop	r9
    c472:	08 95       	ret

0000c474 <_menu_pumpid>:

void _menu_pumpid(void){
	while(1){
	   if (FSettingPumpID()==MENU_DONE){
    c474:	0e 94 a8 5f 	call	0xbf50	; 0xbf50 <FSettingPumpID>
    c478:	81 30       	cpi	r24, 0x01	; 1
    c47a:	e1 f7       	brne	.-8      	; 0xc474 <_menu_pumpid>
	       break;
	   }	   
	}
}
    c47c:	08 95       	ret

0000c47e <_menu_pump>:
        lcd_printf(4,15,PSTR("*)Exit"));
}



void _menu_pump(void){
    c47e:	cf 93       	push	r28
    c480:	df 93       	push	r29
    c482:	c4 ec       	ldi	r28, 0xC4	; 196
    c484:	d9 e0       	ldi	r29, 0x09	; 9
	char __key;

	while(1){
		lcd_clear();_delay_ms(10);
    c486:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
    c48a:	ce 01       	movw	r24, r28
    c48c:	01 97       	sbiw	r24, 0x01	; 1
    c48e:	f1 f7       	brne	.-4      	; 0xc48c <_menu_pump+0xe>
		lcd_printf(1, 1, PSTR("1)ID"));
    c490:	81 e0       	ldi	r24, 0x01	; 1
    c492:	61 e0       	ldi	r22, 0x01	; 1
    c494:	48 ec       	ldi	r20, 0xC8	; 200
    c496:	5e e0       	ldi	r21, 0x0E	; 14
    c498:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		lcd_printf(2, 1, PSTR("2)Product"));
    c49c:	82 e0       	ldi	r24, 0x02	; 2
    c49e:	61 e0       	ldi	r22, 0x01	; 1
    c4a0:	4e eb       	ldi	r20, 0xBE	; 190
    c4a2:	5e e0       	ldi	r21, 0x0E	; 14
    c4a4:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		lcd_printf(4, 1, PSTR("*)Exit"));
    c4a8:	84 e0       	ldi	r24, 0x04	; 4
    c4aa:	61 e0       	ldi	r22, 0x01	; 1
    c4ac:	47 eb       	ldi	r20, 0xB7	; 183
    c4ae:	5e e0       	ldi	r21, 0x0E	; 14
    c4b0:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>

		while(1){
			__key = _key_scan(1);
    c4b4:	81 e0       	ldi	r24, 0x01	; 1
    c4b6:	0e 94 f6 a5 	call	0x14bec	; 0x14bec <_key_scan>
			if(__key == _KEY_CANCEL)
    c4ba:	87 3e       	cpi	r24, 0xE7	; 231
    c4bc:	51 f0       	breq	.+20     	; 0xc4d2 <_menu_pump+0x54>
				return;
			if(__key == _KEY_1){
    c4be:	8e 3e       	cpi	r24, 0xEE	; 238
    c4c0:	19 f4       	brne	.+6      	; 0xc4c8 <_menu_pump+0x4a>
				_menu_pumpid();
    c4c2:	0e 94 3a 62 	call	0xc474	; 0xc474 <_menu_pumpid>
    c4c6:	df cf       	rjmp	.-66     	; 0xc486 <_menu_pump+0x8>
				break;
			}
			if(__key == _KEY_2){
    c4c8:	8e 3d       	cpi	r24, 0xDE	; 222
    c4ca:	a1 f7       	brne	.-24     	; 0xc4b4 <_menu_pump+0x36>
				_menu_pumpprod();
    c4cc:	0e 94 c9 4f 	call	0x9f92	; 0x9f92 <_menu_pumpprod>
    c4d0:	da cf       	rjmp	.-76     	; 0xc486 <_menu_pump+0x8>
				break;
			}
		}
	}
}
    c4d2:	df 91       	pop	r29
    c4d4:	cf 91       	pop	r28
    c4d6:	08 95       	ret

0000c4d8 <FMenuPumpType>:





void FMenuPumpType(){
    c4d8:	cf 92       	push	r12
    c4da:	df 92       	push	r13
    c4dc:	ef 92       	push	r14
    c4de:	ff 92       	push	r15
    c4e0:	0f 93       	push	r16
    c4e2:	1f 93       	push	r17
    c4e4:	df 93       	push	r29
    c4e6:	cf 93       	push	r28
    c4e8:	cd b7       	in	r28, 0x3d	; 61
    c4ea:	de b7       	in	r29, 0x3e	; 62
    c4ec:	a8 97       	sbiw	r28, 0x28	; 40
    c4ee:	0f b6       	in	r0, 0x3f	; 63
    c4f0:	f8 94       	cli
    c4f2:	de bf       	out	0x3e, r29	; 62
    c4f4:	0f be       	out	0x3f, r0	; 63
    c4f6:	cd bf       	out	0x3d, r28	; 61
     stPumpType=ptInitMenu;
	 IsRunPumpType=True;
	 while(IsRunPumpType==True){
		  switch(stPumpType){
		  case ptInitMenu:
		       lcd_clear();
    c4f8:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
			   lcd_printf(1,1,PSTR("-Dispenser Brand-"));
    c4fc:	81 e0       	ldi	r24, 0x01	; 1
    c4fe:	61 e0       	ldi	r22, 0x01	; 1
    c500:	45 ea       	ldi	r20, 0xA5	; 165
    c502:	5e e0       	ldi	r21, 0x0E	; 14
    c504:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
			   IdxType=eeprom_read_byte(&DefDispenserBrand);
    c508:	87 e3       	ldi	r24, 0x37	; 55
    c50a:	91 e0       	ldi	r25, 0x01	; 1
    c50c:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
			   //Brand Selection
			   if (IdxType>=3) IdxType=0;
    c510:	83 30       	cpi	r24, 0x03	; 3
    c512:	08 f0       	brcs	.+2      	; 0xc516 <FMenuPumpType+0x3e>
    c514:	80 e0       	ldi	r24, 0x00	; 0
               strcpy_P(DispenserBrandName,(PGM_P)pgm_read_word(&(DefListDispenserName[IdxType])));
    c516:	08 2f       	mov	r16, r24
    c518:	10 e0       	ldi	r17, 0x00	; 0
    c51a:	f8 01       	movw	r30, r16
    c51c:	ee 0f       	add	r30, r30
    c51e:	ff 1f       	adc	r31, r31
    c520:	eb 5f       	subi	r30, 0xFB	; 251
    c522:	fc 4f       	sbci	r31, 0xFC	; 252
    c524:	65 91       	lpm	r22, Z+
    c526:	74 91       	lpm	r23, Z+
    c528:	f5 e1       	ldi	r31, 0x15	; 21
    c52a:	cf 2e       	mov	r12, r31
    c52c:	d1 2c       	mov	r13, r1
    c52e:	cc 0e       	add	r12, r28
    c530:	dd 1e       	adc	r13, r29
    c532:	c6 01       	movw	r24, r12
    c534:	0e 94 6a aa 	call	0x154d4	; 0x154d4 <strcpy_P>
			   sprintf_P(lcdteks,PSTR("%d.%s"),IdxType+1,DispenserBrandName);
    c538:	8d b7       	in	r24, 0x3d	; 61
    c53a:	9e b7       	in	r25, 0x3e	; 62
    c53c:	08 97       	sbiw	r24, 0x08	; 8
    c53e:	0f b6       	in	r0, 0x3f	; 63
    c540:	f8 94       	cli
    c542:	9e bf       	out	0x3e, r25	; 62
    c544:	0f be       	out	0x3f, r0	; 63
    c546:	8d bf       	out	0x3d, r24	; 61
    c548:	ed b7       	in	r30, 0x3d	; 61
    c54a:	fe b7       	in	r31, 0x3e	; 62
    c54c:	31 96       	adiw	r30, 0x01	; 1
    c54e:	7e 01       	movw	r14, r28
    c550:	08 94       	sec
    c552:	e1 1c       	adc	r14, r1
    c554:	f1 1c       	adc	r15, r1
    c556:	ad b7       	in	r26, 0x3d	; 61
    c558:	be b7       	in	r27, 0x3e	; 62
    c55a:	12 96       	adiw	r26, 0x02	; 2
    c55c:	fc 92       	st	X, r15
    c55e:	ee 92       	st	-X, r14
    c560:	11 97       	sbiw	r26, 0x01	; 1
    c562:	8f e9       	ldi	r24, 0x9F	; 159
    c564:	9e e0       	ldi	r25, 0x0E	; 14
    c566:	93 83       	std	Z+3, r25	; 0x03
    c568:	82 83       	std	Z+2, r24	; 0x02
    c56a:	0f 5f       	subi	r16, 0xFF	; 255
    c56c:	1f 4f       	sbci	r17, 0xFF	; 255
    c56e:	15 83       	std	Z+5, r17	; 0x05
    c570:	04 83       	std	Z+4, r16	; 0x04
    c572:	d7 82       	std	Z+7, r13	; 0x07
    c574:	c6 82       	std	Z+6, r12	; 0x06
    c576:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
			   lcd_print(2,1,lcdteks);
    c57a:	8d b7       	in	r24, 0x3d	; 61
    c57c:	9e b7       	in	r25, 0x3e	; 62
    c57e:	08 96       	adiw	r24, 0x08	; 8
    c580:	0f b6       	in	r0, 0x3f	; 63
    c582:	f8 94       	cli
    c584:	9e bf       	out	0x3e, r25	; 62
    c586:	0f be       	out	0x3f, r0	; 63
    c588:	8d bf       	out	0x3d, r24	; 61
    c58a:	82 e0       	ldi	r24, 0x02	; 2
    c58c:	61 e0       	ldi	r22, 0x01	; 1
    c58e:	a7 01       	movw	r20, r14
    c590:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
			   lcd_printf(4,1,PSTR("[*]Exit  [#]Change "));
    c594:	84 e0       	ldi	r24, 0x04	; 4
    c596:	61 e0       	ldi	r22, 0x01	; 1
    c598:	4b e8       	ldi	r20, 0x8B	; 139
    c59a:	5e e0       	ldi	r21, 0x0E	; 14
    c59c:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
			   if (IFType==IT_STANDALONE)
    c5a0:	80 91 00 01 	lds	r24, 0x0100
    c5a4:	82 30       	cpi	r24, 0x02	; 2
    c5a6:	21 f4       	brne	.+8      	; 0xc5b0 <FMenuPumpType+0xd8>
			       SendSlaveCommand(SC_STOP_POOL_SEQUENCE,0);
    c5a8:	8f e1       	ldi	r24, 0x1F	; 31
    c5aa:	60 e0       	ldi	r22, 0x00	; 0
    c5ac:	0e 94 91 5f 	call	0xbf22	; 0xbf22 <SendSlaveCommand>
			   stPumpType=ptSelectBrand;
	 		   break;
          case ptSelectBrand:
		       KeyPressed = _key_scan(1);
    c5b0:	81 e0       	ldi	r24, 0x01	; 1
    c5b2:	0e 94 f6 a5 	call	0x14bec	; 0x14bec <_key_scan>
		       KeyChar    = _key_btn(KeyPressed);
    c5b6:	0e 94 57 a5 	call	0x14aae	; 0x14aae <_key_btn>

			   if (KeyChar=='#'){
    c5ba:	83 32       	cpi	r24, 0x23	; 35
    c5bc:	11 f5       	brne	.+68     	; 0xc602 <FMenuPumpType+0x12a>
			       DispenserBrand=eeprom_read_byte(&DefDispenserBrand);
    c5be:	87 e3       	ldi	r24, 0x37	; 55
    c5c0:	91 e0       	ldi	r25, 0x01	; 1
    c5c2:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
				   if (DispenserBrand<ST_WAYNE_DART)
    c5c6:	82 30       	cpi	r24, 0x02	; 2
    c5c8:	20 f4       	brcc	.+8      	; 0xc5d2 <FMenuPumpType+0xfa>
				        DispenserBrand++;
    c5ca:	8f 5f       	subi	r24, 0xFF	; 255
    c5cc:	80 93 5e 01 	sts	0x015E, r24
    c5d0:	02 c0       	rjmp	.+4      	; 0xc5d6 <FMenuPumpType+0xfe>
				   else DispenserBrand=ST_NONE;
    c5d2:	10 92 5e 01 	sts	0x015E, r1
                   //Apply DecimalSetting  
				   SetDispenser(DispenserBrand);
    c5d6:	80 91 5e 01 	lds	r24, 0x015E
    c5da:	0e 94 9a 1f 	call	0x3f34	; 0x3f34 <SetDispenser>
			       eeprom_write_byte(&DefDispenserBrand,DispenserBrand);
    c5de:	87 e3       	ldi	r24, 0x37	; 55
    c5e0:	91 e0       	ldi	r25, 0x01	; 1
    c5e2:	60 91 5e 01 	lds	r22, 0x015E
    c5e6:	0e 94 db ac 	call	0x159b6	; 0x159b6 <__eewr_byte_m128>
				   //SendPoolingCommand(SC_SET_PUMP_TYPE,eeprom_read_byte(&DefDispenserBrand));
				   SendSlaveCommand(SC_SET_PUMP_TYPE,eeprom_read_byte(&DefDispenserBrand));
    c5ea:	87 e3       	ldi	r24, 0x37	; 55
    c5ec:	91 e0       	ldi	r25, 0x01	; 1
    c5ee:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
    c5f2:	68 2f       	mov	r22, r24
    c5f4:	8c e1       	ldi	r24, 0x1C	; 28
    c5f6:	0e 94 91 5f 	call	0xbf22	; 0xbf22 <SendSlaveCommand>
				   IsSetPumpType=True;//False;
    c5fa:	81 e0       	ldi	r24, 0x01	; 1
    c5fc:	80 93 23 01 	sts	0x0123, r24
    c600:	0b c0       	rjmp	.+22     	; 0xc618 <FMenuPumpType+0x140>
			       stPumpType=ptUpdated;			   
			   }else
			   if (KeyChar=='*'){
    c602:	8a 32       	cpi	r24, 0x2A	; 42
    c604:	a9 f6       	brne	.-86     	; 0xc5b0 <FMenuPumpType+0xd8>
			       IsRunPumpType=False;
				   if (IFType==IT_STANDALONE)SendSlaveCommand(SC_START_POOL_SEQUENCE,0);
    c606:	80 91 00 01 	lds	r24, 0x0100
    c60a:	82 30       	cpi	r24, 0x02	; 2
    c60c:	51 f4       	brne	.+20     	; 0xc622 <FMenuPumpType+0x14a>
    c60e:	80 e2       	ldi	r24, 0x20	; 32
    c610:	60 e0       	ldi	r22, 0x00	; 0
    c612:	0e 94 91 5f 	call	0xbf22	; 0xbf22 <SendSlaveCommand>
    c616:	05 c0       	rjmp	.+10     	; 0xc622 <FMenuPumpType+0x14a>
			   }
		       break;
          case ptUpdated:
		       if (IsSetPumpType==True){
    c618:	80 91 23 01 	lds	r24, 0x0123
    c61c:	81 30       	cpi	r24, 0x01	; 1
    c61e:	e1 f7       	brne	.-8      	; 0xc618 <FMenuPumpType+0x140>
    c620:	6b cf       	rjmp	.-298    	; 0xc4f8 <FMenuPumpType+0x20>
			       stPumpType=ptInitMenu;
			   }
		       break;		         
	      }
	 }     
}
    c622:	a8 96       	adiw	r28, 0x28	; 40
    c624:	0f b6       	in	r0, 0x3f	; 63
    c626:	f8 94       	cli
    c628:	de bf       	out	0x3e, r29	; 62
    c62a:	0f be       	out	0x3f, r0	; 63
    c62c:	cd bf       	out	0x3d, r28	; 61
    c62e:	cf 91       	pop	r28
    c630:	df 91       	pop	r29
    c632:	1f 91       	pop	r17
    c634:	0f 91       	pop	r16
    c636:	ff 90       	pop	r15
    c638:	ef 90       	pop	r14
    c63a:	df 90       	pop	r13
    c63c:	cf 90       	pop	r12
    c63e:	08 95       	ret

0000c640 <FSettingPump>:
	      break;
	 
	 }
*/
	 char __key,Result;
		lcd_clear();_delay_ms(10);
    c640:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
    c644:	84 ec       	ldi	r24, 0xC4	; 196
    c646:	99 e0       	ldi	r25, 0x09	; 9
    c648:	01 97       	sbiw	r24, 0x01	; 1
    c64a:	f1 f7       	brne	.-4      	; 0xc648 <FSettingPump+0x8>
		lcd_printf(1,1, PSTR("1)ID     "));
    c64c:	81 e0       	ldi	r24, 0x01	; 1
    c64e:	61 e0       	ldi	r22, 0x01	; 1
    c650:	44 e2       	ldi	r20, 0x24	; 36
    c652:	53 e1       	ldi	r21, 0x13	; 19
    c654:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		lcd_printf(2,1, PSTR("2)Product"));
    c658:	82 e0       	ldi	r24, 0x02	; 2
    c65a:	61 e0       	ldi	r22, 0x01	; 1
    c65c:	4a e1       	ldi	r20, 0x1A	; 26
    c65e:	53 e1       	ldi	r21, 0x13	; 19
    c660:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		if (IFType==IT_STANDALONE){
    c664:	80 91 00 01 	lds	r24, 0x0100
    c668:	82 30       	cpi	r24, 0x02	; 2
    c66a:	61 f4       	brne	.+24     	; 0xc684 <FSettingPump+0x44>
		    lcd_printf(3,1, PSTR("3)Label  "));
    c66c:	83 e0       	ldi	r24, 0x03	; 3
    c66e:	61 e0       	ldi	r22, 0x01	; 1
    c670:	40 e1       	ldi	r20, 0x10	; 16
    c672:	53 e1       	ldi	r21, 0x13	; 19
    c674:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		    lcd_printf(4,1, PSTR("4)Brand  *)Exit"));
    c678:	84 e0       	ldi	r24, 0x04	; 4
    c67a:	61 e0       	ldi	r22, 0x01	; 1
    c67c:	40 e0       	ldi	r20, 0x00	; 0
    c67e:	53 e1       	ldi	r21, 0x13	; 19
    c680:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		}

		while(1){
			__key = _key_scan(1);
    c684:	81 e0       	ldi	r24, 0x01	; 1
    c686:	0e 94 f6 a5 	call	0x14bec	; 0x14bec <_key_scan>
			if(__key == _KEY_CANCEL)
    c68a:	87 3e       	cpi	r24, 0xE7	; 231
    c68c:	d9 f0       	breq	.+54     	; 0xc6c4 <FSettingPump+0x84>
				break;
			if(__key == _KEY_1){
    c68e:	8e 3e       	cpi	r24, 0xEE	; 238
    c690:	19 f4       	brne	.+6      	; 0xc698 <FSettingPump+0x58>
				_menu_pumpid();
    c692:	0e 94 3a 62 	call	0xc474	; 0xc474 <_menu_pumpid>
    c696:	16 c0       	rjmp	.+44     	; 0xc6c4 <FSettingPump+0x84>
				break;
			}
			if(__key == _KEY_2){
    c698:	8e 3d       	cpi	r24, 0xDE	; 222
    c69a:	19 f4       	brne	.+6      	; 0xc6a2 <FSettingPump+0x62>
				_menu_pumpprod();
    c69c:	0e 94 c9 4f 	call	0x9f92	; 0x9f92 <_menu_pumpprod>
    c6a0:	11 c0       	rjmp	.+34     	; 0xc6c4 <FSettingPump+0x84>
				break;
			}

			if((__key == _KEY_3)&&(IFType==IT_STANDALONE)){
    c6a2:	8e 3b       	cpi	r24, 0xBE	; 190
    c6a4:	39 f4       	brne	.+14     	; 0xc6b4 <FSettingPump+0x74>
    c6a6:	80 91 00 01 	lds	r24, 0x0100
    c6aa:	82 30       	cpi	r24, 0x02	; 2
    c6ac:	59 f7       	brne	.-42     	; 0xc684 <FSettingPump+0x44>
			    FMenuPumpLabel();
    c6ae:	0e 94 dc 4f 	call	0x9fb8	; 0x9fb8 <FMenuPumpLabel>
    c6b2:	08 c0       	rjmp	.+16     	; 0xc6c4 <FSettingPump+0x84>
				break;
			}
			if((__key == _KEY_4)&&(IFType==IT_STANDALONE)){
    c6b4:	8d 3e       	cpi	r24, 0xED	; 237
    c6b6:	31 f7       	brne	.-52     	; 0xc684 <FSettingPump+0x44>
    c6b8:	80 91 00 01 	lds	r24, 0x0100
    c6bc:	82 30       	cpi	r24, 0x02	; 2
    c6be:	11 f7       	brne	.-60     	; 0xc684 <FSettingPump+0x44>
			    FMenuPumpType();
    c6c0:	0e 94 6c 62 	call	0xc4d8	; 0xc4d8 <FMenuPumpType>

		}

	Result=MENU_DONE;
	return Result;
}
    c6c4:	81 e0       	ldi	r24, 0x01	; 1
    c6c6:	08 95       	ret

0000c6c8 <StoreStandaloneTransData>:
     SendSlaveCommand(SC_TOTALIZER_ACK,iPumpID);
	 UpdateStandaloneStatus((iPumpID&0x0F),PS_TOTALIZER);	 
}
         
			                                         //      STX     MSGID  PumpID              6        8        8
void StoreStandaloneTransData(char *strRawTransData){//  [0x50,0x05]  01      01      1       004500   00000200  00000012 [0x06,0x60] = 24
    c6c8:	2f 92       	push	r2
    c6ca:	3f 92       	push	r3
    c6cc:	4f 92       	push	r4
    c6ce:	5f 92       	push	r5
    c6d0:	6f 92       	push	r6
    c6d2:	7f 92       	push	r7
    c6d4:	8f 92       	push	r8
    c6d6:	9f 92       	push	r9
    c6d8:	af 92       	push	r10
    c6da:	bf 92       	push	r11
    c6dc:	cf 92       	push	r12
    c6de:	df 92       	push	r13
    c6e0:	ef 92       	push	r14
    c6e2:	ff 92       	push	r15
    c6e4:	0f 93       	push	r16
    c6e6:	1f 93       	push	r17
    c6e8:	df 93       	push	r29
    c6ea:	cf 93       	push	r28
    c6ec:	cd b7       	in	r28, 0x3d	; 61
    c6ee:	de b7       	in	r29, 0x3e	; 62
    c6f0:	e1 97       	sbiw	r28, 0x31	; 49
    c6f2:	0f b6       	in	r0, 0x3f	; 63
    c6f4:	f8 94       	cli
    c6f6:	de bf       	out	0x3e, r29	; 62
    c6f8:	0f be       	out	0x3f, r0	; 63
    c6fa:	cd bf       	out	0x3d, r28	; 61
    c6fc:	7c 01       	movw	r14, r24
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    c6fe:	dc 01       	movw	r26, r24
    c700:	12 96       	adiw	r26, 0x02	; 2
    c702:	8c 91       	ld	r24, X
    c704:	12 97       	sbiw	r26, 0x02	; 2
    c706:	89 83       	std	Y+1, r24	; 0x01
    c708:	13 96       	adiw	r26, 0x03	; 3
    c70a:	8c 91       	ld	r24, X
    c70c:	8a 83       	std	Y+2, r24	; 0x02
	 }Dest[Length]=0;
    c70e:	1b 82       	std	Y+3, r1	; 0x03
	 char strSend[30];
	 char TransDigit;
	 char FIPAddr;
      
	 StrPosCopy(strRawTransData,strPumpID,2,2);
	 RemZeroLead(strPumpID);
    c710:	8e 01       	movw	r16, r28
    c712:	0f 5f       	subi	r16, 0xFF	; 255
    c714:	1f 4f       	sbci	r17, 0xFF	; 255
    c716:	c8 01       	movw	r24, r16
    c718:	0e 94 df 26 	call	0x4dbe	; 0x4dbe <RemZeroLead>
	 iPumpID=atoi(strPumpID); 
    c71c:	c8 01       	movw	r24, r16
    c71e:	0e 94 4c aa 	call	0x15498	; 0x15498 <atoi>
    c722:	38 2e       	mov	r3, r24
	 
	 FIPAddr=GetFIPAddr(iPumpID);
    c724:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <GetFIPAddr>
    c728:	d8 2e       	mov	r13, r24
	 if (FIPAddr>0){
    c72a:	88 23       	and	r24, r24
    c72c:	09 f4       	brne	.+2      	; 0xc730 <StoreStandaloneTransData+0x68>
    c72e:	16 c2       	rjmp	.+1068   	; 0xcb5c <StoreStandaloneTransData+0x494>
	    Dest[IdxSource+i]=Source[i];
	 }Dest[IdxSource+Length]=0;
}
char CharPosCopy(char *Source, unsigned int IdxSource){
     char Result;
     Result=Source[IdxSource];
    c730:	f7 01       	movw	r30, r14
    c732:	f4 81       	ldd	r31, Z+4	; 0x04
    c734:	f9 ab       	std	Y+49, r31	; 0x31

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    c736:	d7 01       	movw	r26, r14
    c738:	15 96       	adiw	r26, 0x05	; 5
    c73a:	2c 90       	ld	r2, X
    c73c:	84 e0       	ldi	r24, 0x04	; 4
    c73e:	88 2e       	mov	r8, r24
    c740:	91 2c       	mov	r9, r1
    c742:	8c 0e       	add	r8, r28
    c744:	9d 1e       	adc	r9, r29
    c746:	f4 01       	movw	r30, r8
    c748:	ce 01       	movw	r24, r28
    c74a:	0b 96       	adiw	r24, 0x0b	; 11
	     strMemory[i]=data;
    c74c:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    c74e:	e8 17       	cp	r30, r24
    c750:	f9 07       	cpc	r31, r25
    c752:	e1 f7       	brne	.-8      	; 0xc74c <StoreStandaloneTransData+0x84>
    c754:	0d e1       	ldi	r16, 0x1D	; 29
    c756:	60 2e       	mov	r6, r16
    c758:	71 2c       	mov	r7, r1
    c75a:	6c 0e       	add	r6, r28
    c75c:	7d 1e       	adc	r7, r29
    c75e:	93 01       	movw	r18, r6
	     strMemory[i]=data;
    c760:	ce 01       	movw	r24, r28
    c762:	87 96       	adiw	r24, 0x27	; 39
    c764:	f9 01       	movw	r30, r18
    c766:	11 92       	st	Z+, r1
    c768:	9f 01       	movw	r18, r30

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    c76a:	e8 17       	cp	r30, r24
    c76c:	f9 07       	cpc	r31, r25
    c76e:	d1 f7       	brne	.-12     	; 0xc764 <StoreStandaloneTransData+0x9c>
    c770:	2f 01       	movw	r4, r30
	     strMemory[i]=data;
    c772:	ce 01       	movw	r24, r28
    c774:	c1 96       	adiw	r24, 0x31	; 49
    c776:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    c778:	e8 17       	cp	r30, r24
    c77a:	f9 07       	cpc	r31, r25
    c77c:	e1 f7       	brne	.-8      	; 0xc776 <StoreStandaloneTransData+0xae>
    c77e:	a7 01       	movw	r20, r14
    c780:	d7 01       	movw	r26, r14
    c782:	f4 01       	movw	r30, r8
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    c784:	be 01       	movw	r22, r28
    c786:	66 5f       	subi	r22, 0xF6	; 246
    c788:	7f 4f       	sbci	r23, 0xFF	; 255
	    Dest[i]=Source[IdxSource+i];
    c78a:	16 96       	adiw	r26, 0x06	; 6
    c78c:	8c 91       	ld	r24, X
    c78e:	16 97       	sbiw	r26, 0x06	; 6
    c790:	81 93       	st	Z+, r24
    c792:	11 96       	adiw	r26, 0x01	; 1
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    c794:	e6 17       	cp	r30, r22
    c796:	f7 07       	cpc	r31, r23
    c798:	c1 f7       	brne	.-16     	; 0xc78a <StoreStandaloneTransData+0xc2>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    c79a:	1a 86       	std	Y+10, r1	; 0x0a
    c79c:	d7 01       	movw	r26, r14
    c79e:	f3 01       	movw	r30, r6
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    c7a0:	be 01       	movw	r22, r28
    c7a2:	6b 5d       	subi	r22, 0xDB	; 219
    c7a4:	7f 4f       	sbci	r23, 0xFF	; 255
	    Dest[i]=Source[IdxSource+i];
    c7a6:	1c 96       	adiw	r26, 0x0c	; 12
    c7a8:	8c 91       	ld	r24, X
    c7aa:	1c 97       	sbiw	r26, 0x0c	; 12
    c7ac:	81 93       	st	Z+, r24
    c7ae:	11 96       	adiw	r26, 0x01	; 1
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    c7b0:	e6 17       	cp	r30, r22
    c7b2:	f7 07       	cpc	r31, r23
    c7b4:	c1 f7       	brne	.-16     	; 0xc7a6 <StoreStandaloneTransData+0xde>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    c7b6:	1d a2       	std	Y+37, r1	; 0x25
    c7b8:	f9 01       	movw	r30, r18
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    c7ba:	be 01       	movw	r22, r28
    c7bc:	69 5d       	subi	r22, 0xD9	; 217
    c7be:	7f 4f       	sbci	r23, 0xFF	; 255
    c7c0:	9e 01       	movw	r18, r28
    c7c2:	21 5d       	subi	r18, 0xD1	; 209
    c7c4:	3f 4f       	sbci	r19, 0xFF	; 255
	    Dest[i]=Source[IdxSource+i];
    c7c6:	da 01       	movw	r26, r20
    c7c8:	54 96       	adiw	r26, 0x14	; 20
    c7ca:	8c 91       	ld	r24, X
    c7cc:	81 93       	st	Z+, r24
    c7ce:	4f 5f       	subi	r20, 0xFF	; 255
    c7d0:	5f 4f       	sbci	r21, 0xFF	; 255
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    c7d2:	e2 17       	cp	r30, r18
    c7d4:	f3 07       	cpc	r31, r19
    c7d6:	b9 f7       	brne	.-18     	; 0xc7c6 <StoreStandaloneTransData+0xfe>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    c7d8:	1f a6       	std	Y+47, r1	; 0x2f
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
    c7da:	f7 01       	movw	r30, r14
    c7dc:	84 8d       	ldd	r24, Z+28	; 0x1c
    c7de:	80 53       	subi	r24, 0x30	; 48
    c7e0:	8a 30       	cpi	r24, 0x0A	; 10
    c7e2:	98 f4       	brcc	.+38     	; 0xc80a <StoreStandaloneTransData+0x142>

		 TransDigit=Ord(CharPosCopy(strRawTransData,28));
		 //Normalize7Digit
		 //sprintf_P(strSend,PSTR("Digit: %d"),TransDigit);
		 //uart_print(1,1,strSend);
		 if  (TransDigit==8){
    c7e4:	88 30       	cpi	r24, 0x08	; 8
    c7e6:	89 f4       	brne	.+34     	; 0xc80a <StoreStandaloneTransData+0x142>
			  StrPosCopy(strPMoney,strPMoney,0,strlen(strPMoney)-1);	 
    c7e8:	fb 01       	movw	r30, r22
    c7ea:	01 90       	ld	r0, Z+
    c7ec:	00 20       	and	r0, r0
    c7ee:	e9 f7       	brne	.-6      	; 0xc7ea <StoreStandaloneTransData+0x122>
    c7f0:	e6 1b       	sub	r30, r22
    c7f2:	f7 0b       	sbc	r31, r23
    c7f4:	32 97       	sbiw	r30, 0x02	; 2
    c7f6:	80 e0       	ldi	r24, 0x00	; 0
    c7f8:	90 e0       	ldi	r25, 0x00	; 0
    c7fa:	01 c0       	rjmp	.+2      	; 0xc7fe <StoreStandaloneTransData+0x136>
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    c7fc:	01 96       	adiw	r24, 0x01	; 1
    c7fe:	8e 17       	cp	r24, r30
    c800:	9f 07       	cpc	r25, r31
    c802:	e0 f3       	brcs	.-8      	; 0xc7fc <StoreStandaloneTransData+0x134>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    c804:	ec 0f       	add	r30, r28
    c806:	fd 1f       	adc	r31, r29
    c808:	17 a2       	std	Z+39, r1	; 0x27
		 //sprintf_P(strSend,PSTR("Digit: %d"),TransDigit);
		 //uart_print(1,1,strSend);
		 if  (TransDigit==8){
			  StrPosCopy(strPMoney,strPMoney,0,strlen(strPMoney)-1);	 
		 }
		 RemZeroLead(strPPU);
    c80a:	14 e0       	ldi	r17, 0x04	; 4
    c80c:	e1 2e       	mov	r14, r17
    c80e:	f1 2c       	mov	r15, r1
    c810:	ec 0e       	add	r14, r28
    c812:	fd 1e       	adc	r15, r29
    c814:	c7 01       	movw	r24, r14
    c816:	0e 94 df 26 	call	0x4dbe	; 0x4dbe <RemZeroLead>
		 RemZeroLead(strPVolume);
    c81a:	bd e1       	ldi	r27, 0x1D	; 29
    c81c:	ab 2e       	mov	r10, r27
    c81e:	b1 2c       	mov	r11, r1
    c820:	ac 0e       	add	r10, r28
    c822:	bd 1e       	adc	r11, r29
    c824:	c5 01       	movw	r24, r10
    c826:	0e 94 df 26 	call	0x4dbe	; 0x4dbe <RemZeroLead>
		 RemZeroLead(strPMoney);
    c82a:	8e 01       	movw	r16, r28
    c82c:	09 5d       	subi	r16, 0xD9	; 217
    c82e:	1f 4f       	sbci	r17, 0xFF	; 255
    c830:	c8 01       	movw	r24, r16
    c832:	0e 94 df 26 	call	0x4dbe	; 0x4dbe <RemZeroLead>
		 //sprintf_P(strSend,PSTR("Money: %s"),strPMoney);
		 //uart_print(1,1,strSend);


		 //Void Detection
		 if (atoi(strPMoney)==0)TransactionStatus=TS_VOID;
    c836:	c8 01       	movw	r24, r16
    c838:	0e 94 4c aa 	call	0x15498	; 0x15498 <atoi>
    c83c:	89 2b       	or	r24, r25
    c83e:	09 f0       	breq	.+2      	; 0xc842 <StoreStandaloneTransData+0x17a>
    c840:	09 c1       	rjmp	.+530    	; 0xca54 <StoreStandaloneTransData+0x38c>
		 else TransactionStatus=TS_NEW;
		 
		 if (TransactionStatus==TS_VOID){//RejectData
			 UpdateStandaloneStatus((iPumpID&0x0F),PS_VOID);
    c842:	83 2d       	mov	r24, r3
    c844:	8f 70       	andi	r24, 0x0F	; 15
    c846:	63 e1       	ldi	r22, 0x13	; 19
    c848:	0e 94 2a 20 	call	0x4054	; 0x4054 <UpdateStandaloneStatus>
    c84c:	87 c1       	rjmp	.+782    	; 0xcb5c <StoreStandaloneTransData+0x494>
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    c84e:	f9 01       	movw	r30, r18
    c850:	81 91       	ld	r24, Z+
    c852:	9f 01       	movw	r18, r30
    c854:	fb 01       	movw	r30, r22
    c856:	81 93       	st	Z+, r24
    c858:	bf 01       	movw	r22, r30
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    c85a:	24 17       	cp	r18, r20
    c85c:	35 07       	cpc	r19, r21
    c85e:	b9 f7       	brne	.-18     	; 0xc84e <StoreStandaloneTransData+0x186>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    c860:	85 e3       	ldi	r24, 0x35	; 53
    c862:	90 e0       	ldi	r25, 0x00	; 0
    c864:	9c 01       	movw	r18, r24
    c866:	c2 9e       	mul	r12, r18
    c868:	c0 01       	movw	r24, r0
    c86a:	c3 9e       	mul	r12, r19
    c86c:	90 0d       	add	r25, r0
    c86e:	d2 9e       	mul	r13, r18
    c870:	90 0d       	add	r25, r0
    c872:	11 24       	eor	r1, r1
    c874:	fc 01       	movw	r30, r24
    c876:	e8 55       	subi	r30, 0x58	; 88
    c878:	fa 4f       	sbci	r31, 0xFA	; 250
    c87a:	ea 0f       	add	r30, r26
    c87c:	fb 1f       	adc	r31, r27
    c87e:	13 82       	std	Z+3, r1	; 0x03
			 sprintf_P(strTransTime,PSTR("%s"),strSystemTime);
			 sprintf_P(strShift,PSTR("%d"),eeprom_read_byte(&DefShift));
					 
			 //TransNum,Date,Time
			 StrPosCopy(strTranNo,RecPumpData[FIPAddr].strTransNum,0,strlen(strTranNo));
			 StrPosCopy(strTransDate,RecPumpData[FIPAddr].strTransDate,0,strlen(strTransDate));
    c880:	fe 01       	movw	r30, r28
    c882:	3b 96       	adiw	r30, 0x0b	; 11
    c884:	df 01       	movw	r26, r30
    c886:	0d 90       	ld	r0, X+
    c888:	00 20       	and	r0, r0
    c88a:	e9 f7       	brne	.-6      	; 0xc886 <StoreStandaloneTransData+0x1be>
    c88c:	11 97       	sbiw	r26, 0x01	; 1
    c88e:	ae 1b       	sub	r26, r30
    c890:	bf 0b       	sbc	r27, r31
    c892:	bf 01       	movw	r22, r30
    c894:	9c 01       	movw	r18, r24
    c896:	2e 54       	subi	r18, 0x4E	; 78
    c898:	3a 4f       	sbci	r19, 0xFA	; 250
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    c89a:	af 01       	movw	r20, r30
    c89c:	4a 0f       	add	r20, r26
    c89e:	5b 1f       	adc	r21, r27
    c8a0:	06 c0       	rjmp	.+12     	; 0xc8ae <StoreStandaloneTransData+0x1e6>
	    Dest[i]=Source[IdxSource+i];
    c8a2:	fb 01       	movw	r30, r22
    c8a4:	81 91       	ld	r24, Z+
    c8a6:	bf 01       	movw	r22, r30
    c8a8:	f9 01       	movw	r30, r18
    c8aa:	81 93       	st	Z+, r24
    c8ac:	9f 01       	movw	r18, r30
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    c8ae:	64 17       	cp	r22, r20
    c8b0:	75 07       	cpc	r23, r21
    c8b2:	b9 f7       	brne	.-18     	; 0xc8a2 <StoreStandaloneTransData+0x1da>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    c8b4:	85 e3       	ldi	r24, 0x35	; 53
    c8b6:	90 e0       	ldi	r25, 0x00	; 0
    c8b8:	9c 01       	movw	r18, r24
    c8ba:	c2 9e       	mul	r12, r18
    c8bc:	c0 01       	movw	r24, r0
    c8be:	c3 9e       	mul	r12, r19
    c8c0:	90 0d       	add	r25, r0
    c8c2:	d2 9e       	mul	r13, r18
    c8c4:	90 0d       	add	r25, r0
    c8c6:	11 24       	eor	r1, r1
    c8c8:	fc 01       	movw	r30, r24
    c8ca:	e8 55       	subi	r30, 0x58	; 88
    c8cc:	fa 4f       	sbci	r31, 0xFA	; 250
    c8ce:	ea 0f       	add	r30, r26
    c8d0:	fb 1f       	adc	r31, r27
    c8d2:	12 86       	std	Z+10, r1	; 0x0a
			 sprintf_P(strShift,PSTR("%d"),eeprom_read_byte(&DefShift));
					 
			 //TransNum,Date,Time
			 StrPosCopy(strTranNo,RecPumpData[FIPAddr].strTransNum,0,strlen(strTranNo));
			 StrPosCopy(strTransDate,RecPumpData[FIPAddr].strTransDate,0,strlen(strTransDate));
			 StrPosCopy(strTransTime,RecPumpData[FIPAddr].strTransTime,0,strlen(strTransTime));
    c8d4:	fe 01       	movw	r30, r28
    c8d6:	74 96       	adiw	r30, 0x14	; 20
    c8d8:	df 01       	movw	r26, r30
    c8da:	0d 90       	ld	r0, X+
    c8dc:	00 20       	and	r0, r0
    c8de:	e9 f7       	brne	.-6      	; 0xc8da <StoreStandaloneTransData+0x212>
    c8e0:	11 97       	sbiw	r26, 0x01	; 1
    c8e2:	ae 1b       	sub	r26, r30
    c8e4:	bf 0b       	sbc	r27, r31
    c8e6:	bf 01       	movw	r22, r30
    c8e8:	9c 01       	movw	r18, r24
    c8ea:	25 54       	subi	r18, 0x45	; 69
    c8ec:	3a 4f       	sbci	r19, 0xFA	; 250
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    c8ee:	af 01       	movw	r20, r30
    c8f0:	4a 0f       	add	r20, r26
    c8f2:	5b 1f       	adc	r21, r27
    c8f4:	06 c0       	rjmp	.+12     	; 0xc902 <StoreStandaloneTransData+0x23a>
	    Dest[i]=Source[IdxSource+i];
    c8f6:	fb 01       	movw	r30, r22
    c8f8:	81 91       	ld	r24, Z+
    c8fa:	bf 01       	movw	r22, r30
    c8fc:	f9 01       	movw	r30, r18
    c8fe:	81 93       	st	Z+, r24
    c900:	9f 01       	movw	r18, r30
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    c902:	64 17       	cp	r22, r20
    c904:	75 07       	cpc	r23, r21
    c906:	b9 f7       	brne	.-18     	; 0xc8f6 <StoreStandaloneTransData+0x22e>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    c908:	85 e3       	ldi	r24, 0x35	; 53
    c90a:	90 e0       	ldi	r25, 0x00	; 0
    c90c:	c8 9e       	mul	r12, r24
    c90e:	70 01       	movw	r14, r0
    c910:	c9 9e       	mul	r12, r25
    c912:	f0 0c       	add	r15, r0
    c914:	d8 9e       	mul	r13, r24
    c916:	f0 0c       	add	r15, r0
    c918:	11 24       	eor	r1, r1
    c91a:	87 01       	movw	r16, r14
    c91c:	08 55       	subi	r16, 0x58	; 88
    c91e:	1a 4f       	sbci	r17, 0xFA	; 250
    c920:	a0 0f       	add	r26, r16
    c922:	b1 1f       	adc	r27, r17
    c924:	53 96       	adiw	r26, 0x13	; 19
    c926:	1c 92       	st	X, r1
			 //TransNum,Date,Time
			 StrPosCopy(strTranNo,RecPumpData[FIPAddr].strTransNum,0,strlen(strTranNo));
			 StrPosCopy(strTransDate,RecPumpData[FIPAddr].strTransDate,0,strlen(strTransDate));
			 StrPosCopy(strTransTime,RecPumpData[FIPAddr].strTransTime,0,strlen(strTransTime));
			 //Grade Nozzle Shift
			 RecPumpData[FIPAddr].Grade=PGrade;
    c928:	f0 ed       	ldi	r31, 0xD0	; 208
    c92a:	2f 0e       	add	r2, r31
    c92c:	d8 01       	movw	r26, r16
    c92e:	2c 92       	st	X, r2
			 RecPumpData[FIPAddr].Nozzle=PNozzle;
    c930:	b9 a9       	ldd	r27, Y+49	; 0x31
    c932:	b0 53       	subi	r27, 0x30	; 48
    c934:	f8 01       	movw	r30, r16
    c936:	b1 83       	std	Z+1, r27	; 0x01
			 RecPumpData[FIPAddr].Shift=atoi(strShift);
    c938:	88 e6       	ldi	r24, 0x68	; 104
    c93a:	9c e0       	ldi	r25, 0x0C	; 12
    c93c:	0e 94 4c aa 	call	0x15498	; 0x15498 <atoi>
    c940:	d8 01       	movw	r26, r16
    c942:	12 96       	adiw	r26, 0x02	; 2
    c944:	8c 93       	st	X, r24
			 //Price Volume Money
			 StrPosCopy(strPPU,RecPumpData[FIPAddr].Price,0,strlen(strPPU));
    c946:	fe 01       	movw	r30, r28
    c948:	34 96       	adiw	r30, 0x04	; 4
    c94a:	df 01       	movw	r26, r30
    c94c:	0d 90       	ld	r0, X+
    c94e:	00 20       	and	r0, r0
    c950:	e9 f7       	brne	.-6      	; 0xc94c <StoreStandaloneTransData+0x284>
    c952:	11 97       	sbiw	r26, 0x01	; 1
    c954:	ae 1b       	sub	r26, r30
    c956:	bf 0b       	sbc	r27, r31
    c958:	97 01       	movw	r18, r14
    c95a:	2c 53       	subi	r18, 0x3C	; 60
    c95c:	3a 4f       	sbci	r19, 0xFA	; 250
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    c95e:	af 01       	movw	r20, r30
    c960:	4a 0f       	add	r20, r26
    c962:	5b 1f       	adc	r21, r27
    c964:	06 c0       	rjmp	.+12     	; 0xc972 <StoreStandaloneTransData+0x2aa>
	    Dest[i]=Source[IdxSource+i];
    c966:	f4 01       	movw	r30, r8
    c968:	81 91       	ld	r24, Z+
    c96a:	4f 01       	movw	r8, r30
    c96c:	f9 01       	movw	r30, r18
    c96e:	81 93       	st	Z+, r24
    c970:	9f 01       	movw	r18, r30
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    c972:	84 16       	cp	r8, r20
    c974:	95 06       	cpc	r9, r21
    c976:	b9 f7       	brne	.-18     	; 0xc966 <StoreStandaloneTransData+0x29e>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    c978:	85 e3       	ldi	r24, 0x35	; 53
    c97a:	90 e0       	ldi	r25, 0x00	; 0
    c97c:	9c 01       	movw	r18, r24
    c97e:	c2 9e       	mul	r12, r18
    c980:	c0 01       	movw	r24, r0
    c982:	c3 9e       	mul	r12, r19
    c984:	90 0d       	add	r25, r0
    c986:	d2 9e       	mul	r13, r18
    c988:	90 0d       	add	r25, r0
    c98a:	11 24       	eor	r1, r1
    c98c:	fc 01       	movw	r30, r24
    c98e:	e8 55       	subi	r30, 0x58	; 88
    c990:	fa 4f       	sbci	r31, 0xFA	; 250
    c992:	ea 0f       	add	r30, r26
    c994:	fb 1f       	adc	r31, r27
    c996:	14 8e       	std	Z+28, r1	; 0x1c
			 RecPumpData[FIPAddr].Grade=PGrade;
			 RecPumpData[FIPAddr].Nozzle=PNozzle;
			 RecPumpData[FIPAddr].Shift=atoi(strShift);
			 //Price Volume Money
			 StrPosCopy(strPPU,RecPumpData[FIPAddr].Price,0,strlen(strPPU));
			 StrPosCopy(strPVolume,RecPumpData[FIPAddr].Volume,0,strlen(strPVolume));
    c998:	fe 01       	movw	r30, r28
    c99a:	7d 96       	adiw	r30, 0x1d	; 29
    c99c:	df 01       	movw	r26, r30
    c99e:	0d 90       	ld	r0, X+
    c9a0:	00 20       	and	r0, r0
    c9a2:	e9 f7       	brne	.-6      	; 0xc99e <StoreStandaloneTransData+0x2d6>
    c9a4:	11 97       	sbiw	r26, 0x01	; 1
    c9a6:	ae 1b       	sub	r26, r30
    c9a8:	bf 0b       	sbc	r27, r31
    c9aa:	9c 01       	movw	r18, r24
    c9ac:	25 53       	subi	r18, 0x35	; 53
    c9ae:	3a 4f       	sbci	r19, 0xFA	; 250
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    c9b0:	af 01       	movw	r20, r30
    c9b2:	4a 0f       	add	r20, r26
    c9b4:	5b 1f       	adc	r21, r27
    c9b6:	06 c0       	rjmp	.+12     	; 0xc9c4 <StoreStandaloneTransData+0x2fc>
	    Dest[i]=Source[IdxSource+i];
    c9b8:	f3 01       	movw	r30, r6
    c9ba:	81 91       	ld	r24, Z+
    c9bc:	3f 01       	movw	r6, r30
    c9be:	f9 01       	movw	r30, r18
    c9c0:	81 93       	st	Z+, r24
    c9c2:	9f 01       	movw	r18, r30
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    c9c4:	64 16       	cp	r6, r20
    c9c6:	75 06       	cpc	r7, r21
    c9c8:	b9 f7       	brne	.-18     	; 0xc9b8 <StoreStandaloneTransData+0x2f0>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    c9ca:	85 e3       	ldi	r24, 0x35	; 53
    c9cc:	90 e0       	ldi	r25, 0x00	; 0
    c9ce:	9c 01       	movw	r18, r24
    c9d0:	c2 9e       	mul	r12, r18
    c9d2:	c0 01       	movw	r24, r0
    c9d4:	c3 9e       	mul	r12, r19
    c9d6:	90 0d       	add	r25, r0
    c9d8:	d2 9e       	mul	r13, r18
    c9da:	90 0d       	add	r25, r0
    c9dc:	11 24       	eor	r1, r1
    c9de:	fc 01       	movw	r30, r24
    c9e0:	e8 55       	subi	r30, 0x58	; 88
    c9e2:	fa 4f       	sbci	r31, 0xFA	; 250
    c9e4:	ea 0f       	add	r30, r26
    c9e6:	fb 1f       	adc	r31, r27
    c9e8:	13 a2       	std	Z+35, r1	; 0x23
			 RecPumpData[FIPAddr].Nozzle=PNozzle;
			 RecPumpData[FIPAddr].Shift=atoi(strShift);
			 //Price Volume Money
			 StrPosCopy(strPPU,RecPumpData[FIPAddr].Price,0,strlen(strPPU));
			 StrPosCopy(strPVolume,RecPumpData[FIPAddr].Volume,0,strlen(strPVolume));
			 StrPosCopy(strPMoney,RecPumpData[FIPAddr].Money,0,strlen(strPMoney));
    c9ea:	fe 01       	movw	r30, r28
    c9ec:	b7 96       	adiw	r30, 0x27	; 39
    c9ee:	df 01       	movw	r26, r30
    c9f0:	0d 90       	ld	r0, X+
    c9f2:	00 20       	and	r0, r0
    c9f4:	e9 f7       	brne	.-6      	; 0xc9f0 <StoreStandaloneTransData+0x328>
    c9f6:	11 97       	sbiw	r26, 0x01	; 1
    c9f8:	ae 1b       	sub	r26, r30
    c9fa:	bf 0b       	sbc	r27, r31
    c9fc:	9c 01       	movw	r18, r24
    c9fe:	2c 52       	subi	r18, 0x2C	; 44
    ca00:	3a 4f       	sbci	r19, 0xFA	; 250
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    ca02:	af 01       	movw	r20, r30
    ca04:	4a 0f       	add	r20, r26
    ca06:	5b 1f       	adc	r21, r27
    ca08:	06 c0       	rjmp	.+12     	; 0xca16 <StoreStandaloneTransData+0x34e>
	    Dest[i]=Source[IdxSource+i];
    ca0a:	f2 01       	movw	r30, r4
    ca0c:	81 91       	ld	r24, Z+
    ca0e:	2f 01       	movw	r4, r30
    ca10:	f9 01       	movw	r30, r18
    ca12:	81 93       	st	Z+, r24
    ca14:	9f 01       	movw	r18, r30
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    ca16:	44 16       	cp	r4, r20
    ca18:	55 06       	cpc	r5, r21
    ca1a:	b9 f7       	brne	.-18     	; 0xca0a <StoreStandaloneTransData+0x342>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    ca1c:	85 e3       	ldi	r24, 0x35	; 53
    ca1e:	90 e0       	ldi	r25, 0x00	; 0
    ca20:	c8 9e       	mul	r12, r24
    ca22:	f0 01       	movw	r30, r0
    ca24:	c9 9e       	mul	r12, r25
    ca26:	f0 0d       	add	r31, r0
    ca28:	d8 9e       	mul	r13, r24
    ca2a:	f0 0d       	add	r31, r0
    ca2c:	11 24       	eor	r1, r1
    ca2e:	e8 55       	subi	r30, 0x58	; 88
    ca30:	fa 4f       	sbci	r31, 0xFA	; 250
    ca32:	ea 0f       	add	r30, r26
    ca34:	fb 1f       	adc	r31, r27
    ca36:	14 a6       	std	Z+44, r1	; 0x2c
			 //Price Volume Money
			 StrPosCopy(strPPU,RecPumpData[FIPAddr].Price,0,strlen(strPPU));
			 StrPosCopy(strPVolume,RecPumpData[FIPAddr].Volume,0,strlen(strPVolume));
			 StrPosCopy(strPMoney,RecPumpData[FIPAddr].Money,0,strlen(strPMoney));

			 UpdateStandaloneStatus((iPumpID&0x0F),PS_PRINT_READY);
    ca38:	83 2d       	mov	r24, r3
    ca3a:	8f 70       	andi	r24, 0x0F	; 15
    ca3c:	60 e1       	ldi	r22, 0x10	; 16
    ca3e:	0e 94 2a 20 	call	0x4054	; 0x4054 <UpdateStandaloneStatus>
			 
			 SetIncomingTransStatus(iPumpID,TS_NEW);		 
    ca42:	83 2d       	mov	r24, r3
    ca44:	62 e0       	ldi	r22, 0x02	; 2
    ca46:	0e 94 b2 1a 	call	0x3564	; 0x3564 <SetIncomingTransStatus>

			 SendSlaveCommand(SC_TRANSACTION_ACK,iPumpID);
    ca4a:	8b e0       	ldi	r24, 0x0B	; 11
    ca4c:	63 2d       	mov	r22, r3
    ca4e:	0e 94 91 5f 	call	0xbf22	; 0xbf22 <SendSlaveCommand>
    ca52:	84 c0       	rjmp	.+264    	; 0xcb5c <StoreStandaloneTransData+0x494>
			 UpdateStandaloneStatus((iPumpID&0x0F),PS_VOID);
		 }
		 else 
		 if (TransactionStatus=TS_NEW){ 
			 //Update ReprintReady
			 ReprintReady[FIPAddr]=True;//Ready for Printing
    ca54:	da 94       	dec	r13
    ca56:	cd 2c       	mov	r12, r13
    ca58:	dd 24       	eor	r13, r13
    ca5a:	f6 01       	movw	r30, r12
    ca5c:	ed 5e       	subi	r30, 0xED	; 237
    ca5e:	fe 4f       	sbci	r31, 0xFE	; 254
    ca60:	81 e0       	ldi	r24, 0x01	; 1
    ca62:	80 83       	st	Z, r24
			  
			 FormatPrice(strPPU);
    ca64:	c7 01       	movw	r24, r14
    ca66:	0e 94 0f 36 	call	0x6c1e	; 0x6c1e <FormatPrice>
			 FormatMoney(strPMoney);
    ca6a:	c8 01       	movw	r24, r16
    ca6c:	0e 94 01 36 	call	0x6c02	; 0x6c02 <FormatMoney>
			 FormatVolume(strPVolume);
    ca70:	c5 01       	movw	r24, r10
    ca72:	0e 94 f3 35 	call	0x6be6	; 0x6be6 <FormatVolume>

			 //uart_print(1,1,strPVolume);
			 
			 GenerateTransactionNum(strTranNo);		 
    ca76:	07 e8       	ldi	r16, 0x87	; 135
    ca78:	1c e0       	ldi	r17, 0x0C	; 12
    ca7a:	c8 01       	movw	r24, r16
    ca7c:	0e 94 98 40 	call	0x8130	; 0x8130 <GenerateTransactionNum>
			 sprintf_P(strTransDate,PSTR("%s"),strSystemDate);
    ca80:	00 d0       	rcall	.+0      	; 0xca82 <StoreStandaloneTransData+0x3ba>
    ca82:	00 d0       	rcall	.+0      	; 0xca84 <StoreStandaloneTransData+0x3bc>
    ca84:	00 d0       	rcall	.+0      	; 0xca86 <StoreStandaloneTransData+0x3be>
    ca86:	ed b7       	in	r30, 0x3d	; 61
    ca88:	fe b7       	in	r31, 0x3e	; 62
    ca8a:	31 96       	adiw	r30, 0x01	; 1
    ca8c:	ce 01       	movw	r24, r28
    ca8e:	0b 96       	adiw	r24, 0x0b	; 11
    ca90:	ad b7       	in	r26, 0x3d	; 61
    ca92:	be b7       	in	r27, 0x3e	; 62
    ca94:	12 96       	adiw	r26, 0x02	; 2
    ca96:	9c 93       	st	X, r25
    ca98:	8e 93       	st	-X, r24
    ca9a:	11 97       	sbiw	r26, 0x01	; 1
    ca9c:	86 e3       	ldi	r24, 0x36	; 54
    ca9e:	94 e2       	ldi	r25, 0x24	; 36
    caa0:	93 83       	std	Z+3, r25	; 0x03
    caa2:	82 83       	std	Z+2, r24	; 0x02
    caa4:	8a eb       	ldi	r24, 0xBA	; 186
    caa6:	93 e0       	ldi	r25, 0x03	; 3
    caa8:	95 83       	std	Z+5, r25	; 0x05
    caaa:	84 83       	std	Z+4, r24	; 0x04
    caac:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
			 sprintf_P(strTransTime,PSTR("%s"),strSystemTime);
    cab0:	ed b7       	in	r30, 0x3d	; 61
    cab2:	fe b7       	in	r31, 0x3e	; 62
    cab4:	31 96       	adiw	r30, 0x01	; 1
    cab6:	ce 01       	movw	r24, r28
    cab8:	44 96       	adiw	r24, 0x14	; 20
    caba:	ad b7       	in	r26, 0x3d	; 61
    cabc:	be b7       	in	r27, 0x3e	; 62
    cabe:	12 96       	adiw	r26, 0x02	; 2
    cac0:	9c 93       	st	X, r25
    cac2:	8e 93       	st	-X, r24
    cac4:	11 97       	sbiw	r26, 0x01	; 1
    cac6:	83 e3       	ldi	r24, 0x33	; 51
    cac8:	94 e2       	ldi	r25, 0x24	; 36
    caca:	93 83       	std	Z+3, r25	; 0x03
    cacc:	82 83       	std	Z+2, r24	; 0x02
    cace:	84 e7       	ldi	r24, 0x74	; 116
    cad0:	98 e0       	ldi	r25, 0x08	; 8
    cad2:	95 83       	std	Z+5, r25	; 0x05
    cad4:	84 83       	std	Z+4, r24	; 0x04
    cad6:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
			 sprintf_P(strShift,PSTR("%d"),eeprom_read_byte(&DefShift));
    cada:	ed b7       	in	r30, 0x3d	; 61
    cadc:	fe b7       	in	r31, 0x3e	; 62
    cade:	36 96       	adiw	r30, 0x06	; 6
    cae0:	0f b6       	in	r0, 0x3f	; 63
    cae2:	f8 94       	cli
    cae4:	fe bf       	out	0x3e, r31	; 62
    cae6:	0f be       	out	0x3f, r0	; 63
    cae8:	ed bf       	out	0x3d, r30	; 61
    caea:	8f e3       	ldi	r24, 0x3F	; 63
    caec:	91 e0       	ldi	r25, 0x01	; 1
    caee:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
    caf2:	00 d0       	rcall	.+0      	; 0xcaf4 <StoreStandaloneTransData+0x42c>
    caf4:	00 d0       	rcall	.+0      	; 0xcaf6 <StoreStandaloneTransData+0x42e>
    caf6:	00 d0       	rcall	.+0      	; 0xcaf8 <StoreStandaloneTransData+0x430>
    caf8:	ed b7       	in	r30, 0x3d	; 61
    cafa:	fe b7       	in	r31, 0x3e	; 62
    cafc:	31 96       	adiw	r30, 0x01	; 1
    cafe:	28 e6       	ldi	r18, 0x68	; 104
    cb00:	3c e0       	ldi	r19, 0x0C	; 12
    cb02:	ad b7       	in	r26, 0x3d	; 61
    cb04:	be b7       	in	r27, 0x3e	; 62
    cb06:	12 96       	adiw	r26, 0x02	; 2
    cb08:	3c 93       	st	X, r19
    cb0a:	2e 93       	st	-X, r18
    cb0c:	11 97       	sbiw	r26, 0x01	; 1
    cb0e:	20 e3       	ldi	r18, 0x30	; 48
    cb10:	34 e2       	ldi	r19, 0x24	; 36
    cb12:	33 83       	std	Z+3, r19	; 0x03
    cb14:	22 83       	std	Z+2, r18	; 0x02
    cb16:	84 83       	std	Z+4, r24	; 0x04
    cb18:	15 82       	std	Z+5, r1	; 0x05
    cb1a:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
					 
			 //TransNum,Date,Time
			 StrPosCopy(strTranNo,RecPumpData[FIPAddr].strTransNum,0,strlen(strTranNo));
    cb1e:	d8 01       	movw	r26, r16
    cb20:	0d 90       	ld	r0, X+
    cb22:	00 20       	and	r0, r0
    cb24:	e9 f7       	brne	.-6      	; 0xcb20 <StoreStandaloneTransData+0x458>
    cb26:	11 97       	sbiw	r26, 0x01	; 1
    cb28:	a0 1b       	sub	r26, r16
    cb2a:	b1 0b       	sbc	r27, r17
    cb2c:	98 01       	movw	r18, r16
    cb2e:	85 e3       	ldi	r24, 0x35	; 53
    cb30:	90 e0       	ldi	r25, 0x00	; 0
    cb32:	c8 9e       	mul	r12, r24
    cb34:	b0 01       	movw	r22, r0
    cb36:	c9 9e       	mul	r12, r25
    cb38:	70 0d       	add	r23, r0
    cb3a:	d8 9e       	mul	r13, r24
    cb3c:	70 0d       	add	r23, r0
    cb3e:	11 24       	eor	r1, r1
    cb40:	65 55       	subi	r22, 0x55	; 85
    cb42:	7a 4f       	sbci	r23, 0xFA	; 250
    cb44:	ed b7       	in	r30, 0x3d	; 61
    cb46:	fe b7       	in	r31, 0x3e	; 62
    cb48:	36 96       	adiw	r30, 0x06	; 6
    cb4a:	0f b6       	in	r0, 0x3f	; 63
    cb4c:	f8 94       	cli
    cb4e:	fe bf       	out	0x3e, r31	; 62
    cb50:	0f be       	out	0x3f, r0	; 63
    cb52:	ed bf       	out	0x3d, r30	; 61
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    cb54:	ad 01       	movw	r20, r26
    cb56:	40 0f       	add	r20, r16
    cb58:	51 1f       	adc	r21, r17
    cb5a:	7f ce       	rjmp	.-770    	; 0xc85a <StoreStandaloneTransData+0x192>

			 SendSlaveCommand(SC_TRANSACTION_ACK,iPumpID);
		 }		 
	 }    
     //uart_print(0,1,strRawTransData);
}
    cb5c:	e1 96       	adiw	r28, 0x31	; 49
    cb5e:	0f b6       	in	r0, 0x3f	; 63
    cb60:	f8 94       	cli
    cb62:	de bf       	out	0x3e, r29	; 62
    cb64:	0f be       	out	0x3f, r0	; 63
    cb66:	cd bf       	out	0x3d, r28	; 61
    cb68:	cf 91       	pop	r28
    cb6a:	df 91       	pop	r29
    cb6c:	1f 91       	pop	r17
    cb6e:	0f 91       	pop	r16
    cb70:	ff 90       	pop	r15
    cb72:	ef 90       	pop	r14
    cb74:	df 90       	pop	r13
    cb76:	cf 90       	pop	r12
    cb78:	bf 90       	pop	r11
    cb7a:	af 90       	pop	r10
    cb7c:	9f 90       	pop	r9
    cb7e:	8f 90       	pop	r8
    cb80:	7f 90       	pop	r7
    cb82:	6f 90       	pop	r6
    cb84:	5f 90       	pop	r5
    cb86:	4f 90       	pop	r4
    cb88:	3f 90       	pop	r3
    cb8a:	2f 90       	pop	r2
    cb8c:	08 95       	ret

0000cb8e <StoreStandaloneTotalizerData>:
	  systemEDC();
	  systemConfigProtocol();
	  //systemGeniusProtocol(); //AKR-->Protocol disabled
}

void StoreStandaloneTotalizerData(char *strRawTransData){//Sending FlowSPI_Protocol <STX>   [MsgID][PumpID][Volume1][Amount1][Volume2][Amount2][Volume3][Amount3][Volume4][Amount4][Volume5][Amount5][Volume6][Amount6]<ETX>
    cb8e:	3f 92       	push	r3
    cb90:	4f 92       	push	r4
    cb92:	5f 92       	push	r5
    cb94:	6f 92       	push	r6
    cb96:	7f 92       	push	r7
    cb98:	8f 92       	push	r8
    cb9a:	9f 92       	push	r9
    cb9c:	af 92       	push	r10
    cb9e:	bf 92       	push	r11
    cba0:	cf 92       	push	r12
    cba2:	df 92       	push	r13
    cba4:	ef 92       	push	r14
    cba6:	ff 92       	push	r15
    cba8:	0f 93       	push	r16
    cbaa:	1f 93       	push	r17
    cbac:	df 93       	push	r29
    cbae:	cf 93       	push	r28
    cbb0:	cd b7       	in	r28, 0x3d	; 61
    cbb2:	de b7       	in	r29, 0x3e	; 62
    cbb4:	a5 97       	sbiw	r28, 0x25	; 37
    cbb6:	0f b6       	in	r0, 0x3f	; 63
    cbb8:	f8 94       	cli
    cbba:	de bf       	out	0x3e, r29	; 62
    cbbc:	0f be       	out	0x3f, r0	; 63
    cbbe:	cd bf       	out	0x3d, r28	; 61
    cbc0:	5c 01       	movw	r10, r24
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    cbc2:	fc 01       	movw	r30, r24
    cbc4:	82 81       	ldd	r24, Z+2	; 0x02
    cbc6:	89 83       	std	Y+1, r24	; 0x01
    cbc8:	83 81       	ldd	r24, Z+3	; 0x03
    cbca:	8a 83       	std	Y+2, r24	; 0x02
	 }Dest[Length]=0;
    cbcc:	1b 82       	std	Y+3, r1	; 0x03
	 //    uart(1,1,strRawTransData[i]); 
	 // }

     StrPosCopy(strRawTransData,strPumpID,2,2);
	 //IdIFT(strPumpID);
	 iPumpID=atoi(strPumpID);  
    cbce:	ce 01       	movw	r24, r28
    cbd0:	01 96       	adiw	r24, 0x01	; 1
    cbd2:	0e 94 4c aa 	call	0x15498	; 0x15498 <atoi>
    cbd6:	88 2e       	mov	r8, r24
	 
	 FIPAddr=GetFIPAddr(iPumpID);
    cbd8:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <GetFIPAddr>
	 if (FIPAddr>0){
    cbdc:	88 23       	and	r24, r24
    cbde:	09 f4       	brne	.+2      	; 0xcbe2 <StoreStandaloneTotalizerData+0x54>
    cbe0:	56 c0       	rjmp	.+172    	; 0xcc8e <StoreStandaloneTotalizerData+0x100>
	     FIPAddr=FIPAddr-1;
    cbe2:	38 2e       	mov	r3, r24
    cbe4:	3a 94       	dec	r3
    cbe6:	54 e0       	ldi	r21, 0x04	; 4
    cbe8:	c5 2e       	mov	r12, r21
    cbea:	d1 2c       	mov	r13, r1
    cbec:	ca 0c       	add	r12, r10
    cbee:	db 1c       	adc	r13, r11
    cbf0:	99 24       	eor	r9, r9
    cbf2:	93 94       	inc	r9
    cbf4:	4d ef       	ldi	r20, 0xFD	; 253
    cbf6:	e4 2e       	mov	r14, r20
    cbf8:	4f ef       	ldi	r20, 0xFF	; 255
    cbfa:	f4 2e       	mov	r15, r20
    cbfc:	34 e0       	ldi	r19, 0x04	; 4
    cbfe:	43 2e       	mov	r4, r19
    cc00:	51 2c       	mov	r5, r1
    cc02:	4c 0e       	add	r4, r28
    cc04:	5d 1e       	adc	r5, r29
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    cc06:	ce 01       	movw	r24, r28
    cc08:	40 96       	adiw	r24, 0x10	; 16
    cc0a:	9b a3       	std	Y+35, r25	; 0x23
    cc0c:	8a a3       	std	Y+34, r24	; 0x22
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    cc0e:	23 e1       	ldi	r18, 0x13	; 19
    cc10:	62 2e       	mov	r6, r18
    cc12:	71 2c       	mov	r7, r1
    cc14:	6c 0e       	add	r6, r28
    cc16:	7d 1e       	adc	r7, r29
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    cc18:	fe 01       	movw	r30, r28
    cc1a:	7f 96       	adiw	r30, 0x1f	; 31
    cc1c:	fd a3       	std	Y+37, r31	; 0x25
    cc1e:	ec a3       	std	Y+36, r30	; 0x24
	 //IdIFT(strPumpID);
	 iPumpID=atoi(strPumpID);  
	 
	 FIPAddr=GetFIPAddr(iPumpID);
	 if (FIPAddr>0){
	     FIPAddr=FIPAddr-1;
    cc20:	f2 01       	movw	r30, r4
    cc22:	d6 01       	movw	r26, r12
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    cc24:	8d 91       	ld	r24, X+
    cc26:	81 93       	st	Z+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    cc28:	8a a1       	ldd	r24, Y+34	; 0x22
    cc2a:	9b a1       	ldd	r25, Y+35	; 0x23
    cc2c:	e8 17       	cp	r30, r24
    cc2e:	f9 07       	cpc	r31, r25
    cc30:	c9 f7       	brne	.-14     	; 0xcc24 <StoreStandaloneTotalizerData+0x96>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    cc32:	18 8a       	std	Y+16, r1	; 0x10
    cc34:	d7 01       	movw	r26, r14
    cc36:	a0 95       	com	r26
    cc38:	b0 95       	com	r27
    cc3a:	93 e0       	ldi	r25, 0x03	; 3
    cc3c:	aa 0f       	add	r26, r26
    cc3e:	bb 1f       	adc	r27, r27
    cc40:	9a 95       	dec	r25
    cc42:	e1 f7       	brne	.-8      	; 0xcc3c <StoreStandaloneTotalizerData+0xae>
    cc44:	aa 0d       	add	r26, r10
    cc46:	bb 1d       	adc	r27, r11
    cc48:	f3 01       	movw	r30, r6
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    cc4a:	8d 91       	ld	r24, X+
    cc4c:	81 93       	st	Z+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    cc4e:	8c a1       	ldd	r24, Y+36	; 0x24
    cc50:	9d a1       	ldd	r25, Y+37	; 0x25
    cc52:	e8 17       	cp	r30, r24
    cc54:	f9 07       	cpc	r31, r25
    cc56:	c9 f7       	brne	.-14     	; 0xcc4a <StoreStandaloneTotalizerData+0xbc>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    cc58:	1f 8e       	std	Y+31, r1	; 0x1f

		 for (iGrade=1;iGrade<=6;iGrade++){          
			  StrPosCopy(strRawTransData,strGVolume,(4+((iGrade-1)*24)),12);
			  StrPosCopy(strRawTransData,strGMoney,(16+((iGrade-1)*24)),12);
			  
			  SetTotalizerData(TVOLUME,TOTALIZER_NOW,FIPAddr,iGrade,strGVolume);
    cc5a:	80 e0       	ldi	r24, 0x00	; 0
    cc5c:	61 e0       	ldi	r22, 0x01	; 1
    cc5e:	43 2d       	mov	r20, r3
    cc60:	29 2d       	mov	r18, r9
    cc62:	82 01       	movw	r16, r4
    cc64:	0e 94 72 29 	call	0x52e4	; 0x52e4 <SetTotalizerData>
			  SetTotalizerData(TMONEY,TOTALIZER_NOW,FIPAddr,iGrade,strGMoney);
    cc68:	81 e0       	ldi	r24, 0x01	; 1
    cc6a:	61 e0       	ldi	r22, 0x01	; 1
    cc6c:	43 2d       	mov	r20, r3
    cc6e:	29 2d       	mov	r18, r9
    cc70:	83 01       	movw	r16, r6
    cc72:	0e 94 72 29 	call	0x52e4	; 0x52e4 <SetTotalizerData>
	 FIPAddr=GetFIPAddr(iPumpID);
	 if (FIPAddr>0){
	     FIPAddr=FIPAddr-1;
		 //uart_printf(1,1,PSTR("Totalizer:"));

		 for (iGrade=1;iGrade<=6;iGrade++){          
    cc76:	93 94       	inc	r9
    cc78:	ed ef       	ldi	r30, 0xFD	; 253
    cc7a:	ff ef       	ldi	r31, 0xFF	; 255
    cc7c:	ee 0e       	add	r14, r30
    cc7e:	ff 1e       	adc	r15, r31
    cc80:	88 e1       	ldi	r24, 0x18	; 24
    cc82:	90 e0       	ldi	r25, 0x00	; 0
    cc84:	c8 0e       	add	r12, r24
    cc86:	d9 1e       	adc	r13, r25
    cc88:	97 e0       	ldi	r25, 0x07	; 7
    cc8a:	99 16       	cp	r9, r25
    cc8c:	49 f6       	brne	.-110    	; 0xcc20 <StoreStandaloneTotalizerData+0x92>
			  SetTotalizerData(TMONEY,TOTALIZER_NOW,FIPAddr,iGrade,strGMoney);
			  //sprintf_P(strSend,PSTR("Nozzle:%d Volume:%s Money:%s"),iGrade,strGVolume,strGMoney);
			  //uart_print(0,1,strSend);
		 }	
	}
     SendSlaveCommand(SC_TOTALIZER_ACK,iPumpID);
    cc8e:	8d e0       	ldi	r24, 0x0D	; 13
    cc90:	68 2d       	mov	r22, r8
    cc92:	0e 94 91 5f 	call	0xbf22	; 0xbf22 <SendSlaveCommand>
	 UpdateStandaloneStatus((iPumpID&0x0F),PS_TOTALIZER);	 
    cc96:	88 2d       	mov	r24, r8
    cc98:	8f 70       	andi	r24, 0x0F	; 15
    cc9a:	64 e1       	ldi	r22, 0x14	; 20
    cc9c:	0e 94 2a 20 	call	0x4054	; 0x4054 <UpdateStandaloneStatus>
}
    cca0:	a5 96       	adiw	r28, 0x25	; 37
    cca2:	0f b6       	in	r0, 0x3f	; 63
    cca4:	f8 94       	cli
    cca6:	de bf       	out	0x3e, r29	; 62
    cca8:	0f be       	out	0x3f, r0	; 63
    ccaa:	cd bf       	out	0x3d, r28	; 61
    ccac:	cf 91       	pop	r28
    ccae:	df 91       	pop	r29
    ccb0:	1f 91       	pop	r17
    ccb2:	0f 91       	pop	r16
    ccb4:	ff 90       	pop	r15
    ccb6:	ef 90       	pop	r14
    ccb8:	df 90       	pop	r13
    ccba:	cf 90       	pop	r12
    ccbc:	bf 90       	pop	r11
    ccbe:	af 90       	pop	r10
    ccc0:	9f 90       	pop	r9
    ccc2:	8f 90       	pop	r8
    ccc4:	7f 90       	pop	r7
    ccc6:	6f 90       	pop	r6
    ccc8:	5f 90       	pop	r5
    ccca:	4f 90       	pop	r4
    cccc:	3f 90       	pop	r3
    ccce:	08 95       	ret

0000ccd0 <ScanStandaloneFlow>:
	 _spi(SlaveMessage);
	 _spi(0x06);
	 systemSlave();
}

void ScanStandaloneFlow(char data){  //<STX>[PumpID][STA]<ETX> --> 0x07 0xF1 0xF2 0x08
    ccd0:	0f 93       	push	r16
    ccd2:	1f 93       	push	r17
    ccd4:	08 2f       	mov	r16, r24

      DataPumpID=0;
      DataPumpStatus=0;
	  MixData=0;
      //Shift data
      zDataFlow[4]=zDataFlow[3];
    ccd6:	80 91 a9 02 	lds	r24, 0x02A9
    ccda:	80 93 aa 02 	sts	0x02AA, r24
	  zDataFlow[3]=zDataFlow[2];
    ccde:	80 91 a8 02 	lds	r24, 0x02A8
    cce2:	80 93 a9 02 	sts	0x02A9, r24
	  zDataFlow[2]=zDataFlow[1];
    cce6:	80 91 a7 02 	lds	r24, 0x02A7
    ccea:	80 93 a8 02 	sts	0x02A8, r24
      zDataFlow[1]=zDataFlow[0];
    ccee:	90 91 a6 02 	lds	r25, 0x02A6
    ccf2:	90 93 a7 02 	sts	0x02A7, r25
      zDataFlow[0]=data;
    ccf6:	00 93 a6 02 	sts	0x02A6, r16

      //Scan UpdatedPumpStatus Flow
	  //<STX>[ID][STA]<ETX>: 0x07[ID STA]0x08
	  if((zDataFlow[2]==0x07)&&(zDataFlow[0]==0x08)){
    ccfa:	87 30       	cpi	r24, 0x07	; 7
    ccfc:	79 f4       	brne	.+30     	; 0xcd1c <ScanStandaloneFlow+0x4c>
    ccfe:	08 30       	cpi	r16, 0x08	; 8
    cd00:	69 f4       	brne	.+26     	; 0xcd1c <ScanStandaloneFlow+0x4c>
          MixData=zDataFlow[1];
	      DataPumpID=((MixData&0xF0)>>4);
		  DataPumpStatus=(MixData&0x0F);
    cd02:	19 2f       	mov	r17, r25
    cd04:	1f 70       	andi	r17, 0x0F	; 15
		  UpdateStandaloneStatus(DataPumpID,DataPumpStatus);
    cd06:	89 2f       	mov	r24, r25
    cd08:	82 95       	swap	r24
    cd0a:	8f 70       	andi	r24, 0x0F	; 15
    cd0c:	61 2f       	mov	r22, r17
    cd0e:	0e 94 2a 20 	call	0x4054	; 0x4054 <UpdateStandaloneStatus>
		  if (DataPumpStatus!=PUMP_NONE)IsStandAloneDetected=True;
    cd12:	1e 30       	cpi	r17, 0x0E	; 14
    cd14:	19 f0       	breq	.+6      	; 0xcd1c <ScanStandaloneFlow+0x4c>
    cd16:	81 e0       	ldi	r24, 0x01	; 1
    cd18:	80 93 9c 01 	sts	0x019C, r24
		  //sprintf_P(strSend,PSTR("PS:%d Id:%d"),MixData,DataPumpID);
		  //uart_print(0,1,strSend);
	  }

	  //Scan Transaction Completion FEOT
	  if (IsStandaloneTrans==True){
    cd1c:	80 91 9d 01 	lds	r24, 0x019D
    cd20:	81 30       	cpi	r24, 0x01	; 1
    cd22:	69 f4       	brne	.+26     	; 0xcd3e <ScanStandaloneFlow+0x6e>
	      strStandReceived[iFlow]=data;
    cd24:	80 91 a4 02 	lds	r24, 0x02A4
    cd28:	90 91 a5 02 	lds	r25, 0x02A5
    cd2c:	fc 01       	movw	r30, r24
    cd2e:	ea 5f       	subi	r30, 0xFA	; 250
    cd30:	fc 4f       	sbci	r31, 0xFC	; 252
    cd32:	00 83       	st	Z, r16
		  iFlow++;
    cd34:	01 96       	adiw	r24, 0x01	; 1
    cd36:	90 93 a5 02 	sts	0x02A5, r25
    cd3a:	80 93 a4 02 	sts	0x02A4, r24
	  }
	  if((zDataFlow[1]==0x05)&&(zDataFlow[0]==0x50)){
    cd3e:	80 91 a7 02 	lds	r24, 0x02A7
    cd42:	85 30       	cpi	r24, 0x05	; 5
    cd44:	61 f4       	brne	.+24     	; 0xcd5e <ScanStandaloneFlow+0x8e>
    cd46:	80 91 a6 02 	lds	r24, 0x02A6
    cd4a:	80 35       	cpi	r24, 0x50	; 80
    cd4c:	41 f5       	brne	.+80     	; 0xcd9e <ScanStandaloneFlow+0xce>
	      IsStandaloneTrans=True;
    cd4e:	81 e0       	ldi	r24, 0x01	; 1
    cd50:	80 93 9d 01 	sts	0x019D, r24
		  iFlow=0;
    cd54:	10 92 a5 02 	sts	0x02A5, r1
    cd58:	10 92 a4 02 	sts	0x02A4, r1
    cd5c:	20 c0       	rjmp	.+64     	; 0xcd9e <ScanStandaloneFlow+0xce>
	  }
	  if((zDataFlow[1]==0x06)&&(zDataFlow[0]==0x60)){
    cd5e:	86 30       	cpi	r24, 0x06	; 6
    cd60:	f1 f4       	brne	.+60     	; 0xcd9e <ScanStandaloneFlow+0xce>
    cd62:	80 91 a6 02 	lds	r24, 0x02A6
    cd66:	80 36       	cpi	r24, 0x60	; 96
    cd68:	d1 f4       	brne	.+52     	; 0xcd9e <ScanStandaloneFlow+0xce>
	      IsStandaloneTrans=False;
    cd6a:	10 92 9d 01 	sts	0x019D, r1
	      strStandReceived[iFlow]=0;
    cd6e:	e0 91 a4 02 	lds	r30, 0x02A4
    cd72:	f0 91 a5 02 	lds	r31, 0x02A5
    cd76:	ea 5f       	subi	r30, 0xFA	; 250
    cd78:	fc 4f       	sbci	r31, 0xFC	; 252
    cd7a:	10 82       	st	Z, r1

		  //uart_print(1,1,strStandReceived);

		  MsgIDx=GetMessageID(strStandReceived);
    cd7c:	86 e0       	ldi	r24, 0x06	; 6
    cd7e:	93 e0       	ldi	r25, 0x03	; 3
    cd80:	0e 94 e8 44 	call	0x89d0	; 0x89d0 <GetMessageID>
          if (MsgIDx==0x01)StoreStandaloneTransData(strStandReceived);
    cd84:	81 30       	cpi	r24, 0x01	; 1
    cd86:	29 f4       	brne	.+10     	; 0xcd92 <ScanStandaloneFlow+0xc2>
    cd88:	86 e0       	ldi	r24, 0x06	; 6
    cd8a:	93 e0       	ldi	r25, 0x03	; 3
    cd8c:	0e 94 64 63 	call	0xc6c8	; 0xc6c8 <StoreStandaloneTransData>
    cd90:	06 c0       	rjmp	.+12     	; 0xcd9e <ScanStandaloneFlow+0xce>
		  else
          if (MsgIDx==0x02)StoreStandaloneTotalizerData(strStandReceived);
    cd92:	82 30       	cpi	r24, 0x02	; 2
    cd94:	21 f4       	brne	.+8      	; 0xcd9e <ScanStandaloneFlow+0xce>
    cd96:	86 e0       	ldi	r24, 0x06	; 6
    cd98:	93 e0       	ldi	r25, 0x03	; 3
    cd9a:	0e 94 c7 65 	call	0xcb8e	; 0xcb8e <StoreStandaloneTotalizerData>
	  }
	  //AcknoledgeCommand
	  if ((zDataFlow[3]==0x09)&&(zDataFlow[0]==0x0A)){
    cd9e:	80 91 a9 02 	lds	r24, 0x02A9
    cda2:	89 30       	cpi	r24, 0x09	; 9
    cda4:	c1 f5       	brne	.+112    	; 0xce16 <ScanStandaloneFlow+0x146>
    cda6:	80 91 a6 02 	lds	r24, 0x02A6
    cdaa:	8a 30       	cpi	r24, 0x0A	; 10
    cdac:	a1 f5       	brne	.+104    	; 0xce16 <ScanStandaloneFlow+0x146>
	      
	      AcknoledgePump=zDataFlow[1];
    cdae:	90 91 a7 02 	lds	r25, 0x02A7
    cdb2:	90 93 ec 0b 	sts	0x0BEC, r25
	      AcknoledgeCommand=zDataFlow[2];	  
    cdb6:	80 91 a8 02 	lds	r24, 0x02A8
    cdba:	80 93 9d 05 	sts	0x059D, r24
		  switch(AcknoledgeCommand){
    cdbe:	89 31       	cpi	r24, 0x19	; 25
    cdc0:	51 f0       	breq	.+20     	; 0xcdd6 <ScanStandaloneFlow+0x106>
    cdc2:	8a 31       	cpi	r24, 0x1A	; 26
    cdc4:	18 f4       	brcc	.+6      	; 0xcdcc <ScanStandaloneFlow+0xfc>
    cdc6:	85 30       	cpi	r24, 0x05	; 5
    cdc8:	19 f5       	brne	.+70     	; 0xce10 <ScanStandaloneFlow+0x140>
    cdca:	17 c0       	rjmp	.+46     	; 0xcdfa <ScanStandaloneFlow+0x12a>
    cdcc:	8a 31       	cpi	r24, 0x1A	; 26
    cdce:	c9 f0       	breq	.+50     	; 0xce02 <ScanStandaloneFlow+0x132>
    cdd0:	8c 31       	cpi	r24, 0x1C	; 28
    cdd2:	f1 f4       	brne	.+60     	; 0xce10 <ScanStandaloneFlow+0x140>
    cdd4:	1a c0       	rjmp	.+52     	; 0xce0a <ScanStandaloneFlow+0x13a>
		  case SC_LIVE_SEQUENCE:
		       iSequencePooling=AcknoledgePump;
    cdd6:	90 93 80 01 	sts	0x0180, r25
			   IsNewPoolingSequence=True;
    cdda:	81 e0       	ldi	r24, 0x01	; 1
    cddc:	80 93 81 01 	sts	0x0181, r24
			   //SendPoolingCommand()
			   if (IsControlPooling==True){
    cde0:	80 91 84 01 	lds	r24, 0x0184
    cde4:	81 30       	cpi	r24, 0x01	; 1
    cde6:	a1 f4       	brne	.+40     	; 0xce10 <ScanStandaloneFlow+0x140>
			       IsControlPooling=False;
    cde8:	10 92 84 01 	sts	0x0184, r1
				   SendSlaveCommand(PoolCmd,PoolMsg);
    cdec:	80 91 a7 05 	lds	r24, 0x05A7
    cdf0:	60 91 d3 0b 	lds	r22, 0x0BD3
    cdf4:	0e 94 91 5f 	call	0xbf22	; 0xbf22 <SendSlaveCommand>
    cdf8:	0b c0       	rjmp	.+22     	; 0xce10 <ScanStandaloneFlow+0x140>
                }
		       break;
          case SC_TOTALIZER:
		       IsTotalizerReceived=True;
    cdfa:	81 e0       	ldi	r24, 0x01	; 1
    cdfc:	80 93 af 01 	sts	0x01AF, r24
    ce00:	07 c0       	rjmp	.+14     	; 0xce10 <ScanStandaloneFlow+0x140>
		       break;
		  case SC_POOL_RESTARTED:
		       IsPoolingRestarted=True;
    ce02:	81 e0       	ldi	r24, 0x01	; 1
    ce04:	80 93 83 01 	sts	0x0183, r24
    ce08:	03 c0       	rjmp	.+6      	; 0xce10 <ScanStandaloneFlow+0x140>
		       break;
          case SC_SET_PUMP_TYPE:
		       IsSetPumpType=True;
    ce0a:	81 e0       	ldi	r24, 0x01	; 1
    ce0c:	80 93 23 01 	sts	0x0123, r24
		       break;
		  }
       IsStandaloneAcknoledge=True;
    ce10:	81 e0       	ldi	r24, 0x01	; 1
    ce12:	80 93 82 01 	sts	0x0182, r24
	  }
}
    ce16:	1f 91       	pop	r17
    ce18:	0f 91       	pop	r16
    ce1a:	08 95       	ret

0000ce1c <__vector_17>:
//	  sprintf(SerialSend,"Length:%i",Length);	 
//	  uart_print(1,0,SerialSend);
	 }
}

ISR(SPI_STC_vect){
    ce1c:	1f 92       	push	r1
    ce1e:	0f 92       	push	r0
    ce20:	0f b6       	in	r0, 0x3f	; 63
    ce22:	0f 92       	push	r0
    ce24:	0b b6       	in	r0, 0x3b	; 59
    ce26:	0f 92       	push	r0
    ce28:	11 24       	eor	r1, r1
    ce2a:	1f 93       	push	r17
    ce2c:	2f 93       	push	r18
    ce2e:	3f 93       	push	r19
    ce30:	4f 93       	push	r20
    ce32:	5f 93       	push	r21
    ce34:	6f 93       	push	r22
    ce36:	7f 93       	push	r23
    ce38:	8f 93       	push	r24
    ce3a:	9f 93       	push	r25
    ce3c:	af 93       	push	r26
    ce3e:	bf 93       	push	r27
    ce40:	ef 93       	push	r30
    ce42:	ff 93       	push	r31
char dataSPI;
//char Reply=0;
    //uart(0,1,SPDR);
	dataSPI=SPDR;
    ce44:	1f b1       	in	r17, 0x0f	; 15
	ScanRFIDFlow(dataSPI);
    ce46:	81 2f       	mov	r24, r17
    ce48:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <ScanRFIDFlow>
	if (IFType==IT_SLAVE)ScanEDCFlow(dataSPI);
    ce4c:	80 91 00 01 	lds	r24, 0x0100
    ce50:	81 30       	cpi	r24, 0x01	; 1
    ce52:	21 f4       	brne	.+8      	; 0xce5c <__vector_17+0x40>
    ce54:	81 2f       	mov	r24, r17
    ce56:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <ScanEDCFlow>
    ce5a:	05 c0       	rjmp	.+10     	; 0xce66 <__vector_17+0x4a>
	else
	if (IFType==IT_STANDALONE)ScanStandaloneFlow(dataSPI);
    ce5c:	82 30       	cpi	r24, 0x02	; 2
    ce5e:	19 f4       	brne	.+6      	; 0xce66 <__vector_17+0x4a>
    ce60:	81 2f       	mov	r24, r17
    ce62:	0e 94 68 66 	call	0xccd0	; 0xccd0 <ScanStandaloneFlow>
}
    ce66:	ff 91       	pop	r31
    ce68:	ef 91       	pop	r30
    ce6a:	bf 91       	pop	r27
    ce6c:	af 91       	pop	r26
    ce6e:	9f 91       	pop	r25
    ce70:	8f 91       	pop	r24
    ce72:	7f 91       	pop	r23
    ce74:	6f 91       	pop	r22
    ce76:	5f 91       	pop	r21
    ce78:	4f 91       	pop	r20
    ce7a:	3f 91       	pop	r19
    ce7c:	2f 91       	pop	r18
    ce7e:	1f 91       	pop	r17
    ce80:	0f 90       	pop	r0
    ce82:	0b be       	out	0x3b, r0	; 59
    ce84:	0f 90       	pop	r0
    ce86:	0f be       	out	0x3f, r0	; 63
    ce88:	0f 90       	pop	r0
    ce8a:	1f 90       	pop	r1
    ce8c:	18 95       	reti

0000ce8e <UserInput>:
void ShowMessage(char *Message){//Display Message on Line3
     char i;
}


char UserInput(char TypeUI,char xPos, char yPos,char *strResult, unsigned int MaxValue, char MaxLength){
    ce8e:	8f 92       	push	r8
    ce90:	9f 92       	push	r9
    ce92:	af 92       	push	r10
    ce94:	bf 92       	push	r11
    ce96:	cf 92       	push	r12
    ce98:	df 92       	push	r13
    ce9a:	ef 92       	push	r14
    ce9c:	ff 92       	push	r15
    ce9e:	0f 93       	push	r16
    cea0:	1f 93       	push	r17
    cea2:	cf 93       	push	r28
    cea4:	df 93       	push	r29
    cea6:	f8 2e       	mov	r15, r24
    cea8:	96 2e       	mov	r9, r22
    ceaa:	d4 2e       	mov	r13, r20
    ceac:	e9 01       	movw	r28, r18
    ceae:	58 01       	movw	r10, r16
    ceb0:	8e 2c       	mov	r8, r14
	 static char iHit=0,IsShifted=False,IsSameKey=False,IsNextKey=False,IsNewKey=False,IsFirst=False;//,KeyByte=0;
	 static unsigned int iLoop=0,KeyTimeout;//,TimerPressed=0,NewKeyTimeout;
	        unsigned int NumbValue=0;
	 char KeyPressed=0,KeyChar=0,iDisp=0;
     Result=USER_NONE;
	 switch(stUserInput){// 100 ->199 500 90
    ceb2:	10 91 7f 02 	lds	r17, 0x027F
    ceb6:	12 30       	cpi	r17, 0x02	; 2
    ceb8:	09 f4       	brne	.+2      	; 0xcebc <UserInput+0x2e>
    ceba:	29 c2       	rjmp	.+1106   	; 0xd30e <UserInput+0x480>
    cebc:	13 30       	cpi	r17, 0x03	; 3
    cebe:	30 f4       	brcc	.+12     	; 0xcecc <UserInput+0x3e>
    cec0:	11 23       	and	r17, r17
    cec2:	59 f0       	breq	.+22     	; 0xceda <UserInput+0x4c>
    cec4:	11 30       	cpi	r17, 0x01	; 1
    cec6:	09 f0       	breq	.+2      	; 0xceca <UserInput+0x3c>
    cec8:	f2 c2       	rjmp	.+1508   	; 0xd4ae <UserInput+0x620>
    ceca:	2c c0       	rjmp	.+88     	; 0xcf24 <UserInput+0x96>
    cecc:	13 30       	cpi	r17, 0x03	; 3
    cece:	09 f4       	brne	.+2      	; 0xced2 <UserInput+0x44>
    ced0:	73 c2       	rjmp	.+1254   	; 0xd3b8 <UserInput+0x52a>
    ced2:	14 30       	cpi	r17, 0x04	; 4
    ced4:	09 f0       	breq	.+2      	; 0xced8 <UserInput+0x4a>
    ced6:	eb c2       	rjmp	.+1494   	; 0xd4ae <UserInput+0x620>
    ced8:	ec c2       	rjmp	.+1496   	; 0xd4b2 <UserInput+0x624>
	 case uiInit:
	      iLoop=0;
    ceda:	10 92 71 02 	sts	0x0271, r1
    cede:	10 92 70 02 	sts	0x0270, r1
		  stUserInput=uiInput;
		  xChar=xPos;yChar=yPos;
    cee2:	60 93 7e 02 	sts	0x027E, r22
    cee6:	40 93 7d 02 	sts	0x027D, r20
          iValuePos=0;
    ceea:	10 92 7c 02 	sts	0x027C, r1
		  KeyTimeout=0;
    ceee:	10 92 6f 02 	sts	0x026F, r1
    cef2:	10 92 6e 02 	sts	0x026E, r1
		  IsSameKey=False;
    cef6:	10 92 75 02 	sts	0x0275, r1
		  IsNextKey=False;
    cefa:	10 92 74 02 	sts	0x0274, r1
		  IsNewKey=False;
    cefe:	10 92 73 02 	sts	0x0273, r1
		  IsShifted=True;
    cf02:	91 e0       	ldi	r25, 0x01	; 1
    cf04:	90 93 76 02 	sts	0x0276, r25
		  zKeyChar=' ';
    cf08:	80 e2       	ldi	r24, 0x20	; 32
    cf0a:	80 93 7b 02 	sts	0x027B, r24
		  iHit=0;
    cf0e:	10 92 77 02 	sts	0x0277, r1
		  IsFirst=False;
    cf12:	10 92 72 02 	sts	0x0272, r1
		  IsDelete=False;
    cf16:	10 92 78 02 	sts	0x0278, r1
		  Result=USER_NO_DATA;
		  stUserInput=uiInput;
    cf1a:	90 93 7f 02 	sts	0x027F, r25
    cf1e:	e5 e0       	ldi	r30, 0x05	; 5
    cf20:	ee 2e       	mov	r14, r30
    cf22:	cb c2       	rjmp	.+1430   	; 0xd4ba <UserInput+0x62c>
	      break;
	 case uiInput:
	      KeyPressed=_key_scan(1);                  //  _  ABC DEF GHI JKL MNO PQRS TUV WXYZ
    cf24:	81 e0       	ldi	r24, 0x01	; 1
    cf26:	0e 94 f6 a5 	call	0x14bec	; 0x14bec <_key_scan>
    cf2a:	c8 2e       	mov	r12, r24
		  KeyChar= _key_btn(KeyPressed);            //  1   2   3   4   5   6   7    8   9
    cf2c:	0e 94 57 a5 	call	0x14aae	; 0x14aae <_key_btn>
    cf30:	e8 2e       	mov	r14, r24
		  if (KeyPressed==_KEY_SHIFT){
    cf32:	2b e7       	ldi	r18, 0x7B	; 123
    cf34:	c2 16       	cp	r12, r18
    cf36:	59 f4       	brne	.+22     	; 0xcf4e <UserInput+0xc0>
		      if (IsShifted==False)IsShifted=True;
    cf38:	80 91 76 02 	lds	r24, 0x0276
    cf3c:	88 23       	and	r24, r24
    cf3e:	19 f4       	brne	.+6      	; 0xcf46 <UserInput+0xb8>
    cf40:	10 93 76 02 	sts	0x0276, r17
    cf44:	04 c0       	rjmp	.+8      	; 0xcf4e <UserInput+0xc0>
			  else
		      if (IsShifted==True)IsShifted=False;
    cf46:	81 30       	cpi	r24, 0x01	; 1
    cf48:	11 f4       	brne	.+4      	; 0xcf4e <UserInput+0xc0>
    cf4a:	10 92 76 02 	sts	0x0276, r1
			  }
          
		  if (IsSameKey==True){
    cf4e:	80 91 75 02 	lds	r24, 0x0275
    cf52:	81 30       	cpi	r24, 0x01	; 1
    cf54:	e9 f4       	brne	.+58     	; 0xcf90 <UserInput+0x102>
		      KeyTimeout++;
    cf56:	80 91 6e 02 	lds	r24, 0x026E
    cf5a:	90 91 6f 02 	lds	r25, 0x026F
    cf5e:	01 96       	adiw	r24, 0x01	; 1
    cf60:	90 93 6f 02 	sts	0x026F, r25
    cf64:	80 93 6e 02 	sts	0x026E, r24
              if (KeyTimeout>1000){
    cf68:	89 5e       	subi	r24, 0xE9	; 233
    cf6a:	93 40       	sbci	r25, 0x03	; 3
    cf6c:	88 f0       	brcs	.+34     	; 0xcf90 <UserInput+0x102>
			      if (TypeUI==UI_ALPHANUM_PASSWORD)lcd_put(xChar,yChar,'*');
    cf6e:	f5 e0       	ldi	r31, 0x05	; 5
    cf70:	ff 16       	cp	r15, r31
    cf72:	39 f4       	brne	.+14     	; 0xcf82 <UserInput+0xf4>
    cf74:	80 91 7e 02 	lds	r24, 0x027E
    cf78:	60 91 7d 02 	lds	r22, 0x027D
    cf7c:	4a e2       	ldi	r20, 0x2A	; 42
    cf7e:	0e 94 ca a4 	call	0x14994	; 0x14994 <lcd_put>

		          IsNextKey=True;
    cf82:	81 e0       	ldi	r24, 0x01	; 1
    cf84:	80 93 74 02 	sts	0x0274, r24
				  iLoop=0;
    cf88:	10 92 71 02 	sts	0x0271, r1
    cf8c:	10 92 70 02 	sts	0x0270, r1
			     }
              }
            
 
 		  //if (((KeyChar>='0')&&(KeyChar<='9')&&(iValuePos<=MaxLength))||(IsNextKey==True)){
		  if (((KeyChar>='0')&&(KeyChar<='9')&&(iValuePos<MaxLength))||(IsNextKey==True)){
    cf90:	8e 2d       	mov	r24, r14
    cf92:	80 53       	subi	r24, 0x30	; 48
    cf94:	8a 30       	cpi	r24, 0x0A	; 10
    cf96:	20 f4       	brcc	.+8      	; 0xcfa0 <UserInput+0x112>
    cf98:	80 91 7c 02 	lds	r24, 0x027C
    cf9c:	88 15       	cp	r24, r8
    cf9e:	40 f0       	brcs	.+16     	; 0xcfb0 <UserInput+0x122>
    cfa0:	80 91 74 02 	lds	r24, 0x0274
    cfa4:	81 30       	cpi	r24, 0x01	; 1
    cfa6:	21 f0       	breq	.+8      	; 0xcfb0 <UserInput+0x122>
    cfa8:	ee 24       	eor	r14, r14
    cfaa:	00 e0       	ldi	r16, 0x00	; 0
    cfac:	10 e0       	ldi	r17, 0x00	; 0
    cfae:	be c0       	rjmp	.+380    	; 0xd12c <UserInput+0x29e>
    cfb0:	84 e2       	ldi	r24, 0x24	; 36
    cfb2:	94 ef       	ldi	r25, 0xF4	; 244
    cfb4:	01 97       	sbiw	r24, 0x01	; 1
    cfb6:	f1 f7       	brne	.-4      	; 0xcfb4 <UserInput+0x126>
		       _delay_ms(250);
		       strResult[iValuePos]=KeyChar;
    cfb8:	80 91 7c 02 	lds	r24, 0x027C
    cfbc:	fe 01       	movw	r30, r28
    cfbe:	e8 0f       	add	r30, r24
    cfc0:	f1 1d       	adc	r31, r1
    cfc2:	e0 82       	st	Z, r14
		       strResult[iValuePos+1]=0;
    cfc4:	11 82       	std	Z+1, r1	; 0x01

			   if ((TypeUI==UI_NUMBER_R)||(TypeUI==UI_NUMBER_L)||(TypeUI==UI_NUM_PASSWORD)) 
    cfc6:	8f 2d       	mov	r24, r15
    cfc8:	81 50       	subi	r24, 0x01	; 1
    cfca:	82 30       	cpi	r24, 0x02	; 2
    cfcc:	30 f0       	brcs	.+12     	; 0xcfda <UserInput+0x14c>
    cfce:	24 e0       	ldi	r18, 0x04	; 4
    cfd0:	f2 16       	cp	r15, r18
    cfd2:	19 f0       	breq	.+6      	; 0xcfda <UserInput+0x14c>
    cfd4:	00 e0       	ldi	r16, 0x00	; 0
    cfd6:	10 e0       	ldi	r17, 0x00	; 0
    cfd8:	04 c0       	rjmp	.+8      	; 0xcfe2 <UserInput+0x154>
			        NumbValue=atoi(strResult);
    cfda:	ce 01       	movw	r24, r28
    cfdc:	0e 94 4c aa 	call	0x15498	; 0x15498 <atoi>
    cfe0:	8c 01       	movw	r16, r24
			   else NumbValue=0;
				
			   if ((TypeUI==UI_ALPHANUM_R)||(TypeUI==UI_ALPHANUM_PASSWORD)){
    cfe2:	83 e0       	ldi	r24, 0x03	; 3
    cfe4:	f8 16       	cp	r15, r24
    cfe6:	21 f0       	breq	.+8      	; 0xcff0 <UserInput+0x162>
    cfe8:	e5 e0       	ldi	r30, 0x05	; 5
    cfea:	fe 16       	cp	r15, r30
    cfec:	09 f0       	breq	.+2      	; 0xcff0 <UserInput+0x162>
    cfee:	63 c0       	rjmp	.+198    	; 0xd0b6 <UserInput+0x228>
			       if (KeyChar!=zKeyChar){
    cff0:	80 91 7b 02 	lds	r24, 0x027B
    cff4:	e8 16       	cp	r14, r24
    cff6:	71 f0       	breq	.+28     	; 0xd014 <UserInput+0x186>
					   IsSameKey=False;
    cff8:	10 92 75 02 	sts	0x0275, r1
					   IsNewKey=True;
    cffc:	81 e0       	ldi	r24, 0x01	; 1
    cffe:	80 93 73 02 	sts	0x0273, r24
				       iHit=0;
    d002:	10 92 77 02 	sts	0x0277, r1
					   iLoop=1000;
    d006:	88 ee       	ldi	r24, 0xE8	; 232
    d008:	93 e0       	ldi	r25, 0x03	; 3
    d00a:	90 93 71 02 	sts	0x0271, r25
    d00e:	80 93 70 02 	sts	0x0270, r24
    d012:	51 c0       	rjmp	.+162    	; 0xd0b6 <UserInput+0x228>
				   }
                   else{
				   if (IsNewKey==True){
    d014:	80 91 73 02 	lds	r24, 0x0273
    d018:	81 30       	cpi	r24, 0x01	; 1
    d01a:	71 f4       	brne	.+28     	; 0xd038 <UserInput+0x1aa>
					   IsNewKey=False;
    d01c:	10 92 73 02 	sts	0x0273, r1
					   yChar--;
    d020:	80 91 7d 02 	lds	r24, 0x027D
    d024:	81 50       	subi	r24, 0x01	; 1
    d026:	80 93 7d 02 	sts	0x027D, r24
					   if (iValuePos>0) iValuePos--;
    d02a:	80 91 7c 02 	lds	r24, 0x027C
    d02e:	88 23       	and	r24, r24
    d030:	19 f0       	breq	.+6      	; 0xd038 <UserInput+0x1aa>
    d032:	81 50       	subi	r24, 0x01	; 1
    d034:	80 93 7c 02 	sts	0x027C, r24
					   }
				   KeyTimeout=0;
    d038:	10 92 6f 02 	sts	0x026F, r1
    d03c:	10 92 6e 02 	sts	0x026E, r1
				   IsSameKey=True;
    d040:	81 e0       	ldi	r24, 0x01	; 1
    d042:	80 93 75 02 	sts	0x0275, r24
				   if (iHit<pgm_read_byte(&MaxKeyHit[(zKeyChar-'0')])) 
    d046:	80 91 77 02 	lds	r24, 0x0277
    d04a:	e0 91 7b 02 	lds	r30, 0x027B
    d04e:	f0 e0       	ldi	r31, 0x00	; 0
    d050:	e8 55       	subi	r30, 0x58	; 88
    d052:	fd 4f       	sbci	r31, 0xFD	; 253
    d054:	e4 91       	lpm	r30, Z+
    d056:	8e 17       	cp	r24, r30
    d058:	20 f4       	brcc	.+8      	; 0xd062 <UserInput+0x1d4>
				        iHit++;
    d05a:	8f 5f       	subi	r24, 0xFF	; 255
    d05c:	80 93 77 02 	sts	0x0277, r24
    d060:	02 c0       	rjmp	.+4      	; 0xd066 <UserInput+0x1d8>
                   else iHit=0;
    d062:	10 92 77 02 	sts	0x0277, r1
				   iLoop=1000;
    d066:	88 ee       	ldi	r24, 0xE8	; 232
    d068:	93 e0       	ldi	r25, 0x03	; 3
    d06a:	90 93 71 02 	sts	0x0271, r25
    d06e:	80 93 70 02 	sts	0x0270, r24

                   zAlphaChar=AlphaChar;
    d072:	80 91 79 02 	lds	r24, 0x0279
    d076:	80 93 7a 02 	sts	0x027A, r24
			       AlphaChar=_table_alphanum(IsShifted,KeyPressed,iHit);			   
    d07a:	80 91 76 02 	lds	r24, 0x0276
    d07e:	6c 2d       	mov	r22, r12
    d080:	40 91 77 02 	lds	r20, 0x0277
    d084:	0e 94 a9 a5 	call	0x14b52	; 0x14b52 <_table_alphanum>
    d088:	80 93 79 02 	sts	0x0279, r24
                   
				   if (IsNextKey==True){
    d08c:	80 91 74 02 	lds	r24, 0x0274
    d090:	81 30       	cpi	r24, 0x01	; 1
    d092:	41 f4       	brne	.+16     	; 0xd0a4 <UserInput+0x216>
                       AlphaChar=zAlphaChar;       
    d094:	80 91 7a 02 	lds	r24, 0x027A
    d098:	80 93 79 02 	sts	0x0279, r24
					   IsNextKey=False;
    d09c:	10 92 74 02 	sts	0x0274, r1
					   IsSameKey=False;
    d0a0:	10 92 75 02 	sts	0x0275, r1
				   }   
				   strResult[iValuePos]=AlphaChar;
    d0a4:	80 91 7c 02 	lds	r24, 0x027C
    d0a8:	fe 01       	movw	r30, r28
    d0aa:	e8 0f       	add	r30, r24
    d0ac:	f1 1d       	adc	r31, r1
    d0ae:	80 91 79 02 	lds	r24, 0x0279
    d0b2:	80 83       	st	Z, r24
		           strResult[iValuePos+1]=0;
    d0b4:	11 82       	std	Z+1, r1	; 0x01
				 }//endElse 
				 
			   }//EndAlphaNum

			 if (TypeUI==UI_NUMBER_L){
    d0b6:	f2 e0       	ldi	r31, 0x02	; 2
    d0b8:	ff 16       	cp	r15, r31
    d0ba:	71 f4       	brne	.+28     	; 0xd0d8 <UserInput+0x24a>
			    if ((NumbValue<=MaxValue)||(MaxValue==0)){
    d0bc:	a0 16       	cp	r10, r16
    d0be:	b1 06       	cpc	r11, r17
    d0c0:	18 f4       	brcc	.+6      	; 0xd0c8 <UserInput+0x23a>
    d0c2:	a1 14       	cp	r10, r1
    d0c4:	b1 04       	cpc	r11, r1
    d0c6:	71 f5       	brne	.+92     	; 0xd124 <UserInput+0x296>
				     iValuePos++;
    d0c8:	80 91 7c 02 	lds	r24, 0x027C
    d0cc:	8f 5f       	subi	r24, 0xFF	; 255
    d0ce:	80 93 7c 02 	sts	0x027C, r24
					 stUserInput=uiInputDisp;
    d0d2:	83 e0       	ldi	r24, 0x03	; 3
    d0d4:	80 93 7f 02 	sts	0x027F, r24
				} 
			 }
  
			   if ((NumbValue<=MaxValue)||(MaxValue==0)){
    d0d8:	a0 16       	cp	r10, r16
    d0da:	b1 06       	cpc	r11, r17
    d0dc:	18 f4       	brcc	.+6      	; 0xd0e4 <UserInput+0x256>
    d0de:	a1 14       	cp	r10, r1
    d0e0:	b1 04       	cpc	r11, r1
    d0e2:	01 f5       	brne	.+64     	; 0xd124 <UserInput+0x296>
			       if ((TypeUI==UI_NUMBER_R)||(TypeUI==UI_ALPHANUM_R)||
    d0e4:	21 e0       	ldi	r18, 0x01	; 1
    d0e6:	f2 16       	cp	r15, r18
    d0e8:	49 f0       	breq	.+18     	; 0xd0fc <UserInput+0x26e>
    d0ea:	83 e0       	ldi	r24, 0x03	; 3
    d0ec:	f8 16       	cp	r15, r24
    d0ee:	31 f0       	breq	.+12     	; 0xd0fc <UserInput+0x26e>
    d0f0:	e4 e0       	ldi	r30, 0x04	; 4
    d0f2:	fe 16       	cp	r15, r30
    d0f4:	19 f0       	breq	.+6      	; 0xd0fc <UserInput+0x26e>
    d0f6:	f5 e0       	ldi	r31, 0x05	; 5
    d0f8:	ff 16       	cp	r15, r31
    d0fa:	a1 f4       	brne	.+40     	; 0xd124 <UserInput+0x296>
				       (TypeUI==UI_NUM_PASSWORD)||(TypeUI==UI_ALPHANUM_PASSWORD)){
				      if (IsSameKey==False){
    d0fc:	80 91 75 02 	lds	r24, 0x0275
    d100:	88 23       	and	r24, r24
    d102:	69 f4       	brne	.+26     	; 0xd11e <UserInput+0x290>
					      IsFirst=True;
    d104:	81 e0       	ldi	r24, 0x01	; 1
    d106:	80 93 72 02 	sts	0x0272, r24
					      iValuePos++;
    d10a:	80 91 7c 02 	lds	r24, 0x027C
    d10e:	8f 5f       	subi	r24, 0xFF	; 255
    d110:	80 93 7c 02 	sts	0x027C, r24
						  //FullEntry
						  if (iValuePos==MaxLength)Result=USER_FULL_ENTRY;
					      yChar++;
    d114:	80 91 7d 02 	lds	r24, 0x027D
    d118:	8f 5f       	subi	r24, 0xFF	; 255
    d11a:	80 93 7d 02 	sts	0x027D, r24
						  //yChar=(yChar+1;//Max Display

						  }
                  stUserInput=uiInputDisp;
    d11e:	83 e0       	ldi	r24, 0x03	; 3
    d120:	80 93 7f 02 	sts	0x027F, r24
				  }
			   }
              zKeyChar=KeyChar;
    d124:	e0 92 7b 02 	sts	0x027B, r14
    d128:	74 e0       	ldi	r23, 0x04	; 4
    d12a:	e7 2e       	mov	r14, r23
             Result=USER_ENTRY;
             }//EndKeyChar
			 
                 
              if ((TypeUI==UI_NUMBER_R)||(TypeUI==UI_NUMBER_L)||(TypeUI==UI_NUM_PASSWORD)){
    d12c:	9f 2d       	mov	r25, r15
    d12e:	91 50       	subi	r25, 0x01	; 1
    d130:	92 30       	cpi	r25, 0x02	; 2
    d132:	18 f0       	brcs	.+6      	; 0xd13a <UserInput+0x2ac>
    d134:	24 e0       	ldi	r18, 0x04	; 4
    d136:	f2 16       	cp	r15, r18
    d138:	71 f4       	brne	.+28     	; 0xd156 <UserInput+0x2c8>
                   if((NumbValue>MaxValue)||(iValuePos==MaxLength)){
    d13a:	a0 16       	cp	r10, r16
    d13c:	b1 06       	cpc	r11, r17
    d13e:	20 f0       	brcs	.+8      	; 0xd148 <UserInput+0x2ba>
    d140:	80 91 7c 02 	lds	r24, 0x027C
    d144:	88 15       	cp	r24, r8
    d146:	39 f4       	brne	.+14     	; 0xd156 <UserInput+0x2c8>
			           if (MaxValue>0)system_beep(1);
    d148:	ab 28       	or	r10, r11
    d14a:	29 f0       	breq	.+10     	; 0xd156 <UserInput+0x2c8>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    d14c:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    d14e:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    d150:	81 e0       	ldi	r24, 0x01	; 1
    d152:	80 93 bc 01 	sts	0x01BC, r24
			           if (MaxValue>0)system_beep(1);
				   }
                 }
		  
		  //CANCEL OK
		  if (KeyPressed==_KEY_CANCEL){
    d156:	87 ee       	ldi	r24, 0xE7	; 231
    d158:	c8 16       	cp	r12, r24
    d15a:	71 f4       	brne	.+28     	; 0xd178 <UserInput+0x2ea>
		      if (iValuePos>0){
    d15c:	80 91 7c 02 	lds	r24, 0x027C
    d160:	88 23       	and	r24, r24
    d162:	41 f0       	breq	.+16     	; 0xd174 <UserInput+0x2e6>
			      iLoop=1999;
    d164:	8f ec       	ldi	r24, 0xCF	; 207
    d166:	97 e0       	ldi	r25, 0x07	; 7
    d168:	90 93 71 02 	sts	0x0271, r25
    d16c:	80 93 70 02 	sts	0x0270, r24
				  stUserInput=uiClearDisplay;
    d170:	82 e0       	ldi	r24, 0x02	; 2
    d172:	26 c0       	rjmp	.+76     	; 0xd1c0 <UserInput+0x332>
				  }
			  else{
			      UserInputResult=USER_CANCEL;
    d174:	81 e0       	ldi	r24, 0x01	; 1
    d176:	21 c0       	rjmp	.+66     	; 0xd1ba <UserInput+0x32c>
			      stUserInput=uiFinished;
				  }
		  }
		  else {
		  if (KeyPressed==_KEY_ENTER){
    d178:	e7 eb       	ldi	r30, 0xB7	; 183
    d17a:	ce 16       	cp	r12, r30
    d17c:	19 f5       	brne	.+70     	; 0xd1c4 <UserInput+0x336>
		      strResult[iValuePos]=0;
    d17e:	80 91 7c 02 	lds	r24, 0x027C
    d182:	fe 01       	movw	r30, r28
    d184:	e8 0f       	add	r30, r24
    d186:	f1 1d       	adc	r31, r1
    d188:	10 82       	st	Z, r1
			  if ((TypeUI==UI_NUMBER_R)||(TypeUI==UI_NUMBER_L)){
    d18a:	92 30       	cpi	r25, 0x02	; 2
    d18c:	a8 f4       	brcc	.+42     	; 0xd1b8 <UserInput+0x32a>
			       if (iValuePos==0)sprintf_P(strResult,PSTR("0"));
    d18e:	88 23       	and	r24, r24
    d190:	81 f4       	brne	.+32     	; 0xd1b2 <UserInput+0x324>
    d192:	00 d0       	rcall	.+0      	; 0xd194 <UserInput+0x306>
    d194:	00 d0       	rcall	.+0      	; 0xd196 <UserInput+0x308>
    d196:	ed b7       	in	r30, 0x3d	; 61
    d198:	fe b7       	in	r31, 0x3e	; 62
    d19a:	d2 83       	std	Z+2, r29	; 0x02
    d19c:	c1 83       	std	Z+1, r28	; 0x01
    d19e:	88 e1       	ldi	r24, 0x18	; 24
    d1a0:	9e e1       	ldi	r25, 0x1E	; 30
    d1a2:	94 83       	std	Z+4, r25	; 0x04
    d1a4:	83 83       	std	Z+3, r24	; 0x03
    d1a6:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
    d1aa:	0f 90       	pop	r0
    d1ac:	0f 90       	pop	r0
    d1ae:	0f 90       	pop	r0
    d1b0:	0f 90       	pop	r0
			       RemZeroLead(strResult);
    d1b2:	ce 01       	movw	r24, r28
    d1b4:	0e 94 df 26 	call	0x4dbe	; 0x4dbe <RemZeroLead>
				  }
		      UserInputResult=USER_OK;
    d1b8:	83 e0       	ldi	r24, 0x03	; 3
    d1ba:	80 93 80 02 	sts	0x0280, r24
		      stUserInput=uiFinished;
    d1be:	84 e0       	ldi	r24, 0x04	; 4
    d1c0:	80 93 7f 02 	sts	0x027F, r24
			  }
		  }//EndElse

		  if ((iLoop%2000)==0){
    d1c4:	80 91 70 02 	lds	r24, 0x0270
    d1c8:	90 91 71 02 	lds	r25, 0x0271
    d1cc:	60 ed       	ldi	r22, 0xD0	; 208
    d1ce:	77 e0       	ldi	r23, 0x07	; 7
    d1d0:	0e 94 03 aa 	call	0x15406	; 0x15406 <__udivmodhi4>
    d1d4:	89 2b       	or	r24, r25
    d1d6:	09 f0       	breq	.+2      	; 0xd1da <UserInput+0x34c>
    d1d8:	4b c0       	rjmp	.+150    	; 0xd270 <UserInput+0x3e2>
		      if (IsSameKey==True)
    d1da:	80 91 75 02 	lds	r24, 0x0275
    d1de:	81 30       	cpi	r24, 0x01	; 1
    d1e0:	c9 f4       	brne	.+50     	; 0xd214 <UserInput+0x386>
			      //lcd_put(xChar,yChar,AlphaChar); 
				  lcd_put(xPos+((yPos+iValuePos-1)/20),yPos+(iValuePos%20),AlphaChar); 
    d1e2:	20 91 7c 02 	lds	r18, 0x027C
    d1e6:	82 2f       	mov	r24, r18
    d1e8:	90 e0       	ldi	r25, 0x00	; 0
    d1ea:	01 97       	sbiw	r24, 0x01	; 1
    d1ec:	8d 0d       	add	r24, r13
    d1ee:	91 1d       	adc	r25, r1
    d1f0:	64 e1       	ldi	r22, 0x14	; 20
    d1f2:	70 e0       	ldi	r23, 0x00	; 0
    d1f4:	0e 94 17 aa 	call	0x1542e	; 0x1542e <__divmodhi4>
    d1f8:	36 2f       	mov	r19, r22
    d1fa:	82 2f       	mov	r24, r18
    d1fc:	64 e1       	ldi	r22, 0x14	; 20
    d1fe:	0e 94 ea a9 	call	0x153d4	; 0x153d4 <__udivmodqi4>
    d202:	6d 2d       	mov	r22, r13
    d204:	69 0f       	add	r22, r25
    d206:	89 2d       	mov	r24, r9
    d208:	83 0f       	add	r24, r19
    d20a:	40 91 79 02 	lds	r20, 0x0279
    d20e:	0e 94 ca a4 	call	0x14994	; 0x14994 <lcd_put>
    d212:	2e c0       	rjmp	.+92     	; 0xd270 <UserInput+0x3e2>
			  else {
			      if((TypeUI==UI_ALPHANUM_PASSWORD)&&(iValuePos>0))lcd_put(xChar,yChar-1,'*'); 
    d214:	f5 e0       	ldi	r31, 0x05	; 5
    d216:	ff 16       	cp	r15, r31
    d218:	61 f4       	brne	.+24     	; 0xd232 <UserInput+0x3a4>
    d21a:	80 91 7c 02 	lds	r24, 0x027C
    d21e:	88 23       	and	r24, r24
    d220:	41 f0       	breq	.+16     	; 0xd232 <UserInput+0x3a4>
    d222:	60 91 7d 02 	lds	r22, 0x027D
    d226:	61 50       	subi	r22, 0x01	; 1
    d228:	80 91 7e 02 	lds	r24, 0x027E
    d22c:	4a e2       	ldi	r20, 0x2A	; 42
    d22e:	0e 94 ca a4 	call	0x14994	; 0x14994 <lcd_put>
			      //lcd_put(xChar,yChar,'_'); 
				  lcd_put(xPos+((yPos+iValuePos-1)/20),yPos+(iValuePos%20),'_'); 
    d232:	20 91 7c 02 	lds	r18, 0x027C
    d236:	82 2f       	mov	r24, r18
    d238:	90 e0       	ldi	r25, 0x00	; 0
    d23a:	01 97       	sbiw	r24, 0x01	; 1
    d23c:	8d 0d       	add	r24, r13
    d23e:	91 1d       	adc	r25, r1
    d240:	64 e1       	ldi	r22, 0x14	; 20
    d242:	70 e0       	ldi	r23, 0x00	; 0
    d244:	0e 94 17 aa 	call	0x1542e	; 0x1542e <__divmodhi4>
    d248:	36 2f       	mov	r19, r22
    d24a:	82 2f       	mov	r24, r18
    d24c:	64 e1       	ldi	r22, 0x14	; 20
    d24e:	0e 94 ea a9 	call	0x153d4	; 0x153d4 <__udivmodqi4>
    d252:	6d 2d       	mov	r22, r13
    d254:	69 0f       	add	r22, r25
    d256:	89 2d       	mov	r24, r9
    d258:	83 0f       	add	r24, r19
    d25a:	4f e5       	ldi	r20, 0x5F	; 95
    d25c:	0e 94 ca a4 	call	0x14994	; 0x14994 <lcd_put>

				  if (IsFirst==True){
    d260:	80 91 72 02 	lds	r24, 0x0272
    d264:	81 30       	cpi	r24, 0x01	; 1
    d266:	21 f4       	brne	.+8      	; 0xd270 <UserInput+0x3e2>
				      IsFirst=False;
    d268:	10 92 72 02 	sts	0x0272, r1
				      zKeyChar=0;
    d26c:	10 92 7b 02 	sts	0x027B, r1
					  }
				  }
			  }
          if ((iLoop%2000)==1000){
    d270:	80 91 70 02 	lds	r24, 0x0270
    d274:	90 91 71 02 	lds	r25, 0x0271
    d278:	60 ed       	ldi	r22, 0xD0	; 208
    d27a:	77 e0       	ldi	r23, 0x07	; 7
    d27c:	0e 94 03 aa 	call	0x15406	; 0x15406 <__udivmodhi4>
    d280:	88 5e       	subi	r24, 0xE8	; 232
    d282:	93 40       	sbci	r25, 0x03	; 3
    d284:	d1 f5       	brne	.+116    	; 0xd2fa <UserInput+0x46c>
		      if (IsSameKey==True){
    d286:	80 91 75 02 	lds	r24, 0x0275
    d28a:	81 30       	cpi	r24, 0x01	; 1
    d28c:	f9 f4       	brne	.+62     	; 0xd2cc <UserInput+0x43e>
			      if (TypeUI!=UI_NUM_PASSWORD)
    d28e:	84 e0       	ldi	r24, 0x04	; 4
    d290:	f8 16       	cp	r15, r24
    d292:	b1 f0       	breq	.+44     	; 0xd2c0 <UserInput+0x432>
				       //lcd_put(xChar,yChar,AlphaChar); 
					   lcd_put(xPos+((yPos+iValuePos-1)/20),yChar%21,AlphaChar); 
    d294:	80 91 7c 02 	lds	r24, 0x027C
    d298:	90 e0       	ldi	r25, 0x00	; 0
    d29a:	01 97       	sbiw	r24, 0x01	; 1
    d29c:	8d 0d       	add	r24, r13
    d29e:	91 1d       	adc	r25, r1
    d2a0:	64 e1       	ldi	r22, 0x14	; 20
    d2a2:	70 e0       	ldi	r23, 0x00	; 0
    d2a4:	0e 94 17 aa 	call	0x1542e	; 0x1542e <__divmodhi4>
    d2a8:	26 2f       	mov	r18, r22
    d2aa:	80 91 7d 02 	lds	r24, 0x027D
    d2ae:	65 e1       	ldi	r22, 0x15	; 21
    d2b0:	0e 94 ea a9 	call	0x153d4	; 0x153d4 <__udivmodqi4>
    d2b4:	89 2d       	mov	r24, r9
    d2b6:	82 0f       	add	r24, r18
    d2b8:	69 2f       	mov	r22, r25
    d2ba:	40 91 79 02 	lds	r20, 0x0279
    d2be:	1b c0       	rjmp	.+54     	; 0xd2f6 <UserInput+0x468>
					   
				  else lcd_put(xChar,yChar,'*'); 
    d2c0:	80 91 7e 02 	lds	r24, 0x027E
    d2c4:	60 91 7d 02 	lds	r22, 0x027D
    d2c8:	4a e2       	ldi	r20, 0x2A	; 42
    d2ca:	15 c0       	rjmp	.+42     	; 0xd2f6 <UserInput+0x468>
			  }
			  //else lcd_put(xChar,yChar,' '); 
			  else lcd_put(xPos+((yPos+iValuePos-1)/20),yPos+(iValuePos%20),' '); 			  
    d2cc:	20 91 7c 02 	lds	r18, 0x027C
    d2d0:	82 2f       	mov	r24, r18
    d2d2:	90 e0       	ldi	r25, 0x00	; 0
    d2d4:	01 97       	sbiw	r24, 0x01	; 1
    d2d6:	8d 0d       	add	r24, r13
    d2d8:	91 1d       	adc	r25, r1
    d2da:	64 e1       	ldi	r22, 0x14	; 20
    d2dc:	70 e0       	ldi	r23, 0x00	; 0
    d2de:	0e 94 17 aa 	call	0x1542e	; 0x1542e <__divmodhi4>
    d2e2:	36 2f       	mov	r19, r22
    d2e4:	82 2f       	mov	r24, r18
    d2e6:	64 e1       	ldi	r22, 0x14	; 20
    d2e8:	0e 94 ea a9 	call	0x153d4	; 0x153d4 <__udivmodqi4>
    d2ec:	d9 0e       	add	r13, r25
    d2ee:	89 2d       	mov	r24, r9
    d2f0:	83 0f       	add	r24, r19
    d2f2:	6d 2d       	mov	r22, r13
    d2f4:	40 e2       	ldi	r20, 0x20	; 32
    d2f6:	0e 94 ca a4 	call	0x14994	; 0x14994 <lcd_put>
			  }
          iLoop++;
    d2fa:	80 91 70 02 	lds	r24, 0x0270
    d2fe:	90 91 71 02 	lds	r25, 0x0271
    d302:	01 96       	adiw	r24, 0x01	; 1
    d304:	90 93 71 02 	sts	0x0271, r25
    d308:	80 93 70 02 	sts	0x0270, r24
    d30c:	d6 c0       	rjmp	.+428    	; 0xd4ba <UserInput+0x62c>
          break;
     case uiClearDisplay:
          if (TypeUI==UI_NUMBER_L){
    d30e:	e2 e0       	ldi	r30, 0x02	; 2
    d310:	8e 17       	cp	r24, r30
    d312:	99 f4       	brne	.+38     	; 0xd33a <UserInput+0x4ac>
		      lcd_put(xChar,(yChar-iValuePos),' '); // 123_ 1_
    d314:	60 91 7d 02 	lds	r22, 0x027D
    d318:	80 91 7c 02 	lds	r24, 0x027C
    d31c:	68 1b       	sub	r22, r24
    d31e:	80 91 7e 02 	lds	r24, 0x027E
    d322:	40 e2       	ldi	r20, 0x20	; 32
    d324:	0e 94 ca a4 	call	0x14994	; 0x14994 <lcd_put>
		      strResult[iValuePos]=0;
    d328:	80 91 7c 02 	lds	r24, 0x027C
    d32c:	c8 0f       	add	r28, r24
    d32e:	d1 1d       	adc	r29, r1
    d330:	18 82       	st	Y, r1
		      iValuePos--;
    d332:	81 50       	subi	r24, 0x01	; 1
    d334:	80 93 7c 02 	sts	0x027C, r24
    d338:	33 c0       	rjmp	.+102    	; 0xd3a0 <UserInput+0x512>
			  }
          else
		  if ((TypeUI==UI_NUMBER_R)||(TypeUI==UI_ALPHANUM_R)||
    d33a:	f1 e0       	ldi	r31, 0x01	; 1
    d33c:	8f 17       	cp	r24, r31
    d33e:	49 f0       	breq	.+18     	; 0xd352 <UserInput+0x4c4>
    d340:	23 e0       	ldi	r18, 0x03	; 3
    d342:	82 17       	cp	r24, r18
    d344:	31 f0       	breq	.+12     	; 0xd352 <UserInput+0x4c4>
    d346:	84 e0       	ldi	r24, 0x04	; 4
    d348:	f8 16       	cp	r15, r24
    d34a:	19 f0       	breq	.+6      	; 0xd352 <UserInput+0x4c4>
    d34c:	e5 e0       	ldi	r30, 0x05	; 5
    d34e:	fe 16       	cp	r15, r30
    d350:	39 f5       	brne	.+78     	; 0xd3a0 <UserInput+0x512>
		      (TypeUI==UI_NUM_PASSWORD)||(TypeUI==UI_ALPHANUM_PASSWORD)){
		      //lcd_put(xChar,yChar,' '); // 123_ 1_
			  lcd_put(xPos+((yPos+iValuePos-1)/20),yPos+(iValuePos%20),' '); // 123_ 1_
    d352:	20 91 7c 02 	lds	r18, 0x027C
    d356:	82 2f       	mov	r24, r18
    d358:	90 e0       	ldi	r25, 0x00	; 0
    d35a:	01 97       	sbiw	r24, 0x01	; 1
    d35c:	8d 0d       	add	r24, r13
    d35e:	91 1d       	adc	r25, r1
    d360:	64 e1       	ldi	r22, 0x14	; 20
    d362:	70 e0       	ldi	r23, 0x00	; 0
    d364:	0e 94 17 aa 	call	0x1542e	; 0x1542e <__divmodhi4>
    d368:	36 2f       	mov	r19, r22
    d36a:	82 2f       	mov	r24, r18
    d36c:	64 e1       	ldi	r22, 0x14	; 20
    d36e:	0e 94 ea a9 	call	0x153d4	; 0x153d4 <__udivmodqi4>
    d372:	d9 0e       	add	r13, r25
    d374:	89 2d       	mov	r24, r9
    d376:	83 0f       	add	r24, r19
    d378:	6d 2d       	mov	r22, r13
    d37a:	40 e2       	ldi	r20, 0x20	; 32
    d37c:	0e 94 ca a4 	call	0x14994	; 0x14994 <lcd_put>
			  
		      strResult[iValuePos]=0;
    d380:	80 91 7c 02 	lds	r24, 0x027C
    d384:	c8 0f       	add	r28, r24
    d386:	d1 1d       	adc	r29, r1
    d388:	18 82       	st	Y, r1
		      iValuePos--;
    d38a:	81 50       	subi	r24, 0x01	; 1
    d38c:	80 93 7c 02 	sts	0x027C, r24
			  yChar--;
    d390:	80 91 7d 02 	lds	r24, 0x027D
    d394:	81 50       	subi	r24, 0x01	; 1
    d396:	80 93 7d 02 	sts	0x027D, r24
			  IsDelete=True;
    d39a:	81 e0       	ldi	r24, 0x01	; 1
    d39c:	80 93 78 02 	sts	0x0278, r24
		  }
		  if (iValuePos==0)Result=USER_NO_DATA;		  
    d3a0:	80 91 7c 02 	lds	r24, 0x027C
    d3a4:	88 23       	and	r24, r24
    d3a6:	19 f4       	brne	.+6      	; 0xd3ae <UserInput+0x520>
    d3a8:	65 e0       	ldi	r22, 0x05	; 5
    d3aa:	e6 2e       	mov	r14, r22
    d3ac:	01 c0       	rjmp	.+2      	; 0xd3b0 <UserInput+0x522>
    d3ae:	ee 24       	eor	r14, r14
		  stUserInput=uiInputDisp;//Redraw
    d3b0:	83 e0       	ldi	r24, 0x03	; 3
    d3b2:	80 93 7f 02 	sts	0x027F, r24
    d3b6:	81 c0       	rjmp	.+258    	; 0xd4ba <UserInput+0x62c>
	      break;      
     case uiInputDisp:
	      if(TypeUI==UI_ALPHANUM_PASSWORD){
    d3b8:	f5 e0       	ldi	r31, 0x05	; 5
    d3ba:	8f 17       	cp	r24, r31
    d3bc:	19 f5       	brne	.+70     	; 0xd404 <UserInput+0x576>
			  if (iValuePos>0){
    d3be:	80 91 7c 02 	lds	r24, 0x027C
    d3c2:	88 23       	and	r24, r24
    d3c4:	a9 f0       	breq	.+42     	; 0xd3f0 <UserInput+0x562>
                  lcd_put(xChar,(yChar-2),'*');
    d3c6:	60 91 7d 02 	lds	r22, 0x027D
    d3ca:	62 50       	subi	r22, 0x02	; 2
    d3cc:	80 91 7e 02 	lds	r24, 0x027E
    d3d0:	4a e2       	ldi	r20, 0x2A	; 42
    d3d2:	0e 94 ca a4 	call	0x14994	; 0x14994 <lcd_put>
			      if (IsDelete==True){
    d3d6:	80 91 78 02 	lds	r24, 0x0278
    d3da:	60 91 7d 02 	lds	r22, 0x027D
    d3de:	81 30       	cpi	r24, 0x01	; 1
    d3e0:	71 f0       	breq	.+28     	; 0xd3fe <UserInput+0x570>
				      IsDelete=False;
			          lcd_put(xChar,(yChar-1),'*');
			          }
				  else lcd_put(xChar,(yChar-1),strResult[iValuePos-1]);
    d3e2:	61 50       	subi	r22, 0x01	; 1
    d3e4:	80 91 7c 02 	lds	r24, 0x027C
    d3e8:	c8 0f       	add	r28, r24
    d3ea:	d1 1d       	adc	r29, r1
    d3ec:	21 97       	sbiw	r28, 0x01	; 1
    d3ee:	4d c0       	rjmp	.+154    	; 0xd48a <UserInput+0x5fc>
			      }
			  else{ if(IsDelete==True){
    d3f0:	80 91 78 02 	lds	r24, 0x0278
    d3f4:	60 91 7d 02 	lds	r22, 0x027D
    d3f8:	81 30       	cpi	r24, 0x01	; 1
    d3fa:	09 f0       	breq	.+2      	; 0xd3fe <UserInput+0x570>
    d3fc:	45 c0       	rjmp	.+138    	; 0xd488 <UserInput+0x5fa>
			           IsDelete=False;
    d3fe:	10 92 78 02 	sts	0x0278, r1
    d402:	4c c0       	rjmp	.+152    	; 0xd49c <UserInput+0x60e>
					   lcd_put(xChar,(yChar-1),'*');
			           }
			        else lcd_put(xChar,(yChar-1),strResult[iValuePos]);
			  }
		  }else
	      if (TypeUI==UI_NUMBER_L){
    d404:	22 e0       	ldi	r18, 0x02	; 2
    d406:	82 17       	cp	r24, r18
    d408:	a1 f4       	brne	.+40     	; 0xd432 <UserInput+0x5a4>
    d40a:	10 e0       	ldi	r17, 0x00	; 0
    d40c:	0d c0       	rjmp	.+26     	; 0xd428 <UserInput+0x59a>
	          for(iDisp=0;iDisp<iValuePos;iDisp++){
				  lcd_put(xChar,(yChar-(iValuePos-iDisp)),strResult[iDisp]);
    d40e:	60 91 7d 02 	lds	r22, 0x027D
    d412:	68 1b       	sub	r22, r24
    d414:	61 0f       	add	r22, r17
    d416:	fe 01       	movw	r30, r28
    d418:	e1 0f       	add	r30, r17
    d41a:	f1 1d       	adc	r31, r1
    d41c:	80 91 7e 02 	lds	r24, 0x027E
    d420:	40 81       	ld	r20, Z
    d422:	0e 94 ca a4 	call	0x14994	; 0x14994 <lcd_put>
			           }
			        else lcd_put(xChar,(yChar-1),strResult[iValuePos]);
			  }
		  }else
	      if (TypeUI==UI_NUMBER_L){
	          for(iDisp=0;iDisp<iValuePos;iDisp++){
    d426:	1f 5f       	subi	r17, 0xFF	; 255
    d428:	80 91 7c 02 	lds	r24, 0x027C
    d42c:	18 17       	cp	r17, r24
    d42e:	78 f3       	brcs	.-34     	; 0xd40e <UserInput+0x580>
    d430:	3b c0       	rjmp	.+118    	; 0xd4a8 <UserInput+0x61a>
				  lcd_put(xChar,(yChar-(iValuePos-iDisp)),strResult[iDisp]);
		      }
		  }else
	      if ((TypeUI==UI_NUMBER_R)||(TypeUI==UI_ALPHANUM_R)){
    d432:	81 e0       	ldi	r24, 0x01	; 1
    d434:	f8 16       	cp	r15, r24
    d436:	19 f0       	breq	.+6      	; 0xd43e <UserInput+0x5b0>
    d438:	e3 e0       	ldi	r30, 0x03	; 3
    d43a:	fe 16       	cp	r15, r30
    d43c:	51 f5       	brne	.+84     	; 0xd492 <UserInput+0x604>
		      
			  //if (iValuePos>0) lcd_put(xChar,(yChar-1),strResult[iValuePos-1]);
			  if (iValuePos>0) lcd_put(xPos+((yPos+iValuePos-1)/21),yPos+((iValuePos-1)%20),strResult[iValuePos-1]);			  
    d43e:	20 91 7c 02 	lds	r18, 0x027C
    d442:	4d 2d       	mov	r20, r13
    d444:	50 e0       	ldi	r21, 0x00	; 0
    d446:	22 23       	and	r18, r18
    d448:	c1 f0       	breq	.+48     	; 0xd47a <UserInput+0x5ec>
    d44a:	30 e0       	ldi	r19, 0x00	; 0
    d44c:	f9 01       	movw	r30, r18
    d44e:	31 97       	sbiw	r30, 0x01	; 1
    d450:	cf 01       	movw	r24, r30
    d452:	84 0f       	add	r24, r20
    d454:	95 1f       	adc	r25, r21
    d456:	65 e1       	ldi	r22, 0x15	; 21
    d458:	70 e0       	ldi	r23, 0x00	; 0
    d45a:	0e 94 17 aa 	call	0x1542e	; 0x1542e <__divmodhi4>
    d45e:	46 2f       	mov	r20, r22
    d460:	cf 01       	movw	r24, r30
    d462:	64 e1       	ldi	r22, 0x14	; 20
    d464:	70 e0       	ldi	r23, 0x00	; 0
    d466:	0e 94 17 aa 	call	0x1542e	; 0x1542e <__divmodhi4>
    d46a:	d8 0e       	add	r13, r24
    d46c:	c2 0f       	add	r28, r18
    d46e:	d3 1f       	adc	r29, r19
    d470:	21 97       	sbiw	r28, 0x01	; 1
    d472:	89 2d       	mov	r24, r9
    d474:	84 0f       	add	r24, r20
    d476:	6d 2d       	mov	r22, r13
    d478:	0a c0       	rjmp	.+20     	; 0xd48e <UserInput+0x600>
			  else{ if ((yChar-1)>=yPos)lcd_put(xChar,(yChar-1),strResult[iValuePos]);
    d47a:	60 91 7d 02 	lds	r22, 0x027D
    d47e:	86 2f       	mov	r24, r22
    d480:	90 e0       	ldi	r25, 0x00	; 0
    d482:	48 17       	cp	r20, r24
    d484:	59 07       	cpc	r21, r25
    d486:	84 f4       	brge	.+32     	; 0xd4a8 <UserInput+0x61a>
    d488:	61 50       	subi	r22, 0x01	; 1
    d48a:	80 91 7e 02 	lds	r24, 0x027E
    d48e:	48 81       	ld	r20, Y
    d490:	09 c0       	rjmp	.+18     	; 0xd4a4 <UserInput+0x616>
			  }
		  }else
		  //DisplayAsterik *
		  if (TypeUI==UI_NUM_PASSWORD){
    d492:	f4 e0       	ldi	r31, 0x04	; 4
    d494:	ff 16       	cp	r15, r31
    d496:	41 f4       	brne	.+16     	; 0xd4a8 <UserInput+0x61a>
		      lcd_put(xChar,(yChar-1),'*');
    d498:	60 91 7d 02 	lds	r22, 0x027D
    d49c:	61 50       	subi	r22, 0x01	; 1
    d49e:	80 91 7e 02 	lds	r24, 0x027E
    d4a2:	4a e2       	ldi	r20, 0x2A	; 42
    d4a4:	0e 94 ca a4 	call	0x14994	; 0x14994 <lcd_put>
		  }

          stUserInput=uiInput;
    d4a8:	81 e0       	ldi	r24, 0x01	; 1
    d4aa:	80 93 7f 02 	sts	0x027F, r24
    d4ae:	ee 24       	eor	r14, r14
    d4b0:	04 c0       	rjmp	.+8      	; 0xd4ba <UserInput+0x62c>
	      break;	 
     case uiFinished:
	      Result=UserInputResult;
    d4b2:	e0 90 80 02 	lds	r14, 0x0280
	      stUserInput=uiInit;
    d4b6:	10 92 7f 02 	sts	0x027F, r1
	      break;
	 }
	 return Result;
}
    d4ba:	8e 2d       	mov	r24, r14
    d4bc:	df 91       	pop	r29
    d4be:	cf 91       	pop	r28
    d4c0:	1f 91       	pop	r17
    d4c2:	0f 91       	pop	r16
    d4c4:	ff 90       	pop	r15
    d4c6:	ef 90       	pop	r14
    d4c8:	df 90       	pop	r13
    d4ca:	cf 90       	pop	r12
    d4cc:	bf 90       	pop	r11
    d4ce:	af 90       	pop	r10
    d4d0:	9f 90       	pop	r9
    d4d2:	8f 90       	pop	r8
    d4d4:	08 95       	ret

0000d4d6 <FSettingOperator>:
char FSettingHost(){
     _menu_host();
	 return MENU_DONE;
}

char FSettingOperator(){//Change Active Operator, Change Password
    d4d6:	ef 92       	push	r14
    d4d8:	0f 93       	push	r16
    d4da:	1f 93       	push	r17
    d4dc:	df 93       	push	r29
    d4de:	cf 93       	push	r28
    d4e0:	cd b7       	in	r28, 0x3d	; 61
    d4e2:	de b7       	in	r29, 0x3e	; 62
    d4e4:	e5 97       	sbiw	r28, 0x35	; 53
    d4e6:	0f b6       	in	r0, 0x3f	; 63
    d4e8:	f8 94       	cli
    d4ea:	de bf       	out	0x3e, r29	; 62
    d4ec:	0f be       	out	0x3f, r0	; 63
    d4ee:	cd bf       	out	0x3d, r28	; 61
	        char KeyPressed,KeyChar,lcdteks[20],strPassword[15];
			char strOperatorName[18];
			char uiResult=USER_NONE,Result=MENU_NONE;

	 Result=MENU_NONE;
	 switch(stSettingOperator){
    d4f0:	80 91 1e 02 	lds	r24, 0x021E
    d4f4:	87 30       	cpi	r24, 0x07	; 7
    d4f6:	09 f4       	brne	.+2      	; 0xd4fa <FSettingOperator+0x24>
    d4f8:	74 c1       	rjmp	.+744    	; 0xd7e2 <FSettingOperator+0x30c>
    d4fa:	88 30       	cpi	r24, 0x08	; 8
    d4fc:	90 f4       	brcc	.+36     	; 0xd522 <FSettingOperator+0x4c>
    d4fe:	83 30       	cpi	r24, 0x03	; 3
    d500:	09 f4       	brne	.+2      	; 0xd504 <FSettingOperator+0x2e>
    d502:	9e c0       	rjmp	.+316    	; 0xd640 <FSettingOperator+0x16a>
    d504:	84 30       	cpi	r24, 0x04	; 4
    d506:	30 f4       	brcc	.+12     	; 0xd514 <FSettingOperator+0x3e>
    d508:	81 30       	cpi	r24, 0x01	; 1
    d50a:	d1 f1       	breq	.+116    	; 0xd580 <FSettingOperator+0xaa>
    d50c:	82 30       	cpi	r24, 0x02	; 2
    d50e:	08 f0       	brcs	.+2      	; 0xd512 <FSettingOperator+0x3c>
    d510:	4a c0       	rjmp	.+148    	; 0xd5a6 <FSettingOperator+0xd0>
    d512:	20 c0       	rjmp	.+64     	; 0xd554 <FSettingOperator+0x7e>
    d514:	85 30       	cpi	r24, 0x05	; 5
    d516:	09 f4       	brne	.+2      	; 0xd51a <FSettingOperator+0x44>
    d518:	35 c1       	rjmp	.+618    	; 0xd784 <FSettingOperator+0x2ae>
    d51a:	86 30       	cpi	r24, 0x06	; 6
    d51c:	08 f0       	brcs	.+2      	; 0xd520 <FSettingOperator+0x4a>
    d51e:	4e c1       	rjmp	.+668    	; 0xd7bc <FSettingOperator+0x2e6>
    d520:	fd c0       	rjmp	.+506    	; 0xd71c <FSettingOperator+0x246>
    d522:	8b 30       	cpi	r24, 0x0B	; 11
    d524:	09 f4       	brne	.+2      	; 0xd528 <FSettingOperator+0x52>
    d526:	1f c2       	rjmp	.+1086   	; 0xd966 <FSettingOperator+0x490>
    d528:	8c 30       	cpi	r24, 0x0C	; 12
    d52a:	38 f4       	brcc	.+14     	; 0xd53a <FSettingOperator+0x64>
    d52c:	89 30       	cpi	r24, 0x09	; 9
    d52e:	09 f4       	brne	.+2      	; 0xd532 <FSettingOperator+0x5c>
    d530:	a6 c1       	rjmp	.+844    	; 0xd87e <FSettingOperator+0x3a8>
    d532:	8a 30       	cpi	r24, 0x0A	; 10
    d534:	08 f0       	brcs	.+2      	; 0xd538 <FSettingOperator+0x62>
    d536:	d6 c1       	rjmp	.+940    	; 0xd8e4 <FSettingOperator+0x40e>
    d538:	74 c1       	rjmp	.+744    	; 0xd822 <FSettingOperator+0x34c>
    d53a:	8d 30       	cpi	r24, 0x0D	; 13
    d53c:	09 f4       	brne	.+2      	; 0xd540 <FSettingOperator+0x6a>
    d53e:	95 c2       	rjmp	.+1322   	; 0xda6a <FSettingOperator+0x594>
    d540:	8d 30       	cpi	r24, 0x0D	; 13
    d542:	08 f4       	brcc	.+2      	; 0xd546 <FSettingOperator+0x70>
    d544:	17 c2       	rjmp	.+1070   	; 0xd974 <FSettingOperator+0x49e>
    d546:	8e 30       	cpi	r24, 0x0E	; 14
    d548:	09 f4       	brne	.+2      	; 0xd54c <FSettingOperator+0x76>
    d54a:	94 c2       	rjmp	.+1320   	; 0xda74 <FSettingOperator+0x59e>
    d54c:	8f 30       	cpi	r24, 0x0F	; 15
    d54e:	09 f0       	breq	.+2      	; 0xd552 <FSettingOperator+0x7c>
    d550:	9c c2       	rjmp	.+1336   	; 0xda8a <FSettingOperator+0x5b4>
    d552:	97 c2       	rjmp	.+1326   	; 0xda82 <FSettingOperator+0x5ac>
	 case soMenuOption:
	      lcd_clear();
    d554:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
		  lcd_printf(1,1,PSTR("1.Change Operator"));
    d558:	81 e0       	ldi	r24, 0x01	; 1
    d55a:	61 e0       	ldi	r22, 0x01	; 1
    d55c:	46 e7       	ldi	r20, 0x76	; 118
    d55e:	52 e1       	ldi	r21, 0x12	; 18
    d560:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  lcd_printf(2,1,PSTR("2.Change Password"));
    d564:	82 e0       	ldi	r24, 0x02	; 2
    d566:	61 e0       	ldi	r22, 0x01	; 1
    d568:	44 e6       	ldi	r20, 0x64	; 100
    d56a:	52 e1       	ldi	r21, 0x12	; 18
    d56c:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  lcd_printf(4,1,PSTR("[*]Back          "));
    d570:	84 e0       	ldi	r24, 0x04	; 4
    d572:	61 e0       	ldi	r22, 0x01	; 1
    d574:	42 e5       	ldi	r20, 0x52	; 82
    d576:	52 e1       	ldi	r21, 0x12	; 18
    d578:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
          stSettingOperator=soMenuOptionInput;
    d57c:	81 e0       	ldi	r24, 0x01	; 1
    d57e:	5e c2       	rjmp	.+1212   	; 0xda3c <FSettingOperator+0x566>
	      break;
     case soMenuOptionInput:
	      KeyPressed=_key_scan(1);
    d580:	81 e0       	ldi	r24, 0x01	; 1
    d582:	0e 94 f6 a5 	call	0x14bec	; 0x14bec <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
    d586:	0e 94 57 a5 	call	0x14aae	; 0x14aae <_key_btn>
		  switch(KeyChar){
    d58a:	81 33       	cpi	r24, 0x31	; 49
    d58c:	31 f0       	breq	.+12     	; 0xd59a <FSettingOperator+0xc4>
    d58e:	82 33       	cpi	r24, 0x32	; 50
    d590:	31 f0       	breq	.+12     	; 0xd59e <FSettingOperator+0xc8>
    d592:	8a 32       	cpi	r24, 0x2A	; 42
    d594:	09 f0       	breq	.+2      	; 0xd598 <FSettingOperator+0xc2>
    d596:	79 c2       	rjmp	.+1266   	; 0xda8a <FSettingOperator+0x5b4>
    d598:	04 c0       	rjmp	.+8      	; 0xd5a2 <FSettingOperator+0xcc>
		  case '1':
		       stSettingOperator=soChangeOperatorInit;
    d59a:	82 e0       	ldi	r24, 0x02	; 2
    d59c:	4f c2       	rjmp	.+1182   	; 0xda3c <FSettingOperator+0x566>
		       break;
          case '2':
		       stSettingOperator=soChangePasswordInit;
    d59e:	85 e0       	ldi	r24, 0x05	; 5
    d5a0:	4d c2       	rjmp	.+1178   	; 0xda3c <FSettingOperator+0x566>
		       break;
          case '*':
		       stSettingOperator=soExitSettingOperator;
    d5a2:	8f e0       	ldi	r24, 0x0F	; 15
    d5a4:	4b c2       	rjmp	.+1174   	; 0xda3c <FSettingOperator+0x566>
		       break;
		  }
	      break;
     case soChangeOperatorInit:
	      lcd_clear();		  
    d5a6:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
		  eeprom_read_block((void*) &strOperatorName, (const void*) &DefOperatorName,18);
    d5aa:	8e 01       	movw	r16, r28
    d5ac:	00 5f       	subi	r16, 0xF0	; 240
    d5ae:	1f 4f       	sbci	r17, 0xFF	; 255
    d5b0:	c8 01       	movw	r24, r16
    d5b2:	65 e1       	ldi	r22, 0x15	; 21
    d5b4:	70 e0       	ldi	r23, 0x00	; 0
    d5b6:	42 e1       	ldi	r20, 0x12	; 18
    d5b8:	50 e0       	ldi	r21, 0x00	; 0
    d5ba:	0e 94 b9 ac 	call	0x15972	; 0x15972 <__eerd_block_m128>
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    d5be:	98 01       	movw	r18, r16
    d5c0:	ce 01       	movw	r24, r28
    d5c2:	4f 96       	adiw	r24, 0x1f	; 31
	    Dest[i]=Source[IdxSource+i];
    d5c4:	0f 5f       	subi	r16, 0xFF	; 255
    d5c6:	1f 4f       	sbci	r17, 0xFF	; 255
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    d5c8:	08 17       	cp	r16, r24
    d5ca:	19 07       	cpc	r17, r25
    d5cc:	d9 f7       	brne	.-10     	; 0xd5c4 <FSettingOperator+0xee>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    d5ce:	1f 8e       	std	Y+31, r1	; 0x1f
     case soChangeOperatorInit:
	      lcd_clear();		  
		  eeprom_read_block((void*) &strOperatorName, (const void*) &DefOperatorName,18);
		  StrPosCopy(strOperatorName,strOperatorName,0,15);

		  sprintf_P(lcdteks,PSTR("%s"),strOperatorName);
    d5d0:	00 d0       	rcall	.+0      	; 0xd5d2 <FSettingOperator+0xfc>
    d5d2:	00 d0       	rcall	.+0      	; 0xd5d4 <FSettingOperator+0xfe>
    d5d4:	00 d0       	rcall	.+0      	; 0xd5d6 <FSettingOperator+0x100>
    d5d6:	ed b7       	in	r30, 0x3d	; 61
    d5d8:	fe b7       	in	r31, 0x3e	; 62
    d5da:	31 96       	adiw	r30, 0x01	; 1
    d5dc:	8e 01       	movw	r16, r28
    d5de:	0e 5d       	subi	r16, 0xDE	; 222
    d5e0:	1f 4f       	sbci	r17, 0xFF	; 255
    d5e2:	ad b7       	in	r26, 0x3d	; 61
    d5e4:	be b7       	in	r27, 0x3e	; 62
    d5e6:	12 96       	adiw	r26, 0x02	; 2
    d5e8:	1c 93       	st	X, r17
    d5ea:	0e 93       	st	-X, r16
    d5ec:	11 97       	sbiw	r26, 0x01	; 1
    d5ee:	8f e4       	ldi	r24, 0x4F	; 79
    d5f0:	92 e1       	ldi	r25, 0x12	; 18
    d5f2:	93 83       	std	Z+3, r25	; 0x03
    d5f4:	82 83       	std	Z+2, r24	; 0x02
    d5f6:	24 83       	std	Z+4, r18	; 0x04
    d5f8:	35 83       	std	Z+5, r19	; 0x05
    d5fa:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
		  lcd_printf(1,1,PSTR("Name:"));
    d5fe:	8d b7       	in	r24, 0x3d	; 61
    d600:	9e b7       	in	r25, 0x3e	; 62
    d602:	06 96       	adiw	r24, 0x06	; 6
    d604:	0f b6       	in	r0, 0x3f	; 63
    d606:	f8 94       	cli
    d608:	9e bf       	out	0x3e, r25	; 62
    d60a:	0f be       	out	0x3f, r0	; 63
    d60c:	8d bf       	out	0x3d, r24	; 61
    d60e:	81 e0       	ldi	r24, 0x01	; 1
    d610:	61 e0       	ldi	r22, 0x01	; 1
    d612:	49 e4       	ldi	r20, 0x49	; 73
    d614:	52 e1       	ldi	r21, 0x12	; 18
    d616:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  lcd_print (1,6,lcdteks);
    d61a:	81 e0       	ldi	r24, 0x01	; 1
    d61c:	66 e0       	ldi	r22, 0x06	; 6
    d61e:	a8 01       	movw	r20, r16
    d620:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
		  lcd_printf(2,1,PSTR("New :_              "));
    d624:	82 e0       	ldi	r24, 0x02	; 2
    d626:	61 e0       	ldi	r22, 0x01	; 1
    d628:	44 e3       	ldi	r20, 0x34	; 52
    d62a:	52 e1       	ldi	r21, 0x12	; 18
    d62c:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    d630:	84 e0       	ldi	r24, 0x04	; 4
    d632:	61 e0       	ldi	r22, 0x01	; 1
    d634:	4f e1       	ldi	r20, 0x1F	; 31
    d636:	52 e1       	ldi	r21, 0x12	; 18
    d638:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
          stSettingOperator=soOperatorNameInput;
    d63c:	83 e0       	ldi	r24, 0x03	; 3
    d63e:	fe c1       	rjmp	.+1020   	; 0xda3c <FSettingOperator+0x566>
	      break;
     case soOperatorNameInput:
          uiResult=USER_NONE;
	      uiResult=UserInput(UI_ALPHANUM_R,2,6,strFreeMessageLine1,0,16);
    d640:	83 e0       	ldi	r24, 0x03	; 3
    d642:	62 e0       	ldi	r22, 0x02	; 2
    d644:	46 e0       	ldi	r20, 0x06	; 6
    d646:	22 e9       	ldi	r18, 0x92	; 146
    d648:	38 e0       	ldi	r19, 0x08	; 8
    d64a:	00 e0       	ldi	r16, 0x00	; 0
    d64c:	10 e0       	ldi	r17, 0x00	; 0
    d64e:	90 e1       	ldi	r25, 0x10	; 16
    d650:	e9 2e       	mov	r14, r25
    d652:	0e 94 47 67 	call	0xce8e	; 0xce8e <UserInput>
		  switch(uiResult){
    d656:	83 30       	cpi	r24, 0x03	; 3
    d658:	51 f0       	breq	.+20     	; 0xd66e <FSettingOperator+0x198>
    d65a:	84 30       	cpi	r24, 0x04	; 4
    d65c:	08 f4       	brcc	.+2      	; 0xd660 <FSettingOperator+0x18a>
    d65e:	f0 c0       	rjmp	.+480    	; 0xd840 <FSettingOperator+0x36a>
    d660:	84 30       	cpi	r24, 0x04	; 4
    d662:	09 f4       	brne	.+2      	; 0xd666 <FSettingOperator+0x190>
    d664:	51 c0       	rjmp	.+162    	; 0xd708 <FSettingOperator+0x232>
    d666:	85 30       	cpi	r24, 0x05	; 5
    d668:	09 f0       	breq	.+2      	; 0xd66c <FSettingOperator+0x196>
    d66a:	0f c2       	rjmp	.+1054   	; 0xda8a <FSettingOperator+0x5b4>
    d66c:	52 c0       	rjmp	.+164    	; 0xd712 <FSettingOperator+0x23c>
		  case USER_OK:
		       lcd_clear();
    d66e:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
    d672:	20 e0       	ldi	r18, 0x00	; 0
    d674:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    d676:	ae 01       	movw	r20, r28
    d678:	40 5f       	subi	r20, 0xF0	; 240
    d67a:	5f 4f       	sbci	r21, 0xFF	; 255
    d67c:	fa 01       	movw	r30, r20
    d67e:	e2 0f       	add	r30, r18
    d680:	f3 1f       	adc	r31, r19
    d682:	d9 01       	movw	r26, r18
    d684:	ae 56       	subi	r26, 0x6E	; 110
    d686:	b7 4f       	sbci	r27, 0xF7	; 247
    d688:	8c 91       	ld	r24, X
    d68a:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    d68c:	2f 5f       	subi	r18, 0xFF	; 255
    d68e:	3f 4f       	sbci	r19, 0xFF	; 255
    d690:	2f 30       	cpi	r18, 0x0F	; 15
    d692:	31 05       	cpc	r19, r1
    d694:	99 f7       	brne	.-26     	; 0xd67c <FSettingOperator+0x1a6>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    d696:	1f 8e       	std	Y+31, r1	; 0x1f
	      uiResult=UserInput(UI_ALPHANUM_R,2,6,strFreeMessageLine1,0,16);
		  switch(uiResult){
		  case USER_OK:
		       lcd_clear();
			   StrPosCopy(strFreeMessageLine1,strOperatorName,0,15);
		       sprintf_P(lcdteks,PSTR("%s"),strOperatorName);
    d698:	00 d0       	rcall	.+0      	; 0xd69a <FSettingOperator+0x1c4>
    d69a:	00 d0       	rcall	.+0      	; 0xd69c <FSettingOperator+0x1c6>
    d69c:	00 d0       	rcall	.+0      	; 0xd69e <FSettingOperator+0x1c8>
    d69e:	ed b7       	in	r30, 0x3d	; 61
    d6a0:	fe b7       	in	r31, 0x3e	; 62
    d6a2:	31 96       	adiw	r30, 0x01	; 1
    d6a4:	8e 01       	movw	r16, r28
    d6a6:	0e 5d       	subi	r16, 0xDE	; 222
    d6a8:	1f 4f       	sbci	r17, 0xFF	; 255
    d6aa:	ad b7       	in	r26, 0x3d	; 61
    d6ac:	be b7       	in	r27, 0x3e	; 62
    d6ae:	12 96       	adiw	r26, 0x02	; 2
    d6b0:	1c 93       	st	X, r17
    d6b2:	0e 93       	st	-X, r16
    d6b4:	11 97       	sbiw	r26, 0x01	; 1
    d6b6:	8c e1       	ldi	r24, 0x1C	; 28
    d6b8:	92 e1       	ldi	r25, 0x12	; 18
    d6ba:	93 83       	std	Z+3, r25	; 0x03
    d6bc:	82 83       	std	Z+2, r24	; 0x02
    d6be:	55 83       	std	Z+5, r21	; 0x05
    d6c0:	44 83       	std	Z+4, r20	; 0x04
    d6c2:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
			   lcd_printf(1,1,PSTR("New Operator:"));
    d6c6:	8d b7       	in	r24, 0x3d	; 61
    d6c8:	9e b7       	in	r25, 0x3e	; 62
    d6ca:	06 96       	adiw	r24, 0x06	; 6
    d6cc:	0f b6       	in	r0, 0x3f	; 63
    d6ce:	f8 94       	cli
    d6d0:	9e bf       	out	0x3e, r25	; 62
    d6d2:	0f be       	out	0x3f, r0	; 63
    d6d4:	8d bf       	out	0x3d, r24	; 61
    d6d6:	81 e0       	ldi	r24, 0x01	; 1
    d6d8:	61 e0       	ldi	r22, 0x01	; 1
    d6da:	4e e0       	ldi	r20, 0x0E	; 14
    d6dc:	52 e1       	ldi	r21, 0x12	; 18
    d6de:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
			   lcd_print (2,1,lcdteks);
    d6e2:	82 e0       	ldi	r24, 0x02	; 2
    d6e4:	61 e0       	ldi	r22, 0x01	; 1
    d6e6:	a8 01       	movw	r20, r16
    d6e8:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
			   lcd_printf(3,1,PSTR("Save?"));
    d6ec:	83 e0       	ldi	r24, 0x03	; 3
    d6ee:	61 e0       	ldi	r22, 0x01	; 1
    d6f0:	48 e0       	ldi	r20, 0x08	; 8
    d6f2:	52 e1       	ldi	r21, 0x12	; 18
    d6f4:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
			   lcd_printf(4,1,PSTR("[*]No    [#]Yes"));
    d6f8:	84 e0       	ldi	r24, 0x04	; 4
    d6fa:	61 e0       	ldi	r22, 0x01	; 1
    d6fc:	48 ef       	ldi	r20, 0xF8	; 248
    d6fe:	51 e1       	ldi	r21, 0x11	; 17
    d700:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
               stSettingOperator=soIsSaveOperatorName;
    d704:	84 e0       	ldi	r24, 0x04	; 4
    d706:	9a c1       	rjmp	.+820    	; 0xda3c <FSettingOperator+0x566>
		       break;
		  case USER_CANCEL:
               stSettingOperator=soMenuOption; 
		       break;
          case USER_ENTRY:
		       lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
    d708:	84 e0       	ldi	r24, 0x04	; 4
    d70a:	61 e0       	ldi	r22, 0x01	; 1
    d70c:	43 ee       	ldi	r20, 0xE3	; 227
    d70e:	51 e1       	ldi	r21, 0x11	; 17
    d710:	27 c1       	rjmp	.+590    	; 0xd960 <FSettingOperator+0x48a>
		       break;
          case USER_NO_DATA:
		       lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    d712:	84 e0       	ldi	r24, 0x04	; 4
    d714:	61 e0       	ldi	r22, 0x01	; 1
    d716:	4e ec       	ldi	r20, 0xCE	; 206
    d718:	51 e1       	ldi	r21, 0x11	; 17
    d71a:	22 c1       	rjmp	.+580    	; 0xd960 <FSettingOperator+0x48a>
		       break;
		  }
	      break;
     case soIsSaveOperatorName:
          KeyPressed=_key_scan(1);
    d71c:	81 e0       	ldi	r24, 0x01	; 1
    d71e:	0e 94 f6 a5 	call	0x14bec	; 0x14bec <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
    d722:	0e 94 57 a5 	call	0x14aae	; 0x14aae <_key_btn>
		  switch(KeyChar){
    d726:	83 32       	cpi	r24, 0x23	; 35
    d728:	09 f0       	breq	.+2      	; 0xd72c <FSettingOperator+0x256>
    d72a:	51 c0       	rjmp	.+162    	; 0xd7ce <FSettingOperator+0x2f8>
          case '*':
		       stSettingOperator=soMenuOption;
		       break;
    d72c:	20 e0       	ldi	r18, 0x00	; 0
    d72e:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    d730:	8e 01       	movw	r16, r28
    d732:	00 5f       	subi	r16, 0xF0	; 240
    d734:	1f 4f       	sbci	r17, 0xFF	; 255
    d736:	f8 01       	movw	r30, r16
    d738:	e2 0f       	add	r30, r18
    d73a:	f3 1f       	adc	r31, r19
    d73c:	d9 01       	movw	r26, r18
    d73e:	ae 56       	subi	r26, 0x6E	; 110
    d740:	b7 4f       	sbci	r27, 0xF7	; 247
    d742:	8c 91       	ld	r24, X
    d744:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    d746:	2f 5f       	subi	r18, 0xFF	; 255
    d748:	3f 4f       	sbci	r19, 0xFF	; 255
    d74a:	2f 30       	cpi	r18, 0x0F	; 15
    d74c:	31 05       	cpc	r19, r1
    d74e:	99 f7       	brne	.-26     	; 0xd736 <FSettingOperator+0x260>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    d750:	1f 8e       	std	Y+31, r1	; 0x1f
          case '*':
		       stSettingOperator=soMenuOption;
		       break;
          case '#':
		       StrPosCopy(strFreeMessageLine1,strOperatorName,0,15);
               AddSpaceLag(strOperatorName,18); 
    d752:	c8 01       	movw	r24, r16
    d754:	62 e1       	ldi	r22, 0x12	; 18
    d756:	0e 94 64 2f 	call	0x5ec8	; 0x5ec8 <AddSpaceLag>
		       eeprom_write_block((const void*) &strOperatorName, (void*) &DefOperatorName,18);
    d75a:	c8 01       	movw	r24, r16
    d75c:	65 e1       	ldi	r22, 0x15	; 21
    d75e:	70 e0       	ldi	r23, 0x00	; 0
    d760:	42 e1       	ldi	r20, 0x12	; 18
    d762:	50 e0       	ldi	r21, 0x00	; 0
    d764:	0e 94 d1 ac 	call	0x159a2	; 0x159a2 <__eewr_block_m128>
		       lcd_printf(3,1,PSTR("Saved "));
    d768:	83 e0       	ldi	r24, 0x03	; 3
    d76a:	61 e0       	ldi	r22, 0x01	; 1
    d76c:	47 ec       	ldi	r20, 0xC7	; 199
    d76e:	51 e1       	ldi	r21, 0x11	; 17
    d770:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
			   TimDisplay=0;
    d774:	10 92 92 01 	sts	0x0192, r1
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    d778:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    d77a:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    d77c:	81 e0       	ldi	r24, 0x01	; 1
    d77e:	80 93 bc 01 	sts	0x01BC, r24
    d782:	44 c1       	rjmp	.+648    	; 0xda0c <FSettingOperator+0x536>
		       stSettingOperator=soDelayDisplaySaved;
		       break;
		  }	      
		  break;
     case soChangePasswordInit:
	      lcd_clear();
    d784:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
		  lcd_printf(1,1,PSTR("-Change Password-"));
    d788:	81 e0       	ldi	r24, 0x01	; 1
    d78a:	61 e0       	ldi	r22, 0x01	; 1
    d78c:	45 eb       	ldi	r20, 0xB5	; 181
    d78e:	51 e1       	ldi	r21, 0x11	; 17
    d790:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  lcd_printf(2,1,PSTR("1.Supervisor"));
    d794:	82 e0       	ldi	r24, 0x02	; 2
    d796:	61 e0       	ldi	r22, 0x01	; 1
    d798:	48 ea       	ldi	r20, 0xA8	; 168
    d79a:	51 e1       	ldi	r21, 0x11	; 17
    d79c:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  lcd_printf(3,1,PSTR("2.Administrator"));
    d7a0:	83 e0       	ldi	r24, 0x03	; 3
    d7a2:	61 e0       	ldi	r22, 0x01	; 1
    d7a4:	48 e9       	ldi	r20, 0x98	; 152
    d7a6:	51 e1       	ldi	r21, 0x11	; 17
    d7a8:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  lcd_printf(4,1,PSTR("[*]Back     "));
    d7ac:	84 e0       	ldi	r24, 0x04	; 4
    d7ae:	61 e0       	ldi	r22, 0x01	; 1
    d7b0:	4b e8       	ldi	r20, 0x8B	; 139
    d7b2:	51 e1       	ldi	r21, 0x11	; 17
    d7b4:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
          stSettingOperator=soChangePasswordInput; 
    d7b8:	86 e0       	ldi	r24, 0x06	; 6
    d7ba:	40 c1       	rjmp	.+640    	; 0xda3c <FSettingOperator+0x566>
	      break;
     case soChangePasswordInput:
          KeyPressed=_key_scan(1);
    d7bc:	81 e0       	ldi	r24, 0x01	; 1
    d7be:	0e 94 f6 a5 	call	0x14bec	; 0x14bec <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
    d7c2:	0e 94 57 a5 	call	0x14aae	; 0x14aae <_key_btn>
		  switch(KeyChar){
    d7c6:	81 33       	cpi	r24, 0x31	; 49
    d7c8:	31 f0       	breq	.+12     	; 0xd7d6 <FSettingOperator+0x300>
    d7ca:	82 33       	cpi	r24, 0x32	; 50
    d7cc:	31 f0       	breq	.+12     	; 0xd7da <FSettingOperator+0x304>
    d7ce:	8a 32       	cpi	r24, 0x2A	; 42
    d7d0:	09 f0       	breq	.+2      	; 0xd7d4 <FSettingOperator+0x2fe>
    d7d2:	5b c1       	rjmp	.+694    	; 0xda8a <FSettingOperator+0x5b4>
    d7d4:	53 c1       	rjmp	.+678    	; 0xda7c <FSettingOperator+0x5a6>
		  case '1':		 
		       PassType=PT_SUPERVISOR;
    d7d6:	81 e0       	ldi	r24, 0x01	; 1
    d7d8:	01 c0       	rjmp	.+2      	; 0xd7dc <FSettingOperator+0x306>
		       stSettingOperator=soOldPasswordDisplay;
		       break;
          case '2':		       
		       PassType=PT_ADMINISTRATOR;
    d7da:	82 e0       	ldi	r24, 0x02	; 2
    d7dc:	80 93 1d 02 	sts	0x021D, r24
    d7e0:	75 c0       	rjmp	.+234    	; 0xd8cc <FSettingOperator+0x3f6>
		       stSettingOperator=soMenuOption;
		       break;
		  }	      
	      break;
     case soOldPasswordDisplay:
	 	  lcd_clear();
    d7e2:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
	      if (PassType==PT_SUPERVISOR){
    d7e6:	80 91 1d 02 	lds	r24, 0x021D
    d7ea:	81 30       	cpi	r24, 0x01	; 1
    d7ec:	21 f4       	brne	.+8      	; 0xd7f6 <FSettingOperator+0x320>
		      lcd_printf(1,1,PSTR("-Supervisor-"));              
    d7ee:	61 e0       	ldi	r22, 0x01	; 1
    d7f0:	4e e7       	ldi	r20, 0x7E	; 126
    d7f2:	51 e1       	ldi	r21, 0x11	; 17
    d7f4:	06 c0       	rjmp	.+12     	; 0xd802 <FSettingOperator+0x32c>
		  }else if (PassType==PT_ADMINISTRATOR){		       
    d7f6:	82 30       	cpi	r24, 0x02	; 2
    d7f8:	31 f4       	brne	.+12     	; 0xd806 <FSettingOperator+0x330>
		       lcd_printf(1,1,PSTR("-Administrator-"));			   
    d7fa:	81 e0       	ldi	r24, 0x01	; 1
    d7fc:	61 e0       	ldi	r22, 0x01	; 1
    d7fe:	4e e6       	ldi	r20, 0x6E	; 110
    d800:	51 e1       	ldi	r21, 0x11	; 17
    d802:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  }
		      lcd_printf(2,1,PSTR("Old:_"));
    d806:	82 e0       	ldi	r24, 0x02	; 2
    d808:	61 e0       	ldi	r22, 0x01	; 1
    d80a:	48 e6       	ldi	r20, 0x68	; 104
    d80c:	51 e1       	ldi	r21, 0x11	; 17
    d80e:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
			  lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    d812:	84 e0       	ldi	r24, 0x04	; 4
    d814:	61 e0       	ldi	r22, 0x01	; 1
    d816:	43 e5       	ldi	r20, 0x53	; 83
    d818:	51 e1       	ldi	r21, 0x11	; 17
    d81a:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>

          stSettingOperator=soOldPasswordEntry;
    d81e:	88 e0       	ldi	r24, 0x08	; 8
    d820:	0d c1       	rjmp	.+538    	; 0xda3c <FSettingOperator+0x566>
	      break;
     case soOldPasswordEntry:
          uiResult=USER_NONE;
          uiResult=UserInput(UI_NUM_PASSWORD,2,5,strFreeMessageLine1,0,8);           
    d822:	84 e0       	ldi	r24, 0x04	; 4
    d824:	62 e0       	ldi	r22, 0x02	; 2
    d826:	45 e0       	ldi	r20, 0x05	; 5
    d828:	22 e9       	ldi	r18, 0x92	; 146
    d82a:	38 e0       	ldi	r19, 0x08	; 8
    d82c:	00 e0       	ldi	r16, 0x00	; 0
    d82e:	10 e0       	ldi	r17, 0x00	; 0
    d830:	b8 e0       	ldi	r27, 0x08	; 8
    d832:	eb 2e       	mov	r14, r27
    d834:	0e 94 47 67 	call	0xce8e	; 0xce8e <UserInput>
		  switch(uiResult){
    d838:	83 30       	cpi	r24, 0x03	; 3
    d83a:	61 f0       	breq	.+24     	; 0xd854 <FSettingOperator+0x37e>
    d83c:	84 30       	cpi	r24, 0x04	; 4
    d83e:	20 f4       	brcc	.+8      	; 0xd848 <FSettingOperator+0x372>
    d840:	81 30       	cpi	r24, 0x01	; 1
    d842:	09 f0       	breq	.+2      	; 0xd846 <FSettingOperator+0x370>
    d844:	22 c1       	rjmp	.+580    	; 0xda8a <FSettingOperator+0x5b4>
    d846:	1a c1       	rjmp	.+564    	; 0xda7c <FSettingOperator+0x5a6>
    d848:	84 30       	cpi	r24, 0x04	; 4
    d84a:	79 f0       	breq	.+30     	; 0xd86a <FSettingOperator+0x394>
    d84c:	85 30       	cpi	r24, 0x05	; 5
    d84e:	09 f0       	breq	.+2      	; 0xd852 <FSettingOperator+0x37c>
    d850:	1c c1       	rjmp	.+568    	; 0xda8a <FSettingOperator+0x5b4>
    d852:	10 c0       	rjmp	.+32     	; 0xd874 <FSettingOperator+0x39e>
		  case USER_OK:
		       lcd_printf(2,1,PSTR("New:_               "));
    d854:	82 e0       	ldi	r24, 0x02	; 2
    d856:	61 e0       	ldi	r22, 0x01	; 1
    d858:	4e e3       	ldi	r20, 0x3E	; 62
    d85a:	51 e1       	ldi	r21, 0x11	; 17
    d85c:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
			   lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    d860:	84 e0       	ldi	r24, 0x04	; 4
    d862:	61 e0       	ldi	r22, 0x01	; 1
    d864:	49 e2       	ldi	r20, 0x29	; 41
    d866:	51 e1       	ldi	r21, 0x11	; 17
    d868:	6e c0       	rjmp	.+220    	; 0xd946 <FSettingOperator+0x470>
		       break;
		  case USER_CANCEL:
               stSettingOperator=soMenuOption; 
		       break;
          case USER_ENTRY:
		       lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
    d86a:	84 e0       	ldi	r24, 0x04	; 4
    d86c:	61 e0       	ldi	r22, 0x01	; 1
    d86e:	44 e1       	ldi	r20, 0x14	; 20
    d870:	51 e1       	ldi	r21, 0x11	; 17
    d872:	76 c0       	rjmp	.+236    	; 0xd960 <FSettingOperator+0x48a>
		       break;
          case USER_NO_DATA:
		       lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    d874:	84 e0       	ldi	r24, 0x04	; 4
    d876:	61 e0       	ldi	r22, 0x01	; 1
    d878:	4f ef       	ldi	r20, 0xFF	; 255
    d87a:	50 e1       	ldi	r21, 0x10	; 16
    d87c:	71 c0       	rjmp	.+226    	; 0xd960 <FSettingOperator+0x48a>
		       break;
		  }
	      break;
     case soNewPasswordEntry1:
          uiResult=USER_NONE;
          uiResult=UserInput(UI_NUM_PASSWORD,2,5,strFreeMessageLine2,0,8);           
    d87e:	84 e0       	ldi	r24, 0x04	; 4
    d880:	62 e0       	ldi	r22, 0x02	; 2
    d882:	45 e0       	ldi	r20, 0x05	; 5
    d884:	23 ea       	ldi	r18, 0xA3	; 163
    d886:	37 e0       	ldi	r19, 0x07	; 7
    d888:	00 e0       	ldi	r16, 0x00	; 0
    d88a:	10 e0       	ldi	r17, 0x00	; 0
    d88c:	a8 e0       	ldi	r26, 0x08	; 8
    d88e:	ea 2e       	mov	r14, r26
    d890:	0e 94 47 67 	call	0xce8e	; 0xce8e <UserInput>
		  switch(uiResult){
    d894:	83 30       	cpi	r24, 0x03	; 3
    d896:	61 f0       	breq	.+24     	; 0xd8b0 <FSettingOperator+0x3da>
    d898:	84 30       	cpi	r24, 0x04	; 4
    d89a:	20 f4       	brcc	.+8      	; 0xd8a4 <FSettingOperator+0x3ce>
    d89c:	81 30       	cpi	r24, 0x01	; 1
    d89e:	09 f0       	breq	.+2      	; 0xd8a2 <FSettingOperator+0x3cc>
    d8a0:	f4 c0       	rjmp	.+488    	; 0xda8a <FSettingOperator+0x5b4>
    d8a2:	14 c0       	rjmp	.+40     	; 0xd8cc <FSettingOperator+0x3f6>
    d8a4:	84 30       	cpi	r24, 0x04	; 4
    d8a6:	a1 f0       	breq	.+40     	; 0xd8d0 <FSettingOperator+0x3fa>
    d8a8:	85 30       	cpi	r24, 0x05	; 5
    d8aa:	09 f0       	breq	.+2      	; 0xd8ae <FSettingOperator+0x3d8>
    d8ac:	ee c0       	rjmp	.+476    	; 0xda8a <FSettingOperator+0x5b4>
    d8ae:	15 c0       	rjmp	.+42     	; 0xd8da <FSettingOperator+0x404>
		  case USER_OK:
		       lcd_printf(3,1,PSTR("New:_               "));
    d8b0:	83 e0       	ldi	r24, 0x03	; 3
    d8b2:	61 e0       	ldi	r22, 0x01	; 1
    d8b4:	4a ee       	ldi	r20, 0xEA	; 234
    d8b6:	50 e1       	ldi	r21, 0x10	; 16
    d8b8:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
			   lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    d8bc:	84 e0       	ldi	r24, 0x04	; 4
    d8be:	61 e0       	ldi	r22, 0x01	; 1
    d8c0:	45 ed       	ldi	r20, 0xD5	; 213
    d8c2:	50 e1       	ldi	r21, 0x10	; 16
    d8c4:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		       stSettingOperator=soNewPasswordEntry2;
    d8c8:	8a e0       	ldi	r24, 0x0A	; 10
    d8ca:	b8 c0       	rjmp	.+368    	; 0xda3c <FSettingOperator+0x566>
		       break;
		  case USER_CANCEL:		       
			   stSettingOperator=soOldPasswordDisplay;
    d8cc:	87 e0       	ldi	r24, 0x07	; 7
    d8ce:	b6 c0       	rjmp	.+364    	; 0xda3c <FSettingOperator+0x566>
		       break;
          case USER_ENTRY:
		       lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
    d8d0:	84 e0       	ldi	r24, 0x04	; 4
    d8d2:	61 e0       	ldi	r22, 0x01	; 1
    d8d4:	40 ec       	ldi	r20, 0xC0	; 192
    d8d6:	50 e1       	ldi	r21, 0x10	; 16
    d8d8:	43 c0       	rjmp	.+134    	; 0xd960 <FSettingOperator+0x48a>
		       break;
          case USER_NO_DATA:
		       lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    d8da:	84 e0       	ldi	r24, 0x04	; 4
    d8dc:	61 e0       	ldi	r22, 0x01	; 1
    d8de:	4b ea       	ldi	r20, 0xAB	; 171
    d8e0:	50 e1       	ldi	r21, 0x10	; 16
    d8e2:	3e c0       	rjmp	.+124    	; 0xd960 <FSettingOperator+0x48a>
		       break;
		  }	      
	      break;
     case soNewPasswordEntry2:
          uiResult=USER_NONE;
          uiResult=UserInput(UI_NUM_PASSWORD,3,5,strFreeMessageLine3,0,8);           
    d8e4:	84 e0       	ldi	r24, 0x04	; 4
    d8e6:	63 e0       	ldi	r22, 0x03	; 3
    d8e8:	45 e0       	ldi	r20, 0x05	; 5
    d8ea:	2c e1       	ldi	r18, 0x1C	; 28
    d8ec:	38 e0       	ldi	r19, 0x08	; 8
    d8ee:	00 e0       	ldi	r16, 0x00	; 0
    d8f0:	10 e0       	ldi	r17, 0x00	; 0
    d8f2:	f8 e0       	ldi	r31, 0x08	; 8
    d8f4:	ef 2e       	mov	r14, r31
    d8f6:	0e 94 47 67 	call	0xce8e	; 0xce8e <UserInput>
		  switch(uiResult){
    d8fa:	83 30       	cpi	r24, 0x03	; 3
    d8fc:	61 f0       	breq	.+24     	; 0xd916 <FSettingOperator+0x440>
    d8fe:	84 30       	cpi	r24, 0x04	; 4
    d900:	20 f4       	brcc	.+8      	; 0xd90a <FSettingOperator+0x434>
    d902:	81 30       	cpi	r24, 0x01	; 1
    d904:	09 f0       	breq	.+2      	; 0xd908 <FSettingOperator+0x432>
    d906:	c1 c0       	rjmp	.+386    	; 0xda8a <FSettingOperator+0x5b4>
    d908:	12 c0       	rjmp	.+36     	; 0xd92e <FSettingOperator+0x458>
    d90a:	84 30       	cpi	r24, 0x04	; 4
    d90c:	01 f1       	breq	.+64     	; 0xd94e <FSettingOperator+0x478>
    d90e:	85 30       	cpi	r24, 0x05	; 5
    d910:	09 f0       	breq	.+2      	; 0xd914 <FSettingOperator+0x43e>
    d912:	bb c0       	rjmp	.+374    	; 0xda8a <FSettingOperator+0x5b4>
    d914:	21 c0       	rjmp	.+66     	; 0xd958 <FSettingOperator+0x482>
		  case USER_OK:
		       lcd_clear();
    d916:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
               lcd_printf(2,1,PSTR("Validating.."));
    d91a:	82 e0       	ldi	r24, 0x02	; 2
    d91c:	61 e0       	ldi	r22, 0x01	; 1
    d91e:	4e e9       	ldi	r20, 0x9E	; 158
    d920:	50 e1       	ldi	r21, 0x10	; 16
    d922:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
			   TimDisplay=0;
    d926:	10 92 92 01 	sts	0x0192, r1
		       stSettingOperator=soDispValidatePassword;
    d92a:	8b e0       	ldi	r24, 0x0B	; 11
    d92c:	87 c0       	rjmp	.+270    	; 0xda3c <FSettingOperator+0x566>
		       break;
		  case USER_CANCEL:
               lcd_clear();
    d92e:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
               lcd_printf(2,1,PSTR("New:_               "));
    d932:	82 e0       	ldi	r24, 0x02	; 2
    d934:	61 e0       	ldi	r22, 0x01	; 1
    d936:	49 e8       	ldi	r20, 0x89	; 137
    d938:	50 e1       	ldi	r21, 0x10	; 16
    d93a:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
			   lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    d93e:	84 e0       	ldi	r24, 0x04	; 4
    d940:	61 e0       	ldi	r22, 0x01	; 1
    d942:	44 e7       	ldi	r20, 0x74	; 116
    d944:	50 e1       	ldi	r21, 0x10	; 16
    d946:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		       stSettingOperator=soNewPasswordEntry1;
    d94a:	89 e0       	ldi	r24, 0x09	; 9
    d94c:	77 c0       	rjmp	.+238    	; 0xda3c <FSettingOperator+0x566>
		       break;
          case USER_ENTRY:
		       lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
    d94e:	84 e0       	ldi	r24, 0x04	; 4
    d950:	61 e0       	ldi	r22, 0x01	; 1
    d952:	4f e5       	ldi	r20, 0x5F	; 95
    d954:	50 e1       	ldi	r21, 0x10	; 16
    d956:	04 c0       	rjmp	.+8      	; 0xd960 <FSettingOperator+0x48a>
		       break;
          case USER_NO_DATA:
		       lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    d958:	84 e0       	ldi	r24, 0x04	; 4
    d95a:	61 e0       	ldi	r22, 0x01	; 1
    d95c:	4a e4       	ldi	r20, 0x4A	; 74
    d95e:	50 e1       	ldi	r21, 0x10	; 16
    d960:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
    d964:	92 c0       	rjmp	.+292    	; 0xda8a <FSettingOperator+0x5b4>
		       break;
		  }	      
	      break;
     case soDispValidatePassword:
	      if (TimDisplay>3)stSettingOperator=soValidatePassword;
    d966:	80 91 92 01 	lds	r24, 0x0192
    d96a:	84 30       	cpi	r24, 0x04	; 4
    d96c:	08 f4       	brcc	.+2      	; 0xd970 <FSettingOperator+0x49a>
    d96e:	8d c0       	rjmp	.+282    	; 0xda8a <FSettingOperator+0x5b4>
    d970:	8c e0       	ldi	r24, 0x0C	; 12
    d972:	64 c0       	rjmp	.+200    	; 0xda3c <FSettingOperator+0x566>
	      break;
     case soValidatePassword:
          if (PassType==PT_SUPERVISOR) eeprom_read_block((void*) &strPassword, (const void*) &DefSysPassword, 10);		      			   
    d974:	80 91 1d 02 	lds	r24, 0x021D
    d978:	81 30       	cpi	r24, 0x01	; 1
    d97a:	29 f4       	brne	.+10     	; 0xd986 <FSettingOperator+0x4b0>
    d97c:	ce 01       	movw	r24, r28
    d97e:	01 96       	adiw	r24, 0x01	; 1
    d980:	6b e0       	ldi	r22, 0x0B	; 11
    d982:	70 e0       	ldi	r23, 0x00	; 0
    d984:	06 c0       	rjmp	.+12     	; 0xd992 <FSettingOperator+0x4bc>
		  else 
		  if (PassType==PT_ADMINISTRATOR) eeprom_read_block((void*) &strPassword, (const void*) &DefSpvPassword, 10);    
    d986:	82 30       	cpi	r24, 0x02	; 2
    d988:	41 f4       	brne	.+16     	; 0xd99a <FSettingOperator+0x4c4>
    d98a:	ce 01       	movw	r24, r28
    d98c:	01 96       	adiw	r24, 0x01	; 1
    d98e:	61 e0       	ldi	r22, 0x01	; 1
    d990:	70 e0       	ldi	r23, 0x00	; 0
    d992:	4a e0       	ldi	r20, 0x0A	; 10
    d994:	50 e0       	ldi	r21, 0x00	; 0
    d996:	0e 94 b9 ac 	call	0x15972	; 0x15972 <__eerd_block_m128>
		  
		  //Check Old Validity
		  if (strcmp(strPassword,strFreeMessageLine1)==0){//OldMessage Valid
    d99a:	ce 01       	movw	r24, r28
    d99c:	01 96       	adiw	r24, 0x01	; 1
    d99e:	62 e9       	ldi	r22, 0x92	; 146
    d9a0:	78 e0       	ldi	r23, 0x08	; 8
    d9a2:	0e 94 71 aa 	call	0x154e2	; 0x154e2 <strcmp>
    d9a6:	00 97       	sbiw	r24, 0x00	; 0
    d9a8:	09 f0       	breq	.+2      	; 0xd9ac <FSettingOperator+0x4d6>
    d9aa:	4b c0       	rjmp	.+150    	; 0xda42 <FSettingOperator+0x56c>
              if (strcmp(strFreeMessageLine2,strFreeMessageLine3)==0){
    d9ac:	83 ea       	ldi	r24, 0xA3	; 163
    d9ae:	97 e0       	ldi	r25, 0x07	; 7
    d9b0:	6c e1       	ldi	r22, 0x1C	; 28
    d9b2:	78 e0       	ldi	r23, 0x08	; 8
    d9b4:	0e 94 71 aa 	call	0x154e2	; 0x154e2 <strcmp>
    d9b8:	00 97       	sbiw	r24, 0x00	; 0
    d9ba:	51 f5       	brne	.+84     	; 0xda10 <FSettingOperator+0x53a>
                  
			      if (PassType==PT_SUPERVISOR) eeprom_write_block((const void*) &strFreeMessageLine2, (void*) &DefSysPassword, 10);		      			   
    d9bc:	80 91 1d 02 	lds	r24, 0x021D
    d9c0:	81 30       	cpi	r24, 0x01	; 1
    d9c2:	29 f4       	brne	.+10     	; 0xd9ce <FSettingOperator+0x4f8>
    d9c4:	83 ea       	ldi	r24, 0xA3	; 163
    d9c6:	97 e0       	ldi	r25, 0x07	; 7
    d9c8:	6b e0       	ldi	r22, 0x0B	; 11
    d9ca:	70 e0       	ldi	r23, 0x00	; 0
    d9cc:	06 c0       	rjmp	.+12     	; 0xd9da <FSettingOperator+0x504>
		          else 
		          if (PassType==PT_ADMINISTRATOR) eeprom_write_block((const void*) &strFreeMessageLine2, (void*) &DefSpvPassword, 10);    
    d9ce:	82 30       	cpi	r24, 0x02	; 2
    d9d0:	41 f4       	brne	.+16     	; 0xd9e2 <FSettingOperator+0x50c>
    d9d2:	83 ea       	ldi	r24, 0xA3	; 163
    d9d4:	97 e0       	ldi	r25, 0x07	; 7
    d9d6:	61 e0       	ldi	r22, 0x01	; 1
    d9d8:	70 e0       	ldi	r23, 0x00	; 0
    d9da:	4a e0       	ldi	r20, 0x0A	; 10
    d9dc:	50 e0       	ldi	r21, 0x00	; 0
    d9de:	0e 94 d1 ac 	call	0x159a2	; 0x159a2 <__eewr_block_m128>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    d9e2:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    d9e4:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    d9e6:	81 e0       	ldi	r24, 0x01	; 1
    d9e8:	80 93 bc 01 	sts	0x01BC, r24
			      if (PassType==PT_SUPERVISOR) eeprom_write_block((const void*) &strFreeMessageLine2, (void*) &DefSysPassword, 10);		      			   
		          else 
		          if (PassType==PT_ADMINISTRATOR) eeprom_write_block((const void*) &strFreeMessageLine2, (void*) &DefSpvPassword, 10);    

			      system_beep(1);
				  lcd_clear();
    d9ec:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
			      lcd_printf(2,1,PSTR("     Completed      "));
    d9f0:	82 e0       	ldi	r24, 0x02	; 2
    d9f2:	61 e0       	ldi	r22, 0x01	; 1
    d9f4:	45 e3       	ldi	r20, 0x35	; 53
    d9f6:	50 e1       	ldi	r21, 0x10	; 16
    d9f8:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
			      lcd_printf(3,1,PSTR("   Password Saved   "));    
    d9fc:	83 e0       	ldi	r24, 0x03	; 3
    d9fe:	61 e0       	ldi	r22, 0x01	; 1
    da00:	40 e2       	ldi	r20, 0x20	; 32
    da02:	50 e1       	ldi	r21, 0x10	; 16
    da04:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
				  TimDisplay=0;
    da08:	10 92 92 01 	sts	0x0192, r1
				  stSettingOperator=soDelayDisplaySaved;
    da0c:	8e e0       	ldi	r24, 0x0E	; 14
    da0e:	16 c0       	rjmp	.+44     	; 0xda3c <FSettingOperator+0x566>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    da10:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    da12:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    da14:	82 e0       	ldi	r24, 0x02	; 2
    da16:	80 93 bc 01 	sts	0x01BC, r24
			      lcd_printf(3,1,PSTR("   Password Saved   "));    
				  TimDisplay=0;
				  stSettingOperator=soDelayDisplaySaved;
			  }else {
			  system_beep(2);
		      TimDisplay=0;
    da1a:	10 92 92 01 	sts	0x0192, r1
		      lcd_clear();
    da1e:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
		      lcd_printf(2,1,PSTR("      ERROR         "));
    da22:	82 e0       	ldi	r24, 0x02	; 2
    da24:	61 e0       	ldi	r22, 0x01	; 1
    da26:	4b e0       	ldi	r20, 0x0B	; 11
    da28:	50 e1       	ldi	r21, 0x10	; 16
    da2a:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		      lcd_printf(3,1,PSTR("Invalid New Password"));
    da2e:	83 e0       	ldi	r24, 0x03	; 3
    da30:	61 e0       	ldi	r22, 0x01	; 1
    da32:	46 ef       	ldi	r20, 0xF6	; 246
    da34:	5f e0       	ldi	r21, 0x0F	; 15
    da36:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		      stSettingOperator=soDisplayInvalidPassword;
    da3a:	8d e0       	ldi	r24, 0x0D	; 13
    da3c:	80 93 1e 02 	sts	0x021E, r24
    da40:	24 c0       	rjmp	.+72     	; 0xda8a <FSettingOperator+0x5b4>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    da42:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    da44:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    da46:	82 e0       	ldi	r24, 0x02	; 2
    da48:	80 93 bc 01 	sts	0x01BC, r24
		      stSettingOperator=soDisplayInvalidPassword;
			  }
		  }else {
		   //InvalidOld Password
		   system_beep(2);
		   TimDisplay=0;
    da4c:	10 92 92 01 	sts	0x0192, r1
		   lcd_clear();
    da50:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
		   lcd_printf(2,1,PSTR("      ERROR         "));
    da54:	82 e0       	ldi	r24, 0x02	; 2
    da56:	61 e0       	ldi	r22, 0x01	; 1
    da58:	41 ee       	ldi	r20, 0xE1	; 225
    da5a:	5f e0       	ldi	r21, 0x0F	; 15
    da5c:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		   lcd_printf(3,1,PSTR("Invalid Old Password"));
    da60:	83 e0       	ldi	r24, 0x03	; 3
    da62:	61 e0       	ldi	r22, 0x01	; 1
    da64:	4c ec       	ldi	r20, 0xCC	; 204
    da66:	5f e0       	ldi	r21, 0x0F	; 15
    da68:	e6 cf       	rjmp	.-52     	; 0xda36 <FSettingOperator+0x560>
		   stSettingOperator=soDisplayInvalidPassword;
		   }
	      break;
     case soDisplayInvalidPassword:
	      if (TimDisplay>6)stSettingOperator=soMenuOption;
    da6a:	80 91 92 01 	lds	r24, 0x0192
    da6e:	87 30       	cpi	r24, 0x07	; 7
    da70:	60 f0       	brcs	.+24     	; 0xda8a <FSettingOperator+0x5b4>
    da72:	04 c0       	rjmp	.+8      	; 0xda7c <FSettingOperator+0x5a6>
	      break;
     case soDelayDisplaySaved:
	      if (TimDisplay>4)stSettingOperator=soMenuOption;
    da74:	80 91 92 01 	lds	r24, 0x0192
    da78:	85 30       	cpi	r24, 0x05	; 5
    da7a:	38 f0       	brcs	.+14     	; 0xda8a <FSettingOperator+0x5b4>
    da7c:	10 92 1e 02 	sts	0x021E, r1
    da80:	04 c0       	rjmp	.+8      	; 0xda8a <FSettingOperator+0x5b4>
	      break;
	 case soExitSettingOperator:
	      stSettingOperator=soMenuOption;
    da82:	10 92 1e 02 	sts	0x021E, r1
    da86:	81 e0       	ldi	r24, 0x01	; 1
    da88:	01 c0       	rjmp	.+2      	; 0xda8c <FSettingOperator+0x5b6>
    da8a:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
	      break;
	 }
     return Result;
}
    da8c:	e5 96       	adiw	r28, 0x35	; 53
    da8e:	0f b6       	in	r0, 0x3f	; 63
    da90:	f8 94       	cli
    da92:	de bf       	out	0x3e, r29	; 62
    da94:	0f be       	out	0x3f, r0	; 63
    da96:	cd bf       	out	0x3d, r28	; 61
    da98:	cf 91       	pop	r28
    da9a:	df 91       	pop	r29
    da9c:	1f 91       	pop	r17
    da9e:	0f 91       	pop	r16
    daa0:	ef 90       	pop	r14
    daa2:	08 95       	ret

0000daa4 <FSettingProduct>:

void menu_product(){

}

char FSettingProduct(){//Using strDescription
    daa4:	6f 92       	push	r6
    daa6:	7f 92       	push	r7
    daa8:	8f 92       	push	r8
    daaa:	9f 92       	push	r9
    daac:	af 92       	push	r10
    daae:	bf 92       	push	r11
    dab0:	cf 92       	push	r12
    dab2:	df 92       	push	r13
    dab4:	ef 92       	push	r14
    dab6:	ff 92       	push	r15
    dab8:	0f 93       	push	r16
    daba:	1f 93       	push	r17
    dabc:	df 93       	push	r29
    dabe:	cf 93       	push	r28
    dac0:	cd b7       	in	r28, 0x3d	; 61
    dac2:	de b7       	in	r29, 0x3e	; 62
    dac4:	a1 97       	sbiw	r28, 0x21	; 33
    dac6:	0f b6       	in	r0, 0x3f	; 63
    dac8:	f8 94       	cli
    daca:	de bf       	out	0x3e, r29	; 62
    dacc:	0f be       	out	0x3f, r0	; 63
    dace:	cd bf       	out	0x3d, r28	; 61
     char i;//,x,y;
	 char strProductName[13],lcdteks[20];
	 char Result=MENU_NONE;
	 
     Result=MENU_NONE;
     switch(stMenuProduct){
    dad0:	80 91 21 02 	lds	r24, 0x0221
    dad4:	83 30       	cpi	r24, 0x03	; 3
    dad6:	09 f4       	brne	.+2      	; 0xdada <FSettingProduct+0x36>
    dad8:	f9 c0       	rjmp	.+498    	; 0xdccc <FSettingProduct+0x228>
    dada:	84 30       	cpi	r24, 0x04	; 4
    dadc:	38 f4       	brcc	.+14     	; 0xdaec <FSettingProduct+0x48>
    dade:	81 30       	cpi	r24, 0x01	; 1
    dae0:	09 f4       	brne	.+2      	; 0xdae4 <FSettingProduct+0x40>
    dae2:	70 c0       	rjmp	.+224    	; 0xdbc4 <FSettingProduct+0x120>
    dae4:	82 30       	cpi	r24, 0x02	; 2
    dae6:	08 f0       	brcs	.+2      	; 0xdaea <FSettingProduct+0x46>
    dae8:	80 c0       	rjmp	.+256    	; 0xdbea <FSettingProduct+0x146>
    daea:	0a c0       	rjmp	.+20     	; 0xdb00 <FSettingProduct+0x5c>
    daec:	85 30       	cpi	r24, 0x05	; 5
    daee:	09 f4       	brne	.+2      	; 0xdaf2 <FSettingProduct+0x4e>
    daf0:	79 c1       	rjmp	.+754    	; 0xdde4 <FSettingProduct+0x340>
    daf2:	85 30       	cpi	r24, 0x05	; 5
    daf4:	08 f4       	brcc	.+2      	; 0xdaf8 <FSettingProduct+0x54>
    daf6:	94 c1       	rjmp	.+808    	; 0xde20 <FSettingProduct+0x37c>
    daf8:	86 30       	cpi	r24, 0x06	; 6
    dafa:	09 f0       	breq	.+2      	; 0xdafe <FSettingProduct+0x5a>
    dafc:	b7 c1       	rjmp	.+878    	; 0xde6c <FSettingProduct+0x3c8>
    dafe:	b2 c1       	rjmp	.+868    	; 0xde64 <FSettingProduct+0x3c0>
	 case mpInitProduct:
	      //DisplayProductName
		  lcd_clear();
    db00:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
    db04:	9b eb       	ldi	r25, 0xBB	; 187
    db06:	c9 2e       	mov	r12, r25
    db08:	90 e0       	ldi	r25, 0x00	; 0
    db0a:	d9 2e       	mov	r13, r25
    db0c:	81 e0       	ldi	r24, 0x01	; 1
    db0e:	e8 2e       	mov	r14, r24
    db10:	f1 2c       	mov	r15, r1
		  //lcd_printf(1,1,PSTR("Product:"));
	      for(i=0;i<6;i++){//234 
	          eeprom_read_block((void*) &strProductName, (const void*) &DefProductName[i], 13);
    db12:	4e 01       	movw	r8, r28
    db14:	08 94       	sec
    db16:	81 1c       	adc	r8, r1
    db18:	91 1c       	adc	r9, r1
	          sprintf_P(lcdteks,PSTR("%d)%s"),(i+1),strProductName);
    db1a:	0e e0       	ldi	r16, 0x0E	; 14
    db1c:	a0 2e       	mov	r10, r16
    db1e:	b1 2c       	mov	r11, r1
    db20:	ac 0e       	add	r10, r28
    db22:	bd 1e       	adc	r11, r29
    db24:	16 ea       	ldi	r17, 0xA6	; 166
    db26:	61 2e       	mov	r6, r17
    db28:	13 e1       	ldi	r17, 0x13	; 19
    db2a:	71 2e       	mov	r7, r17
			  lcd_print((((i)%4)+1),(((i)/4)*10)+1,lcdteks);
    db2c:	0a e0       	ldi	r16, 0x0A	; 10
	 
     Result=MENU_NONE;
     switch(stMenuProduct){
	 case mpInitProduct:
	      //DisplayProductName
		  lcd_clear();
    db2e:	1e 2d       	mov	r17, r14
    db30:	11 50       	subi	r17, 0x01	; 1
		  //lcd_printf(1,1,PSTR("Product:"));
	      for(i=0;i<6;i++){//234 
	          eeprom_read_block((void*) &strProductName, (const void*) &DefProductName[i], 13);
    db32:	c4 01       	movw	r24, r8
    db34:	b6 01       	movw	r22, r12
    db36:	4d e0       	ldi	r20, 0x0D	; 13
    db38:	50 e0       	ldi	r21, 0x00	; 0
    db3a:	0e 94 b9 ac 	call	0x15972	; 0x15972 <__eerd_block_m128>
	          sprintf_P(lcdteks,PSTR("%d)%s"),(i+1),strProductName);
    db3e:	8d b7       	in	r24, 0x3d	; 61
    db40:	9e b7       	in	r25, 0x3e	; 62
    db42:	08 97       	sbiw	r24, 0x08	; 8
    db44:	0f b6       	in	r0, 0x3f	; 63
    db46:	f8 94       	cli
    db48:	9e bf       	out	0x3e, r25	; 62
    db4a:	0f be       	out	0x3f, r0	; 63
    db4c:	8d bf       	out	0x3d, r24	; 61
    db4e:	ed b7       	in	r30, 0x3d	; 61
    db50:	fe b7       	in	r31, 0x3e	; 62
    db52:	31 96       	adiw	r30, 0x01	; 1
    db54:	ad b7       	in	r26, 0x3d	; 61
    db56:	be b7       	in	r27, 0x3e	; 62
    db58:	12 96       	adiw	r26, 0x02	; 2
    db5a:	bc 92       	st	X, r11
    db5c:	ae 92       	st	-X, r10
    db5e:	11 97       	sbiw	r26, 0x01	; 1
    db60:	73 82       	std	Z+3, r7	; 0x03
    db62:	62 82       	std	Z+2, r6	; 0x02
    db64:	f5 82       	std	Z+5, r15	; 0x05
    db66:	e4 82       	std	Z+4, r14	; 0x04
    db68:	97 82       	std	Z+7, r9	; 0x07
    db6a:	86 82       	std	Z+6, r8	; 0x06
    db6c:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
			  lcd_print((((i)%4)+1),(((i)/4)*10)+1,lcdteks);
    db70:	8d b7       	in	r24, 0x3d	; 61
    db72:	9e b7       	in	r25, 0x3e	; 62
    db74:	08 96       	adiw	r24, 0x08	; 8
    db76:	0f b6       	in	r0, 0x3f	; 63
    db78:	f8 94       	cli
    db7a:	9e bf       	out	0x3e, r25	; 62
    db7c:	0f be       	out	0x3f, r0	; 63
    db7e:	8d bf       	out	0x3d, r24	; 61
    db80:	61 2f       	mov	r22, r17
    db82:	66 95       	lsr	r22
    db84:	66 95       	lsr	r22
    db86:	60 9f       	mul	r22, r16
    db88:	b0 01       	movw	r22, r0
    db8a:	11 24       	eor	r1, r1
    db8c:	6f 5f       	subi	r22, 0xFF	; 255
    db8e:	13 70       	andi	r17, 0x03	; 3
    db90:	81 2f       	mov	r24, r17
    db92:	8f 5f       	subi	r24, 0xFF	; 255
    db94:	a5 01       	movw	r20, r10
    db96:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
    db9a:	ad e0       	ldi	r26, 0x0D	; 13
    db9c:	b0 e0       	ldi	r27, 0x00	; 0
    db9e:	ca 0e       	add	r12, r26
    dba0:	db 1e       	adc	r13, r27
    dba2:	08 94       	sec
    dba4:	e1 1c       	adc	r14, r1
    dba6:	f1 1c       	adc	r15, r1
     switch(stMenuProduct){
	 case mpInitProduct:
	      //DisplayProductName
		  lcd_clear();
		  //lcd_printf(1,1,PSTR("Product:"));
	      for(i=0;i<6;i++){//234 
    dba8:	b9 e0       	ldi	r27, 0x09	; 9
    dbaa:	cb 16       	cp	r12, r27
    dbac:	b1 e0       	ldi	r27, 0x01	; 1
    dbae:	db 06       	cpc	r13, r27
    dbb0:	09 f0       	breq	.+2      	; 0xdbb4 <FSettingProduct+0x110>
    dbb2:	bd cf       	rjmp	.-134    	; 0xdb2e <FSettingProduct+0x8a>
	          eeprom_read_block((void*) &strProductName, (const void*) &DefProductName[i], 13);
	          sprintf_P(lcdteks,PSTR("%d)%s"),(i+1),strProductName);
			  lcd_print((((i)%4)+1),(((i)/4)*10)+1,lcdteks);
		  }
		  lcd_printf(4,11,PSTR("*)Back"));
    dbb4:	84 e0       	ldi	r24, 0x04	; 4
    dbb6:	6b e0       	ldi	r22, 0x0B	; 11
    dbb8:	4f e9       	ldi	r20, 0x9F	; 159
    dbba:	53 e1       	ldi	r21, 0x13	; 19
    dbbc:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
          stMenuProduct=mpChangeProduct;
    dbc0:	81 e0       	ldi	r24, 0x01	; 1
    dbc2:	4a c1       	rjmp	.+660    	; 0xde58 <FSettingProduct+0x3b4>
	      break;
     case mpChangeProduct:
		  KeyPressed=_key_scan(1);
    dbc4:	81 e0       	ldi	r24, 0x01	; 1
    dbc6:	0e 94 f6 a5 	call	0x14bec	; 0x14bec <_key_scan>
    dbca:	18 2f       	mov	r17, r24
		  KeyChar=_key_btn(KeyPressed);
    dbcc:	0e 94 57 a5 	call	0x14aae	; 0x14aae <_key_btn>
		  if ((KeyChar>='1')&&(KeyChar<='6')){
    dbd0:	81 53       	subi	r24, 0x31	; 49
    dbd2:	86 30       	cpi	r24, 0x06	; 6
    dbd4:	28 f4       	brcc	.+10     	; 0xdbe0 <FSettingProduct+0x13c>
		      ProdID=KeyChar-'1';
    dbd6:	80 93 20 02 	sts	0x0220, r24
			  stMenuProduct=mpDispPrice;
    dbda:	82 e0       	ldi	r24, 0x02	; 2
    dbdc:	80 93 21 02 	sts	0x0221, r24
		  }
		  if (KeyPressed==_KEY_CANCEL){
    dbe0:	17 3e       	cpi	r17, 0xE7	; 231
    dbe2:	09 f0       	breq	.+2      	; 0xdbe6 <FSettingProduct+0x142>
    dbe4:	43 c1       	rjmp	.+646    	; 0xde6c <FSettingProduct+0x3c8>
		      stMenuProduct=mpExitMenuProduct;
    dbe6:	86 e0       	ldi	r24, 0x06	; 6
    dbe8:	37 c1       	rjmp	.+622    	; 0xde58 <FSettingProduct+0x3b4>
		  }
	      break;
     case mpDispPrice:
	 	  eeprom_read_block((void*) &strProductName, (const void*) &DefProductName[ProdID], 13);
    dbea:	60 91 20 02 	lds	r22, 0x0220
    dbee:	8d e0       	ldi	r24, 0x0D	; 13
    dbf0:	68 9f       	mul	r22, r24
    dbf2:	b0 01       	movw	r22, r0
    dbf4:	11 24       	eor	r1, r1
    dbf6:	65 54       	subi	r22, 0x45	; 69
    dbf8:	7f 4f       	sbci	r23, 0xFF	; 255
    dbfa:	7e 01       	movw	r14, r28
    dbfc:	08 94       	sec
    dbfe:	e1 1c       	adc	r14, r1
    dc00:	f1 1c       	adc	r15, r1
    dc02:	c7 01       	movw	r24, r14
    dc04:	4d e0       	ldi	r20, 0x0D	; 13
    dc06:	50 e0       	ldi	r21, 0x00	; 0
    dc08:	0e 94 b9 ac 	call	0x15972	; 0x15972 <__eerd_block_m128>
		  eeprom_read_block((void*) &strPrice, (const void*) &DefProductPrice[ProdID], 9);
    dc0c:	be e9       	ldi	r27, 0x9E	; 158
    dc0e:	cb 2e       	mov	r12, r27
    dc10:	b5 e0       	ldi	r27, 0x05	; 5
    dc12:	db 2e       	mov	r13, r27
    dc14:	60 91 20 02 	lds	r22, 0x0220
    dc18:	89 e0       	ldi	r24, 0x09	; 9
    dc1a:	68 9f       	mul	r22, r24
    dc1c:	b0 01       	movw	r22, r0
    dc1e:	11 24       	eor	r1, r1
    dc20:	6b 57       	subi	r22, 0x7B	; 123
    dc22:	7f 4f       	sbci	r23, 0xFF	; 255
    dc24:	c6 01       	movw	r24, r12
    dc26:	49 e0       	ldi	r20, 0x09	; 9
    dc28:	50 e0       	ldi	r21, 0x00	; 0
    dc2a:	0e 94 b9 ac 	call	0x15972	; 0x15972 <__eerd_block_m128>
		  sprintf_P(lcdteks,PSTR("1)%s"),strProductName);
    dc2e:	00 d0       	rcall	.+0      	; 0xdc30 <FSettingProduct+0x18c>
    dc30:	00 d0       	rcall	.+0      	; 0xdc32 <FSettingProduct+0x18e>
    dc32:	00 d0       	rcall	.+0      	; 0xdc34 <FSettingProduct+0x190>
    dc34:	ed b7       	in	r30, 0x3d	; 61
    dc36:	fe b7       	in	r31, 0x3e	; 62
    dc38:	31 96       	adiw	r30, 0x01	; 1
    dc3a:	8e 01       	movw	r16, r28
    dc3c:	02 5f       	subi	r16, 0xF2	; 242
    dc3e:	1f 4f       	sbci	r17, 0xFF	; 255
    dc40:	ad b7       	in	r26, 0x3d	; 61
    dc42:	be b7       	in	r27, 0x3e	; 62
    dc44:	12 96       	adiw	r26, 0x02	; 2
    dc46:	1c 93       	st	X, r17
    dc48:	0e 93       	st	-X, r16
    dc4a:	11 97       	sbiw	r26, 0x01	; 1
    dc4c:	8a e9       	ldi	r24, 0x9A	; 154
    dc4e:	93 e1       	ldi	r25, 0x13	; 19
    dc50:	93 83       	std	Z+3, r25	; 0x03
    dc52:	82 83       	std	Z+2, r24	; 0x02
    dc54:	f5 82       	std	Z+5, r15	; 0x05
    dc56:	e4 82       	std	Z+4, r14	; 0x04
    dc58:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
		  lcd_clear();lcd_print(1,1,lcdteks);
    dc5c:	8d b7       	in	r24, 0x3d	; 61
    dc5e:	9e b7       	in	r25, 0x3e	; 62
    dc60:	06 96       	adiw	r24, 0x06	; 6
    dc62:	0f b6       	in	r0, 0x3f	; 63
    dc64:	f8 94       	cli
    dc66:	9e bf       	out	0x3e, r25	; 62
    dc68:	0f be       	out	0x3f, r0	; 63
    dc6a:	8d bf       	out	0x3d, r24	; 61
    dc6c:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
    dc70:	81 e0       	ldi	r24, 0x01	; 1
    dc72:	61 e0       	ldi	r22, 0x01	; 1
    dc74:	a8 01       	movw	r20, r16
    dc76:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
		  sprintf_P(lcdteks,PSTR("2)%s"),strPrice);
    dc7a:	00 d0       	rcall	.+0      	; 0xdc7c <FSettingProduct+0x1d8>
    dc7c:	00 d0       	rcall	.+0      	; 0xdc7e <FSettingProduct+0x1da>
    dc7e:	00 d0       	rcall	.+0      	; 0xdc80 <FSettingProduct+0x1dc>
    dc80:	ed b7       	in	r30, 0x3d	; 61
    dc82:	fe b7       	in	r31, 0x3e	; 62
    dc84:	31 96       	adiw	r30, 0x01	; 1
    dc86:	ad b7       	in	r26, 0x3d	; 61
    dc88:	be b7       	in	r27, 0x3e	; 62
    dc8a:	12 96       	adiw	r26, 0x02	; 2
    dc8c:	1c 93       	st	X, r17
    dc8e:	0e 93       	st	-X, r16
    dc90:	11 97       	sbiw	r26, 0x01	; 1
    dc92:	85 e9       	ldi	r24, 0x95	; 149
    dc94:	93 e1       	ldi	r25, 0x13	; 19
    dc96:	93 83       	std	Z+3, r25	; 0x03
    dc98:	82 83       	std	Z+2, r24	; 0x02
    dc9a:	d5 82       	std	Z+5, r13	; 0x05
    dc9c:	c4 82       	std	Z+4, r12	; 0x04
    dc9e:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
		  lcd_print(2,1,lcdteks);
    dca2:	8d b7       	in	r24, 0x3d	; 61
    dca4:	9e b7       	in	r25, 0x3e	; 62
    dca6:	06 96       	adiw	r24, 0x06	; 6
    dca8:	0f b6       	in	r0, 0x3f	; 63
    dcaa:	f8 94       	cli
    dcac:	9e bf       	out	0x3e, r25	; 62
    dcae:	0f be       	out	0x3f, r0	; 63
    dcb0:	8d bf       	out	0x3d, r24	; 61
    dcb2:	82 e0       	ldi	r24, 0x02	; 2
    dcb4:	61 e0       	ldi	r22, 0x01	; 1
    dcb6:	a8 01       	movw	r20, r16
    dcb8:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
		  lcd_printf(4,1,PSTR("*)Back       "));
    dcbc:	84 e0       	ldi	r24, 0x04	; 4
    dcbe:	61 e0       	ldi	r22, 0x01	; 1
    dcc0:	47 e8       	ldi	r20, 0x87	; 135
    dcc2:	53 e1       	ldi	r21, 0x13	; 19
    dcc4:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  stMenuProduct=mpIsEdit;
    dcc8:	83 e0       	ldi	r24, 0x03	; 3
    dcca:	c6 c0       	rjmp	.+396    	; 0xde58 <FSettingProduct+0x3b4>
	      break;
     case mpIsEdit:
		  KeyPressed=_key_scan(1);
    dccc:	81 e0       	ldi	r24, 0x01	; 1
    dcce:	0e 94 f6 a5 	call	0x14bec	; 0x14bec <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
    dcd2:	0e 94 57 a5 	call	0x14aae	; 0x14aae <_key_btn>
		  if (KeyChar=='*'){
    dcd6:	8a 32       	cpi	r24, 0x2A	; 42
    dcd8:	09 f4       	brne	.+2      	; 0xdcdc <FSettingProduct+0x238>
    dcda:	9f c0       	rjmp	.+318    	; 0xde1a <FSettingProduct+0x376>
		      stMenuProduct=mpInitProduct;
		  }else
		  if (KeyChar=='1'){
    dcdc:	81 33       	cpi	r24, 0x31	; 49
    dcde:	09 f0       	breq	.+2      	; 0xdce2 <FSettingProduct+0x23e>
    dce0:	4a c0       	rjmp	.+148    	; 0xdd76 <FSettingProduct+0x2d2>
		      eeprom_read_block((void*) &strProductName, (const void*) &DefProductName[ProdID], 13);
    dce2:	60 91 20 02 	lds	r22, 0x0220
    dce6:	8d e0       	ldi	r24, 0x0D	; 13
    dce8:	68 9f       	mul	r22, r24
    dcea:	b0 01       	movw	r22, r0
    dcec:	11 24       	eor	r1, r1
    dcee:	65 54       	subi	r22, 0x45	; 69
    dcf0:	7f 4f       	sbci	r23, 0xFF	; 255
    dcf2:	8e 01       	movw	r16, r28
    dcf4:	0f 5f       	subi	r16, 0xFF	; 255
    dcf6:	1f 4f       	sbci	r17, 0xFF	; 255
    dcf8:	c8 01       	movw	r24, r16
    dcfa:	4d e0       	ldi	r20, 0x0D	; 13
    dcfc:	50 e0       	ldi	r21, 0x00	; 0
    dcfe:	0e 94 b9 ac 	call	0x15972	; 0x15972 <__eerd_block_m128>
		      sprintf_P(lcdteks,PSTR("Old:%s"),strProductName);
    dd02:	00 d0       	rcall	.+0      	; 0xdd04 <FSettingProduct+0x260>
    dd04:	00 d0       	rcall	.+0      	; 0xdd06 <FSettingProduct+0x262>
    dd06:	00 d0       	rcall	.+0      	; 0xdd08 <FSettingProduct+0x264>
    dd08:	ed b7       	in	r30, 0x3d	; 61
    dd0a:	fe b7       	in	r31, 0x3e	; 62
    dd0c:	31 96       	adiw	r30, 0x01	; 1
    dd0e:	ae e0       	ldi	r26, 0x0E	; 14
    dd10:	ea 2e       	mov	r14, r26
    dd12:	f1 2c       	mov	r15, r1
    dd14:	ec 0e       	add	r14, r28
    dd16:	fd 1e       	adc	r15, r29
    dd18:	ad b7       	in	r26, 0x3d	; 61
    dd1a:	be b7       	in	r27, 0x3e	; 62
    dd1c:	12 96       	adiw	r26, 0x02	; 2
    dd1e:	fc 92       	st	X, r15
    dd20:	ee 92       	st	-X, r14
    dd22:	11 97       	sbiw	r26, 0x01	; 1
    dd24:	80 e8       	ldi	r24, 0x80	; 128
    dd26:	93 e1       	ldi	r25, 0x13	; 19
    dd28:	93 83       	std	Z+3, r25	; 0x03
    dd2a:	82 83       	std	Z+2, r24	; 0x02
    dd2c:	15 83       	std	Z+5, r17	; 0x05
    dd2e:	04 83       	std	Z+4, r16	; 0x04
    dd30:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
			  lcd_printf(1,1,PSTR("Edit Product Name   "));
    dd34:	8d b7       	in	r24, 0x3d	; 61
    dd36:	9e b7       	in	r25, 0x3e	; 62
    dd38:	06 96       	adiw	r24, 0x06	; 6
    dd3a:	0f b6       	in	r0, 0x3f	; 63
    dd3c:	f8 94       	cli
    dd3e:	9e bf       	out	0x3e, r25	; 62
    dd40:	0f be       	out	0x3f, r0	; 63
    dd42:	8d bf       	out	0x3d, r24	; 61
    dd44:	81 e0       	ldi	r24, 0x01	; 1
    dd46:	61 e0       	ldi	r22, 0x01	; 1
    dd48:	4b e6       	ldi	r20, 0x6B	; 107
    dd4a:	53 e1       	ldi	r21, 0x13	; 19
    dd4c:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		       lcd_print(2,1,lcdteks);
    dd50:	82 e0       	ldi	r24, 0x02	; 2
    dd52:	61 e0       	ldi	r22, 0x01	; 1
    dd54:	a7 01       	movw	r20, r14
    dd56:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
			  lcd_printf(3,1,PSTR("New:_"));
    dd5a:	83 e0       	ldi	r24, 0x03	; 3
    dd5c:	61 e0       	ldi	r22, 0x01	; 1
    dd5e:	45 e6       	ldi	r20, 0x65	; 101
    dd60:	53 e1       	ldi	r21, 0x13	; 19
    dd62:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		      lcd_printf(4,1,PSTR("*)Back    #)OK      "));
    dd66:	84 e0       	ldi	r24, 0x04	; 4
    dd68:	61 e0       	ldi	r22, 0x01	; 1
    dd6a:	40 e5       	ldi	r20, 0x50	; 80
    dd6c:	53 e1       	ldi	r21, 0x13	; 19
    dd6e:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		      stMenuProduct=mpEditProductName;
    dd72:	85 e0       	ldi	r24, 0x05	; 5
    dd74:	71 c0       	rjmp	.+226    	; 0xde58 <FSettingProduct+0x3b4>
		  }else
		  if (KeyChar=='2'){
    dd76:	82 33       	cpi	r24, 0x32	; 50
    dd78:	09 f0       	breq	.+2      	; 0xdd7c <FSettingProduct+0x2d8>
    dd7a:	78 c0       	rjmp	.+240    	; 0xde6c <FSettingProduct+0x3c8>
		      uiResult=USER_NONE;
		      sprintf_P(lcdteks,PSTR("Old:%s"),strPrice);
    dd7c:	00 d0       	rcall	.+0      	; 0xdd7e <FSettingProduct+0x2da>
    dd7e:	00 d0       	rcall	.+0      	; 0xdd80 <FSettingProduct+0x2dc>
    dd80:	00 d0       	rcall	.+0      	; 0xdd82 <FSettingProduct+0x2de>
    dd82:	ed b7       	in	r30, 0x3d	; 61
    dd84:	fe b7       	in	r31, 0x3e	; 62
    dd86:	31 96       	adiw	r30, 0x01	; 1
    dd88:	8e 01       	movw	r16, r28
    dd8a:	02 5f       	subi	r16, 0xF2	; 242
    dd8c:	1f 4f       	sbci	r17, 0xFF	; 255
    dd8e:	ad b7       	in	r26, 0x3d	; 61
    dd90:	be b7       	in	r27, 0x3e	; 62
    dd92:	12 96       	adiw	r26, 0x02	; 2
    dd94:	1c 93       	st	X, r17
    dd96:	0e 93       	st	-X, r16
    dd98:	11 97       	sbiw	r26, 0x01	; 1
    dd9a:	89 e4       	ldi	r24, 0x49	; 73
    dd9c:	93 e1       	ldi	r25, 0x13	; 19
    dd9e:	93 83       	std	Z+3, r25	; 0x03
    dda0:	82 83       	std	Z+2, r24	; 0x02
    dda2:	8e e9       	ldi	r24, 0x9E	; 158
    dda4:	95 e0       	ldi	r25, 0x05	; 5
    dda6:	95 83       	std	Z+5, r25	; 0x05
    dda8:	84 83       	std	Z+4, r24	; 0x04
    ddaa:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
		       lcd_print(2,1,lcdteks);
    ddae:	8d b7       	in	r24, 0x3d	; 61
    ddb0:	9e b7       	in	r25, 0x3e	; 62
    ddb2:	06 96       	adiw	r24, 0x06	; 6
    ddb4:	0f b6       	in	r0, 0x3f	; 63
    ddb6:	f8 94       	cli
    ddb8:	9e bf       	out	0x3e, r25	; 62
    ddba:	0f be       	out	0x3f, r0	; 63
    ddbc:	8d bf       	out	0x3d, r24	; 61
    ddbe:	82 e0       	ldi	r24, 0x02	; 2
    ddc0:	61 e0       	ldi	r22, 0x01	; 1
    ddc2:	a8 01       	movw	r20, r16
    ddc4:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
			  lcd_printf(3,1,PSTR("New:_"));
    ddc8:	83 e0       	ldi	r24, 0x03	; 3
    ddca:	61 e0       	ldi	r22, 0x01	; 1
    ddcc:	43 e4       	ldi	r20, 0x43	; 67
    ddce:	53 e1       	ldi	r21, 0x13	; 19
    ddd0:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		      lcd_printf(4,1,PSTR("*)Back    #)OK      "));
    ddd4:	84 e0       	ldi	r24, 0x04	; 4
    ddd6:	61 e0       	ldi	r22, 0x01	; 1
    ddd8:	4e e2       	ldi	r20, 0x2E	; 46
    ddda:	53 e1       	ldi	r21, 0x13	; 19
    dddc:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		      stMenuProduct=mpEditPrice;
    dde0:	84 e0       	ldi	r24, 0x04	; 4
    dde2:	3a c0       	rjmp	.+116    	; 0xde58 <FSettingProduct+0x3b4>
		  }
	      break;
     case mpEditProductName:
	      uiResult=UserInput(UI_ALPHANUM_R,3,5,strDescription,0,10);
    dde4:	83 e0       	ldi	r24, 0x03	; 3
    dde6:	63 e0       	ldi	r22, 0x03	; 3
    dde8:	45 e0       	ldi	r20, 0x05	; 5
    ddea:	2c e0       	ldi	r18, 0x0C	; 12
    ddec:	38 e0       	ldi	r19, 0x08	; 8
    ddee:	00 e0       	ldi	r16, 0x00	; 0
    ddf0:	10 e0       	ldi	r17, 0x00	; 0
    ddf2:	7a e0       	ldi	r23, 0x0A	; 10
    ddf4:	e7 2e       	mov	r14, r23
    ddf6:	0e 94 47 67 	call	0xce8e	; 0xce8e <UserInput>
		  if (uiResult==USER_OK){
    ddfa:	83 30       	cpi	r24, 0x03	; 3
    ddfc:	81 f5       	brne	.+96     	; 0xde5e <FSettingProduct+0x3ba>
		      eeprom_write_block((const void*)&strDescription,(void*)&DefProductName[ProdID], 13);
    ddfe:	60 91 20 02 	lds	r22, 0x0220
    de02:	8d e0       	ldi	r24, 0x0D	; 13
    de04:	68 9f       	mul	r22, r24
    de06:	b0 01       	movw	r22, r0
    de08:	11 24       	eor	r1, r1
    de0a:	65 54       	subi	r22, 0x45	; 69
    de0c:	7f 4f       	sbci	r23, 0xFF	; 255
    de0e:	8c e0       	ldi	r24, 0x0C	; 12
    de10:	98 e0       	ldi	r25, 0x08	; 8
    de12:	4d e0       	ldi	r20, 0x0D	; 13
    de14:	50 e0       	ldi	r21, 0x00	; 0
    de16:	0e 94 d1 ac 	call	0x159a2	; 0x159a2 <__eewr_block_m128>
		      stMenuProduct=mpInitProduct;
    de1a:	10 92 21 02 	sts	0x0221, r1
    de1e:	26 c0       	rjmp	.+76     	; 0xde6c <FSettingProduct+0x3c8>
			  }
		  else
		  if (uiResult==USER_CANCEL)stMenuProduct=mpDispPrice;
	      break;
     case mpEditPrice:
	      uiResult=UserInput(UI_NUMBER_R,3,5,strPrice,0,7);
    de20:	81 e0       	ldi	r24, 0x01	; 1
    de22:	63 e0       	ldi	r22, 0x03	; 3
    de24:	45 e0       	ldi	r20, 0x05	; 5
    de26:	2e e9       	ldi	r18, 0x9E	; 158
    de28:	35 e0       	ldi	r19, 0x05	; 5
    de2a:	00 e0       	ldi	r16, 0x00	; 0
    de2c:	10 e0       	ldi	r17, 0x00	; 0
    de2e:	57 e0       	ldi	r21, 0x07	; 7
    de30:	e5 2e       	mov	r14, r21
    de32:	0e 94 47 67 	call	0xce8e	; 0xce8e <UserInput>
		  if (uiResult==USER_OK){
    de36:	83 30       	cpi	r24, 0x03	; 3
    de38:	91 f4       	brne	.+36     	; 0xde5e <FSettingProduct+0x3ba>
		      eeprom_write_block((const void*)&strPrice,(void*)&DefProductPrice[ProdID], 9);
    de3a:	60 91 20 02 	lds	r22, 0x0220
    de3e:	89 e0       	ldi	r24, 0x09	; 9
    de40:	68 9f       	mul	r22, r24
    de42:	b0 01       	movw	r22, r0
    de44:	11 24       	eor	r1, r1
    de46:	6b 57       	subi	r22, 0x7B	; 123
    de48:	7f 4f       	sbci	r23, 0xFF	; 255
    de4a:	8e e9       	ldi	r24, 0x9E	; 158
    de4c:	95 e0       	ldi	r25, 0x05	; 5
    de4e:	49 e0       	ldi	r20, 0x09	; 9
    de50:	50 e0       	ldi	r21, 0x00	; 0
    de52:	0e 94 d1 ac 	call	0x159a2	; 0x159a2 <__eewr_block_m128>
		      stMenuProduct=mpDispPrice;//stMenuProduct=mpInit;
    de56:	82 e0       	ldi	r24, 0x02	; 2
    de58:	80 93 21 02 	sts	0x0221, r24
    de5c:	07 c0       	rjmp	.+14     	; 0xde6c <FSettingProduct+0x3c8>
			  }
		  else
		  if (uiResult==USER_CANCEL)stMenuProduct=mpDispPrice;
    de5e:	81 30       	cpi	r24, 0x01	; 1
    de60:	29 f4       	brne	.+10     	; 0xde6c <FSettingProduct+0x3c8>
    de62:	f9 cf       	rjmp	.-14     	; 0xde56 <FSettingProduct+0x3b2>
	      break;
     case mpExitMenuProduct:
	      stMenuProduct=mpInitProduct;
    de64:	10 92 21 02 	sts	0x0221, r1
    de68:	81 e0       	ldi	r24, 0x01	; 1
    de6a:	01 c0       	rjmp	.+2      	; 0xde6e <FSettingProduct+0x3ca>
    de6c:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
	      break;
	 }
   return Result;
}
    de6e:	a1 96       	adiw	r28, 0x21	; 33
    de70:	0f b6       	in	r0, 0x3f	; 63
    de72:	f8 94       	cli
    de74:	de bf       	out	0x3e, r29	; 62
    de76:	0f be       	out	0x3f, r0	; 63
    de78:	cd bf       	out	0x3d, r28	; 61
    de7a:	cf 91       	pop	r28
    de7c:	df 91       	pop	r29
    de7e:	1f 91       	pop	r17
    de80:	0f 91       	pop	r16
    de82:	ff 90       	pop	r15
    de84:	ef 90       	pop	r14
    de86:	df 90       	pop	r13
    de88:	cf 90       	pop	r12
    de8a:	bf 90       	pop	r11
    de8c:	af 90       	pop	r10
    de8e:	9f 90       	pop	r9
    de90:	8f 90       	pop	r8
    de92:	7f 90       	pop	r7
    de94:	6f 90       	pop	r6
    de96:	08 95       	ret

0000de98 <FMenuSettingFooter>:
	 }
   //_menu_header();   
   return Result;
}

char FMenuSettingFooter(){
    de98:	ef 92       	push	r14
    de9a:	0f 93       	push	r16
    de9c:	1f 93       	push	r17
    de9e:	df 93       	push	r29
    dea0:	cf 93       	push	r28
    dea2:	cd b7       	in	r28, 0x3d	; 61
    dea4:	de b7       	in	r29, 0x3e	; 62
    dea6:	c6 54       	subi	r28, 0x46	; 70
    dea8:	d0 40       	sbci	r29, 0x00	; 0
    deaa:	0f b6       	in	r0, 0x3f	; 63
    deac:	f8 94       	cli
    deae:	de bf       	out	0x3e, r29	; 62
    deb0:	0f be       	out	0x3f, r0	; 63
    deb2:	cd bf       	out	0x3d, r28	; 61
	 char strHeaderFooter[50];
	 char KeyChar;
	 
	 Result=MENU_NONE;
     
	 switch (stSettingHeader){
    deb4:	80 91 44 02 	lds	r24, 0x0244
    deb8:	84 30       	cpi	r24, 0x04	; 4
    deba:	09 f4       	brne	.+2      	; 0xdebe <FMenuSettingFooter+0x26>
    debc:	3b c1       	rjmp	.+630    	; 0xe134 <FMenuSettingFooter+0x29c>
    debe:	85 30       	cpi	r24, 0x05	; 5
    dec0:	40 f4       	brcc	.+16     	; 0xded2 <FMenuSettingFooter+0x3a>
    dec2:	81 30       	cpi	r24, 0x01	; 1
    dec4:	79 f1       	breq	.+94     	; 0xdf24 <FMenuSettingFooter+0x8c>
    dec6:	81 30       	cpi	r24, 0x01	; 1
    dec8:	88 f0       	brcs	.+34     	; 0xdeec <FMenuSettingFooter+0x54>
    deca:	82 30       	cpi	r24, 0x02	; 2
    decc:	09 f0       	breq	.+2      	; 0xded0 <FMenuSettingFooter+0x38>
    dece:	7c c1       	rjmp	.+760    	; 0xe1c8 <FMenuSettingFooter+0x330>
    ded0:	74 c0       	rjmp	.+232    	; 0xdfba <FMenuSettingFooter+0x122>
    ded2:	86 30       	cpi	r24, 0x06	; 6
    ded4:	09 f4       	brne	.+2      	; 0xded8 <FMenuSettingFooter+0x40>
    ded6:	d3 c0       	rjmp	.+422    	; 0xe07e <FMenuSettingFooter+0x1e6>
    ded8:	86 30       	cpi	r24, 0x06	; 6
    deda:	08 f4       	brcc	.+2      	; 0xdede <FMenuSettingFooter+0x46>
    dedc:	bd c0       	rjmp	.+378    	; 0xe058 <FMenuSettingFooter+0x1c0>
    dede:	87 30       	cpi	r24, 0x07	; 7
    dee0:	09 f4       	brne	.+2      	; 0xdee4 <FMenuSettingFooter+0x4c>
    dee2:	36 c1       	rjmp	.+620    	; 0xe150 <FMenuSettingFooter+0x2b8>
    dee4:	88 30       	cpi	r24, 0x08	; 8
    dee6:	09 f0       	breq	.+2      	; 0xdeea <FMenuSettingFooter+0x52>
    dee8:	6f c1       	rjmp	.+734    	; 0xe1c8 <FMenuSettingFooter+0x330>
    deea:	6a c1       	rjmp	.+724    	; 0xe1c0 <FMenuSettingFooter+0x328>
	 case shInitHeader:
	      lcd_clear();
    deec:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
		  lcd_printf(1,1,PSTR("1)Footer1  3)Footer3"));
    def0:	81 e0       	ldi	r24, 0x01	; 1
    def2:	61 e0       	ldi	r22, 0x01	; 1
    def4:	4d e9       	ldi	r20, 0x9D	; 157
    def6:	55 e1       	ldi	r21, 0x15	; 21
    def8:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  lcd_printf(2,1,PSTR("2)Footer2  4)Footer4"));
    defc:	82 e0       	ldi	r24, 0x02	; 2
    defe:	61 e0       	ldi	r22, 0x01	; 1
    df00:	48 e8       	ldi	r20, 0x88	; 136
    df02:	55 e1       	ldi	r21, 0x15	; 21
    df04:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  lcd_printf(3,1,PSTR("                    "));
    df08:	83 e0       	ldi	r24, 0x03	; 3
    df0a:	61 e0       	ldi	r22, 0x01	; 1
    df0c:	43 e7       	ldi	r20, 0x73	; 115
    df0e:	55 e1       	ldi	r21, 0x15	; 21
    df10:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  lcd_printf(4,1,PSTR("*)Exit              "));
    df14:	84 e0       	ldi	r24, 0x04	; 4
    df16:	61 e0       	ldi	r22, 0x01	; 1
    df18:	4e e5       	ldi	r20, 0x5E	; 94
    df1a:	55 e1       	ldi	r21, 0x15	; 21
    df1c:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  stSettingHeader=shHeaderSelect;
    df20:	81 e0       	ldi	r24, 0x01	; 1
    df22:	10 c1       	rjmp	.+544    	; 0xe144 <FMenuSettingFooter+0x2ac>
	      break;
      case shHeaderSelect:
	      KeyChar=_key_btn(_key_scan(1));
    df24:	81 e0       	ldi	r24, 0x01	; 1
    df26:	0e 94 f6 a5 	call	0x14bec	; 0x14bec <_key_scan>
    df2a:	0e 94 57 a5 	call	0x14aae	; 0x14aae <_key_btn>
    df2e:	e8 2e       	mov	r14, r24
		  if ((KeyChar>='1')&&(KeyChar<='6')){
    df30:	81 53       	subi	r24, 0x31	; 49
    df32:	86 30       	cpi	r24, 0x06	; 6
    df34:	e0 f5       	brcc	.+120    	; 0xdfae <FMenuSettingFooter+0x116>
		       HeaderIdx=KeyChar-'1';//
    df36:	80 93 43 02 	sts	0x0243, r24
			   lcd_clear();
    df3a:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
			   sprintf_P(lcdteks,PSTR("Edit Footer%d "),HeaderIdx+1);
    df3e:	00 d0       	rcall	.+0      	; 0xdf40 <FMenuSettingFooter+0xa8>
    df40:	00 d0       	rcall	.+0      	; 0xdf42 <FMenuSettingFooter+0xaa>
    df42:	00 d0       	rcall	.+0      	; 0xdf44 <FMenuSettingFooter+0xac>
    df44:	ed b7       	in	r30, 0x3d	; 61
    df46:	fe b7       	in	r31, 0x3e	; 62
    df48:	31 96       	adiw	r30, 0x01	; 1
    df4a:	8e 01       	movw	r16, r28
    df4c:	0f 5f       	subi	r16, 0xFF	; 255
    df4e:	1f 4f       	sbci	r17, 0xFF	; 255
    df50:	ad b7       	in	r26, 0x3d	; 61
    df52:	be b7       	in	r27, 0x3e	; 62
    df54:	12 96       	adiw	r26, 0x02	; 2
    df56:	1c 93       	st	X, r17
    df58:	0e 93       	st	-X, r16
    df5a:	11 97       	sbiw	r26, 0x01	; 1
    df5c:	8f e4       	ldi	r24, 0x4F	; 79
    df5e:	95 e1       	ldi	r25, 0x15	; 21
    df60:	93 83       	std	Z+3, r25	; 0x03
    df62:	82 83       	std	Z+2, r24	; 0x02
    df64:	80 91 43 02 	lds	r24, 0x0243
    df68:	90 e0       	ldi	r25, 0x00	; 0
    df6a:	01 96       	adiw	r24, 0x01	; 1
    df6c:	95 83       	std	Z+5, r25	; 0x05
    df6e:	84 83       	std	Z+4, r24	; 0x04
    df70:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
			   lcd_print(1,1,lcdteks);
    df74:	8d b7       	in	r24, 0x3d	; 61
    df76:	9e b7       	in	r25, 0x3e	; 62
    df78:	06 96       	adiw	r24, 0x06	; 6
    df7a:	0f b6       	in	r0, 0x3f	; 63
    df7c:	f8 94       	cli
    df7e:	9e bf       	out	0x3e, r25	; 62
    df80:	0f be       	out	0x3f, r0	; 63
    df82:	8d bf       	out	0x3d, r24	; 61
    df84:	81 e0       	ldi	r24, 0x01	; 1
    df86:	61 e0       	ldi	r22, 0x01	; 1
    df88:	a8 01       	movw	r20, r16
    df8a:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
			   lcd_printf(4,1,PSTR("[*]Back  [#]OK"));
    df8e:	84 e0       	ldi	r24, 0x04	; 4
    df90:	61 e0       	ldi	r22, 0x01	; 1
    df92:	40 e4       	ldi	r20, 0x40	; 64
    df94:	55 e1       	ldi	r21, 0x15	; 21
    df96:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
    df9a:	ec ee       	ldi	r30, 0xEC	; 236
    df9c:	f3 e0       	ldi	r31, 0x03	; 3
}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
	     strMemory[i]=data;
    df9e:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    dfa0:	95 e0       	ldi	r25, 0x05	; 5
    dfa2:	ed 37       	cpi	r30, 0x7D	; 125
    dfa4:	f9 07       	cpc	r31, r25
    dfa6:	d9 f7       	brne	.-10     	; 0xdf9e <FMenuSettingFooter+0x106>
			   lcd_clear();
			   sprintf_P(lcdteks,PSTR("Edit Footer%d "),HeaderIdx+1);
			   lcd_print(1,1,lcdteks);
			   lcd_printf(4,1,PSTR("[*]Back  [#]OK"));
			   FillChar(PrintBuffer,sizeof(PrintBuffer),0);
			   stSettingHeader=shEditHeader1;
    dfa8:	82 e0       	ldi	r24, 0x02	; 2
    dfaa:	80 93 44 02 	sts	0x0244, r24
		  }
		  if(KeyChar=='*')stSettingHeader=shExitSettingHeader;
    dfae:	aa e2       	ldi	r26, 0x2A	; 42
    dfb0:	ea 16       	cp	r14, r26
    dfb2:	09 f0       	breq	.+2      	; 0xdfb6 <FMenuSettingFooter+0x11e>
    dfb4:	09 c1       	rjmp	.+530    	; 0xe1c8 <FMenuSettingFooter+0x330>
    dfb6:	88 e0       	ldi	r24, 0x08	; 8
    dfb8:	c5 c0       	rjmp	.+394    	; 0xe144 <FMenuSettingFooter+0x2ac>
	      break;
     case shEditHeader1:
          //uiResult=UserInput(UI_ALPHANUM_R,2,1,strFreeMessageLine1,0,20);
		  uiResult=UserInput(UI_ALPHANUM_R,2,1,PrintBuffer,0,40);
    dfba:	83 e0       	ldi	r24, 0x03	; 3
    dfbc:	62 e0       	ldi	r22, 0x02	; 2
    dfbe:	41 e0       	ldi	r20, 0x01	; 1
    dfc0:	2c ee       	ldi	r18, 0xEC	; 236
    dfc2:	33 e0       	ldi	r19, 0x03	; 3
    dfc4:	00 e0       	ldi	r16, 0x00	; 0
    dfc6:	10 e0       	ldi	r17, 0x00	; 0
    dfc8:	58 e2       	ldi	r21, 0x28	; 40
    dfca:	e5 2e       	mov	r14, r21
    dfcc:	0e 94 47 67 	call	0xce8e	; 0xce8e <UserInput>
		  if (uiResult==USER_OK){
    dfd0:	83 30       	cpi	r24, 0x03	; 3
    dfd2:	f1 f5       	brne	.+124    	; 0xe050 <FMenuSettingFooter+0x1b8>
			  lcd_clear();
    dfd4:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
			  AddSpaceLag(PrintBuffer,40);
    dfd8:	8c ee       	ldi	r24, 0xEC	; 236
    dfda:	93 e0       	ldi	r25, 0x03	; 3
    dfdc:	68 e2       	ldi	r22, 0x28	; 40
    dfde:	0e 94 64 2f 	call	0x5ec8	; 0x5ec8 <AddSpaceLag>
    dfe2:	20 e0       	ldi	r18, 0x00	; 0
    dfe4:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    dfe6:	f9 01       	movw	r30, r18
    dfe8:	ee 56       	subi	r30, 0x6E	; 110
    dfea:	f7 4f       	sbci	r31, 0xF7	; 247
    dfec:	d9 01       	movw	r26, r18
    dfee:	a4 51       	subi	r26, 0x14	; 20
    dff0:	bc 4f       	sbci	r27, 0xFC	; 252
    dff2:	8c 91       	ld	r24, X
    dff4:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    dff6:	2f 5f       	subi	r18, 0xFF	; 255
    dff8:	3f 4f       	sbci	r19, 0xFF	; 255
    dffa:	24 31       	cpi	r18, 0x14	; 20
    dffc:	31 05       	cpc	r19, r1
    dffe:	99 f7       	brne	.-26     	; 0xdfe6 <FMenuSettingFooter+0x14e>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    e000:	10 92 a6 08 	sts	0x08A6, r1
    e004:	e0 e0       	ldi	r30, 0x00	; 0
    e006:	f4 e0       	ldi	r31, 0x04	; 4
    e008:	a3 ea       	ldi	r26, 0xA3	; 163
    e00a:	b7 e0       	ldi	r27, 0x07	; 7
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    e00c:	81 91       	ld	r24, Z+
    e00e:	8d 93       	st	X+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    e010:	84 e0       	ldi	r24, 0x04	; 4
    e012:	e4 31       	cpi	r30, 0x14	; 20
    e014:	f8 07       	cpc	r31, r24
    e016:	d1 f7       	brne	.-12     	; 0xe00c <FMenuSettingFooter+0x174>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    e018:	10 92 b7 07 	sts	0x07B7, r1
			  lcd_clear();
			  AddSpaceLag(PrintBuffer,40);
			  StrPosCopy(PrintBuffer,strFreeMessageLine1,0,20);
			  StrPosCopy(PrintBuffer,strFreeMessageLine2,20,20);

			  lcd_print(1,1,strFreeMessageLine1);			  
    e01c:	81 e0       	ldi	r24, 0x01	; 1
    e01e:	61 e0       	ldi	r22, 0x01	; 1
    e020:	42 e9       	ldi	r20, 0x92	; 146
    e022:	58 e0       	ldi	r21, 0x08	; 8
    e024:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
			  lcd_print(2,1,strFreeMessageLine2);			  
    e028:	82 e0       	ldi	r24, 0x02	; 2
    e02a:	61 e0       	ldi	r22, 0x01	; 1
    e02c:	43 ea       	ldi	r20, 0xA3	; 163
    e02e:	57 e0       	ldi	r21, 0x07	; 7
    e030:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
			  
			  lcd_printf(3,1,PSTR("Align Center?"));
    e034:	83 e0       	ldi	r24, 0x03	; 3
    e036:	61 e0       	ldi	r22, 0x01	; 1
    e038:	42 e3       	ldi	r20, 0x32	; 50
    e03a:	55 e1       	ldi	r21, 0x15	; 21
    e03c:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
			  lcd_printf(4,1,PSTR("[*]No  [#]Yes"));
    e040:	84 e0       	ldi	r24, 0x04	; 4
    e042:	61 e0       	ldi	r22, 0x01	; 1
    e044:	44 e2       	ldi	r20, 0x24	; 36
    e046:	55 e1       	ldi	r21, 0x15	; 21
    e048:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		      stSettingHeader=shIsAlignCenter;
    e04c:	85 e0       	ldi	r24, 0x05	; 5
    e04e:	7a c0       	rjmp	.+244    	; 0xe144 <FMenuSettingFooter+0x2ac>
		  }
		  else
		  if (uiResult==USER_CANCEL)stSettingHeader=shInitHeader;
    e050:	81 30       	cpi	r24, 0x01	; 1
    e052:	09 f0       	breq	.+2      	; 0xe056 <FMenuSettingFooter+0x1be>
    e054:	b9 c0       	rjmp	.+370    	; 0xe1c8 <FMenuSettingFooter+0x330>
    e056:	b1 c0       	rjmp	.+354    	; 0xe1ba <FMenuSettingFooter+0x322>
	      break;
     case shIsAlignCenter:
	      KeyChar=_key_btn(_key_scan(1));
    e058:	81 e0       	ldi	r24, 0x01	; 1
    e05a:	0e 94 f6 a5 	call	0x14bec	; 0x14bec <_key_scan>
    e05e:	0e 94 57 a5 	call	0x14aae	; 0x14aae <_key_btn>
          if(KeyChar=='#'){
    e062:	83 32       	cpi	r24, 0x23	; 35
    e064:	39 f4       	brne	.+14     	; 0xe074 <FMenuSettingFooter+0x1dc>
		      //AlignCenter			  
			  StrAlignCenter(PrintBuffer,40);
    e066:	8c ee       	ldi	r24, 0xEC	; 236
    e068:	93 e0       	ldi	r25, 0x03	; 3
    e06a:	68 e2       	ldi	r22, 0x28	; 40
    e06c:	70 e0       	ldi	r23, 0x00	; 0
    e06e:	0e 94 5e 31 	call	0x62bc	; 0x62bc <StrAlignCenter>
    e072:	03 c0       	rjmp	.+6      	; 0xe07a <FMenuSettingFooter+0x1e2>
			  stSettingHeader=shIsSaveHeader;
		  } else if(KeyChar=='*')stSettingHeader=shIsSaveHeader;		 
    e074:	8a 32       	cpi	r24, 0x2A	; 42
    e076:	09 f0       	breq	.+2      	; 0xe07a <FMenuSettingFooter+0x1e2>
    e078:	a7 c0       	rjmp	.+334    	; 0xe1c8 <FMenuSettingFooter+0x330>
    e07a:	86 e0       	ldi	r24, 0x06	; 6
    e07c:	63 c0       	rjmp	.+198    	; 0xe144 <FMenuSettingFooter+0x2ac>
	      break;
     case shIsSaveHeader:
	      lcd_clear(); 
    e07e:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
    e082:	20 e0       	ldi	r18, 0x00	; 0
    e084:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    e086:	f9 01       	movw	r30, r18
    e088:	ee 56       	subi	r30, 0x6E	; 110
    e08a:	f7 4f       	sbci	r31, 0xF7	; 247
    e08c:	d9 01       	movw	r26, r18
    e08e:	a4 51       	subi	r26, 0x14	; 20
    e090:	bc 4f       	sbci	r27, 0xFC	; 252
    e092:	8c 91       	ld	r24, X
    e094:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    e096:	2f 5f       	subi	r18, 0xFF	; 255
    e098:	3f 4f       	sbci	r19, 0xFF	; 255
    e09a:	24 31       	cpi	r18, 0x14	; 20
    e09c:	31 05       	cpc	r19, r1
    e09e:	99 f7       	brne	.-26     	; 0xe086 <FMenuSettingFooter+0x1ee>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    e0a0:	10 92 a6 08 	sts	0x08A6, r1
    e0a4:	e0 e0       	ldi	r30, 0x00	; 0
    e0a6:	f4 e0       	ldi	r31, 0x04	; 4
    e0a8:	a3 ea       	ldi	r26, 0xA3	; 163
    e0aa:	b7 e0       	ldi	r27, 0x07	; 7
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    e0ac:	81 91       	ld	r24, Z+
    e0ae:	8d 93       	st	X+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    e0b0:	94 e0       	ldi	r25, 0x04	; 4
    e0b2:	e4 31       	cpi	r30, 0x14	; 20
    e0b4:	f9 07       	cpc	r31, r25
    e0b6:	d1 f7       	brne	.-12     	; 0xe0ac <FMenuSettingFooter+0x214>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    e0b8:	10 92 b7 07 	sts	0x07B7, r1
	      break;
     case shIsSaveHeader:
	      lcd_clear(); 
		  StrPosCopy(PrintBuffer,strFreeMessageLine1,0,20);
		  StrPosCopy(PrintBuffer,strFreeMessageLine2,20,20);
          lcd_print(1,1,strFreeMessageLine1);
    e0bc:	81 e0       	ldi	r24, 0x01	; 1
    e0be:	61 e0       	ldi	r22, 0x01	; 1
    e0c0:	42 e9       	ldi	r20, 0x92	; 146
    e0c2:	58 e0       	ldi	r21, 0x08	; 8
    e0c4:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
		  lcd_print(2,1,strFreeMessageLine2);
    e0c8:	82 e0       	ldi	r24, 0x02	; 2
    e0ca:	61 e0       	ldi	r22, 0x01	; 1
    e0cc:	43 ea       	ldi	r20, 0xA3	; 163
    e0ce:	57 e0       	ldi	r21, 0x07	; 7
    e0d0:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
		  sprintf_P(lcdteks,PSTR("Save Footer%d ?"),HeaderIdx+1);
    e0d4:	00 d0       	rcall	.+0      	; 0xe0d6 <FMenuSettingFooter+0x23e>
    e0d6:	00 d0       	rcall	.+0      	; 0xe0d8 <FMenuSettingFooter+0x240>
    e0d8:	00 d0       	rcall	.+0      	; 0xe0da <FMenuSettingFooter+0x242>
    e0da:	ed b7       	in	r30, 0x3d	; 61
    e0dc:	fe b7       	in	r31, 0x3e	; 62
    e0de:	31 96       	adiw	r30, 0x01	; 1
    e0e0:	8e 01       	movw	r16, r28
    e0e2:	0f 5f       	subi	r16, 0xFF	; 255
    e0e4:	1f 4f       	sbci	r17, 0xFF	; 255
    e0e6:	ad b7       	in	r26, 0x3d	; 61
    e0e8:	be b7       	in	r27, 0x3e	; 62
    e0ea:	12 96       	adiw	r26, 0x02	; 2
    e0ec:	1c 93       	st	X, r17
    e0ee:	0e 93       	st	-X, r16
    e0f0:	11 97       	sbiw	r26, 0x01	; 1
    e0f2:	84 e1       	ldi	r24, 0x14	; 20
    e0f4:	95 e1       	ldi	r25, 0x15	; 21
    e0f6:	93 83       	std	Z+3, r25	; 0x03
    e0f8:	82 83       	std	Z+2, r24	; 0x02
    e0fa:	80 91 43 02 	lds	r24, 0x0243
    e0fe:	90 e0       	ldi	r25, 0x00	; 0
    e100:	01 96       	adiw	r24, 0x01	; 1
    e102:	95 83       	std	Z+5, r25	; 0x05
    e104:	84 83       	std	Z+4, r24	; 0x04
    e106:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
		  lcd_print(3,1,lcdteks);
    e10a:	8d b7       	in	r24, 0x3d	; 61
    e10c:	9e b7       	in	r25, 0x3e	; 62
    e10e:	06 96       	adiw	r24, 0x06	; 6
    e110:	0f b6       	in	r0, 0x3f	; 63
    e112:	f8 94       	cli
    e114:	9e bf       	out	0x3e, r25	; 62
    e116:	0f be       	out	0x3f, r0	; 63
    e118:	8d bf       	out	0x3d, r24	; 61
    e11a:	83 e0       	ldi	r24, 0x03	; 3
    e11c:	61 e0       	ldi	r22, 0x01	; 1
    e11e:	a8 01       	movw	r20, r16
    e120:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
		  lcd_printf(4,1,PSTR("[*]No [#]Yes"));		      
    e124:	84 e0       	ldi	r24, 0x04	; 4
    e126:	61 e0       	ldi	r22, 0x01	; 1
    e128:	47 e0       	ldi	r20, 0x07	; 7
    e12a:	55 e1       	ldi	r21, 0x15	; 21
    e12c:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
	      stSettingHeader=shSaveHeaderQuestions;      
    e130:	84 e0       	ldi	r24, 0x04	; 4
    e132:	08 c0       	rjmp	.+16     	; 0xe144 <FMenuSettingFooter+0x2ac>
	      break;       
     case shSaveHeaderQuestions:
          KeyChar=_key_btn(_key_scan(1));
    e134:	81 e0       	ldi	r24, 0x01	; 1
    e136:	0e 94 f6 a5 	call	0x14bec	; 0x14bec <_key_scan>
    e13a:	0e 94 57 a5 	call	0x14aae	; 0x14aae <_key_btn>
	      if(KeyChar=='#')stSettingHeader=shSaveHeader;
    e13e:	83 32       	cpi	r24, 0x23	; 35
    e140:	21 f4       	brne	.+8      	; 0xe14a <FMenuSettingFooter+0x2b2>
    e142:	87 e0       	ldi	r24, 0x07	; 7
    e144:	80 93 44 02 	sts	0x0244, r24
    e148:	3f c0       	rjmp	.+126    	; 0xe1c8 <FMenuSettingFooter+0x330>
		  else
          if(KeyChar=='*')stSettingHeader=shInitHeader;
    e14a:	8a 32       	cpi	r24, 0x2A	; 42
    e14c:	e9 f5       	brne	.+122    	; 0xe1c8 <FMenuSettingFooter+0x330>
    e14e:	35 c0       	rjmp	.+106    	; 0xe1ba <FMenuSettingFooter+0x322>
	      break;
     case shSaveHeader:
	      sprintf_P(strHeaderFooter,PSTR("%s%s"),strFreeMessageLine1,strFreeMessageLine2);
    e150:	ad b7       	in	r26, 0x3d	; 61
    e152:	be b7       	in	r27, 0x3e	; 62
    e154:	18 97       	sbiw	r26, 0x08	; 8
    e156:	0f b6       	in	r0, 0x3f	; 63
    e158:	f8 94       	cli
    e15a:	be bf       	out	0x3e, r27	; 62
    e15c:	0f be       	out	0x3f, r0	; 63
    e15e:	ad bf       	out	0x3d, r26	; 61
    e160:	ed b7       	in	r30, 0x3d	; 61
    e162:	fe b7       	in	r31, 0x3e	; 62
    e164:	31 96       	adiw	r30, 0x01	; 1
    e166:	8e 01       	movw	r16, r28
    e168:	0b 5e       	subi	r16, 0xEB	; 235
    e16a:	1f 4f       	sbci	r17, 0xFF	; 255
    e16c:	12 96       	adiw	r26, 0x02	; 2
    e16e:	1c 93       	st	X, r17
    e170:	0e 93       	st	-X, r16
    e172:	11 97       	sbiw	r26, 0x01	; 1
    e174:	82 e0       	ldi	r24, 0x02	; 2
    e176:	95 e1       	ldi	r25, 0x15	; 21
    e178:	93 83       	std	Z+3, r25	; 0x03
    e17a:	82 83       	std	Z+2, r24	; 0x02
    e17c:	82 e9       	ldi	r24, 0x92	; 146
    e17e:	98 e0       	ldi	r25, 0x08	; 8
    e180:	95 83       	std	Z+5, r25	; 0x05
    e182:	84 83       	std	Z+4, r24	; 0x04
    e184:	83 ea       	ldi	r24, 0xA3	; 163
    e186:	97 e0       	ldi	r25, 0x07	; 7
    e188:	97 83       	std	Z+7, r25	; 0x07
    e18a:	86 83       	std	Z+6, r24	; 0x06
    e18c:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	      eeprom_write_block((const void*) &strHeaderFooter, (void*) &DefHeaderFooter[HeaderIdx+6],40);
    e190:	8d b7       	in	r24, 0x3d	; 61
    e192:	9e b7       	in	r25, 0x3e	; 62
    e194:	08 96       	adiw	r24, 0x08	; 8
    e196:	0f b6       	in	r0, 0x3f	; 63
    e198:	f8 94       	cli
    e19a:	9e bf       	out	0x3e, r25	; 62
    e19c:	0f be       	out	0x3f, r0	; 63
    e19e:	8d bf       	out	0x3d, r24	; 61
    e1a0:	60 91 43 02 	lds	r22, 0x0243
    e1a4:	89 e2       	ldi	r24, 0x29	; 41
    e1a6:	68 9f       	mul	r22, r24
    e1a8:	b0 01       	movw	r22, r0
    e1aa:	11 24       	eor	r1, r1
    e1ac:	63 5e       	subi	r22, 0xE3	; 227
    e1ae:	7c 4f       	sbci	r23, 0xFC	; 252
    e1b0:	c8 01       	movw	r24, r16
    e1b2:	48 e2       	ldi	r20, 0x28	; 40
    e1b4:	50 e0       	ldi	r21, 0x00	; 0
    e1b6:	0e 94 d1 ac 	call	0x159a2	; 0x159a2 <__eewr_block_m128>
		  //eeprom_write_block((const void*) &PrintBuffer, (void*) &DefHeaderFooter[HeaderIdx+6],40);

          stSettingHeader=shInitHeader;
    e1ba:	10 92 44 02 	sts	0x0244, r1
    e1be:	04 c0       	rjmp	.+8      	; 0xe1c8 <FMenuSettingFooter+0x330>
	      break;
     case shExitSettingHeader:
          stSettingHeader=shInitHeader;
    e1c0:	10 92 44 02 	sts	0x0244, r1
    e1c4:	81 e0       	ldi	r24, 0x01	; 1
    e1c6:	01 c0       	rjmp	.+2      	; 0xe1ca <FMenuSettingFooter+0x332>
    e1c8:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
	      break;	 
	 }
   return Result;
}
    e1ca:	ca 5b       	subi	r28, 0xBA	; 186
    e1cc:	df 4f       	sbci	r29, 0xFF	; 255
    e1ce:	0f b6       	in	r0, 0x3f	; 63
    e1d0:	f8 94       	cli
    e1d2:	de bf       	out	0x3e, r29	; 62
    e1d4:	0f be       	out	0x3f, r0	; 63
    e1d6:	cd bf       	out	0x3d, r28	; 61
    e1d8:	cf 91       	pop	r28
    e1da:	df 91       	pop	r29
    e1dc:	1f 91       	pop	r17
    e1de:	0f 91       	pop	r16
    e1e0:	ef 90       	pop	r14
    e1e2:	08 95       	ret

0000e1e4 <FMenuSettingHeader>:
	      break;
	 }
   return Result;
}

char FMenuSettingHeader(){
    e1e4:	ef 92       	push	r14
    e1e6:	0f 93       	push	r16
    e1e8:	1f 93       	push	r17
    e1ea:	df 93       	push	r29
    e1ec:	cf 93       	push	r28
    e1ee:	cd b7       	in	r28, 0x3d	; 61
    e1f0:	de b7       	in	r29, 0x3e	; 62
    e1f2:	c6 54       	subi	r28, 0x46	; 70
    e1f4:	d0 40       	sbci	r29, 0x00	; 0
    e1f6:	0f b6       	in	r0, 0x3f	; 63
    e1f8:	f8 94       	cli
    e1fa:	de bf       	out	0x3e, r29	; 62
    e1fc:	0f be       	out	0x3f, r0	; 63
    e1fe:	cd bf       	out	0x3d, r28	; 61
	 char lcdteks[20];
	 char strHeaderFooter[50];
	 
	 Result=MENU_NONE;
     
	 switch (stSettingHeader){
    e200:	80 91 46 02 	lds	r24, 0x0246
    e204:	84 30       	cpi	r24, 0x04	; 4
    e206:	09 f4       	brne	.+2      	; 0xe20a <FMenuSettingHeader+0x26>
    e208:	3b c1       	rjmp	.+630    	; 0xe480 <FMenuSettingHeader+0x29c>
    e20a:	85 30       	cpi	r24, 0x05	; 5
    e20c:	40 f4       	brcc	.+16     	; 0xe21e <FMenuSettingHeader+0x3a>
    e20e:	81 30       	cpi	r24, 0x01	; 1
    e210:	79 f1       	breq	.+94     	; 0xe270 <FMenuSettingHeader+0x8c>
    e212:	81 30       	cpi	r24, 0x01	; 1
    e214:	88 f0       	brcs	.+34     	; 0xe238 <FMenuSettingHeader+0x54>
    e216:	82 30       	cpi	r24, 0x02	; 2
    e218:	09 f0       	breq	.+2      	; 0xe21c <FMenuSettingHeader+0x38>
    e21a:	7c c1       	rjmp	.+760    	; 0xe514 <FMenuSettingHeader+0x330>
    e21c:	74 c0       	rjmp	.+232    	; 0xe306 <FMenuSettingHeader+0x122>
    e21e:	86 30       	cpi	r24, 0x06	; 6
    e220:	09 f4       	brne	.+2      	; 0xe224 <FMenuSettingHeader+0x40>
    e222:	d3 c0       	rjmp	.+422    	; 0xe3ca <FMenuSettingHeader+0x1e6>
    e224:	86 30       	cpi	r24, 0x06	; 6
    e226:	08 f4       	brcc	.+2      	; 0xe22a <FMenuSettingHeader+0x46>
    e228:	bd c0       	rjmp	.+378    	; 0xe3a4 <FMenuSettingHeader+0x1c0>
    e22a:	87 30       	cpi	r24, 0x07	; 7
    e22c:	09 f4       	brne	.+2      	; 0xe230 <FMenuSettingHeader+0x4c>
    e22e:	36 c1       	rjmp	.+620    	; 0xe49c <FMenuSettingHeader+0x2b8>
    e230:	88 30       	cpi	r24, 0x08	; 8
    e232:	09 f0       	breq	.+2      	; 0xe236 <FMenuSettingHeader+0x52>
    e234:	6f c1       	rjmp	.+734    	; 0xe514 <FMenuSettingHeader+0x330>
    e236:	6a c1       	rjmp	.+724    	; 0xe50c <FMenuSettingHeader+0x328>
	 case shInitHeader:
	      lcd_clear();
    e238:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
		  lcd_printf(1,1,PSTR("1)Header1  4)Header4"));
    e23c:	81 e0       	ldi	r24, 0x01	; 1
    e23e:	61 e0       	ldi	r22, 0x01	; 1
    e240:	4d e4       	ldi	r20, 0x4D	; 77
    e242:	56 e1       	ldi	r21, 0x16	; 22
    e244:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  lcd_printf(2,1,PSTR("2)Header2  5)Header5"));
    e248:	82 e0       	ldi	r24, 0x02	; 2
    e24a:	61 e0       	ldi	r22, 0x01	; 1
    e24c:	48 e3       	ldi	r20, 0x38	; 56
    e24e:	56 e1       	ldi	r21, 0x16	; 22
    e250:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  lcd_printf(3,1,PSTR("3)Header3  6)Header6"));
    e254:	83 e0       	ldi	r24, 0x03	; 3
    e256:	61 e0       	ldi	r22, 0x01	; 1
    e258:	43 e2       	ldi	r20, 0x23	; 35
    e25a:	56 e1       	ldi	r21, 0x16	; 22
    e25c:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  lcd_printf(4,1,PSTR("*)Exit              "));
    e260:	84 e0       	ldi	r24, 0x04	; 4
    e262:	61 e0       	ldi	r22, 0x01	; 1
    e264:	4e e0       	ldi	r20, 0x0E	; 14
    e266:	56 e1       	ldi	r21, 0x16	; 22
    e268:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  stSettingHeader=shHeaderSelect;
    e26c:	81 e0       	ldi	r24, 0x01	; 1
    e26e:	10 c1       	rjmp	.+544    	; 0xe490 <FMenuSettingHeader+0x2ac>
	      break;
     case shHeaderSelect:
	      KeyChar=_key_btn(_key_scan(1));
    e270:	81 e0       	ldi	r24, 0x01	; 1
    e272:	0e 94 f6 a5 	call	0x14bec	; 0x14bec <_key_scan>
    e276:	0e 94 57 a5 	call	0x14aae	; 0x14aae <_key_btn>
    e27a:	e8 2e       	mov	r14, r24
		  if ((KeyChar>='1')&&(KeyChar<='6')){
    e27c:	81 53       	subi	r24, 0x31	; 49
    e27e:	86 30       	cpi	r24, 0x06	; 6
    e280:	e0 f5       	brcc	.+120    	; 0xe2fa <FMenuSettingHeader+0x116>
		       HeaderIdx=KeyChar-'1';//
    e282:	80 93 45 02 	sts	0x0245, r24
			   lcd_clear();
    e286:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
			   sprintf_P(lcdteks,PSTR("Edit Header%d "),HeaderIdx+1);
    e28a:	00 d0       	rcall	.+0      	; 0xe28c <FMenuSettingHeader+0xa8>
    e28c:	00 d0       	rcall	.+0      	; 0xe28e <FMenuSettingHeader+0xaa>
    e28e:	00 d0       	rcall	.+0      	; 0xe290 <FMenuSettingHeader+0xac>
    e290:	ed b7       	in	r30, 0x3d	; 61
    e292:	fe b7       	in	r31, 0x3e	; 62
    e294:	31 96       	adiw	r30, 0x01	; 1
    e296:	8e 01       	movw	r16, r28
    e298:	0f 5f       	subi	r16, 0xFF	; 255
    e29a:	1f 4f       	sbci	r17, 0xFF	; 255
    e29c:	ad b7       	in	r26, 0x3d	; 61
    e29e:	be b7       	in	r27, 0x3e	; 62
    e2a0:	12 96       	adiw	r26, 0x02	; 2
    e2a2:	1c 93       	st	X, r17
    e2a4:	0e 93       	st	-X, r16
    e2a6:	11 97       	sbiw	r26, 0x01	; 1
    e2a8:	8f ef       	ldi	r24, 0xFF	; 255
    e2aa:	95 e1       	ldi	r25, 0x15	; 21
    e2ac:	93 83       	std	Z+3, r25	; 0x03
    e2ae:	82 83       	std	Z+2, r24	; 0x02
    e2b0:	80 91 45 02 	lds	r24, 0x0245
    e2b4:	90 e0       	ldi	r25, 0x00	; 0
    e2b6:	01 96       	adiw	r24, 0x01	; 1
    e2b8:	95 83       	std	Z+5, r25	; 0x05
    e2ba:	84 83       	std	Z+4, r24	; 0x04
    e2bc:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
			   lcd_print(1,1,lcdteks);
    e2c0:	8d b7       	in	r24, 0x3d	; 61
    e2c2:	9e b7       	in	r25, 0x3e	; 62
    e2c4:	06 96       	adiw	r24, 0x06	; 6
    e2c6:	0f b6       	in	r0, 0x3f	; 63
    e2c8:	f8 94       	cli
    e2ca:	9e bf       	out	0x3e, r25	; 62
    e2cc:	0f be       	out	0x3f, r0	; 63
    e2ce:	8d bf       	out	0x3d, r24	; 61
    e2d0:	81 e0       	ldi	r24, 0x01	; 1
    e2d2:	61 e0       	ldi	r22, 0x01	; 1
    e2d4:	a8 01       	movw	r20, r16
    e2d6:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
			   lcd_printf(4,1,PSTR("[*]Back  [#]OK"));
    e2da:	84 e0       	ldi	r24, 0x04	; 4
    e2dc:	61 e0       	ldi	r22, 0x01	; 1
    e2de:	40 ef       	ldi	r20, 0xF0	; 240
    e2e0:	55 e1       	ldi	r21, 0x15	; 21
    e2e2:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
    e2e6:	ec ee       	ldi	r30, 0xEC	; 236
    e2e8:	f3 e0       	ldi	r31, 0x03	; 3
}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
	     strMemory[i]=data;
    e2ea:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    e2ec:	95 e0       	ldi	r25, 0x05	; 5
    e2ee:	ed 37       	cpi	r30, 0x7D	; 125
    e2f0:	f9 07       	cpc	r31, r25
    e2f2:	d9 f7       	brne	.-10     	; 0xe2ea <FMenuSettingHeader+0x106>
			   lcd_clear();
			   sprintf_P(lcdteks,PSTR("Edit Header%d "),HeaderIdx+1);
			   lcd_print(1,1,lcdteks);
			   lcd_printf(4,1,PSTR("[*]Back  [#]OK"));
			   FillChar(PrintBuffer,sizeof(PrintBuffer),0);
			   stSettingHeader=shEditHeader1;
    e2f4:	82 e0       	ldi	r24, 0x02	; 2
    e2f6:	80 93 46 02 	sts	0x0246, r24
		  }
		  if(KeyChar=='*')stSettingHeader=shExitSettingHeader;
    e2fa:	aa e2       	ldi	r26, 0x2A	; 42
    e2fc:	ea 16       	cp	r14, r26
    e2fe:	09 f0       	breq	.+2      	; 0xe302 <FMenuSettingHeader+0x11e>
    e300:	09 c1       	rjmp	.+530    	; 0xe514 <FMenuSettingHeader+0x330>
    e302:	88 e0       	ldi	r24, 0x08	; 8
    e304:	c5 c0       	rjmp	.+394    	; 0xe490 <FMenuSettingHeader+0x2ac>
	      break;
     case shEditHeader1:
          //uiResult=UserInput(UI_ALPHANUM_R,2,1,strFreeMessageLine1,0,20);
		  uiResult=UserInput(UI_ALPHANUM_R,2,1,PrintBuffer,0,40);
    e306:	83 e0       	ldi	r24, 0x03	; 3
    e308:	62 e0       	ldi	r22, 0x02	; 2
    e30a:	41 e0       	ldi	r20, 0x01	; 1
    e30c:	2c ee       	ldi	r18, 0xEC	; 236
    e30e:	33 e0       	ldi	r19, 0x03	; 3
    e310:	00 e0       	ldi	r16, 0x00	; 0
    e312:	10 e0       	ldi	r17, 0x00	; 0
    e314:	78 e2       	ldi	r23, 0x28	; 40
    e316:	e7 2e       	mov	r14, r23
    e318:	0e 94 47 67 	call	0xce8e	; 0xce8e <UserInput>
		  if (uiResult==USER_OK){
    e31c:	83 30       	cpi	r24, 0x03	; 3
    e31e:	f1 f5       	brne	.+124    	; 0xe39c <FMenuSettingHeader+0x1b8>
			  lcd_clear();
    e320:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
			  AddSpaceLag(PrintBuffer,40);
    e324:	8c ee       	ldi	r24, 0xEC	; 236
    e326:	93 e0       	ldi	r25, 0x03	; 3
    e328:	68 e2       	ldi	r22, 0x28	; 40
    e32a:	0e 94 64 2f 	call	0x5ec8	; 0x5ec8 <AddSpaceLag>
    e32e:	20 e0       	ldi	r18, 0x00	; 0
    e330:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    e332:	f9 01       	movw	r30, r18
    e334:	ee 56       	subi	r30, 0x6E	; 110
    e336:	f7 4f       	sbci	r31, 0xF7	; 247
    e338:	d9 01       	movw	r26, r18
    e33a:	a4 51       	subi	r26, 0x14	; 20
    e33c:	bc 4f       	sbci	r27, 0xFC	; 252
    e33e:	8c 91       	ld	r24, X
    e340:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    e342:	2f 5f       	subi	r18, 0xFF	; 255
    e344:	3f 4f       	sbci	r19, 0xFF	; 255
    e346:	24 31       	cpi	r18, 0x14	; 20
    e348:	31 05       	cpc	r19, r1
    e34a:	99 f7       	brne	.-26     	; 0xe332 <FMenuSettingHeader+0x14e>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    e34c:	10 92 a6 08 	sts	0x08A6, r1
    e350:	e0 e0       	ldi	r30, 0x00	; 0
    e352:	f4 e0       	ldi	r31, 0x04	; 4
    e354:	a3 ea       	ldi	r26, 0xA3	; 163
    e356:	b7 e0       	ldi	r27, 0x07	; 7
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    e358:	81 91       	ld	r24, Z+
    e35a:	8d 93       	st	X+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    e35c:	84 e0       	ldi	r24, 0x04	; 4
    e35e:	e4 31       	cpi	r30, 0x14	; 20
    e360:	f8 07       	cpc	r31, r24
    e362:	d1 f7       	brne	.-12     	; 0xe358 <FMenuSettingHeader+0x174>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    e364:	10 92 b7 07 	sts	0x07B7, r1
			  lcd_clear();
			  AddSpaceLag(PrintBuffer,40);
			  StrPosCopy(PrintBuffer,strFreeMessageLine1,0,20);
			  StrPosCopy(PrintBuffer,strFreeMessageLine2,20,20);

			  lcd_print(1,1,strFreeMessageLine1);			  
    e368:	81 e0       	ldi	r24, 0x01	; 1
    e36a:	61 e0       	ldi	r22, 0x01	; 1
    e36c:	42 e9       	ldi	r20, 0x92	; 146
    e36e:	58 e0       	ldi	r21, 0x08	; 8
    e370:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
			  lcd_print(2,1,strFreeMessageLine2);			  
    e374:	82 e0       	ldi	r24, 0x02	; 2
    e376:	61 e0       	ldi	r22, 0x01	; 1
    e378:	43 ea       	ldi	r20, 0xA3	; 163
    e37a:	57 e0       	ldi	r21, 0x07	; 7
    e37c:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
			  
			  lcd_printf(3,1,PSTR("Align Center?"));
    e380:	83 e0       	ldi	r24, 0x03	; 3
    e382:	61 e0       	ldi	r22, 0x01	; 1
    e384:	42 ee       	ldi	r20, 0xE2	; 226
    e386:	55 e1       	ldi	r21, 0x15	; 21
    e388:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
			  lcd_printf(4,1,PSTR("[*]No  [#]Yes"));
    e38c:	84 e0       	ldi	r24, 0x04	; 4
    e38e:	61 e0       	ldi	r22, 0x01	; 1
    e390:	44 ed       	ldi	r20, 0xD4	; 212
    e392:	55 e1       	ldi	r21, 0x15	; 21
    e394:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		      stSettingHeader=shIsAlignCenter;
    e398:	85 e0       	ldi	r24, 0x05	; 5
    e39a:	7a c0       	rjmp	.+244    	; 0xe490 <FMenuSettingHeader+0x2ac>
		  }
		  else
		  if (uiResult==USER_CANCEL)stSettingHeader=shInitHeader;
    e39c:	81 30       	cpi	r24, 0x01	; 1
    e39e:	09 f0       	breq	.+2      	; 0xe3a2 <FMenuSettingHeader+0x1be>
    e3a0:	b9 c0       	rjmp	.+370    	; 0xe514 <FMenuSettingHeader+0x330>
    e3a2:	b1 c0       	rjmp	.+354    	; 0xe506 <FMenuSettingHeader+0x322>
	      break;
     case shIsAlignCenter:
	      KeyChar=_key_btn(_key_scan(1));
    e3a4:	81 e0       	ldi	r24, 0x01	; 1
    e3a6:	0e 94 f6 a5 	call	0x14bec	; 0x14bec <_key_scan>
    e3aa:	0e 94 57 a5 	call	0x14aae	; 0x14aae <_key_btn>
          if(KeyChar=='#'){
    e3ae:	83 32       	cpi	r24, 0x23	; 35
    e3b0:	39 f4       	brne	.+14     	; 0xe3c0 <FMenuSettingHeader+0x1dc>
		      //AlignCenter			  
			  StrAlignCenter(PrintBuffer,40);
    e3b2:	8c ee       	ldi	r24, 0xEC	; 236
    e3b4:	93 e0       	ldi	r25, 0x03	; 3
    e3b6:	68 e2       	ldi	r22, 0x28	; 40
    e3b8:	70 e0       	ldi	r23, 0x00	; 0
    e3ba:	0e 94 5e 31 	call	0x62bc	; 0x62bc <StrAlignCenter>
    e3be:	03 c0       	rjmp	.+6      	; 0xe3c6 <FMenuSettingHeader+0x1e2>
			  stSettingHeader=shIsSaveHeader;
		  } else if(KeyChar=='*')stSettingHeader=shIsSaveHeader;		 
    e3c0:	8a 32       	cpi	r24, 0x2A	; 42
    e3c2:	09 f0       	breq	.+2      	; 0xe3c6 <FMenuSettingHeader+0x1e2>
    e3c4:	a7 c0       	rjmp	.+334    	; 0xe514 <FMenuSettingHeader+0x330>
    e3c6:	86 e0       	ldi	r24, 0x06	; 6
    e3c8:	63 c0       	rjmp	.+198    	; 0xe490 <FMenuSettingHeader+0x2ac>
	      break;
     case shIsSaveHeader:
	      lcd_clear(); 
    e3ca:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
    e3ce:	20 e0       	ldi	r18, 0x00	; 0
    e3d0:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    e3d2:	f9 01       	movw	r30, r18
    e3d4:	ee 56       	subi	r30, 0x6E	; 110
    e3d6:	f7 4f       	sbci	r31, 0xF7	; 247
    e3d8:	d9 01       	movw	r26, r18
    e3da:	a4 51       	subi	r26, 0x14	; 20
    e3dc:	bc 4f       	sbci	r27, 0xFC	; 252
    e3de:	8c 91       	ld	r24, X
    e3e0:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    e3e2:	2f 5f       	subi	r18, 0xFF	; 255
    e3e4:	3f 4f       	sbci	r19, 0xFF	; 255
    e3e6:	24 31       	cpi	r18, 0x14	; 20
    e3e8:	31 05       	cpc	r19, r1
    e3ea:	99 f7       	brne	.-26     	; 0xe3d2 <FMenuSettingHeader+0x1ee>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    e3ec:	10 92 a6 08 	sts	0x08A6, r1
    e3f0:	e0 e0       	ldi	r30, 0x00	; 0
    e3f2:	f4 e0       	ldi	r31, 0x04	; 4
    e3f4:	a3 ea       	ldi	r26, 0xA3	; 163
    e3f6:	b7 e0       	ldi	r27, 0x07	; 7
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    e3f8:	81 91       	ld	r24, Z+
    e3fa:	8d 93       	st	X+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    e3fc:	94 e0       	ldi	r25, 0x04	; 4
    e3fe:	e4 31       	cpi	r30, 0x14	; 20
    e400:	f9 07       	cpc	r31, r25
    e402:	d1 f7       	brne	.-12     	; 0xe3f8 <FMenuSettingHeader+0x214>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    e404:	10 92 b7 07 	sts	0x07B7, r1
	      break;
     case shIsSaveHeader:
	      lcd_clear(); 
		  StrPosCopy(PrintBuffer,strFreeMessageLine1,0,20);
		  StrPosCopy(PrintBuffer,strFreeMessageLine2,20,20);
          lcd_print(1,1,strFreeMessageLine1);
    e408:	81 e0       	ldi	r24, 0x01	; 1
    e40a:	61 e0       	ldi	r22, 0x01	; 1
    e40c:	42 e9       	ldi	r20, 0x92	; 146
    e40e:	58 e0       	ldi	r21, 0x08	; 8
    e410:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
		  lcd_print(2,1,strFreeMessageLine2);
    e414:	82 e0       	ldi	r24, 0x02	; 2
    e416:	61 e0       	ldi	r22, 0x01	; 1
    e418:	43 ea       	ldi	r20, 0xA3	; 163
    e41a:	57 e0       	ldi	r21, 0x07	; 7
    e41c:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
		  sprintf_P(lcdteks,PSTR("Save Header%d ?"),HeaderIdx+1);
    e420:	00 d0       	rcall	.+0      	; 0xe422 <FMenuSettingHeader+0x23e>
    e422:	00 d0       	rcall	.+0      	; 0xe424 <FMenuSettingHeader+0x240>
    e424:	00 d0       	rcall	.+0      	; 0xe426 <FMenuSettingHeader+0x242>
    e426:	ed b7       	in	r30, 0x3d	; 61
    e428:	fe b7       	in	r31, 0x3e	; 62
    e42a:	31 96       	adiw	r30, 0x01	; 1
    e42c:	8e 01       	movw	r16, r28
    e42e:	0f 5f       	subi	r16, 0xFF	; 255
    e430:	1f 4f       	sbci	r17, 0xFF	; 255
    e432:	ad b7       	in	r26, 0x3d	; 61
    e434:	be b7       	in	r27, 0x3e	; 62
    e436:	12 96       	adiw	r26, 0x02	; 2
    e438:	1c 93       	st	X, r17
    e43a:	0e 93       	st	-X, r16
    e43c:	11 97       	sbiw	r26, 0x01	; 1
    e43e:	84 ec       	ldi	r24, 0xC4	; 196
    e440:	95 e1       	ldi	r25, 0x15	; 21
    e442:	93 83       	std	Z+3, r25	; 0x03
    e444:	82 83       	std	Z+2, r24	; 0x02
    e446:	80 91 45 02 	lds	r24, 0x0245
    e44a:	90 e0       	ldi	r25, 0x00	; 0
    e44c:	01 96       	adiw	r24, 0x01	; 1
    e44e:	95 83       	std	Z+5, r25	; 0x05
    e450:	84 83       	std	Z+4, r24	; 0x04
    e452:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
		  lcd_print(3,1,lcdteks);
    e456:	8d b7       	in	r24, 0x3d	; 61
    e458:	9e b7       	in	r25, 0x3e	; 62
    e45a:	06 96       	adiw	r24, 0x06	; 6
    e45c:	0f b6       	in	r0, 0x3f	; 63
    e45e:	f8 94       	cli
    e460:	9e bf       	out	0x3e, r25	; 62
    e462:	0f be       	out	0x3f, r0	; 63
    e464:	8d bf       	out	0x3d, r24	; 61
    e466:	83 e0       	ldi	r24, 0x03	; 3
    e468:	61 e0       	ldi	r22, 0x01	; 1
    e46a:	a8 01       	movw	r20, r16
    e46c:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
		  lcd_printf(4,1,PSTR("[*]No [#]Yes"));		      
    e470:	84 e0       	ldi	r24, 0x04	; 4
    e472:	61 e0       	ldi	r22, 0x01	; 1
    e474:	47 eb       	ldi	r20, 0xB7	; 183
    e476:	55 e1       	ldi	r21, 0x15	; 21
    e478:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
	      stSettingHeader=shSaveHeaderQuestions;      
    e47c:	84 e0       	ldi	r24, 0x04	; 4
    e47e:	08 c0       	rjmp	.+16     	; 0xe490 <FMenuSettingHeader+0x2ac>
	      break;    
     case shSaveHeaderQuestions:
	      KeyChar=_key_btn(_key_scan(1));
    e480:	81 e0       	ldi	r24, 0x01	; 1
    e482:	0e 94 f6 a5 	call	0x14bec	; 0x14bec <_key_scan>
    e486:	0e 94 57 a5 	call	0x14aae	; 0x14aae <_key_btn>
	      if(KeyChar=='#')stSettingHeader=shSaveHeader;
    e48a:	83 32       	cpi	r24, 0x23	; 35
    e48c:	21 f4       	brne	.+8      	; 0xe496 <FMenuSettingHeader+0x2b2>
    e48e:	87 e0       	ldi	r24, 0x07	; 7
    e490:	80 93 46 02 	sts	0x0246, r24
    e494:	3f c0       	rjmp	.+126    	; 0xe514 <FMenuSettingHeader+0x330>
		  else
          if(KeyChar=='*')stSettingHeader=shInitHeader;
    e496:	8a 32       	cpi	r24, 0x2A	; 42
    e498:	e9 f5       	brne	.+122    	; 0xe514 <FMenuSettingHeader+0x330>
    e49a:	35 c0       	rjmp	.+106    	; 0xe506 <FMenuSettingHeader+0x322>
	      break;
     case shSaveHeader:
	      sprintf_P(strHeaderFooter,PSTR("%s%s"),strFreeMessageLine1,strFreeMessageLine2);
    e49c:	ad b7       	in	r26, 0x3d	; 61
    e49e:	be b7       	in	r27, 0x3e	; 62
    e4a0:	18 97       	sbiw	r26, 0x08	; 8
    e4a2:	0f b6       	in	r0, 0x3f	; 63
    e4a4:	f8 94       	cli
    e4a6:	be bf       	out	0x3e, r27	; 62
    e4a8:	0f be       	out	0x3f, r0	; 63
    e4aa:	ad bf       	out	0x3d, r26	; 61
    e4ac:	ed b7       	in	r30, 0x3d	; 61
    e4ae:	fe b7       	in	r31, 0x3e	; 62
    e4b0:	31 96       	adiw	r30, 0x01	; 1
    e4b2:	8e 01       	movw	r16, r28
    e4b4:	0b 5e       	subi	r16, 0xEB	; 235
    e4b6:	1f 4f       	sbci	r17, 0xFF	; 255
    e4b8:	12 96       	adiw	r26, 0x02	; 2
    e4ba:	1c 93       	st	X, r17
    e4bc:	0e 93       	st	-X, r16
    e4be:	11 97       	sbiw	r26, 0x01	; 1
    e4c0:	82 eb       	ldi	r24, 0xB2	; 178
    e4c2:	95 e1       	ldi	r25, 0x15	; 21
    e4c4:	93 83       	std	Z+3, r25	; 0x03
    e4c6:	82 83       	std	Z+2, r24	; 0x02
    e4c8:	82 e9       	ldi	r24, 0x92	; 146
    e4ca:	98 e0       	ldi	r25, 0x08	; 8
    e4cc:	95 83       	std	Z+5, r25	; 0x05
    e4ce:	84 83       	std	Z+4, r24	; 0x04
    e4d0:	83 ea       	ldi	r24, 0xA3	; 163
    e4d2:	97 e0       	ldi	r25, 0x07	; 7
    e4d4:	97 83       	std	Z+7, r25	; 0x07
    e4d6:	86 83       	std	Z+6, r24	; 0x06
    e4d8:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	      eeprom_write_block((const void*) &strHeaderFooter, (void*) &DefHeaderFooter[HeaderIdx],40);
    e4dc:	8d b7       	in	r24, 0x3d	; 61
    e4de:	9e b7       	in	r25, 0x3e	; 62
    e4e0:	08 96       	adiw	r24, 0x08	; 8
    e4e2:	0f b6       	in	r0, 0x3f	; 63
    e4e4:	f8 94       	cli
    e4e6:	9e bf       	out	0x3e, r25	; 62
    e4e8:	0f be       	out	0x3f, r0	; 63
    e4ea:	8d bf       	out	0x3d, r24	; 61
    e4ec:	60 91 45 02 	lds	r22, 0x0245
    e4f0:	89 e2       	ldi	r24, 0x29	; 41
    e4f2:	68 9f       	mul	r22, r24
    e4f4:	b0 01       	movw	r22, r0
    e4f6:	11 24       	eor	r1, r1
    e4f8:	69 5d       	subi	r22, 0xD9	; 217
    e4fa:	7d 4f       	sbci	r23, 0xFD	; 253
    e4fc:	c8 01       	movw	r24, r16
    e4fe:	48 e2       	ldi	r20, 0x28	; 40
    e500:	50 e0       	ldi	r21, 0x00	; 0
    e502:	0e 94 d1 ac 	call	0x159a2	; 0x159a2 <__eewr_block_m128>
		  //eeprom_write_block((const void*) &PrintBuffer, (void*) &DefHeaderFooter[HeaderIdx],40);
          stSettingHeader=shInitHeader;
    e506:	10 92 46 02 	sts	0x0246, r1
    e50a:	04 c0       	rjmp	.+8      	; 0xe514 <FMenuSettingHeader+0x330>
	      break;
     case shExitSettingHeader:
          stSettingHeader=shInitHeader;
    e50c:	10 92 46 02 	sts	0x0246, r1
    e510:	81 e0       	ldi	r24, 0x01	; 1
    e512:	01 c0       	rjmp	.+2      	; 0xe516 <FMenuSettingHeader+0x332>
    e514:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
	      break;	 
	 }
   //_menu_header();   
   return Result;
}
    e516:	ca 5b       	subi	r28, 0xBA	; 186
    e518:	df 4f       	sbci	r29, 0xFF	; 255
    e51a:	0f b6       	in	r0, 0x3f	; 63
    e51c:	f8 94       	cli
    e51e:	de bf       	out	0x3e, r29	; 62
    e520:	0f be       	out	0x3f, r0	; 63
    e522:	cd bf       	out	0x3d, r28	; 61
    e524:	cf 91       	pop	r28
    e526:	df 91       	pop	r29
    e528:	1f 91       	pop	r17
    e52a:	0f 91       	pop	r16
    e52c:	ef 90       	pop	r14
    e52e:	08 95       	ret

0000e530 <FMenuAdminSettings>:

char FMenuAdminSettings(){
     static char stAdminSettings=asInitMenu;
	 char SubMenu,Result,KeyChar;
	 Result=MENU_NONE;
	 switch(stAdminSettings){
    e530:	80 91 47 02 	lds	r24, 0x0247
    e534:	83 30       	cpi	r24, 0x03	; 3
    e536:	09 f4       	brne	.+2      	; 0xe53a <FMenuAdminSettings+0xa>
    e538:	6e c0       	rjmp	.+220    	; 0xe616 <FMenuAdminSettings+0xe6>
    e53a:	84 30       	cpi	r24, 0x04	; 4
    e53c:	30 f4       	brcc	.+12     	; 0xe54a <FMenuAdminSettings+0x1a>
    e53e:	81 30       	cpi	r24, 0x01	; 1
    e540:	e9 f1       	breq	.+122    	; 0xe5bc <FMenuAdminSettings+0x8c>
    e542:	82 30       	cpi	r24, 0x02	; 2
    e544:	08 f0       	brcs	.+2      	; 0xe548 <FMenuAdminSettings+0x18>
    e546:	64 c0       	rjmp	.+200    	; 0xe610 <FMenuAdminSettings+0xe0>
    e548:	0d c0       	rjmp	.+26     	; 0xe564 <FMenuAdminSettings+0x34>
    e54a:	85 30       	cpi	r24, 0x05	; 5
    e54c:	09 f4       	brne	.+2      	; 0xe550 <FMenuAdminSettings+0x20>
    e54e:	66 c0       	rjmp	.+204    	; 0xe61c <FMenuAdminSettings+0xec>
    e550:	85 30       	cpi	r24, 0x05	; 5
    e552:	08 f4       	brcc	.+2      	; 0xe556 <FMenuAdminSettings+0x26>
    e554:	6a c0       	rjmp	.+212    	; 0xe62a <FMenuAdminSettings+0xfa>
    e556:	86 30       	cpi	r24, 0x06	; 6
    e558:	09 f4       	brne	.+2      	; 0xe55c <FMenuAdminSettings+0x2c>
    e55a:	63 c0       	rjmp	.+198    	; 0xe622 <FMenuAdminSettings+0xf2>
    e55c:	87 30       	cpi	r24, 0x07	; 7
    e55e:	09 f0       	breq	.+2      	; 0xe562 <FMenuAdminSettings+0x32>
    e560:	6c c0       	rjmp	.+216    	; 0xe63a <FMenuAdminSettings+0x10a>
    e562:	67 c0       	rjmp	.+206    	; 0xe632 <FMenuAdminSettings+0x102>
	 case asInitMenu:
          lcd_clear();
    e564:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
		  if (IFType==IT_SLAVE){
    e568:	80 91 00 01 	lds	r24, 0x0100
    e56c:	81 30       	cpi	r24, 0x01	; 1
    e56e:	51 f4       	brne	.+20     	; 0xe584 <FMenuAdminSettings+0x54>
		      lcd_printf(1,1, PSTR("1)Header    4)Client"));
    e570:	61 e0       	ldi	r22, 0x01	; 1
    e572:	4d eb       	ldi	r20, 0xBD	; 189
    e574:	56 e1       	ldi	r21, 0x16	; 22
    e576:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		      lcd_printf(2,1, PSTR("2)Footer    5)Server"));
    e57a:	82 e0       	ldi	r24, 0x02	; 2
    e57c:	61 e0       	ldi	r22, 0x01	; 1
    e57e:	48 ea       	ldi	r20, 0xA8	; 168
    e580:	56 e1       	ldi	r21, 0x16	; 22
    e582:	0c c0       	rjmp	.+24     	; 0xe59c <FMenuAdminSettings+0x6c>
		  }else
		  if (IFType==IT_STANDALONE){
    e584:	82 30       	cpi	r24, 0x02	; 2
    e586:	61 f4       	brne	.+24     	; 0xe5a0 <FMenuAdminSettings+0x70>
		      lcd_printf(1,1, PSTR("1)Header            "));
    e588:	81 e0       	ldi	r24, 0x01	; 1
    e58a:	61 e0       	ldi	r22, 0x01	; 1
    e58c:	43 e9       	ldi	r20, 0x93	; 147
    e58e:	56 e1       	ldi	r21, 0x16	; 22
    e590:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		      lcd_printf(2,1, PSTR("2)Footer            "));
    e594:	82 e0       	ldi	r24, 0x02	; 2
    e596:	61 e0       	ldi	r22, 0x01	; 1
    e598:	4e e7       	ldi	r20, 0x7E	; 126
    e59a:	56 e1       	ldi	r21, 0x16	; 22
    e59c:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  }
		  lcd_printf(3,1, PSTR("3)Password          "));
    e5a0:	83 e0       	ldi	r24, 0x03	; 3
    e5a2:	61 e0       	ldi	r22, 0x01	; 1
    e5a4:	49 e6       	ldi	r20, 0x69	; 105
    e5a6:	56 e1       	ldi	r21, 0x16	; 22
    e5a8:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  lcd_printf(4,1, PSTR("*)Exit"));
    e5ac:	84 e0       	ldi	r24, 0x04	; 4
    e5ae:	61 e0       	ldi	r22, 0x01	; 1
    e5b0:	42 e6       	ldi	r20, 0x62	; 98
    e5b2:	56 e1       	ldi	r21, 0x16	; 22
    e5b4:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  stAdminSettings=asAdminSettingsOption;
    e5b8:	81 e0       	ldi	r24, 0x01	; 1
    e5ba:	27 c0       	rjmp	.+78     	; 0xe60a <FMenuAdminSettings+0xda>
		  break;
     case asAdminSettingsOption:
	      KeyChar=_key_btn(_key_scan(1));
    e5bc:	81 e0       	ldi	r24, 0x01	; 1
    e5be:	0e 94 f6 a5 	call	0x14bec	; 0x14bec <_key_scan>
    e5c2:	0e 94 57 a5 	call	0x14aae	; 0x14aae <_key_btn>
    e5c6:	98 2f       	mov	r25, r24
		  switch(KeyChar){
    e5c8:	82 33       	cpi	r24, 0x32	; 50
    e5ca:	61 f0       	breq	.+24     	; 0xe5e4 <FMenuAdminSettings+0xb4>
    e5cc:	83 33       	cpi	r24, 0x33	; 51
    e5ce:	28 f4       	brcc	.+10     	; 0xe5da <FMenuAdminSettings+0xaa>
    e5d0:	8a 32       	cpi	r24, 0x2A	; 42
    e5d2:	61 f0       	breq	.+24     	; 0xe5ec <FMenuAdminSettings+0xbc>
    e5d4:	81 33       	cpi	r24, 0x31	; 49
    e5d6:	69 f4       	brne	.+26     	; 0xe5f2 <FMenuAdminSettings+0xc2>
    e5d8:	03 c0       	rjmp	.+6      	; 0xe5e0 <FMenuAdminSettings+0xb0>
    e5da:	83 33       	cpi	r24, 0x33	; 51
    e5dc:	51 f4       	brne	.+20     	; 0xe5f2 <FMenuAdminSettings+0xc2>
    e5de:	04 c0       	rjmp	.+8      	; 0xe5e8 <FMenuAdminSettings+0xb8>
		  case '1':stAdminSettings=asAdminSettingHeader;
    e5e0:	82 e0       	ldi	r24, 0x02	; 2
    e5e2:	05 c0       	rjmp	.+10     	; 0xe5ee <FMenuAdminSettings+0xbe>
		       break;
		  case '2':stAdminSettings=asAdminSettingFooter;
    e5e4:	83 e0       	ldi	r24, 0x03	; 3
    e5e6:	03 c0       	rjmp	.+6      	; 0xe5ee <FMenuAdminSettings+0xbe>
		       break;
		  case '3':stAdminSettings=asAdminSettingPassword;
    e5e8:	84 e0       	ldi	r24, 0x04	; 4
    e5ea:	01 c0       	rjmp	.+2      	; 0xe5ee <FMenuAdminSettings+0xbe>
		       break;
		  case '*':stAdminSettings=asExitAdminSetting;
    e5ec:	87 e0       	ldi	r24, 0x07	; 7
    e5ee:	80 93 47 02 	sts	0x0247, r24
		       break;			   
		  }
		  if (IFType==IT_SLAVE){
    e5f2:	80 91 00 01 	lds	r24, 0x0100
    e5f6:	81 30       	cpi	r24, 0x01	; 1
    e5f8:	01 f5       	brne	.+64     	; 0xe63a <FMenuAdminSettings+0x10a>
			  switch(KeyChar){
    e5fa:	94 33       	cpi	r25, 0x34	; 52
    e5fc:	19 f0       	breq	.+6      	; 0xe604 <FMenuAdminSettings+0xd4>
    e5fe:	95 33       	cpi	r25, 0x35	; 53
    e600:	e1 f4       	brne	.+56     	; 0xe63a <FMenuAdminSettings+0x10a>
    e602:	02 c0       	rjmp	.+4      	; 0xe608 <FMenuAdminSettings+0xd8>
			  case '4':stAdminSettings=asAdminSettingClientIP;
    e604:	85 e0       	ldi	r24, 0x05	; 5
    e606:	01 c0       	rjmp	.+2      	; 0xe60a <FMenuAdminSettings+0xda>
				   break;
			  case '5':stAdminSettings=asAdminSettingServerIP;
    e608:	86 e0       	ldi	r24, 0x06	; 6
    e60a:	80 93 47 02 	sts	0x0247, r24
    e60e:	0f c0       	rjmp	.+30     	; 0xe62e <FMenuAdminSettings+0xfe>
				   break;
			  }
		  }
	      break;
	 case asAdminSettingHeader:
	      SubMenu=FMenuSettingHeader();
    e610:	0e 94 f2 70 	call	0xe1e4	; 0xe1e4 <FMenuSettingHeader>
    e614:	08 c0       	rjmp	.+16     	; 0xe626 <FMenuAdminSettings+0xf6>
	      if (SubMenu==MENU_DONE)stAdminSettings=asInitMenu;
	      break;
	 case asAdminSettingFooter:
	      SubMenu=FMenuSettingFooter();
    e616:	0e 94 4c 6f 	call	0xde98	; 0xde98 <FMenuSettingFooter>
    e61a:	05 c0       	rjmp	.+10     	; 0xe626 <FMenuAdminSettings+0xf6>
	 case asAdminSettingPassword:
	      SubMenu=FMenuSettingPassword();
	      if (SubMenu==MENU_DONE)stAdminSettings=asInitMenu;	 
	      break;
     case asAdminSettingClientIP:
	      SubMenu=FMenuSettingClientIP();
    e61c:	0e 94 ba 58 	call	0xb174	; 0xb174 <FMenuSettingClientIP>
    e620:	02 c0       	rjmp	.+4      	; 0xe626 <FMenuAdminSettings+0xf6>
	      if (SubMenu==MENU_DONE)stAdminSettings=asInitMenu;	 
	      break;
	 case asAdminSettingServerIP:
	      SubMenu=FMenuSettingServerIP();
    e622:	0e 94 35 56 	call	0xac6a	; 0xac6a <FMenuSettingServerIP>
	      if (SubMenu==MENU_DONE)stAdminSettings=asInitMenu;	 
    e626:	81 30       	cpi	r24, 0x01	; 1
    e628:	41 f4       	brne	.+16     	; 0xe63a <FMenuAdminSettings+0x10a>
    e62a:	10 92 47 02 	sts	0x0247, r1
    e62e:	80 e0       	ldi	r24, 0x00	; 0
    e630:	08 95       	ret
	      break;
     case asExitAdminSetting:
	      stAdminSettings=asInitMenu;
    e632:	10 92 47 02 	sts	0x0247, r1
    e636:	81 e0       	ldi	r24, 0x01	; 1
    e638:	08 95       	ret
    e63a:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
	      break;
	 }
   return Result;
}
    e63c:	08 95       	ret

0000e63e <FMenuMaster>:
     else Result=RC_INVALID;

   return Result;
}

char FMenuMaster(){ 
    e63e:	cf 92       	push	r12
    e640:	df 92       	push	r13
    e642:	ef 92       	push	r14
    e644:	ff 92       	push	r15
    e646:	0f 93       	push	r16
    e648:	1f 93       	push	r17
    e64a:	df 93       	push	r29
    e64c:	cf 93       	push	r28
    e64e:	cd b7       	in	r28, 0x3d	; 61
    e650:	de b7       	in	r29, 0x3e	; 62
    e652:	e2 97       	sbiw	r28, 0x32	; 50
    e654:	0f b6       	in	r0, 0x3f	; 63
    e656:	f8 94       	cli
    e658:	de bf       	out	0x3e, r29	; 62
    e65a:	0f be       	out	0x3f, r0	; 63
    e65c:	cd bf       	out	0x3d, r28	; 61
static char stMenuMaster=mmInitMaster;
     char KeyPressed,KeyChar,Result=MENU_NONE;
	 char uiResult,lcdteks[20],PTime[10],PDate[10],strNewPassword[10];
	 char strSend[20];

	 switch(stMenuMaster){
    e65e:	80 91 4c 02 	lds	r24, 0x024C
    e662:	e8 2f       	mov	r30, r24
    e664:	f0 e0       	ldi	r31, 0x00	; 0
    e666:	e9 31       	cpi	r30, 0x19	; 25
    e668:	f1 05       	cpc	r31, r1
    e66a:	08 f0       	brcs	.+2      	; 0xe66e <FMenuMaster+0x30>
    e66c:	dc c2       	rjmp	.+1464   	; 0xec26 <FMenuMaster+0x5e8>
    e66e:	ec 59       	subi	r30, 0x9C	; 156
    e670:	ff 4f       	sbci	r31, 0xFF	; 255
    e672:	ee 0f       	add	r30, r30
    e674:	ff 1f       	adc	r31, r31
    e676:	05 90       	lpm	r0, Z+
    e678:	f4 91       	lpm	r31, Z+
    e67a:	e0 2d       	mov	r30, r0
    e67c:	09 94       	ijmp
	 case mmInitMaster:
	      lcd_clear();
    e67e:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
		  lcd_printf(1,1,PSTR("-System Admin Level-"));
    e682:	81 e0       	ldi	r24, 0x01	; 1
    e684:	61 e0       	ldi	r22, 0x01	; 1
    e686:	4f ee       	ldi	r20, 0xEF	; 239
    e688:	59 e1       	ldi	r21, 0x19	; 25
    e68a:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  lcd_printf(2,1,PSTR("1.Restore Password  "));
    e68e:	82 e0       	ldi	r24, 0x02	; 2
    e690:	61 e0       	ldi	r22, 0x01	; 1
    e692:	4a ed       	ldi	r20, 0xDA	; 218
    e694:	59 e1       	ldi	r21, 0x19	; 25
    e696:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  lcd_printf(3,1,PSTR("2.Master Reset      "));
    e69a:	83 e0       	ldi	r24, 0x03	; 3
    e69c:	61 e0       	ldi	r22, 0x01	; 1
    e69e:	45 ec       	ldi	r20, 0xC5	; 197
    e6a0:	59 e1       	ldi	r21, 0x19	; 25
    e6a2:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  lcd_printf(4,1,PSTR("[*]Exit             "));
    e6a6:	84 e0       	ldi	r24, 0x04	; 4
    e6a8:	61 e0       	ldi	r22, 0x01	; 1
    e6aa:	40 eb       	ldi	r20, 0xB0	; 176
    e6ac:	59 e1       	ldi	r21, 0x19	; 25
    e6ae:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>

		  //uart_printf(1,1,PSTR("-System Admin Level-"));

		  stMenuMaster=mmMasterSelect;
    e6b2:	81 e0       	ldi	r24, 0x01	; 1
    e6b4:	11 c0       	rjmp	.+34     	; 0xe6d8 <FMenuMaster+0x9a>
	      break;
     case mmMasterSelect:
	 	  KeyPressed=_key_scan(1);
    e6b6:	81 e0       	ldi	r24, 0x01	; 1
    e6b8:	0e 94 f6 a5 	call	0x14bec	; 0x14bec <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
    e6bc:	0e 94 57 a5 	call	0x14aae	; 0x14aae <_key_btn>
          switch(KeyChar){
    e6c0:	81 33       	cpi	r24, 0x31	; 49
    e6c2:	09 f4       	brne	.+2      	; 0xe6c6 <FMenuMaster+0x88>
    e6c4:	e0 c1       	rjmp	.+960    	; 0xea86 <FMenuMaster+0x448>
    e6c6:	82 33       	cpi	r24, 0x32	; 50
    e6c8:	21 f0       	breq	.+8      	; 0xe6d2 <FMenuMaster+0x94>
    e6ca:	8a 32       	cpi	r24, 0x2A	; 42
    e6cc:	09 f0       	breq	.+2      	; 0xe6d0 <FMenuMaster+0x92>
    e6ce:	ab c2       	rjmp	.+1366   	; 0xec26 <FMenuMaster+0x5e8>
    e6d0:	02 c0       	rjmp	.+4      	; 0xe6d6 <FMenuMaster+0x98>
		  case '1':
               stMenuMaster=mmRestorePasswordMenu;
		       break;
		  case '2':
		       stMenuMaster=mmMasterReset;
    e6d2:	81 e1       	ldi	r24, 0x11	; 17
    e6d4:	01 c0       	rjmp	.+2      	; 0xe6d8 <FMenuMaster+0x9a>
		       break;
          case '*':
		       stMenuMaster=mmExitMaster;
    e6d6:	80 e1       	ldi	r24, 0x10	; 16
    e6d8:	80 93 4c 02 	sts	0x024C, r24
    e6dc:	a4 c2       	rjmp	.+1352   	; 0xec26 <FMenuMaster+0x5e8>
		       break;
		  }
	      break;
     case mmMasterReset:
		  
	      _datetime(0, strSystemDate, strSystemTime);
    e6de:	04 e7       	ldi	r16, 0x74	; 116
    e6e0:	18 e0       	ldi	r17, 0x08	; 8
    e6e2:	80 e0       	ldi	r24, 0x00	; 0
    e6e4:	6a eb       	ldi	r22, 0xBA	; 186
    e6e6:	73 e0       	ldi	r23, 0x03	; 3
    e6e8:	a8 01       	movw	r20, r16
    e6ea:	0e 94 57 a7 	call	0x14eae	; 0x14eae <_datetime>
	      sprintf_P(PTime,PSTR("%s"),strSystemTime);
    e6ee:	00 d0       	rcall	.+0      	; 0xe6f0 <FMenuMaster+0xb2>
    e6f0:	00 d0       	rcall	.+0      	; 0xe6f2 <FMenuMaster+0xb4>
    e6f2:	00 d0       	rcall	.+0      	; 0xe6f4 <FMenuMaster+0xb6>
    e6f4:	ed b7       	in	r30, 0x3d	; 61
    e6f6:	fe b7       	in	r31, 0x3e	; 62
    e6f8:	31 96       	adiw	r30, 0x01	; 1
    e6fa:	7e 01       	movw	r14, r28
    e6fc:	08 94       	sec
    e6fe:	e1 1c       	adc	r14, r1
    e700:	f1 1c       	adc	r15, r1
    e702:	ad b7       	in	r26, 0x3d	; 61
    e704:	be b7       	in	r27, 0x3e	; 62
    e706:	12 96       	adiw	r26, 0x02	; 2
    e708:	fc 92       	st	X, r15
    e70a:	ee 92       	st	-X, r14
    e70c:	11 97       	sbiw	r26, 0x01	; 1
    e70e:	8d ea       	ldi	r24, 0xAD	; 173
    e710:	99 e1       	ldi	r25, 0x19	; 25
    e712:	93 83       	std	Z+3, r25	; 0x03
    e714:	82 83       	std	Z+2, r24	; 0x02
    e716:	15 83       	std	Z+5, r17	; 0x05
    e718:	04 83       	std	Z+4, r16	; 0x04
    e71a:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
		  sprintf_P(strGeniusCode,PSTR("22345678"));		  
    e71e:	0f 90       	pop	r0
    e720:	0f 90       	pop	r0
    e722:	92 e9       	ldi	r25, 0x92	; 146
    e724:	c9 2e       	mov	r12, r25
    e726:	95 e0       	ldi	r25, 0x05	; 5
    e728:	d9 2e       	mov	r13, r25
    e72a:	ed b7       	in	r30, 0x3d	; 61
    e72c:	fe b7       	in	r31, 0x3e	; 62
    e72e:	d2 82       	std	Z+2, r13	; 0x02
    e730:	c1 82       	std	Z+1, r12	; 0x01
    e732:	84 ea       	ldi	r24, 0xA4	; 164
    e734:	99 e1       	ldi	r25, 0x19	; 25
    e736:	94 83       	std	Z+4, r25	; 0x04
    e738:	83 83       	std	Z+3, r24	; 0x03
    e73a:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
		  RemoveChar(PTime,':');sprintf_P(strKeyStamp,PSTR(""));
    e73e:	0f 90       	pop	r0
    e740:	0f 90       	pop	r0
    e742:	0f 90       	pop	r0
    e744:	0f 90       	pop	r0
    e746:	c7 01       	movw	r24, r14
    e748:	6a e3       	ldi	r22, 0x3A	; 58
    e74a:	0e 94 36 32 	call	0x646c	; 0x646c <RemoveChar>
    e74e:	00 d0       	rcall	.+0      	; 0xe750 <FMenuMaster+0x112>
    e750:	00 d0       	rcall	.+0      	; 0xe752 <FMenuMaster+0x114>
    e752:	00 ed       	ldi	r16, 0xD0	; 208
    e754:	17 e0       	ldi	r17, 0x07	; 7
    e756:	ad b7       	in	r26, 0x3d	; 61
    e758:	be b7       	in	r27, 0x3e	; 62
    e75a:	12 96       	adiw	r26, 0x02	; 2
    e75c:	1c 93       	st	X, r17
    e75e:	0e 93       	st	-X, r16
    e760:	11 97       	sbiw	r26, 0x01	; 1
    e762:	83 ea       	ldi	r24, 0xA3	; 163
    e764:	99 e1       	ldi	r25, 0x19	; 25
    e766:	14 96       	adiw	r26, 0x04	; 4
    e768:	9c 93       	st	X, r25
    e76a:	8e 93       	st	-X, r24
    e76c:	13 97       	sbiw	r26, 0x03	; 3
    e76e:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
		  GenerateKeyStamp(PTime,strGeniusCode,strKeyStamp);
    e772:	0f 90       	pop	r0
    e774:	0f 90       	pop	r0
    e776:	0f 90       	pop	r0
    e778:	0f 90       	pop	r0
    e77a:	c7 01       	movw	r24, r14
    e77c:	b6 01       	movw	r22, r12
    e77e:	a8 01       	movw	r20, r16
    e780:	0e 94 f7 32 	call	0x65ee	; 0x65ee <GenerateKeyStamp>

		  lcd_clear();
    e784:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
		  lcd_printf(1,1,PSTR("-Master Reset-"));
    e788:	81 e0       	ldi	r24, 0x01	; 1
    e78a:	61 e0       	ldi	r22, 0x01	; 1
    e78c:	44 e9       	ldi	r20, 0x94	; 148
    e78e:	59 e1       	ldi	r21, 0x19	; 25
    e790:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  sprintf_P(lcdteks,PSTR("Seed Code:%s"),strKeyStamp);
    e794:	00 d0       	rcall	.+0      	; 0xe796 <FMenuMaster+0x158>
    e796:	00 d0       	rcall	.+0      	; 0xe798 <FMenuMaster+0x15a>
    e798:	00 d0       	rcall	.+0      	; 0xe79a <FMenuMaster+0x15c>
    e79a:	ed b7       	in	r30, 0x3d	; 61
    e79c:	fe b7       	in	r31, 0x3e	; 62
    e79e:	31 96       	adiw	r30, 0x01	; 1
    e7a0:	8f e1       	ldi	r24, 0x1F	; 31
    e7a2:	e8 2e       	mov	r14, r24
    e7a4:	f1 2c       	mov	r15, r1
    e7a6:	ec 0e       	add	r14, r28
    e7a8:	fd 1e       	adc	r15, r29
    e7aa:	ad b7       	in	r26, 0x3d	; 61
    e7ac:	be b7       	in	r27, 0x3e	; 62
    e7ae:	12 96       	adiw	r26, 0x02	; 2
    e7b0:	fc 92       	st	X, r15
    e7b2:	ee 92       	st	-X, r14
    e7b4:	11 97       	sbiw	r26, 0x01	; 1
    e7b6:	87 e8       	ldi	r24, 0x87	; 135
    e7b8:	99 e1       	ldi	r25, 0x19	; 25
    e7ba:	93 83       	std	Z+3, r25	; 0x03
    e7bc:	82 83       	std	Z+2, r24	; 0x02
    e7be:	15 83       	std	Z+5, r17	; 0x05
    e7c0:	04 83       	std	Z+4, r16	; 0x04
    e7c2:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
		  lcd_print(2,1,lcdteks);
    e7c6:	ed b7       	in	r30, 0x3d	; 61
    e7c8:	fe b7       	in	r31, 0x3e	; 62
    e7ca:	36 96       	adiw	r30, 0x06	; 6
    e7cc:	0f b6       	in	r0, 0x3f	; 63
    e7ce:	f8 94       	cli
    e7d0:	fe bf       	out	0x3e, r31	; 62
    e7d2:	0f be       	out	0x3f, r0	; 63
    e7d4:	ed bf       	out	0x3d, r30	; 61
    e7d6:	82 e0       	ldi	r24, 0x02	; 2
    e7d8:	61 e0       	ldi	r22, 0x01	; 1
    e7da:	a7 01       	movw	r20, r14
    e7dc:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
		  lcd_printf(3,1,   PSTR("ResetCode:_         "));
    e7e0:	83 e0       	ldi	r24, 0x03	; 3
    e7e2:	61 e0       	ldi	r22, 0x01	; 1
    e7e4:	42 e7       	ldi	r20, 0x72	; 114
    e7e6:	59 e1       	ldi	r21, 0x19	; 25
    e7e8:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  lcd_printf(4,1,   PSTR("[*]Cancel   [#]Enter"));		          
    e7ec:	84 e0       	ldi	r24, 0x04	; 4
    e7ee:	61 e0       	ldi	r22, 0x01	; 1
    e7f0:	4d e5       	ldi	r20, 0x5D	; 93
    e7f2:	59 e1       	ldi	r21, 0x19	; 25
    e7f4:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
	      stMenuMaster=mmResetCodeEntry;
    e7f8:	82 e1       	ldi	r24, 0x12	; 18
    e7fa:	6e cf       	rjmp	.-292    	; 0xe6d8 <FMenuMaster+0x9a>
	      break;
     case mmResetCodeEntry:
          uiResult=UserInput(UI_NUMBER_R,3,11,strRestoreCode,0,9);
    e7fc:	81 e0       	ldi	r24, 0x01	; 1
    e7fe:	63 e0       	ldi	r22, 0x03	; 3
    e800:	4b e0       	ldi	r20, 0x0B	; 11
    e802:	2b e5       	ldi	r18, 0x5B	; 91
    e804:	3c e0       	ldi	r19, 0x0C	; 12
    e806:	00 e0       	ldi	r16, 0x00	; 0
    e808:	10 e0       	ldi	r17, 0x00	; 0
    e80a:	b9 e0       	ldi	r27, 0x09	; 9
    e80c:	eb 2e       	mov	r14, r27
    e80e:	0e 94 47 67 	call	0xce8e	; 0xce8e <UserInput>
		  switch(uiResult){
    e812:	83 30       	cpi	r24, 0x03	; 3
    e814:	49 f0       	breq	.+18     	; 0xe828 <FMenuMaster+0x1ea>
    e816:	84 30       	cpi	r24, 0x04	; 4
    e818:	08 f4       	brcc	.+2      	; 0xe81c <FMenuMaster+0x1de>
    e81a:	82 c1       	rjmp	.+772    	; 0xeb20 <FMenuMaster+0x4e2>
    e81c:	84 30       	cpi	r24, 0x04	; 4
    e81e:	31 f0       	breq	.+12     	; 0xe82c <FMenuMaster+0x1ee>
    e820:	85 30       	cpi	r24, 0x05	; 5
    e822:	09 f0       	breq	.+2      	; 0xe826 <FMenuMaster+0x1e8>
    e824:	00 c2       	rjmp	.+1024   	; 0xec26 <FMenuMaster+0x5e8>
    e826:	07 c0       	rjmp	.+14     	; 0xe836 <FMenuMaster+0x1f8>
		  case USER_OK:
               stMenuMaster=mmIsValidResetCode;
    e828:	83 e1       	ldi	r24, 0x13	; 19
    e82a:	56 cf       	rjmp	.-340    	; 0xe6d8 <FMenuMaster+0x9a>
		       break;
          case USER_CANCEL:
		       stMenuMaster=mmExitMaster;
		       break;
		  case USER_ENTRY:
		       lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
    e82c:	84 e0       	ldi	r24, 0x04	; 4
    e82e:	61 e0       	ldi	r22, 0x01	; 1
    e830:	48 e4       	ldi	r20, 0x48	; 72
    e832:	59 e1       	ldi	r21, 0x19	; 25
    e834:	8a c1       	rjmp	.+788    	; 0xeb4a <FMenuMaster+0x50c>
		       break;
          case USER_NO_DATA:
		       lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    e836:	84 e0       	ldi	r24, 0x04	; 4
    e838:	61 e0       	ldi	r22, 0x01	; 1
    e83a:	43 e3       	ldi	r20, 0x33	; 51
    e83c:	59 e1       	ldi	r21, 0x19	; 25
    e83e:	85 c1       	rjmp	.+778    	; 0xeb4a <FMenuMaster+0x50c>
		       break;
		  }	      
	      break;
     case mmIsValidResetCode:
	      if (ValidateRestoreCode(strKeyStamp,strRestoreCode)==RC_VALID){
    e840:	80 ed       	ldi	r24, 0xD0	; 208
    e842:	97 e0       	ldi	r25, 0x07	; 7
    e844:	6b e5       	ldi	r22, 0x5B	; 91
    e846:	7c e0       	ldi	r23, 0x0C	; 12
    e848:	0e 94 f0 46 	call	0x8de0	; 0x8de0 <ValidateRestoreCode>
    e84c:	81 30       	cpi	r24, 0x01	; 1
    e84e:	11 f4       	brne	.+4      	; 0xe854 <FMenuMaster+0x216>
		      stMenuMaster=mmMasterResetExec;
    e850:	84 e1       	ldi	r24, 0x14	; 20
    e852:	42 cf       	rjmp	.-380    	; 0xe6d8 <FMenuMaster+0x9a>
		  }else stMenuMaster=mmDisplayInvalidResetCode;
    e854:	86 e1       	ldi	r24, 0x16	; 22
    e856:	40 cf       	rjmp	.-384    	; 0xe6d8 <FMenuMaster+0x9a>
	      break;
     case mmMasterResetExec:
	      lcd_clear();
    e858:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
	      lcd_printf(1,1,PSTR("Reset EEPROM"));
    e85c:	81 e0       	ldi	r24, 0x01	; 1
    e85e:	61 e0       	ldi	r22, 0x01	; 1
    e860:	46 e2       	ldi	r20, 0x26	; 38
    e862:	59 e1       	ldi	r21, 0x19	; 25
    e864:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
	      lcd_printf(2,1,PSTR("Please Wait.."));
    e868:	82 e0       	ldi	r24, 0x02	; 2
    e86a:	61 e0       	ldi	r22, 0x01	; 1
    e86c:	48 e1       	ldi	r20, 0x18	; 24
    e86e:	59 e1       	ldi	r21, 0x19	; 25
    e870:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
	      MasterReset();
    e874:	0e 94 de 1b 	call	0x37bc	; 0x37bc <MasterReset>
          stMenuMaster=mmSuccesfullReset;
    e878:	85 e1       	ldi	r24, 0x15	; 21
    e87a:	2e cf       	rjmp	.-420    	; 0xe6d8 <FMenuMaster+0x9a>
	      break;
     case mmSuccesfullReset:
	      lcd_clear();
    e87c:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    e880:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    e882:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    e884:	81 e0       	ldi	r24, 0x01	; 1
    e886:	80 93 bc 01 	sts	0x01BC, r24
          stMenuMaster=mmSuccesfullReset;
	      break;
     case mmSuccesfullReset:
	      lcd_clear();
		  system_beep(1);
	      lcd_printf(2,1,PSTR("Reset Complete"));
    e88a:	82 e0       	ldi	r24, 0x02	; 2
    e88c:	61 e0       	ldi	r22, 0x01	; 1
    e88e:	49 e0       	ldi	r20, 0x09	; 9
    e890:	59 e1       	ldi	r21, 0x19	; 25
    e892:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
	      TimDisplay=0; 
    e896:	10 92 92 01 	sts	0x0192, r1
		  stMenuMaster=mmDelayDisplayComplete;
    e89a:	88 e1       	ldi	r24, 0x18	; 24
    e89c:	1d cf       	rjmp	.-454    	; 0xe6d8 <FMenuMaster+0x9a>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    e89e:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    e8a0:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    e8a2:	81 e0       	ldi	r24, 0x01	; 1
    e8a4:	80 93 bc 01 	sts	0x01BC, r24
	      TimDisplay=0; 
		  stMenuMaster=mmDelayDisplayComplete;
	      break;
     case mmDisplayInvalidResetCode:
          system_beep(1);
          lcd_printf(3,1,PSTR("Invalid Code        "));
    e8a8:	83 e0       	ldi	r24, 0x03	; 3
    e8aa:	61 e0       	ldi	r22, 0x01	; 1
    e8ac:	44 ef       	ldi	r20, 0xF4	; 244
    e8ae:	58 e1       	ldi	r21, 0x18	; 24
    e8b0:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
          TimDisplay=0; 
    e8b4:	10 92 92 01 	sts	0x0192, r1
		  stMenuMaster=mmDelayDisplayInvalidResetCode;
    e8b8:	87 e1       	ldi	r24, 0x17	; 23
    e8ba:	0e cf       	rjmp	.-484    	; 0xe6d8 <FMenuMaster+0x9a>
     case mmDelayDisplayInvalidResetCode:
          if (TimDisplay>5)stMenuMaster=mmExitMaster;
	      break;
     
	 case mmDelayDisplayComplete:
          if (TimDisplay>5)stMenuMaster=mmExitMaster;
    e8bc:	80 91 92 01 	lds	r24, 0x0192
    e8c0:	86 30       	cpi	r24, 0x06	; 6
    e8c2:	08 f4       	brcc	.+2      	; 0xe8c6 <FMenuMaster+0x288>
    e8c4:	b0 c1       	rjmp	.+864    	; 0xec26 <FMenuMaster+0x5e8>
    e8c6:	07 cf       	rjmp	.-498    	; 0xe6d6 <FMenuMaster+0x98>
	      break;

     case mmRestorePasswordMenu:	      
	      lcd_clear();
    e8c8:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
		  lcd_printf(1,1,PSTR("Enter GeNiUs Code   "));
    e8cc:	81 e0       	ldi	r24, 0x01	; 1
    e8ce:	61 e0       	ldi	r22, 0x01	; 1
    e8d0:	4f ed       	ldi	r20, 0xDF	; 223
    e8d2:	58 e1       	ldi	r21, 0x18	; 24
    e8d4:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  lcd_printf(2,1,PSTR("_                   "));
    e8d8:	82 e0       	ldi	r24, 0x02	; 2
    e8da:	61 e0       	ldi	r22, 0x01	; 1
    e8dc:	4a ec       	ldi	r20, 0xCA	; 202
    e8de:	58 e1       	ldi	r21, 0x18	; 24
    e8e0:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  lcd_printf(4,4,PSTR("[*]Cancel   [#]Enter"));
    e8e4:	84 e0       	ldi	r24, 0x04	; 4
    e8e6:	64 e0       	ldi	r22, 0x04	; 4
    e8e8:	45 eb       	ldi	r20, 0xB5	; 181
    e8ea:	58 e1       	ldi	r21, 0x18	; 24
    e8ec:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  sprintf_P(strGeniusCode,PSTR(""));
    e8f0:	00 d0       	rcall	.+0      	; 0xe8f2 <FMenuMaster+0x2b4>
    e8f2:	00 d0       	rcall	.+0      	; 0xe8f4 <FMenuMaster+0x2b6>
    e8f4:	82 e9       	ldi	r24, 0x92	; 146
    e8f6:	95 e0       	ldi	r25, 0x05	; 5
    e8f8:	ad b7       	in	r26, 0x3d	; 61
    e8fa:	be b7       	in	r27, 0x3e	; 62
    e8fc:	12 96       	adiw	r26, 0x02	; 2
    e8fe:	9c 93       	st	X, r25
    e900:	8e 93       	st	-X, r24
    e902:	11 97       	sbiw	r26, 0x01	; 1
    e904:	84 eb       	ldi	r24, 0xB4	; 180
    e906:	98 e1       	ldi	r25, 0x18	; 24
    e908:	14 96       	adiw	r26, 0x04	; 4
    e90a:	9c 93       	st	X, r25
    e90c:	8e 93       	st	-X, r24
    e90e:	13 97       	sbiw	r26, 0x03	; 3
    e910:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
          stMenuMaster=mmGeniusCodeEntry;
    e914:	83 e0       	ldi	r24, 0x03	; 3
    e916:	80 93 4c 02 	sts	0x024C, r24
    e91a:	80 e0       	ldi	r24, 0x00	; 0
    e91c:	0f 90       	pop	r0
    e91e:	0f 90       	pop	r0
    e920:	0f 90       	pop	r0
    e922:	0f 90       	pop	r0
    e924:	81 c1       	rjmp	.+770    	; 0xec28 <FMenuMaster+0x5ea>
	      break;
     case mmGeniusCodeEntry:
	 	  uiResult=UserInput(UI_NUMBER_R,2,1,strGeniusCode,0,10);
    e926:	81 e0       	ldi	r24, 0x01	; 1
    e928:	62 e0       	ldi	r22, 0x02	; 2
    e92a:	41 e0       	ldi	r20, 0x01	; 1
    e92c:	22 e9       	ldi	r18, 0x92	; 146
    e92e:	35 e0       	ldi	r19, 0x05	; 5
    e930:	00 e0       	ldi	r16, 0x00	; 0
    e932:	10 e0       	ldi	r17, 0x00	; 0
    e934:	aa e0       	ldi	r26, 0x0A	; 10
    e936:	ea 2e       	mov	r14, r26
    e938:	0e 94 47 67 	call	0xce8e	; 0xce8e <UserInput>
		  switch(uiResult){
    e93c:	83 30       	cpi	r24, 0x03	; 3
    e93e:	49 f0       	breq	.+18     	; 0xe952 <FMenuMaster+0x314>
    e940:	84 30       	cpi	r24, 0x04	; 4
    e942:	08 f4       	brcc	.+2      	; 0xe946 <FMenuMaster+0x308>
    e944:	ed c0       	rjmp	.+474    	; 0xeb20 <FMenuMaster+0x4e2>
    e946:	84 30       	cpi	r24, 0x04	; 4
    e948:	69 f0       	breq	.+26     	; 0xe964 <FMenuMaster+0x326>
    e94a:	85 30       	cpi	r24, 0x05	; 5
    e94c:	09 f0       	breq	.+2      	; 0xe950 <FMenuMaster+0x312>
    e94e:	6b c1       	rjmp	.+726    	; 0xec26 <FMenuMaster+0x5e8>
    e950:	0e c0       	rjmp	.+28     	; 0xe96e <FMenuMaster+0x330>
		  case USER_OK:               
			   //uart_printf(1,0,PSTR("GeniusCode: "));
			   //uart_print(1,1,strGeniusCode);
		       _datetime(0, strSystemDate, strSystemTime);
    e952:	80 e0       	ldi	r24, 0x00	; 0
    e954:	6a eb       	ldi	r22, 0xBA	; 186
    e956:	73 e0       	ldi	r23, 0x03	; 3
    e958:	44 e7       	ldi	r20, 0x74	; 116
    e95a:	58 e0       	ldi	r21, 0x08	; 8
    e95c:	0e 94 57 a7 	call	0x14eae	; 0x14eae <_datetime>
               stMenuMaster=mmIsValidGeniusCode;
    e960:	84 e0       	ldi	r24, 0x04	; 4
    e962:	ba ce       	rjmp	.-652    	; 0xe6d8 <FMenuMaster+0x9a>
		       break;
          case USER_CANCEL:
		       stMenuMaster=mmExitMaster;
		       break;
		  case USER_ENTRY:
		       lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
    e964:	84 e0       	ldi	r24, 0x04	; 4
    e966:	61 e0       	ldi	r22, 0x01	; 1
    e968:	4f e9       	ldi	r20, 0x9F	; 159
    e96a:	58 e1       	ldi	r21, 0x18	; 24
    e96c:	ee c0       	rjmp	.+476    	; 0xeb4a <FMenuMaster+0x50c>
		       break;
          case USER_NO_DATA:
		       lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    e96e:	84 e0       	ldi	r24, 0x04	; 4
    e970:	61 e0       	ldi	r22, 0x01	; 1
    e972:	4a e8       	ldi	r20, 0x8A	; 138
    e974:	58 e1       	ldi	r21, 0x18	; 24
    e976:	e9 c0       	rjmp	.+466    	; 0xeb4a <FMenuMaster+0x50c>
		       break;
		  }
	      break;
     case mmIsValidGeniusCode:
	      //GetDate
		      sprintf_P(PDate,PSTR("%s"),strSystemDate);
    e978:	00 d0       	rcall	.+0      	; 0xe97a <FMenuMaster+0x33c>
    e97a:	00 d0       	rcall	.+0      	; 0xe97c <FMenuMaster+0x33e>
    e97c:	00 d0       	rcall	.+0      	; 0xe97e <FMenuMaster+0x340>
    e97e:	ed b7       	in	r30, 0x3d	; 61
    e980:	fe b7       	in	r31, 0x3e	; 62
    e982:	31 96       	adiw	r30, 0x01	; 1
    e984:	8e 01       	movw	r16, r28
    e986:	05 5f       	subi	r16, 0xF5	; 245
    e988:	1f 4f       	sbci	r17, 0xFF	; 255
    e98a:	ad b7       	in	r26, 0x3d	; 61
    e98c:	be b7       	in	r27, 0x3e	; 62
    e98e:	12 96       	adiw	r26, 0x02	; 2
    e990:	1c 93       	st	X, r17
    e992:	0e 93       	st	-X, r16
    e994:	11 97       	sbiw	r26, 0x01	; 1
    e996:	87 e8       	ldi	r24, 0x87	; 135
    e998:	98 e1       	ldi	r25, 0x18	; 24
    e99a:	93 83       	std	Z+3, r25	; 0x03
    e99c:	82 83       	std	Z+2, r24	; 0x02
    e99e:	8a eb       	ldi	r24, 0xBA	; 186
    e9a0:	93 e0       	ldi	r25, 0x03	; 3
    e9a2:	95 83       	std	Z+5, r25	; 0x05
    e9a4:	84 83       	std	Z+4, r24	; 0x04
    e9a6:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
			  RemoveChar(PDate,'/');
    e9aa:	ed b7       	in	r30, 0x3d	; 61
    e9ac:	fe b7       	in	r31, 0x3e	; 62
    e9ae:	36 96       	adiw	r30, 0x06	; 6
    e9b0:	0f b6       	in	r0, 0x3f	; 63
    e9b2:	f8 94       	cli
    e9b4:	fe bf       	out	0x3e, r31	; 62
    e9b6:	0f be       	out	0x3f, r0	; 63
    e9b8:	ed bf       	out	0x3d, r30	; 61
    e9ba:	c8 01       	movw	r24, r16
    e9bc:	6f e2       	ldi	r22, 0x2F	; 47
    e9be:	0e 94 36 32 	call	0x646c	; 0x646c <RemoveChar>
		  if (ValidateGeniusCode(PDate,strGeniusCode)==GC_VALID){
    e9c2:	c8 01       	movw	r24, r16
    e9c4:	62 e9       	ldi	r22, 0x92	; 146
    e9c6:	75 e0       	ldi	r23, 0x05	; 5
    e9c8:	0e 94 12 47 	call	0x8e24	; 0x8e24 <ValidateGeniusCode>
    e9cc:	81 30       	cpi	r24, 0x01	; 1
    e9ce:	09 f0       	breq	.+2      	; 0xe9d2 <FMenuMaster+0x394>
    e9d0:	44 c0       	rjmp	.+136    	; 0xea5a <FMenuMaster+0x41c>

		  	  sprintf_P(PTime,PSTR("%s"),strSystemTime);
    e9d2:	00 d0       	rcall	.+0      	; 0xe9d4 <FMenuMaster+0x396>
    e9d4:	00 d0       	rcall	.+0      	; 0xe9d6 <FMenuMaster+0x398>
    e9d6:	00 d0       	rcall	.+0      	; 0xe9d8 <FMenuMaster+0x39a>
    e9d8:	ed b7       	in	r30, 0x3d	; 61
    e9da:	fe b7       	in	r31, 0x3e	; 62
    e9dc:	31 96       	adiw	r30, 0x01	; 1
    e9de:	8e 01       	movw	r16, r28
    e9e0:	0f 5f       	subi	r16, 0xFF	; 255
    e9e2:	1f 4f       	sbci	r17, 0xFF	; 255
    e9e4:	ad b7       	in	r26, 0x3d	; 61
    e9e6:	be b7       	in	r27, 0x3e	; 62
    e9e8:	12 96       	adiw	r26, 0x02	; 2
    e9ea:	1c 93       	st	X, r17
    e9ec:	0e 93       	st	-X, r16
    e9ee:	11 97       	sbiw	r26, 0x01	; 1
    e9f0:	84 e8       	ldi	r24, 0x84	; 132
    e9f2:	98 e1       	ldi	r25, 0x18	; 24
    e9f4:	93 83       	std	Z+3, r25	; 0x03
    e9f6:	82 83       	std	Z+2, r24	; 0x02
    e9f8:	84 e7       	ldi	r24, 0x74	; 116
    e9fa:	98 e0       	ldi	r25, 0x08	; 8
    e9fc:	95 83       	std	Z+5, r25	; 0x05
    e9fe:	84 83       	std	Z+4, r24	; 0x04
    ea00:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
			  RemoveChar(PTime,':');sprintf_P(strKeyStamp,PSTR(""));
    ea04:	ed b7       	in	r30, 0x3d	; 61
    ea06:	fe b7       	in	r31, 0x3e	; 62
    ea08:	36 96       	adiw	r30, 0x06	; 6
    ea0a:	0f b6       	in	r0, 0x3f	; 63
    ea0c:	f8 94       	cli
    ea0e:	fe bf       	out	0x3e, r31	; 62
    ea10:	0f be       	out	0x3f, r0	; 63
    ea12:	ed bf       	out	0x3d, r30	; 61
    ea14:	c8 01       	movw	r24, r16
    ea16:	6a e3       	ldi	r22, 0x3A	; 58
    ea18:	0e 94 36 32 	call	0x646c	; 0x646c <RemoveChar>
    ea1c:	00 d0       	rcall	.+0      	; 0xea1e <FMenuMaster+0x3e0>
    ea1e:	00 d0       	rcall	.+0      	; 0xea20 <FMenuMaster+0x3e2>
    ea20:	f0 ed       	ldi	r31, 0xD0	; 208
    ea22:	ef 2e       	mov	r14, r31
    ea24:	f7 e0       	ldi	r31, 0x07	; 7
    ea26:	ff 2e       	mov	r15, r31
    ea28:	ad b7       	in	r26, 0x3d	; 61
    ea2a:	be b7       	in	r27, 0x3e	; 62
    ea2c:	12 96       	adiw	r26, 0x02	; 2
    ea2e:	fc 92       	st	X, r15
    ea30:	ee 92       	st	-X, r14
    ea32:	11 97       	sbiw	r26, 0x01	; 1
    ea34:	83 e8       	ldi	r24, 0x83	; 131
    ea36:	98 e1       	ldi	r25, 0x18	; 24
    ea38:	14 96       	adiw	r26, 0x04	; 4
    ea3a:	9c 93       	st	X, r25
    ea3c:	8e 93       	st	-X, r24
    ea3e:	13 97       	sbiw	r26, 0x03	; 3
    ea40:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>

              //sprintf_P(strSend,PSTR("Time:%s"),PTime);
			  // uart_print(1,1,strSend);

		      GenerateKeyStamp(PTime,strGeniusCode,strKeyStamp);			  
    ea44:	0f 90       	pop	r0
    ea46:	0f 90       	pop	r0
    ea48:	0f 90       	pop	r0
    ea4a:	0f 90       	pop	r0
    ea4c:	c8 01       	movw	r24, r16
    ea4e:	62 e9       	ldi	r22, 0x92	; 146
    ea50:	75 e0       	ldi	r23, 0x05	; 5
    ea52:	a7 01       	movw	r20, r14
    ea54:	0e 94 f7 32 	call	0x65ee	; 0x65ee <GenerateKeyStamp>
    ea58:	cc c0       	rjmp	.+408    	; 0xebf2 <FMenuMaster+0x5b4>
			  stMenuMaster=mmDisplayKeyStamp;
		  }else stMenuMaster=mmDisplayInvalidCode;
    ea5a:	85 e0       	ldi	r24, 0x05	; 5
    ea5c:	3d ce       	rjmp	.-902    	; 0xe6d8 <FMenuMaster+0x9a>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    ea5e:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    ea60:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    ea62:	81 e0       	ldi	r24, 0x01	; 1
    ea64:	80 93 bc 01 	sts	0x01BC, r24
			  stMenuMaster=mmDisplayKeyStamp;
		  }else stMenuMaster=mmDisplayInvalidCode;
	      break;
     case mmDisplayInvalidCode:
	      system_beep(1);
          lcd_printf(3,1,PSTR("Invalid Code        "));
    ea68:	83 e0       	ldi	r24, 0x03	; 3
    ea6a:	61 e0       	ldi	r22, 0x01	; 1
    ea6c:	4e e6       	ldi	r20, 0x6E	; 110
    ea6e:	58 e1       	ldi	r21, 0x18	; 24
    ea70:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
          TimDisplay=0; 
    ea74:	10 92 92 01 	sts	0x0192, r1
		  stMenuMaster=mmDelayDisplayInvalidCode;
    ea78:	86 e0       	ldi	r24, 0x06	; 6
    ea7a:	2e ce       	rjmp	.-932    	; 0xe6d8 <FMenuMaster+0x9a>
	      break;

     case mmDelayDisplayInvalidCode:
	      if (TimDisplay>5)stMenuMaster=mmRestorePasswordMenu;
    ea7c:	80 91 92 01 	lds	r24, 0x0192
    ea80:	86 30       	cpi	r24, 0x06	; 6
    ea82:	08 f4       	brcc	.+2      	; 0xea86 <FMenuMaster+0x448>
    ea84:	d0 c0       	rjmp	.+416    	; 0xec26 <FMenuMaster+0x5e8>
    ea86:	82 e0       	ldi	r24, 0x02	; 2
    ea88:	27 ce       	rjmp	.-946    	; 0xe6d8 <FMenuMaster+0x9a>
	      break;
     case mmDisplayKeyStamp:
	      lcd_clear();
    ea8a:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
		  sprintf_P(lcdteks,PSTR("Key Stamp:%s "),strKeyStamp);
    ea8e:	00 d0       	rcall	.+0      	; 0xea90 <FMenuMaster+0x452>
    ea90:	00 d0       	rcall	.+0      	; 0xea92 <FMenuMaster+0x454>
    ea92:	00 d0       	rcall	.+0      	; 0xea94 <FMenuMaster+0x456>
    ea94:	ed b7       	in	r30, 0x3d	; 61
    ea96:	fe b7       	in	r31, 0x3e	; 62
    ea98:	31 96       	adiw	r30, 0x01	; 1
    ea9a:	8e 01       	movw	r16, r28
    ea9c:	01 5e       	subi	r16, 0xE1	; 225
    ea9e:	1f 4f       	sbci	r17, 0xFF	; 255
    eaa0:	ad b7       	in	r26, 0x3d	; 61
    eaa2:	be b7       	in	r27, 0x3e	; 62
    eaa4:	12 96       	adiw	r26, 0x02	; 2
    eaa6:	1c 93       	st	X, r17
    eaa8:	0e 93       	st	-X, r16
    eaaa:	11 97       	sbiw	r26, 0x01	; 1
    eaac:	80 e6       	ldi	r24, 0x60	; 96
    eaae:	98 e1       	ldi	r25, 0x18	; 24
    eab0:	93 83       	std	Z+3, r25	; 0x03
    eab2:	82 83       	std	Z+2, r24	; 0x02
    eab4:	80 ed       	ldi	r24, 0xD0	; 208
    eab6:	97 e0       	ldi	r25, 0x07	; 7
    eab8:	95 83       	std	Z+5, r25	; 0x05
    eaba:	84 83       	std	Z+4, r24	; 0x04
    eabc:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
		  lcd_print(1,1,lcdteks);
    eac0:	ed b7       	in	r30, 0x3d	; 61
    eac2:	fe b7       	in	r31, 0x3e	; 62
    eac4:	36 96       	adiw	r30, 0x06	; 6
    eac6:	0f b6       	in	r0, 0x3f	; 63
    eac8:	f8 94       	cli
    eaca:	fe bf       	out	0x3e, r31	; 62
    eacc:	0f be       	out	0x3f, r0	; 63
    eace:	ed bf       	out	0x3d, r30	; 61
    ead0:	81 e0       	ldi	r24, 0x01	; 1
    ead2:	61 e0       	ldi	r22, 0x01	; 1
    ead4:	a8 01       	movw	r20, r16
    ead6:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
		  lcd_printf(2,1,PSTR("Enter Restore Code  "));
    eada:	82 e0       	ldi	r24, 0x02	; 2
    eadc:	61 e0       	ldi	r22, 0x01	; 1
    eade:	4b e4       	ldi	r20, 0x4B	; 75
    eae0:	58 e1       	ldi	r21, 0x18	; 24
    eae2:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  lcd_printf(3,1,PSTR("_                   "));
    eae6:	83 e0       	ldi	r24, 0x03	; 3
    eae8:	61 e0       	ldi	r22, 0x01	; 1
    eaea:	46 e3       	ldi	r20, 0x36	; 54
    eaec:	58 e1       	ldi	r21, 0x18	; 24
    eaee:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    eaf2:	84 e0       	ldi	r24, 0x04	; 4
    eaf4:	61 e0       	ldi	r22, 0x01	; 1
    eaf6:	41 e2       	ldi	r20, 0x21	; 33
    eaf8:	58 e1       	ldi	r21, 0x18	; 24
    eafa:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
          stMenuMaster=mmRestoreCodeEntry;
    eafe:	88 e0       	ldi	r24, 0x08	; 8
    eb00:	eb cd       	rjmp	.-1066   	; 0xe6d8 <FMenuMaster+0x9a>
	      break;
     case mmRestoreCodeEntry:
	 	  uiResult=UserInput(UI_NUMBER_R,3,1,strRestoreCode,0,10);
    eb02:	81 e0       	ldi	r24, 0x01	; 1
    eb04:	63 e0       	ldi	r22, 0x03	; 3
    eb06:	41 e0       	ldi	r20, 0x01	; 1
    eb08:	2b e5       	ldi	r18, 0x5B	; 91
    eb0a:	3c e0       	ldi	r19, 0x0C	; 12
    eb0c:	00 e0       	ldi	r16, 0x00	; 0
    eb0e:	10 e0       	ldi	r17, 0x00	; 0
    eb10:	ea e0       	ldi	r30, 0x0A	; 10
    eb12:	ee 2e       	mov	r14, r30
    eb14:	0e 94 47 67 	call	0xce8e	; 0xce8e <UserInput>
		  switch(uiResult){
    eb18:	83 30       	cpi	r24, 0x03	; 3
    eb1a:	61 f0       	breq	.+24     	; 0xeb34 <FMenuMaster+0x4f6>
    eb1c:	84 30       	cpi	r24, 0x04	; 4
    eb1e:	20 f4       	brcc	.+8      	; 0xeb28 <FMenuMaster+0x4ea>
    eb20:	81 30       	cpi	r24, 0x01	; 1
    eb22:	09 f0       	breq	.+2      	; 0xeb26 <FMenuMaster+0x4e8>
    eb24:	80 c0       	rjmp	.+256    	; 0xec26 <FMenuMaster+0x5e8>
    eb26:	d7 cd       	rjmp	.-1106   	; 0xe6d6 <FMenuMaster+0x98>
    eb28:	84 30       	cpi	r24, 0x04	; 4
    eb2a:	31 f0       	breq	.+12     	; 0xeb38 <FMenuMaster+0x4fa>
    eb2c:	85 30       	cpi	r24, 0x05	; 5
    eb2e:	09 f0       	breq	.+2      	; 0xeb32 <FMenuMaster+0x4f4>
    eb30:	7a c0       	rjmp	.+244    	; 0xec26 <FMenuMaster+0x5e8>
    eb32:	07 c0       	rjmp	.+14     	; 0xeb42 <FMenuMaster+0x504>
		  case USER_OK:
               stMenuMaster=mmIsValidRestoreCode;
    eb34:	89 e0       	ldi	r24, 0x09	; 9
    eb36:	d0 cd       	rjmp	.-1120   	; 0xe6d8 <FMenuMaster+0x9a>
		       break;
          case USER_CANCEL:
		       stMenuMaster=mmExitMaster;
		       break;
		  case USER_ENTRY:
		       lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
    eb38:	84 e0       	ldi	r24, 0x04	; 4
    eb3a:	61 e0       	ldi	r22, 0x01	; 1
    eb3c:	4c e0       	ldi	r20, 0x0C	; 12
    eb3e:	58 e1       	ldi	r21, 0x18	; 24
    eb40:	04 c0       	rjmp	.+8      	; 0xeb4a <FMenuMaster+0x50c>
		       break;
          case USER_NO_DATA:
		       lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    eb42:	84 e0       	ldi	r24, 0x04	; 4
    eb44:	61 e0       	ldi	r22, 0x01	; 1
    eb46:	47 ef       	ldi	r20, 0xF7	; 247
    eb48:	57 e1       	ldi	r21, 0x17	; 23
    eb4a:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
    eb4e:	6b c0       	rjmp	.+214    	; 0xec26 <FMenuMaster+0x5e8>
		       break;
		  }
	      break;
     case mmIsValidRestoreCode:
	      if (ValidateRestoreCode(strKeyStamp,strRestoreCode)==RC_VALID){
    eb50:	80 ed       	ldi	r24, 0xD0	; 208
    eb52:	97 e0       	ldi	r25, 0x07	; 7
    eb54:	6b e5       	ldi	r22, 0x5B	; 91
    eb56:	7c e0       	ldi	r23, 0x0C	; 12
    eb58:	0e 94 f0 46 	call	0x8de0	; 0x8de0 <ValidateRestoreCode>
    eb5c:	81 30       	cpi	r24, 0x01	; 1
    eb5e:	11 f4       	brne	.+4      	; 0xeb64 <FMenuMaster+0x526>
		      stMenuMaster=mmRestorePassword;
    eb60:	8c e0       	ldi	r24, 0x0C	; 12
    eb62:	ba cd       	rjmp	.-1164   	; 0xe6d8 <FMenuMaster+0x9a>
		  }else stMenuMaster=mmDisplayInvalidRestoreCode;
    eb64:	8a e0       	ldi	r24, 0x0A	; 10
    eb66:	b8 cd       	rjmp	.-1168   	; 0xe6d8 <FMenuMaster+0x9a>
	      break;
     case mmRestorePassword:
	      sprintf_P(strNewPassword,PSTR(SPV_DEFAULT_PASS));
    eb68:	00 d0       	rcall	.+0      	; 0xeb6a <FMenuMaster+0x52c>
    eb6a:	00 d0       	rcall	.+0      	; 0xeb6c <FMenuMaster+0x52e>
    eb6c:	8e 01       	movw	r16, r28
    eb6e:	0b 5e       	subi	r16, 0xEB	; 235
    eb70:	1f 4f       	sbci	r17, 0xFF	; 255
    eb72:	ad b7       	in	r26, 0x3d	; 61
    eb74:	be b7       	in	r27, 0x3e	; 62
    eb76:	12 96       	adiw	r26, 0x02	; 2
    eb78:	1c 93       	st	X, r17
    eb7a:	0e 93       	st	-X, r16
    eb7c:	11 97       	sbiw	r26, 0x01	; 1
    eb7e:	81 ef       	ldi	r24, 0xF1	; 241
    eb80:	97 e1       	ldi	r25, 0x17	; 23
    eb82:	14 96       	adiw	r26, 0x04	; 4
    eb84:	9c 93       	st	X, r25
    eb86:	8e 93       	st	-X, r24
    eb88:	13 97       	sbiw	r26, 0x03	; 3
    eb8a:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
		  eeprom_write_block((const void*) &strNewPassword,(void*) &DefSpvPassword,sizeof(DefSpvPassword));
    eb8e:	0f 90       	pop	r0
    eb90:	0f 90       	pop	r0
    eb92:	0f 90       	pop	r0
    eb94:	0f 90       	pop	r0
    eb96:	c8 01       	movw	r24, r16
    eb98:	61 e0       	ldi	r22, 0x01	; 1
    eb9a:	70 e0       	ldi	r23, 0x00	; 0
    eb9c:	4a e0       	ldi	r20, 0x0A	; 10
    eb9e:	50 e0       	ldi	r21, 0x00	; 0
    eba0:	0e 94 d1 ac 	call	0x159a2	; 0x159a2 <__eewr_block_m128>
		  sprintf_P(strNewPassword,PSTR(SYS_DEFAULT_PASS));
    eba4:	00 d0       	rcall	.+0      	; 0xeba6 <FMenuMaster+0x568>
    eba6:	00 d0       	rcall	.+0      	; 0xeba8 <FMenuMaster+0x56a>
    eba8:	ed b7       	in	r30, 0x3d	; 61
    ebaa:	fe b7       	in	r31, 0x3e	; 62
    ebac:	12 83       	std	Z+2, r17	; 0x02
    ebae:	01 83       	std	Z+1, r16	; 0x01
    ebb0:	8b ee       	ldi	r24, 0xEB	; 235
    ebb2:	97 e1       	ldi	r25, 0x17	; 23
    ebb4:	94 83       	std	Z+4, r25	; 0x04
    ebb6:	83 83       	std	Z+3, r24	; 0x03
    ebb8:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
		  eeprom_write_block((const void*) &strNewPassword,(void*) &DefSysPassword,sizeof(DefSysPassword));	      		  
    ebbc:	0f 90       	pop	r0
    ebbe:	0f 90       	pop	r0
    ebc0:	0f 90       	pop	r0
    ebc2:	0f 90       	pop	r0
    ebc4:	c8 01       	movw	r24, r16
    ebc6:	6b e0       	ldi	r22, 0x0B	; 11
    ebc8:	70 e0       	ldi	r23, 0x00	; 0
    ebca:	4a e0       	ldi	r20, 0x0A	; 10
    ebcc:	50 e0       	ldi	r21, 0x00	; 0
    ebce:	0e 94 d1 ac 	call	0x159a2	; 0x159a2 <__eewr_block_m128>
	      stMenuMaster=mmDisplaySuccess;
    ebd2:	8d e0       	ldi	r24, 0x0D	; 13
    ebd4:	81 cd       	rjmp	.-1278   	; 0xe6d8 <FMenuMaster+0x9a>
	      break;
     case mmDisplayInvalidRestoreCode:
	      lcd_printf(3,1,PSTR("Invalid Restore  "));
    ebd6:	83 e0       	ldi	r24, 0x03	; 3
    ebd8:	61 e0       	ldi	r22, 0x01	; 1
    ebda:	49 ed       	ldi	r20, 0xD9	; 217
    ebdc:	57 e1       	ldi	r21, 0x17	; 23
    ebde:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  TimDisplay=0;
    ebe2:	10 92 92 01 	sts	0x0192, r1
          stMenuMaster=mmDelayInvalidRestoreCode;
    ebe6:	8b e0       	ldi	r24, 0x0B	; 11
    ebe8:	77 cd       	rjmp	.-1298   	; 0xe6d8 <FMenuMaster+0x9a>
	      break;
     case mmDelayInvalidRestoreCode:
	      if (TimDisplay>5)stMenuMaster=mmDisplayKeyStamp;
    ebea:	80 91 92 01 	lds	r24, 0x0192
    ebee:	86 30       	cpi	r24, 0x06	; 6
    ebf0:	d0 f0       	brcs	.+52     	; 0xec26 <FMenuMaster+0x5e8>
    ebf2:	87 e0       	ldi	r24, 0x07	; 7
    ebf4:	71 cd       	rjmp	.-1310   	; 0xe6d8 <FMenuMaster+0x9a>
	      break;
     case mmDisplaySuccess:
	      //lcd_clear();
		  lcd_printf(3,1,PSTR("Password Restored"));
    ebf6:	83 e0       	ldi	r24, 0x03	; 3
    ebf8:	61 e0       	ldi	r22, 0x01	; 1
    ebfa:	47 ec       	ldi	r20, 0xC7	; 199
    ebfc:	57 e1       	ldi	r21, 0x17	; 23
    ebfe:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    ec02:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    ec04:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    ec06:	81 e0       	ldi	r24, 0x01	; 1
    ec08:	80 93 bc 01 	sts	0x01BC, r24
	      break;
     case mmDisplaySuccess:
	      //lcd_clear();
		  lcd_printf(3,1,PSTR("Password Restored"));
		  system_beep(1);
		  TimDisplay=0;
    ec0c:	10 92 92 01 	sts	0x0192, r1
          stMenuMaster=mmDelayExit;
    ec10:	8f e0       	ldi	r24, 0x0F	; 15
    ec12:	62 cd       	rjmp	.-1340   	; 0xe6d8 <FMenuMaster+0x9a>
	      break;
     case mmDelayExit:
	      if (TimDisplay>=5)stMenuMaster=mmExitMaster;
    ec14:	80 91 92 01 	lds	r24, 0x0192
    ec18:	85 30       	cpi	r24, 0x05	; 5
    ec1a:	28 f0       	brcs	.+10     	; 0xec26 <FMenuMaster+0x5e8>
    ec1c:	5c cd       	rjmp	.-1352   	; 0xe6d6 <FMenuMaster+0x98>
	      break;
     case mmExitMaster:
	      stMenuMaster=mmInitMaster;
    ec1e:	10 92 4c 02 	sts	0x024C, r1
    ec22:	81 e0       	ldi	r24, 0x01	; 1
    ec24:	01 c0       	rjmp	.+2      	; 0xec28 <FMenuMaster+0x5ea>
    ec26:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
	      break;
	 }
  return Result;

}
    ec28:	e2 96       	adiw	r28, 0x32	; 50
    ec2a:	0f b6       	in	r0, 0x3f	; 63
    ec2c:	f8 94       	cli
    ec2e:	de bf       	out	0x3e, r29	; 62
    ec30:	0f be       	out	0x3f, r0	; 63
    ec32:	cd bf       	out	0x3d, r28	; 61
    ec34:	cf 91       	pop	r28
    ec36:	df 91       	pop	r29
    ec38:	1f 91       	pop	r17
    ec3a:	0f 91       	pop	r16
    ec3c:	ff 90       	pop	r15
    ec3e:	ef 90       	pop	r14
    ec40:	df 90       	pop	r13
    ec42:	cf 90       	pop	r12
    ec44:	08 95       	ret

0000ec46 <FMenuPassword>:
   return Result;	 
}



char FMenuPassword(){
    ec46:	af 92       	push	r10
    ec48:	bf 92       	push	r11
    ec4a:	cf 92       	push	r12
    ec4c:	df 92       	push	r13
    ec4e:	ef 92       	push	r14
    ec50:	0f 93       	push	r16
    ec52:	1f 93       	push	r17
    ec54:	df 93       	push	r29
    ec56:	cf 93       	push	r28
    ec58:	cd b7       	in	r28, 0x3d	; 61
    ec5a:	de b7       	in	r29, 0x3e	; 62
    ec5c:	6e 97       	sbiw	r28, 0x1e	; 30
    ec5e:	0f b6       	in	r0, 0x3f	; 63
    ec60:	f8 94       	cli
    ec62:	de bf       	out	0x3e, r29	; 62
    ec64:	0f be       	out	0x3f, r0	; 63
    ec66:	cd bf       	out	0x3d, r28	; 61
static char stMenuPasword=mpInitPassword,strPassword[10],PassStatus=MP_NONE;;
       char Result=MP_NONE,strMasterPass[10],strSystemPass[10],strAdminPass[10];
       char uiResult;

     Result=MP_NONE;
     switch(stMenuPasword){
    ec68:	e0 90 58 02 	lds	r14, 0x0258
    ec6c:	81 e0       	ldi	r24, 0x01	; 1
    ec6e:	e8 16       	cp	r14, r24
    ec70:	01 f1       	breq	.+64     	; 0xecb2 <FMenuPassword+0x6c>
    ec72:	e8 16       	cp	r14, r24
    ec74:	40 f0       	brcs	.+16     	; 0xec86 <FMenuPassword+0x40>
    ec76:	e2 e0       	ldi	r30, 0x02	; 2
    ec78:	ee 16       	cp	r14, r30
    ec7a:	e9 f1       	breq	.+122    	; 0xecf6 <FMenuPassword+0xb0>
    ec7c:	f3 e0       	ldi	r31, 0x03	; 3
    ec7e:	ef 16       	cp	r14, r31
    ec80:	09 f0       	breq	.+2      	; 0xec84 <FMenuPassword+0x3e>
    ec82:	8c c0       	rjmp	.+280    	; 0xed9c <FMenuPassword+0x156>
    ec84:	86 c0       	rjmp	.+268    	; 0xed92 <FMenuPassword+0x14c>
	 case mpInitPassword:
	      lcd_clear();
    ec86:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
		  lcd_printf(1,1,PSTR("PASSWORD:"));
    ec8a:	81 e0       	ldi	r24, 0x01	; 1
    ec8c:	61 e0       	ldi	r22, 0x01	; 1
    ec8e:	40 e6       	ldi	r20, 0x60	; 96
    ec90:	5a e1       	ldi	r21, 0x1A	; 26
    ec92:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  lcd_printf(2,1,PSTR("_"));
    ec96:	82 e0       	ldi	r24, 0x02	; 2
    ec98:	61 e0       	ldi	r22, 0x01	; 1
    ec9a:	4e e5       	ldi	r20, 0x5E	; 94
    ec9c:	5a e1       	ldi	r21, 0x1A	; 26
    ec9e:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    eca2:	84 e0       	ldi	r24, 0x04	; 4
    eca4:	61 e0       	ldi	r22, 0x01	; 1
    eca6:	49 e4       	ldi	r20, 0x49	; 73
    eca8:	5a e1       	ldi	r21, 0x1A	; 26
    ecaa:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  FillChar(strPassword,0,sizeof(strPassword));
		  stMenuPasword=mpInputPasword;
    ecae:	81 e0       	ldi	r24, 0x01	; 1
    ecb0:	6d c0       	rjmp	.+218    	; 0xed8c <FMenuPassword+0x146>
	      break;
     case mpInputPasword:
	 	      uiResult=UserInput(UI_NUM_PASSWORD,2,1,strPassword,0,8);
    ecb2:	84 e0       	ldi	r24, 0x04	; 4
    ecb4:	62 e0       	ldi	r22, 0x02	; 2
    ecb6:	41 e0       	ldi	r20, 0x01	; 1
    ecb8:	2e e4       	ldi	r18, 0x4E	; 78
    ecba:	32 e0       	ldi	r19, 0x02	; 2
    ecbc:	00 e0       	ldi	r16, 0x00	; 0
    ecbe:	10 e0       	ldi	r17, 0x00	; 0
    ecc0:	58 e0       	ldi	r21, 0x08	; 8
    ecc2:	e5 2e       	mov	r14, r21
    ecc4:	0e 94 47 67 	call	0xce8e	; 0xce8e <UserInput>
		  if (uiResult==USER_OK){
    ecc8:	83 30       	cpi	r24, 0x03	; 3
    ecca:	11 f4       	brne	.+4      	; 0xecd0 <FMenuPassword+0x8a>
		      stMenuPasword=mpProcessPassword;
    eccc:	82 e0       	ldi	r24, 0x02	; 2
    ecce:	5e c0       	rjmp	.+188    	; 0xed8c <FMenuPassword+0x146>
			  }
		  else
		  if (uiResult==USER_CANCEL){
    ecd0:	81 30       	cpi	r24, 0x01	; 1
    ecd2:	09 f4       	brne	.+2      	; 0xecd6 <FMenuPassword+0x90>
    ecd4:	4c c0       	rjmp	.+152    	; 0xed6e <FMenuPassword+0x128>
		      PassStatus=MP_CANCEL;
		      stMenuPasword=mpExit;
			  }
		  else
		  if (uiResult==USER_ENTRY)lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
    ecd6:	84 30       	cpi	r24, 0x04	; 4
    ecd8:	21 f4       	brne	.+8      	; 0xece2 <FMenuPassword+0x9c>
    ecda:	61 e0       	ldi	r22, 0x01	; 1
    ecdc:	44 e3       	ldi	r20, 0x34	; 52
    ecde:	5a e1       	ldi	r21, 0x1A	; 26
    ece0:	07 c0       	rjmp	.+14     	; 0xecf0 <FMenuPassword+0xaa>
		  else
		  if (uiResult==USER_NO_DATA)lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    ece2:	85 30       	cpi	r24, 0x05	; 5
    ece4:	09 f0       	breq	.+2      	; 0xece8 <FMenuPassword+0xa2>
    ece6:	5a c0       	rjmp	.+180    	; 0xed9c <FMenuPassword+0x156>
    ece8:	84 e0       	ldi	r24, 0x04	; 4
    ecea:	61 e0       	ldi	r22, 0x01	; 1
    ecec:	4f e1       	ldi	r20, 0x1F	; 31
    ecee:	5a e1       	ldi	r21, 0x1A	; 26
    ecf0:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
    ecf4:	53 c0       	rjmp	.+166    	; 0xed9c <FMenuPassword+0x156>
          break;	 
	 case mpProcessPassword:
		      
	      sprintf_P(strMasterPass,PSTR(MASTER_PASSWORD)); 
    ecf6:	00 d0       	rcall	.+0      	; 0xecf8 <FMenuPassword+0xb2>
    ecf8:	00 d0       	rcall	.+0      	; 0xecfa <FMenuPassword+0xb4>
    ecfa:	8e 01       	movw	r16, r28
    ecfc:	0f 5f       	subi	r16, 0xFF	; 255
    ecfe:	1f 4f       	sbci	r17, 0xFF	; 255
    ed00:	ed b7       	in	r30, 0x3d	; 61
    ed02:	fe b7       	in	r31, 0x3e	; 62
    ed04:	12 83       	std	Z+2, r17	; 0x02
    ed06:	01 83       	std	Z+1, r16	; 0x01
    ed08:	87 e1       	ldi	r24, 0x17	; 23
    ed0a:	9a e1       	ldi	r25, 0x1A	; 26
    ed0c:	94 83       	std	Z+4, r25	; 0x04
    ed0e:	83 83       	std	Z+3, r24	; 0x03
    ed10:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	      eeprom_read_block((void*) &strAdminPass, (const void*) &DefSpvPassword, 10);
    ed14:	0f 90       	pop	r0
    ed16:	0f 90       	pop	r0
    ed18:	0f 90       	pop	r0
    ed1a:	0f 90       	pop	r0
    ed1c:	35 e1       	ldi	r19, 0x15	; 21
    ed1e:	c3 2e       	mov	r12, r19
    ed20:	d1 2c       	mov	r13, r1
    ed22:	cc 0e       	add	r12, r28
    ed24:	dd 1e       	adc	r13, r29
    ed26:	c6 01       	movw	r24, r12
    ed28:	61 e0       	ldi	r22, 0x01	; 1
    ed2a:	70 e0       	ldi	r23, 0x00	; 0
    ed2c:	4a e0       	ldi	r20, 0x0A	; 10
    ed2e:	50 e0       	ldi	r21, 0x00	; 0
    ed30:	0e 94 b9 ac 	call	0x15972	; 0x15972 <__eerd_block_m128>
	      eeprom_read_block((void*) &strSystemPass, (const void*) &DefSysPassword, 10);
    ed34:	2b e0       	ldi	r18, 0x0B	; 11
    ed36:	a2 2e       	mov	r10, r18
    ed38:	b1 2c       	mov	r11, r1
    ed3a:	ac 0e       	add	r10, r28
    ed3c:	bd 1e       	adc	r11, r29
    ed3e:	c5 01       	movw	r24, r10
    ed40:	6b e0       	ldi	r22, 0x0B	; 11
    ed42:	70 e0       	ldi	r23, 0x00	; 0
    ed44:	4a e0       	ldi	r20, 0x0A	; 10
    ed46:	50 e0       	ldi	r21, 0x00	; 0
    ed48:	0e 94 b9 ac 	call	0x15972	; 0x15972 <__eerd_block_m128>
		  
		  if (strcmp(strMasterPass,strPassword)==0)
    ed4c:	c8 01       	movw	r24, r16
    ed4e:	6e e4       	ldi	r22, 0x4E	; 78
    ed50:	72 e0       	ldi	r23, 0x02	; 2
    ed52:	0e 94 71 aa 	call	0x154e2	; 0x154e2 <strcmp>
    ed56:	00 97       	sbiw	r24, 0x00	; 0
    ed58:	11 f4       	brne	.+4      	; 0xed5e <FMenuPassword+0x118>
		       PassStatus=MP_VALID_MASTER;
    ed5a:	83 e0       	ldi	r24, 0x03	; 3
    ed5c:	08 c0       	rjmp	.+16     	; 0xed6e <FMenuPassword+0x128>
		  else
	      if (strcmp(strAdminPass,strPassword)==0){
    ed5e:	c6 01       	movw	r24, r12
    ed60:	6e e4       	ldi	r22, 0x4E	; 78
    ed62:	72 e0       	ldi	r23, 0x02	; 2
    ed64:	0e 94 71 aa 	call	0x154e2	; 0x154e2 <strcmp>
    ed68:	00 97       	sbiw	r24, 0x00	; 0
    ed6a:	21 f4       	brne	.+8      	; 0xed74 <FMenuPassword+0x12e>
		       PassStatus=MP_VALID_ADMIN;
    ed6c:	84 e0       	ldi	r24, 0x04	; 4
    ed6e:	80 93 4d 02 	sts	0x024D, r24
    ed72:	0b c0       	rjmp	.+22     	; 0xed8a <FMenuPassword+0x144>
               //lcd_printf(3,1,PSTR("Admin"));
               //_delay_ms(5000);
			   }
		  else if (strcmp(strSystemPass,strPassword)==0){
    ed74:	c5 01       	movw	r24, r10
    ed76:	6e e4       	ldi	r22, 0x4E	; 78
    ed78:	72 e0       	ldi	r23, 0x02	; 2
    ed7a:	0e 94 71 aa 	call	0x154e2	; 0x154e2 <strcmp>
    ed7e:	00 97       	sbiw	r24, 0x00	; 0
    ed80:	11 f4       	brne	.+4      	; 0xed86 <FMenuPassword+0x140>
		       PassStatus=MP_VALID_SYSTEM;
    ed82:	85 e0       	ldi	r24, 0x05	; 5
    ed84:	f4 cf       	rjmp	.-24     	; 0xed6e <FMenuPassword+0x128>
			   //lcd_printf(3,1,PSTR("System"));
               //_delay_ms(5000);
			   }
		  else PassStatus=MP_INVALID;
    ed86:	e0 92 4d 02 	sts	0x024D, r14
		  stMenuPasword=mpExit;
    ed8a:	83 e0       	ldi	r24, 0x03	; 3
    ed8c:	80 93 58 02 	sts	0x0258, r24
    ed90:	05 c0       	rjmp	.+10     	; 0xed9c <FMenuPassword+0x156>
	      break;
	 case mpExit:
	      //lcd_print(3,1,strPassword);
		  //_delay_ms(5000);
	      stMenuPasword=mpInitPassword;
    ed92:	10 92 58 02 	sts	0x0258, r1
	      Result=PassStatus;
    ed96:	80 91 4d 02 	lds	r24, 0x024D
    ed9a:	01 c0       	rjmp	.+2      	; 0xed9e <FMenuPassword+0x158>
    ed9c:	80 e0       	ldi	r24, 0x00	; 0
	      break;
	 }
   return Result;
}
    ed9e:	6e 96       	adiw	r28, 0x1e	; 30
    eda0:	0f b6       	in	r0, 0x3f	; 63
    eda2:	f8 94       	cli
    eda4:	de bf       	out	0x3e, r29	; 62
    eda6:	0f be       	out	0x3f, r0	; 63
    eda8:	cd bf       	out	0x3d, r28	; 61
    edaa:	cf 91       	pop	r28
    edac:	df 91       	pop	r29
    edae:	1f 91       	pop	r17
    edb0:	0f 91       	pop	r16
    edb2:	ef 90       	pop	r14
    edb4:	df 90       	pop	r13
    edb6:	cf 90       	pop	r12
    edb8:	bf 90       	pop	r11
    edba:	af 90       	pop	r10
    edbc:	08 95       	ret

0000edbe <SetBaudRate>:
	 //Spooling HFCx 0000
	 cmdPrint=0b00010000|(1<<PRN_PAPER_CUT);
	 IsFreePrinting=True;
}

void SetBaudRate(char ComAddr,char brMap){//Com1..Com4
    edbe:	1f 93       	push	r17
    edc0:	28 2f       	mov	r18, r24
    edc2:	96 2f       	mov	r25, r22
unsigned int brValue=9600;
char brMessage=0;

     if ((ComAddr>=1)&&(ComAddr<=2)){
    edc4:	18 2f       	mov	r17, r24
    edc6:	11 50       	subi	r17, 0x01	; 1
    edc8:	12 30       	cpi	r17, 0x02	; 2
    edca:	50 f4       	brcc	.+20     	; 0xede0 <SetBaudRate+0x22>
	     brValue=GetBaudrate(brMap);
    edcc:	86 2f       	mov	r24, r22
    edce:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <GetBaudrate>
	      uart_init((ComAddr-1),brValue);
    edd2:	ac 01       	movw	r20, r24
    edd4:	60 e0       	ldi	r22, 0x00	; 0
    edd6:	70 e0       	ldi	r23, 0x00	; 0
    edd8:	81 2f       	mov	r24, r17
    edda:	0e 94 48 a8 	call	0x15090	; 0x15090 <uart_init>
    edde:	18 c0       	rjmp	.+48     	; 0xee10 <SetBaudRate+0x52>
	 }else
     if ((ComAddr>=3)&&(ComAddr<=4)){
    ede0:	83 50       	subi	r24, 0x03	; 3
    ede2:	82 30       	cpi	r24, 0x02	; 2
    ede4:	a8 f4       	brcc	.+42     	; 0xee10 <SetBaudRate+0x52>
	     //[COM][Baud]
		 brMessage=((ComAddr<<4)|(0x0F&brMap));
    ede6:	9f 70       	andi	r25, 0x0F	; 15
    ede8:	62 2f       	mov	r22, r18
    edea:	62 95       	swap	r22
    edec:	60 7f       	andi	r22, 0xF0	; 240
    edee:	69 2b       	or	r22, r25
		 if (iSequencePooling>0)SendPoolingCommand(SC_BAUDRATE,brMessage);
    edf0:	80 91 80 01 	lds	r24, 0x0180
    edf4:	88 23       	and	r24, r24
    edf6:	49 f0       	breq	.+18     	; 0xee0a <SetBaudRate+0x4c>
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
    edf8:	86 e0       	ldi	r24, 0x06	; 6
    edfa:	80 93 a7 05 	sts	0x05A7, r24
	 PoolMsg=plMsg;
    edfe:	60 93 d3 0b 	sts	0x0BD3, r22
     IsControlPooling=True;
    ee02:	81 e0       	ldi	r24, 0x01	; 1
    ee04:	80 93 84 01 	sts	0x0184, r24
    ee08:	03 c0       	rjmp	.+6      	; 0xee10 <SetBaudRate+0x52>
	 }else
     if ((ComAddr>=3)&&(ComAddr<=4)){
	     //[COM][Baud]
		 brMessage=((ComAddr<<4)|(0x0F&brMap));
		 if (iSequencePooling>0)SendPoolingCommand(SC_BAUDRATE,brMessage);
		 else SendSlaveCommand(SC_BAUDRATE,brMessage);
    ee0a:	86 e0       	ldi	r24, 0x06	; 6
    ee0c:	0e 94 91 5f 	call	0xbf22	; 0xbf22 <SendSlaveCommand>
		 
	 }
}
    ee10:	1f 91       	pop	r17
    ee12:	08 95       	ret

0000ee14 <FSettingSystem>:
	      break;
	 }
     return Result;
}

char FSettingSystem(){
    ee14:	af 92       	push	r10
    ee16:	bf 92       	push	r11
    ee18:	cf 92       	push	r12
    ee1a:	df 92       	push	r13
    ee1c:	ef 92       	push	r14
    ee1e:	ff 92       	push	r15
    ee20:	0f 93       	push	r16
    ee22:	1f 93       	push	r17
    ee24:	df 93       	push	r29
    ee26:	cf 93       	push	r28
    ee28:	cd b7       	in	r28, 0x3d	; 61
    ee2a:	de b7       	in	r29, 0x3e	; 62
    ee2c:	64 97       	sbiw	r28, 0x14	; 20
    ee2e:	0f b6       	in	r0, 0x3f	; 63
    ee30:	f8 94       	cli
    ee32:	de bf       	out	0x3e, r29	; 62
    ee34:	0f be       	out	0x3f, r0	; 63
    ee36:	cd bf       	out	0x3d, r28	; 61
       char SubMenu,Result=MENU_NONE;
	   char HGMode;
       char lcdteks[20];
	   int bValue;

     switch(stSettingSytem){
    ee38:	80 91 1c 02 	lds	r24, 0x021C
    ee3c:	82 30       	cpi	r24, 0x02	; 2
    ee3e:	09 f4       	brne	.+2      	; 0xee42 <FSettingSystem+0x2e>
    ee40:	b9 c0       	rjmp	.+370    	; 0xefb4 <FSettingSystem+0x1a0>
    ee42:	83 30       	cpi	r24, 0x03	; 3
    ee44:	30 f4       	brcc	.+12     	; 0xee52 <FSettingSystem+0x3e>
    ee46:	88 23       	and	r24, r24
    ee48:	71 f0       	breq	.+28     	; 0xee66 <FSettingSystem+0x52>
    ee4a:	81 30       	cpi	r24, 0x01	; 1
    ee4c:	09 f0       	breq	.+2      	; 0xee50 <FSettingSystem+0x3c>
    ee4e:	44 c1       	rjmp	.+648    	; 0xf0d8 <FSettingSystem+0x2c4>
    ee50:	79 c0       	rjmp	.+242    	; 0xef44 <FSettingSystem+0x130>
    ee52:	84 30       	cpi	r24, 0x04	; 4
    ee54:	09 f4       	brne	.+2      	; 0xee58 <FSettingSystem+0x44>
    ee56:	35 c1       	rjmp	.+618    	; 0xf0c2 <FSettingSystem+0x2ae>
    ee58:	84 30       	cpi	r24, 0x04	; 4
    ee5a:	08 f4       	brcc	.+2      	; 0xee5e <FSettingSystem+0x4a>
    ee5c:	08 c1       	rjmp	.+528    	; 0xf06e <FSettingSystem+0x25a>
    ee5e:	85 30       	cpi	r24, 0x05	; 5
    ee60:	09 f0       	breq	.+2      	; 0xee64 <FSettingSystem+0x50>
    ee62:	3a c1       	rjmp	.+628    	; 0xf0d8 <FSettingSystem+0x2c4>
    ee64:	35 c1       	rjmp	.+618    	; 0xf0d0 <FSettingSystem+0x2bc>
	 case ssInitSettingSystem:
	      IFType=eeprom_read_byte(&DefInitIFT);
    ee66:	86 e3       	ldi	r24, 0x36	; 54
    ee68:	91 e0       	ldi	r25, 0x01	; 1
    ee6a:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
    ee6e:	18 2f       	mov	r17, r24
    ee70:	80 93 00 01 	sts	0x0100, r24
		  HGMode=eeprom_read_byte(&DefHGMode);
    ee74:	82 ec       	ldi	r24, 0xC2	; 194
    ee76:	93 e0       	ldi	r25, 0x03	; 3
    ee78:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
    ee7c:	08 2f       	mov	r16, r24

	      if (IFType==IT_NONE)sprintf_P(lcdteks,PSTR("1.Mode:None"));
    ee7e:	11 23       	and	r17, r17
    ee80:	69 f4       	brne	.+26     	; 0xee9c <FSettingSystem+0x88>
    ee82:	00 d0       	rcall	.+0      	; 0xee84 <FSettingSystem+0x70>
    ee84:	00 d0       	rcall	.+0      	; 0xee86 <FSettingSystem+0x72>
    ee86:	ce 01       	movw	r24, r28
    ee88:	01 96       	adiw	r24, 0x01	; 1
    ee8a:	ad b7       	in	r26, 0x3d	; 61
    ee8c:	be b7       	in	r27, 0x3e	; 62
    ee8e:	12 96       	adiw	r26, 0x02	; 2
    ee90:	9c 93       	st	X, r25
    ee92:	8e 93       	st	-X, r24
    ee94:	11 97       	sbiw	r26, 0x01	; 1
    ee96:	80 ec       	ldi	r24, 0xC0	; 192
    ee98:	9f e0       	ldi	r25, 0x0F	; 15
    ee9a:	1d c0       	rjmp	.+58     	; 0xeed6 <FSettingSystem+0xc2>
		  else
	      if (IFType==IT_SLAVE)sprintf_P(lcdteks,PSTR("1.Mode:Slave"));
    ee9c:	11 30       	cpi	r17, 0x01	; 1
    ee9e:	69 f4       	brne	.+26     	; 0xeeba <FSettingSystem+0xa6>
    eea0:	00 d0       	rcall	.+0      	; 0xeea2 <FSettingSystem+0x8e>
    eea2:	00 d0       	rcall	.+0      	; 0xeea4 <FSettingSystem+0x90>
    eea4:	ce 01       	movw	r24, r28
    eea6:	01 96       	adiw	r24, 0x01	; 1
    eea8:	ed b7       	in	r30, 0x3d	; 61
    eeaa:	fe b7       	in	r31, 0x3e	; 62
    eeac:	92 83       	std	Z+2, r25	; 0x02
    eeae:	81 83       	std	Z+1, r24	; 0x01
    eeb0:	83 eb       	ldi	r24, 0xB3	; 179
    eeb2:	9f e0       	ldi	r25, 0x0F	; 15
    eeb4:	94 83       	std	Z+4, r25	; 0x04
    eeb6:	83 83       	std	Z+3, r24	; 0x03
    eeb8:	12 c0       	rjmp	.+36     	; 0xeede <FSettingSystem+0xca>
		  else
	      if (IFType==IT_STANDALONE)sprintf_P(lcdteks,PSTR("1.Mode:Standalone"));
    eeba:	12 30       	cpi	r17, 0x02	; 2
    eebc:	b1 f4       	brne	.+44     	; 0xeeea <FSettingSystem+0xd6>
    eebe:	00 d0       	rcall	.+0      	; 0xeec0 <FSettingSystem+0xac>
    eec0:	00 d0       	rcall	.+0      	; 0xeec2 <FSettingSystem+0xae>
    eec2:	ce 01       	movw	r24, r28
    eec4:	01 96       	adiw	r24, 0x01	; 1
    eec6:	ad b7       	in	r26, 0x3d	; 61
    eec8:	be b7       	in	r27, 0x3e	; 62
    eeca:	12 96       	adiw	r26, 0x02	; 2
    eecc:	9c 93       	st	X, r25
    eece:	8e 93       	st	-X, r24
    eed0:	11 97       	sbiw	r26, 0x01	; 1
    eed2:	81 ea       	ldi	r24, 0xA1	; 161
    eed4:	9f e0       	ldi	r25, 0x0F	; 15
    eed6:	14 96       	adiw	r26, 0x04	; 4
    eed8:	9c 93       	st	X, r25
    eeda:	8e 93       	st	-X, r24
    eedc:	13 97       	sbiw	r26, 0x03	; 3
    eede:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
    eee2:	0f 90       	pop	r0
    eee4:	0f 90       	pop	r0
    eee6:	0f 90       	pop	r0
    eee8:	0f 90       	pop	r0

	      lcd_clear();
    eeea:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
		  lcd_print(1,1,lcdteks);
    eeee:	81 e0       	ldi	r24, 0x01	; 1
    eef0:	61 e0       	ldi	r22, 0x01	; 1
    eef2:	ae 01       	movw	r20, r28
    eef4:	4f 5f       	subi	r20, 0xFF	; 255
    eef6:	5f 4f       	sbci	r21, 0xFF	; 255
    eef8:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
		  lcd_printf(2,1,PSTR("2.Baudrate"));
    eefc:	82 e0       	ldi	r24, 0x02	; 2
    eefe:	61 e0       	ldi	r22, 0x01	; 1
    ef00:	46 e9       	ldi	r20, 0x96	; 150
    ef02:	5f e0       	ldi	r21, 0x0F	; 15
    ef04:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>

		  if (HGMode==HM_TTL)lcd_printf(3,1,PSTR("3.COM3:TTL"));
    ef08:	00 23       	and	r16, r16
    ef0a:	29 f4       	brne	.+10     	; 0xef16 <FSettingSystem+0x102>
    ef0c:	83 e0       	ldi	r24, 0x03	; 3
    ef0e:	61 e0       	ldi	r22, 0x01	; 1
    ef10:	4b e8       	ldi	r20, 0x8B	; 139
    ef12:	5f e0       	ldi	r21, 0x0F	; 15
    ef14:	0d c0       	rjmp	.+26     	; 0xef30 <FSettingSystem+0x11c>
		  else
		  if (HGMode==HM_232)lcd_printf(3,1,PSTR("3.COM3:232"));
    ef16:	01 30       	cpi	r16, 0x01	; 1
    ef18:	29 f4       	brne	.+10     	; 0xef24 <FSettingSystem+0x110>
    ef1a:	83 e0       	ldi	r24, 0x03	; 3
    ef1c:	61 e0       	ldi	r22, 0x01	; 1
    ef1e:	40 e8       	ldi	r20, 0x80	; 128
    ef20:	5f e0       	ldi	r21, 0x0F	; 15
    ef22:	06 c0       	rjmp	.+12     	; 0xef30 <FSettingSystem+0x11c>
		  else
		  if (HGMode==HM_485)lcd_printf(3,1,PSTR("3.COM3:485"));		  
    ef24:	02 30       	cpi	r16, 0x02	; 2
    ef26:	31 f4       	brne	.+12     	; 0xef34 <FSettingSystem+0x120>
    ef28:	83 e0       	ldi	r24, 0x03	; 3
    ef2a:	61 e0       	ldi	r22, 0x01	; 1
    ef2c:	45 e7       	ldi	r20, 0x75	; 117
    ef2e:	5f e0       	ldi	r21, 0x0F	; 15
    ef30:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  lcd_printf(4,1,PSTR("[*]Back      "));
    ef34:	84 e0       	ldi	r24, 0x04	; 4
    ef36:	61 e0       	ldi	r22, 0x01	; 1
    ef38:	47 e6       	ldi	r20, 0x67	; 103
    ef3a:	5f e0       	ldi	r21, 0x0F	; 15
    ef3c:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  stSettingSytem=ssMenuSelect;
    ef40:	81 e0       	ldi	r24, 0x01	; 1
    ef42:	bc c0       	rjmp	.+376    	; 0xf0bc <FSettingSystem+0x2a8>
	      break;
     case ssMenuSelect:
          KeyPressed=_key_scan(1);
    ef44:	81 e0       	ldi	r24, 0x01	; 1
    ef46:	0e 94 f6 a5 	call	0x14bec	; 0x14bec <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
    ef4a:	0e 94 57 a5 	call	0x14aae	; 0x14aae <_key_btn>
		  if (KeyChar=='1'){
    ef4e:	81 33       	cpi	r24, 0x31	; 49
    ef50:	99 f4       	brne	.+38     	; 0xef78 <FSettingSystem+0x164>
		      IFType=((IFType+1)%3);
    ef52:	80 91 00 01 	lds	r24, 0x0100
    ef56:	90 e0       	ldi	r25, 0x00	; 0
    ef58:	01 96       	adiw	r24, 0x01	; 1
    ef5a:	63 e0       	ldi	r22, 0x03	; 3
    ef5c:	70 e0       	ldi	r23, 0x00	; 0
    ef5e:	0e 94 17 aa 	call	0x1542e	; 0x1542e <__divmodhi4>
    ef62:	80 93 00 01 	sts	0x0100, r24
			  SendSlaveCommand(IFType,DispenserBrand);
    ef66:	60 91 5e 01 	lds	r22, 0x015E
    ef6a:	0e 94 91 5f 	call	0xbf22	; 0xbf22 <SendSlaveCommand>
			  eeprom_write_byte(&DefInitIFT,IFType);
    ef6e:	86 e3       	ldi	r24, 0x36	; 54
    ef70:	91 e0       	ldi	r25, 0x01	; 1
    ef72:	60 91 00 01 	lds	r22, 0x0100
    ef76:	17 c0       	rjmp	.+46     	; 0xefa6 <FSettingSystem+0x192>
			  stSettingSytem=ssInitSettingSystem;
		  }
		  else
		  if (KeyChar=='2'){
    ef78:	82 33       	cpi	r24, 0x32	; 50
    ef7a:	09 f4       	brne	.+2      	; 0xef7e <FSettingSystem+0x16a>
    ef7c:	99 c0       	rjmp	.+306    	; 0xf0b0 <FSettingSystem+0x29c>
		      stSettingSytem=ssComSettings;
		  }
		  else
		  if (KeyChar=='3'){
    ef7e:	83 33       	cpi	r24, 0x33	; 51
    ef80:	a9 f4       	brne	.+42     	; 0xefac <FSettingSystem+0x198>
		      HGMode=eeprom_read_byte(&DefHGMode);
    ef82:	82 ec       	ldi	r24, 0xC2	; 194
    ef84:	93 e0       	ldi	r25, 0x03	; 3
    ef86:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
		      HGMode=((HGMode+1)%3);
    ef8a:	90 e0       	ldi	r25, 0x00	; 0
    ef8c:	01 96       	adiw	r24, 0x01	; 1
    ef8e:	63 e0       	ldi	r22, 0x03	; 3
    ef90:	70 e0       	ldi	r23, 0x00	; 0
    ef92:	0e 94 17 aa 	call	0x1542e	; 0x1542e <__divmodhi4>
    ef96:	18 2f       	mov	r17, r24
			  SendSlaveCommand(SC_HGM_MODE,HGMode);
    ef98:	81 e2       	ldi	r24, 0x21	; 33
    ef9a:	61 2f       	mov	r22, r17
    ef9c:	0e 94 91 5f 	call	0xbf22	; 0xbf22 <SendSlaveCommand>
			  eeprom_write_byte(&DefHGMode,HGMode);
    efa0:	82 ec       	ldi	r24, 0xC2	; 194
    efa2:	93 e0       	ldi	r25, 0x03	; 3
    efa4:	61 2f       	mov	r22, r17
    efa6:	0e 94 db ac 	call	0x159b6	; 0x159b6 <__eewr_byte_m128>
    efaa:	8f c0       	rjmp	.+286    	; 0xf0ca <FSettingSystem+0x2b6>
			  stSettingSytem=ssInitSettingSystem;
		  }
		  //else
		  if (KeyChar=='*'){
    efac:	8a 32       	cpi	r24, 0x2A	; 42
    efae:	09 f4       	brne	.+2      	; 0xefb2 <FSettingSystem+0x19e>
    efb0:	84 c0       	rjmp	.+264    	; 0xf0ba <FSettingSystem+0x2a6>
    efb2:	92 c0       	rjmp	.+292    	; 0xf0d8 <FSettingSystem+0x2c4>
		      stSettingSytem=ssExitSystemSettings;
		  }		  
		  break;
	 case ssComSettings:
	      lcd_clear();
    efb4:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
		  lcd_printf(1,1,PSTR("     -Baudrate-     "));
    efb8:	81 e0       	ldi	r24, 0x01	; 1
    efba:	61 e0       	ldi	r22, 0x01	; 1
    efbc:	42 e5       	ldi	r20, 0x52	; 82
    efbe:	5f e0       	ldi	r21, 0x0F	; 15
    efc0:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
    efc4:	01 e0       	ldi	r16, 0x01	; 1
    efc6:	10 e0       	ldi	r17, 0x00	; 0

		  for (i=0;i<4;i++){
		       bValue=GetBaudrate(eeprom_read_byte(&DefBaudrate[i]));
			   if (bValue==5787)bValue=12213;
		       sprintf_P(lcdteks,PSTR("COM%d:%d"),i+1,bValue);
    efc8:	6e 01       	movw	r12, r28
    efca:	08 94       	sec
    efcc:	c1 1c       	adc	r12, r1
    efce:	d1 1c       	adc	r13, r1
    efd0:	79 e4       	ldi	r23, 0x49	; 73
    efd2:	a7 2e       	mov	r10, r23
    efd4:	7f e0       	ldi	r23, 0x0F	; 15
    efd6:	b7 2e       	mov	r11, r23
			   lcd_print((2+(i%2)),1+(i/2*11),lcdteks);
    efd8:	6b e0       	ldi	r22, 0x0B	; 11
    efda:	e6 2e       	mov	r14, r22
		      stSettingSytem=ssExitSystemSettings;
		  }		  
		  break;
	 case ssComSettings:
	      lcd_clear();
		  lcd_printf(1,1,PSTR("     -Baudrate-     "));
    efdc:	f0 2e       	mov	r15, r16
    efde:	fa 94       	dec	r15

		  for (i=0;i<4;i++){
		       bValue=GetBaudrate(eeprom_read_byte(&DefBaudrate[i]));
    efe0:	c8 01       	movw	r24, r16
    efe2:	81 5c       	subi	r24, 0xC1	; 193
    efe4:	9e 4f       	sbci	r25, 0xFE	; 254
    efe6:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
    efea:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <GetBaudrate>
			   if (bValue==5787)bValue=12213;
    efee:	b6 e1       	ldi	r27, 0x16	; 22
    eff0:	8b 39       	cpi	r24, 0x9B	; 155
    eff2:	9b 07       	cpc	r25, r27
    eff4:	11 f4       	brne	.+4      	; 0xeffa <FSettingSystem+0x1e6>
    eff6:	85 eb       	ldi	r24, 0xB5	; 181
    eff8:	9f e2       	ldi	r25, 0x2F	; 47
		       sprintf_P(lcdteks,PSTR("COM%d:%d"),i+1,bValue);
    effa:	ed b7       	in	r30, 0x3d	; 61
    effc:	fe b7       	in	r31, 0x3e	; 62
    effe:	38 97       	sbiw	r30, 0x08	; 8
    f000:	0f b6       	in	r0, 0x3f	; 63
    f002:	f8 94       	cli
    f004:	fe bf       	out	0x3e, r31	; 62
    f006:	0f be       	out	0x3f, r0	; 63
    f008:	ed bf       	out	0x3d, r30	; 61
    f00a:	31 96       	adiw	r30, 0x01	; 1
    f00c:	ad b7       	in	r26, 0x3d	; 61
    f00e:	be b7       	in	r27, 0x3e	; 62
    f010:	12 96       	adiw	r26, 0x02	; 2
    f012:	dc 92       	st	X, r13
    f014:	ce 92       	st	-X, r12
    f016:	11 97       	sbiw	r26, 0x01	; 1
    f018:	b3 82       	std	Z+3, r11	; 0x03
    f01a:	a2 82       	std	Z+2, r10	; 0x02
    f01c:	15 83       	std	Z+5, r17	; 0x05
    f01e:	04 83       	std	Z+4, r16	; 0x04
    f020:	97 83       	std	Z+7, r25	; 0x07
    f022:	86 83       	std	Z+6, r24	; 0x06
    f024:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
			   lcd_print((2+(i%2)),1+(i/2*11),lcdteks);
    f028:	ed b7       	in	r30, 0x3d	; 61
    f02a:	fe b7       	in	r31, 0x3e	; 62
    f02c:	38 96       	adiw	r30, 0x08	; 8
    f02e:	0f b6       	in	r0, 0x3f	; 63
    f030:	f8 94       	cli
    f032:	fe bf       	out	0x3e, r31	; 62
    f034:	0f be       	out	0x3f, r0	; 63
    f036:	ed bf       	out	0x3d, r30	; 61
    f038:	6f 2d       	mov	r22, r15
    f03a:	66 95       	lsr	r22
    f03c:	6e 9d       	mul	r22, r14
    f03e:	b0 01       	movw	r22, r0
    f040:	11 24       	eor	r1, r1
    f042:	6f 5f       	subi	r22, 0xFF	; 255
    f044:	f1 e0       	ldi	r31, 0x01	; 1
    f046:	ff 22       	and	r15, r31
    f048:	8f 2d       	mov	r24, r15
    f04a:	8e 5f       	subi	r24, 0xFE	; 254
    f04c:	a6 01       	movw	r20, r12
    f04e:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
    f052:	0f 5f       	subi	r16, 0xFF	; 255
    f054:	1f 4f       	sbci	r17, 0xFF	; 255
		  break;
	 case ssComSettings:
	      lcd_clear();
		  lcd_printf(1,1,PSTR("     -Baudrate-     "));

		  for (i=0;i<4;i++){
    f056:	05 30       	cpi	r16, 0x05	; 5
    f058:	11 05       	cpc	r17, r1
    f05a:	09 f0       	breq	.+2      	; 0xf05e <FSettingSystem+0x24a>
    f05c:	bf cf       	rjmp	.-130    	; 0xefdc <FSettingSystem+0x1c8>
		       bValue=GetBaudrate(eeprom_read_byte(&DefBaudrate[i]));
			   if (bValue==5787)bValue=12213;
		       sprintf_P(lcdteks,PSTR("COM%d:%d"),i+1,bValue);
			   lcd_print((2+(i%2)),1+(i/2*11),lcdteks);
		  }
		  lcd_printf(4,1,PSTR("[*]Back     "));
    f05e:	84 e0       	ldi	r24, 0x04	; 4
    f060:	61 e0       	ldi	r22, 0x01	; 1
    f062:	4c e3       	ldi	r20, 0x3C	; 60
    f064:	5f e0       	ldi	r21, 0x0F	; 15
    f066:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  stSettingSytem=ssBaudrateInput;
    f06a:	83 e0       	ldi	r24, 0x03	; 3
    f06c:	27 c0       	rjmp	.+78     	; 0xf0bc <FSettingSystem+0x2a8>
	      break;
     case ssBaudrateInput:
	      KeyPressed=_key_scan(1);
    f06e:	81 e0       	ldi	r24, 0x01	; 1
    f070:	0e 94 f6 a5 	call	0x14bec	; 0x14bec <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
    f074:	0e 94 57 a5 	call	0x14aae	; 0x14aae <_key_btn>
    f078:	e8 2e       	mov	r14, r24
		  if ((KeyChar>='1')&&(KeyChar<='4')){
    f07a:	81 53       	subi	r24, 0x31	; 49
    f07c:	84 30       	cpi	r24, 0x04	; 4
    f07e:	d0 f4       	brcc	.+52     	; 0xf0b4 <FSettingSystem+0x2a0>
		       brVal=eeprom_read_byte(&DefBaudrate[KeyChar-'1']);
    f080:	0e 2d       	mov	r16, r14
    f082:	10 e0       	ldi	r17, 0x00	; 0
    f084:	01 5f       	subi	r16, 0xF1	; 241
    f086:	1e 4f       	sbci	r17, 0xFE	; 254
    f088:	c8 01       	movw	r24, r16
    f08a:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
			   brVal=((brVal+1)%3)+1;
    f08e:	90 e0       	ldi	r25, 0x00	; 0
    f090:	01 96       	adiw	r24, 0x01	; 1
    f092:	63 e0       	ldi	r22, 0x03	; 3
    f094:	70 e0       	ldi	r23, 0x00	; 0
    f096:	0e 94 17 aa 	call	0x1542e	; 0x1542e <__divmodhi4>
    f09a:	f8 2e       	mov	r15, r24
    f09c:	f3 94       	inc	r15
			   SetBaudRate(KeyChar-'0',brVal);
    f09e:	8e 2d       	mov	r24, r14
    f0a0:	80 53       	subi	r24, 0x30	; 48
    f0a2:	6f 2d       	mov	r22, r15
    f0a4:	0e 94 df 76 	call	0xedbe	; 0xedbe <SetBaudRate>
			   eeprom_write_byte(&DefBaudrate[KeyChar-'1'],brVal);
    f0a8:	c8 01       	movw	r24, r16
    f0aa:	6f 2d       	mov	r22, r15
    f0ac:	0e 94 db ac 	call	0x159b6	; 0x159b6 <__eewr_byte_m128>
               stSettingSytem=ssComSettings;
    f0b0:	82 e0       	ldi	r24, 0x02	; 2
    f0b2:	04 c0       	rjmp	.+8      	; 0xf0bc <FSettingSystem+0x2a8>
		  }else if (KeyChar=='*')
    f0b4:	2a e2       	ldi	r18, 0x2A	; 42
    f0b6:	e2 16       	cp	r14, r18
    f0b8:	79 f4       	brne	.+30     	; 0xf0d8 <FSettingSystem+0x2c4>
		      stSettingSytem=ssExitSystemSettings;		  	
    f0ba:	85 e0       	ldi	r24, 0x05	; 5
    f0bc:	80 93 1c 02 	sts	0x021C, r24
    f0c0:	0b c0       	rjmp	.+22     	; 0xf0d8 <FSettingSystem+0x2c4>
	      break;
	 case ssPumpPoolingSettings:
          SubMenu=FSettingPumpPooling();
    f0c2:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <FSettingPumpPooling>
		  if (SubMenu==MENU_DONE)stSettingSytem=ssInitSettingSystem;
    f0c6:	81 30       	cpi	r24, 0x01	; 1
    f0c8:	39 f4       	brne	.+14     	; 0xf0d8 <FSettingSystem+0x2c4>
    f0ca:	10 92 1c 02 	sts	0x021C, r1
    f0ce:	04 c0       	rjmp	.+8      	; 0xf0d8 <FSettingSystem+0x2c4>
	      break;
     case ssExitSystemSettings:
	      stSettingSytem=ssInitSettingSystem;
    f0d0:	10 92 1c 02 	sts	0x021C, r1
    f0d4:	81 e0       	ldi	r24, 0x01	; 1
    f0d6:	01 c0       	rjmp	.+2      	; 0xf0da <FSettingSystem+0x2c6>
    f0d8:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
	      break;
	 }
     return Result;
}
    f0da:	64 96       	adiw	r28, 0x14	; 20
    f0dc:	0f b6       	in	r0, 0x3f	; 63
    f0de:	f8 94       	cli
    f0e0:	de bf       	out	0x3e, r29	; 62
    f0e2:	0f be       	out	0x3f, r0	; 63
    f0e4:	cd bf       	out	0x3d, r28	; 61
    f0e6:	cf 91       	pop	r28
    f0e8:	df 91       	pop	r29
    f0ea:	1f 91       	pop	r17
    f0ec:	0f 91       	pop	r16
    f0ee:	ff 90       	pop	r15
    f0f0:	ef 90       	pop	r14
    f0f2:	df 90       	pop	r13
    f0f4:	cf 90       	pop	r12
    f0f6:	bf 90       	pop	r11
    f0f8:	af 90       	pop	r10
    f0fa:	08 95       	ret

0000f0fc <FMenuSettings>:
char FMenuSettings(){
char Result=MENU_NONE;
static char stMenuSettings=msInit,PageSetting=1;
     char KeyPressed,KeyChar,SubMenu;

     switch(stMenuSettings){
    f0fc:	80 91 22 02 	lds	r24, 0x0222
    f100:	e8 2f       	mov	r30, r24
    f102:	f0 e0       	ldi	r31, 0x00	; 0
    f104:	e3 31       	cpi	r30, 0x13	; 19
    f106:	f1 05       	cpc	r31, r1
    f108:	08 f0       	brcs	.+2      	; 0xf10c <FMenuSettings+0x10>
    f10a:	bf c0       	rjmp	.+382    	; 0xf28a <FMenuSettings+0x18e>
    f10c:	e3 58       	subi	r30, 0x83	; 131
    f10e:	ff 4f       	sbci	r31, 0xFF	; 255
    f110:	ee 0f       	add	r30, r30
    f112:	ff 1f       	adc	r31, r31
    f114:	05 90       	lpm	r0, Z+
    f116:	f4 91       	lpm	r31, Z+
    f118:	e0 2d       	mov	r30, r0
    f11a:	09 94       	ijmp
	 case msInit:
		  lcd_clear();
    f11c:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
		  PageSetting=1;
    f120:	81 e0       	ldi	r24, 0x01	; 1
    f122:	80 93 57 01 	sts	0x0157, r24
    f126:	a9 c0       	rjmp	.+338    	; 0xf27a <FMenuSettings+0x17e>
		  stMenuSettings=msDisplayPage;
		  break;
	 case msDisplayPage:
	      stMenuSettings=msDisplayPage+PageSetting;
    f128:	80 91 57 01 	lds	r24, 0x0157
    f12c:	8f 5f       	subi	r24, 0xFF	; 255
    f12e:	a5 c0       	rjmp	.+330    	; 0xf27a <FMenuSettings+0x17e>
          break; 	 
	 case msDisplayPage1:
		  lcd_printf(1, 1, PSTR("1)Product  5)Printer"));
    f130:	81 e0       	ldi	r24, 0x01	; 1
    f132:	61 e0       	ldi	r22, 0x01	; 1
    f134:	4f e3       	ldi	r20, 0x3F	; 63
    f136:	54 e1       	ldi	r21, 0x14	; 20
    f138:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  lcd_printf(2, 1, PSTR("2)Pump     6)Host   "));
    f13c:	82 e0       	ldi	r24, 0x02	; 2
    f13e:	61 e0       	ldi	r22, 0x01	; 1
    f140:	4a e2       	ldi	r20, 0x2A	; 42
    f142:	54 e1       	ldi	r21, 0x14	; 20
    f144:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  lcd_printf(3, 1, PSTR("3)Decimal  7)Next   "));
    f148:	83 e0       	ldi	r24, 0x03	; 3
    f14a:	61 e0       	ldi	r22, 0x01	; 1
    f14c:	45 e1       	ldi	r20, 0x15	; 21
    f14e:	54 e1       	ldi	r21, 0x14	; 20
    f150:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  lcd_printf(4, 1, PSTR("4)Datetime *)Exit   "));
    f154:	84 e0       	ldi	r24, 0x04	; 4
    f156:	61 e0       	ldi	r22, 0x01	; 1
    f158:	40 e0       	ldi	r20, 0x00	; 0
    f15a:	54 e1       	ldi	r21, 0x14	; 20
    f15c:	16 c0       	rjmp	.+44     	; 0xf18a <FMenuSettings+0x8e>
		  stMenuSettings=msSelection;
	      break;
	 case msDisplayPage2:
		  lcd_printf(1, 1, PSTR("1)Operator          "));
    f15e:	81 e0       	ldi	r24, 0x01	; 1
    f160:	61 e0       	ldi	r22, 0x01	; 1
    f162:	4b ee       	ldi	r20, 0xEB	; 235
    f164:	53 e1       	ldi	r21, 0x13	; 19
    f166:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  lcd_printf(2, 1, PSTR("2)System            "));
    f16a:	82 e0       	ldi	r24, 0x02	; 2
    f16c:	61 e0       	ldi	r22, 0x01	; 1
    f16e:	46 ed       	ldi	r20, 0xD6	; 214
    f170:	53 e1       	ldi	r21, 0x13	; 19
    f172:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  lcd_printf(3, 1, PSTR("3)PumpPooling       "));
    f176:	83 e0       	ldi	r24, 0x03	; 3
    f178:	61 e0       	ldi	r22, 0x01	; 1
    f17a:	41 ec       	ldi	r20, 0xC1	; 193
    f17c:	53 e1       	ldi	r21, 0x13	; 19
    f17e:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  lcd_printf(4, 1, PSTR("*)Back              "));
    f182:	84 e0       	ldi	r24, 0x04	; 4
    f184:	61 e0       	ldi	r22, 0x01	; 1
    f186:	4c ea       	ldi	r20, 0xAC	; 172
    f188:	53 e1       	ldi	r21, 0x13	; 19
    f18a:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  stMenuSettings=msSelection;
    f18e:	84 e0       	ldi	r24, 0x04	; 4
    f190:	74 c0       	rjmp	.+232    	; 0xf27a <FMenuSettings+0x17e>
	      break;
	 case msSelection:
	      stMenuSettings=msSelection+PageSetting;
    f192:	80 91 57 01 	lds	r24, 0x0157
    f196:	8c 5f       	subi	r24, 0xFC	; 252
    f198:	70 c0       	rjmp	.+224    	; 0xf27a <FMenuSettings+0x17e>
          break;	 
	 case msSelectionPage1:
		  KeyPressed=_key_scan(1);
    f19a:	81 e0       	ldi	r24, 0x01	; 1
    f19c:	0e 94 f6 a5 	call	0x14bec	; 0x14bec <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
    f1a0:	0e 94 57 a5 	call	0x14aae	; 0x14aae <_key_btn>
		  switch(KeyChar){
    f1a4:	84 33       	cpi	r24, 0x34	; 52
    f1a6:	d1 f0       	breq	.+52     	; 0xf1dc <FMenuSettings+0xe0>
    f1a8:	85 33       	cpi	r24, 0x35	; 53
    f1aa:	50 f4       	brcc	.+20     	; 0xf1c0 <FMenuSettings+0xc4>
    f1ac:	82 33       	cpi	r24, 0x32	; 50
    f1ae:	91 f0       	breq	.+36     	; 0xf1d4 <FMenuSettings+0xd8>
    f1b0:	83 33       	cpi	r24, 0x33	; 51
    f1b2:	90 f4       	brcc	.+36     	; 0xf1d8 <FMenuSettings+0xdc>
    f1b4:	8a 32       	cpi	r24, 0x2A	; 42
    f1b6:	d1 f0       	breq	.+52     	; 0xf1ec <FMenuSettings+0xf0>
    f1b8:	81 33       	cpi	r24, 0x31	; 49
    f1ba:	09 f0       	breq	.+2      	; 0xf1be <FMenuSettings+0xc2>
    f1bc:	66 c0       	rjmp	.+204    	; 0xf28a <FMenuSettings+0x18e>
    f1be:	08 c0       	rjmp	.+16     	; 0xf1d0 <FMenuSettings+0xd4>
    f1c0:	86 33       	cpi	r24, 0x36	; 54
    f1c2:	81 f0       	breq	.+32     	; 0xf1e4 <FMenuSettings+0xe8>
    f1c4:	86 33       	cpi	r24, 0x36	; 54
    f1c6:	60 f0       	brcs	.+24     	; 0xf1e0 <FMenuSettings+0xe4>
    f1c8:	87 33       	cpi	r24, 0x37	; 55
    f1ca:	09 f0       	breq	.+2      	; 0xf1ce <FMenuSettings+0xd2>
    f1cc:	5e c0       	rjmp	.+188    	; 0xf28a <FMenuSettings+0x18e>
    f1ce:	0c c0       	rjmp	.+24     	; 0xf1e8 <FMenuSettings+0xec>
		  case '1':
		       stMenuSettings=msMenuSettingProduct;
    f1d0:	89 e0       	ldi	r24, 0x09	; 9
    f1d2:	53 c0       	rjmp	.+166    	; 0xf27a <FMenuSettings+0x17e>
		       break;
		  case '2': 
		       stMenuSettings=msMenuSettingPump;
    f1d4:	8a e0       	ldi	r24, 0x0A	; 10
    f1d6:	51 c0       	rjmp	.+162    	; 0xf27a <FMenuSettings+0x17e>
		       break;
		  case '3':
		       stMenuSettings=msMenuSettingDec;
    f1d8:	8b e0       	ldi	r24, 0x0B	; 11
    f1da:	4f c0       	rjmp	.+158    	; 0xf27a <FMenuSettings+0x17e>
		       break;
		  case '4':
		       stMenuSettings=msMenuSettingDatetime;
    f1dc:	8c e0       	ldi	r24, 0x0C	; 12
    f1de:	4d c0       	rjmp	.+154    	; 0xf27a <FMenuSettings+0x17e>
		       break;
		  case '5':
		       stMenuSettings=msMenuSettingPrinter;
    f1e0:	8d e0       	ldi	r24, 0x0D	; 13
    f1e2:	4b c0       	rjmp	.+150    	; 0xf27a <FMenuSettings+0x17e>
		       break;
		  case '6':
		       stMenuSettings=msMenuSettingHost;
    f1e4:	8e e0       	ldi	r24, 0x0E	; 14
    f1e6:	49 c0       	rjmp	.+146    	; 0xf27a <FMenuSettings+0x17e>
		       break;
		  case '7':
		       stMenuSettings=msMenuSettingNextPage;
    f1e8:	87 e0       	ldi	r24, 0x07	; 7
    f1ea:	47 c0       	rjmp	.+142    	; 0xf27a <FMenuSettings+0x17e>
		       break;
		  case '*':
		       stMenuSettings=msMenuSettingExit;
    f1ec:	82 e1       	ldi	r24, 0x12	; 18
    f1ee:	45 c0       	rjmp	.+138    	; 0xf27a <FMenuSettings+0x17e>
		       break;			   
		  }
	      break;
	 case msSelectionPage2:
	 	  KeyPressed=_key_scan(1);
    f1f0:	81 e0       	ldi	r24, 0x01	; 1
    f1f2:	0e 94 f6 a5 	call	0x14bec	; 0x14bec <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
    f1f6:	0e 94 57 a5 	call	0x14aae	; 0x14aae <_key_btn>
		  switch(KeyChar){
    f1fa:	82 33       	cpi	r24, 0x32	; 50
    f1fc:	69 f0       	breq	.+26     	; 0xf218 <FMenuSettings+0x11c>
    f1fe:	83 33       	cpi	r24, 0x33	; 51
    f200:	30 f4       	brcc	.+12     	; 0xf20e <FMenuSettings+0x112>
    f202:	8a 32       	cpi	r24, 0x2A	; 42
    f204:	69 f0       	breq	.+26     	; 0xf220 <FMenuSettings+0x124>
    f206:	81 33       	cpi	r24, 0x31	; 49
    f208:	09 f0       	breq	.+2      	; 0xf20c <FMenuSettings+0x110>
    f20a:	3f c0       	rjmp	.+126    	; 0xf28a <FMenuSettings+0x18e>
    f20c:	03 c0       	rjmp	.+6      	; 0xf214 <FMenuSettings+0x118>
    f20e:	83 33       	cpi	r24, 0x33	; 51
    f210:	e1 f5       	brne	.+120    	; 0xf28a <FMenuSettings+0x18e>
    f212:	04 c0       	rjmp	.+8      	; 0xf21c <FMenuSettings+0x120>
		  case '1':
		       stMenuSettings=msMenuSettingOperator;
    f214:	8f e0       	ldi	r24, 0x0F	; 15
    f216:	31 c0       	rjmp	.+98     	; 0xf27a <FMenuSettings+0x17e>
		       break;
		  case '2':
		       stMenuSettings=msMenuSettingSystem;
    f218:	80 e1       	ldi	r24, 0x10	; 16
    f21a:	2f c0       	rjmp	.+94     	; 0xf27a <FMenuSettings+0x17e>
		       break;
		  case '3':
		       stMenuSettings=msMenuSettingPumpPooling;
    f21c:	81 e1       	ldi	r24, 0x11	; 17
    f21e:	2d c0       	rjmp	.+90     	; 0xf27a <FMenuSettings+0x17e>
		       break;
		  case '*':
		       stMenuSettings=msMenuSettingBackPage;
    f220:	88 e0       	ldi	r24, 0x08	; 8
    f222:	2b c0       	rjmp	.+86     	; 0xf27a <FMenuSettings+0x17e>
		       break;		  
		  }
	      break;
		  
	 case msMenuSettingNextPage:
	      if (PageSetting<2)PageSetting++;
    f224:	80 91 57 01 	lds	r24, 0x0157
    f228:	82 30       	cpi	r24, 0x02	; 2
    f22a:	d8 f4       	brcc	.+54     	; 0xf262 <FMenuSettings+0x166>
    f22c:	8f 5f       	subi	r24, 0xFF	; 255
    f22e:	05 c0       	rjmp	.+10     	; 0xf23a <FMenuSettings+0x13e>
		  stMenuSettings=msDisplayPage;
	      break;
	 case msMenuSettingBackPage:
	      if (PageSetting>1)PageSetting--;
    f230:	80 91 57 01 	lds	r24, 0x0157
    f234:	82 30       	cpi	r24, 0x02	; 2
    f236:	a8 f0       	brcs	.+42     	; 0xf262 <FMenuSettings+0x166>
    f238:	81 50       	subi	r24, 0x01	; 1
    f23a:	80 93 57 01 	sts	0x0157, r24
    f23e:	11 c0       	rjmp	.+34     	; 0xf262 <FMenuSettings+0x166>
		  stMenuSettings=msDisplayPage;
	      break;
//---Sub Menu Operations--------------------------------------------		  
     case msMenuSettingProduct:
	      SubMenu=FSettingProduct();
    f240:	0e 94 52 6d 	call	0xdaa4	; 0xdaa4 <FSettingProduct>
    f244:	18 c0       	rjmp	.+48     	; 0xf276 <FMenuSettings+0x17a>
		  if (SubMenu==MENU_DONE)stMenuSettings=msDisplayPage;
	      break;
	 case msMenuSettingPump:
	      SubMenu=FSettingPump();
    f246:	0e 94 20 63 	call	0xc640	; 0xc640 <FSettingPump>
    f24a:	15 c0       	rjmp	.+42     	; 0xf276 <FMenuSettings+0x17a>
		  if (SubMenu==MENU_DONE)stMenuSettings=msDisplayPage;
	      break;
	 case msMenuSettingDec:
	      SubMenu=FSettingDec();
    f24c:	0e 94 cd 50 	call	0xa19a	; 0xa19a <FSettingDec>
    f250:	12 c0       	rjmp	.+36     	; 0xf276 <FMenuSettings+0x17a>
	 }
     return Result;
}

char FSettingDatetime(){
     _menu_datetime();
    f252:	0e 94 10 53 	call	0xa620	; 0xa620 <_menu_datetime>
    f256:	05 c0       	rjmp	.+10     	; 0xf262 <FMenuSettings+0x166>
     return MENU_DONE;
}
char FSettingPrinter(){
     _menu_printer();
    f258:	0e 94 22 4d 	call	0x9a44	; 0x9a44 <_menu_printer>
    f25c:	02 c0       	rjmp	.+4      	; 0xf262 <FMenuSettings+0x166>
	 return MENU_DONE;
}
char FSettingHost(){
     _menu_host();
    f25e:	0e 94 af 4b 	call	0x975e	; 0x975e <_menu_host>
	      SubMenu=FSettingPrinter();
		  if (SubMenu==MENU_DONE)stMenuSettings=msDisplayPage;
	      break;
	 case msMenuSettingHost:
	      SubMenu=FSettingHost();
		  if (SubMenu==MENU_DONE)stMenuSettings=msDisplayPage;
    f262:	81 e0       	ldi	r24, 0x01	; 1
    f264:	0a c0       	rjmp	.+20     	; 0xf27a <FMenuSettings+0x17e>
	      break;
     case msMenuSettingOperator:
          SubMenu=FSettingOperator();
    f266:	0e 94 6b 6a 	call	0xd4d6	; 0xd4d6 <FSettingOperator>
    f26a:	05 c0       	rjmp	.+10     	; 0xf276 <FMenuSettings+0x17a>
		  if (SubMenu==MENU_DONE)stMenuSettings=msDisplayPage;
	      break;
	 case msMenuSettingSystem:
	      SubMenu=FSettingSystem();
    f26c:	0e 94 0a 77 	call	0xee14	; 0xee14 <FSettingSystem>
    f270:	02 c0       	rjmp	.+4      	; 0xf276 <FMenuSettings+0x17a>
		  if (SubMenu==MENU_DONE)stMenuSettings=msDisplayPage;
	      break;	 
     case msMenuSettingPumpPooling:
	      SubMenu=FSettingPumpPooling();
    f272:	0e 94 75 5b 	call	0xb6ea	; 0xb6ea <FSettingPumpPooling>
		  if (SubMenu==MENU_DONE)stMenuSettings=msDisplayPage;
    f276:	81 30       	cpi	r24, 0x01	; 1
    f278:	41 f4       	brne	.+16     	; 0xf28a <FMenuSettings+0x18e>
    f27a:	80 93 22 02 	sts	0x0222, r24
    f27e:	80 e0       	ldi	r24, 0x00	; 0
    f280:	08 95       	ret
	      break;
//------------------------------------------------------------------
     case msMenuSettingExit:
	      stMenuSettings=msInit;
    f282:	10 92 22 02 	sts	0x0222, r1
    f286:	81 e0       	ldi	r24, 0x01	; 1
    f288:	08 95       	ret
    f28a:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
	      break;
	 }
   return Result;
}
    f28c:	08 95       	ret

0000f28e <InitComport>:
     	  break;	 
	 }
   return Result;
}

void InitComport(){
    f28e:	af 92       	push	r10
    f290:	bf 92       	push	r11
    f292:	cf 92       	push	r12
    f294:	df 92       	push	r13
    f296:	ff 92       	push	r15
    f298:	0f 93       	push	r16
    f29a:	1f 93       	push	r17
    f29c:	df 93       	push	r29
    f29e:	cf 93       	push	r28
    f2a0:	cd b7       	in	r28, 0x3d	; 61
    f2a2:	de b7       	in	r29, 0x3e	; 62
    f2a4:	64 97       	sbiw	r28, 0x14	; 20
    f2a6:	0f b6       	in	r0, 0x3f	; 63
    f2a8:	f8 94       	cli
    f2aa:	de bf       	out	0x3e, r29	; 62
    f2ac:	0f be       	out	0x3f, r0	; 63
    f2ae:	cd bf       	out	0x3d, r28	; 61
     char brMap,i=0,lcdteks[20];	 
	 int bValue;
	 lcd_printf(3, 1, PSTR("Initialize COM ..."));
    f2b0:	83 e0       	ldi	r24, 0x03	; 3
    f2b2:	61 e0       	ldi	r22, 0x01	; 1
    f2b4:	4e e0       	ldi	r20, 0x0E	; 14
    f2b6:	5f e1       	ldi	r21, 0x1F	; 31
    f2b8:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
    f2bc:	01 e0       	ldi	r16, 0x01	; 1
    f2be:	10 e0       	ldi	r17, 0x00	; 0
     for(i=0;i<4;i++){
	     brMap=eeprom_read_byte(&DefBaudrate[i]);
		 bValue=GetBaudrate(brMap);
		 if (bValue==5787)bValue=12213;
		 sprintf_P(lcdteks,PSTR("COM%d:%i           "),i+1,bValue);
    f2c0:	6e 01       	movw	r12, r28
    f2c2:	08 94       	sec
    f2c4:	c1 1c       	adc	r12, r1
    f2c6:	d1 1c       	adc	r13, r1
    f2c8:	ea ef       	ldi	r30, 0xFA	; 250
    f2ca:	ae 2e       	mov	r10, r30
    f2cc:	ee e1       	ldi	r30, 0x1E	; 30
    f2ce:	be 2e       	mov	r11, r30
void InitComport(){
     char brMap,i=0,lcdteks[20];	 
	 int bValue;
	 lcd_printf(3, 1, PSTR("Initialize COM ..."));
     for(i=0;i<4;i++){
	     brMap=eeprom_read_byte(&DefBaudrate[i]);
    f2d0:	c8 01       	movw	r24, r16
    f2d2:	81 5c       	subi	r24, 0xC1	; 193
    f2d4:	9e 4f       	sbci	r25, 0xFE	; 254
    f2d6:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
    f2da:	f8 2e       	mov	r15, r24
		 bValue=GetBaudrate(brMap);
    f2dc:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <GetBaudrate>
		 if (bValue==5787)bValue=12213;
    f2e0:	26 e1       	ldi	r18, 0x16	; 22
    f2e2:	8b 39       	cpi	r24, 0x9B	; 155
    f2e4:	92 07       	cpc	r25, r18
    f2e6:	11 f4       	brne	.+4      	; 0xf2ec <InitComport+0x5e>
    f2e8:	85 eb       	ldi	r24, 0xB5	; 181
    f2ea:	9f e2       	ldi	r25, 0x2F	; 47
		 sprintf_P(lcdteks,PSTR("COM%d:%i           "),i+1,bValue);
    f2ec:	ad b7       	in	r26, 0x3d	; 61
    f2ee:	be b7       	in	r27, 0x3e	; 62
    f2f0:	18 97       	sbiw	r26, 0x08	; 8
    f2f2:	0f b6       	in	r0, 0x3f	; 63
    f2f4:	f8 94       	cli
    f2f6:	be bf       	out	0x3e, r27	; 62
    f2f8:	0f be       	out	0x3f, r0	; 63
    f2fa:	ad bf       	out	0x3d, r26	; 61
    f2fc:	ed b7       	in	r30, 0x3d	; 61
    f2fe:	fe b7       	in	r31, 0x3e	; 62
    f300:	31 96       	adiw	r30, 0x01	; 1
    f302:	12 96       	adiw	r26, 0x02	; 2
    f304:	dc 92       	st	X, r13
    f306:	ce 92       	st	-X, r12
    f308:	11 97       	sbiw	r26, 0x01	; 1
    f30a:	b3 82       	std	Z+3, r11	; 0x03
    f30c:	a2 82       	std	Z+2, r10	; 0x02
    f30e:	15 83       	std	Z+5, r17	; 0x05
    f310:	04 83       	std	Z+4, r16	; 0x04
    f312:	97 83       	std	Z+7, r25	; 0x07
    f314:	86 83       	std	Z+6, r24	; 0x06
    f316:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
		 lcd_print(4,1,lcdteks);
    f31a:	2d b7       	in	r18, 0x3d	; 61
    f31c:	3e b7       	in	r19, 0x3e	; 62
    f31e:	28 5f       	subi	r18, 0xF8	; 248
    f320:	3f 4f       	sbci	r19, 0xFF	; 255
    f322:	0f b6       	in	r0, 0x3f	; 63
    f324:	f8 94       	cli
    f326:	3e bf       	out	0x3e, r19	; 62
    f328:	0f be       	out	0x3f, r0	; 63
    f32a:	2d bf       	out	0x3d, r18	; 61
    f32c:	84 e0       	ldi	r24, 0x04	; 4
    f32e:	61 e0       	ldi	r22, 0x01	; 1
    f330:	a6 01       	movw	r20, r12
    f332:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
		 SetBaudRate(i+1,brMap);
    f336:	80 2f       	mov	r24, r16
    f338:	6f 2d       	mov	r22, r15
    f33a:	0e 94 df 76 	call	0xedbe	; 0xedbe <SetBaudRate>
 	     TimDisplay=0;
    f33e:	10 92 92 01 	sts	0x0192, r1
    f342:	04 c0       	rjmp	.+8      	; 0xf34c <InitComport+0xbe>
	     while(TimDisplay<2){
		     if (TimDisplay>1)break;
    f344:	80 91 92 01 	lds	r24, 0x0192
    f348:	82 30       	cpi	r24, 0x02	; 2
    f34a:	20 f4       	brcc	.+8      	; 0xf354 <InitComport+0xc6>
		 if (bValue==5787)bValue=12213;
		 sprintf_P(lcdteks,PSTR("COM%d:%i           "),i+1,bValue);
		 lcd_print(4,1,lcdteks);
		 SetBaudRate(i+1,brMap);
 	     TimDisplay=0;
	     while(TimDisplay<2){
    f34c:	80 91 92 01 	lds	r24, 0x0192
    f350:	82 30       	cpi	r24, 0x02	; 2
    f352:	c0 f3       	brcs	.-16     	; 0xf344 <InitComport+0xb6>
    f354:	0f 5f       	subi	r16, 0xFF	; 255
    f356:	1f 4f       	sbci	r17, 0xFF	; 255

void InitComport(){
     char brMap,i=0,lcdteks[20];	 
	 int bValue;
	 lcd_printf(3, 1, PSTR("Initialize COM ..."));
     for(i=0;i<4;i++){
    f358:	05 30       	cpi	r16, 0x05	; 5
    f35a:	11 05       	cpc	r17, r1
    f35c:	09 f0       	breq	.+2      	; 0xf360 <InitComport+0xd2>
    f35e:	b8 cf       	rjmp	.-144    	; 0xf2d0 <InitComport+0x42>
	     while(TimDisplay<2){
		     if (TimDisplay>1)break;
		 };

	 }
}
    f360:	64 96       	adiw	r28, 0x14	; 20
    f362:	0f b6       	in	r0, 0x3f	; 63
    f364:	f8 94       	cli
    f366:	de bf       	out	0x3e, r29	; 62
    f368:	0f be       	out	0x3f, r0	; 63
    f36a:	cd bf       	out	0x3d, r28	; 61
    f36c:	cf 91       	pop	r28
    f36e:	df 91       	pop	r29
    f370:	1f 91       	pop	r17
    f372:	0f 91       	pop	r16
    f374:	ff 90       	pop	r15
    f376:	df 90       	pop	r13
    f378:	cf 90       	pop	r12
    f37a:	bf 90       	pop	r11
    f37c:	af 90       	pop	r10
    f37e:	08 95       	ret

0000f380 <IFTSendMessage>:
		else strCardID[i]=strRFID[i-(20-LengthID)];
	 }strCardID[20]=0;

}

void IFTSendMessage(char MsgCode){//<STX>[IFTID][Seq][No][SrceIP][DestIP][MsgCode]
    f380:	af 92       	push	r10
    f382:	bf 92       	push	r11
    f384:	cf 92       	push	r12
    f386:	df 92       	push	r13
    f388:	ef 92       	push	r14
    f38a:	ff 92       	push	r15
    f38c:	0f 93       	push	r16
    f38e:	df 93       	push	r29
    f390:	cf 93       	push	r28
    f392:	cd b7       	in	r28, 0x3d	; 61
    f394:	de b7       	in	r29, 0x3e	; 62
    f396:	c0 54       	subi	r28, 0x40	; 64
    f398:	d0 40       	sbci	r29, 0x00	; 0
    f39a:	0f b6       	in	r0, 0x3f	; 63
    f39c:	f8 94       	cli
    f39e:	de bf       	out	0x3e, r29	; 62
    f3a0:	0f be       	out	0x3f, r0	; 63
    f3a2:	cd bf       	out	0x3d, r28	; 61
    f3a4:	08 2f       	mov	r16, r24
	 char strSeqNum[3];
	 char ReadIP[4];
	 char strSend[60];

     //STX
     uart(1, 1,0x01);
    f3a6:	81 e0       	ldi	r24, 0x01	; 1
    f3a8:	61 e0       	ldi	r22, 0x01	; 1
    f3aa:	41 e0       	ldi	r20, 0x01	; 1
    f3ac:	0e 94 5b a8 	call	0x150b6	; 0x150b6 <uart>
	 //[IFTID]
	 IdIFT=(eeprom_read_byte(&DefIFT_ID)%100);
    f3b0:	80 e0       	ldi	r24, 0x00	; 0
    f3b2:	90 e0       	ldi	r25, 0x00	; 0
    f3b4:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
	 sprintf_P(strSend,PSTR("%.2d"),IdIFT);
    f3b8:	00 d0       	rcall	.+0      	; 0xf3ba <IFTSendMessage+0x3a>
    f3ba:	00 d0       	rcall	.+0      	; 0xf3bc <IFTSendMessage+0x3c>
    f3bc:	00 d0       	rcall	.+0      	; 0xf3be <IFTSendMessage+0x3e>
    f3be:	ed b7       	in	r30, 0x3d	; 61
    f3c0:	fe b7       	in	r31, 0x3e	; 62
    f3c2:	31 96       	adiw	r30, 0x01	; 1
    f3c4:	b5 e0       	ldi	r27, 0x05	; 5
    f3c6:	cb 2e       	mov	r12, r27
    f3c8:	d1 2c       	mov	r13, r1
    f3ca:	cc 0e       	add	r12, r28
    f3cc:	dd 1e       	adc	r13, r29
    f3ce:	ad b7       	in	r26, 0x3d	; 61
    f3d0:	be b7       	in	r27, 0x3e	; 62
    f3d2:	12 96       	adiw	r26, 0x02	; 2
    f3d4:	dc 92       	st	X, r13
    f3d6:	ce 92       	st	-X, r12
    f3d8:	11 97       	sbiw	r26, 0x01	; 1
    f3da:	22 e8       	ldi	r18, 0x82	; 130
    f3dc:	33 e2       	ldi	r19, 0x23	; 35
    f3de:	33 83       	std	Z+3, r19	; 0x03
    f3e0:	22 83       	std	Z+2, r18	; 0x02
    f3e2:	64 e6       	ldi	r22, 0x64	; 100
    f3e4:	0e 94 ea a9 	call	0x153d4	; 0x153d4 <__udivmodqi4>
    f3e8:	94 83       	std	Z+4, r25	; 0x04
    f3ea:	15 82       	std	Z+5, r1	; 0x05
    f3ec:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	 uart_print(1, 0,strSend);
    f3f0:	8d b7       	in	r24, 0x3d	; 61
    f3f2:	9e b7       	in	r25, 0x3e	; 62
    f3f4:	06 96       	adiw	r24, 0x06	; 6
    f3f6:	0f b6       	in	r0, 0x3f	; 63
    f3f8:	f8 94       	cli
    f3fa:	9e bf       	out	0x3e, r25	; 62
    f3fc:	0f be       	out	0x3f, r0	; 63
    f3fe:	8d bf       	out	0x3d, r24	; 61
    f400:	81 e0       	ldi	r24, 0x01	; 1
    f402:	60 e0       	ldi	r22, 0x00	; 0
    f404:	a6 01       	movw	r20, r12
    f406:	0e 94 78 a8 	call	0x150f0	; 0x150f0 <uart_print>
     //[Seq]
	 SeqNum=((SeqNum+1)%100);
    f40a:	80 91 ae 01 	lds	r24, 0x01AE
    f40e:	90 e0       	ldi	r25, 0x00	; 0
    f410:	01 96       	adiw	r24, 0x01	; 1
    f412:	64 e6       	ldi	r22, 0x64	; 100
    f414:	70 e0       	ldi	r23, 0x00	; 0
    f416:	0e 94 17 aa 	call	0x1542e	; 0x1542e <__divmodhi4>
    f41a:	80 93 ae 01 	sts	0x01AE, r24
	 sprintf_P(strSend,PSTR("%.2d"),SeqNum);	 
    f41e:	00 d0       	rcall	.+0      	; 0xf420 <IFTSendMessage+0xa0>
    f420:	00 d0       	rcall	.+0      	; 0xf422 <IFTSendMessage+0xa2>
    f422:	00 d0       	rcall	.+0      	; 0xf424 <IFTSendMessage+0xa4>
    f424:	ed b7       	in	r30, 0x3d	; 61
    f426:	fe b7       	in	r31, 0x3e	; 62
    f428:	31 96       	adiw	r30, 0x01	; 1
    f42a:	ad b7       	in	r26, 0x3d	; 61
    f42c:	be b7       	in	r27, 0x3e	; 62
    f42e:	12 96       	adiw	r26, 0x02	; 2
    f430:	dc 92       	st	X, r13
    f432:	ce 92       	st	-X, r12
    f434:	11 97       	sbiw	r26, 0x01	; 1
    f436:	2d e7       	ldi	r18, 0x7D	; 125
    f438:	33 e2       	ldi	r19, 0x23	; 35
    f43a:	33 83       	std	Z+3, r19	; 0x03
    f43c:	22 83       	std	Z+2, r18	; 0x02
    f43e:	84 83       	std	Z+4, r24	; 0x04
    f440:	15 82       	std	Z+5, r1	; 0x05
    f442:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	 uart_print(1, 0,strSend);
    f446:	8d b7       	in	r24, 0x3d	; 61
    f448:	9e b7       	in	r25, 0x3e	; 62
    f44a:	06 96       	adiw	r24, 0x06	; 6
    f44c:	0f b6       	in	r0, 0x3f	; 63
    f44e:	f8 94       	cli
    f450:	9e bf       	out	0x3e, r25	; 62
    f452:	0f be       	out	0x3f, r0	; 63
    f454:	8d bf       	out	0x3d, r24	; 61
    f456:	81 e0       	ldi	r24, 0x01	; 1
    f458:	60 e0       	ldi	r22, 0x00	; 0
    f45a:	a6 01       	movw	r20, r12
    f45c:	0e 94 78 a8 	call	0x150f0	; 0x150f0 <uart_print>
	 //[ClientIP]
     eeprom_read_block((void*)&ReadIP,(const void*)&DefClientIP,4);
    f460:	7e 01       	movw	r14, r28
    f462:	08 94       	sec
    f464:	e1 1c       	adc	r14, r1
    f466:	f1 1c       	adc	r15, r1
    f468:	c7 01       	movw	r24, r14
    f46a:	68 e2       	ldi	r22, 0x28	; 40
    f46c:	70 e0       	ldi	r23, 0x00	; 0
    f46e:	44 e0       	ldi	r20, 0x04	; 4
    f470:	50 e0       	ldi	r21, 0x00	; 0
    f472:	0e 94 b9 ac 	call	0x15972	; 0x15972 <__eerd_block_m128>
	 sprintf_P(strSend,PSTR("%.3d.%.3d.%.3d.%.3d"),ReadIP[0],ReadIP[1],ReadIP[2],ReadIP[3]);
    f476:	ad b7       	in	r26, 0x3d	; 61
    f478:	be b7       	in	r27, 0x3e	; 62
    f47a:	1c 97       	sbiw	r26, 0x0c	; 12
    f47c:	0f b6       	in	r0, 0x3f	; 63
    f47e:	f8 94       	cli
    f480:	be bf       	out	0x3e, r27	; 62
    f482:	0f be       	out	0x3f, r0	; 63
    f484:	ad bf       	out	0x3d, r26	; 61
    f486:	ed b7       	in	r30, 0x3d	; 61
    f488:	fe b7       	in	r31, 0x3e	; 62
    f48a:	31 96       	adiw	r30, 0x01	; 1
    f48c:	12 96       	adiw	r26, 0x02	; 2
    f48e:	dc 92       	st	X, r13
    f490:	ce 92       	st	-X, r12
    f492:	11 97       	sbiw	r26, 0x01	; 1
    f494:	89 e6       	ldi	r24, 0x69	; 105
    f496:	93 e2       	ldi	r25, 0x23	; 35
    f498:	93 83       	std	Z+3, r25	; 0x03
    f49a:	82 83       	std	Z+2, r24	; 0x02
    f49c:	89 81       	ldd	r24, Y+1	; 0x01
    f49e:	84 83       	std	Z+4, r24	; 0x04
    f4a0:	15 82       	std	Z+5, r1	; 0x05
    f4a2:	8a 81       	ldd	r24, Y+2	; 0x02
    f4a4:	86 83       	std	Z+6, r24	; 0x06
    f4a6:	17 82       	std	Z+7, r1	; 0x07
    f4a8:	8b 81       	ldd	r24, Y+3	; 0x03
    f4aa:	80 87       	std	Z+8, r24	; 0x08
    f4ac:	11 86       	std	Z+9, r1	; 0x09
    f4ae:	8c 81       	ldd	r24, Y+4	; 0x04
    f4b0:	82 87       	std	Z+10, r24	; 0x0a
    f4b2:	13 86       	std	Z+11, r1	; 0x0b
    f4b4:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	 uart_print(1, 0,strSend);
    f4b8:	8d b7       	in	r24, 0x3d	; 61
    f4ba:	9e b7       	in	r25, 0x3e	; 62
    f4bc:	0c 96       	adiw	r24, 0x0c	; 12
    f4be:	0f b6       	in	r0, 0x3f	; 63
    f4c0:	f8 94       	cli
    f4c2:	9e bf       	out	0x3e, r25	; 62
    f4c4:	0f be       	out	0x3f, r0	; 63
    f4c6:	8d bf       	out	0x3d, r24	; 61
    f4c8:	81 e0       	ldi	r24, 0x01	; 1
    f4ca:	60 e0       	ldi	r22, 0x00	; 0
    f4cc:	a6 01       	movw	r20, r12
    f4ce:	0e 94 78 a8 	call	0x150f0	; 0x150f0 <uart_print>
	 //[ServerIP]
     eeprom_read_block((void*)&ReadIP,(const void*)&DefServerIP,4);
    f4d2:	c7 01       	movw	r24, r14
    f4d4:	6c e2       	ldi	r22, 0x2C	; 44
    f4d6:	70 e0       	ldi	r23, 0x00	; 0
    f4d8:	44 e0       	ldi	r20, 0x04	; 4
    f4da:	50 e0       	ldi	r21, 0x00	; 0
    f4dc:	0e 94 b9 ac 	call	0x15972	; 0x15972 <__eerd_block_m128>
	 sprintf_P(strSend,PSTR("%.3d.%.3d.%.3d.%.3d"),ReadIP[0],ReadIP[1],ReadIP[2],ReadIP[3]);
    f4e0:	ad b7       	in	r26, 0x3d	; 61
    f4e2:	be b7       	in	r27, 0x3e	; 62
    f4e4:	1c 97       	sbiw	r26, 0x0c	; 12
    f4e6:	0f b6       	in	r0, 0x3f	; 63
    f4e8:	f8 94       	cli
    f4ea:	be bf       	out	0x3e, r27	; 62
    f4ec:	0f be       	out	0x3f, r0	; 63
    f4ee:	ad bf       	out	0x3d, r26	; 61
    f4f0:	ed b7       	in	r30, 0x3d	; 61
    f4f2:	fe b7       	in	r31, 0x3e	; 62
    f4f4:	31 96       	adiw	r30, 0x01	; 1
    f4f6:	12 96       	adiw	r26, 0x02	; 2
    f4f8:	dc 92       	st	X, r13
    f4fa:	ce 92       	st	-X, r12
    f4fc:	11 97       	sbiw	r26, 0x01	; 1
    f4fe:	85 e5       	ldi	r24, 0x55	; 85
    f500:	93 e2       	ldi	r25, 0x23	; 35
    f502:	93 83       	std	Z+3, r25	; 0x03
    f504:	82 83       	std	Z+2, r24	; 0x02
    f506:	89 81       	ldd	r24, Y+1	; 0x01
    f508:	84 83       	std	Z+4, r24	; 0x04
    f50a:	15 82       	std	Z+5, r1	; 0x05
    f50c:	8a 81       	ldd	r24, Y+2	; 0x02
    f50e:	86 83       	std	Z+6, r24	; 0x06
    f510:	17 82       	std	Z+7, r1	; 0x07
    f512:	8b 81       	ldd	r24, Y+3	; 0x03
    f514:	80 87       	std	Z+8, r24	; 0x08
    f516:	11 86       	std	Z+9, r1	; 0x09
    f518:	8c 81       	ldd	r24, Y+4	; 0x04
    f51a:	82 87       	std	Z+10, r24	; 0x0a
    f51c:	13 86       	std	Z+11, r1	; 0x0b
    f51e:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	 uart_print(1, 0,strSend);
    f522:	8d b7       	in	r24, 0x3d	; 61
    f524:	9e b7       	in	r25, 0x3e	; 62
    f526:	0c 96       	adiw	r24, 0x0c	; 12
    f528:	0f b6       	in	r0, 0x3f	; 63
    f52a:	f8 94       	cli
    f52c:	9e bf       	out	0x3e, r25	; 62
    f52e:	0f be       	out	0x3f, r0	; 63
    f530:	8d bf       	out	0x3d, r24	; 61
    f532:	81 e0       	ldi	r24, 0x01	; 1
    f534:	60 e0       	ldi	r22, 0x00	; 0
    f536:	a6 01       	movw	r20, r12
    f538:	0e 94 78 a8 	call	0x150f0	; 0x150f0 <uart_print>
	 //[MsgCode]
	 sprintf_P(strSend,PSTR("%.2X"),MsgCode);	 
    f53c:	00 d0       	rcall	.+0      	; 0xf53e <IFTSendMessage+0x1be>
    f53e:	00 d0       	rcall	.+0      	; 0xf540 <IFTSendMessage+0x1c0>
    f540:	00 d0       	rcall	.+0      	; 0xf542 <IFTSendMessage+0x1c2>
    f542:	ed b7       	in	r30, 0x3d	; 61
    f544:	fe b7       	in	r31, 0x3e	; 62
    f546:	31 96       	adiw	r30, 0x01	; 1
    f548:	ad b7       	in	r26, 0x3d	; 61
    f54a:	be b7       	in	r27, 0x3e	; 62
    f54c:	12 96       	adiw	r26, 0x02	; 2
    f54e:	dc 92       	st	X, r13
    f550:	ce 92       	st	-X, r12
    f552:	11 97       	sbiw	r26, 0x01	; 1
    f554:	80 e5       	ldi	r24, 0x50	; 80
    f556:	93 e2       	ldi	r25, 0x23	; 35
    f558:	93 83       	std	Z+3, r25	; 0x03
    f55a:	82 83       	std	Z+2, r24	; 0x02
    f55c:	04 83       	std	Z+4, r16	; 0x04
    f55e:	15 82       	std	Z+5, r1	; 0x05
    f560:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	 uart_print(1, 0,strSend);
    f564:	8d b7       	in	r24, 0x3d	; 61
    f566:	9e b7       	in	r25, 0x3e	; 62
    f568:	06 96       	adiw	r24, 0x06	; 6
    f56a:	0f b6       	in	r0, 0x3f	; 63
    f56c:	f8 94       	cli
    f56e:	9e bf       	out	0x3e, r25	; 62
    f570:	0f be       	out	0x3f, r0	; 63
    f572:	8d bf       	out	0x3d, r24	; 61
    f574:	81 e0       	ldi	r24, 0x01	; 1
    f576:	60 e0       	ldi	r22, 0x00	; 0
    f578:	a6 01       	movw	r20, r12
    f57a:	0e 94 78 a8 	call	0x150f0	; 0x150f0 <uart_print>

     switch(MsgCode){
    f57e:	02 33       	cpi	r16, 0x32	; 50
    f580:	09 f4       	brne	.+2      	; 0xf584 <IFTSendMessage+0x204>
    f582:	7f c0       	rjmp	.+254    	; 0xf682 <IFTSendMessage+0x302>
    f584:	03 33       	cpi	r16, 0x33	; 51
    f586:	70 f4       	brcc	.+28     	; 0xf5a4 <IFTSendMessage+0x224>
    f588:	02 32       	cpi	r16, 0x22	; 34
    f58a:	91 f1       	breq	.+100    	; 0xf5f0 <IFTSendMessage+0x270>
    f58c:	03 32       	cpi	r16, 0x23	; 35
    f58e:	20 f4       	brcc	.+8      	; 0xf598 <IFTSendMessage+0x218>
    f590:	04 30       	cpi	r16, 0x04	; 4
    f592:	09 f0       	breq	.+2      	; 0xf596 <IFTSendMessage+0x216>
    f594:	1d c2       	rjmp	.+1082   	; 0xf9d0 <IFTSendMessage+0x650>
    f596:	19 c0       	rjmp	.+50     	; 0xf5ca <IFTSendMessage+0x24a>
    f598:	04 32       	cpi	r16, 0x24	; 36
    f59a:	d9 f1       	breq	.+118    	; 0xf612 <IFTSendMessage+0x292>
    f59c:	08 32       	cpi	r16, 0x28	; 40
    f59e:	09 f0       	breq	.+2      	; 0xf5a2 <IFTSendMessage+0x222>
    f5a0:	17 c2       	rjmp	.+1070   	; 0xf9d0 <IFTSendMessage+0x650>
    f5a2:	53 c0       	rjmp	.+166    	; 0xf64a <IFTSendMessage+0x2ca>
    f5a4:	00 39       	cpi	r16, 0x90	; 144
    f5a6:	09 f4       	brne	.+2      	; 0xf5aa <IFTSendMessage+0x22a>
    f5a8:	78 c1       	rjmp	.+752    	; 0xf89a <IFTSendMessage+0x51a>
    f5aa:	01 39       	cpi	r16, 0x91	; 145
    f5ac:	38 f4       	brcc	.+14     	; 0xf5bc <IFTSendMessage+0x23c>
    f5ae:	06 35       	cpi	r16, 0x56	; 86
    f5b0:	09 f4       	brne	.+2      	; 0xf5b4 <IFTSendMessage+0x234>
    f5b2:	d7 c0       	rjmp	.+430    	; 0xf762 <IFTSendMessage+0x3e2>
    f5b4:	08 35       	cpi	r16, 0x58	; 88
    f5b6:	09 f0       	breq	.+2      	; 0xf5ba <IFTSendMessage+0x23a>
    f5b8:	0b c2       	rjmp	.+1046   	; 0xf9d0 <IFTSendMessage+0x650>
    f5ba:	e8 c0       	rjmp	.+464    	; 0xf78c <IFTSendMessage+0x40c>
    f5bc:	02 39       	cpi	r16, 0x92	; 146
    f5be:	09 f4       	brne	.+2      	; 0xf5c2 <IFTSendMessage+0x242>
    f5c0:	8d c1       	rjmp	.+794    	; 0xf8dc <IFTSendMessage+0x55c>
    f5c2:	08 39       	cpi	r16, 0x98	; 152
    f5c4:	09 f0       	breq	.+2      	; 0xf5c8 <IFTSendMessage+0x248>
    f5c6:	04 c2       	rjmp	.+1032   	; 0xf9d0 <IFTSendMessage+0x650>
    f5c8:	e0 c1       	rjmp	.+960    	; 0xf98a <IFTSendMessage+0x60a>
	 case MSG_04://Transaction Number
	      sprintf_P(strSend,PSTR("%s1"),strTranNo);
    f5ca:	00 d0       	rcall	.+0      	; 0xf5cc <IFTSendMessage+0x24c>
    f5cc:	00 d0       	rcall	.+0      	; 0xf5ce <IFTSendMessage+0x24e>
    f5ce:	00 d0       	rcall	.+0      	; 0xf5d0 <IFTSendMessage+0x250>
    f5d0:	ed b7       	in	r30, 0x3d	; 61
    f5d2:	fe b7       	in	r31, 0x3e	; 62
    f5d4:	31 96       	adiw	r30, 0x01	; 1
    f5d6:	ad b7       	in	r26, 0x3d	; 61
    f5d8:	be b7       	in	r27, 0x3e	; 62
    f5da:	12 96       	adiw	r26, 0x02	; 2
    f5dc:	dc 92       	st	X, r13
    f5de:	ce 92       	st	-X, r12
    f5e0:	11 97       	sbiw	r26, 0x01	; 1
    f5e2:	8c e4       	ldi	r24, 0x4C	; 76
    f5e4:	93 e2       	ldi	r25, 0x23	; 35
    f5e6:	93 83       	std	Z+3, r25	; 0x03
    f5e8:	82 83       	std	Z+2, r24	; 0x02
    f5ea:	87 e8       	ldi	r24, 0x87	; 135
    f5ec:	9c e0       	ldi	r25, 0x0C	; 12
    f5ee:	df c1       	rjmp	.+958    	; 0xf9ae <IFTSendMessage+0x62e>
	      uart_print(1, 0,strSend);
	      break;
	 case MSG_10://No Additional Parameter
	      break;
	 case MSG_22://strCardID
	      UpdateCardID();
    f5f0:	0e 94 6e 40 	call	0x80dc	; 0x80dc <UpdateCardID>
	      sprintf_P(strSend,PSTR("%s"),strCardID);
    f5f4:	00 d0       	rcall	.+0      	; 0xf5f6 <IFTSendMessage+0x276>
    f5f6:	00 d0       	rcall	.+0      	; 0xf5f8 <IFTSendMessage+0x278>
    f5f8:	00 d0       	rcall	.+0      	; 0xf5fa <IFTSendMessage+0x27a>
    f5fa:	ed b7       	in	r30, 0x3d	; 61
    f5fc:	fe b7       	in	r31, 0x3e	; 62
    f5fe:	31 96       	adiw	r30, 0x01	; 1
    f600:	ad b7       	in	r26, 0x3d	; 61
    f602:	be b7       	in	r27, 0x3e	; 62
    f604:	12 96       	adiw	r26, 0x02	; 2
    f606:	dc 92       	st	X, r13
    f608:	ce 92       	st	-X, r12
    f60a:	11 97       	sbiw	r26, 0x01	; 1
    f60c:	89 e4       	ldi	r24, 0x49	; 73
    f60e:	93 e2       	ldi	r25, 0x23	; 35
    f610:	b8 c0       	rjmp	.+368    	; 0xf782 <IFTSendMessage+0x402>
	      uart_print(1, 0,strSend);
	      break;
	 case MSG_24://strCardID, FIP_ID
	      UpdateCardID();
    f612:	0e 94 6e 40 	call	0x80dc	; 0x80dc <UpdateCardID>
	      sprintf_P(strSend,PSTR("%s%s"),strCardID,strFIP_ID);
    f616:	ad b7       	in	r26, 0x3d	; 61
    f618:	be b7       	in	r27, 0x3e	; 62
    f61a:	18 97       	sbiw	r26, 0x08	; 8
    f61c:	0f b6       	in	r0, 0x3f	; 63
    f61e:	f8 94       	cli
    f620:	be bf       	out	0x3e, r27	; 62
    f622:	0f be       	out	0x3f, r0	; 63
    f624:	ad bf       	out	0x3d, r26	; 61
    f626:	ed b7       	in	r30, 0x3d	; 61
    f628:	fe b7       	in	r31, 0x3e	; 62
    f62a:	31 96       	adiw	r30, 0x01	; 1
    f62c:	12 96       	adiw	r26, 0x02	; 2
    f62e:	dc 92       	st	X, r13
    f630:	ce 92       	st	-X, r12
    f632:	11 97       	sbiw	r26, 0x01	; 1
    f634:	84 e4       	ldi	r24, 0x44	; 68
    f636:	93 e2       	ldi	r25, 0x23	; 35
    f638:	93 83       	std	Z+3, r25	; 0x03
    f63a:	82 83       	std	Z+2, r24	; 0x02
    f63c:	89 e8       	ldi	r24, 0x89	; 137
    f63e:	9b e0       	ldi	r25, 0x0B	; 11
    f640:	95 83       	std	Z+5, r25	; 0x05
    f642:	84 83       	std	Z+4, r24	; 0x04
    f644:	89 eb       	ldi	r24, 0xB9	; 185
    f646:	97 e0       	ldi	r25, 0x07	; 7
    f648:	41 c1       	rjmp	.+642    	; 0xf8cc <IFTSendMessage+0x54c>
	      uart_print(1, 0,strSend);
	      break;

	 case MSG_28://strCardID, FIP_ID
	      UpdateCardID();
    f64a:	0e 94 6e 40 	call	0x80dc	; 0x80dc <UpdateCardID>
	      sprintf_P(strSend,PSTR("%s%s"),strFIP_ID,strCardID);
    f64e:	ad b7       	in	r26, 0x3d	; 61
    f650:	be b7       	in	r27, 0x3e	; 62
    f652:	18 97       	sbiw	r26, 0x08	; 8
    f654:	0f b6       	in	r0, 0x3f	; 63
    f656:	f8 94       	cli
    f658:	be bf       	out	0x3e, r27	; 62
    f65a:	0f be       	out	0x3f, r0	; 63
    f65c:	ad bf       	out	0x3d, r26	; 61
    f65e:	ed b7       	in	r30, 0x3d	; 61
    f660:	fe b7       	in	r31, 0x3e	; 62
    f662:	31 96       	adiw	r30, 0x01	; 1
    f664:	12 96       	adiw	r26, 0x02	; 2
    f666:	dc 92       	st	X, r13
    f668:	ce 92       	st	-X, r12
    f66a:	11 97       	sbiw	r26, 0x01	; 1
    f66c:	8f e3       	ldi	r24, 0x3F	; 63
    f66e:	93 e2       	ldi	r25, 0x23	; 35
    f670:	93 83       	std	Z+3, r25	; 0x03
    f672:	82 83       	std	Z+2, r24	; 0x02
    f674:	89 eb       	ldi	r24, 0xB9	; 185
    f676:	97 e0       	ldi	r25, 0x07	; 7
    f678:	95 83       	std	Z+5, r25	; 0x05
    f67a:	84 83       	std	Z+4, r24	; 0x04
    f67c:	89 e8       	ldi	r24, 0x89	; 137
    f67e:	9b e0       	ldi	r25, 0x0B	; 11
    f680:	25 c1       	rjmp	.+586    	; 0xf8cc <IFTSendMessage+0x54c>
	      uart_print(1, 0,strSend);
	      break;
	 case MSG_32://Change MOP
	      UpdateCardID();
    f682:	0e 94 6e 40 	call	0x80dc	; 0x80dc <UpdateCardID>
	      sprintf_P(strSend,PSTR("%s%s"),strFIP_ID,strPaymentType);
    f686:	ad b7       	in	r26, 0x3d	; 61
    f688:	be b7       	in	r27, 0x3e	; 62
    f68a:	18 97       	sbiw	r26, 0x08	; 8
    f68c:	0f b6       	in	r0, 0x3f	; 63
    f68e:	f8 94       	cli
    f690:	be bf       	out	0x3e, r27	; 62
    f692:	0f be       	out	0x3f, r0	; 63
    f694:	ad bf       	out	0x3d, r26	; 61
    f696:	ed b7       	in	r30, 0x3d	; 61
    f698:	fe b7       	in	r31, 0x3e	; 62
    f69a:	31 96       	adiw	r30, 0x01	; 1
    f69c:	12 96       	adiw	r26, 0x02	; 2
    f69e:	dc 92       	st	X, r13
    f6a0:	ce 92       	st	-X, r12
    f6a2:	11 97       	sbiw	r26, 0x01	; 1
    f6a4:	8a e3       	ldi	r24, 0x3A	; 58
    f6a6:	93 e2       	ldi	r25, 0x23	; 35
    f6a8:	93 83       	std	Z+3, r25	; 0x03
    f6aa:	82 83       	std	Z+2, r24	; 0x02
    f6ac:	89 eb       	ldi	r24, 0xB9	; 185
    f6ae:	97 e0       	ldi	r25, 0x07	; 7
    f6b0:	95 83       	std	Z+5, r25	; 0x05
    f6b2:	84 83       	std	Z+4, r24	; 0x04
    f6b4:	80 e5       	ldi	r24, 0x50	; 80
    f6b6:	97 e0       	ldi	r25, 0x07	; 7
    f6b8:	97 83       	std	Z+7, r25	; 0x07
    f6ba:	86 83       	std	Z+6, r24	; 0x06
    f6bc:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	      uart_print(1,0,strSend);
    f6c0:	8d b7       	in	r24, 0x3d	; 61
    f6c2:	9e b7       	in	r25, 0x3e	; 62
    f6c4:	08 96       	adiw	r24, 0x08	; 8
    f6c6:	0f b6       	in	r0, 0x3f	; 63
    f6c8:	f8 94       	cli
    f6ca:	9e bf       	out	0x3e, r25	; 62
    f6cc:	0f be       	out	0x3f, r0	; 63
    f6ce:	8d bf       	out	0x3d, r24	; 61
    f6d0:	81 e0       	ldi	r24, 0x01	; 1
    f6d2:	60 e0       	ldi	r22, 0x00	; 0
    f6d4:	a6 01       	movw	r20, r12
    f6d6:	0e 94 78 a8 	call	0x150f0	; 0x150f0 <uart_print>
		  sprintf_P(strSend,PSTR("%s%s"),strRef1,strRef2);
    f6da:	ad b7       	in	r26, 0x3d	; 61
    f6dc:	be b7       	in	r27, 0x3e	; 62
    f6de:	18 97       	sbiw	r26, 0x08	; 8
    f6e0:	0f b6       	in	r0, 0x3f	; 63
    f6e2:	f8 94       	cli
    f6e4:	be bf       	out	0x3e, r27	; 62
    f6e6:	0f be       	out	0x3f, r0	; 63
    f6e8:	ad bf       	out	0x3d, r26	; 61
    f6ea:	ed b7       	in	r30, 0x3d	; 61
    f6ec:	fe b7       	in	r31, 0x3e	; 62
    f6ee:	31 96       	adiw	r30, 0x01	; 1
    f6f0:	12 96       	adiw	r26, 0x02	; 2
    f6f2:	dc 92       	st	X, r13
    f6f4:	ce 92       	st	-X, r12
    f6f6:	11 97       	sbiw	r26, 0x01	; 1
    f6f8:	85 e3       	ldi	r24, 0x35	; 53
    f6fa:	93 e2       	ldi	r25, 0x23	; 35
    f6fc:	93 83       	std	Z+3, r25	; 0x03
    f6fe:	82 83       	std	Z+2, r24	; 0x02
    f700:	8e e8       	ldi	r24, 0x8E	; 142
    f702:	9c e0       	ldi	r25, 0x0C	; 12
    f704:	95 83       	std	Z+5, r25	; 0x05
    f706:	84 83       	std	Z+4, r24	; 0x04
    f708:	8e e9       	ldi	r24, 0x9E	; 158
    f70a:	9b e0       	ldi	r25, 0x0B	; 11
    f70c:	97 83       	std	Z+7, r25	; 0x07
    f70e:	86 83       	std	Z+6, r24	; 0x06
    f710:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
		  uart_print(1,0,strSend);
    f714:	8d b7       	in	r24, 0x3d	; 61
    f716:	9e b7       	in	r25, 0x3e	; 62
    f718:	08 96       	adiw	r24, 0x08	; 8
    f71a:	0f b6       	in	r0, 0x3f	; 63
    f71c:	f8 94       	cli
    f71e:	9e bf       	out	0x3e, r25	; 62
    f720:	0f be       	out	0x3f, r0	; 63
    f722:	8d bf       	out	0x3d, r24	; 61
    f724:	81 e0       	ldi	r24, 0x01	; 1
    f726:	60 e0       	ldi	r22, 0x00	; 0
    f728:	a6 01       	movw	r20, r12
    f72a:	0e 94 78 a8 	call	0x150f0	; 0x150f0 <uart_print>
		  sprintf_P(strSend,PSTR("%s%s"),strRef3,strRef4);
    f72e:	ad b7       	in	r26, 0x3d	; 61
    f730:	be b7       	in	r27, 0x3e	; 62
    f732:	18 97       	sbiw	r26, 0x08	; 8
    f734:	0f b6       	in	r0, 0x3f	; 63
    f736:	f8 94       	cli
    f738:	be bf       	out	0x3e, r27	; 62
    f73a:	0f be       	out	0x3f, r0	; 63
    f73c:	ad bf       	out	0x3d, r26	; 61
    f73e:	ed b7       	in	r30, 0x3d	; 61
    f740:	fe b7       	in	r31, 0x3e	; 62
    f742:	31 96       	adiw	r30, 0x01	; 1
    f744:	12 96       	adiw	r26, 0x02	; 2
    f746:	dc 92       	st	X, r13
    f748:	ce 92       	st	-X, r12
    f74a:	11 97       	sbiw	r26, 0x01	; 1
    f74c:	80 e3       	ldi	r24, 0x30	; 48
    f74e:	93 e2       	ldi	r25, 0x23	; 35
    f750:	93 83       	std	Z+3, r25	; 0x03
    f752:	82 83       	std	Z+2, r24	; 0x02
    f754:	8d e7       	ldi	r24, 0x7D	; 125
    f756:	98 e0       	ldi	r25, 0x08	; 8
    f758:	95 83       	std	Z+5, r25	; 0x05
    f75a:	84 83       	std	Z+4, r24	; 0x04
    f75c:	85 ea       	ldi	r24, 0xA5	; 165
    f75e:	93 e0       	ldi	r25, 0x03	; 3
    f760:	b5 c0       	rjmp	.+362    	; 0xf8cc <IFTSendMessage+0x54c>
		  uart_print(1,0,strSend);
	      break;

	 case MSG_56://strCardID, FIP_ID
	      UpdateCardID();
    f762:	0e 94 6e 40 	call	0x80dc	; 0x80dc <UpdateCardID>
	      sprintf_P(strSend,PSTR("%s"),strCardID);
    f766:	00 d0       	rcall	.+0      	; 0xf768 <IFTSendMessage+0x3e8>
    f768:	00 d0       	rcall	.+0      	; 0xf76a <IFTSendMessage+0x3ea>
    f76a:	00 d0       	rcall	.+0      	; 0xf76c <IFTSendMessage+0x3ec>
    f76c:	ed b7       	in	r30, 0x3d	; 61
    f76e:	fe b7       	in	r31, 0x3e	; 62
    f770:	31 96       	adiw	r30, 0x01	; 1
    f772:	ad b7       	in	r26, 0x3d	; 61
    f774:	be b7       	in	r27, 0x3e	; 62
    f776:	12 96       	adiw	r26, 0x02	; 2
    f778:	dc 92       	st	X, r13
    f77a:	ce 92       	st	-X, r12
    f77c:	11 97       	sbiw	r26, 0x01	; 1
    f77e:	8d e2       	ldi	r24, 0x2D	; 45
    f780:	93 e2       	ldi	r25, 0x23	; 35
    f782:	93 83       	std	Z+3, r25	; 0x03
    f784:	82 83       	std	Z+2, r24	; 0x02
    f786:	89 e8       	ldi	r24, 0x89	; 137
    f788:	9b e0       	ldi	r25, 0x0B	; 11
    f78a:	11 c1       	rjmp	.+546    	; 0xf9ae <IFTSendMessage+0x62e>
	      uart_print(1, 0,strSend);
	      break;
	 case MSG_58://Request Local Account Transaction
	      UpdateCardID();
    f78c:	0e 94 6e 40 	call	0x80dc	; 0x80dc <UpdateCardID>
		  AddSpaceLead(strBalanceValue,13);
    f790:	af e1       	ldi	r26, 0x1F	; 31
    f792:	aa 2e       	mov	r10, r26
    f794:	ac e0       	ldi	r26, 0x0C	; 12
    f796:	ba 2e       	mov	r11, r26
    f798:	c5 01       	movw	r24, r10
    f79a:	6d e0       	ldi	r22, 0x0D	; 13
    f79c:	0e 94 fd 2e 	call	0x5dfa	; 0x5dfa <AddSpaceLead>
		  AddSpaceLead(strOdometer,10);
    f7a0:	f3 ec       	ldi	r31, 0xC3	; 195
    f7a2:	ef 2e       	mov	r14, r31
    f7a4:	f3 e0       	ldi	r31, 0x03	; 3
    f7a6:	ff 2e       	mov	r15, r31
    f7a8:	c7 01       	movw	r24, r14
    f7aa:	6a e0       	ldi	r22, 0x0A	; 10
    f7ac:	0e 94 fd 2e 	call	0x5dfa	; 0x5dfa <AddSpaceLead>
		  CardType=0;
    f7b0:	10 92 89 03 	sts	0x0389, r1
		  sprintf_P(strSend,PSTR("%s%s%d"),strCardID,strFIP_ID,NozzleID);
    f7b4:	ad b7       	in	r26, 0x3d	; 61
    f7b6:	be b7       	in	r27, 0x3e	; 62
    f7b8:	1a 97       	sbiw	r26, 0x0a	; 10
    f7ba:	0f b6       	in	r0, 0x3f	; 63
    f7bc:	f8 94       	cli
    f7be:	be bf       	out	0x3e, r27	; 62
    f7c0:	0f be       	out	0x3f, r0	; 63
    f7c2:	ad bf       	out	0x3d, r26	; 61
    f7c4:	ed b7       	in	r30, 0x3d	; 61
    f7c6:	fe b7       	in	r31, 0x3e	; 62
    f7c8:	31 96       	adiw	r30, 0x01	; 1
    f7ca:	12 96       	adiw	r26, 0x02	; 2
    f7cc:	dc 92       	st	X, r13
    f7ce:	ce 92       	st	-X, r12
    f7d0:	11 97       	sbiw	r26, 0x01	; 1
    f7d2:	86 e2       	ldi	r24, 0x26	; 38
    f7d4:	93 e2       	ldi	r25, 0x23	; 35
    f7d6:	93 83       	std	Z+3, r25	; 0x03
    f7d8:	82 83       	std	Z+2, r24	; 0x02
    f7da:	89 e8       	ldi	r24, 0x89	; 137
    f7dc:	9b e0       	ldi	r25, 0x0B	; 11
    f7de:	95 83       	std	Z+5, r25	; 0x05
    f7e0:	84 83       	std	Z+4, r24	; 0x04
    f7e2:	89 eb       	ldi	r24, 0xB9	; 185
    f7e4:	97 e0       	ldi	r25, 0x07	; 7
    f7e6:	97 83       	std	Z+7, r25	; 0x07
    f7e8:	86 83       	std	Z+6, r24	; 0x06
    f7ea:	80 91 6d 07 	lds	r24, 0x076D
    f7ee:	80 87       	std	Z+8, r24	; 0x08
    f7f0:	11 86       	std	Z+9, r1	; 0x09
    f7f2:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
		  uart_print(1,0,strSend);
    f7f6:	8d b7       	in	r24, 0x3d	; 61
    f7f8:	9e b7       	in	r25, 0x3e	; 62
    f7fa:	0a 96       	adiw	r24, 0x0a	; 10
    f7fc:	0f b6       	in	r0, 0x3f	; 63
    f7fe:	f8 94       	cli
    f800:	9e bf       	out	0x3e, r25	; 62
    f802:	0f be       	out	0x3f, r0	; 63
    f804:	8d bf       	out	0x3d, r24	; 61
    f806:	81 e0       	ldi	r24, 0x01	; 1
    f808:	60 e0       	ldi	r22, 0x00	; 0
    f80a:	a6 01       	movw	r20, r12
    f80c:	0e 94 78 a8 	call	0x150f0	; 0x150f0 <uart_print>
		  sprintf_P(strSend,PSTR("%s%s%d"),strBalanceType,strBalanceValue,CardType);
    f810:	ad b7       	in	r26, 0x3d	; 61
    f812:	be b7       	in	r27, 0x3e	; 62
    f814:	1a 97       	sbiw	r26, 0x0a	; 10
    f816:	0f b6       	in	r0, 0x3f	; 63
    f818:	f8 94       	cli
    f81a:	be bf       	out	0x3e, r27	; 62
    f81c:	0f be       	out	0x3f, r0	; 63
    f81e:	ad bf       	out	0x3d, r26	; 61
    f820:	ed b7       	in	r30, 0x3d	; 61
    f822:	fe b7       	in	r31, 0x3e	; 62
    f824:	31 96       	adiw	r30, 0x01	; 1
    f826:	12 96       	adiw	r26, 0x02	; 2
    f828:	dc 92       	st	X, r13
    f82a:	ce 92       	st	-X, r12
    f82c:	11 97       	sbiw	r26, 0x01	; 1
    f82e:	8f e1       	ldi	r24, 0x1F	; 31
    f830:	93 e2       	ldi	r25, 0x23	; 35
    f832:	93 83       	std	Z+3, r25	; 0x03
    f834:	82 83       	std	Z+2, r24	; 0x02
    f836:	83 ea       	ldi	r24, 0xA3	; 163
    f838:	93 e0       	ldi	r25, 0x03	; 3
    f83a:	95 83       	std	Z+5, r25	; 0x05
    f83c:	84 83       	std	Z+4, r24	; 0x04
    f83e:	b7 82       	std	Z+7, r11	; 0x07
    f840:	a6 82       	std	Z+6, r10	; 0x06
    f842:	80 91 89 03 	lds	r24, 0x0389
    f846:	80 87       	std	Z+8, r24	; 0x08
    f848:	11 86       	std	Z+9, r1	; 0x09
    f84a:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
		  uart_print(1,0,strSend);
    f84e:	8d b7       	in	r24, 0x3d	; 61
    f850:	9e b7       	in	r25, 0x3e	; 62
    f852:	0a 96       	adiw	r24, 0x0a	; 10
    f854:	0f b6       	in	r0, 0x3f	; 63
    f856:	f8 94       	cli
    f858:	9e bf       	out	0x3e, r25	; 62
    f85a:	0f be       	out	0x3f, r0	; 63
    f85c:	8d bf       	out	0x3d, r24	; 61
    f85e:	81 e0       	ldi	r24, 0x01	; 1
    f860:	60 e0       	ldi	r22, 0x00	; 0
    f862:	a6 01       	movw	r20, r12
    f864:	0e 94 78 a8 	call	0x150f0	; 0x150f0 <uart_print>
		  uart_printf(1,0,PSTR("F0000000E123456FFFFF"));
    f868:	81 e0       	ldi	r24, 0x01	; 1
    f86a:	60 e0       	ldi	r22, 0x00	; 0
    f86c:	4a e0       	ldi	r20, 0x0A	; 10
    f86e:	53 e2       	ldi	r21, 0x23	; 35
    f870:	0e 94 a0 a8 	call	0x15140	; 0x15140 <uart_printf>
		  sprintf_P(strSend,PSTR("%s"),strOdometer);
    f874:	00 d0       	rcall	.+0      	; 0xf876 <IFTSendMessage+0x4f6>
    f876:	00 d0       	rcall	.+0      	; 0xf878 <IFTSendMessage+0x4f8>
    f878:	00 d0       	rcall	.+0      	; 0xf87a <IFTSendMessage+0x4fa>
    f87a:	ed b7       	in	r30, 0x3d	; 61
    f87c:	fe b7       	in	r31, 0x3e	; 62
    f87e:	31 96       	adiw	r30, 0x01	; 1
    f880:	ad b7       	in	r26, 0x3d	; 61
    f882:	be b7       	in	r27, 0x3e	; 62
    f884:	12 96       	adiw	r26, 0x02	; 2
    f886:	dc 92       	st	X, r13
    f888:	ce 92       	st	-X, r12
    f88a:	11 97       	sbiw	r26, 0x01	; 1
    f88c:	87 e0       	ldi	r24, 0x07	; 7
    f88e:	93 e2       	ldi	r25, 0x23	; 35
    f890:	93 83       	std	Z+3, r25	; 0x03
    f892:	82 83       	std	Z+2, r24	; 0x02
    f894:	f5 82       	std	Z+5, r15	; 0x05
    f896:	e4 82       	std	Z+4, r14	; 0x04
    f898:	8c c0       	rjmp	.+280    	; 0xf9b2 <IFTSendMessage+0x632>
		  uart_print(1,0,strSend);
		  break;
	 case MSG_90://Request EDC
	      sprintf_P(strSend,PSTR("%s%s"),strFIP_ID,strRef1);
    f89a:	ad b7       	in	r26, 0x3d	; 61
    f89c:	be b7       	in	r27, 0x3e	; 62
    f89e:	18 97       	sbiw	r26, 0x08	; 8
    f8a0:	0f b6       	in	r0, 0x3f	; 63
    f8a2:	f8 94       	cli
    f8a4:	be bf       	out	0x3e, r27	; 62
    f8a6:	0f be       	out	0x3f, r0	; 63
    f8a8:	ad bf       	out	0x3d, r26	; 61
    f8aa:	ed b7       	in	r30, 0x3d	; 61
    f8ac:	fe b7       	in	r31, 0x3e	; 62
    f8ae:	31 96       	adiw	r30, 0x01	; 1
    f8b0:	12 96       	adiw	r26, 0x02	; 2
    f8b2:	dc 92       	st	X, r13
    f8b4:	ce 92       	st	-X, r12
    f8b6:	11 97       	sbiw	r26, 0x01	; 1
    f8b8:	82 e0       	ldi	r24, 0x02	; 2
    f8ba:	93 e2       	ldi	r25, 0x23	; 35
    f8bc:	93 83       	std	Z+3, r25	; 0x03
    f8be:	82 83       	std	Z+2, r24	; 0x02
    f8c0:	89 eb       	ldi	r24, 0xB9	; 185
    f8c2:	97 e0       	ldi	r25, 0x07	; 7
    f8c4:	95 83       	std	Z+5, r25	; 0x05
    f8c6:	84 83       	std	Z+4, r24	; 0x04
    f8c8:	8e e8       	ldi	r24, 0x8E	; 142
    f8ca:	9c e0       	ldi	r25, 0x0C	; 12
    f8cc:	97 83       	std	Z+7, r25	; 0x07
    f8ce:	86 83       	std	Z+6, r24	; 0x06
    f8d0:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	      uart_print(1, 0,strSend);
    f8d4:	8d b7       	in	r24, 0x3d	; 61
    f8d6:	9e b7       	in	r25, 0x3e	; 62
    f8d8:	08 96       	adiw	r24, 0x08	; 8
    f8da:	70 c0       	rjmp	.+224    	; 0xf9bc <IFTSendMessage+0x63c>
	      break;
	 case MSG_92://EDC Approval
		  sprintf_P(strSend,PSTR("%s%s%s%s"),strTranNo,strFIP_ID,strCardType,strCardID);
    f8dc:	ad b7       	in	r26, 0x3d	; 61
    f8de:	be b7       	in	r27, 0x3e	; 62
    f8e0:	1c 97       	sbiw	r26, 0x0c	; 12
    f8e2:	0f b6       	in	r0, 0x3f	; 63
    f8e4:	f8 94       	cli
    f8e6:	be bf       	out	0x3e, r27	; 62
    f8e8:	0f be       	out	0x3f, r0	; 63
    f8ea:	ad bf       	out	0x3d, r26	; 61
    f8ec:	ed b7       	in	r30, 0x3d	; 61
    f8ee:	fe b7       	in	r31, 0x3e	; 62
    f8f0:	31 96       	adiw	r30, 0x01	; 1
    f8f2:	12 96       	adiw	r26, 0x02	; 2
    f8f4:	dc 92       	st	X, r13
    f8f6:	ce 92       	st	-X, r12
    f8f8:	11 97       	sbiw	r26, 0x01	; 1
    f8fa:	89 ef       	ldi	r24, 0xF9	; 249
    f8fc:	92 e2       	ldi	r25, 0x22	; 34
    f8fe:	93 83       	std	Z+3, r25	; 0x03
    f900:	82 83       	std	Z+2, r24	; 0x02
    f902:	87 e8       	ldi	r24, 0x87	; 135
    f904:	9c e0       	ldi	r25, 0x0C	; 12
    f906:	95 83       	std	Z+5, r25	; 0x05
    f908:	84 83       	std	Z+4, r24	; 0x04
    f90a:	89 eb       	ldi	r24, 0xB9	; 185
    f90c:	97 e0       	ldi	r25, 0x07	; 7
    f90e:	97 83       	std	Z+7, r25	; 0x07
    f910:	86 83       	std	Z+6, r24	; 0x06
    f912:	83 ea       	ldi	r24, 0xA3	; 163
    f914:	9c e0       	ldi	r25, 0x0C	; 12
    f916:	91 87       	std	Z+9, r25	; 0x09
    f918:	80 87       	std	Z+8, r24	; 0x08
    f91a:	89 e8       	ldi	r24, 0x89	; 137
    f91c:	9b e0       	ldi	r25, 0x0B	; 11
    f91e:	93 87       	std	Z+11, r25	; 0x0b
    f920:	82 87       	std	Z+10, r24	; 0x0a
    f922:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	      uart_print(1,0,strSend);	    
    f926:	8d b7       	in	r24, 0x3d	; 61
    f928:	9e b7       	in	r25, 0x3e	; 62
    f92a:	0c 96       	adiw	r24, 0x0c	; 12
    f92c:	0f b6       	in	r0, 0x3f	; 63
    f92e:	f8 94       	cli
    f930:	9e bf       	out	0x3e, r25	; 62
    f932:	0f be       	out	0x3f, r0	; 63
    f934:	8d bf       	out	0x3d, r24	; 61
    f936:	81 e0       	ldi	r24, 0x01	; 1
    f938:	60 e0       	ldi	r22, 0x00	; 0
    f93a:	a6 01       	movw	r20, r12
    f93c:	0e 94 78 a8 	call	0x150f0	; 0x150f0 <uart_print>
		  sprintf_P(strSend,PSTR("%s%s%s"),strApprovalCode,strInvoiceNumber,strDateTime);
    f940:	ad b7       	in	r26, 0x3d	; 61
    f942:	be b7       	in	r27, 0x3e	; 62
    f944:	1a 97       	sbiw	r26, 0x0a	; 10
    f946:	0f b6       	in	r0, 0x3f	; 63
    f948:	f8 94       	cli
    f94a:	be bf       	out	0x3e, r27	; 62
    f94c:	0f be       	out	0x3f, r0	; 63
    f94e:	ad bf       	out	0x3d, r26	; 61
    f950:	ed b7       	in	r30, 0x3d	; 61
    f952:	fe b7       	in	r31, 0x3e	; 62
    f954:	31 96       	adiw	r30, 0x01	; 1
    f956:	12 96       	adiw	r26, 0x02	; 2
    f958:	dc 92       	st	X, r13
    f95a:	ce 92       	st	-X, r12
    f95c:	11 97       	sbiw	r26, 0x01	; 1
    f95e:	82 ef       	ldi	r24, 0xF2	; 242
    f960:	92 e2       	ldi	r25, 0x22	; 34
    f962:	93 83       	std	Z+3, r25	; 0x03
    f964:	82 83       	std	Z+2, r24	; 0x02
    f966:	80 ef       	ldi	r24, 0xF0	; 240
    f968:	97 e0       	ldi	r25, 0x07	; 7
    f96a:	95 83       	std	Z+5, r25	; 0x05
    f96c:	84 83       	std	Z+4, r24	; 0x04
    f96e:	83 e5       	ldi	r24, 0x53	; 83
    f970:	97 e0       	ldi	r25, 0x07	; 7
    f972:	97 83       	std	Z+7, r25	; 0x07
    f974:	86 83       	std	Z+6, r24	; 0x06
    f976:	8f eb       	ldi	r24, 0xBF	; 191
    f978:	9b e0       	ldi	r25, 0x0B	; 11
    f97a:	91 87       	std	Z+9, r25	; 0x09
    f97c:	80 87       	std	Z+8, r24	; 0x08
    f97e:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	      uart_print(1,0,strSend);
    f982:	8d b7       	in	r24, 0x3d	; 61
    f984:	9e b7       	in	r25, 0x3e	; 62
    f986:	0a 96       	adiw	r24, 0x0a	; 10
    f988:	19 c0       	rjmp	.+50     	; 0xf9bc <IFTSendMessage+0x63c>
	      break;	 
	 case MSG_98://Request Transaction Info
	      sprintf_P(strSend,PSTR("%s"),strFIP_ID);
    f98a:	00 d0       	rcall	.+0      	; 0xf98c <IFTSendMessage+0x60c>
    f98c:	00 d0       	rcall	.+0      	; 0xf98e <IFTSendMessage+0x60e>
    f98e:	00 d0       	rcall	.+0      	; 0xf990 <IFTSendMessage+0x610>
    f990:	ed b7       	in	r30, 0x3d	; 61
    f992:	fe b7       	in	r31, 0x3e	; 62
    f994:	31 96       	adiw	r30, 0x01	; 1
    f996:	ad b7       	in	r26, 0x3d	; 61
    f998:	be b7       	in	r27, 0x3e	; 62
    f99a:	12 96       	adiw	r26, 0x02	; 2
    f99c:	dc 92       	st	X, r13
    f99e:	ce 92       	st	-X, r12
    f9a0:	11 97       	sbiw	r26, 0x01	; 1
    f9a2:	8f ee       	ldi	r24, 0xEF	; 239
    f9a4:	92 e2       	ldi	r25, 0x22	; 34
    f9a6:	93 83       	std	Z+3, r25	; 0x03
    f9a8:	82 83       	std	Z+2, r24	; 0x02
    f9aa:	89 eb       	ldi	r24, 0xB9	; 185
    f9ac:	97 e0       	ldi	r25, 0x07	; 7
    f9ae:	95 83       	std	Z+5, r25	; 0x05
    f9b0:	84 83       	std	Z+4, r24	; 0x04
    f9b2:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	      uart_print(1, 0,strSend);
    f9b6:	8d b7       	in	r24, 0x3d	; 61
    f9b8:	9e b7       	in	r25, 0x3e	; 62
    f9ba:	06 96       	adiw	r24, 0x06	; 6
    f9bc:	0f b6       	in	r0, 0x3f	; 63
    f9be:	f8 94       	cli
    f9c0:	9e bf       	out	0x3e, r25	; 62
    f9c2:	0f be       	out	0x3f, r0	; 63
    f9c4:	8d bf       	out	0x3d, r24	; 61
    f9c6:	81 e0       	ldi	r24, 0x01	; 1
    f9c8:	60 e0       	ldi	r22, 0x00	; 0
    f9ca:	a6 01       	movw	r20, r12
    f9cc:	0e 94 78 a8 	call	0x150f0	; 0x150f0 <uart_print>
	      break;

	 }     
     //[Checksum]
	 uart_printf(1,0,PSTR("F968CFFB"));
    f9d0:	81 e0       	ldi	r24, 0x01	; 1
    f9d2:	60 e0       	ldi	r22, 0x00	; 0
    f9d4:	46 ee       	ldi	r20, 0xE6	; 230
    f9d6:	52 e2       	ldi	r21, 0x22	; 34
    f9d8:	0e 94 a0 a8 	call	0x15140	; 0x15140 <uart_printf>
	 //ETX
	 uart(1, 1,0x02);
    f9dc:	81 e0       	ldi	r24, 0x01	; 1
    f9de:	61 e0       	ldi	r22, 0x01	; 1
    f9e0:	42 e0       	ldi	r20, 0x02	; 2
    f9e2:	0e 94 5b a8 	call	0x150b6	; 0x150b6 <uart>
}
    f9e6:	c0 5c       	subi	r28, 0xC0	; 192
    f9e8:	df 4f       	sbci	r29, 0xFF	; 255
    f9ea:	0f b6       	in	r0, 0x3f	; 63
    f9ec:	f8 94       	cli
    f9ee:	de bf       	out	0x3e, r29	; 62
    f9f0:	0f be       	out	0x3f, r0	; 63
    f9f2:	cd bf       	out	0x3d, r28	; 61
    f9f4:	cf 91       	pop	r28
    f9f6:	df 91       	pop	r29
    f9f8:	0f 91       	pop	r16
    f9fa:	ff 90       	pop	r15
    f9fc:	ef 90       	pop	r14
    f9fe:	df 90       	pop	r13
    fa00:	cf 90       	pop	r12
    fa02:	bf 90       	pop	r11
    fa04:	af 90       	pop	r10
    fa06:	08 95       	ret

0000fa08 <sendMessage98>:
	//if (xFIP_ID>16)xFIP_ID=16;
	sprintf_P(strSend,PSTR("%s%s%s%s98%.2dF968CFFB"),strIFT_ID,strSeqNum,strClientIP,strServerIP,xFIP_ID);
	uart_print(1, 0,strSend);
	uart(1, 1,0x02);
*/
    sprintf_P(strFIP_ID,PSTR("%.2d"),GetPumpID(FIPAddr));
    fa08:	0e 94 84 20 	call	0x4108	; 0x4108 <GetPumpID>
    fa0c:	00 d0       	rcall	.+0      	; 0xfa0e <sendMessage98+0x6>
    fa0e:	00 d0       	rcall	.+0      	; 0xfa10 <sendMessage98+0x8>
    fa10:	00 d0       	rcall	.+0      	; 0xfa12 <sendMessage98+0xa>
    fa12:	ed b7       	in	r30, 0x3d	; 61
    fa14:	fe b7       	in	r31, 0x3e	; 62
    fa16:	31 96       	adiw	r30, 0x01	; 1
    fa18:	29 eb       	ldi	r18, 0xB9	; 185
    fa1a:	37 e0       	ldi	r19, 0x07	; 7
    fa1c:	ad b7       	in	r26, 0x3d	; 61
    fa1e:	be b7       	in	r27, 0x3e	; 62
    fa20:	12 96       	adiw	r26, 0x02	; 2
    fa22:	3c 93       	st	X, r19
    fa24:	2e 93       	st	-X, r18
    fa26:	11 97       	sbiw	r26, 0x01	; 1
    fa28:	21 ee       	ldi	r18, 0xE1	; 225
    fa2a:	32 e2       	ldi	r19, 0x22	; 34
    fa2c:	33 83       	std	Z+3, r19	; 0x03
    fa2e:	22 83       	std	Z+2, r18	; 0x02
    fa30:	84 83       	std	Z+4, r24	; 0x04
    fa32:	15 82       	std	Z+5, r1	; 0x05
    fa34:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	IFTSendMessage(MSG_98);
    fa38:	8d b7       	in	r24, 0x3d	; 61
    fa3a:	9e b7       	in	r25, 0x3e	; 62
    fa3c:	06 96       	adiw	r24, 0x06	; 6
    fa3e:	0f b6       	in	r0, 0x3f	; 63
    fa40:	f8 94       	cli
    fa42:	9e bf       	out	0x3e, r25	; 62
    fa44:	0f be       	out	0x3f, r0	; 63
    fa46:	8d bf       	out	0x3d, r24	; 61
    fa48:	88 e9       	ldi	r24, 0x98	; 152
    fa4a:	0e 94 c0 79 	call	0xf380	; 0xf380 <IFTSendMessage>
	IsBusyMsg11=True;
    fa4e:	81 e0       	ldi	r24, 0x01	; 1
    fa50:	80 93 ad 01 	sts	0x01AD, r24
}
    fa54:	08 95       	ret

0000fa56 <FMenuTicket>:
	    StrResult[2]='0'+Val;
	    StrResult[3]=0;
		}   
}

char FMenuTicket(){
    fa56:	ef 92       	push	r14
    fa58:	0f 93       	push	r16
    fa5a:	1f 93       	push	r17
    fa5c:	df 93       	push	r29
    fa5e:	cf 93       	push	r28
    fa60:	cd b7       	in	r28, 0x3d	; 61
    fa62:	de b7       	in	r29, 0x3e	; 62
    fa64:	64 97       	sbiw	r28, 0x14	; 20
    fa66:	0f b6       	in	r0, 0x3f	; 63
    fa68:	f8 94       	cli
    fa6a:	de bf       	out	0x3e, r29	; 62
    fa6c:	0f be       	out	0x3f, r0	; 63
    fa6e:	cd bf       	out	0x3d, r28	; 61
static unsigned int iLoop=0;
     char uiResult=USER_NONE,KeyPressed,KeyChar;
     char Result=MENU_NONE,lcdteks[20];

    Result=MENU_NONE;   
    switch(stMenuTicket){
    fa70:	80 91 0d 02 	lds	r24, 0x020D
    fa74:	86 30       	cpi	r24, 0x06	; 6
    fa76:	09 f4       	brne	.+2      	; 0xfa7a <FMenuTicket+0x24>
    fa78:	bf c0       	rjmp	.+382    	; 0xfbf8 <FMenuTicket+0x1a2>
    fa7a:	87 30       	cpi	r24, 0x07	; 7
    fa7c:	88 f4       	brcc	.+34     	; 0xfaa0 <FMenuTicket+0x4a>
    fa7e:	82 30       	cpi	r24, 0x02	; 2
    fa80:	e9 f1       	breq	.+122    	; 0xfafc <FMenuTicket+0xa6>
    fa82:	83 30       	cpi	r24, 0x03	; 3
    fa84:	30 f4       	brcc	.+12     	; 0xfa92 <FMenuTicket+0x3c>
    fa86:	88 23       	and	r24, r24
    fa88:	09 f1       	breq	.+66     	; 0xfacc <FMenuTicket+0x76>
    fa8a:	81 30       	cpi	r24, 0x01	; 1
    fa8c:	09 f0       	breq	.+2      	; 0xfa90 <FMenuTicket+0x3a>
    fa8e:	21 c1       	rjmp	.+578    	; 0xfcd2 <FMenuTicket+0x27c>
    fa90:	1f c0       	rjmp	.+62     	; 0xfad0 <FMenuTicket+0x7a>
    fa92:	84 30       	cpi	r24, 0x04	; 4
    fa94:	09 f4       	brne	.+2      	; 0xfa98 <FMenuTicket+0x42>
    fa96:	87 c0       	rjmp	.+270    	; 0xfba6 <FMenuTicket+0x150>
    fa98:	85 30       	cpi	r24, 0x05	; 5
    fa9a:	08 f0       	brcs	.+2      	; 0xfa9e <FMenuTicket+0x48>
    fa9c:	a7 c0       	rjmp	.+334    	; 0xfbec <FMenuTicket+0x196>
    fa9e:	4d c0       	rjmp	.+154    	; 0xfb3a <FMenuTicket+0xe4>
    faa0:	89 30       	cpi	r24, 0x09	; 9
    faa2:	09 f4       	brne	.+2      	; 0xfaa6 <FMenuTicket+0x50>
    faa4:	f4 c0       	rjmp	.+488    	; 0xfc8e <FMenuTicket+0x238>
    faa6:	8a 30       	cpi	r24, 0x0A	; 10
    faa8:	38 f4       	brcc	.+14     	; 0xfab8 <FMenuTicket+0x62>
    faaa:	87 30       	cpi	r24, 0x07	; 7
    faac:	09 f4       	brne	.+2      	; 0xfab0 <FMenuTicket+0x5a>
    faae:	d2 c0       	rjmp	.+420    	; 0xfc54 <FMenuTicket+0x1fe>
    fab0:	88 30       	cpi	r24, 0x08	; 8
    fab2:	09 f0       	breq	.+2      	; 0xfab6 <FMenuTicket+0x60>
    fab4:	0e c1       	rjmp	.+540    	; 0xfcd2 <FMenuTicket+0x27c>
    fab6:	be c0       	rjmp	.+380    	; 0xfc34 <FMenuTicket+0x1de>
    fab8:	8b 30       	cpi	r24, 0x0B	; 11
    faba:	09 f4       	brne	.+2      	; 0xfabe <FMenuTicket+0x68>
    fabc:	ee c0       	rjmp	.+476    	; 0xfc9a <FMenuTicket+0x244>
    fabe:	8b 30       	cpi	r24, 0x0B	; 11
    fac0:	08 f4       	brcc	.+2      	; 0xfac4 <FMenuTicket+0x6e>
    fac2:	01 c1       	rjmp	.+514    	; 0xfcc6 <FMenuTicket+0x270>
    fac4:	8c 30       	cpi	r24, 0x0C	; 12
    fac6:	09 f0       	breq	.+2      	; 0xfaca <FMenuTicket+0x74>
    fac8:	04 c1       	rjmp	.+520    	; 0xfcd2 <FMenuTicket+0x27c>
    faca:	ff c0       	rjmp	.+510    	; 0xfcca <FMenuTicket+0x274>
	case mtInit:
		 stMenuTicket=mtPlatNo;
    facc:	81 e0       	ldi	r24, 0x01	; 1
    face:	79 c0       	rjmp	.+242    	; 0xfbc2 <FMenuTicket+0x16c>
	     break;
    case mtPlatNo:
	     lcd_clear();
    fad0:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
	     lcd_printf(1,1,PSTR("Input Plat No: "));
    fad4:	81 e0       	ldi	r24, 0x01	; 1
    fad6:	61 e0       	ldi	r22, 0x01	; 1
    fad8:	4f e5       	ldi	r20, 0x5F	; 95
    fada:	5c e0       	ldi	r21, 0x0C	; 12
    fadc:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
	     lcd_printf(2,1,PSTR("_"));
    fae0:	82 e0       	ldi	r24, 0x02	; 2
    fae2:	61 e0       	ldi	r22, 0x01	; 1
    fae4:	4d e5       	ldi	r20, 0x5D	; 93
    fae6:	5c e0       	ldi	r21, 0x0C	; 12
    fae8:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
	     lcd_printf(4,1,PSTR("[*]Cancel  [#]Enter "));
    faec:	84 e0       	ldi	r24, 0x04	; 4
    faee:	61 e0       	ldi	r22, 0x01	; 1
    faf0:	48 e4       	ldi	r20, 0x48	; 72
    faf2:	5c e0       	ldi	r21, 0x0C	; 12
    faf4:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		 uiResult=USER_NONE;
		 stMenuTicket=mtInputPlatNo;
    faf8:	82 e0       	ldi	r24, 0x02	; 2
    fafa:	63 c0       	rjmp	.+198    	; 0xfbc2 <FMenuTicket+0x16c>
	     break;
    case mtInputPlatNo:
	     uiResult=UserInput(UI_ALPHANUM_R,2,1,strLicPlate,0,10);
    fafc:	83 e0       	ldi	r24, 0x03	; 3
    fafe:	62 e0       	ldi	r22, 0x02	; 2
    fb00:	41 e0       	ldi	r20, 0x01	; 1
    fb02:	2a ef       	ldi	r18, 0xFA	; 250
    fb04:	38 e0       	ldi	r19, 0x08	; 8
    fb06:	00 e0       	ldi	r16, 0x00	; 0
    fb08:	10 e0       	ldi	r17, 0x00	; 0
    fb0a:	5a e0       	ldi	r21, 0x0A	; 10
    fb0c:	e5 2e       	mov	r14, r21
    fb0e:	0e 94 47 67 	call	0xce8e	; 0xce8e <UserInput>
		 if (uiResult==USER_OK)stMenuTicket=mtOdometer;
    fb12:	83 30       	cpi	r24, 0x03	; 3
    fb14:	09 f4       	brne	.+2      	; 0xfb18 <FMenuTicket+0xc2>
    fb16:	55 c0       	rjmp	.+170    	; 0xfbc2 <FMenuTicket+0x16c>
		 else
		 if (uiResult==USER_CANCEL)stMenuTicket=mtExitMenuTicket;
    fb18:	81 30       	cpi	r24, 0x01	; 1
    fb1a:	09 f4       	brne	.+2      	; 0xfb1e <FMenuTicket+0xc8>
    fb1c:	d4 c0       	rjmp	.+424    	; 0xfcc6 <FMenuTicket+0x270>
         else
		 if (uiResult==USER_ENTRY)lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
    fb1e:	84 30       	cpi	r24, 0x04	; 4
    fb20:	21 f4       	brne	.+8      	; 0xfb2a <FMenuTicket+0xd4>
    fb22:	61 e0       	ldi	r22, 0x01	; 1
    fb24:	43 e3       	ldi	r20, 0x33	; 51
    fb26:	5c e0       	ldi	r21, 0x0C	; 12
    fb28:	5e c0       	rjmp	.+188    	; 0xfbe6 <FMenuTicket+0x190>
		 else
		 if (uiResult==USER_NO_DATA)lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    fb2a:	85 30       	cpi	r24, 0x05	; 5
    fb2c:	09 f0       	breq	.+2      	; 0xfb30 <FMenuTicket+0xda>
    fb2e:	d1 c0       	rjmp	.+418    	; 0xfcd2 <FMenuTicket+0x27c>
    fb30:	84 e0       	ldi	r24, 0x04	; 4
    fb32:	61 e0       	ldi	r22, 0x01	; 1
    fb34:	4e e1       	ldi	r20, 0x1E	; 30
    fb36:	5c e0       	ldi	r21, 0x0C	; 12
    fb38:	56 c0       	rjmp	.+172    	; 0xfbe6 <FMenuTicket+0x190>
	     break;
    case mtOdometer:
	     lcd_clear();
    fb3a:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
		 sprintf_P(lcdteks,PSTR("Plat No: %s "),strLicPlate);
    fb3e:	00 d0       	rcall	.+0      	; 0xfb40 <FMenuTicket+0xea>
    fb40:	00 d0       	rcall	.+0      	; 0xfb42 <FMenuTicket+0xec>
    fb42:	00 d0       	rcall	.+0      	; 0xfb44 <FMenuTicket+0xee>
    fb44:	ed b7       	in	r30, 0x3d	; 61
    fb46:	fe b7       	in	r31, 0x3e	; 62
    fb48:	31 96       	adiw	r30, 0x01	; 1
    fb4a:	8e 01       	movw	r16, r28
    fb4c:	0f 5f       	subi	r16, 0xFF	; 255
    fb4e:	1f 4f       	sbci	r17, 0xFF	; 255
    fb50:	ad b7       	in	r26, 0x3d	; 61
    fb52:	be b7       	in	r27, 0x3e	; 62
    fb54:	12 96       	adiw	r26, 0x02	; 2
    fb56:	1c 93       	st	X, r17
    fb58:	0e 93       	st	-X, r16
    fb5a:	11 97       	sbiw	r26, 0x01	; 1
    fb5c:	81 e1       	ldi	r24, 0x11	; 17
    fb5e:	9c e0       	ldi	r25, 0x0C	; 12
    fb60:	93 83       	std	Z+3, r25	; 0x03
    fb62:	82 83       	std	Z+2, r24	; 0x02
    fb64:	8a ef       	ldi	r24, 0xFA	; 250
    fb66:	98 e0       	ldi	r25, 0x08	; 8
    fb68:	95 83       	std	Z+5, r25	; 0x05
    fb6a:	84 83       	std	Z+4, r24	; 0x04
    fb6c:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	     lcd_print(1,1,lcdteks);
    fb70:	8d b7       	in	r24, 0x3d	; 61
    fb72:	9e b7       	in	r25, 0x3e	; 62
    fb74:	06 96       	adiw	r24, 0x06	; 6
    fb76:	0f b6       	in	r0, 0x3f	; 63
    fb78:	f8 94       	cli
    fb7a:	9e bf       	out	0x3e, r25	; 62
    fb7c:	0f be       	out	0x3f, r0	; 63
    fb7e:	8d bf       	out	0x3d, r24	; 61
    fb80:	81 e0       	ldi	r24, 0x01	; 1
    fb82:	61 e0       	ldi	r22, 0x01	; 1
    fb84:	a8 01       	movw	r20, r16
    fb86:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
	     lcd_printf(2,1,PSTR("Odometer:_ "));
    fb8a:	82 e0       	ldi	r24, 0x02	; 2
    fb8c:	61 e0       	ldi	r22, 0x01	; 1
    fb8e:	45 e0       	ldi	r20, 0x05	; 5
    fb90:	5c e0       	ldi	r21, 0x0C	; 12
    fb92:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
	     lcd_printf(4,1,PSTR("[*]Cancel  [#]Enter "));
    fb96:	84 e0       	ldi	r24, 0x04	; 4
    fb98:	61 e0       	ldi	r22, 0x01	; 1
    fb9a:	40 ef       	ldi	r20, 0xF0	; 240
    fb9c:	5b e0       	ldi	r21, 0x0B	; 11
    fb9e:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		 uiResult=USER_NONE;
		 stMenuTicket=mtInputOdometer;
    fba2:	84 e0       	ldi	r24, 0x04	; 4
    fba4:	0e c0       	rjmp	.+28     	; 0xfbc2 <FMenuTicket+0x16c>
	     break;
    case mtInputOdometer:
	     uiResult=UserInput(UI_NUMBER_R,2,10,strOdometer,0,10);
    fba6:	81 e0       	ldi	r24, 0x01	; 1
    fba8:	62 e0       	ldi	r22, 0x02	; 2
    fbaa:	4a e0       	ldi	r20, 0x0A	; 10
    fbac:	23 ec       	ldi	r18, 0xC3	; 195
    fbae:	33 e0       	ldi	r19, 0x03	; 3
    fbb0:	00 e0       	ldi	r16, 0x00	; 0
    fbb2:	10 e0       	ldi	r17, 0x00	; 0
    fbb4:	9a e0       	ldi	r25, 0x0A	; 10
    fbb6:	e9 2e       	mov	r14, r25
    fbb8:	0e 94 47 67 	call	0xce8e	; 0xce8e <UserInput>
		 if (uiResult==USER_OK)stMenuTicket=mtFIP;
    fbbc:	83 30       	cpi	r24, 0x03	; 3
    fbbe:	21 f4       	brne	.+8      	; 0xfbc8 <FMenuTicket+0x172>
    fbc0:	85 e0       	ldi	r24, 0x05	; 5
    fbc2:	80 93 0d 02 	sts	0x020D, r24
    fbc6:	85 c0       	rjmp	.+266    	; 0xfcd2 <FMenuTicket+0x27c>
		 else
		 if (uiResult==USER_CANCEL)stMenuTicket=mtPlatNo;
    fbc8:	81 30       	cpi	r24, 0x01	; 1
    fbca:	d9 f3       	breq	.-10     	; 0xfbc2 <FMenuTicket+0x16c>
		 else
		 if (uiResult==USER_ENTRY)lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
    fbcc:	84 30       	cpi	r24, 0x04	; 4
    fbce:	21 f4       	brne	.+8      	; 0xfbd8 <FMenuTicket+0x182>
    fbd0:	61 e0       	ldi	r22, 0x01	; 1
    fbd2:	4b ed       	ldi	r20, 0xDB	; 219
    fbd4:	5b e0       	ldi	r21, 0x0B	; 11
    fbd6:	07 c0       	rjmp	.+14     	; 0xfbe6 <FMenuTicket+0x190>
		 else
		 if (uiResult==USER_NO_DATA)lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    fbd8:	85 30       	cpi	r24, 0x05	; 5
    fbda:	09 f0       	breq	.+2      	; 0xfbde <FMenuTicket+0x188>
    fbdc:	7a c0       	rjmp	.+244    	; 0xfcd2 <FMenuTicket+0x27c>
    fbde:	84 e0       	ldi	r24, 0x04	; 4
    fbe0:	61 e0       	ldi	r22, 0x01	; 1
    fbe2:	46 ec       	ldi	r20, 0xC6	; 198
    fbe4:	5b e0       	ldi	r21, 0x0B	; 11
    fbe6:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
    fbea:	73 c0       	rjmp	.+230    	; 0xfcd2 <FMenuTicket+0x27c>
	     break;
    case mtFIP:
	     lcd_clear();
    fbec:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
		 _scr_pump();
    fbf0:	0e 94 49 47 	call	0x8e92	; 0x8e92 <_scr_pump>
		 stMenuTicket=mtInputFIP;
    fbf4:	86 e0       	ldi	r24, 0x06	; 6
    fbf6:	e5 cf       	rjmp	.-54     	; 0xfbc2 <FMenuTicket+0x16c>
	     break;
    case mtInputFIP:
	     KeyPressed=_key_scan(1);
    fbf8:	81 e0       	ldi	r24, 0x01	; 1
    fbfa:	0e 94 f6 a5 	call	0x14bec	; 0x14bec <_key_scan>
    fbfe:	18 2f       	mov	r17, r24
		 KeyChar=_key_btn(KeyPressed);
    fc00:	0e 94 57 a5 	call	0x14aae	; 0x14aae <_key_btn>
		 if ((KeyChar>='1')&&(KeyChar<='8')){
    fc04:	81 53       	subi	r24, 0x31	; 49
    fc06:	88 30       	cpi	r24, 0x08	; 8
    fc08:	40 f4       	brcc	.+16     	; 0xfc1a <FMenuTicket+0x1c4>
		     FIP_Used=KeyChar-'0';
    fc0a:	8f 5f       	subi	r24, 0xFF	; 255
    fc0c:	80 93 0a 02 	sts	0x020A, r24
			 zFIP_Used=FIP_Used;
    fc10:	80 93 09 02 	sts	0x0209, r24
		     stMenuTicket=mtSendMsg98;
    fc14:	87 e0       	ldi	r24, 0x07	; 7
    fc16:	80 93 0d 02 	sts	0x020D, r24
		 }
		 if (KeyPressed==_KEY_CANCEL){
    fc1a:	17 3e       	cpi	r17, 0xE7	; 231
    fc1c:	11 f4       	brne	.+4      	; 0xfc22 <FMenuTicket+0x1cc>
             stMenuTicket=mtOdometer;
    fc1e:	83 e0       	ldi	r24, 0x03	; 3
    fc20:	d0 cf       	rjmp	.-96     	; 0xfbc2 <FMenuTicket+0x16c>
		 }else
		 if (KeyPressed==_KEY_ENTER){
    fc22:	17 3b       	cpi	r17, 0xB7	; 183
    fc24:	09 f0       	breq	.+2      	; 0xfc28 <FMenuTicket+0x1d2>
    fc26:	55 c0       	rjmp	.+170    	; 0xfcd2 <FMenuTicket+0x27c>
		     FIP_Used=zFIP_Used;
    fc28:	80 91 09 02 	lds	r24, 0x0209
    fc2c:	80 93 0a 02 	sts	0x020A, r24
             stMenuTicket=mtInitWaitMessage99;
    fc30:	88 e0       	ldi	r24, 0x08	; 8
    fc32:	c7 cf       	rjmp	.-114    	; 0xfbc2 <FMenuTicket+0x16c>
		 }
	     break;	
    case mtInitWaitMessage99:
	     lcd_clear();
    fc34:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
		 lcd_printf(2,1,PSTR("Send Request"));
    fc38:	82 e0       	ldi	r24, 0x02	; 2
    fc3a:	61 e0       	ldi	r22, 0x01	; 1
    fc3c:	49 eb       	ldi	r20, 0xB9	; 185
    fc3e:	5b e0       	ldi	r21, 0x0B	; 11
    fc40:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		 lcd_printf(3,1,PSTR("Proses"));
    fc44:	83 e0       	ldi	r24, 0x03	; 3
    fc46:	61 e0       	ldi	r22, 0x01	; 1
    fc48:	42 eb       	ldi	r20, 0xB2	; 178
    fc4a:	5b e0       	ldi	r21, 0x0B	; 11
    fc4c:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
         stMenuTicket=mtSendMsg98;
    fc50:	87 e0       	ldi	r24, 0x07	; 7
    fc52:	b7 cf       	rjmp	.-146    	; 0xfbc2 <FMenuTicket+0x16c>
	     break;
    case mtSendMsg98:
	     iPos=0;
    fc54:	10 92 0c 02 	sts	0x020C, r1
		 iSend=0;
    fc58:	10 92 0b 02 	sts	0x020B, r1
		 IsMessage99=False;
    fc5c:	10 92 9f 01 	sts	0x019F, r1
		 TimSend=0;
    fc60:	10 92 78 0c 	sts	0x0C78, r1
		 iLoop=0;
    fc64:	10 92 08 02 	sts	0x0208, r1
    fc68:	10 92 07 02 	sts	0x0207, r1
		 if (IFType==IT_SLAVE)sendMessage98(FIP_Used);
    fc6c:	80 91 00 01 	lds	r24, 0x0100
    fc70:	81 30       	cpi	r24, 0x01	; 1
    fc72:	29 f4       	brne	.+10     	; 0xfc7e <FMenuTicket+0x228>
    fc74:	80 91 0a 02 	lds	r24, 0x020A
    fc78:	0e 94 04 7d 	call	0xfa08	; 0xfa08 <sendMessage98>
    fc7c:	24 c0       	rjmp	.+72     	; 0xfcc6 <FMenuTicket+0x270>
		 else 
		 if (IFType==IT_STANDALONE)PrintStandalone(FIP_Used,False);
    fc7e:	82 30       	cpi	r24, 0x02	; 2
    fc80:	11 f5       	brne	.+68     	; 0xfcc6 <FMenuTicket+0x270>
    fc82:	80 91 0a 02 	lds	r24, 0x020A
    fc86:	60 e0       	ldi	r22, 0x00	; 0
    fc88:	0e 94 c5 22 	call	0x458a	; 0x458a <PrintStandalone>
    fc8c:	1c c0       	rjmp	.+56     	; 0xfcc6 <FMenuTicket+0x270>
	                     stMenuTicket=mtSendMsg98;
				  }
			 }
		 }
		 */
		 if (IsMessage99==True){ 
    fc8e:	80 91 9f 01 	lds	r24, 0x019F
    fc92:	81 30       	cpi	r24, 0x01	; 1
    fc94:	f1 f4       	brne	.+60     	; 0xfcd2 <FMenuTicket+0x27c>
		    stMenuTicket=mtMessage99Received;
    fc96:	8a e0       	ldi	r24, 0x0A	; 10
    fc98:	94 cf       	rjmp	.-216    	; 0xfbc2 <FMenuTicket+0x16c>
	     break;
    case mtMessage99Received:
	     stMenuTicket=mtExitMenuTicket;
		 break;
    case mtNoConnection:
	     lcd_clear();
    fc9a:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
		 lcd_printf(2,1,PSTR("Error No Connection"));
    fc9e:	82 e0       	ldi	r24, 0x02	; 2
    fca0:	61 e0       	ldi	r22, 0x01	; 1
    fca2:	4e e9       	ldi	r20, 0x9E	; 158
    fca4:	5b e0       	ldi	r21, 0x0B	; 11
    fca6:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    fcaa:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    fcac:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    fcae:	82 e0       	ldi	r24, 0x02	; 2
    fcb0:	80 93 bc 01 	sts	0x01BC, r24
    fcb4:	80 e2       	ldi	r24, 0x20	; 32
    fcb6:	9e e4       	ldi	r25, 0x4E	; 78
    fcb8:	29 e1       	ldi	r18, 0x19	; 25
    fcba:	30 e0       	ldi	r19, 0x00	; 0
    fcbc:	f9 01       	movw	r30, r18
    fcbe:	31 97       	sbiw	r30, 0x01	; 1
    fcc0:	f1 f7       	brne	.-4      	; 0xfcbe <FMenuTicket+0x268>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    fcc2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    fcc4:	d9 f7       	brne	.-10     	; 0xfcbc <FMenuTicket+0x266>
    case mtNoConnection:
	     lcd_clear();
		 lcd_printf(2,1,PSTR("Error No Connection"));
		 system_beep(2);
		 _delay_ms(2000);
         stMenuTicket=mtExitMenuTicket;
    fcc6:	8c e0       	ldi	r24, 0x0C	; 12
    fcc8:	7c cf       	rjmp	.-264    	; 0xfbc2 <FMenuTicket+0x16c>
	     break;
    case mtExitMenuTicket:
	     Result=MENU_DONE;
	     stMenuTicket=mtInit;
    fcca:	10 92 0d 02 	sts	0x020D, r1
    fcce:	81 e0       	ldi	r24, 0x01	; 1
    fcd0:	01 c0       	rjmp	.+2      	; 0xfcd4 <FMenuTicket+0x27e>
    fcd2:	80 e0       	ldi	r24, 0x00	; 0
	     break;
	}
  return Result;
}
    fcd4:	64 96       	adiw	r28, 0x14	; 20
    fcd6:	0f b6       	in	r0, 0x3f	; 63
    fcd8:	f8 94       	cli
    fcda:	de bf       	out	0x3e, r29	; 62
    fcdc:	0f be       	out	0x3f, r0	; 63
    fcde:	cd bf       	out	0x3d, r28	; 61
    fce0:	cf 91       	pop	r28
    fce2:	df 91       	pop	r29
    fce4:	1f 91       	pop	r17
    fce6:	0f 91       	pop	r16
    fce8:	ef 90       	pop	r14
    fcea:	08 95       	ret

0000fcec <sendMessage94>:
	sprintf_P(strSend,PSTR("E9445512"));
    //uart_print(0, 0,strSend);
    uart_print(1, 0,strSend);
	uart(1, 1,0x02);
	*/
	IFTSendMessage(MSG_94);
    fcec:	84 e9       	ldi	r24, 0x94	; 148
    fcee:	0e 94 c0 79 	call	0xf380	; 0xf380 <IFTSendMessage>
}
    fcf2:	08 95       	ret

0000fcf4 <sendMessage92>:
	sprintf_P(strSend,PSTR("E9445512"));
    //uart_print(0, 0,strSend);
    uart_print(1, 0,strSend);
	uart(1, 1,0x02);
	*/
	IFTSendMessage(MSG_92);
    fcf4:	82 e9       	ldi	r24, 0x92	; 146
    fcf6:	0e 94 c0 79 	call	0xf380	; 0xf380 <IFTSendMessage>
}
    fcfa:	08 95       	ret

0000fcfc <sendMessage90>:
    uart_print(1, 0,strSend);
	sprintf_P(strSend,PSTR("E9445512"));
    uart_print(1, 0,strSend);
	uart(1, 1,0x02);
	*/
	IFTSendMessage(MSG_90);
    fcfc:	80 e9       	ldi	r24, 0x90	; 144
    fcfe:	0e 94 c0 79 	call	0xf380	; 0xf380 <IFTSendMessage>
}
    fd02:	08 95       	ret

0000fd04 <FMenuEDCTransaction>:
	      break;
	 }
	 return Result;
}

char FMenuEDCTransaction(){
    fd04:	0f 93       	push	r16
    fd06:	1f 93       	push	r17
static char FIP_Used=0;
       char lcdteks[20],Result=MENU_NONE;
       char KeyPressed=0,KeyChar,FIPResult;

     Result=MENU_NONE;
	 switch(stEtransaction){
    fd08:	80 91 62 02 	lds	r24, 0x0262
    fd0c:	85 30       	cpi	r24, 0x05	; 5
    fd0e:	09 f4       	brne	.+2      	; 0xfd12 <FMenuEDCTransaction+0xe>
    fd10:	96 c0       	rjmp	.+300    	; 0xfe3e <FMenuEDCTransaction+0x13a>
    fd12:	86 30       	cpi	r24, 0x06	; 6
    fd14:	90 f4       	brcc	.+36     	; 0xfd3a <FMenuEDCTransaction+0x36>
    fd16:	82 30       	cpi	r24, 0x02	; 2
    fd18:	09 f4       	brne	.+2      	; 0xfd1c <FMenuEDCTransaction+0x18>
    fd1a:	52 c0       	rjmp	.+164    	; 0xfdc0 <FMenuEDCTransaction+0xbc>
    fd1c:	83 30       	cpi	r24, 0x03	; 3
    fd1e:	30 f4       	brcc	.+12     	; 0xfd2c <FMenuEDCTransaction+0x28>
    fd20:	88 23       	and	r24, r24
    fd22:	f1 f0       	breq	.+60     	; 0xfd60 <FMenuEDCTransaction+0x5c>
    fd24:	81 30       	cpi	r24, 0x01	; 1
    fd26:	09 f0       	breq	.+2      	; 0xfd2a <FMenuEDCTransaction+0x26>
    fd28:	d2 c0       	rjmp	.+420    	; 0xfece <FMenuEDCTransaction+0x1ca>
    fd2a:	36 c0       	rjmp	.+108    	; 0xfd98 <FMenuEDCTransaction+0x94>
    fd2c:	83 30       	cpi	r24, 0x03	; 3
    fd2e:	09 f4       	brne	.+2      	; 0xfd32 <FMenuEDCTransaction+0x2e>
    fd30:	57 c0       	rjmp	.+174    	; 0xfde0 <FMenuEDCTransaction+0xdc>
    fd32:	84 30       	cpi	r24, 0x04	; 4
    fd34:	09 f0       	breq	.+2      	; 0xfd38 <FMenuEDCTransaction+0x34>
    fd36:	cb c0       	rjmp	.+406    	; 0xfece <FMenuEDCTransaction+0x1ca>
    fd38:	7c c0       	rjmp	.+248    	; 0xfe32 <FMenuEDCTransaction+0x12e>
    fd3a:	88 30       	cpi	r24, 0x08	; 8
    fd3c:	09 f4       	brne	.+2      	; 0xfd40 <FMenuEDCTransaction+0x3c>
    fd3e:	b7 c0       	rjmp	.+366    	; 0xfeae <FMenuEDCTransaction+0x1aa>
    fd40:	89 30       	cpi	r24, 0x09	; 9
    fd42:	38 f4       	brcc	.+14     	; 0xfd52 <FMenuEDCTransaction+0x4e>
    fd44:	86 30       	cpi	r24, 0x06	; 6
    fd46:	09 f4       	brne	.+2      	; 0xfd4a <FMenuEDCTransaction+0x46>
    fd48:	8d c0       	rjmp	.+282    	; 0xfe64 <FMenuEDCTransaction+0x160>
    fd4a:	87 30       	cpi	r24, 0x07	; 7
    fd4c:	09 f0       	breq	.+2      	; 0xfd50 <FMenuEDCTransaction+0x4c>
    fd4e:	bf c0       	rjmp	.+382    	; 0xfece <FMenuEDCTransaction+0x1ca>
    fd50:	8b c0       	rjmp	.+278    	; 0xfe68 <FMenuEDCTransaction+0x164>
    fd52:	89 30       	cpi	r24, 0x09	; 9
    fd54:	09 f4       	brne	.+2      	; 0xfd58 <FMenuEDCTransaction+0x54>
    fd56:	b1 c0       	rjmp	.+354    	; 0xfeba <FMenuEDCTransaction+0x1b6>
    fd58:	8a 30       	cpi	r24, 0x0A	; 10
    fd5a:	09 f0       	breq	.+2      	; 0xfd5e <FMenuEDCTransaction+0x5a>
    fd5c:	b8 c0       	rjmp	.+368    	; 0xfece <FMenuEDCTransaction+0x1ca>
    fd5e:	b3 c0       	rjmp	.+358    	; 0xfec6 <FMenuEDCTransaction+0x1c2>
	 case etInit:
	      lcd_clear();
    fd60:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
		  lcd_printf(1,1,PSTR("Select Card Type"));
    fd64:	81 e0       	ldi	r24, 0x01	; 1
    fd66:	61 e0       	ldi	r22, 0x01	; 1
    fd68:	44 e6       	ldi	r20, 0x64	; 100
    fd6a:	5c e1       	ldi	r21, 0x1C	; 28
    fd6c:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
          lcd_printf(1,1,PSTR("1.Debit/Flash Card  "));
    fd70:	81 e0       	ldi	r24, 0x01	; 1
    fd72:	61 e0       	ldi	r22, 0x01	; 1
    fd74:	4f e4       	ldi	r20, 0x4F	; 79
    fd76:	5c e1       	ldi	r21, 0x1C	; 28
    fd78:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  lcd_printf(2,1,PSTR("2.Credit Card       "));
    fd7c:	82 e0       	ldi	r24, 0x02	; 2
    fd7e:	61 e0       	ldi	r22, 0x01	; 1
    fd80:	4a e3       	ldi	r20, 0x3A	; 58
    fd82:	5c e1       	ldi	r21, 0x1C	; 28
    fd84:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
	      lcd_printf(4,1,PSTR("[*]Back             "));
    fd88:	84 e0       	ldi	r24, 0x04	; 4
    fd8a:	61 e0       	ldi	r22, 0x01	; 1
    fd8c:	45 e2       	ldi	r20, 0x25	; 37
    fd8e:	5c e1       	ldi	r21, 0x1C	; 28
    fd90:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  stEtransaction=etInputEDC;
    fd94:	81 e0       	ldi	r24, 0x01	; 1
    fd96:	63 c0       	rjmp	.+198    	; 0xfe5e <FMenuEDCTransaction+0x15a>
	      break;
     case etInputEDC:
	 	  KeyPressed=_key_scan(1);
    fd98:	81 e0       	ldi	r24, 0x01	; 1
    fd9a:	0e 94 f6 a5 	call	0x14bec	; 0x14bec <_key_scan>
    fd9e:	08 2f       	mov	r16, r24
		  KeyChar=_key_btn(KeyPressed);
    fda0:	0e 94 57 a5 	call	0x14aae	; 0x14aae <_key_btn>
    fda4:	98 2f       	mov	r25, r24
		  if ((KeyChar>='1')&&(KeyChar<='2')){
    fda6:	81 53       	subi	r24, 0x31	; 49
    fda8:	82 30       	cpi	r24, 0x02	; 2
    fdaa:	30 f4       	brcc	.+12     	; 0xfdb8 <FMenuEDCTransaction+0xb4>
		       EDCType=KeyChar-'0';
    fdac:	90 53       	subi	r25, 0x30	; 48
    fdae:	90 93 0b 08 	sts	0x080B, r25
		       stEtransaction=etSelectFIP;
    fdb2:	82 e0       	ldi	r24, 0x02	; 2
    fdb4:	80 93 62 02 	sts	0x0262, r24
		     }
		  if (KeyPressed==_KEY_CANCEL)stEtransaction=etExitEDCTransaction;
    fdb8:	07 3e       	cpi	r16, 0xE7	; 231
    fdba:	09 f0       	breq	.+2      	; 0xfdbe <FMenuEDCTransaction+0xba>
    fdbc:	88 c0       	rjmp	.+272    	; 0xfece <FMenuEDCTransaction+0x1ca>
    fdbe:	81 c0       	rjmp	.+258    	; 0xfec2 <FMenuEDCTransaction+0x1be>
	      break;
	 case etSelectFIP:
	      FIPResult=menu_FIP(FIP_Used,strFIP_ID);
    fdc0:	80 e0       	ldi	r24, 0x00	; 0
    fdc2:	90 e0       	ldi	r25, 0x00	; 0
    fdc4:	69 eb       	ldi	r22, 0xB9	; 185
    fdc6:	77 e0       	ldi	r23, 0x07	; 7
    fdc8:	0e 94 af 54 	call	0xa95e	; 0xa95e <menu_FIP>
		  if (FIPResult==FIP_DONE)stEtransaction=etInitMessage90;
    fdcc:	88 23       	and	r24, r24
    fdce:	11 f4       	brne	.+4      	; 0xfdd4 <FMenuEDCTransaction+0xd0>
    fdd0:	83 e0       	ldi	r24, 0x03	; 3
    fdd2:	45 c0       	rjmp	.+138    	; 0xfe5e <FMenuEDCTransaction+0x15a>
		  else
		  if (FIPResult==FIP_CANCEL)stEtransaction=etInit;
    fdd4:	82 30       	cpi	r24, 0x02	; 2
    fdd6:	09 f0       	breq	.+2      	; 0xfdda <FMenuEDCTransaction+0xd6>
    fdd8:	7a c0       	rjmp	.+244    	; 0xfece <FMenuEDCTransaction+0x1ca>
    fdda:	10 92 62 02 	sts	0x0262, r1
    fdde:	77 c0       	rjmp	.+238    	; 0xfece <FMenuEDCTransaction+0x1ca>
    fde0:	ee e8       	ldi	r30, 0x8E	; 142
    fde2:	fc e0       	ldi	r31, 0x0C	; 12
}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
	     strMemory[i]=data;
    fde4:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    fde6:	8c e0       	ldi	r24, 0x0C	; 12
    fde8:	e3 3a       	cpi	r30, 0xA3	; 163
    fdea:	f8 07       	cpc	r31, r24
    fdec:	d9 f7       	brne	.-10     	; 0xfde4 <FMenuEDCTransaction+0xe0>
		  else
		  if (FIPResult==FIP_CANCEL)stEtransaction=etInit;
	      break;
     case etInitMessage90:
	      FillChar(strRef1,sizeof(strRef1),0);
	      if (EDCType==1){
    fdee:	80 91 0b 08 	lds	r24, 0x080B
    fdf2:	81 30       	cpi	r24, 0x01	; 1
    fdf4:	19 f4       	brne	.+6      	; 0xfdfc <FMenuEDCTransaction+0xf8>
		      AddSpaceLag(strRef1,20);
    fdf6:	cf 01       	movw	r24, r30
    fdf8:	45 97       	sbiw	r24, 0x15	; 21
    fdfa:	16 c0       	rjmp	.+44     	; 0xfe28 <FMenuEDCTransaction+0x124>
          }
		  else
	      if (EDCType==2){
    fdfc:	82 30       	cpi	r24, 0x02	; 2
    fdfe:	b9 f4       	brne	.+46     	; 0xfe2e <FMenuEDCTransaction+0x12a>
		      sprintf_P(strRef1,PSTR("CREDITCARD"));
    fe00:	00 d0       	rcall	.+0      	; 0xfe02 <FMenuEDCTransaction+0xfe>
    fe02:	00 d0       	rcall	.+0      	; 0xfe04 <FMenuEDCTransaction+0x100>
    fe04:	8f 01       	movw	r16, r30
    fe06:	05 51       	subi	r16, 0x15	; 21
    fe08:	10 40       	sbci	r17, 0x00	; 0
    fe0a:	ed b7       	in	r30, 0x3d	; 61
    fe0c:	fe b7       	in	r31, 0x3e	; 62
    fe0e:	12 83       	std	Z+2, r17	; 0x02
    fe10:	01 83       	std	Z+1, r16	; 0x01
    fe12:	8a e1       	ldi	r24, 0x1A	; 26
    fe14:	9c e1       	ldi	r25, 0x1C	; 28
    fe16:	94 83       	std	Z+4, r25	; 0x04
    fe18:	83 83       	std	Z+3, r24	; 0x03
    fe1a:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
			  AddSpaceLag(strRef1,20);
    fe1e:	0f 90       	pop	r0
    fe20:	0f 90       	pop	r0
    fe22:	0f 90       	pop	r0
    fe24:	0f 90       	pop	r0
    fe26:	c8 01       	movw	r24, r16
    fe28:	64 e1       	ldi	r22, 0x14	; 20
    fe2a:	0e 94 64 2f 	call	0x5ec8	; 0x5ec8 <AddSpaceLag>
		  }	 
	      stEtransaction=etSendingMessage90;
    fe2e:	84 e0       	ldi	r24, 0x04	; 4
    fe30:	16 c0       	rjmp	.+44     	; 0xfe5e <FMenuEDCTransaction+0x15a>
	      break;
     case etSendingMessage90:
          sendMessage90();
    fe32:	0e 94 7e 7e 	call	0xfcfc	; 0xfcfc <sendMessage90>
		  TimSend=0;
    fe36:	10 92 78 0c 	sts	0x0C78, r1
          stEtransaction=etWaitReply;
    fe3a:	85 e0       	ldi	r24, 0x05	; 5
    fe3c:	10 c0       	rjmp	.+32     	; 0xfe5e <FMenuEDCTransaction+0x15a>
	      break;
     case etWaitReply:
	      if (TimSend>TIM_SEND*2)stEtransaction=etNoConnection;
    fe3e:	80 91 78 0c 	lds	r24, 0x0C78
    fe42:	85 31       	cpi	r24, 0x15	; 21
    fe44:	18 f0       	brcs	.+6      	; 0xfe4c <FMenuEDCTransaction+0x148>
    fe46:	88 e0       	ldi	r24, 0x08	; 8
    fe48:	80 93 62 02 	sts	0x0262, r24
		  if ((IsMessage91==True)||(IsMessage09==True))
    fe4c:	80 91 a7 01 	lds	r24, 0x01A7
    fe50:	81 30       	cpi	r24, 0x01	; 1
    fe52:	21 f0       	breq	.+8      	; 0xfe5c <FMenuEDCTransaction+0x158>
    fe54:	80 91 a3 01 	lds	r24, 0x01A3
    fe58:	81 30       	cpi	r24, 0x01	; 1
    fe5a:	c9 f5       	brne	.+114    	; 0xfece <FMenuEDCTransaction+0x1ca>
		       stEtransaction=etSuccesEDC;
    fe5c:	86 e0       	ldi	r24, 0x06	; 6
    fe5e:	80 93 62 02 	sts	0x0262, r24
    fe62:	35 c0       	rjmp	.+106    	; 0xfece <FMenuEDCTransaction+0x1ca>
	      break;
     case etSuccesEDC:
	      stEtransaction=etDisplayFreeMessage;
    fe64:	87 e0       	ldi	r24, 0x07	; 7
    fe66:	fb cf       	rjmp	.-10     	; 0xfe5e <FMenuEDCTransaction+0x15a>
	      break;
     case etDisplayFreeMessage:
	      if (IsMessage09==True){
    fe68:	80 91 a3 01 	lds	r24, 0x01A3
    fe6c:	81 30       	cpi	r24, 0x01	; 1
    fe6e:	19 f5       	brne	.+70     	; 0xfeb6 <FMenuEDCTransaction+0x1b2>
		      IsMessage09=False;
    fe70:	10 92 a3 01 	sts	0x01A3, r1
	          procMessage09();
    fe74:	0e 94 c7 17 	call	0x2f8e	; 0x2f8e <procMessage09>
		      lcd_clear();
    fe78:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
		      lcd_print(1,1,strFreeMessageLine1);
    fe7c:	81 e0       	ldi	r24, 0x01	; 1
    fe7e:	61 e0       	ldi	r22, 0x01	; 1
    fe80:	42 e9       	ldi	r20, 0x92	; 146
    fe82:	58 e0       	ldi	r21, 0x08	; 8
    fe84:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
		      lcd_print(2,1,strFreeMessageLine2);
    fe88:	82 e0       	ldi	r24, 0x02	; 2
    fe8a:	61 e0       	ldi	r22, 0x01	; 1
    fe8c:	43 ea       	ldi	r20, 0xA3	; 163
    fe8e:	57 e0       	ldi	r21, 0x07	; 7
    fe90:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
		      lcd_print(3,1,strFreeMessageLine3);
    fe94:	83 e0       	ldi	r24, 0x03	; 3
    fe96:	61 e0       	ldi	r22, 0x01	; 1
    fe98:	4c e1       	ldi	r20, 0x1C	; 28
    fe9a:	58 e0       	ldi	r21, 0x08	; 8
    fe9c:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
			  lcd_print(4,1,strFreeMessageLine4);
    fea0:	84 e0       	ldi	r24, 0x04	; 4
    fea2:	61 e0       	ldi	r22, 0x01	; 1
    fea4:	46 ed       	ldi	r20, 0xD6	; 214
    fea6:	5b e0       	ldi	r21, 0x0B	; 11
    fea8:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
    feac:	02 c0       	rjmp	.+4      	; 0xfeb2 <FMenuEDCTransaction+0x1ae>
			  TimDisplay=0;
			  }
		  stEtransaction=etDelayExit;
	      break;
     case etNoConnection:
	      lcd_clear();
    feae:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
		  TimDisplay=0;
    feb2:	10 92 92 01 	sts	0x0192, r1
		  stEtransaction=etDelayExit;
    feb6:	89 e0       	ldi	r24, 0x09	; 9
    feb8:	d2 cf       	rjmp	.-92     	; 0xfe5e <FMenuEDCTransaction+0x15a>
	      break;
     case etDelayExit:
	      if (TimDisplay>8)stEtransaction=etExitEDCTransaction;
    feba:	80 91 92 01 	lds	r24, 0x0192
    febe:	89 30       	cpi	r24, 0x09	; 9
    fec0:	30 f0       	brcs	.+12     	; 0xfece <FMenuEDCTransaction+0x1ca>
    fec2:	8a e0       	ldi	r24, 0x0A	; 10
    fec4:	cc cf       	rjmp	.-104    	; 0xfe5e <FMenuEDCTransaction+0x15a>
	      break;
     case etExitEDCTransaction:
	      stEtransaction=etInit;
    fec6:	10 92 62 02 	sts	0x0262, r1
    feca:	81 e0       	ldi	r24, 0x01	; 1
    fecc:	01 c0       	rjmp	.+2      	; 0xfed0 <FMenuEDCTransaction+0x1cc>
    fece:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
	      break;
	 }
   return Result;
}
    fed0:	1f 91       	pop	r17
    fed2:	0f 91       	pop	r16
    fed4:	08 95       	ret

0000fed6 <sendMessage58>:
	CardType=0;
	sprintf_P(strSend,PSTR("%dF0000000E123456FFFFF%sE9445512"),CardType,strOdometer);
    uart_print(1, 0,strSend);
	uart(1, 1,0x02);
	*/
	IFTSendMessage(MSG_58);
    fed6:	88 e5       	ldi	r24, 0x58	; 88
    fed8:	0e 94 c0 79 	call	0xf380	; 0xf380 <IFTSendMessage>
}
    fedc:	08 95       	ret

0000fede <sendMessage56>:
    uart_print(1, 0,strSend);	

	uart_printf(1,0,PSTR("AF968CFFB"));
	uart(1, 1,0x02);
	*/
	IFTSendMessage(MSG_56);
    fede:	86 e5       	ldi	r24, 0x56	; 86
    fee0:	0e 94 c0 79 	call	0xf380	; 0xf380 <IFTSendMessage>
}
    fee4:	08 95       	ret

0000fee6 <FMenuLocalAccount>:
	 __key_lgtcnt = 0; 
	 PORTG=PORTG&0b11111101;
}


char FMenuLocalAccount(){
    fee6:	6f 92       	push	r6
    fee8:	7f 92       	push	r7
    feea:	8f 92       	push	r8
    feec:	9f 92       	push	r9
    feee:	af 92       	push	r10
    fef0:	bf 92       	push	r11
    fef2:	cf 92       	push	r12
    fef4:	df 92       	push	r13
    fef6:	ef 92       	push	r14
    fef8:	ff 92       	push	r15
    fefa:	0f 93       	push	r16
    fefc:	1f 93       	push	r17
    fefe:	df 93       	push	r29
    ff00:	cf 93       	push	r28
    ff02:	cd b7       	in	r28, 0x3d	; 61
    ff04:	de b7       	in	r29, 0x3e	; 62
    ff06:	e4 97       	sbiw	r28, 0x34	; 52
    ff08:	0f b6       	in	r0, 0x3f	; 63
    ff0a:	f8 94       	cli
    ff0c:	de bf       	out	0x3e, r29	; 62
    ff0e:	0f be       	out	0x3f, r0	; 63
    ff10:	cd bf       	out	0x3d, r28	; 61
       char ProductName[11],strName[21];//,strPumpL[3],strPumpR[3];
       char Result;

	   Result=MENU_NONE;
	                                 //|   Local Account   |          
	       switch(stLocalAccount){   //|ID: ACD12345       |
    ff12:	80 91 5b 01 	lds	r24, 0x015B
    ff16:	90 e0       	ldi	r25, 0x00	; 0
    ff18:	fc 01       	movw	r30, r24
    ff1a:	31 97       	sbiw	r30, 0x01	; 1
    ff1c:	ef 31       	cpi	r30, 0x1F	; 31
    ff1e:	f1 05       	cpc	r31, r1
    ff20:	10 f0       	brcs	.+4      	; 0xff26 <FMenuLocalAccount+0x40>
    ff22:	0c 94 12 88 	jmp	0x11024	; 0x11024 <FMenuLocalAccount+0x113e>
    ff26:	e0 57       	subi	r30, 0x70	; 112
    ff28:	ff 4f       	sbci	r31, 0xFF	; 255
    ff2a:	ee 0f       	add	r30, r30
    ff2c:	ff 1f       	adc	r31, r31
    ff2e:	05 90       	lpm	r0, Z+
    ff30:	f4 91       	lpm	r31, Z+
    ff32:	e0 2d       	mov	r30, r0
    ff34:	09 94       	ijmp
	      }
     }      
}

void BackLightTrig(){    
     __key_light = 1; 
    ff36:	81 e0       	ldi	r24, 0x01	; 1
    ff38:	80 93 ae 02 	sts	0x02AE, r24
	 __key_lgtcnt = 0; 
    ff3c:	10 92 af 02 	sts	0x02AF, r1
	 PORTG=PORTG&0b11111101;
    ff40:	80 91 65 00 	lds	r24, 0x0065
    ff44:	8d 7f       	andi	r24, 0xFD	; 253
    ff46:	80 93 65 00 	sts	0x0065, r24
    ff4a:	20 e0       	ldi	r18, 0x00	; 0
    ff4c:	30 e0       	ldi	r19, 0x00	; 0


void ViewCardID(){//+12345678 -->12345678
     char i;
	 for(i=0;i<8;i++){         //00000000000012345678
		strCardID[i]=strRFID[i];
    ff4e:	f9 01       	movw	r30, r18
    ff50:	e7 57       	subi	r30, 0x77	; 119
    ff52:	f4 4f       	sbci	r31, 0xF4	; 244
    ff54:	d9 01       	movw	r26, r18
    ff56:	af 5a       	subi	r26, 0xAF	; 175
    ff58:	b3 4f       	sbci	r27, 0xF3	; 243
    ff5a:	8c 91       	ld	r24, X
    ff5c:	80 83       	st	Z, r24
    ff5e:	2f 5f       	subi	r18, 0xFF	; 255
    ff60:	3f 4f       	sbci	r19, 0xFF	; 255



void ViewCardID(){//+12345678 -->12345678
     char i;
	 for(i=0;i<8;i++){         //00000000000012345678
    ff62:	28 30       	cpi	r18, 0x08	; 8
    ff64:	31 05       	cpc	r19, r1
    ff66:	99 f7       	brne	.-26     	; 0xff4e <FMenuLocalAccount+0x68>
		strCardID[i]=strRFID[i];
	 }strCardID[8]=0;     
    ff68:	10 92 91 0b 	sts	0x0B91, r1
	       switch(stLocalAccount){   //|ID: ACD12345       |
	       case laInit:              //|Process ...        |
		        //Process RFID Data  //|                   |
				//UpdateCardID();
                BackLightTrig();ViewCardID();
	            lcd_clear();
    ff6c:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
	            lcd_printf(1,1,PSTR("   Local Account   "));
    ff70:	81 e0       	ldi	r24, 0x01	; 1
    ff72:	61 e0       	ldi	r22, 0x01	; 1
    ff74:	4d ec       	ldi	r20, 0xCD	; 205
    ff76:	52 e2       	ldi	r21, 0x22	; 34
    ff78:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
	            sprintf_P(lcdteks,PSTR("ID:%s"),strCardID);lcd_print(2,1,lcdteks);
    ff7c:	00 d0       	rcall	.+0      	; 0xff7e <FMenuLocalAccount+0x98>
    ff7e:	00 d0       	rcall	.+0      	; 0xff80 <FMenuLocalAccount+0x9a>
    ff80:	00 d0       	rcall	.+0      	; 0xff82 <FMenuLocalAccount+0x9c>
    ff82:	ed b7       	in	r30, 0x3d	; 61
    ff84:	fe b7       	in	r31, 0x3e	; 62
    ff86:	31 96       	adiw	r30, 0x01	; 1
    ff88:	8e 01       	movw	r16, r28
    ff8a:	04 5f       	subi	r16, 0xF4	; 244
    ff8c:	1f 4f       	sbci	r17, 0xFF	; 255
    ff8e:	ad b7       	in	r26, 0x3d	; 61
    ff90:	be b7       	in	r27, 0x3e	; 62
    ff92:	12 96       	adiw	r26, 0x02	; 2
    ff94:	1c 93       	st	X, r17
    ff96:	0e 93       	st	-X, r16
    ff98:	11 97       	sbiw	r26, 0x01	; 1
    ff9a:	87 ec       	ldi	r24, 0xC7	; 199
    ff9c:	92 e2       	ldi	r25, 0x22	; 34
    ff9e:	93 83       	std	Z+3, r25	; 0x03
    ffa0:	82 83       	std	Z+2, r24	; 0x02
    ffa2:	89 e8       	ldi	r24, 0x89	; 137
    ffa4:	9b e0       	ldi	r25, 0x0B	; 11
    ffa6:	95 83       	std	Z+5, r25	; 0x05
    ffa8:	84 83       	std	Z+4, r24	; 0x04
    ffaa:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
    ffae:	ed b7       	in	r30, 0x3d	; 61
    ffb0:	fe b7       	in	r31, 0x3e	; 62
    ffb2:	36 96       	adiw	r30, 0x06	; 6
    ffb4:	0f b6       	in	r0, 0x3f	; 63
    ffb6:	f8 94       	cli
    ffb8:	fe bf       	out	0x3e, r31	; 62
    ffba:	0f be       	out	0x3f, r0	; 63
    ffbc:	ed bf       	out	0x3d, r30	; 61
    ffbe:	82 e0       	ldi	r24, 0x02	; 2
    ffc0:	61 e0       	ldi	r22, 0x01	; 1
    ffc2:	a8 01       	movw	r20, r16
    ffc4:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
                lcd_printf(3,1,PSTR("Proses"));
    ffc8:	83 e0       	ldi	r24, 0x03	; 3
    ffca:	61 e0       	ldi	r22, 0x01	; 1
    ffcc:	40 ec       	ldi	r20, 0xC0	; 192
    ffce:	52 e2       	ldi	r21, 0x22	; 34
    ffd0:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
				iPos=0;//iLoop=0;
    ffd4:	10 92 96 02 	sts	0x0296, r1
				IsFullAuthorized=False;
    ffd8:	10 92 86 02 	sts	0x0286, r1
		        stLocalAccount=laSendID;
    ffdc:	82 e0       	ldi	r24, 0x02	; 2
    ffde:	0b c0       	rjmp	.+22     	; 0xfff6 <FMenuLocalAccount+0x110>
				break;         
           case laSendID://sendMessage56 
				IsMessage57=False;
    ffe0:	10 92 a5 01 	sts	0x01A5, r1
                sendMessage56();
    ffe4:	0e 94 6f 7f 	call	0xfede	; 0xfede <sendMessage56>
				iWait=0;iPos=0;
    ffe8:	10 92 95 02 	sts	0x0295, r1
    ffec:	10 92 96 02 	sts	0x0296, r1
				//iLoop=0;
				TimSend=0;
    fff0:	10 92 78 0c 	sts	0x0C78, r1
				stLocalAccount=laWaitMessage57;
    fff4:	83 e0       	ldi	r24, 0x03	; 3
    fff6:	80 93 5b 01 	sts	0x015B, r24
    fffa:	0c 94 12 88 	jmp	0x11024	; 0x11024 <FMenuLocalAccount+0x113e>
						 system_beep(2);
						 stLocalAccount=laConTimout;
				}
				*/
				
		        iLoop++;
    fffe:	80 91 84 02 	lds	r24, 0x0284
   10002:	90 91 85 02 	lds	r25, 0x0285
   10006:	01 96       	adiw	r24, 0x01	; 1
   10008:	90 93 85 02 	sts	0x0285, r25
   1000c:	80 93 84 02 	sts	0x0284, r24
				if ((iLoop%MSG_WAIT_TIMOUT)==0){
   10010:	68 e9       	ldi	r22, 0x98	; 152
   10012:	7a e3       	ldi	r23, 0x3A	; 58
   10014:	0e 94 03 aa 	call	0x15406	; 0x15406 <__udivmodhi4>
   10018:	89 2b       	or	r24, r25
   1001a:	e1 f4       	brne	.+56     	; 0x10054 <FMenuLocalAccount+0x16e>
				   if (iPos<5){
   1001c:	60 91 96 02 	lds	r22, 0x0296
   10020:	65 30       	cpi	r22, 0x05	; 5
   10022:	58 f4       	brcc	.+22     	; 0x1003a <FMenuLocalAccount+0x154>
					   lcd_put(3,(8+iPos),'.');
   10024:	68 5f       	subi	r22, 0xF8	; 248
   10026:	83 e0       	ldi	r24, 0x03	; 3
   10028:	4e e2       	ldi	r20, 0x2E	; 46
   1002a:	0e 94 ca a4 	call	0x14994	; 0x14994 <lcd_put>
				       iPos++;
   1002e:	80 91 96 02 	lds	r24, 0x0296
   10032:	8f 5f       	subi	r24, 0xFF	; 255
   10034:	80 93 96 02 	sts	0x0296, r24
   10038:	0d c0       	rjmp	.+26     	; 0x10054 <FMenuLocalAccount+0x16e>
					   }
				   else{
				       iPos=0;
   1003a:	10 92 96 02 	sts	0x0296, r1
					   lcd_printf(3,(9+iPos),PSTR("       "));
   1003e:	83 e0       	ldi	r24, 0x03	; 3
   10040:	69 e0       	ldi	r22, 0x09	; 9
   10042:	48 eb       	ldi	r20, 0xB8	; 184
   10044:	52 e2       	ldi	r21, 0x22	; 34
   10046:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
					   iWait++;
   1004a:	80 91 95 02 	lds	r24, 0x0295
   1004e:	8f 5f       	subi	r24, 0xFF	; 255
   10050:	80 93 95 02 	sts	0x0295, r24
					   }
				}
				if (iWait>3){
   10054:	80 91 95 02 	lds	r24, 0x0295
   10058:	84 30       	cpi	r24, 0x04	; 4
   1005a:	50 f0       	brcs	.+20     	; 0x10070 <FMenuLocalAccount+0x18a>
				    stLocalAccount=laConTimout;
   1005c:	84 e0       	ldi	r24, 0x04	; 4
   1005e:	80 93 5b 01 	sts	0x015B, r24
					TimLocAcc=0;
   10062:	10 92 ba 01 	sts	0x01BA, r1
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   10066:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   10068:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   1006a:	82 e0       	ldi	r24, 0x02	; 2
   1006c:	80 93 bc 01 	sts	0x01BC, r24
				    stLocalAccount=laConTimout;
					TimLocAcc=0;
					system_beep(2);
				    }
                 
				if (IsMessage57==True){
   10070:	80 91 a5 01 	lds	r24, 0x01A5
   10074:	81 30       	cpi	r24, 0x01	; 1
   10076:	09 f0       	breq	.+2      	; 0x1007a <FMenuLocalAccount+0x194>
   10078:	d5 c7       	rjmp	.+4010   	; 0x11024 <FMenuLocalAccount+0x113e>
				    IsMessage57=False;
   1007a:	10 92 a5 01 	sts	0x01A5, r1
				    stLocalAccount=laProcMessage57;
   1007e:	85 e0       	ldi	r24, 0x05	; 5
   10080:	ba cf       	rjmp	.-140    	; 0xfff6 <FMenuLocalAccount+0x110>
					}
		        break;
           case laConTimout:
		        //IsErrorTCPIP=True;
				lcd_printf(3,1,PSTR("Sending Failed      "));
   10082:	83 e0       	ldi	r24, 0x03	; 3
   10084:	61 e0       	ldi	r22, 0x01	; 1
   10086:	43 ea       	ldi	r20, 0xA3	; 163
   10088:	52 e2       	ldi	r21, 0x22	; 34
   1008a:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
				lcd_printf(4,1,PSTR("TCP/IP Error        "));
   1008e:	84 e0       	ldi	r24, 0x04	; 4
   10090:	61 e0       	ldi	r22, 0x01	; 1
   10092:	4e e8       	ldi	r20, 0x8E	; 142
   10094:	52 e2       	ldi	r21, 0x22	; 34
   10096:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
                if (TimLocAcc>2)  stLocalAccount=laExitLocAcc;
   1009a:	80 91 ba 01 	lds	r24, 0x01BA
   1009e:	83 30       	cpi	r24, 0x03	; 3
   100a0:	08 f4       	brcc	.+2      	; 0x100a4 <FMenuLocalAccount+0x1be>
   100a2:	c0 c7       	rjmp	.+3968   	; 0x11024 <FMenuLocalAccount+0x113e>
   100a4:	ad c7       	rjmp	.+3930   	; 0x11000 <FMenuLocalAccount+0x111a>
		        break;
           case laProcMessage57://Process Message
				lcd_printf(3,1,PSTR("Data Received       "));
   100a6:	83 e0       	ldi	r24, 0x03	; 3
   100a8:	61 e0       	ldi	r22, 0x01	; 1
   100aa:	49 e7       	ldi	r20, 0x79	; 121
   100ac:	52 e2       	ldi	r21, 0x22	; 34
   100ae:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
				LocAccStatus=GetLocAccStatus(procMessage57());
   100b2:	0e 94 bc 27 	call	0x4f78	; 0x4f78 <procMessage57>


char GetLocAccStatus(char paramMessage57){
     char Result;
	 Result=LA_NONE;
     if (paramMessage57==MSG57_INVALID)Result=LA_INVALID;
   100b6:	81 30       	cpi	r24, 0x01	; 1
   100b8:	29 f0       	breq	.+10     	; 0x100c4 <FMenuLocalAccount+0x1de>
	 else
     if (paramMessage57==MSG57_VALID)Result=LA_VALID;
   100ba:	82 30       	cpi	r24, 0x02	; 2
   100bc:	19 f0       	breq	.+6      	; 0x100c4 <FMenuLocalAccount+0x1de>
	 else
     if (paramMessage57==MSG57_LIMITED)Result=LA_LIMITED;
   100be:	83 30       	cpi	r24, 0x03	; 3
   100c0:	09 f0       	breq	.+2      	; 0x100c4 <FMenuLocalAccount+0x1de>
   100c2:	80 e0       	ldi	r24, 0x00	; 0
				lcd_printf(4,1,PSTR("TCP/IP Error        "));
                if (TimLocAcc>2)  stLocalAccount=laExitLocAcc;
		        break;
           case laProcMessage57://Process Message
				lcd_printf(3,1,PSTR("Data Received       "));
				LocAccStatus=GetLocAccStatus(procMessage57());
   100c4:	80 93 97 02 	sts	0x0297, r24
				TimLocAcc=0;
   100c8:	10 92 ba 01 	sts	0x01BA, r1
				stLocalAccount=laDispStatus;
   100cc:	86 e0       	ldi	r24, 0x06	; 6
   100ce:	93 cf       	rjmp	.-218    	; 0xfff6 <FMenuLocalAccount+0x110>
		        break;
           case laDispStatus://Display Status
		        if (LocAccStatus==LA_INVALID){
   100d0:	80 91 97 02 	lds	r24, 0x0297
   100d4:	81 30       	cpi	r24, 0x01	; 1
   100d6:	29 f4       	brne	.+10     	; 0x100e2 <FMenuLocalAccount+0x1fc>
					lcd_printf(3,1,PSTR("Tidak Terdaftar     "));    
   100d8:	83 e0       	ldi	r24, 0x03	; 3
   100da:	61 e0       	ldi	r22, 0x01	; 1
   100dc:	44 e6       	ldi	r20, 0x64	; 100
   100de:	52 e2       	ldi	r21, 0x22	; 34
   100e0:	0d c0       	rjmp	.+26     	; 0x100fc <FMenuLocalAccount+0x216>
					TimLocAcc=0;
				    stLocalAccount=laDelayExit;
				}
				else
                if (LocAccStatus==LA_VALID) {
   100e2:	82 30       	cpi	r24, 0x02	; 2
   100e4:	31 f4       	brne	.+12     	; 0x100f2 <FMenuLocalAccount+0x20c>
				    stLocalAccount=laDispValid; 
   100e6:	87 e0       	ldi	r24, 0x07	; 7
   100e8:	80 93 5b 01 	sts	0x015B, r24
					lcd_clear();
   100ec:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
   100f0:	0c c0       	rjmp	.+24     	; 0x1010a <FMenuLocalAccount+0x224>
					}
				else
                if (LocAccStatus==LA_LIMITED){
   100f2:	83 30       	cpi	r24, 0x03	; 3
   100f4:	51 f4       	brne	.+20     	; 0x1010a <FMenuLocalAccount+0x224>
					lcd_printf(3,1,PSTR("Kartu Terbatas      "));    
   100f6:	61 e0       	ldi	r22, 0x01	; 1
   100f8:	4f e4       	ldi	r20, 0x4F	; 79
   100fa:	52 e2       	ldi	r21, 0x22	; 34
   100fc:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
					TimLocAcc=0;
   10100:	10 92 ba 01 	sts	0x01BA, r1
				    stLocalAccount=laDelayExit;
   10104:	8e e1       	ldi	r24, 0x1E	; 30
   10106:	80 93 5b 01 	sts	0x015B, r24
				}
                if (TimLocAcc>5)stLocalAccount=laExitLocAcc;
   1010a:	80 91 ba 01 	lds	r24, 0x01BA
   1010e:	86 30       	cpi	r24, 0x06	; 6
   10110:	08 f4       	brcc	.+2      	; 0x10114 <FMenuLocalAccount+0x22e>
   10112:	88 c7       	rjmp	.+3856   	; 0x11024 <FMenuLocalAccount+0x113e>
   10114:	75 c7       	rjmp	.+3818   	; 0x11000 <FMenuLocalAccount+0x111a>
		        break;
           case laDispValid://Display VALID ID
		        lcd_clear();
   10116:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
				sprintf_P(strBalanceValue,PSTR("%s"),strBalance);
   1011a:	00 d0       	rcall	.+0      	; 0x1011c <FMenuLocalAccount+0x236>
   1011c:	00 d0       	rcall	.+0      	; 0x1011e <FMenuLocalAccount+0x238>
   1011e:	00 d0       	rcall	.+0      	; 0x10120 <FMenuLocalAccount+0x23a>
   10120:	ed b7       	in	r30, 0x3d	; 61
   10122:	fe b7       	in	r31, 0x3e	; 62
   10124:	31 96       	adiw	r30, 0x01	; 1
   10126:	8f e1       	ldi	r24, 0x1F	; 31
   10128:	9c e0       	ldi	r25, 0x0C	; 12
   1012a:	ad b7       	in	r26, 0x3d	; 61
   1012c:	be b7       	in	r27, 0x3e	; 62
   1012e:	12 96       	adiw	r26, 0x02	; 2
   10130:	9c 93       	st	X, r25
   10132:	8e 93       	st	-X, r24
   10134:	11 97       	sbiw	r26, 0x01	; 1
   10136:	8c e4       	ldi	r24, 0x4C	; 76
   10138:	92 e2       	ldi	r25, 0x22	; 34
   1013a:	93 83       	std	Z+3, r25	; 0x03
   1013c:	82 83       	std	Z+2, r24	; 0x02
   1013e:	08 ef       	ldi	r16, 0xF8	; 248
   10140:	1b e0       	ldi	r17, 0x0B	; 11
   10142:	15 83       	std	Z+5, r17	; 0x05
   10144:	04 83       	std	Z+4, r16	; 0x04
   10146:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
				FormatCurrency(strBalance);
   1014a:	ed b7       	in	r30, 0x3d	; 61
   1014c:	fe b7       	in	r31, 0x3e	; 62
   1014e:	36 96       	adiw	r30, 0x06	; 6
   10150:	0f b6       	in	r0, 0x3f	; 63
   10152:	f8 94       	cli
   10154:	fe bf       	out	0x3e, r31	; 62
   10156:	0f be       	out	0x3f, r0	; 63
   10158:	ed bf       	out	0x3d, r30	; 61
   1015a:	c8 01       	movw	r24, r16
   1015c:	0e 94 ad 34 	call	0x695a	; 0x695a <FormatCurrency>
   10160:	20 e0       	ldi	r18, 0x00	; 0
   10162:	30 e0       	ldi	r19, 0x00	; 0


void StringCopy(char *Source,char *Dest,char Length){
     char i;
	 for (i=0;i<Length;i++){
	     Dest[i]=Source[i];
   10164:	60 e2       	ldi	r22, 0x20	; 32
   10166:	e6 2e       	mov	r14, r22
   10168:	f1 2c       	mov	r15, r1
   1016a:	ec 0e       	add	r14, r28
   1016c:	fd 1e       	adc	r15, r29
   1016e:	f7 01       	movw	r30, r14
   10170:	e2 0f       	add	r30, r18
   10172:	f3 1f       	adc	r31, r19
   10174:	d9 01       	movw	r26, r18
   10176:	ac 5d       	subi	r26, 0xDC	; 220
   10178:	bc 4f       	sbci	r27, 0xFC	; 252
   1017a:	8c 91       	ld	r24, X
   1017c:	80 83       	st	Z, r24
   1017e:	2f 5f       	subi	r18, 0xFF	; 255
   10180:	3f 4f       	sbci	r19, 0xFF	; 255
//Message 56


void StringCopy(char *Source,char *Dest,char Length){
     char i;
	 for (i=0;i<Length;i++){
   10182:	24 31       	cpi	r18, 0x14	; 20
   10184:	31 05       	cpc	r19, r1
   10186:	99 f7       	brne	.-26     	; 0x1016e <FMenuLocalAccount+0x288>
	     Dest[i]=Source[i];
	 }Dest[Length]=0;
   10188:	1c aa       	std	Y+52, r1	; 0x34
		        lcd_clear();
				sprintf_P(strBalanceValue,PSTR("%s"),strBalance);
				FormatCurrency(strBalance);

		        StringCopy(strCardHolder,strName,20);  				                                                        
		        sprintf_P(lcdteks,PSTR("%s"),strCompName);               lcd_print(1,1,lcdteks);   //[CompName]
   1018a:	00 d0       	rcall	.+0      	; 0x1018c <FMenuLocalAccount+0x2a6>
   1018c:	00 d0       	rcall	.+0      	; 0x1018e <FMenuLocalAccount+0x2a8>
   1018e:	00 d0       	rcall	.+0      	; 0x10190 <FMenuLocalAccount+0x2aa>
   10190:	ed b7       	in	r30, 0x3d	; 61
   10192:	fe b7       	in	r31, 0x3e	; 62
   10194:	31 96       	adiw	r30, 0x01	; 1
   10196:	8e 01       	movw	r16, r28
   10198:	04 5f       	subi	r16, 0xF4	; 244
   1019a:	1f 4f       	sbci	r17, 0xFF	; 255
   1019c:	ad b7       	in	r26, 0x3d	; 61
   1019e:	be b7       	in	r27, 0x3e	; 62
   101a0:	12 96       	adiw	r26, 0x02	; 2
   101a2:	1c 93       	st	X, r17
   101a4:	0e 93       	st	-X, r16
   101a6:	11 97       	sbiw	r26, 0x01	; 1
   101a8:	89 e4       	ldi	r24, 0x49	; 73
   101aa:	92 e2       	ldi	r25, 0x22	; 34
   101ac:	93 83       	std	Z+3, r25	; 0x03
   101ae:	82 83       	std	Z+2, r24	; 0x02
   101b0:	89 e7       	ldi	r24, 0x79	; 121
   101b2:	97 e0       	ldi	r25, 0x07	; 7
   101b4:	95 83       	std	Z+5, r25	; 0x05
   101b6:	84 83       	std	Z+4, r24	; 0x04
   101b8:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
   101bc:	ed b7       	in	r30, 0x3d	; 61
   101be:	fe b7       	in	r31, 0x3e	; 62
   101c0:	36 96       	adiw	r30, 0x06	; 6
   101c2:	0f b6       	in	r0, 0x3f	; 63
   101c4:	f8 94       	cli
   101c6:	fe bf       	out	0x3e, r31	; 62
   101c8:	0f be       	out	0x3f, r0	; 63
   101ca:	ed bf       	out	0x3d, r30	; 61
   101cc:	81 e0       	ldi	r24, 0x01	; 1
   101ce:	61 e0       	ldi	r22, 0x01	; 1
   101d0:	a8 01       	movw	r20, r16
   101d2:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
                //sprintf(lcdteks,"%s %s",strCardID,strName);    lcd_print(2,1,lcdteks);   //[Card ID][Card Holder]
				sprintf_P(lcdteks,PSTR("%s"),strName);                   lcd_print(2,1,lcdteks);   //[Card ID][Card Holder]
   101d6:	00 d0       	rcall	.+0      	; 0x101d8 <FMenuLocalAccount+0x2f2>
   101d8:	00 d0       	rcall	.+0      	; 0x101da <FMenuLocalAccount+0x2f4>
   101da:	00 d0       	rcall	.+0      	; 0x101dc <FMenuLocalAccount+0x2f6>
   101dc:	ed b7       	in	r30, 0x3d	; 61
   101de:	fe b7       	in	r31, 0x3e	; 62
   101e0:	31 96       	adiw	r30, 0x01	; 1
   101e2:	ad b7       	in	r26, 0x3d	; 61
   101e4:	be b7       	in	r27, 0x3e	; 62
   101e6:	12 96       	adiw	r26, 0x02	; 2
   101e8:	1c 93       	st	X, r17
   101ea:	0e 93       	st	-X, r16
   101ec:	11 97       	sbiw	r26, 0x01	; 1
   101ee:	86 e4       	ldi	r24, 0x46	; 70
   101f0:	92 e2       	ldi	r25, 0x22	; 34
   101f2:	93 83       	std	Z+3, r25	; 0x03
   101f4:	82 83       	std	Z+2, r24	; 0x02
   101f6:	f5 82       	std	Z+5, r15	; 0x05
   101f8:	e4 82       	std	Z+4, r14	; 0x04
   101fa:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
   101fe:	ed b7       	in	r30, 0x3d	; 61
   10200:	fe b7       	in	r31, 0x3e	; 62
   10202:	36 96       	adiw	r30, 0x06	; 6
   10204:	0f b6       	in	r0, 0x3f	; 63
   10206:	f8 94       	cli
   10208:	fe bf       	out	0x3e, r31	; 62
   1020a:	0f be       	out	0x3f, r0	; 63
   1020c:	ed bf       	out	0x3d, r30	; 61
   1020e:	82 e0       	ldi	r24, 0x02	; 2
   10210:	61 e0       	ldi	r22, 0x01	; 1
   10212:	a8 01       	movw	r20, r16
   10214:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
				sprintf_P(lcdteks,PSTR("%s %s"),strLicPlate,strBalance); lcd_print(3,1,lcdteks);   //[LicPlate][Balance] 
   10218:	2d b7       	in	r18, 0x3d	; 61
   1021a:	3e b7       	in	r19, 0x3e	; 62
   1021c:	28 50       	subi	r18, 0x08	; 8
   1021e:	30 40       	sbci	r19, 0x00	; 0
   10220:	0f b6       	in	r0, 0x3f	; 63
   10222:	f8 94       	cli
   10224:	3e bf       	out	0x3e, r19	; 62
   10226:	0f be       	out	0x3f, r0	; 63
   10228:	2d bf       	out	0x3d, r18	; 61
   1022a:	ed b7       	in	r30, 0x3d	; 61
   1022c:	fe b7       	in	r31, 0x3e	; 62
   1022e:	31 96       	adiw	r30, 0x01	; 1
   10230:	ad b7       	in	r26, 0x3d	; 61
   10232:	be b7       	in	r27, 0x3e	; 62
   10234:	12 96       	adiw	r26, 0x02	; 2
   10236:	1c 93       	st	X, r17
   10238:	0e 93       	st	-X, r16
   1023a:	11 97       	sbiw	r26, 0x01	; 1
   1023c:	80 e4       	ldi	r24, 0x40	; 64
   1023e:	92 e2       	ldi	r25, 0x22	; 34
   10240:	93 83       	std	Z+3, r25	; 0x03
   10242:	82 83       	std	Z+2, r24	; 0x02
   10244:	8a ef       	ldi	r24, 0xFA	; 250
   10246:	98 e0       	ldi	r25, 0x08	; 8
   10248:	95 83       	std	Z+5, r25	; 0x05
   1024a:	84 83       	std	Z+4, r24	; 0x04
   1024c:	88 ef       	ldi	r24, 0xF8	; 248
   1024e:	9b e0       	ldi	r25, 0x0B	; 11
   10250:	97 83       	std	Z+7, r25	; 0x07
   10252:	86 83       	std	Z+6, r24	; 0x06
   10254:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
   10258:	ed b7       	in	r30, 0x3d	; 61
   1025a:	fe b7       	in	r31, 0x3e	; 62
   1025c:	38 96       	adiw	r30, 0x08	; 8
   1025e:	0f b6       	in	r0, 0x3f	; 63
   10260:	f8 94       	cli
   10262:	fe bf       	out	0x3e, r31	; 62
   10264:	0f be       	out	0x3f, r0	; 63
   10266:	ed bf       	out	0x3d, r30	; 61
   10268:	83 e0       	ldi	r24, 0x03	; 3
   1026a:	61 e0       	ldi	r22, 0x01	; 1
   1026c:	a8 01       	movw	r20, r16
   1026e:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
	            lcd_printf(4,1,PSTR("[*]Batal       [#]OK"));   //[*]Batal       [#]OK
   10272:	84 e0       	ldi	r24, 0x04	; 4
   10274:	61 e0       	ldi	r22, 0x01	; 1
   10276:	4b e2       	ldi	r20, 0x2B	; 43
   10278:	52 e2       	ldi	r21, 0x22	; 34
   1027a:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
				stLocalAccount=laDispValidInput;
   1027e:	88 e0       	ldi	r24, 0x08	; 8
   10280:	ba ce       	rjmp	.-652    	; 0xfff6 <FMenuLocalAccount+0x110>
		        break;
           case laDispValidInput:
                KeyPressed=_key_scan(1);
   10282:	81 e0       	ldi	r24, 0x01	; 1
   10284:	0e 94 f6 a5 	call	0x14bec	; 0x14bec <_key_scan>
				if (KeyPressed==_KEY_ENTER) stLocalAccount=laSelectFIP;
   10288:	87 3b       	cpi	r24, 0xB7	; 183
   1028a:	09 f4       	brne	.+2      	; 0x1028e <FMenuLocalAccount+0x3a8>
   1028c:	b3 c1       	rjmp	.+870    	; 0x105f4 <FMenuLocalAccount+0x70e>
				else
				if (KeyPressed==_KEY_CANCEL)stLocalAccount=laExitLocAcc;
   1028e:	87 3e       	cpi	r24, 0xE7	; 231
   10290:	09 f0       	breq	.+2      	; 0x10294 <FMenuLocalAccount+0x3ae>
   10292:	c8 c6       	rjmp	.+3472   	; 0x11024 <FMenuLocalAccount+0x113e>
   10294:	b5 c6       	rjmp	.+3434   	; 0x11000 <FMenuLocalAccount+0x111a>
		        break;
           case laSelectFIP:      
			    FIPResult=menu_FIP(&FIP_Used,strFIP);
   10296:	01 e9       	ldi	r16, 0x91	; 145
   10298:	12 e0       	ldi	r17, 0x02	; 2
   1029a:	88 e8       	ldi	r24, 0x88	; 136
   1029c:	92 e0       	ldi	r25, 0x02	; 2
   1029e:	b8 01       	movw	r22, r16
   102a0:	0e 94 af 54 	call	0xa95e	; 0xa95e <menu_FIP>

			    if ((FIPResult==FIP_DONE)&&(FIP_Used>0)){
   102a4:	88 23       	and	r24, r24
   102a6:	09 f0       	breq	.+2      	; 0x102aa <FMenuLocalAccount+0x3c4>
   102a8:	4e c0       	rjmp	.+156    	; 0x10346 <FMenuLocalAccount+0x460>
   102aa:	20 91 88 02 	lds	r18, 0x0288
   102ae:	22 23       	and	r18, r18
   102b0:	09 f4       	brne	.+2      	; 0x102b4 <FMenuLocalAccount+0x3ce>
   102b2:	b8 c6       	rjmp	.+3440   	; 0x11024 <FMenuLocalAccount+0x113e>
                    sprintf_P(strFIP,PSTR("%.2d"),FIP_Used);
   102b4:	00 d0       	rcall	.+0      	; 0x102b6 <FMenuLocalAccount+0x3d0>
   102b6:	00 d0       	rcall	.+0      	; 0x102b8 <FMenuLocalAccount+0x3d2>
   102b8:	00 d0       	rcall	.+0      	; 0x102ba <FMenuLocalAccount+0x3d4>
   102ba:	ed b7       	in	r30, 0x3d	; 61
   102bc:	fe b7       	in	r31, 0x3e	; 62
   102be:	31 96       	adiw	r30, 0x01	; 1
   102c0:	ad b7       	in	r26, 0x3d	; 61
   102c2:	be b7       	in	r27, 0x3e	; 62
   102c4:	12 96       	adiw	r26, 0x02	; 2
   102c6:	1c 93       	st	X, r17
   102c8:	0e 93       	st	-X, r16
   102ca:	11 97       	sbiw	r26, 0x01	; 1
   102cc:	86 e2       	ldi	r24, 0x26	; 38
   102ce:	92 e2       	ldi	r25, 0x22	; 34
   102d0:	93 83       	std	Z+3, r25	; 0x03
   102d2:	82 83       	std	Z+2, r24	; 0x02
   102d4:	24 83       	std	Z+4, r18	; 0x04
   102d6:	15 82       	std	Z+5, r1	; 0x05
   102d8:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
					sprintf_P(strFIP_ID,PSTR("%.2d"),FIP_Used);
   102dc:	ed b7       	in	r30, 0x3d	; 61
   102de:	fe b7       	in	r31, 0x3e	; 62
   102e0:	31 96       	adiw	r30, 0x01	; 1
   102e2:	89 eb       	ldi	r24, 0xB9	; 185
   102e4:	97 e0       	ldi	r25, 0x07	; 7
   102e6:	ad b7       	in	r26, 0x3d	; 61
   102e8:	be b7       	in	r27, 0x3e	; 62
   102ea:	12 96       	adiw	r26, 0x02	; 2
   102ec:	9c 93       	st	X, r25
   102ee:	8e 93       	st	-X, r24
   102f0:	11 97       	sbiw	r26, 0x01	; 1
   102f2:	81 e2       	ldi	r24, 0x21	; 33
   102f4:	92 e2       	ldi	r25, 0x22	; 34
   102f6:	93 83       	std	Z+3, r25	; 0x03
   102f8:	82 83       	std	Z+2, r24	; 0x02
   102fa:	80 91 88 02 	lds	r24, 0x0288
   102fe:	84 83       	std	Z+4, r24	; 0x04
   10300:	15 82       	std	Z+5, r1	; 0x05
   10302:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
                    //Load Product Info
					if (GetFIPAddr(FIP_Used)>0) 
   10306:	ed b7       	in	r30, 0x3d	; 61
   10308:	fe b7       	in	r31, 0x3e	; 62
   1030a:	36 96       	adiw	r30, 0x06	; 6
   1030c:	0f b6       	in	r0, 0x3f	; 63
   1030e:	f8 94       	cli
   10310:	fe bf       	out	0x3e, r31	; 62
   10312:	0f be       	out	0x3f, r0	; 63
   10314:	ed bf       	out	0x3d, r30	; 61
   10316:	80 91 88 02 	lds	r24, 0x0288
   1031a:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <GetFIPAddr>
   1031e:	88 23       	and	r24, r24
   10320:	81 f0       	breq	.+32     	; 0x10342 <FMenuLocalAccount+0x45c>
					    eeprom_read_block((void*) &ProductID, (const void*) &DefNozzleMap[GetFIPAddr(FIP_Used)-1], 6);
   10322:	80 91 88 02 	lds	r24, 0x0288
   10326:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <GetFIPAddr>
   1032a:	96 e0       	ldi	r25, 0x06	; 6
   1032c:	89 9f       	mul	r24, r25
   1032e:	b0 01       	movw	r22, r0
   10330:	11 24       	eor	r1, r1
   10332:	61 5b       	subi	r22, 0xB1	; 177
   10334:	7f 4f       	sbci	r23, 0xFF	; 255
   10336:	89 e8       	ldi	r24, 0x89	; 137
   10338:	92 e0       	ldi	r25, 0x02	; 2
   1033a:	46 e0       	ldi	r20, 0x06	; 6
   1033c:	50 e0       	ldi	r21, 0x00	; 0
   1033e:	0e 94 b9 ac 	call	0x15972	; 0x15972 <__eerd_block_m128>
				    stLocalAccount=laSelectProduct;
   10342:	8b e0       	ldi	r24, 0x0B	; 11
   10344:	58 ce       	rjmp	.-848    	; 0xfff6 <FMenuLocalAccount+0x110>
				}
			    else if (FIPResult==FIP_CANCEL){
   10346:	82 30       	cpi	r24, 0x02	; 2
   10348:	09 f0       	breq	.+2      	; 0x1034c <FMenuLocalAccount+0x466>
   1034a:	6c c6       	rjmp	.+3288   	; 0x11024 <FMenuLocalAccount+0x113e>
				    stLocalAccount=laDispValid;
   1034c:	87 e0       	ldi	r24, 0x07	; 7
   1034e:	53 ce       	rjmp	.-858    	; 0xfff6 <FMenuLocalAccount+0x110>
		        break; 
           case laSelectFIPInput:

		        break;
           case laSelectProduct://NozzleID
				lcd_clear();
   10350:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
		        sprintf_P(lcdteks,PSTR("Pompa-%s"),strFIP);lcd_print(1,1,lcdteks);
   10354:	00 d0       	rcall	.+0      	; 0x10356 <FMenuLocalAccount+0x470>
   10356:	00 d0       	rcall	.+0      	; 0x10358 <FMenuLocalAccount+0x472>
   10358:	00 d0       	rcall	.+0      	; 0x1035a <FMenuLocalAccount+0x474>
   1035a:	ed b7       	in	r30, 0x3d	; 61
   1035c:	fe b7       	in	r31, 0x3e	; 62
   1035e:	31 96       	adiw	r30, 0x01	; 1
   10360:	8e 01       	movw	r16, r28
   10362:	04 5f       	subi	r16, 0xF4	; 244
   10364:	1f 4f       	sbci	r17, 0xFF	; 255
   10366:	ad b7       	in	r26, 0x3d	; 61
   10368:	be b7       	in	r27, 0x3e	; 62
   1036a:	12 96       	adiw	r26, 0x02	; 2
   1036c:	1c 93       	st	X, r17
   1036e:	0e 93       	st	-X, r16
   10370:	11 97       	sbiw	r26, 0x01	; 1
   10372:	88 e1       	ldi	r24, 0x18	; 24
   10374:	92 e2       	ldi	r25, 0x22	; 34
   10376:	93 83       	std	Z+3, r25	; 0x03
   10378:	82 83       	std	Z+2, r24	; 0x02
   1037a:	81 e9       	ldi	r24, 0x91	; 145
   1037c:	92 e0       	ldi	r25, 0x02	; 2
   1037e:	95 83       	std	Z+5, r25	; 0x05
   10380:	84 83       	std	Z+4, r24	; 0x04
   10382:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
   10386:	ed b7       	in	r30, 0x3d	; 61
   10388:	fe b7       	in	r31, 0x3e	; 62
   1038a:	36 96       	adiw	r30, 0x06	; 6
   1038c:	0f b6       	in	r0, 0x3f	; 63
   1038e:	f8 94       	cli
   10390:	fe bf       	out	0x3e, r31	; 62
   10392:	0f be       	out	0x3f, r0	; 63
   10394:	ed bf       	out	0x3d, r30	; 61
   10396:	81 e0       	ldi	r24, 0x01	; 1
   10398:	61 e0       	ldi	r22, 0x01	; 1
   1039a:	a8 01       	movw	r20, r16
   1039c:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
				//Not MPD->Single Product
				if ((ProductID[0]>=1)&&(ProductID[0]<=6)&&
   103a0:	90 91 89 02 	lds	r25, 0x0289
   103a4:	89 2f       	mov	r24, r25
   103a6:	81 50       	subi	r24, 0x01	; 1
   103a8:	86 30       	cpi	r24, 0x06	; 6
   103aa:	08 f0       	brcs	.+2      	; 0x103ae <FMenuLocalAccount+0x4c8>
   103ac:	4b c0       	rjmp	.+150    	; 0x10444 <FMenuLocalAccount+0x55e>
   103ae:	80 91 8a 02 	lds	r24, 0x028A
   103b2:	88 23       	and	r24, r24
   103b4:	09 f0       	breq	.+2      	; 0x103b8 <FMenuLocalAccount+0x4d2>
   103b6:	46 c0       	rjmp	.+140    	; 0x10444 <FMenuLocalAccount+0x55e>
   103b8:	80 91 8b 02 	lds	r24, 0x028B
   103bc:	88 23       	and	r24, r24
   103be:	09 f0       	breq	.+2      	; 0x103c2 <FMenuLocalAccount+0x4dc>
   103c0:	41 c0       	rjmp	.+130    	; 0x10444 <FMenuLocalAccount+0x55e>
   103c2:	80 91 8c 02 	lds	r24, 0x028C
   103c6:	88 23       	and	r24, r24
   103c8:	e9 f5       	brne	.+122    	; 0x10444 <FMenuLocalAccount+0x55e>
				    (ProductID[1]==0)&&(ProductID[2]==0)&&(ProductID[3]==0)){
                     //Load 1st Product      					 
					 ProdId=ProductID[0];
   103ca:	90 93 87 02 	sts	0x0287, r25
					 eeprom_read_block((void*) &ProductName, (const void*) &DefProductName[ProdId-1],10);
   103ce:	6d e0       	ldi	r22, 0x0D	; 13
   103d0:	96 9f       	mul	r25, r22
   103d2:	b0 01       	movw	r22, r0
   103d4:	11 24       	eor	r1, r1
   103d6:	62 55       	subi	r22, 0x52	; 82
   103d8:	7f 4f       	sbci	r23, 0xFF	; 255
   103da:	8e 01       	movw	r16, r28
   103dc:	0f 5f       	subi	r16, 0xFF	; 255
   103de:	1f 4f       	sbci	r17, 0xFF	; 255
   103e0:	c8 01       	movw	r24, r16
   103e2:	4a e0       	ldi	r20, 0x0A	; 10
   103e4:	50 e0       	ldi	r21, 0x00	; 0
   103e6:	0e 94 b9 ac 	call	0x15972	; 0x15972 <__eerd_block_m128>
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   103ea:	ce 01       	movw	r24, r28
   103ec:	09 96       	adiw	r24, 0x09	; 9
	    Dest[i]=Source[IdxSource+i];
   103ee:	0f 5f       	subi	r16, 0xFF	; 255
   103f0:	1f 4f       	sbci	r17, 0xFF	; 255
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   103f2:	08 17       	cp	r16, r24
   103f4:	19 07       	cpc	r17, r25
   103f6:	d9 f7       	brne	.-10     	; 0x103ee <FMenuLocalAccount+0x508>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
   103f8:	19 86       	std	Y+9, r1	; 0x09
				    (ProductID[1]==0)&&(ProductID[2]==0)&&(ProductID[3]==0)){
                     //Load 1st Product      					 
					 ProdId=ProductID[0];
					 eeprom_read_block((void*) &ProductName, (const void*) &DefProductName[ProdId-1],10);
					 StrPosCopy(ProductName,ProductName,0,8);
					 sprintf_P(strProduct,PSTR("%s"),ProductName);
   103fa:	00 d0       	rcall	.+0      	; 0x103fc <FMenuLocalAccount+0x516>
   103fc:	00 d0       	rcall	.+0      	; 0x103fe <FMenuLocalAccount+0x518>
   103fe:	00 d0       	rcall	.+0      	; 0x10400 <FMenuLocalAccount+0x51a>
   10400:	ed b7       	in	r30, 0x3d	; 61
   10402:	fe b7       	in	r31, 0x3e	; 62
   10404:	31 96       	adiw	r30, 0x01	; 1
   10406:	8e e5       	ldi	r24, 0x5E	; 94
   10408:	97 e0       	ldi	r25, 0x07	; 7
   1040a:	ad b7       	in	r26, 0x3d	; 61
   1040c:	be b7       	in	r27, 0x3e	; 62
   1040e:	12 96       	adiw	r26, 0x02	; 2
   10410:	9c 93       	st	X, r25
   10412:	8e 93       	st	-X, r24
   10414:	11 97       	sbiw	r26, 0x01	; 1
   10416:	85 e1       	ldi	r24, 0x15	; 21
   10418:	92 e2       	ldi	r25, 0x22	; 34
   1041a:	93 83       	std	Z+3, r25	; 0x03
   1041c:	82 83       	std	Z+2, r24	; 0x02
   1041e:	ce 01       	movw	r24, r28
   10420:	01 96       	adiw	r24, 0x01	; 1
   10422:	95 83       	std	Z+5, r25	; 0x05
   10424:	84 83       	std	Z+4, r24	; 0x04
   10426:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
                     stLocalAccount=laSelectBalanceType;
   1042a:	8d e0       	ldi	r24, 0x0D	; 13
   1042c:	80 93 5b 01 	sts	0x015B, r24
   10430:	80 e0       	ldi	r24, 0x00	; 0
   10432:	ed b7       	in	r30, 0x3d	; 61
   10434:	fe b7       	in	r31, 0x3e	; 62
   10436:	36 96       	adiw	r30, 0x06	; 6
   10438:	0f b6       	in	r0, 0x3f	; 63
   1043a:	f8 94       	cli
   1043c:	fe bf       	out	0x3e, r31	; 62
   1043e:	0f be       	out	0x3f, r0	; 63
   10440:	ed bf       	out	0x3d, r30	; 61
   10442:	f1 c5       	rjmp	.+3042   	; 0x11026 <FMenuLocalAccount+0x1140>
					}else
                {
				//MultiProductDisplay Select:
				//Load Nozzle Configuration
				for(iNozzle=0;iNozzle<4;iNozzle++){
   10444:	10 92 8f 02 	sts	0x028F, r1
				        eeprom_read_block((void*) &ProductName, (const void*) &DefProductName[ProdId-1],10);
						StrPosCopy(ProductName,ProductName,0,8);
					    sprintf_P(lcdteks,PSTR("%d.%s"),(iNozzle+1),ProductName);
                    }
					else{
					       sprintf_P(lcdteks,PSTR("     "));					
   10448:	5c e0       	ldi	r21, 0x0C	; 12
   1044a:	e5 2e       	mov	r14, r21
   1044c:	f1 2c       	mov	r15, r1
   1044e:	ec 0e       	add	r14, r28
   10450:	fd 1e       	adc	r15, r29
   10452:	49 e0       	ldi	r20, 0x09	; 9
   10454:	84 2e       	mov	r8, r20
   10456:	42 e2       	ldi	r20, 0x22	; 34
   10458:	94 2e       	mov	r9, r20
				//Load Nozzle Configuration
				for(iNozzle=0;iNozzle<4;iNozzle++){
                    //Masalah 0-->void
				    ProdId=ProductID[iNozzle];
					if ((ProdId>=1)&&(ProdId<=6)){
				        eeprom_read_block((void*) &ProductName, (const void*) &DefProductName[ProdId-1],10);
   1045a:	3d e0       	ldi	r19, 0x0D	; 13
   1045c:	63 2e       	mov	r6, r19
   1045e:	8e 01       	movw	r16, r28
   10460:	0f 5f       	subi	r16, 0xFF	; 255
   10462:	1f 4f       	sbci	r17, 0xFF	; 255
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   10464:	29 e0       	ldi	r18, 0x09	; 9
   10466:	a2 2e       	mov	r10, r18
   10468:	b1 2c       	mov	r11, r1
   1046a:	ac 0e       	add	r10, r28
   1046c:	bd 1e       	adc	r11, r29
                    //Masalah 0-->void
				    ProdId=ProductID[iNozzle];
					if ((ProdId>=1)&&(ProdId<=6)){
				        eeprom_read_block((void*) &ProductName, (const void*) &DefProductName[ProdId-1],10);
						StrPosCopy(ProductName,ProductName,0,8);
					    sprintf_P(lcdteks,PSTR("%d.%s"),(iNozzle+1),ProductName);
   1046e:	9f e0       	ldi	r25, 0x0F	; 15
   10470:	c9 2e       	mov	r12, r25
   10472:	92 e2       	ldi	r25, 0x22	; 34
   10474:	d9 2e       	mov	r13, r25
                    }
					else{
					       sprintf_P(lcdteks,PSTR("     "));					
					}
				    lcd_print(2+(iNozzle%2),1+(iNozzle/2)*11,lcdteks);
   10476:	8b e0       	ldi	r24, 0x0B	; 11
   10478:	78 2e       	mov	r7, r24
   1047a:	65 c0       	rjmp	.+202    	; 0x10546 <FMenuLocalAccount+0x660>
                {
				//MultiProductDisplay Select:
				//Load Nozzle Configuration
				for(iNozzle=0;iNozzle<4;iNozzle++){
                    //Masalah 0-->void
				    ProdId=ProductID[iNozzle];
   1047c:	f0 e0       	ldi	r31, 0x00	; 0
   1047e:	e7 57       	subi	r30, 0x77	; 119
   10480:	fd 4f       	sbci	r31, 0xFD	; 253
   10482:	e0 81       	ld	r30, Z
   10484:	e0 93 87 02 	sts	0x0287, r30
					if ((ProdId>=1)&&(ProdId<=6)){
   10488:	8e 2f       	mov	r24, r30
   1048a:	81 50       	subi	r24, 0x01	; 1
   1048c:	86 30       	cpi	r24, 0x06	; 6
   1048e:	b8 f5       	brcc	.+110    	; 0x104fe <FMenuLocalAccount+0x618>
				        eeprom_read_block((void*) &ProductName, (const void*) &DefProductName[ProdId-1],10);
   10490:	e6 9d       	mul	r30, r6
   10492:	b0 01       	movw	r22, r0
   10494:	11 24       	eor	r1, r1
   10496:	62 55       	subi	r22, 0x52	; 82
   10498:	7f 4f       	sbci	r23, 0xFF	; 255
   1049a:	c8 01       	movw	r24, r16
   1049c:	4a e0       	ldi	r20, 0x0A	; 10
   1049e:	50 e0       	ldi	r21, 0x00	; 0
   104a0:	0e 94 b9 ac 	call	0x15972	; 0x15972 <__eerd_block_m128>
   104a4:	c8 01       	movw	r24, r16
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
   104a6:	01 96       	adiw	r24, 0x01	; 1
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   104a8:	8a 15       	cp	r24, r10
   104aa:	9b 05       	cpc	r25, r11
   104ac:	e1 f7       	brne	.-8      	; 0x104a6 <FMenuLocalAccount+0x5c0>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
   104ae:	19 86       	std	Y+9, r1	; 0x09
                    //Masalah 0-->void
				    ProdId=ProductID[iNozzle];
					if ((ProdId>=1)&&(ProdId<=6)){
				        eeprom_read_block((void*) &ProductName, (const void*) &DefProductName[ProdId-1],10);
						StrPosCopy(ProductName,ProductName,0,8);
					    sprintf_P(lcdteks,PSTR("%d.%s"),(iNozzle+1),ProductName);
   104b0:	2d b7       	in	r18, 0x3d	; 61
   104b2:	3e b7       	in	r19, 0x3e	; 62
   104b4:	28 50       	subi	r18, 0x08	; 8
   104b6:	30 40       	sbci	r19, 0x00	; 0
   104b8:	0f b6       	in	r0, 0x3f	; 63
   104ba:	f8 94       	cli
   104bc:	3e bf       	out	0x3e, r19	; 62
   104be:	0f be       	out	0x3f, r0	; 63
   104c0:	2d bf       	out	0x3d, r18	; 61
   104c2:	ed b7       	in	r30, 0x3d	; 61
   104c4:	fe b7       	in	r31, 0x3e	; 62
   104c6:	31 96       	adiw	r30, 0x01	; 1
   104c8:	ad b7       	in	r26, 0x3d	; 61
   104ca:	be b7       	in	r27, 0x3e	; 62
   104cc:	12 96       	adiw	r26, 0x02	; 2
   104ce:	fc 92       	st	X, r15
   104d0:	ee 92       	st	-X, r14
   104d2:	11 97       	sbiw	r26, 0x01	; 1
   104d4:	d3 82       	std	Z+3, r13	; 0x03
   104d6:	c2 82       	std	Z+2, r12	; 0x02
   104d8:	80 91 8f 02 	lds	r24, 0x028F
   104dc:	90 e0       	ldi	r25, 0x00	; 0
   104de:	01 96       	adiw	r24, 0x01	; 1
   104e0:	95 83       	std	Z+5, r25	; 0x05
   104e2:	84 83       	std	Z+4, r24	; 0x04
   104e4:	17 83       	std	Z+7, r17	; 0x07
   104e6:	06 83       	std	Z+6, r16	; 0x06
   104e8:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
   104ec:	ed b7       	in	r30, 0x3d	; 61
   104ee:	fe b7       	in	r31, 0x3e	; 62
   104f0:	38 96       	adiw	r30, 0x08	; 8
   104f2:	0f b6       	in	r0, 0x3f	; 63
   104f4:	f8 94       	cli
   104f6:	fe bf       	out	0x3e, r31	; 62
   104f8:	0f be       	out	0x3f, r0	; 63
   104fa:	ed bf       	out	0x3d, r30	; 61
   104fc:	12 c0       	rjmp	.+36     	; 0x10522 <FMenuLocalAccount+0x63c>
                    }
					else{
					       sprintf_P(lcdteks,PSTR("     "));					
   104fe:	00 d0       	rcall	.+0      	; 0x10500 <FMenuLocalAccount+0x61a>
   10500:	00 d0       	rcall	.+0      	; 0x10502 <FMenuLocalAccount+0x61c>
   10502:	ad b7       	in	r26, 0x3d	; 61
   10504:	be b7       	in	r27, 0x3e	; 62
   10506:	12 96       	adiw	r26, 0x02	; 2
   10508:	fc 92       	st	X, r15
   1050a:	ee 92       	st	-X, r14
   1050c:	11 97       	sbiw	r26, 0x01	; 1
   1050e:	14 96       	adiw	r26, 0x04	; 4
   10510:	9c 92       	st	X, r9
   10512:	8e 92       	st	-X, r8
   10514:	13 97       	sbiw	r26, 0x03	; 3
   10516:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
   1051a:	0f 90       	pop	r0
   1051c:	0f 90       	pop	r0
   1051e:	0f 90       	pop	r0
   10520:	0f 90       	pop	r0
					}
				    lcd_print(2+(iNozzle%2),1+(iNozzle/2)*11,lcdteks);
   10522:	80 91 8f 02 	lds	r24, 0x028F
   10526:	68 2f       	mov	r22, r24
   10528:	66 95       	lsr	r22
   1052a:	67 9d       	mul	r22, r7
   1052c:	b0 01       	movw	r22, r0
   1052e:	11 24       	eor	r1, r1
   10530:	6f 5f       	subi	r22, 0xFF	; 255
   10532:	81 70       	andi	r24, 0x01	; 1
   10534:	8e 5f       	subi	r24, 0xFE	; 254
   10536:	a7 01       	movw	r20, r14
   10538:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
                     stLocalAccount=laSelectBalanceType;
					}else
                {
				//MultiProductDisplay Select:
				//Load Nozzle Configuration
				for(iNozzle=0;iNozzle<4;iNozzle++){
   1053c:	80 91 8f 02 	lds	r24, 0x028F
   10540:	8f 5f       	subi	r24, 0xFF	; 255
   10542:	80 93 8f 02 	sts	0x028F, r24
   10546:	e0 91 8f 02 	lds	r30, 0x028F
   1054a:	e4 30       	cpi	r30, 0x04	; 4
   1054c:	08 f4       	brcc	.+2      	; 0x10550 <FMenuLocalAccount+0x66a>
   1054e:	96 cf       	rjmp	.-212    	; 0x1047c <FMenuLocalAccount+0x596>
					else{
					       sprintf_P(lcdteks,PSTR("     "));					
					}
				    lcd_print(2+(iNozzle%2),1+(iNozzle/2)*11,lcdteks);
				}
	            lcd_printf(4,1,PSTR("[*]Back             "));   //"[*]Back             "				
   10550:	84 e0       	ldi	r24, 0x04	; 4
   10552:	61 e0       	ldi	r22, 0x01	; 1
   10554:	44 ef       	ldi	r20, 0xF4	; 244
   10556:	51 e2       	ldi	r21, 0x21	; 33
   10558:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
				stLocalAccount=laSelectProductInput;
   1055c:	8c e0       	ldi	r24, 0x0C	; 12
   1055e:	4b cd       	rjmp	.-1386   	; 0xfff6 <FMenuLocalAccount+0x110>
				}
		        break; 
           case laSelectProductInput:
				KeyPressed=_key_scan(1);
   10560:	81 e0       	ldi	r24, 0x01	; 1
   10562:	0e 94 f6 a5 	call	0x14bec	; 0x14bec <_key_scan>
   10566:	e8 2e       	mov	r14, r24
			    KeyChar=_key_btn(KeyPressed);
   10568:	0e 94 57 a5 	call	0x14aae	; 0x14aae <_key_btn>
				if ((KeyChar>='1')&&(KeyChar<='4')){
   1056c:	81 53       	subi	r24, 0x31	; 49
   1056e:	84 30       	cpi	r24, 0x04	; 4
   10570:	e8 f5       	brcc	.+122    	; 0x105ec <FMenuLocalAccount+0x706>
				    iNozzle=KeyChar-'1';
   10572:	80 93 8f 02 	sts	0x028F, r24
				    eeprom_read_block((void*) &ProductName, (const void*) &DefProductName[ProductID[iNozzle]-1],10);
   10576:	e8 2f       	mov	r30, r24
   10578:	f0 e0       	ldi	r31, 0x00	; 0
   1057a:	e7 57       	subi	r30, 0x77	; 119
   1057c:	fd 4f       	sbci	r31, 0xFD	; 253
   1057e:	60 81       	ld	r22, Z
   10580:	bd e0       	ldi	r27, 0x0D	; 13
   10582:	fb 2e       	mov	r15, r27
   10584:	6f 9d       	mul	r22, r15
   10586:	b0 01       	movw	r22, r0
   10588:	11 24       	eor	r1, r1
   1058a:	62 55       	subi	r22, 0x52	; 82
   1058c:	7f 4f       	sbci	r23, 0xFF	; 255
   1058e:	8e 01       	movw	r16, r28
   10590:	0f 5f       	subi	r16, 0xFF	; 255
   10592:	1f 4f       	sbci	r17, 0xFF	; 255
   10594:	c8 01       	movw	r24, r16
   10596:	4a e0       	ldi	r20, 0x0A	; 10
   10598:	50 e0       	ldi	r21, 0x00	; 0
   1059a:	0e 94 b9 ac 	call	0x15972	; 0x15972 <__eerd_block_m128>
					sprintf_P(strProduct,PSTR("%s"),ProductName);
   1059e:	00 d0       	rcall	.+0      	; 0x105a0 <FMenuLocalAccount+0x6ba>
   105a0:	00 d0       	rcall	.+0      	; 0x105a2 <FMenuLocalAccount+0x6bc>
   105a2:	00 d0       	rcall	.+0      	; 0x105a4 <FMenuLocalAccount+0x6be>
   105a4:	ed b7       	in	r30, 0x3d	; 61
   105a6:	fe b7       	in	r31, 0x3e	; 62
   105a8:	31 96       	adiw	r30, 0x01	; 1
   105aa:	8e e5       	ldi	r24, 0x5E	; 94
   105ac:	97 e0       	ldi	r25, 0x07	; 7
   105ae:	ad b7       	in	r26, 0x3d	; 61
   105b0:	be b7       	in	r27, 0x3e	; 62
   105b2:	12 96       	adiw	r26, 0x02	; 2
   105b4:	9c 93       	st	X, r25
   105b6:	8e 93       	st	-X, r24
   105b8:	11 97       	sbiw	r26, 0x01	; 1
   105ba:	81 ef       	ldi	r24, 0xF1	; 241
   105bc:	91 e2       	ldi	r25, 0x21	; 33
   105be:	93 83       	std	Z+3, r25	; 0x03
   105c0:	82 83       	std	Z+2, r24	; 0x02
   105c2:	15 83       	std	Z+5, r17	; 0x05
   105c4:	04 83       	std	Z+4, r16	; 0x04
   105c6:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
					NozzleID=iNozzle+1;
   105ca:	80 91 8f 02 	lds	r24, 0x028F
   105ce:	8f 5f       	subi	r24, 0xFF	; 255
   105d0:	80 93 6d 07 	sts	0x076D, r24
                    stLocalAccount=laSelectBalanceType;
   105d4:	f0 92 5b 01 	sts	0x015B, r15
					lcd_clear();
   105d8:	ed b7       	in	r30, 0x3d	; 61
   105da:	fe b7       	in	r31, 0x3e	; 62
   105dc:	36 96       	adiw	r30, 0x06	; 6
   105de:	0f b6       	in	r0, 0x3f	; 63
   105e0:	f8 94       	cli
   105e2:	fe bf       	out	0x3e, r31	; 62
   105e4:	0f be       	out	0x3f, r0	; 63
   105e6:	ed bf       	out	0x3d, r30	; 61
   105e8:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
					}                
				if (KeyPressed==_KEY_CANCEL)stLocalAccount=laSelectFIP;//Back To Pump Selection
   105ec:	f7 ee       	ldi	r31, 0xE7	; 231
   105ee:	ef 16       	cp	r14, r31
   105f0:	09 f0       	breq	.+2      	; 0x105f4 <FMenuLocalAccount+0x70e>
   105f2:	18 c5       	rjmp	.+2608   	; 0x11024 <FMenuLocalAccount+0x113e>
   105f4:	89 e0       	ldi	r24, 0x09	; 9
   105f6:	ff cc       	rjmp	.-1538   	; 0xfff6 <FMenuLocalAccount+0x110>
		        break;
           case laSelectBalanceType:
		        lcd_clear();
   105f8:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
		        sprintf_P(lcdteks,PSTR("P%s-%s "),strFIP,strProduct);      
   105fc:	2d b7       	in	r18, 0x3d	; 61
   105fe:	3e b7       	in	r19, 0x3e	; 62
   10600:	28 50       	subi	r18, 0x08	; 8
   10602:	30 40       	sbci	r19, 0x00	; 0
   10604:	0f b6       	in	r0, 0x3f	; 63
   10606:	f8 94       	cli
   10608:	3e bf       	out	0x3e, r19	; 62
   1060a:	0f be       	out	0x3f, r0	; 63
   1060c:	2d bf       	out	0x3d, r18	; 61
   1060e:	ed b7       	in	r30, 0x3d	; 61
   10610:	fe b7       	in	r31, 0x3e	; 62
   10612:	31 96       	adiw	r30, 0x01	; 1
   10614:	8e 01       	movw	r16, r28
   10616:	04 5f       	subi	r16, 0xF4	; 244
   10618:	1f 4f       	sbci	r17, 0xFF	; 255
   1061a:	ad b7       	in	r26, 0x3d	; 61
   1061c:	be b7       	in	r27, 0x3e	; 62
   1061e:	12 96       	adiw	r26, 0x02	; 2
   10620:	1c 93       	st	X, r17
   10622:	0e 93       	st	-X, r16
   10624:	11 97       	sbiw	r26, 0x01	; 1
   10626:	89 ee       	ldi	r24, 0xE9	; 233
   10628:	91 e2       	ldi	r25, 0x21	; 33
   1062a:	93 83       	std	Z+3, r25	; 0x03
   1062c:	82 83       	std	Z+2, r24	; 0x02
   1062e:	81 e9       	ldi	r24, 0x91	; 145
   10630:	92 e0       	ldi	r25, 0x02	; 2
   10632:	95 83       	std	Z+5, r25	; 0x05
   10634:	84 83       	std	Z+4, r24	; 0x04
   10636:	8e e5       	ldi	r24, 0x5E	; 94
   10638:	97 e0       	ldi	r25, 0x07	; 7
   1063a:	97 83       	std	Z+7, r25	; 0x07
   1063c:	86 83       	std	Z+6, r24	; 0x06
   1063e:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
				 lcd_print(1,1,lcdteks);                        //"P01-Pertamax        "                                                                      
   10642:	ed b7       	in	r30, 0x3d	; 61
   10644:	fe b7       	in	r31, 0x3e	; 62
   10646:	38 96       	adiw	r30, 0x08	; 8
   10648:	0f b6       	in	r0, 0x3f	; 63
   1064a:	f8 94       	cli
   1064c:	fe bf       	out	0x3e, r31	; 62
   1064e:	0f be       	out	0x3f, r0	; 63
   10650:	ed bf       	out	0x3d, r30	; 61
   10652:	81 e0       	ldi	r24, 0x01	; 1
   10654:	61 e0       	ldi	r22, 0x01	; 1
   10656:	a8 01       	movw	r20, r16
   10658:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
		        lcd_printf(2,1,PSTR("[1]Volume           "));   //"[1]Premium          "                                                                      
   1065c:	82 e0       	ldi	r24, 0x02	; 2
   1065e:	61 e0       	ldi	r22, 0x01	; 1
   10660:	44 ed       	ldi	r20, 0xD4	; 212
   10662:	51 e2       	ldi	r21, 0x21	; 33
   10664:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
				lcd_printf(3,1,PSTR("[2]Amount           "));   //"[2]Pertamax         "
   10668:	83 e0       	ldi	r24, 0x03	; 3
   1066a:	61 e0       	ldi	r22, 0x01	; 1
   1066c:	4f eb       	ldi	r20, 0xBF	; 191
   1066e:	51 e2       	ldi	r21, 0x21	; 33
   10670:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
				lcd_printf(4,1,PSTR("[*]Back    [#]Next  "));   //"[*]Back             "						        
   10674:	84 e0       	ldi	r24, 0x04	; 4
   10676:	61 e0       	ldi	r22, 0x01	; 1
   10678:	4a ea       	ldi	r20, 0xAA	; 170
   1067a:	51 e2       	ldi	r21, 0x21	; 33
   1067c:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
	            //lcd_printf(4,1,PSTR("[*]Back    [#]Next  "));   //"[*]Back             "						        
                stLocalAccount=laSelectBalanceTypeInput;   
   10680:	8e e0       	ldi	r24, 0x0E	; 14
   10682:	b9 cc       	rjmp	.-1678   	; 0xfff6 <FMenuLocalAccount+0x110>
		        break;
           case laSelectBalanceTypeInput:
				KeyPressed=_key_scan(1);
   10684:	81 e0       	ldi	r24, 0x01	; 1
   10686:	0e 94 f6 a5 	call	0x14bec	; 0x14bec <_key_scan>
   1068a:	18 2f       	mov	r17, r24
			    KeyChar=_key_btn(KeyPressed);
   1068c:	0e 94 57 a5 	call	0x14aae	; 0x14aae <_key_btn>
   10690:	98 2f       	mov	r25, r24
				if ((KeyChar>='1')&&(KeyChar<='2')){
   10692:	81 53       	subi	r24, 0x31	; 49
   10694:	82 30       	cpi	r24, 0x02	; 2
   10696:	80 f5       	brcc	.+96     	; 0x106f8 <FMenuLocalAccount+0x812>
                    if(KeyChar=='1'){
   10698:	91 33       	cpi	r25, 0x31	; 49
   1069a:	a1 f4       	brne	.+40     	; 0x106c4 <FMenuLocalAccount+0x7de>
					   BalanceType=1;
   1069c:	81 e0       	ldi	r24, 0x01	; 1
   1069e:	80 93 94 02 	sts	0x0294, r24
					   sprintf_P(strBalanceType,PSTR("V"));
   106a2:	00 d0       	rcall	.+0      	; 0x106a4 <FMenuLocalAccount+0x7be>
   106a4:	00 d0       	rcall	.+0      	; 0x106a6 <FMenuLocalAccount+0x7c0>
   106a6:	83 ea       	ldi	r24, 0xA3	; 163
   106a8:	93 e0       	ldi	r25, 0x03	; 3
   106aa:	ad b7       	in	r26, 0x3d	; 61
   106ac:	be b7       	in	r27, 0x3e	; 62
   106ae:	12 96       	adiw	r26, 0x02	; 2
   106b0:	9c 93       	st	X, r25
   106b2:	8e 93       	st	-X, r24
   106b4:	11 97       	sbiw	r26, 0x01	; 1
   106b6:	88 ea       	ldi	r24, 0xA8	; 168
   106b8:	91 e2       	ldi	r25, 0x21	; 33
   106ba:	14 96       	adiw	r26, 0x04	; 4
   106bc:	9c 93       	st	X, r25
   106be:	8e 93       	st	-X, r24
   106c0:	13 97       	sbiw	r26, 0x03	; 3
   106c2:	11 c0       	rjmp	.+34     	; 0x106e6 <FMenuLocalAccount+0x800>
					   }
					else
                    if(KeyChar=='2'){
   106c4:	92 33       	cpi	r25, 0x32	; 50
   106c6:	a9 f4       	brne	.+42     	; 0x106f2 <FMenuLocalAccount+0x80c>
					   BalanceType=2;
   106c8:	82 e0       	ldi	r24, 0x02	; 2
   106ca:	80 93 94 02 	sts	0x0294, r24
                       sprintf_P(strBalanceType,PSTR("A"));
   106ce:	00 d0       	rcall	.+0      	; 0x106d0 <FMenuLocalAccount+0x7ea>
   106d0:	00 d0       	rcall	.+0      	; 0x106d2 <FMenuLocalAccount+0x7ec>
   106d2:	83 ea       	ldi	r24, 0xA3	; 163
   106d4:	93 e0       	ldi	r25, 0x03	; 3
   106d6:	ed b7       	in	r30, 0x3d	; 61
   106d8:	fe b7       	in	r31, 0x3e	; 62
   106da:	92 83       	std	Z+2, r25	; 0x02
   106dc:	81 83       	std	Z+1, r24	; 0x01
   106de:	86 ea       	ldi	r24, 0xA6	; 166
   106e0:	91 e2       	ldi	r25, 0x21	; 33
   106e2:	94 83       	std	Z+4, r25	; 0x04
   106e4:	83 83       	std	Z+3, r24	; 0x03
   106e6:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
   106ea:	0f 90       	pop	r0
   106ec:	0f 90       	pop	r0
   106ee:	0f 90       	pop	r0
   106f0:	0f 90       	pop	r0
					   }
				    stLocalAccount=laBalanceValue;  
   106f2:	8f e0       	ldi	r24, 0x0F	; 15
   106f4:	80 93 5b 01 	sts	0x015B, r24
					}              
				if (KeyPressed==_KEY_CANCEL){
   106f8:	17 3e       	cpi	r17, 0xE7	; 231
   106fa:	c9 f4       	brne	.+50     	; 0x1072e <FMenuLocalAccount+0x848>
				    if ((ProductID[0]>=1)&&(ProductID[0]<=6)&&(ProductID[1]==0)&&(ProductID[2]==0)&&(ProductID[3]==0))
   106fc:	80 91 89 02 	lds	r24, 0x0289
   10700:	81 50       	subi	r24, 0x01	; 1
   10702:	86 30       	cpi	r24, 0x06	; 6
   10704:	70 f4       	brcc	.+28     	; 0x10722 <FMenuLocalAccount+0x83c>
   10706:	80 91 8a 02 	lds	r24, 0x028A
   1070a:	88 23       	and	r24, r24
   1070c:	51 f4       	brne	.+20     	; 0x10722 <FMenuLocalAccount+0x83c>
   1070e:	80 91 8b 02 	lds	r24, 0x028B
   10712:	88 23       	and	r24, r24
   10714:	31 f4       	brne	.+12     	; 0x10722 <FMenuLocalAccount+0x83c>
   10716:	80 91 8c 02 	lds	r24, 0x028C
   1071a:	88 23       	and	r24, r24
   1071c:	11 f4       	brne	.+4      	; 0x10722 <FMenuLocalAccount+0x83c>
					     stLocalAccount=laSelectFIP;//Back To FIP Select Non MPD
   1071e:	89 e0       	ldi	r24, 0x09	; 9
   10720:	01 c0       	rjmp	.+2      	; 0x10724 <FMenuLocalAccount+0x83e>
                    else stLocalAccount=laSelectProduct;//Back To Product Selection MPD
   10722:	8b e0       	ldi	r24, 0x0B	; 11
   10724:	80 93 5b 01 	sts	0x015B, r24
					lcd_clear();
   10728:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
   1072c:	7b c4       	rjmp	.+2294   	; 0x11024 <FMenuLocalAccount+0x113e>
					}
                else
				if (KeyPressed==_KEY_ENTER){
   1072e:	17 3b       	cpi	r17, 0xB7	; 183
   10730:	09 f0       	breq	.+2      	; 0x10734 <FMenuLocalAccount+0x84e>
   10732:	78 c4       	rjmp	.+2288   	; 0x11024 <FMenuLocalAccount+0x113e>
				    BalanceType=1;
   10734:	11 e0       	ldi	r17, 0x01	; 1
   10736:	10 93 94 02 	sts	0x0294, r17
					sprintf_P(strBalanceType,PSTR("A"));
   1073a:	00 d0       	rcall	.+0      	; 0x1073c <FMenuLocalAccount+0x856>
   1073c:	00 d0       	rcall	.+0      	; 0x1073e <FMenuLocalAccount+0x858>
   1073e:	83 ea       	ldi	r24, 0xA3	; 163
   10740:	93 e0       	ldi	r25, 0x03	; 3
   10742:	ad b7       	in	r26, 0x3d	; 61
   10744:	be b7       	in	r27, 0x3e	; 62
   10746:	12 96       	adiw	r26, 0x02	; 2
   10748:	9c 93       	st	X, r25
   1074a:	8e 93       	st	-X, r24
   1074c:	11 97       	sbiw	r26, 0x01	; 1
   1074e:	84 ea       	ldi	r24, 0xA4	; 164
   10750:	91 e2       	ldi	r25, 0x21	; 33
   10752:	14 96       	adiw	r26, 0x04	; 4
   10754:	9c 93       	st	X, r25
   10756:	8e 93       	st	-X, r24
   10758:	13 97       	sbiw	r26, 0x03	; 3
   1075a:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
					//sprintf_P(strBalanceValue,PSTR("999"));
					IsFullAuthorized=True;
   1075e:	10 93 86 02 	sts	0x0286, r17
                    stLocalAccount=laOdometer;//FullAuthorized
   10762:	81 e1       	ldi	r24, 0x11	; 17
   10764:	80 93 5b 01 	sts	0x015B, r24
   10768:	80 e0       	ldi	r24, 0x00	; 0
   1076a:	0f 90       	pop	r0
   1076c:	0f 90       	pop	r0
   1076e:	0f 90       	pop	r0
   10770:	0f 90       	pop	r0
   10772:	59 c4       	rjmp	.+2226   	; 0x11026 <FMenuLocalAccount+0x1140>
					}

		        break;
           case laBalanceValue:
		        lcd_clear();
   10774:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
		        if(BalanceType==1){
   10778:	80 91 94 02 	lds	r24, 0x0294
   1077c:	81 30       	cpi	r24, 0x01	; 1
   1077e:	f1 f5       	brne	.+124    	; 0x107fc <FMenuLocalAccount+0x916>
		           sprintf_P(lcdteks,PSTR("P%s-%s "),strFIP,strProduct);      
   10780:	ed b7       	in	r30, 0x3d	; 61
   10782:	fe b7       	in	r31, 0x3e	; 62
   10784:	38 97       	sbiw	r30, 0x08	; 8
   10786:	0f b6       	in	r0, 0x3f	; 63
   10788:	f8 94       	cli
   1078a:	fe bf       	out	0x3e, r31	; 62
   1078c:	0f be       	out	0x3f, r0	; 63
   1078e:	ed bf       	out	0x3d, r30	; 61
   10790:	31 96       	adiw	r30, 0x01	; 1
   10792:	8e 01       	movw	r16, r28
   10794:	04 5f       	subi	r16, 0xF4	; 244
   10796:	1f 4f       	sbci	r17, 0xFF	; 255
   10798:	ad b7       	in	r26, 0x3d	; 61
   1079a:	be b7       	in	r27, 0x3e	; 62
   1079c:	12 96       	adiw	r26, 0x02	; 2
   1079e:	1c 93       	st	X, r17
   107a0:	0e 93       	st	-X, r16
   107a2:	11 97       	sbiw	r26, 0x01	; 1
   107a4:	8c e9       	ldi	r24, 0x9C	; 156
   107a6:	91 e2       	ldi	r25, 0x21	; 33
   107a8:	93 83       	std	Z+3, r25	; 0x03
   107aa:	82 83       	std	Z+2, r24	; 0x02
   107ac:	81 e9       	ldi	r24, 0x91	; 145
   107ae:	92 e0       	ldi	r25, 0x02	; 2
   107b0:	95 83       	std	Z+5, r25	; 0x05
   107b2:	84 83       	std	Z+4, r24	; 0x04
   107b4:	8e e5       	ldi	r24, 0x5E	; 94
   107b6:	97 e0       	ldi	r25, 0x07	; 7
   107b8:	97 83       	std	Z+7, r25	; 0x07
   107ba:	86 83       	std	Z+6, r24	; 0x06
   107bc:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
				    lcd_print(1,1,lcdteks);                        //"P01-Pertamax        "                                                                      
   107c0:	ed b7       	in	r30, 0x3d	; 61
   107c2:	fe b7       	in	r31, 0x3e	; 62
   107c4:	38 96       	adiw	r30, 0x08	; 8
   107c6:	0f b6       	in	r0, 0x3f	; 63
   107c8:	f8 94       	cli
   107ca:	fe bf       	out	0x3e, r31	; 62
   107cc:	0f be       	out	0x3f, r0	; 63
   107ce:	ed bf       	out	0x3d, r30	; 61
   107d0:	81 e0       	ldi	r24, 0x01	; 1
   107d2:	61 e0       	ldi	r22, 0x01	; 1
   107d4:	a8 01       	movw	r20, r16
   107d6:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
		           lcd_printf(2,1,PSTR("[1]Volume:_         "));   //"[1]Volume:_         "                                                                      
   107da:	82 e0       	ldi	r24, 0x02	; 2
   107dc:	61 e0       	ldi	r22, 0x01	; 1
   107de:	47 e8       	ldi	r20, 0x87	; 135
   107e0:	51 e2       	ldi	r21, 0x21	; 33
   107e2:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
				   lcd_printf(3,1,PSTR("                    "));   //"                    "
   107e6:	83 e0       	ldi	r24, 0x03	; 3
   107e8:	61 e0       	ldi	r22, 0x01	; 1
   107ea:	42 e7       	ldi	r20, 0x72	; 114
   107ec:	51 e2       	ldi	r21, 0x21	; 33
   107ee:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
	               lcd_printf(4,1,PSTR("[*]Back  [#]OK      "));   //"[*]Back  [#]OK     "						        
   107f2:	84 e0       	ldi	r24, 0x04	; 4
   107f4:	61 e0       	ldi	r22, 0x01	; 1
   107f6:	4d e5       	ldi	r20, 0x5D	; 93
   107f8:	51 e2       	ldi	r21, 0x21	; 33
   107fa:	43 c0       	rjmp	.+134    	; 0x10882 <FMenuLocalAccount+0x99c>
				   }
                else
		        if(BalanceType==2){
   107fc:	82 30       	cpi	r24, 0x02	; 2
   107fe:	09 f0       	breq	.+2      	; 0x10802 <FMenuLocalAccount+0x91c>
   10800:	42 c0       	rjmp	.+132    	; 0x10886 <FMenuLocalAccount+0x9a0>
		           sprintf_P(lcdteks,PSTR("P%s-%s "),strFIP,strProduct);      
   10802:	2d b7       	in	r18, 0x3d	; 61
   10804:	3e b7       	in	r19, 0x3e	; 62
   10806:	28 50       	subi	r18, 0x08	; 8
   10808:	30 40       	sbci	r19, 0x00	; 0
   1080a:	0f b6       	in	r0, 0x3f	; 63
   1080c:	f8 94       	cli
   1080e:	3e bf       	out	0x3e, r19	; 62
   10810:	0f be       	out	0x3f, r0	; 63
   10812:	2d bf       	out	0x3d, r18	; 61
   10814:	ed b7       	in	r30, 0x3d	; 61
   10816:	fe b7       	in	r31, 0x3e	; 62
   10818:	31 96       	adiw	r30, 0x01	; 1
   1081a:	8e 01       	movw	r16, r28
   1081c:	04 5f       	subi	r16, 0xF4	; 244
   1081e:	1f 4f       	sbci	r17, 0xFF	; 255
   10820:	ad b7       	in	r26, 0x3d	; 61
   10822:	be b7       	in	r27, 0x3e	; 62
   10824:	12 96       	adiw	r26, 0x02	; 2
   10826:	1c 93       	st	X, r17
   10828:	0e 93       	st	-X, r16
   1082a:	11 97       	sbiw	r26, 0x01	; 1
   1082c:	85 e5       	ldi	r24, 0x55	; 85
   1082e:	91 e2       	ldi	r25, 0x21	; 33
   10830:	93 83       	std	Z+3, r25	; 0x03
   10832:	82 83       	std	Z+2, r24	; 0x02
   10834:	81 e9       	ldi	r24, 0x91	; 145
   10836:	92 e0       	ldi	r25, 0x02	; 2
   10838:	95 83       	std	Z+5, r25	; 0x05
   1083a:	84 83       	std	Z+4, r24	; 0x04
   1083c:	8e e5       	ldi	r24, 0x5E	; 94
   1083e:	97 e0       	ldi	r25, 0x07	; 7
   10840:	97 83       	std	Z+7, r25	; 0x07
   10842:	86 83       	std	Z+6, r24	; 0x06
   10844:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
				   lcd_print(1,1,lcdteks);                         //"P01-Pertamax        "                                                                      
   10848:	ed b7       	in	r30, 0x3d	; 61
   1084a:	fe b7       	in	r31, 0x3e	; 62
   1084c:	38 96       	adiw	r30, 0x08	; 8
   1084e:	0f b6       	in	r0, 0x3f	; 63
   10850:	f8 94       	cli
   10852:	fe bf       	out	0x3e, r31	; 62
   10854:	0f be       	out	0x3f, r0	; 63
   10856:	ed bf       	out	0x3d, r30	; 61
   10858:	81 e0       	ldi	r24, 0x01	; 1
   1085a:	61 e0       	ldi	r22, 0x01	; 1
   1085c:	a8 01       	movw	r20, r16
   1085e:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
		           lcd_printf(2,1,PSTR("                    "));   //"                    "                                                                      
   10862:	82 e0       	ldi	r24, 0x02	; 2
   10864:	61 e0       	ldi	r22, 0x01	; 1
   10866:	40 e4       	ldi	r20, 0x40	; 64
   10868:	51 e2       	ldi	r21, 0x21	; 33
   1086a:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
				   lcd_printf(3,1,PSTR("[2]Amount:_         "));   //"[2]Amount:_         "
   1086e:	83 e0       	ldi	r24, 0x03	; 3
   10870:	61 e0       	ldi	r22, 0x01	; 1
   10872:	4b e2       	ldi	r20, 0x2B	; 43
   10874:	51 e2       	ldi	r21, 0x21	; 33
   10876:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
	               lcd_printf(4,1,PSTR("[*]Back  [#]OK      "));   //"[*]Back  [#]OK      "			        
   1087a:	84 e0       	ldi	r24, 0x04	; 4
   1087c:	61 e0       	ldi	r22, 0x01	; 1
   1087e:	46 e1       	ldi	r20, 0x16	; 22
   10880:	51 e2       	ldi	r21, 0x21	; 33
   10882:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
				   }
                iLoop=0;
   10886:	10 92 85 02 	sts	0x0285, r1
   1088a:	10 92 84 02 	sts	0x0284, r1
				iValuePos=0;
   1088e:	10 92 90 02 	sts	0x0290, r1
				//ValueChar[iValuePos]=' ';
		        stLocalAccount=laBalanceValueInput;  
   10892:	80 e1       	ldi	r24, 0x10	; 16
   10894:	b0 cb       	rjmp	.-2208   	; 0xfff6 <FMenuLocalAccount+0x110>
		        break; 
           case laBalanceValueInput:
		        uiResult=UserInput(UI_NUMBER_R,(1+BalanceType),11,strBalanceValue,0,10); 
   10896:	60 91 94 02 	lds	r22, 0x0294
   1089a:	6f 5f       	subi	r22, 0xFF	; 255
   1089c:	81 e0       	ldi	r24, 0x01	; 1
   1089e:	4b e0       	ldi	r20, 0x0B	; 11
   108a0:	2f e1       	ldi	r18, 0x1F	; 31
   108a2:	3c e0       	ldi	r19, 0x0C	; 12
   108a4:	00 e0       	ldi	r16, 0x00	; 0
   108a6:	10 e0       	ldi	r17, 0x00	; 0
   108a8:	aa e0       	ldi	r26, 0x0A	; 10
   108aa:	ea 2e       	mov	r14, r26
   108ac:	0e 94 47 67 	call	0xce8e	; 0xce8e <UserInput>
				if (uiResult==USER_CANCEL){
   108b0:	81 30       	cpi	r24, 0x01	; 1
   108b2:	39 f4       	brne	.+14     	; 0x108c2 <FMenuLocalAccount+0x9dc>
				    lcd_clear();
   108b4:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
   108b8:	88 ea       	ldi	r24, 0xA8	; 168
   108ba:	91 e6       	ldi	r25, 0x61	; 97
   108bc:	01 97       	sbiw	r24, 0x01	; 1
   108be:	f1 f7       	brne	.-4      	; 0x108bc <FMenuLocalAccount+0x9d6>
   108c0:	f9 c0       	rjmp	.+498    	; 0x10ab4 <FMenuLocalAccount+0xbce>
					_delay_ms(100);		        
				    stLocalAccount=laSelectBalanceType;		        
					}
				else
				if (uiResult==USER_OK){				    
   108c2:	83 30       	cpi	r24, 0x03	; 3
   108c4:	09 f0       	breq	.+2      	; 0x108c8 <FMenuLocalAccount+0x9e2>
   108c6:	ae c3       	rjmp	.+1884   	; 0x11024 <FMenuLocalAccount+0x113e>
				    stLocalAccount=laOdometer;
   108c8:	81 e1       	ldi	r24, 0x11	; 17
   108ca:	80 93 5b 01 	sts	0x015B, r24
					lcd_clear();
   108ce:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
   108d2:	88 ea       	ldi	r24, 0xA8	; 168
   108d4:	91 e6       	ldi	r25, 0x61	; 97
   108d6:	01 97       	sbiw	r24, 0x01	; 1
   108d8:	f1 f7       	brne	.-4      	; 0x108d6 <FMenuLocalAccount+0x9f0>
   108da:	a4 c3       	rjmp	.+1864   	; 0x11024 <FMenuLocalAccount+0x113e>
					_delay_ms(100);		        
					}
*/
		        break;
           case laOdometer://GetOdometer			
		        lcd_clear();
   108dc:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
				if (IsFullAuthorized==True){
   108e0:	80 91 86 02 	lds	r24, 0x0286
   108e4:	81 30       	cpi	r24, 0x01	; 1
   108e6:	09 f0       	breq	.+2      	; 0x108ea <FMenuLocalAccount+0xa04>
   108e8:	4a c0       	rjmp	.+148    	; 0x1097e <FMenuLocalAccount+0xa98>
				    lcd_printf(1,1,PSTR("Pump Product   Full"));
   108ea:	61 e0       	ldi	r22, 0x01	; 1
   108ec:	42 e0       	ldi	r20, 0x02	; 2
   108ee:	51 e2       	ldi	r21, 0x21	; 33
   108f0:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
					sprintf_P(lcdteks,PSTR("  %s %s "),strFIP,strProduct);    lcd_print(2,1,lcdteks);    //"P01  Pertamax       "
   108f4:	2d b7       	in	r18, 0x3d	; 61
   108f6:	3e b7       	in	r19, 0x3e	; 62
   108f8:	28 50       	subi	r18, 0x08	; 8
   108fa:	30 40       	sbci	r19, 0x00	; 0
   108fc:	0f b6       	in	r0, 0x3f	; 63
   108fe:	f8 94       	cli
   10900:	3e bf       	out	0x3e, r19	; 62
   10902:	0f be       	out	0x3f, r0	; 63
   10904:	2d bf       	out	0x3d, r18	; 61
   10906:	ed b7       	in	r30, 0x3d	; 61
   10908:	fe b7       	in	r31, 0x3e	; 62
   1090a:	31 96       	adiw	r30, 0x01	; 1
   1090c:	8e 01       	movw	r16, r28
   1090e:	04 5f       	subi	r16, 0xF4	; 244
   10910:	1f 4f       	sbci	r17, 0xFF	; 255
   10912:	ad b7       	in	r26, 0x3d	; 61
   10914:	be b7       	in	r27, 0x3e	; 62
   10916:	12 96       	adiw	r26, 0x02	; 2
   10918:	1c 93       	st	X, r17
   1091a:	0e 93       	st	-X, r16
   1091c:	11 97       	sbiw	r26, 0x01	; 1
   1091e:	89 ef       	ldi	r24, 0xF9	; 249
   10920:	90 e2       	ldi	r25, 0x20	; 32
   10922:	93 83       	std	Z+3, r25	; 0x03
   10924:	82 83       	std	Z+2, r24	; 0x02
   10926:	81 e9       	ldi	r24, 0x91	; 145
   10928:	92 e0       	ldi	r25, 0x02	; 2
   1092a:	95 83       	std	Z+5, r25	; 0x05
   1092c:	84 83       	std	Z+4, r24	; 0x04
   1092e:	8e e5       	ldi	r24, 0x5E	; 94
   10930:	97 e0       	ldi	r25, 0x07	; 7
   10932:	97 83       	std	Z+7, r25	; 0x07
   10934:	86 83       	std	Z+6, r24	; 0x06
   10936:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
   1093a:	ed b7       	in	r30, 0x3d	; 61
   1093c:	fe b7       	in	r31, 0x3e	; 62
   1093e:	38 96       	adiw	r30, 0x08	; 8
   10940:	0f b6       	in	r0, 0x3f	; 63
   10942:	f8 94       	cli
   10944:	fe bf       	out	0x3e, r31	; 62
   10946:	0f be       	out	0x3f, r0	; 63
   10948:	ed bf       	out	0x3d, r30	; 61
   1094a:	82 e0       	ldi	r24, 0x02	; 2
   1094c:	61 e0       	ldi	r22, 0x01	; 1
   1094e:	a8 01       	movw	r20, r16
   10950:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
		            sprintf_P(lcdteks,PSTR("  Tank"));            lcd_print(2,14,lcdteks);   //"P01  Pertamax 500000"
   10954:	00 d0       	rcall	.+0      	; 0x10956 <FMenuLocalAccount+0xa70>
   10956:	00 d0       	rcall	.+0      	; 0x10958 <FMenuLocalAccount+0xa72>
   10958:	ad b7       	in	r26, 0x3d	; 61
   1095a:	be b7       	in	r27, 0x3e	; 62
   1095c:	12 96       	adiw	r26, 0x02	; 2
   1095e:	1c 93       	st	X, r17
   10960:	0e 93       	st	-X, r16
   10962:	11 97       	sbiw	r26, 0x01	; 1
   10964:	82 ef       	ldi	r24, 0xF2	; 242
   10966:	90 e2       	ldi	r25, 0x20	; 32
   10968:	14 96       	adiw	r26, 0x04	; 4
   1096a:	9c 93       	st	X, r25
   1096c:	8e 93       	st	-X, r24
   1096e:	13 97       	sbiw	r26, 0x03	; 3
   10970:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
   10974:	0f 90       	pop	r0
   10976:	0f 90       	pop	r0
   10978:	0f 90       	pop	r0
   1097a:	0f 90       	pop	r0
   1097c:	5e c0       	rjmp	.+188    	; 0x10a3a <FMenuLocalAccount+0xb54>
				}
                else{
		            if (BalanceType==1) lcd_printf(1,1,PSTR("Pump Product Volume"));
   1097e:	80 91 94 02 	lds	r24, 0x0294
   10982:	81 30       	cpi	r24, 0x01	; 1
   10984:	29 f4       	brne	.+10     	; 0x10990 <FMenuLocalAccount+0xaaa>
   10986:	61 e0       	ldi	r22, 0x01	; 1
   10988:	4e ed       	ldi	r20, 0xDE	; 222
   1098a:	50 e2       	ldi	r21, 0x20	; 32
   1098c:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
                    if (BalanceType==2) lcd_printf(1,1,PSTR("Pump Product Amount"));//"Pump Product  Amount" 
   10990:	80 91 94 02 	lds	r24, 0x0294
   10994:	82 30       	cpi	r24, 0x02	; 2
   10996:	31 f4       	brne	.+12     	; 0x109a4 <FMenuLocalAccount+0xabe>
   10998:	81 e0       	ldi	r24, 0x01	; 1
   1099a:	61 e0       	ldi	r22, 0x01	; 1
   1099c:	4a ec       	ldi	r20, 0xCA	; 202
   1099e:	50 e2       	ldi	r21, 0x20	; 32
   109a0:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
					sprintf_P(lcdteks,PSTR("  %s %s "),strFIP,strProduct);    lcd_print(2,1,lcdteks);    //"P01  Pertamax       "
   109a4:	ed b7       	in	r30, 0x3d	; 61
   109a6:	fe b7       	in	r31, 0x3e	; 62
   109a8:	38 97       	sbiw	r30, 0x08	; 8
   109aa:	0f b6       	in	r0, 0x3f	; 63
   109ac:	f8 94       	cli
   109ae:	fe bf       	out	0x3e, r31	; 62
   109b0:	0f be       	out	0x3f, r0	; 63
   109b2:	ed bf       	out	0x3d, r30	; 61
   109b4:	31 96       	adiw	r30, 0x01	; 1
   109b6:	8e 01       	movw	r16, r28
   109b8:	04 5f       	subi	r16, 0xF4	; 244
   109ba:	1f 4f       	sbci	r17, 0xFF	; 255
   109bc:	ad b7       	in	r26, 0x3d	; 61
   109be:	be b7       	in	r27, 0x3e	; 62
   109c0:	12 96       	adiw	r26, 0x02	; 2
   109c2:	1c 93       	st	X, r17
   109c4:	0e 93       	st	-X, r16
   109c6:	11 97       	sbiw	r26, 0x01	; 1
   109c8:	81 ec       	ldi	r24, 0xC1	; 193
   109ca:	90 e2       	ldi	r25, 0x20	; 32
   109cc:	93 83       	std	Z+3, r25	; 0x03
   109ce:	82 83       	std	Z+2, r24	; 0x02
   109d0:	81 e9       	ldi	r24, 0x91	; 145
   109d2:	92 e0       	ldi	r25, 0x02	; 2
   109d4:	95 83       	std	Z+5, r25	; 0x05
   109d6:	84 83       	std	Z+4, r24	; 0x04
   109d8:	8e e5       	ldi	r24, 0x5E	; 94
   109da:	97 e0       	ldi	r25, 0x07	; 7
   109dc:	97 83       	std	Z+7, r25	; 0x07
   109de:	86 83       	std	Z+6, r24	; 0x06
   109e0:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
   109e4:	ed b7       	in	r30, 0x3d	; 61
   109e6:	fe b7       	in	r31, 0x3e	; 62
   109e8:	38 96       	adiw	r30, 0x08	; 8
   109ea:	0f b6       	in	r0, 0x3f	; 63
   109ec:	f8 94       	cli
   109ee:	fe bf       	out	0x3e, r31	; 62
   109f0:	0f be       	out	0x3f, r0	; 63
   109f2:	ed bf       	out	0x3d, r30	; 61
   109f4:	82 e0       	ldi	r24, 0x02	; 2
   109f6:	61 e0       	ldi	r22, 0x01	; 1
   109f8:	a8 01       	movw	r20, r16
   109fa:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
		            sprintf_P(lcdteks,PSTR("%s "),strBalanceValue);            lcd_print(2,14,lcdteks);   //"P01  Pertamax 500000"
   109fe:	00 d0       	rcall	.+0      	; 0x10a00 <FMenuLocalAccount+0xb1a>
   10a00:	00 d0       	rcall	.+0      	; 0x10a02 <FMenuLocalAccount+0xb1c>
   10a02:	00 d0       	rcall	.+0      	; 0x10a04 <FMenuLocalAccount+0xb1e>
   10a04:	ed b7       	in	r30, 0x3d	; 61
   10a06:	fe b7       	in	r31, 0x3e	; 62
   10a08:	31 96       	adiw	r30, 0x01	; 1
   10a0a:	ad b7       	in	r26, 0x3d	; 61
   10a0c:	be b7       	in	r27, 0x3e	; 62
   10a0e:	12 96       	adiw	r26, 0x02	; 2
   10a10:	1c 93       	st	X, r17
   10a12:	0e 93       	st	-X, r16
   10a14:	11 97       	sbiw	r26, 0x01	; 1
   10a16:	8d eb       	ldi	r24, 0xBD	; 189
   10a18:	90 e2       	ldi	r25, 0x20	; 32
   10a1a:	93 83       	std	Z+3, r25	; 0x03
   10a1c:	82 83       	std	Z+2, r24	; 0x02
   10a1e:	8f e1       	ldi	r24, 0x1F	; 31
   10a20:	9c e0       	ldi	r25, 0x0C	; 12
   10a22:	95 83       	std	Z+5, r25	; 0x05
   10a24:	84 83       	std	Z+4, r24	; 0x04
   10a26:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
   10a2a:	ed b7       	in	r30, 0x3d	; 61
   10a2c:	fe b7       	in	r31, 0x3e	; 62
   10a2e:	36 96       	adiw	r30, 0x06	; 6
   10a30:	0f b6       	in	r0, 0x3f	; 63
   10a32:	f8 94       	cli
   10a34:	fe bf       	out	0x3e, r31	; 62
   10a36:	0f be       	out	0x3f, r0	; 63
   10a38:	ed bf       	out	0x3d, r30	; 61
   10a3a:	82 e0       	ldi	r24, 0x02	; 2
   10a3c:	6e e0       	ldi	r22, 0x0E	; 14
   10a3e:	a8 01       	movw	r20, r16
   10a40:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>

				}
				lcd_printf(3,1,PSTR("Odometer:_       "));                                //"Odometer:_          "
   10a44:	83 e0       	ldi	r24, 0x03	; 3
   10a46:	61 e0       	ldi	r22, 0x01	; 1
   10a48:	4b ea       	ldi	r20, 0xAB	; 171
   10a4a:	50 e2       	ldi	r21, 0x20	; 32
   10a4c:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
	            lcd_printf(4,1,PSTR("[*]Back  [#]OK   "));                                //"[*]Back  [#]OK      "						        
   10a50:	84 e0       	ldi	r24, 0x04	; 4
   10a52:	61 e0       	ldi	r22, 0x01	; 1
   10a54:	49 e9       	ldi	r20, 0x99	; 153
   10a56:	50 e2       	ldi	r21, 0x20	; 32
   10a58:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
				ClearMem(strOdometer);
   10a5c:	83 ec       	ldi	r24, 0xC3	; 195
   10a5e:	93 e0       	ldi	r25, 0x03	; 3
   10a60:	0e 94 f1 a4 	call	0x149e2	; 0x149e2 <ClearMem>
		        stLocalAccount=laOdometerInput;
   10a64:	82 e1       	ldi	r24, 0x12	; 18
   10a66:	c7 ca       	rjmp	.-2674   	; 0xfff6 <FMenuLocalAccount+0x110>
		        break;
           case laOdometerInput:
				uiResult=UserInput(UI_NUMBER_R,3,10,strOdometer,0,10);
   10a68:	f3 ec       	ldi	r31, 0xC3	; 195
   10a6a:	cf 2e       	mov	r12, r31
   10a6c:	f3 e0       	ldi	r31, 0x03	; 3
   10a6e:	df 2e       	mov	r13, r31
   10a70:	81 e0       	ldi	r24, 0x01	; 1
   10a72:	63 e0       	ldi	r22, 0x03	; 3
   10a74:	4a e0       	ldi	r20, 0x0A	; 10
   10a76:	96 01       	movw	r18, r12
   10a78:	00 e0       	ldi	r16, 0x00	; 0
   10a7a:	10 e0       	ldi	r17, 0x00	; 0
   10a7c:	ea e0       	ldi	r30, 0x0A	; 10
   10a7e:	ee 2e       	mov	r14, r30
   10a80:	0e 94 47 67 	call	0xce8e	; 0xce8e <UserInput>
				if (uiResult==USER_OK){
   10a84:	83 30       	cpi	r24, 0x03	; 3
   10a86:	79 f4       	brne	.+30     	; 0x10aa6 <FMenuLocalAccount+0xbc0>
				    if ((strlen(strOdometer)==1)&&(strOdometer[0]=='0'))
   10a88:	f6 01       	movw	r30, r12
   10a8a:	01 90       	ld	r0, Z+
   10a8c:	00 20       	and	r0, r0
   10a8e:	e9 f7       	brne	.-6      	; 0x10a8a <FMenuLocalAccount+0xba4>
   10a90:	e5 5c       	subi	r30, 0xC5	; 197
   10a92:	f3 40       	sbci	r31, 0x03	; 3
   10a94:	31 f4       	brne	.+12     	; 0x10aa2 <FMenuLocalAccount+0xbbc>
   10a96:	80 91 c3 03 	lds	r24, 0x03C3
   10a9a:	80 33       	cpi	r24, 0x30	; 48
   10a9c:	11 f4       	brne	.+4      	; 0x10aa2 <FMenuLocalAccount+0xbbc>
					    strOdometer[0]=0;
   10a9e:	10 92 c3 03 	sts	0x03C3, r1
				    stLocalAccount=laDataConfirm;
   10aa2:	83 e1       	ldi	r24, 0x13	; 19
   10aa4:	a8 ca       	rjmp	.-2736   	; 0xfff6 <FMenuLocalAccount+0x110>
					}
			    else
			    if (uiResult==USER_CANCEL){
   10aa6:	81 30       	cpi	r24, 0x01	; 1
   10aa8:	09 f0       	breq	.+2      	; 0x10aac <FMenuLocalAccount+0xbc6>
   10aaa:	bc c2       	rjmp	.+1400   	; 0x11024 <FMenuLocalAccount+0x113e>
				    if (IsFullAuthorized==True)
   10aac:	80 91 86 02 	lds	r24, 0x0286
   10ab0:	81 30       	cpi	r24, 0x01	; 1
   10ab2:	11 f4       	brne	.+4      	; 0x10ab8 <FMenuLocalAccount+0xbd2>
					     stLocalAccount=laSelectBalanceType;
   10ab4:	8d e0       	ldi	r24, 0x0D	; 13
   10ab6:	9f ca       	rjmp	.-2754   	; 0xfff6 <FMenuLocalAccount+0x110>
					else stLocalAccount=laBalanceValue;		        
   10ab8:	8f e0       	ldi	r24, 0x0F	; 15
   10aba:	9d ca       	rjmp	.-2758   	; 0xfff6 <FMenuLocalAccount+0x110>
				 }
		        break;
           case laDataConfirm: 
		        lcd_clear();
   10abc:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
   10ac0:	ed e2       	ldi	r30, 0x2D	; 45
   10ac2:	f3 e0       	ldi	r31, 0x03	; 3
   10ac4:	de 01       	movw	r26, r28
   10ac6:	90 96       	adiw	r26, 0x20	; 32
	 }Dest[Length]=0;
}
void StringCopyPos(char *Source,char *Dest,char SrcPos,char Length){
     char i;
	 for (i=0;i<Length;i++){
	     Dest[i]=Source[SrcPos+i];
   10ac8:	81 91       	ld	r24, Z+
   10aca:	8d 93       	st	X+, r24
	     Dest[i]=Source[i];
	 }Dest[Length]=0;
}
void StringCopyPos(char *Source,char *Dest,char SrcPos,char Length){
     char i;
	 for (i=0;i<Length;i++){
   10acc:	33 e0       	ldi	r19, 0x03	; 3
   10ace:	e7 33       	cpi	r30, 0x37	; 55
   10ad0:	f3 07       	cpc	r31, r19
   10ad2:	d1 f7       	brne	.-12     	; 0x10ac8 <FMenuLocalAccount+0xbe2>
	     Dest[i]=Source[SrcPos+i];
	 }Dest[Length]=0;
   10ad4:	1a a6       	std	Y+42, r1	; 0x2a
				 }
		        break;
           case laDataConfirm: 
		        lcd_clear();
		        StringCopyPos(strCardHolder,strName,9,10);                                          //Data Confirmation   
                sprintf_P(lcdteks,PSTR("%s "),strName);                  lcd_print(1,1,lcdteks);    //"Iyan The Man        "
   10ad6:	00 d0       	rcall	.+0      	; 0x10ad8 <FMenuLocalAccount+0xbf2>
   10ad8:	00 d0       	rcall	.+0      	; 0x10ada <FMenuLocalAccount+0xbf4>
   10ada:	00 d0       	rcall	.+0      	; 0x10adc <FMenuLocalAccount+0xbf6>
   10adc:	ed b7       	in	r30, 0x3d	; 61
   10ade:	fe b7       	in	r31, 0x3e	; 62
   10ae0:	31 96       	adiw	r30, 0x01	; 1
   10ae2:	8e 01       	movw	r16, r28
   10ae4:	04 5f       	subi	r16, 0xF4	; 244
   10ae6:	1f 4f       	sbci	r17, 0xFF	; 255
   10ae8:	ad b7       	in	r26, 0x3d	; 61
   10aea:	be b7       	in	r27, 0x3e	; 62
   10aec:	12 96       	adiw	r26, 0x02	; 2
   10aee:	1c 93       	st	X, r17
   10af0:	0e 93       	st	-X, r16
   10af2:	11 97       	sbiw	r26, 0x01	; 1
   10af4:	85 e9       	ldi	r24, 0x95	; 149
   10af6:	90 e2       	ldi	r25, 0x20	; 32
   10af8:	93 83       	std	Z+3, r25	; 0x03
   10afa:	82 83       	std	Z+2, r24	; 0x02
   10afc:	ce 01       	movw	r24, r28
   10afe:	80 96       	adiw	r24, 0x20	; 32
   10b00:	95 83       	std	Z+5, r25	; 0x05
   10b02:	84 83       	std	Z+4, r24	; 0x04
   10b04:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
   10b08:	ed b7       	in	r30, 0x3d	; 61
   10b0a:	fe b7       	in	r31, 0x3e	; 62
   10b0c:	36 96       	adiw	r30, 0x06	; 6
   10b0e:	0f b6       	in	r0, 0x3f	; 63
   10b10:	f8 94       	cli
   10b12:	fe bf       	out	0x3e, r31	; 62
   10b14:	0f be       	out	0x3f, r0	; 63
   10b16:	ed bf       	out	0x3d, r30	; 61
   10b18:	81 e0       	ldi	r24, 0x01	; 1
   10b1a:	61 e0       	ldi	r22, 0x01	; 1
   10b1c:	a8 01       	movw	r20, r16
   10b1e:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
		        sprintf_P(lcdteks,PSTR("ID: %s"),strCardID);             lcd_print(2,1,lcdteks);    //"ID1CCDA565 OD:123456"
   10b22:	00 d0       	rcall	.+0      	; 0x10b24 <FMenuLocalAccount+0xc3e>
   10b24:	00 d0       	rcall	.+0      	; 0x10b26 <FMenuLocalAccount+0xc40>
   10b26:	00 d0       	rcall	.+0      	; 0x10b28 <FMenuLocalAccount+0xc42>
   10b28:	ed b7       	in	r30, 0x3d	; 61
   10b2a:	fe b7       	in	r31, 0x3e	; 62
   10b2c:	31 96       	adiw	r30, 0x01	; 1
   10b2e:	ad b7       	in	r26, 0x3d	; 61
   10b30:	be b7       	in	r27, 0x3e	; 62
   10b32:	12 96       	adiw	r26, 0x02	; 2
   10b34:	1c 93       	st	X, r17
   10b36:	0e 93       	st	-X, r16
   10b38:	11 97       	sbiw	r26, 0x01	; 1
   10b3a:	8e e8       	ldi	r24, 0x8E	; 142
   10b3c:	90 e2       	ldi	r25, 0x20	; 32
   10b3e:	93 83       	std	Z+3, r25	; 0x03
   10b40:	82 83       	std	Z+2, r24	; 0x02
   10b42:	89 e8       	ldi	r24, 0x89	; 137
   10b44:	9b e0       	ldi	r25, 0x0B	; 11
   10b46:	95 83       	std	Z+5, r25	; 0x05
   10b48:	84 83       	std	Z+4, r24	; 0x04
   10b4a:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
   10b4e:	ed b7       	in	r30, 0x3d	; 61
   10b50:	fe b7       	in	r31, 0x3e	; 62
   10b52:	36 96       	adiw	r30, 0x06	; 6
   10b54:	0f b6       	in	r0, 0x3f	; 63
   10b56:	f8 94       	cli
   10b58:	fe bf       	out	0x3e, r31	; 62
   10b5a:	0f be       	out	0x3f, r0	; 63
   10b5c:	ed bf       	out	0x3d, r30	; 61
   10b5e:	82 e0       	ldi	r24, 0x02	; 2
   10b60:	61 e0       	ldi	r22, 0x01	; 1
   10b62:	a8 01       	movw	r20, r16
   10b64:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
				sprintf_P(lcdteks,PSTR("%s  %s "),strFIP,strProduct);    lcd_print(3,1,lcdteks);    //"P01  Pertamax 500000"
   10b68:	2d b7       	in	r18, 0x3d	; 61
   10b6a:	3e b7       	in	r19, 0x3e	; 62
   10b6c:	28 50       	subi	r18, 0x08	; 8
   10b6e:	30 40       	sbci	r19, 0x00	; 0
   10b70:	0f b6       	in	r0, 0x3f	; 63
   10b72:	f8 94       	cli
   10b74:	3e bf       	out	0x3e, r19	; 62
   10b76:	0f be       	out	0x3f, r0	; 63
   10b78:	2d bf       	out	0x3d, r18	; 61
   10b7a:	ed b7       	in	r30, 0x3d	; 61
   10b7c:	fe b7       	in	r31, 0x3e	; 62
   10b7e:	31 96       	adiw	r30, 0x01	; 1
   10b80:	ad b7       	in	r26, 0x3d	; 61
   10b82:	be b7       	in	r27, 0x3e	; 62
   10b84:	12 96       	adiw	r26, 0x02	; 2
   10b86:	1c 93       	st	X, r17
   10b88:	0e 93       	st	-X, r16
   10b8a:	11 97       	sbiw	r26, 0x01	; 1
   10b8c:	86 e8       	ldi	r24, 0x86	; 134
   10b8e:	90 e2       	ldi	r25, 0x20	; 32
   10b90:	93 83       	std	Z+3, r25	; 0x03
   10b92:	82 83       	std	Z+2, r24	; 0x02
   10b94:	81 e9       	ldi	r24, 0x91	; 145
   10b96:	92 e0       	ldi	r25, 0x02	; 2
   10b98:	95 83       	std	Z+5, r25	; 0x05
   10b9a:	84 83       	std	Z+4, r24	; 0x04
   10b9c:	8e e5       	ldi	r24, 0x5E	; 94
   10b9e:	97 e0       	ldi	r25, 0x07	; 7
   10ba0:	97 83       	std	Z+7, r25	; 0x07
   10ba2:	86 83       	std	Z+6, r24	; 0x06
   10ba4:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
   10ba8:	ed b7       	in	r30, 0x3d	; 61
   10baa:	fe b7       	in	r31, 0x3e	; 62
   10bac:	38 96       	adiw	r30, 0x08	; 8
   10bae:	0f b6       	in	r0, 0x3f	; 63
   10bb0:	f8 94       	cli
   10bb2:	fe bf       	out	0x3e, r31	; 62
   10bb4:	0f be       	out	0x3f, r0	; 63
   10bb6:	ed bf       	out	0x3d, r30	; 61
   10bb8:	83 e0       	ldi	r24, 0x03	; 3
   10bba:	61 e0       	ldi	r22, 0x01	; 1
   10bbc:	a8 01       	movw	r20, r16
   10bbe:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
		        if (IsFullAuthorized==True){
   10bc2:	80 91 86 02 	lds	r24, 0x0286
   10bc6:	81 30       	cpi	r24, 0x01	; 1
   10bc8:	39 f4       	brne	.+14     	; 0x10bd8 <FMenuLocalAccount+0xcf2>
                    lcd_printf(3,15,PSTR(" Full"));
   10bca:	83 e0       	ldi	r24, 0x03	; 3
   10bcc:	6f e0       	ldi	r22, 0x0F	; 15
   10bce:	40 e8       	ldi	r20, 0x80	; 128
   10bd0:	50 e2       	ldi	r21, 0x20	; 32
   10bd2:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
   10bd6:	23 c0       	rjmp	.+70     	; 0x10c1e <FMenuLocalAccount+0xd38>
				}
				else {
				    sprintf_P(lcdteks,PSTR("%s "),strBalanceValue);          lcd_print(3,15,lcdteks);   //"[*]Back [0]ESC [#]OK " 
   10bd8:	00 d0       	rcall	.+0      	; 0x10bda <FMenuLocalAccount+0xcf4>
   10bda:	00 d0       	rcall	.+0      	; 0x10bdc <FMenuLocalAccount+0xcf6>
   10bdc:	00 d0       	rcall	.+0      	; 0x10bde <FMenuLocalAccount+0xcf8>
   10bde:	ed b7       	in	r30, 0x3d	; 61
   10be0:	fe b7       	in	r31, 0x3e	; 62
   10be2:	31 96       	adiw	r30, 0x01	; 1
   10be4:	ad b7       	in	r26, 0x3d	; 61
   10be6:	be b7       	in	r27, 0x3e	; 62
   10be8:	12 96       	adiw	r26, 0x02	; 2
   10bea:	1c 93       	st	X, r17
   10bec:	0e 93       	st	-X, r16
   10bee:	11 97       	sbiw	r26, 0x01	; 1
   10bf0:	8c e7       	ldi	r24, 0x7C	; 124
   10bf2:	90 e2       	ldi	r25, 0x20	; 32
   10bf4:	93 83       	std	Z+3, r25	; 0x03
   10bf6:	82 83       	std	Z+2, r24	; 0x02
   10bf8:	8f e1       	ldi	r24, 0x1F	; 31
   10bfa:	9c e0       	ldi	r25, 0x0C	; 12
   10bfc:	95 83       	std	Z+5, r25	; 0x05
   10bfe:	84 83       	std	Z+4, r24	; 0x04
   10c00:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
   10c04:	ed b7       	in	r30, 0x3d	; 61
   10c06:	fe b7       	in	r31, 0x3e	; 62
   10c08:	36 96       	adiw	r30, 0x06	; 6
   10c0a:	0f b6       	in	r0, 0x3f	; 63
   10c0c:	f8 94       	cli
   10c0e:	fe bf       	out	0x3e, r31	; 62
   10c10:	0f be       	out	0x3f, r0	; 63
   10c12:	ed bf       	out	0x3d, r30	; 61
   10c14:	83 e0       	ldi	r24, 0x03	; 3
   10c16:	6f e0       	ldi	r22, 0x0F	; 15
   10c18:	a8 01       	movw	r20, r16
   10c1a:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
					}
	            lcd_printf(4,1,PSTR("[*]Back [0]ESC [#]OK"));    
   10c1e:	84 e0       	ldi	r24, 0x04	; 4
   10c20:	61 e0       	ldi	r22, 0x01	; 1
   10c22:	47 e6       	ldi	r20, 0x67	; 103
   10c24:	50 e2       	ldi	r21, 0x20	; 32
   10c26:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
                stLocalAccount=laDataConfirmInput;
   10c2a:	84 e1       	ldi	r24, 0x14	; 20
   10c2c:	e4 c9       	rjmp	.-3128   	; 0xfff6 <FMenuLocalAccount+0x110>
                //while(1){};   
		        break;
           case laDataConfirmInput:
                KeyPressed=_key_scan(1);
   10c2e:	81 e0       	ldi	r24, 0x01	; 1
   10c30:	0e 94 f6 a5 	call	0x14bec	; 0x14bec <_key_scan>
                if (KeyPressed==_KEY_CANCEL)stLocalAccount=laOdometer;		        
   10c34:	87 3e       	cpi	r24, 0xE7	; 231
   10c36:	11 f4       	brne	.+4      	; 0x10c3c <FMenuLocalAccount+0xd56>
   10c38:	81 e1       	ldi	r24, 0x11	; 17
   10c3a:	dd c9       	rjmp	.-3142   	; 0xfff6 <FMenuLocalAccount+0x110>
				else
				if (KeyPressed==_KEY_ENTER)stLocalAccount=laProceedTransaction;
   10c3c:	87 3b       	cpi	r24, 0xB7	; 183
   10c3e:	11 f4       	brne	.+4      	; 0x10c44 <FMenuLocalAccount+0xd5e>
   10c40:	85 e1       	ldi	r24, 0x15	; 21
   10c42:	d9 c9       	rjmp	.-3150   	; 0xfff6 <FMenuLocalAccount+0x110>
				else
				if (KeyPressed==_KEY_0){
   10c44:	87 3d       	cpi	r24, 0xD7	; 215
   10c46:	09 f0       	breq	.+2      	; 0x10c4a <FMenuLocalAccount+0xd64>
   10c48:	ed c1       	rjmp	.+986    	; 0x11024 <FMenuLocalAccount+0x113e>
				   //ShowCancel
				   TimLocAcc=0;
   10c4a:	10 92 ba 01 	sts	0x01BA, r1
                   lcd_clear();
   10c4e:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
				   lcd_printf(1,1,PSTR("Cancel Transaction  "));    //"Cancel Transaction"
   10c52:	81 e0       	ldi	r24, 0x01	; 1
   10c54:	61 e0       	ldi	r22, 0x01	; 1
   10c56:	42 e5       	ldi	r20, 0x52	; 82
   10c58:	50 e2       	ldi	r21, 0x20	; 32
   10c5a:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
   10c5e:	c9 c1       	rjmp	.+914    	; 0x10ff2 <FMenuLocalAccount+0x110c>
				   stLocalAccount=laDelayExit;
				   }
		        break;
           case laProceedTransaction:
		        sendMessage58();
   10c60:	0e 94 6b 7f 	call	0xfed6	; 0xfed6 <sendMessage58>
                RemZeroLead(strCardID);
   10c64:	89 e8       	ldi	r24, 0x89	; 137
   10c66:	9b e0       	ldi	r25, 0x0B	; 11
   10c68:	0e 94 df 26 	call	0x4dbe	; 0x4dbe <RemZeroLead>
                RemZeroLead(strBalanceValue);
   10c6c:	7f e1       	ldi	r23, 0x1F	; 31
   10c6e:	e7 2e       	mov	r14, r23
   10c70:	7c e0       	ldi	r23, 0x0C	; 12
   10c72:	f7 2e       	mov	r15, r23
   10c74:	c7 01       	movw	r24, r14
   10c76:	0e 94 df 26 	call	0x4dbe	; 0x4dbe <RemZeroLead>
				sprintf_P(lcdteks,PSTR("P%s %s "),strFIP,strProduct);       lcd_print(1,1,lcdteks);    //"P01  Pertamax 500000"
   10c7a:	2d b7       	in	r18, 0x3d	; 61
   10c7c:	3e b7       	in	r19, 0x3e	; 62
   10c7e:	28 50       	subi	r18, 0x08	; 8
   10c80:	30 40       	sbci	r19, 0x00	; 0
   10c82:	0f b6       	in	r0, 0x3f	; 63
   10c84:	f8 94       	cli
   10c86:	3e bf       	out	0x3e, r19	; 62
   10c88:	0f be       	out	0x3f, r0	; 63
   10c8a:	2d bf       	out	0x3d, r18	; 61
   10c8c:	ed b7       	in	r30, 0x3d	; 61
   10c8e:	fe b7       	in	r31, 0x3e	; 62
   10c90:	31 96       	adiw	r30, 0x01	; 1
   10c92:	8e 01       	movw	r16, r28
   10c94:	04 5f       	subi	r16, 0xF4	; 244
   10c96:	1f 4f       	sbci	r17, 0xFF	; 255
   10c98:	ad b7       	in	r26, 0x3d	; 61
   10c9a:	be b7       	in	r27, 0x3e	; 62
   10c9c:	12 96       	adiw	r26, 0x02	; 2
   10c9e:	1c 93       	st	X, r17
   10ca0:	0e 93       	st	-X, r16
   10ca2:	11 97       	sbiw	r26, 0x01	; 1
   10ca4:	8a e4       	ldi	r24, 0x4A	; 74
   10ca6:	90 e2       	ldi	r25, 0x20	; 32
   10ca8:	93 83       	std	Z+3, r25	; 0x03
   10caa:	82 83       	std	Z+2, r24	; 0x02
   10cac:	81 e9       	ldi	r24, 0x91	; 145
   10cae:	92 e0       	ldi	r25, 0x02	; 2
   10cb0:	95 83       	std	Z+5, r25	; 0x05
   10cb2:	84 83       	std	Z+4, r24	; 0x04
   10cb4:	8e e5       	ldi	r24, 0x5E	; 94
   10cb6:	97 e0       	ldi	r25, 0x07	; 7
   10cb8:	97 83       	std	Z+7, r25	; 0x07
   10cba:	86 83       	std	Z+6, r24	; 0x06
   10cbc:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
   10cc0:	ed b7       	in	r30, 0x3d	; 61
   10cc2:	fe b7       	in	r31, 0x3e	; 62
   10cc4:	38 96       	adiw	r30, 0x08	; 8
   10cc6:	0f b6       	in	r0, 0x3f	; 63
   10cc8:	f8 94       	cli
   10cca:	fe bf       	out	0x3e, r31	; 62
   10ccc:	0f be       	out	0x3f, r0	; 63
   10cce:	ed bf       	out	0x3d, r30	; 61
   10cd0:	81 e0       	ldi	r24, 0x01	; 1
   10cd2:	61 e0       	ldi	r22, 0x01	; 1
   10cd4:	a8 01       	movw	r20, r16
   10cd6:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
		        sprintf_P(lcdteks,PSTR("%s"),strBalanceValue);              lcd_print(1,15,lcdteks);   //"ID1CCDA565          " 
   10cda:	00 d0       	rcall	.+0      	; 0x10cdc <FMenuLocalAccount+0xdf6>
   10cdc:	00 d0       	rcall	.+0      	; 0x10cde <FMenuLocalAccount+0xdf8>
   10cde:	00 d0       	rcall	.+0      	; 0x10ce0 <FMenuLocalAccount+0xdfa>
   10ce0:	ed b7       	in	r30, 0x3d	; 61
   10ce2:	fe b7       	in	r31, 0x3e	; 62
   10ce4:	31 96       	adiw	r30, 0x01	; 1
   10ce6:	ad b7       	in	r26, 0x3d	; 61
   10ce8:	be b7       	in	r27, 0x3e	; 62
   10cea:	12 96       	adiw	r26, 0x02	; 2
   10cec:	1c 93       	st	X, r17
   10cee:	0e 93       	st	-X, r16
   10cf0:	11 97       	sbiw	r26, 0x01	; 1
   10cf2:	87 e4       	ldi	r24, 0x47	; 71
   10cf4:	90 e2       	ldi	r25, 0x20	; 32
   10cf6:	93 83       	std	Z+3, r25	; 0x03
   10cf8:	82 83       	std	Z+2, r24	; 0x02
   10cfa:	f5 82       	std	Z+5, r15	; 0x05
   10cfc:	e4 82       	std	Z+4, r14	; 0x04
   10cfe:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
   10d02:	ed b7       	in	r30, 0x3d	; 61
   10d04:	fe b7       	in	r31, 0x3e	; 62
   10d06:	36 96       	adiw	r30, 0x06	; 6
   10d08:	0f b6       	in	r0, 0x3f	; 63
   10d0a:	f8 94       	cli
   10d0c:	fe bf       	out	0x3e, r31	; 62
   10d0e:	0f be       	out	0x3f, r0	; 63
   10d10:	ed bf       	out	0x3d, r30	; 61
   10d12:	81 e0       	ldi	r24, 0x01	; 1
   10d14:	6f e0       	ldi	r22, 0x0F	; 15
   10d16:	a8 01       	movw	r20, r16
   10d18:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
                lcd_printf(3,1,PSTR("Mohon Tunggu        "));                                         //"Mohon Tunggu ...    "
   10d1c:	83 e0       	ldi	r24, 0x03	; 3
   10d1e:	61 e0       	ldi	r22, 0x01	; 1
   10d20:	42 e3       	ldi	r20, 0x32	; 50
   10d22:	50 e2       	ldi	r21, 0x20	; 32
   10d24:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		        lcd_printf(4,1,PSTR("                    "));                                  //"                    "
   10d28:	84 e0       	ldi	r24, 0x04	; 4
   10d2a:	61 e0       	ldi	r22, 0x01	; 1
   10d2c:	4d e1       	ldi	r20, 0x1D	; 29
   10d2e:	50 e2       	ldi	r21, 0x20	; 32
   10d30:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
				IsMessage00=False;
   10d34:	10 92 9e 01 	sts	0x019E, r1
				TimLocAcc=0;
   10d38:	10 92 ba 01 	sts	0x01BA, r1
				iLoop=0;iPos=0;iWait=0;
   10d3c:	10 92 85 02 	sts	0x0285, r1
   10d40:	10 92 84 02 	sts	0x0284, r1
   10d44:	10 92 96 02 	sts	0x0296, r1
   10d48:	10 92 95 02 	sts	0x0295, r1
				stLocalAccount=laWaitMessage00;
   10d4c:	87 e1       	ldi	r24, 0x17	; 23
   10d4e:	53 c9       	rjmp	.-3418   	; 0xfff6 <FMenuLocalAccount+0x110>
		        break;
           case laWaitMessage00:
                iLoop++;
   10d50:	80 91 84 02 	lds	r24, 0x0284
   10d54:	90 91 85 02 	lds	r25, 0x0285
   10d58:	01 96       	adiw	r24, 0x01	; 1
   10d5a:	90 93 85 02 	sts	0x0285, r25
   10d5e:	80 93 84 02 	sts	0x0284, r24
				if ((iLoop%MSG_WAIT_TIMOUT)==0){
   10d62:	68 e9       	ldi	r22, 0x98	; 152
   10d64:	7a e3       	ldi	r23, 0x3A	; 58
   10d66:	0e 94 03 aa 	call	0x15406	; 0x15406 <__udivmodhi4>
   10d6a:	89 2b       	or	r24, r25
   10d6c:	e1 f4       	brne	.+56     	; 0x10da6 <FMenuLocalAccount+0xec0>
				   if (iPos<5){
   10d6e:	60 91 96 02 	lds	r22, 0x0296
   10d72:	65 30       	cpi	r22, 0x05	; 5
   10d74:	58 f4       	brcc	.+22     	; 0x10d8c <FMenuLocalAccount+0xea6>
				       iPos++;
   10d76:	6f 5f       	subi	r22, 0xFF	; 255
   10d78:	60 93 96 02 	sts	0x0296, r22
					   lcd_xy(3,(14+iPos));_lcd('.');
   10d7c:	62 5f       	subi	r22, 0xF2	; 242
   10d7e:	83 e0       	ldi	r24, 0x03	; 3
   10d80:	0e 94 3c a4 	call	0x14878	; 0x14878 <lcd_xy>
   10d84:	8e e2       	ldi	r24, 0x2E	; 46
   10d86:	0e 94 16 a4 	call	0x1482c	; 0x1482c <_lcd>
   10d8a:	0d c0       	rjmp	.+26     	; 0x10da6 <FMenuLocalAccount+0xec0>
					   }
				   else{
				       iPos=0;
   10d8c:	10 92 96 02 	sts	0x0296, r1
					   lcd_printf(3,(14+iPos),PSTR("       "));
   10d90:	83 e0       	ldi	r24, 0x03	; 3
   10d92:	6e e0       	ldi	r22, 0x0E	; 14
   10d94:	45 e1       	ldi	r20, 0x15	; 21
   10d96:	50 e2       	ldi	r21, 0x20	; 32
   10d98:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
					   iWait++;
   10d9c:	80 91 95 02 	lds	r24, 0x0295
   10da0:	8f 5f       	subi	r24, 0xFF	; 255
   10da2:	80 93 95 02 	sts	0x0295, r24
					   }
				}
				if (iWait>5){
   10da6:	80 91 95 02 	lds	r24, 0x0295
   10daa:	86 30       	cpi	r24, 0x06	; 6
   10dac:	50 f0       	brcs	.+20     	; 0x10dc2 <FMenuLocalAccount+0xedc>
				    stLocalAccount=laConTimout;
   10dae:	84 e0       	ldi	r24, 0x04	; 4
   10db0:	80 93 5b 01 	sts	0x015B, r24
					TimLocAcc=0;
   10db4:	10 92 ba 01 	sts	0x01BA, r1
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   10db8:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   10dba:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   10dbc:	82 e0       	ldi	r24, 0x02	; 2
   10dbe:	80 93 bc 01 	sts	0x01BC, r24
				if (iWait>5){
				    stLocalAccount=laConTimout;
					TimLocAcc=0;
					system_beep(2);
				    }
				if (IsMessage00==True){
   10dc2:	80 91 9e 01 	lds	r24, 0x019E
   10dc6:	81 30       	cpi	r24, 0x01	; 1
   10dc8:	09 f0       	breq	.+2      	; 0x10dcc <FMenuLocalAccount+0xee6>
   10dca:	2c c1       	rjmp	.+600    	; 0x11024 <FMenuLocalAccount+0x113e>
                    IsMessage00=False;
   10dcc:	10 92 9e 01 	sts	0x019E, r1
				    stLocalAccount=laProcMessage00;
   10dd0:	88 e1       	ldi	r24, 0x18	; 24
   10dd2:	11 c9       	rjmp	.-3550   	; 0xfff6 <FMenuLocalAccount+0x110>
*/
char procMessage00(){
     char Result,strSend[10];
	 Result=MSG00_NACK;
	 //Message57
	 if((rcv_trans[0]==0x01)&&(transLength==MSG00_LENGTH)){
   10dd4:	80 91 1d 09 	lds	r24, 0x091D
   10dd8:	81 30       	cpi	r24, 0x01	; 1
   10dda:	51 f4       	brne	.+20     	; 0x10df0 <FMenuLocalAccount+0xf0a>
   10ddc:	80 91 8b 01 	lds	r24, 0x018B
   10de0:	90 91 8c 01 	lds	r25, 0x018C
   10de4:	8f 97       	sbiw	r24, 0x2f	; 47
   10de6:	21 f4       	brne	.+8      	; 0x10df0 <FMenuLocalAccount+0xf0a>
	     //Reply
		 Result=(CharPosCopy(rcv_trans,37)-'0');
   10de8:	80 91 42 09 	lds	r24, 0x0942
   10dec:	80 53       	subi	r24, 0x30	; 48
   10dee:	01 c0       	rjmp	.+2      	; 0x10df2 <FMenuLocalAccount+0xf0c>
   10df0:	80 e0       	ldi	r24, 0x00	; 0
                    IsMessage00=False;
				    stLocalAccount=laProcMessage00;
					}
		        break;
           case laProcMessage00:
		        LocAccStatus=procMessage00();
   10df2:	80 93 97 02 	sts	0x0297, r24
                lcd_clear();
   10df6:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
		        switch(LocAccStatus){
   10dfa:	10 91 97 02 	lds	r17, 0x0297
   10dfe:	11 30       	cpi	r17, 0x01	; 1
   10e00:	59 f0       	breq	.+22     	; 0x10e18 <FMenuLocalAccount+0xf32>
   10e02:	11 30       	cpi	r17, 0x01	; 1
   10e04:	20 f0       	brcs	.+8      	; 0x10e0e <FMenuLocalAccount+0xf28>
   10e06:	13 30       	cpi	r17, 0x03	; 3
   10e08:	09 f0       	breq	.+2      	; 0x10e0c <FMenuLocalAccount+0xf26>
   10e0a:	c0 c0       	rjmp	.+384    	; 0x10f8c <FMenuLocalAccount+0x10a6>
   10e0c:	1b c0       	rjmp	.+54     	; 0x10e44 <FMenuLocalAccount+0xf5e>
				case MSG00_NACK:
                     lcd_printf(2,1,PSTR("Authorisasi Gagal   "));
   10e0e:	82 e0       	ldi	r24, 0x02	; 2
   10e10:	61 e0       	ldi	r22, 0x01	; 1
   10e12:	40 e0       	ldi	r20, 0x00	; 0
   10e14:	50 e2       	ldi	r21, 0x20	; 32
   10e16:	1a c0       	rjmp	.+52     	; 0x10e4c <FMenuLocalAccount+0xf66>
					 system_beep(2); 
					 stLocalAccount=laDelayExit;
				     break;
                case MSG00_ACK:
				     lcd_printf(2,1,PSTR("Authorisasi Berhasil"));
   10e18:	82 e0       	ldi	r24, 0x02	; 2
   10e1a:	61 e0       	ldi	r22, 0x01	; 1
   10e1c:	4b ee       	ldi	r20, 0xEB	; 235
   10e1e:	5f e1       	ldi	r21, 0x1F	; 31
   10e20:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
				     LocalAccountFIP[nLocalAccount]=FIP_Used;
   10e24:	90 91 8f 01 	lds	r25, 0x018F
   10e28:	e9 2f       	mov	r30, r25
   10e2a:	f0 e0       	ldi	r31, 0x00	; 0
   10e2c:	ea 5a       	subi	r30, 0xAA	; 170
   10e2e:	fc 4f       	sbci	r31, 0xFC	; 252
   10e30:	80 91 88 02 	lds	r24, 0x0288
   10e34:	80 83       	st	Z, r24
					 nLocalAccount++;
   10e36:	9f 5f       	subi	r25, 0xFF	; 255
   10e38:	90 93 8f 01 	sts	0x018F, r25
					 IsViewFillingFIP=True;
   10e3c:	10 93 96 01 	sts	0x0196, r17
					 stLocalAccount=laViewStatus;
   10e40:	86 e1       	ldi	r24, 0x16	; 22
   10e42:	a2 c0       	rjmp	.+324    	; 0x10f88 <FMenuLocalAccount+0x10a2>
				     break;
                case MSG00_NO_FIP:
                     lcd_printf(2,1,PSTR("FIP Tidak Siap    "));
   10e44:	82 e0       	ldi	r24, 0x02	; 2
   10e46:	61 e0       	ldi	r22, 0x01	; 1
   10e48:	48 ed       	ldi	r20, 0xD8	; 216
   10e4a:	5f e1       	ldi	r21, 0x1F	; 31
   10e4c:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   10e50:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   10e52:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   10e54:	82 e0       	ldi	r24, 0x02	; 2
   10e56:	80 93 bc 01 	sts	0x01BC, r24
					 stLocalAccount=laViewStatus;
				     break;
                case MSG00_NO_FIP:
                     lcd_printf(2,1,PSTR("FIP Tidak Siap    "));
					 system_beep(2);
					 stLocalAccount=laDelayExit;
   10e5a:	8e e1       	ldi	r24, 0x1E	; 30
   10e5c:	95 c0       	rjmp	.+298    	; 0x10f88 <FMenuLocalAccount+0x10a2>
				     break;
				}
				TimLocAcc=0;				
		        break;
           case laViewStatus:
                if (TimLocAcc>20)stLocalAccount=laExitLocAcc;//laDisplayTransaction;
   10e5e:	80 91 ba 01 	lds	r24, 0x01BA
   10e62:	85 31       	cpi	r24, 0x15	; 21
   10e64:	08 f4       	brcc	.+2      	; 0x10e68 <FMenuLocalAccount+0xf82>
   10e66:	de c0       	rjmp	.+444    	; 0x11024 <FMenuLocalAccount+0x113e>
   10e68:	cb c0       	rjmp	.+406    	; 0x11000 <FMenuLocalAccount+0x111a>
		        break; 
           case laDisplayTransaction:
		        lcd_clear();
   10e6a:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
                sprintf_P(lcdteks,PSTR("P%s %s "),strFIP,strProduct); lcd_print(1,1,lcdteks);    //"P01  Pertamax 500000"
   10e6e:	2d b7       	in	r18, 0x3d	; 61
   10e70:	3e b7       	in	r19, 0x3e	; 62
   10e72:	28 50       	subi	r18, 0x08	; 8
   10e74:	30 40       	sbci	r19, 0x00	; 0
   10e76:	0f b6       	in	r0, 0x3f	; 63
   10e78:	f8 94       	cli
   10e7a:	3e bf       	out	0x3e, r19	; 62
   10e7c:	0f be       	out	0x3f, r0	; 63
   10e7e:	2d bf       	out	0x3d, r18	; 61
   10e80:	ed b7       	in	r30, 0x3d	; 61
   10e82:	fe b7       	in	r31, 0x3e	; 62
   10e84:	31 96       	adiw	r30, 0x01	; 1
   10e86:	6c e0       	ldi	r22, 0x0C	; 12
   10e88:	e6 2e       	mov	r14, r22
   10e8a:	f1 2c       	mov	r15, r1
   10e8c:	ec 0e       	add	r14, r28
   10e8e:	fd 1e       	adc	r15, r29
   10e90:	ad b7       	in	r26, 0x3d	; 61
   10e92:	be b7       	in	r27, 0x3e	; 62
   10e94:	12 96       	adiw	r26, 0x02	; 2
   10e96:	fc 92       	st	X, r15
   10e98:	ee 92       	st	-X, r14
   10e9a:	11 97       	sbiw	r26, 0x01	; 1
   10e9c:	80 ed       	ldi	r24, 0xD0	; 208
   10e9e:	9f e1       	ldi	r25, 0x1F	; 31
   10ea0:	93 83       	std	Z+3, r25	; 0x03
   10ea2:	82 83       	std	Z+2, r24	; 0x02
   10ea4:	81 e9       	ldi	r24, 0x91	; 145
   10ea6:	92 e0       	ldi	r25, 0x02	; 2
   10ea8:	95 83       	std	Z+5, r25	; 0x05
   10eaa:	84 83       	std	Z+4, r24	; 0x04
   10eac:	8e e5       	ldi	r24, 0x5E	; 94
   10eae:	97 e0       	ldi	r25, 0x07	; 7
   10eb0:	97 83       	std	Z+7, r25	; 0x07
   10eb2:	86 83       	std	Z+6, r24	; 0x06
   10eb4:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
   10eb8:	ed b7       	in	r30, 0x3d	; 61
   10eba:	fe b7       	in	r31, 0x3e	; 62
   10ebc:	38 96       	adiw	r30, 0x08	; 8
   10ebe:	0f b6       	in	r0, 0x3f	; 63
   10ec0:	f8 94       	cli
   10ec2:	fe bf       	out	0x3e, r31	; 62
   10ec4:	0f be       	out	0x3f, r0	; 63
   10ec6:	ed bf       	out	0x3d, r30	; 61
   10ec8:	81 e0       	ldi	r24, 0x01	; 1
   10eca:	61 e0       	ldi	r22, 0x01	; 1
   10ecc:	a7 01       	movw	r20, r14
   10ece:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
		        sprintf_P(lcdteks,PSTR("%s"),strBalanceValue);        lcd_print(1,15,lcdteks);   //"ID1CCDA565          " 
   10ed2:	00 d0       	rcall	.+0      	; 0x10ed4 <FMenuLocalAccount+0xfee>
   10ed4:	00 d0       	rcall	.+0      	; 0x10ed6 <FMenuLocalAccount+0xff0>
   10ed6:	00 d0       	rcall	.+0      	; 0x10ed8 <FMenuLocalAccount+0xff2>
   10ed8:	ed b7       	in	r30, 0x3d	; 61
   10eda:	fe b7       	in	r31, 0x3e	; 62
   10edc:	31 96       	adiw	r30, 0x01	; 1
   10ede:	ad b7       	in	r26, 0x3d	; 61
   10ee0:	be b7       	in	r27, 0x3e	; 62
   10ee2:	12 96       	adiw	r26, 0x02	; 2
   10ee4:	fc 92       	st	X, r15
   10ee6:	ee 92       	st	-X, r14
   10ee8:	11 97       	sbiw	r26, 0x01	; 1
   10eea:	8d ec       	ldi	r24, 0xCD	; 205
   10eec:	9f e1       	ldi	r25, 0x1F	; 31
   10eee:	93 83       	std	Z+3, r25	; 0x03
   10ef0:	82 83       	std	Z+2, r24	; 0x02
   10ef2:	8f e1       	ldi	r24, 0x1F	; 31
   10ef4:	9c e0       	ldi	r25, 0x0C	; 12
   10ef6:	95 83       	std	Z+5, r25	; 0x05
   10ef8:	84 83       	std	Z+4, r24	; 0x04
   10efa:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
   10efe:	ed b7       	in	r30, 0x3d	; 61
   10f00:	fe b7       	in	r31, 0x3e	; 62
   10f02:	36 96       	adiw	r30, 0x06	; 6
   10f04:	0f b6       	in	r0, 0x3f	; 63
   10f06:	f8 94       	cli
   10f08:	fe bf       	out	0x3e, r31	; 62
   10f0a:	0f be       	out	0x3f, r0	; 63
   10f0c:	ed bf       	out	0x3d, r30	; 61
   10f0e:	81 e0       	ldi	r24, 0x01	; 1
   10f10:	6f e0       	ldi	r22, 0x0F	; 15
   10f12:	a7 01       	movw	r20, r14
   10f14:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
                RemSpaceLead(strCardID);
   10f18:	09 e8       	ldi	r16, 0x89	; 137
   10f1a:	1b e0       	ldi	r17, 0x0B	; 11
   10f1c:	c8 01       	movw	r24, r16
   10f1e:	0e 94 27 27 	call	0x4e4e	; 0x4e4e <RemSpaceLead>
				sprintf_P(lcdteks,PSTR("ID: %s"),strCardID);          lcd_print(2,1,lcdteks);
   10f22:	00 d0       	rcall	.+0      	; 0x10f24 <FMenuLocalAccount+0x103e>
   10f24:	00 d0       	rcall	.+0      	; 0x10f26 <FMenuLocalAccount+0x1040>
   10f26:	00 d0       	rcall	.+0      	; 0x10f28 <FMenuLocalAccount+0x1042>
   10f28:	ed b7       	in	r30, 0x3d	; 61
   10f2a:	fe b7       	in	r31, 0x3e	; 62
   10f2c:	31 96       	adiw	r30, 0x01	; 1
   10f2e:	ad b7       	in	r26, 0x3d	; 61
   10f30:	be b7       	in	r27, 0x3e	; 62
   10f32:	12 96       	adiw	r26, 0x02	; 2
   10f34:	fc 92       	st	X, r15
   10f36:	ee 92       	st	-X, r14
   10f38:	11 97       	sbiw	r26, 0x01	; 1
   10f3a:	86 ec       	ldi	r24, 0xC6	; 198
   10f3c:	9f e1       	ldi	r25, 0x1F	; 31
   10f3e:	93 83       	std	Z+3, r25	; 0x03
   10f40:	82 83       	std	Z+2, r24	; 0x02
   10f42:	15 83       	std	Z+5, r17	; 0x05
   10f44:	04 83       	std	Z+4, r16	; 0x04
   10f46:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
   10f4a:	ed b7       	in	r30, 0x3d	; 61
   10f4c:	fe b7       	in	r31, 0x3e	; 62
   10f4e:	36 96       	adiw	r30, 0x06	; 6
   10f50:	0f b6       	in	r0, 0x3f	; 63
   10f52:	f8 94       	cli
   10f54:	fe bf       	out	0x3e, r31	; 62
   10f56:	0f be       	out	0x3f, r0	; 63
   10f58:	ed bf       	out	0x3d, r30	; 61
   10f5a:	82 e0       	ldi	r24, 0x02	; 2
   10f5c:	61 e0       	ldi	r22, 0x01	; 1
   10f5e:	a7 01       	movw	r20, r14
   10f60:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
				TimLocAcc=0;
   10f64:	10 92 ba 01 	sts	0x01BA, r1
		        IsCompleteFilling=False;
   10f68:	10 92 a9 01 	sts	0x01A9, r1
				stLocalAccount=laWaitFilling;
   10f6c:	8d e1       	ldi	r24, 0x1D	; 29
   10f6e:	43 c8       	rjmp	.-3962   	; 0xfff6 <FMenuLocalAccount+0x110>
		        break; 
           case laWaitFilling:
				if ((IsCompleteFilling==True)||(TimLocAcc>FILLING_TIMOUT)){
   10f70:	80 91 a9 01 	lds	r24, 0x01A9
   10f74:	81 30       	cpi	r24, 0x01	; 1
   10f76:	29 f0       	breq	.+10     	; 0x10f82 <FMenuLocalAccount+0x109c>
   10f78:	80 91 ba 01 	lds	r24, 0x01BA
   10f7c:	8b 30       	cpi	r24, 0x0B	; 11
   10f7e:	08 f4       	brcc	.+2      	; 0x10f82 <FMenuLocalAccount+0x109c>
   10f80:	51 c0       	rjmp	.+162    	; 0x11024 <FMenuLocalAccount+0x113e>
				    IsCompleteFilling=False;
   10f82:	10 92 a9 01 	sts	0x01A9, r1
				    stLocalAccount=laSuccessTransaction;
   10f86:	89 e1       	ldi	r24, 0x19	; 25
   10f88:	80 93 5b 01 	sts	0x015B, r24
					TimLocAcc=0;
   10f8c:	10 92 ba 01 	sts	0x01BA, r1
   10f90:	49 c0       	rjmp	.+146    	; 0x11024 <FMenuLocalAccount+0x113e>
					}
		        break;
           case laSuccessTransaction:
				lcd_clear();lcd_printf(2,1,PSTR("Transaksi Selesai"));
   10f92:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
   10f96:	82 e0       	ldi	r24, 0x02	; 2
   10f98:	61 e0       	ldi	r22, 0x01	; 1
   10f9a:	44 eb       	ldi	r20, 0xB4	; 180
   10f9c:	5f e1       	ldi	r21, 0x1F	; 31
   10f9e:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
				//Show Status FIP
				sprintf_P(lcdteks,PSTR("Fueling @FIP:#%d"),FIP_Used);
   10fa2:	00 d0       	rcall	.+0      	; 0x10fa4 <FMenuLocalAccount+0x10be>
   10fa4:	00 d0       	rcall	.+0      	; 0x10fa6 <FMenuLocalAccount+0x10c0>
   10fa6:	00 d0       	rcall	.+0      	; 0x10fa8 <FMenuLocalAccount+0x10c2>
   10fa8:	ed b7       	in	r30, 0x3d	; 61
   10faa:	fe b7       	in	r31, 0x3e	; 62
   10fac:	31 96       	adiw	r30, 0x01	; 1
   10fae:	8e 01       	movw	r16, r28
   10fb0:	04 5f       	subi	r16, 0xF4	; 244
   10fb2:	1f 4f       	sbci	r17, 0xFF	; 255
   10fb4:	ad b7       	in	r26, 0x3d	; 61
   10fb6:	be b7       	in	r27, 0x3e	; 62
   10fb8:	12 96       	adiw	r26, 0x02	; 2
   10fba:	1c 93       	st	X, r17
   10fbc:	0e 93       	st	-X, r16
   10fbe:	11 97       	sbiw	r26, 0x01	; 1
   10fc0:	83 ea       	ldi	r24, 0xA3	; 163
   10fc2:	9f e1       	ldi	r25, 0x1F	; 31
   10fc4:	93 83       	std	Z+3, r25	; 0x03
   10fc6:	82 83       	std	Z+2, r24	; 0x02
   10fc8:	80 91 88 02 	lds	r24, 0x0288
   10fcc:	84 83       	std	Z+4, r24	; 0x04
   10fce:	15 82       	std	Z+5, r1	; 0x05
   10fd0:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
				lcd_print(3,1,lcdteks);
   10fd4:	ed b7       	in	r30, 0x3d	; 61
   10fd6:	fe b7       	in	r31, 0x3e	; 62
   10fd8:	36 96       	adiw	r30, 0x06	; 6
   10fda:	0f b6       	in	r0, 0x3f	; 63
   10fdc:	f8 94       	cli
   10fde:	fe bf       	out	0x3e, r31	; 62
   10fe0:	0f be       	out	0x3f, r0	; 63
   10fe2:	ed bf       	out	0x3d, r30	; 61
   10fe4:	83 e0       	ldi	r24, 0x03	; 3
   10fe6:	61 e0       	ldi	r22, 0x01	; 1
   10fe8:	a8 01       	movw	r20, r16
   10fea:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>

				TimLocAcc=0;
				stLocalAccount=laDelayExit;
		        break;
           case laFailedTransaction:
		        TimLocAcc=0;
   10fee:	10 92 ba 01 	sts	0x01BA, r1
		        //Show Failed Report
				stLocalAccount=laDelayExit;
   10ff2:	8e e1       	ldi	r24, 0x1E	; 30
   10ff4:	0c 94 fb 7f 	jmp	0xfff6	; 0xfff6 <FMenuLocalAccount+0x110>
		        break;
           case laDelayExit:
		        if (TimLocAcc>15)stLocalAccount=laExitLocAcc;
   10ff8:	80 91 ba 01 	lds	r24, 0x01BA
   10ffc:	80 31       	cpi	r24, 0x10	; 16
   10ffe:	90 f0       	brcs	.+36     	; 0x11024 <FMenuLocalAccount+0x113e>
   11000:	8f e1       	ldi	r24, 0x1F	; 31
   11002:	0c 94 fb 7f 	jmp	0xfff6	; 0xfff6 <FMenuLocalAccount+0x110>
		        break;
           case laExitLocAcc:
		        Result=MENU_DONE;
				ClearMem(strOdometer);
   11006:	83 ec       	ldi	r24, 0xC3	; 195
   11008:	93 e0       	ldi	r25, 0x03	; 3
   1100a:	0e 94 f1 a4 	call	0x149e2	; 0x149e2 <ClearMem>
	            ClearMem(strLicPlate);
   1100e:	8a ef       	ldi	r24, 0xFA	; 250
   11010:	98 e0       	ldi	r25, 0x08	; 8
   11012:	0e 94 f1 a4 	call	0x149e2	; 0x149e2 <ClearMem>
				stLocalAccount=laInit;
   11016:	81 e0       	ldi	r24, 0x01	; 1
   11018:	80 93 5b 01 	sts	0x015B, r24
				lcd_clear();
   1101c:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
   11020:	81 e0       	ldi	r24, 0x01	; 1
   11022:	01 c0       	rjmp	.+2      	; 0x11026 <FMenuLocalAccount+0x1140>
   11024:	80 e0       	ldi	r24, 0x00	; 0
		        break;
	       }//EndSwitch
    return Result;
}
   11026:	e4 96       	adiw	r28, 0x34	; 52
   11028:	0f b6       	in	r0, 0x3f	; 63
   1102a:	f8 94       	cli
   1102c:	de bf       	out	0x3e, r29	; 62
   1102e:	0f be       	out	0x3f, r0	; 63
   11030:	cd bf       	out	0x3d, r28	; 61
   11032:	cf 91       	pop	r28
   11034:	df 91       	pop	r29
   11036:	1f 91       	pop	r17
   11038:	0f 91       	pop	r16
   1103a:	ff 90       	pop	r15
   1103c:	ef 90       	pop	r14
   1103e:	df 90       	pop	r13
   11040:	cf 90       	pop	r12
   11042:	bf 90       	pop	r11
   11044:	af 90       	pop	r10
   11046:	9f 90       	pop	r9
   11048:	8f 90       	pop	r8
   1104a:	7f 90       	pop	r7
   1104c:	6f 90       	pop	r6
   1104e:	08 95       	ret

00011050 <sendMessage32>:
	sprintf_P(strSend,PSTR("%s%s"),strRef3,strRef4);
    uart_print(1, 0,strSend);
	sprintf_P(strSend,PSTR("F968CFFB"));
    uart_print(1, 0,strSend);
	uart(1, 1,0x02);
*/IFTSendMessage(MSG_32);
   11050:	82 e3       	ldi	r24, 0x32	; 50
   11052:	0e 94 c0 79 	call	0xf380	; 0xf380 <IFTSendMessage>
}
   11056:	08 95       	ret

00011058 <FMenuChangeMOP>:
	      break;
	 }
   return Result;
}

char FMenuChangeMOP(){
   11058:	af 92       	push	r10
   1105a:	bf 92       	push	r11
   1105c:	cf 92       	push	r12
   1105e:	df 92       	push	r13
   11060:	ef 92       	push	r14
   11062:	ff 92       	push	r15
   11064:	0f 93       	push	r16
   11066:	1f 93       	push	r17
   11068:	df 93       	push	r29
   1106a:	cf 93       	push	r28
   1106c:	cd b7       	in	r28, 0x3d	; 61
   1106e:	de b7       	in	r29, 0x3e	; 62
   11070:	a3 97       	sbiw	r28, 0x23	; 35
   11072:	0f b6       	in	r0, 0x3f	; 63
   11074:	f8 94       	cli
   11076:	de bf       	out	0x3e, r29	; 62
   11078:	0f be       	out	0x3f, r0	; 63
   1107a:	cd bf       	out	0x3d, r28	; 61
       char lcdteks[20],i,msgResult;       
	   char strBankName[11],strSurcharge[4],Result;
       char uiResult,KeyPressed=0,KeyChar,FIPResult;

     Result=MENU_NONE; 
	 switch(stChangeMOP){
   1107c:	80 91 61 02 	lds	r24, 0x0261
   11080:	e8 2f       	mov	r30, r24
   11082:	f0 e0       	ldi	r31, 0x00	; 0
   11084:	ee 31       	cpi	r30, 0x1E	; 30
   11086:	f1 05       	cpc	r31, r1
   11088:	08 f0       	brcs	.+2      	; 0x1108c <FMenuChangeMOP+0x34>
   1108a:	08 c4       	rjmp	.+2064   	; 0x1189c <FMenuChangeMOP+0x844>
   1108c:	e1 55       	subi	r30, 0x51	; 81
   1108e:	ff 4f       	sbci	r31, 0xFF	; 255
   11090:	ee 0f       	add	r30, r30
   11092:	ff 1f       	adc	r31, r31
   11094:	05 90       	lpm	r0, Z+
   11096:	f4 91       	lpm	r31, Z+
   11098:	e0 2d       	mov	r30, r0
   1109a:	09 94       	ijmp
	 case cmInit:
	      MOPType=PAY_NONE;
   1109c:	85 e0       	ldi	r24, 0x05	; 5
   1109e:	80 93 b8 01 	sts	0x01B8, r24
   110a2:	3a c1       	rjmp	.+628    	; 0x11318 <FMenuChangeMOP+0x2c0>
		  stChangeMOP=cmDisplayMOPOption;
	      break;
	 case cmDisplayMOPOption: //12345678901234567890
	      lcd_clear();
   110a4:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
	      lcd_printf(1,1,PSTR("   Select Payment   "));
   110a8:	81 e0       	ldi	r24, 0x01	; 1
   110aa:	61 e0       	ldi	r22, 0x01	; 1
   110ac:	45 e0       	ldi	r20, 0x05	; 5
   110ae:	5c e1       	ldi	r21, 0x1C	; 28
   110b0:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
	      lcd_printf(2,1,PSTR("1.Account 3.Voucher "));
   110b4:	82 e0       	ldi	r24, 0x02	; 2
   110b6:	61 e0       	ldi	r22, 0x01	; 1
   110b8:	40 ef       	ldi	r20, 0xF0	; 240
   110ba:	5b e1       	ldi	r21, 0x1B	; 27
   110bc:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
	      lcd_printf(3,1,PSTR("2.Bank    4.PumpTest"));
   110c0:	83 e0       	ldi	r24, 0x03	; 3
   110c2:	61 e0       	ldi	r22, 0x01	; 1
   110c4:	4b ed       	ldi	r20, 0xDB	; 219
   110c6:	5b e1       	ldi	r21, 0x1B	; 27
   110c8:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
	      lcd_printf(4,1,PSTR("[*]Back             "));
   110cc:	84 e0       	ldi	r24, 0x04	; 4
   110ce:	61 e0       	ldi	r22, 0x01	; 1
   110d0:	46 ec       	ldi	r20, 0xC6	; 198
   110d2:	5b e1       	ldi	r21, 0x1B	; 27
   110d4:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
          stChangeMOP=cmInputMOP;		 
   110d8:	82 e0       	ldi	r24, 0x02	; 2
   110da:	9e c1       	rjmp	.+828    	; 0x11418 <FMenuChangeMOP+0x3c0>
		  break;
	 case cmInputMOP:
	      KeyPressed=_key_scan(1);
   110dc:	81 e0       	ldi	r24, 0x01	; 1
   110de:	0e 94 f6 a5 	call	0x14bec	; 0x14bec <_key_scan>
   110e2:	18 2f       	mov	r17, r24
		  KeyChar=_key_btn(KeyPressed);
   110e4:	0e 94 57 a5 	call	0x14aae	; 0x14aae <_key_btn>
   110e8:	98 2f       	mov	r25, r24
		  if ((KeyChar>='1')&&(KeyChar<='4')){
   110ea:	81 53       	subi	r24, 0x31	; 49
   110ec:	84 30       	cpi	r24, 0x04	; 4
   110ee:	f0 f4       	brcc	.+60     	; 0x1112c <FMenuChangeMOP+0xd4>
              switch(KeyChar){
   110f0:	92 33       	cpi	r25, 0x32	; 50
   110f2:	61 f0       	breq	.+24     	; 0x1110c <FMenuChangeMOP+0xb4>
   110f4:	93 33       	cpi	r25, 0x33	; 51
   110f6:	18 f4       	brcc	.+6      	; 0x110fe <FMenuChangeMOP+0xa6>
   110f8:	91 33       	cpi	r25, 0x31	; 49
   110fa:	c1 f4       	brne	.+48     	; 0x1112c <FMenuChangeMOP+0xd4>
   110fc:	05 c0       	rjmp	.+10     	; 0x11108 <FMenuChangeMOP+0xb0>
   110fe:	93 33       	cpi	r25, 0x33	; 51
   11100:	51 f0       	breq	.+20     	; 0x11116 <FMenuChangeMOP+0xbe>
   11102:	94 33       	cpi	r25, 0x34	; 52
   11104:	99 f4       	brne	.+38     	; 0x1112c <FMenuChangeMOP+0xd4>
   11106:	0c c0       	rjmp	.+24     	; 0x11120 <FMenuChangeMOP+0xc8>
		        case '1':MOPType=PAY_ACCOUNT; stChangeMOP=cmSelectFIP;         break;
   11108:	81 e0       	ldi	r24, 0x01	; 1
   1110a:	0b c0       	rjmp	.+22     	; 0x11122 <FMenuChangeMOP+0xca>
		        case '2':MOPType=PAY_BANK;    stChangeMOP=cmSelectBankName;    break;
   1110c:	82 e0       	ldi	r24, 0x02	; 2
   1110e:	80 93 b8 01 	sts	0x01B8, r24
   11112:	8b e0       	ldi	r24, 0x0B	; 11
   11114:	09 c0       	rjmp	.+18     	; 0x11128 <FMenuChangeMOP+0xd0>
		        case '3':MOPType=PAY_VOUCHER; stChangeMOP=cmDispInputVoucher;  break;
   11116:	83 e0       	ldi	r24, 0x03	; 3
   11118:	80 93 b8 01 	sts	0x01B8, r24
   1111c:	8f e0       	ldi	r24, 0x0F	; 15
   1111e:	04 c0       	rjmp	.+8      	; 0x11128 <FMenuChangeMOP+0xd0>
		        case '4':MOPType=PAY_PUMPTEST;stChangeMOP=cmSelectFIP;         break;
   11120:	84 e0       	ldi	r24, 0x04	; 4
   11122:	80 93 b8 01 	sts	0x01B8, r24
   11126:	89 e0       	ldi	r24, 0x09	; 9
   11128:	80 93 61 02 	sts	0x0261, r24
		     }
		  }
		  if (KeyPressed==_KEY_CANCEL) stChangeMOP=cmExitChangeMOP;
   1112c:	17 3e       	cpi	r17, 0xE7	; 231
   1112e:	09 f0       	breq	.+2      	; 0x11132 <FMenuChangeMOP+0xda>
   11130:	b5 c3       	rjmp	.+1898   	; 0x1189c <FMenuChangeMOP+0x844>
   11132:	ac c3       	rjmp	.+1880   	; 0x1188c <FMenuChangeMOP+0x834>
	      break;
	 case cmDispInputVoucher://Enter Voucher number
          lcd_clear();
   11134:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
		  lcd_printf(1,1,PSTR("Kode Voucher"));
   11138:	81 e0       	ldi	r24, 0x01	; 1
   1113a:	61 e0       	ldi	r22, 0x01	; 1
   1113c:	49 eb       	ldi	r20, 0xB9	; 185
   1113e:	5b e1       	ldi	r21, 0x1B	; 27
   11140:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  lcd_printf(2,1,PSTR("_"));
   11144:	82 e0       	ldi	r24, 0x02	; 2
   11146:	61 e0       	ldi	r22, 0x01	; 1
   11148:	47 eb       	ldi	r20, 0xB7	; 183
   1114a:	5b e1       	ldi	r21, 0x1B	; 27
   1114c:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
   11150:	84 e0       	ldi	r24, 0x04	; 4
   11152:	61 e0       	ldi	r22, 0x01	; 1
   11154:	42 ea       	ldi	r20, 0xA2	; 162
   11156:	5b e1       	ldi	r21, 0x1B	; 27
   11158:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
   1115c:	ec e3       	ldi	r30, 0x3C	; 60
   1115e:	fc e0       	ldi	r31, 0x0C	; 12
}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
	     strMemory[i]=data;
   11160:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
   11162:	8c e0       	ldi	r24, 0x0C	; 12
   11164:	e1 35       	cpi	r30, 0x51	; 81
   11166:	f8 07       	cpc	r31, r24
   11168:	d9 f7       	brne	.-10     	; 0x11160 <FMenuChangeMOP+0x108>
          lcd_clear();
		  lcd_printf(1,1,PSTR("Kode Voucher"));
		  lcd_printf(2,1,PSTR("_"));
		  lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
		  FillChar(strVoucherNum,sizeof(strVoucherNum),0);
          stChangeMOP=cmInputVoucher;		  
   1116a:	87 e0       	ldi	r24, 0x07	; 7
   1116c:	55 c1       	rjmp	.+682    	; 0x11418 <FMenuChangeMOP+0x3c0>
	      break;
     case cmInputVoucher:
          uiResult=UserInput(UI_NUMBER_R,2,1,strVoucherNum,0,13);
   1116e:	81 e0       	ldi	r24, 0x01	; 1
   11170:	62 e0       	ldi	r22, 0x02	; 2
   11172:	41 e0       	ldi	r20, 0x01	; 1
   11174:	2c e3       	ldi	r18, 0x3C	; 60
   11176:	3c e0       	ldi	r19, 0x0C	; 12
   11178:	00 e0       	ldi	r16, 0x00	; 0
   1117a:	10 e0       	ldi	r17, 0x00	; 0
   1117c:	5d e0       	ldi	r21, 0x0D	; 13
   1117e:	e5 2e       	mov	r14, r21
   11180:	0e 94 47 67 	call	0xce8e	; 0xce8e <UserInput>
	      if (uiResult==USER_OK){
   11184:	83 30       	cpi	r24, 0x03	; 3
   11186:	11 f4       	brne	.+4      	; 0x1118c <FMenuChangeMOP+0x134>
		     stChangeMOP=cmSelectFIP;
   11188:	89 e0       	ldi	r24, 0x09	; 9
   1118a:	46 c1       	rjmp	.+652    	; 0x11418 <FMenuChangeMOP+0x3c0>
			 }
		  else
	      if (uiResult==USER_CANCEL)stChangeMOP=cmDisplayMOPOption;
   1118c:	81 30       	cpi	r24, 0x01	; 1
   1118e:	09 f4       	brne	.+2      	; 0x11192 <FMenuChangeMOP+0x13a>
   11190:	43 c1       	rjmp	.+646    	; 0x11418 <FMenuChangeMOP+0x3c0>
		  else
		  if (uiResult==USER_ENTRY)lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
   11192:	84 30       	cpi	r24, 0x04	; 4
   11194:	21 f4       	brne	.+8      	; 0x1119e <FMenuChangeMOP+0x146>
   11196:	61 e0       	ldi	r22, 0x01	; 1
   11198:	4d e8       	ldi	r20, 0x8D	; 141
   1119a:	5b e1       	ldi	r21, 0x1B	; 27
   1119c:	25 c1       	rjmp	.+586    	; 0x113e8 <FMenuChangeMOP+0x390>
		  else
		  if (uiResult==USER_NO_DATA)lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
   1119e:	85 30       	cpi	r24, 0x05	; 5
   111a0:	09 f0       	breq	.+2      	; 0x111a4 <FMenuChangeMOP+0x14c>
   111a2:	7c c3       	rjmp	.+1784   	; 0x1189c <FMenuChangeMOP+0x844>
   111a4:	84 e0       	ldi	r24, 0x04	; 4
   111a6:	61 e0       	ldi	r22, 0x01	; 1
   111a8:	48 e7       	ldi	r20, 0x78	; 120
   111aa:	5b e1       	ldi	r21, 0x1B	; 27
   111ac:	1d c1       	rjmp	.+570    	; 0x113e8 <FMenuChangeMOP+0x390>
	      break;
	 case cmSelectFIP:
	      FIPResult=menu_FIP(&FIP_Used,strFIP_ID);
   111ae:	80 e6       	ldi	r24, 0x60	; 96
   111b0:	92 e0       	ldi	r25, 0x02	; 2
   111b2:	69 eb       	ldi	r22, 0xB9	; 185
   111b4:	77 e0       	ldi	r23, 0x07	; 7
   111b6:	0e 94 af 54 	call	0xa95e	; 0xa95e <menu_FIP>
		  if (FIPResult==FIP_DONE){
   111ba:	88 23       	and	r24, r24
   111bc:	11 f4       	brne	.+4      	; 0x111c2 <FMenuChangeMOP+0x16a>
		      //sprintf_P(strFIP_ID,PSTR("%.2d"),FIP_Used);
		      stChangeMOP=cmFlowFIP;
   111be:	8e e0       	ldi	r24, 0x0E	; 14
   111c0:	2b c1       	rjmp	.+598    	; 0x11418 <FMenuChangeMOP+0x3c0>
		  }
		  else
		  if (FIPResult==FIP_CANCEL){
   111c2:	82 30       	cpi	r24, 0x02	; 2
   111c4:	09 f0       	breq	.+2      	; 0x111c8 <FMenuChangeMOP+0x170>
   111c6:	6a c3       	rjmp	.+1748   	; 0x1189c <FMenuChangeMOP+0x844>
		      if (MOPType==PAY_ACCOUNT)stChangeMOP=cmDisplayMOPOption;
   111c8:	80 91 b8 01 	lds	r24, 0x01B8
   111cc:	81 30       	cpi	r24, 0x01	; 1
   111ce:	09 f4       	brne	.+2      	; 0x111d2 <FMenuChangeMOP+0x17a>
   111d0:	23 c1       	rjmp	.+582    	; 0x11418 <FMenuChangeMOP+0x3c0>
		      if (MOPType==PAY_BANK)stChangeMOP=cmSelectBankName;
   111d2:	82 30       	cpi	r24, 0x02	; 2
   111d4:	09 f4       	brne	.+2      	; 0x111d8 <FMenuChangeMOP+0x180>
   111d6:	f9 c0       	rjmp	.+498    	; 0x113ca <FMenuChangeMOP+0x372>
		      if (MOPType==PAY_VOUCHER)stChangeMOP=cmDispInputVoucher;
   111d8:	83 30       	cpi	r24, 0x03	; 3
   111da:	11 f4       	brne	.+4      	; 0x111e0 <FMenuChangeMOP+0x188>
   111dc:	8f e0       	ldi	r24, 0x0F	; 15
   111de:	1c c1       	rjmp	.+568    	; 0x11418 <FMenuChangeMOP+0x3c0>
		      if (MOPType==PAY_PUMPTEST)stChangeMOP=cmDisplayMOPOption;		  
   111e0:	84 30       	cpi	r24, 0x04	; 4
   111e2:	09 f4       	brne	.+2      	; 0x111e6 <FMenuChangeMOP+0x18e>
   111e4:	99 c0       	rjmp	.+306    	; 0x11318 <FMenuChangeMOP+0x2c0>
   111e6:	5a c3       	rjmp	.+1716   	; 0x1189c <FMenuChangeMOP+0x844>
     case cmSelectFIPInput:
		
	      break;
		  //Load Bank Information
	 case cmSelectBankName:
	      lcd_clear();
   111e8:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
		  lcd_printf(1,1,PSTR("Select Bank"));
   111ec:	81 e0       	ldi	r24, 0x01	; 1
   111ee:	61 e0       	ldi	r22, 0x01	; 1
   111f0:	4c e6       	ldi	r20, 0x6C	; 108
   111f2:	5b e1       	ldi	r21, 0x1B	; 27
   111f4:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  iLoop=0;
	      for(iLoop=0;iLoop<4;iLoop++){
   111f8:	10 92 5c 02 	sts	0x025C, r1
   111fc:	10 92 5b 02 	sts	0x025B, r1
			  eeprom_read_block((void*) &strBankName, (const void*) &DefBankName[iLoop], 11);
   11200:	8e 01       	movw	r16, r28
   11202:	0b 5f       	subi	r16, 0xFB	; 251
   11204:	1f 4f       	sbci	r17, 0xFF	; 255
   11206:	4b e0       	ldi	r20, 0x0B	; 11
   11208:	a4 2e       	mov	r10, r20
   1120a:	b1 2c       	mov	r11, r1
			  if (strlen(strBankName<=10)){
			     sprintf_P(lcdteks,PSTR("%d.%s"),(iLoop+1),strBankName);
   1120c:	30 e1       	ldi	r19, 0x10	; 16
   1120e:	e3 2e       	mov	r14, r19
   11210:	f1 2c       	mov	r15, r1
   11212:	ec 0e       	add	r14, r28
   11214:	fd 1e       	adc	r15, r29
   11216:	26 e6       	ldi	r18, 0x66	; 102
   11218:	c2 2e       	mov	r12, r18
   1121a:	2b e1       	ldi	r18, 0x1B	; 27
   1121c:	d2 2e       	mov	r13, r18
   1121e:	5b c0       	rjmp	.+182    	; 0x112d6 <FMenuChangeMOP+0x27e>
	 case cmSelectBankName:
	      lcd_clear();
		  lcd_printf(1,1,PSTR("Select Bank"));
		  iLoop=0;
	      for(iLoop=0;iLoop<4;iLoop++){
			  eeprom_read_block((void*) &strBankName, (const void*) &DefBankName[iLoop], 11);
   11220:	8a 9d       	mul	r24, r10
   11222:	b0 01       	movw	r22, r0
   11224:	8b 9d       	mul	r24, r11
   11226:	70 0d       	add	r23, r0
   11228:	9a 9d       	mul	r25, r10
   1122a:	70 0d       	add	r23, r0
   1122c:	11 24       	eor	r1, r1
   1122e:	67 5f       	subi	r22, 0xF7	; 247
   11230:	7e 4f       	sbci	r23, 0xFE	; 254
   11232:	c8 01       	movw	r24, r16
   11234:	4b e0       	ldi	r20, 0x0B	; 11
   11236:	50 e0       	ldi	r21, 0x00	; 0
   11238:	0e 94 b9 ac 	call	0x15972	; 0x15972 <__eerd_block_m128>
			  if (strlen(strBankName<=10)){
   1123c:	e0 e0       	ldi	r30, 0x00	; 0
   1123e:	f0 e0       	ldi	r31, 0x00	; 0
   11240:	0b 30       	cpi	r16, 0x0B	; 11
   11242:	11 05       	cpc	r17, r1
   11244:	10 f4       	brcc	.+4      	; 0x1124a <FMenuChangeMOP+0x1f2>
   11246:	e1 e0       	ldi	r30, 0x01	; 1
   11248:	f0 e0       	ldi	r31, 0x00	; 0
   1124a:	80 81       	ld	r24, Z
   1124c:	88 23       	and	r24, r24
   1124e:	d1 f1       	breq	.+116    	; 0x112c4 <FMenuChangeMOP+0x26c>
			     sprintf_P(lcdteks,PSTR("%d.%s"),(iLoop+1),strBankName);
   11250:	ad b7       	in	r26, 0x3d	; 61
   11252:	be b7       	in	r27, 0x3e	; 62
   11254:	18 97       	sbiw	r26, 0x08	; 8
   11256:	0f b6       	in	r0, 0x3f	; 63
   11258:	f8 94       	cli
   1125a:	be bf       	out	0x3e, r27	; 62
   1125c:	0f be       	out	0x3f, r0	; 63
   1125e:	ad bf       	out	0x3d, r26	; 61
   11260:	ed b7       	in	r30, 0x3d	; 61
   11262:	fe b7       	in	r31, 0x3e	; 62
   11264:	31 96       	adiw	r30, 0x01	; 1
   11266:	12 96       	adiw	r26, 0x02	; 2
   11268:	fc 92       	st	X, r15
   1126a:	ee 92       	st	-X, r14
   1126c:	11 97       	sbiw	r26, 0x01	; 1
   1126e:	d3 82       	std	Z+3, r13	; 0x03
   11270:	c2 82       	std	Z+2, r12	; 0x02
   11272:	80 91 5b 02 	lds	r24, 0x025B
   11276:	90 91 5c 02 	lds	r25, 0x025C
   1127a:	01 96       	adiw	r24, 0x01	; 1
   1127c:	95 83       	std	Z+5, r25	; 0x05
   1127e:	84 83       	std	Z+4, r24	; 0x04
   11280:	17 83       	std	Z+7, r17	; 0x07
   11282:	06 83       	std	Z+6, r16	; 0x06
   11284:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
			     lcd_print((2+(iLoop%2)),(1+((iLoop/2)*12)),lcdteks);
   11288:	20 91 5b 02 	lds	r18, 0x025B
   1128c:	30 91 5c 02 	lds	r19, 0x025C
   11290:	ed b7       	in	r30, 0x3d	; 61
   11292:	fe b7       	in	r31, 0x3e	; 62
   11294:	38 96       	adiw	r30, 0x08	; 8
   11296:	0f b6       	in	r0, 0x3f	; 63
   11298:	f8 94       	cli
   1129a:	fe bf       	out	0x3e, r31	; 62
   1129c:	0f be       	out	0x3f, r0	; 63
   1129e:	ed bf       	out	0x3d, r30	; 61
   112a0:	82 2f       	mov	r24, r18
   112a2:	81 70       	andi	r24, 0x01	; 1
   112a4:	36 95       	lsr	r19
   112a6:	27 95       	ror	r18
   112a8:	b9 01       	movw	r22, r18
   112aa:	66 0f       	add	r22, r22
   112ac:	77 1f       	adc	r23, r23
   112ae:	62 0f       	add	r22, r18
   112b0:	73 1f       	adc	r23, r19
   112b2:	66 0f       	add	r22, r22
   112b4:	77 1f       	adc	r23, r23
   112b6:	66 0f       	add	r22, r22
   112b8:	77 1f       	adc	r23, r23
   112ba:	6f 5f       	subi	r22, 0xFF	; 255
   112bc:	8e 5f       	subi	r24, 0xFE	; 254
   112be:	a7 01       	movw	r20, r14
   112c0:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
		  //Load Bank Information
	 case cmSelectBankName:
	      lcd_clear();
		  lcd_printf(1,1,PSTR("Select Bank"));
		  iLoop=0;
	      for(iLoop=0;iLoop<4;iLoop++){
   112c4:	80 91 5b 02 	lds	r24, 0x025B
   112c8:	90 91 5c 02 	lds	r25, 0x025C
   112cc:	01 96       	adiw	r24, 0x01	; 1
   112ce:	90 93 5c 02 	sts	0x025C, r25
   112d2:	80 93 5b 02 	sts	0x025B, r24
   112d6:	80 91 5b 02 	lds	r24, 0x025B
   112da:	90 91 5c 02 	lds	r25, 0x025C
   112de:	84 30       	cpi	r24, 0x04	; 4
   112e0:	91 05       	cpc	r25, r1
   112e2:	08 f4       	brcc	.+2      	; 0x112e6 <FMenuChangeMOP+0x28e>
   112e4:	9d cf       	rjmp	.-198    	; 0x11220 <FMenuChangeMOP+0x1c8>
			  if (strlen(strBankName<=10)){
			     sprintf_P(lcdteks,PSTR("%d.%s"),(iLoop+1),strBankName);
			     lcd_print((2+(iLoop%2)),(1+((iLoop/2)*12)),lcdteks);
			 }
		  }
	      lcd_printf(4,1,PSTR("[*]Back"));
   112e6:	84 e0       	ldi	r24, 0x04	; 4
   112e8:	61 e0       	ldi	r22, 0x01	; 1
   112ea:	4e e5       	ldi	r20, 0x5E	; 94
   112ec:	5b e1       	ldi	r21, 0x1B	; 27
   112ee:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  stChangeMOP=cmSelectBankNameInput;
   112f2:	8c e0       	ldi	r24, 0x0C	; 12
   112f4:	91 c0       	rjmp	.+290    	; 0x11418 <FMenuChangeMOP+0x3c0>
	      break;
     case cmSelectBankNameInput:
		  KeyPressed=_key_scan(1);
   112f6:	81 e0       	ldi	r24, 0x01	; 1
   112f8:	0e 94 f6 a5 	call	0x14bec	; 0x14bec <_key_scan>
   112fc:	18 2f       	mov	r17, r24
		  KeyChar=_key_btn(KeyPressed);
   112fe:	0e 94 57 a5 	call	0x14aae	; 0x14aae <_key_btn>
          if ((KeyChar>='1')&&(KeyChar<='4')){
   11302:	81 53       	subi	r24, 0x31	; 49
   11304:	84 30       	cpi	r24, 0x04	; 4
   11306:	28 f4       	brcc	.+10     	; 0x11312 <FMenuChangeMOP+0x2ba>
		      BankIdx=KeyChar-'1';
   11308:	80 93 5f 02 	sts	0x025F, r24
			  stChangeMOP=cmSelectFIP;
   1130c:	89 e0       	ldi	r24, 0x09	; 9
   1130e:	80 93 61 02 	sts	0x0261, r24
		  }
		  if (KeyPressed==_KEY_CANCEL) stChangeMOP=cmDisplayMOPOption;
   11312:	17 3e       	cpi	r17, 0xE7	; 231
   11314:	09 f0       	breq	.+2      	; 0x11318 <FMenuChangeMOP+0x2c0>
   11316:	c2 c2       	rjmp	.+1412   	; 0x1189c <FMenuChangeMOP+0x844>
   11318:	81 e0       	ldi	r24, 0x01	; 1
   1131a:	7e c0       	rjmp	.+252    	; 0x11418 <FMenuChangeMOP+0x3c0>

	      break;
     case cmDispBankSurcharge:
	      lcd_clear();
   1131c:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
		  eeprom_read_block((void*) &strBankName, (const void*) &DefBankName[BankIdx], 11);
   11320:	f5 e0       	ldi	r31, 0x05	; 5
   11322:	ef 2e       	mov	r14, r31
   11324:	f1 2c       	mov	r15, r1
   11326:	ec 0e       	add	r14, r28
   11328:	fd 1e       	adc	r15, r29
   1132a:	60 91 5f 02 	lds	r22, 0x025F
   1132e:	8b e0       	ldi	r24, 0x0B	; 11
   11330:	68 9f       	mul	r22, r24
   11332:	b0 01       	movw	r22, r0
   11334:	11 24       	eor	r1, r1
   11336:	67 5f       	subi	r22, 0xF7	; 247
   11338:	7e 4f       	sbci	r23, 0xFE	; 254
   1133a:	c7 01       	movw	r24, r14
   1133c:	4b e0       	ldi	r20, 0x0B	; 11
   1133e:	50 e0       	ldi	r21, 0x00	; 0
   11340:	0e 94 b9 ac 	call	0x15972	; 0x15972 <__eerd_block_m128>
		  sprintf_P(lcdteks,PSTR("%s"),strBankName);
   11344:	00 d0       	rcall	.+0      	; 0x11346 <FMenuChangeMOP+0x2ee>
   11346:	00 d0       	rcall	.+0      	; 0x11348 <FMenuChangeMOP+0x2f0>
   11348:	00 d0       	rcall	.+0      	; 0x1134a <FMenuChangeMOP+0x2f2>
   1134a:	ed b7       	in	r30, 0x3d	; 61
   1134c:	fe b7       	in	r31, 0x3e	; 62
   1134e:	31 96       	adiw	r30, 0x01	; 1
   11350:	8e 01       	movw	r16, r28
   11352:	00 5f       	subi	r16, 0xF0	; 240
   11354:	1f 4f       	sbci	r17, 0xFF	; 255
   11356:	ad b7       	in	r26, 0x3d	; 61
   11358:	be b7       	in	r27, 0x3e	; 62
   1135a:	12 96       	adiw	r26, 0x02	; 2
   1135c:	1c 93       	st	X, r17
   1135e:	0e 93       	st	-X, r16
   11360:	11 97       	sbiw	r26, 0x01	; 1
   11362:	8b e5       	ldi	r24, 0x5B	; 91
   11364:	9b e1       	ldi	r25, 0x1B	; 27
   11366:	93 83       	std	Z+3, r25	; 0x03
   11368:	82 83       	std	Z+2, r24	; 0x02
   1136a:	f5 82       	std	Z+5, r15	; 0x05
   1136c:	e4 82       	std	Z+4, r14	; 0x04
   1136e:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
		  lcd_print(1,1,lcdteks);
   11372:	ed b7       	in	r30, 0x3d	; 61
   11374:	fe b7       	in	r31, 0x3e	; 62
   11376:	36 96       	adiw	r30, 0x06	; 6
   11378:	0f b6       	in	r0, 0x3f	; 63
   1137a:	f8 94       	cli
   1137c:	fe bf       	out	0x3e, r31	; 62
   1137e:	0f be       	out	0x3f, r0	; 63
   11380:	ed bf       	out	0x3d, r30	; 61
   11382:	81 e0       	ldi	r24, 0x01	; 1
   11384:	61 e0       	ldi	r22, 0x01	; 1
   11386:	a8 01       	movw	r20, r16
   11388:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
		  lcd_printf(2,1,PSTR("Surcharge:   _%"));
   1138c:	82 e0       	ldi	r24, 0x02	; 2
   1138e:	61 e0       	ldi	r22, 0x01	; 1
   11390:	4b e4       	ldi	r20, 0x4B	; 75
   11392:	5b e1       	ldi	r21, 0x1B	; 27
   11394:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
	      lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
   11398:	84 e0       	ldi	r24, 0x04	; 4
   1139a:	61 e0       	ldi	r22, 0x01	; 1
   1139c:	46 e3       	ldi	r20, 0x36	; 54
   1139e:	5b e1       	ldi	r21, 0x1B	; 27
   113a0:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
          stChangeMOP=cmInputBankSurcharge;
   113a4:	8d e0       	ldi	r24, 0x0D	; 13
   113a6:	38 c0       	rjmp	.+112    	; 0x11418 <FMenuChangeMOP+0x3c0>
	      break;
	 case cmInputBankSurcharge:
	      //uiResult=UserInput(UI_NUMBER_L,2,14,ValueChar,100,3);
		  uiResult=UserInput(UI_NUMBER_L,2,14,strSurcharge,100,3);
   113a8:	82 e0       	ldi	r24, 0x02	; 2
   113aa:	62 e0       	ldi	r22, 0x02	; 2
   113ac:	4e e0       	ldi	r20, 0x0E	; 14
   113ae:	9e 01       	movw	r18, r28
   113b0:	2f 5f       	subi	r18, 0xFF	; 255
   113b2:	3f 4f       	sbci	r19, 0xFF	; 255
   113b4:	04 e6       	ldi	r16, 0x64	; 100
   113b6:	10 e0       	ldi	r17, 0x00	; 0
   113b8:	e3 e0       	ldi	r30, 0x03	; 3
   113ba:	ee 2e       	mov	r14, r30
   113bc:	0e 94 47 67 	call	0xce8e	; 0xce8e <UserInput>
	      if (uiResult==USER_OK)stChangeMOP=cmGenerateData;
   113c0:	83 30       	cpi	r24, 0x03	; 3
   113c2:	09 f4       	brne	.+2      	; 0x113c6 <FMenuChangeMOP+0x36e>
   113c4:	c6 c0       	rjmp	.+396    	; 0x11552 <FMenuChangeMOP+0x4fa>
		  else
	      if (uiResult==USER_CANCEL)stChangeMOP=cmSelectBankName;
   113c6:	81 30       	cpi	r24, 0x01	; 1
   113c8:	11 f4       	brne	.+4      	; 0x113ce <FMenuChangeMOP+0x376>
   113ca:	8b e0       	ldi	r24, 0x0B	; 11
   113cc:	25 c0       	rjmp	.+74     	; 0x11418 <FMenuChangeMOP+0x3c0>
		  else
		  if (uiResult==USER_ENTRY)lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
   113ce:	84 30       	cpi	r24, 0x04	; 4
   113d0:	21 f4       	brne	.+8      	; 0x113da <FMenuChangeMOP+0x382>
   113d2:	61 e0       	ldi	r22, 0x01	; 1
   113d4:	41 e2       	ldi	r20, 0x21	; 33
   113d6:	5b e1       	ldi	r21, 0x1B	; 27
   113d8:	07 c0       	rjmp	.+14     	; 0x113e8 <FMenuChangeMOP+0x390>
		  else
		  if (uiResult==USER_NO_DATA)lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
   113da:	85 30       	cpi	r24, 0x05	; 5
   113dc:	09 f0       	breq	.+2      	; 0x113e0 <FMenuChangeMOP+0x388>
   113de:	5e c2       	rjmp	.+1212   	; 0x1189c <FMenuChangeMOP+0x844>
   113e0:	84 e0       	ldi	r24, 0x04	; 4
   113e2:	61 e0       	ldi	r22, 0x01	; 1
   113e4:	4c e0       	ldi	r20, 0x0C	; 12
   113e6:	5b e1       	ldi	r21, 0x1B	; 27
   113e8:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
   113ec:	57 c2       	rjmp	.+1198   	; 0x1189c <FMenuChangeMOP+0x844>
	      break;
     case cmFlowFIP:
          switch(MOPType){
   113ee:	80 91 b8 01 	lds	r24, 0x01B8
   113f2:	82 30       	cpi	r24, 0x02	; 2
   113f4:	61 f0       	breq	.+24     	; 0x1140e <FMenuChangeMOP+0x3b6>
   113f6:	83 30       	cpi	r24, 0x03	; 3
   113f8:	20 f4       	brcc	.+8      	; 0x11402 <FMenuChangeMOP+0x3aa>
   113fa:	81 30       	cpi	r24, 0x01	; 1
   113fc:	09 f0       	breq	.+2      	; 0x11400 <FMenuChangeMOP+0x3a8>
   113fe:	4e c2       	rjmp	.+1180   	; 0x1189c <FMenuChangeMOP+0x844>
   11400:	0a c0       	rjmp	.+20     	; 0x11416 <FMenuChangeMOP+0x3be>
   11402:	83 30       	cpi	r24, 0x03	; 3
   11404:	31 f0       	breq	.+12     	; 0x11412 <FMenuChangeMOP+0x3ba>
   11406:	84 30       	cpi	r24, 0x04	; 4
   11408:	09 f0       	breq	.+2      	; 0x1140c <FMenuChangeMOP+0x3b4>
   1140a:	48 c2       	rjmp	.+1168   	; 0x1189c <FMenuChangeMOP+0x844>
   1140c:	04 c0       	rjmp	.+8      	; 0x11416 <FMenuChangeMOP+0x3be>
		  case PAY_ACCOUNT: stChangeMOP=cmDispCardTap;       break;
		  case PAY_BANK:    stChangeMOP=cmDispBankSurcharge; break;
   1140e:	81 e1       	ldi	r24, 0x11	; 17
   11410:	03 c0       	rjmp	.+6      	; 0x11418 <FMenuChangeMOP+0x3c0>
		  case PAY_VOUCHER: stChangeMOP=cmProsesVoucher;      break;
   11412:	85 e1       	ldi	r24, 0x15	; 21
   11414:	01 c0       	rjmp	.+2      	; 0x11418 <FMenuChangeMOP+0x3c0>
		  case PAY_PUMPTEST:stChangeMOP=cmDispCardTap;       break;
   11416:	82 e1       	ldi	r24, 0x12	; 18
   11418:	80 93 61 02 	sts	0x0261, r24
   1141c:	3f c2       	rjmp	.+1150   	; 0x1189c <FMenuChangeMOP+0x844>
		  }
	      break;
     case cmDispCardTap:
	      lcd_clear();
   1141e:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
	      lcd_printf(1,1,PSTR("Tap Kartu RFID"));
   11422:	81 e0       	ldi	r24, 0x01	; 1
   11424:	61 e0       	ldi	r22, 0x01	; 1
   11426:	4d ef       	ldi	r20, 0xFD	; 253
   11428:	5a e1       	ldi	r21, 0x1A	; 26
   1142a:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  sprintf_P(lcdteks,PSTR("FIP%s"),strFIP_ID);
   1142e:	00 d0       	rcall	.+0      	; 0x11430 <FMenuChangeMOP+0x3d8>
   11430:	00 d0       	rcall	.+0      	; 0x11432 <FMenuChangeMOP+0x3da>
   11432:	00 d0       	rcall	.+0      	; 0x11434 <FMenuChangeMOP+0x3dc>
   11434:	ed b7       	in	r30, 0x3d	; 61
   11436:	fe b7       	in	r31, 0x3e	; 62
   11438:	31 96       	adiw	r30, 0x01	; 1
   1143a:	8e 01       	movw	r16, r28
   1143c:	00 5f       	subi	r16, 0xF0	; 240
   1143e:	1f 4f       	sbci	r17, 0xFF	; 255
   11440:	ad b7       	in	r26, 0x3d	; 61
   11442:	be b7       	in	r27, 0x3e	; 62
   11444:	12 96       	adiw	r26, 0x02	; 2
   11446:	1c 93       	st	X, r17
   11448:	0e 93       	st	-X, r16
   1144a:	11 97       	sbiw	r26, 0x01	; 1
   1144c:	87 ef       	ldi	r24, 0xF7	; 247
   1144e:	9a e1       	ldi	r25, 0x1A	; 26
   11450:	93 83       	std	Z+3, r25	; 0x03
   11452:	82 83       	std	Z+2, r24	; 0x02
   11454:	89 eb       	ldi	r24, 0xB9	; 185
   11456:	97 e0       	ldi	r25, 0x07	; 7
   11458:	95 83       	std	Z+5, r25	; 0x05
   1145a:	84 83       	std	Z+4, r24	; 0x04
   1145c:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
		  lcd_print(2,1,lcdteks);
   11460:	ed b7       	in	r30, 0x3d	; 61
   11462:	fe b7       	in	r31, 0x3e	; 62
   11464:	36 96       	adiw	r30, 0x06	; 6
   11466:	0f b6       	in	r0, 0x3f	; 63
   11468:	f8 94       	cli
   1146a:	fe bf       	out	0x3e, r31	; 62
   1146c:	0f be       	out	0x3f, r0	; 63
   1146e:	ed bf       	out	0x3d, r30	; 61
   11470:	82 e0       	ldi	r24, 0x02	; 2
   11472:	61 e0       	ldi	r22, 0x01	; 1
   11474:	a8 01       	movw	r20, r16
   11476:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
          lcd_printf(4,1,PSTR("[*]Back    [#]Exit"));
   1147a:	84 e0       	ldi	r24, 0x04	; 4
   1147c:	61 e0       	ldi	r22, 0x01	; 1
   1147e:	44 ee       	ldi	r20, 0xE4	; 228
   11480:	5a e1       	ldi	r21, 0x1A	; 26
   11482:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  IsRFIDDetected=False;
   11486:	10 92 98 01 	sts	0x0198, r1
          stChangeMOP=cmRFIDCardInput;
   1148a:	83 e1       	ldi	r24, 0x13	; 19
   1148c:	c5 cf       	rjmp	.-118    	; 0x11418 <FMenuChangeMOP+0x3c0>
	      break;
	 case cmRFIDCardInput:
		  KeyPressed=_key_scan(1);
   1148e:	81 e0       	ldi	r24, 0x01	; 1
   11490:	0e 94 f6 a5 	call	0x14bec	; 0x14bec <_key_scan>
   11494:	18 2f       	mov	r17, r24
		  KeyChar=_key_btn(KeyPressed);
   11496:	0e 94 57 a5 	call	0x14aae	; 0x14aae <_key_btn>
		  if (KeyPressed==_KEY_ENTER){
   1149a:	17 3b       	cpi	r17, 0xB7	; 183
   1149c:	11 f4       	brne	.+4      	; 0x114a2 <FMenuChangeMOP+0x44a>
		      stChangeMOP=cmExitChangeMOP;
   1149e:	8c e1       	ldi	r24, 0x1C	; 28
   114a0:	03 c0       	rjmp	.+6      	; 0x114a8 <FMenuChangeMOP+0x450>
		  }
		  else
		  if (KeyPressed==_KEY_CANCEL){
   114a2:	17 3e       	cpi	r17, 0xE7	; 231
   114a4:	19 f4       	brne	.+6      	; 0x114ac <FMenuChangeMOP+0x454>
   		      stChangeMOP=cmSelectFIP;
   114a6:	89 e0       	ldi	r24, 0x09	; 9
   114a8:	80 93 61 02 	sts	0x0261, r24
			 }
          if (IsRFIDDetected==True){
   114ac:	80 91 98 01 	lds	r24, 0x0198
   114b0:	81 30       	cpi	r24, 0x01	; 1
   114b2:	09 f0       	breq	.+2      	; 0x114b6 <FMenuChangeMOP+0x45e>
   114b4:	f3 c1       	rjmp	.+998    	; 0x1189c <FMenuChangeMOP+0x844>
		      IsRFIDDetected=False;
   114b6:	10 92 98 01 	sts	0x0198, r1
			   stChangeMOP=cmProsesRFID;
   114ba:	84 e1       	ldi	r24, 0x14	; 20
   114bc:	ad cf       	rjmp	.-166    	; 0x11418 <FMenuChangeMOP+0x3c0>
   114be:	20 e0       	ldi	r18, 0x00	; 0
   114c0:	30 e0       	ldi	r19, 0x00	; 0


void ViewCardID(){//+12345678 -->12345678
     char i;
	 for(i=0;i<8;i++){         //00000000000012345678
		strCardID[i]=strRFID[i];
   114c2:	f9 01       	movw	r30, r18
   114c4:	e7 57       	subi	r30, 0x77	; 119
   114c6:	f4 4f       	sbci	r31, 0xF4	; 244
   114c8:	d9 01       	movw	r26, r18
   114ca:	af 5a       	subi	r26, 0xAF	; 175
   114cc:	b3 4f       	sbci	r27, 0xF3	; 243
   114ce:	8c 91       	ld	r24, X
   114d0:	80 83       	st	Z, r24
   114d2:	2f 5f       	subi	r18, 0xFF	; 255
   114d4:	3f 4f       	sbci	r19, 0xFF	; 255



void ViewCardID(){//+12345678 -->12345678
     char i;
	 for(i=0;i<8;i++){         //00000000000012345678
   114d6:	28 30       	cpi	r18, 0x08	; 8
   114d8:	31 05       	cpc	r19, r1
   114da:	99 f7       	brne	.-26     	; 0x114c2 <FMenuChangeMOP+0x46a>
		strCardID[i]=strRFID[i];
	 }strCardID[8]=0;     
   114dc:	10 92 91 0b 	sts	0x0B91, r1
			   stChangeMOP=cmProsesRFID;
			 }
	      break;
     case cmProsesRFID:
	      ViewCardID();
          sprintf_P(lcdteks,PSTR("ID:%s"),strCardID);lcd_print(2,1,lcdteks);
   114e0:	00 d0       	rcall	.+0      	; 0x114e2 <FMenuChangeMOP+0x48a>
   114e2:	00 d0       	rcall	.+0      	; 0x114e4 <FMenuChangeMOP+0x48c>
   114e4:	00 d0       	rcall	.+0      	; 0x114e6 <FMenuChangeMOP+0x48e>
   114e6:	ed b7       	in	r30, 0x3d	; 61
   114e8:	fe b7       	in	r31, 0x3e	; 62
   114ea:	31 96       	adiw	r30, 0x01	; 1
   114ec:	8e 01       	movw	r16, r28
   114ee:	00 5f       	subi	r16, 0xF0	; 240
   114f0:	1f 4f       	sbci	r17, 0xFF	; 255
   114f2:	ad b7       	in	r26, 0x3d	; 61
   114f4:	be b7       	in	r27, 0x3e	; 62
   114f6:	12 96       	adiw	r26, 0x02	; 2
   114f8:	1c 93       	st	X, r17
   114fa:	0e 93       	st	-X, r16
   114fc:	11 97       	sbiw	r26, 0x01	; 1
   114fe:	8e ed       	ldi	r24, 0xDE	; 222
   11500:	9a e1       	ldi	r25, 0x1A	; 26
   11502:	93 83       	std	Z+3, r25	; 0x03
   11504:	82 83       	std	Z+2, r24	; 0x02
   11506:	89 e8       	ldi	r24, 0x89	; 137
   11508:	9b e0       	ldi	r25, 0x0B	; 11
   1150a:	95 83       	std	Z+5, r25	; 0x05
   1150c:	84 83       	std	Z+4, r24	; 0x04
   1150e:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
   11512:	ed b7       	in	r30, 0x3d	; 61
   11514:	fe b7       	in	r31, 0x3e	; 62
   11516:	36 96       	adiw	r30, 0x06	; 6
   11518:	0f b6       	in	r0, 0x3f	; 63
   1151a:	f8 94       	cli
   1151c:	fe bf       	out	0x3e, r31	; 62
   1151e:	0f be       	out	0x3f, r0	; 63
   11520:	ed bf       	out	0x3d, r30	; 61
   11522:	82 e0       	ldi	r24, 0x02	; 2
   11524:	61 e0       	ldi	r22, 0x01	; 1
   11526:	a8 01       	movw	r20, r16
   11528:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
          lcd_printf(3,1,PSTR("Proses"));
   1152c:	83 e0       	ldi	r24, 0x03	; 3
   1152e:	61 e0       	ldi	r22, 0x01	; 1
   11530:	47 ed       	ldi	r20, 0xD7	; 215
   11532:	5a e1       	ldi	r21, 0x1A	; 26
   11534:	0c c0       	rjmp	.+24     	; 0x1154e <FMenuChangeMOP+0x4f6>
		  stChangeMOP=cmGenerateData;
	      break;
     case cmProsesVoucher:
          lcd_clear();
   11536:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
          lcd_printf(1,1,PSTR("-MOP Voucher-")); 
   1153a:	81 e0       	ldi	r24, 0x01	; 1
   1153c:	61 e0       	ldi	r22, 0x01	; 1
   1153e:	49 ec       	ldi	r20, 0xC9	; 201
   11540:	5a e1       	ldi	r21, 0x1A	; 26
   11542:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
          lcd_printf(3,1,PSTR("Proses"));
   11546:	83 e0       	ldi	r24, 0x03	; 3
   11548:	61 e0       	ldi	r22, 0x01	; 1
   1154a:	42 ec       	ldi	r20, 0xC2	; 194
   1154c:	5a e1       	ldi	r21, 0x1A	; 26
   1154e:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  stChangeMOP=cmGenerateData;
   11552:	86 e1       	ldi	r24, 0x16	; 22
   11554:	61 cf       	rjmp	.-318    	; 0x11418 <FMenuChangeMOP+0x3c0>
	      break;
   11556:	ee e8       	ldi	r30, 0x8E	; 142
   11558:	fc e0       	ldi	r31, 0x0C	; 12
}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
	     strMemory[i]=data;
   1155a:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
   1155c:	8c e0       	ldi	r24, 0x0C	; 12
   1155e:	e3 3a       	cpi	r30, 0xA3	; 163
   11560:	f8 07       	cpc	r31, r24
   11562:	d9 f7       	brne	.-10     	; 0x1155a <FMenuChangeMOP+0x502>
   11564:	ee e9       	ldi	r30, 0x9E	; 158
   11566:	fb e0       	ldi	r31, 0x0B	; 11
	     strMemory[i]=data;
   11568:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
   1156a:	9b e0       	ldi	r25, 0x0B	; 11
   1156c:	e3 3b       	cpi	r30, 0xB3	; 179
   1156e:	f9 07       	cpc	r31, r25
   11570:	d9 f7       	brne	.-10     	; 0x11568 <FMenuChangeMOP+0x510>
   11572:	ed e7       	ldi	r30, 0x7D	; 125
   11574:	f8 e0       	ldi	r31, 0x08	; 8
	     strMemory[i]=data;
   11576:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
   11578:	a8 e0       	ldi	r26, 0x08	; 8
   1157a:	e2 39       	cpi	r30, 0x92	; 146
   1157c:	fa 07       	cpc	r31, r26
   1157e:	d9 f7       	brne	.-10     	; 0x11576 <FMenuChangeMOP+0x51e>
   11580:	75 ea       	ldi	r23, 0xA5	; 165
   11582:	e7 2e       	mov	r14, r23
   11584:	73 e0       	ldi	r23, 0x03	; 3
   11586:	f7 2e       	mov	r15, r23
	     strMemory[i]=data;
   11588:	f7 01       	movw	r30, r14
   1158a:	11 92       	st	Z+, r1
   1158c:	7f 01       	movw	r14, r30

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
   1158e:	fa eb       	ldi	r31, 0xBA	; 186
   11590:	ef 16       	cp	r14, r31
   11592:	f3 e0       	ldi	r31, 0x03	; 3
   11594:	ff 06       	cpc	r15, r31
   11596:	c1 f7       	brne	.-16     	; 0x11588 <FMenuChangeMOP+0x530>
     case cmGenerateData:
	      FillChar(strRef1,sizeof(strRef1),0);
	      FillChar(strRef2,sizeof(strRef2),0);
	      FillChar(strRef3,sizeof(strRef3),0);
	      FillChar(strRef4,sizeof(strRef4),0);
          switch(MOPType){
   11598:	80 91 b8 01 	lds	r24, 0x01B8
   1159c:	82 30       	cpi	r24, 0x02	; 2
   1159e:	f1 f0       	breq	.+60     	; 0x115dc <FMenuChangeMOP+0x584>
   115a0:	83 30       	cpi	r24, 0x03	; 3
   115a2:	20 f4       	brcc	.+8      	; 0x115ac <FMenuChangeMOP+0x554>
   115a4:	81 30       	cpi	r24, 0x01	; 1
   115a6:	09 f0       	breq	.+2      	; 0x115aa <FMenuChangeMOP+0x552>
   115a8:	ab c0       	rjmp	.+342    	; 0x11700 <FMenuChangeMOP+0x6a8>
   115aa:	07 c0       	rjmp	.+14     	; 0x115ba <FMenuChangeMOP+0x562>
   115ac:	83 30       	cpi	r24, 0x03	; 3
   115ae:	09 f4       	brne	.+2      	; 0x115b2 <FMenuChangeMOP+0x55a>
   115b0:	62 c0       	rjmp	.+196    	; 0x11676 <FMenuChangeMOP+0x61e>
   115b2:	84 30       	cpi	r24, 0x04	; 4
   115b4:	09 f0       	breq	.+2      	; 0x115b8 <FMenuChangeMOP+0x560>
   115b6:	a4 c0       	rjmp	.+328    	; 0x11700 <FMenuChangeMOP+0x6a8>
   115b8:	73 c0       	rjmp	.+230    	; 0x116a0 <FMenuChangeMOP+0x648>
		  case PAY_ACCOUNT:
		       sprintf_P(strRef1,PSTR("%s"),strCardID); 
   115ba:	00 d0       	rcall	.+0      	; 0x115bc <FMenuChangeMOP+0x564>
   115bc:	00 d0       	rcall	.+0      	; 0x115be <FMenuChangeMOP+0x566>
   115be:	00 d0       	rcall	.+0      	; 0x115c0 <FMenuChangeMOP+0x568>
   115c0:	ed b7       	in	r30, 0x3d	; 61
   115c2:	fe b7       	in	r31, 0x3e	; 62
   115c4:	31 96       	adiw	r30, 0x01	; 1
   115c6:	8e e8       	ldi	r24, 0x8E	; 142
   115c8:	9c e0       	ldi	r25, 0x0C	; 12
   115ca:	ad b7       	in	r26, 0x3d	; 61
   115cc:	be b7       	in	r27, 0x3e	; 62
   115ce:	12 96       	adiw	r26, 0x02	; 2
   115d0:	9c 93       	st	X, r25
   115d2:	8e 93       	st	-X, r24
   115d4:	11 97       	sbiw	r26, 0x01	; 1
   115d6:	8f eb       	ldi	r24, 0xBF	; 191
   115d8:	9a e1       	ldi	r25, 0x1A	; 26
   115da:	82 c0       	rjmp	.+260    	; 0x116e0 <FMenuChangeMOP+0x688>
		       break;
		  case PAY_BANK:
		  	   eeprom_read_block((void*) &strBankName, (const void*) &DefBankName[BankIdx], 11);
   115dc:	8e 01       	movw	r16, r28
   115de:	0b 5f       	subi	r16, 0xFB	; 251
   115e0:	1f 4f       	sbci	r17, 0xFF	; 255
   115e2:	60 91 5f 02 	lds	r22, 0x025F
   115e6:	8b e0       	ldi	r24, 0x0B	; 11
   115e8:	68 9f       	mul	r22, r24
   115ea:	b0 01       	movw	r22, r0
   115ec:	11 24       	eor	r1, r1
   115ee:	67 5f       	subi	r22, 0xF7	; 247
   115f0:	7e 4f       	sbci	r23, 0xFE	; 254
   115f2:	c8 01       	movw	r24, r16
   115f4:	4b e0       	ldi	r20, 0x0B	; 11
   115f6:	50 e0       	ldi	r21, 0x00	; 0
   115f8:	0e 94 b9 ac 	call	0x15972	; 0x15972 <__eerd_block_m128>
		       sprintf_P(lcdteks,PSTR("%s"),strBankName);
   115fc:	00 d0       	rcall	.+0      	; 0x115fe <FMenuChangeMOP+0x5a6>
   115fe:	00 d0       	rcall	.+0      	; 0x11600 <FMenuChangeMOP+0x5a8>
   11600:	00 d0       	rcall	.+0      	; 0x11602 <FMenuChangeMOP+0x5aa>
   11602:	ed b7       	in	r30, 0x3d	; 61
   11604:	fe b7       	in	r31, 0x3e	; 62
   11606:	31 96       	adiw	r30, 0x01	; 1
   11608:	ce 01       	movw	r24, r28
   1160a:	40 96       	adiw	r24, 0x10	; 16
   1160c:	ad b7       	in	r26, 0x3d	; 61
   1160e:	be b7       	in	r27, 0x3e	; 62
   11610:	12 96       	adiw	r26, 0x02	; 2
   11612:	9c 93       	st	X, r25
   11614:	8e 93       	st	-X, r24
   11616:	11 97       	sbiw	r26, 0x01	; 1
   11618:	8c eb       	ldi	r24, 0xBC	; 188
   1161a:	9a e1       	ldi	r25, 0x1A	; 26
   1161c:	93 83       	std	Z+3, r25	; 0x03
   1161e:	82 83       	std	Z+2, r24	; 0x02
   11620:	15 83       	std	Z+5, r17	; 0x05
   11622:	04 83       	std	Z+4, r16	; 0x04
   11624:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
		       sprintf_P(strRef1,PSTR("%s"),strBankName); 
   11628:	ed b7       	in	r30, 0x3d	; 61
   1162a:	fe b7       	in	r31, 0x3e	; 62
   1162c:	31 96       	adiw	r30, 0x01	; 1
   1162e:	8e e8       	ldi	r24, 0x8E	; 142
   11630:	9c e0       	ldi	r25, 0x0C	; 12
   11632:	ad b7       	in	r26, 0x3d	; 61
   11634:	be b7       	in	r27, 0x3e	; 62
   11636:	12 96       	adiw	r26, 0x02	; 2
   11638:	9c 93       	st	X, r25
   1163a:	8e 93       	st	-X, r24
   1163c:	11 97       	sbiw	r26, 0x01	; 1
   1163e:	89 eb       	ldi	r24, 0xB9	; 185
   11640:	9a e1       	ldi	r25, 0x1A	; 26
   11642:	93 83       	std	Z+3, r25	; 0x03
   11644:	82 83       	std	Z+2, r24	; 0x02
   11646:	15 83       	std	Z+5, r17	; 0x05
   11648:	04 83       	std	Z+4, r16	; 0x04
   1164a:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
		       sprintf_P(strRef4,PSTR("%s"),strSurcharge); 
   1164e:	ed b7       	in	r30, 0x3d	; 61
   11650:	fe b7       	in	r31, 0x3e	; 62
   11652:	31 96       	adiw	r30, 0x01	; 1
   11654:	8b ee       	ldi	r24, 0xEB	; 235
   11656:	9f ef       	ldi	r25, 0xFF	; 255
   11658:	e8 0e       	add	r14, r24
   1165a:	f9 1e       	adc	r15, r25
   1165c:	ad b7       	in	r26, 0x3d	; 61
   1165e:	be b7       	in	r27, 0x3e	; 62
   11660:	12 96       	adiw	r26, 0x02	; 2
   11662:	fc 92       	st	X, r15
   11664:	ee 92       	st	-X, r14
   11666:	11 97       	sbiw	r26, 0x01	; 1
   11668:	86 eb       	ldi	r24, 0xB6	; 182
   1166a:	9a e1       	ldi	r25, 0x1A	; 26
   1166c:	93 83       	std	Z+3, r25	; 0x03
   1166e:	82 83       	std	Z+2, r24	; 0x02
   11670:	ce 01       	movw	r24, r28
   11672:	01 96       	adiw	r24, 0x01	; 1
   11674:	39 c0       	rjmp	.+114    	; 0x116e8 <FMenuChangeMOP+0x690>
		       break;
		  case PAY_VOUCHER://Load data Ref1=Voucher on cmVoucherInput
		  	   sprintf_P(strRef1,PSTR("%s"),strVoucherNum); 
   11676:	00 d0       	rcall	.+0      	; 0x11678 <FMenuChangeMOP+0x620>
   11678:	00 d0       	rcall	.+0      	; 0x1167a <FMenuChangeMOP+0x622>
   1167a:	00 d0       	rcall	.+0      	; 0x1167c <FMenuChangeMOP+0x624>
   1167c:	ed b7       	in	r30, 0x3d	; 61
   1167e:	fe b7       	in	r31, 0x3e	; 62
   11680:	31 96       	adiw	r30, 0x01	; 1
   11682:	8e e8       	ldi	r24, 0x8E	; 142
   11684:	9c e0       	ldi	r25, 0x0C	; 12
   11686:	ad b7       	in	r26, 0x3d	; 61
   11688:	be b7       	in	r27, 0x3e	; 62
   1168a:	12 96       	adiw	r26, 0x02	; 2
   1168c:	9c 93       	st	X, r25
   1168e:	8e 93       	st	-X, r24
   11690:	11 97       	sbiw	r26, 0x01	; 1
   11692:	83 eb       	ldi	r24, 0xB3	; 179
   11694:	9a e1       	ldi	r25, 0x1A	; 26
   11696:	93 83       	std	Z+3, r25	; 0x03
   11698:	82 83       	std	Z+2, r24	; 0x02
   1169a:	8c e3       	ldi	r24, 0x3C	; 60
   1169c:	9c e0       	ldi	r25, 0x0C	; 12
   1169e:	24 c0       	rjmp	.+72     	; 0x116e8 <FMenuChangeMOP+0x690>
		       break;
		  case PAY_PUMPTEST:
		  	   sprintf_P(strRef1,PSTR("PUMP TEST")); 
   116a0:	00 d0       	rcall	.+0      	; 0x116a2 <FMenuChangeMOP+0x64a>
   116a2:	00 d0       	rcall	.+0      	; 0x116a4 <FMenuChangeMOP+0x64c>
   116a4:	8e e8       	ldi	r24, 0x8E	; 142
   116a6:	9c e0       	ldi	r25, 0x0C	; 12
   116a8:	ad b7       	in	r26, 0x3d	; 61
   116aa:	be b7       	in	r27, 0x3e	; 62
   116ac:	12 96       	adiw	r26, 0x02	; 2
   116ae:	9c 93       	st	X, r25
   116b0:	8e 93       	st	-X, r24
   116b2:	11 97       	sbiw	r26, 0x01	; 1
   116b4:	89 ea       	ldi	r24, 0xA9	; 169
   116b6:	9a e1       	ldi	r25, 0x1A	; 26
   116b8:	14 96       	adiw	r26, 0x04	; 4
   116ba:	9c 93       	st	X, r25
   116bc:	8e 93       	st	-X, r24
   116be:	13 97       	sbiw	r26, 0x03	; 3
   116c0:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
		  	   sprintf_P(strRef2,PSTR("%s"),strCardID); 	       
   116c4:	00 d0       	rcall	.+0      	; 0x116c6 <FMenuChangeMOP+0x66e>
   116c6:	ed b7       	in	r30, 0x3d	; 61
   116c8:	fe b7       	in	r31, 0x3e	; 62
   116ca:	31 96       	adiw	r30, 0x01	; 1
   116cc:	8e e9       	ldi	r24, 0x9E	; 158
   116ce:	9b e0       	ldi	r25, 0x0B	; 11
   116d0:	ad b7       	in	r26, 0x3d	; 61
   116d2:	be b7       	in	r27, 0x3e	; 62
   116d4:	12 96       	adiw	r26, 0x02	; 2
   116d6:	9c 93       	st	X, r25
   116d8:	8e 93       	st	-X, r24
   116da:	11 97       	sbiw	r26, 0x01	; 1
   116dc:	86 ea       	ldi	r24, 0xA6	; 166
   116de:	9a e1       	ldi	r25, 0x1A	; 26
   116e0:	93 83       	std	Z+3, r25	; 0x03
   116e2:	82 83       	std	Z+2, r24	; 0x02
   116e4:	89 e8       	ldi	r24, 0x89	; 137
   116e6:	9b e0       	ldi	r25, 0x0B	; 11
   116e8:	95 83       	std	Z+5, r25	; 0x05
   116ea:	84 83       	std	Z+4, r24	; 0x04
   116ec:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
   116f0:	ed b7       	in	r30, 0x3d	; 61
   116f2:	fe b7       	in	r31, 0x3e	; 62
   116f4:	36 96       	adiw	r30, 0x06	; 6
   116f6:	0f b6       	in	r0, 0x3f	; 63
   116f8:	f8 94       	cli
   116fa:	fe bf       	out	0x3e, r31	; 62
   116fc:	0f be       	out	0x3f, r0	; 63
   116fe:	ed bf       	out	0x3d, r30	; 61
	     }String[Size]=0;
	 }
}

void leadingZero(char Val,char *StrResult){
     sprintf_P(StrResult,PSTR("%.2d"),Val);
   11700:	00 d0       	rcall	.+0      	; 0x11702 <FMenuChangeMOP+0x6aa>
   11702:	00 d0       	rcall	.+0      	; 0x11704 <FMenuChangeMOP+0x6ac>
   11704:	00 d0       	rcall	.+0      	; 0x11706 <FMenuChangeMOP+0x6ae>
   11706:	ed b7       	in	r30, 0x3d	; 61
   11708:	fe b7       	in	r31, 0x3e	; 62
   1170a:	31 96       	adiw	r30, 0x01	; 1
   1170c:	80 e5       	ldi	r24, 0x50	; 80
   1170e:	97 e0       	ldi	r25, 0x07	; 7
   11710:	ad b7       	in	r26, 0x3d	; 61
   11712:	be b7       	in	r27, 0x3e	; 62
   11714:	12 96       	adiw	r26, 0x02	; 2
   11716:	9c 93       	st	X, r25
   11718:	8e 93       	st	-X, r24
   1171a:	11 97       	sbiw	r26, 0x01	; 1
   1171c:	89 ee       	ldi	r24, 0xE9	; 233
   1171e:	9e e0       	ldi	r25, 0x0E	; 14
   11720:	93 83       	std	Z+3, r25	; 0x03
   11722:	82 83       	std	Z+2, r24	; 0x02
   11724:	80 91 b8 01 	lds	r24, 0x01B8
   11728:	84 83       	std	Z+4, r24	; 0x04
   1172a:	15 82       	std	Z+5, r1	; 0x05
   1172c:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
		  	   sprintf_P(strRef1,PSTR("PUMP TEST")); 
		  	   sprintf_P(strRef2,PSTR("%s"),strCardID); 	       
		       break;
		  }
		  leadingZero(MOPType,strPaymentType);
		  AddSpaceLead(strRef1,20);
   11730:	ed b7       	in	r30, 0x3d	; 61
   11732:	fe b7       	in	r31, 0x3e	; 62
   11734:	36 96       	adiw	r30, 0x06	; 6
   11736:	0f b6       	in	r0, 0x3f	; 63
   11738:	f8 94       	cli
   1173a:	fe bf       	out	0x3e, r31	; 62
   1173c:	0f be       	out	0x3f, r0	; 63
   1173e:	ed bf       	out	0x3d, r30	; 61
   11740:	8e e8       	ldi	r24, 0x8E	; 142
   11742:	9c e0       	ldi	r25, 0x0C	; 12
   11744:	64 e1       	ldi	r22, 0x14	; 20
   11746:	0e 94 fd 2e 	call	0x5dfa	; 0x5dfa <AddSpaceLead>
		  AddSpaceLead(strRef2,20);
   1174a:	8e e9       	ldi	r24, 0x9E	; 158
   1174c:	9b e0       	ldi	r25, 0x0B	; 11
   1174e:	64 e1       	ldi	r22, 0x14	; 20
   11750:	0e 94 fd 2e 	call	0x5dfa	; 0x5dfa <AddSpaceLead>
		  AddSpaceLead(strRef3,20);
   11754:	8d e7       	ldi	r24, 0x7D	; 125
   11756:	98 e0       	ldi	r25, 0x08	; 8
   11758:	64 e1       	ldi	r22, 0x14	; 20
   1175a:	0e 94 fd 2e 	call	0x5dfa	; 0x5dfa <AddSpaceLead>
		  AddSpaceLead(strRef4,20);
   1175e:	85 ea       	ldi	r24, 0xA5	; 165
   11760:	93 e0       	ldi	r25, 0x03	; 3
   11762:	64 e1       	ldi	r22, 0x14	; 20
   11764:	0e 94 fd 2e 	call	0x5dfa	; 0x5dfa <AddSpaceLead>
		  iWait=0;
   11768:	10 92 5d 02 	sts	0x025D, r1
		  IsMessage09=False;
   1176c:	10 92 a3 01 	sts	0x01A3, r1
		  stChangeMOP=cmSendMessage32;	      
   11770:	87 e1       	ldi	r24, 0x17	; 23
   11772:	52 ce       	rjmp	.-860    	; 0x11418 <FMenuChangeMOP+0x3c0>
	      break;
     case cmSendMessage32://SendMessage32
	      sendMessage32();
   11774:	0e 94 28 88 	call	0x11050	; 0x11050 <sendMessage32>
		  iLoop=0;
   11778:	10 92 5c 02 	sts	0x025C, r1
   1177c:	10 92 5b 02 	sts	0x025B, r1
		  iPos=0;
   11780:	10 92 5e 02 	sts	0x025E, r1
		  lcd_printf(3,1,PSTR("Please Wait"));
   11784:	83 e0       	ldi	r24, 0x03	; 3
   11786:	61 e0       	ldi	r22, 0x01	; 1
   11788:	4a e9       	ldi	r20, 0x9A	; 154
   1178a:	5a e1       	ldi	r21, 0x1A	; 26
   1178c:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  stChangeMOP=cmWaitReplyMessage;	      
   11790:	88 e1       	ldi	r24, 0x18	; 24
   11792:	42 ce       	rjmp	.-892    	; 0x11418 <FMenuChangeMOP+0x3c0>
	      break;
     case cmWaitReplyMessage:
          iLoop++;
   11794:	80 91 5b 02 	lds	r24, 0x025B
   11798:	90 91 5c 02 	lds	r25, 0x025C
   1179c:	01 96       	adiw	r24, 0x01	; 1
   1179e:	90 93 5c 02 	sts	0x025C, r25
   117a2:	80 93 5b 02 	sts	0x025B, r24
		  if ((iLoop%MSG_WAIT_TIMOUT)==0){
   117a6:	68 e9       	ldi	r22, 0x98	; 152
   117a8:	7a e3       	ldi	r23, 0x3A	; 58
   117aa:	0e 94 03 aa 	call	0x15406	; 0x15406 <__udivmodhi4>
   117ae:	89 2b       	or	r24, r25
   117b0:	29 f5       	brne	.+74     	; 0x117fc <FMenuChangeMOP+0x7a4>
			 if (iPos<5){
   117b2:	60 91 5e 02 	lds	r22, 0x025E
   117b6:	65 30       	cpi	r22, 0x05	; 5
   117b8:	68 f4       	brcc	.+26     	; 0x117d4 <FMenuChangeMOP+0x77c>
				 lcd_xy(3,(13+iPos));_lcd('.');
   117ba:	63 5f       	subi	r22, 0xF3	; 243
   117bc:	83 e0       	ldi	r24, 0x03	; 3
   117be:	0e 94 3c a4 	call	0x14878	; 0x14878 <lcd_xy>
   117c2:	8e e2       	ldi	r24, 0x2E	; 46
   117c4:	0e 94 16 a4 	call	0x1482c	; 0x1482c <_lcd>
				 iPos++;
   117c8:	80 91 5e 02 	lds	r24, 0x025E
   117cc:	8f 5f       	subi	r24, 0xFF	; 255
   117ce:	80 93 5e 02 	sts	0x025E, r24
   117d2:	14 c0       	rjmp	.+40     	; 0x117fc <FMenuChangeMOP+0x7a4>
				}
			 else{
				 iPos=0;
   117d4:	10 92 5e 02 	sts	0x025E, r1
				 lcd_printf(3,(13+iPos),PSTR("       "));
   117d8:	83 e0       	ldi	r24, 0x03	; 3
   117da:	6d e0       	ldi	r22, 0x0D	; 13
   117dc:	42 e9       	ldi	r20, 0x92	; 146
   117de:	5a e1       	ldi	r21, 0x1A	; 26
   117e0:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
				 //Resend Message32
				 if (iWait<5)stChangeMOP=cmSendMessage32;
   117e4:	80 91 5d 02 	lds	r24, 0x025D
   117e8:	85 30       	cpi	r24, 0x05	; 5
   117ea:	18 f4       	brcc	.+6      	; 0x117f2 <FMenuChangeMOP+0x79a>
   117ec:	87 e1       	ldi	r24, 0x17	; 23
   117ee:	80 93 61 02 	sts	0x0261, r24
				iWait++;
   117f2:	80 91 5d 02 	lds	r24, 0x025D
   117f6:	8f 5f       	subi	r24, 0xFF	; 255
   117f8:	80 93 5d 02 	sts	0x025D, r24
				}
		  }
		  if (iWait>5)stChangeMOP=cmNoReply;
   117fc:	80 91 5d 02 	lds	r24, 0x025D
   11800:	86 30       	cpi	r24, 0x06	; 6
   11802:	18 f0       	brcs	.+6      	; 0x1180a <FMenuChangeMOP+0x7b2>
   11804:	8a e1       	ldi	r24, 0x1A	; 26
   11806:	80 93 61 02 	sts	0x0261, r24
		  if (IsMessage09==True)stChangeMOP=cmDisplayFreeMessage;
   1180a:	80 91 a3 01 	lds	r24, 0x01A3
   1180e:	81 30       	cpi	r24, 0x01	; 1
   11810:	19 f4       	brne	.+6      	; 0x11818 <FMenuChangeMOP+0x7c0>
   11812:	89 e1       	ldi	r24, 0x19	; 25
   11814:	80 93 61 02 	sts	0x0261, r24
		  if (IsMessage99==True)stChangeMOP=cmFinishChangeMOP;
   11818:	80 91 9f 01 	lds	r24, 0x019F
   1181c:	81 30       	cpi	r24, 0x01	; 1
   1181e:	f1 f5       	brne	.+124    	; 0x1189c <FMenuChangeMOP+0x844>
   11820:	37 c0       	rjmp	.+110    	; 0x11890 <FMenuChangeMOP+0x838>
		  break;
     case cmDisplayFreeMessage:
	      IsMessage09=False;
   11822:	10 92 a3 01 	sts	0x01A3, r1
	      msgResult=procMessage09();
   11826:	0e 94 c7 17 	call	0x2f8e	; 0x2f8e <procMessage09>
		  lcd_clear();
   1182a:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
		  lcd_print(1,1,strFreeMessageLine1);
   1182e:	81 e0       	ldi	r24, 0x01	; 1
   11830:	61 e0       	ldi	r22, 0x01	; 1
   11832:	42 e9       	ldi	r20, 0x92	; 146
   11834:	58 e0       	ldi	r21, 0x08	; 8
   11836:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
		  lcd_print(2,1,strFreeMessageLine2);
   1183a:	82 e0       	ldi	r24, 0x02	; 2
   1183c:	61 e0       	ldi	r22, 0x01	; 1
   1183e:	43 ea       	ldi	r20, 0xA3	; 163
   11840:	57 e0       	ldi	r21, 0x07	; 7
   11842:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
		  lcd_print(3,1,strFreeMessageLine3);
   11846:	83 e0       	ldi	r24, 0x03	; 3
   11848:	61 e0       	ldi	r22, 0x01	; 1
   1184a:	4c e1       	ldi	r20, 0x1C	; 28
   1184c:	58 e0       	ldi	r21, 0x08	; 8
   1184e:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
		  lcd_print(4,1,strFreeMessageLine4);
   11852:	84 e0       	ldi	r24, 0x04	; 4
   11854:	61 e0       	ldi	r22, 0x01	; 1
   11856:	46 ed       	ldi	r20, 0xD6	; 214
   11858:	5b e0       	ldi	r21, 0x0B	; 11
   1185a:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
   1185e:	0e c0       	rjmp	.+28     	; 0x1187c <FMenuChangeMOP+0x824>
		  TimDisplay=0;
          stChangeMOP=cmDelayMOP;
	      break;
     case cmNoReply:
	      lcd_clear();
   11860:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
		  lcd_printf(2,1,PSTR("No Reply    "));
   11864:	82 e0       	ldi	r24, 0x02	; 2
   11866:	61 e0       	ldi	r22, 0x01	; 1
   11868:	45 e8       	ldi	r20, 0x85	; 133
   1186a:	5a e1       	ldi	r21, 0x1A	; 26
   1186c:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
	      lcd_printf(3,1,PSTR("TCP/IP Error"));
   11870:	83 e0       	ldi	r24, 0x03	; 3
   11872:	61 e0       	ldi	r22, 0x01	; 1
   11874:	48 e7       	ldi	r20, 0x78	; 120
   11876:	5a e1       	ldi	r21, 0x1A	; 26
   11878:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  TimDisplay=0;
   1187c:	10 92 92 01 	sts	0x0192, r1
          stChangeMOP=cmDelayMOP;
   11880:	8b e1       	ldi	r24, 0x1B	; 27
   11882:	ca cd       	rjmp	.-1132   	; 0x11418 <FMenuChangeMOP+0x3c0>
	      break;
     case cmDelayMOP:
	      if (TimDisplay>9)stChangeMOP=cmExitChangeMOP;
   11884:	80 91 92 01 	lds	r24, 0x0192
   11888:	8a 30       	cpi	r24, 0x0A	; 10
   1188a:	40 f0       	brcs	.+16     	; 0x1189c <FMenuChangeMOP+0x844>
   1188c:	8c e1       	ldi	r24, 0x1C	; 28
   1188e:	c4 cd       	rjmp	.-1144   	; 0x11418 <FMenuChangeMOP+0x3c0>
	      break;
     case cmExitChangeMOP:
	      stChangeMOP=cmFinishChangeMOP;
   11890:	8d e1       	ldi	r24, 0x1D	; 29
   11892:	c2 cd       	rjmp	.-1148   	; 0x11418 <FMenuChangeMOP+0x3c0>
	      break;
     case cmFinishChangeMOP:
	      stChangeMOP=cmInit;
   11894:	10 92 61 02 	sts	0x0261, r1
   11898:	81 e0       	ldi	r24, 0x01	; 1
   1189a:	01 c0       	rjmp	.+2      	; 0x1189e <FMenuChangeMOP+0x846>
   1189c:	80 e0       	ldi	r24, 0x00	; 0
		  Result=MENU_DONE;
	      break;
	 }
  return Result;
}
   1189e:	a3 96       	adiw	r28, 0x23	; 35
   118a0:	0f b6       	in	r0, 0x3f	; 63
   118a2:	f8 94       	cli
   118a4:	de bf       	out	0x3e, r29	; 62
   118a6:	0f be       	out	0x3f, r0	; 63
   118a8:	cd bf       	out	0x3d, r28	; 61
   118aa:	cf 91       	pop	r28
   118ac:	df 91       	pop	r29
   118ae:	1f 91       	pop	r17
   118b0:	0f 91       	pop	r16
   118b2:	ff 90       	pop	r15
   118b4:	ef 90       	pop	r14
   118b6:	df 90       	pop	r13
   118b8:	cf 90       	pop	r12
   118ba:	bf 90       	pop	r11
   118bc:	af 90       	pop	r10
   118be:	08 95       	ret

000118c0 <sendMessage28>:
    uart_print(1, 0,strSend);
	UpdateCardID();
	sprintf_P(strSend,PSTR("%s%sF968CFFB"),strFIP_ID,strCardID);
    uart_print(1, 0,strSend);
	uart(1, 1,0x02);
	*/IFTSendMessage(MSG_28);
   118c0:	88 e2       	ldi	r24, 0x28	; 40
   118c2:	0e 94 c0 79 	call	0xf380	; 0xf380 <IFTSendMessage>
}
   118c6:	08 95       	ret

000118c8 <FMenuReprint>:
	       break;
	 }
return Result;
}

char FMenuReprint(){
   118c8:	0f 93       	push	r16
   118ca:	1f 93       	push	r17
   118cc:	df 93       	push	r29
   118ce:	cf 93       	push	r28
   118d0:	cd b7       	in	r28, 0x3d	; 61
   118d2:	de b7       	in	r29, 0x3e	; 62
   118d4:	64 97       	sbiw	r28, 0x14	; 20
   118d6:	0f b6       	in	r0, 0x3f	; 63
   118d8:	f8 94       	cli
   118da:	de bf       	out	0x3e, r29	; 62
   118dc:	0f be       	out	0x3f, r0	; 63
   118de:	cd bf       	out	0x3d, r28	; 61
static char KeyPressed=0,FIP_Used=0;
       char lcdteks[20],FIPResult,KeyChar;//,FIP_USED;
	   char PassResult,Result=MENU_NONE,ReprintResult;

     Result=MENU_NONE;
	 switch(stReprint){
   118e0:	80 91 68 02 	lds	r24, 0x0268
   118e4:	87 30       	cpi	r24, 0x07	; 7
   118e6:	09 f4       	brne	.+2      	; 0x118ea <FMenuReprint+0x22>
   118e8:	9b c0       	rjmp	.+310    	; 0x11a20 <FMenuReprint+0x158>
   118ea:	88 30       	cpi	r24, 0x08	; 8
   118ec:	90 f4       	brcc	.+36     	; 0x11912 <FMenuReprint+0x4a>
   118ee:	83 30       	cpi	r24, 0x03	; 3
   118f0:	09 f4       	brne	.+2      	; 0x118f4 <FMenuReprint+0x2c>
   118f2:	43 c0       	rjmp	.+134    	; 0x1197a <FMenuReprint+0xb2>
   118f4:	84 30       	cpi	r24, 0x04	; 4
   118f6:	30 f4       	brcc	.+12     	; 0x11904 <FMenuReprint+0x3c>
   118f8:	81 30       	cpi	r24, 0x01	; 1
   118fa:	09 f4       	brne	.+2      	; 0x118fe <FMenuReprint+0x36>
   118fc:	52 c0       	rjmp	.+164    	; 0x119a2 <FMenuReprint+0xda>
   118fe:	82 30       	cpi	r24, 0x02	; 2
   11900:	48 f5       	brcc	.+82     	; 0x11954 <FMenuReprint+0x8c>
   11902:	1d c0       	rjmp	.+58     	; 0x1193e <FMenuReprint+0x76>
   11904:	85 30       	cpi	r24, 0x05	; 5
   11906:	09 f4       	brne	.+2      	; 0x1190a <FMenuReprint+0x42>
   11908:	7c c0       	rjmp	.+248    	; 0x11a02 <FMenuReprint+0x13a>
   1190a:	86 30       	cpi	r24, 0x06	; 6
   1190c:	08 f0       	brcs	.+2      	; 0x11910 <FMenuReprint+0x48>
   1190e:	4d c0       	rjmp	.+154    	; 0x119aa <FMenuReprint+0xe2>
   11910:	42 c0       	rjmp	.+132    	; 0x11996 <FMenuReprint+0xce>
   11912:	8b 30       	cpi	r24, 0x0B	; 11
   11914:	09 f4       	brne	.+2      	; 0x11918 <FMenuReprint+0x50>
   11916:	e5 c0       	rjmp	.+458    	; 0x11ae2 <FMenuReprint+0x21a>
   11918:	8c 30       	cpi	r24, 0x0C	; 12
   1191a:	38 f4       	brcc	.+14     	; 0x1192a <FMenuReprint+0x62>
   1191c:	89 30       	cpi	r24, 0x09	; 9
   1191e:	09 f4       	brne	.+2      	; 0x11922 <FMenuReprint+0x5a>
   11920:	c5 c0       	rjmp	.+394    	; 0x11aac <FMenuReprint+0x1e4>
   11922:	8a 30       	cpi	r24, 0x0A	; 10
   11924:	08 f0       	brcs	.+2      	; 0x11928 <FMenuReprint+0x60>
   11926:	d7 c0       	rjmp	.+430    	; 0x11ad6 <FMenuReprint+0x20e>
   11928:	89 c0       	rjmp	.+274    	; 0x11a3c <FMenuReprint+0x174>
   1192a:	8d 30       	cpi	r24, 0x0D	; 13
   1192c:	09 f4       	brne	.+2      	; 0x11930 <FMenuReprint+0x68>
   1192e:	f6 c0       	rjmp	.+492    	; 0x11b1c <FMenuReprint+0x254>
   11930:	8d 30       	cpi	r24, 0x0D	; 13
   11932:	08 f4       	brcc	.+2      	; 0x11936 <FMenuReprint+0x6e>
   11934:	e0 c0       	rjmp	.+448    	; 0x11af6 <FMenuReprint+0x22e>
   11936:	8e 30       	cpi	r24, 0x0E	; 14
   11938:	09 f0       	breq	.+2      	; 0x1193c <FMenuReprint+0x74>
   1193a:	f9 c0       	rjmp	.+498    	; 0x11b2e <FMenuReprint+0x266>
   1193c:	f4 c0       	rjmp	.+488    	; 0x11b26 <FMenuReprint+0x25e>
	 case rtInit:
	      lcd_clear();
   1193e:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
          if (IFType==IT_SLAVE)stReprint=rtFIP;
   11942:	80 91 00 01 	lds	r24, 0x0100
   11946:	81 30       	cpi	r24, 0x01	; 1
   11948:	09 f4       	brne	.+2      	; 0x1194c <FMenuReprint+0x84>
   1194a:	c0 c0       	rjmp	.+384    	; 0x11acc <FMenuReprint+0x204>
		  else
		  if (IFType==IT_STANDALONE)stReprint=rtStandaloneFIP;//rtValidPassword;//rtStandaloneFIP;
   1194c:	82 30       	cpi	r24, 0x02	; 2
   1194e:	09 f0       	breq	.+2      	; 0x11952 <FMenuReprint+0x8a>
   11950:	ee c0       	rjmp	.+476    	; 0x11b2e <FMenuReprint+0x266>
   11952:	04 c0       	rjmp	.+8      	; 0x1195c <FMenuReprint+0x94>
	      break;
     case rtValidPassword:
	      PassResult=FMenuPassword();
   11954:	0e 94 23 76 	call	0xec46	; 0xec46 <FMenuPassword>
	      if (PassResult==MP_VALID_ADMIN)stReprint=rtStandaloneFIP;
   11958:	84 30       	cpi	r24, 0x04	; 4
   1195a:	11 f4       	brne	.+4      	; 0x11960 <FMenuReprint+0x98>
   1195c:	81 e0       	ldi	r24, 0x01	; 1
   1195e:	0a c0       	rjmp	.+20     	; 0x11974 <FMenuReprint+0xac>
		  else
	      if (PassResult==MP_VALID_SYSTEM)stReprint=rtInvalidPassword;
   11960:	85 30       	cpi	r24, 0x05	; 5
   11962:	11 f0       	breq	.+4      	; 0x11968 <FMenuReprint+0xa0>
          else
	      if (PassResult==MP_INVALID)stReprint=rtInvalidPassword;
   11964:	82 30       	cpi	r24, 0x02	; 2
   11966:	11 f4       	brne	.+4      	; 0x1196c <FMenuReprint+0xa4>
   11968:	83 e0       	ldi	r24, 0x03	; 3
   1196a:	04 c0       	rjmp	.+8      	; 0x11974 <FMenuReprint+0xac>
		  else
	      if (PassResult==MP_CANCEL)stReprint=rtExitReprint;
   1196c:	81 30       	cpi	r24, 0x01	; 1
   1196e:	09 f0       	breq	.+2      	; 0x11972 <FMenuReprint+0xaa>
   11970:	de c0       	rjmp	.+444    	; 0x11b2e <FMenuReprint+0x266>
   11972:	8e e0       	ldi	r24, 0x0E	; 14
   11974:	80 93 68 02 	sts	0x0268, r24
   11978:	da c0       	rjmp	.+436    	; 0x11b2e <FMenuReprint+0x266>
	      break;
     case rtInvalidPassword:
          TimDisplay=0;
   1197a:	10 92 92 01 	sts	0x0192, r1
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   1197e:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   11980:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   11982:	81 e0       	ldi	r24, 0x01	; 1
   11984:	80 93 bc 01 	sts	0x01BC, r24
	      if (PassResult==MP_CANCEL)stReprint=rtExitReprint;
	      break;
     case rtInvalidPassword:
          TimDisplay=0;
		  system_beep(1);
		  lcd_printf(3,1,PSTR("Access Denied"));
   11988:	83 e0       	ldi	r24, 0x03	; 3
   1198a:	61 e0       	ldi	r22, 0x01	; 1
   1198c:	4b ec       	ldi	r20, 0xCB	; 203
   1198e:	5d e1       	ldi	r21, 0x1D	; 29
   11990:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
   11994:	43 c0       	rjmp	.+134    	; 0x11a1c <FMenuReprint+0x154>
          stReprint=rtTimDisplayInvalid;
	      break;
     case rtTimDisplayInvalid:
	      if (TimDisplay>2)stReprint=rtExitReprint;
   11996:	80 91 92 01 	lds	r24, 0x0192
   1199a:	83 30       	cpi	r24, 0x03	; 3
   1199c:	08 f4       	brcc	.+2      	; 0x119a0 <FMenuReprint+0xd8>
   1199e:	c7 c0       	rjmp	.+398    	; 0x11b2e <FMenuReprint+0x266>
   119a0:	e8 cf       	rjmp	.-48     	; 0x11972 <FMenuReprint+0xaa>
	      break;
     case rtStandaloneFIP:
	      _scr_pump();
   119a2:	0e 94 49 47 	call	0x8e92	; 0x8e92 <_scr_pump>
		  stReprint=rtStandaloneInputFIP;
   119a6:	86 e0       	ldi	r24, 0x06	; 6
   119a8:	e5 cf       	rjmp	.-54     	; 0x11974 <FMenuReprint+0xac>
	      break;
     case rtStandaloneInputFIP:
		  KeyChar=_key_btn(_key_scan(1));
   119aa:	81 e0       	ldi	r24, 0x01	; 1
   119ac:	0e 94 f6 a5 	call	0x14bec	; 0x14bec <_key_scan>
   119b0:	0e 94 57 a5 	call	0x14aae	; 0x14aae <_key_btn>
   119b4:	98 2f       	mov	r25, r24
		  if ((KeyChar>='1')&&(KeyChar<='8')){
   119b6:	81 53       	subi	r24, 0x31	; 49
   119b8:	88 30       	cpi	r24, 0x08	; 8
   119ba:	f8 f4       	brcc	.+62     	; 0x119fa <FMenuReprint+0x132>
		       SendPoolingCommand(SC_TRANSACTION,GetPumpID(KeyChar-'0'));
   119bc:	09 2f       	mov	r16, r25
   119be:	00 53       	subi	r16, 0x30	; 48
   119c0:	80 2f       	mov	r24, r16
   119c2:	0e 94 84 20 	call	0x4108	; 0x4108 <GetPumpID>
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
   119c6:	94 e0       	ldi	r25, 0x04	; 4
   119c8:	90 93 a7 05 	sts	0x05A7, r25
	 PoolMsg=plMsg;
   119cc:	80 93 d3 0b 	sts	0x0BD3, r24
     IsControlPooling=True;
   119d0:	81 e0       	ldi	r24, 0x01	; 1
   119d2:	80 93 84 01 	sts	0x0184, r24
	      break;
     case rtStandaloneInputFIP:
		  KeyChar=_key_btn(_key_scan(1));
		  if ((KeyChar>='1')&&(KeyChar<='8')){
		       SendPoolingCommand(SC_TRANSACTION,GetPumpID(KeyChar-'0'));
			   TimSend=0;
   119d6:	10 92 78 0c 	sts	0x0C78, r1
			   while(TimSend<6){};
   119da:	80 91 78 0c 	lds	r24, 0x0C78
   119de:	86 30       	cpi	r24, 0x06	; 6
   119e0:	e0 f3       	brcs	.-8      	; 0x119da <FMenuReprint+0x112>
		       ReprintResult=PrintStandalone(KeyChar-'0',True);
   119e2:	80 2f       	mov	r24, r16
   119e4:	61 e0       	ldi	r22, 0x01	; 1
   119e6:	0e 94 c5 22 	call	0x458a	; 0x458a <PrintStandalone>
			   if (ReprintResult==PS_NO_DATA)stReprint=rtDisplayNoTransaction;
   119ea:	82 31       	cpi	r24, 0x12	; 18
   119ec:	11 f4       	brne	.+4      	; 0x119f2 <FMenuReprint+0x12a>
   119ee:	85 e0       	ldi	r24, 0x05	; 5
   119f0:	c1 cf       	rjmp	.-126    	; 0x11974 <FMenuReprint+0xac>
			   else if (ReprintResult==PS_PRINTED)stReprint=rtExitReprint;               
   119f2:	81 31       	cpi	r24, 0x11	; 17
   119f4:	09 f0       	breq	.+2      	; 0x119f8 <FMenuReprint+0x130>
   119f6:	9b c0       	rjmp	.+310    	; 0x11b2e <FMenuReprint+0x266>
   119f8:	bc cf       	rjmp	.-136    	; 0x11972 <FMenuReprint+0xaa>
			   //stReprint=rtExitReprint;
		  }else if (KeyChar=='*')stReprint=rtExitReprint;
   119fa:	9a 32       	cpi	r25, 0x2A	; 42
   119fc:	09 f0       	breq	.+2      	; 0x11a00 <FMenuReprint+0x138>
   119fe:	97 c0       	rjmp	.+302    	; 0x11b2e <FMenuReprint+0x266>
   11a00:	b8 cf       	rjmp	.-144    	; 0x11972 <FMenuReprint+0xaa>
	      break;
     case rtDisplayNoTransaction:
	      lcd_printf(3, 1,PSTR("Tidak Ada Transaksi "));
   11a02:	83 e0       	ldi	r24, 0x03	; 3
   11a04:	61 e0       	ldi	r22, 0x01	; 1
   11a06:	46 eb       	ldi	r20, 0xB6	; 182
   11a08:	5d e1       	ldi	r21, 0x1D	; 29
   11a0a:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   11a0e:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   11a10:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   11a12:	81 e0       	ldi	r24, 0x01	; 1
   11a14:	80 93 bc 01 	sts	0x01BC, r24
		  }else if (KeyChar=='*')stReprint=rtExitReprint;
	      break;
     case rtDisplayNoTransaction:
	      lcd_printf(3, 1,PSTR("Tidak Ada Transaksi "));
		  system_beep(1);
          TimDisplay=0;
   11a18:	10 92 92 01 	sts	0x0192, r1
		  stReprint=rtTimDisplayInvalid;
   11a1c:	84 e0       	ldi	r24, 0x04	; 4
   11a1e:	aa cf       	rjmp	.-172    	; 0x11974 <FMenuReprint+0xac>
	      break;
	 case rtFIP:
	      FIPResult=menu_FIP(&FIP_Used,strFIP_ID);
   11a20:	86 e6       	ldi	r24, 0x66	; 102
   11a22:	92 e0       	ldi	r25, 0x02	; 2
   11a24:	69 eb       	ldi	r22, 0xB9	; 185
   11a26:	77 e0       	ldi	r23, 0x07	; 7
   11a28:	0e 94 af 54 	call	0xa95e	; 0xa95e <menu_FIP>
		  if (FIPResult==FIP_DONE){
   11a2c:	88 23       	and	r24, r24
   11a2e:	11 f4       	brne	.+4      	; 0x11a34 <FMenuReprint+0x16c>
		      stReprint=rtRFID;
   11a30:	88 e0       	ldi	r24, 0x08	; 8
   11a32:	a0 cf       	rjmp	.-192    	; 0x11974 <FMenuReprint+0xac>
			  }
		  else
		  if (FIPResult==FIP_CANCEL)stReprint=rtExitReprint;
   11a34:	82 30       	cpi	r24, 0x02	; 2
   11a36:	09 f0       	breq	.+2      	; 0x11a3a <FMenuReprint+0x172>
   11a38:	7a c0       	rjmp	.+244    	; 0x11b2e <FMenuReprint+0x266>
   11a3a:	9b cf       	rjmp	.-202    	; 0x11972 <FMenuReprint+0xaa>
	      break;
	 case rtRFID:
	      lcd_clear();
   11a3c:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
		  sprintf_P(lcdteks,PSTR("RePrint FIP:%s "),strFIP_ID);lcd_print(1,1,lcdteks);
   11a40:	00 d0       	rcall	.+0      	; 0x11a42 <FMenuReprint+0x17a>
   11a42:	00 d0       	rcall	.+0      	; 0x11a44 <FMenuReprint+0x17c>
   11a44:	00 d0       	rcall	.+0      	; 0x11a46 <FMenuReprint+0x17e>
   11a46:	ed b7       	in	r30, 0x3d	; 61
   11a48:	fe b7       	in	r31, 0x3e	; 62
   11a4a:	31 96       	adiw	r30, 0x01	; 1
   11a4c:	8e 01       	movw	r16, r28
   11a4e:	0f 5f       	subi	r16, 0xFF	; 255
   11a50:	1f 4f       	sbci	r17, 0xFF	; 255
   11a52:	ad b7       	in	r26, 0x3d	; 61
   11a54:	be b7       	in	r27, 0x3e	; 62
   11a56:	12 96       	adiw	r26, 0x02	; 2
   11a58:	1c 93       	st	X, r17
   11a5a:	0e 93       	st	-X, r16
   11a5c:	11 97       	sbiw	r26, 0x01	; 1
   11a5e:	86 ea       	ldi	r24, 0xA6	; 166
   11a60:	9d e1       	ldi	r25, 0x1D	; 29
   11a62:	93 83       	std	Z+3, r25	; 0x03
   11a64:	82 83       	std	Z+2, r24	; 0x02
   11a66:	89 eb       	ldi	r24, 0xB9	; 185
   11a68:	97 e0       	ldi	r25, 0x07	; 7
   11a6a:	95 83       	std	Z+5, r25	; 0x05
   11a6c:	84 83       	std	Z+4, r24	; 0x04
   11a6e:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
   11a72:	8d b7       	in	r24, 0x3d	; 61
   11a74:	9e b7       	in	r25, 0x3e	; 62
   11a76:	06 96       	adiw	r24, 0x06	; 6
   11a78:	0f b6       	in	r0, 0x3f	; 63
   11a7a:	f8 94       	cli
   11a7c:	9e bf       	out	0x3e, r25	; 62
   11a7e:	0f be       	out	0x3f, r0	; 63
   11a80:	8d bf       	out	0x3d, r24	; 61
   11a82:	81 e0       	ldi	r24, 0x01	; 1
   11a84:	61 e0       	ldi	r22, 0x01	; 1
   11a86:	a8 01       	movw	r20, r16
   11a88:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
		  lcd_printf(2,1,PSTR(  "Tap Supervisor Card"));
   11a8c:	82 e0       	ldi	r24, 0x02	; 2
   11a8e:	61 e0       	ldi	r22, 0x01	; 1
   11a90:	42 e9       	ldi	r20, 0x92	; 146
   11a92:	5d e1       	ldi	r21, 0x1D	; 29
   11a94:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
          lcd_printf(4,1,PSTR(  "[*]Back    [#]Exit"));
   11a98:	84 e0       	ldi	r24, 0x04	; 4
   11a9a:	61 e0       	ldi	r22, 0x01	; 1
   11a9c:	4f e7       	ldi	r20, 0x7F	; 127
   11a9e:	5d e1       	ldi	r21, 0x1D	; 29
   11aa0:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  IsRFIDDetected=False;
   11aa4:	10 92 98 01 	sts	0x0198, r1
		  stReprint=rtInputRFID;
   11aa8:	89 e0       	ldi	r24, 0x09	; 9
   11aaa:	64 cf       	rjmp	.-312    	; 0x11974 <FMenuReprint+0xac>
	      break;
	 case rtInputRFID:
	      if (IsRFIDDetected==True){
   11aac:	80 91 98 01 	lds	r24, 0x0198
   11ab0:	81 30       	cpi	r24, 0x01	; 1
   11ab2:	29 f4       	brne	.+10     	; 0x11abe <FMenuReprint+0x1f6>
		      IsRFIDDetected=False;
   11ab4:	10 92 98 01 	sts	0x0198, r1
		      stReprint=rtSendMessage28;
   11ab8:	8a e0       	ldi	r24, 0x0A	; 10
   11aba:	80 93 68 02 	sts	0x0268, r24
		  }
	 	  KeyPressed=_key_scan(1);
   11abe:	81 e0       	ldi	r24, 0x01	; 1
   11ac0:	0e 94 f6 a5 	call	0x14bec	; 0x14bec <_key_scan>
   11ac4:	80 93 67 02 	sts	0x0267, r24
		  if (KeyPressed==_KEY_CANCEL){
   11ac8:	87 3e       	cpi	r24, 0xE7	; 231
   11aca:	11 f4       	brne	.+4      	; 0x11ad0 <FMenuReprint+0x208>
		      stReprint=rtFIP;
   11acc:	87 e0       	ldi	r24, 0x07	; 7
   11ace:	52 cf       	rjmp	.-348    	; 0x11974 <FMenuReprint+0xac>
			  }
		  else
		  if (KeyPressed==_KEY_ENTER)stReprint=rtExitReprint;
   11ad0:	87 3b       	cpi	r24, 0xB7	; 183
   11ad2:	69 f5       	brne	.+90     	; 0x11b2e <FMenuReprint+0x266>
   11ad4:	4e cf       	rjmp	.-356    	; 0x11972 <FMenuReprint+0xaa>
	      break;
     case rtSendMessage28:
		  sendMessage28();
   11ad6:	0e 94 60 8c 	call	0x118c0	; 0x118c0 <sendMessage28>
		  TimSend=0;
   11ada:	10 92 78 0c 	sts	0x0C78, r1
		  stReprint=rtWaitReply;
   11ade:	8b e0       	ldi	r24, 0x0B	; 11
   11ae0:	49 cf       	rjmp	.-366    	; 0x11974 <FMenuReprint+0xac>
		  break;
     case rtWaitReply:
	      if (TimSend>TIM_SEND*3)stReprint=rtNoConnection;
   11ae2:	80 91 78 0c 	lds	r24, 0x0C78
   11ae6:	8f 31       	cpi	r24, 0x1F	; 31
   11ae8:	18 f0       	brcs	.+6      	; 0x11af0 <FMenuReprint+0x228>
   11aea:	8c e0       	ldi	r24, 0x0C	; 12
   11aec:	80 93 68 02 	sts	0x0268, r24
	      if (IsMessage99==True){
   11af0:	80 91 9f 01 	lds	r24, 0x019F
   11af4:	3b cf       	rjmp	.-394    	; 0x1196c <FMenuReprint+0xa4>
		      stReprint=rtExitReprint;
		  }
	      break;
     case rtNoConnection:
	      lcd_clear();
   11af6:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
		  lcd_printf(2,1,PSTR("TCP/IP ERROR "));
   11afa:	82 e0       	ldi	r24, 0x02	; 2
   11afc:	61 e0       	ldi	r22, 0x01	; 1
   11afe:	41 e7       	ldi	r20, 0x71	; 113
   11b00:	5d e1       	ldi	r21, 0x1D	; 29
   11b02:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  lcd_printf(3,1,PSTR("No Connection"));
   11b06:	83 e0       	ldi	r24, 0x03	; 3
   11b08:	61 e0       	ldi	r22, 0x01	; 1
   11b0a:	43 e6       	ldi	r20, 0x63	; 99
   11b0c:	5d e1       	ldi	r21, 0x1D	; 29
   11b0e:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  TimDisplay=5;
   11b12:	85 e0       	ldi	r24, 0x05	; 5
   11b14:	80 93 92 01 	sts	0x0192, r24
		  stReprint=rtDelayExitReprint;
   11b18:	8d e0       	ldi	r24, 0x0D	; 13
   11b1a:	2c cf       	rjmp	.-424    	; 0x11974 <FMenuReprint+0xac>
	      break;
     case rtDelayExitReprint:
	      if(TimDisplay>=10)stReprint=rtExitReprint;
   11b1c:	80 91 92 01 	lds	r24, 0x0192
   11b20:	8a 30       	cpi	r24, 0x0A	; 10
   11b22:	28 f0       	brcs	.+10     	; 0x11b2e <FMenuReprint+0x266>
   11b24:	26 cf       	rjmp	.-436    	; 0x11972 <FMenuReprint+0xaa>
	      break;
	 case rtExitReprint:
	      stReprint=rtInit;
   11b26:	10 92 68 02 	sts	0x0268, r1
   11b2a:	81 e0       	ldi	r24, 0x01	; 1
   11b2c:	01 c0       	rjmp	.+2      	; 0x11b30 <FMenuReprint+0x268>
   11b2e:	80 e0       	ldi	r24, 0x00	; 0
		  Result=MENU_DONE;
	      break;
	 }
  return Result;
}
   11b30:	64 96       	adiw	r28, 0x14	; 20
   11b32:	0f b6       	in	r0, 0x3f	; 63
   11b34:	f8 94       	cli
   11b36:	de bf       	out	0x3e, r29	; 62
   11b38:	0f be       	out	0x3f, r0	; 63
   11b3a:	cd bf       	out	0x3d, r28	; 61
   11b3c:	cf 91       	pop	r28
   11b3e:	df 91       	pop	r29
   11b40:	1f 91       	pop	r17
   11b42:	0f 91       	pop	r16
   11b44:	08 95       	ret

00011b46 <FMenuAdmin>:

char FMenuAdmin(){
static char stMenuAdmin=maInitAdmin;
	 char SubMenu,KeyPressed,KeyChar,Result=MENU_NONE;
     
	 switch(stMenuAdmin){
   11b46:	80 91 4b 02 	lds	r24, 0x024B
   11b4a:	83 30       	cpi	r24, 0x03	; 3
   11b4c:	09 f4       	brne	.+2      	; 0x11b50 <FMenuAdmin+0xa>
   11b4e:	66 c0       	rjmp	.+204    	; 0x11c1c <FMenuAdmin+0xd6>
   11b50:	84 30       	cpi	r24, 0x04	; 4
   11b52:	30 f4       	brcc	.+12     	; 0x11b60 <FMenuAdmin+0x1a>
   11b54:	81 30       	cpi	r24, 0x01	; 1
   11b56:	69 f1       	breq	.+90     	; 0x11bb2 <FMenuAdmin+0x6c>
   11b58:	82 30       	cpi	r24, 0x02	; 2
   11b5a:	08 f0       	brcs	.+2      	; 0x11b5e <FMenuAdmin+0x18>
   11b5c:	4d c0       	rjmp	.+154    	; 0x11bf8 <FMenuAdmin+0xb2>
   11b5e:	0d c0       	rjmp	.+26     	; 0x11b7a <FMenuAdmin+0x34>
   11b60:	85 30       	cpi	r24, 0x05	; 5
   11b62:	09 f4       	brne	.+2      	; 0x11b66 <FMenuAdmin+0x20>
   11b64:	4e c0       	rjmp	.+156    	; 0x11c02 <FMenuAdmin+0xbc>
   11b66:	85 30       	cpi	r24, 0x05	; 5
   11b68:	08 f4       	brcc	.+2      	; 0x11b6c <FMenuAdmin+0x26>
   11b6a:	49 c0       	rjmp	.+146    	; 0x11bfe <FMenuAdmin+0xb8>
   11b6c:	86 30       	cpi	r24, 0x06	; 6
   11b6e:	09 f4       	brne	.+2      	; 0x11b72 <FMenuAdmin+0x2c>
   11b70:	51 c0       	rjmp	.+162    	; 0x11c14 <FMenuAdmin+0xce>
   11b72:	87 30       	cpi	r24, 0x07	; 7
   11b74:	09 f0       	breq	.+2      	; 0x11b78 <FMenuAdmin+0x32>
   11b76:	5a c0       	rjmp	.+180    	; 0x11c2c <FMenuAdmin+0xe6>
   11b78:	55 c0       	rjmp	.+170    	; 0x11c24 <FMenuAdmin+0xde>
	 case maInitAdmin:
		  lcd_clear();
   11b7a:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
		  lcd_printf(1,1,PSTR("1)RePrint           "));
   11b7e:	81 e0       	ldi	r24, 0x01	; 1
   11b80:	61 e0       	ldi	r22, 0x01	; 1
   11b82:	42 eb       	ldi	r20, 0xB2	; 178
   11b84:	57 e1       	ldi	r21, 0x17	; 23
   11b86:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  lcd_printf(2,1,PSTR("2)CloseShift        "));
   11b8a:	82 e0       	ldi	r24, 0x02	; 2
   11b8c:	61 e0       	ldi	r22, 0x01	; 1
   11b8e:	4d e9       	ldi	r20, 0x9D	; 157
   11b90:	57 e1       	ldi	r21, 0x17	; 23
   11b92:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  lcd_printf(3,1,PSTR("3)CloseDay          "));		  
   11b96:	83 e0       	ldi	r24, 0x03	; 3
   11b98:	61 e0       	ldi	r22, 0x01	; 1
   11b9a:	48 e8       	ldi	r20, 0x88	; 136
   11b9c:	57 e1       	ldi	r21, 0x17	; 23
   11b9e:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  lcd_printf(4,1,PSTR("4)Settings   *)Exit "));
   11ba2:	84 e0       	ldi	r24, 0x04	; 4
   11ba4:	61 e0       	ldi	r22, 0x01	; 1
   11ba6:	43 e7       	ldi	r20, 0x73	; 115
   11ba8:	57 e1       	ldi	r21, 0x17	; 23
   11baa:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
	      stMenuAdmin=maSelectOptions;
   11bae:	81 e0       	ldi	r24, 0x01	; 1
   11bb0:	2e c0       	rjmp	.+92     	; 0x11c0e <FMenuAdmin+0xc8>
	      break;
	 case maSelectOptions:
          KeyPressed=_key_scan(1);
   11bb2:	81 e0       	ldi	r24, 0x01	; 1
   11bb4:	0e 94 f6 a5 	call	0x14bec	; 0x14bec <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
   11bb8:	0e 94 57 a5 	call	0x14aae	; 0x14aae <_key_btn>
		  switch (KeyChar){
   11bbc:	82 33       	cpi	r24, 0x32	; 50
   11bbe:	71 f0       	breq	.+28     	; 0x11bdc <FMenuAdmin+0x96>
   11bc0:	83 33       	cpi	r24, 0x33	; 51
   11bc2:	28 f4       	brcc	.+10     	; 0x11bce <FMenuAdmin+0x88>
   11bc4:	8a 32       	cpi	r24, 0x2A	; 42
   11bc6:	11 f1       	breq	.+68     	; 0x11c0c <FMenuAdmin+0xc6>
   11bc8:	81 33       	cpi	r24, 0x31	; 49
   11bca:	81 f5       	brne	.+96     	; 0x11c2c <FMenuAdmin+0xe6>
   11bcc:	05 c0       	rjmp	.+10     	; 0x11bd8 <FMenuAdmin+0x92>
   11bce:	83 33       	cpi	r24, 0x33	; 51
   11bd0:	59 f0       	breq	.+22     	; 0x11be8 <FMenuAdmin+0xa2>
   11bd2:	84 33       	cpi	r24, 0x34	; 52
   11bd4:	59 f5       	brne	.+86     	; 0x11c2c <FMenuAdmin+0xe6>
   11bd6:	0e c0       	rjmp	.+28     	; 0x11bf4 <FMenuAdmin+0xae>
		  case '1':
		       stMenuAdmin=maMenuReprint;//maMenuAdminConfig;
   11bd8:	82 e0       	ldi	r24, 0x02	; 2
   11bda:	19 c0       	rjmp	.+50     	; 0x11c0e <FMenuAdmin+0xc8>
		       break;  
		  case '2':
		       if (IFType==IT_STANDALONE)
   11bdc:	80 91 00 01 	lds	r24, 0x0100
   11be0:	82 30       	cpi	r24, 0x02	; 2
   11be2:	e1 f4       	brne	.+56     	; 0x11c1c <FMenuAdmin+0xd6>
			       stMenuAdmin=maMenuCloseShift;
   11be4:	84 e0       	ldi	r24, 0x04	; 4
   11be6:	13 c0       	rjmp	.+38     	; 0x11c0e <FMenuAdmin+0xc8>
               else stMenuAdmin=maInitAdmin;
		       break;  
		  case '3':
		       if (IFType==IT_STANDALONE)stMenuAdmin=maMenuCloseDay;
   11be8:	80 91 00 01 	lds	r24, 0x0100
   11bec:	82 30       	cpi	r24, 0x02	; 2
   11bee:	b1 f4       	brne	.+44     	; 0x11c1c <FMenuAdmin+0xd6>
   11bf0:	85 e0       	ldi	r24, 0x05	; 5
   11bf2:	0d c0       	rjmp	.+26     	; 0x11c0e <FMenuAdmin+0xc8>
               else stMenuAdmin=maInitAdmin;
		       break;  
		  case '4':
		  	   stMenuAdmin=maMenuAdminSettings;
   11bf4:	86 e0       	ldi	r24, 0x06	; 6
   11bf6:	0b c0       	rjmp	.+22     	; 0x11c0e <FMenuAdmin+0xc8>
    		   stMenuAdmin=maExitMenuAdmin;
		       break;  		  
		  }		  
	      break;
     case maMenuReprint:
	      SubMenu=FMenuReprint();
   11bf8:	0e 94 64 8c 	call	0x118c8	; 0x118c8 <FMenuReprint>
   11bfc:	05 c0       	rjmp	.+10     	; 0x11c08 <FMenuAdmin+0xc2>
	 case maMenuAdminConfig://ChangePassword[],RePrint,PumpTest
	      SubMenu=FSubMenuAdmin();
		  if (SubMenu==MENU_DONE)stMenuAdmin=maInitAdmin;
          break;	 
	 case maMenuCloseShift:
	 	  SubMenu=FCloseShift(CONTINUE_SHIFT);
   11bfe:	82 e0       	ldi	r24, 0x02	; 2
   11c00:	01 c0       	rjmp	.+2      	; 0x11c04 <FMenuAdmin+0xbe>
		  if (SubMenu==MENU_DONE)stMenuAdmin=maExitMenuAdmin;
	      break;
     case maMenuCloseDay://maMenuCloseShift,maMenuCloseDay
	 	  SubMenu=FCloseShift(NEW_SHIFT);
   11c02:	81 e0       	ldi	r24, 0x01	; 1
   11c04:	0e 94 7d 49 	call	0x92fa	; 0x92fa <FCloseShift>
		  if (SubMenu==MENU_DONE)stMenuAdmin=maExitMenuAdmin;
   11c08:	81 30       	cpi	r24, 0x01	; 1
   11c0a:	81 f4       	brne	.+32     	; 0x11c2c <FMenuAdmin+0xe6>
   11c0c:	87 e0       	ldi	r24, 0x07	; 7
   11c0e:	80 93 4b 02 	sts	0x024B, r24
   11c12:	06 c0       	rjmp	.+12     	; 0x11c20 <FMenuAdmin+0xda>
	      break;
     case maMenuAdminSettings:
	      SubMenu=FMenuAdminSettings();
   11c14:	0e 94 98 72 	call	0xe530	; 0xe530 <FMenuAdminSettings>
		  if (SubMenu==MENU_DONE)stMenuAdmin=maInitAdmin;	      
   11c18:	81 30       	cpi	r24, 0x01	; 1
   11c1a:	41 f4       	brne	.+16     	; 0x11c2c <FMenuAdmin+0xe6>
   11c1c:	10 92 4b 02 	sts	0x024B, r1
   11c20:	80 e0       	ldi	r24, 0x00	; 0
   11c22:	08 95       	ret
	      break;
     case maExitMenuAdmin:
	      stMenuAdmin=maInitAdmin;	      
   11c24:	10 92 4b 02 	sts	0x024B, r1
   11c28:	81 e0       	ldi	r24, 0x01	; 1
   11c2a:	08 95       	ret
   11c2c:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
          break;	 
	 }
   return Result;
}
   11c2e:	08 95       	ret

00011c30 <FMenuAuthorization>:


char FMenuAuthorization(){
char Result=MENU_NONE,PassResult=MP_NONE,SubMenu=MENU_NONE;
static char stMenuAuthorization=maInit,PassTry=0;
     switch(stMenuAuthorization){
   11c30:	80 91 5a 02 	lds	r24, 0x025A
   11c34:	83 30       	cpi	r24, 0x03	; 3
   11c36:	51 f1       	breq	.+84     	; 0x11c8c <FMenuAuthorization+0x5c>
   11c38:	84 30       	cpi	r24, 0x04	; 4
   11c3a:	28 f4       	brcc	.+10     	; 0x11c46 <FMenuAuthorization+0x16>
   11c3c:	81 30       	cpi	r24, 0x01	; 1
   11c3e:	81 f0       	breq	.+32     	; 0x11c60 <FMenuAuthorization+0x30>
   11c40:	82 30       	cpi	r24, 0x02	; 2
   11c42:	38 f5       	brcc	.+78     	; 0x11c92 <FMenuAuthorization+0x62>
   11c44:	0a c0       	rjmp	.+20     	; 0x11c5a <FMenuAuthorization+0x2a>
   11c46:	85 30       	cpi	r24, 0x05	; 5
   11c48:	61 f1       	breq	.+88     	; 0x11ca2 <FMenuAuthorization+0x72>
   11c4a:	85 30       	cpi	r24, 0x05	; 5
   11c4c:	28 f1       	brcs	.+74     	; 0x11c98 <FMenuAuthorization+0x68>
   11c4e:	86 30       	cpi	r24, 0x06	; 6
   11c50:	e1 f1       	breq	.+120    	; 0x11cca <FMenuAuthorization+0x9a>
   11c52:	87 30       	cpi	r24, 0x07	; 7
   11c54:	09 f0       	breq	.+2      	; 0x11c58 <FMenuAuthorization+0x28>
   11c56:	4c c0       	rjmp	.+152    	; 0x11cf0 <FMenuAuthorization+0xc0>
   11c58:	47 c0       	rjmp	.+142    	; 0x11ce8 <FMenuAuthorization+0xb8>
	 case maInit:
	      PassTry=0;
   11c5a:	10 92 59 02 	sts	0x0259, r1
   11c5e:	3d c0       	rjmp	.+122    	; 0x11cda <FMenuAuthorization+0xaa>
		  stMenuAuthorization=maInputPassword;
	      break;
	 case maInputPassword:
	      PassResult=FMenuPassword();
   11c60:	0e 94 23 76 	call	0xec46	; 0xec46 <FMenuPassword>
		  switch(PassResult){
   11c64:	83 30       	cpi	r24, 0x03	; 3
   11c66:	e1 f1       	breq	.+120    	; 0x11ce0 <FMenuAuthorization+0xb0>
   11c68:	84 30       	cpi	r24, 0x04	; 4
   11c6a:	28 f4       	brcc	.+10     	; 0x11c76 <FMenuAuthorization+0x46>
   11c6c:	81 30       	cpi	r24, 0x01	; 1
   11c6e:	b9 f1       	breq	.+110    	; 0x11cde <FMenuAuthorization+0xae>
   11c70:	82 30       	cpi	r24, 0x02	; 2
   11c72:	f1 f5       	brne	.+124    	; 0x11cf0 <FMenuAuthorization+0xc0>
   11c74:	09 c0       	rjmp	.+18     	; 0x11c88 <FMenuAuthorization+0x58>
   11c76:	84 30       	cpi	r24, 0x04	; 4
   11c78:	19 f0       	breq	.+6      	; 0x11c80 <FMenuAuthorization+0x50>
   11c7a:	85 30       	cpi	r24, 0x05	; 5
   11c7c:	c9 f5       	brne	.+114    	; 0x11cf0 <FMenuAuthorization+0xc0>
   11c7e:	02 c0       	rjmp	.+4      	; 0x11c84 <FMenuAuthorization+0x54>
		  case MP_VALID_ADMIN:
		       stMenuAuthorization=maMenuAdmin;
   11c80:	82 e0       	ldi	r24, 0x02	; 2
   11c82:	2e c0       	rjmp	.+92     	; 0x11ce0 <FMenuAuthorization+0xb0>
		       break;
		  case MP_VALID_SYSTEM:
		       stMenuAuthorization=maMenuSettings;
   11c84:	84 e0       	ldi	r24, 0x04	; 4
   11c86:	2c c0       	rjmp	.+88     	; 0x11ce0 <FMenuAuthorization+0xb0>
		       break;
		  case MP_INVALID:
		       stMenuAuthorization=maInvalidAuthorization;
   11c88:	85 e0       	ldi	r24, 0x05	; 5
   11c8a:	2a c0       	rjmp	.+84     	; 0x11ce0 <FMenuAuthorization+0xb0>
		  else
	      if (PassResult==MP_CANCEL)stMenuAuthorization=maExitAuthorization;
		  */
	      break;
	 case maMenuMaster:
	      SubMenu=FMenuMaster();
   11c8c:	0e 94 1f 73 	call	0xe63e	; 0xe63e <FMenuMaster>
   11c90:	05 c0       	rjmp	.+10     	; 0x11c9c <FMenuAuthorization+0x6c>
		  if (SubMenu==MENU_DONE)stMenuAuthorization=maExitAuthorization;
	      break;
	 case maMenuAdmin:
          SubMenu=FMenuAdmin();
   11c92:	0e 94 a3 8d 	call	0x11b46	; 0x11b46 <FMenuAdmin>
   11c96:	02 c0       	rjmp	.+4      	; 0x11c9c <FMenuAuthorization+0x6c>
		  if (SubMenu==MENU_DONE)stMenuAuthorization=maExitAuthorization;          
		  break;
	 case maMenuSettings:
	      SubMenu=FMenuSettings();
   11c98:	0e 94 7e 78 	call	0xf0fc	; 0xf0fc <FMenuSettings>
		  if (SubMenu==MENU_DONE)stMenuAuthorization=maExitAuthorization;
   11c9c:	81 30       	cpi	r24, 0x01	; 1
   11c9e:	41 f5       	brne	.+80     	; 0x11cf0 <FMenuAuthorization+0xc0>
   11ca0:	1e c0       	rjmp	.+60     	; 0x11cde <FMenuAuthorization+0xae>
          break;	 
	 case maInvalidAuthorization:
	      PassTry++;
   11ca2:	80 91 59 02 	lds	r24, 0x0259
   11ca6:	8f 5f       	subi	r24, 0xFF	; 255
   11ca8:	80 93 59 02 	sts	0x0259, r24
	      TimDisplay=0;
   11cac:	10 92 92 01 	sts	0x0192, r1
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   11cb0:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   11cb2:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   11cb4:	81 e0       	ldi	r24, 0x01	; 1
   11cb6:	80 93 bc 01 	sts	0x01BC, r24
          break;	 
	 case maInvalidAuthorization:
	      PassTry++;
	      TimDisplay=0;
		  system_beep(1);
		  lcd_printf(3,1,PSTR("Access Denied"));
   11cba:	83 e0       	ldi	r24, 0x03	; 3
   11cbc:	61 e0       	ldi	r22, 0x01	; 1
   11cbe:	4a e6       	ldi	r20, 0x6A	; 106
   11cc0:	5a e1       	ldi	r21, 0x1A	; 26
   11cc2:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  stMenuAuthorization=maDelayExitAuthorization;
   11cc6:	86 e0       	ldi	r24, 0x06	; 6
   11cc8:	0b c0       	rjmp	.+22     	; 0x11ce0 <FMenuAuthorization+0xb0>
          break;	 
	 case maDelayExitAuthorization:
	      if (TimDisplay>2){
   11cca:	80 91 92 01 	lds	r24, 0x0192
   11cce:	83 30       	cpi	r24, 0x03	; 3
   11cd0:	78 f0       	brcs	.+30     	; 0x11cf0 <FMenuAuthorization+0xc0>
		      if (PassTry<3)stMenuAuthorization=maInputPassword;
   11cd2:	80 91 59 02 	lds	r24, 0x0259
   11cd6:	83 30       	cpi	r24, 0x03	; 3
   11cd8:	10 f4       	brcc	.+4      	; 0x11cde <FMenuAuthorization+0xae>
   11cda:	81 e0       	ldi	r24, 0x01	; 1
   11cdc:	01 c0       	rjmp	.+2      	; 0x11ce0 <FMenuAuthorization+0xb0>
			  else stMenuAuthorization=maExitAuthorization;
   11cde:	87 e0       	ldi	r24, 0x07	; 7
   11ce0:	80 93 5a 02 	sts	0x025A, r24
   11ce4:	80 e0       	ldi	r24, 0x00	; 0
   11ce6:	08 95       	ret
		  }
	      break;
	 case maExitAuthorization:
	      stMenuAuthorization=maInit;
   11ce8:	10 92 5a 02 	sts	0x025A, r1
   11cec:	81 e0       	ldi	r24, 0x01	; 1
   11cee:	08 95       	ret
   11cf0:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
	      break;
	 }
   return Result;	 
}
   11cf2:	08 95       	ret

00011cf4 <sendMessage24>:
    uart_print(1, 0,strSend);
	UpdateCardID();
	sprintf_P(strSend,PSTR("%s%sF968CFFB"),strCardID,strFIP_ID);
    uart_print(1, 0,strSend);
	uart(1, 1,0x02);
	*/IFTSendMessage(MSG_24);
   11cf4:	84 e2       	ldi	r24, 0x24	; 36
   11cf6:	0e 94 c0 79 	call	0xf380	; 0xf380 <IFTSendMessage>
}
   11cfa:	08 95       	ret

00011cfc <sendMessage22>:
    uart_print(1, 0,strSend);
	UpdateCardID();
	sprintf_P(strSend,PSTR("%sF968CFFB"),strCardID);
    uart_print(1, 0,strSend);
	uart(1, 1,0x02);
	*/IFTSendMessage(MSG_22);
   11cfc:	82 e2       	ldi	r24, 0x22	; 34
   11cfe:	0e 94 c0 79 	call	0xf380	; 0xf380 <IFTSendMessage>
}
   11d02:	08 95       	ret

00011d04 <FMenuLoyalty>:
	      break;
	 }
  return Result;
}

char FMenuLoyalty(){
   11d04:	cf 92       	push	r12
   11d06:	df 92       	push	r13
   11d08:	ef 92       	push	r14
   11d0a:	ff 92       	push	r15
   11d0c:	0f 93       	push	r16
   11d0e:	1f 93       	push	r17
   11d10:	df 93       	push	r29
   11d12:	cf 93       	push	r28
   11d14:	cd b7       	in	r28, 0x3d	; 61
   11d16:	de b7       	in	r29, 0x3e	; 62
   11d18:	64 97       	sbiw	r28, 0x14	; 20
   11d1a:	0f b6       	in	r0, 0x3f	; 63
   11d1c:	f8 94       	cli
   11d1e:	de bf       	out	0x3e, r29	; 62
   11d20:	0f be       	out	0x3f, r0	; 63
   11d22:	cd bf       	out	0x3d, r28	; 61
       char FIPResult,FIP_USED;
	   char Result=MENU_NONE;
	   char KeyPressed=0,KeyChar;

     Result=MENU_NONE;
	 switch(stLoyalty){
   11d24:	00 91 65 02 	lds	r16, 0x0265
   11d28:	07 30       	cpi	r16, 0x07	; 7
   11d2a:	09 f4       	brne	.+2      	; 0x11d2e <FMenuLoyalty+0x2a>
   11d2c:	04 c1       	rjmp	.+520    	; 0x11f36 <FMenuLoyalty+0x232>
   11d2e:	08 30       	cpi	r16, 0x08	; 8
   11d30:	98 f4       	brcc	.+38     	; 0x11d58 <FMenuLoyalty+0x54>
   11d32:	03 30       	cpi	r16, 0x03	; 3
   11d34:	09 f4       	brne	.+2      	; 0x11d38 <FMenuLoyalty+0x34>
   11d36:	5b c0       	rjmp	.+182    	; 0x11dee <FMenuLoyalty+0xea>
   11d38:	04 30       	cpi	r16, 0x04	; 4
   11d3a:	38 f4       	brcc	.+14     	; 0x11d4a <FMenuLoyalty+0x46>
   11d3c:	01 30       	cpi	r16, 0x01	; 1
   11d3e:	09 f4       	brne	.+2      	; 0x11d42 <FMenuLoyalty+0x3e>
   11d40:	42 c0       	rjmp	.+132    	; 0x11dc6 <FMenuLoyalty+0xc2>
   11d42:	02 30       	cpi	r16, 0x02	; 2
   11d44:	08 f0       	brcs	.+2      	; 0x11d48 <FMenuLoyalty+0x44>
   11d46:	61 c0       	rjmp	.+194    	; 0x11e0a <FMenuLoyalty+0x106>
   11d48:	20 c0       	rjmp	.+64     	; 0x11d8a <FMenuLoyalty+0x86>
   11d4a:	05 30       	cpi	r16, 0x05	; 5
   11d4c:	09 f4       	brne	.+2      	; 0x11d50 <FMenuLoyalty+0x4c>
   11d4e:	a2 c0       	rjmp	.+324    	; 0x11e94 <FMenuLoyalty+0x190>
   11d50:	06 30       	cpi	r16, 0x06	; 6
   11d52:	08 f0       	brcs	.+2      	; 0x11d56 <FMenuLoyalty+0x52>
   11d54:	ba c0       	rjmp	.+372    	; 0x11eca <FMenuLoyalty+0x1c6>
   11d56:	8c c0       	rjmp	.+280    	; 0x11e70 <FMenuLoyalty+0x16c>
   11d58:	0b 30       	cpi	r16, 0x0B	; 11
   11d5a:	09 f4       	brne	.+2      	; 0x11d5e <FMenuLoyalty+0x5a>
   11d5c:	36 c1       	rjmp	.+620    	; 0x11fca <FMenuLoyalty+0x2c6>
   11d5e:	0c 30       	cpi	r16, 0x0C	; 12
   11d60:	38 f4       	brcc	.+14     	; 0x11d70 <FMenuLoyalty+0x6c>
   11d62:	09 30       	cpi	r16, 0x09	; 9
   11d64:	09 f4       	brne	.+2      	; 0x11d68 <FMenuLoyalty+0x64>
   11d66:	f0 c0       	rjmp	.+480    	; 0x11f48 <FMenuLoyalty+0x244>
   11d68:	0a 30       	cpi	r16, 0x0A	; 10
   11d6a:	08 f0       	brcs	.+2      	; 0x11d6e <FMenuLoyalty+0x6a>
   11d6c:	10 c1       	rjmp	.+544    	; 0x11f8e <FMenuLoyalty+0x28a>
   11d6e:	e6 c0       	rjmp	.+460    	; 0x11f3c <FMenuLoyalty+0x238>
   11d70:	0d 30       	cpi	r16, 0x0D	; 13
   11d72:	09 f4       	brne	.+2      	; 0x11d76 <FMenuLoyalty+0x72>
   11d74:	ea c1       	rjmp	.+980    	; 0x1214a <FMenuLoyalty+0x446>
   11d76:	0d 30       	cpi	r16, 0x0D	; 13
   11d78:	08 f4       	brcc	.+2      	; 0x11d7c <FMenuLoyalty+0x78>
   11d7a:	f1 c1       	rjmp	.+994    	; 0x1215e <FMenuLoyalty+0x45a>
   11d7c:	0e 30       	cpi	r16, 0x0E	; 14
   11d7e:	09 f4       	brne	.+2      	; 0x11d82 <FMenuLoyalty+0x7e>
   11d80:	00 c2       	rjmp	.+1024   	; 0x12182 <FMenuLoyalty+0x47e>
   11d82:	0f 30       	cpi	r16, 0x0F	; 15
   11d84:	09 f0       	breq	.+2      	; 0x11d88 <FMenuLoyalty+0x84>
   11d86:	09 c2       	rjmp	.+1042   	; 0x1219a <FMenuLoyalty+0x496>
   11d88:	02 c2       	rjmp	.+1028   	; 0x1218e <FMenuLoyalty+0x48a>
	 case mlInit:
	      lcd_clear();
   11d8a:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
		  lcd_printf(1,1,PSTR("  Menu Loyalty   "));
   11d8e:	81 e0       	ldi	r24, 0x01	; 1
   11d90:	61 e0       	ldi	r22, 0x01	; 1
   11d92:	41 e5       	ldi	r20, 0x51	; 81
   11d94:	5d e1       	ldi	r21, 0x1D	; 29
   11d96:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
          lcd_printf(1,1,PSTR("1.Enquiry        "));
   11d9a:	81 e0       	ldi	r24, 0x01	; 1
   11d9c:	61 e0       	ldi	r22, 0x01	; 1
   11d9e:	4f e3       	ldi	r20, 0x3F	; 63
   11da0:	5d e1       	ldi	r21, 0x1D	; 29
   11da2:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  lcd_printf(2,1,PSTR("2.Loyalty Update "));
   11da6:	82 e0       	ldi	r24, 0x02	; 2
   11da8:	61 e0       	ldi	r22, 0x01	; 1
   11daa:	4d e2       	ldi	r20, 0x2D	; 45
   11dac:	5d e1       	ldi	r21, 0x1D	; 29
   11dae:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
	      lcd_printf(4,1,PSTR("[*]Back          "));
   11db2:	84 e0       	ldi	r24, 0x04	; 4
   11db4:	61 e0       	ldi	r22, 0x01	; 1
   11db6:	4b e1       	ldi	r20, 0x1B	; 27
   11db8:	5d e1       	ldi	r21, 0x1D	; 29
   11dba:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  IsLoyaltyUpdate=False;
   11dbe:	10 92 63 02 	sts	0x0263, r1
		  stLoyalty=mlLoyaltySelect;
   11dc2:	81 e0       	ldi	r24, 0x01	; 1
   11dc4:	08 c0       	rjmp	.+16     	; 0x11dd6 <FMenuLoyalty+0xd2>
	      break;
	 case mlLoyaltySelect:
	 	  KeyPressed=_key_scan(1);
   11dc6:	81 e0       	ldi	r24, 0x01	; 1
   11dc8:	0e 94 f6 a5 	call	0x14bec	; 0x14bec <_key_scan>
		  if (KeyPressed==_KEY_1){
   11dcc:	8e 3e       	cpi	r24, 0xEE	; 238
   11dce:	31 f4       	brne	.+12     	; 0x11ddc <FMenuLoyalty+0xd8>
		      IsLoyaltyUpdate=False;
   11dd0:	10 92 63 02 	sts	0x0263, r1
		      stLoyalty=mlShowEnquiry;
   11dd4:	84 e0       	ldi	r24, 0x04	; 4
   11dd6:	80 93 65 02 	sts	0x0265, r24
   11dda:	df c1       	rjmp	.+958    	; 0x1219a <FMenuLoyalty+0x496>
			  }
		  else
		  if (KeyPressed==_KEY_2){
   11ddc:	8e 3d       	cpi	r24, 0xDE	; 222
   11dde:	19 f4       	brne	.+6      	; 0x11de6 <FMenuLoyalty+0xe2>
		      IsLoyaltyUpdate=True;
   11de0:	00 93 63 02 	sts	0x0263, r16
   11de4:	69 c0       	rjmp	.+210    	; 0x11eb8 <FMenuLoyalty+0x1b4>
			  stLoyalty=mlSelectFIP;
			  }
		  if (KeyPressed==_KEY_CANCEL)stLoyalty=mlExitLoyalty;
   11de6:	87 3e       	cpi	r24, 0xE7	; 231
   11de8:	09 f4       	brne	.+2      	; 0x11dec <FMenuLoyalty+0xe8>
   11dea:	cf c1       	rjmp	.+926    	; 0x1218a <FMenuLoyalty+0x486>
   11dec:	d6 c1       	rjmp	.+940    	; 0x1219a <FMenuLoyalty+0x496>
	      break;
     case mlSelectFIP:
	      FIPResult=menu_FIP(&FIP_Used,strFIP_ID);
   11dee:	84 e6       	ldi	r24, 0x64	; 100
   11df0:	92 e0       	ldi	r25, 0x02	; 2
   11df2:	69 eb       	ldi	r22, 0xB9	; 185
   11df4:	77 e0       	ldi	r23, 0x07	; 7
   11df6:	0e 94 af 54 	call	0xa95e	; 0xa95e <menu_FIP>
		  if (FIPResult==FIP_DONE)stLoyalty=mlUpdateLoyalty;
   11dfa:	88 23       	and	r24, r24
   11dfc:	11 f4       	brne	.+4      	; 0x11e02 <FMenuLoyalty+0xfe>
   11dfe:	82 e0       	ldi	r24, 0x02	; 2
   11e00:	ea cf       	rjmp	.-44     	; 0x11dd6 <FMenuLoyalty+0xd2>
		  else
		  if (FIPResult==FIP_CANCEL)stLoyalty=mlInit;
   11e02:	82 30       	cpi	r24, 0x02	; 2
   11e04:	09 f0       	breq	.+2      	; 0x11e08 <FMenuLoyalty+0x104>
   11e06:	c9 c1       	rjmp	.+914    	; 0x1219a <FMenuLoyalty+0x496>
   11e08:	59 c0       	rjmp	.+178    	; 0x11ebc <FMenuLoyalty+0x1b8>
	      break;
     case mlUpdateLoyalty: 
	      lcd_clear();
   11e0a:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
		  sprintf_P(lcdteks,PSTR("FIP:%s"),strFIP_ID);
   11e0e:	00 d0       	rcall	.+0      	; 0x11e10 <FMenuLoyalty+0x10c>
   11e10:	00 d0       	rcall	.+0      	; 0x11e12 <FMenuLoyalty+0x10e>
   11e12:	00 d0       	rcall	.+0      	; 0x11e14 <FMenuLoyalty+0x110>
   11e14:	ed b7       	in	r30, 0x3d	; 61
   11e16:	fe b7       	in	r31, 0x3e	; 62
   11e18:	31 96       	adiw	r30, 0x01	; 1
   11e1a:	8e 01       	movw	r16, r28
   11e1c:	0f 5f       	subi	r16, 0xFF	; 255
   11e1e:	1f 4f       	sbci	r17, 0xFF	; 255
   11e20:	ad b7       	in	r26, 0x3d	; 61
   11e22:	be b7       	in	r27, 0x3e	; 62
   11e24:	12 96       	adiw	r26, 0x02	; 2
   11e26:	1c 93       	st	X, r17
   11e28:	0e 93       	st	-X, r16
   11e2a:	11 97       	sbiw	r26, 0x01	; 1
   11e2c:	84 e1       	ldi	r24, 0x14	; 20
   11e2e:	9d e1       	ldi	r25, 0x1D	; 29
   11e30:	93 83       	std	Z+3, r25	; 0x03
   11e32:	82 83       	std	Z+2, r24	; 0x02
   11e34:	89 eb       	ldi	r24, 0xB9	; 185
   11e36:	97 e0       	ldi	r25, 0x07	; 7
   11e38:	95 83       	std	Z+5, r25	; 0x05
   11e3a:	84 83       	std	Z+4, r24	; 0x04
   11e3c:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
		  lcd_printf(1,1,PSTR("Tap Kartu RFID"));
   11e40:	8d b7       	in	r24, 0x3d	; 61
   11e42:	9e b7       	in	r25, 0x3e	; 62
   11e44:	06 96       	adiw	r24, 0x06	; 6
   11e46:	0f b6       	in	r0, 0x3f	; 63
   11e48:	f8 94       	cli
   11e4a:	9e bf       	out	0x3e, r25	; 62
   11e4c:	0f be       	out	0x3f, r0	; 63
   11e4e:	8d bf       	out	0x3d, r24	; 61
   11e50:	81 e0       	ldi	r24, 0x01	; 1
   11e52:	61 e0       	ldi	r22, 0x01	; 1
   11e54:	45 e0       	ldi	r20, 0x05	; 5
   11e56:	5d e1       	ldi	r21, 0x1D	; 29
   11e58:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  lcd_print(2,1,lcdteks);
   11e5c:	82 e0       	ldi	r24, 0x02	; 2
   11e5e:	61 e0       	ldi	r22, 0x01	; 1
   11e60:	a8 01       	movw	r20, r16
   11e62:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
          lcd_printf(4,1,PSTR("[*]Back    [#]Exit"));
   11e66:	84 e0       	ldi	r24, 0x04	; 4
   11e68:	61 e0       	ldi	r22, 0x01	; 1
   11e6a:	42 ef       	ldi	r20, 0xF2	; 242
   11e6c:	5c e1       	ldi	r21, 0x1C	; 28
   11e6e:	0c c0       	rjmp	.+24     	; 0x11e88 <FMenuLoyalty+0x184>
		  IsRFIDDetected=False;
	      stLoyalty=mlInputRFID;
	      break;
	 case mlShowEnquiry:
	      lcd_clear();
   11e70:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
		  lcd_printf(1,1,PSTR("Tap Kartu RFID"));
   11e74:	81 e0       	ldi	r24, 0x01	; 1
   11e76:	61 e0       	ldi	r22, 0x01	; 1
   11e78:	43 ee       	ldi	r20, 0xE3	; 227
   11e7a:	5c e1       	ldi	r21, 0x1C	; 28
   11e7c:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
          lcd_printf(4,1,PSTR("[*]Back    [#]Exit"));
   11e80:	84 e0       	ldi	r24, 0x04	; 4
   11e82:	61 e0       	ldi	r22, 0x01	; 1
   11e84:	40 ed       	ldi	r20, 0xD0	; 208
   11e86:	5c e1       	ldi	r21, 0x1C	; 28
   11e88:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  IsRFIDDetected=False;
   11e8c:	10 92 98 01 	sts	0x0198, r1
		  stLoyalty=mlInputRFID;
   11e90:	85 e0       	ldi	r24, 0x05	; 5
   11e92:	a1 cf       	rjmp	.-190    	; 0x11dd6 <FMenuLoyalty+0xd2>
	      break;
     case mlInputRFID:
	      if (IsRFIDDetected==True){
   11e94:	80 91 98 01 	lds	r24, 0x0198
   11e98:	81 30       	cpi	r24, 0x01	; 1
   11e9a:	29 f4       	brne	.+10     	; 0x11ea6 <FMenuLoyalty+0x1a2>
		      IsRFIDDetected=False;
   11e9c:	10 92 98 01 	sts	0x0198, r1
		      stLoyalty=mlShowProsesRFID;
   11ea0:	86 e0       	ldi	r24, 0x06	; 6
   11ea2:	80 93 65 02 	sts	0x0265, r24
		  }
	 	  KeyPressed=_key_scan(1);
   11ea6:	81 e0       	ldi	r24, 0x01	; 1
   11ea8:	0e 94 f6 a5 	call	0x14bec	; 0x14bec <_key_scan>
		  if (KeyPressed==_KEY_CANCEL){
   11eac:	87 3e       	cpi	r24, 0xE7	; 231
   11eae:	49 f4       	brne	.+18     	; 0x11ec2 <FMenuLoyalty+0x1be>
		      if (IsLoyaltyUpdate==True)
   11eb0:	80 91 63 02 	lds	r24, 0x0263
   11eb4:	81 30       	cpi	r24, 0x01	; 1
   11eb6:	11 f4       	brne	.+4      	; 0x11ebc <FMenuLoyalty+0x1b8>
			       stLoyalty=mlSelectFIP;
   11eb8:	83 e0       	ldi	r24, 0x03	; 3
   11eba:	8d cf       	rjmp	.-230    	; 0x11dd6 <FMenuLoyalty+0xd2>
			  else stLoyalty=mlInit;
   11ebc:	10 92 65 02 	sts	0x0265, r1
   11ec0:	6c c1       	rjmp	.+728    	; 0x1219a <FMenuLoyalty+0x496>
			  }
		  else
		  if (KeyPressed==_KEY_ENTER)stLoyalty=mlExitLoyalty;
   11ec2:	87 3b       	cpi	r24, 0xB7	; 183
   11ec4:	09 f0       	breq	.+2      	; 0x11ec8 <FMenuLoyalty+0x1c4>
   11ec6:	69 c1       	rjmp	.+722    	; 0x1219a <FMenuLoyalty+0x496>
   11ec8:	60 c1       	rjmp	.+704    	; 0x1218a <FMenuLoyalty+0x486>
	      break;
     case mlShowProsesRFID:
	      lcd_clear();
   11eca:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
		  sprintf_P(lcdteks,PSTR("ID:%s"),strRFID);
   11ece:	00 d0       	rcall	.+0      	; 0x11ed0 <FMenuLoyalty+0x1cc>
   11ed0:	00 d0       	rcall	.+0      	; 0x11ed2 <FMenuLoyalty+0x1ce>
   11ed2:	00 d0       	rcall	.+0      	; 0x11ed4 <FMenuLoyalty+0x1d0>
   11ed4:	ed b7       	in	r30, 0x3d	; 61
   11ed6:	fe b7       	in	r31, 0x3e	; 62
   11ed8:	31 96       	adiw	r30, 0x01	; 1
   11eda:	8e 01       	movw	r16, r28
   11edc:	0f 5f       	subi	r16, 0xFF	; 255
   11ede:	1f 4f       	sbci	r17, 0xFF	; 255
   11ee0:	ad b7       	in	r26, 0x3d	; 61
   11ee2:	be b7       	in	r27, 0x3e	; 62
   11ee4:	12 96       	adiw	r26, 0x02	; 2
   11ee6:	1c 93       	st	X, r17
   11ee8:	0e 93       	st	-X, r16
   11eea:	11 97       	sbiw	r26, 0x01	; 1
   11eec:	8a ec       	ldi	r24, 0xCA	; 202
   11eee:	9c e1       	ldi	r25, 0x1C	; 28
   11ef0:	93 83       	std	Z+3, r25	; 0x03
   11ef2:	82 83       	std	Z+2, r24	; 0x02
   11ef4:	81 e5       	ldi	r24, 0x51	; 81
   11ef6:	9c e0       	ldi	r25, 0x0C	; 12
   11ef8:	95 83       	std	Z+5, r25	; 0x05
   11efa:	84 83       	std	Z+4, r24	; 0x04
   11efc:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
		  lcd_print (1,1,lcdteks);	      
   11f00:	8d b7       	in	r24, 0x3d	; 61
   11f02:	9e b7       	in	r25, 0x3e	; 62
   11f04:	06 96       	adiw	r24, 0x06	; 6
   11f06:	0f b6       	in	r0, 0x3f	; 63
   11f08:	f8 94       	cli
   11f0a:	9e bf       	out	0x3e, r25	; 62
   11f0c:	0f be       	out	0x3f, r0	; 63
   11f0e:	8d bf       	out	0x3d, r24	; 61
   11f10:	81 e0       	ldi	r24, 0x01	; 1
   11f12:	61 e0       	ldi	r22, 0x01	; 1
   11f14:	a8 01       	movw	r20, r16
   11f16:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
		  lcd_printf(2,1,PSTR("Proses"));	      
   11f1a:	82 e0       	ldi	r24, 0x02	; 2
   11f1c:	61 e0       	ldi	r22, 0x01	; 1
   11f1e:	43 ec       	ldi	r20, 0xC3	; 195
   11f20:	5c e1       	ldi	r21, 0x1C	; 28
   11f22:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  if (IsLoyaltyUpdate==True)stLoyalty=mlSendMessage24;
   11f26:	80 91 63 02 	lds	r24, 0x0263
   11f2a:	81 30       	cpi	r24, 0x01	; 1
   11f2c:	11 f4       	brne	.+4      	; 0x11f32 <FMenuLoyalty+0x22e>
   11f2e:	88 e0       	ldi	r24, 0x08	; 8
   11f30:	52 cf       	rjmp	.-348    	; 0x11dd6 <FMenuLoyalty+0xd2>
		  else stLoyalty=mlSendMessage22;
   11f32:	87 e0       	ldi	r24, 0x07	; 7
   11f34:	50 cf       	rjmp	.-352    	; 0x11dd6 <FMenuLoyalty+0xd2>
	      break;
     case mlSendMessage22:
	      sendMessage22();
   11f36:	0e 94 7e 8e 	call	0x11cfc	; 0x11cfc <sendMessage22>
   11f3a:	02 c0       	rjmp	.+4      	; 0x11f40 <FMenuLoyalty+0x23c>
		  TimSend=0;		  
          stLoyalty=mlWaitReply;
	      break;
     case mlSendMessage24:
	      sendMessage24();
   11f3c:	0e 94 7a 8e 	call	0x11cf4	; 0x11cf4 <sendMessage24>
		  TimSend=0;		  
   11f40:	10 92 78 0c 	sts	0x0C78, r1
          stLoyalty=mlWaitReply;
   11f44:	89 e0       	ldi	r24, 0x09	; 9
   11f46:	47 cf       	rjmp	.-370    	; 0x11dd6 <FMenuLoyalty+0xd2>
	      break;
     case mlWaitReply:
	      if (TimSend>(TIM_SEND*3))
   11f48:	80 91 78 0c 	lds	r24, 0x0C78
   11f4c:	8f 31       	cpi	r24, 0x1F	; 31
   11f4e:	18 f0       	brcs	.+6      	; 0x11f56 <FMenuLoyalty+0x252>
		      stLoyalty=mlNoConnection;
   11f50:	8c e0       	ldi	r24, 0x0C	; 12
   11f52:	80 93 65 02 	sts	0x0265, r24
	      if (IsMessage23==True){
   11f56:	80 91 a2 01 	lds	r24, 0x01A2
   11f5a:	81 30       	cpi	r24, 0x01	; 1
   11f5c:	39 f4       	brne	.+14     	; 0x11f6c <FMenuLoyalty+0x268>
		      IsMessage23=False;
   11f5e:	10 92 a2 01 	sts	0x01A2, r1
			  procMessage23();
   11f62:	0e 94 12 18 	call	0x3024	; 0x3024 <procMessage23>
			  stLoyalty=mlDispEnquiry;
   11f66:	8b e0       	ldi	r24, 0x0B	; 11
   11f68:	80 93 65 02 	sts	0x0265, r24
		  }
	      if (IsMessage09==True){
   11f6c:	80 91 a3 01 	lds	r24, 0x01A3
   11f70:	81 30       	cpi	r24, 0x01	; 1
   11f72:	39 f4       	brne	.+14     	; 0x11f82 <FMenuLoyalty+0x27e>
		      IsMessage09=False;
   11f74:	10 92 a3 01 	sts	0x01A3, r1
	          procMessage09();
   11f78:	0e 94 c7 17 	call	0x2f8e	; 0x2f8e <procMessage09>
              stLoyalty=mlDisplayFreeMessage;
   11f7c:	8a e0       	ldi	r24, 0x0A	; 10
   11f7e:	80 93 65 02 	sts	0x0265, r24
		  }
	      if (IsMessage99==True){
   11f82:	80 91 9f 01 	lds	r24, 0x019F
   11f86:	81 30       	cpi	r24, 0x01	; 1
   11f88:	09 f0       	breq	.+2      	; 0x11f8c <FMenuLoyalty+0x288>
   11f8a:	07 c1       	rjmp	.+526    	; 0x1219a <FMenuLoyalty+0x496>
   11f8c:	1c c0       	rjmp	.+56     	; 0x11fc6 <FMenuLoyalty+0x2c2>
              stLoyalty=mlDelayExitLoyalty;
		  }
	      break;
     case mlDisplayFreeMessage:
		  lcd_clear();
   11f8e:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
		  lcd_print(1,1,strFreeMessageLine1);
   11f92:	81 e0       	ldi	r24, 0x01	; 1
   11f94:	61 e0       	ldi	r22, 0x01	; 1
   11f96:	42 e9       	ldi	r20, 0x92	; 146
   11f98:	58 e0       	ldi	r21, 0x08	; 8
   11f9a:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
		  lcd_print(2,1,strFreeMessageLine2);
   11f9e:	82 e0       	ldi	r24, 0x02	; 2
   11fa0:	61 e0       	ldi	r22, 0x01	; 1
   11fa2:	43 ea       	ldi	r20, 0xA3	; 163
   11fa4:	57 e0       	ldi	r21, 0x07	; 7
   11fa6:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
		  lcd_print(3,1,strFreeMessageLine3);
   11faa:	83 e0       	ldi	r24, 0x03	; 3
   11fac:	61 e0       	ldi	r22, 0x01	; 1
   11fae:	4c e1       	ldi	r20, 0x1C	; 28
   11fb0:	58 e0       	ldi	r21, 0x08	; 8
   11fb2:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
		  lcd_print(4,1,strFreeMessageLine4);
   11fb6:	84 e0       	ldi	r24, 0x04	; 4
   11fb8:	61 e0       	ldi	r22, 0x01	; 1
   11fba:	46 ed       	ldi	r20, 0xD6	; 214
   11fbc:	5b e0       	ldi	r21, 0x0B	; 11
   11fbe:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
		  TimDisplay=0;
   11fc2:	10 92 92 01 	sts	0x0192, r1
		  stLoyalty=mlDelayExitLoyalty;
   11fc6:	8e e0       	ldi	r24, 0x0E	; 14
   11fc8:	06 cf       	rjmp	.-500    	; 0x11dd6 <FMenuLoyalty+0xd2>
	      break;
     case mlDispEnquiry:	      
	      lcd_clear();
   11fca:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
		  RemSpaceLag(strCardID);RemSpaceLag(strCardHolder);
   11fce:	e9 e8       	ldi	r30, 0x89	; 137
   11fd0:	ce 2e       	mov	r12, r30
   11fd2:	eb e0       	ldi	r30, 0x0B	; 11
   11fd4:	de 2e       	mov	r13, r30
   11fd6:	c6 01       	movw	r24, r12
   11fd8:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <RemSpaceLag>
   11fdc:	74 e2       	ldi	r23, 0x24	; 36
   11fde:	e7 2e       	mov	r14, r23
   11fe0:	73 e0       	ldi	r23, 0x03	; 3
   11fe2:	f7 2e       	mov	r15, r23
   11fe4:	c7 01       	movw	r24, r14
   11fe6:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <RemSpaceLag>
		  sprintf_P(lcdteks,PSTR("%s:%s"),strCardID,strCardHolder);
   11fea:	ad b7       	in	r26, 0x3d	; 61
   11fec:	be b7       	in	r27, 0x3e	; 62
   11fee:	18 97       	sbiw	r26, 0x08	; 8
   11ff0:	0f b6       	in	r0, 0x3f	; 63
   11ff2:	f8 94       	cli
   11ff4:	be bf       	out	0x3e, r27	; 62
   11ff6:	0f be       	out	0x3f, r0	; 63
   11ff8:	ad bf       	out	0x3d, r26	; 61
   11ffa:	ed b7       	in	r30, 0x3d	; 61
   11ffc:	fe b7       	in	r31, 0x3e	; 62
   11ffe:	31 96       	adiw	r30, 0x01	; 1
   12000:	8e 01       	movw	r16, r28
   12002:	0f 5f       	subi	r16, 0xFF	; 255
   12004:	1f 4f       	sbci	r17, 0xFF	; 255
   12006:	12 96       	adiw	r26, 0x02	; 2
   12008:	1c 93       	st	X, r17
   1200a:	0e 93       	st	-X, r16
   1200c:	11 97       	sbiw	r26, 0x01	; 1
   1200e:	8d eb       	ldi	r24, 0xBD	; 189
   12010:	9c e1       	ldi	r25, 0x1C	; 28
   12012:	93 83       	std	Z+3, r25	; 0x03
   12014:	82 83       	std	Z+2, r24	; 0x02
   12016:	d5 82       	std	Z+5, r13	; 0x05
   12018:	c4 82       	std	Z+4, r12	; 0x04
   1201a:	f7 82       	std	Z+7, r15	; 0x07
   1201c:	e6 82       	std	Z+6, r14	; 0x06
   1201e:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
		  lcd_print(1,1,lcdteks);RemSpaceLag(strLoyCurrentPoints);
   12022:	8d b7       	in	r24, 0x3d	; 61
   12024:	9e b7       	in	r25, 0x3e	; 62
   12026:	08 96       	adiw	r24, 0x08	; 8
   12028:	0f b6       	in	r0, 0x3f	; 63
   1202a:	f8 94       	cli
   1202c:	9e bf       	out	0x3e, r25	; 62
   1202e:	0f be       	out	0x3f, r0	; 63
   12030:	8d bf       	out	0x3d, r24	; 61
   12032:	81 e0       	ldi	r24, 0x01	; 1
   12034:	61 e0       	ldi	r22, 0x01	; 1
   12036:	a8 01       	movw	r20, r16
   12038:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
   1203c:	65 e3       	ldi	r22, 0x35	; 53
   1203e:	e6 2e       	mov	r14, r22
   12040:	68 e0       	ldi	r22, 0x08	; 8
   12042:	f6 2e       	mov	r15, r22
   12044:	c7 01       	movw	r24, r14
   12046:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <RemSpaceLag>
		  sprintf_P(lcdteks,PSTR("Points:%s"),strLoyCurrentPoints);
   1204a:	00 d0       	rcall	.+0      	; 0x1204c <FMenuLoyalty+0x348>
   1204c:	00 d0       	rcall	.+0      	; 0x1204e <FMenuLoyalty+0x34a>
   1204e:	00 d0       	rcall	.+0      	; 0x12050 <FMenuLoyalty+0x34c>
   12050:	ed b7       	in	r30, 0x3d	; 61
   12052:	fe b7       	in	r31, 0x3e	; 62
   12054:	31 96       	adiw	r30, 0x01	; 1
   12056:	ad b7       	in	r26, 0x3d	; 61
   12058:	be b7       	in	r27, 0x3e	; 62
   1205a:	12 96       	adiw	r26, 0x02	; 2
   1205c:	1c 93       	st	X, r17
   1205e:	0e 93       	st	-X, r16
   12060:	11 97       	sbiw	r26, 0x01	; 1
   12062:	83 eb       	ldi	r24, 0xB3	; 179
   12064:	9c e1       	ldi	r25, 0x1C	; 28
   12066:	93 83       	std	Z+3, r25	; 0x03
   12068:	82 83       	std	Z+2, r24	; 0x02
   1206a:	f5 82       	std	Z+5, r15	; 0x05
   1206c:	e4 82       	std	Z+4, r14	; 0x04
   1206e:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
		  lcd_print(2,1,lcdteks);RemSpaceLag(strLoyCurrentPoints);
   12072:	8d b7       	in	r24, 0x3d	; 61
   12074:	9e b7       	in	r25, 0x3e	; 62
   12076:	06 96       	adiw	r24, 0x06	; 6
   12078:	0f b6       	in	r0, 0x3f	; 63
   1207a:	f8 94       	cli
   1207c:	9e bf       	out	0x3e, r25	; 62
   1207e:	0f be       	out	0x3f, r0	; 63
   12080:	8d bf       	out	0x3d, r24	; 61
   12082:	82 e0       	ldi	r24, 0x02	; 2
   12084:	61 e0       	ldi	r22, 0x01	; 1
   12086:	a8 01       	movw	r20, r16
   12088:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
   1208c:	c7 01       	movw	r24, r14
   1208e:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <RemSpaceLag>
		  sprintf_P(lcdteks,PSTR("CM Amt:%s"),strLoyCurrMonConsumeA);
   12092:	00 d0       	rcall	.+0      	; 0x12094 <FMenuLoyalty+0x390>
   12094:	00 d0       	rcall	.+0      	; 0x12096 <FMenuLoyalty+0x392>
   12096:	00 d0       	rcall	.+0      	; 0x12098 <FMenuLoyalty+0x394>
   12098:	ed b7       	in	r30, 0x3d	; 61
   1209a:	fe b7       	in	r31, 0x3e	; 62
   1209c:	31 96       	adiw	r30, 0x01	; 1
   1209e:	ad b7       	in	r26, 0x3d	; 61
   120a0:	be b7       	in	r27, 0x3e	; 62
   120a2:	12 96       	adiw	r26, 0x02	; 2
   120a4:	1c 93       	st	X, r17
   120a6:	0e 93       	st	-X, r16
   120a8:	11 97       	sbiw	r26, 0x01	; 1
   120aa:	89 ea       	ldi	r24, 0xA9	; 169
   120ac:	9c e1       	ldi	r25, 0x1C	; 28
   120ae:	93 83       	std	Z+3, r25	; 0x03
   120b0:	82 83       	std	Z+2, r24	; 0x02
   120b2:	8e e7       	ldi	r24, 0x7E	; 126
   120b4:	93 e0       	ldi	r25, 0x03	; 3
   120b6:	95 83       	std	Z+5, r25	; 0x05
   120b8:	84 83       	std	Z+4, r24	; 0x04
   120ba:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
		  lcd_print(3,1,lcdteks);RemSpaceLag(strLoyCurrentPoints);
   120be:	8d b7       	in	r24, 0x3d	; 61
   120c0:	9e b7       	in	r25, 0x3e	; 62
   120c2:	06 96       	adiw	r24, 0x06	; 6
   120c4:	0f b6       	in	r0, 0x3f	; 63
   120c6:	f8 94       	cli
   120c8:	9e bf       	out	0x3e, r25	; 62
   120ca:	0f be       	out	0x3f, r0	; 63
   120cc:	8d bf       	out	0x3d, r24	; 61
   120ce:	83 e0       	ldi	r24, 0x03	; 3
   120d0:	61 e0       	ldi	r22, 0x01	; 1
   120d2:	a8 01       	movw	r20, r16
   120d4:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
   120d8:	c7 01       	movw	r24, r14
   120da:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <RemSpaceLag>
		  sprintf_P(lcdteks,PSTR("Cm Vol:%s"),strLoyCurrMonConsumeV);
   120de:	00 d0       	rcall	.+0      	; 0x120e0 <FMenuLoyalty+0x3dc>
   120e0:	00 d0       	rcall	.+0      	; 0x120e2 <FMenuLoyalty+0x3de>
   120e2:	00 d0       	rcall	.+0      	; 0x120e4 <FMenuLoyalty+0x3e0>
   120e4:	ed b7       	in	r30, 0x3d	; 61
   120e6:	fe b7       	in	r31, 0x3e	; 62
   120e8:	31 96       	adiw	r30, 0x01	; 1
   120ea:	ad b7       	in	r26, 0x3d	; 61
   120ec:	be b7       	in	r27, 0x3e	; 62
   120ee:	12 96       	adiw	r26, 0x02	; 2
   120f0:	1c 93       	st	X, r17
   120f2:	0e 93       	st	-X, r16
   120f4:	11 97       	sbiw	r26, 0x01	; 1
   120f6:	8f e9       	ldi	r24, 0x9F	; 159
   120f8:	9c e1       	ldi	r25, 0x1C	; 28
   120fa:	93 83       	std	Z+3, r25	; 0x03
   120fc:	82 83       	std	Z+2, r24	; 0x02
   120fe:	8d ee       	ldi	r24, 0xED	; 237
   12100:	9b e0       	ldi	r25, 0x0B	; 11
   12102:	95 83       	std	Z+5, r25	; 0x05
   12104:	84 83       	std	Z+4, r24	; 0x04
   12106:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
		  lcd_print(4,1,lcdteks);
   1210a:	8d b7       	in	r24, 0x3d	; 61
   1210c:	9e b7       	in	r25, 0x3e	; 62
   1210e:	06 96       	adiw	r24, 0x06	; 6
   12110:	0f b6       	in	r0, 0x3f	; 63
   12112:	f8 94       	cli
   12114:	9e bf       	out	0x3e, r25	; 62
   12116:	0f be       	out	0x3f, r0	; 63
   12118:	8d bf       	out	0x3d, r24	; 61
   1211a:	84 e0       	ldi	r24, 0x04	; 4
   1211c:	61 e0       	ldi	r22, 0x01	; 1
   1211e:	a8 01       	movw	r20, r16
   12120:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
		  TimDisplay=0;
   12124:	10 92 92 01 	sts	0x0192, r1

		  if (eeprom_read_byte(&DefNotifScreen)==1) {
   12128:	88 e3       	ldi	r24, 0x38	; 56
   1212a:	90 e0       	ldi	r25, 0x00	; 0
   1212c:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
   12130:	81 30       	cpi	r24, 0x01	; 1
   12132:	09 f0       	breq	.+2      	; 0x12136 <FMenuLoyalty+0x432>
   12134:	48 cf       	rjmp	.-368    	; 0x11fc6 <FMenuLoyalty+0x2c2>
		      stLoyalty=mlPressAnyKey;
   12136:	8d e0       	ldi	r24, 0x0D	; 13
   12138:	80 93 65 02 	sts	0x0265, r24
			  lcd_printf(2,1,PSTR("Press Any Key"));
   1213c:	82 e0       	ldi	r24, 0x02	; 2
   1213e:	61 e0       	ldi	r22, 0x01	; 1
   12140:	41 e9       	ldi	r20, 0x91	; 145
   12142:	5c e1       	ldi	r21, 0x1C	; 28
   12144:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
   12148:	28 c0       	rjmp	.+80     	; 0x1219a <FMenuLoyalty+0x496>
          } else stLoyalty=mlDelayExitLoyalty;
		  break;
     case mlPressAnyKey:
	      KeyPressed=_key_scan(1);
   1214a:	81 e0       	ldi	r24, 0x01	; 1
   1214c:	0e 94 f6 a5 	call	0x14bec	; 0x14bec <_key_scan>
	      KeyChar=_key_btn(KeyPressed);
   12150:	0e 94 57 a5 	call	0x14aae	; 0x14aae <_key_btn>
	      switch(KeyChar){		  
   12154:	83 32       	cpi	r24, 0x23	; 35
   12156:	c9 f0       	breq	.+50     	; 0x1218a <FMenuLoyalty+0x486>
   12158:	8a 32       	cpi	r24, 0x2A	; 42
   1215a:	f9 f4       	brne	.+62     	; 0x1219a <FMenuLoyalty+0x496>
   1215c:	16 c0       	rjmp	.+44     	; 0x1218a <FMenuLoyalty+0x486>
               stLoyalty=mlExitLoyalty;
		       break;		  
		  }
	      break;
     case mlNoConnection:
	      lcd_clear();
   1215e:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
		  lcd_printf(2,1,PSTR("TCP/IP ERROR "));
   12162:	82 e0       	ldi	r24, 0x02	; 2
   12164:	61 e0       	ldi	r22, 0x01	; 1
   12166:	43 e8       	ldi	r20, 0x83	; 131
   12168:	5c e1       	ldi	r21, 0x1C	; 28
   1216a:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  lcd_printf(3,1,PSTR("No Connection"));
   1216e:	83 e0       	ldi	r24, 0x03	; 3
   12170:	61 e0       	ldi	r22, 0x01	; 1
   12172:	45 e7       	ldi	r20, 0x75	; 117
   12174:	5c e1       	ldi	r21, 0x1C	; 28
   12176:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		  TimDisplay=5;
   1217a:	85 e0       	ldi	r24, 0x05	; 5
   1217c:	80 93 92 01 	sts	0x0192, r24
   12180:	22 cf       	rjmp	.-444    	; 0x11fc6 <FMenuLoyalty+0x2c2>
		  stLoyalty=mlDelayExitLoyalty;
	      break;
     case mlDelayExitLoyalty:
          if(TimDisplay>=10)stLoyalty=mlExitLoyalty;
   12182:	80 91 92 01 	lds	r24, 0x0192
   12186:	8a 30       	cpi	r24, 0x0A	; 10
   12188:	40 f0       	brcs	.+16     	; 0x1219a <FMenuLoyalty+0x496>
   1218a:	8f e0       	ldi	r24, 0x0F	; 15
   1218c:	24 ce       	rjmp	.-952    	; 0x11dd6 <FMenuLoyalty+0xd2>
	      break;
	 case mlExitLoyalty:
	      lcd_clear();
   1218e:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
	      stLoyalty=mlInit;
   12192:	10 92 65 02 	sts	0x0265, r1
   12196:	81 e0       	ldi	r24, 0x01	; 1
   12198:	01 c0       	rjmp	.+2      	; 0x1219c <FMenuLoyalty+0x498>
   1219a:	80 e0       	ldi	r24, 0x00	; 0
		  Result=MENU_DONE;
	      break;
	 }
	 return Result;
}
   1219c:	64 96       	adiw	r28, 0x14	; 20
   1219e:	0f b6       	in	r0, 0x3f	; 63
   121a0:	f8 94       	cli
   121a2:	de bf       	out	0x3e, r29	; 62
   121a4:	0f be       	out	0x3f, r0	; 63
   121a6:	cd bf       	out	0x3d, r28	; 61
   121a8:	cf 91       	pop	r28
   121aa:	df 91       	pop	r29
   121ac:	1f 91       	pop	r17
   121ae:	0f 91       	pop	r16
   121b0:	ff 90       	pop	r15
   121b2:	ef 90       	pop	r14
   121b4:	df 90       	pop	r13
   121b6:	cf 90       	pop	r12
   121b8:	08 95       	ret

000121ba <sendMessage10>:
	sprintf_P(strSend,PSTR("%s%s%s%s10F968CFFB"),strIFT_ID,strSeqNum,strClientIP,strServerIP);
    uart_print(1, 0,strSend);
	uart(1, 1,0x02);
	IsNewPacket=True;
	*/
	IsNewPacket=True;
   121ba:	81 e0       	ldi	r24, 0x01	; 1
   121bc:	80 93 88 01 	sts	0x0188, r24
	IFTSendMessage(MSG_10);
   121c0:	80 e1       	ldi	r24, 0x10	; 16
   121c2:	0e 94 c0 79 	call	0xf380	; 0xf380 <IFTSendMessage>
}
   121c6:	08 95       	ret

000121c8 <InitializeConnection>:
void InitMemory(){
     PumpCountMax=eeprom_read_byte(&DefPoolingPumpMax);
	 ActivePump=eeprom_read_byte(&DefActivePump);
}

void InitializeConnection(){
   121c8:	df 92       	push	r13
   121ca:	ef 92       	push	r14
   121cc:	ff 92       	push	r15
   121ce:	0f 93       	push	r16
   121d0:	1f 93       	push	r17
   121d2:	df 93       	push	r29
   121d4:	cf 93       	push	r28
   121d6:	cd b7       	in	r28, 0x3d	; 61
   121d8:	de b7       	in	r29, 0x3e	; 62
   121da:	64 97       	sbiw	r28, 0x14	; 20
   121dc:	0f b6       	in	r0, 0x3f	; 63
   121de:	f8 94       	cli
   121e0:	de bf       	out	0x3e, r29	; 62
   121e2:	0f be       	out	0x3f, r0	; 63
   121e4:	cd bf       	out	0x3d, r28	; 61
	unsigned int tConnect=0;
	char ForceType=IT_NONE,iCon=0,iTry=0,KeyPressed;
	char lcdteks[20];
	IFType=eeprom_read_byte(&DefInitIFT);
   121e6:	86 e3       	ldi	r24, 0x36	; 54
   121e8:	91 e0       	ldi	r25, 0x01	; 1
   121ea:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
   121ee:	18 2f       	mov	r17, r24
   121f0:	80 93 00 01 	sts	0x0100, r24
	DispenserBrand=eeprom_read_byte(&DefDispenserBrand);
   121f4:	87 e3       	ldi	r24, 0x37	; 55
   121f6:	91 e0       	ldi	r25, 0x01	; 1
   121f8:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
   121fc:	80 93 5e 01 	sts	0x015E, r24

	//SendSlaveCommand(SC_STOP_POOL_SEQUENCE,0);

    //Send Msg10
	if  (IFType==IT_SLAVE){
   12200:	11 30       	cpi	r17, 0x01	; 1
   12202:	09 f0       	breq	.+2      	; 0x12206 <InitializeConnection+0x3e>
   12204:	5f c0       	rjmp	.+190    	; 0x122c4 <InitializeConnection+0xfc>
	     SendSlaveCommand(SC_SLAVE,ST_NONE);
   12206:	81 e0       	ldi	r24, 0x01	; 1
   12208:	60 e0       	ldi	r22, 0x00	; 0
   1220a:	0e 94 91 5f 	call	0xbf22	; 0xbf22 <SendSlaveCommand>
		 char_count=0;
   1220e:	10 92 8a 01 	sts	0x018A, r1
   12212:	10 92 89 01 	sts	0x0189, r1
		 if (IsPowerOn==True){
   12216:	80 91 ba 02 	lds	r24, 0x02BA
   1221a:	81 30       	cpi	r24, 0x01	; 1
   1221c:	59 f4       	brne	.+22     	; 0x12234 <InitializeConnection+0x6c>
		     IsPowerOn=False;
   1221e:	10 92 ba 02 	sts	0x02BA, r1
   12222:	8f ef       	ldi	r24, 0xFF	; 255
   12224:	9f ef       	ldi	r25, 0xFF	; 255
   12226:	29 e1       	ldi	r18, 0x19	; 25
   12228:	30 e0       	ldi	r19, 0x00	; 0
   1222a:	f9 01       	movw	r30, r18
   1222c:	31 97       	sbiw	r30, 0x01	; 1
   1222e:	f1 f7       	brne	.-4      	; 0x1222c <InitializeConnection+0x64>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
   12230:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
   12232:	d9 f7       	brne	.-10     	; 0x1222a <InitializeConnection+0x62>
		     _delay_ms(8000);
			 }
         sendMessage10();
   12234:	0e 94 dd 90 	call	0x121ba	; 0x121ba <sendMessage10>
         sendMessage10();
   12238:	0e 94 dd 90 	call	0x121ba	; 0x121ba <sendMessage10>
         sendMessage10();
   1223c:	0e 94 dd 90 	call	0x121ba	; 0x121ba <sendMessage10>
         

         lcd_printf(4,1,PSTR("Connect         "));
   12240:	84 e0       	ldi	r24, 0x04	; 4
   12242:	61 e0       	ldi	r22, 0x01	; 1
   12244:	49 ee       	ldi	r20, 0xE9	; 233
   12246:	5e e1       	ldi	r21, 0x1E	; 30
   12248:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		 lcd_printf(4,1,PSTR("Connect"));
   1224c:	84 e0       	ldi	r24, 0x04	; 4
   1224e:	61 e0       	ldi	r22, 0x01	; 1
   12250:	41 ee       	ldi	r20, 0xE1	; 225
   12252:	5e e1       	ldi	r21, 0x1E	; 30
   12254:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		 //EstablishConnection TCP/IP
		 IsMessage11=False;
   12258:	10 92 a0 01 	sts	0x01A0, r1
   1225c:	ee 24       	eor	r14, r14
   1225e:	ff 24       	eor	r15, r15
   12260:	10 e0       	ldi	r17, 0x00	; 0
   12262:	00 e0       	ldi	r16, 0x00	; 0
   12264:	2b c0       	rjmp	.+86     	; 0x122bc <InitializeConnection+0xf4>
		  //SlaveIdentification		  
		 while (IsMessage11==False){
		        lcd_put(4,(8+iCon),'.');
   12266:	61 2f       	mov	r22, r17
   12268:	68 5f       	subi	r22, 0xF8	; 248
   1226a:	84 e0       	ldi	r24, 0x04	; 4
   1226c:	4e e2       	ldi	r20, 0x2E	; 46
   1226e:	0e 94 ca a4 	call	0x14994	; 0x14994 <lcd_put>
                tConnect++;
   12272:	08 94       	sec
   12274:	e1 1c       	adc	r14, r1
   12276:	f1 1c       	adc	r15, r1
				__key_lgtcnt=0;
   12278:	10 92 af 02 	sts	0x02AF, r1
			    if ((tConnect%200)==0)iCon++;
   1227c:	c7 01       	movw	r24, r14
   1227e:	68 ec       	ldi	r22, 0xC8	; 200
   12280:	70 e0       	ldi	r23, 0x00	; 0
   12282:	0e 94 03 aa 	call	0x15406	; 0x15406 <__udivmodhi4>
   12286:	89 2b       	or	r24, r25
   12288:	09 f4       	brne	.+2      	; 0x1228c <InitializeConnection+0xc4>
   1228a:	1f 5f       	subi	r17, 0xFF	; 255
			    if (iCon>8){
   1228c:	19 30       	cpi	r17, 0x09	; 9
   1228e:	70 f0       	brcs	.+28     	; 0x122ac <InitializeConnection+0xe4>
			        lcd_printf(4,1,PSTR("Connect         "));
   12290:	84 e0       	ldi	r24, 0x04	; 4
   12292:	61 e0       	ldi	r22, 0x01	; 1
   12294:	40 ed       	ldi	r20, 0xD0	; 208
   12296:	5e e1       	ldi	r21, 0x1E	; 30
   12298:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
					
				    sendMessage10();
   1229c:	0e 94 dd 90 	call	0x121ba	; 0x121ba <sendMessage10>
				    SendSlaveCommand(SC_SLAVE,ST_NONE);
   122a0:	81 e0       	ldi	r24, 0x01	; 1
   122a2:	60 e0       	ldi	r22, 0x00	; 0
   122a4:	0e 94 91 5f 	call	0xbf22	; 0xbf22 <SendSlaveCommand>
			        iCon=0;
				    iTry++;}
   122a8:	0f 5f       	subi	r16, 0xFF	; 255
   122aa:	10 e0       	ldi	r17, 0x00	; 0
			    if (iTry>3){
   122ac:	04 30       	cpi	r16, 0x04	; 4
   122ae:	30 f0       	brcs	.+12     	; 0x122bc <InitializeConnection+0xf4>
			        //IsErrorTCPIP=True;
				    IsAdvanzStartupInfo=False;		
   122b0:	10 92 aa 01 	sts	0x01AA, r1
					IFType=IT_STANDALONE;
   122b4:	82 e0       	ldi	r24, 0x02	; 2
   122b6:	80 93 00 01 	sts	0x0100, r24
   122ba:	04 c0       	rjmp	.+8      	; 0x122c4 <InitializeConnection+0xfc>
         lcd_printf(4,1,PSTR("Connect         "));
		 lcd_printf(4,1,PSTR("Connect"));
		 //EstablishConnection TCP/IP
		 IsMessage11=False;
		  //SlaveIdentification		  
		 while (IsMessage11==False){
   122bc:	80 91 a0 01 	lds	r24, 0x01A0
   122c0:	88 23       	and	r24, r24
   122c2:	89 f2       	breq	.-94     	; 0x12266 <InitializeConnection+0x9e>

			    }
            }//EndWhile
		}

	if (IFType==IT_STANDALONE){
   122c4:	80 91 00 01 	lds	r24, 0x0100
   122c8:	82 30       	cpi	r24, 0x02	; 2
   122ca:	09 f0       	breq	.+2      	; 0x122ce <InitializeConnection+0x106>
   122cc:	72 c0       	rjmp	.+228    	; 0x123b2 <InitializeConnection+0x1ea>
        IsStandAloneDetected=False;		
   122ce:	10 92 9c 01 	sts	0x019C, r1
		SendSlaveCommand(SC_STANDALONE,DispenserBrand);
   122d2:	60 91 5e 01 	lds	r22, 0x015E
   122d6:	0e 94 91 5f 	call	0xbf22	; 0xbf22 <SendSlaveCommand>
		tConnect=0,iCon=0,iTry=0;
	    lcd_clear();
   122da:	0e 94 b1 a4 	call	0x14962	; 0x14962 <lcd_clear>
	    lcd_printf(1,1,PSTR("Scan Pump"));
   122de:	81 e0       	ldi	r24, 0x01	; 1
   122e0:	61 e0       	ldi	r22, 0x01	; 1
   122e2:	46 ec       	ldi	r20, 0xC6	; 198
   122e4:	5e e1       	ldi	r21, 0x1E	; 30
   122e6:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		strcpy_P(lcdteks,(PGM_P)pgm_read_word(&(DefListDispenserName[eeprom_read_byte(&DefDispenserBrand)])));
   122ea:	87 e3       	ldi	r24, 0x37	; 55
   122ec:	91 e0       	ldi	r25, 0x01	; 1
   122ee:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
   122f2:	e8 2f       	mov	r30, r24
   122f4:	f0 e0       	ldi	r31, 0x00	; 0
   122f6:	ee 0f       	add	r30, r30
   122f8:	ff 1f       	adc	r31, r31
   122fa:	eb 5f       	subi	r30, 0xFB	; 251
   122fc:	fc 4f       	sbci	r31, 0xFC	; 252
   122fe:	65 91       	lpm	r22, Z+
   12300:	74 91       	lpm	r23, Z+
   12302:	8e 01       	movw	r16, r28
   12304:	0f 5f       	subi	r16, 0xFF	; 255
   12306:	1f 4f       	sbci	r17, 0xFF	; 255
   12308:	c8 01       	movw	r24, r16
   1230a:	0e 94 6a aa 	call	0x154d4	; 0x154d4 <strcpy_P>
		sprintf_P(lcdteks,PSTR("%s"),lcdteks);
   1230e:	00 d0       	rcall	.+0      	; 0x12310 <InitializeConnection+0x148>
   12310:	00 d0       	rcall	.+0      	; 0x12312 <InitializeConnection+0x14a>
   12312:	00 d0       	rcall	.+0      	; 0x12314 <InitializeConnection+0x14c>
   12314:	ed b7       	in	r30, 0x3d	; 61
   12316:	fe b7       	in	r31, 0x3e	; 62
   12318:	31 96       	adiw	r30, 0x01	; 1
   1231a:	ad b7       	in	r26, 0x3d	; 61
   1231c:	be b7       	in	r27, 0x3e	; 62
   1231e:	12 96       	adiw	r26, 0x02	; 2
   12320:	1c 93       	st	X, r17
   12322:	0e 93       	st	-X, r16
   12324:	11 97       	sbiw	r26, 0x01	; 1
   12326:	83 ec       	ldi	r24, 0xC3	; 195
   12328:	9e e1       	ldi	r25, 0x1E	; 30
   1232a:	93 83       	std	Z+3, r25	; 0x03
   1232c:	82 83       	std	Z+2, r24	; 0x02
   1232e:	15 83       	std	Z+5, r17	; 0x05
   12330:	04 83       	std	Z+4, r16	; 0x04
   12332:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	    lcd_print(2,1,lcdteks);
   12336:	8d b7       	in	r24, 0x3d	; 61
   12338:	9e b7       	in	r25, 0x3e	; 62
   1233a:	06 96       	adiw	r24, 0x06	; 6
   1233c:	0f b6       	in	r0, 0x3f	; 63
   1233e:	f8 94       	cli
   12340:	9e bf       	out	0x3e, r25	; 62
   12342:	0f be       	out	0x3f, r0	; 63
   12344:	8d bf       	out	0x3d, r24	; 61
   12346:	82 e0       	ldi	r24, 0x02	; 2
   12348:	61 e0       	ldi	r22, 0x01	; 1
   1234a:	a8 01       	movw	r20, r16
   1234c:	0e 94 58 a4 	call	0x148b0	; 0x148b0 <lcd_print>
   12350:	00 e0       	ldi	r16, 0x00	; 0
   12352:	10 e0       	ldi	r17, 0x00	; 0
   12354:	ff 24       	eor	r15, r15
   12356:	dd 24       	eor	r13, r13
   12358:	28 c0       	rjmp	.+80     	; 0x123aa <InitializeConnection+0x1e2>

	    while (IsStandAloneDetected==False){
		       lcd_put(4,(1+iCon),'.');
   1235a:	ef 2c       	mov	r14, r15
   1235c:	e3 94       	inc	r14
   1235e:	84 e0       	ldi	r24, 0x04	; 4
   12360:	6e 2d       	mov	r22, r14
   12362:	4e e2       	ldi	r20, 0x2E	; 46
   12364:	0e 94 ca a4 	call	0x14994	; 0x14994 <lcd_put>
		       tConnect++;
   12368:	0f 5f       	subi	r16, 0xFF	; 255
   1236a:	1f 4f       	sbci	r17, 0xFF	; 255
		       if ((tConnect%100)==0)iCon++;
   1236c:	c8 01       	movw	r24, r16
   1236e:	64 e6       	ldi	r22, 0x64	; 100
   12370:	70 e0       	ldi	r23, 0x00	; 0
   12372:	0e 94 03 aa 	call	0x15406	; 0x15406 <__udivmodhi4>
   12376:	89 2b       	or	r24, r25
   12378:	09 f4       	brne	.+2      	; 0x1237c <InitializeConnection+0x1b4>
   1237a:	fe 2c       	mov	r15, r14
		       if (iCon>16){
   1237c:	90 e1       	ldi	r25, 0x10	; 16
   1237e:	9f 15       	cp	r25, r15
   12380:	88 f4       	brcc	.+34     	; 0x123a4 <InitializeConnection+0x1dc>
			       __key_lgtcnt=0;
   12382:	10 92 af 02 	sts	0x02AF, r1
			       lcd_printf(4,1,PSTR("                   "));
   12386:	84 e0       	ldi	r24, 0x04	; 4
   12388:	61 e0       	ldi	r22, 0x01	; 1
   1238a:	4f ea       	ldi	r20, 0xAF	; 175
   1238c:	5e e1       	ldi	r21, 0x1E	; 30
   1238e:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
				   //IsStandaloneAcknoledge=False;
		           SendSlaveCommand(SC_STANDALONE,DispenserBrand);
   12392:	82 e0       	ldi	r24, 0x02	; 2
   12394:	60 91 5e 01 	lds	r22, 0x015E
   12398:	0e 94 91 5f 	call	0xbf22	; 0xbf22 <SendSlaveCommand>
                   //InitStandalone();

			       DisplayPumpStatus();
   1239c:	0e 94 17 49 	call	0x922e	; 0x922e <DisplayPumpStatus>
			       iCon=0;
			       iTry++;}
   123a0:	d3 94       	inc	r13
   123a2:	ff 24       	eor	r15, r15
		           if (iTry>3) break; 
   123a4:	a3 e0       	ldi	r26, 0x03	; 3
   123a6:	ad 15       	cp	r26, r13
   123a8:	20 f0       	brcs	.+8      	; 0x123b2 <InitializeConnection+0x1ea>
	    lcd_printf(1,1,PSTR("Scan Pump"));
		strcpy_P(lcdteks,(PGM_P)pgm_read_word(&(DefListDispenserName[eeprom_read_byte(&DefDispenserBrand)])));
		sprintf_P(lcdteks,PSTR("%s"),lcdteks);
	    lcd_print(2,1,lcdteks);

	    while (IsStandAloneDetected==False){
   123aa:	80 91 9c 01 	lds	r24, 0x019C
   123ae:	88 23       	and	r24, r24
   123b0:	a1 f2       	breq	.-88     	; 0x1235a <InitializeConnection+0x192>
			       iCon=0;
			       iTry++;}
		           if (iTry>3) break; 
	    }
	}//EndIf
	if(IsMessage11==True){
   123b2:	10 91 a0 01 	lds	r17, 0x01A0
   123b6:	11 30       	cpi	r17, 0x01	; 1
   123b8:	d9 f4       	brne	.+54     	; 0x123f0 <InitializeConnection+0x228>
	   lcd_printf(4,1,PSTR("Connected           "));
   123ba:	84 e0       	ldi	r24, 0x04	; 4
   123bc:	61 e0       	ldi	r22, 0x01	; 1
   123be:	4a e9       	ldi	r20, 0x9A	; 154
   123c0:	5e e1       	ldi	r21, 0x1E	; 30
   123c2:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
	   eeprom_write_byte(&DefInitIFT,IT_SLAVE);
   123c6:	86 e3       	ldi	r24, 0x36	; 54
   123c8:	91 e0       	ldi	r25, 0x01	; 1
   123ca:	61 e0       	ldi	r22, 0x01	; 1
   123cc:	0e 94 db ac 	call	0x159b6	; 0x159b6 <__eewr_byte_m128>
	   IFType=IT_SLAVE;
   123d0:	10 93 00 01 	sts	0x0100, r17
   123d4:	80 e3       	ldi	r24, 0x30	; 48
   123d6:	95 e7       	ldi	r25, 0x75	; 117
   123d8:	29 e1       	ldi	r18, 0x19	; 25
   123da:	30 e0       	ldi	r19, 0x00	; 0
   123dc:	f9 01       	movw	r30, r18
   123de:	31 97       	sbiw	r30, 0x01	; 1
   123e0:	f1 f7       	brne	.-4      	; 0x123de <InitializeConnection+0x216>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
   123e2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
   123e4:	d9 f7       	brne	.-10     	; 0x123dc <InitializeConnection+0x214>
	   _delay_ms(3000);
	   //IsErrorTCPIP=False;
	   procMessage11();
   123e6:	0e 94 d4 45 	call	0x8ba8	; 0x8ba8 <procMessage11>
	   IsAdvanzStartupInfo=True;
   123ea:	81 e0       	ldi	r24, 0x01	; 1
   123ec:	80 93 aa 01 	sts	0x01AA, r24
	}
	if(IsStandAloneDetected==True){
   123f0:	80 91 9c 01 	lds	r24, 0x019C
   123f4:	81 30       	cpi	r24, 0x01	; 1
   123f6:	71 f4       	brne	.+28     	; 0x12414 <InitializeConnection+0x24c>
	   lcd_printf(4,1,PSTR("PumpFound"));
   123f8:	84 e0       	ldi	r24, 0x04	; 4
   123fa:	61 e0       	ldi	r22, 0x01	; 1
   123fc:	40 e9       	ldi	r20, 0x90	; 144
   123fe:	5e e1       	ldi	r21, 0x1E	; 30
   12400:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
	   eeprom_write_byte(&DefInitIFT,IT_STANDALONE);
   12404:	86 e3       	ldi	r24, 0x36	; 54
   12406:	91 e0       	ldi	r25, 0x01	; 1
   12408:	62 e0       	ldi	r22, 0x02	; 2
   1240a:	0e 94 db ac 	call	0x159b6	; 0x159b6 <__eewr_byte_m128>
	   IFType=IT_STANDALONE;
   1240e:	82 e0       	ldi	r24, 0x02	; 2
   12410:	80 93 00 01 	sts	0x0100, r24
	}
	//PrintStatus
	if (eeprom_read_byte(&DefPrintInitialize)==True)GeneratePrintInit();
   12414:	85 e3       	ldi	r24, 0x35	; 53
   12416:	91 e0       	ldi	r25, 0x01	; 1
   12418:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
   1241c:	81 30       	cpi	r24, 0x01	; 1
   1241e:	11 f4       	brne	.+4      	; 0x12424 <InitializeConnection+0x25c>
   12420:	0e 94 36 34 	call	0x686c	; 0x686c <GeneratePrintInit>
	if ((IsStandAloneDetected==False)&&(IsMessage11==False)){		
   12424:	80 91 9c 01 	lds	r24, 0x019C
   12428:	88 23       	and	r24, r24
   1242a:	89 f5       	brne	.+98     	; 0x1248e <InitializeConnection+0x2c6>
   1242c:	80 91 a0 01 	lds	r24, 0x01A0
   12430:	88 23       	and	r24, r24
   12432:	69 f5       	brne	.+90     	; 0x1248e <InitializeConnection+0x2c6>
		 lcd_printf(2,1,PSTR("TCP/IP Error"));
   12434:	82 e0       	ldi	r24, 0x02	; 2
   12436:	61 e0       	ldi	r22, 0x01	; 1
   12438:	43 e8       	ldi	r20, 0x83	; 131
   1243a:	5e e1       	ldi	r21, 0x1E	; 30
   1243c:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		 lcd_printf(3,1,PSTR("No Pump Found"));
   12440:	83 e0       	ldi	r24, 0x03	; 3
   12442:	61 e0       	ldi	r22, 0x01	; 1
   12444:	45 e7       	ldi	r20, 0x75	; 117
   12446:	5e e1       	ldi	r21, 0x1E	; 30
   12448:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
   1244c:	80 e2       	ldi	r24, 0x20	; 32
   1244e:	9e e4       	ldi	r25, 0x4E	; 78
   12450:	29 e1       	ldi	r18, 0x19	; 25
   12452:	30 e0       	ldi	r19, 0x00	; 0
   12454:	f9 01       	movw	r30, r18
   12456:	31 97       	sbiw	r30, 0x01	; 1
   12458:	f1 f7       	brne	.-4      	; 0x12456 <InitializeConnection+0x28e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
   1245a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
   1245c:	d9 f7       	brne	.-10     	; 0x12454 <InitializeConnection+0x28c>
		 _delay_ms(2000);
		 ForceType=systemForceType();
   1245e:	0e 94 f1 52 	call	0xa5e2	; 0xa5e2 <systemForceType>
		 if (ForceType=='1'){
   12462:	81 33       	cpi	r24, 0x31	; 49
   12464:	29 f4       	brne	.+10     	; 0x12470 <InitializeConnection+0x2a8>
		     IFType=IT_SLAVE;
   12466:	81 e0       	ldi	r24, 0x01	; 1
   12468:	80 93 00 01 	sts	0x0100, r24
			 SendSlaveCommand(SC_SLAVE,ST_NONE);
   1246c:	60 e0       	ldi	r22, 0x00	; 0
   1246e:	07 c0       	rjmp	.+14     	; 0x1247e <InitializeConnection+0x2b6>
         }
		 else
		 if (ForceType=='2'){
   12470:	82 33       	cpi	r24, 0x32	; 50
   12472:	39 f4       	brne	.+14     	; 0x12482 <InitializeConnection+0x2ba>
		     IFType=IT_STANDALONE;
   12474:	82 e0       	ldi	r24, 0x02	; 2
   12476:	80 93 00 01 	sts	0x0100, r24
			 SendSlaveCommand(SC_STANDALONE,DispenserBrand);
   1247a:	60 91 5e 01 	lds	r22, 0x015E
   1247e:	0e 94 91 5f 	call	0xbf22	; 0xbf22 <SendSlaveCommand>

			 //SendPoolingCommand(SC_SET_POOLING_MAX_PUMP,eeprom_read_byte(&DefPoolingPumpMax));

			 //InitStandalone();
         }
		 eeprom_write_byte(&DefInitIFT,IFType);
   12482:	86 e3       	ldi	r24, 0x36	; 54
   12484:	91 e0       	ldi	r25, 0x01	; 1
   12486:	60 91 00 01 	lds	r22, 0x0100
   1248a:	0e 94 db ac 	call	0x159b6	; 0x159b6 <__eewr_byte_m128>
	}
	InitMemory();
   1248e:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <InitMemory>
	//SendSlaveCommand(SC_START_POOL_SEQUENCE,0);
	
}
   12492:	64 96       	adiw	r28, 0x14	; 20
   12494:	0f b6       	in	r0, 0x3f	; 63
   12496:	f8 94       	cli
   12498:	de bf       	out	0x3e, r29	; 62
   1249a:	0f be       	out	0x3f, r0	; 63
   1249c:	cd bf       	out	0x3d, r28	; 61
   1249e:	cf 91       	pop	r28
   124a0:	df 91       	pop	r29
   124a2:	1f 91       	pop	r17
   124a4:	0f 91       	pop	r16
   124a6:	ff 90       	pop	r15
   124a8:	ef 90       	pop	r14
   124aa:	df 90       	pop	r13
   124ac:	08 95       	ret

000124ae <sendMessage04>:
	 UpdateServerIP();//ReadDestIP
	 //strTranNo = strReceiptNum
	 sprintf_P(strSend,PSTR("%s%s%s%s04%s1F968CFFB"),strIFT_ID,strSeqNum,strClientIP,strServerIP,strTranNo);
     uart_print(1, 0,strSend);
	 uart(1, 1,0x02);
	 */IFTSendMessage(MSG_04);
   124ae:	84 e0       	ldi	r24, 0x04	; 4
   124b0:	0e 94 c0 79 	call	0xf380	; 0xf380 <IFTSendMessage>
}
   124b4:	08 95       	ret

000124b6 <FreePrinting>:
	 } 
	 else uart(_COM_PRINTER,1,xSend);
	 zSend=xSend;
}

void FreePrinting(){
   124b6:	0f 93       	push	r16
   124b8:	1f 93       	push	r17
   124ba:	df 93       	push	r29
   124bc:	cf 93       	push	r28
   124be:	cd b7       	in	r28, 0x3d	; 61
   124c0:	de b7       	in	r29, 0x3e	; 62
   124c2:	64 97       	sbiw	r28, 0x14	; 20
   124c4:	0f b6       	in	r0, 0x3f	; 63
   124c6:	f8 94       	cli
   124c8:	de bf       	out	0x3e, r29	; 62
   124ca:	0f be       	out	0x3f, r0	; 63
   124cc:	cd bf       	out	0x3d, r28	; 61
static char iPrinted=0,iHeader=0,iFooter=0,PrintCopy=0,iMargin=0,iScroll=0,nScroll=0;
static unsigned int iSend=0,LSend=0,iLoop=0;
       char strOperatorName[20];

     //Normalize FreePrintIdleState
     if ((IsFreePrinting==True)&&(stFreePrinting!=fpInit)){
   124ce:	20 91 a8 01 	lds	r18, 0x01A8
   124d2:	21 30       	cpi	r18, 0x01	; 1
   124d4:	31 f4       	brne	.+12     	; 0x124e2 <FreePrinting+0x2c>
   124d6:	80 91 25 01 	lds	r24, 0x0125
   124da:	81 30       	cpi	r24, 0x01	; 1
   124dc:	11 f0       	breq	.+4      	; 0x124e2 <FreePrinting+0x2c>
	     stFreePrinting=fpInit;
   124de:	20 93 25 01 	sts	0x0125, r18
	 }
	 switch (stFreePrinting){
   124e2:	80 91 25 01 	lds	r24, 0x0125
   124e6:	90 e0       	ldi	r25, 0x00	; 0
   124e8:	fc 01       	movw	r30, r24
   124ea:	31 97       	sbiw	r30, 0x01	; 1
   124ec:	eb 31       	cpi	r30, 0x1B	; 27
   124ee:	f1 05       	cpc	r31, r1
   124f0:	08 f0       	brcs	.+2      	; 0x124f4 <FreePrinting+0x3e>
   124f2:	7b c3       	rjmp	.+1782   	; 0x12bea <FreePrinting+0x734>
   124f4:	e3 53       	subi	r30, 0x33	; 51
   124f6:	ff 4f       	sbci	r31, 0xFF	; 255
   124f8:	ee 0f       	add	r30, r30
   124fa:	ff 1f       	adc	r31, r31
   124fc:	05 90       	lpm	r0, Z+
   124fe:	f4 91       	lpm	r31, Z+
   12500:	e0 2d       	mov	r30, r0
   12502:	09 94       	ijmp
     case fpInit:
	      //uart_printf(0,1,PSTR("fpInit"));
	      if (IsFreePrinting==True){
   12504:	21 30       	cpi	r18, 0x01	; 1
   12506:	09 f0       	breq	.+2      	; 0x1250a <FreePrinting+0x54>
   12508:	70 c3       	rjmp	.+1760   	; 0x12bea <FreePrinting+0x734>
		      IsFreePrinting=False;
   1250a:	10 92 a8 01 	sts	0x01A8, r1
			  IsBusyFreePrinting=True;
   1250e:	20 93 b4 01 	sts	0x01B4, r18
			  IsBusyPrint=False;
   12512:	10 92 b3 01 	sts	0x01B3, r1
			  iPrinted=0,iFooter=0;
   12516:	10 92 f5 01 	sts	0x01F5, r1
   1251a:	10 92 f3 01 	sts	0x01F3, r1

			  PrintCopy=(cmdPrint&0x0F);
   1251e:	80 91 b5 01 	lds	r24, 0x01B5
   12522:	8f 70       	andi	r24, 0x0F	; 15
   12524:	80 93 f2 01 	sts	0x01F2, r24

			  //cmdPrint=cmdPrint|0b00100000;
			  //PrintCopy=2;

			  stFreePrinting=fpInitHeader;
   12528:	82 e0       	ldi	r24, 0x02	; 2
   1252a:	80 93 25 01 	sts	0x0125, r24
			  InitPrinter();
   1252e:	0e 94 2a 45 	call	0x8a54	; 0x8a54 <InitPrinter>
   12532:	5b c3       	rjmp	.+1718   	; 0x12bea <FreePrinting+0x734>
			  }
	      break;
     case fpInitHeader:
	      //uart_printf(0,1,PSTR("fpInitHeader"));
		  iHeader=0;
   12534:	10 92 f4 01 	sts	0x01F4, r1
	      if (((cmdPrint&0b10000000)>>7)==1){
   12538:	80 91 b5 01 	lds	r24, 0x01B5
   1253c:	88 1f       	adc	r24, r24
   1253e:	88 27       	eor	r24, r24
   12540:	88 1f       	adc	r24, r24
   12542:	90 e0       	ldi	r25, 0x00	; 0
   12544:	81 30       	cpi	r24, 0x01	; 1
   12546:	91 05       	cpc	r25, r1
   12548:	11 f1       	breq	.+68     	; 0x1258e <FreePrinting+0xd8>
		      stFreePrinting=fpLoadHeader;
			  }
		  else
	      if (((cmdPrint&0b10000000)>>7)==0) stFreePrinting=fpInitMessage;	      
   1254a:	89 2b       	or	r24, r25
   1254c:	09 f0       	breq	.+2      	; 0x12550 <FreePrinting+0x9a>
   1254e:	4d c3       	rjmp	.+1690   	; 0x12bea <FreePrinting+0x734>
   12550:	85 e0       	ldi	r24, 0x05	; 5
   12552:	80 93 25 01 	sts	0x0125, r24
   12556:	49 c3       	rjmp	.+1682   	; 0x12bea <FreePrinting+0x734>
	      break;
     case fpLoadHeader:
	      //uart_printf(0,1,PSTR("fpLoadHeader"));
          //Header 1
	      eeprom_read_block((void*) &strPrint, (const void*) &DefHeaderFooter[iHeader], 40);
   12558:	60 91 f4 01 	lds	r22, 0x01F4
   1255c:	89 e2       	ldi	r24, 0x29	; 41
   1255e:	68 9f       	mul	r22, r24
   12560:	b0 01       	movw	r22, r0
   12562:	11 24       	eor	r1, r1
   12564:	69 5d       	subi	r22, 0xD9	; 217
   12566:	7d 4f       	sbci	r23, 0xFD	; 253
   12568:	8c eb       	ldi	r24, 0xBC	; 188
   1256a:	98 e0       	ldi	r25, 0x08	; 8
   1256c:	48 e2       	ldi	r20, 0x28	; 40
   1256e:	50 e0       	ldi	r21, 0x00	; 0
   12570:	0e 94 b9 ac 	call	0x15972	; 0x15972 <__eerd_block_m128>
		  iHeader++;
   12574:	80 91 f4 01 	lds	r24, 0x01F4
   12578:	8f 5f       	subi	r24, 0xFF	; 255
   1257a:	80 93 f4 01 	sts	0x01F4, r24
		  if (iHeader<6){
   1257e:	86 30       	cpi	r24, 0x06	; 6
   12580:	38 f7       	brcc	.-50     	; 0x12550 <FreePrinting+0x9a>
		      if (SpaceOnly(strPrint)==True){
   12582:	8c eb       	ldi	r24, 0xBC	; 188
   12584:	98 e0       	ldi	r25, 0x08	; 8
   12586:	0e 94 c0 25 	call	0x4b80	; 0x4b80 <SpaceOnly>
   1258a:	81 30       	cpi	r24, 0x01	; 1
   1258c:	11 f4       	brne	.+4      	; 0x12592 <FreePrinting+0xdc>
			      stFreePrinting=fpLoadHeader;
   1258e:	83 e0       	ldi	r24, 0x03	; 3
   12590:	e0 cf       	rjmp	.-64     	; 0x12552 <FreePrinting+0x9c>
				  }	      
			  else{
			      stFreePrinting=fpPrintHeader;
   12592:	84 e0       	ldi	r24, 0x04	; 4
   12594:	80 93 25 01 	sts	0x0125, r24
			      iSend=0;
   12598:	10 92 ee 01 	sts	0x01EE, r1
   1259c:	10 92 ed 01 	sts	0x01ED, r1
				  iLoop=0;
   125a0:	10 92 ea 01 	sts	0x01EA, r1
   125a4:	10 92 e9 01 	sts	0x01E9, r1
				  //PrintDoubleHeight on 1st Header
				  if (iHeader==1) PrintDoubleHeight();
   125a8:	80 91 f4 01 	lds	r24, 0x01F4
   125ac:	81 30       	cpi	r24, 0x01	; 1
   125ae:	19 f4       	brne	.+6      	; 0x125b6 <FreePrinting+0x100>
   125b0:	0e 94 a4 45 	call	0x8b48	; 0x8b48 <PrintDoubleHeight>
   125b4:	1a c3       	rjmp	.+1588   	; 0x12bea <FreePrinting+0x734>
				  else 
				  if (iHeader==2) PrintNormalHeight();
   125b6:	82 30       	cpi	r24, 0x02	; 2
   125b8:	09 f0       	breq	.+2      	; 0x125bc <FreePrinting+0x106>
   125ba:	17 c3       	rjmp	.+1582   	; 0x12bea <FreePrinting+0x734>
   125bc:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <PrintNormalHeight>
   125c0:	14 c3       	rjmp	.+1576   	; 0x12bea <FreePrinting+0x734>
		  {stFreePrinting=fpInitMessage;
		  }
	      break;
     case fpPrintHeader:
	      //uart_printf(0,1,PSTR("fpPrintHeader"));
		  if (iSend<40){
   125c2:	80 91 ed 01 	lds	r24, 0x01ED
   125c6:	90 91 ee 01 	lds	r25, 0x01EE
   125ca:	88 97       	sbiw	r24, 0x28	; 40
   125cc:	68 f4       	brcc	.+26     	; 0x125e8 <FreePrinting+0x132>
		      iLoop++;
   125ce:	80 91 e9 01 	lds	r24, 0x01E9
   125d2:	90 91 ea 01 	lds	r25, 0x01EA
   125d6:	01 96       	adiw	r24, 0x01	; 1
   125d8:	90 93 ea 01 	sts	0x01EA, r25
   125dc:	80 93 e9 01 	sts	0x01E9, r24
			  if ((iLoop%PRINT_DELAY)==0){
			     //uart(_COM_PRINTER,1,strPrint[iSend]);
		         //iSend++;
				 TimPrintBusy=0;
   125e0:	10 92 b6 01 	sts	0x01B6, r1
				 stFreePrinting=fpCheckPrintStatusHeader;
   125e4:	82 e1       	ldi	r24, 0x12	; 18
   125e6:	b5 cf       	rjmp	.-150    	; 0x12552 <FreePrinting+0x9c>
				 }
			  }
          else{ 
		     stFreePrinting=fpLoadHeader;
   125e8:	83 e0       	ldi	r24, 0x03	; 3
   125ea:	5c c2       	rjmp	.+1208   	; 0x12aa4 <FreePrinting+0x5ee>
			 CarriegeReturn();
		  }
	      break;

     case fpCheckPrintStatusHeader:
	      if (IsBusyPrint==False){
   125ec:	80 91 b3 01 	lds	r24, 0x01B3
   125f0:	88 23       	and	r24, r24
   125f2:	09 f0       	breq	.+2      	; 0x125f6 <FreePrinting+0x140>
   125f4:	76 c2       	rjmp	.+1260   	; 0x12ae2 <FreePrinting+0x62c>
		      uart(_COM_PRINTER,1,strPrint[iSend]);
   125f6:	e0 91 ed 01 	lds	r30, 0x01ED
   125fa:	f0 91 ee 01 	lds	r31, 0x01EE
   125fe:	e4 54       	subi	r30, 0x44	; 68
   12600:	f7 4f       	sbci	r31, 0xF7	; 247
   12602:	61 e0       	ldi	r22, 0x01	; 1
   12604:	40 81       	ld	r20, Z
   12606:	0e 94 5b a8 	call	0x150b6	; 0x150b6 <uart>
		      iSend++;
   1260a:	80 91 ed 01 	lds	r24, 0x01ED
   1260e:	90 91 ee 01 	lds	r25, 0x01EE
   12612:	01 96       	adiw	r24, 0x01	; 1
   12614:	90 93 ee 01 	sts	0x01EE, r25
   12618:	80 93 ed 01 	sts	0x01ED, r24
		      stFreePrinting=fpPrintHeader;
   1261c:	84 e0       	ldi	r24, 0x04	; 4
   1261e:	5f c2       	rjmp	.+1214   	; 0x12ade <FreePrinting+0x628>
		      stFreePrinting=fpFinishFreePrinting;
			  }
	      break;
     case fpInitMessage:
	      //uart_printf(0,1,PSTR("fpInitMessage"));
	      iSend=0;iLoop=0;
   12620:	10 92 ee 01 	sts	0x01EE, r1
   12624:	10 92 ed 01 	sts	0x01ED, r1
   12628:	10 92 ea 01 	sts	0x01EA, r1
   1262c:	10 92 e9 01 	sts	0x01E9, r1
          stFreePrinting=fpPrintMessage; 
   12630:	08 e0       	ldi	r16, 0x08	; 8
   12632:	00 93 25 01 	sts	0x0125, r16
		  CarriegeReturn();
   12636:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
		  if (iPrinted>0) stFreePrinting=fpInitDuplicate;
   1263a:	80 91 f5 01 	lds	r24, 0x01F5
   1263e:	88 23       	and	r24, r24
   12640:	11 f0       	breq	.+4      	; 0x12646 <FreePrinting+0x190>
   12642:	86 e0       	ldi	r24, 0x06	; 6
   12644:	86 cf       	rjmp	.-244    	; 0x12552 <FreePrinting+0x9c>
		  else stFreePrinting=fpPrintMessage; 
   12646:	00 93 25 01 	sts	0x0125, r16
   1264a:	cf c2       	rjmp	.+1438   	; 0x12bea <FreePrinting+0x734>
	      break;
     case fpInitDuplicate:
	      //uart_printf(0,1,PSTR("fpInitDuplicate"));
          if (iPrinted>0)sprintf_P(strPrint,PSTR("             DUPLICATE COPY        "));
   1264c:	80 91 f5 01 	lds	r24, 0x01F5
   12650:	2c eb       	ldi	r18, 0xBC	; 188
   12652:	38 e0       	ldi	r19, 0x08	; 8
   12654:	88 23       	and	r24, r24
   12656:	79 f0       	breq	.+30     	; 0x12676 <FreePrinting+0x1c0>
   12658:	00 d0       	rcall	.+0      	; 0x1265a <FreePrinting+0x1a4>
   1265a:	00 d0       	rcall	.+0      	; 0x1265c <FreePrinting+0x1a6>
   1265c:	ad b7       	in	r26, 0x3d	; 61
   1265e:	be b7       	in	r27, 0x3e	; 62
   12660:	12 96       	adiw	r26, 0x02	; 2
   12662:	3c 93       	st	X, r19
   12664:	2e 93       	st	-X, r18
   12666:	11 97       	sbiw	r26, 0x01	; 1
   12668:	8d e7       	ldi	r24, 0x7D	; 125
   1266a:	97 e0       	ldi	r25, 0x07	; 7
   1266c:	14 96       	adiw	r26, 0x04	; 4
   1266e:	9c 93       	st	X, r25
   12670:	8e 93       	st	-X, r24
   12672:	13 97       	sbiw	r26, 0x03	; 3
   12674:	0a c0       	rjmp	.+20     	; 0x1268a <FreePrinting+0x1d4>
          else           sprintf_P(strPrint,PSTR("                                   "));
   12676:	00 d0       	rcall	.+0      	; 0x12678 <FreePrinting+0x1c2>
   12678:	00 d0       	rcall	.+0      	; 0x1267a <FreePrinting+0x1c4>
   1267a:	ed b7       	in	r30, 0x3d	; 61
   1267c:	fe b7       	in	r31, 0x3e	; 62
   1267e:	32 83       	std	Z+2, r19	; 0x02
   12680:	21 83       	std	Z+1, r18	; 0x01
   12682:	89 e5       	ldi	r24, 0x59	; 89
   12684:	97 e0       	ldi	r25, 0x07	; 7
   12686:	94 83       	std	Z+4, r25	; 0x04
   12688:	83 83       	std	Z+3, r24	; 0x03
   1268a:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
   1268e:	0f 90       	pop	r0
   12690:	0f 90       	pop	r0
   12692:	0f 90       	pop	r0
   12694:	0f 90       	pop	r0
		  iSend=0;
   12696:	10 92 ee 01 	sts	0x01EE, r1
   1269a:	10 92 ed 01 	sts	0x01ED, r1
		  iLoop=0;
   1269e:	10 92 ea 01 	sts	0x01EA, r1
   126a2:	10 92 e9 01 	sts	0x01E9, r1
		  LSend=strlen(strPrint);
   126a6:	ec eb       	ldi	r30, 0xBC	; 188
   126a8:	f8 e0       	ldi	r31, 0x08	; 8
   126aa:	01 90       	ld	r0, Z+
   126ac:	00 20       	and	r0, r0
   126ae:	e9 f7       	brne	.-6      	; 0x126aa <FreePrinting+0x1f4>
   126b0:	31 97       	sbiw	r30, 0x01	; 1
   126b2:	ec 5b       	subi	r30, 0xBC	; 188
   126b4:	f8 40       	sbci	r31, 0x08	; 8
   126b6:	f0 93 ec 01 	sts	0x01EC, r31
   126ba:	e0 93 eb 01 	sts	0x01EB, r30
          stFreePrinting=fpPrintDuplicate; 
   126be:	87 e0       	ldi	r24, 0x07	; 7
   126c0:	48 cf       	rjmp	.-368    	; 0x12552 <FreePrinting+0x9c>
	      break;
     case fpPrintDuplicate:
	      //uart_printf(0,1,PSTR("fpPrintDuplicate"));
		  if (iSend<LSend){
   126c2:	20 91 ed 01 	lds	r18, 0x01ED
   126c6:	30 91 ee 01 	lds	r19, 0x01EE
   126ca:	80 91 eb 01 	lds	r24, 0x01EB
   126ce:	90 91 ec 01 	lds	r25, 0x01EC
   126d2:	28 17       	cp	r18, r24
   126d4:	39 07       	cpc	r19, r25
   126d6:	68 f4       	brcc	.+26     	; 0x126f2 <FreePrinting+0x23c>
		      iLoop++;
   126d8:	80 91 e9 01 	lds	r24, 0x01E9
   126dc:	90 91 ea 01 	lds	r25, 0x01EA
   126e0:	01 96       	adiw	r24, 0x01	; 1
   126e2:	90 93 ea 01 	sts	0x01EA, r25
   126e6:	80 93 e9 01 	sts	0x01E9, r24
			  if((iLoop%PRINT_DELAY)==0){
			     //uart(_COM_PRINTER,1,strPrint[iSend]);
				 //iSend++;
				 TimPrintBusy=0;
   126ea:	10 92 b6 01 	sts	0x01B6, r1
                 stFreePrinting=fpCheckPrintStatusDuplicate;
   126ee:	85 e1       	ldi	r24, 0x15	; 21
   126f0:	30 cf       	rjmp	.-416    	; 0x12552 <FreePrinting+0x9c>
				 }
			  }
          else {
		     iSend=0;
   126f2:	10 92 ee 01 	sts	0x01EE, r1
   126f6:	10 92 ed 01 	sts	0x01ED, r1
		     stFreePrinting=fpPrintMessage;
   126fa:	88 e0       	ldi	r24, 0x08	; 8
   126fc:	d3 c1       	rjmp	.+934    	; 0x12aa4 <FreePrinting+0x5ee>
			 CarriegeReturn();	      
			 }
	      break;
     case fpCheckPrintStatusDuplicate:
	      if (IsBusyPrint==False){
   126fe:	80 91 b3 01 	lds	r24, 0x01B3
   12702:	88 23       	and	r24, r24
   12704:	09 f0       	breq	.+2      	; 0x12708 <FreePrinting+0x252>
   12706:	ed c1       	rjmp	.+986    	; 0x12ae2 <FreePrinting+0x62c>
		      uart(_COM_PRINTER,1,strPrint[iSend]);
   12708:	e0 91 ed 01 	lds	r30, 0x01ED
   1270c:	f0 91 ee 01 	lds	r31, 0x01EE
   12710:	e4 54       	subi	r30, 0x44	; 68
   12712:	f7 4f       	sbci	r31, 0xF7	; 247
   12714:	61 e0       	ldi	r22, 0x01	; 1
   12716:	40 81       	ld	r20, Z
   12718:	0e 94 5b a8 	call	0x150b6	; 0x150b6 <uart>
		      iSend++;
   1271c:	80 91 ed 01 	lds	r24, 0x01ED
   12720:	90 91 ee 01 	lds	r25, 0x01EE
   12724:	01 96       	adiw	r24, 0x01	; 1
   12726:	90 93 ee 01 	sts	0x01EE, r25
   1272a:	80 93 ed 01 	sts	0x01ED, r24
		      stFreePrinting=fpPrintDuplicate;
   1272e:	87 e0       	ldi	r24, 0x07	; 7
   12730:	d6 c1       	rjmp	.+940    	; 0x12ade <FreePrinting+0x628>
		      stFreePrinting=fpFinishFreePrinting;
			  }
	      break;

     case fpPrintMessage:
		  if (iSend<LengthMessage81){
   12732:	20 91 ed 01 	lds	r18, 0x01ED
   12736:	30 91 ee 01 	lds	r19, 0x01EE
   1273a:	80 91 8d 01 	lds	r24, 0x018D
   1273e:	90 91 8e 01 	lds	r25, 0x018E
   12742:	28 17       	cp	r18, r24
   12744:	39 07       	cpc	r19, r25
   12746:	68 f4       	brcc	.+26     	; 0x12762 <FreePrinting+0x2ac>
		      iLoop++;
   12748:	80 91 e9 01 	lds	r24, 0x01E9
   1274c:	90 91 ea 01 	lds	r25, 0x01EA
   12750:	01 96       	adiw	r24, 0x01	; 1
   12752:	90 93 ea 01 	sts	0x01EA, r25
   12756:	80 93 e9 01 	sts	0x01E9, r24
			  if((iLoop%PRINT_DELAY)==0){
			     TimPrintBusy=0;
   1275a:	10 92 b6 01 	sts	0x01B6, r1
				 stFreePrinting=fpCheckPrintStatusMessage;
   1275e:	83 e1       	ldi	r24, 0x13	; 19
   12760:	f8 ce       	rjmp	.-528    	; 0x12552 <FreePrinting+0x9c>
				 }
			  }
          else stFreePrinting=fpLoadEndLine;//fpInitFooter;
   12762:	86 e1       	ldi	r24, 0x16	; 22
   12764:	f6 ce       	rjmp	.-532    	; 0x12552 <FreePrinting+0x9c>
	      break;
     
     case fpCheckPrintStatusMessage:
	      if (IsBusyPrint==False){
   12766:	80 91 b3 01 	lds	r24, 0x01B3
   1276a:	88 23       	and	r24, r24
   1276c:	09 f0       	breq	.+2      	; 0x12770 <FreePrinting+0x2ba>
   1276e:	b9 c1       	rjmp	.+882    	; 0x12ae2 <FreePrinting+0x62c>
              if ((PrintBuffer[iSend]!=0x0D)||(PrintBuffer[iSend]!=0x0A))
			      SendPrint(PrintBuffer[iSend],PrintBuffer[iSend+1]);
   12770:	e0 91 ed 01 	lds	r30, 0x01ED
   12774:	f0 91 ee 01 	lds	r31, 0x01EE
   12778:	e4 51       	subi	r30, 0x14	; 20
   1277a:	fc 4f       	sbci	r31, 0xFC	; 252
   1277c:	80 81       	ld	r24, Z
   1277e:	61 81       	ldd	r22, Z+1	; 0x01
   12780:	0e 94 07 45 	call	0x8a0e	; 0x8a0e <SendPrint>
			     // uart(_COM_PRINTER,1,PrintBuffer[iSend]);
              if ((PrintBuffer[iSend]==0x0D)||(PrintBuffer[iSend+1]==0x0A))
   12784:	e0 91 ed 01 	lds	r30, 0x01ED
   12788:	f0 91 ee 01 	lds	r31, 0x01EE
   1278c:	e4 51       	subi	r30, 0x14	; 20
   1278e:	fc 4f       	sbci	r31, 0xFC	; 252
   12790:	80 81       	ld	r24, Z
   12792:	8d 30       	cpi	r24, 0x0D	; 13
   12794:	19 f0       	breq	.+6      	; 0x1279c <FreePrinting+0x2e6>
   12796:	81 81       	ldd	r24, Z+1	; 0x01
   12798:	8a 30       	cpi	r24, 0x0A	; 10
   1279a:	11 f4       	brne	.+4      	; 0x127a0 <FreePrinting+0x2ea>
			     CarriegeReturn();
   1279c:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
             iSend++;
   127a0:	80 91 ed 01 	lds	r24, 0x01ED
   127a4:	90 91 ee 01 	lds	r25, 0x01EE
   127a8:	01 96       	adiw	r24, 0x01	; 1
   127aa:	90 93 ee 01 	sts	0x01EE, r25
   127ae:	80 93 ed 01 	sts	0x01ED, r24
		     stFreePrinting=fpPrintMessage;
   127b2:	88 e0       	ldi	r24, 0x08	; 8
   127b4:	94 c1       	rjmp	.+808    	; 0x12ade <FreePrinting+0x628>
		      stFreePrinting=fpFinishFreePrinting;
			  }
	      break;
     //SpaceAdded
	 case fpInitSpace:
	      iLoop=0;
   127b6:	10 92 ea 01 	sts	0x01EA, r1
   127ba:	10 92 e9 01 	sts	0x01E9, r1
		  iMargin=0;
   127be:	10 92 f1 01 	sts	0x01F1, r1
		  stFreePrinting=fpPrintMargin;
   127c2:	8a e0       	ldi	r24, 0x0A	; 10
   127c4:	c6 ce       	rjmp	.-628    	; 0x12552 <FreePrinting+0x9c>
	      break;
	 case fpPrintMargin:
		  if (iMargin<PRINT_MARGIN){
   127c6:	80 91 f1 01 	lds	r24, 0x01F1
   127ca:	85 30       	cpi	r24, 0x05	; 5
   127cc:	90 f4       	brcc	.+36     	; 0x127f2 <FreePrinting+0x33c>
		      iMargin++;
   127ce:	8f 5f       	subi	r24, 0xFF	; 255
   127d0:	80 93 f1 01 	sts	0x01F1, r24
		      iLoop++;
   127d4:	80 91 e9 01 	lds	r24, 0x01E9
   127d8:	90 91 ea 01 	lds	r25, 0x01EA
   127dc:	01 96       	adiw	r24, 0x01	; 1
   127de:	90 93 ea 01 	sts	0x01EA, r25
   127e2:	80 93 e9 01 	sts	0x01E9, r24
	          if ((iLoop%PRINT_DELAY)==0)uart(_COM_PRINTER,1,' ');
   127e6:	80 e0       	ldi	r24, 0x00	; 0
   127e8:	61 e0       	ldi	r22, 0x01	; 1
   127ea:	40 e2       	ldi	r20, 0x20	; 32
   127ec:	0e 94 5b a8 	call	0x150b6	; 0x150b6 <uart>
   127f0:	fc c1       	rjmp	.+1016   	; 0x12bea <FreePrinting+0x734>
			 }
          else stFreePrinting=fpPrintMessage;
   127f2:	88 e0       	ldi	r24, 0x08	; 8
   127f4:	ae ce       	rjmp	.-676    	; 0x12552 <FreePrinting+0x9c>
	      break;
     
     //Added Operator Name:
	 case fpLoadEndLine:
		  eeprom_read_block((void*) &strOperatorName, (const void*) &DefOperatorName,18);
   127f6:	8e 01       	movw	r16, r28
   127f8:	0f 5f       	subi	r16, 0xFF	; 255
   127fa:	1f 4f       	sbci	r17, 0xFF	; 255
   127fc:	c8 01       	movw	r24, r16
   127fe:	65 e1       	ldi	r22, 0x15	; 21
   12800:	70 e0       	ldi	r23, 0x00	; 0
   12802:	42 e1       	ldi	r20, 0x12	; 18
   12804:	50 e0       	ldi	r21, 0x00	; 0
   12806:	0e 94 b9 ac 	call	0x15972	; 0x15972 <__eerd_block_m128>
   1280a:	c8 01       	movw	r24, r16
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   1280c:	9e 01       	movw	r18, r28
   1280e:	20 5f       	subi	r18, 0xF0	; 240
   12810:	3f 4f       	sbci	r19, 0xFF	; 255
	    Dest[i]=Source[IdxSource+i];
   12812:	01 96       	adiw	r24, 0x01	; 1
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   12814:	82 17       	cp	r24, r18
   12816:	93 07       	cpc	r25, r19
   12818:	e1 f7       	brne	.-8      	; 0x12812 <FreePrinting+0x35c>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
   1281a:	18 8a       	std	Y+16, r1	; 0x10
     
     //Added Operator Name:
	 case fpLoadEndLine:
		  eeprom_read_block((void*) &strOperatorName, (const void*) &DefOperatorName,18);
          StrPosCopy(strOperatorName,strOperatorName,0,15);
          if (strlen(strOperatorName)>0){
   1281c:	89 81       	ldd	r24, Y+1	; 0x01
   1281e:	88 23       	and	r24, r24
   12820:	09 f4       	brne	.+2      	; 0x12824 <FreePrinting+0x36e>
   12822:	d4 c0       	rjmp	.+424    	; 0x129cc <FreePrinting+0x516>
		  	  if (SpaceOnly(strOperatorName)!=True){
   12824:	ce 01       	movw	r24, r28
   12826:	01 96       	adiw	r24, 0x01	; 1
   12828:	0e 94 c0 25 	call	0x4b80	; 0x4b80 <SpaceOnly>
   1282c:	81 30       	cpi	r24, 0x01	; 1
   1282e:	09 f4       	brne	.+2      	; 0x12832 <FreePrinting+0x37c>
   12830:	cd c0       	rjmp	.+410    	; 0x129cc <FreePrinting+0x516>
			      sprintf_P(strPrint,PSTR("---------------------------------"));
   12832:	00 d0       	rcall	.+0      	; 0x12834 <FreePrinting+0x37e>
   12834:	00 d0       	rcall	.+0      	; 0x12836 <FreePrinting+0x380>
   12836:	0c eb       	ldi	r16, 0xBC	; 188
   12838:	18 e0       	ldi	r17, 0x08	; 8
   1283a:	ad b7       	in	r26, 0x3d	; 61
   1283c:	be b7       	in	r27, 0x3e	; 62
   1283e:	12 96       	adiw	r26, 0x02	; 2
   12840:	1c 93       	st	X, r17
   12842:	0e 93       	st	-X, r16
   12844:	11 97       	sbiw	r26, 0x01	; 1
   12846:	87 e3       	ldi	r24, 0x37	; 55
   12848:	97 e0       	ldi	r25, 0x07	; 7
   1284a:	14 96       	adiw	r26, 0x04	; 4
   1284c:	9c 93       	st	X, r25
   1284e:	8e 93       	st	-X, r24
   12850:	13 97       	sbiw	r26, 0x03	; 3
   12852:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
			      //AddSpaceLead(strPrint,(strlen(strPrint)+PRINT_MARGIN));
			      iSend=0;
   12856:	10 92 ee 01 	sts	0x01EE, r1
   1285a:	10 92 ed 01 	sts	0x01ED, r1
				  iLoop=0;
   1285e:	10 92 ea 01 	sts	0x01EA, r1
   12862:	10 92 e9 01 	sts	0x01E9, r1
				  LSend=strlen(strPrint);
   12866:	f8 01       	movw	r30, r16
   12868:	01 90       	ld	r0, Z+
   1286a:	00 20       	and	r0, r0
   1286c:	e9 f7       	brne	.-6      	; 0x12868 <FreePrinting+0x3b2>
   1286e:	8f 01       	movw	r16, r30
   12870:	01 50       	subi	r16, 0x01	; 1
   12872:	10 40       	sbci	r17, 0x00	; 0
   12874:	0c 5b       	subi	r16, 0xBC	; 188
   12876:	18 40       	sbci	r17, 0x08	; 8
   12878:	10 93 ec 01 	sts	0x01EC, r17
   1287c:	00 93 eb 01 	sts	0x01EB, r16
				  stFreePrinting=fpPrintEndLine;	
   12880:	87 e1       	ldi	r24, 0x17	; 23
   12882:	80 93 25 01 	sts	0x0125, r24
   12886:	0f 90       	pop	r0
   12888:	0f 90       	pop	r0
   1288a:	0f 90       	pop	r0
   1288c:	0f 90       	pop	r0
   1288e:	ad c1       	rjmp	.+858    	; 0x12bea <FreePrinting+0x734>
			   }else stFreePrinting=fpInitFooter;
		  }else stFreePrinting=fpInitFooter;
	      break;

	 case fpPrintEndLine:
		  if (iSend<LSend){
   12890:	20 91 ed 01 	lds	r18, 0x01ED
   12894:	30 91 ee 01 	lds	r19, 0x01EE
   12898:	80 91 eb 01 	lds	r24, 0x01EB
   1289c:	90 91 ec 01 	lds	r25, 0x01EC
   128a0:	28 17       	cp	r18, r24
   128a2:	39 07       	cpc	r19, r25
   128a4:	68 f4       	brcc	.+26     	; 0x128c0 <FreePrinting+0x40a>
		      iLoop++;
   128a6:	80 91 e9 01 	lds	r24, 0x01E9
   128aa:	90 91 ea 01 	lds	r25, 0x01EA
   128ae:	01 96       	adiw	r24, 0x01	; 1
   128b0:	90 93 ea 01 	sts	0x01EA, r25
   128b4:	80 93 e9 01 	sts	0x01E9, r24
			  if((iLoop%PRINT_DELAY)==0){
				  TimPrintBusy=0;
   128b8:	10 92 b6 01 	sts	0x01B6, r1
				  stFreePrinting=fpCheckPrintEndLine;
   128bc:	88 e1       	ldi	r24, 0x18	; 24
   128be:	49 ce       	rjmp	.-878    	; 0x12552 <FreePrinting+0x9c>
				}
			  }
          else {
			  CarriegeReturn();
   128c0:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
			  stFreePrinting=fpLoadOperatorName;
   128c4:	89 e1       	ldi	r24, 0x19	; 25
   128c6:	45 ce       	rjmp	.-886    	; 0x12552 <FreePrinting+0x9c>
			  }
	      break;
	 case fpCheckPrintEndLine:
	      if (IsBusyPrint==False){
   128c8:	80 91 b3 01 	lds	r24, 0x01B3
   128cc:	88 23       	and	r24, r24
   128ce:	09 f0       	breq	.+2      	; 0x128d2 <FreePrinting+0x41c>
   128d0:	08 c1       	rjmp	.+528    	; 0x12ae2 <FreePrinting+0x62c>
		      uart(_COM_PRINTER,1,strPrint[iSend]);
   128d2:	e0 91 ed 01 	lds	r30, 0x01ED
   128d6:	f0 91 ee 01 	lds	r31, 0x01EE
   128da:	e4 54       	subi	r30, 0x44	; 68
   128dc:	f7 4f       	sbci	r31, 0xF7	; 247
   128de:	61 e0       	ldi	r22, 0x01	; 1
   128e0:	40 81       	ld	r20, Z
   128e2:	0e 94 5b a8 	call	0x150b6	; 0x150b6 <uart>
		      iSend++;
   128e6:	80 91 ed 01 	lds	r24, 0x01ED
   128ea:	90 91 ee 01 	lds	r25, 0x01EE
   128ee:	01 96       	adiw	r24, 0x01	; 1
   128f0:	90 93 ee 01 	sts	0x01EE, r25
   128f4:	80 93 ed 01 	sts	0x01ED, r24
		      stFreePrinting=fpPrintEndLine;
   128f8:	87 e1       	ldi	r24, 0x17	; 23
   128fa:	f1 c0       	rjmp	.+482    	; 0x12ade <FreePrinting+0x628>
		      stFreePrinting=fpFinishFreePrinting;
			  }
	      break;

	 case fpLoadOperatorName:
		  eeprom_read_block((void*) &strOperatorName, (const void*) &DefOperatorName,18);
   128fc:	8e 01       	movw	r16, r28
   128fe:	0f 5f       	subi	r16, 0xFF	; 255
   12900:	1f 4f       	sbci	r17, 0xFF	; 255
   12902:	c8 01       	movw	r24, r16
   12904:	65 e1       	ldi	r22, 0x15	; 21
   12906:	70 e0       	ldi	r23, 0x00	; 0
   12908:	42 e1       	ldi	r20, 0x12	; 18
   1290a:	50 e0       	ldi	r21, 0x00	; 0
   1290c:	0e 94 b9 ac 	call	0x15972	; 0x15972 <__eerd_block_m128>
   12910:	c8 01       	movw	r24, r16
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   12912:	9e 01       	movw	r18, r28
   12914:	20 5f       	subi	r18, 0xF0	; 240
   12916:	3f 4f       	sbci	r19, 0xFF	; 255
	    Dest[i]=Source[IdxSource+i];
   12918:	01 96       	adiw	r24, 0x01	; 1
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   1291a:	82 17       	cp	r24, r18
   1291c:	93 07       	cpc	r25, r19
   1291e:	e1 f7       	brne	.-8      	; 0x12918 <FreePrinting+0x462>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
   12920:	18 8a       	std	Y+16, r1	; 0x10
	      break;

	 case fpLoadOperatorName:
		  eeprom_read_block((void*) &strOperatorName, (const void*) &DefOperatorName,18);
		  StrPosCopy(strOperatorName,strOperatorName,0,15);
		  sprintf_P(strPrint,PSTR("Operator: %s"),strOperatorName);
   12922:	00 d0       	rcall	.+0      	; 0x12924 <FreePrinting+0x46e>
   12924:	00 d0       	rcall	.+0      	; 0x12926 <FreePrinting+0x470>
   12926:	00 d0       	rcall	.+0      	; 0x12928 <FreePrinting+0x472>
   12928:	ed b7       	in	r30, 0x3d	; 61
   1292a:	fe b7       	in	r31, 0x3e	; 62
   1292c:	31 96       	adiw	r30, 0x01	; 1
   1292e:	0c eb       	ldi	r16, 0xBC	; 188
   12930:	18 e0       	ldi	r17, 0x08	; 8
   12932:	ad b7       	in	r26, 0x3d	; 61
   12934:	be b7       	in	r27, 0x3e	; 62
   12936:	12 96       	adiw	r26, 0x02	; 2
   12938:	1c 93       	st	X, r17
   1293a:	0e 93       	st	-X, r16
   1293c:	11 97       	sbiw	r26, 0x01	; 1
   1293e:	8a e2       	ldi	r24, 0x2A	; 42
   12940:	97 e0       	ldi	r25, 0x07	; 7
   12942:	93 83       	std	Z+3, r25	; 0x03
   12944:	82 83       	std	Z+2, r24	; 0x02
   12946:	ce 01       	movw	r24, r28
   12948:	01 96       	adiw	r24, 0x01	; 1
   1294a:	95 83       	std	Z+5, r25	; 0x05
   1294c:	84 83       	std	Z+4, r24	; 0x04
   1294e:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	      iSend=0;
   12952:	10 92 ee 01 	sts	0x01EE, r1
   12956:	10 92 ed 01 	sts	0x01ED, r1
		  iLoop=0;
   1295a:	10 92 ea 01 	sts	0x01EA, r1
   1295e:	10 92 e9 01 	sts	0x01E9, r1
		  LSend=strlen(strPrint);
   12962:	f8 01       	movw	r30, r16
   12964:	01 90       	ld	r0, Z+
   12966:	00 20       	and	r0, r0
   12968:	e9 f7       	brne	.-6      	; 0x12964 <FreePrinting+0x4ae>
   1296a:	8f 01       	movw	r16, r30
   1296c:	01 50       	subi	r16, 0x01	; 1
   1296e:	10 40       	sbci	r17, 0x00	; 0
   12970:	0c 5b       	subi	r16, 0xBC	; 188
   12972:	18 40       	sbci	r17, 0x08	; 8
   12974:	10 93 ec 01 	sts	0x01EC, r17
   12978:	00 93 eb 01 	sts	0x01EB, r16
		  stFreePrinting=fpPrintOperatorName;	
   1297c:	8a e1       	ldi	r24, 0x1A	; 26
   1297e:	80 93 25 01 	sts	0x0125, r24
   12982:	8d b7       	in	r24, 0x3d	; 61
   12984:	9e b7       	in	r25, 0x3e	; 62
   12986:	06 96       	adiw	r24, 0x06	; 6
   12988:	0f b6       	in	r0, 0x3f	; 63
   1298a:	f8 94       	cli
   1298c:	9e bf       	out	0x3e, r25	; 62
   1298e:	0f be       	out	0x3f, r0	; 63
   12990:	8d bf       	out	0x3d, r24	; 61
   12992:	2b c1       	rjmp	.+598    	; 0x12bea <FreePrinting+0x734>
	      break;
	 case fpPrintOperatorName:
		  if (iSend<LSend){
   12994:	20 91 ed 01 	lds	r18, 0x01ED
   12998:	30 91 ee 01 	lds	r19, 0x01EE
   1299c:	80 91 eb 01 	lds	r24, 0x01EB
   129a0:	90 91 ec 01 	lds	r25, 0x01EC
   129a4:	28 17       	cp	r18, r24
   129a6:	39 07       	cpc	r19, r25
   129a8:	68 f4       	brcc	.+26     	; 0x129c4 <FreePrinting+0x50e>
		      iLoop++;
   129aa:	80 91 e9 01 	lds	r24, 0x01E9
   129ae:	90 91 ea 01 	lds	r25, 0x01EA
   129b2:	01 96       	adiw	r24, 0x01	; 1
   129b4:	90 93 ea 01 	sts	0x01EA, r25
   129b8:	80 93 e9 01 	sts	0x01E9, r24
			  if((iLoop%PRINT_DELAY)==0){
				  TimPrintBusy=0;
   129bc:	10 92 b6 01 	sts	0x01B6, r1
				  stFreePrinting=fpCheckPrintOperatorName;
   129c0:	8b e1       	ldi	r24, 0x1B	; 27
   129c2:	c7 cd       	rjmp	.-1138   	; 0x12552 <FreePrinting+0x9c>
				}
			  }
          else {
			  CarriegeReturn();
   129c4:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
			  CarriegeReturn();
   129c8:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
			  stFreePrinting=fpInitFooter;
   129cc:	8b e0       	ldi	r24, 0x0B	; 11
   129ce:	c1 cd       	rjmp	.-1150   	; 0x12552 <FreePrinting+0x9c>
			  }
	      break;
	 case fpCheckPrintOperatorName:
	      if (IsBusyPrint==False){
   129d0:	80 91 b3 01 	lds	r24, 0x01B3
   129d4:	88 23       	and	r24, r24
   129d6:	09 f0       	breq	.+2      	; 0x129da <FreePrinting+0x524>
   129d8:	84 c0       	rjmp	.+264    	; 0x12ae2 <FreePrinting+0x62c>
		      uart(_COM_PRINTER,1,strPrint[iSend]);
   129da:	e0 91 ed 01 	lds	r30, 0x01ED
   129de:	f0 91 ee 01 	lds	r31, 0x01EE
   129e2:	e4 54       	subi	r30, 0x44	; 68
   129e4:	f7 4f       	sbci	r31, 0xF7	; 247
   129e6:	61 e0       	ldi	r22, 0x01	; 1
   129e8:	40 81       	ld	r20, Z
   129ea:	0e 94 5b a8 	call	0x150b6	; 0x150b6 <uart>
		      iSend++;
   129ee:	80 91 ed 01 	lds	r24, 0x01ED
   129f2:	90 91 ee 01 	lds	r25, 0x01EE
   129f6:	01 96       	adiw	r24, 0x01	; 1
   129f8:	90 93 ee 01 	sts	0x01EE, r25
   129fc:	80 93 ed 01 	sts	0x01ED, r24
		      stFreePrinting=fpPrintOperatorName;
   12a00:	8a e1       	ldi	r24, 0x1A	; 26
   12a02:	6d c0       	rjmp	.+218    	; 0x12ade <FreePrinting+0x628>
			  }
	      break;

     case fpInitFooter:
	      //uart_printf(0,1,PSTR("fpInitFooter"));
          if (((cmdPrint&0b01000000)>>6)==1){
   12a04:	80 91 b5 01 	lds	r24, 0x01B5
   12a08:	86 ff       	sbrs	r24, 6
   12a0a:	06 c0       	rjmp	.+12     	; 0x12a18 <FreePrinting+0x562>
		      stFreePrinting=fpLoadFooter;
   12a0c:	8c e0       	ldi	r24, 0x0C	; 12
   12a0e:	80 93 25 01 	sts	0x0125, r24
			  iFooter=0;
   12a12:	10 92 f3 01 	sts	0x01F3, r1
   12a16:	e9 c0       	rjmp	.+466    	; 0x12bea <FreePrinting+0x734>
			  }
		  else
	      if (((cmdPrint&0b01000000)>>6)==0) stFreePrinting=fpPaperCut;//fpInitScroll;	                
   12a18:	80 e1       	ldi	r24, 0x10	; 16
   12a1a:	9b cd       	rjmp	.-1226   	; 0x12552 <FreePrinting+0x9c>
	      break;
     case fpLoadFooter:
	 	  //uart_printf(0,1,PSTR("fpLoadFooter"));
          //Footer 1
	      eeprom_read_block((void*) &strPrint, (const void*) &DefHeaderFooter[6+iFooter], 40);
   12a1c:	60 91 f3 01 	lds	r22, 0x01F3
   12a20:	89 e2       	ldi	r24, 0x29	; 41
   12a22:	68 9f       	mul	r22, r24
   12a24:	b0 01       	movw	r22, r0
   12a26:	11 24       	eor	r1, r1
   12a28:	63 5e       	subi	r22, 0xE3	; 227
   12a2a:	7c 4f       	sbci	r23, 0xFC	; 252
   12a2c:	8c eb       	ldi	r24, 0xBC	; 188
   12a2e:	98 e0       	ldi	r25, 0x08	; 8
   12a30:	48 e2       	ldi	r20, 0x28	; 40
   12a32:	50 e0       	ldi	r21, 0x00	; 0
   12a34:	0e 94 b9 ac 	call	0x15972	; 0x15972 <__eerd_block_m128>
		  iFooter++;
   12a38:	80 91 f3 01 	lds	r24, 0x01F3
   12a3c:	8f 5f       	subi	r24, 0xFF	; 255
   12a3e:	80 93 f3 01 	sts	0x01F3, r24
		  if (iFooter<=4){
   12a42:	85 30       	cpi	r24, 0x05	; 5
   12a44:	90 f4       	brcc	.+36     	; 0x12a6a <FreePrinting+0x5b4>
		      if (SpaceOnly(strPrint)==True){
   12a46:	8c eb       	ldi	r24, 0xBC	; 188
   12a48:	98 e0       	ldi	r25, 0x08	; 8
   12a4a:	0e 94 c0 25 	call	0x4b80	; 0x4b80 <SpaceOnly>
   12a4e:	81 30       	cpi	r24, 0x01	; 1
   12a50:	11 f4       	brne	.+4      	; 0x12a56 <FreePrinting+0x5a0>
			      stFreePrinting=fpLoadFooter;
   12a52:	8c e0       	ldi	r24, 0x0C	; 12
   12a54:	7e cd       	rjmp	.-1284   	; 0x12552 <FreePrinting+0x9c>
				  }
			  else{
			      iSend=0;
   12a56:	10 92 ee 01 	sts	0x01EE, r1
   12a5a:	10 92 ed 01 	sts	0x01ED, r1
				  iLoop=0;
   12a5e:	10 92 ea 01 	sts	0x01EA, r1
   12a62:	10 92 e9 01 	sts	0x01E9, r1
				  stFreePrinting=fpPrintFooter;
   12a66:	8d e0       	ldi	r24, 0x0D	; 13
   12a68:	74 cd       	rjmp	.-1304   	; 0x12552 <FreePrinting+0x9c>
			      }
		  }else{
		    CarriegeReturn();
   12a6a:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
			iPrinted++;
   12a6e:	80 91 f5 01 	lds	r24, 0x01F5
   12a72:	8f 5f       	subi	r24, 0xFF	; 255
   12a74:	80 93 f5 01 	sts	0x01F5, r24

			//if (eeprom_read_byte(&DefPrinterType)==PT_CUSTOM_CUBE){
			    stFreePrinting=fpInitScroll;
   12a78:	8e e0       	ldi	r24, 0x0E	; 14
   12a7a:	6b cd       	rjmp	.-1322   	; 0x12552 <FreePrinting+0x9c>
			//}else stFreePrinting=fpPaperCut;

			}
	      break;
     case fpPrintFooter:
		  if (iSend<40){
   12a7c:	80 91 ed 01 	lds	r24, 0x01ED
   12a80:	90 91 ee 01 	lds	r25, 0x01EE
   12a84:	88 97       	sbiw	r24, 0x28	; 40
   12a86:	68 f4       	brcc	.+26     	; 0x12aa2 <FreePrinting+0x5ec>
		      iLoop++;
   12a88:	80 91 e9 01 	lds	r24, 0x01E9
   12a8c:	90 91 ea 01 	lds	r25, 0x01EA
   12a90:	01 96       	adiw	r24, 0x01	; 1
   12a92:	90 93 ea 01 	sts	0x01EA, r25
   12a96:	80 93 e9 01 	sts	0x01E9, r24
			  if((iLoop%PRINT_DELAY)==0){
		        //uart(_COM_PRINTER,1,strPrint[iSend]);
		        //iSend++;
				TimPrintBusy=0;
   12a9a:	10 92 b6 01 	sts	0x01B6, r1
				stFreePrinting=fpCheckPrintStatusFooter;
   12a9e:	84 e1       	ldi	r24, 0x14	; 20
   12aa0:	58 cd       	rjmp	.-1360   	; 0x12552 <FreePrinting+0x9c>
				}
			  }
          else {
		      stFreePrinting=fpLoadFooter;
   12aa2:	8c e0       	ldi	r24, 0x0C	; 12
   12aa4:	80 93 25 01 	sts	0x0125, r24
			  CarriegeReturn();
   12aa8:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
   12aac:	9e c0       	rjmp	.+316    	; 0x12bea <FreePrinting+0x734>
			  }
	      break;
     
	 case fpCheckPrintStatusFooter:
	      if (IsBusyPrint==False){
   12aae:	80 91 b3 01 	lds	r24, 0x01B3
   12ab2:	88 23       	and	r24, r24
   12ab4:	b1 f4       	brne	.+44     	; 0x12ae2 <FreePrinting+0x62c>
		      uart(_COM_PRINTER,1,strPrint[iSend]);
   12ab6:	e0 91 ed 01 	lds	r30, 0x01ED
   12aba:	f0 91 ee 01 	lds	r31, 0x01EE
   12abe:	e4 54       	subi	r30, 0x44	; 68
   12ac0:	f7 4f       	sbci	r31, 0xF7	; 247
   12ac2:	61 e0       	ldi	r22, 0x01	; 1
   12ac4:	40 81       	ld	r20, Z
   12ac6:	0e 94 5b a8 	call	0x150b6	; 0x150b6 <uart>
		      iSend++;
   12aca:	80 91 ed 01 	lds	r24, 0x01ED
   12ace:	90 91 ee 01 	lds	r25, 0x01EE
   12ad2:	01 96       	adiw	r24, 0x01	; 1
   12ad4:	90 93 ee 01 	sts	0x01EE, r25
   12ad8:	80 93 ed 01 	sts	0x01ED, r24
		      stFreePrinting=fpPrintFooter;
   12adc:	8d e0       	ldi	r24, 0x0D	; 13
   12ade:	80 93 25 01 	sts	0x0125, r24
		  }
		  if (TimPrintBusy>TIM_BUSY_PRINT){
   12ae2:	80 91 b6 01 	lds	r24, 0x01B6
   12ae6:	8b 30       	cpi	r24, 0x0B	; 11
   12ae8:	08 f4       	brcc	.+2      	; 0x12aec <FreePrinting+0x636>
   12aea:	7f c0       	rjmp	.+254    	; 0x12bea <FreePrinting+0x734>
		      IsPrintERROR=True;
   12aec:	81 e0       	ldi	r24, 0x01	; 1
   12aee:	80 93 b1 01 	sts	0x01B1, r24
		      stFreePrinting=fpFinishFreePrinting;
   12af2:	81 e1       	ldi	r24, 0x11	; 17
   12af4:	2e cd       	rjmp	.-1444   	; 0x12552 <FreePrinting+0x9c>
			  }
	      break;

     case fpInitScroll:
	      iScroll=0;
   12af6:	10 92 f0 01 	sts	0x01F0, r1
		  iSend=0;
   12afa:	10 92 ee 01 	sts	0x01EE, r1
   12afe:	10 92 ed 01 	sts	0x01ED, r1
		  if (iPrinted<PrintCopy)
   12b02:	90 91 f5 01 	lds	r25, 0x01F5
   12b06:	80 91 f2 01 	lds	r24, 0x01F2
   12b0a:	98 17       	cp	r25, r24
   12b0c:	28 f4       	brcc	.+10     	; 0x12b18 <FreePrinting+0x662>
		      nScroll=eeprom_read_byte(&DefPrintScrollSpace);
   12b0e:	82 e3       	ldi	r24, 0x32	; 50
   12b10:	90 e0       	ldi	r25, 0x00	; 0
   12b12:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
   12b16:	04 c0       	rjmp	.+8      	; 0x12b20 <FreePrinting+0x66a>
		  else if (iPrinted>=PrintCopy)
		  	  nScroll=eeprom_read_byte(&DefPrintScrollEnd);
   12b18:	81 e3       	ldi	r24, 0x31	; 49
   12b1a:	90 e0       	ldi	r25, 0x00	; 0
   12b1c:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
   12b20:	80 93 ef 01 	sts	0x01EF, r24

          stFreePrinting=fpScrollPaper;
   12b24:	8f e0       	ldi	r24, 0x0F	; 15
   12b26:	15 cd       	rjmp	.-1494   	; 0x12552 <FreePrinting+0x9c>
	      break;
     case fpScrollPaper:
	      if (iScroll>nScroll)stFreePrinting=fpPaperCut;
   12b28:	90 91 f0 01 	lds	r25, 0x01F0
   12b2c:	80 91 ef 01 	lds	r24, 0x01EF
   12b30:	89 17       	cp	r24, r25
   12b32:	18 f4       	brcc	.+6      	; 0x12b3a <FreePrinting+0x684>
   12b34:	80 e1       	ldi	r24, 0x10	; 16
   12b36:	80 93 25 01 	sts	0x0125, r24
		  iSend++;
   12b3a:	80 91 ed 01 	lds	r24, 0x01ED
   12b3e:	90 91 ee 01 	lds	r25, 0x01EE
   12b42:	01 96       	adiw	r24, 0x01	; 1
   12b44:	90 93 ee 01 	sts	0x01EE, r25
   12b48:	80 93 ed 01 	sts	0x01ED, r24
		  if (iSend%PRINT_DELAY==0){
		      CarriegeReturn();
   12b4c:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
			  iScroll++;
   12b50:	80 91 f0 01 	lds	r24, 0x01F0
   12b54:	8f 5f       	subi	r24, 0xFF	; 255
   12b56:	80 93 f0 01 	sts	0x01F0, r24
   12b5a:	47 c0       	rjmp	.+142    	; 0x12bea <FreePrinting+0x734>
			  }
	      break;
     case fpPaperCut:
		  //uart_printf(0,1,PSTR("fpPaperCut"));
		  //iPrinted++;
          if (iPrinted<PrintCopy){
   12b5c:	90 91 f5 01 	lds	r25, 0x01F5
   12b60:	80 91 f2 01 	lds	r24, 0x01F2
   12b64:	98 17       	cp	r25, r24
   12b66:	20 f4       	brcc	.+8      	; 0x12b70 <FreePrinting+0x6ba>
		      CarriegeReturn();
   12b68:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
              stFreePrinting=fpInitHeader;
   12b6c:	82 e0       	ldi	r24, 0x02	; 2
   12b6e:	07 c0       	rjmp	.+14     	; 0x12b7e <FreePrinting+0x6c8>
			  }
          else{
		      if (IFType==IT_SLAVE)sendMessage04();
   12b70:	80 91 00 01 	lds	r24, 0x0100
   12b74:	81 30       	cpi	r24, 0x01	; 1
   12b76:	11 f4       	brne	.+4      	; 0x12b7c <FreePrinting+0x6c6>
   12b78:	0e 94 57 92 	call	0x124ae	; 0x124ae <sendMessage04>
		      stFreePrinting=fpFinishFreePrinting;
   12b7c:	81 e1       	ldi	r24, 0x11	; 17
   12b7e:	80 93 25 01 	sts	0x0125, r24
			  }
          
		  if (((cmdPrint&0b00100000)>>5)==1){
   12b82:	80 91 b5 01 	lds	r24, 0x01B5
   12b86:	85 ff       	sbrs	r24, 5
   12b88:	30 c0       	rjmp	.+96     	; 0x12bea <FreePrinting+0x734>
		      if (iPrinted==0){
   12b8a:	80 91 f5 01 	lds	r24, 0x01F5
   12b8e:	88 23       	and	r24, r24
   12b90:	31 f4       	brne	.+12     	; 0x12b9e <FreePrinting+0x6e8>
			      CarriegeReturn();_delay_ms(50);
   12b92:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
   12b96:	84 ed       	ldi	r24, 0xD4	; 212
   12b98:	90 e3       	ldi	r25, 0x30	; 48
   12b9a:	01 97       	sbiw	r24, 0x01	; 1
   12b9c:	f1 f7       	brne	.-4      	; 0x12b9a <FreePrinting+0x6e4>
				 }
              //HFCS 0000 : Header, Footer, Copy , Scrool [Copy:16x max]
		      if ((iPrinted==PrintCopy)){
   12b9e:	90 91 f5 01 	lds	r25, 0x01F5
   12ba2:	80 91 f2 01 	lds	r24, 0x01F2
   12ba6:	98 17       	cp	r25, r24
   12ba8:	b1 f4       	brne	.+44     	; 0x12bd6 <FreePrinting+0x720>
			      // if (((cmdPrint&0b00010000)>>4)==1){
				  CarriegeReturn();_delay_ms(50);
   12baa:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
   12bae:	04 ed       	ldi	r16, 0xD4	; 212
   12bb0:	10 e3       	ldi	r17, 0x30	; 48
   12bb2:	c8 01       	movw	r24, r16
   12bb4:	01 97       	sbiw	r24, 0x01	; 1
   12bb6:	f1 f7       	brne	.-4      	; 0x12bb4 <FreePrinting+0x6fe>
				  CarriegeReturn();_delay_ms(50);
   12bb8:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
   12bbc:	c8 01       	movw	r24, r16
   12bbe:	01 97       	sbiw	r24, 0x01	; 1
   12bc0:	f1 f7       	brne	.-4      	; 0x12bbe <FreePrinting+0x708>
				  CarriegeReturn();_delay_ms(50);
   12bc2:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
   12bc6:	c8 01       	movw	r24, r16
   12bc8:	01 97       	sbiw	r24, 0x01	; 1
   12bca:	f1 f7       	brne	.-4      	; 0x12bc8 <FreePrinting+0x712>
				  CarriegeReturn();_delay_ms(50);
   12bcc:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
   12bd0:	c8 01       	movw	r24, r16
   12bd2:	01 97       	sbiw	r24, 0x01	; 1
   12bd4:	f1 f7       	brne	.-4      	; 0x12bd2 <FreePrinting+0x71c>
				   //}
				 }
		      PaperCut();
   12bd6:	0e 94 ba 45 	call	0x8b74	; 0x8b74 <PaperCut>
   12bda:	07 c0       	rjmp	.+14     	; 0x12bea <FreePrinting+0x734>
		   }
	      break;
     case fpFinishFreePrinting:
	 	  //uart_printf(0,1,PSTR("fpFinished"));
		  IsBusyFreePrinting=False;
   12bdc:	10 92 b4 01 	sts	0x01B4, r1
	      stFreePrinting=fpInit;
   12be0:	81 e0       	ldi	r24, 0x01	; 1
   12be2:	80 93 25 01 	sts	0x0125, r24
		  iPrinted=0;
   12be6:	10 92 f5 01 	sts	0x01F5, r1
	      break;
	 }//EndCase
}
   12bea:	64 96       	adiw	r28, 0x14	; 20
   12bec:	0f b6       	in	r0, 0x3f	; 63
   12bee:	f8 94       	cli
   12bf0:	de bf       	out	0x3e, r29	; 62
   12bf2:	0f be       	out	0x3f, r0	; 63
   12bf4:	cd bf       	out	0x3d, r28	; 61
   12bf6:	cf 91       	pop	r28
   12bf8:	df 91       	pop	r29
   12bfa:	1f 91       	pop	r17
   12bfc:	0f 91       	pop	r16
   12bfe:	08 95       	ret

00012c00 <PrintIdle>:
		//Font Setting: 1D 21 01
		uart(_COM_PRINTER, 1, 0x1D);uart(_COM_PRINTER, 1, 0x21);uart(_COM_PRINTER, 1, 0x00);   
		}
}

void PrintIdle(){
   12c00:	ef 92       	push	r14
   12c02:	ff 92       	push	r15
   12c04:	0f 93       	push	r16
   12c06:	1f 93       	push	r17
   12c08:	df 93       	push	r29
   12c0a:	cf 93       	push	r28
   12c0c:	cd b7       	in	r28, 0x3d	; 61
   12c0e:	de b7       	in	r29, 0x3e	; 62
   12c10:	64 97       	sbiw	r28, 0x14	; 20
   12c12:	0f b6       	in	r0, 0x3f	; 63
   12c14:	f8 94       	cli
   12c16:	de bf       	out	0x3e, r29	; 62
   12c18:	0f be       	out	0x3f, r0	; 63
   12c1a:	cd bf       	out	0x3d, r28	; 61
		uart_print(1,1,strSend);
	 }
	 #endif

     //Normalize PrintIdleState
     if ((IsPrinting==True)&&(stPrintIdle!=piIdle)){
   12c1c:	80 91 ac 01 	lds	r24, 0x01AC
   12c20:	81 30       	cpi	r24, 0x01	; 1
   12c22:	31 f4       	brne	.+12     	; 0x12c30 <PrintIdle+0x30>
   12c24:	80 91 06 02 	lds	r24, 0x0206
   12c28:	88 23       	and	r24, r24
   12c2a:	11 f0       	breq	.+4      	; 0x12c30 <PrintIdle+0x30>
	     stPrintIdle=piIdle;
   12c2c:	10 92 06 02 	sts	0x0206, r1
	 }

     switch(stPrintIdle){
   12c30:	80 91 06 02 	lds	r24, 0x0206
   12c34:	e8 2f       	mov	r30, r24
   12c36:	f0 e0       	ldi	r31, 0x00	; 0
   12c38:	e8 31       	cpi	r30, 0x18	; 24
   12c3a:	f1 05       	cpc	r31, r1
   12c3c:	08 f0       	brcs	.+2      	; 0x12c40 <PrintIdle+0x40>
   12c3e:	5c c7       	rjmp	.+3768   	; 0x13af8 <PrintIdle+0xef8>
   12c40:	e8 51       	subi	r30, 0x18	; 24
   12c42:	ff 4f       	sbci	r31, 0xFF	; 255
   12c44:	ee 0f       	add	r30, r30
   12c46:	ff 1f       	adc	r31, r31
   12c48:	05 90       	lpm	r0, Z+
   12c4a:	f4 91       	lpm	r31, Z+
   12c4c:	e0 2d       	mov	r30, r0
   12c4e:	09 94       	ijmp
	 case piIdle:
	      if (IsPrinting==True){
   12c50:	80 91 ac 01 	lds	r24, 0x01AC
   12c54:	81 30       	cpi	r24, 0x01	; 1
   12c56:	09 f0       	breq	.+2      	; 0x12c5a <PrintIdle+0x5a>
   12c58:	4f c7       	rjmp	.+3742   	; 0x13af8 <PrintIdle+0xef8>
		      IsPrinting=False;
   12c5a:	10 92 ac 01 	sts	0x01AC, r1
			  IsBusyIdlePrinting=True;
   12c5e:	80 93 b2 01 	sts	0x01B2, r24
			  IsBusyPrint=False;
   12c62:	10 92 b3 01 	sts	0x01B3, r1
			  iPrinted=0;
   12c66:	10 92 f8 01 	sts	0x01F8, r1
			  PrintCopy=0;
   12c6a:	10 92 f7 01 	sts	0x01F7, r1
		      stPrintIdle=piInit;
   12c6e:	80 93 06 02 	sts	0x0206, r24
			  InitPrinter();
   12c72:	0e 94 2a 45 	call	0x8a54	; 0x8a54 <InitPrinter>
			  IsSignedField=False;
   12c76:	10 92 ff 01 	sts	0x01FF, r1
   12c7a:	3e c7       	rjmp	.+3708   	; 0x13af8 <PrintIdle+0xef8>
			  }
	      break;
	 case piInit:
	      iHeader=0;
   12c7c:	10 92 05 02 	sts	0x0205, r1
		  CarriegeReturn();
   12c80:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
   12c84:	1b c0       	rjmp	.+54     	; 0x12cbc <PrintIdle+0xbc>
		  stPrintIdle=piLoadHeader;
	      break;
     case piLoadHeader:
	      eeprom_read_block((void*) &strPrint, (const void*) &DefHeaderFooter[iHeader], sizeof(DefHeaderFooter[iHeader]));
   12c86:	60 91 05 02 	lds	r22, 0x0205
   12c8a:	89 e2       	ldi	r24, 0x29	; 41
   12c8c:	68 9f       	mul	r22, r24
   12c8e:	b0 01       	movw	r22, r0
   12c90:	11 24       	eor	r1, r1
   12c92:	69 5d       	subi	r22, 0xD9	; 217
   12c94:	7d 4f       	sbci	r23, 0xFD	; 253
   12c96:	8c eb       	ldi	r24, 0xBC	; 188
   12c98:	98 e0       	ldi	r25, 0x08	; 8
   12c9a:	49 e2       	ldi	r20, 0x29	; 41
   12c9c:	50 e0       	ldi	r21, 0x00	; 0
   12c9e:	0e 94 b9 ac 	call	0x15972	; 0x15972 <__eerd_block_m128>
		  iHeader++;
   12ca2:	80 91 05 02 	lds	r24, 0x0205
   12ca6:	8f 5f       	subi	r24, 0xFF	; 255
   12ca8:	80 93 05 02 	sts	0x0205, r24
		  if (iHeader<6){
   12cac:	86 30       	cpi	r24, 0x06	; 6
   12cae:	00 f5       	brcc	.+64     	; 0x12cf0 <PrintIdle+0xf0>
		      if (SpaceOnly(strPrint)==True){
   12cb0:	8c eb       	ldi	r24, 0xBC	; 188
   12cb2:	98 e0       	ldi	r25, 0x08	; 8
   12cb4:	0e 94 c0 25 	call	0x4b80	; 0x4b80 <SpaceOnly>
   12cb8:	81 30       	cpi	r24, 0x01	; 1
   12cba:	11 f4       	brne	.+4      	; 0x12cc0 <PrintIdle+0xc0>
			      stPrintIdle=piLoadHeader;
   12cbc:	82 e0       	ldi	r24, 0x02	; 2
   12cbe:	f1 c6       	rjmp	.+3554   	; 0x13aa2 <PrintIdle+0xea2>
				  }	      
			  else{
			      stPrintIdle=piPrintHeader;
   12cc0:	83 e0       	ldi	r24, 0x03	; 3
   12cc2:	80 93 06 02 	sts	0x0206, r24
			      iSend=0;
   12cc6:	10 92 fe 01 	sts	0x01FE, r1
   12cca:	10 92 fd 01 	sts	0x01FD, r1
				  iLoop=0;
   12cce:	10 92 fa 01 	sts	0x01FA, r1
   12cd2:	10 92 f9 01 	sts	0x01F9, r1
				  //PrintDoubleHeight on 1st Header
				  if (iHeader==1) PrintDoubleHeight();
   12cd6:	80 91 05 02 	lds	r24, 0x0205
   12cda:	81 30       	cpi	r24, 0x01	; 1
   12cdc:	19 f4       	brne	.+6      	; 0x12ce4 <PrintIdle+0xe4>
   12cde:	0e 94 a4 45 	call	0x8b48	; 0x8b48 <PrintDoubleHeight>
   12ce2:	0a c7       	rjmp	.+3604   	; 0x13af8 <PrintIdle+0xef8>
				  else 
				  if (iHeader==2) PrintNormalHeight();
   12ce4:	82 30       	cpi	r24, 0x02	; 2
   12ce6:	09 f0       	breq	.+2      	; 0x12cea <PrintIdle+0xea>
   12ce8:	07 c7       	rjmp	.+3598   	; 0x13af8 <PrintIdle+0xef8>
   12cea:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <PrintNormalHeight>
   12cee:	04 c7       	rjmp	.+3592   	; 0x13af8 <PrintIdle+0xef8>
			   }
		  }else{stPrintIdle=piInitDuplicate; //stPrintIdle=piInitMessage;//
   12cf0:	84 e0       	ldi	r24, 0x04	; 4
   12cf2:	d7 c6       	rjmp	.+3502   	; 0x13aa2 <PrintIdle+0xea2>
		        //else stPrintIdle=piInitMessage;
		  }
	      break;
	 case piPrintHeader:
		  if (iSend<40){
   12cf4:	80 91 fd 01 	lds	r24, 0x01FD
   12cf8:	90 91 fe 01 	lds	r25, 0x01FE
   12cfc:	88 97       	sbiw	r24, 0x28	; 40
   12cfe:	68 f4       	brcc	.+26     	; 0x12d1a <PrintIdle+0x11a>
		      iLoop++;
   12d00:	80 91 f9 01 	lds	r24, 0x01F9
   12d04:	90 91 fa 01 	lds	r25, 0x01FA
   12d08:	01 96       	adiw	r24, 0x01	; 1
   12d0a:	90 93 fa 01 	sts	0x01FA, r25
   12d0e:	80 93 f9 01 	sts	0x01F9, r24
			  if ((iLoop%PRINT_DELAY)==0){
				 TimPrintBusy=0;
   12d12:	10 92 b6 01 	sts	0x01B6, r1
				 stPrintIdle=piCheckPrintStatusHeader;
   12d16:	8b e0       	ldi	r24, 0x0B	; 11
   12d18:	c4 c6       	rjmp	.+3464   	; 0x13aa2 <PrintIdle+0xea2>
				 }
			  }
          else{ 
		     stPrintIdle=piLoadHeader;
   12d1a:	82 e0       	ldi	r24, 0x02	; 2
   12d1c:	5a c6       	rjmp	.+3252   	; 0x139d2 <PrintIdle+0xdd2>
			 CarriegeReturn();
		  }
	      break;
     case piCheckPrintStatusHeader:
	      if (IsBusyPrint==False){
   12d1e:	80 91 b3 01 	lds	r24, 0x01B3
   12d22:	88 23       	and	r24, r24
   12d24:	09 f0       	breq	.+2      	; 0x12d28 <PrintIdle+0x128>
   12d26:	b5 c6       	rjmp	.+3434   	; 0x13a92 <PrintIdle+0xe92>
		      uart(_COM_PRINTER,1,strPrint[iSend]);
   12d28:	e0 91 fd 01 	lds	r30, 0x01FD
   12d2c:	f0 91 fe 01 	lds	r31, 0x01FE
   12d30:	e4 54       	subi	r30, 0x44	; 68
   12d32:	f7 4f       	sbci	r31, 0xF7	; 247
   12d34:	61 e0       	ldi	r22, 0x01	; 1
   12d36:	40 81       	ld	r20, Z
   12d38:	0e 94 5b a8 	call	0x150b6	; 0x150b6 <uart>
		      iSend++;
   12d3c:	80 91 fd 01 	lds	r24, 0x01FD
   12d40:	90 91 fe 01 	lds	r25, 0x01FE
   12d44:	01 96       	adiw	r24, 0x01	; 1
   12d46:	90 93 fe 01 	sts	0x01FE, r25
   12d4a:	80 93 fd 01 	sts	0x01FD, r24
		      stPrintIdle=piPrintHeader;
   12d4e:	83 e0       	ldi	r24, 0x03	; 3
   12d50:	9e c6       	rjmp	.+3388   	; 0x13a8e <PrintIdle+0xe8e>
		      stPrintIdle=piFinishPrintIdle;
			  }
	      break;

     case piInitDuplicate:
          if ((iPrinted>0)||(IsReprintTicket==True)){
   12d52:	80 91 f8 01 	lds	r24, 0x01F8
   12d56:	88 23       	and	r24, r24
   12d58:	21 f4       	brne	.+8      	; 0x12d62 <PrintIdle+0x162>
   12d5a:	80 91 7f 01 	lds	r24, 0x017F
   12d5e:	81 30       	cpi	r24, 0x01	; 1
   12d60:	a9 f4       	brne	.+42     	; 0x12d8c <PrintIdle+0x18c>
		      IsReprintTicket=False;
   12d62:	10 92 7f 01 	sts	0x017F, r1
		      CarriegeReturn(); 
   12d66:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
		      sprintf_P(strPrint,PSTR("             DUPLICATE COPY        "));
   12d6a:	00 d0       	rcall	.+0      	; 0x12d6c <PrintIdle+0x16c>
   12d6c:	00 d0       	rcall	.+0      	; 0x12d6e <PrintIdle+0x16e>
   12d6e:	8c eb       	ldi	r24, 0xBC	; 188
   12d70:	98 e0       	ldi	r25, 0x08	; 8
   12d72:	ad b7       	in	r26, 0x3d	; 61
   12d74:	be b7       	in	r27, 0x3e	; 62
   12d76:	12 96       	adiw	r26, 0x02	; 2
   12d78:	9c 93       	st	X, r25
   12d7a:	8e 93       	st	-X, r24
   12d7c:	11 97       	sbiw	r26, 0x01	; 1
   12d7e:	8a e7       	ldi	r24, 0x7A	; 122
   12d80:	9b e0       	ldi	r25, 0x0B	; 11
   12d82:	14 96       	adiw	r26, 0x04	; 4
   12d84:	9c 93       	st	X, r25
   12d86:	8e 93       	st	-X, r24
   12d88:	13 97       	sbiw	r26, 0x03	; 3
   12d8a:	0c c0       	rjmp	.+24     	; 0x12da4 <PrintIdle+0x1a4>
		      }
          else{           sprintf_P(strPrint,PSTR(" "));
   12d8c:	00 d0       	rcall	.+0      	; 0x12d8e <PrintIdle+0x18e>
   12d8e:	00 d0       	rcall	.+0      	; 0x12d90 <PrintIdle+0x190>
   12d90:	8c eb       	ldi	r24, 0xBC	; 188
   12d92:	98 e0       	ldi	r25, 0x08	; 8
   12d94:	ed b7       	in	r30, 0x3d	; 61
   12d96:	fe b7       	in	r31, 0x3e	; 62
   12d98:	92 83       	std	Z+2, r25	; 0x02
   12d9a:	81 83       	std	Z+1, r24	; 0x01
   12d9c:	88 e7       	ldi	r24, 0x78	; 120
   12d9e:	9b e0       	ldi	r25, 0x0B	; 11
   12da0:	94 83       	std	Z+4, r25	; 0x04
   12da2:	83 83       	std	Z+3, r24	; 0x03
   12da4:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
   12da8:	0f 90       	pop	r0
   12daa:	0f 90       	pop	r0
   12dac:	0f 90       	pop	r0
   12dae:	0f 90       	pop	r0
		      }
		  iSend=0;
   12db0:	10 92 fe 01 	sts	0x01FE, r1
   12db4:	10 92 fd 01 	sts	0x01FD, r1
		  iLoop=0;
   12db8:	10 92 fa 01 	sts	0x01FA, r1
   12dbc:	10 92 f9 01 	sts	0x01F9, r1
		  LSend=strlen(strPrint);
   12dc0:	ec eb       	ldi	r30, 0xBC	; 188
   12dc2:	f8 e0       	ldi	r31, 0x08	; 8
   12dc4:	01 90       	ld	r0, Z+
   12dc6:	00 20       	and	r0, r0
   12dc8:	e9 f7       	brne	.-6      	; 0x12dc4 <PrintIdle+0x1c4>
   12dca:	31 97       	sbiw	r30, 0x01	; 1
   12dcc:	ec 5b       	subi	r30, 0xBC	; 188
   12dce:	f8 40       	sbci	r31, 0x08	; 8
   12dd0:	f0 93 fc 01 	sts	0x01FC, r31
   12dd4:	e0 93 fb 01 	sts	0x01FB, r30
          stPrintIdle=piPrintDuplicate; 
   12dd8:	85 e0       	ldi	r24, 0x05	; 5
   12dda:	63 c6       	rjmp	.+3270   	; 0x13aa2 <PrintIdle+0xea2>
	      break;
     case piPrintDuplicate:
		  if (iSend<LSend){
   12ddc:	20 91 fd 01 	lds	r18, 0x01FD
   12de0:	30 91 fe 01 	lds	r19, 0x01FE
   12de4:	80 91 fb 01 	lds	r24, 0x01FB
   12de8:	90 91 fc 01 	lds	r25, 0x01FC
   12dec:	28 17       	cp	r18, r24
   12dee:	39 07       	cpc	r19, r25
   12df0:	68 f4       	brcc	.+26     	; 0x12e0c <PrintIdle+0x20c>
		      iLoop++;
   12df2:	80 91 f9 01 	lds	r24, 0x01F9
   12df6:	90 91 fa 01 	lds	r25, 0x01FA
   12dfa:	01 96       	adiw	r24, 0x01	; 1
   12dfc:	90 93 fa 01 	sts	0x01FA, r25
   12e00:	80 93 f9 01 	sts	0x01F9, r24
			  if((iLoop%PRINT_DELAY)==0){
				 TimPrintBusy=0;
   12e04:	10 92 b6 01 	sts	0x01B6, r1
                 stPrintIdle=piCheckPrintStatusDuplicate;
   12e08:	86 e0       	ldi	r24, 0x06	; 6
   12e0a:	4b c6       	rjmp	.+3222   	; 0x13aa2 <PrintIdle+0xea2>
				 }
			  }
          else {
		     iSend=0;
   12e0c:	10 92 fe 01 	sts	0x01FE, r1
   12e10:	10 92 fd 01 	sts	0x01FD, r1
		     stPrintIdle=piInitMessage;
   12e14:	87 e0       	ldi	r24, 0x07	; 7
   12e16:	45 c6       	rjmp	.+3210   	; 0x13aa2 <PrintIdle+0xea2>
			 }
	      break;
     case piCheckPrintStatusDuplicate:
	      if (IsBusyPrint==False){
   12e18:	80 91 b3 01 	lds	r24, 0x01B3
   12e1c:	88 23       	and	r24, r24
   12e1e:	09 f0       	breq	.+2      	; 0x12e22 <PrintIdle+0x222>
   12e20:	38 c6       	rjmp	.+3184   	; 0x13a92 <PrintIdle+0xe92>
		      uart(_COM_PRINTER,1,strPrint[iSend]);
   12e22:	e0 91 fd 01 	lds	r30, 0x01FD
   12e26:	f0 91 fe 01 	lds	r31, 0x01FE
   12e2a:	e4 54       	subi	r30, 0x44	; 68
   12e2c:	f7 4f       	sbci	r31, 0xF7	; 247
   12e2e:	61 e0       	ldi	r22, 0x01	; 1
   12e30:	40 81       	ld	r20, Z
   12e32:	0e 94 5b a8 	call	0x150b6	; 0x150b6 <uart>
   12e36:	84 ec       	ldi	r24, 0xC4	; 196
   12e38:	99 e0       	ldi	r25, 0x09	; 9
   12e3a:	01 97       	sbiw	r24, 0x01	; 1
   12e3c:	f1 f7       	brne	.-4      	; 0x12e3a <PrintIdle+0x23a>
			  _delay_ms(10);
		      iSend++;
   12e3e:	80 91 fd 01 	lds	r24, 0x01FD
   12e42:	90 91 fe 01 	lds	r25, 0x01FE
   12e46:	01 96       	adiw	r24, 0x01	; 1
   12e48:	90 93 fe 01 	sts	0x01FE, r25
   12e4c:	80 93 fd 01 	sts	0x01FD, r24
		      stPrintIdle=piPrintDuplicate;
   12e50:	85 e0       	ldi	r24, 0x05	; 5
   12e52:	1d c6       	rjmp	.+3130   	; 0x13a8e <PrintIdle+0xe8e>
		      stPrintIdle=piFinishPrintIdle;
			  }
	      break;

     case piInitMessage:
	      iSend=0;iLoop=0;
   12e54:	10 92 fe 01 	sts	0x01FE, r1
   12e58:	10 92 fd 01 	sts	0x01FD, r1
   12e5c:	10 92 fa 01 	sts	0x01FA, r1
   12e60:	10 92 f9 01 	sts	0x01F9, r1
		  iMessage=0;
   12e64:	10 92 01 02 	sts	0x0201, r1
		  switch(MOPType){
   12e68:	80 91 b8 01 	lds	r24, 0x01B8
   12e6c:	83 30       	cpi	r24, 0x03	; 3
   12e6e:	81 f0       	breq	.+32     	; 0x12e90 <PrintIdle+0x290>
   12e70:	84 30       	cpi	r24, 0x04	; 4
   12e72:	28 f4       	brcc	.+10     	; 0x12e7e <PrintIdle+0x27e>
   12e74:	81 30       	cpi	r24, 0x01	; 1
   12e76:	61 f0       	breq	.+24     	; 0x12e90 <PrintIdle+0x290>
   12e78:	82 30       	cpi	r24, 0x02	; 2
   12e7a:	40 f4       	brcc	.+16     	; 0x12e8c <PrintIdle+0x28c>
   12e7c:	10 c0       	rjmp	.+32     	; 0x12e9e <PrintIdle+0x29e>
   12e7e:	88 30       	cpi	r24, 0x08	; 8
   12e80:	49 f0       	breq	.+18     	; 0x12e94 <PrintIdle+0x294>
   12e82:	89 30       	cpi	r24, 0x09	; 9
   12e84:	61 f0       	breq	.+24     	; 0x12e9e <PrintIdle+0x29e>
   12e86:	87 30       	cpi	r24, 0x07	; 7
   12e88:	51 f4       	brne	.+20     	; 0x12e9e <PrintIdle+0x29e>
   12e8a:	02 c0       	rjmp	.+4      	; 0x12e90 <PrintIdle+0x290>
		  case MOP_CASH:
		       MessageLine=10;
			   PrintCopy=1;
		       break;
          case MOP_CREDIT_CARD:
		       MessageLine=10;
   12e8c:	8a e0       	ldi	r24, 0x0A	; 10
   12e8e:	03 c0       	rjmp	.+6      	; 0x12e96 <PrintIdle+0x296>
          case MOP_LOCAL_ACCOUNT:
		       MessageLine=20;
			   PrintCopy=2;
		       break;
          case MOP_VOUCHER:
		       MessageLine=20;
   12e90:	84 e1       	ldi	r24, 0x14	; 20
   12e92:	01 c0       	rjmp	.+2      	; 0x12e96 <PrintIdle+0x296>
			   PrintCopy=2;
		       break;
          case MOP_PUMP_TEST:
		       MessageLine=12;
   12e94:	8c e0       	ldi	r24, 0x0C	; 12
   12e96:	80 93 00 02 	sts	0x0200, r24
			   PrintCopy=2;
   12e9a:	82 e0       	ldi	r24, 0x02	; 2
   12e9c:	04 c0       	rjmp	.+8      	; 0x12ea6 <PrintIdle+0x2a6>
          case MOP_VOID_CARD:
		       MessageLine=10;
			   PrintCopy=1;
		       break;          
          default:
		       MessageLine=10;
   12e9e:	8a e0       	ldi	r24, 0x0A	; 10
   12ea0:	80 93 00 02 	sts	0x0200, r24
			   PrintCopy=1;
   12ea4:	81 e0       	ldi	r24, 0x01	; 1
   12ea6:	80 93 f7 01 	sts	0x01F7, r24
		       break; 
		  }
		  //LoyaltyDetection
          if ((strlen(strLoyCardID)>0)&&(SpaceOnly(strLoyCardID)==False)){
   12eaa:	80 91 e7 02 	lds	r24, 0x02E7
   12eae:	88 23       	and	r24, r24
   12eb0:	49 f0       	breq	.+18     	; 0x12ec4 <PrintIdle+0x2c4>
   12eb2:	87 ee       	ldi	r24, 0xE7	; 231
   12eb4:	92 e0       	ldi	r25, 0x02	; 2
   12eb6:	0e 94 c0 25 	call	0x4b80	; 0x4b80 <SpaceOnly>
   12eba:	88 23       	and	r24, r24
   12ebc:	19 f4       	brne	.+6      	; 0x12ec4 <PrintIdle+0x2c4>
		       MessageLine=33;
   12ebe:	81 e2       	ldi	r24, 0x21	; 33
   12ec0:	80 93 00 02 	sts	0x0200, r24
		  }
          //stPrintIdle=piLoadMessage;
		  stPrintIdle=piFormatingMessage;
   12ec4:	88 e0       	ldi	r24, 0x08	; 8
   12ec6:	ed c5       	rjmp	.+3034   	; 0x13aa2 <PrintIdle+0xea2>
	      break;
     case piFormatingMessage:
	      if (iPrinted==0){
   12ec8:	80 91 f8 01 	lds	r24, 0x01F8
   12ecc:	88 23       	and	r24, r24
   12ece:	09 f0       	breq	.+2      	; 0x12ed2 <PrintIdle+0x2d2>
   12ed0:	99 c4       	rjmp	.+2354   	; 0x13804 <PrintIdle+0xc04>

		      FormatDate(DATE_LONG_YEAR,strDate);
   12ed2:	6e e6       	ldi	r22, 0x6E	; 110
   12ed4:	77 e0       	ldi	r23, 0x07	; 7
   12ed6:	0e 94 8e 26 	call	0x4d1c	; 0x4d1c <FormatDate>
              RemZeroLead(strIslandID);
   12eda:	87 ef       	ldi	r24, 0xF7	; 247
   12edc:	98 e0       	ldi	r25, 0x08	; 8
   12ede:	0e 94 df 26 	call	0x4dbe	; 0x4dbe <RemZeroLead>
			  RemZeroLead(strFIP_ID);
   12ee2:	89 eb       	ldi	r24, 0xB9	; 185
   12ee4:	97 e0       	ldi	r25, 0x07	; 7
   12ee6:	0e 94 df 26 	call	0x4dbe	; 0x4dbe <RemZeroLead>
		      RemZeroLead(strPrice);              
   12eea:	8e e9       	ldi	r24, 0x9E	; 158
   12eec:	95 e0       	ldi	r25, 0x05	; 5
   12eee:	0e 94 df 26 	call	0x4dbe	; 0x4dbe <RemZeroLead>
              if (IFType==IT_SLAVE)
   12ef2:	80 91 00 01 	lds	r24, 0x0100
   12ef6:	81 30       	cpi	r24, 0x01	; 1
   12ef8:	21 f4       	brne	.+8      	; 0x12f02 <PrintIdle+0x302>
			      RemZeroLead(strVolume);
   12efa:	85 e7       	ldi	r24, 0x75	; 117
   12efc:	93 e0       	ldi	r25, 0x03	; 3
   12efe:	0e 94 df 26 	call	0x4dbe	; 0x4dbe <RemZeroLead>
              RemZeroLead(strAmount);
   12f02:	83 eb       	ldi	r24, 0xB3	; 179
   12f04:	9b e0       	ldi	r25, 0x0B	; 11
   12f06:	0e 94 df 26 	call	0x4dbe	; 0x4dbe <RemZeroLead>

			  RemDecimal(strPrice);
   12f0a:	8e e9       	ldi	r24, 0x9E	; 158
   12f0c:	95 e0       	ldi	r25, 0x05	; 5
   12f0e:	0e 94 dd 25 	call	0x4bba	; 0x4bba <RemDecimal>
			  RemDecimal(strAmount);
   12f12:	83 eb       	ldi	r24, 0xB3	; 179
   12f14:	9b e0       	ldi	r25, 0x0B	; 11
   12f16:	0e 94 dd 25 	call	0x4bba	; 0x4bba <RemDecimal>
	  
			  FormatCurrency(strPrice);
   12f1a:	8e e9       	ldi	r24, 0x9E	; 158
   12f1c:	95 e0       	ldi	r25, 0x05	; 5
   12f1e:	0e 94 ad 34 	call	0x695a	; 0x695a <FormatCurrency>
			  FormatCurrency(strAmount);
   12f22:	83 eb       	ldi	r24, 0xB3	; 179
   12f24:	9b e0       	ldi	r25, 0x0B	; 11
   12f26:	0e 94 ad 34 	call	0x695a	; 0x695a <FormatCurrency>
              if (IFType==IT_SLAVE){
   12f2a:	80 91 00 01 	lds	r24, 0x0100
   12f2e:	81 30       	cpi	r24, 0x01	; 1
   12f30:	09 f0       	breq	.+2      	; 0x12f34 <PrintIdle+0x334>
   12f32:	68 c4       	rjmp	.+2256   	; 0x13804 <PrintIdle+0xc04>
		          RemSpaceLag(strCardID);
   12f34:	89 e8       	ldi	r24, 0x89	; 137
   12f36:	9b e0       	ldi	r25, 0x0B	; 11
   12f38:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <RemSpaceLag>
		          RemSpaceLag(strCardHolder);
   12f3c:	84 e2       	ldi	r24, 0x24	; 36
   12f3e:	93 e0       	ldi	r25, 0x03	; 3
   12f40:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <RemSpaceLag>
		          RemSpaceLag(strMOPName);
   12f44:	8d e7       	ldi	r24, 0x7D	; 125
   12f46:	95 e0       	ldi	r25, 0x05	; 5
   12f48:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <RemSpaceLag>
		          RemSpaceLag(strLoyCardHolder);
   12f4c:	84 ec       	ldi	r24, 0xC4	; 196
   12f4e:	92 e0       	ldi	r25, 0x02	; 2
   12f50:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <RemSpaceLag>
		          RemSpaceLag(strCorporateID);
   12f54:	8a e0       	ldi	r24, 0x0A	; 10
   12f56:	9c e0       	ldi	r25, 0x0C	; 12
   12f58:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <RemSpaceLag>
		          RemSpaceLag(strCorporateName);
   12f5c:	8d ec       	ldi	r24, 0xCD	; 205
   12f5e:	93 e0       	ldi	r25, 0x03	; 3
   12f60:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <RemSpaceLag>
		          RemSpaceLag(strLoyRedeemPoints);
   12f64:	8a e9       	ldi	r24, 0x9A	; 154
   12f66:	93 e0       	ldi	r25, 0x03	; 3
   12f68:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <RemSpaceLag>
		          RemSpaceLag(strLoyCurrMonConsumeV);
   12f6c:	8d ee       	ldi	r24, 0xED	; 237
   12f6e:	9b e0       	ldi	r25, 0x0B	; 11
   12f70:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <RemSpaceLag>
				  RemSpaceLag(strLoyCurrMonConsumeA);
   12f74:	8e e7       	ldi	r24, 0x7E	; 126
   12f76:	93 e0       	ldi	r25, 0x03	; 3
   12f78:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <RemSpaceLag>
		          FormatCurrency(strLoyCurrMonConsumeV);              
   12f7c:	8d ee       	ldi	r24, 0xED	; 237
   12f7e:	9b e0       	ldi	r25, 0x0B	; 11
   12f80:	0e 94 ad 34 	call	0x695a	; 0x695a <FormatCurrency>
		          FormatCurrency(strLoyCurrMonConsumeA);
   12f84:	8e e7       	ldi	r24, 0x7E	; 126
   12f86:	93 e0       	ldi	r25, 0x03	; 3
   12f88:	0e 94 ad 34 	call	0x695a	; 0x695a <FormatCurrency>
   12f8c:	3b c4       	rjmp	.+2166   	; 0x13804 <PrintIdle+0xc04>
			   }
		  }
          stPrintIdle=piLoadMessage;
	      break;
     case piLoadMessage:
	      switch(iMessage){
   12f8e:	80 91 01 02 	lds	r24, 0x0201
   12f92:	e8 2f       	mov	r30, r24
   12f94:	f0 e0       	ldi	r31, 0x00	; 0
   12f96:	e5 32       	cpi	r30, 0x25	; 37
   12f98:	f1 05       	cpc	r31, r1
   12f9a:	08 f0       	brcs	.+2      	; 0x12f9e <PrintIdle+0x39e>
   12f9c:	f6 c3       	rjmp	.+2028   	; 0x1378a <PrintIdle+0xb8a>
   12f9e:	e0 50       	subi	r30, 0x00	; 0
   12fa0:	ff 4f       	sbci	r31, 0xFF	; 255
   12fa2:	0c eb       	ldi	r16, 0xBC	; 188
   12fa4:	18 e0       	ldi	r17, 0x08	; 8
   12fa6:	ee 0f       	add	r30, r30
   12fa8:	ff 1f       	adc	r31, r31
   12faa:	05 90       	lpm	r0, Z+
   12fac:	f4 91       	lpm	r31, Z+
   12fae:	e0 2d       	mov	r30, r0
   12fb0:	09 94       	ijmp
		  case 0:
		       CarriegeReturn();
   12fb2:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("      Shift: %s  No.Trans: %s "),strShift,strTranNo);
   12fb6:	8d b7       	in	r24, 0x3d	; 61
   12fb8:	9e b7       	in	r25, 0x3e	; 62
   12fba:	08 97       	sbiw	r24, 0x08	; 8
   12fbc:	0f b6       	in	r0, 0x3f	; 63
   12fbe:	f8 94       	cli
   12fc0:	9e bf       	out	0x3e, r25	; 62
   12fc2:	0f be       	out	0x3f, r0	; 63
   12fc4:	8d bf       	out	0x3d, r24	; 61
   12fc6:	ed b7       	in	r30, 0x3d	; 61
   12fc8:	fe b7       	in	r31, 0x3e	; 62
   12fca:	31 96       	adiw	r30, 0x01	; 1
   12fcc:	ad b7       	in	r26, 0x3d	; 61
   12fce:	be b7       	in	r27, 0x3e	; 62
   12fd0:	12 96       	adiw	r26, 0x02	; 2
   12fd2:	1c 93       	st	X, r17
   12fd4:	0e 93       	st	-X, r16
   12fd6:	11 97       	sbiw	r26, 0x01	; 1
   12fd8:	89 e5       	ldi	r24, 0x59	; 89
   12fda:	9b e0       	ldi	r25, 0x0B	; 11
   12fdc:	93 83       	std	Z+3, r25	; 0x03
   12fde:	82 83       	std	Z+2, r24	; 0x02
   12fe0:	88 e6       	ldi	r24, 0x68	; 104
   12fe2:	9c e0       	ldi	r25, 0x0C	; 12
   12fe4:	95 83       	std	Z+5, r25	; 0x05
   12fe6:	84 83       	std	Z+4, r24	; 0x04
   12fe8:	87 e8       	ldi	r24, 0x87	; 135
   12fea:	9c e0       	ldi	r25, 0x0C	; 12
   12fec:	1d c0       	rjmp	.+58     	; 0x13028 <PrintIdle+0x428>
		       break;
		  case 1:
		       //FormatDate(strDate);
			   CarriegeReturn();
   12fee:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("      Waktu: %s %s "),strDate,strTime);
   12ff2:	8d b7       	in	r24, 0x3d	; 61
   12ff4:	9e b7       	in	r25, 0x3e	; 62
   12ff6:	08 97       	sbiw	r24, 0x08	; 8
   12ff8:	0f b6       	in	r0, 0x3f	; 63
   12ffa:	f8 94       	cli
   12ffc:	9e bf       	out	0x3e, r25	; 62
   12ffe:	0f be       	out	0x3f, r0	; 63
   13000:	8d bf       	out	0x3d, r24	; 61
   13002:	ed b7       	in	r30, 0x3d	; 61
   13004:	fe b7       	in	r31, 0x3e	; 62
   13006:	31 96       	adiw	r30, 0x01	; 1
   13008:	ad b7       	in	r26, 0x3d	; 61
   1300a:	be b7       	in	r27, 0x3e	; 62
   1300c:	12 96       	adiw	r26, 0x02	; 2
   1300e:	1c 93       	st	X, r17
   13010:	0e 93       	st	-X, r16
   13012:	11 97       	sbiw	r26, 0x01	; 1
   13014:	85 e4       	ldi	r24, 0x45	; 69
   13016:	9b e0       	ldi	r25, 0x0B	; 11
   13018:	93 83       	std	Z+3, r25	; 0x03
   1301a:	82 83       	std	Z+2, r24	; 0x02
   1301c:	8e e6       	ldi	r24, 0x6E	; 110
   1301e:	97 e0       	ldi	r25, 0x07	; 7
   13020:	95 83       	std	Z+5, r25	; 0x05
   13022:	84 83       	std	Z+4, r24	; 0x04
   13024:	8d e4       	ldi	r24, 0x4D	; 77
   13026:	93 e0       	ldi	r25, 0x03	; 3
   13028:	97 83       	std	Z+7, r25	; 0x07
   1302a:	86 83       	std	Z+6, r24	; 0x06
   1302c:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
   13030:	ed b7       	in	r30, 0x3d	; 61
   13032:	fe b7       	in	r31, 0x3e	; 62
   13034:	38 96       	adiw	r30, 0x08	; 8
   13036:	8d c3       	rjmp	.+1818   	; 0x13752 <PrintIdle+0xb52>
		       break;
		  case 2:
		       CarriegeReturn();
   13038:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("    ------------------------------"));
   1303c:	00 d0       	rcall	.+0      	; 0x1303e <PrintIdle+0x43e>
   1303e:	00 d0       	rcall	.+0      	; 0x13040 <PrintIdle+0x440>
   13040:	ad b7       	in	r26, 0x3d	; 61
   13042:	be b7       	in	r27, 0x3e	; 62
   13044:	12 96       	adiw	r26, 0x02	; 2
   13046:	1c 93       	st	X, r17
   13048:	0e 93       	st	-X, r16
   1304a:	11 97       	sbiw	r26, 0x01	; 1
   1304c:	82 e2       	ldi	r24, 0x22	; 34
   1304e:	9b e0       	ldi	r25, 0x0B	; 11
   13050:	92 c3       	rjmp	.+1828   	; 0x13776 <PrintIdle+0xb76>
		       break;
		  case 3:
		       CarriegeReturn();
   13052:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
			   //RemZeroLead(strIslandID);
			   //RemZeroLead(strFIP_ID);
		       sprintf_P(strPrint,PSTR("      Pulau/Pompa : [%s]-%s"),strIslandID,strFIP_ID);
   13056:	ed b7       	in	r30, 0x3d	; 61
   13058:	fe b7       	in	r31, 0x3e	; 62
   1305a:	38 97       	sbiw	r30, 0x08	; 8
   1305c:	0f b6       	in	r0, 0x3f	; 63
   1305e:	f8 94       	cli
   13060:	fe bf       	out	0x3e, r31	; 62
   13062:	0f be       	out	0x3f, r0	; 63
   13064:	ed bf       	out	0x3d, r30	; 61
   13066:	31 96       	adiw	r30, 0x01	; 1
   13068:	ad b7       	in	r26, 0x3d	; 61
   1306a:	be b7       	in	r27, 0x3e	; 62
   1306c:	12 96       	adiw	r26, 0x02	; 2
   1306e:	1c 93       	st	X, r17
   13070:	0e 93       	st	-X, r16
   13072:	11 97       	sbiw	r26, 0x01	; 1
   13074:	86 e0       	ldi	r24, 0x06	; 6
   13076:	9b e0       	ldi	r25, 0x0B	; 11
   13078:	93 83       	std	Z+3, r25	; 0x03
   1307a:	82 83       	std	Z+2, r24	; 0x02
   1307c:	87 ef       	ldi	r24, 0xF7	; 247
   1307e:	98 e0       	ldi	r25, 0x08	; 8
   13080:	95 83       	std	Z+5, r25	; 0x05
   13082:	84 83       	std	Z+4, r24	; 0x04
   13084:	89 eb       	ldi	r24, 0xB9	; 185
   13086:	97 e0       	ldi	r25, 0x07	; 7
   13088:	cf cf       	rjmp	.-98     	; 0x13028 <PrintIdle+0x428>
		       break;
		  case 4:
		       CarriegeReturn();
   1308a:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
			   sprintf_P(strPrint,PSTR("      Produk      : %s"),strDescription);
   1308e:	00 d0       	rcall	.+0      	; 0x13090 <PrintIdle+0x490>
   13090:	00 d0       	rcall	.+0      	; 0x13092 <PrintIdle+0x492>
   13092:	00 d0       	rcall	.+0      	; 0x13094 <PrintIdle+0x494>
   13094:	ed b7       	in	r30, 0x3d	; 61
   13096:	fe b7       	in	r31, 0x3e	; 62
   13098:	31 96       	adiw	r30, 0x01	; 1
   1309a:	ad b7       	in	r26, 0x3d	; 61
   1309c:	be b7       	in	r27, 0x3e	; 62
   1309e:	12 96       	adiw	r26, 0x02	; 2
   130a0:	1c 93       	st	X, r17
   130a2:	0e 93       	st	-X, r16
   130a4:	11 97       	sbiw	r26, 0x01	; 1
   130a6:	8f ee       	ldi	r24, 0xEF	; 239
   130a8:	9a e0       	ldi	r25, 0x0A	; 10
   130aa:	93 83       	std	Z+3, r25	; 0x03
   130ac:	82 83       	std	Z+2, r24	; 0x02
   130ae:	8c e0       	ldi	r24, 0x0C	; 12
   130b0:	98 e0       	ldi	r25, 0x08	; 8
   130b2:	48 c3       	rjmp	.+1680   	; 0x13744 <PrintIdle+0xb44>
		       break;
		  case 5:
		       //RemZeroLead(strPrice);
               //FormatCurrency(strPrice);
               if (eeprom_read_byte(&DefPrintMoney)==True){
   130b4:	81 ec       	ldi	r24, 0xC1	; 193
   130b6:	93 e0       	ldi	r25, 0x03	; 3
   130b8:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
   130bc:	0c eb       	ldi	r16, 0xBC	; 188
   130be:	18 e0       	ldi	r17, 0x08	; 8
   130c0:	81 30       	cpi	r24, 0x01	; 1
   130c2:	a9 f4       	brne	.+42     	; 0x130ee <PrintIdle+0x4ee>
			   	   CarriegeReturn();
   130c4:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("      Harga/L     : Rp.%s"),strPrice);
   130c8:	00 d0       	rcall	.+0      	; 0x130ca <PrintIdle+0x4ca>
   130ca:	00 d0       	rcall	.+0      	; 0x130cc <PrintIdle+0x4cc>
   130cc:	00 d0       	rcall	.+0      	; 0x130ce <PrintIdle+0x4ce>
   130ce:	ed b7       	in	r30, 0x3d	; 61
   130d0:	fe b7       	in	r31, 0x3e	; 62
   130d2:	31 96       	adiw	r30, 0x01	; 1
   130d4:	ad b7       	in	r26, 0x3d	; 61
   130d6:	be b7       	in	r27, 0x3e	; 62
   130d8:	12 96       	adiw	r26, 0x02	; 2
   130da:	1c 93       	st	X, r17
   130dc:	0e 93       	st	-X, r16
   130de:	11 97       	sbiw	r26, 0x01	; 1
   130e0:	85 ed       	ldi	r24, 0xD5	; 213
   130e2:	9a e0       	ldi	r25, 0x0A	; 10
   130e4:	93 83       	std	Z+3, r25	; 0x03
   130e6:	82 83       	std	Z+2, r24	; 0x02
   130e8:	8e e9       	ldi	r24, 0x9E	; 158
   130ea:	95 e0       	ldi	r25, 0x05	; 5
   130ec:	2b c3       	rjmp	.+1622   	; 0x13744 <PrintIdle+0xb44>
			   }else sprintf_P(strPrint,PSTR(""));
   130ee:	00 d0       	rcall	.+0      	; 0x130f0 <PrintIdle+0x4f0>
   130f0:	00 d0       	rcall	.+0      	; 0x130f2 <PrintIdle+0x4f2>
   130f2:	ad b7       	in	r26, 0x3d	; 61
   130f4:	be b7       	in	r27, 0x3e	; 62
   130f6:	12 96       	adiw	r26, 0x02	; 2
   130f8:	1c 93       	st	X, r17
   130fa:	0e 93       	st	-X, r16
   130fc:	11 97       	sbiw	r26, 0x01	; 1
   130fe:	84 ed       	ldi	r24, 0xD4	; 212
   13100:	9a e0       	ldi	r25, 0x0A	; 10
   13102:	39 c3       	rjmp	.+1650   	; 0x13776 <PrintIdle+0xb76>

		       break;
		  case 6:
		       //RemZeroLead(strVolume);
		       CarriegeReturn();
   13104:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
			   sprintf_P(strPrint,PSTR("      Jml Liter   : %s L"),strVolume);
   13108:	00 d0       	rcall	.+0      	; 0x1310a <PrintIdle+0x50a>
   1310a:	00 d0       	rcall	.+0      	; 0x1310c <PrintIdle+0x50c>
   1310c:	00 d0       	rcall	.+0      	; 0x1310e <PrintIdle+0x50e>
   1310e:	ed b7       	in	r30, 0x3d	; 61
   13110:	fe b7       	in	r31, 0x3e	; 62
   13112:	31 96       	adiw	r30, 0x01	; 1
   13114:	ad b7       	in	r26, 0x3d	; 61
   13116:	be b7       	in	r27, 0x3e	; 62
   13118:	12 96       	adiw	r26, 0x02	; 2
   1311a:	1c 93       	st	X, r17
   1311c:	0e 93       	st	-X, r16
   1311e:	11 97       	sbiw	r26, 0x01	; 1
   13120:	8b eb       	ldi	r24, 0xBB	; 187
   13122:	9a e0       	ldi	r25, 0x0A	; 10
   13124:	93 83       	std	Z+3, r25	; 0x03
   13126:	82 83       	std	Z+2, r24	; 0x02
   13128:	85 e7       	ldi	r24, 0x75	; 117
   1312a:	93 e0       	ldi	r25, 0x03	; 3
   1312c:	0b c3       	rjmp	.+1558   	; 0x13744 <PrintIdle+0xb44>
		       break;
		  case 7:
		       //RemZeroLead(strAmount);		       
			   //FormatCurrency(strAmount);
               if (eeprom_read_byte(&DefPrintMoney)==True){
   1312e:	81 ec       	ldi	r24, 0xC1	; 193
   13130:	93 e0       	ldi	r25, 0x03	; 3
   13132:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
   13136:	0c eb       	ldi	r16, 0xBC	; 188
   13138:	18 e0       	ldi	r17, 0x08	; 8
   1313a:	81 30       	cpi	r24, 0x01	; 1
   1313c:	a9 f4       	brne	.+42     	; 0x13168 <PrintIdle+0x568>
			   	   CarriegeReturn();
   1313e:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("      Jml Rupiah  : Rp.%s"),strAmount);
   13142:	00 d0       	rcall	.+0      	; 0x13144 <PrintIdle+0x544>
   13144:	00 d0       	rcall	.+0      	; 0x13146 <PrintIdle+0x546>
   13146:	00 d0       	rcall	.+0      	; 0x13148 <PrintIdle+0x548>
   13148:	ed b7       	in	r30, 0x3d	; 61
   1314a:	fe b7       	in	r31, 0x3e	; 62
   1314c:	31 96       	adiw	r30, 0x01	; 1
   1314e:	ad b7       	in	r26, 0x3d	; 61
   13150:	be b7       	in	r27, 0x3e	; 62
   13152:	12 96       	adiw	r26, 0x02	; 2
   13154:	1c 93       	st	X, r17
   13156:	0e 93       	st	-X, r16
   13158:	11 97       	sbiw	r26, 0x01	; 1
   1315a:	81 ea       	ldi	r24, 0xA1	; 161
   1315c:	9a e0       	ldi	r25, 0x0A	; 10
   1315e:	93 83       	std	Z+3, r25	; 0x03
   13160:	82 83       	std	Z+2, r24	; 0x02
   13162:	83 eb       	ldi	r24, 0xB3	; 179
   13164:	9b e0       	ldi	r25, 0x0B	; 11
   13166:	ee c2       	rjmp	.+1500   	; 0x13744 <PrintIdle+0xb44>
			   }else sprintf_P(strPrint,PSTR(""));
   13168:	00 d0       	rcall	.+0      	; 0x1316a <PrintIdle+0x56a>
   1316a:	00 d0       	rcall	.+0      	; 0x1316c <PrintIdle+0x56c>
   1316c:	ad b7       	in	r26, 0x3d	; 61
   1316e:	be b7       	in	r27, 0x3e	; 62
   13170:	12 96       	adiw	r26, 0x02	; 2
   13172:	1c 93       	st	X, r17
   13174:	0e 93       	st	-X, r16
   13176:	11 97       	sbiw	r26, 0x01	; 1
   13178:	80 ea       	ldi	r24, 0xA0	; 160
   1317a:	9a e0       	ldi	r25, 0x0A	; 10
   1317c:	fc c2       	rjmp	.+1528   	; 0x13776 <PrintIdle+0xb76>

		       break;
		  case 8:
		       if ((strlen(strLicPlate)>0)&&(SpaceOnly(strLicPlate)==False)){
   1317e:	0a ef       	ldi	r16, 0xFA	; 250
   13180:	18 e0       	ldi	r17, 0x08	; 8
   13182:	80 91 fa 08 	lds	r24, 0x08FA
   13186:	88 23       	and	r24, r24
   13188:	09 f4       	brne	.+2      	; 0x1318c <PrintIdle+0x58c>
   1318a:	10 c2       	rjmp	.+1056   	; 0x135ac <PrintIdle+0x9ac>
   1318c:	c8 01       	movw	r24, r16
   1318e:	0e 94 c0 25 	call	0x4b80	; 0x4b80 <SpaceOnly>
   13192:	88 23       	and	r24, r24
   13194:	09 f0       	breq	.+2      	; 0x13198 <PrintIdle+0x598>
   13196:	0a c2       	rjmp	.+1044   	; 0x135ac <PrintIdle+0x9ac>
			       CarriegeReturn();
   13198:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("      No.Polisi   : %s"),strLicPlate);
   1319c:	00 d0       	rcall	.+0      	; 0x1319e <PrintIdle+0x59e>
   1319e:	00 d0       	rcall	.+0      	; 0x131a0 <PrintIdle+0x5a0>
   131a0:	00 d0       	rcall	.+0      	; 0x131a2 <PrintIdle+0x5a2>
   131a2:	ed b7       	in	r30, 0x3d	; 61
   131a4:	fe b7       	in	r31, 0x3e	; 62
   131a6:	31 96       	adiw	r30, 0x01	; 1
   131a8:	8c eb       	ldi	r24, 0xBC	; 188
   131aa:	98 e0       	ldi	r25, 0x08	; 8
   131ac:	ad b7       	in	r26, 0x3d	; 61
   131ae:	be b7       	in	r27, 0x3e	; 62
   131b0:	12 96       	adiw	r26, 0x02	; 2
   131b2:	9c 93       	st	X, r25
   131b4:	8e 93       	st	-X, r24
   131b6:	11 97       	sbiw	r26, 0x01	; 1
   131b8:	89 e8       	ldi	r24, 0x89	; 137
   131ba:	9a e0       	ldi	r25, 0x0A	; 10
   131bc:	1f c0       	rjmp	.+62     	; 0x131fc <PrintIdle+0x5fc>
                   ClearMem(strLicPlate);
				   }
               else ClearMem(strPrint);
		       break;
		  case 9:
		       if ((strlen(strOdometer)>0)&&(SpaceOnly(strOdometer)==False)){
   131be:	03 ec       	ldi	r16, 0xC3	; 195
   131c0:	13 e0       	ldi	r17, 0x03	; 3
   131c2:	80 91 c3 03 	lds	r24, 0x03C3
   131c6:	88 23       	and	r24, r24
   131c8:	09 f4       	brne	.+2      	; 0x131cc <PrintIdle+0x5cc>
   131ca:	f0 c1       	rjmp	.+992    	; 0x135ac <PrintIdle+0x9ac>
   131cc:	c8 01       	movw	r24, r16
   131ce:	0e 94 c0 25 	call	0x4b80	; 0x4b80 <SpaceOnly>
   131d2:	88 23       	and	r24, r24
   131d4:	09 f0       	breq	.+2      	; 0x131d8 <PrintIdle+0x5d8>
   131d6:	ea c1       	rjmp	.+980    	; 0x135ac <PrintIdle+0x9ac>
			       CarriegeReturn();
   131d8:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
		           sprintf_P(strPrint,PSTR("      Odometer    : %s"),strOdometer);
   131dc:	00 d0       	rcall	.+0      	; 0x131de <PrintIdle+0x5de>
   131de:	00 d0       	rcall	.+0      	; 0x131e0 <PrintIdle+0x5e0>
   131e0:	00 d0       	rcall	.+0      	; 0x131e2 <PrintIdle+0x5e2>
   131e2:	ed b7       	in	r30, 0x3d	; 61
   131e4:	fe b7       	in	r31, 0x3e	; 62
   131e6:	31 96       	adiw	r30, 0x01	; 1
   131e8:	8c eb       	ldi	r24, 0xBC	; 188
   131ea:	98 e0       	ldi	r25, 0x08	; 8
   131ec:	ad b7       	in	r26, 0x3d	; 61
   131ee:	be b7       	in	r27, 0x3e	; 62
   131f0:	12 96       	adiw	r26, 0x02	; 2
   131f2:	9c 93       	st	X, r25
   131f4:	8e 93       	st	-X, r24
   131f6:	11 97       	sbiw	r26, 0x01	; 1
   131f8:	82 e7       	ldi	r24, 0x72	; 114
   131fa:	9a e0       	ldi	r25, 0x0A	; 10
   131fc:	93 83       	std	Z+3, r25	; 0x03
   131fe:	82 83       	std	Z+2, r24	; 0x02
   13200:	15 83       	std	Z+5, r17	; 0x05
   13202:	04 83       	std	Z+4, r16	; 0x04
   13204:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
				   ClearMem(strOdometer);
   13208:	ed b7       	in	r30, 0x3d	; 61
   1320a:	fe b7       	in	r31, 0x3e	; 62
   1320c:	36 96       	adiw	r30, 0x06	; 6
   1320e:	0f b6       	in	r0, 0x3f	; 63
   13210:	f8 94       	cli
   13212:	fe bf       	out	0x3e, r31	; 62
   13214:	0f be       	out	0x3f, r0	; 63
   13216:	ed bf       	out	0x3d, r30	; 61
   13218:	c8 01       	movw	r24, r16
   1321a:	0e 94 f1 a4 	call	0x149e2	; 0x149e2 <ClearMem>
   1321e:	b5 c2       	rjmp	.+1386   	; 0x1378a <PrintIdle+0xb8a>
			   }else ClearMem(strPrint);
		       break;
		  case 10:
		       CarriegeReturn();
   13220:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("    ------------------------------"));
   13224:	00 d0       	rcall	.+0      	; 0x13226 <PrintIdle+0x626>
   13226:	00 d0       	rcall	.+0      	; 0x13228 <PrintIdle+0x628>
   13228:	ad b7       	in	r26, 0x3d	; 61
   1322a:	be b7       	in	r27, 0x3e	; 62
   1322c:	12 96       	adiw	r26, 0x02	; 2
   1322e:	1c 93       	st	X, r17
   13230:	0e 93       	st	-X, r16
   13232:	11 97       	sbiw	r26, 0x01	; 1
   13234:	8f e4       	ldi	r24, 0x4F	; 79
   13236:	9a e0       	ldi	r25, 0x0A	; 10
   13238:	9e c2       	rjmp	.+1340   	; 0x13776 <PrintIdle+0xb76>
		       break;
          //ChangeMOPPrint
		  case 11:
			   if ((MOPType==MOP_LOCAL_ACCOUNT)||(MOPType==MOP_DEBIT_CARD)||(MOPType==MOP_LOYALTY_LOCAL_ACCOUNT)){
   1323a:	80 91 b8 01 	lds	r24, 0x01B8
   1323e:	81 30       	cpi	r24, 0x01	; 1
   13240:	21 f0       	breq	.+8      	; 0x1324a <PrintIdle+0x64a>
   13242:	83 30       	cpi	r24, 0x03	; 3
   13244:	11 f0       	breq	.+4      	; 0x1324a <PrintIdle+0x64a>
   13246:	86 30       	cpi	r24, 0x06	; 6
   13248:	b9 f4       	brne	.+46     	; 0x13278 <PrintIdle+0x678>
			       //RemSpaceLag(strCardID);
				   CarriegeReturn();
   1324a:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("    Kartu ID : %s"),strCardID);
   1324e:	00 d0       	rcall	.+0      	; 0x13250 <PrintIdle+0x650>
   13250:	00 d0       	rcall	.+0      	; 0x13252 <PrintIdle+0x652>
   13252:	00 d0       	rcall	.+0      	; 0x13254 <PrintIdle+0x654>
   13254:	ed b7       	in	r30, 0x3d	; 61
   13256:	fe b7       	in	r31, 0x3e	; 62
   13258:	31 96       	adiw	r30, 0x01	; 1
   1325a:	8c eb       	ldi	r24, 0xBC	; 188
   1325c:	98 e0       	ldi	r25, 0x08	; 8
   1325e:	ad b7       	in	r26, 0x3d	; 61
   13260:	be b7       	in	r27, 0x3e	; 62
   13262:	12 96       	adiw	r26, 0x02	; 2
   13264:	9c 93       	st	X, r25
   13266:	8e 93       	st	-X, r24
   13268:	11 97       	sbiw	r26, 0x01	; 1
   1326a:	8d e3       	ldi	r24, 0x3D	; 61
   1326c:	9a e0       	ldi	r25, 0x0A	; 10
   1326e:	93 83       	std	Z+3, r25	; 0x03
   13270:	82 83       	std	Z+2, r24	; 0x02
   13272:	89 e8       	ldi	r24, 0x89	; 137
   13274:	9b e0       	ldi	r25, 0x0B	; 11
   13276:	18 c0       	rjmp	.+48     	; 0x132a8 <PrintIdle+0x6a8>
				   IsSignedField=True;
				   }
	           else
			   if (MOPType==MOP_VOUCHER){
   13278:	87 30       	cpi	r24, 0x07	; 7
   1327a:	f1 f4       	brne	.+60     	; 0x132b8 <PrintIdle+0x6b8>
			       //RemSpaceLag(strCardID);
				   CarriegeReturn();
   1327c:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("    Voucher No: %s"),strVoucherNum);
   13280:	00 d0       	rcall	.+0      	; 0x13282 <PrintIdle+0x682>
   13282:	00 d0       	rcall	.+0      	; 0x13284 <PrintIdle+0x684>
   13284:	00 d0       	rcall	.+0      	; 0x13286 <PrintIdle+0x686>
   13286:	ed b7       	in	r30, 0x3d	; 61
   13288:	fe b7       	in	r31, 0x3e	; 62
   1328a:	31 96       	adiw	r30, 0x01	; 1
   1328c:	8c eb       	ldi	r24, 0xBC	; 188
   1328e:	98 e0       	ldi	r25, 0x08	; 8
   13290:	ad b7       	in	r26, 0x3d	; 61
   13292:	be b7       	in	r27, 0x3e	; 62
   13294:	12 96       	adiw	r26, 0x02	; 2
   13296:	9c 93       	st	X, r25
   13298:	8e 93       	st	-X, r24
   1329a:	11 97       	sbiw	r26, 0x01	; 1
   1329c:	8a e2       	ldi	r24, 0x2A	; 42
   1329e:	9a e0       	ldi	r25, 0x0A	; 10
   132a0:	93 83       	std	Z+3, r25	; 0x03
   132a2:	82 83       	std	Z+2, r24	; 0x02
   132a4:	8c e3       	ldi	r24, 0x3C	; 60
   132a6:	9c e0       	ldi	r25, 0x0C	; 12
   132a8:	95 83       	std	Z+5, r25	; 0x05
   132aa:	84 83       	std	Z+4, r24	; 0x04
   132ac:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
				   IsSignedField=True;
   132b0:	81 e0       	ldi	r24, 0x01	; 1
   132b2:	80 93 ff 01 	sts	0x01FF, r24
   132b6:	4a c2       	rjmp	.+1172   	; 0x1374c <PrintIdle+0xb4c>
   132b8:	0c eb       	ldi	r16, 0xBC	; 188
   132ba:	18 e0       	ldi	r17, 0x08	; 8
				   }
			   else
			   if (MOPType==MOP_PUMP_TEST) {
   132bc:	88 30       	cpi	r24, 0x08	; 8
   132be:	09 f0       	breq	.+2      	; 0x132c2 <PrintIdle+0x6c2>
   132c0:	ab cf       	rjmp	.-170    	; 0x13218 <PrintIdle+0x618>
			       CarriegeReturn();
   132c2:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("          *** PUMP TEST ***       "));
   132c6:	00 d0       	rcall	.+0      	; 0x132c8 <PrintIdle+0x6c8>
   132c8:	00 d0       	rcall	.+0      	; 0x132ca <PrintIdle+0x6ca>
   132ca:	ad b7       	in	r26, 0x3d	; 61
   132cc:	be b7       	in	r27, 0x3e	; 62
   132ce:	12 96       	adiw	r26, 0x02	; 2
   132d0:	1c 93       	st	X, r17
   132d2:	0e 93       	st	-X, r16
   132d4:	11 97       	sbiw	r26, 0x01	; 1
   132d6:	87 e0       	ldi	r24, 0x07	; 7
   132d8:	9a e0       	ldi	r25, 0x0A	; 10
   132da:	14 96       	adiw	r26, 0x04	; 4
   132dc:	9c 93       	st	X, r25
   132de:	8e 93       	st	-X, r24
   132e0:	13 97       	sbiw	r26, 0x03	; 3
   132e2:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
				   IsSignedField=False;
   132e6:	10 92 ff 01 	sts	0x01FF, r1
   132ea:	4b c2       	rjmp	.+1174   	; 0x13782 <PrintIdle+0xb82>
				   }
               else ClearMem(strPrint);
		       break;
          case 12:
			   if (MOPType==MOP_LOCAL_ACCOUNT) {
   132ec:	80 91 b8 01 	lds	r24, 0x01B8
   132f0:	81 30       	cpi	r24, 0x01	; 1
   132f2:	99 f4       	brne	.+38     	; 0x1331a <PrintIdle+0x71a>
			       //RemSpaceLag(strCardHolder);
				   CarriegeReturn();
   132f4:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("    Nama     : %s"),strCardHolder);
   132f8:	00 d0       	rcall	.+0      	; 0x132fa <PrintIdle+0x6fa>
   132fa:	00 d0       	rcall	.+0      	; 0x132fc <PrintIdle+0x6fc>
   132fc:	00 d0       	rcall	.+0      	; 0x132fe <PrintIdle+0x6fe>
   132fe:	ed b7       	in	r30, 0x3d	; 61
   13300:	fe b7       	in	r31, 0x3e	; 62
   13302:	31 96       	adiw	r30, 0x01	; 1
   13304:	8c eb       	ldi	r24, 0xBC	; 188
   13306:	98 e0       	ldi	r25, 0x08	; 8
   13308:	ad b7       	in	r26, 0x3d	; 61
   1330a:	be b7       	in	r27, 0x3e	; 62
   1330c:	12 96       	adiw	r26, 0x02	; 2
   1330e:	9c 93       	st	X, r25
   13310:	8e 93       	st	-X, r24
   13312:	11 97       	sbiw	r26, 0x01	; 1
   13314:	85 ef       	ldi	r24, 0xF5	; 245
   13316:	99 e0       	ldi	r25, 0x09	; 9
   13318:	3a c0       	rjmp	.+116    	; 0x1338e <PrintIdle+0x78e>
				   }
               else 
               if (MOPType==MOP_DEBIT_CARD) {//EDCApprovalCode
   1331a:	83 30       	cpi	r24, 0x03	; 3
   1331c:	e9 f5       	brne	.+122    	; 0x13398 <PrintIdle+0x798>
			       if (IsPrintApprovalCode==True){
   1331e:	80 91 9a 01 	lds	r24, 0x019A
   13322:	81 30       	cpi	r24, 0x01	; 1
   13324:	11 f5       	brne	.+68     	; 0x1336a <PrintIdle+0x76a>
				       IsPrintApprovalCode=False;
   13326:	10 92 9a 01 	sts	0x019A, r1
					   FillChar(strCardHolder,0,sizeof(strCardHolder));
					   sprintf_P(strCardHolder,PSTR("%s  "),strApprovalCode);
   1332a:	00 d0       	rcall	.+0      	; 0x1332c <PrintIdle+0x72c>
   1332c:	00 d0       	rcall	.+0      	; 0x1332e <PrintIdle+0x72e>
   1332e:	00 d0       	rcall	.+0      	; 0x13330 <PrintIdle+0x730>
   13330:	ed b7       	in	r30, 0x3d	; 61
   13332:	fe b7       	in	r31, 0x3e	; 62
   13334:	31 96       	adiw	r30, 0x01	; 1
   13336:	84 e2       	ldi	r24, 0x24	; 36
   13338:	93 e0       	ldi	r25, 0x03	; 3
   1333a:	ad b7       	in	r26, 0x3d	; 61
   1333c:	be b7       	in	r27, 0x3e	; 62
   1333e:	12 96       	adiw	r26, 0x02	; 2
   13340:	9c 93       	st	X, r25
   13342:	8e 93       	st	-X, r24
   13344:	11 97       	sbiw	r26, 0x01	; 1
   13346:	80 ef       	ldi	r24, 0xF0	; 240
   13348:	99 e0       	ldi	r25, 0x09	; 9
   1334a:	93 83       	std	Z+3, r25	; 0x03
   1334c:	82 83       	std	Z+2, r24	; 0x02
   1334e:	80 ef       	ldi	r24, 0xF0	; 240
   13350:	97 e0       	ldi	r25, 0x07	; 7
   13352:	95 83       	std	Z+5, r25	; 0x05
   13354:	84 83       	std	Z+4, r24	; 0x04
   13356:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
   1335a:	ed b7       	in	r30, 0x3d	; 61
   1335c:	fe b7       	in	r31, 0x3e	; 62
   1335e:	36 96       	adiw	r30, 0x06	; 6
   13360:	0f b6       	in	r0, 0x3f	; 63
   13362:	f8 94       	cli
   13364:	fe bf       	out	0x3e, r31	; 62
   13366:	0f be       	out	0x3f, r0	; 63
   13368:	ed bf       	out	0x3d, r30	; 61
				   }
			       //RemSpaceLag(strCardHolder);
				   CarriegeReturn();
   1336a:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("    Appr Code: %s"),strCardHolder);
   1336e:	00 d0       	rcall	.+0      	; 0x13370 <PrintIdle+0x770>
   13370:	00 d0       	rcall	.+0      	; 0x13372 <PrintIdle+0x772>
   13372:	00 d0       	rcall	.+0      	; 0x13374 <PrintIdle+0x774>
   13374:	ed b7       	in	r30, 0x3d	; 61
   13376:	fe b7       	in	r31, 0x3e	; 62
   13378:	31 96       	adiw	r30, 0x01	; 1
   1337a:	8c eb       	ldi	r24, 0xBC	; 188
   1337c:	98 e0       	ldi	r25, 0x08	; 8
   1337e:	ad b7       	in	r26, 0x3d	; 61
   13380:	be b7       	in	r27, 0x3e	; 62
   13382:	12 96       	adiw	r26, 0x02	; 2
   13384:	9c 93       	st	X, r25
   13386:	8e 93       	st	-X, r24
   13388:	11 97       	sbiw	r26, 0x01	; 1
   1338a:	8e ed       	ldi	r24, 0xDE	; 222
   1338c:	99 e0       	ldi	r25, 0x09	; 9
   1338e:	93 83       	std	Z+3, r25	; 0x03
   13390:	82 83       	std	Z+2, r24	; 0x02
   13392:	84 e2       	ldi	r24, 0x24	; 36
   13394:	93 e0       	ldi	r25, 0x03	; 3
   13396:	d6 c1       	rjmp	.+940    	; 0x13744 <PrintIdle+0xb44>
				   }
               else
			   if (MOPType==MOP_VOUCHER){
   13398:	87 30       	cpi	r24, 0x07	; 7
   1339a:	79 f4       	brne	.+30     	; 0x133ba <PrintIdle+0x7ba>
			       CarriegeReturn();
   1339c:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("  "));
   133a0:	00 d0       	rcall	.+0      	; 0x133a2 <PrintIdle+0x7a2>
   133a2:	00 d0       	rcall	.+0      	; 0x133a4 <PrintIdle+0x7a4>
   133a4:	8c eb       	ldi	r24, 0xBC	; 188
   133a6:	98 e0       	ldi	r25, 0x08	; 8
   133a8:	ad b7       	in	r26, 0x3d	; 61
   133aa:	be b7       	in	r27, 0x3e	; 62
   133ac:	12 96       	adiw	r26, 0x02	; 2
   133ae:	9c 93       	st	X, r25
   133b0:	8e 93       	st	-X, r24
   133b2:	11 97       	sbiw	r26, 0x01	; 1
   133b4:	8b ed       	ldi	r24, 0xDB	; 219
   133b6:	99 e0       	ldi	r25, 0x09	; 9
   133b8:	de c1       	rjmp	.+956    	; 0x13776 <PrintIdle+0xb76>
   133ba:	0c eb       	ldi	r16, 0xBC	; 188
   133bc:	18 e0       	ldi	r17, 0x08	; 8
				   }
			   else
			   if (MOPType==MOP_PUMP_TEST) {
   133be:	88 30       	cpi	r24, 0x08	; 8
   133c0:	09 f0       	breq	.+2      	; 0x133c4 <PrintIdle+0x7c4>
   133c2:	2a cf       	rjmp	.-428    	; 0x13218 <PrintIdle+0x618>
			       CarriegeReturn();
   133c4:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("                 "));
   133c8:	00 d0       	rcall	.+0      	; 0x133ca <PrintIdle+0x7ca>
   133ca:	00 d0       	rcall	.+0      	; 0x133cc <PrintIdle+0x7cc>
   133cc:	ed b7       	in	r30, 0x3d	; 61
   133ce:	fe b7       	in	r31, 0x3e	; 62
   133d0:	12 83       	std	Z+2, r17	; 0x02
   133d2:	01 83       	std	Z+1, r16	; 0x01
   133d4:	89 ec       	ldi	r24, 0xC9	; 201
   133d6:	99 e0       	ldi	r25, 0x09	; 9
   133d8:	25 c0       	rjmp	.+74     	; 0x13424 <PrintIdle+0x824>
				   }
               else ClearMem(strPrint);
		       break;
          case 13:
		       if (IsSignedField==True){
   133da:	80 91 ff 01 	lds	r24, 0x01FF
   133de:	0c eb       	ldi	r16, 0xBC	; 188
   133e0:	18 e0       	ldi	r17, 0x08	; 8
   133e2:	81 30       	cpi	r24, 0x01	; 1
   133e4:	09 f0       	breq	.+2      	; 0x133e8 <PrintIdle+0x7e8>
   133e6:	18 cf       	rjmp	.-464    	; 0x13218 <PrintIdle+0x618>
			       CarriegeReturn();
   133e8:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("                      "));
   133ec:	00 d0       	rcall	.+0      	; 0x133ee <PrintIdle+0x7ee>
   133ee:	00 d0       	rcall	.+0      	; 0x133f0 <PrintIdle+0x7f0>
   133f0:	ad b7       	in	r26, 0x3d	; 61
   133f2:	be b7       	in	r27, 0x3e	; 62
   133f4:	12 96       	adiw	r26, 0x02	; 2
   133f6:	1c 93       	st	X, r17
   133f8:	0e 93       	st	-X, r16
   133fa:	11 97       	sbiw	r26, 0x01	; 1
   133fc:	82 eb       	ldi	r24, 0xB2	; 178
   133fe:	99 e0       	ldi	r25, 0x09	; 9
   13400:	ba c1       	rjmp	.+884    	; 0x13776 <PrintIdle+0xb76>
               }else ClearMem(strPrint);
		       break;
          case 14:
		       if (IsSignedField==True){
   13402:	80 91 ff 01 	lds	r24, 0x01FF
   13406:	0c eb       	ldi	r16, 0xBC	; 188
   13408:	18 e0       	ldi	r17, 0x08	; 8
   1340a:	81 30       	cpi	r24, 0x01	; 1
   1340c:	09 f0       	breq	.+2      	; 0x13410 <PrintIdle+0x810>
   1340e:	04 cf       	rjmp	.-504    	; 0x13218 <PrintIdle+0x618>
			       CarriegeReturn();
   13410:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("                      "));
   13414:	00 d0       	rcall	.+0      	; 0x13416 <PrintIdle+0x816>
   13416:	00 d0       	rcall	.+0      	; 0x13418 <PrintIdle+0x818>
   13418:	ed b7       	in	r30, 0x3d	; 61
   1341a:	fe b7       	in	r31, 0x3e	; 62
   1341c:	12 83       	std	Z+2, r17	; 0x02
   1341e:	01 83       	std	Z+1, r16	; 0x01
   13420:	8b e9       	ldi	r24, 0x9B	; 155
   13422:	99 e0       	ldi	r25, 0x09	; 9
   13424:	94 83       	std	Z+4, r25	; 0x04
   13426:	83 83       	std	Z+3, r24	; 0x03
   13428:	aa c1       	rjmp	.+852    	; 0x1377e <PrintIdle+0xb7e>
			       //sprintf_P(strPrint,PSTR("                      "));
				   ClearMem(strPrint);
               }else ClearMem(strPrint);
		       break;
          case 17:
		       if (IsSignedField==True){
   1342a:	80 91 ff 01 	lds	r24, 0x01FF
   1342e:	0c eb       	ldi	r16, 0xBC	; 188
   13430:	18 e0       	ldi	r17, 0x08	; 8
   13432:	81 30       	cpi	r24, 0x01	; 1
   13434:	09 f0       	breq	.+2      	; 0x13438 <PrintIdle+0x838>
   13436:	f0 ce       	rjmp	.-544    	; 0x13218 <PrintIdle+0x618>
			       CarriegeReturn();
   13438:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("    Tanda Tangan  (______________)"));
   1343c:	00 d0       	rcall	.+0      	; 0x1343e <PrintIdle+0x83e>
   1343e:	00 d0       	rcall	.+0      	; 0x13440 <PrintIdle+0x840>
   13440:	ad b7       	in	r26, 0x3d	; 61
   13442:	be b7       	in	r27, 0x3e	; 62
   13444:	12 96       	adiw	r26, 0x02	; 2
   13446:	1c 93       	st	X, r17
   13448:	0e 93       	st	-X, r16
   1344a:	11 97       	sbiw	r26, 0x01	; 1
   1344c:	88 e7       	ldi	r24, 0x78	; 120
   1344e:	99 e0       	ldi	r25, 0x09	; 9
   13450:	92 c1       	rjmp	.+804    	; 0x13776 <PrintIdle+0xb76>
               }else ClearMem(strPrint);
		       break;
          case 18:
		       if (IsSignedField==True){
   13452:	80 91 ff 01 	lds	r24, 0x01FF
   13456:	81 30       	cpi	r24, 0x01	; 1
   13458:	09 f0       	breq	.+2      	; 0x1345c <PrintIdle+0x85c>
   1345a:	a8 c0       	rjmp	.+336    	; 0x135ac <PrintIdle+0x9ac>
			       IsSignedField=False;
   1345c:	10 92 ff 01 	sts	0x01FF, r1
   13460:	a5 c0       	rjmp	.+330    	; 0x135ac <PrintIdle+0x9ac>
			       //sprintf_P(strPrint,PSTR("                      "));
				   ClearMem(strPrint);
               }else ClearMem(strPrint);
		       break;
          case 19://PrintMOP Name
		       if (MOPType!=MOP_CASH){
   13462:	80 91 b8 01 	lds	r24, 0x01B8
   13466:	0c eb       	ldi	r16, 0xBC	; 188
   13468:	18 e0       	ldi	r17, 0x08	; 8
   1346a:	88 23       	and	r24, r24
   1346c:	09 f4       	brne	.+2      	; 0x13470 <PrintIdle+0x870>
   1346e:	d4 ce       	rjmp	.-600    	; 0x13218 <PrintIdle+0x618>
			       CarriegeReturn();
   13470:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
			       //RemSpaceLag(strMOPName);
			       sprintf_P(strPrint,PSTR("    .%s"),strMOPName);
   13474:	00 d0       	rcall	.+0      	; 0x13476 <PrintIdle+0x876>
   13476:	00 d0       	rcall	.+0      	; 0x13478 <PrintIdle+0x878>
   13478:	00 d0       	rcall	.+0      	; 0x1347a <PrintIdle+0x87a>
   1347a:	ed b7       	in	r30, 0x3d	; 61
   1347c:	fe b7       	in	r31, 0x3e	; 62
   1347e:	31 96       	adiw	r30, 0x01	; 1
   13480:	ad b7       	in	r26, 0x3d	; 61
   13482:	be b7       	in	r27, 0x3e	; 62
   13484:	12 96       	adiw	r26, 0x02	; 2
   13486:	1c 93       	st	X, r17
   13488:	0e 93       	st	-X, r16
   1348a:	11 97       	sbiw	r26, 0x01	; 1
   1348c:	80 e7       	ldi	r24, 0x70	; 112
   1348e:	99 e0       	ldi	r25, 0x09	; 9
   13490:	93 83       	std	Z+3, r25	; 0x03
   13492:	82 83       	std	Z+2, r24	; 0x02
   13494:	8d e7       	ldi	r24, 0x7D	; 125
   13496:	95 e0       	ldi	r25, 0x05	; 5
   13498:	55 c1       	rjmp	.+682    	; 0x13744 <PrintIdle+0xb44>
			   }else ClearMem(strPrint);
		       break;
		  case 20:
		       if (MOPType!=MOP_CASH){
   1349a:	80 91 b8 01 	lds	r24, 0x01B8
   1349e:	0c eb       	ldi	r16, 0xBC	; 188
   134a0:	18 e0       	ldi	r17, 0x08	; 8
   134a2:	88 23       	and	r24, r24
   134a4:	09 f4       	brne	.+2      	; 0x134a8 <PrintIdle+0x8a8>
   134a6:	b8 ce       	rjmp	.-656    	; 0x13218 <PrintIdle+0x618>
			       CarriegeReturn();
   134a8:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
		           sprintf_P(strPrint,PSTR("    ------------------------------"));
   134ac:	00 d0       	rcall	.+0      	; 0x134ae <PrintIdle+0x8ae>
   134ae:	00 d0       	rcall	.+0      	; 0x134b0 <PrintIdle+0x8b0>
   134b0:	ad b7       	in	r26, 0x3d	; 61
   134b2:	be b7       	in	r27, 0x3e	; 62
   134b4:	12 96       	adiw	r26, 0x02	; 2
   134b6:	1c 93       	st	X, r17
   134b8:	0e 93       	st	-X, r16
   134ba:	11 97       	sbiw	r26, 0x01	; 1
   134bc:	8d e4       	ldi	r24, 0x4D	; 77
   134be:	99 e0       	ldi	r25, 0x09	; 9
   134c0:	5a c1       	rjmp	.+692    	; 0x13776 <PrintIdle+0xb76>
			   }else ClearMem(strPrint);
		       break;          
          //Loyalty
		  case 21:
		       CarriegeReturn();
   134c2:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("         LOYALTY INFORMATION      "));
   134c6:	00 d0       	rcall	.+0      	; 0x134c8 <PrintIdle+0x8c8>
   134c8:	00 d0       	rcall	.+0      	; 0x134ca <PrintIdle+0x8ca>
   134ca:	ed b7       	in	r30, 0x3d	; 61
   134cc:	fe b7       	in	r31, 0x3e	; 62
   134ce:	12 83       	std	Z+2, r17	; 0x02
   134d0:	01 83       	std	Z+1, r16	; 0x01
   134d2:	8a e2       	ldi	r24, 0x2A	; 42
   134d4:	99 e0       	ldi	r25, 0x09	; 9
   134d6:	a6 cf       	rjmp	.-180    	; 0x13424 <PrintIdle+0x824>
		       break; 			            
		  case 22:
		       CarriegeReturn();
   134d8:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("     Card ID      : %s"),strLoyCardID);
   134dc:	00 d0       	rcall	.+0      	; 0x134de <PrintIdle+0x8de>
   134de:	00 d0       	rcall	.+0      	; 0x134e0 <PrintIdle+0x8e0>
   134e0:	00 d0       	rcall	.+0      	; 0x134e2 <PrintIdle+0x8e2>
   134e2:	ed b7       	in	r30, 0x3d	; 61
   134e4:	fe b7       	in	r31, 0x3e	; 62
   134e6:	31 96       	adiw	r30, 0x01	; 1
   134e8:	ad b7       	in	r26, 0x3d	; 61
   134ea:	be b7       	in	r27, 0x3e	; 62
   134ec:	12 96       	adiw	r26, 0x02	; 2
   134ee:	1c 93       	st	X, r17
   134f0:	0e 93       	st	-X, r16
   134f2:	11 97       	sbiw	r26, 0x01	; 1
   134f4:	83 e1       	ldi	r24, 0x13	; 19
   134f6:	99 e0       	ldi	r25, 0x09	; 9
   134f8:	93 83       	std	Z+3, r25	; 0x03
   134fa:	82 83       	std	Z+2, r24	; 0x02
   134fc:	87 ee       	ldi	r24, 0xE7	; 231
   134fe:	92 e0       	ldi	r25, 0x02	; 2
   13500:	21 c1       	rjmp	.+578    	; 0x13744 <PrintIdle+0xb44>
		       break;
		  case 23:
		       CarriegeReturn();
   13502:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
			   //RemSpaceLag(strLoyCardHolder);
		       sprintf_P(strPrint,PSTR("     Card Holder  : %s "),strLoyCardHolder);
   13506:	00 d0       	rcall	.+0      	; 0x13508 <PrintIdle+0x908>
   13508:	00 d0       	rcall	.+0      	; 0x1350a <PrintIdle+0x90a>
   1350a:	00 d0       	rcall	.+0      	; 0x1350c <PrintIdle+0x90c>
   1350c:	ed b7       	in	r30, 0x3d	; 61
   1350e:	fe b7       	in	r31, 0x3e	; 62
   13510:	31 96       	adiw	r30, 0x01	; 1
   13512:	ad b7       	in	r26, 0x3d	; 61
   13514:	be b7       	in	r27, 0x3e	; 62
   13516:	12 96       	adiw	r26, 0x02	; 2
   13518:	1c 93       	st	X, r17
   1351a:	0e 93       	st	-X, r16
   1351c:	11 97       	sbiw	r26, 0x01	; 1
   1351e:	8b ef       	ldi	r24, 0xFB	; 251
   13520:	98 e0       	ldi	r25, 0x08	; 8
   13522:	93 83       	std	Z+3, r25	; 0x03
   13524:	82 83       	std	Z+2, r24	; 0x02
   13526:	84 ec       	ldi	r24, 0xC4	; 196
   13528:	92 e0       	ldi	r25, 0x02	; 2
   1352a:	0c c1       	rjmp	.+536    	; 0x13744 <PrintIdle+0xb44>
		       break;
		  case 24:
		       if ((strlen(strCorporateID)>0)&&(SpaceOnly(strCorporateID)==False)){
   1352c:	0a e0       	ldi	r16, 0x0A	; 10
   1352e:	1c e0       	ldi	r17, 0x0C	; 12
   13530:	80 91 0a 0c 	lds	r24, 0x0C0A
   13534:	88 23       	and	r24, r24
   13536:	d1 f1       	breq	.+116    	; 0x135ac <PrintIdle+0x9ac>
   13538:	c8 01       	movw	r24, r16
   1353a:	0e 94 c0 25 	call	0x4b80	; 0x4b80 <SpaceOnly>
   1353e:	88 23       	and	r24, r24
   13540:	a9 f5       	brne	.+106    	; 0x135ac <PrintIdle+0x9ac>
		           CarriegeReturn();
   13542:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
				   //RemSpaceLag(strCorporateID);
		           sprintf_P(strPrint,PSTR("     Corp ID      : %s"),strCorporateID);
   13546:	00 d0       	rcall	.+0      	; 0x13548 <PrintIdle+0x948>
   13548:	00 d0       	rcall	.+0      	; 0x1354a <PrintIdle+0x94a>
   1354a:	00 d0       	rcall	.+0      	; 0x1354c <PrintIdle+0x94c>
   1354c:	ed b7       	in	r30, 0x3d	; 61
   1354e:	fe b7       	in	r31, 0x3e	; 62
   13550:	31 96       	adiw	r30, 0x01	; 1
   13552:	8c eb       	ldi	r24, 0xBC	; 188
   13554:	98 e0       	ldi	r25, 0x08	; 8
   13556:	ad b7       	in	r26, 0x3d	; 61
   13558:	be b7       	in	r27, 0x3e	; 62
   1355a:	12 96       	adiw	r26, 0x02	; 2
   1355c:	9c 93       	st	X, r25
   1355e:	8e 93       	st	-X, r24
   13560:	11 97       	sbiw	r26, 0x01	; 1
   13562:	84 ee       	ldi	r24, 0xE4	; 228
   13564:	98 e0       	ldi	r25, 0x08	; 8
   13566:	1d c0       	rjmp	.+58     	; 0x135a2 <PrintIdle+0x9a2>
			   }else ClearMem(strPrint);
		       break;
		  case 25:
		       if ((strlen(strCorporateName)>0)&&(SpaceOnly(strCorporateName)==False)){
   13568:	0d ec       	ldi	r16, 0xCD	; 205
   1356a:	13 e0       	ldi	r17, 0x03	; 3
   1356c:	80 91 cd 03 	lds	r24, 0x03CD
   13570:	88 23       	and	r24, r24
   13572:	e1 f0       	breq	.+56     	; 0x135ac <PrintIdle+0x9ac>
   13574:	c8 01       	movw	r24, r16
   13576:	0e 94 c0 25 	call	0x4b80	; 0x4b80 <SpaceOnly>
   1357a:	88 23       	and	r24, r24
   1357c:	b9 f4       	brne	.+46     	; 0x135ac <PrintIdle+0x9ac>
		           CarriegeReturn();
   1357e:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
				   //RemSpaceLag(strCorporateName);
		           sprintf_P(strPrint,PSTR("     Corp Name    : %s"),strCorporateName);
   13582:	00 d0       	rcall	.+0      	; 0x13584 <PrintIdle+0x984>
   13584:	00 d0       	rcall	.+0      	; 0x13586 <PrintIdle+0x986>
   13586:	00 d0       	rcall	.+0      	; 0x13588 <PrintIdle+0x988>
   13588:	ed b7       	in	r30, 0x3d	; 61
   1358a:	fe b7       	in	r31, 0x3e	; 62
   1358c:	31 96       	adiw	r30, 0x01	; 1
   1358e:	8c eb       	ldi	r24, 0xBC	; 188
   13590:	98 e0       	ldi	r25, 0x08	; 8
   13592:	ad b7       	in	r26, 0x3d	; 61
   13594:	be b7       	in	r27, 0x3e	; 62
   13596:	12 96       	adiw	r26, 0x02	; 2
   13598:	9c 93       	st	X, r25
   1359a:	8e 93       	st	-X, r24
   1359c:	11 97       	sbiw	r26, 0x01	; 1
   1359e:	8d ec       	ldi	r24, 0xCD	; 205
   135a0:	98 e0       	ldi	r25, 0x08	; 8
   135a2:	93 83       	std	Z+3, r25	; 0x03
   135a4:	82 83       	std	Z+2, r24	; 0x02
   135a6:	15 83       	std	Z+5, r17	; 0x05
   135a8:	04 83       	std	Z+4, r16	; 0x04
   135aa:	ce c0       	rjmp	.+412    	; 0x13748 <PrintIdle+0xb48>
			   }else ClearMem(strPrint);
   135ac:	8c eb       	ldi	r24, 0xBC	; 188
   135ae:	98 e0       	ldi	r25, 0x08	; 8
   135b0:	34 ce       	rjmp	.-920    	; 0x1321a <PrintIdle+0x61a>
		       break;
		  case 26:
		       CarriegeReturn();
   135b2:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("     Gain Points  : %s"),strGainPoints);
   135b6:	00 d0       	rcall	.+0      	; 0x135b8 <PrintIdle+0x9b8>
   135b8:	00 d0       	rcall	.+0      	; 0x135ba <PrintIdle+0x9ba>
   135ba:	00 d0       	rcall	.+0      	; 0x135bc <PrintIdle+0x9bc>
   135bc:	ed b7       	in	r30, 0x3d	; 61
   135be:	fe b7       	in	r31, 0x3e	; 62
   135c0:	31 96       	adiw	r30, 0x01	; 1
   135c2:	ad b7       	in	r26, 0x3d	; 61
   135c4:	be b7       	in	r27, 0x3e	; 62
   135c6:	12 96       	adiw	r26, 0x02	; 2
   135c8:	1c 93       	st	X, r17
   135ca:	0e 93       	st	-X, r16
   135cc:	11 97       	sbiw	r26, 0x01	; 1
   135ce:	86 eb       	ldi	r24, 0xB6	; 182
   135d0:	98 e0       	ldi	r25, 0x08	; 8
   135d2:	93 83       	std	Z+3, r25	; 0x03
   135d4:	82 83       	std	Z+2, r24	; 0x02
   135d6:	8b eb       	ldi	r24, 0xBB	; 187
   135d8:	92 e0       	ldi	r25, 0x02	; 2
   135da:	b4 c0       	rjmp	.+360    	; 0x13744 <PrintIdle+0xb44>
		       break;
		  case 27:
		       CarriegeReturn();
   135dc:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("     Prev Points  : %s"),strPrevPoints);
   135e0:	00 d0       	rcall	.+0      	; 0x135e2 <PrintIdle+0x9e2>
   135e2:	00 d0       	rcall	.+0      	; 0x135e4 <PrintIdle+0x9e4>
   135e4:	00 d0       	rcall	.+0      	; 0x135e6 <PrintIdle+0x9e6>
   135e6:	ed b7       	in	r30, 0x3d	; 61
   135e8:	fe b7       	in	r31, 0x3e	; 62
   135ea:	31 96       	adiw	r30, 0x01	; 1
   135ec:	ad b7       	in	r26, 0x3d	; 61
   135ee:	be b7       	in	r27, 0x3e	; 62
   135f0:	12 96       	adiw	r26, 0x02	; 2
   135f2:	1c 93       	st	X, r17
   135f4:	0e 93       	st	-X, r16
   135f6:	11 97       	sbiw	r26, 0x01	; 1
   135f8:	8f e9       	ldi	r24, 0x9F	; 159
   135fa:	98 e0       	ldi	r25, 0x08	; 8
   135fc:	93 83       	std	Z+3, r25	; 0x03
   135fe:	82 83       	std	Z+2, r24	; 0x02
   13600:	84 e1       	ldi	r24, 0x14	; 20
   13602:	99 e0       	ldi	r25, 0x09	; 9
   13604:	9f c0       	rjmp	.+318    	; 0x13744 <PrintIdle+0xb44>
		       break;
		  case 28:
		       CarriegeReturn();
   13606:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("     Curr Points  : %s"),strLoyCurrentPoints);
   1360a:	00 d0       	rcall	.+0      	; 0x1360c <PrintIdle+0xa0c>
   1360c:	00 d0       	rcall	.+0      	; 0x1360e <PrintIdle+0xa0e>
   1360e:	00 d0       	rcall	.+0      	; 0x13610 <PrintIdle+0xa10>
   13610:	ed b7       	in	r30, 0x3d	; 61
   13612:	fe b7       	in	r31, 0x3e	; 62
   13614:	31 96       	adiw	r30, 0x01	; 1
   13616:	ad b7       	in	r26, 0x3d	; 61
   13618:	be b7       	in	r27, 0x3e	; 62
   1361a:	12 96       	adiw	r26, 0x02	; 2
   1361c:	1c 93       	st	X, r17
   1361e:	0e 93       	st	-X, r16
   13620:	11 97       	sbiw	r26, 0x01	; 1
   13622:	88 e8       	ldi	r24, 0x88	; 136
   13624:	98 e0       	ldi	r25, 0x08	; 8
   13626:	93 83       	std	Z+3, r25	; 0x03
   13628:	82 83       	std	Z+2, r24	; 0x02
   1362a:	85 e3       	ldi	r24, 0x35	; 53
   1362c:	98 e0       	ldi	r25, 0x08	; 8
   1362e:	8a c0       	rjmp	.+276    	; 0x13744 <PrintIdle+0xb44>
		       break;
		  case 29:
		       CarriegeReturn();
   13630:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("     Expiry       : %s"),strLoyExpiry);
   13634:	00 d0       	rcall	.+0      	; 0x13636 <PrintIdle+0xa36>
   13636:	00 d0       	rcall	.+0      	; 0x13638 <PrintIdle+0xa38>
   13638:	00 d0       	rcall	.+0      	; 0x1363a <PrintIdle+0xa3a>
   1363a:	ed b7       	in	r30, 0x3d	; 61
   1363c:	fe b7       	in	r31, 0x3e	; 62
   1363e:	31 96       	adiw	r30, 0x01	; 1
   13640:	ad b7       	in	r26, 0x3d	; 61
   13642:	be b7       	in	r27, 0x3e	; 62
   13644:	12 96       	adiw	r26, 0x02	; 2
   13646:	1c 93       	st	X, r17
   13648:	0e 93       	st	-X, r16
   1364a:	11 97       	sbiw	r26, 0x01	; 1
   1364c:	81 e7       	ldi	r24, 0x71	; 113
   1364e:	98 e0       	ldi	r25, 0x08	; 8
   13650:	93 83       	std	Z+3, r25	; 0x03
   13652:	82 83       	std	Z+2, r24	; 0x02
   13654:	89 e7       	ldi	r24, 0x79	; 121
   13656:	9c e0       	ldi	r25, 0x0C	; 12
   13658:	75 c0       	rjmp	.+234    	; 0x13744 <PrintIdle+0xb44>
		       break;
		  case 30:
		       CarriegeReturn();
   1365a:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
			   //RemSpaceLag(strLoyRedeemPoints);
		       sprintf_P(strPrint,PSTR("     Total Redeem : %s"),strLoyRedeemPoints);
   1365e:	00 d0       	rcall	.+0      	; 0x13660 <PrintIdle+0xa60>
   13660:	00 d0       	rcall	.+0      	; 0x13662 <PrintIdle+0xa62>
   13662:	00 d0       	rcall	.+0      	; 0x13664 <PrintIdle+0xa64>
   13664:	ed b7       	in	r30, 0x3d	; 61
   13666:	fe b7       	in	r31, 0x3e	; 62
   13668:	31 96       	adiw	r30, 0x01	; 1
   1366a:	ad b7       	in	r26, 0x3d	; 61
   1366c:	be b7       	in	r27, 0x3e	; 62
   1366e:	12 96       	adiw	r26, 0x02	; 2
   13670:	1c 93       	st	X, r17
   13672:	0e 93       	st	-X, r16
   13674:	11 97       	sbiw	r26, 0x01	; 1
   13676:	8a e5       	ldi	r24, 0x5A	; 90
   13678:	98 e0       	ldi	r25, 0x08	; 8
   1367a:	93 83       	std	Z+3, r25	; 0x03
   1367c:	82 83       	std	Z+2, r24	; 0x02
   1367e:	8a e9       	ldi	r24, 0x9A	; 154
   13680:	93 e0       	ldi	r25, 0x03	; 3
   13682:	60 c0       	rjmp	.+192    	; 0x13744 <PrintIdle+0xb44>
		       break;
		  case 31:
		       CarriegeReturn();
   13684:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
			   //RemSpaceLag(strLoyCurrMonConsumeV);
			   //FormatCurrency(strLoyCurrMonConsumeV);
		       sprintf_P(strPrint,PSTR("     Month Cons V : %s L"),strLoyCurrMonConsumeV);
   13688:	00 d0       	rcall	.+0      	; 0x1368a <PrintIdle+0xa8a>
   1368a:	00 d0       	rcall	.+0      	; 0x1368c <PrintIdle+0xa8c>
   1368c:	00 d0       	rcall	.+0      	; 0x1368e <PrintIdle+0xa8e>
   1368e:	ed b7       	in	r30, 0x3d	; 61
   13690:	fe b7       	in	r31, 0x3e	; 62
   13692:	31 96       	adiw	r30, 0x01	; 1
   13694:	ad b7       	in	r26, 0x3d	; 61
   13696:	be b7       	in	r27, 0x3e	; 62
   13698:	12 96       	adiw	r26, 0x02	; 2
   1369a:	1c 93       	st	X, r17
   1369c:	0e 93       	st	-X, r16
   1369e:	11 97       	sbiw	r26, 0x01	; 1
   136a0:	81 e4       	ldi	r24, 0x41	; 65
   136a2:	98 e0       	ldi	r25, 0x08	; 8
   136a4:	93 83       	std	Z+3, r25	; 0x03
   136a6:	82 83       	std	Z+2, r24	; 0x02
   136a8:	8d ee       	ldi	r24, 0xED	; 237
   136aa:	9b e0       	ldi	r25, 0x0B	; 11
   136ac:	4b c0       	rjmp	.+150    	; 0x13744 <PrintIdle+0xb44>
		       break;
		  case 32:
		       CarriegeReturn();
   136ae:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
			   //RemSpaceLag(strLoyCurrMonConsumeA);
			   //FormatCurrency(strLoyCurrMonConsumeA);
		       sprintf_P(strPrint,PSTR("     Month Cons A : Rp.%s"),strLoyCurrMonConsumeA);
   136b2:	00 d0       	rcall	.+0      	; 0x136b4 <PrintIdle+0xab4>
   136b4:	00 d0       	rcall	.+0      	; 0x136b6 <PrintIdle+0xab6>
   136b6:	00 d0       	rcall	.+0      	; 0x136b8 <PrintIdle+0xab8>
   136b8:	ed b7       	in	r30, 0x3d	; 61
   136ba:	fe b7       	in	r31, 0x3e	; 62
   136bc:	31 96       	adiw	r30, 0x01	; 1
   136be:	ad b7       	in	r26, 0x3d	; 61
   136c0:	be b7       	in	r27, 0x3e	; 62
   136c2:	12 96       	adiw	r26, 0x02	; 2
   136c4:	1c 93       	st	X, r17
   136c6:	0e 93       	st	-X, r16
   136c8:	11 97       	sbiw	r26, 0x01	; 1
   136ca:	87 e2       	ldi	r24, 0x27	; 39
   136cc:	98 e0       	ldi	r25, 0x08	; 8
   136ce:	93 83       	std	Z+3, r25	; 0x03
   136d0:	82 83       	std	Z+2, r24	; 0x02
   136d2:	8e e7       	ldi	r24, 0x7E	; 126
   136d4:	93 e0       	ldi	r25, 0x03	; 3
   136d6:	36 c0       	rjmp	.+108    	; 0x13744 <PrintIdle+0xb44>
		       break;
		  case 33://EndOfLoyalty
		       CarriegeReturn();
   136d8:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("    ------------------------------"));
   136dc:	00 d0       	rcall	.+0      	; 0x136de <PrintIdle+0xade>
   136de:	00 d0       	rcall	.+0      	; 0x136e0 <PrintIdle+0xae0>
   136e0:	ad b7       	in	r26, 0x3d	; 61
   136e2:	be b7       	in	r27, 0x3e	; 62
   136e4:	12 96       	adiw	r26, 0x02	; 2
   136e6:	1c 93       	st	X, r17
   136e8:	0e 93       	st	-X, r16
   136ea:	11 97       	sbiw	r26, 0x01	; 1
   136ec:	84 e0       	ldi	r24, 0x04	; 4
   136ee:	98 e0       	ldi	r25, 0x08	; 8
   136f0:	42 c0       	rjmp	.+132    	; 0x13776 <PrintIdle+0xb76>
		       break;
		  case 34:
		       CarriegeReturn();
   136f2:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("     Surcharge Dsc: %s"),strSurchargeDesc);
   136f6:	00 d0       	rcall	.+0      	; 0x136f8 <PrintIdle+0xaf8>
   136f8:	00 d0       	rcall	.+0      	; 0x136fa <PrintIdle+0xafa>
   136fa:	00 d0       	rcall	.+0      	; 0x136fc <PrintIdle+0xafc>
   136fc:	ed b7       	in	r30, 0x3d	; 61
   136fe:	fe b7       	in	r31, 0x3e	; 62
   13700:	31 96       	adiw	r30, 0x01	; 1
   13702:	ad b7       	in	r26, 0x3d	; 61
   13704:	be b7       	in	r27, 0x3e	; 62
   13706:	12 96       	adiw	r26, 0x02	; 2
   13708:	1c 93       	st	X, r17
   1370a:	0e 93       	st	-X, r16
   1370c:	11 97       	sbiw	r26, 0x01	; 1
   1370e:	8d ee       	ldi	r24, 0xED	; 237
   13710:	97 e0       	ldi	r25, 0x07	; 7
   13712:	93 83       	std	Z+3, r25	; 0x03
   13714:	82 83       	std	Z+2, r24	; 0x02
   13716:	8b ed       	ldi	r24, 0xDB	; 219
   13718:	97 e0       	ldi	r25, 0x07	; 7
   1371a:	14 c0       	rjmp	.+40     	; 0x13744 <PrintIdle+0xb44>
		       break;
		  case 35:
		       CarriegeReturn();
   1371c:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("     Surcharge Amt: %s"),strSurchargeAmount);
   13720:	00 d0       	rcall	.+0      	; 0x13722 <PrintIdle+0xb22>
   13722:	00 d0       	rcall	.+0      	; 0x13724 <PrintIdle+0xb24>
   13724:	00 d0       	rcall	.+0      	; 0x13726 <PrintIdle+0xb26>
   13726:	ed b7       	in	r30, 0x3d	; 61
   13728:	fe b7       	in	r31, 0x3e	; 62
   1372a:	31 96       	adiw	r30, 0x01	; 1
   1372c:	ad b7       	in	r26, 0x3d	; 61
   1372e:	be b7       	in	r27, 0x3e	; 62
   13730:	12 96       	adiw	r26, 0x02	; 2
   13732:	1c 93       	st	X, r17
   13734:	0e 93       	st	-X, r16
   13736:	11 97       	sbiw	r26, 0x01	; 1
   13738:	86 ed       	ldi	r24, 0xD6	; 214
   1373a:	97 e0       	ldi	r25, 0x07	; 7
   1373c:	93 83       	std	Z+3, r25	; 0x03
   1373e:	82 83       	std	Z+2, r24	; 0x02
   13740:	82 e5       	ldi	r24, 0x52	; 82
   13742:	98 e0       	ldi	r25, 0x08	; 8
   13744:	95 83       	std	Z+5, r25	; 0x05
   13746:	84 83       	std	Z+4, r24	; 0x04
   13748:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
   1374c:	ed b7       	in	r30, 0x3d	; 61
   1374e:	fe b7       	in	r31, 0x3e	; 62
   13750:	36 96       	adiw	r30, 0x06	; 6
   13752:	0f b6       	in	r0, 0x3f	; 63
   13754:	f8 94       	cli
   13756:	fe bf       	out	0x3e, r31	; 62
   13758:	0f be       	out	0x3f, r0	; 63
   1375a:	ed bf       	out	0x3d, r30	; 61
   1375c:	16 c0       	rjmp	.+44     	; 0x1378a <PrintIdle+0xb8a>
		       break;
		  case 36:
		       CarriegeReturn();
   1375e:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("    ------------------------------"));
   13762:	00 d0       	rcall	.+0      	; 0x13764 <PrintIdle+0xb64>
   13764:	00 d0       	rcall	.+0      	; 0x13766 <PrintIdle+0xb66>
   13766:	ad b7       	in	r26, 0x3d	; 61
   13768:	be b7       	in	r27, 0x3e	; 62
   1376a:	12 96       	adiw	r26, 0x02	; 2
   1376c:	1c 93       	st	X, r17
   1376e:	0e 93       	st	-X, r16
   13770:	11 97       	sbiw	r26, 0x01	; 1
   13772:	83 eb       	ldi	r24, 0xB3	; 179
   13774:	97 e0       	ldi	r25, 0x07	; 7
   13776:	14 96       	adiw	r26, 0x04	; 4
   13778:	9c 93       	st	X, r25
   1377a:	8e 93       	st	-X, r24
   1377c:	13 97       	sbiw	r26, 0x03	; 3
   1377e:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
   13782:	0f 90       	pop	r0
   13784:	0f 90       	pop	r0
   13786:	0f 90       	pop	r0
   13788:	0f 90       	pop	r0
		       break;
		  }
		  iLoop=0;iSend=0;LSend=strlen(strPrint);
   1378a:	10 92 fa 01 	sts	0x01FA, r1
   1378e:	10 92 f9 01 	sts	0x01F9, r1
   13792:	10 92 fe 01 	sts	0x01FE, r1
   13796:	10 92 fd 01 	sts	0x01FD, r1
   1379a:	ec eb       	ldi	r30, 0xBC	; 188
   1379c:	f8 e0       	ldi	r31, 0x08	; 8
   1379e:	01 90       	ld	r0, Z+
   137a0:	00 20       	and	r0, r0
   137a2:	e9 f7       	brne	.-6      	; 0x1379e <PrintIdle+0xb9e>
   137a4:	31 97       	sbiw	r30, 0x01	; 1
   137a6:	ec 5b       	subi	r30, 0xBC	; 188
   137a8:	f8 40       	sbci	r31, 0x08	; 8
   137aa:	f0 93 fc 01 	sts	0x01FC, r31
   137ae:	e0 93 fb 01 	sts	0x01FB, r30
          stPrintIdle=piPrintMessage;
   137b2:	8a e0       	ldi	r24, 0x0A	; 10
   137b4:	76 c1       	rjmp	.+748    	; 0x13aa2 <PrintIdle+0xea2>
	      break;
     case piPrintMessage:
	      if (iSend<LSend){
   137b6:	20 91 fd 01 	lds	r18, 0x01FD
   137ba:	30 91 fe 01 	lds	r19, 0x01FE
   137be:	80 91 fb 01 	lds	r24, 0x01FB
   137c2:	90 91 fc 01 	lds	r25, 0x01FC
   137c6:	28 17       	cp	r18, r24
   137c8:	39 07       	cpc	r19, r25
   137ca:	68 f4       	brcc	.+26     	; 0x137e6 <PrintIdle+0xbe6>
		      iLoop++;
   137cc:	80 91 f9 01 	lds	r24, 0x01F9
   137d0:	90 91 fa 01 	lds	r25, 0x01FA
   137d4:	01 96       	adiw	r24, 0x01	; 1
   137d6:	90 93 fa 01 	sts	0x01FA, r25
   137da:	80 93 f9 01 	sts	0x01F9, r24
			  if((iLoop%PRINT_DELAY)==0){
				 TimPrintBusy=0;
   137de:	10 92 b6 01 	sts	0x01B6, r1
				 stPrintIdle=piCheckPrintStatusMessage;
   137e2:	8c e0       	ldi	r24, 0x0C	; 12
   137e4:	5e c1       	rjmp	.+700    	; 0x13aa2 <PrintIdle+0xea2>
				 }
			  }
          else{iMessage++;
   137e6:	80 91 01 02 	lds	r24, 0x0201
   137ea:	8f 5f       	subi	r24, 0xFF	; 255
   137ec:	80 93 01 02 	sts	0x0201, r24
		      if (iMessage>MessageLine){
   137f0:	90 91 00 02 	lds	r25, 0x0200
   137f4:	98 17       	cp	r25, r24
   137f6:	30 f4       	brcc	.+12     	; 0x13804 <PrintIdle+0xc04>
			      iFooter=0;				  
   137f8:	10 92 04 02 	sts	0x0204, r1
				  CarriegeReturn();
   137fc:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
				  stPrintIdle=piLoadOperatorName;//piLoadFooter;
   13800:	85 e1       	ldi	r24, 0x15	; 21
   13802:	4f c1       	rjmp	.+670    	; 0x13aa2 <PrintIdle+0xea2>
			  }
			  else stPrintIdle=piLoadMessage;
   13804:	89 e0       	ldi	r24, 0x09	; 9
   13806:	4d c1       	rjmp	.+666    	; 0x13aa2 <PrintIdle+0xea2>
			  }
	      break;
     case piCheckPrintStatusMessage:
	      if (IsBusyPrint==False){
   13808:	80 91 b3 01 	lds	r24, 0x01B3
   1380c:	88 23       	and	r24, r24
   1380e:	09 f0       	breq	.+2      	; 0x13812 <PrintIdle+0xc12>
   13810:	40 c1       	rjmp	.+640    	; 0x13a92 <PrintIdle+0xe92>
		      uart(_COM_PRINTER,1,strPrint[iSend]);
   13812:	e0 91 fd 01 	lds	r30, 0x01FD
   13816:	f0 91 fe 01 	lds	r31, 0x01FE
   1381a:	e4 54       	subi	r30, 0x44	; 68
   1381c:	f7 4f       	sbci	r31, 0xF7	; 247
   1381e:	61 e0       	ldi	r22, 0x01	; 1
   13820:	40 81       	ld	r20, Z
   13822:	0e 94 5b a8 	call	0x150b6	; 0x150b6 <uart>
		      iSend++;
   13826:	80 91 fd 01 	lds	r24, 0x01FD
   1382a:	90 91 fe 01 	lds	r25, 0x01FE
   1382e:	01 96       	adiw	r24, 0x01	; 1
   13830:	90 93 fe 01 	sts	0x01FE, r25
   13834:	80 93 fd 01 	sts	0x01FD, r24
		      stPrintIdle=piPrintMessage;
   13838:	8a e0       	ldi	r24, 0x0A	; 10
   1383a:	29 c1       	rjmp	.+594    	; 0x13a8e <PrintIdle+0xe8e>


	//Added Operator Name:
	 case piLoadOperatorName:
	      //CheckEmpty
		  eeprom_read_block((void*) &strOperatorName, (const void*) &DefOperatorName,18);
   1383c:	8e 01       	movw	r16, r28
   1383e:	0f 5f       	subi	r16, 0xFF	; 255
   13840:	1f 4f       	sbci	r17, 0xFF	; 255
   13842:	c8 01       	movw	r24, r16
   13844:	65 e1       	ldi	r22, 0x15	; 21
   13846:	70 e0       	ldi	r23, 0x00	; 0
   13848:	42 e1       	ldi	r20, 0x12	; 18
   1384a:	50 e0       	ldi	r21, 0x00	; 0
   1384c:	0e 94 b9 ac 	call	0x15972	; 0x15972 <__eerd_block_m128>
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   13850:	ce 01       	movw	r24, r28
   13852:	40 96       	adiw	r24, 0x10	; 16
	    Dest[i]=Source[IdxSource+i];
   13854:	0f 5f       	subi	r16, 0xFF	; 255
   13856:	1f 4f       	sbci	r17, 0xFF	; 255
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   13858:	08 17       	cp	r16, r24
   1385a:	19 07       	cpc	r17, r25
   1385c:	d9 f7       	brne	.-10     	; 0x13854 <PrintIdle+0xc54>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
   1385e:	18 8a       	std	Y+16, r1	; 0x10
	//Added Operator Name:
	 case piLoadOperatorName:
	      //CheckEmpty
		  eeprom_read_block((void*) &strOperatorName, (const void*) &DefOperatorName,18);
		  StrPosCopy(strOperatorName,strOperatorName,0,15);
		  if (strlen(strOperatorName)>0){
   13860:	89 81       	ldd	r24, Y+1	; 0x01
   13862:	88 23       	and	r24, r24
   13864:	09 f4       	brne	.+2      	; 0x13868 <PrintIdle+0xc68>
   13866:	93 c0       	rjmp	.+294    	; 0x1398e <PrintIdle+0xd8e>
			  if (SpaceOnly(strOperatorName)!=True){		      				  
   13868:	7e 01       	movw	r14, r28
   1386a:	08 94       	sec
   1386c:	e1 1c       	adc	r14, r1
   1386e:	f1 1c       	adc	r15, r1
   13870:	c7 01       	movw	r24, r14
   13872:	0e 94 c0 25 	call	0x4b80	; 0x4b80 <SpaceOnly>
   13876:	81 30       	cpi	r24, 0x01	; 1
   13878:	09 f4       	brne	.+2      	; 0x1387c <PrintIdle+0xc7c>
   1387a:	89 c0       	rjmp	.+274    	; 0x1398e <PrintIdle+0xd8e>
				  sprintf_P(strPrint,PSTR("     Operator: %s"),strOperatorName);			   
   1387c:	00 d0       	rcall	.+0      	; 0x1387e <PrintIdle+0xc7e>
   1387e:	00 d0       	rcall	.+0      	; 0x13880 <PrintIdle+0xc80>
   13880:	00 d0       	rcall	.+0      	; 0x13882 <PrintIdle+0xc82>
   13882:	ed b7       	in	r30, 0x3d	; 61
   13884:	fe b7       	in	r31, 0x3e	; 62
   13886:	31 96       	adiw	r30, 0x01	; 1
   13888:	0c eb       	ldi	r16, 0xBC	; 188
   1388a:	18 e0       	ldi	r17, 0x08	; 8
   1388c:	ad b7       	in	r26, 0x3d	; 61
   1388e:	be b7       	in	r27, 0x3e	; 62
   13890:	12 96       	adiw	r26, 0x02	; 2
   13892:	1c 93       	st	X, r17
   13894:	0e 93       	st	-X, r16
   13896:	11 97       	sbiw	r26, 0x01	; 1
   13898:	81 ea       	ldi	r24, 0xA1	; 161
   1389a:	97 e0       	ldi	r25, 0x07	; 7
   1389c:	93 83       	std	Z+3, r25	; 0x03
   1389e:	82 83       	std	Z+2, r24	; 0x02
   138a0:	f5 82       	std	Z+5, r15	; 0x05
   138a2:	e4 82       	std	Z+4, r14	; 0x04
   138a4:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
			      iSend=0;iLoop=0;
   138a8:	10 92 fe 01 	sts	0x01FE, r1
   138ac:	10 92 fd 01 	sts	0x01FD, r1
   138b0:	10 92 fa 01 	sts	0x01FA, r1
   138b4:	10 92 f9 01 	sts	0x01F9, r1
				  LSend=strlen(strPrint);
   138b8:	f8 01       	movw	r30, r16
   138ba:	01 90       	ld	r0, Z+
   138bc:	00 20       	and	r0, r0
   138be:	e9 f7       	brne	.-6      	; 0x138ba <PrintIdle+0xcba>
   138c0:	8f 01       	movw	r16, r30
   138c2:	01 50       	subi	r16, 0x01	; 1
   138c4:	10 40       	sbci	r17, 0x00	; 0
   138c6:	0c 5b       	subi	r16, 0xBC	; 188
   138c8:	18 40       	sbci	r17, 0x08	; 8
   138ca:	10 93 fc 01 	sts	0x01FC, r17
   138ce:	00 93 fb 01 	sts	0x01FB, r16
				  stPrintIdle=piPrintOperatorName;
   138d2:	86 e1       	ldi	r24, 0x16	; 22
   138d4:	80 93 06 02 	sts	0x0206, r24
   138d8:	8d b7       	in	r24, 0x3d	; 61
   138da:	9e b7       	in	r25, 0x3e	; 62
   138dc:	06 96       	adiw	r24, 0x06	; 6
   138de:	0f b6       	in	r0, 0x3f	; 63
   138e0:	f8 94       	cli
   138e2:	9e bf       	out	0x3e, r25	; 62
   138e4:	0f be       	out	0x3f, r0	; 63
   138e6:	8d bf       	out	0x3d, r24	; 61
   138e8:	07 c1       	rjmp	.+526    	; 0x13af8 <PrintIdle+0xef8>
			  }else stPrintIdle=piLoadFooter;
          }  
          else stPrintIdle=piLoadFooter;
	      break;
	 case piPrintOperatorName:
		  if (iSend<LSend){
   138ea:	20 91 fd 01 	lds	r18, 0x01FD
   138ee:	30 91 fe 01 	lds	r19, 0x01FE
   138f2:	80 91 fb 01 	lds	r24, 0x01FB
   138f6:	90 91 fc 01 	lds	r25, 0x01FC
   138fa:	28 17       	cp	r18, r24
   138fc:	39 07       	cpc	r19, r25
   138fe:	68 f4       	brcc	.+26     	; 0x1391a <PrintIdle+0xd1a>
		      iLoop++;
   13900:	80 91 f9 01 	lds	r24, 0x01F9
   13904:	90 91 fa 01 	lds	r25, 0x01FA
   13908:	01 96       	adiw	r24, 0x01	; 1
   1390a:	90 93 fa 01 	sts	0x01FA, r25
   1390e:	80 93 f9 01 	sts	0x01F9, r24
			  if((iLoop%PRINT_DELAY)==0){
				  TimPrintBusy=0;
   13912:	10 92 b6 01 	sts	0x01B6, r1
				  stPrintIdle=piCheckPrintOperatorName;
   13916:	87 e1       	ldi	r24, 0x17	; 23
   13918:	c4 c0       	rjmp	.+392    	; 0x13aa2 <PrintIdle+0xea2>
				}
			  }
          else {
			  CarriegeReturn();
   1391a:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
			  CarriegeReturn();
   1391e:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
   13922:	35 c0       	rjmp	.+106    	; 0x1398e <PrintIdle+0xd8e>
			  stPrintIdle=piLoadFooter;
			  }
	      break;
	 case piCheckPrintOperatorName:
	      if (IsBusyPrint==False){
   13924:	80 91 b3 01 	lds	r24, 0x01B3
   13928:	88 23       	and	r24, r24
   1392a:	09 f0       	breq	.+2      	; 0x1392e <PrintIdle+0xd2e>
   1392c:	b2 c0       	rjmp	.+356    	; 0x13a92 <PrintIdle+0xe92>
		      uart(_COM_PRINTER,1,strPrint[iSend]);
   1392e:	e0 91 fd 01 	lds	r30, 0x01FD
   13932:	f0 91 fe 01 	lds	r31, 0x01FE
   13936:	e4 54       	subi	r30, 0x44	; 68
   13938:	f7 4f       	sbci	r31, 0xF7	; 247
   1393a:	61 e0       	ldi	r22, 0x01	; 1
   1393c:	40 81       	ld	r20, Z
   1393e:	0e 94 5b a8 	call	0x150b6	; 0x150b6 <uart>
		      iSend++;
   13942:	80 91 fd 01 	lds	r24, 0x01FD
   13946:	90 91 fe 01 	lds	r25, 0x01FE
   1394a:	01 96       	adiw	r24, 0x01	; 1
   1394c:	90 93 fe 01 	sts	0x01FE, r25
   13950:	80 93 fd 01 	sts	0x01FD, r24
		      stPrintIdle=piPrintOperatorName;
   13954:	86 e1       	ldi	r24, 0x16	; 22
   13956:	9b c0       	rjmp	.+310    	; 0x13a8e <PrintIdle+0xe8e>
	      break;

	 	       
     case piLoadFooter:
	      FillChar(strPrint,0,sizeof(strPrint));
	      eeprom_read_block((void*) &strPrint, (const void*) &DefHeaderFooter[6+iFooter], 40);
   13958:	60 91 04 02 	lds	r22, 0x0204
   1395c:	89 e2       	ldi	r24, 0x29	; 41
   1395e:	68 9f       	mul	r22, r24
   13960:	b0 01       	movw	r22, r0
   13962:	11 24       	eor	r1, r1
   13964:	63 5e       	subi	r22, 0xE3	; 227
   13966:	7c 4f       	sbci	r23, 0xFC	; 252
   13968:	8c eb       	ldi	r24, 0xBC	; 188
   1396a:	98 e0       	ldi	r25, 0x08	; 8
   1396c:	48 e2       	ldi	r20, 0x28	; 40
   1396e:	50 e0       	ldi	r21, 0x00	; 0
   13970:	0e 94 b9 ac 	call	0x15972	; 0x15972 <__eerd_block_m128>
		  iFooter++;
   13974:	80 91 04 02 	lds	r24, 0x0204
   13978:	8f 5f       	subi	r24, 0xFF	; 255
   1397a:	80 93 04 02 	sts	0x0204, r24
		  if (iFooter<=4){
   1397e:	85 30       	cpi	r24, 0x05	; 5
   13980:	90 f4       	brcc	.+36     	; 0x139a6 <PrintIdle+0xda6>
		      if (SpaceOnly(strPrint)==True){
   13982:	8c eb       	ldi	r24, 0xBC	; 188
   13984:	98 e0       	ldi	r25, 0x08	; 8
   13986:	0e 94 c0 25 	call	0x4b80	; 0x4b80 <SpaceOnly>
   1398a:	81 30       	cpi	r24, 0x01	; 1
   1398c:	11 f4       	brne	.+4      	; 0x13992 <PrintIdle+0xd92>
			      stPrintIdle=piLoadFooter;
   1398e:	8e e0       	ldi	r24, 0x0E	; 14
   13990:	88 c0       	rjmp	.+272    	; 0x13aa2 <PrintIdle+0xea2>
				  }
			  else{
			      iSend=0;
   13992:	10 92 fe 01 	sts	0x01FE, r1
   13996:	10 92 fd 01 	sts	0x01FD, r1
				  iLoop=0;
   1399a:	10 92 fa 01 	sts	0x01FA, r1
   1399e:	10 92 f9 01 	sts	0x01F9, r1
				  stPrintIdle=piPrintFooter;
   139a2:	8f e0       	ldi	r24, 0x0F	; 15
   139a4:	7e c0       	rjmp	.+252    	; 0x13aa2 <PrintIdle+0xea2>
				  //RemSpaceLag(strPrint);
				  //CarriegeReturn();
			      }
		  }else{stPrintIdle=piInitScroll;
   139a6:	81 e1       	ldi	r24, 0x11	; 17
   139a8:	7c c0       	rjmp	.+248    	; 0x13aa2 <PrintIdle+0xea2>
		        //iPrinted++;
			}
	      break;
     case piPrintFooter:
		  if (iSend<40){
   139aa:	80 91 fd 01 	lds	r24, 0x01FD
   139ae:	90 91 fe 01 	lds	r25, 0x01FE
   139b2:	88 97       	sbiw	r24, 0x28	; 40
   139b4:	68 f4       	brcc	.+26     	; 0x139d0 <PrintIdle+0xdd0>
		      iLoop++;
   139b6:	80 91 f9 01 	lds	r24, 0x01F9
   139ba:	90 91 fa 01 	lds	r25, 0x01FA
   139be:	01 96       	adiw	r24, 0x01	; 1
   139c0:	90 93 fa 01 	sts	0x01FA, r25
   139c4:	80 93 f9 01 	sts	0x01F9, r24
			  if((iLoop%PRINT_DELAY)==0){
				TimPrintBusy=0;
   139c8:	10 92 b6 01 	sts	0x01B6, r1
				stPrintIdle=piCheckPrintStatusFooter;
   139cc:	8d e0       	ldi	r24, 0x0D	; 13
   139ce:	69 c0       	rjmp	.+210    	; 0x13aa2 <PrintIdle+0xea2>
				}
			  }
          else {
		      stPrintIdle=piLoadFooter;
   139d0:	8e e0       	ldi	r24, 0x0E	; 14
   139d2:	80 93 06 02 	sts	0x0206, r24
			  CarriegeReturn();
   139d6:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
   139da:	8e c0       	rjmp	.+284    	; 0x13af8 <PrintIdle+0xef8>
			  }
	      break;
     case piCheckPrintStatusFooter:
	      if (IsBusyPrint==False){
   139dc:	80 91 b3 01 	lds	r24, 0x01B3
   139e0:	88 23       	and	r24, r24
   139e2:	09 f0       	breq	.+2      	; 0x139e6 <PrintIdle+0xde6>
   139e4:	56 c0       	rjmp	.+172    	; 0x13a92 <PrintIdle+0xe92>
		      uart(_COM_PRINTER,1,strPrint[iSend]);
   139e6:	e0 91 fd 01 	lds	r30, 0x01FD
   139ea:	f0 91 fe 01 	lds	r31, 0x01FE
   139ee:	e4 54       	subi	r30, 0x44	; 68
   139f0:	f7 4f       	sbci	r31, 0xF7	; 247
   139f2:	61 e0       	ldi	r22, 0x01	; 1
   139f4:	40 81       	ld	r20, Z
   139f6:	0e 94 5b a8 	call	0x150b6	; 0x150b6 <uart>
		      iSend++;
   139fa:	80 91 fd 01 	lds	r24, 0x01FD
   139fe:	90 91 fe 01 	lds	r25, 0x01FE
   13a02:	01 96       	adiw	r24, 0x01	; 1
   13a04:	90 93 fe 01 	sts	0x01FE, r25
   13a08:	80 93 fd 01 	sts	0x01FD, r24
		      stPrintIdle=piPrintFooter;
   13a0c:	8f e0       	ldi	r24, 0x0F	; 15
   13a0e:	3f c0       	rjmp	.+126    	; 0x13a8e <PrintIdle+0xe8e>
		      stPrintIdle=piFinishPrintIdle;
			  }
	      break;

     case piInitScroll:
	      iPrinted++;
   13a10:	90 91 f8 01 	lds	r25, 0x01F8
   13a14:	9f 5f       	subi	r25, 0xFF	; 255
   13a16:	90 93 f8 01 	sts	0x01F8, r25
		  iScroll=0;
   13a1a:	10 92 03 02 	sts	0x0203, r1
		  iLoop=0;
   13a1e:	10 92 fa 01 	sts	0x01FA, r1
   13a22:	10 92 f9 01 	sts	0x01F9, r1
		  if (iPrinted<PrintCopy){
   13a26:	80 91 f7 01 	lds	r24, 0x01F7
   13a2a:	98 17       	cp	r25, r24
   13a2c:	28 f4       	brcc	.+10     	; 0x13a38 <PrintIdle+0xe38>
		      nScroll=eeprom_read_byte(&DefPrintScrollSpace);
   13a2e:	82 e3       	ldi	r24, 0x32	; 50
   13a30:	90 e0       	ldi	r25, 0x00	; 0
   13a32:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
   13a36:	04 c0       	rjmp	.+8      	; 0x13a40 <PrintIdle+0xe40>
		  }else if (iPrinted>=PrintCopy){		  	  
		      nScroll=eeprom_read_byte(&DefPrintScrollEnd);
   13a38:	81 e3       	ldi	r24, 0x31	; 49
   13a3a:	90 e0       	ldi	r25, 0x00	; 0
   13a3c:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
   13a40:	80 93 02 02 	sts	0x0202, r24
		  if (eeprom_read_byte(&DefPrinterType)==PT_CUSTOM_TG02){
		      uart_printf(0,1,PSTR("----Scrolled2-----"));

		      stPrintIdle=piPaperCut;
		  }*/
          stPrintIdle=piScrollPaper;              
   13a44:	80 e1       	ldi	r24, 0x10	; 16
   13a46:	2d c0       	rjmp	.+90     	; 0x13aa2 <PrintIdle+0xea2>
	      break;
     case piScrollPaper:
	      iLoop++;
   13a48:	80 91 f9 01 	lds	r24, 0x01F9
   13a4c:	90 91 fa 01 	lds	r25, 0x01FA
   13a50:	01 96       	adiw	r24, 0x01	; 1
   13a52:	90 93 fa 01 	sts	0x01FA, r25
   13a56:	80 93 f9 01 	sts	0x01F9, r24
		  if (iLoop%PRINT_DELAY==0){
			  TimPrintBusy=0;
   13a5a:	10 92 b6 01 	sts	0x01B6, r1
			  stPrintIdle=piCheckPrintStatusScroll;
   13a5e:	82 e1       	ldi	r24, 0x12	; 18
   13a60:	80 93 06 02 	sts	0x0206, r24
			  }
	      if (iScroll>nScroll)stPrintIdle=piPaperCut;
   13a64:	90 91 03 02 	lds	r25, 0x0203
   13a68:	80 91 02 02 	lds	r24, 0x0202
   13a6c:	89 17       	cp	r24, r25
   13a6e:	08 f0       	brcs	.+2      	; 0x13a72 <PrintIdle+0xe72>
   13a70:	43 c0       	rjmp	.+134    	; 0x13af8 <PrintIdle+0xef8>
   13a72:	83 e1       	ldi	r24, 0x13	; 19
   13a74:	16 c0       	rjmp	.+44     	; 0x13aa2 <PrintIdle+0xea2>
	      break;
     case piCheckPrintStatusScroll:
	      if (IsBusyPrint==False){
   13a76:	80 91 b3 01 	lds	r24, 0x01B3
   13a7a:	88 23       	and	r24, r24
   13a7c:	51 f4       	brne	.+20     	; 0x13a92 <PrintIdle+0xe92>
		      iScroll++;
   13a7e:	80 91 03 02 	lds	r24, 0x0203
   13a82:	8f 5f       	subi	r24, 0xFF	; 255
   13a84:	80 93 03 02 	sts	0x0203, r24
		      CarriegeReturn();
   13a88:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
		      stPrintIdle=piScrollPaper;
   13a8c:	80 e1       	ldi	r24, 0x10	; 16
   13a8e:	80 93 06 02 	sts	0x0206, r24
		  }
		  if (TimPrintBusy>TIM_BUSY_PRINT){
   13a92:	80 91 b6 01 	lds	r24, 0x01B6
   13a96:	8b 30       	cpi	r24, 0x0B	; 11
   13a98:	78 f1       	brcs	.+94     	; 0x13af8 <PrintIdle+0xef8>
		      IsPrintERROR=True;
   13a9a:	81 e0       	ldi	r24, 0x01	; 1
   13a9c:	80 93 b1 01 	sts	0x01B1, r24
		      stPrintIdle=piFinishPrintIdle;
   13aa0:	84 e1       	ldi	r24, 0x14	; 20
   13aa2:	80 93 06 02 	sts	0x0206, r24
   13aa6:	28 c0       	rjmp	.+80     	; 0x13af8 <PrintIdle+0xef8>
	      break;
     case piPaperCut:
	      //sprintf_P(strSend,PSTR("i:%d Copy:%d"),iPrinted,PrintCopy);
		  //uart_print(0,1,strSend);

          if (iPrinted>=PrintCopy){
   13aa8:	90 91 f8 01 	lds	r25, 0x01F8
   13aac:	80 91 f7 01 	lds	r24, 0x01F7
   13ab0:	98 17       	cp	r25, r24
   13ab2:	10 f0       	brcs	.+4      	; 0x13ab8 <PrintIdle+0xeb8>
		      stPrintIdle=piFinishPrintIdle;
   13ab4:	84 e1       	ldi	r24, 0x14	; 20
   13ab6:	05 c0       	rjmp	.+10     	; 0x13ac2 <PrintIdle+0xec2>
			  }
		  else {CarriegeReturn();
   13ab8:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
		        CarriegeReturn();
   13abc:	0e 94 1f 45 	call	0x8a3e	; 0x8a3e <CarriegeReturn>
		        stPrintIdle=piInit;
   13ac0:	81 e0       	ldi	r24, 0x01	; 1
   13ac2:	80 93 06 02 	sts	0x0206, r24
		       }
		  PaperCut();
   13ac6:	0e 94 ba 45 	call	0x8b74	; 0x8b74 <PaperCut>
   13aca:	16 c0       	rjmp	.+44     	; 0x13af8 <PrintIdle+0xef8>
	      break;
     case piFinishPrintIdle:	      
	      switch(IFType){
   13acc:	80 91 00 01 	lds	r24, 0x0100
   13ad0:	81 30       	cpi	r24, 0x01	; 1
   13ad2:	19 f0       	breq	.+6      	; 0x13ada <PrintIdle+0xeda>
   13ad4:	82 30       	cpi	r24, 0x02	; 2
   13ad6:	61 f4       	brne	.+24     	; 0x13af0 <PrintIdle+0xef0>
   13ad8:	03 c0       	rjmp	.+6      	; 0x13ae0 <PrintIdle+0xee0>
		  case IT_SLAVE:
		       sendMessage04();
   13ada:	0e 94 57 92 	call	0x124ae	; 0x124ae <sendMessage04>
   13ade:	08 c0       	rjmp	.+16     	; 0x13af0 <PrintIdle+0xef0>
		       break;
		  case IT_STANDALONE:		  
		       UpdateStandaloneStatus((atoi(strFIP_ID)&0x0F),PS_PRINTED);
   13ae0:	89 eb       	ldi	r24, 0xB9	; 185
   13ae2:	97 e0       	ldi	r25, 0x07	; 7
   13ae4:	0e 94 4c aa 	call	0x15498	; 0x15498 <atoi>
   13ae8:	8f 70       	andi	r24, 0x0F	; 15
   13aea:	61 e1       	ldi	r22, 0x11	; 17
   13aec:	0e 94 2a 20 	call	0x4054	; 0x4054 <UpdateStandaloneStatus>
			   //CurrentPumpStatus[FIPAddr]=PUMP_OFF;
			   //strPumpStatus[FIPAddr]=GetPumpStatusLabel(PUMP_OFF);			   
			   //IsNewPumpStatus=True;//UpdateDisplay
		       break;
		  }
		  IsBusyIdlePrinting=False;
   13af0:	10 92 b2 01 	sts	0x01B2, r1
          stPrintIdle=piIdle;
   13af4:	10 92 06 02 	sts	0x0206, r1
	      break;	 
	 }
}
   13af8:	64 96       	adiw	r28, 0x14	; 20
   13afa:	0f b6       	in	r0, 0x3f	; 63
   13afc:	f8 94       	cli
   13afe:	de bf       	out	0x3e, r29	; 62
   13b00:	0f be       	out	0x3f, r0	; 63
   13b02:	cd bf       	out	0x3d, r28	; 61
   13b04:	cf 91       	pop	r28
   13b06:	df 91       	pop	r29
   13b08:	1f 91       	pop	r17
   13b0a:	0f 91       	pop	r16
   13b0c:	ff 90       	pop	r15
   13b0e:	ef 90       	pop	r14
   13b10:	08 95       	ret

00013b12 <systemPrinting>:
     

}

void systemPrinting(){
	 FreePrinting();
   13b12:	0e 94 5b 92 	call	0x124b6	; 0x124b6 <FreePrinting>
	 PrintIdle();
   13b16:	0e 94 00 96 	call	0x12c00	; 0x12c00 <PrintIdle>
}
   13b1a:	08 95       	ret

00013b1c <SendConfigParamater>:
          stConfigProtocol=cpWaitSend;
	      break;
	 }
}

void SendConfigParamater(){
   13b1c:	8f 92       	push	r8
   13b1e:	9f 92       	push	r9
   13b20:	af 92       	push	r10
   13b22:	bf 92       	push	r11
   13b24:	cf 92       	push	r12
   13b26:	df 92       	push	r13
   13b28:	ef 92       	push	r14
   13b2a:	ff 92       	push	r15
   13b2c:	0f 93       	push	r16
   13b2e:	1f 93       	push	r17
   13b30:	df 93       	push	r29
   13b32:	cf 93       	push	r28
   13b34:	cd b7       	in	r28, 0x3d	; 61
   13b36:	de b7       	in	r29, 0x3e	; 62
   13b38:	c5 56       	subi	r28, 0x65	; 101
   13b3a:	d0 40       	sbci	r29, 0x00	; 0
   13b3c:	0f b6       	in	r0, 0x3f	; 63
   13b3e:	f8 94       	cli
   13b40:	de bf       	out	0x3e, r29	; 62
   13b42:	0f be       	out	0x3f, r0	; 63
   13b44:	cd bf       	out	0x3d, r28	; 61
char i,j,strSend[60];
char strEEPROM[41],xEEPROM;

     //Start
	 uart_printf(1,0,PSTR("<"));
   13b46:	81 e0       	ldi	r24, 0x01	; 1
   13b48:	60 e0       	ldi	r22, 0x00	; 0
   13b4a:	46 ee       	ldi	r20, 0xE6	; 230
   13b4c:	53 e2       	ldi	r21, 0x23	; 35
   13b4e:	0e 94 a0 a8 	call	0x15140	; 0x15140 <uart_printf>
   13b52:	07 e2       	ldi	r16, 0x27	; 39
   13b54:	12 e0       	ldi	r17, 0x02	; 2
     //Header Footer 400
	 for (i=0;i<10;i++){
	      eeprom_read_block((void*) &strEEPROM, (const void*) &DefHeaderFooter[i],sizeof(DefHeaderFooter[i]));
   13b56:	5e 01       	movw	r10, r28
   13b58:	08 94       	sec
   13b5a:	a1 1c       	adc	r10, r1
   13b5c:	b1 1c       	adc	r11, r1
		  FillChar(strSend,0,sizeof(strSend));
	      sprintf_P(strSend,PSTR("%s"),strEEPROM);
   13b5e:	ba e2       	ldi	r27, 0x2A	; 42
   13b60:	eb 2e       	mov	r14, r27
   13b62:	f1 2c       	mov	r15, r1
   13b64:	ec 0e       	add	r14, r28
   13b66:	fd 1e       	adc	r15, r29
   13b68:	a3 ee       	ldi	r26, 0xE3	; 227
   13b6a:	ca 2e       	mov	r12, r26
   13b6c:	a3 e2       	ldi	r26, 0x23	; 35
   13b6e:	da 2e       	mov	r13, r26

     //Start
	 uart_printf(1,0,PSTR("<"));
     //Header Footer 400
	 for (i=0;i<10;i++){
	      eeprom_read_block((void*) &strEEPROM, (const void*) &DefHeaderFooter[i],sizeof(DefHeaderFooter[i]));
   13b70:	c5 01       	movw	r24, r10
   13b72:	b8 01       	movw	r22, r16
   13b74:	49 e2       	ldi	r20, 0x29	; 41
   13b76:	50 e0       	ldi	r21, 0x00	; 0
   13b78:	0e 94 b9 ac 	call	0x15972	; 0x15972 <__eerd_block_m128>
		  FillChar(strSend,0,sizeof(strSend));
	      sprintf_P(strSend,PSTR("%s"),strEEPROM);
   13b7c:	00 d0       	rcall	.+0      	; 0x13b7e <SendConfigParamater+0x62>
   13b7e:	00 d0       	rcall	.+0      	; 0x13b80 <SendConfigParamater+0x64>
   13b80:	00 d0       	rcall	.+0      	; 0x13b82 <SendConfigParamater+0x66>
   13b82:	ed b7       	in	r30, 0x3d	; 61
   13b84:	fe b7       	in	r31, 0x3e	; 62
   13b86:	31 96       	adiw	r30, 0x01	; 1
   13b88:	ad b7       	in	r26, 0x3d	; 61
   13b8a:	be b7       	in	r27, 0x3e	; 62
   13b8c:	12 96       	adiw	r26, 0x02	; 2
   13b8e:	fc 92       	st	X, r15
   13b90:	ee 92       	st	-X, r14
   13b92:	11 97       	sbiw	r26, 0x01	; 1
   13b94:	d3 82       	std	Z+3, r13	; 0x03
   13b96:	c2 82       	std	Z+2, r12	; 0x02
   13b98:	b5 82       	std	Z+5, r11	; 0x05
   13b9a:	a4 82       	std	Z+4, r10	; 0x04
   13b9c:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
		  AddSpaceLag(strSend,40);
   13ba0:	ed b7       	in	r30, 0x3d	; 61
   13ba2:	fe b7       	in	r31, 0x3e	; 62
   13ba4:	36 96       	adiw	r30, 0x06	; 6
   13ba6:	0f b6       	in	r0, 0x3f	; 63
   13ba8:	f8 94       	cli
   13baa:	fe bf       	out	0x3e, r31	; 62
   13bac:	0f be       	out	0x3f, r0	; 63
   13bae:	ed bf       	out	0x3d, r30	; 61
   13bb0:	c7 01       	movw	r24, r14
   13bb2:	68 e2       	ldi	r22, 0x28	; 40
   13bb4:	0e 94 64 2f 	call	0x5ec8	; 0x5ec8 <AddSpaceLag>
		  uart_print(1,0,strSend);
   13bb8:	81 e0       	ldi	r24, 0x01	; 1
   13bba:	60 e0       	ldi	r22, 0x00	; 0
   13bbc:	a7 01       	movw	r20, r14
   13bbe:	0e 94 78 a8 	call	0x150f0	; 0x150f0 <uart_print>
   13bc2:	07 5d       	subi	r16, 0xD7	; 215
   13bc4:	1f 4f       	sbci	r17, 0xFF	; 255
char strEEPROM[41],xEEPROM;

     //Start
	 uart_printf(1,0,PSTR("<"));
     //Header Footer 400
	 for (i=0;i<10;i++){
   13bc6:	f3 e0       	ldi	r31, 0x03	; 3
   13bc8:	01 3c       	cpi	r16, 0xC1	; 193
   13bca:	1f 07       	cpc	r17, r31
   13bcc:	89 f6       	brne	.-94     	; 0x13b70 <SendConfigParamater+0x54>
   13bce:	0b eb       	ldi	r16, 0xBB	; 187
   13bd0:	10 e0       	ldi	r17, 0x00	; 0
		  AddSpaceLag(strSend,40);
		  uart_print(1,0,strSend);
	 }
	 //ProductName 72 
	 for (i=0;i<6;i++){
		 eeprom_read_block((void*) &strEEPROM, (const void*) &DefProductName[i],sizeof(DefProductName[i]));
   13bd2:	5e 01       	movw	r10, r28
   13bd4:	08 94       	sec
   13bd6:	a1 1c       	adc	r10, r1
   13bd8:	b1 1c       	adc	r11, r1
		 FillChar(strSend,0,sizeof(strSend));
	     sprintf_P(strSend,PSTR("%s"),strEEPROM);
   13bda:	fa e2       	ldi	r31, 0x2A	; 42
   13bdc:	ef 2e       	mov	r14, r31
   13bde:	f1 2c       	mov	r15, r1
   13be0:	ec 0e       	add	r14, r28
   13be2:	fd 1e       	adc	r15, r29
   13be4:	e0 ee       	ldi	r30, 0xE0	; 224
   13be6:	ce 2e       	mov	r12, r30
   13be8:	e3 e2       	ldi	r30, 0x23	; 35
   13bea:	de 2e       	mov	r13, r30
		  AddSpaceLag(strSend,40);
		  uart_print(1,0,strSend);
	 }
	 //ProductName 72 
	 for (i=0;i<6;i++){
		 eeprom_read_block((void*) &strEEPROM, (const void*) &DefProductName[i],sizeof(DefProductName[i]));
   13bec:	c5 01       	movw	r24, r10
   13bee:	b8 01       	movw	r22, r16
   13bf0:	4d e0       	ldi	r20, 0x0D	; 13
   13bf2:	50 e0       	ldi	r21, 0x00	; 0
   13bf4:	0e 94 b9 ac 	call	0x15972	; 0x15972 <__eerd_block_m128>
		 FillChar(strSend,0,sizeof(strSend));
	     sprintf_P(strSend,PSTR("%s"),strEEPROM);
   13bf8:	00 d0       	rcall	.+0      	; 0x13bfa <SendConfigParamater+0xde>
   13bfa:	00 d0       	rcall	.+0      	; 0x13bfc <SendConfigParamater+0xe0>
   13bfc:	00 d0       	rcall	.+0      	; 0x13bfe <SendConfigParamater+0xe2>
   13bfe:	ed b7       	in	r30, 0x3d	; 61
   13c00:	fe b7       	in	r31, 0x3e	; 62
   13c02:	31 96       	adiw	r30, 0x01	; 1
   13c04:	ad b7       	in	r26, 0x3d	; 61
   13c06:	be b7       	in	r27, 0x3e	; 62
   13c08:	12 96       	adiw	r26, 0x02	; 2
   13c0a:	fc 92       	st	X, r15
   13c0c:	ee 92       	st	-X, r14
   13c0e:	11 97       	sbiw	r26, 0x01	; 1
   13c10:	d3 82       	std	Z+3, r13	; 0x03
   13c12:	c2 82       	std	Z+2, r12	; 0x02
   13c14:	b5 82       	std	Z+5, r11	; 0x05
   13c16:	a4 82       	std	Z+4, r10	; 0x04
   13c18:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
		 AddSpaceLag(strSend,12);
   13c1c:	ed b7       	in	r30, 0x3d	; 61
   13c1e:	fe b7       	in	r31, 0x3e	; 62
   13c20:	36 96       	adiw	r30, 0x06	; 6
   13c22:	0f b6       	in	r0, 0x3f	; 63
   13c24:	f8 94       	cli
   13c26:	fe bf       	out	0x3e, r31	; 62
   13c28:	0f be       	out	0x3f, r0	; 63
   13c2a:	ed bf       	out	0x3d, r30	; 61
   13c2c:	c7 01       	movw	r24, r14
   13c2e:	6c e0       	ldi	r22, 0x0C	; 12
   13c30:	0e 94 64 2f 	call	0x5ec8	; 0x5ec8 <AddSpaceLag>
		 uart_print(1,0,strSend);
   13c34:	81 e0       	ldi	r24, 0x01	; 1
   13c36:	60 e0       	ldi	r22, 0x00	; 0
   13c38:	a7 01       	movw	r20, r14
   13c3a:	0e 94 78 a8 	call	0x150f0	; 0x150f0 <uart_print>
   13c3e:	03 5f       	subi	r16, 0xF3	; 243
   13c40:	1f 4f       	sbci	r17, 0xFF	; 255
	      sprintf_P(strSend,PSTR("%s"),strEEPROM);
		  AddSpaceLag(strSend,40);
		  uart_print(1,0,strSend);
	 }
	 //ProductName 72 
	 for (i=0;i<6;i++){
   13c42:	f1 e0       	ldi	r31, 0x01	; 1
   13c44:	09 30       	cpi	r16, 0x09	; 9
   13c46:	1f 07       	cpc	r17, r31
   13c48:	89 f6       	brne	.-94     	; 0x13bec <SendConfigParamater+0xd0>
   13c4a:	05 e8       	ldi	r16, 0x85	; 133
   13c4c:	10 e0       	ldi	r17, 0x00	; 0
		 AddSpaceLag(strSend,12);
		 uart_print(1,0,strSend);
	 }
	 //ProductPrice 30
	 for (i=0;i<6;i++){
		 eeprom_read_block((void*) &strEEPROM, (const void*) &DefProductPrice[i],sizeof(DefProductPrice[i]));
   13c4e:	5e 01       	movw	r10, r28
   13c50:	08 94       	sec
   13c52:	a1 1c       	adc	r10, r1
   13c54:	b1 1c       	adc	r11, r1
		 FillChar(strSend,0,sizeof(strSend));
	     sprintf_P(strSend,PSTR("%s"),strEEPROM);
   13c56:	7a e2       	ldi	r23, 0x2A	; 42
   13c58:	e7 2e       	mov	r14, r23
   13c5a:	f1 2c       	mov	r15, r1
   13c5c:	ec 0e       	add	r14, r28
   13c5e:	fd 1e       	adc	r15, r29
   13c60:	6d ed       	ldi	r22, 0xDD	; 221
   13c62:	c6 2e       	mov	r12, r22
   13c64:	63 e2       	ldi	r22, 0x23	; 35
   13c66:	d6 2e       	mov	r13, r22
		 AddSpaceLag(strSend,12);
		 uart_print(1,0,strSend);
	 }
	 //ProductPrice 30
	 for (i=0;i<6;i++){
		 eeprom_read_block((void*) &strEEPROM, (const void*) &DefProductPrice[i],sizeof(DefProductPrice[i]));
   13c68:	c5 01       	movw	r24, r10
   13c6a:	b8 01       	movw	r22, r16
   13c6c:	49 e0       	ldi	r20, 0x09	; 9
   13c6e:	50 e0       	ldi	r21, 0x00	; 0
   13c70:	0e 94 b9 ac 	call	0x15972	; 0x15972 <__eerd_block_m128>
		 FillChar(strSend,0,sizeof(strSend));
	     sprintf_P(strSend,PSTR("%s"),strEEPROM);
   13c74:	00 d0       	rcall	.+0      	; 0x13c76 <SendConfigParamater+0x15a>
   13c76:	00 d0       	rcall	.+0      	; 0x13c78 <SendConfigParamater+0x15c>
   13c78:	00 d0       	rcall	.+0      	; 0x13c7a <SendConfigParamater+0x15e>
   13c7a:	ed b7       	in	r30, 0x3d	; 61
   13c7c:	fe b7       	in	r31, 0x3e	; 62
   13c7e:	31 96       	adiw	r30, 0x01	; 1
   13c80:	ad b7       	in	r26, 0x3d	; 61
   13c82:	be b7       	in	r27, 0x3e	; 62
   13c84:	12 96       	adiw	r26, 0x02	; 2
   13c86:	fc 92       	st	X, r15
   13c88:	ee 92       	st	-X, r14
   13c8a:	11 97       	sbiw	r26, 0x01	; 1
   13c8c:	d3 82       	std	Z+3, r13	; 0x03
   13c8e:	c2 82       	std	Z+2, r12	; 0x02
   13c90:	b5 82       	std	Z+5, r11	; 0x05
   13c92:	a4 82       	std	Z+4, r10	; 0x04
   13c94:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
		 AddSpaceLag(strSend,5);
   13c98:	ed b7       	in	r30, 0x3d	; 61
   13c9a:	fe b7       	in	r31, 0x3e	; 62
   13c9c:	36 96       	adiw	r30, 0x06	; 6
   13c9e:	0f b6       	in	r0, 0x3f	; 63
   13ca0:	f8 94       	cli
   13ca2:	fe bf       	out	0x3e, r31	; 62
   13ca4:	0f be       	out	0x3f, r0	; 63
   13ca6:	ed bf       	out	0x3d, r30	; 61
   13ca8:	c7 01       	movw	r24, r14
   13caa:	65 e0       	ldi	r22, 0x05	; 5
   13cac:	0e 94 64 2f 	call	0x5ec8	; 0x5ec8 <AddSpaceLag>
		 uart_print(1,0,strSend);
   13cb0:	81 e0       	ldi	r24, 0x01	; 1
   13cb2:	60 e0       	ldi	r22, 0x00	; 0
   13cb4:	a7 01       	movw	r20, r14
   13cb6:	0e 94 78 a8 	call	0x150f0	; 0x150f0 <uart_print>
   13cba:	07 5f       	subi	r16, 0xF7	; 247
   13cbc:	1f 4f       	sbci	r17, 0xFF	; 255
	     sprintf_P(strSend,PSTR("%s"),strEEPROM);
		 AddSpaceLag(strSend,12);
		 uart_print(1,0,strSend);
	 }
	 //ProductPrice 30
	 for (i=0;i<6;i++){
   13cbe:	f0 e0       	ldi	r31, 0x00	; 0
   13cc0:	0b 3b       	cpi	r16, 0xBB	; 187
   13cc2:	1f 07       	cpc	r17, r31
   13cc4:	89 f6       	brne	.-94     	; 0x13c68 <SendConfigParamater+0x14c>
   13cc6:	05 e4       	ldi	r16, 0x45	; 69
   13cc8:	10 e0       	ldi	r17, 0x00	; 0
	 //PumpID Config 8
	 for (i=0;i<8;i++){
	      xEEPROM=eeprom_read_byte(&DefPumpMap[i]);
		  if (xEEPROM>=100)xEEPROM=0;
		  FillChar(strSend,0,sizeof(strSend));
	      sprintf_P(strSend,PSTR("%.2d"),xEEPROM);
   13cca:	5a e2       	ldi	r21, 0x2A	; 42
   13ccc:	e5 2e       	mov	r14, r21
   13cce:	f1 2c       	mov	r15, r1
   13cd0:	ec 0e       	add	r14, r28
   13cd2:	fd 1e       	adc	r15, r29
   13cd4:	48 ed       	ldi	r20, 0xD8	; 216
   13cd6:	c4 2e       	mov	r12, r20
   13cd8:	43 e2       	ldi	r20, 0x23	; 35
   13cda:	d4 2e       	mov	r13, r20
		 AddSpaceLag(strSend,5);
		 uart_print(1,0,strSend);
	 }
	 //PumpID Config 8
	 for (i=0;i<8;i++){
	      xEEPROM=eeprom_read_byte(&DefPumpMap[i]);
   13cdc:	c8 01       	movw	r24, r16
   13cde:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
		  if (xEEPROM>=100)xEEPROM=0;
   13ce2:	84 36       	cpi	r24, 0x64	; 100
   13ce4:	08 f0       	brcs	.+2      	; 0x13ce8 <SendConfigParamater+0x1cc>
   13ce6:	80 e0       	ldi	r24, 0x00	; 0
		  FillChar(strSend,0,sizeof(strSend));
	      sprintf_P(strSend,PSTR("%.2d"),xEEPROM);
   13ce8:	00 d0       	rcall	.+0      	; 0x13cea <SendConfigParamater+0x1ce>
   13cea:	00 d0       	rcall	.+0      	; 0x13cec <SendConfigParamater+0x1d0>
   13cec:	00 d0       	rcall	.+0      	; 0x13cee <SendConfigParamater+0x1d2>
   13cee:	ed b7       	in	r30, 0x3d	; 61
   13cf0:	fe b7       	in	r31, 0x3e	; 62
   13cf2:	31 96       	adiw	r30, 0x01	; 1
   13cf4:	ad b7       	in	r26, 0x3d	; 61
   13cf6:	be b7       	in	r27, 0x3e	; 62
   13cf8:	12 96       	adiw	r26, 0x02	; 2
   13cfa:	fc 92       	st	X, r15
   13cfc:	ee 92       	st	-X, r14
   13cfe:	11 97       	sbiw	r26, 0x01	; 1
   13d00:	d3 82       	std	Z+3, r13	; 0x03
   13d02:	c2 82       	std	Z+2, r12	; 0x02
   13d04:	84 83       	std	Z+4, r24	; 0x04
   13d06:	15 82       	std	Z+5, r1	; 0x05
   13d08:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
		  AddSpaceLag(strSend,2);
   13d0c:	ed b7       	in	r30, 0x3d	; 61
   13d0e:	fe b7       	in	r31, 0x3e	; 62
   13d10:	36 96       	adiw	r30, 0x06	; 6
   13d12:	0f b6       	in	r0, 0x3f	; 63
   13d14:	f8 94       	cli
   13d16:	fe bf       	out	0x3e, r31	; 62
   13d18:	0f be       	out	0x3f, r0	; 63
   13d1a:	ed bf       	out	0x3d, r30	; 61
   13d1c:	c7 01       	movw	r24, r14
   13d1e:	62 e0       	ldi	r22, 0x02	; 2
   13d20:	0e 94 64 2f 	call	0x5ec8	; 0x5ec8 <AddSpaceLag>
		 uart_print(1,0,strSend);
   13d24:	81 e0       	ldi	r24, 0x01	; 1
   13d26:	60 e0       	ldi	r22, 0x00	; 0
   13d28:	a7 01       	movw	r20, r14
   13d2a:	0e 94 78 a8 	call	0x150f0	; 0x150f0 <uart_print>
   13d2e:	0f 5f       	subi	r16, 0xFF	; 255
   13d30:	1f 4f       	sbci	r17, 0xFF	; 255
	     sprintf_P(strSend,PSTR("%s"),strEEPROM);
		 AddSpaceLag(strSend,5);
		 uart_print(1,0,strSend);
	 }
	 //PumpID Config 8
	 for (i=0;i<8;i++){
   13d32:	f0 e0       	ldi	r31, 0x00	; 0
   13d34:	0d 34       	cpi	r16, 0x4D	; 77
   13d36:	1f 07       	cpc	r17, r31
   13d38:	89 f6       	brne	.-94     	; 0x13cdc <SendConfigParamater+0x1c0>
   13d3a:	35 e5       	ldi	r19, 0x55	; 85
   13d3c:	e3 2e       	mov	r14, r19
   13d3e:	30 e0       	ldi	r19, 0x00	; 0
   13d40:	f3 2e       	mov	r15, r19
	 //PumpID NozzleConfig 48
	 for (i=0;i<8;i++){
	      for (j=0;j<6;j++){
		       xEEPROM=eeprom_read_byte(&DefNozzleMap[i][j]);     
			   if (xEEPROM>=10)xEEPROM=0;
			   sprintf_P(strSend,PSTR("%d"),xEEPROM);
   13d42:	2a e2       	ldi	r18, 0x2A	; 42
   13d44:	a2 2e       	mov	r10, r18
   13d46:	b1 2c       	mov	r11, r1
   13d48:	ac 0e       	add	r10, r28
   13d4a:	bd 1e       	adc	r11, r29
   13d4c:	95 ed       	ldi	r25, 0xD5	; 213
   13d4e:	89 2e       	mov	r8, r25
   13d50:	93 e2       	ldi	r25, 0x23	; 35
   13d52:	99 2e       	mov	r9, r25
   13d54:	34 c0       	rjmp	.+104    	; 0x13dbe <SendConfigParamater+0x2a2>
		 uart_print(1,0,strSend);
	 }
	 //PumpID NozzleConfig 48
	 for (i=0;i<8;i++){
	      for (j=0;j<6;j++){
		       xEEPROM=eeprom_read_byte(&DefNozzleMap[i][j]);     
   13d56:	c8 01       	movw	r24, r16
   13d58:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
			   if (xEEPROM>=10)xEEPROM=0;
   13d5c:	8a 30       	cpi	r24, 0x0A	; 10
   13d5e:	08 f0       	brcs	.+2      	; 0x13d62 <SendConfigParamater+0x246>
   13d60:	80 e0       	ldi	r24, 0x00	; 0
			   sprintf_P(strSend,PSTR("%d"),xEEPROM);
   13d62:	00 d0       	rcall	.+0      	; 0x13d64 <SendConfigParamater+0x248>
   13d64:	00 d0       	rcall	.+0      	; 0x13d66 <SendConfigParamater+0x24a>
   13d66:	00 d0       	rcall	.+0      	; 0x13d68 <SendConfigParamater+0x24c>
   13d68:	ed b7       	in	r30, 0x3d	; 61
   13d6a:	fe b7       	in	r31, 0x3e	; 62
   13d6c:	31 96       	adiw	r30, 0x01	; 1
   13d6e:	ad b7       	in	r26, 0x3d	; 61
   13d70:	be b7       	in	r27, 0x3e	; 62
   13d72:	12 96       	adiw	r26, 0x02	; 2
   13d74:	bc 92       	st	X, r11
   13d76:	ae 92       	st	-X, r10
   13d78:	11 97       	sbiw	r26, 0x01	; 1
   13d7a:	93 82       	std	Z+3, r9	; 0x03
   13d7c:	82 82       	std	Z+2, r8	; 0x02
   13d7e:	84 83       	std	Z+4, r24	; 0x04
   13d80:	15 82       	std	Z+5, r1	; 0x05
   13d82:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
			   uart_print(1,0,strSend);
   13d86:	ed b7       	in	r30, 0x3d	; 61
   13d88:	fe b7       	in	r31, 0x3e	; 62
   13d8a:	36 96       	adiw	r30, 0x06	; 6
   13d8c:	0f b6       	in	r0, 0x3f	; 63
   13d8e:	f8 94       	cli
   13d90:	fe bf       	out	0x3e, r31	; 62
   13d92:	0f be       	out	0x3f, r0	; 63
   13d94:	ed bf       	out	0x3d, r30	; 61
   13d96:	81 e0       	ldi	r24, 0x01	; 1
   13d98:	60 e0       	ldi	r22, 0x00	; 0
   13d9a:	a5 01       	movw	r20, r10
   13d9c:	0e 94 78 a8 	call	0x150f0	; 0x150f0 <uart_print>
		  AddSpaceLag(strSend,2);
		 uart_print(1,0,strSend);
	 }
	 //PumpID NozzleConfig 48
	 for (i=0;i<8;i++){
	      for (j=0;j<6;j++){
   13da0:	d3 94       	inc	r13
   13da2:	0f 5f       	subi	r16, 0xFF	; 255
   13da4:	1f 4f       	sbci	r17, 0xFF	; 255
   13da6:	f6 e0       	ldi	r31, 0x06	; 6
   13da8:	df 16       	cp	r13, r31
   13daa:	a9 f6       	brne	.-86     	; 0x13d56 <SendConfigParamater+0x23a>
   13dac:	86 e0       	ldi	r24, 0x06	; 6
   13dae:	90 e0       	ldi	r25, 0x00	; 0
   13db0:	e8 0e       	add	r14, r24
   13db2:	f9 1e       	adc	r15, r25
	      sprintf_P(strSend,PSTR("%.2d"),xEEPROM);
		  AddSpaceLag(strSend,2);
		 uart_print(1,0,strSend);
	 }
	 //PumpID NozzleConfig 48
	 for (i=0;i<8;i++){
   13db4:	95 e8       	ldi	r25, 0x85	; 133
   13db6:	e9 16       	cp	r14, r25
   13db8:	90 e0       	ldi	r25, 0x00	; 0
   13dba:	f9 06       	cpc	r15, r25
   13dbc:	19 f0       	breq	.+6      	; 0x13dc4 <SendConfigParamater+0x2a8>
   13dbe:	87 01       	movw	r16, r14
   13dc0:	dd 24       	eor	r13, r13
   13dc2:	c9 cf       	rjmp	.-110    	; 0x13d56 <SendConfigParamater+0x23a>
			   sprintf_P(strSend,PSTR("%d"),xEEPROM);
			   uart_print(1,0,strSend);
		  }
	 }
	 //PrintNoMoney
	 xEEPROM=eeprom_read_byte(&DefPrintMoney);
   13dc4:	81 ec       	ldi	r24, 0xC1	; 193
   13dc6:	93 e0       	ldi	r25, 0x03	; 3
   13dc8:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
	 if (xEEPROM==True){
   13dcc:	81 30       	cpi	r24, 0x01	; 1
   13dce:	79 f4       	brne	.+30     	; 0x13dee <SendConfigParamater+0x2d2>
		 sprintf_P(strSend,PSTR("1"));
   13dd0:	00 d0       	rcall	.+0      	; 0x13dd2 <SendConfigParamater+0x2b6>
   13dd2:	00 d0       	rcall	.+0      	; 0x13dd4 <SendConfigParamater+0x2b8>
   13dd4:	ad b7       	in	r26, 0x3d	; 61
   13dd6:	be b7       	in	r27, 0x3e	; 62
   13dd8:	12 96       	adiw	r26, 0x02	; 2
   13dda:	bc 92       	st	X, r11
   13ddc:	ae 92       	st	-X, r10
   13dde:	11 97       	sbiw	r26, 0x01	; 1
   13de0:	83 ed       	ldi	r24, 0xD3	; 211
   13de2:	93 e2       	ldi	r25, 0x23	; 35
   13de4:	14 96       	adiw	r26, 0x04	; 4
   13de6:	9c 93       	st	X, r25
   13de8:	8e 93       	st	-X, r24
   13dea:	13 97       	sbiw	r26, 0x03	; 3
   13dec:	0a c0       	rjmp	.+20     	; 0x13e02 <SendConfigParamater+0x2e6>
	 }else{
	     sprintf_P(strSend,PSTR("0"));
   13dee:	00 d0       	rcall	.+0      	; 0x13df0 <SendConfigParamater+0x2d4>
   13df0:	00 d0       	rcall	.+0      	; 0x13df2 <SendConfigParamater+0x2d6>
   13df2:	ed b7       	in	r30, 0x3d	; 61
   13df4:	fe b7       	in	r31, 0x3e	; 62
   13df6:	b2 82       	std	Z+2, r11	; 0x02
   13df8:	a1 82       	std	Z+1, r10	; 0x01
   13dfa:	81 ed       	ldi	r24, 0xD1	; 209
   13dfc:	93 e2       	ldi	r25, 0x23	; 35
   13dfe:	94 83       	std	Z+4, r25	; 0x04
   13e00:	83 83       	std	Z+3, r24	; 0x03
   13e02:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
   13e06:	0f 90       	pop	r0
   13e08:	0f 90       	pop	r0
   13e0a:	0f 90       	pop	r0
   13e0c:	0f 90       	pop	r0
	 }uart_print(1,0,strSend);
   13e0e:	8e 01       	movw	r16, r28
   13e10:	06 5d       	subi	r16, 0xD6	; 214
   13e12:	1f 4f       	sbci	r17, 0xFF	; 255
   13e14:	81 e0       	ldi	r24, 0x01	; 1
   13e16:	60 e0       	ldi	r22, 0x00	; 0
   13e18:	a8 01       	movw	r20, r16
   13e1a:	0e 94 78 a8 	call	0x150f0	; 0x150f0 <uart_print>
	 //TermId
     xEEPROM=eeprom_read_byte(&DefIFT_ID);     
   13e1e:	80 e0       	ldi	r24, 0x00	; 0
   13e20:	90 e0       	ldi	r25, 0x00	; 0
   13e22:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
     sprintf_P(strSend,PSTR("%.2d"),xEEPROM);
   13e26:	00 d0       	rcall	.+0      	; 0x13e28 <SendConfigParamater+0x30c>
   13e28:	00 d0       	rcall	.+0      	; 0x13e2a <SendConfigParamater+0x30e>
   13e2a:	00 d0       	rcall	.+0      	; 0x13e2c <SendConfigParamater+0x310>
   13e2c:	ed b7       	in	r30, 0x3d	; 61
   13e2e:	fe b7       	in	r31, 0x3e	; 62
   13e30:	31 96       	adiw	r30, 0x01	; 1
   13e32:	ad b7       	in	r26, 0x3d	; 61
   13e34:	be b7       	in	r27, 0x3e	; 62
   13e36:	12 96       	adiw	r26, 0x02	; 2
   13e38:	1c 93       	st	X, r17
   13e3a:	0e 93       	st	-X, r16
   13e3c:	11 97       	sbiw	r26, 0x01	; 1
   13e3e:	2c ec       	ldi	r18, 0xCC	; 204
   13e40:	33 e2       	ldi	r19, 0x23	; 35
   13e42:	33 83       	std	Z+3, r19	; 0x03
   13e44:	22 83       	std	Z+2, r18	; 0x02
   13e46:	84 83       	std	Z+4, r24	; 0x04
   13e48:	15 82       	std	Z+5, r1	; 0x05
   13e4a:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
     uart_print(1,0,strSend);
   13e4e:	ed b7       	in	r30, 0x3d	; 61
   13e50:	fe b7       	in	r31, 0x3e	; 62
   13e52:	36 96       	adiw	r30, 0x06	; 6
   13e54:	0f b6       	in	r0, 0x3f	; 63
   13e56:	f8 94       	cli
   13e58:	fe bf       	out	0x3e, r31	; 62
   13e5a:	0f be       	out	0x3f, r0	; 63
   13e5c:	ed bf       	out	0x3d, r30	; 61
   13e5e:	81 e0       	ldi	r24, 0x01	; 1
   13e60:	60 e0       	ldi	r22, 0x00	; 0
   13e62:	a8 01       	movw	r20, r16
   13e64:	0e 94 78 a8 	call	0x150f0	; 0x150f0 <uart_print>
   13e68:	8d e4       	ldi	r24, 0x4D	; 77
   13e6a:	e8 2e       	mov	r14, r24
   13e6c:	80 e0       	ldi	r24, 0x00	; 0
   13e6e:	f8 2e       	mov	r15, r24
	 //PumpLabel
     for (i=0;i<8;i++){
	      xEEPROM=eeprom_read_byte(&DefPumpLabel[i]);
		  if (xEEPROM>=100)xEEPROM=0;
		  FillChar(strSend,0,sizeof(strSend));
	      sprintf_P(strSend,PSTR("%.2d"),xEEPROM);
   13e70:	d0 2e       	mov	r13, r16
   13e72:	01 2f       	mov	r16, r17
   13e74:	b7 ec       	ldi	r27, 0xC7	; 199
   13e76:	ab 2e       	mov	r10, r27
   13e78:	b3 e2       	ldi	r27, 0x23	; 35
   13e7a:	bb 2e       	mov	r11, r27
     xEEPROM=eeprom_read_byte(&DefIFT_ID);     
     sprintf_P(strSend,PSTR("%.2d"),xEEPROM);
     uart_print(1,0,strSend);
	 //PumpLabel
     for (i=0;i<8;i++){
	      xEEPROM=eeprom_read_byte(&DefPumpLabel[i]);
   13e7c:	c7 01       	movw	r24, r14
   13e7e:	0e 94 c9 ac 	call	0x15992	; 0x15992 <__eerd_byte_m128>
		  if (xEEPROM>=100)xEEPROM=0;
   13e82:	84 36       	cpi	r24, 0x64	; 100
   13e84:	08 f0       	brcs	.+2      	; 0x13e88 <SendConfigParamater+0x36c>
   13e86:	80 e0       	ldi	r24, 0x00	; 0
		  FillChar(strSend,0,sizeof(strSend));
	      sprintf_P(strSend,PSTR("%.2d"),xEEPROM);
   13e88:	00 d0       	rcall	.+0      	; 0x13e8a <SendConfigParamater+0x36e>
   13e8a:	00 d0       	rcall	.+0      	; 0x13e8c <SendConfigParamater+0x370>
   13e8c:	00 d0       	rcall	.+0      	; 0x13e8e <SendConfigParamater+0x372>
   13e8e:	ed b7       	in	r30, 0x3d	; 61
   13e90:	fe b7       	in	r31, 0x3e	; 62
   13e92:	31 96       	adiw	r30, 0x01	; 1
   13e94:	ad b7       	in	r26, 0x3d	; 61
   13e96:	be b7       	in	r27, 0x3e	; 62
   13e98:	11 96       	adiw	r26, 0x01	; 1
   13e9a:	dc 92       	st	X, r13
   13e9c:	11 97       	sbiw	r26, 0x01	; 1
   13e9e:	12 96       	adiw	r26, 0x02	; 2
   13ea0:	0c 93       	st	X, r16
   13ea2:	b3 82       	std	Z+3, r11	; 0x03
   13ea4:	a2 82       	std	Z+2, r10	; 0x02
   13ea6:	84 83       	std	Z+4, r24	; 0x04
   13ea8:	15 82       	std	Z+5, r1	; 0x05
   13eaa:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
		  AddSpaceLag(strSend,2);
   13eae:	ed b7       	in	r30, 0x3d	; 61
   13eb0:	fe b7       	in	r31, 0x3e	; 62
   13eb2:	36 96       	adiw	r30, 0x06	; 6
   13eb4:	0f b6       	in	r0, 0x3f	; 63
   13eb6:	f8 94       	cli
   13eb8:	fe bf       	out	0x3e, r31	; 62
   13eba:	0f be       	out	0x3f, r0	; 63
   13ebc:	ed bf       	out	0x3d, r30	; 61
   13ebe:	8d 2d       	mov	r24, r13
   13ec0:	90 2f       	mov	r25, r16
   13ec2:	62 e0       	ldi	r22, 0x02	; 2
   13ec4:	0e 94 64 2f 	call	0x5ec8	; 0x5ec8 <AddSpaceLag>
		 uart_print(1,0,strSend);
   13ec8:	81 e0       	ldi	r24, 0x01	; 1
   13eca:	60 e0       	ldi	r22, 0x00	; 0
   13ecc:	4d 2d       	mov	r20, r13
   13ece:	50 2f       	mov	r21, r16
   13ed0:	0e 94 78 a8 	call	0x150f0	; 0x150f0 <uart_print>
   13ed4:	08 94       	sec
   13ed6:	e1 1c       	adc	r14, r1
   13ed8:	f1 1c       	adc	r15, r1
	 //TermId
     xEEPROM=eeprom_read_byte(&DefIFT_ID);     
     sprintf_P(strSend,PSTR("%.2d"),xEEPROM);
     uart_print(1,0,strSend);
	 //PumpLabel
     for (i=0;i<8;i++){
   13eda:	f5 e5       	ldi	r31, 0x55	; 85
   13edc:	ef 16       	cp	r14, r31
   13ede:	f0 e0       	ldi	r31, 0x00	; 0
   13ee0:	ff 06       	cpc	r15, r31
   13ee2:	61 f6       	brne	.-104    	; 0x13e7c <SendConfigParamater+0x360>
		  FillChar(strSend,0,sizeof(strSend));
	      sprintf_P(strSend,PSTR("%.2d"),xEEPROM);
		  AddSpaceLag(strSend,2);
		 uart_print(1,0,strSend);
	 }
	 uart_printf(1,1,PSTR(">"));
   13ee4:	81 e0       	ldi	r24, 0x01	; 1
   13ee6:	61 e0       	ldi	r22, 0x01	; 1
   13ee8:	45 ec       	ldi	r20, 0xC5	; 197
   13eea:	53 e2       	ldi	r21, 0x23	; 35
   13eec:	0e 94 a0 a8 	call	0x15140	; 0x15140 <uart_printf>
	 //End
}
   13ef0:	cb 59       	subi	r28, 0x9B	; 155
   13ef2:	df 4f       	sbci	r29, 0xFF	; 255
   13ef4:	0f b6       	in	r0, 0x3f	; 63
   13ef6:	f8 94       	cli
   13ef8:	de bf       	out	0x3e, r29	; 62
   13efa:	0f be       	out	0x3f, r0	; 63
   13efc:	cd bf       	out	0x3d, r28	; 61
   13efe:	cf 91       	pop	r28
   13f00:	df 91       	pop	r29
   13f02:	1f 91       	pop	r17
   13f04:	0f 91       	pop	r16
   13f06:	ff 90       	pop	r15
   13f08:	ef 90       	pop	r14
   13f0a:	df 90       	pop	r13
   13f0c:	cf 90       	pop	r12
   13f0e:	bf 90       	pop	r11
   13f10:	af 90       	pop	r10
   13f12:	9f 90       	pop	r9
   13f14:	8f 90       	pop	r8
   13f16:	08 95       	ret

00013f18 <SaveConfigParameter>:
     char Result;
	 Result=False;
   return Result;
}

void SaveConfigParameter(){
   13f18:	6f 92       	push	r6
   13f1a:	7f 92       	push	r7
   13f1c:	8f 92       	push	r8
   13f1e:	9f 92       	push	r9
   13f20:	af 92       	push	r10
   13f22:	bf 92       	push	r11
   13f24:	cf 92       	push	r12
   13f26:	df 92       	push	r13
   13f28:	ef 92       	push	r14
   13f2a:	ff 92       	push	r15
   13f2c:	0f 93       	push	r16
   13f2e:	1f 93       	push	r17
   13f30:	df 93       	push	r29
   13f32:	cf 93       	push	r28
   13f34:	cd b7       	in	r28, 0x3d	; 61
   13f36:	de b7       	in	r29, 0x3e	; 62
   13f38:	c6 54       	subi	r28, 0x46	; 70
   13f3a:	d0 40       	sbci	r29, 0x00	; 0
   13f3c:	0f b6       	in	r0, 0x3f	; 63
   13f3e:	f8 94       	cli
   13f40:	de bf       	out	0x3e, r29	; 62
   13f42:	0f be       	out	0x3f, r0	; 63
   13f44:	cd bf       	out	0x3d, r28	; 61
char i,j;
char strEEPROM[50],xEEPROM;
unsigned int StrPos;
char strSend[20];
     
	 sprintf_P(strSend,PSTR("Length:%d"),transLength);
   13f46:	00 d0       	rcall	.+0      	; 0x13f48 <SaveConfigParameter+0x30>
   13f48:	00 d0       	rcall	.+0      	; 0x13f4a <SaveConfigParameter+0x32>
   13f4a:	00 d0       	rcall	.+0      	; 0x13f4c <SaveConfigParameter+0x34>
   13f4c:	ed b7       	in	r30, 0x3d	; 61
   13f4e:	fe b7       	in	r31, 0x3e	; 62
   13f50:	31 96       	adiw	r30, 0x01	; 1
   13f52:	8e 01       	movw	r16, r28
   13f54:	0f 5f       	subi	r16, 0xFF	; 255
   13f56:	1f 4f       	sbci	r17, 0xFF	; 255
   13f58:	ad b7       	in	r26, 0x3d	; 61
   13f5a:	be b7       	in	r27, 0x3e	; 62
   13f5c:	12 96       	adiw	r26, 0x02	; 2
   13f5e:	1c 93       	st	X, r17
   13f60:	0e 93       	st	-X, r16
   13f62:	11 97       	sbiw	r26, 0x01	; 1
   13f64:	8f ef       	ldi	r24, 0xFF	; 255
   13f66:	93 e2       	ldi	r25, 0x23	; 35
   13f68:	93 83       	std	Z+3, r25	; 0x03
   13f6a:	82 83       	std	Z+2, r24	; 0x02
   13f6c:	80 91 8b 01 	lds	r24, 0x018B
   13f70:	90 91 8c 01 	lds	r25, 0x018C
   13f74:	95 83       	std	Z+5, r25	; 0x05
   13f76:	84 83       	std	Z+4, r24	; 0x04
   13f78:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	 uart_print(1,1,strSend);
   13f7c:	ed b7       	in	r30, 0x3d	; 61
   13f7e:	fe b7       	in	r31, 0x3e	; 62
   13f80:	36 96       	adiw	r30, 0x06	; 6
   13f82:	0f b6       	in	r0, 0x3f	; 63
   13f84:	f8 94       	cli
   13f86:	fe bf       	out	0x3e, r31	; 62
   13f88:	0f be       	out	0x3f, r0	; 63
   13f8a:	ed bf       	out	0x3d, r30	; 61
   13f8c:	81 e0       	ldi	r24, 0x01	; 1
   13f8e:	61 e0       	ldi	r22, 0x01	; 1
   13f90:	a8 01       	movw	r20, r16
   13f92:	0e 94 78 a8 	call	0x150f0	; 0x150f0 <uart_print>

     StrPos=0;
	 uart_printf(1,1,PSTR("<Saving>")); 
   13f96:	81 e0       	ldi	r24, 0x01	; 1
   13f98:	61 e0       	ldi	r22, 0x01	; 1
   13f9a:	46 ef       	ldi	r20, 0xF6	; 246
   13f9c:	53 e2       	ldi	r21, 0x23	; 35
   13f9e:	0e 94 a0 a8 	call	0x15140	; 0x15140 <uart_printf>
   13fa2:	07 e2       	ldi	r16, 0x27	; 39
   13fa4:	12 e0       	ldi	r17, 0x02	; 2
   13fa6:	4d e1       	ldi	r20, 0x1D	; 29
   13fa8:	e4 2e       	mov	r14, r20
   13faa:	49 e0       	ldi	r20, 0x09	; 9
   13fac:	f4 2e       	mov	r15, r20
   13fae:	35 e1       	ldi	r19, 0x15	; 21
   13fb0:	a3 2e       	mov	r10, r19
   13fb2:	b1 2c       	mov	r11, r1
   13fb4:	ac 0e       	add	r10, r28
   13fb6:	bd 1e       	adc	r11, r29
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   13fb8:	2d e3       	ldi	r18, 0x3D	; 61
   13fba:	c2 2e       	mov	r12, r18
   13fbc:	d1 2c       	mov	r13, r1
   13fbe:	cc 0e       	add	r12, r28
   13fc0:	dd 1e       	adc	r13, r29
     
	 sprintf_P(strSend,PSTR("Length:%d"),transLength);
	 uart_print(1,1,strSend);

     StrPos=0;
	 uart_printf(1,1,PSTR("<Saving>")); 
   13fc2:	d7 01       	movw	r26, r14
   13fc4:	f5 01       	movw	r30, r10
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
   13fc6:	8d 91       	ld	r24, X+
   13fc8:	81 93       	st	Z+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   13fca:	ec 15       	cp	r30, r12
   13fcc:	fd 05       	cpc	r31, r13
   13fce:	d9 f7       	brne	.-10     	; 0x13fc6 <SaveConfigParameter+0xae>
	 uart_printf(1,1,PSTR("<Saving>")); 
     //HeaderFooter
	 for(i=0;i<10;i++){
         FillChar(strEEPROM,0,sizeof(strEEPROM));   
		 StrPosCopy(rcv_trans,strEEPROM,(StrPos+(40*i)),40);
		 strEEPROM[40]=0;
   13fd0:	1d ae       	std	Y+61, r1	; 0x3d
		 eeprom_write_block((const void*) &strEEPROM, (void*) &DefHeaderFooter[i],41);
   13fd2:	c5 01       	movw	r24, r10
   13fd4:	b8 01       	movw	r22, r16
   13fd6:	49 e2       	ldi	r20, 0x29	; 41
   13fd8:	50 e0       	ldi	r21, 0x00	; 0
   13fda:	0e 94 d1 ac 	call	0x159a2	; 0x159a2 <__eewr_block_m128>
   13fde:	07 5d       	subi	r16, 0xD7	; 215
   13fe0:	1f 4f       	sbci	r17, 0xFF	; 255
   13fe2:	88 e2       	ldi	r24, 0x28	; 40
   13fe4:	90 e0       	ldi	r25, 0x00	; 0
   13fe6:	e8 0e       	add	r14, r24
   13fe8:	f9 1e       	adc	r15, r25
	 uart_print(1,1,strSend);

     StrPos=0;
	 uart_printf(1,1,PSTR("<Saving>")); 
     //HeaderFooter
	 for(i=0;i<10;i++){
   13fea:	93 e0       	ldi	r25, 0x03	; 3
   13fec:	01 3c       	cpi	r16, 0xC1	; 193
   13fee:	19 07       	cpc	r17, r25
   13ff0:	41 f7       	brne	.-48     	; 0x13fc2 <SaveConfigParameter+0xaa>
   13ff2:	0b eb       	ldi	r16, 0xBB	; 187
   13ff4:	10 e0       	ldi	r17, 0x00	; 0
   13ff6:	9d ea       	ldi	r25, 0xAD	; 173
   13ff8:	e9 2e       	mov	r14, r25
   13ffa:	9a e0       	ldi	r25, 0x0A	; 10
   13ffc:	f9 2e       	mov	r15, r25
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   13ffe:	85 e1       	ldi	r24, 0x15	; 21
   14000:	c8 2e       	mov	r12, r24
   14002:	d1 2c       	mov	r13, r1
   14004:	cc 0e       	add	r12, r28
   14006:	dd 1e       	adc	r13, r29
   14008:	b1 e2       	ldi	r27, 0x21	; 33
   1400a:	8b 2e       	mov	r8, r27
   1400c:	91 2c       	mov	r9, r1
   1400e:	8c 0e       	add	r8, r28
   14010:	9d 1e       	adc	r9, r29
	 uart_print(1,1,strSend);

     StrPos=0;
	 uart_printf(1,1,PSTR("<Saving>")); 
     //HeaderFooter
	 for(i=0;i<10;i++){
   14012:	d7 01       	movw	r26, r14
   14014:	f5 01       	movw	r30, r10
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
   14016:	8d 91       	ld	r24, X+
   14018:	81 93       	st	Z+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   1401a:	e8 15       	cp	r30, r8
   1401c:	f9 05       	cpc	r31, r9
   1401e:	d9 f7       	brne	.-10     	; 0x14016 <SaveConfigParameter+0xfe>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
   14020:	19 a2       	std	Y+33, r1	; 0x21
	 //ProductName
	 StrPos=(40*10);
	 for(i=0;i<6;i++){
         FillChar(strEEPROM,0,sizeof(strEEPROM));   
		 StrPosCopy(rcv_trans,strEEPROM,(StrPos+(12*i)),12);
		 RemSpaceLag(strEEPROM);
   14022:	c6 01       	movw	r24, r12
   14024:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <RemSpaceLag>
		 strEEPROM[strlen(strEEPROM)]=0;
   14028:	f6 01       	movw	r30, r12
   1402a:	01 90       	ld	r0, Z+
   1402c:	00 20       	and	r0, r0
   1402e:	e9 f7       	brne	.-6      	; 0x1402a <SaveConfigParameter+0x112>
   14030:	31 97       	sbiw	r30, 0x01	; 1
   14032:	10 82       	st	Z, r1
		 eeprom_write_block((const void*) &strEEPROM, (void*) &DefProductName[i],sizeof(DefProductName[i]));
   14034:	c6 01       	movw	r24, r12
   14036:	b8 01       	movw	r22, r16
   14038:	4d e0       	ldi	r20, 0x0D	; 13
   1403a:	50 e0       	ldi	r21, 0x00	; 0
   1403c:	0e 94 d1 ac 	call	0x159a2	; 0x159a2 <__eewr_block_m128>
   14040:	03 5f       	subi	r16, 0xF3	; 243
   14042:	1f 4f       	sbci	r17, 0xFF	; 255
   14044:	ac e0       	ldi	r26, 0x0C	; 12
   14046:	b0 e0       	ldi	r27, 0x00	; 0
   14048:	ea 0e       	add	r14, r26
   1404a:	fb 1e       	adc	r15, r27
		 eeprom_write_block((const void*) &strEEPROM, (void*) &DefHeaderFooter[i],41);
		 //uart_print(1,1,strEEPROM);
	 }
	 //ProductName
	 StrPos=(40*10);
	 for(i=0;i<6;i++){
   1404c:	b1 e0       	ldi	r27, 0x01	; 1
   1404e:	09 30       	cpi	r16, 0x09	; 9
   14050:	1b 07       	cpc	r17, r27
   14052:	f9 f6       	brne	.-66     	; 0x14012 <SaveConfigParameter+0xfa>
   14054:	05 e8       	ldi	r16, 0x85	; 133
   14056:	10 e0       	ldi	r17, 0x00	; 0
   14058:	a5 ef       	ldi	r26, 0xF5	; 245
   1405a:	ea 2e       	mov	r14, r26
   1405c:	aa e0       	ldi	r26, 0x0A	; 10
   1405e:	fa 2e       	mov	r15, r26
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   14060:	f5 e1       	ldi	r31, 0x15	; 21
   14062:	cf 2e       	mov	r12, r31
   14064:	d1 2c       	mov	r13, r1
   14066:	cc 0e       	add	r12, r28
   14068:	dd 1e       	adc	r13, r29
   1406a:	ea e1       	ldi	r30, 0x1A	; 26
   1406c:	8e 2e       	mov	r8, r30
   1406e:	91 2c       	mov	r9, r1
   14070:	8c 0e       	add	r8, r28
   14072:	9d 1e       	adc	r9, r29
		 eeprom_write_block((const void*) &strEEPROM, (void*) &DefHeaderFooter[i],41);
		 //uart_print(1,1,strEEPROM);
	 }
	 //ProductName
	 StrPos=(40*10);
	 for(i=0;i<6;i++){
   14074:	d7 01       	movw	r26, r14
   14076:	f5 01       	movw	r30, r10
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
   14078:	8d 91       	ld	r24, X+
   1407a:	81 93       	st	Z+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   1407c:	e8 15       	cp	r30, r8
   1407e:	f9 05       	cpc	r31, r9
   14080:	d9 f7       	brne	.-10     	; 0x14078 <SaveConfigParameter+0x160>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
   14082:	1a 8e       	std	Y+26, r1	; 0x1a
	 //ProductPrice
	 StrPos=(40*10)+(12*6);
	 for(i=0;i<6;i++){
         FillChar(strEEPROM,0,sizeof(strEEPROM));   
		 StrPosCopy(rcv_trans,strEEPROM,(StrPos+(5*i)),5);
		 RemSpaceLag(strEEPROM);
   14084:	c6 01       	movw	r24, r12
   14086:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <RemSpaceLag>
		 eeprom_write_block((const void*) &strEEPROM, (void*) &DefProductPrice[i],sizeof(DefProductPrice[i]));
   1408a:	c6 01       	movw	r24, r12
   1408c:	b8 01       	movw	r22, r16
   1408e:	49 e0       	ldi	r20, 0x09	; 9
   14090:	50 e0       	ldi	r21, 0x00	; 0
   14092:	0e 94 d1 ac 	call	0x159a2	; 0x159a2 <__eewr_block_m128>
   14096:	07 5f       	subi	r16, 0xF7	; 247
   14098:	1f 4f       	sbci	r17, 0xFF	; 255
   1409a:	e5 e0       	ldi	r30, 0x05	; 5
   1409c:	f0 e0       	ldi	r31, 0x00	; 0
   1409e:	ee 0e       	add	r14, r30
   140a0:	ff 1e       	adc	r15, r31
		// uart_print(1,1,strEEPROM);

	 }    
	 //ProductPrice
	 StrPos=(40*10)+(12*6);
	 for(i=0;i<6;i++){
   140a2:	f0 e0       	ldi	r31, 0x00	; 0
   140a4:	0b 3b       	cpi	r16, 0xBB	; 187
   140a6:	1f 07       	cpc	r17, r31
   140a8:	29 f7       	brne	.-54     	; 0x14074 <SaveConfigParameter+0x15c>
   140aa:	73 e1       	ldi	r23, 0x13	; 19
   140ac:	e7 2e       	mov	r14, r23
   140ae:	7b e0       	ldi	r23, 0x0B	; 11
   140b0:	f7 2e       	mov	r15, r23
   140b2:	65 e4       	ldi	r22, 0x45	; 69
   140b4:	c6 2e       	mov	r12, r22
   140b6:	60 e0       	ldi	r22, 0x00	; 0
   140b8:	d6 2e       	mov	r13, r22
	 //PumpID Config
	 StrPos=(40*10)+(12*6)+(5*6);
	 for(i=0;i<8;i++){
         FillChar(strEEPROM,0,sizeof(strEEPROM));   
		 StrPosCopy(rcv_trans,strEEPROM,(StrPos+(2*i)),2);
		 RemZeroLead(strEEPROM);
   140ba:	55 e1       	ldi	r21, 0x15	; 21
   140bc:	a5 2e       	mov	r10, r21
   140be:	b1 2c       	mov	r11, r1
   140c0:	ac 0e       	add	r10, r28
   140c2:	bd 1e       	adc	r11, r29
		 xEEPROM=atoi(strEEPROM);
         eeprom_write_byte(&DefPumpMap[i],xEEPROM);
		 sprintf_P(strSend,PSTR("%d"),xEEPROM);
   140c4:	3e 01       	movw	r6, r28
   140c6:	08 94       	sec
   140c8:	61 1c       	adc	r6, r1
   140ca:	71 1c       	adc	r7, r1
   140cc:	43 ef       	ldi	r20, 0xF3	; 243
   140ce:	84 2e       	mov	r8, r20
   140d0:	43 e2       	ldi	r20, 0x23	; 35
   140d2:	94 2e       	mov	r9, r20
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
   140d4:	d7 01       	movw	r26, r14
   140d6:	8c 91       	ld	r24, X
   140d8:	8d 8b       	std	Y+21, r24	; 0x15
   140da:	11 96       	adiw	r26, 0x01	; 1
   140dc:	8c 91       	ld	r24, X
   140de:	8e 8b       	std	Y+22, r24	; 0x16
	 }Dest[Length]=0;
   140e0:	1f 8a       	std	Y+23, r1	; 0x17
	 //PumpID Config
	 StrPos=(40*10)+(12*6)+(5*6);
	 for(i=0;i<8;i++){
         FillChar(strEEPROM,0,sizeof(strEEPROM));   
		 StrPosCopy(rcv_trans,strEEPROM,(StrPos+(2*i)),2);
		 RemZeroLead(strEEPROM);
   140e2:	c5 01       	movw	r24, r10
   140e4:	0e 94 df 26 	call	0x4dbe	; 0x4dbe <RemZeroLead>
		 xEEPROM=atoi(strEEPROM);
   140e8:	c5 01       	movw	r24, r10
   140ea:	0e 94 4c aa 	call	0x15498	; 0x15498 <atoi>
   140ee:	18 2f       	mov	r17, r24
         eeprom_write_byte(&DefPumpMap[i],xEEPROM);
   140f0:	c6 01       	movw	r24, r12
   140f2:	61 2f       	mov	r22, r17
   140f4:	0e 94 db ac 	call	0x159b6	; 0x159b6 <__eewr_byte_m128>
		 sprintf_P(strSend,PSTR("%d"),xEEPROM);
   140f8:	00 d0       	rcall	.+0      	; 0x140fa <SaveConfigParameter+0x1e2>
   140fa:	00 d0       	rcall	.+0      	; 0x140fc <SaveConfigParameter+0x1e4>
   140fc:	00 d0       	rcall	.+0      	; 0x140fe <SaveConfigParameter+0x1e6>
   140fe:	ed b7       	in	r30, 0x3d	; 61
   14100:	fe b7       	in	r31, 0x3e	; 62
   14102:	31 96       	adiw	r30, 0x01	; 1
   14104:	ad b7       	in	r26, 0x3d	; 61
   14106:	be b7       	in	r27, 0x3e	; 62
   14108:	12 96       	adiw	r26, 0x02	; 2
   1410a:	7c 92       	st	X, r7
   1410c:	6e 92       	st	-X, r6
   1410e:	11 97       	sbiw	r26, 0x01	; 1
   14110:	93 82       	std	Z+3, r9	; 0x03
   14112:	82 82       	std	Z+2, r8	; 0x02
   14114:	14 83       	std	Z+4, r17	; 0x04
   14116:	15 82       	std	Z+5, r1	; 0x05
   14118:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
   1411c:	e2 e0       	ldi	r30, 0x02	; 2
   1411e:	f0 e0       	ldi	r31, 0x00	; 0
   14120:	ee 0e       	add	r14, r30
   14122:	ff 1e       	adc	r15, r31
   14124:	08 94       	sec
   14126:	c1 1c       	adc	r12, r1
   14128:	d1 1c       	adc	r13, r1
		// uart_print(1,1,strEEPROM);

	 }    
	 //PumpID Config
	 StrPos=(40*10)+(12*6)+(5*6);
	 for(i=0;i<8;i++){
   1412a:	8d b7       	in	r24, 0x3d	; 61
   1412c:	9e b7       	in	r25, 0x3e	; 62
   1412e:	06 96       	adiw	r24, 0x06	; 6
   14130:	0f b6       	in	r0, 0x3f	; 63
   14132:	f8 94       	cli
   14134:	9e bf       	out	0x3e, r25	; 62
   14136:	0f be       	out	0x3f, r0	; 63
   14138:	8d bf       	out	0x3d, r24	; 61
   1413a:	93 e2       	ldi	r25, 0x23	; 35
   1413c:	e9 16       	cp	r14, r25
   1413e:	9b e0       	ldi	r25, 0x0B	; 11
   14140:	f9 06       	cpc	r15, r25
   14142:	41 f6       	brne	.-112    	; 0x140d4 <SaveConfigParameter+0x1bc>
   14144:	35 e5       	ldi	r19, 0x55	; 85
   14146:	c3 2e       	mov	r12, r19
   14148:	30 e0       	ldi	r19, 0x00	; 0
   1414a:	d3 2e       	mov	r13, r19
   1414c:	57 01       	movw	r10, r14
   1414e:	1d c0       	rjmp	.+58     	; 0x1418a <SaveConfigParameter+0x272>
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
   14150:	d7 01       	movw	r26, r14
   14152:	6c 91       	ld	r22, X
   14154:	60 53       	subi	r22, 0x30	; 48
   14156:	6a 30       	cpi	r22, 0x0A	; 10
   14158:	08 f0       	brcs	.+2      	; 0x1415c <SaveConfigParameter+0x244>
   1415a:	60 e0       	ldi	r22, 0x00	; 0
	 //PumpNozzle
	 StrPos=(40*10)+(12*6)+(5*6)+(2*8);
	 for (i=0;i<8;i++){
	     for (j=0;j<6;j++){
              xEEPROM=Ord(CharPosCopy(rcv_trans,StrPos+(i*6+j)));
		      eeprom_write_byte(&DefNozzleMap[i][j],xEEPROM);
   1415c:	c8 01       	movw	r24, r16
   1415e:	0e 94 db ac 	call	0x159b6	; 0x159b6 <__eewr_byte_m128>

	 }    
	 //PumpNozzle
	 StrPos=(40*10)+(12*6)+(5*6)+(2*8);
	 for (i=0;i<8;i++){
	     for (j=0;j<6;j++){
   14162:	93 94       	inc	r9
   14164:	08 94       	sec
   14166:	e1 1c       	adc	r14, r1
   14168:	f1 1c       	adc	r15, r1
   1416a:	0f 5f       	subi	r16, 0xFF	; 255
   1416c:	1f 4f       	sbci	r17, 0xFF	; 255
   1416e:	b6 e0       	ldi	r27, 0x06	; 6
   14170:	9b 16       	cp	r9, r27
   14172:	71 f7       	brne	.-36     	; 0x14150 <SaveConfigParameter+0x238>
   14174:	e6 e0       	ldi	r30, 0x06	; 6
   14176:	f0 e0       	ldi	r31, 0x00	; 0
   14178:	ce 0e       	add	r12, r30
   1417a:	df 1e       	adc	r13, r31
   1417c:	ae 0e       	add	r10, r30
   1417e:	bf 1e       	adc	r11, r31
		// uart_print(1,1,strSend); 

	 }    
	 //PumpNozzle
	 StrPos=(40*10)+(12*6)+(5*6)+(2*8);
	 for (i=0;i<8;i++){
   14180:	f5 e8       	ldi	r31, 0x85	; 133
   14182:	cf 16       	cp	r12, r31
   14184:	f0 e0       	ldi	r31, 0x00	; 0
   14186:	df 06       	cpc	r13, r31
   14188:	21 f0       	breq	.+8      	; 0x14192 <SaveConfigParameter+0x27a>
   1418a:	75 01       	movw	r14, r10
   1418c:	86 01       	movw	r16, r12
   1418e:	99 24       	eor	r9, r9
   14190:	df cf       	rjmp	.-66     	; 0x14150 <SaveConfigParameter+0x238>
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
   14192:	80 91 53 0b 	lds	r24, 0x0B53
   14196:	80 53       	subi	r24, 0x30	; 48
   14198:	8a 30       	cpi	r24, 0x0A	; 10
   1419a:	10 f0       	brcs	.+4      	; 0x141a0 <SaveConfigParameter+0x288>
   1419c:	60 e0       	ldi	r22, 0x00	; 0
   1419e:	03 c0       	rjmp	.+6      	; 0x141a6 <SaveConfigParameter+0x28e>
   141a0:	68 2f       	mov	r22, r24
   141a2:	81 11       	cpse	r24, r1
   141a4:	61 e0       	ldi	r22, 0x01	; 1
	 //PrintNoMoney
	 StrPos=(40*10)+(12*6)+(5*6)+(2*8)+(6*8);
	 xEEPROM=Ord(CharPosCopy(rcv_trans,StrPos));
	 if (xEEPROM==0)xEEPROM=False;
	 else xEEPROM=True;
	 eeprom_write_byte(&DefPrintMoney,xEEPROM);
   141a6:	81 ec       	ldi	r24, 0xC1	; 193
   141a8:	93 e0       	ldi	r25, 0x03	; 3
   141aa:	0e 94 db ac 	call	0x159b6	; 0x159b6 <__eewr_byte_m128>
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
   141ae:	80 91 54 0b 	lds	r24, 0x0B54
   141b2:	8d 8b       	std	Y+21, r24	; 0x15
   141b4:	80 91 55 0b 	lds	r24, 0x0B55
   141b8:	8e 8b       	std	Y+22, r24	; 0x16
	 }Dest[Length]=0;
   141ba:	1f 8a       	std	Y+23, r1	; 0x17

	 //TermID
	 StrPos=(40*10)+(12*6)+(5*6)+(2*8)+(6*8)+1;
     FillChar(strEEPROM,0,sizeof(strEEPROM));   
	 StrPosCopy(rcv_trans,strEEPROM,StrPos,2);
	 RemZeroLead(strEEPROM);
   141bc:	25 e1       	ldi	r18, 0x15	; 21
   141be:	e2 2e       	mov	r14, r18
   141c0:	f1 2c       	mov	r15, r1
   141c2:	ec 0e       	add	r14, r28
   141c4:	fd 1e       	adc	r15, r29
   141c6:	c7 01       	movw	r24, r14
   141c8:	0e 94 df 26 	call	0x4dbe	; 0x4dbe <RemZeroLead>
	 xEEPROM=atoi(strEEPROM);
   141cc:	c7 01       	movw	r24, r14
   141ce:	0e 94 4c aa 	call	0x15498	; 0x15498 <atoi>
   141d2:	d8 2e       	mov	r13, r24
	 eeprom_write_byte(&DefIFT_ID,xEEPROM);
   141d4:	80 e0       	ldi	r24, 0x00	; 0
   141d6:	90 e0       	ldi	r25, 0x00	; 0
   141d8:	6d 2d       	mov	r22, r13
   141da:	0e 94 db ac 	call	0x159b6	; 0x159b6 <__eewr_byte_m128>
	 sprintf_P(strSend,PSTR("%d"),xEEPROM);
   141de:	00 d0       	rcall	.+0      	; 0x141e0 <SaveConfigParameter+0x2c8>
   141e0:	00 d0       	rcall	.+0      	; 0x141e2 <SaveConfigParameter+0x2ca>
   141e2:	00 d0       	rcall	.+0      	; 0x141e4 <SaveConfigParameter+0x2cc>
   141e4:	ed b7       	in	r30, 0x3d	; 61
   141e6:	fe b7       	in	r31, 0x3e	; 62
   141e8:	31 96       	adiw	r30, 0x01	; 1
   141ea:	8e 01       	movw	r16, r28
   141ec:	0f 5f       	subi	r16, 0xFF	; 255
   141ee:	1f 4f       	sbci	r17, 0xFF	; 255
   141f0:	ad b7       	in	r26, 0x3d	; 61
   141f2:	be b7       	in	r27, 0x3e	; 62
   141f4:	12 96       	adiw	r26, 0x02	; 2
   141f6:	1c 93       	st	X, r17
   141f8:	0e 93       	st	-X, r16
   141fa:	11 97       	sbiw	r26, 0x01	; 1
   141fc:	80 ef       	ldi	r24, 0xF0	; 240
   141fe:	93 e2       	ldi	r25, 0x23	; 35
   14200:	93 83       	std	Z+3, r25	; 0x03
   14202:	82 83       	std	Z+2, r24	; 0x02
   14204:	d4 82       	std	Z+4, r13	; 0x04
   14206:	15 82       	std	Z+5, r1	; 0x05
   14208:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
   1420c:	96 e5       	ldi	r25, 0x56	; 86
   1420e:	c9 2e       	mov	r12, r25
   14210:	9b e0       	ldi	r25, 0x0B	; 11
   14212:	d9 2e       	mov	r13, r25
   14214:	8d e4       	ldi	r24, 0x4D	; 77
   14216:	a8 2e       	mov	r10, r24
   14218:	80 e0       	ldi	r24, 0x00	; 0
   1421a:	b8 2e       	mov	r11, r24
   1421c:	ed b7       	in	r30, 0x3d	; 61
   1421e:	fe b7       	in	r31, 0x3e	; 62
   14220:	36 96       	adiw	r30, 0x06	; 6
   14222:	0f b6       	in	r0, 0x3f	; 63
   14224:	f8 94       	cli
   14226:	fe bf       	out	0x3e, r31	; 62
   14228:	0f be       	out	0x3f, r0	; 63
   1422a:	ed bf       	out	0x3d, r30	; 61
	 //PumpLabel
	 StrPos=(40*10)+(12*6)+(5*6)+(2*8)+(6*8)+1+2;
	 for(i=0;i<8;i++){
         FillChar(strEEPROM,0,sizeof(strEEPROM));   
		 StrPosCopy(rcv_trans,strEEPROM,(StrPos+(2*i)),2);
		 RemZeroLead(strEEPROM);
   1422c:	9e 2c       	mov	r9, r14
   1422e:	ef 2c       	mov	r14, r15
		 xEEPROM=atoi(strEEPROM);
         eeprom_write_byte(&DefPumpLabel[i],xEEPROM);
		 sprintf_P(strSend,PSTR("%d"),xEEPROM);
   14230:	f0 2e       	mov	r15, r16
   14232:	01 2f       	mov	r16, r17
   14234:	1d ee       	ldi	r17, 0xED	; 237
   14236:	61 2e       	mov	r6, r17
   14238:	13 e2       	ldi	r17, 0x23	; 35
   1423a:	71 2e       	mov	r7, r17
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
   1423c:	d6 01       	movw	r26, r12
   1423e:	8c 91       	ld	r24, X
   14240:	8d 8b       	std	Y+21, r24	; 0x15
   14242:	11 96       	adiw	r26, 0x01	; 1
   14244:	8c 91       	ld	r24, X
   14246:	8e 8b       	std	Y+22, r24	; 0x16
	 }Dest[Length]=0;
   14248:	1f 8a       	std	Y+23, r1	; 0x17
	 //PumpLabel
	 StrPos=(40*10)+(12*6)+(5*6)+(2*8)+(6*8)+1+2;
	 for(i=0;i<8;i++){
         FillChar(strEEPROM,0,sizeof(strEEPROM));   
		 StrPosCopy(rcv_trans,strEEPROM,(StrPos+(2*i)),2);
		 RemZeroLead(strEEPROM);
   1424a:	89 2d       	mov	r24, r9
   1424c:	9e 2d       	mov	r25, r14
   1424e:	0e 94 df 26 	call	0x4dbe	; 0x4dbe <RemZeroLead>
		 xEEPROM=atoi(strEEPROM);
   14252:	89 2d       	mov	r24, r9
   14254:	9e 2d       	mov	r25, r14
   14256:	0e 94 4c aa 	call	0x15498	; 0x15498 <atoi>
   1425a:	18 2f       	mov	r17, r24
         eeprom_write_byte(&DefPumpLabel[i],xEEPROM);
   1425c:	c5 01       	movw	r24, r10
   1425e:	61 2f       	mov	r22, r17
   14260:	0e 94 db ac 	call	0x159b6	; 0x159b6 <__eewr_byte_m128>
		 sprintf_P(strSend,PSTR("%d"),xEEPROM);
   14264:	00 d0       	rcall	.+0      	; 0x14266 <SaveConfigParameter+0x34e>
   14266:	00 d0       	rcall	.+0      	; 0x14268 <SaveConfigParameter+0x350>
   14268:	00 d0       	rcall	.+0      	; 0x1426a <SaveConfigParameter+0x352>
   1426a:	ed b7       	in	r30, 0x3d	; 61
   1426c:	fe b7       	in	r31, 0x3e	; 62
   1426e:	31 96       	adiw	r30, 0x01	; 1
   14270:	ad b7       	in	r26, 0x3d	; 61
   14272:	be b7       	in	r27, 0x3e	; 62
   14274:	11 96       	adiw	r26, 0x01	; 1
   14276:	fc 92       	st	X, r15
   14278:	11 97       	sbiw	r26, 0x01	; 1
   1427a:	12 96       	adiw	r26, 0x02	; 2
   1427c:	0c 93       	st	X, r16
   1427e:	73 82       	std	Z+3, r7	; 0x03
   14280:	62 82       	std	Z+2, r6	; 0x02
   14282:	14 83       	std	Z+4, r17	; 0x04
   14284:	15 82       	std	Z+5, r1	; 0x05
   14286:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
   1428a:	e2 e0       	ldi	r30, 0x02	; 2
   1428c:	f0 e0       	ldi	r31, 0x00	; 0
   1428e:	ce 0e       	add	r12, r30
   14290:	df 1e       	adc	r13, r31
   14292:	08 94       	sec
   14294:	a1 1c       	adc	r10, r1
   14296:	b1 1c       	adc	r11, r1
	 sprintf_P(strSend,PSTR("%d"),xEEPROM);
//	 uart_print(1,1,strSend); 

	 //PumpLabel
	 StrPos=(40*10)+(12*6)+(5*6)+(2*8)+(6*8)+1+2;
	 for(i=0;i<8;i++){
   14298:	8d b7       	in	r24, 0x3d	; 61
   1429a:	9e b7       	in	r25, 0x3e	; 62
   1429c:	06 96       	adiw	r24, 0x06	; 6
   1429e:	0f b6       	in	r0, 0x3f	; 63
   142a0:	f8 94       	cli
   142a2:	9e bf       	out	0x3e, r25	; 62
   142a4:	0f be       	out	0x3f, r0	; 63
   142a6:	8d bf       	out	0x3d, r24	; 61
   142a8:	96 e6       	ldi	r25, 0x66	; 102
   142aa:	c9 16       	cp	r12, r25
   142ac:	9b e0       	ldi	r25, 0x0B	; 11
   142ae:	d9 06       	cpc	r13, r25
   142b0:	29 f6       	brne	.-118    	; 0x1423c <SaveConfigParameter+0x324>
		 xEEPROM=atoi(strEEPROM);
         eeprom_write_byte(&DefPumpLabel[i],xEEPROM);
		 sprintf_P(strSend,PSTR("%d"),xEEPROM);
//		 uart_print(1,1,strSend); 
	 }    
	 uart_printf(1,1,PSTR("<OK>")); 
   142b2:	81 e0       	ldi	r24, 0x01	; 1
   142b4:	61 e0       	ldi	r22, 0x01	; 1
   142b6:	48 ee       	ldi	r20, 0xE8	; 232
   142b8:	53 e2       	ldi	r21, 0x23	; 35
   142ba:	0e 94 a0 a8 	call	0x15140	; 0x15140 <uart_printf>
}
   142be:	ca 5b       	subi	r28, 0xBA	; 186
   142c0:	df 4f       	sbci	r29, 0xFF	; 255
   142c2:	0f b6       	in	r0, 0x3f	; 63
   142c4:	f8 94       	cli
   142c6:	de bf       	out	0x3e, r29	; 62
   142c8:	0f be       	out	0x3f, r0	; 63
   142ca:	cd bf       	out	0x3d, r28	; 61
   142cc:	cf 91       	pop	r28
   142ce:	df 91       	pop	r29
   142d0:	1f 91       	pop	r17
   142d2:	0f 91       	pop	r16
   142d4:	ff 90       	pop	r15
   142d6:	ef 90       	pop	r14
   142d8:	df 90       	pop	r13
   142da:	cf 90       	pop	r12
   142dc:	bf 90       	pop	r11
   142de:	af 90       	pop	r10
   142e0:	9f 90       	pop	r9
   142e2:	8f 90       	pop	r8
   142e4:	7f 90       	pop	r7
   142e6:	6f 90       	pop	r6
   142e8:	08 95       	ret

000142ea <systemConfigProtocol>:



void systemConfigProtocol(){
     static char stConfigProtocol=cpWaitSend;
	 switch(stConfigProtocol){
   142ea:	80 91 a0 02 	lds	r24, 0x02A0
   142ee:	81 30       	cpi	r24, 0x01	; 1
   142f0:	c1 f0       	breq	.+48     	; 0x14322 <systemConfigProtocol+0x38>
   142f2:	81 30       	cpi	r24, 0x01	; 1
   142f4:	18 f0       	brcs	.+6      	; 0x142fc <systemConfigProtocol+0x12>
   142f6:	82 30       	cpi	r24, 0x02	; 2
   142f8:	e9 f4       	brne	.+58     	; 0x14334 <systemConfigProtocol+0x4a>
   142fa:	18 c0       	rjmp	.+48     	; 0x1432c <systemConfigProtocol+0x42>
	 case cpWaitSend:
	      switch(ConfigCommand){
   142fc:	80 91 b0 01 	lds	r24, 0x01B0
   14300:	81 30       	cpi	r24, 0x01	; 1
   14302:	31 f0       	breq	.+12     	; 0x14310 <systemConfigProtocol+0x26>
   14304:	82 30       	cpi	r24, 0x02	; 2
   14306:	51 f4       	brne	.+20     	; 0x1431c <systemConfigProtocol+0x32>
		  case CC_SEND_CONFIG:
		       ConfigCommand=CC_NONE;
   14308:	10 92 b0 01 	sts	0x01B0, r1
			   stConfigProtocol=cpSendingParameter;
   1430c:	81 e0       	ldi	r24, 0x01	; 1
   1430e:	03 c0       	rjmp	.+6      	; 0x14316 <systemConfigProtocol+0x2c>
		       break;
		  case CC_SAVE_CONFIG:
		       ConfigCommand=CC_NONE;
   14310:	10 92 b0 01 	sts	0x01B0, r1
			   stConfigProtocol=cpSavingParameter;
   14314:	82 e0       	ldi	r24, 0x02	; 2
   14316:	80 93 a0 02 	sts	0x02A0, r24
   1431a:	08 95       	ret
		       break;
          default:
		       ConfigCommand=CC_NONE;
   1431c:	10 92 b0 01 	sts	0x01B0, r1
   14320:	08 95       	ret
		       break;
		  }
	      break;
     case cpSendingParameter:
	      SendConfigParamater();
   14322:	0e 94 8e 9d 	call	0x13b1c	; 0x13b1c <SendConfigParamater>
          stConfigProtocol=cpWaitSend;
   14326:	10 92 a0 02 	sts	0x02A0, r1
   1432a:	08 95       	ret
	      break;
     case cpSavingParameter:
          SaveConfigParameter();
   1432c:	0e 94 8c 9f 	call	0x13f18	; 0x13f18 <SaveConfigParameter>
          stConfigProtocol=cpWaitSend;
   14330:	10 92 a0 02 	sts	0x02A0, r1
   14334:	08 95       	ret

00014336 <FMenuIdle>:
	     ProcTimeOut++;
	}
	TimSend++;
}

void FMenuIdle(){
   14336:	1f 93       	push	r17
	static char stMenuIdle=miInit,ButtonID=0;
	       char PrintStandaloneResult=PS_NONE;
	       char KeyPressed=0,KeyChar=0;
	       char lcdteks[20];

	switch(stMenuIdle){
   14338:	80 91 ac 02 	lds	r24, 0x02AC
   1433c:	e8 2f       	mov	r30, r24
   1433e:	f0 e0       	ldi	r31, 0x00	; 0
   14340:	e9 31       	cpi	r30, 0x19	; 25
   14342:	f1 05       	cpc	r31, r1
   14344:	08 f0       	brcs	.+2      	; 0x14348 <FMenuIdle+0x12>
   14346:	7e c1       	rjmp	.+764    	; 0x14644 <FMenuIdle+0x30e>
   14348:	eb 5d       	subi	r30, 0xDB	; 219
   1434a:	fe 4f       	sbci	r31, 0xFE	; 254
   1434c:	ee 0f       	add	r30, r30
   1434e:	ff 1f       	adc	r31, r31
   14350:	05 90       	lpm	r0, Z+
   14352:	f4 91       	lpm	r31, Z+
   14354:	e0 2d       	mov	r30, r0
   14356:	09 94       	ijmp
	case miInit:
         DisplayScreenIdle();
   14358:	0e 94 ae 48 	call	0x915c	; 0x915c <DisplayScreenIdle>
   1435c:	3a c1       	rjmp	.+628    	; 0x145d2 <FMenuIdle+0x29c>
		 stMenuIdle=miScan;		
	     break;
	case miScan:
         //Scan Key Pressed 
		 KeyPressed=_key_scan(1);
   1435e:	81 e0       	ldi	r24, 0x01	; 1
   14360:	0e 94 f6 a5 	call	0x14bec	; 0x14bec <_key_scan>
   14364:	18 2f       	mov	r17, r24
		 KeyChar= _key_btn(KeyPressed);       
   14366:	0e 94 57 a5 	call	0x14aae	; 0x14aae <_key_btn>

		 switch(KeyPressed){
   1436a:	1b 3b       	cpi	r17, 0xBB	; 187
   1436c:	09 f4       	brne	.+2      	; 0x14370 <FMenuIdle+0x3a>
   1436e:	7a c0       	rjmp	.+244    	; 0x14464 <FMenuIdle+0x12e>
   14370:	1c 3b       	cpi	r17, 0xBC	; 188
   14372:	70 f4       	brcc	.+28     	; 0x14390 <FMenuIdle+0x5a>
   14374:	1b 37       	cpi	r17, 0x7B	; 123
   14376:	69 f1       	breq	.+90     	; 0x143d2 <FMenuIdle+0x9c>
   14378:	1c 37       	cpi	r17, 0x7C	; 124
   1437a:	20 f4       	brcc	.+8      	; 0x14384 <FMenuIdle+0x4e>
   1437c:	17 37       	cpi	r17, 0x77	; 119
   1437e:	09 f0       	breq	.+2      	; 0x14382 <FMenuIdle+0x4c>
   14380:	61 c1       	rjmp	.+706    	; 0x14644 <FMenuIdle+0x30e>
   14382:	2e c0       	rjmp	.+92     	; 0x143e0 <FMenuIdle+0xaa>
   14384:	1d 37       	cpi	r17, 0x7D	; 125
   14386:	e9 f0       	breq	.+58     	; 0x143c2 <FMenuIdle+0x8c>
   14388:	1e 37       	cpi	r17, 0x7E	; 126
   1438a:	09 f0       	breq	.+2      	; 0x1438e <FMenuIdle+0x58>
   1438c:	5b c1       	rjmp	.+694    	; 0x14644 <FMenuIdle+0x30e>
   1438e:	12 c0       	rjmp	.+36     	; 0x143b4 <FMenuIdle+0x7e>
   14390:	1d 3d       	cpi	r17, 0xDD	; 221
   14392:	09 f4       	brne	.+2      	; 0x14396 <FMenuIdle+0x60>
   14394:	4f c0       	rjmp	.+158    	; 0x14434 <FMenuIdle+0xfe>
   14396:	1e 3d       	cpi	r17, 0xDE	; 222
   14398:	38 f4       	brcc	.+14     	; 0x143a8 <FMenuIdle+0x72>
   1439a:	1d 3b       	cpi	r17, 0xBD	; 189
   1439c:	09 f4       	brne	.+2      	; 0x143a0 <FMenuIdle+0x6a>
   1439e:	56 c0       	rjmp	.+172    	; 0x1444c <FMenuIdle+0x116>
   143a0:	17 3d       	cpi	r17, 0xD7	; 215
   143a2:	09 f0       	breq	.+2      	; 0x143a6 <FMenuIdle+0x70>
   143a4:	4f c1       	rjmp	.+670    	; 0x14644 <FMenuIdle+0x30e>
   143a6:	27 c0       	rjmp	.+78     	; 0x143f6 <FMenuIdle+0xc0>
   143a8:	1e 3d       	cpi	r17, 0xDE	; 222
   143aa:	61 f1       	breq	.+88     	; 0x14404 <FMenuIdle+0xce>
   143ac:	1d 3e       	cpi	r17, 0xED	; 237
   143ae:	09 f0       	breq	.+2      	; 0x143b2 <FMenuIdle+0x7c>
   143b0:	49 c1       	rjmp	.+658    	; 0x14644 <FMenuIdle+0x30e>
   143b2:	34 c0       	rjmp	.+104    	; 0x1441c <FMenuIdle+0xe6>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   143b4:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   143b6:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   143b8:	92 e0       	ldi	r25, 0x02	; 2
   143ba:	90 93 bc 01 	sts	0x01BC, r25
         //Scan Key Pressed 
		 KeyPressed=_key_scan(1);
		 KeyChar= _key_btn(KeyPressed);       

		 switch(KeyPressed){
		 case _KEY_TIKET:system_beep(2);ButtonID=1;stMenuIdle=miDisplayProses;break;
   143be:	81 e0       	ldi	r24, 0x01	; 1
   143c0:	15 c0       	rjmp	.+42     	; 0x143ec <FMenuIdle+0xb6>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   143c2:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   143c4:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   143c6:	82 e0       	ldi	r24, 0x02	; 2
   143c8:	80 93 bc 01 	sts	0x01BC, r24
		 KeyPressed=_key_scan(1);
		 KeyChar= _key_btn(KeyPressed);       

		 switch(KeyPressed){
		 case _KEY_TIKET:system_beep(2);ButtonID=1;stMenuIdle=miDisplayProses;break;
		 case _KEY_MENU: system_beep(2);ButtonID=2;stMenuIdle=miDisplayProses;break;
   143cc:	80 93 ab 02 	sts	0x02AB, r24
   143d0:	37 c1       	rjmp	.+622    	; 0x14640 <FMenuIdle+0x30a>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   143d2:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   143d4:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   143d6:	92 e0       	ldi	r25, 0x02	; 2
   143d8:	90 93 bc 01 	sts	0x01BC, r25
		 KeyChar= _key_btn(KeyPressed);       

		 switch(KeyPressed){
		 case _KEY_TIKET:system_beep(2);ButtonID=1;stMenuIdle=miDisplayProses;break;
		 case _KEY_MENU: system_beep(2);ButtonID=2;stMenuIdle=miDisplayProses;break;
		 case _KEY_SHIFT:system_beep(2);ButtonID=3;stMenuIdle=miDisplayProses;break;
   143dc:	83 e0       	ldi	r24, 0x03	; 3
   143de:	06 c0       	rjmp	.+12     	; 0x143ec <FMenuIdle+0xb6>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   143e0:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   143e2:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   143e4:	92 e0       	ldi	r25, 0x02	; 2
   143e6:	90 93 bc 01 	sts	0x01BC, r25

		 switch(KeyPressed){
		 case _KEY_TIKET:system_beep(2);ButtonID=1;stMenuIdle=miDisplayProses;break;
		 case _KEY_MENU: system_beep(2);ButtonID=2;stMenuIdle=miDisplayProses;break;
		 case _KEY_SHIFT:system_beep(2);ButtonID=3;stMenuIdle=miDisplayProses;break;
		 case _KEY_CLEAR:system_beep(2);ButtonID=4;stMenuIdle=miDisplayProses;break;//stMenuIdle=miTestMsg56;break;//miDisplayProses;break;
   143ea:	84 e0       	ldi	r24, 0x04	; 4
   143ec:	80 93 ab 02 	sts	0x02AB, r24
   143f0:	90 93 ac 02 	sts	0x02AC, r25
   143f4:	27 c1       	rjmp	.+590    	; 0x14644 <FMenuIdle+0x30e>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   143f6:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   143f8:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   143fa:	82 e0       	ldi	r24, 0x02	; 2
   143fc:	80 93 bc 01 	sts	0x01BC, r24
		 switch(KeyPressed){
		 case _KEY_TIKET:system_beep(2);ButtonID=1;stMenuIdle=miDisplayProses;break;
		 case _KEY_MENU: system_beep(2);ButtonID=2;stMenuIdle=miDisplayProses;break;
		 case _KEY_SHIFT:system_beep(2);ButtonID=3;stMenuIdle=miDisplayProses;break;
		 case _KEY_CLEAR:system_beep(2);ButtonID=4;stMenuIdle=miDisplayProses;break;//stMenuIdle=miTestMsg56;break;//miDisplayProses;break;
		 case _KEY_0:    system_beep(2);           stMenuIdle=miRunTicket;    break;
   14400:	8c e0       	ldi	r24, 0x0C	; 12
   14402:	1e c1       	rjmp	.+572    	; 0x14640 <FMenuIdle+0x30a>
	   //case _KEY_1:    system_beep(2);           stMenuIdle=miRunTotalizer; break;
		 case _KEY_2: if(IFType==IT_SLAVE) {system_beep(2); stMenuIdle=miRunEDC;}       break;
   14404:	80 91 00 01 	lds	r24, 0x0100
   14408:	81 30       	cpi	r24, 0x01	; 1
   1440a:	09 f0       	breq	.+2      	; 0x1440e <FMenuIdle+0xd8>
   1440c:	1b c1       	rjmp	.+566    	; 0x14644 <FMenuIdle+0x30e>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   1440e:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   14410:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   14412:	82 e0       	ldi	r24, 0x02	; 2
   14414:	80 93 bc 01 	sts	0x01BC, r24
		 case _KEY_MENU: system_beep(2);ButtonID=2;stMenuIdle=miDisplayProses;break;
		 case _KEY_SHIFT:system_beep(2);ButtonID=3;stMenuIdle=miDisplayProses;break;
		 case _KEY_CLEAR:system_beep(2);ButtonID=4;stMenuIdle=miDisplayProses;break;//stMenuIdle=miTestMsg56;break;//miDisplayProses;break;
		 case _KEY_0:    system_beep(2);           stMenuIdle=miRunTicket;    break;
	   //case _KEY_1:    system_beep(2);           stMenuIdle=miRunTotalizer; break;
		 case _KEY_2: if(IFType==IT_SLAVE) {system_beep(2); stMenuIdle=miRunEDC;}       break;
   14418:	80 e1       	ldi	r24, 0x10	; 16
   1441a:	12 c1       	rjmp	.+548    	; 0x14640 <FMenuIdle+0x30a>
	   //case _KEY_3:    system_beep(2);           stMenuIdle=miClearTotalizer;break;
		 case _KEY_4: if(IFType==IT_SLAVE) {system_beep(2);stMenuIdle=miRunReprint;}   break;
   1441c:	80 91 00 01 	lds	r24, 0x0100
   14420:	81 30       	cpi	r24, 0x01	; 1
   14422:	09 f0       	breq	.+2      	; 0x14426 <FMenuIdle+0xf0>
   14424:	0f c1       	rjmp	.+542    	; 0x14644 <FMenuIdle+0x30e>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   14426:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   14428:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   1442a:	82 e0       	ldi	r24, 0x02	; 2
   1442c:	80 93 bc 01 	sts	0x01BC, r24
		 case _KEY_CLEAR:system_beep(2);ButtonID=4;stMenuIdle=miDisplayProses;break;//stMenuIdle=miTestMsg56;break;//miDisplayProses;break;
		 case _KEY_0:    system_beep(2);           stMenuIdle=miRunTicket;    break;
	   //case _KEY_1:    system_beep(2);           stMenuIdle=miRunTotalizer; break;
		 case _KEY_2: if(IFType==IT_SLAVE) {system_beep(2); stMenuIdle=miRunEDC;}       break;
	   //case _KEY_3:    system_beep(2);           stMenuIdle=miClearTotalizer;break;
		 case _KEY_4: if(IFType==IT_SLAVE) {system_beep(2);stMenuIdle=miRunReprint;}   break;
   14430:	82 e1       	ldi	r24, 0x12	; 18
   14432:	06 c1       	rjmp	.+524    	; 0x14640 <FMenuIdle+0x30a>
		 case _KEY_5: if(IFType==IT_SLAVE) {system_beep(2);stMenuIdle=miRunLoyalty;}   break;
   14434:	80 91 00 01 	lds	r24, 0x0100
   14438:	81 30       	cpi	r24, 0x01	; 1
   1443a:	09 f0       	breq	.+2      	; 0x1443e <FMenuIdle+0x108>
   1443c:	03 c1       	rjmp	.+518    	; 0x14644 <FMenuIdle+0x30e>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   1443e:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   14440:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   14442:	82 e0       	ldi	r24, 0x02	; 2
   14444:	80 93 bc 01 	sts	0x01BC, r24
		 case _KEY_0:    system_beep(2);           stMenuIdle=miRunTicket;    break;
	   //case _KEY_1:    system_beep(2);           stMenuIdle=miRunTotalizer; break;
		 case _KEY_2: if(IFType==IT_SLAVE) {system_beep(2); stMenuIdle=miRunEDC;}       break;
	   //case _KEY_3:    system_beep(2);           stMenuIdle=miClearTotalizer;break;
		 case _KEY_4: if(IFType==IT_SLAVE) {system_beep(2);stMenuIdle=miRunReprint;}   break;
		 case _KEY_5: if(IFType==IT_SLAVE) {system_beep(2);stMenuIdle=miRunLoyalty;}   break;
   14448:	81 e1       	ldi	r24, 0x11	; 17
   1444a:	fa c0       	rjmp	.+500    	; 0x14640 <FMenuIdle+0x30a>
		 case _KEY_6: if(IFType==IT_SLAVE) {system_beep(2);stMenuIdle=miRunChangeMOP;} break;
   1444c:	80 91 00 01 	lds	r24, 0x0100
   14450:	81 30       	cpi	r24, 0x01	; 1
   14452:	09 f0       	breq	.+2      	; 0x14456 <FMenuIdle+0x120>
   14454:	f7 c0       	rjmp	.+494    	; 0x14644 <FMenuIdle+0x30e>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   14456:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   14458:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   1445a:	82 e0       	ldi	r24, 0x02	; 2
   1445c:	80 93 bc 01 	sts	0x01BC, r24
	   //case _KEY_1:    system_beep(2);           stMenuIdle=miRunTotalizer; break;
		 case _KEY_2: if(IFType==IT_SLAVE) {system_beep(2); stMenuIdle=miRunEDC;}       break;
	   //case _KEY_3:    system_beep(2);           stMenuIdle=miClearTotalizer;break;
		 case _KEY_4: if(IFType==IT_SLAVE) {system_beep(2);stMenuIdle=miRunReprint;}   break;
		 case _KEY_5: if(IFType==IT_SLAVE) {system_beep(2);stMenuIdle=miRunLoyalty;}   break;
		 case _KEY_6: if(IFType==IT_SLAVE) {system_beep(2);stMenuIdle=miRunChangeMOP;} break;
   14460:	8f e0       	ldi	r24, 0x0F	; 15
   14462:	ee c0       	rjmp	.+476    	; 0x14640 <FMenuIdle+0x30a>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   14464:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   14466:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   14468:	82 e0       	ldi	r24, 0x02	; 2
   1446a:	80 93 bc 01 	sts	0x01BC, r24
	   //case _KEY_3:    system_beep(2);           stMenuIdle=miClearTotalizer;break;
		 case _KEY_4: if(IFType==IT_SLAVE) {system_beep(2);stMenuIdle=miRunReprint;}   break;
		 case _KEY_5: if(IFType==IT_SLAVE) {system_beep(2);stMenuIdle=miRunLoyalty;}   break;
		 case _KEY_6: if(IFType==IT_SLAVE) {system_beep(2);stMenuIdle=miRunChangeMOP;} break;
		 //case _KEY_8:    system_beep(2);           stMenuIdle=miRunTestChar;   break;
		 case _KEY_9:    system_beep(2);stMenuIdle=miRunAuth;      break;
   1446e:	8d e0       	ldi	r24, 0x0D	; 13
   14470:	e7 c0       	rjmp	.+462    	; 0x14640 <FMenuIdle+0x30a>
		 }
	     break;
    case miTestMsg56:
	     sprintf_P(strCardID,PSTR("4356A31A"));
   14472:	00 d0       	rcall	.+0      	; 0x14474 <FMenuIdle+0x13e>
   14474:	00 d0       	rcall	.+0      	; 0x14476 <FMenuIdle+0x140>
   14476:	89 e8       	ldi	r24, 0x89	; 137
   14478:	9b e0       	ldi	r25, 0x0B	; 11
   1447a:	ed b7       	in	r30, 0x3d	; 61
   1447c:	fe b7       	in	r31, 0x3e	; 62
   1447e:	92 83       	std	Z+2, r25	; 0x02
   14480:	81 83       	std	Z+1, r24	; 0x01
   14482:	81 e1       	ldi	r24, 0x11	; 17
   14484:	95 e2       	ldi	r25, 0x25	; 37
   14486:	94 83       	std	Z+4, r25	; 0x04
   14488:	83 83       	std	Z+3, r24	; 0x03
   1448a:	0e 94 82 aa 	call	0x15504	; 0x15504 <sprintf_P>
	     sendMessage56();
   1448e:	0f 90       	pop	r0
   14490:	0f 90       	pop	r0
   14492:	0f 90       	pop	r0
   14494:	0f 90       	pop	r0
   14496:	0e 94 6f 7f 	call	0xfede	; 0xfede <sendMessage56>
         stMenuIdle=miDisplayProses;
   1449a:	82 e0       	ldi	r24, 0x02	; 2
   1449c:	d1 c0       	rjmp	.+418    	; 0x14640 <FMenuIdle+0x30a>
	     break;
	case miDisplayProses:
	     if (IsBusyIdlePrinting==False){
   1449e:	80 91 b2 01 	lds	r24, 0x01B2
   144a2:	88 23       	and	r24, r24
   144a4:	09 f0       	breq	.+2      	; 0x144a8 <FMenuIdle+0x172>
   144a6:	95 c0       	rjmp	.+298    	; 0x145d2 <FMenuIdle+0x29c>
		     lcd_printf(3,1,PSTR("SedangProses"));
   144a8:	83 e0       	ldi	r24, 0x03	; 3
   144aa:	61 e0       	ldi	r22, 0x01	; 1
   144ac:	44 e0       	ldi	r20, 0x04	; 4
   144ae:	55 e2       	ldi	r21, 0x25	; 37
   144b0:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
	         TimDisplay=0;
   144b4:	10 92 92 01 	sts	0x0192, r1
			 stMenuIdle=miWaitProses;
   144b8:	83 e0       	ldi	r24, 0x03	; 3
   144ba:	c2 c0       	rjmp	.+388    	; 0x14640 <FMenuIdle+0x30a>
         }else stMenuIdle=miScan;
	     break;
    case miWaitProses:
	     if (TimDisplay>1){
   144bc:	80 91 92 01 	lds	r24, 0x0192
   144c0:	82 30       	cpi	r24, 0x02	; 2
   144c2:	08 f4       	brcc	.+2      	; 0x144c6 <FMenuIdle+0x190>
   144c4:	bf c0       	rjmp	.+382    	; 0x14644 <FMenuIdle+0x30e>
		     if (IFType==IT_SLAVE)stMenuIdle=miSendMessage98;
   144c6:	80 91 00 01 	lds	r24, 0x0100
   144ca:	81 30       	cpi	r24, 0x01	; 1
   144cc:	11 f4       	brne	.+4      	; 0x144d2 <FMenuIdle+0x19c>
   144ce:	84 e0       	ldi	r24, 0x04	; 4
   144d0:	b7 c0       	rjmp	.+366    	; 0x14640 <FMenuIdle+0x30a>
			 else
		     if (IFType==IT_STANDALONE)stMenuIdle=miPrintStandalone;
   144d2:	82 30       	cpi	r24, 0x02	; 2
   144d4:	09 f0       	breq	.+2      	; 0x144d8 <FMenuIdle+0x1a2>
   144d6:	b6 c0       	rjmp	.+364    	; 0x14644 <FMenuIdle+0x30e>
   144d8:	87 e0       	ldi	r24, 0x07	; 7
   144da:	b2 c0       	rjmp	.+356    	; 0x14640 <FMenuIdle+0x30a>
		 }
	     break;
    case miPrintStandalone:
	     PrintStandaloneResult=PrintStandalone(ButtonID,False);
   144dc:	80 91 ab 02 	lds	r24, 0x02AB
   144e0:	60 e0       	ldi	r22, 0x00	; 0
   144e2:	0e 94 c5 22 	call	0x458a	; 0x458a <PrintStandalone>
	     if (PrintStandaloneResult==PS_PRINTED)stMenuIdle=miReady;
   144e6:	81 31       	cpi	r24, 0x11	; 17
   144e8:	09 f4       	brne	.+2      	; 0x144ec <FMenuIdle+0x1b6>
   144ea:	a9 c0       	rjmp	.+338    	; 0x1463e <FMenuIdle+0x308>
		 else
		 if (PrintStandaloneResult==PS_NO_DATA)stMenuIdle=miDisplayNoTransaction;
   144ec:	82 31       	cpi	r24, 0x12	; 18
   144ee:	09 f0       	breq	.+2      	; 0x144f2 <FMenuIdle+0x1bc>
   144f0:	a9 c0       	rjmp	.+338    	; 0x14644 <FMenuIdle+0x30e>
   144f2:	88 e0       	ldi	r24, 0x08	; 8
   144f4:	a5 c0       	rjmp	.+330    	; 0x14640 <FMenuIdle+0x30a>
	     break;
    case miDisplayNoTransaction:
	     lcd_printf(3, 1,PSTR("Tidak Ada Transaksi "));
   144f6:	83 e0       	ldi	r24, 0x03	; 3
   144f8:	61 e0       	ldi	r22, 0x01	; 1
   144fa:	4f ee       	ldi	r20, 0xEF	; 239
   144fc:	54 e2       	ldi	r21, 0x24	; 36
   144fe:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
         TimDisplay=0;
   14502:	10 92 92 01 	sts	0x0192, r1
		 stMenuIdle=miWaitDisplayNoTransaction;
   14506:	89 e0       	ldi	r24, 0x09	; 9
   14508:	9b c0       	rjmp	.+310    	; 0x14640 <FMenuIdle+0x30a>
	     break;
    case miWaitDisplayNoTransaction:
	     if (TimDisplay>1){
   1450a:	80 91 92 01 	lds	r24, 0x0192
   1450e:	82 30       	cpi	r24, 0x02	; 2
   14510:	08 f4       	brcc	.+2      	; 0x14514 <FMenuIdle+0x1de>
   14512:	98 c0       	rjmp	.+304    	; 0x14644 <FMenuIdle+0x30e>
	         lcd_printf(3,1,PSTR("Ready...            "));
   14514:	83 e0       	ldi	r24, 0x03	; 3
   14516:	61 e0       	ldi	r22, 0x01	; 1
   14518:	4a ed       	ldi	r20, 0xDA	; 218
   1451a:	54 e2       	ldi	r21, 0x24	; 36
   1451c:	32 c0       	rjmp	.+100    	; 0x14582 <FMenuIdle+0x24c>
		     stMenuIdle=miWaitReady;
			 TimDisplay=0;
		 }
	     break;
    case miSendMessage98:
	     lcd_printf(3,1,PSTR("Please Wait..       "));
   1451e:	83 e0       	ldi	r24, 0x03	; 3
   14520:	61 e0       	ldi	r22, 0x01	; 1
   14522:	45 ec       	ldi	r20, 0xC5	; 197
   14524:	54 e2       	ldi	r21, 0x24	; 36
   14526:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
	     sendMessage98(ButtonID);
   1452a:	80 91 ab 02 	lds	r24, 0x02AB
   1452e:	0e 94 04 7d 	call	0xfa08	; 0xfa08 <sendMessage98>
		 ProcTimeOut=0;
   14532:	10 92 bb 01 	sts	0x01BB, r1
		 stMenuIdle=miWaitPlease;
   14536:	85 e0       	ldi	r24, 0x05	; 5
   14538:	83 c0       	rjmp	.+262    	; 0x14640 <FMenuIdle+0x30a>
	     break;
    case miWaitPlease:	     
         if (ProcTimeOut>TIM_NO_RESPONSE){
   1453a:	80 91 bb 01 	lds	r24, 0x01BB
   1453e:	8f 30       	cpi	r24, 0x0F	; 15
   14540:	58 f0       	brcs	.+22     	; 0x14558 <FMenuIdle+0x222>
	         lcd_printf(3,1,PSTR("No Response..       "));
   14542:	83 e0       	ldi	r24, 0x03	; 3
   14544:	61 e0       	ldi	r22, 0x01	; 1
   14546:	40 eb       	ldi	r20, 0xB0	; 176
   14548:	54 e2       	ldi	r21, 0x24	; 36
   1454a:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		     stMenuIdle=miNoResponse;
   1454e:	86 e0       	ldi	r24, 0x06	; 6
   14550:	80 93 ac 02 	sts	0x02AC, r24
			 TimDisplay=0;		 
   14554:	10 92 92 01 	sts	0x0192, r1
		 }
		 if ((IsMessage99==True)||(IsMessage00==True)){
   14558:	80 91 9f 01 	lds	r24, 0x019F
   1455c:	81 30       	cpi	r24, 0x01	; 1
   1455e:	29 f0       	breq	.+10     	; 0x1456a <FMenuIdle+0x234>
   14560:	80 91 9e 01 	lds	r24, 0x019E
   14564:	81 30       	cpi	r24, 0x01	; 1
   14566:	09 f0       	breq	.+2      	; 0x1456a <FMenuIdle+0x234>
   14568:	6d c0       	rjmp	.+218    	; 0x14644 <FMenuIdle+0x30e>
		     ClearMem(strOdometer);
   1456a:	83 ec       	ldi	r24, 0xC3	; 195
   1456c:	93 e0       	ldi	r25, 0x03	; 3
   1456e:	0e 94 f1 a4 	call	0x149e2	; 0x149e2 <ClearMem>
		     ClearMem(strLicPlate);
   14572:	8a ef       	ldi	r24, 0xFA	; 250
   14574:	98 e0       	ldi	r25, 0x08	; 8
   14576:	0e 94 f1 a4 	call	0x149e2	; 0x149e2 <ClearMem>
	         lcd_printf(3,1,PSTR("Ready...            "));
   1457a:	83 e0       	ldi	r24, 0x03	; 3
   1457c:	61 e0       	ldi	r22, 0x01	; 1
   1457e:	4b e9       	ldi	r20, 0x9B	; 155
   14580:	54 e2       	ldi	r21, 0x24	; 36
   14582:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		     stMenuIdle=miWaitReady;
   14586:	8a e0       	ldi	r24, 0x0A	; 10
   14588:	80 93 ac 02 	sts	0x02AC, r24
			 TimDisplay=0;
   1458c:	10 92 92 01 	sts	0x0192, r1
   14590:	59 c0       	rjmp	.+178    	; 0x14644 <FMenuIdle+0x30e>
			 }
	     break;
    case miNoResponse:
         if (TimDisplay>1){
   14592:	80 91 92 01 	lds	r24, 0x0192
   14596:	82 30       	cpi	r24, 0x02	; 2
   14598:	08 f4       	brcc	.+2      	; 0x1459c <FMenuIdle+0x266>
   1459a:	54 c0       	rjmp	.+168    	; 0x14644 <FMenuIdle+0x30e>
	         lcd_printf(3,1,PSTR("Ready...            "));
   1459c:	83 e0       	ldi	r24, 0x03	; 3
   1459e:	61 e0       	ldi	r22, 0x01	; 1
   145a0:	46 e8       	ldi	r20, 0x86	; 134
   145a2:	54 e2       	ldi	r21, 0x24	; 36
   145a4:	ee cf       	rjmp	.-36     	; 0x14582 <FMenuIdle+0x24c>
		     stMenuIdle=miWaitReady;
			 TimDisplay=0;
			 }	     
	     break;
    case miWaitReady:
         if (TimDisplay>1){
   145a6:	80 91 92 01 	lds	r24, 0x0192
   145aa:	82 30       	cpi	r24, 0x02	; 2
   145ac:	08 f4       	brcc	.+2      	; 0x145b0 <FMenuIdle+0x27a>
   145ae:	4a c0       	rjmp	.+148    	; 0x14644 <FMenuIdle+0x30e>
	         lcd_printf(3,1,PSTR("                "));
   145b0:	83 e0       	ldi	r24, 0x03	; 3
   145b2:	61 e0       	ldi	r22, 0x01	; 1
   145b4:	45 e7       	ldi	r20, 0x75	; 117
   145b6:	54 e2       	ldi	r21, 0x24	; 36
   145b8:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		     stMenuIdle=miReady;
   145bc:	8b e0       	ldi	r24, 0x0B	; 11
   145be:	e4 cf       	rjmp	.-56     	; 0x14588 <FMenuIdle+0x252>
			 TimDisplay=0;
			 }	     
	     break;
    case miReady:
	     DisplayScreenIdle();
   145c0:	0e 94 ae 48 	call	0x915c	; 0x915c <DisplayScreenIdle>
		 if (IFType==IT_STANDALONE)IsNewPumpStatus=True;
   145c4:	80 91 00 01 	lds	r24, 0x0100
   145c8:	82 30       	cpi	r24, 0x02	; 2
   145ca:	19 f4       	brne	.+6      	; 0x145d2 <FMenuIdle+0x29c>
   145cc:	81 e0       	ldi	r24, 0x01	; 1
   145ce:	80 93 01 01 	sts	0x0101, r24
		 stMenuIdle=miScan;
   145d2:	81 e0       	ldi	r24, 0x01	; 1
   145d4:	35 c0       	rjmp	.+106    	; 0x14640 <FMenuIdle+0x30a>
	     break;
	case miRunTicket://Slave,Standalone
		 if (FMenuTicket()==MENU_DONE)
   145d6:	0e 94 2b 7d 	call	0xfa56	; 0xfa56 <FMenuTicket>
   145da:	2f c0       	rjmp	.+94     	; 0x1463a <FMenuIdle+0x304>
		     stMenuIdle=miReady;
	     break;
	case miRunAuth://Slave,Standalone
		 if (FMenuAuthorization()==MENU_DONE)
   145dc:	0e 94 18 8e 	call	0x11c30	; 0x11c30 <FMenuAuthorization>
   145e0:	2c c0       	rjmp	.+88     	; 0x1463a <FMenuIdle+0x304>
		     stMenuIdle=miReady;
	     break;
		 
    case miRunLocalAccount://Slave
		 if (FMenuLocalAccount()==MENU_DONE)
   145e2:	0e 94 73 7f 	call	0xfee6	; 0xfee6 <FMenuLocalAccount>
   145e6:	29 c0       	rjmp	.+82     	; 0x1463a <FMenuIdle+0x304>
		     stMenuIdle=miReady;
	     break;  
    case miRunChangeMOP://Slave
	     if (FMenuChangeMOP()==MENU_DONE)
   145e8:	0e 94 2c 88 	call	0x11058	; 0x11058 <FMenuChangeMOP>
   145ec:	26 c0       	rjmp	.+76     	; 0x1463a <FMenuIdle+0x304>
		     stMenuIdle=miReady;
	     break;
    case miRunEDC://Slave
	     if (FMenuEDCTransaction()==MENU_DONE)
   145ee:	0e 94 82 7e 	call	0xfd04	; 0xfd04 <FMenuEDCTransaction>
   145f2:	23 c0       	rjmp	.+70     	; 0x1463a <FMenuIdle+0x304>
		     stMenuIdle=miReady;
         break;
    case miRunLoyalty://Slave
	     if (FMenuLoyalty()==MENU_DONE)
   145f4:	0e 94 82 8e 	call	0x11d04	; 0x11d04 <FMenuLoyalty>
   145f8:	20 c0       	rjmp	.+64     	; 0x1463a <FMenuIdle+0x304>
		     stMenuIdle=miReady;
	     break;
    case miRunReprint://Slave,Standalone
	     if (FMenuReprint()==MENU_DONE)
   145fa:	0e 94 64 8c 	call	0x118c8	; 0x118c8 <FMenuReprint>
   145fe:	1d c0       	rjmp	.+58     	; 0x1463a <FMenuIdle+0x304>
		     stMenuIdle=miReady;
	     break;
    case miRunViewFreeMessage://Slave
	     if (FViewFreeMessage()==MENU_DONE)
   14600:	0e 94 d1 47 	call	0x8fa2	; 0x8fa2 <FViewFreeMessage>
   14604:	1a c0       	rjmp	.+52     	; 0x1463a <FMenuIdle+0x304>
		     stMenuIdle=miReady;
	     break;
    case miClearTotalizer://Standalone
	     lcd_printf(3,1,PSTR("Clear Data Totalizer"));
   14606:	83 e0       	ldi	r24, 0x03	; 3
   14608:	61 e0       	ldi	r22, 0x01	; 1
   1460a:	40 e6       	ldi	r20, 0x60	; 96
   1460c:	54 e2       	ldi	r21, 0x24	; 36
   1460e:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
	     ResetTotalizer(TOTALIZER_LAST);
   14612:	80 e0       	ldi	r24, 0x00	; 0
   14614:	0e 94 a4 2a 	call	0x5548	; 0x5548 <ResetTotalizer>
         ResetTotalizer(TOTALIZER_NOW);
   14618:	81 e0       	ldi	r24, 0x01	; 1
   1461a:	0e 94 a4 2a 	call	0x5548	; 0x5548 <ResetTotalizer>
   1461e:	0f c0       	rjmp	.+30     	; 0x1463e <FMenuIdle+0x308>
         stMenuIdle=miReady;	      
	     break;
    case miRunTotalizer://Standalone
	     lcd_printf(3,1,PSTR("TotalizerAll     "));
   14620:	83 e0       	ldi	r24, 0x03	; 3
   14622:	61 e0       	ldi	r22, 0x01	; 1
   14624:	4e e4       	ldi	r20, 0x4E	; 78
   14626:	54 e2       	ldi	r21, 0x24	; 36
   14628:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
	     SendSlaveCommand(SC_TOTALIZER,PUMP_ALL);
   1462c:	85 e0       	ldi	r24, 0x05	; 5
   1462e:	62 e1       	ldi	r22, 0x12	; 18
   14630:	0e 94 91 5f 	call	0xbf22	; 0xbf22 <SendSlaveCommand>
   14634:	04 c0       	rjmp	.+8      	; 0x1463e <FMenuIdle+0x308>
		 stMenuIdle=miReady;	      
	     break;
    case miRunTestChar:	     
 	     if (FTestChar()==MENU_DONE)
   14636:	0e 94 0b 48 	call	0x9016	; 0x9016 <FTestChar>
   1463a:	81 30       	cpi	r24, 0x01	; 1
   1463c:	19 f4       	brne	.+6      	; 0x14644 <FMenuIdle+0x30e>
         stMenuIdle=miReady;
   1463e:	8b e0       	ldi	r24, 0x0B	; 11
   14640:	80 93 ac 02 	sts	0x02AC, r24
	     break;
	}
//----------SYSTEM_PROC--------------------------------

        //Bank InfoUpdated
        if (IsMessage21==True){
   14644:	80 91 a1 01 	lds	r24, 0x01A1
   14648:	81 30       	cpi	r24, 0x01	; 1
   1464a:	21 f4       	brne	.+8      	; 0x14654 <FMenuIdle+0x31e>
		    IsMessage21=False;
   1464c:	10 92 a1 01 	sts	0x01A1, r1
			procMessage21();
   14650:	0e 94 93 1b 	call	0x3726	; 0x3726 <procMessage21>

        }
        //Transaction Status
        if (IsMessage00==True){
   14654:	80 91 9e 01 	lds	r24, 0x019E
   14658:	81 30       	cpi	r24, 0x01	; 1
   1465a:	91 f4       	brne	.+36     	; 0x14680 <FMenuIdle+0x34a>
		    IsMessage00=False;
   1465c:	10 92 9e 01 	sts	0x019E, r1
*/
char procMessage00(){
     char Result,strSend[10];
	 Result=MSG00_NACK;
	 //Message57
	 if((rcv_trans[0]==0x01)&&(transLength==MSG00_LENGTH)){
   14660:	20 91 1d 09 	lds	r18, 0x091D
   14664:	21 30       	cpi	r18, 0x01	; 1
   14666:	61 f4       	brne	.+24     	; 0x14680 <FMenuIdle+0x34a>
   14668:	80 91 8b 01 	lds	r24, 0x018B
   1466c:	90 91 8c 01 	lds	r25, 0x018C
   14670:	8f 97       	sbiw	r24, 0x2f	; 47
   14672:	31 f4       	brne	.+12     	; 0x14680 <FMenuIdle+0x34a>

        }
        //Transaction Status
        if (IsMessage00==True){
		    IsMessage00=False;
			if (procMessage00()==MSG00_NO_PRINT){
   14674:	80 91 42 09 	lds	r24, 0x0942
   14678:	84 33       	cpi	r24, 0x34	; 52
   1467a:	11 f4       	brne	.+4      	; 0x14680 <FMenuIdle+0x34a>
			    IsNoTransaction=True;
   1467c:	20 93 ab 01 	sts	0x01AB, r18
				}
		}
  
		//Send EDC Message Information;
		if (IsSendMessageEDC==True){
   14680:	80 91 97 01 	lds	r24, 0x0197
   14684:	81 30       	cpi	r24, 0x01	; 1
   14686:	21 f4       	brne	.+8      	; 0x14690 <FMenuIdle+0x35a>
		    IsSendMessageEDC=False;
   14688:	10 92 97 01 	sts	0x0197, r1
			SendEDCMessage();
   1468c:	0e 94 0c 5f 	call	0xbe18	; 0xbe18 <SendEDCMessage>
		}
		if (IsEDCApproved==True){
   14690:	80 91 99 01 	lds	r24, 0x0199
   14694:	81 30       	cpi	r24, 0x01	; 1
   14696:	21 f4       	brne	.+8      	; 0x146a0 <FMenuIdle+0x36a>
		    IsEDCApproved=False;
   14698:	10 92 99 01 	sts	0x0199, r1
            sendMessage92();
   1469c:	0e 94 7a 7e 	call	0xfcf4	; 0xfcf4 <sendMessage92>
		}
		if (IsVoidTransaction==True){
   146a0:	80 91 9b 01 	lds	r24, 0x019B
   146a4:	81 30       	cpi	r24, 0x01	; 1
   146a6:	21 f4       	brne	.+8      	; 0x146b0 <FMenuIdle+0x37a>
		    IsVoidTransaction=False;
   146a8:	10 92 9b 01 	sts	0x019B, r1
            sendMessage94();
   146ac:	0e 94 76 7e 	call	0xfcec	; 0xfcec <sendMessage94>
		}


        //Message99 Detection 
        if (IsMessage99==True){
   146b0:	10 91 9f 01 	lds	r17, 0x019F
   146b4:	11 30       	cpi	r17, 0x01	; 1
   146b6:	31 f4       	brne	.+12     	; 0x146c4 <FMenuIdle+0x38e>
	        IsMessage99=False;
   146b8:	10 92 9f 01 	sts	0x019F, r1
		    procMessage99();
   146bc:	0e 94 af 42 	call	0x855e	; 0x855e <procMessage99>
		    IsPrinting=True;
   146c0:	10 93 ac 01 	sts	0x01AC, r17
		}
		//No Transaction
		if (IsNoTransaction==True){
   146c4:	80 91 ab 01 	lds	r24, 0x01AB
   146c8:	81 30       	cpi	r24, 0x01	; 1
   146ca:	41 f4       	brne	.+16     	; 0x146dc <FMenuIdle+0x3a6>
			IsNoTransaction=False;
   146cc:	10 92 ab 01 	sts	0x01AB, r1
			lcd_printf(3, 1,PSTR("Tidak Ada Transaksi "));
   146d0:	83 e0       	ldi	r24, 0x03	; 3
   146d2:	61 e0       	ldi	r22, 0x01	; 1
   146d4:	49 e3       	ldi	r20, 0x39	; 57
   146d6:	54 e2       	ldi	r21, 0x24	; 36
   146d8:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
		}
        
		//Display Idle
		if (stMenuIdle==miScan){//||(stMenuIdle=miWaitPlease)){ 
   146dc:	80 91 ac 02 	lds	r24, 0x02AC
   146e0:	81 30       	cpi	r24, 0x01	; 1
   146e2:	11 f4       	brne	.+4      	; 0x146e8 <FMenuIdle+0x3b2>
		    DisplayIdle();			
   146e4:	0e 94 a4 5d 	call	0xbb48	; 0xbb48 <DisplayIdle>
			}        

        //Display FreeMessage
		if (stMenuIdle==miScan){ 
   146e8:	80 91 ac 02 	lds	r24, 0x02AC
   146ec:	81 30       	cpi	r24, 0x01	; 1
   146ee:	59 f4       	brne	.+22     	; 0x14706 <FMenuIdle+0x3d0>
		    if (IsMessage09==True){
   146f0:	80 91 a3 01 	lds	r24, 0x01A3
   146f4:	81 30       	cpi	r24, 0x01	; 1
   146f6:	39 f4       	brne	.+14     	; 0x14706 <FMenuIdle+0x3d0>
			    IsMessage09=False;
   146f8:	10 92 a3 01 	sts	0x01A3, r1
				procMessage09();
   146fc:	0e 94 c7 17 	call	0x2f8e	; 0x2f8e <procMessage09>
				stMenuIdle=miRunViewFreeMessage;
   14700:	83 e1       	ldi	r24, 0x13	; 19
   14702:	80 93 ac 02 	sts	0x02AC, r24
			   }
			}

        //LocalAccount Scanning
		if ((stMenuIdle==miScan)&&(IsRFIDDetected==True)){
   14706:	80 91 ac 02 	lds	r24, 0x02AC
   1470a:	81 30       	cpi	r24, 0x01	; 1
   1470c:	71 f4       	brne	.+28     	; 0x1472a <FMenuIdle+0x3f4>
   1470e:	80 91 98 01 	lds	r24, 0x0198
   14712:	81 30       	cpi	r24, 0x01	; 1
   14714:	51 f4       	brne	.+20     	; 0x1472a <FMenuIdle+0x3f4>
		    IsRFIDDetected=False;
   14716:	10 92 98 01 	sts	0x0198, r1
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   1471a:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   1471c:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   1471e:	82 e0       	ldi	r24, 0x02	; 2
   14720:	80 93 bc 01 	sts	0x01BC, r24

        //LocalAccount Scanning
		if ((stMenuIdle==miScan)&&(IsRFIDDetected==True)){
		    IsRFIDDetected=False;
		    system_beep(2);           
			stMenuIdle=miRunLocalAccount;
   14724:	8e e0       	ldi	r24, 0x0E	; 14
   14726:	80 93 ac 02 	sts	0x02AC, r24
		}
        //Print Spooling
		if (IsMessage81==True){
   1472a:	10 91 a6 01 	lds	r17, 0x01A6
   1472e:	11 30       	cpi	r17, 0x01	; 1
   14730:	41 f4       	brne	.+16     	; 0x14742 <FMenuIdle+0x40c>
		    IsMessage81=False;
   14732:	10 92 a6 01 	sts	0x01A6, r1
			//Spooling HFCS 0000 : Header, Footer, Copy , Scrool [Copy:16x max]
			cmdPrint=procMessage81();
   14736:	0e 94 a4 18 	call	0x3148	; 0x3148 <procMessage81>
   1473a:	80 93 b5 01 	sts	0x01B5, r24
			IsFreePrinting=True;
   1473e:	10 93 a8 01 	sts	0x01A8, r17
         }

    //SystemService
      systemGenerateReport();
   14742:	0e 94 1d 36 	call	0x6c3a	; 0x6c3a <systemGenerateReport>
      systemPrinting();
   14746:	0e 94 89 9d 	call	0x13b12	; 0x13b12 <systemPrinting>
	  systemEDC();
	  systemConfigProtocol();
   1474a:	0e 94 75 a1 	call	0x142ea	; 0x142ea <systemConfigProtocol>
	  //systemGeniusProtocol(); //AKR-->Protocol disabled
}
   1474e:	1f 91       	pop	r17
   14750:	08 95       	ret

00014752 <lcd_command>:
	lcd_command(0x0c);
	lcd_command(0x06);
}

void lcd_command(unsigned char __chr){
	_LCD_PORT = __chr & 0xF0;
   14752:	98 2f       	mov	r25, r24
   14754:	90 7f       	andi	r25, 0xF0	; 240
   14756:	95 bb       	out	0x15, r25	; 21
	cbi(_LCD_PORT, _LCD_RS);
   14758:	ab 98       	cbi	0x15, 3	; 21
	sbi(_LCD_PORT, _LCD_E);
   1475a:	a9 9a       	sbi	0x15, 1	; 21
   1475c:	48 ee       	ldi	r20, 0xE8	; 232
   1475e:	53 e0       	ldi	r21, 0x03	; 3
   14760:	fa 01       	movw	r30, r20
   14762:	31 97       	sbiw	r30, 0x01	; 1
   14764:	f1 f7       	brne	.-4      	; 0x14762 <lcd_command+0x10>
	_LCD_BUSY;
	cbi(_LCD_PORT, _LCD_E);
   14766:	a9 98       	cbi	0x15, 1	; 21
   14768:	fa 01       	movw	r30, r20
   1476a:	31 97       	sbiw	r30, 0x01	; 1
   1476c:	f1 f7       	brne	.-4      	; 0x1476a <lcd_command+0x18>
	_LCD_BUSY;

	_LCD_PORT = (__chr & 0x0F) << 4;
   1476e:	28 2f       	mov	r18, r24
   14770:	30 e0       	ldi	r19, 0x00	; 0
   14772:	94 e0       	ldi	r25, 0x04	; 4
   14774:	22 0f       	add	r18, r18
   14776:	33 1f       	adc	r19, r19
   14778:	9a 95       	dec	r25
   1477a:	e1 f7       	brne	.-8      	; 0x14774 <lcd_command+0x22>
   1477c:	25 bb       	out	0x15, r18	; 21
	cbi(_LCD_PORT, _LCD_RS);
   1477e:	ab 98       	cbi	0x15, 3	; 21
	sbi(_LCD_PORT, _LCD_E);
   14780:	a9 9a       	sbi	0x15, 1	; 21
   14782:	fa 01       	movw	r30, r20
   14784:	31 97       	sbiw	r30, 0x01	; 1
   14786:	f1 f7       	brne	.-4      	; 0x14784 <lcd_command+0x32>
	_LCD_BUSY;
	cbi(_LCD_PORT, _LCD_E);
   14788:	a9 98       	cbi	0x15, 1	; 21
   1478a:	fa 01       	movw	r30, r20
   1478c:	31 97       	sbiw	r30, 0x01	; 1
   1478e:	f1 f7       	brne	.-4      	; 0x1478c <lcd_command+0x3a>
	_LCD_BUSY;
	_LCD_BUSY;
	if (__chr==0x01) _delay_ms(50);
   14790:	fa 01       	movw	r30, r20
   14792:	31 97       	sbiw	r30, 0x01	; 1
   14794:	f1 f7       	brne	.-4      	; 0x14792 <lcd_command+0x40>
   14796:	81 30       	cpi	r24, 0x01	; 1
   14798:	21 f4       	brne	.+8      	; 0x147a2 <lcd_command+0x50>
   1479a:	84 ed       	ldi	r24, 0xD4	; 212
   1479c:	90 e3       	ldi	r25, 0x30	; 48
   1479e:	01 97       	sbiw	r24, 0x01	; 1
   147a0:	f1 f7       	brne	.-4      	; 0x1479e <lcd_command+0x4c>
   147a2:	08 95       	ret

000147a4 <lcd_init>:
   147a4:	86 ea       	ldi	r24, 0xA6	; 166
   147a6:	9e e0       	ldi	r25, 0x0E	; 14
   147a8:	01 97       	sbiw	r24, 0x01	; 1
   147aa:	f1 f7       	brne	.-4      	; 0x147a8 <lcd_init+0x4>

#define _LCD_BUSY	_delay_ms(4);

void lcd_init(void){
	_delay_ms(15);
	_LCD_PORT = 0x00;
   147ac:	15 ba       	out	0x15, r1	; 21
	_LCD_DDR |= (1 << _LCD_D7) | (1 << _LCD_D6) | (1 << _LCD_D5) | (1 << _LCD_D4);
   147ae:	84 b3       	in	r24, 0x14	; 20
   147b0:	80 6f       	ori	r24, 0xF0	; 240
   147b2:	84 bb       	out	0x14, r24	; 20
	_LCD_DDR |= (1 << _LCD_E) | (1 << _LCD_RW) | (1 << _LCD_RS);
   147b4:	84 b3       	in	r24, 0x14	; 20
   147b6:	8e 60       	ori	r24, 0x0E	; 14
   147b8:	84 bb       	out	0x14, r24	; 20

	_LCD_PORT = 0x30;
   147ba:	20 e3       	ldi	r18, 0x30	; 48
   147bc:	25 bb       	out	0x15, r18	; 21
	sbi(_LCD_PORT, _LCD_E);
   147be:	a9 9a       	sbi	0x15, 1	; 21
   147c0:	88 ee       	ldi	r24, 0xE8	; 232
   147c2:	93 e0       	ldi	r25, 0x03	; 3
   147c4:	fc 01       	movw	r30, r24
   147c6:	31 97       	sbiw	r30, 0x01	; 1
   147c8:	f1 f7       	brne	.-4      	; 0x147c6 <lcd_init+0x22>
	_LCD_BUSY;
	cbi(_LCD_PORT, _LCD_E);
   147ca:	a9 98       	cbi	0x15, 1	; 21
   147cc:	fc 01       	movw	r30, r24
   147ce:	31 97       	sbiw	r30, 0x01	; 1
   147d0:	f1 f7       	brne	.-4      	; 0x147ce <lcd_init+0x2a>
	_LCD_BUSY;

	_LCD_PORT = 0x30;
   147d2:	25 bb       	out	0x15, r18	; 21
	sbi(_LCD_PORT, _LCD_E);
   147d4:	a9 9a       	sbi	0x15, 1	; 21
   147d6:	fc 01       	movw	r30, r24
   147d8:	31 97       	sbiw	r30, 0x01	; 1
   147da:	f1 f7       	brne	.-4      	; 0x147d8 <lcd_init+0x34>
	_LCD_BUSY;
	cbi(_LCD_PORT, _LCD_E);
   147dc:	a9 98       	cbi	0x15, 1	; 21
   147de:	fc 01       	movw	r30, r24
   147e0:	31 97       	sbiw	r30, 0x01	; 1
   147e2:	f1 f7       	brne	.-4      	; 0x147e0 <lcd_init+0x3c>
	_LCD_BUSY;

	_LCD_PORT = 0x30;
   147e4:	25 bb       	out	0x15, r18	; 21
	sbi(_LCD_PORT, _LCD_E);
   147e6:	a9 9a       	sbi	0x15, 1	; 21
   147e8:	fc 01       	movw	r30, r24
   147ea:	31 97       	sbiw	r30, 0x01	; 1
   147ec:	f1 f7       	brne	.-4      	; 0x147ea <lcd_init+0x46>
	_LCD_BUSY;
	cbi(_LCD_PORT, _LCD_E);
   147ee:	a9 98       	cbi	0x15, 1	; 21
   147f0:	fc 01       	movw	r30, r24
   147f2:	31 97       	sbiw	r30, 0x01	; 1
   147f4:	f1 f7       	brne	.-4      	; 0x147f2 <lcd_init+0x4e>
	_LCD_BUSY;

	_LCD_PORT = 0x20;
   147f6:	20 e2       	ldi	r18, 0x20	; 32
   147f8:	25 bb       	out	0x15, r18	; 21
	sbi(_LCD_PORT, _LCD_E);
   147fa:	a9 9a       	sbi	0x15, 1	; 21
   147fc:	fc 01       	movw	r30, r24
   147fe:	31 97       	sbiw	r30, 0x01	; 1
   14800:	f1 f7       	brne	.-4      	; 0x147fe <lcd_init+0x5a>
	_LCD_BUSY;
	cbi(_LCD_PORT, _LCD_E);
   14802:	a9 98       	cbi	0x15, 1	; 21
   14804:	01 97       	sbiw	r24, 0x01	; 1
   14806:	f1 f7       	brne	.-4      	; 0x14804 <lcd_init+0x60>
	_LCD_BUSY;

	_LIGHT_PORT = 0x01;
   14808:	81 e0       	ldi	r24, 0x01	; 1
   1480a:	80 93 65 00 	sts	0x0065, r24
	_LIGHT_DDR |= (1 << _LIGHT_PIN);
   1480e:	e4 e6       	ldi	r30, 0x64	; 100
   14810:	f0 e0       	ldi	r31, 0x00	; 0
   14812:	80 81       	ld	r24, Z
   14814:	82 60       	ori	r24, 0x02	; 2
   14816:	80 83       	st	Z, r24

	lcd_command(0x28);
   14818:	88 e2       	ldi	r24, 0x28	; 40
   1481a:	0e 94 a9 a3 	call	0x14752	; 0x14752 <lcd_command>
	lcd_command(0x0c);
   1481e:	8c e0       	ldi	r24, 0x0C	; 12
   14820:	0e 94 a9 a3 	call	0x14752	; 0x14752 <lcd_command>
	lcd_command(0x06);
   14824:	86 e0       	ldi	r24, 0x06	; 6
   14826:	0e 94 a9 a3 	call	0x14752	; 0x14752 <lcd_command>
}
   1482a:	08 95       	ret

0001482c <_lcd>:
	if (__chr==0x01) _delay_ms(50);

}

void _lcd(unsigned char __chr){
	_LCD_PORT =((__chr & 0xF0));
   1482c:	28 2f       	mov	r18, r24
   1482e:	20 7f       	andi	r18, 0xF0	; 240
   14830:	25 bb       	out	0x15, r18	; 21
	sbi(_LCD_PORT, _LCD_RS);
   14832:	ab 9a       	sbi	0x15, 3	; 21
	sbi(_LCD_PORT, _LCD_E);
   14834:	a9 9a       	sbi	0x15, 1	; 21
	cbi(_LCD_PORT, _LCD_E);
   14836:	a9 98       	cbi	0x15, 1	; 21

	_LCD_PORT = (((__chr & 0x0F) << 4));
   14838:	90 e0       	ldi	r25, 0x00	; 0
   1483a:	24 e0       	ldi	r18, 0x04	; 4
   1483c:	88 0f       	add	r24, r24
   1483e:	99 1f       	adc	r25, r25
   14840:	2a 95       	dec	r18
   14842:	e1 f7       	brne	.-8      	; 0x1483c <_lcd+0x10>
   14844:	85 bb       	out	0x15, r24	; 21
	sbi(_LCD_PORT, _LCD_RS);
   14846:	ab 9a       	sbi	0x15, 3	; 21
	sbi(_LCD_PORT, _LCD_E);
   14848:	a9 9a       	sbi	0x15, 1	; 21
	cbi(_LCD_PORT, _LCD_E);
   1484a:	a9 98       	cbi	0x15, 1	; 21
   1484c:	88 ee       	ldi	r24, 0xE8	; 232
   1484e:	93 e0       	ldi	r25, 0x03	; 3
   14850:	01 97       	sbiw	r24, 0x01	; 1
   14852:	f1 f7       	brne	.-4      	; 0x14850 <_lcd+0x24>
	_LCD_BUSY;
	_delay_ms(1);
}
   14854:	8a ef       	ldi	r24, 0xFA	; 250
   14856:	90 e0       	ldi	r25, 0x00	; 0
   14858:	01 97       	sbiw	r24, 0x01	; 1
   1485a:	f1 f7       	brne	.-4      	; 0x14858 <_lcd+0x2c>
   1485c:	08 95       	ret

0001485e <lcd_string>:
     lcd_printf(2,1,PSTR("                    "));
     lcd_printf(3,1,PSTR("                    "));
     lcd_printf(4,1,PSTR("                    "));
}

void lcd_string(char *__string){
   1485e:	cf 93       	push	r28
   14860:	df 93       	push	r29
   14862:	ec 01       	movw	r28, r24
   14864:	03 c0       	rjmp	.+6      	; 0x1486c <lcd_string+0xe>
	while(*__string)
		_lcd(*__string++);
   14866:	21 96       	adiw	r28, 0x01	; 1
   14868:	0e 94 16 a4 	call	0x1482c	; 0x1482c <_lcd>
     lcd_printf(3,1,PSTR("                    "));
     lcd_printf(4,1,PSTR("                    "));
}

void lcd_string(char *__string){
	while(*__string)
   1486c:	88 81       	ld	r24, Y
   1486e:	88 23       	and	r24, r24
   14870:	d1 f7       	brne	.-12     	; 0x14866 <lcd_string+0x8>
		_lcd(*__string++);
}
   14872:	df 91       	pop	r29
   14874:	cf 91       	pop	r28
   14876:	08 95       	ret

00014878 <lcd_xy>:

void lcd_xy(unsigned char __x, unsigned char __y){
	switch(__x){
   14878:	82 30       	cpi	r24, 0x02	; 2
   1487a:	69 f0       	breq	.+26     	; 0x14896 <lcd_xy+0x1e>
   1487c:	83 30       	cpi	r24, 0x03	; 3
   1487e:	18 f4       	brcc	.+6      	; 0x14886 <lcd_xy+0xe>
   14880:	81 30       	cpi	r24, 0x01	; 1
   14882:	a9 f4       	brne	.+42     	; 0x148ae <lcd_xy+0x36>
   14884:	05 c0       	rjmp	.+10     	; 0x14890 <lcd_xy+0x18>
   14886:	83 30       	cpi	r24, 0x03	; 3
   14888:	49 f0       	breq	.+18     	; 0x1489c <lcd_xy+0x24>
   1488a:	84 30       	cpi	r24, 0x04	; 4
   1488c:	81 f4       	brne	.+32     	; 0x148ae <lcd_xy+0x36>
   1488e:	0b c0       	rjmp	.+22     	; 0x148a6 <lcd_xy+0x2e>
		case 1:
			lcd_command(0x80 + __y - 1);
   14890:	86 2f       	mov	r24, r22
   14892:	81 58       	subi	r24, 0x81	; 129
   14894:	05 c0       	rjmp	.+10     	; 0x148a0 <lcd_xy+0x28>
			break;
		case 2:
			lcd_command(0xC0 + __y - 1);
   14896:	86 2f       	mov	r24, r22
   14898:	81 54       	subi	r24, 0x41	; 65
   1489a:	02 c0       	rjmp	.+4      	; 0x148a0 <lcd_xy+0x28>
			break;
		case 3:
			lcd_command(0x94 + __y - 1);
   1489c:	86 2f       	mov	r24, r22
   1489e:	8d 56       	subi	r24, 0x6D	; 109
   148a0:	0e 94 a9 a3 	call	0x14752	; 0x14752 <lcd_command>
   148a4:	08 95       	ret
			break;
		case 4:
			lcd_command(0xD4 + __y - 1);
   148a6:	86 2f       	mov	r24, r22
   148a8:	8d 52       	subi	r24, 0x2D	; 45
   148aa:	0e 94 a9 a3 	call	0x14752	; 0x14752 <lcd_command>
   148ae:	08 95       	ret

000148b0 <lcd_print>:
	 for (i=0;i<strlen(string);i++){
          string[i]=0;
	 }     
}

void lcd_print(unsigned char __x, unsigned char __y, char *__string){
   148b0:	df 92       	push	r13
   148b2:	ef 92       	push	r14
   148b4:	ff 92       	push	r15
   148b6:	0f 93       	push	r16
   148b8:	1f 93       	push	r17
   148ba:	cf 93       	push	r28
   148bc:	df 93       	push	r29
   148be:	06 2f       	mov	r16, r22
   148c0:	d4 2e       	mov	r13, r20
   148c2:	15 2f       	mov	r17, r21
    char yPos,iPos=0;//Modified by Iyan string [20] maks
	lcd_xy(__x, __y);
   148c4:	0e 94 3c a4 	call	0x14878	; 0x14878 <lcd_xy>
   148c8:	2d 2d       	mov	r18, r13
   148ca:	31 2f       	mov	r19, r17
   148cc:	c9 01       	movw	r24, r18
   148ce:	ec 01       	movw	r28, r24
	iPos=0;
	while((*__string)&&(iPos<=(20-__y))){
   148d0:	34 e1       	ldi	r19, 0x14	; 20
   148d2:	e3 2e       	mov	r14, r19
   148d4:	f1 2c       	mov	r15, r1
   148d6:	e0 1a       	sub	r14, r16
   148d8:	f1 08       	sbc	r15, r1
   148da:	04 c0       	rjmp	.+8      	; 0x148e4 <lcd_print+0x34>
		_lcd(*__string);__string++;
   148dc:	82 2f       	mov	r24, r18
   148de:	0e 94 16 a4 	call	0x1482c	; 0x1482c <_lcd>
   148e2:	21 96       	adiw	r28, 0x01	; 1
   148e4:	9e 01       	movw	r18, r28
   148e6:	2d 19       	sub	r18, r13
   148e8:	82 2f       	mov	r24, r18

void lcd_print(unsigned char __x, unsigned char __y, char *__string){
    char yPos,iPos=0;//Modified by Iyan string [20] maks
	lcd_xy(__x, __y);
	iPos=0;
	while((*__string)&&(iPos<=(20-__y))){
   148ea:	28 81       	ld	r18, Y
   148ec:	22 23       	and	r18, r18
   148ee:	21 f0       	breq	.+8      	; 0x148f8 <lcd_print+0x48>
   148f0:	90 e0       	ldi	r25, 0x00	; 0
   148f2:	e8 16       	cp	r14, r24
   148f4:	f9 06       	cpc	r15, r25
   148f6:	94 f7       	brge	.-28     	; 0x148dc <lcd_print+0x2c>
		_lcd(*__string);__string++;
		iPos++;
		}    
}
   148f8:	df 91       	pop	r29
   148fa:	cf 91       	pop	r28
   148fc:	1f 91       	pop	r17
   148fe:	0f 91       	pop	r16
   14900:	ff 90       	pop	r15
   14902:	ef 90       	pop	r14
   14904:	df 90       	pop	r13
   14906:	08 95       	ret

00014908 <lcd_printf>:

void lcd_printf(unsigned char __x, unsigned char __y, char *__string){
   14908:	df 92       	push	r13
   1490a:	ef 92       	push	r14
   1490c:	ff 92       	push	r15
   1490e:	0f 93       	push	r16
   14910:	1f 93       	push	r17
   14912:	cf 93       	push	r28
   14914:	df 93       	push	r29
   14916:	06 2f       	mov	r16, r22
   14918:	d4 2e       	mov	r13, r20
   1491a:	15 2f       	mov	r17, r21
    char iPos=0;
	lcd_xy(__x, __y);
   1491c:	0e 94 3c a4 	call	0x14878	; 0x14878 <lcd_xy>
   14920:	8d 2d       	mov	r24, r13
   14922:	91 2f       	mov	r25, r17
   14924:	fc 01       	movw	r30, r24
   14926:	ef 01       	movw	r28, r30
	iPos=0;
	while((pgm_read_byte(&(*__string)))&&(iPos<=(20-__y))){
   14928:	44 e1       	ldi	r20, 0x14	; 20
   1492a:	e4 2e       	mov	r14, r20
   1492c:	f1 2c       	mov	r15, r1
   1492e:	e0 1a       	sub	r14, r16
   14930:	f1 08       	sbc	r15, r1
   14932:	04 c0       	rjmp	.+8      	; 0x1493c <lcd_printf+0x34>
		_lcd(pgm_read_byte(&(*__string)));
   14934:	82 2f       	mov	r24, r18
   14936:	0e 94 16 a4 	call	0x1482c	; 0x1482c <_lcd>
		__string++;
   1493a:	21 96       	adiw	r28, 0x01	; 1
   1493c:	9e 01       	movw	r18, r28
   1493e:	2d 19       	sub	r18, r13
   14940:	82 2f       	mov	r24, r18

void lcd_printf(unsigned char __x, unsigned char __y, char *__string){
    char iPos=0;
	lcd_xy(__x, __y);
	iPos=0;
	while((pgm_read_byte(&(*__string)))&&(iPos<=(20-__y))){
   14942:	fe 01       	movw	r30, r28
   14944:	24 91       	lpm	r18, Z+
   14946:	22 23       	and	r18, r18
   14948:	21 f0       	breq	.+8      	; 0x14952 <lcd_printf+0x4a>
   1494a:	90 e0       	ldi	r25, 0x00	; 0
   1494c:	e8 16       	cp	r14, r24
   1494e:	f9 06       	cpc	r15, r25
   14950:	8c f7       	brge	.-30     	; 0x14934 <lcd_printf+0x2c>
		_lcd(pgm_read_byte(&(*__string)));
		__string++;
		iPos++;
		}
}
   14952:	df 91       	pop	r29
   14954:	cf 91       	pop	r28
   14956:	1f 91       	pop	r17
   14958:	0f 91       	pop	r16
   1495a:	ff 90       	pop	r15
   1495c:	ef 90       	pop	r14
   1495e:	df 90       	pop	r13
   14960:	08 95       	ret

00014962 <lcd_clear>:
	_LCD_BUSY;
	_delay_ms(1);
}

void lcd_clear(){
     lcd_printf(1,1,PSTR("                    "));
   14962:	81 e0       	ldi	r24, 0x01	; 1
   14964:	61 e0       	ldi	r22, 0x01	; 1
   14966:	49 e5       	ldi	r20, 0x59	; 89
   14968:	55 e2       	ldi	r21, 0x25	; 37
   1496a:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
     lcd_printf(2,1,PSTR("                    "));
   1496e:	82 e0       	ldi	r24, 0x02	; 2
   14970:	61 e0       	ldi	r22, 0x01	; 1
   14972:	44 e4       	ldi	r20, 0x44	; 68
   14974:	55 e2       	ldi	r21, 0x25	; 37
   14976:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
     lcd_printf(3,1,PSTR("                    "));
   1497a:	83 e0       	ldi	r24, 0x03	; 3
   1497c:	61 e0       	ldi	r22, 0x01	; 1
   1497e:	4f e2       	ldi	r20, 0x2F	; 47
   14980:	55 e2       	ldi	r21, 0x25	; 37
   14982:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
     lcd_printf(4,1,PSTR("                    "));
   14986:	84 e0       	ldi	r24, 0x04	; 4
   14988:	61 e0       	ldi	r22, 0x01	; 1
   1498a:	4a e1       	ldi	r20, 0x1A	; 26
   1498c:	55 e2       	ldi	r21, 0x25	; 37
   1498e:	0e 94 84 a4 	call	0x14908	; 0x14908 <lcd_printf>
}
   14992:	08 95       	ret

00014994 <lcd_put>:
		__string++;
		iPos++;
		}
}

void lcd_put(unsigned char __x, unsigned char __y, unsigned char __chr){
   14994:	1f 93       	push	r17
   14996:	14 2f       	mov	r17, r20
	lcd_xy(__x, __y);
   14998:	0e 94 3c a4 	call	0x14878	; 0x14878 <lcd_xy>
	_lcd(__chr);
   1499c:	81 2f       	mov	r24, r17
   1499e:	0e 94 16 a4 	call	0x1482c	; 0x1482c <_lcd>
}
   149a2:	1f 91       	pop	r17
   149a4:	08 95       	ret

000149a6 <lcd_cgram>:

void lcd_cgram(unsigned char location, char *ptr){
   149a6:	0f 93       	push	r16
   149a8:	1f 93       	push	r17
   149aa:	cf 93       	push	r28
   149ac:	df 93       	push	r29
   149ae:	8b 01       	movw	r16, r22
	unsigned char i;
    if(location < 8){
   149b0:	88 30       	cpi	r24, 0x08	; 8
   149b2:	90 f4       	brcc	.+36     	; 0x149d8 <lcd_cgram+0x32>
		lcd_command(0x40 + (location * 8));
   149b4:	88 0f       	add	r24, r24
   149b6:	88 0f       	add	r24, r24
   149b8:	88 0f       	add	r24, r24
   149ba:	80 5c       	subi	r24, 0xC0	; 192
   149bc:	0e 94 a9 a3 	call	0x14752	; 0x14752 <lcd_command>
   149c0:	c0 e0       	ldi	r28, 0x00	; 0
   149c2:	d0 e0       	ldi	r29, 0x00	; 0
		for(i = 0; i < 8; i++)
			_lcd(ptr[i]);
   149c4:	f8 01       	movw	r30, r16
   149c6:	ec 0f       	add	r30, r28
   149c8:	fd 1f       	adc	r31, r29
   149ca:	80 81       	ld	r24, Z
   149cc:	0e 94 16 a4 	call	0x1482c	; 0x1482c <_lcd>
   149d0:	21 96       	adiw	r28, 0x01	; 1

void lcd_cgram(unsigned char location, char *ptr){
	unsigned char i;
    if(location < 8){
		lcd_command(0x40 + (location * 8));
		for(i = 0; i < 8; i++)
   149d2:	c8 30       	cpi	r28, 0x08	; 8
   149d4:	d1 05       	cpc	r29, r1
   149d6:	b1 f7       	brne	.-20     	; 0x149c4 <lcd_cgram+0x1e>
			_lcd(ptr[i]);
	}
}
   149d8:	df 91       	pop	r29
   149da:	cf 91       	pop	r28
   149dc:	1f 91       	pop	r17
   149de:	0f 91       	pop	r16
   149e0:	08 95       	ret

000149e2 <ClearMem>:
			lcd_command(0xD4 + __y - 1);
			break;
	}
}

void ClearMem(char *string){
   149e2:	cf 93       	push	r28
   149e4:	df 93       	push	r29
   149e6:	20 e0       	ldi	r18, 0x00	; 0
   149e8:	04 c0       	rjmp	.+8      	; 0x149f2 <ClearMem+0x10>
     char i;
	 for (i=0;i<strlen(string);i++){
          string[i]=0;
   149ea:	c8 0f       	add	r28, r24
   149ec:	d9 1f       	adc	r29, r25
   149ee:	18 82       	st	Y, r1
	}
}

void ClearMem(char *string){
     char i;
	 for (i=0;i<strlen(string);i++){
   149f0:	2f 5f       	subi	r18, 0xFF	; 255
   149f2:	c2 2f       	mov	r28, r18
   149f4:	d0 e0       	ldi	r29, 0x00	; 0
   149f6:	fc 01       	movw	r30, r24
   149f8:	01 90       	ld	r0, Z+
   149fa:	00 20       	and	r0, r0
   149fc:	e9 f7       	brne	.-6      	; 0x149f8 <ClearMem+0x16>
   149fe:	31 97       	sbiw	r30, 0x01	; 1
   14a00:	e8 1b       	sub	r30, r24
   14a02:	f9 0b       	sbc	r31, r25
   14a04:	ce 17       	cp	r28, r30
   14a06:	df 07       	cpc	r29, r31
   14a08:	80 f3       	brcs	.-32     	; 0x149ea <ClearMem+0x8>
          string[i]=0;
	 }     
}
   14a0a:	df 91       	pop	r29
   14a0c:	cf 91       	pop	r28
   14a0e:	08 95       	ret

00014a10 <_key_hit>:
													 {'7', 'P', 'Q', 'R', 'S', '\0'},
											         {'8', 'T', 'U', 'V', '\0'}, 
													 {'9', 'W', 'X', 'Y', 'Z', '\0'}}};
const unsigned char __maxchar[10] PROGMEM = {2, 4, 3, 3, 3, 3, 3, 4, 3, 4};

char _key_hit(void){
   14a10:	df 93       	push	r29
   14a12:	cf 93       	push	r28
   14a14:	00 d0       	rcall	.+0      	; 0x14a16 <_key_hit+0x6>
   14a16:	00 d0       	rcall	.+0      	; 0x14a18 <_key_hit+0x8>
   14a18:	cd b7       	in	r28, 0x3d	; 61
   14a1a:	de b7       	in	r29, 0x3e	; 62
	unsigned char	i, keyhit=0x00;
	unsigned char	outmap[4] = {0xef, 0xdf, 0xbf, 0x7f};
   14a1c:	8f ee       	ldi	r24, 0xEF	; 239
   14a1e:	89 83       	std	Y+1, r24	; 0x01
   14a20:	8f ed       	ldi	r24, 0xDF	; 223
   14a22:	8a 83       	std	Y+2, r24	; 0x02
   14a24:	8f eb       	ldi	r24, 0xBF	; 191
   14a26:	8b 83       	std	Y+3, r24	; 0x03
   14a28:	8f e7       	ldi	r24, 0x7F	; 127
   14a2a:	8c 83       	std	Y+4, r24	; 0x04
   14a2c:	de 01       	movw	r26, r28
   14a2e:	11 96       	adiw	r26, 0x01	; 1
   14a30:	2a ef       	ldi	r18, 0xFA	; 250
   14a32:	30 e0       	ldi	r19, 0x00	; 0

	for(i=0; i<4; i++){
   14a34:	ae 01       	movw	r20, r28
   14a36:	4b 5f       	subi	r20, 0xFB	; 251
   14a38:	5f 4f       	sbci	r21, 0xFF	; 255
   14a3a:	c9 01       	movw	r24, r18
   14a3c:	01 97       	sbiw	r24, 0x01	; 1
   14a3e:	f1 f7       	brne	.-4      	; 0x14a3c <_key_hit+0x2c>
		_delay_ms(1);
		_KEY_PORT = outmap[i];
   14a40:	8c 91       	ld	r24, X
   14a42:	80 93 62 00 	sts	0x0062, r24
   14a46:	f9 01       	movw	r30, r18
   14a48:	31 97       	sbiw	r30, 0x01	; 1
   14a4a:	f1 f7       	brne	.-4      	; 0x14a48 <_key_hit+0x38>
		_delay_ms(1);
		keyhit = _KEY_MATRIX;
   14a4c:	90 b1       	in	r25, 0x00	; 0
		if (keyhit!=outmap[i]) 
   14a4e:	98 17       	cp	r25, r24
   14a50:	21 f4       	brne	.+8      	; 0x14a5a <_key_hit+0x4a>
		    break;
   14a52:	11 96       	adiw	r26, 0x01	; 1

char _key_hit(void){
	unsigned char	i, keyhit=0x00;
	unsigned char	outmap[4] = {0xef, 0xdf, 0xbf, 0x7f};

	for(i=0; i<4; i++){
   14a54:	a4 17       	cp	r26, r20
   14a56:	b5 07       	cpc	r27, r21
   14a58:	81 f7       	brne	.-32     	; 0x14a3a <_key_hit+0x2a>
		keyhit = _KEY_MATRIX;
		if (keyhit!=outmap[i]) 
		    break;
	}
	return keyhit;
}
   14a5a:	89 2f       	mov	r24, r25
   14a5c:	0f 90       	pop	r0
   14a5e:	0f 90       	pop	r0
   14a60:	0f 90       	pop	r0
   14a62:	0f 90       	pop	r0
   14a64:	cf 91       	pop	r28
   14a66:	df 91       	pop	r29
   14a68:	08 95       	ret

00014a6a <_key_crr>:

char _key_crr(char __key){
	if(	__key != _KEY_1 && __key != _KEY_2 &&
   14a6a:	8e 3e       	cpi	r24, 0xEE	; 238
   14a6c:	f9 f0       	breq	.+62     	; 0x14aac <_key_crr+0x42>
   14a6e:	8e 3d       	cpi	r24, 0xDE	; 222
   14a70:	e9 f0       	breq	.+58     	; 0x14aac <_key_crr+0x42>
   14a72:	8e 3b       	cpi	r24, 0xBE	; 190
   14a74:	d9 f0       	breq	.+54     	; 0x14aac <_key_crr+0x42>
   14a76:	8d 3e       	cpi	r24, 0xED	; 237
   14a78:	c9 f0       	breq	.+50     	; 0x14aac <_key_crr+0x42>
   14a7a:	8d 3d       	cpi	r24, 0xDD	; 221
   14a7c:	b9 f0       	breq	.+46     	; 0x14aac <_key_crr+0x42>
   14a7e:	8d 3b       	cpi	r24, 0xBD	; 189
   14a80:	a9 f0       	breq	.+42     	; 0x14aac <_key_crr+0x42>
   14a82:	8b 3e       	cpi	r24, 0xEB	; 235
   14a84:	99 f0       	breq	.+38     	; 0x14aac <_key_crr+0x42>
   14a86:	8b 3d       	cpi	r24, 0xDB	; 219
   14a88:	89 f0       	breq	.+34     	; 0x14aac <_key_crr+0x42>
   14a8a:	8b 3b       	cpi	r24, 0xBB	; 187
   14a8c:	79 f0       	breq	.+30     	; 0x14aac <_key_crr+0x42>
   14a8e:	87 3d       	cpi	r24, 0xD7	; 215
   14a90:	69 f0       	breq	.+26     	; 0x14aac <_key_crr+0x42>
   14a92:	87 3e       	cpi	r24, 0xE7	; 231
   14a94:	59 f0       	breq	.+22     	; 0x14aac <_key_crr+0x42>
   14a96:	87 3b       	cpi	r24, 0xB7	; 183
   14a98:	49 f0       	breq	.+18     	; 0x14aac <_key_crr+0x42>
   14a9a:	8e 37       	cpi	r24, 0x7E	; 126
   14a9c:	39 f0       	breq	.+14     	; 0x14aac <_key_crr+0x42>
   14a9e:	8d 37       	cpi	r24, 0x7D	; 125
   14aa0:	29 f0       	breq	.+10     	; 0x14aac <_key_crr+0x42>
   14aa2:	8b 37       	cpi	r24, 0x7B	; 123
   14aa4:	19 f0       	breq	.+6      	; 0x14aac <_key_crr+0x42>
   14aa6:	87 37       	cpi	r24, 0x77	; 119
   14aa8:	09 f0       	breq	.+2      	; 0x14aac <_key_crr+0x42>
   14aaa:	80 e0       	ldi	r24, 0x00	; 0
		__key != _KEY_CANCEL && __key != _KEY_ENTER &&
		__key != _KEY_TIKET && __key != _KEY_MENU &&
		__key != _KEY_SHIFT && __key != _KEY_CLEAR)
		return _KEY_NULL;
	return __key;
}
   14aac:	08 95       	ret

00014aae <_key_btn>:

char _key_btn(char __key){
	char __keychar = 0;
	
	switch (__key){
   14aae:	8e 3b       	cpi	r24, 0xBE	; 190
   14ab0:	91 f1       	breq	.+100    	; 0x14b16 <_key_btn+0x68>
   14ab2:	8f 3b       	cpi	r24, 0xBF	; 191
   14ab4:	a8 f4       	brcc	.+42     	; 0x14ae0 <_key_btn+0x32>
   14ab6:	8e 37       	cpi	r24, 0x7E	; 126
   14ab8:	09 f4       	brne	.+2      	; 0x14abc <_key_btn+0xe>
   14aba:	41 c0       	rjmp	.+130    	; 0x14b3e <_key_btn+0x90>
   14abc:	8f 37       	cpi	r24, 0x7F	; 127
   14abe:	48 f4       	brcc	.+18     	; 0x14ad2 <_key_btn+0x24>
   14ac0:	8b 37       	cpi	r24, 0x7B	; 123
   14ac2:	09 f4       	brne	.+2      	; 0x14ac6 <_key_btn+0x18>
   14ac4:	40 c0       	rjmp	.+128    	; 0x14b46 <_key_btn+0x98>
   14ac6:	8d 37       	cpi	r24, 0x7D	; 125
   14ac8:	e1 f1       	breq	.+120    	; 0x14b42 <_key_btn+0x94>
   14aca:	87 37       	cpi	r24, 0x77	; 119
   14acc:	09 f0       	breq	.+2      	; 0x14ad0 <_key_btn+0x22>
   14ace:	3f c0       	rjmp	.+126    	; 0x14b4e <_key_btn+0xa0>
   14ad0:	3c c0       	rjmp	.+120    	; 0x14b4a <_key_btn+0x9c>
   14ad2:	8b 3b       	cpi	r24, 0xBB	; 187
   14ad4:	61 f1       	breq	.+88     	; 0x14b2e <_key_btn+0x80>
   14ad6:	8d 3b       	cpi	r24, 0xBD	; 189
   14ad8:	21 f1       	breq	.+72     	; 0x14b22 <_key_btn+0x74>
   14ada:	87 3b       	cpi	r24, 0xB7	; 183
   14adc:	c1 f5       	brne	.+112    	; 0x14b4e <_key_btn+0xa0>
   14ade:	2d c0       	rjmp	.+90     	; 0x14b3a <_key_btn+0x8c>
   14ae0:	8e 3d       	cpi	r24, 0xDE	; 222
   14ae2:	a9 f0       	breq	.+42     	; 0x14b0e <_key_btn+0x60>
   14ae4:	8f 3d       	cpi	r24, 0xDF	; 223
   14ae6:	38 f4       	brcc	.+14     	; 0x14af6 <_key_btn+0x48>
   14ae8:	8b 3d       	cpi	r24, 0xDB	; 219
   14aea:	f9 f0       	breq	.+62     	; 0x14b2a <_key_btn+0x7c>
   14aec:	8d 3d       	cpi	r24, 0xDD	; 221
   14aee:	b9 f0       	breq	.+46     	; 0x14b1e <_key_btn+0x70>
   14af0:	87 3d       	cpi	r24, 0xD7	; 215
   14af2:	69 f5       	brne	.+90     	; 0x14b4e <_key_btn+0xa0>
   14af4:	1e c0       	rjmp	.+60     	; 0x14b32 <_key_btn+0x84>
   14af6:	8b 3e       	cpi	r24, 0xEB	; 235
   14af8:	b1 f0       	breq	.+44     	; 0x14b26 <_key_btn+0x78>
   14afa:	8c 3e       	cpi	r24, 0xEC	; 236
   14afc:	18 f4       	brcc	.+6      	; 0x14b04 <_key_btn+0x56>
   14afe:	87 3e       	cpi	r24, 0xE7	; 231
   14b00:	31 f5       	brne	.+76     	; 0x14b4e <_key_btn+0xa0>
   14b02:	19 c0       	rjmp	.+50     	; 0x14b36 <_key_btn+0x88>
   14b04:	8d 3e       	cpi	r24, 0xED	; 237
   14b06:	49 f0       	breq	.+18     	; 0x14b1a <_key_btn+0x6c>
   14b08:	8e 3e       	cpi	r24, 0xEE	; 238
   14b0a:	09 f5       	brne	.+66     	; 0x14b4e <_key_btn+0xa0>
   14b0c:	02 c0       	rjmp	.+4      	; 0x14b12 <_key_btn+0x64>
   14b0e:	82 e3       	ldi	r24, 0x32	; 50
   14b10:	08 95       	ret
   14b12:	81 e3       	ldi	r24, 0x31	; 49
   14b14:	08 95       	ret
   14b16:	83 e3       	ldi	r24, 0x33	; 51
   14b18:	08 95       	ret
		case 0xDE:
			__keychar = 0x32; //2
			break;
		case 0xBE:
			__keychar = 0x33; //3
			break;
   14b1a:	84 e3       	ldi	r24, 0x34	; 52
   14b1c:	08 95       	ret
		case 0xED:
			__keychar = 0x34; //4
			break;
   14b1e:	85 e3       	ldi	r24, 0x35	; 53
   14b20:	08 95       	ret
		case 0xDD:
			__keychar = 0x35; //5
			break;
   14b22:	86 e3       	ldi	r24, 0x36	; 54
   14b24:	08 95       	ret
		case 0xBD:
			__keychar = 0x36; //6
			break;
   14b26:	87 e3       	ldi	r24, 0x37	; 55
   14b28:	08 95       	ret
		case 0xEB:
			__keychar = 0x37; //7
			break;
   14b2a:	88 e3       	ldi	r24, 0x38	; 56
   14b2c:	08 95       	ret
		case 0xDB:
			__keychar = 0x38; //8
			break;
   14b2e:	89 e3       	ldi	r24, 0x39	; 57
   14b30:	08 95       	ret
		case 0xBB:
			__keychar = 0x39; //9
			break;
   14b32:	80 e3       	ldi	r24, 0x30	; 48
   14b34:	08 95       	ret
		case 0xD7:
			__keychar = 0x30; //0
			break;
   14b36:	8a e2       	ldi	r24, 0x2A	; 42
   14b38:	08 95       	ret
		case 0xE7:
			__keychar = 0x2a; //*
			break;
   14b3a:	83 e2       	ldi	r24, 0x23	; 35
   14b3c:	08 95       	ret
		case 0xB7:
			__keychar = 0x23; //#
			break;
   14b3e:	81 ef       	ldi	r24, 0xF1	; 241
   14b40:	08 95       	ret
		case 0x7E:
			__keychar = 0xF1; //Menu 1
			break;
   14b42:	82 ef       	ldi	r24, 0xF2	; 242
   14b44:	08 95       	ret
		case 0x7D:
			__keychar = 0xF2; //Menu 2
			break;
   14b46:	83 ef       	ldi	r24, 0xF3	; 243
   14b48:	08 95       	ret
		case 0x7B:
			__keychar = 0xF3; //Menu 3
			break;
   14b4a:	84 ef       	ldi	r24, 0xF4	; 244
   14b4c:	08 95       	ret
		case 0x77:
			__keychar = 0xF4; //Menu 4
			break;
   14b4e:	80 e0       	ldi	r24, 0x00	; 0
			__keychar = 0x00;
			break;

	}
	return __keychar;
}
   14b50:	08 95       	ret

00014b52 <_table_alphanum>:
	}
	_PAD_1st;
	return __key;
}

char _table_alphanum(char __caps, char __key, char __hit){
   14b52:	98 2f       	mov	r25, r24
unsigned char __retchar = 0;

	switch(__key){
   14b54:	6d 3d       	cpi	r22, 0xDD	; 221
   14b56:	11 f1       	breq	.+68     	; 0x14b9c <_table_alphanum+0x4a>
   14b58:	6e 3d       	cpi	r22, 0xDE	; 222
   14b5a:	60 f4       	brcc	.+24     	; 0x14b74 <_table_alphanum+0x22>
   14b5c:	6d 3b       	cpi	r22, 0xBD	; 189
   14b5e:	01 f1       	breq	.+64     	; 0x14ba0 <_table_alphanum+0x4e>
   14b60:	6e 3b       	cpi	r22, 0xBE	; 190
   14b62:	18 f4       	brcc	.+6      	; 0x14b6a <_table_alphanum+0x18>
   14b64:	6b 3b       	cpi	r22, 0xBB	; 187
   14b66:	21 f5       	brne	.+72     	; 0x14bb0 <_table_alphanum+0x5e>
   14b68:	21 c0       	rjmp	.+66     	; 0x14bac <_table_alphanum+0x5a>
   14b6a:	6e 3b       	cpi	r22, 0xBE	; 190
   14b6c:	99 f0       	breq	.+38     	; 0x14b94 <_table_alphanum+0x42>
   14b6e:	6b 3d       	cpi	r22, 0xDB	; 219
   14b70:	f9 f4       	brne	.+62     	; 0x14bb0 <_table_alphanum+0x5e>
   14b72:	1a c0       	rjmp	.+52     	; 0x14ba8 <_table_alphanum+0x56>
   14b74:	6b 3e       	cpi	r22, 0xEB	; 235
   14b76:	b1 f0       	breq	.+44     	; 0x14ba4 <_table_alphanum+0x52>
   14b78:	6c 3e       	cpi	r22, 0xEC	; 236
   14b7a:	18 f4       	brcc	.+6      	; 0x14b82 <_table_alphanum+0x30>
   14b7c:	6e 3d       	cpi	r22, 0xDE	; 222
   14b7e:	c1 f4       	brne	.+48     	; 0x14bb0 <_table_alphanum+0x5e>
   14b80:	05 c0       	rjmp	.+10     	; 0x14b8c <_table_alphanum+0x3a>
   14b82:	6d 3e       	cpi	r22, 0xED	; 237
   14b84:	49 f0       	breq	.+18     	; 0x14b98 <_table_alphanum+0x46>
   14b86:	6e 3e       	cpi	r22, 0xEE	; 238
   14b88:	99 f4       	brne	.+38     	; 0x14bb0 <_table_alphanum+0x5e>
   14b8a:	02 c0       	rjmp	.+4      	; 0x14b90 <_table_alphanum+0x3e>
   14b8c:	82 e0       	ldi	r24, 0x02	; 2
   14b8e:	11 c0       	rjmp	.+34     	; 0x14bb2 <_table_alphanum+0x60>
   14b90:	81 e0       	ldi	r24, 0x01	; 1
   14b92:	0f c0       	rjmp	.+30     	; 0x14bb2 <_table_alphanum+0x60>
   14b94:	83 e0       	ldi	r24, 0x03	; 3
   14b96:	0d c0       	rjmp	.+26     	; 0x14bb2 <_table_alphanum+0x60>
		case 0xDE:
			__key = 2; //2
			break;
		case 0xBE:
			__key = 3; //3
			break;
   14b98:	84 e0       	ldi	r24, 0x04	; 4
   14b9a:	0b c0       	rjmp	.+22     	; 0x14bb2 <_table_alphanum+0x60>
		case 0xED:
			__key = 4; //4
			break;
   14b9c:	85 e0       	ldi	r24, 0x05	; 5
   14b9e:	09 c0       	rjmp	.+18     	; 0x14bb2 <_table_alphanum+0x60>
		case 0xDD:
			__key = 5; //5
			break;
   14ba0:	86 e0       	ldi	r24, 0x06	; 6
   14ba2:	07 c0       	rjmp	.+14     	; 0x14bb2 <_table_alphanum+0x60>
		case 0xBD:
			__key = 6; //6
			break;
   14ba4:	87 e0       	ldi	r24, 0x07	; 7
   14ba6:	05 c0       	rjmp	.+10     	; 0x14bb2 <_table_alphanum+0x60>
		case 0xEB:
			__key = 7; //7
			break;
   14ba8:	88 e0       	ldi	r24, 0x08	; 8
   14baa:	03 c0       	rjmp	.+6      	; 0x14bb2 <_table_alphanum+0x60>
		case 0xDB:
			__key = 8; //8
			break;
   14bac:	89 e0       	ldi	r24, 0x09	; 9
   14bae:	01 c0       	rjmp	.+2      	; 0x14bb2 <_table_alphanum+0x60>
		case 0xBB:
			__key = 9; //9
			break;
   14bb0:	80 e0       	ldi	r24, 0x00	; 0
		default:
			__key = 0;
			break;	
	}

	if(__hit <= pgm_read_byte(&__maxchar[__key]))
   14bb2:	28 2f       	mov	r18, r24
   14bb4:	30 e0       	ldi	r19, 0x00	; 0
   14bb6:	f9 01       	movw	r30, r18
   14bb8:	ea 51       	subi	r30, 0x1A	; 26
   14bba:	fa 4d       	sbci	r31, 0xDA	; 218
   14bbc:	e4 91       	lpm	r30, Z+
   14bbe:	e4 17       	cp	r30, r20
   14bc0:	10 f4       	brcc	.+4      	; 0x14bc6 <_table_alphanum+0x74>
   14bc2:	80 e0       	ldi	r24, 0x00	; 0
   14bc4:	08 95       	ret
		__retchar = pgm_read_byte(&__alphanum[__caps][__key][__hit]);
   14bc6:	ec e3       	ldi	r30, 0x3C	; 60
   14bc8:	9e 9f       	mul	r25, r30
   14bca:	f0 01       	movw	r30, r0
   14bcc:	11 24       	eor	r1, r1
   14bce:	e4 0f       	add	r30, r20
   14bd0:	f1 1d       	adc	r31, r1
   14bd2:	c9 01       	movw	r24, r18
   14bd4:	88 0f       	add	r24, r24
   14bd6:	99 1f       	adc	r25, r25
   14bd8:	82 0f       	add	r24, r18
   14bda:	93 1f       	adc	r25, r19
   14bdc:	88 0f       	add	r24, r24
   14bde:	99 1f       	adc	r25, r25
   14be0:	e8 0f       	add	r30, r24
   14be2:	f9 1f       	adc	r31, r25
   14be4:	e2 59       	subi	r30, 0x92	; 146
   14be6:	fa 4d       	sbci	r31, 0xDA	; 218
   14be8:	84 91       	lpm	r24, Z+
	else __retchar = '\0';

	return __retchar;
}
   14bea:	08 95       	ret

00014bec <_key_scan>:





char _key_scan(char __select){
   14bec:	1f 93       	push	r17
   14bee:	18 2f       	mov	r17, r24
	char	__key = 0;

	if(__select==_PAD_SINGLE || __select==_PAD_MULTI){
   14bf0:	81 50       	subi	r24, 0x01	; 1
   14bf2:	82 30       	cpi	r24, 0x02	; 2
   14bf4:	08 f0       	brcs	.+2      	; 0x14bf8 <_key_scan+0xc>
   14bf6:	64 c0       	rjmp	.+200    	; 0x14cc0 <_key_scan+0xd4>
		__key = _key_hit();
   14bf8:	0e 94 08 a5 	call	0x14a10	; 0x14a10 <_key_hit>
		__key = _key_crr(__key);
   14bfc:	0e 94 35 a5 	call	0x14a6a	; 0x14a6a <_key_crr>
   14c00:	28 2f       	mov	r18, r24

		if(__key!=_KEY_NULL){
   14c02:	88 23       	and	r24, r24
   14c04:	09 f4       	brne	.+2      	; 0x14c08 <_key_scan+0x1c>
   14c06:	5d c0       	rjmp	.+186    	; 0x14cc2 <_key_scan+0xd6>
			_LIGHT_SET;
   14c08:	91 e0       	ldi	r25, 0x01	; 1
   14c0a:	90 93 ae 02 	sts	0x02AE, r25
   14c0e:	10 92 af 02 	sts	0x02AF, r1
   14c12:	80 91 65 00 	lds	r24, 0x0065
   14c16:	8d 7f       	andi	r24, 0xFD	; 253
   14c18:	80 93 65 00 	sts	0x0065, r24
			if(__sec_par)
   14c1c:	80 91 b9 02 	lds	r24, 0x02B9
   14c20:	88 23       	and	r24, r24
   14c22:	31 f0       	breq	.+12     	; 0x14c30 <_key_scan+0x44>
				_SEC_ON;
   14c24:	90 93 b4 02 	sts	0x02B4, r25
   14c28:	10 92 b6 02 	sts	0x02B6, r1
   14c2c:	10 92 b5 02 	sts	0x02B5, r1

			if(_IS1st){
   14c30:	80 91 b0 02 	lds	r24, 0x02B0
   14c34:	88 23       	and	r24, r24
   14c36:	71 f4       	brne	.+28     	; 0x14c54 <_key_scan+0x68>
				if(	__key == _KEY_CANCEL || __key == _KEY_ENTER)
   14c38:	27 3e       	cpi	r18, 0xE7	; 231
   14c3a:	11 f0       	breq	.+4      	; 0x14c40 <_key_scan+0x54>
   14c3c:	27 3b       	cpi	r18, 0xB7	; 183
   14c3e:	31 f4       	brne	.+12     	; 0x14c4c <_key_scan+0x60>
					if(__lock_num)
   14c40:	80 91 ad 02 	lds	r24, 0x02AD
   14c44:	88 23       	and	r24, r24
   14c46:	11 f0       	breq	.+4      	; 0x14c4c <_key_scan+0x60>
						__lock_num = 0;
   14c48:	10 92 ad 02 	sts	0x02AD, r1
				_PAD_2nd;
   14c4c:	81 e0       	ldi	r24, 0x01	; 1
   14c4e:	80 93 b0 02 	sts	0x02B0, r24
   14c52:	31 c0       	rjmp	.+98     	; 0x14cb6 <_key_scan+0xca>
				_delay_ms(5);
				return __key;
			}
			if(_IS2nd){
   14c54:	81 30       	cpi	r24, 0x01	; 1
   14c56:	a9 f5       	brne	.+106    	; 0x14cc2 <_key_scan+0xd6>
				if(__select==_PAD_MULTI){
   14c58:	12 30       	cpi	r17, 0x02	; 2
   14c5a:	21 f5       	brne	.+72     	; 0x14ca4 <_key_scan+0xb8>
					if(	__key==_KEY_0 || __key==_KEY_1 || __key==_KEY_2 || __key==_KEY_3||
   14c5c:	27 3d       	cpi	r18, 0xD7	; 215
   14c5e:	91 f0       	breq	.+36     	; 0x14c84 <_key_scan+0x98>
   14c60:	2e 3e       	cpi	r18, 0xEE	; 238
   14c62:	81 f0       	breq	.+32     	; 0x14c84 <_key_scan+0x98>
   14c64:	2e 3d       	cpi	r18, 0xDE	; 222
   14c66:	71 f0       	breq	.+28     	; 0x14c84 <_key_scan+0x98>
   14c68:	2e 3b       	cpi	r18, 0xBE	; 190
   14c6a:	61 f0       	breq	.+24     	; 0x14c84 <_key_scan+0x98>
   14c6c:	2d 3e       	cpi	r18, 0xED	; 237
   14c6e:	51 f0       	breq	.+20     	; 0x14c84 <_key_scan+0x98>
   14c70:	2d 3d       	cpi	r18, 0xDD	; 221
   14c72:	41 f0       	breq	.+16     	; 0x14c84 <_key_scan+0x98>
   14c74:	2d 3b       	cpi	r18, 0xBD	; 189
   14c76:	31 f0       	breq	.+12     	; 0x14c84 <_key_scan+0x98>
   14c78:	2b 3e       	cpi	r18, 0xEB	; 235
   14c7a:	21 f0       	breq	.+8      	; 0x14c84 <_key_scan+0x98>
   14c7c:	2b 3d       	cpi	r18, 0xDB	; 219
   14c7e:	11 f0       	breq	.+4      	; 0x14c84 <_key_scan+0x98>
   14c80:	2b 3b       	cpi	r18, 0xBB	; 187
   14c82:	81 f4       	brne	.+32     	; 0x14ca4 <_key_scan+0xb8>
						__key==_KEY_4 || __key==_KEY_5 || __key==_KEY_6 ||
						__key==_KEY_7 || __key==_KEY_8 || __key==_KEY_9){
						if(__lock_num){
   14c84:	80 91 ad 02 	lds	r24, 0x02AD
   14c88:	88 23       	and	r24, r24
   14c8a:	49 f0       	breq	.+18     	; 0x14c9e <_key_scan+0xb2>
							_SHIFT_SET;
   14c8c:	81 e0       	ldi	r24, 0x01	; 1
   14c8e:	80 93 b1 02 	sts	0x02B1, r24
   14c92:	10 92 b2 02 	sts	0x02B2, r1
							CURSOR_HIDE;
   14c96:	8c e0       	ldi	r24, 0x0C	; 12
   14c98:	0e 94 a9 a3 	call	0x14752	; 0x14752 <lcd_command>
   14c9c:	03 c0       	rjmp	.+6      	; 0x14ca4 <_key_scan+0xb8>
						}
						else
							__lock_num = 1;
   14c9e:	81 e0       	ldi	r24, 0x01	; 1
   14ca0:	80 93 ad 02 	sts	0x02AD, r24
					}
				}
				do{
					__key = _key_hit();
   14ca4:	0e 94 08 a5 	call	0x14a10	; 0x14a10 <_key_hit>
					__key = _key_crr(__key);
   14ca8:	0e 94 35 a5 	call	0x14a6a	; 0x14a6a <_key_crr>
   14cac:	28 2f       	mov	r18, r24
				}while(__key!=_KEY_NULL);
   14cae:	88 23       	and	r24, r24
   14cb0:	c9 f7       	brne	.-14     	; 0x14ca4 <_key_scan+0xb8>
				_PAD_1st;
   14cb2:	10 92 b0 02 	sts	0x02B0, r1
   14cb6:	82 ee       	ldi	r24, 0xE2	; 226
   14cb8:	94 e0       	ldi	r25, 0x04	; 4
   14cba:	01 97       	sbiw	r24, 0x01	; 1
   14cbc:	f1 f7       	brne	.-4      	; 0x14cba <_key_scan+0xce>
   14cbe:	03 c0       	rjmp	.+6      	; 0x14cc6 <_key_scan+0xda>
				_delay_ms(5);
				return _KEY_NULL;
   14cc0:	20 e0       	ldi	r18, 0x00	; 0
			}
		}
	}
	_PAD_1st;
   14cc2:	10 92 b0 02 	sts	0x02B0, r1
	return __key;
}
   14cc6:	82 2f       	mov	r24, r18
   14cc8:	1f 91       	pop	r17
   14cca:	08 95       	ret

00014ccc <_spi_init>:
#include <util/delay.h>
#include <compat/deprecated.h>

#include "SPI.h"
void _spi_init(unsigned char __mode, unsigned char __interrupt){
	if(__mode){
   14ccc:	88 23       	and	r24, r24
   14cce:	41 f0       	breq	.+16     	; 0x14ce0 <_spi_init+0x14>
		_SPI_DDR = (1 << _SPI_MOSI) | (1 << _SPI_SCK);
   14cd0:	86 e0       	ldi	r24, 0x06	; 6
   14cd2:	87 bb       	out	0x17, r24	; 23
		if(__interrupt)
   14cd4:	66 23       	and	r22, r22
   14cd6:	11 f0       	breq	.+4      	; 0x14cdc <_spi_init+0x10>
			SPCR = (1 << SPIE) | (1 << SPE) | (1 << MSTR) | (1 << SPR1);
   14cd8:	82 ed       	ldi	r24, 0xD2	; 210
   14cda:	09 c0       	rjmp	.+18     	; 0x14cee <_spi_init+0x22>
		else
			SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR1);
   14cdc:	82 e5       	ldi	r24, 0x52	; 82
   14cde:	07 c0       	rjmp	.+14     	; 0x14cee <_spi_init+0x22>
	}
	else{
		_SPI_DDR = (1 << _SPI_MISO);
   14ce0:	88 e0       	ldi	r24, 0x08	; 8
   14ce2:	87 bb       	out	0x17, r24	; 23
		if(__interrupt)
   14ce4:	66 23       	and	r22, r22
   14ce6:	11 f0       	breq	.+4      	; 0x14cec <_spi_init+0x20>
			SPCR = (1 << SPIE) | (1 << SPE);
   14ce8:	80 ec       	ldi	r24, 0xC0	; 192
   14cea:	01 c0       	rjmp	.+2      	; 0x14cee <_spi_init+0x22>
		else
			SPCR = (1 << SPE);
   14cec:	80 e4       	ldi	r24, 0x40	; 64
   14cee:	8d b9       	out	0x0d, r24	; 13
   14cf0:	08 95       	ret

00014cf2 <_spi_enable>:
	}
}

void _spi_enable(unsigned char __select){
	if(__select == 0){
   14cf2:	88 23       	and	r24, r24
   14cf4:	19 f4       	brne	.+6      	; 0x14cfc <_spi_enable+0xa>
		sbi(_SLAVE_PORT, _SLAVE_PIN);
   14cf6:	db 9a       	sbi	0x1b, 3	; 27
		sbi(_MMC_PORT, _MMC_PIN);
   14cf8:	1b 9a       	sbi	0x03, 3	; 3
   14cfa:	08 95       	ret
	}
	if(__select == 1){
   14cfc:	81 30       	cpi	r24, 0x01	; 1
   14cfe:	39 f4       	brne	.+14     	; 0x14d0e <_spi_enable+0x1c>
		sbi(_MMC_PORT, _MMC_PIN);
   14d00:	1b 9a       	sbi	0x03, 3	; 3
   14d02:	82 ee       	ldi	r24, 0xE2	; 226
   14d04:	94 e0       	ldi	r25, 0x04	; 4
   14d06:	01 97       	sbiw	r24, 0x01	; 1
   14d08:	f1 f7       	brne	.-4      	; 0x14d06 <_spi_enable+0x14>
		_delay_ms(5);
		cbi(_SLAVE_PORT, _SLAVE_PIN);
   14d0a:	db 98       	cbi	0x1b, 3	; 27
   14d0c:	08 95       	ret
	}
	if(__select == 2){
   14d0e:	82 30       	cpi	r24, 0x02	; 2
   14d10:	31 f4       	brne	.+12     	; 0x14d1e <_spi_enable+0x2c>
		sbi(_SLAVE_PORT, _SLAVE_PIN);
   14d12:	db 9a       	sbi	0x1b, 3	; 27
   14d14:	82 ee       	ldi	r24, 0xE2	; 226
   14d16:	94 e0       	ldi	r25, 0x04	; 4
   14d18:	01 97       	sbiw	r24, 0x01	; 1
   14d1a:	f1 f7       	brne	.-4      	; 0x14d18 <_spi_enable+0x26>
		_delay_ms(5);
		cbi(_MMC_PORT, _MMC_PIN);
   14d1c:	1b 98       	cbi	0x03, 3	; 3
   14d1e:	08 95       	ret

00014d20 <_spi>:
	}
}

unsigned char _spi(unsigned char __data){
	SPDR = __data;
   14d20:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1 << SPIF)));
   14d22:	77 9b       	sbis	0x0e, 7	; 14
   14d24:	fe cf       	rjmp	.-4      	; 0x14d22 <_spi+0x2>
	return SPDR;
   14d26:	8f b1       	in	r24, 0x0f	; 15
}
   14d28:	08 95       	ret

00014d2a <_rtc>:

#include <compat/twi.h>

#include "RTC.h"

unsigned char _rtc(int __addr, int __len, char* __datetime, unsigned char __dir){
   14d2a:	98 2f       	mov	r25, r24
	int				__twcr;
	unsigned char	__i = 0;
	
	if(__dir){
   14d2c:	22 23       	and	r18, r18
   14d2e:	09 f4       	brne	.+2      	; 0x14d32 <_rtc+0x8>
   14d30:	49 c0       	rjmp	.+146    	; 0x14dc4 <_rtc+0x9a>
		TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
   14d32:	84 ea       	ldi	r24, 0xA4	; 164
   14d34:	80 93 74 00 	sts	0x0074, r24
		_rtc_response;
   14d38:	80 91 74 00 	lds	r24, 0x0074
   14d3c:	87 ff       	sbrs	r24, 7
   14d3e:	fc cf       	rjmp	.-8      	; 0x14d38 <_rtc+0xe>
		if(TW_STATUS != TW_START)
   14d40:	80 91 71 00 	lds	r24, 0x0071
   14d44:	88 7f       	andi	r24, 0xF8	; 248
   14d46:	88 30       	cpi	r24, 0x08	; 8
   14d48:	09 f0       	breq	.+2      	; 0x14d4c <_rtc+0x22>
   14d4a:	af c0       	rjmp	.+350    	; 0x14eaa <_rtc+0x180>
			return 1;

		TWDR = _DS1307W;
   14d4c:	80 ed       	ldi	r24, 0xD0	; 208
   14d4e:	80 93 73 00 	sts	0x0073, r24
		TWCR = _BV(TWINT) | _BV(TWEN);
   14d52:	84 e8       	ldi	r24, 0x84	; 132
   14d54:	80 93 74 00 	sts	0x0074, r24
		_rtc_response;
   14d58:	80 91 74 00 	lds	r24, 0x0074
   14d5c:	87 ff       	sbrs	r24, 7
   14d5e:	fc cf       	rjmp	.-8      	; 0x14d58 <_rtc+0x2e>
		if(TW_STATUS != TW_MT_SLA_ACK)
   14d60:	80 91 71 00 	lds	r24, 0x0071
   14d64:	88 7f       	andi	r24, 0xF8	; 248
   14d66:	88 31       	cpi	r24, 0x18	; 24
   14d68:	09 f0       	breq	.+2      	; 0x14d6c <_rtc+0x42>
   14d6a:	9f c0       	rjmp	.+318    	; 0x14eaa <_rtc+0x180>
			return 1;

		TWDR = __addr;
   14d6c:	90 93 73 00 	sts	0x0073, r25
		TWCR = _BV(TWINT) | _BV(TWEN);
   14d70:	84 e8       	ldi	r24, 0x84	; 132
   14d72:	80 93 74 00 	sts	0x0074, r24
		_rtc_response;
   14d76:	80 91 74 00 	lds	r24, 0x0074
   14d7a:	87 ff       	sbrs	r24, 7
   14d7c:	fc cf       	rjmp	.-8      	; 0x14d76 <_rtc+0x4c>
		if(TW_STATUS != TW_MT_DATA_ACK)
   14d7e:	80 91 71 00 	lds	r24, 0x0071
   14d82:	88 7f       	andi	r24, 0xF8	; 248
   14d84:	88 32       	cpi	r24, 0x28	; 40
   14d86:	09 f0       	breq	.+2      	; 0x14d8a <_rtc+0x60>
   14d88:	90 c0       	rjmp	.+288    	; 0x14eaa <_rtc+0x180>
   14d8a:	9b 01       	movw	r18, r22
			return 1;

		for(; __len > 0; __len--){
			TWDR = __datetime[__i++];
			TWCR = _BV(TWINT) | _BV(TWEN);
   14d8c:	94 e8       	ldi	r25, 0x84	; 132
   14d8e:	14 c0       	rjmp	.+40     	; 0x14db8 <_rtc+0x8e>
		_rtc_response;
		if(TW_STATUS != TW_MT_DATA_ACK)
			return 1;

		for(; __len > 0; __len--){
			TWDR = __datetime[__i++];
   14d90:	fa 01       	movw	r30, r20
   14d92:	e8 0f       	add	r30, r24
   14d94:	f1 1d       	adc	r31, r1
   14d96:	80 81       	ld	r24, Z
   14d98:	80 93 73 00 	sts	0x0073, r24
			TWCR = _BV(TWINT) | _BV(TWEN);
   14d9c:	90 93 74 00 	sts	0x0074, r25
			_rtc_response;
   14da0:	80 91 74 00 	lds	r24, 0x0074
   14da4:	87 ff       	sbrs	r24, 7
   14da6:	fc cf       	rjmp	.-8      	; 0x14da0 <_rtc+0x76>
			if(TW_STATUS == TW_MT_DATA_NACK)
   14da8:	80 91 71 00 	lds	r24, 0x0071
   14dac:	88 7f       	andi	r24, 0xF8	; 248
   14dae:	80 33       	cpi	r24, 0x30	; 48
   14db0:	09 f4       	brne	.+2      	; 0x14db4 <_rtc+0x8a>
   14db2:	7b c0       	rjmp	.+246    	; 0x14eaa <_rtc+0x180>
		TWCR = _BV(TWINT) | _BV(TWEN);
		_rtc_response;
		if(TW_STATUS != TW_MT_DATA_ACK)
			return 1;

		for(; __len > 0; __len--){
   14db4:	21 50       	subi	r18, 0x01	; 1
   14db6:	30 40       	sbci	r19, 0x00	; 0
   14db8:	86 2f       	mov	r24, r22
   14dba:	82 1b       	sub	r24, r18
   14dbc:	12 16       	cp	r1, r18
   14dbe:	13 06       	cpc	r1, r19
   14dc0:	3c f3       	brlt	.-50     	; 0x14d90 <_rtc+0x66>
   14dc2:	6e c0       	rjmp	.+220    	; 0x14ea0 <_rtc+0x176>
		}

		TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
	}
	else{
		TWCR =_BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
   14dc4:	84 ea       	ldi	r24, 0xA4	; 164
   14dc6:	80 93 74 00 	sts	0x0074, r24
		_rtc_response;
   14dca:	80 91 74 00 	lds	r24, 0x0074
   14dce:	87 ff       	sbrs	r24, 7
   14dd0:	fc cf       	rjmp	.-8      	; 0x14dca <_rtc+0xa0>
		if(TW_STATUS != TW_START)
   14dd2:	80 91 71 00 	lds	r24, 0x0071
   14dd6:	88 7f       	andi	r24, 0xF8	; 248
   14dd8:	88 30       	cpi	r24, 0x08	; 8
   14dda:	09 f0       	breq	.+2      	; 0x14dde <_rtc+0xb4>
   14ddc:	66 c0       	rjmp	.+204    	; 0x14eaa <_rtc+0x180>
			return 1;

		TWDR = _DS1307W;
   14dde:	80 ed       	ldi	r24, 0xD0	; 208
   14de0:	80 93 73 00 	sts	0x0073, r24
		TWCR = _BV(TWINT) | _BV(TWEN);
   14de4:	84 e8       	ldi	r24, 0x84	; 132
   14de6:	80 93 74 00 	sts	0x0074, r24
		_rtc_response;
   14dea:	80 91 74 00 	lds	r24, 0x0074
   14dee:	87 ff       	sbrs	r24, 7
   14df0:	fc cf       	rjmp	.-8      	; 0x14dea <_rtc+0xc0>
		if(TW_STATUS != TW_MT_SLA_ACK)
   14df2:	80 91 71 00 	lds	r24, 0x0071
   14df6:	88 7f       	andi	r24, 0xF8	; 248
   14df8:	88 31       	cpi	r24, 0x18	; 24
   14dfa:	09 f0       	breq	.+2      	; 0x14dfe <_rtc+0xd4>
   14dfc:	56 c0       	rjmp	.+172    	; 0x14eaa <_rtc+0x180>
			return 1;

		TWDR = __addr;
   14dfe:	90 93 73 00 	sts	0x0073, r25
		TWCR = _BV(TWINT) | _BV(TWEN);
   14e02:	84 e8       	ldi	r24, 0x84	; 132
   14e04:	80 93 74 00 	sts	0x0074, r24
		_rtc_response;
   14e08:	80 91 74 00 	lds	r24, 0x0074
   14e0c:	87 ff       	sbrs	r24, 7
   14e0e:	fc cf       	rjmp	.-8      	; 0x14e08 <_rtc+0xde>
		if(TW_STATUS != TW_MT_DATA_ACK)
   14e10:	80 91 71 00 	lds	r24, 0x0071
   14e14:	88 7f       	andi	r24, 0xF8	; 248
   14e16:	88 32       	cpi	r24, 0x28	; 40
   14e18:	09 f0       	breq	.+2      	; 0x14e1c <_rtc+0xf2>
   14e1a:	47 c0       	rjmp	.+142    	; 0x14eaa <_rtc+0x180>
			return 1;

		TWCR =_BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
   14e1c:	84 ea       	ldi	r24, 0xA4	; 164
   14e1e:	80 93 74 00 	sts	0x0074, r24
		_rtc_response;
   14e22:	80 91 74 00 	lds	r24, 0x0074
   14e26:	87 ff       	sbrs	r24, 7
   14e28:	fc cf       	rjmp	.-8      	; 0x14e22 <_rtc+0xf8>
		if(TW_STATUS != TW_REP_START)
   14e2a:	80 91 71 00 	lds	r24, 0x0071
   14e2e:	88 7f       	andi	r24, 0xF8	; 248
   14e30:	80 31       	cpi	r24, 0x10	; 16
   14e32:	d9 f5       	brne	.+118    	; 0x14eaa <_rtc+0x180>
			return 1;

		TWDR = _DS1307R;
   14e34:	81 ed       	ldi	r24, 0xD1	; 209
   14e36:	80 93 73 00 	sts	0x0073, r24
		TWCR =_BV(TWINT) | _BV(TWEN);
   14e3a:	84 e8       	ldi	r24, 0x84	; 132
   14e3c:	80 93 74 00 	sts	0x0074, r24
		_rtc_response;
   14e40:	80 91 74 00 	lds	r24, 0x0074
   14e44:	87 ff       	sbrs	r24, 7
   14e46:	fc cf       	rjmp	.-8      	; 0x14e40 <_rtc+0x116>
		if(TW_STATUS != TW_MR_SLA_ACK)
   14e48:	80 91 71 00 	lds	r24, 0x0071
   14e4c:	88 7f       	andi	r24, 0xF8	; 248
   14e4e:	80 34       	cpi	r24, 0x40	; 64
   14e50:	61 f5       	brne	.+88     	; 0x14eaa <_rtc+0x180>
   14e52:	24 ec       	ldi	r18, 0xC4	; 196
   14e54:	30 e0       	ldi	r19, 0x00	; 0
   14e56:	90 e0       	ldi	r25, 0x00	; 0
   14e58:	20 c0       	rjmp	.+64     	; 0x14e9a <_rtc+0x170>
			return 1;

		for(__twcr = _BV(TWINT) | _BV(TWEN) | _BV(TWEA); __len > 0; __len--){
			if(__len == 1)
   14e5a:	61 30       	cpi	r22, 0x01	; 1
   14e5c:	71 05       	cpc	r23, r1
   14e5e:	11 f4       	brne	.+4      	; 0x14e64 <_rtc+0x13a>
   14e60:	24 e8       	ldi	r18, 0x84	; 132
   14e62:	30 e0       	ldi	r19, 0x00	; 0
				__twcr = _BV(TWINT) | _BV(TWEN);
			TWCR = __twcr;
   14e64:	20 93 74 00 	sts	0x0074, r18
			_rtc_response;
   14e68:	80 91 74 00 	lds	r24, 0x0074
   14e6c:	87 ff       	sbrs	r24, 7
   14e6e:	fc cf       	rjmp	.-8      	; 0x14e68 <_rtc+0x13e>
			if(TW_STATUS == TW_MR_DATA_NACK)
   14e70:	80 91 71 00 	lds	r24, 0x0071
   14e74:	88 7f       	andi	r24, 0xF8	; 248
   14e76:	88 35       	cpi	r24, 0x58	; 88
   14e78:	11 f4       	brne	.+4      	; 0x14e7e <_rtc+0x154>
   14e7a:	60 e0       	ldi	r22, 0x00	; 0
   14e7c:	70 e0       	ldi	r23, 0x00	; 0
				__len = 0;
			if(TW_STATUS == TW_MR_DATA_ACK)
   14e7e:	80 91 71 00 	lds	r24, 0x0071
   14e82:	88 7f       	andi	r24, 0xF8	; 248
   14e84:	80 35       	cpi	r24, 0x50	; 80
   14e86:	39 f4       	brne	.+14     	; 0x14e96 <_rtc+0x16c>
				__datetime[__i++] = TWDR;
   14e88:	80 91 73 00 	lds	r24, 0x0073
   14e8c:	fa 01       	movw	r30, r20
   14e8e:	e9 0f       	add	r30, r25
   14e90:	f1 1d       	adc	r31, r1
   14e92:	80 83       	st	Z, r24
   14e94:	9f 5f       	subi	r25, 0xFF	; 255
		TWCR =_BV(TWINT) | _BV(TWEN);
		_rtc_response;
		if(TW_STATUS != TW_MR_SLA_ACK)
			return 1;

		for(__twcr = _BV(TWINT) | _BV(TWEN) | _BV(TWEA); __len > 0; __len--){
   14e96:	61 50       	subi	r22, 0x01	; 1
   14e98:	70 40       	sbci	r23, 0x00	; 0
   14e9a:	16 16       	cp	r1, r22
   14e9c:	17 06       	cpc	r1, r23
   14e9e:	ec f2       	brlt	.-70     	; 0x14e5a <_rtc+0x130>
			if(TW_STATUS == TW_MR_DATA_NACK)
				__len = 0;
			if(TW_STATUS == TW_MR_DATA_ACK)
				__datetime[__i++] = TWDR;
		}
		TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
   14ea0:	84 e9       	ldi	r24, 0x94	; 148
   14ea2:	80 93 74 00 	sts	0x0074, r24
   14ea6:	80 e0       	ldi	r24, 0x00	; 0
   14ea8:	08 95       	ret
   14eaa:	81 e0       	ldi	r24, 0x01	; 1
	}

    return 0;
}
   14eac:	08 95       	ret

00014eae <_datetime>:

void _datetime(unsigned char __mode, char* __date, char* __time){
   14eae:	ef 92       	push	r14
   14eb0:	ff 92       	push	r15
   14eb2:	0f 93       	push	r16
   14eb4:	1f 93       	push	r17
   14eb6:	df 93       	push	r29
   14eb8:	cf 93       	push	r28
   14eba:	cd b7       	in	r28, 0x3d	; 61
   14ebc:	de b7       	in	r29, 0x3e	; 62
   14ebe:	64 97       	sbiw	r28, 0x14	; 20
   14ec0:	0f b6       	in	r0, 0x3f	; 63
   14ec2:	f8 94       	cli
   14ec4:	de bf       	out	0x3e, r29	; 62
   14ec6:	0f be       	out	0x3f, r0	; 63
   14ec8:	cd bf       	out	0x3d, r28	; 61
   14eca:	28 2f       	mov	r18, r24
   14ecc:	8b 01       	movw	r16, r22
   14ece:	7a 01       	movw	r14, r20
   14ed0:	ae 01       	movw	r20, r28
   14ed2:	4f 5f       	subi	r20, 0xFF	; 255
   14ed4:	5f 4f       	sbci	r21, 0xFF	; 255
	char	__datetime[20];

	if(__mode){
   14ed6:	88 23       	and	r24, r24
   14ed8:	99 f1       	breq	.+102    	; 0x14f40 <_datetime+0x92>
		__datetime[4] = (((__date[0] - 0x30) & 0x0F) << 4) + ((__date[1] - 0x30) & 0x0F);
   14eda:	fb 01       	movw	r30, r22
   14edc:	90 81       	ld	r25, Z
   14ede:	92 95       	swap	r25
   14ee0:	90 7f       	andi	r25, 0xF0	; 240
   14ee2:	81 81       	ldd	r24, Z+1	; 0x01
   14ee4:	8f 70       	andi	r24, 0x0F	; 15
   14ee6:	98 0f       	add	r25, r24
   14ee8:	9d 83       	std	Y+5, r25	; 0x05
		__datetime[5] = (((__date[3] - 0x30) & 0x0F) << 4) + ((__date[4] - 0x30) & 0x0F);
   14eea:	93 81       	ldd	r25, Z+3	; 0x03
   14eec:	92 95       	swap	r25
   14eee:	90 7f       	andi	r25, 0xF0	; 240
   14ef0:	84 81       	ldd	r24, Z+4	; 0x04
   14ef2:	8f 70       	andi	r24, 0x0F	; 15
   14ef4:	98 0f       	add	r25, r24
   14ef6:	9e 83       	std	Y+6, r25	; 0x06
		__datetime[6] = (((__date[6] - 0x30) & 0x0F) << 4) + ((__date[7] - 0x30) & 0x0F);
   14ef8:	96 81       	ldd	r25, Z+6	; 0x06
   14efa:	92 95       	swap	r25
   14efc:	90 7f       	andi	r25, 0xF0	; 240
   14efe:	87 81       	ldd	r24, Z+7	; 0x07
   14f00:	8f 70       	andi	r24, 0x0F	; 15
   14f02:	98 0f       	add	r25, r24
   14f04:	9f 83       	std	Y+7, r25	; 0x07

		__datetime[2] = (((__time[0] - 0x30) & 0x0F) << 4) + ((__time[1] - 0x30) & 0x0F);
   14f06:	f7 01       	movw	r30, r14
   14f08:	90 81       	ld	r25, Z
   14f0a:	92 95       	swap	r25
   14f0c:	90 7f       	andi	r25, 0xF0	; 240
   14f0e:	81 81       	ldd	r24, Z+1	; 0x01
   14f10:	8f 70       	andi	r24, 0x0F	; 15
   14f12:	98 0f       	add	r25, r24
   14f14:	9b 83       	std	Y+3, r25	; 0x03
		__datetime[1] = (((__time[3] - 0x30) & 0x0F) << 4) + ((__time[4] - 0x30) & 0x0F);
   14f16:	93 81       	ldd	r25, Z+3	; 0x03
   14f18:	92 95       	swap	r25
   14f1a:	90 7f       	andi	r25, 0xF0	; 240
   14f1c:	84 81       	ldd	r24, Z+4	; 0x04
   14f1e:	8f 70       	andi	r24, 0x0F	; 15
   14f20:	98 0f       	add	r25, r24
   14f22:	9a 83       	std	Y+2, r25	; 0x02
		__datetime[0] = (((__time[6] - 0x30) & 0x0F) << 4) + ((__time[7] - 0x30) & 0x0F);
   14f24:	96 81       	ldd	r25, Z+6	; 0x06
   14f26:	92 95       	swap	r25
   14f28:	90 7f       	andi	r25, 0xF0	; 240
   14f2a:	87 81       	ldd	r24, Z+7	; 0x07
   14f2c:	8f 70       	andi	r24, 0x0F	; 15
   14f2e:	98 0f       	add	r25, r24
   14f30:	99 83       	std	Y+1, r25	; 0x01
		_rtc(0, 8, __datetime, __mode);
   14f32:	80 e0       	ldi	r24, 0x00	; 0
   14f34:	90 e0       	ldi	r25, 0x00	; 0
   14f36:	68 e0       	ldi	r22, 0x08	; 8
   14f38:	70 e0       	ldi	r23, 0x00	; 0
   14f3a:	0e 94 95 a6 	call	0x14d2a	; 0x14d2a <_rtc>
   14f3e:	4a c0       	rjmp	.+148    	; 0x14fd4 <_datetime+0x126>
	}
	else
		if(_rtc(0, 8, __datetime, __mode) != 1){
   14f40:	80 e0       	ldi	r24, 0x00	; 0
   14f42:	90 e0       	ldi	r25, 0x00	; 0
   14f44:	68 e0       	ldi	r22, 0x08	; 8
   14f46:	70 e0       	ldi	r23, 0x00	; 0
   14f48:	20 e0       	ldi	r18, 0x00	; 0
   14f4a:	0e 94 95 a6 	call	0x14d2a	; 0x14d2a <_rtc>
   14f4e:	81 30       	cpi	r24, 0x01	; 1
   14f50:	09 f4       	brne	.+2      	; 0x14f54 <_datetime+0xa6>
   14f52:	40 c0       	rjmp	.+128    	; 0x14fd4 <_datetime+0x126>
			__date[0] = (__datetime[4] >> 4) + 0x30;
   14f54:	9d 81       	ldd	r25, Y+5	; 0x05
   14f56:	89 2f       	mov	r24, r25
   14f58:	82 95       	swap	r24
   14f5a:	8f 70       	andi	r24, 0x0F	; 15
   14f5c:	80 5d       	subi	r24, 0xD0	; 208
   14f5e:	f8 01       	movw	r30, r16
   14f60:	80 83       	st	Z, r24
			__date[1] = (__datetime[4] & 0x0F) + 0x30;
   14f62:	9f 70       	andi	r25, 0x0F	; 15
   14f64:	90 5d       	subi	r25, 0xD0	; 208
   14f66:	91 83       	std	Z+1, r25	; 0x01
			__date[2] = '/';
   14f68:	2f e2       	ldi	r18, 0x2F	; 47
   14f6a:	22 83       	std	Z+2, r18	; 0x02
			__date[3] = (__datetime[5] >> 4) + 0x30;
   14f6c:	9e 81       	ldd	r25, Y+6	; 0x06
   14f6e:	89 2f       	mov	r24, r25
   14f70:	82 95       	swap	r24
   14f72:	8f 70       	andi	r24, 0x0F	; 15
   14f74:	80 5d       	subi	r24, 0xD0	; 208
   14f76:	83 83       	std	Z+3, r24	; 0x03
			__date[4] = (__datetime[5] & 0x0F) + 0x30;
   14f78:	9f 70       	andi	r25, 0x0F	; 15
   14f7a:	90 5d       	subi	r25, 0xD0	; 208
   14f7c:	94 83       	std	Z+4, r25	; 0x04
			__date[5] = '/';
   14f7e:	25 83       	std	Z+5, r18	; 0x05
			__date[6] = (__datetime[6] >> 4) + 0x30;
   14f80:	9f 81       	ldd	r25, Y+7	; 0x07
   14f82:	89 2f       	mov	r24, r25
   14f84:	82 95       	swap	r24
   14f86:	8f 70       	andi	r24, 0x0F	; 15
   14f88:	80 5d       	subi	r24, 0xD0	; 208
   14f8a:	86 83       	std	Z+6, r24	; 0x06
			__date[7] = (__datetime[6] & 0x0F) + 0x30;
   14f8c:	9f 70       	andi	r25, 0x0F	; 15
   14f8e:	90 5d       	subi	r25, 0xD0	; 208
   14f90:	97 83       	std	Z+7, r25	; 0x07
			__date[8] = '\0';
   14f92:	10 86       	std	Z+8, r1	; 0x08

			__time[0] = (__datetime[2] >> 4) + 0x30;
   14f94:	9b 81       	ldd	r25, Y+3	; 0x03
   14f96:	89 2f       	mov	r24, r25
   14f98:	82 95       	swap	r24
   14f9a:	8f 70       	andi	r24, 0x0F	; 15
   14f9c:	80 5d       	subi	r24, 0xD0	; 208
   14f9e:	f7 01       	movw	r30, r14
   14fa0:	80 83       	st	Z, r24
			__time[1] = (__datetime[2] & 0x0F) + 0x30;
   14fa2:	9f 70       	andi	r25, 0x0F	; 15
   14fa4:	90 5d       	subi	r25, 0xD0	; 208
   14fa6:	91 83       	std	Z+1, r25	; 0x01
			__time[2] = ':';
   14fa8:	2a e3       	ldi	r18, 0x3A	; 58
   14faa:	22 83       	std	Z+2, r18	; 0x02
			__time[3] = (__datetime[1] >> 4) + 0x30;
   14fac:	9a 81       	ldd	r25, Y+2	; 0x02
   14fae:	89 2f       	mov	r24, r25
   14fb0:	82 95       	swap	r24
   14fb2:	8f 70       	andi	r24, 0x0F	; 15
   14fb4:	80 5d       	subi	r24, 0xD0	; 208
   14fb6:	83 83       	std	Z+3, r24	; 0x03
			__time[4] = (__datetime[1] & 0x0F) + 0x30;
   14fb8:	9f 70       	andi	r25, 0x0F	; 15
   14fba:	90 5d       	subi	r25, 0xD0	; 208
   14fbc:	94 83       	std	Z+4, r25	; 0x04
			__time[5] = ':';
   14fbe:	25 83       	std	Z+5, r18	; 0x05
			__time[6] = (__datetime[0] >> 4) + 0x30;
   14fc0:	99 81       	ldd	r25, Y+1	; 0x01
   14fc2:	89 2f       	mov	r24, r25
   14fc4:	82 95       	swap	r24
   14fc6:	8f 70       	andi	r24, 0x0F	; 15
   14fc8:	80 5d       	subi	r24, 0xD0	; 208
   14fca:	86 83       	std	Z+6, r24	; 0x06
			__time[7] = (__datetime[0] & 0x0F) + 0x30;
   14fcc:	9f 70       	andi	r25, 0x0F	; 15
   14fce:	90 5d       	subi	r25, 0xD0	; 208
   14fd0:	97 83       	std	Z+7, r25	; 0x07
			__time[8] = '\0';
   14fd2:	10 86       	std	Z+8, r1	; 0x08
		}
}
   14fd4:	64 96       	adiw	r28, 0x14	; 20
   14fd6:	0f b6       	in	r0, 0x3f	; 63
   14fd8:	f8 94       	cli
   14fda:	de bf       	out	0x3e, r29	; 62
   14fdc:	0f be       	out	0x3f, r0	; 63
   14fde:	cd bf       	out	0x3d, r28	; 61
   14fe0:	cf 91       	pop	r28
   14fe2:	df 91       	pop	r29
   14fe4:	1f 91       	pop	r17
   14fe6:	0f 91       	pop	r16
   14fe8:	ff 90       	pop	r15
   14fea:	ef 90       	pop	r14
   14fec:	08 95       	ret

00014fee <_day>:

unsigned char _day(void){
   14fee:	df 93       	push	r29
   14ff0:	cf 93       	push	r28
   14ff2:	cd b7       	in	r28, 0x3d	; 61
   14ff4:	de b7       	in	r29, 0x3e	; 62
   14ff6:	64 97       	sbiw	r28, 0x14	; 20
   14ff8:	0f b6       	in	r0, 0x3f	; 63
   14ffa:	f8 94       	cli
   14ffc:	de bf       	out	0x3e, r29	; 62
   14ffe:	0f be       	out	0x3f, r0	; 63
   15000:	cd bf       	out	0x3d, r28	; 61
	char	__datetime[20];

	if(_rtc(0, 8, __datetime, 0) != 1)
   15002:	80 e0       	ldi	r24, 0x00	; 0
   15004:	90 e0       	ldi	r25, 0x00	; 0
   15006:	68 e0       	ldi	r22, 0x08	; 8
   15008:	70 e0       	ldi	r23, 0x00	; 0
   1500a:	ae 01       	movw	r20, r28
   1500c:	4f 5f       	subi	r20, 0xFF	; 255
   1500e:	5f 4f       	sbci	r21, 0xFF	; 255
   15010:	20 e0       	ldi	r18, 0x00	; 0
   15012:	0e 94 95 a6 	call	0x14d2a	; 0x14d2a <_rtc>
   15016:	81 30       	cpi	r24, 0x01	; 1
   15018:	11 f4       	brne	.+4      	; 0x1501e <_day+0x30>
   1501a:	80 e0       	ldi	r24, 0x00	; 0
   1501c:	02 c0       	rjmp	.+4      	; 0x15022 <_day+0x34>
		return __datetime[3] & 0x0F;
   1501e:	8c 81       	ldd	r24, Y+4	; 0x04
   15020:	8f 70       	andi	r24, 0x0F	; 15
	return 0;
   15022:	64 96       	adiw	r28, 0x14	; 20
   15024:	0f b6       	in	r0, 0x3f	; 63
   15026:	f8 94       	cli
   15028:	de bf       	out	0x3e, r29	; 62
   1502a:	0f be       	out	0x3f, r0	; 63
   1502c:	cd bf       	out	0x3d, r28	; 61
   1502e:	cf 91       	pop	r28
   15030:	df 91       	pop	r29
   15032:	08 95       	ret

00015034 <uart_baudrate>:
	}

	uart_baudrate(__com, __baudrate);
}

void uart_baudrate(unsigned char __com, unsigned long __baudrate){
   15034:	1f 93       	push	r17
   15036:	18 2f       	mov	r17, r24
   15038:	9a 01       	movw	r18, r20
   1503a:	ab 01       	movw	r20, r22
	unsigned long __br;

	__br = (unsigned long)((_CPU_DEFAULT + (__baudrate * 8)) / (__baudrate * 16) - 1);
   1503c:	ca 01       	movw	r24, r20
   1503e:	b9 01       	movw	r22, r18
   15040:	60 50       	subi	r22, 0x00	; 0
   15042:	70 4e       	sbci	r23, 0xE0	; 224
   15044:	83 4e       	sbci	r24, 0xE3	; 227
   15046:	9f 4f       	sbci	r25, 0xFF	; 255
   15048:	f3 e0       	ldi	r31, 0x03	; 3
   1504a:	66 0f       	add	r22, r22
   1504c:	77 1f       	adc	r23, r23
   1504e:	88 1f       	adc	r24, r24
   15050:	99 1f       	adc	r25, r25
   15052:	fa 95       	dec	r31
   15054:	d1 f7       	brne	.-12     	; 0x1504a <uart_baudrate+0x16>
   15056:	e4 e0       	ldi	r30, 0x04	; 4
   15058:	22 0f       	add	r18, r18
   1505a:	33 1f       	adc	r19, r19
   1505c:	44 1f       	adc	r20, r20
   1505e:	55 1f       	adc	r21, r21
   15060:	ea 95       	dec	r30
   15062:	d1 f7       	brne	.-12     	; 0x15058 <uart_baudrate+0x24>
   15064:	0e 94 2a aa 	call	0x15454	; 0x15454 <__udivmodsi4>
   15068:	21 50       	subi	r18, 0x01	; 1
   1506a:	30 40       	sbci	r19, 0x00	; 0
   1506c:	40 40       	sbci	r20, 0x00	; 0
   1506e:	50 40       	sbci	r21, 0x00	; 0
   15070:	bb 27       	eor	r27, r27
   15072:	a5 2f       	mov	r26, r21
   15074:	94 2f       	mov	r25, r20
   15076:	83 2f       	mov	r24, r19

	if(__com){
   15078:	11 23       	and	r17, r17
   1507a:	29 f0       	breq	.+10     	; 0x15086 <uart_baudrate+0x52>
		UBRR1L = __br;
   1507c:	20 93 99 00 	sts	0x0099, r18
		UBRR1H = __br >> 8;
   15080:	80 93 98 00 	sts	0x0098, r24
   15084:	03 c0       	rjmp	.+6      	; 0x1508c <uart_baudrate+0x58>
	}
	else{
		UBRR0L = __br;
   15086:	29 b9       	out	0x09, r18	; 9
		UBRR0H = __br >> 8;
   15088:	80 93 90 00 	sts	0x0090, r24
	}
}
   1508c:	1f 91       	pop	r17
   1508e:	08 95       	ret

00015090 <uart_init>:
#include <util/delay.h>
#include <string.h>

#include "UART.h"

void uart_init(unsigned char __com, unsigned long __baudrate){
   15090:	98 2f       	mov	r25, r24
	if(__com){
   15092:	88 23       	and	r24, r24
   15094:	39 f0       	breq	.+14     	; 0x150a4 <uart_init+0x14>
		UCSR1B = _BV(RXCIE1) | _BV(RXEN1) | _BV(TXEN1);
   15096:	88 e9       	ldi	r24, 0x98	; 152
   15098:	80 93 9a 00 	sts	0x009A, r24
		UCSR1C = _BV(UCSZ11) | _BV(UCSZ10);
   1509c:	86 e0       	ldi	r24, 0x06	; 6
   1509e:	80 93 9d 00 	sts	0x009D, r24
   150a2:	05 c0       	rjmp	.+10     	; 0x150ae <uart_init+0x1e>
	}
	else{
		UCSR0B = _BV(RXCIE0) | _BV(RXEN0) | _BV(TXEN0);
   150a4:	88 e9       	ldi	r24, 0x98	; 152
   150a6:	8a b9       	out	0x0a, r24	; 10
		UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
   150a8:	86 e0       	ldi	r24, 0x06	; 6
   150aa:	80 93 95 00 	sts	0x0095, r24
	}

	uart_baudrate(__com, __baudrate);
   150ae:	89 2f       	mov	r24, r25
   150b0:	0e 94 1a a8 	call	0x15034	; 0x15034 <uart_baudrate>
}
   150b4:	08 95       	ret

000150b6 <uart>:
		UBRR0H = __br >> 8;
	}
}

unsigned char uart(unsigned char __com, unsigned char __dir, unsigned char __chr){
	if(__com){
   150b6:	88 23       	and	r24, r24
   150b8:	81 f0       	breq	.+32     	; 0x150da <uart+0x24>
		if(__dir){
   150ba:	66 23       	and	r22, r22
   150bc:	39 f0       	breq	.+14     	; 0x150cc <uart+0x16>
			loop_until_bit_is_set(UCSR1A, UDRE1);
   150be:	80 91 9b 00 	lds	r24, 0x009B
   150c2:	85 ff       	sbrs	r24, 5
   150c4:	fc cf       	rjmp	.-8      	; 0x150be <uart+0x8>
			UDR1 = __chr;
   150c6:	40 93 9c 00 	sts	0x009C, r20
   150ca:	0c c0       	rjmp	.+24     	; 0x150e4 <uart+0x2e>
		}
		else{
			loop_until_bit_is_set(UCSR1A, RXC);
   150cc:	80 91 9b 00 	lds	r24, 0x009B
   150d0:	87 ff       	sbrs	r24, 7
   150d2:	fc cf       	rjmp	.-8      	; 0x150cc <uart+0x16>
			return UDR1;
   150d4:	80 91 9c 00 	lds	r24, 0x009C
   150d8:	08 95       	ret
		}
	}
	else{
		if(__dir){
   150da:	66 23       	and	r22, r22
   150dc:	29 f0       	breq	.+10     	; 0x150e8 <uart+0x32>
			loop_until_bit_is_set(UCSR0A, UDRE0);
   150de:	5d 9b       	sbis	0x0b, 5	; 11
   150e0:	fe cf       	rjmp	.-4      	; 0x150de <uart+0x28>
			UDR0 = __chr;
   150e2:	4c b9       	out	0x0c, r20	; 12
   150e4:	81 e0       	ldi	r24, 0x01	; 1
   150e6:	08 95       	ret
		}
		else{
			loop_until_bit_is_set(UCSR0A,  RXC);
   150e8:	5f 9b       	sbis	0x0b, 7	; 11
   150ea:	fe cf       	rjmp	.-4      	; 0x150e8 <uart+0x32>
			return UDR0;
   150ec:	8c b1       	in	r24, 0x0c	; 12
		}

	}

	return 1;
}
   150ee:	08 95       	ret

000150f0 <uart_print>:

void uart_print(unsigned char __com, unsigned char __ret, char *__str){
   150f0:	0f 93       	push	r16
   150f2:	1f 93       	push	r17
   150f4:	cf 93       	push	r28
   150f6:	df 93       	push	r29
   150f8:	18 2f       	mov	r17, r24
   150fa:	06 2f       	mov	r16, r22
   150fc:	ea 01       	movw	r28, r20
	if(strlen(__str)>0)
   150fe:	88 81       	ld	r24, Y
   15100:	88 23       	and	r24, r24
   15102:	31 f4       	brne	.+12     	; 0x15110 <uart_print+0x20>
   15104:	08 c0       	rjmp	.+16     	; 0x15116 <uart_print+0x26>
		while(*__str)
		     uart(__com, 1, *__str++);
   15106:	21 96       	adiw	r28, 0x01	; 1
   15108:	81 2f       	mov	r24, r17
   1510a:	61 e0       	ldi	r22, 0x01	; 1
   1510c:	0e 94 5b a8 	call	0x150b6	; 0x150b6 <uart>
	return 1;
}

void uart_print(unsigned char __com, unsigned char __ret, char *__str){
	if(strlen(__str)>0)
		while(*__str)
   15110:	48 81       	ld	r20, Y
   15112:	44 23       	and	r20, r20
   15114:	c1 f7       	brne	.-16     	; 0x15106 <uart_print+0x16>
		     uart(__com, 1, *__str++);

	if(__ret){
   15116:	00 23       	and	r16, r16
   15118:	51 f0       	breq	.+20     	; 0x1512e <uart_print+0x3e>
		uart(__com, 1, 0x0D);
   1511a:	81 2f       	mov	r24, r17
   1511c:	61 e0       	ldi	r22, 0x01	; 1
   1511e:	4d e0       	ldi	r20, 0x0D	; 13
   15120:	0e 94 5b a8 	call	0x150b6	; 0x150b6 <uart>
		uart(__com, 1, 0x0A);
   15124:	81 2f       	mov	r24, r17
   15126:	61 e0       	ldi	r22, 0x01	; 1
   15128:	4a e0       	ldi	r20, 0x0A	; 10
   1512a:	0e 94 5b a8 	call	0x150b6	; 0x150b6 <uart>
   1512e:	82 ee       	ldi	r24, 0xE2	; 226
   15130:	94 e0       	ldi	r25, 0x04	; 4
   15132:	01 97       	sbiw	r24, 0x01	; 1
   15134:	f1 f7       	brne	.-4      	; 0x15132 <uart_print+0x42>
	}
	_delay_ms(5);
}
   15136:	df 91       	pop	r29
   15138:	cf 91       	pop	r28
   1513a:	1f 91       	pop	r17
   1513c:	0f 91       	pop	r16
   1513e:	08 95       	ret

00015140 <uart_printf>:

void uart_printf(unsigned char __com, unsigned char __ret, char *__str){
   15140:	0f 93       	push	r16
   15142:	1f 93       	push	r17
   15144:	cf 93       	push	r28
   15146:	df 93       	push	r29
   15148:	18 2f       	mov	r17, r24
   1514a:	06 2f       	mov	r16, r22
   1514c:	ea 01       	movw	r28, r20
   1514e:	07 c0       	rjmp	.+14     	; 0x1515e <uart_printf+0x1e>
	while(pgm_read_byte(&(*__str)))
		uart(__com, 1, pgm_read_byte(&(*__str++)));
   15150:	21 96       	adiw	r28, 0x01	; 1
   15152:	f9 01       	movw	r30, r18
   15154:	44 91       	lpm	r20, Z+
   15156:	81 2f       	mov	r24, r17
   15158:	61 e0       	ldi	r22, 0x01	; 1
   1515a:	0e 94 5b a8 	call	0x150b6	; 0x150b6 <uart>
   1515e:	9e 01       	movw	r18, r28
	}
	_delay_ms(5);
}

void uart_printf(unsigned char __com, unsigned char __ret, char *__str){
	while(pgm_read_byte(&(*__str)))
   15160:	fe 01       	movw	r30, r28
   15162:	84 91       	lpm	r24, Z+
   15164:	88 23       	and	r24, r24
   15166:	a1 f7       	brne	.-24     	; 0x15150 <uart_printf+0x10>
		uart(__com, 1, pgm_read_byte(&(*__str++)));

	if(__ret){
   15168:	00 23       	and	r16, r16
   1516a:	51 f0       	breq	.+20     	; 0x15180 <uart_printf+0x40>
		uart(__com, 1, 0x0D);
   1516c:	81 2f       	mov	r24, r17
   1516e:	61 e0       	ldi	r22, 0x01	; 1
   15170:	4d e0       	ldi	r20, 0x0D	; 13
   15172:	0e 94 5b a8 	call	0x150b6	; 0x150b6 <uart>
		uart(__com, 1, 0x0A);
   15176:	81 2f       	mov	r24, r17
   15178:	61 e0       	ldi	r22, 0x01	; 1
   1517a:	4a e0       	ldi	r20, 0x0A	; 10
   1517c:	0e 94 5b a8 	call	0x150b6	; 0x150b6 <uart>
   15180:	86 ea       	ldi	r24, 0xA6	; 166
   15182:	9e e0       	ldi	r25, 0x0E	; 14
   15184:	01 97       	sbiw	r24, 0x01	; 1
   15186:	f1 f7       	brne	.-4      	; 0x15184 <uart_printf+0x44>
	}
	_delay_ms(15);
}
   15188:	df 91       	pop	r29
   1518a:	cf 91       	pop	r28
   1518c:	1f 91       	pop	r17
   1518e:	0f 91       	pop	r16
   15190:	08 95       	ret

00015192 <Int2Str>:

void Int2Str(char* __string, unsigned long __value){
   15192:	6f 92       	push	r6
   15194:	7f 92       	push	r7
   15196:	8f 92       	push	r8
   15198:	9f 92       	push	r9
   1519a:	af 92       	push	r10
   1519c:	bf 92       	push	r11
   1519e:	cf 92       	push	r12
   151a0:	df 92       	push	r13
   151a2:	ef 92       	push	r14
   151a4:	ff 92       	push	r15
   151a6:	0f 93       	push	r16
   151a8:	1f 93       	push	r17
   151aa:	cf 93       	push	r28
   151ac:	df 93       	push	r29
   151ae:	ec 01       	movw	r28, r24
	char			__flag = 0, __i = 0, __count;
	unsigned long	__num, __devider = 1000000000;
	int				__tmp;

	if(__value == 0){
   151b0:	41 15       	cp	r20, r1
   151b2:	51 05       	cpc	r21, r1
   151b4:	61 05       	cpc	r22, r1
   151b6:	71 05       	cpc	r23, r1
   151b8:	21 f4       	brne	.+8      	; 0x151c2 <Int2Str+0x30>
		__string[0] = '0';
   151ba:	80 e3       	ldi	r24, 0x30	; 48
   151bc:	88 83       	st	Y, r24
		__string[1] = '\0';
   151be:	19 82       	std	Y+1, r1	; 0x01
   151c0:	48 c0       	rjmp	.+144    	; 0x15252 <Int2Str+0xc0>
		return;
   151c2:	4a 01       	movw	r8, r20
   151c4:	5b 01       	movw	r10, r22
   151c6:	c1 2c       	mov	r12, r1
   151c8:	ba ec       	ldi	r27, 0xCA	; 202
   151ca:	db 2e       	mov	r13, r27
   151cc:	ba e9       	ldi	r27, 0x9A	; 154
   151ce:	eb 2e       	mov	r14, r27
   151d0:	bb e3       	ldi	r27, 0x3B	; 59
   151d2:	fb 2e       	mov	r15, r27
   151d4:	10 e0       	ldi	r17, 0x00	; 0
   151d6:	00 e0       	ldi	r16, 0x00	; 0
   151d8:	77 24       	eor	r7, r7
			if(!__flag)
				__flag = 1;
		}
		else
			if(__flag)
				__string[__i++] = 0x30;
   151da:	a0 e3       	ldi	r26, 0x30	; 48
   151dc:	6a 2e       	mov	r6, r26
		return;
	}

	__num = __value;
	for(__count = 0; __count < 10; __count++){
		if(__num >= __devider){
   151de:	8c 14       	cp	r8, r12
   151e0:	9d 04       	cpc	r9, r13
   151e2:	ae 04       	cpc	r10, r14
   151e4:	bf 04       	cpc	r11, r15
   151e6:	d0 f0       	brcs	.+52     	; 0x1521c <Int2Str+0x8a>
			__tmp = (int)(__num / __devider);
   151e8:	c5 01       	movw	r24, r10
   151ea:	b4 01       	movw	r22, r8
   151ec:	a7 01       	movw	r20, r14
   151ee:	96 01       	movw	r18, r12
   151f0:	0e 94 2a aa 	call	0x15454	; 0x15454 <__udivmodsi4>
   151f4:	12 2f       	mov	r17, r18
			__num = __num % __devider;
   151f6:	c5 01       	movw	r24, r10
   151f8:	b4 01       	movw	r22, r8
   151fa:	a7 01       	movw	r20, r14
   151fc:	96 01       	movw	r18, r12
   151fe:	0e 94 2a aa 	call	0x15454	; 0x15454 <__udivmodsi4>
   15202:	ac 01       	movw	r20, r24
   15204:	cb 01       	movw	r24, r22
   15206:	da 01       	movw	r26, r20
   15208:	4c 01       	movw	r8, r24
   1520a:	5d 01       	movw	r10, r26
			__string[__i++] = __tmp + 0x30;
   1520c:	fe 01       	movw	r30, r28
   1520e:	e0 0f       	add	r30, r16
   15210:	f1 1d       	adc	r31, r1
   15212:	10 5d       	subi	r17, 0xD0	; 208
   15214:	10 83       	st	Z, r17
   15216:	0f 5f       	subi	r16, 0xFF	; 255
   15218:	11 e0       	ldi	r17, 0x01	; 1
   1521a:	07 c0       	rjmp	.+14     	; 0x1522a <Int2Str+0x98>
			if(!__flag)
				__flag = 1;
		}
		else
			if(__flag)
   1521c:	11 23       	and	r17, r17
   1521e:	29 f0       	breq	.+10     	; 0x1522a <Int2Str+0x98>
				__string[__i++] = 0x30;
   15220:	fe 01       	movw	r30, r28
   15222:	e0 0f       	add	r30, r16
   15224:	f1 1d       	adc	r31, r1
   15226:	60 82       	st	Z, r6
   15228:	0f 5f       	subi	r16, 0xFF	; 255
		__string[1] = '\0';
		return;
	}

	__num = __value;
	for(__count = 0; __count < 10; __count++){
   1522a:	73 94       	inc	r7
   1522c:	8a e0       	ldi	r24, 0x0A	; 10
   1522e:	78 16       	cp	r7, r24
   15230:	69 f0       	breq	.+26     	; 0x1524c <Int2Str+0xba>
				__flag = 1;
		}
		else
			if(__flag)
				__string[__i++] = 0x30;
		__devider = __devider / 10;
   15232:	c7 01       	movw	r24, r14
   15234:	b6 01       	movw	r22, r12
   15236:	2a e0       	ldi	r18, 0x0A	; 10
   15238:	30 e0       	ldi	r19, 0x00	; 0
   1523a:	40 e0       	ldi	r20, 0x00	; 0
   1523c:	50 e0       	ldi	r21, 0x00	; 0
   1523e:	0e 94 2a aa 	call	0x15454	; 0x15454 <__udivmodsi4>
   15242:	c9 01       	movw	r24, r18
   15244:	da 01       	movw	r26, r20
   15246:	6c 01       	movw	r12, r24
   15248:	7d 01       	movw	r14, r26
   1524a:	c9 cf       	rjmp	.-110    	; 0x151de <Int2Str+0x4c>
	}
	__string[__i] = '\0';
   1524c:	c0 0f       	add	r28, r16
   1524e:	d1 1d       	adc	r29, r1
   15250:	18 82       	st	Y, r1
}
   15252:	df 91       	pop	r29
   15254:	cf 91       	pop	r28
   15256:	1f 91       	pop	r17
   15258:	0f 91       	pop	r16
   1525a:	ff 90       	pop	r15
   1525c:	ef 90       	pop	r14
   1525e:	df 90       	pop	r13
   15260:	cf 90       	pop	r12
   15262:	bf 90       	pop	r11
   15264:	af 90       	pop	r10
   15266:	9f 90       	pop	r9
   15268:	8f 90       	pop	r8
   1526a:	7f 90       	pop	r7
   1526c:	6f 90       	pop	r6
   1526e:	08 95       	ret

00015270 <Str2Int>:

unsigned long Str2Int(char* __string){
   15270:	6f 92       	push	r6
   15272:	7f 92       	push	r7
   15274:	8f 92       	push	r8
   15276:	9f 92       	push	r9
   15278:	af 92       	push	r10
   1527a:	bf 92       	push	r11
   1527c:	cf 92       	push	r12
   1527e:	df 92       	push	r13
   15280:	ef 92       	push	r14
   15282:	ff 92       	push	r15
   15284:	0f 93       	push	r16
   15286:	1f 93       	push	r17
   15288:	cf 93       	push	r28
   1528a:	df 93       	push	r29
   1528c:	ec 01       	movw	r28, r24
	unsigned char	__i, __len;
	unsigned long	__multiplier = 1, __retval = 0;

	__len = strlen(__string);
   1528e:	dc 01       	movw	r26, r24
   15290:	0d 90       	ld	r0, X+
   15292:	00 20       	and	r0, r0
   15294:	e9 f7       	brne	.-6      	; 0x15290 <Str2Int+0x20>
   15296:	11 97       	sbiw	r26, 0x01	; 1
   15298:	7a 2e       	mov	r7, r26
   1529a:	78 1a       	sub	r7, r24

	if(__len > 0 && __len < 11){
   1529c:	87 2d       	mov	r24, r7
   1529e:	81 50       	subi	r24, 0x01	; 1
   152a0:	8a 30       	cpi	r24, 0x0A	; 10
   152a2:	08 f0       	brcs	.+2      	; 0x152a6 <Str2Int+0x36>
   152a4:	64 c0       	rjmp	.+200    	; 0x1536e <Str2Int+0xfe>
   152a6:	4e 01       	movw	r8, r28
   152a8:	fe 01       	movw	r30, r28
		__devider = __devider / 10;
	}
	__string[__i] = '\0';
}

unsigned long Str2Int(char* __string){
   152aa:	6c 2e       	mov	r6, r28
   152ac:	05 c0       	rjmp	.+10     	; 0x152b8 <Str2Int+0x48>

	__len = strlen(__string);

	if(__len > 0 && __len < 11){
		for(__i = 0; __i < __len; __i++)
			if(__string[__i] < 0x30 || __string[__i] > 0x39)
   152ae:	81 91       	ld	r24, Z+
   152b0:	80 53       	subi	r24, 0x30	; 48
   152b2:	8a 30       	cpi	r24, 0x0A	; 10
   152b4:	08 f0       	brcs	.+2      	; 0x152b8 <Str2Int+0x48>
   152b6:	5b c0       	rjmp	.+182    	; 0x1536e <Str2Int+0xfe>
	unsigned long	__multiplier = 1, __retval = 0;

	__len = strlen(__string);

	if(__len > 0 && __len < 11){
		for(__i = 0; __i < __len; __i++)
   152b8:	8e 2f       	mov	r24, r30
   152ba:	86 19       	sub	r24, r6
   152bc:	87 15       	cp	r24, r7
   152be:	b8 f3       	brcs	.-18     	; 0x152ae <Str2Int+0x3e>
			if(__string[__i] < 0x30 || __string[__i] > 0x39)
				return 0;
		if(__len == 10){
   152c0:	8a e0       	ldi	r24, 0x0A	; 10
   152c2:	78 16       	cp	r7, r24
   152c4:	f9 f4       	brne	.+62     	; 0x15304 <Str2Int+0x94>
			if(__string[0] < 0x30 || __string[0] > 0x32)
   152c6:	98 81       	ld	r25, Y
   152c8:	89 2f       	mov	r24, r25
   152ca:	80 53       	subi	r24, 0x30	; 48
   152cc:	83 30       	cpi	r24, 0x03	; 3
   152ce:	08 f0       	brcs	.+2      	; 0x152d2 <Str2Int+0x62>
   152d0:	4e c0       	rjmp	.+156    	; 0x1536e <Str2Int+0xfe>
				return 0;
			if(__string[0] == 0x32){
   152d2:	92 33       	cpi	r25, 0x32	; 50
   152d4:	b9 f4       	brne	.+46     	; 0x15304 <Str2Int+0x94>
   152d6:	fe 01       	movw	r30, r28
   152d8:	91 e0       	ldi	r25, 0x01	; 1
				for(__i = 1; __i < __len; __i++)
					if(__string[__i] < 0x30 || __string[__i] > 0x30)
   152da:	81 81       	ldd	r24, Z+1	; 0x01
   152dc:	80 33       	cpi	r24, 0x30	; 48
   152de:	09 f0       	breq	.+2      	; 0x152e2 <Str2Int+0x72>
   152e0:	46 c0       	rjmp	.+140    	; 0x1536e <Str2Int+0xfe>
				return 0;
		if(__len == 10){
			if(__string[0] < 0x30 || __string[0] > 0x32)
				return 0;
			if(__string[0] == 0x32){
				for(__i = 1; __i < __len; __i++)
   152e2:	9f 5f       	subi	r25, 0xFF	; 255
   152e4:	31 96       	adiw	r30, 0x01	; 1
   152e6:	9a 30       	cpi	r25, 0x0A	; 10
   152e8:	c1 f7       	brne	.-16     	; 0x152da <Str2Int+0x6a>
   152ea:	0c c0       	rjmp	.+24     	; 0x15304 <Str2Int+0x94>
					if(__string[__i] < 0x30 || __string[__i] > 0x30)
						return 0;
			}
		}
		for(__i = 0; __i < __len - 1; __i++)
			__multiplier *= 10;
   152ec:	c6 01       	movw	r24, r12
   152ee:	b5 01       	movw	r22, r10
   152f0:	2a e0       	ldi	r18, 0x0A	; 10
   152f2:	30 e0       	ldi	r19, 0x00	; 0
   152f4:	40 e0       	ldi	r20, 0x00	; 0
   152f6:	50 e0       	ldi	r21, 0x00	; 0
   152f8:	0e 94 cb a9 	call	0x15396	; 0x15396 <__mulsi3>
   152fc:	5b 01       	movw	r10, r22
   152fe:	6c 01       	movw	r12, r24
				for(__i = 1; __i < __len; __i++)
					if(__string[__i] < 0x30 || __string[__i] > 0x30)
						return 0;
			}
		}
		for(__i = 0; __i < __len - 1; __i++)
   15300:	1f 5f       	subi	r17, 0xFF	; 255
   15302:	09 c0       	rjmp	.+18     	; 0x15316 <Str2Int+0xa6>
   15304:	10 e0       	ldi	r17, 0x00	; 0
   15306:	01 e0       	ldi	r16, 0x01	; 1
   15308:	a0 2e       	mov	r10, r16
   1530a:	b1 2c       	mov	r11, r1
   1530c:	c1 2c       	mov	r12, r1
   1530e:	d1 2c       	mov	r13, r1
   15310:	c7 2d       	mov	r28, r7
   15312:	d0 e0       	ldi	r29, 0x00	; 0
   15314:	21 97       	sbiw	r28, 0x01	; 1
   15316:	81 2f       	mov	r24, r17
   15318:	90 e0       	ldi	r25, 0x00	; 0
   1531a:	8c 17       	cp	r24, r28
   1531c:	9d 07       	cpc	r25, r29
   1531e:	34 f3       	brlt	.-52     	; 0x152ec <Str2Int+0x7c>
   15320:	ee 24       	eor	r14, r14
   15322:	ff 24       	eor	r15, r15
   15324:	87 01       	movw	r16, r14
   15326:	1e c0       	rjmp	.+60     	; 0x15364 <Str2Int+0xf4>
			__multiplier *= 10;
		for(__i = 0; __i < __len; __i++, __multiplier /= 10)
			__retval += ((unsigned long)(__string[__i] - 0x30) * __multiplier);
   15328:	f4 01       	movw	r30, r8
   1532a:	21 91       	ld	r18, Z+
   1532c:	4f 01       	movw	r8, r30
   1532e:	30 e0       	ldi	r19, 0x00	; 0
   15330:	20 53       	subi	r18, 0x30	; 48
   15332:	30 40       	sbci	r19, 0x00	; 0
   15334:	44 27       	eor	r20, r20
   15336:	37 fd       	sbrc	r19, 7
   15338:	40 95       	com	r20
   1533a:	54 2f       	mov	r21, r20
   1533c:	c6 01       	movw	r24, r12
   1533e:	b5 01       	movw	r22, r10
   15340:	0e 94 cb a9 	call	0x15396	; 0x15396 <__mulsi3>
   15344:	e6 0e       	add	r14, r22
   15346:	f7 1e       	adc	r15, r23
   15348:	08 1f       	adc	r16, r24
   1534a:	19 1f       	adc	r17, r25
						return 0;
			}
		}
		for(__i = 0; __i < __len - 1; __i++)
			__multiplier *= 10;
		for(__i = 0; __i < __len; __i++, __multiplier /= 10)
   1534c:	c6 01       	movw	r24, r12
   1534e:	b5 01       	movw	r22, r10
   15350:	2a e0       	ldi	r18, 0x0A	; 10
   15352:	30 e0       	ldi	r19, 0x00	; 0
   15354:	40 e0       	ldi	r20, 0x00	; 0
   15356:	50 e0       	ldi	r21, 0x00	; 0
   15358:	0e 94 2a aa 	call	0x15454	; 0x15454 <__udivmodsi4>
   1535c:	c9 01       	movw	r24, r18
   1535e:	da 01       	movw	r26, r20
   15360:	5c 01       	movw	r10, r24
   15362:	6d 01       	movw	r12, r26
   15364:	88 2d       	mov	r24, r8
   15366:	86 19       	sub	r24, r6
   15368:	87 15       	cp	r24, r7
   1536a:	f0 f2       	brcs	.-68     	; 0x15328 <Str2Int+0xb8>
   1536c:	03 c0       	rjmp	.+6      	; 0x15374 <Str2Int+0x104>
   1536e:	ee 24       	eor	r14, r14
   15370:	ff 24       	eor	r15, r15
   15372:	87 01       	movw	r16, r14
			__retval += ((unsigned long)(__string[__i] - 0x30) * __multiplier);
	}
	return __retval;
}
   15374:	b7 01       	movw	r22, r14
   15376:	c8 01       	movw	r24, r16
   15378:	df 91       	pop	r29
   1537a:	cf 91       	pop	r28
   1537c:	1f 91       	pop	r17
   1537e:	0f 91       	pop	r16
   15380:	ff 90       	pop	r15
   15382:	ef 90       	pop	r14
   15384:	df 90       	pop	r13
   15386:	cf 90       	pop	r12
   15388:	bf 90       	pop	r11
   1538a:	af 90       	pop	r10
   1538c:	9f 90       	pop	r9
   1538e:	8f 90       	pop	r8
   15390:	7f 90       	pop	r7
   15392:	6f 90       	pop	r6
   15394:	08 95       	ret

00015396 <__mulsi3>:
   15396:	62 9f       	mul	r22, r18
   15398:	d0 01       	movw	r26, r0
   1539a:	73 9f       	mul	r23, r19
   1539c:	f0 01       	movw	r30, r0
   1539e:	82 9f       	mul	r24, r18
   153a0:	e0 0d       	add	r30, r0
   153a2:	f1 1d       	adc	r31, r1
   153a4:	64 9f       	mul	r22, r20
   153a6:	e0 0d       	add	r30, r0
   153a8:	f1 1d       	adc	r31, r1
   153aa:	92 9f       	mul	r25, r18
   153ac:	f0 0d       	add	r31, r0
   153ae:	83 9f       	mul	r24, r19
   153b0:	f0 0d       	add	r31, r0
   153b2:	74 9f       	mul	r23, r20
   153b4:	f0 0d       	add	r31, r0
   153b6:	65 9f       	mul	r22, r21
   153b8:	f0 0d       	add	r31, r0
   153ba:	99 27       	eor	r25, r25
   153bc:	72 9f       	mul	r23, r18
   153be:	b0 0d       	add	r27, r0
   153c0:	e1 1d       	adc	r30, r1
   153c2:	f9 1f       	adc	r31, r25
   153c4:	63 9f       	mul	r22, r19
   153c6:	b0 0d       	add	r27, r0
   153c8:	e1 1d       	adc	r30, r1
   153ca:	f9 1f       	adc	r31, r25
   153cc:	bd 01       	movw	r22, r26
   153ce:	cf 01       	movw	r24, r30
   153d0:	11 24       	eor	r1, r1
   153d2:	08 95       	ret

000153d4 <__udivmodqi4>:
   153d4:	99 1b       	sub	r25, r25
   153d6:	79 e0       	ldi	r23, 0x09	; 9
   153d8:	04 c0       	rjmp	.+8      	; 0x153e2 <__udivmodqi4_ep>

000153da <__udivmodqi4_loop>:
   153da:	99 1f       	adc	r25, r25
   153dc:	96 17       	cp	r25, r22
   153de:	08 f0       	brcs	.+2      	; 0x153e2 <__udivmodqi4_ep>
   153e0:	96 1b       	sub	r25, r22

000153e2 <__udivmodqi4_ep>:
   153e2:	88 1f       	adc	r24, r24
   153e4:	7a 95       	dec	r23
   153e6:	c9 f7       	brne	.-14     	; 0x153da <__udivmodqi4_loop>
   153e8:	80 95       	com	r24
   153ea:	08 95       	ret

000153ec <__divmodqi4>:
   153ec:	87 fb       	bst	r24, 7
   153ee:	08 2e       	mov	r0, r24
   153f0:	06 26       	eor	r0, r22
   153f2:	87 fd       	sbrc	r24, 7
   153f4:	81 95       	neg	r24
   153f6:	67 fd       	sbrc	r22, 7
   153f8:	61 95       	neg	r22
   153fa:	ec df       	rcall	.-40     	; 0x153d4 <__udivmodqi4>
   153fc:	0e f4       	brtc	.+2      	; 0x15400 <__divmodqi4_1>
   153fe:	91 95       	neg	r25

00015400 <__divmodqi4_1>:
   15400:	07 fc       	sbrc	r0, 7
   15402:	81 95       	neg	r24

00015404 <__divmodqi4_exit>:
   15404:	08 95       	ret

00015406 <__udivmodhi4>:
   15406:	aa 1b       	sub	r26, r26
   15408:	bb 1b       	sub	r27, r27
   1540a:	51 e1       	ldi	r21, 0x11	; 17
   1540c:	07 c0       	rjmp	.+14     	; 0x1541c <__udivmodhi4_ep>

0001540e <__udivmodhi4_loop>:
   1540e:	aa 1f       	adc	r26, r26
   15410:	bb 1f       	adc	r27, r27
   15412:	a6 17       	cp	r26, r22
   15414:	b7 07       	cpc	r27, r23
   15416:	10 f0       	brcs	.+4      	; 0x1541c <__udivmodhi4_ep>
   15418:	a6 1b       	sub	r26, r22
   1541a:	b7 0b       	sbc	r27, r23

0001541c <__udivmodhi4_ep>:
   1541c:	88 1f       	adc	r24, r24
   1541e:	99 1f       	adc	r25, r25
   15420:	5a 95       	dec	r21
   15422:	a9 f7       	brne	.-22     	; 0x1540e <__udivmodhi4_loop>
   15424:	80 95       	com	r24
   15426:	90 95       	com	r25
   15428:	bc 01       	movw	r22, r24
   1542a:	cd 01       	movw	r24, r26
   1542c:	08 95       	ret

0001542e <__divmodhi4>:
   1542e:	97 fb       	bst	r25, 7
   15430:	09 2e       	mov	r0, r25
   15432:	07 26       	eor	r0, r23
   15434:	0a d0       	rcall	.+20     	; 0x1544a <__divmodhi4_neg1>
   15436:	77 fd       	sbrc	r23, 7
   15438:	04 d0       	rcall	.+8      	; 0x15442 <__divmodhi4_neg2>
   1543a:	e5 df       	rcall	.-54     	; 0x15406 <__udivmodhi4>
   1543c:	06 d0       	rcall	.+12     	; 0x1544a <__divmodhi4_neg1>
   1543e:	00 20       	and	r0, r0
   15440:	1a f4       	brpl	.+6      	; 0x15448 <__divmodhi4_exit>

00015442 <__divmodhi4_neg2>:
   15442:	70 95       	com	r23
   15444:	61 95       	neg	r22
   15446:	7f 4f       	sbci	r23, 0xFF	; 255

00015448 <__divmodhi4_exit>:
   15448:	08 95       	ret

0001544a <__divmodhi4_neg1>:
   1544a:	f6 f7       	brtc	.-4      	; 0x15448 <__divmodhi4_exit>
   1544c:	90 95       	com	r25
   1544e:	81 95       	neg	r24
   15450:	9f 4f       	sbci	r25, 0xFF	; 255
   15452:	08 95       	ret

00015454 <__udivmodsi4>:
   15454:	a1 e2       	ldi	r26, 0x21	; 33
   15456:	1a 2e       	mov	r1, r26
   15458:	aa 1b       	sub	r26, r26
   1545a:	bb 1b       	sub	r27, r27
   1545c:	fd 01       	movw	r30, r26
   1545e:	0d c0       	rjmp	.+26     	; 0x1547a <__udivmodsi4_ep>

00015460 <__udivmodsi4_loop>:
   15460:	aa 1f       	adc	r26, r26
   15462:	bb 1f       	adc	r27, r27
   15464:	ee 1f       	adc	r30, r30
   15466:	ff 1f       	adc	r31, r31
   15468:	a2 17       	cp	r26, r18
   1546a:	b3 07       	cpc	r27, r19
   1546c:	e4 07       	cpc	r30, r20
   1546e:	f5 07       	cpc	r31, r21
   15470:	20 f0       	brcs	.+8      	; 0x1547a <__udivmodsi4_ep>
   15472:	a2 1b       	sub	r26, r18
   15474:	b3 0b       	sbc	r27, r19
   15476:	e4 0b       	sbc	r30, r20
   15478:	f5 0b       	sbc	r31, r21

0001547a <__udivmodsi4_ep>:
   1547a:	66 1f       	adc	r22, r22
   1547c:	77 1f       	adc	r23, r23
   1547e:	88 1f       	adc	r24, r24
   15480:	99 1f       	adc	r25, r25
   15482:	1a 94       	dec	r1
   15484:	69 f7       	brne	.-38     	; 0x15460 <__udivmodsi4_loop>
   15486:	60 95       	com	r22
   15488:	70 95       	com	r23
   1548a:	80 95       	com	r24
   1548c:	90 95       	com	r25
   1548e:	9b 01       	movw	r18, r22
   15490:	ac 01       	movw	r20, r24
   15492:	bd 01       	movw	r22, r26
   15494:	cf 01       	movw	r24, r30
   15496:	08 95       	ret

00015498 <atoi>:
   15498:	fc 01       	movw	r30, r24
   1549a:	88 27       	eor	r24, r24
   1549c:	99 27       	eor	r25, r25
   1549e:	e8 94       	clt
   154a0:	21 91       	ld	r18, Z+
   154a2:	20 32       	cpi	r18, 0x20	; 32
   154a4:	e9 f3       	breq	.-6      	; 0x154a0 <atoi+0x8>
   154a6:	29 30       	cpi	r18, 0x09	; 9
   154a8:	10 f0       	brcs	.+4      	; 0x154ae <atoi+0x16>
   154aa:	2e 30       	cpi	r18, 0x0E	; 14
   154ac:	c8 f3       	brcs	.-14     	; 0x154a0 <atoi+0x8>
   154ae:	2b 32       	cpi	r18, 0x2B	; 43
   154b0:	41 f0       	breq	.+16     	; 0x154c2 <atoi+0x2a>
   154b2:	2d 32       	cpi	r18, 0x2D	; 45
   154b4:	39 f4       	brne	.+14     	; 0x154c4 <atoi+0x2c>
   154b6:	68 94       	set
   154b8:	04 c0       	rjmp	.+8      	; 0x154c2 <atoi+0x2a>
   154ba:	0e 94 7a aa 	call	0x154f4	; 0x154f4 <__mulhi_const_10>
   154be:	82 0f       	add	r24, r18
   154c0:	91 1d       	adc	r25, r1
   154c2:	21 91       	ld	r18, Z+
   154c4:	20 53       	subi	r18, 0x30	; 48
   154c6:	2a 30       	cpi	r18, 0x0A	; 10
   154c8:	c0 f3       	brcs	.-16     	; 0x154ba <atoi+0x22>
   154ca:	1e f4       	brtc	.+6      	; 0x154d2 <atoi+0x3a>
   154cc:	90 95       	com	r25
   154ce:	81 95       	neg	r24
   154d0:	9f 4f       	sbci	r25, 0xFF	; 255
   154d2:	08 95       	ret

000154d4 <strcpy_P>:
   154d4:	fb 01       	movw	r30, r22
   154d6:	dc 01       	movw	r26, r24
   154d8:	05 90       	lpm	r0, Z+
   154da:	0d 92       	st	X+, r0
   154dc:	00 20       	and	r0, r0
   154de:	e1 f7       	brne	.-8      	; 0x154d8 <strcpy_P+0x4>
   154e0:	08 95       	ret

000154e2 <strcmp>:
   154e2:	fb 01       	movw	r30, r22
   154e4:	dc 01       	movw	r26, r24
   154e6:	8d 91       	ld	r24, X+
   154e8:	01 90       	ld	r0, Z+
   154ea:	80 19       	sub	r24, r0
   154ec:	01 10       	cpse	r0, r1
   154ee:	d9 f3       	breq	.-10     	; 0x154e6 <strcmp+0x4>
   154f0:	99 0b       	sbc	r25, r25
   154f2:	08 95       	ret

000154f4 <__mulhi_const_10>:
   154f4:	7a e0       	ldi	r23, 0x0A	; 10
   154f6:	97 9f       	mul	r25, r23
   154f8:	90 2d       	mov	r25, r0
   154fa:	87 9f       	mul	r24, r23
   154fc:	80 2d       	mov	r24, r0
   154fe:	91 0d       	add	r25, r1
   15500:	11 24       	eor	r1, r1
   15502:	08 95       	ret

00015504 <sprintf_P>:
   15504:	0f 93       	push	r16
   15506:	1f 93       	push	r17
   15508:	df 93       	push	r29
   1550a:	cf 93       	push	r28
   1550c:	cd b7       	in	r28, 0x3d	; 61
   1550e:	de b7       	in	r29, 0x3e	; 62
   15510:	2e 97       	sbiw	r28, 0x0e	; 14
   15512:	0f b6       	in	r0, 0x3f	; 63
   15514:	f8 94       	cli
   15516:	de bf       	out	0x3e, r29	; 62
   15518:	0f be       	out	0x3f, r0	; 63
   1551a:	cd bf       	out	0x3d, r28	; 61
   1551c:	0d 89       	ldd	r16, Y+21	; 0x15
   1551e:	1e 89       	ldd	r17, Y+22	; 0x16
   15520:	8e e0       	ldi	r24, 0x0E	; 14
   15522:	8c 83       	std	Y+4, r24	; 0x04
   15524:	1a 83       	std	Y+2, r17	; 0x02
   15526:	09 83       	std	Y+1, r16	; 0x01
   15528:	8f ef       	ldi	r24, 0xFF	; 255
   1552a:	9f e7       	ldi	r25, 0x7F	; 127
   1552c:	9e 83       	std	Y+6, r25	; 0x06
   1552e:	8d 83       	std	Y+5, r24	; 0x05
   15530:	9e 01       	movw	r18, r28
   15532:	27 5e       	subi	r18, 0xE7	; 231
   15534:	3f 4f       	sbci	r19, 0xFF	; 255
   15536:	ce 01       	movw	r24, r28
   15538:	01 96       	adiw	r24, 0x01	; 1
   1553a:	6f 89       	ldd	r22, Y+23	; 0x17
   1553c:	78 8d       	ldd	r23, Y+24	; 0x18
   1553e:	a9 01       	movw	r20, r18
   15540:	0e 94 b3 aa 	call	0x15566	; 0x15566 <vfprintf>
   15544:	2f 81       	ldd	r18, Y+7	; 0x07
   15546:	38 85       	ldd	r19, Y+8	; 0x08
   15548:	02 0f       	add	r16, r18
   1554a:	13 1f       	adc	r17, r19
   1554c:	f8 01       	movw	r30, r16
   1554e:	10 82       	st	Z, r1
   15550:	2e 96       	adiw	r28, 0x0e	; 14
   15552:	0f b6       	in	r0, 0x3f	; 63
   15554:	f8 94       	cli
   15556:	de bf       	out	0x3e, r29	; 62
   15558:	0f be       	out	0x3f, r0	; 63
   1555a:	cd bf       	out	0x3d, r28	; 61
   1555c:	cf 91       	pop	r28
   1555e:	df 91       	pop	r29
   15560:	1f 91       	pop	r17
   15562:	0f 91       	pop	r16
   15564:	08 95       	ret

00015566 <vfprintf>:
   15566:	2f 92       	push	r2
   15568:	3f 92       	push	r3
   1556a:	4f 92       	push	r4
   1556c:	5f 92       	push	r5
   1556e:	6f 92       	push	r6
   15570:	7f 92       	push	r7
   15572:	8f 92       	push	r8
   15574:	9f 92       	push	r9
   15576:	af 92       	push	r10
   15578:	bf 92       	push	r11
   1557a:	cf 92       	push	r12
   1557c:	df 92       	push	r13
   1557e:	ef 92       	push	r14
   15580:	ff 92       	push	r15
   15582:	0f 93       	push	r16
   15584:	1f 93       	push	r17
   15586:	df 93       	push	r29
   15588:	cf 93       	push	r28
   1558a:	cd b7       	in	r28, 0x3d	; 61
   1558c:	de b7       	in	r29, 0x3e	; 62
   1558e:	2b 97       	sbiw	r28, 0x0b	; 11
   15590:	0f b6       	in	r0, 0x3f	; 63
   15592:	f8 94       	cli
   15594:	de bf       	out	0x3e, r29	; 62
   15596:	0f be       	out	0x3f, r0	; 63
   15598:	cd bf       	out	0x3d, r28	; 61
   1559a:	3c 01       	movw	r6, r24
   1559c:	2b 01       	movw	r4, r22
   1559e:	5a 01       	movw	r10, r20
   155a0:	fc 01       	movw	r30, r24
   155a2:	17 82       	std	Z+7, r1	; 0x07
   155a4:	16 82       	std	Z+6, r1	; 0x06
   155a6:	83 81       	ldd	r24, Z+3	; 0x03
   155a8:	81 fd       	sbrc	r24, 1
   155aa:	03 c0       	rjmp	.+6      	; 0x155b2 <vfprintf+0x4c>
   155ac:	6f ef       	ldi	r22, 0xFF	; 255
   155ae:	7f ef       	ldi	r23, 0xFF	; 255
   155b0:	c6 c1       	rjmp	.+908    	; 0x1593e <vfprintf+0x3d8>
   155b2:	9a e0       	ldi	r25, 0x0A	; 10
   155b4:	89 2e       	mov	r8, r25
   155b6:	1e 01       	movw	r2, r28
   155b8:	08 94       	sec
   155ba:	21 1c       	adc	r2, r1
   155bc:	31 1c       	adc	r3, r1
   155be:	f3 01       	movw	r30, r6
   155c0:	23 81       	ldd	r18, Z+3	; 0x03
   155c2:	f2 01       	movw	r30, r4
   155c4:	23 fd       	sbrc	r18, 3
   155c6:	85 91       	lpm	r24, Z+
   155c8:	23 ff       	sbrs	r18, 3
   155ca:	81 91       	ld	r24, Z+
   155cc:	2f 01       	movw	r4, r30
   155ce:	88 23       	and	r24, r24
   155d0:	09 f4       	brne	.+2      	; 0x155d4 <vfprintf+0x6e>
   155d2:	b2 c1       	rjmp	.+868    	; 0x15938 <vfprintf+0x3d2>
   155d4:	85 32       	cpi	r24, 0x25	; 37
   155d6:	39 f4       	brne	.+14     	; 0x155e6 <vfprintf+0x80>
   155d8:	23 fd       	sbrc	r18, 3
   155da:	85 91       	lpm	r24, Z+
   155dc:	23 ff       	sbrs	r18, 3
   155de:	81 91       	ld	r24, Z+
   155e0:	2f 01       	movw	r4, r30
   155e2:	85 32       	cpi	r24, 0x25	; 37
   155e4:	29 f4       	brne	.+10     	; 0x155f0 <vfprintf+0x8a>
   155e6:	90 e0       	ldi	r25, 0x00	; 0
   155e8:	b3 01       	movw	r22, r6
   155ea:	0e 94 fe ac 	call	0x159fc	; 0x159fc <fputc>
   155ee:	e7 cf       	rjmp	.-50     	; 0x155be <vfprintf+0x58>
   155f0:	98 2f       	mov	r25, r24
   155f2:	ff 24       	eor	r15, r15
   155f4:	ee 24       	eor	r14, r14
   155f6:	99 24       	eor	r9, r9
   155f8:	ff e1       	ldi	r31, 0x1F	; 31
   155fa:	ff 15       	cp	r31, r15
   155fc:	d0 f0       	brcs	.+52     	; 0x15632 <vfprintf+0xcc>
   155fe:	9b 32       	cpi	r25, 0x2B	; 43
   15600:	69 f0       	breq	.+26     	; 0x1561c <vfprintf+0xb6>
   15602:	9c 32       	cpi	r25, 0x2C	; 44
   15604:	28 f4       	brcc	.+10     	; 0x15610 <vfprintf+0xaa>
   15606:	90 32       	cpi	r25, 0x20	; 32
   15608:	59 f0       	breq	.+22     	; 0x15620 <vfprintf+0xba>
   1560a:	93 32       	cpi	r25, 0x23	; 35
   1560c:	91 f4       	brne	.+36     	; 0x15632 <vfprintf+0xcc>
   1560e:	0e c0       	rjmp	.+28     	; 0x1562c <vfprintf+0xc6>
   15610:	9d 32       	cpi	r25, 0x2D	; 45
   15612:	49 f0       	breq	.+18     	; 0x15626 <vfprintf+0xc0>
   15614:	90 33       	cpi	r25, 0x30	; 48
   15616:	69 f4       	brne	.+26     	; 0x15632 <vfprintf+0xcc>
   15618:	41 e0       	ldi	r20, 0x01	; 1
   1561a:	24 c0       	rjmp	.+72     	; 0x15664 <vfprintf+0xfe>
   1561c:	52 e0       	ldi	r21, 0x02	; 2
   1561e:	f5 2a       	or	r15, r21
   15620:	84 e0       	ldi	r24, 0x04	; 4
   15622:	f8 2a       	or	r15, r24
   15624:	28 c0       	rjmp	.+80     	; 0x15676 <vfprintf+0x110>
   15626:	98 e0       	ldi	r25, 0x08	; 8
   15628:	f9 2a       	or	r15, r25
   1562a:	25 c0       	rjmp	.+74     	; 0x15676 <vfprintf+0x110>
   1562c:	e0 e1       	ldi	r30, 0x10	; 16
   1562e:	fe 2a       	or	r15, r30
   15630:	22 c0       	rjmp	.+68     	; 0x15676 <vfprintf+0x110>
   15632:	f7 fc       	sbrc	r15, 7
   15634:	29 c0       	rjmp	.+82     	; 0x15688 <vfprintf+0x122>
   15636:	89 2f       	mov	r24, r25
   15638:	80 53       	subi	r24, 0x30	; 48
   1563a:	8a 30       	cpi	r24, 0x0A	; 10
   1563c:	70 f4       	brcc	.+28     	; 0x1565a <vfprintf+0xf4>
   1563e:	f6 fe       	sbrs	r15, 6
   15640:	05 c0       	rjmp	.+10     	; 0x1564c <vfprintf+0xe6>
   15642:	98 9c       	mul	r9, r8
   15644:	90 2c       	mov	r9, r0
   15646:	11 24       	eor	r1, r1
   15648:	98 0e       	add	r9, r24
   1564a:	15 c0       	rjmp	.+42     	; 0x15676 <vfprintf+0x110>
   1564c:	e8 9c       	mul	r14, r8
   1564e:	e0 2c       	mov	r14, r0
   15650:	11 24       	eor	r1, r1
   15652:	e8 0e       	add	r14, r24
   15654:	f0 e2       	ldi	r31, 0x20	; 32
   15656:	ff 2a       	or	r15, r31
   15658:	0e c0       	rjmp	.+28     	; 0x15676 <vfprintf+0x110>
   1565a:	9e 32       	cpi	r25, 0x2E	; 46
   1565c:	29 f4       	brne	.+10     	; 0x15668 <vfprintf+0x102>
   1565e:	f6 fc       	sbrc	r15, 6
   15660:	6b c1       	rjmp	.+726    	; 0x15938 <vfprintf+0x3d2>
   15662:	40 e4       	ldi	r20, 0x40	; 64
   15664:	f4 2a       	or	r15, r20
   15666:	07 c0       	rjmp	.+14     	; 0x15676 <vfprintf+0x110>
   15668:	9c 36       	cpi	r25, 0x6C	; 108
   1566a:	19 f4       	brne	.+6      	; 0x15672 <vfprintf+0x10c>
   1566c:	50 e8       	ldi	r21, 0x80	; 128
   1566e:	f5 2a       	or	r15, r21
   15670:	02 c0       	rjmp	.+4      	; 0x15676 <vfprintf+0x110>
   15672:	98 36       	cpi	r25, 0x68	; 104
   15674:	49 f4       	brne	.+18     	; 0x15688 <vfprintf+0x122>
   15676:	f2 01       	movw	r30, r4
   15678:	23 fd       	sbrc	r18, 3
   1567a:	95 91       	lpm	r25, Z+
   1567c:	23 ff       	sbrs	r18, 3
   1567e:	91 91       	ld	r25, Z+
   15680:	2f 01       	movw	r4, r30
   15682:	99 23       	and	r25, r25
   15684:	09 f0       	breq	.+2      	; 0x15688 <vfprintf+0x122>
   15686:	b8 cf       	rjmp	.-144    	; 0x155f8 <vfprintf+0x92>
   15688:	89 2f       	mov	r24, r25
   1568a:	85 54       	subi	r24, 0x45	; 69
   1568c:	83 30       	cpi	r24, 0x03	; 3
   1568e:	18 f0       	brcs	.+6      	; 0x15696 <vfprintf+0x130>
   15690:	80 52       	subi	r24, 0x20	; 32
   15692:	83 30       	cpi	r24, 0x03	; 3
   15694:	38 f4       	brcc	.+14     	; 0x156a4 <vfprintf+0x13e>
   15696:	44 e0       	ldi	r20, 0x04	; 4
   15698:	50 e0       	ldi	r21, 0x00	; 0
   1569a:	a4 0e       	add	r10, r20
   1569c:	b5 1e       	adc	r11, r21
   1569e:	5f e3       	ldi	r21, 0x3F	; 63
   156a0:	59 83       	std	Y+1, r21	; 0x01
   156a2:	0f c0       	rjmp	.+30     	; 0x156c2 <vfprintf+0x15c>
   156a4:	93 36       	cpi	r25, 0x63	; 99
   156a6:	31 f0       	breq	.+12     	; 0x156b4 <vfprintf+0x14e>
   156a8:	93 37       	cpi	r25, 0x73	; 115
   156aa:	79 f0       	breq	.+30     	; 0x156ca <vfprintf+0x164>
   156ac:	93 35       	cpi	r25, 0x53	; 83
   156ae:	09 f0       	breq	.+2      	; 0x156b2 <vfprintf+0x14c>
   156b0:	56 c0       	rjmp	.+172    	; 0x1575e <vfprintf+0x1f8>
   156b2:	20 c0       	rjmp	.+64     	; 0x156f4 <vfprintf+0x18e>
   156b4:	f5 01       	movw	r30, r10
   156b6:	80 81       	ld	r24, Z
   156b8:	89 83       	std	Y+1, r24	; 0x01
   156ba:	42 e0       	ldi	r20, 0x02	; 2
   156bc:	50 e0       	ldi	r21, 0x00	; 0
   156be:	a4 0e       	add	r10, r20
   156c0:	b5 1e       	adc	r11, r21
   156c2:	61 01       	movw	r12, r2
   156c4:	01 e0       	ldi	r16, 0x01	; 1
   156c6:	10 e0       	ldi	r17, 0x00	; 0
   156c8:	12 c0       	rjmp	.+36     	; 0x156ee <vfprintf+0x188>
   156ca:	f5 01       	movw	r30, r10
   156cc:	c0 80       	ld	r12, Z
   156ce:	d1 80       	ldd	r13, Z+1	; 0x01
   156d0:	f6 fc       	sbrc	r15, 6
   156d2:	03 c0       	rjmp	.+6      	; 0x156da <vfprintf+0x174>
   156d4:	6f ef       	ldi	r22, 0xFF	; 255
   156d6:	7f ef       	ldi	r23, 0xFF	; 255
   156d8:	02 c0       	rjmp	.+4      	; 0x156de <vfprintf+0x178>
   156da:	69 2d       	mov	r22, r9
   156dc:	70 e0       	ldi	r23, 0x00	; 0
   156de:	42 e0       	ldi	r20, 0x02	; 2
   156e0:	50 e0       	ldi	r21, 0x00	; 0
   156e2:	a4 0e       	add	r10, r20
   156e4:	b5 1e       	adc	r11, r21
   156e6:	c6 01       	movw	r24, r12
   156e8:	0e 94 f3 ac 	call	0x159e6	; 0x159e6 <strnlen>
   156ec:	8c 01       	movw	r16, r24
   156ee:	5f e7       	ldi	r21, 0x7F	; 127
   156f0:	f5 22       	and	r15, r21
   156f2:	14 c0       	rjmp	.+40     	; 0x1571c <vfprintf+0x1b6>
   156f4:	f5 01       	movw	r30, r10
   156f6:	c0 80       	ld	r12, Z
   156f8:	d1 80       	ldd	r13, Z+1	; 0x01
   156fa:	f6 fc       	sbrc	r15, 6
   156fc:	03 c0       	rjmp	.+6      	; 0x15704 <vfprintf+0x19e>
   156fe:	6f ef       	ldi	r22, 0xFF	; 255
   15700:	7f ef       	ldi	r23, 0xFF	; 255
   15702:	02 c0       	rjmp	.+4      	; 0x15708 <vfprintf+0x1a2>
   15704:	69 2d       	mov	r22, r9
   15706:	70 e0       	ldi	r23, 0x00	; 0
   15708:	42 e0       	ldi	r20, 0x02	; 2
   1570a:	50 e0       	ldi	r21, 0x00	; 0
   1570c:	a4 0e       	add	r10, r20
   1570e:	b5 1e       	adc	r11, r21
   15710:	c6 01       	movw	r24, r12
   15712:	0e 94 e8 ac 	call	0x159d0	; 0x159d0 <strnlen_P>
   15716:	8c 01       	movw	r16, r24
   15718:	50 e8       	ldi	r21, 0x80	; 128
   1571a:	f5 2a       	or	r15, r21
   1571c:	f3 fe       	sbrs	r15, 3
   1571e:	07 c0       	rjmp	.+14     	; 0x1572e <vfprintf+0x1c8>
   15720:	1a c0       	rjmp	.+52     	; 0x15756 <vfprintf+0x1f0>
   15722:	80 e2       	ldi	r24, 0x20	; 32
   15724:	90 e0       	ldi	r25, 0x00	; 0
   15726:	b3 01       	movw	r22, r6
   15728:	0e 94 fe ac 	call	0x159fc	; 0x159fc <fputc>
   1572c:	ea 94       	dec	r14
   1572e:	8e 2d       	mov	r24, r14
   15730:	90 e0       	ldi	r25, 0x00	; 0
   15732:	08 17       	cp	r16, r24
   15734:	19 07       	cpc	r17, r25
   15736:	a8 f3       	brcs	.-22     	; 0x15722 <vfprintf+0x1bc>
   15738:	0e c0       	rjmp	.+28     	; 0x15756 <vfprintf+0x1f0>
   1573a:	f6 01       	movw	r30, r12
   1573c:	f7 fc       	sbrc	r15, 7
   1573e:	85 91       	lpm	r24, Z+
   15740:	f7 fe       	sbrs	r15, 7
   15742:	81 91       	ld	r24, Z+
   15744:	6f 01       	movw	r12, r30
   15746:	90 e0       	ldi	r25, 0x00	; 0
   15748:	b3 01       	movw	r22, r6
   1574a:	0e 94 fe ac 	call	0x159fc	; 0x159fc <fputc>
   1574e:	e1 10       	cpse	r14, r1
   15750:	ea 94       	dec	r14
   15752:	01 50       	subi	r16, 0x01	; 1
   15754:	10 40       	sbci	r17, 0x00	; 0
   15756:	01 15       	cp	r16, r1
   15758:	11 05       	cpc	r17, r1
   1575a:	79 f7       	brne	.-34     	; 0x1573a <vfprintf+0x1d4>
   1575c:	ea c0       	rjmp	.+468    	; 0x15932 <vfprintf+0x3cc>
   1575e:	94 36       	cpi	r25, 0x64	; 100
   15760:	11 f0       	breq	.+4      	; 0x15766 <vfprintf+0x200>
   15762:	99 36       	cpi	r25, 0x69	; 105
   15764:	69 f5       	brne	.+90     	; 0x157c0 <vfprintf+0x25a>
   15766:	f7 fe       	sbrs	r15, 7
   15768:	08 c0       	rjmp	.+16     	; 0x1577a <vfprintf+0x214>
   1576a:	f5 01       	movw	r30, r10
   1576c:	20 81       	ld	r18, Z
   1576e:	31 81       	ldd	r19, Z+1	; 0x01
   15770:	42 81       	ldd	r20, Z+2	; 0x02
   15772:	53 81       	ldd	r21, Z+3	; 0x03
   15774:	84 e0       	ldi	r24, 0x04	; 4
   15776:	90 e0       	ldi	r25, 0x00	; 0
   15778:	0a c0       	rjmp	.+20     	; 0x1578e <vfprintf+0x228>
   1577a:	f5 01       	movw	r30, r10
   1577c:	80 81       	ld	r24, Z
   1577e:	91 81       	ldd	r25, Z+1	; 0x01
   15780:	9c 01       	movw	r18, r24
   15782:	44 27       	eor	r20, r20
   15784:	37 fd       	sbrc	r19, 7
   15786:	40 95       	com	r20
   15788:	54 2f       	mov	r21, r20
   1578a:	82 e0       	ldi	r24, 0x02	; 2
   1578c:	90 e0       	ldi	r25, 0x00	; 0
   1578e:	a8 0e       	add	r10, r24
   15790:	b9 1e       	adc	r11, r25
   15792:	9f e6       	ldi	r25, 0x6F	; 111
   15794:	f9 22       	and	r15, r25
   15796:	57 ff       	sbrs	r21, 7
   15798:	09 c0       	rjmp	.+18     	; 0x157ac <vfprintf+0x246>
   1579a:	50 95       	com	r21
   1579c:	40 95       	com	r20
   1579e:	30 95       	com	r19
   157a0:	21 95       	neg	r18
   157a2:	3f 4f       	sbci	r19, 0xFF	; 255
   157a4:	4f 4f       	sbci	r20, 0xFF	; 255
   157a6:	5f 4f       	sbci	r21, 0xFF	; 255
   157a8:	e0 e8       	ldi	r30, 0x80	; 128
   157aa:	fe 2a       	or	r15, r30
   157ac:	ca 01       	movw	r24, r20
   157ae:	b9 01       	movw	r22, r18
   157b0:	a1 01       	movw	r20, r2
   157b2:	2a e0       	ldi	r18, 0x0A	; 10
   157b4:	30 e0       	ldi	r19, 0x00	; 0
   157b6:	0e 94 2a ad 	call	0x15a54	; 0x15a54 <__ultoa_invert>
   157ba:	d8 2e       	mov	r13, r24
   157bc:	d2 18       	sub	r13, r2
   157be:	40 c0       	rjmp	.+128    	; 0x15840 <vfprintf+0x2da>
   157c0:	95 37       	cpi	r25, 0x75	; 117
   157c2:	29 f4       	brne	.+10     	; 0x157ce <vfprintf+0x268>
   157c4:	1f 2d       	mov	r17, r15
   157c6:	1f 7e       	andi	r17, 0xEF	; 239
   157c8:	2a e0       	ldi	r18, 0x0A	; 10
   157ca:	30 e0       	ldi	r19, 0x00	; 0
   157cc:	1d c0       	rjmp	.+58     	; 0x15808 <vfprintf+0x2a2>
   157ce:	1f 2d       	mov	r17, r15
   157d0:	19 7f       	andi	r17, 0xF9	; 249
   157d2:	9f 36       	cpi	r25, 0x6F	; 111
   157d4:	61 f0       	breq	.+24     	; 0x157ee <vfprintf+0x288>
   157d6:	90 37       	cpi	r25, 0x70	; 112
   157d8:	20 f4       	brcc	.+8      	; 0x157e2 <vfprintf+0x27c>
   157da:	98 35       	cpi	r25, 0x58	; 88
   157dc:	09 f0       	breq	.+2      	; 0x157e0 <vfprintf+0x27a>
   157de:	ac c0       	rjmp	.+344    	; 0x15938 <vfprintf+0x3d2>
   157e0:	0f c0       	rjmp	.+30     	; 0x15800 <vfprintf+0x29a>
   157e2:	90 37       	cpi	r25, 0x70	; 112
   157e4:	39 f0       	breq	.+14     	; 0x157f4 <vfprintf+0x28e>
   157e6:	98 37       	cpi	r25, 0x78	; 120
   157e8:	09 f0       	breq	.+2      	; 0x157ec <vfprintf+0x286>
   157ea:	a6 c0       	rjmp	.+332    	; 0x15938 <vfprintf+0x3d2>
   157ec:	04 c0       	rjmp	.+8      	; 0x157f6 <vfprintf+0x290>
   157ee:	28 e0       	ldi	r18, 0x08	; 8
   157f0:	30 e0       	ldi	r19, 0x00	; 0
   157f2:	0a c0       	rjmp	.+20     	; 0x15808 <vfprintf+0x2a2>
   157f4:	10 61       	ori	r17, 0x10	; 16
   157f6:	14 fd       	sbrc	r17, 4
   157f8:	14 60       	ori	r17, 0x04	; 4
   157fa:	20 e1       	ldi	r18, 0x10	; 16
   157fc:	30 e0       	ldi	r19, 0x00	; 0
   157fe:	04 c0       	rjmp	.+8      	; 0x15808 <vfprintf+0x2a2>
   15800:	14 fd       	sbrc	r17, 4
   15802:	16 60       	ori	r17, 0x06	; 6
   15804:	20 e1       	ldi	r18, 0x10	; 16
   15806:	32 e0       	ldi	r19, 0x02	; 2
   15808:	17 ff       	sbrs	r17, 7
   1580a:	08 c0       	rjmp	.+16     	; 0x1581c <vfprintf+0x2b6>
   1580c:	f5 01       	movw	r30, r10
   1580e:	60 81       	ld	r22, Z
   15810:	71 81       	ldd	r23, Z+1	; 0x01
   15812:	82 81       	ldd	r24, Z+2	; 0x02
   15814:	93 81       	ldd	r25, Z+3	; 0x03
   15816:	44 e0       	ldi	r20, 0x04	; 4
   15818:	50 e0       	ldi	r21, 0x00	; 0
   1581a:	08 c0       	rjmp	.+16     	; 0x1582c <vfprintf+0x2c6>
   1581c:	f5 01       	movw	r30, r10
   1581e:	80 81       	ld	r24, Z
   15820:	91 81       	ldd	r25, Z+1	; 0x01
   15822:	bc 01       	movw	r22, r24
   15824:	80 e0       	ldi	r24, 0x00	; 0
   15826:	90 e0       	ldi	r25, 0x00	; 0
   15828:	42 e0       	ldi	r20, 0x02	; 2
   1582a:	50 e0       	ldi	r21, 0x00	; 0
   1582c:	a4 0e       	add	r10, r20
   1582e:	b5 1e       	adc	r11, r21
   15830:	a1 01       	movw	r20, r2
   15832:	0e 94 2a ad 	call	0x15a54	; 0x15a54 <__ultoa_invert>
   15836:	d8 2e       	mov	r13, r24
   15838:	d2 18       	sub	r13, r2
   1583a:	8f e7       	ldi	r24, 0x7F	; 127
   1583c:	f8 2e       	mov	r15, r24
   1583e:	f1 22       	and	r15, r17
   15840:	f6 fe       	sbrs	r15, 6
   15842:	0b c0       	rjmp	.+22     	; 0x1585a <vfprintf+0x2f4>
   15844:	5e ef       	ldi	r21, 0xFE	; 254
   15846:	f5 22       	and	r15, r21
   15848:	d9 14       	cp	r13, r9
   1584a:	38 f4       	brcc	.+14     	; 0x1585a <vfprintf+0x2f4>
   1584c:	f4 fe       	sbrs	r15, 4
   1584e:	07 c0       	rjmp	.+14     	; 0x1585e <vfprintf+0x2f8>
   15850:	f2 fc       	sbrc	r15, 2
   15852:	05 c0       	rjmp	.+10     	; 0x1585e <vfprintf+0x2f8>
   15854:	8f ee       	ldi	r24, 0xEF	; 239
   15856:	f8 22       	and	r15, r24
   15858:	02 c0       	rjmp	.+4      	; 0x1585e <vfprintf+0x2f8>
   1585a:	1d 2d       	mov	r17, r13
   1585c:	01 c0       	rjmp	.+2      	; 0x15860 <vfprintf+0x2fa>
   1585e:	19 2d       	mov	r17, r9
   15860:	f4 fe       	sbrs	r15, 4
   15862:	0d c0       	rjmp	.+26     	; 0x1587e <vfprintf+0x318>
   15864:	fe 01       	movw	r30, r28
   15866:	ed 0d       	add	r30, r13
   15868:	f1 1d       	adc	r31, r1
   1586a:	80 81       	ld	r24, Z
   1586c:	80 33       	cpi	r24, 0x30	; 48
   1586e:	19 f4       	brne	.+6      	; 0x15876 <vfprintf+0x310>
   15870:	99 ee       	ldi	r25, 0xE9	; 233
   15872:	f9 22       	and	r15, r25
   15874:	08 c0       	rjmp	.+16     	; 0x15886 <vfprintf+0x320>
   15876:	1f 5f       	subi	r17, 0xFF	; 255
   15878:	f2 fe       	sbrs	r15, 2
   1587a:	05 c0       	rjmp	.+10     	; 0x15886 <vfprintf+0x320>
   1587c:	03 c0       	rjmp	.+6      	; 0x15884 <vfprintf+0x31e>
   1587e:	8f 2d       	mov	r24, r15
   15880:	86 78       	andi	r24, 0x86	; 134
   15882:	09 f0       	breq	.+2      	; 0x15886 <vfprintf+0x320>
   15884:	1f 5f       	subi	r17, 0xFF	; 255
   15886:	0f 2d       	mov	r16, r15
   15888:	f3 fc       	sbrc	r15, 3
   1588a:	14 c0       	rjmp	.+40     	; 0x158b4 <vfprintf+0x34e>
   1588c:	f0 fe       	sbrs	r15, 0
   1588e:	0f c0       	rjmp	.+30     	; 0x158ae <vfprintf+0x348>
   15890:	1e 15       	cp	r17, r14
   15892:	10 f0       	brcs	.+4      	; 0x15898 <vfprintf+0x332>
   15894:	9d 2c       	mov	r9, r13
   15896:	0b c0       	rjmp	.+22     	; 0x158ae <vfprintf+0x348>
   15898:	9d 2c       	mov	r9, r13
   1589a:	9e 0c       	add	r9, r14
   1589c:	91 1a       	sub	r9, r17
   1589e:	1e 2d       	mov	r17, r14
   158a0:	06 c0       	rjmp	.+12     	; 0x158ae <vfprintf+0x348>
   158a2:	80 e2       	ldi	r24, 0x20	; 32
   158a4:	90 e0       	ldi	r25, 0x00	; 0
   158a6:	b3 01       	movw	r22, r6
   158a8:	0e 94 fe ac 	call	0x159fc	; 0x159fc <fputc>
   158ac:	1f 5f       	subi	r17, 0xFF	; 255
   158ae:	1e 15       	cp	r17, r14
   158b0:	c0 f3       	brcs	.-16     	; 0x158a2 <vfprintf+0x33c>
   158b2:	04 c0       	rjmp	.+8      	; 0x158bc <vfprintf+0x356>
   158b4:	1e 15       	cp	r17, r14
   158b6:	10 f4       	brcc	.+4      	; 0x158bc <vfprintf+0x356>
   158b8:	e1 1a       	sub	r14, r17
   158ba:	01 c0       	rjmp	.+2      	; 0x158be <vfprintf+0x358>
   158bc:	ee 24       	eor	r14, r14
   158be:	04 ff       	sbrs	r16, 4
   158c0:	0f c0       	rjmp	.+30     	; 0x158e0 <vfprintf+0x37a>
   158c2:	80 e3       	ldi	r24, 0x30	; 48
   158c4:	90 e0       	ldi	r25, 0x00	; 0
   158c6:	b3 01       	movw	r22, r6
   158c8:	0e 94 fe ac 	call	0x159fc	; 0x159fc <fputc>
   158cc:	02 ff       	sbrs	r16, 2
   158ce:	1d c0       	rjmp	.+58     	; 0x1590a <vfprintf+0x3a4>
   158d0:	01 fd       	sbrc	r16, 1
   158d2:	03 c0       	rjmp	.+6      	; 0x158da <vfprintf+0x374>
   158d4:	88 e7       	ldi	r24, 0x78	; 120
   158d6:	90 e0       	ldi	r25, 0x00	; 0
   158d8:	0e c0       	rjmp	.+28     	; 0x158f6 <vfprintf+0x390>
   158da:	88 e5       	ldi	r24, 0x58	; 88
   158dc:	90 e0       	ldi	r25, 0x00	; 0
   158de:	0b c0       	rjmp	.+22     	; 0x158f6 <vfprintf+0x390>
   158e0:	80 2f       	mov	r24, r16
   158e2:	86 78       	andi	r24, 0x86	; 134
   158e4:	91 f0       	breq	.+36     	; 0x1590a <vfprintf+0x3a4>
   158e6:	01 ff       	sbrs	r16, 1
   158e8:	02 c0       	rjmp	.+4      	; 0x158ee <vfprintf+0x388>
   158ea:	8b e2       	ldi	r24, 0x2B	; 43
   158ec:	01 c0       	rjmp	.+2      	; 0x158f0 <vfprintf+0x38a>
   158ee:	80 e2       	ldi	r24, 0x20	; 32
   158f0:	f7 fc       	sbrc	r15, 7
   158f2:	8d e2       	ldi	r24, 0x2D	; 45
   158f4:	90 e0       	ldi	r25, 0x00	; 0
   158f6:	b3 01       	movw	r22, r6
   158f8:	0e 94 fe ac 	call	0x159fc	; 0x159fc <fputc>
   158fc:	06 c0       	rjmp	.+12     	; 0x1590a <vfprintf+0x3a4>
   158fe:	80 e3       	ldi	r24, 0x30	; 48
   15900:	90 e0       	ldi	r25, 0x00	; 0
   15902:	b3 01       	movw	r22, r6
   15904:	0e 94 fe ac 	call	0x159fc	; 0x159fc <fputc>
   15908:	9a 94       	dec	r9
   1590a:	d9 14       	cp	r13, r9
   1590c:	c0 f3       	brcs	.-16     	; 0x158fe <vfprintf+0x398>
   1590e:	da 94       	dec	r13
   15910:	f1 01       	movw	r30, r2
   15912:	ed 0d       	add	r30, r13
   15914:	f1 1d       	adc	r31, r1
   15916:	80 81       	ld	r24, Z
   15918:	90 e0       	ldi	r25, 0x00	; 0
   1591a:	b3 01       	movw	r22, r6
   1591c:	0e 94 fe ac 	call	0x159fc	; 0x159fc <fputc>
   15920:	dd 20       	and	r13, r13
   15922:	a9 f7       	brne	.-22     	; 0x1590e <vfprintf+0x3a8>
   15924:	06 c0       	rjmp	.+12     	; 0x15932 <vfprintf+0x3cc>
   15926:	80 e2       	ldi	r24, 0x20	; 32
   15928:	90 e0       	ldi	r25, 0x00	; 0
   1592a:	b3 01       	movw	r22, r6
   1592c:	0e 94 fe ac 	call	0x159fc	; 0x159fc <fputc>
   15930:	ea 94       	dec	r14
   15932:	ee 20       	and	r14, r14
   15934:	c1 f7       	brne	.-16     	; 0x15926 <vfprintf+0x3c0>
   15936:	43 ce       	rjmp	.-890    	; 0x155be <vfprintf+0x58>
   15938:	f3 01       	movw	r30, r6
   1593a:	66 81       	ldd	r22, Z+6	; 0x06
   1593c:	77 81       	ldd	r23, Z+7	; 0x07
   1593e:	cb 01       	movw	r24, r22
   15940:	2b 96       	adiw	r28, 0x0b	; 11
   15942:	0f b6       	in	r0, 0x3f	; 63
   15944:	f8 94       	cli
   15946:	de bf       	out	0x3e, r29	; 62
   15948:	0f be       	out	0x3f, r0	; 63
   1594a:	cd bf       	out	0x3d, r28	; 61
   1594c:	cf 91       	pop	r28
   1594e:	df 91       	pop	r29
   15950:	1f 91       	pop	r17
   15952:	0f 91       	pop	r16
   15954:	ff 90       	pop	r15
   15956:	ef 90       	pop	r14
   15958:	df 90       	pop	r13
   1595a:	cf 90       	pop	r12
   1595c:	bf 90       	pop	r11
   1595e:	af 90       	pop	r10
   15960:	9f 90       	pop	r9
   15962:	8f 90       	pop	r8
   15964:	7f 90       	pop	r7
   15966:	6f 90       	pop	r6
   15968:	5f 90       	pop	r5
   1596a:	4f 90       	pop	r4
   1596c:	3f 90       	pop	r3
   1596e:	2f 90       	pop	r2
   15970:	08 95       	ret

00015972 <__eerd_block_m128>:
   15972:	dc 01       	movw	r26, r24
   15974:	cb 01       	movw	r24, r22

00015976 <__eerd_blraw_m128>:
   15976:	fc 01       	movw	r30, r24
   15978:	e1 99       	sbic	0x1c, 1	; 28
   1597a:	fe cf       	rjmp	.-4      	; 0x15978 <__eerd_blraw_m128+0x2>
   1597c:	06 c0       	rjmp	.+12     	; 0x1598a <__eerd_blraw_m128+0x14>
   1597e:	ff bb       	out	0x1f, r31	; 31
   15980:	ee bb       	out	0x1e, r30	; 30
   15982:	e0 9a       	sbi	0x1c, 0	; 28
   15984:	31 96       	adiw	r30, 0x01	; 1
   15986:	0d b2       	in	r0, 0x1d	; 29
   15988:	0d 92       	st	X+, r0
   1598a:	41 50       	subi	r20, 0x01	; 1
   1598c:	50 40       	sbci	r21, 0x00	; 0
   1598e:	b8 f7       	brcc	.-18     	; 0x1597e <__eerd_blraw_m128+0x8>
   15990:	08 95       	ret

00015992 <__eerd_byte_m128>:
   15992:	e1 99       	sbic	0x1c, 1	; 28
   15994:	fe cf       	rjmp	.-4      	; 0x15992 <__eerd_byte_m128>
   15996:	9f bb       	out	0x1f, r25	; 31
   15998:	8e bb       	out	0x1e, r24	; 30
   1599a:	e0 9a       	sbi	0x1c, 0	; 28
   1599c:	99 27       	eor	r25, r25
   1599e:	8d b3       	in	r24, 0x1d	; 29
   159a0:	08 95       	ret

000159a2 <__eewr_block_m128>:
   159a2:	dc 01       	movw	r26, r24
   159a4:	cb 01       	movw	r24, r22
   159a6:	03 c0       	rjmp	.+6      	; 0x159ae <__eewr_block_m128+0xc>
   159a8:	2d 91       	ld	r18, X+
   159aa:	0e 94 dc ac 	call	0x159b8	; 0x159b8 <__eewr_r18_m128>
   159ae:	41 50       	subi	r20, 0x01	; 1
   159b0:	50 40       	sbci	r21, 0x00	; 0
   159b2:	d0 f7       	brcc	.-12     	; 0x159a8 <__eewr_block_m128+0x6>
   159b4:	08 95       	ret

000159b6 <__eewr_byte_m128>:
   159b6:	26 2f       	mov	r18, r22

000159b8 <__eewr_r18_m128>:
   159b8:	e1 99       	sbic	0x1c, 1	; 28
   159ba:	fe cf       	rjmp	.-4      	; 0x159b8 <__eewr_r18_m128>
   159bc:	9f bb       	out	0x1f, r25	; 31
   159be:	8e bb       	out	0x1e, r24	; 30
   159c0:	2d bb       	out	0x1d, r18	; 29
   159c2:	0f b6       	in	r0, 0x3f	; 63
   159c4:	f8 94       	cli
   159c6:	e2 9a       	sbi	0x1c, 2	; 28
   159c8:	e1 9a       	sbi	0x1c, 1	; 28
   159ca:	0f be       	out	0x3f, r0	; 63
   159cc:	01 96       	adiw	r24, 0x01	; 1
   159ce:	08 95       	ret

000159d0 <strnlen_P>:
   159d0:	fc 01       	movw	r30, r24
   159d2:	05 90       	lpm	r0, Z+
   159d4:	61 50       	subi	r22, 0x01	; 1
   159d6:	70 40       	sbci	r23, 0x00	; 0
   159d8:	01 10       	cpse	r0, r1
   159da:	d8 f7       	brcc	.-10     	; 0x159d2 <strnlen_P+0x2>
   159dc:	80 95       	com	r24
   159de:	90 95       	com	r25
   159e0:	8e 0f       	add	r24, r30
   159e2:	9f 1f       	adc	r25, r31
   159e4:	08 95       	ret

000159e6 <strnlen>:
   159e6:	fc 01       	movw	r30, r24
   159e8:	61 50       	subi	r22, 0x01	; 1
   159ea:	70 40       	sbci	r23, 0x00	; 0
   159ec:	01 90       	ld	r0, Z+
   159ee:	01 10       	cpse	r0, r1
   159f0:	d8 f7       	brcc	.-10     	; 0x159e8 <strnlen+0x2>
   159f2:	80 95       	com	r24
   159f4:	90 95       	com	r25
   159f6:	8e 0f       	add	r24, r30
   159f8:	9f 1f       	adc	r25, r31
   159fa:	08 95       	ret

000159fc <fputc>:
   159fc:	0f 93       	push	r16
   159fe:	1f 93       	push	r17
   15a00:	cf 93       	push	r28
   15a02:	df 93       	push	r29
   15a04:	8c 01       	movw	r16, r24
   15a06:	eb 01       	movw	r28, r22
   15a08:	8b 81       	ldd	r24, Y+3	; 0x03
   15a0a:	81 ff       	sbrs	r24, 1
   15a0c:	1b c0       	rjmp	.+54     	; 0x15a44 <fputc+0x48>
   15a0e:	82 ff       	sbrs	r24, 2
   15a10:	0d c0       	rjmp	.+26     	; 0x15a2c <fputc+0x30>
   15a12:	2e 81       	ldd	r18, Y+6	; 0x06
   15a14:	3f 81       	ldd	r19, Y+7	; 0x07
   15a16:	8c 81       	ldd	r24, Y+4	; 0x04
   15a18:	9d 81       	ldd	r25, Y+5	; 0x05
   15a1a:	28 17       	cp	r18, r24
   15a1c:	39 07       	cpc	r19, r25
   15a1e:	64 f4       	brge	.+24     	; 0x15a38 <fputc+0x3c>
   15a20:	e8 81       	ld	r30, Y
   15a22:	f9 81       	ldd	r31, Y+1	; 0x01
   15a24:	01 93       	st	Z+, r16
   15a26:	f9 83       	std	Y+1, r31	; 0x01
   15a28:	e8 83       	st	Y, r30
   15a2a:	06 c0       	rjmp	.+12     	; 0x15a38 <fputc+0x3c>
   15a2c:	e8 85       	ldd	r30, Y+8	; 0x08
   15a2e:	f9 85       	ldd	r31, Y+9	; 0x09
   15a30:	80 2f       	mov	r24, r16
   15a32:	09 95       	icall
   15a34:	89 2b       	or	r24, r25
   15a36:	31 f4       	brne	.+12     	; 0x15a44 <fputc+0x48>
   15a38:	8e 81       	ldd	r24, Y+6	; 0x06
   15a3a:	9f 81       	ldd	r25, Y+7	; 0x07
   15a3c:	01 96       	adiw	r24, 0x01	; 1
   15a3e:	9f 83       	std	Y+7, r25	; 0x07
   15a40:	8e 83       	std	Y+6, r24	; 0x06
   15a42:	02 c0       	rjmp	.+4      	; 0x15a48 <fputc+0x4c>
   15a44:	0f ef       	ldi	r16, 0xFF	; 255
   15a46:	1f ef       	ldi	r17, 0xFF	; 255
   15a48:	c8 01       	movw	r24, r16
   15a4a:	df 91       	pop	r29
   15a4c:	cf 91       	pop	r28
   15a4e:	1f 91       	pop	r17
   15a50:	0f 91       	pop	r16
   15a52:	08 95       	ret

00015a54 <__ultoa_invert>:
   15a54:	fa 01       	movw	r30, r20
   15a56:	aa 27       	eor	r26, r26
   15a58:	28 30       	cpi	r18, 0x08	; 8
   15a5a:	51 f1       	breq	.+84     	; 0x15ab0 <__ultoa_invert+0x5c>
   15a5c:	20 31       	cpi	r18, 0x10	; 16
   15a5e:	81 f1       	breq	.+96     	; 0x15ac0 <__ultoa_invert+0x6c>
   15a60:	e8 94       	clt
   15a62:	6f 93       	push	r22
   15a64:	6e 7f       	andi	r22, 0xFE	; 254
   15a66:	6e 5f       	subi	r22, 0xFE	; 254
   15a68:	7f 4f       	sbci	r23, 0xFF	; 255
   15a6a:	8f 4f       	sbci	r24, 0xFF	; 255
   15a6c:	9f 4f       	sbci	r25, 0xFF	; 255
   15a6e:	af 4f       	sbci	r26, 0xFF	; 255
   15a70:	b1 e0       	ldi	r27, 0x01	; 1
   15a72:	3e d0       	rcall	.+124    	; 0x15af0 <__ultoa_invert+0x9c>
   15a74:	b4 e0       	ldi	r27, 0x04	; 4
   15a76:	3c d0       	rcall	.+120    	; 0x15af0 <__ultoa_invert+0x9c>
   15a78:	67 0f       	add	r22, r23
   15a7a:	78 1f       	adc	r23, r24
   15a7c:	89 1f       	adc	r24, r25
   15a7e:	9a 1f       	adc	r25, r26
   15a80:	a1 1d       	adc	r26, r1
   15a82:	68 0f       	add	r22, r24
   15a84:	79 1f       	adc	r23, r25
   15a86:	8a 1f       	adc	r24, r26
   15a88:	91 1d       	adc	r25, r1
   15a8a:	a1 1d       	adc	r26, r1
   15a8c:	6a 0f       	add	r22, r26
   15a8e:	71 1d       	adc	r23, r1
   15a90:	81 1d       	adc	r24, r1
   15a92:	91 1d       	adc	r25, r1
   15a94:	a1 1d       	adc	r26, r1
   15a96:	20 d0       	rcall	.+64     	; 0x15ad8 <__ultoa_invert+0x84>
   15a98:	09 f4       	brne	.+2      	; 0x15a9c <__ultoa_invert+0x48>
   15a9a:	68 94       	set
   15a9c:	3f 91       	pop	r19
   15a9e:	2a e0       	ldi	r18, 0x0A	; 10
   15aa0:	26 9f       	mul	r18, r22
   15aa2:	11 24       	eor	r1, r1
   15aa4:	30 19       	sub	r19, r0
   15aa6:	30 5d       	subi	r19, 0xD0	; 208
   15aa8:	31 93       	st	Z+, r19
   15aaa:	de f6       	brtc	.-74     	; 0x15a62 <__ultoa_invert+0xe>
   15aac:	cf 01       	movw	r24, r30
   15aae:	08 95       	ret
   15ab0:	46 2f       	mov	r20, r22
   15ab2:	47 70       	andi	r20, 0x07	; 7
   15ab4:	40 5d       	subi	r20, 0xD0	; 208
   15ab6:	41 93       	st	Z+, r20
   15ab8:	b3 e0       	ldi	r27, 0x03	; 3
   15aba:	0f d0       	rcall	.+30     	; 0x15ada <__ultoa_invert+0x86>
   15abc:	c9 f7       	brne	.-14     	; 0x15ab0 <__ultoa_invert+0x5c>
   15abe:	f6 cf       	rjmp	.-20     	; 0x15aac <__ultoa_invert+0x58>
   15ac0:	46 2f       	mov	r20, r22
   15ac2:	4f 70       	andi	r20, 0x0F	; 15
   15ac4:	40 5d       	subi	r20, 0xD0	; 208
   15ac6:	4a 33       	cpi	r20, 0x3A	; 58
   15ac8:	18 f0       	brcs	.+6      	; 0x15ad0 <__ultoa_invert+0x7c>
   15aca:	49 5d       	subi	r20, 0xD9	; 217
   15acc:	31 fd       	sbrc	r19, 1
   15ace:	40 52       	subi	r20, 0x20	; 32
   15ad0:	41 93       	st	Z+, r20
   15ad2:	02 d0       	rcall	.+4      	; 0x15ad8 <__ultoa_invert+0x84>
   15ad4:	a9 f7       	brne	.-22     	; 0x15ac0 <__ultoa_invert+0x6c>
   15ad6:	ea cf       	rjmp	.-44     	; 0x15aac <__ultoa_invert+0x58>
   15ad8:	b4 e0       	ldi	r27, 0x04	; 4
   15ada:	a6 95       	lsr	r26
   15adc:	97 95       	ror	r25
   15ade:	87 95       	ror	r24
   15ae0:	77 95       	ror	r23
   15ae2:	67 95       	ror	r22
   15ae4:	ba 95       	dec	r27
   15ae6:	c9 f7       	brne	.-14     	; 0x15ada <__ultoa_invert+0x86>
   15ae8:	00 97       	sbiw	r24, 0x00	; 0
   15aea:	61 05       	cpc	r22, r1
   15aec:	71 05       	cpc	r23, r1
   15aee:	08 95       	ret
   15af0:	9b 01       	movw	r18, r22
   15af2:	ac 01       	movw	r20, r24
   15af4:	0a 2e       	mov	r0, r26
   15af6:	06 94       	lsr	r0
   15af8:	57 95       	ror	r21
   15afa:	47 95       	ror	r20
   15afc:	37 95       	ror	r19
   15afe:	27 95       	ror	r18
   15b00:	ba 95       	dec	r27
   15b02:	c9 f7       	brne	.-14     	; 0x15af6 <__ultoa_invert+0xa2>
   15b04:	62 0f       	add	r22, r18
   15b06:	73 1f       	adc	r23, r19
   15b08:	84 1f       	adc	r24, r20
   15b0a:	95 1f       	adc	r25, r21
   15b0c:	a0 1d       	adc	r26, r0
   15b0e:	08 95       	ret

00015b10 <_exit>:
   15b10:	f8 94       	cli

00015b12 <__stop_program>:
   15b12:	ff cf       	rjmp	.-2      	; 0x15b12 <__stop_program>
