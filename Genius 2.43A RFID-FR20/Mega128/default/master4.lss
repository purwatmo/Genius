
master4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800100  00015c02  00015cb6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00015c02  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000b58  0080015c  0080015c  00015d12  2**0
                  ALLOC
  3 .eeprom       00000858  00810000  00810000  00015d12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 000000e0  00000000  00000000  0001656a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000024ec  00000000  00000000  0001664a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000103d3  00000000  00000000  00018b36  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b00  00000000  00000000  00028f09  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000c470  00000000  00000000  00029a09  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001190  00000000  00000000  00035e7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005287  00000000  00000000  0003700c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006cda  00000000  00000000  0003c293  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000498  00000000  00000000  00042f6d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fc 12 	jmp	0x25f8	; 0x25f8 <__ctors_end>
       4:	0c 94 1b 13 	jmp	0x2636	; 0x2636 <__bad_interrupt>
       8:	0c 94 1b 13 	jmp	0x2636	; 0x2636 <__bad_interrupt>
       c:	0c 94 1b 13 	jmp	0x2636	; 0x2636 <__bad_interrupt>
      10:	0c 94 1b 13 	jmp	0x2636	; 0x2636 <__bad_interrupt>
      14:	0c 94 1b 13 	jmp	0x2636	; 0x2636 <__bad_interrupt>
      18:	0c 94 1b 13 	jmp	0x2636	; 0x2636 <__bad_interrupt>
      1c:	0c 94 1b 13 	jmp	0x2636	; 0x2636 <__bad_interrupt>
      20:	0c 94 1b 13 	jmp	0x2636	; 0x2636 <__bad_interrupt>
      24:	0c 94 1b 13 	jmp	0x2636	; 0x2636 <__bad_interrupt>
      28:	0c 94 1b 13 	jmp	0x2636	; 0x2636 <__bad_interrupt>
      2c:	0c 94 1b 13 	jmp	0x2636	; 0x2636 <__bad_interrupt>
      30:	0c 94 d6 13 	jmp	0x27ac	; 0x27ac <__vector_12>
      34:	0c 94 1b 13 	jmp	0x2636	; 0x2636 <__bad_interrupt>
      38:	0c 94 1b 13 	jmp	0x2636	; 0x2636 <__bad_interrupt>
      3c:	0c 94 1b 13 	jmp	0x2636	; 0x2636 <__bad_interrupt>
      40:	0c 94 1b 13 	jmp	0x2636	; 0x2636 <__bad_interrupt>
      44:	0c 94 a3 67 	jmp	0xcf46	; 0xcf46 <__vector_17>
      48:	0c 94 93 15 	jmp	0x2b26	; 0x2b26 <__vector_18>
      4c:	0c 94 1b 13 	jmp	0x2636	; 0x2636 <__bad_interrupt>
      50:	0c 94 1b 13 	jmp	0x2636	; 0x2636 <__bad_interrupt>
      54:	0c 94 1b 13 	jmp	0x2636	; 0x2636 <__bad_interrupt>
      58:	0c 94 1b 13 	jmp	0x2636	; 0x2636 <__bad_interrupt>
      5c:	0c 94 1b 13 	jmp	0x2636	; 0x2636 <__bad_interrupt>
      60:	0c 94 1b 13 	jmp	0x2636	; 0x2636 <__bad_interrupt>
      64:	0c 94 1b 13 	jmp	0x2636	; 0x2636 <__bad_interrupt>
      68:	0c 94 1b 13 	jmp	0x2636	; 0x2636 <__bad_interrupt>
      6c:	0c 94 1b 13 	jmp	0x2636	; 0x2636 <__bad_interrupt>
      70:	0c 94 1b 13 	jmp	0x2636	; 0x2636 <__bad_interrupt>
      74:	0c 94 1b 13 	jmp	0x2636	; 0x2636 <__bad_interrupt>
      78:	0c 94 af 40 	jmp	0x815e	; 0x815e <__vector_30>
      7c:	0c 94 1b 13 	jmp	0x2636	; 0x2636 <__bad_interrupt>
      80:	0c 94 1b 13 	jmp	0x2636	; 0x2636 <__bad_interrupt>
      84:	0c 94 1b 13 	jmp	0x2636	; 0x2636 <__bad_interrupt>
      88:	0c 94 1b 13 	jmp	0x2636	; 0x2636 <__bad_interrupt>
      8c:	51 14       	cp	r5, r1
      8e:	4f 14       	cp	r4, r15
      90:	53 14       	cp	r5, r3
      92:	55 14       	cp	r5, r5
      94:	57 14       	cp	r5, r7
      96:	59 14       	cp	r5, r9
      98:	5b 14       	cp	r5, r11
      9a:	5d 14       	cp	r5, r13
      9c:	5f 14       	cp	r5, r15
      9e:	61 14       	cp	r6, r1
      a0:	63 14       	cp	r6, r3
      a2:	65 14       	cp	r6, r5
      a4:	67 14       	cp	r6, r7
      a6:	75 14       	cp	r7, r5
      a8:	69 14       	cp	r6, r9
      aa:	75 14       	cp	r7, r5
      ac:	6b 14       	cp	r6, r11
      ae:	6d 14       	cp	r6, r13
      b0:	75 14       	cp	r7, r5
      b2:	6f 14       	cp	r6, r15
      b4:	71 14       	cp	r7, r1
      b6:	73 14       	cp	r7, r3
      b8:	75 14       	cp	r7, r5
      ba:	75 14       	cp	r7, r5
      bc:	69 14       	cp	r6, r9
      be:	5b 14       	cp	r5, r11
      c0:	75 14       	cp	r7, r5
      c2:	5d 14       	cp	r5, r13
      c4:	61 14       	cp	r6, r1
      c6:	65 14       	cp	r6, r5
      c8:	d4 73       	andi	r29, 0x34	; 52
      ca:	f0 73       	andi	r31, 0x30	; 48
      cc:	f9 74       	andi	r31, 0x49	; 73
      ce:	28 75       	andi	r18, 0x58	; 88
      d0:	51 75       	andi	r21, 0x51	; 81
      d2:	c4 75       	andi	r28, 0x54	; 84
      d4:	d3 75       	andi	r29, 0x53	; 83
      d6:	da 75       	andi	r29, 0x5A	; 90
      d8:	16 76       	andi	r17, 0x66	; 102
      da:	3d 76       	andi	r19, 0x6D	; 109
      dc:	80 76       	andi	r24, 0x60	; 96
      de:	8a 76       	andi	r24, 0x6A	; 106
      e0:	49 76       	andi	r20, 0x69	; 105
      e2:	90 76       	andi	r25, 0x60	; 96
      e4:	a8 76       	andi	r26, 0x68	; 104
      e6:	9f 76       	andi	r25, 0x6F	; 111
      e8:	a4 76       	andi	r26, 0x64	; 100
      ea:	04 74       	andi	r16, 0x44	; 68
      ec:	93 74       	andi	r25, 0x43	; 67
      ee:	b5 74       	andi	r27, 0x45	; 69
      f0:	c1 74       	andi	r28, 0x41	; 65
      f2:	d3 74       	andi	r29, 0x43	; 67
      f4:	e4 74       	andi	r30, 0x44	; 68
      f6:	f3 74       	andi	r31, 0x43	; 67
      f8:	f3 74       	andi	r31, 0x43	; 67
      fa:	23 79       	andi	r18, 0x93	; 147
      fc:	29 79       	andi	r18, 0x99	; 153
      fe:	2d 79       	andi	r18, 0x9D	; 157
     100:	44 79       	andi	r20, 0x94	; 148
     102:	5e 79       	andi	r21, 0x9E	; 158
     104:	62 79       	andi	r22, 0x92	; 146
     106:	8d 79       	andi	r24, 0x9D	; 157
     108:	a7 79       	andi	r26, 0x97	; 151
     10a:	ad 79       	andi	r26, 0x9D	; 157
     10c:	b5 79       	andi	r27, 0x95	; 149
     10e:	b8 79       	andi	r27, 0x98	; 152
     110:	bb 79       	andi	r27, 0x9B	; 155
     112:	be 79       	andi	r27, 0x9E	; 158
     114:	c1 79       	andi	r28, 0x91	; 145
     116:	c4 79       	andi	r28, 0x94	; 148
     118:	c8 79       	andi	r28, 0x98	; 152
     11a:	cb 79       	andi	r28, 0x9B	; 155
     11c:	ce 79       	andi	r28, 0x9E	; 158
     11e:	d6 79       	andi	r29, 0x96	; 150
     120:	30 80       	ld	r3, Z
     122:	76 80       	ldd	r7, Z+6	; 0x06
     124:	85 80       	ldd	r8, Z+5	; 0x05
     126:	c7 80       	ldd	r12, Z+7	; 0x07
     128:	d9 80       	ldd	r13, Y+1	; 0x01
     12a:	ee 80       	ldd	r14, Y+6	; 0x06
     12c:	11 81       	ldd	r17, Z+1	; 0x01
     12e:	c7 81       	ldd	r28, Z+7	; 0x07
     130:	d1 81       	ldd	r29, Z+1	; 0x01
     132:	98 88       	ldd	r9, Y+16	; 0x10
     134:	2e 82       	std	Y+6, r2	; 0x06
     136:	36 83       	std	Z+6, r19	; 0x06
     138:	82 83       	std	Z+2, r24	; 0x02
     13a:	c8 83       	st	Y, r28
     13c:	40 84       	ldd	r4, Z+8	; 0x08
     13e:	d1 84       	ldd	r13, Z+9	; 0x09
     140:	f4 84       	ldd	r15, Z+12	; 0x0c
     142:	ba 85       	ldd	r27, Y+10	; 0x0a
     144:	e4 85       	ldd	r30, Z+12	; 0x0c
     146:	9d 86       	std	Y+13, r9	; 0x0d
     148:	b6 86       	std	Z+14, r11	; 0x0e
     14a:	b5 87       	std	Z+13, r27	; 0x0d
     14c:	2e 87       	std	Y+14, r18	; 0x0e
     14e:	70 87       	std	Z+8, r23	; 0x08
     150:	4f 88       	ldd	r4, Y+23	; 0x17
     152:	7d 88       	ldd	r7, Y+21	; 0x15
     154:	98 88       	ldd	r9, Y+16	; 0x10
     156:	bb 87       	std	Y+11, r27	; 0x0b
     158:	3e 88       	ldd	r3, Y+22	; 0x16
     15a:	82 88       	ldd	r8, Z+18	; 0x12
     15c:	89 88       	ldd	r8, Y+17	; 0x11
     15e:	d4 88       	ldd	r13, Z+20	; 0x14
     160:	d8 88       	ldd	r13, Y+16	; 0x10
     162:	f4 88       	ldd	r15, Z+20	; 0x14
     164:	c5 8c       	ldd	r12, Z+29	; 0x1d
     166:	c5 8c       	ldd	r12, Z+29	; 0x1d
     168:	c5 8c       	ldd	r12, Z+29	; 0x1d
     16a:	c5 8c       	ldd	r12, Z+29	; 0x1d
     16c:	3d 89       	ldd	r19, Y+21	; 0x15
     16e:	c5 8c       	ldd	r12, Z+29	; 0x1d
     170:	5d 89       	ldd	r21, Y+21	; 0x15
     172:	c5 8c       	ldd	r12, Z+29	; 0x1d
     174:	7a 89       	ldd	r23, Y+18	; 0x12
     176:	01 8a       	std	Z+17, r0	; 0x11
     178:	5a 8a       	std	Y+18, r5	; 0x12
     17a:	7d 8a       	std	Y+21, r7	; 0x15
     17c:	20 89       	ldd	r18, Z+16	; 0x10
     17e:	c5 8c       	ldd	r12, Z+29	; 0x1d
     180:	14 8a       	std	Z+20, r1	; 0x14
     182:	95 8a       	std	Z+21, r9	; 0x15
     184:	cd 8a       	std	Y+21, r12	; 0x15
     186:	e5 8a       	std	Z+21, r14	; 0x15
     188:	12 8b       	std	Z+18, r17	; 0x12
     18a:	22 8b       	std	Z+18, r18	; 0x12
     18c:	31 8c       	ldd	r3, Z+25	; 0x19
     18e:	41 8c       	ldd	r4, Z+25	; 0x19
     190:	88 8c       	ldd	r8, Y+24	; 0x18
     192:	a7 8c       	ldd	r10, Z+31	; 0x1f
     194:	b9 8c       	ldd	r11, Y+25	; 0x19
     196:	bf 8c       	ldd	r11, Y+31	; 0x1f
     198:	c1 8c       	ldd	r12, Z+25	; 0x19
     19a:	f9 92       	st	Y+, r15
     19c:	11 93       	st	Z+, r17
     19e:	23 93       	.word	0x9323	; ????
     1a0:	58 93       	.word	0x9358	; ????
     1a2:	87 93       	.word	0x9387	; ????
     1a4:	9d 93       	st	X+, r25
     1a6:	d8 93       	.word	0x93d8	; ????
     1a8:	10 94       	com	r1
     1aa:	52 94       	swap	r5
     1ac:	5a 94       	dec	r5
     1ae:	79 95       	.word	0x9579	; ????
     1b0:	85 95       	asr	r24
     1b2:	b5 95       	asr	r27
     1b4:	f2 95       	swap	r31
     1b6:	0b 96       	adiw	r24, 0x0b	; 11
     1b8:	25 96       	adiw	r28, 0x05	; 5
     1ba:	65 96       	adiw	r28, 0x15	; 21
     1bc:	6d 93       	st	X+, r22
     1be:	2a 94       	dec	r2
     1c0:	ce 95 f6 93 	call	0x7127ec	; 0x7127ec <__data_load_end+0x6fcb8e>
     1c4:	72 94       	swap	r7
     1c6:	bf 94 db 94 	call	0x2f29b6	; 0x2f29b6 <__data_load_end+0x2dcd58>
     1ca:	f5 94       	asr	r15
     1cc:	41 95       	neg	r20
     1ce:	5f 95 9f 96 	call	0x572d3e	; 0x572d3e <__data_load_end+0x55d0e0>
     1d2:	b5 96       	adiw	r30, 0x25	; 37
     1d4:	ba 96       	adiw	r30, 0x2a	; 42
     1d6:	f1 96       	adiw	r30, 0x31	; 49
     1d8:	20 97       	sbiw	r28, 0x00	; 0
     1da:	65 97       	sbiw	r28, 0x15	; 21
     1dc:	83 97       	sbiw	r24, 0x23	; 35
     1de:	a1 97       	sbiw	r28, 0x21	; 33
     1e0:	db 97       	sbiw	r26, 0x3b	; 59
     1e2:	3e 98       	cbi	0x07, 6	; 7
     1e4:	52 9c       	mul	r5, r2
     1e6:	06 97       	sbiw	r24, 0x06	; 6
     1e8:	7b 9c       	mul	r7, r11
     1ea:	65 9d       	mul	r22, r5
     1ec:	23 9d       	mul	r18, r3
     1ee:	4c 9d       	mul	r20, r12
     1f0:	9b 9d       	mul	r25, r11
     1f2:	7f 9d       	mul	r23, r15
     1f4:	b2 9d       	mul	r27, r2
     1f6:	cb 9d       	mul	r28, r11
     1f8:	dd 9d       	mul	r29, r13
     1fa:	95 9c       	mul	r9, r5
     1fc:	ec 9c       	mul	r14, r12
     1fe:	09 9d       	mul	r16, r9
     200:	50 98       	cbi	0x0a, 0	; 10
     202:	6e 98       	cbi	0x0d, 6	; 13
     204:	93 98       	cbi	0x12, 3	; 18
     206:	a0 98       	cbi	0x14, 0	; 20
     208:	bc 98       	cbi	0x17, 4	; 23
     20a:	d1 98       	cbi	0x1a, 1	; 26
     20c:	f9 98       	cbi	0x1f, 1	; 31
     20e:	0e 99       	sbic	0x01, 6	; 1
     210:	36 99       	sbic	0x06, 6	; 6
     212:	56 99       	sbic	0x0a, 6	; 10
     214:	87 99       	sbic	0x10, 7	; 16
     216:	94 99       	sbic	0x12, 4	; 18
     218:	ed 99       	sbic	0x1d, 5	; 29
     21a:	64 9a       	sbi	0x0c, 4	; 12
     21c:	78 9a       	sbi	0x0f, 0	; 15
     21e:	4d 9b       	sbis	0x09, 5	; 9
     220:	4d 9b       	sbis	0x09, 5	; 9
     222:	8c 9a       	sbi	0x11, 4	; 17
     224:	a0 9a       	sbi	0x14, 0	; 20
     226:	a8 9a       	sbi	0x15, 0	; 21
     228:	c4 9a       	sbi	0x18, 4	; 24
     22a:	d8 9a       	sbi	0x1b, 0	; 27
     22c:	e3 9a       	sbi	0x1c, 3	; 28
     22e:	f8 9a       	sbi	0x1f, 0	; 31
     230:	0d 9b       	sbis	0x01, 5	; 1
     232:	2b 9b       	sbis	0x05, 3	; 5
     234:	50 9b       	sbis	0x0a, 0	; 10
     236:	65 9b       	sbis	0x0c, 5	; 12
     238:	7a 9b       	sbis	0x0f, 2	; 15
     23a:	8f 9b       	sbis	0x11, 7	; 17
     23c:	a4 9b       	sbis	0x14, 4	; 20
     23e:	b9 9b       	sbis	0x17, 1	; 23
     240:	ce 9b       	sbis	0x19, 6	; 25
     242:	e3 9b       	sbis	0x1c, 3	; 28
     244:	f0 9b       	sbis	0x1e, 0	; 30
     246:	05 9c       	mul	r0, r5
     248:	26 9c       	mul	r2, r6
     24a:	23 a2       	std	Z+35, r2	; 0x23
     24c:	26 a2       	std	Z+38, r2	; 0x26
     24e:	c6 a2       	std	Z+38, r12	; 0x26
     250:	d5 a2       	std	Z+37, r13	; 0x25
     252:	06 a3       	std	Z+38, r16	; 0x26
     254:	14 a3       	std	Z+36, r17	; 0x24
     256:	40 a3       	std	Z+32, r20	; 0x20
     258:	e5 a2       	std	Z+37, r14	; 0x25
     25a:	f2 a2       	std	Z+34, r15	; 0x22
     25c:	fc a2       	std	Y+36, r15	; 0x24
     25e:	4a a3       	std	Y+34, r20	; 0x22
     260:	57 a3       	std	Z+39, r21	; 0x27
     262:	62 a3       	std	Z+34, r22	; 0x22
     264:	65 a3       	std	Z+37, r22	; 0x25
     266:	68 a3       	std	Y+32, r22	; 0x20
     268:	6b a3       	std	Y+35, r22	; 0x23
     26a:	6e a3       	std	Y+38, r22	; 0x26
     26c:	71 a3       	std	Z+33, r23	; 0x21
     26e:	74 a3       	std	Z+36, r23	; 0x24
     270:	77 a3       	std	Z+39, r23	; 0x27
     272:	99 a3       	std	Y+33, r25	; 0x21
     274:	87 a3       	std	Z+39, r24	; 0x27
     276:	7a a3       	std	Y+34, r23	; 0x22
     278:	92 a3       	std	Z+34, r25	; 0x22
     27a:	b0 a2       	std	Z+32, r11	; 0x20

0000027c <__c.2986>:
     27c:	49 6e 69 74 69 61 6c 69 7a 65 2e 2e 2e 20 00        Initialize... .

0000028b <__c.2956>:
     28b:	57 61 74 63 68 44 6f 67 00                          WatchDog.

00000294 <__c.2954>:
     294:	42 72 6f 77 6e 4f 75 74 00                          BrownOut.

0000029d <__c.2952>:
     29d:	45 78 74 65 72 6e 61 6c 00                          External.

000002a6 <__c.2947>:
     2a6:	50 6f 77 65 72 4f 6e 00                             PowerOn.

000002ae <__prodloc>:
     2ae:	01 06 02 06 01 0d 02 0d 01 14 02 14                 ............

000002ba <__prntloc>:
     2ba:	01 08 02 08 03 08 04 08 01 13 02 13                 ............

000002c6 <__prntlmt>:
     2c6:	02 03 04 02 0f 0f                                   ......

000002cc <__prntstr>:
     2cc:	01 01 00 00 00 00                                   ......

000002d2 <__hostloc>:
     2d2:	01 0a 02 0a 03 0a                                   ......

000002d8 <MaxKeyHit>:
     2d8:	02 04 03 03 03 03 03 04 03 04                       ..........

000002e2 <strDispenserName1>:
     2e2:	4e 2f 41 00                                         N/A.

000002e6 <strDispenserName2>:
     2e6:	47 69 6c 62 61 72 63 6f 00                          Gilbarco.

000002ef <strDispenserName3>:
     2ef:	57 61 79 6e 65 20 44 41 52 54 00                    Wayne DART.

000002fa <strDispenserName4>:
     2fa:	54 61 74 73 75 6e 6f 00                             Tatsuno.

00000302 <strDispenserName5>:
     302:	4c 47 00                                            LG.

00000305 <DefListDispenserName>:
     305:	e2 02 e6 02 ef 02 fa 02 02 03                       ..........

0000030f <__c.9937>:
     30f:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     31f:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     32f:	20 20 20 20 20 20 20 20 00                                  .

00000338 <__c.9935>:
     338:	20 20 20 20 20 20 53 65 6d 6f 67 61 20 53 65 6c           Semoga Sel
     348:	61 6d 61 74 20 53 61 6d 70 61 69 20 54 75 6a 75     amat Sampai Tuju
     358:	61 6e 20 20 20 20 20 20 00                          an      .

00000361 <__c.9933>:
     361:	20 20 20 20 20 20 20 20 20 20 20 20 53 65 6c 61                 Sela
     371:	6d 61 74 20 20 4a 61 6c 61 6e 20 20 20 20 20 20     mat  Jalan      
     381:	20 20 20 20 20 20 20 20 00                                  .

0000038a <__c.9931>:
     38a:	20 20 20 20 20 20 20 20 20 20 20 20 20 54 65 72                  Ter
     39a:	69 6d 61 20 4b 61 73 69 68 20 20 20 20 20 20 20     ima Kasih       
     3aa:	20 20 20 20 20 20 20 20 00                                  .

000003b3 <__c.9929>:
     3b3:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     3c3:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     3d3:	20 20 20 20 20 20 20 20 00                                  .

000003dc <__c.9927>:
     3dc:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     3ec:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     3fc:	20 20 20 20 20 20 20 20 00                                  .

00000405 <__c.9925>:
     405:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     415:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     425:	20 20 20 20 20 20 20 20 00                                  .

0000042e <__c.9923>:
     42e:	20 20 20 20 20 20 20 20 20 20 20 20 4a 61 6b 61                 Jaka
     43e:	72 74 61 20 53 65 6c 61 74 61 6e 20 20 20 20 20     rta Selatan     
     44e:	20 20 20 20 20 20 20 20 00                                  .

00000457 <__c.9921>:
     457:	20 20 20 20 20 20 20 20 4a 4c 2e 20 52 53 20 46             JL. RS F
     467:	61 74 6d 61 77 61 74 69 20 4e 6f 2e 35 35 20 20     atmawati No.55  
     477:	20 20 20 20 20 20 20 20 00                                  .

00000480 <__c.9919>:
     480:	20 20 20 20 50 54 2e 20 48 41 4e 49 4e 44 4f 20         PT. HANINDO 
     490:	41 55 54 4f 4d 41 54 49 4f 4e 20 53 4f 4c 55 54     AUTOMATION SOLUT
     4a0:	49 4f 4e 53 20 20 20 20 00                          IONS    .

000004a9 <__c.9917>:
     4a9:	30 30 30 30 30 30 00                                000000.

000004b0 <__c.9915>:
     4b0:	42 52 49 00                                         BRI.

000004b4 <__c.9913>:
     4b4:	42 4e 49 00                                         BNI.

000004b8 <__c.9911>:
     4b8:	4d 61 6e 64 69 72 69 00                             Mandiri.

000004c0 <__c.9909>:
     4c0:	42 43 41 00                                         BCA.

000004c4 <__c.9907>:
     4c4:	44 69 65 73 65 6c 20 20 00                          Diesel  .

000004cd <__c.9905>:
     4cd:	42 69 6f 53 6f 6c 72 20 00                          BioSolr .

000004d6 <__c.9903>:
     4d6:	53 6f 6c 61 72 20 20 20 00                          Solar   .

000004df <__c.9901>:
     4df:	50 72 65 6d 69 75 6d 20 00                          Premium .

000004e8 <__c.9899>:
     4e8:	50 65 72 74 61 6d 61 78 00                          Pertamax.

000004f1 <__c.9897>:
     4f1:	50 65 72 74 2b 20 20 20 00                          Pert+   .

000004fa <__c.9895>:
     4fa:	36 35 30 30 00                                      6500.

000004ff <__c.9893>:
     4ff:	34 35 30 30 00                                      4500.

00000504 <__c.9891>:
     504:	36 35 30 30 00                                      6500.

00000509 <__c.9889>:
     509:	34 35 30 30 00                                      4500.

0000050e <__c.9887>:
     50e:	37 32 35 30 00                                      7250.

00000513 <__c.9885>:
     513:	36 35 30 30 00                                      6500.

00000518 <__c.9883>:
     518:	20 20 00                                              .

0000051b <__c.9787>:
     51b:	25 64 00                                            %d.

0000051e <__c.9785>:
     51e:	54 25 2e 32 64 25 2e 32 64 25 73 25 73 25 73 25     T%.2d%.2d%s%s%s%
     52e:	73 25 73 25 73 3a 00                                s%s%s:.

00000535 <__c.9736>:
     535:	32 30 25 73 2f 25 73 2f 25 73 20 25 73 3a 25 73     20%s/%s/%s %s:%s
     545:	3a 25 73 00                                         :%s.

00000549 <__c.9708>:
     549:	25 73 00                                            %s.

0000054c <__c.9699>:
     54c:	25 73 00                                            %s.

0000054f <__c.9648>:
     54f:	25 63 25 2e 32 64 3a 00                             %c%.2d:.

00000557 <__c.9627>:
     557:	43 54 53 52 50 00                                   CTSRP.

0000055d <__c.9603>:
     55d:	3a 00                                               :.

0000055f <__c.9449>:
     55f:	4e 2f 41 00                                         N/A.

00000563 <__c.9429>:
     563:	25 73 00                                            %s.

00000566 <__c.9424>:
	...

00000567 <__c.9297>:
     567:	25 64 2e 25 73 25 73 25 73 00                       %d.%s%s%s.

00000571 <__c.9295>:
     571:	25 64 2e 25 73 25 73 25 73 25 73 25 73 00           %d.%s%s%s%s%s.

0000057f <__c.9287>:
     57f:	54 4f 54 41 4c 20 25 73 25 73 00                    TOTAL %s%s.

0000058a <__c.9285>:
     58a:	54 4f 54 41 4c 20 25 73 25 73 25 73 25 73 00        TOTAL %s%s%s%s.

00000599 <__c.9281>:
     599:	25 73 25 73 00                                      %s%s.

0000059e <__c.9279>:
     59e:	25 73 25 73 25 73 25 73 00                          %s%s%s%s.

000005a7 <__c.9277>:
     5a7:	25 73 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 20 20 20     %s-----------   
     5b7:	20 20 20 20 20 20 20 20 20 20 20 20 20 00                        .

000005c5 <__c.9275>:
     5c5:	25 73 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 20 20 20     %s-----------   
     5d5:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 00           -------------.

000005e3 <__c.9273>:
     5e3:	41 77 61 6c 20 3a 25 73 25 73 00                    Awal :%s%s.

000005ee <__c.9271>:
     5ee:	41 77 61 6c 20 3a 25 73 25 73 25 73 25 73 00        Awal :%s%s%s%s.

000005fd <__c.9269>:
     5fd:	41 6b 68 69 72 3a 25 73 25 73 00                    Akhir:%s%s.

00000608 <__c.9267>:
     608:	41 6b 68 69 72 3a 25 73 25 73 25 73 25 73 00        Akhir:%s%s%s%s.

00000617 <__c.9265>:
     617:	50 25 64 2e 25 64 20 2d 20 25 73 20 00              P%d.%d - %s .

00000624 <__c.9263>:
     624:	50 25 64 2e 25 64 20 2d 20 25 73 20 25 73 20 25     P%d.%d - %s %s %
     634:	73 00                                               s.

00000636 <__c.9261>:
     636:	48 61 72 67 61 3a 20 52 70 2e 25 73 00              Harga: Rp.%s.

00000643 <__c.9257>:
     643:	4e 2f 41 00                                         N/A.

00000647 <__c.9253>:
     647:	50 55 4d 50 2d 50 52 4f 44 55 43 54 20 20 20 56     PUMP-PRODUCT   V
     657:	4f 4c 55 4d 45 28 4c 29 20 20 20 20 20 20 20 20     OLUME(L)        
     667:	20 20 20 20 20 20 00                                      .

0000066e <__c.9251>:
     66e:	50 55 4d 50 2d 50 52 4f 44 55 43 54 20 20 20 56     PUMP-PRODUCT   V
     67e:	4f 4c 55 4d 45 28 4c 29 20 20 20 20 52 55 50 49     OLUME(L)    RUPI
     68e:	41 48 28 52 50 29 00                                AH(RP).

00000695 <__c.9247>:
     695:	41 6b 68 69 72 20 53 68 69 66 74 20 3a 20 25 73     Akhir Shift : %s
     6a5:	20 00                                                .

000006a7 <__c.9245>:
     6a7:	41 77 61 6c 20 20 53 68 69 66 74 20 3a 20 25 73     Awal  Shift : %s
     6b7:	20 00                                                .

000006b9 <__c.9243>:
     6b9:	54 65 72 6d 69 6e 61 6c 20 49 44 20 3a 20 25 2e     Terminal ID : %.
     6c9:	32 64 20 20 20 20 20 20 20 20 20 20 20 20 20 20     2d              
     6d9:	20 20 20 20 20 00                                        .

000006df <__c.9241>:
     6df:	20 20 20 20 20 20 20 20 4c 61 70 6f 72 61 6e 20             Laporan 
     6ef:	54 75 74 75 70 20 53 68 69 66 74 3a 20 25 73 20     Tutup Shift: %s 
     6ff:	20 20 20 20 20 00                                        .

00000705 <__c.9238>:
     705:	25 64 00                                            %d.

00000708 <__c.9180>:
     708:	25 73 00                                            %s.

0000070b <__c.9175>:
     70b:	30 00                                               0.

0000070d <__c.9173>:
     70d:	30 00                                               0.

0000070f <__c.9009>:
     70f:	25 73 00                                            %s.

00000712 <__c.9007>:
     712:	25 73 00                                            %s.

00000715 <__c.9005>:
     715:	25 73 00                                            %s.

00000718 <__c.9003>:
     718:	25 73 00                                            %s.

0000071b <__c.9001>:
     71b:	25 73 00                                            %s.

0000071e <__c.8805>:
     71e:	25 73 00                                            %s.

00000721 <__c.8717>:
     721:	30 30 30 30 30 30 30 30 00                          00000000.

0000072a <__c.8636>:
     72a:	4f 70 65 72 61 74 6f 72 3a 20 25 73 00              Operator: %s.

00000737 <__c.8631>:
     737:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     747:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     757:	2d 00                                               -.

00000759 <__c.8622>:
     759:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     769:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     779:	20 20 20 00                                            .

0000077d <__c.8620>:
     77d:	20 20 20 20 20 20 20 20 20 20 20 20 20 44 55 50                  DUP
     78d:	4c 49 43 41 54 45 20 43 4f 50 59 20 20 20 20 20     LICATE COPY     
     79d:	20 20 20 00                                            .

000007a1 <__c.8468>:
     7a1:	20 20 20 20 20 4f 70 65 72 61 74 6f 72 3a 20 25          Operator: %
     7b1:	73 00                                               s.

000007b3 <__c.8463>:
     7b3:	20 20 20 20 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d         ------------
     7c3:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     7d3:	2d 2d 00                                            --.

000007d6 <__c.8460>:
     7d6:	20 20 20 20 20 53 75 72 63 68 61 72 67 65 20 41          Surcharge A
     7e6:	6d 74 3a 20 25 73 00                                mt: %s.

000007ed <__c.8457>:
     7ed:	20 20 20 20 20 53 75 72 63 68 61 72 67 65 20 44          Surcharge D
     7fd:	73 63 3a 20 25 73 00                                sc: %s.

00000804 <__c.8454>:
     804:	20 20 20 20 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d         ------------
     814:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     824:	2d 2d 00                                            --.

00000827 <__c.8451>:
     827:	20 20 20 20 20 4d 6f 6e 74 68 20 43 6f 6e 73 20          Month Cons 
     837:	41 20 3a 20 52 70 2e 25 73 00                       A : Rp.%s.

00000841 <__c.8448>:
     841:	20 20 20 20 20 4d 6f 6e 74 68 20 43 6f 6e 73 20          Month Cons 
     851:	56 20 3a 20 25 73 20 4c 00                          V : %s L.

0000085a <__c.8445>:
     85a:	20 20 20 20 20 54 6f 74 61 6c 20 52 65 64 65 65          Total Redee
     86a:	6d 20 3a 20 25 73 00                                m : %s.

00000871 <__c.8442>:
     871:	20 20 20 20 20 45 78 70 69 72 79 20 20 20 20 20          Expiry     
     881:	20 20 3a 20 25 73 00                                  : %s.

00000888 <__c.8439>:
     888:	20 20 20 20 20 43 75 72 72 20 50 6f 69 6e 74 73          Curr Points
     898:	20 20 3a 20 25 73 00                                  : %s.

0000089f <__c.8436>:
     89f:	20 20 20 20 20 50 72 65 76 20 50 6f 69 6e 74 73          Prev Points
     8af:	20 20 3a 20 25 73 00                                  : %s.

000008b6 <__c.8433>:
     8b6:	20 20 20 20 20 47 61 69 6e 20 50 6f 69 6e 74 73          Gain Points
     8c6:	20 20 3a 20 25 73 00                                  : %s.

000008cd <__c.8430>:
     8cd:	20 20 20 20 20 43 6f 72 70 20 4e 61 6d 65 20 20          Corp Name  
     8dd:	20 20 3a 20 25 73 00                                  : %s.

000008e4 <__c.8427>:
     8e4:	20 20 20 20 20 43 6f 72 70 20 49 44 20 20 20 20          Corp ID    
     8f4:	20 20 3a 20 25 73 00                                  : %s.

000008fb <__c.8424>:
     8fb:	20 20 20 20 20 43 61 72 64 20 48 6f 6c 64 65 72          Card Holder
     90b:	20 20 3a 20 25 73 20 00                               : %s .

00000913 <__c.8421>:
     913:	20 20 20 20 20 43 61 72 64 20 49 44 20 20 20 20          Card ID    
     923:	20 20 3a 20 25 73 00                                  : %s.

0000092a <__c.8418>:
     92a:	20 20 20 20 20 20 20 20 20 4c 4f 59 41 4c 54 59              LOYALTY
     93a:	20 49 4e 46 4f 52 4d 41 54 49 4f 4e 20 20 20 20      INFORMATION    
     94a:	20 20 00                                              .

0000094d <__c.8415>:
     94d:	20 20 20 20 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d         ------------
     95d:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     96d:	2d 2d 00                                            --.

00000970 <__c.8412>:
     970:	20 20 20 20 2e 25 73 00                                 .%s.

00000978 <__c.8408>:
     978:	20 20 20 20 54 61 6e 64 61 20 54 61 6e 67 61 6e         Tanda Tangan
     988:	20 20 28 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f       (_____________
     998:	5f 29 00                                            _).

0000099b <__c.8403>:
     99b:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     9ab:	20 20 20 20 20 20 00                                      .

000009b2 <__c.8400>:
     9b2:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     9c2:	20 20 20 20 20 20 00                                      .

000009c9 <__c.8397>:
     9c9:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     9d9:	20 00                                                .

000009db <__c.8395>:
     9db:	20 20 00                                              .

000009de <__c.8393>:
     9de:	20 20 20 20 41 70 70 72 20 43 6f 64 65 3a 20 25         Appr Code: %
     9ee:	73 00                                               s.

000009f0 <__c.8391>:
     9f0:	25 73 20 20 00                                      %s  .

000009f5 <__c.8389>:
     9f5:	20 20 20 20 4e 61 6d 61 20 20 20 20 20 3a 20 25         Nama     : %
     a05:	73 00                                               s.

00000a07 <__c.8386>:
     a07:	20 20 20 20 20 20 20 20 20 20 2a 2a 2a 20 50 55               *** PU
     a17:	4d 50 20 54 45 53 54 20 2a 2a 2a 20 20 20 20 20     MP TEST ***     
     a27:	20 20 00                                              .

00000a2a <__c.8384>:
     a2a:	20 20 20 20 56 6f 75 63 68 65 72 20 4e 6f 3a 20         Voucher No: 
     a3a:	25 73 00                                            %s.

00000a3d <__c.8382>:
     a3d:	20 20 20 20 4b 61 72 74 75 20 49 44 20 3a 20 25         Kartu ID : %
     a4d:	73 00                                               s.

00000a4f <__c.8379>:
     a4f:	20 20 20 20 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d         ------------
     a5f:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     a6f:	2d 2d 00                                            --.

00000a72 <__c.8376>:
     a72:	20 20 20 20 20 20 4f 64 6f 6d 65 74 65 72 20 20           Odometer  
     a82:	20 20 3a 20 25 73 00                                  : %s.

00000a89 <__c.8373>:
     a89:	20 20 20 20 20 20 4e 6f 2e 50 6f 6c 69 73 69 20           No.Polisi 
     a99:	20 20 3a 20 25 73 00                                  : %s.

00000aa0 <__c.8370>:
	...

00000aa1 <__c.8368>:
     aa1:	20 20 20 20 20 20 4a 6d 6c 20 52 75 70 69 61 68           Jml Rupiah
     ab1:	20 20 3a 20 52 70 2e 25 73 00                         : Rp.%s.

00000abb <__c.8365>:
     abb:	20 20 20 20 20 20 4a 6d 6c 20 4c 69 74 65 72 20           Jml Liter 
     acb:	20 20 3a 20 25 73 20 4c 00                            : %s L.

00000ad4 <__c.8362>:
	...

00000ad5 <__c.8360>:
     ad5:	20 20 20 20 20 20 48 61 72 67 61 2f 4c 20 20 20           Harga/L   
     ae5:	20 20 3a 20 52 70 2e 25 73 00                         : Rp.%s.

00000aef <__c.8357>:
     aef:	20 20 20 20 20 20 50 72 6f 64 75 6b 20 20 20 20           Produk    
     aff:	20 20 3a 20 25 73 00                                  : %s.

00000b06 <__c.8354>:
     b06:	20 20 20 20 20 20 50 75 6c 61 75 2f 50 6f 6d 70           Pulau/Pomp
     b16:	61 20 3a 20 5b 25 73 5d 2d 25 73 00                 a : [%s]-%s.

00000b22 <__c.8351>:
     b22:	20 20 20 20 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d         ------------
     b32:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     b42:	2d 2d 00                                            --.

00000b45 <__c.8348>:
     b45:	20 20 20 20 20 20 57 61 6b 74 75 3a 20 25 73 20           Waktu: %s 
     b55:	25 73 20 00                                         %s .

00000b59 <__c.8344>:
     b59:	20 20 20 20 20 20 53 68 69 66 74 3a 20 25 73 20           Shift: %s 
     b69:	20 4e 6f 2e 54 72 61 6e 73 3a 20 25 73 20 00         No.Trans: %s .

00000b78 <__c.8327>:
     b78:	20 00                                                .

00000b7a <__c.8325>:
     b7a:	20 20 20 20 20 20 20 20 20 20 20 20 20 44 55 50                  DUP
     b8a:	4c 49 43 41 54 45 20 43 4f 50 59 20 20 20 20 20     LICATE COPY     
     b9a:	20 20 20 00                                            .

00000b9e <__c.7913>:
     b9e:	45 72 72 6f 72 20 4e 6f 20 43 6f 6e 6e 65 63 74     Error No Connect
     bae:	69 6f 6e 00                                         ion.

00000bb2 <__c.7907>:
     bb2:	50 72 6f 73 65 73 00                                Proses.

00000bb9 <__c.7905>:
     bb9:	53 65 6e 64 20 52 65 71 75 65 73 74 00              Send Request.

00000bc6 <__c.7900>:
     bc6:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
     bd6:	6e 74 65 72 00                                      nter.

00000bdb <__c.7898>:
     bdb:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
     beb:	6e 74 65 72 00                                      nter.

00000bf0 <__c.7895>:
     bf0:	5b 2a 5d 43 61 6e 63 65 6c 20 20 5b 23 5d 45 6e     [*]Cancel  [#]En
     c00:	74 65 72 20 00                                      ter .

00000c05 <__c.7893>:
     c05:	4f 64 6f 6d 65 74 65 72 3a 5f 20 00                 Odometer:_ .

00000c11 <__c.7891>:
     c11:	50 6c 61 74 20 4e 6f 3a 20 25 73 20 00              Plat No: %s .

00000c1e <__c.7888>:
     c1e:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
     c2e:	6e 74 65 72 00                                      nter.

00000c33 <__c.7886>:
     c33:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
     c43:	6e 74 65 72 00                                      nter.

00000c48 <__c.7883>:
     c48:	5b 2a 5d 43 61 6e 63 65 6c 20 20 5b 23 5d 45 6e     [*]Cancel  [#]En
     c58:	74 65 72 20 00                                      ter .

00000c5d <__c.7881>:
     c5d:	5f 00                                               _.

00000c5f <__c.7879>:
     c5f:	49 6e 70 75 74 20 50 6c 61 74 20 4e 6f 3a 20 00     Input Plat No: .

00000c6f <__c.7803>:
     c6f:	23 29 53 61 76 65 00                                #)Save.

00000c76 <__c.7801>:
     c76:	34 29 54 65 72 6d 49 44 3a 25 64 20 00              4)TermID:%d .

00000c83 <__c.7799>:
     c83:	25 64 00                                            %d.

00000c86 <__c.7787>:
     c86:	25 64 00                                            %d.

00000c89 <__c.7779>:
     c89:	23 29 53 61 76 65 00                                #)Save.

00000c90 <__c.7777>:
     c90:	34 29 54 65 72 6d 49 44 3a 25 64 20 00              4)TermID:%d .

00000c9d <__c.7775>:
     c9d:	33 29 4e 6f 74 69 66 20 3a 20 20 20 20 20 2a 29     3)Notif :     *)
     cad:	45 78 69 74 00                                      Exit.

00000cb2 <__c.7773>:
     cb2:	32 29 44 2f 54 20 20 20 3a 00                       2)D/T   :.

00000cbc <__c.7771>:
     cbc:	31 29 4d 6f 6e 65 79 20 3a 00                       1)Money :.

00000cc6 <__c.7718>:
     cc6:	25 2e 32 64 00                                      %.2d.

00000ccb <__c.7716>:
     ccb:	25 64 00                                            %d.

00000cce <__c.7699>:
     cce:	25 2e 32 64 00                                      %.2d.

00000cd3 <__c.7697>:
     cd3:	25 64 00                                            %d.

00000cd6 <__c.7689>:
     cd6:	34 29 43 75 74 20 3a 20 20 2a 29 45 78 69 74 00     4)Cut :  *)Exit.

00000ce6 <__c.7687>:
     ce6:	33 29 4c 6f 67 6f 3a 20 20 23 29 53 61 76 65 00     3)Logo:  #)Save.

00000cf6 <__c.7685>:
     cf6:	32 29 53 69 7a 65 3a 20 20 36 29 53 70 61 63 65     2)Size:  6)Space
     d06:	20 3a 00                                             :.

00000d09 <__c.7683>:
     d09:	31 29 54 79 70 65 3a 20 20 35 29 53 63 72 6f 6c     1)Type:  5)Scrol
     d19:	6c 3a 00                                            l:.

00000d1c <__c.7619>:
     d1c:	2a 29 43 61 6e 63 65 6c 20 20 20 20 20 20 23 29     *)Cancel      #)
     d2c:	53 61 76 65 00                                      Save.

00000d31 <__c.7617>:
     d31:	54 49 4d 45 20 3a 20 00                             TIME : .

00000d39 <__c.7615>:
     d39:	44 41 54 45 20 3a 20 00                             DATE : .

00000d41 <__c.7565>:
     d41:	25 64 00                                            %d.

00000d44 <__c.7554>:
     d44:	25 64 00                                            %d.

00000d47 <__c.7546>:
     d47:	2a 29 45 78 69 74 20 20 20 20 20 20 20 20 23 29     *)Exit        #)
     d57:	53 61 76 65 00                                      Save.

00000d5c <__c.7544>:
     d5c:	32 29 4e 32 3a 20 20 34 29 4e 34 3a 20 20 36 29     2)N2:  4)N4:  6)
     d6c:	4e 36 3a 00                                         N6:.

00000d70 <__c.7542>:
     d70:	31 29 4e 31 3a 20 20 33 29 4e 33 3a 20 20 35 29     1)N1:  3)N3:  5)
     d80:	4e 35 3a 00                                         N5:.

00000d84 <__c.7540>:
     d84:	50 72 6f 64 75 63 74 20 46 49 50 25 2e 32 64 00     Product FIP%.2d.

00000d94 <__c.7456>:
     d94:	43 6f 6d 70 6c 65 74 65 64 00                       Completed.

00000d9e <__c.7454>:
     d9e:	43 61 6e 63 65 6c 20 20 20 20 20 00                 Cancel     .

00000daa <__c.7451>:
     daa:	49 64 5b 25 64 5d 3d 25 2e 32 64 20 20 00           Id[%d]=%.2d  .

00000db8 <__c.7448>:
     db8:	53 61 76 69 6e 67 2e 2e 00                          Saving...

00000dc1 <__c.7446>:
     dc1:	2d 50 75 6d 70 49 44 2d 00                          -PumpID-.

00000dca <__c.7442>:
     dca:	20 20 20 20 4e 6f 74 20 41 6c 6c 6f 77 65 64 20         Not Allowed 
     dda:	20 20 20 20 00                                          .

00000ddf <__c.7440>:
     ddf:	20 20 44 75 70 6c 69 63 61 74 65 20 50 75 6d 70       Duplicate Pump
     def:	49 44 20 20 00                                      ID  .

00000df4 <__c.7438>:
     df4:	20 20 20 20 20 20 57 61 72 6e 69 6e 67 21 20 20           Warning!  
     e04:	20 20 20 20 00                                          .

00000e09 <__c.7426>:
     e09:	25 64 2e 50 25 2e 32 64 20 7c 20 25 64 2e 50 25     %d.P%.2d | %d.P%
     e19:	2e 32 64 00                                         .2d.

00000e1d <__c.7420>:
     e1d:	23 29 53 61 76 65 00                                #)Save.

00000e24 <__c.7418>:
     e24:	2a 29 42 61 63 6b 00                                *)Back.

00000e2b <__c.7413>:
     e2b:	25 64 2e 50 25 2e 32 64 20 7c 20 25 64 2e 50 25     %d.P%.2d | %d.P%
     e3b:	2e 32 64 00                                         .2d.

00000e3f <__c.7364>:
     e3f:	25 2e 32 64 00                                      %.2d.

00000e44 <__c.7358>:
     e44:	25 2e 32 64 00                                      %.2d.

00000e49 <__c.7356>:
     e49:	34 29 34 3a 20 20 20 38 29 38 3a 20 20 20 2a 29     4)4:   8)8:   *)
     e59:	45 78 69 74 00                                      Exit.

00000e5e <__c.7354>:
     e5e:	33 29 33 3a 20 20 20 37 29 37 3a 20 20 20 23 29     3)3:   7)7:   #)
     e6e:	53 61 76 65 00                                      Save.

00000e73 <__c.7352>:
     e73:	32 29 32 3a 20 20 20 36 29 36 3a 00                 2)2:   6)6:.

00000e7f <__c.7350>:
     e7f:	31 29 31 3a 20 20 20 35 29 35 3a 00                 1)1:   5)5:.

00000e8b <__c.7316>:
     e8b:	5b 2a 5d 45 78 69 74 20 20 5b 23 5d 43 68 61 6e     [*]Exit  [#]Chan
     e9b:	67 65 20 00                                         ge .

00000e9f <__c.7314>:
     e9f:	25 64 2e 25 73 00                                   %d.%s.

00000ea5 <__c.7309>:
     ea5:	2d 44 69 73 70 65 6e 73 65 72 20 42 72 61 6e 64     -Dispenser Brand
     eb5:	2d 00                                               -.

00000eb7 <__c.7293>:
     eb7:	2a 29 45 78 69 74 00                                *)Exit.

00000ebe <__c.7291>:
     ebe:	32 29 50 72 6f 64 75 63 74 00                       2)Product.

00000ec8 <__c.7289>:
     ec8:	31 29 49 44 00                                      1)ID.

00000ecd <__c.7274>:
     ecd:	2a 29 45 78 69 74 00                                *)Exit.

00000ed4 <__c.7269>:
     ed4:	25 64 2e 50 25 2e 32 64 20 7c 20 25 64 2e 50 25     %d.P%.2d | %d.P%
     ee4:	2e 32 64 20 00                                      .2d .

00000ee9 <__c.7260>:
     ee9:	25 2e 32 64 00                                      %.2d.

00000eee <__c.7059>:
     eee:	5b 2a 5d 45 78 69 74 00                             [*]Exit.

00000ef6 <__c.7057>:
     ef6:	36 2e 41 63 74 3a 25 64 00                          6.Act:%d.

00000eff <__c.7055>:
     eff:	35 2e 44 6c 79 3a 25 64 00                          5.Dly:%d.

00000f08 <__c.7053>:
     f08:	34 2e 54 69 6d 50 6f 6f 6c 3a 25 64 00              4.TimPool:%d.

00000f15 <__c.7051>:
     f15:	33 2e 54 72 79 53 65 6e 64 3a 25 64 00              3.TrySend:%d.

00000f22 <__c.7049>:
     f22:	32 2e 6e 4e 6f 50 75 6d 70 3a 25 64 00              2.nNoPump:%d.

00000f2f <__c.7047>:
     f2f:	31 2e 4d 61 78 50 75 6d 70 3a 25 64 00              1.MaxPump:%d.

00000f3c <__c.6988>:
     f3c:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 00              [*]Back     .

00000f49 <__c.6983>:
     f49:	43 4f 4d 25 64 3a 25 64 00                          COM%d:%d.

00000f52 <__c.6981>:
     f52:	20 20 20 20 20 2d 42 61 75 64 72 61 74 65 2d 20          -Baudrate- 
     f62:	20 20 20 20 00                                          .

00000f67 <__c.6976>:
     f67:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 20 00           [*]Back      .

00000f75 <__c.6974>:
     f75:	33 2e 43 4f 4d 33 3a 34 38 35 00                    3.COM3:485.

00000f80 <__c.6972>:
     f80:	33 2e 43 4f 4d 33 3a 32 33 32 00                    3.COM3:232.

00000f8b <__c.6970>:
     f8b:	33 2e 43 4f 4d 33 3a 54 54 4c 00                    3.COM3:TTL.

00000f96 <__c.6968>:
     f96:	32 2e 42 61 75 64 72 61 74 65 00                    2.Baudrate.

00000fa1 <__c.6966>:
     fa1:	31 2e 4d 6f 64 65 3a 53 74 61 6e 64 61 6c 6f 6e     1.Mode:Standalon
     fb1:	65 00                                               e.

00000fb3 <__c.6964>:
     fb3:	31 2e 4d 6f 64 65 3a 53 6c 61 76 65 00              1.Mode:Slave.

00000fc0 <__c.6962>:
     fc0:	31 2e 4d 6f 64 65 3a 4e 6f 6e 65 00                 1.Mode:None.

00000fcc <__c.6915>:
     fcc:	49 6e 76 61 6c 69 64 20 4f 6c 64 20 50 61 73 73     Invalid Old Pass
     fdc:	77 6f 72 64 00                                      word.

00000fe1 <__c.6913>:
     fe1:	20 20 20 20 20 20 45 52 52 4f 52 20 20 20 20 20           ERROR     
     ff1:	20 20 20 20 00                                          .

00000ff6 <__c.6911>:
     ff6:	49 6e 76 61 6c 69 64 20 4e 65 77 20 50 61 73 73     Invalid New Pass
    1006:	77 6f 72 64 00                                      word.

0000100b <__c.6909>:
    100b:	20 20 20 20 20 20 45 52 52 4f 52 20 20 20 20 20           ERROR     
    101b:	20 20 20 20 00                                          .

00001020 <__c.6907>:
    1020:	20 20 20 50 61 73 73 77 6f 72 64 20 53 61 76 65        Password Save
    1030:	64 20 20 20 00                                      d   .

00001035 <__c.6905>:
    1035:	20 20 20 20 20 43 6f 6d 70 6c 65 74 65 64 20 20          Completed  
    1045:	20 20 20 20 00                                          .

0000104a <__c.6901>:
    104a:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    105a:	6e 74 65 72 00                                      nter.

0000105f <__c.6898>:
    105f:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
    106f:	6e 74 65 72 00                                      nter.

00001074 <__c.6895>:
    1074:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1084:	6e 74 65 72 00                                      nter.

00001089 <__c.6893>:
    1089:	4e 65 77 3a 5f 20 20 20 20 20 20 20 20 20 20 20     New:_           
    1099:	20 20 20 20 00                                          .

0000109e <__c.6889>:
    109e:	56 61 6c 69 64 61 74 69 6e 67 2e 2e 00              Validating...

000010ab <__c.6885>:
    10ab:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    10bb:	6e 74 65 72 00                                      nter.

000010c0 <__c.6882>:
    10c0:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
    10d0:	6e 74 65 72 00                                      nter.

000010d5 <__c.6877>:
    10d5:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    10e5:	6e 74 65 72 00                                      nter.

000010ea <__c.6875>:
    10ea:	4e 65 77 3a 5f 20 20 20 20 20 20 20 20 20 20 20     New:_           
    10fa:	20 20 20 20 00                                          .

000010ff <__c.6871>:
    10ff:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    110f:	6e 74 65 72 00                                      nter.

00001114 <__c.6868>:
    1114:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
    1124:	6e 74 65 72 00                                      nter.

00001129 <__c.6863>:
    1129:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1139:	6e 74 65 72 00                                      nter.

0000113e <__c.6861>:
    113e:	4e 65 77 3a 5f 20 20 20 20 20 20 20 20 20 20 20     New:_           
    114e:	20 20 20 20 00                                          .

00001153 <__c.6857>:
    1153:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1163:	6e 74 65 72 00                                      nter.

00001168 <__c.6855>:
    1168:	4f 6c 64 3a 5f 00                                   Old:_.

0000116e <__c.6853>:
    116e:	2d 41 64 6d 69 6e 69 73 74 72 61 74 6f 72 2d 00     -Administrator-.

0000117e <__c.6851>:
    117e:	2d 53 75 70 65 72 76 69 73 6f 72 2d 00              -Supervisor-.

0000118b <__c.6843>:
    118b:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 00              [*]Back     .

00001198 <__c.6841>:
    1198:	32 2e 41 64 6d 69 6e 69 73 74 72 61 74 6f 72 00     2.Administrator.

000011a8 <__c.6839>:
    11a8:	31 2e 53 75 70 65 72 76 69 73 6f 72 00              1.Supervisor.

000011b5 <__c.6837>:
    11b5:	2d 43 68 61 6e 67 65 20 50 61 73 73 77 6f 72 64     -Change Password
    11c5:	2d 00                                               -.

000011c7 <__c.6834>:
    11c7:	53 61 76 65 64 20 00                                Saved .

000011ce <__c.6828>:
    11ce:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    11de:	6e 74 65 72 00                                      nter.

000011e3 <__c.6825>:
    11e3:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
    11f3:	6e 74 65 72 00                                      nter.

000011f8 <__c.6820>:
    11f8:	5b 2a 5d 4e 6f 20 20 20 20 5b 23 5d 59 65 73 00     [*]No    [#]Yes.

00001208 <__c.6818>:
    1208:	53 61 76 65 3f 00                                   Save?.

0000120e <__c.6816>:
    120e:	4e 65 77 20 4f 70 65 72 61 74 6f 72 3a 00           New Operator:.

0000121c <__c.6814>:
    121c:	25 73 00                                            %s.

0000121f <__c.6810>:
    121f:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    122f:	6e 74 65 72 00                                      nter.

00001234 <__c.6808>:
    1234:	4e 65 77 20 3a 5f 20 20 20 20 20 20 20 20 20 20     New :_          
    1244:	20 20 20 20 00                                          .

00001249 <__c.6806>:
    1249:	4e 61 6d 65 3a 00                                   Name:.

0000124f <__c.6804>:
    124f:	25 73 00                                            %s.

00001252 <__c.6795>:
    1252:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 20 20 20 20     [*]Back         
    1262:	20 00                                                .

00001264 <__c.6793>:
    1264:	32 2e 43 68 61 6e 67 65 20 50 61 73 73 77 6f 72     2.Change Passwor
    1274:	64 00                                               d.

00001276 <__c.6791>:
    1276:	31 2e 43 68 61 6e 67 65 20 4f 70 65 72 61 74 6f     1.Change Operato
    1286:	72 00                                               r.

00001288 <__c.6707>:
    1288:	2a 29 42 61 63 6b 00                                *)Back.

0000128f <__c.6705>:
    128f:	34 2e 53 70 61 72 61 74 6f 72 3a 25 63 20 00        4.Sparator:%c .

0000129e <__c.6703>:
    129e:	33 2e 44 65 63 69 6d 61 6c 20 3a 25 63 20 00        3.Decimal :%c .

000012ad <__c.6701>:
    12ad:	32 2e 54 2e 4d 6f 6e 65 79 20 3a 25 64 20 00        2.T.Money :%d .

000012bc <__c.6699>:
    12bc:	31 2e 54 2e 56 6f 6c 75 6d 65 3a 25 64 20 00        1.T.Volume:%d .

000012cb <__c.6694>:
    12cb:	5b 2a 5d 42 61 63 6b 20 20 5b 23 5d 4e 65 78 74     [*]Back  [#]Next
	...

000012dc <__c.6692>:
    12dc:	33 2e 4d 6f 6e 65 79 20 3a 25 64 00                 3.Money :%d.

000012e8 <__c.6690>:
    12e8:	32 2e 56 6f 6c 75 6d 65 3a 25 64 00                 2.Volume:%d.

000012f4 <__c.6688>:
    12f4:	31 2e 50 72 69 63 65 20 3a 25 64 00                 1.Price :%d.

00001300 <__c.6671>:
    1300:	34 29 42 72 61 6e 64 20 20 2a 29 45 78 69 74 00     4)Brand  *)Exit.

00001310 <__c.6669>:
    1310:	33 29 4c 61 62 65 6c 20 20 00                       3)Label  .

0000131a <__c.6667>:
    131a:	32 29 50 72 6f 64 75 63 74 00                       2)Product.

00001324 <__c.6665>:
    1324:	31 29 49 44 20 20 20 20 20 00                       1)ID     .

0000132e <__c.6625>:
    132e:	2a 29 42 61 63 6b 20 20 20 20 23 29 4f 4b 20 20     *)Back    #)OK  
    133e:	20 20 20 20 00                                          .

00001343 <__c.6623>:
    1343:	4e 65 77 3a 5f 00                                   New:_.

00001349 <__c.6621>:
    1349:	4f 6c 64 3a 25 73 00                                Old:%s.

00001350 <__c.6619>:
    1350:	2a 29 42 61 63 6b 20 20 20 20 23 29 4f 4b 20 20     *)Back    #)OK  
    1360:	20 20 20 20 00                                          .

00001365 <__c.6617>:
    1365:	4e 65 77 3a 5f 00                                   New:_.

0000136b <__c.6615>:
    136b:	45 64 69 74 20 50 72 6f 64 75 63 74 20 4e 61 6d     Edit Product Nam
    137b:	65 20 20 20 00                                      e   .

00001380 <__c.6613>:
    1380:	4f 6c 64 3a 25 73 00                                Old:%s.

00001387 <__c.6610>:
    1387:	2a 29 42 61 63 6b 20 20 20 20 20 20 20 00           *)Back       .

00001395 <__c.6608>:
    1395:	32 29 25 73 00                                      2)%s.

0000139a <__c.6606>:
    139a:	31 29 25 73 00                                      1)%s.

0000139f <__c.6601>:
    139f:	2a 29 42 61 63 6b 00                                *)Back.

000013a6 <__c.6596>:
    13a6:	25 64 29 25 73 00                                   %d)%s.

000013ac <__c.6527>:
    13ac:	2a 29 42 61 63 6b 20 20 20 20 20 20 20 20 20 20     *)Back          
    13bc:	20 20 20 20 00                                          .

000013c1 <__c.6525>:
    13c1:	33 29 50 75 6d 70 50 6f 6f 6c 69 6e 67 20 20 20     3)PumpPooling   
    13d1:	20 20 20 20 00                                          .

000013d6 <__c.6523>:
    13d6:	32 29 53 79 73 74 65 6d 20 20 20 20 20 20 20 20     2)System        
    13e6:	20 20 20 20 00                                          .

000013eb <__c.6521>:
    13eb:	31 29 4f 70 65 72 61 74 6f 72 20 20 20 20 20 20     1)Operator      
    13fb:	20 20 20 20 00                                          .

00001400 <__c.6518>:
    1400:	34 29 44 61 74 65 74 69 6d 65 20 2a 29 45 78 69     4)Datetime *)Exi
    1410:	74 20 20 20 00                                      t   .

00001415 <__c.6516>:
    1415:	33 29 44 65 63 69 6d 61 6c 20 20 37 29 4e 65 78     3)Decimal  7)Nex
    1425:	74 20 20 20 00                                      t   .

0000142a <__c.6514>:
    142a:	32 29 50 75 6d 70 20 20 20 20 20 36 29 48 6f 73     2)Pump     6)Hos
    143a:	74 20 20 20 00                                      t   .

0000143f <__c.6512>:
    143f:	31 29 50 72 6f 64 75 63 74 20 20 35 29 50 72 69     1)Product  5)Pri
    144f:	6e 74 65 72 00                                      nter.

00001454 <__c.6427>:
    1454:	2e 00                                               ..

00001456 <__c.6425>:
    1456:	25 64 00                                            %d.

00001459 <__c.6423>:
    1459:	20 20 20 00                                            .

0000145d <__c.6421>:
    145d:	2e 00                                               ..

0000145f <__c.6419>:
    145f:	25 64 00                                            %d.

00001462 <__c.6417>:
    1462:	20 20 20 00                                            .

00001466 <__c.6410>:
    1466:	5b 2a 5d 63 61 6e 63 65 6c 20 20 5b 23 5d 6e 65     [*]cancel  [#]ne
    1476:	78 74 20 20 00                                      xt  .

0000147b <__c.6408>:
    147b:	4e 65 77 3a 20 20 20 5f 2e 20 20 20 2e 20 20 20     New:   _.   .   
    148b:	2e 20 20 20 00                                      .   .

00001490 <__c.6406>:
    1490:	4f 6c 64 3a 20 25 64 2e 25 64 2e 25 64 2e 25 64     Old: %d.%d.%d.%d
	...

000014a1 <__c.6404>:
    14a1:	53 65 72 76 65 72 20 49 50 00                       Server IP.

000014ab <__c.6315>:
    14ab:	2e 00                                               ..

000014ad <__c.6313>:
    14ad:	25 64 00                                            %d.

000014b0 <__c.6311>:
    14b0:	20 20 20 00                                            .

000014b4 <__c.6309>:
    14b4:	2e 00                                               ..

000014b6 <__c.6307>:
    14b6:	25 64 00                                            %d.

000014b9 <__c.6305>:
    14b9:	20 20 20 00                                            .

000014bd <__c.6298>:
    14bd:	5b 2a 5d 63 61 6e 63 65 6c 20 20 5b 23 5d 6e 65     [*]cancel  [#]ne
    14cd:	78 74 20 20 00                                      xt  .

000014d2 <__c.6296>:
    14d2:	4e 65 77 3a 20 20 20 5f 2e 20 20 20 2e 20 20 20     New:   _.   .   
    14e2:	2e 20 20 20 00                                      .   .

000014e7 <__c.6294>:
    14e7:	4f 6c 64 3a 20 25 64 2e 25 64 2e 25 64 2e 25 64     Old: %d.%d.%d.%d
	...

000014f8 <__c.6292>:
    14f8:	43 6c 69 65 6e 74 20 49 50 00                       Client IP.

00001502 <__c.6250>:
    1502:	25 73 25 73 00                                      %s%s.

00001507 <__c.6246>:
    1507:	5b 2a 5d 4e 6f 20 5b 23 5d 59 65 73 00              [*]No [#]Yes.

00001514 <__c.6244>:
    1514:	53 61 76 65 20 46 6f 6f 74 65 72 25 64 20 3f 00     Save Footer%d ?.

00001524 <__c.6240>:
    1524:	5b 2a 5d 4e 6f 20 20 5b 23 5d 59 65 73 00           [*]No  [#]Yes.

00001532 <__c.6238>:
    1532:	41 6c 69 67 6e 20 43 65 6e 74 65 72 3f 00           Align Center?.

00001540 <__c.6235>:
    1540:	5b 2a 5d 42 61 63 6b 20 20 5b 23 5d 4f 4b 00        [*]Back  [#]OK.

0000154f <__c.6233>:
    154f:	45 64 69 74 20 46 6f 6f 74 65 72 25 64 20 00        Edit Footer%d .

0000155e <__c.6229>:
    155e:	2a 29 45 78 69 74 20 20 20 20 20 20 20 20 20 20     *)Exit          
    156e:	20 20 20 20 00                                          .

00001573 <__c.6227>:
    1573:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    1583:	20 20 20 20 00                                          .

00001588 <__c.6225>:
    1588:	32 29 46 6f 6f 74 65 72 32 20 20 34 29 46 6f 6f     2)Footer2  4)Foo
    1598:	74 65 72 34 00                                      ter4.

0000159d <__c.6223>:
    159d:	31 29 46 6f 6f 74 65 72 31 20 20 33 29 46 6f 6f     1)Footer1  3)Foo
    15ad:	74 65 72 33 00                                      ter3.

000015b2 <__c.6192>:
    15b2:	25 73 25 73 00                                      %s%s.

000015b7 <__c.6188>:
    15b7:	5b 2a 5d 4e 6f 20 5b 23 5d 59 65 73 00              [*]No [#]Yes.

000015c4 <__c.6186>:
    15c4:	53 61 76 65 20 48 65 61 64 65 72 25 64 20 3f 00     Save Header%d ?.

000015d4 <__c.6182>:
    15d4:	5b 2a 5d 4e 6f 20 20 5b 23 5d 59 65 73 00           [*]No  [#]Yes.

000015e2 <__c.6180>:
    15e2:	41 6c 69 67 6e 20 43 65 6e 74 65 72 3f 00           Align Center?.

000015f0 <__c.6177>:
    15f0:	5b 2a 5d 42 61 63 6b 20 20 5b 23 5d 4f 4b 00        [*]Back  [#]OK.

000015ff <__c.6175>:
    15ff:	45 64 69 74 20 48 65 61 64 65 72 25 64 20 00        Edit Header%d .

0000160e <__c.6171>:
    160e:	2a 29 45 78 69 74 20 20 20 20 20 20 20 20 20 20     *)Exit          
    161e:	20 20 20 20 00                                          .

00001623 <__c.6169>:
    1623:	33 29 48 65 61 64 65 72 33 20 20 36 29 48 65 61     3)Header3  6)Hea
    1633:	64 65 72 36 00                                      der6.

00001638 <__c.6167>:
    1638:	32 29 48 65 61 64 65 72 32 20 20 35 29 48 65 61     2)Header2  5)Hea
    1648:	64 65 72 35 00                                      der5.

0000164d <__c.6165>:
    164d:	31 29 48 65 61 64 65 72 31 20 20 34 29 48 65 61     1)Header1  4)Hea
    165d:	64 65 72 34 00                                      der4.

00001662 <__c.6122>:
    1662:	2a 29 45 78 69 74 00                                *)Exit.

00001669 <__c.6120>:
    1669:	33 29 50 61 73 73 77 6f 72 64 20 20 20 20 20 20     3)Password      
    1679:	20 20 20 20 00                                          .

0000167e <__c.6118>:
    167e:	32 29 46 6f 6f 74 65 72 20 20 20 20 20 20 20 20     2)Footer        
    168e:	20 20 20 20 00                                          .

00001693 <__c.6116>:
    1693:	31 29 48 65 61 64 65 72 20 20 20 20 20 20 20 20     1)Header        
    16a3:	20 20 20 20 00                                          .

000016a8 <__c.6114>:
    16a8:	32 29 46 6f 6f 74 65 72 20 20 20 20 35 29 53 65     2)Footer    5)Se
    16b8:	72 76 65 72 00                                      rver.

000016bd <__c.6112>:
    16bd:	31 29 48 65 61 64 65 72 20 20 20 20 34 29 43 6c     1)Header    4)Cl
    16cd:	69 65 6e 74 00                                      ient.

000016d2 <__c.6058>:
    16d2:	53 61 76 69 6e 67 20 53 68 69 66 74 44 61 74 61     Saving ShiftData
    16e2:	2e 2e 20 00                                         .. .

000016e6 <__c.6053>:
    16e6:	25 73 20 25 73 00                                   %s %s.

000016ec <__c.6051>:
    16ec:	50 72 69 6e 74 69 6e 67 20 54 6f 74 61 6c 69 7a     Printing Totaliz
    16fc:	65 72 00                                            er.

000016ff <__c.6047>:
    16ff:	43 61 6e 63 65 6c 00                                Cancel.

00001706 <__c.6042>:
    1706:	45 72 72 6f 72 20 2d 20 4e 6f 20 50 75 6d 70 3a     Error - No Pump:
    1716:	25 64 20 00                                         %d .

0000171a <__c.6037>:
    171a:	57 61 69 74 20 50 75 6d 70 3a 25 64 20 00           Wait Pump:%d .

00001728 <__c.6033>:
    1728:	57 61 69 74 20 50 75 6d 70 3a 25 64 20 00           Wait Pump:%d .

00001736 <__c.6031>:
    1736:	54 6f 74 61 6c 69 7a 65 72 2e 2e 00                 Totalizer...

00001742 <__c.5959>:
    1742:	2a 29 45 78 69 74 00                                *)Exit.

00001749 <__c.5957>:
    1749:	33 2e 4c 6f 63 6b 20 50 75 6d 70 20 20 00           3.Lock Pump  .

00001757 <__c.5955>:
    1757:	32 2e 43 6c 6f 73 65 20 44 61 79 20 20 00           2.Close Day  .

00001765 <__c.5953>:
    1765:	31 2e 43 6c 6f 73 65 20 53 68 69 66 74 00           1.Close Shift.

00001773 <__c.5911>:
    1773:	34 29 53 65 74 74 69 6e 67 73 20 20 20 2a 29 45     4)Settings   *)E
    1783:	78 69 74 20 00                                      xit .

00001788 <__c.5909>:
    1788:	33 29 43 6c 6f 73 65 44 61 79 20 20 20 20 20 20     3)CloseDay      
    1798:	20 20 20 20 00                                          .

0000179d <__c.5907>:
    179d:	32 29 43 6c 6f 73 65 53 68 69 66 74 20 20 20 20     2)CloseShift    
    17ad:	20 20 20 20 00                                          .

000017b2 <__c.5905>:
    17b2:	31 29 52 65 50 72 69 6e 74 20 20 20 20 20 20 20     1)RePrint       
    17c2:	20 20 20 20 00                                          .

000017c7 <__c.5870>:
    17c7:	50 61 73 73 77 6f 72 64 20 52 65 73 74 6f 72 65     Password Restore
    17d7:	64 00                                               d.

000017d9 <__c.5866>:
    17d9:	49 6e 76 61 6c 69 64 20 52 65 73 74 6f 72 65 20     Invalid Restore 
    17e9:	20 00                                                .

000017eb <__c.5863>:
    17eb:	30 30 30 30 30 00                                   00000.

000017f1 <__c.5861>:
    17f1:	31 31 31 31 31 00                                   11111.

000017f7 <__c.5857>:
    17f7:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1807:	6e 74 65 72 00                                      nter.

0000180c <__c.5854>:
    180c:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
    181c:	6e 74 65 72 00                                      nter.

00001821 <__c.5847>:
    1821:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1831:	6e 74 65 72 00                                      nter.

00001836 <__c.5845>:
    1836:	5f 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20     _               
    1846:	20 20 20 20 00                                          .

0000184b <__c.5843>:
    184b:	45 6e 74 65 72 20 52 65 73 74 6f 72 65 20 43 6f     Enter Restore Co
    185b:	64 65 20 20 00                                      de  .

00001860 <__c.5841>:
    1860:	4b 65 79 20 53 74 61 6d 70 3a 25 73 20 00           Key Stamp:%s .

0000186e <__c.5837>:
    186e:	49 6e 76 61 6c 69 64 20 43 6f 64 65 20 20 20 20     Invalid Code    
    187e:	20 20 20 20 00                                          .

00001883 <__c.5834>:
	...

00001884 <__c.5832>:
    1884:	25 73 00                                            %s.

00001887 <__c.5830>:
    1887:	25 73 00                                            %s.

0000188a <__c.5827>:
    188a:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    189a:	6e 74 65 72 00                                      nter.

0000189f <__c.5824>:
    189f:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
    18af:	6e 74 65 72 00                                      nter.

000018b4 <__c.5817>:
	...

000018b5 <__c.5815>:
    18b5:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    18c5:	6e 74 65 72 00                                      nter.

000018ca <__c.5813>:
    18ca:	5f 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20     _               
    18da:	20 20 20 20 00                                          .

000018df <__c.5811>:
    18df:	45 6e 74 65 72 20 47 65 4e 69 55 73 20 43 6f 64     Enter GeNiUs Cod
    18ef:	65 20 20 20 00                                      e   .

000018f4 <__c.5806>:
    18f4:	49 6e 76 61 6c 69 64 20 43 6f 64 65 20 20 20 20     Invalid Code    
    1904:	20 20 20 20 00                                          .

00001909 <__c.5803>:
    1909:	52 65 73 65 74 20 43 6f 6d 70 6c 65 74 65 00        Reset Complete.

00001918 <__c.5800>:
    1918:	50 6c 65 61 73 65 20 57 61 69 74 2e 2e 00           Please Wait...

00001926 <__c.5798>:
    1926:	52 65 73 65 74 20 45 45 50 52 4f 4d 00              Reset EEPROM.

00001933 <__c.5794>:
    1933:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1943:	6e 74 65 72 00                                      nter.

00001948 <__c.5791>:
    1948:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
    1958:	6e 74 65 72 00                                      nter.

0000195d <__c.5784>:
    195d:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    196d:	6e 74 65 72 00                                      nter.

00001972 <__c.5782>:
    1972:	52 65 73 65 74 43 6f 64 65 3a 5f 20 20 20 20 20     ResetCode:_     
    1982:	20 20 20 20 00                                          .

00001987 <__c.5780>:
    1987:	53 65 65 64 20 43 6f 64 65 3a 25 73 00              Seed Code:%s.

00001994 <__c.5778>:
    1994:	2d 4d 61 73 74 65 72 20 52 65 73 65 74 2d 00        -Master Reset-.

000019a3 <__c.5776>:
	...

000019a4 <__c.5774>:
    19a4:	32 32 33 34 35 36 37 38 00                          22345678.

000019ad <__c.5772>:
    19ad:	25 73 00                                            %s.

000019b0 <__c.5763>:
    19b0:	5b 2a 5d 45 78 69 74 20 20 20 20 20 20 20 20 20     [*]Exit         
    19c0:	20 20 20 20 00                                          .

000019c5 <__c.5761>:
    19c5:	32 2e 4d 61 73 74 65 72 20 52 65 73 65 74 20 20     2.Master Reset  
    19d5:	20 20 20 20 00                                          .

000019da <__c.5759>:
    19da:	31 2e 52 65 73 74 6f 72 65 20 50 61 73 73 77 6f     1.Restore Passwo
    19ea:	72 64 20 20 00                                      rd  .

000019ef <__c.5757>:
    19ef:	2d 53 79 73 74 65 6d 20 41 64 6d 69 6e 20 4c 65     -System Admin Le
    19ff:	76 65 6c 2d 00                                      vel-.

00001a04 <__c.5698>:
    1a04:	25 73 25 73 00                                      %s%s.

00001a09 <__c.5670>:
    1a09:	25 73 00                                            %s.

00001a0c <__c.5637>:
    1a0c:	25 63 00                                            %c.

00001a0f <__c.5635>:
    1a0f:	32 30 25 73 00                                      20%s.

00001a14 <__c.5613>:
    1a14:	25 73 00                                            %s.

00001a17 <__c.5565>:
    1a17:	34 32 36 34 36 33 36 00                             4264636.

00001a1f <__c.5562>:
    1a1f:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1a2f:	6e 74 65 72 00                                      nter.

00001a34 <__c.5560>:
    1a34:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
    1a44:	6e 74 65 72 00                                      nter.

00001a49 <__c.5556>:
    1a49:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1a59:	6e 74 65 72 00                                      nter.

00001a5e <__c.5554>:
    1a5e:	5f 00                                               _.

00001a60 <__c.5552>:
    1a60:	50 41 53 53 57 4f 52 44 3a 00                       PASSWORD:.

00001a6a <__c.5524>:
    1a6a:	41 63 63 65 73 73 20 44 65 6e 69 65 64 00           Access Denied.

00001a78 <__c.5451>:
    1a78:	54 43 50 2f 49 50 20 45 72 72 6f 72 00              TCP/IP Error.

00001a85 <__c.5449>:
    1a85:	4e 6f 20 52 65 70 6c 79 20 20 20 20 00              No Reply    .

00001a92 <__c.5445>:
    1a92:	20 20 20 20 20 20 20 00                                    .

00001a9a <__c.5442>:
    1a9a:	50 6c 65 61 73 65 20 57 61 69 74 00                 Please Wait.

00001aa6 <__c.5439>:
    1aa6:	25 73 00                                            %s.

00001aa9 <__c.5437>:
    1aa9:	50 55 4d 50 20 54 45 53 54 00                       PUMP TEST.

00001ab3 <__c.5434>:
    1ab3:	25 73 00                                            %s.

00001ab6 <__c.5431>:
    1ab6:	25 73 00                                            %s.

00001ab9 <__c.5429>:
    1ab9:	25 73 00                                            %s.

00001abc <__c.5427>:
    1abc:	25 73 00                                            %s.

00001abf <__c.5423>:
    1abf:	25 73 00                                            %s.

00001ac2 <__c.5419>:
    1ac2:	50 72 6f 73 65 73 00                                Proses.

00001ac9 <__c.5417>:
    1ac9:	2d 4d 4f 50 20 56 6f 75 63 68 65 72 2d 00           -MOP Voucher-.

00001ad7 <__c.5414>:
    1ad7:	50 72 6f 73 65 73 00                                Proses.

00001ade <__c.5412>:
    1ade:	49 44 3a 25 73 00                                   ID:%s.

00001ae4 <__c.5408>:
    1ae4:	5b 2a 5d 42 61 63 6b 20 20 20 20 5b 23 5d 45 78     [*]Back    [#]Ex
    1af4:	69 74 00                                            it.

00001af7 <__c.5406>:
    1af7:	46 49 50 25 73 00                                   FIP%s.

00001afd <__c.5404>:
    1afd:	54 61 70 20 4b 61 72 74 75 20 52 46 49 44 00        Tap Kartu RFID.

00001b0c <__c.5395>:
    1b0c:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1b1c:	6e 74 65 72 00                                      nter.

00001b21 <__c.5393>:
    1b21:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
    1b31:	6e 74 65 72 00                                      nter.

00001b36 <__c.5390>:
    1b36:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1b46:	6e 74 65 72 00                                      nter.

00001b4b <__c.5388>:
    1b4b:	53 75 72 63 68 61 72 67 65 3a 20 20 20 5f 25 00     Surcharge:   _%.

00001b5b <__c.5386>:
    1b5b:	25 73 00                                            %s.

00001b5e <__c.5382>:
    1b5e:	5b 2a 5d 42 61 63 6b 00                             [*]Back.

00001b66 <__c.5377>:
    1b66:	25 64 2e 25 73 00                                   %d.%s.

00001b6c <__c.5375>:
    1b6c:	53 65 6c 65 63 74 20 42 61 6e 6b 00                 Select Bank.

00001b78 <__c.5370>:
    1b78:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1b88:	6e 74 65 72 00                                      nter.

00001b8d <__c.5368>:
    1b8d:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
    1b9d:	6e 74 65 72 00                                      nter.

00001ba2 <__c.5365>:
    1ba2:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1bb2:	6e 74 65 72 00                                      nter.

00001bb7 <__c.5363>:
    1bb7:	5f 00                                               _.

00001bb9 <__c.5361>:
    1bb9:	4b 6f 64 65 20 56 6f 75 63 68 65 72 00              Kode Voucher.

00001bc6 <__c.5352>:
    1bc6:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 20 20 20 20     [*]Back         
    1bd6:	20 20 20 20 00                                          .

00001bdb <__c.5350>:
    1bdb:	32 2e 42 61 6e 6b 20 20 20 20 34 2e 50 75 6d 70     2.Bank    4.Pump
    1beb:	54 65 73 74 00                                      Test.

00001bf0 <__c.5348>:
    1bf0:	31 2e 41 63 63 6f 75 6e 74 20 33 2e 56 6f 75 63     1.Account 3.Vouc
    1c00:	68 65 72 20 00                                      her .

00001c05 <__c.5346>:
    1c05:	20 20 20 53 65 6c 65 63 74 20 50 61 79 6d 65 6e        Select Paymen
    1c15:	74 20 20 20 00                                      t   .

00001c1a <__c.5297>:
    1c1a:	43 52 45 44 49 54 43 41 52 44 00                    CREDITCARD.

00001c25 <__c.5291>:
    1c25:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 20 20 20 20     [*]Back         
    1c35:	20 20 20 20 00                                          .

00001c3a <__c.5289>:
    1c3a:	32 2e 43 72 65 64 69 74 20 43 61 72 64 20 20 20     2.Credit Card   
    1c4a:	20 20 20 20 00                                          .

00001c4f <__c.5287>:
    1c4f:	31 2e 44 65 62 69 74 2f 46 6c 61 73 68 20 43 61     1.Debit/Flash Ca
    1c5f:	72 64 20 20 00                                      rd  .

00001c64 <__c.5285>:
    1c64:	53 65 6c 65 63 74 20 43 61 72 64 20 54 79 70 65     Select Card Type
	...

00001c75 <__c.5252>:
    1c75:	4e 6f 20 43 6f 6e 6e 65 63 74 69 6f 6e 00           No Connection.

00001c83 <__c.5250>:
    1c83:	54 43 50 2f 49 50 20 45 52 52 4f 52 20 00           TCP/IP ERROR .

00001c91 <__c.5243>:
    1c91:	50 72 65 73 73 20 41 6e 79 20 4b 65 79 00           Press Any Key.

00001c9f <__c.5241>:
    1c9f:	43 6d 20 56 6f 6c 3a 25 73 00                       Cm Vol:%s.

00001ca9 <__c.5239>:
    1ca9:	43 4d 20 41 6d 74 3a 25 73 00                       CM Amt:%s.

00001cb3 <__c.5237>:
    1cb3:	50 6f 69 6e 74 73 3a 25 73 00                       Points:%s.

00001cbd <__c.5235>:
    1cbd:	25 73 3a 25 73 00                                   %s:%s.

00001cc3 <__c.5228>:
    1cc3:	50 72 6f 73 65 73 00                                Proses.

00001cca <__c.5226>:
    1cca:	49 44 3a 25 73 00                                   ID:%s.

00001cd0 <__c.5222>:
    1cd0:	5b 2a 5d 42 61 63 6b 20 20 20 20 5b 23 5d 45 78     [*]Back    [#]Ex
    1ce0:	69 74 00                                            it.

00001ce3 <__c.5220>:
    1ce3:	54 61 70 20 4b 61 72 74 75 20 52 46 49 44 00        Tap Kartu RFID.

00001cf2 <__c.5217>:
    1cf2:	5b 2a 5d 42 61 63 6b 20 20 20 20 5b 23 5d 45 78     [*]Back    [#]Ex
    1d02:	69 74 00                                            it.

00001d05 <__c.5215>:
    1d05:	54 61 70 20 4b 61 72 74 75 20 52 46 49 44 00        Tap Kartu RFID.

00001d14 <__c.5213>:
    1d14:	46 49 50 3a 25 73 00                                FIP:%s.

00001d1b <__c.5207>:
    1d1b:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 20 20 20 20     [*]Back         
    1d2b:	20 00                                                .

00001d2d <__c.5205>:
    1d2d:	32 2e 4c 6f 79 61 6c 74 79 20 55 70 64 61 74 65     2.Loyalty Update
    1d3d:	20 00                                                .

00001d3f <__c.5203>:
    1d3f:	31 2e 45 6e 71 75 69 72 79 20 20 20 20 20 20 20     1.Enquiry       
    1d4f:	20 00                                                .

00001d51 <__c.5201>:
    1d51:	20 20 4d 65 6e 75 20 4c 6f 79 61 6c 74 79 20 20       Menu Loyalty  
    1d61:	20 00                                                .

00001d63 <__c.5164>:
    1d63:	4e 6f 20 43 6f 6e 6e 65 63 74 69 6f 6e 00           No Connection.

00001d71 <__c.5162>:
    1d71:	54 43 50 2f 49 50 20 45 52 52 4f 52 20 00           TCP/IP ERROR .

00001d7f <__c.5156>:
    1d7f:	5b 2a 5d 42 61 63 6b 20 20 20 20 5b 23 5d 45 78     [*]Back    [#]Ex
    1d8f:	69 74 00                                            it.

00001d92 <__c.5154>:
    1d92:	54 61 70 20 53 75 70 65 72 76 69 73 6f 72 20 43     Tap Supervisor C
    1da2:	61 72 64 00                                         ard.

00001da6 <__c.5152>:
    1da6:	52 65 50 72 69 6e 74 20 46 49 50 3a 25 73 20 00     RePrint FIP:%s .

00001db6 <__c.5148>:
    1db6:	54 69 64 61 6b 20 41 64 61 20 54 72 61 6e 73 61     Tidak Ada Transa
    1dc6:	6b 73 69 20 00                                      ksi .

00001dcb <__c.5139>:
    1dcb:	41 63 63 65 73 73 20 44 65 6e 69 65 64 00           Access Denied.

00001dd9 <__c.5096>:
    1dd9:	25 2e 32 64 00                                      %.2d.

00001dde <__c.5092>:
    1dde:	2a 29 45 78 69 74 00                                *)Exit.

00001de5 <__c.5090>:
    1de5:	23 29 4f 4b 20 00                                   #)OK .

00001deb <__c.5088>:
    1deb:	20 20 20 20 20 00                                        .

00001df1 <__c.5086>:
    1df1:	46 49 50 3a 5f 00                                   FIP:_.

00001df7 <__c.5081>:
    1df7:	25 64 2e 50 25 73 20 7c 20 25 64 2e 50 25 73 00     %d.P%s | %d.P%s.

00001e07 <__c.5032>:
    1e07:	30 32 25 73 25 73 25 73 25 73 25 73 25 73 25 73     02%s%s%s%s%s%s%s
	...

00001e18 <__c.4889>:
    1e18:	30 00                                               0.

00001e1a <__c.4820>:
    1e1a:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    1e2a:	20 20 20 20 00                                          .

00001e2f <__c.4815>:
    1e2f:	23 25 73 00                                         #%s.

00001e33 <__c.4813>:
    1e33:	25 2e 32 64 00                                      %.2d.

00001e38 <__c.4811>:
    1e38:	40 46 49 50 3a 00                                   @FIP:.

00001e3e <__c.4809>:
    1e3e:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    1e4e:	20 20 20 20 00                                          .

00001e53 <__c.4805>:
    1e53:	50 72 69 6e 74 69 6e 67 20 46 49 50 25 73 20 00     Printing FIP%s .

00001e63 <__c.4781>:
    1e63:	44 3a 25 64 20 43 3a 25 63 20 20 00                 D:%d C:%c  .

00001e6f <__c.4770>:
    1e6f:	25 73 20 25 73 00                                   %s %s.

00001e75 <__c.4742>:
    1e75:	4e 6f 20 50 75 6d 70 20 46 6f 75 6e 64 00           No Pump Found.

00001e83 <__c.4740>:
    1e83:	54 43 50 2f 49 50 20 45 72 72 6f 72 00              TCP/IP Error.

00001e90 <__c.4738>:
    1e90:	50 75 6d 70 46 6f 75 6e 64 00                       PumpFound.

00001e9a <__c.4736>:
    1e9a:	43 6f 6e 6e 65 63 74 65 64 20 20 20 20 20 20 20     Connected       
    1eaa:	20 20 20 20 00                                          .

00001eaf <__c.4731>:
    1eaf:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    1ebf:	20 20 20 00                                            .

00001ec3 <__c.4729>:
    1ec3:	25 73 00                                            %s.

00001ec6 <__c.4724>:
    1ec6:	53 63 61 6e 20 50 75 6d 70 00                       Scan Pump.

00001ed0 <__c.4719>:
    1ed0:	43 6f 6e 6e 65 63 74 20 20 20 20 20 20 20 20 20     Connect         
	...

00001ee1 <__c.4717>:
    1ee1:	43 6f 6e 6e 65 63 74 00                             Connect.

00001ee9 <__c.4715>:
    1ee9:	43 6f 6e 6e 65 63 74 20 20 20 20 20 20 20 20 20     Connect         
	...

00001efa <__c.4687>:
    1efa:	43 4f 4d 25 64 3a 25 69 20 20 20 20 20 20 20 20     COM%d:%i        
    1f0a:	20 20 20 00                                            .

00001f0e <__c.4685>:
    1f0e:	49 6e 69 74 69 61 6c 69 7a 65 20 43 4f 4d 20 2e     Initialize COM .
    1f1e:	2e 2e 00                                            ...

00001f21 <__c.4646>:
    1f21:	0a 47 65 4e 69 55 73 20 54 69 63 6b 65 74 20 50     .GeNiUs Ticket P
    1f31:	72 69 6e 74 65 72 20 0a 20 56 65 72 73 69 6f 6e     rinter . Version
    1f41:	3a 25 73 0a 20 4c 61 73 74 20 55 70 64 61 74 65     :%s. Last Update
    1f51:	20 25 73 20 0a 20 48 61 6e 69 6e 64 6f 20 41 75      %s . Hanindo Au
    1f61:	74 6f 6d 61 74 69 6f 6e 20 53 6f 6c 75 74 69 6f     tomation Solutio
    1f71:	6e 73 20 0a 20 77 77 77 2e 68 61 6e 69 6e 64 6f     ns . www.hanindo
    1f81:	67 72 6f 75 70 2e 63 6f 6d 0a 0a 0a 0a 0a 0a 0a     group.com.......
    1f91:	0a 00                                               ..

00001f93 <__c.4644>:
    1f93:	30 39 2f 30 38 2f 32 30 31 31 00                    09/08/2011.

00001f9e <__c.4642>:
    1f9e:	32 2e 34 33 41 00                                   2.43A.

00001fa4 <__c.4548>:
    1fa4:	46 75 65 6c 69 6e 67 20 40 46 49 50 3a 23 25 64     Fueling @FIP:#%d
	...

00001fb5 <__c.4546>:
    1fb5:	54 72 61 6e 73 61 6b 73 69 20 53 65 6c 65 73 61     Transaksi Selesa
    1fc5:	69 00                                               i.

00001fc7 <__c.4542>:
    1fc7:	49 44 3a 20 25 73 00                                ID: %s.

00001fce <__c.4540>:
    1fce:	25 73 00                                            %s.

00001fd1 <__c.4538>:
    1fd1:	50 25 73 20 25 73 20 00                             P%s %s .

00001fd9 <__c.4534>:
    1fd9:	46 49 50 20 54 69 64 61 6b 20 53 69 61 70 20 20     FIP Tidak Siap  
    1fe9:	20 20 00                                              .

00001fec <__c.4531>:
    1fec:	41 75 74 68 6f 72 69 73 61 73 69 20 42 65 72 68     Authorisasi Berh
    1ffc:	61 73 69 6c 00                                      asil.

00002001 <__c.4527>:
    2001:	41 75 74 68 6f 72 69 73 61 73 69 20 47 61 67 61     Authorisasi Gaga
    2011:	6c 20 20 20 00                                      l   .

00002016 <__c.4523>:
    2016:	20 20 20 20 20 20 20 00                                    .

0000201e <__c.4520>:
    201e:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    202e:	20 20 20 20 00                                          .

00002033 <__c.4518>:
    2033:	4d 6f 68 6f 6e 20 54 75 6e 67 67 75 20 20 20 20     Mohon Tunggu    
    2043:	20 20 20 20 00                                          .

00002048 <__c.4516>:
    2048:	25 73 00                                            %s.

0000204b <__c.4514>:
    204b:	50 25 73 20 25 73 20 00                             P%s %s .

00002053 <__c.4511>:
    2053:	43 61 6e 63 65 6c 20 54 72 61 6e 73 61 63 74 69     Cancel Transacti
    2063:	6f 6e 20 20 00                                      on  .

00002068 <__c.4508>:
    2068:	5b 2a 5d 42 61 63 6b 20 5b 30 5d 45 53 43 20 5b     [*]Back [0]ESC [
    2078:	23 5d 4f 4b 00                                      #]OK.

0000207d <__c.4506>:
    207d:	25 73 20 00                                         %s .

00002081 <__c.4504>:
    2081:	20 46 75 6c 6c 00                                    Full.

00002087 <__c.4502>:
    2087:	25 73 20 20 25 73 20 00                             %s  %s .

0000208f <__c.4500>:
    208f:	49 44 3a 20 25 73 00                                ID: %s.

00002096 <__c.4498>:
    2096:	25 73 20 00                                         %s .

0000209a <__c.4494>:
    209a:	5b 2a 5d 42 61 63 6b 20 20 5b 23 5d 4f 4b 20 20     [*]Back  [#]OK  
    20aa:	20 00                                                .

000020ac <__c.4492>:
    20ac:	4f 64 6f 6d 65 74 65 72 3a 5f 20 20 20 20 20 20     Odometer:_      
    20bc:	20 00                                                .

000020be <__c.4490>:
    20be:	25 73 20 00                                         %s .

000020c2 <__c.4488>:
    20c2:	20 20 25 73 20 25 73 20 00                            %s %s .

000020cb <__c.4486>:
    20cb:	50 75 6d 70 20 50 72 6f 64 75 63 74 20 41 6d 6f     Pump Product Amo
    20db:	75 6e 74 00                                         unt.

000020df <__c.4484>:
    20df:	50 75 6d 70 20 50 72 6f 64 75 63 74 20 56 6f 6c     Pump Product Vol
    20ef:	75 6d 65 00                                         ume.

000020f3 <__c.4482>:
    20f3:	20 20 54 61 6e 6b 00                                  Tank.

000020fa <__c.4480>:
    20fa:	20 20 25 73 20 25 73 20 00                            %s %s .

00002103 <__c.4478>:
    2103:	50 75 6d 70 20 50 72 6f 64 75 63 74 20 20 20 46     Pump Product   F
    2113:	75 6c 6c 00                                         ull.

00002117 <__c.4474>:
    2117:	5b 2a 5d 42 61 63 6b 20 20 5b 23 5d 4f 4b 20 20     [*]Back  [#]OK  
    2127:	20 20 20 20 00                                          .

0000212c <__c.4472>:
    212c:	5b 32 5d 41 6d 6f 75 6e 74 3a 5f 20 20 20 20 20     [2]Amount:_     
    213c:	20 20 20 20 00                                          .

00002141 <__c.4470>:
    2141:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    2151:	20 20 20 20 00                                          .

00002156 <__c.4468>:
    2156:	50 25 73 2d 25 73 20 00                             P%s-%s .

0000215e <__c.4466>:
    215e:	5b 2a 5d 42 61 63 6b 20 20 5b 23 5d 4f 4b 20 20     [*]Back  [#]OK  
    216e:	20 20 20 20 00                                          .

00002173 <__c.4464>:
    2173:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    2183:	20 20 20 20 00                                          .

00002188 <__c.4462>:
    2188:	5b 31 5d 56 6f 6c 75 6d 65 3a 5f 20 20 20 20 20     [1]Volume:_     
    2198:	20 20 20 20 00                                          .

0000219d <__c.4460>:
    219d:	50 25 73 2d 25 73 20 00                             P%s-%s .

000021a5 <__c.4457>:
    21a5:	41 00                                               A.

000021a7 <__c.4455>:
    21a7:	41 00                                               A.

000021a9 <__c.4453>:
    21a9:	56 00                                               V.

000021ab <__c.4450>:
    21ab:	5b 2a 5d 42 61 63 6b 20 20 20 20 5b 23 5d 4e 65     [*]Back    [#]Ne
    21bb:	78 74 20 20 00                                      xt  .

000021c0 <__c.4448>:
    21c0:	5b 32 5d 41 6d 6f 75 6e 74 20 20 20 20 20 20 20     [2]Amount       
    21d0:	20 20 20 20 00                                          .

000021d5 <__c.4446>:
    21d5:	5b 31 5d 56 6f 6c 75 6d 65 20 20 20 20 20 20 20     [1]Volume       
    21e5:	20 20 20 20 00                                          .

000021ea <__c.4444>:
    21ea:	50 25 73 2d 25 73 20 00                             P%s-%s .

000021f2 <__c.4441>:
    21f2:	25 73 00                                            %s.

000021f5 <__c.4438>:
    21f5:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 20 20 20 20     [*]Back         
    2205:	20 20 20 20 00                                          .

0000220a <__c.4433>:
    220a:	20 20 20 20 20 00                                        .

00002210 <__c.4431>:
    2210:	25 64 2e 25 73 00                                   %d.%s.

00002216 <__c.4429>:
    2216:	25 73 00                                            %s.

00002219 <__c.4427>:
    2219:	50 6f 6d 70 61 2d 25 73 00                          Pompa-%s.

00002222 <__c.4423>:
    2222:	25 2e 32 64 00                                      %.2d.

00002227 <__c.4421>:
    2227:	25 2e 32 64 00                                      %.2d.

0000222c <__c.4417>:
    222c:	5b 2a 5d 42 61 74 61 6c 20 20 20 20 20 20 20 5b     [*]Batal       [
    223c:	23 5d 4f 4b 00                                      #]OK.

00002241 <__c.4415>:
    2241:	25 73 20 25 73 00                                   %s %s.

00002247 <__c.4413>:
    2247:	25 73 00                                            %s.

0000224a <__c.4411>:
    224a:	25 73 00                                            %s.

0000224d <__c.4409>:
    224d:	25 73 00                                            %s.

00002250 <__c.4406>:
    2250:	4b 61 72 74 75 20 54 65 72 62 61 74 61 73 20 20     Kartu Terbatas  
    2260:	20 20 20 20 00                                          .

00002265 <__c.4404>:
    2265:	54 69 64 61 6b 20 54 65 72 64 61 66 74 61 72 20     Tidak Terdaftar 
    2275:	20 20 20 20 00                                          .

0000227a <__c.4401>:
    227a:	44 61 74 61 20 52 65 63 65 69 76 65 64 20 20 20     Data Received   
    228a:	20 20 20 20 00                                          .

0000228f <__c.4398>:
    228f:	54 43 50 2f 49 50 20 45 72 72 6f 72 20 20 20 20     TCP/IP Error    
    229f:	20 20 20 20 00                                          .

000022a4 <__c.4396>:
    22a4:	53 65 6e 64 69 6e 67 20 46 61 69 6c 65 64 20 20     Sending Failed  
    22b4:	20 20 20 20 00                                          .

000022b9 <__c.4393>:
    22b9:	20 20 20 20 20 20 20 00                                    .

000022c1 <__c.4388>:
    22c1:	50 72 6f 73 65 73 00                                Proses.

000022c8 <__c.4386>:
    22c8:	49 44 3a 25 73 00                                   ID:%s.

000022ce <__c.4384>:
    22ce:	20 20 20 4c 6f 63 61 6c 20 41 63 63 6f 75 6e 74        Local Account
    22de:	20 20 20 00                                            .

000022e2 <__c.4217>:
    22e2:	25 2e 32 64 00                                      %.2d.

000022e7 <__c.4169>:
    22e7:	46 39 36 38 43 46 46 42 00                          F968CFFB.

000022f0 <__c.4167>:
    22f0:	25 73 00                                            %s.

000022f3 <__c.4164>:
    22f3:	25 73 25 73 25 73 00                                %s%s%s.

000022fa <__c.4162>:
    22fa:	25 73 25 73 25 73 25 73 00                          %s%s%s%s.

00002303 <__c.4159>:
    2303:	25 73 25 73 00                                      %s%s.

00002308 <__c.4156>:
    2308:	25 73 00                                            %s.

0000230b <__c.4154>:
    230b:	46 30 30 30 30 30 30 30 45 31 32 33 34 35 36 46     F0000000E123456F
    231b:	46 46 46 46 00                                      FFFF.

00002320 <__c.4152>:
    2320:	25 73 25 73 25 64 00                                %s%s%d.

00002327 <__c.4150>:
    2327:	25 73 25 73 25 64 00                                %s%s%d.

0000232e <__c.4147>:
    232e:	25 73 00                                            %s.

00002331 <__c.4144>:
    2331:	25 73 25 73 00                                      %s%s.

00002336 <__c.4142>:
    2336:	25 73 25 73 00                                      %s%s.

0000233b <__c.4140>:
    233b:	25 73 25 73 00                                      %s%s.

00002340 <__c.4137>:
    2340:	25 73 25 73 00                                      %s%s.

00002345 <__c.4134>:
    2345:	25 73 25 73 00                                      %s%s.

0000234a <__c.4131>:
    234a:	25 73 00                                            %s.

0000234d <__c.4126>:
    234d:	25 73 31 00                                         %s1.

00002351 <__c.4123>:
    2351:	25 2e 32 58 00                                      %.2X.

00002356 <__c.4121>:
    2356:	25 2e 33 64 2e 25 2e 33 64 2e 25 2e 33 64 2e 25     %.3d.%.3d.%.3d.%
    2366:	2e 33 64 00                                         .3d.

0000236a <__c.4119>:
    236a:	25 2e 33 64 2e 25 2e 33 64 2e 25 2e 33 64 2e 25     %.3d.%.3d.%.3d.%
    237a:	2e 33 64 00                                         .3d.

0000237e <__c.4117>:
    237e:	25 2e 32 64 00                                      %.2d.

00002383 <__c.4115>:
    2383:	25 2e 32 64 00                                      %.2d.

00002388 <__c.4027>:
    2388:	25 73 20 25 73 00                                   %s %s.

0000238e <__c.4025>:
    238e:	32 2e 34 33 41 00                                   2.43A.

00002394 <__c.4023>:
    2394:	47 65 4e 69 55 73 00                                GeNiUs.

0000239b <__c.4009>:
    239b:	50 72 65 73 73 20 61 6e 79 20 6b 65 79 2e 2e 20     Press any key.. 
    23ab:	20 20 20 20 00                                          .

000023b0 <__c.3997>:
    23b0:	5b 31 5d 53 6c 61 76 65 20 5b 32 5d 53 74 61 6e     [1]Slave [2]Stan
    23c0:	64 61 6c 6f 6e 65 00                                dalone.

000023c7 <__c.3917>:
    23c7:	3e 00                                               >.

000023c9 <__c.3912>:
    23c9:	25 2e 32 64 00                                      %.2d.

000023ce <__c.3910>:
    23ce:	25 2e 32 64 00                                      %.2d.

000023d3 <__c.3908>:
    23d3:	30 00                                               0.

000023d5 <__c.3906>:
    23d5:	31 00                                               1.

000023d7 <__c.3898>:
    23d7:	25 64 00                                            %d.

000023da <__c.3893>:
    23da:	25 2e 32 64 00                                      %.2d.

000023df <__c.3888>:
    23df:	25 73 00                                            %s.

000023e2 <__c.3883>:
    23e2:	25 73 00                                            %s.

000023e5 <__c.3878>:
    23e5:	25 73 00                                            %s.

000023e8 <__c.3876>:
    23e8:	3c 00                                               <.

000023ea <__c.3808>:
    23ea:	3c 4f 4b 3e 00                                      <OK>.

000023ef <__c.3803>:
    23ef:	25 64 00                                            %d.

000023f2 <__c.3801>:
    23f2:	25 64 00                                            %d.

000023f5 <__c.3790>:
    23f5:	25 64 00                                            %d.

000023f8 <__c.3779>:
    23f8:	3c 53 61 76 69 6e 67 3e 00                          <Saving>.

00002401 <__c.3777>:
    2401:	4c 65 6e 67 74 68 3a 25 64 00                       Length:%d.

0000240b <__c.3587>:
    240b:	25 73 00                                            %s.

0000240e <__c.3523>:
    240e:	31 30 00                                            10.

00002411 <__c.3521>:
    2411:	25 73 00                                            %s.

00002414 <__c.3519>:
    2414:	25 73 00                                            %s.

00002417 <__c.3517>:
    2417:	25 73 00                                            %s.

0000241a <__c.3515>:
    241a:	25 73 00                                            %s.

0000241d <__c.3513>:
    241d:	25 73 00                                            %s.

00002420 <__c.3511>:
    2420:	25 2e 32 64 00                                      %.2d.

00002425 <__c.3509>:
    2425:	25 64 00                                            %d.

00002428 <__c.3507>:
    2428:	25 73 00                                            %s.

0000242b <__c.3505>:
    242b:	25 73 00                                            %s.

0000242e <__c.3503>:
    242e:	25 73 00                                            %s.

00002431 <__c.3501>:
    2431:	25 64 00                                            %d.

00002434 <__c.3499>:
    2434:	4e 2f 41 00                                         N/A.

00002438 <__c.3396>:
    2438:	25 64 00                                            %d.

0000243b <__c.3394>:
    243b:	25 73 00                                            %s.

0000243e <__c.3392>:
    243e:	25 73 00                                            %s.

00002441 <__c.3309>:
    2441:	54 69 64 61 6b 20 41 64 61 20 54 72 61 6e 73 61     Tidak Ada Transa
    2451:	6b 73 69 20 00                                      ksi .

00002456 <__c.3306>:
    2456:	54 6f 74 61 6c 69 7a 65 72 41 6c 6c 20 20 20 20     TotalizerAll    
    2466:	20 00                                                .

00002468 <__c.3303>:
    2468:	43 6c 65 61 72 20 44 61 74 61 20 54 6f 74 61 6c     Clear Data Total
    2478:	69 7a 65 72 00                                      izer.

0000247d <__c.3291>:
    247d:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
	...

0000248e <__c.3288>:
    248e:	52 65 61 64 79 2e 2e 2e 20 20 20 20 20 20 20 20     Ready...        
    249e:	20 20 20 20 00                                          .

000024a3 <__c.3285>:
    24a3:	52 65 61 64 79 2e 2e 2e 20 20 20 20 20 20 20 20     Ready...        
    24b3:	20 20 20 20 00                                          .

000024b8 <__c.3283>:
    24b8:	4e 6f 20 52 65 73 70 6f 6e 73 65 2e 2e 20 20 20     No Response..   
    24c8:	20 20 20 20 00                                          .

000024cd <__c.3280>:
    24cd:	50 6c 65 61 73 65 20 57 61 69 74 2e 2e 20 20 20     Please Wait..   
    24dd:	20 20 20 20 00                                          .

000024e2 <__c.3277>:
    24e2:	52 65 61 64 79 2e 2e 2e 20 20 20 20 20 20 20 20     Ready...        
    24f2:	20 20 20 20 00                                          .

000024f7 <__c.3274>:
    24f7:	54 69 64 61 6b 20 41 64 61 20 54 72 61 6e 73 61     Tidak Ada Transa
    2507:	6b 73 69 20 00                                      ksi .

0000250c <__c.3269>:
    250c:	53 65 64 61 6e 67 50 72 6f 73 65 73 00              SedangProses.

00002519 <__c.3266>:
    2519:	34 33 35 36 41 33 31 41 00                          4356A31A.

00002522 <__c.1762>:
    2522:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    2532:	20 20 20 20 00                                          .

00002537 <__c.1760>:
    2537:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    2547:	20 20 20 20 00                                          .

0000254c <__c.1758>:
    254c:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    255c:	20 20 20 20 00                                          .

00002561 <__c.1756>:
    2561:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    2571:	20 20 20 20 00                                          .

00002576 <__alphanum>:
    2576:	30 20 2e 00 00 00 31 2e 2c 3f 21 00 32 61 62 63     0 ....1.,?!.2abc
    2586:	00 00 33 64 65 66 00 00 34 67 68 69 00 00 35 6a     ..3def..4ghi..5j
    2596:	6b 6c 00 00 36 6d 6e 6f 00 00 37 70 71 72 73 00     kl..6mno..7pqrs.
    25a6:	38 74 75 76 00 00 39 77 78 79 7a 00 30 20 2e 00     8tuv..9wxyz.0 ..
    25b6:	00 00 31 26 40 2b 2d 00 32 41 42 43 00 00 33 44     ..1&@+-.2ABC..3D
    25c6:	45 46 00 00 34 47 48 49 00 00 35 4a 4b 4c 00 00     EF..4GHI..5JKL..
    25d6:	36 4d 4e 4f 00 00 37 50 51 52 53 00 38 54 55 56     6MNO..7PQRS.8TUV
    25e6:	00 00 39 57 58 59 5a 00                             ..9WXYZ.

000025ee <__maxchar>:
    25ee:	02 04 03 03 03 03 03 04 03 04                       ..........

000025f8 <__ctors_end>:
    25f8:	11 24       	eor	r1, r1
    25fa:	1f be       	out	0x3f, r1	; 63
    25fc:	cf ef       	ldi	r28, 0xFF	; 255
    25fe:	d0 e1       	ldi	r29, 0x10	; 16
    2600:	de bf       	out	0x3e, r29	; 62
    2602:	cd bf       	out	0x3d, r28	; 61

00002604 <__do_copy_data>:
    2604:	11 e0       	ldi	r17, 0x01	; 1
    2606:	a0 e0       	ldi	r26, 0x00	; 0
    2608:	b1 e0       	ldi	r27, 0x01	; 1
    260a:	e2 e0       	ldi	r30, 0x02	; 2
    260c:	fc e5       	ldi	r31, 0x5C	; 92
    260e:	01 e0       	ldi	r16, 0x01	; 1
    2610:	0b bf       	out	0x3b, r16	; 59
    2612:	02 c0       	rjmp	.+4      	; 0x2618 <__do_copy_data+0x14>
    2614:	07 90       	elpm	r0, Z+
    2616:	0d 92       	st	X+, r0
    2618:	ac 35       	cpi	r26, 0x5C	; 92
    261a:	b1 07       	cpc	r27, r17
    261c:	d9 f7       	brne	.-10     	; 0x2614 <__do_copy_data+0x10>

0000261e <__do_clear_bss>:
    261e:	1c e0       	ldi	r17, 0x0C	; 12
    2620:	ac e5       	ldi	r26, 0x5C	; 92
    2622:	b1 e0       	ldi	r27, 0x01	; 1
    2624:	01 c0       	rjmp	.+2      	; 0x2628 <.do_clear_bss_start>

00002626 <.do_clear_bss_loop>:
    2626:	1d 92       	st	X+, r1

00002628 <.do_clear_bss_start>:
    2628:	a4 3b       	cpi	r26, 0xB4	; 180
    262a:	b1 07       	cpc	r27, r17
    262c:	e1 f7       	brne	.-8      	; 0x2626 <.do_clear_bss_loop>
    262e:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <main>
    2632:	0c 94 ff ad 	jmp	0x15bfe	; 0x15bfe <_exit>

00002636 <__bad_interrupt>:
    2636:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000263a <systemOnReset>:


void systemOnReset(){
     char SubMenu,KeyPressed,KeyChar,IsMasterReset=False;

     IsPowerOn=False;
    263a:	10 92 ba 02 	sts	0x02BA, r1
     if (MCUCSR & 1){   // Power-on Reset
    263e:	04 b6       	in	r0, 0x34	; 52
    2640:	00 fe       	sbrs	r0, 0
    2642:	30 c0       	rjmp	.+96     	; 0x26a4 <systemOnReset+0x6a>
         MCUCSR=0;lcd_printf(1,1,PSTR("PowerOn"));//Wiznet Blm Ready
    2644:	14 be       	out	0x34, r1	; 52
    2646:	81 e0       	ldi	r24, 0x01	; 1
    2648:	61 e0       	ldi	r22, 0x01	; 1
    264a:	46 ea       	ldi	r20, 0xA6	; 166
    264c:	52 e0       	ldi	r21, 0x02	; 2
    264e:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		 IsPowerOn=True;
    2652:	81 e0       	ldi	r24, 0x01	; 1
    2654:	80 93 ba 02 	sts	0x02BA, r24
         //Master Reset Detection
		 PORTF = 0xFF; DDRF = 0xF0;
    2658:	8f ef       	ldi	r24, 0xFF	; 255
    265a:	80 93 62 00 	sts	0x0062, r24
    265e:	80 ef       	ldi	r24, 0xF0	; 240
    2660:	80 93 61 00 	sts	0x0061, r24
		 KeyPressed=_key_scan(1);
    2664:	81 e0       	ldi	r24, 0x01	; 1
    2666:	0e 94 6d a6 	call	0x14cda	; 0x14cda <_key_scan>
		 KeyChar= _key_btn(KeyPressed);
    266a:	0e 94 ce a5 	call	0x14b9c	; 0x14b9c <_key_btn>
		 if (KeyChar=='5'){
    266e:	85 33       	cpi	r24, 0x35	; 53
    2670:	89 f5       	brne	.+98     	; 0x26d4 <systemOnReset+0x9a>
		     system_beep(2);
    2672:	82 e0       	ldi	r24, 0x02	; 2
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <system_beep>
		     IsMasterReset=True;
			 TCCR1B |= (1 << WGM12);
    267a:	8e b5       	in	r24, 0x2e	; 46
    267c:	88 60       	ori	r24, 0x08	; 8
    267e:	8e bd       	out	0x2e, r24	; 46
			 TIMSK |= (1 << OCIE1A);
    2680:	87 b7       	in	r24, 0x37	; 55
    2682:	80 61       	ori	r24, 0x10	; 16
    2684:	87 bf       	out	0x37, r24	; 55
			 sei();          //1/14745600=0,06781684028uS *1400 = 100uS 65535-1400+1=64136
    2686:	78 94       	sei
			 OCR1A   = 15624;//49911 -->0,33847384982639 ms
    2688:	88 e0       	ldi	r24, 0x08	; 8
    268a:	9d e3       	ldi	r25, 0x3D	; 61
    268c:	9b bd       	out	0x2b, r25	; 43
    268e:	8a bd       	out	0x2a, r24	; 42
			 TCCR1B |= ((1 << CS10) | (1 << CS11));
    2690:	8e b5       	in	r24, 0x2e	; 46
    2692:	83 60       	ori	r24, 0x03	; 3
    2694:	8e bd       	out	0x2e, r24	; 46
		     while(IsMasterReset==True){
			       SubMenu=FMenuMaster();
    2696:	0e 94 b4 73 	call	0xe768	; 0xe768 <FMenuMaster>
				   if (SubMenu==MENU_DONE){
    269a:	81 30       	cpi	r24, 0x01	; 1
    269c:	e1 f7       	brne	.-8      	; 0x2696 <systemOnReset+0x5c>
				       IsMasterReset=False;
					   lcd_clear();
    269e:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
    26a2:	18 c0       	rjmp	.+48     	; 0x26d4 <systemOnReset+0x9a>
				   }
			 }		 
		 }
         }
     else 
     if (MCUCSR & 2){   // External Reset
    26a4:	04 b6       	in	r0, 0x34	; 52
    26a6:	01 fe       	sbrs	r0, 1
    26a8:	06 c0       	rjmp	.+12     	; 0x26b6 <systemOnReset+0x7c>
         MCUCSR=0;lcd_printf(1,1,PSTR("External"));
    26aa:	14 be       	out	0x34, r1	; 52
    26ac:	81 e0       	ldi	r24, 0x01	; 1
    26ae:	61 e0       	ldi	r22, 0x01	; 1
    26b0:	4d e9       	ldi	r20, 0x9D	; 157
    26b2:	52 e0       	ldi	r21, 0x02	; 2
    26b4:	0d c0       	rjmp	.+26     	; 0x26d0 <systemOnReset+0x96>
        }
     else 
     if (MCUCSR & 4){   // Brown-Out Reset
    26b6:	04 b6       	in	r0, 0x34	; 52
    26b8:	02 fe       	sbrs	r0, 2
    26ba:	06 c0       	rjmp	.+12     	; 0x26c8 <systemOnReset+0x8e>
         MCUCSR=0;lcd_printf(1,1,PSTR("BrownOut"));
    26bc:	14 be       	out	0x34, r1	; 52
    26be:	81 e0       	ldi	r24, 0x01	; 1
    26c0:	61 e0       	ldi	r22, 0x01	; 1
    26c2:	44 e9       	ldi	r20, 0x94	; 148
    26c4:	52 e0       	ldi	r21, 0x02	; 2
    26c6:	04 c0       	rjmp	.+8      	; 0x26d0 <systemOnReset+0x96>
         }
     else		  // Watchdog Reset
        {
         lcd_printf(1,1,PSTR("WatchDog"));
    26c8:	81 e0       	ldi	r24, 0x01	; 1
    26ca:	61 e0       	ldi	r22, 0x01	; 1
    26cc:	4b e8       	ldi	r20, 0x8B	; 139
    26ce:	52 e0       	ldi	r21, 0x02	; 2
    26d0:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
        };
     MCUCSR=0;		  
    26d4:	14 be       	out	0x34, r1	; 52
    26d6:	80 ee       	ldi	r24, 0xE0	; 224
    26d8:	9e e2       	ldi	r25, 0x2E	; 46
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    26da:	20 e7       	ldi	r18, 0x70	; 112
    26dc:	31 e0       	ldi	r19, 0x01	; 1
    26de:	f9 01       	movw	r30, r18
    26e0:	31 97       	sbiw	r30, 0x01	; 1
    26e2:	f1 f7       	brne	.-4      	; 0x26e0 <systemOnReset+0xa6>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26e4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26e6:	d9 f7       	brne	.-10     	; 0x26de <systemOnReset+0xa4>
	 _delay_ms(1200);
}
    26e8:	08 95       	ret

000026ea <SystemInit>:


void SystemInit(){
	unsigned int __delay =300;
	lcd_init();
    26ea:	0e 94 49 a4 	call	0x14892	; 0x14892 <lcd_init>
	lcd_clear();
    26ee:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
	BackLightTrig();
    26f2:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <BackLightTrig>
	systemOnReset();
    26f6:	0e 94 1d 13 	call	0x263a	; 0x263a <systemOnReset>

	lcd_printf(4, 1, PSTR("Initialize... "));
    26fa:	84 e0       	ldi	r24, 0x04	; 4
    26fc:	61 e0       	ldi	r22, 0x01	; 1
    26fe:	4c e7       	ldi	r20, 0x7C	; 124
    2700:	52 e0       	ldi	r21, 0x02	; 2
    2702:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
    2706:	88 eb       	ldi	r24, 0xB8	; 184
    2708:	9b e0       	ldi	r25, 0x0B	; 11
    270a:	20 e7       	ldi	r18, 0x70	; 112
    270c:	31 e0       	ldi	r19, 0x01	; 1
    270e:	f9 01       	movw	r30, r18
    2710:	31 97       	sbiw	r30, 0x01	; 1
    2712:	f1 f7       	brne	.-4      	; 0x2710 <SystemInit+0x26>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2714:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2716:	d9 f7       	brne	.-10     	; 0x270e <SystemInit+0x24>
	_delay_ms(__delay);
	PORTA = 0XFF;		// Buffer for PORTA
    2718:	9f ef       	ldi	r25, 0xFF	; 255
    271a:	9b bb       	out	0x1b, r25	; 27
	DDRA = 0xFF;		// Pin 3 out (SS _SPI_SLAVE)
    271c:	9a bb       	out	0x1a, r25	; 26
	sbi(PORTA, 3);		// Disable SS _SPI_SLAVE
    271e:	db 9a       	sbi	0x1b, 3	; 27

	//Buzzer PORTB.5
	PORTB = 0xFF;DDRB = 0xFF;
    2720:	98 bb       	out	0x18, r25	; 24
    2722:	97 bb       	out	0x17, r25	; 23
	PORTD = 0b00001101;
    2724:	8d e0       	ldi	r24, 0x0D	; 13
    2726:	82 bb       	out	0x12, r24	; 18
    DDRD =  0b00001001;
    2728:	89 e0       	ldi	r24, 0x09	; 9
    272a:	81 bb       	out	0x11, r24	; 17

	TWBR = 0xFF;
    272c:	90 93 70 00 	sts	0x0070, r25
    //MMC
	PORTE = 0x0E;		// Buffer for PORTE
    2730:	8e e0       	ldi	r24, 0x0E	; 14
    2732:	83 b9       	out	0x03, r24	; 3
	DDRE = 0x0E;		// Pin 3 out (SS _SPI_MMC), pin 2 out (HB)
    2734:	82 b9       	out	0x02, r24	; 2
	sbi(PORTE, 3);		// Disable SS _SPI_MMC
    2736:	1b 9a       	sbi	0x03, 3	; 3
	cbi(PORTE, 2);		// HB on
    2738:	1a 98       	cbi	0x03, 2	; 3

	//Keypad
	PORTF = 0xFF;		// Buffer for PORTF
    273a:	90 93 62 00 	sts	0x0062, r25
	DDRF = 0xF0;		// 4 bit row, 4 bit column
    273e:	80 ef       	ldi	r24, 0xF0	; 240
    2740:	80 93 61 00 	sts	0x0061, r24

  	_spi_init(0,1);//Slave
    2744:	80 e0       	ldi	r24, 0x00	; 0
    2746:	61 e0       	ldi	r22, 0x01	; 1
    2748:	0e 94 dd a6 	call	0x14dba	; 0x14dba <_spi_init>
	sbi(DDRB,3);sbi(PORTB,3);//MISO Output
    274c:	bb 9a       	sbi	0x17, 3	; 23
    274e:	c3 9a       	sbi	0x18, 3	; 24
	cbi(DDRB,2);sbi(PORTB,2);//MOSI Input
    2750:	ba 98       	cbi	0x17, 2	; 23
    2752:	c2 9a       	sbi	0x18, 2	; 24
	cbi(DDRB,1);sbi(PORTB,1);//SCK  Input
    2754:	b9 98       	cbi	0x17, 1	; 23
    2756:	c1 9a       	sbi	0x18, 1	; 24

	TCCR1B |= (1 << WGM12);
    2758:	8e b5       	in	r24, 0x2e	; 46
    275a:	88 60       	ori	r24, 0x08	; 8
    275c:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1 << OCIE1A);
    275e:	87 b7       	in	r24, 0x37	; 55
    2760:	80 61       	ori	r24, 0x10	; 16
    2762:	87 bf       	out	0x37, r24	; 55
	sei();          //1/14745600=0,06781684028uS *1400 = 100uS 65535-1400+1=64136
    2764:	78 94       	sei
	OCR1A   = 15624;//49911 -->0,33847384982639 ms
    2766:	88 e0       	ldi	r24, 0x08	; 8
    2768:	9d e3       	ldi	r25, 0x3D	; 61
    276a:	9b bd       	out	0x2b, r25	; 43
    276c:	8a bd       	out	0x2a, r24	; 42
	TCCR1B |= ((1 << CS10) | (1 << CS11));
    276e:	8e b5       	in	r24, 0x2e	; 46
    2770:	83 60       	ori	r24, 0x03	; 3
    2772:	8e bd       	out	0x2e, r24	; 46

	SendSlaveCommand(SC_SLAVE,ST_NONE);
    2774:	81 e0       	ldi	r24, 0x01	; 1
    2776:	60 e0       	ldi	r22, 0x00	; 0
    2778:	0e 94 3d 60 	call	0xc07a	; 0xc07a <SendSlaveCommand>
	
	InitComport();
    277c:	0e 94 dc 79 	call	0xf3b8	; 0xf3b8 <InitComport>
	_LIGHT_SET;
    2780:	81 e0       	ldi	r24, 0x01	; 1
    2782:	80 93 ae 02 	sts	0x02AE, r24
    2786:	10 92 af 02 	sts	0x02AF, r1
    278a:	80 91 65 00 	lds	r24, 0x0065
    278e:	8d 7f       	andi	r24, 0xFD	; 253
    2790:	80 93 65 00 	sts	0x0065, r24
	InitPrinter();
    2794:	0e 94 d5 45 	call	0x8baa	; 0x8baa <InitPrinter>
    InitializeConnection();
    2798:	0e 94 5b 91 	call	0x122b6	; 0x122b6 <InitializeConnection>
	lcd_clear();
    279c:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
}
    27a0:	08 95       	ret

000027a2 <main>:

//Master4 =1+20++2+1
void SystemInit();
//Program Utama
int main(){
	SystemInit();
    27a2:	0e 94 75 13 	call	0x26ea	; 0x26ea <SystemInit>
	while(1){
	//FTestChar();
	//TestUserInput();
    FMenuIdle();
    27a6:	0e 94 12 a2 	call	0x14424	; 0x14424 <FMenuIdle>
    27aa:	fd cf       	rjmp	.-6      	; 0x27a6 <main+0x4>

000027ac <__vector_12>:
	  strDispenserName3,
	  strDispenserName4,
	  strDispenserName5,
};

ISR(TIMER1_COMPA_vect){//Timer Overflow 1ms
    27ac:	1f 92       	push	r1
    27ae:	0f 92       	push	r0
    27b0:	0f b6       	in	r0, 0x3f	; 63
    27b2:	0f 92       	push	r0
    27b4:	11 24       	eor	r1, r1
    27b6:	2f 93       	push	r18
    27b8:	6f 93       	push	r22
    27ba:	7f 93       	push	r23
    27bc:	8f 93       	push	r24
    27be:	9f 93       	push	r25
	if(__key_light == 1){
    27c0:	80 91 ae 02 	lds	r24, 0x02AE
    27c4:	81 30       	cpi	r24, 0x01	; 1
    27c6:	81 f4       	brne	.+32     	; 0x27e8 <__vector_12+0x3c>
		__key_lgtcnt++;
    27c8:	80 91 af 02 	lds	r24, 0x02AF
    27cc:	8f 5f       	subi	r24, 0xFF	; 255
    27ce:	80 93 af 02 	sts	0x02AF, r24
		if(__key_lgtcnt == 150){
    27d2:	86 39       	cpi	r24, 0x96	; 150
    27d4:	49 f4       	brne	.+18     	; 0x27e8 <__vector_12+0x3c>
		   __key_light = 0; 
    27d6:	10 92 ae 02 	sts	0x02AE, r1
		   __key_lgtcnt = 0; 
    27da:	10 92 af 02 	sts	0x02AF, r1
		   sbi(PORTG, 1);
    27de:	80 91 65 00 	lds	r24, 0x0065
    27e2:	82 60       	ori	r24, 0x02	; 2
    27e4:	80 93 65 00 	sts	0x0065, r24
		   }
	}

	//Beep
	if (TimBeep>0){
    27e8:	80 91 bc 01 	lds	r24, 0x01BC
    27ec:	88 23       	and	r24, r24
    27ee:	31 f0       	breq	.+12     	; 0x27fc <__vector_12+0x50>
	    TimBeep--;
    27f0:	81 50       	subi	r24, 0x01	; 1
    27f2:	80 93 bc 01 	sts	0x01BC, r24
		DDRB=(DDRB|0b00100000);
    27f6:	bd 9a       	sbi	0x17, 5	; 23
	    PORTB=(PORTB&0b11011111);
    27f8:	c5 98       	cbi	0x18, 5	; 24
    27fa:	05 c0       	rjmp	.+10     	; 0x2806 <__vector_12+0x5a>
	    }
	else{PORTB=(PORTB|~PORTB);
    27fc:	98 b3       	in	r25, 0x18	; 24
    27fe:	88 b3       	in	r24, 0x18	; 24
    2800:	80 95       	com	r24
    2802:	89 2b       	or	r24, r25
    2804:	88 bb       	out	0x18, r24	; 24
		}
    //LocalAccount
	TimLocAcc++;
    2806:	80 91 ba 01 	lds	r24, 0x01BA
    280a:	8f 5f       	subi	r24, 0xFF	; 255
    280c:	80 93 ba 01 	sts	0x01BA, r24
	//DisplaTicker
    TimTicker++;
    2810:	80 91 90 01 	lds	r24, 0x0190
    2814:	8f 5f       	subi	r24, 0xFF	; 255
    2816:	80 93 90 01 	sts	0x0190, r24
	TimPressed++;
    281a:	20 91 91 01 	lds	r18, 0x0191
    281e:	2f 5f       	subi	r18, 0xFF	; 255
    2820:	20 93 91 01 	sts	0x0191, r18
	if ((TimPressed%5)==0){
    2824:	82 2f       	mov	r24, r18
    2826:	65 e0       	ldi	r22, 0x05	; 5
    2828:	0e 94 61 aa 	call	0x154c2	; 0x154c2 <__udivmodqi4>
    282c:	99 23       	and	r25, r25
    282e:	71 f4       	brne	.+28     	; 0x284c <__vector_12+0xa0>
	    PORTE = PORTE^0x04;
    2830:	83 b1       	in	r24, 0x03	; 3
    2832:	94 e0       	ldi	r25, 0x04	; 4
    2834:	89 27       	eor	r24, r25
    2836:	83 b9       	out	0x03, r24	; 3
	    TimDisplay++;
    2838:	80 91 92 01 	lds	r24, 0x0192
    283c:	8f 5f       	subi	r24, 0xFF	; 255
    283e:	80 93 92 01 	sts	0x0192, r24
		TimPrintBusy++;
    2842:	80 91 b6 01 	lds	r24, 0x01B6
    2846:	8f 5f       	subi	r24, 0xFF	; 255
    2848:	80 93 b6 01 	sts	0x01B6, r24
	}
	if ((TimPressed%PRESSED_DELAY)==0){
    284c:	82 2f       	mov	r24, r18
    284e:	6a e0       	ldi	r22, 0x0A	; 10
    2850:	0e 94 61 aa 	call	0x154c2	; 0x154c2 <__udivmodqi4>
    2854:	99 23       	and	r25, r25
    2856:	29 f4       	brne	.+10     	; 0x2862 <__vector_12+0xb6>
	     ProcTimeOut++;
    2858:	80 91 bb 01 	lds	r24, 0x01BB
    285c:	8f 5f       	subi	r24, 0xFF	; 255
    285e:	80 93 bb 01 	sts	0x01BB, r24
	}
	TimSend++;
    2862:	80 91 79 0c 	lds	r24, 0x0C79
    2866:	8f 5f       	subi	r24, 0xFF	; 255
    2868:	80 93 79 0c 	sts	0x0C79, r24
}
    286c:	9f 91       	pop	r25
    286e:	8f 91       	pop	r24
    2870:	7f 91       	pop	r23
    2872:	6f 91       	pop	r22
    2874:	2f 91       	pop	r18
    2876:	0f 90       	pop	r0
    2878:	0f be       	out	0x3f, r0	; 63
    287a:	0f 90       	pop	r0
    287c:	1f 90       	pop	r1
    287e:	18 95       	reti

00002880 <RePrintStandalone>:

char RePrintStandalone(char FIPAddr){
     char Result=PS_NONE;

   return Result;
}
    2880:	86 e1       	ldi	r24, 0x16	; 22
    2882:	08 95       	ret

00002884 <GetPumpStatusLabel>:


char GetPumpStatusLabel(char xPumpStatus){
     char Result;

	 switch(xPumpStatus){
    2884:	e8 2f       	mov	r30, r24
    2886:	f0 e0       	ldi	r31, 0x00	; 0
    2888:	ee 31       	cpi	r30, 0x1E	; 30
    288a:	f1 05       	cpc	r31, r1
    288c:	70 f5       	brcc	.+92     	; 0x28ea <GetPumpStatusLabel+0x66>
    288e:	ea 5b       	subi	r30, 0xBA	; 186
    2890:	ff 4f       	sbci	r31, 0xFF	; 255
    2892:	ee 0f       	add	r30, r30
    2894:	ff 1f       	adc	r31, r31
    2896:	05 90       	lpm	r0, Z+
    2898:	f4 91       	lpm	r31, Z+
    289a:	e0 2d       	mov	r30, r0
    289c:	09 94       	ijmp
    289e:	81 e3       	ldi	r24, 0x31	; 49
    28a0:	08 95       	ret
    28a2:	85 e4       	ldi	r24, 0x45	; 69
    28a4:	08 95       	ret
    28a6:	82 e3       	ldi	r24, 0x32	; 50
    28a8:	08 95       	ret
	 case PUMP_ST1: 
	      Result='1';
		  break;
	 case PUMP_ST2: 
	 	  Result='2';
		  break;
    28aa:	83 e3       	ldi	r24, 0x33	; 51
    28ac:	08 95       	ret
     case PUMP_ST3:
	 	  Result='3';
		  break;	
    28ae:	84 e3       	ldi	r24, 0x34	; 52
    28b0:	08 95       	ret
	 case PUMP_ST4: 
          Result='4';
		  break;
    28b2:	85 e3       	ldi	r24, 0x35	; 53
    28b4:	08 95       	ret
	 case PUMP_ST5: 
	 	  Result='5';
		  break;
    28b6:	89 e6       	ldi	r24, 0x69	; 105
    28b8:	08 95       	ret
	 case PUMP_OFF: 
	 case PW_ONLINE:
	 	  Result='i';
		  break;
    28ba:	8e e6       	ldi	r24, 0x6E	; 110
    28bc:	08 95       	ret
     case PW_CALL:
	 case PUMP_CALL: 
	 	  Result='n';
		  break;     
    28be:	81 e6       	ldi	r24, 0x61	; 97
    28c0:	08 95       	ret
	 case PUMP_AUTH: 
	 	  Result='a';
		  break;
    28c2:	84 e6       	ldi	r24, 0x64	; 100
    28c4:	08 95       	ret
     case PW_AUTHORIZED:
	 case PUMP_BUSY: 
	 	  Result='d';
		  break;
    28c6:	8f e4       	ldi	r24, 0x4F	; 79
    28c8:	08 95       	ret
	 case PUMP_PEOT: 
	 	  Result='O';
		  break;
    28ca:	86 e4       	ldi	r24, 0x46	; 70
    28cc:	08 95       	ret
     case PW_END_DELIVERY:
	 case PUMP_FEOT: 
	 	  Result='F';
		  break;
    28ce:	83 e5       	ldi	r24, 0x53	; 83
    28d0:	08 95       	ret
	 case PUMP_STOP: 
	 	  Result='S';
		  break;
    28d2:	8d e2       	ldi	r24, 0x2D	; 45
    28d4:	08 95       	ret
	 case PUMP_NONE:
	 case PW_DISCONNECT:
	 	  Result='-';
		  break;
    28d6:	80 e5       	ldi	r24, 0x50	; 80
    28d8:	08 95       	ret
     case PS_PRINT_READY:
	      Result='P';
 	      break;
    28da:	89 e4       	ldi	r24, 0x49	; 73
    28dc:	08 95       	ret
     case PS_PRINTED:
	      Result='I';
 	      break;
    28de:	86 e5       	ldi	r24, 0x56	; 86
    28e0:	08 95       	ret
     case PS_VOID:
	      Result='V';
	      break;
    28e2:	84 e5       	ldi	r24, 0x54	; 84
    28e4:	08 95       	ret
     case PS_TOTALIZER:
	      Result='T';
	      break;
    28e6:	84 e7       	ldi	r24, 0x74	; 116
    28e8:	08 95       	ret
     case PS_FINISH_TOTALIZER:
	      Result='t';
	      break;
    28ea:	88 e7       	ldi	r24, 0x78	; 120
	 default:
          Result='x';
		  break;         	 
	 }
  return Result;	 
}
    28ec:	08 95       	ret

000028ee <SendPoolingCommand>:
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
    28ee:	80 93 a7 05 	sts	0x05A7, r24
	 PoolMsg=plMsg;
    28f2:	60 93 d3 0b 	sts	0x0BD3, r22
     IsControlPooling=True;
    28f6:	81 e0       	ldi	r24, 0x01	; 1
    28f8:	80 93 84 01 	sts	0x0184, r24
}
    28fc:	08 95       	ret

000028fe <ScanEDCFlow>:
	 RemZeroLead(strMsgID);
	 Result=atoi(strMsgID);
  return Result;
}

void ScanEDCFlow(char data){
    28fe:	28 2f       	mov	r18, r24


	 //uart(0,1,data);

     //EDC-MSG
     if (data==0x02){
    2900:	82 30       	cpi	r24, 0x02	; 2
    2902:	39 f4       	brne	.+14     	; 0x2912 <ScanEDCFlow+0x14>
	     IsEDCFlow=True;
    2904:	81 e0       	ldi	r24, 0x01	; 1
    2906:	80 93 a3 02 	sts	0x02A3, r24
		 nFlow=0;
    290a:	10 92 a2 02 	sts	0x02A2, r1
    290e:	10 92 a1 02 	sts	0x02A1, r1
	 }//FillMessage
     if (IsEDCFlow==True){
    2912:	80 91 a3 02 	lds	r24, 0x02A3
    2916:	81 30       	cpi	r24, 0x01	; 1
    2918:	69 f4       	brne	.+26     	; 0x2934 <ScanEDCFlow+0x36>
	     rcv_trans[nFlow]=data;
    291a:	80 91 a1 02 	lds	r24, 0x02A1
    291e:	90 91 a2 02 	lds	r25, 0x02A2
    2922:	fc 01       	movw	r30, r24
    2924:	e3 5e       	subi	r30, 0xE3	; 227
    2926:	f6 4f       	sbci	r31, 0xF6	; 246
    2928:	20 83       	st	Z, r18
		 nFlow++;
    292a:	01 96       	adiw	r24, 0x01	; 1
    292c:	90 93 a2 02 	sts	0x02A2, r25
    2930:	80 93 a1 02 	sts	0x02A1, r24
	 }//CloseMessage
	 if ((data==0x03)||(nFlow>=MSG03_LENGTH)){
    2934:	23 30       	cpi	r18, 0x03	; 3
    2936:	41 f0       	breq	.+16     	; 0x2948 <ScanEDCFlow+0x4a>
    2938:	80 91 a1 02 	lds	r24, 0x02A1
    293c:	90 91 a2 02 	lds	r25, 0x02A2
    2940:	8d 34       	cpi	r24, 0x4D	; 77
    2942:	91 05       	cpc	r25, r1
    2944:	08 f4       	brcc	.+2      	; 0x2948 <ScanEDCFlow+0x4a>
    2946:	99 c0       	rjmp	.+306    	; 0x2a7a <ScanEDCFlow+0x17c>
	     //for(i=0;i<nFlow;i++){uart(0,1,rcv_trans[i]);}
	     IsEDCFlow=False;
    2948:	10 92 a3 02 	sts	0x02A3, r1
		 EDCMsgCode=((rcv_trans[1]-'0')*10)+(rcv_trans[2]-'0');
    294c:	30 91 1f 09 	lds	r19, 0x091F
    2950:	30 51       	subi	r19, 0x10	; 16
    2952:	80 91 1e 09 	lds	r24, 0x091E
    2956:	2a e0       	ldi	r18, 0x0A	; 10
    2958:	82 9f       	mul	r24, r18
    295a:	c0 01       	movw	r24, r0
    295c:	11 24       	eor	r1, r1
    295e:	38 0f       	add	r19, r24

		 if (EDCMsgCode==0x03){
    2960:	33 30       	cpi	r19, 0x03	; 3
    2962:	09 f0       	breq	.+2      	; 0x2966 <ScanEDCFlow+0x68>
    2964:	65 c0       	rjmp	.+202    	; 0x2a30 <ScanEDCFlow+0x132>
    2966:	e0 e2       	ldi	r30, 0x20	; 32
    2968:	f9 e0       	ldi	r31, 0x09	; 9
    296a:	a8 e8       	ldi	r26, 0x88	; 136
    296c:	bc e0       	ldi	r27, 0x0C	; 12
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    296e:	81 91       	ld	r24, Z+
    2970:	8d 93       	st	X+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    2972:	89 e0       	ldi	r24, 0x09	; 9
    2974:	e6 32       	cpi	r30, 0x26	; 38
    2976:	f8 07       	cpc	r31, r24
    2978:	d1 f7       	brne	.-12     	; 0x296e <ScanEDCFlow+0x70>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    297a:	10 92 8e 0c 	sts	0x0C8E, r1
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    297e:	80 81       	ld	r24, Z
    2980:	80 93 b9 07 	sts	0x07B9, r24
    2984:	81 81       	ldd	r24, Z+1	; 0x01
    2986:	80 93 ba 07 	sts	0x07BA, r24
	 }Dest[Length]=0;
    298a:	10 92 bb 07 	sts	0x07BB, r1
    298e:	32 96       	adiw	r30, 0x02	; 2
    2990:	a4 ea       	ldi	r26, 0xA4	; 164
    2992:	bc e0       	ldi	r27, 0x0C	; 12
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    2994:	81 91       	ld	r24, Z+
    2996:	8d 93       	st	X+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    2998:	89 e0       	ldi	r24, 0x09	; 9
    299a:	e7 33       	cpi	r30, 0x37	; 55
    299c:	f8 07       	cpc	r31, r24
    299e:	d1 f7       	brne	.-12     	; 0x2994 <ScanEDCFlow+0x96>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    29a0:	10 92 b3 0c 	sts	0x0CB3, r1
    29a4:	a9 e8       	ldi	r26, 0x89	; 137
    29a6:	bb e0       	ldi	r27, 0x0B	; 11
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    29a8:	81 91       	ld	r24, Z+
    29aa:	8d 93       	st	X+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    29ac:	89 e0       	ldi	r24, 0x09	; 9
    29ae:	ea 34       	cpi	r30, 0x4A	; 74
    29b0:	f8 07       	cpc	r31, r24
    29b2:	d1 f7       	brne	.-12     	; 0x29a8 <ScanEDCFlow+0xaa>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    29b4:	10 92 9c 0b 	sts	0x0B9C, r1
    29b8:	20 e0       	ldi	r18, 0x00	; 0
    29ba:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    29bc:	f9 01       	movw	r30, r18
    29be:	e0 51       	subi	r30, 0x10	; 16
    29c0:	f8 4f       	sbci	r31, 0xF8	; 248
    29c2:	d9 01       	movw	r26, r18
    29c4:	a3 5e       	subi	r26, 0xE3	; 227
    29c6:	b6 4f       	sbci	r27, 0xF6	; 246
    29c8:	9d 96       	adiw	r26, 0x2d	; 45
    29ca:	8c 91       	ld	r24, X
    29cc:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    29ce:	2f 5f       	subi	r18, 0xFF	; 255
    29d0:	3f 4f       	sbci	r19, 0xFF	; 255
    29d2:	26 30       	cpi	r18, 0x06	; 6
    29d4:	31 05       	cpc	r19, r1
    29d6:	91 f7       	brne	.-28     	; 0x29bc <ScanEDCFlow+0xbe>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    29d8:	10 92 f6 07 	sts	0x07F6, r1
    29dc:	20 e0       	ldi	r18, 0x00	; 0
    29de:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    29e0:	f9 01       	movw	r30, r18
    29e2:	ed 5a       	subi	r30, 0xAD	; 173
    29e4:	f8 4f       	sbci	r31, 0xF8	; 248
    29e6:	d9 01       	movw	r26, r18
    29e8:	a3 5e       	subi	r26, 0xE3	; 227
    29ea:	b6 4f       	sbci	r27, 0xF6	; 246
    29ec:	d3 96       	adiw	r26, 0x33	; 51
    29ee:	8c 91       	ld	r24, X
    29f0:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    29f2:	2f 5f       	subi	r18, 0xFF	; 255
    29f4:	3f 4f       	sbci	r19, 0xFF	; 255
    29f6:	2a 30       	cpi	r18, 0x0A	; 10
    29f8:	31 05       	cpc	r19, r1
    29fa:	91 f7       	brne	.-28     	; 0x29e0 <ScanEDCFlow+0xe2>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    29fc:	10 92 5d 07 	sts	0x075D, r1
    2a00:	20 e0       	ldi	r18, 0x00	; 0
    2a02:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    2a04:	f9 01       	movw	r30, r18
    2a06:	e1 54       	subi	r30, 0x41	; 65
    2a08:	f4 4f       	sbci	r31, 0xF4	; 244
    2a0a:	d9 01       	movw	r26, r18
    2a0c:	a3 5e       	subi	r26, 0xE3	; 227
    2a0e:	b6 4f       	sbci	r27, 0xF6	; 246
    2a10:	dd 96       	adiw	r26, 0x3d	; 61
    2a12:	8c 91       	ld	r24, X
    2a14:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    2a16:	2f 5f       	subi	r18, 0xFF	; 255
    2a18:	3f 4f       	sbci	r19, 0xFF	; 255
    2a1a:	2e 30       	cpi	r18, 0x0E	; 14
    2a1c:	31 05       	cpc	r19, r1
    2a1e:	91 f7       	brne	.-28     	; 0x2a04 <ScanEDCFlow+0x106>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    2a20:	10 92 cd 0b 	sts	0x0BCD, r1
             StrPosCopy(rcv_trans,strCardType,11,15);
             StrPosCopy(rcv_trans,strCardID,26,19);
             StrPosCopy(rcv_trans,strApprovalCode,45,6);
             StrPosCopy(rcv_trans,strInvoiceNumber,51,10);
             StrPosCopy(rcv_trans,strDateTime,61,14);
		     IsEDCApproved=True;//Sending Message 92
    2a24:	81 e0       	ldi	r24, 0x01	; 1
    2a26:	80 93 99 01 	sts	0x0199, r24
			 IsPrintApprovalCode=True;
    2a2a:	80 93 9a 01 	sts	0x019A, r24
    2a2e:	08 95       	ret
	    }else
		 if (EDCMsgCode==0x04){
    2a30:	34 30       	cpi	r19, 0x04	; 4
    2a32:	19 f5       	brne	.+70     	; 0x2a7a <ScanEDCFlow+0x17c>
    2a34:	e0 e2       	ldi	r30, 0x20	; 32
    2a36:	f9 e0       	ldi	r31, 0x09	; 9
    2a38:	a0 ef       	ldi	r26, 0xF0	; 240
    2a3a:	b7 e0       	ldi	r27, 0x07	; 7
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    2a3c:	81 91       	ld	r24, Z+
    2a3e:	8d 93       	st	X+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    2a40:	89 e0       	ldi	r24, 0x09	; 9
    2a42:	e6 32       	cpi	r30, 0x26	; 38
    2a44:	f8 07       	cpc	r31, r24
    2a46:	d1 f7       	brne	.-12     	; 0x2a3c <ScanEDCFlow+0x13e>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    2a48:	10 92 f6 07 	sts	0x07F6, r1
    2a4c:	a3 e5       	ldi	r26, 0x53	; 83
    2a4e:	b7 e0       	ldi	r27, 0x07	; 7
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    2a50:	81 91       	ld	r24, Z+
    2a52:	8d 93       	st	X+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    2a54:	89 e0       	ldi	r24, 0x09	; 9
    2a56:	e0 33       	cpi	r30, 0x30	; 48
    2a58:	f8 07       	cpc	r31, r24
    2a5a:	d1 f7       	brne	.-12     	; 0x2a50 <ScanEDCFlow+0x152>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    2a5c:	10 92 5d 07 	sts	0x075D, r1
    2a60:	af eb       	ldi	r26, 0xBF	; 191
    2a62:	bb e0       	ldi	r27, 0x0B	; 11
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    2a64:	81 91       	ld	r24, Z+
    2a66:	8d 93       	st	X+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    2a68:	89 e0       	ldi	r24, 0x09	; 9
    2a6a:	ee 33       	cpi	r30, 0x3E	; 62
    2a6c:	f8 07       	cpc	r31, r24
    2a6e:	d1 f7       	brne	.-12     	; 0x2a64 <ScanEDCFlow+0x166>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    2a70:	10 92 cd 0b 	sts	0x0BCD, r1
	    }else
		 if (EDCMsgCode==0x04){
             StrPosCopy(rcv_trans,strApprovalCode,3,6);
             StrPosCopy(rcv_trans,strInvoiceNumber,9,10);
             StrPosCopy(rcv_trans,strDateTime,19,14);
			 IsVoidTransaction=True;
    2a74:	81 e0       	ldi	r24, 0x01	; 1
    2a76:	80 93 9b 01 	sts	0x019B, r24
    2a7a:	08 95       	ret

00002a7c <ScanHiddenKeyFlow>:
	    }
    }//MSGDetection
}

void ScanHiddenKeyFlow(char KeyIn){
}
    2a7c:	08 95       	ret

00002a7e <ScanRFIDFlow>:


void ScanRFIDFlow(char data){//                   12 11 10 9  8  7  6  5  4  3  2  1  0
    2a7e:	98 2f       	mov	r25, r24
    2a80:	ef e6       	ldi	r30, 0x6F	; 111
    2a82:	f8 e0       	ldi	r31, 0x08	; 8
     char i=0,strSerial[20]; //Shift Data Serial; 02 32 33 44 31 30 41 36 43 0D 0A 0A 03 
	                                                //2 50 51 65 68 68 68 54 67 13 10 3
     
	 //Shifting
	 for(i=0;i<19;i++){
        strSerialFlow[19-i]=strSerialFlow[18-i];   
    2a84:	80 81       	ld	r24, Z
    2a86:	81 83       	std	Z+1, r24	; 0x01
    2a88:	31 97       	sbiw	r30, 0x01	; 1
void ScanRFIDFlow(char data){//                   12 11 10 9  8  7  6  5  4  3  2  1  0
     char i=0,strSerial[20]; //Shift Data Serial; 02 32 33 44 31 30 41 36 43 0D 0A 0A 03 
	                                                //2 50 51 65 68 68 68 54 67 13 10 3
     
	 //Shifting
	 for(i=0;i<19;i++){
    2a8a:	88 e0       	ldi	r24, 0x08	; 8
    2a8c:	ec 35       	cpi	r30, 0x5C	; 92
    2a8e:	f8 07       	cpc	r31, r24
    2a90:	c9 f7       	brne	.-14     	; 0x2a84 <ScanRFIDFlow+0x6>
        strSerialFlow[19-i]=strSerialFlow[18-i];   
	 }  strSerialFlow[0]=data;
    2a92:	9f 01       	movw	r18, r30
    2a94:	2f 5f       	subi	r18, 0xFF	; 255
    2a96:	3f 4f       	sbci	r19, 0xFF	; 255
    2a98:	91 83       	std	Z+1, r25	; 0x01

	 //Detection
	 if ((strSerialFlow[11]==0x02)&&(strSerialFlow[1]==0x0A)&&(strSerialFlow[0]==0x03)){
    2a9a:	84 85       	ldd	r24, Z+12	; 0x0c
    2a9c:	82 30       	cpi	r24, 0x02	; 2
    2a9e:	f9 f4       	brne	.+62     	; 0x2ade <ScanRFIDFlow+0x60>
    2aa0:	80 91 5e 08 	lds	r24, 0x085E
    2aa4:	8a 30       	cpi	r24, 0x0A	; 10
    2aa6:	d9 f4       	brne	.+54     	; 0x2ade <ScanRFIDFlow+0x60>
    2aa8:	93 30       	cpi	r25, 0x03	; 3
    2aaa:	c9 f4       	brne	.+50     	; 0x2ade <ScanRFIDFlow+0x60>
    2aac:	f9 01       	movw	r30, r18
    2aae:	3a 96       	adiw	r30, 0x0a	; 10
    2ab0:	a1 e5       	ldi	r26, 0x51	; 81
    2ab2:	bc e0       	ldi	r27, 0x0C	; 12
		for(i=0;i<8;i++) strRFID[i]=strSerialFlow[10-i];
    2ab4:	80 81       	ld	r24, Z
    2ab6:	8d 93       	st	X+, r24
    2ab8:	31 97       	sbiw	r30, 0x01	; 1
    2aba:	88 e0       	ldi	r24, 0x08	; 8
    2abc:	ef 35       	cpi	r30, 0x5F	; 95
    2abe:	f8 07       	cpc	r31, r24
    2ac0:	c9 f7       	brne	.-14     	; 0x2ab4 <ScanRFIDFlow+0x36>
        strRFID[8]=0;
    2ac2:	10 92 59 0c 	sts	0x0C59, r1
	    IsRFIDDetected=True;
    2ac6:	81 e0       	ldi	r24, 0x01	; 1
    2ac8:	80 93 98 01 	sts	0x0198, r24
	      }
     }      
}

void BackLightTrig(){    
     __key_light = 1; 
    2acc:	80 93 ae 02 	sts	0x02AE, r24
	 __key_lgtcnt = 0; 
    2ad0:	10 92 af 02 	sts	0x02AF, r1
	 PORTG=PORTG&0b11111101;
    2ad4:	80 91 65 00 	lds	r24, 0x0065
    2ad8:	8d 7f       	andi	r24, 0xFD	; 253
    2ada:	80 93 65 00 	sts	0x0065, r24
		BackLightTrig();
        //sprintf_P(strSerial,PSTR("RFID:%s"),strRFID);
        //uart_print(0,1,strSerial);
	 }
	 //Add Detection FR-20
	 if ((strSerialFlow[13]==0x02)&&(strSerialFlow[1]==0x0A)&&(strSerialFlow[0]==0x03)){
    2ade:	80 91 6a 08 	lds	r24, 0x086A
    2ae2:	82 30       	cpi	r24, 0x02	; 2
    2ae4:	f9 f4       	brne	.+62     	; 0x2b24 <ScanRFIDFlow+0xa6>
    2ae6:	80 91 5e 08 	lds	r24, 0x085E
    2aea:	8a 30       	cpi	r24, 0x0A	; 10
    2aec:	d9 f4       	brne	.+54     	; 0x2b24 <ScanRFIDFlow+0xa6>
    2aee:	93 30       	cpi	r25, 0x03	; 3
    2af0:	c9 f4       	brne	.+50     	; 0x2b24 <ScanRFIDFlow+0xa6>
    2af2:	e9 e6       	ldi	r30, 0x69	; 105
    2af4:	f8 e0       	ldi	r31, 0x08	; 8
    2af6:	a1 e5       	ldi	r26, 0x51	; 81
    2af8:	bc e0       	ldi	r27, 0x0C	; 12
		for(i=0;i<10;i++) strRFID[i]=strSerialFlow[12-i];
    2afa:	80 81       	ld	r24, Z
    2afc:	8d 93       	st	X+, r24
    2afe:	31 97       	sbiw	r30, 0x01	; 1
    2b00:	88 e0       	ldi	r24, 0x08	; 8
    2b02:	ef 35       	cpi	r30, 0x5F	; 95
    2b04:	f8 07       	cpc	r31, r24
    2b06:	c9 f7       	brne	.-14     	; 0x2afa <ScanRFIDFlow+0x7c>
        strRFID[11]=0;
    2b08:	10 92 5c 0c 	sts	0x0C5C, r1
	    IsRFIDDetected=True;
    2b0c:	81 e0       	ldi	r24, 0x01	; 1
    2b0e:	80 93 98 01 	sts	0x0198, r24
	      }
     }      
}

void BackLightTrig(){    
     __key_light = 1; 
    2b12:	80 93 ae 02 	sts	0x02AE, r24
	 __key_lgtcnt = 0; 
    2b16:	10 92 af 02 	sts	0x02AF, r1
	 PORTG=PORTG&0b11111101;
    2b1a:	80 91 65 00 	lds	r24, 0x0065
    2b1e:	8d 7f       	andi	r24, 0xFD	; 253
    2b20:	80 93 65 00 	sts	0x0065, r24
    2b24:	08 95       	ret

00002b26 <__vector_18>:
	if (IFType==IT_SLAVE)ScanEDCFlow(dataSPI);
	else
	if (IFType==IT_STANDALONE)ScanStandaloneFlow(dataSPI);
}

ISR(USART0_RX_vect){
    2b26:	1f 92       	push	r1
    2b28:	0f 92       	push	r0
    2b2a:	0f b6       	in	r0, 0x3f	; 63
    2b2c:	0f 92       	push	r0
    2b2e:	11 24       	eor	r1, r1
    2b30:	8f 93       	push	r24
    2b32:	9f 93       	push	r25
	char dataRX0,IsSPI=False;
	dataRX0= UDR0;
    2b34:	9c b1       	in	r25, 0x0c	; 12
	//PrintBusyDetection
	if ((IsBusyIdlePrinting==True)||(IsBusyFreePrinting==True)){
    2b36:	80 91 b2 01 	lds	r24, 0x01B2
    2b3a:	81 30       	cpi	r24, 0x01	; 1
    2b3c:	21 f0       	breq	.+8      	; 0x2b46 <__vector_18+0x20>
    2b3e:	80 91 b4 01 	lds	r24, 0x01B4
    2b42:	81 30       	cpi	r24, 0x01	; 1
    2b44:	51 f4       	brne	.+20     	; 0x2b5a <__vector_18+0x34>
	    if (dataRX0==19)IsBusyPrint=True;
    2b46:	93 31       	cpi	r25, 0x13	; 19
    2b48:	21 f4       	brne	.+8      	; 0x2b52 <__vector_18+0x2c>
    2b4a:	81 e0       	ldi	r24, 0x01	; 1
    2b4c:	80 93 b3 01 	sts	0x01B3, r24
    2b50:	04 c0       	rjmp	.+8      	; 0x2b5a <__vector_18+0x34>
		else 
	    if (dataRX0==17)IsBusyPrint=False;	
    2b52:	91 31       	cpi	r25, 0x11	; 17
    2b54:	11 f4       	brne	.+4      	; 0x2b5a <__vector_18+0x34>
    2b56:	10 92 b3 01 	sts	0x01B3, r1
	}
}
    2b5a:	9f 91       	pop	r25
    2b5c:	8f 91       	pop	r24
    2b5e:	0f 90       	pop	r0
    2b60:	0f be       	out	0x3f, r0	; 63
    2b62:	0f 90       	pop	r0
    2b64:	1f 90       	pop	r1
    2b66:	18 95       	reti

00002b68 <ScanCommand>:

char ScanCommand(char *strFlow,char *fCommand){
     char Result;
	 Result=False;
   return Result;
}
    2b68:	80 e0       	ldi	r24, 0x00	; 0
    2b6a:	08 95       	ret

00002b6c <ConfigProtocol>:
	 }
	 uart_printf(1,1,PSTR(">"));
	 //End
}

void ConfigProtocol(char dataIn){
    2b6c:	28 2f       	mov	r18, r24
     static char Conflow[7];
    //Configuration Data Request 
	if ((Conflow[6]=='i')&&(Conflow[5]=='C')&&(Conflow[4]=='o')&&(Conflow[3]=='n')&&(Conflow[2]=='f')&&(Conflow[1]=='?')&&(Conflow[0]==0x0D)&&(dataIn==0x0A)){
    2b6e:	80 91 9f 02 	lds	r24, 0x029F
    2b72:	89 36       	cpi	r24, 0x69	; 105
    2b74:	e9 f4       	brne	.+58     	; 0x2bb0 <ConfigProtocol+0x44>
    2b76:	80 91 9e 02 	lds	r24, 0x029E
    2b7a:	83 34       	cpi	r24, 0x43	; 67
    2b7c:	c9 f4       	brne	.+50     	; 0x2bb0 <ConfigProtocol+0x44>
    2b7e:	80 91 9d 02 	lds	r24, 0x029D
    2b82:	8f 36       	cpi	r24, 0x6F	; 111
    2b84:	a9 f4       	brne	.+42     	; 0x2bb0 <ConfigProtocol+0x44>
    2b86:	80 91 9c 02 	lds	r24, 0x029C
    2b8a:	8e 36       	cpi	r24, 0x6E	; 110
    2b8c:	89 f4       	brne	.+34     	; 0x2bb0 <ConfigProtocol+0x44>
    2b8e:	80 91 9b 02 	lds	r24, 0x029B
    2b92:	86 36       	cpi	r24, 0x66	; 102
    2b94:	69 f4       	brne	.+26     	; 0x2bb0 <ConfigProtocol+0x44>
    2b96:	80 91 9a 02 	lds	r24, 0x029A
    2b9a:	8f 33       	cpi	r24, 0x3F	; 63
    2b9c:	49 f4       	brne	.+18     	; 0x2bb0 <ConfigProtocol+0x44>
    2b9e:	80 91 99 02 	lds	r24, 0x0299
    2ba2:	8d 30       	cpi	r24, 0x0D	; 13
    2ba4:	29 f4       	brne	.+10     	; 0x2bb0 <ConfigProtocol+0x44>
    2ba6:	2a 30       	cpi	r18, 0x0A	; 10
    2ba8:	19 f4       	brne	.+6      	; 0x2bb0 <ConfigProtocol+0x44>
	     //SendConfigParamater();        
		 ConfigCommand=CC_SEND_CONFIG;
    2baa:	82 e0       	ldi	r24, 0x02	; 2
    2bac:	80 93 b0 01 	sts	0x01B0, r24
	}

	if (IsConfigFlow==True){        
    2bb0:	80 91 85 01 	lds	r24, 0x0185
    2bb4:	81 30       	cpi	r24, 0x01	; 1
    2bb6:	69 f4       	brne	.+26     	; 0x2bd2 <ConfigProtocol+0x66>
	    rcv_trans[char_count]=dataIn;
    2bb8:	80 91 89 01 	lds	r24, 0x0189
    2bbc:	90 91 8a 01 	lds	r25, 0x018A
    2bc0:	fc 01       	movw	r30, r24
    2bc2:	e3 5e       	subi	r30, 0xE3	; 227
    2bc4:	f6 4f       	sbci	r31, 0xF6	; 246
    2bc6:	20 83       	st	Z, r18
	    char_count++; 
    2bc8:	01 96       	adiw	r24, 0x01	; 1
    2bca:	90 93 8a 01 	sts	0x018A, r25
    2bce:	80 93 89 01 	sts	0x0189, r24
	}
	if ((Conflow[0]==0x04)&&(dataIn==0x40)){
    2bd2:	80 91 99 02 	lds	r24, 0x0299
    2bd6:	84 30       	cpi	r24, 0x04	; 4
    2bd8:	51 f4       	brne	.+20     	; 0x2bee <ConfigProtocol+0x82>
    2bda:	20 34       	cpi	r18, 0x40	; 64
    2bdc:	e9 f4       	brne	.+58     	; 0x2c18 <ConfigProtocol+0xac>
	     IsConfigFlow=True;
    2bde:	81 e0       	ldi	r24, 0x01	; 1
    2be0:	80 93 85 01 	sts	0x0185, r24
		 char_count=0;
    2be4:	10 92 8a 01 	sts	0x018A, r1
    2be8:	10 92 89 01 	sts	0x0189, r1
    2bec:	15 c0       	rjmp	.+42     	; 0x2c18 <ConfigProtocol+0xac>
	}
	//SavingData
	if ((Conflow[0]==0x05)&&(dataIn==0x50)){
    2bee:	85 30       	cpi	r24, 0x05	; 5
    2bf0:	99 f4       	brne	.+38     	; 0x2c18 <ConfigProtocol+0xac>
    2bf2:	20 35       	cpi	r18, 0x50	; 80
    2bf4:	89 f4       	brne	.+34     	; 0x2c18 <ConfigProtocol+0xac>
	     transLength=char_count;
    2bf6:	80 91 89 01 	lds	r24, 0x0189
    2bfa:	90 91 8a 01 	lds	r25, 0x018A
    2bfe:	90 93 8c 01 	sts	0x018C, r25
    2c02:	80 93 8b 01 	sts	0x018B, r24
		 char_count=0;
    2c06:	10 92 8a 01 	sts	0x018A, r1
    2c0a:	10 92 89 01 	sts	0x0189, r1
	     IsConfigFlow=False;
    2c0e:	10 92 85 01 	sts	0x0185, r1
		 ConfigCommand=CC_SAVE_CONFIG;
    2c12:	81 e0       	ldi	r24, 0x01	; 1
    2c14:	80 93 b0 01 	sts	0x01B0, r24
		 //SaveConfigParameter();
	}

	//Shifting
	Conflow[6]=Conflow[5];
    2c18:	80 91 9e 02 	lds	r24, 0x029E
    2c1c:	80 93 9f 02 	sts	0x029F, r24
	Conflow[5]=Conflow[4];
    2c20:	80 91 9d 02 	lds	r24, 0x029D
    2c24:	80 93 9e 02 	sts	0x029E, r24
	Conflow[4]=Conflow[3];
    2c28:	80 91 9c 02 	lds	r24, 0x029C
    2c2c:	80 93 9d 02 	sts	0x029D, r24
	Conflow[3]=Conflow[2];
    2c30:	80 91 9b 02 	lds	r24, 0x029B
    2c34:	80 93 9c 02 	sts	0x029C, r24
	Conflow[2]=Conflow[1];
    2c38:	80 91 9a 02 	lds	r24, 0x029A
    2c3c:	80 93 9b 02 	sts	0x029B, r24
	Conflow[1]=Conflow[0];
    2c40:	80 91 99 02 	lds	r24, 0x0299
    2c44:	80 93 9a 02 	sts	0x029A, r24
	Conflow[0]=dataIn;
    2c48:	20 93 99 02 	sts	0x0299, r18

}
    2c4c:	08 95       	ret

00002c4e <system_beep>:
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    2c4e:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    2c50:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    2c52:	80 93 bc 01 	sts	0x01BC, r24
}
    2c56:	08 95       	ret

00002c58 <systemRestart>:
	 iRestart=0;
	 while(iRestart<100){
	       strRestart[iRestart]=iRestart;
	       iRestart++;	 
	 }
}
    2c58:	08 95       	ret

00002c5a <Low>:

char Low(char X){
     char Result;
	 Result=(0x0F&X);
	 return Result;
}
    2c5a:	8f 70       	andi	r24, 0x0F	; 15
    2c5c:	08 95       	ret

00002c5e <High>:
char High(char X){
     char Result;
	 Result=((X>>4)&(0x0F));
	 return Result;
}
    2c5e:	82 95       	swap	r24
    2c60:	8f 70       	andi	r24, 0x0F	; 15
    2c62:	08 95       	ret

00002c64 <Str>:
char Str(char H){
    2c64:	98 2f       	mov	r25, r24
unsigned char Conv=0;
        if ((H>=0)&&(H<=9)) Conv='0'+H;
    2c66:	8a 30       	cpi	r24, 0x0A	; 10
    2c68:	10 f4       	brcc	.+4      	; 0x2c6e <Str+0xa>
    2c6a:	80 5d       	subi	r24, 0xD0	; 208
    2c6c:	08 95       	ret
        else
        if ((H>=0x0A)&&(H<=0x0F)) Conv='A'+(H-10);    
    2c6e:	8a 50       	subi	r24, 0x0A	; 10
    2c70:	86 30       	cpi	r24, 0x06	; 6
    2c72:	10 f0       	brcs	.+4      	; 0x2c78 <Str+0x14>
    2c74:	80 e0       	ldi	r24, 0x00	; 0
    2c76:	08 95       	ret
    2c78:	89 2f       	mov	r24, r25
    2c7a:	89 5c       	subi	r24, 0xC9	; 201
        return (Conv);
}
    2c7c:	08 95       	ret

00002c7e <charToHex>:

void charToHex(char X, char *Result){
    2c7e:	ff 92       	push	r15
    2c80:	0f 93       	push	r16
    2c82:	1f 93       	push	r17
    2c84:	f8 2e       	mov	r15, r24
    2c86:	8b 01       	movw	r16, r22
     Result[0]=Str(High(X));
    2c88:	82 95       	swap	r24
    2c8a:	8f 70       	andi	r24, 0x0F	; 15
    2c8c:	0e 94 32 16 	call	0x2c64	; 0x2c64 <Str>
    2c90:	f8 01       	movw	r30, r16
    2c92:	80 83       	st	Z, r24
	 Result[1]=Str(Low(X));
    2c94:	8f 2d       	mov	r24, r15
    2c96:	8f 70       	andi	r24, 0x0F	; 15
    2c98:	0e 94 32 16 	call	0x2c64	; 0x2c64 <Str>
    2c9c:	f8 01       	movw	r30, r16
    2c9e:	81 83       	std	Z+1, r24	; 0x01
	 Result[2]=0;
    2ca0:	12 82       	std	Z+2, r1	; 0x02
	 
}
    2ca2:	1f 91       	pop	r17
    2ca4:	0f 91       	pop	r16
    2ca6:	ff 90       	pop	r15
    2ca8:	08 95       	ret

00002caa <strToInt>:

char strToInt(char *str){
    2caa:	fc 01       	movw	r30, r24
     char Result;
     Result=(((str[0]-'0')*10) +(str[0]-'0'));
    2cac:	80 81       	ld	r24, Z
    2cae:	2a e0       	ldi	r18, 0x0A	; 10
    2cb0:	82 9f       	mul	r24, r18
    2cb2:	90 01       	movw	r18, r0
    2cb4:	11 24       	eor	r1, r1
    2cb6:	80 51       	subi	r24, 0x10	; 16
	 return Result;
}
    2cb8:	82 0f       	add	r24, r18
    2cba:	08 95       	ret

00002cbc <intToStr>:

void intToStr(char X, char *str){
    2cbc:	58 2f       	mov	r21, r24
    2cbe:	fb 01       	movw	r30, r22
     char R,P,S;
	 R=X/100;
    2cc0:	64 e6       	ldi	r22, 0x64	; 100
    2cc2:	0e 94 61 aa 	call	0x154c2	; 0x154c2 <__udivmodqi4>
    2cc6:	a8 2f       	mov	r26, r24
	 P=(X%100)/10;
    2cc8:	85 2f       	mov	r24, r21
    2cca:	0e 94 61 aa 	call	0x154c2	; 0x154c2 <__udivmodqi4>
    2cce:	89 2f       	mov	r24, r25
    2cd0:	6a e0       	ldi	r22, 0x0A	; 10
    2cd2:	0e 94 61 aa 	call	0x154c2	; 0x154c2 <__udivmodqi4>
    2cd6:	48 2f       	mov	r20, r24
	 S=X-(R*100)-(P*10);
    2cd8:	8c e9       	ldi	r24, 0x9C	; 156
    2cda:	9f ef       	ldi	r25, 0xFF	; 255
    2cdc:	a8 9f       	mul	r26, r24
    2cde:	80 2d       	mov	r24, r0
    2ce0:	11 24       	eor	r1, r1
    2ce2:	85 0f       	add	r24, r21
    2ce4:	26 ef       	ldi	r18, 0xF6	; 246
    2ce6:	3f ef       	ldi	r19, 0xFF	; 255
    2ce8:	42 9f       	mul	r20, r18
    2cea:	90 2d       	mov	r25, r0
    2cec:	11 24       	eor	r1, r1
    2cee:	98 0f       	add	r25, r24
	 if (X>=100){
    2cf0:	54 36       	cpi	r21, 0x64	; 100
    2cf2:	40 f0       	brcs	.+16     	; 0x2d04 <intToStr+0x48>
	     str[0]=('0'+R);
    2cf4:	a0 5d       	subi	r26, 0xD0	; 208
    2cf6:	a0 83       	st	Z, r26
	     str[1]=('0'+P);
    2cf8:	40 5d       	subi	r20, 0xD0	; 208
    2cfa:	41 83       	std	Z+1, r20	; 0x01
	     str[2]=('0'+S);
    2cfc:	90 5d       	subi	r25, 0xD0	; 208
    2cfe:	92 83       	std	Z+2, r25	; 0x02
	     str[3]=0;
    2d00:	13 82       	std	Z+3, r1	; 0x03
    2d02:	08 95       	ret
	 if ((X>=10)&&(X>100)){
	     str[0]=('0'+P);
	     str[1]=('0'+S);
	     str[2]=0;
	 }else 
	 if (X<=10){
    2d04:	5b 30       	cpi	r21, 0x0B	; 11
    2d06:	18 f4       	brcc	.+6      	; 0x2d0e <intToStr+0x52>
	     str[0]=('0'+S);
    2d08:	90 5d       	subi	r25, 0xD0	; 208
    2d0a:	90 83       	st	Z, r25
	     str[1]=0;
    2d0c:	11 82       	std	Z+1, r1	; 0x01
    2d0e:	08 95       	ret

00002d10 <UpdateClientIP>:
	 for(i=0;i<4;i++){
	     zeroIP(IP_blok[i],strIP[i]);
	 }
     sprintf_P(strClientIP,PSTR("%s.%s.%s.%s"),strIP[0],strIP[1],strIP[2],strIP[3]);
	 */
}
    2d10:	08 95       	ret

00002d12 <UpdateServerIP>:
	 for(i=0;i<4;i++){
	     zeroIP(IP_blok[i],strIP[i]);
	 }
		 sprintf_P(strServerIP,PSTR("%s.%s.%s.%s"),strIP[0],strIP[1],strIP[2],strIP[3]);
		 */
}
    2d12:	08 95       	ret

00002d14 <UpdateIFT_ID>:
void UpdateIFT_ID(){
    /* char IdIFT;
	 IdIFT=(eeprom_read_byte(&DefIFT_ID)%100);
	 sprintf_P(strIFT_ID,PSTR("%.2d"),IdIFT);
	 */
}
    2d14:	08 95       	ret

00002d16 <UpdateSeqNum>:
/*
     if (SeqNum<100)SeqNum++;
	 else SeqNum=0;
	 leadingZero(SeqNum,strSeqNum);
	 */
} 
    2d16:	08 95       	ret

00002d18 <StringCopy>:
	 }strCardID[Length]=0;     
}
//Message 56


void StringCopy(char *Source,char *Dest,char Length){
    2d18:	cf 93       	push	r28
    2d1a:	df 93       	push	r29
    2d1c:	db 01       	movw	r26, r22
    2d1e:	ec 01       	movw	r28, r24
    2d20:	20 e0       	ldi	r18, 0x00	; 0
    2d22:	30 e0       	ldi	r19, 0x00	; 0
    2d24:	07 c0       	rjmp	.+14     	; 0x2d34 <StringCopy+0x1c>
     char i;
	 for (i=0;i<Length;i++){
	     Dest[i]=Source[i];
    2d26:	fd 01       	movw	r30, r26
    2d28:	e2 0f       	add	r30, r18
    2d2a:	f3 1f       	adc	r31, r19
    2d2c:	89 91       	ld	r24, Y+
    2d2e:	80 83       	st	Z, r24
    2d30:	2f 5f       	subi	r18, 0xFF	; 255
    2d32:	3f 4f       	sbci	r19, 0xFF	; 255
//Message 56


void StringCopy(char *Source,char *Dest,char Length){
     char i;
	 for (i=0;i<Length;i++){
    2d34:	24 17       	cp	r18, r20
    2d36:	b8 f3       	brcs	.-18     	; 0x2d26 <StringCopy+0xe>
	     Dest[i]=Source[i];
	 }Dest[Length]=0;
    2d38:	a4 0f       	add	r26, r20
    2d3a:	b1 1d       	adc	r27, r1
    2d3c:	1c 92       	st	X, r1
}
    2d3e:	df 91       	pop	r29
    2d40:	cf 91       	pop	r28
    2d42:	08 95       	ret

00002d44 <StringCopyPos>:
void StringCopyPos(char *Source,char *Dest,char SrcPos,char Length){
    2d44:	cf 93       	push	r28
    2d46:	df 93       	push	r29
    2d48:	db 01       	movw	r26, r22
    2d4a:	ec 01       	movw	r28, r24
    2d4c:	c4 0f       	add	r28, r20
    2d4e:	d1 1d       	adc	r29, r1
    2d50:	40 e0       	ldi	r20, 0x00	; 0
    2d52:	50 e0       	ldi	r21, 0x00	; 0
    2d54:	07 c0       	rjmp	.+14     	; 0x2d64 <StringCopyPos+0x20>
     char i;
	 for (i=0;i<Length;i++){
	     Dest[i]=Source[SrcPos+i];
    2d56:	fd 01       	movw	r30, r26
    2d58:	e4 0f       	add	r30, r20
    2d5a:	f5 1f       	adc	r31, r21
    2d5c:	89 91       	ld	r24, Y+
    2d5e:	80 83       	st	Z, r24
    2d60:	4f 5f       	subi	r20, 0xFF	; 255
    2d62:	5f 4f       	sbci	r21, 0xFF	; 255
	     Dest[i]=Source[i];
	 }Dest[Length]=0;
}
void StringCopyPos(char *Source,char *Dest,char SrcPos,char Length){
     char i;
	 for (i=0;i<Length;i++){
    2d64:	42 17       	cp	r20, r18
    2d66:	b8 f3       	brcs	.-18     	; 0x2d56 <StringCopyPos+0x12>
	     Dest[i]=Source[SrcPos+i];
	 }Dest[Length]=0;
    2d68:	a2 0f       	add	r26, r18
    2d6a:	b1 1d       	adc	r27, r1
    2d6c:	1c 92       	st	X, r1
}
    2d6e:	df 91       	pop	r29
    2d70:	cf 91       	pop	r28
    2d72:	08 95       	ret

00002d74 <TestLocalAccount>:

void TestLocalAccount(){

}
    2d74:	08 95       	ret

00002d76 <BackLightTrig>:
	      }
     }      
}

void BackLightTrig(){    
     __key_light = 1; 
    2d76:	81 e0       	ldi	r24, 0x01	; 1
    2d78:	80 93 ae 02 	sts	0x02AE, r24
	 __key_lgtcnt = 0; 
    2d7c:	10 92 af 02 	sts	0x02AF, r1
	 PORTG=PORTG&0b11111101;
    2d80:	e5 e6       	ldi	r30, 0x65	; 101
    2d82:	f0 e0       	ldi	r31, 0x00	; 0
    2d84:	80 81       	ld	r24, Z
    2d86:	8d 7f       	andi	r24, 0xFD	; 253
    2d88:	80 83       	st	Z, r24
}
    2d8a:	08 95       	ret

00002d8c <GetBaudrate>:
	 }
}

int GetBaudrate(char brSetting){
int Result=0;
     switch(brSetting){
    2d8c:	82 30       	cpi	r24, 0x02	; 2
    2d8e:	59 f0       	breq	.+22     	; 0x2da6 <GetBaudrate+0x1a>
    2d90:	82 30       	cpi	r24, 0x02	; 2
    2d92:	18 f0       	brcs	.+6      	; 0x2d9a <GetBaudrate+0xe>
    2d94:	83 30       	cpi	r24, 0x03	; 3
    2d96:	21 f4       	brne	.+8      	; 0x2da0 <GetBaudrate+0x14>
    2d98:	09 c0       	rjmp	.+18     	; 0x2dac <GetBaudrate+0x20>
    2d9a:	20 e8       	ldi	r18, 0x80	; 128
    2d9c:	35 e2       	ldi	r19, 0x25	; 37
    2d9e:	08 c0       	rjmp	.+16     	; 0x2db0 <GetBaudrate+0x24>
    2da0:	20 e0       	ldi	r18, 0x00	; 0
    2da2:	30 e0       	ldi	r19, 0x00	; 0
    2da4:	05 c0       	rjmp	.+10     	; 0x2db0 <GetBaudrate+0x24>
    2da6:	20 e0       	ldi	r18, 0x00	; 0
    2da8:	3b e4       	ldi	r19, 0x4B	; 75
    2daa:	02 c0       	rjmp	.+4      	; 0x2db0 <GetBaudrate+0x24>
	 case br9600: 
	      Result=9600;
	      break;
	 case br19200:
	      Result=19200;
	      break;
    2dac:	2b e9       	ldi	r18, 0x9B	; 155
    2dae:	36 e1       	ldi	r19, 0x16	; 22
	 case br5787:
	      Result=5787;
     	  break;	 
	 }
   return Result;
}
    2db0:	c9 01       	movw	r24, r18
    2db2:	08 95       	ret

00002db4 <InitStandalone>:
	      RunInitStandalone=False;
	      break;
	 }
  }
  */
}
    2db4:	08 95       	ret

00002db6 <DisplayQueueFIP>:


void DisplayQueueFIP(){// FIP:#1#2#3#4#5

}
    2db6:	08 95       	ret

00002db8 <ShowMessage>:
	 }
}

void ShowMessage(char *Message){//Display Message on Line3
     char i;
}
    2db8:	08 95       	ret

00002dba <CalcLRC>:

char CalcLRC(char xLRC,char DataIn){
     char Result;
	 Result=xLRC^DataIn;
     return(Result);
}
    2dba:	86 27       	eor	r24, r22
    2dbc:	08 95       	ret

00002dbe <systemEDC>:
}

void systemEDC(){//EDC Handler
     

}
    2dbe:	08 95       	ret

00002dc0 <GeniusCalc>:


char GeniusCalc(char cOption, char valA, char valB){
     char valC_H,valC_L,xValA,xValB,Result;
	 Result=0;
     switch(cOption){
    2dc0:	88 23       	and	r24, r24
    2dc2:	19 f0       	breq	.+6      	; 0x2dca <GeniusCalc+0xa>
    2dc4:	81 30       	cpi	r24, 0x01	; 1
    2dc6:	49 f5       	brne	.+82     	; 0x2e1a <GeniusCalc+0x5a>
    2dc8:	11 c0       	rjmp	.+34     	; 0x2dec <GeniusCalc+0x2c>
	 case G_PLUS:                  // 5 + 8 = 1 + 3 = 4
	      valC_H=(valA+valB)/10;   //  
    2dca:	26 2f       	mov	r18, r22
    2dcc:	30 e0       	ldi	r19, 0x00	; 0
    2dce:	24 0f       	add	r18, r20
    2dd0:	31 1d       	adc	r19, r1
		  valC_L=(valA+valB)%10;   //
	      Result=valC_H+valC_L;
    2dd2:	c9 01       	movw	r24, r18
    2dd4:	6a e0       	ldi	r22, 0x0A	; 10
    2dd6:	70 e0       	ldi	r23, 0x00	; 0
    2dd8:	0e 94 8e aa 	call	0x1551c	; 0x1551c <__divmodhi4>
    2ddc:	48 2f       	mov	r20, r24
    2dde:	c9 01       	movw	r24, r18
    2de0:	6a e0       	ldi	r22, 0x0A	; 10
    2de2:	70 e0       	ldi	r23, 0x00	; 0
    2de4:	0e 94 8e aa 	call	0x1551c	; 0x1551c <__divmodhi4>
    2de8:	46 0f       	add	r20, r22
    2dea:	18 c0       	rjmp	.+48     	; 0x2e1c <GeniusCalc+0x5c>
	      break;
	 case G_MULTY:                 
	      if (valA>0)xValA=valA;
    2dec:	66 23       	and	r22, r22
    2dee:	09 f4       	brne	.+2      	; 0x2df2 <GeniusCalc+0x32>
    2df0:	61 e0       	ldi	r22, 0x01	; 1
		  else xValA=1;
	      if (valB>0)xValB=valB;
    2df2:	44 23       	and	r20, r20
    2df4:	09 f4       	brne	.+2      	; 0x2df8 <GeniusCalc+0x38>
    2df6:	41 e0       	ldi	r20, 0x01	; 1
		  else xValB=1;
	      valC_H=(xValA*xValB)/10;   //  
    2df8:	46 9f       	mul	r20, r22
    2dfa:	90 01       	movw	r18, r0
    2dfc:	11 24       	eor	r1, r1
    2dfe:	c9 01       	movw	r24, r18
    2e00:	6a e0       	ldi	r22, 0x0A	; 10
    2e02:	70 e0       	ldi	r23, 0x00	; 0
    2e04:	0e 94 8e aa 	call	0x1551c	; 0x1551c <__divmodhi4>
    2e08:	46 2f       	mov	r20, r22
		  valC_L=(xValA*xValB)%10;   //
    2e0a:	c9 01       	movw	r24, r18
    2e0c:	6a e0       	ldi	r22, 0x0A	; 10
    2e0e:	70 e0       	ldi	r23, 0x00	; 0
    2e10:	0e 94 8e aa 	call	0x1551c	; 0x1551c <__divmodhi4>
    2e14:	64 2f       	mov	r22, r20
    2e16:	48 2f       	mov	r20, r24
    2e18:	d8 cf       	rjmp	.-80     	; 0x2dca <GeniusCalc+0xa>
    2e1a:	40 e0       	ldi	r20, 0x00	; 0
	 case G_MINUS:
	      
	      break;
	 }
   return Result;
}
    2e1c:	84 2f       	mov	r24, r20
    2e1e:	08 95       	ret

00002e20 <FSubMenuAdmin>:

char FSubMenuAdmin(){
     char Result;
	 Result=MENU_DONE;
   return Result;
}
    2e20:	81 e0       	ldi	r24, 0x01	; 1
    2e22:	08 95       	ret

00002e24 <CountNoPumpSatus>:
	      break;	 
	 } 
   return Result;
}

char CountNoPumpSatus(char *strPumpStatusTotalizer){
    2e24:	ff 92       	push	r15
    2e26:	0f 93       	push	r16
    2e28:	1f 93       	push	r17
    2e2a:	cf 93       	push	r28
    2e2c:	df 93       	push	r29
char i,Result;
     Result=0;
	 for (i=0;i<PumpCountMax;i++){
    2e2e:	f0 90 5c 01 	lds	r15, 0x015C
    2e32:	ec 01       	movw	r28, r24
    2e34:	00 e0       	ldi	r16, 0x00	; 0
    2e36:	10 e0       	ldi	r17, 0x00	; 0
    2e38:	09 c0       	rjmp	.+18     	; 0x2e4c <CountNoPumpSatus+0x28>
	      if (strPumpStatusTotalizer[i]==GetPumpStatusLabel(PUMP_NONE)){
    2e3a:	8e e0       	ldi	r24, 0x0E	; 14
    2e3c:	0e 94 42 14 	call	0x2884	; 0x2884 <GetPumpStatusLabel>
    2e40:	98 81       	ld	r25, Y
    2e42:	98 17       	cp	r25, r24
    2e44:	09 f4       	brne	.+2      	; 0x2e48 <CountNoPumpSatus+0x24>
		      Result++;		  
    2e46:	1f 5f       	subi	r17, 0xFF	; 255
}

char CountNoPumpSatus(char *strPumpStatusTotalizer){
char i,Result;
     Result=0;
	 for (i=0;i<PumpCountMax;i++){
    2e48:	0f 5f       	subi	r16, 0xFF	; 255
    2e4a:	21 96       	adiw	r28, 0x01	; 1
    2e4c:	0f 15       	cp	r16, r15
    2e4e:	a8 f3       	brcs	.-22     	; 0x2e3a <CountNoPumpSatus+0x16>
	      if (strPumpStatusTotalizer[i]==GetPumpStatusLabel(PUMP_NONE)){
		      Result++;		  
		  }	 
	 }
  return Result;
}
    2e50:	81 2f       	mov	r24, r17
    2e52:	df 91       	pop	r29
    2e54:	cf 91       	pop	r28
    2e56:	1f 91       	pop	r17
    2e58:	0f 91       	pop	r16
    2e5a:	ff 90       	pop	r15
    2e5c:	08 95       	ret

00002e5e <FCloseDay>:
   return Result;
}

char FCloseDay(){

}
    2e5e:	08 95       	ret

00002e60 <FLockPump>:
char FLockPump(){

}
    2e60:	08 95       	ret

00002e62 <FMenuSettingPassword>:
char FMenuSettingPassword(){
     char Result;
   //_menu_password();
   Result=MENU_DONE;
   return Result;
}
    2e62:	81 e0       	ldi	r24, 0x01	; 1
    2e64:	08 95       	ret

00002e66 <menu_product>:
   return Result;
}

void menu_product(){

}
    2e66:	08 95       	ret

00002e68 <IncValue>:
            lcd_print(xPos,yPos,strLabel);
		}
	}
}

void IncValue(char *Value,char MinValue,char MaxValue){
    2e68:	fc 01       	movw	r30, r24
     if ((*Value)<MaxValue){
    2e6a:	80 81       	ld	r24, Z
    2e6c:	84 17       	cp	r24, r20
    2e6e:	18 f4       	brcc	.+6      	; 0x2e76 <IncValue+0xe>
	     (*Value)++;
    2e70:	8f 5f       	subi	r24, 0xFF	; 255
    2e72:	80 83       	st	Z, r24
    2e74:	08 95       	ret
	 }else *Value=MinValue;
    2e76:	60 83       	st	Z, r22
    2e78:	08 95       	ret

00002e7a <DecValue>:
}

void DecValue(char *Value,char MinValue,char MaxValue){
    2e7a:	fc 01       	movw	r30, r24
     if ((*Value)>MinValue){
    2e7c:	80 81       	ld	r24, Z
    2e7e:	68 17       	cp	r22, r24
    2e80:	18 f4       	brcc	.+6      	; 0x2e88 <DecValue+0xe>
	     (*Value)--;
    2e82:	81 50       	subi	r24, 0x01	; 1
    2e84:	80 83       	st	Z, r24
    2e86:	08 95       	ret
	 }else *Value=MaxValue;
    2e88:	40 83       	st	Z, r20
    2e8a:	08 95       	ret

00002e8c <zeroIP>:
		 
		}

	}
}
void zeroIP(unsigned char Val,char *StrResult){
    2e8c:	58 2f       	mov	r21, r24
    2e8e:	fb 01       	movw	r30, r22
     unsigned char R,P,S;
	 if (Val>=100){
    2e90:	84 36       	cpi	r24, 0x64	; 100
    2e92:	00 f1       	brcs	.+64     	; 0x2ed4 <zeroIP+0x48>
	    R=(Val/100);
    2e94:	64 e6       	ldi	r22, 0x64	; 100
    2e96:	0e 94 61 aa 	call	0x154c2	; 0x154c2 <__udivmodqi4>
    2e9a:	48 2f       	mov	r20, r24
        P=((Val%100)/10);
    2e9c:	85 2f       	mov	r24, r21
    2e9e:	0e 94 61 aa 	call	0x154c2	; 0x154c2 <__udivmodqi4>
    2ea2:	89 2f       	mov	r24, r25
    2ea4:	6a e0       	ldi	r22, 0x0A	; 10
    2ea6:	0e 94 61 aa 	call	0x154c2	; 0x154c2 <__udivmodqi4>
		S=Val-((R*100)+(P*10)); 
        StrResult[0]='0'+R;//+(Val/100);
    2eaa:	40 5d       	subi	r20, 0xD0	; 208
    2eac:	40 83       	st	Z, r20
    2eae:	40 53       	subi	r20, 0x30	; 48
	    StrResult[1]='0'+P;//+((Val%100)/10);
    2eb0:	80 5d       	subi	r24, 0xD0	; 208
    2eb2:	81 83       	std	Z+1, r24	; 0x01
    2eb4:	80 53       	subi	r24, 0x30	; 48
		StrResult[2]='0'+S;//+(Val-((Val/100)*100)-((Val%100)/10));
    2eb6:	50 5d       	subi	r21, 0xD0	; 208
    2eb8:	2c e9       	ldi	r18, 0x9C	; 156
    2eba:	3f ef       	ldi	r19, 0xFF	; 255
    2ebc:	42 9f       	mul	r20, r18
    2ebe:	40 2d       	mov	r20, r0
    2ec0:	11 24       	eor	r1, r1
    2ec2:	45 0f       	add	r20, r21
    2ec4:	26 ef       	ldi	r18, 0xF6	; 246
    2ec6:	3f ef       	ldi	r19, 0xFF	; 255
    2ec8:	82 9f       	mul	r24, r18
    2eca:	80 2d       	mov	r24, r0
    2ecc:	11 24       	eor	r1, r1
    2ece:	84 0f       	add	r24, r20
    2ed0:	82 83       	std	Z+2, r24	; 0x02
    2ed2:	10 c0       	rjmp	.+32     	; 0x2ef4 <zeroIP+0x68>
		StrResult[3]=0;
		}else     
	 if ((Val>=10)&&(Val<100)){
    2ed4:	8a 50       	subi	r24, 0x0A	; 10
    2ed6:	8a 35       	cpi	r24, 0x5A	; 90
    2ed8:	78 f4       	brcc	.+30     	; 0x2ef8 <zeroIP+0x6c>
        StrResult[0]='0';
    2eda:	80 e3       	ldi	r24, 0x30	; 48
    2edc:	80 83       	st	Z, r24
	    StrResult[1]=('0'+(Val/10));
    2ede:	85 2f       	mov	r24, r21
    2ee0:	6a e0       	ldi	r22, 0x0A	; 10
    2ee2:	0e 94 61 aa 	call	0x154c2	; 0x154c2 <__udivmodqi4>
    2ee6:	80 5d       	subi	r24, 0xD0	; 208
    2ee8:	81 83       	std	Z+1, r24	; 0x01
		StrResult[2]=('0'+(Val%10));
    2eea:	85 2f       	mov	r24, r21
    2eec:	0e 94 61 aa 	call	0x154c2	; 0x154c2 <__udivmodqi4>
    2ef0:	90 5d       	subi	r25, 0xD0	; 208
    2ef2:	92 83       	std	Z+2, r25	; 0x02
		StrResult[3]=0;
    2ef4:	13 82       	std	Z+3, r1	; 0x03
    2ef6:	08 95       	ret
		}
     else
	 if (Val<10){
    2ef8:	5a 30       	cpi	r21, 0x0A	; 10
    2efa:	30 f4       	brcc	.+12     	; 0x2f08 <zeroIP+0x7c>
	    StrResult[0]='0';
    2efc:	80 e3       	ldi	r24, 0x30	; 48
    2efe:	80 83       	st	Z, r24
		StrResult[1]='0';
    2f00:	81 83       	std	Z+1, r24	; 0x01
	    StrResult[2]='0'+Val;
    2f02:	50 5d       	subi	r21, 0xD0	; 208
    2f04:	52 83       	std	Z+2, r21	; 0x02
	    StrResult[3]=0;
    2f06:	13 82       	std	Z+3, r1	; 0x03
    2f08:	08 95       	ret

00002f0a <GetLocAccStatus>:


char GetLocAccStatus(char paramMessage57){
     char Result;
	 Result=LA_NONE;
     if (paramMessage57==MSG57_INVALID)Result=LA_INVALID;
    2f0a:	81 30       	cpi	r24, 0x01	; 1
    2f0c:	29 f0       	breq	.+10     	; 0x2f18 <GetLocAccStatus+0xe>
	 else
     if (paramMessage57==MSG57_VALID)Result=LA_VALID;
    2f0e:	82 30       	cpi	r24, 0x02	; 2
    2f10:	19 f0       	breq	.+6      	; 0x2f18 <GetLocAccStatus+0xe>
	 else
     if (paramMessage57==MSG57_LIMITED)Result=LA_LIMITED;
    2f12:	83 30       	cpi	r24, 0x03	; 3
    2f14:	09 f0       	breq	.+2      	; 0x2f18 <GetLocAccStatus+0xe>
    2f16:	80 e0       	ldi	r24, 0x00	; 0
	 return Result;
}
    2f18:	08 95       	ret

00002f1a <FTestRemZero>:
	     RemZeroLead(strTest);  
		 uart_print(0,1,strTest);

	while (1){};
  #endif
}
    2f1a:	08 95       	ret

00002f1c <StrPosCopy>:
     nAddedSpace=(Length-srcLength)/2;
     AddSpaceLead(Source,srcLength+nAddedSpace);
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
    2f1c:	cf 93       	push	r28
    2f1e:	df 93       	push	r29
    2f20:	eb 01       	movw	r28, r22
    2f22:	da 01       	movw	r26, r20
    2f24:	a8 0f       	add	r26, r24
    2f26:	b9 1f       	adc	r27, r25
    2f28:	40 e0       	ldi	r20, 0x00	; 0
    2f2a:	50 e0       	ldi	r21, 0x00	; 0
    2f2c:	07 c0       	rjmp	.+14     	; 0x2f3c <StrPosCopy+0x20>
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    2f2e:	fe 01       	movw	r30, r28
    2f30:	e4 0f       	add	r30, r20
    2f32:	f5 1f       	adc	r31, r21
    2f34:	8d 91       	ld	r24, X+
    2f36:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    2f38:	4f 5f       	subi	r20, 0xFF	; 255
    2f3a:	5f 4f       	sbci	r21, 0xFF	; 255
    2f3c:	42 17       	cp	r20, r18
    2f3e:	53 07       	cpc	r21, r19
    2f40:	b0 f3       	brcs	.-20     	; 0x2f2e <StrPosCopy+0x12>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    2f42:	c2 0f       	add	r28, r18
    2f44:	d3 1f       	adc	r29, r19
    2f46:	18 82       	st	Y, r1
}
    2f48:	df 91       	pop	r29
    2f4a:	cf 91       	pop	r28
    2f4c:	08 95       	ret

00002f4e <StrPosPaste>:
void StrPosPaste(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
    2f4e:	0f 93       	push	r16
    2f50:	1f 93       	push	r17
    2f52:	cf 93       	push	r28
    2f54:	df 93       	push	r29
    2f56:	8c 01       	movw	r16, r24
    2f58:	db 01       	movw	r26, r22
    2f5a:	eb 01       	movw	r28, r22
    2f5c:	c4 0f       	add	r28, r20
    2f5e:	d5 1f       	adc	r29, r21
    2f60:	60 e0       	ldi	r22, 0x00	; 0
    2f62:	70 e0       	ldi	r23, 0x00	; 0
    2f64:	07 c0       	rjmp	.+14     	; 0x2f74 <StrPosPaste+0x26>
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[IdxSource+i]=Source[i];
    2f66:	f8 01       	movw	r30, r16
    2f68:	e6 0f       	add	r30, r22
    2f6a:	f7 1f       	adc	r31, r23
    2f6c:	80 81       	ld	r24, Z
    2f6e:	89 93       	st	Y+, r24
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
}
void StrPosPaste(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    2f70:	6f 5f       	subi	r22, 0xFF	; 255
    2f72:	7f 4f       	sbci	r23, 0xFF	; 255
    2f74:	62 17       	cp	r22, r18
    2f76:	73 07       	cpc	r23, r19
    2f78:	b0 f3       	brcs	.-20     	; 0x2f66 <StrPosPaste+0x18>
	    Dest[IdxSource+i]=Source[i];
	 }Dest[IdxSource+Length]=0;
    2f7a:	a4 0f       	add	r26, r20
    2f7c:	b5 1f       	adc	r27, r21
    2f7e:	a2 0f       	add	r26, r18
    2f80:	b3 1f       	adc	r27, r19
    2f82:	1c 92       	st	X, r1
}
    2f84:	df 91       	pop	r29
    2f86:	cf 91       	pop	r28
    2f88:	1f 91       	pop	r17
    2f8a:	0f 91       	pop	r16
    2f8c:	08 95       	ret

00002f8e <CharPosCopy>:
char CharPosCopy(char *Source, unsigned int IdxSource){
    2f8e:	fb 01       	movw	r30, r22
    2f90:	e8 0f       	add	r30, r24
    2f92:	f9 1f       	adc	r31, r25
     char Result;
     Result=Source[IdxSource];
	 return Result;
}
    2f94:	80 81       	ld	r24, Z
    2f96:	08 95       	ret

00002f98 <procMessage00>:
*/
char procMessage00(){
     char Result,strSend[10];
	 Result=MSG00_NACK;
	 //Message57
	 if((rcv_trans[0]==0x01)&&(transLength==MSG00_LENGTH)){
    2f98:	80 91 1d 09 	lds	r24, 0x091D
    2f9c:	81 30       	cpi	r24, 0x01	; 1
    2f9e:	51 f4       	brne	.+20     	; 0x2fb4 <procMessage00+0x1c>
    2fa0:	80 91 8b 01 	lds	r24, 0x018B
    2fa4:	90 91 8c 01 	lds	r25, 0x018C
    2fa8:	8f 97       	sbiw	r24, 0x2f	; 47
    2faa:	21 f4       	brne	.+8      	; 0x2fb4 <procMessage00+0x1c>
	     //Reply
		 Result=(CharPosCopy(rcv_trans,37)-'0');
    2fac:	80 91 42 09 	lds	r24, 0x0942
    2fb0:	80 53       	subi	r24, 0x30	; 48
    2fb2:	08 95       	ret
    2fb4:	80 e0       	ldi	r24, 0x00	; 0
		 //sprintf(strSend,"R=%d",Result);
		 //uart_print(0,1,strSend);
		 //*/
		 }
     return Result;
}
    2fb6:	08 95       	ret

00002fb8 <procMessage09>:
	    Dest[IdxSource+i]=Source[i];
	 }Dest[IdxSource+Length]=0;
}
char CharPosCopy(char *Source, unsigned int IdxSource){
     char Result;
     Result=Source[IdxSource];
    2fb8:	90 91 44 09 	lds	r25, 0x0944
    2fbc:	20 e0       	ldi	r18, 0x00	; 0
    2fbe:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    2fc0:	f9 01       	movw	r30, r18
    2fc2:	ee 56       	subi	r30, 0x6E	; 110
    2fc4:	f7 4f       	sbci	r31, 0xF7	; 247
    2fc6:	d9 01       	movw	r26, r18
    2fc8:	a3 5e       	subi	r26, 0xE3	; 227
    2fca:	b6 4f       	sbci	r27, 0xF6	; 246
    2fcc:	97 96       	adiw	r26, 0x27	; 39
    2fce:	8c 91       	ld	r24, X
    2fd0:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    2fd2:	2f 5f       	subi	r18, 0xFF	; 255
    2fd4:	3f 4f       	sbci	r19, 0xFF	; 255
    2fd6:	24 31       	cpi	r18, 0x14	; 20
    2fd8:	31 05       	cpc	r19, r1
    2fda:	91 f7       	brne	.-28     	; 0x2fc0 <procMessage09+0x8>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    2fdc:	10 92 a6 08 	sts	0x08A6, r1
    2fe0:	20 e0       	ldi	r18, 0x00	; 0
    2fe2:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    2fe4:	f9 01       	movw	r30, r18
    2fe6:	ed 55       	subi	r30, 0x5D	; 93
    2fe8:	f8 4f       	sbci	r31, 0xF8	; 248
    2fea:	d9 01       	movw	r26, r18
    2fec:	a3 5e       	subi	r26, 0xE3	; 227
    2fee:	b6 4f       	sbci	r27, 0xF6	; 246
    2ff0:	db 96       	adiw	r26, 0x3b	; 59
    2ff2:	8c 91       	ld	r24, X
    2ff4:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    2ff6:	2f 5f       	subi	r18, 0xFF	; 255
    2ff8:	3f 4f       	sbci	r19, 0xFF	; 255
    2ffa:	24 31       	cpi	r18, 0x14	; 20
    2ffc:	31 05       	cpc	r19, r1
    2ffe:	91 f7       	brne	.-28     	; 0x2fe4 <procMessage09+0x2c>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    3000:	10 92 b7 07 	sts	0x07B7, r1
    3004:	20 e0       	ldi	r18, 0x00	; 0
    3006:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    3008:	f9 01       	movw	r30, r18
    300a:	e4 5e       	subi	r30, 0xE4	; 228
    300c:	f7 4f       	sbci	r31, 0xF7	; 247
    300e:	d9 01       	movw	r26, r18
    3010:	a4 59       	subi	r26, 0x94	; 148
    3012:	b6 4f       	sbci	r27, 0xF6	; 246
    3014:	8c 91       	ld	r24, X
    3016:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    3018:	2f 5f       	subi	r18, 0xFF	; 255
    301a:	3f 4f       	sbci	r19, 0xFF	; 255
    301c:	24 31       	cpi	r18, 0x14	; 20
    301e:	31 05       	cpc	r19, r1
    3020:	99 f7       	brne	.-26     	; 0x3008 <procMessage09+0x50>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    3022:	10 92 30 08 	sts	0x0830, r1
    3026:	20 e0       	ldi	r18, 0x00	; 0
    3028:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    302a:	f9 01       	movw	r30, r18
    302c:	ea 52       	subi	r30, 0x2A	; 42
    302e:	f4 4f       	sbci	r31, 0xF4	; 244
    3030:	d9 01       	movw	r26, r18
    3032:	a0 58       	subi	r26, 0x80	; 128
    3034:	b6 4f       	sbci	r27, 0xF6	; 246
    3036:	8c 91       	ld	r24, X
    3038:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    303a:	2f 5f       	subi	r18, 0xFF	; 255
    303c:	3f 4f       	sbci	r19, 0xFF	; 255
    303e:	24 31       	cpi	r18, 0x14	; 20
    3040:	31 05       	cpc	r19, r1
    3042:	99 f7       	brne	.-26     	; 0x302a <procMessage09+0x72>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    3044:	10 92 ea 0b 	sts	0x0BEA, r1
       StrPosCopy(rcv_trans,strFreeMessageLine1,39,20);
       StrPosCopy(rcv_trans,strFreeMessageLine2,59,20);
       StrPosCopy(rcv_trans,strFreeMessageLine3,79,20);
       StrPosCopy(rcv_trans,strFreeMessageLine4,99,20);
	 return Result;
}
    3048:	89 2f       	mov	r24, r25
    304a:	80 53       	subi	r24, 0x30	; 48
    304c:	08 95       	ret

0000304e <procMessage23>:
		 eeprom_write_block((const void*)&strBankName, (void*)&DefBankName[i], 11);
	 }
	 return Result;
}

char procMessage23(){
    304e:	20 e0       	ldi	r18, 0x00	; 0
    3050:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    3052:	f9 01       	movw	r30, r18
    3054:	e7 57       	subi	r30, 0x77	; 119
    3056:	f4 4f       	sbci	r31, 0xF4	; 244
    3058:	d9 01       	movw	r26, r18
    305a:	a3 5e       	subi	r26, 0xE3	; 227
    305c:	b6 4f       	sbci	r27, 0xF6	; 246
    305e:	95 96       	adiw	r26, 0x25	; 37
    3060:	8c 91       	ld	r24, X
    3062:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    3064:	2f 5f       	subi	r18, 0xFF	; 255
    3066:	3f 4f       	sbci	r19, 0xFF	; 255
    3068:	24 31       	cpi	r18, 0x14	; 20
    306a:	31 05       	cpc	r19, r1
    306c:	91 f7       	brne	.-28     	; 0x3052 <procMessage23+0x4>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    306e:	10 92 9d 0b 	sts	0x0B9D, r1
    3072:	20 e0       	ldi	r18, 0x00	; 0
    3074:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    3076:	f9 01       	movw	r30, r18
    3078:	ec 5d       	subi	r30, 0xDC	; 220
    307a:	fc 4f       	sbci	r31, 0xFC	; 252
    307c:	d9 01       	movw	r26, r18
    307e:	a3 5e       	subi	r26, 0xE3	; 227
    3080:	b6 4f       	sbci	r27, 0xF6	; 246
    3082:	d9 96       	adiw	r26, 0x39	; 57
    3084:	8c 91       	ld	r24, X
    3086:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    3088:	2f 5f       	subi	r18, 0xFF	; 255
    308a:	3f 4f       	sbci	r19, 0xFF	; 255
    308c:	2e 31       	cpi	r18, 0x1E	; 30
    308e:	31 05       	cpc	r19, r1
    3090:	91 f7       	brne	.-28     	; 0x3076 <procMessage23+0x28>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    3092:	10 92 42 03 	sts	0x0342, r1
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    3096:	80 91 74 09 	lds	r24, 0x0974
    309a:	80 93 8a 03 	sts	0x038A, r24
	 }Dest[Length]=0;
    309e:	10 92 8b 03 	sts	0x038B, r1
    30a2:	20 e0       	ldi	r18, 0x00	; 0
    30a4:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    30a6:	f9 01       	movw	r30, r18
    30a8:	eb 5c       	subi	r30, 0xCB	; 203
    30aa:	f7 4f       	sbci	r31, 0xF7	; 247
    30ac:	d9 01       	movw	r26, r18
    30ae:	ab 58       	subi	r26, 0x8B	; 139
    30b0:	b6 4f       	sbci	r27, 0xF6	; 246
    30b2:	8c 91       	ld	r24, X
    30b4:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    30b6:	2f 5f       	subi	r18, 0xFF	; 255
    30b8:	3f 4f       	sbci	r19, 0xFF	; 255
    30ba:	28 30       	cpi	r18, 0x08	; 8
    30bc:	31 05       	cpc	r19, r1
    30be:	99 f7       	brne	.-26     	; 0x30a6 <procMessage23+0x58>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    30c0:	10 92 3d 08 	sts	0x083D, r1
    30c4:	20 e0       	ldi	r18, 0x00	; 0
    30c6:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    30c8:	f9 01       	movw	r30, r18
    30ca:	e2 58       	subi	r30, 0x82	; 130
    30cc:	fc 4f       	sbci	r31, 0xFC	; 252
    30ce:	d9 01       	movw	r26, r18
    30d0:	a3 58       	subi	r26, 0x83	; 131
    30d2:	b6 4f       	sbci	r27, 0xF6	; 246
    30d4:	8c 91       	ld	r24, X
    30d6:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    30d8:	2f 5f       	subi	r18, 0xFF	; 255
    30da:	3f 4f       	sbci	r19, 0xFF	; 255
    30dc:	2a 30       	cpi	r18, 0x0A	; 10
    30de:	31 05       	cpc	r19, r1
    30e0:	99 f7       	brne	.-26     	; 0x30c8 <procMessage23+0x7a>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    30e2:	10 92 88 03 	sts	0x0388, r1
    30e6:	20 e0       	ldi	r18, 0x00	; 0
    30e8:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    30ea:	f9 01       	movw	r30, r18
    30ec:	e3 51       	subi	r30, 0x13	; 19
    30ee:	f4 4f       	sbci	r31, 0xF4	; 244
    30f0:	d9 01       	movw	r26, r18
    30f2:	a9 57       	subi	r26, 0x79	; 121
    30f4:	b6 4f       	sbci	r27, 0xF6	; 246
    30f6:	8c 91       	ld	r24, X
    30f8:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    30fa:	2f 5f       	subi	r18, 0xFF	; 255
    30fc:	3f 4f       	sbci	r19, 0xFF	; 255
    30fe:	2a 30       	cpi	r18, 0x0A	; 10
    3100:	31 05       	cpc	r19, r1
    3102:	99 f7       	brne	.-26     	; 0x30ea <procMessage23+0x9c>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    3104:	10 92 f7 0b 	sts	0x0BF7, r1
    3108:	20 e0       	ldi	r18, 0x00	; 0
    310a:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    310c:	f9 01       	movw	r30, r18
    310e:	e1 54       	subi	r30, 0x41	; 65
    3110:	f4 4f       	sbci	r31, 0xF4	; 244
    3112:	d9 01       	movw	r26, r18
    3114:	af 56       	subi	r26, 0x6F	; 111
    3116:	b6 4f       	sbci	r27, 0xF6	; 246
    3118:	8c 91       	ld	r24, X
    311a:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    311c:	2f 5f       	subi	r18, 0xFF	; 255
    311e:	3f 4f       	sbci	r19, 0xFF	; 255
    3120:	23 31       	cpi	r18, 0x13	; 19
    3122:	31 05       	cpc	r19, r1
    3124:	99 f7       	brne	.-26     	; 0x310c <procMessage23+0xbe>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    3126:	10 92 d2 0b 	sts	0x0BD2, r1
    312a:	20 e0       	ldi	r18, 0x00	; 0
    312c:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    312e:	f9 01       	movw	r30, r18
    3130:	ed 54       	subi	r30, 0x4D	; 77
    3132:	f4 4f       	sbci	r31, 0xF4	; 244
    3134:	d9 01       	movw	r26, r18
    3136:	ac 55       	subi	r26, 0x5C	; 92
    3138:	b6 4f       	sbci	r27, 0xF6	; 246
    313a:	8c 91       	ld	r24, X
    313c:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    313e:	2f 5f       	subi	r18, 0xFF	; 255
    3140:	3f 4f       	sbci	r19, 0xFF	; 255
    3142:	27 30       	cpi	r18, 0x07	; 7
    3144:	31 05       	cpc	r19, r1
    3146:	99 f7       	brne	.-26     	; 0x312e <procMessage23+0xe0>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    3148:	10 92 ba 0b 	sts	0x0BBA, r1
    314c:	20 e0       	ldi	r18, 0x00	; 0
    314e:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    3150:	f9 01       	movw	r30, r18
    3152:	e5 54       	subi	r30, 0x45	; 69
    3154:	fd 4f       	sbci	r31, 0xFD	; 253
    3156:	d9 01       	movw	r26, r18
    3158:	a5 55       	subi	r26, 0x55	; 85
    315a:	b6 4f       	sbci	r27, 0xF6	; 246
    315c:	8c 91       	ld	r24, X
    315e:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    3160:	2f 5f       	subi	r18, 0xFF	; 255
    3162:	3f 4f       	sbci	r19, 0xFF	; 255
    3164:	24 30       	cpi	r18, 0x04	; 4
    3166:	31 05       	cpc	r19, r1
    3168:	99 f7       	brne	.-26     	; 0x3150 <procMessage23+0x102>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    316a:	10 92 bf 02 	sts	0x02BF, r1
     StrPosCopy(rcv_trans,strLoyCurrMonConsumeV,106,10);
     StrPosCopy(rcv_trans,strDateTime,116,19);
     StrPosCopy(rcv_trans,strAmount,135,7);
     StrPosCopy(rcv_trans,strGainPoints,142,4);
     return Result;
}
    316e:	80 e0       	ldi	r24, 0x00	; 0
    3170:	08 95       	ret

00003172 <procMessage81>:
uart_print(0,1,strCardID);
*/	
     return Result;
}

char procMessage81(){// Result: HFCS0000
    3172:	cf 93       	push	r28
    3174:	df 93       	push	r29
     char Result=0,PrintCopy=0;//
	 char lcdteks[20];
	 //PrintHeader
     if ((CharPosCopy(rcv_trans,37))=='Y') Result=(Result|(1<<7));
    3176:	80 91 42 09 	lds	r24, 0x0942
    317a:	89 35       	cpi	r24, 0x59	; 89
    317c:	11 f4       	brne	.+4      	; 0x3182 <procMessage81+0x10>
    317e:	90 e8       	ldi	r25, 0x80	; 128
    3180:	01 c0       	rjmp	.+2      	; 0x3184 <procMessage81+0x12>
    3182:	90 e0       	ldi	r25, 0x00	; 0
     //PrintFooter
	 if ((CharPosCopy(rcv_trans,38))=='Y') Result=(Result|(1<<6));
    3184:	80 91 43 09 	lds	r24, 0x0943
    3188:	89 35       	cpi	r24, 0x59	; 89
    318a:	09 f4       	brne	.+2      	; 0x318e <procMessage81+0x1c>
    318c:	90 64       	ori	r25, 0x40	; 64
	 //PaperCut
     if ((CharPosCopy(rcv_trans,39))=='Y') Result=(Result|(1<<5));
    318e:	80 91 44 09 	lds	r24, 0x0944
    3192:	89 35       	cpi	r24, 0x59	; 89
    3194:	09 f4       	brne	.+2      	; 0x3198 <procMessage81+0x26>
    3196:	90 62       	ori	r25, 0x20	; 32
	 //Scrool
	 Result=(Result|(1<<4));
    3198:	90 61       	ori	r25, 0x10	; 16

	 //Copies
	 PrintCopy=(CharPosCopy(rcv_trans,40)-'0');
    319a:	80 91 45 09 	lds	r24, 0x0945
    319e:	80 53       	subi	r24, 0x30	; 48
     if (PrintCopy<=16) Result=Result|PrintCopy;
    31a0:	81 31       	cpi	r24, 0x11	; 17
    31a2:	08 f4       	brcc	.+2      	; 0x31a6 <procMessage81+0x34>
    31a4:	98 2b       	or	r25, r24
	 //Spooling
     StrPosCopy(rcv_trans,PrintBuffer,44,LengthMessage81);
    31a6:	c0 91 8d 01 	lds	r28, 0x018D
    31aa:	d0 91 8e 01 	lds	r29, 0x018E
    31ae:	20 e0       	ldi	r18, 0x00	; 0
    31b0:	30 e0       	ldi	r19, 0x00	; 0
    31b2:	0b c0       	rjmp	.+22     	; 0x31ca <procMessage81+0x58>
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    31b4:	f9 01       	movw	r30, r18
    31b6:	e4 51       	subi	r30, 0x14	; 20
    31b8:	fc 4f       	sbci	r31, 0xFC	; 252
    31ba:	d9 01       	movw	r26, r18
    31bc:	a3 5e       	subi	r26, 0xE3	; 227
    31be:	b6 4f       	sbci	r27, 0xF6	; 246
    31c0:	9c 96       	adiw	r26, 0x2c	; 44
    31c2:	8c 91       	ld	r24, X
    31c4:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    31c6:	2f 5f       	subi	r18, 0xFF	; 255
    31c8:	3f 4f       	sbci	r19, 0xFF	; 255
    31ca:	2c 17       	cp	r18, r28
    31cc:	3d 07       	cpc	r19, r29
    31ce:	90 f3       	brcs	.-28     	; 0x31b4 <procMessage81+0x42>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    31d0:	c4 51       	subi	r28, 0x14	; 20
    31d2:	dc 4f       	sbci	r29, 0xFC	; 252
    31d4:	18 82       	st	Y, r1
	 //sprintf(lcdteks,"cmdPrint:%d ",Result);
     //uart_print(0,1,lcdteks);

	 //while(1){};
	 return Result;
}
    31d6:	89 2f       	mov	r24, r25
    31d8:	df 91       	pop	r29
    31da:	cf 91       	pop	r28
    31dc:	08 95       	ret

000031de <FillChar>:
	 if(CutType== 1) { uart(_COM_PRINTER, 1, 0x6D);}
	 if(CutType== 2) {uart(_COM_PRINTER, 1, 0x69);}

}

void FillChar(char *strMemory, unsigned int Length,char data){
    31de:	20 e0       	ldi	r18, 0x00	; 0
    31e0:	30 e0       	ldi	r19, 0x00	; 0
    31e2:	06 c0       	rjmp	.+12     	; 0x31f0 <FillChar+0x12>
     unsigned int i;
	 for (i=0;i<Length;i++){
	     strMemory[i]=data;
    31e4:	fc 01       	movw	r30, r24
    31e6:	e2 0f       	add	r30, r18
    31e8:	f3 1f       	adc	r31, r19
    31ea:	40 83       	st	Z, r20

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    31ec:	2f 5f       	subi	r18, 0xFF	; 255
    31ee:	3f 4f       	sbci	r19, 0xFF	; 255
    31f0:	26 17       	cp	r18, r22
    31f2:	37 07       	cpc	r19, r23
    31f4:	b8 f3       	brcs	.-18     	; 0x31e4 <FillChar+0x6>
	     strMemory[i]=data;
	 }
}
    31f6:	08 95       	ret

000031f8 <ProcMessage91>:

void ProcMessage91(){
    31f8:	20 e0       	ldi	r18, 0x00	; 0
    31fa:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    31fc:	f9 01       	movw	r30, r18
    31fe:	e8 57       	subi	r30, 0x78	; 120
    3200:	f3 4f       	sbci	r31, 0xF3	; 243
    3202:	d9 01       	movw	r26, r18
    3204:	a3 5e       	subi	r26, 0xE3	; 227
    3206:	b6 4f       	sbci	r27, 0xF6	; 246
    3208:	95 96       	adiw	r26, 0x25	; 37
    320a:	8c 91       	ld	r24, X
    320c:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    320e:	2f 5f       	subi	r18, 0xFF	; 255
    3210:	3f 4f       	sbci	r19, 0xFF	; 255
    3212:	26 30       	cpi	r18, 0x06	; 6
    3214:	31 05       	cpc	r19, r1
    3216:	91 f7       	brne	.-28     	; 0x31fc <ProcMessage91+0x4>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    3218:	10 92 8e 0c 	sts	0x0C8E, r1
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    321c:	80 91 48 09 	lds	r24, 0x0948
    3220:	80 93 b9 07 	sts	0x07B9, r24
    3224:	80 91 49 09 	lds	r24, 0x0949
    3228:	80 93 ba 07 	sts	0x07BA, r24
	 }Dest[Length]=0;
    322c:	10 92 bb 07 	sts	0x07BB, r1
    3230:	20 e0       	ldi	r18, 0x00	; 0
    3232:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    3234:	f9 01       	movw	r30, r18
    3236:	e4 5f       	subi	r30, 0xF4	; 244
    3238:	f7 4f       	sbci	r31, 0xF7	; 247
    323a:	d9 01       	movw	r26, r18
    323c:	a3 5e       	subi	r26, 0xE3	; 227
    323e:	b6 4f       	sbci	r27, 0xF6	; 246
    3240:	9d 96       	adiw	r26, 0x2d	; 45
    3242:	8c 91       	ld	r24, X
    3244:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    3246:	2f 5f       	subi	r18, 0xFF	; 255
    3248:	3f 4f       	sbci	r19, 0xFF	; 255
    324a:	2f 30       	cpi	r18, 0x0F	; 15
    324c:	31 05       	cpc	r19, r1
    324e:	91 f7       	brne	.-28     	; 0x3234 <ProcMessage91+0x3c>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    3250:	10 92 1b 08 	sts	0x081B, r1
    3254:	20 e0       	ldi	r18, 0x00	; 0
    3256:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    3258:	f9 01       	movw	r30, r18
    325a:	e2 56       	subi	r30, 0x62	; 98
    325c:	fa 4f       	sbci	r31, 0xFA	; 250
    325e:	d9 01       	movw	r26, r18
    3260:	a3 5e       	subi	r26, 0xE3	; 227
    3262:	b6 4f       	sbci	r27, 0xF6	; 246
    3264:	dc 96       	adiw	r26, 0x3c	; 60
    3266:	8c 91       	ld	r24, X
    3268:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    326a:	2f 5f       	subi	r18, 0xFF	; 255
    326c:	3f 4f       	sbci	r19, 0xFF	; 255
    326e:	26 30       	cpi	r18, 0x06	; 6
    3270:	31 05       	cpc	r19, r1
    3272:	91 f7       	brne	.-28     	; 0x3258 <ProcMessage91+0x60>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    3274:	10 92 a4 05 	sts	0x05A4, r1
    3278:	20 e0       	ldi	r18, 0x00	; 0
    327a:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    327c:	f9 01       	movw	r30, r18
    327e:	eb 58       	subi	r30, 0x8B	; 139
    3280:	fc 4f       	sbci	r31, 0xFC	; 252
    3282:	d9 01       	movw	r26, r18
    3284:	a1 5a       	subi	r26, 0xA1	; 161
    3286:	b6 4f       	sbci	r27, 0xF6	; 246
    3288:	8c 91       	ld	r24, X
    328a:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    328c:	2f 5f       	subi	r18, 0xFF	; 255
    328e:	3f 4f       	sbci	r19, 0xFF	; 255
    3290:	28 30       	cpi	r18, 0x08	; 8
    3292:	31 05       	cpc	r19, r1
    3294:	99 f7       	brne	.-26     	; 0x327c <ProcMessage91+0x84>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    3296:	10 92 7d 03 	sts	0x037D, r1
    329a:	20 e0       	ldi	r18, 0x00	; 0
    329c:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    329e:	f9 01       	movw	r30, r18
    32a0:	ed 54       	subi	r30, 0x4D	; 77
    32a2:	f4 4f       	sbci	r31, 0xF4	; 244
    32a4:	d9 01       	movw	r26, r18
    32a6:	a9 59       	subi	r26, 0x99	; 153
    32a8:	b6 4f       	sbci	r27, 0xF6	; 246
    32aa:	8c 91       	ld	r24, X
    32ac:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    32ae:	2f 5f       	subi	r18, 0xFF	; 255
    32b0:	3f 4f       	sbci	r19, 0xFF	; 255
    32b2:	28 30       	cpi	r18, 0x08	; 8
    32b4:	31 05       	cpc	r19, r1
    32b6:	99 f7       	brne	.-26     	; 0x329e <ProcMessage91+0xa6>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    32b8:	10 92 bb 0b 	sts	0x0BBB, r1
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    32bc:	80 91 6f 09 	lds	r24, 0x096F
    32c0:	80 93 8a 03 	sts	0x038A, r24
	 }Dest[Length]=0;
    32c4:	10 92 8b 03 	sts	0x038B, r1
    32c8:	20 e0       	ldi	r18, 0x00	; 0
    32ca:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    32cc:	f9 01       	movw	r30, r18
    32ce:	e4 50       	subi	r30, 0x04	; 4
    32d0:	fd 4f       	sbci	r31, 0xFD	; 253
    32d2:	d9 01       	movw	r26, r18
    32d4:	a0 59       	subi	r26, 0x90	; 144
    32d6:	b6 4f       	sbci	r27, 0xF6	; 246
    32d8:	8c 91       	ld	r24, X
    32da:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    32dc:	2f 5f       	subi	r18, 0xFF	; 255
    32de:	3f 4f       	sbci	r19, 0xFF	; 255
    32e0:	29 30       	cpi	r18, 0x09	; 9
    32e2:	31 05       	cpc	r19, r1
    32e4:	99 f7       	brne	.-26     	; 0x32cc <ProcMessage91+0xd4>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    32e6:	10 92 05 03 	sts	0x0305, r1
     StrPosCopy(rcv_trans,strPrice,60,6);
     StrPosCopy(rcv_trans,strVolume,66,8);
     StrPosCopy(rcv_trans,strAmount,74,8); 
	 StrPosCopy(rcv_trans,strStatus,82,1);
     StrPosCopy(rcv_trans,strSurcharge,83,9);    
}
    32ea:	08 95       	ret

000032ec <IdentifyMessage>:



}

void IdentifyMessage(char STX,unsigned int Length){
    32ec:	1f 93       	push	r17
   if (STX==0x01){
    32ee:	81 30       	cpi	r24, 0x01	; 1
    32f0:	09 f0       	breq	.+2      	; 0x32f4 <IdentifyMessage+0x8>
    32f2:	5f c0       	rjmp	.+190    	; 0x33b2 <IdentifyMessage+0xc6>
	    if ((Length==MSG00_LENGTH)||(MsgCode==0)) IsMessage00=True;//47
    32f4:	6f 32       	cpi	r22, 0x2F	; 47
    32f6:	71 05       	cpc	r23, r1
    32f8:	21 f0       	breq	.+8      	; 0x3302 <IdentifyMessage+0x16>
    32fa:	80 91 24 01 	lds	r24, 0x0124
    32fe:	88 23       	and	r24, r24
    3300:	21 f4       	brne	.+8      	; 0x330a <IdentifyMessage+0x1e>
    3302:	81 e0       	ldi	r24, 0x01	; 1
    3304:	80 93 9e 01 	sts	0x019E, r24
    3308:	4a c0       	rjmp	.+148    	; 0x339e <IdentifyMessage+0xb2>
		else
	    if ((Length==MSG09_LENGTH)||(MsgCode==9)) IsMessage09=True;//615
    330a:	6c 36       	cpi	r22, 0x6C	; 108
    330c:	71 05       	cpc	r23, r1
    330e:	11 f0       	breq	.+4      	; 0x3314 <IdentifyMessage+0x28>
    3310:	89 30       	cpi	r24, 0x09	; 9
    3312:	21 f4       	brne	.+8      	; 0x331c <IdentifyMessage+0x30>
    3314:	81 e0       	ldi	r24, 0x01	; 1
    3316:	80 93 a3 01 	sts	0x01A3, r24
    331a:	41 c0       	rjmp	.+130    	; 0x339e <IdentifyMessage+0xb2>
		else
	    if ((Length==MSG11_LENGTH)||(MsgCode==11)) IsMessage11=True;//615
    331c:	92 e0       	ldi	r25, 0x02	; 2
    331e:	67 36       	cpi	r22, 0x67	; 103
    3320:	79 07       	cpc	r23, r25
    3322:	11 f0       	breq	.+4      	; 0x3328 <IdentifyMessage+0x3c>
    3324:	8b 30       	cpi	r24, 0x0B	; 11
    3326:	21 f4       	brne	.+8      	; 0x3330 <IdentifyMessage+0x44>
    3328:	81 e0       	ldi	r24, 0x01	; 1
    332a:	80 93 a0 01 	sts	0x01A0, r24
    332e:	37 c0       	rjmp	.+110    	; 0x339e <IdentifyMessage+0xb2>
		else
	    if ((Length==MSG23_LENGTH)||(MsgCode==23)) IsMessage23=True;//145
    3330:	61 39       	cpi	r22, 0x91	; 145
    3332:	71 05       	cpc	r23, r1
    3334:	11 f0       	breq	.+4      	; 0x333a <IdentifyMessage+0x4e>
    3336:	87 31       	cpi	r24, 0x17	; 23
    3338:	21 f4       	brne	.+8      	; 0x3342 <IdentifyMessage+0x56>
    333a:	81 e0       	ldi	r24, 0x01	; 1
    333c:	80 93 a2 01 	sts	0x01A2, r24
    3340:	2e c0       	rjmp	.+92     	; 0x339e <IdentifyMessage+0xb2>
		else
	    if ((Length==MSG57_LENGTH)||(MsgCode==57)) IsMessage57=True;//230
    3342:	66 3e       	cpi	r22, 0xE6	; 230
    3344:	71 05       	cpc	r23, r1
    3346:	11 f0       	breq	.+4      	; 0x334c <IdentifyMessage+0x60>
    3348:	89 33       	cpi	r24, 0x39	; 57
    334a:	21 f4       	brne	.+8      	; 0x3354 <IdentifyMessage+0x68>
    334c:	81 e0       	ldi	r24, 0x01	; 1
    334e:	80 93 a5 01 	sts	0x01A5, r24
    3352:	25 c0       	rjmp	.+74     	; 0x339e <IdentifyMessage+0xb2>
		else
	    if ((Length==MSG99_LENGTH)||(MsgCode==99)) IsMessage99=True;//378
    3354:	91 e0       	ldi	r25, 0x01	; 1
    3356:	68 39       	cpi	r22, 0x98	; 152
    3358:	79 07       	cpc	r23, r25
    335a:	11 f0       	breq	.+4      	; 0x3360 <IdentifyMessage+0x74>
    335c:	83 36       	cpi	r24, 0x63	; 99
    335e:	21 f4       	brne	.+8      	; 0x3368 <IdentifyMessage+0x7c>
    3360:	81 e0       	ldi	r24, 0x01	; 1
    3362:	80 93 9f 01 	sts	0x019F, r24
    3366:	1b c0       	rjmp	.+54     	; 0x339e <IdentifyMessage+0xb2>
		else
	    if ((Length==MSG81_LENGTH)||(MsgCode==81)) IsMessage81=True;//426
    3368:	91 e0       	ldi	r25, 0x01	; 1
    336a:	66 3b       	cpi	r22, 0xB6	; 182
    336c:	79 07       	cpc	r23, r25
    336e:	11 f0       	breq	.+4      	; 0x3374 <IdentifyMessage+0x88>
    3370:	81 35       	cpi	r24, 0x51	; 81
    3372:	21 f4       	brne	.+8      	; 0x337c <IdentifyMessage+0x90>
    3374:	81 e0       	ldi	r24, 0x01	; 1
    3376:	80 93 a6 01 	sts	0x01A6, r24
    337a:	11 c0       	rjmp	.+34     	; 0x339e <IdentifyMessage+0xb2>
		else
	    if ((Length==MSG91_LENGTH)||(MsgCode==91)) IsMessage91=True;//426
    337c:	6c 35       	cpi	r22, 0x5C	; 92
    337e:	71 05       	cpc	r23, r1
    3380:	11 f0       	breq	.+4      	; 0x3386 <IdentifyMessage+0x9a>
    3382:	8b 35       	cpi	r24, 0x5B	; 91
    3384:	21 f4       	brne	.+8      	; 0x338e <IdentifyMessage+0xa2>
    3386:	81 e0       	ldi	r24, 0x01	; 1
    3388:	80 93 a7 01 	sts	0x01A7, r24
    338c:	08 c0       	rjmp	.+16     	; 0x339e <IdentifyMessage+0xb2>
		else
	    if ((Length==MSG21_LENGTH)||(MsgCode==21)) IsMessage21=True;//426
    338e:	66 35       	cpi	r22, 0x56	; 86
    3390:	71 05       	cpc	r23, r1
    3392:	11 f0       	breq	.+4      	; 0x3398 <IdentifyMessage+0xac>
    3394:	85 31       	cpi	r24, 0x15	; 21
    3396:	19 f4       	brne	.+6      	; 0x339e <IdentifyMessage+0xb2>
    3398:	81 e0       	ldi	r24, 0x01	; 1
    339a:	80 93 a1 01 	sts	0x01A1, r24
        //EDC AdvanZ Respond
		if (IsMessage91==True){
    339e:	10 91 a7 01 	lds	r17, 0x01A7
    33a2:	11 30       	cpi	r17, 0x01	; 1
    33a4:	31 f4       	brne	.+12     	; 0x33b2 <IdentifyMessage+0xc6>
		    IsMessage91=False;
    33a6:	10 92 a7 01 	sts	0x01A7, r1
		    ProcMessage91();
    33aa:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <ProcMessage91>
			IsSendMessageEDC=True;
    33ae:	10 93 97 01 	sts	0x0197, r17
		  }

//	  sprintf(SerialSend,"Length:%i",Length);	 
//	  uart_print(1,0,SerialSend);
	 }
}
    33b2:	1f 91       	pop	r17
    33b4:	08 95       	ret

000033b6 <Tab>:

	  }
     return Result;     
}

void Tab(char *sTab, char nTab){
    33b6:	fc 01       	movw	r30, r24
    33b8:	dc 01       	movw	r26, r24
    33ba:	80 e0       	ldi	r24, 0x00	; 0
     char i;
	 for(i=0;i<nTab;i++){
	     sTab[i]=' ';
    33bc:	90 e2       	ldi	r25, 0x20	; 32
    33be:	02 c0       	rjmp	.+4      	; 0x33c4 <Tab+0xe>
    33c0:	9d 93       	st	X+, r25
     return Result;     
}

void Tab(char *sTab, char nTab){
     char i;
	 for(i=0;i<nTab;i++){
    33c2:	8f 5f       	subi	r24, 0xFF	; 255
    33c4:	86 17       	cp	r24, r22
    33c6:	e0 f3       	brcs	.-8      	; 0x33c0 <Tab+0xa>
	     sTab[i]=' ';
	 }sTab[nTab]=0;
    33c8:	e6 0f       	add	r30, r22
    33ca:	f1 1d       	adc	r31, r1
    33cc:	10 82       	st	Z, r1
}
    33ce:	08 95       	ret

000033d0 <StrToRaw>:
			  }
		  }
	 }
}
                                       //12byte->6Byte         0 1 2 3  
void StrToRaw(char *Source,char *Dest){//Source: "1234567890AB"
    33d0:	dc 01       	movw	r26, r24
    33d2:	20 e0       	ldi	r18, 0x00	; 0
    33d4:	30 e0       	ldi	r19, 0x00	; 0
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
    33d6:	9c 91       	ld	r25, X
    33d8:	90 53       	subi	r25, 0x30	; 48
    33da:	9a 30       	cpi	r25, 0x0A	; 10
    33dc:	08 f0       	brcs	.+2      	; 0x33e0 <StrToRaw+0x10>
    33de:	90 e0       	ldi	r25, 0x00	; 0
	 char xRaw=0;
	 for (i=0;i<6;i++){
	      xA=Ord(Source[(2*i)]);
		  xB=(0x0F&Ord(Source[(2*i)+1]));
	      xRaw=((xA<<4) | xB);
	      Dest[i]=xRaw;
    33e0:	11 96       	adiw	r26, 0x01	; 1
    33e2:	8c 91       	ld	r24, X
    33e4:	11 97       	sbiw	r26, 0x01	; 1
    33e6:	80 53       	subi	r24, 0x30	; 48
    33e8:	8a 30       	cpi	r24, 0x0A	; 10
    33ea:	08 f0       	brcs	.+2      	; 0x33ee <StrToRaw+0x1e>
    33ec:	80 e0       	ldi	r24, 0x00	; 0
    33ee:	fb 01       	movw	r30, r22
    33f0:	e2 0f       	add	r30, r18
    33f2:	f3 1f       	adc	r31, r19
    33f4:	8f 70       	andi	r24, 0x0F	; 15
    33f6:	92 95       	swap	r25
    33f8:	90 7f       	andi	r25, 0xF0	; 240
    33fa:	98 2b       	or	r25, r24
    33fc:	90 83       	st	Z, r25
    33fe:	2f 5f       	subi	r18, 0xFF	; 255
    3400:	3f 4f       	sbci	r19, 0xFF	; 255
    3402:	12 96       	adiw	r26, 0x02	; 2
}
                                       //12byte->6Byte         0 1 2 3  
void StrToRaw(char *Source,char *Dest){//Source: "1234567890AB"
     char i,xA,xB;                //Dest  :  12345678 
	 char xRaw=0;
	 for (i=0;i<6;i++){
    3404:	26 30       	cpi	r18, 0x06	; 6
    3406:	31 05       	cpc	r19, r1
    3408:	31 f7       	brne	.-52     	; 0x33d6 <StrToRaw+0x6>
	      xA=Ord(Source[(2*i)]);
		  xB=(0x0F&Ord(Source[(2*i)+1]));
	      xRaw=((xA<<4) | xB);
	      Dest[i]=xRaw;
	 }	      
}
    340a:	08 95       	ret

0000340c <RawToStr>:
void RawToStr(char *Source,char *Dest){//Source:   1234567890AB
    340c:	cf 93       	push	r28
    340e:	df 93       	push	r29
    3410:	eb 01       	movw	r28, r22
    3412:	db 01       	movw	r26, r22
    3414:	20 e0       	ldi	r18, 0x00	; 0
    3416:	30 e0       	ldi	r19, 0x00	; 0
     unsigned char i,xRaw,cA,cB;               //Dest  :  "12345678" 
	 for (i=0;i<6;i++){
	      cA=Chr(Source[i]>>4);
    3418:	fc 01       	movw	r30, r24
    341a:	e2 0f       	add	r30, r18
    341c:	f3 1f       	adc	r31, r19
    341e:	e0 81       	ld	r30, Z
    3420:	4e 2f       	mov	r20, r30
    3422:	42 95       	swap	r20
    3424:	4f 70       	andi	r20, 0x0F	; 15
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
    3426:	4a 30       	cpi	r20, 0x0A	; 10
    3428:	10 f0       	brcs	.+4      	; 0x342e <RawToStr+0x22>
    342a:	40 e3       	ldi	r20, 0x30	; 48
    342c:	01 c0       	rjmp	.+2      	; 0x3430 <RawToStr+0x24>
	    Result='0'+X;
    342e:	40 5d       	subi	r20, 0xD0	; 208
}
void RawToStr(char *Source,char *Dest){//Source:   1234567890AB
     unsigned char i,xRaw,cA,cB;               //Dest  :  "12345678" 
	 for (i=0;i<6;i++){
	      cA=Chr(Source[i]>>4);
	      cB=Chr(Source[i]&0x0F);
    3430:	ef 70       	andi	r30, 0x0F	; 15
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
    3432:	ea 30       	cpi	r30, 0x0A	; 10
    3434:	10 f0       	brcs	.+4      	; 0x343a <RawToStr+0x2e>
    3436:	e0 e3       	ldi	r30, 0x30	; 48
    3438:	01 c0       	rjmp	.+2      	; 0x343c <RawToStr+0x30>
	    Result='0'+X;
    343a:	e0 5d       	subi	r30, 0xD0	; 208
void RawToStr(char *Source,char *Dest){//Source:   1234567890AB
     unsigned char i,xRaw,cA,cB;               //Dest  :  "12345678" 
	 for (i=0;i<6;i++){
	      cA=Chr(Source[i]>>4);
	      cB=Chr(Source[i]&0x0F);
          Dest[2*i]=cA;
    343c:	4c 93       	st	X, r20
          Dest[(2*i)+1]=cB;
    343e:	11 96       	adiw	r26, 0x01	; 1
    3440:	ec 93       	st	X, r30
    3442:	11 97       	sbiw	r26, 0x01	; 1
    3444:	2f 5f       	subi	r18, 0xFF	; 255
    3446:	3f 4f       	sbci	r19, 0xFF	; 255
    3448:	12 96       	adiw	r26, 0x02	; 2
	      Dest[i]=xRaw;
	 }	      
}
void RawToStr(char *Source,char *Dest){//Source:   1234567890AB
     unsigned char i,xRaw,cA,cB;               //Dest  :  "12345678" 
	 for (i=0;i<6;i++){
    344a:	26 30       	cpi	r18, 0x06	; 6
    344c:	31 05       	cpc	r19, r1
    344e:	21 f7       	brne	.-56     	; 0x3418 <RawToStr+0xc>
	      cA=Chr(Source[i]>>4);
	      cB=Chr(Source[i]&0x0F);
          Dest[2*i]=cA;
          Dest[(2*i)+1]=cB;
	 }Dest[12]=0;
    3450:	1c 86       	std	Y+12, r1	; 0x0c
}
    3452:	df 91       	pop	r29
    3454:	cf 91       	pop	r28
    3456:	08 95       	ret

00003458 <CalcMinus>:
}

char CalcMinus(char A, char B){
     signed char xC;//,xA,xB;
	 char Result;
	 if (A>=B) xC=((A-'0')-(B-'0'));
    3458:	86 17       	cp	r24, r22
    345a:	08 f4       	brcc	.+2      	; 0x345e <CalcMinus+0x6>
	 else xC=10+((A-'0')-(B-'0'));//
    345c:	86 5f       	subi	r24, 0xF6	; 246
    345e:	86 1b       	sub	r24, r22
	 Result='0'+xC;
  return Result;
}
    3460:	80 5d       	subi	r24, 0xD0	; 208
    3462:	08 95       	ret

00003464 <CalcPlus>:

char CalcPlus(char A, char B){
    3464:	80 56       	subi	r24, 0x60	; 96
    3466:	86 0f       	add	r24, r22
    3468:	6a e0       	ldi	r22, 0x0A	; 10
    346a:	0e 94 6d aa 	call	0x154da	; 0x154da <__divmodqi4>
     signed char xA,xB,xC;
	 char Result;
	 xC=((A-'0')+(B-'0'));
     Result='0'+(xC%10);  
   return Result;
}
    346e:	89 2f       	mov	r24, r25
    3470:	80 5d       	subi	r24, 0xD0	; 208
    3472:	08 95       	ret

00003474 <Chr>:
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
    3474:	8a 30       	cpi	r24, 0x0A	; 10
    3476:	10 f0       	brcs	.+4      	; 0x347c <Chr+0x8>
    3478:	80 e3       	ldi	r24, 0x30	; 48
    347a:	08 95       	ret
	    Result='0'+X;
    347c:	80 5d       	subi	r24, 0xD0	; 208
	 }
	return Result;
}
    347e:	08 95       	ret

00003480 <Ord>:
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
    3480:	80 53       	subi	r24, 0x30	; 48
    3482:	8a 30       	cpi	r24, 0x0A	; 10
    3484:	08 f0       	brcs	.+2      	; 0x3488 <Ord+0x8>
    3486:	80 e0       	ldi	r24, 0x00	; 0
	    Result=c-'0';
	 }
	return Result;
}
    3488:	08 95       	ret

0000348a <FTestCalculation>:
		  else
		  if (KeyChar=='*')stTestCalc=tcInitData;
	      break;	 
	 }
*/
}
    348a:	08 95       	ret

0000348c <GetTabSpace>:
	     StrCalc(TPLUS,prevSeg,currSeg,prevSeg);
	 }
	 sprintf_P(strC,PSTR("%s"),prevSeg);
}

void GetTabSpace(signed char TabLength, char *strTab){
    348c:	48 2f       	mov	r20, r24
    348e:	fb 01       	movw	r30, r22
     char i,nTab;
	 if (TabLength>0){
    3490:	18 16       	cp	r1, r24
    3492:	64 f4       	brge	.+24     	; 0x34ac <GetTabSpace+0x20>
		 nTab=TabLength;//%40;
    3494:	56 2f       	mov	r21, r22
    3496:	db 01       	movw	r26, r22
		 for(i=0;i<nTab;i++){
		     strTab[i]=' ';
    3498:	90 e2       	ldi	r25, 0x20	; 32
    349a:	9d 93       	st	X+, r25

void GetTabSpace(signed char TabLength, char *strTab){
     char i,nTab;
	 if (TabLength>0){
		 nTab=TabLength;//%40;
		 for(i=0;i<nTab;i++){
    349c:	8a 2f       	mov	r24, r26
    349e:	85 1b       	sub	r24, r21
    34a0:	84 17       	cp	r24, r20
    34a2:	d8 f3       	brcs	.-10     	; 0x349a <GetTabSpace+0xe>
		     strTab[i]=' ';
		 }strTab[nTab]=0;
    34a4:	e4 0f       	add	r30, r20
    34a6:	f1 1d       	adc	r31, r1
    34a8:	10 82       	st	Z, r1
    34aa:	08 95       	ret
     }else{
	 strTab[0]=' ';
    34ac:	80 e2       	ldi	r24, 0x20	; 32
    34ae:	80 83       	st	Z, r24
	 strTab[1]=0;
    34b0:	11 82       	std	Z+1, r1	; 0x01
    34b2:	08 95       	ret

000034b4 <GetBorderValue>:

}

char GetBorderValue(char BoderType){
     char Result=0;
	 switch (BoderType){
    34b4:	86 30       	cpi	r24, 0x06	; 6
    34b6:	51 f1       	breq	.+84     	; 0x350c <GetBorderValue+0x58>
    34b8:	87 30       	cpi	r24, 0x07	; 7
    34ba:	70 f4       	brcc	.+28     	; 0x34d8 <GetBorderValue+0x24>
    34bc:	83 30       	cpi	r24, 0x03	; 3
    34be:	11 f1       	breq	.+68     	; 0x3504 <GetBorderValue+0x50>
    34c0:	84 30       	cpi	r24, 0x04	; 4
    34c2:	28 f4       	brcc	.+10     	; 0x34ce <GetBorderValue+0x1a>
    34c4:	81 30       	cpi	r24, 0x01	; 1
    34c6:	c1 f0       	breq	.+48     	; 0x34f8 <GetBorderValue+0x44>
    34c8:	82 30       	cpi	r24, 0x02	; 2
    34ca:	c1 f4       	brne	.+48     	; 0x34fc <GetBorderValue+0x48>
    34cc:	19 c0       	rjmp	.+50     	; 0x3500 <GetBorderValue+0x4c>
    34ce:	84 30       	cpi	r24, 0x04	; 4
    34d0:	d9 f0       	breq	.+54     	; 0x3508 <GetBorderValue+0x54>
    34d2:	85 30       	cpi	r24, 0x05	; 5
    34d4:	99 f4       	brne	.+38     	; 0x34fc <GetBorderValue+0x48>
    34d6:	22 c0       	rjmp	.+68     	; 0x351c <GetBorderValue+0x68>
    34d8:	89 30       	cpi	r24, 0x09	; 9
    34da:	f1 f0       	breq	.+60     	; 0x3518 <GetBorderValue+0x64>
    34dc:	8a 30       	cpi	r24, 0x0A	; 10
    34de:	28 f4       	brcc	.+10     	; 0x34ea <GetBorderValue+0x36>
    34e0:	87 30       	cpi	r24, 0x07	; 7
    34e2:	b1 f0       	breq	.+44     	; 0x3510 <GetBorderValue+0x5c>
    34e4:	88 30       	cpi	r24, 0x08	; 8
    34e6:	51 f4       	brne	.+20     	; 0x34fc <GetBorderValue+0x48>
    34e8:	15 c0       	rjmp	.+42     	; 0x3514 <GetBorderValue+0x60>
    34ea:	8b 30       	cpi	r24, 0x0B	; 11
    34ec:	d9 f0       	breq	.+54     	; 0x3524 <GetBorderValue+0x70>
    34ee:	8b 30       	cpi	r24, 0x0B	; 11
    34f0:	b8 f0       	brcs	.+46     	; 0x3520 <GetBorderValue+0x6c>
    34f2:	8c 30       	cpi	r24, 0x0C	; 12
    34f4:	19 f4       	brne	.+6      	; 0x34fc <GetBorderValue+0x48>
    34f6:	18 c0       	rjmp	.+48     	; 0x3528 <GetBorderValue+0x74>
    34f8:	8a ed       	ldi	r24, 0xDA	; 218
    34fa:	08 95       	ret
    34fc:	80 e0       	ldi	r24, 0x00	; 0
    34fe:	08 95       	ret
    3500:	82 ec       	ldi	r24, 0xC2	; 194
    3502:	08 95       	ret
		case btTopLeft: 
		     Result=0xDA;
			 break;
		case btTopCenter: 
		     Result=0xC2;
			 break;
    3504:	8f eb       	ldi	r24, 0xBF	; 191
    3506:	08 95       	ret
		case btTopRight:
		     Result=0xBF;		 
			 break;
    3508:	83 ec       	ldi	r24, 0xC3	; 195
    350a:	08 95       	ret
		case btMiddleLeft: 
			 Result=0xC3;
			 break;
    350c:	84 eb       	ldi	r24, 0xB4	; 180
    350e:	08 95       	ret
		case btMiddleRight: 
			 Result=0xB4;
			 break;
    3510:	80 ec       	ldi	r24, 0xC0	; 192
    3512:	08 95       	ret
		case btBottomLeft: 
		     Result=0xC0;
			 break;
    3514:	81 ec       	ldi	r24, 0xC1	; 193
    3516:	08 95       	ret
		case btBottomCenter: 
			 Result=0xC1;
			 break;
    3518:	89 ed       	ldi	r24, 0xD9	; 217
    351a:	08 95       	ret
		case btBottomRight: 
			 Result=0xD9;
			 break;
    351c:	85 ec       	ldi	r24, 0xC5	; 197
    351e:	08 95       	ret
        case btMiddleCenter:
		     Result=0xC5;
		     break;
    3520:	83 eb       	ldi	r24, 0xB3	; 179
    3522:	08 95       	ret
		case btVertical: 
			 Result=0xB3;
			 break;
    3524:	84 ec       	ldi	r24, 0xC4	; 196
    3526:	08 95       	ret
		case btHorizontal:
			 Result=0xC4;
			 break;	 
    3528:	8d e0       	ldi	r24, 0x0D	; 13
        case btNewLine:
		     Result=0x0D;
			 break;	 
	 }
   return Result;
}
    352a:	08 95       	ret

0000352c <InserBorder>:

void InserBorder(char BorderType, char *strPrnBuffer,char nLength,unsigned int *Pos){
    352c:	bf 92       	push	r11
    352e:	cf 92       	push	r12
    3530:	df 92       	push	r13
    3532:	ef 92       	push	r14
    3534:	ff 92       	push	r15
    3536:	0f 93       	push	r16
    3538:	1f 93       	push	r17
    353a:	cf 93       	push	r28
    353c:	df 93       	push	r29
    353e:	b8 2e       	mov	r11, r24
    3540:	8b 01       	movw	r16, r22
    3542:	e4 2e       	mov	r14, r20
    3544:	69 01       	movw	r12, r18
     char i;//,BorderValue=0;
	 unsigned int StartPos,iPos=0;
	 
	 iPos=*Pos;
    3546:	f9 01       	movw	r30, r18
    3548:	c0 81       	ld	r28, Z
    354a:	d1 81       	ldd	r29, Z+1	; 0x01
    354c:	0c 0f       	add	r16, r28
    354e:	1d 1f       	adc	r17, r29
    3550:	ff 24       	eor	r15, r15
    3552:	07 c0       	rjmp	.+14     	; 0x3562 <InserBorder+0x36>
	 StartPos=iPos;
	 for (i=0;i<nLength;i++){
	      strPrnBuffer[iPos]=GetBorderValue(BorderType);
    3554:	8b 2d       	mov	r24, r11
    3556:	0e 94 5a 1a 	call	0x34b4	; 0x34b4 <GetBorderValue>
    355a:	f8 01       	movw	r30, r16
    355c:	81 93       	st	Z+, r24
    355e:	8f 01       	movw	r16, r30
     char i;//,BorderValue=0;
	 unsigned int StartPos,iPos=0;
	 
	 iPos=*Pos;
	 StartPos=iPos;
	 for (i=0;i<nLength;i++){
    3560:	f3 94       	inc	r15
    3562:	fe 14       	cp	r15, r14
    3564:	b8 f3       	brcs	.-18     	; 0x3554 <InserBorder+0x28>
	 //for (i=0;i<nLength;i++){
	 //     if (strPrnBuffer[i+StartPos]!=GetBorderValue(BorderType)){
//		      strPrnBuffer[i+StartPos]=GetBorderValue(BorderType);
//		  }
//	 }
     *Pos=iPos;
    3566:	ce 0d       	add	r28, r14
    3568:	d1 1d       	adc	r29, r1
    356a:	f6 01       	movw	r30, r12
    356c:	d1 83       	std	Z+1, r29	; 0x01
    356e:	c0 83       	st	Z, r28
}
    3570:	df 91       	pop	r29
    3572:	cf 91       	pop	r28
    3574:	1f 91       	pop	r17
    3576:	0f 91       	pop	r16
    3578:	ff 90       	pop	r15
    357a:	ef 90       	pop	r14
    357c:	df 90       	pop	r13
    357e:	cf 90       	pop	r12
    3580:	bf 90       	pop	r11
    3582:	08 95       	ret

00003584 <TestUserInput>:
	   //lcd_printf(1,1,PSTR("InputNumber:"));
       //lcd_printf(2,1,PSTR("_         "));
	}
  return Result;
  */
}
    3584:	08 95       	ret

00003586 <GeniusSendPumpStatus>:
   return Result;
}

void GeniusSendPumpStatus(char iPumpID){
     
}
    3586:	08 95       	ret

00003588 <GeniusSendStopPump>:
void GeniusSendStopPump(char iPumpID){
}
    3588:	08 95       	ret

0000358a <GeniusSendResumePump>:
void GeniusSendResumePump(char iPumpID){
}
    358a:	08 95       	ret

0000358c <GeniusSendPumpPreset>:
void GeniusSendPumpPreset(char iPumpID){
}
    358c:	08 95       	ret

0000358e <SetIncomingTransStatus>:
	 sprintf_P(strSend,PSTR("%d"),cSum);
	 uart_print(1,1,strSend);	 
}


void SetIncomingTransStatus(char iPumpID,char xTransStatus){
    358e:	e8 2f       	mov	r30, r24
char iStatus,xMaskA,xMaskB,xMaskC,xPumpID;
	 xPumpID=(iPumpID&0x0F);
    3590:	28 2f       	mov	r18, r24
    3592:	2f 70       	andi	r18, 0x0F	; 15
     iStatus=IncomingTransaction[xPumpID/8];
    3594:	82 2f       	mov	r24, r18
    3596:	86 95       	lsr	r24
    3598:	86 95       	lsr	r24
    359a:	86 95       	lsr	r24
    359c:	a8 2f       	mov	r26, r24
    359e:	b0 e0       	ldi	r27, 0x00	; 0
    35a0:	ac 52       	subi	r26, 0x2C	; 44
    35a2:	b4 4f       	sbci	r27, 0xF4	; 244
    35a4:	4c 91       	ld	r20, X
	 if (xTransStatus==TS_NEW){
    35a6:	62 30       	cpi	r22, 0x02	; 2
    35a8:	59 f4       	brne	.+22     	; 0x35c0 <SetIncomingTransStatus+0x32>
	     iStatus=(iStatus|(1<<(xPumpID%8)));	 
    35aa:	27 70       	andi	r18, 0x07	; 7
    35ac:	81 e0       	ldi	r24, 0x01	; 1
    35ae:	90 e0       	ldi	r25, 0x00	; 0
    35b0:	02 c0       	rjmp	.+4      	; 0x35b6 <SetIncomingTransStatus+0x28>
    35b2:	88 0f       	add	r24, r24
    35b4:	99 1f       	adc	r25, r25
    35b6:	2a 95       	dec	r18
    35b8:	e2 f7       	brpl	.-8      	; 0x35b2 <SetIncomingTransStatus+0x24>
    35ba:	48 2b       	or	r20, r24
		 IncomingTransaction[xPumpID/8]=iStatus;
    35bc:	4c 93       	st	X, r20
    35be:	08 95       	ret
	 }else if (xTransStatus==TS_OLD){
    35c0:	63 30       	cpi	r22, 0x03	; 3
    35c2:	b1 f4       	brne	.+44     	; 0x35f0 <SetIncomingTransStatus+0x62>
		 xMaskA=(0xFE<<(xPumpID%8));
    35c4:	27 70       	andi	r18, 0x07	; 7
    35c6:	8e ef       	ldi	r24, 0xFE	; 254
    35c8:	90 e0       	ldi	r25, 0x00	; 0
    35ca:	01 c0       	rjmp	.+2      	; 0x35ce <SetIncomingTransStatus+0x40>
    35cc:	88 0f       	add	r24, r24
    35ce:	2a 95       	dec	r18
    35d0:	ea f7       	brpl	.-6      	; 0x35cc <SetIncomingTransStatus+0x3e>
		 xMaskB=(~xMaskA)>>1;
		 xMaskC=xMaskA|xMaskB;
		 iStatus=iStatus&xMaskC;
		 IncomingTransaction[iPumpID/8]=iStatus;
    35d2:	e6 95       	lsr	r30
    35d4:	e6 95       	lsr	r30
    35d6:	e6 95       	lsr	r30
    35d8:	f0 e0       	ldi	r31, 0x00	; 0
    35da:	ec 52       	subi	r30, 0x2C	; 44
    35dc:	f4 4f       	sbci	r31, 0xF4	; 244
    35de:	28 2f       	mov	r18, r24
    35e0:	30 e0       	ldi	r19, 0x00	; 0
    35e2:	20 95       	com	r18
    35e4:	30 95       	com	r19
    35e6:	35 95       	asr	r19
    35e8:	27 95       	ror	r18
    35ea:	82 2b       	or	r24, r18
    35ec:	84 23       	and	r24, r20
    35ee:	80 83       	st	Z, r24
    35f0:	08 95       	ret

000035f2 <GetIncomingTransStatus>:
	 }
}
char GetIncomingTransStatus(char iPumpID){
     char xPumpID,Result;
	 xPumpID=(iPumpID&0x0F);
    35f2:	8f 70       	andi	r24, 0x0F	; 15
	 Result=TS_NONE;
     if((IncomingTransaction[xPumpID/8]>>(xPumpID%8))==1){
    35f4:	e8 2f       	mov	r30, r24
    35f6:	e6 95       	lsr	r30
    35f8:	e6 95       	lsr	r30
    35fa:	e6 95       	lsr	r30
    35fc:	f0 e0       	ldi	r31, 0x00	; 0
    35fe:	ec 52       	subi	r30, 0x2C	; 44
    3600:	f4 4f       	sbci	r31, 0xF4	; 244
    3602:	90 81       	ld	r25, Z
    3604:	29 2f       	mov	r18, r25
    3606:	30 e0       	ldi	r19, 0x00	; 0
    3608:	87 70       	andi	r24, 0x07	; 7
    360a:	02 c0       	rjmp	.+4      	; 0x3610 <GetIncomingTransStatus+0x1e>
    360c:	35 95       	asr	r19
    360e:	27 95       	ror	r18
    3610:	8a 95       	dec	r24
    3612:	e2 f7       	brpl	.-8      	; 0x360c <GetIncomingTransStatus+0x1a>
    3614:	21 30       	cpi	r18, 0x01	; 1
    3616:	31 05       	cpc	r19, r1
    3618:	11 f4       	brne	.+4      	; 0x361e <GetIncomingTransStatus+0x2c>
    361a:	82 e0       	ldi	r24, 0x02	; 2
    361c:	08 95       	ret
	     Result=TS_NEW;
	 }else
     if((IncomingTransaction[xPumpID/8]>>(xPumpID%8))==0){
    361e:	23 2b       	or	r18, r19
    3620:	11 f4       	brne	.+4      	; 0x3626 <GetIncomingTransStatus+0x34>
    3622:	83 e0       	ldi	r24, 0x03	; 3
    3624:	08 95       	ret
    3626:	80 e0       	ldi	r24, 0x00	; 0
	     Result=TS_OLD;
	 }
   return Result;
}
    3628:	08 95       	ret

0000362a <ComposeDatetime>:
	}
	 //NormalizeDecimal(eeprom_read_byte(&DefDecimalTotalMoney),2,Result);
}


void ComposeDatetime(char *Result){// 2010/10/01 16:27:44
    362a:	df 93       	push	r29
    362c:	cf 93       	push	r28
    362e:	cd b7       	in	r28, 0x3d	; 61
    3630:	de b7       	in	r29, 0x3e	; 62
    3632:	62 97       	sbiw	r28, 0x12	; 18
    3634:	0f b6       	in	r0, 0x3f	; 63
    3636:	f8 94       	cli
    3638:	de bf       	out	0x3e, r29	; 62
    363a:	0f be       	out	0x3f, r0	; 63
    363c:	cd bf       	out	0x3d, r28	; 61
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    363e:	20 91 ba 03 	lds	r18, 0x03BA
    3642:	2f 83       	std	Y+7, r18	; 0x07
    3644:	20 91 bb 03 	lds	r18, 0x03BB
    3648:	28 87       	std	Y+8, r18	; 0x08
	 }Dest[Length]=0;
    364a:	19 86       	std	Y+9, r1	; 0x09
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    364c:	20 91 bd 03 	lds	r18, 0x03BD
    3650:	2c 83       	std	Y+4, r18	; 0x04
    3652:	20 91 be 03 	lds	r18, 0x03BE
    3656:	2d 83       	std	Y+5, r18	; 0x05
	 }Dest[Length]=0;
    3658:	1e 82       	std	Y+6, r1	; 0x06
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    365a:	20 91 c0 03 	lds	r18, 0x03C0
    365e:	29 83       	std	Y+1, r18	; 0x01
    3660:	20 91 c1 03 	lds	r18, 0x03C1
    3664:	2a 83       	std	Y+2, r18	; 0x02
	 }Dest[Length]=0;
    3666:	1b 82       	std	Y+3, r1	; 0x03
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    3668:	20 91 74 08 	lds	r18, 0x0874
    366c:	2a 87       	std	Y+10, r18	; 0x0a
    366e:	20 91 75 08 	lds	r18, 0x0875
    3672:	2b 87       	std	Y+11, r18	; 0x0b
	 }Dest[Length]=0;
    3674:	1c 86       	std	Y+12, r1	; 0x0c
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    3676:	20 91 77 08 	lds	r18, 0x0877
    367a:	2d 87       	std	Y+13, r18	; 0x0d
    367c:	20 91 78 08 	lds	r18, 0x0878
    3680:	2e 87       	std	Y+14, r18	; 0x0e
	 }Dest[Length]=0;
    3682:	1f 86       	std	Y+15, r1	; 0x0f
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    3684:	20 91 7a 08 	lds	r18, 0x087A
    3688:	28 8b       	std	Y+16, r18	; 0x10
    368a:	20 91 7b 08 	lds	r18, 0x087B
    368e:	29 8b       	std	Y+17, r18	; 0x11
	 }Dest[Length]=0;
    3690:	1a 8a       	std	Y+18, r1	; 0x12
     StrPosCopy(strSystemDate,sYear,6,2);

     StrPosCopy(strSystemTime,sHour,0,2);
     StrPosCopy(strSystemTime,sMinute,3,2);
     StrPosCopy(strSystemTime,sSecond,6,2);
	 sprintf_P(Result,PSTR("20%s/%s/%s %s:%s:%s"),sYear,sMonth,sDay,sHour,sMinute,sSecond);
    3692:	2d b7       	in	r18, 0x3d	; 61
    3694:	3e b7       	in	r19, 0x3e	; 62
    3696:	20 51       	subi	r18, 0x10	; 16
    3698:	30 40       	sbci	r19, 0x00	; 0
    369a:	0f b6       	in	r0, 0x3f	; 63
    369c:	f8 94       	cli
    369e:	3e bf       	out	0x3e, r19	; 62
    36a0:	0f be       	out	0x3f, r0	; 63
    36a2:	2d bf       	out	0x3d, r18	; 61
    36a4:	ed b7       	in	r30, 0x3d	; 61
    36a6:	fe b7       	in	r31, 0x3e	; 62
    36a8:	31 96       	adiw	r30, 0x01	; 1
    36aa:	ad b7       	in	r26, 0x3d	; 61
    36ac:	be b7       	in	r27, 0x3e	; 62
    36ae:	12 96       	adiw	r26, 0x02	; 2
    36b0:	9c 93       	st	X, r25
    36b2:	8e 93       	st	-X, r24
    36b4:	11 97       	sbiw	r26, 0x01	; 1
    36b6:	85 e3       	ldi	r24, 0x35	; 53
    36b8:	95 e0       	ldi	r25, 0x05	; 5
    36ba:	93 83       	std	Z+3, r25	; 0x03
    36bc:	82 83       	std	Z+2, r24	; 0x02
    36be:	ce 01       	movw	r24, r28
    36c0:	01 96       	adiw	r24, 0x01	; 1
    36c2:	95 83       	std	Z+5, r25	; 0x05
    36c4:	84 83       	std	Z+4, r24	; 0x04
    36c6:	ce 01       	movw	r24, r28
    36c8:	04 96       	adiw	r24, 0x04	; 4
    36ca:	97 83       	std	Z+7, r25	; 0x07
    36cc:	86 83       	std	Z+6, r24	; 0x06
    36ce:	ce 01       	movw	r24, r28
    36d0:	07 96       	adiw	r24, 0x07	; 7
    36d2:	91 87       	std	Z+9, r25	; 0x09
    36d4:	80 87       	std	Z+8, r24	; 0x08
    36d6:	ce 01       	movw	r24, r28
    36d8:	0a 96       	adiw	r24, 0x0a	; 10
    36da:	93 87       	std	Z+11, r25	; 0x0b
    36dc:	82 87       	std	Z+10, r24	; 0x0a
    36de:	ce 01       	movw	r24, r28
    36e0:	0d 96       	adiw	r24, 0x0d	; 13
    36e2:	95 87       	std	Z+13, r25	; 0x0d
    36e4:	84 87       	std	Z+12, r24	; 0x0c
    36e6:	ce 01       	movw	r24, r28
    36e8:	40 96       	adiw	r24, 0x10	; 16
    36ea:	97 87       	std	Z+15, r25	; 0x0f
    36ec:	86 87       	std	Z+14, r24	; 0x0e
    36ee:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
    36f2:	2d b7       	in	r18, 0x3d	; 61
    36f4:	3e b7       	in	r19, 0x3e	; 62
    36f6:	20 5f       	subi	r18, 0xF0	; 240
    36f8:	3f 4f       	sbci	r19, 0xFF	; 255
    36fa:	0f b6       	in	r0, 0x3f	; 63
    36fc:	f8 94       	cli
    36fe:	3e bf       	out	0x3e, r19	; 62
    3700:	0f be       	out	0x3f, r0	; 63
    3702:	2d bf       	out	0x3d, r18	; 61
}
    3704:	62 96       	adiw	r28, 0x12	; 18
    3706:	0f b6       	in	r0, 0x3f	; 63
    3708:	f8 94       	cli
    370a:	de bf       	out	0x3e, r29	; 62
    370c:	0f be       	out	0x3f, r0	; 63
    370e:	cd bf       	out	0x3d, r28	; 61
    3710:	cf 91       	pop	r28
    3712:	df 91       	pop	r29
    3714:	08 95       	ret

00003716 <leadingZero>:
	     }String[Size]=0;
	 }
}

void leadingZero(char Val,char *StrResult){
     sprintf_P(StrResult,PSTR("%.2d"),Val);
    3716:	00 d0       	rcall	.+0      	; 0x3718 <leadingZero+0x2>
    3718:	00 d0       	rcall	.+0      	; 0x371a <leadingZero+0x4>
    371a:	00 d0       	rcall	.+0      	; 0x371c <leadingZero+0x6>
    371c:	ed b7       	in	r30, 0x3d	; 61
    371e:	fe b7       	in	r31, 0x3e	; 62
    3720:	31 96       	adiw	r30, 0x01	; 1
    3722:	ad b7       	in	r26, 0x3d	; 61
    3724:	be b7       	in	r27, 0x3e	; 62
    3726:	12 96       	adiw	r26, 0x02	; 2
    3728:	7c 93       	st	X, r23
    372a:	6e 93       	st	-X, r22
    372c:	11 97       	sbiw	r26, 0x01	; 1
    372e:	29 ee       	ldi	r18, 0xE9	; 233
    3730:	3e e0       	ldi	r19, 0x0E	; 14
    3732:	33 83       	std	Z+3, r19	; 0x03
    3734:	22 83       	std	Z+2, r18	; 0x02
    3736:	84 83       	std	Z+4, r24	; 0x04
    3738:	15 82       	std	Z+5, r1	; 0x05
    373a:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
    373e:	8d b7       	in	r24, 0x3d	; 61
    3740:	9e b7       	in	r25, 0x3e	; 62
    3742:	06 96       	adiw	r24, 0x06	; 6
    3744:	0f b6       	in	r0, 0x3f	; 63
    3746:	f8 94       	cli
    3748:	9e bf       	out	0x3e, r25	; 62
    374a:	0f be       	out	0x3f, r0	; 63
    374c:	8d bf       	out	0x3d, r24	; 61

}
    374e:	08 95       	ret

00003750 <procMessage21>:
       StrPosCopy(rcv_trans,strFreeMessageLine3,79,20);
       StrPosCopy(rcv_trans,strFreeMessageLine4,99,20);
	 return Result;
}

char procMessage21(){
    3750:	af 92       	push	r10
    3752:	bf 92       	push	r11
    3754:	cf 92       	push	r12
    3756:	df 92       	push	r13
    3758:	ef 92       	push	r14
    375a:	ff 92       	push	r15
    375c:	0f 93       	push	r16
    375e:	1f 93       	push	r17
    3760:	df 93       	push	r29
    3762:	cf 93       	push	r28
    3764:	cd b7       	in	r28, 0x3d	; 61
    3766:	de b7       	in	r29, 0x3e	; 62
    3768:	2b 97       	sbiw	r28, 0x0b	; 11
    376a:	0f b6       	in	r0, 0x3f	; 63
    376c:	f8 94       	cli
    376e:	de bf       	out	0x3e, r29	; 62
    3770:	0f be       	out	0x3f, r0	; 63
    3772:	cd bf       	out	0x3d, r28	; 61
    3774:	0a e0       	ldi	r16, 0x0A	; 10
    3776:	11 e0       	ldi	r17, 0x01	; 1
    3778:	32 e4       	ldi	r19, 0x42	; 66
    377a:	e3 2e       	mov	r14, r19
    377c:	39 e0       	ldi	r19, 0x09	; 9
    377e:	f3 2e       	mov	r15, r19
    3780:	6e 01       	movw	r12, r28
    3782:	08 94       	sec
    3784:	c1 1c       	adc	r12, r1
    3786:	d1 1c       	adc	r13, r1
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    3788:	2b e0       	ldi	r18, 0x0B	; 11
    378a:	a2 2e       	mov	r10, r18
    378c:	b1 2c       	mov	r11, r1
    378e:	ac 0e       	add	r10, r28
    3790:	bd 1e       	adc	r11, r29
       StrPosCopy(rcv_trans,strFreeMessageLine3,79,20);
       StrPosCopy(rcv_trans,strFreeMessageLine4,99,20);
	 return Result;
}

char procMessage21(){
    3792:	f6 01       	movw	r30, r12
    3794:	d7 01       	movw	r26, r14
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    3796:	8d 91       	ld	r24, X+
    3798:	81 93       	st	Z+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    379a:	ea 15       	cp	r30, r10
    379c:	fb 05       	cpc	r31, r11
    379e:	d9 f7       	brne	.-10     	; 0x3796 <procMessage21+0x46>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    37a0:	1b 86       	std	Y+11, r1	; 0x0b
     char i,Result,strBankName[11];
	 Result=0;
	 for(i=0;i<4;i++){
         StrPosCopy(rcv_trans,strBankName,(37+(i*10)),10);
		 //Result=((Result<<1)|SaveToEEPROM(strBankName,DefBankName[i],11)); 
		 eeprom_write_block((const void*)&strBankName, (void*)&DefBankName[i], 11);
    37a2:	c6 01       	movw	r24, r12
    37a4:	b8 01       	movw	r22, r16
    37a6:	4b e0       	ldi	r20, 0x0B	; 11
    37a8:	50 e0       	ldi	r21, 0x00	; 0
    37aa:	0e 94 48 ad 	call	0x15a90	; 0x15a90 <__eewr_block_m128>
    37ae:	05 5f       	subi	r16, 0xF5	; 245
    37b0:	1f 4f       	sbci	r17, 0xFF	; 255
    37b2:	8a e0       	ldi	r24, 0x0A	; 10
    37b4:	90 e0       	ldi	r25, 0x00	; 0
    37b6:	e8 0e       	add	r14, r24
    37b8:	f9 1e       	adc	r15, r25
}

char procMessage21(){
     char i,Result,strBankName[11];
	 Result=0;
	 for(i=0;i<4;i++){
    37ba:	91 e0       	ldi	r25, 0x01	; 1
    37bc:	06 33       	cpi	r16, 0x36	; 54
    37be:	19 07       	cpc	r17, r25
    37c0:	41 f7       	brne	.-48     	; 0x3792 <procMessage21+0x42>
         StrPosCopy(rcv_trans,strBankName,(37+(i*10)),10);
		 //Result=((Result<<1)|SaveToEEPROM(strBankName,DefBankName[i],11)); 
		 eeprom_write_block((const void*)&strBankName, (void*)&DefBankName[i], 11);
	 }
	 return Result;
}
    37c2:	80 e0       	ldi	r24, 0x00	; 0
    37c4:	2b 96       	adiw	r28, 0x0b	; 11
    37c6:	0f b6       	in	r0, 0x3f	; 63
    37c8:	f8 94       	cli
    37ca:	de bf       	out	0x3e, r29	; 62
    37cc:	0f be       	out	0x3f, r0	; 63
    37ce:	cd bf       	out	0x3d, r28	; 61
    37d0:	cf 91       	pop	r28
    37d2:	df 91       	pop	r29
    37d4:	1f 91       	pop	r17
    37d6:	0f 91       	pop	r16
    37d8:	ff 90       	pop	r15
    37da:	ef 90       	pop	r14
    37dc:	df 90       	pop	r13
    37de:	cf 90       	pop	r12
    37e0:	bf 90       	pop	r11
    37e2:	af 90       	pop	r10
    37e4:	08 95       	ret

000037e6 <MasterReset>:
		     eeprom_write_byte(&DefDecimalPrice+i,DecimalSetting[i]);
		 }
	 }
}

void MasterReset(){
    37e6:	af 92       	push	r10
    37e8:	bf 92       	push	r11
    37ea:	df 92       	push	r13
    37ec:	ef 92       	push	r14
    37ee:	ff 92       	push	r15
    37f0:	0f 93       	push	r16
    37f2:	1f 93       	push	r17
    37f4:	df 93       	push	r29
    37f6:	cf 93       	push	r28
    37f8:	cd b7       	in	r28, 0x3d	; 61
    37fa:	de b7       	in	r29, 0x3e	; 62
    37fc:	ec 97       	sbiw	r28, 0x3c	; 60
    37fe:	0f b6       	in	r0, 0x3f	; 63
    3800:	f8 94       	cli
    3802:	de bf       	out	0x3e, r29	; 62
    3804:	0f be       	out	0x3f, r0	; 63
    3806:	cd bf       	out	0x3d, r28	; 61
     char strEEP[50];
	 char xArray[10];
     //Restore All Stored EEPROM data to the Default
     sprintf_P(strEEP,PSTR("  "));
    3808:	00 d0       	rcall	.+0      	; 0x380a <MasterReset+0x24>
    380a:	00 d0       	rcall	.+0      	; 0x380c <MasterReset+0x26>
    380c:	5b e0       	ldi	r21, 0x0B	; 11
    380e:	e5 2e       	mov	r14, r21
    3810:	f1 2c       	mov	r15, r1
    3812:	ec 0e       	add	r14, r28
    3814:	fd 1e       	adc	r15, r29
    3816:	ed b7       	in	r30, 0x3d	; 61
    3818:	fe b7       	in	r31, 0x3e	; 62
    381a:	f2 82       	std	Z+2, r15	; 0x02
    381c:	e1 82       	std	Z+1, r14	; 0x01
    381e:	88 e1       	ldi	r24, 0x18	; 24
    3820:	95 e0       	ldi	r25, 0x05	; 5
    3822:	94 83       	std	Z+4, r25	; 0x04
    3824:	83 83       	std	Z+3, r24	; 0x03
    3826:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefOperatorName, sizeof(DefOperatorName));
    382a:	0f 90       	pop	r0
    382c:	0f 90       	pop	r0
    382e:	0f 90       	pop	r0
    3830:	0f 90       	pop	r0
    3832:	c7 01       	movw	r24, r14
    3834:	65 e1       	ldi	r22, 0x15	; 21
    3836:	70 e0       	ldi	r23, 0x00	; 0
    3838:	43 e1       	ldi	r20, 0x13	; 19
    383a:	50 e0       	ldi	r21, 0x00	; 0
    383c:	0e 94 48 ad 	call	0x15a90	; 0x15a90 <__eewr_block_m128>

	 xArray[0]=192;	 xArray[1]=168; 	 xArray[2]=16;	 xArray[3]=70; 
    3840:	40 ec       	ldi	r20, 0xC0	; 192
    3842:	d4 2e       	mov	r13, r20
    3844:	d9 82       	std	Y+1, r13	; 0x01
    3846:	08 ea       	ldi	r16, 0xA8	; 168
    3848:	0a 83       	std	Y+2, r16	; 0x02
    384a:	10 e1       	ldi	r17, 0x10	; 16
    384c:	1b 83       	std	Y+3, r17	; 0x03
    384e:	86 e4       	ldi	r24, 0x46	; 70
    3850:	8c 83       	std	Y+4, r24	; 0x04
	 eeprom_write_block((const void*) &xArray, (void*) &DefClientIP, 4);
    3852:	5e 01       	movw	r10, r28
    3854:	08 94       	sec
    3856:	a1 1c       	adc	r10, r1
    3858:	b1 1c       	adc	r11, r1
    385a:	c5 01       	movw	r24, r10
    385c:	68 e2       	ldi	r22, 0x28	; 40
    385e:	70 e0       	ldi	r23, 0x00	; 0
    3860:	44 e0       	ldi	r20, 0x04	; 4
    3862:	50 e0       	ldi	r21, 0x00	; 0
    3864:	0e 94 48 ad 	call	0x15a90	; 0x15a90 <__eewr_block_m128>

	 xArray[0]=192;	 xArray[1]=168; 	 xArray[2]=16;	 xArray[3]=180; 
    3868:	d9 82       	std	Y+1, r13	; 0x01
    386a:	0a 83       	std	Y+2, r16	; 0x02
    386c:	1b 83       	std	Y+3, r17	; 0x03
    386e:	84 eb       	ldi	r24, 0xB4	; 180
    3870:	8c 83       	std	Y+4, r24	; 0x04
	 eeprom_write_block((const void*) &xArray, (void*) &DefServerIP, 4);
    3872:	c5 01       	movw	r24, r10
    3874:	6c e2       	ldi	r22, 0x2C	; 44
    3876:	70 e0       	ldi	r23, 0x00	; 0
    3878:	44 e0       	ldi	r20, 0x04	; 4
    387a:	50 e0       	ldi	r21, 0x00	; 0
    387c:	0e 94 48 ad 	call	0x15a90	; 0x15a90 <__eewr_block_m128>

     eeprom_write_byte(&DefPrinterType,PT_CUSTOM_TG02);
    3880:	80 e3       	ldi	r24, 0x30	; 48
    3882:	90 e0       	ldi	r25, 0x00	; 0
    3884:	61 e0       	ldi	r22, 0x01	; 1
    3886:	0e 94 52 ad 	call	0x15aa4	; 0x15aa4 <__eewr_byte_m128>

	 eeprom_write_byte(&DefPrintScrollEnd,7);
    388a:	81 e3       	ldi	r24, 0x31	; 49
    388c:	90 e0       	ldi	r25, 0x00	; 0
    388e:	67 e0       	ldi	r22, 0x07	; 7
    3890:	0e 94 52 ad 	call	0x15aa4	; 0x15aa4 <__eewr_byte_m128>
	 eeprom_write_byte(&DefPrintScrollSpace,5);
    3894:	82 e3       	ldi	r24, 0x32	; 50
    3896:	90 e0       	ldi	r25, 0x00	; 0
    3898:	65 e0       	ldi	r22, 0x05	; 5
    389a:	0e 94 52 ad 	call	0x15aa4	; 0x15aa4 <__eewr_byte_m128>
	 eeprom_write_byte(&DefPrintAutoCut,2);
    389e:	83 e3       	ldi	r24, 0x33	; 51
    38a0:	90 e0       	ldi	r25, 0x00	; 0
    38a2:	62 e0       	ldi	r22, 0x02	; 2
    38a4:	0e 94 52 ad 	call	0x15aa4	; 0x15aa4 <__eewr_byte_m128>
	 eeprom_write_byte(&DefPrintLogo,0);
    38a8:	84 e3       	ldi	r24, 0x34	; 52
    38aa:	90 e0       	ldi	r25, 0x00	; 0
    38ac:	60 e0       	ldi	r22, 0x00	; 0
    38ae:	0e 94 52 ad 	call	0x15aa4	; 0x15aa4 <__eewr_byte_m128>
	 eeprom_write_byte(&DefPrintSize,3);
    38b2:	85 e3       	ldi	r24, 0x35	; 53
    38b4:	90 e0       	ldi	r25, 0x00	; 0
    38b6:	63 e0       	ldi	r22, 0x03	; 3
    38b8:	0e 94 52 ad 	call	0x15aa4	; 0x15aa4 <__eewr_byte_m128>

	 eeprom_write_byte(&DefConnectionHost,0);
    38bc:	86 e3       	ldi	r24, 0x36	; 54
    38be:	90 e0       	ldi	r25, 0x00	; 0
    38c0:	60 e0       	ldi	r22, 0x00	; 0
    38c2:	0e 94 52 ad 	call	0x15aa4	; 0x15aa4 <__eewr_byte_m128>
	 eeprom_write_byte(&DefShowDateTime,1);
    38c6:	87 e3       	ldi	r24, 0x37	; 55
    38c8:	90 e0       	ldi	r25, 0x00	; 0
    38ca:	61 e0       	ldi	r22, 0x01	; 1
    38cc:	0e 94 52 ad 	call	0x15aa4	; 0x15aa4 <__eewr_byte_m128>
	 eeprom_write_byte(&DefNotifScreen,1);
    38d0:	88 e3       	ldi	r24, 0x38	; 56
    38d2:	90 e0       	ldi	r25, 0x00	; 0
    38d4:	61 e0       	ldi	r22, 0x01	; 1
    38d6:	0e 94 52 ad 	call	0x15aa4	; 0x15aa4 <__eewr_byte_m128>

	 eeprom_write_byte(&DefDecimalPrice,0);
    38da:	89 e3       	ldi	r24, 0x39	; 57
    38dc:	90 e0       	ldi	r25, 0x00	; 0
    38de:	60 e0       	ldi	r22, 0x00	; 0
    38e0:	0e 94 52 ad 	call	0x15aa4	; 0x15aa4 <__eewr_byte_m128>
	 eeprom_write_byte(&DefDecimalVolume,3);
    38e4:	8a e3       	ldi	r24, 0x3A	; 58
    38e6:	90 e0       	ldi	r25, 0x00	; 0
    38e8:	63 e0       	ldi	r22, 0x03	; 3
    38ea:	0e 94 52 ad 	call	0x15aa4	; 0x15aa4 <__eewr_byte_m128>
	 eeprom_write_byte(&DefDecimalMoney,0);
    38ee:	8b e3       	ldi	r24, 0x3B	; 59
    38f0:	90 e0       	ldi	r25, 0x00	; 0
    38f2:	60 e0       	ldi	r22, 0x00	; 0
    38f4:	0e 94 52 ad 	call	0x15aa4	; 0x15aa4 <__eewr_byte_m128>
	 eeprom_write_byte(&DefDecimalTotalVolume,2);
    38f8:	8d e3       	ldi	r24, 0x3D	; 61
    38fa:	90 e0       	ldi	r25, 0x00	; 0
    38fc:	62 e0       	ldi	r22, 0x02	; 2
    38fe:	0e 94 52 ad 	call	0x15aa4	; 0x15aa4 <__eewr_byte_m128>
	 eeprom_write_byte(&DefDecimalTotalMoney,0);
    3902:	8e e3       	ldi	r24, 0x3E	; 62
    3904:	90 e0       	ldi	r25, 0x00	; 0
    3906:	60 e0       	ldi	r22, 0x00	; 0
    3908:	0e 94 52 ad 	call	0x15aa4	; 0x15aa4 <__eewr_byte_m128>
	 eeprom_write_byte(&DefDecimalMark,',');
    390c:	8f e3       	ldi	r24, 0x3F	; 63
    390e:	90 e0       	ldi	r25, 0x00	; 0
    3910:	6c e2       	ldi	r22, 0x2C	; 44
    3912:	0e 94 52 ad 	call	0x15aa4	; 0x15aa4 <__eewr_byte_m128>
	 eeprom_write_byte(&DefCurrencyMark,'.');
    3916:	80 e4       	ldi	r24, 0x40	; 64
    3918:	90 e0       	ldi	r25, 0x00	; 0
    391a:	6e e2       	ldi	r22, 0x2E	; 46
    391c:	0e 94 52 ad 	call	0x15aa4	; 0x15aa4 <__eewr_byte_m128>

	 xArray[0]=',';	 xArray[1]='.'; 	 xArray[2]=' ';	 xArray[3]='/';  xArray[4]='-'; 
    3920:	8c e2       	ldi	r24, 0x2C	; 44
    3922:	89 83       	std	Y+1, r24	; 0x01
    3924:	8e e2       	ldi	r24, 0x2E	; 46
    3926:	8a 83       	std	Y+2, r24	; 0x02
    3928:	80 e2       	ldi	r24, 0x20	; 32
    392a:	8b 83       	std	Y+3, r24	; 0x03
    392c:	8f e2       	ldi	r24, 0x2F	; 47
    392e:	8c 83       	std	Y+4, r24	; 0x04
    3930:	8d e2       	ldi	r24, 0x2D	; 45
    3932:	8d 83       	std	Y+5, r24	; 0x05
	 eeprom_write_block((const void*) &xArray, (void*) &DefMarkMap, 5);
    3934:	c5 01       	movw	r24, r10
    3936:	61 e4       	ldi	r22, 0x41	; 65
    3938:	70 e0       	ldi	r23, 0x00	; 0
    393a:	45 e0       	ldi	r20, 0x05	; 5
    393c:	50 e0       	ldi	r21, 0x00	; 0
    393e:	0e 94 48 ad 	call	0x15a90	; 0x15a90 <__eewr_block_m128>

	 xArray[0]=1;	 xArray[1]=2; 	 xArray[2]=0;	 xArray[3]=0; xArray[4]=0;	 xArray[5]=0; xArray[6]=0;	 	 
    3942:	dd 24       	eor	r13, r13
    3944:	d3 94       	inc	r13
    3946:	d9 82       	std	Y+1, r13	; 0x01
    3948:	12 e0       	ldi	r17, 0x02	; 2
    394a:	1a 83       	std	Y+2, r17	; 0x02
    394c:	1b 82       	std	Y+3, r1	; 0x03
    394e:	1c 82       	std	Y+4, r1	; 0x04
    3950:	1d 82       	std	Y+5, r1	; 0x05
    3952:	1e 82       	std	Y+6, r1	; 0x06
    3954:	1f 82       	std	Y+7, r1	; 0x07
	 eeprom_write_block((const void*) &xArray, (void*) &DefPumpMap, 8);
    3956:	c5 01       	movw	r24, r10
    3958:	66 e4       	ldi	r22, 0x46	; 70
    395a:	70 e0       	ldi	r23, 0x00	; 0
    395c:	48 e0       	ldi	r20, 0x08	; 8
    395e:	50 e0       	ldi	r21, 0x00	; 0
    3960:	0e 94 48 ad 	call	0x15a90	; 0x15a90 <__eewr_block_m128>
	 eeprom_write_block((const void*) &xArray, (void*) &DefPumpLabel, 8);
    3964:	c5 01       	movw	r24, r10
    3966:	6e e4       	ldi	r22, 0x4E	; 78
    3968:	70 e0       	ldi	r23, 0x00	; 0
    396a:	48 e0       	ldi	r20, 0x08	; 8
    396c:	50 e0       	ldi	r21, 0x00	; 0
    396e:	0e 94 48 ad 	call	0x15a90	; 0x15a90 <__eewr_block_m128>

	 xArray[0]=1;	 xArray[1]=2; 	 xArray[2]=0;	 xArray[3]=0; xArray[4]=0;	 xArray[5]=0; 
    3972:	d9 82       	std	Y+1, r13	; 0x01
    3974:	1a 83       	std	Y+2, r17	; 0x02
    3976:	1b 82       	std	Y+3, r1	; 0x03
    3978:	1c 82       	std	Y+4, r1	; 0x04
    397a:	1d 82       	std	Y+5, r1	; 0x05
    397c:	1e 82       	std	Y+6, r1	; 0x06
	 eeprom_write_block((const void*) &xArray, (void*) &DefNozzleMap[0], 6);
    397e:	06 e5       	ldi	r16, 0x56	; 86
    3980:	10 e0       	ldi	r17, 0x00	; 0
    3982:	c5 01       	movw	r24, r10
    3984:	b8 01       	movw	r22, r16
    3986:	46 e0       	ldi	r20, 0x06	; 6
    3988:	50 e0       	ldi	r21, 0x00	; 0
    398a:	0e 94 48 ad 	call	0x15a90	; 0x15a90 <__eewr_block_m128>
	 eeprom_write_block((const void*) &xArray, (void*) &DefNozzleMap[1], 6);
    398e:	0a 5f       	subi	r16, 0xFA	; 250
    3990:	1f 4f       	sbci	r17, 0xFF	; 255
    3992:	c5 01       	movw	r24, r10
    3994:	b8 01       	movw	r22, r16
    3996:	46 e0       	ldi	r20, 0x06	; 6
    3998:	50 e0       	ldi	r21, 0x00	; 0
    399a:	0e 94 48 ad 	call	0x15a90	; 0x15a90 <__eewr_block_m128>

	 sprintf_P(strEEP,PSTR("6500"));
    399e:	00 d0       	rcall	.+0      	; 0x39a0 <MasterReset+0x1ba>
    39a0:	00 d0       	rcall	.+0      	; 0x39a2 <MasterReset+0x1bc>
    39a2:	ed b7       	in	r30, 0x3d	; 61
    39a4:	fe b7       	in	r31, 0x3e	; 62
    39a6:	f2 82       	std	Z+2, r15	; 0x02
    39a8:	e1 82       	std	Z+1, r14	; 0x01
    39aa:	83 e1       	ldi	r24, 0x13	; 19
    39ac:	95 e0       	ldi	r25, 0x05	; 5
    39ae:	94 83       	std	Z+4, r25	; 0x04
    39b0:	83 83       	std	Z+3, r24	; 0x03
    39b2:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductPrice[0], sizeof(DefProductPrice[0]));
    39b6:	0f 90       	pop	r0
    39b8:	0f 90       	pop	r0
    39ba:	0f 90       	pop	r0
    39bc:	0f 90       	pop	r0
    39be:	06 e8       	ldi	r16, 0x86	; 134
    39c0:	10 e0       	ldi	r17, 0x00	; 0
    39c2:	c7 01       	movw	r24, r14
    39c4:	b8 01       	movw	r22, r16
    39c6:	49 e0       	ldi	r20, 0x09	; 9
    39c8:	50 e0       	ldi	r21, 0x00	; 0
    39ca:	0e 94 48 ad 	call	0x15a90	; 0x15a90 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("7250"));
    39ce:	00 d0       	rcall	.+0      	; 0x39d0 <MasterReset+0x1ea>
    39d0:	00 d0       	rcall	.+0      	; 0x39d2 <MasterReset+0x1ec>
    39d2:	ed b7       	in	r30, 0x3d	; 61
    39d4:	fe b7       	in	r31, 0x3e	; 62
    39d6:	f2 82       	std	Z+2, r15	; 0x02
    39d8:	e1 82       	std	Z+1, r14	; 0x01
    39da:	8e e0       	ldi	r24, 0x0E	; 14
    39dc:	95 e0       	ldi	r25, 0x05	; 5
    39de:	94 83       	std	Z+4, r25	; 0x04
    39e0:	83 83       	std	Z+3, r24	; 0x03
    39e2:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductPrice[1], sizeof(DefProductPrice[1]));
    39e6:	0f 90       	pop	r0
    39e8:	0f 90       	pop	r0
    39ea:	0f 90       	pop	r0
    39ec:	0f 90       	pop	r0
    39ee:	07 5f       	subi	r16, 0xF7	; 247
    39f0:	1f 4f       	sbci	r17, 0xFF	; 255
    39f2:	c7 01       	movw	r24, r14
    39f4:	b8 01       	movw	r22, r16
    39f6:	49 e0       	ldi	r20, 0x09	; 9
    39f8:	50 e0       	ldi	r21, 0x00	; 0
    39fa:	0e 94 48 ad 	call	0x15a90	; 0x15a90 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("4500"));
    39fe:	00 d0       	rcall	.+0      	; 0x3a00 <MasterReset+0x21a>
    3a00:	00 d0       	rcall	.+0      	; 0x3a02 <MasterReset+0x21c>
    3a02:	ed b7       	in	r30, 0x3d	; 61
    3a04:	fe b7       	in	r31, 0x3e	; 62
    3a06:	f2 82       	std	Z+2, r15	; 0x02
    3a08:	e1 82       	std	Z+1, r14	; 0x01
    3a0a:	89 e0       	ldi	r24, 0x09	; 9
    3a0c:	95 e0       	ldi	r25, 0x05	; 5
    3a0e:	94 83       	std	Z+4, r25	; 0x04
    3a10:	83 83       	std	Z+3, r24	; 0x03
    3a12:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductPrice[2], sizeof(DefProductPrice[2]));
    3a16:	0f 90       	pop	r0
    3a18:	0f 90       	pop	r0
    3a1a:	0f 90       	pop	r0
    3a1c:	0f 90       	pop	r0
    3a1e:	07 5f       	subi	r16, 0xF7	; 247
    3a20:	1f 4f       	sbci	r17, 0xFF	; 255
    3a22:	c7 01       	movw	r24, r14
    3a24:	b8 01       	movw	r22, r16
    3a26:	49 e0       	ldi	r20, 0x09	; 9
    3a28:	50 e0       	ldi	r21, 0x00	; 0
    3a2a:	0e 94 48 ad 	call	0x15a90	; 0x15a90 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("6500"));
    3a2e:	00 d0       	rcall	.+0      	; 0x3a30 <MasterReset+0x24a>
    3a30:	00 d0       	rcall	.+0      	; 0x3a32 <MasterReset+0x24c>
    3a32:	ed b7       	in	r30, 0x3d	; 61
    3a34:	fe b7       	in	r31, 0x3e	; 62
    3a36:	f2 82       	std	Z+2, r15	; 0x02
    3a38:	e1 82       	std	Z+1, r14	; 0x01
    3a3a:	84 e0       	ldi	r24, 0x04	; 4
    3a3c:	95 e0       	ldi	r25, 0x05	; 5
    3a3e:	94 83       	std	Z+4, r25	; 0x04
    3a40:	83 83       	std	Z+3, r24	; 0x03
    3a42:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductPrice[3], sizeof(DefProductPrice[3]));
    3a46:	0f 90       	pop	r0
    3a48:	0f 90       	pop	r0
    3a4a:	0f 90       	pop	r0
    3a4c:	0f 90       	pop	r0
    3a4e:	07 5f       	subi	r16, 0xF7	; 247
    3a50:	1f 4f       	sbci	r17, 0xFF	; 255
    3a52:	c7 01       	movw	r24, r14
    3a54:	b8 01       	movw	r22, r16
    3a56:	49 e0       	ldi	r20, 0x09	; 9
    3a58:	50 e0       	ldi	r21, 0x00	; 0
    3a5a:	0e 94 48 ad 	call	0x15a90	; 0x15a90 <__eewr_block_m128>
     sprintf_P(strEEP,PSTR("4500"));
    3a5e:	00 d0       	rcall	.+0      	; 0x3a60 <MasterReset+0x27a>
    3a60:	00 d0       	rcall	.+0      	; 0x3a62 <MasterReset+0x27c>
    3a62:	ed b7       	in	r30, 0x3d	; 61
    3a64:	fe b7       	in	r31, 0x3e	; 62
    3a66:	f2 82       	std	Z+2, r15	; 0x02
    3a68:	e1 82       	std	Z+1, r14	; 0x01
    3a6a:	8f ef       	ldi	r24, 0xFF	; 255
    3a6c:	94 e0       	ldi	r25, 0x04	; 4
    3a6e:	94 83       	std	Z+4, r25	; 0x04
    3a70:	83 83       	std	Z+3, r24	; 0x03
    3a72:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductPrice[4], sizeof(DefProductPrice[4]));
    3a76:	0f 90       	pop	r0
    3a78:	0f 90       	pop	r0
    3a7a:	0f 90       	pop	r0
    3a7c:	0f 90       	pop	r0
    3a7e:	07 5f       	subi	r16, 0xF7	; 247
    3a80:	1f 4f       	sbci	r17, 0xFF	; 255
    3a82:	c7 01       	movw	r24, r14
    3a84:	b8 01       	movw	r22, r16
    3a86:	49 e0       	ldi	r20, 0x09	; 9
    3a88:	50 e0       	ldi	r21, 0x00	; 0
    3a8a:	0e 94 48 ad 	call	0x15a90	; 0x15a90 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("6500"));
    3a8e:	00 d0       	rcall	.+0      	; 0x3a90 <MasterReset+0x2aa>
    3a90:	00 d0       	rcall	.+0      	; 0x3a92 <MasterReset+0x2ac>
    3a92:	ed b7       	in	r30, 0x3d	; 61
    3a94:	fe b7       	in	r31, 0x3e	; 62
    3a96:	f2 82       	std	Z+2, r15	; 0x02
    3a98:	e1 82       	std	Z+1, r14	; 0x01
    3a9a:	8a ef       	ldi	r24, 0xFA	; 250
    3a9c:	94 e0       	ldi	r25, 0x04	; 4
    3a9e:	94 83       	std	Z+4, r25	; 0x04
    3aa0:	83 83       	std	Z+3, r24	; 0x03
    3aa2:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductPrice[5], sizeof(DefProductPrice[5]));
    3aa6:	0f 90       	pop	r0
    3aa8:	0f 90       	pop	r0
    3aaa:	0f 90       	pop	r0
    3aac:	0f 90       	pop	r0
    3aae:	07 5f       	subi	r16, 0xF7	; 247
    3ab0:	1f 4f       	sbci	r17, 0xFF	; 255
    3ab2:	c7 01       	movw	r24, r14
    3ab4:	b8 01       	movw	r22, r16
    3ab6:	49 e0       	ldi	r20, 0x09	; 9
    3ab8:	50 e0       	ldi	r21, 0x00	; 0
    3aba:	0e 94 48 ad 	call	0x15a90	; 0x15a90 <__eewr_block_m128>

	 sprintf_P(strEEP,PSTR("Pert+   "));
    3abe:	00 d0       	rcall	.+0      	; 0x3ac0 <MasterReset+0x2da>
    3ac0:	00 d0       	rcall	.+0      	; 0x3ac2 <MasterReset+0x2dc>
    3ac2:	ed b7       	in	r30, 0x3d	; 61
    3ac4:	fe b7       	in	r31, 0x3e	; 62
    3ac6:	f2 82       	std	Z+2, r15	; 0x02
    3ac8:	e1 82       	std	Z+1, r14	; 0x01
    3aca:	81 ef       	ldi	r24, 0xF1	; 241
    3acc:	94 e0       	ldi	r25, 0x04	; 4
    3ace:	94 83       	std	Z+4, r25	; 0x04
    3ad0:	83 83       	std	Z+3, r24	; 0x03
    3ad2:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductName[0], sizeof(DefProductName[0]));
    3ad6:	0f 90       	pop	r0
    3ad8:	0f 90       	pop	r0
    3ada:	0f 90       	pop	r0
    3adc:	0f 90       	pop	r0
    3ade:	0c eb       	ldi	r16, 0xBC	; 188
    3ae0:	10 e0       	ldi	r17, 0x00	; 0
    3ae2:	c7 01       	movw	r24, r14
    3ae4:	b8 01       	movw	r22, r16
    3ae6:	4d e0       	ldi	r20, 0x0D	; 13
    3ae8:	50 e0       	ldi	r21, 0x00	; 0
    3aea:	0e 94 48 ad 	call	0x15a90	; 0x15a90 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("Pertamax"));
    3aee:	00 d0       	rcall	.+0      	; 0x3af0 <MasterReset+0x30a>
    3af0:	00 d0       	rcall	.+0      	; 0x3af2 <MasterReset+0x30c>
    3af2:	ed b7       	in	r30, 0x3d	; 61
    3af4:	fe b7       	in	r31, 0x3e	; 62
    3af6:	f2 82       	std	Z+2, r15	; 0x02
    3af8:	e1 82       	std	Z+1, r14	; 0x01
    3afa:	88 ee       	ldi	r24, 0xE8	; 232
    3afc:	94 e0       	ldi	r25, 0x04	; 4
    3afe:	94 83       	std	Z+4, r25	; 0x04
    3b00:	83 83       	std	Z+3, r24	; 0x03
    3b02:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductName[1], sizeof(DefProductName[1]));
    3b06:	0f 90       	pop	r0
    3b08:	0f 90       	pop	r0
    3b0a:	0f 90       	pop	r0
    3b0c:	0f 90       	pop	r0
    3b0e:	03 5f       	subi	r16, 0xF3	; 243
    3b10:	1f 4f       	sbci	r17, 0xFF	; 255
    3b12:	c7 01       	movw	r24, r14
    3b14:	b8 01       	movw	r22, r16
    3b16:	4d e0       	ldi	r20, 0x0D	; 13
    3b18:	50 e0       	ldi	r21, 0x00	; 0
    3b1a:	0e 94 48 ad 	call	0x15a90	; 0x15a90 <__eewr_block_m128>
     sprintf_P(strEEP,PSTR("Premium "));
    3b1e:	00 d0       	rcall	.+0      	; 0x3b20 <MasterReset+0x33a>
    3b20:	00 d0       	rcall	.+0      	; 0x3b22 <MasterReset+0x33c>
    3b22:	ed b7       	in	r30, 0x3d	; 61
    3b24:	fe b7       	in	r31, 0x3e	; 62
    3b26:	f2 82       	std	Z+2, r15	; 0x02
    3b28:	e1 82       	std	Z+1, r14	; 0x01
    3b2a:	8f ed       	ldi	r24, 0xDF	; 223
    3b2c:	94 e0       	ldi	r25, 0x04	; 4
    3b2e:	94 83       	std	Z+4, r25	; 0x04
    3b30:	83 83       	std	Z+3, r24	; 0x03
    3b32:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductName[2], sizeof(DefProductName[2]));
    3b36:	0f 90       	pop	r0
    3b38:	0f 90       	pop	r0
    3b3a:	0f 90       	pop	r0
    3b3c:	0f 90       	pop	r0
    3b3e:	03 5f       	subi	r16, 0xF3	; 243
    3b40:	1f 4f       	sbci	r17, 0xFF	; 255
    3b42:	c7 01       	movw	r24, r14
    3b44:	b8 01       	movw	r22, r16
    3b46:	4d e0       	ldi	r20, 0x0D	; 13
    3b48:	50 e0       	ldi	r21, 0x00	; 0
    3b4a:	0e 94 48 ad 	call	0x15a90	; 0x15a90 <__eewr_block_m128>
     sprintf_P(strEEP,PSTR("Solar   "));
    3b4e:	00 d0       	rcall	.+0      	; 0x3b50 <MasterReset+0x36a>
    3b50:	00 d0       	rcall	.+0      	; 0x3b52 <MasterReset+0x36c>
    3b52:	ed b7       	in	r30, 0x3d	; 61
    3b54:	fe b7       	in	r31, 0x3e	; 62
    3b56:	f2 82       	std	Z+2, r15	; 0x02
    3b58:	e1 82       	std	Z+1, r14	; 0x01
    3b5a:	86 ed       	ldi	r24, 0xD6	; 214
    3b5c:	94 e0       	ldi	r25, 0x04	; 4
    3b5e:	94 83       	std	Z+4, r25	; 0x04
    3b60:	83 83       	std	Z+3, r24	; 0x03
    3b62:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductName[3], sizeof(DefProductName[3]));
    3b66:	0f 90       	pop	r0
    3b68:	0f 90       	pop	r0
    3b6a:	0f 90       	pop	r0
    3b6c:	0f 90       	pop	r0
    3b6e:	03 5f       	subi	r16, 0xF3	; 243
    3b70:	1f 4f       	sbci	r17, 0xFF	; 255
    3b72:	c7 01       	movw	r24, r14
    3b74:	b8 01       	movw	r22, r16
    3b76:	4d e0       	ldi	r20, 0x0D	; 13
    3b78:	50 e0       	ldi	r21, 0x00	; 0
    3b7a:	0e 94 48 ad 	call	0x15a90	; 0x15a90 <__eewr_block_m128>
     sprintf_P(strEEP,PSTR("BioSolr "));
    3b7e:	00 d0       	rcall	.+0      	; 0x3b80 <MasterReset+0x39a>
    3b80:	00 d0       	rcall	.+0      	; 0x3b82 <MasterReset+0x39c>
    3b82:	ed b7       	in	r30, 0x3d	; 61
    3b84:	fe b7       	in	r31, 0x3e	; 62
    3b86:	f2 82       	std	Z+2, r15	; 0x02
    3b88:	e1 82       	std	Z+1, r14	; 0x01
    3b8a:	8d ec       	ldi	r24, 0xCD	; 205
    3b8c:	94 e0       	ldi	r25, 0x04	; 4
    3b8e:	94 83       	std	Z+4, r25	; 0x04
    3b90:	83 83       	std	Z+3, r24	; 0x03
    3b92:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductName[4], sizeof(DefProductName[4]));
    3b96:	0f 90       	pop	r0
    3b98:	0f 90       	pop	r0
    3b9a:	0f 90       	pop	r0
    3b9c:	0f 90       	pop	r0
    3b9e:	03 5f       	subi	r16, 0xF3	; 243
    3ba0:	1f 4f       	sbci	r17, 0xFF	; 255
    3ba2:	c7 01       	movw	r24, r14
    3ba4:	b8 01       	movw	r22, r16
    3ba6:	4d e0       	ldi	r20, 0x0D	; 13
    3ba8:	50 e0       	ldi	r21, 0x00	; 0
    3baa:	0e 94 48 ad 	call	0x15a90	; 0x15a90 <__eewr_block_m128>
     sprintf_P(strEEP,PSTR("Diesel  "));
    3bae:	00 d0       	rcall	.+0      	; 0x3bb0 <MasterReset+0x3ca>
    3bb0:	00 d0       	rcall	.+0      	; 0x3bb2 <MasterReset+0x3cc>
    3bb2:	ed b7       	in	r30, 0x3d	; 61
    3bb4:	fe b7       	in	r31, 0x3e	; 62
    3bb6:	f2 82       	std	Z+2, r15	; 0x02
    3bb8:	e1 82       	std	Z+1, r14	; 0x01
    3bba:	84 ec       	ldi	r24, 0xC4	; 196
    3bbc:	94 e0       	ldi	r25, 0x04	; 4
    3bbe:	94 83       	std	Z+4, r25	; 0x04
    3bc0:	83 83       	std	Z+3, r24	; 0x03
    3bc2:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductName[5], sizeof(DefProductName[5]));
    3bc6:	0f 90       	pop	r0
    3bc8:	0f 90       	pop	r0
    3bca:	0f 90       	pop	r0
    3bcc:	0f 90       	pop	r0
    3bce:	c7 01       	movw	r24, r14
    3bd0:	6d ef       	ldi	r22, 0xFD	; 253
    3bd2:	70 e0       	ldi	r23, 0x00	; 0
    3bd4:	4d e0       	ldi	r20, 0x0D	; 13
    3bd6:	50 e0       	ldi	r21, 0x00	; 0
    3bd8:	0e 94 48 ad 	call	0x15a90	; 0x15a90 <__eewr_block_m128>

	 sprintf_P(strEEP,PSTR("BCA"));
    3bdc:	00 d0       	rcall	.+0      	; 0x3bde <MasterReset+0x3f8>
    3bde:	00 d0       	rcall	.+0      	; 0x3be0 <MasterReset+0x3fa>
    3be0:	ed b7       	in	r30, 0x3d	; 61
    3be2:	fe b7       	in	r31, 0x3e	; 62
    3be4:	f2 82       	std	Z+2, r15	; 0x02
    3be6:	e1 82       	std	Z+1, r14	; 0x01
    3be8:	80 ec       	ldi	r24, 0xC0	; 192
    3bea:	94 e0       	ldi	r25, 0x04	; 4
    3bec:	94 83       	std	Z+4, r25	; 0x04
    3bee:	83 83       	std	Z+3, r24	; 0x03
    3bf0:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefBankName[0], sizeof(DefBankName[0]));
    3bf4:	0f 90       	pop	r0
    3bf6:	0f 90       	pop	r0
    3bf8:	0f 90       	pop	r0
    3bfa:	0f 90       	pop	r0
    3bfc:	0a e0       	ldi	r16, 0x0A	; 10
    3bfe:	11 e0       	ldi	r17, 0x01	; 1
    3c00:	c7 01       	movw	r24, r14
    3c02:	b8 01       	movw	r22, r16
    3c04:	4b e0       	ldi	r20, 0x0B	; 11
    3c06:	50 e0       	ldi	r21, 0x00	; 0
    3c08:	0e 94 48 ad 	call	0x15a90	; 0x15a90 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("Mandiri"));
    3c0c:	00 d0       	rcall	.+0      	; 0x3c0e <MasterReset+0x428>
    3c0e:	00 d0       	rcall	.+0      	; 0x3c10 <MasterReset+0x42a>
    3c10:	ed b7       	in	r30, 0x3d	; 61
    3c12:	fe b7       	in	r31, 0x3e	; 62
    3c14:	f2 82       	std	Z+2, r15	; 0x02
    3c16:	e1 82       	std	Z+1, r14	; 0x01
    3c18:	88 eb       	ldi	r24, 0xB8	; 184
    3c1a:	94 e0       	ldi	r25, 0x04	; 4
    3c1c:	94 83       	std	Z+4, r25	; 0x04
    3c1e:	83 83       	std	Z+3, r24	; 0x03
    3c20:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefBankName[1], sizeof(DefBankName[1]));
    3c24:	0f 90       	pop	r0
    3c26:	0f 90       	pop	r0
    3c28:	0f 90       	pop	r0
    3c2a:	0f 90       	pop	r0
    3c2c:	05 5f       	subi	r16, 0xF5	; 245
    3c2e:	1f 4f       	sbci	r17, 0xFF	; 255
    3c30:	c7 01       	movw	r24, r14
    3c32:	b8 01       	movw	r22, r16
    3c34:	4b e0       	ldi	r20, 0x0B	; 11
    3c36:	50 e0       	ldi	r21, 0x00	; 0
    3c38:	0e 94 48 ad 	call	0x15a90	; 0x15a90 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("BNI"));
    3c3c:	00 d0       	rcall	.+0      	; 0x3c3e <MasterReset+0x458>
    3c3e:	00 d0       	rcall	.+0      	; 0x3c40 <MasterReset+0x45a>
    3c40:	ed b7       	in	r30, 0x3d	; 61
    3c42:	fe b7       	in	r31, 0x3e	; 62
    3c44:	f2 82       	std	Z+2, r15	; 0x02
    3c46:	e1 82       	std	Z+1, r14	; 0x01
    3c48:	84 eb       	ldi	r24, 0xB4	; 180
    3c4a:	94 e0       	ldi	r25, 0x04	; 4
    3c4c:	94 83       	std	Z+4, r25	; 0x04
    3c4e:	83 83       	std	Z+3, r24	; 0x03
    3c50:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefBankName[2], sizeof(DefBankName[2]));
    3c54:	0f 90       	pop	r0
    3c56:	0f 90       	pop	r0
    3c58:	0f 90       	pop	r0
    3c5a:	0f 90       	pop	r0
    3c5c:	05 5f       	subi	r16, 0xF5	; 245
    3c5e:	1f 4f       	sbci	r17, 0xFF	; 255
    3c60:	c7 01       	movw	r24, r14
    3c62:	b8 01       	movw	r22, r16
    3c64:	4b e0       	ldi	r20, 0x0B	; 11
    3c66:	50 e0       	ldi	r21, 0x00	; 0
    3c68:	0e 94 48 ad 	call	0x15a90	; 0x15a90 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("BRI"));
    3c6c:	00 d0       	rcall	.+0      	; 0x3c6e <MasterReset+0x488>
    3c6e:	00 d0       	rcall	.+0      	; 0x3c70 <MasterReset+0x48a>
    3c70:	ed b7       	in	r30, 0x3d	; 61
    3c72:	fe b7       	in	r31, 0x3e	; 62
    3c74:	f2 82       	std	Z+2, r15	; 0x02
    3c76:	e1 82       	std	Z+1, r14	; 0x01
    3c78:	80 eb       	ldi	r24, 0xB0	; 176
    3c7a:	94 e0       	ldi	r25, 0x04	; 4
    3c7c:	94 83       	std	Z+4, r25	; 0x04
    3c7e:	83 83       	std	Z+3, r24	; 0x03
    3c80:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefBankName[3], sizeof(DefBankName[3]));
    3c84:	0f 90       	pop	r0
    3c86:	0f 90       	pop	r0
    3c88:	0f 90       	pop	r0
    3c8a:	0f 90       	pop	r0
    3c8c:	05 5f       	subi	r16, 0xF5	; 245
    3c8e:	1f 4f       	sbci	r17, 0xFF	; 255
    3c90:	c7 01       	movw	r24, r14
    3c92:	b8 01       	movw	r22, r16
    3c94:	4b e0       	ldi	r20, 0x0B	; 11
    3c96:	50 e0       	ldi	r21, 0x00	; 0
    3c98:	0e 94 48 ad 	call	0x15a90	; 0x15a90 <__eewr_block_m128>

	 eeprom_write_byte(&DefPrintInitialize,False);
    3c9c:	86 e3       	ldi	r24, 0x36	; 54
    3c9e:	91 e0       	ldi	r25, 0x01	; 1
    3ca0:	60 e0       	ldi	r22, 0x00	; 0
    3ca2:	0e 94 52 ad 	call	0x15aa4	; 0x15aa4 <__eewr_byte_m128>
	 eeprom_write_byte(&DefInitIFT,IT_SLAVE);
    3ca6:	87 e3       	ldi	r24, 0x37	; 55
    3ca8:	91 e0       	ldi	r25, 0x01	; 1
    3caa:	61 e0       	ldi	r22, 0x01	; 1
    3cac:	0e 94 52 ad 	call	0x15aa4	; 0x15aa4 <__eewr_byte_m128>
	 eeprom_write_byte(&DefDispenserBrand,ST_GILBARCO);//ST_WAYNE_DART;
    3cb0:	88 e3       	ldi	r24, 0x38	; 56
    3cb2:	91 e0       	ldi	r25, 0x01	; 1
    3cb4:	61 e0       	ldi	r22, 0x01	; 1
    3cb6:	0e 94 52 ad 	call	0x15aa4	; 0x15aa4 <__eewr_byte_m128>

	 sprintf_P(strEEP,PSTR("000000"));
    3cba:	00 d0       	rcall	.+0      	; 0x3cbc <MasterReset+0x4d6>
    3cbc:	00 d0       	rcall	.+0      	; 0x3cbe <MasterReset+0x4d8>
    3cbe:	ed b7       	in	r30, 0x3d	; 61
    3cc0:	fe b7       	in	r31, 0x3e	; 62
    3cc2:	f2 82       	std	Z+2, r15	; 0x02
    3cc4:	e1 82       	std	Z+1, r14	; 0x01
    3cc6:	89 ea       	ldi	r24, 0xA9	; 169
    3cc8:	94 e0       	ldi	r25, 0x04	; 4
    3cca:	94 83       	std	Z+4, r25	; 0x04
    3ccc:	83 83       	std	Z+3, r24	; 0x03
    3cce:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefTransactionNumber, sizeof(DefTransactionNumber));
    3cd2:	0f 90       	pop	r0
    3cd4:	0f 90       	pop	r0
    3cd6:	0f 90       	pop	r0
    3cd8:	0f 90       	pop	r0
    3cda:	c7 01       	movw	r24, r14
    3cdc:	69 e3       	ldi	r22, 0x39	; 57
    3cde:	71 e0       	ldi	r23, 0x01	; 1
    3ce0:	47 e0       	ldi	r20, 0x07	; 7
    3ce2:	50 e0       	ldi	r21, 0x00	; 0
    3ce4:	0e 94 48 ad 	call	0x15a90	; 0x15a90 <__eewr_block_m128>

     eeprom_write_byte(&DefShift,1);
    3ce8:	80 e4       	ldi	r24, 0x40	; 64
    3cea:	91 e0       	ldi	r25, 0x01	; 1
    3cec:	61 e0       	ldi	r22, 0x01	; 1
    3cee:	0e 94 52 ad 	call	0x15aa4	; 0x15aa4 <__eewr_byte_m128>

	 xArray[0]=br9600;	 xArray[1]=br9600; 	 xArray[2]=br5787;	 xArray[3]=br9600;
    3cf2:	d9 82       	std	Y+1, r13	; 0x01
    3cf4:	da 82       	std	Y+2, r13	; 0x02
    3cf6:	83 e0       	ldi	r24, 0x03	; 3
    3cf8:	8b 83       	std	Y+3, r24	; 0x03
    3cfa:	dc 82       	std	Y+4, r13	; 0x04
	 eeprom_write_block((const void*) &xArray, (void*) &DefBaudrate, 4);
    3cfc:	c5 01       	movw	r24, r10
    3cfe:	61 e4       	ldi	r22, 0x41	; 65
    3d00:	71 e0       	ldi	r23, 0x01	; 1
    3d02:	44 e0       	ldi	r20, 0x04	; 4
    3d04:	50 e0       	ldi	r21, 0x00	; 0
    3d06:	0e 94 48 ad 	call	0x15a90	; 0x15a90 <__eewr_block_m128>

     eeprom_write_byte(&DefPoolingPumpMax,MAX_PUMP);
    3d0a:	85 e4       	ldi	r24, 0x45	; 69
    3d0c:	91 e0       	ldi	r25, 0x01	; 1
    3d0e:	64 e0       	ldi	r22, 0x04	; 4
    3d10:	0e 94 52 ad 	call	0x15aa4	; 0x15aa4 <__eewr_byte_m128>
     eeprom_write_byte(&DefPoolingNoPumpCount,NO_PUMP_COUNT_MAX);
    3d14:	86 e4       	ldi	r24, 0x46	; 70
    3d16:	91 e0       	ldi	r25, 0x01	; 1
    3d18:	65 e0       	ldi	r22, 0x05	; 5
    3d1a:	0e 94 52 ad 	call	0x15aa4	; 0x15aa4 <__eewr_byte_m128>
     eeprom_write_byte(&DefPoolingTryResend,TRY_RESEND);
    3d1e:	87 e4       	ldi	r24, 0x47	; 71
    3d20:	91 e0       	ldi	r25, 0x01	; 1
    3d22:	62 e0       	ldi	r22, 0x02	; 2
    3d24:	0e 94 52 ad 	call	0x15aa4	; 0x15aa4 <__eewr_byte_m128>
     eeprom_write_byte(&DefPoolingSendTimeout,SEND_TIMEOUT);
    3d28:	88 e4       	ldi	r24, 0x48	; 72
    3d2a:	91 e0       	ldi	r25, 0x01	; 1
    3d2c:	65 e0       	ldi	r22, 0x05	; 5
    3d2e:	0e 94 52 ad 	call	0x15aa4	; 0x15aa4 <__eewr_byte_m128>
     eeprom_write_byte(&DefPoolingDelayNextPump,DELAY_NEXT_PUMP);
    3d32:	89 e4       	ldi	r24, 0x49	; 73
    3d34:	91 e0       	ldi	r25, 0x01	; 1
    3d36:	65 e0       	ldi	r22, 0x05	; 5
    3d38:	0e 94 52 ad 	call	0x15aa4	; 0x15aa4 <__eewr_byte_m128>
     eeprom_write_byte(&DefActivePump,ACTIVE_PUMP);
    3d3c:	8a e4       	ldi	r24, 0x4A	; 74
    3d3e:	91 e0       	ldi	r25, 0x01	; 1
    3d40:	64 e0       	ldi	r22, 0x04	; 4
    3d42:	0e 94 52 ad 	call	0x15aa4	; 0x15aa4 <__eewr_byte_m128>
     eeprom_write_byte(&DefSequenceTimeout,SEQUENCE_TIMEOUT);
    3d46:	8b e4       	ldi	r24, 0x4B	; 75
    3d48:	91 e0       	ldi	r25, 0x01	; 1
    3d4a:	6a e0       	ldi	r22, 0x0A	; 10
    3d4c:	0e 94 52 ad 	call	0x15aa4	; 0x15aa4 <__eewr_byte_m128>

     eeprom_write_byte(&DefPrintMoney,True);
    3d50:	82 ec       	ldi	r24, 0xC2	; 194
    3d52:	93 e0       	ldi	r25, 0x03	; 3
    3d54:	61 e0       	ldi	r22, 0x01	; 1
    3d56:	0e 94 52 ad 	call	0x15aa4	; 0x15aa4 <__eewr_byte_m128>
	 eeprom_write_byte(&DefHGMode,HM_232);//HM_TTL,HM_232,HM_485
    3d5a:	83 ec       	ldi	r24, 0xC3	; 195
    3d5c:	93 e0       	ldi	r25, 0x03	; 3
    3d5e:	61 e0       	ldi	r22, 0x01	; 1
    3d60:	0e 94 52 ad 	call	0x15aa4	; 0x15aa4 <__eewr_byte_m128>

	 sprintf_P(strEEP,PSTR("    PT. HANINDO AUTOMATION SOLUTIONS    "));
    3d64:	00 d0       	rcall	.+0      	; 0x3d66 <MasterReset+0x580>
    3d66:	00 d0       	rcall	.+0      	; 0x3d68 <MasterReset+0x582>
    3d68:	ed b7       	in	r30, 0x3d	; 61
    3d6a:	fe b7       	in	r31, 0x3e	; 62
    3d6c:	f2 82       	std	Z+2, r15	; 0x02
    3d6e:	e1 82       	std	Z+1, r14	; 0x01
    3d70:	80 e8       	ldi	r24, 0x80	; 128
    3d72:	94 e0       	ldi	r25, 0x04	; 4
    3d74:	94 83       	std	Z+4, r25	; 0x04
    3d76:	83 83       	std	Z+3, r24	; 0x03
    3d78:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefHeaderFooter[0],41);
    3d7c:	0f 90       	pop	r0
    3d7e:	0f 90       	pop	r0
    3d80:	0f 90       	pop	r0
    3d82:	0f 90       	pop	r0
    3d84:	08 e2       	ldi	r16, 0x28	; 40
    3d86:	12 e0       	ldi	r17, 0x02	; 2
    3d88:	c7 01       	movw	r24, r14
    3d8a:	b8 01       	movw	r22, r16
    3d8c:	49 e2       	ldi	r20, 0x29	; 41
    3d8e:	50 e0       	ldi	r21, 0x00	; 0
    3d90:	0e 94 48 ad 	call	0x15a90	; 0x15a90 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("        JL. RS Fatmawati No.55          "));
    3d94:	00 d0       	rcall	.+0      	; 0x3d96 <MasterReset+0x5b0>
    3d96:	00 d0       	rcall	.+0      	; 0x3d98 <MasterReset+0x5b2>
    3d98:	ed b7       	in	r30, 0x3d	; 61
    3d9a:	fe b7       	in	r31, 0x3e	; 62
    3d9c:	f2 82       	std	Z+2, r15	; 0x02
    3d9e:	e1 82       	std	Z+1, r14	; 0x01
    3da0:	87 e5       	ldi	r24, 0x57	; 87
    3da2:	94 e0       	ldi	r25, 0x04	; 4
    3da4:	94 83       	std	Z+4, r25	; 0x04
    3da6:	83 83       	std	Z+3, r24	; 0x03
    3da8:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefHeaderFooter[1],41);
    3dac:	0f 90       	pop	r0
    3dae:	0f 90       	pop	r0
    3db0:	0f 90       	pop	r0
    3db2:	0f 90       	pop	r0
    3db4:	07 5d       	subi	r16, 0xD7	; 215
    3db6:	1f 4f       	sbci	r17, 0xFF	; 255
    3db8:	c7 01       	movw	r24, r14
    3dba:	b8 01       	movw	r22, r16
    3dbc:	49 e2       	ldi	r20, 0x29	; 41
    3dbe:	50 e0       	ldi	r21, 0x00	; 0
    3dc0:	0e 94 48 ad 	call	0x15a90	; 0x15a90 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("            Jakarta Selatan             "));
    3dc4:	00 d0       	rcall	.+0      	; 0x3dc6 <MasterReset+0x5e0>
    3dc6:	00 d0       	rcall	.+0      	; 0x3dc8 <MasterReset+0x5e2>
    3dc8:	ed b7       	in	r30, 0x3d	; 61
    3dca:	fe b7       	in	r31, 0x3e	; 62
    3dcc:	f2 82       	std	Z+2, r15	; 0x02
    3dce:	e1 82       	std	Z+1, r14	; 0x01
    3dd0:	8e e2       	ldi	r24, 0x2E	; 46
    3dd2:	94 e0       	ldi	r25, 0x04	; 4
    3dd4:	94 83       	std	Z+4, r25	; 0x04
    3dd6:	83 83       	std	Z+3, r24	; 0x03
    3dd8:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefHeaderFooter[2],41);
    3ddc:	0f 90       	pop	r0
    3dde:	0f 90       	pop	r0
    3de0:	0f 90       	pop	r0
    3de2:	0f 90       	pop	r0
    3de4:	c7 01       	movw	r24, r14
    3de6:	6a e7       	ldi	r22, 0x7A	; 122
    3de8:	72 e0       	ldi	r23, 0x02	; 2
    3dea:	49 e2       	ldi	r20, 0x29	; 41
    3dec:	50 e0       	ldi	r21, 0x00	; 0
    3dee:	0e 94 48 ad 	call	0x15a90	; 0x15a90 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("                                        "));
    3df2:	00 d0       	rcall	.+0      	; 0x3df4 <MasterReset+0x60e>
    3df4:	00 d0       	rcall	.+0      	; 0x3df6 <MasterReset+0x610>
    3df6:	ed b7       	in	r30, 0x3d	; 61
    3df8:	fe b7       	in	r31, 0x3e	; 62
    3dfa:	f2 82       	std	Z+2, r15	; 0x02
    3dfc:	e1 82       	std	Z+1, r14	; 0x01
    3dfe:	85 e0       	ldi	r24, 0x05	; 5
    3e00:	94 e0       	ldi	r25, 0x04	; 4
    3e02:	94 83       	std	Z+4, r25	; 0x04
    3e04:	83 83       	std	Z+3, r24	; 0x03
    3e06:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefHeaderFooter[3],41);
    3e0a:	0f 90       	pop	r0
    3e0c:	0f 90       	pop	r0
    3e0e:	0f 90       	pop	r0
    3e10:	0f 90       	pop	r0
    3e12:	c7 01       	movw	r24, r14
    3e14:	63 ea       	ldi	r22, 0xA3	; 163
    3e16:	72 e0       	ldi	r23, 0x02	; 2
    3e18:	49 e2       	ldi	r20, 0x29	; 41
    3e1a:	50 e0       	ldi	r21, 0x00	; 0
    3e1c:	0e 94 48 ad 	call	0x15a90	; 0x15a90 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("                                        "));
    3e20:	00 d0       	rcall	.+0      	; 0x3e22 <MasterReset+0x63c>
    3e22:	00 d0       	rcall	.+0      	; 0x3e24 <MasterReset+0x63e>
    3e24:	ed b7       	in	r30, 0x3d	; 61
    3e26:	fe b7       	in	r31, 0x3e	; 62
    3e28:	f2 82       	std	Z+2, r15	; 0x02
    3e2a:	e1 82       	std	Z+1, r14	; 0x01
    3e2c:	8c ed       	ldi	r24, 0xDC	; 220
    3e2e:	93 e0       	ldi	r25, 0x03	; 3
    3e30:	94 83       	std	Z+4, r25	; 0x04
    3e32:	83 83       	std	Z+3, r24	; 0x03
    3e34:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefHeaderFooter[4],41);
    3e38:	0f 90       	pop	r0
    3e3a:	0f 90       	pop	r0
    3e3c:	0f 90       	pop	r0
    3e3e:	0f 90       	pop	r0
    3e40:	c7 01       	movw	r24, r14
    3e42:	6c ec       	ldi	r22, 0xCC	; 204
    3e44:	72 e0       	ldi	r23, 0x02	; 2
    3e46:	49 e2       	ldi	r20, 0x29	; 41
    3e48:	50 e0       	ldi	r21, 0x00	; 0
    3e4a:	0e 94 48 ad 	call	0x15a90	; 0x15a90 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("                                        "));
    3e4e:	00 d0       	rcall	.+0      	; 0x3e50 <MasterReset+0x66a>
    3e50:	00 d0       	rcall	.+0      	; 0x3e52 <MasterReset+0x66c>
    3e52:	ed b7       	in	r30, 0x3d	; 61
    3e54:	fe b7       	in	r31, 0x3e	; 62
    3e56:	f2 82       	std	Z+2, r15	; 0x02
    3e58:	e1 82       	std	Z+1, r14	; 0x01
    3e5a:	83 eb       	ldi	r24, 0xB3	; 179
    3e5c:	93 e0       	ldi	r25, 0x03	; 3
    3e5e:	94 83       	std	Z+4, r25	; 0x04
    3e60:	83 83       	std	Z+3, r24	; 0x03
    3e62:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefHeaderFooter[5],41);
    3e66:	0f 90       	pop	r0
    3e68:	0f 90       	pop	r0
    3e6a:	0f 90       	pop	r0
    3e6c:	0f 90       	pop	r0
    3e6e:	c7 01       	movw	r24, r14
    3e70:	65 ef       	ldi	r22, 0xF5	; 245
    3e72:	72 e0       	ldi	r23, 0x02	; 2
    3e74:	49 e2       	ldi	r20, 0x29	; 41
    3e76:	50 e0       	ldi	r21, 0x00	; 0
    3e78:	0e 94 48 ad 	call	0x15a90	; 0x15a90 <__eewr_block_m128>

	 sprintf_P(strEEP,PSTR("             Terima Kasih               "));
    3e7c:	00 d0       	rcall	.+0      	; 0x3e7e <MasterReset+0x698>
    3e7e:	00 d0       	rcall	.+0      	; 0x3e80 <MasterReset+0x69a>
    3e80:	ed b7       	in	r30, 0x3d	; 61
    3e82:	fe b7       	in	r31, 0x3e	; 62
    3e84:	f2 82       	std	Z+2, r15	; 0x02
    3e86:	e1 82       	std	Z+1, r14	; 0x01
    3e88:	8a e8       	ldi	r24, 0x8A	; 138
    3e8a:	93 e0       	ldi	r25, 0x03	; 3
    3e8c:	94 83       	std	Z+4, r25	; 0x04
    3e8e:	83 83       	std	Z+3, r24	; 0x03
    3e90:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefHeaderFooter[6],41);
    3e94:	0f 90       	pop	r0
    3e96:	0f 90       	pop	r0
    3e98:	0f 90       	pop	r0
    3e9a:	0f 90       	pop	r0
    3e9c:	c7 01       	movw	r24, r14
    3e9e:	6e e1       	ldi	r22, 0x1E	; 30
    3ea0:	73 e0       	ldi	r23, 0x03	; 3
    3ea2:	49 e2       	ldi	r20, 0x29	; 41
    3ea4:	50 e0       	ldi	r21, 0x00	; 0
    3ea6:	0e 94 48 ad 	call	0x15a90	; 0x15a90 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("            Selamat  Jalan              "));
    3eaa:	00 d0       	rcall	.+0      	; 0x3eac <MasterReset+0x6c6>
    3eac:	00 d0       	rcall	.+0      	; 0x3eae <MasterReset+0x6c8>
    3eae:	ed b7       	in	r30, 0x3d	; 61
    3eb0:	fe b7       	in	r31, 0x3e	; 62
    3eb2:	f2 82       	std	Z+2, r15	; 0x02
    3eb4:	e1 82       	std	Z+1, r14	; 0x01
    3eb6:	81 e6       	ldi	r24, 0x61	; 97
    3eb8:	93 e0       	ldi	r25, 0x03	; 3
    3eba:	94 83       	std	Z+4, r25	; 0x04
    3ebc:	83 83       	std	Z+3, r24	; 0x03
    3ebe:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefHeaderFooter[7],41);
    3ec2:	0f 90       	pop	r0
    3ec4:	0f 90       	pop	r0
    3ec6:	0f 90       	pop	r0
    3ec8:	0f 90       	pop	r0
    3eca:	c7 01       	movw	r24, r14
    3ecc:	67 e4       	ldi	r22, 0x47	; 71
    3ece:	73 e0       	ldi	r23, 0x03	; 3
    3ed0:	49 e2       	ldi	r20, 0x29	; 41
    3ed2:	50 e0       	ldi	r21, 0x00	; 0
    3ed4:	0e 94 48 ad 	call	0x15a90	; 0x15a90 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("      Semoga Selamat Sampai Tujuan      "));
    3ed8:	00 d0       	rcall	.+0      	; 0x3eda <MasterReset+0x6f4>
    3eda:	00 d0       	rcall	.+0      	; 0x3edc <MasterReset+0x6f6>
    3edc:	ed b7       	in	r30, 0x3d	; 61
    3ede:	fe b7       	in	r31, 0x3e	; 62
    3ee0:	f2 82       	std	Z+2, r15	; 0x02
    3ee2:	e1 82       	std	Z+1, r14	; 0x01
    3ee4:	88 e3       	ldi	r24, 0x38	; 56
    3ee6:	93 e0       	ldi	r25, 0x03	; 3
    3ee8:	94 83       	std	Z+4, r25	; 0x04
    3eea:	83 83       	std	Z+3, r24	; 0x03
    3eec:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefHeaderFooter[8],41);
    3ef0:	0f 90       	pop	r0
    3ef2:	0f 90       	pop	r0
    3ef4:	0f 90       	pop	r0
    3ef6:	0f 90       	pop	r0
    3ef8:	c7 01       	movw	r24, r14
    3efa:	60 e7       	ldi	r22, 0x70	; 112
    3efc:	73 e0       	ldi	r23, 0x03	; 3
    3efe:	49 e2       	ldi	r20, 0x29	; 41
    3f00:	50 e0       	ldi	r21, 0x00	; 0
    3f02:	0e 94 48 ad 	call	0x15a90	; 0x15a90 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("                                        "));
    3f06:	00 d0       	rcall	.+0      	; 0x3f08 <MasterReset+0x722>
    3f08:	00 d0       	rcall	.+0      	; 0x3f0a <MasterReset+0x724>
    3f0a:	ed b7       	in	r30, 0x3d	; 61
    3f0c:	fe b7       	in	r31, 0x3e	; 62
    3f0e:	f2 82       	std	Z+2, r15	; 0x02
    3f10:	e1 82       	std	Z+1, r14	; 0x01
    3f12:	8f e0       	ldi	r24, 0x0F	; 15
    3f14:	93 e0       	ldi	r25, 0x03	; 3
    3f16:	94 83       	std	Z+4, r25	; 0x04
    3f18:	83 83       	std	Z+3, r24	; 0x03
    3f1a:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefHeaderFooter[9],41);
    3f1e:	0f 90       	pop	r0
    3f20:	0f 90       	pop	r0
    3f22:	0f 90       	pop	r0
    3f24:	0f 90       	pop	r0
    3f26:	c7 01       	movw	r24, r14
    3f28:	69 e9       	ldi	r22, 0x99	; 153
    3f2a:	73 e0       	ldi	r23, 0x03	; 3
    3f2c:	49 e2       	ldi	r20, 0x29	; 41
    3f2e:	50 e0       	ldi	r21, 0x00	; 0
    3f30:	0e 94 48 ad 	call	0x15a90	; 0x15a90 <__eewr_block_m128>
	 
	 eeprom_write_byte(&DefIFT_ID,1);
    3f34:	80 e0       	ldi	r24, 0x00	; 0
    3f36:	90 e0       	ldi	r25, 0x00	; 0
    3f38:	61 e0       	ldi	r22, 0x01	; 1
    3f3a:	0e 94 52 ad 	call	0x15aa4	; 0x15aa4 <__eewr_byte_m128>
}
    3f3e:	ec 96       	adiw	r28, 0x3c	; 60
    3f40:	0f b6       	in	r0, 0x3f	; 63
    3f42:	f8 94       	cli
    3f44:	de bf       	out	0x3e, r29	; 62
    3f46:	0f be       	out	0x3f, r0	; 63
    3f48:	cd bf       	out	0x3d, r28	; 61
    3f4a:	cf 91       	pop	r28
    3f4c:	df 91       	pop	r29
    3f4e:	1f 91       	pop	r17
    3f50:	0f 91       	pop	r16
    3f52:	ff 90       	pop	r15
    3f54:	ef 90       	pop	r14
    3f56:	df 90       	pop	r13
    3f58:	bf 90       	pop	r11
    3f5a:	af 90       	pop	r10
    3f5c:	08 95       	ret

00003f5e <SetDispenser>:
		  }
	      break;
	 }
}

void SetDispenser(char DispType){
    3f5e:	ef 92       	push	r14
    3f60:	ff 92       	push	r15
    3f62:	0f 93       	push	r16
    3f64:	1f 93       	push	r17
    3f66:	df 93       	push	r29
    3f68:	cf 93       	push	r28
    3f6a:	00 d0       	rcall	.+0      	; 0x3f6c <SetDispenser+0xe>
    3f6c:	00 d0       	rcall	.+0      	; 0x3f6e <SetDispenser+0x10>
    3f6e:	0f 92       	push	r0
    3f70:	cd b7       	in	r28, 0x3d	; 61
    3f72:	de b7       	in	r29, 0x3e	; 62
    3f74:	18 2f       	mov	r17, r24
     char CurrentDispenser;
	 char i,DecimalSetting[5];
     CurrentDispenser=eeprom_read_byte(&DefDispenserBrand);
    3f76:	88 e3       	ldi	r24, 0x38	; 56
    3f78:	91 e0       	ldi	r25, 0x01	; 1
    3f7a:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
	 if (CurrentDispenser!=DispType){
    3f7e:	81 17       	cp	r24, r17
    3f80:	29 f0       	breq	.+10     	; 0x3f8c <SetDispenser+0x2e>
	     eeprom_write_byte(&DefDispenserBrand,DispType);
    3f82:	88 e3       	ldi	r24, 0x38	; 56
    3f84:	91 e0       	ldi	r25, 0x01	; 1
    3f86:	61 2f       	mov	r22, r17
    3f88:	0e 94 52 ad 	call	0x15aa4	; 0x15aa4 <__eewr_byte_m128>
	 }
     //Apply Setting for Pump respectively
	 switch(DispType){
    3f8c:	11 30       	cpi	r17, 0x01	; 1
    3f8e:	19 f0       	breq	.+6      	; 0x3f96 <SetDispenser+0x38>
    3f90:	12 30       	cpi	r17, 0x02	; 2
    3f92:	71 f4       	brne	.+28     	; 0x3fb0 <SetDispenser+0x52>
    3f94:	08 c0       	rjmp	.+16     	; 0x3fa6 <SetDispenser+0x48>
	 case ST_GILBARCO:
          DecimalSetting[0]=0;//Price
    3f96:	19 82       	std	Y+1, r1	; 0x01
		  DecimalSetting[1]=3;//Volume
    3f98:	83 e0       	ldi	r24, 0x03	; 3
    3f9a:	8a 83       	std	Y+2, r24	; 0x02
		  DecimalSetting[2]=0;//Money
    3f9c:	1b 82       	std	Y+3, r1	; 0x03
		  DecimalSetting[3]=2;//TotalVolume
    3f9e:	82 e0       	ldi	r24, 0x02	; 2
    3fa0:	8c 83       	std	Y+4, r24	; 0x04
		  DecimalSetting[4]=0;//TotalMoney 
    3fa2:	1d 82       	std	Y+5, r1	; 0x05
    3fa4:	05 c0       	rjmp	.+10     	; 0x3fb0 <SetDispenser+0x52>
	      break;
	 case ST_WAYNE_DART:
          DecimalSetting[0]=0;//Price
    3fa6:	19 82       	std	Y+1, r1	; 0x01
		  DecimalSetting[1]=2;//Volume
    3fa8:	1a 83       	std	Y+2, r17	; 0x02
		  DecimalSetting[2]=0;//Money
    3faa:	1b 82       	std	Y+3, r1	; 0x03
		  DecimalSetting[3]=2;//TotalVolume
    3fac:	1c 83       	std	Y+4, r17	; 0x04
		  DecimalSetting[4]=2;//TotalMoney 
    3fae:	1d 83       	std	Y+5, r17	; 0x05
    3fb0:	09 e3       	ldi	r16, 0x39	; 57
    3fb2:	10 e0       	ldi	r17, 0x00	; 0
    3fb4:	7e 01       	movw	r14, r28
    3fb6:	08 94       	sec
    3fb8:	e1 1c       	adc	r14, r1
    3fba:	f1 1c       	adc	r15, r1
	      break;	 
	 }
	 //ApplyChanges
     for (i=0;i<5;i++){
	     if (eeprom_read_byte(&DefDecimalPrice+i)!=DecimalSetting[i]){
    3fbc:	c8 01       	movw	r24, r16
    3fbe:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
    3fc2:	f7 01       	movw	r30, r14
    3fc4:	60 81       	ld	r22, Z
    3fc6:	86 17       	cp	r24, r22
    3fc8:	19 f0       	breq	.+6      	; 0x3fd0 <SetDispenser+0x72>
		     eeprom_write_byte(&DefDecimalPrice+i,DecimalSetting[i]);
    3fca:	c8 01       	movw	r24, r16
    3fcc:	0e 94 52 ad 	call	0x15aa4	; 0x15aa4 <__eewr_byte_m128>
    3fd0:	0f 5f       	subi	r16, 0xFF	; 255
    3fd2:	1f 4f       	sbci	r17, 0xFF	; 255
    3fd4:	08 94       	sec
    3fd6:	e1 1c       	adc	r14, r1
    3fd8:	f1 1c       	adc	r15, r1
		  DecimalSetting[3]=2;//TotalVolume
		  DecimalSetting[4]=2;//TotalMoney 
	      break;	 
	 }
	 //ApplyChanges
     for (i=0;i<5;i++){
    3fda:	f0 e0       	ldi	r31, 0x00	; 0
    3fdc:	0e 33       	cpi	r16, 0x3E	; 62
    3fde:	1f 07       	cpc	r17, r31
    3fe0:	69 f7       	brne	.-38     	; 0x3fbc <SetDispenser+0x5e>
	     if (eeprom_read_byte(&DefDecimalPrice+i)!=DecimalSetting[i]){
		     eeprom_write_byte(&DefDecimalPrice+i,DecimalSetting[i]);
		 }
	 }
}
    3fe2:	0f 90       	pop	r0
    3fe4:	0f 90       	pop	r0
    3fe6:	0f 90       	pop	r0
    3fe8:	0f 90       	pop	r0
    3fea:	0f 90       	pop	r0
    3fec:	cf 91       	pop	r28
    3fee:	df 91       	pop	r29
    3ff0:	1f 91       	pop	r17
    3ff2:	0f 91       	pop	r16
    3ff4:	ff 90       	pop	r15
    3ff6:	ef 90       	pop	r14
    3ff8:	08 95       	ret

00003ffa <InitMemory>:

	 }
}

void InitMemory(){
     PumpCountMax=eeprom_read_byte(&DefPoolingPumpMax);
    3ffa:	85 e4       	ldi	r24, 0x45	; 69
    3ffc:	91 e0       	ldi	r25, 0x01	; 1
    3ffe:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
    4002:	80 93 5c 01 	sts	0x015C, r24
	 ActivePump=eeprom_read_byte(&DefActivePump);
    4006:	8a e4       	ldi	r24, 0x4A	; 74
    4008:	91 e0       	ldi	r25, 0x01	; 1
    400a:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
    400e:	80 93 5d 01 	sts	0x015D, r24
}
    4012:	08 95       	ret

00004014 <GetFIPAddr>:
	    Result=PPumpID[FIPAddr-1];
	 }
   return Result;
}

char GetFIPAddr(char iPumpID){//Find FIP Addr based on PumpID respectively: 
    4014:	ff 92       	push	r15
    4016:	0f 93       	push	r16
    4018:	1f 93       	push	r17
    401a:	df 93       	push	r29
    401c:	cf 93       	push	r28
    401e:	cd b7       	in	r28, 0x3d	; 61
    4020:	de b7       	in	r29, 0x3e	; 62
    4022:	28 97       	sbiw	r28, 0x08	; 8
    4024:	0f b6       	in	r0, 0x3f	; 63
    4026:	f8 94       	cli
    4028:	de bf       	out	0x3e, r29	; 62
    402a:	0f be       	out	0x3f, r0	; 63
    402c:	cd bf       	out	0x3d, r28	; 61
    402e:	f8 2e       	mov	r15, r24
char i,PPumpID[8],Result;     //FIP1..FIP8
	 Result=0; 
	 eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap,8);
    4030:	8e 01       	movw	r16, r28
    4032:	0f 5f       	subi	r16, 0xFF	; 255
    4034:	1f 4f       	sbci	r17, 0xFF	; 255
    4036:	c8 01       	movw	r24, r16
    4038:	66 e4       	ldi	r22, 0x46	; 70
    403a:	70 e0       	ldi	r23, 0x00	; 0
    403c:	48 e0       	ldi	r20, 0x08	; 8
    403e:	50 e0       	ldi	r21, 0x00	; 0
    4040:	0e 94 30 ad 	call	0x15a60	; 0x15a60 <__eerd_block_m128>
    4044:	f8 01       	movw	r30, r16
     for(i=0;i<8;i++){
    4046:	9e 01       	movw	r18, r28
    4048:	27 5f       	subi	r18, 0xF7	; 247
    404a:	3f 4f       	sbci	r19, 0xFF	; 255
}

char GetFIPAddr(char iPumpID){//Find FIP Addr based on PumpID respectively: 
char i,PPumpID[8],Result;     //FIP1..FIP8
	 Result=0; 
	 eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap,8);
    404c:	9e 2f       	mov	r25, r30
    404e:	90 1b       	sub	r25, r16
     for(i=0;i<8;i++){
	     if (PPumpID[i]==iPumpID){
    4050:	80 81       	ld	r24, Z
    4052:	8f 15       	cp	r24, r15
    4054:	19 f4       	brne	.+6      	; 0x405c <GetFIPAddr+0x48>
		     Result=i+1;
    4056:	89 2f       	mov	r24, r25
    4058:	8f 5f       	subi	r24, 0xFF	; 255
    405a:	05 c0       	rjmp	.+10     	; 0x4066 <GetFIPAddr+0x52>
			 break;
    405c:	31 96       	adiw	r30, 0x01	; 1

char GetFIPAddr(char iPumpID){//Find FIP Addr based on PumpID respectively: 
char i,PPumpID[8],Result;     //FIP1..FIP8
	 Result=0; 
	 eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap,8);
     for(i=0;i<8;i++){
    405e:	e2 17       	cp	r30, r18
    4060:	f3 07       	cpc	r31, r19
    4062:	a1 f7       	brne	.-24     	; 0x404c <GetFIPAddr+0x38>
    4064:	80 e0       	ldi	r24, 0x00	; 0
		     Result=i+1;
			 break;
		 }
	 }
   return Result;
}
    4066:	28 96       	adiw	r28, 0x08	; 8
    4068:	0f b6       	in	r0, 0x3f	; 63
    406a:	f8 94       	cli
    406c:	de bf       	out	0x3e, r29	; 62
    406e:	0f be       	out	0x3f, r0	; 63
    4070:	cd bf       	out	0x3d, r28	; 61
    4072:	cf 91       	pop	r28
    4074:	df 91       	pop	r29
    4076:	1f 91       	pop	r17
    4078:	0f 91       	pop	r16
    407a:	ff 90       	pop	r15
    407c:	08 95       	ret

0000407e <UpdateStandaloneStatus>:
		 sprintf_P(lcdteks,PSTR("%s"),SPump);
         lcd_print(4,1,lcdteks);
     	 }
}

void UpdateStandaloneStatus(char xPumpID,char xPumpStatus){//xPumpID: (1-16)&0x0F
    407e:	ff 92       	push	r15
    4080:	0f 93       	push	r16
    4082:	1f 93       	push	r17
    4084:	cf 93       	push	r28
    4086:	df 93       	push	r29
    4088:	18 2f       	mov	r17, r24
    408a:	f6 2e       	mov	r15, r22
char strSend[20],iPumpID; //[xxxxxxxxxPx]
char iAddr;

	 if (xPumpID<16){
    408c:	80 31       	cpi	r24, 0x10	; 16
    408e:	08 f0       	brcs	.+2      	; 0x4092 <UpdateStandaloneStatus+0x14>
    4090:	4a c0       	rjmp	.+148    	; 0x4126 <UpdateStandaloneStatus+0xa8>
	     DispenserBrand=eeprom_read_byte(&DefDispenserBrand);
    4092:	88 e3       	ldi	r24, 0x38	; 56
    4094:	91 e0       	ldi	r25, 0x01	; 1
    4096:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
    409a:	80 93 5e 01 	sts	0x015E, r24
	     switch(DispenserBrand){
    409e:	81 50       	subi	r24, 0x01	; 1
    40a0:	82 30       	cpi	r24, 0x02	; 2
    40a2:	08 f4       	brcc	.+2      	; 0x40a6 <UpdateStandaloneStatus+0x28>
    40a4:	81 2f       	mov	r24, r17
	     case ST_WAYNE_DART:
              iPumpID=xPumpID;
	          break;				   
	     }

		 iAddr=GetFIPAddr(iPumpID);
    40a6:	0e 94 0a 20 	call	0x4014	; 0x4014 <GetFIPAddr>
		 if (iAddr>0){
    40aa:	88 23       	and	r24, r24
    40ac:	e1 f1       	breq	.+120    	; 0x4126 <UpdateStandaloneStatus+0xa8>
		     iAddr=iAddr-1;
			 if (strPumpStatus[iAddr]!=GetPumpStatusLabel(PS_PRINT_READY)){//iFdiiiiiiiiiiiii
    40ae:	81 50       	subi	r24, 0x01	; 1
    40b0:	c8 2f       	mov	r28, r24
    40b2:	d0 e0       	ldi	r29, 0x00	; 0
    40b4:	80 e1       	ldi	r24, 0x10	; 16
    40b6:	0e 94 42 14 	call	0x2884	; 0x2884 <GetPumpStatusLabel>
    40ba:	8e 01       	movw	r16, r28
    40bc:	0e 5f       	subi	r16, 0xFE	; 254
    40be:	1e 4f       	sbci	r17, 0xFE	; 254
    40c0:	f8 01       	movw	r30, r16
    40c2:	90 81       	ld	r25, Z
    40c4:	98 17       	cp	r25, r24
    40c6:	b1 f0       	breq	.+44     	; 0x40f4 <UpdateStandaloneStatus+0x76>
		         if (xPumpStatus!=PS_PRINT_READY)
    40c8:	f0 e1       	ldi	r31, 0x10	; 16
    40ca:	ff 16       	cp	r15, r31
    40cc:	21 f0       	breq	.+8      	; 0x40d6 <UpdateStandaloneStatus+0x58>
				     CurrentPumpStatus[iAddr]=xPumpStatus;
    40ce:	fe 01       	movw	r30, r28
    40d0:	e1 5a       	subi	r30, 0xA1	; 161
    40d2:	fe 4f       	sbci	r31, 0xFE	; 254
    40d4:	f0 82       	st	Z, r15
			     strPumpStatus[iAddr]=GetPumpStatusLabel(xPumpStatus);
    40d6:	8f 2d       	mov	r24, r15
    40d8:	0e 94 42 14 	call	0x2884	; 0x2884 <GetPumpStatusLabel>
    40dc:	8e 01       	movw	r16, r28
    40de:	0e 5f       	subi	r16, 0xFE	; 254
    40e0:	1e 4f       	sbci	r17, 0xFE	; 254
    40e2:	f8 01       	movw	r30, r16
    40e4:	80 83       	st	Z, r24
                 if (xPumpStatus==PS_FINISH_TOTALIZER)
    40e6:	f5 e1       	ldi	r31, 0x15	; 21
    40e8:	ff 16       	cp	r15, r31
    40ea:	c1 f4       	brne	.+48     	; 0x411c <UpdateStandaloneStatus+0x9e>
				     strPumpStatus[iAddr]=GetPumpStatusLabel(CurrentPumpStatus[iAddr]);
    40ec:	c1 5a       	subi	r28, 0xA1	; 161
    40ee:	de 4f       	sbci	r29, 0xFE	; 254
    40f0:	88 81       	ld	r24, Y
    40f2:	10 c0       	rjmp	.+32     	; 0x4114 <UpdateStandaloneStatus+0x96>
    40f4:	fe 01       	movw	r30, r28
    40f6:	e1 5a       	subi	r30, 0xA1	; 161
    40f8:	fe 4f       	sbci	r31, 0xFE	; 254
		     }else if ((strPumpStatus[iAddr]==GetPumpStatusLabel(PS_PRINT_READY))||(xPumpStatus==PUMP_FEOT)||(xPumpStatus==PS_PRINTED)||(xPumpStatus==PS_TOTALIZER)){//P
			     if (xPumpStatus==PS_PRINTED){
    40fa:	81 e1       	ldi	r24, 0x11	; 17
    40fc:	f8 16       	cp	r15, r24
    40fe:	11 f4       	brne	.+4      	; 0x4104 <UpdateStandaloneStatus+0x86>
				 //New

				     //if (CurrentPumpStatus[iAddr]!=GetPumpStatusLabel(PS_PRINT_READY))
			             strPumpStatus[iAddr]=GetPumpStatusLabel(CurrentPumpStatus[iAddr]);
    4100:	80 81       	ld	r24, Z
    4102:	08 c0       	rjmp	.+16     	; 0x4114 <UpdateStandaloneStatus+0x96>
					 //    CurrentPumpStatus[iAddr]=PUMP_OFF;
					 //    strPumpStatus[iAddr]=GetPumpStatusLabel(PUMP_OFF);
					 //}

				  }
			     else CurrentPumpStatus[iAddr]=xPumpStatus;			 
    4104:	f0 82       	st	Z, r15
			 if (xPumpStatus==PUMP_FEOT){
    4106:	8b e0       	ldi	r24, 0x0B	; 11
    4108:	f8 16       	cp	r15, r24
    410a:	21 f0       	breq	.+8      	; 0x4114 <UpdateStandaloneStatus+0x96>
			     CurrentPumpStatus[iAddr]=xPumpStatus;
			     strPumpStatus[iAddr]=GetPumpStatusLabel(CurrentPumpStatus[iAddr]);
				 }
             else if (xPumpStatus==PS_TOTALIZER){
    410c:	f4 e1       	ldi	r31, 0x14	; 20
    410e:	ff 16       	cp	r15, r31
    4110:	29 f4       	brne	.+10     	; 0x411c <UpdateStandaloneStatus+0x9e>
			      strPumpStatus[iAddr]=GetPumpStatusLabel(xPumpStatus);
    4112:	84 e1       	ldi	r24, 0x14	; 20
    4114:	0e 94 42 14 	call	0x2884	; 0x2884 <GetPumpStatusLabel>
    4118:	f8 01       	movw	r30, r16
    411a:	80 83       	st	Z, r24
				 }
		 }		 	     
         strPumpStatus[16]=0;
    411c:	10 92 12 01 	sts	0x0112, r1
	     IsNewPumpStatus=True;		 
    4120:	81 e0       	ldi	r24, 0x01	; 1
    4122:	80 93 01 01 	sts	0x0101, r24
		 }		 
	 }
}
    4126:	df 91       	pop	r29
    4128:	cf 91       	pop	r28
    412a:	1f 91       	pop	r17
    412c:	0f 91       	pop	r16
    412e:	ff 90       	pop	r15
    4130:	08 95       	ret

00004132 <GetPumpID>:
     StrPosCopy(strSystemTime,sSecond,6,2);
	 sprintf_P(Result,PSTR("20%s/%s/%s %s:%s:%s"),sYear,sMonth,sDay,sHour,sMinute,sSecond);
}


char GetPumpID(char FIPAddr){//Find Stored PumpID in PumpMap
    4132:	1f 93       	push	r17
    4134:	df 93       	push	r29
    4136:	cf 93       	push	r28
    4138:	cd b7       	in	r28, 0x3d	; 61
    413a:	de b7       	in	r29, 0x3e	; 62
    413c:	28 97       	sbiw	r28, 0x08	; 8
    413e:	0f b6       	in	r0, 0x3f	; 63
    4140:	f8 94       	cli
    4142:	de bf       	out	0x3e, r29	; 62
    4144:	0f be       	out	0x3f, r0	; 63
    4146:	cd bf       	out	0x3d, r28	; 61
    4148:	18 2f       	mov	r17, r24
     char PPumpID[8],Result;     
     eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap,8);
    414a:	ce 01       	movw	r24, r28
    414c:	01 96       	adiw	r24, 0x01	; 1
    414e:	66 e4       	ldi	r22, 0x46	; 70
    4150:	70 e0       	ldi	r23, 0x00	; 0
    4152:	48 e0       	ldi	r20, 0x08	; 8
    4154:	50 e0       	ldi	r21, 0x00	; 0
    4156:	0e 94 30 ad 	call	0x15a60	; 0x15a60 <__eerd_block_m128>
	 Result=0;
	 if ((FIPAddr>0) && (FIPAddr<8)){
    415a:	81 2f       	mov	r24, r17
    415c:	81 50       	subi	r24, 0x01	; 1
    415e:	87 30       	cpi	r24, 0x07	; 7
    4160:	10 f0       	brcs	.+4      	; 0x4166 <GetPumpID+0x34>
    4162:	80 e0       	ldi	r24, 0x00	; 0
    4164:	04 c0       	rjmp	.+8      	; 0x416e <GetPumpID+0x3c>
	    Result=PPumpID[FIPAddr-1];
    4166:	fe 01       	movw	r30, r28
    4168:	e1 0f       	add	r30, r17
    416a:	f1 1d       	adc	r31, r1
    416c:	80 81       	ld	r24, Z
	 }
   return Result;
}
    416e:	28 96       	adiw	r28, 0x08	; 8
    4170:	0f b6       	in	r0, 0x3f	; 63
    4172:	f8 94       	cli
    4174:	de bf       	out	0x3e, r29	; 62
    4176:	0f be       	out	0x3f, r0	; 63
    4178:	cd bf       	out	0x3d, r28	; 61
    417a:	cf 91       	pop	r28
    417c:	df 91       	pop	r29
    417e:	1f 91       	pop	r17
    4180:	08 95       	ret

00004182 <GetTotalizerData>:
	 if (TType==TMONEY)eeprom_write_block((const void*)&rawValue,(void*)&(TotalMoney[TAddr][iPumpAddr][iGrade]), sizeof(rawValue));
}



void GetTotalizerData(char TType, char TAddr, char xPumpAddr, char xGradeAddr, char *strValue){// 0 1 1 "0000000"
    4182:	0f 93       	push	r16
    4184:	1f 93       	push	r17
    4186:	df 93       	push	r29
    4188:	cf 93       	push	r28
    418a:	00 d0       	rcall	.+0      	; 0x418c <GetTotalizerData+0xa>
    418c:	00 d0       	rcall	.+0      	; 0x418e <GetTotalizerData+0xc>
    418e:	00 d0       	rcall	.+0      	; 0x4190 <GetTotalizerData+0xe>
    4190:	cd b7       	in	r28, 0x3d	; 61
    4192:	de b7       	in	r29, 0x3e	; 62
    4194:	96 2f       	mov	r25, r22
     char rawValue[6],iPumpAddr,iGrade;

	 iPumpAddr=(xPumpAddr&0x0F);
    4196:	4f 70       	andi	r20, 0x0F	; 15
	 if ((xGradeAddr>=1)&&(xGradeAddr<=6))
    4198:	21 50       	subi	r18, 0x01	; 1
    419a:	26 30       	cpi	r18, 0x06	; 6
    419c:	08 f4       	brcc	.+2      	; 0x41a0 <GetTotalizerData+0x1e>
    419e:	52 2f       	mov	r21, r18
	     iGrade=xGradeAddr-1;
     
//TotalVolume[2][16][6][6];
//GetTotalizerData(TVOLUME,TOTALIZER_LAST,PumpNum,xGrade,strLastVolume);
	 if (TType==TVOLUME)eeprom_read_block((void*) &rawValue, (const void*) &(TotalVolume[TAddr][iPumpAddr][iGrade]), sizeof(rawValue));
    41a0:	88 23       	and	r24, r24
    41a2:	d9 f4       	brne	.+54     	; 0x41da <GetTotalizerData+0x58>
    41a4:	64 e2       	ldi	r22, 0x24	; 36
    41a6:	46 9f       	mul	r20, r22
    41a8:	b0 01       	movw	r22, r0
    41aa:	11 24       	eor	r1, r1
    41ac:	29 2f       	mov	r18, r25
    41ae:	30 e0       	ldi	r19, 0x00	; 0
    41b0:	80 e2       	ldi	r24, 0x20	; 32
    41b2:	91 e0       	ldi	r25, 0x01	; 1
    41b4:	fc 01       	movw	r30, r24
    41b6:	2e 9f       	mul	r18, r30
    41b8:	c0 01       	movw	r24, r0
    41ba:	2f 9f       	mul	r18, r31
    41bc:	90 0d       	add	r25, r0
    41be:	3e 9f       	mul	r19, r30
    41c0:	90 0d       	add	r25, r0
    41c2:	11 24       	eor	r1, r1
    41c4:	68 0f       	add	r22, r24
    41c6:	79 1f       	adc	r23, r25
    41c8:	86 e0       	ldi	r24, 0x06	; 6
    41ca:	58 9f       	mul	r21, r24
    41cc:	c0 01       	movw	r24, r0
    41ce:	11 24       	eor	r1, r1
    41d0:	68 0f       	add	r22, r24
    41d2:	79 1f       	adc	r23, r25
    41d4:	6c 53       	subi	r22, 0x3C	; 60
    41d6:	7c 4f       	sbci	r23, 0xFC	; 252
    41d8:	1c c0       	rjmp	.+56     	; 0x4212 <GetTotalizerData+0x90>
	 else 
	 if (TType==TMONEY)eeprom_read_block((void*) &rawValue, (const void*) &(TotalMoney[TAddr][iPumpAddr][iGrade]), sizeof(rawValue));
    41da:	81 30       	cpi	r24, 0x01	; 1
    41dc:	01 f5       	brne	.+64     	; 0x421e <GetTotalizerData+0x9c>
    41de:	64 e2       	ldi	r22, 0x24	; 36
    41e0:	46 9f       	mul	r20, r22
    41e2:	b0 01       	movw	r22, r0
    41e4:	11 24       	eor	r1, r1
    41e6:	29 2f       	mov	r18, r25
    41e8:	30 e0       	ldi	r19, 0x00	; 0
    41ea:	80 e2       	ldi	r24, 0x20	; 32
    41ec:	91 e0       	ldi	r25, 0x01	; 1
    41ee:	fc 01       	movw	r30, r24
    41f0:	2e 9f       	mul	r18, r30
    41f2:	c0 01       	movw	r24, r0
    41f4:	2f 9f       	mul	r18, r31
    41f6:	90 0d       	add	r25, r0
    41f8:	3e 9f       	mul	r19, r30
    41fa:	90 0d       	add	r25, r0
    41fc:	11 24       	eor	r1, r1
    41fe:	68 0f       	add	r22, r24
    4200:	79 1f       	adc	r23, r25
    4202:	86 e0       	ldi	r24, 0x06	; 6
    4204:	58 9f       	mul	r21, r24
    4206:	c0 01       	movw	r24, r0
    4208:	11 24       	eor	r1, r1
    420a:	68 0f       	add	r22, r24
    420c:	79 1f       	adc	r23, r25
    420e:	6c 5f       	subi	r22, 0xFC	; 252
    4210:	79 4f       	sbci	r23, 0xF9	; 249
    4212:	ce 01       	movw	r24, r28
    4214:	01 96       	adiw	r24, 0x01	; 1
    4216:	46 e0       	ldi	r20, 0x06	; 6
    4218:	50 e0       	ldi	r21, 0x00	; 0
    421a:	0e 94 30 ad 	call	0x15a60	; 0x15a60 <__eerd_block_m128>
	 //Convert RawData to String 
	 RawToStr(rawValue,strValue);
    421e:	ce 01       	movw	r24, r28
    4220:	01 96       	adiw	r24, 0x01	; 1
    4222:	b8 01       	movw	r22, r16
    4224:	0e 94 06 1a 	call	0x340c	; 0x340c <RawToStr>
}
    4228:	26 96       	adiw	r28, 0x06	; 6
    422a:	0f b6       	in	r0, 0x3f	; 63
    422c:	f8 94       	cli
    422e:	de bf       	out	0x3e, r29	; 62
    4230:	0f be       	out	0x3f, r0	; 63
    4232:	cd bf       	out	0x3d, r28	; 61
    4234:	cf 91       	pop	r28
    4236:	df 91       	pop	r29
    4238:	1f 91       	pop	r17
    423a:	0f 91       	pop	r16
    423c:	08 95       	ret

0000423e <SaveToEEPROM>:
     return Result;
}



char SaveToEEPROM(char *Src,char *Dest,unsigned int Length){
    423e:	ef 92       	push	r14
    4240:	ff 92       	push	r15
    4242:	0f 93       	push	r16
    4244:	1f 93       	push	r17
    4246:	df 93       	push	r29
    4248:	cf 93       	push	r28
    424a:	cd b7       	in	r28, 0x3d	; 61
    424c:	de b7       	in	r29, 0x3e	; 62
    424e:	ac 97       	sbiw	r28, 0x2c	; 44
    4250:	0f b6       	in	r0, 0x3f	; 63
    4252:	f8 94       	cli
    4254:	de bf       	out	0x3e, r29	; 62
    4256:	0f be       	out	0x3f, r0	; 63
    4258:	cd bf       	out	0x3d, r28	; 61
    425a:	9a a7       	std	Y+42, r25	; 0x2a
    425c:	89 a7       	std	Y+41, r24	; 0x29
    425e:	7c a7       	std	Y+44, r23	; 0x2c
    4260:	6b a7       	std	Y+43, r22	; 0x2b
    4262:	7a 01       	movw	r14, r20
     char strCompare[40];
	 //Read Previous Data
     eeprom_read_block((void*)&Dest,(const void*)&strCompare, Length);
    4264:	8e 01       	movw	r16, r28
    4266:	05 5d       	subi	r16, 0xD5	; 213
    4268:	1f 4f       	sbci	r17, 0xFF	; 255
    426a:	c8 01       	movw	r24, r16
    426c:	be 01       	movw	r22, r28
    426e:	6f 5f       	subi	r22, 0xFF	; 255
    4270:	7f 4f       	sbci	r23, 0xFF	; 255
    4272:	0e 94 30 ad 	call	0x15a60	; 0x15a60 <__eerd_block_m128>
     //if 
     eeprom_write_block((const void*)&Src,(void*)&Dest, Length);
    4276:	ce 01       	movw	r24, r28
    4278:	89 96       	adiw	r24, 0x29	; 41
    427a:	b8 01       	movw	r22, r16
    427c:	a7 01       	movw	r20, r14
    427e:	0e 94 48 ad 	call	0x15a90	; 0x15a90 <__eewr_block_m128>
}
    4282:	ac 96       	adiw	r28, 0x2c	; 44
    4284:	0f b6       	in	r0, 0x3f	; 63
    4286:	f8 94       	cli
    4288:	de bf       	out	0x3e, r29	; 62
    428a:	0f be       	out	0x3f, r0	; 63
    428c:	cd bf       	out	0x3d, r28	; 61
    428e:	cf 91       	pop	r28
    4290:	df 91       	pop	r29
    4292:	1f 91       	pop	r17
    4294:	0f 91       	pop	r16
    4296:	ff 90       	pop	r15
    4298:	ef 90       	pop	r14
    429a:	08 95       	ret

0000429c <SelectMark>:
	      break;
	 }
    return Result;
}

char SelectMark(char InMark){
    429c:	df 92       	push	r13
    429e:	ef 92       	push	r14
    42a0:	ff 92       	push	r15
    42a2:	0f 93       	push	r16
    42a4:	1f 93       	push	r17
    42a6:	df 93       	push	r29
    42a8:	cf 93       	push	r28
    42aa:	00 d0       	rcall	.+0      	; 0x42ac <SelectMark+0x10>
    42ac:	00 d0       	rcall	.+0      	; 0x42ae <SelectMark+0x12>
    42ae:	0f 92       	push	r0
    42b0:	cd b7       	in	r28, 0x3d	; 61
    42b2:	de b7       	in	r29, 0x3e	; 62
    42b4:	d8 2e       	mov	r13, r24
char i,Result,PMark[5],Length;
     eeprom_read_block((void*)&PMark,(const void*)&DefMarkMap, sizeof(DefMarkMap));
    42b6:	8e 01       	movw	r16, r28
    42b8:	0f 5f       	subi	r16, 0xFF	; 255
    42ba:	1f 4f       	sbci	r17, 0xFF	; 255
    42bc:	c8 01       	movw	r24, r16
    42be:	61 e4       	ldi	r22, 0x41	; 65
    42c0:	70 e0       	ldi	r23, 0x00	; 0
    42c2:	45 e0       	ldi	r20, 0x05	; 5
    42c4:	50 e0       	ldi	r21, 0x00	; 0
    42c6:	0e 94 30 ad 	call	0x15a60	; 0x15a60 <__eerd_block_m128>
    42ca:	ed 2d       	mov	r30, r13
    42cc:	21 e0       	ldi	r18, 0x01	; 1
    42ce:	30 e0       	ldi	r19, 0x00	; 0
	 Length=sizeof(DefMarkMap);
	 Result=InMark;
     for(i=0;i<Length;i++){
	     if (InMark==PMark[i])
		     Result=PMark[(i+1)%Length];
    42d0:	78 01       	movw	r14, r16
char i,Result,PMark[5],Length;
     eeprom_read_block((void*)&PMark,(const void*)&DefMarkMap, sizeof(DefMarkMap));
	 Length=sizeof(DefMarkMap);
	 Result=InMark;
     for(i=0;i<Length;i++){
	     if (InMark==PMark[i])
    42d2:	d8 01       	movw	r26, r16
    42d4:	8c 91       	ld	r24, X
    42d6:	d8 16       	cp	r13, r24
    42d8:	49 f4       	brne	.+18     	; 0x42ec <SelectMark+0x50>
		     Result=PMark[(i+1)%Length];
    42da:	c9 01       	movw	r24, r18
    42dc:	65 e0       	ldi	r22, 0x05	; 5
    42de:	70 e0       	ldi	r23, 0x00	; 0
    42e0:	0e 94 8e aa 	call	0x1551c	; 0x1551c <__divmodhi4>
    42e4:	f7 01       	movw	r30, r14
    42e6:	e8 0f       	add	r30, r24
    42e8:	f9 1f       	adc	r31, r25
    42ea:	e0 81       	ld	r30, Z
    42ec:	0f 5f       	subi	r16, 0xFF	; 255
    42ee:	1f 4f       	sbci	r17, 0xFF	; 255
    42f0:	2f 5f       	subi	r18, 0xFF	; 255
    42f2:	3f 4f       	sbci	r19, 0xFF	; 255
char SelectMark(char InMark){
char i,Result,PMark[5],Length;
     eeprom_read_block((void*)&PMark,(const void*)&DefMarkMap, sizeof(DefMarkMap));
	 Length=sizeof(DefMarkMap);
	 Result=InMark;
     for(i=0;i<Length;i++){
    42f4:	26 30       	cpi	r18, 0x06	; 6
    42f6:	31 05       	cpc	r19, r1
    42f8:	61 f7       	brne	.-40     	; 0x42d2 <SelectMark+0x36>
	     if (InMark==PMark[i])
		     Result=PMark[(i+1)%Length];
	 }
     return Result;
}
    42fa:	8e 2f       	mov	r24, r30
    42fc:	0f 90       	pop	r0
    42fe:	0f 90       	pop	r0
    4300:	0f 90       	pop	r0
    4302:	0f 90       	pop	r0
    4304:	0f 90       	pop	r0
    4306:	cf 91       	pop	r28
    4308:	df 91       	pop	r29
    430a:	1f 91       	pop	r17
    430c:	0f 91       	pop	r16
    430e:	ff 90       	pop	r15
    4310:	ef 90       	pop	r14
    4312:	df 90       	pop	r13
    4314:	08 95       	ret

00004316 <SumChecksum>:
	Geniflow[1]=Geniflow[0];
	Geniflow[0]=dataIn;
*/
}

char SumChecksum(char *strChecked){
    4316:	ac 01       	movw	r20, r24
     unsigned int SigmaSum=0;
	 char i,Result;
	 for(i=0;i<strlen(strChecked);i++){
    4318:	dc 01       	movw	r26, r24
    431a:	0d 90       	ld	r0, X+
    431c:	00 20       	and	r0, r0
    431e:	e9 f7       	brne	.-6      	; 0x431a <SumChecksum+0x4>
    4320:	11 97       	sbiw	r26, 0x01	; 1
    4322:	a8 1b       	sub	r26, r24
    4324:	b9 0b       	sbc	r27, r25
    4326:	20 e0       	ldi	r18, 0x00	; 0
    4328:	30 e0       	ldi	r19, 0x00	; 0
    432a:	90 e0       	ldi	r25, 0x00	; 0
    432c:	06 c0       	rjmp	.+12     	; 0x433a <SumChecksum+0x24>
	     SigmaSum=SigmaSum+strChecked[i];
    432e:	e4 0f       	add	r30, r20
    4330:	f5 1f       	adc	r31, r21
    4332:	80 81       	ld	r24, Z
    4334:	28 0f       	add	r18, r24
    4336:	31 1d       	adc	r19, r1
}

char SumChecksum(char *strChecked){
     unsigned int SigmaSum=0;
	 char i,Result;
	 for(i=0;i<strlen(strChecked);i++){
    4338:	9f 5f       	subi	r25, 0xFF	; 255
    433a:	e9 2f       	mov	r30, r25
    433c:	f0 e0       	ldi	r31, 0x00	; 0
    433e:	ea 17       	cp	r30, r26
    4340:	fb 07       	cpc	r31, r27
    4342:	a8 f3       	brcs	.-22     	; 0x432e <SumChecksum+0x18>
	     SigmaSum=SigmaSum+strChecked[i];
	 }
	 Result=(SigmaSum%255);
    4344:	c9 01       	movw	r24, r18
    4346:	6f ef       	ldi	r22, 0xFF	; 255
    4348:	70 e0       	ldi	r23, 0x00	; 0
    434a:	0e 94 7a aa 	call	0x154f4	; 0x154f4 <__udivmodhi4>
	 if (Result==0)Result=255;
    434e:	88 23       	and	r24, r24
    4350:	09 f4       	brne	.+2      	; 0x4354 <SumChecksum+0x3e>
    4352:	8f ef       	ldi	r24, 0xFF	; 255
   return Result;
}
    4354:	08 95       	ret

00004356 <IsGeniusCommand>:
	 sprintf_P(strSend,PSTR("%s"),sCSum);
	 uart_print(1,1,strSend);
*/
}

char IsGeniusCommand(char GCommand){
    4356:	ff 92       	push	r15
    4358:	0f 93       	push	r16
    435a:	1f 93       	push	r17
    435c:	df 93       	push	r29
    435e:	cf 93       	push	r28
    4360:	cd b7       	in	r28, 0x3d	; 61
    4362:	de b7       	in	r29, 0x3e	; 62
    4364:	2a 97       	sbiw	r28, 0x0a	; 10
    4366:	0f b6       	in	r0, 0x3f	; 63
    4368:	f8 94       	cli
    436a:	de bf       	out	0x3e, r29	; 62
    436c:	0f be       	out	0x3f, r0	; 63
    436e:	cd bf       	out	0x3d, r28	; 61
    4370:	f8 2e       	mov	r15, r24
     char i,Result,CommandList[10];
     Result=False;
	 sprintf_P(CommandList,PSTR("CTSRP"));
    4372:	00 d0       	rcall	.+0      	; 0x4374 <IsGeniusCommand+0x1e>
    4374:	00 d0       	rcall	.+0      	; 0x4376 <IsGeniusCommand+0x20>
    4376:	8e 01       	movw	r16, r28
    4378:	0f 5f       	subi	r16, 0xFF	; 255
    437a:	1f 4f       	sbci	r17, 0xFF	; 255
    437c:	ed b7       	in	r30, 0x3d	; 61
    437e:	fe b7       	in	r31, 0x3e	; 62
    4380:	12 83       	std	Z+2, r17	; 0x02
    4382:	01 83       	std	Z+1, r16	; 0x01
    4384:	87 e5       	ldi	r24, 0x57	; 87
    4386:	95 e0       	ldi	r25, 0x05	; 5
    4388:	94 83       	std	Z+4, r25	; 0x04
    438a:	83 83       	std	Z+3, r24	; 0x03
    438c:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	 for(i=0;i<strlen(CommandList);i++){
    4390:	d8 01       	movw	r26, r16
    4392:	0d 90       	ld	r0, X+
    4394:	00 20       	and	r0, r0
    4396:	e9 f7       	brne	.-6      	; 0x4392 <IsGeniusCommand+0x3c>
    4398:	11 97       	sbiw	r26, 0x01	; 1
    439a:	a0 1b       	sub	r26, r16
    439c:	b1 0b       	sbc	r27, r17
    439e:	90 e0       	ldi	r25, 0x00	; 0
    43a0:	0f 90       	pop	r0
    43a2:	0f 90       	pop	r0
    43a4:	0f 90       	pop	r0
    43a6:	0f 90       	pop	r0
	    if (CommandList[i]==GCommand){
    43a8:	98 01       	movw	r18, r16
    43aa:	08 c0       	rjmp	.+16     	; 0x43bc <IsGeniusCommand+0x66>
    43ac:	e2 0f       	add	r30, r18
    43ae:	f3 1f       	adc	r31, r19
    43b0:	80 81       	ld	r24, Z
    43b2:	8f 15       	cp	r24, r15
    43b4:	11 f4       	brne	.+4      	; 0x43ba <IsGeniusCommand+0x64>
    43b6:	81 e0       	ldi	r24, 0x01	; 1
    43b8:	07 c0       	rjmp	.+14     	; 0x43c8 <IsGeniusCommand+0x72>

char IsGeniusCommand(char GCommand){
     char i,Result,CommandList[10];
     Result=False;
	 sprintf_P(CommandList,PSTR("CTSRP"));
	 for(i=0;i<strlen(CommandList);i++){
    43ba:	9f 5f       	subi	r25, 0xFF	; 255
    43bc:	e9 2f       	mov	r30, r25
    43be:	f0 e0       	ldi	r31, 0x00	; 0
    43c0:	ea 17       	cp	r30, r26
    43c2:	fb 07       	cpc	r31, r27
    43c4:	98 f3       	brcs	.-26     	; 0x43ac <IsGeniusCommand+0x56>
    43c6:	80 e0       	ldi	r24, 0x00	; 0
		    Result=True;
			break;
			}
	 }
   return Result;	 
}
    43c8:	2a 96       	adiw	r28, 0x0a	; 10
    43ca:	0f b6       	in	r0, 0x3f	; 63
    43cc:	f8 94       	cli
    43ce:	de bf       	out	0x3e, r29	; 62
    43d0:	0f be       	out	0x3f, r0	; 63
    43d2:	cd bf       	out	0x3d, r28	; 61
    43d4:	cf 91       	pop	r28
    43d6:	df 91       	pop	r29
    43d8:	1f 91       	pop	r17
    43da:	0f 91       	pop	r16
    43dc:	ff 90       	pop	r15
    43de:	08 95       	ret

000043e0 <Pos>:
  */
}
		

//Genius Protocol Version:1.0 AKR
int Pos(char *Substr, char *String){//1245:4645
    43e0:	0f 93       	push	r16
    43e2:	1f 93       	push	r17
    43e4:	cf 93       	push	r28
    43e6:	df 93       	push	r29
    43e8:	ac 01       	movw	r20, r24
    char i,j,CountMatch;
	char Length,subLen,PosFound;

	Length=strlen(String);
    43ea:	fb 01       	movw	r30, r22
    43ec:	01 90       	ld	r0, Z+
    43ee:	00 20       	and	r0, r0
    43f0:	e9 f7       	brne	.-6      	; 0x43ec <Pos+0xc>
    43f2:	31 97       	sbiw	r30, 0x01	; 1
    43f4:	1e 2f       	mov	r17, r30
    43f6:	16 1b       	sub	r17, r22
	subLen=strlen(Substr);
    43f8:	fc 01       	movw	r30, r24
    43fa:	01 90       	ld	r0, Z+
    43fc:	00 20       	and	r0, r0
    43fe:	e9 f7       	brne	.-6      	; 0x43fa <Pos+0x1a>
    4400:	31 97       	sbiw	r30, 0x01	; 1
    4402:	0e 2f       	mov	r16, r30
    4404:	08 1b       	sub	r16, r24
    4406:	db 01       	movw	r26, r22
    4408:	60 e0       	ldi	r22, 0x00	; 0
    440a:	18 c0       	rjmp	.+48     	; 0x443c <Pos+0x5c>
	PosFound=Length;
	for(i=0;i<Length;i++){
	    if (String[i]==Substr[0]){
    440c:	9c 91       	ld	r25, X
    440e:	fa 01       	movw	r30, r20
    4410:	80 81       	ld	r24, Z
    4412:	98 17       	cp	r25, r24
    4414:	89 f4       	brne	.+34     	; 0x4438 <Pos+0x58>
    4416:	ed 01       	movw	r28, r26
    4418:	20 e0       	ldi	r18, 0x00	; 0
    441a:	30 e0       	ldi	r19, 0x00	; 0
    441c:	09 c0       	rjmp	.+18     	; 0x4430 <Pos+0x50>
		    CountMatch=0;
			for(j=0;j<subLen;j++){
			    //notFound
			    if (Substr[j]==String[i+j]){
    441e:	fa 01       	movw	r30, r20
    4420:	e2 0f       	add	r30, r18
    4422:	f3 1f       	adc	r31, r19
    4424:	90 81       	ld	r25, Z
    4426:	89 91       	ld	r24, Y+
    4428:	2f 5f       	subi	r18, 0xFF	; 255
    442a:	3f 4f       	sbci	r19, 0xFF	; 255
    442c:	98 17       	cp	r25, r24
    442e:	21 f4       	brne	.+8      	; 0x4438 <Pos+0x58>
	subLen=strlen(Substr);
	PosFound=Length;
	for(i=0;i<Length;i++){
	    if (String[i]==Substr[0]){
		    CountMatch=0;
			for(j=0;j<subLen;j++){
    4430:	20 17       	cp	r18, r16
    4432:	a8 f3       	brcs	.-22     	; 0x441e <Pos+0x3e>
    4434:	86 2f       	mov	r24, r22
    4436:	05 c0       	rjmp	.+10     	; 0x4442 <Pos+0x62>
	char Length,subLen,PosFound;

	Length=strlen(String);
	subLen=strlen(Substr);
	PosFound=Length;
	for(i=0;i<Length;i++){
    4438:	6f 5f       	subi	r22, 0xFF	; 255
    443a:	11 96       	adiw	r26, 0x01	; 1
    443c:	61 17       	cp	r22, r17
    443e:	30 f3       	brcs	.-52     	; 0x440c <Pos+0x2c>
    4440:	81 2f       	mov	r24, r17
			    break;  
			}
		}
	}
  return  PosFound;
}
    4442:	90 e0       	ldi	r25, 0x00	; 0
    4444:	df 91       	pop	r29
    4446:	cf 91       	pop	r28
    4448:	1f 91       	pop	r17
    444a:	0f 91       	pop	r16
    444c:	08 95       	ret

0000444e <CreateReport>:
//		  }
//	 }
     *Pos=iPos;
}

void CreateReport(char *strData, char *strPrnBuffer, unsigned int *Pos){
    444e:	7f 92       	push	r7
    4450:	8f 92       	push	r8
    4452:	9f 92       	push	r9
    4454:	af 92       	push	r10
    4456:	bf 92       	push	r11
    4458:	cf 92       	push	r12
    445a:	df 92       	push	r13
    445c:	ef 92       	push	r14
    445e:	ff 92       	push	r15
    4460:	0f 93       	push	r16
    4462:	1f 93       	push	r17
    4464:	cf 93       	push	r28
    4466:	df 93       	push	r29
    4468:	5c 01       	movw	r10, r24
    446a:	6b 01       	movw	r12, r22
    446c:	4a 01       	movw	r8, r20
     unsigned int iPos,PosResult,Length;
	 char i,strSend[20];
	 Length=strlen(strData);
    446e:	ec 01       	movw	r28, r24
    4470:	09 90       	ld	r0, Y+
    4472:	00 20       	and	r0, r0
    4474:	e9 f7       	brne	.-6      	; 0x4470 <CreateReport+0x22>
    4476:	21 97       	sbiw	r28, 0x01	; 1
    4478:	c8 1b       	sub	r28, r24
    447a:	d9 0b       	sbc	r29, r25
    447c:	cb 32       	cpi	r28, 0x2B	; 43
    447e:	d1 05       	cpc	r29, r1
    4480:	10 f0       	brcs	.+4      	; 0x4486 <CreateReport+0x38>
    4482:	ca e2       	ldi	r28, 0x2A	; 42
    4484:	d0 e0       	ldi	r29, 0x00	; 0
	 if (Length>BORDER_LENGTH)Length=BORDER_LENGTH;
     
	 iPos=*Pos;
    4486:	f4 01       	movw	r30, r8
    4488:	00 81       	ld	r16, Z
    448a:	11 81       	ldd	r17, Z+1	; 0x01
	 strPrnBuffer[iPos]=GetBorderValue(btVertical);
    448c:	76 01       	movw	r14, r12
    448e:	e0 0e       	add	r14, r16
    4490:	f1 1e       	adc	r15, r17
    4492:	8a e0       	ldi	r24, 0x0A	; 10
    4494:	0e 94 5a 1a 	call	0x34b4	; 0x34b4 <GetBorderValue>
    4498:	78 2e       	mov	r7, r24
    449a:	f7 01       	movw	r30, r14
    449c:	80 83       	st	Z, r24
     iPos++;
    449e:	98 01       	movw	r18, r16
    44a0:	2f 5f       	subi	r18, 0xFF	; 255
    44a2:	3f 4f       	sbci	r19, 0xFF	; 255
    44a4:	d7 01       	movw	r26, r14
    44a6:	90 e0       	ldi	r25, 0x00	; 0
    44a8:	07 c0       	rjmp	.+14     	; 0x44b8 <CreateReport+0x6a>

	 for (i=0;i<Length;i++){	      
	      strPrnBuffer[iPos]=strData[i];	      	 
    44aa:	ea 0d       	add	r30, r10
    44ac:	fb 1d       	adc	r31, r11
    44ae:	80 81       	ld	r24, Z
    44b0:	8c 93       	st	X, r24
		  iPos++;
    44b2:	2f 5f       	subi	r18, 0xFF	; 255
    44b4:	3f 4f       	sbci	r19, 0xFF	; 255
     
	 iPos=*Pos;
	 strPrnBuffer[iPos]=GetBorderValue(btVertical);
     iPos++;

	 for (i=0;i<Length;i++){	      
    44b6:	9f 5f       	subi	r25, 0xFF	; 255
    44b8:	e9 2f       	mov	r30, r25
    44ba:	f0 e0       	ldi	r31, 0x00	; 0
    44bc:	11 96       	adiw	r26, 0x01	; 1
    44be:	ec 17       	cp	r30, r28
    44c0:	fd 07       	cpc	r31, r29
    44c2:	98 f3       	brcs	.-26     	; 0x44aa <CreateReport+0x5c>
    44c4:	62 2f       	mov	r22, r18
	      strPrnBuffer[iPos]=strData[i];	      	 
		  iPos++;
	 }
	 if (Length<BORDER_LENGTH){
    44c6:	ca 32       	cpi	r28, 0x2A	; 42
    44c8:	d1 05       	cpc	r29, r1
    44ca:	91 f0       	breq	.+36     	; 0x44f0 <CreateReport+0xa2>
    44cc:	f6 01       	movw	r30, r12
    44ce:	e2 0f       	add	r30, r18
    44d0:	f3 1f       	adc	r31, r19
	     for (i=0;i<(BORDER_LENGTH-Length);i++){	      
    44d2:	4a e2       	ldi	r20, 0x2A	; 42
    44d4:	50 e0       	ldi	r21, 0x00	; 0
    44d6:	4c 1b       	sub	r20, r28
    44d8:	5d 0b       	sbc	r21, r29
	          strPrnBuffer[iPos]=' ';
    44da:	70 e2       	ldi	r23, 0x20	; 32
    44dc:	03 c0       	rjmp	.+6      	; 0x44e4 <CreateReport+0x96>
    44de:	71 93       	st	Z+, r23
		      iPos++;
    44e0:	2f 5f       	subi	r18, 0xFF	; 255
    44e2:	3f 4f       	sbci	r19, 0xFF	; 255
	 for (i=0;i<Length;i++){	      
	      strPrnBuffer[iPos]=strData[i];	      	 
		  iPos++;
	 }
	 if (Length<BORDER_LENGTH){
	     for (i=0;i<(BORDER_LENGTH-Length);i++){	      
    44e4:	82 2f       	mov	r24, r18
    44e6:	86 1b       	sub	r24, r22
    44e8:	90 e0       	ldi	r25, 0x00	; 0
    44ea:	84 17       	cp	r24, r20
    44ec:	95 07       	cpc	r25, r21
    44ee:	b8 f3       	brcs	.-18     	; 0x44de <CreateReport+0x90>
	          strPrnBuffer[iPos]=' ';
		      iPos++;
	     }	    
	 }
	 strPrnBuffer[iPos]=GetBorderValue(btVertical);
    44f0:	f6 01       	movw	r30, r12
    44f2:	e2 0f       	add	r30, r18
    44f4:	f3 1f       	adc	r31, r19
    44f6:	70 82       	st	Z, r7
     iPos++;
    44f8:	c9 01       	movw	r24, r18
    44fa:	01 96       	adiw	r24, 0x01	; 1
     //PosResult=*Pos+Length;
	 strPrnBuffer[iPos]=0x0D; 
    44fc:	c8 0e       	add	r12, r24
    44fe:	d9 1e       	adc	r13, r25
    4500:	2d e0       	ldi	r18, 0x0D	; 13
    4502:	f6 01       	movw	r30, r12
    4504:	20 83       	st	Z, r18
	 iPos++;

   //*Pos=PosResult+1;
   *Pos=iPos;
    4506:	01 96       	adiw	r24, 0x01	; 1
    4508:	f4 01       	movw	r30, r8
    450a:	91 83       	std	Z+1, r25	; 0x01
    450c:	80 83       	st	Z, r24
    //sprintf_P(strSend,PSTR("Pos:%d"),*Pos);
	//uart_print(0,1,strSend);
}
    450e:	df 91       	pop	r29
    4510:	cf 91       	pop	r28
    4512:	1f 91       	pop	r17
    4514:	0f 91       	pop	r16
    4516:	ff 90       	pop	r15
    4518:	ef 90       	pop	r14
    451a:	df 90       	pop	r13
    451c:	cf 90       	pop	r12
    451e:	bf 90       	pop	r11
    4520:	af 90       	pop	r10
    4522:	9f 90       	pop	r9
    4524:	8f 90       	pop	r8
    4526:	7f 90       	pop	r7
    4528:	08 95       	ret

0000452a <AddList>:

//AddListTotal(xGrade,strRef1);
void ClearList(char *strList){
     FillChar(strList,strlen(strList),0);
}
void AddList(char GradeId, char *strList){
    452a:	38 2f       	mov	r19, r24
    452c:	ab 01       	movw	r20, r22
     char i,iPos,Length,IsFound=False;	 
	 if ((GradeId>=1)&&((GradeId<=6))){
    452e:	81 50       	subi	r24, 0x01	; 1
    4530:	86 30       	cpi	r24, 0x06	; 6
    4532:	68 f5       	brcc	.+90     	; 0x458e <AddList+0x64>
		 iPos=0;
		 IsFound=False;	
		 Length=strlen(strList);
    4534:	fb 01       	movw	r30, r22
    4536:	01 90       	ld	r0, Z+
    4538:	00 20       	and	r0, r0
    453a:	e9 f7       	brne	.-6      	; 0x4536 <AddList+0xc>
    453c:	31 97       	sbiw	r30, 0x01	; 1
    453e:	e6 1b       	sub	r30, r22
    4540:	f7 0b       	sbc	r31, r23
    4542:	7e 2f       	mov	r23, r30
	     if (Length>0){
    4544:	ee 23       	and	r30, r30
    4546:	11 f4       	brne	.+4      	; 0x454c <AddList+0x22>
    4548:	20 e0       	ldi	r18, 0x00	; 0
    454a:	14 c0       	rjmp	.+40     	; 0x4574 <AddList+0x4a>
    454c:	80 e0       	ldi	r24, 0x00	; 0
    454e:	90 e0       	ldi	r25, 0x00	; 0
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
	    Result='0'+X;
    4550:	63 2f       	mov	r22, r19
    4552:	60 5d       	subi	r22, 0xD0	; 208
		 Length=strlen(strList);
	     if (Length>0){
			 for (i=0;i<Length;i++){//"123"
			      //uart(1,1,strList[i]);
			      iPos++;
			      if (strList[i]==Chr(GradeId)){
    4554:	fa 01       	movw	r30, r20
    4556:	e8 0f       	add	r30, r24
    4558:	f9 1f       	adc	r31, r25
    455a:	e0 81       	ld	r30, Z
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
    455c:	3a 30       	cpi	r19, 0x0A	; 10
    455e:	10 f0       	brcs	.+4      	; 0x4564 <AddList+0x3a>
    4560:	20 e3       	ldi	r18, 0x30	; 48
    4562:	01 c0       	rjmp	.+2      	; 0x4566 <AddList+0x3c>
	    Result='0'+X;
    4564:	26 2f       	mov	r18, r22
		 Length=strlen(strList);
	     if (Length>0){
			 for (i=0;i<Length;i++){//"123"
			      //uart(1,1,strList[i]);
			      iPos++;
			      if (strList[i]==Chr(GradeId)){
    4566:	e2 17       	cp	r30, r18
    4568:	91 f0       	breq	.+36     	; 0x458e <AddList+0x64>
    456a:	28 2f       	mov	r18, r24
    456c:	2f 5f       	subi	r18, 0xFF	; 255
    456e:	01 96       	adiw	r24, 0x01	; 1
	 if ((GradeId>=1)&&((GradeId<=6))){
		 iPos=0;
		 IsFound=False;	
		 Length=strlen(strList);
	     if (Length>0){
			 for (i=0;i<Length;i++){//"123"
    4570:	87 17       	cp	r24, r23
    4572:	80 f3       	brcs	.-32     	; 0x4554 <AddList+0x2a>
					  break;
				  }
			 }
	     }
		 if (IsFound==False){
		     strList[iPos]=Chr(GradeId);
    4574:	62 2f       	mov	r22, r18
    4576:	70 e0       	ldi	r23, 0x00	; 0
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
    4578:	3a 30       	cpi	r19, 0x0A	; 10
    457a:	10 f0       	brcs	.+4      	; 0x4580 <AddList+0x56>
    457c:	80 e3       	ldi	r24, 0x30	; 48
    457e:	02 c0       	rjmp	.+4      	; 0x4584 <AddList+0x5a>
	    Result='0'+X;
    4580:	83 2f       	mov	r24, r19
    4582:	80 5d       	subi	r24, 0xD0	; 208
					  break;
				  }
			 }
	     }
		 if (IsFound==False){
		     strList[iPos]=Chr(GradeId);
    4584:	fa 01       	movw	r30, r20
    4586:	e6 0f       	add	r30, r22
    4588:	f7 1f       	adc	r31, r23
    458a:	80 83       	st	Z, r24
		     strList[iPos+1]=0;
    458c:	11 82       	std	Z+1, r1	; 0x01
    458e:	08 95       	ret

00004590 <ClearList>:
	 AddSpaceLag(strProductName,10);
}

//AddListTotal(xGrade,strRef1);
void ClearList(char *strList){
     FillChar(strList,strlen(strList),0);
    4590:	dc 01       	movw	r26, r24
    4592:	0d 90       	ld	r0, X+
    4594:	00 20       	and	r0, r0
    4596:	e9 f7       	brne	.-6      	; 0x4592 <ClearList+0x2>
    4598:	11 97       	sbiw	r26, 0x01	; 1
    459a:	a8 1b       	sub	r26, r24
    459c:	b9 0b       	sbc	r27, r25
    459e:	20 e0       	ldi	r18, 0x00	; 0
    45a0:	30 e0       	ldi	r19, 0x00	; 0
    45a2:	06 c0       	rjmp	.+12     	; 0x45b0 <ClearList+0x20>
}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
	     strMemory[i]=data;
    45a4:	fc 01       	movw	r30, r24
    45a6:	e2 0f       	add	r30, r18
    45a8:	f3 1f       	adc	r31, r19
    45aa:	10 82       	st	Z, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    45ac:	2f 5f       	subi	r18, 0xFF	; 255
    45ae:	3f 4f       	sbci	r19, 0xFF	; 255
    45b0:	2a 17       	cp	r18, r26
    45b2:	3b 07       	cpc	r19, r27
    45b4:	b8 f3       	brcs	.-18     	; 0x45a4 <ClearList+0x14>
}

//AddListTotal(xGrade,strRef1);
void ClearList(char *strList){
     FillChar(strList,strlen(strList),0);
}
    45b6:	08 95       	ret

000045b8 <CalcSegmen>:
		 */
		 CalcMultiply(strA,strB,strC);
	 }
}

void CalcSegmen(char *strMain, char cNum, char *strResult){
    45b8:	6f 92       	push	r6
    45ba:	7f 92       	push	r7
    45bc:	8f 92       	push	r8
    45be:	9f 92       	push	r9
    45c0:	bf 92       	push	r11
    45c2:	cf 92       	push	r12
    45c4:	df 92       	push	r13
    45c6:	ef 92       	push	r14
    45c8:	ff 92       	push	r15
    45ca:	0f 93       	push	r16
    45cc:	1f 93       	push	r17
    45ce:	df 93       	push	r29
    45d0:	cf 93       	push	r28
    45d2:	cd b7       	in	r28, 0x3d	; 61
    45d4:	de b7       	in	r29, 0x3e	; 62
    45d6:	64 97       	sbiw	r28, 0x14	; 20
    45d8:	0f b6       	in	r0, 0x3f	; 63
    45da:	f8 94       	cli
    45dc:	de bf       	out	0x3e, r29	; 62
    45de:	0f be       	out	0x3f, r0	; 63
    45e0:	cd bf       	out	0x3d, r28	; 61
    45e2:	7c 01       	movw	r14, r24
    45e4:	6a 01       	movw	r12, r20
    45e6:	bb 24       	eor	r11, r11
    45e8:	30 e0       	ldi	r19, 0x00	; 0

	 xResNext=0;
     xRes=0;

	 for(i=0;i<strlen(strMain);i++){           
         xCalc=(strMain[strlen(strMain)-1-i]-'0')*(cNum-'0')+xResNext;//Hasil
    45ea:	06 2f       	mov	r16, r22
    45ec:	10 e0       	ldi	r17, 0x00	; 0
    45ee:	00 53       	subi	r16, 0x30	; 48
    45f0:	10 40       	sbci	r17, 0x00	; 0
		 xRes=xCalc%10;
		 xResNext=xCalc/10;
	     tmpResult[i]='0'+xRes;	 
    45f2:	3e 01       	movw	r6, r28
    45f4:	08 94       	sec
    45f6:	61 1c       	adc	r6, r1
    45f8:	71 1c       	adc	r7, r1
		 tmpResult[i+1]=0;
    45fa:	62 e0       	ldi	r22, 0x02	; 2
    45fc:	86 2e       	mov	r8, r22
    45fe:	91 2c       	mov	r9, r1
    4600:	8c 0e       	add	r8, r28
    4602:	9d 1e       	adc	r9, r29
    4604:	24 c0       	rjmp	.+72     	; 0x464e <CalcSegmen+0x96>

	 xResNext=0;
     xRes=0;

	 for(i=0;i<strlen(strMain);i++){           
         xCalc=(strMain[strlen(strMain)-1-i]-'0')*(cNum-'0')+xResNext;//Hasil
    4606:	11 97       	sbiw	r26, 0x01	; 1
    4608:	a4 1b       	sub	r26, r20
    460a:	b5 0b       	sbc	r27, r21
    460c:	ae 0d       	add	r26, r14
    460e:	bf 1d       	adc	r27, r15
    4610:	8c 91       	ld	r24, X
    4612:	90 e0       	ldi	r25, 0x00	; 0
    4614:	c0 97       	sbiw	r24, 0x30	; 48
    4616:	bc 01       	movw	r22, r24
    4618:	60 9f       	mul	r22, r16
    461a:	c0 01       	movw	r24, r0
    461c:	61 9f       	mul	r22, r17
    461e:	90 0d       	add	r25, r0
    4620:	70 9f       	mul	r23, r16
    4622:	90 0d       	add	r25, r0
    4624:	11 24       	eor	r1, r1
    4626:	23 2f       	mov	r18, r19
    4628:	28 0f       	add	r18, r24
		 xRes=xCalc%10;
		 xResNext=xCalc/10;
    462a:	82 2f       	mov	r24, r18
    462c:	6a e0       	ldi	r22, 0x0A	; 10
    462e:	0e 94 61 aa 	call	0x154c2	; 0x154c2 <__udivmodqi4>
    4632:	38 2f       	mov	r19, r24
	     tmpResult[i]='0'+xRes;	 
    4634:	f3 01       	movw	r30, r6
    4636:	e4 0f       	add	r30, r20
    4638:	f5 1f       	adc	r31, r21
    463a:	82 2f       	mov	r24, r18
    463c:	0e 94 61 aa 	call	0x154c2	; 0x154c2 <__udivmodqi4>
    4640:	90 5d       	subi	r25, 0xD0	; 208
    4642:	90 83       	st	Z, r25
		 tmpResult[i+1]=0;
    4644:	48 0d       	add	r20, r8
    4646:	59 1d       	adc	r21, r9
    4648:	fa 01       	movw	r30, r20
    464a:	10 82       	st	Z, r1
	 char i,lenR,xCalc,xRes,xResNext,tmpResult[20];

	 xResNext=0;
     xRes=0;

	 for(i=0;i<strlen(strMain);i++){           
    464c:	b3 94       	inc	r11
    464e:	4b 2d       	mov	r20, r11
    4650:	50 e0       	ldi	r21, 0x00	; 0
    4652:	d7 01       	movw	r26, r14
    4654:	0d 90       	ld	r0, X+
    4656:	00 20       	and	r0, r0
    4658:	e9 f7       	brne	.-6      	; 0x4654 <CalcSegmen+0x9c>
    465a:	11 97       	sbiw	r26, 0x01	; 1
    465c:	ae 19       	sub	r26, r14
    465e:	bf 09       	sbc	r27, r15
    4660:	4a 17       	cp	r20, r26
    4662:	5b 07       	cpc	r21, r27
    4664:	80 f2       	brcs	.-96     	; 0x4606 <CalcSegmen+0x4e>
		 xRes=xCalc%10;
		 xResNext=xCalc/10;
	     tmpResult[i]='0'+xRes;	 
		 tmpResult[i+1]=0;
	 }
	 if (xResNext>0){
    4666:	33 23       	and	r19, r19
    4668:	89 f0       	breq	.+34     	; 0x468c <CalcSegmen+0xd4>
	     lenR=strlen(tmpResult);
    466a:	fe 01       	movw	r30, r28
    466c:	31 96       	adiw	r30, 0x01	; 1
    466e:	df 01       	movw	r26, r30
    4670:	0d 90       	ld	r0, X+
    4672:	00 20       	and	r0, r0
    4674:	e9 f7       	brne	.-6      	; 0x4670 <CalcSegmen+0xb8>
    4676:	11 97       	sbiw	r26, 0x01	; 1
	     tmpResult[lenR]='0'+xResNext;
    4678:	ae 1b       	sub	r26, r30
    467a:	b0 e0       	ldi	r27, 0x00	; 0
    467c:	ea 0f       	add	r30, r26
    467e:	fb 1f       	adc	r31, r27
    4680:	30 5d       	subi	r19, 0xD0	; 208
    4682:	30 83       	st	Z, r19
		 tmpResult[lenR+1]=0;	 
    4684:	ac 0f       	add	r26, r28
    4686:	bd 1f       	adc	r27, r29
    4688:	12 96       	adiw	r26, 0x02	; 2
    468a:	1c 92       	st	X, r1
	 }
	 lenR=strlen(tmpResult);
    468c:	de 01       	movw	r26, r28
    468e:	11 96       	adiw	r26, 0x01	; 1
    4690:	fd 01       	movw	r30, r26
    4692:	01 90       	ld	r0, Z+
    4694:	00 20       	and	r0, r0
    4696:	e9 f7       	brne	.-6      	; 0x4692 <CalcSegmen+0xda>
    4698:	31 97       	sbiw	r30, 0x01	; 1
    469a:	9e 2f       	mov	r25, r30
    469c:	9a 1b       	sub	r25, r26
    469e:	a9 0f       	add	r26, r25
    46a0:	b1 1d       	adc	r27, r1
    46a2:	f6 01       	movw	r30, r12
    46a4:	02 c0       	rjmp	.+4      	; 0x46aa <CalcSegmen+0xf2>
	 for (i=0;i<lenR;i++){
	     strResult[i]=tmpResult[lenR-1-i];
    46a6:	8c 91       	ld	r24, X
    46a8:	81 93       	st	Z+, r24
    46aa:	11 97       	sbiw	r26, 0x01	; 1
	     lenR=strlen(tmpResult);
	     tmpResult[lenR]='0'+xResNext;
		 tmpResult[lenR+1]=0;	 
	 }
	 lenR=strlen(tmpResult);
	 for (i=0;i<lenR;i++){
    46ac:	ac 17       	cp	r26, r28
    46ae:	bd 07       	cpc	r27, r29
    46b0:	d1 f7       	brne	.-12     	; 0x46a6 <CalcSegmen+0xee>
	     strResult[i]=tmpResult[lenR-1-i];
	 }
	 strResult[lenR]=0;
    46b2:	c9 0e       	add	r12, r25
    46b4:	d1 1c       	adc	r13, r1
    46b6:	f6 01       	movw	r30, r12
    46b8:	10 82       	st	Z, r1
}
    46ba:	64 96       	adiw	r28, 0x14	; 20
    46bc:	0f b6       	in	r0, 0x3f	; 63
    46be:	f8 94       	cli
    46c0:	de bf       	out	0x3e, r29	; 62
    46c2:	0f be       	out	0x3f, r0	; 63
    46c4:	cd bf       	out	0x3d, r28	; 61
    46c6:	cf 91       	pop	r28
    46c8:	df 91       	pop	r29
    46ca:	1f 91       	pop	r17
    46cc:	0f 91       	pop	r16
    46ce:	ff 90       	pop	r15
    46d0:	ef 90       	pop	r14
    46d2:	df 90       	pop	r13
    46d4:	cf 90       	pop	r12
    46d6:	bf 90       	pop	r11
    46d8:	9f 90       	pop	r9
    46da:	8f 90       	pop	r8
    46dc:	7f 90       	pop	r7
    46de:	6f 90       	pop	r6
    46e0:	08 95       	ret

000046e2 <GetMinusPos>:
	      break;	 
	 }
*/
}

char GetMinusPos(char *strNumber){
    46e2:	ac 01       	movw	r20, r24
char i,Result;
     Result=0;
     for(i=0;i<strlen(strNumber);i++){
    46e4:	dc 01       	movw	r26, r24
    46e6:	0d 90       	ld	r0, X+
    46e8:	00 20       	and	r0, r0
    46ea:	e9 f7       	brne	.-6      	; 0x46e6 <GetMinusPos+0x4>
    46ec:	11 97       	sbiw	r26, 0x01	; 1
    46ee:	a8 1b       	sub	r26, r24
    46f0:	b9 0b       	sbc	r27, r25
    46f2:	20 e0       	ldi	r18, 0x00	; 0
    46f4:	0a c0       	rjmp	.+20     	; 0x470a <GetMinusPos+0x28>
	     if (strNumber[i]=='-'){
    46f6:	e4 0f       	add	r30, r20
    46f8:	f5 1f       	adc	r31, r21
    46fa:	80 81       	ld	r24, Z
    46fc:	92 2f       	mov	r25, r18
    46fe:	9f 5f       	subi	r25, 0xFF	; 255
    4700:	8d 32       	cpi	r24, 0x2D	; 45
    4702:	11 f4       	brne	.+4      	; 0x4708 <GetMinusPos+0x26>
		     Result=i+1;
    4704:	89 2f       	mov	r24, r25
    4706:	08 95       	ret
}

char GetMinusPos(char *strNumber){
char i,Result;
     Result=0;
     for(i=0;i<strlen(strNumber);i++){
    4708:	29 2f       	mov	r18, r25
    470a:	e2 2f       	mov	r30, r18
    470c:	f0 e0       	ldi	r31, 0x00	; 0
    470e:	ea 17       	cp	r30, r26
    4710:	fb 07       	cpc	r31, r27
    4712:	88 f3       	brcs	.-30     	; 0x46f6 <GetMinusPos+0x14>
    4714:	80 e0       	ldi	r24, 0x00	; 0
		     Result=i+1;
			 break;
		 }
	 }
  return Result;     
}
    4716:	08 95       	ret

00004718 <IsMinus>:

char IsMinus(char *strNumber){
char i,Result=False;
     Result=False;
	 if (GetMinusPos(strNumber)>0){
    4718:	0e 94 71 23 	call	0x46e2	; 0x46e2 <GetMinusPos>
    471c:	81 11       	cpse	r24, r1
    471e:	81 e0       	ldi	r24, 0x01	; 1
	     Result=True;
	 }     
  return Result;
}
    4720:	08 95       	ret

00004722 <RemoveMinus>:

void RemoveMinus(char *strNumber){
    4722:	cf 93       	push	r28
    4724:	df 93       	push	r29
    4726:	ec 01       	movw	r28, r24
     char MinPos,Length;

     if (IsMinus(strNumber)==True){
    4728:	0e 94 8c 23 	call	0x4718	; 0x4718 <IsMinus>
    472c:	81 30       	cpi	r24, 0x01	; 1
    472e:	19 f5       	brne	.+70     	; 0x4776 <RemoveMinus+0x54>
	     MinPos=GetMinusPos(strNumber);
    4730:	ce 01       	movw	r24, r28
    4732:	0e 94 71 23 	call	0x46e2	; 0x46e2 <GetMinusPos>
		 Length=strlen(strNumber);
    4736:	de 01       	movw	r26, r28
    4738:	0d 90       	ld	r0, X+
    473a:	00 20       	and	r0, r0
    473c:	e9 f7       	brne	.-6      	; 0x4738 <RemoveMinus+0x16>
    473e:	11 97       	sbiw	r26, 0x01	; 1
		 StrPosCopy(strNumber,strNumber,MinPos,(Length-MinPos));	      
    4740:	ac 1b       	sub	r26, r28
    4742:	b0 e0       	ldi	r27, 0x00	; 0
    4744:	90 e0       	ldi	r25, 0x00	; 0
    4746:	a8 1b       	sub	r26, r24
    4748:	b9 0b       	sbc	r27, r25
    474a:	ae 01       	movw	r20, r28
    474c:	48 0f       	add	r20, r24
    474e:	59 1f       	adc	r21, r25
    4750:	20 e0       	ldi	r18, 0x00	; 0
    4752:	30 e0       	ldi	r19, 0x00	; 0
    4754:	0a c0       	rjmp	.+20     	; 0x476a <RemoveMinus+0x48>
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    4756:	be 01       	movw	r22, r28
    4758:	62 0f       	add	r22, r18
    475a:	73 1f       	adc	r23, r19
    475c:	fa 01       	movw	r30, r20
    475e:	81 91       	ld	r24, Z+
    4760:	af 01       	movw	r20, r30
    4762:	fb 01       	movw	r30, r22
    4764:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    4766:	2f 5f       	subi	r18, 0xFF	; 255
    4768:	3f 4f       	sbci	r19, 0xFF	; 255
    476a:	2a 17       	cp	r18, r26
    476c:	3b 07       	cpc	r19, r27
    476e:	98 f3       	brcs	.-26     	; 0x4756 <RemoveMinus+0x34>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    4770:	ac 0f       	add	r26, r28
    4772:	bd 1f       	adc	r27, r29
    4774:	1c 92       	st	X, r1
     if (IsMinus(strNumber)==True){
	     MinPos=GetMinusPos(strNumber);
		 Length=strlen(strNumber);
		 StrPosCopy(strNumber,strNumber,MinPos,(Length-MinPos));	      
	 }
}
    4776:	df 91       	pop	r29
    4778:	cf 91       	pop	r28
    477a:	08 95       	ret

0000477c <IsMoreThan>:
	    Result=c-'0';
	 }
	return Result;
}

char IsMoreThan(char *strA, char *strB){
    477c:	ac 01       	movw	r20, r24
    477e:	27 2f       	mov	r18, r23
     char i,LengthA,LengthB,Result=False;
	 char strSend[20];	 
     //Check Length
	 LengthA=strlen(strA);
    4780:	fc 01       	movw	r30, r24
    4782:	01 90       	ld	r0, Z+
    4784:	00 20       	and	r0, r0
    4786:	e9 f7       	brne	.-6      	; 0x4782 <IsMoreThan+0x6>
    4788:	31 97       	sbiw	r30, 0x01	; 1
    478a:	7e 2f       	mov	r23, r30
    478c:	78 1b       	sub	r23, r24
	 LengthB=strlen(strB);
    478e:	a6 2f       	mov	r26, r22
    4790:	b2 2f       	mov	r27, r18
    4792:	fd 01       	movw	r30, r26
    4794:	01 90       	ld	r0, Z+
    4796:	00 20       	and	r0, r0
    4798:	e9 f7       	brne	.-6      	; 0x4794 <IsMoreThan+0x18>
    479a:	31 97       	sbiw	r30, 0x01	; 1
    479c:	e6 1b       	sub	r30, r22
	 Result=False;
	 if (LengthA>LengthB)Result=True;
    479e:	e7 17       	cp	r30, r23
    47a0:	48 f1       	brcs	.+82     	; 0x47f4 <IsMoreThan+0x78>
	 else 
	 if (LengthA==LengthB){          //456755 
    47a2:	7e 17       	cp	r23, r30
    47a4:	49 f5       	brne	.+82     	; 0x47f8 <IsMoreThan+0x7c>
    47a6:	86 2f       	mov	r24, r22
    47a8:	92 2f       	mov	r25, r18
    47aa:	9c 01       	movw	r18, r24
    47ac:	d9 01       	movw	r26, r18
    47ae:	20 e0       	ldi	r18, 0x00	; 0
    47b0:	30 e0       	ldi	r19, 0x00	; 0
    47b2:	1d c0       	rjmp	.+58     	; 0x47ee <IsMoreThan+0x72>
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
    47b4:	fa 01       	movw	r30, r20
    47b6:	e2 0f       	add	r30, r18
    47b8:	f3 1f       	adc	r31, r19
    47ba:	e0 81       	ld	r30, Z
    47bc:	e0 53       	subi	r30, 0x30	; 48
    47be:	ea 30       	cpi	r30, 0x0A	; 10
    47c0:	10 f0       	brcs	.+4      	; 0x47c6 <IsMoreThan+0x4a>
    47c2:	60 e0       	ldi	r22, 0x00	; 0
    47c4:	01 c0       	rjmp	.+2      	; 0x47c8 <IsMoreThan+0x4c>
    47c6:	6e 2f       	mov	r22, r30
	 Result=False;
	 if (LengthA>LengthB)Result=True;
	 else 
	 if (LengthA==LengthB){          //456755 
	     for(i=0;i<LengthA;i++){    //456410   
		     if (Ord(strA[i])>Ord(strB[i])){
    47c8:	8c 91       	ld	r24, X
    47ca:	80 53       	subi	r24, 0x30	; 48
    47cc:	8a 30       	cpi	r24, 0x0A	; 10
    47ce:	10 f0       	brcs	.+4      	; 0x47d4 <IsMoreThan+0x58>
    47d0:	90 e0       	ldi	r25, 0x00	; 0
    47d2:	01 c0       	rjmp	.+2      	; 0x47d6 <IsMoreThan+0x5a>
    47d4:	98 2f       	mov	r25, r24
    47d6:	96 17       	cp	r25, r22
    47d8:	68 f0       	brcs	.+26     	; 0x47f4 <IsMoreThan+0x78>
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
    47da:	ea 30       	cpi	r30, 0x0A	; 10
    47dc:	08 f0       	brcs	.+2      	; 0x47e0 <IsMoreThan+0x64>
    47de:	e0 e0       	ldi	r30, 0x00	; 0
	 if (LengthA==LengthB){          //456755 
	     for(i=0;i<LengthA;i++){    //456410   
		     if (Ord(strA[i])>Ord(strB[i])){
			     Result=True;
				 break;
			 }else if (Ord(strA[i])<Ord(strB[i])){
    47e0:	8a 30       	cpi	r24, 0x0A	; 10
    47e2:	10 f4       	brcc	.+4      	; 0x47e8 <IsMoreThan+0x6c>
    47e4:	e8 17       	cp	r30, r24
    47e6:	40 f0       	brcs	.+16     	; 0x47f8 <IsMoreThan+0x7c>
    47e8:	2f 5f       	subi	r18, 0xFF	; 255
    47ea:	3f 4f       	sbci	r19, 0xFF	; 255
    47ec:	11 96       	adiw	r26, 0x01	; 1
	 LengthB=strlen(strB);
	 Result=False;
	 if (LengthA>LengthB)Result=True;
	 else 
	 if (LengthA==LengthB){          //456755 
	     for(i=0;i<LengthA;i++){    //456410   
    47ee:	27 17       	cp	r18, r23
    47f0:	08 f3       	brcs	.-62     	; 0x47b4 <IsMoreThan+0x38>
    47f2:	02 c0       	rjmp	.+4      	; 0x47f8 <IsMoreThan+0x7c>
    47f4:	81 e0       	ldi	r24, 0x01	; 1
    47f6:	08 95       	ret
    47f8:	80 e0       	ldi	r24, 0x00	; 0
				 break;
			 }			 		 
		 }
	 }
  return Result;
}
    47fa:	08 95       	ret

000047fc <IsZerroAll>:
   return Result;
}

char IsZerroAll(char *strZerro){
     char i,Length,nZerro=0,Result;
	 Length=strlen(strZerro);
    47fc:	fc 01       	movw	r30, r24
    47fe:	01 90       	ld	r0, Z+
    4800:	00 20       	and	r0, r0
    4802:	e9 f7       	brne	.-6      	; 0x47fe <IsZerroAll+0x2>
    4804:	31 97       	sbiw	r30, 0x01	; 1
    4806:	e8 1b       	sub	r30, r24
    4808:	dc 01       	movw	r26, r24
    480a:	ae 0f       	add	r26, r30
    480c:	b1 1d       	adc	r27, r1
    480e:	90 e0       	ldi	r25, 0x00	; 0
    4810:	20 e0       	ldi	r18, 0x00	; 0
    4812:	06 c0       	rjmp	.+12     	; 0x4820 <IsZerroAll+0x24>
	 nZerro=0;
	 Result=False;
	 for(i=0;i<Length;i++){
	     if (strZerro[Length-i]=='0')nZerro++;
    4814:	8c 91       	ld	r24, X
    4816:	80 33       	cpi	r24, 0x30	; 48
    4818:	09 f4       	brne	.+2      	; 0x481c <IsZerroAll+0x20>
    481a:	2f 5f       	subi	r18, 0xFF	; 255
char IsZerroAll(char *strZerro){
     char i,Length,nZerro=0,Result;
	 Length=strlen(strZerro);
	 nZerro=0;
	 Result=False;
	 for(i=0;i<Length;i++){
    481c:	9f 5f       	subi	r25, 0xFF	; 255
    481e:	11 97       	sbiw	r26, 0x01	; 1
    4820:	9e 17       	cp	r25, r30
    4822:	c0 f3       	brcs	.-16     	; 0x4814 <IsZerroAll+0x18>
    4824:	80 e0       	ldi	r24, 0x00	; 0
    4826:	2e 17       	cp	r18, r30
    4828:	09 f4       	brne	.+2      	; 0x482c <IsZerroAll+0x30>
    482a:	81 e0       	ldi	r24, 0x01	; 1
	     if (strZerro[Length-i]=='0')nZerro++;
	 }if (nZerro==Length) Result=True;
  return Result;
}
    482c:	08 95       	ret

0000482e <PstrCopy>:
void CarriegeReturn(){
     uart(_COM_PRINTER, 1, 0x0D);     
     uart(_COM_PRINTER, 1, 0x0A);
}

void PstrCopy(char *Dest,char *Source){
    482e:	cf 93       	push	r28
    4830:	df 93       	push	r29
    4832:	20 e0       	ldi	r18, 0x00	; 0
    4834:	08 c0       	rjmp	.+16     	; 0x4846 <PstrCopy+0x18>
     char i=0;
	 for(i=0;i<strlen(Source);i++){
	    Dest[i]=pgm_read_byte(&Source[i]);
    4836:	fb 01       	movw	r30, r22
    4838:	ec 0f       	add	r30, r28
    483a:	fd 1f       	adc	r31, r29
    483c:	e4 91       	lpm	r30, Z+
    483e:	c8 0f       	add	r28, r24
    4840:	d9 1f       	adc	r29, r25
    4842:	e8 83       	st	Y, r30
     uart(_COM_PRINTER, 1, 0x0A);
}

void PstrCopy(char *Dest,char *Source){
     char i=0;
	 for(i=0;i<strlen(Source);i++){
    4844:	2f 5f       	subi	r18, 0xFF	; 255
    4846:	c2 2f       	mov	r28, r18
    4848:	d0 e0       	ldi	r29, 0x00	; 0
    484a:	fb 01       	movw	r30, r22
    484c:	01 90       	ld	r0, Z+
    484e:	00 20       	and	r0, r0
    4850:	e9 f7       	brne	.-6      	; 0x484c <PstrCopy+0x1e>
    4852:	31 97       	sbiw	r30, 0x01	; 1
    4854:	e6 1b       	sub	r30, r22
    4856:	f7 0b       	sbc	r31, r23
    4858:	ce 17       	cp	r28, r30
    485a:	df 07       	cpc	r29, r31
    485c:	60 f3       	brcs	.-40     	; 0x4836 <PstrCopy+0x8>
	    Dest[i]=pgm_read_byte(&Source[i]);
	 }
}
    485e:	df 91       	pop	r29
    4860:	cf 91       	pop	r28
    4862:	08 95       	ret

00004864 <SpaceOnly>:
	     if (strDecimal[i]==DecPointMark)
		     strDecimal[i]=0;
	 }
}

char SpaceOnly(char *string){
    4864:	ac 01       	movw	r20, r24
     char Result,nChar=0;
	 unsigned int i=0;
	 nChar=0;
	 Result=False;
	 for(i=0;i<strlen(string);i++){
    4866:	dc 01       	movw	r26, r24
    4868:	0d 90       	ld	r0, X+
    486a:	00 20       	and	r0, r0
    486c:	e9 f7       	brne	.-6      	; 0x4868 <SpaceOnly+0x4>
    486e:	11 97       	sbiw	r26, 0x01	; 1
    4870:	a8 1b       	sub	r26, r24
    4872:	b9 0b       	sbc	r27, r25
    4874:	90 e0       	ldi	r25, 0x00	; 0
    4876:	20 e0       	ldi	r18, 0x00	; 0
    4878:	30 e0       	ldi	r19, 0x00	; 0
    487a:	09 c0       	rjmp	.+18     	; 0x488e <SpaceOnly+0x2a>
	    if(string[i]!=' ') nChar++;
    487c:	fa 01       	movw	r30, r20
    487e:	e2 0f       	add	r30, r18
    4880:	f3 1f       	adc	r31, r19
    4882:	80 81       	ld	r24, Z
    4884:	80 32       	cpi	r24, 0x20	; 32
    4886:	09 f0       	breq	.+2      	; 0x488a <SpaceOnly+0x26>
    4888:	9f 5f       	subi	r25, 0xFF	; 255
char SpaceOnly(char *string){
     char Result,nChar=0;
	 unsigned int i=0;
	 nChar=0;
	 Result=False;
	 for(i=0;i<strlen(string);i++){
    488a:	2f 5f       	subi	r18, 0xFF	; 255
    488c:	3f 4f       	sbci	r19, 0xFF	; 255
    488e:	2a 17       	cp	r18, r26
    4890:	3b 07       	cpc	r19, r27
    4892:	a0 f3       	brcs	.-24     	; 0x487c <SpaceOnly+0x18>
    4894:	80 e0       	ldi	r24, 0x00	; 0
    4896:	99 23       	and	r25, r25
    4898:	09 f4       	brne	.+2      	; 0x489c <SpaceOnly+0x38>
    489a:	81 e0       	ldi	r24, 0x01	; 1
	 }
	 if (nChar>0) Result=False;
	 else Result=True;

	 return Result;
}
    489c:	08 95       	ret

0000489e <RemDecimal>:
	 }
}



void RemDecimal(char *strDecimal){//4500.00-->4500
    489e:	cf 93       	push	r28
    48a0:	df 93       	push	r29
    48a2:	ec 01       	movw	r28, r24
char i,DecPointMark;
     DecPointMark=eeprom_read_byte(&DefDecimalMark);	 
    48a4:	8f e3       	ldi	r24, 0x3F	; 63
    48a6:	90 e0       	ldi	r25, 0x00	; 0
    48a8:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
    48ac:	38 2f       	mov	r19, r24
    48ae:	20 e0       	ldi	r18, 0x00	; 0
    48b0:	08 c0       	rjmp	.+16     	; 0x48c2 <RemDecimal+0x24>

     for(i=0;i<strlen(strDecimal);i++){
	     if (strDecimal[i]==DecPointMark)
    48b2:	fe 01       	movw	r30, r28
    48b4:	e8 0f       	add	r30, r24
    48b6:	f9 1f       	adc	r31, r25
    48b8:	80 81       	ld	r24, Z
    48ba:	83 17       	cp	r24, r19
    48bc:	09 f4       	brne	.+2      	; 0x48c0 <RemDecimal+0x22>
		     strDecimal[i]=0;
    48be:	10 82       	st	Z, r1

void RemDecimal(char *strDecimal){//4500.00-->4500
char i,DecPointMark;
     DecPointMark=eeprom_read_byte(&DefDecimalMark);	 

     for(i=0;i<strlen(strDecimal);i++){
    48c0:	2f 5f       	subi	r18, 0xFF	; 255
    48c2:	82 2f       	mov	r24, r18
    48c4:	90 e0       	ldi	r25, 0x00	; 0
    48c6:	fe 01       	movw	r30, r28
    48c8:	01 90       	ld	r0, Z+
    48ca:	00 20       	and	r0, r0
    48cc:	e9 f7       	brne	.-6      	; 0x48c8 <RemDecimal+0x2a>
    48ce:	31 97       	sbiw	r30, 0x01	; 1
    48d0:	ec 1b       	sub	r30, r28
    48d2:	fd 0b       	sbc	r31, r29
    48d4:	8e 17       	cp	r24, r30
    48d6:	9f 07       	cpc	r25, r31
    48d8:	60 f3       	brcs	.-40     	; 0x48b2 <RemDecimal+0x14>
	     if (strDecimal[i]==DecPointMark)
		     strDecimal[i]=0;
	 }
}
    48da:	df 91       	pop	r29
    48dc:	cf 91       	pop	r28
    48de:	08 95       	ret

000048e0 <GetProductPrice>:
          stGenerateReport=grScanAction;
	      break;
	 }
}
//SaveTotalProduct(xGrade,strDeltaVolume,strDeltaMoney);
void GetProductPrice(char *sPrice,char xPumpID,char xNozzle){
    48e0:	cf 92       	push	r12
    48e2:	df 92       	push	r13
    48e4:	ef 92       	push	r14
    48e6:	ff 92       	push	r15
    48e8:	0f 93       	push	r16
    48ea:	1f 93       	push	r17
    48ec:	df 93       	push	r29
    48ee:	cf 93       	push	r28
    48f0:	cd b7       	in	r28, 0x3d	; 61
    48f2:	de b7       	in	r29, 0x3e	; 62
    48f4:	67 97       	sbiw	r28, 0x17	; 23
    48f6:	0f b6       	in	r0, 0x3f	; 63
    48f8:	f8 94       	cli
    48fa:	de bf       	out	0x3e, r29	; 62
    48fc:	0f be       	out	0x3f, r0	; 63
    48fe:	cd bf       	out	0x3d, r28	; 61
    4900:	7c 01       	movw	r14, r24
    4902:	d6 2e       	mov	r13, r22
    4904:	c4 2e       	mov	r12, r20
char i,PPumpID[8],PProdID[6],strPrice[9],iPumpID,xProductID;
     sprintf_P(sPrice,PSTR(""));
    4906:	00 d0       	rcall	.+0      	; 0x4908 <GetProductPrice+0x28>
    4908:	00 d0       	rcall	.+0      	; 0x490a <GetProductPrice+0x2a>
    490a:	ad b7       	in	r26, 0x3d	; 61
    490c:	be b7       	in	r27, 0x3e	; 62
    490e:	12 96       	adiw	r26, 0x02	; 2
    4910:	9c 93       	st	X, r25
    4912:	8e 93       	st	-X, r24
    4914:	11 97       	sbiw	r26, 0x01	; 1
    4916:	86 e6       	ldi	r24, 0x66	; 102
    4918:	95 e0       	ldi	r25, 0x05	; 5
    491a:	14 96       	adiw	r26, 0x04	; 4
    491c:	9c 93       	st	X, r25
    491e:	8e 93       	st	-X, r24
    4920:	13 97       	sbiw	r26, 0x03	; 3
    4922:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
     //FindPumpID
	 eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap,8);
    4926:	0f 90       	pop	r0
    4928:	0f 90       	pop	r0
    492a:	0f 90       	pop	r0
    492c:	0f 90       	pop	r0
    492e:	8e 01       	movw	r16, r28
    4930:	09 5f       	subi	r16, 0xF9	; 249
    4932:	1f 4f       	sbci	r17, 0xFF	; 255
    4934:	c8 01       	movw	r24, r16
    4936:	66 e4       	ldi	r22, 0x46	; 70
    4938:	70 e0       	ldi	r23, 0x00	; 0
    493a:	48 e0       	ldi	r20, 0x08	; 8
    493c:	50 e0       	ldi	r21, 0x00	; 0
    493e:	0e 94 30 ad 	call	0x15a60	; 0x15a60 <__eerd_block_m128>
    4942:	f8 01       	movw	r30, r16
	 iPumpID=0;
	 for(i=0;i<8;i++){
    4944:	9e 01       	movw	r18, r28
    4946:	21 5f       	subi	r18, 0xF1	; 241
    4948:	3f 4f       	sbci	r19, 0xFF	; 255
//SaveTotalProduct(xGrade,strDeltaVolume,strDeltaMoney);
void GetProductPrice(char *sPrice,char xPumpID,char xNozzle){
char i,PPumpID[8],PProdID[6],strPrice[9],iPumpID,xProductID;
     sprintf_P(sPrice,PSTR(""));
     //FindPumpID
	 eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap,8);
    494a:	9e 2f       	mov	r25, r30
    494c:	90 1b       	sub	r25, r16
	 iPumpID=0;
	 for(i=0;i<8;i++){
	     if (PPumpID[i]==xPumpID){
    494e:	80 81       	ld	r24, Z
    4950:	8d 15       	cp	r24, r13
    4952:	11 f4       	brne	.+4      	; 0x4958 <GetProductPrice+0x78>
    4954:	89 2f       	mov	r24, r25
    4956:	05 c0       	rjmp	.+10     	; 0x4962 <GetProductPrice+0x82>
    4958:	31 96       	adiw	r30, 0x01	; 1
char i,PPumpID[8],PProdID[6],strPrice[9],iPumpID,xProductID;
     sprintf_P(sPrice,PSTR(""));
     //FindPumpID
	 eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap,8);
	 iPumpID=0;
	 for(i=0;i<8;i++){
    495a:	e2 17       	cp	r30, r18
    495c:	f3 07       	cpc	r31, r19
    495e:	a9 f7       	brne	.-22     	; 0x494a <GetProductPrice+0x6a>
    4960:	80 e0       	ldi	r24, 0x00	; 0
	     if (PPumpID[i]==xPumpID){
		     iPumpID=i;
			 break;
		 }	 
	 }
	 if ((iPumpID>=0)&&(xNozzle<6)){
    4962:	b5 e0       	ldi	r27, 0x05	; 5
    4964:	bc 15       	cp	r27, r12
    4966:	e8 f1       	brcs	.+122    	; 0x49e2 <GetProductPrice+0x102>
         eeprom_read_block((void*) &PProdID,(const void*) &DefNozzleMap[iPumpID],6);
    4968:	66 e0       	ldi	r22, 0x06	; 6
    496a:	86 9f       	mul	r24, r22
    496c:	b0 01       	movw	r22, r0
    496e:	11 24       	eor	r1, r1
    4970:	6a 5a       	subi	r22, 0xAA	; 170
    4972:	7f 4f       	sbci	r23, 0xFF	; 255
    4974:	ce 01       	movw	r24, r28
    4976:	01 96       	adiw	r24, 0x01	; 1
    4978:	46 e0       	ldi	r20, 0x06	; 6
    497a:	50 e0       	ldi	r21, 0x00	; 0
    497c:	0e 94 30 ad 	call	0x15a60	; 0x15a60 <__eerd_block_m128>
         xProductID=PProdID[xNozzle-1];
		 //Price
		 eeprom_read_block((void*) &strPrice, (const void*) &DefProductPrice[xProductID-1], 9);
    4980:	8e 01       	movw	r16, r28
    4982:	01 5f       	subi	r16, 0xF1	; 241
    4984:	1f 4f       	sbci	r17, 0xFF	; 255
    4986:	fe 01       	movw	r30, r28
    4988:	ec 0d       	add	r30, r12
    498a:	f1 1d       	adc	r31, r1
    498c:	60 81       	ld	r22, Z
    498e:	89 e0       	ldi	r24, 0x09	; 9
    4990:	68 9f       	mul	r22, r24
    4992:	b0 01       	movw	r22, r0
    4994:	11 24       	eor	r1, r1
    4996:	63 58       	subi	r22, 0x83	; 131
    4998:	7f 4f       	sbci	r23, 0xFF	; 255
    499a:	c8 01       	movw	r24, r16
    499c:	49 e0       	ldi	r20, 0x09	; 9
    499e:	50 e0       	ldi	r21, 0x00	; 0
    49a0:	0e 94 30 ad 	call	0x15a60	; 0x15a60 <__eerd_block_m128>
		 RemDecimal(strPrice);
    49a4:	c8 01       	movw	r24, r16
    49a6:	0e 94 4f 24 	call	0x489e	; 0x489e <RemDecimal>
		 sprintf_P(sPrice,PSTR("%s"),strPrice);
    49aa:	00 d0       	rcall	.+0      	; 0x49ac <GetProductPrice+0xcc>
    49ac:	00 d0       	rcall	.+0      	; 0x49ae <GetProductPrice+0xce>
    49ae:	00 d0       	rcall	.+0      	; 0x49b0 <GetProductPrice+0xd0>
    49b0:	ed b7       	in	r30, 0x3d	; 61
    49b2:	fe b7       	in	r31, 0x3e	; 62
    49b4:	31 96       	adiw	r30, 0x01	; 1
    49b6:	ad b7       	in	r26, 0x3d	; 61
    49b8:	be b7       	in	r27, 0x3e	; 62
    49ba:	12 96       	adiw	r26, 0x02	; 2
    49bc:	fc 92       	st	X, r15
    49be:	ee 92       	st	-X, r14
    49c0:	11 97       	sbiw	r26, 0x01	; 1
    49c2:	83 e6       	ldi	r24, 0x63	; 99
    49c4:	95 e0       	ldi	r25, 0x05	; 5
    49c6:	93 83       	std	Z+3, r25	; 0x03
    49c8:	82 83       	std	Z+2, r24	; 0x02
    49ca:	15 83       	std	Z+5, r17	; 0x05
    49cc:	04 83       	std	Z+4, r16	; 0x04
    49ce:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
    49d2:	ed b7       	in	r30, 0x3d	; 61
    49d4:	fe b7       	in	r31, 0x3e	; 62
    49d6:	36 96       	adiw	r30, 0x06	; 6
    49d8:	0f b6       	in	r0, 0x3f	; 63
    49da:	f8 94       	cli
    49dc:	fe bf       	out	0x3e, r31	; 62
    49de:	0f be       	out	0x3f, r0	; 63
    49e0:	ed bf       	out	0x3d, r30	; 61
	 }    
	 //Clear Decimal

}
    49e2:	67 96       	adiw	r28, 0x17	; 23
    49e4:	0f b6       	in	r0, 0x3f	; 63
    49e6:	f8 94       	cli
    49e8:	de bf       	out	0x3e, r29	; 62
    49ea:	0f be       	out	0x3f, r0	; 63
    49ec:	cd bf       	out	0x3d, r28	; 61
    49ee:	cf 91       	pop	r28
    49f0:	df 91       	pop	r29
    49f2:	1f 91       	pop	r17
    49f4:	0f 91       	pop	r16
    49f6:	ff 90       	pop	r15
    49f8:	ef 90       	pop	r14
    49fa:	df 90       	pop	r13
    49fc:	cf 90       	pop	r12
    49fe:	08 95       	ret

00004a00 <FormatDate>:
	 }     
   }
}

              //Fmt:DATE_LONG_YEAR,DATE_SHORT_YEAR //0123456789    0123456789 
void FormatDate(char FmtYear, char *Date){         //2010/06/16 -> 16/06/2010
    4a00:	df 93       	push	r29
    4a02:	cf 93       	push	r28
    4a04:	cd b7       	in	r28, 0x3d	; 61
    4a06:	de b7       	in	r29, 0x3e	; 62
    4a08:	2b 97       	sbiw	r28, 0x0b	; 11
    4a0a:	0f b6       	in	r0, 0x3f	; 63
    4a0c:	f8 94       	cli
    4a0e:	de bf       	out	0x3e, r29	; 62
    4a10:	0f be       	out	0x3f, r0	; 63
    4a12:	cd bf       	out	0x3d, r28	; 61
    4a14:	98 2f       	mov	r25, r24
    4a16:	9b 01       	movw	r18, r22
     char i,sDate[11];

     sDate[0]=Date[8];
    4a18:	fb 01       	movw	r30, r22
    4a1a:	80 85       	ldd	r24, Z+8	; 0x08
    4a1c:	89 83       	std	Y+1, r24	; 0x01
	 sDate[1]=Date[9];
    4a1e:	81 85       	ldd	r24, Z+9	; 0x09
    4a20:	8a 83       	std	Y+2, r24	; 0x02
     sDate[2]=Date[7];
    4a22:	87 81       	ldd	r24, Z+7	; 0x07
    4a24:	8b 83       	std	Y+3, r24	; 0x03
	 sDate[3]=Date[5];
    4a26:	85 81       	ldd	r24, Z+5	; 0x05
    4a28:	8c 83       	std	Y+4, r24	; 0x04
     sDate[4]=Date[6];
    4a2a:	86 81       	ldd	r24, Z+6	; 0x06
    4a2c:	8d 83       	std	Y+5, r24	; 0x05
	 sDate[5]=Date[4];
    4a2e:	84 81       	ldd	r24, Z+4	; 0x04
    4a30:	8e 83       	std	Y+6, r24	; 0x06
	 switch(FmtYear){
    4a32:	99 23       	and	r25, r25
    4a34:	19 f0       	breq	.+6      	; 0x4a3c <FormatDate+0x3c>
    4a36:	91 30       	cpi	r25, 0x01	; 1
    4a38:	59 f4       	brne	.+22     	; 0x4a50 <FormatDate+0x50>
    4a3a:	0f c0       	rjmp	.+30     	; 0x4a5a <FormatDate+0x5a>
	 case DATE_LONG_YEAR:
	 	  for(i=0;i<4;i++)sDate[i+6]=Date[i];
    4a3c:	fb 01       	movw	r30, r22
    4a3e:	80 81       	ld	r24, Z
    4a40:	8f 83       	std	Y+7, r24	; 0x07
    4a42:	81 81       	ldd	r24, Z+1	; 0x01
    4a44:	88 87       	std	Y+8, r24	; 0x08
    4a46:	82 81       	ldd	r24, Z+2	; 0x02
    4a48:	89 87       	std	Y+9, r24	; 0x09
    4a4a:	83 81       	ldd	r24, Z+3	; 0x03
    4a4c:	8a 87       	std	Y+10, r24	; 0x0a
          sDate[10]=0;
    4a4e:	1b 86       	std	Y+11, r1	; 0x0b
    4a50:	90 e0       	ldi	r25, 0x00	; 0
	      for(i=0;i<2;i++)sDate[i+6]=Date[i+2];
          sDate[8]=0;
	      break;
	 }
	 //replace
	 for(i=0;i<strlen(sDate);i++)Date[i]=sDate[i];
    4a52:	ae 01       	movw	r20, r28
    4a54:	4f 5f       	subi	r20, 0xFF	; 255
    4a56:	5f 4f       	sbci	r21, 0xFF	; 255
    4a58:	0f c0       	rjmp	.+30     	; 0x4a78 <FormatDate+0x78>
	 case DATE_LONG_YEAR:
	 	  for(i=0;i<4;i++)sDate[i+6]=Date[i];
          sDate[10]=0;
	      break;
	 case DATE_SHORT_YEAR:
	      for(i=0;i<2;i++)sDate[i+6]=Date[i+2];
    4a5a:	fb 01       	movw	r30, r22
    4a5c:	82 81       	ldd	r24, Z+2	; 0x02
    4a5e:	8f 83       	std	Y+7, r24	; 0x07
    4a60:	83 81       	ldd	r24, Z+3	; 0x03
    4a62:	88 87       	std	Y+8, r24	; 0x08
          sDate[8]=0;
    4a64:	19 86       	std	Y+9, r1	; 0x09
    4a66:	f4 cf       	rjmp	.-24     	; 0x4a50 <FormatDate+0x50>
	      break;
	 }
	 //replace
	 for(i=0;i<strlen(sDate);i++)Date[i]=sDate[i];
    4a68:	f9 01       	movw	r30, r18
    4a6a:	ea 0f       	add	r30, r26
    4a6c:	fb 1f       	adc	r31, r27
    4a6e:	a4 0f       	add	r26, r20
    4a70:	b5 1f       	adc	r27, r21
    4a72:	8c 91       	ld	r24, X
    4a74:	80 83       	st	Z, r24
    4a76:	9f 5f       	subi	r25, 0xFF	; 255
    4a78:	a9 2f       	mov	r26, r25
    4a7a:	b0 e0       	ldi	r27, 0x00	; 0
    4a7c:	fa 01       	movw	r30, r20
    4a7e:	01 90       	ld	r0, Z+
    4a80:	00 20       	and	r0, r0
    4a82:	e9 f7       	brne	.-6      	; 0x4a7e <FormatDate+0x7e>
    4a84:	31 97       	sbiw	r30, 0x01	; 1
    4a86:	e4 1b       	sub	r30, r20
    4a88:	f5 0b       	sbc	r31, r21
    4a8a:	ae 17       	cp	r26, r30
    4a8c:	bf 07       	cpc	r27, r31
    4a8e:	60 f3       	brcs	.-40     	; 0x4a68 <FormatDate+0x68>
}
    4a90:	2b 96       	adiw	r28, 0x0b	; 11
    4a92:	0f b6       	in	r0, 0x3f	; 63
    4a94:	f8 94       	cli
    4a96:	de bf       	out	0x3e, r29	; 62
    4a98:	0f be       	out	0x3f, r0	; 63
    4a9a:	cd bf       	out	0x3d, r28	; 61
    4a9c:	cf 91       	pop	r28
    4a9e:	df 91       	pop	r29
    4aa0:	08 95       	ret

00004aa2 <RemZeroLead>:

	while (1){};
  #endif
}

void RemZeroLead(char *Zeroed){//Remove Zero Character 00001004 000050000 0 
    4aa2:	cf 93       	push	r28
    4aa4:	df 93       	push	r29
    4aa6:	ec 01       	movw	r28, r24
unsigned char i=0,Length=0,ZeroPos=0,IsFound=False;;
     IsFound=False;
     ZeroPos=0;Length=strlen(Zeroed);
    4aa8:	fc 01       	movw	r30, r24
    4aaa:	01 90       	ld	r0, Z+
    4aac:	00 20       	and	r0, r0
    4aae:	e9 f7       	brne	.-6      	; 0x4aaa <RemZeroLead+0x8>
    4ab0:	31 97       	sbiw	r30, 0x01	; 1
    4ab2:	e8 1b       	sub	r30, r24
  if ((Length>1)&&(Zeroed[0]=='0')){
    4ab4:	e2 30       	cpi	r30, 0x02	; 2
    4ab6:	d0 f1       	brcs	.+116    	; 0x4b2c <RemZeroLead+0x8a>
    4ab8:	88 81       	ld	r24, Y
    4aba:	80 33       	cpi	r24, 0x30	; 48
    4abc:	b9 f5       	brne	.+110    	; 0x4b2c <RemZeroLead+0x8a>
    4abe:	4c 2f       	mov	r20, r28
    4ac0:	de 01       	movw	r26, r28
    4ac2:	90 e0       	ldi	r25, 0x00	; 0
	 if (Zeroed[0]=='0'){
         for(i=0;i<Length;i++){//00000000->0
	         if ((Zeroed[i]=='0')&&(Zeroed[i+1]=='0')&&(IsFound==False)) ZeroPos++;
    4ac4:	8c 91       	ld	r24, X
    4ac6:	80 33       	cpi	r24, 0x30	; 48
    4ac8:	69 f4       	brne	.+26     	; 0x4ae4 <RemZeroLead+0x42>
    4aca:	11 96       	adiw	r26, 0x01	; 1
    4acc:	8c 91       	ld	r24, X
    4ace:	11 97       	sbiw	r26, 0x01	; 1
    4ad0:	80 33       	cpi	r24, 0x30	; 48
    4ad2:	11 f4       	brne	.+4      	; 0x4ad8 <RemZeroLead+0x36>
    4ad4:	9f 5f       	subi	r25, 0xFF	; 255
    4ad6:	06 c0       	rjmp	.+12     	; 0x4ae4 <RemZeroLead+0x42>
             if ((Zeroed[i]=='0')&&(Zeroed[i+1]!='0')){
			     if ((Zeroed[i+1]=='.')||(Zeroed[i+1]==','))ZeroPos--;
    4ad8:	8e 32       	cpi	r24, 0x2E	; 46
    4ada:	11 f0       	breq	.+4      	; 0x4ae0 <RemZeroLead+0x3e>
    4adc:	8c 32       	cpi	r24, 0x2C	; 44
    4ade:	41 f4       	brne	.+16     	; 0x4af0 <RemZeroLead+0x4e>
    4ae0:	91 50       	subi	r25, 0x01	; 1
    4ae2:	06 c0       	rjmp	.+12     	; 0x4af0 <RemZeroLead+0x4e>
    4ae4:	11 96       	adiw	r26, 0x01	; 1
unsigned char i=0,Length=0,ZeroPos=0,IsFound=False;;
     IsFound=False;
     ZeroPos=0;Length=strlen(Zeroed);
  if ((Length>1)&&(Zeroed[0]=='0')){
	 if (Zeroed[0]=='0'){
         for(i=0;i<Length;i++){//00000000->0
    4ae6:	8a 2f       	mov	r24, r26
    4ae8:	84 1b       	sub	r24, r20
    4aea:	8e 17       	cp	r24, r30
    4aec:	58 f3       	brcs	.-42     	; 0x4ac4 <RemZeroLead+0x22>
    4aee:	01 c0       	rjmp	.+2      	; 0x4af2 <RemZeroLead+0x50>
		         IsFound=True;
			     break;			  
			     }
	      }

		  if (IsFound==True)ZeroPos++;
    4af0:	9f 5f       	subi	r25, 0xFF	; 255
		  if (ZeroPos>=Length)ZeroPos=Length-1;
    4af2:	9e 17       	cp	r25, r30
    4af4:	10 f0       	brcs	.+4      	; 0x4afa <RemZeroLead+0x58>
    4af6:	9e 2f       	mov	r25, r30
    4af8:	91 50       	subi	r25, 0x01	; 1
    4afa:	40 e0       	ldi	r20, 0x00	; 0
          for(i=0;i<(Length-ZeroPos);i++){
    4afc:	89 2f       	mov	r24, r25
    4afe:	90 e0       	ldi	r25, 0x00	; 0
    4b00:	2e 2f       	mov	r18, r30
    4b02:	30 e0       	ldi	r19, 0x00	; 0
    4b04:	28 1b       	sub	r18, r24
    4b06:	39 0b       	sbc	r19, r25
	          Zeroed[i]=Zeroed[i+ZeroPos];
    4b08:	be 01       	movw	r22, r28
    4b0a:	68 0f       	add	r22, r24
    4b0c:	79 1f       	adc	r23, r25
    4b0e:	09 c0       	rjmp	.+18     	; 0x4b22 <RemZeroLead+0x80>
    4b10:	fe 01       	movw	r30, r28
    4b12:	ea 0f       	add	r30, r26
    4b14:	fb 1f       	adc	r31, r27
    4b16:	a6 0f       	add	r26, r22
    4b18:	b7 1f       	adc	r27, r23
    4b1a:	8c 91       	ld	r24, X
    4b1c:	80 83       	st	Z, r24
		      Zeroed[i+1]=0;
    4b1e:	11 82       	std	Z+1, r1	; 0x01
			     }
	      }

		  if (IsFound==True)ZeroPos++;
		  if (ZeroPos>=Length)ZeroPos=Length-1;
          for(i=0;i<(Length-ZeroPos);i++){
    4b20:	4f 5f       	subi	r20, 0xFF	; 255
    4b22:	a4 2f       	mov	r26, r20
    4b24:	b0 e0       	ldi	r27, 0x00	; 0
    4b26:	a2 17       	cp	r26, r18
    4b28:	b3 07       	cpc	r27, r19
    4b2a:	94 f3       	brlt	.-28     	; 0x4b10 <RemZeroLead+0x6e>
	          Zeroed[i]=Zeroed[i+ZeroPos];
		      Zeroed[i+1]=0;
	   }//Zeroed[Length-ZeroPos]=0;
	 }     
   }
}
    4b2c:	df 91       	pop	r29
    4b2e:	cf 91       	pop	r28
    4b30:	08 95       	ret

00004b32 <RemSpaceLead>:
	 if (Spaced[PosSpaced]==' ')Spaced[PosSpaced]=0;
	 if (Spaced[0]==' ')Spaced[0]=0;
	 Spaced[strlen(Spaced)]=0;
}

void RemSpaceLead(char *Zeroed){//Remove Space Character SSSSSS1234 12340234
    4b32:	cf 93       	push	r28
    4b34:	df 93       	push	r29
    4b36:	ec 01       	movw	r28, r24
unsigned char i=0,Length=0,ZeroPos=0,IsFound=False;;
     ZeroPos=0;Length=strlen(Zeroed);
    4b38:	fc 01       	movw	r30, r24
    4b3a:	01 90       	ld	r0, Z+
    4b3c:	00 20       	and	r0, r0
    4b3e:	e9 f7       	brne	.-6      	; 0x4b3a <RemSpaceLead+0x8>
    4b40:	31 97       	sbiw	r30, 0x01	; 1
    4b42:	6e 2f       	mov	r22, r30
    4b44:	68 1b       	sub	r22, r24
	 if ((Length>1)&&(Zeroed[0]==' ')){
    4b46:	62 30       	cpi	r22, 0x02	; 2
    4b48:	e0 f1       	brcs	.+120    	; 0x4bc2 <RemSpaceLead+0x90>
    4b4a:	88 81       	ld	r24, Y
    4b4c:	80 32       	cpi	r24, 0x20	; 32
    4b4e:	c9 f5       	brne	.+114    	; 0x4bc2 <RemSpaceLead+0x90>
    4b50:	4c 2f       	mov	r20, r28
    4b52:	fe 01       	movw	r30, r28
    4b54:	90 e0       	ldi	r25, 0x00	; 0
    4b56:	20 e0       	ldi	r18, 0x00	; 0
	     for(i=0;i<Length;i++){
		     if ((Zeroed[i]==' ')&&(Zeroed[i+1]==' ')&&(IsFound==False)) ZeroPos++;
    4b58:	80 81       	ld	r24, Z
    4b5a:	80 32       	cpi	r24, 0x20	; 32
    4b5c:	41 f4       	brne	.+16     	; 0x4b6e <RemSpaceLead+0x3c>
    4b5e:	81 81       	ldd	r24, Z+1	; 0x01
    4b60:	80 32       	cpi	r24, 0x20	; 32
    4b62:	21 f4       	brne	.+8      	; 0x4b6c <RemSpaceLead+0x3a>
    4b64:	22 23       	and	r18, r18
    4b66:	19 f4       	brne	.+6      	; 0x4b6e <RemSpaceLead+0x3c>
    4b68:	9f 5f       	subi	r25, 0xFF	; 255
    4b6a:	01 c0       	rjmp	.+2      	; 0x4b6e <RemSpaceLead+0x3c>
    4b6c:	21 e0       	ldi	r18, 0x01	; 1
    4b6e:	31 96       	adiw	r30, 0x01	; 1

void RemSpaceLead(char *Zeroed){//Remove Space Character SSSSSS1234 12340234
unsigned char i=0,Length=0,ZeroPos=0,IsFound=False;;
     ZeroPos=0;Length=strlen(Zeroed);
	 if ((Length>1)&&(Zeroed[0]==' ')){
	     for(i=0;i<Length;i++){
    4b70:	8e 2f       	mov	r24, r30
    4b72:	84 1b       	sub	r24, r20
    4b74:	86 17       	cp	r24, r22
    4b76:	80 f3       	brcs	.-32     	; 0x4b58 <RemSpaceLead+0x26>
		     if ((Zeroed[i]==' ')&&(Zeroed[i+1]==' ')&&(IsFound==False)) ZeroPos++;
	         if((Zeroed[i]==' ')&&(Zeroed[i+1]!=' '))IsFound=True;
		 }ZeroPos++;
    4b78:	39 2f       	mov	r19, r25
    4b7a:	3f 5f       	subi	r19, 0xFF	; 255
    4b7c:	20 e0       	ldi	r18, 0x00	; 0
	     for(i=0;i<strlen(Zeroed);i++){
		     Zeroed[i]=Zeroed[i+ZeroPos];
    4b7e:	43 2f       	mov	r20, r19
    4b80:	50 e0       	ldi	r21, 0x00	; 0
    4b82:	09 c0       	rjmp	.+18     	; 0x4b96 <RemSpaceLead+0x64>
    4b84:	fe 01       	movw	r30, r28
    4b86:	e8 0f       	add	r30, r24
    4b88:	f9 1f       	adc	r31, r25
    4b8a:	df 01       	movw	r26, r30
    4b8c:	a4 0f       	add	r26, r20
    4b8e:	b5 1f       	adc	r27, r21
    4b90:	8c 91       	ld	r24, X
    4b92:	80 83       	st	Z, r24
	 if ((Length>1)&&(Zeroed[0]==' ')){
	     for(i=0;i<Length;i++){
		     if ((Zeroed[i]==' ')&&(Zeroed[i+1]==' ')&&(IsFound==False)) ZeroPos++;
	         if((Zeroed[i]==' ')&&(Zeroed[i+1]!=' '))IsFound=True;
		 }ZeroPos++;
	     for(i=0;i<strlen(Zeroed);i++){
    4b94:	2f 5f       	subi	r18, 0xFF	; 255
    4b96:	82 2f       	mov	r24, r18
    4b98:	90 e0       	ldi	r25, 0x00	; 0
    4b9a:	fe 01       	movw	r30, r28
    4b9c:	01 90       	ld	r0, Z+
    4b9e:	00 20       	and	r0, r0
    4ba0:	e9 f7       	brne	.-6      	; 0x4b9c <RemSpaceLead+0x6a>
    4ba2:	31 97       	sbiw	r30, 0x01	; 1
    4ba4:	ec 1b       	sub	r30, r28
    4ba6:	fd 0b       	sbc	r31, r29
    4ba8:	8e 17       	cp	r24, r30
    4baa:	9f 07       	cpc	r25, r31
    4bac:	58 f3       	brcs	.-42     	; 0x4b84 <RemSpaceLead+0x52>
		     Zeroed[i]=Zeroed[i+ZeroPos];
		 }
		 //Clearence
		 for(i=(Length-ZeroPos);i<Length;i++){
    4bae:	86 2f       	mov	r24, r22
    4bb0:	83 1b       	sub	r24, r19
    4bb2:	05 c0       	rjmp	.+10     	; 0x4bbe <RemSpaceLead+0x8c>
		     Zeroed[i]=0;
    4bb4:	fe 01       	movw	r30, r28
    4bb6:	e8 0f       	add	r30, r24
    4bb8:	f1 1d       	adc	r31, r1
    4bba:	10 82       	st	Z, r1
		 }ZeroPos++;
	     for(i=0;i<strlen(Zeroed);i++){
		     Zeroed[i]=Zeroed[i+ZeroPos];
		 }
		 //Clearence
		 for(i=(Length-ZeroPos);i<Length;i++){
    4bbc:	8f 5f       	subi	r24, 0xFF	; 255
    4bbe:	86 17       	cp	r24, r22
    4bc0:	c8 f3       	brcs	.-14     	; 0x4bb4 <RemSpaceLead+0x82>
		     Zeroed[i]=0;
		 }
     }
}
    4bc2:	df 91       	pop	r29
    4bc4:	cf 91       	pop	r28
    4bc6:	08 95       	ret

00004bc8 <RemSpaceLag>:
	 if (Spaced[0]==' ')Spaced[0]=0;
	 Spaced[strlen(Spaced)]=0;
}
*/
                                                      //012345678
void RemSpaceLag(char *Spaced){//Remove Space Character 1234SSSSS L=9 i=0 i=7
    4bc8:	0f 93       	push	r16
    4bca:	1f 93       	push	r17
    4bcc:	cf 93       	push	r28
    4bce:	df 93       	push	r29
    4bd0:	ec 01       	movw	r28, r24
unsigned char i=0,Length=0,PosSpaced=0;
     Length=strlen(Spaced);
    4bd2:	dc 01       	movw	r26, r24
    4bd4:	0d 90       	ld	r0, X+
    4bd6:	00 20       	and	r0, r0
    4bd8:	e9 f7       	brne	.-6      	; 0x4bd4 <RemSpaceLag+0xc>
    4bda:	11 97       	sbiw	r26, 0x01	; 1
    4bdc:	a8 1b       	sub	r26, r24
    4bde:	b0 e0       	ldi	r27, 0x00	; 0
    4be0:	20 e0       	ldi	r18, 0x00	; 0
    4be2:	30 e0       	ldi	r19, 0x00	; 0
     for(i=0;i<(Length-1);i++){
    4be4:	6a 2f       	mov	r22, r26
    4be6:	70 e0       	ldi	r23, 0x00	; 0
    4be8:	8b 01       	movw	r16, r22
    4bea:	01 50       	subi	r16, 0x01	; 1
    4bec:	10 40       	sbci	r17, 0x00	; 0
	     if ((Spaced[Length-i-2]==' ')&&(Spaced[Length-i-1]==' ')){
		      Spaced[Length-i-1]=0;
    4bee:	a1 50       	subi	r26, 0x01	; 1
    4bf0:	16 c0       	rjmp	.+44     	; 0x4c1e <RemSpaceLag+0x56>
                                                      //012345678
void RemSpaceLag(char *Spaced){//Remove Space Character 1234SSSSS L=9 i=0 i=7
unsigned char i=0,Length=0,PosSpaced=0;
     Length=strlen(Spaced);
     for(i=0;i<(Length-1);i++){
	     if ((Spaced[Length-i-2]==' ')&&(Spaced[Length-i-1]==' ')){
    4bf2:	ab 01       	movw	r20, r22
    4bf4:	48 1b       	sub	r20, r24
    4bf6:	59 0b       	sbc	r21, r25
    4bf8:	fe 01       	movw	r30, r28
    4bfa:	e4 0f       	add	r30, r20
    4bfc:	f5 1f       	adc	r31, r21
    4bfe:	32 97       	sbiw	r30, 0x02	; 2
    4c00:	80 81       	ld	r24, Z
    4c02:	80 32       	cpi	r24, 0x20	; 32
    4c04:	89 f4       	brne	.+34     	; 0x4c28 <RemSpaceLag+0x60>
    4c06:	fa 01       	movw	r30, r20
    4c08:	31 97       	sbiw	r30, 0x01	; 1
    4c0a:	ec 0f       	add	r30, r28
    4c0c:	fd 1f       	adc	r31, r29
    4c0e:	2f 5f       	subi	r18, 0xFF	; 255
    4c10:	3f 4f       	sbci	r19, 0xFF	; 255
    4c12:	80 81       	ld	r24, Z
    4c14:	80 32       	cpi	r24, 0x20	; 32
    4c16:	41 f4       	brne	.+16     	; 0x4c28 <RemSpaceLag+0x60>
		      Spaced[Length-i-1]=0;
    4c18:	10 82       	st	Z, r1
    4c1a:	ba 2f       	mov	r27, r26
    4c1c:	b2 1b       	sub	r27, r18
*/
                                                      //012345678
void RemSpaceLag(char *Spaced){//Remove Space Character 1234SSSSS L=9 i=0 i=7
unsigned char i=0,Length=0,PosSpaced=0;
     Length=strlen(Spaced);
     for(i=0;i<(Length-1);i++){
    4c1e:	82 2f       	mov	r24, r18
    4c20:	90 e0       	ldi	r25, 0x00	; 0
    4c22:	80 17       	cp	r24, r16
    4c24:	91 07       	cpc	r25, r17
    4c26:	2c f3       	brlt	.-54     	; 0x4bf2 <RemSpaceLag+0x2a>
		      Spaced[Length-i-1]=0;
			  PosSpaced=Length-i-2;
			  }
         else break;
	 }
	 if (Spaced[PosSpaced]==' ')Spaced[PosSpaced]=0;
    4c28:	fe 01       	movw	r30, r28
    4c2a:	eb 0f       	add	r30, r27
    4c2c:	f1 1d       	adc	r31, r1
    4c2e:	80 81       	ld	r24, Z
    4c30:	80 32       	cpi	r24, 0x20	; 32
    4c32:	09 f4       	brne	.+2      	; 0x4c36 <RemSpaceLag+0x6e>
    4c34:	10 82       	st	Z, r1
	 if (Spaced[0]==' ')Spaced[0]=0;
    4c36:	88 81       	ld	r24, Y
    4c38:	80 32       	cpi	r24, 0x20	; 32
    4c3a:	09 f4       	brne	.+2      	; 0x4c3e <RemSpaceLag+0x76>
    4c3c:	18 82       	st	Y, r1
	 Spaced[strlen(Spaced)]=0;
    4c3e:	fe 01       	movw	r30, r28
    4c40:	01 90       	ld	r0, Z+
    4c42:	00 20       	and	r0, r0
    4c44:	e9 f7       	brne	.-6      	; 0x4c40 <RemSpaceLag+0x78>
    4c46:	31 97       	sbiw	r30, 0x01	; 1
    4c48:	ec 1b       	sub	r30, r28
    4c4a:	fd 0b       	sbc	r31, r29
    4c4c:	ec 0f       	add	r30, r28
    4c4e:	fd 1f       	adc	r31, r29
    4c50:	10 82       	st	Z, r1
}
    4c52:	df 91       	pop	r29
    4c54:	cf 91       	pop	r28
    4c56:	1f 91       	pop	r17
    4c58:	0f 91       	pop	r16
    4c5a:	08 95       	ret

00004c5c <procMessage57>:
     StrPosCopy(rcv_trans,strAmount,135,7);
     StrPosCopy(rcv_trans,strGainPoints,142,4);
     return Result;
}

char procMessage57(){
    4c5c:	1f 93       	push	r17
	    Dest[IdxSource+i]=Source[i];
	 }Dest[IdxSource+Length]=0;
}
char CharPosCopy(char *Source, unsigned int IdxSource){
     char Result;
     Result=Source[IdxSource];
    4c5e:	10 91 56 09 	lds	r17, 0x0956
    4c62:	20 e0       	ldi	r18, 0x00	; 0
    4c64:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    4c66:	f9 01       	movw	r30, r18
    4c68:	e3 5e       	subi	r30, 0xE3	; 227
    4c6a:	f6 4f       	sbci	r31, 0xF6	; 246
    4c6c:	d9 01       	movw	r26, r18
    4c6e:	a7 57       	subi	r26, 0x77	; 119
    4c70:	b4 4f       	sbci	r27, 0xF4	; 244
    4c72:	95 96       	adiw	r26, 0x25	; 37
    4c74:	8c 91       	ld	r24, X
    4c76:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    4c78:	2f 5f       	subi	r18, 0xFF	; 255
    4c7a:	3f 4f       	sbci	r19, 0xFF	; 255
    4c7c:	24 31       	cpi	r18, 0x14	; 20
    4c7e:	31 05       	cpc	r19, r1
    4c80:	91 f7       	brne	.-28     	; 0x4c66 <procMessage57+0xa>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    4c82:	10 92 31 09 	sts	0x0931, r1
	 
	     //Card Status
		 Result=(CharPosCopy(rcv_trans,57)-'0')+1;
		 //CardID
		 StrPosCopy(strCardID,rcv_trans,37,20);
		 RemSpaceLead(strCardID);
    4c86:	89 e8       	ldi	r24, 0x89	; 137
    4c88:	9b e0       	ldi	r25, 0x0B	; 11
    4c8a:	0e 94 99 25 	call	0x4b32	; 0x4b32 <RemSpaceLead>
    4c8e:	20 e0       	ldi	r18, 0x00	; 0
    4c90:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    4c92:	f9 01       	movw	r30, r18
    4c94:	ec 5d       	subi	r30, 0xDC	; 220
    4c96:	fc 4f       	sbci	r31, 0xFC	; 252
    4c98:	d9 01       	movw	r26, r18
    4c9a:	a3 5e       	subi	r26, 0xE3	; 227
    4c9c:	b6 4f       	sbci	r27, 0xF6	; 246
    4c9e:	dc 96       	adiw	r26, 0x3c	; 60
    4ca0:	8c 91       	ld	r24, X
    4ca2:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    4ca4:	2f 5f       	subi	r18, 0xFF	; 255
    4ca6:	3f 4f       	sbci	r19, 0xFF	; 255
    4ca8:	28 32       	cpi	r18, 0x28	; 40
    4caa:	31 05       	cpc	r19, r1
    4cac:	91 f7       	brne	.-28     	; 0x4c92 <procMessage57+0x36>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    4cae:	10 92 4c 03 	sts	0x034C, r1
		 //CardID
		 StrPosCopy(strCardID,rcv_trans,37,20);
		 RemSpaceLead(strCardID);
	     //Card Holder
		 StrPosCopy(rcv_trans,strCardHolder,60,40);
		 RemSpaceLag(strCardHolder);
    4cb2:	84 e2       	ldi	r24, 0x24	; 36
    4cb4:	93 e0       	ldi	r25, 0x03	; 3
    4cb6:	0e 94 e4 25 	call	0x4bc8	; 0x4bc8 <RemSpaceLag>
    4cba:	20 e0       	ldi	r18, 0x00	; 0
    4cbc:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    4cbe:	f9 01       	movw	r30, r18
    4cc0:	e5 5a       	subi	r30, 0xA5	; 165
    4cc2:	fc 4f       	sbci	r31, 0xFC	; 252
    4cc4:	d9 01       	movw	r26, r18
    4cc6:	ab 54       	subi	r26, 0x4B	; 75
    4cc8:	b6 4f       	sbci	r27, 0xF6	; 246
    4cca:	8c 91       	ld	r24, X
    4ccc:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    4cce:	2f 5f       	subi	r18, 0xFF	; 255
    4cd0:	3f 4f       	sbci	r19, 0xFF	; 255
    4cd2:	29 31       	cpi	r18, 0x19	; 25
    4cd4:	31 05       	cpc	r19, r1
    4cd6:	99 f7       	brne	.-26     	; 0x4cbe <procMessage57+0x62>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    4cd8:	10 92 74 03 	sts	0x0374, r1
	     //Card Holder
		 StrPosCopy(rcv_trans,strCardHolder,60,40);
		 RemSpaceLag(strCardHolder);
		 //BalanceTypePrint
		 StrPosCopy(rcv_trans,strBalanceTypePrint,154-2,25);
		 RemSpaceLag(strBalanceTypePrint);
    4cdc:	8b e5       	ldi	r24, 0x5B	; 91
    4cde:	93 e0       	ldi	r25, 0x03	; 3
    4ce0:	0e 94 e4 25 	call	0x4bc8	; 0x4bc8 <RemSpaceLag>
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    4ce4:	80 91 ce 09 	lds	r24, 0x09CE
    4ce8:	80 93 e5 02 	sts	0x02E5, r24
	 }Dest[Length]=0;
    4cec:	10 92 e6 02 	sts	0x02E6, r1
    4cf0:	20 e0       	ldi	r18, 0x00	; 0
    4cf2:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    4cf4:	f9 01       	movw	r30, r18
    4cf6:	e8 50       	subi	r30, 0x08	; 8
    4cf8:	f4 4f       	sbci	r31, 0xF4	; 244
    4cfa:	d9 01       	movw	r26, r18
    4cfc:	a1 53       	subi	r26, 0x31	; 49
    4cfe:	b6 4f       	sbci	r27, 0xF6	; 246
    4d00:	8c 91       	ld	r24, X
    4d02:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    4d04:	2f 5f       	subi	r18, 0xFF	; 255
    4d06:	3f 4f       	sbci	r19, 0xFF	; 255
    4d08:	2d 30       	cpi	r18, 0x0D	; 13
    4d0a:	31 05       	cpc	r19, r1
    4d0c:	99 f7       	brne	.-26     	; 0x4cf4 <procMessage57+0x98>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    4d0e:	10 92 05 0c 	sts	0x0C05, r1
		 RemSpaceLag(strBalanceTypePrint);
         //BalanceTypeCode
		 StrPosCopy(rcv_trans,strBalanceCode,177,1);
		 //Balance
		 StrPosCopy(rcv_trans,strBalance,178,13);
		 RemSpaceLead(strBalance);
    4d12:	88 ef       	ldi	r24, 0xF8	; 248
    4d14:	9b e0       	ldi	r25, 0x0B	; 11
    4d16:	0e 94 99 25 	call	0x4b32	; 0x4b32 <RemSpaceLead>
    4d1a:	20 e0       	ldi	r18, 0x00	; 0
    4d1c:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    4d1e:	f9 01       	movw	r30, r18
    4d20:	e6 50       	subi	r30, 0x06	; 6
    4d22:	f7 4f       	sbci	r31, 0xF7	; 247
    4d24:	d9 01       	movw	r26, r18
    4d26:	a4 52       	subi	r26, 0x24	; 36
    4d28:	b6 4f       	sbci	r27, 0xF6	; 246
    4d2a:	8c 91       	ld	r24, X
    4d2c:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    4d2e:	2f 5f       	subi	r18, 0xFF	; 255
    4d30:	3f 4f       	sbci	r19, 0xFF	; 255
    4d32:	2a 30       	cpi	r18, 0x0A	; 10
    4d34:	31 05       	cpc	r19, r1
    4d36:	99 f7       	brne	.-26     	; 0x4d1e <procMessage57+0xc2>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    4d38:	10 92 04 09 	sts	0x0904, r1
		 //Balance
		 StrPosCopy(rcv_trans,strBalance,178,13);
		 RemSpaceLead(strBalance);
		 //LicPlate
		 StrPosCopy(rcv_trans,strLicPlate,193-2,10);
		 RemSpaceLag(strLicPlate);
    4d3c:	8a ef       	ldi	r24, 0xFA	; 250
    4d3e:	98 e0       	ldi	r25, 0x08	; 8
    4d40:	0e 94 e4 25 	call	0x4bc8	; 0x4bc8 <RemSpaceLag>
    4d44:	20 e0       	ldi	r18, 0x00	; 0
    4d46:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    4d48:	f9 01       	movw	r30, r18
    4d4a:	e7 58       	subi	r30, 0x87	; 135
    4d4c:	f8 4f       	sbci	r31, 0xF8	; 248
    4d4e:	d9 01       	movw	r26, r18
    4d50:	aa 51       	subi	r26, 0x1A	; 26
    4d52:	b6 4f       	sbci	r27, 0xF6	; 246
    4d54:	8c 91       	ld	r24, X
    4d56:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    4d58:	2f 5f       	subi	r18, 0xFF	; 255
    4d5a:	3f 4f       	sbci	r19, 0xFF	; 255
    4d5c:	24 31       	cpi	r18, 0x14	; 20
    4d5e:	31 05       	cpc	r19, r1
    4d60:	99 f7       	brne	.-26     	; 0x4d48 <procMessage57+0xec>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    4d62:	10 92 8d 07 	sts	0x078D, r1
		 //LicPlate
		 StrPosCopy(rcv_trans,strLicPlate,193-2,10);
		 RemSpaceLag(strLicPlate);
		 //CompName
		 StrPosCopy(rcv_trans,strCompName,203-2,20);
		 RemSpaceLag(strCompName);
    4d66:	89 e7       	ldi	r24, 0x79	; 121
    4d68:	97 e0       	ldi	r25, 0x07	; 7
    4d6a:	0e 94 e4 25 	call	0x4bc8	; 0x4bc8 <RemSpaceLag>
		 uart_print(0,1,strCompName);
		 
uart_print(0,1,strCardID);
*/	
     return Result;
}
    4d6e:	81 2f       	mov	r24, r17
    4d70:	8f 52       	subi	r24, 0x2F	; 47
    4d72:	1f 91       	pop	r17
    4d74:	08 95       	ret

00004d76 <clearString>:
	     break;
	}
  return Result;
}

void clearString(char *str){
    4d76:	20 e0       	ldi	r18, 0x00	; 0
    4d78:	30 e0       	ldi	r19, 0x00	; 0
    4d7a:	06 c0       	rjmp	.+12     	; 0x4d88 <clearString+0x12>
     int i;
	 for(i=0;i<strlen(str);i++){
	    str[i]=0;
    4d7c:	fc 01       	movw	r30, r24
    4d7e:	e2 0f       	add	r30, r18
    4d80:	f3 1f       	adc	r31, r19
    4d82:	10 82       	st	Z, r1
  return Result;
}

void clearString(char *str){
     int i;
	 for(i=0;i<strlen(str);i++){
    4d84:	2f 5f       	subi	r18, 0xFF	; 255
    4d86:	3f 4f       	sbci	r19, 0xFF	; 255
    4d88:	fc 01       	movw	r30, r24
    4d8a:	01 90       	ld	r0, Z+
    4d8c:	00 20       	and	r0, r0
    4d8e:	e9 f7       	brne	.-6      	; 0x4d8a <clearString+0x14>
    4d90:	31 97       	sbiw	r30, 0x01	; 1
    4d92:	e8 1b       	sub	r30, r24
    4d94:	f9 0b       	sbc	r31, r25
    4d96:	2e 17       	cp	r18, r30
    4d98:	3f 07       	cpc	r19, r31
    4d9a:	80 f3       	brcs	.-32     	; 0x4d7c <clearString+0x6>
	    str[i]=0;
	 }
}
    4d9c:	08 95       	ret

00004d9e <AddZeroLead>:
	 }String[Size]=0;
  }
}


void AddZeroLead(char *String,unsigned char Size){// 1234 ->0000001234
    4d9e:	bf 92       	push	r11
    4da0:	cf 92       	push	r12
    4da2:	df 92       	push	r13
    4da4:	ef 92       	push	r14
    4da6:	ff 92       	push	r15
    4da8:	0f 93       	push	r16
    4daa:	1f 93       	push	r17
    4dac:	df 93       	push	r29
    4dae:	cf 93       	push	r28
    4db0:	cd b7       	in	r28, 0x3d	; 61
    4db2:	de b7       	in	r29, 0x3e	; 62
    4db4:	6e 97       	sbiw	r28, 0x1e	; 30
    4db6:	0f b6       	in	r0, 0x3f	; 63
    4db8:	f8 94       	cli
    4dba:	de bf       	out	0x3e, r29	; 62
    4dbc:	0f be       	out	0x3f, r0	; 63
    4dbe:	cd bf       	out	0x3d, r28	; 61
    4dc0:	8c 01       	movw	r16, r24
     char i,Length,strAdded[30];
     Length=strlen(String);
    4dc2:	fc 01       	movw	r30, r24
    4dc4:	01 90       	ld	r0, Z+
    4dc6:	00 20       	and	r0, r0
    4dc8:	e9 f7       	brne	.-6      	; 0x4dc4 <AddZeroLead+0x26>
    4dca:	31 97       	sbiw	r30, 0x01	; 1
    4dcc:	2e 2f       	mov	r18, r30
    4dce:	28 1b       	sub	r18, r24

	 if (Size>Length){
    4dd0:	26 17       	cp	r18, r22
    4dd2:	e0 f5       	brcc	.+120    	; 0x4e4c <AddZeroLead+0xae>
    4dd4:	7e 01       	movw	r14, r28
    4dd6:	08 94       	sec
    4dd8:	e1 1c       	adc	r14, r1
    4dda:	f1 1c       	adc	r15, r1
    4ddc:	f7 01       	movw	r30, r14
	 }String[Size]=0;
  }
}


void AddZeroLead(char *String,unsigned char Size){// 1234 ->0000001234
    4dde:	be 2c       	mov	r11, r14
     char i,Length,strAdded[30];
     Length=strlen(String);

	 if (Size>Length){
         for(i=0;i<Size;i++){
	         strAdded[i]='0';
    4de0:	90 e3       	ldi	r25, 0x30	; 48
    4de2:	01 c0       	rjmp	.+2      	; 0x4de6 <AddZeroLead+0x48>
    4de4:	91 93       	st	Z+, r25
void AddZeroLead(char *String,unsigned char Size){// 1234 ->0000001234
     char i,Length,strAdded[30];
     Length=strlen(String);

	 if (Size>Length){
         for(i=0;i<Size;i++){
    4de6:	8e 2f       	mov	r24, r30
    4de8:	8b 19       	sub	r24, r11
    4dea:	86 17       	cp	r24, r22
    4dec:	d8 f3       	brcs	.-10     	; 0x4de4 <AddZeroLead+0x46>
	         strAdded[i]='0';
	     }strAdded[Size]=0;
    4dee:	46 2f       	mov	r20, r22
    4df0:	50 e0       	ldi	r21, 0x00	; 0
    4df2:	ce 01       	movw	r24, r28
    4df4:	01 96       	adiw	r24, 0x01	; 1
    4df6:	fc 01       	movw	r30, r24
    4df8:	e4 0f       	add	r30, r20
    4dfa:	f5 1f       	adc	r31, r21
    4dfc:	10 82       	st	Z, r1
	     //Copy
         for(i=(Size-Length);i<Size;i++){
    4dfe:	76 2f       	mov	r23, r22
    4e00:	72 1b       	sub	r23, r18
    4e02:	6c 01       	movw	r12, r24
	         strAdded[i]=String[i-(Size-Length)];
    4e04:	30 e0       	ldi	r19, 0x00	; 0
    4e06:	24 1b       	sub	r18, r20
    4e08:	35 0b       	sbc	r19, r21
    4e0a:	0c c0       	rjmp	.+24     	; 0x4e24 <AddZeroLead+0x86>
    4e0c:	e7 2f       	mov	r30, r23
    4e0e:	f0 e0       	ldi	r31, 0x00	; 0
    4e10:	d6 01       	movw	r26, r12
    4e12:	ae 0f       	add	r26, r30
    4e14:	bf 1f       	adc	r27, r31
    4e16:	e0 0f       	add	r30, r16
    4e18:	f1 1f       	adc	r31, r17
    4e1a:	e2 0f       	add	r30, r18
    4e1c:	f3 1f       	adc	r31, r19
    4e1e:	80 81       	ld	r24, Z
    4e20:	8c 93       	st	X, r24
	 if (Size>Length){
         for(i=0;i<Size;i++){
	         strAdded[i]='0';
	     }strAdded[Size]=0;
	     //Copy
         for(i=(Size-Length);i<Size;i++){
    4e22:	7f 5f       	subi	r23, 0xFF	; 255
    4e24:	76 17       	cp	r23, r22
    4e26:	90 f3       	brcs	.-28     	; 0x4e0c <AddZeroLead+0x6e>
	         strAdded[i]=String[i-(Size-Length)];
	     }strAdded[Size]=0;
    4e28:	4c 0d       	add	r20, r12
    4e2a:	5d 1d       	adc	r21, r13
    4e2c:	da 01       	movw	r26, r20
    4e2e:	1c 92       	st	X, r1
    4e30:	f8 01       	movw	r30, r16
    4e32:	04 c0       	rjmp	.+8      	; 0x4e3c <AddZeroLead+0x9e>
	     //Zeroed
         for(i=0;i<Size;i++){
	         String[i]=strAdded[i];
    4e34:	d7 01       	movw	r26, r14
    4e36:	8d 91       	ld	r24, X+
    4e38:	7d 01       	movw	r14, r26
    4e3a:	81 93       	st	Z+, r24
	     //Copy
         for(i=(Size-Length);i<Size;i++){
	         strAdded[i]=String[i-(Size-Length)];
	     }strAdded[Size]=0;
	     //Zeroed
         for(i=0;i<Size;i++){
    4e3c:	8e 2d       	mov	r24, r14
    4e3e:	8b 19       	sub	r24, r11
    4e40:	86 17       	cp	r24, r22
    4e42:	c0 f3       	brcs	.-16     	; 0x4e34 <AddZeroLead+0x96>
	         String[i]=strAdded[i];
	     }String[Size]=0;
    4e44:	06 0f       	add	r16, r22
    4e46:	11 1d       	adc	r17, r1
    4e48:	f8 01       	movw	r30, r16
    4e4a:	10 82       	st	Z, r1
	 }
}
    4e4c:	6e 96       	adiw	r28, 0x1e	; 30
    4e4e:	0f b6       	in	r0, 0x3f	; 63
    4e50:	f8 94       	cli
    4e52:	de bf       	out	0x3e, r29	; 62
    4e54:	0f be       	out	0x3f, r0	; 63
    4e56:	cd bf       	out	0x3d, r28	; 61
    4e58:	cf 91       	pop	r28
    4e5a:	df 91       	pop	r29
    4e5c:	1f 91       	pop	r17
    4e5e:	0f 91       	pop	r16
    4e60:	ff 90       	pop	r15
    4e62:	ef 90       	pop	r14
    4e64:	df 90       	pop	r13
    4e66:	cf 90       	pop	r12
    4e68:	bf 90       	pop	r11
    4e6a:	08 95       	ret

00004e6c <GetTotalizerMoney>:
	     FIPAddr=FIPAddr-1;	     
	     GetTotalizerData(TVOLUME,TOTALIZER_NOW,FIPAddr,iGrade,Result);
	 }
	 //NormalizeDecimal(eeprom_read_byte(&DefDecimalTotalVolume),2,Result);
}
void GetTotalizerMoney(char iPumpID,char iGrade, char *Result){
    4e6c:	0f 93       	push	r16
    4e6e:	1f 93       	push	r17
    4e70:	cf 93       	push	r28
    4e72:	df 93       	push	r29
    4e74:	18 2f       	mov	r17, r24
    4e76:	06 2f       	mov	r16, r22
    4e78:	ea 01       	movw	r28, r20
     char FIPAddr;
     AddZeroLead(Result,13); 
    4e7a:	ca 01       	movw	r24, r20
    4e7c:	6d e0       	ldi	r22, 0x0D	; 13
    4e7e:	0e 94 cf 26 	call	0x4d9e	; 0x4d9e <AddZeroLead>
	 FIPAddr=GetFIPAddr(iPumpID);
    4e82:	81 2f       	mov	r24, r17
    4e84:	0e 94 0a 20 	call	0x4014	; 0x4014 <GetFIPAddr>
    4e88:	48 2f       	mov	r20, r24
	 if (FIPAddr>0){
    4e8a:	88 23       	and	r24, r24
    4e8c:	39 f0       	breq	.+14     	; 0x4e9c <GetTotalizerMoney+0x30>
	    FIPAddr=FIPAddr-1;
	    GetTotalizerData(TMONEY,TOTALIZER_NOW,FIPAddr,iGrade,Result);
    4e8e:	41 50       	subi	r20, 0x01	; 1
    4e90:	81 e0       	ldi	r24, 0x01	; 1
    4e92:	61 e0       	ldi	r22, 0x01	; 1
    4e94:	20 2f       	mov	r18, r16
    4e96:	8e 01       	movw	r16, r28
    4e98:	0e 94 c1 20 	call	0x4182	; 0x4182 <GetTotalizerData>
	}
	 //NormalizeDecimal(eeprom_read_byte(&DefDecimalTotalMoney),2,Result);
}
    4e9c:	df 91       	pop	r29
    4e9e:	cf 91       	pop	r28
    4ea0:	1f 91       	pop	r17
    4ea2:	0f 91       	pop	r16
    4ea4:	08 95       	ret

00004ea6 <GetTotalizerVolume>:
     AddZeroLead(Result,10);
	 sprintf_P(Result,PSTR("%s"),RecPumpData[iPumpID&0x0F].Money);
	 //NormalizeDecimal(eeprom_read_byte(&DefDecimalMoney),3,Result);
}

void GetTotalizerVolume(char iPumpID,char iGrade,char *Result){
    4ea6:	0f 93       	push	r16
    4ea8:	1f 93       	push	r17
    4eaa:	cf 93       	push	r28
    4eac:	df 93       	push	r29
    4eae:	18 2f       	mov	r17, r24
    4eb0:	06 2f       	mov	r16, r22
    4eb2:	ea 01       	movw	r28, r20
     char FIPAddr;
     AddZeroLead(Result,11);
    4eb4:	ca 01       	movw	r24, r20
    4eb6:	6b e0       	ldi	r22, 0x0B	; 11
    4eb8:	0e 94 cf 26 	call	0x4d9e	; 0x4d9e <AddZeroLead>
	 FIPAddr=GetFIPAddr(iPumpID);
    4ebc:	81 2f       	mov	r24, r17
    4ebe:	0e 94 0a 20 	call	0x4014	; 0x4014 <GetFIPAddr>
    4ec2:	48 2f       	mov	r20, r24
	 if (FIPAddr>0){
    4ec4:	88 23       	and	r24, r24
    4ec6:	39 f0       	breq	.+14     	; 0x4ed6 <GetTotalizerVolume+0x30>
	     FIPAddr=FIPAddr-1;	     
	     GetTotalizerData(TVOLUME,TOTALIZER_NOW,FIPAddr,iGrade,Result);
    4ec8:	41 50       	subi	r20, 0x01	; 1
    4eca:	80 e0       	ldi	r24, 0x00	; 0
    4ecc:	61 e0       	ldi	r22, 0x01	; 1
    4ece:	20 2f       	mov	r18, r16
    4ed0:	8e 01       	movw	r16, r28
    4ed2:	0e 94 c1 20 	call	0x4182	; 0x4182 <GetTotalizerData>
	 }
	 //NormalizeDecimal(eeprom_read_byte(&DefDecimalTotalVolume),2,Result);
}
    4ed6:	df 91       	pop	r29
    4ed8:	cf 91       	pop	r28
    4eda:	1f 91       	pop	r17
    4edc:	0f 91       	pop	r16
    4ede:	08 95       	ret

00004ee0 <GetTransactionMoney>:
void GetTransactionVolume(char iPumpID,char *Result){
     AddZeroLead(Result,10);
     sprintf_P(Result,PSTR("%s"),RecPumpData[iPumpID&0x0F].Volume); 
	 //NormalizeDecimal(eeprom_read_byte(&DefDecimalVolume),3,Result);
}
void GetTransactionMoney(char iPumpID,char *Result){
    4ee0:	ef 92       	push	r14
    4ee2:	ff 92       	push	r15
    4ee4:	0f 93       	push	r16
    4ee6:	1f 93       	push	r17
    4ee8:	08 2f       	mov	r16, r24
    4eea:	7b 01       	movw	r14, r22
     AddZeroLead(Result,10);
    4eec:	cb 01       	movw	r24, r22
    4eee:	6a e0       	ldi	r22, 0x0A	; 10
    4ef0:	0e 94 cf 26 	call	0x4d9e	; 0x4d9e <AddZeroLead>
	 sprintf_P(Result,PSTR("%s"),RecPumpData[iPumpID&0x0F].Money);
    4ef4:	00 d0       	rcall	.+0      	; 0x4ef6 <GetTransactionMoney+0x16>
    4ef6:	00 d0       	rcall	.+0      	; 0x4ef8 <GetTransactionMoney+0x18>
    4ef8:	00 d0       	rcall	.+0      	; 0x4efa <GetTransactionMoney+0x1a>
    4efa:	ed b7       	in	r30, 0x3d	; 61
    4efc:	fe b7       	in	r31, 0x3e	; 62
    4efe:	31 96       	adiw	r30, 0x01	; 1
    4f00:	ad b7       	in	r26, 0x3d	; 61
    4f02:	be b7       	in	r27, 0x3e	; 62
    4f04:	12 96       	adiw	r26, 0x02	; 2
    4f06:	fc 92       	st	X, r15
    4f08:	ee 92       	st	-X, r14
    4f0a:	11 97       	sbiw	r26, 0x01	; 1
    4f0c:	89 e4       	ldi	r24, 0x49	; 73
    4f0e:	95 e0       	ldi	r25, 0x05	; 5
    4f10:	93 83       	std	Z+3, r25	; 0x03
    4f12:	82 83       	std	Z+2, r24	; 0x02
    4f14:	10 e0       	ldi	r17, 0x00	; 0
    4f16:	0f 70       	andi	r16, 0x0F	; 15
    4f18:	10 70       	andi	r17, 0x00	; 0
    4f1a:	85 e3       	ldi	r24, 0x35	; 53
    4f1c:	90 e0       	ldi	r25, 0x00	; 0
    4f1e:	9c 01       	movw	r18, r24
    4f20:	02 9f       	mul	r16, r18
    4f22:	c0 01       	movw	r24, r0
    4f24:	03 9f       	mul	r16, r19
    4f26:	90 0d       	add	r25, r0
    4f28:	12 9f       	mul	r17, r18
    4f2a:	90 0d       	add	r25, r0
    4f2c:	11 24       	eor	r1, r1
    4f2e:	8c 52       	subi	r24, 0x2C	; 44
    4f30:	9a 4f       	sbci	r25, 0xFA	; 250
    4f32:	95 83       	std	Z+5, r25	; 0x05
    4f34:	84 83       	std	Z+4, r24	; 0x04
    4f36:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
    4f3a:	8d b7       	in	r24, 0x3d	; 61
    4f3c:	9e b7       	in	r25, 0x3e	; 62
    4f3e:	06 96       	adiw	r24, 0x06	; 6
    4f40:	0f b6       	in	r0, 0x3f	; 63
    4f42:	f8 94       	cli
    4f44:	9e bf       	out	0x3e, r25	; 62
    4f46:	0f be       	out	0x3f, r0	; 63
    4f48:	8d bf       	out	0x3d, r24	; 61
	 //NormalizeDecimal(eeprom_read_byte(&DefDecimalMoney),3,Result);
}
    4f4a:	1f 91       	pop	r17
    4f4c:	0f 91       	pop	r16
    4f4e:	ff 90       	pop	r15
    4f50:	ef 90       	pop	r14
    4f52:	08 95       	ret

00004f54 <GetTransactionVolume>:
     }
*/
     FormatDecimal(Result,CurrentDecimal);
}

void GetTransactionVolume(char iPumpID,char *Result){
    4f54:	ef 92       	push	r14
    4f56:	ff 92       	push	r15
    4f58:	0f 93       	push	r16
    4f5a:	1f 93       	push	r17
    4f5c:	08 2f       	mov	r16, r24
    4f5e:	7b 01       	movw	r14, r22
     AddZeroLead(Result,10);
    4f60:	cb 01       	movw	r24, r22
    4f62:	6a e0       	ldi	r22, 0x0A	; 10
    4f64:	0e 94 cf 26 	call	0x4d9e	; 0x4d9e <AddZeroLead>
     sprintf_P(Result,PSTR("%s"),RecPumpData[iPumpID&0x0F].Volume); 
    4f68:	00 d0       	rcall	.+0      	; 0x4f6a <GetTransactionVolume+0x16>
    4f6a:	00 d0       	rcall	.+0      	; 0x4f6c <GetTransactionVolume+0x18>
    4f6c:	00 d0       	rcall	.+0      	; 0x4f6e <GetTransactionVolume+0x1a>
    4f6e:	ed b7       	in	r30, 0x3d	; 61
    4f70:	fe b7       	in	r31, 0x3e	; 62
    4f72:	31 96       	adiw	r30, 0x01	; 1
    4f74:	ad b7       	in	r26, 0x3d	; 61
    4f76:	be b7       	in	r27, 0x3e	; 62
    4f78:	12 96       	adiw	r26, 0x02	; 2
    4f7a:	fc 92       	st	X, r15
    4f7c:	ee 92       	st	-X, r14
    4f7e:	11 97       	sbiw	r26, 0x01	; 1
    4f80:	8c e4       	ldi	r24, 0x4C	; 76
    4f82:	95 e0       	ldi	r25, 0x05	; 5
    4f84:	93 83       	std	Z+3, r25	; 0x03
    4f86:	82 83       	std	Z+2, r24	; 0x02
    4f88:	10 e0       	ldi	r17, 0x00	; 0
    4f8a:	0f 70       	andi	r16, 0x0F	; 15
    4f8c:	10 70       	andi	r17, 0x00	; 0
    4f8e:	85 e3       	ldi	r24, 0x35	; 53
    4f90:	90 e0       	ldi	r25, 0x00	; 0
    4f92:	9c 01       	movw	r18, r24
    4f94:	02 9f       	mul	r16, r18
    4f96:	c0 01       	movw	r24, r0
    4f98:	03 9f       	mul	r16, r19
    4f9a:	90 0d       	add	r25, r0
    4f9c:	12 9f       	mul	r17, r18
    4f9e:	90 0d       	add	r25, r0
    4fa0:	11 24       	eor	r1, r1
    4fa2:	85 53       	subi	r24, 0x35	; 53
    4fa4:	9a 4f       	sbci	r25, 0xFA	; 250
    4fa6:	95 83       	std	Z+5, r25	; 0x05
    4fa8:	84 83       	std	Z+4, r24	; 0x04
    4faa:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
    4fae:	8d b7       	in	r24, 0x3d	; 61
    4fb0:	9e b7       	in	r25, 0x3e	; 62
    4fb2:	06 96       	adiw	r24, 0x06	; 6
    4fb4:	0f b6       	in	r0, 0x3f	; 63
    4fb6:	f8 94       	cli
    4fb8:	9e bf       	out	0x3e, r25	; 62
    4fba:	0f be       	out	0x3f, r0	; 63
    4fbc:	8d bf       	out	0x3d, r24	; 61
	 //NormalizeDecimal(eeprom_read_byte(&DefDecimalVolume),3,Result);
}
    4fbe:	1f 91       	pop	r17
    4fc0:	0f 91       	pop	r16
    4fc2:	ff 90       	pop	r15
    4fc4:	ef 90       	pop	r14
    4fc6:	08 95       	ret

00004fc8 <SetTotalizerData>:
			  }
		  }
	 }
}

void SetTotalizerData(char TType, char TAddr, char xPumpAddr, char xGradeAddr, char *strValue){// 0 1 1 "00000000"
    4fc8:	af 92       	push	r10
    4fca:	bf 92       	push	r11
    4fcc:	cf 92       	push	r12
    4fce:	df 92       	push	r13
    4fd0:	ef 92       	push	r14
    4fd2:	ff 92       	push	r15
    4fd4:	0f 93       	push	r16
    4fd6:	1f 93       	push	r17
    4fd8:	df 93       	push	r29
    4fda:	cf 93       	push	r28
    4fdc:	cd b7       	in	r28, 0x3d	; 61
    4fde:	de b7       	in	r29, 0x3e	; 62
    4fe0:	65 97       	sbiw	r28, 0x15	; 21
    4fe2:	0f b6       	in	r0, 0x3f	; 63
    4fe4:	f8 94       	cli
    4fe6:	de bf       	out	0x3e, r29	; 62
    4fe8:	0f be       	out	0x3f, r0	; 63
    4fea:	cd bf       	out	0x3d, r28	; 61
    4fec:	d8 2e       	mov	r13, r24
    4fee:	c6 2e       	mov	r12, r22
    4ff0:	b4 2e       	mov	r11, r20
    4ff2:	a2 2e       	mov	r10, r18
     char rawValue[6],iPumpAddr,iGrade;
	 char strPValue[15];
	 char Idx;
	 char strSend[30];
	 //Convert String to RawData
	 if (strlen(strValue)<=12){
    4ff4:	d8 01       	movw	r26, r16
    4ff6:	0d 90       	ld	r0, X+
    4ff8:	00 20       	and	r0, r0
    4ffa:	e9 f7       	brne	.-6      	; 0x4ff6 <SetTotalizerData+0x2e>
    4ffc:	11 97       	sbiw	r26, 0x01	; 1
    4ffe:	a0 1b       	sub	r26, r16
    5000:	b1 0b       	sbc	r27, r17
    5002:	77 e0       	ldi	r23, 0x07	; 7
    5004:	e7 2e       	mov	r14, r23
    5006:	f1 2c       	mov	r15, r1
    5008:	ec 0e       	add	r14, r28
    500a:	fd 1e       	adc	r15, r29
    500c:	ad 30       	cpi	r26, 0x0D	; 13
    500e:	b1 05       	cpc	r27, r1
    5010:	58 f5       	brcc	.+86     	; 0x5068 <SetTotalizerData+0xa0>
	     sprintf_P(strPValue,PSTR("%s"),strValue);
    5012:	00 d0       	rcall	.+0      	; 0x5014 <SetTotalizerData+0x4c>
    5014:	00 d0       	rcall	.+0      	; 0x5016 <SetTotalizerData+0x4e>
    5016:	00 d0       	rcall	.+0      	; 0x5018 <SetTotalizerData+0x50>
    5018:	ed b7       	in	r30, 0x3d	; 61
    501a:	fe b7       	in	r31, 0x3e	; 62
    501c:	31 96       	adiw	r30, 0x01	; 1
    501e:	ad b7       	in	r26, 0x3d	; 61
    5020:	be b7       	in	r27, 0x3e	; 62
    5022:	12 96       	adiw	r26, 0x02	; 2
    5024:	fc 92       	st	X, r15
    5026:	ee 92       	st	-X, r14
    5028:	11 97       	sbiw	r26, 0x01	; 1
    502a:	8e e1       	ldi	r24, 0x1E	; 30
    502c:	97 e0       	ldi	r25, 0x07	; 7
    502e:	93 83       	std	Z+3, r25	; 0x03
    5030:	82 83       	std	Z+2, r24	; 0x02
    5032:	15 83       	std	Z+5, r17	; 0x05
    5034:	04 83       	std	Z+4, r16	; 0x04
    5036:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
		 if (strlen(strPValue)<12)AddZeroLead(strPValue,12);
    503a:	f7 01       	movw	r30, r14
    503c:	01 90       	ld	r0, Z+
    503e:	00 20       	and	r0, r0
    5040:	e9 f7       	brne	.-6      	; 0x503c <SetTotalizerData+0x74>
    5042:	31 97       	sbiw	r30, 0x01	; 1
    5044:	ee 19       	sub	r30, r14
    5046:	ff 09       	sbc	r31, r15
    5048:	4d b7       	in	r20, 0x3d	; 61
    504a:	5e b7       	in	r21, 0x3e	; 62
    504c:	4a 5f       	subi	r20, 0xFA	; 250
    504e:	5f 4f       	sbci	r21, 0xFF	; 255
    5050:	0f b6       	in	r0, 0x3f	; 63
    5052:	f8 94       	cli
    5054:	5e bf       	out	0x3e, r21	; 62
    5056:	0f be       	out	0x3f, r0	; 63
    5058:	4d bf       	out	0x3d, r20	; 61
    505a:	3c 97       	sbiw	r30, 0x0c	; 12
    505c:	a0 f4       	brcc	.+40     	; 0x5086 <SetTotalizerData+0xbe>
    505e:	c7 01       	movw	r24, r14
    5060:	6c e0       	ldi	r22, 0x0C	; 12
    5062:	0e 94 cf 26 	call	0x4d9e	; 0x4d9e <AddZeroLead>
    5066:	0f c0       	rjmp	.+30     	; 0x5086 <SetTotalizerData+0xbe>
    5068:	8a 2f       	mov	r24, r26
    506a:	8c 50       	subi	r24, 0x0C	; 12
    506c:	f8 01       	movw	r30, r16
    506e:	e8 0f       	add	r30, r24
    5070:	f1 1d       	adc	r31, r1
    5072:	d7 01       	movw	r26, r14
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    5074:	9e 01       	movw	r18, r28
    5076:	2d 5e       	subi	r18, 0xED	; 237
    5078:	3f 4f       	sbci	r19, 0xFF	; 255
	    Dest[i]=Source[IdxSource+i];
    507a:	81 91       	ld	r24, Z+
    507c:	8d 93       	st	X+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    507e:	a2 17       	cp	r26, r18
    5080:	b3 07       	cpc	r27, r19
    5082:	d9 f7       	brne	.-10     	; 0x507a <SetTotalizerData+0xb2>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    5084:	1b 8a       	std	Y+19, r1	; 0x13
	 else {//Lebih dari 8: 0123456789
	     Idx=strlen(strValue)-12;
	     StrPosCopy(strValue,strPValue,Idx,12);
	 }

	 iPumpAddr=(xPumpAddr&0x0F);
    5086:	0b 2d       	mov	r16, r11
    5088:	0f 70       	andi	r16, 0x0F	; 15
	 if ((xGradeAddr>=1)&&(xGradeAddr<=6))
    508a:	1a 2d       	mov	r17, r10
    508c:	11 50       	subi	r17, 0x01	; 1
    508e:	16 30       	cpi	r17, 0x06	; 6
    5090:	08 f0       	brcs	.+2      	; 0x5094 <SetTotalizerData+0xcc>
    5092:	10 e0       	ldi	r17, 0x00	; 0
	     iGrade=xGradeAddr-1;
	 StrToRaw(strPValue,rawValue);
    5094:	ce 01       	movw	r24, r28
    5096:	07 96       	adiw	r24, 0x07	; 7
    5098:	7e 01       	movw	r14, r28
    509a:	08 94       	sec
    509c:	e1 1c       	adc	r14, r1
    509e:	f1 1c       	adc	r15, r1
    50a0:	b7 01       	movw	r22, r14
    50a2:	0e 94 e8 19 	call	0x33d0	; 0x33d0 <StrToRaw>

	 if (TType==TVOLUME)eeprom_write_block((const void*)&rawValue,(void*)&(TotalVolume[TAddr][iPumpAddr][iGrade]), sizeof(rawValue));
    50a6:	dd 20       	and	r13, r13
    50a8:	d9 f4       	brne	.+54     	; 0x50e0 <SetTotalizerData+0x118>
    50aa:	64 e2       	ldi	r22, 0x24	; 36
    50ac:	06 9f       	mul	r16, r22
    50ae:	b0 01       	movw	r22, r0
    50b0:	11 24       	eor	r1, r1
    50b2:	2c 2d       	mov	r18, r12
    50b4:	30 e0       	ldi	r19, 0x00	; 0
    50b6:	80 e2       	ldi	r24, 0x20	; 32
    50b8:	91 e0       	ldi	r25, 0x01	; 1
    50ba:	dc 01       	movw	r26, r24
    50bc:	2a 9f       	mul	r18, r26
    50be:	c0 01       	movw	r24, r0
    50c0:	2b 9f       	mul	r18, r27
    50c2:	90 0d       	add	r25, r0
    50c4:	3a 9f       	mul	r19, r26
    50c6:	90 0d       	add	r25, r0
    50c8:	11 24       	eor	r1, r1
    50ca:	68 0f       	add	r22, r24
    50cc:	79 1f       	adc	r23, r25
    50ce:	86 e0       	ldi	r24, 0x06	; 6
    50d0:	18 9f       	mul	r17, r24
    50d2:	c0 01       	movw	r24, r0
    50d4:	11 24       	eor	r1, r1
    50d6:	68 0f       	add	r22, r24
    50d8:	79 1f       	adc	r23, r25
    50da:	6c 53       	subi	r22, 0x3C	; 60
    50dc:	7c 4f       	sbci	r23, 0xFC	; 252
    50de:	1d c0       	rjmp	.+58     	; 0x511a <SetTotalizerData+0x152>
	 else 
	 if (TType==TMONEY)eeprom_write_block((const void*)&rawValue,(void*)&(TotalMoney[TAddr][iPumpAddr][iGrade]), sizeof(rawValue));
    50e0:	b1 e0       	ldi	r27, 0x01	; 1
    50e2:	db 16       	cp	r13, r27
    50e4:	f9 f4       	brne	.+62     	; 0x5124 <SetTotalizerData+0x15c>
    50e6:	64 e2       	ldi	r22, 0x24	; 36
    50e8:	06 9f       	mul	r16, r22
    50ea:	b0 01       	movw	r22, r0
    50ec:	11 24       	eor	r1, r1
    50ee:	2c 2d       	mov	r18, r12
    50f0:	30 e0       	ldi	r19, 0x00	; 0
    50f2:	80 e2       	ldi	r24, 0x20	; 32
    50f4:	91 e0       	ldi	r25, 0x01	; 1
    50f6:	ac 01       	movw	r20, r24
    50f8:	24 9f       	mul	r18, r20
    50fa:	c0 01       	movw	r24, r0
    50fc:	25 9f       	mul	r18, r21
    50fe:	90 0d       	add	r25, r0
    5100:	34 9f       	mul	r19, r20
    5102:	90 0d       	add	r25, r0
    5104:	11 24       	eor	r1, r1
    5106:	68 0f       	add	r22, r24
    5108:	79 1f       	adc	r23, r25
    510a:	86 e0       	ldi	r24, 0x06	; 6
    510c:	18 9f       	mul	r17, r24
    510e:	c0 01       	movw	r24, r0
    5110:	11 24       	eor	r1, r1
    5112:	68 0f       	add	r22, r24
    5114:	79 1f       	adc	r23, r25
    5116:	6c 5f       	subi	r22, 0xFC	; 252
    5118:	79 4f       	sbci	r23, 0xF9	; 249
    511a:	c7 01       	movw	r24, r14
    511c:	46 e0       	ldi	r20, 0x06	; 6
    511e:	50 e0       	ldi	r21, 0x00	; 0
    5120:	0e 94 48 ad 	call	0x15a90	; 0x15a90 <__eewr_block_m128>
}
    5124:	65 96       	adiw	r28, 0x15	; 21
    5126:	0f b6       	in	r0, 0x3f	; 63
    5128:	f8 94       	cli
    512a:	de bf       	out	0x3e, r29	; 62
    512c:	0f be       	out	0x3f, r0	; 63
    512e:	cd bf       	out	0x3d, r28	; 61
    5130:	cf 91       	pop	r28
    5132:	df 91       	pop	r29
    5134:	1f 91       	pop	r17
    5136:	0f 91       	pop	r16
    5138:	ff 90       	pop	r15
    513a:	ef 90       	pop	r14
    513c:	df 90       	pop	r13
    513e:	cf 90       	pop	r12
    5140:	bf 90       	pop	r11
    5142:	af 90       	pop	r10
    5144:	08 95       	ret

00005146 <SaveTotalizerCurrentToLast>:
	 }Dest[12]=0;
}

//SetTotalizerData(TVOLUME,TOTALIZER_NOW,1,1,strVolume)

void SaveTotalizerCurrentToLast(){
    5146:	4f 92       	push	r4
    5148:	5f 92       	push	r5
    514a:	7f 92       	push	r7
    514c:	8f 92       	push	r8
    514e:	9f 92       	push	r9
    5150:	af 92       	push	r10
    5152:	bf 92       	push	r11
    5154:	cf 92       	push	r12
    5156:	df 92       	push	r13
    5158:	ef 92       	push	r14
    515a:	ff 92       	push	r15
    515c:	0f 93       	push	r16
    515e:	1f 93       	push	r17
    5160:	df 93       	push	r29
    5162:	cf 93       	push	r28
    5164:	cd b7       	in	r28, 0x3d	; 61
    5166:	de b7       	in	r29, 0x3e	; 62
    5168:	2f 97       	sbiw	r28, 0x0f	; 15
    516a:	0f b6       	in	r0, 0x3f	; 63
    516c:	f8 94       	cli
    516e:	de bf       	out	0x3e, r29	; 62
    5170:	0f be       	out	0x3f, r0	; 63
    5172:	cd bf       	out	0x3d, r28	; 61
    5174:	77 24       	eor	r7, r7
    5176:	73 94       	inc	r7
	 
	 for (iPump=1;iPump<=16;iPump++){//Pump
	      FIPAddr=GetFIPAddr(iPump);
		  if (FIPAddr>0){
		      FIPAddr=FIPAddr-1;
			  for(iGrade=1;iGrade<=6;iGrade++){
    5178:	4e 01       	movw	r8, r28
    517a:	08 94       	sec
    517c:	81 1c       	adc	r8, r1
    517e:	91 1c       	adc	r9, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    5180:	e0 e1       	ldi	r30, 0x10	; 16
    5182:	4e 2e       	mov	r4, r30
    5184:	51 2c       	mov	r5, r1
    5186:	4c 0e       	add	r4, r28
    5188:	5d 1e       	adc	r5, r29
     char iPump,iGrade;
     char strValue[15];
     char FIPAddr;
	 
	 for (iPump=1;iPump<=16;iPump++){//Pump
	      FIPAddr=GetFIPAddr(iPump);
    518a:	87 2d       	mov	r24, r7
    518c:	0e 94 0a 20 	call	0x4014	; 0x4014 <GetFIPAddr>
		  if (FIPAddr>0){
    5190:	88 23       	and	r24, r24
    5192:	91 f1       	breq	.+100    	; 0x51f8 <SaveTotalizerCurrentToLast+0xb2>
		      FIPAddr=FIPAddr-1;
    5194:	a8 2e       	mov	r10, r24
    5196:	aa 94       	dec	r10
    5198:	bb 24       	eor	r11, r11
    519a:	b3 94       	inc	r11
    519c:	2a c0       	rjmp	.+84     	; 0x51f2 <SaveTotalizerCurrentToLast+0xac>
}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
	     strMemory[i]=data;
    519e:	f7 01       	movw	r30, r14
    51a0:	11 92       	st	Z+, r1
    51a2:	7f 01       	movw	r14, r30

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    51a4:	e4 15       	cp	r30, r4
    51a6:	f5 05       	cpc	r31, r5
    51a8:	d1 f7       	brne	.-12     	; 0x519e <SaveTotalizerCurrentToLast+0x58>
	      FIPAddr=GetFIPAddr(iPump);
		  if (FIPAddr>0){
		      FIPAddr=FIPAddr-1;
			  for(iGrade=1;iGrade<=6;iGrade++){
				  FillChar(strValue,sizeof(strValue),0);
				  GetTotalizerData(TVOLUME,TOTALIZER_NOW,FIPAddr,iGrade,strValue);
    51aa:	80 e0       	ldi	r24, 0x00	; 0
    51ac:	61 e0       	ldi	r22, 0x01	; 1
    51ae:	4a 2d       	mov	r20, r10
    51b0:	2b 2d       	mov	r18, r11
    51b2:	84 01       	movw	r16, r8
    51b4:	0e 94 c1 20 	call	0x4182	; 0x4182 <GetTotalizerData>
				  SetTotalizerData(TVOLUME,TOTALIZER_LAST,FIPAddr,iGrade,strValue);
    51b8:	80 e0       	ldi	r24, 0x00	; 0
    51ba:	60 e0       	ldi	r22, 0x00	; 0
    51bc:	4a 2d       	mov	r20, r10
    51be:	2b 2d       	mov	r18, r11
    51c0:	0e 94 e4 27 	call	0x4fc8	; 0x4fc8 <SetTotalizerData>
}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
	     strMemory[i]=data;
    51c4:	f6 01       	movw	r30, r12
    51c6:	11 92       	st	Z+, r1
    51c8:	6f 01       	movw	r12, r30

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    51ca:	ee 15       	cp	r30, r14
    51cc:	ff 05       	cpc	r31, r15
    51ce:	d1 f7       	brne	.-12     	; 0x51c4 <SaveTotalizerCurrentToLast+0x7e>
			  for(iGrade=1;iGrade<=6;iGrade++){
				  FillChar(strValue,sizeof(strValue),0);
				  GetTotalizerData(TVOLUME,TOTALIZER_NOW,FIPAddr,iGrade,strValue);
				  SetTotalizerData(TVOLUME,TOTALIZER_LAST,FIPAddr,iGrade,strValue);
				  FillChar(strValue,sizeof(strValue),0);
				  GetTotalizerData(TMONEY,TOTALIZER_NOW,FIPAddr,iGrade,strValue);
    51d0:	81 e0       	ldi	r24, 0x01	; 1
    51d2:	61 e0       	ldi	r22, 0x01	; 1
    51d4:	4a 2d       	mov	r20, r10
    51d6:	2b 2d       	mov	r18, r11
    51d8:	84 01       	movw	r16, r8
    51da:	0e 94 c1 20 	call	0x4182	; 0x4182 <GetTotalizerData>
				  SetTotalizerData(TMONEY,TOTALIZER_LAST,FIPAddr,iGrade,strValue);
    51de:	81 e0       	ldi	r24, 0x01	; 1
    51e0:	60 e0       	ldi	r22, 0x00	; 0
    51e2:	4a 2d       	mov	r20, r10
    51e4:	2b 2d       	mov	r18, r11
    51e6:	0e 94 e4 27 	call	0x4fc8	; 0x4fc8 <SetTotalizerData>
	 
	 for (iPump=1;iPump<=16;iPump++){//Pump
	      FIPAddr=GetFIPAddr(iPump);
		  if (FIPAddr>0){
		      FIPAddr=FIPAddr-1;
			  for(iGrade=1;iGrade<=6;iGrade++){
    51ea:	b3 94       	inc	r11
    51ec:	f7 e0       	ldi	r31, 0x07	; 7
    51ee:	bf 16       	cp	r11, r31
    51f0:	19 f0       	breq	.+6      	; 0x51f8 <SaveTotalizerCurrentToLast+0xb2>
    51f2:	64 01       	movw	r12, r8
    51f4:	74 01       	movw	r14, r8
    51f6:	d3 cf       	rjmp	.-90     	; 0x519e <SaveTotalizerCurrentToLast+0x58>
void SaveTotalizerCurrentToLast(){
     char iPump,iGrade;
     char strValue[15];
     char FIPAddr;
	 
	 for (iPump=1;iPump<=16;iPump++){//Pump
    51f8:	73 94       	inc	r7
    51fa:	81 e1       	ldi	r24, 0x11	; 17
    51fc:	78 16       	cp	r7, r24
    51fe:	29 f6       	brne	.-118    	; 0x518a <SaveTotalizerCurrentToLast+0x44>
				  GetTotalizerData(TMONEY,TOTALIZER_NOW,FIPAddr,iGrade,strValue);
				  SetTotalizerData(TMONEY,TOTALIZER_LAST,FIPAddr,iGrade,strValue);
			  }
		  }
	 }
}
    5200:	2f 96       	adiw	r28, 0x0f	; 15
    5202:	0f b6       	in	r0, 0x3f	; 63
    5204:	f8 94       	cli
    5206:	de bf       	out	0x3e, r29	; 62
    5208:	0f be       	out	0x3f, r0	; 63
    520a:	cd bf       	out	0x3d, r28	; 61
    520c:	cf 91       	pop	r28
    520e:	df 91       	pop	r29
    5210:	1f 91       	pop	r17
    5212:	0f 91       	pop	r16
    5214:	ff 90       	pop	r15
    5216:	ef 90       	pop	r14
    5218:	df 90       	pop	r13
    521a:	cf 90       	pop	r12
    521c:	bf 90       	pop	r11
    521e:	af 90       	pop	r10
    5220:	9f 90       	pop	r9
    5222:	8f 90       	pop	r8
    5224:	7f 90       	pop	r7
    5226:	5f 90       	pop	r5
    5228:	4f 90       	pop	r4
    522a:	08 95       	ret

0000522c <ResetTotalizer>:
}

//-------------------Totalizer-----------------------------------------
//TAddr{TOTALIZER_LAST,TOTALIZER_NOW}
//TType:{TNONE,TVOLUME,TMONEY};
void ResetTotalizer(char TAddr){//Clear All TotalizerData;
    522c:	af 92       	push	r10
    522e:	bf 92       	push	r11
    5230:	cf 92       	push	r12
    5232:	df 92       	push	r13
    5234:	ef 92       	push	r14
    5236:	ff 92       	push	r15
    5238:	0f 93       	push	r16
    523a:	1f 93       	push	r17
    523c:	df 93       	push	r29
    523e:	cf 93       	push	r28
    5240:	cd b7       	in	r28, 0x3d	; 61
    5242:	de b7       	in	r29, 0x3e	; 62
    5244:	29 97       	sbiw	r28, 0x09	; 9
    5246:	0f b6       	in	r0, 0x3f	; 63
    5248:	f8 94       	cli
    524a:	de bf       	out	0x3e, r29	; 62
    524c:	0f be       	out	0x3f, r0	; 63
    524e:	cd bf       	out	0x3d, r28	; 61
    5250:	a8 2e       	mov	r10, r24
     char iPump,iGrade;
     char strValue[9];
	 char FIPAddr;
	 
	 sprintf_P(strValue,PSTR("00000000"));
    5252:	00 d0       	rcall	.+0      	; 0x5254 <ResetTotalizer+0x28>
    5254:	00 d0       	rcall	.+0      	; 0x5256 <ResetTotalizer+0x2a>
    5256:	6e 01       	movw	r12, r28
    5258:	08 94       	sec
    525a:	c1 1c       	adc	r12, r1
    525c:	d1 1c       	adc	r13, r1
    525e:	ed b7       	in	r30, 0x3d	; 61
    5260:	fe b7       	in	r31, 0x3e	; 62
    5262:	d2 82       	std	Z+2, r13	; 0x02
    5264:	c1 82       	std	Z+1, r12	; 0x01
    5266:	81 e2       	ldi	r24, 0x21	; 33
    5268:	97 e0       	ldi	r25, 0x07	; 7
    526a:	94 83       	std	Z+4, r25	; 0x04
    526c:	83 83       	std	Z+3, r24	; 0x03
    526e:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
    5272:	ee 24       	eor	r14, r14
    5274:	e3 94       	inc	r14
    5276:	0f 90       	pop	r0
    5278:	0f 90       	pop	r0
    527a:	0f 90       	pop	r0
    527c:	0f 90       	pop	r0
	 for (iPump=1;iPump<=16;iPump++){//Pump
	      FIPAddr=GetFIPAddr(iPump);
    527e:	8e 2d       	mov	r24, r14
    5280:	0e 94 0a 20 	call	0x4014	; 0x4014 <GetFIPAddr>
		  if (FIPAddr>0){
    5284:	88 23       	and	r24, r24
    5286:	a9 f0       	breq	.+42     	; 0x52b2 <ResetTotalizer+0x86>
		      FIPAddr=FIPAddr-1;
    5288:	b8 2e       	mov	r11, r24
    528a:	ba 94       	dec	r11
    528c:	ff 24       	eor	r15, r15
    528e:	f3 94       	inc	r15
			  for(iGrade=1;iGrade<=6;iGrade++){
				  SetTotalizerData(TVOLUME,TAddr,FIPAddr,iGrade,strValue);
    5290:	80 e0       	ldi	r24, 0x00	; 0
    5292:	6a 2d       	mov	r22, r10
    5294:	4b 2d       	mov	r20, r11
    5296:	2f 2d       	mov	r18, r15
    5298:	86 01       	movw	r16, r12
    529a:	0e 94 e4 27 	call	0x4fc8	; 0x4fc8 <SetTotalizerData>
				  SetTotalizerData(TMONEY,TAddr,FIPAddr,iGrade,strValue);
    529e:	81 e0       	ldi	r24, 0x01	; 1
    52a0:	6a 2d       	mov	r22, r10
    52a2:	4b 2d       	mov	r20, r11
    52a4:	2f 2d       	mov	r18, r15
    52a6:	0e 94 e4 27 	call	0x4fc8	; 0x4fc8 <SetTotalizerData>
	 sprintf_P(strValue,PSTR("00000000"));
	 for (iPump=1;iPump<=16;iPump++){//Pump
	      FIPAddr=GetFIPAddr(iPump);
		  if (FIPAddr>0){
		      FIPAddr=FIPAddr-1;
			  for(iGrade=1;iGrade<=6;iGrade++){
    52aa:	f3 94       	inc	r15
    52ac:	f7 e0       	ldi	r31, 0x07	; 7
    52ae:	ff 16       	cp	r15, r31
    52b0:	79 f7       	brne	.-34     	; 0x5290 <ResetTotalizer+0x64>
     char iPump,iGrade;
     char strValue[9];
	 char FIPAddr;
	 
	 sprintf_P(strValue,PSTR("00000000"));
	 for (iPump=1;iPump<=16;iPump++){//Pump
    52b2:	e3 94       	inc	r14
    52b4:	81 e1       	ldi	r24, 0x11	; 17
    52b6:	e8 16       	cp	r14, r24
    52b8:	11 f7       	brne	.-60     	; 0x527e <ResetTotalizer+0x52>
				  SetTotalizerData(TVOLUME,TAddr,FIPAddr,iGrade,strValue);
				  SetTotalizerData(TMONEY,TAddr,FIPAddr,iGrade,strValue);
			  }
		  }
	 }
}
    52ba:	29 96       	adiw	r28, 0x09	; 9
    52bc:	0f b6       	in	r0, 0x3f	; 63
    52be:	f8 94       	cli
    52c0:	de bf       	out	0x3e, r29	; 62
    52c2:	0f be       	out	0x3f, r0	; 63
    52c4:	cd bf       	out	0x3d, r28	; 61
    52c6:	cf 91       	pop	r28
    52c8:	df 91       	pop	r29
    52ca:	1f 91       	pop	r17
    52cc:	0f 91       	pop	r16
    52ce:	ff 90       	pop	r15
    52d0:	ef 90       	pop	r14
    52d2:	df 90       	pop	r13
    52d4:	cf 90       	pop	r12
    52d6:	bf 90       	pop	r11
    52d8:	af 90       	pop	r10
    52da:	08 95       	ret

000052dc <AddZeroLag>:
	         String[i]=strAdded[i];
	     }String[Size]=0;
	 }
}

void AddZeroLag(char *String,unsigned char Size){// [123]->12300
    52dc:	cf 93       	push	r28
    52de:	df 93       	push	r29
    52e0:	ec 01       	movw	r28, r24
char i,Length;
     Length=strlen(String);
    52e2:	dc 01       	movw	r26, r24
    52e4:	0d 90       	ld	r0, X+
    52e6:	00 20       	and	r0, r0
    52e8:	e9 f7       	brne	.-6      	; 0x52e4 <AddZeroLag+0x8>
    52ea:	11 97       	sbiw	r26, 0x01	; 1
    52ec:	a8 1b       	sub	r26, r24
    52ee:	b9 0b       	sbc	r27, r25
  if (Length<Size){   
    52f0:	a6 17       	cp	r26, r22
    52f2:	60 f4       	brcc	.+24     	; 0x530c <AddZeroLag+0x30>
    52f4:	8a 2f       	mov	r24, r26
     for(i=Length;i<Size;i++){
	    String[i]='0';
    52f6:	90 e3       	ldi	r25, 0x30	; 48
    52f8:	fe 01       	movw	r30, r28
    52fa:	e8 0f       	add	r30, r24
    52fc:	f1 1d       	adc	r31, r1
    52fe:	90 83       	st	Z, r25

void AddZeroLag(char *String,unsigned char Size){// [123]->12300
char i,Length;
     Length=strlen(String);
  if (Length<Size){   
     for(i=Length;i<Size;i++){
    5300:	8f 5f       	subi	r24, 0xFF	; 255
    5302:	86 17       	cp	r24, r22
    5304:	c8 f3       	brcs	.-14     	; 0x52f8 <AddZeroLag+0x1c>
	    String[i]='0';
	 }String[Size]=0;
    5306:	c6 0f       	add	r28, r22
    5308:	d1 1d       	adc	r29, r1
    530a:	18 82       	st	Y, r1
  }
}
    530c:	df 91       	pop	r29
    530e:	cf 91       	pop	r28
    5310:	08 95       	ret

00005312 <StrCalc>:
     
	 //if (NinePos<Length-4)
	 StrCalc(TPLUS,strMaxValue,strOverflowed,strOverflowed);
}
                                                                   //     1111111 
void StrCalc(char TOperation, char *strA , char *strB, char *strC){//  A: 00000000
    5312:	3f 92       	push	r3
    5314:	4f 92       	push	r4
    5316:	5f 92       	push	r5
    5318:	6f 92       	push	r6
    531a:	7f 92       	push	r7
    531c:	8f 92       	push	r8
    531e:	9f 92       	push	r9
    5320:	af 92       	push	r10
    5322:	bf 92       	push	r11
    5324:	cf 92       	push	r12
    5326:	df 92       	push	r13
    5328:	ef 92       	push	r14
    532a:	ff 92       	push	r15
    532c:	0f 93       	push	r16
    532e:	1f 93       	push	r17
    5330:	df 93       	push	r29
    5332:	cf 93       	push	r28
    5334:	cd b7       	in	r28, 0x3d	; 61
    5336:	de b7       	in	r29, 0x3e	; 62
    5338:	c8 55       	subi	r28, 0x58	; 88
    533a:	d0 40       	sbci	r29, 0x00	; 0
    533c:	0f b6       	in	r0, 0x3f	; 63
    533e:	f8 94       	cli
    5340:	de bf       	out	0x3e, r29	; 62
    5342:	0f be       	out	0x3f, r0	; 63
    5344:	cd bf       	out	0x3d, r28	; 61
    5346:	68 2e       	mov	r6, r24
    5348:	67 96       	adiw	r28, 0x17	; 23
    534a:	7f af       	std	Y+63, r23	; 0x3f
    534c:	6e af       	std	Y+62, r22	; 0x3e
    534e:	67 97       	sbiw	r28, 0x17	; 23
    5350:	69 96       	adiw	r28, 0x19	; 25
    5352:	5f af       	std	Y+63, r21	; 0x3f
    5354:	4e af       	std	Y+62, r20	; 0x3e
    5356:	69 97       	sbiw	r28, 0x19	; 25
    5358:	59 01       	movw	r10, r18
    535a:	fe 01       	movw	r30, r28
    535c:	31 96       	adiw	r30, 0x01	; 1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    535e:	ce 01       	movw	r24, r28
    5360:	45 96       	adiw	r24, 0x15	; 21
	     strMemory[i]=data;
    5362:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    5364:	e8 17       	cp	r30, r24
    5366:	f9 07       	cpc	r31, r25
    5368:	e1 f7       	brne	.-8      	; 0x5362 <StrCalc+0x50>
	     strMemory[i]=data;
    536a:	ce 01       	movw	r24, r28
    536c:	89 96       	adiw	r24, 0x29	; 41
    536e:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    5370:	e8 17       	cp	r30, r24
    5372:	f9 07       	cpc	r31, r25
    5374:	e1 f7       	brne	.-8      	; 0x536e <StrCalc+0x5c>
    5376:	fe 01       	movw	r30, r28
    5378:	fd 96       	adiw	r30, 0x3d	; 61
	     strMemory[i]=data;
    537a:	cf 01       	movw	r24, r30
    537c:	44 96       	adiw	r24, 0x14	; 20
    537e:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    5380:	e8 17       	cp	r30, r24
    5382:	f9 07       	cpc	r31, r25
    5384:	e1 f7       	brne	.-8      	; 0x537e <StrCalc+0x6c>
	 FillChar(tmpB,sizeof(tmpB),0);
	 FillChar(Result,sizeof(Result),0);
                                            // -5    -5     5    5
	                                        // -6 -   6 -  -6 -  6 -
                                            // -5+6   
	 sprintf_P(tmpA,PSTR("%s"),strA);       // 
    5386:	00 d0       	rcall	.+0      	; 0x5388 <StrCalc+0x76>
    5388:	00 d0       	rcall	.+0      	; 0x538a <StrCalc+0x78>
    538a:	00 d0       	rcall	.+0      	; 0x538c <StrCalc+0x7a>
    538c:	ed b7       	in	r30, 0x3d	; 61
    538e:	fe b7       	in	r31, 0x3e	; 62
    5390:	31 96       	adiw	r30, 0x01	; 1
    5392:	8e 01       	movw	r16, r28
    5394:	0f 5f       	subi	r16, 0xFF	; 255
    5396:	1f 4f       	sbci	r17, 0xFF	; 255
    5398:	ad b7       	in	r26, 0x3d	; 61
    539a:	be b7       	in	r27, 0x3e	; 62
    539c:	12 96       	adiw	r26, 0x02	; 2
    539e:	1c 93       	st	X, r17
    53a0:	0e 93       	st	-X, r16
    53a2:	11 97       	sbiw	r26, 0x01	; 1
    53a4:	8b e1       	ldi	r24, 0x1B	; 27
    53a6:	97 e0       	ldi	r25, 0x07	; 7
    53a8:	93 83       	std	Z+3, r25	; 0x03
    53aa:	82 83       	std	Z+2, r24	; 0x02
    53ac:	67 96       	adiw	r28, 0x17	; 23
    53ae:	2e ad       	ldd	r18, Y+62	; 0x3e
    53b0:	3f ad       	ldd	r19, Y+63	; 0x3f
    53b2:	67 97       	sbiw	r28, 0x17	; 23
    53b4:	35 83       	std	Z+5, r19	; 0x05
    53b6:	24 83       	std	Z+4, r18	; 0x04
    53b8:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	 sprintf_P(tmpB,PSTR("%s"),strB);  
    53bc:	ed b7       	in	r30, 0x3d	; 61
    53be:	fe b7       	in	r31, 0x3e	; 62
    53c0:	31 96       	adiw	r30, 0x01	; 1
    53c2:	ce 01       	movw	r24, r28
    53c4:	45 96       	adiw	r24, 0x15	; 21
    53c6:	ad b7       	in	r26, 0x3d	; 61
    53c8:	be b7       	in	r27, 0x3e	; 62
    53ca:	12 96       	adiw	r26, 0x02	; 2
    53cc:	9c 93       	st	X, r25
    53ce:	8e 93       	st	-X, r24
    53d0:	11 97       	sbiw	r26, 0x01	; 1
    53d2:	88 e1       	ldi	r24, 0x18	; 24
    53d4:	97 e0       	ldi	r25, 0x07	; 7
    53d6:	93 83       	std	Z+3, r25	; 0x03
    53d8:	82 83       	std	Z+2, r24	; 0x02
    53da:	69 96       	adiw	r28, 0x19	; 25
    53dc:	2e ad       	ldd	r18, Y+62	; 0x3e
    53de:	3f ad       	ldd	r19, Y+63	; 0x3f
    53e0:	69 97       	sbiw	r28, 0x19	; 25
    53e2:	35 83       	std	Z+5, r19	; 0x05
    53e4:	24 83       	std	Z+4, r18	; 0x04
    53e6:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>

     if (IsMinus(tmpA)==True){
    53ea:	8d b7       	in	r24, 0x3d	; 61
    53ec:	9e b7       	in	r25, 0x3e	; 62
    53ee:	06 96       	adiw	r24, 0x06	; 6
    53f0:	0f b6       	in	r0, 0x3f	; 63
    53f2:	f8 94       	cli
    53f4:	9e bf       	out	0x3e, r25	; 62
    53f6:	0f be       	out	0x3f, r0	; 63
    53f8:	8d bf       	out	0x3d, r24	; 61
    53fa:	c8 01       	movw	r24, r16
    53fc:	0e 94 8c 23 	call	0x4718	; 0x4718 <IsMinus>
    5400:	81 30       	cpi	r24, 0x01	; 1
    5402:	21 f0       	breq	.+8      	; 0x540c <StrCalc+0xfa>
    5404:	65 96       	adiw	r28, 0x15	; 21
    5406:	1f ae       	std	Y+63, r1	; 0x3f
    5408:	65 97       	sbiw	r28, 0x15	; 21
    540a:	07 c0       	rjmp	.+14     	; 0x541a <StrCalc+0x108>
	     RemoveMinus(tmpA);
    540c:	c8 01       	movw	r24, r16
    540e:	0e 94 91 23 	call	0x4722	; 0x4722 <RemoveMinus>
    5412:	91 e0       	ldi	r25, 0x01	; 1
    5414:	65 96       	adiw	r28, 0x15	; 21
    5416:	9f af       	std	Y+63, r25	; 0x3f
    5418:	65 97       	sbiw	r28, 0x15	; 21
		 IsMinA=True;
	 }
     if (IsMinus(tmpB)==True){
    541a:	8e 01       	movw	r16, r28
    541c:	0b 5e       	subi	r16, 0xEB	; 235
    541e:	1f 4f       	sbci	r17, 0xFF	; 255
    5420:	c8 01       	movw	r24, r16
    5422:	0e 94 8c 23 	call	0x4718	; 0x4718 <IsMinus>
    5426:	81 30       	cpi	r24, 0x01	; 1
    5428:	21 f0       	breq	.+8      	; 0x5432 <StrCalc+0x120>
    542a:	64 96       	adiw	r28, 0x14	; 20
    542c:	1f ae       	std	Y+63, r1	; 0x3f
    542e:	64 97       	sbiw	r28, 0x14	; 20
    5430:	07 c0       	rjmp	.+14     	; 0x5440 <StrCalc+0x12e>
	     RemoveMinus(tmpB);
    5432:	c8 01       	movw	r24, r16
    5434:	0e 94 91 23 	call	0x4722	; 0x4722 <RemoveMinus>
    5438:	a1 e0       	ldi	r26, 0x01	; 1
    543a:	64 96       	adiw	r28, 0x14	; 20
    543c:	af af       	std	Y+63, r26	; 0x3f
    543e:	64 97       	sbiw	r28, 0x14	; 20
		 IsMinB=True;
	 }    	

     lenA=strlen(tmpA);
    5440:	fe 01       	movw	r30, r28
    5442:	31 96       	adiw	r30, 0x01	; 1
    5444:	df 01       	movw	r26, r30
    5446:	0d 90       	ld	r0, X+
    5448:	00 20       	and	r0, r0
    544a:	e9 f7       	brne	.-6      	; 0x5446 <StrCalc+0x134>
    544c:	cd 01       	movw	r24, r26
    544e:	01 97       	sbiw	r24, 0x01	; 1
    5450:	8e 1b       	sub	r24, r30
    5452:	9f 0b       	sbc	r25, r31
     lenB=strlen(tmpB);
    5454:	de 01       	movw	r26, r28
    5456:	55 96       	adiw	r26, 0x15	; 21
    5458:	fd 01       	movw	r30, r26
    545a:	01 90       	ld	r0, Z+
    545c:	00 20       	and	r0, r0
    545e:	e9 f7       	brne	.-6      	; 0x545a <StrCalc+0x148>
    5460:	31 97       	sbiw	r30, 0x01	; 1
     /*
	 sprintf_P(strSend,PSTR("A:%s"),strA);	 uart_print(0,1,strSend);
	 sprintf_P(strSend,PSTR("B:%s"),strB);	 uart_print(0,1,strSend);
     */

     AddZeroLead(tmpA,FixLen+1);
    5462:	1e 2f       	mov	r17, r30
    5464:	1a 1b       	sub	r17, r26
    5466:	18 17       	cp	r17, r24
    5468:	08 f4       	brcc	.+2      	; 0x546c <StrCalc+0x15a>
    546a:	18 2f       	mov	r17, r24
    546c:	1f 5f       	subi	r17, 0xFF	; 255
    546e:	7e 01       	movw	r14, r28
    5470:	08 94       	sec
    5472:	e1 1c       	adc	r14, r1
    5474:	f1 1c       	adc	r15, r1
    5476:	c7 01       	movw	r24, r14
    5478:	61 2f       	mov	r22, r17
    547a:	0e 94 cf 26 	call	0x4d9e	; 0x4d9e <AddZeroLead>
     AddZeroLead(tmpB,FixLen+1);
    547e:	05 e1       	ldi	r16, 0x15	; 21
    5480:	c0 2e       	mov	r12, r16
    5482:	d1 2c       	mov	r13, r1
    5484:	cc 0e       	add	r12, r28
    5486:	dd 1e       	adc	r13, r29
    5488:	c6 01       	movw	r24, r12
    548a:	61 2f       	mov	r22, r17
    548c:	0e 94 cf 26 	call	0x4d9e	; 0x4d9e <AddZeroLead>
	 uart_print(0,1,strSend);
	 sprintf_P(strSend,PSTR("B:%s"),strB);
	 uart_print(0,1,strSend);
	 */

     lenA=strlen(tmpA);
    5490:	f7 01       	movw	r30, r14
    5492:	01 90       	ld	r0, Z+
    5494:	00 20       	and	r0, r0
    5496:	e9 f7       	brne	.-6      	; 0x5492 <StrCalc+0x180>
    5498:	31 97       	sbiw	r30, 0x01	; 1
    549a:	7e 2e       	mov	r7, r30
    549c:	7e 18       	sub	r7, r14
     lenB=strlen(tmpB);
    549e:	f6 01       	movw	r30, r12
    54a0:	01 90       	ld	r0, Z+
    54a2:	00 20       	and	r0, r0
    54a4:	e9 f7       	brne	.-6      	; 0x54a0 <StrCalc+0x18e>
    54a6:	31 97       	sbiw	r30, 0x01	; 1
    54a8:	9e 2e       	mov	r9, r30
    54aa:	9c 18       	sub	r9, r12
     IsNegative=False;
	 
	 IsNegative=False;
	 IsSwap=False;

	 if (IsMoreThan(tmpB,tmpA)==True){
    54ac:	c6 01       	movw	r24, r12
    54ae:	b7 01       	movw	r22, r14
    54b0:	0e 94 be 23 	call	0x477c	; 0x477c <IsMoreThan>
    54b4:	81 30       	cpi	r24, 0x01	; 1
    54b6:	11 f0       	breq	.+4      	; 0x54bc <StrCalc+0x1aa>
    54b8:	80 e0       	ldi	r24, 0x00	; 0
    54ba:	42 c0       	rjmp	.+132    	; 0x5540 <StrCalc+0x22e>
	     IsSwap=True;
         sprintf_P(tmpC,PSTR("%s"),tmpA);
    54bc:	00 d0       	rcall	.+0      	; 0x54be <StrCalc+0x1ac>
    54be:	00 d0       	rcall	.+0      	; 0x54c0 <StrCalc+0x1ae>
    54c0:	00 d0       	rcall	.+0      	; 0x54c2 <StrCalc+0x1b0>
    54c2:	ed b7       	in	r30, 0x3d	; 61
    54c4:	fe b7       	in	r31, 0x3e	; 62
    54c6:	31 96       	adiw	r30, 0x01	; 1
    54c8:	8e 01       	movw	r16, r28
    54ca:	07 5d       	subi	r16, 0xD7	; 215
    54cc:	1f 4f       	sbci	r17, 0xFF	; 255
    54ce:	ad b7       	in	r26, 0x3d	; 61
    54d0:	be b7       	in	r27, 0x3e	; 62
    54d2:	12 96       	adiw	r26, 0x02	; 2
    54d4:	1c 93       	st	X, r17
    54d6:	0e 93       	st	-X, r16
    54d8:	11 97       	sbiw	r26, 0x01	; 1
    54da:	85 e1       	ldi	r24, 0x15	; 21
    54dc:	97 e0       	ldi	r25, 0x07	; 7
    54de:	93 83       	std	Z+3, r25	; 0x03
    54e0:	82 83       	std	Z+2, r24	; 0x02
    54e2:	f5 82       	std	Z+5, r15	; 0x05
    54e4:	e4 82       	std	Z+4, r14	; 0x04
    54e6:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
		 sprintf_P(tmpA,PSTR("%s"),tmpB);
    54ea:	ed b7       	in	r30, 0x3d	; 61
    54ec:	fe b7       	in	r31, 0x3e	; 62
    54ee:	31 96       	adiw	r30, 0x01	; 1
    54f0:	ad b7       	in	r26, 0x3d	; 61
    54f2:	be b7       	in	r27, 0x3e	; 62
    54f4:	12 96       	adiw	r26, 0x02	; 2
    54f6:	fc 92       	st	X, r15
    54f8:	ee 92       	st	-X, r14
    54fa:	11 97       	sbiw	r26, 0x01	; 1
    54fc:	82 e1       	ldi	r24, 0x12	; 18
    54fe:	97 e0       	ldi	r25, 0x07	; 7
    5500:	93 83       	std	Z+3, r25	; 0x03
    5502:	82 83       	std	Z+2, r24	; 0x02
    5504:	d5 82       	std	Z+5, r13	; 0x05
    5506:	c4 82       	std	Z+4, r12	; 0x04
    5508:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
		 sprintf_P(tmpB,PSTR("%s"),tmpC);
    550c:	ed b7       	in	r30, 0x3d	; 61
    550e:	fe b7       	in	r31, 0x3e	; 62
    5510:	31 96       	adiw	r30, 0x01	; 1
    5512:	ad b7       	in	r26, 0x3d	; 61
    5514:	be b7       	in	r27, 0x3e	; 62
    5516:	12 96       	adiw	r26, 0x02	; 2
    5518:	dc 92       	st	X, r13
    551a:	ce 92       	st	-X, r12
    551c:	11 97       	sbiw	r26, 0x01	; 1
    551e:	8f e0       	ldi	r24, 0x0F	; 15
    5520:	97 e0       	ldi	r25, 0x07	; 7
    5522:	93 83       	std	Z+3, r25	; 0x03
    5524:	82 83       	std	Z+2, r24	; 0x02
    5526:	15 83       	std	Z+5, r17	; 0x05
    5528:	04 83       	std	Z+4, r16	; 0x04
    552a:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
    552e:	81 e0       	ldi	r24, 0x01	; 1
    5530:	ed b7       	in	r30, 0x3d	; 61
    5532:	fe b7       	in	r31, 0x3e	; 62
    5534:	36 96       	adiw	r30, 0x06	; 6
    5536:	0f b6       	in	r0, 0x3f	; 63
    5538:	f8 94       	cli
    553a:	fe bf       	out	0x3e, r31	; 62
    553c:	0f be       	out	0x3f, r0	; 63
    553e:	ed bf       	out	0x3d, r30	; 61
	 }
    
	if (TOperation==TMINUS){
    5540:	66 20       	and	r6, r6
    5542:	39 f5       	brne	.+78     	; 0x5592 <StrCalc+0x280>
	    TCalc=TOperation;
		IsNegative=False;
		if (IsSwap==True){
    5544:	81 30       	cpi	r24, 0x01	; 1
    5546:	99 f4       	brne	.+38     	; 0x556e <StrCalc+0x25c>
		    if ((IsMinA==True)&&(IsMinB==True)){IsNegative=False;TCalc=TMINUS;}
    5548:	65 96       	adiw	r28, 0x15	; 21
    554a:	ff ad       	ldd	r31, Y+63	; 0x3f
    554c:	65 97       	sbiw	r28, 0x15	; 21
    554e:	f1 30       	cpi	r31, 0x01	; 1
    5550:	39 f4       	brne	.+14     	; 0x5560 <StrCalc+0x24e>
    5552:	64 96       	adiw	r28, 0x14	; 20
    5554:	2f ad       	ldd	r18, Y+63	; 0x3f
    5556:	64 97       	sbiw	r28, 0x14	; 20
    5558:	21 30       	cpi	r18, 0x01	; 1
    555a:	09 f0       	breq	.+2      	; 0x555e <StrCalc+0x24c>
    555c:	9e c1       	rjmp	.+828    	; 0x589a <StrCalc+0x588>
    555e:	42 c0       	rjmp	.+132    	; 0x55e4 <StrCalc+0x2d2>
            else if ((IsMinA==True)&&(IsMinB==False)){IsNegative=True;TCalc=TPLUS;}
            else if ((IsMinA==False)&&(IsMinB==True)){IsNegative=False;TCalc=TPLUS;}
    5560:	64 96       	adiw	r28, 0x14	; 20
    5562:	3f ad       	ldd	r19, Y+63	; 0x3f
    5564:	64 97       	sbiw	r28, 0x14	; 20
    5566:	31 30       	cpi	r19, 0x01	; 1
    5568:	09 f0       	breq	.+2      	; 0x556c <StrCalc+0x25a>
    556a:	8e c1       	rjmp	.+796    	; 0x5888 <StrCalc+0x576>
    556c:	92 c1       	rjmp	.+804    	; 0x5892 <StrCalc+0x580>
            else if ((IsMinA==False)&&(IsMinB==False)){IsNegative=True;TCalc=TMINUS;}
		}else
		if (IsSwap==False){
		    if ((IsMinA==True)&&(IsMinB==True)){IsNegative=True;TCalc=TMINUS;}
    556e:	65 96       	adiw	r28, 0x15	; 21
    5570:	8f ad       	ldd	r24, Y+63	; 0x3f
    5572:	65 97       	sbiw	r28, 0x15	; 21
    5574:	81 30       	cpi	r24, 0x01	; 1
    5576:	39 f4       	brne	.+14     	; 0x5586 <StrCalc+0x274>
    5578:	64 96       	adiw	r28, 0x14	; 20
    557a:	9f ad       	ldd	r25, Y+63	; 0x3f
    557c:	64 97       	sbiw	r28, 0x14	; 20
    557e:	91 30       	cpi	r25, 0x01	; 1
    5580:	09 f0       	breq	.+2      	; 0x5584 <StrCalc+0x272>
    5582:	8b c1       	rjmp	.+790    	; 0x589a <StrCalc+0x588>
    5584:	81 c1       	rjmp	.+770    	; 0x5888 <StrCalc+0x576>
            else if ((IsMinA==True)&&(IsMinB==False)){IsNegative=True;TCalc=TPLUS;}
            else if ((IsMinA==False)&&(IsMinB==True)){IsNegative=False;TCalc=TPLUS;}
    5586:	64 96       	adiw	r28, 0x14	; 20
    5588:	af ad       	ldd	r26, Y+63	; 0x3f
    558a:	64 97       	sbiw	r28, 0x14	; 20
    558c:	a1 30       	cpi	r26, 0x01	; 1
    558e:	51 f5       	brne	.+84     	; 0x55e4 <StrCalc+0x2d2>
    5590:	80 c1       	rjmp	.+768    	; 0x5892 <StrCalc+0x580>
            else if ((IsMinA==False)&&(IsMinB==False)){IsNegative=False;TCalc=TMINUS;}
		}
	 }else
	if (TOperation==TPLUS){
    5592:	b1 e0       	ldi	r27, 0x01	; 1
    5594:	6b 16       	cp	r6, r27
    5596:	31 f5       	brne	.+76     	; 0x55e4 <StrCalc+0x2d2>
	    TCalc=TOperation;
		IsNegative=False;
		if (IsSwap==True){
    5598:	81 30       	cpi	r24, 0x01	; 1
    559a:	91 f4       	brne	.+36     	; 0x55c0 <StrCalc+0x2ae>
		    if ((IsMinA==True)&&(IsMinB==True)){IsNegative=True;TCalc=TPLUS;}
    559c:	65 96       	adiw	r28, 0x15	; 21
    559e:	ef ad       	ldd	r30, Y+63	; 0x3f
    55a0:	65 97       	sbiw	r28, 0x15	; 21
    55a2:	e1 30       	cpi	r30, 0x01	; 1
    55a4:	31 f4       	brne	.+12     	; 0x55b2 <StrCalc+0x2a0>
    55a6:	64 96       	adiw	r28, 0x14	; 20
    55a8:	ff ad       	ldd	r31, Y+63	; 0x3f
    55aa:	64 97       	sbiw	r28, 0x14	; 20
    55ac:	f1 30       	cpi	r31, 0x01	; 1
    55ae:	d1 f4       	brne	.+52     	; 0x55e4 <StrCalc+0x2d2>
    55b0:	74 c1       	rjmp	.+744    	; 0x589a <StrCalc+0x588>
            else if ((IsMinA==True)&&(IsMinB==False)){IsNegative=False;TCalc=TMINUS;}
            else if ((IsMinA==False)&&(IsMinB==True)){IsNegative=True;TCalc=TMINUS;}
    55b2:	64 96       	adiw	r28, 0x14	; 20
    55b4:	2f ad       	ldd	r18, Y+63	; 0x3f
    55b6:	64 97       	sbiw	r28, 0x14	; 20
    55b8:	21 30       	cpi	r18, 0x01	; 1
    55ba:	09 f0       	breq	.+2      	; 0x55be <StrCalc+0x2ac>
    55bc:	6a c1       	rjmp	.+724    	; 0x5892 <StrCalc+0x580>
    55be:	64 c1       	rjmp	.+712    	; 0x5888 <StrCalc+0x576>
            else if ((IsMinA==False)&&(IsMinB==False)){IsNegative=False;TCalc=TPLUS;}
		}else
		if (IsSwap==False){
		    if ((IsMinA==True)&&(IsMinB==True)){IsNegative=True;TCalc=TPLUS;}
    55c0:	65 96       	adiw	r28, 0x15	; 21
    55c2:	3f ad       	ldd	r19, Y+63	; 0x3f
    55c4:	65 97       	sbiw	r28, 0x15	; 21
    55c6:	31 30       	cpi	r19, 0x01	; 1
    55c8:	39 f4       	brne	.+14     	; 0x55d8 <StrCalc+0x2c6>
    55ca:	64 96       	adiw	r28, 0x14	; 20
    55cc:	8f ad       	ldd	r24, Y+63	; 0x3f
    55ce:	64 97       	sbiw	r28, 0x14	; 20
    55d0:	81 30       	cpi	r24, 0x01	; 1
    55d2:	09 f0       	breq	.+2      	; 0x55d6 <StrCalc+0x2c4>
    55d4:	59 c1       	rjmp	.+690    	; 0x5888 <StrCalc+0x576>
    55d6:	61 c1       	rjmp	.+706    	; 0x589a <StrCalc+0x588>
            else if ((IsMinA==True)&&(IsMinB==False)){IsNegative=True;TCalc=TMINUS;}
            else if ((IsMinA==False)&&(IsMinB==True)){IsNegative=False;TCalc=TMINUS;}
    55d8:	64 96       	adiw	r28, 0x14	; 20
    55da:	9f ad       	ldd	r25, Y+63	; 0x3f
    55dc:	64 97       	sbiw	r28, 0x14	; 20
    55de:	91 30       	cpi	r25, 0x01	; 1
    55e0:	09 f0       	breq	.+2      	; 0x55e4 <StrCalc+0x2d2>
    55e2:	57 c1       	rjmp	.+686    	; 0x5892 <StrCalc+0x580>
   // A: 100000
   // B: 000001 -
   // -----------
   // C: 099999

	 if (TCalc==TMINUS){
    55e4:	62 96       	adiw	r28, 0x12	; 18
    55e6:	1f ae       	std	Y+63, r1	; 0x3f
    55e8:	62 97       	sbiw	r28, 0x12	; 18
     
	 //if (NinePos<Length-4)
	 StrCalc(TPLUS,strMaxValue,strOverflowed,strOverflowed);
}
                                                                   //     1111111 
void StrCalc(char TOperation, char *strA , char *strB, char *strC){//  A: 00000000
    55ea:	e7 2c       	mov	r14, r7
    55ec:	ff 24       	eor	r15, r15
    55ee:	67 01       	movw	r12, r14
    55f0:	08 94       	sec
    55f2:	c1 08       	sbc	r12, r1
    55f4:	d1 08       	sbc	r13, r1
    55f6:	ae 01       	movw	r20, r28
    55f8:	43 5c       	subi	r20, 0xC3	; 195
    55fa:	5f 4f       	sbci	r21, 0xFF	; 255
    55fc:	4c 0d       	add	r20, r12
    55fe:	5d 1d       	adc	r21, r13
    5600:	ce 01       	movw	r24, r28
    5602:	01 96       	adiw	r24, 0x01	; 1
    5604:	8c 01       	movw	r16, r24
    5606:	0c 0d       	add	r16, r12
    5608:	1d 1d       	adc	r17, r13
    560a:	be 01       	movw	r22, r28
    560c:	69 0d       	add	r22, r9
    560e:	71 1d       	adc	r23, r1
    5610:	6c 5e       	subi	r22, 0xEC	; 236
    5612:	7f 4f       	sbci	r23, 0xFF	; 255
    5614:	99 24       	eor	r9, r9
			     Result[lenA-i-1]=Chr(Ord(tmpA[lenA-i-1])-Ord(tmpB[lenB-i-1]));
			 }else
			 if (Ord(tmpA[lenA-i-1])<Ord(tmpB[lenB-i-1])){
			 //Pinjaman
			     for(j=i+1;j<lenA;j++){
				     if (tmpA[lenA-j-1]=='0')tmpA[lenA-j-1]='9';
    5616:	2c 01       	movw	r4, r24
    5618:	b9 e3       	ldi	r27, 0x39	; 57
    561a:	8b 2e       	mov	r8, r27
					 if (tmpA[lenA-j-1]!='0'){
					     tmpA[lenA-j-1]=Chr(Ord(tmpA[lenA-j-1])-1);
						 break;
					 }				 
				 }
				 Result[lenA-i-1]=Chr(10+Ord(tmpA[lenA-i-1])-Ord(tmpB[lenB-i-1]));
    561c:	9a e0       	ldi	r25, 0x0A	; 10
    561e:	52 c0       	rjmp	.+164    	; 0x56c4 <StrCalc+0x3b2>
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
    5620:	d8 01       	movw	r26, r16
    5622:	8c 91       	ld	r24, X
    5624:	80 53       	subi	r24, 0x30	; 48
    5626:	8a 30       	cpi	r24, 0x0A	; 10
    5628:	10 f0       	brcs	.+4      	; 0x562e <StrCalc+0x31c>
    562a:	20 e0       	ldi	r18, 0x00	; 0
    562c:	01 c0       	rjmp	.+2      	; 0x5630 <StrCalc+0x31e>
    562e:	28 2f       	mov	r18, r24
   // -----------
   // C: 099999

	 if (TCalc==TMINUS){
	     for(i=0;i<lenA;i++){		 
		     if (Ord(tmpA[lenA-i-1])>=Ord(tmpB[lenB-i-1])){
    5630:	fb 01       	movw	r30, r22
    5632:	30 81       	ld	r19, Z
    5634:	30 53       	subi	r19, 0x30	; 48
    5636:	3a 30       	cpi	r19, 0x0A	; 10
    5638:	10 f4       	brcc	.+4      	; 0x563e <StrCalc+0x32c>
    563a:	23 17       	cp	r18, r19
    563c:	40 f0       	brcs	.+16     	; 0x564e <StrCalc+0x33c>
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
    563e:	8a 30       	cpi	r24, 0x0A	; 10
    5640:	08 f0       	brcs	.+2      	; 0x5644 <StrCalc+0x332>
    5642:	80 e0       	ldi	r24, 0x00	; 0

	 if (TCalc==TMINUS){
	     for(i=0;i<lenA;i++){		 
		     if (Ord(tmpA[lenA-i-1])>=Ord(tmpB[lenB-i-1])){
			 //Cukup
			     Result[lenA-i-1]=Chr(Ord(tmpA[lenA-i-1])-Ord(tmpB[lenB-i-1]));
    5644:	3a 30       	cpi	r19, 0x0A	; 10
    5646:	08 f0       	brcs	.+2      	; 0x564a <StrCalc+0x338>
    5648:	30 e0       	ldi	r19, 0x00	; 0
    564a:	83 1b       	sub	r24, r19
    564c:	2d c0       	rjmp	.+90     	; 0x56a8 <StrCalc+0x396>
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
    564e:	8a 30       	cpi	r24, 0x0A	; 10
    5650:	10 f4       	brcc	.+4      	; 0x5656 <StrCalc+0x344>
	     for(i=0;i<lenA;i++){		 
		     if (Ord(tmpA[lenA-i-1])>=Ord(tmpB[lenB-i-1])){
			 //Cukup
			     Result[lenA-i-1]=Chr(Ord(tmpA[lenA-i-1])-Ord(tmpB[lenB-i-1]));
			 }else
			 if (Ord(tmpA[lenA-i-1])<Ord(tmpB[lenB-i-1])){
    5652:	83 17       	cp	r24, r19
    5654:	80 f5       	brcc	.+96     	; 0x56b6 <StrCalc+0x3a4>
    5656:	29 2d       	mov	r18, r9
    5658:	0a c0       	rjmp	.+20     	; 0x566e <StrCalc+0x35c>
			 //Pinjaman
			     for(j=i+1;j<lenA;j++){
				     if (tmpA[lenA-j-1]=='0')tmpA[lenA-j-1]='9';
    565a:	f6 01       	movw	r30, r12
    565c:	e2 1b       	sub	r30, r18
    565e:	f1 09       	sbc	r31, r1
    5660:	d2 01       	movw	r26, r4
    5662:	ae 0f       	add	r26, r30
    5664:	bf 1f       	adc	r27, r31
    5666:	8c 91       	ld	r24, X
    5668:	80 33       	cpi	r24, 0x30	; 48
    566a:	29 f4       	brne	.+10     	; 0x5676 <StrCalc+0x364>
    566c:	8c 92       	st	X, r8
			 //Cukup
			     Result[lenA-i-1]=Chr(Ord(tmpA[lenA-i-1])-Ord(tmpB[lenB-i-1]));
			 }else
			 if (Ord(tmpA[lenA-i-1])<Ord(tmpB[lenB-i-1])){
			 //Pinjaman
			     for(j=i+1;j<lenA;j++){
    566e:	2f 5f       	subi	r18, 0xFF	; 255
    5670:	27 15       	cp	r18, r7
    5672:	98 f3       	brcs	.-26     	; 0x565a <StrCalc+0x348>
    5674:	10 c0       	rjmp	.+32     	; 0x5696 <StrCalc+0x384>
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
    5676:	28 2f       	mov	r18, r24
    5678:	20 53       	subi	r18, 0x30	; 48
    567a:	2a 30       	cpi	r18, 0x0A	; 10
    567c:	08 f0       	brcs	.+2      	; 0x5680 <StrCalc+0x36e>
    567e:	20 e0       	ldi	r18, 0x00	; 0
			 //Pinjaman
			     for(j=i+1;j<lenA;j++){
				     if (tmpA[lenA-j-1]=='0')tmpA[lenA-j-1]='9';
					 else
					 if (tmpA[lenA-j-1]!='0'){
					     tmpA[lenA-j-1]=Chr(Ord(tmpA[lenA-j-1])-1);
    5680:	82 2f       	mov	r24, r18
    5682:	81 50       	subi	r24, 0x01	; 1
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
    5684:	8a 30       	cpi	r24, 0x0A	; 10
    5686:	10 f0       	brcs	.+4      	; 0x568c <StrCalc+0x37a>
    5688:	80 e3       	ldi	r24, 0x30	; 48
    568a:	02 c0       	rjmp	.+4      	; 0x5690 <StrCalc+0x37e>
	    Result='0'+X;
    568c:	82 2f       	mov	r24, r18
    568e:	81 5d       	subi	r24, 0xD1	; 209
			 //Pinjaman
			     for(j=i+1;j<lenA;j++){
				     if (tmpA[lenA-j-1]=='0')tmpA[lenA-j-1]='9';
					 else
					 if (tmpA[lenA-j-1]!='0'){
					     tmpA[lenA-j-1]=Chr(Ord(tmpA[lenA-j-1])-1);
    5690:	e4 0d       	add	r30, r4
    5692:	f5 1d       	adc	r31, r5
    5694:	80 83       	st	Z, r24
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
    5696:	f8 01       	movw	r30, r16
    5698:	20 81       	ld	r18, Z
    569a:	20 53       	subi	r18, 0x30	; 48
    569c:	2a 30       	cpi	r18, 0x0A	; 10
    569e:	08 f0       	brcs	.+2      	; 0x56a2 <StrCalc+0x390>
    56a0:	20 e0       	ldi	r18, 0x00	; 0
					 if (tmpA[lenA-j-1]!='0'){
					     tmpA[lenA-j-1]=Chr(Ord(tmpA[lenA-j-1])-1);
						 break;
					 }				 
				 }
				 Result[lenA-i-1]=Chr(10+Ord(tmpA[lenA-i-1])-Ord(tmpB[lenB-i-1]));
    56a2:	89 2f       	mov	r24, r25
    56a4:	83 1b       	sub	r24, r19
    56a6:	82 0f       	add	r24, r18
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
    56a8:	8a 30       	cpi	r24, 0x0A	; 10
    56aa:	10 f0       	brcs	.+4      	; 0x56b0 <StrCalc+0x39e>
    56ac:	80 e3       	ldi	r24, 0x30	; 48
    56ae:	01 c0       	rjmp	.+2      	; 0x56b2 <StrCalc+0x3a0>
	    Result='0'+X;
    56b0:	80 5d       	subi	r24, 0xD0	; 208
					 if (tmpA[lenA-j-1]!='0'){
					     tmpA[lenA-j-1]=Chr(Ord(tmpA[lenA-j-1])-1);
						 break;
					 }				 
				 }
				 Result[lenA-i-1]=Chr(10+Ord(tmpA[lenA-i-1])-Ord(tmpB[lenB-i-1]));
    56b2:	da 01       	movw	r26, r20
    56b4:	8c 93       	st	X, r24
   // B: 000001 -
   // -----------
   // C: 099999

	 if (TCalc==TMINUS){
	     for(i=0;i<lenA;i++){		 
    56b6:	93 94       	inc	r9
    56b8:	41 50       	subi	r20, 0x01	; 1
    56ba:	50 40       	sbci	r21, 0x00	; 0
    56bc:	01 50       	subi	r16, 0x01	; 1
    56be:	10 40       	sbci	r17, 0x00	; 0
    56c0:	61 50       	subi	r22, 0x01	; 1
    56c2:	70 40       	sbci	r23, 0x00	; 0
    56c4:	97 14       	cp	r9, r7
    56c6:	08 f4       	brcc	.+2      	; 0x56ca <StrCalc+0x3b8>
    56c8:	ab cf       	rjmp	.-170    	; 0x5620 <StrCalc+0x30e>
						 break;
					 }				 
				 }
				 Result[lenA-i-1]=Chr(10+Ord(tmpA[lenA-i-1])-Ord(tmpB[lenB-i-1]));
			 }
		 }Result[lenA]=0;		    
    56ca:	8e 01       	movw	r16, r28
    56cc:	03 5c       	subi	r16, 0xC3	; 195
    56ce:	1f 4f       	sbci	r17, 0xFF	; 255
    56d0:	e0 0e       	add	r14, r16
    56d2:	f1 1e       	adc	r15, r17
    56d4:	f7 01       	movw	r30, r14
    56d6:	10 82       	st	Z, r1
       RemZeroLead(Result);
    56d8:	c8 01       	movw	r24, r16
    56da:	0e 94 51 25 	call	0x4aa2	; 0x4aa2 <RemZeroLead>
//	 sprintf_P(strSend,PSTR("C':%s"),Result);
//	 uart_print(0,1,strSend);
		 
		 FixLen=strlen(Result);
    56de:	f8 01       	movw	r30, r16
    56e0:	01 90       	ld	r0, Z+
    56e2:	00 20       	and	r0, r0
    56e4:	e9 f7       	brne	.-6      	; 0x56e0 <StrCalc+0x3ce>
    56e6:	31 97       	sbiw	r30, 0x01	; 1
    56e8:	3e 2f       	mov	r19, r30
    56ea:	30 1b       	sub	r19, r16
    56ec:	d8 01       	movw	r26, r16
    56ee:	20 e0       	ldi	r18, 0x00	; 0
    56f0:	90 e0       	ldi	r25, 0x00	; 0
		 iPos=0;
		 for(i=0;i<FixLen;i++){
		     if ((i==0)&&(IsNegative==True)){
			     strC[iPos]='-';
    56f2:	4d e2       	ldi	r20, 0x2D	; 45
    56f4:	13 c0       	rjmp	.+38     	; 0x571c <StrCalc+0x40a>
//	 uart_print(0,1,strSend);
		 
		 FixLen=strlen(Result);
		 iPos=0;
		 for(i=0;i<FixLen;i++){
		     if ((i==0)&&(IsNegative==True)){
    56f6:	22 23       	and	r18, r18
    56f8:	51 f4       	brne	.+20     	; 0x570e <StrCalc+0x3fc>
    56fa:	62 96       	adiw	r28, 0x12	; 18
    56fc:	ff ad       	ldd	r31, Y+63	; 0x3f
    56fe:	62 97       	sbiw	r28, 0x12	; 18
    5700:	f1 30       	cpi	r31, 0x01	; 1
    5702:	29 f4       	brne	.+10     	; 0x570e <StrCalc+0x3fc>
			     strC[iPos]='-';
    5704:	f5 01       	movw	r30, r10
    5706:	e9 0f       	add	r30, r25
    5708:	f1 1d       	adc	r31, r1
    570a:	40 83       	st	Z, r20
				 iPos++;
    570c:	9f 5f       	subi	r25, 0xFF	; 255
			 }
		     strC[iPos]=Result[i];
    570e:	f5 01       	movw	r30, r10
    5710:	e9 0f       	add	r30, r25
    5712:	f1 1d       	adc	r31, r1
    5714:	8d 91       	ld	r24, X+
    5716:	80 83       	st	Z, r24
			 iPos++;
    5718:	9f 5f       	subi	r25, 0xFF	; 255
//	 sprintf_P(strSend,PSTR("C':%s"),Result);
//	 uart_print(0,1,strSend);
		 
		 FixLen=strlen(Result);
		 iPos=0;
		 for(i=0;i<FixLen;i++){
    571a:	2f 5f       	subi	r18, 0xFF	; 255
    571c:	23 17       	cp	r18, r19
    571e:	58 f3       	brcs	.-42     	; 0x56f6 <StrCalc+0x3e4>
			     strC[iPos]='-';
				 iPos++;
			 }
		     strC[iPos]=Result[i];
			 iPos++;
		 }strC[iPos]=0;
    5720:	f5 01       	movw	r30, r10
    5722:	e9 0f       	add	r30, r25
    5724:	f1 1d       	adc	r31, r1
    5726:	10 82       	st	Z, r1
    5728:	a0 c0       	rjmp	.+320    	; 0x586a <StrCalc+0x558>
	 }
	 else                     //         1
	 if (TCalc==TPLUS){  //A:099999999
    572a:	ad e3       	ldi	r26, 0x3D	; 61
    572c:	ea 2e       	mov	r14, r26
    572e:	f1 2c       	mov	r15, r1
    5730:	ec 0e       	add	r14, r28
    5732:	fd 1e       	adc	r15, r29
    5734:	ae 01       	movw	r20, r28
    5736:	49 0d       	add	r20, r9
    5738:	51 1d       	adc	r21, r1
    573a:	4c 5e       	subi	r20, 0xEC	; 236
    573c:	5f 4f       	sbci	r21, 0xFF	; 255
     
	 //if (NinePos<Length-4)
	 StrCalc(TPLUS,strMaxValue,strOverflowed,strOverflowed);
}
                                                                   //     1111111 
void StrCalc(char TOperation, char *strA , char *strB, char *strC){//  A: 00000000
    573e:	07 2d       	mov	r16, r7
    5740:	10 e0       	ldi	r17, 0x00	; 0
    5742:	48 01       	movw	r8, r16
    5744:	08 94       	sec
    5746:	81 08       	sbc	r8, r1
    5748:	91 08       	sbc	r9, r1
    574a:	ce 01       	movw	r24, r28
    574c:	01 96       	adiw	r24, 0x01	; 1
    574e:	6c 01       	movw	r12, r24
    5750:	c8 0c       	add	r12, r8
    5752:	d9 1c       	adc	r13, r9
    5754:	30 e0       	ldi	r19, 0x00	; 0
    5756:	20 e0       	ldi	r18, 0x00	; 0
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
    5758:	2c 01       	movw	r4, r24
                 //Lebih
				 Result[i]=Chr(newC%10);
				 zMin=newC/10;
			     for(j=i+1;j<lenA;j++){
				     if ((Ord(tmpA[lenA-j-1])+zMin)>=10){
					     tmpA[lenA-j-1]=Chr((Ord(tmpA[lenA-j-1])+zMin)%10);
    575a:	f0 e3       	ldi	r31, 0x30	; 48
    575c:	3f 2e       	mov	r3, r31
    575e:	47 c0       	rjmp	.+142    	; 0x57ee <StrCalc+0x4dc>
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
    5760:	d6 01       	movw	r26, r12
    5762:	9c 91       	ld	r25, X
    5764:	90 53       	subi	r25, 0x30	; 48
    5766:	9a 30       	cpi	r25, 0x0A	; 10
    5768:	08 f0       	brcs	.+2      	; 0x576c <StrCalc+0x45a>
    576a:	90 e0       	ldi	r25, 0x00	; 0
	 }
	 else                     //         1
	 if (TCalc==TPLUS){  //A:099999999
	     zMin=0;              //B:000000001
	     for(i=0;i<lenA;i++){ //C:       00
		     newC=(Ord(tmpA[lenA-i-1])+Ord(tmpB[lenB-i-1]));			 
    576c:	fa 01       	movw	r30, r20
    576e:	80 81       	ld	r24, Z
    5770:	80 53       	subi	r24, 0x30	; 48
    5772:	8a 30       	cpi	r24, 0x0A	; 10
    5774:	08 f0       	brcs	.+2      	; 0x5778 <StrCalc+0x466>
    5776:	80 e0       	ldi	r24, 0x00	; 0
    5778:	89 0f       	add	r24, r25
			 if (newC<10){
    577a:	8a 30       	cpi	r24, 0x0A	; 10
    577c:	18 f4       	brcc	.+6      	; 0x5784 <StrCalc+0x472>
			     Result[i]=Chr(newC);
    577e:	80 5d       	subi	r24, 0xD0	; 208
    5780:	d7 01       	movw	r26, r14
    5782:	28 c0       	rjmp	.+80     	; 0x57d4 <StrCalc+0x4c2>
				 zMin=newC/10;
			 }else if (newC>=10){
                 //Lebih
				 Result[i]=Chr(newC%10);
    5784:	6a e0       	ldi	r22, 0x0A	; 10
    5786:	0e 94 61 aa 	call	0x154c2	; 0x154c2 <__udivmodqi4>
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
    578a:	9a 30       	cpi	r25, 0x0A	; 10
    578c:	10 f0       	brcs	.+4      	; 0x5792 <StrCalc+0x480>
    578e:	90 e3       	ldi	r25, 0x30	; 48
    5790:	01 c0       	rjmp	.+2      	; 0x5794 <StrCalc+0x482>
	    Result='0'+X;
    5792:	90 5d       	subi	r25, 0xD0	; 208
			 if (newC<10){
			     Result[i]=Chr(newC);
				 zMin=newC/10;
			 }else if (newC>=10){
                 //Lebih
				 Result[i]=Chr(newC%10);
    5794:	f7 01       	movw	r30, r14
    5796:	90 83       	st	Z, r25
    5798:	83 2f       	mov	r24, r19
    579a:	0e c0       	rjmp	.+28     	; 0x57b8 <StrCalc+0x4a6>
				 zMin=newC/10;
			     for(j=i+1;j<lenA;j++){
				     if ((Ord(tmpA[lenA-j-1])+zMin)>=10){
    579c:	d4 01       	movw	r26, r8
    579e:	a8 1b       	sub	r26, r24
    57a0:	b1 09       	sbc	r27, r1
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
    57a2:	f2 01       	movw	r30, r4
    57a4:	ea 0f       	add	r30, r26
    57a6:	fb 1f       	adc	r31, r27
    57a8:	90 81       	ld	r25, Z
    57aa:	90 53       	subi	r25, 0x30	; 48
    57ac:	9a 30       	cpi	r25, 0x0A	; 10
    57ae:	08 f0       	brcs	.+2      	; 0x57b2 <StrCalc+0x4a0>
    57b0:	79 c0       	rjmp	.+242    	; 0x58a4 <StrCalc+0x592>
			 }else if (newC>=10){
                 //Lebih
				 Result[i]=Chr(newC%10);
				 zMin=newC/10;
			     for(j=i+1;j<lenA;j++){
				     if ((Ord(tmpA[lenA-j-1])+zMin)>=10){
    57b2:	99 30       	cpi	r25, 0x09	; 9
    57b4:	29 f4       	brne	.+10     	; 0x57c0 <StrCalc+0x4ae>
					     tmpA[lenA-j-1]=Chr((Ord(tmpA[lenA-j-1])+zMin)%10);
    57b6:	30 82       	st	Z, r3
				 zMin=newC/10;
			 }else if (newC>=10){
                 //Lebih
				 Result[i]=Chr(newC%10);
				 zMin=newC/10;
			     for(j=i+1;j<lenA;j++){
    57b8:	8f 5f       	subi	r24, 0xFF	; 255
    57ba:	87 15       	cp	r24, r7
    57bc:	78 f3       	brcs	.-34     	; 0x579c <StrCalc+0x48a>
    57be:	0d c0       	rjmp	.+26     	; 0x57da <StrCalc+0x4c8>
				     if ((Ord(tmpA[lenA-j-1])+zMin)>=10){
					     tmpA[lenA-j-1]=Chr((Ord(tmpA[lenA-j-1])+zMin)%10);
						 zMin=1;
					 }else{
					     tmpA[lenA-j-1]=Chr((Ord(tmpA[lenA-j-1])+zMin));
    57c0:	89 2f       	mov	r24, r25
    57c2:	8f 5f       	subi	r24, 0xFF	; 255
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
    57c4:	8a 30       	cpi	r24, 0x0A	; 10
    57c6:	10 f0       	brcs	.+4      	; 0x57cc <StrCalc+0x4ba>
    57c8:	80 e3       	ldi	r24, 0x30	; 48
    57ca:	02 c0       	rjmp	.+4      	; 0x57d0 <StrCalc+0x4be>
	    Result='0'+X;
    57cc:	89 2f       	mov	r24, r25
    57ce:	8f 5c       	subi	r24, 0xCF	; 207
			     for(j=i+1;j<lenA;j++){
				     if ((Ord(tmpA[lenA-j-1])+zMin)>=10){
					     tmpA[lenA-j-1]=Chr((Ord(tmpA[lenA-j-1])+zMin)%10);
						 zMin=1;
					 }else{
					     tmpA[lenA-j-1]=Chr((Ord(tmpA[lenA-j-1])+zMin));
    57d0:	a4 0d       	add	r26, r4
    57d2:	b5 1d       	adc	r27, r5
    57d4:	8c 93       	st	X, r24
    57d6:	20 e0       	ldi	r18, 0x00	; 0
    57d8:	01 c0       	rjmp	.+2      	; 0x57dc <StrCalc+0x4ca>
				 zMin=newC/10;
			 }else if (newC>=10){
                 //Lebih
				 Result[i]=Chr(newC%10);
				 zMin=newC/10;
			     for(j=i+1;j<lenA;j++){
    57da:	21 e0       	ldi	r18, 0x01	; 1
		 }strC[iPos]=0;
	 }
	 else                     //         1
	 if (TCalc==TPLUS){  //A:099999999
	     zMin=0;              //B:000000001
	     for(i=0;i<lenA;i++){ //C:       00
    57dc:	3f 5f       	subi	r19, 0xFF	; 255
    57de:	08 94       	sec
    57e0:	e1 1c       	adc	r14, r1
    57e2:	f1 1c       	adc	r15, r1
    57e4:	41 50       	subi	r20, 0x01	; 1
    57e6:	50 40       	sbci	r21, 0x00	; 0
    57e8:	08 94       	sec
    57ea:	c1 08       	sbc	r12, r1
    57ec:	d1 08       	sbc	r13, r1
    57ee:	37 15       	cp	r19, r7
    57f0:	08 f4       	brcc	.+2      	; 0x57f4 <StrCalc+0x4e2>
    57f2:	b6 cf       	rjmp	.-148    	; 0x5760 <StrCalc+0x44e>
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
	    Result='0'+X;
    57f4:	20 5d       	subi	r18, 0xD0	; 208
				 }//EndFor j                
			   }//End else
			 }//EndFor

		  //Result[lenA]==Chr(zMin); ???
		  Result[lenA]=Chr(zMin);
    57f6:	de 01       	movw	r26, r28
    57f8:	dd 96       	adiw	r26, 0x3d	; 61
    57fa:	fd 01       	movw	r30, r26
    57fc:	e0 0f       	add	r30, r16
    57fe:	f1 1f       	adc	r31, r17
    5800:	20 83       	st	Z, r18
		  Result[lenA+1]=0;
    5802:	0c 0f       	add	r16, r28
    5804:	1d 1f       	adc	r17, r29
    5806:	f8 01       	movw	r30, r16
    5808:	16 ae       	std	Z+62, r1	; 0x3e
		 FixLen=strlen(Result);
		 for(i=0;i<FixLen;i++){
		     strC[i]=Result[FixLen-i-1];
		 }strC[FixLen]=0;
*/
         FixLen=strlen(Result);
    580a:	fd 01       	movw	r30, r26
    580c:	01 90       	ld	r0, Z+
    580e:	00 20       	and	r0, r0
    5810:	e9 f7       	brne	.-6      	; 0x580c <StrCalc+0x4fa>
    5812:	31 97       	sbiw	r30, 0x01	; 1
    5814:	5e 2f       	mov	r21, r30
    5816:	5a 1b       	sub	r21, r26
    5818:	25 2f       	mov	r18, r21
    581a:	30 e0       	ldi	r19, 0x00	; 0
    581c:	21 50       	subi	r18, 0x01	; 1
    581e:	30 40       	sbci	r19, 0x00	; 0
    5820:	2a 0f       	add	r18, r26
    5822:	3b 1f       	adc	r19, r27
    5824:	40 e0       	ldi	r20, 0x00	; 0
    5826:	90 e0       	ldi	r25, 0x00	; 0
		 iPos=0;
		 for(i=0;i<FixLen;i++){
		     if ((i==0)&&(IsNegative==True)){
			     strC[iPos]='-';
    5828:	6d e2       	ldi	r22, 0x2D	; 45
    582a:	16 c0       	rjmp	.+44     	; 0x5858 <StrCalc+0x546>
		 }strC[FixLen]=0;
*/
         FixLen=strlen(Result);
		 iPos=0;
		 for(i=0;i<FixLen;i++){
		     if ((i==0)&&(IsNegative==True)){
    582c:	44 23       	and	r20, r20
    582e:	51 f4       	brne	.+20     	; 0x5844 <StrCalc+0x532>
    5830:	63 96       	adiw	r28, 0x13	; 19
    5832:	ff ad       	ldd	r31, Y+63	; 0x3f
    5834:	63 97       	sbiw	r28, 0x13	; 19
    5836:	f1 30       	cpi	r31, 0x01	; 1
    5838:	29 f4       	brne	.+10     	; 0x5844 <StrCalc+0x532>
			     strC[iPos]='-';
    583a:	f5 01       	movw	r30, r10
    583c:	e9 0f       	add	r30, r25
    583e:	f1 1d       	adc	r31, r1
    5840:	60 83       	st	Z, r22
				 iPos++;
    5842:	9f 5f       	subi	r25, 0xFF	; 255
			 }
		     strC[iPos]=Result[FixLen-i-1];
    5844:	f5 01       	movw	r30, r10
    5846:	e9 0f       	add	r30, r25
    5848:	f1 1d       	adc	r31, r1
    584a:	d9 01       	movw	r26, r18
    584c:	8c 91       	ld	r24, X
    584e:	80 83       	st	Z, r24
			 iPos++;
    5850:	9f 5f       	subi	r25, 0xFF	; 255
		     strC[i]=Result[FixLen-i-1];
		 }strC[FixLen]=0;
*/
         FixLen=strlen(Result);
		 iPos=0;
		 for(i=0;i<FixLen;i++){
    5852:	4f 5f       	subi	r20, 0xFF	; 255
    5854:	21 50       	subi	r18, 0x01	; 1
    5856:	30 40       	sbci	r19, 0x00	; 0
    5858:	45 17       	cp	r20, r21
    585a:	40 f3       	brcs	.-48     	; 0x582c <StrCalc+0x51a>
			     strC[iPos]='-';
				 iPos++;
			 }
		     strC[iPos]=Result[FixLen-i-1];
			 iPos++;
		 }strC[iPos]=0;
    585c:	f5 01       	movw	r30, r10
    585e:	e9 0f       	add	r30, r25
    5860:	f1 1d       	adc	r31, r1
    5862:	10 82       	st	Z, r1

       RemZeroLead(strC);
    5864:	c5 01       	movw	r24, r10
    5866:	0e 94 51 25 	call	0x4aa2	; 0x4aa2 <RemZeroLead>
  //    sprintf_P(strSend,PSTR("C':%s"),strC);
//	 uart_print(0,1,strSend);

	 }//EndIf 

	 if (TOperation==TMULTIPLY){
    586a:	b2 e0       	ldi	r27, 0x02	; 2
    586c:	6b 16       	cp	r6, r27
    586e:	e1 f4       	brne	.+56     	; 0x58a8 <StrCalc+0x596>
		 valA=atol(strA);
		 valB=atol(strB);
		 valC=valA*valB;		 
         ltoa(valC,strC,10);
		 */
		 CalcMultiply(strA,strB,strC);
    5870:	67 96       	adiw	r28, 0x17	; 23
    5872:	8e ad       	ldd	r24, Y+62	; 0x3e
    5874:	9f ad       	ldd	r25, Y+63	; 0x3f
    5876:	67 97       	sbiw	r28, 0x17	; 23
    5878:	69 96       	adiw	r28, 0x19	; 25
    587a:	6e ad       	ldd	r22, Y+62	; 0x3e
    587c:	7f ad       	ldd	r23, Y+63	; 0x3f
    587e:	69 97       	sbiw	r28, 0x19	; 25
    5880:	a5 01       	movw	r20, r10
    5882:	0e 94 6d 2c 	call	0x58da	; 0x58da <CalcMultiply>
    5886:	10 c0       	rjmp	.+32     	; 0x58a8 <StrCalc+0x596>
	 }
}
    5888:	e1 e0       	ldi	r30, 0x01	; 1
    588a:	62 96       	adiw	r28, 0x12	; 18
    588c:	ef af       	std	Y+63, r30	; 0x3f
    588e:	62 97       	sbiw	r28, 0x12	; 18
    5890:	ac ce       	rjmp	.-680    	; 0x55ea <StrCalc+0x2d8>
    5892:	63 96       	adiw	r28, 0x13	; 19
    5894:	1f ae       	std	Y+63, r1	; 0x3f
    5896:	63 97       	sbiw	r28, 0x13	; 19
    5898:	48 cf       	rjmp	.-368    	; 0x572a <StrCalc+0x418>
    589a:	f1 e0       	ldi	r31, 0x01	; 1
    589c:	63 96       	adiw	r28, 0x13	; 19
    589e:	ff af       	std	Y+63, r31	; 0x3f
    58a0:	63 97       	sbiw	r28, 0x13	; 19
    58a2:	43 cf       	rjmp	.-378    	; 0x572a <StrCalc+0x418>
    58a4:	90 e0       	ldi	r25, 0x00	; 0
    58a6:	8c cf       	rjmp	.-232    	; 0x57c0 <StrCalc+0x4ae>
    58a8:	c8 5a       	subi	r28, 0xA8	; 168
    58aa:	df 4f       	sbci	r29, 0xFF	; 255
    58ac:	0f b6       	in	r0, 0x3f	; 63
    58ae:	f8 94       	cli
    58b0:	de bf       	out	0x3e, r29	; 62
    58b2:	0f be       	out	0x3f, r0	; 63
    58b4:	cd bf       	out	0x3d, r28	; 61
    58b6:	cf 91       	pop	r28
    58b8:	df 91       	pop	r29
    58ba:	1f 91       	pop	r17
    58bc:	0f 91       	pop	r16
    58be:	ff 90       	pop	r15
    58c0:	ef 90       	pop	r14
    58c2:	df 90       	pop	r13
    58c4:	cf 90       	pop	r12
    58c6:	bf 90       	pop	r11
    58c8:	af 90       	pop	r10
    58ca:	9f 90       	pop	r9
    58cc:	8f 90       	pop	r8
    58ce:	7f 90       	pop	r7
    58d0:	6f 90       	pop	r6
    58d2:	5f 90       	pop	r5
    58d4:	4f 90       	pop	r4
    58d6:	3f 90       	pop	r3
    58d8:	08 95       	ret

000058da <CalcMultiply>:
	 }
	 strResult[lenR]=0;
}


void CalcMultiply(char *strA,char *strB,char *strC){
    58da:	4f 92       	push	r4
    58dc:	5f 92       	push	r5
    58de:	6f 92       	push	r6
    58e0:	7f 92       	push	r7
    58e2:	8f 92       	push	r8
    58e4:	9f 92       	push	r9
    58e6:	af 92       	push	r10
    58e8:	bf 92       	push	r11
    58ea:	cf 92       	push	r12
    58ec:	df 92       	push	r13
    58ee:	ef 92       	push	r14
    58f0:	ff 92       	push	r15
    58f2:	0f 93       	push	r16
    58f4:	1f 93       	push	r17
    58f6:	df 93       	push	r29
    58f8:	cf 93       	push	r28
    58fa:	cd b7       	in	r28, 0x3d	; 61
    58fc:	de b7       	in	r29, 0x3e	; 62
    58fe:	a8 97       	sbiw	r28, 0x28	; 40
    5900:	0f b6       	in	r0, 0x3f	; 63
    5902:	f8 94       	cli
    5904:	de bf       	out	0x3e, r29	; 62
    5906:	0f be       	out	0x3f, r0	; 63
    5908:	cd bf       	out	0x3d, r28	; 61
    590a:	3c 01       	movw	r6, r24
    590c:	6b 01       	movw	r12, r22
    590e:	2a 01       	movw	r4, r20
	 
	 */
	 char i,lenB;
	 char prevSeg[20],currSeg[20];

     RemZeroLead(strA);
    5910:	0e 94 51 25 	call	0x4aa2	; 0x4aa2 <RemZeroLead>
     RemZeroLead(strB);
    5914:	c6 01       	movw	r24, r12
    5916:	0e 94 51 25 	call	0x4aa2	; 0x4aa2 <RemZeroLead>
	 lenB=strlen(strB);
    591a:	d6 01       	movw	r26, r12
    591c:	0d 90       	ld	r0, X+
    591e:	00 20       	and	r0, r0
    5920:	e9 f7       	brne	.-6      	; 0x591c <CalcMultiply+0x42>
    5922:	11 97       	sbiw	r26, 0x01	; 1
    5924:	8a 2e       	mov	r8, r26
    5926:	8c 18       	sub	r8, r12
	 sprintf_P(prevSeg,PSTR("0"));
    5928:	00 d0       	rcall	.+0      	; 0x592a <CalcMultiply+0x50>
    592a:	00 d0       	rcall	.+0      	; 0x592c <CalcMultiply+0x52>
    592c:	8e 01       	movw	r16, r28
    592e:	0f 5f       	subi	r16, 0xFF	; 255
    5930:	1f 4f       	sbci	r17, 0xFF	; 255
    5932:	ad b7       	in	r26, 0x3d	; 61
    5934:	be b7       	in	r27, 0x3e	; 62
    5936:	12 96       	adiw	r26, 0x02	; 2
    5938:	1c 93       	st	X, r17
    593a:	0e 93       	st	-X, r16
    593c:	11 97       	sbiw	r26, 0x01	; 1
    593e:	8d e0       	ldi	r24, 0x0D	; 13
    5940:	97 e0       	ldi	r25, 0x07	; 7
    5942:	14 96       	adiw	r26, 0x04	; 4
    5944:	9c 93       	st	X, r25
    5946:	8e 93       	st	-X, r24
    5948:	13 97       	sbiw	r26, 0x03	; 3
    594a:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	 sprintf_P(currSeg,PSTR("0"));
    594e:	85 e1       	ldi	r24, 0x15	; 21
    5950:	e8 2e       	mov	r14, r24
    5952:	f1 2c       	mov	r15, r1
    5954:	ec 0e       	add	r14, r28
    5956:	fd 1e       	adc	r15, r29
    5958:	ed b7       	in	r30, 0x3d	; 61
    595a:	fe b7       	in	r31, 0x3e	; 62
    595c:	f2 82       	std	Z+2, r15	; 0x02
    595e:	e1 82       	std	Z+1, r14	; 0x01
    5960:	8b e0       	ldi	r24, 0x0B	; 11
    5962:	97 e0       	ldi	r25, 0x07	; 7
    5964:	94 83       	std	Z+4, r25	; 0x04
    5966:	83 83       	std	Z+3, r24	; 0x03
    5968:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
    596c:	bb 24       	eor	r11, r11
    596e:	0f 90       	pop	r0
    5970:	0f 90       	pop	r0
    5972:	0f 90       	pop	r0
    5974:	0f 90       	pop	r0
    5976:	a0 2e       	mov	r10, r16
    5978:	91 2e       	mov	r9, r17

	 for(i=0;i<strlen(strB);i++){
	     //
         CalcSegmen(strA,strB[lenB-1-i],currSeg);
    597a:	08 2d       	mov	r16, r8
    597c:	10 e0       	ldi	r17, 0x00	; 0
    597e:	01 50       	subi	r16, 0x01	; 1
    5980:	10 40       	sbci	r17, 0x00	; 0
    5982:	1f c0       	rjmp	.+62     	; 0x59c2 <CalcMultiply+0xe8>
    5984:	f8 01       	movw	r30, r16
    5986:	e8 1b       	sub	r30, r24
    5988:	f9 0b       	sbc	r31, r25
    598a:	ec 0d       	add	r30, r12
    598c:	fd 1d       	adc	r31, r13
    598e:	c3 01       	movw	r24, r6
    5990:	60 81       	ld	r22, Z
    5992:	a7 01       	movw	r20, r14
    5994:	0e 94 dc 22 	call	0x45b8	; 0x45b8 <CalcSegmen>
         AddZeroLag(currSeg,strlen(currSeg)+i);
    5998:	f7 01       	movw	r30, r14
    599a:	01 90       	ld	r0, Z+
    599c:	00 20       	and	r0, r0
    599e:	e9 f7       	brne	.-6      	; 0x599a <CalcMultiply+0xc0>
    59a0:	31 97       	sbiw	r30, 0x01	; 1
    59a2:	ee 19       	sub	r30, r14
    59a4:	ff 09       	sbc	r31, r15
    59a6:	6b 2d       	mov	r22, r11
    59a8:	6e 0f       	add	r22, r30
    59aa:	c7 01       	movw	r24, r14
    59ac:	0e 94 6e 29 	call	0x52dc	; 0x52dc <AddZeroLag>
	     StrCalc(TPLUS,prevSeg,currSeg,prevSeg);
    59b0:	81 e0       	ldi	r24, 0x01	; 1
    59b2:	6a 2d       	mov	r22, r10
    59b4:	79 2d       	mov	r23, r9
    59b6:	a7 01       	movw	r20, r14
    59b8:	2a 2d       	mov	r18, r10
    59ba:	39 2d       	mov	r19, r9
    59bc:	0e 94 89 29 	call	0x5312	; 0x5312 <StrCalc>
     RemZeroLead(strB);
	 lenB=strlen(strB);
	 sprintf_P(prevSeg,PSTR("0"));
	 sprintf_P(currSeg,PSTR("0"));

	 for(i=0;i<strlen(strB);i++){
    59c0:	b3 94       	inc	r11
    59c2:	f6 01       	movw	r30, r12
    59c4:	01 90       	ld	r0, Z+
    59c6:	00 20       	and	r0, r0
    59c8:	e9 f7       	brne	.-6      	; 0x59c4 <CalcMultiply+0xea>
    59ca:	31 97       	sbiw	r30, 0x01	; 1
    59cc:	ec 19       	sub	r30, r12
    59ce:	fd 09       	sbc	r31, r13
    59d0:	8b 2d       	mov	r24, r11
    59d2:	90 e0       	ldi	r25, 0x00	; 0
    59d4:	8e 17       	cp	r24, r30
    59d6:	9f 07       	cpc	r25, r31
    59d8:	a8 f2       	brcs	.-86     	; 0x5984 <CalcMultiply+0xaa>
	     //
         CalcSegmen(strA,strB[lenB-1-i],currSeg);
         AddZeroLag(currSeg,strlen(currSeg)+i);
	     StrCalc(TPLUS,prevSeg,currSeg,prevSeg);
	 }
	 sprintf_P(strC,PSTR("%s"),prevSeg);
    59da:	00 d0       	rcall	.+0      	; 0x59dc <CalcMultiply+0x102>
    59dc:	00 d0       	rcall	.+0      	; 0x59de <CalcMultiply+0x104>
    59de:	00 d0       	rcall	.+0      	; 0x59e0 <CalcMultiply+0x106>
    59e0:	ed b7       	in	r30, 0x3d	; 61
    59e2:	fe b7       	in	r31, 0x3e	; 62
    59e4:	31 96       	adiw	r30, 0x01	; 1
    59e6:	ad b7       	in	r26, 0x3d	; 61
    59e8:	be b7       	in	r27, 0x3e	; 62
    59ea:	12 96       	adiw	r26, 0x02	; 2
    59ec:	5c 92       	st	X, r5
    59ee:	4e 92       	st	-X, r4
    59f0:	11 97       	sbiw	r26, 0x01	; 1
    59f2:	88 e0       	ldi	r24, 0x08	; 8
    59f4:	97 e0       	ldi	r25, 0x07	; 7
    59f6:	93 83       	std	Z+3, r25	; 0x03
    59f8:	82 83       	std	Z+2, r24	; 0x02
    59fa:	a4 82       	std	Z+4, r10	; 0x04
    59fc:	95 82       	std	Z+5, r9	; 0x05
    59fe:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
    5a02:	ed b7       	in	r30, 0x3d	; 61
    5a04:	fe b7       	in	r31, 0x3e	; 62
    5a06:	36 96       	adiw	r30, 0x06	; 6
    5a08:	0f b6       	in	r0, 0x3f	; 63
    5a0a:	f8 94       	cli
    5a0c:	fe bf       	out	0x3e, r31	; 62
    5a0e:	0f be       	out	0x3f, r0	; 63
    5a10:	ed bf       	out	0x3d, r30	; 61
}
    5a12:	a8 96       	adiw	r28, 0x28	; 40
    5a14:	0f b6       	in	r0, 0x3f	; 63
    5a16:	f8 94       	cli
    5a18:	de bf       	out	0x3e, r29	; 62
    5a1a:	0f be       	out	0x3f, r0	; 63
    5a1c:	cd bf       	out	0x3d, r28	; 61
    5a1e:	cf 91       	pop	r28
    5a20:	df 91       	pop	r29
    5a22:	1f 91       	pop	r17
    5a24:	0f 91       	pop	r16
    5a26:	ff 90       	pop	r15
    5a28:	ef 90       	pop	r14
    5a2a:	df 90       	pop	r13
    5a2c:	cf 90       	pop	r12
    5a2e:	bf 90       	pop	r11
    5a30:	af 90       	pop	r10
    5a32:	9f 90       	pop	r9
    5a34:	8f 90       	pop	r8
    5a36:	7f 90       	pop	r7
    5a38:	6f 90       	pop	r6
    5a3a:	5f 90       	pop	r5
    5a3c:	4f 90       	pop	r4
    5a3e:	08 95       	ret

00005a40 <NormalizeOverflow>:
		 Length=strlen(strNumber);
		 StrPosCopy(strNumber,strNumber,MinPos,(Length-MinPos));	      
	 }
}

void NormalizeOverflow(char *strOverflowed){
    5a40:	cf 92       	push	r12
    5a42:	df 92       	push	r13
    5a44:	ef 92       	push	r14
    5a46:	ff 92       	push	r15
    5a48:	0f 93       	push	r16
    5a4a:	1f 93       	push	r17
    5a4c:	df 93       	push	r29
    5a4e:	cf 93       	push	r28
    5a50:	cd b7       	in	r28, 0x3d	; 61
    5a52:	de b7       	in	r29, 0x3e	; 62
    5a54:	64 97       	sbiw	r28, 0x14	; 20
    5a56:	0f b6       	in	r0, 0x3f	; 63
    5a58:	f8 94       	cli
    5a5a:	de bf       	out	0x3e, r29	; 62
    5a5c:	0f be       	out	0x3f, r0	; 63
    5a5e:	cd bf       	out	0x3d, r28	; 61
    5a60:	d8 2e       	mov	r13, r24
    5a62:	c9 2e       	mov	r12, r25
char i,Length,strMaxValue[20];//-99999999

     Length=strlen(strOverflowed);//-999453
    5a64:	a8 2f       	mov	r26, r24
    5a66:	b9 2f       	mov	r27, r25
    5a68:	fd 01       	movw	r30, r26
    5a6a:	01 90       	ld	r0, Z+
    5a6c:	00 20       	and	r0, r0
    5a6e:	e9 f7       	brne	.-6      	; 0x5a6a <NormalizeOverflow+0x2a>
    5a70:	31 97       	sbiw	r30, 0x01	; 1
    5a72:	4e 2f       	mov	r20, r30
    5a74:	48 1b       	sub	r20, r24
    5a76:	20 e0       	ldi	r18, 0x00	; 0
    5a78:	30 e0       	ldi	r19, 0x00	; 0
    5a7a:	7e 01       	movw	r14, r28
    5a7c:	08 94       	sec
    5a7e:	e1 1c       	adc	r14, r1
    5a80:	f1 1c       	adc	r15, r1
    5a82:	04 2f       	mov	r16, r20
    5a84:	10 e0       	ldi	r17, 0x00	; 0
    5a86:	0e c0       	rjmp	.+28     	; 0x5aa4 <NormalizeOverflow+0x64>
     for(i=0;i<Length;i++){//123456
	     strMaxValue[i]='0'+((Length-i)/Length);
    5a88:	f7 01       	movw	r30, r14
    5a8a:	e2 0f       	add	r30, r18
    5a8c:	f3 1f       	adc	r31, r19
    5a8e:	c8 01       	movw	r24, r16
    5a90:	82 1b       	sub	r24, r18
    5a92:	93 0b       	sbc	r25, r19
    5a94:	64 2f       	mov	r22, r20
    5a96:	70 e0       	ldi	r23, 0x00	; 0
    5a98:	0e 94 8e aa 	call	0x1551c	; 0x1551c <__divmodhi4>
    5a9c:	60 5d       	subi	r22, 0xD0	; 208
    5a9e:	60 83       	st	Z, r22
    5aa0:	2f 5f       	subi	r18, 0xFF	; 255
    5aa2:	3f 4f       	sbci	r19, 0xFF	; 255

void NormalizeOverflow(char *strOverflowed){
char i,Length,strMaxValue[20];//-99999999

     Length=strlen(strOverflowed);//-999453
     for(i=0;i<Length;i++){//123456
    5aa4:	24 17       	cp	r18, r20
    5aa6:	80 f3       	brcs	.-32     	; 0x5a88 <NormalizeOverflow+0x48>
	     strMaxValue[i]='0'+((Length-i)/Length);
	 }strMaxValue[Length]=0;
    5aa8:	0e 0d       	add	r16, r14
    5aaa:	1f 1d       	adc	r17, r15
    5aac:	f8 01       	movw	r30, r16
    5aae:	10 82       	st	Z, r1
     
	 //if (NinePos<Length-4)
	 StrCalc(TPLUS,strMaxValue,strOverflowed,strOverflowed);
    5ab0:	81 e0       	ldi	r24, 0x01	; 1
    5ab2:	b7 01       	movw	r22, r14
    5ab4:	4d 2d       	mov	r20, r13
    5ab6:	5c 2d       	mov	r21, r12
    5ab8:	2d 2d       	mov	r18, r13
    5aba:	3c 2d       	mov	r19, r12
    5abc:	0e 94 89 29 	call	0x5312	; 0x5312 <StrCalc>
}
    5ac0:	64 96       	adiw	r28, 0x14	; 20
    5ac2:	0f b6       	in	r0, 0x3f	; 63
    5ac4:	f8 94       	cli
    5ac6:	de bf       	out	0x3e, r29	; 62
    5ac8:	0f be       	out	0x3f, r0	; 63
    5aca:	cd bf       	out	0x3d, r28	; 61
    5acc:	cf 91       	pop	r28
    5ace:	df 91       	pop	r29
    5ad0:	1f 91       	pop	r17
    5ad2:	0f 91       	pop	r16
    5ad4:	ff 90       	pop	r15
    5ad6:	ef 90       	pop	r14
    5ad8:	df 90       	pop	r13
    5ada:	cf 90       	pop	r12
    5adc:	08 95       	ret

00005ade <AddSpaceLead>:
	    String[i]=' ';
	 }String[Size]=0;
  }
}

void AddSpaceLead(char *String,unsigned char Size){//
    5ade:	bf 92       	push	r11
    5ae0:	cf 92       	push	r12
    5ae2:	df 92       	push	r13
    5ae4:	ef 92       	push	r14
    5ae6:	ff 92       	push	r15
    5ae8:	0f 93       	push	r16
    5aea:	1f 93       	push	r17
    5aec:	df 93       	push	r29
    5aee:	cf 93       	push	r28
    5af0:	cd b7       	in	r28, 0x3d	; 61
    5af2:	de b7       	in	r29, 0x3e	; 62
    5af4:	e2 97       	sbiw	r28, 0x32	; 50
    5af6:	0f b6       	in	r0, 0x3f	; 63
    5af8:	f8 94       	cli
    5afa:	de bf       	out	0x3e, r29	; 62
    5afc:	0f be       	out	0x3f, r0	; 63
    5afe:	cd bf       	out	0x3d, r28	; 61
    5b00:	8c 01       	movw	r16, r24
     char i,Length,strAdded[50];
     Length=strlen(String);
    5b02:	fc 01       	movw	r30, r24
    5b04:	01 90       	ld	r0, Z+
    5b06:	00 20       	and	r0, r0
    5b08:	e9 f7       	brne	.-6      	; 0x5b04 <AddSpaceLead+0x26>
    5b0a:	31 97       	sbiw	r30, 0x01	; 1
    5b0c:	2e 2f       	mov	r18, r30
    5b0e:	28 1b       	sub	r18, r24

	 if (Size>Length){
    5b10:	26 17       	cp	r18, r22
    5b12:	e0 f5       	brcc	.+120    	; 0x5b8c <AddSpaceLead+0xae>
    5b14:	7e 01       	movw	r14, r28
    5b16:	08 94       	sec
    5b18:	e1 1c       	adc	r14, r1
    5b1a:	f1 1c       	adc	r15, r1
    5b1c:	f7 01       	movw	r30, r14
	    String[i]=' ';
	 }String[Size]=0;
  }
}

void AddSpaceLead(char *String,unsigned char Size){//
    5b1e:	be 2c       	mov	r11, r14
     char i,Length,strAdded[50];
     Length=strlen(String);

	 if (Size>Length){
         for(i=0;i<Size;i++){
	         strAdded[i]=' ';
    5b20:	90 e2       	ldi	r25, 0x20	; 32
    5b22:	01 c0       	rjmp	.+2      	; 0x5b26 <AddSpaceLead+0x48>
    5b24:	91 93       	st	Z+, r25
void AddSpaceLead(char *String,unsigned char Size){//
     char i,Length,strAdded[50];
     Length=strlen(String);

	 if (Size>Length){
         for(i=0;i<Size;i++){
    5b26:	8e 2f       	mov	r24, r30
    5b28:	8b 19       	sub	r24, r11
    5b2a:	86 17       	cp	r24, r22
    5b2c:	d8 f3       	brcs	.-10     	; 0x5b24 <AddSpaceLead+0x46>
	         strAdded[i]=' ';
	     }strAdded[Size]=0;
    5b2e:	46 2f       	mov	r20, r22
    5b30:	50 e0       	ldi	r21, 0x00	; 0
    5b32:	ce 01       	movw	r24, r28
    5b34:	01 96       	adiw	r24, 0x01	; 1
    5b36:	fc 01       	movw	r30, r24
    5b38:	e4 0f       	add	r30, r20
    5b3a:	f5 1f       	adc	r31, r21
    5b3c:	10 82       	st	Z, r1
	     //Copy
         for(i=(Size-Length);i<Size;i++){
    5b3e:	76 2f       	mov	r23, r22
    5b40:	72 1b       	sub	r23, r18
    5b42:	6c 01       	movw	r12, r24
	         strAdded[i]=String[i-(Size-Length)];
    5b44:	30 e0       	ldi	r19, 0x00	; 0
    5b46:	24 1b       	sub	r18, r20
    5b48:	35 0b       	sbc	r19, r21
    5b4a:	0c c0       	rjmp	.+24     	; 0x5b64 <AddSpaceLead+0x86>
    5b4c:	e7 2f       	mov	r30, r23
    5b4e:	f0 e0       	ldi	r31, 0x00	; 0
    5b50:	d6 01       	movw	r26, r12
    5b52:	ae 0f       	add	r26, r30
    5b54:	bf 1f       	adc	r27, r31
    5b56:	e0 0f       	add	r30, r16
    5b58:	f1 1f       	adc	r31, r17
    5b5a:	e2 0f       	add	r30, r18
    5b5c:	f3 1f       	adc	r31, r19
    5b5e:	80 81       	ld	r24, Z
    5b60:	8c 93       	st	X, r24
	 if (Size>Length){
         for(i=0;i<Size;i++){
	         strAdded[i]=' ';
	     }strAdded[Size]=0;
	     //Copy
         for(i=(Size-Length);i<Size;i++){
    5b62:	7f 5f       	subi	r23, 0xFF	; 255
    5b64:	76 17       	cp	r23, r22
    5b66:	90 f3       	brcs	.-28     	; 0x5b4c <AddSpaceLead+0x6e>
	         strAdded[i]=String[i-(Size-Length)];
	     }strAdded[Size]=0;
    5b68:	4c 0d       	add	r20, r12
    5b6a:	5d 1d       	adc	r21, r13
    5b6c:	da 01       	movw	r26, r20
    5b6e:	1c 92       	st	X, r1
    5b70:	f8 01       	movw	r30, r16
    5b72:	04 c0       	rjmp	.+8      	; 0x5b7c <AddSpaceLead+0x9e>
	     //Spaced
         for(i=0;i<Size;i++){
	         String[i]=strAdded[i];
    5b74:	d7 01       	movw	r26, r14
    5b76:	8d 91       	ld	r24, X+
    5b78:	7d 01       	movw	r14, r26
    5b7a:	81 93       	st	Z+, r24
	     //Copy
         for(i=(Size-Length);i<Size;i++){
	         strAdded[i]=String[i-(Size-Length)];
	     }strAdded[Size]=0;
	     //Spaced
         for(i=0;i<Size;i++){
    5b7c:	8e 2d       	mov	r24, r14
    5b7e:	8b 19       	sub	r24, r11
    5b80:	86 17       	cp	r24, r22
    5b82:	c0 f3       	brcs	.-16     	; 0x5b74 <AddSpaceLead+0x96>
	         String[i]=strAdded[i];
	     }String[Size]=0;
    5b84:	06 0f       	add	r16, r22
    5b86:	11 1d       	adc	r17, r1
    5b88:	f8 01       	movw	r30, r16
    5b8a:	10 82       	st	Z, r1
	 }
}
    5b8c:	e2 96       	adiw	r28, 0x32	; 50
    5b8e:	0f b6       	in	r0, 0x3f	; 63
    5b90:	f8 94       	cli
    5b92:	de bf       	out	0x3e, r29	; 62
    5b94:	0f be       	out	0x3f, r0	; 63
    5b96:	cd bf       	out	0x3d, r28	; 61
    5b98:	cf 91       	pop	r28
    5b9a:	df 91       	pop	r29
    5b9c:	1f 91       	pop	r17
    5b9e:	0f 91       	pop	r16
    5ba0:	ff 90       	pop	r15
    5ba2:	ef 90       	pop	r14
    5ba4:	df 90       	pop	r13
    5ba6:	cf 90       	pop	r12
    5ba8:	bf 90       	pop	r11
    5baa:	08 95       	ret

00005bac <AddSpaceLag>:
	 }
}



void AddSpaceLag(char *String,unsigned char Size){// [CREDITCARD             ]
    5bac:	cf 93       	push	r28
    5bae:	df 93       	push	r29
    5bb0:	ec 01       	movw	r28, r24
char i,Length;
     Length=strlen(String);
    5bb2:	dc 01       	movw	r26, r24
    5bb4:	0d 90       	ld	r0, X+
    5bb6:	00 20       	and	r0, r0
    5bb8:	e9 f7       	brne	.-6      	; 0x5bb4 <AddSpaceLag+0x8>
    5bba:	11 97       	sbiw	r26, 0x01	; 1
    5bbc:	a8 1b       	sub	r26, r24
    5bbe:	b9 0b       	sbc	r27, r25
  if (Length<Size){   
    5bc0:	a6 17       	cp	r26, r22
    5bc2:	60 f4       	brcc	.+24     	; 0x5bdc <AddSpaceLag+0x30>
    5bc4:	8a 2f       	mov	r24, r26
     for(i=Length;i<Size;i++){
	    String[i]=' ';
    5bc6:	90 e2       	ldi	r25, 0x20	; 32
    5bc8:	fe 01       	movw	r30, r28
    5bca:	e8 0f       	add	r30, r24
    5bcc:	f1 1d       	adc	r31, r1
    5bce:	90 83       	st	Z, r25

void AddSpaceLag(char *String,unsigned char Size){// [CREDITCARD             ]
char i,Length;
     Length=strlen(String);
  if (Length<Size){   
     for(i=Length;i<Size;i++){
    5bd0:	8f 5f       	subi	r24, 0xFF	; 255
    5bd2:	86 17       	cp	r24, r22
    5bd4:	c8 f3       	brcs	.-14     	; 0x5bc8 <AddSpaceLag+0x1c>
	    String[i]=' ';
	 }String[Size]=0;
    5bd6:	c6 0f       	add	r28, r22
    5bd8:	d1 1d       	adc	r29, r1
    5bda:	18 82       	st	Y, r1
  }
}
    5bdc:	df 91       	pop	r29
    5bde:	cf 91       	pop	r28
    5be0:	08 95       	ret

00005be2 <GetProductName>:
	 }    
	 //Clear Decimal

}

void GetProductName(char GradeId,char *strProductName){
    5be2:	0f 93       	push	r16
    5be4:	1f 93       	push	r17
    5be6:	df 93       	push	r29
    5be8:	cf 93       	push	r28
    5bea:	cd b7       	in	r28, 0x3d	; 61
    5bec:	de b7       	in	r29, 0x3e	; 62
    5bee:	2c 97       	sbiw	r28, 0x0c	; 12
    5bf0:	0f b6       	in	r0, 0x3f	; 63
    5bf2:	f8 94       	cli
    5bf4:	de bf       	out	0x3e, r29	; 62
    5bf6:	0f be       	out	0x3f, r0	; 63
    5bf8:	cd bf       	out	0x3d, r28	; 61
    5bfa:	48 2f       	mov	r20, r24
    5bfc:	8b 01       	movw	r16, r22
    5bfe:	fe 01       	movw	r30, r28
    5c00:	31 96       	adiw	r30, 0x01	; 1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    5c02:	9e 01       	movw	r18, r28
    5c04:	23 5f       	subi	r18, 0xF3	; 243
    5c06:	3f 4f       	sbci	r19, 0xFF	; 255
	     strMemory[i]=data;
    5c08:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    5c0a:	e2 17       	cp	r30, r18
    5c0c:	f3 07       	cpc	r31, r19
    5c0e:	e1 f7       	brne	.-8      	; 0x5c08 <GetProductName+0x26>
    5c10:	ce 01       	movw	r24, r28
    5c12:	01 96       	adiw	r24, 0x01	; 1

void GetProductName(char GradeId,char *strProductName){
char SProductName[12],i,Length;
     FillChar(SProductName,sizeof(SProductName),0); 
	 //eeprom_read_block((void*) &SProductName, (const void*) &DefProductName[GradeId-1],10);
	 if (GradeId>0) eeprom_read_block((void*) &SProductName, (const void*) &DefProductName[GradeId-1],10);
    5c14:	44 23       	and	r20, r20
    5c16:	59 f0       	breq	.+22     	; 0x5c2e <GetProductName+0x4c>
    5c18:	6d e0       	ldi	r22, 0x0D	; 13
    5c1a:	46 9f       	mul	r20, r22
    5c1c:	b0 01       	movw	r22, r0
    5c1e:	11 24       	eor	r1, r1
    5c20:	61 55       	subi	r22, 0x51	; 81
    5c22:	7f 4f       	sbci	r23, 0xFF	; 255
    5c24:	4a e0       	ldi	r20, 0x0A	; 10
    5c26:	50 e0       	ldi	r21, 0x00	; 0
    5c28:	0e 94 30 ad 	call	0x15a60	; 0x15a60 <__eerd_block_m128>
    5c2c:	14 c0       	rjmp	.+40     	; 0x5c56 <GetProductName+0x74>
	 else sprintf_P(SProductName,PSTR("N/A"));
    5c2e:	00 d0       	rcall	.+0      	; 0x5c30 <GetProductName+0x4e>
    5c30:	00 d0       	rcall	.+0      	; 0x5c32 <GetProductName+0x50>
    5c32:	ad b7       	in	r26, 0x3d	; 61
    5c34:	be b7       	in	r27, 0x3e	; 62
    5c36:	12 96       	adiw	r26, 0x02	; 2
    5c38:	9c 93       	st	X, r25
    5c3a:	8e 93       	st	-X, r24
    5c3c:	11 97       	sbiw	r26, 0x01	; 1
    5c3e:	8f e5       	ldi	r24, 0x5F	; 95
    5c40:	95 e0       	ldi	r25, 0x05	; 5
    5c42:	14 96       	adiw	r26, 0x04	; 4
    5c44:	9c 93       	st	X, r25
    5c46:	8e 93       	st	-X, r24
    5c48:	13 97       	sbiw	r26, 0x03	; 3
    5c4a:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
    5c4e:	0f 90       	pop	r0
    5c50:	0f 90       	pop	r0
    5c52:	0f 90       	pop	r0
    5c54:	0f 90       	pop	r0

     Length=strlen(SProductName);
    5c56:	de 01       	movw	r26, r28
    5c58:	11 96       	adiw	r26, 0x01	; 1
    5c5a:	fd 01       	movw	r30, r26
    5c5c:	01 90       	ld	r0, Z+
    5c5e:	00 20       	and	r0, r0
    5c60:	e9 f7       	brne	.-6      	; 0x5c5c <GetProductName+0x7a>
    5c62:	31 97       	sbiw	r30, 0x01	; 1
    5c64:	ea 1b       	sub	r30, r26
    5c66:	eb 30       	cpi	r30, 0x0B	; 11
    5c68:	08 f0       	brcs	.+2      	; 0x5c6c <GetProductName+0x8a>
    5c6a:	ea e0       	ldi	r30, 0x0A	; 10
    5c6c:	ae 01       	movw	r20, r28
    5c6e:	4f 5f       	subi	r20, 0xFF	; 255
    5c70:	5f 4f       	sbci	r21, 0xFF	; 255
    5c72:	98 01       	movw	r18, r16
    5c74:	ba 01       	movw	r22, r20
    5c76:	06 c0       	rjmp	.+12     	; 0x5c84 <GetProductName+0xa2>
	 if (Length>10)Length=10;

	 for(i=0;i<Length;i++){
	     strProductName[i]=SProductName[i];
    5c78:	db 01       	movw	r26, r22
    5c7a:	8d 91       	ld	r24, X+
    5c7c:	bd 01       	movw	r22, r26
    5c7e:	d9 01       	movw	r26, r18
    5c80:	8d 93       	st	X+, r24
    5c82:	9d 01       	movw	r18, r26
	 else sprintf_P(SProductName,PSTR("N/A"));

     Length=strlen(SProductName);
	 if (Length>10)Length=10;

	 for(i=0;i<Length;i++){
    5c84:	86 2f       	mov	r24, r22
    5c86:	84 1b       	sub	r24, r20
    5c88:	8e 17       	cp	r24, r30
    5c8a:	b0 f3       	brcs	.-20     	; 0x5c78 <GetProductName+0x96>
	     strProductName[i]=SProductName[i];
	 }strProductName[Length]=0;
    5c8c:	c8 01       	movw	r24, r16
    5c8e:	8e 0f       	add	r24, r30
    5c90:	91 1d       	adc	r25, r1
    5c92:	fc 01       	movw	r30, r24
    5c94:	10 82       	st	Z, r1

	 AddSpaceLag(strProductName,10);
    5c96:	c8 01       	movw	r24, r16
    5c98:	6a e0       	ldi	r22, 0x0A	; 10
    5c9a:	0e 94 d6 2d 	call	0x5bac	; 0x5bac <AddSpaceLag>
}
    5c9e:	2c 96       	adiw	r28, 0x0c	; 12
    5ca0:	0f b6       	in	r0, 0x3f	; 63
    5ca2:	f8 94       	cli
    5ca4:	de bf       	out	0x3e, r29	; 62
    5ca6:	0f be       	out	0x3f, r0	; 63
    5ca8:	cd bf       	out	0x3d, r28	; 61
    5caa:	cf 91       	pop	r28
    5cac:	df 91       	pop	r29
    5cae:	1f 91       	pop	r17
    5cb0:	0f 91       	pop	r16
    5cb2:	08 95       	ret

00005cb4 <GeniusSendLastTransaction>:
}
void GeniusSendPumpPreset(char iPumpID){
}


void GeniusSendLastTransaction(char iPumpID){
    5cb4:	2f 92       	push	r2
    5cb6:	3f 92       	push	r3
    5cb8:	4f 92       	push	r4
    5cba:	5f 92       	push	r5
    5cbc:	6f 92       	push	r6
    5cbe:	7f 92       	push	r7
    5cc0:	8f 92       	push	r8
    5cc2:	9f 92       	push	r9
    5cc4:	af 92       	push	r10
    5cc6:	bf 92       	push	r11
    5cc8:	cf 92       	push	r12
    5cca:	df 92       	push	r13
    5ccc:	ef 92       	push	r14
    5cce:	ff 92       	push	r15
    5cd0:	0f 93       	push	r16
    5cd2:	1f 93       	push	r17
    5cd4:	df 93       	push	r29
    5cd6:	cf 93       	push	r28
    5cd8:	cd b7       	in	r28, 0x3d	; 61
    5cda:	de b7       	in	r29, 0x3e	; 62
    5cdc:	c0 5b       	subi	r28, 0xB0	; 176
    5cde:	d0 40       	sbci	r29, 0x00	; 0
    5ce0:	0f b6       	in	r0, 0x3f	; 63
    5ce2:	f8 94       	cli
    5ce4:	de bf       	out	0x3e, r29	; 62
    5ce6:	0f be       	out	0x3f, r0	; 63
    5ce8:	cd bf       	out	0x3d, r28	; 61
    5cea:	e8 2e       	mov	r14, r24
    5cec:	fe 01       	movw	r30, r28
    5cee:	37 96       	adiw	r30, 0x07	; 7

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    5cf0:	ce 01       	movw	r24, r28
    5cf2:	46 96       	adiw	r24, 0x16	; 22
	     strMemory[i]=data;
    5cf4:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    5cf6:	e8 17       	cp	r30, r24
    5cf8:	f9 07       	cpc	r31, r25
    5cfa:	e1 f7       	brne	.-8      	; 0x5cf4 <GeniusSendLastTransaction+0x40>
	     strMemory[i]=data;
    5cfc:	ce 01       	movw	r24, r28
    5cfe:	85 96       	adiw	r24, 0x25	; 37
    5d00:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    5d02:	e8 17       	cp	r30, r24
    5d04:	f9 07       	cpc	r31, r25
    5d06:	e1 f7       	brne	.-8      	; 0x5d00 <GeniusSendLastTransaction+0x4c>
	     strMemory[i]=data;
    5d08:	ce 01       	movw	r24, r28
    5d0a:	c4 96       	adiw	r24, 0x34	; 52
    5d0c:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    5d0e:	e8 17       	cp	r30, r24
    5d10:	f9 07       	cpc	r31, r25
    5d12:	e1 f7       	brne	.-8      	; 0x5d0c <GeniusSendLastTransaction+0x58>
	     strMemory[i]=data;
    5d14:	cf 01       	movw	r24, r30
    5d16:	3f 01       	movw	r6, r30
    5d18:	0f 96       	adiw	r24, 0x0f	; 15
    5d1a:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    5d1c:	e8 17       	cp	r30, r24
    5d1e:	f9 07       	cpc	r31, r25
    5d20:	e1 f7       	brne	.-8      	; 0x5d1a <GeniusSendLastTransaction+0x66>
	 FillChar(STotalVolume,sizeof(STotalVolume),0);
	 FillChar(STotalMoney,sizeof(STotalMoney),0);
	      

	 //Generate
	 FIPAddr=GetFIPAddr(iPumpID);
    5d22:	8e 2d       	mov	r24, r14
    5d24:	0e 94 0a 20 	call	0x4014	; 0x4014 <GetFIPAddr>
     eeprom_read_block((void*) &PProductID, (const void*) &DefNozzleMap[FIPAddr-1], 6);
    5d28:	96 e0       	ldi	r25, 0x06	; 6
    5d2a:	89 9f       	mul	r24, r25
    5d2c:	b0 01       	movw	r22, r0
    5d2e:	11 24       	eor	r1, r1
    5d30:	60 5b       	subi	r22, 0xB0	; 176
    5d32:	7f 4f       	sbci	r23, 0xFF	; 255
    5d34:	8e 01       	movw	r16, r28
    5d36:	0f 5f       	subi	r16, 0xFF	; 255
    5d38:	1f 4f       	sbci	r17, 0xFF	; 255
    5d3a:	c8 01       	movw	r24, r16
    5d3c:	46 e0       	ldi	r20, 0x06	; 6
    5d3e:	50 e0       	ldi	r21, 0x00	; 0
    5d40:	0e 94 30 ad 	call	0x15a60	; 0x15a60 <__eerd_block_m128>
	 iNozzle=RecPumpData[iPumpID&0x0F].Grade;
    5d44:	2e 2c       	mov	r2, r14
    5d46:	33 24       	eor	r3, r3
    5d48:	91 01       	movw	r18, r2
    5d4a:	2f 70       	andi	r18, 0x0F	; 15
    5d4c:	30 70       	andi	r19, 0x00	; 0
    5d4e:	85 e3       	ldi	r24, 0x35	; 53
    5d50:	90 e0       	ldi	r25, 0x00	; 0
    5d52:	28 9f       	mul	r18, r24
    5d54:	f0 01       	movw	r30, r0
    5d56:	29 9f       	mul	r18, r25
    5d58:	f0 0d       	add	r31, r0
    5d5a:	38 9f       	mul	r19, r24
    5d5c:	f0 0d       	add	r31, r0
    5d5e:	11 24       	eor	r1, r1
    5d60:	e8 55       	subi	r30, 0x58	; 88
    5d62:	fa 4f       	sbci	r31, 0xFA	; 250
    5d64:	f0 80       	ld	r15, Z
	 iProdID=PProductID[iNozzle];
    5d66:	4f 2c       	mov	r4, r15
    5d68:	55 24       	eor	r5, r5

	 GetProductName(iProdID,strProduct);
    5d6a:	04 0d       	add	r16, r4
    5d6c:	15 1d       	adc	r17, r5
    5d6e:	d8 01       	movw	r26, r16
    5d70:	8c 91       	ld	r24, X
    5d72:	6e e5       	ldi	r22, 0x5E	; 94
    5d74:	77 e0       	ldi	r23, 0x07	; 7
    5d76:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <GetProductName>
	 GetTransactionVolume(iPumpID,SVolume);
    5d7a:	47 e0       	ldi	r20, 0x07	; 7
    5d7c:	84 2e       	mov	r8, r20
    5d7e:	91 2c       	mov	r9, r1
    5d80:	8c 0e       	add	r8, r28
    5d82:	9d 1e       	adc	r9, r29
    5d84:	8e 2d       	mov	r24, r14
    5d86:	b4 01       	movw	r22, r8
    5d88:	0e 94 aa 27 	call	0x4f54	; 0x4f54 <GetTransactionVolume>
	 GetTransactionMoney(iPumpID,SMoney);
    5d8c:	36 e1       	ldi	r19, 0x16	; 22
    5d8e:	a3 2e       	mov	r10, r19
    5d90:	b1 2c       	mov	r11, r1
    5d92:	ac 0e       	add	r10, r28
    5d94:	bd 1e       	adc	r11, r29
    5d96:	8e 2d       	mov	r24, r14
    5d98:	b5 01       	movw	r22, r10
    5d9a:	0e 94 70 27 	call	0x4ee0	; 0x4ee0 <GetTransactionMoney>
	 GetTotalizerVolume(iPumpID,iNozzle,STotalVolume);
    5d9e:	25 e2       	ldi	r18, 0x25	; 37
    5da0:	c2 2e       	mov	r12, r18
    5da2:	d1 2c       	mov	r13, r1
    5da4:	cc 0e       	add	r12, r28
    5da6:	dd 1e       	adc	r13, r29
    5da8:	8e 2d       	mov	r24, r14
    5daa:	6f 2d       	mov	r22, r15
    5dac:	a6 01       	movw	r20, r12
    5dae:	0e 94 53 27 	call	0x4ea6	; 0x4ea6 <GetTotalizerVolume>
	 GetTotalizerMoney(iPumpID,iNozzle,STotalMoney);
    5db2:	8e 2d       	mov	r24, r14
    5db4:	6f 2d       	mov	r22, r15
    5db6:	a3 01       	movw	r20, r6
    5db8:	0e 94 36 27 	call	0x4e6c	; 0x4e6c <GetTotalizerMoney>
	 
     ComposeDatetime(SDatetime);
    5dbc:	93 e4       	ldi	r25, 0x43	; 67
    5dbe:	e9 2e       	mov	r14, r25
    5dc0:	f1 2c       	mov	r15, r1
    5dc2:	ec 0e       	add	r14, r28
    5dc4:	fd 1e       	adc	r15, r29
    5dc6:	c7 01       	movw	r24, r14
    5dc8:	0e 94 15 1b 	call	0x362a	; 0x362a <ComposeDatetime>

	 //Compose
	 sprintf_P(strSend,PSTR("T%.2d%.2d%s%s%s%s%s%s:"),iPumpID,iNozzle,strProduct,SDatetime,SVolume,SMoney,STotalVolume,STotalMoney);
    5dcc:	ed b7       	in	r30, 0x3d	; 61
    5dce:	fe b7       	in	r31, 0x3e	; 62
    5dd0:	74 97       	sbiw	r30, 0x14	; 20
    5dd2:	0f b6       	in	r0, 0x3f	; 63
    5dd4:	f8 94       	cli
    5dd6:	fe bf       	out	0x3e, r31	; 62
    5dd8:	0f be       	out	0x3f, r0	; 63
    5dda:	ed bf       	out	0x3d, r30	; 61
    5ddc:	31 96       	adiw	r30, 0x01	; 1
    5dde:	8e 01       	movw	r16, r28
    5de0:	09 5a       	subi	r16, 0xA9	; 169
    5de2:	1f 4f       	sbci	r17, 0xFF	; 255
    5de4:	ad b7       	in	r26, 0x3d	; 61
    5de6:	be b7       	in	r27, 0x3e	; 62
    5de8:	12 96       	adiw	r26, 0x02	; 2
    5dea:	1c 93       	st	X, r17
    5dec:	0e 93       	st	-X, r16
    5dee:	11 97       	sbiw	r26, 0x01	; 1
    5df0:	8e e1       	ldi	r24, 0x1E	; 30
    5df2:	95 e0       	ldi	r25, 0x05	; 5
    5df4:	93 83       	std	Z+3, r25	; 0x03
    5df6:	82 83       	std	Z+2, r24	; 0x02
    5df8:	35 82       	std	Z+5, r3	; 0x05
    5dfa:	24 82       	std	Z+4, r2	; 0x04
    5dfc:	57 82       	std	Z+7, r5	; 0x07
    5dfe:	46 82       	std	Z+6, r4	; 0x06
    5e00:	8e e5       	ldi	r24, 0x5E	; 94
    5e02:	97 e0       	ldi	r25, 0x07	; 7
    5e04:	91 87       	std	Z+9, r25	; 0x09
    5e06:	80 87       	std	Z+8, r24	; 0x08
    5e08:	f3 86       	std	Z+11, r15	; 0x0b
    5e0a:	e2 86       	std	Z+10, r14	; 0x0a
    5e0c:	95 86       	std	Z+13, r9	; 0x0d
    5e0e:	84 86       	std	Z+12, r8	; 0x0c
    5e10:	b7 86       	std	Z+15, r11	; 0x0f
    5e12:	a6 86       	std	Z+14, r10	; 0x0e
    5e14:	d1 8a       	std	Z+17, r13	; 0x11
    5e16:	c0 8a       	std	Z+16, r12	; 0x10
    5e18:	62 8a       	std	Z+18, r6	; 0x12
    5e1a:	73 8a       	std	Z+19, r7	; 0x13
    5e1c:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	 cSum=SumChecksum(strSend);
    5e20:	ad b7       	in	r26, 0x3d	; 61
    5e22:	be b7       	in	r27, 0x3e	; 62
    5e24:	54 96       	adiw	r26, 0x14	; 20
    5e26:	0f b6       	in	r0, 0x3f	; 63
    5e28:	f8 94       	cli
    5e2a:	be bf       	out	0x3e, r27	; 62
    5e2c:	0f be       	out	0x3f, r0	; 63
    5e2e:	ad bf       	out	0x3d, r26	; 61
    5e30:	c8 01       	movw	r24, r16
    5e32:	0e 94 8b 21 	call	0x4316	; 0x4316 <SumChecksum>
    5e36:	e8 2e       	mov	r14, r24
	 uart_print(1,0,strSend);
    5e38:	81 e0       	ldi	r24, 0x01	; 1
    5e3a:	60 e0       	ldi	r22, 0x00	; 0
    5e3c:	a8 01       	movw	r20, r16
    5e3e:	0e 94 ef a8 	call	0x151de	; 0x151de <uart_print>
    5e42:	f8 01       	movw	r30, r16

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    5e44:	c8 01       	movw	r24, r16
    5e46:	f9 2e       	mov	r15, r25
    5e48:	ce 01       	movw	r24, r28
    5e4a:	8f 54       	subi	r24, 0x4F	; 79
    5e4c:	9f 4f       	sbci	r25, 0xFF	; 255
	     strMemory[i]=data;
    5e4e:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    5e50:	e8 17       	cp	r30, r24
    5e52:	f9 07       	cpc	r31, r25
    5e54:	e1 f7       	brne	.-8      	; 0x5e4e <GeniusSendLastTransaction+0x19a>
	 //Compose
	 sprintf_P(strSend,PSTR("T%.2d%.2d%s%s%s%s%s%s:"),iPumpID,iNozzle,strProduct,SDatetime,SVolume,SMoney,STotalVolume,STotalMoney);
	 cSum=SumChecksum(strSend);
	 uart_print(1,0,strSend);
	 FillChar(strSend,sizeof(strSend),0);      
	 sprintf_P(strSend,PSTR("%d"),cSum);
    5e56:	00 d0       	rcall	.+0      	; 0x5e58 <GeniusSendLastTransaction+0x1a4>
    5e58:	00 d0       	rcall	.+0      	; 0x5e5a <GeniusSendLastTransaction+0x1a6>
    5e5a:	00 d0       	rcall	.+0      	; 0x5e5c <GeniusSendLastTransaction+0x1a8>
    5e5c:	ed b7       	in	r30, 0x3d	; 61
    5e5e:	fe b7       	in	r31, 0x3e	; 62
    5e60:	31 96       	adiw	r30, 0x01	; 1
    5e62:	ad b7       	in	r26, 0x3d	; 61
    5e64:	be b7       	in	r27, 0x3e	; 62
    5e66:	11 96       	adiw	r26, 0x01	; 1
    5e68:	0c 93       	st	X, r16
    5e6a:	11 97       	sbiw	r26, 0x01	; 1
    5e6c:	12 96       	adiw	r26, 0x02	; 2
    5e6e:	fc 92       	st	X, r15
    5e70:	8b e1       	ldi	r24, 0x1B	; 27
    5e72:	95 e0       	ldi	r25, 0x05	; 5
    5e74:	93 83       	std	Z+3, r25	; 0x03
    5e76:	82 83       	std	Z+2, r24	; 0x02
    5e78:	e4 82       	std	Z+4, r14	; 0x04
    5e7a:	15 82       	std	Z+5, r1	; 0x05
    5e7c:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	 uart_print(1,1,strSend);	 
    5e80:	ed b7       	in	r30, 0x3d	; 61
    5e82:	fe b7       	in	r31, 0x3e	; 62
    5e84:	36 96       	adiw	r30, 0x06	; 6
    5e86:	0f b6       	in	r0, 0x3f	; 63
    5e88:	f8 94       	cli
    5e8a:	fe bf       	out	0x3e, r31	; 62
    5e8c:	0f be       	out	0x3f, r0	; 63
    5e8e:	ed bf       	out	0x3d, r30	; 61
    5e90:	81 e0       	ldi	r24, 0x01	; 1
    5e92:	61 e0       	ldi	r22, 0x01	; 1
    5e94:	40 2f       	mov	r20, r16
    5e96:	5f 2d       	mov	r21, r15
    5e98:	0e 94 ef a8 	call	0x151de	; 0x151de <uart_print>
}
    5e9c:	c0 55       	subi	r28, 0x50	; 80
    5e9e:	df 4f       	sbci	r29, 0xFF	; 255
    5ea0:	0f b6       	in	r0, 0x3f	; 63
    5ea2:	f8 94       	cli
    5ea4:	de bf       	out	0x3e, r29	; 62
    5ea6:	0f be       	out	0x3f, r0	; 63
    5ea8:	cd bf       	out	0x3d, r28	; 61
    5eaa:	cf 91       	pop	r28
    5eac:	df 91       	pop	r29
    5eae:	1f 91       	pop	r17
    5eb0:	0f 91       	pop	r16
    5eb2:	ff 90       	pop	r15
    5eb4:	ef 90       	pop	r14
    5eb6:	df 90       	pop	r13
    5eb8:	cf 90       	pop	r12
    5eba:	bf 90       	pop	r11
    5ebc:	af 90       	pop	r10
    5ebe:	9f 90       	pop	r9
    5ec0:	8f 90       	pop	r8
    5ec2:	7f 90       	pop	r7
    5ec4:	6f 90       	pop	r6
    5ec6:	5f 90       	pop	r5
    5ec8:	4f 90       	pop	r4
    5eca:	3f 90       	pop	r3
    5ecc:	2f 90       	pop	r2
    5ece:	08 95       	ret

00005ed0 <systemGeniusProtocol>:
	     Result=TS_OLD;
	 }
   return Result;
}

void systemGeniusProtocol(){
    5ed0:	1f 93       	push	r17
static char stGeniusProtocol=gpInitScan;
static char iPumpID;
	 
	 switch(stGeniusProtocol){
    5ed2:	80 91 bf 01 	lds	r24, 0x01BF
    5ed6:	83 30       	cpi	r24, 0x03	; 3
    5ed8:	61 f1       	breq	.+88     	; 0x5f32 <systemGeniusProtocol+0x62>
    5eda:	84 30       	cpi	r24, 0x04	; 4
    5edc:	28 f4       	brcc	.+10     	; 0x5ee8 <systemGeniusProtocol+0x18>
    5ede:	81 30       	cpi	r24, 0x01	; 1
    5ee0:	81 f0       	breq	.+32     	; 0x5f02 <systemGeniusProtocol+0x32>
    5ee2:	82 30       	cpi	r24, 0x02	; 2
    5ee4:	c0 f4       	brcc	.+48     	; 0x5f16 <systemGeniusProtocol+0x46>
    5ee6:	09 c0       	rjmp	.+18     	; 0x5efa <systemGeniusProtocol+0x2a>
    5ee8:	85 30       	cpi	r24, 0x05	; 5
    5eea:	09 f4       	brne	.+2      	; 0x5eee <systemGeniusProtocol+0x1e>
    5eec:	43 c0       	rjmp	.+134    	; 0x5f74 <systemGeniusProtocol+0xa4>
    5eee:	85 30       	cpi	r24, 0x05	; 5
    5ef0:	a0 f1       	brcs	.+104    	; 0x5f5a <systemGeniusProtocol+0x8a>
    5ef2:	86 30       	cpi	r24, 0x06	; 6
    5ef4:	09 f0       	breq	.+2      	; 0x5ef8 <systemGeniusProtocol+0x28>
    5ef6:	52 c0       	rjmp	.+164    	; 0x5f9c <systemGeniusProtocol+0xcc>
    5ef8:	43 c0       	rjmp	.+134    	; 0x5f80 <systemGeniusProtocol+0xb0>
	 case gpInitScan:
	      iPumpID=1;
    5efa:	81 e0       	ldi	r24, 0x01	; 1
    5efc:	80 93 be 01 	sts	0x01BE, r24
    5f00:	4b c0       	rjmp	.+150    	; 0x5f98 <systemGeniusProtocol+0xc8>
          stGeniusProtocol=gpScanNewTransaction;
	      break;
	 case gpScanNewTransaction:
	      if (GetIncomingTransStatus(PumpID)==TS_NEW){
    5f02:	80 91 bd 01 	lds	r24, 0x01BD
    5f06:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <GetIncomingTransStatus>
    5f0a:	82 30       	cpi	r24, 0x02	; 2
    5f0c:	09 f0       	breq	.+2      	; 0x5f10 <systemGeniusProtocol+0x40>
    5f0e:	46 c0       	rjmp	.+140    	; 0x5f9c <systemGeniusProtocol+0xcc>
		      IsTotalizerReceived=False;
    5f10:	10 92 af 01 	sts	0x01AF, r1
    5f14:	41 c0       	rjmp	.+130    	; 0x5f98 <systemGeniusProtocol+0xc8>
		      stGeniusProtocol=gpRequestTotalizer;
		  }
	      break;
     case gpRequestTotalizer:
	      SendPoolingCommand(SC_TOTALIZER,iPumpID);
    5f16:	90 91 be 01 	lds	r25, 0x01BE
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
    5f1a:	85 e0       	ldi	r24, 0x05	; 5
    5f1c:	80 93 a7 05 	sts	0x05A7, r24
	 PoolMsg=plMsg;
    5f20:	90 93 d3 0b 	sts	0x0BD3, r25
     IsControlPooling=True;
    5f24:	81 e0       	ldi	r24, 0x01	; 1
    5f26:	80 93 84 01 	sts	0x0184, r24
		      stGeniusProtocol=gpRequestTotalizer;
		  }
	      break;
     case gpRequestTotalizer:
	      SendPoolingCommand(SC_TOTALIZER,iPumpID);
		  TimSend=0;
    5f2a:	10 92 79 0c 	sts	0x0C79, r1
		  stGeniusProtocol=gpWaitRequestedTotalizer;
    5f2e:	83 e0       	ldi	r24, 0x03	; 3
    5f30:	33 c0       	rjmp	.+102    	; 0x5f98 <systemGeniusProtocol+0xc8>
	      break;
     case gpWaitRequestedTotalizer:
	      if ((IsTotalizerReceived==True)&&(AcknoledgePump==iPumpID)){
    5f32:	80 91 af 01 	lds	r24, 0x01AF
    5f36:	81 30       	cpi	r24, 0x01	; 1
    5f38:	59 f4       	brne	.+22     	; 0x5f50 <systemGeniusProtocol+0x80>
    5f3a:	90 91 ec 0b 	lds	r25, 0x0BEC
    5f3e:	80 91 be 01 	lds	r24, 0x01BE
    5f42:	98 17       	cp	r25, r24
    5f44:	29 f4       	brne	.+10     	; 0x5f50 <systemGeniusProtocol+0x80>
		      IsTotalizerReceived=False;
    5f46:	10 92 af 01 	sts	0x01AF, r1
			  stGeniusProtocol=gpSendTransactionData;
    5f4a:	84 e0       	ldi	r24, 0x04	; 4
    5f4c:	80 93 bf 01 	sts	0x01BF, r24
		  }
	      if (TimSend>TIM_SEND*2)stGeniusProtocol=gpNextPumpScan;
    5f50:	80 91 79 0c 	lds	r24, 0x0C79
    5f54:	85 31       	cpi	r24, 0x15	; 21
    5f56:	10 f1       	brcs	.+68     	; 0x5f9c <systemGeniusProtocol+0xcc>
    5f58:	11 c0       	rjmp	.+34     	; 0x5f7c <systemGeniusProtocol+0xac>
	      break;
     case gpSendTransactionData:
          GeniusSendLastTransaction(iPumpID);
    5f5a:	80 91 be 01 	lds	r24, 0x01BE
    5f5e:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <GeniusSendLastTransaction>
		  SetIncomingTransStatus(iPumpID,TS_OLD);
    5f62:	80 91 be 01 	lds	r24, 0x01BE
    5f66:	63 e0       	ldi	r22, 0x03	; 3
    5f68:	0e 94 c7 1a 	call	0x358e	; 0x358e <SetIncomingTransStatus>
		  
		  TimSend=0;
    5f6c:	10 92 79 0c 	sts	0x0C79, r1
          stGeniusProtocol=gpDelayNextPumpScan;
    5f70:	85 e0       	ldi	r24, 0x05	; 5
    5f72:	12 c0       	rjmp	.+36     	; 0x5f98 <systemGeniusProtocol+0xc8>
	      break;
     case gpDelayNextPumpScan:
          if (TimSend>1)stGeniusProtocol=gpNextPumpScan;
    5f74:	80 91 79 0c 	lds	r24, 0x0C79
    5f78:	82 30       	cpi	r24, 0x02	; 2
    5f7a:	80 f0       	brcs	.+32     	; 0x5f9c <systemGeniusProtocol+0xcc>
    5f7c:	86 e0       	ldi	r24, 0x06	; 6
    5f7e:	0c c0       	rjmp	.+24     	; 0x5f98 <systemGeniusProtocol+0xc8>
	      break;
     case gpNextPumpScan:
          if (iPumpID<=eeprom_read_byte(&DefPoolingPumpMax)){
    5f80:	10 91 be 01 	lds	r17, 0x01BE
    5f84:	85 e4       	ldi	r24, 0x45	; 69
    5f86:	91 e0       	ldi	r25, 0x01	; 1
    5f88:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
    5f8c:	81 17       	cp	r24, r17
    5f8e:	30 f0       	brcs	.+12     	; 0x5f9c <systemGeniusProtocol+0xcc>
		      iPumpID++;
    5f90:	1f 5f       	subi	r17, 0xFF	; 255
    5f92:	10 93 be 01 	sts	0x01BE, r17
              stGeniusProtocol=gpScanNewTransaction;
    5f96:	81 e0       	ldi	r24, 0x01	; 1
    5f98:	80 93 bf 01 	sts	0x01BF, r24
		  }
	      break;
	 }
}
    5f9c:	1f 91       	pop	r17
    5f9e:	08 95       	ret

00005fa0 <StrAlignCenter>:
	 }
	 //replace
	 for(i=0;i<strlen(sDate);i++)Date[i]=sDate[i];
}

void StrAlignCenter(char *Source, unsigned int Length){
    5fa0:	ef 92       	push	r14
    5fa2:	ff 92       	push	r15
    5fa4:	0f 93       	push	r16
    5fa6:	1f 93       	push	r17
    5fa8:	18 2f       	mov	r17, r24
    5faa:	09 2f       	mov	r16, r25
    5fac:	7b 01       	movw	r14, r22
char nAddedSpace,srcLength;
     RemSpaceLag(Source);
    5fae:	0e 94 e4 25 	call	0x4bc8	; 0x4bc8 <RemSpaceLag>
	 RemSpaceLead(Source);
    5fb2:	81 2f       	mov	r24, r17
    5fb4:	90 2f       	mov	r25, r16
    5fb6:	0e 94 99 25 	call	0x4b32	; 0x4b32 <RemSpaceLead>
	 srcLength=strlen(Source);
    5fba:	a1 2f       	mov	r26, r17
    5fbc:	b0 2f       	mov	r27, r16
    5fbe:	fd 01       	movw	r30, r26
    5fc0:	01 90       	ld	r0, Z+
    5fc2:	00 20       	and	r0, r0
    5fc4:	e9 f7       	brne	.-6      	; 0x5fc0 <StrAlignCenter+0x20>
    5fc6:	31 97       	sbiw	r30, 0x01	; 1
    5fc8:	e1 1b       	sub	r30, r17
     nAddedSpace=(Length-srcLength)/2;
     AddSpaceLead(Source,srcLength+nAddedSpace);
    5fca:	c7 01       	movw	r24, r14
    5fcc:	8e 1b       	sub	r24, r30
    5fce:	91 09       	sbc	r25, r1
    5fd0:	96 95       	lsr	r25
    5fd2:	87 95       	ror	r24
    5fd4:	e8 0f       	add	r30, r24
    5fd6:	81 2f       	mov	r24, r17
    5fd8:	90 2f       	mov	r25, r16
    5fda:	6e 2f       	mov	r22, r30
    5fdc:	0e 94 6f 2d 	call	0x5ade	; 0x5ade <AddSpaceLead>
	 AddSpaceLag(Source,Length);
    5fe0:	81 2f       	mov	r24, r17
    5fe2:	90 2f       	mov	r25, r16
    5fe4:	6e 2d       	mov	r22, r14
    5fe6:	0e 94 d6 2d 	call	0x5bac	; 0x5bac <AddSpaceLag>
}
    5fea:	1f 91       	pop	r17
    5fec:	0f 91       	pop	r16
    5fee:	ff 90       	pop	r15
    5ff0:	ef 90       	pop	r14
    5ff2:	08 95       	ret

00005ff4 <AddCharLead>:
	 }String[Size]=0;
  }

}

void AddCharLead(char *String,char CharAdded,unsigned char Size){//
    5ff4:	bf 92       	push	r11
    5ff6:	cf 92       	push	r12
    5ff8:	df 92       	push	r13
    5ffa:	ef 92       	push	r14
    5ffc:	ff 92       	push	r15
    5ffe:	0f 93       	push	r16
    6000:	1f 93       	push	r17
    6002:	df 93       	push	r29
    6004:	cf 93       	push	r28
    6006:	cd b7       	in	r28, 0x3d	; 61
    6008:	de b7       	in	r29, 0x3e	; 62
    600a:	6e 97       	sbiw	r28, 0x1e	; 30
    600c:	0f b6       	in	r0, 0x3f	; 63
    600e:	f8 94       	cli
    6010:	de bf       	out	0x3e, r29	; 62
    6012:	0f be       	out	0x3f, r0	; 63
    6014:	cd bf       	out	0x3d, r28	; 61
    6016:	8c 01       	movw	r16, r24
    6018:	e4 2e       	mov	r14, r20
     char i,Length,strAdded[30];
     Length=strlen(String);
    601a:	fc 01       	movw	r30, r24
    601c:	01 90       	ld	r0, Z+
    601e:	00 20       	and	r0, r0
    6020:	e9 f7       	brne	.-6      	; 0x601c <AddCharLead+0x28>
    6022:	31 97       	sbiw	r30, 0x01	; 1
    6024:	2e 2f       	mov	r18, r30
    6026:	28 1b       	sub	r18, r24

	 if (Size>Length){
    6028:	24 17       	cp	r18, r20
    602a:	d0 f5       	brcc	.+116    	; 0x60a0 <AddCharLead+0xac>
    602c:	ae 01       	movw	r20, r28
    602e:	4f 5f       	subi	r20, 0xFF	; 255
    6030:	5f 4f       	sbci	r21, 0xFF	; 255
    6032:	fa 01       	movw	r30, r20
	 }String[Size]=0;
  }

}

void AddCharLead(char *String,char CharAdded,unsigned char Size){//
    6034:	b4 2e       	mov	r11, r20
    6036:	01 c0       	rjmp	.+2      	; 0x603a <AddCharLead+0x46>
     char i,Length,strAdded[30];
     Length=strlen(String);

	 if (Size>Length){
         for(i=0;i<Size;i++){
	         strAdded[i]=CharAdded;
    6038:	61 93       	st	Z+, r22
void AddCharLead(char *String,char CharAdded,unsigned char Size){//
     char i,Length,strAdded[30];
     Length=strlen(String);

	 if (Size>Length){
         for(i=0;i<Size;i++){
    603a:	8e 2f       	mov	r24, r30
    603c:	8b 19       	sub	r24, r11
    603e:	8e 15       	cp	r24, r14
    6040:	d8 f3       	brcs	.-10     	; 0x6038 <AddCharLead+0x44>
	         strAdded[i]=CharAdded;
	     }strAdded[Size]=0;
    6042:	6e 2d       	mov	r22, r14
    6044:	70 e0       	ldi	r23, 0x00	; 0
    6046:	ce 01       	movw	r24, r28
    6048:	01 96       	adiw	r24, 0x01	; 1
    604a:	fc 01       	movw	r30, r24
    604c:	e6 0f       	add	r30, r22
    604e:	f7 1f       	adc	r31, r23
    6050:	10 82       	st	Z, r1
	     //Copy
         for(i=(Size-Length);i<Size;i++){
    6052:	fe 2c       	mov	r15, r14
    6054:	f2 1a       	sub	r15, r18
    6056:	6c 01       	movw	r12, r24
	         strAdded[i]=String[i-(Size-Length)];
    6058:	30 e0       	ldi	r19, 0x00	; 0
    605a:	26 1b       	sub	r18, r22
    605c:	37 0b       	sbc	r19, r23
    605e:	0c c0       	rjmp	.+24     	; 0x6078 <AddCharLead+0x84>
    6060:	ef 2d       	mov	r30, r15
    6062:	f0 e0       	ldi	r31, 0x00	; 0
    6064:	d6 01       	movw	r26, r12
    6066:	ae 0f       	add	r26, r30
    6068:	bf 1f       	adc	r27, r31
    606a:	e0 0f       	add	r30, r16
    606c:	f1 1f       	adc	r31, r17
    606e:	e2 0f       	add	r30, r18
    6070:	f3 1f       	adc	r31, r19
    6072:	80 81       	ld	r24, Z
    6074:	8c 93       	st	X, r24
	 if (Size>Length){
         for(i=0;i<Size;i++){
	         strAdded[i]=CharAdded;
	     }strAdded[Size]=0;
	     //Copy
         for(i=(Size-Length);i<Size;i++){
    6076:	f3 94       	inc	r15
    6078:	fe 14       	cp	r15, r14
    607a:	90 f3       	brcs	.-28     	; 0x6060 <AddCharLead+0x6c>
	         strAdded[i]=String[i-(Size-Length)];
	     }strAdded[Size]=0;
    607c:	6c 0d       	add	r22, r12
    607e:	7d 1d       	adc	r23, r13
    6080:	db 01       	movw	r26, r22
    6082:	1c 92       	st	X, r1
    6084:	f8 01       	movw	r30, r16
    6086:	04 c0       	rjmp	.+8      	; 0x6090 <AddCharLead+0x9c>
	     //Spaced
         for(i=0;i<Size;i++){
	         String[i]=strAdded[i];
    6088:	da 01       	movw	r26, r20
    608a:	8d 91       	ld	r24, X+
    608c:	ad 01       	movw	r20, r26
    608e:	81 93       	st	Z+, r24
	     //Copy
         for(i=(Size-Length);i<Size;i++){
	         strAdded[i]=String[i-(Size-Length)];
	     }strAdded[Size]=0;
	     //Spaced
         for(i=0;i<Size;i++){
    6090:	84 2f       	mov	r24, r20
    6092:	8b 19       	sub	r24, r11
    6094:	8e 15       	cp	r24, r14
    6096:	c0 f3       	brcs	.-16     	; 0x6088 <AddCharLead+0x94>
	         String[i]=strAdded[i];
	     }String[Size]=0;
    6098:	0e 0d       	add	r16, r14
    609a:	11 1d       	adc	r17, r1
    609c:	f8 01       	movw	r30, r16
    609e:	10 82       	st	Z, r1
	 }
}
    60a0:	6e 96       	adiw	r28, 0x1e	; 30
    60a2:	0f b6       	in	r0, 0x3f	; 63
    60a4:	f8 94       	cli
    60a6:	de bf       	out	0x3e, r29	; 62
    60a8:	0f be       	out	0x3f, r0	; 63
    60aa:	cd bf       	out	0x3d, r28	; 61
    60ac:	cf 91       	pop	r28
    60ae:	df 91       	pop	r29
    60b0:	1f 91       	pop	r17
    60b2:	0f 91       	pop	r16
    60b4:	ff 90       	pop	r15
    60b6:	ef 90       	pop	r14
    60b8:	df 90       	pop	r13
    60ba:	cf 90       	pop	r12
    60bc:	bf 90       	pop	r11
    60be:	08 95       	ret

000060c0 <AddCharLag>:
    }
return Result;
}

//String Processing
void AddCharLag(char *String,char CharAdded,unsigned char Size){
    60c0:	cf 93       	push	r28
    60c2:	df 93       	push	r29
    60c4:	ec 01       	movw	r28, r24
char i,Length;
     Length=strlen(String);
    60c6:	dc 01       	movw	r26, r24
    60c8:	0d 90       	ld	r0, X+
    60ca:	00 20       	and	r0, r0
    60cc:	e9 f7       	brne	.-6      	; 0x60c8 <AddCharLag+0x8>
    60ce:	11 97       	sbiw	r26, 0x01	; 1
    60d0:	a8 1b       	sub	r26, r24
    60d2:	b9 0b       	sbc	r27, r25
  if (Length<Size){   
    60d4:	a4 17       	cp	r26, r20
    60d6:	58 f4       	brcc	.+22     	; 0x60ee <AddCharLag+0x2e>
    60d8:	8a 2f       	mov	r24, r26
     for(i=Length;i<Size;i++){
	    String[i]=CharAdded;
    60da:	fe 01       	movw	r30, r28
    60dc:	e8 0f       	add	r30, r24
    60de:	f1 1d       	adc	r31, r1
    60e0:	60 83       	st	Z, r22
//String Processing
void AddCharLag(char *String,char CharAdded,unsigned char Size){
char i,Length;
     Length=strlen(String);
  if (Length<Size){   
     for(i=Length;i<Size;i++){
    60e2:	8f 5f       	subi	r24, 0xFF	; 255
    60e4:	84 17       	cp	r24, r20
    60e6:	c8 f3       	brcs	.-14     	; 0x60da <AddCharLag+0x1a>
	    String[i]=CharAdded;
	 }String[Size]=0;
    60e8:	c4 0f       	add	r28, r20
    60ea:	d1 1d       	adc	r29, r1
    60ec:	18 82       	st	Y, r1
  }

}
    60ee:	df 91       	pop	r29
    60f0:	cf 91       	pop	r28
    60f2:	08 95       	ret

000060f4 <CountTotalizerSatus>:
		      Result++;		  
		  }	 
	 }
  return Result;
}
char CountTotalizerSatus(char *strPumpStatusTotalizer){
    60f4:	cf 92       	push	r12
    60f6:	df 92       	push	r13
    60f8:	ef 92       	push	r14
    60fa:	ff 92       	push	r15
    60fc:	0f 93       	push	r16
    60fe:	1f 93       	push	r17
    6100:	cf 93       	push	r28
    6102:	df 93       	push	r29
    6104:	7c 01       	movw	r14, r24
char i,Result;
     Result=0;
	 for (i=0;i<strlen(strPumpStatusTotalizer);i++){
    6106:	dc 01       	movw	r26, r24
    6108:	0d 90       	ld	r0, X+
    610a:	00 20       	and	r0, r0
    610c:	e9 f7       	brne	.-6      	; 0x6108 <CountTotalizerSatus+0x14>
    610e:	8d 01       	movw	r16, r26
    6110:	01 50       	subi	r16, 0x01	; 1
    6112:	10 40       	sbci	r17, 0x00	; 0
    6114:	08 1b       	sub	r16, r24
    6116:	19 0b       	sbc	r17, r25
    6118:	cc 24       	eor	r12, r12
    611a:	dd 24       	eor	r13, r13
    611c:	0a c0       	rjmp	.+20     	; 0x6132 <CountTotalizerSatus+0x3e>
	      if (strPumpStatusTotalizer[i]==GetPumpStatusLabel(PS_TOTALIZER)){
    611e:	84 e1       	ldi	r24, 0x14	; 20
    6120:	0e 94 42 14 	call	0x2884	; 0x2884 <GetPumpStatusLabel>
    6124:	ce 0d       	add	r28, r14
    6126:	df 1d       	adc	r29, r15
    6128:	98 81       	ld	r25, Y
    612a:	98 17       	cp	r25, r24
    612c:	09 f4       	brne	.+2      	; 0x6130 <CountTotalizerSatus+0x3c>
		      Result++;		  
    612e:	d3 94       	inc	r13
  return Result;
}
char CountTotalizerSatus(char *strPumpStatusTotalizer){
char i,Result;
     Result=0;
	 for (i=0;i<strlen(strPumpStatusTotalizer);i++){
    6130:	c3 94       	inc	r12
    6132:	cc 2d       	mov	r28, r12
    6134:	d0 e0       	ldi	r29, 0x00	; 0
    6136:	c0 17       	cp	r28, r16
    6138:	d1 07       	cpc	r29, r17
    613a:	88 f3       	brcs	.-30     	; 0x611e <CountTotalizerSatus+0x2a>
	      if (strPumpStatusTotalizer[i]==GetPumpStatusLabel(PS_TOTALIZER)){
		      Result++;		  
		  }	 
	 }
  return Result;
}
    613c:	8d 2d       	mov	r24, r13
    613e:	df 91       	pop	r29
    6140:	cf 91       	pop	r28
    6142:	1f 91       	pop	r17
    6144:	0f 91       	pop	r16
    6146:	ff 90       	pop	r15
    6148:	ef 90       	pop	r14
    614a:	df 90       	pop	r13
    614c:	cf 90       	pop	r12
    614e:	08 95       	ret

00006150 <RemoveChar>:
	   sprintf_P(strSend,PSTR("Wrap:%s"),strDestCode);
	   uart_print(1,1,strSend);     
	 #endif
}

void RemoveChar(char *strSource, char cRem){
    6150:	1f 93       	push	r17
    6152:	df 93       	push	r29
    6154:	cf 93       	push	r28
    6156:	cd b7       	in	r28, 0x3d	; 61
    6158:	de b7       	in	r29, 0x3e	; 62
    615a:	64 97       	sbiw	r28, 0x14	; 20
    615c:	0f b6       	in	r0, 0x3f	; 63
    615e:	f8 94       	cli
    6160:	de bf       	out	0x3e, r29	; 62
    6162:	0f be       	out	0x3f, r0	; 63
    6164:	cd bf       	out	0x3d, r28	; 61
    6166:	16 2f       	mov	r17, r22
    6168:	50 e0       	ldi	r21, 0x00	; 0
    616a:	40 e0       	ldi	r20, 0x00	; 0
     char i,iAdd,sTemp[20];
     iAdd=0;
	 for(i=0;i<strlen(strSource);i++){
	     if (strSource[i]!=cRem){
		     sTemp[iAdd]=strSource[i];
    616c:	be 01       	movw	r22, r28
    616e:	6f 5f       	subi	r22, 0xFF	; 255
    6170:	7f 4f       	sbci	r23, 0xFF	; 255
    6172:	0c c0       	rjmp	.+24     	; 0x618c <RemoveChar+0x3c>

void RemoveChar(char *strSource, char cRem){
     char i,iAdd,sTemp[20];
     iAdd=0;
	 for(i=0;i<strlen(strSource);i++){
	     if (strSource[i]!=cRem){
    6174:	28 0f       	add	r18, r24
    6176:	39 1f       	adc	r19, r25
    6178:	d9 01       	movw	r26, r18
    617a:	2c 91       	ld	r18, X
    617c:	21 17       	cp	r18, r17
    617e:	29 f0       	breq	.+10     	; 0x618a <RemoveChar+0x3a>
		     sTemp[iAdd]=strSource[i];
    6180:	fb 01       	movw	r30, r22
    6182:	e4 0f       	add	r30, r20
    6184:	f1 1d       	adc	r31, r1
    6186:	20 83       	st	Z, r18
			 iAdd++;
    6188:	4f 5f       	subi	r20, 0xFF	; 255
}

void RemoveChar(char *strSource, char cRem){
     char i,iAdd,sTemp[20];
     iAdd=0;
	 for(i=0;i<strlen(strSource);i++){
    618a:	5f 5f       	subi	r21, 0xFF	; 255
    618c:	25 2f       	mov	r18, r21
    618e:	30 e0       	ldi	r19, 0x00	; 0
    6190:	fc 01       	movw	r30, r24
    6192:	01 90       	ld	r0, Z+
    6194:	00 20       	and	r0, r0
    6196:	e9 f7       	brne	.-6      	; 0x6192 <RemoveChar+0x42>
    6198:	31 97       	sbiw	r30, 0x01	; 1
    619a:	e8 1b       	sub	r30, r24
    619c:	f9 0b       	sbc	r31, r25
    619e:	2e 17       	cp	r18, r30
    61a0:	3f 07       	cpc	r19, r31
    61a2:	40 f3       	brcs	.-48     	; 0x6174 <RemoveChar+0x24>
	     if (strSource[i]!=cRem){
		     sTemp[iAdd]=strSource[i];
			 iAdd++;
          }
	 }sTemp[iAdd]=0;
    61a4:	9e 01       	movw	r18, r28
    61a6:	2f 5f       	subi	r18, 0xFF	; 255
    61a8:	3f 4f       	sbci	r19, 0xFF	; 255
    61aa:	f9 01       	movw	r30, r18
    61ac:	e4 0f       	add	r30, r20
    61ae:	f1 1d       	adc	r31, r1
    61b0:	10 82       	st	Z, r1
	 sprintf_P(strSource,PSTR("%s"),sTemp);
    61b2:	00 d0       	rcall	.+0      	; 0x61b4 <RemoveChar+0x64>
    61b4:	00 d0       	rcall	.+0      	; 0x61b6 <RemoveChar+0x66>
    61b6:	00 d0       	rcall	.+0      	; 0x61b8 <RemoveChar+0x68>
    61b8:	ed b7       	in	r30, 0x3d	; 61
    61ba:	fe b7       	in	r31, 0x3e	; 62
    61bc:	31 96       	adiw	r30, 0x01	; 1
    61be:	ad b7       	in	r26, 0x3d	; 61
    61c0:	be b7       	in	r27, 0x3e	; 62
    61c2:	12 96       	adiw	r26, 0x02	; 2
    61c4:	9c 93       	st	X, r25
    61c6:	8e 93       	st	-X, r24
    61c8:	11 97       	sbiw	r26, 0x01	; 1
    61ca:	89 e0       	ldi	r24, 0x09	; 9
    61cc:	9a e1       	ldi	r25, 0x1A	; 26
    61ce:	93 83       	std	Z+3, r25	; 0x03
    61d0:	82 83       	std	Z+2, r24	; 0x02
    61d2:	35 83       	std	Z+5, r19	; 0x05
    61d4:	24 83       	std	Z+4, r18	; 0x04
    61d6:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
    61da:	ed b7       	in	r30, 0x3d	; 61
    61dc:	fe b7       	in	r31, 0x3e	; 62
    61de:	36 96       	adiw	r30, 0x06	; 6
    61e0:	0f b6       	in	r0, 0x3f	; 63
    61e2:	f8 94       	cli
    61e4:	fe bf       	out	0x3e, r31	; 62
    61e6:	0f be       	out	0x3f, r0	; 63
    61e8:	ed bf       	out	0x3d, r30	; 61
}
    61ea:	64 96       	adiw	r28, 0x14	; 20
    61ec:	0f b6       	in	r0, 0x3f	; 63
    61ee:	f8 94       	cli
    61f0:	de bf       	out	0x3e, r29	; 62
    61f2:	0f be       	out	0x3f, r0	; 63
    61f4:	cd bf       	out	0x3d, r28	; 61
    61f6:	cf 91       	pop	r28
    61f8:	df 91       	pop	r29
    61fa:	1f 91       	pop	r17
    61fc:	08 95       	ret

000061fe <WrapCode>:
	      break;
	 }
   return Result;
}

void WrapCode(char *strRawCode){
    61fe:	8f 92       	push	r8
    6200:	9f 92       	push	r9
    6202:	bf 92       	push	r11
    6204:	cf 92       	push	r12
    6206:	df 92       	push	r13
    6208:	ef 92       	push	r14
    620a:	ff 92       	push	r15
    620c:	0f 93       	push	r16
    620e:	1f 93       	push	r17
    6210:	df 93       	push	r29
    6212:	cf 93       	push	r28
    6214:	cd b7       	in	r28, 0x3d	; 61
    6216:	de b7       	in	r29, 0x3e	; 62
    6218:	2f 97       	sbiw	r28, 0x0f	; 15
    621a:	0f b6       	in	r0, 0x3f	; 63
    621c:	f8 94       	cli
    621e:	de bf       	out	0x3e, r29	; 62
    6220:	0f be       	out	0x3f, r0	; 63
    6222:	cd bf       	out	0x3d, r28	; 61
    6224:	6c 01       	movw	r12, r24
    6226:	bb 24       	eor	r11, r11
    6228:	40 e0       	ldi	r20, 0x00	; 0
    622a:	4e 01       	movw	r8, r28
    622c:	08 94       	sec
    622e:	81 1c       	adc	r8, r1
    6230:	91 1c       	adc	r9, r1
    6232:	12 c0       	rjmp	.+36     	; 0x6258 <WrapCode+0x5a>
     char i,seedKey;
	 char strTemp[15];
	 //62678677 ->68846445
	 seedKey=0;
	 for (i=0;i<strlen(strRawCode);i++){
	      strTemp[i]='0'+GeniusCalc(G_PLUS,(strRawCode[i]-'0'),seedKey);
    6234:	86 01       	movw	r16, r12
    6236:	0e 0d       	add	r16, r14
    6238:	1f 1d       	adc	r17, r15
    623a:	d8 01       	movw	r26, r16
    623c:	6c 91       	ld	r22, X
    623e:	60 53       	subi	r22, 0x30	; 48
    6240:	80 e0       	ldi	r24, 0x00	; 0
    6242:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <GeniusCalc>
    6246:	e8 0c       	add	r14, r8
    6248:	f9 1c       	adc	r15, r9
    624a:	80 5d       	subi	r24, 0xD0	; 208
    624c:	f7 01       	movw	r30, r14
    624e:	80 83       	st	Z, r24
		  seedKey=strRawCode[i]-'0';
    6250:	d8 01       	movw	r26, r16
    6252:	4c 91       	ld	r20, X
    6254:	40 53       	subi	r20, 0x30	; 48
void WrapCode(char *strRawCode){
     char i,seedKey;
	 char strTemp[15];
	 //62678677 ->68846445
	 seedKey=0;
	 for (i=0;i<strlen(strRawCode);i++){
    6256:	b3 94       	inc	r11
    6258:	eb 2c       	mov	r14, r11
    625a:	ff 24       	eor	r15, r15
    625c:	d6 01       	movw	r26, r12
    625e:	0d 90       	ld	r0, X+
    6260:	00 20       	and	r0, r0
    6262:	e9 f7       	brne	.-6      	; 0x625e <WrapCode+0x60>
    6264:	11 97       	sbiw	r26, 0x01	; 1
    6266:	ac 19       	sub	r26, r12
    6268:	bd 09       	sbc	r27, r13
    626a:	ea 16       	cp	r14, r26
    626c:	fb 06       	cpc	r15, r27
    626e:	10 f3       	brcs	.-60     	; 0x6234 <WrapCode+0x36>
	      strTemp[i]='0'+GeniusCalc(G_PLUS,(strRawCode[i]-'0'),seedKey);
		  seedKey=strRawCode[i]-'0';
	 }strTemp[strlen(strRawCode)]=0;
    6270:	a8 0d       	add	r26, r8
    6272:	b9 1d       	adc	r27, r9
    6274:	1c 92       	st	X, r1
     sprintf_P(strRawCode,PSTR("%s"),strTemp);
    6276:	00 d0       	rcall	.+0      	; 0x6278 <WrapCode+0x7a>
    6278:	00 d0       	rcall	.+0      	; 0x627a <WrapCode+0x7c>
    627a:	00 d0       	rcall	.+0      	; 0x627c <WrapCode+0x7e>
    627c:	ed b7       	in	r30, 0x3d	; 61
    627e:	fe b7       	in	r31, 0x3e	; 62
    6280:	31 96       	adiw	r30, 0x01	; 1
    6282:	ad b7       	in	r26, 0x3d	; 61
    6284:	be b7       	in	r27, 0x3e	; 62
    6286:	12 96       	adiw	r26, 0x02	; 2
    6288:	dc 92       	st	X, r13
    628a:	ce 92       	st	-X, r12
    628c:	11 97       	sbiw	r26, 0x01	; 1
    628e:	84 e1       	ldi	r24, 0x14	; 20
    6290:	9a e1       	ldi	r25, 0x1A	; 26
    6292:	93 83       	std	Z+3, r25	; 0x03
    6294:	82 83       	std	Z+2, r24	; 0x02
    6296:	95 82       	std	Z+5, r9	; 0x05
    6298:	84 82       	std	Z+4, r8	; 0x04
    629a:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
    629e:	ed b7       	in	r30, 0x3d	; 61
    62a0:	fe b7       	in	r31, 0x3e	; 62
    62a2:	36 96       	adiw	r30, 0x06	; 6
    62a4:	0f b6       	in	r0, 0x3f	; 63
    62a6:	f8 94       	cli
    62a8:	fe bf       	out	0x3e, r31	; 62
    62aa:	0f be       	out	0x3f, r0	; 63
    62ac:	ed bf       	out	0x3d, r30	; 61
}
    62ae:	2f 96       	adiw	r28, 0x0f	; 15
    62b0:	0f b6       	in	r0, 0x3f	; 63
    62b2:	f8 94       	cli
    62b4:	de bf       	out	0x3e, r29	; 62
    62b6:	0f be       	out	0x3f, r0	; 63
    62b8:	cd bf       	out	0x3d, r28	; 61
    62ba:	cf 91       	pop	r28
    62bc:	df 91       	pop	r29
    62be:	1f 91       	pop	r17
    62c0:	0f 91       	pop	r16
    62c2:	ff 90       	pop	r15
    62c4:	ef 90       	pop	r14
    62c6:	df 90       	pop	r13
    62c8:	cf 90       	pop	r12
    62ca:	bf 90       	pop	r11
    62cc:	9f 90       	pop	r9
    62ce:	8f 90       	pop	r8
    62d0:	08 95       	ret

000062d2 <GenerateKeyStamp>:


   return Result;
}

void GenerateKeyStamp(char *sTime, char *sGCode, char *strKeyStamp){//
    62d2:	8f 92       	push	r8
    62d4:	9f 92       	push	r9
    62d6:	af 92       	push	r10
    62d8:	bf 92       	push	r11
    62da:	df 92       	push	r13
    62dc:	ef 92       	push	r14
    62de:	ff 92       	push	r15
    62e0:	0f 93       	push	r16
    62e2:	1f 93       	push	r17
    62e4:	df 93       	push	r29
    62e6:	cf 93       	push	r28
    62e8:	cd b7       	in	r28, 0x3d	; 61
    62ea:	de b7       	in	r29, 0x3e	; 62
    62ec:	2d 97       	sbiw	r28, 0x0d	; 13
    62ee:	0f b6       	in	r0, 0x3f	; 63
    62f0:	f8 94       	cli
    62f2:	de bf       	out	0x3e, r29	; 62
    62f4:	0f be       	out	0x3f, r0	; 63
    62f6:	cd bf       	out	0x3d, r28	; 61
    62f8:	9c 01       	movw	r18, r24
    62fa:	7b 01       	movw	r14, r22
    62fc:	5a 01       	movw	r10, r20
	             65585577
	 */
     char seedIdx,sSeed[10],sAdd[3],i;
     
	 seedIdx=(sTime[5]-'0')%8; 
	 sAdd[0]=sGCode[seedIdx];
    62fe:	dc 01       	movw	r26, r24
    6300:	15 96       	adiw	r26, 0x05	; 5
    6302:	8c 91       	ld	r24, X
    6304:	90 e0       	ldi	r25, 0x00	; 0
    6306:	c0 97       	sbiw	r24, 0x30	; 48
    6308:	68 e0       	ldi	r22, 0x08	; 8
    630a:	70 e0       	ldi	r23, 0x00	; 0
    630c:	0e 94 8e aa 	call	0x1551c	; 0x1551c <__divmodhi4>
    6310:	f7 01       	movw	r30, r14
    6312:	e8 0f       	add	r30, r24
    6314:	f1 1d       	adc	r31, r1
    6316:	80 81       	ld	r24, Z
    6318:	89 83       	std	Y+1, r24	; 0x01
     seedIdx=(sTime[6]-'0')%8;
	 sAdd[1]=sGCode[seedIdx];
    631a:	f9 01       	movw	r30, r18
    631c:	86 81       	ldd	r24, Z+6	; 0x06
    631e:	90 e0       	ldi	r25, 0x00	; 0
    6320:	c0 97       	sbiw	r24, 0x30	; 48
    6322:	68 e0       	ldi	r22, 0x08	; 8
    6324:	70 e0       	ldi	r23, 0x00	; 0
    6326:	0e 94 8e aa 	call	0x1551c	; 0x1551c <__divmodhi4>
    632a:	f7 01       	movw	r30, r14
    632c:	e8 0f       	add	r30, r24
    632e:	f1 1d       	adc	r31, r1
    6330:	80 81       	ld	r24, Z
    6332:	8a 83       	std	Y+2, r24	; 0x02
	 sAdd[2]=0;
    6334:	1b 82       	std	Y+3, r1	; 0x03

	 sprintf_P(sSeed,PSTR("%s%s"),sTime,sAdd);
    6336:	8d b7       	in	r24, 0x3d	; 61
    6338:	9e b7       	in	r25, 0x3e	; 62
    633a:	08 97       	sbiw	r24, 0x08	; 8
    633c:	0f b6       	in	r0, 0x3f	; 63
    633e:	f8 94       	cli
    6340:	9e bf       	out	0x3e, r25	; 62
    6342:	0f be       	out	0x3f, r0	; 63
    6344:	8d bf       	out	0x3d, r24	; 61
    6346:	ed b7       	in	r30, 0x3d	; 61
    6348:	fe b7       	in	r31, 0x3e	; 62
    634a:	31 96       	adiw	r30, 0x01	; 1
    634c:	8e 01       	movw	r16, r28
    634e:	0c 5f       	subi	r16, 0xFC	; 252
    6350:	1f 4f       	sbci	r17, 0xFF	; 255
    6352:	ad b7       	in	r26, 0x3d	; 61
    6354:	be b7       	in	r27, 0x3e	; 62
    6356:	12 96       	adiw	r26, 0x02	; 2
    6358:	1c 93       	st	X, r17
    635a:	0e 93       	st	-X, r16
    635c:	11 97       	sbiw	r26, 0x01	; 1
    635e:	84 e0       	ldi	r24, 0x04	; 4
    6360:	9a e1       	ldi	r25, 0x1A	; 26
    6362:	93 83       	std	Z+3, r25	; 0x03
    6364:	82 83       	std	Z+2, r24	; 0x02
    6366:	35 83       	std	Z+5, r19	; 0x05
    6368:	24 83       	std	Z+4, r18	; 0x04
    636a:	ce 01       	movw	r24, r28
    636c:	01 96       	adiw	r24, 0x01	; 1
    636e:	97 83       	std	Z+7, r25	; 0x07
    6370:	86 83       	std	Z+6, r24	; 0x06
    6372:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
    6376:	dd 24       	eor	r13, r13
    6378:	ed b7       	in	r30, 0x3d	; 61
    637a:	fe b7       	in	r31, 0x3e	; 62
    637c:	38 96       	adiw	r30, 0x08	; 8
    637e:	0f b6       	in	r0, 0x3f	; 63
    6380:	f8 94       	cli
    6382:	fe bf       	out	0x3e, r31	; 62
    6384:	0f be       	out	0x3f, r0	; 63
    6386:	ed bf       	out	0x3d, r30	; 61
     for(i=0;i<strlen(sGCode);i++){
	     strKeyStamp[i]='0'+GeniusCalc(G_MULTY,(sSeed[i]-'0'),(sGCode[i]-'0'));		 
    6388:	48 01       	movw	r8, r16
    638a:	13 c0       	rjmp	.+38     	; 0x63b2 <GenerateKeyStamp+0xe0>
    638c:	f4 01       	movw	r30, r8
    638e:	e0 0f       	add	r30, r16
    6390:	f1 1f       	adc	r31, r17
    6392:	60 81       	ld	r22, Z
    6394:	60 53       	subi	r22, 0x30	; 48
    6396:	f7 01       	movw	r30, r14
    6398:	e0 0f       	add	r30, r16
    639a:	f1 1f       	adc	r31, r17
    639c:	40 81       	ld	r20, Z
    639e:	40 53       	subi	r20, 0x30	; 48
    63a0:	81 e0       	ldi	r24, 0x01	; 1
    63a2:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <GeniusCalc>
    63a6:	0a 0d       	add	r16, r10
    63a8:	1b 1d       	adc	r17, r11
    63aa:	80 5d       	subi	r24, 0xD0	; 208
    63ac:	d8 01       	movw	r26, r16
    63ae:	8c 93       	st	X, r24
     seedIdx=(sTime[6]-'0')%8;
	 sAdd[1]=sGCode[seedIdx];
	 sAdd[2]=0;

	 sprintf_P(sSeed,PSTR("%s%s"),sTime,sAdd);
     for(i=0;i<strlen(sGCode);i++){
    63b0:	d3 94       	inc	r13
    63b2:	0d 2d       	mov	r16, r13
    63b4:	10 e0       	ldi	r17, 0x00	; 0
    63b6:	d7 01       	movw	r26, r14
    63b8:	0d 90       	ld	r0, X+
    63ba:	00 20       	and	r0, r0
    63bc:	e9 f7       	brne	.-6      	; 0x63b8 <GenerateKeyStamp+0xe6>
    63be:	11 97       	sbiw	r26, 0x01	; 1
    63c0:	ae 19       	sub	r26, r14
    63c2:	bf 09       	sbc	r27, r15
    63c4:	0a 17       	cp	r16, r26
    63c6:	1b 07       	cpc	r17, r27
    63c8:	08 f3       	brcs	.-62     	; 0x638c <GenerateKeyStamp+0xba>
	     strKeyStamp[i]='0'+GeniusCalc(G_MULTY,(sSeed[i]-'0'),(sGCode[i]-'0'));		 
	 }strKeyStamp[strlen(sGCode)]=0;
    63ca:	aa 0d       	add	r26, r10
    63cc:	bb 1d       	adc	r27, r11
    63ce:	1c 92       	st	X, r1
     WrapCode(strKeyStamp);
    63d0:	c5 01       	movw	r24, r10
    63d2:	0e 94 ff 30 	call	0x61fe	; 0x61fe <WrapCode>
}
    63d6:	2d 96       	adiw	r28, 0x0d	; 13
    63d8:	0f b6       	in	r0, 0x3f	; 63
    63da:	f8 94       	cli
    63dc:	de bf       	out	0x3e, r29	; 62
    63de:	0f be       	out	0x3f, r0	; 63
    63e0:	cd bf       	out	0x3d, r28	; 61
    63e2:	cf 91       	pop	r28
    63e4:	df 91       	pop	r29
    63e6:	1f 91       	pop	r17
    63e8:	0f 91       	pop	r16
    63ea:	ff 90       	pop	r15
    63ec:	ef 90       	pop	r14
    63ee:	df 90       	pop	r13
    63f0:	bf 90       	pop	r11
    63f2:	af 90       	pop	r10
    63f4:	9f 90       	pop	r9
    63f6:	8f 90       	pop	r8
    63f8:	08 95       	ret

000063fa <GenerateGeniusCode>:
		  seedKey=strRawCode[i]-'0';
	 }strTemp[strlen(strRawCode)]=0;
     sprintf_P(strRawCode,PSTR("%s"),strTemp);
}

void GenerateGeniusCode(char *srcDate, char cSeed, char *strDestCode){
    63fa:	af 92       	push	r10
    63fc:	bf 92       	push	r11
    63fe:	cf 92       	push	r12
    6400:	df 92       	push	r13
    6402:	ef 92       	push	r14
    6404:	ff 92       	push	r15
    6406:	0f 93       	push	r16
    6408:	1f 93       	push	r17
    640a:	df 93       	push	r29
    640c:	cf 93       	push	r28
    640e:	cd b7       	in	r28, 0x3d	; 61
    6410:	de b7       	in	r29, 0x3e	; 62
    6412:	28 97       	sbiw	r28, 0x08	; 8
    6414:	0f b6       	in	r0, 0x3f	; 63
    6416:	f8 94       	cli
    6418:	de bf       	out	0x3e, r29	; 62
    641a:	0f be       	out	0x3f, r0	; 63
    641c:	cd bf       	out	0x3d, r28	; 61
    641e:	6c 01       	movw	r12, r24
    6420:	f6 2e       	mov	r15, r22
    6422:	5a 01       	movw	r10, r20
	    sprintf_P(strSend,PSTR("Date[%s]"),srcDate);
		uart_print(1,1,strSend);
     #endif
    

	 StrPosCopy(srcDate,AddYear,strlen(srcDate)-2,2);
    6424:	fc 01       	movw	r30, r24
    6426:	01 90       	ld	r0, Z+
    6428:	00 20       	and	r0, r0
    642a:	e9 f7       	brne	.-6      	; 0x6426 <GenerateGeniusCode+0x2c>
    642c:	e8 1b       	sub	r30, r24
    642e:	f9 0b       	sbc	r31, r25
    6430:	33 97       	sbiw	r30, 0x03	; 3
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    6432:	e8 0f       	add	r30, r24
    6434:	f9 1f       	adc	r31, r25
    6436:	80 81       	ld	r24, Z
    6438:	89 83       	std	Y+1, r24	; 0x01
    643a:	81 81       	ldd	r24, Z+1	; 0x01
    643c:	8a 83       	std	Y+2, r24	; 0x02
	 }Dest[Length]=0;
    643e:	1b 82       	std	Y+3, r1	; 0x03
    #ifdef DEBUG_GENIUS_CODE
	    sprintf_P(strSend,PSTR("Year:[%s]"),AddYear);
		uart_print(1,1,strSend);
     #endif

	 sprintf_P(SYear,PSTR("20%s"),AddYear);
    6440:	00 d0       	rcall	.+0      	; 0x6442 <GenerateGeniusCode+0x48>
    6442:	00 d0       	rcall	.+0      	; 0x6444 <GenerateGeniusCode+0x4a>
    6444:	00 d0       	rcall	.+0      	; 0x6446 <GenerateGeniusCode+0x4c>
    6446:	ed b7       	in	r30, 0x3d	; 61
    6448:	fe b7       	in	r31, 0x3e	; 62
    644a:	31 96       	adiw	r30, 0x01	; 1
    644c:	8e 01       	movw	r16, r28
    644e:	0c 5f       	subi	r16, 0xFC	; 252
    6450:	1f 4f       	sbci	r17, 0xFF	; 255
    6452:	ad b7       	in	r26, 0x3d	; 61
    6454:	be b7       	in	r27, 0x3e	; 62
    6456:	12 96       	adiw	r26, 0x02	; 2
    6458:	1c 93       	st	X, r17
    645a:	0e 93       	st	-X, r16
    645c:	11 97       	sbiw	r26, 0x01	; 1
    645e:	8f e0       	ldi	r24, 0x0F	; 15
    6460:	9a e1       	ldi	r25, 0x1A	; 26
    6462:	93 83       	std	Z+3, r25	; 0x03
    6464:	82 83       	std	Z+2, r24	; 0x02
    6466:	ce 01       	movw	r24, r28
    6468:	01 96       	adiw	r24, 0x01	; 1
    646a:	95 83       	std	Z+5, r25	; 0x05
    646c:	84 83       	std	Z+4, r24	; 0x04
    646e:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	 StrPosPaste(SYear,srcDate,strlen(srcDate)-2,strlen(SYear));
    6472:	d6 01       	movw	r26, r12
    6474:	0d 90       	ld	r0, X+
    6476:	00 20       	and	r0, r0
    6478:	e9 f7       	brne	.-6      	; 0x6474 <GenerateGeniusCode+0x7a>
    647a:	ac 19       	sub	r26, r12
    647c:	bd 09       	sbc	r27, r13
    647e:	f8 01       	movw	r30, r16
    6480:	01 90       	ld	r0, Z+
    6482:	00 20       	and	r0, r0
    6484:	e9 f7       	brne	.-6      	; 0x6480 <GenerateGeniusCode+0x86>
    6486:	31 97       	sbiw	r30, 0x01	; 1
    6488:	e0 1b       	sub	r30, r16
    648a:	f1 0b       	sbc	r31, r17
    648c:	8d b7       	in	r24, 0x3d	; 61
    648e:	9e b7       	in	r25, 0x3e	; 62
    6490:	06 96       	adiw	r24, 0x06	; 6
    6492:	0f b6       	in	r0, 0x3f	; 63
    6494:	f8 94       	cli
    6496:	9e bf       	out	0x3e, r25	; 62
    6498:	0f be       	out	0x3f, r0	; 63
    649a:	8d bf       	out	0x3d, r24	; 61
    649c:	13 97       	sbiw	r26, 0x03	; 3
    649e:	c8 01       	movw	r24, r16
    64a0:	b6 01       	movw	r22, r12
    64a2:	ad 01       	movw	r20, r26
    64a4:	9f 01       	movw	r18, r30
    64a6:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <StrPosPaste>
	 #ifdef DEBUG_GENIUS_CODE
	    sprintf_P(strSend,PSTR("NewDate[%s]"),srcDate);
		uart_print(1,1,strSend);
     #endif

	 sprintf_P(strDestCode,PSTR("%c"),cSeed);     
    64aa:	00 d0       	rcall	.+0      	; 0x64ac <GenerateGeniusCode+0xb2>
    64ac:	00 d0       	rcall	.+0      	; 0x64ae <GenerateGeniusCode+0xb4>
    64ae:	00 d0       	rcall	.+0      	; 0x64b0 <GenerateGeniusCode+0xb6>
    64b0:	ed b7       	in	r30, 0x3d	; 61
    64b2:	fe b7       	in	r31, 0x3e	; 62
    64b4:	31 96       	adiw	r30, 0x01	; 1
    64b6:	ad b7       	in	r26, 0x3d	; 61
    64b8:	be b7       	in	r27, 0x3e	; 62
    64ba:	12 96       	adiw	r26, 0x02	; 2
    64bc:	bc 92       	st	X, r11
    64be:	ae 92       	st	-X, r10
    64c0:	11 97       	sbiw	r26, 0x01	; 1
    64c2:	8c e0       	ldi	r24, 0x0C	; 12
    64c4:	9a e1       	ldi	r25, 0x1A	; 26
    64c6:	93 83       	std	Z+3, r25	; 0x03
    64c8:	82 83       	std	Z+2, r24	; 0x02
    64ca:	f4 82       	std	Z+4, r15	; 0x04
    64cc:	15 82       	std	Z+5, r1	; 0x05
    64ce:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
    64d2:	ee 24       	eor	r14, r14
    64d4:	e3 94       	inc	r14
    64d6:	ed b7       	in	r30, 0x3d	; 61
    64d8:	fe b7       	in	r31, 0x3e	; 62
    64da:	36 96       	adiw	r30, 0x06	; 6
    64dc:	0f b6       	in	r0, 0x3f	; 63
    64de:	f8 94       	cli
    64e0:	fe bf       	out	0x3e, r31	; 62
    64e2:	0f be       	out	0x3f, r0	; 63
    64e4:	ed bf       	out	0x3d, r30	; 61
	 GCalcOpt=G_PLUS;
	 for (i=1;i<strlen(srcDate);i++){
	      strDestCode[i]='0'+GeniusCalc(GCalcOpt,(cSeed-'0'),(srcDate[i]-'0'));	 
    64e6:	f0 ed       	ldi	r31, 0xD0	; 208
    64e8:	ff 0e       	add	r15, r31
    64ea:	0f c0       	rjmp	.+30     	; 0x650a <GenerateGeniusCode+0x110>
    64ec:	f6 01       	movw	r30, r12
    64ee:	e0 0f       	add	r30, r16
    64f0:	f1 1f       	adc	r31, r17
    64f2:	40 81       	ld	r20, Z
    64f4:	40 53       	subi	r20, 0x30	; 48
    64f6:	80 e0       	ldi	r24, 0x00	; 0
    64f8:	6f 2d       	mov	r22, r15
    64fa:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <GeniusCalc>
    64fe:	0a 0d       	add	r16, r10
    6500:	1b 1d       	adc	r17, r11
    6502:	80 5d       	subi	r24, 0xD0	; 208
    6504:	d8 01       	movw	r26, r16
    6506:	8c 93       	st	X, r24
		uart_print(1,1,strSend);
     #endif

	 sprintf_P(strDestCode,PSTR("%c"),cSeed);     
	 GCalcOpt=G_PLUS;
	 for (i=1;i<strlen(srcDate);i++){
    6508:	e3 94       	inc	r14
    650a:	0e 2d       	mov	r16, r14
    650c:	10 e0       	ldi	r17, 0x00	; 0
    650e:	d6 01       	movw	r26, r12
    6510:	0d 90       	ld	r0, X+
    6512:	00 20       	and	r0, r0
    6514:	e9 f7       	brne	.-6      	; 0x6510 <GenerateGeniusCode+0x116>
    6516:	11 97       	sbiw	r26, 0x01	; 1
    6518:	ac 19       	sub	r26, r12
    651a:	bd 09       	sbc	r27, r13
    651c:	0a 17       	cp	r16, r26
    651e:	1b 07       	cpc	r17, r27
    6520:	28 f3       	brcs	.-54     	; 0x64ec <GenerateGeniusCode+0xf2>
	      strDestCode[i]='0'+GeniusCalc(GCalcOpt,(cSeed-'0'),(srcDate[i]-'0'));	 
	 }strDestCode[strlen(srcDate)]=0;
    6522:	aa 0d       	add	r26, r10
    6524:	bb 1d       	adc	r27, r11
    6526:	1c 92       	st	X, r1
	 #ifdef DEBUG_GENIUS_CODE
       sprintf_P(strSend,PSTR("1st:%s"),strDestCode);
	   uart_print(1,1,strSend);     
	 #endif

	 WrapCode(strDestCode);
    6528:	c5 01       	movw	r24, r10
    652a:	0e 94 ff 30 	call	0x61fe	; 0x61fe <WrapCode>
	 #ifdef DEBUG_GENIUS_CODE
	   sprintf_P(strSend,PSTR("Wrap:%s"),strDestCode);
	   uart_print(1,1,strSend);     
	 #endif
}
    652e:	28 96       	adiw	r28, 0x08	; 8
    6530:	0f b6       	in	r0, 0x3f	; 63
    6532:	f8 94       	cli
    6534:	de bf       	out	0x3e, r29	; 62
    6536:	0f be       	out	0x3f, r0	; 63
    6538:	cd bf       	out	0x3d, r28	; 61
    653a:	cf 91       	pop	r28
    653c:	df 91       	pop	r29
    653e:	1f 91       	pop	r17
    6540:	0f 91       	pop	r16
    6542:	ff 90       	pop	r15
    6544:	ef 90       	pop	r14
    6546:	df 90       	pop	r13
    6548:	cf 90       	pop	r12
    654a:	bf 90       	pop	r11
    654c:	af 90       	pop	r10
    654e:	08 95       	ret

00006550 <GeneratePrintInit>:





void GeneratePrintInit(){//Create Initialize Print 
    6550:	cf 92       	push	r12
    6552:	df 92       	push	r13
    6554:	ef 92       	push	r14
    6556:	ff 92       	push	r15
    6558:	0f 93       	push	r16
    655a:	1f 93       	push	r17
    655c:	df 93       	push	r29
    655e:	cf 93       	push	r28
    6560:	cd b7       	in	r28, 0x3d	; 61
    6562:	de b7       	in	r29, 0x3e	; 62
    6564:	62 97       	sbiw	r28, 0x12	; 18
    6566:	0f b6       	in	r0, 0x3f	; 63
    6568:	f8 94       	cli
    656a:	de bf       	out	0x3e, r29	; 62
    656c:	0f be       	out	0x3f, r0	; 63
    656e:	cd bf       	out	0x3d, r28	; 61
     char strVernum[6],strVerdate[12];
	 sprintf_P(strVernum,PSTR(VERSION_NUM));
    6570:	00 d0       	rcall	.+0      	; 0x6572 <GeneratePrintInit+0x22>
    6572:	00 d0       	rcall	.+0      	; 0x6574 <GeneratePrintInit+0x24>
    6574:	6e 01       	movw	r12, r28
    6576:	08 94       	sec
    6578:	c1 1c       	adc	r12, r1
    657a:	d1 1c       	adc	r13, r1
    657c:	ad b7       	in	r26, 0x3d	; 61
    657e:	be b7       	in	r27, 0x3e	; 62
    6580:	12 96       	adiw	r26, 0x02	; 2
    6582:	dc 92       	st	X, r13
    6584:	ce 92       	st	-X, r12
    6586:	11 97       	sbiw	r26, 0x01	; 1
    6588:	8e e9       	ldi	r24, 0x9E	; 158
    658a:	9f e1       	ldi	r25, 0x1F	; 31
    658c:	14 96       	adiw	r26, 0x04	; 4
    658e:	9c 93       	st	X, r25
    6590:	8e 93       	st	-X, r24
    6592:	13 97       	sbiw	r26, 0x03	; 3
    6594:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	 sprintf_P(strVerdate,PSTR(VERSION_DATE));
    6598:	67 e0       	ldi	r22, 0x07	; 7
    659a:	e6 2e       	mov	r14, r22
    659c:	f1 2c       	mov	r15, r1
    659e:	ec 0e       	add	r14, r28
    65a0:	fd 1e       	adc	r15, r29
    65a2:	ed b7       	in	r30, 0x3d	; 61
    65a4:	fe b7       	in	r31, 0x3e	; 62
    65a6:	f2 82       	std	Z+2, r15	; 0x02
    65a8:	e1 82       	std	Z+1, r14	; 0x01
    65aa:	83 e9       	ldi	r24, 0x93	; 147
    65ac:	9f e1       	ldi	r25, 0x1F	; 31
    65ae:	94 83       	std	Z+4, r25	; 0x04
    65b0:	83 83       	std	Z+3, r24	; 0x03
    65b2:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
     sprintf_P(PrintBuffer,PSTR("\nGeNiUs Ticket Printer \n Version:%s\n Last Update %s \n Hanindo Automation Solutions \n www.hanindogroup.com\n\n\n\n\n\n\n\n"),strVernum,strVerdate);
    65b6:	00 d0       	rcall	.+0      	; 0x65b8 <GeneratePrintInit+0x68>
    65b8:	00 d0       	rcall	.+0      	; 0x65ba <GeneratePrintInit+0x6a>
    65ba:	ed b7       	in	r30, 0x3d	; 61
    65bc:	fe b7       	in	r31, 0x3e	; 62
    65be:	31 96       	adiw	r30, 0x01	; 1
    65c0:	0c ee       	ldi	r16, 0xEC	; 236
    65c2:	13 e0       	ldi	r17, 0x03	; 3
    65c4:	ad b7       	in	r26, 0x3d	; 61
    65c6:	be b7       	in	r27, 0x3e	; 62
    65c8:	12 96       	adiw	r26, 0x02	; 2
    65ca:	1c 93       	st	X, r17
    65cc:	0e 93       	st	-X, r16
    65ce:	11 97       	sbiw	r26, 0x01	; 1
    65d0:	81 e2       	ldi	r24, 0x21	; 33
    65d2:	9f e1       	ldi	r25, 0x1F	; 31
    65d4:	93 83       	std	Z+3, r25	; 0x03
    65d6:	82 83       	std	Z+2, r24	; 0x02
    65d8:	d5 82       	std	Z+5, r13	; 0x05
    65da:	c4 82       	std	Z+4, r12	; 0x04
    65dc:	f7 82       	std	Z+7, r15	; 0x07
    65de:	e6 82       	std	Z+6, r14	; 0x06
    65e0:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	 uart_print(0,1,PrintBuffer);
    65e4:	ed b7       	in	r30, 0x3d	; 61
    65e6:	fe b7       	in	r31, 0x3e	; 62
    65e8:	38 96       	adiw	r30, 0x08	; 8
    65ea:	0f b6       	in	r0, 0x3f	; 63
    65ec:	f8 94       	cli
    65ee:	fe bf       	out	0x3e, r31	; 62
    65f0:	0f be       	out	0x3f, r0	; 63
    65f2:	ed bf       	out	0x3d, r30	; 61
    65f4:	80 e0       	ldi	r24, 0x00	; 0
    65f6:	61 e0       	ldi	r22, 0x01	; 1
    65f8:	a8 01       	movw	r20, r16
    65fa:	0e 94 ef a8 	call	0x151de	; 0x151de <uart_print>
	 LengthMessage81=strlen(PrintBuffer);
    65fe:	f8 01       	movw	r30, r16
    6600:	01 90       	ld	r0, Z+
    6602:	00 20       	and	r0, r0
    6604:	e9 f7       	brne	.-6      	; 0x6600 <GeneratePrintInit+0xb0>
    6606:	31 97       	sbiw	r30, 0x01	; 1
    6608:	e0 1b       	sub	r30, r16
    660a:	f1 0b       	sbc	r31, r17
    660c:	f0 93 8e 01 	sts	0x018E, r31
    6610:	e0 93 8d 01 	sts	0x018D, r30
	 //Spooling HFCx 0000
	 cmdPrint=0b00010000|(1<<PRN_PAPER_CUT);
    6614:	80 e3       	ldi	r24, 0x30	; 48
    6616:	80 93 b5 01 	sts	0x01B5, r24
	 IsFreePrinting=True;
    661a:	81 e0       	ldi	r24, 0x01	; 1
    661c:	80 93 a8 01 	sts	0x01A8, r24
}
    6620:	62 96       	adiw	r28, 0x12	; 18
    6622:	0f b6       	in	r0, 0x3f	; 63
    6624:	f8 94       	cli
    6626:	de bf       	out	0x3e, r29	; 62
    6628:	0f be       	out	0x3f, r0	; 63
    662a:	cd bf       	out	0x3d, r28	; 61
    662c:	cf 91       	pop	r28
    662e:	df 91       	pop	r29
    6630:	1f 91       	pop	r17
    6632:	0f 91       	pop	r16
    6634:	ff 90       	pop	r15
    6636:	ef 90       	pop	r14
    6638:	df 90       	pop	r13
    663a:	cf 90       	pop	r12
    663c:	08 95       	ret

0000663e <FormatCurrency>:
     DecCfg=eeprom_read_byte(&DefDecimalTotalVolume);
	 FormatDecimal(strRawVolume,DecCfg);
}


void FormatCurrency(char *strCurrency){// 5000000.00 5,000,000.00
    663e:	9f 92       	push	r9
    6640:	af 92       	push	r10
    6642:	bf 92       	push	r11
    6644:	cf 92       	push	r12
    6646:	df 92       	push	r13
    6648:	ef 92       	push	r14
    664a:	ff 92       	push	r15
    664c:	0f 93       	push	r16
    664e:	1f 93       	push	r17
    6650:	df 93       	push	r29
    6652:	cf 93       	push	r28
    6654:	cd b7       	in	r28, 0x3d	; 61
    6656:	de b7       	in	r29, 0x3e	; 62
    6658:	64 97       	sbiw	r28, 0x14	; 20
    665a:	0f b6       	in	r0, 0x3f	; 63
    665c:	f8 94       	cli
    665e:	de bf       	out	0x3e, r29	; 62
    6660:	0f be       	out	0x3f, r0	; 63
    6662:	cd bf       	out	0x3d, r28	; 61
    6664:	6c 01       	movw	r12, r24
     char i,dotPos=0,iPos=0,Length=0,nComa=0;//cPos=0,;
	 char fmtCurrency[20];
	 char CurrencyMark,DecimalMark;

	 CurrencyMark=eeprom_read_byte(&DefCurrencyMark);
    6666:	80 e4       	ldi	r24, 0x40	; 64
    6668:	90 e0       	ldi	r25, 0x00	; 0
    666a:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
    666e:	98 2e       	mov	r9, r24
	 DecimalMark=eeprom_read_byte(&DefDecimalMark);
    6670:	8f e3       	ldi	r24, 0x3F	; 63
    6672:	90 e0       	ldi	r25, 0x00	; 0
    6674:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>

	 Length=strlen(strCurrency);//123,456
    6678:	f6 01       	movw	r30, r12
    667a:	01 90       	ld	r0, Z+
    667c:	00 20       	and	r0, r0
    667e:	e9 f7       	brne	.-6      	; 0x667a <FormatCurrency+0x3c>
    6680:	31 97       	sbiw	r30, 0x01	; 1
    6682:	ee 2e       	mov	r14, r30
    6684:	ec 18       	sub	r14, r12
    6686:	fe 01       	movw	r30, r28
    6688:	31 96       	adiw	r30, 0x01	; 1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    668a:	9e 01       	movw	r18, r28
    668c:	2b 5e       	subi	r18, 0xEB	; 235
    668e:	3f 4f       	sbci	r19, 0xFF	; 255
	     strMemory[i]=data;
    6690:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    6692:	e2 17       	cp	r30, r18
    6694:	f3 07       	cpc	r31, r19
    6696:	e1 f7       	brne	.-8      	; 0x6690 <FormatCurrency+0x52>
    6698:	f6 01       	movw	r30, r12
    669a:	fe 2c       	mov	r15, r14
    669c:	30 e0       	ldi	r19, 0x00	; 0
    669e:	90 e0       	ldi	r25, 0x00	; 0
    66a0:	09 c0       	rjmp	.+18     	; 0x66b4 <FormatCurrency+0x76>
	 dotPos=Length;
	 nComa=0;
	 FillChar(fmtCurrency,sizeof(fmtCurrency),0);
	 //Detection
	 for(i=0;i<Length;i++){// 123,456 
	     if (strCurrency[i]==DecimalMark) dotPos=i;//3
    66a2:	20 81       	ld	r18, Z
    66a4:	28 17       	cp	r18, r24
    66a6:	09 f4       	brne	.+2      	; 0x66aa <FormatCurrency+0x6c>
    66a8:	f9 2e       	mov	r15, r25
		 if (strCurrency[i]==CurrencyMark) nComa++;//0
    66aa:	29 15       	cp	r18, r9
    66ac:	09 f4       	brne	.+2      	; 0x66b0 <FormatCurrency+0x72>
    66ae:	3f 5f       	subi	r19, 0xFF	; 255
	 Length=strlen(strCurrency);//123,456
	 dotPos=Length;
	 nComa=0;
	 FillChar(fmtCurrency,sizeof(fmtCurrency),0);
	 //Detection
	 for(i=0;i<Length;i++){// 123,456 
    66b0:	9f 5f       	subi	r25, 0xFF	; 255
    66b2:	31 96       	adiw	r30, 0x01	; 1
    66b4:	9e 15       	cp	r25, r14
    66b6:	a8 f3       	brcs	.-22     	; 0x66a2 <FormatCurrency+0x64>
	     if (strCurrency[i]==DecimalMark) dotPos=i;//3
		 if (strCurrency[i]==CurrencyMark) nComa++;//0
	 }

	 if((nComa==0)&&(dotPos>3)){		 
    66b8:	33 23       	and	r19, r19
    66ba:	09 f0       	breq	.+2      	; 0x66be <FormatCurrency+0x80>
    66bc:	5e c0       	rjmp	.+188    	; 0x677a <FormatCurrency+0x13c>
    66be:	83 e0       	ldi	r24, 0x03	; 3
    66c0:	8f 15       	cp	r24, r15
    66c2:	08 f0       	brcs	.+2      	; 0x66c6 <FormatCurrency+0x88>
    66c4:	5a c0       	rjmp	.+180    	; 0x677a <FormatCurrency+0x13c>
    66c6:	40 e0       	ldi	r20, 0x00	; 0
    66c8:	20 e0       	ldi	r18, 0x00	; 0
    66ca:	30 e0       	ldi	r19, 0x00	; 0
         iPos=0;
	     for(i=0;i<dotPos;i++){
	         if ((((dotPos-i)%3)==0)&&(i<(dotPos))&&(i>0)){ 
    66cc:	af 2c       	mov	r10, r15
    66ce:	bb 24       	eor	r11, r11
		        fmtCurrency[iPos]=CurrencyMark;
    66d0:	8e 01       	movw	r16, r28
    66d2:	0f 5f       	subi	r16, 0xFF	; 255
    66d4:	1f 4f       	sbci	r17, 0xFF	; 255
	 }

	 if((nComa==0)&&(dotPos>3)){		 
         iPos=0;
	     for(i=0;i<dotPos;i++){
	         if ((((dotPos-i)%3)==0)&&(i<(dotPos))&&(i>0)){ 
    66d6:	c5 01       	movw	r24, r10
    66d8:	82 1b       	sub	r24, r18
    66da:	93 0b       	sbc	r25, r19
    66dc:	63 e0       	ldi	r22, 0x03	; 3
    66de:	70 e0       	ldi	r23, 0x00	; 0
    66e0:	0e 94 8e aa 	call	0x1551c	; 0x1551c <__divmodhi4>
    66e4:	89 2b       	or	r24, r25
    66e6:	49 f4       	brne	.+18     	; 0x66fa <FormatCurrency+0xbc>
    66e8:	2f 15       	cp	r18, r15
    66ea:	38 f4       	brcc	.+14     	; 0x66fa <FormatCurrency+0xbc>
    66ec:	22 23       	and	r18, r18
    66ee:	29 f0       	breq	.+10     	; 0x66fa <FormatCurrency+0xbc>
		        fmtCurrency[iPos]=CurrencyMark;
    66f0:	f8 01       	movw	r30, r16
    66f2:	e4 0f       	add	r30, r20
    66f4:	f1 1d       	adc	r31, r1
    66f6:	90 82       	st	Z, r9
		        iPos++;
    66f8:	4f 5f       	subi	r20, 0xFF	; 255
		        }
		        fmtCurrency[iPos]=strCurrency[i];
    66fa:	d8 01       	movw	r26, r16
    66fc:	a4 0f       	add	r26, r20
    66fe:	b1 1d       	adc	r27, r1
    6700:	f6 01       	movw	r30, r12
    6702:	e2 0f       	add	r30, r18
    6704:	f3 1f       	adc	r31, r19
    6706:	80 81       	ld	r24, Z
    6708:	8c 93       	st	X, r24
			    iPos++;
    670a:	4f 5f       	subi	r20, 0xFF	; 255
			    fmtCurrency[iPos]=0;
    670c:	f8 01       	movw	r30, r16
    670e:	e4 0f       	add	r30, r20
    6710:	f1 1d       	adc	r31, r1
    6712:	10 82       	st	Z, r1
    6714:	2f 5f       	subi	r18, 0xFF	; 255
    6716:	3f 4f       	sbci	r19, 0xFF	; 255
		 if (strCurrency[i]==CurrencyMark) nComa++;//0
	 }

	 if((nComa==0)&&(dotPos>3)){		 
         iPos=0;
	     for(i=0;i<dotPos;i++){
    6718:	2f 15       	cp	r18, r15
    671a:	e8 f2       	brcs	.-70     	; 0x66d6 <FormatCurrency+0x98>
    671c:	9f 2d       	mov	r25, r15
			    iPos++;
			    fmtCurrency[iPos]=0;
	         }
         
	     for(i=dotPos;i<Length;i++){
		        fmtCurrency[iPos]=strCurrency[i];
    671e:	9e 01       	movw	r18, r28
    6720:	2f 5f       	subi	r18, 0xFF	; 255
    6722:	3f 4f       	sbci	r19, 0xFF	; 255
    6724:	0e c0       	rjmp	.+28     	; 0x6742 <FormatCurrency+0x104>
    6726:	d9 01       	movw	r26, r18
    6728:	a4 0f       	add	r26, r20
    672a:	b1 1d       	adc	r27, r1
    672c:	f6 01       	movw	r30, r12
    672e:	e9 0f       	add	r30, r25
    6730:	f1 1d       	adc	r31, r1
    6732:	80 81       	ld	r24, Z
    6734:	8c 93       	st	X, r24
			    iPos++;
    6736:	4f 5f       	subi	r20, 0xFF	; 255
			    fmtCurrency[iPos]=0;
    6738:	f9 01       	movw	r30, r18
    673a:	e4 0f       	add	r30, r20
    673c:	f1 1d       	adc	r31, r1
    673e:	10 82       	st	Z, r1
		        fmtCurrency[iPos]=strCurrency[i];
			    iPos++;
			    fmtCurrency[iPos]=0;
	         }
         
	     for(i=dotPos;i<Length;i++){
    6740:	9f 5f       	subi	r25, 0xFF	; 255
    6742:	9e 15       	cp	r25, r14
    6744:	80 f3       	brcs	.-32     	; 0x6726 <FormatCurrency+0xe8>
    6746:	90 e0       	ldi	r25, 0x00	; 0
		        fmtCurrency[iPos]=strCurrency[i];
			    iPos++;
			    fmtCurrency[iPos]=0;
	         }
	      for(i=0;i<strlen(fmtCurrency);i++){
    6748:	9e 01       	movw	r18, r28
    674a:	2f 5f       	subi	r18, 0xFF	; 255
    674c:	3f 4f       	sbci	r19, 0xFF	; 255
    674e:	09 c0       	rjmp	.+18     	; 0x6762 <FormatCurrency+0x124>
	          strCurrency[i]=fmtCurrency[i];
    6750:	f6 01       	movw	r30, r12
    6752:	ea 0f       	add	r30, r26
    6754:	fb 1f       	adc	r31, r27
    6756:	a2 0f       	add	r26, r18
    6758:	b3 1f       	adc	r27, r19
    675a:	8c 91       	ld	r24, X
    675c:	80 83       	st	Z, r24
			  strCurrency[i+1]=0;
    675e:	11 82       	std	Z+1, r1	; 0x01
	     for(i=dotPos;i<Length;i++){
		        fmtCurrency[iPos]=strCurrency[i];
			    iPos++;
			    fmtCurrency[iPos]=0;
	         }
	      for(i=0;i<strlen(fmtCurrency);i++){
    6760:	9f 5f       	subi	r25, 0xFF	; 255
    6762:	a9 2f       	mov	r26, r25
    6764:	b0 e0       	ldi	r27, 0x00	; 0
    6766:	f9 01       	movw	r30, r18
    6768:	01 90       	ld	r0, Z+
    676a:	00 20       	and	r0, r0
    676c:	e9 f7       	brne	.-6      	; 0x6768 <FormatCurrency+0x12a>
    676e:	31 97       	sbiw	r30, 0x01	; 1
    6770:	e2 1b       	sub	r30, r18
    6772:	f3 0b       	sbc	r31, r19
    6774:	ae 17       	cp	r26, r30
    6776:	bf 07       	cpc	r27, r31
    6778:	58 f3       	brcs	.-42     	; 0x6750 <FormatCurrency+0x112>
	          strCurrency[i]=fmtCurrency[i];
			  strCurrency[i+1]=0;
	      }
     }      
}
    677a:	64 96       	adiw	r28, 0x14	; 20
    677c:	0f b6       	in	r0, 0x3f	; 63
    677e:	f8 94       	cli
    6780:	de bf       	out	0x3e, r29	; 62
    6782:	0f be       	out	0x3f, r0	; 63
    6784:	cd bf       	out	0x3d, r28	; 61
    6786:	cf 91       	pop	r28
    6788:	df 91       	pop	r29
    678a:	1f 91       	pop	r17
    678c:	0f 91       	pop	r16
    678e:	ff 90       	pop	r15
    6790:	ef 90       	pop	r14
    6792:	df 90       	pop	r13
    6794:	cf 90       	pop	r12
    6796:	bf 90       	pop	r11
    6798:	af 90       	pop	r10
    679a:	9f 90       	pop	r9
    679c:	08 95       	ret

0000679e <FormatDecimal>:

void TestLocalAccount(){

}

void FormatDecimal(char *strRawData, char DecimalCfg){// 9-> 0,009 0,234 123 
    679e:	ef 92       	push	r14
    67a0:	ff 92       	push	r15
    67a2:	0f 93       	push	r16
    67a4:	1f 93       	push	r17
    67a6:	df 93       	push	r29
    67a8:	cf 93       	push	r28
    67aa:	cd b7       	in	r28, 0x3d	; 61
    67ac:	de b7       	in	r29, 0x3e	; 62
    67ae:	64 97       	sbiw	r28, 0x14	; 20
    67b0:	0f b6       	in	r0, 0x3f	; 63
    67b2:	f8 94       	cli
    67b4:	de bf       	out	0x3e, r29	; 62
    67b6:	0f be       	out	0x3f, r0	; 63
    67b8:	cd bf       	out	0x3d, r28	; 61
    67ba:	8c 01       	movw	r16, r24
    67bc:	f6 2e       	mov	r15, r22
     char i,iPos,CommaPos,Length=0;                 //1->0,01 
	 char strDecimalFormated[20];
	 char DecPointMark;
     if (DecimalCfg>0){    
    67be:	66 23       	and	r22, r22
    67c0:	09 f4       	brne	.+2      	; 0x67c4 <FormatDecimal+0x26>
    67c2:	55 c0       	rjmp	.+170    	; 0x686e <FormatDecimal+0xd0>
		 DecPointMark=eeprom_read_byte(&DefDecimalMark);	 
    67c4:	8f e3       	ldi	r24, 0x3F	; 63
    67c6:	90 e0       	ldi	r25, 0x00	; 0
    67c8:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
    67cc:	e8 2e       	mov	r14, r24
		 Length=strlen(strRawData);
    67ce:	f8 01       	movw	r30, r16
    67d0:	01 90       	ld	r0, Z+
    67d2:	00 20       	and	r0, r0
    67d4:	e9 f7       	brne	.-6      	; 0x67d0 <FormatDecimal+0x32>
    67d6:	31 97       	sbiw	r30, 0x01	; 1
    67d8:	3e 2f       	mov	r19, r30
    67da:	30 1b       	sub	r19, r16

		 if (Length>DecimalCfg)CommaPos=Length-DecimalCfg;
    67dc:	f3 16       	cp	r15, r19
    67de:	c0 f5       	brcc	.+112    	; 0x6850 <FormatDecimal+0xb2>
    67e0:	83 2f       	mov	r24, r19
    67e2:	8f 19       	sub	r24, r15
    67e4:	f8 2e       	mov	r15, r24
    67e6:	b8 01       	movw	r22, r16
    67e8:	d8 01       	movw	r26, r16
    67ea:	20 e0       	ldi	r18, 0x00	; 0
    67ec:	90 e0       	ldi	r25, 0x00	; 0

		 
		 iPos=0;
		 for(i=0;i<Length;i++){
			 if (i==CommaPos){
				 strDecimalFormated[iPos]=DecPointMark;
    67ee:	ae 01       	movw	r20, r28
    67f0:	4f 5f       	subi	r20, 0xFF	; 255
    67f2:	5f 4f       	sbci	r21, 0xFF	; 255
    67f4:	0e c0       	rjmp	.+28     	; 0x6812 <FormatDecimal+0x74>
			 }

		 
		 iPos=0;
		 for(i=0;i<Length;i++){
			 if (i==CommaPos){
    67f6:	2f 15       	cp	r18, r15
    67f8:	29 f4       	brne	.+10     	; 0x6804 <FormatDecimal+0x66>
				 strDecimalFormated[iPos]=DecPointMark;
    67fa:	fa 01       	movw	r30, r20
    67fc:	e9 0f       	add	r30, r25
    67fe:	f1 1d       	adc	r31, r1
    6800:	e0 82       	st	Z, r14
				 iPos++;
    6802:	9f 5f       	subi	r25, 0xFF	; 255
			}
			strDecimalFormated[iPos]=strRawData[i];
    6804:	fa 01       	movw	r30, r20
    6806:	e9 0f       	add	r30, r25
    6808:	f1 1d       	adc	r31, r1
    680a:	8d 91       	ld	r24, X+
    680c:	80 83       	st	Z, r24
			//strDecimalFormated[iPos+1]=0;
			iPos++;
    680e:	9f 5f       	subi	r25, 0xFF	; 255
			 CommaPos=1;
			 }

		 
		 iPos=0;
		 for(i=0;i<Length;i++){
    6810:	2f 5f       	subi	r18, 0xFF	; 255
    6812:	23 17       	cp	r18, r19
    6814:	80 f3       	brcs	.-32     	; 0x67f6 <FormatDecimal+0x58>
				 iPos++;
			}
			strDecimalFormated[iPos]=strRawData[i];
			//strDecimalFormated[iPos+1]=0;
			iPos++;
		 }strDecimalFormated[iPos]=0;
    6816:	9e 01       	movw	r18, r28
    6818:	2f 5f       	subi	r18, 0xFF	; 255
    681a:	3f 4f       	sbci	r19, 0xFF	; 255
    681c:	f9 01       	movw	r30, r18
    681e:	e9 0f       	add	r30, r25
    6820:	f1 1d       	adc	r31, r1
    6822:	10 82       	st	Z, r1
		 
         //uart_print(1,1,strDecimalFormated); 

		 Length=strlen(strDecimalFormated);
    6824:	f9 01       	movw	r30, r18
    6826:	01 90       	ld	r0, Z+
    6828:	00 20       	and	r0, r0
    682a:	e9 f7       	brne	.-6      	; 0x6826 <FormatDecimal+0x88>
    682c:	31 97       	sbiw	r30, 0x01	; 1
    682e:	9e 2f       	mov	r25, r30
    6830:	92 1b       	sub	r25, r18
    6832:	d9 01       	movw	r26, r18
    6834:	04 c0       	rjmp	.+8      	; 0x683e <FormatDecimal+0xa0>
		 for(i=0;i<Length;i++){
			 strRawData[i]=strDecimalFormated[i];
    6836:	8d 91       	ld	r24, X+
    6838:	fb 01       	movw	r30, r22
    683a:	81 93       	st	Z+, r24
    683c:	bf 01       	movw	r22, r30
		 }strDecimalFormated[iPos]=0;
		 
         //uart_print(1,1,strDecimalFormated); 

		 Length=strlen(strDecimalFormated);
		 for(i=0;i<Length;i++){
    683e:	8a 2f       	mov	r24, r26
    6840:	82 1b       	sub	r24, r18
    6842:	89 17       	cp	r24, r25
    6844:	c0 f3       	brcs	.-16     	; 0x6836 <FormatDecimal+0x98>
			 strRawData[i]=strDecimalFormated[i];
		 }strRawData[Length]=0;
    6846:	09 0f       	add	r16, r25
    6848:	11 1d       	adc	r17, r1
    684a:	f8 01       	movw	r30, r16
    684c:	10 82       	st	Z, r1
    684e:	0f c0       	rjmp	.+30     	; 0x686e <FormatDecimal+0xd0>
		 if (Length>DecimalCfg)CommaPos=Length-DecimalCfg;
		 else CommaPos=1;


		 if (Length<=DecimalCfg){// 123 -> 0123
			 AddZeroLead(strRawData,(DecimalCfg+1));
    6850:	f3 94       	inc	r15
    6852:	c8 01       	movw	r24, r16
    6854:	6f 2d       	mov	r22, r15
    6856:	0e 94 cf 26 	call	0x4d9e	; 0x4d9e <AddZeroLead>
			 //AddZeroLead(strRawData,(DecimalCfg+2));
			 Length=strlen(strRawData);
    685a:	f8 01       	movw	r30, r16
    685c:	01 90       	ld	r0, Z+
    685e:	00 20       	and	r0, r0
    6860:	e9 f7       	brne	.-6      	; 0x685c <FormatDecimal+0xbe>
    6862:	31 97       	sbiw	r30, 0x01	; 1
    6864:	3e 2f       	mov	r19, r30
    6866:	30 1b       	sub	r19, r16
    6868:	ff 24       	eor	r15, r15
    686a:	f3 94       	inc	r15
    686c:	bc cf       	rjmp	.-136    	; 0x67e6 <FormatDecimal+0x48>
		 for(i=0;i<Length;i++){
			 strRawData[i]=strDecimalFormated[i];
		 }strRawData[Length]=0;
	 }
          //uart_print(1,1,strRawData); 
}
    686e:	64 96       	adiw	r28, 0x14	; 20
    6870:	0f b6       	in	r0, 0x3f	; 63
    6872:	f8 94       	cli
    6874:	de bf       	out	0x3e, r29	; 62
    6876:	0f be       	out	0x3f, r0	; 63
    6878:	cd bf       	out	0x3d, r28	; 61
    687a:	cf 91       	pop	r28
    687c:	df 91       	pop	r29
    687e:	1f 91       	pop	r17
    6880:	0f 91       	pop	r16
    6882:	ff 90       	pop	r15
    6884:	ef 90       	pop	r14
    6886:	08 95       	ret

00006888 <NormalizeDecimal>:
	 Result=(SigmaSum%255);
	 if (Result==0)Result=255;
   return Result;
}

void NormalizeDecimal(char CurrentDecimal, char NewDecimal, char *Result){// 01234567,89
    6888:	68 2f       	mov	r22, r24
    688a:	ca 01       	movw	r24, r20
		 StrPosCopy(Result,SResult,DeltaDec,Length-DeltaDec);
		 	           
	 
     }
*/
     FormatDecimal(Result,CurrentDecimal);
    688c:	0e 94 cf 33 	call	0x679e	; 0x679e <FormatDecimal>
}
    6890:	08 95       	ret

00006892 <FormatTotalizerVolume>:
     char DecCfg;
     DecCfg=eeprom_read_byte(&DefDecimalTotalMoney);
	 FormatDecimal(strRawMoney,DecCfg);
}

void FormatTotalizerVolume(char *strRawVolume){//96->0,96 
    6892:	0f 93       	push	r16
    6894:	1f 93       	push	r17
    6896:	8c 01       	movw	r16, r24
     char DecCfg;
     DecCfg=eeprom_read_byte(&DefDecimalTotalVolume);
    6898:	8d e3       	ldi	r24, 0x3D	; 61
    689a:	90 e0       	ldi	r25, 0x00	; 0
    689c:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
    68a0:	68 2f       	mov	r22, r24
	 FormatDecimal(strRawVolume,DecCfg);
    68a2:	c8 01       	movw	r24, r16
    68a4:	0e 94 cf 33 	call	0x679e	; 0x679e <FormatDecimal>
}
    68a8:	1f 91       	pop	r17
    68aa:	0f 91       	pop	r16
    68ac:	08 95       	ret

000068ae <FormatTotalizerMoney>:
     char DecCfg;
     DecCfg=eeprom_read_byte(&DefDecimalVolume);
	 FormatDecimal(strRawVolume,DecCfg);
}

void FormatTotalizerMoney(char *strRawMoney){
    68ae:	0f 93       	push	r16
    68b0:	1f 93       	push	r17
    68b2:	8c 01       	movw	r16, r24
     char DecCfg;
     DecCfg=eeprom_read_byte(&DefDecimalTotalMoney);
    68b4:	8e e3       	ldi	r24, 0x3E	; 62
    68b6:	90 e0       	ldi	r25, 0x00	; 0
    68b8:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
    68bc:	68 2f       	mov	r22, r24
	 FormatDecimal(strRawMoney,DecCfg);
    68be:	c8 01       	movw	r24, r16
    68c0:	0e 94 cf 33 	call	0x679e	; 0x679e <FormatDecimal>
}
    68c4:	1f 91       	pop	r17
    68c6:	0f 91       	pop	r16
    68c8:	08 95       	ret

000068ca <FormatVolume>:
     char DecCfg;
     DecCfg=eeprom_read_byte(&DefDecimalMoney);
	 FormatDecimal(strRawMoney,DecCfg);
}

void FormatVolume(char *strRawVolume){//96->0,96 
    68ca:	0f 93       	push	r16
    68cc:	1f 93       	push	r17
    68ce:	8c 01       	movw	r16, r24
     char DecCfg;
     DecCfg=eeprom_read_byte(&DefDecimalVolume);
    68d0:	8a e3       	ldi	r24, 0x3A	; 58
    68d2:	90 e0       	ldi	r25, 0x00	; 0
    68d4:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
    68d8:	68 2f       	mov	r22, r24
	 FormatDecimal(strRawVolume,DecCfg);
    68da:	c8 01       	movw	r24, r16
    68dc:	0e 94 cf 33 	call	0x679e	; 0x679e <FormatDecimal>
}
    68e0:	1f 91       	pop	r17
    68e2:	0f 91       	pop	r16
    68e4:	08 95       	ret

000068e6 <FormatMoney>:
     char DecCfg;
     DecCfg=eeprom_read_byte(&DefDecimalPrice);
	 FormatDecimal(strRawPrice,DecCfg);
}

void FormatMoney(char *strRawMoney){
    68e6:	0f 93       	push	r16
    68e8:	1f 93       	push	r17
    68ea:	8c 01       	movw	r16, r24
     char DecCfg;
     DecCfg=eeprom_read_byte(&DefDecimalMoney);
    68ec:	8b e3       	ldi	r24, 0x3B	; 59
    68ee:	90 e0       	ldi	r25, 0x00	; 0
    68f0:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
    68f4:	68 2f       	mov	r22, r24
	 FormatDecimal(strRawMoney,DecCfg);
    68f6:	c8 01       	movw	r24, r16
    68f8:	0e 94 cf 33 	call	0x679e	; 0x679e <FormatDecimal>
}
    68fc:	1f 91       	pop	r17
    68fe:	0f 91       	pop	r16
    6900:	08 95       	ret

00006902 <FormatPrice>:
		 }strRawData[Length]=0;
	 }
          //uart_print(1,1,strRawData); 
}

void FormatPrice(char *strRawPrice){
    6902:	0f 93       	push	r16
    6904:	1f 93       	push	r17
    6906:	8c 01       	movw	r16, r24
     char DecCfg;
     DecCfg=eeprom_read_byte(&DefDecimalPrice);
    6908:	89 e3       	ldi	r24, 0x39	; 57
    690a:	90 e0       	ldi	r25, 0x00	; 0
    690c:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
    6910:	68 2f       	mov	r22, r24
	 FormatDecimal(strRawPrice,DecCfg);
    6912:	c8 01       	movw	r24, r16
    6914:	0e 94 cf 33 	call	0x679e	; 0x679e <FormatDecimal>
}
    6918:	1f 91       	pop	r17
    691a:	0f 91       	pop	r16
    691c:	08 95       	ret

0000691e <systemGenerateReport>:
	 }
}

//Spooling HFCS 0000 : Header, Footer, Copy , Scrool [Copy:16x max]
//			cmdPrint=procMessage81();
void systemGenerateReport(){
    691e:	2f 92       	push	r2
    6920:	3f 92       	push	r3
    6922:	4f 92       	push	r4
    6924:	5f 92       	push	r5
    6926:	6f 92       	push	r6
    6928:	7f 92       	push	r7
    692a:	8f 92       	push	r8
    692c:	9f 92       	push	r9
    692e:	af 92       	push	r10
    6930:	bf 92       	push	r11
    6932:	cf 92       	push	r12
    6934:	df 92       	push	r13
    6936:	ef 92       	push	r14
    6938:	ff 92       	push	r15
    693a:	0f 93       	push	r16
    693c:	1f 93       	push	r17
    693e:	df 93       	push	r29
    6940:	cf 93       	push	r28
    6942:	cd b7       	in	r28, 0x3d	; 61
    6944:	de b7       	in	r29, 0x3e	; 62
    6946:	cb 5f       	subi	r28, 0xFB	; 251
    6948:	d0 40       	sbci	r29, 0x00	; 0
    694a:	0f b6       	in	r0, 0x3f	; 63
    694c:	f8 94       	cli
    694e:	de bf       	out	0x3e, r29	; 62
    6950:	0f be       	out	0x3f, r0	; 63
    6952:	cd bf       	out	0x3d, r28	; 61
	   char strTabSpace[20],strTabSpace2[20];
	   char iTotal;//,PadLength;
	   char sPrice[10],strProductPrice[20];
	   char FIPAddr;

     switch(stGenerateReport){
    6954:	10 91 e8 01 	lds	r17, 0x01E8
    6958:	16 30       	cpi	r17, 0x06	; 6
    695a:	09 f4       	brne	.+2      	; 0x695e <systemGenerateReport+0x40>
    695c:	4d c2       	rjmp	.+1178   	; 0x6df8 <systemGenerateReport+0x4da>
    695e:	17 30       	cpi	r17, 0x07	; 7
    6960:	98 f4       	brcc	.+38     	; 0x6988 <systemGenerateReport+0x6a>
    6962:	12 30       	cpi	r17, 0x02	; 2
    6964:	09 f4       	brne	.+2      	; 0x6968 <systemGenerateReport+0x4a>
    6966:	a3 c0       	rjmp	.+326    	; 0x6aae <systemGenerateReport+0x190>
    6968:	13 30       	cpi	r17, 0x03	; 3
    696a:	38 f4       	brcc	.+14     	; 0x697a <systemGenerateReport+0x5c>
    696c:	11 23       	and	r17, r17
    696e:	31 f1       	breq	.+76     	; 0x69bc <systemGenerateReport+0x9e>
    6970:	11 30       	cpi	r17, 0x01	; 1
    6972:	11 f0       	breq	.+4      	; 0x6978 <systemGenerateReport+0x5a>
    6974:	0c 94 c6 3e 	jmp	0x7d8c	; 0x7d8c <systemGenerateReport+0x146e>
    6978:	2d c0       	rjmp	.+90     	; 0x69d4 <systemGenerateReport+0xb6>
    697a:	14 30       	cpi	r17, 0x04	; 4
    697c:	09 f4       	brne	.+2      	; 0x6980 <systemGenerateReport+0x62>
    697e:	bb c1       	rjmp	.+886    	; 0x6cf6 <systemGenerateReport+0x3d8>
    6980:	15 30       	cpi	r17, 0x05	; 5
    6982:	08 f0       	brcs	.+2      	; 0x6986 <systemGenerateReport+0x68>
    6984:	9a c6       	rjmp	.+3380   	; 0x76ba <systemGenerateReport+0xd9c>
    6986:	ae c1       	rjmp	.+860    	; 0x6ce4 <systemGenerateReport+0x3c6>
    6988:	19 30       	cpi	r17, 0x09	; 9
    698a:	09 f4       	brne	.+2      	; 0x698e <systemGenerateReport+0x70>
    698c:	96 c6       	rjmp	.+3372   	; 0x76ba <systemGenerateReport+0xd9c>
    698e:	1a 30       	cpi	r17, 0x0A	; 10
    6990:	40 f4       	brcc	.+16     	; 0x69a2 <systemGenerateReport+0x84>
    6992:	17 30       	cpi	r17, 0x07	; 7
    6994:	09 f4       	brne	.+2      	; 0x6998 <systemGenerateReport+0x7a>
    6996:	92 c2       	rjmp	.+1316   	; 0x6ebc <systemGenerateReport+0x59e>
    6998:	18 30       	cpi	r17, 0x08	; 8
    699a:	11 f0       	breq	.+4      	; 0x69a0 <systemGenerateReport+0x82>
    699c:	0c 94 c6 3e 	jmp	0x7d8c	; 0x7d8c <systemGenerateReport+0x146e>
    69a0:	9a c2       	rjmp	.+1332   	; 0x6ed6 <systemGenerateReport+0x5b8>
    69a2:	1b 30       	cpi	r17, 0x0B	; 11
    69a4:	11 f4       	brne	.+4      	; 0x69aa <systemGenerateReport+0x8c>
    69a6:	0c 94 b9 3e 	jmp	0x7d72	; 0x7d72 <systemGenerateReport+0x1454>
    69aa:	1b 30       	cpi	r17, 0x0B	; 11
    69ac:	08 f4       	brcc	.+2      	; 0x69b0 <systemGenerateReport+0x92>
    69ae:	8c c6       	rjmp	.+3352   	; 0x76c8 <systemGenerateReport+0xdaa>
    69b0:	1c 30       	cpi	r17, 0x0C	; 12
    69b2:	11 f0       	breq	.+4      	; 0x69b8 <systemGenerateReport+0x9a>
    69b4:	0c 94 c6 3e 	jmp	0x7d8c	; 0x7d8c <systemGenerateReport+0x146e>
    69b8:	0c 94 c1 3e 	jmp	0x7d82	; 0x7d82 <systemGenerateReport+0x1464>
	 case grScanAction://Wait for Complete incoming Totalizer data	      
		  if (IsGenerateReport==True){
    69bc:	80 91 86 01 	lds	r24, 0x0186
    69c0:	81 30       	cpi	r24, 0x01	; 1
    69c2:	11 f0       	breq	.+4      	; 0x69c8 <systemGenerateReport+0xaa>
    69c4:	0c 94 c6 3e 	jmp	0x7d8c	; 0x7d8c <systemGenerateReport+0x146e>
		      IsGenerateReport=False;
    69c8:	10 92 86 01 	sts	0x0186, r1
			  IsFinishPrintingTotalizer=False;
    69cc:	10 92 87 01 	sts	0x0187, r1
    69d0:	0c 94 be 3e 	jmp	0x7d7c	; 0x7d7c <systemGenerateReport+0x145e>
			  stGenerateReport=grInitData;
		  }
	      break;
	 case grInitData:
	      xPump=1;
    69d4:	10 93 e7 01 	sts	0x01E7, r17
		  xNozzle=1;
    69d8:	10 93 e6 01 	sts	0x01E6, r17
		  RepPos=0;
    69dc:	10 92 d7 01 	sts	0x01D7, r1
    69e0:	10 92 d6 01 	sts	0x01D6, r1
    69e4:	ec ee       	ldi	r30, 0xEC	; 236
    69e6:	f3 e0       	ldi	r31, 0x03	; 3
}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
	     strMemory[i]=data;
    69e8:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    69ea:	85 e0       	ldi	r24, 0x05	; 5
    69ec:	ed 37       	cpi	r30, 0x7D	; 125
    69ee:	f8 07       	cpc	r31, r24
    69f0:	d9 f7       	brne	.-10     	; 0x69e8 <systemGenerateReport+0xca>
    69f2:	fe 01       	movw	r30, r28
    69f4:	eb 55       	subi	r30, 0x5B	; 91
    69f6:	ff 4f       	sbci	r31, 0xFF	; 255
	     strMemory[i]=data;
    69f8:	ce 01       	movw	r24, r28
    69fa:	8b 50       	subi	r24, 0x0B	; 11
    69fc:	9f 4f       	sbci	r25, 0xFF	; 255
    69fe:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    6a00:	e8 17       	cp	r30, r24
    6a02:	f9 07       	cpc	r31, r25
    6a04:	e1 f7       	brne	.-8      	; 0x69fe <systemGenerateReport+0xe0>
    6a06:	fe 01       	movw	r30, r28
    6a08:	f7 96       	adiw	r30, 0x37	; 55
	     strMemory[i]=data;
    6a0a:	cf 01       	movw	r24, r30
    6a0c:	0f 96       	adiw	r24, 0x0f	; 15
    6a0e:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    6a10:	e8 17       	cp	r30, r24
    6a12:	f9 07       	cpc	r31, r25
    6a14:	e1 f7       	brne	.-8      	; 0x6a0e <systemGenerateReport+0xf0>
    6a16:	fe 01       	movw	r30, r28
    6a18:	ea 5b       	subi	r30, 0xBA	; 186
    6a1a:	ff 4f       	sbci	r31, 0xFF	; 255
	     strMemory[i]=data;
    6a1c:	cf 01       	movw	r24, r30
    6a1e:	0f 96       	adiw	r24, 0x0f	; 15
    6a20:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    6a22:	e8 17       	cp	r30, r24
    6a24:	f9 07       	cpc	r31, r25
    6a26:	e1 f7       	brne	.-8      	; 0x6a20 <systemGenerateReport+0x102>
    6a28:	e7 ef       	ldi	r30, 0xF7	; 247
    6a2a:	f7 e0       	ldi	r31, 0x07	; 7
	     strMemory[i]=data;
    6a2c:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    6a2e:	98 e0       	ldi	r25, 0x08	; 8
    6a30:	eb 30       	cpi	r30, 0x0B	; 11
    6a32:	f9 07       	cpc	r31, r25
    6a34:	d9 f7       	brne	.-10     	; 0x6a2c <systemGenerateReport+0x10e>
    6a36:	e8 ea       	ldi	r30, 0xA8	; 168
    6a38:	f8 e0       	ldi	r31, 0x08	; 8
	     strMemory[i]=data;
    6a3a:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    6a3c:	a8 e0       	ldi	r26, 0x08	; 8
    6a3e:	ec 3b       	cpi	r30, 0xBC	; 188
    6a40:	fa 07       	cpc	r31, r26
    6a42:	d9 f7       	brne	.-10     	; 0x6a3a <systemGenerateReport+0x11c>
    6a44:	ed e2       	ldi	r30, 0x2D	; 45
    6a46:	fc e0       	ldi	r31, 0x0C	; 12
	     strMemory[i]=data;
    6a48:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    6a4a:	bc e0       	ldi	r27, 0x0C	; 12
    6a4c:	ec 33       	cpi	r30, 0x3C	; 60
    6a4e:	fb 07       	cpc	r31, r27
    6a50:	d9 f7       	brne	.-10     	; 0x6a48 <systemGenerateReport+0x12a>
    6a52:	e5 e0       	ldi	r30, 0x05	; 5
    6a54:	f9 e0       	ldi	r31, 0x09	; 9
	     strMemory[i]=data;
    6a56:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    6a58:	89 e0       	ldi	r24, 0x09	; 9
    6a5a:	e4 31       	cpi	r30, 0x14	; 20
    6a5c:	f8 07       	cpc	r31, r24
    6a5e:	d9 f7       	brne	.-10     	; 0x6a56 <systemGenerateReport+0x138>
		  FillChar(strTotalMoney,sizeof(strTotalMoney),0);


		  FillChar(strDeltaMoney,sizeof(strDeltaMoney),0);
		  FillChar(strDeltaVolume,sizeof(strDeltaVolume),0);
		  sprintf_P(strShift,PSTR("%d"),eeprom_read_byte(&DefShift));
    6a60:	80 e4       	ldi	r24, 0x40	; 64
    6a62:	91 e0       	ldi	r25, 0x01	; 1
    6a64:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
    6a68:	00 d0       	rcall	.+0      	; 0x6a6a <systemGenerateReport+0x14c>
    6a6a:	00 d0       	rcall	.+0      	; 0x6a6c <systemGenerateReport+0x14e>
    6a6c:	00 d0       	rcall	.+0      	; 0x6a6e <systemGenerateReport+0x150>
    6a6e:	ed b7       	in	r30, 0x3d	; 61
    6a70:	fe b7       	in	r31, 0x3e	; 62
    6a72:	31 96       	adiw	r30, 0x01	; 1
    6a74:	29 e6       	ldi	r18, 0x69	; 105
    6a76:	3c e0       	ldi	r19, 0x0C	; 12
    6a78:	ad b7       	in	r26, 0x3d	; 61
    6a7a:	be b7       	in	r27, 0x3e	; 62
    6a7c:	12 96       	adiw	r26, 0x02	; 2
    6a7e:	3c 93       	st	X, r19
    6a80:	2e 93       	st	-X, r18
    6a82:	11 97       	sbiw	r26, 0x01	; 1
    6a84:	25 e0       	ldi	r18, 0x05	; 5
    6a86:	37 e0       	ldi	r19, 0x07	; 7
    6a88:	33 83       	std	Z+3, r19	; 0x03
    6a8a:	22 83       	std	Z+2, r18	; 0x02
    6a8c:	84 83       	std	Z+4, r24	; 0x04
    6a8e:	15 82       	std	Z+5, r1	; 0x05
    6a90:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>

          stGenerateReport=grCreateReportHeader;
    6a94:	82 e0       	ldi	r24, 0x02	; 2
    6a96:	80 93 e8 01 	sts	0x01E8, r24
    6a9a:	ed b7       	in	r30, 0x3d	; 61
    6a9c:	fe b7       	in	r31, 0x3e	; 62
    6a9e:	36 96       	adiw	r30, 0x06	; 6
    6aa0:	0f b6       	in	r0, 0x3f	; 63
    6aa2:	f8 94       	cli
    6aa4:	fe bf       	out	0x3e, r31	; 62
    6aa6:	0f be       	out	0x3f, r0	; 63
    6aa8:	ed bf       	out	0x3d, r30	; 61
    6aaa:	0c 94 c6 3e 	jmp	0x7d8c	; 0x7d8c <systemGenerateReport+0x146e>
	      break;
	 case grCreateReportHeader://Border: btTopLeft,btTopCenter,btTopRight,btMiddleLeft,btMiddleCenter,btMiddleRight,btBottomLeft,btBottomCenter,btBottomRight,btVertical,btHorizontal
		  eeprom_read_block((void*) &LastShiftDateTime, (const void*) &DefLastShiftDateTime, sizeof(DefLastShiftDateTime));
    6aae:	45 e5       	ldi	r20, 0x55	; 85
    6ab0:	e4 2e       	mov	r14, r20
    6ab2:	f1 2c       	mov	r15, r1
    6ab4:	ec 0e       	add	r14, r28
    6ab6:	fd 1e       	adc	r15, r29
    6ab8:	c7 01       	movw	r24, r14
    6aba:	64 e4       	ldi	r22, 0x44	; 68
    6abc:	78 e0       	ldi	r23, 0x08	; 8
    6abe:	44 e1       	ldi	r20, 0x14	; 20
    6ac0:	50 e0       	ldi	r21, 0x00	; 0
    6ac2:	0e 94 30 ad 	call	0x15a60	; 0x15a60 <__eerd_block_m128>
          
		  InserBorder(btTopLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btTopRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);
    6ac6:	81 e0       	ldi	r24, 0x01	; 1
    6ac8:	6c ee       	ldi	r22, 0xEC	; 236
    6aca:	73 e0       	ldi	r23, 0x03	; 3
    6acc:	41 e0       	ldi	r20, 0x01	; 1
    6ace:	26 ed       	ldi	r18, 0xD6	; 214
    6ad0:	31 e0       	ldi	r19, 0x01	; 1
    6ad2:	0e 94 96 1a 	call	0x352c	; 0x352c <InserBorder>
    6ad6:	8b e0       	ldi	r24, 0x0B	; 11
    6ad8:	6c ee       	ldi	r22, 0xEC	; 236
    6ada:	73 e0       	ldi	r23, 0x03	; 3
    6adc:	4a e2       	ldi	r20, 0x2A	; 42
    6ade:	26 ed       	ldi	r18, 0xD6	; 214
    6ae0:	31 e0       	ldi	r19, 0x01	; 1
    6ae2:	0e 94 96 1a 	call	0x352c	; 0x352c <InserBorder>
    6ae6:	83 e0       	ldi	r24, 0x03	; 3
    6ae8:	6c ee       	ldi	r22, 0xEC	; 236
    6aea:	73 e0       	ldi	r23, 0x03	; 3
    6aec:	41 e0       	ldi	r20, 0x01	; 1
    6aee:	26 ed       	ldi	r18, 0xD6	; 214
    6af0:	31 e0       	ldi	r19, 0x01	; 1
    6af2:	0e 94 96 1a 	call	0x352c	; 0x352c <InserBorder>
    6af6:	8c e0       	ldi	r24, 0x0C	; 12
    6af8:	6c ee       	ldi	r22, 0xEC	; 236
    6afa:	73 e0       	ldi	r23, 0x03	; 3
    6afc:	41 e0       	ldi	r20, 0x01	; 1
    6afe:	26 ed       	ldi	r18, 0xD6	; 214
    6b00:	31 e0       	ldi	r19, 0x01	; 1
    6b02:	0e 94 96 1a 	call	0x352c	; 0x352c <InserBorder>
	      sprintf_P(strReport,PSTR("        Laporan Tutup Shift: %s      "),strShift);CreateReport(strReport,PrintBuffer,&RepPos);
    6b06:	00 d0       	rcall	.+0      	; 0x6b08 <systemGenerateReport+0x1ea>
    6b08:	00 d0       	rcall	.+0      	; 0x6b0a <systemGenerateReport+0x1ec>
    6b0a:	00 d0       	rcall	.+0      	; 0x6b0c <systemGenerateReport+0x1ee>
    6b0c:	ed b7       	in	r30, 0x3d	; 61
    6b0e:	fe b7       	in	r31, 0x3e	; 62
    6b10:	31 96       	adiw	r30, 0x01	; 1
    6b12:	8e 01       	movw	r16, r28
    6b14:	0b 55       	subi	r16, 0x5B	; 91
    6b16:	1f 4f       	sbci	r17, 0xFF	; 255
    6b18:	ad b7       	in	r26, 0x3d	; 61
    6b1a:	be b7       	in	r27, 0x3e	; 62
    6b1c:	12 96       	adiw	r26, 0x02	; 2
    6b1e:	1c 93       	st	X, r17
    6b20:	0e 93       	st	-X, r16
    6b22:	11 97       	sbiw	r26, 0x01	; 1
    6b24:	8f ed       	ldi	r24, 0xDF	; 223
    6b26:	96 e0       	ldi	r25, 0x06	; 6
    6b28:	93 83       	std	Z+3, r25	; 0x03
    6b2a:	82 83       	std	Z+2, r24	; 0x02
    6b2c:	89 e6       	ldi	r24, 0x69	; 105
    6b2e:	9c e0       	ldi	r25, 0x0C	; 12
    6b30:	95 83       	std	Z+5, r25	; 0x05
    6b32:	84 83       	std	Z+4, r24	; 0x04
    6b34:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
    6b38:	ed b7       	in	r30, 0x3d	; 61
    6b3a:	fe b7       	in	r31, 0x3e	; 62
    6b3c:	36 96       	adiw	r30, 0x06	; 6
    6b3e:	0f b6       	in	r0, 0x3f	; 63
    6b40:	f8 94       	cli
    6b42:	fe bf       	out	0x3e, r31	; 62
    6b44:	0f be       	out	0x3f, r0	; 63
    6b46:	ed bf       	out	0x3d, r30	; 61
    6b48:	c8 01       	movw	r24, r16
    6b4a:	6c ee       	ldi	r22, 0xEC	; 236
    6b4c:	73 e0       	ldi	r23, 0x03	; 3
    6b4e:	46 ed       	ldi	r20, 0xD6	; 214
    6b50:	51 e0       	ldi	r21, 0x01	; 1
    6b52:	0e 94 27 22 	call	0x444e	; 0x444e <CreateReport>
		  InserBorder(btMiddleLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btMiddleRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);     
    6b56:	84 e0       	ldi	r24, 0x04	; 4
    6b58:	6c ee       	ldi	r22, 0xEC	; 236
    6b5a:	73 e0       	ldi	r23, 0x03	; 3
    6b5c:	41 e0       	ldi	r20, 0x01	; 1
    6b5e:	26 ed       	ldi	r18, 0xD6	; 214
    6b60:	31 e0       	ldi	r19, 0x01	; 1
    6b62:	0e 94 96 1a 	call	0x352c	; 0x352c <InserBorder>
    6b66:	8b e0       	ldi	r24, 0x0B	; 11
    6b68:	6c ee       	ldi	r22, 0xEC	; 236
    6b6a:	73 e0       	ldi	r23, 0x03	; 3
    6b6c:	4a e2       	ldi	r20, 0x2A	; 42
    6b6e:	26 ed       	ldi	r18, 0xD6	; 214
    6b70:	31 e0       	ldi	r19, 0x01	; 1
    6b72:	0e 94 96 1a 	call	0x352c	; 0x352c <InserBorder>
    6b76:	86 e0       	ldi	r24, 0x06	; 6
    6b78:	6c ee       	ldi	r22, 0xEC	; 236
    6b7a:	73 e0       	ldi	r23, 0x03	; 3
    6b7c:	41 e0       	ldi	r20, 0x01	; 1
    6b7e:	26 ed       	ldi	r18, 0xD6	; 214
    6b80:	31 e0       	ldi	r19, 0x01	; 1
    6b82:	0e 94 96 1a 	call	0x352c	; 0x352c <InserBorder>
    6b86:	8c e0       	ldi	r24, 0x0C	; 12
    6b88:	6c ee       	ldi	r22, 0xEC	; 236
    6b8a:	73 e0       	ldi	r23, 0x03	; 3
    6b8c:	41 e0       	ldi	r20, 0x01	; 1
    6b8e:	26 ed       	ldi	r18, 0xD6	; 214
    6b90:	31 e0       	ldi	r19, 0x01	; 1
    6b92:	0e 94 96 1a 	call	0x352c	; 0x352c <InserBorder>
	      sprintf_P(strReport,PSTR("Terminal ID : %.2d                   "),eeprom_read_byte(&DefIFT_ID));CreateReport(strReport,PrintBuffer,&RepPos);
    6b96:	80 e0       	ldi	r24, 0x00	; 0
    6b98:	90 e0       	ldi	r25, 0x00	; 0
    6b9a:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
    6b9e:	00 d0       	rcall	.+0      	; 0x6ba0 <systemGenerateReport+0x282>
    6ba0:	00 d0       	rcall	.+0      	; 0x6ba2 <systemGenerateReport+0x284>
    6ba2:	00 d0       	rcall	.+0      	; 0x6ba4 <systemGenerateReport+0x286>
    6ba4:	ed b7       	in	r30, 0x3d	; 61
    6ba6:	fe b7       	in	r31, 0x3e	; 62
    6ba8:	31 96       	adiw	r30, 0x01	; 1
    6baa:	ad b7       	in	r26, 0x3d	; 61
    6bac:	be b7       	in	r27, 0x3e	; 62
    6bae:	12 96       	adiw	r26, 0x02	; 2
    6bb0:	1c 93       	st	X, r17
    6bb2:	0e 93       	st	-X, r16
    6bb4:	11 97       	sbiw	r26, 0x01	; 1
    6bb6:	29 eb       	ldi	r18, 0xB9	; 185
    6bb8:	36 e0       	ldi	r19, 0x06	; 6
    6bba:	33 83       	std	Z+3, r19	; 0x03
    6bbc:	22 83       	std	Z+2, r18	; 0x02
    6bbe:	84 83       	std	Z+4, r24	; 0x04
    6bc0:	15 82       	std	Z+5, r1	; 0x05
    6bc2:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
    6bc6:	ed b7       	in	r30, 0x3d	; 61
    6bc8:	fe b7       	in	r31, 0x3e	; 62
    6bca:	36 96       	adiw	r30, 0x06	; 6
    6bcc:	0f b6       	in	r0, 0x3f	; 63
    6bce:	f8 94       	cli
    6bd0:	fe bf       	out	0x3e, r31	; 62
    6bd2:	0f be       	out	0x3f, r0	; 63
    6bd4:	ed bf       	out	0x3d, r30	; 61
    6bd6:	c8 01       	movw	r24, r16
    6bd8:	6c ee       	ldi	r22, 0xEC	; 236
    6bda:	73 e0       	ldi	r23, 0x03	; 3
    6bdc:	46 ed       	ldi	r20, 0xD6	; 214
    6bde:	51 e0       	ldi	r21, 0x01	; 1
    6be0:	0e 94 27 22 	call	0x444e	; 0x444e <CreateReport>
	      sprintf_P(strReport,PSTR("Awal  Shift : %s "),LastShiftDateTime);             CreateReport(strReport,PrintBuffer,&RepPos);
    6be4:	00 d0       	rcall	.+0      	; 0x6be6 <systemGenerateReport+0x2c8>
    6be6:	00 d0       	rcall	.+0      	; 0x6be8 <systemGenerateReport+0x2ca>
    6be8:	00 d0       	rcall	.+0      	; 0x6bea <systemGenerateReport+0x2cc>
    6bea:	ed b7       	in	r30, 0x3d	; 61
    6bec:	fe b7       	in	r31, 0x3e	; 62
    6bee:	31 96       	adiw	r30, 0x01	; 1
    6bf0:	ad b7       	in	r26, 0x3d	; 61
    6bf2:	be b7       	in	r27, 0x3e	; 62
    6bf4:	12 96       	adiw	r26, 0x02	; 2
    6bf6:	1c 93       	st	X, r17
    6bf8:	0e 93       	st	-X, r16
    6bfa:	11 97       	sbiw	r26, 0x01	; 1
    6bfc:	87 ea       	ldi	r24, 0xA7	; 167
    6bfe:	96 e0       	ldi	r25, 0x06	; 6
    6c00:	93 83       	std	Z+3, r25	; 0x03
    6c02:	82 83       	std	Z+2, r24	; 0x02
    6c04:	f5 82       	std	Z+5, r15	; 0x05
    6c06:	e4 82       	std	Z+4, r14	; 0x04
    6c08:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
    6c0c:	ed b7       	in	r30, 0x3d	; 61
    6c0e:	fe b7       	in	r31, 0x3e	; 62
    6c10:	36 96       	adiw	r30, 0x06	; 6
    6c12:	0f b6       	in	r0, 0x3f	; 63
    6c14:	f8 94       	cli
    6c16:	fe bf       	out	0x3e, r31	; 62
    6c18:	0f be       	out	0x3f, r0	; 63
    6c1a:	ed bf       	out	0x3d, r30	; 61
    6c1c:	c8 01       	movw	r24, r16
    6c1e:	6c ee       	ldi	r22, 0xEC	; 236
    6c20:	73 e0       	ldi	r23, 0x03	; 3
    6c22:	46 ed       	ldi	r20, 0xD6	; 214
    6c24:	51 e0       	ldi	r21, 0x01	; 1
    6c26:	0e 94 27 22 	call	0x444e	; 0x444e <CreateReport>
	      sprintf_P(strReport,PSTR("Akhir Shift : %s "),CurrentShiftDateTime);      CreateReport(strReport,PrintBuffer,&RepPos);
    6c2a:	00 d0       	rcall	.+0      	; 0x6c2c <systemGenerateReport+0x30e>
    6c2c:	00 d0       	rcall	.+0      	; 0x6c2e <systemGenerateReport+0x310>
    6c2e:	00 d0       	rcall	.+0      	; 0x6c30 <systemGenerateReport+0x312>
    6c30:	ed b7       	in	r30, 0x3d	; 61
    6c32:	fe b7       	in	r31, 0x3e	; 62
    6c34:	31 96       	adiw	r30, 0x01	; 1
    6c36:	ad b7       	in	r26, 0x3d	; 61
    6c38:	be b7       	in	r27, 0x3e	; 62
    6c3a:	12 96       	adiw	r26, 0x02	; 2
    6c3c:	1c 93       	st	X, r17
    6c3e:	0e 93       	st	-X, r16
    6c40:	11 97       	sbiw	r26, 0x01	; 1
    6c42:	85 e9       	ldi	r24, 0x95	; 149
    6c44:	96 e0       	ldi	r25, 0x06	; 6
    6c46:	93 83       	std	Z+3, r25	; 0x03
    6c48:	82 83       	std	Z+2, r24	; 0x02
    6c4a:	8e e8       	ldi	r24, 0x8E	; 142
    6c4c:	97 e0       	ldi	r25, 0x07	; 7
    6c4e:	95 83       	std	Z+5, r25	; 0x05
    6c50:	84 83       	std	Z+4, r24	; 0x04
    6c52:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
    6c56:	ed b7       	in	r30, 0x3d	; 61
    6c58:	fe b7       	in	r31, 0x3e	; 62
    6c5a:	36 96       	adiw	r30, 0x06	; 6
    6c5c:	0f b6       	in	r0, 0x3f	; 63
    6c5e:	f8 94       	cli
    6c60:	fe bf       	out	0x3e, r31	; 62
    6c62:	0f be       	out	0x3f, r0	; 63
    6c64:	ed bf       	out	0x3d, r30	; 61
    6c66:	c8 01       	movw	r24, r16
    6c68:	6c ee       	ldi	r22, 0xEC	; 236
    6c6a:	73 e0       	ldi	r23, 0x03	; 3
    6c6c:	46 ed       	ldi	r20, 0xD6	; 214
    6c6e:	51 e0       	ldi	r21, 0x01	; 1
    6c70:	0e 94 27 22 	call	0x444e	; 0x444e <CreateReport>
	      //sprintf_P(strReport,PSTR("Transaksi   : %s "),DeltaTransaction);      CreateReport(strReport,PrintBuffer,&RepPos);
          InserBorder(btBottomLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btBottomRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);
    6c74:	87 e0       	ldi	r24, 0x07	; 7
    6c76:	6c ee       	ldi	r22, 0xEC	; 236
    6c78:	73 e0       	ldi	r23, 0x03	; 3
    6c7a:	41 e0       	ldi	r20, 0x01	; 1
    6c7c:	26 ed       	ldi	r18, 0xD6	; 214
    6c7e:	31 e0       	ldi	r19, 0x01	; 1
    6c80:	0e 94 96 1a 	call	0x352c	; 0x352c <InserBorder>
    6c84:	8b e0       	ldi	r24, 0x0B	; 11
    6c86:	6c ee       	ldi	r22, 0xEC	; 236
    6c88:	73 e0       	ldi	r23, 0x03	; 3
    6c8a:	4a e2       	ldi	r20, 0x2A	; 42
    6c8c:	26 ed       	ldi	r18, 0xD6	; 214
    6c8e:	31 e0       	ldi	r19, 0x01	; 1
    6c90:	0e 94 96 1a 	call	0x352c	; 0x352c <InserBorder>
    6c94:	89 e0       	ldi	r24, 0x09	; 9
    6c96:	6c ee       	ldi	r22, 0xEC	; 236
    6c98:	73 e0       	ldi	r23, 0x03	; 3
    6c9a:	41 e0       	ldi	r20, 0x01	; 1
    6c9c:	26 ed       	ldi	r18, 0xD6	; 214
    6c9e:	31 e0       	ldi	r19, 0x01	; 1
    6ca0:	0e 94 96 1a 	call	0x352c	; 0x352c <InserBorder>
    6ca4:	8c e0       	ldi	r24, 0x0C	; 12
    6ca6:	6c ee       	ldi	r22, 0xEC	; 236
    6ca8:	73 e0       	ldi	r23, 0x03	; 3
    6caa:	41 e0       	ldi	r20, 0x01	; 1
    6cac:	26 ed       	ldi	r18, 0xD6	; 214
    6cae:	31 e0       	ldi	r19, 0x01	; 1
    6cb0:	0e 94 96 1a 	call	0x352c	; 0x352c <InserBorder>
		  /*
	      if (eeprom_read_byte(&DefPrintMoney)==True)sprintf_P(strReport,PSTR("PUMP-PRODUCT   VOLUME(L)    RUPIAH(RP)"));         
	      else sprintf_P(strReport,PSTR("PUMP-PRODUCT   VOLUME(L)              "));CreateReport(strReport,PrintBuffer,&RepPos);
          InserBorder(btBottomLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btBottomRight,PrintBuffer,1,&RepPos);//InserBorder(btNewLine,PrintBuffer,1,&RepPos);         		 
          */
		  ClearList(GradeList);
    6cb4:	88 ed       	ldi	r24, 0xD8	; 216
    6cb6:	91 e0       	ldi	r25, 0x01	; 1
    6cb8:	0e 94 c8 22 	call	0x4590	; 0x4590 <ClearList>
		  cmdPrint=0b10000000;//PrintHeader
    6cbc:	80 e8       	ldi	r24, 0x80	; 128
    6cbe:	80 93 b5 01 	sts	0x01B5, r24
		  LengthMessage81=RepPos+1;
    6cc2:	80 91 d6 01 	lds	r24, 0x01D6
    6cc6:	90 91 d7 01 	lds	r25, 0x01D7
    6cca:	01 96       	adiw	r24, 0x01	; 1
    6ccc:	90 93 8e 01 	sts	0x018E, r25
    6cd0:	80 93 8d 01 	sts	0x018D, r24
		  IsFreePrinting=True;
    6cd4:	81 e0       	ldi	r24, 0x01	; 1
    6cd6:	80 93 a8 01 	sts	0x01A8, r24
          IsBusyFreePrinting=True;
    6cda:	80 93 b4 01 	sts	0x01B4, r24
		  		  
          stGenerateReport=grWaitPrinted1;
    6cde:	83 e0       	ldi	r24, 0x03	; 3
    6ce0:	0c 94 be 3e 	jmp	0x7d7c	; 0x7d7c <systemGenerateReport+0x145e>
	      break;
     case grWaitPrinted1:
          if (IsBusyFreePrinting==False)
    6ce4:	80 91 b4 01 	lds	r24, 0x01B4
    6ce8:	88 23       	and	r24, r24
    6cea:	11 f0       	breq	.+4      	; 0x6cf0 <systemGenerateReport+0x3d2>
    6cec:	0c 94 c6 3e 	jmp	0x7d8c	; 0x7d8c <systemGenerateReport+0x146e>
		      stGenerateReport=grGenerateLabel;//grGenerateReportData;//grFinishGenerateReport;
    6cf0:	84 e0       	ldi	r24, 0x04	; 4
    6cf2:	0c 94 be 3e 	jmp	0x7d7c	; 0x7d7c <systemGenerateReport+0x145e>
	      break;
     case grGenerateLabel:
          RepPos=0;
    6cf6:	10 92 d7 01 	sts	0x01D7, r1
    6cfa:	10 92 d6 01 	sts	0x01D6, r1
          InserBorder(btTopLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btTopRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);          
    6cfe:	81 e0       	ldi	r24, 0x01	; 1
    6d00:	6c ee       	ldi	r22, 0xEC	; 236
    6d02:	73 e0       	ldi	r23, 0x03	; 3
    6d04:	41 e0       	ldi	r20, 0x01	; 1
    6d06:	26 ed       	ldi	r18, 0xD6	; 214
    6d08:	31 e0       	ldi	r19, 0x01	; 1
    6d0a:	0e 94 96 1a 	call	0x352c	; 0x352c <InserBorder>
    6d0e:	8b e0       	ldi	r24, 0x0B	; 11
    6d10:	6c ee       	ldi	r22, 0xEC	; 236
    6d12:	73 e0       	ldi	r23, 0x03	; 3
    6d14:	4a e2       	ldi	r20, 0x2A	; 42
    6d16:	26 ed       	ldi	r18, 0xD6	; 214
    6d18:	31 e0       	ldi	r19, 0x01	; 1
    6d1a:	0e 94 96 1a 	call	0x352c	; 0x352c <InserBorder>
    6d1e:	83 e0       	ldi	r24, 0x03	; 3
    6d20:	6c ee       	ldi	r22, 0xEC	; 236
    6d22:	73 e0       	ldi	r23, 0x03	; 3
    6d24:	41 e0       	ldi	r20, 0x01	; 1
    6d26:	26 ed       	ldi	r18, 0xD6	; 214
    6d28:	31 e0       	ldi	r19, 0x01	; 1
    6d2a:	0e 94 96 1a 	call	0x352c	; 0x352c <InserBorder>
    6d2e:	8c e0       	ldi	r24, 0x0C	; 12
    6d30:	6c ee       	ldi	r22, 0xEC	; 236
    6d32:	73 e0       	ldi	r23, 0x03	; 3
    6d34:	41 e0       	ldi	r20, 0x01	; 1
    6d36:	26 ed       	ldi	r18, 0xD6	; 214
    6d38:	31 e0       	ldi	r19, 0x01	; 1
    6d3a:	0e 94 96 1a 	call	0x352c	; 0x352c <InserBorder>
	      if (eeprom_read_byte(&DefPrintMoney)==True)
    6d3e:	82 ec       	ldi	r24, 0xC2	; 194
    6d40:	93 e0       	ldi	r25, 0x03	; 3
    6d42:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
    6d46:	35 ea       	ldi	r19, 0xA5	; 165
    6d48:	c3 2e       	mov	r12, r19
    6d4a:	d1 2c       	mov	r13, r1
    6d4c:	cc 0e       	add	r12, r28
    6d4e:	dd 1e       	adc	r13, r29
    6d50:	81 30       	cpi	r24, 0x01	; 1
    6d52:	79 f4       	brne	.+30     	; 0x6d72 <systemGenerateReport+0x454>
		       sprintf_P(strReport,PSTR("PUMP-PRODUCT   VOLUME(L)    RUPIAH(RP)"));         
    6d54:	00 d0       	rcall	.+0      	; 0x6d56 <systemGenerateReport+0x438>
    6d56:	00 d0       	rcall	.+0      	; 0x6d58 <systemGenerateReport+0x43a>
    6d58:	ad b7       	in	r26, 0x3d	; 61
    6d5a:	be b7       	in	r27, 0x3e	; 62
    6d5c:	12 96       	adiw	r26, 0x02	; 2
    6d5e:	dc 92       	st	X, r13
    6d60:	ce 92       	st	-X, r12
    6d62:	11 97       	sbiw	r26, 0x01	; 1
    6d64:	8e e6       	ldi	r24, 0x6E	; 110
    6d66:	96 e0       	ldi	r25, 0x06	; 6
    6d68:	14 96       	adiw	r26, 0x04	; 4
    6d6a:	9c 93       	st	X, r25
    6d6c:	8e 93       	st	-X, r24
    6d6e:	13 97       	sbiw	r26, 0x03	; 3
    6d70:	0a c0       	rjmp	.+20     	; 0x6d86 <systemGenerateReport+0x468>
	      else sprintf_P(strReport,PSTR("PUMP-PRODUCT   VOLUME(L)              "));CreateReport(strReport,PrintBuffer,&RepPos);
    6d72:	00 d0       	rcall	.+0      	; 0x6d74 <systemGenerateReport+0x456>
    6d74:	00 d0       	rcall	.+0      	; 0x6d76 <systemGenerateReport+0x458>
    6d76:	ed b7       	in	r30, 0x3d	; 61
    6d78:	fe b7       	in	r31, 0x3e	; 62
    6d7a:	d2 82       	std	Z+2, r13	; 0x02
    6d7c:	c1 82       	std	Z+1, r12	; 0x01
    6d7e:	87 e4       	ldi	r24, 0x47	; 71
    6d80:	96 e0       	ldi	r25, 0x06	; 6
    6d82:	94 83       	std	Z+4, r25	; 0x04
    6d84:	83 83       	std	Z+3, r24	; 0x03
    6d86:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
    6d8a:	0f 90       	pop	r0
    6d8c:	0f 90       	pop	r0
    6d8e:	0f 90       	pop	r0
    6d90:	0f 90       	pop	r0
    6d92:	ce 01       	movw	r24, r28
    6d94:	8b 55       	subi	r24, 0x5B	; 91
    6d96:	9f 4f       	sbci	r25, 0xFF	; 255
    6d98:	6c ee       	ldi	r22, 0xEC	; 236
    6d9a:	73 e0       	ldi	r23, 0x03	; 3
    6d9c:	46 ed       	ldi	r20, 0xD6	; 214
    6d9e:	51 e0       	ldi	r21, 0x01	; 1
    6da0:	0e 94 27 22 	call	0x444e	; 0x444e <CreateReport>
          InserBorder(btBottomLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btBottomRight,PrintBuffer,1,&RepPos);//InserBorder(btNewLine,PrintBuffer,1,&RepPos);         		 
    6da4:	87 e0       	ldi	r24, 0x07	; 7
    6da6:	6c ee       	ldi	r22, 0xEC	; 236
    6da8:	73 e0       	ldi	r23, 0x03	; 3
    6daa:	41 e0       	ldi	r20, 0x01	; 1
    6dac:	26 ed       	ldi	r18, 0xD6	; 214
    6dae:	31 e0       	ldi	r19, 0x01	; 1
    6db0:	0e 94 96 1a 	call	0x352c	; 0x352c <InserBorder>
    6db4:	8b e0       	ldi	r24, 0x0B	; 11
    6db6:	6c ee       	ldi	r22, 0xEC	; 236
    6db8:	73 e0       	ldi	r23, 0x03	; 3
    6dba:	4a e2       	ldi	r20, 0x2A	; 42
    6dbc:	26 ed       	ldi	r18, 0xD6	; 214
    6dbe:	31 e0       	ldi	r19, 0x01	; 1
    6dc0:	0e 94 96 1a 	call	0x352c	; 0x352c <InserBorder>
    6dc4:	89 e0       	ldi	r24, 0x09	; 9
    6dc6:	6c ee       	ldi	r22, 0xEC	; 236
    6dc8:	73 e0       	ldi	r23, 0x03	; 3
    6dca:	41 e0       	ldi	r20, 0x01	; 1
    6dcc:	26 ed       	ldi	r18, 0xD6	; 214
    6dce:	31 e0       	ldi	r19, 0x01	; 1
    6dd0:	0e 94 96 1a 	call	0x352c	; 0x352c <InserBorder>
          
		  cmdPrint=0b00000000;
    6dd4:	10 92 b5 01 	sts	0x01B5, r1
		  LengthMessage81=RepPos+1;
    6dd8:	80 91 d6 01 	lds	r24, 0x01D6
    6ddc:	90 91 d7 01 	lds	r25, 0x01D7
    6de0:	01 96       	adiw	r24, 0x01	; 1
    6de2:	90 93 8e 01 	sts	0x018E, r25
    6de6:	80 93 8d 01 	sts	0x018D, r24

		  IsFreePrinting=True;
    6dea:	81 e0       	ldi	r24, 0x01	; 1
    6dec:	80 93 a8 01 	sts	0x01A8, r24
	      IsBusyFreePrinting=True;
    6df0:	80 93 b4 01 	sts	0x01B4, r24

		  stGenerateReport=grWaitLabelPrinted;
    6df4:	85 e0       	ldi	r24, 0x05	; 5
    6df6:	c2 c7       	rjmp	.+3972   	; 0x7d7c <systemGenerateReport+0x145e>
          if (IsBusyFreePrinting==False)
		      stGenerateReport=grGenerateReportData;//grFinishGenerateReport;
	      break;
     case grGenerateReportData:
	      //Generate: PumpNum, Nozzle, Product
	      if ((xPump>=1)&&(xPump<=8)){
    6df8:	80 91 e7 01 	lds	r24, 0x01E7
    6dfc:	81 50       	subi	r24, 0x01	; 1
    6dfe:	88 30       	cpi	r24, 0x08	; 8
    6e00:	08 f0       	brcs	.+2      	; 0x6e04 <systemGenerateReport+0x4e6>
    6e02:	c4 c7       	rjmp	.+3976   	; 0x7d8c <systemGenerateReport+0x146e>
		      eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap, 8);
    6e04:	ce 01       	movw	r24, r28
    6e06:	07 96       	adiw	r24, 0x07	; 7
    6e08:	66 e4       	ldi	r22, 0x46	; 70
    6e0a:	70 e0       	ldi	r23, 0x00	; 0
    6e0c:	48 e0       	ldi	r20, 0x08	; 8
    6e0e:	50 e0       	ldi	r21, 0x00	; 0
    6e10:	0e 94 30 ad 	call	0x15a60	; 0x15a60 <__eerd_block_m128>
			  PumpNum=PPumpID[xPump-1];
    6e14:	90 91 e7 01 	lds	r25, 0x01E7
    6e18:	fe 01       	movw	r30, r28
    6e1a:	e9 0f       	add	r30, r25
    6e1c:	f1 1d       	adc	r31, r1
    6e1e:	86 81       	ldd	r24, Z+6	; 0x06
    6e20:	80 93 e4 01 	sts	0x01E4, r24
			  if (PumpNum>0){
    6e24:	88 23       	and	r24, r24
    6e26:	09 f4       	brne	.+2      	; 0x6e2a <systemGenerateReport+0x50c>
    6e28:	47 c0       	rjmp	.+142    	; 0x6eb8 <systemGenerateReport+0x59a>
				  eeprom_read_block((void*) &PProductID, (const void*) &DefNozzleMap[xPump-1], 6);
    6e2a:	91 9f       	mul	r25, r17
    6e2c:	b0 01       	movw	r22, r0
    6e2e:	11 24       	eor	r1, r1
    6e30:	60 5b       	subi	r22, 0xB0	; 176
    6e32:	7f 4f       	sbci	r23, 0xFF	; 255
    6e34:	ce 01       	movw	r24, r28
    6e36:	01 96       	adiw	r24, 0x01	; 1
    6e38:	46 e0       	ldi	r20, 0x06	; 6
    6e3a:	50 e0       	ldi	r21, 0x00	; 0
    6e3c:	0e 94 30 ad 	call	0x15a60	; 0x15a60 <__eerd_block_m128>
				  xGrade=PProductID[xNozzle-1];
    6e40:	80 91 e6 01 	lds	r24, 0x01E6
    6e44:	fe 01       	movw	r30, r28
    6e46:	e8 0f       	add	r30, r24
    6e48:	f1 1d       	adc	r31, r1
    6e4a:	80 81       	ld	r24, Z
    6e4c:	80 93 e5 01 	sts	0x01E5, r24
    6e50:	2e e5       	ldi	r18, 0x5E	; 94
    6e52:	a2 2e       	mov	r10, r18
    6e54:	27 e0       	ldi	r18, 0x07	; 7
    6e56:	b2 2e       	mov	r11, r18

				  if (xGrade>0){
    6e58:	88 23       	and	r24, r24
    6e5a:	91 f0       	breq	.+36     	; 0x6e80 <systemGenerateReport+0x562>
				      GetProductName(xGrade,strProduct);
    6e5c:	b5 01       	movw	r22, r10
    6e5e:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <GetProductName>
                      GradeUsed=xGrade;
    6e62:	80 91 e5 01 	lds	r24, 0x01E5
    6e66:	80 93 e2 01 	sts	0x01E2, r24
					  xGrade=xNozzle;//
    6e6a:	80 91 e6 01 	lds	r24, 0x01E6
    6e6e:	80 93 e5 01 	sts	0x01E5, r24
					  PumpNozzle=xNozzle;
    6e72:	80 93 e3 01 	sts	0x01E3, r24
					  xNozzle++;
    6e76:	8f 5f       	subi	r24, 0xFF	; 255
    6e78:	80 93 e6 01 	sts	0x01E6, r24
					  stGenerateReport=grCreateReportTotalizer;
    6e7c:	88 e0       	ldi	r24, 0x08	; 8
    6e7e:	7e c7       	rjmp	.+3836   	; 0x7d7c <systemGenerateReport+0x145e>
				  }
				  else{sprintf_P(strProduct,PSTR("N/A"));			  
    6e80:	00 d0       	rcall	.+0      	; 0x6e82 <systemGenerateReport+0x564>
    6e82:	00 d0       	rcall	.+0      	; 0x6e84 <systemGenerateReport+0x566>
    6e84:	ad b7       	in	r26, 0x3d	; 61
    6e86:	be b7       	in	r27, 0x3e	; 62
    6e88:	12 96       	adiw	r26, 0x02	; 2
    6e8a:	bc 92       	st	X, r11
    6e8c:	ae 92       	st	-X, r10
    6e8e:	11 97       	sbiw	r26, 0x01	; 1
    6e90:	83 e4       	ldi	r24, 0x43	; 67
    6e92:	96 e0       	ldi	r25, 0x06	; 6
    6e94:	14 96       	adiw	r26, 0x04	; 4
    6e96:	9c 93       	st	X, r25
    6e98:	8e 93       	st	-X, r24
    6e9a:	13 97       	sbiw	r26, 0x03	; 3
    6e9c:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
					   xNozzle++;
    6ea0:	80 91 e6 01 	lds	r24, 0x01E6
    6ea4:	8f 5f       	subi	r24, 0xFF	; 255
    6ea6:	80 93 e6 01 	sts	0x01E6, r24
					   if (xNozzle>6)stGenerateReport=grNextPump;
    6eaa:	0f 90       	pop	r0
    6eac:	0f 90       	pop	r0
    6eae:	0f 90       	pop	r0
    6eb0:	0f 90       	pop	r0
    6eb2:	87 30       	cpi	r24, 0x07	; 7
    6eb4:	08 f4       	brcc	.+2      	; 0x6eb8 <systemGenerateReport+0x59a>
    6eb6:	6a c7       	rjmp	.+3796   	; 0x7d8c <systemGenerateReport+0x146e>
					  }
				}else stGenerateReport=grNextPump;
    6eb8:	87 e0       	ldi	r24, 0x07	; 7
    6eba:	60 c7       	rjmp	.+3776   	; 0x7d7c <systemGenerateReport+0x145e>
			  }
	      break;
     case grNextPump:
	      xNozzle=1;
    6ebc:	81 e0       	ldi	r24, 0x01	; 1
    6ebe:	80 93 e6 01 	sts	0x01E6, r24
	      xPump++;
    6ec2:	80 91 e7 01 	lds	r24, 0x01E7
    6ec6:	8f 5f       	subi	r24, 0xFF	; 255
    6ec8:	80 93 e7 01 	sts	0x01E7, r24
	      if (xPump>8)stGenerateReport=grCreateReportFooter;
    6ecc:	89 30       	cpi	r24, 0x09	; 9
    6ece:	08 f4       	brcc	.+2      	; 0x6ed2 <systemGenerateReport+0x5b4>
    6ed0:	f9 c3       	rjmp	.+2034   	; 0x76c4 <systemGenerateReport+0xda6>
    6ed2:	8a e0       	ldi	r24, 0x0A	; 10
    6ed4:	53 c7       	rjmp	.+3750   	; 0x7d7c <systemGenerateReport+0x145e>
		  else stGenerateReport=grGenerateReportData;
	      break;
     case grCreateReportTotalizer:

          RepPos=0;
    6ed6:	10 92 d7 01 	sts	0x01D7, r1
    6eda:	10 92 d6 01 	sts	0x01D6, r1
    6ede:	ec ee       	ldi	r30, 0xEC	; 236
    6ee0:	f3 e0       	ldi	r31, 0x03	; 3
}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
	     strMemory[i]=data;
    6ee2:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    6ee4:	b5 e0       	ldi	r27, 0x05	; 5
    6ee6:	ed 37       	cpi	r30, 0x7D	; 125
    6ee8:	fb 07       	cpc	r31, r27
    6eea:	d9 f7       	brne	.-10     	; 0x6ee2 <systemGenerateReport+0x5c4>
    6eec:	fe 01       	movw	r30, r28
    6eee:	eb 55       	subi	r30, 0x5B	; 91
    6ef0:	ff 4f       	sbci	r31, 0xFF	; 255
	     strMemory[i]=data;
    6ef2:	ce 01       	movw	r24, r28
    6ef4:	8b 50       	subi	r24, 0x0B	; 11
    6ef6:	9f 4f       	sbci	r25, 0xFF	; 255
    6ef8:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    6efa:	e8 17       	cp	r30, r24
    6efc:	f9 07       	cpc	r31, r25
    6efe:	e1 f7       	brne	.-8      	; 0x6ef8 <systemGenerateReport+0x5da>
    6f00:	ed e2       	ldi	r30, 0x2D	; 45
    6f02:	fc e0       	ldi	r31, 0x0C	; 12
	     strMemory[i]=data;
    6f04:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    6f06:	8c e0       	ldi	r24, 0x0C	; 12
    6f08:	ec 33       	cpi	r30, 0x3C	; 60
    6f0a:	f8 07       	cpc	r31, r24
    6f0c:	d9 f7       	brne	.-10     	; 0x6f04 <systemGenerateReport+0x5e6>
    6f0e:	e5 e0       	ldi	r30, 0x05	; 5
    6f10:	f9 e0       	ldi	r31, 0x09	; 9
	     strMemory[i]=data;
    6f12:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    6f14:	99 e0       	ldi	r25, 0x09	; 9
    6f16:	e4 31       	cpi	r30, 0x14	; 20
    6f18:	f9 07       	cpc	r31, r25
    6f1a:	d9 f7       	brne	.-10     	; 0x6f12 <systemGenerateReport+0x5f4>
    6f1c:	fe 01       	movw	r30, r28
    6f1e:	79 96       	adiw	r30, 0x19	; 25
	     strMemory[i]=data;
    6f20:	ce 01       	movw	r24, r28
    6f22:	88 96       	adiw	r24, 0x28	; 40
    6f24:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    6f26:	e8 17       	cp	r30, r24
    6f28:	f9 07       	cpc	r31, r25
    6f2a:	e1 f7       	brne	.-8      	; 0x6f24 <systemGenerateReport+0x606>
	     strMemory[i]=data;
    6f2c:	ce 01       	movw	r24, r28
    6f2e:	c7 96       	adiw	r24, 0x37	; 55
    6f30:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    6f32:	e8 17       	cp	r30, r24
    6f34:	f9 07       	cpc	r31, r25
    6f36:	e1 f7       	brne	.-8      	; 0x6f30 <systemGenerateReport+0x612>
	     strMemory[i]=data;
    6f38:	cf 01       	movw	r24, r30
    6f3a:	0f 96       	adiw	r24, 0x0f	; 15
    6f3c:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    6f3e:	e8 17       	cp	r30, r24
    6f40:	f9 07       	cpc	r31, r25
    6f42:	e1 f7       	brne	.-8      	; 0x6f3c <systemGenerateReport+0x61e>
    6f44:	fe 01       	movw	r30, r28
    6f46:	ea 5b       	subi	r30, 0xBA	; 186
    6f48:	ff 4f       	sbci	r31, 0xFF	; 255
	     strMemory[i]=data;
    6f4a:	cf 01       	movw	r24, r30
    6f4c:	ee 2e       	mov	r14, r30
    6f4e:	d9 2e       	mov	r13, r25
    6f50:	0f 96       	adiw	r24, 0x0f	; 15
    6f52:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    6f54:	e8 17       	cp	r30, r24
    6f56:	f9 07       	cpc	r31, r25
    6f58:	e1 f7       	brne	.-8      	; 0x6f52 <systemGenerateReport+0x634>
		  FillChar(strLastMoney,sizeof(strLastMoney),0);

		  FillChar(strCurrentVolume,sizeof(strCurrentVolume),0);
		  FillChar(strCurrentMoney,sizeof(strCurrentMoney),0);

          FIPAddr=GetFIPAddr(PumpNum); 
    6f5a:	80 91 e4 01 	lds	r24, 0x01E4
    6f5e:	0e 94 0a 20 	call	0x4014	; 0x4014 <GetFIPAddr>
		  if (FIPAddr>0){
    6f62:	88 23       	and	r24, r24
    6f64:	49 f1       	breq	.+82     	; 0x6fb8 <systemGenerateReport+0x69a>
		      FIPAddr=FIPAddr-1;		  
    6f66:	f8 2e       	mov	r15, r24
    6f68:	fa 94       	dec	r15
			  GetTotalizerData(TVOLUME,TOTALIZER_LAST,FIPAddr,PumpNozzle,strLastVolume);
    6f6a:	80 e0       	ldi	r24, 0x00	; 0
    6f6c:	60 e0       	ldi	r22, 0x00	; 0
    6f6e:	4f 2d       	mov	r20, r15
    6f70:	20 91 e3 01 	lds	r18, 0x01E3
    6f74:	8e 01       	movw	r16, r28
    6f76:	07 5e       	subi	r16, 0xE7	; 231
    6f78:	1f 4f       	sbci	r17, 0xFF	; 255
    6f7a:	0e 94 c1 20 	call	0x4182	; 0x4182 <GetTotalizerData>
			  GetTotalizerData(TMONEY,TOTALIZER_LAST,FIPAddr,PumpNozzle,strLastMoney);
    6f7e:	81 e0       	ldi	r24, 0x01	; 1
    6f80:	60 e0       	ldi	r22, 0x00	; 0
    6f82:	4f 2d       	mov	r20, r15
    6f84:	20 91 e3 01 	lds	r18, 0x01E3
    6f88:	8e 01       	movw	r16, r28
    6f8a:	08 5d       	subi	r16, 0xD8	; 216
    6f8c:	1f 4f       	sbci	r17, 0xFF	; 255
    6f8e:	0e 94 c1 20 	call	0x4182	; 0x4182 <GetTotalizerData>

			  GetTotalizerData(TVOLUME,TOTALIZER_NOW,FIPAddr,PumpNozzle,strCurrentVolume);
    6f92:	80 e0       	ldi	r24, 0x00	; 0
    6f94:	61 e0       	ldi	r22, 0x01	; 1
    6f96:	4f 2d       	mov	r20, r15
    6f98:	20 91 e3 01 	lds	r18, 0x01E3
    6f9c:	8e 01       	movw	r16, r28
    6f9e:	09 5c       	subi	r16, 0xC9	; 201
    6fa0:	1f 4f       	sbci	r17, 0xFF	; 255
    6fa2:	0e 94 c1 20 	call	0x4182	; 0x4182 <GetTotalizerData>
			  GetTotalizerData(TMONEY,TOTALIZER_NOW,FIPAddr,PumpNozzle,strCurrentMoney);
    6fa6:	81 e0       	ldi	r24, 0x01	; 1
    6fa8:	61 e0       	ldi	r22, 0x01	; 1
    6faa:	4f 2d       	mov	r20, r15
    6fac:	20 91 e3 01 	lds	r18, 0x01E3
    6fb0:	0e 2d       	mov	r16, r14
    6fb2:	1d 2d       	mov	r17, r13
    6fb4:	0e 94 c1 20 	call	0x4182	; 0x4182 <GetTotalizerData>
		  }

		  StrCalc(TMINUS,strCurrentVolume,strLastVolume,strDeltaVolume);
    6fb8:	80 e0       	ldi	r24, 0x00	; 0
    6fba:	be 01       	movw	r22, r28
    6fbc:	69 5c       	subi	r22, 0xC9	; 201
    6fbe:	7f 4f       	sbci	r23, 0xFF	; 255
    6fc0:	ae 01       	movw	r20, r28
    6fc2:	47 5e       	subi	r20, 0xE7	; 231
    6fc4:	5f 4f       	sbci	r21, 0xFF	; 255
    6fc6:	25 e0       	ldi	r18, 0x05	; 5
    6fc8:	39 e0       	ldi	r19, 0x09	; 9
    6fca:	0e 94 89 29 	call	0x5312	; 0x5312 <StrCalc>

		  if (IsMinus(strDeltaVolume)==True)
    6fce:	85 e0       	ldi	r24, 0x05	; 5
    6fd0:	99 e0       	ldi	r25, 0x09	; 9
    6fd2:	0e 94 8c 23 	call	0x4718	; 0x4718 <IsMinus>
    6fd6:	81 30       	cpi	r24, 0x01	; 1
    6fd8:	21 f4       	brne	.+8      	; 0x6fe2 <systemGenerateReport+0x6c4>
		      NormalizeOverflow(strDeltaVolume);
    6fda:	85 e0       	ldi	r24, 0x05	; 5
    6fdc:	99 e0       	ldi	r25, 0x09	; 9
    6fde:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <NormalizeOverflow>

		  //Calculate Wayne Estimated Total Money
		  if (eeprom_read_byte(&DefDispenserBrand)==ST_WAYNE_DART){
    6fe2:	88 e3       	ldi	r24, 0x38	; 56
    6fe4:	91 e0       	ldi	r25, 0x01	; 1
    6fe6:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
    6fea:	82 30       	cpi	r24, 0x02	; 2
    6fec:	79 f4       	brne	.+30     	; 0x700c <systemGenerateReport+0x6ee>
              GetProductPrice(sPrice,PumpNum,PumpNozzle);//Money = Price x Volume
    6fee:	8e 01       	movw	r16, r28
    6ff0:	01 5f       	subi	r16, 0xF1	; 241
    6ff2:	1f 4f       	sbci	r17, 0xFF	; 255
    6ff4:	c8 01       	movw	r24, r16
    6ff6:	60 91 e4 01 	lds	r22, 0x01E4
    6ffa:	40 91 e3 01 	lds	r20, 0x01E3
    6ffe:	0e 94 70 24 	call	0x48e0	; 0x48e0 <GetProductPrice>
			  StrCalc(TMULTIPLY,sPrice,strDeltaVolume,strDeltaMoney);
    7002:	82 e0       	ldi	r24, 0x02	; 2
    7004:	b8 01       	movw	r22, r16
    7006:	45 e0       	ldi	r20, 0x05	; 5
    7008:	59 e0       	ldi	r21, 0x09	; 9
    700a:	07 c0       	rjmp	.+14     	; 0x701a <systemGenerateReport+0x6fc>
			  
		  }else StrCalc(TMINUS,strCurrentMoney,strLastMoney,strDeltaMoney);
    700c:	80 e0       	ldi	r24, 0x00	; 0
    700e:	be 01       	movw	r22, r28
    7010:	6a 5b       	subi	r22, 0xBA	; 186
    7012:	7f 4f       	sbci	r23, 0xFF	; 255
    7014:	ae 01       	movw	r20, r28
    7016:	48 5d       	subi	r20, 0xD8	; 216
    7018:	5f 4f       	sbci	r21, 0xFF	; 255
    701a:	2d e2       	ldi	r18, 0x2D	; 45
    701c:	3c e0       	ldi	r19, 0x0C	; 12
    701e:	0e 94 89 29 	call	0x5312	; 0x5312 <StrCalc>

		  if (IsMinus(strDeltaMoney)==True)
    7022:	8d e2       	ldi	r24, 0x2D	; 45
    7024:	9c e0       	ldi	r25, 0x0C	; 12
    7026:	0e 94 8c 23 	call	0x4718	; 0x4718 <IsMinus>
    702a:	81 30       	cpi	r24, 0x01	; 1
    702c:	21 f4       	brne	.+8      	; 0x7036 <systemGenerateReport+0x718>
		      NormalizeOverflow(strDeltaMoney);
    702e:	8d e2       	ldi	r24, 0x2D	; 45
    7030:	9c e0       	ldi	r25, 0x0C	; 12
    7032:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <NormalizeOverflow>

		  AddList(GradeUsed,GradeList);
    7036:	80 91 e2 01 	lds	r24, 0x01E2
    703a:	68 ed       	ldi	r22, 0xD8	; 216
    703c:	71 e0       	ldi	r23, 0x01	; 1
    703e:	0e 94 95 22 	call	0x452a	; 0x452a <AddList>
		  
		  StrCalc(TPLUS,strTotalVolume,strDeltaVolume,strTotalVolume);
    7042:	81 e0       	ldi	r24, 0x01	; 1
    7044:	67 ef       	ldi	r22, 0xF7	; 247
    7046:	77 e0       	ldi	r23, 0x07	; 7
    7048:	45 e0       	ldi	r20, 0x05	; 5
    704a:	59 e0       	ldi	r21, 0x09	; 9
    704c:	9b 01       	movw	r18, r22
    704e:	0e 94 89 29 	call	0x5312	; 0x5312 <StrCalc>
		  StrCalc(TPLUS,strTotalMoney,strDeltaMoney,strTotalMoney);
    7052:	81 e0       	ldi	r24, 0x01	; 1
    7054:	68 ea       	ldi	r22, 0xA8	; 168
    7056:	78 e0       	ldi	r23, 0x08	; 8
    7058:	4d e2       	ldi	r20, 0x2D	; 45
    705a:	5c e0       	ldi	r21, 0x0C	; 12
    705c:	9b 01       	movw	r18, r22
    705e:	0e 94 89 29 	call	0x5312	; 0x5312 <StrCalc>


		  RemZeroLead(strDeltaMoney);
    7062:	8d e2       	ldi	r24, 0x2D	; 45
    7064:	9c e0       	ldi	r25, 0x0C	; 12
    7066:	0e 94 51 25 	call	0x4aa2	; 0x4aa2 <RemZeroLead>
		  RemZeroLead(strCurrentMoney);
    706a:	96 e4       	ldi	r25, 0x46	; 70
    706c:	c9 2e       	mov	r12, r25
    706e:	d1 2c       	mov	r13, r1
    7070:	cc 0e       	add	r12, r28
    7072:	dd 1e       	adc	r13, r29
    7074:	c6 01       	movw	r24, r12
    7076:	0e 94 51 25 	call	0x4aa2	; 0x4aa2 <RemZeroLead>
		  RemZeroLead(strLastMoney);
    707a:	88 e2       	ldi	r24, 0x28	; 40
    707c:	e8 2e       	mov	r14, r24
    707e:	f1 2c       	mov	r15, r1
    7080:	ec 0e       	add	r14, r28
    7082:	fd 1e       	adc	r15, r29
    7084:	c7 01       	movw	r24, r14
    7086:	0e 94 51 25 	call	0x4aa2	; 0x4aa2 <RemZeroLead>

          RemZeroLead(strDeltaVolume);
    708a:	85 e0       	ldi	r24, 0x05	; 5
    708c:	99 e0       	ldi	r25, 0x09	; 9
    708e:	0e 94 51 25 	call	0x4aa2	; 0x4aa2 <RemZeroLead>
          RemZeroLead(strCurrentVolume);
    7092:	07 e3       	ldi	r16, 0x37	; 55
    7094:	a0 2e       	mov	r10, r16
    7096:	b1 2c       	mov	r11, r1
    7098:	ac 0e       	add	r10, r28
    709a:	bd 1e       	adc	r11, r29
    709c:	c5 01       	movw	r24, r10
    709e:	0e 94 51 25 	call	0x4aa2	; 0x4aa2 <RemZeroLead>
          RemZeroLead(strLastVolume);
    70a2:	8e 01       	movw	r16, r28
    70a4:	07 5e       	subi	r16, 0xE7	; 231
    70a6:	1f 4f       	sbci	r17, 0xFF	; 255
    70a8:	c8 01       	movw	r24, r16
    70aa:	0e 94 51 25 	call	0x4aa2	; 0x4aa2 <RemZeroLead>

		  FormatTotalizerMoney(strDeltaMoney);
    70ae:	8d e2       	ldi	r24, 0x2D	; 45
    70b0:	9c e0       	ldi	r25, 0x0C	; 12
    70b2:	0e 94 57 34 	call	0x68ae	; 0x68ae <FormatTotalizerMoney>
		  FormatTotalizerMoney(strCurrentMoney);
    70b6:	c6 01       	movw	r24, r12
    70b8:	0e 94 57 34 	call	0x68ae	; 0x68ae <FormatTotalizerMoney>
		  FormatTotalizerMoney(strLastMoney);
    70bc:	c7 01       	movw	r24, r14
    70be:	0e 94 57 34 	call	0x68ae	; 0x68ae <FormatTotalizerMoney>

		  FormatTotalizerVolume(strDeltaVolume);
    70c2:	85 e0       	ldi	r24, 0x05	; 5
    70c4:	99 e0       	ldi	r25, 0x09	; 9
    70c6:	0e 94 49 34 	call	0x6892	; 0x6892 <FormatTotalizerVolume>
		  FormatTotalizerVolume(strLastVolume);
    70ca:	c8 01       	movw	r24, r16
    70cc:	0e 94 49 34 	call	0x6892	; 0x6892 <FormatTotalizerVolume>
		  FormatTotalizerVolume(strCurrentVolume); 
    70d0:	c5 01       	movw	r24, r10
    70d2:	0e 94 49 34 	call	0x6892	; 0x6892 <FormatTotalizerVolume>

          FormatCurrency(strDeltaMoney);
    70d6:	8d e2       	ldi	r24, 0x2D	; 45
    70d8:	9c e0       	ldi	r25, 0x0C	; 12
    70da:	0e 94 1f 33 	call	0x663e	; 0x663e <FormatCurrency>
		  FormatCurrency(strCurrentMoney);
    70de:	c6 01       	movw	r24, r12
    70e0:	0e 94 1f 33 	call	0x663e	; 0x663e <FormatCurrency>
		  FormatCurrency(strLastMoney);
    70e4:	c7 01       	movw	r24, r14
    70e6:	0e 94 1f 33 	call	0x663e	; 0x663e <FormatCurrency>

		  FormatCurrency(strDeltaVolume);		  
    70ea:	85 e0       	ldi	r24, 0x05	; 5
    70ec:	99 e0       	ldi	r25, 0x09	; 9
    70ee:	0e 94 1f 33 	call	0x663e	; 0x663e <FormatCurrency>
		  FormatCurrency(strLastVolume);
    70f2:	c8 01       	movw	r24, r16
    70f4:	0e 94 1f 33 	call	0x663e	; 0x663e <FormatCurrency>
          FormatCurrency(strCurrentVolume);
    70f8:	c5 01       	movw	r24, r10
    70fa:	0e 94 1f 33 	call	0x663e	; 0x663e <FormatCurrency>


          InserBorder(btTopLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btTopRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);          
    70fe:	81 e0       	ldi	r24, 0x01	; 1
    7100:	6c ee       	ldi	r22, 0xEC	; 236
    7102:	73 e0       	ldi	r23, 0x03	; 3
    7104:	41 e0       	ldi	r20, 0x01	; 1
    7106:	26 ed       	ldi	r18, 0xD6	; 214
    7108:	31 e0       	ldi	r19, 0x01	; 1
    710a:	0e 94 96 1a 	call	0x352c	; 0x352c <InserBorder>
    710e:	8b e0       	ldi	r24, 0x0B	; 11
    7110:	6c ee       	ldi	r22, 0xEC	; 236
    7112:	73 e0       	ldi	r23, 0x03	; 3
    7114:	4a e2       	ldi	r20, 0x2A	; 42
    7116:	26 ed       	ldi	r18, 0xD6	; 214
    7118:	31 e0       	ldi	r19, 0x01	; 1
    711a:	0e 94 96 1a 	call	0x352c	; 0x352c <InserBorder>
    711e:	83 e0       	ldi	r24, 0x03	; 3
    7120:	6c ee       	ldi	r22, 0xEC	; 236
    7122:	73 e0       	ldi	r23, 0x03	; 3
    7124:	41 e0       	ldi	r20, 0x01	; 1
    7126:	26 ed       	ldi	r18, 0xD6	; 214
    7128:	31 e0       	ldi	r19, 0x01	; 1
    712a:	0e 94 96 1a 	call	0x352c	; 0x352c <InserBorder>
    712e:	8c e0       	ldi	r24, 0x0C	; 12
    7130:	6c ee       	ldi	r22, 0xEC	; 236
    7132:	73 e0       	ldi	r23, 0x03	; 3
    7134:	41 e0       	ldi	r20, 0x01	; 1
    7136:	26 ed       	ldi	r18, 0xD6	; 214
    7138:	31 e0       	ldi	r19, 0x01	; 1
    713a:	0e 94 96 1a 	call	0x352c	; 0x352c <InserBorder>
          if (eeprom_read_byte(&DefDispenserBrand)==ST_WAYNE_DART){
    713e:	88 e3       	ldi	r24, 0x38	; 56
    7140:	91 e0       	ldi	r25, 0x01	; 1
    7142:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
    7146:	15 ea       	ldi	r17, 0xA5	; 165
    7148:	c1 2e       	mov	r12, r17
    714a:	d1 2c       	mov	r13, r1
    714c:	cc 0e       	add	r12, r28
    714e:	dd 1e       	adc	r13, r29
    7150:	be e5       	ldi	r27, 0x5E	; 94
    7152:	ab 2e       	mov	r10, r27
    7154:	b7 e0       	ldi	r27, 0x07	; 7
    7156:	bb 2e       	mov	r11, r27
    7158:	82 30       	cpi	r24, 0x02	; 2
    715a:	09 f0       	breq	.+2      	; 0x715e <systemGenerateReport+0x840>
    715c:	6a c0       	rjmp	.+212    	; 0x7232 <systemGenerateReport+0x914>
		      GetProductPrice(sPrice,PumpNum,PumpNozzle);
    715e:	af e0       	ldi	r26, 0x0F	; 15
    7160:	ea 2e       	mov	r14, r26
    7162:	f1 2c       	mov	r15, r1
    7164:	ec 0e       	add	r14, r28
    7166:	fd 1e       	adc	r15, r29
    7168:	c7 01       	movw	r24, r14
    716a:	60 91 e4 01 	lds	r22, 0x01E4
    716e:	40 91 e3 01 	lds	r20, 0x01E3
    7172:	0e 94 70 24 	call	0x48e0	; 0x48e0 <GetProductPrice>
			  sprintf_P(strProductPrice,PSTR("Harga: Rp.%s"),sPrice);
    7176:	00 d0       	rcall	.+0      	; 0x7178 <systemGenerateReport+0x85a>
    7178:	00 d0       	rcall	.+0      	; 0x717a <systemGenerateReport+0x85c>
    717a:	00 d0       	rcall	.+0      	; 0x717c <systemGenerateReport+0x85e>
    717c:	ed b7       	in	r30, 0x3d	; 61
    717e:	fe b7       	in	r31, 0x3e	; 62
    7180:	31 96       	adiw	r30, 0x01	; 1
    7182:	8e 01       	movw	r16, r28
    7184:	0f 56       	subi	r16, 0x6F	; 111
    7186:	1f 4f       	sbci	r17, 0xFF	; 255
    7188:	ad b7       	in	r26, 0x3d	; 61
    718a:	be b7       	in	r27, 0x3e	; 62
    718c:	12 96       	adiw	r26, 0x02	; 2
    718e:	1c 93       	st	X, r17
    7190:	0e 93       	st	-X, r16
    7192:	11 97       	sbiw	r26, 0x01	; 1
    7194:	86 e3       	ldi	r24, 0x36	; 54
    7196:	96 e0       	ldi	r25, 0x06	; 6
    7198:	93 83       	std	Z+3, r25	; 0x03
    719a:	82 83       	std	Z+2, r24	; 0x02
    719c:	f5 82       	std	Z+5, r15	; 0x05
    719e:	e4 82       	std	Z+4, r14	; 0x04
    71a0:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>

		      GetTabSpace(((17+10-strlen(strProduct))-strlen(strProductPrice)),strTabSpace2);
    71a4:	d5 01       	movw	r26, r10
    71a6:	0d 90       	ld	r0, X+
    71a8:	00 20       	and	r0, r0
    71aa:	e9 f7       	brne	.-6      	; 0x71a6 <systemGenerateReport+0x888>
    71ac:	11 97       	sbiw	r26, 0x01	; 1
    71ae:	aa 19       	sub	r26, r10
    71b0:	bb 09       	sbc	r27, r11
    71b2:	f8 01       	movw	r30, r16
    71b4:	01 90       	ld	r0, Z+
    71b6:	00 20       	and	r0, r0
    71b8:	e9 f7       	brne	.-6      	; 0x71b4 <systemGenerateReport+0x896>
    71ba:	31 97       	sbiw	r30, 0x01	; 1
    71bc:	8d b7       	in	r24, 0x3d	; 61
    71be:	9e b7       	in	r25, 0x3e	; 62
    71c0:	06 96       	adiw	r24, 0x06	; 6
    71c2:	0f b6       	in	r0, 0x3f	; 63
    71c4:	f8 94       	cli
    71c6:	9e bf       	out	0x3e, r25	; 62
    71c8:	0f be       	out	0x3f, r0	; 63
    71ca:	8d bf       	out	0x3d, r24	; 61
    71cc:	80 2f       	mov	r24, r16
    71ce:	8e 1b       	sub	r24, r30
    71d0:	8a 1b       	sub	r24, r26
    71d2:	fd e7       	ldi	r31, 0x7D	; 125
    71d4:	ef 2e       	mov	r14, r31
    71d6:	f1 2c       	mov	r15, r1
    71d8:	ec 0e       	add	r14, r28
    71da:	fd 1e       	adc	r15, r29
    71dc:	85 5e       	subi	r24, 0xE5	; 229
    71de:	b7 01       	movw	r22, r14
    71e0:	0e 94 46 1a 	call	0x348c	; 0x348c <GetTabSpace>
		      sprintf_P(strReport,PSTR("P%d.%d - %s %s %s"),PumpNum,PumpNozzle,strProduct,strTabSpace2,strProductPrice);
    71e4:	ad b7       	in	r26, 0x3d	; 61
    71e6:	be b7       	in	r27, 0x3e	; 62
    71e8:	1e 97       	sbiw	r26, 0x0e	; 14
    71ea:	0f b6       	in	r0, 0x3f	; 63
    71ec:	f8 94       	cli
    71ee:	be bf       	out	0x3e, r27	; 62
    71f0:	0f be       	out	0x3f, r0	; 63
    71f2:	ad bf       	out	0x3d, r26	; 61
    71f4:	ed b7       	in	r30, 0x3d	; 61
    71f6:	fe b7       	in	r31, 0x3e	; 62
    71f8:	31 96       	adiw	r30, 0x01	; 1
    71fa:	12 96       	adiw	r26, 0x02	; 2
    71fc:	dc 92       	st	X, r13
    71fe:	ce 92       	st	-X, r12
    7200:	11 97       	sbiw	r26, 0x01	; 1
    7202:	84 e2       	ldi	r24, 0x24	; 36
    7204:	96 e0       	ldi	r25, 0x06	; 6
    7206:	93 83       	std	Z+3, r25	; 0x03
    7208:	82 83       	std	Z+2, r24	; 0x02
    720a:	80 91 e4 01 	lds	r24, 0x01E4
    720e:	84 83       	std	Z+4, r24	; 0x04
    7210:	15 82       	std	Z+5, r1	; 0x05
    7212:	80 91 e3 01 	lds	r24, 0x01E3
    7216:	86 83       	std	Z+6, r24	; 0x06
    7218:	17 82       	std	Z+7, r1	; 0x07
    721a:	b1 86       	std	Z+9, r11	; 0x09
    721c:	a0 86       	std	Z+8, r10	; 0x08
    721e:	f3 86       	std	Z+11, r15	; 0x0b
    7220:	e2 86       	std	Z+10, r14	; 0x0a
    7222:	15 87       	std	Z+13, r17	; 0x0d
    7224:	04 87       	std	Z+12, r16	; 0x0c
    7226:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
    722a:	ed b7       	in	r30, 0x3d	; 61
    722c:	fe b7       	in	r31, 0x3e	; 62
    722e:	3e 96       	adiw	r30, 0x0e	; 14
    7230:	24 c0       	rjmp	.+72     	; 0x727a <systemGenerateReport+0x95c>
		  }
		  else sprintf_P(strReport,PSTR("P%d.%d - %s "),PumpNum,PumpNozzle,strProduct);
    7232:	8d b7       	in	r24, 0x3d	; 61
    7234:	9e b7       	in	r25, 0x3e	; 62
    7236:	0a 97       	sbiw	r24, 0x0a	; 10
    7238:	0f b6       	in	r0, 0x3f	; 63
    723a:	f8 94       	cli
    723c:	9e bf       	out	0x3e, r25	; 62
    723e:	0f be       	out	0x3f, r0	; 63
    7240:	8d bf       	out	0x3d, r24	; 61
    7242:	ed b7       	in	r30, 0x3d	; 61
    7244:	fe b7       	in	r31, 0x3e	; 62
    7246:	31 96       	adiw	r30, 0x01	; 1
    7248:	ad b7       	in	r26, 0x3d	; 61
    724a:	be b7       	in	r27, 0x3e	; 62
    724c:	12 96       	adiw	r26, 0x02	; 2
    724e:	dc 92       	st	X, r13
    7250:	ce 92       	st	-X, r12
    7252:	11 97       	sbiw	r26, 0x01	; 1
    7254:	87 e1       	ldi	r24, 0x17	; 23
    7256:	96 e0       	ldi	r25, 0x06	; 6
    7258:	93 83       	std	Z+3, r25	; 0x03
    725a:	82 83       	std	Z+2, r24	; 0x02
    725c:	80 91 e4 01 	lds	r24, 0x01E4
    7260:	84 83       	std	Z+4, r24	; 0x04
    7262:	15 82       	std	Z+5, r1	; 0x05
    7264:	80 91 e3 01 	lds	r24, 0x01E3
    7268:	86 83       	std	Z+6, r24	; 0x06
    726a:	17 82       	std	Z+7, r1	; 0x07
    726c:	b1 86       	std	Z+9, r11	; 0x09
    726e:	a0 86       	std	Z+8, r10	; 0x08
    7270:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
    7274:	ed b7       	in	r30, 0x3d	; 61
    7276:	fe b7       	in	r31, 0x3e	; 62
    7278:	3a 96       	adiw	r30, 0x0a	; 10
    727a:	0f b6       	in	r0, 0x3f	; 63
    727c:	f8 94       	cli
    727e:	fe bf       	out	0x3e, r31	; 62
    7280:	0f be       	out	0x3f, r0	; 63
    7282:	ed bf       	out	0x3d, r30	; 61
		  CreateReport(strReport,PrintBuffer,&RepPos);
    7284:	e5 ea       	ldi	r30, 0xA5	; 165
    7286:	8e 2e       	mov	r8, r30
    7288:	91 2c       	mov	r9, r1
    728a:	8c 0e       	add	r8, r28
    728c:	9d 1e       	adc	r9, r29
    728e:	c4 01       	movw	r24, r8
    7290:	6c ee       	ldi	r22, 0xEC	; 236
    7292:	73 e0       	ldi	r23, 0x03	; 3
    7294:	46 ed       	ldi	r20, 0xD6	; 214
    7296:	51 e0       	ldi	r21, 0x01	; 1
    7298:	0e 94 27 22 	call	0x444e	; 0x444e <CreateReport>
          InserBorder(btMiddleLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btMiddleRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);          
    729c:	84 e0       	ldi	r24, 0x04	; 4
    729e:	6c ee       	ldi	r22, 0xEC	; 236
    72a0:	73 e0       	ldi	r23, 0x03	; 3
    72a2:	41 e0       	ldi	r20, 0x01	; 1
    72a4:	26 ed       	ldi	r18, 0xD6	; 214
    72a6:	31 e0       	ldi	r19, 0x01	; 1
    72a8:	0e 94 96 1a 	call	0x352c	; 0x352c <InserBorder>
    72ac:	8b e0       	ldi	r24, 0x0B	; 11
    72ae:	6c ee       	ldi	r22, 0xEC	; 236
    72b0:	73 e0       	ldi	r23, 0x03	; 3
    72b2:	4a e2       	ldi	r20, 0x2A	; 42
    72b4:	26 ed       	ldi	r18, 0xD6	; 214
    72b6:	31 e0       	ldi	r19, 0x01	; 1
    72b8:	0e 94 96 1a 	call	0x352c	; 0x352c <InserBorder>
    72bc:	86 e0       	ldi	r24, 0x06	; 6
    72be:	6c ee       	ldi	r22, 0xEC	; 236
    72c0:	73 e0       	ldi	r23, 0x03	; 3
    72c2:	41 e0       	ldi	r20, 0x01	; 1
    72c4:	26 ed       	ldi	r18, 0xD6	; 214
    72c6:	31 e0       	ldi	r19, 0x01	; 1
    72c8:	0e 94 96 1a 	call	0x352c	; 0x352c <InserBorder>
    72cc:	8c e0       	ldi	r24, 0x0C	; 12
    72ce:	6c ee       	ldi	r22, 0xEC	; 236
    72d0:	73 e0       	ldi	r23, 0x03	; 3
    72d2:	41 e0       	ldi	r20, 0x01	; 1
    72d4:	26 ed       	ldi	r18, 0xD6	; 214
    72d6:	31 e0       	ldi	r19, 0x01	; 1
    72d8:	0e 94 96 1a 	call	0x352c	; 0x352c <InserBorder>

		  GetTabSpace((17-strlen(strCurrentVolume)),strTabSpace);
    72dc:	77 e3       	ldi	r23, 0x37	; 55
    72de:	e7 2e       	mov	r14, r23
    72e0:	f1 2c       	mov	r15, r1
    72e2:	ec 0e       	add	r14, r28
    72e4:	fd 1e       	adc	r15, r29
    72e6:	f7 01       	movw	r30, r14
    72e8:	01 90       	ld	r0, Z+
    72ea:	00 20       	and	r0, r0
    72ec:	e9 f7       	brne	.-6      	; 0x72e8 <systemGenerateReport+0x9ca>
    72ee:	8e 2d       	mov	r24, r14
    72f0:	8e 1b       	sub	r24, r30
    72f2:	69 e6       	ldi	r22, 0x69	; 105
    72f4:	c6 2e       	mov	r12, r22
    72f6:	d1 2c       	mov	r13, r1
    72f8:	cc 0e       	add	r12, r28
    72fa:	dd 1e       	adc	r13, r29
    72fc:	8e 5e       	subi	r24, 0xEE	; 238
    72fe:	b6 01       	movw	r22, r12
    7300:	0e 94 46 1a 	call	0x348c	; 0x348c <GetTabSpace>
		  GetTabSpace((15-strlen(strCurrentMoney)),strTabSpace2);
    7304:	8e 01       	movw	r16, r28
    7306:	0a 5b       	subi	r16, 0xBA	; 186
    7308:	1f 4f       	sbci	r17, 0xFF	; 255
    730a:	f8 01       	movw	r30, r16
    730c:	01 90       	ld	r0, Z+
    730e:	00 20       	and	r0, r0
    7310:	e9 f7       	brne	.-6      	; 0x730c <systemGenerateReport+0x9ee>
    7312:	80 2f       	mov	r24, r16
    7314:	8e 1b       	sub	r24, r30
    7316:	5d e7       	ldi	r21, 0x7D	; 125
    7318:	a5 2e       	mov	r10, r21
    731a:	b1 2c       	mov	r11, r1
    731c:	ac 0e       	add	r10, r28
    731e:	bd 1e       	adc	r11, r29
    7320:	80 5f       	subi	r24, 0xF0	; 240
    7322:	b5 01       	movw	r22, r10
    7324:	0e 94 46 1a 	call	0x348c	; 0x348c <GetTabSpace>
		  //PrintMoney
		  if (eeprom_read_byte(&DefPrintMoney)==True) sprintf_P(strReport,PSTR("Akhir:%s%s%s%s"),strTabSpace,strCurrentVolume,strTabSpace2,strCurrentMoney);//CreateReport(strReport,PrintBuffer,&RepPos);
    7328:	82 ec       	ldi	r24, 0xC2	; 194
    732a:	93 e0       	ldi	r25, 0x03	; 3
    732c:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
    7330:	81 30       	cpi	r24, 0x01	; 1
    7332:	19 f5       	brne	.+70     	; 0x737a <systemGenerateReport+0xa5c>
    7334:	8d b7       	in	r24, 0x3d	; 61
    7336:	9e b7       	in	r25, 0x3e	; 62
    7338:	0c 97       	sbiw	r24, 0x0c	; 12
    733a:	0f b6       	in	r0, 0x3f	; 63
    733c:	f8 94       	cli
    733e:	9e bf       	out	0x3e, r25	; 62
    7340:	0f be       	out	0x3f, r0	; 63
    7342:	8d bf       	out	0x3d, r24	; 61
    7344:	ed b7       	in	r30, 0x3d	; 61
    7346:	fe b7       	in	r31, 0x3e	; 62
    7348:	31 96       	adiw	r30, 0x01	; 1
    734a:	ad b7       	in	r26, 0x3d	; 61
    734c:	be b7       	in	r27, 0x3e	; 62
    734e:	12 96       	adiw	r26, 0x02	; 2
    7350:	9c 92       	st	X, r9
    7352:	8e 92       	st	-X, r8
    7354:	11 97       	sbiw	r26, 0x01	; 1
    7356:	88 e0       	ldi	r24, 0x08	; 8
    7358:	96 e0       	ldi	r25, 0x06	; 6
    735a:	93 83       	std	Z+3, r25	; 0x03
    735c:	82 83       	std	Z+2, r24	; 0x02
    735e:	d5 82       	std	Z+5, r13	; 0x05
    7360:	c4 82       	std	Z+4, r12	; 0x04
    7362:	f7 82       	std	Z+7, r15	; 0x07
    7364:	e6 82       	std	Z+6, r14	; 0x06
    7366:	b1 86       	std	Z+9, r11	; 0x09
    7368:	a0 86       	std	Z+8, r10	; 0x08
    736a:	13 87       	std	Z+11, r17	; 0x0b
    736c:	02 87       	std	Z+10, r16	; 0x0a
    736e:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
    7372:	ed b7       	in	r30, 0x3d	; 61
    7374:	fe b7       	in	r31, 0x3e	; 62
    7376:	3c 96       	adiw	r30, 0x0c	; 12
    7378:	1e c0       	rjmp	.+60     	; 0x73b6 <systemGenerateReport+0xa98>
		  else sprintf_P(strReport,PSTR("Akhir:%s%s"),strTabSpace,strCurrentVolume);
    737a:	8d b7       	in	r24, 0x3d	; 61
    737c:	9e b7       	in	r25, 0x3e	; 62
    737e:	08 97       	sbiw	r24, 0x08	; 8
    7380:	0f b6       	in	r0, 0x3f	; 63
    7382:	f8 94       	cli
    7384:	9e bf       	out	0x3e, r25	; 62
    7386:	0f be       	out	0x3f, r0	; 63
    7388:	8d bf       	out	0x3d, r24	; 61
    738a:	ed b7       	in	r30, 0x3d	; 61
    738c:	fe b7       	in	r31, 0x3e	; 62
    738e:	31 96       	adiw	r30, 0x01	; 1
    7390:	ad b7       	in	r26, 0x3d	; 61
    7392:	be b7       	in	r27, 0x3e	; 62
    7394:	12 96       	adiw	r26, 0x02	; 2
    7396:	9c 92       	st	X, r9
    7398:	8e 92       	st	-X, r8
    739a:	11 97       	sbiw	r26, 0x01	; 1
    739c:	8d ef       	ldi	r24, 0xFD	; 253
    739e:	95 e0       	ldi	r25, 0x05	; 5
    73a0:	93 83       	std	Z+3, r25	; 0x03
    73a2:	82 83       	std	Z+2, r24	; 0x02
    73a4:	d5 82       	std	Z+5, r13	; 0x05
    73a6:	c4 82       	std	Z+4, r12	; 0x04
    73a8:	f7 82       	std	Z+7, r15	; 0x07
    73aa:	e6 82       	std	Z+6, r14	; 0x06
    73ac:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
    73b0:	ed b7       	in	r30, 0x3d	; 61
    73b2:	fe b7       	in	r31, 0x3e	; 62
    73b4:	38 96       	adiw	r30, 0x08	; 8
    73b6:	0f b6       	in	r0, 0x3f	; 63
    73b8:	f8 94       	cli
    73ba:	fe bf       	out	0x3e, r31	; 62
    73bc:	0f be       	out	0x3f, r0	; 63
    73be:	ed bf       	out	0x3d, r30	; 61
		  CreateReport(strReport,PrintBuffer,&RepPos);
    73c0:	45 ea       	ldi	r20, 0xA5	; 165
    73c2:	a4 2e       	mov	r10, r20
    73c4:	b1 2c       	mov	r11, r1
    73c6:	ac 0e       	add	r10, r28
    73c8:	bd 1e       	adc	r11, r29
    73ca:	c5 01       	movw	r24, r10
    73cc:	6c ee       	ldi	r22, 0xEC	; 236
    73ce:	73 e0       	ldi	r23, 0x03	; 3
    73d0:	46 ed       	ldi	r20, 0xD6	; 214
    73d2:	51 e0       	ldi	r21, 0x01	; 1
    73d4:	0e 94 27 22 	call	0x444e	; 0x444e <CreateReport>

		  GetTabSpace((17-strlen(strLastVolume)),strTabSpace);
    73d8:	39 e1       	ldi	r19, 0x19	; 25
    73da:	e3 2e       	mov	r14, r19
    73dc:	f1 2c       	mov	r15, r1
    73de:	ec 0e       	add	r14, r28
    73e0:	fd 1e       	adc	r15, r29
    73e2:	f7 01       	movw	r30, r14
    73e4:	01 90       	ld	r0, Z+
    73e6:	00 20       	and	r0, r0
    73e8:	e9 f7       	brne	.-6      	; 0x73e4 <systemGenerateReport+0xac6>
    73ea:	8e 2d       	mov	r24, r14
    73ec:	8e 1b       	sub	r24, r30
    73ee:	29 e6       	ldi	r18, 0x69	; 105
    73f0:	c2 2e       	mov	r12, r18
    73f2:	d1 2c       	mov	r13, r1
    73f4:	cc 0e       	add	r12, r28
    73f6:	dd 1e       	adc	r13, r29
    73f8:	8e 5e       	subi	r24, 0xEE	; 238
    73fa:	b6 01       	movw	r22, r12
    73fc:	0e 94 46 1a 	call	0x348c	; 0x348c <GetTabSpace>
		  GetTabSpace((15-strlen(strLastMoney)),strTabSpace2);
    7400:	8e 01       	movw	r16, r28
    7402:	08 5d       	subi	r16, 0xD8	; 216
    7404:	1f 4f       	sbci	r17, 0xFF	; 255
    7406:	f8 01       	movw	r30, r16
    7408:	01 90       	ld	r0, Z+
    740a:	00 20       	and	r0, r0
    740c:	e9 f7       	brne	.-6      	; 0x7408 <systemGenerateReport+0xaea>
    740e:	80 2f       	mov	r24, r16
    7410:	8e 1b       	sub	r24, r30
    7412:	9d e7       	ldi	r25, 0x7D	; 125
    7414:	89 2e       	mov	r8, r25
    7416:	91 2c       	mov	r9, r1
    7418:	8c 0e       	add	r8, r28
    741a:	9d 1e       	adc	r9, r29
    741c:	80 5f       	subi	r24, 0xF0	; 240
    741e:	b4 01       	movw	r22, r8
    7420:	0e 94 46 1a 	call	0x348c	; 0x348c <GetTabSpace>
		  //PrintMoney
		  if (eeprom_read_byte(&DefPrintMoney)==True)sprintf_P(strReport,PSTR("Awal :%s%s%s%s"),strTabSpace,strLastVolume,strTabSpace2,strLastMoney);//CreateReport(strReport,PrintBuffer,&RepPos);
    7424:	82 ec       	ldi	r24, 0xC2	; 194
    7426:	93 e0       	ldi	r25, 0x03	; 3
    7428:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
    742c:	81 30       	cpi	r24, 0x01	; 1
    742e:	19 f5       	brne	.+70     	; 0x7476 <systemGenerateReport+0xb58>
    7430:	8d b7       	in	r24, 0x3d	; 61
    7432:	9e b7       	in	r25, 0x3e	; 62
    7434:	0c 97       	sbiw	r24, 0x0c	; 12
    7436:	0f b6       	in	r0, 0x3f	; 63
    7438:	f8 94       	cli
    743a:	9e bf       	out	0x3e, r25	; 62
    743c:	0f be       	out	0x3f, r0	; 63
    743e:	8d bf       	out	0x3d, r24	; 61
    7440:	ed b7       	in	r30, 0x3d	; 61
    7442:	fe b7       	in	r31, 0x3e	; 62
    7444:	31 96       	adiw	r30, 0x01	; 1
    7446:	ad b7       	in	r26, 0x3d	; 61
    7448:	be b7       	in	r27, 0x3e	; 62
    744a:	12 96       	adiw	r26, 0x02	; 2
    744c:	bc 92       	st	X, r11
    744e:	ae 92       	st	-X, r10
    7450:	11 97       	sbiw	r26, 0x01	; 1
    7452:	8e ee       	ldi	r24, 0xEE	; 238
    7454:	95 e0       	ldi	r25, 0x05	; 5
    7456:	93 83       	std	Z+3, r25	; 0x03
    7458:	82 83       	std	Z+2, r24	; 0x02
    745a:	d5 82       	std	Z+5, r13	; 0x05
    745c:	c4 82       	std	Z+4, r12	; 0x04
    745e:	f7 82       	std	Z+7, r15	; 0x07
    7460:	e6 82       	std	Z+6, r14	; 0x06
    7462:	91 86       	std	Z+9, r9	; 0x09
    7464:	80 86       	std	Z+8, r8	; 0x08
    7466:	13 87       	std	Z+11, r17	; 0x0b
    7468:	02 87       	std	Z+10, r16	; 0x0a
    746a:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
    746e:	ed b7       	in	r30, 0x3d	; 61
    7470:	fe b7       	in	r31, 0x3e	; 62
    7472:	3c 96       	adiw	r30, 0x0c	; 12
    7474:	1e c0       	rjmp	.+60     	; 0x74b2 <systemGenerateReport+0xb94>
		  else sprintf_P(strReport,PSTR("Awal :%s%s"),strTabSpace,strLastVolume);
    7476:	8d b7       	in	r24, 0x3d	; 61
    7478:	9e b7       	in	r25, 0x3e	; 62
    747a:	08 97       	sbiw	r24, 0x08	; 8
    747c:	0f b6       	in	r0, 0x3f	; 63
    747e:	f8 94       	cli
    7480:	9e bf       	out	0x3e, r25	; 62
    7482:	0f be       	out	0x3f, r0	; 63
    7484:	8d bf       	out	0x3d, r24	; 61
    7486:	ed b7       	in	r30, 0x3d	; 61
    7488:	fe b7       	in	r31, 0x3e	; 62
    748a:	31 96       	adiw	r30, 0x01	; 1
    748c:	ad b7       	in	r26, 0x3d	; 61
    748e:	be b7       	in	r27, 0x3e	; 62
    7490:	12 96       	adiw	r26, 0x02	; 2
    7492:	bc 92       	st	X, r11
    7494:	ae 92       	st	-X, r10
    7496:	11 97       	sbiw	r26, 0x01	; 1
    7498:	83 ee       	ldi	r24, 0xE3	; 227
    749a:	95 e0       	ldi	r25, 0x05	; 5
    749c:	93 83       	std	Z+3, r25	; 0x03
    749e:	82 83       	std	Z+2, r24	; 0x02
    74a0:	d5 82       	std	Z+5, r13	; 0x05
    74a2:	c4 82       	std	Z+4, r12	; 0x04
    74a4:	f7 82       	std	Z+7, r15	; 0x07
    74a6:	e6 82       	std	Z+6, r14	; 0x06
    74a8:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
    74ac:	ed b7       	in	r30, 0x3d	; 61
    74ae:	fe b7       	in	r31, 0x3e	; 62
    74b0:	38 96       	adiw	r30, 0x08	; 8
    74b2:	0f b6       	in	r0, 0x3f	; 63
    74b4:	f8 94       	cli
    74b6:	fe bf       	out	0x3e, r31	; 62
    74b8:	0f be       	out	0x3f, r0	; 63
    74ba:	ed bf       	out	0x3d, r30	; 61
		  CreateReport(strReport,PrintBuffer,&RepPos);
    74bc:	8e 01       	movw	r16, r28
    74be:	0b 55       	subi	r16, 0x5B	; 91
    74c0:	1f 4f       	sbci	r17, 0xFF	; 255
    74c2:	c8 01       	movw	r24, r16
    74c4:	6c ee       	ldi	r22, 0xEC	; 236
    74c6:	73 e0       	ldi	r23, 0x03	; 3
    74c8:	46 ed       	ldi	r20, 0xD6	; 214
    74ca:	51 e0       	ldi	r21, 0x01	; 1
    74cc:	0e 94 27 22 	call	0x444e	; 0x444e <CreateReport>

		  GetTabSpace(12,strTabSpace);
    74d0:	b9 e6       	ldi	r27, 0x69	; 105
    74d2:	eb 2e       	mov	r14, r27
    74d4:	f1 2c       	mov	r15, r1
    74d6:	ec 0e       	add	r14, r28
    74d8:	fd 1e       	adc	r15, r29
    74da:	8c e0       	ldi	r24, 0x0C	; 12
    74dc:	b7 01       	movw	r22, r14
    74de:	0e 94 46 1a 	call	0x348c	; 0x348c <GetTabSpace>
          //PrintMoney
          if (eeprom_read_byte(&DefPrintMoney)==True)sprintf_P(strReport,PSTR("%s-----------   -------------"),strTabSpace);//CreateReport(strReport,PrintBuffer,&RepPos);
    74e2:	82 ec       	ldi	r24, 0xC2	; 194
    74e4:	93 e0       	ldi	r25, 0x03	; 3
    74e6:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
    74ea:	81 30       	cpi	r24, 0x01	; 1
    74ec:	79 f4       	brne	.+30     	; 0x750c <systemGenerateReport+0xbee>
    74ee:	00 d0       	rcall	.+0      	; 0x74f0 <systemGenerateReport+0xbd2>
    74f0:	00 d0       	rcall	.+0      	; 0x74f2 <systemGenerateReport+0xbd4>
    74f2:	00 d0       	rcall	.+0      	; 0x74f4 <systemGenerateReport+0xbd6>
    74f4:	ed b7       	in	r30, 0x3d	; 61
    74f6:	fe b7       	in	r31, 0x3e	; 62
    74f8:	31 96       	adiw	r30, 0x01	; 1
    74fa:	ad b7       	in	r26, 0x3d	; 61
    74fc:	be b7       	in	r27, 0x3e	; 62
    74fe:	12 96       	adiw	r26, 0x02	; 2
    7500:	1c 93       	st	X, r17
    7502:	0e 93       	st	-X, r16
    7504:	11 97       	sbiw	r26, 0x01	; 1
    7506:	85 ec       	ldi	r24, 0xC5	; 197
    7508:	95 e0       	ldi	r25, 0x05	; 5
    750a:	0e c0       	rjmp	.+28     	; 0x7528 <systemGenerateReport+0xc0a>
		  else sprintf_P(strReport,PSTR("%s-----------                "),strTabSpace);CreateReport(strReport,PrintBuffer,&RepPos);
    750c:	00 d0       	rcall	.+0      	; 0x750e <systemGenerateReport+0xbf0>
    750e:	00 d0       	rcall	.+0      	; 0x7510 <systemGenerateReport+0xbf2>
    7510:	00 d0       	rcall	.+0      	; 0x7512 <systemGenerateReport+0xbf4>
    7512:	ed b7       	in	r30, 0x3d	; 61
    7514:	fe b7       	in	r31, 0x3e	; 62
    7516:	31 96       	adiw	r30, 0x01	; 1
    7518:	ad b7       	in	r26, 0x3d	; 61
    751a:	be b7       	in	r27, 0x3e	; 62
    751c:	12 96       	adiw	r26, 0x02	; 2
    751e:	1c 93       	st	X, r17
    7520:	0e 93       	st	-X, r16
    7522:	11 97       	sbiw	r26, 0x01	; 1
    7524:	87 ea       	ldi	r24, 0xA7	; 167
    7526:	95 e0       	ldi	r25, 0x05	; 5
    7528:	93 83       	std	Z+3, r25	; 0x03
    752a:	82 83       	std	Z+2, r24	; 0x02
    752c:	f5 82       	std	Z+5, r15	; 0x05
    752e:	e4 82       	std	Z+4, r14	; 0x04
    7530:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
    7534:	ed b7       	in	r30, 0x3d	; 61
    7536:	fe b7       	in	r31, 0x3e	; 62
    7538:	36 96       	adiw	r30, 0x06	; 6
    753a:	0f b6       	in	r0, 0x3f	; 63
    753c:	f8 94       	cli
    753e:	fe bf       	out	0x3e, r31	; 62
    7540:	0f be       	out	0x3f, r0	; 63
    7542:	ed bf       	out	0x3d, r30	; 61
    7544:	a5 ea       	ldi	r26, 0xA5	; 165
    7546:	ea 2e       	mov	r14, r26
    7548:	f1 2c       	mov	r15, r1
    754a:	ec 0e       	add	r14, r28
    754c:	fd 1e       	adc	r15, r29
    754e:	c7 01       	movw	r24, r14
    7550:	6c ee       	ldi	r22, 0xEC	; 236
    7552:	73 e0       	ldi	r23, 0x03	; 3
    7554:	46 ed       	ldi	r20, 0xD6	; 214
    7556:	51 e0       	ldi	r21, 0x01	; 1
    7558:	0e 94 27 22 	call	0x444e	; 0x444e <CreateReport>

		  GetTabSpace((23-strlen(strDeltaVolume)),strTabSpace);
    755c:	f5 e0       	ldi	r31, 0x05	; 5
    755e:	cf 2e       	mov	r12, r31
    7560:	f9 e0       	ldi	r31, 0x09	; 9
    7562:	df 2e       	mov	r13, r31
    7564:	f6 01       	movw	r30, r12
    7566:	01 90       	ld	r0, Z+
    7568:	00 20       	and	r0, r0
    756a:	e9 f7       	brne	.-6      	; 0x7566 <systemGenerateReport+0xc48>
    756c:	31 97       	sbiw	r30, 0x01	; 1
    756e:	ec 19       	sub	r30, r12
    7570:	fd 09       	sbc	r31, r13
    7572:	8e 01       	movw	r16, r28
    7574:	07 59       	subi	r16, 0x97	; 151
    7576:	1f 4f       	sbci	r17, 0xFF	; 255
    7578:	87 e1       	ldi	r24, 0x17	; 23
    757a:	8e 1b       	sub	r24, r30
    757c:	b8 01       	movw	r22, r16
    757e:	0e 94 46 1a 	call	0x348c	; 0x348c <GetTabSpace>
		  GetTabSpace((15-strlen(strDeltaMoney)),strTabSpace2);
    7582:	ed e2       	ldi	r30, 0x2D	; 45
    7584:	8e 2e       	mov	r8, r30
    7586:	ec e0       	ldi	r30, 0x0C	; 12
    7588:	9e 2e       	mov	r9, r30
    758a:	f4 01       	movw	r30, r8
    758c:	01 90       	ld	r0, Z+
    758e:	00 20       	and	r0, r0
    7590:	e9 f7       	brne	.-6      	; 0x758c <systemGenerateReport+0xc6e>
    7592:	31 97       	sbiw	r30, 0x01	; 1
    7594:	e8 19       	sub	r30, r8
    7596:	f9 09       	sbc	r31, r9
    7598:	7d e7       	ldi	r23, 0x7D	; 125
    759a:	a7 2e       	mov	r10, r23
    759c:	b1 2c       	mov	r11, r1
    759e:	ac 0e       	add	r10, r28
    75a0:	bd 1e       	adc	r11, r29
    75a2:	8f e0       	ldi	r24, 0x0F	; 15
    75a4:	8e 1b       	sub	r24, r30
    75a6:	b5 01       	movw	r22, r10
    75a8:	0e 94 46 1a 	call	0x348c	; 0x348c <GetTabSpace>
          //PrintMoney
		  if (eeprom_read_byte(&DefPrintMoney)==True)sprintf_P(strReport,PSTR("%s%s%s%s"),strTabSpace,strDeltaVolume,strTabSpace2,strDeltaMoney);//CreateReport(strReport,PrintBuffer,&RepPos);
    75ac:	82 ec       	ldi	r24, 0xC2	; 194
    75ae:	93 e0       	ldi	r25, 0x03	; 3
    75b0:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
    75b4:	81 30       	cpi	r24, 0x01	; 1
    75b6:	19 f5       	brne	.+70     	; 0x75fe <systemGenerateReport+0xce0>
    75b8:	8d b7       	in	r24, 0x3d	; 61
    75ba:	9e b7       	in	r25, 0x3e	; 62
    75bc:	0c 97       	sbiw	r24, 0x0c	; 12
    75be:	0f b6       	in	r0, 0x3f	; 63
    75c0:	f8 94       	cli
    75c2:	9e bf       	out	0x3e, r25	; 62
    75c4:	0f be       	out	0x3f, r0	; 63
    75c6:	8d bf       	out	0x3d, r24	; 61
    75c8:	ed b7       	in	r30, 0x3d	; 61
    75ca:	fe b7       	in	r31, 0x3e	; 62
    75cc:	31 96       	adiw	r30, 0x01	; 1
    75ce:	ad b7       	in	r26, 0x3d	; 61
    75d0:	be b7       	in	r27, 0x3e	; 62
    75d2:	12 96       	adiw	r26, 0x02	; 2
    75d4:	fc 92       	st	X, r15
    75d6:	ee 92       	st	-X, r14
    75d8:	11 97       	sbiw	r26, 0x01	; 1
    75da:	8e e9       	ldi	r24, 0x9E	; 158
    75dc:	95 e0       	ldi	r25, 0x05	; 5
    75de:	93 83       	std	Z+3, r25	; 0x03
    75e0:	82 83       	std	Z+2, r24	; 0x02
    75e2:	15 83       	std	Z+5, r17	; 0x05
    75e4:	04 83       	std	Z+4, r16	; 0x04
    75e6:	d7 82       	std	Z+7, r13	; 0x07
    75e8:	c6 82       	std	Z+6, r12	; 0x06
    75ea:	b1 86       	std	Z+9, r11	; 0x09
    75ec:	a0 86       	std	Z+8, r10	; 0x08
    75ee:	93 86       	std	Z+11, r9	; 0x0b
    75f0:	82 86       	std	Z+10, r8	; 0x0a
    75f2:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
    75f6:	ed b7       	in	r30, 0x3d	; 61
    75f8:	fe b7       	in	r31, 0x3e	; 62
    75fa:	3c 96       	adiw	r30, 0x0c	; 12
    75fc:	1e c0       	rjmp	.+60     	; 0x763a <systemGenerateReport+0xd1c>
          else sprintf_P(strReport,PSTR("%s%s"),strTabSpace,strDeltaVolume);CreateReport(strReport,PrintBuffer,&RepPos);
    75fe:	8d b7       	in	r24, 0x3d	; 61
    7600:	9e b7       	in	r25, 0x3e	; 62
    7602:	08 97       	sbiw	r24, 0x08	; 8
    7604:	0f b6       	in	r0, 0x3f	; 63
    7606:	f8 94       	cli
    7608:	9e bf       	out	0x3e, r25	; 62
    760a:	0f be       	out	0x3f, r0	; 63
    760c:	8d bf       	out	0x3d, r24	; 61
    760e:	ed b7       	in	r30, 0x3d	; 61
    7610:	fe b7       	in	r31, 0x3e	; 62
    7612:	31 96       	adiw	r30, 0x01	; 1
    7614:	ad b7       	in	r26, 0x3d	; 61
    7616:	be b7       	in	r27, 0x3e	; 62
    7618:	12 96       	adiw	r26, 0x02	; 2
    761a:	fc 92       	st	X, r15
    761c:	ee 92       	st	-X, r14
    761e:	11 97       	sbiw	r26, 0x01	; 1
    7620:	89 e9       	ldi	r24, 0x99	; 153
    7622:	95 e0       	ldi	r25, 0x05	; 5
    7624:	93 83       	std	Z+3, r25	; 0x03
    7626:	82 83       	std	Z+2, r24	; 0x02
    7628:	15 83       	std	Z+5, r17	; 0x05
    762a:	04 83       	std	Z+4, r16	; 0x04
    762c:	d7 82       	std	Z+7, r13	; 0x07
    762e:	c6 82       	std	Z+6, r12	; 0x06
    7630:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
    7634:	ed b7       	in	r30, 0x3d	; 61
    7636:	fe b7       	in	r31, 0x3e	; 62
    7638:	38 96       	adiw	r30, 0x08	; 8
    763a:	0f b6       	in	r0, 0x3f	; 63
    763c:	f8 94       	cli
    763e:	fe bf       	out	0x3e, r31	; 62
    7640:	0f be       	out	0x3f, r0	; 63
    7642:	ed bf       	out	0x3d, r30	; 61
    7644:	ce 01       	movw	r24, r28
    7646:	8b 55       	subi	r24, 0x5B	; 91
    7648:	9f 4f       	sbci	r25, 0xFF	; 255
    764a:	6c ee       	ldi	r22, 0xEC	; 236
    764c:	73 e0       	ldi	r23, 0x03	; 3
    764e:	46 ed       	ldi	r20, 0xD6	; 214
    7650:	51 e0       	ldi	r21, 0x01	; 1
    7652:	0e 94 27 22 	call	0x444e	; 0x444e <CreateReport>

          InserBorder(btBottomLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btBottomRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);
    7656:	87 e0       	ldi	r24, 0x07	; 7
    7658:	6c ee       	ldi	r22, 0xEC	; 236
    765a:	73 e0       	ldi	r23, 0x03	; 3
    765c:	41 e0       	ldi	r20, 0x01	; 1
    765e:	26 ed       	ldi	r18, 0xD6	; 214
    7660:	31 e0       	ldi	r19, 0x01	; 1
    7662:	0e 94 96 1a 	call	0x352c	; 0x352c <InserBorder>
    7666:	8b e0       	ldi	r24, 0x0B	; 11
    7668:	6c ee       	ldi	r22, 0xEC	; 236
    766a:	73 e0       	ldi	r23, 0x03	; 3
    766c:	4a e2       	ldi	r20, 0x2A	; 42
    766e:	26 ed       	ldi	r18, 0xD6	; 214
    7670:	31 e0       	ldi	r19, 0x01	; 1
    7672:	0e 94 96 1a 	call	0x352c	; 0x352c <InserBorder>
    7676:	89 e0       	ldi	r24, 0x09	; 9
    7678:	6c ee       	ldi	r22, 0xEC	; 236
    767a:	73 e0       	ldi	r23, 0x03	; 3
    767c:	41 e0       	ldi	r20, 0x01	; 1
    767e:	26 ed       	ldi	r18, 0xD6	; 214
    7680:	31 e0       	ldi	r19, 0x01	; 1
    7682:	0e 94 96 1a 	call	0x352c	; 0x352c <InserBorder>
    7686:	8c e0       	ldi	r24, 0x0C	; 12
    7688:	6c ee       	ldi	r22, 0xEC	; 236
    768a:	73 e0       	ldi	r23, 0x03	; 3
    768c:	41 e0       	ldi	r20, 0x01	; 1
    768e:	26 ed       	ldi	r18, 0xD6	; 214
    7690:	31 e0       	ldi	r19, 0x01	; 1
    7692:	0e 94 96 1a 	call	0x352c	; 0x352c <InserBorder>


          cmdPrint=0b00000000;
    7696:	10 92 b5 01 	sts	0x01B5, r1
		  LengthMessage81=RepPos+1;
    769a:	80 91 d6 01 	lds	r24, 0x01D6
    769e:	90 91 d7 01 	lds	r25, 0x01D7
    76a2:	01 96       	adiw	r24, 0x01	; 1
    76a4:	90 93 8e 01 	sts	0x018E, r25
    76a8:	80 93 8d 01 	sts	0x018D, r24

		  IsFreePrinting=True;
    76ac:	81 e0       	ldi	r24, 0x01	; 1
    76ae:	80 93 a8 01 	sts	0x01A8, r24
	      IsBusyFreePrinting=True;
    76b2:	80 93 b4 01 	sts	0x01B4, r24

	      stGenerateReport=grWaitPrinted2;
    76b6:	89 e0       	ldi	r24, 0x09	; 9
    76b8:	61 c3       	rjmp	.+1730   	; 0x7d7c <systemGenerateReport+0x145e>
	      break;
     case grWaitPrinted2:
	 
          if (IsBusyFreePrinting==False)stGenerateReport=grGenerateReportData;
    76ba:	80 91 b4 01 	lds	r24, 0x01B4
    76be:	88 23       	and	r24, r24
    76c0:	09 f0       	breq	.+2      	; 0x76c4 <systemGenerateReport+0xda6>
    76c2:	64 c3       	rjmp	.+1736   	; 0x7d8c <systemGenerateReport+0x146e>
    76c4:	86 e0       	ldi	r24, 0x06	; 6
    76c6:	5a c3       	rjmp	.+1716   	; 0x7d7c <systemGenerateReport+0x145e>
	      break;
     case grCreateReportFooter:
          RepPos=0;
    76c8:	10 92 d7 01 	sts	0x01D7, r1
    76cc:	10 92 d6 01 	sts	0x01D6, r1
    76d0:	ec ee       	ldi	r30, 0xEC	; 236
    76d2:	f3 e0       	ldi	r31, 0x03	; 3
}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
	     strMemory[i]=data;
    76d4:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    76d6:	85 e0       	ldi	r24, 0x05	; 5
    76d8:	ed 37       	cpi	r30, 0x7D	; 125
    76da:	f8 07       	cpc	r31, r24
    76dc:	d9 f7       	brne	.-10     	; 0x76d4 <systemGenerateReport+0xdb6>
    76de:	fe 01       	movw	r30, r28
    76e0:	eb 55       	subi	r30, 0x5B	; 91
    76e2:	ff 4f       	sbci	r31, 0xFF	; 255
	     strMemory[i]=data;
    76e4:	cf 01       	movw	r24, r30
    76e6:	9e 2e       	mov	r9, r30
    76e8:	89 2e       	mov	r8, r25
    76ea:	ce 01       	movw	r24, r28
    76ec:	8b 50       	subi	r24, 0x0B	; 11
    76ee:	9f 4f       	sbci	r25, 0xFF	; 255
    76f0:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    76f2:	e8 17       	cp	r30, r24
    76f4:	f9 07       	cpc	r31, r25
    76f6:	e1 f7       	brne	.-8      	; 0x76f0 <systemGenerateReport+0xdd2>
     case grCreateReportFooter:
          RepPos=0;
		  FillChar(PrintBuffer,sizeof(PrintBuffer),0);
		  FillChar(strReport,sizeof(strReport),0);

		  RemZeroLead(strTotalMoney);
    76f8:	68 ea       	ldi	r22, 0xA8	; 168
    76fa:	c6 2e       	mov	r12, r22
    76fc:	68 e0       	ldi	r22, 0x08	; 8
    76fe:	d6 2e       	mov	r13, r22
    7700:	c6 01       	movw	r24, r12
    7702:	0e 94 51 25 	call	0x4aa2	; 0x4aa2 <RemZeroLead>
		  RemZeroLead(strTotalVolume);
    7706:	57 ef       	ldi	r21, 0xF7	; 247
    7708:	e5 2e       	mov	r14, r21
    770a:	57 e0       	ldi	r21, 0x07	; 7
    770c:	f5 2e       	mov	r15, r21
    770e:	c7 01       	movw	r24, r14
    7710:	0e 94 51 25 	call	0x4aa2	; 0x4aa2 <RemZeroLead>

		  FormatTotalizerMoney(strTotalMoney);
    7714:	c6 01       	movw	r24, r12
    7716:	0e 94 57 34 	call	0x68ae	; 0x68ae <FormatTotalizerMoney>
		  FormatCurrency(strTotalMoney);
    771a:	c6 01       	movw	r24, r12
    771c:	0e 94 1f 33 	call	0x663e	; 0x663e <FormatCurrency>
		  FormatTotalizerVolume(strTotalVolume);
    7720:	c7 01       	movw	r24, r14
    7722:	0e 94 49 34 	call	0x6892	; 0x6892 <FormatTotalizerVolume>
		  FormatCurrency(strTotalVolume);
    7726:	c7 01       	movw	r24, r14
    7728:	0e 94 1f 33 	call	0x663e	; 0x663e <FormatCurrency>

          //Test
		  //RemZeroLead(strTotalMoney);
		  //RemZeroLead(strTotalVolume);

		  InserBorder(btTopLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btTopRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);          
    772c:	81 e0       	ldi	r24, 0x01	; 1
    772e:	6c ee       	ldi	r22, 0xEC	; 236
    7730:	73 e0       	ldi	r23, 0x03	; 3
    7732:	41 e0       	ldi	r20, 0x01	; 1
    7734:	26 ed       	ldi	r18, 0xD6	; 214
    7736:	31 e0       	ldi	r19, 0x01	; 1
    7738:	0e 94 96 1a 	call	0x352c	; 0x352c <InserBorder>
    773c:	8b e0       	ldi	r24, 0x0B	; 11
    773e:	6c ee       	ldi	r22, 0xEC	; 236
    7740:	73 e0       	ldi	r23, 0x03	; 3
    7742:	4a e2       	ldi	r20, 0x2A	; 42
    7744:	26 ed       	ldi	r18, 0xD6	; 214
    7746:	31 e0       	ldi	r19, 0x01	; 1
    7748:	0e 94 96 1a 	call	0x352c	; 0x352c <InserBorder>
    774c:	83 e0       	ldi	r24, 0x03	; 3
    774e:	6c ee       	ldi	r22, 0xEC	; 236
    7750:	73 e0       	ldi	r23, 0x03	; 3
    7752:	41 e0       	ldi	r20, 0x01	; 1
    7754:	26 ed       	ldi	r18, 0xD6	; 214
    7756:	31 e0       	ldi	r19, 0x01	; 1
    7758:	0e 94 96 1a 	call	0x352c	; 0x352c <InserBorder>
    775c:	8c e0       	ldi	r24, 0x0C	; 12
    775e:	6c ee       	ldi	r22, 0xEC	; 236
    7760:	73 e0       	ldi	r23, 0x03	; 3
    7762:	41 e0       	ldi	r20, 0x01	; 1
    7764:	26 ed       	ldi	r18, 0xD6	; 214
    7766:	31 e0       	ldi	r19, 0x01	; 1
    7768:	0e 94 96 1a 	call	0x352c	; 0x352c <InserBorder>
		  GetTabSpace((17-strlen(strTotalVolume)),strTabSpace);
    776c:	f7 01       	movw	r30, r14
    776e:	01 90       	ld	r0, Z+
    7770:	00 20       	and	r0, r0
    7772:	e9 f7       	brne	.-6      	; 0x776e <systemGenerateReport+0xe50>
    7774:	31 97       	sbiw	r30, 0x01	; 1
    7776:	ee 19       	sub	r30, r14
    7778:	ff 09       	sbc	r31, r15
    777a:	8e 01       	movw	r16, r28
    777c:	07 59       	subi	r16, 0x97	; 151
    777e:	1f 4f       	sbci	r17, 0xFF	; 255
    7780:	81 e1       	ldi	r24, 0x11	; 17
    7782:	8e 1b       	sub	r24, r30
    7784:	b8 01       	movw	r22, r16
    7786:	0e 94 46 1a 	call	0x348c	; 0x348c <GetTabSpace>
		  GetTabSpace((15-strlen(strTotalMoney)),strTabSpace2);
    778a:	f6 01       	movw	r30, r12
    778c:	01 90       	ld	r0, Z+
    778e:	00 20       	and	r0, r0
    7790:	e9 f7       	brne	.-6      	; 0x778c <systemGenerateReport+0xe6e>
    7792:	31 97       	sbiw	r30, 0x01	; 1
    7794:	ec 19       	sub	r30, r12
    7796:	fd 09       	sbc	r31, r13
    7798:	4d e7       	ldi	r20, 0x7D	; 125
    779a:	a4 2e       	mov	r10, r20
    779c:	b1 2c       	mov	r11, r1
    779e:	ac 0e       	add	r10, r28
    77a0:	bd 1e       	adc	r11, r29
    77a2:	8f e0       	ldi	r24, 0x0F	; 15
    77a4:	8e 1b       	sub	r24, r30
    77a6:	b5 01       	movw	r22, r10
    77a8:	0e 94 46 1a 	call	0x348c	; 0x348c <GetTabSpace>
          //PrintMoney
		  if (eeprom_read_byte(&DefPrintMoney)==True)sprintf_P(strReport,PSTR("TOTAL %s%s%s%s"),strTabSpace,strTotalVolume,strTabSpace2,strTotalMoney);//CreateReport(strReport,PrintBuffer,&RepPos);
    77ac:	82 ec       	ldi	r24, 0xC2	; 194
    77ae:	93 e0       	ldi	r25, 0x03	; 3
    77b0:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
    77b4:	81 30       	cpi	r24, 0x01	; 1
    77b6:	11 f5       	brne	.+68     	; 0x77fc <systemGenerateReport+0xede>
    77b8:	ad b7       	in	r26, 0x3d	; 61
    77ba:	be b7       	in	r27, 0x3e	; 62
    77bc:	1c 97       	sbiw	r26, 0x0c	; 12
    77be:	0f b6       	in	r0, 0x3f	; 63
    77c0:	f8 94       	cli
    77c2:	be bf       	out	0x3e, r27	; 62
    77c4:	0f be       	out	0x3f, r0	; 63
    77c6:	ad bf       	out	0x3d, r26	; 61
    77c8:	ed b7       	in	r30, 0x3d	; 61
    77ca:	fe b7       	in	r31, 0x3e	; 62
    77cc:	31 96       	adiw	r30, 0x01	; 1
    77ce:	11 96       	adiw	r26, 0x01	; 1
    77d0:	9c 92       	st	X, r9
    77d2:	11 97       	sbiw	r26, 0x01	; 1
    77d4:	12 96       	adiw	r26, 0x02	; 2
    77d6:	8c 92       	st	X, r8
    77d8:	8a e8       	ldi	r24, 0x8A	; 138
    77da:	95 e0       	ldi	r25, 0x05	; 5
    77dc:	93 83       	std	Z+3, r25	; 0x03
    77de:	82 83       	std	Z+2, r24	; 0x02
    77e0:	15 83       	std	Z+5, r17	; 0x05
    77e2:	04 83       	std	Z+4, r16	; 0x04
    77e4:	f7 82       	std	Z+7, r15	; 0x07
    77e6:	e6 82       	std	Z+6, r14	; 0x06
    77e8:	b1 86       	std	Z+9, r11	; 0x09
    77ea:	a0 86       	std	Z+8, r10	; 0x08
    77ec:	d3 86       	std	Z+11, r13	; 0x0b
    77ee:	c2 86       	std	Z+10, r12	; 0x0a
    77f0:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
    77f4:	ed b7       	in	r30, 0x3d	; 61
    77f6:	fe b7       	in	r31, 0x3e	; 62
    77f8:	3c 96       	adiw	r30, 0x0c	; 12
    77fa:	1f c0       	rjmp	.+62     	; 0x783a <systemGenerateReport+0xf1c>
		  else sprintf_P(strReport,PSTR("TOTAL %s%s"),strTabSpace,strTotalVolume);CreateReport(strReport,PrintBuffer,&RepPos);
    77fc:	8d b7       	in	r24, 0x3d	; 61
    77fe:	9e b7       	in	r25, 0x3e	; 62
    7800:	08 97       	sbiw	r24, 0x08	; 8
    7802:	0f b6       	in	r0, 0x3f	; 63
    7804:	f8 94       	cli
    7806:	9e bf       	out	0x3e, r25	; 62
    7808:	0f be       	out	0x3f, r0	; 63
    780a:	8d bf       	out	0x3d, r24	; 61
    780c:	ed b7       	in	r30, 0x3d	; 61
    780e:	fe b7       	in	r31, 0x3e	; 62
    7810:	31 96       	adiw	r30, 0x01	; 1
    7812:	ad b7       	in	r26, 0x3d	; 61
    7814:	be b7       	in	r27, 0x3e	; 62
    7816:	11 96       	adiw	r26, 0x01	; 1
    7818:	9c 92       	st	X, r9
    781a:	11 97       	sbiw	r26, 0x01	; 1
    781c:	12 96       	adiw	r26, 0x02	; 2
    781e:	8c 92       	st	X, r8
    7820:	8f e7       	ldi	r24, 0x7F	; 127
    7822:	95 e0       	ldi	r25, 0x05	; 5
    7824:	93 83       	std	Z+3, r25	; 0x03
    7826:	82 83       	std	Z+2, r24	; 0x02
    7828:	15 83       	std	Z+5, r17	; 0x05
    782a:	04 83       	std	Z+4, r16	; 0x04
    782c:	f7 82       	std	Z+7, r15	; 0x07
    782e:	e6 82       	std	Z+6, r14	; 0x06
    7830:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
    7834:	ed b7       	in	r30, 0x3d	; 61
    7836:	fe b7       	in	r31, 0x3e	; 62
    7838:	38 96       	adiw	r30, 0x08	; 8
    783a:	0f b6       	in	r0, 0x3f	; 63
    783c:	f8 94       	cli
    783e:	fe bf       	out	0x3e, r31	; 62
    7840:	0f be       	out	0x3f, r0	; 63
    7842:	ed bf       	out	0x3d, r30	; 61
    7844:	ce 01       	movw	r24, r28
    7846:	8b 55       	subi	r24, 0x5B	; 91
    7848:	9f 4f       	sbci	r25, 0xFF	; 255
    784a:	6c ee       	ldi	r22, 0xEC	; 236
    784c:	73 e0       	ldi	r23, 0x03	; 3
    784e:	46 ed       	ldi	r20, 0xD6	; 214
    7850:	51 e0       	ldi	r21, 0x01	; 1
    7852:	0e 94 27 22 	call	0x444e	; 0x444e <CreateReport>

		  InserBorder(btMiddleLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btMiddleRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);     	      
    7856:	84 e0       	ldi	r24, 0x04	; 4
    7858:	6c ee       	ldi	r22, 0xEC	; 236
    785a:	73 e0       	ldi	r23, 0x03	; 3
    785c:	41 e0       	ldi	r20, 0x01	; 1
    785e:	26 ed       	ldi	r18, 0xD6	; 214
    7860:	31 e0       	ldi	r19, 0x01	; 1
    7862:	0e 94 96 1a 	call	0x352c	; 0x352c <InserBorder>
    7866:	8b e0       	ldi	r24, 0x0B	; 11
    7868:	6c ee       	ldi	r22, 0xEC	; 236
    786a:	73 e0       	ldi	r23, 0x03	; 3
    786c:	4a e2       	ldi	r20, 0x2A	; 42
    786e:	26 ed       	ldi	r18, 0xD6	; 214
    7870:	31 e0       	ldi	r19, 0x01	; 1
    7872:	0e 94 96 1a 	call	0x352c	; 0x352c <InserBorder>
    7876:	86 e0       	ldi	r24, 0x06	; 6
    7878:	6c ee       	ldi	r22, 0xEC	; 236
    787a:	73 e0       	ldi	r23, 0x03	; 3
    787c:	41 e0       	ldi	r20, 0x01	; 1
    787e:	26 ed       	ldi	r18, 0xD6	; 214
    7880:	31 e0       	ldi	r19, 0x01	; 1
    7882:	0e 94 96 1a 	call	0x352c	; 0x352c <InserBorder>
    7886:	8c e0       	ldi	r24, 0x0C	; 12
    7888:	6c ee       	ldi	r22, 0xEC	; 236
    788a:	73 e0       	ldi	r23, 0x03	; 3
    788c:	41 e0       	ldi	r20, 0x01	; 1
    788e:	26 ed       	ldi	r18, 0xD6	; 214
    7890:	31 e0       	ldi	r19, 0x01	; 1
    7892:	0e 94 96 1a 	call	0x352c	; 0x352c <InserBorder>
    7896:	cb 50       	subi	r28, 0x0B	; 11
    7898:	df 4f       	sbci	r29, 0xFF	; 255
    789a:	18 82       	st	Y, r1
    789c:	c5 5f       	subi	r28, 0xF5	; 245
    789e:	d0 40       	sbci	r29, 0x00	; 0

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    78a0:	ce 01       	movw	r24, r28
    78a2:	88 96       	adiw	r24, 0x28	; 40
    78a4:	c6 50       	subi	r28, 0x06	; 6
    78a6:	df 4f       	sbci	r29, 0xFF	; 255
    78a8:	99 83       	std	Y+1, r25	; 0x01
    78aa:	88 83       	st	Y, r24
    78ac:	ca 5f       	subi	r28, 0xFA	; 250
    78ae:	d0 40       	sbci	r29, 0x00	; 0
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
    78b0:	37 e3       	ldi	r19, 0x37	; 55
    78b2:	23 2e       	mov	r2, r19
    78b4:	31 2c       	mov	r3, r1
    78b6:	2c 0e       	add	r2, r28
    78b8:	3d 1e       	adc	r3, r29
    78ba:	d1 01       	movw	r26, r2
    78bc:	1f 96       	adiw	r26, 0x0f	; 15
    78be:	ca 50       	subi	r28, 0x0A	; 10
    78c0:	df 4f       	sbci	r29, 0xFF	; 255
    78c2:	b9 83       	std	Y+1, r27	; 0x01
    78c4:	a8 83       	st	Y, r26
    78c6:	c6 5f       	subi	r28, 0xF6	; 246
    78c8:	d0 40       	sbci	r29, 0x00	; 0
    78ca:	e6 e4       	ldi	r30, 0x46	; 70
    78cc:	f0 e0       	ldi	r31, 0x00	; 0
    78ce:	ec 0f       	add	r30, r28
    78d0:	fd 1f       	adc	r31, r29
    78d2:	3f 96       	adiw	r30, 0x0f	; 15
    78d4:	c8 50       	subi	r28, 0x08	; 8
    78d6:	df 4f       	sbci	r29, 0xFF	; 255
    78d8:	f9 83       	std	Y+1, r31	; 0x01
    78da:	e8 83       	st	Y, r30
    78dc:	c8 5f       	subi	r28, 0xF8	; 248
    78de:	d0 40       	sbci	r29, 0x00	; 0
    78e0:	da c1       	rjmp	.+948    	; 0x7c96 <systemGenerateReport+0x1378>
    78e2:	f2 01       	movw	r30, r4
    78e4:	e8 52       	subi	r30, 0x28	; 40
    78e6:	fe 4f       	sbci	r31, 0xFE	; 254
    78e8:	80 81       	ld	r24, Z
    78ea:	80 53       	subi	r24, 0x30	; 48
    78ec:	8a 30       	cpi	r24, 0x0A	; 10
    78ee:	08 f0       	brcs	.+2      	; 0x78f2 <systemGenerateReport+0xfd4>
    78f0:	80 e0       	ldi	r24, 0x00	; 0
		  else sprintf_P(strReport,PSTR("TOTAL %s%s"),strTabSpace,strTotalVolume);CreateReport(strReport,PrintBuffer,&RepPos);

		  InserBorder(btMiddleLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btMiddleRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);     	      

		  for(iTotal=0;iTotal<strlen(GradeList);iTotal++){
		      xGrade=Ord(GradeList[iTotal]);
    78f2:	80 93 e5 01 	sts	0x01E5, r24
			  if (xGrade>0){
    78f6:	88 23       	and	r24, r24
    78f8:	09 f4       	brne	.+2      	; 0x78fc <systemGenerateReport+0xfde>
    78fa:	c2 c1       	rjmp	.+900    	; 0x7c80 <systemGenerateReport+0x1362>
			      GetProductName(xGrade,strProduct);
    78fc:	6e e5       	ldi	r22, 0x5E	; 94
    78fe:	77 e0       	ldi	r23, 0x07	; 7
    7900:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <GetProductName>
    7904:	e7 ef       	ldi	r30, 0xF7	; 247
    7906:	f7 e0       	ldi	r31, 0x07	; 7
}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
	     strMemory[i]=data;
    7908:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    790a:	88 e0       	ldi	r24, 0x08	; 8
    790c:	eb 30       	cpi	r30, 0x0B	; 11
    790e:	f8 07       	cpc	r31, r24
    7910:	d9 f7       	brne	.-10     	; 0x7908 <systemGenerateReport+0xfea>
    7912:	e8 ea       	ldi	r30, 0xA8	; 168
    7914:	f8 e0       	ldi	r31, 0x08	; 8
	     strMemory[i]=data;
    7916:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    7918:	98 e0       	ldi	r25, 0x08	; 8
    791a:	ec 3b       	cpi	r30, 0xBC	; 188
    791c:	f9 07       	cpc	r31, r25
    791e:	d9 f7       	brne	.-10     	; 0x7916 <systemGenerateReport+0xff8>
			      GetProductName(xGrade,strProduct);
				  
				  FillChar(strTotalVolume,sizeof(strTotalVolume),0);
				  FillChar(strTotalMoney,sizeof(strTotalMoney),0);

				  for(xPump=1;xPump<=8;xPump++){
    7920:	81 e0       	ldi	r24, 0x01	; 1
    7922:	80 93 e7 01 	sts	0x01E7, r24
				      eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap, 8);
    7926:	27 e0       	ldi	r18, 0x07	; 7
    7928:	82 2e       	mov	r8, r18
    792a:	91 2c       	mov	r9, r1
    792c:	8c 0e       	add	r8, r28
    792e:	9d 1e       	adc	r9, r29

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    7930:	99 e1       	ldi	r25, 0x19	; 25
    7932:	c9 2e       	mov	r12, r25
    7934:	d1 2c       	mov	r13, r1
    7936:	cc 0e       	add	r12, r28
    7938:	dd 1e       	adc	r13, r29
								      NormalizeOverflow(strDeltaVolume);


								  //Calculate Wayne Estimated Total Money
								  if (eeprom_read_byte(&DefDispenserBrand)==ST_WAYNE_DART){
						              GetProductPrice(sPrice,PumpNum,PumpNozzle);//Money = Price x Volume
    793a:	8f e0       	ldi	r24, 0x0F	; 15
    793c:	a8 2e       	mov	r10, r24
    793e:	b1 2c       	mov	r11, r1
    7940:	ac 0e       	add	r10, r28
    7942:	bd 1e       	adc	r11, r29
    7944:	ee c0       	rjmp	.+476    	; 0x7b22 <systemGenerateReport+0x1204>
				  
				  FillChar(strTotalVolume,sizeof(strTotalVolume),0);
				  FillChar(strTotalMoney,sizeof(strTotalMoney),0);

				  for(xPump=1;xPump<=8;xPump++){
				      eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap, 8);
    7946:	c4 01       	movw	r24, r8
    7948:	66 e4       	ldi	r22, 0x46	; 70
    794a:	70 e0       	ldi	r23, 0x00	; 0
    794c:	48 e0       	ldi	r20, 0x08	; 8
    794e:	50 e0       	ldi	r21, 0x00	; 0
    7950:	0e 94 30 ad 	call	0x15a60	; 0x15a60 <__eerd_block_m128>
			          PumpNum=PPumpID[xPump-1];
    7954:	80 91 e7 01 	lds	r24, 0x01E7
    7958:	fe 01       	movw	r30, r28
    795a:	e8 0f       	add	r30, r24
    795c:	f1 1d       	adc	r31, r1
    795e:	86 81       	ldd	r24, Z+6	; 0x06
    7960:	80 93 e4 01 	sts	0x01E4, r24
					  if (PumpNum>0){
    7964:	88 23       	and	r24, r24
    7966:	09 f4       	brne	.+2      	; 0x796a <systemGenerateReport+0x104c>
    7968:	d7 c0       	rjmp	.+430    	; 0x7b18 <systemGenerateReport+0x11fa>
						  for (xNozzle=1;xNozzle<=6;xNozzle++){
    796a:	81 e0       	ldi	r24, 0x01	; 1
    796c:	80 93 e6 01 	sts	0x01E6, r24
							  eeprom_read_block((void*) &PProductID, (const void*) &DefNozzleMap[xPump-1], 6);
    7970:	06 e0       	ldi	r16, 0x06	; 6
    7972:	e0 2e       	mov	r14, r16
    7974:	cc c0       	rjmp	.+408    	; 0x7b0e <systemGenerateReport+0x11f0>
    7976:	60 91 e7 01 	lds	r22, 0x01E7
    797a:	6e 9d       	mul	r22, r14
    797c:	b0 01       	movw	r22, r0
    797e:	11 24       	eor	r1, r1
    7980:	60 5b       	subi	r22, 0xB0	; 176
    7982:	7f 4f       	sbci	r23, 0xFF	; 255
    7984:	ce 01       	movw	r24, r28
    7986:	01 96       	adiw	r24, 0x01	; 1
    7988:	46 e0       	ldi	r20, 0x06	; 6
    798a:	50 e0       	ldi	r21, 0x00	; 0
    798c:	0e 94 30 ad 	call	0x15a60	; 0x15a60 <__eerd_block_m128>
							  //Found Grade
						      if (PProductID[xNozzle-1]==xGrade){
    7990:	80 91 e6 01 	lds	r24, 0x01E6
    7994:	fe 01       	movw	r30, r28
    7996:	e8 0f       	add	r30, r24
    7998:	f1 1d       	adc	r31, r1
    799a:	90 81       	ld	r25, Z
    799c:	80 91 e5 01 	lds	r24, 0x01E5
    79a0:	98 17       	cp	r25, r24
    79a2:	09 f0       	breq	.+2      	; 0x79a6 <systemGenerateReport+0x1088>
    79a4:	af c0       	rjmp	.+350    	; 0x7b04 <systemGenerateReport+0x11e6>
    79a6:	ed e2       	ldi	r30, 0x2D	; 45
    79a8:	fc e0       	ldi	r31, 0x0C	; 12
}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
	     strMemory[i]=data;
    79aa:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    79ac:	ac e0       	ldi	r26, 0x0C	; 12
    79ae:	ec 33       	cpi	r30, 0x3C	; 60
    79b0:	fa 07       	cpc	r31, r26
    79b2:	d9 f7       	brne	.-10     	; 0x79aa <systemGenerateReport+0x108c>
    79b4:	e5 e0       	ldi	r30, 0x05	; 5
    79b6:	f9 e0       	ldi	r31, 0x09	; 9
	     strMemory[i]=data;
    79b8:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    79ba:	b9 e0       	ldi	r27, 0x09	; 9
    79bc:	e4 31       	cpi	r30, 0x14	; 20
    79be:	fb 07       	cpc	r31, r27
    79c0:	d9 f7       	brne	.-10     	; 0x79b8 <systemGenerateReport+0x109a>
    79c2:	f6 01       	movw	r30, r12
	     strMemory[i]=data;
    79c4:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    79c6:	c6 50       	subi	r28, 0x06	; 6
    79c8:	df 4f       	sbci	r29, 0xFF	; 255
    79ca:	88 81       	ld	r24, Y
    79cc:	99 81       	ldd	r25, Y+1	; 0x01
    79ce:	ca 5f       	subi	r28, 0xFA	; 250
    79d0:	d0 40       	sbci	r29, 0x00	; 0
    79d2:	e8 17       	cp	r30, r24
    79d4:	f9 07       	cpc	r31, r25
    79d6:	b1 f7       	brne	.-20     	; 0x79c4 <systemGenerateReport+0x10a6>
    79d8:	fe 01       	movw	r30, r28
    79da:	b8 96       	adiw	r30, 0x28	; 40
	     strMemory[i]=data;
    79dc:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    79de:	e2 15       	cp	r30, r2
    79e0:	f3 05       	cpc	r31, r3
    79e2:	e1 f7       	brne	.-8      	; 0x79dc <systemGenerateReport+0x10be>
    79e4:	f1 01       	movw	r30, r2
	     strMemory[i]=data;
    79e6:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    79e8:	ca 50       	subi	r28, 0x0A	; 10
    79ea:	df 4f       	sbci	r29, 0xFF	; 255
    79ec:	a8 81       	ld	r26, Y
    79ee:	b9 81       	ldd	r27, Y+1	; 0x01
    79f0:	c6 5f       	subi	r28, 0xF6	; 246
    79f2:	d0 40       	sbci	r29, 0x00	; 0
    79f4:	ea 17       	cp	r30, r26
    79f6:	fb 07       	cpc	r31, r27
    79f8:	b1 f7       	brne	.-20     	; 0x79e6 <systemGenerateReport+0x10c8>
    79fa:	fe 01       	movw	r30, r28
    79fc:	ea 5b       	subi	r30, 0xBA	; 186
    79fe:	ff 4f       	sbci	r31, 0xFF	; 255
	     strMemory[i]=data;
    7a00:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    7a02:	c8 50       	subi	r28, 0x08	; 8
    7a04:	df 4f       	sbci	r29, 0xFF	; 255
    7a06:	88 81       	ld	r24, Y
    7a08:	99 81       	ldd	r25, Y+1	; 0x01
    7a0a:	c8 5f       	subi	r28, 0xF8	; 248
    7a0c:	d0 40       	sbci	r29, 0x00	; 0
    7a0e:	e8 17       	cp	r30, r24
    7a10:	f9 07       	cpc	r31, r25
    7a12:	b1 f7       	brne	.-20     	; 0x7a00 <systemGenerateReport+0x10e2>
								  FillChar(strLastVolume,sizeof(strLastVolume),0);
								  FillChar(strLastMoney,sizeof(strLastMoney),0);
								  FillChar(strCurrentVolume,sizeof(strCurrentVolume),0);
								  FillChar(strCurrentMoney,sizeof(strCurrentMoney),0);

								  PumpNozzle=xNozzle;
    7a14:	80 91 e6 01 	lds	r24, 0x01E6
    7a18:	80 93 e3 01 	sts	0x01E3, r24
								  
								  FIPAddr=GetFIPAddr(PumpNum); 
    7a1c:	80 91 e4 01 	lds	r24, 0x01E4
    7a20:	0e 94 0a 20 	call	0x4014	; 0x4014 <GetFIPAddr>
								  if (FIPAddr>0){
    7a24:	88 23       	and	r24, r24
    7a26:	31 f1       	breq	.+76     	; 0x7a74 <systemGenerateReport+0x1156>
									  FIPAddr=FIPAddr-1;							  							  							      
    7a28:	f8 2e       	mov	r15, r24
    7a2a:	fa 94       	dec	r15
									  GetTotalizerData(TVOLUME,TOTALIZER_LAST,FIPAddr,PumpNozzle,strLastVolume);
    7a2c:	80 e0       	ldi	r24, 0x00	; 0
    7a2e:	60 e0       	ldi	r22, 0x00	; 0
    7a30:	4f 2d       	mov	r20, r15
    7a32:	20 91 e3 01 	lds	r18, 0x01E3
    7a36:	86 01       	movw	r16, r12
    7a38:	0e 94 c1 20 	call	0x4182	; 0x4182 <GetTotalizerData>
									  GetTotalizerData(TMONEY,TOTALIZER_LAST,FIPAddr,PumpNozzle,strLastMoney);
    7a3c:	81 e0       	ldi	r24, 0x01	; 1
    7a3e:	60 e0       	ldi	r22, 0x00	; 0
    7a40:	4f 2d       	mov	r20, r15
    7a42:	20 91 e3 01 	lds	r18, 0x01E3
    7a46:	8e 01       	movw	r16, r28
    7a48:	08 5d       	subi	r16, 0xD8	; 216
    7a4a:	1f 4f       	sbci	r17, 0xFF	; 255
    7a4c:	0e 94 c1 20 	call	0x4182	; 0x4182 <GetTotalizerData>

									  GetTotalizerData(TVOLUME,TOTALIZER_NOW,FIPAddr,PumpNozzle,strCurrentVolume);
    7a50:	80 e0       	ldi	r24, 0x00	; 0
    7a52:	61 e0       	ldi	r22, 0x01	; 1
    7a54:	4f 2d       	mov	r20, r15
    7a56:	20 91 e3 01 	lds	r18, 0x01E3
    7a5a:	81 01       	movw	r16, r2
    7a5c:	0e 94 c1 20 	call	0x4182	; 0x4182 <GetTotalizerData>
									  GetTotalizerData(TMONEY,TOTALIZER_NOW,FIPAddr,PumpNozzle,strCurrentMoney);
    7a60:	81 e0       	ldi	r24, 0x01	; 1
    7a62:	61 e0       	ldi	r22, 0x01	; 1
    7a64:	4f 2d       	mov	r20, r15
    7a66:	20 91 e3 01 	lds	r18, 0x01E3
    7a6a:	8e 01       	movw	r16, r28
    7a6c:	0a 5b       	subi	r16, 0xBA	; 186
    7a6e:	1f 4f       	sbci	r17, 0xFF	; 255
    7a70:	0e 94 c1 20 	call	0x4182	; 0x4182 <GetTotalizerData>
								  }

								  StrCalc(TMINUS,strCurrentVolume,strLastVolume,strDeltaVolume);
    7a74:	80 e0       	ldi	r24, 0x00	; 0
    7a76:	b1 01       	movw	r22, r2
    7a78:	a6 01       	movw	r20, r12
    7a7a:	25 e0       	ldi	r18, 0x05	; 5
    7a7c:	39 e0       	ldi	r19, 0x09	; 9
    7a7e:	0e 94 89 29 	call	0x5312	; 0x5312 <StrCalc>
								  if (IsMinus(strDeltaVolume)==True)
    7a82:	85 e0       	ldi	r24, 0x05	; 5
    7a84:	99 e0       	ldi	r25, 0x09	; 9
    7a86:	0e 94 8c 23 	call	0x4718	; 0x4718 <IsMinus>
    7a8a:	81 30       	cpi	r24, 0x01	; 1
    7a8c:	21 f4       	brne	.+8      	; 0x7a96 <systemGenerateReport+0x1178>
								      NormalizeOverflow(strDeltaVolume);
    7a8e:	85 e0       	ldi	r24, 0x05	; 5
    7a90:	99 e0       	ldi	r25, 0x09	; 9
    7a92:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <NormalizeOverflow>


								  //Calculate Wayne Estimated Total Money
								  if (eeprom_read_byte(&DefDispenserBrand)==ST_WAYNE_DART){
    7a96:	88 e3       	ldi	r24, 0x38	; 56
    7a98:	91 e0       	ldi	r25, 0x01	; 1
    7a9a:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
    7a9e:	82 30       	cpi	r24, 0x02	; 2
    7aa0:	61 f4       	brne	.+24     	; 0x7aba <systemGenerateReport+0x119c>
						              GetProductPrice(sPrice,PumpNum,PumpNozzle);//Money = Price x Volume
    7aa2:	c5 01       	movw	r24, r10
    7aa4:	60 91 e4 01 	lds	r22, 0x01E4
    7aa8:	40 91 e3 01 	lds	r20, 0x01E3
    7aac:	0e 94 70 24 	call	0x48e0	; 0x48e0 <GetProductPrice>
									  StrCalc(TMULTIPLY,sPrice,strDeltaVolume,strDeltaMoney);
    7ab0:	82 e0       	ldi	r24, 0x02	; 2
    7ab2:	b5 01       	movw	r22, r10
    7ab4:	45 e0       	ldi	r20, 0x05	; 5
    7ab6:	59 e0       	ldi	r21, 0x09	; 9
    7ab8:	07 c0       	rjmp	.+14     	; 0x7ac8 <systemGenerateReport+0x11aa>
								  }else StrCalc(TMINUS,strCurrentMoney,strLastMoney,strDeltaMoney);
    7aba:	80 e0       	ldi	r24, 0x00	; 0
    7abc:	be 01       	movw	r22, r28
    7abe:	6a 5b       	subi	r22, 0xBA	; 186
    7ac0:	7f 4f       	sbci	r23, 0xFF	; 255
    7ac2:	ae 01       	movw	r20, r28
    7ac4:	48 5d       	subi	r20, 0xD8	; 216
    7ac6:	5f 4f       	sbci	r21, 0xFF	; 255
    7ac8:	2d e2       	ldi	r18, 0x2D	; 45
    7aca:	3c e0       	ldi	r19, 0x0C	; 12
    7acc:	0e 94 89 29 	call	0x5312	; 0x5312 <StrCalc>
								  //StrCalc(TMINUS,strCurrentMoney,strLastMoney,strDeltaMoney);
								  if (IsMinus(strDeltaMoney)==True)
    7ad0:	8d e2       	ldi	r24, 0x2D	; 45
    7ad2:	9c e0       	ldi	r25, 0x0C	; 12
    7ad4:	0e 94 8c 23 	call	0x4718	; 0x4718 <IsMinus>
    7ad8:	81 30       	cpi	r24, 0x01	; 1
    7ada:	21 f4       	brne	.+8      	; 0x7ae4 <systemGenerateReport+0x11c6>
								      NormalizeOverflow(strDeltaMoney);
    7adc:	8d e2       	ldi	r24, 0x2D	; 45
    7ade:	9c e0       	ldi	r25, 0x0C	; 12
    7ae0:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <NormalizeOverflow>
		  
								  StrCalc(TPLUS,strTotalVolume,strDeltaVolume,strTotalVolume);
    7ae4:	81 e0       	ldi	r24, 0x01	; 1
    7ae6:	67 ef       	ldi	r22, 0xF7	; 247
    7ae8:	77 e0       	ldi	r23, 0x07	; 7
    7aea:	45 e0       	ldi	r20, 0x05	; 5
    7aec:	59 e0       	ldi	r21, 0x09	; 9
    7aee:	9b 01       	movw	r18, r22
    7af0:	0e 94 89 29 	call	0x5312	; 0x5312 <StrCalc>
								  StrCalc(TPLUS,strTotalMoney,strDeltaMoney,strTotalMoney);
    7af4:	81 e0       	ldi	r24, 0x01	; 1
    7af6:	68 ea       	ldi	r22, 0xA8	; 168
    7af8:	78 e0       	ldi	r23, 0x08	; 8
    7afa:	4d e2       	ldi	r20, 0x2D	; 45
    7afc:	5c e0       	ldi	r21, 0x0C	; 12
    7afe:	9b 01       	movw	r18, r22
    7b00:	0e 94 89 29 	call	0x5312	; 0x5312 <StrCalc>

				  for(xPump=1;xPump<=8;xPump++){
				      eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap, 8);
			          PumpNum=PPumpID[xPump-1];
					  if (PumpNum>0){
						  for (xNozzle=1;xNozzle<=6;xNozzle++){
    7b04:	80 91 e6 01 	lds	r24, 0x01E6
    7b08:	8f 5f       	subi	r24, 0xFF	; 255
    7b0a:	80 93 e6 01 	sts	0x01E6, r24
    7b0e:	80 91 e6 01 	lds	r24, 0x01E6
    7b12:	87 30       	cpi	r24, 0x07	; 7
    7b14:	08 f4       	brcc	.+2      	; 0x7b18 <systemGenerateReport+0x11fa>
    7b16:	2f cf       	rjmp	.-418    	; 0x7976 <systemGenerateReport+0x1058>
			      GetProductName(xGrade,strProduct);
				  
				  FillChar(strTotalVolume,sizeof(strTotalVolume),0);
				  FillChar(strTotalMoney,sizeof(strTotalMoney),0);

				  for(xPump=1;xPump<=8;xPump++){
    7b18:	80 91 e7 01 	lds	r24, 0x01E7
    7b1c:	8f 5f       	subi	r24, 0xFF	; 255
    7b1e:	80 93 e7 01 	sts	0x01E7, r24
    7b22:	80 91 e7 01 	lds	r24, 0x01E7
    7b26:	89 30       	cpi	r24, 0x09	; 9
    7b28:	08 f4       	brcc	.+2      	; 0x7b2c <systemGenerateReport+0x120e>
    7b2a:	0d cf       	rjmp	.-486    	; 0x7946 <systemGenerateReport+0x1028>
							  }
						  }
					  }				  
				  }

				  RemZeroLead(strTotalMoney);
    7b2c:	18 ea       	ldi	r17, 0xA8	; 168
    7b2e:	a1 2e       	mov	r10, r17
    7b30:	18 e0       	ldi	r17, 0x08	; 8
    7b32:	b1 2e       	mov	r11, r17
    7b34:	c5 01       	movw	r24, r10
    7b36:	0e 94 51 25 	call	0x4aa2	; 0x4aa2 <RemZeroLead>
				  RemZeroLead(strTotalVolume);
    7b3a:	07 ef       	ldi	r16, 0xF7	; 247
    7b3c:	17 e0       	ldi	r17, 0x07	; 7
    7b3e:	c8 01       	movw	r24, r16
    7b40:	0e 94 51 25 	call	0x4aa2	; 0x4aa2 <RemZeroLead>

				  FormatTotalizerMoney(strTotalMoney);
    7b44:	c5 01       	movw	r24, r10
    7b46:	0e 94 57 34 	call	0x68ae	; 0x68ae <FormatTotalizerMoney>
				  FormatCurrency(strTotalMoney);
    7b4a:	c5 01       	movw	r24, r10
    7b4c:	0e 94 1f 33 	call	0x663e	; 0x663e <FormatCurrency>

				  FormatTotalizerVolume(strTotalVolume);
    7b50:	c8 01       	movw	r24, r16
    7b52:	0e 94 49 34 	call	0x6892	; 0x6892 <FormatTotalizerVolume>
				  FormatCurrency(strTotalVolume);
    7b56:	c8 01       	movw	r24, r16
    7b58:	0e 94 1f 33 	call	0x663e	; 0x663e <FormatCurrency>
		          //Test
				 // RemZeroLead(strTotalMoney);
				 // RemZeroLead(strTotalVolume);


			      GetTabSpace((21-strlen(strProduct)-strlen(strTotalVolume)),strTabSpace);
    7b5c:	be e5       	ldi	r27, 0x5E	; 94
    7b5e:	8b 2e       	mov	r8, r27
    7b60:	b7 e0       	ldi	r27, 0x07	; 7
    7b62:	9b 2e       	mov	r9, r27
    7b64:	f4 01       	movw	r30, r8
    7b66:	01 90       	ld	r0, Z+
    7b68:	00 20       	and	r0, r0
    7b6a:	e9 f7       	brne	.-6      	; 0x7b66 <systemGenerateReport+0x1248>
    7b6c:	31 97       	sbiw	r30, 0x01	; 1
    7b6e:	e8 19       	sub	r30, r8
    7b70:	f9 09       	sbc	r31, r9
    7b72:	d8 01       	movw	r26, r16
    7b74:	0d 90       	ld	r0, X+
    7b76:	00 20       	and	r0, r0
    7b78:	e9 f7       	brne	.-6      	; 0x7b74 <systemGenerateReport+0x1256>
    7b7a:	11 97       	sbiw	r26, 0x01	; 1
    7b7c:	a0 1b       	sub	r26, r16
    7b7e:	b1 0b       	sbc	r27, r17
    7b80:	e1 95       	neg	r30
    7b82:	ea 1b       	sub	r30, r26
    7b84:	a9 e6       	ldi	r26, 0x69	; 105
    7b86:	ea 2e       	mov	r14, r26
    7b88:	f1 2c       	mov	r15, r1
    7b8a:	ec 0e       	add	r14, r28
    7b8c:	fd 1e       	adc	r15, r29
    7b8e:	8e 2f       	mov	r24, r30
    7b90:	8b 5e       	subi	r24, 0xEB	; 235
    7b92:	b7 01       	movw	r22, r14
    7b94:	0e 94 46 1a 	call	0x348c	; 0x348c <GetTabSpace>
			      GetTabSpace((15-strlen(strTotalMoney)),strTabSpace2);
    7b98:	f5 01       	movw	r30, r10
    7b9a:	01 90       	ld	r0, Z+
    7b9c:	00 20       	and	r0, r0
    7b9e:	e9 f7       	brne	.-6      	; 0x7b9a <systemGenerateReport+0x127c>
    7ba0:	31 97       	sbiw	r30, 0x01	; 1
    7ba2:	ea 19       	sub	r30, r10
    7ba4:	fb 09       	sbc	r31, r11
    7ba6:	fd e7       	ldi	r31, 0x7D	; 125
    7ba8:	6f 2e       	mov	r6, r31
    7baa:	71 2c       	mov	r7, r1
    7bac:	6c 0e       	add	r6, r28
    7bae:	7d 1e       	adc	r7, r29
    7bb0:	8f e0       	ldi	r24, 0x0F	; 15
    7bb2:	8e 1b       	sub	r24, r30
    7bb4:	b3 01       	movw	r22, r6
    7bb6:	0e 94 46 1a 	call	0x348c	; 0x348c <GetTabSpace>

				  //PrintMoney
		          if (eeprom_read_byte(&DefPrintMoney)==True)sprintf_P(strReport,PSTR("%d.%s%s%s%s%s"),iTotal+1,strProduct,strTabSpace,strTotalVolume,strTabSpace2,strTotalMoney);
    7bba:	82 ec       	ldi	r24, 0xC2	; 194
    7bbc:	93 e0       	ldi	r25, 0x03	; 3
    7bbe:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
    7bc2:	75 ea       	ldi	r23, 0xA5	; 165
    7bc4:	c7 2e       	mov	r12, r23
    7bc6:	d1 2c       	mov	r13, r1
    7bc8:	cc 0e       	add	r12, r28
    7bca:	dd 1e       	adc	r13, r29
    7bcc:	92 01       	movw	r18, r4
    7bce:	2f 5f       	subi	r18, 0xFF	; 255
    7bd0:	3f 4f       	sbci	r19, 0xFF	; 255
    7bd2:	81 30       	cpi	r24, 0x01	; 1
    7bd4:	29 f5       	brne	.+74     	; 0x7c20 <systemGenerateReport+0x1302>
    7bd6:	ad b7       	in	r26, 0x3d	; 61
    7bd8:	be b7       	in	r27, 0x3e	; 62
    7bda:	50 97       	sbiw	r26, 0x10	; 16
    7bdc:	0f b6       	in	r0, 0x3f	; 63
    7bde:	f8 94       	cli
    7be0:	be bf       	out	0x3e, r27	; 62
    7be2:	0f be       	out	0x3f, r0	; 63
    7be4:	ad bf       	out	0x3d, r26	; 61
    7be6:	ed b7       	in	r30, 0x3d	; 61
    7be8:	fe b7       	in	r31, 0x3e	; 62
    7bea:	31 96       	adiw	r30, 0x01	; 1
    7bec:	12 96       	adiw	r26, 0x02	; 2
    7bee:	dc 92       	st	X, r13
    7bf0:	ce 92       	st	-X, r12
    7bf2:	11 97       	sbiw	r26, 0x01	; 1
    7bf4:	81 e7       	ldi	r24, 0x71	; 113
    7bf6:	95 e0       	ldi	r25, 0x05	; 5
    7bf8:	93 83       	std	Z+3, r25	; 0x03
    7bfa:	82 83       	std	Z+2, r24	; 0x02
    7bfc:	35 83       	std	Z+5, r19	; 0x05
    7bfe:	24 83       	std	Z+4, r18	; 0x04
    7c00:	97 82       	std	Z+7, r9	; 0x07
    7c02:	86 82       	std	Z+6, r8	; 0x06
    7c04:	f1 86       	std	Z+9, r15	; 0x09
    7c06:	e0 86       	std	Z+8, r14	; 0x08
    7c08:	13 87       	std	Z+11, r17	; 0x0b
    7c0a:	02 87       	std	Z+10, r16	; 0x0a
    7c0c:	75 86       	std	Z+13, r7	; 0x0d
    7c0e:	64 86       	std	Z+12, r6	; 0x0c
    7c10:	b7 86       	std	Z+15, r11	; 0x0f
    7c12:	a6 86       	std	Z+14, r10	; 0x0e
    7c14:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
    7c18:	ed b7       	in	r30, 0x3d	; 61
    7c1a:	fe b7       	in	r31, 0x3e	; 62
    7c1c:	70 96       	adiw	r30, 0x10	; 16
    7c1e:	22 c0       	rjmp	.+68     	; 0x7c64 <systemGenerateReport+0x1346>
				  else sprintf_P(strReport,PSTR("%d.%s%s%s"),iTotal+1,strProduct,strTabSpace,strTotalVolume);
    7c20:	8d b7       	in	r24, 0x3d	; 61
    7c22:	9e b7       	in	r25, 0x3e	; 62
    7c24:	0c 97       	sbiw	r24, 0x0c	; 12
    7c26:	0f b6       	in	r0, 0x3f	; 63
    7c28:	f8 94       	cli
    7c2a:	9e bf       	out	0x3e, r25	; 62
    7c2c:	0f be       	out	0x3f, r0	; 63
    7c2e:	8d bf       	out	0x3d, r24	; 61
    7c30:	ed b7       	in	r30, 0x3d	; 61
    7c32:	fe b7       	in	r31, 0x3e	; 62
    7c34:	31 96       	adiw	r30, 0x01	; 1
    7c36:	ad b7       	in	r26, 0x3d	; 61
    7c38:	be b7       	in	r27, 0x3e	; 62
    7c3a:	12 96       	adiw	r26, 0x02	; 2
    7c3c:	dc 92       	st	X, r13
    7c3e:	ce 92       	st	-X, r12
    7c40:	11 97       	sbiw	r26, 0x01	; 1
    7c42:	87 e6       	ldi	r24, 0x67	; 103
    7c44:	95 e0       	ldi	r25, 0x05	; 5
    7c46:	93 83       	std	Z+3, r25	; 0x03
    7c48:	82 83       	std	Z+2, r24	; 0x02
    7c4a:	35 83       	std	Z+5, r19	; 0x05
    7c4c:	24 83       	std	Z+4, r18	; 0x04
    7c4e:	97 82       	std	Z+7, r9	; 0x07
    7c50:	86 82       	std	Z+6, r8	; 0x06
    7c52:	f1 86       	std	Z+9, r15	; 0x09
    7c54:	e0 86       	std	Z+8, r14	; 0x08
    7c56:	13 87       	std	Z+11, r17	; 0x0b
    7c58:	02 87       	std	Z+10, r16	; 0x0a
    7c5a:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
    7c5e:	ed b7       	in	r30, 0x3d	; 61
    7c60:	fe b7       	in	r31, 0x3e	; 62
    7c62:	3c 96       	adiw	r30, 0x0c	; 12
    7c64:	0f b6       	in	r0, 0x3f	; 63
    7c66:	f8 94       	cli
    7c68:	fe bf       	out	0x3e, r31	; 62
    7c6a:	0f be       	out	0x3f, r0	; 63
    7c6c:	ed bf       	out	0x3d, r30	; 61

				  CreateReport(strReport,PrintBuffer,&RepPos);
    7c6e:	ce 01       	movw	r24, r28
    7c70:	8b 55       	subi	r24, 0x5B	; 91
    7c72:	9f 4f       	sbci	r25, 0xFF	; 255
    7c74:	6c ee       	ldi	r22, 0xEC	; 236
    7c76:	73 e0       	ldi	r23, 0x03	; 3
    7c78:	46 ed       	ldi	r20, 0xD6	; 214
    7c7a:	51 e0       	ldi	r21, 0x01	; 1
    7c7c:	0e 94 27 22 	call	0x444e	; 0x444e <CreateReport>
		  if (eeprom_read_byte(&DefPrintMoney)==True)sprintf_P(strReport,PSTR("TOTAL %s%s%s%s"),strTabSpace,strTotalVolume,strTabSpace2,strTotalMoney);//CreateReport(strReport,PrintBuffer,&RepPos);
		  else sprintf_P(strReport,PSTR("TOTAL %s%s"),strTabSpace,strTotalVolume);CreateReport(strReport,PrintBuffer,&RepPos);

		  InserBorder(btMiddleLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btMiddleRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);     	      

		  for(iTotal=0;iTotal<strlen(GradeList);iTotal++){
    7c80:	cb 50       	subi	r28, 0x0B	; 11
    7c82:	df 4f       	sbci	r29, 0xFF	; 255
    7c84:	f8 81       	ld	r31, Y
    7c86:	c5 5f       	subi	r28, 0xF5	; 245
    7c88:	d0 40       	sbci	r29, 0x00	; 0
    7c8a:	ff 5f       	subi	r31, 0xFF	; 255
    7c8c:	cb 50       	subi	r28, 0x0B	; 11
    7c8e:	df 4f       	sbci	r29, 0xFF	; 255
    7c90:	f8 83       	st	Y, r31
    7c92:	c5 5f       	subi	r28, 0xF5	; 245
    7c94:	d0 40       	sbci	r29, 0x00	; 0
    7c96:	e8 ed       	ldi	r30, 0xD8	; 216
    7c98:	f1 e0       	ldi	r31, 0x01	; 1
    7c9a:	01 90       	ld	r0, Z+
    7c9c:	00 20       	and	r0, r0
    7c9e:	e9 f7       	brne	.-6      	; 0x7c9a <systemGenerateReport+0x137c>
    7ca0:	31 97       	sbiw	r30, 0x01	; 1
    7ca2:	e8 5d       	subi	r30, 0xD8	; 216
    7ca4:	f1 40       	sbci	r31, 0x01	; 1
    7ca6:	cb 50       	subi	r28, 0x0B	; 11
    7ca8:	df 4f       	sbci	r29, 0xFF	; 255
    7caa:	88 81       	ld	r24, Y
    7cac:	c5 5f       	subi	r28, 0xF5	; 245
    7cae:	d0 40       	sbci	r29, 0x00	; 0
    7cb0:	48 2e       	mov	r4, r24
    7cb2:	55 24       	eor	r5, r5
    7cb4:	4e 16       	cp	r4, r30
    7cb6:	5f 06       	cpc	r5, r31
    7cb8:	08 f4       	brcc	.+2      	; 0x7cbc <systemGenerateReport+0x139e>
    7cba:	13 ce       	rjmp	.-986    	; 0x78e2 <systemGenerateReport+0xfc4>
				  else sprintf_P(strReport,PSTR("%d.%s%s%s"),iTotal+1,strProduct,strTabSpace,strTotalVolume);

				  CreateReport(strReport,PrintBuffer,&RepPos);
               }
		  }
          InserBorder(btBottomLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btBottomRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);
    7cbc:	87 e0       	ldi	r24, 0x07	; 7
    7cbe:	6c ee       	ldi	r22, 0xEC	; 236
    7cc0:	73 e0       	ldi	r23, 0x03	; 3
    7cc2:	41 e0       	ldi	r20, 0x01	; 1
    7cc4:	26 ed       	ldi	r18, 0xD6	; 214
    7cc6:	31 e0       	ldi	r19, 0x01	; 1
    7cc8:	0e 94 96 1a 	call	0x352c	; 0x352c <InserBorder>
    7ccc:	8b e0       	ldi	r24, 0x0B	; 11
    7cce:	6c ee       	ldi	r22, 0xEC	; 236
    7cd0:	73 e0       	ldi	r23, 0x03	; 3
    7cd2:	4a e2       	ldi	r20, 0x2A	; 42
    7cd4:	26 ed       	ldi	r18, 0xD6	; 214
    7cd6:	31 e0       	ldi	r19, 0x01	; 1
    7cd8:	0e 94 96 1a 	call	0x352c	; 0x352c <InserBorder>
    7cdc:	89 e0       	ldi	r24, 0x09	; 9
    7cde:	6c ee       	ldi	r22, 0xEC	; 236
    7ce0:	73 e0       	ldi	r23, 0x03	; 3
    7ce2:	41 e0       	ldi	r20, 0x01	; 1
    7ce4:	26 ed       	ldi	r18, 0xD6	; 214
    7ce6:	31 e0       	ldi	r19, 0x01	; 1
    7ce8:	0e 94 96 1a 	call	0x352c	; 0x352c <InserBorder>
    7cec:	8c e0       	ldi	r24, 0x0C	; 12
    7cee:	6c ee       	ldi	r22, 0xEC	; 236
    7cf0:	73 e0       	ldi	r23, 0x03	; 3
    7cf2:	41 e0       	ldi	r20, 0x01	; 1
    7cf4:	26 ed       	ldi	r18, 0xD6	; 214
    7cf6:	31 e0       	ldi	r19, 0x01	; 1
    7cf8:	0e 94 96 1a 	call	0x352c	; 0x352c <InserBorder>
		  InserBorder(btNewLine,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);
    7cfc:	8c e0       	ldi	r24, 0x0C	; 12
    7cfe:	6c ee       	ldi	r22, 0xEC	; 236
    7d00:	73 e0       	ldi	r23, 0x03	; 3
    7d02:	41 e0       	ldi	r20, 0x01	; 1
    7d04:	26 ed       	ldi	r18, 0xD6	; 214
    7d06:	31 e0       	ldi	r19, 0x01	; 1
    7d08:	0e 94 96 1a 	call	0x352c	; 0x352c <InserBorder>
    7d0c:	8c e0       	ldi	r24, 0x0C	; 12
    7d0e:	6c ee       	ldi	r22, 0xEC	; 236
    7d10:	73 e0       	ldi	r23, 0x03	; 3
    7d12:	41 e0       	ldi	r20, 0x01	; 1
    7d14:	26 ed       	ldi	r18, 0xD6	; 214
    7d16:	31 e0       	ldi	r19, 0x01	; 1
    7d18:	0e 94 96 1a 	call	0x352c	; 0x352c <InserBorder>
    7d1c:	8c e0       	ldi	r24, 0x0C	; 12
    7d1e:	6c ee       	ldi	r22, 0xEC	; 236
    7d20:	73 e0       	ldi	r23, 0x03	; 3
    7d22:	41 e0       	ldi	r20, 0x01	; 1
    7d24:	26 ed       	ldi	r18, 0xD6	; 214
    7d26:	31 e0       	ldi	r19, 0x01	; 1
    7d28:	0e 94 96 1a 	call	0x352c	; 0x352c <InserBorder>
    7d2c:	8c e0       	ldi	r24, 0x0C	; 12
    7d2e:	6c ee       	ldi	r22, 0xEC	; 236
    7d30:	73 e0       	ldi	r23, 0x03	; 3
    7d32:	41 e0       	ldi	r20, 0x01	; 1
    7d34:	26 ed       	ldi	r18, 0xD6	; 214
    7d36:	31 e0       	ldi	r19, 0x01	; 1
    7d38:	0e 94 96 1a 	call	0x352c	; 0x352c <InserBorder>
    7d3c:	8c e0       	ldi	r24, 0x0C	; 12
    7d3e:	6c ee       	ldi	r22, 0xEC	; 236
    7d40:	73 e0       	ldi	r23, 0x03	; 3
    7d42:	41 e0       	ldi	r20, 0x01	; 1
    7d44:	26 ed       	ldi	r18, 0xD6	; 214
    7d46:	31 e0       	ldi	r19, 0x01	; 1
    7d48:	0e 94 96 1a 	call	0x352c	; 0x352c <InserBorder>


          cmdPrint=0b00010000|(1<<PRN_PAPER_CUT);
    7d4c:	80 e3       	ldi	r24, 0x30	; 48
    7d4e:	80 93 b5 01 	sts	0x01B5, r24
		  LengthMessage81=RepPos+1;
    7d52:	80 91 d6 01 	lds	r24, 0x01D6
    7d56:	90 91 d7 01 	lds	r25, 0x01D7
    7d5a:	01 96       	adiw	r24, 0x01	; 1
    7d5c:	90 93 8e 01 	sts	0x018E, r25
    7d60:	80 93 8d 01 	sts	0x018D, r24
		  IsFreePrinting=True;
    7d64:	81 e0       	ldi	r24, 0x01	; 1
    7d66:	80 93 a8 01 	sts	0x01A8, r24
	      IsBusyFreePrinting=True; 
    7d6a:	80 93 b4 01 	sts	0x01B4, r24
         	       
	      stGenerateReport=grWaitPrinted3;
    7d6e:	8b e0       	ldi	r24, 0x0B	; 11
    7d70:	05 c0       	rjmp	.+10     	; 0x7d7c <systemGenerateReport+0x145e>
	      break;
     case grWaitPrinted3:
          if (IsBusyFreePrinting==False)stGenerateReport=grFinishGenerateReport;
    7d72:	80 91 b4 01 	lds	r24, 0x01B4
    7d76:	88 23       	and	r24, r24
    7d78:	49 f4       	brne	.+18     	; 0x7d8c <systemGenerateReport+0x146e>
    7d7a:	8c e0       	ldi	r24, 0x0C	; 12
    7d7c:	80 93 e8 01 	sts	0x01E8, r24
    7d80:	05 c0       	rjmp	.+10     	; 0x7d8c <systemGenerateReport+0x146e>
	      break;
     case grFinishGenerateReport:
	      IsFinishPrintingTotalizer=True;
    7d82:	81 e0       	ldi	r24, 0x01	; 1
    7d84:	80 93 87 01 	sts	0x0187, r24
          stGenerateReport=grScanAction;
    7d88:	10 92 e8 01 	sts	0x01E8, r1
	      break;
	 }
}
    7d8c:	c5 50       	subi	r28, 0x05	; 5
    7d8e:	df 4f       	sbci	r29, 0xFF	; 255
    7d90:	0f b6       	in	r0, 0x3f	; 63
    7d92:	f8 94       	cli
    7d94:	de bf       	out	0x3e, r29	; 62
    7d96:	0f be       	out	0x3f, r0	; 63
    7d98:	cd bf       	out	0x3d, r28	; 61
    7d9a:	cf 91       	pop	r28
    7d9c:	df 91       	pop	r29
    7d9e:	1f 91       	pop	r17
    7da0:	0f 91       	pop	r16
    7da2:	ff 90       	pop	r15
    7da4:	ef 90       	pop	r14
    7da6:	df 90       	pop	r13
    7da8:	cf 90       	pop	r12
    7daa:	bf 90       	pop	r11
    7dac:	af 90       	pop	r10
    7dae:	9f 90       	pop	r9
    7db0:	8f 90       	pop	r8
    7db2:	7f 90       	pop	r7
    7db4:	6f 90       	pop	r6
    7db6:	5f 90       	pop	r5
    7db8:	4f 90       	pop	r4
    7dba:	3f 90       	pop	r3
    7dbc:	2f 90       	pop	r2
    7dbe:	08 95       	ret

00007dc0 <ViewCardID>:
}




void ViewCardID(){//+12345678 -->12345678
    7dc0:	cf 93       	push	r28
    7dc2:	df 93       	push	r29
     char i,Length;
	 Length=strlen(strRFID);
    7dc4:	e1 e5       	ldi	r30, 0x51	; 81
    7dc6:	fc e0       	ldi	r31, 0x0C	; 12
    7dc8:	01 90       	ld	r0, Z+
    7dca:	00 20       	and	r0, r0
    7dcc:	e9 f7       	brne	.-6      	; 0x7dc8 <ViewCardID+0x8>
    7dce:	31 97       	sbiw	r30, 0x01	; 1
    7dd0:	e1 55       	subi	r30, 0x51	; 81
    7dd2:	fc 40       	sbci	r31, 0x0C	; 12
     if (Length>15)Length=10;
    7dd4:	e0 31       	cpi	r30, 0x10	; 16
    7dd6:	08 f0       	brcs	.+2      	; 0x7dda <ViewCardID+0x1a>
    7dd8:	ea e0       	ldi	r30, 0x0A	; 10
    7dda:	a1 e5       	ldi	r26, 0x51	; 81
    7ddc:	bc e0       	ldi	r27, 0x0C	; 12
    7dde:	c9 e8       	ldi	r28, 0x89	; 137
    7de0:	db e0       	ldi	r29, 0x0B	; 11
	 for(i=0;i<Length;i++){         //00000000000012345678
    7de2:	f0 e0       	ldi	r31, 0x00	; 0
    7de4:	9f 01       	movw	r18, r30
    7de6:	2a 0f       	add	r18, r26
    7de8:	3b 1f       	adc	r19, r27
    7dea:	02 c0       	rjmp	.+4      	; 0x7df0 <ViewCardID+0x30>
		strCardID[i]=strRFID[i];
    7dec:	8d 91       	ld	r24, X+
    7dee:	89 93       	st	Y+, r24

void ViewCardID(){//+12345678 -->12345678
     char i,Length;
	 Length=strlen(strRFID);
     if (Length>15)Length=10;
	 for(i=0;i<Length;i++){         //00000000000012345678
    7df0:	a2 17       	cp	r26, r18
    7df2:	b3 07       	cpc	r27, r19
    7df4:	d9 f7       	brne	.-10     	; 0x7dec <ViewCardID+0x2c>
		strCardID[i]=strRFID[i];
	 }strCardID[Length]=0;     
    7df6:	e7 57       	subi	r30, 0x77	; 119
    7df8:	f4 4f       	sbci	r31, 0xF4	; 244
    7dfa:	10 82       	st	Z, r1
}
    7dfc:	df 91       	pop	r29
    7dfe:	cf 91       	pop	r28
    7e00:	08 95       	ret

00007e02 <UpdateCardID>:
	 else SeqNum=0;
	 leadingZero(SeqNum,strSeqNum);
	 */
} 

void UpdateCardID(){
    7e02:	cf 93       	push	r28
    7e04:	df 93       	push	r29
     char i,LengthID;
	 LengthID=strlen(strRFID);  //           +12345678  
    7e06:	e1 e5       	ldi	r30, 0x51	; 81
    7e08:	fc e0       	ldi	r31, 0x0C	; 12
    7e0a:	01 90       	ld	r0, Z+
    7e0c:	00 20       	and	r0, r0
    7e0e:	e9 f7       	brne	.-6      	; 0x7e0a <UpdateCardID+0x8>
    7e10:	31 97       	sbiw	r30, 0x01	; 1
    7e12:	e1 55       	subi	r30, 0x51	; 81
    7e14:	fc 40       	sbci	r31, 0x0C	; 12
    7e16:	a9 e8       	ldi	r26, 0x89	; 137
    7e18:	bb e0       	ldi	r27, 0x0B	; 11
	 else SeqNum=0;
	 leadingZero(SeqNum,strSeqNum);
	 */
} 

void UpdateCardID(){
    7e1a:	f0 e0       	ldi	r31, 0x00	; 0
    7e1c:	ef 01       	movw	r28, r30
    7e1e:	c3 5c       	subi	r28, 0xC3	; 195
    7e20:	d3 4f       	sbci	r29, 0xF3	; 243
    7e22:	20 e0       	ldi	r18, 0x00	; 0
    7e24:	30 e0       	ldi	r19, 0x00	; 0
     char i,LengthID;
	 LengthID=strlen(strRFID);  //           +12345678  
	 for(i=0;i<20;i++){         //SSSSSSSSSSSS12345678
	    if (i<(20-LengthID))strCardID[i]=' ';
    7e26:	44 e1       	ldi	r20, 0x14	; 20
    7e28:	50 e0       	ldi	r21, 0x00	; 0
    7e2a:	4e 1b       	sub	r20, r30
    7e2c:	5f 0b       	sbc	r21, r31
    7e2e:	90 e2       	ldi	r25, 0x20	; 32
    7e30:	24 17       	cp	r18, r20
    7e32:	35 07       	cpc	r19, r21
    7e34:	14 f4       	brge	.+4      	; 0x7e3a <UpdateCardID+0x38>
    7e36:	9c 93       	st	X, r25
    7e38:	02 c0       	rjmp	.+4      	; 0x7e3e <UpdateCardID+0x3c>
		else strCardID[i]=strRFID[i-(20-LengthID)];
    7e3a:	88 81       	ld	r24, Y
    7e3c:	8c 93       	st	X, r24
    7e3e:	2f 5f       	subi	r18, 0xFF	; 255
    7e40:	3f 4f       	sbci	r19, 0xFF	; 255
    7e42:	11 96       	adiw	r26, 0x01	; 1
    7e44:	21 96       	adiw	r28, 0x01	; 1
} 

void UpdateCardID(){
     char i,LengthID;
	 LengthID=strlen(strRFID);  //           +12345678  
	 for(i=0;i<20;i++){         //SSSSSSSSSSSS12345678
    7e46:	24 31       	cpi	r18, 0x14	; 20
    7e48:	31 05       	cpc	r19, r1
    7e4a:	91 f7       	brne	.-28     	; 0x7e30 <UpdateCardID+0x2e>
	    if (i<(20-LengthID))strCardID[i]=' ';
		else strCardID[i]=strRFID[i-(20-LengthID)];
	 }strCardID[20]=0;
    7e4c:	10 92 9d 0b 	sts	0x0B9D, r1

}
    7e50:	df 91       	pop	r29
    7e52:	cf 91       	pop	r28
    7e54:	08 95       	ret

00007e56 <GenerateTransactionNum>:
		 //else Result=PS_NO_DATA;    		    
	 }	
   return Result;
}

void GenerateTransactionNum(char *sTransNumber){//Create and Save TransactionNumber to EEPROM
    7e56:	cf 92       	push	r12
    7e58:	df 92       	push	r13
    7e5a:	ef 92       	push	r14
    7e5c:	ff 92       	push	r15
    7e5e:	0f 93       	push	r16
    7e60:	1f 93       	push	r17
    7e62:	df 93       	push	r29
    7e64:	cf 93       	push	r28
    7e66:	cd b7       	in	r28, 0x3d	; 61
    7e68:	de b7       	in	r29, 0x3e	; 62
    7e6a:	27 97       	sbiw	r28, 0x07	; 7
    7e6c:	0f b6       	in	r0, 0x3f	; 63
    7e6e:	f8 94       	cli
    7e70:	de bf       	out	0x3e, r29	; 62
    7e72:	0f be       	out	0x3f, r0	; 63
    7e74:	cd bf       	out	0x3d, r28	; 61
    7e76:	6c 01       	movw	r12, r24
    7e78:	fe 01       	movw	r30, r28
    7e7a:	31 96       	adiw	r30, 0x01	; 1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    7e7c:	ce 01       	movw	r24, r28
    7e7e:	08 96       	adiw	r24, 0x08	; 8
	     strMemory[i]=data;
    7e80:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    7e82:	e8 17       	cp	r30, r24
    7e84:	f9 07       	cpc	r31, r25
    7e86:	e1 f7       	brne	.-8      	; 0x7e80 <GenerateTransactionNum+0x2a>
}

void GenerateTransactionNum(char *sTransNumber){//Create and Save TransactionNumber to EEPROM
     char i,PTransNum[7],cNum,xNum=0,xAdd=0,Length=0;
	 FillChar(PTransNum,sizeof(PTransNum),0);//"999999"->"000000"
     eeprom_read_block((void*) &PTransNum, (const void*) &DefTransactionNumber,sizeof(DefTransactionNumber));
    7e88:	8e 01       	movw	r16, r28
    7e8a:	0f 5f       	subi	r16, 0xFF	; 255
    7e8c:	1f 4f       	sbci	r17, 0xFF	; 255
    7e8e:	c8 01       	movw	r24, r16
    7e90:	69 e3       	ldi	r22, 0x39	; 57
    7e92:	71 e0       	ldi	r23, 0x01	; 1
    7e94:	47 e0       	ldi	r20, 0x07	; 7
    7e96:	50 e0       	ldi	r21, 0x00	; 0
    7e98:	0e 94 30 ad 	call	0x15a60	; 0x15a60 <__eerd_block_m128>
     xAdd=1;
	 xNum=0;
	 Length=strlen(PTransNum);
    7e9c:	f8 01       	movw	r30, r16
    7e9e:	01 90       	ld	r0, Z+
    7ea0:	00 20       	and	r0, r0
    7ea2:	e9 f7       	brne	.-6      	; 0x7e9e <GenerateTransactionNum+0x48>
    7ea4:	31 97       	sbiw	r30, 0x01	; 1
    7ea6:	e0 1b       	sub	r30, r16
		 //else Result=PS_NO_DATA;    		    
	 }	
   return Result;
}

void GenerateTransactionNum(char *sTransNumber){//Create and Save TransactionNumber to EEPROM
    7ea8:	f0 e0       	ldi	r31, 0x00	; 0
    7eaa:	0e 0f       	add	r16, r30
    7eac:	1f 1f       	adc	r17, r31
    7eae:	31 97       	sbiw	r30, 0x01	; 1
    7eb0:	76 01       	movw	r14, r12
    7eb2:	ee 0e       	add	r14, r30
    7eb4:	ff 1e       	adc	r15, r31
    7eb6:	31 96       	adiw	r30, 0x01	; 1
    7eb8:	61 e0       	ldi	r22, 0x01	; 1
    7eba:	19 c0       	rjmp	.+50     	; 0x7eee <GenerateTransactionNum+0x98>
	 xNum=0;
	 Length=strlen(PTransNum);

	 for(i=0;i<Length;i++){//[000009] 999999 123456
	     xNum=PTransNum[Length-i-1]-'0';		 
		 cNum='0'+((xNum+xAdd)%10);
    7ebc:	d8 01       	movw	r26, r16
    7ebe:	2c 91       	ld	r18, X
    7ec0:	20 53       	subi	r18, 0x30	; 48
    7ec2:	30 e0       	ldi	r19, 0x00	; 0
    7ec4:	26 0f       	add	r18, r22
    7ec6:	31 1d       	adc	r19, r1
    7ec8:	c9 01       	movw	r24, r18
    7eca:	6a e0       	ldi	r22, 0x0A	; 10
    7ecc:	70 e0       	ldi	r23, 0x00	; 0
    7ece:	0e 94 8e aa 	call	0x1551c	; 0x1551c <__divmodhi4>
    7ed2:	48 2f       	mov	r20, r24
    7ed4:	40 5d       	subi	r20, 0xD0	; 208
		 xAdd=((xNum+xAdd)/10);
    7ed6:	c9 01       	movw	r24, r18
    7ed8:	6a e0       	ldi	r22, 0x0A	; 10
    7eda:	70 e0       	ldi	r23, 0x00	; 0
    7edc:	0e 94 8e aa 	call	0x1551c	; 0x1551c <__divmodhi4>
		 PTransNum[Length-i-1]=cNum;
    7ee0:	d8 01       	movw	r26, r16
    7ee2:	4c 93       	st	X, r20
		 sTransNumber[Length-i-1]=cNum;
    7ee4:	d7 01       	movw	r26, r14
    7ee6:	4c 93       	st	X, r20
    7ee8:	08 94       	sec
    7eea:	e1 08       	sbc	r14, r1
    7eec:	f1 08       	sbc	r15, r1
    7eee:	01 50       	subi	r16, 0x01	; 1
    7ef0:	10 40       	sbci	r17, 0x00	; 0
     eeprom_read_block((void*) &PTransNum, (const void*) &DefTransactionNumber,sizeof(DefTransactionNumber));
     xAdd=1;
	 xNum=0;
	 Length=strlen(PTransNum);

	 for(i=0;i<Length;i++){//[000009] 999999 123456
    7ef2:	0c 17       	cp	r16, r28
    7ef4:	1d 07       	cpc	r17, r29
    7ef6:	11 f7       	brne	.-60     	; 0x7ebc <GenerateTransactionNum+0x66>
		 cNum='0'+((xNum+xAdd)%10);
		 xAdd=((xNum+xAdd)/10);
		 PTransNum[Length-i-1]=cNum;
		 sTransNumber[Length-i-1]=cNum;
	 }
	 sTransNumber[Length]=0;
    7ef8:	ce 0e       	add	r12, r30
    7efa:	df 1e       	adc	r13, r31
    7efc:	d6 01       	movw	r26, r12
    7efe:	1c 92       	st	X, r1
	 PTransNum[Length]=0;
    7f00:	ce 01       	movw	r24, r28
    7f02:	01 96       	adiw	r24, 0x01	; 1
    7f04:	e8 0f       	add	r30, r24
    7f06:	f9 1f       	adc	r31, r25
    7f08:	10 82       	st	Z, r1

     eeprom_write_block((const void*)&PTransNum,(void*)&DefTransactionNumber,sizeof(DefTransactionNumber));
    7f0a:	69 e3       	ldi	r22, 0x39	; 57
    7f0c:	71 e0       	ldi	r23, 0x01	; 1
    7f0e:	47 e0       	ldi	r20, 0x07	; 7
    7f10:	50 e0       	ldi	r21, 0x00	; 0
    7f12:	0e 94 48 ad 	call	0x15a90	; 0x15a90 <__eewr_block_m128>
}
    7f16:	27 96       	adiw	r28, 0x07	; 7
    7f18:	0f b6       	in	r0, 0x3f	; 63
    7f1a:	f8 94       	cli
    7f1c:	de bf       	out	0x3e, r29	; 62
    7f1e:	0f be       	out	0x3f, r0	; 63
    7f20:	cd bf       	out	0x3d, r28	; 61
    7f22:	cf 91       	pop	r28
    7f24:	df 91       	pop	r29
    7f26:	1f 91       	pop	r17
    7f28:	0f 91       	pop	r16
    7f2a:	ff 90       	pop	r15
    7f2c:	ef 90       	pop	r14
    7f2e:	df 90       	pop	r13
    7f30:	cf 90       	pop	r12
    7f32:	08 95       	ret

00007f34 <GetParameter>:
	}
  return  PosFound;
}


void GetParameter(char *GFlow,char FLength,char *GCmd,char *GPumpID, char *GeniCSum){
    7f34:	8f 92       	push	r8
    7f36:	9f 92       	push	r9
    7f38:	af 92       	push	r10
    7f3a:	bf 92       	push	r11
    7f3c:	cf 92       	push	r12
    7f3e:	df 92       	push	r13
    7f40:	ef 92       	push	r14
    7f42:	ff 92       	push	r15
    7f44:	0f 93       	push	r16
    7f46:	1f 93       	push	r17
    7f48:	df 93       	push	r29
    7f4a:	cf 93       	push	r28
    7f4c:	cd b7       	in	r28, 0x3d	; 61
    7f4e:	de b7       	in	r29, 0x3e	; 62
    7f50:	a7 97       	sbiw	r28, 0x27	; 39
    7f52:	0f b6       	in	r0, 0x3f	; 63
    7f54:	f8 94       	cli
    7f56:	de bf       	out	0x3e, r29	; 62
    7f58:	0f be       	out	0x3f, r0	; 63
    7f5a:	cd bf       	out	0x3d, r28	; 61
    7f5c:	79 01       	movw	r14, r18
    7f5e:	48 01       	movw	r8, r16
    7f60:	e6 2f       	mov	r30, r22
    7f62:	f0 e0       	ldi	r31, 0x00	; 0
    7f64:	31 97       	sbiw	r30, 0x01	; 1
    7f66:	e8 0f       	add	r30, r24
    7f68:	f9 1f       	adc	r31, r25
    7f6a:	9e 01       	movw	r18, r28
    7f6c:	26 5f       	subi	r18, 0xF6	; 246
    7f6e:	3f 4f       	sbci	r19, 0xFF	; 255
    7f70:	d9 01       	movw	r26, r18
    7f72:	03 c0       	rjmp	.+6      	; 0x7f7a <GetParameter+0x46>
char strSend[20],strSub[3];
int SumLength;

     //TransposeFlow
     for (i=0;i<FLength;i++){	 
	     SGeniusFlow[i]=GFlow[FLength-i-1];
    7f74:	80 81       	ld	r24, Z
    7f76:	8d 93       	st	X+, r24
    7f78:	31 97       	sbiw	r30, 0x01	; 1
char SGeniusFlow[30];
char strSend[20],strSub[3];
int SumLength;

     //TransposeFlow
     for (i=0;i<FLength;i++){	 
    7f7a:	8a 2f       	mov	r24, r26
    7f7c:	82 1b       	sub	r24, r18
    7f7e:	86 17       	cp	r24, r22
    7f80:	c8 f3       	brcs	.-14     	; 0x7f74 <GetParameter+0x40>
	     SGeniusFlow[i]=GFlow[FLength-i-1];
	 }SGeniusFlow[FLength]=0;
    7f82:	c6 2e       	mov	r12, r22
    7f84:	dd 24       	eor	r13, r13
    7f86:	6a e0       	ldi	r22, 0x0A	; 10
    7f88:	a6 2e       	mov	r10, r22
    7f8a:	b1 2c       	mov	r11, r1
    7f8c:	ac 0e       	add	r10, r28
    7f8e:	bd 1e       	adc	r11, r29
    7f90:	f5 01       	movw	r30, r10
    7f92:	ec 0d       	add	r30, r12
    7f94:	fd 1d       	adc	r31, r13
    7f96:	10 82       	st	Z, r1

	 xCmd=CharPosCopy(SGeniusFlow,0);
	 *GCmd=xCmd;
    7f98:	8a 85       	ldd	r24, Y+10	; 0x0a
    7f9a:	fa 01       	movw	r30, r20
    7f9c:	80 83       	st	Z, r24
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    7f9e:	8b 85       	ldd	r24, Y+11	; 0x0b
    7fa0:	89 83       	std	Y+1, r24	; 0x01
    7fa2:	8c 85       	ldd	r24, Y+12	; 0x0c
    7fa4:	8a 83       	std	Y+2, r24	; 0x02
	 }Dest[Length]=0;
    7fa6:	1b 82       	std	Y+3, r1	; 0x03
	 }SGeniusFlow[FLength]=0;

	 xCmd=CharPosCopy(SGeniusFlow,0);
	 *GCmd=xCmd;
	 StrPosCopy(SGeniusFlow,sPumpID,1,2);
	 xPumpID=atoi(sPumpID);
    7fa8:	ce 01       	movw	r24, r28
    7faa:	01 96       	adiw	r24, 0x01	; 1
    7fac:	0e 94 c3 aa 	call	0x15586	; 0x15586 <atoi>
	 *GPumpID=xPumpID;
    7fb0:	f7 01       	movw	r30, r14
    7fb2:	80 83       	st	Z, r24
	 sprintf_P(strSub,PSTR(":"));
    7fb4:	00 d0       	rcall	.+0      	; 0x7fb6 <GetParameter+0x82>
    7fb6:	00 d0       	rcall	.+0      	; 0x7fb8 <GetParameter+0x84>
    7fb8:	57 e0       	ldi	r21, 0x07	; 7
    7fba:	e5 2e       	mov	r14, r21
    7fbc:	f1 2c       	mov	r15, r1
    7fbe:	ec 0e       	add	r14, r28
    7fc0:	fd 1e       	adc	r15, r29
    7fc2:	ed b7       	in	r30, 0x3d	; 61
    7fc4:	fe b7       	in	r31, 0x3e	; 62
    7fc6:	f2 82       	std	Z+2, r15	; 0x02
    7fc8:	e1 82       	std	Z+1, r14	; 0x01
    7fca:	8d e5       	ldi	r24, 0x5D	; 93
    7fcc:	95 e0       	ldi	r25, 0x05	; 5
    7fce:	94 83       	std	Z+4, r25	; 0x04
    7fd0:	83 83       	std	Z+3, r24	; 0x03
    7fd2:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	 if (Pos(strSub,SGeniusFlow)<FLength){
    7fd6:	0f 90       	pop	r0
    7fd8:	0f 90       	pop	r0
    7fda:	0f 90       	pop	r0
    7fdc:	0f 90       	pop	r0
    7fde:	c7 01       	movw	r24, r14
    7fe0:	b5 01       	movw	r22, r10
    7fe2:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <Pos>
    7fe6:	8c 15       	cp	r24, r12
    7fe8:	9d 05       	cpc	r25, r13
    7fea:	4c f5       	brge	.+82     	; 0x803e <GetParameter+0x10a>
	     SumLength=FLength-Pos(strSub,SGeniusFlow);
    7fec:	c7 01       	movw	r24, r14
    7fee:	b5 01       	movw	r22, r10
    7ff0:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <Pos>
    7ff4:	8c 01       	movw	r16, r24
	 	 StrPosCopy(SGeniusFlow,sCSum,Pos(strSub,SGeniusFlow)+1,SumLength);
    7ff6:	c7 01       	movw	r24, r14
    7ff8:	b5 01       	movw	r22, r10
    7ffa:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <Pos>
    7ffe:	a6 01       	movw	r20, r12
    8000:	40 1b       	sub	r20, r16
    8002:	51 0b       	sbc	r21, r17
    8004:	d5 01       	movw	r26, r10
    8006:	a8 0f       	add	r26, r24
    8008:	b9 1f       	adc	r27, r25
    800a:	20 e0       	ldi	r18, 0x00	; 0
    800c:	30 e0       	ldi	r19, 0x00	; 0
    800e:	be 01       	movw	r22, r28
    8010:	6c 5f       	subi	r22, 0xFC	; 252
    8012:	7f 4f       	sbci	r23, 0xFF	; 255
    8014:	07 c0       	rjmp	.+14     	; 0x8024 <GetParameter+0xf0>
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8016:	fb 01       	movw	r30, r22
    8018:	e2 0f       	add	r30, r18
    801a:	f3 1f       	adc	r31, r19
    801c:	8c 91       	ld	r24, X
    801e:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8020:	2f 5f       	subi	r18, 0xFF	; 255
    8022:	3f 4f       	sbci	r19, 0xFF	; 255
    8024:	11 96       	adiw	r26, 0x01	; 1
    8026:	24 17       	cp	r18, r20
    8028:	35 07       	cpc	r19, r21
    802a:	a8 f3       	brcs	.-22     	; 0x8016 <GetParameter+0xe2>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    802c:	46 0f       	add	r20, r22
    802e:	57 1f       	adc	r21, r23
    8030:	fa 01       	movw	r30, r20
    8032:	10 82       	st	Z, r1
	 *GPumpID=xPumpID;
	 sprintf_P(strSub,PSTR(":"));
	 if (Pos(strSub,SGeniusFlow)<FLength){
	     SumLength=FLength-Pos(strSub,SGeniusFlow);
	 	 StrPosCopy(SGeniusFlow,sCSum,Pos(strSub,SGeniusFlow)+1,SumLength);
		 xCsum=atoi(sCSum);
    8034:	cb 01       	movw	r24, r22
    8036:	0e 94 c3 aa 	call	0x15586	; 0x15586 <atoi>
	     *GeniCSum=xCsum;
    803a:	f4 01       	movw	r30, r8
    803c:	80 83       	st	Z, r24
	 sprintf_P(strSend,PSTR("%d"),xPumpID);
	 uart_print(1,1,strSend);
	 sprintf_P(strSend,PSTR("%s"),sCSum);
	 uart_print(1,1,strSend);
*/
}
    803e:	a7 96       	adiw	r28, 0x27	; 39
    8040:	0f b6       	in	r0, 0x3f	; 63
    8042:	f8 94       	cli
    8044:	de bf       	out	0x3e, r29	; 62
    8046:	0f be       	out	0x3f, r0	; 63
    8048:	cd bf       	out	0x3d, r28	; 61
    804a:	cf 91       	pop	r28
    804c:	df 91       	pop	r29
    804e:	1f 91       	pop	r17
    8050:	0f 91       	pop	r16
    8052:	ff 90       	pop	r15
    8054:	ef 90       	pop	r14
    8056:	df 90       	pop	r13
    8058:	cf 90       	pop	r12
    805a:	bf 90       	pop	r11
    805c:	af 90       	pop	r10
    805e:	9f 90       	pop	r9
    8060:	8f 90       	pop	r8
    8062:	08 95       	ret

00008064 <GeniusProtocol>:
   return Result;	 
}

//enum eGeniusProtocolCommand{GP_PUMP_STATUS,GP_PUMP_LAST_TRANSACTION,GP_PUMP_STOP,GP_PUMP_RESUME,GP_PUMP_PRESET};

void GeniusProtocol(char dataIn){
    8064:	ff 92       	push	r15
    8066:	0f 93       	push	r16
    8068:	1f 93       	push	r17
    806a:	df 93       	push	r29
    806c:	cf 93       	push	r28
    806e:	cd b7       	in	r28, 0x3d	; 61
    8070:	de b7       	in	r29, 0x3e	; 62
    8072:	67 97       	sbiw	r28, 0x17	; 23
    8074:	0f b6       	in	r0, 0x3f	; 63
    8076:	f8 94       	cli
    8078:	de bf       	out	0x3e, r29	; 62
    807a:	0f be       	out	0x3f, r0	; 63
    807c:	cd bf       	out	0x3d, r28	; 61
    807e:	f8 2e       	mov	r15, r24
	 char i,GeniCmd,GeniPumpID,GeniCSum;//,sCmd[7];
	 char strSend[20];

    //uart(1,1,dataIn);

	if (dataIn==0x0D){	
    8080:	8d e0       	ldi	r24, 0x0D	; 13
    8082:	f8 16       	cp	r15, r24
    8084:	09 f0       	breq	.+2      	; 0x8088 <GeniusProtocol+0x24>
    8086:	45 c0       	rjmp	.+138    	; 0x8112 <GeniusProtocol+0xae>
	    GetParameter(Geniflow,FlowLength,&GeniCmd,&GeniPumpID,&GeniCSum);
    8088:	82 ec       	ldi	r24, 0xC2	; 194
    808a:	91 e0       	ldi	r25, 0x01	; 1
    808c:	60 91 c1 01 	lds	r22, 0x01C1
    8090:	ae 01       	movw	r20, r28
    8092:	4f 5f       	subi	r20, 0xFF	; 255
    8094:	5f 4f       	sbci	r21, 0xFF	; 255
    8096:	9e 01       	movw	r18, r28
    8098:	2e 5f       	subi	r18, 0xFE	; 254
    809a:	3f 4f       	sbci	r19, 0xFF	; 255
    809c:	8e 01       	movw	r16, r28
    809e:	0d 5f       	subi	r16, 0xFD	; 253
    80a0:	1f 4f       	sbci	r17, 0xFF	; 255
    80a2:	0e 94 9a 3f 	call	0x7f34	; 0x7f34 <GetParameter>
		FlowLength=0;
    80a6:	10 92 c1 01 	sts	0x01C1, r1
		IsGeniusFlow=False;
    80aa:	10 92 c0 01 	sts	0x01C0, r1
		FillChar(strSend,0,sizeof(strSend));
		sprintf_P(strSend,PSTR("%c%.2d:"),GeniCmd,GeniPumpID);
    80ae:	ad b7       	in	r26, 0x3d	; 61
    80b0:	be b7       	in	r27, 0x3e	; 62
    80b2:	18 97       	sbiw	r26, 0x08	; 8
    80b4:	0f b6       	in	r0, 0x3f	; 63
    80b6:	f8 94       	cli
    80b8:	be bf       	out	0x3e, r27	; 62
    80ba:	0f be       	out	0x3f, r0	; 63
    80bc:	ad bf       	out	0x3d, r26	; 61
    80be:	ed b7       	in	r30, 0x3d	; 61
    80c0:	fe b7       	in	r31, 0x3e	; 62
    80c2:	31 96       	adiw	r30, 0x01	; 1
    80c4:	8e 01       	movw	r16, r28
    80c6:	0c 5f       	subi	r16, 0xFC	; 252
    80c8:	1f 4f       	sbci	r17, 0xFF	; 255
    80ca:	12 96       	adiw	r26, 0x02	; 2
    80cc:	1c 93       	st	X, r17
    80ce:	0e 93       	st	-X, r16
    80d0:	11 97       	sbiw	r26, 0x01	; 1
    80d2:	8f e4       	ldi	r24, 0x4F	; 79
    80d4:	95 e0       	ldi	r25, 0x05	; 5
    80d6:	93 83       	std	Z+3, r25	; 0x03
    80d8:	82 83       	std	Z+2, r24	; 0x02
    80da:	89 81       	ldd	r24, Y+1	; 0x01
    80dc:	84 83       	std	Z+4, r24	; 0x04
    80de:	15 82       	std	Z+5, r1	; 0x05
    80e0:	8a 81       	ldd	r24, Y+2	; 0x02
    80e2:	86 83       	std	Z+6, r24	; 0x06
    80e4:	17 82       	std	Z+7, r1	; 0x07
    80e6:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
		//uart_print(1,1,strSend);


		if ((SumChecksum(strSend))==GeniCSum){
    80ea:	8d b7       	in	r24, 0x3d	; 61
    80ec:	9e b7       	in	r25, 0x3e	; 62
    80ee:	08 96       	adiw	r24, 0x08	; 8
    80f0:	0f b6       	in	r0, 0x3f	; 63
    80f2:	f8 94       	cli
    80f4:	9e bf       	out	0x3e, r25	; 62
    80f6:	0f be       	out	0x3f, r0	; 63
    80f8:	8d bf       	out	0x3d, r24	; 61
    80fa:	c8 01       	movw	r24, r16
    80fc:	0e 94 8b 21 	call	0x4316	; 0x4316 <SumChecksum>
    8100:	9b 81       	ldd	r25, Y+3	; 0x03
    8102:	89 17       	cp	r24, r25
    8104:	31 f4       	brne	.+12     	; 0x8112 <GeniusProtocol+0xae>
		     switch(GeniCmd){
    8106:	89 81       	ldd	r24, Y+1	; 0x01
    8108:	84 35       	cpi	r24, 0x54	; 84
    810a:	19 f4       	brne	.+6      	; 0x8112 <GeniusProtocol+0xae>
			 case 'C'://PumpStatus
			      GeniusSendPumpStatus(GeniPumpID);
			      break;
             case 'T'://Transaction Request: T01:239<0D>
			      GeniusSendLastTransaction(GeniPumpID);
    810c:	8a 81       	ldd	r24, Y+2	; 0x02
    810e:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <GeniusSendLastTransaction>
    8112:	e4 ed       	ldi	r30, 0xD4	; 212
    8114:	f1 e0       	ldi	r31, 0x01	; 1
			 }
		}
	}
	//Shifting
	for(i=19;i>0;i--){
	    Geniflow[i]=Geniflow[i-1];	
    8116:	80 81       	ld	r24, Z
    8118:	81 83       	std	Z+1, r24	; 0x01
    811a:	31 97       	sbiw	r30, 0x01	; 1
			      break;
			 }
		}
	}
	//Shifting
	for(i=19;i>0;i--){
    811c:	91 e0       	ldi	r25, 0x01	; 1
    811e:	e1 3c       	cpi	r30, 0xC1	; 193
    8120:	f9 07       	cpc	r31, r25
    8122:	c9 f7       	brne	.-14     	; 0x8116 <GeniusProtocol+0xb2>
	    Geniflow[i]=Geniflow[i-1];	
	}Geniflow[0]=dataIn;
    8124:	f1 82       	std	Z+1, r15	; 0x01

	if (IsGeniusCommand(dataIn)==True)IsGeniusFlow=True;
    8126:	8f 2d       	mov	r24, r15
    8128:	0e 94 ab 21 	call	0x4356	; 0x4356 <IsGeniusCommand>
    812c:	81 30       	cpi	r24, 0x01	; 1
    812e:	11 f4       	brne	.+4      	; 0x8134 <GeniusProtocol+0xd0>
    8130:	80 93 c0 01 	sts	0x01C0, r24
	if (IsGeniusFlow==True)FlowLength++;
    8134:	80 91 c0 01 	lds	r24, 0x01C0
    8138:	81 30       	cpi	r24, 0x01	; 1
    813a:	29 f4       	brne	.+10     	; 0x8146 <GeniusProtocol+0xe2>
    813c:	80 91 c1 01 	lds	r24, 0x01C1
    8140:	8f 5f       	subi	r24, 0xFF	; 255
    8142:	80 93 c1 01 	sts	0x01C1, r24
	Geniflow[3]=Geniflow[2];
	Geniflow[2]=Geniflow[1];
	Geniflow[1]=Geniflow[0];
	Geniflow[0]=dataIn;
*/
}
    8146:	67 96       	adiw	r28, 0x17	; 23
    8148:	0f b6       	in	r0, 0x3f	; 63
    814a:	f8 94       	cli
    814c:	de bf       	out	0x3e, r29	; 62
    814e:	0f be       	out	0x3f, r0	; 63
    8150:	cd bf       	out	0x3d, r28	; 61
    8152:	cf 91       	pop	r28
    8154:	df 91       	pop	r29
    8156:	1f 91       	pop	r17
    8158:	0f 91       	pop	r16
    815a:	ff 90       	pop	r15
    815c:	08 95       	ret

0000815e <__vector_30>:
}

// NotSuccessful! 


ISR(USART1_RX_vect){
    815e:	1f 92       	push	r1
    8160:	0f 92       	push	r0
    8162:	0f b6       	in	r0, 0x3f	; 63
    8164:	0f 92       	push	r0
    8166:	0b b6       	in	r0, 0x3b	; 59
    8168:	0f 92       	push	r0
    816a:	11 24       	eor	r1, r1
    816c:	1f 93       	push	r17
    816e:	2f 93       	push	r18
    8170:	3f 93       	push	r19
    8172:	4f 93       	push	r20
    8174:	5f 93       	push	r21
    8176:	6f 93       	push	r22
    8178:	7f 93       	push	r23
    817a:	8f 93       	push	r24
    817c:	9f 93       	push	r25
    817e:	af 93       	push	r26
    8180:	bf 93       	push	r27
    8182:	ef 93       	push	r30
    8184:	ff 93       	push	r31
	char dataTX1,serialSend[12];
	static char IsAdvanZProtocol=False;
	unsigned int i;
	dataTX1 = UDR1;
    8186:	10 91 9c 00 	lds	r17, 0x009C
    //Not Successfull!
	//NewPacket
	if (IsNewPacket==True){
    818a:	80 91 88 01 	lds	r24, 0x0188
    818e:	81 30       	cpi	r24, 0x01	; 1
    8190:	51 f4       	brne	.+20     	; 0x81a6 <__vector_30+0x48>
	    if (dataTX1==0x01){
    8192:	11 30       	cpi	r17, 0x01	; 1
    8194:	41 f4       	brne	.+16     	; 0x81a6 <__vector_30+0x48>
		    char_count=0;
    8196:	10 92 8a 01 	sts	0x018A, r1
    819a:	10 92 89 01 	sts	0x0189, r1
            IsNewPacket=False;
    819e:	10 92 88 01 	sts	0x0188, r1
			IsAdvanZProtocol=True;
    81a2:	10 93 98 02 	sts	0x0298, r17
			}
	}
    //Save data to buffer if AdvanZ MSG
	if (IsAdvanZProtocol==True){
    81a6:	80 91 98 02 	lds	r24, 0x0298
    81aa:	81 30       	cpi	r24, 0x01	; 1
    81ac:	69 f4       	brne	.+26     	; 0x81c8 <__vector_30+0x6a>
	    rcv_trans[char_count]=dataTX1;
    81ae:	80 91 89 01 	lds	r24, 0x0189
    81b2:	90 91 8a 01 	lds	r25, 0x018A
    81b6:	fc 01       	movw	r30, r24
    81b8:	e3 5e       	subi	r30, 0xE3	; 227
    81ba:	f6 4f       	sbci	r31, 0xF6	; 246
    81bc:	10 83       	st	Z, r17
	    char_count++; 
    81be:	01 96       	adiw	r24, 0x01	; 1
    81c0:	90 93 8a 01 	sts	0x018A, r25
    81c4:	80 93 89 01 	sts	0x0189, r24
	}

	if (dataTX1==0x02){
    81c8:	12 30       	cpi	r17, 0x02	; 2
    81ca:	b1 f5       	brne	.+108    	; 0x8238 <__vector_30+0xda>
		transLength=char_count;
    81cc:	60 91 89 01 	lds	r22, 0x0189
    81d0:	70 91 8a 01 	lds	r23, 0x018A
    81d4:	70 93 8c 01 	sts	0x018C, r23
    81d8:	60 93 8b 01 	sts	0x018B, r22
		char_count=0;
    81dc:	10 92 8a 01 	sts	0x018A, r1
    81e0:	10 92 89 01 	sts	0x0189, r1
		IsAdvanZProtocol=False;
    81e4:	10 92 98 02 	sts	0x0298, r1

		//MessageIdentification
        if (MsgCode!=MSG_NONE)MsgCode=MSG_NONE;
	    MsgCode=((rcv_trans[35]-'0')*10)+(rcv_trans[36]-'0');
    81e8:	20 91 41 09 	lds	r18, 0x0941
    81ec:	20 51       	subi	r18, 0x10	; 16
    81ee:	80 91 40 09 	lds	r24, 0x0940
    81f2:	3a e0       	ldi	r19, 0x0A	; 10
    81f4:	83 9f       	mul	r24, r19
    81f6:	c0 01       	movw	r24, r0
    81f8:	11 24       	eor	r1, r1
    81fa:	28 0f       	add	r18, r24
    81fc:	20 93 24 01 	sts	0x0124, r18
     
	    IdentifyMessage(rcv_trans[0],transLength);
    8200:	80 91 1d 09 	lds	r24, 0x091D
    8204:	0e 94 76 19 	call	0x32ec	; 0x32ec <IdentifyMessage>
		IsNewPacket=True;
    8208:	21 e0       	ldi	r18, 0x01	; 1
    820a:	20 93 88 01 	sts	0x0188, r18

		if ((rcv_trans[35]=='8')&&(rcv_trans[36]=='1')){
    820e:	80 91 40 09 	lds	r24, 0x0940
    8212:	88 33       	cpi	r24, 0x38	; 56
    8214:	89 f4       	brne	.+34     	; 0x8238 <__vector_30+0xda>
    8216:	80 91 41 09 	lds	r24, 0x0941
    821a:	81 33       	cpi	r24, 0x31	; 49
    821c:	69 f4       	brne	.+26     	; 0x8238 <__vector_30+0xda>
		   LengthMessage81=transLength-12-44;
    821e:	80 91 8b 01 	lds	r24, 0x018B
    8222:	90 91 8c 01 	lds	r25, 0x018C
    8226:	c8 97       	sbiw	r24, 0x38	; 56
    8228:	90 93 8e 01 	sts	0x018E, r25
    822c:	80 93 8d 01 	sts	0x018D, r24
		   IsMessage81=True;
    8230:	20 93 a6 01 	sts	0x01A6, r18
		   IsCompleteFilling=True;
    8234:	20 93 a9 01 	sts	0x01A9, r18
		

	}//Endif(dataTX1==0x02)

	//ConfigDetection: iConf?<0D><0A>
	if (IsNewPacket!=True)
    8238:	80 91 88 01 	lds	r24, 0x0188
    823c:	81 30       	cpi	r24, 0x01	; 1
    823e:	19 f0       	breq	.+6      	; 0x8246 <__vector_30+0xe8>
	    ConfigProtocol(dataTX1);
    8240:	81 2f       	mov	r24, r17
    8242:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <ConfigProtocol>
	//GeniusDetection: [CMD][MSG][CSUM][0x0D]
	if ((IFType==IT_STANDALONE)&&(IsNewPacket!=True))
    8246:	80 91 00 01 	lds	r24, 0x0100
    824a:	82 30       	cpi	r24, 0x02	; 2
    824c:	39 f4       	brne	.+14     	; 0x825c <__vector_30+0xfe>
    824e:	80 91 88 01 	lds	r24, 0x0188
    8252:	81 30       	cpi	r24, 0x01	; 1
    8254:	19 f0       	breq	.+6      	; 0x825c <__vector_30+0xfe>
	     GeniusProtocol(dataTX1);		
    8256:	81 2f       	mov	r24, r17
    8258:	0e 94 32 40 	call	0x8064	; 0x8064 <GeniusProtocol>
    //uart(0,1,dataTX1);
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}
    825c:	ff 91       	pop	r31
    825e:	ef 91       	pop	r30
    8260:	bf 91       	pop	r27
    8262:	af 91       	pop	r26
    8264:	9f 91       	pop	r25
    8266:	8f 91       	pop	r24
    8268:	7f 91       	pop	r23
    826a:	6f 91       	pop	r22
    826c:	5f 91       	pop	r21
    826e:	4f 91       	pop	r20
    8270:	3f 91       	pop	r19
    8272:	2f 91       	pop	r18
    8274:	1f 91       	pop	r17
    8276:	0f 90       	pop	r0
    8278:	0b be       	out	0x3b, r0	; 59
    827a:	0f 90       	pop	r0
    827c:	0f be       	out	0x3f, r0	; 63
    827e:	0f 90       	pop	r0
    8280:	1f 90       	pop	r1
    8282:	18 95       	reti

00008284 <procMessage99>:
     StrPosCopy(rcv_trans,strAmount,74,8); 
	 StrPosCopy(rcv_trans,strStatus,82,1);
     StrPosCopy(rcv_trans,strSurcharge,83,9);    
}

char procMessage99(){//<STX>[IFT IDSeq N Srce IPDest IPMsg CodeTran NoShiftDateTimeIsland IDFIP IDProduct IDDescriptionPriceVolumeAmountMOP TypeMOP NameCard IDCard HolderBalance Type Balance MeterVolume MeterAmount Current TimePrint Count Checksum ETX
    8284:	0f 93       	push	r16
    8286:	1f 93       	push	r17
     char Result;
	 Result=MSG99_NONE;
	 //Message99
	 if((rcv_trans[0]==0x01)&&(transLength>=378)){
    8288:	80 91 1d 09 	lds	r24, 0x091D
    828c:	81 30       	cpi	r24, 0x01	; 1
    828e:	09 f0       	breq	.+2      	; 0x8292 <procMessage99+0xe>
    8290:	2e c2       	rjmp	.+1116   	; 0x86ee <procMessage99+0x46a>
    8292:	80 91 8b 01 	lds	r24, 0x018B
    8296:	90 91 8c 01 	lds	r25, 0x018C
    829a:	8a 57       	subi	r24, 0x7A	; 122
    829c:	91 40       	sbci	r25, 0x01	; 1
    829e:	08 f4       	brcc	.+2      	; 0x82a2 <procMessage99+0x1e>
    82a0:	26 c2       	rjmp	.+1100   	; 0x86ee <procMessage99+0x46a>
    82a2:	20 e0       	ldi	r18, 0x00	; 0
    82a4:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    82a6:	f9 01       	movw	r30, r18
    82a8:	e8 57       	subi	r30, 0x78	; 120
    82aa:	f3 4f       	sbci	r31, 0xF3	; 243
    82ac:	d9 01       	movw	r26, r18
    82ae:	a3 5e       	subi	r26, 0xE3	; 227
    82b0:	b6 4f       	sbci	r27, 0xF6	; 246
    82b2:	95 96       	adiw	r26, 0x25	; 37
    82b4:	8c 91       	ld	r24, X
    82b6:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    82b8:	2f 5f       	subi	r18, 0xFF	; 255
    82ba:	3f 4f       	sbci	r19, 0xFF	; 255
    82bc:	26 30       	cpi	r18, 0x06	; 6
    82be:	31 05       	cpc	r19, r1
    82c0:	91 f7       	brne	.-28     	; 0x82a6 <procMessage99+0x22>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    82c2:	10 92 8e 0c 	sts	0x0C8E, r1
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    82c6:	80 91 48 09 	lds	r24, 0x0948
    82ca:	80 93 69 0c 	sts	0x0C69, r24
	 }Dest[Length]=0;
    82ce:	10 92 6a 0c 	sts	0x0C6A, r1
	 Result=MSG99_NONE;
	 //Message99
	 if((rcv_trans[0]==0x01)&&(transLength>=378)){
       StrPosCopy(rcv_trans,strTranNo,37,6);//Transaction Number
       StrPosCopy(rcv_trans,strShift,43,1);
       Shift=(CharPosCopy(rcv_trans,43)-'0');
    82d2:	80 53       	subi	r24, 0x30	; 48
    82d4:	80 93 b9 01 	sts	0x01B9, r24
    82d8:	20 e0       	ldi	r18, 0x00	; 0
    82da:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    82dc:	f9 01       	movw	r30, r18
    82de:	e2 59       	subi	r30, 0x92	; 146
    82e0:	f8 4f       	sbci	r31, 0xF8	; 248
    82e2:	d9 01       	movw	r26, r18
    82e4:	a3 5e       	subi	r26, 0xE3	; 227
    82e6:	b6 4f       	sbci	r27, 0xF6	; 246
    82e8:	9c 96       	adiw	r26, 0x2c	; 44
    82ea:	8c 91       	ld	r24, X
    82ec:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    82ee:	2f 5f       	subi	r18, 0xFF	; 255
    82f0:	3f 4f       	sbci	r19, 0xFF	; 255
    82f2:	2a 30       	cpi	r18, 0x0A	; 10
    82f4:	31 05       	cpc	r19, r1
    82f6:	91 f7       	brne	.-28     	; 0x82dc <procMessage99+0x58>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    82f8:	10 92 78 07 	sts	0x0778, r1
    82fc:	20 e0       	ldi	r18, 0x00	; 0
    82fe:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8300:	f9 01       	movw	r30, r18
    8302:	e3 5b       	subi	r30, 0xB3	; 179
    8304:	fc 4f       	sbci	r31, 0xFC	; 252
    8306:	d9 01       	movw	r26, r18
    8308:	a3 5e       	subi	r26, 0xE3	; 227
    830a:	b6 4f       	sbci	r27, 0xF6	; 246
    830c:	d6 96       	adiw	r26, 0x36	; 54
    830e:	8c 91       	ld	r24, X
    8310:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8312:	2f 5f       	subi	r18, 0xFF	; 255
    8314:	3f 4f       	sbci	r19, 0xFF	; 255
    8316:	28 30       	cpi	r18, 0x08	; 8
    8318:	31 05       	cpc	r19, r1
    831a:	91 f7       	brne	.-28     	; 0x8300 <procMessage99+0x7c>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    831c:	10 92 55 03 	sts	0x0355, r1
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8320:	80 91 5b 09 	lds	r24, 0x095B
    8324:	80 93 f7 08 	sts	0x08F7, r24
    8328:	80 91 5c 09 	lds	r24, 0x095C
    832c:	80 93 f8 08 	sts	0x08F8, r24
	 }Dest[Length]=0;
    8330:	10 92 f9 08 	sts	0x08F9, r1
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8334:	80 91 5d 09 	lds	r24, 0x095D
    8338:	80 93 b9 07 	sts	0x07B9, r24
    833c:	80 91 5e 09 	lds	r24, 0x095E
    8340:	80 93 ba 07 	sts	0x07BA, r24
	 }Dest[Length]=0;
    8344:	10 92 bb 07 	sts	0x07BB, r1
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8348:	80 91 5f 09 	lds	r24, 0x095F
    834c:	80 93 71 08 	sts	0x0871, r24
    8350:	80 91 60 09 	lds	r24, 0x0960
    8354:	80 93 72 08 	sts	0x0872, r24
	 }Dest[Length]=0;
    8358:	10 92 73 08 	sts	0x0873, r1
    835c:	20 e0       	ldi	r18, 0x00	; 0
    835e:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8360:	f9 01       	movw	r30, r18
    8362:	e4 5f       	subi	r30, 0xF4	; 244
    8364:	f7 4f       	sbci	r31, 0xF7	; 247
    8366:	d9 01       	movw	r26, r18
    8368:	af 59       	subi	r26, 0x9F	; 159
    836a:	b6 4f       	sbci	r27, 0xF6	; 246
    836c:	8c 91       	ld	r24, X
    836e:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8370:	2f 5f       	subi	r18, 0xFF	; 255
    8372:	3f 4f       	sbci	r19, 0xFF	; 255
    8374:	2f 30       	cpi	r18, 0x0F	; 15
    8376:	31 05       	cpc	r19, r1
    8378:	99 f7       	brne	.-26     	; 0x8360 <procMessage99+0xdc>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    837a:	10 92 1b 08 	sts	0x081B, r1
    837e:	20 e0       	ldi	r18, 0x00	; 0
    8380:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8382:	f9 01       	movw	r30, r18
    8384:	e2 56       	subi	r30, 0x62	; 98
    8386:	fa 4f       	sbci	r31, 0xFA	; 250
    8388:	d9 01       	movw	r26, r18
    838a:	a0 59       	subi	r26, 0x90	; 144
    838c:	b6 4f       	sbci	r27, 0xF6	; 246
    838e:	8c 91       	ld	r24, X
    8390:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8392:	2f 5f       	subi	r18, 0xFF	; 255
    8394:	3f 4f       	sbci	r19, 0xFF	; 255
    8396:	28 30       	cpi	r18, 0x08	; 8
    8398:	31 05       	cpc	r19, r1
    839a:	99 f7       	brne	.-26     	; 0x8382 <procMessage99+0xfe>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    839c:	10 92 a6 05 	sts	0x05A6, r1
    83a0:	20 e0       	ldi	r18, 0x00	; 0
    83a2:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    83a4:	f9 01       	movw	r30, r18
    83a6:	eb 58       	subi	r30, 0x8B	; 139
    83a8:	fc 4f       	sbci	r31, 0xFC	; 252
    83aa:	d9 01       	movw	r26, r18
    83ac:	a8 58       	subi	r26, 0x88	; 136
    83ae:	b6 4f       	sbci	r27, 0xF6	; 246
    83b0:	8c 91       	ld	r24, X
    83b2:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    83b4:	2f 5f       	subi	r18, 0xFF	; 255
    83b6:	3f 4f       	sbci	r19, 0xFF	; 255
    83b8:	28 30       	cpi	r18, 0x08	; 8
    83ba:	31 05       	cpc	r19, r1
    83bc:	99 f7       	brne	.-26     	; 0x83a4 <procMessage99+0x120>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    83be:	10 92 7d 03 	sts	0x037D, r1
    83c2:	20 e0       	ldi	r18, 0x00	; 0
    83c4:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    83c6:	f9 01       	movw	r30, r18
    83c8:	ed 54       	subi	r30, 0x4D	; 77
    83ca:	f4 4f       	sbci	r31, 0xF4	; 244
    83cc:	d9 01       	movw	r26, r18
    83ce:	a0 58       	subi	r26, 0x80	; 128
    83d0:	b6 4f       	sbci	r27, 0xF6	; 246
    83d2:	8c 91       	ld	r24, X
    83d4:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    83d6:	2f 5f       	subi	r18, 0xFF	; 255
    83d8:	3f 4f       	sbci	r19, 0xFF	; 255
    83da:	2a 30       	cpi	r18, 0x0A	; 10
    83dc:	31 05       	cpc	r19, r1
    83de:	99 f7       	brne	.-26     	; 0x83c6 <procMessage99+0x142>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    83e0:	10 92 bd 0b 	sts	0x0BBD, r1

	   //FillChar(strAmount,sizeof(strAmount),0);
       StrPosCopy(rcv_trans,strAmount,99,10);

       //StrPosCopy(rcv_trans,strMOPType,109,1);
       MOPType=(CharPosCopy(rcv_trans,109)-'0');
    83e4:	80 91 8a 09 	lds	r24, 0x098A
    83e8:	80 53       	subi	r24, 0x30	; 48
    83ea:	80 93 b8 01 	sts	0x01B8, r24
    83ee:	20 e0       	ldi	r18, 0x00	; 0
    83f0:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    83f2:	f9 01       	movw	r30, r18
    83f4:	e3 58       	subi	r30, 0x83	; 131
    83f6:	fa 4f       	sbci	r31, 0xFA	; 250
    83f8:	d9 01       	movw	r26, r18
    83fa:	a5 57       	subi	r26, 0x75	; 117
    83fc:	b6 4f       	sbci	r27, 0xF6	; 246
    83fe:	8c 91       	ld	r24, X
    8400:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8402:	2f 5f       	subi	r18, 0xFF	; 255
    8404:	3f 4f       	sbci	r19, 0xFF	; 255
    8406:	24 31       	cpi	r18, 0x14	; 20
    8408:	31 05       	cpc	r19, r1
    840a:	99 f7       	brne	.-26     	; 0x83f2 <procMessage99+0x16e>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    840c:	10 92 91 05 	sts	0x0591, r1
    8410:	20 e0       	ldi	r18, 0x00	; 0
    8412:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8414:	f9 01       	movw	r30, r18
    8416:	e7 57       	subi	r30, 0x77	; 119
    8418:	f4 4f       	sbci	r31, 0xF4	; 244
    841a:	d9 01       	movw	r26, r18
    841c:	a1 56       	subi	r26, 0x61	; 97
    841e:	b6 4f       	sbci	r27, 0xF6	; 246
    8420:	8c 91       	ld	r24, X
    8422:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8424:	2f 5f       	subi	r18, 0xFF	; 255
    8426:	3f 4f       	sbci	r19, 0xFF	; 255
    8428:	24 31       	cpi	r18, 0x14	; 20
    842a:	31 05       	cpc	r19, r1
    842c:	99 f7       	brne	.-26     	; 0x8414 <procMessage99+0x190>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    842e:	10 92 9d 0b 	sts	0x0B9D, r1
    8432:	20 e0       	ldi	r18, 0x00	; 0
    8434:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8436:	f9 01       	movw	r30, r18
    8438:	ec 5d       	subi	r30, 0xDC	; 220
    843a:	fc 4f       	sbci	r31, 0xFC	; 252
    843c:	d9 01       	movw	r26, r18
    843e:	ad 54       	subi	r26, 0x4D	; 77
    8440:	b6 4f       	sbci	r27, 0xF6	; 246
    8442:	8c 91       	ld	r24, X
    8444:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8446:	2f 5f       	subi	r18, 0xFF	; 255
    8448:	3f 4f       	sbci	r19, 0xFF	; 255
    844a:	28 32       	cpi	r18, 0x28	; 40
    844c:	31 05       	cpc	r19, r1
    844e:	99 f7       	brne	.-26     	; 0x8436 <procMessage99+0x1b2>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8450:	10 92 4c 03 	sts	0x034C, r1
    8454:	20 e0       	ldi	r18, 0x00	; 0
    8456:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8458:	f9 01       	movw	r30, r18
    845a:	e5 5a       	subi	r30, 0xA5	; 165
    845c:	fc 4f       	sbci	r31, 0xFC	; 252
    845e:	d9 01       	movw	r26, r18
    8460:	a5 52       	subi	r26, 0x25	; 37
    8462:	b6 4f       	sbci	r27, 0xF6	; 246
    8464:	8c 91       	ld	r24, X
    8466:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8468:	2f 5f       	subi	r18, 0xFF	; 255
    846a:	3f 4f       	sbci	r19, 0xFF	; 255
    846c:	29 31       	cpi	r18, 0x19	; 25
    846e:	31 05       	cpc	r19, r1
    8470:	99 f7       	brne	.-26     	; 0x8458 <procMessage99+0x1d4>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8472:	10 92 74 03 	sts	0x0374, r1
    8476:	20 e0       	ldi	r18, 0x00	; 0
    8478:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    847a:	f9 01       	movw	r30, r18
    847c:	e8 50       	subi	r30, 0x08	; 8
    847e:	f4 4f       	sbci	r31, 0xF4	; 244
    8480:	d9 01       	movw	r26, r18
    8482:	ac 50       	subi	r26, 0x0C	; 12
    8484:	b6 4f       	sbci	r27, 0xF6	; 246
    8486:	8c 91       	ld	r24, X
    8488:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    848a:	2f 5f       	subi	r18, 0xFF	; 255
    848c:	3f 4f       	sbci	r19, 0xFF	; 255
    848e:	2d 30       	cpi	r18, 0x0D	; 13
    8490:	31 05       	cpc	r19, r1
    8492:	99 f7       	brne	.-26     	; 0x847a <procMessage99+0x1f6>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8494:	10 92 05 0c 	sts	0x0C05, r1
    8498:	20 e0       	ldi	r18, 0x00	; 0
    849a:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    849c:	f9 01       	movw	r30, r18
    849e:	e4 57       	subi	r30, 0x74	; 116
    84a0:	fc 4f       	sbci	r31, 0xFC	; 252
    84a2:	d9 01       	movw	r26, r18
    84a4:	af 5f       	subi	r26, 0xFF	; 255
    84a6:	b5 4f       	sbci	r27, 0xF5	; 245
    84a8:	8c 91       	ld	r24, X
    84aa:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    84ac:	2f 5f       	subi	r18, 0xFF	; 255
    84ae:	3f 4f       	sbci	r19, 0xFF	; 255
    84b0:	2d 30       	cpi	r18, 0x0D	; 13
    84b2:	31 05       	cpc	r19, r1
    84b4:	99 f7       	brne	.-26     	; 0x849c <procMessage99+0x218>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    84b6:	10 92 99 03 	sts	0x0399, r1
    84ba:	20 e0       	ldi	r18, 0x00	; 0
    84bc:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    84be:	f9 01       	movw	r30, r18
    84c0:	e7 51       	subi	r30, 0x17	; 23
    84c2:	f7 4f       	sbci	r31, 0xF7	; 247
    84c4:	d9 01       	movw	r26, r18
    84c6:	a2 5f       	subi	r26, 0xF2	; 242
    84c8:	b5 4f       	sbci	r27, 0xF5	; 245
    84ca:	8c 91       	ld	r24, X
    84cc:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    84ce:	2f 5f       	subi	r18, 0xFF	; 255
    84d0:	3f 4f       	sbci	r19, 0xFF	; 255
    84d2:	2d 30       	cpi	r18, 0x0D	; 13
    84d4:	31 05       	cpc	r19, r1
    84d6:	99 f7       	brne	.-26     	; 0x84be <procMessage99+0x23a>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    84d8:	10 92 f6 08 	sts	0x08F6, r1
    84dc:	20 e0       	ldi	r18, 0x00	; 0
    84de:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    84e0:	f9 01       	movw	r30, r18
    84e2:	e4 54       	subi	r30, 0x44	; 68
    84e4:	f8 4f       	sbci	r31, 0xF8	; 248
    84e6:	d9 01       	movw	r26, r18
    84e8:	a5 5e       	subi	r26, 0xE5	; 229
    84ea:	b5 4f       	sbci	r27, 0xF5	; 245
    84ec:	8c 91       	ld	r24, X
    84ee:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    84f0:	2f 5f       	subi	r18, 0xFF	; 255
    84f2:	3f 4f       	sbci	r19, 0xFF	; 255
    84f4:	23 31       	cpi	r18, 0x13	; 19
    84f6:	31 05       	cpc	r19, r1
    84f8:	99 f7       	brne	.-26     	; 0x84e0 <procMessage99+0x25c>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    84fa:	10 92 cf 07 	sts	0x07CF, r1
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    84fe:	80 91 2e 0a 	lds	r24, 0x0A2E
    8502:	80 93 85 0c 	sts	0x0C85, r24
    8506:	80 91 2f 0a 	lds	r24, 0x0A2F
    850a:	80 93 86 0c 	sts	0x0C86, r24
	 }Dest[Length]=0;
    850e:	10 92 87 0c 	sts	0x0C87, r1
    8512:	20 e0       	ldi	r18, 0x00	; 0
    8514:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8516:	f9 01       	movw	r30, r18
    8518:	ec 5e       	subi	r30, 0xEC	; 236
    851a:	f6 4f       	sbci	r31, 0xF6	; 246
    851c:	d9 01       	movw	r26, r18
    851e:	a0 5d       	subi	r26, 0xD0	; 208
    8520:	b5 4f       	sbci	r27, 0xF5	; 245
    8522:	8c 91       	ld	r24, X
    8524:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8526:	2f 5f       	subi	r18, 0xFF	; 255
    8528:	3f 4f       	sbci	r19, 0xFF	; 255
    852a:	28 30       	cpi	r18, 0x08	; 8
    852c:	31 05       	cpc	r19, r1
    852e:	99 f7       	brne	.-26     	; 0x8516 <procMessage99+0x292>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8530:	10 92 1c 09 	sts	0x091C, r1
    8534:	20 e0       	ldi	r18, 0x00	; 0
    8536:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8538:	f9 01       	movw	r30, r18
    853a:	e5 54       	subi	r30, 0x45	; 69
    853c:	fd 4f       	sbci	r31, 0xFD	; 253
    853e:	d9 01       	movw	r26, r18
    8540:	a8 5c       	subi	r26, 0xC8	; 200
    8542:	b5 4f       	sbci	r27, 0xF5	; 245
    8544:	8c 91       	ld	r24, X
    8546:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8548:	2f 5f       	subi	r18, 0xFF	; 255
    854a:	3f 4f       	sbci	r19, 0xFF	; 255
    854c:	28 30       	cpi	r18, 0x08	; 8
    854e:	31 05       	cpc	r19, r1
    8550:	99 f7       	brne	.-26     	; 0x8538 <procMessage99+0x2b4>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8552:	10 92 c3 02 	sts	0x02C3, r1
    8556:	20 e0       	ldi	r18, 0x00	; 0
    8558:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    855a:	f9 01       	movw	r30, r18
    855c:	e9 51       	subi	r30, 0x19	; 25
    855e:	fd 4f       	sbci	r31, 0xFD	; 253
    8560:	d9 01       	movw	r26, r18
    8562:	a0 5c       	subi	r26, 0xC0	; 192
    8564:	b5 4f       	sbci	r27, 0xF5	; 245
    8566:	8c 91       	ld	r24, X
    8568:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    856a:	2f 5f       	subi	r18, 0xFF	; 255
    856c:	3f 4f       	sbci	r19, 0xFF	; 255
    856e:	24 31       	cpi	r18, 0x14	; 20
    8570:	31 05       	cpc	r19, r1
    8572:	99 f7       	brne	.-26     	; 0x855a <procMessage99+0x2d6>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8574:	10 92 fb 02 	sts	0x02FB, r1
    8578:	20 e0       	ldi	r18, 0x00	; 0
    857a:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    857c:	f9 01       	movw	r30, r18
    857e:	ec 53       	subi	r30, 0x3C	; 60
    8580:	fd 4f       	sbci	r31, 0xFD	; 253
    8582:	d9 01       	movw	r26, r18
    8584:	ac 5a       	subi	r26, 0xAC	; 172
    8586:	b5 4f       	sbci	r27, 0xF5	; 245
    8588:	8c 91       	ld	r24, X
    858a:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    858c:	2f 5f       	subi	r18, 0xFF	; 255
    858e:	3f 4f       	sbci	r19, 0xFF	; 255
    8590:	2e 31       	cpi	r18, 0x1E	; 30
    8592:	31 05       	cpc	r19, r1
    8594:	99 f7       	brne	.-26     	; 0x857c <procMessage99+0x2f8>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8596:	10 92 e2 02 	sts	0x02E2, r1
    859a:	20 e0       	ldi	r18, 0x00	; 0
    859c:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    859e:	f9 01       	movw	r30, r18
    85a0:	eb 5c       	subi	r30, 0xCB	; 203
    85a2:	f7 4f       	sbci	r31, 0xF7	; 247
    85a4:	d9 01       	movw	r26, r18
    85a6:	ae 58       	subi	r26, 0x8E	; 142
    85a8:	b5 4f       	sbci	r27, 0xF5	; 245
    85aa:	8c 91       	ld	r24, X
    85ac:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    85ae:	2f 5f       	subi	r18, 0xFF	; 255
    85b0:	3f 4f       	sbci	r19, 0xFF	; 255
    85b2:	28 30       	cpi	r18, 0x08	; 8
    85b4:	31 05       	cpc	r19, r1
    85b6:	99 f7       	brne	.-26     	; 0x859e <procMessage99+0x31a>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    85b8:	10 92 3d 08 	sts	0x083D, r1
    85bc:	20 e0       	ldi	r18, 0x00	; 0
    85be:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    85c0:	f9 01       	movw	r30, r18
    85c2:	e2 58       	subi	r30, 0x82	; 130
    85c4:	fc 4f       	sbci	r31, 0xFC	; 252
    85c6:	d9 01       	movw	r26, r18
    85c8:	a6 58       	subi	r26, 0x86	; 134
    85ca:	b5 4f       	sbci	r27, 0xF5	; 245
    85cc:	8c 91       	ld	r24, X
    85ce:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    85d0:	2f 5f       	subi	r18, 0xFF	; 255
    85d2:	3f 4f       	sbci	r19, 0xFF	; 255
    85d4:	2a 30       	cpi	r18, 0x0A	; 10
    85d6:	31 05       	cpc	r19, r1
    85d8:	99 f7       	brne	.-26     	; 0x85c0 <procMessage99+0x33c>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    85da:	10 92 88 03 	sts	0x0388, r1
    85de:	20 e0       	ldi	r18, 0x00	; 0
    85e0:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    85e2:	f9 01       	movw	r30, r18
    85e4:	e3 51       	subi	r30, 0x13	; 19
    85e6:	f4 4f       	sbci	r31, 0xF4	; 244
    85e8:	d9 01       	movw	r26, r18
    85ea:	ac 57       	subi	r26, 0x7C	; 124
    85ec:	b5 4f       	sbci	r27, 0xF5	; 245
    85ee:	8c 91       	ld	r24, X
    85f0:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    85f2:	2f 5f       	subi	r18, 0xFF	; 255
    85f4:	3f 4f       	sbci	r19, 0xFF	; 255
    85f6:	2a 30       	cpi	r18, 0x0A	; 10
    85f8:	31 05       	cpc	r19, r1
    85fa:	99 f7       	brne	.-26     	; 0x85e2 <procMessage99+0x35e>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    85fc:	10 92 f7 0b 	sts	0x0BF7, r1
    8600:	20 e0       	ldi	r18, 0x00	; 0
    8602:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8604:	f9 01       	movw	r30, r18
    8606:	e5 52       	subi	r30, 0x25	; 37
    8608:	f8 4f       	sbci	r31, 0xF8	; 248
    860a:	d9 01       	movw	r26, r18
    860c:	a2 57       	subi	r26, 0x72	; 114
    860e:	b5 4f       	sbci	r27, 0xF5	; 245
    8610:	8c 91       	ld	r24, X
    8612:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8614:	2f 5f       	subi	r18, 0xFF	; 255
    8616:	3f 4f       	sbci	r19, 0xFF	; 255
    8618:	24 31       	cpi	r18, 0x14	; 20
    861a:	31 05       	cpc	r19, r1
    861c:	99 f7       	brne	.-26     	; 0x8604 <procMessage99+0x380>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    861e:	10 92 ef 07 	sts	0x07EF, r1
    8622:	20 e0       	ldi	r18, 0x00	; 0
    8624:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8626:	f9 01       	movw	r30, r18
    8628:	ee 5a       	subi	r30, 0xAE	; 174
    862a:	f7 4f       	sbci	r31, 0xF7	; 247
    862c:	d9 01       	movw	r26, r18
    862e:	ae 55       	subi	r26, 0x5E	; 94
    8630:	b5 4f       	sbci	r27, 0xF5	; 245
    8632:	8c 91       	ld	r24, X
    8634:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8636:	2f 5f       	subi	r18, 0xFF	; 255
    8638:	3f 4f       	sbci	r19, 0xFF	; 255
    863a:	2a 30       	cpi	r18, 0x0A	; 10
    863c:	31 05       	cpc	r19, r1
    863e:	99 f7       	brne	.-26     	; 0x8626 <procMessage99+0x3a2>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8640:	10 92 5c 08 	sts	0x085C, r1
    8644:	20 e0       	ldi	r18, 0x00	; 0
    8646:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8648:	f9 01       	movw	r30, r18
    864a:	e6 56       	subi	r30, 0x66	; 102
    864c:	fc 4f       	sbci	r31, 0xFC	; 252
    864e:	d9 01       	movw	r26, r18
    8650:	a4 55       	subi	r26, 0x54	; 84
    8652:	b5 4f       	sbci	r27, 0xF5	; 245
    8654:	8c 91       	ld	r24, X
    8656:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8658:	2f 5f       	subi	r18, 0xFF	; 255
    865a:	3f 4f       	sbci	r19, 0xFF	; 255
    865c:	28 30       	cpi	r18, 0x08	; 8
    865e:	31 05       	cpc	r19, r1
    8660:	99 f7       	brne	.-26     	; 0x8648 <procMessage99+0x3c4>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8662:	10 92 a2 03 	sts	0x03A2, r1
    8666:	20 e0       	ldi	r18, 0x00	; 0
    8668:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    866a:	f9 01       	movw	r30, r18
    866c:	e6 58       	subi	r30, 0x86	; 134
    866e:	f3 4f       	sbci	r31, 0xF3	; 243
    8670:	d9 01       	movw	r26, r18
    8672:	ac 54       	subi	r26, 0x4C	; 76
    8674:	b5 4f       	sbci	r27, 0xF5	; 245
    8676:	8c 91       	ld	r24, X
    8678:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    867a:	2f 5f       	subi	r18, 0xFF	; 255
    867c:	3f 4f       	sbci	r19, 0xFF	; 255
    867e:	2a 30       	cpi	r18, 0x0A	; 10
    8680:	31 05       	cpc	r19, r1
    8682:	99 f7       	brne	.-26     	; 0x866a <procMessage99+0x3e6>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8684:	10 92 84 0c 	sts	0x0C84, r1
    8688:	20 e0       	ldi	r18, 0x00	; 0
    868a:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    868c:	f9 01       	movw	r30, r18
    868e:	e6 5f       	subi	r30, 0xF6	; 246
    8690:	f3 4f       	sbci	r31, 0xF3	; 243
    8692:	d9 01       	movw	r26, r18
    8694:	a2 54       	subi	r26, 0x42	; 66
    8696:	b5 4f       	sbci	r27, 0xF5	; 245
    8698:	8c 91       	ld	r24, X
    869a:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    869c:	2f 5f       	subi	r18, 0xFF	; 255
    869e:	3f 4f       	sbci	r19, 0xFF	; 255
    86a0:	24 31       	cpi	r18, 0x14	; 20
    86a2:	31 05       	cpc	r19, r1
    86a4:	99 f7       	brne	.-26     	; 0x868c <procMessage99+0x408>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    86a6:	10 92 1e 0c 	sts	0x0C1E, r1
    86aa:	20 e0       	ldi	r18, 0x00	; 0
    86ac:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    86ae:	f9 01       	movw	r30, r18
    86b0:	e3 53       	subi	r30, 0x33	; 51
    86b2:	fc 4f       	sbci	r31, 0xFC	; 252
    86b4:	d9 01       	movw	r26, r18
    86b6:	ae 52       	subi	r26, 0x2E	; 46
    86b8:	b5 4f       	sbci	r27, 0xF5	; 245
    86ba:	8c 91       	ld	r24, X
    86bc:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    86be:	2f 5f       	subi	r18, 0xFF	; 255
    86c0:	3f 4f       	sbci	r19, 0xFF	; 255
    86c2:	2e 31       	cpi	r18, 0x1E	; 30
    86c4:	31 05       	cpc	r19, r1
    86c6:	99 f7       	brne	.-26     	; 0x86ae <procMessage99+0x42a>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    86c8:	10 92 eb 03 	sts	0x03EB, r1
       StrPosCopy(rcv_trans,strCorporateName,437,30);
	   //


	   //FIP Detection LocalAccount Null Filling
	   if ((nLocalAccount>0)&&(LocalAccountFIP[0]==atoi(strFIP_ID))){
    86cc:	80 91 8f 01 	lds	r24, 0x018F
    86d0:	88 23       	and	r24, r24
    86d2:	69 f0       	breq	.+26     	; 0x86ee <procMessage99+0x46a>
    86d4:	00 91 56 03 	lds	r16, 0x0356
    86d8:	10 e0       	ldi	r17, 0x00	; 0
    86da:	89 eb       	ldi	r24, 0xB9	; 185
    86dc:	97 e0       	ldi	r25, 0x07	; 7
    86de:	0e 94 c3 aa 	call	0x15586	; 0x15586 <atoi>
    86e2:	08 17       	cp	r16, r24
    86e4:	19 07       	cpc	r17, r25
    86e6:	19 f4       	brne	.+6      	; 0x86ee <procMessage99+0x46a>
	        IsCompleteFilling=True;
    86e8:	81 e0       	ldi	r24, 0x01	; 1
    86ea:	80 93 a9 01 	sts	0x01A9, r24
	   }

	  }
     return Result;     
}
    86ee:	80 e0       	ldi	r24, 0x00	; 0
    86f0:	1f 91       	pop	r17
    86f2:	0f 91       	pop	r16
    86f4:	08 95       	ret

000086f6 <GetMessageID>:
		  }
       IsStandaloneAcknoledge=True;
	  }
}

char GetMessageID(char *strMessageFlow){
    86f6:	0f 93       	push	r16
    86f8:	1f 93       	push	r17
    86fa:	df 93       	push	r29
    86fc:	cf 93       	push	r28
    86fe:	00 d0       	rcall	.+0      	; 0x8700 <GetMessageID+0xa>
    8700:	0f 92       	push	r0
    8702:	cd b7       	in	r28, 0x3d	; 61
    8704:	de b7       	in	r29, 0x3e	; 62
    8706:	fc 01       	movw	r30, r24
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8708:	80 81       	ld	r24, Z
    870a:	89 83       	std	Y+1, r24	; 0x01
    870c:	81 81       	ldd	r24, Z+1	; 0x01
    870e:	8a 83       	std	Y+2, r24	; 0x02
	 }Dest[Length]=0;
    8710:	1b 82       	std	Y+3, r1	; 0x03
}

char GetMessageID(char *strMessageFlow){
     char Result,strMsgID[3];
	 StrPosCopy(strMessageFlow,strMsgID,0,2);
	 RemZeroLead(strMsgID);
    8712:	8e 01       	movw	r16, r28
    8714:	0f 5f       	subi	r16, 0xFF	; 255
    8716:	1f 4f       	sbci	r17, 0xFF	; 255
    8718:	c8 01       	movw	r24, r16
    871a:	0e 94 51 25 	call	0x4aa2	; 0x4aa2 <RemZeroLead>
	 Result=atoi(strMsgID);
    871e:	c8 01       	movw	r24, r16
    8720:	0e 94 c3 aa 	call	0x15586	; 0x15586 <atoi>
  return Result;
}
    8724:	0f 90       	pop	r0
    8726:	0f 90       	pop	r0
    8728:	0f 90       	pop	r0
    872a:	cf 91       	pop	r28
    872c:	df 91       	pop	r29
    872e:	1f 91       	pop	r17
    8730:	0f 91       	pop	r16
    8732:	08 95       	ret

00008734 <GenerateStandaloneTransData>:

     eeprom_write_block((const void*)&PTransNum,(void*)&DefTransactionNumber,sizeof(DefTransactionNumber));
}


char GenerateStandaloneTransData(char xPumpID, char *PNozzle){//[1,2,3..16]->[1,2,3..0]
    8734:	bf 92       	push	r11
    8736:	cf 92       	push	r12
    8738:	df 92       	push	r13
    873a:	ef 92       	push	r14
    873c:	ff 92       	push	r15
    873e:	0f 93       	push	r16
    8740:	1f 93       	push	r17
    8742:	df 93       	push	r29
    8744:	cf 93       	push	r28
    8746:	cd b7       	in	r28, 0x3d	; 61
    8748:	de b7       	in	r29, 0x3e	; 62
    874a:	6e 97       	sbiw	r28, 0x1e	; 30
    874c:	0f b6       	in	r0, 0x3f	; 63
    874e:	f8 94       	cli
    8750:	de bf       	out	0x3e, r29	; 62
    8752:	0f be       	out	0x3f, r0	; 63
    8754:	cd bf       	out	0x3d, r28	; 61
    8756:	e8 2e       	mov	r14, r24
    8758:	8b 01       	movw	r16, r22
	 char strConfUnitPrice[10];
	 unsigned int PumpPrice,ConfigPrice;
	 char strConst[5];

	 iPumpID=(xPumpID&0x0F);
	 FIPAddr=GetFIPAddr(iPumpID);
    875a:	8f 70       	andi	r24, 0x0F	; 15
    875c:	0e 94 0a 20 	call	0x4014	; 0x4014 <GetFIPAddr>
     if (FIPAddr>0){
    8760:	88 23       	and	r24, r24
    8762:	09 f4       	brne	.+2      	; 0x8766 <GenerateStandaloneTransData+0x32>
    8764:	9b c1       	rjmp	.+822    	; 0x8a9c <GenerateStandaloneTransData+0x368>
	     FIPAddr=FIPAddr-1;
		 iProdID=PNozzle[RecPumpData[FIPAddr].Grade];
    8766:	81 50       	subi	r24, 0x01	; 1
    8768:	c8 2e       	mov	r12, r24
    876a:	dd 24       	eor	r13, r13
    876c:	85 e3       	ldi	r24, 0x35	; 53
    876e:	90 e0       	ldi	r25, 0x00	; 0
    8770:	c8 9e       	mul	r12, r24
    8772:	f0 01       	movw	r30, r0
    8774:	c9 9e       	mul	r12, r25
    8776:	f0 0d       	add	r31, r0
    8778:	d8 9e       	mul	r13, r24
    877a:	f0 0d       	add	r31, r0
    877c:	11 24       	eor	r1, r1
    877e:	e8 55       	subi	r30, 0x58	; 88
    8780:	fa 4f       	sbci	r31, 0xFA	; 250
    8782:	80 81       	ld	r24, Z
    8784:	08 0f       	add	r16, r24
    8786:	11 1d       	adc	r17, r1
    8788:	d8 01       	movw	r26, r16
    878a:	bc 90       	ld	r11, X
    878c:	ce 01       	movw	r24, r28
    878e:	40 96       	adiw	r24, 0x10	; 16

		 if (iProdID>0) eeprom_read_block((void*) &ProductName, (const void*) &DefProductName[iProdID-1],sizeof(DefProductName[iProdID-1]));
    8790:	bb 20       	and	r11, r11
    8792:	59 f0       	breq	.+22     	; 0x87aa <GenerateStandaloneTransData+0x76>
    8794:	6d e0       	ldi	r22, 0x0D	; 13
    8796:	b6 9e       	mul	r11, r22
    8798:	b0 01       	movw	r22, r0
    879a:	11 24       	eor	r1, r1
    879c:	61 55       	subi	r22, 0x51	; 81
    879e:	7f 4f       	sbci	r23, 0xFF	; 255
    87a0:	4d e0       	ldi	r20, 0x0D	; 13
    87a2:	50 e0       	ldi	r21, 0x00	; 0
    87a4:	0e 94 30 ad 	call	0x15a60	; 0x15a60 <__eerd_block_m128>
    87a8:	10 c0       	rjmp	.+32     	; 0x87ca <GenerateStandaloneTransData+0x96>
		 else sprintf_P(ProductName,PSTR("N/A"));
    87aa:	00 d0       	rcall	.+0      	; 0x87ac <GenerateStandaloneTransData+0x78>
    87ac:	00 d0       	rcall	.+0      	; 0x87ae <GenerateStandaloneTransData+0x7a>
    87ae:	ed b7       	in	r30, 0x3d	; 61
    87b0:	fe b7       	in	r31, 0x3e	; 62
    87b2:	92 83       	std	Z+2, r25	; 0x02
    87b4:	81 83       	std	Z+1, r24	; 0x01
    87b6:	84 e3       	ldi	r24, 0x34	; 52
    87b8:	94 e2       	ldi	r25, 0x24	; 36
    87ba:	94 83       	std	Z+4, r25	; 0x04
    87bc:	83 83       	std	Z+3, r24	; 0x03
    87be:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
    87c2:	0f 90       	pop	r0
    87c4:	0f 90       	pop	r0
    87c6:	0f 90       	pop	r0
    87c8:	0f 90       	pop	r0

		 TermID=eeprom_read_byte(&DefIFT_ID);
    87ca:	80 e0       	ldi	r24, 0x00	; 0
    87cc:	90 e0       	ldi	r25, 0x00	; 0
    87ce:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
    87d2:	f8 2e       	mov	r15, r24

		 //Shift,TransNum,Date,Time
		 sprintf_P(strShift,PSTR("%d"),RecPumpData[FIPAddr].Shift);
    87d4:	00 d0       	rcall	.+0      	; 0x87d6 <GenerateStandaloneTransData+0xa2>
    87d6:	00 d0       	rcall	.+0      	; 0x87d8 <GenerateStandaloneTransData+0xa4>
    87d8:	00 d0       	rcall	.+0      	; 0x87da <GenerateStandaloneTransData+0xa6>
    87da:	ad b7       	in	r26, 0x3d	; 61
    87dc:	be b7       	in	r27, 0x3e	; 62
    87de:	11 96       	adiw	r26, 0x01	; 1
    87e0:	89 e6       	ldi	r24, 0x69	; 105
    87e2:	9c e0       	ldi	r25, 0x0C	; 12
    87e4:	ed b7       	in	r30, 0x3d	; 61
    87e6:	fe b7       	in	r31, 0x3e	; 62
    87e8:	92 83       	std	Z+2, r25	; 0x02
    87ea:	81 83       	std	Z+1, r24	; 0x01
    87ec:	81 e3       	ldi	r24, 0x31	; 49
    87ee:	94 e2       	ldi	r25, 0x24	; 36
    87f0:	13 96       	adiw	r26, 0x03	; 3
    87f2:	9c 93       	st	X, r25
    87f4:	8e 93       	st	-X, r24
    87f6:	12 97       	sbiw	r26, 0x02	; 2
    87f8:	85 e3       	ldi	r24, 0x35	; 53
    87fa:	90 e0       	ldi	r25, 0x00	; 0
    87fc:	c8 9e       	mul	r12, r24
    87fe:	80 01       	movw	r16, r0
    8800:	c9 9e       	mul	r12, r25
    8802:	10 0d       	add	r17, r0
    8804:	d8 9e       	mul	r13, r24
    8806:	10 0d       	add	r17, r0
    8808:	11 24       	eor	r1, r1
    880a:	f8 01       	movw	r30, r16
    880c:	e8 55       	subi	r30, 0x58	; 88
    880e:	fa 4f       	sbci	r31, 0xFA	; 250
    8810:	82 81       	ldd	r24, Z+2	; 0x02
    8812:	14 96       	adiw	r26, 0x04	; 4
    8814:	8c 93       	st	X, r24
    8816:	14 97       	sbiw	r26, 0x04	; 4
    8818:	15 96       	adiw	r26, 0x05	; 5
    881a:	1c 92       	st	X, r1
    881c:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
		 sprintf_P(strTranNo,PSTR("%s"),RecPumpData[FIPAddr].strTransNum);
    8820:	ed b7       	in	r30, 0x3d	; 61
    8822:	fe b7       	in	r31, 0x3e	; 62
    8824:	31 96       	adiw	r30, 0x01	; 1
    8826:	88 e8       	ldi	r24, 0x88	; 136
    8828:	9c e0       	ldi	r25, 0x0C	; 12
    882a:	ad b7       	in	r26, 0x3d	; 61
    882c:	be b7       	in	r27, 0x3e	; 62
    882e:	12 96       	adiw	r26, 0x02	; 2
    8830:	9c 93       	st	X, r25
    8832:	8e 93       	st	-X, r24
    8834:	11 97       	sbiw	r26, 0x01	; 1
    8836:	8e e2       	ldi	r24, 0x2E	; 46
    8838:	94 e2       	ldi	r25, 0x24	; 36
    883a:	93 83       	std	Z+3, r25	; 0x03
    883c:	82 83       	std	Z+2, r24	; 0x02
    883e:	c8 01       	movw	r24, r16
    8840:	85 55       	subi	r24, 0x55	; 85
    8842:	9a 4f       	sbci	r25, 0xFA	; 250
    8844:	95 83       	std	Z+5, r25	; 0x05
    8846:	84 83       	std	Z+4, r24	; 0x04
    8848:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	     sprintf_P(strDate,PSTR("%s"),RecPumpData[FIPAddr].strTransDate);
    884c:	ed b7       	in	r30, 0x3d	; 61
    884e:	fe b7       	in	r31, 0x3e	; 62
    8850:	31 96       	adiw	r30, 0x01	; 1
    8852:	8e e6       	ldi	r24, 0x6E	; 110
    8854:	97 e0       	ldi	r25, 0x07	; 7
    8856:	ad b7       	in	r26, 0x3d	; 61
    8858:	be b7       	in	r27, 0x3e	; 62
    885a:	12 96       	adiw	r26, 0x02	; 2
    885c:	9c 93       	st	X, r25
    885e:	8e 93       	st	-X, r24
    8860:	11 97       	sbiw	r26, 0x01	; 1
    8862:	8b e2       	ldi	r24, 0x2B	; 43
    8864:	94 e2       	ldi	r25, 0x24	; 36
    8866:	93 83       	std	Z+3, r25	; 0x03
    8868:	82 83       	std	Z+2, r24	; 0x02
    886a:	c8 01       	movw	r24, r16
    886c:	8e 54       	subi	r24, 0x4E	; 78
    886e:	9a 4f       	sbci	r25, 0xFA	; 250
    8870:	95 83       	std	Z+5, r25	; 0x05
    8872:	84 83       	std	Z+4, r24	; 0x04
    8874:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
		 sprintf_P(strTime,PSTR("%s"),RecPumpData[FIPAddr].strTransTime);	 
    8878:	ed b7       	in	r30, 0x3d	; 61
    887a:	fe b7       	in	r31, 0x3e	; 62
    887c:	31 96       	adiw	r30, 0x01	; 1
    887e:	8d e4       	ldi	r24, 0x4D	; 77
    8880:	93 e0       	ldi	r25, 0x03	; 3
    8882:	ad b7       	in	r26, 0x3d	; 61
    8884:	be b7       	in	r27, 0x3e	; 62
    8886:	12 96       	adiw	r26, 0x02	; 2
    8888:	9c 93       	st	X, r25
    888a:	8e 93       	st	-X, r24
    888c:	11 97       	sbiw	r26, 0x01	; 1
    888e:	88 e2       	ldi	r24, 0x28	; 40
    8890:	94 e2       	ldi	r25, 0x24	; 36
    8892:	93 83       	std	Z+3, r25	; 0x03
    8894:	82 83       	std	Z+2, r24	; 0x02
    8896:	c8 01       	movw	r24, r16
    8898:	85 54       	subi	r24, 0x45	; 69
    889a:	9a 4f       	sbci	r25, 0xFA	; 250
    889c:	95 83       	std	Z+5, r25	; 0x05
    889e:	84 83       	std	Z+4, r24	; 0x04
    88a0:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>

	     //TermID,FIP_ID,Product
		 sprintf_P(strIslandID,PSTR("%d"),TermID);
    88a4:	ed b7       	in	r30, 0x3d	; 61
    88a6:	fe b7       	in	r31, 0x3e	; 62
    88a8:	31 96       	adiw	r30, 0x01	; 1
    88aa:	87 ef       	ldi	r24, 0xF7	; 247
    88ac:	98 e0       	ldi	r25, 0x08	; 8
    88ae:	ad b7       	in	r26, 0x3d	; 61
    88b0:	be b7       	in	r27, 0x3e	; 62
    88b2:	12 96       	adiw	r26, 0x02	; 2
    88b4:	9c 93       	st	X, r25
    88b6:	8e 93       	st	-X, r24
    88b8:	11 97       	sbiw	r26, 0x01	; 1
    88ba:	85 e2       	ldi	r24, 0x25	; 37
    88bc:	94 e2       	ldi	r25, 0x24	; 36
    88be:	93 83       	std	Z+3, r25	; 0x03
    88c0:	82 83       	std	Z+2, r24	; 0x02
    88c2:	f4 82       	std	Z+4, r15	; 0x04
    88c4:	15 82       	std	Z+5, r1	; 0x05
    88c6:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
		 sprintf_P(strFIP_ID,PSTR("%.2d"),xPumpID);
    88ca:	ed b7       	in	r30, 0x3d	; 61
    88cc:	fe b7       	in	r31, 0x3e	; 62
    88ce:	31 96       	adiw	r30, 0x01	; 1
    88d0:	89 eb       	ldi	r24, 0xB9	; 185
    88d2:	97 e0       	ldi	r25, 0x07	; 7
    88d4:	ad b7       	in	r26, 0x3d	; 61
    88d6:	be b7       	in	r27, 0x3e	; 62
    88d8:	12 96       	adiw	r26, 0x02	; 2
    88da:	9c 93       	st	X, r25
    88dc:	8e 93       	st	-X, r24
    88de:	11 97       	sbiw	r26, 0x01	; 1
    88e0:	80 e2       	ldi	r24, 0x20	; 32
    88e2:	94 e2       	ldi	r25, 0x24	; 36
    88e4:	93 83       	std	Z+3, r25	; 0x03
    88e6:	82 83       	std	Z+2, r24	; 0x02
    88e8:	e4 82       	std	Z+4, r14	; 0x04
    88ea:	15 82       	std	Z+5, r1	; 0x05
    88ec:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	     sprintf_P(strDescription,PSTR("%s"),ProductName);
    88f0:	ed b7       	in	r30, 0x3d	; 61
    88f2:	fe b7       	in	r31, 0x3e	; 62
    88f4:	31 96       	adiw	r30, 0x01	; 1
    88f6:	8c e0       	ldi	r24, 0x0C	; 12
    88f8:	98 e0       	ldi	r25, 0x08	; 8
    88fa:	ad b7       	in	r26, 0x3d	; 61
    88fc:	be b7       	in	r27, 0x3e	; 62
    88fe:	12 96       	adiw	r26, 0x02	; 2
    8900:	9c 93       	st	X, r25
    8902:	8e 93       	st	-X, r24
    8904:	11 97       	sbiw	r26, 0x01	; 1
    8906:	8d e1       	ldi	r24, 0x1D	; 29
    8908:	94 e2       	ldi	r25, 0x24	; 36
    890a:	93 83       	std	Z+3, r25	; 0x03
    890c:	82 83       	std	Z+2, r24	; 0x02
    890e:	ce 01       	movw	r24, r28
    8910:	40 96       	adiw	r24, 0x10	; 16
    8912:	95 83       	std	Z+5, r25	; 0x05
    8914:	84 83       	std	Z+4, r24	; 0x04
    8916:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>

		 //Price Volume Money
		 sprintf_P(strPrice,PSTR("%s"),RecPumpData[FIPAddr].Price);
    891a:	ed b7       	in	r30, 0x3d	; 61
    891c:	fe b7       	in	r31, 0x3e	; 62
    891e:	31 96       	adiw	r30, 0x01	; 1
    8920:	7e e9       	ldi	r23, 0x9E	; 158
    8922:	e7 2e       	mov	r14, r23
    8924:	75 e0       	ldi	r23, 0x05	; 5
    8926:	f7 2e       	mov	r15, r23
    8928:	ad b7       	in	r26, 0x3d	; 61
    892a:	be b7       	in	r27, 0x3e	; 62
    892c:	12 96       	adiw	r26, 0x02	; 2
    892e:	fc 92       	st	X, r15
    8930:	ee 92       	st	-X, r14
    8932:	11 97       	sbiw	r26, 0x01	; 1
    8934:	8a e1       	ldi	r24, 0x1A	; 26
    8936:	94 e2       	ldi	r25, 0x24	; 36
    8938:	93 83       	std	Z+3, r25	; 0x03
    893a:	82 83       	std	Z+2, r24	; 0x02
    893c:	c8 01       	movw	r24, r16
    893e:	8c 53       	subi	r24, 0x3C	; 60
    8940:	9a 4f       	sbci	r25, 0xFA	; 250
    8942:	95 83       	std	Z+5, r25	; 0x05
    8944:	84 83       	std	Z+4, r24	; 0x04
    8946:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	     sprintf_P(strVolume,PSTR("%s"),RecPumpData[FIPAddr].Volume);
    894a:	ed b7       	in	r30, 0x3d	; 61
    894c:	fe b7       	in	r31, 0x3e	; 62
    894e:	31 96       	adiw	r30, 0x01	; 1
    8950:	85 e7       	ldi	r24, 0x75	; 117
    8952:	93 e0       	ldi	r25, 0x03	; 3
    8954:	ad b7       	in	r26, 0x3d	; 61
    8956:	be b7       	in	r27, 0x3e	; 62
    8958:	12 96       	adiw	r26, 0x02	; 2
    895a:	9c 93       	st	X, r25
    895c:	8e 93       	st	-X, r24
    895e:	11 97       	sbiw	r26, 0x01	; 1
    8960:	87 e1       	ldi	r24, 0x17	; 23
    8962:	94 e2       	ldi	r25, 0x24	; 36
    8964:	93 83       	std	Z+3, r25	; 0x03
    8966:	82 83       	std	Z+2, r24	; 0x02
    8968:	c8 01       	movw	r24, r16
    896a:	85 53       	subi	r24, 0x35	; 53
    896c:	9a 4f       	sbci	r25, 0xFA	; 250
    896e:	95 83       	std	Z+5, r25	; 0x05
    8970:	84 83       	std	Z+4, r24	; 0x04
    8972:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
		 sprintf_P(strAmount,PSTR("%s"),RecPumpData[FIPAddr].Money);
    8976:	ed b7       	in	r30, 0x3d	; 61
    8978:	fe b7       	in	r31, 0x3e	; 62
    897a:	31 96       	adiw	r30, 0x01	; 1
    897c:	83 eb       	ldi	r24, 0xB3	; 179
    897e:	9b e0       	ldi	r25, 0x0B	; 11
    8980:	ad b7       	in	r26, 0x3d	; 61
    8982:	be b7       	in	r27, 0x3e	; 62
    8984:	12 96       	adiw	r26, 0x02	; 2
    8986:	9c 93       	st	X, r25
    8988:	8e 93       	st	-X, r24
    898a:	11 97       	sbiw	r26, 0x01	; 1
    898c:	84 e1       	ldi	r24, 0x14	; 20
    898e:	94 e2       	ldi	r25, 0x24	; 36
    8990:	93 83       	std	Z+3, r25	; 0x03
    8992:	82 83       	std	Z+2, r24	; 0x02
    8994:	0c 52       	subi	r16, 0x2C	; 44
    8996:	1a 4f       	sbci	r17, 0xFA	; 250
    8998:	15 83       	std	Z+5, r17	; 0x05
    899a:	04 83       	std	Z+4, r16	; 0x04
    899c:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>

		 
		 //Genius4.23 ->Enhanced Multiplication for 6 Digit Pump
		 //Read Price Configuration
		 if (iProdID>0) eeprom_read_block((void*) &strConfUnitPrice, (const void*) &DefProductPrice[iProdID-1],sizeof(DefProductPrice[iProdID-1]));
    89a0:	ed b7       	in	r30, 0x3d	; 61
    89a2:	fe b7       	in	r31, 0x3e	; 62
    89a4:	36 96       	adiw	r30, 0x06	; 6
    89a6:	0f b6       	in	r0, 0x3f	; 63
    89a8:	f8 94       	cli
    89aa:	fe bf       	out	0x3e, r31	; 62
    89ac:	0f be       	out	0x3f, r0	; 63
    89ae:	ed bf       	out	0x3d, r30	; 61
    89b0:	ce 01       	movw	r24, r28
    89b2:	06 96       	adiw	r24, 0x06	; 6
    89b4:	bb 20       	and	r11, r11
    89b6:	59 f0       	breq	.+22     	; 0x89ce <GenerateStandaloneTransData+0x29a>
    89b8:	69 e0       	ldi	r22, 0x09	; 9
    89ba:	b6 9e       	mul	r11, r22
    89bc:	b0 01       	movw	r22, r0
    89be:	11 24       	eor	r1, r1
    89c0:	63 58       	subi	r22, 0x83	; 131
    89c2:	7f 4f       	sbci	r23, 0xFF	; 255
    89c4:	49 e0       	ldi	r20, 0x09	; 9
    89c6:	50 e0       	ldi	r21, 0x00	; 0
    89c8:	0e 94 30 ad 	call	0x15a60	; 0x15a60 <__eerd_block_m128>
    89cc:	1c c0       	rjmp	.+56     	; 0x8a06 <GenerateStandaloneTransData+0x2d2>
		 else sprintf_P(strConfUnitPrice,PSTR("%s"),strPrice);
    89ce:	00 d0       	rcall	.+0      	; 0x89d0 <GenerateStandaloneTransData+0x29c>
    89d0:	00 d0       	rcall	.+0      	; 0x89d2 <GenerateStandaloneTransData+0x29e>
    89d2:	00 d0       	rcall	.+0      	; 0x89d4 <GenerateStandaloneTransData+0x2a0>
    89d4:	ed b7       	in	r30, 0x3d	; 61
    89d6:	fe b7       	in	r31, 0x3e	; 62
    89d8:	31 96       	adiw	r30, 0x01	; 1
    89da:	ad b7       	in	r26, 0x3d	; 61
    89dc:	be b7       	in	r27, 0x3e	; 62
    89de:	12 96       	adiw	r26, 0x02	; 2
    89e0:	9c 93       	st	X, r25
    89e2:	8e 93       	st	-X, r24
    89e4:	11 97       	sbiw	r26, 0x01	; 1
    89e6:	81 e1       	ldi	r24, 0x11	; 17
    89e8:	94 e2       	ldi	r25, 0x24	; 36
    89ea:	93 83       	std	Z+3, r25	; 0x03
    89ec:	82 83       	std	Z+2, r24	; 0x02
    89ee:	f5 82       	std	Z+5, r15	; 0x05
    89f0:	e4 82       	std	Z+4, r14	; 0x04
    89f2:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
    89f6:	ed b7       	in	r30, 0x3d	; 61
    89f8:	fe b7       	in	r31, 0x3e	; 62
    89fa:	36 96       	adiw	r30, 0x06	; 6
    89fc:	0f b6       	in	r0, 0x3f	; 63
    89fe:	f8 94       	cli
    8a00:	fe bf       	out	0x3e, r31	; 62
    8a02:	0f be       	out	0x3f, r0	; 63
    8a04:	ed bf       	out	0x3d, r30	; 61

		 PumpPrice=atoi(strPrice);
    8a06:	8e e9       	ldi	r24, 0x9E	; 158
    8a08:	95 e0       	ldi	r25, 0x05	; 5
    8a0a:	0e 94 c3 aa 	call	0x15586	; 0x15586 <atoi>
    8a0e:	7c 01       	movw	r14, r24
		 ConfigPrice=atoi(strConfUnitPrice);
    8a10:	8e 01       	movw	r16, r28
    8a12:	0a 5f       	subi	r16, 0xFA	; 250
    8a14:	1f 4f       	sbci	r17, 0xFF	; 255
    8a16:	c8 01       	movw	r24, r16
    8a18:	0e 94 c3 aa 	call	0x15586	; 0x15586 <atoi>

		 if ((strlen(strConfUnitPrice)>=5)&&(ConfigPrice>PumpPrice)){//if Price Configured > Pump Price
    8a1c:	f8 01       	movw	r30, r16
    8a1e:	01 90       	ld	r0, Z+
    8a20:	00 20       	and	r0, r0
    8a22:	e9 f7       	brne	.-6      	; 0x8a1e <GenerateStandaloneTransData+0x2ea>
    8a24:	31 97       	sbiw	r30, 0x01	; 1
    8a26:	e0 1b       	sub	r30, r16
    8a28:	f1 0b       	sbc	r31, r17
    8a2a:	35 97       	sbiw	r30, 0x05	; 5
    8a2c:	30 f1       	brcs	.+76     	; 0x8a7a <GenerateStandaloneTransData+0x346>
    8a2e:	e8 16       	cp	r14, r24
    8a30:	f9 06       	cpc	r15, r25
    8a32:	18 f5       	brcc	.+70     	; 0x8a7a <GenerateStandaloneTransData+0x346>
		     sprintf_P(strConst,PSTR("10"));
    8a34:	00 d0       	rcall	.+0      	; 0x8a36 <GenerateStandaloneTransData+0x302>
    8a36:	00 d0       	rcall	.+0      	; 0x8a38 <GenerateStandaloneTransData+0x304>
    8a38:	8e 01       	movw	r16, r28
    8a3a:	0f 5f       	subi	r16, 0xFF	; 255
    8a3c:	1f 4f       	sbci	r17, 0xFF	; 255
    8a3e:	ad b7       	in	r26, 0x3d	; 61
    8a40:	be b7       	in	r27, 0x3e	; 62
    8a42:	12 96       	adiw	r26, 0x02	; 2
    8a44:	1c 93       	st	X, r17
    8a46:	0e 93       	st	-X, r16
    8a48:	11 97       	sbiw	r26, 0x01	; 1
    8a4a:	8e e0       	ldi	r24, 0x0E	; 14
    8a4c:	94 e2       	ldi	r25, 0x24	; 36
    8a4e:	14 96       	adiw	r26, 0x04	; 4
    8a50:	9c 93       	st	X, r25
    8a52:	8e 93       	st	-X, r24
    8a54:	13 97       	sbiw	r26, 0x03	; 3
    8a56:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
		     CalcMultiply(strPrice,strConst,strPrice);
    8a5a:	0f 90       	pop	r0
    8a5c:	0f 90       	pop	r0
    8a5e:	0f 90       	pop	r0
    8a60:	0f 90       	pop	r0
    8a62:	8e e9       	ldi	r24, 0x9E	; 158
    8a64:	95 e0       	ldi	r25, 0x05	; 5
    8a66:	b8 01       	movw	r22, r16
    8a68:	ac 01       	movw	r20, r24
    8a6a:	0e 94 6d 2c 	call	0x58da	; 0x58da <CalcMultiply>
			 CalcMultiply(strAmount,strConst,strAmount);
    8a6e:	83 eb       	ldi	r24, 0xB3	; 179
    8a70:	9b e0       	ldi	r25, 0x0B	; 11
    8a72:	b8 01       	movw	r22, r16
    8a74:	ac 01       	movw	r20, r24
    8a76:	0e 94 6d 2c 	call	0x58da	; 0x58da <CalcMultiply>
		 }       

		 //Formating Decimal Genius 4.32 Previus In StoreStandaloneTransData

		 FormatPrice(strPrice);
    8a7a:	8e e9       	ldi	r24, 0x9E	; 158
    8a7c:	95 e0       	ldi	r25, 0x05	; 5
    8a7e:	0e 94 81 34 	call	0x6902	; 0x6902 <FormatPrice>
		 FormatVolume(strVolume);
    8a82:	85 e7       	ldi	r24, 0x75	; 117
    8a84:	93 e0       	ldi	r25, 0x03	; 3
    8a86:	0e 94 65 34 	call	0x68ca	; 0x68ca <FormatVolume>
		 FormatMoney(strAmount);		 
    8a8a:	83 eb       	ldi	r24, 0xB3	; 179
    8a8c:	9b e0       	ldi	r25, 0x0B	; 11
    8a8e:	0e 94 73 34 	call	0x68e6	; 0x68e6 <FormatMoney>

		 MOPType=MOP_CASH;
    8a92:	10 92 b8 01 	sts	0x01B8, r1
	     IsPrinting=True;	 
    8a96:	81 e0       	ldi	r24, 0x01	; 1
    8a98:	80 93 ac 01 	sts	0x01AC, r24
	 }
	 //ProductName	 
	 //iProdID=PNozzle[RecPumpData[iPumpID].Nozzle];
	 //BAsedOnGrade
   return Result;
}
    8a9c:	6e 96       	adiw	r28, 0x1e	; 30
    8a9e:	0f b6       	in	r0, 0x3f	; 63
    8aa0:	f8 94       	cli
    8aa2:	de bf       	out	0x3e, r29	; 62
    8aa4:	0f be       	out	0x3f, r0	; 63
    8aa6:	cd bf       	out	0x3d, r28	; 61
    8aa8:	cf 91       	pop	r28
    8aaa:	df 91       	pop	r29
    8aac:	1f 91       	pop	r17
    8aae:	0f 91       	pop	r16
    8ab0:	ff 90       	pop	r15
    8ab2:	ef 90       	pop	r14
    8ab4:	df 90       	pop	r13
    8ab6:	cf 90       	pop	r12
    8ab8:	bf 90       	pop	r11
    8aba:	08 95       	ret

00008abc <PrintStandalone>:
     char Result=PS_NONE;

   return Result;
}

char PrintStandalone(char FIPAddr,char IsReprint){
    8abc:	ef 92       	push	r14
    8abe:	ff 92       	push	r15
    8ac0:	0f 93       	push	r16
    8ac2:	1f 93       	push	r17
    8ac4:	df 93       	push	r29
    8ac6:	cf 93       	push	r28
    8ac8:	00 d0       	rcall	.+0      	; 0x8aca <PrintStandalone+0xe>
    8aca:	00 d0       	rcall	.+0      	; 0x8acc <PrintStandalone+0x10>
    8acc:	00 d0       	rcall	.+0      	; 0x8ace <PrintStandalone+0x12>
    8ace:	cd b7       	in	r28, 0x3d	; 61
    8ad0:	de b7       	in	r29, 0x3e	; 62
    8ad2:	f8 2e       	mov	r15, r24
    8ad4:	06 2f       	mov	r16, r22
	 char LFIPAddr;
	      
	 Result=PS_NO_DATA;

//	 eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap, 8);
	 iPumpID=GetPumpID(FIPAddr);//PPumpID[FIPAddr-1];
    8ad6:	0e 94 99 20 	call	0x4132	; 0x4132 <GetPumpID>
    8ada:	e8 2e       	mov	r14, r24
     LFIPAddr=GetFIPAddr(iPumpID);
    8adc:	0e 94 0a 20 	call	0x4014	; 0x4014 <GetFIPAddr>
    8ae0:	18 2f       	mov	r17, r24

     if (LFIPAddr>0){
    8ae2:	88 23       	and	r24, r24
    8ae4:	89 f1       	breq	.+98     	; 0x8b48 <PrintStandalone+0x8c>
	     LFIPAddr=LFIPAddr-1;
	     if ((IsReprint==True)||(iPumpID>0)&&(strPumpStatus[LFIPAddr]==GetPumpStatusLabel(PS_PRINT_READY))){    	 
    8ae6:	01 30       	cpi	r16, 0x01	; 1
    8ae8:	69 f0       	breq	.+26     	; 0x8b04 <PrintStandalone+0x48>
    8aea:	ee 20       	and	r14, r14
    8aec:	69 f1       	breq	.+90     	; 0x8b48 <PrintStandalone+0x8c>
    8aee:	80 e1       	ldi	r24, 0x10	; 16
    8af0:	0e 94 42 14 	call	0x2884	; 0x2884 <GetPumpStatusLabel>
    8af4:	11 50       	subi	r17, 0x01	; 1
    8af6:	e1 2f       	mov	r30, r17
    8af8:	f0 e0       	ldi	r31, 0x00	; 0
    8afa:	ee 5f       	subi	r30, 0xFE	; 254
    8afc:	fe 4f       	sbci	r31, 0xFE	; 254
    8afe:	90 81       	ld	r25, Z
    8b00:	98 17       	cp	r25, r24
    8b02:	11 f5       	brne	.+68     	; 0x8b48 <PrintStandalone+0x8c>
		     eeprom_read_block((void*) &PProductID, (const void*) &DefNozzleMap[FIPAddr-1], 6);		 
    8b04:	66 e0       	ldi	r22, 0x06	; 6
    8b06:	f6 9e       	mul	r15, r22
    8b08:	b0 01       	movw	r22, r0
    8b0a:	11 24       	eor	r1, r1
    8b0c:	60 5b       	subi	r22, 0xB0	; 176
    8b0e:	7f 4f       	sbci	r23, 0xFF	; 255
    8b10:	ce 01       	movw	r24, r28
    8b12:	01 96       	adiw	r24, 0x01	; 1
    8b14:	46 e0       	ldi	r20, 0x06	; 6
    8b16:	50 e0       	ldi	r21, 0x00	; 0
    8b18:	0e 94 30 ad 	call	0x15a60	; 0x15a60 <__eerd_block_m128>
		     if (((ReprintReady[FIPAddr-1]==True))||(IsReprint==False)){
    8b1c:	ef 2d       	mov	r30, r15
    8b1e:	f0 e0       	ldi	r31, 0x00	; 0
    8b20:	ee 5e       	subi	r30, 0xEE	; 238
    8b22:	fe 4f       	sbci	r31, 0xFE	; 254
    8b24:	80 81       	ld	r24, Z
    8b26:	81 30       	cpi	r24, 0x01	; 1
    8b28:	19 f0       	breq	.+6      	; 0x8b30 <PrintStandalone+0x74>
    8b2a:	00 23       	and	r16, r16
    8b2c:	29 f0       	breq	.+10     	; 0x8b38 <PrintStandalone+0x7c>
    8b2e:	0c c0       	rjmp	.+24     	; 0x8b48 <PrintStandalone+0x8c>
			       if (IsReprint==True)IsReprintTicket=True;
    8b30:	01 30       	cpi	r16, 0x01	; 1
    8b32:	11 f4       	brne	.+4      	; 0x8b38 <PrintStandalone+0x7c>
    8b34:	00 93 7f 01 	sts	0x017F, r16
			       GenerateStandaloneTransData(iPumpID,PProductID);		 			   
    8b38:	8e 2d       	mov	r24, r14
    8b3a:	be 01       	movw	r22, r28
    8b3c:	6f 5f       	subi	r22, 0xFF	; 255
    8b3e:	7f 4f       	sbci	r23, 0xFF	; 255
    8b40:	0e 94 9a 43 	call	0x8734	; 0x8734 <GenerateStandaloneTransData>
    8b44:	81 e1       	ldi	r24, 0x11	; 17
    8b46:	01 c0       	rjmp	.+2      	; 0x8b4a <PrintStandalone+0x8e>
    8b48:	82 e1       	ldi	r24, 0x12	; 18
			 }//else Result=PS_NO_DATA;
		 }
		 //else Result=PS_NO_DATA;    		    
	 }	
   return Result;
}
    8b4a:	26 96       	adiw	r28, 0x06	; 6
    8b4c:	0f b6       	in	r0, 0x3f	; 63
    8b4e:	f8 94       	cli
    8b50:	de bf       	out	0x3e, r29	; 62
    8b52:	0f be       	out	0x3f, r0	; 63
    8b54:	cd bf       	out	0x3d, r28	; 61
    8b56:	cf 91       	pop	r28
    8b58:	df 91       	pop	r29
    8b5a:	1f 91       	pop	r17
    8b5c:	0f 91       	pop	r16
    8b5e:	ff 90       	pop	r15
    8b60:	ef 90       	pop	r14
    8b62:	08 95       	ret

00008b64 <SendPrint>:
	 for(i=0;i<strlen(Source);i++){
	    Dest[i]=pgm_read_byte(&Source[i]);
	 }
}

void SendPrint(char xSend,char xSendLead){
    8b64:	1f 93       	push	r17
    8b66:	18 2f       	mov	r17, r24
static char zSend;     
	 if (xSend==0x19){
    8b68:	89 31       	cpi	r24, 0x19	; 25
    8b6a:	59 f4       	brne	.+22     	; 0x8b82 <SendPrint+0x1e>
	     if (zSend==xSendLead)uart(_COM_PRINTER,1,xSendLead);
    8b6c:	40 91 f6 01 	lds	r20, 0x01F6
    8b70:	46 17       	cp	r20, r22
    8b72:	19 f4       	brne	.+6      	; 0x8b7a <SendPrint+0x16>
    8b74:	80 e0       	ldi	r24, 0x00	; 0
    8b76:	61 e0       	ldi	r22, 0x01	; 1
    8b78:	07 c0       	rjmp	.+14     	; 0x8b88 <SendPrint+0x24>
		 else uart(_COM_PRINTER,1,' ');	 
    8b7a:	80 e0       	ldi	r24, 0x00	; 0
    8b7c:	61 e0       	ldi	r22, 0x01	; 1
    8b7e:	40 e2       	ldi	r20, 0x20	; 32
    8b80:	03 c0       	rjmp	.+6      	; 0x8b88 <SendPrint+0x24>
	 } 
	 else uart(_COM_PRINTER,1,xSend);
    8b82:	80 e0       	ldi	r24, 0x00	; 0
    8b84:	61 e0       	ldi	r22, 0x01	; 1
    8b86:	41 2f       	mov	r20, r17
    8b88:	0e 94 d2 a8 	call	0x151a4	; 0x151a4 <uart>
	 zSend=xSend;
    8b8c:	10 93 f6 01 	sts	0x01F6, r17
}
    8b90:	1f 91       	pop	r17
    8b92:	08 95       	ret

00008b94 <CarriegeReturn>:
	      break;	 
	 }
}

void CarriegeReturn(){
     uart(_COM_PRINTER, 1, 0x0D);     
    8b94:	80 e0       	ldi	r24, 0x00	; 0
    8b96:	61 e0       	ldi	r22, 0x01	; 1
    8b98:	4d e0       	ldi	r20, 0x0D	; 13
    8b9a:	0e 94 d2 a8 	call	0x151a4	; 0x151a4 <uart>
     uart(_COM_PRINTER, 1, 0x0A);
    8b9e:	80 e0       	ldi	r24, 0x00	; 0
    8ba0:	61 e0       	ldi	r22, 0x01	; 1
    8ba2:	4a e0       	ldi	r20, 0x0A	; 10
    8ba4:	0e 94 d2 a8 	call	0x151a4	; 0x151a4 <uart>
}
    8ba8:	08 95       	ret

00008baa <InitPrinter>:
		 }
}

void InitPrinter(){
char PrinterType;
     PrinterType=eeprom_read_byte(&DefPrinterType);
    8baa:	80 e3       	ldi	r24, 0x30	; 48
    8bac:	90 e0       	ldi	r25, 0x00	; 0
    8bae:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
    //Custom Printer TG02
	//Density Lowest: 1D 7C 00
	if (PrinterType==PT_CUSTOM_TG02){
    8bb2:	81 30       	cpi	r24, 0x01	; 1
    8bb4:	71 f5       	brne	.+92     	; 0x8c12 <InitPrinter+0x68>
		uart(_COM_PRINTER, 1, 0x1D);uart(_COM_PRINTER, 1, 0x7C);uart(_COM_PRINTER, 1, 0x00);
    8bb6:	80 e0       	ldi	r24, 0x00	; 0
    8bb8:	61 e0       	ldi	r22, 0x01	; 1
    8bba:	4d e1       	ldi	r20, 0x1D	; 29
    8bbc:	0e 94 d2 a8 	call	0x151a4	; 0x151a4 <uart>
    8bc0:	80 e0       	ldi	r24, 0x00	; 0
    8bc2:	61 e0       	ldi	r22, 0x01	; 1
    8bc4:	4c e7       	ldi	r20, 0x7C	; 124
    8bc6:	0e 94 d2 a8 	call	0x151a4	; 0x151a4 <uart>
    8bca:	80 e0       	ldi	r24, 0x00	; 0
    8bcc:	61 e0       	ldi	r22, 0x01	; 1
    8bce:	40 e0       	ldi	r20, 0x00	; 0
    8bd0:	0e 94 d2 a8 	call	0x151a4	; 0x151a4 <uart>
		//Double Strike ON : 1B 47 01
		uart(_COM_PRINTER, 1, 0x1B);uart(_COM_PRINTER, 1, 0x47);uart(_COM_PRINTER, 1, 0x01);
    8bd4:	80 e0       	ldi	r24, 0x00	; 0
    8bd6:	61 e0       	ldi	r22, 0x01	; 1
    8bd8:	4b e1       	ldi	r20, 0x1B	; 27
    8bda:	0e 94 d2 a8 	call	0x151a4	; 0x151a4 <uart>
    8bde:	80 e0       	ldi	r24, 0x00	; 0
    8be0:	61 e0       	ldi	r22, 0x01	; 1
    8be2:	47 e4       	ldi	r20, 0x47	; 71
    8be4:	0e 94 d2 a8 	call	0x151a4	; 0x151a4 <uart>
    8be8:	80 e0       	ldi	r24, 0x00	; 0
    8bea:	61 e0       	ldi	r22, 0x01	; 1
    8bec:	41 e0       	ldi	r20, 0x01	; 1
    8bee:	0e 94 d2 a8 	call	0x151a4	; 0x151a4 <uart>
		//Font Setting: 1D 21 01
		uart(_COM_PRINTER, 1, 0x1D);uart(_COM_PRINTER, 1, 0x21);uart(_COM_PRINTER, 1, 0x01);   
    8bf2:	80 e0       	ldi	r24, 0x00	; 0
    8bf4:	61 e0       	ldi	r22, 0x01	; 1
    8bf6:	4d e1       	ldi	r20, 0x1D	; 29
    8bf8:	0e 94 d2 a8 	call	0x151a4	; 0x151a4 <uart>
    8bfc:	80 e0       	ldi	r24, 0x00	; 0
    8bfe:	61 e0       	ldi	r22, 0x01	; 1
    8c00:	41 e2       	ldi	r20, 0x21	; 33
    8c02:	0e 94 d2 a8 	call	0x151a4	; 0x151a4 <uart>
    8c06:	80 e0       	ldi	r24, 0x00	; 0
    8c08:	61 e0       	ldi	r22, 0x01	; 1
    8c0a:	41 e0       	ldi	r20, 0x01	; 1
    8c0c:	0e 94 d2 a8 	call	0x151a4	; 0x151a4 <uart>
    8c10:	08 95       	ret
		}
    else
	if (PrinterType==PT_CUSTOM_CUBE){
    8c12:	82 30       	cpi	r24, 0x02	; 2
    8c14:	69 f5       	brne	.+90     	; 0x8c70 <InitPrinter+0xc6>
        //Print Density 0%
		uart(_COM_PRINTER, 1, 0x1D);uart(_COM_PRINTER, 1, 0x7C);uart(_COM_PRINTER, 1, 0x04);
    8c16:	80 e0       	ldi	r24, 0x00	; 0
    8c18:	61 e0       	ldi	r22, 0x01	; 1
    8c1a:	4d e1       	ldi	r20, 0x1D	; 29
    8c1c:	0e 94 d2 a8 	call	0x151a4	; 0x151a4 <uart>
    8c20:	80 e0       	ldi	r24, 0x00	; 0
    8c22:	61 e0       	ldi	r22, 0x01	; 1
    8c24:	4c e7       	ldi	r20, 0x7C	; 124
    8c26:	0e 94 d2 a8 	call	0x151a4	; 0x151a4 <uart>
    8c2a:	80 e0       	ldi	r24, 0x00	; 0
    8c2c:	61 e0       	ldi	r22, 0x01	; 1
    8c2e:	44 e0       	ldi	r20, 0x04	; 4
    8c30:	0e 94 d2 a8 	call	0x151a4	; 0x151a4 <uart>
		//Double Strike OFF : 1B 47 00
		uart(_COM_PRINTER, 1, 0x1B);uart(_COM_PRINTER, 1, 0x47);uart(_COM_PRINTER, 1, 0x00);
    8c34:	80 e0       	ldi	r24, 0x00	; 0
    8c36:	61 e0       	ldi	r22, 0x01	; 1
    8c38:	4b e1       	ldi	r20, 0x1B	; 27
    8c3a:	0e 94 d2 a8 	call	0x151a4	; 0x151a4 <uart>
    8c3e:	80 e0       	ldi	r24, 0x00	; 0
    8c40:	61 e0       	ldi	r22, 0x01	; 1
    8c42:	47 e4       	ldi	r20, 0x47	; 71
    8c44:	0e 94 d2 a8 	call	0x151a4	; 0x151a4 <uart>
    8c48:	80 e0       	ldi	r24, 0x00	; 0
    8c4a:	61 e0       	ldi	r22, 0x01	; 1
    8c4c:	40 e0       	ldi	r20, 0x00	; 0
    8c4e:	0e 94 d2 a8 	call	0x151a4	; 0x151a4 <uart>
		//Font Setting: 1D 21 01
		uart(_COM_PRINTER, 1, 0x1D);uart(_COM_PRINTER, 1, 0x21);uart(_COM_PRINTER, 1, 0x00);   
    8c52:	80 e0       	ldi	r24, 0x00	; 0
    8c54:	61 e0       	ldi	r22, 0x01	; 1
    8c56:	4d e1       	ldi	r20, 0x1D	; 29
    8c58:	0e 94 d2 a8 	call	0x151a4	; 0x151a4 <uart>
    8c5c:	80 e0       	ldi	r24, 0x00	; 0
    8c5e:	61 e0       	ldi	r22, 0x01	; 1
    8c60:	41 e2       	ldi	r20, 0x21	; 33
    8c62:	0e 94 d2 a8 	call	0x151a4	; 0x151a4 <uart>
    8c66:	80 e0       	ldi	r24, 0x00	; 0
    8c68:	61 e0       	ldi	r22, 0x01	; 1
    8c6a:	40 e0       	ldi	r20, 0x00	; 0
    8c6c:	0e 94 d2 a8 	call	0x151a4	; 0x151a4 <uart>
    8c70:	08 95       	ret

00008c72 <PrintNormalHeight>:
		 }
}

void PrintNormalHeight(){
char PrinterType;
     PrinterType=eeprom_read_byte(&DefPrinterType);
    8c72:	80 e3       	ldi	r24, 0x30	; 48
    8c74:	90 e0       	ldi	r25, 0x00	; 0
    8c76:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
	 if (PrinterType==PT_CUSTOM_CUBE){
    8c7a:	82 30       	cpi	r24, 0x02	; 2
    8c7c:	79 f4       	brne	.+30     	; 0x8c9c <PrintNormalHeight+0x2a>
	     uart(_COM_PRINTER, 1, 0x1D);uart(_COM_PRINTER, 1, 0x21);uart(_COM_PRINTER, 1, 0x00);
    8c7e:	80 e0       	ldi	r24, 0x00	; 0
    8c80:	61 e0       	ldi	r22, 0x01	; 1
    8c82:	4d e1       	ldi	r20, 0x1D	; 29
    8c84:	0e 94 d2 a8 	call	0x151a4	; 0x151a4 <uart>
    8c88:	80 e0       	ldi	r24, 0x00	; 0
    8c8a:	61 e0       	ldi	r22, 0x01	; 1
    8c8c:	41 e2       	ldi	r20, 0x21	; 33
    8c8e:	0e 94 d2 a8 	call	0x151a4	; 0x151a4 <uart>
    8c92:	80 e0       	ldi	r24, 0x00	; 0
    8c94:	61 e0       	ldi	r22, 0x01	; 1
    8c96:	40 e0       	ldi	r20, 0x00	; 0
    8c98:	0e 94 d2 a8 	call	0x151a4	; 0x151a4 <uart>
    8c9c:	08 95       	ret

00008c9e <PrintDoubleHeight>:

//void SetPrinterCharacterWidth

void PrintDoubleHeight(){
char PrinterType;
     PrinterType=eeprom_read_byte(&DefPrinterType);
    8c9e:	80 e3       	ldi	r24, 0x30	; 48
    8ca0:	90 e0       	ldi	r25, 0x00	; 0
    8ca2:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
	 if (PrinterType==PT_CUSTOM_CUBE){
    8ca6:	82 30       	cpi	r24, 0x02	; 2
    8ca8:	79 f4       	brne	.+30     	; 0x8cc8 <PrintDoubleHeight+0x2a>
	     uart(_COM_PRINTER, 1, 0x1D);uart(_COM_PRINTER, 1, 0x21);uart(_COM_PRINTER, 1, 0x01);
    8caa:	80 e0       	ldi	r24, 0x00	; 0
    8cac:	61 e0       	ldi	r22, 0x01	; 1
    8cae:	4d e1       	ldi	r20, 0x1D	; 29
    8cb0:	0e 94 d2 a8 	call	0x151a4	; 0x151a4 <uart>
    8cb4:	80 e0       	ldi	r24, 0x00	; 0
    8cb6:	61 e0       	ldi	r22, 0x01	; 1
    8cb8:	41 e2       	ldi	r20, 0x21	; 33
    8cba:	0e 94 d2 a8 	call	0x151a4	; 0x151a4 <uart>
    8cbe:	80 e0       	ldi	r24, 0x00	; 0
    8cc0:	61 e0       	ldi	r22, 0x01	; 1
    8cc2:	41 e0       	ldi	r20, 0x01	; 1
    8cc4:	0e 94 d2 a8 	call	0x151a4	; 0x151a4 <uart>
    8cc8:	08 95       	ret

00008cca <PaperCut>:

	 return Result;
}


void PaperCut(){
    8cca:	1f 93       	push	r17
     char CutType;
     CutType= eeprom_read_byte(&DefPrintAutoCut);
    8ccc:	83 e3       	ldi	r24, 0x33	; 51
    8cce:	90 e0       	ldi	r25, 0x00	; 0
    8cd0:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
    8cd4:	18 2f       	mov	r17, r24
     uart(_COM_PRINTER, 1, 0x1B);
    8cd6:	80 e0       	ldi	r24, 0x00	; 0
    8cd8:	61 e0       	ldi	r22, 0x01	; 1
    8cda:	4b e1       	ldi	r20, 0x1B	; 27
    8cdc:	0e 94 d2 a8 	call	0x151a4	; 0x151a4 <uart>
	 if(CutType== 1) { uart(_COM_PRINTER, 1, 0x6D);}
    8ce0:	11 30       	cpi	r17, 0x01	; 1
    8ce2:	21 f4       	brne	.+8      	; 0x8cec <PaperCut+0x22>
    8ce4:	80 e0       	ldi	r24, 0x00	; 0
    8ce6:	61 e0       	ldi	r22, 0x01	; 1
    8ce8:	4d e6       	ldi	r20, 0x6D	; 109
    8cea:	05 c0       	rjmp	.+10     	; 0x8cf6 <PaperCut+0x2c>
	 if(CutType== 2) {uart(_COM_PRINTER, 1, 0x69);}
    8cec:	12 30       	cpi	r17, 0x02	; 2
    8cee:	29 f4       	brne	.+10     	; 0x8cfa <PaperCut+0x30>
    8cf0:	80 e0       	ldi	r24, 0x00	; 0
    8cf2:	61 e0       	ldi	r22, 0x01	; 1
    8cf4:	49 e6       	ldi	r20, 0x69	; 105
    8cf6:	0e 94 d2 a8 	call	0x151a4	; 0x151a4 <uart>

}
    8cfa:	1f 91       	pop	r17
    8cfc:	08 95       	ret

00008cfe <procMessage11>:
}




void procMessage11(){
    8cfe:	6f 92       	push	r6
    8d00:	7f 92       	push	r7
    8d02:	8f 92       	push	r8
    8d04:	9f 92       	push	r9
    8d06:	af 92       	push	r10
    8d08:	bf 92       	push	r11
    8d0a:	cf 92       	push	r12
    8d0c:	df 92       	push	r13
    8d0e:	ef 92       	push	r14
    8d10:	ff 92       	push	r15
    8d12:	0f 93       	push	r16
    8d14:	1f 93       	push	r17
    8d16:	df 93       	push	r29
    8d18:	cf 93       	push	r28
    8d1a:	cd b7       	in	r28, 0x3d	; 61
    8d1c:	de b7       	in	r29, 0x3e	; 62
    8d1e:	c0 59       	subi	r28, 0x90	; 144
    8d20:	d0 40       	sbci	r29, 0x00	; 0
    8d22:	0f b6       	in	r0, 0x3f	; 63
    8d24:	f8 94       	cli
    8d26:	de bf       	out	0x3e, r29	; 62
    8d28:	0f be       	out	0x3f, r0	; 63
    8d2a:	cd bf       	out	0x3d, r28	; 61
    8d2c:	20 e0       	ldi	r18, 0x00	; 0
    8d2e:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8d30:	ae 01       	movw	r20, r28
    8d32:	46 5f       	subi	r20, 0xF6	; 246
    8d34:	5f 4f       	sbci	r21, 0xFF	; 255
    8d36:	fa 01       	movw	r30, r20
    8d38:	e2 0f       	add	r30, r18
    8d3a:	f3 1f       	adc	r31, r19
    8d3c:	d9 01       	movw	r26, r18
    8d3e:	a3 5e       	subi	r26, 0xE3	; 227
    8d40:	b6 4f       	sbci	r27, 0xF6	; 246
    8d42:	9b 96       	adiw	r26, 0x2b	; 43
    8d44:	8c 91       	ld	r24, X
    8d46:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8d48:	2f 5f       	subi	r18, 0xFF	; 255
    8d4a:	3f 4f       	sbci	r19, 0xFF	; 255
    8d4c:	2a 30       	cpi	r18, 0x0A	; 10
    8d4e:	31 05       	cpc	r19, r1
    8d50:	91 f7       	brne	.-28     	; 0x8d36 <procMessage11+0x38>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8d52:	fa 01       	movw	r30, r20
    8d54:	12 86       	std	Z+10, r1	; 0x0a
     char buffHeader[50],strReadEEPROM[50];
	 char strProductName[13],strProductPrice[9],strTime[12],strDate[10];

     //Update Datetime
	 StrPosCopy(rcv_trans,strDate,43,10);//2004/09/14 19:05:36
	 FormatDate(DATE_SHORT_YEAR,strDate);
    8d56:	81 e0       	ldi	r24, 0x01	; 1
    8d58:	ba 01       	movw	r22, r20
    8d5a:	0e 94 00 25 	call	0x4a00	; 0x4a00 <FormatDate>
    8d5e:	20 e0       	ldi	r18, 0x00	; 0
    8d60:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8d62:	ae 01       	movw	r20, r28
    8d64:	4c 5e       	subi	r20, 0xEC	; 236
    8d66:	5f 4f       	sbci	r21, 0xFF	; 255
    8d68:	fa 01       	movw	r30, r20
    8d6a:	e2 0f       	add	r30, r18
    8d6c:	f3 1f       	adc	r31, r19
    8d6e:	d9 01       	movw	r26, r18
    8d70:	a3 5e       	subi	r26, 0xE3	; 227
    8d72:	b6 4f       	sbci	r27, 0xF6	; 246
    8d74:	d6 96       	adiw	r26, 0x36	; 54
    8d76:	8c 91       	ld	r24, X
    8d78:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8d7a:	2f 5f       	subi	r18, 0xFF	; 255
    8d7c:	3f 4f       	sbci	r19, 0xFF	; 255
    8d7e:	28 30       	cpi	r18, 0x08	; 8
    8d80:	31 05       	cpc	r19, r1
    8d82:	91 f7       	brne	.-28     	; 0x8d68 <procMessage11+0x6a>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8d84:	1c 8e       	std	Y+28, r1	; 0x1c

     //Update Datetime
	 StrPosCopy(rcv_trans,strDate,43,10);//2004/09/14 19:05:36
	 FormatDate(DATE_SHORT_YEAR,strDate);
	 StrPosCopy(rcv_trans,strTime,54,8);
	 _datetime(_DATETIME_WRITE,strDate,strTime);
    8d86:	81 e0       	ldi	r24, 0x01	; 1
    8d88:	be 01       	movw	r22, r28
    8d8a:	66 5f       	subi	r22, 0xF6	; 246
    8d8c:	7f 4f       	sbci	r23, 0xFF	; 255
    8d8e:	0e 94 ce a7 	call	0x14f9c	; 0x14f9c <_datetime>
    8d92:	08 e2       	ldi	r16, 0x28	; 40
    8d94:	12 e0       	ldi	r17, 0x02	; 2
    8d96:	7b e5       	ldi	r23, 0x5B	; 91
    8d98:	e7 2e       	mov	r14, r23
    8d9a:	79 e0       	ldi	r23, 0x09	; 9
    8d9c:	f7 2e       	mov	r15, r23
    8d9e:	6d e2       	ldi	r22, 0x2D	; 45
    8da0:	c6 2e       	mov	r12, r22
    8da2:	d1 2c       	mov	r13, r1
    8da4:	cc 0e       	add	r12, r28
    8da6:	dd 1e       	adc	r13, r29
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8da8:	58 e2       	ldi	r21, 0x28	; 40
    8daa:	a5 2e       	mov	r10, r21
    8dac:	b1 2c       	mov	r11, r1
    8dae:	ac 0c       	add	r10, r12
    8db0:	bd 1c       	adc	r11, r13
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8db2:	45 e5       	ldi	r20, 0x55	; 85
    8db4:	64 2e       	mov	r6, r20
    8db6:	71 2c       	mov	r7, r1
    8db8:	6c 0e       	add	r6, r28
    8dba:	7d 1e       	adc	r7, r29
	      
	 //HeaderFooter
	 for(i=0;i<10;i++){
	     FillChar(buffHeader,0,sizeof(buffHeader));   
         StrPosCopy(rcv_trans,buffHeader,62+(i*40),40);
		 eeprom_read_block((void*) &strReadEEPROM, (const void*) &DefHeaderFooter[i],41);
    8dbc:	3f e5       	ldi	r19, 0x5F	; 95
    8dbe:	83 2e       	mov	r8, r19
    8dc0:	91 2c       	mov	r9, r1
    8dc2:	8c 0e       	add	r8, r28
    8dc4:	9d 1e       	adc	r9, r29

     //Update Datetime
	 StrPosCopy(rcv_trans,strDate,43,10);//2004/09/14 19:05:36
	 FormatDate(DATE_SHORT_YEAR,strDate);
	 StrPosCopy(rcv_trans,strTime,54,8);
	 _datetime(_DATETIME_WRITE,strDate,strTime);
    8dc6:	f6 01       	movw	r30, r12
    8dc8:	d7 01       	movw	r26, r14
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8dca:	8d 91       	ld	r24, X+
    8dcc:	81 93       	st	Z+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8dce:	ea 15       	cp	r30, r10
    8dd0:	fb 05       	cpc	r31, r11
    8dd2:	d9 f7       	brne	.-10     	; 0x8dca <procMessage11+0xcc>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8dd4:	f3 01       	movw	r30, r6
    8dd6:	10 82       	st	Z, r1
	      
	 //HeaderFooter
	 for(i=0;i<10;i++){
	     FillChar(buffHeader,0,sizeof(buffHeader));   
         StrPosCopy(rcv_trans,buffHeader,62+(i*40),40);
		 eeprom_read_block((void*) &strReadEEPROM, (const void*) &DefHeaderFooter[i],41);
    8dd8:	c4 01       	movw	r24, r8
    8dda:	b8 01       	movw	r22, r16
    8ddc:	49 e2       	ldi	r20, 0x29	; 41
    8dde:	50 e0       	ldi	r21, 0x00	; 0
    8de0:	0e 94 30 ad 	call	0x15a60	; 0x15a60 <__eerd_block_m128>
	     if (strcmp(strReadEEPROM,buffHeader)!=0)
    8de4:	c4 01       	movw	r24, r8
    8de6:	b6 01       	movw	r22, r12
    8de8:	0e 94 e8 aa 	call	0x155d0	; 0x155d0 <strcmp>
    8dec:	00 97       	sbiw	r24, 0x00	; 0
    8dee:	31 f0       	breq	.+12     	; 0x8dfc <procMessage11+0xfe>
		     eeprom_write_block((const void*) &buffHeader, (void*) &DefHeaderFooter[i], 41);
    8df0:	c6 01       	movw	r24, r12
    8df2:	b8 01       	movw	r22, r16
    8df4:	49 e2       	ldi	r20, 0x29	; 41
    8df6:	50 e0       	ldi	r21, 0x00	; 0
    8df8:	0e 94 48 ad 	call	0x15a90	; 0x15a90 <__eewr_block_m128>
    8dfc:	07 5d       	subi	r16, 0xD7	; 215
    8dfe:	1f 4f       	sbci	r17, 0xFF	; 255
    8e00:	88 e2       	ldi	r24, 0x28	; 40
    8e02:	90 e0       	ldi	r25, 0x00	; 0
    8e04:	e8 0e       	add	r14, r24
    8e06:	f9 1e       	adc	r15, r25
	 FormatDate(DATE_SHORT_YEAR,strDate);
	 StrPosCopy(rcv_trans,strTime,54,8);
	 _datetime(_DATETIME_WRITE,strDate,strTime);
	      
	 //HeaderFooter
	 for(i=0;i<10;i++){
    8e08:	93 e0       	ldi	r25, 0x03	; 3
    8e0a:	02 3c       	cpi	r16, 0xC2	; 194
    8e0c:	19 07       	cpc	r17, r25
    8e0e:	d9 f6       	brne	.-74     	; 0x8dc6 <procMessage11+0xc8>
    8e10:	0c eb       	ldi	r16, 0xBC	; 188
    8e12:	10 e0       	ldi	r17, 0x00	; 0
    8e14:	23 e0       	ldi	r18, 0x03	; 3
    8e16:	e2 2e       	mov	r14, r18
    8e18:	2b e0       	ldi	r18, 0x0B	; 11
    8e1a:	f2 2e       	mov	r15, r18
    8e1c:	90 e2       	ldi	r25, 0x20	; 32
    8e1e:	c9 2e       	mov	r12, r25
    8e20:	d1 2c       	mov	r13, r1
    8e22:	cc 0e       	add	r12, r28
    8e24:	dd 1e       	adc	r13, r29
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8e26:	8c e2       	ldi	r24, 0x2C	; 44
    8e28:	88 2e       	mov	r8, r24
    8e2a:	91 2c       	mov	r9, r1
    8e2c:	8c 0e       	add	r8, r28
    8e2e:	9d 1e       	adc	r9, r29
	 */
	 //ProductName
	 for(i=0;i<6;i++){
	    StrPosCopy(rcv_trans,strProductName,(486+(i*12)),12);
		RemSpaceLag(strProductName);
		eeprom_read_block((void*) &strReadEEPROM, (const void*) &DefProductName[i],12);
    8e30:	bf e5       	ldi	r27, 0x5F	; 95
    8e32:	ab 2e       	mov	r10, r27
    8e34:	b1 2c       	mov	r11, r1
    8e36:	ac 0e       	add	r10, r28
    8e38:	bd 1e       	adc	r11, r29
	 FormatDate(DATE_SHORT_YEAR,strDate);
	 StrPosCopy(rcv_trans,strTime,54,8);
	 _datetime(_DATETIME_WRITE,strDate,strTime);
	      
	 //HeaderFooter
	 for(i=0;i<10;i++){
    8e3a:	f6 01       	movw	r30, r12
    8e3c:	d7 01       	movw	r26, r14
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8e3e:	8d 91       	ld	r24, X+
    8e40:	81 93       	st	Z+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8e42:	e8 15       	cp	r30, r8
    8e44:	f9 05       	cpc	r31, r9
    8e46:	d9 f7       	brne	.-10     	; 0x8e3e <procMessage11+0x140>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8e48:	1c a6       	std	Y+44, r1	; 0x2c
     eeprom_write_block((const void*) &buffHeader, (void*) &DefHeaderFooter[9], 40);
	 */
	 //ProductName
	 for(i=0;i<6;i++){
	    StrPosCopy(rcv_trans,strProductName,(486+(i*12)),12);
		RemSpaceLag(strProductName);
    8e4a:	c6 01       	movw	r24, r12
    8e4c:	0e 94 e4 25 	call	0x4bc8	; 0x4bc8 <RemSpaceLag>
		eeprom_read_block((void*) &strReadEEPROM, (const void*) &DefProductName[i],12);
    8e50:	c5 01       	movw	r24, r10
    8e52:	b8 01       	movw	r22, r16
    8e54:	4c e0       	ldi	r20, 0x0C	; 12
    8e56:	50 e0       	ldi	r21, 0x00	; 0
    8e58:	0e 94 30 ad 	call	0x15a60	; 0x15a60 <__eerd_block_m128>
		if (strcmp(strReadEEPROM,strProductName)!=0)
    8e5c:	c5 01       	movw	r24, r10
    8e5e:	b6 01       	movw	r22, r12
    8e60:	0e 94 e8 aa 	call	0x155d0	; 0x155d0 <strcmp>
    8e64:	00 97       	sbiw	r24, 0x00	; 0
    8e66:	31 f0       	breq	.+12     	; 0x8e74 <procMessage11+0x176>
		    eeprom_write_block((const void*) &strProductName, (void*) &DefProductName[i], 12);
    8e68:	c6 01       	movw	r24, r12
    8e6a:	b8 01       	movw	r22, r16
    8e6c:	4c e0       	ldi	r20, 0x0C	; 12
    8e6e:	50 e0       	ldi	r21, 0x00	; 0
    8e70:	0e 94 48 ad 	call	0x15a90	; 0x15a90 <__eewr_block_m128>
    8e74:	03 5f       	subi	r16, 0xF3	; 243
    8e76:	1f 4f       	sbci	r17, 0xFF	; 255
    8e78:	ec e0       	ldi	r30, 0x0C	; 12
    8e7a:	f0 e0       	ldi	r31, 0x00	; 0
    8e7c:	ee 0e       	add	r14, r30
    8e7e:	ff 1e       	adc	r15, r31
     eeprom_write_block((const void*) &buffHeader, (void*) &DefHeaderFooter[8], 40);
     StrPosCopy(rcv_trans,buffHeader,422,40);
     eeprom_write_block((const void*) &buffHeader, (void*) &DefHeaderFooter[9], 40);
	 */
	 //ProductName
	 for(i=0;i<6;i++){
    8e80:	f1 e0       	ldi	r31, 0x01	; 1
    8e82:	0a 30       	cpi	r16, 0x0A	; 10
    8e84:	1f 07       	cpc	r17, r31
    8e86:	c9 f6       	brne	.-78     	; 0x8e3a <procMessage11+0x13c>
    8e88:	06 e8       	ldi	r16, 0x86	; 134
    8e8a:	10 e0       	ldi	r17, 0x00	; 0
    8e8c:	ab e4       	ldi	r26, 0x4B	; 75
    8e8e:	ea 2e       	mov	r14, r26
    8e90:	ab e0       	ldi	r26, 0x0B	; 11
    8e92:	fa 2e       	mov	r15, r26
    8e94:	6e 01       	movw	r12, r28
    8e96:	08 94       	sec
    8e98:	c1 1c       	adc	r12, r1
    8e9a:	d1 1c       	adc	r13, r1
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8e9c:	f9 e0       	ldi	r31, 0x09	; 9
    8e9e:	8f 2e       	mov	r8, r31
    8ea0:	91 2c       	mov	r9, r1
    8ea2:	8c 0e       	add	r8, r28
    8ea4:	9d 1e       	adc	r9, r29
        StrPosCopy(rcv_trans,strProductPrice,(558+(i*8)),8);
		RemSpaceLag(strProductPrice);
		RemZeroLead(strProductPrice);
		RemDecimal(strProductPrice);

		eeprom_read_block((void*) &strReadEEPROM, (const void*) &DefProductPrice[i], 8);
    8ea6:	ef e5       	ldi	r30, 0x5F	; 95
    8ea8:	ae 2e       	mov	r10, r30
    8eaa:	b1 2c       	mov	r11, r1
    8eac:	ac 0e       	add	r10, r28
    8eae:	bd 1e       	adc	r11, r29
     eeprom_write_block((const void*) &buffHeader, (void*) &DefHeaderFooter[8], 40);
     StrPosCopy(rcv_trans,buffHeader,422,40);
     eeprom_write_block((const void*) &buffHeader, (void*) &DefHeaderFooter[9], 40);
	 */
	 //ProductName
	 for(i=0;i<6;i++){
    8eb0:	f6 01       	movw	r30, r12
    8eb2:	d7 01       	movw	r26, r14
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8eb4:	8d 91       	ld	r24, X+
    8eb6:	81 93       	st	Z+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8eb8:	e8 15       	cp	r30, r8
    8eba:	f9 05       	cpc	r31, r9
    8ebc:	d9 f7       	brne	.-10     	; 0x8eb4 <procMessage11+0x1b6>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8ebe:	19 86       	std	Y+9, r1	; 0x09
		    eeprom_write_block((const void*) &strProductName, (void*) &DefProductName[i], 12);
	 }
	 //ProductPrice
	 for(i=0;i<6;i++){
        StrPosCopy(rcv_trans,strProductPrice,(558+(i*8)),8);
		RemSpaceLag(strProductPrice);
    8ec0:	c6 01       	movw	r24, r12
    8ec2:	0e 94 e4 25 	call	0x4bc8	; 0x4bc8 <RemSpaceLag>
		RemZeroLead(strProductPrice);
    8ec6:	c6 01       	movw	r24, r12
    8ec8:	0e 94 51 25 	call	0x4aa2	; 0x4aa2 <RemZeroLead>
		RemDecimal(strProductPrice);
    8ecc:	c6 01       	movw	r24, r12
    8ece:	0e 94 4f 24 	call	0x489e	; 0x489e <RemDecimal>

		eeprom_read_block((void*) &strReadEEPROM, (const void*) &DefProductPrice[i], 8);
    8ed2:	c5 01       	movw	r24, r10
    8ed4:	b8 01       	movw	r22, r16
    8ed6:	48 e0       	ldi	r20, 0x08	; 8
    8ed8:	50 e0       	ldi	r21, 0x00	; 0
    8eda:	0e 94 30 ad 	call	0x15a60	; 0x15a60 <__eerd_block_m128>
		if (strcmp(strReadEEPROM,strProductPrice)!=0)
    8ede:	c5 01       	movw	r24, r10
    8ee0:	b6 01       	movw	r22, r12
    8ee2:	0e 94 e8 aa 	call	0x155d0	; 0x155d0 <strcmp>
    8ee6:	00 97       	sbiw	r24, 0x00	; 0
    8ee8:	31 f0       	breq	.+12     	; 0x8ef6 <procMessage11+0x1f8>
		    eeprom_write_block((const void*) &strProductPrice, (void*) &DefProductPrice[i], 8);
    8eea:	c6 01       	movw	r24, r12
    8eec:	b8 01       	movw	r22, r16
    8eee:	48 e0       	ldi	r20, 0x08	; 8
    8ef0:	50 e0       	ldi	r21, 0x00	; 0
    8ef2:	0e 94 48 ad 	call	0x15a90	; 0x15a90 <__eewr_block_m128>
    8ef6:	07 5f       	subi	r16, 0xF7	; 247
    8ef8:	1f 4f       	sbci	r17, 0xFF	; 255
    8efa:	88 e0       	ldi	r24, 0x08	; 8
    8efc:	90 e0       	ldi	r25, 0x00	; 0
    8efe:	e8 0e       	add	r14, r24
    8f00:	f9 1e       	adc	r15, r25
		eeprom_read_block((void*) &strReadEEPROM, (const void*) &DefProductName[i],12);
		if (strcmp(strReadEEPROM,strProductName)!=0)
		    eeprom_write_block((const void*) &strProductName, (void*) &DefProductName[i], 12);
	 }
	 //ProductPrice
	 for(i=0;i<6;i++){
    8f02:	90 e0       	ldi	r25, 0x00	; 0
    8f04:	0c 3b       	cpi	r16, 0xBC	; 188
    8f06:	19 07       	cpc	r17, r25
    8f08:	99 f6       	brne	.-90     	; 0x8eb0 <procMessage11+0x1b2>

		eeprom_read_block((void*) &strReadEEPROM, (const void*) &DefProductPrice[i], 8);
		if (strcmp(strReadEEPROM,strProductPrice)!=0)
		    eeprom_write_block((const void*) &strProductPrice, (void*) &DefProductPrice[i], 8);
	 }
}
    8f0a:	c0 57       	subi	r28, 0x70	; 112
    8f0c:	df 4f       	sbci	r29, 0xFF	; 255
    8f0e:	0f b6       	in	r0, 0x3f	; 63
    8f10:	f8 94       	cli
    8f12:	de bf       	out	0x3e, r29	; 62
    8f14:	0f be       	out	0x3f, r0	; 63
    8f16:	cd bf       	out	0x3d, r28	; 61
    8f18:	cf 91       	pop	r28
    8f1a:	df 91       	pop	r29
    8f1c:	1f 91       	pop	r17
    8f1e:	0f 91       	pop	r16
    8f20:	ff 90       	pop	r15
    8f22:	ef 90       	pop	r14
    8f24:	df 90       	pop	r13
    8f26:	cf 90       	pop	r12
    8f28:	bf 90       	pop	r11
    8f2a:	af 90       	pop	r10
    8f2c:	9f 90       	pop	r9
    8f2e:	8f 90       	pop	r8
    8f30:	7f 90       	pop	r7
    8f32:	6f 90       	pop	r6
    8f34:	08 95       	ret

00008f36 <ValidateRestoreCode>:
	     strKeyStamp[i]='0'+GeniusCalc(G_MULTY,(sSeed[i]-'0'),(sGCode[i]-'0'));		 
	 }strKeyStamp[strlen(sGCode)]=0;
     WrapCode(strKeyStamp);
}

char ValidateRestoreCode(char *sKeyStamp, char *sRestoreCode){//==RC_VALID
    8f36:	ef 92       	push	r14
    8f38:	ff 92       	push	r15
    8f3a:	0f 93       	push	r16
    8f3c:	1f 93       	push	r17
    8f3e:	cf 93       	push	r28
    8f40:	df 93       	push	r29
    8f42:	ec 01       	movw	r28, r24
    8f44:	7b 01       	movw	r14, r22

	 //  KeyStamp: [6]5585577 WrapCode6x
	 //sprintf_P(strSend,PSTR("KeyStamp:%s"),sKeyStamp);
	 //uart_print(1,1,strSend);

	 nSum=sKeyStamp[0]-'0';
    8f46:	08 81       	ld	r16, Y
    8f48:	00 53       	subi	r16, 0x30	; 48
    8f4a:	10 e0       	ldi	r17, 0x00	; 0
    8f4c:	04 c0       	rjmp	.+8      	; 0x8f56 <ValidateRestoreCode+0x20>
	 for (i=0;i<nSum;i++){
         WrapCode(sKeyStamp);
    8f4e:	ce 01       	movw	r24, r28
    8f50:	0e 94 ff 30 	call	0x61fe	; 0x61fe <WrapCode>
	 //  KeyStamp: [6]5585577 WrapCode6x
	 //sprintf_P(strSend,PSTR("KeyStamp:%s"),sKeyStamp);
	 //uart_print(1,1,strSend);

	 nSum=sKeyStamp[0]-'0';
	 for (i=0;i<nSum;i++){
    8f54:	1f 5f       	subi	r17, 0xFF	; 255
    8f56:	10 17       	cp	r17, r16
    8f58:	d0 f3       	brcs	.-12     	; 0x8f4e <ValidateRestoreCode+0x18>
	 //uart_print(1,1,strSend);
     
	 //sprintf_P(strSend,PSTR("WrapStamp:%s"),sRestoreCode);
	 //uart_print(1,1,strSend);

	 if (strcmp(sKeyStamp,sRestoreCode)==0)
    8f5a:	ce 01       	movw	r24, r28
    8f5c:	b7 01       	movw	r22, r14
    8f5e:	0e 94 e8 aa 	call	0x155d0	; 0x155d0 <strcmp>
    8f62:	00 97       	sbiw	r24, 0x00	; 0
    8f64:	11 f0       	breq	.+4      	; 0x8f6a <ValidateRestoreCode+0x34>
    8f66:	82 e0       	ldi	r24, 0x02	; 2
    8f68:	01 c0       	rjmp	.+2      	; 0x8f6c <ValidateRestoreCode+0x36>
    8f6a:	81 e0       	ldi	r24, 0x01	; 1
	     Result=RC_VALID;	 
     else Result=RC_INVALID;

   return Result;
}
    8f6c:	df 91       	pop	r29
    8f6e:	cf 91       	pop	r28
    8f70:	1f 91       	pop	r17
    8f72:	0f 91       	pop	r16
    8f74:	ff 90       	pop	r15
    8f76:	ef 90       	pop	r14
    8f78:	08 95       	ret

00008f7a <ValidateGeniusCode>:
          }
	 }sTemp[iAdd]=0;
	 sprintf_P(strSource,PSTR("%s"),sTemp);
}

char ValidateGeniusCode(char *sDate, char *sGenCode){//==GC_VALID
    8f7a:	ef 92       	push	r14
    8f7c:	ff 92       	push	r15
    8f7e:	0f 93       	push	r16
    8f80:	1f 93       	push	r17
    8f82:	df 93       	push	r29
    8f84:	cf 93       	push	r28
    8f86:	cd b7       	in	r28, 0x3d	; 61
    8f88:	de b7       	in	r29, 0x3e	; 62
    8f8a:	2a 97       	sbiw	r28, 0x0a	; 10
    8f8c:	0f b6       	in	r0, 0x3f	; 63
    8f8e:	f8 94       	cli
    8f90:	de bf       	out	0x3e, r29	; 62
    8f92:	0f be       	out	0x3f, r0	; 63
    8f94:	cd bf       	out	0x3d, r28	; 61
    8f96:	7b 01       	movw	r14, r22

         #ifdef DEBUG_GENIUS_CODE
		 sprintf_P(strSend,PSTR("[%s]"),sGenCode); 
         uart_print(1,1,strSend);
		 #endif
	 if (strlen(sGenCode)==8){//Length musti  8
    8f98:	fb 01       	movw	r30, r22
    8f9a:	01 90       	ld	r0, Z+
    8f9c:	00 20       	and	r0, r0
    8f9e:	e9 f7       	brne	.-6      	; 0x8f9a <ValidateGeniusCode+0x20>
    8fa0:	39 97       	sbiw	r30, 0x09	; 9
    8fa2:	e6 17       	cp	r30, r22
    8fa4:	f7 07       	cpc	r31, r23
    8fa6:	11 f0       	breq	.+4      	; 0x8fac <ValidateGeniusCode+0x32>
    8fa8:	80 e0       	ldi	r24, 0x00	; 0
    8faa:	11 c0       	rjmp	.+34     	; 0x8fce <ValidateGeniusCode+0x54>
	     //sDate: 05012001		 
		 GenerateGeniusCode(sDate,sGenCode[0],sAutoGen);
    8fac:	fb 01       	movw	r30, r22
    8fae:	60 81       	ld	r22, Z
    8fb0:	8e 01       	movw	r16, r28
    8fb2:	0f 5f       	subi	r16, 0xFF	; 255
    8fb4:	1f 4f       	sbci	r17, 0xFF	; 255
    8fb6:	a8 01       	movw	r20, r16
    8fb8:	0e 94 fd 31 	call	0x63fa	; 0x63fa <GenerateGeniusCode>
         #ifdef DEBUG_GENIUS_CODE
		 sprintf_P(strSend,PSTR("%s|%s"),sAutoGen,sGenCode); 
         uart_print(1,1,strSend);
		 #endif

         if (strcmp(sAutoGen,sGenCode)==0)
    8fbc:	c8 01       	movw	r24, r16
    8fbe:	b7 01       	movw	r22, r14
    8fc0:	0e 94 e8 aa 	call	0x155d0	; 0x155d0 <strcmp>
    8fc4:	00 97       	sbiw	r24, 0x00	; 0
    8fc6:	11 f0       	breq	.+4      	; 0x8fcc <ValidateGeniusCode+0x52>
    8fc8:	82 e0       	ldi	r24, 0x02	; 2
    8fca:	01 c0       	rjmp	.+2      	; 0x8fce <ValidateGeniusCode+0x54>
    8fcc:	81 e0       	ldi	r24, 0x01	; 1
         else Result=GC_INVALID;
	 }


   return Result;
}
    8fce:	2a 96       	adiw	r28, 0x0a	; 10
    8fd0:	0f b6       	in	r0, 0x3f	; 63
    8fd2:	f8 94       	cli
    8fd4:	de bf       	out	0x3e, r29	; 62
    8fd6:	0f be       	out	0x3f, r0	; 63
    8fd8:	cd bf       	out	0x3d, r28	; 61
    8fda:	cf 91       	pop	r28
    8fdc:	df 91       	pop	r29
    8fde:	1f 91       	pop	r17
    8fe0:	0f 91       	pop	r16
    8fe2:	ff 90       	pop	r15
    8fe4:	ef 90       	pop	r14
    8fe6:	08 95       	ret

00008fe8 <_scr_pump>:

void leadingZero(char Val,char *StrResult){
     sprintf_P(StrResult,PSTR("%.2d"),Val);

}
void _scr_pump(void){
    8fe8:	8f 92       	push	r8
    8fea:	9f 92       	push	r9
    8fec:	af 92       	push	r10
    8fee:	bf 92       	push	r11
    8ff0:	cf 92       	push	r12
    8ff2:	df 92       	push	r13
    8ff4:	ef 92       	push	r14
    8ff6:	ff 92       	push	r15
    8ff8:	0f 93       	push	r16
    8ffa:	1f 93       	push	r17
    8ffc:	df 93       	push	r29
    8ffe:	cf 93       	push	r28
    9000:	cd b7       	in	r28, 0x3d	; 61
    9002:	de b7       	in	r29, 0x3e	; 62
    9004:	6c 97       	sbiw	r28, 0x1c	; 28
    9006:	0f b6       	in	r0, 0x3f	; 63
    9008:	f8 94       	cli
    900a:	de bf       	out	0x3e, r29	; 62
    900c:	0f be       	out	0x3f, r0	; 63
    900e:	cd bf       	out	0x3d, r28	; 61
	 //char strPumpL[3],strPumpR[3];
	 char __pump_id[8];
	 char i;
     char lcdteks[20];
	 lcd_clear();_delay_ms(10);
    9010:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
    9014:	84 ec       	ldi	r24, 0xC4	; 196
    9016:	99 e0       	ldi	r25, 0x09	; 9
    9018:	01 97       	sbiw	r24, 0x01	; 1
    901a:	f1 f7       	brne	.-4      	; 0x9018 <_scr_pump+0x30>
	 //Display
		eeprom_read_block((void*) &__pump_id, (const void*) &DefPumpMap, 8);
    901c:	8e 01       	movw	r16, r28
    901e:	0f 5f       	subi	r16, 0xFF	; 255
    9020:	1f 4f       	sbci	r17, 0xFF	; 255
    9022:	c8 01       	movw	r24, r16
    9024:	66 e4       	ldi	r22, 0x46	; 70
    9026:	70 e0       	ldi	r23, 0x00	; 0
    9028:	48 e0       	ldi	r20, 0x08	; 8
    902a:	50 e0       	ldi	r21, 0x00	; 0
    902c:	0e 94 30 ad 	call	0x15a60	; 0x15a60 <__eerd_block_m128>
    9030:	78 01       	movw	r14, r16
    9032:	01 e0       	ldi	r16, 0x01	; 1
    9034:	10 e0       	ldi	r17, 0x00	; 0
        for (i=0;i<4;i++){
             //leadingZero(__pump_id[i],strPumpL);
			 //leadingZero(__pump_id[i+4],strPumpR);
             //sprintf_P(lcdteks,PSTR("%d.P%s | %.P%s  "),(i+1),strPumpL,(i+5),strPumpR);
			 sprintf_P(lcdteks,PSTR("%d.P%.2d | %d.P%.2d "),(i+1),__pump_id[i],(i+5),__pump_id[i+4]);
    9036:	a9 e0       	ldi	r26, 0x09	; 9
    9038:	ca 2e       	mov	r12, r26
    903a:	d1 2c       	mov	r13, r1
    903c:	cc 0e       	add	r12, r28
    903e:	dd 1e       	adc	r13, r29
    9040:	f4 ed       	ldi	r31, 0xD4	; 212
    9042:	8f 2e       	mov	r8, r31
    9044:	fe e0       	ldi	r31, 0x0E	; 14
    9046:	9f 2e       	mov	r9, r31
	 char i;
     char lcdteks[20];
	 lcd_clear();_delay_ms(10);
	 //Display
		eeprom_read_block((void*) &__pump_id, (const void*) &DefPumpMap, 8);
        for (i=0;i<4;i++){
    9048:	e5 e0       	ldi	r30, 0x05	; 5
    904a:	ae 2e       	mov	r10, r30
    904c:	b1 2c       	mov	r11, r1
    904e:	ac 0e       	add	r10, r28
    9050:	bd 1e       	adc	r11, r29
             //leadingZero(__pump_id[i],strPumpL);
			 //leadingZero(__pump_id[i+4],strPumpR);
             //sprintf_P(lcdteks,PSTR("%d.P%s | %.P%s  "),(i+1),strPumpL,(i+5),strPumpR);
			 sprintf_P(lcdteks,PSTR("%d.P%.2d | %d.P%.2d "),(i+1),__pump_id[i],(i+5),__pump_id[i+4]);
    9052:	8d b7       	in	r24, 0x3d	; 61
    9054:	9e b7       	in	r25, 0x3e	; 62
    9056:	0c 97       	sbiw	r24, 0x0c	; 12
    9058:	0f b6       	in	r0, 0x3f	; 63
    905a:	f8 94       	cli
    905c:	9e bf       	out	0x3e, r25	; 62
    905e:	0f be       	out	0x3f, r0	; 63
    9060:	8d bf       	out	0x3d, r24	; 61
    9062:	ed b7       	in	r30, 0x3d	; 61
    9064:	fe b7       	in	r31, 0x3e	; 62
    9066:	31 96       	adiw	r30, 0x01	; 1
    9068:	ad b7       	in	r26, 0x3d	; 61
    906a:	be b7       	in	r27, 0x3e	; 62
    906c:	12 96       	adiw	r26, 0x02	; 2
    906e:	dc 92       	st	X, r13
    9070:	ce 92       	st	-X, r12
    9072:	11 97       	sbiw	r26, 0x01	; 1
    9074:	93 82       	std	Z+3, r9	; 0x03
    9076:	82 82       	std	Z+2, r8	; 0x02
    9078:	15 83       	std	Z+5, r17	; 0x05
    907a:	04 83       	std	Z+4, r16	; 0x04
    907c:	d7 01       	movw	r26, r14
    907e:	8c 91       	ld	r24, X
    9080:	86 83       	std	Z+6, r24	; 0x06
    9082:	17 82       	std	Z+7, r1	; 0x07
    9084:	0c 5f       	subi	r16, 0xFC	; 252
    9086:	1f 4f       	sbci	r17, 0xFF	; 255
    9088:	11 87       	std	Z+9, r17	; 0x09
    908a:	00 87       	std	Z+8, r16	; 0x08
    908c:	04 50       	subi	r16, 0x04	; 4
    908e:	10 40       	sbci	r17, 0x00	; 0
    9090:	14 96       	adiw	r26, 0x04	; 4
    9092:	8c 91       	ld	r24, X
    9094:	82 87       	std	Z+10, r24	; 0x0a
    9096:	13 86       	std	Z+11, r1	; 0x0b
    9098:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
			 lcd_print((i+1),1,lcdteks);
    909c:	8d b7       	in	r24, 0x3d	; 61
    909e:	9e b7       	in	r25, 0x3e	; 62
    90a0:	0c 96       	adiw	r24, 0x0c	; 12
    90a2:	0f b6       	in	r0, 0x3f	; 63
    90a4:	f8 94       	cli
    90a6:	9e bf       	out	0x3e, r25	; 62
    90a8:	0f be       	out	0x3f, r0	; 63
    90aa:	8d bf       	out	0x3d, r24	; 61
    90ac:	80 2f       	mov	r24, r16
    90ae:	61 e0       	ldi	r22, 0x01	; 1
    90b0:	a6 01       	movw	r20, r12
    90b2:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
    90b6:	08 94       	sec
    90b8:	e1 1c       	adc	r14, r1
    90ba:	f1 1c       	adc	r15, r1
    90bc:	0f 5f       	subi	r16, 0xFF	; 255
    90be:	1f 4f       	sbci	r17, 0xFF	; 255
	 char i;
     char lcdteks[20];
	 lcd_clear();_delay_ms(10);
	 //Display
		eeprom_read_block((void*) &__pump_id, (const void*) &DefPumpMap, 8);
        for (i=0;i<4;i++){
    90c0:	ea 14       	cp	r14, r10
    90c2:	fb 04       	cpc	r15, r11
    90c4:	31 f6       	brne	.-116    	; 0x9052 <_scr_pump+0x6a>
			 //leadingZero(__pump_id[i+4],strPumpR);
             //sprintf_P(lcdteks,PSTR("%d.P%s | %.P%s  "),(i+1),strPumpL,(i+5),strPumpR);
			 sprintf_P(lcdteks,PSTR("%d.P%.2d | %d.P%.2d "),(i+1),__pump_id[i],(i+5),__pump_id[i+4]);
			 lcd_print((i+1),1,lcdteks);
		}
        lcd_printf(4,15,PSTR("*)Exit"));
    90c6:	84 e0       	ldi	r24, 0x04	; 4
    90c8:	6f e0       	ldi	r22, 0x0F	; 15
    90ca:	4d ec       	ldi	r20, 0xCD	; 205
    90cc:	5e e0       	ldi	r21, 0x0E	; 14
    90ce:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
}
    90d2:	6c 96       	adiw	r28, 0x1c	; 28
    90d4:	0f b6       	in	r0, 0x3f	; 63
    90d6:	f8 94       	cli
    90d8:	de bf       	out	0x3e, r29	; 62
    90da:	0f be       	out	0x3f, r0	; 63
    90dc:	cd bf       	out	0x3d, r28	; 61
    90de:	cf 91       	pop	r28
    90e0:	df 91       	pop	r29
    90e2:	1f 91       	pop	r17
    90e4:	0f 91       	pop	r16
    90e6:	ff 90       	pop	r15
    90e8:	ef 90       	pop	r14
    90ea:	df 90       	pop	r13
    90ec:	cf 90       	pop	r12
    90ee:	bf 90       	pop	r11
    90f0:	af 90       	pop	r10
    90f2:	9f 90       	pop	r9
    90f4:	8f 90       	pop	r8
    90f6:	08 95       	ret

000090f8 <FViewFreeMessage>:
char FViewFreeMessage(){
static char stFreeMessage=fmInit;
       char Result=MENU_NONE;
     
	 Result=MENU_NONE;
	 switch(stFreeMessage){
    90f8:	80 91 6d 02 	lds	r24, 0x026D
    90fc:	81 30       	cpi	r24, 0x01	; 1
    90fe:	49 f0       	breq	.+18     	; 0x9112 <FViewFreeMessage+0x1a>
    9100:	81 30       	cpi	r24, 0x01	; 1
    9102:	28 f0       	brcs	.+10     	; 0x910e <FViewFreeMessage+0x16>
    9104:	82 30       	cpi	r24, 0x02	; 2
    9106:	19 f1       	breq	.+70     	; 0x914e <FViewFreeMessage+0x56>
    9108:	83 30       	cpi	r24, 0x03	; 3
    910a:	71 f5       	brne	.+92     	; 0x9168 <FViewFreeMessage+0x70>
    910c:	29 c0       	rjmp	.+82     	; 0x9160 <FViewFreeMessage+0x68>
	 case fmInit:
	      stFreeMessage=fmDisplayFreeMessage;
    910e:	81 e0       	ldi	r24, 0x01	; 1
    9110:	23 c0       	rjmp	.+70     	; 0x9158 <FViewFreeMessage+0x60>
	      break;
     case fmDisplayFreeMessage:
		  lcd_clear();
    9112:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
		  lcd_print(1,1,strFreeMessageLine1);
    9116:	81 e0       	ldi	r24, 0x01	; 1
    9118:	61 e0       	ldi	r22, 0x01	; 1
    911a:	42 e9       	ldi	r20, 0x92	; 146
    911c:	58 e0       	ldi	r21, 0x08	; 8
    911e:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
		  lcd_print(2,1,strFreeMessageLine2);
    9122:	82 e0       	ldi	r24, 0x02	; 2
    9124:	61 e0       	ldi	r22, 0x01	; 1
    9126:	43 ea       	ldi	r20, 0xA3	; 163
    9128:	57 e0       	ldi	r21, 0x07	; 7
    912a:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
		  lcd_print(3,1,strFreeMessageLine3);
    912e:	83 e0       	ldi	r24, 0x03	; 3
    9130:	61 e0       	ldi	r22, 0x01	; 1
    9132:	4c e1       	ldi	r20, 0x1C	; 28
    9134:	58 e0       	ldi	r21, 0x08	; 8
    9136:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
		  lcd_print(4,1,strFreeMessageLine4);
    913a:	84 e0       	ldi	r24, 0x04	; 4
    913c:	61 e0       	ldi	r22, 0x01	; 1
    913e:	46 ed       	ldi	r20, 0xD6	; 214
    9140:	5b e0       	ldi	r21, 0x0B	; 11
    9142:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
	      TimDisplay=0;
    9146:	10 92 92 01 	sts	0x0192, r1
	      stFreeMessage=fmDelayViewMesage;
    914a:	82 e0       	ldi	r24, 0x02	; 2
    914c:	05 c0       	rjmp	.+10     	; 0x9158 <FViewFreeMessage+0x60>
	      break;
	 case fmDelayViewMesage:  
	      if (TimDisplay>TIM_FREE_MESSAGE)stFreeMessage=fmFinishFreeMessage;
    914e:	80 91 92 01 	lds	r24, 0x0192
    9152:	8b 30       	cpi	r24, 0x0B	; 11
    9154:	48 f0       	brcs	.+18     	; 0x9168 <FViewFreeMessage+0x70>
    9156:	83 e0       	ldi	r24, 0x03	; 3
    9158:	80 93 6d 02 	sts	0x026D, r24
    915c:	80 e0       	ldi	r24, 0x00	; 0
    915e:	08 95       	ret
	      break;
     case fmFinishFreeMessage:
          stFreeMessage=fmInit;
    9160:	10 92 6d 02 	sts	0x026D, r1
    9164:	81 e0       	ldi	r24, 0x01	; 1
    9166:	08 95       	ret
    9168:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
	      break;
	 }
  return Result;
}
    916a:	08 95       	ret

0000916c <FTestChar>:
		TimTicker++;
	}

}

char FTestChar(){
    916c:	0f 93       	push	r16
    916e:	1f 93       	push	r17
    9170:	df 93       	push	r29
    9172:	cf 93       	push	r28
    9174:	cd b7       	in	r28, 0x3d	; 61
    9176:	de b7       	in	r29, 0x3e	; 62
    9178:	64 97       	sbiw	r28, 0x14	; 20
    917a:	0f b6       	in	r0, 0x3f	; 63
    917c:	f8 94       	cli
    917e:	de bf       	out	0x3e, r29	; 62
    9180:	0f be       	out	0x3f, r0	; 63
    9182:	cd bf       	out	0x3d, r28	; 61
char lcdteks[20],Result;
char i=0;
     Result=MENU_NONE;
     sprintf_P(lcdteks,PSTR("D:%d C:%c  "),i,i);
    9184:	8d b7       	in	r24, 0x3d	; 61
    9186:	9e b7       	in	r25, 0x3e	; 62
    9188:	08 97       	sbiw	r24, 0x08	; 8
    918a:	0f b6       	in	r0, 0x3f	; 63
    918c:	f8 94       	cli
    918e:	9e bf       	out	0x3e, r25	; 62
    9190:	0f be       	out	0x3f, r0	; 63
    9192:	8d bf       	out	0x3d, r24	; 61
    9194:	ed b7       	in	r30, 0x3d	; 61
    9196:	fe b7       	in	r31, 0x3e	; 62
    9198:	31 96       	adiw	r30, 0x01	; 1
    919a:	8e 01       	movw	r16, r28
    919c:	0f 5f       	subi	r16, 0xFF	; 255
    919e:	1f 4f       	sbci	r17, 0xFF	; 255
    91a0:	ad b7       	in	r26, 0x3d	; 61
    91a2:	be b7       	in	r27, 0x3e	; 62
    91a4:	12 96       	adiw	r26, 0x02	; 2
    91a6:	1c 93       	st	X, r17
    91a8:	0e 93       	st	-X, r16
    91aa:	11 97       	sbiw	r26, 0x01	; 1
    91ac:	83 e6       	ldi	r24, 0x63	; 99
    91ae:	9e e1       	ldi	r25, 0x1E	; 30
    91b0:	93 83       	std	Z+3, r25	; 0x03
    91b2:	82 83       	std	Z+2, r24	; 0x02
    91b4:	15 82       	std	Z+5, r1	; 0x05
    91b6:	14 82       	std	Z+4, r1	; 0x04
    91b8:	17 82       	std	Z+7, r1	; 0x07
    91ba:	16 82       	std	Z+6, r1	; 0x06
    91bc:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
     lcd_print(1,1,lcdteks);
    91c0:	8d b7       	in	r24, 0x3d	; 61
    91c2:	9e b7       	in	r25, 0x3e	; 62
    91c4:	08 96       	adiw	r24, 0x08	; 8
    91c6:	0f b6       	in	r0, 0x3f	; 63
    91c8:	f8 94       	cli
    91ca:	9e bf       	out	0x3e, r25	; 62
    91cc:	0f be       	out	0x3f, r0	; 63
    91ce:	8d bf       	out	0x3d, r24	; 61
    91d0:	81 e0       	ldi	r24, 0x01	; 1
    91d2:	61 e0       	ldi	r22, 0x01	; 1
    91d4:	a8 01       	movw	r20, r16
    91d6:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
    91da:	88 ee       	ldi	r24, 0xE8	; 232
    91dc:	9d ef       	ldi	r25, 0xFD	; 253
    91de:	29 e1       	ldi	r18, 0x19	; 25
    91e0:	30 e0       	ldi	r19, 0x00	; 0
    91e2:	f9 01       	movw	r30, r18
    91e4:	31 97       	sbiw	r30, 0x01	; 1
    91e6:	f1 f7       	brne	.-4      	; 0x91e4 <FTestChar+0x78>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    91e8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    91ea:	d9 f7       	brne	.-10     	; 0x91e2 <FTestChar+0x76>
	 if (i==0xFF)Result=MENU_DONE;
	 i++;
     _delay_ms(6500);
  return Result;
}
    91ec:	80 e0       	ldi	r24, 0x00	; 0
    91ee:	64 96       	adiw	r28, 0x14	; 20
    91f0:	0f b6       	in	r0, 0x3f	; 63
    91f2:	f8 94       	cli
    91f4:	de bf       	out	0x3e, r29	; 62
    91f6:	0f be       	out	0x3f, r0	; 63
    91f8:	cd bf       	out	0x3d, r28	; 61
    91fa:	cf 91       	pop	r28
    91fc:	df 91       	pop	r29
    91fe:	1f 91       	pop	r17
    9200:	0f 91       	pop	r16
    9202:	08 95       	ret

00009204 <DisplayDateTime>:

void DisplayQueueFIP(){// FIP:#1#2#3#4#5

}

void DisplayDateTime(){
    9204:	cf 92       	push	r12
    9206:	df 92       	push	r13
    9208:	ef 92       	push	r14
    920a:	ff 92       	push	r15
    920c:	0f 93       	push	r16
    920e:	1f 93       	push	r17
    9210:	df 93       	push	r29
    9212:	cf 93       	push	r28
    9214:	cd b7       	in	r28, 0x3d	; 61
    9216:	de b7       	in	r29, 0x3e	; 62
    9218:	64 97       	sbiw	r28, 0x14	; 20
    921a:	0f b6       	in	r0, 0x3f	; 63
    921c:	f8 94       	cli
    921e:	de bf       	out	0x3e, r29	; 62
    9220:	0f be       	out	0x3f, r0	; 63
    9222:	cd bf       	out	0x3d, r28	; 61
char lcdteks[20];
	 _datetime(0, strSystemDate, strSystemTime);
    9224:	1a eb       	ldi	r17, 0xBA	; 186
    9226:	e1 2e       	mov	r14, r17
    9228:	13 e0       	ldi	r17, 0x03	; 3
    922a:	f1 2e       	mov	r15, r17
    922c:	b4 e7       	ldi	r27, 0x74	; 116
    922e:	cb 2e       	mov	r12, r27
    9230:	b8 e0       	ldi	r27, 0x08	; 8
    9232:	db 2e       	mov	r13, r27
    9234:	80 e0       	ldi	r24, 0x00	; 0
    9236:	b7 01       	movw	r22, r14
    9238:	a6 01       	movw	r20, r12
    923a:	0e 94 ce a7 	call	0x14f9c	; 0x14f9c <_datetime>
	 sprintf_P(lcdteks,PSTR("%s %s"),strSystemDate,strSystemTime);
    923e:	8d b7       	in	r24, 0x3d	; 61
    9240:	9e b7       	in	r25, 0x3e	; 62
    9242:	08 97       	sbiw	r24, 0x08	; 8
    9244:	0f b6       	in	r0, 0x3f	; 63
    9246:	f8 94       	cli
    9248:	9e bf       	out	0x3e, r25	; 62
    924a:	0f be       	out	0x3f, r0	; 63
    924c:	8d bf       	out	0x3d, r24	; 61
    924e:	ed b7       	in	r30, 0x3d	; 61
    9250:	fe b7       	in	r31, 0x3e	; 62
    9252:	31 96       	adiw	r30, 0x01	; 1
    9254:	8e 01       	movw	r16, r28
    9256:	0f 5f       	subi	r16, 0xFF	; 255
    9258:	1f 4f       	sbci	r17, 0xFF	; 255
    925a:	ad b7       	in	r26, 0x3d	; 61
    925c:	be b7       	in	r27, 0x3e	; 62
    925e:	12 96       	adiw	r26, 0x02	; 2
    9260:	1c 93       	st	X, r17
    9262:	0e 93       	st	-X, r16
    9264:	11 97       	sbiw	r26, 0x01	; 1
    9266:	8f e6       	ldi	r24, 0x6F	; 111
    9268:	9e e1       	ldi	r25, 0x1E	; 30
    926a:	93 83       	std	Z+3, r25	; 0x03
    926c:	82 83       	std	Z+2, r24	; 0x02
    926e:	f5 82       	std	Z+5, r15	; 0x05
    9270:	e4 82       	std	Z+4, r14	; 0x04
    9272:	d7 82       	std	Z+7, r13	; 0x07
    9274:	c6 82       	std	Z+6, r12	; 0x06
    9276:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	 lcd_print(2, 1, lcdteks);
    927a:	8d b7       	in	r24, 0x3d	; 61
    927c:	9e b7       	in	r25, 0x3e	; 62
    927e:	08 96       	adiw	r24, 0x08	; 8
    9280:	0f b6       	in	r0, 0x3f	; 63
    9282:	f8 94       	cli
    9284:	9e bf       	out	0x3e, r25	; 62
    9286:	0f be       	out	0x3f, r0	; 63
    9288:	8d bf       	out	0x3d, r24	; 61
    928a:	82 e0       	ldi	r24, 0x02	; 2
    928c:	61 e0       	ldi	r22, 0x01	; 1
    928e:	a8 01       	movw	r20, r16
    9290:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
}
    9294:	64 96       	adiw	r28, 0x14	; 20
    9296:	0f b6       	in	r0, 0x3f	; 63
    9298:	f8 94       	cli
    929a:	de bf       	out	0x3e, r29	; 62
    929c:	0f be       	out	0x3f, r0	; 63
    929e:	cd bf       	out	0x3d, r28	; 61
    92a0:	cf 91       	pop	r28
    92a2:	df 91       	pop	r29
    92a4:	1f 91       	pop	r17
    92a6:	0f 91       	pop	r16
    92a8:	ff 90       	pop	r15
    92aa:	ef 90       	pop	r14
    92ac:	df 90       	pop	r13
    92ae:	cf 90       	pop	r12
    92b0:	08 95       	ret

000092b2 <DisplayScreenIdle>:
		if ((__num>='0')&&(__num<='9')||(IsStandAloneDetected==True)) 
		break;
	 }
}

void DisplayScreenIdle(void){
    92b2:	cf 92       	push	r12
    92b4:	df 92       	push	r13
    92b6:	ef 92       	push	r14
    92b8:	ff 92       	push	r15
    92ba:	0f 93       	push	r16
    92bc:	1f 93       	push	r17
    92be:	df 93       	push	r29
    92c0:	cf 93       	push	r28
    92c2:	cd b7       	in	r28, 0x3d	; 61
    92c4:	de b7       	in	r29, 0x3e	; 62
    92c6:	a8 97       	sbiw	r28, 0x28	; 40
    92c8:	0f b6       	in	r0, 0x3f	; 63
    92ca:	f8 94       	cli
    92cc:	de bf       	out	0x3e, r29	; 62
    92ce:	0f be       	out	0x3f, r0	; 63
    92d0:	cd bf       	out	0x3d, r28	; 61
char strCodeName[10],strVersion[10],lcdteks[20];
    sprintf_P(strCodeName,PSTR(CODE_NAME)); 
    92d2:	00 d0       	rcall	.+0      	; 0x92d4 <DisplayScreenIdle+0x22>
    92d4:	00 d0       	rcall	.+0      	; 0x92d6 <DisplayScreenIdle+0x24>
    92d6:	6e 01       	movw	r12, r28
    92d8:	08 94       	sec
    92da:	c1 1c       	adc	r12, r1
    92dc:	d1 1c       	adc	r13, r1
    92de:	ad b7       	in	r26, 0x3d	; 61
    92e0:	be b7       	in	r27, 0x3e	; 62
    92e2:	12 96       	adiw	r26, 0x02	; 2
    92e4:	dc 92       	st	X, r13
    92e6:	ce 92       	st	-X, r12
    92e8:	11 97       	sbiw	r26, 0x01	; 1
    92ea:	84 e9       	ldi	r24, 0x94	; 148
    92ec:	93 e2       	ldi	r25, 0x23	; 35
    92ee:	14 96       	adiw	r26, 0x04	; 4
    92f0:	9c 93       	st	X, r25
    92f2:	8e 93       	st	-X, r24
    92f4:	13 97       	sbiw	r26, 0x03	; 3
    92f6:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
    sprintf_P(strVersion,PSTR(VERSION_NUM)); 
    92fa:	0b e0       	ldi	r16, 0x0B	; 11
    92fc:	e0 2e       	mov	r14, r16
    92fe:	f1 2c       	mov	r15, r1
    9300:	ec 0e       	add	r14, r28
    9302:	fd 1e       	adc	r15, r29
    9304:	ed b7       	in	r30, 0x3d	; 61
    9306:	fe b7       	in	r31, 0x3e	; 62
    9308:	f2 82       	std	Z+2, r15	; 0x02
    930a:	e1 82       	std	Z+1, r14	; 0x01
    930c:	8e e8       	ldi	r24, 0x8E	; 142
    930e:	93 e2       	ldi	r25, 0x23	; 35
    9310:	94 83       	std	Z+4, r25	; 0x04
    9312:	83 83       	std	Z+3, r24	; 0x03
    9314:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
    sprintf_P(lcdteks,PSTR("%s %s"),strCodeName,strVersion); 
    9318:	00 d0       	rcall	.+0      	; 0x931a <DisplayScreenIdle+0x68>
    931a:	00 d0       	rcall	.+0      	; 0x931c <DisplayScreenIdle+0x6a>
    931c:	ed b7       	in	r30, 0x3d	; 61
    931e:	fe b7       	in	r31, 0x3e	; 62
    9320:	31 96       	adiw	r30, 0x01	; 1
    9322:	8e 01       	movw	r16, r28
    9324:	0b 5e       	subi	r16, 0xEB	; 235
    9326:	1f 4f       	sbci	r17, 0xFF	; 255
    9328:	ad b7       	in	r26, 0x3d	; 61
    932a:	be b7       	in	r27, 0x3e	; 62
    932c:	12 96       	adiw	r26, 0x02	; 2
    932e:	1c 93       	st	X, r17
    9330:	0e 93       	st	-X, r16
    9332:	11 97       	sbiw	r26, 0x01	; 1
    9334:	88 e8       	ldi	r24, 0x88	; 136
    9336:	93 e2       	ldi	r25, 0x23	; 35
    9338:	93 83       	std	Z+3, r25	; 0x03
    933a:	82 83       	std	Z+2, r24	; 0x02
    933c:	d5 82       	std	Z+5, r13	; 0x05
    933e:	c4 82       	std	Z+4, r12	; 0x04
    9340:	f7 82       	std	Z+7, r15	; 0x07
    9342:	e6 82       	std	Z+6, r14	; 0x06
    9344:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	lcd_clear();
    9348:	ed b7       	in	r30, 0x3d	; 61
    934a:	fe b7       	in	r31, 0x3e	; 62
    934c:	38 96       	adiw	r30, 0x08	; 8
    934e:	0f b6       	in	r0, 0x3f	; 63
    9350:	f8 94       	cli
    9352:	fe bf       	out	0x3e, r31	; 62
    9354:	0f be       	out	0x3f, r0	; 63
    9356:	ed bf       	out	0x3d, r30	; 61
    9358:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
	lcd_print(1,1,lcdteks);
    935c:	81 e0       	ldi	r24, 0x01	; 1
    935e:	61 e0       	ldi	r22, 0x01	; 1
    9360:	a8 01       	movw	r20, r16
    9362:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
}
    9366:	a8 96       	adiw	r28, 0x28	; 40
    9368:	0f b6       	in	r0, 0x3f	; 63
    936a:	f8 94       	cli
    936c:	de bf       	out	0x3e, r29	; 62
    936e:	0f be       	out	0x3f, r0	; 63
    9370:	cd bf       	out	0x3d, r28	; 61
    9372:	cf 91       	pop	r28
    9374:	df 91       	pop	r29
    9376:	1f 91       	pop	r17
    9378:	0f 91       	pop	r16
    937a:	ff 90       	pop	r15
    937c:	ef 90       	pop	r14
    937e:	df 90       	pop	r13
    9380:	cf 90       	pop	r12
    9382:	08 95       	ret

00009384 <DisplayPumpStatus>:
		  break;         	 
	 }
  return Result;	 
}

void DisplayPumpStatus(){
    9384:	0f 93       	push	r16
    9386:	1f 93       	push	r17
    9388:	df 93       	push	r29
    938a:	cf 93       	push	r28
    938c:	cd b7       	in	r28, 0x3d	; 61
    938e:	de b7       	in	r29, 0x3e	; 62
    9390:	a8 97       	sbiw	r28, 0x28	; 40
    9392:	0f b6       	in	r0, 0x3f	; 63
    9394:	f8 94       	cli
    9396:	de bf       	out	0x3e, r29	; 62
    9398:	0f be       	out	0x3f, r0	; 63
    939a:	cd bf       	out	0x3d, r28	; 61
     char SPump[20],lcdteks[20];

	 if (IsNewPumpStatus==True){
    939c:	80 91 01 01 	lds	r24, 0x0101
    93a0:	81 30       	cpi	r24, 0x01	; 1
    93a2:	09 f0       	breq	.+2      	; 0x93a6 <DisplayPumpStatus+0x22>
    93a4:	4a c0       	rjmp	.+148    	; 0x943a <DisplayPumpStatus+0xb6>
	     IsNewPumpStatus=False;
    93a6:	10 92 01 01 	sts	0x0101, r1
	      }
     }      
}

void BackLightTrig(){    
     __key_light = 1; 
    93aa:	80 93 ae 02 	sts	0x02AE, r24
	 __key_lgtcnt = 0; 
    93ae:	10 92 af 02 	sts	0x02AF, r1
	 PORTG=PORTG&0b11111101;
    93b2:	80 91 65 00 	lds	r24, 0x0065
    93b6:	8d 7f       	andi	r24, 0xFD	; 253
    93b8:	80 93 65 00 	sts	0x0065, r24
     char SPump[20],lcdteks[20];

	 if (IsNewPumpStatus==True){
	     IsNewPumpStatus=False;
		 BackLightTrig();
		 StrPosCopy(strPumpStatus,SPump,0,PumpCountMax);
    93bc:	80 91 5c 01 	lds	r24, 0x015C
    93c0:	48 2f       	mov	r20, r24
    93c2:	50 e0       	ldi	r21, 0x00	; 0
    93c4:	20 e0       	ldi	r18, 0x00	; 0
    93c6:	30 e0       	ldi	r19, 0x00	; 0
    93c8:	be 01       	movw	r22, r28
    93ca:	6f 5f       	subi	r22, 0xFF	; 255
    93cc:	7f 4f       	sbci	r23, 0xFF	; 255
    93ce:	0a c0       	rjmp	.+20     	; 0x93e4 <DisplayPumpStatus+0x60>
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    93d0:	fb 01       	movw	r30, r22
    93d2:	e2 0f       	add	r30, r18
    93d4:	f3 1f       	adc	r31, r19
    93d6:	d9 01       	movw	r26, r18
    93d8:	ae 5f       	subi	r26, 0xFE	; 254
    93da:	be 4f       	sbci	r27, 0xFE	; 254
    93dc:	8c 91       	ld	r24, X
    93de:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    93e0:	2f 5f       	subi	r18, 0xFF	; 255
    93e2:	3f 4f       	sbci	r19, 0xFF	; 255
    93e4:	24 17       	cp	r18, r20
    93e6:	35 07       	cpc	r19, r21
    93e8:	98 f3       	brcs	.-26     	; 0x93d0 <DisplayPumpStatus+0x4c>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    93ea:	46 0f       	add	r20, r22
    93ec:	57 1f       	adc	r21, r23
    93ee:	da 01       	movw	r26, r20
    93f0:	1c 92       	st	X, r1

	 if (IsNewPumpStatus==True){
	     IsNewPumpStatus=False;
		 BackLightTrig();
		 StrPosCopy(strPumpStatus,SPump,0,PumpCountMax);
		 sprintf_P(lcdteks,PSTR("%s"),SPump);
    93f2:	00 d0       	rcall	.+0      	; 0x93f4 <DisplayPumpStatus+0x70>
    93f4:	00 d0       	rcall	.+0      	; 0x93f6 <DisplayPumpStatus+0x72>
    93f6:	00 d0       	rcall	.+0      	; 0x93f8 <DisplayPumpStatus+0x74>
    93f8:	ed b7       	in	r30, 0x3d	; 61
    93fa:	fe b7       	in	r31, 0x3e	; 62
    93fc:	31 96       	adiw	r30, 0x01	; 1
    93fe:	8e 01       	movw	r16, r28
    9400:	0b 5e       	subi	r16, 0xEB	; 235
    9402:	1f 4f       	sbci	r17, 0xFF	; 255
    9404:	ad b7       	in	r26, 0x3d	; 61
    9406:	be b7       	in	r27, 0x3e	; 62
    9408:	12 96       	adiw	r26, 0x02	; 2
    940a:	1c 93       	st	X, r17
    940c:	0e 93       	st	-X, r16
    940e:	11 97       	sbiw	r26, 0x01	; 1
    9410:	8b e0       	ldi	r24, 0x0B	; 11
    9412:	94 e2       	ldi	r25, 0x24	; 36
    9414:	93 83       	std	Z+3, r25	; 0x03
    9416:	82 83       	std	Z+2, r24	; 0x02
    9418:	75 83       	std	Z+5, r23	; 0x05
    941a:	64 83       	std	Z+4, r22	; 0x04
    941c:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
         lcd_print(4,1,lcdteks);
    9420:	ed b7       	in	r30, 0x3d	; 61
    9422:	fe b7       	in	r31, 0x3e	; 62
    9424:	36 96       	adiw	r30, 0x06	; 6
    9426:	0f b6       	in	r0, 0x3f	; 63
    9428:	f8 94       	cli
    942a:	fe bf       	out	0x3e, r31	; 62
    942c:	0f be       	out	0x3f, r0	; 63
    942e:	ed bf       	out	0x3d, r30	; 61
    9430:	84 e0       	ldi	r24, 0x04	; 4
    9432:	61 e0       	ldi	r22, 0x01	; 1
    9434:	a8 01       	movw	r20, r16
    9436:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
     	 }
}
    943a:	a8 96       	adiw	r28, 0x28	; 40
    943c:	0f b6       	in	r0, 0x3f	; 63
    943e:	f8 94       	cli
    9440:	de bf       	out	0x3e, r29	; 62
    9442:	0f be       	out	0x3f, r0	; 63
    9444:	cd bf       	out	0x3d, r28	; 61
    9446:	cf 91       	pop	r28
    9448:	df 91       	pop	r29
    944a:	1f 91       	pop	r17
    944c:	0f 91       	pop	r16
    944e:	08 95       	ret

00009450 <FCloseShift>:
	 }
  return Result;
}


char FCloseShift(char ShiftType){//SHIFT_NONE,NEW_SHIFT,CONTINUE_SHIFT
    9450:	df 92       	push	r13
    9452:	ef 92       	push	r14
    9454:	ff 92       	push	r15
    9456:	0f 93       	push	r16
    9458:	1f 93       	push	r17
    945a:	df 93       	push	r29
    945c:	cf 93       	push	r28
    945e:	cd b7       	in	r28, 0x3d	; 61
    9460:	de b7       	in	r29, 0x3e	; 62
    9462:	64 97       	sbiw	r28, 0x14	; 20
    9464:	0f b6       	in	r0, 0x3f	; 63
    9466:	f8 94       	cli
    9468:	de bf       	out	0x3e, r29	; 62
    946a:	0f be       	out	0x3f, r0	; 63
    946c:	cd bf       	out	0x3d, r28	; 61
    946e:	18 2f       	mov	r17, r24
	 char KeyPressed;
	 char FIPAddr;


	 Result=MENU_NONE;
	 switch(stCloseShift){
    9470:	80 91 49 02 	lds	r24, 0x0249
    9474:	87 30       	cpi	r24, 0x07	; 7
    9476:	09 f4       	brne	.+2      	; 0x947a <FCloseShift+0x2a>
    9478:	98 c1       	rjmp	.+816    	; 0x97aa <FCloseShift+0x35a>
    947a:	88 30       	cpi	r24, 0x08	; 8
    947c:	78 f4       	brcc	.+30     	; 0x949c <FCloseShift+0x4c>
    947e:	84 30       	cpi	r24, 0x04	; 4
    9480:	09 f4       	brne	.+2      	; 0x9484 <FCloseShift+0x34>
    9482:	64 c0       	rjmp	.+200    	; 0x954c <FCloseShift+0xfc>
    9484:	85 30       	cpi	r24, 0x05	; 5
    9486:	18 f4       	brcc	.+6      	; 0x948e <FCloseShift+0x3e>
    9488:	88 23       	and	r24, r24
    948a:	c1 f0       	breq	.+48     	; 0x94bc <FCloseShift+0x6c>
    948c:	04 c2       	rjmp	.+1032   	; 0x9896 <FCloseShift+0x446>
    948e:	85 30       	cpi	r24, 0x05	; 5
    9490:	09 f4       	brne	.+2      	; 0x9494 <FCloseShift+0x44>
    9492:	a2 c0       	rjmp	.+324    	; 0x95d8 <FCloseShift+0x188>
    9494:	86 30       	cpi	r24, 0x06	; 6
    9496:	09 f0       	breq	.+2      	; 0x949a <FCloseShift+0x4a>
    9498:	fe c1       	rjmp	.+1020   	; 0x9896 <FCloseShift+0x446>
    949a:	a4 c0       	rjmp	.+328    	; 0x95e4 <FCloseShift+0x194>
    949c:	8a 30       	cpi	r24, 0x0A	; 10
    949e:	09 f4       	brne	.+2      	; 0x94a2 <FCloseShift+0x52>
    94a0:	c8 c1       	rjmp	.+912    	; 0x9832 <FCloseShift+0x3e2>
    94a2:	8b 30       	cpi	r24, 0x0B	; 11
    94a4:	20 f4       	brcc	.+8      	; 0x94ae <FCloseShift+0x5e>
    94a6:	88 30       	cpi	r24, 0x08	; 8
    94a8:	09 f0       	breq	.+2      	; 0x94ac <FCloseShift+0x5c>
    94aa:	f5 c1       	rjmp	.+1002   	; 0x9896 <FCloseShift+0x446>
    94ac:	84 c1       	rjmp	.+776    	; 0x97b6 <FCloseShift+0x366>
    94ae:	8b 30       	cpi	r24, 0x0B	; 11
    94b0:	09 f4       	brne	.+2      	; 0x94b4 <FCloseShift+0x64>
    94b2:	ed c1       	rjmp	.+986    	; 0x988e <FCloseShift+0x43e>
    94b4:	8c 30       	cpi	r24, 0x0C	; 12
    94b6:	09 f0       	breq	.+2      	; 0x94ba <FCloseShift+0x6a>
    94b8:	ee c1       	rjmp	.+988    	; 0x9896 <FCloseShift+0x446>
    94ba:	c3 c1       	rjmp	.+902    	; 0x9842 <FCloseShift+0x3f2>
	 case csInitCloseShift:
	      ActivePump=eeprom_read_byte(&DefActivePump);
    94bc:	8a e4       	ldi	r24, 0x4A	; 74
    94be:	91 e0       	ldi	r25, 0x01	; 1
    94c0:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
    94c4:	80 93 5d 01 	sts	0x015D, r24
		  IsPumpBusy=False;
    94c8:	10 92 48 02 	sts	0x0248, r1
    94cc:	ff 24       	eor	r15, r15
					
		       if (strPumpStatus[FIPAddr]==GetPumpStatusLabel(PS_TOTALIZER))
			        UpdateStandaloneStatus(GetPumpID(FIPAddr),PUMP_OFF);
					
               if (strPumpStatus[FIPAddr]==GetPumpStatusLabel(PUMP_BUSY))
			       IsPumpBusy=True;
    94ce:	dd 24       	eor	r13, r13
    94d0:	d3 94       	inc	r13
    94d2:	36 c0       	rjmp	.+108    	; 0x9540 <FCloseShift+0xf0>
	 case csInitCloseShift:
	      ActivePump=eeprom_read_byte(&DefActivePump);
		  IsPumpBusy=False;
		  //FindBusy Pump
		  for (FIPAddr=0;FIPAddr<ActivePump;FIPAddr++){		       
		       if ((strPumpStatus[FIPAddr]!=GetPumpStatusLabel(PUMP_NONE))&&(strPumpStatus[FIPAddr]!=GetPumpStatusLabel(PUMP_OFF))&&(strPumpStatus[FIPAddr]!=GetPumpStatusLabel(PUMP_BUSY)))
    94d4:	0f 2d       	mov	r16, r15
    94d6:	10 e0       	ldi	r17, 0x00	; 0
    94d8:	f8 01       	movw	r30, r16
    94da:	ee 5f       	subi	r30, 0xFE	; 254
    94dc:	fe 4f       	sbci	r31, 0xFE	; 254
    94de:	e0 80       	ld	r14, Z
    94e0:	8e e0       	ldi	r24, 0x0E	; 14
    94e2:	0e 94 42 14 	call	0x2884	; 0x2884 <GetPumpStatusLabel>
    94e6:	e8 16       	cp	r14, r24
    94e8:	81 f0       	breq	.+32     	; 0x950a <FCloseShift+0xba>
    94ea:	86 e0       	ldi	r24, 0x06	; 6
    94ec:	0e 94 42 14 	call	0x2884	; 0x2884 <GetPumpStatusLabel>
    94f0:	e8 16       	cp	r14, r24
    94f2:	59 f0       	breq	.+22     	; 0x950a <FCloseShift+0xba>
    94f4:	89 e0       	ldi	r24, 0x09	; 9
    94f6:	0e 94 42 14 	call	0x2884	; 0x2884 <GetPumpStatusLabel>
    94fa:	e8 16       	cp	r14, r24
    94fc:	31 f0       	breq	.+12     	; 0x950a <FCloseShift+0xba>
				    UpdateStandaloneStatus(GetPumpID(FIPAddr),PUMP_OFF);
    94fe:	8f 2d       	mov	r24, r15
    9500:	0e 94 99 20 	call	0x4132	; 0x4132 <GetPumpID>
    9504:	66 e0       	ldi	r22, 0x06	; 6
    9506:	0e 94 3f 20 	call	0x407e	; 0x407e <UpdateStandaloneStatus>
					
		       if (strPumpStatus[FIPAddr]==GetPumpStatusLabel(PS_TOTALIZER))
    950a:	84 e1       	ldi	r24, 0x14	; 20
    950c:	0e 94 42 14 	call	0x2884	; 0x2884 <GetPumpStatusLabel>
    9510:	f8 01       	movw	r30, r16
    9512:	ee 5f       	subi	r30, 0xFE	; 254
    9514:	fe 4f       	sbci	r31, 0xFE	; 254
    9516:	90 81       	ld	r25, Z
    9518:	98 17       	cp	r25, r24
    951a:	31 f4       	brne	.+12     	; 0x9528 <FCloseShift+0xd8>
			        UpdateStandaloneStatus(GetPumpID(FIPAddr),PUMP_OFF);
    951c:	8f 2d       	mov	r24, r15
    951e:	0e 94 99 20 	call	0x4132	; 0x4132 <GetPumpID>
    9522:	66 e0       	ldi	r22, 0x06	; 6
    9524:	0e 94 3f 20 	call	0x407e	; 0x407e <UpdateStandaloneStatus>
					
               if (strPumpStatus[FIPAddr]==GetPumpStatusLabel(PUMP_BUSY))
    9528:	89 e0       	ldi	r24, 0x09	; 9
    952a:	0e 94 42 14 	call	0x2884	; 0x2884 <GetPumpStatusLabel>
    952e:	0e 5f       	subi	r16, 0xFE	; 254
    9530:	1e 4f       	sbci	r17, 0xFE	; 254
    9532:	d8 01       	movw	r26, r16
    9534:	9c 91       	ld	r25, X
    9536:	98 17       	cp	r25, r24
    9538:	11 f4       	brne	.+4      	; 0x953e <FCloseShift+0xee>
			       IsPumpBusy=True;
    953a:	d0 92 48 02 	sts	0x0248, r13
	 switch(stCloseShift){
	 case csInitCloseShift:
	      ActivePump=eeprom_read_byte(&DefActivePump);
		  IsPumpBusy=False;
		  //FindBusy Pump
		  for (FIPAddr=0;FIPAddr<ActivePump;FIPAddr++){		       
    953e:	f3 94       	inc	r15
    9540:	80 91 5d 01 	lds	r24, 0x015D
    9544:	f8 16       	cp	r15, r24
    9546:	30 f2       	brcs	.-116    	; 0x94d4 <FCloseShift+0x84>
					
               if (strPumpStatus[FIPAddr]==GetPumpStatusLabel(PUMP_BUSY))
			       IsPumpBusy=True;
			   }

          stCloseShift=csSendTotalizerALL;
    9548:	84 e0       	ldi	r24, 0x04	; 4
    954a:	9e c1       	rjmp	.+828    	; 0x9888 <FCloseShift+0x438>
			  */
	      break;
     case csWaitPumpLocked:	     
	      break;
     case csSendTotalizerALL:
	      lcd_clear();
    954c:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
		  lcd_printf(1,1,PSTR("Totalizer.."));
    9550:	81 e0       	ldi	r24, 0x01	; 1
    9552:	61 e0       	ldi	r22, 0x01	; 1
    9554:	46 e3       	ldi	r20, 0x36	; 54
    9556:	57 e1       	ldi	r21, 0x17	; 23
    9558:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  
		  sprintf_P(lcdteks,PSTR("Wait Pump:%d "),(ActivePump-CountTotalizerSatus(strPumpStatus)));
    955c:	00 91 5d 01 	lds	r16, 0x015D
    9560:	10 e0       	ldi	r17, 0x00	; 0
    9562:	82 e0       	ldi	r24, 0x02	; 2
    9564:	91 e0       	ldi	r25, 0x01	; 1
    9566:	0e 94 7a 30 	call	0x60f4	; 0x60f4 <CountTotalizerSatus>
    956a:	00 d0       	rcall	.+0      	; 0x956c <FCloseShift+0x11c>
    956c:	00 d0       	rcall	.+0      	; 0x956e <FCloseShift+0x11e>
    956e:	00 d0       	rcall	.+0      	; 0x9570 <FCloseShift+0x120>
    9570:	ed b7       	in	r30, 0x3d	; 61
    9572:	fe b7       	in	r31, 0x3e	; 62
    9574:	31 96       	adiw	r30, 0x01	; 1
    9576:	7e 01       	movw	r14, r28
    9578:	08 94       	sec
    957a:	e1 1c       	adc	r14, r1
    957c:	f1 1c       	adc	r15, r1
    957e:	ad b7       	in	r26, 0x3d	; 61
    9580:	be b7       	in	r27, 0x3e	; 62
    9582:	12 96       	adiw	r26, 0x02	; 2
    9584:	fc 92       	st	X, r15
    9586:	ee 92       	st	-X, r14
    9588:	11 97       	sbiw	r26, 0x01	; 1
    958a:	28 e2       	ldi	r18, 0x28	; 40
    958c:	37 e1       	ldi	r19, 0x17	; 23
    958e:	33 83       	std	Z+3, r19	; 0x03
    9590:	22 83       	std	Z+2, r18	; 0x02
    9592:	08 1b       	sub	r16, r24
    9594:	11 09       	sbc	r17, r1
    9596:	15 83       	std	Z+5, r17	; 0x05
    9598:	04 83       	std	Z+4, r16	; 0x04
    959a:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
		  lcd_print(2,1,lcdteks);
    959e:	ed b7       	in	r30, 0x3d	; 61
    95a0:	fe b7       	in	r31, 0x3e	; 62
    95a2:	36 96       	adiw	r30, 0x06	; 6
    95a4:	0f b6       	in	r0, 0x3f	; 63
    95a6:	f8 94       	cli
    95a8:	fe bf       	out	0x3e, r31	; 62
    95aa:	0f be       	out	0x3f, r0	; 63
    95ac:	ed bf       	out	0x3d, r30	; 61
    95ae:	82 e0       	ldi	r24, 0x02	; 2
    95b0:	61 e0       	ldi	r22, 0x01	; 1
    95b2:	a7 01       	movw	r20, r14
    95b4:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>


          IsNewPumpStatus=True;
    95b8:	11 e0       	ldi	r17, 0x01	; 1
    95ba:	10 93 01 01 	sts	0x0101, r17
		  DisplayPumpStatus(); 
    95be:	0e 94 c2 49 	call	0x9384	; 0x9384 <DisplayPumpStatus>
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
    95c2:	95 e0       	ldi	r25, 0x05	; 5
    95c4:	90 93 a7 05 	sts	0x05A7, r25
	 PoolMsg=plMsg;
    95c8:	82 e1       	ldi	r24, 0x12	; 18
    95ca:	80 93 d3 0b 	sts	0x0BD3, r24
     IsControlPooling=True;
    95ce:	10 93 84 01 	sts	0x0184, r17
          IsNewPumpStatus=True;
		  DisplayPumpStatus(); 
		  //SendCommand
	      //SendSlaveCommand(SC_TOTALIZER,PUMP_ALL);          
		  SendPoolingCommand(SC_TOTALIZER,PUMP_ALL);
		  stCloseShift=csDisplayPumpStatus;
    95d2:	90 93 49 02 	sts	0x0249, r25
    95d6:	5f c1       	rjmp	.+702    	; 0x9896 <FCloseShift+0x446>
	      break;
     case csDisplayPumpStatus:
		  DisplayPumpStatus(); 
    95d8:	0e 94 c2 49 	call	0x9384	; 0x9384 <DisplayPumpStatus>
		  TimDisplay=0;         
    95dc:	10 92 92 01 	sts	0x0192, r1
          stCloseShift=csWaitTotalizerComplete;
    95e0:	86 e0       	ldi	r24, 0x06	; 6
    95e2:	52 c1       	rjmp	.+676    	; 0x9888 <FCloseShift+0x438>
	      break;
     case csWaitTotalizerComplete:
	      KeyPressed=_key_scan(1);
    95e4:	81 e0       	ldi	r24, 0x01	; 1
    95e6:	0e 94 6d a6 	call	0x14cda	; 0x14cda <_key_scan>
    95ea:	d8 2e       	mov	r13, r24
		  if (IsNewPumpStatus==True){
    95ec:	80 91 01 01 	lds	r24, 0x0101
    95f0:	81 30       	cpi	r24, 0x01	; 1
    95f2:	89 f5       	brne	.+98     	; 0x9656 <FCloseShift+0x206>
			  sprintf_P(lcdteks,PSTR("Wait Pump:%d "),(ActivePump-CountTotalizerSatus(strPumpStatus)));
    95f4:	00 91 5d 01 	lds	r16, 0x015D
    95f8:	10 e0       	ldi	r17, 0x00	; 0
    95fa:	82 e0       	ldi	r24, 0x02	; 2
    95fc:	91 e0       	ldi	r25, 0x01	; 1
    95fe:	0e 94 7a 30 	call	0x60f4	; 0x60f4 <CountTotalizerSatus>
    9602:	00 d0       	rcall	.+0      	; 0x9604 <FCloseShift+0x1b4>
    9604:	00 d0       	rcall	.+0      	; 0x9606 <FCloseShift+0x1b6>
    9606:	00 d0       	rcall	.+0      	; 0x9608 <FCloseShift+0x1b8>
    9608:	ed b7       	in	r30, 0x3d	; 61
    960a:	fe b7       	in	r31, 0x3e	; 62
    960c:	31 96       	adiw	r30, 0x01	; 1
    960e:	7e 01       	movw	r14, r28
    9610:	08 94       	sec
    9612:	e1 1c       	adc	r14, r1
    9614:	f1 1c       	adc	r15, r1
    9616:	ad b7       	in	r26, 0x3d	; 61
    9618:	be b7       	in	r27, 0x3e	; 62
    961a:	12 96       	adiw	r26, 0x02	; 2
    961c:	fc 92       	st	X, r15
    961e:	ee 92       	st	-X, r14
    9620:	11 97       	sbiw	r26, 0x01	; 1
    9622:	2a e1       	ldi	r18, 0x1A	; 26
    9624:	37 e1       	ldi	r19, 0x17	; 23
    9626:	33 83       	std	Z+3, r19	; 0x03
    9628:	22 83       	std	Z+2, r18	; 0x02
    962a:	08 1b       	sub	r16, r24
    962c:	11 09       	sbc	r17, r1
    962e:	15 83       	std	Z+5, r17	; 0x05
    9630:	04 83       	std	Z+4, r16	; 0x04
    9632:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
			  lcd_print(2,1,lcdteks);
    9636:	ed b7       	in	r30, 0x3d	; 61
    9638:	fe b7       	in	r31, 0x3e	; 62
    963a:	36 96       	adiw	r30, 0x06	; 6
    963c:	0f b6       	in	r0, 0x3f	; 63
    963e:	f8 94       	cli
    9640:	fe bf       	out	0x3e, r31	; 62
    9642:	0f be       	out	0x3f, r0	; 63
    9644:	ed bf       	out	0x3d, r30	; 61
    9646:	82 e0       	ldi	r24, 0x02	; 2
    9648:	61 e0       	ldi	r22, 0x01	; 1
    964a:	a7 01       	movw	r20, r14
    964c:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
		  	  stCloseShift=csDisplayPumpStatus;	 
    9650:	85 e0       	ldi	r24, 0x05	; 5
    9652:	80 93 49 02 	sts	0x0249, r24
		  }
		  if ((CountTotalizerSatus(strPumpStatus)>=ActivePump)&&(TimDisplay>5)){
    9656:	82 e0       	ldi	r24, 0x02	; 2
    9658:	91 e0       	ldi	r25, 0x01	; 1
    965a:	0e 94 7a 30 	call	0x60f4	; 0x60f4 <CountTotalizerSatus>
    965e:	90 91 5d 01 	lds	r25, 0x015D
    9662:	89 17       	cp	r24, r25
    9664:	a0 f0       	brcs	.+40     	; 0x968e <FCloseShift+0x23e>
    9666:	80 91 92 01 	lds	r24, 0x0192
    966a:	86 30       	cpi	r24, 0x06	; 6
    966c:	80 f0       	brcs	.+32     	; 0x968e <FCloseShift+0x23e>
    966e:	10 e0       	ldi	r17, 0x00	; 0
    9670:	07 c0       	rjmp	.+14     	; 0x9680 <FCloseShift+0x230>
		      for (FIPAddr=0;FIPAddr<ActivePump;FIPAddr++)
			       UpdateStandaloneStatus(GetPumpID(FIPAddr),PUMP_OFF);
    9672:	81 2f       	mov	r24, r17
    9674:	0e 94 99 20 	call	0x4132	; 0x4132 <GetPumpID>
    9678:	66 e0       	ldi	r22, 0x06	; 6
    967a:	0e 94 3f 20 	call	0x407e	; 0x407e <UpdateStandaloneStatus>
			  sprintf_P(lcdteks,PSTR("Wait Pump:%d "),(ActivePump-CountTotalizerSatus(strPumpStatus)));
			  lcd_print(2,1,lcdteks);
		  	  stCloseShift=csDisplayPumpStatus;	 
		  }
		  if ((CountTotalizerSatus(strPumpStatus)>=ActivePump)&&(TimDisplay>5)){
		      for (FIPAddr=0;FIPAddr<ActivePump;FIPAddr++)
    967e:	1f 5f       	subi	r17, 0xFF	; 255
    9680:	80 91 5d 01 	lds	r24, 0x015D
    9684:	18 17       	cp	r17, r24
    9686:	a8 f3       	brcs	.-22     	; 0x9672 <FCloseShift+0x222>
			       UpdateStandaloneStatus(GetPumpID(FIPAddr),PUMP_OFF);

		      stCloseShift=csGenerateReport;		      
    9688:	88 e0       	ldi	r24, 0x08	; 8
    968a:	80 93 49 02 	sts	0x0249, r24
			  }
          //sprintf_P(lcdteks,PSTR("TimSend:%d"),TimDisplay);
		  //lcd_print(3,1,lcdteks);

          if ((TimDisplay>15)&&(IsPumpBusy!=True)){
    968e:	80 91 92 01 	lds	r24, 0x0192
    9692:	80 31       	cpi	r24, 0x10	; 16
    9694:	08 f4       	brcc	.+2      	; 0x9698 <FCloseShift+0x248>
    9696:	60 c0       	rjmp	.+192    	; 0x9758 <FCloseShift+0x308>
    9698:	80 91 48 02 	lds	r24, 0x0248
    969c:	81 30       	cpi	r24, 0x01	; 1
    969e:	09 f4       	brne	.+2      	; 0x96a2 <FCloseShift+0x252>
    96a0:	5b c0       	rjmp	.+182    	; 0x9758 <FCloseShift+0x308>
		      if(CountNoPumpSatus(strPumpStatus)>=eeprom_read_byte(&DefActivePump)){
    96a2:	82 e0       	ldi	r24, 0x02	; 2
    96a4:	91 e0       	ldi	r25, 0x01	; 1
    96a6:	0e 94 12 17 	call	0x2e24	; 0x2e24 <CountNoPumpSatus>
    96aa:	18 2f       	mov	r17, r24
    96ac:	8a e4       	ldi	r24, 0x4A	; 74
    96ae:	91 e0       	ldi	r25, 0x01	; 1
    96b0:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
    96b4:	18 17       	cp	r17, r24
    96b6:	08 f4       	brcc	.+2      	; 0x96ba <FCloseShift+0x26a>
    96b8:	4f c0       	rjmp	.+158    	; 0x9758 <FCloseShift+0x308>
			  //lcd_printf(2,1,PSTR("NoPumpFound  ")); 
			  //sprintf_P(lcdteks,PSTR("NoPumpFound:%d"),CountNoPumpSatus(strPumpStatus));
			  sprintf_P(lcdteks,PSTR("Error - No Pump:%d "),ActivePump-CountNoPumpSatus(strPumpStatus));
    96ba:	00 91 5d 01 	lds	r16, 0x015D
    96be:	10 e0       	ldi	r17, 0x00	; 0
    96c0:	82 e0       	ldi	r24, 0x02	; 2
    96c2:	91 e0       	ldi	r25, 0x01	; 1
    96c4:	0e 94 12 17 	call	0x2e24	; 0x2e24 <CountNoPumpSatus>
    96c8:	00 d0       	rcall	.+0      	; 0x96ca <FCloseShift+0x27a>
    96ca:	00 d0       	rcall	.+0      	; 0x96cc <FCloseShift+0x27c>
    96cc:	00 d0       	rcall	.+0      	; 0x96ce <FCloseShift+0x27e>
    96ce:	ed b7       	in	r30, 0x3d	; 61
    96d0:	fe b7       	in	r31, 0x3e	; 62
    96d2:	31 96       	adiw	r30, 0x01	; 1
    96d4:	7e 01       	movw	r14, r28
    96d6:	08 94       	sec
    96d8:	e1 1c       	adc	r14, r1
    96da:	f1 1c       	adc	r15, r1
    96dc:	ad b7       	in	r26, 0x3d	; 61
    96de:	be b7       	in	r27, 0x3e	; 62
    96e0:	12 96       	adiw	r26, 0x02	; 2
    96e2:	fc 92       	st	X, r15
    96e4:	ee 92       	st	-X, r14
    96e6:	11 97       	sbiw	r26, 0x01	; 1
    96e8:	26 e0       	ldi	r18, 0x06	; 6
    96ea:	37 e1       	ldi	r19, 0x17	; 23
    96ec:	33 83       	std	Z+3, r19	; 0x03
    96ee:	22 83       	std	Z+2, r18	; 0x02
    96f0:	08 1b       	sub	r16, r24
    96f2:	11 09       	sbc	r17, r1
    96f4:	15 83       	std	Z+5, r17	; 0x05
    96f6:	04 83       	std	Z+4, r16	; 0x04
    96f8:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
			  lcd_print(3,1,lcdteks);
    96fc:	ed b7       	in	r30, 0x3d	; 61
    96fe:	fe b7       	in	r31, 0x3e	; 62
    9700:	36 96       	adiw	r30, 0x06	; 6
    9702:	0f b6       	in	r0, 0x3f	; 63
    9704:	f8 94       	cli
    9706:	fe bf       	out	0x3e, r31	; 62
    9708:	0f be       	out	0x3f, r0	; 63
    970a:	ed bf       	out	0x3d, r30	; 61
    970c:	83 e0       	ldi	r24, 0x03	; 3
    970e:	61 e0       	ldi	r22, 0x01	; 1
    9710:	a7 01       	movw	r20, r14
    9712:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
    9716:	10 e0       	ldi	r17, 0x00	; 0
    9718:	11 c0       	rjmp	.+34     	; 0x973c <FCloseShift+0x2ec>
			  
			  for (FIPAddr=0;FIPAddr<ActivePump;FIPAddr++){
		           if (strPumpStatus[FIPAddr]==GetPumpStatusLabel(PS_TOTALIZER))
    971a:	84 e1       	ldi	r24, 0x14	; 20
    971c:	0e 94 42 14 	call	0x2884	; 0x2884 <GetPumpStatusLabel>
    9720:	e1 2f       	mov	r30, r17
    9722:	f0 e0       	ldi	r31, 0x00	; 0
    9724:	ee 5f       	subi	r30, 0xFE	; 254
    9726:	fe 4f       	sbci	r31, 0xFE	; 254
    9728:	90 81       	ld	r25, Z
    972a:	98 17       	cp	r25, r24
    972c:	31 f4       	brne	.+12     	; 0x973a <FCloseShift+0x2ea>
			           UpdateStandaloneStatus(GetPumpID(FIPAddr),PUMP_OFF);
    972e:	81 2f       	mov	r24, r17
    9730:	0e 94 99 20 	call	0x4132	; 0x4132 <GetPumpID>
    9734:	66 e0       	ldi	r22, 0x06	; 6
    9736:	0e 94 3f 20 	call	0x407e	; 0x407e <UpdateStandaloneStatus>
			  //lcd_printf(2,1,PSTR("NoPumpFound  ")); 
			  //sprintf_P(lcdteks,PSTR("NoPumpFound:%d"),CountNoPumpSatus(strPumpStatus));
			  sprintf_P(lcdteks,PSTR("Error - No Pump:%d "),ActivePump-CountNoPumpSatus(strPumpStatus));
			  lcd_print(3,1,lcdteks);
			  
			  for (FIPAddr=0;FIPAddr<ActivePump;FIPAddr++){
    973a:	1f 5f       	subi	r17, 0xFF	; 255
    973c:	80 91 5d 01 	lds	r24, 0x015D
    9740:	18 17       	cp	r17, r24
    9742:	58 f3       	brcs	.-42     	; 0x971a <FCloseShift+0x2ca>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    9744:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    9746:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    9748:	81 e0       	ldi	r24, 0x01	; 1
    974a:	80 93 bc 01 	sts	0x01BC, r24
		           if (strPumpStatus[FIPAddr]==GetPumpStatusLabel(PS_TOTALIZER))
			           UpdateStandaloneStatus(GetPumpID(FIPAddr),PUMP_OFF);
			  }

			  system_beep(1);
			  TimDisplay=0;
    974e:	10 92 92 01 	sts	0x0192, r1
			  stCloseShift=csNoPumpFound;		     
    9752:	87 e0       	ldi	r24, 0x07	; 7
    9754:	80 93 49 02 	sts	0x0249, r24
			  }			  
		  }
		  if (KeyPressed==_KEY_CANCEL){
    9758:	f7 ee       	ldi	r31, 0xE7	; 231
    975a:	df 16       	cp	r13, r31
    975c:	09 f0       	breq	.+2      	; 0x9760 <FCloseShift+0x310>
    975e:	9b c0       	rjmp	.+310    	; 0x9896 <FCloseShift+0x446>
			  sprintf_P(lcdteks,PSTR("Cancel"));
    9760:	00 d0       	rcall	.+0      	; 0x9762 <FCloseShift+0x312>
    9762:	00 d0       	rcall	.+0      	; 0x9764 <FCloseShift+0x314>
    9764:	8e 01       	movw	r16, r28
    9766:	0f 5f       	subi	r16, 0xFF	; 255
    9768:	1f 4f       	sbci	r17, 0xFF	; 255
    976a:	ad b7       	in	r26, 0x3d	; 61
    976c:	be b7       	in	r27, 0x3e	; 62
    976e:	12 96       	adiw	r26, 0x02	; 2
    9770:	1c 93       	st	X, r17
    9772:	0e 93       	st	-X, r16
    9774:	11 97       	sbiw	r26, 0x01	; 1
    9776:	8f ef       	ldi	r24, 0xFF	; 255
    9778:	96 e1       	ldi	r25, 0x16	; 22
    977a:	14 96       	adiw	r26, 0x04	; 4
    977c:	9c 93       	st	X, r25
    977e:	8e 93       	st	-X, r24
    9780:	13 97       	sbiw	r26, 0x03	; 3
    9782:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
			  lcd_print(3,1,lcdteks);
    9786:	0f 90       	pop	r0
    9788:	0f 90       	pop	r0
    978a:	0f 90       	pop	r0
    978c:	0f 90       	pop	r0
    978e:	83 e0       	ldi	r24, 0x03	; 3
    9790:	61 e0       	ldi	r22, 0x01	; 1
    9792:	a8 01       	movw	r20, r16
    9794:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    9798:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    979a:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    979c:	81 e0       	ldi	r24, 0x01	; 1
    979e:	80 93 bc 01 	sts	0x01BC, r24
		  }
		  if (KeyPressed==_KEY_CANCEL){
			  sprintf_P(lcdteks,PSTR("Cancel"));
			  lcd_print(3,1,lcdteks);
			  system_beep(1);
			  TimDisplay=0;
    97a2:	10 92 92 01 	sts	0x0192, r1
			  stCloseShift=csNoPumpFound;		     		  
    97a6:	87 e0       	ldi	r24, 0x07	; 7
    97a8:	6f c0       	rjmp	.+222    	; 0x9888 <FCloseShift+0x438>
		  }
	      break;
     case csNoPumpFound:
	      if (TimDisplay>TIM_DISPLAY){
    97aa:	80 91 92 01 	lds	r24, 0x0192
    97ae:	8b 30       	cpi	r24, 0x0B	; 11
    97b0:	08 f4       	brcc	.+2      	; 0x97b4 <FCloseShift+0x364>
    97b2:	71 c0       	rjmp	.+226    	; 0x9896 <FCloseShift+0x446>
    97b4:	68 c0       	rjmp	.+208    	; 0x9886 <FCloseShift+0x436>
		      stCloseShift=csFinishCloseShift;
		  }	      
	      break;
     case csGenerateReport:
		  lcd_printf(1,1,PSTR("Printing Totalizer"));
    97b6:	81 e0       	ldi	r24, 0x01	; 1
    97b8:	61 e0       	ldi	r22, 0x01	; 1
    97ba:	4c ee       	ldi	r20, 0xEC	; 236
    97bc:	56 e1       	ldi	r21, 0x16	; 22
    97be:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
          _datetime(0, strSystemDate, strSystemTime);
    97c2:	0a eb       	ldi	r16, 0xBA	; 186
    97c4:	13 e0       	ldi	r17, 0x03	; 3
    97c6:	84 e7       	ldi	r24, 0x74	; 116
    97c8:	e8 2e       	mov	r14, r24
    97ca:	88 e0       	ldi	r24, 0x08	; 8
    97cc:	f8 2e       	mov	r15, r24
    97ce:	80 e0       	ldi	r24, 0x00	; 0
    97d0:	b8 01       	movw	r22, r16
    97d2:	a7 01       	movw	r20, r14
    97d4:	0e 94 ce a7 	call	0x14f9c	; 0x14f9c <_datetime>
		  sprintf_P(CurrentShiftDateTime,PSTR("%s %s"),strSystemDate,strSystemTime);
    97d8:	ed b7       	in	r30, 0x3d	; 61
    97da:	fe b7       	in	r31, 0x3e	; 62
    97dc:	38 97       	sbiw	r30, 0x08	; 8
    97de:	0f b6       	in	r0, 0x3f	; 63
    97e0:	f8 94       	cli
    97e2:	fe bf       	out	0x3e, r31	; 62
    97e4:	0f be       	out	0x3f, r0	; 63
    97e6:	ed bf       	out	0x3d, r30	; 61
    97e8:	31 96       	adiw	r30, 0x01	; 1
    97ea:	8e e8       	ldi	r24, 0x8E	; 142
    97ec:	97 e0       	ldi	r25, 0x07	; 7
    97ee:	ad b7       	in	r26, 0x3d	; 61
    97f0:	be b7       	in	r27, 0x3e	; 62
    97f2:	12 96       	adiw	r26, 0x02	; 2
    97f4:	9c 93       	st	X, r25
    97f6:	8e 93       	st	-X, r24
    97f8:	11 97       	sbiw	r26, 0x01	; 1
    97fa:	86 ee       	ldi	r24, 0xE6	; 230
    97fc:	96 e1       	ldi	r25, 0x16	; 22
    97fe:	93 83       	std	Z+3, r25	; 0x03
    9800:	82 83       	std	Z+2, r24	; 0x02
    9802:	15 83       	std	Z+5, r17	; 0x05
    9804:	04 83       	std	Z+4, r16	; 0x04
    9806:	f7 82       	std	Z+7, r15	; 0x07
    9808:	e6 82       	std	Z+6, r14	; 0x06
    980a:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
		  IsGenerateReport=True;
    980e:	81 e0       	ldi	r24, 0x01	; 1
    9810:	80 93 86 01 	sts	0x0186, r24
		  IsFinishPrintingTotalizer=False;
    9814:	10 92 87 01 	sts	0x0187, r1
		  stCloseShift=csWaitPrintTotalizerComplete;
    9818:	8a e0       	ldi	r24, 0x0A	; 10
    981a:	80 93 49 02 	sts	0x0249, r24
    981e:	80 e0       	ldi	r24, 0x00	; 0
    9820:	ed b7       	in	r30, 0x3d	; 61
    9822:	fe b7       	in	r31, 0x3e	; 62
    9824:	38 96       	adiw	r30, 0x08	; 8
    9826:	0f b6       	in	r0, 0x3f	; 63
    9828:	f8 94       	cli
    982a:	fe bf       	out	0x3e, r31	; 62
    982c:	0f be       	out	0x3f, r0	; 63
    982e:	ed bf       	out	0x3d, r30	; 61
    9830:	33 c0       	rjmp	.+102    	; 0x9898 <FCloseShift+0x448>
	      break;
     case csWaitTotalizerALL:
	      break;
     case csWaitPrintTotalizerComplete:
	      if (IsFinishPrintingTotalizer==True){
    9832:	80 91 87 01 	lds	r24, 0x0187
    9836:	81 30       	cpi	r24, 0x01	; 1
    9838:	71 f5       	brne	.+92     	; 0x9896 <FCloseShift+0x446>
		      IsFinishPrintingTotalizer=False;
    983a:	10 92 87 01 	sts	0x0187, r1
		      stCloseShift=csDumpShift;
    983e:	8c e0       	ldi	r24, 0x0C	; 12
    9840:	23 c0       	rjmp	.+70     	; 0x9888 <FCloseShift+0x438>
		  }
	      break;
     case csDumpShift://Increment CurrentShift save Current to Last
		  lcd_printf(1,1,PSTR("Saving ShiftData.. "));
    9842:	81 e0       	ldi	r24, 0x01	; 1
    9844:	61 e0       	ldi	r22, 0x01	; 1
    9846:	42 ed       	ldi	r20, 0xD2	; 210
    9848:	56 e1       	ldi	r21, 0x16	; 22
    984a:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
	      if (ShiftType==CONTINUE_SHIFT)//Shift=Shift+1
    984e:	12 30       	cpi	r17, 0x02	; 2
    9850:	49 f4       	brne	.+18     	; 0x9864 <FCloseShift+0x414>
		      eeprom_write_byte(&DefShift,eeprom_read_byte(&DefShift)+1);	 
    9852:	80 e4       	ldi	r24, 0x40	; 64
    9854:	91 e0       	ldi	r25, 0x01	; 1
    9856:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
    985a:	68 2f       	mov	r22, r24
    985c:	6f 5f       	subi	r22, 0xFF	; 255
    985e:	80 e4       	ldi	r24, 0x40	; 64
    9860:	91 e0       	ldi	r25, 0x01	; 1
    9862:	05 c0       	rjmp	.+10     	; 0x986e <FCloseShift+0x41e>
          else if (ShiftType==NEW_SHIFT)//Shift=1
    9864:	11 30       	cpi	r17, 0x01	; 1
    9866:	29 f4       	brne	.+10     	; 0x9872 <FCloseShift+0x422>
		      eeprom_write_byte(&DefShift,1);	 
    9868:	80 e4       	ldi	r24, 0x40	; 64
    986a:	91 e0       	ldi	r25, 0x01	; 1
    986c:	61 e0       	ldi	r22, 0x01	; 1
    986e:	0e 94 52 ad 	call	0x15aa4	; 0x15aa4 <__eewr_byte_m128>

          SaveTotalizerCurrentToLast();
    9872:	0e 94 a3 28 	call	0x5146	; 0x5146 <SaveTotalizerCurrentToLast>
          eeprom_write_block((const void*) &CurrentShiftDateTime, (void*) &DefLastShiftDateTime,sizeof(DefLastShiftDateTime));
    9876:	8e e8       	ldi	r24, 0x8E	; 142
    9878:	97 e0       	ldi	r25, 0x07	; 7
    987a:	64 e4       	ldi	r22, 0x44	; 68
    987c:	78 e0       	ldi	r23, 0x08	; 8
    987e:	44 e1       	ldi	r20, 0x14	; 20
    9880:	50 e0       	ldi	r21, 0x00	; 0
    9882:	0e 94 48 ad 	call	0x15a90	; 0x15a90 <__eewr_block_m128>
		  stCloseShift=csFinishCloseShift;
    9886:	8b e0       	ldi	r24, 0x0B	; 11
    9888:	80 93 49 02 	sts	0x0249, r24
    988c:	04 c0       	rjmp	.+8      	; 0x9896 <FCloseShift+0x446>
	      break;
     case csFinishCloseShift:
          stCloseShift=csInitCloseShift;
    988e:	10 92 49 02 	sts	0x0249, r1
    9892:	81 e0       	ldi	r24, 0x01	; 1
    9894:	01 c0       	rjmp	.+2      	; 0x9898 <FCloseShift+0x448>
    9896:	80 e0       	ldi	r24, 0x00	; 0
		  Result=MENU_DONE;
	      break;
	 }
	 //uart_printf(0,1,PSTR("Close Shift"));	
   return Result;
}
    9898:	64 96       	adiw	r28, 0x14	; 20
    989a:	0f b6       	in	r0, 0x3f	; 63
    989c:	f8 94       	cli
    989e:	de bf       	out	0x3e, r29	; 62
    98a0:	0f be       	out	0x3f, r0	; 63
    98a2:	cd bf       	out	0x3d, r28	; 61
    98a4:	cf 91       	pop	r28
    98a6:	df 91       	pop	r29
    98a8:	1f 91       	pop	r17
    98aa:	0f 91       	pop	r16
    98ac:	ff 90       	pop	r15
    98ae:	ef 90       	pop	r14
    98b0:	df 90       	pop	r13
    98b2:	08 95       	ret

000098b4 <_menu_host>:
			lcd_print(__x, __y, __buff);
		}
	}
}

void _menu_host(void){
    98b4:	4f 92       	push	r4
    98b6:	5f 92       	push	r5
    98b8:	6f 92       	push	r6
    98ba:	7f 92       	push	r7
    98bc:	8f 92       	push	r8
    98be:	9f 92       	push	r9
    98c0:	bf 92       	push	r11
    98c2:	cf 92       	push	r12
    98c4:	df 92       	push	r13
    98c6:	ef 92       	push	r14
    98c8:	ff 92       	push	r15
    98ca:	0f 93       	push	r16
    98cc:	1f 93       	push	r17
    98ce:	df 93       	push	r29
    98d0:	cf 93       	push	r28
    98d2:	cd b7       	in	r28, 0x3d	; 61
    98d4:	de b7       	in	r29, 0x3e	; 62
    98d6:	6d 97       	sbiw	r28, 0x1d	; 29
    98d8:	0f b6       	in	r0, 0x3f	; 63
    98da:	f8 94       	cli
    98dc:	de bf       	out	0x3e, r29	; 62
    98de:	0f be       	out	0x3f, r0	; 63
    98e0:	cd bf       	out	0x3d, r28	; 61
	char 			__value[4];
	unsigned char	__i, __x, __y, __key, __num, __buff[5];
	char lcdteks[20];
	char TermID;

	__value[0] = eeprom_read_byte(&DefPrintMoney);
    98e2:	82 ec       	ldi	r24, 0xC2	; 194
    98e4:	93 e0       	ldi	r25, 0x03	; 3
    98e6:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
    98ea:	89 83       	std	Y+1, r24	; 0x01
	__value[1] = eeprom_read_byte(&DefShowDateTime);
    98ec:	87 e3       	ldi	r24, 0x37	; 55
    98ee:	90 e0       	ldi	r25, 0x00	; 0
    98f0:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
    98f4:	8a 83       	std	Y+2, r24	; 0x02
	__value[2] = eeprom_read_byte(&DefNotifScreen);
    98f6:	88 e3       	ldi	r24, 0x38	; 56
    98f8:	90 e0       	ldi	r25, 0x00	; 0
    98fa:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
    98fe:	8b 83       	std	Y+3, r24	; 0x03
	TermID= eeprom_read_byte(&DefIFT_ID);
    9900:	80 e0       	ldi	r24, 0x00	; 0
    9902:	90 e0       	ldi	r25, 0x00	; 0
    9904:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
    9908:	b8 2e       	mov	r11, r24


	lcd_clear();_delay_ms(10);
    990a:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
    990e:	84 ec       	ldi	r24, 0xC4	; 196
    9910:	99 e0       	ldi	r25, 0x09	; 9
    9912:	01 97       	sbiw	r24, 0x01	; 1
    9914:	f1 f7       	brne	.-4      	; 0x9912 <_menu_host+0x5e>
	lcd_printf(1, 1, PSTR("1)Money :"));
    9916:	81 e0       	ldi	r24, 0x01	; 1
    9918:	61 e0       	ldi	r22, 0x01	; 1
    991a:	4c eb       	ldi	r20, 0xBC	; 188
    991c:	5c e0       	ldi	r21, 0x0C	; 12
    991e:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
	lcd_printf(2, 1, PSTR("2)D/T   :"));
    9922:	82 e0       	ldi	r24, 0x02	; 2
    9924:	61 e0       	ldi	r22, 0x01	; 1
    9926:	42 eb       	ldi	r20, 0xB2	; 178
    9928:	5c e0       	ldi	r21, 0x0C	; 12
    992a:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
	lcd_printf(3, 1, PSTR("3)Notif :     *)Exit"));
    992e:	83 e0       	ldi	r24, 0x03	; 3
    9930:	61 e0       	ldi	r22, 0x01	; 1
    9932:	4d e9       	ldi	r20, 0x9D	; 157
    9934:	5c e0       	ldi	r21, 0x0C	; 12
    9936:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
    sprintf_P(lcdteks,PSTR("4)TermID:%d "),TermID);
    993a:	00 d0       	rcall	.+0      	; 0x993c <_menu_host+0x88>
    993c:	00 d0       	rcall	.+0      	; 0x993e <_menu_host+0x8a>
    993e:	00 d0       	rcall	.+0      	; 0x9940 <_menu_host+0x8c>
    9940:	ed b7       	in	r30, 0x3d	; 61
    9942:	fe b7       	in	r31, 0x3e	; 62
    9944:	31 96       	adiw	r30, 0x01	; 1
    9946:	8e 01       	movw	r16, r28
    9948:	06 5f       	subi	r16, 0xF6	; 246
    994a:	1f 4f       	sbci	r17, 0xFF	; 255
    994c:	ad b7       	in	r26, 0x3d	; 61
    994e:	be b7       	in	r27, 0x3e	; 62
    9950:	12 96       	adiw	r26, 0x02	; 2
    9952:	1c 93       	st	X, r17
    9954:	0e 93       	st	-X, r16
    9956:	11 97       	sbiw	r26, 0x01	; 1
    9958:	80 e9       	ldi	r24, 0x90	; 144
    995a:	9c e0       	ldi	r25, 0x0C	; 12
    995c:	93 83       	std	Z+3, r25	; 0x03
    995e:	82 83       	std	Z+2, r24	; 0x02
    9960:	b4 82       	std	Z+4, r11	; 0x04
    9962:	15 82       	std	Z+5, r1	; 0x05
    9964:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	lcd_print(4, 1,lcdteks);
    9968:	ed b7       	in	r30, 0x3d	; 61
    996a:	fe b7       	in	r31, 0x3e	; 62
    996c:	36 96       	adiw	r30, 0x06	; 6
    996e:	0f b6       	in	r0, 0x3f	; 63
    9970:	f8 94       	cli
    9972:	fe bf       	out	0x3e, r31	; 62
    9974:	0f be       	out	0x3f, r0	; 63
    9976:	ed bf       	out	0x3d, r30	; 61
    9978:	84 e0       	ldi	r24, 0x04	; 4
    997a:	61 e0       	ldi	r22, 0x01	; 1
    997c:	a8 01       	movw	r20, r16
    997e:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
	lcd_printf(4, 15, PSTR("#)Save"));
    9982:	84 e0       	ldi	r24, 0x04	; 4
    9984:	6f e0       	ldi	r22, 0x0F	; 15
    9986:	49 e8       	ldi	r20, 0x89	; 137
    9988:	5c e0       	ldi	r21, 0x0C	; 12
    998a:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
    998e:	e2 ed       	ldi	r30, 0xD2	; 210
    9990:	ee 2e       	mov	r14, r30
    9992:	e2 e0       	ldi	r30, 0x02	; 2
    9994:	fe 2e       	mov	r15, r30
    9996:	6e 01       	movw	r12, r28
    9998:	08 94       	sec
    999a:	c1 1c       	adc	r12, r1
    999c:	d1 1c       	adc	r13, r1

	for(__i = 0; __i < 3; __i++){
		__x = pgm_read_byte(&__hostloc[__i][0]);
		__y = pgm_read_byte(&__hostloc[__i][1]);
		sprintf_P(__buff,PSTR("%d"),__value[__i]);
    999e:	75 e0       	ldi	r23, 0x05	; 5
    99a0:	87 2e       	mov	r8, r23
    99a2:	91 2c       	mov	r9, r1
    99a4:	8c 0e       	add	r8, r28
    99a6:	9d 1e       	adc	r9, r29
    99a8:	66 e8       	ldi	r22, 0x86	; 134
    99aa:	66 2e       	mov	r6, r22
    99ac:	6c e0       	ldi	r22, 0x0C	; 12
    99ae:	76 2e       	mov	r7, r22
    sprintf_P(lcdteks,PSTR("4)TermID:%d "),TermID);
	lcd_print(4, 1,lcdteks);
	lcd_printf(4, 15, PSTR("#)Save"));

	for(__i = 0; __i < 3; __i++){
		__x = pgm_read_byte(&__hostloc[__i][0]);
    99b0:	f7 01       	movw	r30, r14
    99b2:	04 91       	lpm	r16, Z+
		__y = pgm_read_byte(&__hostloc[__i][1]);
    99b4:	08 94       	sec
    99b6:	e1 1c       	adc	r14, r1
    99b8:	f1 1c       	adc	r15, r1
    99ba:	f7 01       	movw	r30, r14
    99bc:	14 91       	lpm	r17, Z+
		sprintf_P(__buff,PSTR("%d"),__value[__i]);
    99be:	00 d0       	rcall	.+0      	; 0x99c0 <_menu_host+0x10c>
    99c0:	00 d0       	rcall	.+0      	; 0x99c2 <_menu_host+0x10e>
    99c2:	00 d0       	rcall	.+0      	; 0x99c4 <_menu_host+0x110>
    99c4:	ed b7       	in	r30, 0x3d	; 61
    99c6:	fe b7       	in	r31, 0x3e	; 62
    99c8:	31 96       	adiw	r30, 0x01	; 1
    99ca:	ad b7       	in	r26, 0x3d	; 61
    99cc:	be b7       	in	r27, 0x3e	; 62
    99ce:	12 96       	adiw	r26, 0x02	; 2
    99d0:	9c 92       	st	X, r9
    99d2:	8e 92       	st	-X, r8
    99d4:	11 97       	sbiw	r26, 0x01	; 1
    99d6:	73 82       	std	Z+3, r7	; 0x03
    99d8:	62 82       	std	Z+2, r6	; 0x02
    99da:	d6 01       	movw	r26, r12
    99dc:	8d 91       	ld	r24, X+
    99de:	6d 01       	movw	r12, r26
    99e0:	84 83       	std	Z+4, r24	; 0x04
    99e2:	15 82       	std	Z+5, r1	; 0x05
    99e4:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
		//_f_inttostr(__buff, __value[__i]);
		lcd_print(__x, __y, __buff);
    99e8:	ed b7       	in	r30, 0x3d	; 61
    99ea:	fe b7       	in	r31, 0x3e	; 62
    99ec:	36 96       	adiw	r30, 0x06	; 6
    99ee:	0f b6       	in	r0, 0x3f	; 63
    99f0:	f8 94       	cli
    99f2:	fe bf       	out	0x3e, r31	; 62
    99f4:	0f be       	out	0x3f, r0	; 63
    99f6:	ed bf       	out	0x3d, r30	; 61
    99f8:	80 2f       	mov	r24, r16
    99fa:	61 2f       	mov	r22, r17
    99fc:	a4 01       	movw	r20, r8
    99fe:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
    9a02:	08 94       	sec
    9a04:	e1 1c       	adc	r14, r1
    9a06:	f1 1c       	adc	r15, r1
	lcd_printf(3, 1, PSTR("3)Notif :     *)Exit"));
    sprintf_P(lcdteks,PSTR("4)TermID:%d "),TermID);
	lcd_print(4, 1,lcdteks);
	lcd_printf(4, 15, PSTR("#)Save"));

	for(__i = 0; __i < 3; __i++){
    9a08:	f8 ed       	ldi	r31, 0xD8	; 216
    9a0a:	ef 16       	cp	r14, r31
    9a0c:	f2 e0       	ldi	r31, 0x02	; 2
    9a0e:	ff 06       	cpc	r15, r31
    9a10:	79 f6       	brne	.-98     	; 0x99b0 <_menu_host+0xfc>
			lcd_print(__x, __y, __buff);
		}else
		if (__num=='4'){
		    if (TermID<=99)TermID++;
			else TermID=1;
	     sprintf_P(lcdteks,PSTR("4)TermID:%d "),TermID);
    9a12:	5a e0       	ldi	r21, 0x0A	; 10
    9a14:	85 2e       	mov	r8, r21
    9a16:	91 2c       	mov	r9, r1
    9a18:	8c 0e       	add	r8, r28
    9a1a:	9d 1e       	adc	r9, r29
    9a1c:	46 e7       	ldi	r20, 0x76	; 118
    9a1e:	44 2e       	mov	r4, r20
    9a20:	4c e0       	ldi	r20, 0x0C	; 12
    9a22:	54 2e       	mov	r5, r20
			eeprom_write_byte(&DefNotifScreen, __value[2]);
			eeprom_write_byte(&DefIFT_ID,TermID);
			break;
		}
		if(__num >= 0x31 && __num <= 0x33){
			if(__value[__num - 0x31] == 1)
    9a24:	6e 01       	movw	r12, r28
    9a26:	08 94       	sec
    9a28:	c1 1c       	adc	r12, r1
    9a2a:	d1 1c       	adc	r13, r1
				__value[__num - 0x31] = 0;
			else
				__value[__num - 0x31]++;
			__x = pgm_read_byte(&__hostloc[__num - 0x31][0]);
			__y = pgm_read_byte(&__hostloc[__num - 0x31][1]);
			sprintf_P(__buff,PSTR("%d"),__value[__num - 0x31]);
    9a2c:	35 e0       	ldi	r19, 0x05	; 5
    9a2e:	e3 2e       	mov	r14, r19
    9a30:	f1 2c       	mov	r15, r1
    9a32:	ec 0e       	add	r14, r28
    9a34:	fd 1e       	adc	r15, r29
    9a36:	23 e8       	ldi	r18, 0x83	; 131
    9a38:	62 2e       	mov	r6, r18
    9a3a:	2c e0       	ldi	r18, 0x0C	; 12
    9a3c:	72 2e       	mov	r7, r18
		//_f_inttostr(__buff, __value[__i]);
		lcd_print(__x, __y, __buff);
	}

	while(1){
		__key = _key_scan(1);
    9a3e:	81 e0       	ldi	r24, 0x01	; 1
    9a40:	0e 94 6d a6 	call	0x14cda	; 0x14cda <_key_scan>
    9a44:	18 2f       	mov	r17, r24
		__num = _key_btn(__key);
    9a46:	0e 94 ce a5 	call	0x14b9c	; 0x14b9c <_key_btn>
    9a4a:	98 2f       	mov	r25, r24

		if(__key == _KEY_CANCEL)
    9a4c:	17 3e       	cpi	r17, 0xE7	; 231
    9a4e:	09 f4       	brne	.+2      	; 0x9a52 <_menu_host+0x19e>
    9a50:	8a c0       	rjmp	.+276    	; 0x9b66 <_menu_host+0x2b2>
			return;
		if(__key==_KEY_ENTER){
    9a52:	17 3b       	cpi	r17, 0xB7	; 183
    9a54:	a9 f4       	brne	.+42     	; 0x9a80 <_menu_host+0x1cc>
			eeprom_write_byte(&DefPrintMoney, __value[0]);
    9a56:	82 ec       	ldi	r24, 0xC2	; 194
    9a58:	93 e0       	ldi	r25, 0x03	; 3
    9a5a:	69 81       	ldd	r22, Y+1	; 0x01
    9a5c:	0e 94 52 ad 	call	0x15aa4	; 0x15aa4 <__eewr_byte_m128>
			eeprom_write_byte(&DefShowDateTime, __value[1]);
    9a60:	87 e3       	ldi	r24, 0x37	; 55
    9a62:	90 e0       	ldi	r25, 0x00	; 0
    9a64:	6a 81       	ldd	r22, Y+2	; 0x02
    9a66:	0e 94 52 ad 	call	0x15aa4	; 0x15aa4 <__eewr_byte_m128>
			eeprom_write_byte(&DefNotifScreen, __value[2]);
    9a6a:	88 e3       	ldi	r24, 0x38	; 56
    9a6c:	90 e0       	ldi	r25, 0x00	; 0
    9a6e:	6b 81       	ldd	r22, Y+3	; 0x03
    9a70:	0e 94 52 ad 	call	0x15aa4	; 0x15aa4 <__eewr_byte_m128>
			eeprom_write_byte(&DefIFT_ID,TermID);
    9a74:	80 e0       	ldi	r24, 0x00	; 0
    9a76:	90 e0       	ldi	r25, 0x00	; 0
    9a78:	6b 2d       	mov	r22, r11
    9a7a:	0e 94 52 ad 	call	0x15aa4	; 0x15aa4 <__eewr_byte_m128>
    9a7e:	73 c0       	rjmp	.+230    	; 0x9b66 <_menu_host+0x2b2>
			break;
		}
		if(__num >= 0x31 && __num <= 0x33){
    9a80:	81 53       	subi	r24, 0x31	; 49
    9a82:	83 30       	cpi	r24, 0x03	; 3
    9a84:	08 f0       	brcs	.+2      	; 0x9a88 <_menu_host+0x1d4>
    9a86:	3f c0       	rjmp	.+126    	; 0x9b06 <_menu_host+0x252>
			if(__value[__num - 0x31] == 1)
    9a88:	a9 2f       	mov	r26, r25
    9a8a:	b0 e0       	ldi	r27, 0x00	; 0
    9a8c:	d1 97       	sbiw	r26, 0x31	; 49
    9a8e:	f6 01       	movw	r30, r12
    9a90:	ea 0f       	add	r30, r26
    9a92:	fb 1f       	adc	r31, r27
    9a94:	80 81       	ld	r24, Z
    9a96:	81 30       	cpi	r24, 0x01	; 1
    9a98:	11 f4       	brne	.+4      	; 0x9a9e <_menu_host+0x1ea>
				__value[__num - 0x31] = 0;
    9a9a:	10 82       	st	Z, r1
    9a9c:	02 c0       	rjmp	.+4      	; 0x9aa2 <_menu_host+0x1ee>
			else
				__value[__num - 0x31]++;
    9a9e:	8f 5f       	subi	r24, 0xFF	; 255
    9aa0:	80 83       	st	Z, r24
			__x = pgm_read_byte(&__hostloc[__num - 0x31][0]);
    9aa2:	29 2f       	mov	r18, r25
    9aa4:	30 e0       	ldi	r19, 0x00	; 0
    9aa6:	21 53       	subi	r18, 0x31	; 49
    9aa8:	30 40       	sbci	r19, 0x00	; 0
    9aaa:	22 0f       	add	r18, r18
    9aac:	33 1f       	adc	r19, r19
    9aae:	c9 01       	movw	r24, r18
    9ab0:	8e 52       	subi	r24, 0x2E	; 46
    9ab2:	9d 4f       	sbci	r25, 0xFD	; 253
    9ab4:	fc 01       	movw	r30, r24
    9ab6:	04 91       	lpm	r16, Z+
			__y = pgm_read_byte(&__hostloc[__num - 0x31][1]);
    9ab8:	2d 52       	subi	r18, 0x2D	; 45
    9aba:	3d 4f       	sbci	r19, 0xFD	; 253
    9abc:	f9 01       	movw	r30, r18
    9abe:	14 91       	lpm	r17, Z+
			sprintf_P(__buff,PSTR("%d"),__value[__num - 0x31]);
    9ac0:	00 d0       	rcall	.+0      	; 0x9ac2 <_menu_host+0x20e>
    9ac2:	00 d0       	rcall	.+0      	; 0x9ac4 <_menu_host+0x210>
    9ac4:	00 d0       	rcall	.+0      	; 0x9ac6 <_menu_host+0x212>
    9ac6:	2d b7       	in	r18, 0x3d	; 61
    9ac8:	3e b7       	in	r19, 0x3e	; 62
    9aca:	2f 5f       	subi	r18, 0xFF	; 255
    9acc:	3f 4f       	sbci	r19, 0xFF	; 255
    9ace:	ed b7       	in	r30, 0x3d	; 61
    9ad0:	fe b7       	in	r31, 0x3e	; 62
    9ad2:	f2 82       	std	Z+2, r15	; 0x02
    9ad4:	e1 82       	std	Z+1, r14	; 0x01
    9ad6:	f9 01       	movw	r30, r18
    9ad8:	73 82       	std	Z+3, r7	; 0x03
    9ada:	62 82       	std	Z+2, r6	; 0x02
    9adc:	ac 0d       	add	r26, r12
    9ade:	bd 1d       	adc	r27, r13
    9ae0:	8c 91       	ld	r24, X
    9ae2:	84 83       	std	Z+4, r24	; 0x04
    9ae4:	15 82       	std	Z+5, r1	; 0x05
    9ae6:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
			//_f_inttostr(__buff, __value[__num - 0x31]);
			lcd_print(__x, __y, __buff);
    9aea:	8d b7       	in	r24, 0x3d	; 61
    9aec:	9e b7       	in	r25, 0x3e	; 62
    9aee:	06 96       	adiw	r24, 0x06	; 6
    9af0:	0f b6       	in	r0, 0x3f	; 63
    9af2:	f8 94       	cli
    9af4:	9e bf       	out	0x3e, r25	; 62
    9af6:	0f be       	out	0x3f, r0	; 63
    9af8:	8d bf       	out	0x3d, r24	; 61
    9afa:	80 2f       	mov	r24, r16
    9afc:	61 2f       	mov	r22, r17
    9afe:	a7 01       	movw	r20, r14
    9b00:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
    9b04:	9c cf       	rjmp	.-200    	; 0x9a3e <_menu_host+0x18a>
		}else
		if (__num=='4'){
    9b06:	94 33       	cpi	r25, 0x34	; 52
    9b08:	09 f0       	breq	.+2      	; 0x9b0c <_menu_host+0x258>
    9b0a:	99 cf       	rjmp	.-206    	; 0x9a3e <_menu_host+0x18a>
		    if (TermID<=99)TermID++;
    9b0c:	93 e6       	ldi	r25, 0x63	; 99
    9b0e:	9b 15       	cp	r25, r11
    9b10:	18 f4       	brcc	.+6      	; 0x9b18 <_menu_host+0x264>
    9b12:	bb 24       	eor	r11, r11
    9b14:	b3 94       	inc	r11
    9b16:	01 c0       	rjmp	.+2      	; 0x9b1a <_menu_host+0x266>
    9b18:	b3 94       	inc	r11
			else TermID=1;
	     sprintf_P(lcdteks,PSTR("4)TermID:%d "),TermID);
    9b1a:	00 d0       	rcall	.+0      	; 0x9b1c <_menu_host+0x268>
    9b1c:	00 d0       	rcall	.+0      	; 0x9b1e <_menu_host+0x26a>
    9b1e:	00 d0       	rcall	.+0      	; 0x9b20 <_menu_host+0x26c>
    9b20:	ed b7       	in	r30, 0x3d	; 61
    9b22:	fe b7       	in	r31, 0x3e	; 62
    9b24:	31 96       	adiw	r30, 0x01	; 1
    9b26:	ad b7       	in	r26, 0x3d	; 61
    9b28:	be b7       	in	r27, 0x3e	; 62
    9b2a:	12 96       	adiw	r26, 0x02	; 2
    9b2c:	9c 92       	st	X, r9
    9b2e:	8e 92       	st	-X, r8
    9b30:	11 97       	sbiw	r26, 0x01	; 1
    9b32:	53 82       	std	Z+3, r5	; 0x03
    9b34:	42 82       	std	Z+2, r4	; 0x02
    9b36:	b4 82       	std	Z+4, r11	; 0x04
    9b38:	15 82       	std	Z+5, r1	; 0x05
    9b3a:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
		 lcd_print(4, 1,lcdteks);lcd_printf(4, 15, PSTR("#)Save"));
    9b3e:	ed b7       	in	r30, 0x3d	; 61
    9b40:	fe b7       	in	r31, 0x3e	; 62
    9b42:	36 96       	adiw	r30, 0x06	; 6
    9b44:	0f b6       	in	r0, 0x3f	; 63
    9b46:	f8 94       	cli
    9b48:	fe bf       	out	0x3e, r31	; 62
    9b4a:	0f be       	out	0x3f, r0	; 63
    9b4c:	ed bf       	out	0x3d, r30	; 61
    9b4e:	84 e0       	ldi	r24, 0x04	; 4
    9b50:	61 e0       	ldi	r22, 0x01	; 1
    9b52:	a4 01       	movw	r20, r8
    9b54:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
    9b58:	84 e0       	ldi	r24, 0x04	; 4
    9b5a:	6f e0       	ldi	r22, 0x0F	; 15
    9b5c:	4f e6       	ldi	r20, 0x6F	; 111
    9b5e:	5c e0       	ldi	r21, 0x0C	; 12
    9b60:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
    9b64:	6c cf       	rjmp	.-296    	; 0x9a3e <_menu_host+0x18a>
		 
		}

	}
}
    9b66:	6d 96       	adiw	r28, 0x1d	; 29
    9b68:	0f b6       	in	r0, 0x3f	; 63
    9b6a:	f8 94       	cli
    9b6c:	de bf       	out	0x3e, r29	; 62
    9b6e:	0f be       	out	0x3f, r0	; 63
    9b70:	cd bf       	out	0x3d, r28	; 61
    9b72:	cf 91       	pop	r28
    9b74:	df 91       	pop	r29
    9b76:	1f 91       	pop	r17
    9b78:	0f 91       	pop	r16
    9b7a:	ff 90       	pop	r15
    9b7c:	ef 90       	pop	r14
    9b7e:	df 90       	pop	r13
    9b80:	cf 90       	pop	r12
    9b82:	bf 90       	pop	r11
    9b84:	9f 90       	pop	r9
    9b86:	8f 90       	pop	r8
    9b88:	7f 90       	pop	r7
    9b8a:	6f 90       	pop	r6
    9b8c:	5f 90       	pop	r5
    9b8e:	4f 90       	pop	r4
    9b90:	08 95       	ret

00009b92 <FSettingHost>:
char FSettingPrinter(){
     _menu_printer();
	 return MENU_DONE;
}
char FSettingHost(){
     _menu_host();
    9b92:	0e 94 5a 4c 	call	0x98b4	; 0x98b4 <_menu_host>
	 return MENU_DONE;
}
    9b96:	81 e0       	ldi	r24, 0x01	; 1
    9b98:	08 95       	ret

00009b9a <_menu_printer>:
}

//*************************************************************************
//  ngeset printer

void _menu_printer(void){
    9b9a:	2f 92       	push	r2
    9b9c:	3f 92       	push	r3
    9b9e:	4f 92       	push	r4
    9ba0:	5f 92       	push	r5
    9ba2:	6f 92       	push	r6
    9ba4:	7f 92       	push	r7
    9ba6:	8f 92       	push	r8
    9ba8:	9f 92       	push	r9
    9baa:	af 92       	push	r10
    9bac:	bf 92       	push	r11
    9bae:	cf 92       	push	r12
    9bb0:	df 92       	push	r13
    9bb2:	ef 92       	push	r14
    9bb4:	ff 92       	push	r15
    9bb6:	0f 93       	push	r16
    9bb8:	1f 93       	push	r17
    9bba:	df 93       	push	r29
    9bbc:	cf 93       	push	r28
    9bbe:	cd b7       	in	r28, 0x3d	; 61
    9bc0:	de b7       	in	r29, 0x3e	; 62
    9bc2:	2c 97       	sbiw	r28, 0x0c	; 12
    9bc4:	0f b6       	in	r0, 0x3f	; 63
    9bc6:	f8 94       	cli
    9bc8:	de bf       	out	0x3e, r29	; 62
    9bca:	0f be       	out	0x3f, r0	; 63
    9bcc:	cd bf       	out	0x3d, r28	; 61
	char 			__value[6];
	char	__i, __x, __y, __lmt, __start, __key, __num, __buff[6];
//	char lcdteks[20];

	__value[0] = eeprom_read_byte(&DefPrinterType);
    9bce:	80 e3       	ldi	r24, 0x30	; 48
    9bd0:	90 e0       	ldi	r25, 0x00	; 0
    9bd2:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
    9bd6:	89 83       	std	Y+1, r24	; 0x01
	__value[1] = eeprom_read_byte(&DefPrintSize);
    9bd8:	85 e3       	ldi	r24, 0x35	; 53
    9bda:	90 e0       	ldi	r25, 0x00	; 0
    9bdc:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
    9be0:	8a 83       	std	Y+2, r24	; 0x02
	__value[2] = eeprom_read_byte(&DefPrintLogo);
    9be2:	84 e3       	ldi	r24, 0x34	; 52
    9be4:	90 e0       	ldi	r25, 0x00	; 0
    9be6:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
    9bea:	8b 83       	std	Y+3, r24	; 0x03
	__value[3] = eeprom_read_byte(&DefPrintAutoCut);
    9bec:	83 e3       	ldi	r24, 0x33	; 51
    9bee:	90 e0       	ldi	r25, 0x00	; 0
    9bf0:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
    9bf4:	8c 83       	std	Y+4, r24	; 0x04
	__value[4] = eeprom_read_byte(&DefPrintScrollEnd);
    9bf6:	81 e3       	ldi	r24, 0x31	; 49
    9bf8:	90 e0       	ldi	r25, 0x00	; 0
    9bfa:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
    9bfe:	8d 83       	std	Y+5, r24	; 0x05
	__value[5] = eeprom_read_byte(&DefPrintScrollSpace);
    9c00:	82 e3       	ldi	r24, 0x32	; 50
    9c02:	90 e0       	ldi	r25, 0x00	; 0
    9c04:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
    9c08:	8e 83       	std	Y+6, r24	; 0x06

	lcd_clear();
    9c0a:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
	lcd_printf(1, 1, PSTR("1)Type:  5)Scroll:"));
    9c0e:	81 e0       	ldi	r24, 0x01	; 1
    9c10:	61 e0       	ldi	r22, 0x01	; 1
    9c12:	49 e0       	ldi	r20, 0x09	; 9
    9c14:	5d e0       	ldi	r21, 0x0D	; 13
    9c16:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
	lcd_printf(2, 1, PSTR("2)Size:  6)Space :"));
    9c1a:	82 e0       	ldi	r24, 0x02	; 2
    9c1c:	61 e0       	ldi	r22, 0x01	; 1
    9c1e:	46 ef       	ldi	r20, 0xF6	; 246
    9c20:	5c e0       	ldi	r21, 0x0C	; 12
    9c22:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
	lcd_printf(3, 1, PSTR("3)Logo:  #)Save"));
    9c26:	83 e0       	ldi	r24, 0x03	; 3
    9c28:	61 e0       	ldi	r22, 0x01	; 1
    9c2a:	46 ee       	ldi	r20, 0xE6	; 230
    9c2c:	5c e0       	ldi	r21, 0x0C	; 12
    9c2e:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
	lcd_printf(4, 1, PSTR("4)Cut :  *)Exit"));
    9c32:	84 e0       	ldi	r24, 0x04	; 4
    9c34:	61 e0       	ldi	r22, 0x01	; 1
    9c36:	46 ed       	ldi	r20, 0xD6	; 214
    9c38:	5c e0       	ldi	r21, 0x0C	; 12
    9c3a:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
    9c3e:	0a eb       	ldi	r16, 0xBA	; 186
    9c40:	12 e0       	ldi	r17, 0x02	; 2
    9c42:	4e 01       	movw	r8, r28
    9c44:	08 94       	sec
    9c46:	81 1c       	adc	r8, r1
    9c48:	91 1c       	adc	r9, r1
    9c4a:	74 01       	movw	r14, r8

	for(__i = 0; __i < 6; __i++){
		__x = pgm_read_byte(&__prntloc[__i][0]);
		__y = pgm_read_byte(&__prntloc[__i][1]);
        sprintf_P(__buff,PSTR("%d"),__value[__i]);
    9c4c:	27 e0       	ldi	r18, 0x07	; 7
    9c4e:	c2 2e       	mov	r12, r18
    9c50:	d1 2c       	mov	r13, r1
    9c52:	cc 0e       	add	r12, r28
    9c54:	dd 1e       	adc	r13, r29
    9c56:	93 ed       	ldi	r25, 0xD3	; 211
    9c58:	29 2e       	mov	r2, r25
    9c5a:	9c e0       	ldi	r25, 0x0C	; 12
    9c5c:	39 2e       	mov	r3, r25
		//_f_inttostr(__buff, __value[__i]);
		if(__i == 4) sprintf_P(__buff,PSTR("%.2d"),__value[__i]);
    9c5e:	8e ec       	ldi	r24, 0xCE	; 206
    9c60:	48 2e       	mov	r4, r24
    9c62:	8c e0       	ldi	r24, 0x0C	; 12
    9c64:	58 2e       	mov	r5, r24
	lcd_printf(2, 1, PSTR("2)Size:  6)Space :"));
	lcd_printf(3, 1, PSTR("3)Logo:  #)Save"));
	lcd_printf(4, 1, PSTR("4)Cut :  *)Exit"));

	for(__i = 0; __i < 6; __i++){
		__x = pgm_read_byte(&__prntloc[__i][0]);
    9c66:	f8 01       	movw	r30, r16
    9c68:	74 90       	lpm	r7, Z+
		__y = pgm_read_byte(&__prntloc[__i][1]);
    9c6a:	0f 5f       	subi	r16, 0xFF	; 255
    9c6c:	1f 4f       	sbci	r17, 0xFF	; 255
    9c6e:	f8 01       	movw	r30, r16
    9c70:	a4 90       	lpm	r10, Z+
    9c72:	01 50       	subi	r16, 0x01	; 1
    9c74:	10 40       	sbci	r17, 0x00	; 0
        sprintf_P(__buff,PSTR("%d"),__value[__i]);
    9c76:	d7 01       	movw	r26, r14
    9c78:	bc 90       	ld	r11, X
    9c7a:	00 d0       	rcall	.+0      	; 0x9c7c <_menu_printer+0xe2>
    9c7c:	00 d0       	rcall	.+0      	; 0x9c7e <_menu_printer+0xe4>
    9c7e:	00 d0       	rcall	.+0      	; 0x9c80 <_menu_printer+0xe6>
    9c80:	ed b7       	in	r30, 0x3d	; 61
    9c82:	fe b7       	in	r31, 0x3e	; 62
    9c84:	31 96       	adiw	r30, 0x01	; 1
    9c86:	ad b7       	in	r26, 0x3d	; 61
    9c88:	be b7       	in	r27, 0x3e	; 62
    9c8a:	12 96       	adiw	r26, 0x02	; 2
    9c8c:	dc 92       	st	X, r13
    9c8e:	ce 92       	st	-X, r12
    9c90:	11 97       	sbiw	r26, 0x01	; 1
    9c92:	33 82       	std	Z+3, r3	; 0x03
    9c94:	22 82       	std	Z+2, r2	; 0x02
    9c96:	b4 82       	std	Z+4, r11	; 0x04
    9c98:	15 82       	std	Z+5, r1	; 0x05
    9c9a:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
		//_f_inttostr(__buff, __value[__i]);
		if(__i == 4) sprintf_P(__buff,PSTR("%.2d"),__value[__i]);
    9c9e:	8e 2d       	mov	r24, r14
    9ca0:	88 19       	sub	r24, r8
    9ca2:	ed b7       	in	r30, 0x3d	; 61
    9ca4:	fe b7       	in	r31, 0x3e	; 62
    9ca6:	36 96       	adiw	r30, 0x06	; 6
    9ca8:	0f b6       	in	r0, 0x3f	; 63
    9caa:	f8 94       	cli
    9cac:	fe bf       	out	0x3e, r31	; 62
    9cae:	0f be       	out	0x3f, r0	; 63
    9cb0:	ed bf       	out	0x3d, r30	; 61
    9cb2:	84 30       	cpi	r24, 0x04	; 4
    9cb4:	d1 f4       	brne	.+52     	; 0x9cea <_menu_printer+0x150>
    9cb6:	00 d0       	rcall	.+0      	; 0x9cb8 <_menu_printer+0x11e>
    9cb8:	00 d0       	rcall	.+0      	; 0x9cba <_menu_printer+0x120>
    9cba:	00 d0       	rcall	.+0      	; 0x9cbc <_menu_printer+0x122>
    9cbc:	ed b7       	in	r30, 0x3d	; 61
    9cbe:	fe b7       	in	r31, 0x3e	; 62
    9cc0:	31 96       	adiw	r30, 0x01	; 1
    9cc2:	ad b7       	in	r26, 0x3d	; 61
    9cc4:	be b7       	in	r27, 0x3e	; 62
    9cc6:	12 96       	adiw	r26, 0x02	; 2
    9cc8:	dc 92       	st	X, r13
    9cca:	ce 92       	st	-X, r12
    9ccc:	11 97       	sbiw	r26, 0x01	; 1
    9cce:	53 82       	std	Z+3, r5	; 0x03
    9cd0:	42 82       	std	Z+2, r4	; 0x02
    9cd2:	b4 82       	std	Z+4, r11	; 0x04
    9cd4:	15 82       	std	Z+5, r1	; 0x05
    9cd6:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
    9cda:	ed b7       	in	r30, 0x3d	; 61
    9cdc:	fe b7       	in	r31, 0x3e	; 62
    9cde:	36 96       	adiw	r30, 0x06	; 6
    9ce0:	0f b6       	in	r0, 0x3f	; 63
    9ce2:	f8 94       	cli
    9ce4:	fe bf       	out	0x3e, r31	; 62
    9ce6:	0f be       	out	0x3f, r0	; 63
    9ce8:	ed bf       	out	0x3d, r30	; 61
		//_f_punctuation(__buff, 0, 2, 0);
		lcd_print(__x, __y, __buff);
    9cea:	87 2d       	mov	r24, r7
    9cec:	6a 2d       	mov	r22, r10
    9cee:	a6 01       	movw	r20, r12
    9cf0:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
    9cf4:	0e 5f       	subi	r16, 0xFE	; 254
    9cf6:	1f 4f       	sbci	r17, 0xFF	; 255
    9cf8:	08 94       	sec
    9cfa:	e1 1c       	adc	r14, r1
    9cfc:	f1 1c       	adc	r15, r1
	lcd_printf(1, 1, PSTR("1)Type:  5)Scroll:"));
	lcd_printf(2, 1, PSTR("2)Size:  6)Space :"));
	lcd_printf(3, 1, PSTR("3)Logo:  #)Save"));
	lcd_printf(4, 1, PSTR("4)Cut :  *)Exit"));

	for(__i = 0; __i < 6; __i++){
    9cfe:	f2 e0       	ldi	r31, 0x02	; 2
    9d00:	06 3c       	cpi	r16, 0xC6	; 198
    9d02:	1f 07       	cpc	r17, r31
    9d04:	09 f0       	breq	.+2      	; 0x9d08 <_menu_printer+0x16e>
    9d06:	af cf       	rjmp	.-162    	; 0x9c66 <_menu_printer+0xcc>

		}
		if(__num >= 0x31 && __num <= 0x36){
			__lmt = pgm_read_byte(&__prntlmt[__num - 0x31]);
			__start = pgm_read_byte(&__prntstr[__num - 0x31]);
			if(__value[__num - 0x31] == __lmt)
    9d08:	2e 01       	movw	r4, r28
    9d0a:	08 94       	sec
    9d0c:	41 1c       	adc	r4, r1
    9d0e:	51 1c       	adc	r5, r1
				__value[__num - 0x31] = __start;
			else
				__value[__num - 0x31]++;
			__x = pgm_read_byte(&__prntloc[__num - 0x31][0]);
			__y = pgm_read_byte(&__prntloc[__num - 0x31][1]);
			sprintf_P(__buff,PSTR("%d"),__value[__num - 0x31]);
    9d10:	17 e0       	ldi	r17, 0x07	; 7
    9d12:	e1 2e       	mov	r14, r17
    9d14:	f1 2c       	mov	r15, r1
    9d16:	ec 0e       	add	r14, r28
    9d18:	fd 1e       	adc	r15, r29
    9d1a:	bb ec       	ldi	r27, 0xCB	; 203
    9d1c:	6b 2e       	mov	r6, r27
    9d1e:	bc e0       	ldi	r27, 0x0C	; 12
    9d20:	7b 2e       	mov	r7, r27
			//_f_inttostr(__buff, __value[__num - 0x31]);
			if((__num == 0x35)||(__num == 0x36))
			   sprintf_P(__buff,PSTR("%.2d"),__value[__num - 0x31]);
    9d22:	a6 ec       	ldi	r26, 0xC6	; 198
    9d24:	2a 2e       	mov	r2, r26
    9d26:	ac e0       	ldi	r26, 0x0C	; 12
    9d28:	3a 2e       	mov	r3, r26
		__key = _key_scan(1);
		__num = _key_btn(__key);
		if(__key == _KEY_CANCEL)
			return;
		if(__key==_KEY_ENTER){
			eeprom_write_byte(&DefPrinterType, __value[0]);
    9d2a:	89 80       	ldd	r8, Y+1	; 0x01
			eeprom_write_byte(&DefPrintSize, __value[1]);
    9d2c:	9a 80       	ldd	r9, Y+2	; 0x02
			eeprom_write_byte(&DefPrintLogo, __value[2]);
    9d2e:	ab 80       	ldd	r10, Y+3	; 0x03
			eeprom_write_byte(&DefPrintAutoCut, __value[3]);
    9d30:	bc 80       	ldd	r11, Y+4	; 0x04
			eeprom_write_byte(&DefPrintScrollEnd, __value[4]);
    9d32:	cd 80       	ldd	r12, Y+5	; 0x05
			eeprom_write_byte(&DefPrintScrollSpace, __value[5]);
    9d34:	de 80       	ldd	r13, Y+6	; 0x06
	}
    //sprintf_P(lcdteks,PSTR("6)Space :%.2d"),__value[5]);
	//lcd_print(2,10,lcdteks);

	while(1){	
		__key = _key_scan(1);
    9d36:	81 e0       	ldi	r24, 0x01	; 1
    9d38:	0e 94 6d a6 	call	0x14cda	; 0x14cda <_key_scan>
    9d3c:	18 2f       	mov	r17, r24
		__num = _key_btn(__key);
    9d3e:	0e 94 ce a5 	call	0x14b9c	; 0x14b9c <_key_btn>
    9d42:	08 2f       	mov	r16, r24
		if(__key == _KEY_CANCEL)
    9d44:	17 3e       	cpi	r17, 0xE7	; 231
    9d46:	09 f4       	brne	.+2      	; 0x9d4a <_menu_printer+0x1b0>
    9d48:	85 c0       	rjmp	.+266    	; 0x9e54 <_menu_printer+0x2ba>
			return;
		if(__key==_KEY_ENTER){
    9d4a:	17 3b       	cpi	r17, 0xB7	; 183
    9d4c:	f1 f4       	brne	.+60     	; 0x9d8a <_menu_printer+0x1f0>
			eeprom_write_byte(&DefPrinterType, __value[0]);
    9d4e:	80 e3       	ldi	r24, 0x30	; 48
    9d50:	90 e0       	ldi	r25, 0x00	; 0
    9d52:	68 2d       	mov	r22, r8
    9d54:	0e 94 52 ad 	call	0x15aa4	; 0x15aa4 <__eewr_byte_m128>
			eeprom_write_byte(&DefPrintSize, __value[1]);
    9d58:	85 e3       	ldi	r24, 0x35	; 53
    9d5a:	90 e0       	ldi	r25, 0x00	; 0
    9d5c:	69 2d       	mov	r22, r9
    9d5e:	0e 94 52 ad 	call	0x15aa4	; 0x15aa4 <__eewr_byte_m128>
			eeprom_write_byte(&DefPrintLogo, __value[2]);
    9d62:	84 e3       	ldi	r24, 0x34	; 52
    9d64:	90 e0       	ldi	r25, 0x00	; 0
    9d66:	6a 2d       	mov	r22, r10
    9d68:	0e 94 52 ad 	call	0x15aa4	; 0x15aa4 <__eewr_byte_m128>
			eeprom_write_byte(&DefPrintAutoCut, __value[3]);
    9d6c:	83 e3       	ldi	r24, 0x33	; 51
    9d6e:	90 e0       	ldi	r25, 0x00	; 0
    9d70:	6b 2d       	mov	r22, r11
    9d72:	0e 94 52 ad 	call	0x15aa4	; 0x15aa4 <__eewr_byte_m128>
			eeprom_write_byte(&DefPrintScrollEnd, __value[4]);
    9d76:	81 e3       	ldi	r24, 0x31	; 49
    9d78:	90 e0       	ldi	r25, 0x00	; 0
    9d7a:	6c 2d       	mov	r22, r12
    9d7c:	0e 94 52 ad 	call	0x15aa4	; 0x15aa4 <__eewr_byte_m128>
			eeprom_write_byte(&DefPrintScrollSpace, __value[5]);
    9d80:	82 e3       	ldi	r24, 0x32	; 50
    9d82:	90 e0       	ldi	r25, 0x00	; 0
    9d84:	6d 2d       	mov	r22, r13
    9d86:	0e 94 52 ad 	call	0x15aa4	; 0x15aa4 <__eewr_byte_m128>

		}
		if(__num >= 0x31 && __num <= 0x36){
    9d8a:	80 2f       	mov	r24, r16
    9d8c:	81 53       	subi	r24, 0x31	; 49
    9d8e:	86 30       	cpi	r24, 0x06	; 6
    9d90:	90 f6       	brcc	.-92     	; 0x9d36 <_menu_printer+0x19c>
			__lmt = pgm_read_byte(&__prntlmt[__num - 0x31]);
    9d92:	a0 2f       	mov	r26, r16
    9d94:	b0 e0       	ldi	r27, 0x00	; 0
    9d96:	d1 97       	sbiw	r26, 0x31	; 49
    9d98:	fd 01       	movw	r30, r26
    9d9a:	ea 53       	subi	r30, 0x3A	; 58
    9d9c:	fd 4f       	sbci	r31, 0xFD	; 253
    9d9e:	24 91       	lpm	r18, Z+
			__start = pgm_read_byte(&__prntstr[__num - 0x31]);
    9da0:	fd 01       	movw	r30, r26
    9da2:	e4 53       	subi	r30, 0x34	; 52
    9da4:	fd 4f       	sbci	r31, 0xFD	; 253
    9da6:	94 91       	lpm	r25, Z+
			if(__value[__num - 0x31] == __lmt)
    9da8:	f2 01       	movw	r30, r4
    9daa:	ea 0f       	add	r30, r26
    9dac:	fb 1f       	adc	r31, r27
    9dae:	80 81       	ld	r24, Z
    9db0:	82 17       	cp	r24, r18
    9db2:	11 f4       	brne	.+4      	; 0x9db8 <_menu_printer+0x21e>
				__value[__num - 0x31] = __start;
    9db4:	90 83       	st	Z, r25
    9db6:	02 c0       	rjmp	.+4      	; 0x9dbc <_menu_printer+0x222>
			else
				__value[__num - 0x31]++;
    9db8:	8f 5f       	subi	r24, 0xFF	; 255
    9dba:	80 83       	st	Z, r24
			__x = pgm_read_byte(&__prntloc[__num - 0x31][0]);
    9dbc:	9d 01       	movw	r18, r26
    9dbe:	22 0f       	add	r18, r18
    9dc0:	33 1f       	adc	r19, r19
    9dc2:	c9 01       	movw	r24, r18
    9dc4:	86 54       	subi	r24, 0x46	; 70
    9dc6:	9d 4f       	sbci	r25, 0xFD	; 253
    9dc8:	fc 01       	movw	r30, r24
    9dca:	c4 90       	lpm	r12, Z+
			__y = pgm_read_byte(&__prntloc[__num - 0x31][1]);
    9dcc:	25 54       	subi	r18, 0x45	; 69
    9dce:	3d 4f       	sbci	r19, 0xFD	; 253
    9dd0:	f9 01       	movw	r30, r18
    9dd2:	d4 90       	lpm	r13, Z+
			sprintf_P(__buff,PSTR("%d"),__value[__num - 0x31]);
    9dd4:	a4 0d       	add	r26, r4
    9dd6:	b5 1d       	adc	r27, r5
    9dd8:	1c 91       	ld	r17, X
    9dda:	00 d0       	rcall	.+0      	; 0x9ddc <_menu_printer+0x242>
    9ddc:	00 d0       	rcall	.+0      	; 0x9dde <_menu_printer+0x244>
    9dde:	00 d0       	rcall	.+0      	; 0x9de0 <_menu_printer+0x246>
    9de0:	ed b7       	in	r30, 0x3d	; 61
    9de2:	fe b7       	in	r31, 0x3e	; 62
    9de4:	31 96       	adiw	r30, 0x01	; 1
    9de6:	ad b7       	in	r26, 0x3d	; 61
    9de8:	be b7       	in	r27, 0x3e	; 62
    9dea:	12 96       	adiw	r26, 0x02	; 2
    9dec:	fc 92       	st	X, r15
    9dee:	ee 92       	st	-X, r14
    9df0:	11 97       	sbiw	r26, 0x01	; 1
    9df2:	73 82       	std	Z+3, r7	; 0x03
    9df4:	62 82       	std	Z+2, r6	; 0x02
    9df6:	14 83       	std	Z+4, r17	; 0x04
    9df8:	15 82       	std	Z+5, r1	; 0x05
    9dfa:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
			//_f_inttostr(__buff, __value[__num - 0x31]);
			if((__num == 0x35)||(__num == 0x36))
    9dfe:	05 53       	subi	r16, 0x35	; 53
    9e00:	ed b7       	in	r30, 0x3d	; 61
    9e02:	fe b7       	in	r31, 0x3e	; 62
    9e04:	36 96       	adiw	r30, 0x06	; 6
    9e06:	0f b6       	in	r0, 0x3f	; 63
    9e08:	f8 94       	cli
    9e0a:	fe bf       	out	0x3e, r31	; 62
    9e0c:	0f be       	out	0x3f, r0	; 63
    9e0e:	ed bf       	out	0x3d, r30	; 61
    9e10:	02 30       	cpi	r16, 0x02	; 2
    9e12:	d0 f4       	brcc	.+52     	; 0x9e48 <_menu_printer+0x2ae>
			   sprintf_P(__buff,PSTR("%.2d"),__value[__num - 0x31]);
    9e14:	00 d0       	rcall	.+0      	; 0x9e16 <_menu_printer+0x27c>
    9e16:	00 d0       	rcall	.+0      	; 0x9e18 <_menu_printer+0x27e>
    9e18:	00 d0       	rcall	.+0      	; 0x9e1a <_menu_printer+0x280>
    9e1a:	ed b7       	in	r30, 0x3d	; 61
    9e1c:	fe b7       	in	r31, 0x3e	; 62
    9e1e:	31 96       	adiw	r30, 0x01	; 1
    9e20:	ad b7       	in	r26, 0x3d	; 61
    9e22:	be b7       	in	r27, 0x3e	; 62
    9e24:	12 96       	adiw	r26, 0x02	; 2
    9e26:	fc 92       	st	X, r15
    9e28:	ee 92       	st	-X, r14
    9e2a:	11 97       	sbiw	r26, 0x01	; 1
    9e2c:	33 82       	std	Z+3, r3	; 0x03
    9e2e:	22 82       	std	Z+2, r2	; 0x02
    9e30:	14 83       	std	Z+4, r17	; 0x04
    9e32:	15 82       	std	Z+5, r1	; 0x05
    9e34:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
    9e38:	ed b7       	in	r30, 0x3d	; 61
    9e3a:	fe b7       	in	r31, 0x3e	; 62
    9e3c:	36 96       	adiw	r30, 0x06	; 6
    9e3e:	0f b6       	in	r0, 0x3f	; 63
    9e40:	f8 94       	cli
    9e42:	fe bf       	out	0x3e, r31	; 62
    9e44:	0f be       	out	0x3f, r0	; 63
    9e46:	ed bf       	out	0x3d, r30	; 61
				//_f_punctuation(__buff, 0, 2, 0);

			lcd_print(__x, __y, __buff);
    9e48:	8c 2d       	mov	r24, r12
    9e4a:	6d 2d       	mov	r22, r13
    9e4c:	a7 01       	movw	r20, r14
    9e4e:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
    9e52:	6b cf       	rjmp	.-298    	; 0x9d2a <_menu_printer+0x190>
		}
	}
}
    9e54:	2c 96       	adiw	r28, 0x0c	; 12
    9e56:	0f b6       	in	r0, 0x3f	; 63
    9e58:	f8 94       	cli
    9e5a:	de bf       	out	0x3e, r29	; 62
    9e5c:	0f be       	out	0x3f, r0	; 63
    9e5e:	cd bf       	out	0x3d, r28	; 61
    9e60:	cf 91       	pop	r28
    9e62:	df 91       	pop	r29
    9e64:	1f 91       	pop	r17
    9e66:	0f 91       	pop	r16
    9e68:	ff 90       	pop	r15
    9e6a:	ef 90       	pop	r14
    9e6c:	df 90       	pop	r13
    9e6e:	cf 90       	pop	r12
    9e70:	bf 90       	pop	r11
    9e72:	af 90       	pop	r10
    9e74:	9f 90       	pop	r9
    9e76:	8f 90       	pop	r8
    9e78:	7f 90       	pop	r7
    9e7a:	6f 90       	pop	r6
    9e7c:	5f 90       	pop	r5
    9e7e:	4f 90       	pop	r4
    9e80:	3f 90       	pop	r3
    9e82:	2f 90       	pop	r2
    9e84:	08 95       	ret

00009e86 <FSettingPrinter>:
char FSettingDatetime(){
     _menu_datetime();
     return MENU_DONE;
}
char FSettingPrinter(){
     _menu_printer();
    9e86:	0e 94 cd 4d 	call	0x9b9a	; 0x9b9a <_menu_printer>
	 return MENU_DONE;
}
    9e8a:	81 e0       	ldi	r24, 0x01	; 1
    9e8c:	08 95       	ret

00009e8e <_menu_pumpprodinput>:
				*/
		}
	}
}

void _menu_pumpprodinput(unsigned char __select){
    9e8e:	6f 92       	push	r6
    9e90:	7f 92       	push	r7
    9e92:	8f 92       	push	r8
    9e94:	9f 92       	push	r9
    9e96:	af 92       	push	r10
    9e98:	bf 92       	push	r11
    9e9a:	cf 92       	push	r12
    9e9c:	df 92       	push	r13
    9e9e:	ef 92       	push	r14
    9ea0:	ff 92       	push	r15
    9ea2:	0f 93       	push	r16
    9ea4:	1f 93       	push	r17
    9ea6:	df 93       	push	r29
    9ea8:	cf 93       	push	r28
    9eaa:	cd b7       	in	r28, 0x3d	; 61
    9eac:	de b7       	in	r29, 0x3e	; 62
    9eae:	a7 97       	sbiw	r28, 0x27	; 39
    9eb0:	0f b6       	in	r0, 0x3f	; 63
    9eb2:	f8 94       	cli
    9eb4:	de bf       	out	0x3e, r29	; 62
    9eb6:	0f be       	out	0x3f, r0	; 63
    9eb8:	cd bf       	out	0x3d, r28	; 61
    9eba:	b8 2e       	mov	r11, r24
	char 			__pump_prod[6],__pump_id[8];
	unsigned char	i, __x, __y, __key, __num, __buff[5];
	char lcdteks[20];

	eeprom_read_block((void*) &__pump_id, (const void*) &DefPumpMap, 8);
    9ebc:	8e 01       	movw	r16, r28
    9ebe:	04 5f       	subi	r16, 0xF4	; 244
    9ec0:	1f 4f       	sbci	r17, 0xFF	; 255
    9ec2:	c8 01       	movw	r24, r16
    9ec4:	66 e4       	ldi	r22, 0x46	; 70
    9ec6:	70 e0       	ldi	r23, 0x00	; 0
    9ec8:	48 e0       	ldi	r20, 0x08	; 8
    9eca:	50 e0       	ldi	r21, 0x00	; 0
    9ecc:	0e 94 30 ad 	call	0x15a60	; 0x15a60 <__eerd_block_m128>
	eeprom_read_block((void*) &__pump_prod, (const void*) &DefNozzleMap[__select], 6);
    9ed0:	86 e0       	ldi	r24, 0x06	; 6
    9ed2:	b8 9e       	mul	r11, r24
    9ed4:	40 01       	movw	r8, r0
    9ed6:	11 24       	eor	r1, r1
    9ed8:	86 e5       	ldi	r24, 0x56	; 86
    9eda:	90 e0       	ldi	r25, 0x00	; 0
    9edc:	88 0e       	add	r8, r24
    9ede:	99 1e       	adc	r9, r25
    9ee0:	b6 e0       	ldi	r27, 0x06	; 6
    9ee2:	cb 2e       	mov	r12, r27
    9ee4:	d1 2c       	mov	r13, r1
    9ee6:	cc 0e       	add	r12, r28
    9ee8:	dd 1e       	adc	r13, r29
    9eea:	c6 01       	movw	r24, r12
    9eec:	b4 01       	movw	r22, r8
    9eee:	46 e0       	ldi	r20, 0x06	; 6
    9ef0:	50 e0       	ldi	r21, 0x00	; 0
    9ef2:	0e 94 30 ad 	call	0x15a60	; 0x15a60 <__eerd_block_m128>

	lcd_clear();_delay_ms(10);
    9ef6:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
    9efa:	84 ec       	ldi	r24, 0xC4	; 196
    9efc:	99 e0       	ldi	r25, 0x09	; 9
    9efe:	01 97       	sbiw	r24, 0x01	; 1
    9f00:	f1 f7       	brne	.-4      	; 0x9efe <_menu_pumpprodinput+0x70>
    sprintf_P(lcdteks, PSTR("Product FIP%.2d"),__pump_id[__select]);
    9f02:	00 d0       	rcall	.+0      	; 0x9f04 <_menu_pumpprodinput+0x76>
    9f04:	00 d0       	rcall	.+0      	; 0x9f06 <_menu_pumpprodinput+0x78>
    9f06:	00 d0       	rcall	.+0      	; 0x9f08 <_menu_pumpprodinput+0x7a>
    9f08:	ed b7       	in	r30, 0x3d	; 61
    9f0a:	fe b7       	in	r31, 0x3e	; 62
    9f0c:	31 96       	adiw	r30, 0x01	; 1
    9f0e:	a4 e1       	ldi	r26, 0x14	; 20
    9f10:	ea 2e       	mov	r14, r26
    9f12:	f1 2c       	mov	r15, r1
    9f14:	ec 0e       	add	r14, r28
    9f16:	fd 1e       	adc	r15, r29
    9f18:	ad b7       	in	r26, 0x3d	; 61
    9f1a:	be b7       	in	r27, 0x3e	; 62
    9f1c:	12 96       	adiw	r26, 0x02	; 2
    9f1e:	fc 92       	st	X, r15
    9f20:	ee 92       	st	-X, r14
    9f22:	11 97       	sbiw	r26, 0x01	; 1
    9f24:	84 e8       	ldi	r24, 0x84	; 132
    9f26:	9d e0       	ldi	r25, 0x0D	; 13
    9f28:	93 83       	std	Z+3, r25	; 0x03
    9f2a:	82 83       	std	Z+2, r24	; 0x02
    9f2c:	0b 0d       	add	r16, r11
    9f2e:	11 1d       	adc	r17, r1
    9f30:	d8 01       	movw	r26, r16
    9f32:	8c 91       	ld	r24, X
    9f34:	84 83       	std	Z+4, r24	; 0x04
    9f36:	15 82       	std	Z+5, r1	; 0x05
    9f38:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
    lcd_print(1, 1,lcdteks);
    9f3c:	ed b7       	in	r30, 0x3d	; 61
    9f3e:	fe b7       	in	r31, 0x3e	; 62
    9f40:	36 96       	adiw	r30, 0x06	; 6
    9f42:	0f b6       	in	r0, 0x3f	; 63
    9f44:	f8 94       	cli
    9f46:	fe bf       	out	0x3e, r31	; 62
    9f48:	0f be       	out	0x3f, r0	; 63
    9f4a:	ed bf       	out	0x3d, r30	; 61
    9f4c:	81 e0       	ldi	r24, 0x01	; 1
    9f4e:	61 e0       	ldi	r22, 0x01	; 1
    9f50:	a7 01       	movw	r20, r14
    9f52:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>

	lcd_printf(2, 1, PSTR("1)N1:  3)N3:  5)N5:"));
    9f56:	82 e0       	ldi	r24, 0x02	; 2
    9f58:	61 e0       	ldi	r22, 0x01	; 1
    9f5a:	40 e7       	ldi	r20, 0x70	; 112
    9f5c:	5d e0       	ldi	r21, 0x0D	; 13
    9f5e:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
	lcd_printf(3, 1, PSTR("2)N2:  4)N4:  6)N6:"));
    9f62:	83 e0       	ldi	r24, 0x03	; 3
    9f64:	61 e0       	ldi	r22, 0x01	; 1
    9f66:	4c e5       	ldi	r20, 0x5C	; 92
    9f68:	5d e0       	ldi	r21, 0x0D	; 13
    9f6a:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
	lcd_printf(4, 1, PSTR("*)Exit        #)Save"));
    9f6e:	84 e0       	ldi	r24, 0x04	; 4
    9f70:	61 e0       	ldi	r22, 0x01	; 1
    9f72:	47 e4       	ldi	r20, 0x47	; 71
    9f74:	5d e0       	ldi	r21, 0x0D	; 13
    9f76:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
    9f7a:	ee ea       	ldi	r30, 0xAE	; 174
    9f7c:	ee 2e       	mov	r14, r30
    9f7e:	e2 e0       	ldi	r30, 0x02	; 2
    9f80:	fe 2e       	mov	r15, r30

	for(i=0;i<6;i++){
		__x = pgm_read_byte(&__prodloc[i][0]);
		__y = pgm_read_byte(&__prodloc[i][1]);

        sprintf_P(__buff,PSTR("%d"),__pump_prod[i]);
    9f82:	5e 01       	movw	r10, r28
    9f84:	08 94       	sec
    9f86:	a1 1c       	adc	r10, r1
    9f88:	b1 1c       	adc	r11, r1
    9f8a:	74 e4       	ldi	r23, 0x44	; 68
    9f8c:	67 2e       	mov	r6, r23
    9f8e:	7d e0       	ldi	r23, 0x0D	; 13
    9f90:	77 2e       	mov	r7, r23
	lcd_printf(2, 1, PSTR("1)N1:  3)N3:  5)N5:"));
	lcd_printf(3, 1, PSTR("2)N2:  4)N4:  6)N6:"));
	lcd_printf(4, 1, PSTR("*)Exit        #)Save"));

	for(i=0;i<6;i++){
		__x = pgm_read_byte(&__prodloc[i][0]);
    9f92:	f7 01       	movw	r30, r14
    9f94:	04 91       	lpm	r16, Z+
		__y = pgm_read_byte(&__prodloc[i][1]);
    9f96:	08 94       	sec
    9f98:	e1 1c       	adc	r14, r1
    9f9a:	f1 1c       	adc	r15, r1
    9f9c:	f7 01       	movw	r30, r14
    9f9e:	14 91       	lpm	r17, Z+

        sprintf_P(__buff,PSTR("%d"),__pump_prod[i]);
    9fa0:	00 d0       	rcall	.+0      	; 0x9fa2 <_menu_pumpprodinput+0x114>
    9fa2:	00 d0       	rcall	.+0      	; 0x9fa4 <_menu_pumpprodinput+0x116>
    9fa4:	00 d0       	rcall	.+0      	; 0x9fa6 <_menu_pumpprodinput+0x118>
    9fa6:	ed b7       	in	r30, 0x3d	; 61
    9fa8:	fe b7       	in	r31, 0x3e	; 62
    9faa:	31 96       	adiw	r30, 0x01	; 1
    9fac:	ad b7       	in	r26, 0x3d	; 61
    9fae:	be b7       	in	r27, 0x3e	; 62
    9fb0:	12 96       	adiw	r26, 0x02	; 2
    9fb2:	bc 92       	st	X, r11
    9fb4:	ae 92       	st	-X, r10
    9fb6:	11 97       	sbiw	r26, 0x01	; 1
    9fb8:	73 82       	std	Z+3, r7	; 0x03
    9fba:	62 82       	std	Z+2, r6	; 0x02
    9fbc:	d6 01       	movw	r26, r12
    9fbe:	8d 91       	ld	r24, X+
    9fc0:	6d 01       	movw	r12, r26
    9fc2:	84 83       	std	Z+4, r24	; 0x04
    9fc4:	15 82       	std	Z+5, r1	; 0x05
    9fc6:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
		lcd_print(__x+1, __y, __buff);
    9fca:	ed b7       	in	r30, 0x3d	; 61
    9fcc:	fe b7       	in	r31, 0x3e	; 62
    9fce:	36 96       	adiw	r30, 0x06	; 6
    9fd0:	0f b6       	in	r0, 0x3f	; 63
    9fd2:	f8 94       	cli
    9fd4:	fe bf       	out	0x3e, r31	; 62
    9fd6:	0f be       	out	0x3f, r0	; 63
    9fd8:	ed bf       	out	0x3d, r30	; 61
    9fda:	80 2f       	mov	r24, r16
    9fdc:	8f 5f       	subi	r24, 0xFF	; 255
    9fde:	61 2f       	mov	r22, r17
    9fe0:	a5 01       	movw	r20, r10
    9fe2:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
    9fe6:	08 94       	sec
    9fe8:	e1 1c       	adc	r14, r1
    9fea:	f1 1c       	adc	r15, r1

	lcd_printf(2, 1, PSTR("1)N1:  3)N3:  5)N5:"));
	lcd_printf(3, 1, PSTR("2)N2:  4)N4:  6)N6:"));
	lcd_printf(4, 1, PSTR("*)Exit        #)Save"));

	for(i=0;i<6;i++){
    9fec:	fa eb       	ldi	r31, 0xBA	; 186
    9fee:	ef 16       	cp	r14, r31
    9ff0:	f2 e0       	ldi	r31, 0x02	; 2
    9ff2:	ff 06       	cpc	r15, r31
    9ff4:	71 f6       	brne	.-100    	; 0x9f92 <_menu_pumpprodinput+0x104>
		if(__key == _KEY_ENTER){
			eeprom_write_block((const void*) &__pump_prod, (void*) &DefNozzleMap[__select], 6);
			return;
		}
		if(__num >= '1' && __num <= '6'){
			if(__pump_prod[__num - '1'] == 6)
    9ff6:	66 e0       	ldi	r22, 0x06	; 6
    9ff8:	c6 2e       	mov	r12, r22
    9ffa:	d1 2c       	mov	r13, r1
    9ffc:	cc 0e       	add	r12, r28
    9ffe:	dd 1e       	adc	r13, r29
			else
				__pump_prod[__num - '1']++;

			__x = pgm_read_byte(&__prodloc[__num - 0x31][0]);
			__y = pgm_read_byte(&__prodloc[__num - 0x31][1]);
			sprintf_P(__buff,PSTR("%d"),__pump_prod[__num - 0x31]);
    a000:	7e 01       	movw	r14, r28
    a002:	08 94       	sec
    a004:	e1 1c       	adc	r14, r1
    a006:	f1 1c       	adc	r15, r1
    a008:	51 e4       	ldi	r21, 0x41	; 65
    a00a:	a5 2e       	mov	r10, r21
    a00c:	5d e0       	ldi	r21, 0x0D	; 13
    a00e:	b5 2e       	mov	r11, r21
		//lcd_print(2+(i%2),(i/2)*6,lcdteks);
	}

	while(1){
		
		__key = _key_scan(1);
    a010:	81 e0       	ldi	r24, 0x01	; 1
    a012:	0e 94 6d a6 	call	0x14cda	; 0x14cda <_key_scan>
    a016:	18 2f       	mov	r17, r24
		__num = _key_btn(__key);
    a018:	0e 94 ce a5 	call	0x14b9c	; 0x14b9c <_key_btn>
    a01c:	98 2f       	mov	r25, r24
		if(__key == _KEY_CANCEL)
    a01e:	17 3e       	cpi	r17, 0xE7	; 231
    a020:	09 f4       	brne	.+2      	; 0xa024 <_menu_pumpprodinput+0x196>
    a022:	4d c0       	rjmp	.+154    	; 0xa0be <_menu_pumpprodinput+0x230>
			return;
		if(__key == _KEY_ENTER){
    a024:	17 3b       	cpi	r17, 0xB7	; 183
    a026:	41 f4       	brne	.+16     	; 0xa038 <_menu_pumpprodinput+0x1aa>
			eeprom_write_block((const void*) &__pump_prod, (void*) &DefNozzleMap[__select], 6);
    a028:	ce 01       	movw	r24, r28
    a02a:	06 96       	adiw	r24, 0x06	; 6
    a02c:	b4 01       	movw	r22, r8
    a02e:	46 e0       	ldi	r20, 0x06	; 6
    a030:	50 e0       	ldi	r21, 0x00	; 0
    a032:	0e 94 48 ad 	call	0x15a90	; 0x15a90 <__eewr_block_m128>
    a036:	43 c0       	rjmp	.+134    	; 0xa0be <_menu_pumpprodinput+0x230>
			return;
		}
		if(__num >= '1' && __num <= '6'){
    a038:	81 53       	subi	r24, 0x31	; 49
    a03a:	86 30       	cpi	r24, 0x06	; 6
    a03c:	48 f7       	brcc	.-46     	; 0xa010 <_menu_pumpprodinput+0x182>
			if(__pump_prod[__num - '1'] == 6)
    a03e:	a9 2f       	mov	r26, r25
    a040:	b0 e0       	ldi	r27, 0x00	; 0
    a042:	d1 97       	sbiw	r26, 0x31	; 49
    a044:	f6 01       	movw	r30, r12
    a046:	ea 0f       	add	r30, r26
    a048:	fb 1f       	adc	r31, r27
    a04a:	80 81       	ld	r24, Z
    a04c:	86 30       	cpi	r24, 0x06	; 6
    a04e:	11 f4       	brne	.+4      	; 0xa054 <_menu_pumpprodinput+0x1c6>
				__pump_prod[__num - '1'] = 0;
    a050:	10 82       	st	Z, r1
    a052:	02 c0       	rjmp	.+4      	; 0xa058 <_menu_pumpprodinput+0x1ca>
			else
				__pump_prod[__num - '1']++;
    a054:	8f 5f       	subi	r24, 0xFF	; 255
    a056:	80 83       	st	Z, r24

			__x = pgm_read_byte(&__prodloc[__num - 0x31][0]);
    a058:	29 2f       	mov	r18, r25
    a05a:	30 e0       	ldi	r19, 0x00	; 0
    a05c:	21 53       	subi	r18, 0x31	; 49
    a05e:	30 40       	sbci	r19, 0x00	; 0
    a060:	22 0f       	add	r18, r18
    a062:	33 1f       	adc	r19, r19
    a064:	c9 01       	movw	r24, r18
    a066:	82 55       	subi	r24, 0x52	; 82
    a068:	9d 4f       	sbci	r25, 0xFD	; 253
    a06a:	fc 01       	movw	r30, r24
    a06c:	04 91       	lpm	r16, Z+
			__y = pgm_read_byte(&__prodloc[__num - 0x31][1]);
    a06e:	21 55       	subi	r18, 0x51	; 81
    a070:	3d 4f       	sbci	r19, 0xFD	; 253
    a072:	f9 01       	movw	r30, r18
    a074:	14 91       	lpm	r17, Z+
			sprintf_P(__buff,PSTR("%d"),__pump_prod[__num - 0x31]);
    a076:	00 d0       	rcall	.+0      	; 0xa078 <_menu_pumpprodinput+0x1ea>
    a078:	00 d0       	rcall	.+0      	; 0xa07a <_menu_pumpprodinput+0x1ec>
    a07a:	00 d0       	rcall	.+0      	; 0xa07c <_menu_pumpprodinput+0x1ee>
    a07c:	2d b7       	in	r18, 0x3d	; 61
    a07e:	3e b7       	in	r19, 0x3e	; 62
    a080:	2f 5f       	subi	r18, 0xFF	; 255
    a082:	3f 4f       	sbci	r19, 0xFF	; 255
    a084:	ed b7       	in	r30, 0x3d	; 61
    a086:	fe b7       	in	r31, 0x3e	; 62
    a088:	f2 82       	std	Z+2, r15	; 0x02
    a08a:	e1 82       	std	Z+1, r14	; 0x01
    a08c:	f9 01       	movw	r30, r18
    a08e:	b3 82       	std	Z+3, r11	; 0x03
    a090:	a2 82       	std	Z+2, r10	; 0x02
    a092:	ac 0d       	add	r26, r12
    a094:	bd 1d       	adc	r27, r13
    a096:	8c 91       	ld	r24, X
    a098:	84 83       	std	Z+4, r24	; 0x04
    a09a:	15 82       	std	Z+5, r1	; 0x05
    a09c:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
			//_f_inttostr(__buff, __pump_prod[__num - 0x31]);
			lcd_print(__x+1, __y, __buff);
    a0a0:	8d b7       	in	r24, 0x3d	; 61
    a0a2:	9e b7       	in	r25, 0x3e	; 62
    a0a4:	06 96       	adiw	r24, 0x06	; 6
    a0a6:	0f b6       	in	r0, 0x3f	; 63
    a0a8:	f8 94       	cli
    a0aa:	9e bf       	out	0x3e, r25	; 62
    a0ac:	0f be       	out	0x3f, r0	; 63
    a0ae:	8d bf       	out	0x3d, r24	; 61
    a0b0:	80 2f       	mov	r24, r16
    a0b2:	8f 5f       	subi	r24, 0xFF	; 255
    a0b4:	61 2f       	mov	r22, r17
    a0b6:	a7 01       	movw	r20, r14
    a0b8:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
    a0bc:	a9 cf       	rjmp	.-174    	; 0xa010 <_menu_pumpprodinput+0x182>
		}
	}
}
    a0be:	a7 96       	adiw	r28, 0x27	; 39
    a0c0:	0f b6       	in	r0, 0x3f	; 63
    a0c2:	f8 94       	cli
    a0c4:	de bf       	out	0x3e, r29	; 62
    a0c6:	0f be       	out	0x3f, r0	; 63
    a0c8:	cd bf       	out	0x3d, r28	; 61
    a0ca:	cf 91       	pop	r28
    a0cc:	df 91       	pop	r29
    a0ce:	1f 91       	pop	r17
    a0d0:	0f 91       	pop	r16
    a0d2:	ff 90       	pop	r15
    a0d4:	ef 90       	pop	r14
    a0d6:	df 90       	pop	r13
    a0d8:	cf 90       	pop	r12
    a0da:	bf 90       	pop	r11
    a0dc:	af 90       	pop	r10
    a0de:	9f 90       	pop	r9
    a0e0:	8f 90       	pop	r8
    a0e2:	7f 90       	pop	r7
    a0e4:	6f 90       	pop	r6
    a0e6:	08 95       	ret

0000a0e8 <_menu_pumpprod>:
}

void _menu_pumpprod(void){
	char KeyPressed,KeyChar;
	while(1){
		lcd_clear();
    a0e8:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
		_scr_pump();
    a0ec:	0e 94 f4 47 	call	0x8fe8	; 0x8fe8 <_scr_pump>
		while(1){
			KeyPressed=_key_scan(1);
    a0f0:	81 e0       	ldi	r24, 0x01	; 1
    a0f2:	0e 94 6d a6 	call	0x14cda	; 0x14cda <_key_scan>
		    KeyChar=_key_btn(KeyPressed);
    a0f6:	0e 94 ce a5 	call	0x14b9c	; 0x14b9c <_key_btn>
    a0fa:	98 2f       	mov	r25, r24

			if ((KeyChar>='1')&&(KeyChar<='8')){
    a0fc:	81 53       	subi	r24, 0x31	; 49
    a0fe:	88 30       	cpi	r24, 0x08	; 8
    a100:	18 f4       	brcc	.+6      	; 0xa108 <_menu_pumpprod+0x20>
			     _menu_pumpprodinput(KeyChar-'1');
    a102:	0e 94 47 4f 	call	0x9e8e	; 0x9e8e <_menu_pumpprodinput>
    a106:	f0 cf       	rjmp	.-32     	; 0xa0e8 <_menu_pumpprod>
				break;
			}else if (KeyChar=='*'){
    a108:	9a 32       	cpi	r25, 0x2A	; 42
    a10a:	91 f7       	brne	.-28     	; 0xa0f0 <_menu_pumpprod+0x8>
			if(__key == _KEY_CANCEL)
				return;
				*/
		}
	}
}
    a10c:	08 95       	ret

0000a10e <FMenuPumpLabel>:
		       break;		         
	      }
	 }     
}

void FMenuPumpLabel(){
    a10e:	6f 92       	push	r6
    a110:	7f 92       	push	r7
    a112:	8f 92       	push	r8
    a114:	9f 92       	push	r9
    a116:	af 92       	push	r10
    a118:	bf 92       	push	r11
    a11a:	cf 92       	push	r12
    a11c:	df 92       	push	r13
    a11e:	ef 92       	push	r14
    a120:	ff 92       	push	r15
    a122:	1f 93       	push	r17
    a124:	df 93       	push	r29
    a126:	cf 93       	push	r28
    a128:	cd b7       	in	r28, 0x3d	; 61
    a12a:	de b7       	in	r29, 0x3e	; 62
    a12c:	2d 97       	sbiw	r28, 0x0d	; 13
    a12e:	0f b6       	in	r0, 0x3f	; 63
    a130:	f8 94       	cli
    a132:	de bf       	out	0x3e, r29	; 62
    a134:	0f be       	out	0x3f, r0	; 63
    a136:	cd bf       	out	0x3d, r28	; 61
	char PPumpLabel[8];
	unsigned char i, xPos,yPos,KeyPressed,KeyChar,strLabel[5];
	static char MaxCountId=16;

	eeprom_read_block((void*) &PPumpLabel, (const void*) &DefPumpLabel, 8);
    a138:	36 e0       	ldi	r19, 0x06	; 6
    a13a:	c3 2e       	mov	r12, r19
    a13c:	d1 2c       	mov	r13, r1
    a13e:	cc 0e       	add	r12, r28
    a140:	dd 1e       	adc	r13, r29
    a142:	c6 01       	movw	r24, r12
    a144:	6e e4       	ldi	r22, 0x4E	; 78
    a146:	70 e0       	ldi	r23, 0x00	; 0
    a148:	48 e0       	ldi	r20, 0x08	; 8
    a14a:	50 e0       	ldi	r21, 0x00	; 0
    a14c:	0e 94 30 ad 	call	0x15a60	; 0x15a60 <__eerd_block_m128>
	MaxCountId=99;
    a150:	83 e6       	ldi	r24, 0x63	; 99
    a152:	80 93 56 01 	sts	0x0156, r24
	lcd_clear();_delay_ms(10);
    a156:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
    a15a:	84 ec       	ldi	r24, 0xC4	; 196
    a15c:	99 e0       	ldi	r25, 0x09	; 9
    a15e:	01 97       	sbiw	r24, 0x01	; 1
    a160:	f1 f7       	brne	.-4      	; 0xa15e <FMenuPumpLabel+0x50>
	lcd_printf(1, 1, PSTR("1)1:   5)5:"));
    a162:	81 e0       	ldi	r24, 0x01	; 1
    a164:	61 e0       	ldi	r22, 0x01	; 1
    a166:	4f e7       	ldi	r20, 0x7F	; 127
    a168:	5e e0       	ldi	r21, 0x0E	; 14
    a16a:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
	lcd_printf(2, 1, PSTR("2)2:   6)6:"));
    a16e:	82 e0       	ldi	r24, 0x02	; 2
    a170:	61 e0       	ldi	r22, 0x01	; 1
    a172:	43 e7       	ldi	r20, 0x73	; 115
    a174:	5e e0       	ldi	r21, 0x0E	; 14
    a176:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
	lcd_printf(3, 1, PSTR("3)3:   7)7:   #)Save"));
    a17a:	83 e0       	ldi	r24, 0x03	; 3
    a17c:	61 e0       	ldi	r22, 0x01	; 1
    a17e:	4e e5       	ldi	r20, 0x5E	; 94
    a180:	5e e0       	ldi	r21, 0x0E	; 14
    a182:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
	lcd_printf(4, 1, PSTR("4)4:   8)8:   *)Exit"));
    a186:	84 e0       	ldi	r24, 0x04	; 4
    a188:	61 e0       	ldi	r22, 0x01	; 1
    a18a:	49 e4       	ldi	r20, 0x49	; 73
    a18c:	5e e0       	ldi	r21, 0x0E	; 14
    a18e:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
    a192:	76 01       	movw	r14, r12

	for(i=0;i< 8;i++){
	    sprintf_P(strLabel,PSTR("%.2d"),PPumpLabel[i]);
    a194:	5e 01       	movw	r10, r28
    a196:	08 94       	sec
    a198:	a1 1c       	adc	r10, r1
    a19a:	b1 1c       	adc	r11, r1
    a19c:	24 e4       	ldi	r18, 0x44	; 68
    a19e:	62 2e       	mov	r6, r18
    a1a0:	2e e0       	ldi	r18, 0x0E	; 14
    a1a2:	72 2e       	mov	r7, r18
	lcd_printf(1, 1, PSTR("1)1:   5)5:"));
	lcd_printf(2, 1, PSTR("2)2:   6)6:"));
	lcd_printf(3, 1, PSTR("3)3:   7)7:   #)Save"));
	lcd_printf(4, 1, PSTR("4)4:   8)8:   *)Exit"));

	for(i=0;i< 8;i++){
    a1a4:	9e e0       	ldi	r25, 0x0E	; 14
    a1a6:	89 2e       	mov	r8, r25
    a1a8:	91 2c       	mov	r9, r1
    a1aa:	8c 0e       	add	r8, r28
    a1ac:	9d 1e       	adc	r9, r29
	MaxCountId=99;
	lcd_clear();_delay_ms(10);
	lcd_printf(1, 1, PSTR("1)1:   5)5:"));
	lcd_printf(2, 1, PSTR("2)2:   6)6:"));
	lcd_printf(3, 1, PSTR("3)3:   7)7:   #)Save"));
	lcd_printf(4, 1, PSTR("4)4:   8)8:   *)Exit"));
    a1ae:	1e 2d       	mov	r17, r14
    a1b0:	1c 19       	sub	r17, r12

	for(i=0;i< 8;i++){
	    sprintf_P(strLabel,PSTR("%.2d"),PPumpLabel[i]);
    a1b2:	00 d0       	rcall	.+0      	; 0xa1b4 <FMenuPumpLabel+0xa6>
    a1b4:	00 d0       	rcall	.+0      	; 0xa1b6 <FMenuPumpLabel+0xa8>
    a1b6:	00 d0       	rcall	.+0      	; 0xa1b8 <FMenuPumpLabel+0xaa>
    a1b8:	ed b7       	in	r30, 0x3d	; 61
    a1ba:	fe b7       	in	r31, 0x3e	; 62
    a1bc:	31 96       	adiw	r30, 0x01	; 1
    a1be:	ad b7       	in	r26, 0x3d	; 61
    a1c0:	be b7       	in	r27, 0x3e	; 62
    a1c2:	12 96       	adiw	r26, 0x02	; 2
    a1c4:	bc 92       	st	X, r11
    a1c6:	ae 92       	st	-X, r10
    a1c8:	11 97       	sbiw	r26, 0x01	; 1
    a1ca:	73 82       	std	Z+3, r7	; 0x03
    a1cc:	62 82       	std	Z+2, r6	; 0x02
    a1ce:	d7 01       	movw	r26, r14
    a1d0:	8d 91       	ld	r24, X+
    a1d2:	7d 01       	movw	r14, r26
    a1d4:	84 83       	std	Z+4, r24	; 0x04
    a1d6:	15 82       	std	Z+5, r1	; 0x05
    a1d8:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
		xPos=1+(i%4);
		yPos=5+(i/4)*8;
        lcd_print(xPos,yPos,strLabel);
    a1dc:	ed b7       	in	r30, 0x3d	; 61
    a1de:	fe b7       	in	r31, 0x3e	; 62
    a1e0:	36 96       	adiw	r30, 0x06	; 6
    a1e2:	0f b6       	in	r0, 0x3f	; 63
    a1e4:	f8 94       	cli
    a1e6:	fe bf       	out	0x3e, r31	; 62
    a1e8:	0f be       	out	0x3f, r0	; 63
    a1ea:	ed bf       	out	0x3d, r30	; 61
    a1ec:	61 2f       	mov	r22, r17
    a1ee:	66 95       	lsr	r22
    a1f0:	66 95       	lsr	r22
    a1f2:	66 0f       	add	r22, r22
    a1f4:	66 0f       	add	r22, r22
    a1f6:	66 0f       	add	r22, r22
    a1f8:	6b 5f       	subi	r22, 0xFB	; 251
    a1fa:	13 70       	andi	r17, 0x03	; 3
    a1fc:	81 2f       	mov	r24, r17
    a1fe:	8f 5f       	subi	r24, 0xFF	; 255
    a200:	a5 01       	movw	r20, r10
    a202:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
	lcd_printf(1, 1, PSTR("1)1:   5)5:"));
	lcd_printf(2, 1, PSTR("2)2:   6)6:"));
	lcd_printf(3, 1, PSTR("3)3:   7)7:   #)Save"));
	lcd_printf(4, 1, PSTR("4)4:   8)8:   *)Exit"));

	for(i=0;i< 8;i++){
    a206:	e8 14       	cp	r14, r8
    a208:	f9 04       	cpc	r15, r9
    a20a:	89 f6       	brne	.-94     	; 0xa1ae <FMenuPumpLabel+0xa0>
			eeprom_write_block((const void*) &PPumpLabel, (void*) &DefPumpLabel, 8);
			break;
		}
		if ((KeyChar>='1') && (KeyChar<= '8')){
		     i=(KeyChar-'1');
			if(PPumpLabel[i] == MaxCountId)
    a20c:	86 e0       	ldi	r24, 0x06	; 6
    a20e:	c8 2e       	mov	r12, r24
    a210:	d1 2c       	mov	r13, r1
    a212:	cc 0e       	add	r12, r28
    a214:	dd 1e       	adc	r13, r29
			   PPumpLabel[i] = 0;
			else
			   PPumpLabel[i]++;
            xPos=1+(i%4);
		    yPos=5+(i/4)*8;
			sprintf_P(strLabel,PSTR("%.2d"),PPumpLabel[i]);
    a216:	7e 01       	movw	r14, r28
    a218:	08 94       	sec
    a21a:	e1 1c       	adc	r14, r1
    a21c:	f1 1c       	adc	r15, r1
    a21e:	1f e3       	ldi	r17, 0x3F	; 63
    a220:	a1 2e       	mov	r10, r17
    a222:	1e e0       	ldi	r17, 0x0E	; 14
    a224:	b1 2e       	mov	r11, r17
		yPos=5+(i/4)*8;
        lcd_print(xPos,yPos,strLabel);
	}

	while(1){
		KeyPressed = _key_scan(1);
    a226:	81 e0       	ldi	r24, 0x01	; 1
    a228:	0e 94 6d a6 	call	0x14cda	; 0x14cda <_key_scan>
    a22c:	18 2f       	mov	r17, r24
		KeyChar    = _key_btn(KeyPressed);
    a22e:	0e 94 ce a5 	call	0x14b9c	; 0x14b9c <_key_btn>
		if(KeyPressed == _KEY_CANCEL)break;
    a232:	17 3e       	cpi	r17, 0xE7	; 231
    a234:	09 f4       	brne	.+2      	; 0xa238 <FMenuPumpLabel+0x12a>
    a236:	48 c0       	rjmp	.+144    	; 0xa2c8 <FMenuPumpLabel+0x1ba>
		else
		if(KeyPressed == _KEY_ENTER){
    a238:	17 3b       	cpi	r17, 0xB7	; 183
    a23a:	49 f4       	brne	.+18     	; 0xa24e <FMenuPumpLabel+0x140>
			eeprom_write_block((const void*) &PPumpLabel, (void*) &DefPumpLabel, 8);
    a23c:	ce 01       	movw	r24, r28
    a23e:	06 96       	adiw	r24, 0x06	; 6
    a240:	6e e4       	ldi	r22, 0x4E	; 78
    a242:	70 e0       	ldi	r23, 0x00	; 0
    a244:	48 e0       	ldi	r20, 0x08	; 8
    a246:	50 e0       	ldi	r21, 0x00	; 0
    a248:	0e 94 48 ad 	call	0x15a90	; 0x15a90 <__eewr_block_m128>
    a24c:	3d c0       	rjmp	.+122    	; 0xa2c8 <FMenuPumpLabel+0x1ba>
			break;
		}
		if ((KeyChar>='1') && (KeyChar<= '8')){
    a24e:	18 2f       	mov	r17, r24
    a250:	11 53       	subi	r17, 0x31	; 49
    a252:	18 30       	cpi	r17, 0x08	; 8
    a254:	40 f7       	brcc	.-48     	; 0xa226 <FMenuPumpLabel+0x118>
		     i=(KeyChar-'1');
			if(PPumpLabel[i] == MaxCountId)
    a256:	a1 2f       	mov	r26, r17
    a258:	b0 e0       	ldi	r27, 0x00	; 0
    a25a:	f6 01       	movw	r30, r12
    a25c:	ea 0f       	add	r30, r26
    a25e:	fb 1f       	adc	r31, r27
    a260:	90 81       	ld	r25, Z
    a262:	80 91 56 01 	lds	r24, 0x0156
    a266:	98 17       	cp	r25, r24
    a268:	11 f4       	brne	.+4      	; 0xa26e <FMenuPumpLabel+0x160>
			   PPumpLabel[i] = 0;
    a26a:	10 82       	st	Z, r1
    a26c:	02 c0       	rjmp	.+4      	; 0xa272 <FMenuPumpLabel+0x164>
			else
			   PPumpLabel[i]++;
    a26e:	9f 5f       	subi	r25, 0xFF	; 255
    a270:	90 83       	st	Z, r25
            xPos=1+(i%4);
		    yPos=5+(i/4)*8;
			sprintf_P(strLabel,PSTR("%.2d"),PPumpLabel[i]);
    a272:	00 d0       	rcall	.+0      	; 0xa274 <FMenuPumpLabel+0x166>
    a274:	00 d0       	rcall	.+0      	; 0xa276 <FMenuPumpLabel+0x168>
    a276:	00 d0       	rcall	.+0      	; 0xa278 <FMenuPumpLabel+0x16a>
    a278:	2d b7       	in	r18, 0x3d	; 61
    a27a:	3e b7       	in	r19, 0x3e	; 62
    a27c:	2f 5f       	subi	r18, 0xFF	; 255
    a27e:	3f 4f       	sbci	r19, 0xFF	; 255
    a280:	ed b7       	in	r30, 0x3d	; 61
    a282:	fe b7       	in	r31, 0x3e	; 62
    a284:	f2 82       	std	Z+2, r15	; 0x02
    a286:	e1 82       	std	Z+1, r14	; 0x01
    a288:	f9 01       	movw	r30, r18
    a28a:	b3 82       	std	Z+3, r11	; 0x03
    a28c:	a2 82       	std	Z+2, r10	; 0x02
    a28e:	ac 0d       	add	r26, r12
    a290:	bd 1d       	adc	r27, r13
    a292:	8c 91       	ld	r24, X
    a294:	84 83       	std	Z+4, r24	; 0x04
    a296:	15 82       	std	Z+5, r1	; 0x05
    a298:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
            lcd_print(xPos,yPos,strLabel);
    a29c:	8d b7       	in	r24, 0x3d	; 61
    a29e:	9e b7       	in	r25, 0x3e	; 62
    a2a0:	06 96       	adiw	r24, 0x06	; 6
    a2a2:	0f b6       	in	r0, 0x3f	; 63
    a2a4:	f8 94       	cli
    a2a6:	9e bf       	out	0x3e, r25	; 62
    a2a8:	0f be       	out	0x3f, r0	; 63
    a2aa:	8d bf       	out	0x3d, r24	; 61
    a2ac:	61 2f       	mov	r22, r17
    a2ae:	66 95       	lsr	r22
    a2b0:	66 95       	lsr	r22
    a2b2:	66 0f       	add	r22, r22
    a2b4:	66 0f       	add	r22, r22
    a2b6:	66 0f       	add	r22, r22
    a2b8:	6b 5f       	subi	r22, 0xFB	; 251
    a2ba:	13 70       	andi	r17, 0x03	; 3
    a2bc:	81 2f       	mov	r24, r17
    a2be:	8f 5f       	subi	r24, 0xFF	; 255
    a2c0:	a7 01       	movw	r20, r14
    a2c2:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
    a2c6:	af cf       	rjmp	.-162    	; 0xa226 <FMenuPumpLabel+0x118>
		}
	}
}
    a2c8:	2d 96       	adiw	r28, 0x0d	; 13
    a2ca:	0f b6       	in	r0, 0x3f	; 63
    a2cc:	f8 94       	cli
    a2ce:	de bf       	out	0x3e, r29	; 62
    a2d0:	0f be       	out	0x3f, r0	; 63
    a2d2:	cd bf       	out	0x3d, r28	; 61
    a2d4:	cf 91       	pop	r28
    a2d6:	df 91       	pop	r29
    a2d8:	1f 91       	pop	r17
    a2da:	ff 90       	pop	r15
    a2dc:	ef 90       	pop	r14
    a2de:	df 90       	pop	r13
    a2e0:	cf 90       	pop	r12
    a2e2:	bf 90       	pop	r11
    a2e4:	af 90       	pop	r10
    a2e6:	9f 90       	pop	r9
    a2e8:	8f 90       	pop	r8
    a2ea:	7f 90       	pop	r7
    a2ec:	6f 90       	pop	r6
    a2ee:	08 95       	ret

0000a2f0 <FSettingDec>:

	Result=MENU_DONE;
	return Result;
}

char FSettingDec(){
    a2f0:	cf 92       	push	r12
    a2f2:	df 92       	push	r13
    a2f4:	ef 92       	push	r14
    a2f6:	ff 92       	push	r15
    a2f8:	0f 93       	push	r16
    a2fa:	1f 93       	push	r17
    a2fc:	df 93       	push	r29
    a2fe:	cf 93       	push	r28
    a300:	cd b7       	in	r28, 0x3d	; 61
    a302:	de b7       	in	r29, 0x3e	; 62
    a304:	64 97       	sbiw	r28, 0x14	; 20
    a306:	0f b6       	in	r0, 0x3f	; 63
    a308:	f8 94       	cli
    a30a:	de bf       	out	0x3e, r29	; 62
    a30c:	0f be       	out	0x3f, r0	; 63
    a30e:	cd bf       	out	0x3d, r28	; 61
static char stSettingDecimal=sdInitDisplay;
     char PDecimalConfig[4],Addr,KeyChar,Result;
	 char lcdteks[20];

     Result=MENU_NONE;
	 switch(stSettingDecimal){
    a310:	80 91 1f 02 	lds	r24, 0x021F
    a314:	82 30       	cpi	r24, 0x02	; 2
    a316:	09 f4       	brne	.+2      	; 0xa31a <FSettingDec+0x2a>
    a318:	b3 c0       	rjmp	.+358    	; 0xa480 <FSettingDec+0x190>
    a31a:	83 30       	cpi	r24, 0x03	; 3
    a31c:	30 f4       	brcc	.+12     	; 0xa32a <FSettingDec+0x3a>
    a31e:	88 23       	and	r24, r24
    a320:	71 f0       	breq	.+28     	; 0xa33e <FSettingDec+0x4e>
    a322:	81 30       	cpi	r24, 0x01	; 1
    a324:	09 f0       	breq	.+2      	; 0xa328 <FSettingDec+0x38>
    a326:	83 c1       	rjmp	.+774    	; 0xa62e <FSettingDec+0x33e>
    a328:	89 c0       	rjmp	.+274    	; 0xa43c <FSettingDec+0x14c>
    a32a:	84 30       	cpi	r24, 0x04	; 4
    a32c:	09 f4       	brne	.+2      	; 0xa330 <FSettingDec+0x40>
    a32e:	77 c1       	rjmp	.+750    	; 0xa61e <FSettingDec+0x32e>
    a330:	84 30       	cpi	r24, 0x04	; 4
    a332:	08 f4       	brcc	.+2      	; 0xa336 <FSettingDec+0x46>
    a334:	48 c1       	rjmp	.+656    	; 0xa5c6 <FSettingDec+0x2d6>
    a336:	85 30       	cpi	r24, 0x05	; 5
    a338:	09 f0       	breq	.+2      	; 0xa33c <FSettingDec+0x4c>
    a33a:	79 c1       	rjmp	.+754    	; 0xa62e <FSettingDec+0x33e>
    a33c:	74 c1       	rjmp	.+744    	; 0xa626 <FSettingDec+0x336>
	 case sdInitDisplay:
	      lcd_clear();         //"12345678901234567890
    a33e:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
		  PDecimalConfig[0]=eeprom_read_byte(&DefDecimalPrice);
    a342:	89 e3       	ldi	r24, 0x39	; 57
    a344:	90 e0       	ldi	r25, 0x00	; 0
    a346:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
    a34a:	f8 2e       	mov	r15, r24
		  PDecimalConfig[1]=eeprom_read_byte(&DefDecimalVolume);
    a34c:	8a e3       	ldi	r24, 0x3A	; 58
    a34e:	90 e0       	ldi	r25, 0x00	; 0
    a350:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
    a354:	e8 2e       	mov	r14, r24
		  PDecimalConfig[2]=eeprom_read_byte(&DefDecimalMoney);
    a356:	8b e3       	ldi	r24, 0x3B	; 59
    a358:	90 e0       	ldi	r25, 0x00	; 0
    a35a:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
    a35e:	d8 2e       	mov	r13, r24


		  sprintf_P(lcdteks,PSTR("1.Price :%d"),PDecimalConfig[0]);
    a360:	00 d0       	rcall	.+0      	; 0xa362 <FSettingDec+0x72>
    a362:	00 d0       	rcall	.+0      	; 0xa364 <FSettingDec+0x74>
    a364:	00 d0       	rcall	.+0      	; 0xa366 <FSettingDec+0x76>
    a366:	ed b7       	in	r30, 0x3d	; 61
    a368:	fe b7       	in	r31, 0x3e	; 62
    a36a:	31 96       	adiw	r30, 0x01	; 1
    a36c:	8e 01       	movw	r16, r28
    a36e:	0f 5f       	subi	r16, 0xFF	; 255
    a370:	1f 4f       	sbci	r17, 0xFF	; 255
    a372:	ad b7       	in	r26, 0x3d	; 61
    a374:	be b7       	in	r27, 0x3e	; 62
    a376:	12 96       	adiw	r26, 0x02	; 2
    a378:	1c 93       	st	X, r17
    a37a:	0e 93       	st	-X, r16
    a37c:	11 97       	sbiw	r26, 0x01	; 1
    a37e:	84 ef       	ldi	r24, 0xF4	; 244
    a380:	92 e1       	ldi	r25, 0x12	; 18
    a382:	93 83       	std	Z+3, r25	; 0x03
    a384:	82 83       	std	Z+2, r24	; 0x02
    a386:	f4 82       	std	Z+4, r15	; 0x04
    a388:	15 82       	std	Z+5, r1	; 0x05
    a38a:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
		  lcd_print(1,1,lcdteks);
    a38e:	8d b7       	in	r24, 0x3d	; 61
    a390:	9e b7       	in	r25, 0x3e	; 62
    a392:	06 96       	adiw	r24, 0x06	; 6
    a394:	0f b6       	in	r0, 0x3f	; 63
    a396:	f8 94       	cli
    a398:	9e bf       	out	0x3e, r25	; 62
    a39a:	0f be       	out	0x3f, r0	; 63
    a39c:	8d bf       	out	0x3d, r24	; 61
    a39e:	81 e0       	ldi	r24, 0x01	; 1
    a3a0:	61 e0       	ldi	r22, 0x01	; 1
    a3a2:	a8 01       	movw	r20, r16
    a3a4:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
		  sprintf_P(lcdteks,PSTR("2.Volume:%d"),PDecimalConfig[1]);
    a3a8:	00 d0       	rcall	.+0      	; 0xa3aa <FSettingDec+0xba>
    a3aa:	00 d0       	rcall	.+0      	; 0xa3ac <FSettingDec+0xbc>
    a3ac:	00 d0       	rcall	.+0      	; 0xa3ae <FSettingDec+0xbe>
    a3ae:	ed b7       	in	r30, 0x3d	; 61
    a3b0:	fe b7       	in	r31, 0x3e	; 62
    a3b2:	31 96       	adiw	r30, 0x01	; 1
    a3b4:	ad b7       	in	r26, 0x3d	; 61
    a3b6:	be b7       	in	r27, 0x3e	; 62
    a3b8:	12 96       	adiw	r26, 0x02	; 2
    a3ba:	1c 93       	st	X, r17
    a3bc:	0e 93       	st	-X, r16
    a3be:	11 97       	sbiw	r26, 0x01	; 1
    a3c0:	88 ee       	ldi	r24, 0xE8	; 232
    a3c2:	92 e1       	ldi	r25, 0x12	; 18
    a3c4:	93 83       	std	Z+3, r25	; 0x03
    a3c6:	82 83       	std	Z+2, r24	; 0x02
    a3c8:	e4 82       	std	Z+4, r14	; 0x04
    a3ca:	15 82       	std	Z+5, r1	; 0x05
    a3cc:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
		  lcd_print(2,1,lcdteks);
    a3d0:	8d b7       	in	r24, 0x3d	; 61
    a3d2:	9e b7       	in	r25, 0x3e	; 62
    a3d4:	06 96       	adiw	r24, 0x06	; 6
    a3d6:	0f b6       	in	r0, 0x3f	; 63
    a3d8:	f8 94       	cli
    a3da:	9e bf       	out	0x3e, r25	; 62
    a3dc:	0f be       	out	0x3f, r0	; 63
    a3de:	8d bf       	out	0x3d, r24	; 61
    a3e0:	82 e0       	ldi	r24, 0x02	; 2
    a3e2:	61 e0       	ldi	r22, 0x01	; 1
    a3e4:	a8 01       	movw	r20, r16
    a3e6:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
		  sprintf_P(lcdteks,PSTR("3.Money :%d"),PDecimalConfig[2]);
    a3ea:	00 d0       	rcall	.+0      	; 0xa3ec <FSettingDec+0xfc>
    a3ec:	00 d0       	rcall	.+0      	; 0xa3ee <FSettingDec+0xfe>
    a3ee:	00 d0       	rcall	.+0      	; 0xa3f0 <FSettingDec+0x100>
    a3f0:	ed b7       	in	r30, 0x3d	; 61
    a3f2:	fe b7       	in	r31, 0x3e	; 62
    a3f4:	31 96       	adiw	r30, 0x01	; 1
    a3f6:	ad b7       	in	r26, 0x3d	; 61
    a3f8:	be b7       	in	r27, 0x3e	; 62
    a3fa:	12 96       	adiw	r26, 0x02	; 2
    a3fc:	1c 93       	st	X, r17
    a3fe:	0e 93       	st	-X, r16
    a400:	11 97       	sbiw	r26, 0x01	; 1
    a402:	8c ed       	ldi	r24, 0xDC	; 220
    a404:	92 e1       	ldi	r25, 0x12	; 18
    a406:	93 83       	std	Z+3, r25	; 0x03
    a408:	82 83       	std	Z+2, r24	; 0x02
    a40a:	d4 82       	std	Z+4, r13	; 0x04
    a40c:	15 82       	std	Z+5, r1	; 0x05
    a40e:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
		  lcd_print(3,1,lcdteks);
    a412:	8d b7       	in	r24, 0x3d	; 61
    a414:	9e b7       	in	r25, 0x3e	; 62
    a416:	06 96       	adiw	r24, 0x06	; 6
    a418:	0f b6       	in	r0, 0x3f	; 63
    a41a:	f8 94       	cli
    a41c:	9e bf       	out	0x3e, r25	; 62
    a41e:	0f be       	out	0x3f, r0	; 63
    a420:	8d bf       	out	0x3d, r24	; 61
    a422:	83 e0       	ldi	r24, 0x03	; 3
    a424:	61 e0       	ldi	r22, 0x01	; 1
    a426:	a8 01       	movw	r20, r16
    a428:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
		  lcd_printf(4,1,PSTR("[*]Back  [#]Next"));		  
    a42c:	84 e0       	ldi	r24, 0x04	; 4
    a42e:	61 e0       	ldi	r22, 0x01	; 1
    a430:	4b ec       	ldi	r20, 0xCB	; 203
    a432:	52 e1       	ldi	r21, 0x12	; 18
    a434:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  stSettingDecimal=sdSelectKey1;
    a438:	81 e0       	ldi	r24, 0x01	; 1
    a43a:	f2 c0       	rjmp	.+484    	; 0xa620 <FSettingDec+0x330>
		  break;
     case sdSelectKey1:
          KeyChar=_key_btn(_key_scan(1));
    a43c:	81 e0       	ldi	r24, 0x01	; 1
    a43e:	0e 94 6d a6 	call	0x14cda	; 0x14cda <_key_scan>
    a442:	0e 94 ce a5 	call	0x14b9c	; 0x14b9c <_key_btn>
		  if ((KeyChar>='1')&&(KeyChar<='3')){
    a446:	08 2f       	mov	r16, r24
    a448:	01 53       	subi	r16, 0x31	; 49
    a44a:	03 30       	cpi	r16, 0x03	; 3
    a44c:	88 f4       	brcc	.+34     	; 0xa470 <FSettingDec+0x180>
		      Addr=KeyChar-'1';
		  	  PDecimalConfig[Addr]=eeprom_read_byte(&DefDecimalPrice+Addr);
    a44e:	10 e0       	ldi	r17, 0x00	; 0
    a450:	07 5c       	subi	r16, 0xC7	; 199
    a452:	1f 4f       	sbci	r17, 0xFF	; 255
    a454:	c8 01       	movw	r24, r16
    a456:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
			  PDecimalConfig[Addr]=(PDecimalConfig[Addr]+1)%3;
			  eeprom_write_byte(&DefDecimalPrice+Addr,PDecimalConfig[Addr]);
    a45a:	90 e0       	ldi	r25, 0x00	; 0
    a45c:	01 96       	adiw	r24, 0x01	; 1
    a45e:	63 e0       	ldi	r22, 0x03	; 3
    a460:	70 e0       	ldi	r23, 0x00	; 0
    a462:	0e 94 8e aa 	call	0x1551c	; 0x1551c <__divmodhi4>
    a466:	68 2f       	mov	r22, r24
    a468:	c8 01       	movw	r24, r16
    a46a:	0e 94 52 ad 	call	0x15aa4	; 0x15aa4 <__eewr_byte_m128>
    a46e:	d4 c0       	rjmp	.+424    	; 0xa618 <FSettingDec+0x328>
              stSettingDecimal=sdInitDisplay;
		  }else if (KeyChar=='*') stSettingDecimal=sdExitSettingDecimal;
    a470:	8a 32       	cpi	r24, 0x2A	; 42
    a472:	11 f4       	brne	.+4      	; 0xa478 <FSettingDec+0x188>
    a474:	85 e0       	ldi	r24, 0x05	; 5
    a476:	d4 c0       	rjmp	.+424    	; 0xa620 <FSettingDec+0x330>
		  else if (KeyChar=='#') stSettingDecimal=sdInitDisplay2;
    a478:	83 32       	cpi	r24, 0x23	; 35
    a47a:	09 f0       	breq	.+2      	; 0xa47e <FSettingDec+0x18e>
    a47c:	d8 c0       	rjmp	.+432    	; 0xa62e <FSettingDec+0x33e>
    a47e:	cf c0       	rjmp	.+414    	; 0xa61e <FSettingDec+0x32e>
          break;
     case sdInitDisplay2:
		  PDecimalConfig[0]=eeprom_read_byte(&DefDecimalTotalVolume);
    a480:	8d e3       	ldi	r24, 0x3D	; 61
    a482:	90 e0       	ldi	r25, 0x00	; 0
    a484:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
    a488:	f8 2e       	mov	r15, r24
		  PDecimalConfig[1]=eeprom_read_byte(&DefDecimalTotalMoney);
    a48a:	8e e3       	ldi	r24, 0x3E	; 62
    a48c:	90 e0       	ldi	r25, 0x00	; 0
    a48e:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
    a492:	e8 2e       	mov	r14, r24
		  PDecimalConfig[2]=eeprom_read_byte(&DefDecimalMark);
    a494:	8f e3       	ldi	r24, 0x3F	; 63
    a496:	90 e0       	ldi	r25, 0x00	; 0
    a498:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
    a49c:	d8 2e       	mov	r13, r24
		  PDecimalConfig[3]=eeprom_read_byte(&DefCurrencyMark);
    a49e:	80 e4       	ldi	r24, 0x40	; 64
    a4a0:	90 e0       	ldi	r25, 0x00	; 0
    a4a2:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
    a4a6:	c8 2e       	mov	r12, r24
		  sprintf_P(lcdteks,PSTR("1.T.Volume:%d "),PDecimalConfig[0]);
    a4a8:	00 d0       	rcall	.+0      	; 0xa4aa <FSettingDec+0x1ba>
    a4aa:	00 d0       	rcall	.+0      	; 0xa4ac <FSettingDec+0x1bc>
    a4ac:	00 d0       	rcall	.+0      	; 0xa4ae <FSettingDec+0x1be>
    a4ae:	ed b7       	in	r30, 0x3d	; 61
    a4b0:	fe b7       	in	r31, 0x3e	; 62
    a4b2:	31 96       	adiw	r30, 0x01	; 1
    a4b4:	8e 01       	movw	r16, r28
    a4b6:	0f 5f       	subi	r16, 0xFF	; 255
    a4b8:	1f 4f       	sbci	r17, 0xFF	; 255
    a4ba:	ad b7       	in	r26, 0x3d	; 61
    a4bc:	be b7       	in	r27, 0x3e	; 62
    a4be:	12 96       	adiw	r26, 0x02	; 2
    a4c0:	1c 93       	st	X, r17
    a4c2:	0e 93       	st	-X, r16
    a4c4:	11 97       	sbiw	r26, 0x01	; 1
    a4c6:	8c eb       	ldi	r24, 0xBC	; 188
    a4c8:	92 e1       	ldi	r25, 0x12	; 18
    a4ca:	93 83       	std	Z+3, r25	; 0x03
    a4cc:	82 83       	std	Z+2, r24	; 0x02
    a4ce:	f4 82       	std	Z+4, r15	; 0x04
    a4d0:	15 82       	std	Z+5, r1	; 0x05
    a4d2:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
		  lcd_print(1,1,lcdteks);
    a4d6:	8d b7       	in	r24, 0x3d	; 61
    a4d8:	9e b7       	in	r25, 0x3e	; 62
    a4da:	06 96       	adiw	r24, 0x06	; 6
    a4dc:	0f b6       	in	r0, 0x3f	; 63
    a4de:	f8 94       	cli
    a4e0:	9e bf       	out	0x3e, r25	; 62
    a4e2:	0f be       	out	0x3f, r0	; 63
    a4e4:	8d bf       	out	0x3d, r24	; 61
    a4e6:	81 e0       	ldi	r24, 0x01	; 1
    a4e8:	61 e0       	ldi	r22, 0x01	; 1
    a4ea:	a8 01       	movw	r20, r16
    a4ec:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
		  sprintf_P(lcdteks,PSTR("2.T.Money :%d "),PDecimalConfig[1]);
    a4f0:	00 d0       	rcall	.+0      	; 0xa4f2 <FSettingDec+0x202>
    a4f2:	00 d0       	rcall	.+0      	; 0xa4f4 <FSettingDec+0x204>
    a4f4:	00 d0       	rcall	.+0      	; 0xa4f6 <FSettingDec+0x206>
    a4f6:	ed b7       	in	r30, 0x3d	; 61
    a4f8:	fe b7       	in	r31, 0x3e	; 62
    a4fa:	31 96       	adiw	r30, 0x01	; 1
    a4fc:	ad b7       	in	r26, 0x3d	; 61
    a4fe:	be b7       	in	r27, 0x3e	; 62
    a500:	12 96       	adiw	r26, 0x02	; 2
    a502:	1c 93       	st	X, r17
    a504:	0e 93       	st	-X, r16
    a506:	11 97       	sbiw	r26, 0x01	; 1
    a508:	8d ea       	ldi	r24, 0xAD	; 173
    a50a:	92 e1       	ldi	r25, 0x12	; 18
    a50c:	93 83       	std	Z+3, r25	; 0x03
    a50e:	82 83       	std	Z+2, r24	; 0x02
    a510:	e4 82       	std	Z+4, r14	; 0x04
    a512:	15 82       	std	Z+5, r1	; 0x05
    a514:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
		  lcd_print(2,1,lcdteks);
    a518:	8d b7       	in	r24, 0x3d	; 61
    a51a:	9e b7       	in	r25, 0x3e	; 62
    a51c:	06 96       	adiw	r24, 0x06	; 6
    a51e:	0f b6       	in	r0, 0x3f	; 63
    a520:	f8 94       	cli
    a522:	9e bf       	out	0x3e, r25	; 62
    a524:	0f be       	out	0x3f, r0	; 63
    a526:	8d bf       	out	0x3d, r24	; 61
    a528:	82 e0       	ldi	r24, 0x02	; 2
    a52a:	61 e0       	ldi	r22, 0x01	; 1
    a52c:	a8 01       	movw	r20, r16
    a52e:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
		  sprintf_P(lcdteks,PSTR("3.Decimal :%c "),PDecimalConfig[2]);
    a532:	00 d0       	rcall	.+0      	; 0xa534 <FSettingDec+0x244>
    a534:	00 d0       	rcall	.+0      	; 0xa536 <FSettingDec+0x246>
    a536:	00 d0       	rcall	.+0      	; 0xa538 <FSettingDec+0x248>
    a538:	ed b7       	in	r30, 0x3d	; 61
    a53a:	fe b7       	in	r31, 0x3e	; 62
    a53c:	31 96       	adiw	r30, 0x01	; 1
    a53e:	ad b7       	in	r26, 0x3d	; 61
    a540:	be b7       	in	r27, 0x3e	; 62
    a542:	12 96       	adiw	r26, 0x02	; 2
    a544:	1c 93       	st	X, r17
    a546:	0e 93       	st	-X, r16
    a548:	11 97       	sbiw	r26, 0x01	; 1
    a54a:	8e e9       	ldi	r24, 0x9E	; 158
    a54c:	92 e1       	ldi	r25, 0x12	; 18
    a54e:	93 83       	std	Z+3, r25	; 0x03
    a550:	82 83       	std	Z+2, r24	; 0x02
    a552:	d4 82       	std	Z+4, r13	; 0x04
    a554:	15 82       	std	Z+5, r1	; 0x05
    a556:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
		  lcd_print(3,1,lcdteks);
    a55a:	8d b7       	in	r24, 0x3d	; 61
    a55c:	9e b7       	in	r25, 0x3e	; 62
    a55e:	06 96       	adiw	r24, 0x06	; 6
    a560:	0f b6       	in	r0, 0x3f	; 63
    a562:	f8 94       	cli
    a564:	9e bf       	out	0x3e, r25	; 62
    a566:	0f be       	out	0x3f, r0	; 63
    a568:	8d bf       	out	0x3d, r24	; 61
    a56a:	83 e0       	ldi	r24, 0x03	; 3
    a56c:	61 e0       	ldi	r22, 0x01	; 1
    a56e:	a8 01       	movw	r20, r16
    a570:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
		  sprintf_P(lcdteks,PSTR("4.Sparator:%c "),PDecimalConfig[3]);
    a574:	00 d0       	rcall	.+0      	; 0xa576 <FSettingDec+0x286>
    a576:	00 d0       	rcall	.+0      	; 0xa578 <FSettingDec+0x288>
    a578:	00 d0       	rcall	.+0      	; 0xa57a <FSettingDec+0x28a>
    a57a:	ed b7       	in	r30, 0x3d	; 61
    a57c:	fe b7       	in	r31, 0x3e	; 62
    a57e:	31 96       	adiw	r30, 0x01	; 1
    a580:	ad b7       	in	r26, 0x3d	; 61
    a582:	be b7       	in	r27, 0x3e	; 62
    a584:	12 96       	adiw	r26, 0x02	; 2
    a586:	1c 93       	st	X, r17
    a588:	0e 93       	st	-X, r16
    a58a:	11 97       	sbiw	r26, 0x01	; 1
    a58c:	8f e8       	ldi	r24, 0x8F	; 143
    a58e:	92 e1       	ldi	r25, 0x12	; 18
    a590:	93 83       	std	Z+3, r25	; 0x03
    a592:	82 83       	std	Z+2, r24	; 0x02
    a594:	c4 82       	std	Z+4, r12	; 0x04
    a596:	15 82       	std	Z+5, r1	; 0x05
    a598:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
		  lcd_print(4,1,lcdteks);
    a59c:	8d b7       	in	r24, 0x3d	; 61
    a59e:	9e b7       	in	r25, 0x3e	; 62
    a5a0:	06 96       	adiw	r24, 0x06	; 6
    a5a2:	0f b6       	in	r0, 0x3f	; 63
    a5a4:	f8 94       	cli
    a5a6:	9e bf       	out	0x3e, r25	; 62
    a5a8:	0f be       	out	0x3f, r0	; 63
    a5aa:	8d bf       	out	0x3d, r24	; 61
    a5ac:	84 e0       	ldi	r24, 0x04	; 4
    a5ae:	61 e0       	ldi	r22, 0x01	; 1
    a5b0:	a8 01       	movw	r20, r16
    a5b2:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
		  lcd_printf(4,14,PSTR("*)Back"));
    a5b6:	84 e0       	ldi	r24, 0x04	; 4
    a5b8:	6e e0       	ldi	r22, 0x0E	; 14
    a5ba:	48 e8       	ldi	r20, 0x88	; 136
    a5bc:	52 e1       	ldi	r21, 0x12	; 18
    a5be:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
	      stSettingDecimal=sdSelectKey2;
    a5c2:	83 e0       	ldi	r24, 0x03	; 3
    a5c4:	2d c0       	rjmp	.+90     	; 0xa620 <FSettingDec+0x330>
	      break;
     case sdSelectKey2:
          KeyChar=_key_btn(_key_scan(1));
    a5c6:	81 e0       	ldi	r24, 0x01	; 1
    a5c8:	0e 94 6d a6 	call	0x14cda	; 0x14cda <_key_scan>
    a5cc:	0e 94 ce a5 	call	0x14b9c	; 0x14b9c <_key_btn>
    a5d0:	98 2f       	mov	r25, r24
		  if ((KeyChar>='1')&&(KeyChar<='2')){
    a5d2:	08 2f       	mov	r16, r24
    a5d4:	01 53       	subi	r16, 0x31	; 49
    a5d6:	02 30       	cpi	r16, 0x02	; 2
    a5d8:	68 f4       	brcc	.+26     	; 0xa5f4 <FSettingDec+0x304>
		      Addr=KeyChar-'1';
		  	  PDecimalConfig[Addr]=eeprom_read_byte(&DefDecimalTotalVolume+Addr);
    a5da:	10 e0       	ldi	r17, 0x00	; 0
    a5dc:	03 5c       	subi	r16, 0xC3	; 195
    a5de:	1f 4f       	sbci	r17, 0xFF	; 255
    a5e0:	c8 01       	movw	r24, r16
    a5e2:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
		      PDecimalConfig[Addr]=(PDecimalConfig[Addr]+1)%4;

			  eeprom_write_byte(&DefDecimalTotalVolume+Addr,PDecimalConfig[Addr]);
    a5e6:	68 2f       	mov	r22, r24
    a5e8:	70 e0       	ldi	r23, 0x00	; 0
    a5ea:	6f 5f       	subi	r22, 0xFF	; 255
    a5ec:	7f 4f       	sbci	r23, 0xFF	; 255
    a5ee:	63 70       	andi	r22, 0x03	; 3
    a5f0:	70 70       	andi	r23, 0x00	; 0
    a5f2:	0c c0       	rjmp	.+24     	; 0xa60c <FSettingDec+0x31c>
              stSettingDecimal=sdInitDisplay2;
		  }else if ((KeyChar>='3')&&(KeyChar<='4')){
    a5f4:	83 53       	subi	r24, 0x33	; 51
    a5f6:	82 30       	cpi	r24, 0x02	; 2
    a5f8:	68 f4       	brcc	.+26     	; 0xa614 <FSettingDec+0x324>
		      Addr=KeyChar-'1';
		  	  PDecimalConfig[Addr]=eeprom_read_byte(&DefDecimalTotalVolume+Addr);
    a5fa:	10 e0       	ldi	r17, 0x00	; 0
    a5fc:	03 5c       	subi	r16, 0xC3	; 195
    a5fe:	1f 4f       	sbci	r17, 0xFF	; 255
    a600:	c8 01       	movw	r24, r16
    a602:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
			  PDecimalConfig[Addr]=SelectMark(PDecimalConfig[Addr]);
    a606:	0e 94 4e 21 	call	0x429c	; 0x429c <SelectMark>
    a60a:	68 2f       	mov	r22, r24
			  eeprom_write_byte(&DefDecimalTotalVolume+Addr,PDecimalConfig[Addr]);
    a60c:	c8 01       	movw	r24, r16
    a60e:	0e 94 52 ad 	call	0x15aa4	; 0x15aa4 <__eewr_byte_m128>
    a612:	05 c0       	rjmp	.+10     	; 0xa61e <FSettingDec+0x32e>
              stSettingDecimal=sdInitDisplay2;
		  }else if (KeyChar=='*') stSettingDecimal=sdInitDisplay;
    a614:	9a 32       	cpi	r25, 0x2A	; 42
    a616:	59 f4       	brne	.+22     	; 0xa62e <FSettingDec+0x33e>
    a618:	10 92 1f 02 	sts	0x021F, r1
    a61c:	08 c0       	rjmp	.+16     	; 0xa62e <FSettingDec+0x33e>
		          stSettingDecimal=sdTestInput;
				  }*/
          break;
     case sdTestInput:
	      //if (TestUserInput()==MENU_DONE)
		  stSettingDecimal=sdInitDisplay2;
    a61e:	82 e0       	ldi	r24, 0x02	; 2
    a620:	80 93 1f 02 	sts	0x021F, r24
    a624:	04 c0       	rjmp	.+8      	; 0xa62e <FSettingDec+0x33e>
	      break;
	 case sdExitSettingDecimal:
          stSettingDecimal=sdInitDisplay;
    a626:	10 92 1f 02 	sts	0x021F, r1
    a62a:	81 e0       	ldi	r24, 0x01	; 1
    a62c:	01 c0       	rjmp	.+2      	; 0xa630 <FSettingDec+0x340>
    a62e:	80 e0       	ldi	r24, 0x00	; 0
		  Result=MENU_DONE;
	      break;
	 }
    return Result;
}
    a630:	64 96       	adiw	r28, 0x14	; 20
    a632:	0f b6       	in	r0, 0x3f	; 63
    a634:	f8 94       	cli
    a636:	de bf       	out	0x3e, r29	; 62
    a638:	0f be       	out	0x3f, r0	; 63
    a63a:	cd bf       	out	0x3d, r28	; 61
    a63c:	cf 91       	pop	r28
    a63e:	df 91       	pop	r29
    a640:	1f 91       	pop	r17
    a642:	0f 91       	pop	r16
    a644:	ff 90       	pop	r15
    a646:	ef 90       	pop	r14
    a648:	df 90       	pop	r13
    a64a:	cf 90       	pop	r12
    a64c:	08 95       	ret

0000a64e <FMenuShift>:
static char stMenuShift=msInitMenuShift;
     char SubMenu,KeyChar,KeyPressed;
     char Result;

Result=MENU_NONE;
     switch(stMenuShift){
    a64e:	80 91 4a 02 	lds	r24, 0x024A
    a652:	82 30       	cpi	r24, 0x02	; 2
    a654:	09 f4       	brne	.+2      	; 0xa658 <FMenuShift+0xa>
    a656:	48 c0       	rjmp	.+144    	; 0xa6e8 <FMenuShift+0x9a>
    a658:	83 30       	cpi	r24, 0x03	; 3
    a65a:	30 f4       	brcc	.+12     	; 0xa668 <FMenuShift+0x1a>
    a65c:	88 23       	and	r24, r24
    a65e:	69 f0       	breq	.+26     	; 0xa67a <FMenuShift+0x2c>
    a660:	81 30       	cpi	r24, 0x01	; 1
    a662:	09 f0       	breq	.+2      	; 0xa666 <FMenuShift+0x18>
    a664:	50 c0       	rjmp	.+160    	; 0xa706 <FMenuShift+0xb8>
    a666:	25 c0       	rjmp	.+74     	; 0xa6b2 <FMenuShift+0x64>
    a668:	84 30       	cpi	r24, 0x04	; 4
    a66a:	09 f4       	brne	.+2      	; 0xa66e <FMenuShift+0x20>
    a66c:	4c c0       	rjmp	.+152    	; 0xa706 <FMenuShift+0xb8>
    a66e:	84 30       	cpi	r24, 0x04	; 4
    a670:	e8 f1       	brcs	.+122    	; 0xa6ec <FMenuShift+0x9e>
    a672:	85 30       	cpi	r24, 0x05	; 5
    a674:	09 f0       	breq	.+2      	; 0xa678 <FMenuShift+0x2a>
    a676:	47 c0       	rjmp	.+142    	; 0xa706 <FMenuShift+0xb8>
    a678:	42 c0       	rjmp	.+132    	; 0xa6fe <FMenuShift+0xb0>
	 case msInitMenuShift:
	      lcd_clear();
    a67a:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
		  lcd_printf(1,1,PSTR("1.Close Shift"));
    a67e:	81 e0       	ldi	r24, 0x01	; 1
    a680:	61 e0       	ldi	r22, 0x01	; 1
    a682:	45 e6       	ldi	r20, 0x65	; 101
    a684:	57 e1       	ldi	r21, 0x17	; 23
    a686:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  lcd_printf(2,1,PSTR("2.Close Day  "));
    a68a:	82 e0       	ldi	r24, 0x02	; 2
    a68c:	61 e0       	ldi	r22, 0x01	; 1
    a68e:	47 e5       	ldi	r20, 0x57	; 87
    a690:	57 e1       	ldi	r21, 0x17	; 23
    a692:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  lcd_printf(3,1,PSTR("3.Lock Pump  "));
    a696:	83 e0       	ldi	r24, 0x03	; 3
    a698:	61 e0       	ldi	r22, 0x01	; 1
    a69a:	49 e4       	ldi	r20, 0x49	; 73
    a69c:	57 e1       	ldi	r21, 0x17	; 23
    a69e:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  lcd_printf(4,1,PSTR("*)Exit"));
    a6a2:	84 e0       	ldi	r24, 0x04	; 4
    a6a4:	61 e0       	ldi	r22, 0x01	; 1
    a6a6:	42 e4       	ldi	r20, 0x42	; 66
    a6a8:	57 e1       	ldi	r21, 0x17	; 23
    a6aa:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  stMenuShift=msSelectShift;
    a6ae:	81 e0       	ldi	r24, 0x01	; 1
    a6b0:	18 c0       	rjmp	.+48     	; 0xa6e2 <FMenuShift+0x94>
	      break;
     case msSelectShift:
          KeyPressed=_key_scan(1);
    a6b2:	81 e0       	ldi	r24, 0x01	; 1
    a6b4:	0e 94 6d a6 	call	0x14cda	; 0x14cda <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
    a6b8:	0e 94 ce a5 	call	0x14b9c	; 0x14b9c <_key_btn>
          switch(KeyChar){
    a6bc:	82 33       	cpi	r24, 0x32	; 50
    a6be:	61 f0       	breq	.+24     	; 0xa6d8 <FMenuShift+0x8a>
    a6c0:	83 33       	cpi	r24, 0x33	; 51
    a6c2:	28 f4       	brcc	.+10     	; 0xa6ce <FMenuShift+0x80>
    a6c4:	8a 32       	cpi	r24, 0x2A	; 42
    a6c6:	61 f0       	breq	.+24     	; 0xa6e0 <FMenuShift+0x92>
    a6c8:	81 33       	cpi	r24, 0x31	; 49
    a6ca:	e9 f4       	brne	.+58     	; 0xa706 <FMenuShift+0xb8>
    a6cc:	03 c0       	rjmp	.+6      	; 0xa6d4 <FMenuShift+0x86>
    a6ce:	83 33       	cpi	r24, 0x33	; 51
    a6d0:	d1 f4       	brne	.+52     	; 0xa706 <FMenuShift+0xb8>
    a6d2:	04 c0       	rjmp	.+8      	; 0xa6dc <FMenuShift+0x8e>
		  case '1':
		       SubMenu=MENU_NONE;
		       stMenuShift=msCloseShift;
    a6d4:	82 e0       	ldi	r24, 0x02	; 2
    a6d6:	05 c0       	rjmp	.+10     	; 0xa6e2 <FMenuShift+0x94>
		       break; 
		  case '2':
		       SubMenu=MENU_NONE;
		       stMenuShift=msCloseDay;
    a6d8:	83 e0       	ldi	r24, 0x03	; 3
    a6da:	03 c0       	rjmp	.+6      	; 0xa6e2 <FMenuShift+0x94>
		       break; 
		  case '3':
		       SubMenu=MENU_NONE;
		       stMenuShift=msLockPump;
    a6dc:	84 e0       	ldi	r24, 0x04	; 4
    a6de:	01 c0       	rjmp	.+2      	; 0xa6e2 <FMenuShift+0x94>
		       break; 
		  case '*':
		       stMenuShift=msExitShift;
    a6e0:	85 e0       	ldi	r24, 0x05	; 5
    a6e2:	80 93 4a 02 	sts	0x024A, r24
    a6e6:	09 c0       	rjmp	.+18     	; 0xa6fa <FMenuShift+0xac>
		       break; 			   		  
		  }
		  break;
     case msCloseShift:
	      SubMenu=FCloseShift(CONTINUE_SHIFT);
    a6e8:	82 e0       	ldi	r24, 0x02	; 2
    a6ea:	01 c0       	rjmp	.+2      	; 0xa6ee <FMenuShift+0xa0>
		  if (SubMenu==MENU_DONE)stMenuShift=msInitMenuShift;
		  //IsGenerateReport=True;		  
	      break;
     case msCloseDay:
	      SubMenu=FCloseShift(NEW_SHIFT);
    a6ec:	81 e0       	ldi	r24, 0x01	; 1
    a6ee:	0e 94 28 4a 	call	0x9450	; 0x9450 <FCloseShift>
		  if (SubMenu==MENU_DONE)stMenuShift=msInitMenuShift;
    a6f2:	81 30       	cpi	r24, 0x01	; 1
    a6f4:	41 f4       	brne	.+16     	; 0xa706 <FMenuShift+0xb8>
    a6f6:	10 92 4a 02 	sts	0x024A, r1
    a6fa:	80 e0       	ldi	r24, 0x00	; 0
    a6fc:	08 95       	ret
     case msLockPump:
	      SubMenu=FLockPump();
		  if (SubMenu==MENU_DONE)stMenuShift=msInitMenuShift;
	      break;
     case msExitShift:
          stMenuShift=msInitMenuShift;
    a6fe:	10 92 4a 02 	sts	0x024A, r1
    a702:	81 e0       	ldi	r24, 0x01	; 1
    a704:	08 95       	ret
    a706:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
	      break;	 
	 } 
   return Result;
}
    a708:	08 95       	ret

0000a70a <system_stop>:
	return Result;
}

void system_stop(){
	 char __key,__num;
	 lcd_printf(4,1,PSTR("Press any key..     "));
    a70a:	84 e0       	ldi	r24, 0x04	; 4
    a70c:	61 e0       	ldi	r22, 0x01	; 1
    a70e:	4b e9       	ldi	r20, 0x9B	; 155
    a710:	53 e2       	ldi	r21, 0x23	; 35
    a712:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    a716:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    a718:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    a71a:	85 e0       	ldi	r24, 0x05	; 5
    a71c:	80 93 bc 01 	sts	0x01BC, r24
void system_stop(){
	 char __key,__num;
	 lcd_printf(4,1,PSTR("Press any key..     "));
	 system_beep(5);
	 while(1){
		__key = _key_scan(1);
    a720:	81 e0       	ldi	r24, 0x01	; 1
    a722:	0e 94 6d a6 	call	0x14cda	; 0x14cda <_key_scan>
		__num = _key_btn(__key);
    a726:	0e 94 ce a5 	call	0x14b9c	; 0x14b9c <_key_btn>
		if ((__num>='0')&&(__num<='9')||(IsStandAloneDetected==True)) 
    a72a:	80 53       	subi	r24, 0x30	; 48
    a72c:	8a 30       	cpi	r24, 0x0A	; 10
    a72e:	20 f0       	brcs	.+8      	; 0xa738 <system_stop+0x2e>
    a730:	80 91 9c 01 	lds	r24, 0x019C
    a734:	81 30       	cpi	r24, 0x01	; 1
    a736:	a1 f7       	brne	.-24     	; 0xa720 <system_stop+0x16>
    a738:	08 95       	ret

0000a73a <systemForceType>:
	 }
}

char systemForceType(){
     char Result,KeyChar;
	 lcd_printf(4,1,PSTR("[1]Slave [2]Standalone"));
    a73a:	84 e0       	ldi	r24, 0x04	; 4
    a73c:	61 e0       	ldi	r22, 0x01	; 1
    a73e:	40 eb       	ldi	r20, 0xB0	; 176
    a740:	53 e2       	ldi	r21, 0x23	; 35
    a742:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    a746:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    a748:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    a74a:	81 e0       	ldi	r24, 0x01	; 1
    a74c:	80 93 bc 01 	sts	0x01BC, r24
    a750:	80 e5       	ldi	r24, 0x50	; 80
    a752:	93 ec       	ldi	r25, 0xC3	; 195
    a754:	01 97       	sbiw	r24, 0x01	; 1
    a756:	f1 f7       	brne	.-4      	; 0xa754 <systemForceType+0x1a>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    a758:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    a75a:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    a75c:	82 e0       	ldi	r24, 0x02	; 2
    a75e:	80 93 bc 01 	sts	0x01BC, r24
	 lcd_printf(4,1,PSTR("[1]Slave [2]Standalone"));
	 system_beep(1);
	 _delay_ms(200);
	 system_beep(2);
	 while(1){
	    KeyChar=_key_btn(_key_scan(1));
    a762:	81 e0       	ldi	r24, 0x01	; 1
    a764:	0e 94 6d a6 	call	0x14cda	; 0x14cda <_key_scan>
    a768:	0e 94 ce a5 	call	0x14b9c	; 0x14b9c <_key_btn>
    a76c:	98 2f       	mov	r25, r24
		if ((KeyChar=='1')||(KeyChar=='2')){
    a76e:	81 53       	subi	r24, 0x31	; 49
    a770:	82 30       	cpi	r24, 0x02	; 2
    a772:	b8 f7       	brcc	.-18     	; 0xa762 <systemForceType+0x28>
		    Result=KeyChar;
			break;
		}
	 }
	return Result;
}
    a774:	89 2f       	mov	r24, r25
    a776:	08 95       	ret

0000a778 <_menu_datetime>:
		}
	}
}


void _menu_datetime(void){
    a778:	8f 92       	push	r8
    a77a:	9f 92       	push	r9
    a77c:	af 92       	push	r10
    a77e:	bf 92       	push	r11
    a780:	cf 92       	push	r12
    a782:	df 92       	push	r13
    a784:	ef 92       	push	r14
    a786:	ff 92       	push	r15
    a788:	0f 93       	push	r16
    a78a:	1f 93       	push	r17
    a78c:	df 93       	push	r29
    a78e:	cf 93       	push	r28
    a790:	cd b7       	in	r28, 0x3d	; 61
    a792:	de b7       	in	r29, 0x3e	; 62
    a794:	c2 54       	subi	r28, 0x42	; 66
    a796:	d0 40       	sbci	r29, 0x00	; 0
    a798:	0f b6       	in	r0, 0x3f	; 63
    a79a:	f8 94       	cli
    a79c:	de bf       	out	0x3e, r29	; 62
    a79e:	0f be       	out	0x3f, r0	; 63
    a7a0:	cd bf       	out	0x3d, r28	; 61
	char	__key, __chr;
	char	__date[9];
	char	__time[9];
	char	__map[12][4] = {	{1,  8, 0, 3}, {1,  9, 0, 9}, {1, 11, 0, 1}, {1, 12, 0, 9},
								{1, 14, 0, 9}, {1, 15, 0, 9}, {2,  8, 0, 2}, {2,  9, 0, 9},
								{2, 11, 0, 5}, {2, 12, 0, 9}, {2, 14, 0, 5}, {2, 15, 0, 9}};
    a7a2:	de 01       	movw	r26, r28
    a7a4:	53 96       	adiw	r26, 0x13	; 19
    a7a6:	e6 e2       	ldi	r30, 0x26	; 38
    a7a8:	f1 e0       	ldi	r31, 0x01	; 1
    a7aa:	80 e3       	ldi	r24, 0x30	; 48
    a7ac:	01 90       	ld	r0, Z+
    a7ae:	0d 92       	st	X+, r0
    a7b0:	81 50       	subi	r24, 0x01	; 1
    a7b2:	e1 f7       	brne	.-8      	; 0xa7ac <_menu_datetime+0x34>

	_datetime(_DATETIME_READ, __date, __time);
    a7b4:	8e 01       	movw	r16, r28
    a7b6:	0f 5f       	subi	r16, 0xFF	; 255
    a7b8:	1f 4f       	sbci	r17, 0xFF	; 255
    a7ba:	b8 01       	movw	r22, r16
    a7bc:	ae 01       	movw	r20, r28
    a7be:	46 5f       	subi	r20, 0xF6	; 246
    a7c0:	5f 4f       	sbci	r21, 0xFF	; 255
    a7c2:	0e 94 ce a7 	call	0x14f9c	; 0x14f9c <_datetime>
    a7c6:	85 e1       	ldi	r24, 0x15	; 21
    a7c8:	88 2e       	mov	r8, r24
    a7ca:	91 2c       	mov	r9, r1
    a7cc:	8c 0e       	add	r8, r28
    a7ce:	9d 1e       	adc	r9, r29
    a7d0:	d4 01       	movw	r26, r8
    a7d2:	20 e0       	ldi	r18, 0x00	; 0
    a7d4:	30 e0       	ldi	r19, 0x00	; 0
    a7d6:	40 e0       	ldi	r20, 0x00	; 0
    a7d8:	50 e0       	ldi	r21, 0x00	; 0
	for(__i = 0, __ii = 0; __i < 6; __i++, __ii++){
		if(__i == 2 || __i == 4)
    a7da:	22 30       	cpi	r18, 0x02	; 2
    a7dc:	31 05       	cpc	r19, r1
    a7de:	19 f0       	breq	.+6      	; 0xa7e6 <_menu_datetime+0x6e>
    a7e0:	24 30       	cpi	r18, 0x04	; 4
    a7e2:	31 05       	cpc	r19, r1
    a7e4:	11 f4       	brne	.+4      	; 0xa7ea <_menu_datetime+0x72>
			__ii++;
    a7e6:	4f 5f       	subi	r20, 0xFF	; 255
    a7e8:	5f 4f       	sbci	r21, 0xFF	; 255
		__map[__i][2] = __date[__ii];
    a7ea:	f8 01       	movw	r30, r16
    a7ec:	e4 0f       	add	r30, r20
    a7ee:	f5 1f       	adc	r31, r21
    a7f0:	80 81       	ld	r24, Z
    a7f2:	8c 93       	st	X, r24
	char	__map[12][4] = {	{1,  8, 0, 3}, {1,  9, 0, 9}, {1, 11, 0, 1}, {1, 12, 0, 9},
								{1, 14, 0, 9}, {1, 15, 0, 9}, {2,  8, 0, 2}, {2,  9, 0, 9},
								{2, 11, 0, 5}, {2, 12, 0, 9}, {2, 14, 0, 5}, {2, 15, 0, 9}};

	_datetime(_DATETIME_READ, __date, __time);
	for(__i = 0, __ii = 0; __i < 6; __i++, __ii++){
    a7f4:	2f 5f       	subi	r18, 0xFF	; 255
    a7f6:	3f 4f       	sbci	r19, 0xFF	; 255
    a7f8:	14 96       	adiw	r26, 0x04	; 4
    a7fa:	26 30       	cpi	r18, 0x06	; 6
    a7fc:	31 05       	cpc	r19, r1
    a7fe:	19 f0       	breq	.+6      	; 0xa806 <_menu_datetime+0x8e>
    a800:	4f 5f       	subi	r20, 0xFF	; 255
    a802:	5f 4f       	sbci	r21, 0xFF	; 255
    a804:	ea cf       	rjmp	.-44     	; 0xa7da <_menu_datetime+0x62>
    a806:	0d e2       	ldi	r16, 0x2D	; 45
    a808:	a0 2e       	mov	r10, r16
    a80a:	b1 2c       	mov	r11, r1
    a80c:	ac 0e       	add	r10, r28
    a80e:	bd 1e       	adc	r11, r29
    a810:	d5 01       	movw	r26, r10
    a812:	40 e0       	ldi	r20, 0x00	; 0
    a814:	50 e0       	ldi	r21, 0x00	; 0
		__map[__i][2] = __date[__ii];
	}
	for(__i = 6, __ii = 0; __i < 12; __i++, __ii++){
		if(__i == 8 || __i == 10)
			__ii++;
		__map[__i][2] = __time[__ii];
    a816:	1a e0       	ldi	r17, 0x0A	; 10
    a818:	e1 2e       	mov	r14, r17
    a81a:	f1 2c       	mov	r15, r1
    a81c:	ec 0e       	add	r14, r28
    a81e:	fd 1e       	adc	r15, r29
		if(__i == 2 || __i == 4)
			__ii++;
		__map[__i][2] = __date[__ii];
	}
	for(__i = 6, __ii = 0; __i < 12; __i++, __ii++){
		if(__i == 8 || __i == 10)
    a820:	28 30       	cpi	r18, 0x08	; 8
    a822:	31 05       	cpc	r19, r1
    a824:	19 f0       	breq	.+6      	; 0xa82c <_menu_datetime+0xb4>
    a826:	2a 30       	cpi	r18, 0x0A	; 10
    a828:	31 05       	cpc	r19, r1
    a82a:	11 f4       	brne	.+4      	; 0xa830 <_menu_datetime+0xb8>
			__ii++;
    a82c:	4f 5f       	subi	r20, 0xFF	; 255
    a82e:	5f 4f       	sbci	r21, 0xFF	; 255
		__map[__i][2] = __time[__ii];
    a830:	f7 01       	movw	r30, r14
    a832:	e4 0f       	add	r30, r20
    a834:	f5 1f       	adc	r31, r21
    a836:	80 81       	ld	r24, Z
    a838:	8c 93       	st	X, r24
	for(__i = 0, __ii = 0; __i < 6; __i++, __ii++){
		if(__i == 2 || __i == 4)
			__ii++;
		__map[__i][2] = __date[__ii];
	}
	for(__i = 6, __ii = 0; __i < 12; __i++, __ii++){
    a83a:	2f 5f       	subi	r18, 0xFF	; 255
    a83c:	3f 4f       	sbci	r19, 0xFF	; 255
    a83e:	14 96       	adiw	r26, 0x04	; 4
    a840:	2c 30       	cpi	r18, 0x0C	; 12
    a842:	31 05       	cpc	r19, r1
    a844:	19 f0       	breq	.+6      	; 0xa84c <_menu_datetime+0xd4>
    a846:	4f 5f       	subi	r20, 0xFF	; 255
    a848:	5f 4f       	sbci	r21, 0xFF	; 255
    a84a:	ea cf       	rjmp	.-44     	; 0xa820 <_menu_datetime+0xa8>
		if(__i == 8 || __i == 10)
			__ii++;
		__map[__i][2] = __time[__ii];
	}

	lcd_clear();_delay_ms(10);
    a84c:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
    a850:	84 ec       	ldi	r24, 0xC4	; 196
    a852:	99 e0       	ldi	r25, 0x09	; 9
    a854:	01 97       	sbiw	r24, 0x01	; 1
    a856:	f1 f7       	brne	.-4      	; 0xa854 <_menu_datetime+0xdc>
	lcd_printf(1, 1, PSTR("DATE : "));
    a858:	81 e0       	ldi	r24, 0x01	; 1
    a85a:	61 e0       	ldi	r22, 0x01	; 1
    a85c:	49 e3       	ldi	r20, 0x39	; 57
    a85e:	5d e0       	ldi	r21, 0x0D	; 13
    a860:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
	lcd_printf(2, 1, PSTR("TIME : "));
    a864:	82 e0       	ldi	r24, 0x02	; 2
    a866:	61 e0       	ldi	r22, 0x01	; 1
    a868:	41 e3       	ldi	r20, 0x31	; 49
    a86a:	5d e0       	ldi	r21, 0x0D	; 13
    a86c:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
	lcd_print(1, 8, __date);
    a870:	81 e0       	ldi	r24, 0x01	; 1
    a872:	68 e0       	ldi	r22, 0x08	; 8
    a874:	8e 01       	movw	r16, r28
    a876:	0f 5f       	subi	r16, 0xFF	; 255
    a878:	1f 4f       	sbci	r17, 0xFF	; 255
    a87a:	a8 01       	movw	r20, r16
    a87c:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
	lcd_print(2, 8, __time);
    a880:	82 e0       	ldi	r24, 0x02	; 2
    a882:	68 e0       	ldi	r22, 0x08	; 8
    a884:	a7 01       	movw	r20, r14
    a886:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
	lcd_printf(4, 1, PSTR("*)Cancel      #)Save"));
    a88a:	84 e0       	ldi	r24, 0x04	; 4
    a88c:	61 e0       	ldi	r22, 0x01	; 1
    a88e:	4c e1       	ldi	r20, 0x1C	; 28
    a890:	5d e0       	ldi	r21, 0x0D	; 13
    a892:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>

	__i = 0;
	lcd_xy(__map[__i][0], __map[__i][1]);
    a896:	8b 89       	ldd	r24, Y+19	; 0x13
    a898:	6c 89       	ldd	r22, Y+20	; 0x14
    a89a:	0e 94 b3 a4 	call	0x14966	; 0x14966 <lcd_xy>
	CURSOR_SHOW;
    a89e:	8f e0       	ldi	r24, 0x0F	; 15
    a8a0:	0e 94 20 a4 	call	0x14840	; 0x14840 <lcd_command>
    a8a4:	ee 24       	eor	r14, r14
    a8a6:	ff 24       	eor	r15, r15
					else
						goto LEWAT;
				}
			}
CETAK:
			__map[__i][2] = __chr;
    a8a8:	68 01       	movw	r12, r16
	lcd_xy(__map[__i][0], __map[__i][1]);
	CURSOR_SHOW;

	while(1){
		
		__key = _key_scan(1);
    a8aa:	81 e0       	ldi	r24, 0x01	; 1
    a8ac:	0e 94 6d a6 	call	0x14cda	; 0x14cda <_key_scan>
    a8b0:	18 2f       	mov	r17, r24
		__chr = _key_btn(__key);
    a8b2:	0e 94 ce a5 	call	0x14b9c	; 0x14b9c <_key_btn>
    a8b6:	48 2f       	mov	r20, r24
		if(__chr >= 0x30 && __chr <= 0x39){
    a8b8:	80 53       	subi	r24, 0x30	; 48
    a8ba:	8a 30       	cpi	r24, 0x0A	; 10
    a8bc:	08 f0       	brcs	.+2      	; 0xa8c0 <_menu_datetime+0x148>
    a8be:	72 c0       	rjmp	.+228    	; 0xa9a4 <_menu_datetime+0x22c>
			if(__i == 0 || __i == 2 || __i == 6 || __i == 8 || __i == 10){
    a8c0:	e1 14       	cp	r14, r1
    a8c2:	f1 04       	cpc	r15, r1
    a8c4:	81 f0       	breq	.+32     	; 0xa8e6 <_menu_datetime+0x16e>
    a8c6:	82 e0       	ldi	r24, 0x02	; 2
    a8c8:	e8 16       	cp	r14, r24
    a8ca:	f1 04       	cpc	r15, r1
    a8cc:	61 f0       	breq	.+24     	; 0xa8e6 <_menu_datetime+0x16e>
    a8ce:	96 e0       	ldi	r25, 0x06	; 6
    a8d0:	e9 16       	cp	r14, r25
    a8d2:	f1 04       	cpc	r15, r1
    a8d4:	41 f0       	breq	.+16     	; 0xa8e6 <_menu_datetime+0x16e>
    a8d6:	a8 e0       	ldi	r26, 0x08	; 8
    a8d8:	ea 16       	cp	r14, r26
    a8da:	f1 04       	cpc	r15, r1
    a8dc:	21 f0       	breq	.+8      	; 0xa8e6 <_menu_datetime+0x16e>
    a8de:	ba e0       	ldi	r27, 0x0A	; 10
    a8e0:	eb 16       	cp	r14, r27
    a8e2:	f1 04       	cpc	r15, r1
    a8e4:	81 f4       	brne	.+32     	; 0xa906 <_menu_datetime+0x18e>
				if((__chr - 0x30) <= __map[__i][3])
    a8e6:	84 2f       	mov	r24, r20
    a8e8:	90 e0       	ldi	r25, 0x00	; 0
    a8ea:	c0 97       	sbiw	r24, 0x30	; 48
    a8ec:	f7 01       	movw	r30, r14
    a8ee:	ee 0f       	add	r30, r30
    a8f0:	ff 1f       	adc	r31, r31
    a8f2:	ee 0f       	add	r30, r30
    a8f4:	ff 1f       	adc	r31, r31
    a8f6:	ec 0d       	add	r30, r12
    a8f8:	fd 1d       	adc	r31, r13
    a8fa:	25 89       	ldd	r18, Z+21	; 0x15
    a8fc:	30 e0       	ldi	r19, 0x00	; 0
    a8fe:	28 17       	cp	r18, r24
    a900:	39 07       	cpc	r19, r25
    a902:	84 f5       	brge	.+96     	; 0xa964 <_menu_datetime+0x1ec>
    a904:	4f c0       	rjmp	.+158    	; 0xa9a4 <_menu_datetime+0x22c>
					goto CETAK;
				else
					goto LEWAT;
			}
			if(__i == 1){
    a906:	81 e0       	ldi	r24, 0x01	; 1
    a908:	e8 16       	cp	r14, r24
    a90a:	f1 04       	cpc	r15, r1
    a90c:	61 f4       	brne	.+24     	; 0xa926 <_menu_datetime+0x1ae>
				if((__map[0][2] - 0x30) < __map[0][3])
    a90e:	2d 89       	ldd	r18, Y+21	; 0x15
    a910:	30 e0       	ldi	r19, 0x00	; 0
    a912:	2f 52       	subi	r18, 0x2F	; 47
    a914:	30 40       	sbci	r19, 0x00	; 0
    a916:	8e 89       	ldd	r24, Y+22	; 0x16
    a918:	90 e0       	ldi	r25, 0x00	; 0
    a91a:	82 17       	cp	r24, r18
    a91c:	93 07       	cpc	r25, r19
    a91e:	14 f5       	brge	.+68     	; 0xa964 <_menu_datetime+0x1ec>
					goto CETAK;
				if((__map[0][2] - 0x30) >= __map[0][3]){
					if(__chr < 0x32)
    a920:	42 33       	cpi	r20, 0x32	; 50
    a922:	00 f1       	brcs	.+64     	; 0xa964 <_menu_datetime+0x1ec>
    a924:	3f c0       	rjmp	.+126    	; 0xa9a4 <_menu_datetime+0x22c>
						goto CETAK;
					else
						goto LEWAT;
				}
			}
			if(__i == 3){
    a926:	93 e0       	ldi	r25, 0x03	; 3
    a928:	e9 16       	cp	r14, r25
    a92a:	f1 04       	cpc	r15, r1
    a92c:	61 f4       	brne	.+24     	; 0xa946 <_menu_datetime+0x1ce>
				if((__map[2][2] - 0x30) < __map[2][3])
    a92e:	2d 8d       	ldd	r18, Y+29	; 0x1d
    a930:	30 e0       	ldi	r19, 0x00	; 0
    a932:	2f 52       	subi	r18, 0x2F	; 47
    a934:	30 40       	sbci	r19, 0x00	; 0
    a936:	8e 8d       	ldd	r24, Y+30	; 0x1e
    a938:	90 e0       	ldi	r25, 0x00	; 0
    a93a:	82 17       	cp	r24, r18
    a93c:	93 07       	cpc	r25, r19
    a93e:	94 f4       	brge	.+36     	; 0xa964 <_menu_datetime+0x1ec>
					goto CETAK;
				if((__map[2][2] - 0x30) >= __map[2][3]){
					if(__chr < 0x33)
    a940:	43 33       	cpi	r20, 0x33	; 51
    a942:	80 f0       	brcs	.+32     	; 0xa964 <_menu_datetime+0x1ec>
    a944:	2f c0       	rjmp	.+94     	; 0xa9a4 <_menu_datetime+0x22c>
						goto CETAK;
					else
						goto LEWAT;
				}
			}
			if(__i == 7){
    a946:	a7 e0       	ldi	r26, 0x07	; 7
    a948:	ea 16       	cp	r14, r26
    a94a:	f1 04       	cpc	r15, r1
    a94c:	59 f4       	brne	.+22     	; 0xa964 <_menu_datetime+0x1ec>
				if((__map[6][2] - 0x30) < __map[6][3])
    a94e:	2d a5       	ldd	r18, Y+45	; 0x2d
    a950:	30 e0       	ldi	r19, 0x00	; 0
    a952:	2f 52       	subi	r18, 0x2F	; 47
    a954:	30 40       	sbci	r19, 0x00	; 0
    a956:	8e a5       	ldd	r24, Y+46	; 0x2e
    a958:	90 e0       	ldi	r25, 0x00	; 0
    a95a:	82 17       	cp	r24, r18
    a95c:	93 07       	cpc	r25, r19
    a95e:	14 f4       	brge	.+4      	; 0xa964 <_menu_datetime+0x1ec>
					goto CETAK;
				if((__map[6][2] - 0x30) >= __map[6][3]){
					if(__chr < 0x34)
    a960:	44 33       	cpi	r20, 0x34	; 52
    a962:	00 f5       	brcc	.+64     	; 0xa9a4 <_menu_datetime+0x22c>
					else
						goto LEWAT;
				}
			}
CETAK:
			__map[__i][2] = __chr;
    a964:	f7 01       	movw	r30, r14
    a966:	ee 0f       	add	r30, r30
    a968:	ff 1f       	adc	r31, r31
    a96a:	ee 0f       	add	r30, r30
    a96c:	ff 1f       	adc	r31, r31
    a96e:	ec 0d       	add	r30, r12
    a970:	fd 1d       	adc	r31, r13
    a972:	44 8b       	std	Z+20, r20	; 0x14
			_lcd(__chr);
    a974:	84 2f       	mov	r24, r20
    a976:	0e 94 8d a4 	call	0x1491a	; 0x1491a <_lcd>
			__i++;
    a97a:	08 94       	sec
    a97c:	e1 1c       	adc	r14, r1
    a97e:	f1 1c       	adc	r15, r1
    a980:	bc e0       	ldi	r27, 0x0C	; 12
    a982:	eb 16       	cp	r14, r27
    a984:	f1 04       	cpc	r15, r1
    a986:	1c f0       	brlt	.+6      	; 0xa98e <_menu_datetime+0x216>
    a988:	7b e0       	ldi	r23, 0x0B	; 11
    a98a:	e7 2e       	mov	r14, r23
    a98c:	f1 2c       	mov	r15, r1
			if(__i > 11)
				__i = 11;
			lcd_xy(__map[__i][0], __map[__i][1]);
    a98e:	f7 01       	movw	r30, r14
    a990:	ee 0f       	add	r30, r30
    a992:	ff 1f       	adc	r31, r31
    a994:	ee 0f       	add	r30, r30
    a996:	ff 1f       	adc	r31, r31
    a998:	ec 0d       	add	r30, r12
    a99a:	fd 1d       	adc	r31, r13
    a99c:	82 89       	ldd	r24, Z+18	; 0x12
    a99e:	63 89       	ldd	r22, Z+19	; 0x13
    a9a0:	0e 94 b3 a4 	call	0x14966	; 0x14966 <lcd_xy>
LEWAT:		;
		}
		if(__key == _KEY_SHIFT){
    a9a4:	1b 37       	cpi	r17, 0x7B	; 123
    a9a6:	59 f4       	brne	.+22     	; 0xa9be <_menu_datetime+0x246>
			__i++;
    a9a8:	08 94       	sec
    a9aa:	e1 1c       	adc	r14, r1
    a9ac:	f1 1c       	adc	r15, r1
    a9ae:	8c e0       	ldi	r24, 0x0C	; 12
    a9b0:	e8 16       	cp	r14, r24
    a9b2:	f1 04       	cpc	r15, r1
    a9b4:	6c f0       	brlt	.+26     	; 0xa9d0 <_menu_datetime+0x258>
    a9b6:	5b e0       	ldi	r21, 0x0B	; 11
    a9b8:	e5 2e       	mov	r14, r21
    a9ba:	f1 2c       	mov	r15, r1
    a9bc:	09 c0       	rjmp	.+18     	; 0xa9d0 <_menu_datetime+0x258>
			if(__i > 11)
				__i = 11;
			lcd_xy(__map[__i][0], __map[__i][1]);
		}
		if(__key == _KEY_CLEAR){
    a9be:	17 37       	cpi	r17, 0x77	; 119
    a9c0:	99 f4       	brne	.+38     	; 0xa9e8 <_menu_datetime+0x270>
			__i--;
    a9c2:	08 94       	sec
    a9c4:	e1 08       	sbc	r14, r1
    a9c6:	f1 08       	sbc	r15, r1
    a9c8:	f7 fe       	sbrs	r15, 7
    a9ca:	02 c0       	rjmp	.+4      	; 0xa9d0 <_menu_datetime+0x258>
    a9cc:	ee 24       	eor	r14, r14
    a9ce:	ff 24       	eor	r15, r15
			if(__i <= 0)
				__i = 0;
			lcd_xy(__map[__i][0], __map[__i][1]);
    a9d0:	f7 01       	movw	r30, r14
    a9d2:	ee 0f       	add	r30, r30
    a9d4:	ff 1f       	adc	r31, r31
    a9d6:	ee 0f       	add	r30, r30
    a9d8:	ff 1f       	adc	r31, r31
    a9da:	ec 0d       	add	r30, r12
    a9dc:	fd 1d       	adc	r31, r13
    a9de:	82 89       	ldd	r24, Z+18	; 0x12
    a9e0:	63 89       	ldd	r22, Z+19	; 0x13
    a9e2:	0e 94 b3 a4 	call	0x14966	; 0x14966 <lcd_xy>
    a9e6:	61 cf       	rjmp	.-318    	; 0xa8aa <_menu_datetime+0x132>
		}
		if(__key == _KEY_CANCEL)
    a9e8:	17 3e       	cpi	r17, 0xE7	; 231
    a9ea:	09 f4       	brne	.+2      	; 0xa9ee <_menu_datetime+0x276>
    a9ec:	49 c0       	rjmp	.+146    	; 0xaa80 <_menu_datetime+0x308>
			break;
		if(__key == _KEY_ENTER){
    a9ee:	17 3b       	cpi	r17, 0xB7	; 183
    a9f0:	09 f0       	breq	.+2      	; 0xa9f4 <_menu_datetime+0x27c>
    a9f2:	5b cf       	rjmp	.-330    	; 0xa8aa <_menu_datetime+0x132>
    a9f4:	20 e0       	ldi	r18, 0x00	; 0
    a9f6:	30 e0       	ldi	r19, 0x00	; 0
    a9f8:	40 e0       	ldi	r20, 0x00	; 0
    a9fa:	50 e0       	ldi	r21, 0x00	; 0
			for(__i = 0, __ii = 0; __i < 6; __i++, __ii++){
				if(__i == 2 || __i == 4)
					__ii++;
				__date[__ii] = __map[__i][2];
    a9fc:	be 01       	movw	r22, r28
    a9fe:	6f 5f       	subi	r22, 0xFF	; 255
    aa00:	7f 4f       	sbci	r23, 0xFF	; 255
		}
		if(__key == _KEY_CANCEL)
			break;
		if(__key == _KEY_ENTER){
			for(__i = 0, __ii = 0; __i < 6; __i++, __ii++){
				if(__i == 2 || __i == 4)
    aa02:	22 30       	cpi	r18, 0x02	; 2
    aa04:	31 05       	cpc	r19, r1
    aa06:	19 f0       	breq	.+6      	; 0xaa0e <_menu_datetime+0x296>
    aa08:	24 30       	cpi	r18, 0x04	; 4
    aa0a:	31 05       	cpc	r19, r1
    aa0c:	11 f4       	brne	.+4      	; 0xaa12 <_menu_datetime+0x29a>
					__ii++;
    aa0e:	4f 5f       	subi	r20, 0xFF	; 255
    aa10:	5f 4f       	sbci	r21, 0xFF	; 255
				__date[__ii] = __map[__i][2];
    aa12:	fb 01       	movw	r30, r22
    aa14:	e4 0f       	add	r30, r20
    aa16:	f5 1f       	adc	r31, r21
    aa18:	d4 01       	movw	r26, r8
    aa1a:	8c 91       	ld	r24, X
    aa1c:	80 83       	st	Z, r24
			lcd_xy(__map[__i][0], __map[__i][1]);
		}
		if(__key == _KEY_CANCEL)
			break;
		if(__key == _KEY_ENTER){
			for(__i = 0, __ii = 0; __i < 6; __i++, __ii++){
    aa1e:	2f 5f       	subi	r18, 0xFF	; 255
    aa20:	3f 4f       	sbci	r19, 0xFF	; 255
    aa22:	84 e0       	ldi	r24, 0x04	; 4
    aa24:	90 e0       	ldi	r25, 0x00	; 0
    aa26:	88 0e       	add	r8, r24
    aa28:	99 1e       	adc	r9, r25
    aa2a:	26 30       	cpi	r18, 0x06	; 6
    aa2c:	31 05       	cpc	r19, r1
    aa2e:	19 f0       	breq	.+6      	; 0xaa36 <_menu_datetime+0x2be>
    aa30:	4f 5f       	subi	r20, 0xFF	; 255
    aa32:	5f 4f       	sbci	r21, 0xFF	; 255
    aa34:	e6 cf       	rjmp	.-52     	; 0xaa02 <_menu_datetime+0x28a>
    aa36:	60 e0       	ldi	r22, 0x00	; 0
    aa38:	70 e0       	ldi	r23, 0x00	; 0
				__date[__ii] = __map[__i][2];
			}
			for(__i = 6, __ii = 0; __i < 12; __i++, __ii++){
				if(__i == 8 || __i == 10)
					__ii++;
				__time[__ii] = __map[__i][2];
    aa3a:	ae 01       	movw	r20, r28
    aa3c:	46 5f       	subi	r20, 0xF6	; 246
    aa3e:	5f 4f       	sbci	r21, 0xFF	; 255
				if(__i == 2 || __i == 4)
					__ii++;
				__date[__ii] = __map[__i][2];
			}
			for(__i = 6, __ii = 0; __i < 12; __i++, __ii++){
				if(__i == 8 || __i == 10)
    aa40:	28 30       	cpi	r18, 0x08	; 8
    aa42:	31 05       	cpc	r19, r1
    aa44:	19 f0       	breq	.+6      	; 0xaa4c <_menu_datetime+0x2d4>
    aa46:	2a 30       	cpi	r18, 0x0A	; 10
    aa48:	31 05       	cpc	r19, r1
    aa4a:	11 f4       	brne	.+4      	; 0xaa50 <_menu_datetime+0x2d8>
					__ii++;
    aa4c:	6f 5f       	subi	r22, 0xFF	; 255
    aa4e:	7f 4f       	sbci	r23, 0xFF	; 255
				__time[__ii] = __map[__i][2];
    aa50:	fa 01       	movw	r30, r20
    aa52:	e6 0f       	add	r30, r22
    aa54:	f7 1f       	adc	r31, r23
    aa56:	d5 01       	movw	r26, r10
    aa58:	8c 91       	ld	r24, X
    aa5a:	80 83       	st	Z, r24
			for(__i = 0, __ii = 0; __i < 6; __i++, __ii++){
				if(__i == 2 || __i == 4)
					__ii++;
				__date[__ii] = __map[__i][2];
			}
			for(__i = 6, __ii = 0; __i < 12; __i++, __ii++){
    aa5c:	2f 5f       	subi	r18, 0xFF	; 255
    aa5e:	3f 4f       	sbci	r19, 0xFF	; 255
    aa60:	84 e0       	ldi	r24, 0x04	; 4
    aa62:	90 e0       	ldi	r25, 0x00	; 0
    aa64:	a8 0e       	add	r10, r24
    aa66:	b9 1e       	adc	r11, r25
    aa68:	2c 30       	cpi	r18, 0x0C	; 12
    aa6a:	31 05       	cpc	r19, r1
    aa6c:	19 f0       	breq	.+6      	; 0xaa74 <_menu_datetime+0x2fc>
    aa6e:	6f 5f       	subi	r22, 0xFF	; 255
    aa70:	7f 4f       	sbci	r23, 0xFF	; 255
    aa72:	e6 cf       	rjmp	.-52     	; 0xaa40 <_menu_datetime+0x2c8>
				if(__i == 8 || __i == 10)
					__ii++;
				__time[__ii] = __map[__i][2];
			}
			_datetime(_DATETIME_WRITE, __date, __time);
    aa74:	81 e0       	ldi	r24, 0x01	; 1
    aa76:	be 01       	movw	r22, r28
    aa78:	6f 5f       	subi	r22, 0xFF	; 255
    aa7a:	7f 4f       	sbci	r23, 0xFF	; 255
    aa7c:	0e 94 ce a7 	call	0x14f9c	; 0x14f9c <_datetime>
			break;
		}
	}
	CURSOR_HIDE;
    aa80:	8c e0       	ldi	r24, 0x0C	; 12
    aa82:	0e 94 20 a4 	call	0x14840	; 0x14840 <lcd_command>
}
    aa86:	ce 5b       	subi	r28, 0xBE	; 190
    aa88:	df 4f       	sbci	r29, 0xFF	; 255
    aa8a:	0f b6       	in	r0, 0x3f	; 63
    aa8c:	f8 94       	cli
    aa8e:	de bf       	out	0x3e, r29	; 62
    aa90:	0f be       	out	0x3f, r0	; 63
    aa92:	cd bf       	out	0x3d, r28	; 61
    aa94:	cf 91       	pop	r28
    aa96:	df 91       	pop	r29
    aa98:	1f 91       	pop	r17
    aa9a:	0f 91       	pop	r16
    aa9c:	ff 90       	pop	r15
    aa9e:	ef 90       	pop	r14
    aaa0:	df 90       	pop	r13
    aaa2:	cf 90       	pop	r12
    aaa4:	bf 90       	pop	r11
    aaa6:	af 90       	pop	r10
    aaa8:	9f 90       	pop	r9
    aaaa:	8f 90       	pop	r8
    aaac:	08 95       	ret

0000aaae <FSettingDatetime>:
	 }
     return Result;
}

char FSettingDatetime(){
     _menu_datetime();
    aaae:	0e 94 bc 53 	call	0xa778	; 0xa778 <_menu_datetime>
     return MENU_DONE;
}
    aab2:	81 e0       	ldi	r24, 0x01	; 1
    aab4:	08 95       	ret

0000aab6 <menu_FIP>:
	 }
  return Result;
}


char menu_FIP(char *xFIP,char *sFIPUsed){
    aab6:	4f 92       	push	r4
    aab8:	5f 92       	push	r5
    aaba:	6f 92       	push	r6
    aabc:	7f 92       	push	r7
    aabe:	8f 92       	push	r8
    aac0:	9f 92       	push	r9
    aac2:	af 92       	push	r10
    aac4:	bf 92       	push	r11
    aac6:	cf 92       	push	r12
    aac8:	df 92       	push	r13
    aaca:	ef 92       	push	r14
    aacc:	ff 92       	push	r15
    aace:	0f 93       	push	r16
    aad0:	1f 93       	push	r17
    aad2:	df 93       	push	r29
    aad4:	cf 93       	push	r28
    aad6:	cd b7       	in	r28, 0x3d	; 61
    aad8:	de b7       	in	r29, 0x3e	; 62
    aada:	a2 97       	sbiw	r28, 0x22	; 34
    aadc:	0f b6       	in	r0, 0x3f	; 63
    aade:	f8 94       	cli
    aae0:	de bf       	out	0x3e, r29	; 62
    aae2:	0f be       	out	0x3f, r0	; 63
    aae4:	cd bf       	out	0x3d, r28	; 61
    aae6:	7c 01       	movw	r14, r24
    aae8:	6b 01       	movw	r12, r22

       char KeyPressed=0,KeyChar;
       char Result=FIP_NONE;
       char FIP[8],strPumpL[3],strPumpR[3],lcdteks[20];

       switch(stEnterFIP){
    aaea:	80 91 6c 02 	lds	r24, 0x026C
    aaee:	81 30       	cpi	r24, 0x01	; 1
    aaf0:	09 f4       	brne	.+2      	; 0xaaf4 <menu_FIP+0x3e>
    aaf2:	cd c0       	rjmp	.+410    	; 0xac8e <menu_FIP+0x1d8>
    aaf4:	81 30       	cpi	r24, 0x01	; 1
    aaf6:	20 f0       	brcs	.+8      	; 0xab00 <menu_FIP+0x4a>
    aaf8:	82 30       	cpi	r24, 0x02	; 2
    aafa:	09 f0       	breq	.+2      	; 0xaafe <menu_FIP+0x48>
    aafc:	4a c1       	rjmp	.+660    	; 0xad92 <menu_FIP+0x2dc>
    aafe:	47 c1       	rjmp	.+654    	; 0xad8e <menu_FIP+0x2d8>
 	   case efInit:
	 	    eeprom_read_block((void*) &FIP, (const void*) &DefPumpMap, 8);
    ab00:	8e 01       	movw	r16, r28
    ab02:	09 5f       	subi	r16, 0xF9	; 249
    ab04:	1f 4f       	sbci	r17, 0xFF	; 255
    ab06:	c8 01       	movw	r24, r16
    ab08:	66 e4       	ldi	r22, 0x46	; 70
    ab0a:	70 e0       	ldi	r23, 0x00	; 0
    ab0c:	48 e0       	ldi	r20, 0x08	; 8
    ab0e:	50 e0       	ldi	r21, 0x00	; 0
    ab10:	0e 94 30 ad 	call	0x15a60	; 0x15a60 <__eerd_block_m128>
		    lcd_clear(); 
    ab14:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
    ab18:	f8 01       	movw	r30, r16
    ab1a:	20 e0       	ldi	r18, 0x00	; 0
    ab1c:	30 e0       	ldi	r19, 0x00	; 0
    ab1e:	07 c0       	rjmp	.+14     	; 0xab2e <menu_FIP+0x78>
		    for (iLoop=0;iLoop<8;iLoop++){
			     if (FIP[iLoop]>99) FIP[iLoop]=0;
    ab20:	80 81       	ld	r24, Z
    ab22:	84 36       	cpi	r24, 0x64	; 100
    ab24:	08 f0       	brcs	.+2      	; 0xab28 <menu_FIP+0x72>
    ab26:	10 82       	st	Z, r1
    ab28:	2f 5f       	subi	r18, 0xFF	; 255
    ab2a:	3f 4f       	sbci	r19, 0xFF	; 255
    ab2c:	31 96       	adiw	r30, 0x01	; 1

       switch(stEnterFIP){
 	   case efInit:
	 	    eeprom_read_block((void*) &FIP, (const void*) &DefPumpMap, 8);
		    lcd_clear(); 
		    for (iLoop=0;iLoop<8;iLoop++){
    ab2e:	28 30       	cpi	r18, 0x08	; 8
    ab30:	31 05       	cpc	r19, r1
    ab32:	b0 f3       	brcs	.-20     	; 0xab20 <menu_FIP+0x6a>
			     if (FIP[iLoop]>99) FIP[iLoop]=0;
		    }
		    for(iLoop=0;iLoop<4;iLoop++){
    ab34:	10 92 6a 02 	sts	0x026A, r1
    ab38:	10 92 69 02 	sts	0x0269, r1
	     }String[Size]=0;
	 }
}

void leadingZero(char Val,char *StrResult){
     sprintf_P(StrResult,PSTR("%.2d"),Val);
    ab3c:	5e 01       	movw	r10, r28
    ab3e:	08 94       	sec
    ab40:	a1 1c       	adc	r10, r1
    ab42:	b1 1c       	adc	r11, r1
    ab44:	59 ee       	ldi	r21, 0xE9	; 233
    ab46:	c5 2e       	mov	r12, r21
    ab48:	5e e0       	ldi	r21, 0x0E	; 14
    ab4a:	d5 2e       	mov	r13, r21
    ab4c:	47 e0       	ldi	r20, 0x07	; 7
    ab4e:	44 2e       	mov	r4, r20
    ab50:	51 2c       	mov	r5, r1
    ab52:	4c 0e       	add	r4, r28
    ab54:	5d 1e       	adc	r5, r29
		    for (iLoop=0;iLoop<8;iLoop++){
			     if (FIP[iLoop]>99) FIP[iLoop]=0;
		    }
		    for(iLoop=0;iLoop<4;iLoop++){
		        leadingZero(FIP[iLoop],strPumpL);leadingZero(FIP[iLoop+4],strPumpR);
                sprintf_P(lcdteks,PSTR("%d.P%s | %d.P%s"),(iLoop+1),strPumpL,(iLoop+5),strPumpR);
    ab56:	34 e0       	ldi	r19, 0x04	; 4
    ab58:	e3 2e       	mov	r14, r19
    ab5a:	f1 2c       	mov	r15, r1
    ab5c:	ec 0e       	add	r14, r28
    ab5e:	fd 1e       	adc	r15, r29
    ab60:	2b e0       	ldi	r18, 0x0B	; 11
    ab62:	62 2e       	mov	r6, r18
    ab64:	71 2c       	mov	r7, r1
    ab66:	6c 0e       	add	r6, r28
    ab68:	7d 1e       	adc	r7, r29
    ab6a:	8e 01       	movw	r16, r28
    ab6c:	01 5f       	subi	r16, 0xF1	; 241
    ab6e:	1f 4f       	sbci	r17, 0xFF	; 255
    ab70:	97 ef       	ldi	r25, 0xF7	; 247
    ab72:	89 2e       	mov	r8, r25
    ab74:	9d e1       	ldi	r25, 0x1D	; 29
    ab76:	99 2e       	mov	r9, r25
    ab78:	64 c0       	rjmp	.+200    	; 0xac42 <menu_FIP+0x18c>
	     }String[Size]=0;
	 }
}

void leadingZero(char Val,char *StrResult){
     sprintf_P(StrResult,PSTR("%.2d"),Val);
    ab7a:	00 d0       	rcall	.+0      	; 0xab7c <menu_FIP+0xc6>
    ab7c:	00 d0       	rcall	.+0      	; 0xab7e <menu_FIP+0xc8>
    ab7e:	00 d0       	rcall	.+0      	; 0xab80 <menu_FIP+0xca>
    ab80:	2d b7       	in	r18, 0x3d	; 61
    ab82:	3e b7       	in	r19, 0x3e	; 62
    ab84:	2f 5f       	subi	r18, 0xFF	; 255
    ab86:	3f 4f       	sbci	r19, 0xFF	; 255
    ab88:	ed b7       	in	r30, 0x3d	; 61
    ab8a:	fe b7       	in	r31, 0x3e	; 62
    ab8c:	b2 82       	std	Z+2, r11	; 0x02
    ab8e:	a1 82       	std	Z+1, r10	; 0x01
    ab90:	f9 01       	movw	r30, r18
    ab92:	d3 82       	std	Z+3, r13	; 0x03
    ab94:	c2 82       	std	Z+2, r12	; 0x02
    ab96:	a4 0d       	add	r26, r4
    ab98:	b5 1d       	adc	r27, r5
    ab9a:	8c 91       	ld	r24, X
    ab9c:	84 83       	std	Z+4, r24	; 0x04
    ab9e:	15 82       	std	Z+5, r1	; 0x05
    aba0:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
    aba4:	ad b7       	in	r26, 0x3d	; 61
    aba6:	be b7       	in	r27, 0x3e	; 62
    aba8:	11 96       	adiw	r26, 0x01	; 1
    abaa:	ed b7       	in	r30, 0x3d	; 61
    abac:	fe b7       	in	r31, 0x3e	; 62
    abae:	f2 82       	std	Z+2, r15	; 0x02
    abb0:	e1 82       	std	Z+1, r14	; 0x01
    abb2:	13 96       	adiw	r26, 0x03	; 3
    abb4:	dc 92       	st	X, r13
    abb6:	ce 92       	st	-X, r12
    abb8:	12 97       	sbiw	r26, 0x02	; 2
    abba:	e0 91 69 02 	lds	r30, 0x0269
    abbe:	f0 91 6a 02 	lds	r31, 0x026A
    abc2:	e6 0d       	add	r30, r6
    abc4:	f7 1d       	adc	r31, r7
    abc6:	80 81       	ld	r24, Z
    abc8:	14 96       	adiw	r26, 0x04	; 4
    abca:	8c 93       	st	X, r24
    abcc:	14 97       	sbiw	r26, 0x04	; 4
    abce:	15 96       	adiw	r26, 0x05	; 5
    abd0:	1c 92       	st	X, r1
    abd2:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
		    for (iLoop=0;iLoop<8;iLoop++){
			     if (FIP[iLoop]>99) FIP[iLoop]=0;
		    }
		    for(iLoop=0;iLoop<4;iLoop++){
		        leadingZero(FIP[iLoop],strPumpL);leadingZero(FIP[iLoop+4],strPumpR);
                sprintf_P(lcdteks,PSTR("%d.P%s | %d.P%s"),(iLoop+1),strPumpL,(iLoop+5),strPumpR);
    abd6:	80 91 69 02 	lds	r24, 0x0269
    abda:	90 91 6a 02 	lds	r25, 0x026A
    abde:	00 d0       	rcall	.+0      	; 0xabe0 <menu_FIP+0x12a>
    abe0:	00 d0       	rcall	.+0      	; 0xabe2 <menu_FIP+0x12c>
    abe2:	00 d0       	rcall	.+0      	; 0xabe4 <menu_FIP+0x12e>
    abe4:	ed b7       	in	r30, 0x3d	; 61
    abe6:	fe b7       	in	r31, 0x3e	; 62
    abe8:	31 96       	adiw	r30, 0x01	; 1
    abea:	ad b7       	in	r26, 0x3d	; 61
    abec:	be b7       	in	r27, 0x3e	; 62
    abee:	12 96       	adiw	r26, 0x02	; 2
    abf0:	1c 93       	st	X, r17
    abf2:	0e 93       	st	-X, r16
    abf4:	11 97       	sbiw	r26, 0x01	; 1
    abf6:	93 82       	std	Z+3, r9	; 0x03
    abf8:	82 82       	std	Z+2, r8	; 0x02
    abfa:	01 96       	adiw	r24, 0x01	; 1
    abfc:	95 83       	std	Z+5, r25	; 0x05
    abfe:	84 83       	std	Z+4, r24	; 0x04
    ac00:	b7 82       	std	Z+7, r11	; 0x07
    ac02:	a6 82       	std	Z+6, r10	; 0x06
    ac04:	04 96       	adiw	r24, 0x04	; 4
    ac06:	91 87       	std	Z+9, r25	; 0x09
    ac08:	80 87       	std	Z+8, r24	; 0x08
    ac0a:	f3 86       	std	Z+11, r15	; 0x0b
    ac0c:	e2 86       	std	Z+10, r14	; 0x0a
    ac0e:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
			    lcd_print((iLoop+1),1,lcdteks);
    ac12:	ed b7       	in	r30, 0x3d	; 61
    ac14:	fe b7       	in	r31, 0x3e	; 62
    ac16:	3c 96       	adiw	r30, 0x0c	; 12
    ac18:	0f b6       	in	r0, 0x3f	; 63
    ac1a:	f8 94       	cli
    ac1c:	fe bf       	out	0x3e, r31	; 62
    ac1e:	0f be       	out	0x3f, r0	; 63
    ac20:	ed bf       	out	0x3d, r30	; 61
    ac22:	80 91 69 02 	lds	r24, 0x0269
    ac26:	8f 5f       	subi	r24, 0xFF	; 255
    ac28:	61 e0       	ldi	r22, 0x01	; 1
    ac2a:	a8 01       	movw	r20, r16
    ac2c:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
	 	    eeprom_read_block((void*) &FIP, (const void*) &DefPumpMap, 8);
		    lcd_clear(); 
		    for (iLoop=0;iLoop<8;iLoop++){
			     if (FIP[iLoop]>99) FIP[iLoop]=0;
		    }
		    for(iLoop=0;iLoop<4;iLoop++){
    ac30:	80 91 69 02 	lds	r24, 0x0269
    ac34:	90 91 6a 02 	lds	r25, 0x026A
    ac38:	01 96       	adiw	r24, 0x01	; 1
    ac3a:	90 93 6a 02 	sts	0x026A, r25
    ac3e:	80 93 69 02 	sts	0x0269, r24
    ac42:	a0 91 69 02 	lds	r26, 0x0269
    ac46:	b0 91 6a 02 	lds	r27, 0x026A
    ac4a:	a4 30       	cpi	r26, 0x04	; 4
    ac4c:	b1 05       	cpc	r27, r1
    ac4e:	08 f4       	brcc	.+2      	; 0xac52 <menu_FIP+0x19c>
    ac50:	94 cf       	rjmp	.-216    	; 0xab7a <menu_FIP+0xc4>
		        leadingZero(FIP[iLoop],strPumpL);leadingZero(FIP[iLoop+4],strPumpR);
                sprintf_P(lcdteks,PSTR("%d.P%s | %d.P%s"),(iLoop+1),strPumpL,(iLoop+5),strPumpR);
			    lcd_print((iLoop+1),1,lcdteks);
			}
		    lcd_printf(1,15,PSTR("FIP:_"));    //"1.P01 | 5.P05 FIP:_ "                                                                      
    ac52:	81 e0       	ldi	r24, 0x01	; 1
    ac54:	6f e0       	ldi	r22, 0x0F	; 15
    ac56:	41 ef       	ldi	r20, 0xF1	; 241
    ac58:	5d e1       	ldi	r21, 0x1D	; 29
    ac5a:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		    lcd_printf(2,15,PSTR("     "));    //"2.P02 | 6.P05       "
    ac5e:	82 e0       	ldi	r24, 0x02	; 2
    ac60:	6f e0       	ldi	r22, 0x0F	; 15
    ac62:	4b ee       	ldi	r20, 0xEB	; 235
    ac64:	5d e1       	ldi	r21, 0x1D	; 29
    ac66:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		    lcd_printf(3,15,PSTR("#)OK "));    //"3.P03 | 7.P07 #)OK  "
    ac6a:	83 e0       	ldi	r24, 0x03	; 3
    ac6c:	6f e0       	ldi	r22, 0x0F	; 15
    ac6e:	45 ee       	ldi	r20, 0xE5	; 229
    ac70:	5d e1       	ldi	r21, 0x1D	; 29
    ac72:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
	        lcd_printf(4,15,PSTR("*)Exit"));   //"4.P04 | 8.P08 *)Exit"				
    ac76:	84 e0       	ldi	r24, 0x04	; 4
    ac78:	6f e0       	ldi	r22, 0x0F	; 15
    ac7a:	4e ed       	ldi	r20, 0xDE	; 222
    ac7c:	5d e1       	ldi	r21, 0x1D	; 29
    ac7e:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		    iLoop=0;
    ac82:	10 92 6a 02 	sts	0x026A, r1
    ac86:	10 92 69 02 	sts	0x0269, r1
		    stEnterFIP=efFIPInput;
    ac8a:	81 e0       	ldi	r24, 0x01	; 1
    ac8c:	7d c0       	rjmp	.+250    	; 0xad88 <menu_FIP+0x2d2>
	        break;
	   case efFIPInput:
		    iLoop++;
    ac8e:	80 91 69 02 	lds	r24, 0x0269
    ac92:	90 91 6a 02 	lds	r25, 0x026A
    ac96:	01 96       	adiw	r24, 0x01	; 1
    ac98:	90 93 6a 02 	sts	0x026A, r25
    ac9c:	80 93 69 02 	sts	0x0269, r24
		    KeyPressed=_key_scan(1);
    aca0:	81 e0       	ldi	r24, 0x01	; 1
    aca2:	0e 94 6d a6 	call	0x14cda	; 0x14cda <_key_scan>
    aca6:	08 2f       	mov	r16, r24
		    KeyChar=_key_btn(KeyPressed);
    aca8:	0e 94 ce a5 	call	0x14b9c	; 0x14b9c <_key_btn>
    acac:	98 2f       	mov	r25, r24
		    if ((KeyChar>='1')&&(KeyChar<='8')){
    acae:	18 2f       	mov	r17, r24
    acb0:	11 53       	subi	r17, 0x31	; 49
    acb2:	18 30       	cpi	r17, 0x08	; 8
    acb4:	60 f4       	brcc	.+24     	; 0xacce <menu_FIP+0x218>
		 	     if (KeyCharLast!=KeyChar){
    acb6:	80 91 5a 01 	lds	r24, 0x015A
    acba:	89 17       	cp	r24, r25
    acbc:	41 f0       	breq	.+16     	; 0xacce <menu_FIP+0x218>
				     KeyCharLast=KeyChar;
    acbe:	90 93 5a 01 	sts	0x015A, r25
				     iLoop=1000;
    acc2:	88 ee       	ldi	r24, 0xE8	; 232
    acc4:	93 e0       	ldi	r25, 0x03	; 3
    acc6:	90 93 6a 02 	sts	0x026A, r25
    acca:	80 93 69 02 	sts	0x0269, r24
                 }
		    }
 		    if ((iLoop%2000)==0){
    acce:	80 91 69 02 	lds	r24, 0x0269
    acd2:	90 91 6a 02 	lds	r25, 0x026A
    acd6:	60 ed       	ldi	r22, 0xD0	; 208
    acd8:	77 e0       	ldi	r23, 0x07	; 7
    acda:	0e 94 7a aa 	call	0x154f4	; 0x154f4 <__udivmodhi4>
    acde:	89 2b       	or	r24, r25
    ace0:	39 f4       	brne	.+14     	; 0xacf0 <menu_FIP+0x23a>
		        lcd_xy(1,19);_lcd('_'); 
    ace2:	81 e0       	ldi	r24, 0x01	; 1
    ace4:	63 e1       	ldi	r22, 0x13	; 19
    ace6:	0e 94 b3 a4 	call	0x14966	; 0x14966 <lcd_xy>
    acea:	8f e5       	ldi	r24, 0x5F	; 95
    acec:	0e 94 8d a4 	call	0x1491a	; 0x1491a <_lcd>
			   }
           if ((iLoop%2000)==1000){
    acf0:	80 91 69 02 	lds	r24, 0x0269
    acf4:	90 91 6a 02 	lds	r25, 0x026A
    acf8:	60 ed       	ldi	r22, 0xD0	; 208
    acfa:	77 e0       	ldi	r23, 0x07	; 7
    acfc:	0e 94 7a aa 	call	0x154f4	; 0x154f4 <__udivmodhi4>
    ad00:	88 5e       	subi	r24, 0xE8	; 232
    ad02:	93 40       	sbci	r25, 0x03	; 3
    ad04:	41 f4       	brne	.+16     	; 0xad16 <menu_FIP+0x260>
			    lcd_xy(1,19);_lcd(KeyCharLast); 
    ad06:	81 e0       	ldi	r24, 0x01	; 1
    ad08:	63 e1       	ldi	r22, 0x13	; 19
    ad0a:	0e 94 b3 a4 	call	0x14966	; 0x14966 <lcd_xy>
    ad0e:	80 91 5a 01 	lds	r24, 0x015A
    ad12:	0e 94 8d a4 	call	0x1491a	; 0x1491a <_lcd>
			   }

		   if (((KeyChar>='1')&&(KeyChar<='8'))||(KeyPressed==_KEY_ENTER)&&(KeyCharLast!=' ')){ 
    ad16:	18 30       	cpi	r17, 0x08	; 8
    ad18:	30 f0       	brcs	.+12     	; 0xad26 <menu_FIP+0x270>
    ad1a:	07 3b       	cpi	r16, 0xB7	; 183
    ad1c:	91 f5       	brne	.+100    	; 0xad82 <menu_FIP+0x2cc>
    ad1e:	80 91 5a 01 	lds	r24, 0x015A
    ad22:	80 32       	cpi	r24, 0x20	; 32
    ad24:	b1 f1       	breq	.+108    	; 0xad92 <menu_FIP+0x2dc>
		         FIP_Used=FIP[KeyCharLast-'1'];
    ad26:	80 91 5a 01 	lds	r24, 0x015A
    ad2a:	fe 01       	movw	r30, r28
    ad2c:	ba 97       	sbiw	r30, 0x2a	; 42
    ad2e:	e8 0f       	add	r30, r24
    ad30:	f1 1d       	adc	r31, r1
    ad32:	20 81       	ld	r18, Z
    ad34:	20 93 6b 02 	sts	0x026B, r18
				 if (FIP_Used<=99){
    ad38:	24 36       	cpi	r18, 0x64	; 100
    ad3a:	f0 f4       	brcc	.+60     	; 0xad78 <menu_FIP+0x2c2>
                     //leadingZero(FIP_Used,sFIPUsed);
					 //xFIP[0]=FIP_Used;
					 *xFIP=FIP_Used;
    ad3c:	d7 01       	movw	r26, r14
    ad3e:	2c 93       	st	X, r18
					 sprintf_P(sFIPUsed,PSTR("%.2d"),FIP_Used);
    ad40:	00 d0       	rcall	.+0      	; 0xad42 <menu_FIP+0x28c>
    ad42:	00 d0       	rcall	.+0      	; 0xad44 <menu_FIP+0x28e>
    ad44:	00 d0       	rcall	.+0      	; 0xad46 <menu_FIP+0x290>
    ad46:	ed b7       	in	r30, 0x3d	; 61
    ad48:	fe b7       	in	r31, 0x3e	; 62
    ad4a:	31 96       	adiw	r30, 0x01	; 1
    ad4c:	ad b7       	in	r26, 0x3d	; 61
    ad4e:	be b7       	in	r27, 0x3e	; 62
    ad50:	12 96       	adiw	r26, 0x02	; 2
    ad52:	dc 92       	st	X, r13
    ad54:	ce 92       	st	-X, r12
    ad56:	11 97       	sbiw	r26, 0x01	; 1
    ad58:	89 ed       	ldi	r24, 0xD9	; 217
    ad5a:	9d e1       	ldi	r25, 0x1D	; 29
    ad5c:	93 83       	std	Z+3, r25	; 0x03
    ad5e:	82 83       	std	Z+2, r24	; 0x02
    ad60:	24 83       	std	Z+4, r18	; 0x04
    ad62:	15 82       	std	Z+5, r1	; 0x05
    ad64:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
    ad68:	ed b7       	in	r30, 0x3d	; 61
    ad6a:	fe b7       	in	r31, 0x3e	; 62
    ad6c:	36 96       	adiw	r30, 0x06	; 6
    ad6e:	0f b6       	in	r0, 0x3f	; 63
    ad70:	f8 94       	cli
    ad72:	fe bf       	out	0x3e, r31	; 62
    ad74:	0f be       	out	0x3f, r0	; 63
    ad76:	ed bf       	out	0x3d, r30	; 61

					 }
				 Result=FIP_DONE;
                 stEnterFIP=efExitFIPInput;
    ad78:	82 e0       	ldi	r24, 0x02	; 2
    ad7a:	80 93 6c 02 	sts	0x026C, r24
    ad7e:	80 e0       	ldi	r24, 0x00	; 0
    ad80:	09 c0       	rjmp	.+18     	; 0xad94 <menu_FIP+0x2de>
		   }
		   else
		   if (KeyPressed==_KEY_CANCEL){
    ad82:	07 3e       	cpi	r16, 0xE7	; 231
    ad84:	31 f4       	brne	.+12     	; 0xad92 <menu_FIP+0x2dc>
               Result=FIP_CANCEL;
			   stEnterFIP=efExitFIPInput;
    ad86:	82 e0       	ldi	r24, 0x02	; 2
    ad88:	80 93 6c 02 	sts	0x026C, r24
    ad8c:	03 c0       	rjmp	.+6      	; 0xad94 <menu_FIP+0x2de>
		   }
	       break;
      case efExitFIPInput:
           stEnterFIP=efInit;
    ad8e:	10 92 6c 02 	sts	0x026C, r1
    ad92:	81 e0       	ldi	r24, 0x01	; 1
	       break;
	 }
return Result;
}
    ad94:	a2 96       	adiw	r28, 0x22	; 34
    ad96:	0f b6       	in	r0, 0x3f	; 63
    ad98:	f8 94       	cli
    ad9a:	de bf       	out	0x3e, r29	; 62
    ad9c:	0f be       	out	0x3f, r0	; 63
    ad9e:	cd bf       	out	0x3d, r28	; 61
    ada0:	cf 91       	pop	r28
    ada2:	df 91       	pop	r29
    ada4:	1f 91       	pop	r17
    ada6:	0f 91       	pop	r16
    ada8:	ff 90       	pop	r15
    adaa:	ef 90       	pop	r14
    adac:	df 90       	pop	r13
    adae:	cf 90       	pop	r12
    adb0:	bf 90       	pop	r11
    adb2:	af 90       	pop	r10
    adb4:	9f 90       	pop	r9
    adb6:	8f 90       	pop	r8
    adb8:	7f 90       	pop	r7
    adba:	6f 90       	pop	r6
    adbc:	5f 90       	pop	r5
    adbe:	4f 90       	pop	r4
    adc0:	08 95       	ret

0000adc2 <FMenuSettingServerIP>:
		       break;     
		  }//EndSwitch	 
    return Result;
}

char FMenuSettingServerIP(){
    adc2:	ff 92       	push	r15
    adc4:	0f 93       	push	r16
    adc6:	1f 93       	push	r17
    adc8:	df 93       	push	r29
    adca:	cf 93       	push	r28
    adcc:	cd b7       	in	r28, 0x3d	; 61
    adce:	de b7       	in	r29, 0x3e	; 62
    add0:	64 97       	sbiw	r28, 0x14	; 20
    add2:	0f b6       	in	r0, 0x3f	; 63
    add4:	f8 94       	cli
    add6:	de bf       	out	0x3e, r29	; 62
    add8:	0f be       	out	0x3f, r0	; 63
    adda:	cd bf       	out	0x3d, r28	; 61
     //Server IP
     //Old: 192.168.123.000
	 //New:   _.   .   .
	 //--------------------
	 //*)cancel    #)next
	 Result=MENU_NONE;
    addc:	10 92 2e 02 	sts	0x022E, r1
     switch(stClientIP){
    ade0:	80 91 58 01 	lds	r24, 0x0158
    ade4:	82 30       	cpi	r24, 0x02	; 2
    ade6:	09 f4       	brne	.+2      	; 0xadea <FMenuSettingServerIP+0x28>
    ade8:	79 c0       	rjmp	.+242    	; 0xaedc <FMenuSettingServerIP+0x11a>
    adea:	83 30       	cpi	r24, 0x03	; 3
    adec:	20 f4       	brcc	.+8      	; 0xadf6 <FMenuSettingServerIP+0x34>
    adee:	81 30       	cpi	r24, 0x01	; 1
    adf0:	09 f0       	breq	.+2      	; 0xadf4 <FMenuSettingServerIP+0x32>
    adf2:	5e c2       	rjmp	.+1212   	; 0xb2b0 <FMenuSettingServerIP+0x4ee>
    adf4:	07 c0       	rjmp	.+14     	; 0xae04 <FMenuSettingServerIP+0x42>
    adf6:	83 30       	cpi	r24, 0x03	; 3
    adf8:	09 f4       	brne	.+2      	; 0xadfc <FMenuSettingServerIP+0x3a>
    adfa:	55 c2       	rjmp	.+1194   	; 0xb2a6 <FMenuSettingServerIP+0x4e4>
    adfc:	84 30       	cpi	r24, 0x04	; 4
    adfe:	09 f0       	breq	.+2      	; 0xae02 <FMenuSettingServerIP+0x40>
    ae00:	57 c2       	rjmp	.+1198   	; 0xb2b0 <FMenuSettingServerIP+0x4ee>
    ae02:	45 c2       	rjmp	.+1162   	; 0xb28e <FMenuSettingServerIP+0x4cc>
		  case cipInit:
			   lcd_clear();
    ae04:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
	           lcd_printf(1,1,PSTR("Server IP"));
    ae08:	81 e0       	ldi	r24, 0x01	; 1
    ae0a:	61 e0       	ldi	r22, 0x01	; 1
    ae0c:	41 ea       	ldi	r20, 0xA1	; 161
    ae0e:	54 e1       	ldi	r21, 0x14	; 20
    ae10:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
			   eeprom_read_block((void*)&IP_blok,(const void*)&DefServerIP,4);
    ae14:	87 e2       	ldi	r24, 0x27	; 39
    ae16:	92 e0       	ldi	r25, 0x02	; 2
    ae18:	6c e2       	ldi	r22, 0x2C	; 44
    ae1a:	70 e0       	ldi	r23, 0x00	; 0
    ae1c:	44 e0       	ldi	r20, 0x04	; 4
    ae1e:	50 e0       	ldi	r21, 0x00	; 0
    ae20:	0e 94 30 ad 	call	0x15a60	; 0x15a60 <__eerd_block_m128>
	           sprintf_P(lcdteks,PSTR("Old: %d.%d.%d.%d"),IP_blok[0],IP_blok[1],IP_blok[2],IP_blok[3]);
    ae24:	8d b7       	in	r24, 0x3d	; 61
    ae26:	9e b7       	in	r25, 0x3e	; 62
    ae28:	0c 97       	sbiw	r24, 0x0c	; 12
    ae2a:	0f b6       	in	r0, 0x3f	; 63
    ae2c:	f8 94       	cli
    ae2e:	9e bf       	out	0x3e, r25	; 62
    ae30:	0f be       	out	0x3f, r0	; 63
    ae32:	8d bf       	out	0x3d, r24	; 61
    ae34:	ed b7       	in	r30, 0x3d	; 61
    ae36:	fe b7       	in	r31, 0x3e	; 62
    ae38:	31 96       	adiw	r30, 0x01	; 1
    ae3a:	8e 01       	movw	r16, r28
    ae3c:	0f 5f       	subi	r16, 0xFF	; 255
    ae3e:	1f 4f       	sbci	r17, 0xFF	; 255
    ae40:	ad b7       	in	r26, 0x3d	; 61
    ae42:	be b7       	in	r27, 0x3e	; 62
    ae44:	12 96       	adiw	r26, 0x02	; 2
    ae46:	1c 93       	st	X, r17
    ae48:	0e 93       	st	-X, r16
    ae4a:	11 97       	sbiw	r26, 0x01	; 1
    ae4c:	80 e9       	ldi	r24, 0x90	; 144
    ae4e:	94 e1       	ldi	r25, 0x14	; 20
    ae50:	93 83       	std	Z+3, r25	; 0x03
    ae52:	82 83       	std	Z+2, r24	; 0x02
    ae54:	80 91 27 02 	lds	r24, 0x0227
    ae58:	84 83       	std	Z+4, r24	; 0x04
    ae5a:	15 82       	std	Z+5, r1	; 0x05
    ae5c:	80 91 28 02 	lds	r24, 0x0228
    ae60:	86 83       	std	Z+6, r24	; 0x06
    ae62:	17 82       	std	Z+7, r1	; 0x07
    ae64:	80 91 29 02 	lds	r24, 0x0229
    ae68:	80 87       	std	Z+8, r24	; 0x08
    ae6a:	11 86       	std	Z+9, r1	; 0x09
    ae6c:	80 91 2a 02 	lds	r24, 0x022A
    ae70:	82 87       	std	Z+10, r24	; 0x0a
    ae72:	13 86       	std	Z+11, r1	; 0x0b
    ae74:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	           lcd_print(2,1,lcdteks);
    ae78:	ed b7       	in	r30, 0x3d	; 61
    ae7a:	fe b7       	in	r31, 0x3e	; 62
    ae7c:	3c 96       	adiw	r30, 0x0c	; 12
    ae7e:	0f b6       	in	r0, 0x3f	; 63
    ae80:	f8 94       	cli
    ae82:	fe bf       	out	0x3e, r31	; 62
    ae84:	0f be       	out	0x3f, r0	; 63
    ae86:	ed bf       	out	0x3d, r30	; 61
    ae88:	82 e0       	ldi	r24, 0x02	; 2
    ae8a:	61 e0       	ldi	r22, 0x01	; 1
    ae8c:	a8 01       	movw	r20, r16
    ae8e:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
			   lcd_printf(3,1,PSTR("New:   _.   .   .   "));
    ae92:	83 e0       	ldi	r24, 0x03	; 3
    ae94:	61 e0       	ldi	r22, 0x01	; 1
    ae96:	4b e7       	ldi	r20, 0x7B	; 123
    ae98:	54 e1       	ldi	r21, 0x14	; 20
    ae9a:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
			   lcd_printf(4,1,PSTR("[*]cancel  [#]next  "));
    ae9e:	84 e0       	ldi	r24, 0x04	; 4
    aea0:	61 e0       	ldi	r22, 0x01	; 1
    aea2:	46 e6       	ldi	r20, 0x66	; 102
    aea4:	54 e1       	ldi	r21, 0x14	; 20
    aea6:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
               iLoop=0;
    aeaa:	10 92 26 02 	sts	0x0226, r1
    aeae:	10 92 25 02 	sts	0x0225, r1
			   y=3,x=8;
    aeb2:	83 e0       	ldi	r24, 0x03	; 3
    aeb4:	80 93 2c 02 	sts	0x022C, r24
    aeb8:	88 e0       	ldi	r24, 0x08	; 8
    aeba:	80 93 2d 02 	sts	0x022D, r24
			   iInput=0; iBlok=0;
    aebe:	10 92 2b 02 	sts	0x022B, r1
    aec2:	10 92 24 02 	sts	0x0224, r1
    aec6:	10 92 23 02 	sts	0x0223, r1
			   IPchar[0]='0';IPchar[1]='0';IPchar[2]='0';
    aeca:	80 e3       	ldi	r24, 0x30	; 48
    aecc:	80 93 30 02 	sts	0x0230, r24
    aed0:	80 93 31 02 	sts	0x0231, r24
    aed4:	80 93 32 02 	sts	0x0232, r24
			   stClientIP=cipInputIP; 
    aed8:	82 e0       	ldi	r24, 0x02	; 2
    aeda:	e2 c1       	rjmp	.+964    	; 0xb2a0 <FMenuSettingServerIP+0x4de>
		       break;
          case cipInputIP:
			   //Blinking 60% _ 
			   iLoop++;
    aedc:	80 91 25 02 	lds	r24, 0x0225
    aee0:	90 91 26 02 	lds	r25, 0x0226
    aee4:	01 96       	adiw	r24, 0x01	; 1
    aee6:	90 93 26 02 	sts	0x0226, r25
    aeea:	80 93 25 02 	sts	0x0225, r24
			   if ((iLoop%2000)==0){
    aeee:	60 ed       	ldi	r22, 0xD0	; 208
    aef0:	77 e0       	ldi	r23, 0x07	; 7
    aef2:	0e 94 7a aa 	call	0x154f4	; 0x154f4 <__udivmodhi4>
    aef6:	89 2b       	or	r24, r25
    aef8:	81 f4       	brne	.+32     	; 0xaf1a <FMenuSettingServerIP+0x158>
			      lcd_put(y,(x+(iBlok*4)),'_'); 
    aefa:	80 91 23 02 	lds	r24, 0x0223
    aefe:	90 91 24 02 	lds	r25, 0x0224
    af02:	88 0f       	add	r24, r24
    af04:	99 1f       	adc	r25, r25
    af06:	88 0f       	add	r24, r24
    af08:	99 1f       	adc	r25, r25
    af0a:	60 91 2d 02 	lds	r22, 0x022D
    af0e:	68 0f       	add	r22, r24
    af10:	80 91 2c 02 	lds	r24, 0x022C
    af14:	4f e5       	ldi	r20, 0x5F	; 95
    af16:	0e 94 41 a5 	call	0x14a82	; 0x14a82 <lcd_put>
			   }
			   if ((iLoop%2000)==1000){
    af1a:	80 91 25 02 	lds	r24, 0x0225
    af1e:	90 91 26 02 	lds	r25, 0x0226
    af22:	60 ed       	ldi	r22, 0xD0	; 208
    af24:	77 e0       	ldi	r23, 0x07	; 7
    af26:	0e 94 7a aa 	call	0x154f4	; 0x154f4 <__udivmodhi4>
    af2a:	88 5e       	subi	r24, 0xE8	; 232
    af2c:	93 40       	sbci	r25, 0x03	; 3
    af2e:	81 f4       	brne	.+32     	; 0xaf50 <FMenuSettingServerIP+0x18e>
			      lcd_put(y,(x+(iBlok*4)),' '); 
    af30:	80 91 23 02 	lds	r24, 0x0223
    af34:	90 91 24 02 	lds	r25, 0x0224
    af38:	88 0f       	add	r24, r24
    af3a:	99 1f       	adc	r25, r25
    af3c:	88 0f       	add	r24, r24
    af3e:	99 1f       	adc	r25, r25
    af40:	60 91 2d 02 	lds	r22, 0x022D
    af44:	68 0f       	add	r22, r24
    af46:	80 91 2c 02 	lds	r24, 0x022C
    af4a:	40 e2       	ldi	r20, 0x20	; 32
    af4c:	0e 94 41 a5 	call	0x14a82	; 0x14a82 <lcd_put>
			   }
			   //GetKeyPressed
			   keyPressed=_key_scan(1);
    af50:	81 e0       	ldi	r24, 0x01	; 1
    af52:	0e 94 6d a6 	call	0x14cda	; 0x14cda <_key_scan>
    af56:	f8 2e       	mov	r15, r24
			   keyChar=_key_btn(keyPressed);
    af58:	0e 94 ce a5 	call	0x14b9c	; 0x14b9c <_key_btn>
    af5c:	28 2f       	mov	r18, r24
               if ((keyChar>='0')&&(keyChar<='9')){
    af5e:	80 53       	subi	r24, 0x30	; 48
    af60:	8a 30       	cpi	r24, 0x0A	; 10
    af62:	08 f0       	brcs	.+2      	; 0xaf66 <FMenuSettingServerIP+0x1a4>
    af64:	d6 c0       	rjmp	.+428    	; 0xb112 <FMenuSettingServerIP+0x350>
    af66:	80 e5       	ldi	r24, 0x50	; 80
    af68:	93 ec       	ldi	r25, 0xC3	; 195
    af6a:	01 97       	sbiw	r24, 0x01	; 1
    af6c:	f1 f7       	brne	.-4      	; 0xaf6a <FMenuSettingServerIP+0x1a8>
			       _delay_ms(200);
			       IPchar[iInput]=keyChar;
    af6e:	80 91 2b 02 	lds	r24, 0x022B
    af72:	e8 2f       	mov	r30, r24
    af74:	f0 e0       	ldi	r31, 0x00	; 0
    af76:	e0 5d       	subi	r30, 0xD0	; 208
    af78:	fd 4f       	sbci	r31, 0xFD	; 253
    af7a:	20 83       	st	Z, r18
				   iInput++;                    
    af7c:	8f 5f       	subi	r24, 0xFF	; 255
    af7e:	80 93 2b 02 	sts	0x022B, r24
				   for (i=1;i<(iInput+1);i++){
    af82:	81 e0       	ldi	r24, 0x01	; 1
    af84:	1c c0       	rjmp	.+56     	; 0xafbe <FMenuSettingServerIP+0x1fc>
				       lcd_xy(y,((x+(iBlok*4))-(3-i)));_lcd(IPchar[i-1]);
    af86:	80 91 2d 02 	lds	r24, 0x022D
    af8a:	68 0f       	add	r22, r24
    af8c:	63 50       	subi	r22, 0x03	; 3
    af8e:	80 91 23 02 	lds	r24, 0x0223
    af92:	90 91 24 02 	lds	r25, 0x0224
    af96:	88 0f       	add	r24, r24
    af98:	99 1f       	adc	r25, r25
    af9a:	88 0f       	add	r24, r24
    af9c:	99 1f       	adc	r25, r25
    af9e:	68 0f       	add	r22, r24
    afa0:	80 91 2c 02 	lds	r24, 0x022C
    afa4:	0e 94 b3 a4 	call	0x14966	; 0x14966 <lcd_xy>
    afa8:	e0 91 2f 02 	lds	r30, 0x022F
    afac:	f0 e0       	ldi	r31, 0x00	; 0
    afae:	e1 5d       	subi	r30, 0xD1	; 209
    afb0:	fd 4f       	sbci	r31, 0xFD	; 253
    afb2:	80 81       	ld	r24, Z
    afb4:	0e 94 8d a4 	call	0x1491a	; 0x1491a <_lcd>
			   keyChar=_key_btn(keyPressed);
               if ((keyChar>='0')&&(keyChar<='9')){
			       _delay_ms(200);
			       IPchar[iInput]=keyChar;
				   iInput++;                    
				   for (i=1;i<(iInput+1);i++){
    afb8:	80 91 2f 02 	lds	r24, 0x022F
    afbc:	8f 5f       	subi	r24, 0xFF	; 255
    afbe:	80 93 2f 02 	sts	0x022F, r24
    afc2:	70 91 2b 02 	lds	r23, 0x022B
    afc6:	60 91 2f 02 	lds	r22, 0x022F
    afca:	27 2f       	mov	r18, r23
    afcc:	30 e0       	ldi	r19, 0x00	; 0
    afce:	86 2f       	mov	r24, r22
    afd0:	90 e0       	ldi	r25, 0x00	; 0
    afd2:	28 17       	cp	r18, r24
    afd4:	39 07       	cpc	r19, r25
    afd6:	bc f6       	brge	.-82     	; 0xaf86 <FMenuSettingServerIP+0x1c4>
				       lcd_xy(y,((x+(iBlok*4))-(3-i)));_lcd(IPchar[i-1]);
				   }
                   //NextInput
				   if (iInput>=3){
    afd8:	73 30       	cpi	r23, 0x03	; 3
    afda:	08 f4       	brcc	.+2      	; 0xafde <FMenuSettingServerIP+0x21c>
    afdc:	91 c0       	rjmp	.+290    	; 0xb100 <FMenuSettingServerIP+0x33e>
				       IP_blok[iBlok]=((IPchar[0]-'0')*100)+((IPchar[1]-'0')*10)+((IPchar[2]-'0'));
    afde:	40 91 23 02 	lds	r20, 0x0223
    afe2:	50 91 24 02 	lds	r21, 0x0224
    afe6:	fa 01       	movw	r30, r20
    afe8:	e9 5d       	subi	r30, 0xD9	; 217
    afea:	fd 4f       	sbci	r31, 0xFD	; 253
    afec:	20 91 32 02 	lds	r18, 0x0232
    aff0:	20 5d       	subi	r18, 0xD0	; 208
    aff2:	80 91 30 02 	lds	r24, 0x0230
    aff6:	34 e6       	ldi	r19, 0x64	; 100
    aff8:	83 9f       	mul	r24, r19
    affa:	c0 01       	movw	r24, r0
    affc:	11 24       	eor	r1, r1
    affe:	28 0f       	add	r18, r24
    b000:	80 91 31 02 	lds	r24, 0x0231
    b004:	3a e0       	ldi	r19, 0x0A	; 10
    b006:	83 9f       	mul	r24, r19
    b008:	c0 01       	movw	r24, r0
    b00a:	11 24       	eor	r1, r1
    b00c:	28 0f       	add	r18, r24
    b00e:	20 83       	st	Z, r18
					   IPchar[0]='0';IPchar[1]='0';IPchar[2]='0';
    b010:	80 e3       	ldi	r24, 0x30	; 48
    b012:	80 93 30 02 	sts	0x0230, r24
    b016:	80 93 31 02 	sts	0x0231, r24
    b01a:	80 93 32 02 	sts	0x0232, r24
					   //Reposition Value
					   lcd_printf(y,((x+(iBlok*4))-iInput),PSTR("   "));
    b01e:	44 0f       	add	r20, r20
    b020:	55 1f       	adc	r21, r21
    b022:	44 0f       	add	r20, r20
    b024:	55 1f       	adc	r21, r21
    b026:	60 91 2d 02 	lds	r22, 0x022D
    b02a:	64 0f       	add	r22, r20
    b02c:	67 1b       	sub	r22, r23
    b02e:	80 91 2c 02 	lds	r24, 0x022C
    b032:	42 e6       	ldi	r20, 0x62	; 98
    b034:	54 e1       	ldi	r21, 0x14	; 20
    b036:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
					   sprintf_P(lcdteks,PSTR("%d"),IP_blok[iBlok]);
    b03a:	00 d0       	rcall	.+0      	; 0xb03c <FMenuSettingServerIP+0x27a>
    b03c:	00 d0       	rcall	.+0      	; 0xb03e <FMenuSettingServerIP+0x27c>
    b03e:	00 d0       	rcall	.+0      	; 0xb040 <FMenuSettingServerIP+0x27e>
    b040:	ad b7       	in	r26, 0x3d	; 61
    b042:	be b7       	in	r27, 0x3e	; 62
    b044:	11 96       	adiw	r26, 0x01	; 1
    b046:	8e 01       	movw	r16, r28
    b048:	0f 5f       	subi	r16, 0xFF	; 255
    b04a:	1f 4f       	sbci	r17, 0xFF	; 255
    b04c:	ed b7       	in	r30, 0x3d	; 61
    b04e:	fe b7       	in	r31, 0x3e	; 62
    b050:	12 83       	std	Z+2, r17	; 0x02
    b052:	01 83       	std	Z+1, r16	; 0x01
    b054:	8f e5       	ldi	r24, 0x5F	; 95
    b056:	94 e1       	ldi	r25, 0x14	; 20
    b058:	13 96       	adiw	r26, 0x03	; 3
    b05a:	9c 93       	st	X, r25
    b05c:	8e 93       	st	-X, r24
    b05e:	12 97       	sbiw	r26, 0x02	; 2
    b060:	e0 91 23 02 	lds	r30, 0x0223
    b064:	f0 91 24 02 	lds	r31, 0x0224
    b068:	e9 5d       	subi	r30, 0xD9	; 217
    b06a:	fd 4f       	sbci	r31, 0xFD	; 253
    b06c:	80 81       	ld	r24, Z
    b06e:	14 96       	adiw	r26, 0x04	; 4
    b070:	8c 93       	st	X, r24
    b072:	14 97       	sbiw	r26, 0x04	; 4
    b074:	15 96       	adiw	r26, 0x05	; 5
    b076:	1c 92       	st	X, r1
    b078:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
                       lcd_print(y,1+((x+(iBlok*4))-strlen(lcdteks)),lcdteks);
    b07c:	f8 01       	movw	r30, r16
    b07e:	01 90       	ld	r0, Z+
    b080:	00 20       	and	r0, r0
    b082:	e9 f7       	brne	.-6      	; 0xb07e <FMenuSettingServerIP+0x2bc>
    b084:	31 97       	sbiw	r30, 0x01	; 1
    b086:	e0 1b       	sub	r30, r16
    b088:	f1 0b       	sbc	r31, r17
    b08a:	8d b7       	in	r24, 0x3d	; 61
    b08c:	9e b7       	in	r25, 0x3e	; 62
    b08e:	06 96       	adiw	r24, 0x06	; 6
    b090:	0f b6       	in	r0, 0x3f	; 63
    b092:	f8 94       	cli
    b094:	9e bf       	out	0x3e, r25	; 62
    b096:	0f be       	out	0x3f, r0	; 63
    b098:	8d bf       	out	0x3d, r24	; 61
    b09a:	60 91 2d 02 	lds	r22, 0x022D
    b09e:	6f 5f       	subi	r22, 0xFF	; 255
    b0a0:	80 91 23 02 	lds	r24, 0x0223
    b0a4:	90 91 24 02 	lds	r25, 0x0224
    b0a8:	88 0f       	add	r24, r24
    b0aa:	99 1f       	adc	r25, r25
    b0ac:	88 0f       	add	r24, r24
    b0ae:	99 1f       	adc	r25, r25
    b0b0:	68 0f       	add	r22, r24
    b0b2:	6e 1b       	sub	r22, r30
    b0b4:	80 91 2c 02 	lds	r24, 0x022C
    b0b8:	a8 01       	movw	r20, r16
    b0ba:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
					   if (iBlok>0)lcd_printf(y,1+((x+((iBlok-1)*4))),PSTR("."));
    b0be:	80 91 23 02 	lds	r24, 0x0223
    b0c2:	90 91 24 02 	lds	r25, 0x0224
    b0c6:	00 97       	sbiw	r24, 0x00	; 0
    b0c8:	81 f0       	breq	.+32     	; 0xb0ea <FMenuSettingServerIP+0x328>
    b0ca:	60 91 2d 02 	lds	r22, 0x022D
    b0ce:	6f 5f       	subi	r22, 0xFF	; 255
    b0d0:	81 50       	subi	r24, 0x01	; 1
    b0d2:	90 4c       	sbci	r25, 0xC0	; 192
    b0d4:	88 0f       	add	r24, r24
    b0d6:	99 1f       	adc	r25, r25
    b0d8:	88 0f       	add	r24, r24
    b0da:	99 1f       	adc	r25, r25
    b0dc:	68 0f       	add	r22, r24
    b0de:	80 91 2c 02 	lds	r24, 0x022C
    b0e2:	4d e5       	ldi	r20, 0x5D	; 93
    b0e4:	54 e1       	ldi	r21, 0x14	; 20
    b0e6:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
					   iInput=0;
    b0ea:	10 92 2b 02 	sts	0x022B, r1
					   iBlok++;
    b0ee:	80 91 23 02 	lds	r24, 0x0223
    b0f2:	90 91 24 02 	lds	r25, 0x0224
    b0f6:	01 96       	adiw	r24, 0x01	; 1
    b0f8:	90 93 24 02 	sts	0x0224, r25
    b0fc:	80 93 23 02 	sts	0x0223, r24

				   }
				   if (iBlok>=4)stClientIP=cipStoreIPblok;
    b100:	80 91 23 02 	lds	r24, 0x0223
    b104:	90 91 24 02 	lds	r25, 0x0224
    b108:	04 97       	sbiw	r24, 0x04	; 4
    b10a:	18 f0       	brcs	.+6      	; 0xb112 <FMenuSettingServerIP+0x350>
    b10c:	84 e0       	ldi	r24, 0x04	; 4
    b10e:	80 93 58 01 	sts	0x0158, r24
			   }

			   if (keyPressed==_KEY_CANCEL){
    b112:	97 ee       	ldi	r25, 0xE7	; 231
    b114:	f9 16       	cp	r15, r25
    b116:	09 f4       	brne	.+2      	; 0xb11a <FMenuSettingServerIP+0x358>
    b118:	c2 c0       	rjmp	.+388    	; 0xb29e <FMenuSettingServerIP+0x4dc>
			       stClientIP=cipExit; 
			   }
			   else
			   if (keyPressed==_KEY_ENTER){
    b11a:	a7 eb       	ldi	r26, 0xB7	; 183
    b11c:	fa 16       	cp	r15, r26
    b11e:	09 f0       	breq	.+2      	; 0xb122 <FMenuSettingServerIP+0x360>
    b120:	c7 c0       	rjmp	.+398    	; 0xb2b0 <FMenuSettingServerIP+0x4ee>
			       //NextInput
			       if (iBlok<4){
    b122:	40 91 23 02 	lds	r20, 0x0223
    b126:	50 91 24 02 	lds	r21, 0x0224
    b12a:	44 30       	cpi	r20, 0x04	; 4
    b12c:	51 05       	cpc	r21, r1
    b12e:	08 f0       	brcs	.+2      	; 0xb132 <FMenuSettingServerIP+0x370>
    b130:	a6 c0       	rjmp	.+332    	; 0xb27e <FMenuSettingServerIP+0x4bc>
				       if (iInput==1)IP_blok[iBlok]=((IPchar[0]-'0'));
    b132:	80 91 2b 02 	lds	r24, 0x022B
    b136:	81 30       	cpi	r24, 0x01	; 1
    b138:	41 f4       	brne	.+16     	; 0xb14a <FMenuSettingServerIP+0x388>
    b13a:	fa 01       	movw	r30, r20
    b13c:	e9 5d       	subi	r30, 0xD9	; 217
    b13e:	fd 4f       	sbci	r31, 0xFD	; 253
    b140:	80 91 30 02 	lds	r24, 0x0230
    b144:	80 53       	subi	r24, 0x30	; 48
    b146:	80 83       	st	Z, r24
    b148:	22 c0       	rjmp	.+68     	; 0xb18e <FMenuSettingServerIP+0x3cc>
					   if (iInput==2)IP_blok[iBlok]=((IPchar[0]-'0')*10)+(IPchar[1]-'0');
    b14a:	82 30       	cpi	r24, 0x02	; 2
    b14c:	49 f4       	brne	.+18     	; 0xb160 <FMenuSettingServerIP+0x39e>
    b14e:	fa 01       	movw	r30, r20
    b150:	e9 5d       	subi	r30, 0xD9	; 217
    b152:	fd 4f       	sbci	r31, 0xFD	; 253
    b154:	20 91 31 02 	lds	r18, 0x0231
    b158:	20 51       	subi	r18, 0x10	; 16
    b15a:	80 91 30 02 	lds	r24, 0x0230
    b15e:	11 c0       	rjmp	.+34     	; 0xb182 <FMenuSettingServerIP+0x3c0>
					   if (iInput==3)IP_blok[iBlok]=((IPchar[0]-'0')*100)+((IPchar[1]-'0')*10)+((IPchar[2]-'0'));
    b160:	83 30       	cpi	r24, 0x03	; 3
    b162:	a9 f4       	brne	.+42     	; 0xb18e <FMenuSettingServerIP+0x3cc>
    b164:	fa 01       	movw	r30, r20
    b166:	e9 5d       	subi	r30, 0xD9	; 217
    b168:	fd 4f       	sbci	r31, 0xFD	; 253
    b16a:	20 91 32 02 	lds	r18, 0x0232
    b16e:	20 5d       	subi	r18, 0xD0	; 208
    b170:	80 91 30 02 	lds	r24, 0x0230
    b174:	34 e6       	ldi	r19, 0x64	; 100
    b176:	83 9f       	mul	r24, r19
    b178:	c0 01       	movw	r24, r0
    b17a:	11 24       	eor	r1, r1
    b17c:	28 0f       	add	r18, r24
    b17e:	80 91 31 02 	lds	r24, 0x0231
    b182:	3a e0       	ldi	r19, 0x0A	; 10
    b184:	83 9f       	mul	r24, r19
    b186:	c0 01       	movw	r24, r0
    b188:	11 24       	eor	r1, r1
    b18a:	28 0f       	add	r18, r24
    b18c:	20 83       	st	Z, r18
				       
					   IPchar[0]='0';IPchar[1]='0';IPchar[2]='0';
    b18e:	80 e3       	ldi	r24, 0x30	; 48
    b190:	80 93 30 02 	sts	0x0230, r24
    b194:	80 93 31 02 	sts	0x0231, r24
    b198:	80 93 32 02 	sts	0x0232, r24
					   //Reposition Value
					   lcd_printf(y,((x+(iBlok*4))-3),PSTR("   "));
    b19c:	60 91 2d 02 	lds	r22, 0x022D
    b1a0:	63 50       	subi	r22, 0x03	; 3
    b1a2:	44 0f       	add	r20, r20
    b1a4:	55 1f       	adc	r21, r21
    b1a6:	44 0f       	add	r20, r20
    b1a8:	55 1f       	adc	r21, r21
    b1aa:	64 0f       	add	r22, r20
    b1ac:	80 91 2c 02 	lds	r24, 0x022C
    b1b0:	49 e5       	ldi	r20, 0x59	; 89
    b1b2:	54 e1       	ldi	r21, 0x14	; 20
    b1b4:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
					   sprintf_P(lcdteks,PSTR("%d"),IP_blok[iBlok]);
    b1b8:	00 d0       	rcall	.+0      	; 0xb1ba <FMenuSettingServerIP+0x3f8>
    b1ba:	00 d0       	rcall	.+0      	; 0xb1bc <FMenuSettingServerIP+0x3fa>
    b1bc:	00 d0       	rcall	.+0      	; 0xb1be <FMenuSettingServerIP+0x3fc>
    b1be:	ad b7       	in	r26, 0x3d	; 61
    b1c0:	be b7       	in	r27, 0x3e	; 62
    b1c2:	11 96       	adiw	r26, 0x01	; 1
    b1c4:	8e 01       	movw	r16, r28
    b1c6:	0f 5f       	subi	r16, 0xFF	; 255
    b1c8:	1f 4f       	sbci	r17, 0xFF	; 255
    b1ca:	ed b7       	in	r30, 0x3d	; 61
    b1cc:	fe b7       	in	r31, 0x3e	; 62
    b1ce:	12 83       	std	Z+2, r17	; 0x02
    b1d0:	01 83       	std	Z+1, r16	; 0x01
    b1d2:	86 e5       	ldi	r24, 0x56	; 86
    b1d4:	94 e1       	ldi	r25, 0x14	; 20
    b1d6:	13 96       	adiw	r26, 0x03	; 3
    b1d8:	9c 93       	st	X, r25
    b1da:	8e 93       	st	-X, r24
    b1dc:	12 97       	sbiw	r26, 0x02	; 2
    b1de:	e0 91 23 02 	lds	r30, 0x0223
    b1e2:	f0 91 24 02 	lds	r31, 0x0224
    b1e6:	e9 5d       	subi	r30, 0xD9	; 217
    b1e8:	fd 4f       	sbci	r31, 0xFD	; 253
    b1ea:	80 81       	ld	r24, Z
    b1ec:	14 96       	adiw	r26, 0x04	; 4
    b1ee:	8c 93       	st	X, r24
    b1f0:	14 97       	sbiw	r26, 0x04	; 4
    b1f2:	15 96       	adiw	r26, 0x05	; 5
    b1f4:	1c 92       	st	X, r1
    b1f6:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
                       lcd_print(y,1+((x+(iBlok*4))-strlen(lcdteks)),lcdteks);
    b1fa:	f8 01       	movw	r30, r16
    b1fc:	01 90       	ld	r0, Z+
    b1fe:	00 20       	and	r0, r0
    b200:	e9 f7       	brne	.-6      	; 0xb1fc <FMenuSettingServerIP+0x43a>
    b202:	31 97       	sbiw	r30, 0x01	; 1
    b204:	e0 1b       	sub	r30, r16
    b206:	f1 0b       	sbc	r31, r17
    b208:	8d b7       	in	r24, 0x3d	; 61
    b20a:	9e b7       	in	r25, 0x3e	; 62
    b20c:	06 96       	adiw	r24, 0x06	; 6
    b20e:	0f b6       	in	r0, 0x3f	; 63
    b210:	f8 94       	cli
    b212:	9e bf       	out	0x3e, r25	; 62
    b214:	0f be       	out	0x3f, r0	; 63
    b216:	8d bf       	out	0x3d, r24	; 61
    b218:	60 91 2d 02 	lds	r22, 0x022D
    b21c:	6f 5f       	subi	r22, 0xFF	; 255
    b21e:	80 91 23 02 	lds	r24, 0x0223
    b222:	90 91 24 02 	lds	r25, 0x0224
    b226:	88 0f       	add	r24, r24
    b228:	99 1f       	adc	r25, r25
    b22a:	88 0f       	add	r24, r24
    b22c:	99 1f       	adc	r25, r25
    b22e:	68 0f       	add	r22, r24
    b230:	6e 1b       	sub	r22, r30
    b232:	80 91 2c 02 	lds	r24, 0x022C
    b236:	a8 01       	movw	r20, r16
    b238:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>

					   if (iBlok>0)lcd_printf(y,1+((x+((iBlok-1)*4))),PSTR("."));
    b23c:	80 91 23 02 	lds	r24, 0x0223
    b240:	90 91 24 02 	lds	r25, 0x0224
    b244:	00 97       	sbiw	r24, 0x00	; 0
    b246:	81 f0       	breq	.+32     	; 0xb268 <FMenuSettingServerIP+0x4a6>
    b248:	60 91 2d 02 	lds	r22, 0x022D
    b24c:	6f 5f       	subi	r22, 0xFF	; 255
    b24e:	81 50       	subi	r24, 0x01	; 1
    b250:	90 4c       	sbci	r25, 0xC0	; 192
    b252:	88 0f       	add	r24, r24
    b254:	99 1f       	adc	r25, r25
    b256:	88 0f       	add	r24, r24
    b258:	99 1f       	adc	r25, r25
    b25a:	68 0f       	add	r22, r24
    b25c:	80 91 2c 02 	lds	r24, 0x022C
    b260:	44 e5       	ldi	r20, 0x54	; 84
    b262:	54 e1       	ldi	r21, 0x14	; 20
    b264:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
				       iInput=0;
    b268:	10 92 2b 02 	sts	0x022B, r1
					   iBlok++;	   
    b26c:	80 91 23 02 	lds	r24, 0x0223
    b270:	90 91 24 02 	lds	r25, 0x0224
    b274:	01 96       	adiw	r24, 0x01	; 1
    b276:	90 93 24 02 	sts	0x0224, r25
    b27a:	80 93 23 02 	sts	0x0223, r24
				   }
				   if (iBlok>=4)stClientIP=cipStoreIPblok;
    b27e:	80 91 23 02 	lds	r24, 0x0223
    b282:	90 91 24 02 	lds	r25, 0x0224
    b286:	04 97       	sbiw	r24, 0x04	; 4
    b288:	98 f0       	brcs	.+38     	; 0xb2b0 <FMenuSettingServerIP+0x4ee>
    b28a:	84 e0       	ldi	r24, 0x04	; 4
    b28c:	09 c0       	rjmp	.+18     	; 0xb2a0 <FMenuSettingServerIP+0x4de>
			   }
		       break;
          case cipStoreIPblok:
		       //UpdateIPblok
			   eeprom_write_block((const void*) &IP_blok,(const void*) &DefServerIP,4);
    b28e:	87 e2       	ldi	r24, 0x27	; 39
    b290:	92 e0       	ldi	r25, 0x02	; 2
    b292:	6c e2       	ldi	r22, 0x2C	; 44
    b294:	70 e0       	ldi	r23, 0x00	; 0
    b296:	44 e0       	ldi	r20, 0x04	; 4
    b298:	50 e0       	ldi	r21, 0x00	; 0
    b29a:	0e 94 48 ad 	call	0x15a90	; 0x15a90 <__eewr_block_m128>
			   stClientIP=cipExit;
    b29e:	83 e0       	ldi	r24, 0x03	; 3
    b2a0:	80 93 58 01 	sts	0x0158, r24
    b2a4:	05 c0       	rjmp	.+10     	; 0xb2b0 <FMenuSettingServerIP+0x4ee>
		       break; 
          case cipExit://Cancel IPConfig
			   stClientIP=cipInit;
    b2a6:	81 e0       	ldi	r24, 0x01	; 1
    b2a8:	80 93 58 01 	sts	0x0158, r24
			   Result=MENU_DONE;
    b2ac:	80 93 2e 02 	sts	0x022E, r24
		       break;     
		  }//EndSwitch	 
	return Result;
}
    b2b0:	80 91 2e 02 	lds	r24, 0x022E
    b2b4:	64 96       	adiw	r28, 0x14	; 20
    b2b6:	0f b6       	in	r0, 0x3f	; 63
    b2b8:	f8 94       	cli
    b2ba:	de bf       	out	0x3e, r29	; 62
    b2bc:	0f be       	out	0x3f, r0	; 63
    b2be:	cd bf       	out	0x3d, r28	; 61
    b2c0:	cf 91       	pop	r28
    b2c2:	df 91       	pop	r29
    b2c4:	1f 91       	pop	r17
    b2c6:	0f 91       	pop	r16
    b2c8:	ff 90       	pop	r15
    b2ca:	08 95       	ret

0000b2cc <FMenuSettingClientIP>:





char FMenuSettingClientIP(){
    b2cc:	ff 92       	push	r15
    b2ce:	0f 93       	push	r16
    b2d0:	1f 93       	push	r17
    b2d2:	df 93       	push	r29
    b2d4:	cf 93       	push	r28
    b2d6:	cd b7       	in	r28, 0x3d	; 61
    b2d8:	de b7       	in	r29, 0x3e	; 62
    b2da:	64 97       	sbiw	r28, 0x14	; 20
    b2dc:	0f b6       	in	r0, 0x3f	; 63
    b2de:	f8 94       	cli
    b2e0:	de bf       	out	0x3e, r29	; 62
    b2e2:	0f be       	out	0x3f, r0	; 63
    b2e4:	cd bf       	out	0x3d, r28	; 61
     //Client IP
     //Old: 192.168.123.000
	 //New:   _.   .   .
	 //--------------------
	 //*)cancel    #)next
     Result=MENU_NONE;
    b2e6:	10 92 3e 02 	sts	0x023E, r1
	 switch(stClientIP){
    b2ea:	80 91 59 01 	lds	r24, 0x0159
    b2ee:	82 30       	cpi	r24, 0x02	; 2
    b2f0:	09 f4       	brne	.+2      	; 0xb2f4 <FMenuSettingClientIP+0x28>
    b2f2:	79 c0       	rjmp	.+242    	; 0xb3e6 <FMenuSettingClientIP+0x11a>
    b2f4:	83 30       	cpi	r24, 0x03	; 3
    b2f6:	20 f4       	brcc	.+8      	; 0xb300 <FMenuSettingClientIP+0x34>
    b2f8:	81 30       	cpi	r24, 0x01	; 1
    b2fa:	09 f0       	breq	.+2      	; 0xb2fe <FMenuSettingClientIP+0x32>
    b2fc:	5e c2       	rjmp	.+1212   	; 0xb7ba <FMenuSettingClientIP+0x4ee>
    b2fe:	07 c0       	rjmp	.+14     	; 0xb30e <FMenuSettingClientIP+0x42>
    b300:	83 30       	cpi	r24, 0x03	; 3
    b302:	09 f4       	brne	.+2      	; 0xb306 <FMenuSettingClientIP+0x3a>
    b304:	55 c2       	rjmp	.+1194   	; 0xb7b0 <FMenuSettingClientIP+0x4e4>
    b306:	84 30       	cpi	r24, 0x04	; 4
    b308:	09 f0       	breq	.+2      	; 0xb30c <FMenuSettingClientIP+0x40>
    b30a:	57 c2       	rjmp	.+1198   	; 0xb7ba <FMenuSettingClientIP+0x4ee>
    b30c:	45 c2       	rjmp	.+1162   	; 0xb798 <FMenuSettingClientIP+0x4cc>
		  case cipInit:
			   lcd_clear();
    b30e:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
	           lcd_printf(1,1,PSTR("Client IP"));
    b312:	81 e0       	ldi	r24, 0x01	; 1
    b314:	61 e0       	ldi	r22, 0x01	; 1
    b316:	48 ef       	ldi	r20, 0xF8	; 248
    b318:	54 e1       	ldi	r21, 0x14	; 20
    b31a:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
			   eeprom_read_block((void*)&IP_blok,(const void*)&DefClientIP,4);
    b31e:	87 e3       	ldi	r24, 0x37	; 55
    b320:	92 e0       	ldi	r25, 0x02	; 2
    b322:	68 e2       	ldi	r22, 0x28	; 40
    b324:	70 e0       	ldi	r23, 0x00	; 0
    b326:	44 e0       	ldi	r20, 0x04	; 4
    b328:	50 e0       	ldi	r21, 0x00	; 0
    b32a:	0e 94 30 ad 	call	0x15a60	; 0x15a60 <__eerd_block_m128>
	           sprintf_P(lcdteks,PSTR("Old: %d.%d.%d.%d"),IP_blok[0],IP_blok[1],IP_blok[2],IP_blok[3]);
    b32e:	8d b7       	in	r24, 0x3d	; 61
    b330:	9e b7       	in	r25, 0x3e	; 62
    b332:	0c 97       	sbiw	r24, 0x0c	; 12
    b334:	0f b6       	in	r0, 0x3f	; 63
    b336:	f8 94       	cli
    b338:	9e bf       	out	0x3e, r25	; 62
    b33a:	0f be       	out	0x3f, r0	; 63
    b33c:	8d bf       	out	0x3d, r24	; 61
    b33e:	ed b7       	in	r30, 0x3d	; 61
    b340:	fe b7       	in	r31, 0x3e	; 62
    b342:	31 96       	adiw	r30, 0x01	; 1
    b344:	8e 01       	movw	r16, r28
    b346:	0f 5f       	subi	r16, 0xFF	; 255
    b348:	1f 4f       	sbci	r17, 0xFF	; 255
    b34a:	ad b7       	in	r26, 0x3d	; 61
    b34c:	be b7       	in	r27, 0x3e	; 62
    b34e:	12 96       	adiw	r26, 0x02	; 2
    b350:	1c 93       	st	X, r17
    b352:	0e 93       	st	-X, r16
    b354:	11 97       	sbiw	r26, 0x01	; 1
    b356:	87 ee       	ldi	r24, 0xE7	; 231
    b358:	94 e1       	ldi	r25, 0x14	; 20
    b35a:	93 83       	std	Z+3, r25	; 0x03
    b35c:	82 83       	std	Z+2, r24	; 0x02
    b35e:	80 91 37 02 	lds	r24, 0x0237
    b362:	84 83       	std	Z+4, r24	; 0x04
    b364:	15 82       	std	Z+5, r1	; 0x05
    b366:	80 91 38 02 	lds	r24, 0x0238
    b36a:	86 83       	std	Z+6, r24	; 0x06
    b36c:	17 82       	std	Z+7, r1	; 0x07
    b36e:	80 91 39 02 	lds	r24, 0x0239
    b372:	80 87       	std	Z+8, r24	; 0x08
    b374:	11 86       	std	Z+9, r1	; 0x09
    b376:	80 91 3a 02 	lds	r24, 0x023A
    b37a:	82 87       	std	Z+10, r24	; 0x0a
    b37c:	13 86       	std	Z+11, r1	; 0x0b
    b37e:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	           lcd_print(2,1,lcdteks);
    b382:	ed b7       	in	r30, 0x3d	; 61
    b384:	fe b7       	in	r31, 0x3e	; 62
    b386:	3c 96       	adiw	r30, 0x0c	; 12
    b388:	0f b6       	in	r0, 0x3f	; 63
    b38a:	f8 94       	cli
    b38c:	fe bf       	out	0x3e, r31	; 62
    b38e:	0f be       	out	0x3f, r0	; 63
    b390:	ed bf       	out	0x3d, r30	; 61
    b392:	82 e0       	ldi	r24, 0x02	; 2
    b394:	61 e0       	ldi	r22, 0x01	; 1
    b396:	a8 01       	movw	r20, r16
    b398:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
			   lcd_printf(3,1,PSTR("New:   _.   .   .   "));
    b39c:	83 e0       	ldi	r24, 0x03	; 3
    b39e:	61 e0       	ldi	r22, 0x01	; 1
    b3a0:	42 ed       	ldi	r20, 0xD2	; 210
    b3a2:	54 e1       	ldi	r21, 0x14	; 20
    b3a4:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
			   lcd_printf(4,1,PSTR("[*]cancel  [#]next  "));
    b3a8:	84 e0       	ldi	r24, 0x04	; 4
    b3aa:	61 e0       	ldi	r22, 0x01	; 1
    b3ac:	4d eb       	ldi	r20, 0xBD	; 189
    b3ae:	54 e1       	ldi	r21, 0x14	; 20
    b3b0:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
               iLoop=0;
    b3b4:	10 92 36 02 	sts	0x0236, r1
    b3b8:	10 92 35 02 	sts	0x0235, r1
			   y=3,x=8;
    b3bc:	83 e0       	ldi	r24, 0x03	; 3
    b3be:	80 93 3c 02 	sts	0x023C, r24
    b3c2:	88 e0       	ldi	r24, 0x08	; 8
    b3c4:	80 93 3d 02 	sts	0x023D, r24
			   iInput=0; iBlok=0;
    b3c8:	10 92 3b 02 	sts	0x023B, r1
    b3cc:	10 92 34 02 	sts	0x0234, r1
    b3d0:	10 92 33 02 	sts	0x0233, r1
			   IPchar[0]='0';IPchar[1]='0';IPchar[2]='0';
    b3d4:	80 e3       	ldi	r24, 0x30	; 48
    b3d6:	80 93 40 02 	sts	0x0240, r24
    b3da:	80 93 41 02 	sts	0x0241, r24
    b3de:	80 93 42 02 	sts	0x0242, r24
			   stClientIP=cipInputIP; 
    b3e2:	82 e0       	ldi	r24, 0x02	; 2
    b3e4:	e2 c1       	rjmp	.+964    	; 0xb7aa <FMenuSettingClientIP+0x4de>
		       break;
          case cipInputIP:
			   //Blinking 60% _ 
			   iLoop++;
    b3e6:	80 91 35 02 	lds	r24, 0x0235
    b3ea:	90 91 36 02 	lds	r25, 0x0236
    b3ee:	01 96       	adiw	r24, 0x01	; 1
    b3f0:	90 93 36 02 	sts	0x0236, r25
    b3f4:	80 93 35 02 	sts	0x0235, r24
			   if ((iLoop%2000)==0){
    b3f8:	60 ed       	ldi	r22, 0xD0	; 208
    b3fa:	77 e0       	ldi	r23, 0x07	; 7
    b3fc:	0e 94 7a aa 	call	0x154f4	; 0x154f4 <__udivmodhi4>
    b400:	89 2b       	or	r24, r25
    b402:	81 f4       	brne	.+32     	; 0xb424 <FMenuSettingClientIP+0x158>
			      lcd_put(y,(x+(iBlok*4)),'_'); 
    b404:	80 91 33 02 	lds	r24, 0x0233
    b408:	90 91 34 02 	lds	r25, 0x0234
    b40c:	88 0f       	add	r24, r24
    b40e:	99 1f       	adc	r25, r25
    b410:	88 0f       	add	r24, r24
    b412:	99 1f       	adc	r25, r25
    b414:	60 91 3d 02 	lds	r22, 0x023D
    b418:	68 0f       	add	r22, r24
    b41a:	80 91 3c 02 	lds	r24, 0x023C
    b41e:	4f e5       	ldi	r20, 0x5F	; 95
    b420:	0e 94 41 a5 	call	0x14a82	; 0x14a82 <lcd_put>
			   }
			   if ((iLoop%2000)==1000){
    b424:	80 91 35 02 	lds	r24, 0x0235
    b428:	90 91 36 02 	lds	r25, 0x0236
    b42c:	60 ed       	ldi	r22, 0xD0	; 208
    b42e:	77 e0       	ldi	r23, 0x07	; 7
    b430:	0e 94 7a aa 	call	0x154f4	; 0x154f4 <__udivmodhi4>
    b434:	88 5e       	subi	r24, 0xE8	; 232
    b436:	93 40       	sbci	r25, 0x03	; 3
    b438:	81 f4       	brne	.+32     	; 0xb45a <FMenuSettingClientIP+0x18e>
			      lcd_put(y,(x+(iBlok*4)),' '); 
    b43a:	80 91 33 02 	lds	r24, 0x0233
    b43e:	90 91 34 02 	lds	r25, 0x0234
    b442:	88 0f       	add	r24, r24
    b444:	99 1f       	adc	r25, r25
    b446:	88 0f       	add	r24, r24
    b448:	99 1f       	adc	r25, r25
    b44a:	60 91 3d 02 	lds	r22, 0x023D
    b44e:	68 0f       	add	r22, r24
    b450:	80 91 3c 02 	lds	r24, 0x023C
    b454:	40 e2       	ldi	r20, 0x20	; 32
    b456:	0e 94 41 a5 	call	0x14a82	; 0x14a82 <lcd_put>
			   }
			   //GetKeyPressed
			   keyPressed=_key_scan(1);
    b45a:	81 e0       	ldi	r24, 0x01	; 1
    b45c:	0e 94 6d a6 	call	0x14cda	; 0x14cda <_key_scan>
    b460:	f8 2e       	mov	r15, r24
			   keyChar=_key_btn(keyPressed);
    b462:	0e 94 ce a5 	call	0x14b9c	; 0x14b9c <_key_btn>
    b466:	28 2f       	mov	r18, r24
               if ((keyChar>='0')&&(keyChar<='9')){
    b468:	80 53       	subi	r24, 0x30	; 48
    b46a:	8a 30       	cpi	r24, 0x0A	; 10
    b46c:	08 f0       	brcs	.+2      	; 0xb470 <FMenuSettingClientIP+0x1a4>
    b46e:	d6 c0       	rjmp	.+428    	; 0xb61c <FMenuSettingClientIP+0x350>
    b470:	80 e5       	ldi	r24, 0x50	; 80
    b472:	93 ec       	ldi	r25, 0xC3	; 195
    b474:	01 97       	sbiw	r24, 0x01	; 1
    b476:	f1 f7       	brne	.-4      	; 0xb474 <FMenuSettingClientIP+0x1a8>
			       _delay_ms(200);
			       IPchar[iInput]=keyChar;
    b478:	80 91 3b 02 	lds	r24, 0x023B
    b47c:	e8 2f       	mov	r30, r24
    b47e:	f0 e0       	ldi	r31, 0x00	; 0
    b480:	e0 5c       	subi	r30, 0xC0	; 192
    b482:	fd 4f       	sbci	r31, 0xFD	; 253
    b484:	20 83       	st	Z, r18
				   iInput++;                    
    b486:	8f 5f       	subi	r24, 0xFF	; 255
    b488:	80 93 3b 02 	sts	0x023B, r24
				   for (i=1;i<(iInput+1);i++){
    b48c:	81 e0       	ldi	r24, 0x01	; 1
    b48e:	1c c0       	rjmp	.+56     	; 0xb4c8 <FMenuSettingClientIP+0x1fc>
				       lcd_xy(y,((x+(iBlok*4))-(3-i)));_lcd(IPchar[i-1]);
    b490:	80 91 3d 02 	lds	r24, 0x023D
    b494:	68 0f       	add	r22, r24
    b496:	63 50       	subi	r22, 0x03	; 3
    b498:	80 91 33 02 	lds	r24, 0x0233
    b49c:	90 91 34 02 	lds	r25, 0x0234
    b4a0:	88 0f       	add	r24, r24
    b4a2:	99 1f       	adc	r25, r25
    b4a4:	88 0f       	add	r24, r24
    b4a6:	99 1f       	adc	r25, r25
    b4a8:	68 0f       	add	r22, r24
    b4aa:	80 91 3c 02 	lds	r24, 0x023C
    b4ae:	0e 94 b3 a4 	call	0x14966	; 0x14966 <lcd_xy>
    b4b2:	e0 91 3f 02 	lds	r30, 0x023F
    b4b6:	f0 e0       	ldi	r31, 0x00	; 0
    b4b8:	e1 5c       	subi	r30, 0xC1	; 193
    b4ba:	fd 4f       	sbci	r31, 0xFD	; 253
    b4bc:	80 81       	ld	r24, Z
    b4be:	0e 94 8d a4 	call	0x1491a	; 0x1491a <_lcd>
			   keyChar=_key_btn(keyPressed);
               if ((keyChar>='0')&&(keyChar<='9')){
			       _delay_ms(200);
			       IPchar[iInput]=keyChar;
				   iInput++;                    
				   for (i=1;i<(iInput+1);i++){
    b4c2:	80 91 3f 02 	lds	r24, 0x023F
    b4c6:	8f 5f       	subi	r24, 0xFF	; 255
    b4c8:	80 93 3f 02 	sts	0x023F, r24
    b4cc:	70 91 3b 02 	lds	r23, 0x023B
    b4d0:	60 91 3f 02 	lds	r22, 0x023F
    b4d4:	27 2f       	mov	r18, r23
    b4d6:	30 e0       	ldi	r19, 0x00	; 0
    b4d8:	86 2f       	mov	r24, r22
    b4da:	90 e0       	ldi	r25, 0x00	; 0
    b4dc:	28 17       	cp	r18, r24
    b4de:	39 07       	cpc	r19, r25
    b4e0:	bc f6       	brge	.-82     	; 0xb490 <FMenuSettingClientIP+0x1c4>
				       lcd_xy(y,((x+(iBlok*4))-(3-i)));_lcd(IPchar[i-1]);
				   }
                   //NextInput
				   if (iInput>=3){
    b4e2:	73 30       	cpi	r23, 0x03	; 3
    b4e4:	08 f4       	brcc	.+2      	; 0xb4e8 <FMenuSettingClientIP+0x21c>
    b4e6:	91 c0       	rjmp	.+290    	; 0xb60a <FMenuSettingClientIP+0x33e>
				       IP_blok[iBlok]=((IPchar[0]-'0')*100)+((IPchar[1]-'0')*10)+((IPchar[2]-'0'));
    b4e8:	40 91 33 02 	lds	r20, 0x0233
    b4ec:	50 91 34 02 	lds	r21, 0x0234
    b4f0:	fa 01       	movw	r30, r20
    b4f2:	e9 5c       	subi	r30, 0xC9	; 201
    b4f4:	fd 4f       	sbci	r31, 0xFD	; 253
    b4f6:	20 91 42 02 	lds	r18, 0x0242
    b4fa:	20 5d       	subi	r18, 0xD0	; 208
    b4fc:	80 91 40 02 	lds	r24, 0x0240
    b500:	34 e6       	ldi	r19, 0x64	; 100
    b502:	83 9f       	mul	r24, r19
    b504:	c0 01       	movw	r24, r0
    b506:	11 24       	eor	r1, r1
    b508:	28 0f       	add	r18, r24
    b50a:	80 91 41 02 	lds	r24, 0x0241
    b50e:	3a e0       	ldi	r19, 0x0A	; 10
    b510:	83 9f       	mul	r24, r19
    b512:	c0 01       	movw	r24, r0
    b514:	11 24       	eor	r1, r1
    b516:	28 0f       	add	r18, r24
    b518:	20 83       	st	Z, r18
					   IPchar[0]='0';IPchar[1]='0';IPchar[2]='0';
    b51a:	80 e3       	ldi	r24, 0x30	; 48
    b51c:	80 93 40 02 	sts	0x0240, r24
    b520:	80 93 41 02 	sts	0x0241, r24
    b524:	80 93 42 02 	sts	0x0242, r24
					   //Reposition Value
					   lcd_printf(y,((x+(iBlok*4))-iInput),PSTR("   "));
    b528:	44 0f       	add	r20, r20
    b52a:	55 1f       	adc	r21, r21
    b52c:	44 0f       	add	r20, r20
    b52e:	55 1f       	adc	r21, r21
    b530:	60 91 3d 02 	lds	r22, 0x023D
    b534:	64 0f       	add	r22, r20
    b536:	67 1b       	sub	r22, r23
    b538:	80 91 3c 02 	lds	r24, 0x023C
    b53c:	49 eb       	ldi	r20, 0xB9	; 185
    b53e:	54 e1       	ldi	r21, 0x14	; 20
    b540:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
					   sprintf_P(lcdteks,PSTR("%d"),IP_blok[iBlok]);
    b544:	00 d0       	rcall	.+0      	; 0xb546 <FMenuSettingClientIP+0x27a>
    b546:	00 d0       	rcall	.+0      	; 0xb548 <FMenuSettingClientIP+0x27c>
    b548:	00 d0       	rcall	.+0      	; 0xb54a <FMenuSettingClientIP+0x27e>
    b54a:	ad b7       	in	r26, 0x3d	; 61
    b54c:	be b7       	in	r27, 0x3e	; 62
    b54e:	11 96       	adiw	r26, 0x01	; 1
    b550:	8e 01       	movw	r16, r28
    b552:	0f 5f       	subi	r16, 0xFF	; 255
    b554:	1f 4f       	sbci	r17, 0xFF	; 255
    b556:	ed b7       	in	r30, 0x3d	; 61
    b558:	fe b7       	in	r31, 0x3e	; 62
    b55a:	12 83       	std	Z+2, r17	; 0x02
    b55c:	01 83       	std	Z+1, r16	; 0x01
    b55e:	86 eb       	ldi	r24, 0xB6	; 182
    b560:	94 e1       	ldi	r25, 0x14	; 20
    b562:	13 96       	adiw	r26, 0x03	; 3
    b564:	9c 93       	st	X, r25
    b566:	8e 93       	st	-X, r24
    b568:	12 97       	sbiw	r26, 0x02	; 2
    b56a:	e0 91 33 02 	lds	r30, 0x0233
    b56e:	f0 91 34 02 	lds	r31, 0x0234
    b572:	e9 5c       	subi	r30, 0xC9	; 201
    b574:	fd 4f       	sbci	r31, 0xFD	; 253
    b576:	80 81       	ld	r24, Z
    b578:	14 96       	adiw	r26, 0x04	; 4
    b57a:	8c 93       	st	X, r24
    b57c:	14 97       	sbiw	r26, 0x04	; 4
    b57e:	15 96       	adiw	r26, 0x05	; 5
    b580:	1c 92       	st	X, r1
    b582:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
                       lcd_print(y,1+((x+(iBlok*4))-strlen(lcdteks)),lcdteks);
    b586:	f8 01       	movw	r30, r16
    b588:	01 90       	ld	r0, Z+
    b58a:	00 20       	and	r0, r0
    b58c:	e9 f7       	brne	.-6      	; 0xb588 <FMenuSettingClientIP+0x2bc>
    b58e:	31 97       	sbiw	r30, 0x01	; 1
    b590:	e0 1b       	sub	r30, r16
    b592:	f1 0b       	sbc	r31, r17
    b594:	8d b7       	in	r24, 0x3d	; 61
    b596:	9e b7       	in	r25, 0x3e	; 62
    b598:	06 96       	adiw	r24, 0x06	; 6
    b59a:	0f b6       	in	r0, 0x3f	; 63
    b59c:	f8 94       	cli
    b59e:	9e bf       	out	0x3e, r25	; 62
    b5a0:	0f be       	out	0x3f, r0	; 63
    b5a2:	8d bf       	out	0x3d, r24	; 61
    b5a4:	60 91 3d 02 	lds	r22, 0x023D
    b5a8:	6f 5f       	subi	r22, 0xFF	; 255
    b5aa:	80 91 33 02 	lds	r24, 0x0233
    b5ae:	90 91 34 02 	lds	r25, 0x0234
    b5b2:	88 0f       	add	r24, r24
    b5b4:	99 1f       	adc	r25, r25
    b5b6:	88 0f       	add	r24, r24
    b5b8:	99 1f       	adc	r25, r25
    b5ba:	68 0f       	add	r22, r24
    b5bc:	6e 1b       	sub	r22, r30
    b5be:	80 91 3c 02 	lds	r24, 0x023C
    b5c2:	a8 01       	movw	r20, r16
    b5c4:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
					   if (iBlok>0)lcd_printf(y,1+((x+((iBlok-1)*4))),PSTR("."));
    b5c8:	80 91 33 02 	lds	r24, 0x0233
    b5cc:	90 91 34 02 	lds	r25, 0x0234
    b5d0:	00 97       	sbiw	r24, 0x00	; 0
    b5d2:	81 f0       	breq	.+32     	; 0xb5f4 <FMenuSettingClientIP+0x328>
    b5d4:	60 91 3d 02 	lds	r22, 0x023D
    b5d8:	6f 5f       	subi	r22, 0xFF	; 255
    b5da:	81 50       	subi	r24, 0x01	; 1
    b5dc:	90 4c       	sbci	r25, 0xC0	; 192
    b5de:	88 0f       	add	r24, r24
    b5e0:	99 1f       	adc	r25, r25
    b5e2:	88 0f       	add	r24, r24
    b5e4:	99 1f       	adc	r25, r25
    b5e6:	68 0f       	add	r22, r24
    b5e8:	80 91 3c 02 	lds	r24, 0x023C
    b5ec:	44 eb       	ldi	r20, 0xB4	; 180
    b5ee:	54 e1       	ldi	r21, 0x14	; 20
    b5f0:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
					   iInput=0;
    b5f4:	10 92 3b 02 	sts	0x023B, r1
					   iBlok++;
    b5f8:	80 91 33 02 	lds	r24, 0x0233
    b5fc:	90 91 34 02 	lds	r25, 0x0234
    b600:	01 96       	adiw	r24, 0x01	; 1
    b602:	90 93 34 02 	sts	0x0234, r25
    b606:	80 93 33 02 	sts	0x0233, r24

				   }
				   if (iBlok>=4)stClientIP=cipStoreIPblok;
    b60a:	80 91 33 02 	lds	r24, 0x0233
    b60e:	90 91 34 02 	lds	r25, 0x0234
    b612:	04 97       	sbiw	r24, 0x04	; 4
    b614:	18 f0       	brcs	.+6      	; 0xb61c <FMenuSettingClientIP+0x350>
    b616:	84 e0       	ldi	r24, 0x04	; 4
    b618:	80 93 59 01 	sts	0x0159, r24
			   }

			   if (keyPressed==_KEY_CANCEL){
    b61c:	97 ee       	ldi	r25, 0xE7	; 231
    b61e:	f9 16       	cp	r15, r25
    b620:	09 f4       	brne	.+2      	; 0xb624 <FMenuSettingClientIP+0x358>
    b622:	c2 c0       	rjmp	.+388    	; 0xb7a8 <FMenuSettingClientIP+0x4dc>
			       stClientIP=cipExit; 
			   }
			   else
			   if (keyPressed==_KEY_ENTER){
    b624:	a7 eb       	ldi	r26, 0xB7	; 183
    b626:	fa 16       	cp	r15, r26
    b628:	09 f0       	breq	.+2      	; 0xb62c <FMenuSettingClientIP+0x360>
    b62a:	c7 c0       	rjmp	.+398    	; 0xb7ba <FMenuSettingClientIP+0x4ee>
			       //NextInput
			       if (iBlok<4){
    b62c:	40 91 33 02 	lds	r20, 0x0233
    b630:	50 91 34 02 	lds	r21, 0x0234
    b634:	44 30       	cpi	r20, 0x04	; 4
    b636:	51 05       	cpc	r21, r1
    b638:	08 f0       	brcs	.+2      	; 0xb63c <FMenuSettingClientIP+0x370>
    b63a:	a6 c0       	rjmp	.+332    	; 0xb788 <FMenuSettingClientIP+0x4bc>
				       if (iInput==1)IP_blok[iBlok]=((IPchar[0]-'0'));
    b63c:	80 91 3b 02 	lds	r24, 0x023B
    b640:	81 30       	cpi	r24, 0x01	; 1
    b642:	41 f4       	brne	.+16     	; 0xb654 <FMenuSettingClientIP+0x388>
    b644:	fa 01       	movw	r30, r20
    b646:	e9 5c       	subi	r30, 0xC9	; 201
    b648:	fd 4f       	sbci	r31, 0xFD	; 253
    b64a:	80 91 40 02 	lds	r24, 0x0240
    b64e:	80 53       	subi	r24, 0x30	; 48
    b650:	80 83       	st	Z, r24
    b652:	22 c0       	rjmp	.+68     	; 0xb698 <FMenuSettingClientIP+0x3cc>
					   if (iInput==2)IP_blok[iBlok]=((IPchar[0]-'0')*10)+(IPchar[1]-'0');
    b654:	82 30       	cpi	r24, 0x02	; 2
    b656:	49 f4       	brne	.+18     	; 0xb66a <FMenuSettingClientIP+0x39e>
    b658:	fa 01       	movw	r30, r20
    b65a:	e9 5c       	subi	r30, 0xC9	; 201
    b65c:	fd 4f       	sbci	r31, 0xFD	; 253
    b65e:	20 91 41 02 	lds	r18, 0x0241
    b662:	20 51       	subi	r18, 0x10	; 16
    b664:	80 91 40 02 	lds	r24, 0x0240
    b668:	11 c0       	rjmp	.+34     	; 0xb68c <FMenuSettingClientIP+0x3c0>
					   if (iInput==3)IP_blok[iBlok]=((IPchar[0]-'0')*100)+((IPchar[1]-'0')*10)+((IPchar[2]-'0'));
    b66a:	83 30       	cpi	r24, 0x03	; 3
    b66c:	a9 f4       	brne	.+42     	; 0xb698 <FMenuSettingClientIP+0x3cc>
    b66e:	fa 01       	movw	r30, r20
    b670:	e9 5c       	subi	r30, 0xC9	; 201
    b672:	fd 4f       	sbci	r31, 0xFD	; 253
    b674:	20 91 42 02 	lds	r18, 0x0242
    b678:	20 5d       	subi	r18, 0xD0	; 208
    b67a:	80 91 40 02 	lds	r24, 0x0240
    b67e:	34 e6       	ldi	r19, 0x64	; 100
    b680:	83 9f       	mul	r24, r19
    b682:	c0 01       	movw	r24, r0
    b684:	11 24       	eor	r1, r1
    b686:	28 0f       	add	r18, r24
    b688:	80 91 41 02 	lds	r24, 0x0241
    b68c:	3a e0       	ldi	r19, 0x0A	; 10
    b68e:	83 9f       	mul	r24, r19
    b690:	c0 01       	movw	r24, r0
    b692:	11 24       	eor	r1, r1
    b694:	28 0f       	add	r18, r24
    b696:	20 83       	st	Z, r18
				       
					   IPchar[0]='0';IPchar[1]='0';IPchar[2]='0';
    b698:	80 e3       	ldi	r24, 0x30	; 48
    b69a:	80 93 40 02 	sts	0x0240, r24
    b69e:	80 93 41 02 	sts	0x0241, r24
    b6a2:	80 93 42 02 	sts	0x0242, r24
					   //Reposition Value
					   lcd_printf(y,((x+(iBlok*4))-3),PSTR("   "));
    b6a6:	60 91 3d 02 	lds	r22, 0x023D
    b6aa:	63 50       	subi	r22, 0x03	; 3
    b6ac:	44 0f       	add	r20, r20
    b6ae:	55 1f       	adc	r21, r21
    b6b0:	44 0f       	add	r20, r20
    b6b2:	55 1f       	adc	r21, r21
    b6b4:	64 0f       	add	r22, r20
    b6b6:	80 91 3c 02 	lds	r24, 0x023C
    b6ba:	40 eb       	ldi	r20, 0xB0	; 176
    b6bc:	54 e1       	ldi	r21, 0x14	; 20
    b6be:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
					   sprintf_P(lcdteks,PSTR("%d"),IP_blok[iBlok]);
    b6c2:	00 d0       	rcall	.+0      	; 0xb6c4 <FMenuSettingClientIP+0x3f8>
    b6c4:	00 d0       	rcall	.+0      	; 0xb6c6 <FMenuSettingClientIP+0x3fa>
    b6c6:	00 d0       	rcall	.+0      	; 0xb6c8 <FMenuSettingClientIP+0x3fc>
    b6c8:	ad b7       	in	r26, 0x3d	; 61
    b6ca:	be b7       	in	r27, 0x3e	; 62
    b6cc:	11 96       	adiw	r26, 0x01	; 1
    b6ce:	8e 01       	movw	r16, r28
    b6d0:	0f 5f       	subi	r16, 0xFF	; 255
    b6d2:	1f 4f       	sbci	r17, 0xFF	; 255
    b6d4:	ed b7       	in	r30, 0x3d	; 61
    b6d6:	fe b7       	in	r31, 0x3e	; 62
    b6d8:	12 83       	std	Z+2, r17	; 0x02
    b6da:	01 83       	std	Z+1, r16	; 0x01
    b6dc:	8d ea       	ldi	r24, 0xAD	; 173
    b6de:	94 e1       	ldi	r25, 0x14	; 20
    b6e0:	13 96       	adiw	r26, 0x03	; 3
    b6e2:	9c 93       	st	X, r25
    b6e4:	8e 93       	st	-X, r24
    b6e6:	12 97       	sbiw	r26, 0x02	; 2
    b6e8:	e0 91 33 02 	lds	r30, 0x0233
    b6ec:	f0 91 34 02 	lds	r31, 0x0234
    b6f0:	e9 5c       	subi	r30, 0xC9	; 201
    b6f2:	fd 4f       	sbci	r31, 0xFD	; 253
    b6f4:	80 81       	ld	r24, Z
    b6f6:	14 96       	adiw	r26, 0x04	; 4
    b6f8:	8c 93       	st	X, r24
    b6fa:	14 97       	sbiw	r26, 0x04	; 4
    b6fc:	15 96       	adiw	r26, 0x05	; 5
    b6fe:	1c 92       	st	X, r1
    b700:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
                       lcd_print(y,1+((x+(iBlok*4))-strlen(lcdteks)),lcdteks);
    b704:	f8 01       	movw	r30, r16
    b706:	01 90       	ld	r0, Z+
    b708:	00 20       	and	r0, r0
    b70a:	e9 f7       	brne	.-6      	; 0xb706 <FMenuSettingClientIP+0x43a>
    b70c:	31 97       	sbiw	r30, 0x01	; 1
    b70e:	e0 1b       	sub	r30, r16
    b710:	f1 0b       	sbc	r31, r17
    b712:	8d b7       	in	r24, 0x3d	; 61
    b714:	9e b7       	in	r25, 0x3e	; 62
    b716:	06 96       	adiw	r24, 0x06	; 6
    b718:	0f b6       	in	r0, 0x3f	; 63
    b71a:	f8 94       	cli
    b71c:	9e bf       	out	0x3e, r25	; 62
    b71e:	0f be       	out	0x3f, r0	; 63
    b720:	8d bf       	out	0x3d, r24	; 61
    b722:	60 91 3d 02 	lds	r22, 0x023D
    b726:	6f 5f       	subi	r22, 0xFF	; 255
    b728:	80 91 33 02 	lds	r24, 0x0233
    b72c:	90 91 34 02 	lds	r25, 0x0234
    b730:	88 0f       	add	r24, r24
    b732:	99 1f       	adc	r25, r25
    b734:	88 0f       	add	r24, r24
    b736:	99 1f       	adc	r25, r25
    b738:	68 0f       	add	r22, r24
    b73a:	6e 1b       	sub	r22, r30
    b73c:	80 91 3c 02 	lds	r24, 0x023C
    b740:	a8 01       	movw	r20, r16
    b742:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>

					   if (iBlok>0)lcd_printf(y,1+((x+((iBlok-1)*4))),PSTR("."));
    b746:	80 91 33 02 	lds	r24, 0x0233
    b74a:	90 91 34 02 	lds	r25, 0x0234
    b74e:	00 97       	sbiw	r24, 0x00	; 0
    b750:	81 f0       	breq	.+32     	; 0xb772 <FMenuSettingClientIP+0x4a6>
    b752:	60 91 3d 02 	lds	r22, 0x023D
    b756:	6f 5f       	subi	r22, 0xFF	; 255
    b758:	81 50       	subi	r24, 0x01	; 1
    b75a:	90 4c       	sbci	r25, 0xC0	; 192
    b75c:	88 0f       	add	r24, r24
    b75e:	99 1f       	adc	r25, r25
    b760:	88 0f       	add	r24, r24
    b762:	99 1f       	adc	r25, r25
    b764:	68 0f       	add	r22, r24
    b766:	80 91 3c 02 	lds	r24, 0x023C
    b76a:	4b ea       	ldi	r20, 0xAB	; 171
    b76c:	54 e1       	ldi	r21, 0x14	; 20
    b76e:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
				       iInput=0;
    b772:	10 92 3b 02 	sts	0x023B, r1
					   iBlok++;	   
    b776:	80 91 33 02 	lds	r24, 0x0233
    b77a:	90 91 34 02 	lds	r25, 0x0234
    b77e:	01 96       	adiw	r24, 0x01	; 1
    b780:	90 93 34 02 	sts	0x0234, r25
    b784:	80 93 33 02 	sts	0x0233, r24
				   }
				   if (iBlok>=4)stClientIP=cipStoreIPblok;
    b788:	80 91 33 02 	lds	r24, 0x0233
    b78c:	90 91 34 02 	lds	r25, 0x0234
    b790:	04 97       	sbiw	r24, 0x04	; 4
    b792:	98 f0       	brcs	.+38     	; 0xb7ba <FMenuSettingClientIP+0x4ee>
    b794:	84 e0       	ldi	r24, 0x04	; 4
    b796:	09 c0       	rjmp	.+18     	; 0xb7aa <FMenuSettingClientIP+0x4de>
			   }
		       break;
          case cipStoreIPblok://UpdateIPblok
			   eeprom_write_block((const void*) &IP_blok,(const void*) &DefClientIP,4);
    b798:	87 e3       	ldi	r24, 0x37	; 55
    b79a:	92 e0       	ldi	r25, 0x02	; 2
    b79c:	68 e2       	ldi	r22, 0x28	; 40
    b79e:	70 e0       	ldi	r23, 0x00	; 0
    b7a0:	44 e0       	ldi	r20, 0x04	; 4
    b7a2:	50 e0       	ldi	r21, 0x00	; 0
    b7a4:	0e 94 48 ad 	call	0x15a90	; 0x15a90 <__eewr_block_m128>
			   stClientIP=cipExit;
    b7a8:	83 e0       	ldi	r24, 0x03	; 3
    b7aa:	80 93 59 01 	sts	0x0159, r24
    b7ae:	05 c0       	rjmp	.+10     	; 0xb7ba <FMenuSettingClientIP+0x4ee>
		       break; 
          case cipExit://Cancel IPConfig
		       stClientIP=cipInit;
    b7b0:	81 e0       	ldi	r24, 0x01	; 1
    b7b2:	80 93 59 01 	sts	0x0159, r24
		       Result=MENU_DONE;
    b7b6:	80 93 3e 02 	sts	0x023E, r24
		       break;     
		  }//EndSwitch	 
    return Result;
}
    b7ba:	80 91 3e 02 	lds	r24, 0x023E
    b7be:	64 96       	adiw	r28, 0x14	; 20
    b7c0:	0f b6       	in	r0, 0x3f	; 63
    b7c2:	f8 94       	cli
    b7c4:	de bf       	out	0x3e, r29	; 62
    b7c6:	0f be       	out	0x3f, r0	; 63
    b7c8:	cd bf       	out	0x3d, r28	; 61
    b7ca:	cf 91       	pop	r28
    b7cc:	df 91       	pop	r29
    b7ce:	1f 91       	pop	r17
    b7d0:	0f 91       	pop	r16
    b7d2:	ff 90       	pop	r15
    b7d4:	08 95       	ret

0000b7d6 <DisplayStandaloneSequence>:
	 i++;
     _delay_ms(6500);
  return Result;
}

void DisplayStandaloneSequence(char x,char y, char PoolingSequence){
    b7d6:	df 93       	push	r29
    b7d8:	cf 93       	push	r28
    b7da:	cd b7       	in	r28, 0x3d	; 61
    b7dc:	de b7       	in	r29, 0x3e	; 62
    b7de:	28 97       	sbiw	r28, 0x08	; 8
    b7e0:	0f b6       	in	r0, 0x3f	; 63
    b7e2:	f8 94       	cli
    b7e4:	de bf       	out	0x3e, r29	; 62
    b7e6:	0f be       	out	0x3f, r0	; 63
    b7e8:	cd bf       	out	0x3d, r28	; 61
    b7ea:	58 2f       	mov	r21, r24
	 MapSequence[3]='/';
	 MapSequence[4]='-';
	 MapSequence[5]=164;//0x5C;
	 MapSequence[6]='|';
	 MapSequence[7]='/';
	 if (IsPoolingRestarted==False)lcd_put(x,y,MapSequence[(PoolingSequence%8)]);     
    b7ec:	80 91 83 01 	lds	r24, 0x0183
    b7f0:	88 23       	and	r24, r24
    b7f2:	a1 f4       	brne	.+40     	; 0xb81c <DisplayStandaloneSequence+0x46>

void DisplayStandaloneSequence(char x,char y, char PoolingSequence){
     char MapSequence[8];

     //sprintf_P(MapSequence,PSTR("-\|/-|/"));
	 MapSequence[0]='-';
    b7f4:	3d e2       	ldi	r19, 0x2D	; 45
    b7f6:	39 83       	std	Y+1, r19	; 0x01
	 MapSequence[1]='`';//0x5C;
    b7f8:	80 e6       	ldi	r24, 0x60	; 96
    b7fa:	8a 83       	std	Y+2, r24	; 0x02
	 MapSequence[2]='|';
    b7fc:	2c e7       	ldi	r18, 0x7C	; 124
    b7fe:	2b 83       	std	Y+3, r18	; 0x03
	 MapSequence[3]='/';
    b800:	9f e2       	ldi	r25, 0x2F	; 47
    b802:	9c 83       	std	Y+4, r25	; 0x04
	 MapSequence[4]='-';
    b804:	3d 83       	std	Y+5, r19	; 0x05
	 MapSequence[5]=164;//0x5C;
    b806:	84 ea       	ldi	r24, 0xA4	; 164
    b808:	8e 83       	std	Y+6, r24	; 0x06
	 MapSequence[6]='|';
    b80a:	2f 83       	std	Y+7, r18	; 0x07
	 MapSequence[7]='/';
    b80c:	98 87       	std	Y+8, r25	; 0x08
	 if (IsPoolingRestarted==False)lcd_put(x,y,MapSequence[(PoolingSequence%8)]);     
    b80e:	47 70       	andi	r20, 0x07	; 7
    b810:	fe 01       	movw	r30, r28
    b812:	e4 0f       	add	r30, r20
    b814:	f1 1d       	adc	r31, r1
    b816:	85 2f       	mov	r24, r21
    b818:	41 81       	ldd	r20, Z+1	; 0x01
    b81a:	08 c0       	rjmp	.+16     	; 0xb82c <DisplayStandaloneSequence+0x56>
	 else if (IsPoolingRestarted==True){
    b81c:	80 91 83 01 	lds	r24, 0x0183
    b820:	81 30       	cpi	r24, 0x01	; 1
    b822:	31 f4       	brne	.+12     	; 0xb830 <DisplayStandaloneSequence+0x5a>
	          IsPoolingRestarted=False;
    b824:	10 92 83 01 	sts	0x0183, r1
	          lcd_put(x,y,'X');     
    b828:	85 2f       	mov	r24, r21
    b82a:	48 e5       	ldi	r20, 0x58	; 88
    b82c:	0e 94 41 a5 	call	0x14a82	; 0x14a82 <lcd_put>
			  }

}
    b830:	28 96       	adiw	r28, 0x08	; 8
    b832:	0f b6       	in	r0, 0x3f	; 63
    b834:	f8 94       	cli
    b836:	de bf       	out	0x3e, r29	; 62
    b838:	0f be       	out	0x3f, r0	; 63
    b83a:	cd bf       	out	0x3d, r28	; 61
    b83c:	cf 91       	pop	r28
    b83e:	df 91       	pop	r29
    b840:	08 95       	ret

0000b842 <FSettingPumpPooling>:
	      break;
	 }
     return Result;
}

char FSettingPumpPooling(){//Parameter: PumpCount,
    b842:	ef 92       	push	r14
    b844:	ff 92       	push	r15
    b846:	0f 93       	push	r16
    b848:	1f 93       	push	r17
    b84a:	df 93       	push	r29
    b84c:	cf 93       	push	r28
    b84e:	cd b7       	in	r28, 0x3d	; 61
    b850:	de b7       	in	r29, 0x3e	; 62
    b852:	6a 97       	sbiw	r28, 0x1a	; 26
    b854:	0f b6       	in	r0, 0x3f	; 63
    b856:	f8 94       	cli
    b858:	de bf       	out	0x3e, r29	; 62
    b85a:	0f be       	out	0x3f, r0	; 63
    b85c:	cd bf       	out	0x3d, r28	; 61
static char stPumpPooling=ppInitMenu;
	   char i,lcdteks[20];
	   char KeyChar,Addr=0,PPoolingSetting[6];
     
	 Result=MENU_NONE;
     switch(stPumpPooling){
    b85e:	80 91 1b 02 	lds	r24, 0x021B
    b862:	82 30       	cpi	r24, 0x02	; 2
    b864:	09 f4       	brne	.+2      	; 0xb868 <FSettingPumpPooling+0x26>
    b866:	18 c1       	rjmp	.+560    	; 0xba98 <FSettingPumpPooling+0x256>
    b868:	83 30       	cpi	r24, 0x03	; 3
    b86a:	30 f4       	brcc	.+12     	; 0xb878 <FSettingPumpPooling+0x36>
    b86c:	88 23       	and	r24, r24
    b86e:	59 f0       	breq	.+22     	; 0xb886 <FSettingPumpPooling+0x44>
    b870:	81 30       	cpi	r24, 0x01	; 1
    b872:	09 f0       	breq	.+2      	; 0xb876 <FSettingPumpPooling+0x34>
    b874:	ed c1       	rjmp	.+986    	; 0xbc50 <FSettingPumpPooling+0x40e>
    b876:	06 c1       	rjmp	.+524    	; 0xba84 <FSettingPumpPooling+0x242>
    b878:	83 30       	cpi	r24, 0x03	; 3
    b87a:	09 f4       	brne	.+2      	; 0xb87e <FSettingPumpPooling+0x3c>
    b87c:	da c1       	rjmp	.+948    	; 0xbc32 <FSettingPumpPooling+0x3f0>
    b87e:	84 30       	cpi	r24, 0x04	; 4
    b880:	09 f0       	breq	.+2      	; 0xb884 <FSettingPumpPooling+0x42>
    b882:	e6 c1       	rjmp	.+972    	; 0xbc50 <FSettingPumpPooling+0x40e>
    b884:	e1 c1       	rjmp	.+962    	; 0xbc48 <FSettingPumpPooling+0x406>
	 case ppInitMenu:
          lcd_clear();
    b886:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
    b88a:	00 e0       	ldi	r16, 0x00	; 0
    b88c:	10 e0       	ldi	r17, 0x00	; 0
		  for (i=0;i<6;i++){
		      PPoolingSetting[i]=eeprom_read_byte(&DefPoolingPumpMax+i);
    b88e:	7e 01       	movw	r14, r28
    b890:	08 94       	sec
    b892:	e1 1c       	adc	r14, r1
    b894:	f1 1c       	adc	r15, r1
    b896:	c8 01       	movw	r24, r16
    b898:	8b 5b       	subi	r24, 0xBB	; 187
    b89a:	9e 4f       	sbci	r25, 0xFE	; 254
    b89c:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
    b8a0:	f7 01       	movw	r30, r14
    b8a2:	e0 0f       	add	r30, r16
    b8a4:	f1 1f       	adc	r31, r17
    b8a6:	80 83       	st	Z, r24
    b8a8:	0f 5f       	subi	r16, 0xFF	; 255
    b8aa:	1f 4f       	sbci	r17, 0xFF	; 255
     
	 Result=MENU_NONE;
     switch(stPumpPooling){
	 case ppInitMenu:
          lcd_clear();
		  for (i=0;i<6;i++){
    b8ac:	06 30       	cpi	r16, 0x06	; 6
    b8ae:	11 05       	cpc	r17, r1
    b8b0:	91 f7       	brne	.-28     	; 0xb896 <FSettingPumpPooling+0x54>
		      PPoolingSetting[i]=eeprom_read_byte(&DefPoolingPumpMax+i);
		  }

		  sprintf_P(lcdteks,PSTR("1.MaxPump:%d"),PPoolingSetting[0]);lcd_print(1,1,lcdteks);
    b8b2:	00 d0       	rcall	.+0      	; 0xb8b4 <FSettingPumpPooling+0x72>
    b8b4:	00 d0       	rcall	.+0      	; 0xb8b6 <FSettingPumpPooling+0x74>
    b8b6:	00 d0       	rcall	.+0      	; 0xb8b8 <FSettingPumpPooling+0x76>
    b8b8:	ed b7       	in	r30, 0x3d	; 61
    b8ba:	fe b7       	in	r31, 0x3e	; 62
    b8bc:	31 96       	adiw	r30, 0x01	; 1
    b8be:	8e 01       	movw	r16, r28
    b8c0:	09 5f       	subi	r16, 0xF9	; 249
    b8c2:	1f 4f       	sbci	r17, 0xFF	; 255
    b8c4:	ad b7       	in	r26, 0x3d	; 61
    b8c6:	be b7       	in	r27, 0x3e	; 62
    b8c8:	12 96       	adiw	r26, 0x02	; 2
    b8ca:	1c 93       	st	X, r17
    b8cc:	0e 93       	st	-X, r16
    b8ce:	11 97       	sbiw	r26, 0x01	; 1
    b8d0:	8f e2       	ldi	r24, 0x2F	; 47
    b8d2:	9f e0       	ldi	r25, 0x0F	; 15
    b8d4:	93 83       	std	Z+3, r25	; 0x03
    b8d6:	82 83       	std	Z+2, r24	; 0x02
    b8d8:	89 81       	ldd	r24, Y+1	; 0x01
    b8da:	84 83       	std	Z+4, r24	; 0x04
    b8dc:	15 82       	std	Z+5, r1	; 0x05
    b8de:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
    b8e2:	ed b7       	in	r30, 0x3d	; 61
    b8e4:	fe b7       	in	r31, 0x3e	; 62
    b8e6:	36 96       	adiw	r30, 0x06	; 6
    b8e8:	0f b6       	in	r0, 0x3f	; 63
    b8ea:	f8 94       	cli
    b8ec:	fe bf       	out	0x3e, r31	; 62
    b8ee:	0f be       	out	0x3f, r0	; 63
    b8f0:	ed bf       	out	0x3d, r30	; 61
    b8f2:	81 e0       	ldi	r24, 0x01	; 1
    b8f4:	61 e0       	ldi	r22, 0x01	; 1
    b8f6:	a8 01       	movw	r20, r16
    b8f8:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
          sprintf_P(lcdteks,PSTR("2.nNoPump:%d"),PPoolingSetting[1]);lcd_print(2,1,lcdteks);
    b8fc:	00 d0       	rcall	.+0      	; 0xb8fe <FSettingPumpPooling+0xbc>
    b8fe:	00 d0       	rcall	.+0      	; 0xb900 <FSettingPumpPooling+0xbe>
    b900:	00 d0       	rcall	.+0      	; 0xb902 <FSettingPumpPooling+0xc0>
    b902:	ed b7       	in	r30, 0x3d	; 61
    b904:	fe b7       	in	r31, 0x3e	; 62
    b906:	31 96       	adiw	r30, 0x01	; 1
    b908:	ad b7       	in	r26, 0x3d	; 61
    b90a:	be b7       	in	r27, 0x3e	; 62
    b90c:	12 96       	adiw	r26, 0x02	; 2
    b90e:	1c 93       	st	X, r17
    b910:	0e 93       	st	-X, r16
    b912:	11 97       	sbiw	r26, 0x01	; 1
    b914:	82 e2       	ldi	r24, 0x22	; 34
    b916:	9f e0       	ldi	r25, 0x0F	; 15
    b918:	93 83       	std	Z+3, r25	; 0x03
    b91a:	82 83       	std	Z+2, r24	; 0x02
    b91c:	8a 81       	ldd	r24, Y+2	; 0x02
    b91e:	84 83       	std	Z+4, r24	; 0x04
    b920:	15 82       	std	Z+5, r1	; 0x05
    b922:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
    b926:	ed b7       	in	r30, 0x3d	; 61
    b928:	fe b7       	in	r31, 0x3e	; 62
    b92a:	36 96       	adiw	r30, 0x06	; 6
    b92c:	0f b6       	in	r0, 0x3f	; 63
    b92e:	f8 94       	cli
    b930:	fe bf       	out	0x3e, r31	; 62
    b932:	0f be       	out	0x3f, r0	; 63
    b934:	ed bf       	out	0x3d, r30	; 61
    b936:	82 e0       	ldi	r24, 0x02	; 2
    b938:	61 e0       	ldi	r22, 0x01	; 1
    b93a:	a8 01       	movw	r20, r16
    b93c:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
          sprintf_P(lcdteks,PSTR("3.TrySend:%d"),PPoolingSetting[2]);lcd_print(3,1,lcdteks);
    b940:	00 d0       	rcall	.+0      	; 0xb942 <FSettingPumpPooling+0x100>
    b942:	00 d0       	rcall	.+0      	; 0xb944 <FSettingPumpPooling+0x102>
    b944:	00 d0       	rcall	.+0      	; 0xb946 <FSettingPumpPooling+0x104>
    b946:	ed b7       	in	r30, 0x3d	; 61
    b948:	fe b7       	in	r31, 0x3e	; 62
    b94a:	31 96       	adiw	r30, 0x01	; 1
    b94c:	ad b7       	in	r26, 0x3d	; 61
    b94e:	be b7       	in	r27, 0x3e	; 62
    b950:	12 96       	adiw	r26, 0x02	; 2
    b952:	1c 93       	st	X, r17
    b954:	0e 93       	st	-X, r16
    b956:	11 97       	sbiw	r26, 0x01	; 1
    b958:	85 e1       	ldi	r24, 0x15	; 21
    b95a:	9f e0       	ldi	r25, 0x0F	; 15
    b95c:	93 83       	std	Z+3, r25	; 0x03
    b95e:	82 83       	std	Z+2, r24	; 0x02
    b960:	8b 81       	ldd	r24, Y+3	; 0x03
    b962:	84 83       	std	Z+4, r24	; 0x04
    b964:	15 82       	std	Z+5, r1	; 0x05
    b966:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
    b96a:	ed b7       	in	r30, 0x3d	; 61
    b96c:	fe b7       	in	r31, 0x3e	; 62
    b96e:	36 96       	adiw	r30, 0x06	; 6
    b970:	0f b6       	in	r0, 0x3f	; 63
    b972:	f8 94       	cli
    b974:	fe bf       	out	0x3e, r31	; 62
    b976:	0f be       	out	0x3f, r0	; 63
    b978:	ed bf       	out	0x3d, r30	; 61
    b97a:	83 e0       	ldi	r24, 0x03	; 3
    b97c:	61 e0       	ldi	r22, 0x01	; 1
    b97e:	a8 01       	movw	r20, r16
    b980:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
          sprintf_P(lcdteks,PSTR("4.TimPool:%d"),PPoolingSetting[3]);lcd_print(4,1,lcdteks);
    b984:	00 d0       	rcall	.+0      	; 0xb986 <FSettingPumpPooling+0x144>
    b986:	00 d0       	rcall	.+0      	; 0xb988 <FSettingPumpPooling+0x146>
    b988:	00 d0       	rcall	.+0      	; 0xb98a <FSettingPumpPooling+0x148>
    b98a:	ed b7       	in	r30, 0x3d	; 61
    b98c:	fe b7       	in	r31, 0x3e	; 62
    b98e:	31 96       	adiw	r30, 0x01	; 1
    b990:	ad b7       	in	r26, 0x3d	; 61
    b992:	be b7       	in	r27, 0x3e	; 62
    b994:	12 96       	adiw	r26, 0x02	; 2
    b996:	1c 93       	st	X, r17
    b998:	0e 93       	st	-X, r16
    b99a:	11 97       	sbiw	r26, 0x01	; 1
    b99c:	88 e0       	ldi	r24, 0x08	; 8
    b99e:	9f e0       	ldi	r25, 0x0F	; 15
    b9a0:	93 83       	std	Z+3, r25	; 0x03
    b9a2:	82 83       	std	Z+2, r24	; 0x02
    b9a4:	8c 81       	ldd	r24, Y+4	; 0x04
    b9a6:	84 83       	std	Z+4, r24	; 0x04
    b9a8:	15 82       	std	Z+5, r1	; 0x05
    b9aa:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
    b9ae:	ed b7       	in	r30, 0x3d	; 61
    b9b0:	fe b7       	in	r31, 0x3e	; 62
    b9b2:	36 96       	adiw	r30, 0x06	; 6
    b9b4:	0f b6       	in	r0, 0x3f	; 63
    b9b6:	f8 94       	cli
    b9b8:	fe bf       	out	0x3e, r31	; 62
    b9ba:	0f be       	out	0x3f, r0	; 63
    b9bc:	ed bf       	out	0x3d, r30	; 61
    b9be:	84 e0       	ldi	r24, 0x04	; 4
    b9c0:	61 e0       	ldi	r22, 0x01	; 1
    b9c2:	a8 01       	movw	r20, r16
    b9c4:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
          sprintf_P(lcdteks,PSTR("5.Dly:%d"),PPoolingSetting[4]);lcd_print(1,13,lcdteks);
    b9c8:	00 d0       	rcall	.+0      	; 0xb9ca <FSettingPumpPooling+0x188>
    b9ca:	00 d0       	rcall	.+0      	; 0xb9cc <FSettingPumpPooling+0x18a>
    b9cc:	00 d0       	rcall	.+0      	; 0xb9ce <FSettingPumpPooling+0x18c>
    b9ce:	ed b7       	in	r30, 0x3d	; 61
    b9d0:	fe b7       	in	r31, 0x3e	; 62
    b9d2:	31 96       	adiw	r30, 0x01	; 1
    b9d4:	ad b7       	in	r26, 0x3d	; 61
    b9d6:	be b7       	in	r27, 0x3e	; 62
    b9d8:	12 96       	adiw	r26, 0x02	; 2
    b9da:	1c 93       	st	X, r17
    b9dc:	0e 93       	st	-X, r16
    b9de:	11 97       	sbiw	r26, 0x01	; 1
    b9e0:	8f ef       	ldi	r24, 0xFF	; 255
    b9e2:	9e e0       	ldi	r25, 0x0E	; 14
    b9e4:	93 83       	std	Z+3, r25	; 0x03
    b9e6:	82 83       	std	Z+2, r24	; 0x02
    b9e8:	8d 81       	ldd	r24, Y+5	; 0x05
    b9ea:	84 83       	std	Z+4, r24	; 0x04
    b9ec:	15 82       	std	Z+5, r1	; 0x05
    b9ee:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
    b9f2:	ed b7       	in	r30, 0x3d	; 61
    b9f4:	fe b7       	in	r31, 0x3e	; 62
    b9f6:	36 96       	adiw	r30, 0x06	; 6
    b9f8:	0f b6       	in	r0, 0x3f	; 63
    b9fa:	f8 94       	cli
    b9fc:	fe bf       	out	0x3e, r31	; 62
    b9fe:	0f be       	out	0x3f, r0	; 63
    ba00:	ed bf       	out	0x3d, r30	; 61
    ba02:	81 e0       	ldi	r24, 0x01	; 1
    ba04:	6d e0       	ldi	r22, 0x0D	; 13
    ba06:	a8 01       	movw	r20, r16
    ba08:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
          sprintf_P(lcdteks,PSTR("6.Act:%d"),PPoolingSetting[5]);lcd_print(2,13,lcdteks);
    ba0c:	00 d0       	rcall	.+0      	; 0xba0e <FSettingPumpPooling+0x1cc>
    ba0e:	00 d0       	rcall	.+0      	; 0xba10 <FSettingPumpPooling+0x1ce>
    ba10:	00 d0       	rcall	.+0      	; 0xba12 <FSettingPumpPooling+0x1d0>
    ba12:	ed b7       	in	r30, 0x3d	; 61
    ba14:	fe b7       	in	r31, 0x3e	; 62
    ba16:	31 96       	adiw	r30, 0x01	; 1
    ba18:	ad b7       	in	r26, 0x3d	; 61
    ba1a:	be b7       	in	r27, 0x3e	; 62
    ba1c:	12 96       	adiw	r26, 0x02	; 2
    ba1e:	1c 93       	st	X, r17
    ba20:	0e 93       	st	-X, r16
    ba22:	11 97       	sbiw	r26, 0x01	; 1
    ba24:	86 ef       	ldi	r24, 0xF6	; 246
    ba26:	9e e0       	ldi	r25, 0x0E	; 14
    ba28:	93 83       	std	Z+3, r25	; 0x03
    ba2a:	82 83       	std	Z+2, r24	; 0x02
    ba2c:	8e 81       	ldd	r24, Y+6	; 0x06
    ba2e:	84 83       	std	Z+4, r24	; 0x04
    ba30:	15 82       	std	Z+5, r1	; 0x05
    ba32:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
    ba36:	ed b7       	in	r30, 0x3d	; 61
    ba38:	fe b7       	in	r31, 0x3e	; 62
    ba3a:	36 96       	adiw	r30, 0x06	; 6
    ba3c:	0f b6       	in	r0, 0x3f	; 63
    ba3e:	f8 94       	cli
    ba40:	fe bf       	out	0x3e, r31	; 62
    ba42:	0f be       	out	0x3f, r0	; 63
    ba44:	ed bf       	out	0x3d, r30	; 61
    ba46:	82 e0       	ldi	r24, 0x02	; 2
    ba48:	6d e0       	ldi	r22, 0x0D	; 13
    ba4a:	a8 01       	movw	r20, r16
    ba4c:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
          sprintf_P(lcdteks,PSTR("[*]Exit"));lcd_print(4,13,lcdteks);
    ba50:	00 d0       	rcall	.+0      	; 0xba52 <FSettingPumpPooling+0x210>
    ba52:	00 d0       	rcall	.+0      	; 0xba54 <FSettingPumpPooling+0x212>
    ba54:	ad b7       	in	r26, 0x3d	; 61
    ba56:	be b7       	in	r27, 0x3e	; 62
    ba58:	12 96       	adiw	r26, 0x02	; 2
    ba5a:	1c 93       	st	X, r17
    ba5c:	0e 93       	st	-X, r16
    ba5e:	11 97       	sbiw	r26, 0x01	; 1
    ba60:	8e ee       	ldi	r24, 0xEE	; 238
    ba62:	9e e0       	ldi	r25, 0x0E	; 14
    ba64:	14 96       	adiw	r26, 0x04	; 4
    ba66:	9c 93       	st	X, r25
    ba68:	8e 93       	st	-X, r24
    ba6a:	13 97       	sbiw	r26, 0x03	; 3
    ba6c:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
    ba70:	0f 90       	pop	r0
    ba72:	0f 90       	pop	r0
    ba74:	0f 90       	pop	r0
    ba76:	0f 90       	pop	r0
    ba78:	84 e0       	ldi	r24, 0x04	; 4
    ba7a:	6d e0       	ldi	r22, 0x0D	; 13
    ba7c:	a8 01       	movw	r20, r16
    ba7e:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
    ba82:	08 c0       	rjmp	.+16     	; 0xba94 <FSettingPumpPooling+0x252>

          stPumpPooling=ppPoolingSettingInput;
	      break;
     case ppDisplaySequence:
          IsNewPoolingSequence=False;
    ba84:	10 92 81 01 	sts	0x0181, r1
		  DisplayStandaloneSequence(3,14,iSequencePooling);
    ba88:	83 e0       	ldi	r24, 0x03	; 3
    ba8a:	6e e0       	ldi	r22, 0x0E	; 14
    ba8c:	40 91 80 01 	lds	r20, 0x0180
    ba90:	0e 94 eb 5b 	call	0xb7d6	; 0xb7d6 <DisplayStandaloneSequence>
          stPumpPooling=ppPoolingSettingInput;
    ba94:	82 e0       	ldi	r24, 0x02	; 2
    ba96:	ca c0       	rjmp	.+404    	; 0xbc2c <FSettingPumpPooling+0x3ea>
	      break;
     case ppPoolingSettingInput:
	      if(IsNewPoolingSequence==True)stPumpPooling=ppDisplaySequence;
    ba98:	80 91 81 01 	lds	r24, 0x0181
    ba9c:	81 30       	cpi	r24, 0x01	; 1
    ba9e:	11 f4       	brne	.+4      	; 0xbaa4 <FSettingPumpPooling+0x262>
    baa0:	80 93 1b 02 	sts	0x021B, r24

          KeyChar=_key_btn(_key_scan(1));
    baa4:	81 e0       	ldi	r24, 0x01	; 1
    baa6:	0e 94 6d a6 	call	0x14cda	; 0x14cda <_key_scan>
    baaa:	0e 94 ce a5 	call	0x14b9c	; 0x14b9c <_key_btn>
		  if ((KeyChar>='1')&&(KeyChar<='6')){
    baae:	08 2f       	mov	r16, r24
    bab0:	01 53       	subi	r16, 0x31	; 49
    bab2:	06 30       	cpi	r16, 0x06	; 6
    bab4:	10 f0       	brcs	.+4      	; 0xbaba <FSettingPumpPooling+0x278>
    bab6:	00 e0       	ldi	r16, 0x00	; 0
    bab8:	04 c0       	rjmp	.+8      	; 0xbac2 <FSettingPumpPooling+0x280>
		      Addr=KeyChar-'1';
			  TimSend=0;
    baba:	10 92 79 0c 	sts	0x0C79, r1
			  IsStandaloneAcknoledge=False;
    babe:	10 92 82 01 	sts	0x0182, r1
          }
		  switch(KeyChar){
    bac2:	83 33       	cpi	r24, 0x33	; 51
    bac4:	09 f4       	brne	.+2      	; 0xbac8 <FSettingPumpPooling+0x286>
    bac6:	58 c0       	rjmp	.+176    	; 0xbb78 <FSettingPumpPooling+0x336>
    bac8:	84 33       	cpi	r24, 0x34	; 52
    baca:	40 f4       	brcc	.+16     	; 0xbadc <FSettingPumpPooling+0x29a>
    bacc:	81 33       	cpi	r24, 0x31	; 49
    bace:	81 f0       	breq	.+32     	; 0xbaf0 <FSettingPumpPooling+0x2ae>
    bad0:	82 33       	cpi	r24, 0x32	; 50
    bad2:	b0 f5       	brcc	.+108    	; 0xbb40 <FSettingPumpPooling+0x2fe>
    bad4:	8a 32       	cpi	r24, 0x2A	; 42
    bad6:	09 f0       	breq	.+2      	; 0xbada <FSettingPumpPooling+0x298>
    bad8:	bb c0       	rjmp	.+374    	; 0xbc50 <FSettingPumpPooling+0x40e>
    bada:	a7 c0       	rjmp	.+334    	; 0xbc2a <FSettingPumpPooling+0x3e8>
    badc:	85 33       	cpi	r24, 0x35	; 53
    bade:	09 f4       	brne	.+2      	; 0xbae2 <FSettingPumpPooling+0x2a0>
    bae0:	7c c0       	rjmp	.+248    	; 0xbbda <FSettingPumpPooling+0x398>
    bae2:	85 33       	cpi	r24, 0x35	; 53
    bae4:	08 f4       	brcc	.+2      	; 0xbae8 <FSettingPumpPooling+0x2a6>
    bae6:	6a c0       	rjmp	.+212    	; 0xbbbc <FSettingPumpPooling+0x37a>
    bae8:	86 33       	cpi	r24, 0x36	; 54
    baea:	09 f0       	breq	.+2      	; 0xbaee <FSettingPumpPooling+0x2ac>
    baec:	b1 c0       	rjmp	.+354    	; 0xbc50 <FSettingPumpPooling+0x40e>
    baee:	84 c0       	rjmp	.+264    	; 0xbbf8 <FSettingPumpPooling+0x3b6>
		  case '1'://MaxPump
		       PPoolingSetting[Addr]=((PPoolingSetting[Addr]+1)%17);
    baf0:	20 2f       	mov	r18, r16
    baf2:	30 e0       	ldi	r19, 0x00	; 0
    baf4:	fe 01       	movw	r30, r28
    baf6:	31 96       	adiw	r30, 0x01	; 1
    baf8:	e2 0f       	add	r30, r18
    bafa:	f3 1f       	adc	r31, r19
    bafc:	80 81       	ld	r24, Z
    bafe:	90 e0       	ldi	r25, 0x00	; 0
    bb00:	01 96       	adiw	r24, 0x01	; 1
    bb02:	61 e1       	ldi	r22, 0x11	; 17
    bb04:	70 e0       	ldi	r23, 0x00	; 0
    bb06:	0e 94 8e aa 	call	0x1551c	; 0x1551c <__divmodhi4>
    bb0a:	80 83       	st	Z, r24
			   if (PPoolingSetting[Addr]==0)PPoolingSetting[Addr]=1;
    bb0c:	88 23       	and	r24, r24
    bb0e:	11 f4       	brne	.+4      	; 0xbb14 <FSettingPumpPooling+0x2d2>
    bb10:	81 e0       	ldi	r24, 0x01	; 1
    bb12:	80 83       	st	Z, r24
			   //SendSlaveCommand(SC_SET_POOLING_MAX_PUMP,PPoolingSetting[Addr]);
			   SendPoolingCommand(SC_SET_POOLING_MAX_PUMP,PPoolingSetting[Addr]);
    bb14:	2c 0f       	add	r18, r28
    bb16:	3d 1f       	adc	r19, r29
    bb18:	f9 01       	movw	r30, r18
    bb1a:	11 81       	ldd	r17, Z+1	; 0x01
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
    bb1c:	85 e1       	ldi	r24, 0x15	; 21
    bb1e:	80 93 a7 05 	sts	0x05A7, r24
	 PoolMsg=plMsg;
    bb22:	10 93 d3 0b 	sts	0x0BD3, r17
     IsControlPooling=True;
    bb26:	81 e0       	ldi	r24, 0x01	; 1
    bb28:	80 93 84 01 	sts	0x0184, r24
		       PPoolingSetting[Addr]=((PPoolingSetting[Addr]+1)%17);
			   if (PPoolingSetting[Addr]==0)PPoolingSetting[Addr]=1;
			   //SendSlaveCommand(SC_SET_POOLING_MAX_PUMP,PPoolingSetting[Addr]);
			   SendPoolingCommand(SC_SET_POOLING_MAX_PUMP,PPoolingSetting[Addr]);

			   eeprom_write_byte(&DefPoolingPumpMax+Addr,PPoolingSetting[Addr]);
    bb2c:	80 2f       	mov	r24, r16
    bb2e:	90 e0       	ldi	r25, 0x00	; 0
    bb30:	8b 5b       	subi	r24, 0xBB	; 187
    bb32:	9e 4f       	sbci	r25, 0xFE	; 254
    bb34:	61 2f       	mov	r22, r17
    bb36:	0e 94 52 ad 	call	0x15aa4	; 0x15aa4 <__eewr_byte_m128>
			   PumpCountMax=PPoolingSetting[Addr];
    bb3a:	10 93 5c 01 	sts	0x015C, r17
    bb3e:	1a c0       	rjmp	.+52     	; 0xbb74 <FSettingPumpPooling+0x332>
			   //stPumpPooling=ppInitMenu;
			   stPumpPooling=ppWaitPoolingRespond;
		       break;
		  case '2'://NoPump
		       PPoolingSetting[Addr]=((PPoolingSetting[Addr]+1)%21);
    bb40:	20 2f       	mov	r18, r16
    bb42:	30 e0       	ldi	r19, 0x00	; 0
    bb44:	fe 01       	movw	r30, r28
    bb46:	e2 0f       	add	r30, r18
    bb48:	f3 1f       	adc	r31, r19
    bb4a:	81 81       	ldd	r24, Z+1	; 0x01
    bb4c:	90 e0       	ldi	r25, 0x00	; 0
    bb4e:	01 96       	adiw	r24, 0x01	; 1
    bb50:	65 e1       	ldi	r22, 0x15	; 21
    bb52:	70 e0       	ldi	r23, 0x00	; 0
    bb54:	0e 94 8e aa 	call	0x1551c	; 0x1551c <__divmodhi4>
    bb58:	68 2f       	mov	r22, r24
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
    bb5a:	84 e1       	ldi	r24, 0x14	; 20
    bb5c:	80 93 a7 05 	sts	0x05A7, r24
	 PoolMsg=plMsg;
    bb60:	60 93 d3 0b 	sts	0x0BD3, r22
     IsControlPooling=True;
    bb64:	81 e0       	ldi	r24, 0x01	; 1
    bb66:	80 93 84 01 	sts	0x0184, r24
		  case '2'://NoPump
		       PPoolingSetting[Addr]=((PPoolingSetting[Addr]+1)%21);
			   //SendSlaveCommand(SC_SET_POOLING_NO_PUMP_COUNT,PPoolingSetting[Addr]);
			   SendPoolingCommand(SC_SET_POOLING_NO_PUMP_COUNT,PPoolingSetting[Addr]);

			   eeprom_write_byte(&DefPoolingPumpMax+Addr,PPoolingSetting[Addr]);
    bb6a:	c9 01       	movw	r24, r18
    bb6c:	8b 5b       	subi	r24, 0xBB	; 187
    bb6e:	9e 4f       	sbci	r25, 0xFE	; 254
    bb70:	0e 94 52 ad 	call	0x15aa4	; 0x15aa4 <__eewr_byte_m128>
			   //stPumpPooling=ppInitMenu;
			   stPumpPooling=ppWaitPoolingRespond;
    bb74:	83 e0       	ldi	r24, 0x03	; 3
    bb76:	5a c0       	rjmp	.+180    	; 0xbc2c <FSettingPumpPooling+0x3ea>
		       break;
		  case '3'://TrySend
		       PPoolingSetting[Addr]=((PPoolingSetting[Addr]+1)%21);
    bb78:	20 2f       	mov	r18, r16
    bb7a:	30 e0       	ldi	r19, 0x00	; 0
    bb7c:	fe 01       	movw	r30, r28
    bb7e:	31 96       	adiw	r30, 0x01	; 1
    bb80:	e2 0f       	add	r30, r18
    bb82:	f3 1f       	adc	r31, r19
    bb84:	80 81       	ld	r24, Z
    bb86:	90 e0       	ldi	r25, 0x00	; 0
    bb88:	01 96       	adiw	r24, 0x01	; 1
    bb8a:	65 e1       	ldi	r22, 0x15	; 21
    bb8c:	70 e0       	ldi	r23, 0x00	; 0
    bb8e:	0e 94 8e aa 	call	0x1551c	; 0x1551c <__divmodhi4>
    bb92:	80 83       	st	Z, r24
			   if (PPoolingSetting[Addr]==0)PPoolingSetting[Addr]=1;
    bb94:	88 23       	and	r24, r24
    bb96:	11 f4       	brne	.+4      	; 0xbb9c <FSettingPumpPooling+0x35a>
    bb98:	81 e0       	ldi	r24, 0x01	; 1
    bb9a:	80 83       	st	Z, r24
			   //SendSlaveCommand(SC_SET_POOLING_SEND,PPoolingSetting[Addr]);
			   SendPoolingCommand(SC_SET_POOLING_SEND,PPoolingSetting[Addr]);
    bb9c:	2c 0f       	add	r18, r28
    bb9e:	3d 1f       	adc	r19, r29
    bba0:	d9 01       	movw	r26, r18
    bba2:	11 96       	adiw	r26, 0x01	; 1
    bba4:	6c 91       	ld	r22, X
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
    bba6:	86 e1       	ldi	r24, 0x16	; 22
    bba8:	80 93 a7 05 	sts	0x05A7, r24
	 PoolMsg=plMsg;
    bbac:	60 93 d3 0b 	sts	0x0BD3, r22
     IsControlPooling=True;
    bbb0:	81 e0       	ldi	r24, 0x01	; 1
    bbb2:	80 93 84 01 	sts	0x0184, r24
		       PPoolingSetting[Addr]=((PPoolingSetting[Addr]+1)%21);
			   if (PPoolingSetting[Addr]==0)PPoolingSetting[Addr]=1;
			   //SendSlaveCommand(SC_SET_POOLING_SEND,PPoolingSetting[Addr]);
			   SendPoolingCommand(SC_SET_POOLING_SEND,PPoolingSetting[Addr]);

			   eeprom_write_byte(&DefPoolingPumpMax+Addr,PPoolingSetting[Addr]);
    bbb6:	80 2f       	mov	r24, r16
    bbb8:	90 e0       	ldi	r25, 0x00	; 0
    bbba:	d8 cf       	rjmp	.-80     	; 0xbb6c <FSettingPumpPooling+0x32a>
			   //stPumpPooling=ppInitMenu;
			   stPumpPooling=ppWaitPoolingRespond;
		       break;
		  case '4'://TimPool
		       PPoolingSetting[Addr]=((PPoolingSetting[Addr]+1)%21);
    bbbc:	20 2f       	mov	r18, r16
    bbbe:	30 e0       	ldi	r19, 0x00	; 0
    bbc0:	fe 01       	movw	r30, r28
    bbc2:	e2 0f       	add	r30, r18
    bbc4:	f3 1f       	adc	r31, r19
    bbc6:	81 81       	ldd	r24, Z+1	; 0x01
    bbc8:	90 e0       	ldi	r25, 0x00	; 0
    bbca:	01 96       	adiw	r24, 0x01	; 1
    bbcc:	65 e1       	ldi	r22, 0x15	; 21
    bbce:	70 e0       	ldi	r23, 0x00	; 0
    bbd0:	0e 94 8e aa 	call	0x1551c	; 0x1551c <__divmodhi4>
    bbd4:	68 2f       	mov	r22, r24
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
    bbd6:	87 e1       	ldi	r24, 0x17	; 23
    bbd8:	c1 cf       	rjmp	.-126    	; 0xbb5c <FSettingPumpPooling+0x31a>
			   eeprom_write_byte(&DefPoolingPumpMax+Addr,PPoolingSetting[Addr]);
			   //stPumpPooling=ppInitMenu;
			   stPumpPooling=ppWaitPoolingRespond;
		       break;
		  case '5'://DelayNextPump
		       PPoolingSetting[Addr]=((PPoolingSetting[Addr]+1)%41); 
    bbda:	20 2f       	mov	r18, r16
    bbdc:	30 e0       	ldi	r19, 0x00	; 0
    bbde:	fe 01       	movw	r30, r28
    bbe0:	e2 0f       	add	r30, r18
    bbe2:	f3 1f       	adc	r31, r19
    bbe4:	81 81       	ldd	r24, Z+1	; 0x01
    bbe6:	90 e0       	ldi	r25, 0x00	; 0
    bbe8:	01 96       	adiw	r24, 0x01	; 1
    bbea:	69 e2       	ldi	r22, 0x29	; 41
    bbec:	70 e0       	ldi	r23, 0x00	; 0
    bbee:	0e 94 8e aa 	call	0x1551c	; 0x1551c <__divmodhi4>
    bbf2:	68 2f       	mov	r22, r24
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
    bbf4:	88 e1       	ldi	r24, 0x18	; 24
    bbf6:	b2 cf       	rjmp	.-156    	; 0xbb5c <FSettingPumpPooling+0x31a>
			   eeprom_write_byte(&DefPoolingPumpMax+Addr,PPoolingSetting[Addr]);
			   //stPumpPooling=ppInitMenu;
               stPumpPooling=ppWaitPoolingRespond;
		       break;
		  case '6'://ActivePump
		       PPoolingSetting[Addr]=((PPoolingSetting[Addr]+1)%(1+eeprom_read_byte(&DefPoolingPumpMax))); 			       
    bbf8:	85 e4       	ldi	r24, 0x45	; 69
    bbfa:	91 e0       	ldi	r25, 0x01	; 1
    bbfc:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
			   eeprom_write_byte(&DefPoolingPumpMax+Addr,PPoolingSetting[Addr]);
    bc00:	10 e0       	ldi	r17, 0x00	; 0
    bc02:	fe 01       	movw	r30, r28
    bc04:	e0 0f       	add	r30, r16
    bc06:	f1 1f       	adc	r31, r17
    bc08:	21 81       	ldd	r18, Z+1	; 0x01
    bc0a:	30 e0       	ldi	r19, 0x00	; 0
    bc0c:	68 2f       	mov	r22, r24
    bc0e:	70 e0       	ldi	r23, 0x00	; 0
    bc10:	6f 5f       	subi	r22, 0xFF	; 255
    bc12:	7f 4f       	sbci	r23, 0xFF	; 255
    bc14:	c9 01       	movw	r24, r18
    bc16:	01 96       	adiw	r24, 0x01	; 1
    bc18:	0e 94 8e aa 	call	0x1551c	; 0x1551c <__divmodhi4>
    bc1c:	68 2f       	mov	r22, r24
    bc1e:	c8 01       	movw	r24, r16
    bc20:	8b 5b       	subi	r24, 0xBB	; 187
    bc22:	9e 4f       	sbci	r25, 0xFE	; 254
    bc24:	0e 94 52 ad 	call	0x15aa4	; 0x15aa4 <__eewr_byte_m128>
    bc28:	0c c0       	rjmp	.+24     	; 0xbc42 <FSettingPumpPooling+0x400>
			   stPumpPooling=ppInitMenu;
		       break;
		  case '*'://Exit
		       stPumpPooling=ppExitSettingPooling;		            
    bc2a:	84 e0       	ldi	r24, 0x04	; 4
    bc2c:	80 93 1b 02 	sts	0x021B, r24
    bc30:	0f c0       	rjmp	.+30     	; 0xbc50 <FSettingPumpPooling+0x40e>
		       break;
		  }  
	      break;
     case ppWaitPoolingRespond:	    
	      if ((IsStandaloneAcknoledge==True)||(TimSend>5))stPumpPooling=ppInitMenu;
    bc32:	80 91 82 01 	lds	r24, 0x0182
    bc36:	81 30       	cpi	r24, 0x01	; 1
    bc38:	21 f0       	breq	.+8      	; 0xbc42 <FSettingPumpPooling+0x400>
    bc3a:	80 91 79 0c 	lds	r24, 0x0C79
    bc3e:	86 30       	cpi	r24, 0x06	; 6
    bc40:	38 f0       	brcs	.+14     	; 0xbc50 <FSettingPumpPooling+0x40e>
    bc42:	10 92 1b 02 	sts	0x021B, r1
    bc46:	04 c0       	rjmp	.+8      	; 0xbc50 <FSettingPumpPooling+0x40e>
	      break;
     case ppExitSettingPooling:
          stPumpPooling=ppInitMenu;
    bc48:	10 92 1b 02 	sts	0x021B, r1
    bc4c:	81 e0       	ldi	r24, 0x01	; 1
    bc4e:	01 c0       	rjmp	.+2      	; 0xbc52 <FSettingPumpPooling+0x410>
    bc50:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
	      break;
    }
return Result;
}
    bc52:	6a 96       	adiw	r28, 0x1a	; 26
    bc54:	0f b6       	in	r0, 0x3f	; 63
    bc56:	f8 94       	cli
    bc58:	de bf       	out	0x3e, r29	; 62
    bc5a:	0f be       	out	0x3f, r0	; 63
    bc5c:	cd bf       	out	0x3d, r28	; 61
    bc5e:	cf 91       	pop	r28
    bc60:	df 91       	pop	r29
    bc62:	1f 91       	pop	r17
    bc64:	0f 91       	pop	r16
    bc66:	ff 90       	pop	r15
    bc68:	ef 90       	pop	r14
    bc6a:	08 95       	ret

0000bc6c <DisplayTicker>:
	case tiDelayLeft:
         if (TimTicker>TICKER_DELAY)stDisplayTicker=tiRight;	     
	     break;
	}
*/
    if (TimTicker>(TICKER_DELAY*2+1)){
    bc6c:	80 91 90 01 	lds	r24, 0x0190
    bc70:	86 31       	cpi	r24, 0x16	; 22
    bc72:	38 f0       	brcs	.+14     	; 0xbc82 <DisplayTicker+0x16>
	    lcd_put(4, 1, '>');
    bc74:	84 e0       	ldi	r24, 0x04	; 4
    bc76:	61 e0       	ldi	r22, 0x01	; 1
    bc78:	4e e3       	ldi	r20, 0x3E	; 62
    bc7a:	0e 94 41 a5 	call	0x14a82	; 0x14a82 <lcd_put>
		TimTicker=0;
    bc7e:	10 92 90 01 	sts	0x0190, r1
	}
    if (TimTicker==TICKER_DELAY){
    bc82:	80 91 90 01 	lds	r24, 0x0190
    bc86:	8a 30       	cpi	r24, 0x0A	; 10
    bc88:	51 f4       	brne	.+20     	; 0xbc9e <DisplayTicker+0x32>
	    lcd_put(4, 1, '<');
    bc8a:	84 e0       	ldi	r24, 0x04	; 4
    bc8c:	61 e0       	ldi	r22, 0x01	; 1
    bc8e:	4c e3       	ldi	r20, 0x3C	; 60
    bc90:	0e 94 41 a5 	call	0x14a82	; 0x14a82 <lcd_put>
		TimTicker++;
    bc94:	80 91 90 01 	lds	r24, 0x0190
    bc98:	8f 5f       	subi	r24, 0xFF	; 255
    bc9a:	80 93 90 01 	sts	0x0190, r24
    bc9e:	08 95       	ret

0000bca0 <DisplayIdle>:
	          lcd_put(x,y,'X');     
			  }

}

void DisplayIdle(){
    bca0:	6f 92       	push	r6
    bca2:	7f 92       	push	r7
    bca4:	8f 92       	push	r8
    bca6:	9f 92       	push	r9
    bca8:	af 92       	push	r10
    bcaa:	bf 92       	push	r11
    bcac:	cf 92       	push	r12
    bcae:	df 92       	push	r13
    bcb0:	ff 92       	push	r15
    bcb2:	0f 93       	push	r16
    bcb4:	1f 93       	push	r17
    bcb6:	df 93       	push	r29
    bcb8:	cf 93       	push	r28
    bcba:	cd b7       	in	r28, 0x3d	; 61
    bcbc:	de b7       	in	r29, 0x3e	; 62
    bcbe:	67 97       	sbiw	r28, 0x17	; 23
    bcc0:	0f b6       	in	r0, 0x3f	; 63
    bcc2:	f8 94       	cli
    bcc4:	de bf       	out	0x3e, r29	; 62
    bcc6:	0f be       	out	0x3f, r0	; 63
    bcc8:	cd bf       	out	0x3d, r28	; 61
static unsigned int iLoopDisplayIdle=0;
static char stDispIdle=diScan;
     char i,iDisp;
     char lcdteks[20],sFIP[3];

     iLoopDisplayIdle++;
    bcca:	80 91 82 02 	lds	r24, 0x0282
    bcce:	90 91 83 02 	lds	r25, 0x0283
    bcd2:	01 96       	adiw	r24, 0x01	; 1
    bcd4:	90 93 83 02 	sts	0x0283, r25
    bcd8:	80 93 82 02 	sts	0x0282, r24
     //Setting DateTime ON

	if ((iLoopDisplayIdle%50)==0){
    bcdc:	62 e3       	ldi	r22, 0x32	; 50
    bcde:	70 e0       	ldi	r23, 0x00	; 0
    bce0:	0e 94 7a aa 	call	0x154f4	; 0x154f4 <__udivmodhi4>
    bce4:	89 2b       	or	r24, r25
    bce6:	09 f5       	brne	.+66     	; 0xbd2a <DisplayIdle+0x8a>
	   if (IFType==IT_STANDALONE)DisplayPumpStatus();
    bce8:	80 91 00 01 	lds	r24, 0x0100
    bcec:	82 30       	cpi	r24, 0x02	; 2
    bcee:	11 f4       	brne	.+4      	; 0xbcf4 <DisplayIdle+0x54>
    bcf0:	0e 94 c2 49 	call	0x9384	; 0x9384 <DisplayPumpStatus>
	   if(eeprom_read_byte(&DefShowDateTime)) DisplayDateTime();
    bcf4:	87 e3       	ldi	r24, 0x37	; 55
    bcf6:	90 e0       	ldi	r25, 0x00	; 0
    bcf8:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
    bcfc:	88 23       	and	r24, r24
    bcfe:	19 f0       	breq	.+6      	; 0xbd06 <DisplayIdle+0x66>
    bd00:	0e 94 02 49 	call	0x9204	; 0x9204 <DisplayDateTime>
    bd04:	02 c0       	rjmp	.+4      	; 0xbd0a <DisplayIdle+0x6a>
       else DisplayTicker();
    bd06:	0e 94 36 5e 	call	0xbc6c	; 0xbc6c <DisplayTicker>
	   //Display Standalone Sequnece
	   
	   if((IFType==IT_STANDALONE)&&(IsNewPoolingSequence==True)){
    bd0a:	80 91 00 01 	lds	r24, 0x0100
    bd0e:	82 30       	cpi	r24, 0x02	; 2
    bd10:	61 f4       	brne	.+24     	; 0xbd2a <DisplayIdle+0x8a>
    bd12:	80 91 81 01 	lds	r24, 0x0181
    bd16:	81 30       	cpi	r24, 0x01	; 1
    bd18:	41 f4       	brne	.+16     	; 0xbd2a <DisplayIdle+0x8a>
	       IsNewPoolingSequence=False;
    bd1a:	10 92 81 01 	sts	0x0181, r1
		   DisplayStandaloneSequence(4,18,iSequencePooling);
    bd1e:	84 e0       	ldi	r24, 0x04	; 4
    bd20:	62 e1       	ldi	r22, 0x12	; 18
    bd22:	40 91 80 01 	lds	r20, 0x0180
    bd26:	0e 94 eb 5b 	call	0xb7d6	; 0xb7d6 <DisplayStandaloneSequence>

	 }
     //DisplayPumpStatus Standalone Mode

	 //Display Printing FIP
	 switch (stDispIdle){
    bd2a:	f0 90 81 02 	lds	r15, 0x0281
    bd2e:	ff 20       	and	r15, r15
    bd30:	29 f0       	breq	.+10     	; 0xbd3c <DisplayIdle+0x9c>
    bd32:	81 e0       	ldi	r24, 0x01	; 1
    bd34:	f8 16       	cp	r15, r24
    bd36:	09 f0       	breq	.+2      	; 0xbd3a <DisplayIdle+0x9a>
    bd38:	58 c0       	rjmp	.+176    	; 0xbdea <DisplayIdle+0x14a>
    bd3a:	2f c0       	rjmp	.+94     	; 0xbd9a <DisplayIdle+0xfa>
	 case diScan:
	      if (IsBusyIdlePrinting==True){
    bd3c:	f0 90 b2 01 	lds	r15, 0x01B2
    bd40:	91 e0       	ldi	r25, 0x01	; 1
    bd42:	f9 16       	cp	r15, r25
    bd44:	09 f0       	breq	.+2      	; 0xbd48 <DisplayIdle+0xa8>
    bd46:	51 c0       	rjmp	.+162    	; 0xbdea <DisplayIdle+0x14a>
		       sprintf_P(lcdteks,PSTR("Printing FIP%s "),strFIP_ID);
    bd48:	00 d0       	rcall	.+0      	; 0xbd4a <DisplayIdle+0xaa>
    bd4a:	00 d0       	rcall	.+0      	; 0xbd4c <DisplayIdle+0xac>
    bd4c:	00 d0       	rcall	.+0      	; 0xbd4e <DisplayIdle+0xae>
    bd4e:	ed b7       	in	r30, 0x3d	; 61
    bd50:	fe b7       	in	r31, 0x3e	; 62
    bd52:	31 96       	adiw	r30, 0x01	; 1
    bd54:	8e 01       	movw	r16, r28
    bd56:	0c 5f       	subi	r16, 0xFC	; 252
    bd58:	1f 4f       	sbci	r17, 0xFF	; 255
    bd5a:	ad b7       	in	r26, 0x3d	; 61
    bd5c:	be b7       	in	r27, 0x3e	; 62
    bd5e:	12 96       	adiw	r26, 0x02	; 2
    bd60:	1c 93       	st	X, r17
    bd62:	0e 93       	st	-X, r16
    bd64:	11 97       	sbiw	r26, 0x01	; 1
    bd66:	83 e5       	ldi	r24, 0x53	; 83
    bd68:	9e e1       	ldi	r25, 0x1E	; 30
    bd6a:	93 83       	std	Z+3, r25	; 0x03
    bd6c:	82 83       	std	Z+2, r24	; 0x02
    bd6e:	89 eb       	ldi	r24, 0xB9	; 185
    bd70:	97 e0       	ldi	r25, 0x07	; 7
    bd72:	95 83       	std	Z+5, r25	; 0x05
    bd74:	84 83       	std	Z+4, r24	; 0x04
    bd76:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
			   lcd_print(3,1,lcdteks);
    bd7a:	ed b7       	in	r30, 0x3d	; 61
    bd7c:	fe b7       	in	r31, 0x3e	; 62
    bd7e:	36 96       	adiw	r30, 0x06	; 6
    bd80:	0f b6       	in	r0, 0x3f	; 63
    bd82:	f8 94       	cli
    bd84:	fe bf       	out	0x3e, r31	; 62
    bd86:	0f be       	out	0x3f, r0	; 63
    bd88:	ed bf       	out	0x3d, r30	; 61
    bd8a:	83 e0       	ldi	r24, 0x03	; 3
    bd8c:	61 e0       	ldi	r22, 0x01	; 1
    bd8e:	a8 01       	movw	r20, r16
    bd90:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
			   stDispIdle=diWaitNoBusy;
    bd94:	f0 92 81 02 	sts	0x0281, r15
    bd98:	28 c0       	rjmp	.+80     	; 0xbdea <DisplayIdle+0x14a>
		  }         
	      break;
     case diWaitNoBusy:
	      if (IsBusyIdlePrinting==False){
    bd9a:	80 91 b2 01 	lds	r24, 0x01B2
    bd9e:	88 23       	and	r24, r24
    bda0:	21 f5       	brne	.+72     	; 0xbdea <DisplayIdle+0x14a>
		       sprintf_P(lcdteks,PSTR("                    "));
    bda2:	00 d0       	rcall	.+0      	; 0xbda4 <DisplayIdle+0x104>
    bda4:	00 d0       	rcall	.+0      	; 0xbda6 <DisplayIdle+0x106>
    bda6:	8e 01       	movw	r16, r28
    bda8:	0c 5f       	subi	r16, 0xFC	; 252
    bdaa:	1f 4f       	sbci	r17, 0xFF	; 255
    bdac:	ad b7       	in	r26, 0x3d	; 61
    bdae:	be b7       	in	r27, 0x3e	; 62
    bdb0:	12 96       	adiw	r26, 0x02	; 2
    bdb2:	1c 93       	st	X, r17
    bdb4:	0e 93       	st	-X, r16
    bdb6:	11 97       	sbiw	r26, 0x01	; 1
    bdb8:	8e e3       	ldi	r24, 0x3E	; 62
    bdba:	9e e1       	ldi	r25, 0x1E	; 30
    bdbc:	14 96       	adiw	r26, 0x04	; 4
    bdbe:	9c 93       	st	X, r25
    bdc0:	8e 93       	st	-X, r24
    bdc2:	13 97       	sbiw	r26, 0x03	; 3
    bdc4:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
			   lcd_print(3,1,lcdteks);
    bdc8:	0f 90       	pop	r0
    bdca:	0f 90       	pop	r0
    bdcc:	0f 90       	pop	r0
    bdce:	0f 90       	pop	r0
    bdd0:	83 e0       	ldi	r24, 0x03	; 3
    bdd2:	61 e0       	ldi	r22, 0x01	; 1
    bdd4:	a8 01       	movw	r20, r16
    bdd6:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
			   stDispIdle=diScan;
    bdda:	10 92 81 02 	sts	0x0281, r1
			   if (nLocalAccount>0)IsViewFillingFIP=True;
    bdde:	80 91 8f 01 	lds	r24, 0x018F
    bde2:	88 23       	and	r24, r24
    bde4:	11 f0       	breq	.+4      	; 0xbdea <DisplayIdle+0x14a>
    bde6:	f0 92 96 01 	sts	0x0196, r15
		  }
	      break;     
	 }
	 //Display Filling FIP
	 if (IsViewFillingFIP==True){
    bdea:	80 91 96 01 	lds	r24, 0x0196
    bdee:	81 30       	cpi	r24, 0x01	; 1
    bdf0:	09 f0       	breq	.+2      	; 0xbdf4 <DisplayIdle+0x154>
    bdf2:	69 c0       	rjmp	.+210    	; 0xbec6 <DisplayIdle+0x226>
	     IsViewFillingFIP=False;
    bdf4:	10 92 96 01 	sts	0x0196, r1
		 if (nLocalAccount>0){
    bdf8:	80 91 8f 01 	lds	r24, 0x018F
    bdfc:	88 23       	and	r24, r24
    bdfe:	09 f4       	brne	.+2      	; 0xbe02 <DisplayIdle+0x162>
    be00:	5c c0       	rjmp	.+184    	; 0xbeba <DisplayIdle+0x21a>
		     lcd_printf(3,1,PSTR("@FIP:"));
    be02:	83 e0       	ldi	r24, 0x03	; 3
    be04:	61 e0       	ldi	r22, 0x01	; 1
    be06:	48 e3       	ldi	r20, 0x38	; 56
    be08:	5e e1       	ldi	r21, 0x1E	; 30
    be0a:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
    be0e:	ff 24       	eor	r15, r15
		     for (iDisp=0;iDisp<nLocalAccount;iDisp++){
			      //leadingZero(LocalAccountFIP[iDisp],sFIP);
				  sprintf_P(sFIP,PSTR("%.2d"),LocalAccountFIP[iDisp]);
    be10:	5e 01       	movw	r10, r28
    be12:	08 94       	sec
    be14:	a1 1c       	adc	r10, r1
    be16:	b1 1c       	adc	r11, r1
    be18:	b3 e3       	ldi	r27, 0x33	; 51
    be1a:	6b 2e       	mov	r6, r27
    be1c:	be e1       	ldi	r27, 0x1E	; 30
    be1e:	7b 2e       	mov	r7, r27
			      sprintf_P(lcdteks,PSTR("#%s"),sFIP);
    be20:	a4 e0       	ldi	r26, 0x04	; 4
    be22:	ca 2e       	mov	r12, r26
    be24:	d1 2c       	mov	r13, r1
    be26:	cc 0e       	add	r12, r28
    be28:	dd 1e       	adc	r13, r29
    be2a:	ff e2       	ldi	r31, 0x2F	; 47
    be2c:	8f 2e       	mov	r8, r31
    be2e:	fe e1       	ldi	r31, 0x1E	; 30
    be30:	9f 2e       	mov	r9, r31
    be32:	3d c0       	rjmp	.+122    	; 0xbeae <DisplayIdle+0x20e>
	     IsViewFillingFIP=False;
		 if (nLocalAccount>0){
		     lcd_printf(3,1,PSTR("@FIP:"));
		     for (iDisp=0;iDisp<nLocalAccount;iDisp++){
			      //leadingZero(LocalAccountFIP[iDisp],sFIP);
				  sprintf_P(sFIP,PSTR("%.2d"),LocalAccountFIP[iDisp]);
    be34:	0f 2d       	mov	r16, r15
    be36:	10 e0       	ldi	r17, 0x00	; 0
    be38:	00 d0       	rcall	.+0      	; 0xbe3a <DisplayIdle+0x19a>
    be3a:	00 d0       	rcall	.+0      	; 0xbe3c <DisplayIdle+0x19c>
    be3c:	00 d0       	rcall	.+0      	; 0xbe3e <DisplayIdle+0x19e>
    be3e:	ad b7       	in	r26, 0x3d	; 61
    be40:	be b7       	in	r27, 0x3e	; 62
    be42:	11 96       	adiw	r26, 0x01	; 1
    be44:	ed b7       	in	r30, 0x3d	; 61
    be46:	fe b7       	in	r31, 0x3e	; 62
    be48:	b2 82       	std	Z+2, r11	; 0x02
    be4a:	a1 82       	std	Z+1, r10	; 0x01
    be4c:	13 96       	adiw	r26, 0x03	; 3
    be4e:	7c 92       	st	X, r7
    be50:	6e 92       	st	-X, r6
    be52:	12 97       	sbiw	r26, 0x02	; 2
    be54:	f8 01       	movw	r30, r16
    be56:	ea 5a       	subi	r30, 0xAA	; 170
    be58:	fc 4f       	sbci	r31, 0xFC	; 252
    be5a:	80 81       	ld	r24, Z
    be5c:	14 96       	adiw	r26, 0x04	; 4
    be5e:	8c 93       	st	X, r24
    be60:	14 97       	sbiw	r26, 0x04	; 4
    be62:	15 96       	adiw	r26, 0x05	; 5
    be64:	1c 92       	st	X, r1
    be66:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
			      sprintf_P(lcdteks,PSTR("#%s"),sFIP);
    be6a:	ed b7       	in	r30, 0x3d	; 61
    be6c:	fe b7       	in	r31, 0x3e	; 62
    be6e:	31 96       	adiw	r30, 0x01	; 1
    be70:	ad b7       	in	r26, 0x3d	; 61
    be72:	be b7       	in	r27, 0x3e	; 62
    be74:	12 96       	adiw	r26, 0x02	; 2
    be76:	dc 92       	st	X, r13
    be78:	ce 92       	st	-X, r12
    be7a:	11 97       	sbiw	r26, 0x01	; 1
    be7c:	93 82       	std	Z+3, r9	; 0x03
    be7e:	82 82       	std	Z+2, r8	; 0x02
    be80:	b5 82       	std	Z+5, r11	; 0x05
    be82:	a4 82       	std	Z+4, r10	; 0x04
    be84:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
			      lcd_print(3,6+(iDisp*3),lcdteks);
    be88:	ed b7       	in	r30, 0x3d	; 61
    be8a:	fe b7       	in	r31, 0x3e	; 62
    be8c:	36 96       	adiw	r30, 0x06	; 6
    be8e:	0f b6       	in	r0, 0x3f	; 63
    be90:	f8 94       	cli
    be92:	fe bf       	out	0x3e, r31	; 62
    be94:	0f be       	out	0x3f, r0	; 63
    be96:	ed bf       	out	0x3d, r30	; 61
    be98:	b8 01       	movw	r22, r16
    be9a:	66 0f       	add	r22, r22
    be9c:	77 1f       	adc	r23, r23
    be9e:	60 0f       	add	r22, r16
    bea0:	71 1f       	adc	r23, r17
    bea2:	6a 5f       	subi	r22, 0xFA	; 250
    bea4:	83 e0       	ldi	r24, 0x03	; 3
    bea6:	a6 01       	movw	r20, r12
    bea8:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
	 //Display Filling FIP
	 if (IsViewFillingFIP==True){
	     IsViewFillingFIP=False;
		 if (nLocalAccount>0){
		     lcd_printf(3,1,PSTR("@FIP:"));
		     for (iDisp=0;iDisp<nLocalAccount;iDisp++){
    beac:	f3 94       	inc	r15
    beae:	80 91 8f 01 	lds	r24, 0x018F
    beb2:	f8 16       	cp	r15, r24
    beb4:	08 f4       	brcc	.+2      	; 0xbeb8 <DisplayIdle+0x218>
    beb6:	be cf       	rjmp	.-132    	; 0xbe34 <DisplayIdle+0x194>
    beb8:	06 c0       	rjmp	.+12     	; 0xbec6 <DisplayIdle+0x226>
				  sprintf_P(sFIP,PSTR("%.2d"),LocalAccountFIP[iDisp]);
			      sprintf_P(lcdteks,PSTR("#%s"),sFIP);
			      lcd_print(3,6+(iDisp*3),lcdteks);
		     }
		 }else{
		 lcd_printf(3,1,PSTR("                    "));
    beba:	83 e0       	ldi	r24, 0x03	; 3
    bebc:	61 e0       	ldi	r22, 0x01	; 1
    bebe:	4a e1       	ldi	r20, 0x1A	; 26
    bec0:	5e e1       	ldi	r21, 0x1E	; 30
    bec2:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		 }    
	 }
	 //Filling @FIP 
     if (IsCompleteFilling==True){
    bec6:	80 91 a9 01 	lds	r24, 0x01A9
    beca:	81 30       	cpi	r24, 0x01	; 1
    becc:	c1 f4       	brne	.+48     	; 0xbefe <DisplayIdle+0x25e>
	     IsCompleteFilling=False;
    bece:	10 92 a9 01 	sts	0x01A9, r1
	     if (nLocalAccount>0){
    bed2:	90 91 8f 01 	lds	r25, 0x018F
    bed6:	99 23       	and	r25, r25
    bed8:	91 f0       	breq	.+36     	; 0xbefe <DisplayIdle+0x25e>
    beda:	e6 e5       	ldi	r30, 0x56	; 86
    bedc:	f3 e0       	ldi	r31, 0x03	; 3
			 for(i=0;i<nLocalAccount;i++){//Shift data
    bede:	29 2f       	mov	r18, r25
    bee0:	30 e0       	ldi	r19, 0x00	; 0
    bee2:	2e 0f       	add	r18, r30
    bee4:	3f 1f       	adc	r19, r31
    bee6:	02 c0       	rjmp	.+4      	; 0xbeec <DisplayIdle+0x24c>
			     LocalAccountFIP[i]=LocalAccountFIP[i+1];
    bee8:	81 81       	ldd	r24, Z+1	; 0x01
    beea:	81 93       	st	Z+, r24
	 }
	 //Filling @FIP 
     if (IsCompleteFilling==True){
	     IsCompleteFilling=False;
	     if (nLocalAccount>0){
			 for(i=0;i<nLocalAccount;i++){//Shift data
    beec:	e2 17       	cp	r30, r18
    beee:	f3 07       	cpc	r31, r19
    bef0:	d9 f7       	brne	.-10     	; 0xbee8 <DisplayIdle+0x248>
			     LocalAccountFIP[i]=LocalAccountFIP[i+1];
			 }
			 nLocalAccount--;
    bef2:	91 50       	subi	r25, 0x01	; 1
    bef4:	90 93 8f 01 	sts	0x018F, r25
             IsViewFillingFIP=True; 
    bef8:	81 e0       	ldi	r24, 0x01	; 1
    befa:	80 93 96 01 	sts	0x0196, r24
		 }
	 }
}
    befe:	67 96       	adiw	r28, 0x17	; 23
    bf00:	0f b6       	in	r0, 0x3f	; 63
    bf02:	f8 94       	cli
    bf04:	de bf       	out	0x3e, r29	; 62
    bf06:	0f be       	out	0x3f, r0	; 63
    bf08:	cd bf       	out	0x3d, r28	; 61
    bf0a:	cf 91       	pop	r28
    bf0c:	df 91       	pop	r29
    bf0e:	1f 91       	pop	r17
    bf10:	0f 91       	pop	r16
    bf12:	ff 90       	pop	r15
    bf14:	df 90       	pop	r13
    bf16:	cf 90       	pop	r12
    bf18:	bf 90       	pop	r11
    bf1a:	af 90       	pop	r10
    bf1c:	9f 90       	pop	r9
    bf1e:	8f 90       	pop	r8
    bf20:	7f 90       	pop	r7
    bf22:	6f 90       	pop	r6
    bf24:	08 95       	ret

0000bf26 <systemMaster>:
	cbi(DDRB,2);sbi(PORTB,2);//MOSI Input
	cbi(DDRB,1);sbi(PORTB,1);//SCK  Input
}

void systemMaster(){
  	_spi_init(1, 0);         //Master
    bf26:	81 e0       	ldi	r24, 0x01	; 1
    bf28:	60 e0       	ldi	r22, 0x00	; 0
    bf2a:	0e 94 dd a6 	call	0x14dba	; 0x14dba <_spi_init>
    _spi_enable(_SPI_SLAVE); //Enable SS 
    bf2e:	81 e0       	ldi	r24, 0x01	; 1
    bf30:	0e 94 f0 a6 	call	0x14de0	; 0x14de0 <_spi_enable>
	cbi(DDRB,3);sbi(PORTB,3);//MISO Input
    bf34:	bb 98       	cbi	0x17, 3	; 23
    bf36:	c3 9a       	sbi	0x18, 3	; 24
	sbi(DDRB,2);             //MOSI Output
    bf38:	ba 9a       	sbi	0x17, 2	; 23
}
    bf3a:	08 95       	ret

0000bf3c <systemSlave>:




void systemSlave(){
    _spi_enable(_SPI_NONE);	
    bf3c:	80 e0       	ldi	r24, 0x00	; 0
    bf3e:	0e 94 f0 a6 	call	0x14de0	; 0x14de0 <_spi_enable>
  	_spi_init(0, 1);         //Slave
    bf42:	80 e0       	ldi	r24, 0x00	; 0
    bf44:	61 e0       	ldi	r22, 0x01	; 1
    bf46:	0e 94 dd a6 	call	0x14dba	; 0x14dba <_spi_init>
	sbi(DDRB,3);             //MISO Output
    bf4a:	bb 9a       	sbi	0x17, 3	; 23
	sbi(DDRB,3);sbi(PORTB,3);//MISO Output
    bf4c:	bb 9a       	sbi	0x17, 3	; 23
    bf4e:	c3 9a       	sbi	0x18, 3	; 24
	cbi(DDRB,2);sbi(PORTB,2);//MOSI Input
    bf50:	ba 98       	cbi	0x17, 2	; 23
    bf52:	c2 9a       	sbi	0x18, 2	; 24
	cbi(DDRB,1);sbi(PORTB,1);//SCK  Input
    bf54:	b9 98       	cbi	0x17, 1	; 23
    bf56:	c1 9a       	sbi	0x18, 1	; 24
}
    bf58:	08 95       	ret

0000bf5a <EDCSendByte>:
    _spi_enable(_SPI_SLAVE); //Enable SS 
	cbi(DDRB,3);sbi(PORTB,3);//MISO Input
	sbi(DDRB,2);             //MOSI Output
}

void EDCSendByte(char EDCData){
    bf5a:	1f 93       	push	r17
    bf5c:	18 2f       	mov	r17, r24
     systemMaster();	 
    bf5e:	0e 94 93 5f 	call	0xbf26	; 0xbf26 <systemMaster>
     _spi(EDCData);
    bf62:	81 2f       	mov	r24, r17
    bf64:	0e 94 07 a7 	call	0x14e0e	; 0x14e0e <_spi>
     systemSlave();
    bf68:	0e 94 9e 5f 	call	0xbf3c	; 0xbf3c <systemSlave>
}
    bf6c:	1f 91       	pop	r17
    bf6e:	08 95       	ret

0000bf70 <SendEDCMessage>:
     char Result;
	 Result=xLRC^DataIn;
     return(Result);
}

void SendEDCMessage(){
    bf70:	cf 92       	push	r12
    bf72:	df 92       	push	r13
    bf74:	ef 92       	push	r14
    bf76:	ff 92       	push	r15
    bf78:	0f 93       	push	r16
    bf7a:	1f 93       	push	r17
    bf7c:	df 93       	push	r29
    bf7e:	cf 93       	push	r28
    bf80:	cd b7       	in	r28, 0x3d	; 61
    bf82:	de b7       	in	r29, 0x3e	; 62
    bf84:	ec 97       	sbiw	r28, 0x3c	; 60
    bf86:	0f b6       	in	r0, 0x3f	; 63
    bf88:	f8 94       	cli
    bf8a:	de bf       	out	0x3e, r29	; 62
    bf8c:	0f be       	out	0x3f, r0	; 63
    bf8e:	cd bf       	out	0x3d, r28	; 61

     //GenerateData
	 //sprintf_P(strAmount,PSTR("%d"),100);//Testing Only
	 //AddZeroLead(strAmount,8);
	 //uart_printf(0,0,PSTR("StrStatus:"));uart_print(0,1,strStatus);
     sprintf_P(SerialEDC,PSTR("02%s%s%s%s%s%s%s"),strTranNo,strFIP_ID,strDescription,strPrice,strVolume,strAmount,strStatus);     
    bf90:	8d b7       	in	r24, 0x3d	; 61
    bf92:	9e b7       	in	r25, 0x3e	; 62
    bf94:	42 97       	sbiw	r24, 0x12	; 18
    bf96:	0f b6       	in	r0, 0x3f	; 63
    bf98:	f8 94       	cli
    bf9a:	9e bf       	out	0x3e, r25	; 62
    bf9c:	0f be       	out	0x3f, r0	; 63
    bf9e:	8d bf       	out	0x3d, r24	; 61
    bfa0:	ed b7       	in	r30, 0x3d	; 61
    bfa2:	fe b7       	in	r31, 0x3e	; 62
    bfa4:	31 96       	adiw	r30, 0x01	; 1
    bfa6:	8e 01       	movw	r16, r28
    bfa8:	0f 5f       	subi	r16, 0xFF	; 255
    bfaa:	1f 4f       	sbci	r17, 0xFF	; 255
    bfac:	ad b7       	in	r26, 0x3d	; 61
    bfae:	be b7       	in	r27, 0x3e	; 62
    bfb0:	12 96       	adiw	r26, 0x02	; 2
    bfb2:	1c 93       	st	X, r17
    bfb4:	0e 93       	st	-X, r16
    bfb6:	11 97       	sbiw	r26, 0x01	; 1
    bfb8:	87 e0       	ldi	r24, 0x07	; 7
    bfba:	9e e1       	ldi	r25, 0x1E	; 30
    bfbc:	93 83       	std	Z+3, r25	; 0x03
    bfbe:	82 83       	std	Z+2, r24	; 0x02
    bfc0:	88 e8       	ldi	r24, 0x88	; 136
    bfc2:	9c e0       	ldi	r25, 0x0C	; 12
    bfc4:	95 83       	std	Z+5, r25	; 0x05
    bfc6:	84 83       	std	Z+4, r24	; 0x04
    bfc8:	89 eb       	ldi	r24, 0xB9	; 185
    bfca:	97 e0       	ldi	r25, 0x07	; 7
    bfcc:	97 83       	std	Z+7, r25	; 0x07
    bfce:	86 83       	std	Z+6, r24	; 0x06
    bfd0:	8c e0       	ldi	r24, 0x0C	; 12
    bfd2:	98 e0       	ldi	r25, 0x08	; 8
    bfd4:	91 87       	std	Z+9, r25	; 0x09
    bfd6:	80 87       	std	Z+8, r24	; 0x08
    bfd8:	8e e9       	ldi	r24, 0x9E	; 158
    bfda:	95 e0       	ldi	r25, 0x05	; 5
    bfdc:	93 87       	std	Z+11, r25	; 0x0b
    bfde:	82 87       	std	Z+10, r24	; 0x0a
    bfe0:	85 e7       	ldi	r24, 0x75	; 117
    bfe2:	93 e0       	ldi	r25, 0x03	; 3
    bfe4:	95 87       	std	Z+13, r25	; 0x0d
    bfe6:	84 87       	std	Z+12, r24	; 0x0c
    bfe8:	83 eb       	ldi	r24, 0xB3	; 179
    bfea:	9b e0       	ldi	r25, 0x0B	; 11
    bfec:	97 87       	std	Z+15, r25	; 0x0f
    bfee:	86 87       	std	Z+14, r24	; 0x0e
    bff0:	8a e8       	ldi	r24, 0x8A	; 138
    bff2:	93 e0       	ldi	r25, 0x03	; 3
    bff4:	91 8b       	std	Z+17, r25	; 0x11
    bff6:	80 8b       	std	Z+16, r24	; 0x10
    bff8:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>

	 //SendingData
	 xCRC=0;EDCSendByte(0x02);
    bffc:	8d b7       	in	r24, 0x3d	; 61
    bffe:	9e b7       	in	r25, 0x3e	; 62
    c000:	42 96       	adiw	r24, 0x12	; 18
    c002:	0f b6       	in	r0, 0x3f	; 63
    c004:	f8 94       	cli
    c006:	9e bf       	out	0x3e, r25	; 62
    c008:	0f be       	out	0x3f, r0	; 63
    c00a:	8d bf       	out	0x3d, r24	; 61
    c00c:	82 e0       	ldi	r24, 0x02	; 2
    c00e:	0e 94 ad 5f 	call	0xbf5a	; 0xbf5a <EDCSendByte>
    c012:	ff 24       	eor	r15, r15
    c014:	92 e0       	ldi	r25, 0x02	; 2
    c016:	e9 2e       	mov	r14, r25
    c018:	84 ed       	ldi	r24, 0xD4	; 212
    c01a:	c8 2e       	mov	r12, r24
    c01c:	80 e3       	ldi	r24, 0x30	; 48
    c01e:	d8 2e       	mov	r13, r24
    c020:	0a c0       	rjmp	.+20     	; 0xc036 <SendEDCMessage+0xc6>
	 xCRC=CalcLRC(xCRC,0x02);	      
	 for (i=0;i<strlen(SerialEDC);i++){
          xCRC=CalcLRC(xCRC,SerialEDC[i]);
    c022:	a0 0f       	add	r26, r16
    c024:	b1 1f       	adc	r27, r17
    c026:	8c 91       	ld	r24, X
     systemSlave();
}

char CalcLRC(char xLRC,char DataIn){
     char Result;
	 Result=xLRC^DataIn;
    c028:	e8 26       	eor	r14, r24
	 //SendingData
	 xCRC=0;EDCSendByte(0x02);
	 xCRC=CalcLRC(xCRC,0x02);	      
	 for (i=0;i<strlen(SerialEDC);i++){
          xCRC=CalcLRC(xCRC,SerialEDC[i]);
          EDCSendByte(SerialEDC[i]);
    c02a:	0e 94 ad 5f 	call	0xbf5a	; 0xbf5a <EDCSendByte>
    c02e:	c6 01       	movw	r24, r12
    c030:	01 97       	sbiw	r24, 0x01	; 1
    c032:	f1 f7       	brne	.-4      	; 0xc030 <SendEDCMessage+0xc0>
     sprintf_P(SerialEDC,PSTR("02%s%s%s%s%s%s%s"),strTranNo,strFIP_ID,strDescription,strPrice,strVolume,strAmount,strStatus);     

	 //SendingData
	 xCRC=0;EDCSendByte(0x02);
	 xCRC=CalcLRC(xCRC,0x02);	      
	 for (i=0;i<strlen(SerialEDC);i++){
    c034:	f3 94       	inc	r15
    c036:	f8 01       	movw	r30, r16
    c038:	01 90       	ld	r0, Z+
    c03a:	00 20       	and	r0, r0
    c03c:	e9 f7       	brne	.-6      	; 0xc038 <SendEDCMessage+0xc8>
    c03e:	31 97       	sbiw	r30, 0x01	; 1
    c040:	e0 1b       	sub	r30, r16
    c042:	f1 0b       	sbc	r31, r17
    c044:	af 2d       	mov	r26, r15
    c046:	b0 e0       	ldi	r27, 0x00	; 0
    c048:	ae 17       	cp	r26, r30
    c04a:	bf 07       	cpc	r27, r31
    c04c:	50 f3       	brcs	.-44     	; 0xc022 <SendEDCMessage+0xb2>
          xCRC=CalcLRC(xCRC,SerialEDC[i]);
          EDCSendByte(SerialEDC[i]);
		  //uart(0,1,SerialEDC[i]);
		  _delay_ms(SPI_EDC_DELAY);//min:8
	 }
     EDCSendByte(0x03);
    c04e:	83 e0       	ldi	r24, 0x03	; 3
    c050:	0e 94 ad 5f 	call	0xbf5a	; 0xbf5a <EDCSendByte>
	 xCRC=CalcLRC(xCRC,0x03);	      
	 EDCSendByte(xCRC);
    c054:	83 e0       	ldi	r24, 0x03	; 3
    c056:	8e 25       	eor	r24, r14
    c058:	0e 94 ad 5f 	call	0xbf5a	; 0xbf5a <EDCSendByte>
}
    c05c:	ec 96       	adiw	r28, 0x3c	; 60
    c05e:	0f b6       	in	r0, 0x3f	; 63
    c060:	f8 94       	cli
    c062:	de bf       	out	0x3e, r29	; 62
    c064:	0f be       	out	0x3f, r0	; 63
    c066:	cd bf       	out	0x3d, r28	; 61
    c068:	cf 91       	pop	r28
    c06a:	df 91       	pop	r29
    c06c:	1f 91       	pop	r17
    c06e:	0f 91       	pop	r16
    c070:	ff 90       	pop	r15
    c072:	ef 90       	pop	r14
    c074:	df 90       	pop	r13
    c076:	cf 90       	pop	r12
    c078:	08 95       	ret

0000c07a <SendSlaveCommand>:
void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
	 PoolMsg=plMsg;
     IsControlPooling=True;
}
void SendSlaveCommand(char SlaveCommand,char SlaveMessage){     
    c07a:	0f 93       	push	r16
    c07c:	1f 93       	push	r17
    c07e:	18 2f       	mov	r17, r24
    c080:	06 2f       	mov	r16, r22
	 systemMaster();
    c082:	0e 94 93 5f 	call	0xbf26	; 0xbf26 <systemMaster>
	 _spi(0x05);
    c086:	85 e0       	ldi	r24, 0x05	; 5
    c088:	0e 94 07 a7 	call	0x14e0e	; 0x14e0e <_spi>
	 _spi(SlaveCommand);
    c08c:	81 2f       	mov	r24, r17
    c08e:	0e 94 07 a7 	call	0x14e0e	; 0x14e0e <_spi>
	 _spi(SlaveMessage);
    c092:	80 2f       	mov	r24, r16
    c094:	0e 94 07 a7 	call	0x14e0e	; 0x14e0e <_spi>
	 _spi(0x06);
    c098:	86 e0       	ldi	r24, 0x06	; 6
    c09a:	0e 94 07 a7 	call	0x14e0e	; 0x14e0e <_spi>
	 systemSlave();
    c09e:	0e 94 9e 5f 	call	0xbf3c	; 0xbf3c <systemSlave>
}
    c0a2:	1f 91       	pop	r17
    c0a4:	0f 91       	pop	r16
    c0a6:	08 95       	ret

0000c0a8 <FSettingPumpID>:
     if ((*Value)>MinValue){
	     (*Value)--;
	 }else *Value=MaxValue;
}

char FSettingPumpID(){
    c0a8:	9f 92       	push	r9
    c0aa:	af 92       	push	r10
    c0ac:	bf 92       	push	r11
    c0ae:	cf 92       	push	r12
    c0b0:	df 92       	push	r13
    c0b2:	ef 92       	push	r14
    c0b4:	ff 92       	push	r15
    c0b6:	0f 93       	push	r16
    c0b8:	1f 93       	push	r17
    c0ba:	df 93       	push	r29
    c0bc:	cf 93       	push	r28
    c0be:	cd b7       	in	r28, 0x3d	; 61
    c0c0:	de b7       	in	r29, 0x3e	; 62
    c0c2:	64 97       	sbiw	r28, 0x14	; 20
    c0c4:	0f b6       	in	r0, 0x3f	; 63
    c0c6:	f8 94       	cli
    c0c8:	de bf       	out	0x3e, r29	; 62
    c0ca:	0f be       	out	0x3f, r0	; 63
    c0cc:	cd bf       	out	0x3d, r28	; 61
	 char iLoop,Result,KeyChar,KeyPressed,i,j,CheckPump;
	 char lcdteks[20];
	 static char Idx,PPumpId[8],MsgPumpId,PumpCount;
     
	 Result=MENU_NONE;
	 switch (stMenuPumpID){
    c0ce:	80 91 1a 02 	lds	r24, 0x021A
    c0d2:	85 30       	cpi	r24, 0x05	; 5
    c0d4:	09 f4       	brne	.+2      	; 0xc0d8 <FSettingPumpID+0x30>
    c0d6:	83 c1       	rjmp	.+774    	; 0xc3de <FSettingPumpID+0x336>
    c0d8:	86 30       	cpi	r24, 0x06	; 6
    c0da:	90 f4       	brcc	.+36     	; 0xc100 <FSettingPumpID+0x58>
    c0dc:	82 30       	cpi	r24, 0x02	; 2
    c0de:	09 f4       	brne	.+2      	; 0xc0e2 <FSettingPumpID+0x3a>
    c0e0:	8d c0       	rjmp	.+282    	; 0xc1fc <FSettingPumpID+0x154>
    c0e2:	83 30       	cpi	r24, 0x03	; 3
    c0e4:	30 f4       	brcc	.+12     	; 0xc0f2 <FSettingPumpID+0x4a>
    c0e6:	88 23       	and	r24, r24
    c0e8:	f1 f0       	breq	.+60     	; 0xc126 <FSettingPumpID+0x7e>
    c0ea:	81 30       	cpi	r24, 0x01	; 1
    c0ec:	09 f0       	breq	.+2      	; 0xc0f0 <FSettingPumpID+0x48>
    c0ee:	5b c2       	rjmp	.+1206   	; 0xc5a6 <FSettingPumpID+0x4fe>
    c0f0:	2b c0       	rjmp	.+86     	; 0xc148 <FSettingPumpID+0xa0>
    c0f2:	83 30       	cpi	r24, 0x03	; 3
    c0f4:	09 f4       	brne	.+2      	; 0xc0f8 <FSettingPumpID+0x50>
    c0f6:	4f c1       	rjmp	.+670    	; 0xc396 <FSettingPumpID+0x2ee>
    c0f8:	84 30       	cpi	r24, 0x04	; 4
    c0fa:	09 f0       	breq	.+2      	; 0xc0fe <FSettingPumpID+0x56>
    c0fc:	54 c2       	rjmp	.+1192   	; 0xc5a6 <FSettingPumpID+0x4fe>
    c0fe:	68 c1       	rjmp	.+720    	; 0xc3d0 <FSettingPumpID+0x328>
    c100:	88 30       	cpi	r24, 0x08	; 8
    c102:	09 f4       	brne	.+2      	; 0xc106 <FSettingPumpID+0x5e>
    c104:	f3 c1       	rjmp	.+998    	; 0xc4ec <FSettingPumpID+0x444>
    c106:	89 30       	cpi	r24, 0x09	; 9
    c108:	38 f4       	brcc	.+14     	; 0xc118 <FSettingPumpID+0x70>
    c10a:	86 30       	cpi	r24, 0x06	; 6
    c10c:	09 f4       	brne	.+2      	; 0xc110 <FSettingPumpID+0x68>
    c10e:	92 c1       	rjmp	.+804    	; 0xc434 <FSettingPumpID+0x38c>
    c110:	87 30       	cpi	r24, 0x07	; 7
    c112:	09 f0       	breq	.+2      	; 0xc116 <FSettingPumpID+0x6e>
    c114:	48 c2       	rjmp	.+1168   	; 0xc5a6 <FSettingPumpID+0x4fe>
    c116:	2d c2       	rjmp	.+1114   	; 0xc572 <FSettingPumpID+0x4ca>
    c118:	89 30       	cpi	r24, 0x09	; 9
    c11a:	09 f4       	brne	.+2      	; 0xc11e <FSettingPumpID+0x76>
    c11c:	32 c2       	rjmp	.+1124   	; 0xc582 <FSettingPumpID+0x4da>
    c11e:	8a 30       	cpi	r24, 0x0A	; 10
    c120:	09 f0       	breq	.+2      	; 0xc124 <FSettingPumpID+0x7c>
    c122:	41 c2       	rjmp	.+1154   	; 0xc5a6 <FSettingPumpID+0x4fe>
    c124:	34 c2       	rjmp	.+1128   	; 0xc58e <FSettingPumpID+0x4e6>
	 case mpInitPumpId:	      
	      //Disable PumpPooling
		  if (IFType==IT_STANDALONE)SendSlaveCommand(SC_STOP_POOL_SEQUENCE,0);
    c126:	80 91 00 01 	lds	r24, 0x0100
    c12a:	82 30       	cpi	r24, 0x02	; 2
    c12c:	21 f4       	brne	.+8      	; 0xc136 <FSettingPumpID+0x8e>
    c12e:	8f e1       	ldi	r24, 0x1F	; 31
    c130:	60 e0       	ldi	r22, 0x00	; 0
    c132:	0e 94 3d 60 	call	0xc07a	; 0xc07a <SendSlaveCommand>
		  eeprom_read_block((void*) &PPumpId, (const void*) &DefPumpMap,8);
    c136:	80 e1       	ldi	r24, 0x10	; 16
    c138:	92 e0       	ldi	r25, 0x02	; 2
    c13a:	66 e4       	ldi	r22, 0x46	; 70
    c13c:	70 e0       	ldi	r23, 0x00	; 0
    c13e:	48 e0       	ldi	r20, 0x08	; 8
    c140:	50 e0       	ldi	r21, 0x00	; 0
    c142:	0e 94 30 ad 	call	0x15a60	; 0x15a60 <__eerd_block_m128>
    c146:	49 c1       	rjmp	.+658    	; 0xc3da <FSettingPumpID+0x332>
          stMenuPumpID=mpDisplayPumpId;
	      break;
	 case mpDisplayPumpId:
	      lcd_clear();		  
    c148:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
    c14c:	e0 e1       	ldi	r30, 0x10	; 16
    c14e:	ee 2e       	mov	r14, r30
    c150:	e2 e0       	ldi	r30, 0x02	; 2
    c152:	fe 2e       	mov	r15, r30
    c154:	01 e0       	ldi	r16, 0x01	; 1
    c156:	10 e0       	ldi	r17, 0x00	; 0
		  for (iLoop=0;iLoop<4;iLoop++){
			  sprintf_P(lcdteks,PSTR("%d.P%.2d | %d.P%.2d"),(iLoop+1),PPumpId[iLoop],(iLoop+5),PPumpId[iLoop+4]);
    c158:	6e 01       	movw	r12, r28
    c15a:	08 94       	sec
    c15c:	c1 1c       	adc	r12, r1
    c15e:	d1 1c       	adc	r13, r1
    c160:	7b e2       	ldi	r23, 0x2B	; 43
    c162:	a7 2e       	mov	r10, r23
    c164:	7e e0       	ldi	r23, 0x0E	; 14
    c166:	b7 2e       	mov	r11, r23
    c168:	8d b7       	in	r24, 0x3d	; 61
    c16a:	9e b7       	in	r25, 0x3e	; 62
    c16c:	0c 97       	sbiw	r24, 0x0c	; 12
    c16e:	0f b6       	in	r0, 0x3f	; 63
    c170:	f8 94       	cli
    c172:	9e bf       	out	0x3e, r25	; 62
    c174:	0f be       	out	0x3f, r0	; 63
    c176:	8d bf       	out	0x3d, r24	; 61
    c178:	ed b7       	in	r30, 0x3d	; 61
    c17a:	fe b7       	in	r31, 0x3e	; 62
    c17c:	31 96       	adiw	r30, 0x01	; 1
    c17e:	ad b7       	in	r26, 0x3d	; 61
    c180:	be b7       	in	r27, 0x3e	; 62
    c182:	12 96       	adiw	r26, 0x02	; 2
    c184:	dc 92       	st	X, r13
    c186:	ce 92       	st	-X, r12
    c188:	11 97       	sbiw	r26, 0x01	; 1
    c18a:	b3 82       	std	Z+3, r11	; 0x03
    c18c:	a2 82       	std	Z+2, r10	; 0x02
    c18e:	15 83       	std	Z+5, r17	; 0x05
    c190:	04 83       	std	Z+4, r16	; 0x04
    c192:	d7 01       	movw	r26, r14
    c194:	8c 91       	ld	r24, X
    c196:	86 83       	std	Z+6, r24	; 0x06
    c198:	17 82       	std	Z+7, r1	; 0x07
    c19a:	0c 5f       	subi	r16, 0xFC	; 252
    c19c:	1f 4f       	sbci	r17, 0xFF	; 255
    c19e:	11 87       	std	Z+9, r17	; 0x09
    c1a0:	00 87       	std	Z+8, r16	; 0x08
    c1a2:	04 50       	subi	r16, 0x04	; 4
    c1a4:	10 40       	sbci	r17, 0x00	; 0
    c1a6:	14 96       	adiw	r26, 0x04	; 4
    c1a8:	8c 91       	ld	r24, X
    c1aa:	82 87       	std	Z+10, r24	; 0x0a
    c1ac:	13 86       	std	Z+11, r1	; 0x0b
    c1ae:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
			  lcd_print((iLoop+1),1,lcdteks);
    c1b2:	ed b7       	in	r30, 0x3d	; 61
    c1b4:	fe b7       	in	r31, 0x3e	; 62
    c1b6:	3c 96       	adiw	r30, 0x0c	; 12
    c1b8:	0f b6       	in	r0, 0x3f	; 63
    c1ba:	f8 94       	cli
    c1bc:	fe bf       	out	0x3e, r31	; 62
    c1be:	0f be       	out	0x3f, r0	; 63
    c1c0:	ed bf       	out	0x3d, r30	; 61
    c1c2:	80 2f       	mov	r24, r16
    c1c4:	61 e0       	ldi	r22, 0x01	; 1
    c1c6:	a6 01       	movw	r20, r12
    c1c8:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
    c1cc:	08 94       	sec
    c1ce:	e1 1c       	adc	r14, r1
    c1d0:	f1 1c       	adc	r15, r1
    c1d2:	0f 5f       	subi	r16, 0xFF	; 255
    c1d4:	1f 4f       	sbci	r17, 0xFF	; 255
		  eeprom_read_block((void*) &PPumpId, (const void*) &DefPumpMap,8);
          stMenuPumpID=mpDisplayPumpId;
	      break;
	 case mpDisplayPumpId:
	      lcd_clear();		  
		  for (iLoop=0;iLoop<4;iLoop++){
    c1d6:	f4 e1       	ldi	r31, 0x14	; 20
    c1d8:	ef 16       	cp	r14, r31
    c1da:	f2 e0       	ldi	r31, 0x02	; 2
    c1dc:	ff 06       	cpc	r15, r31
    c1de:	21 f6       	brne	.-120    	; 0xc168 <FSettingPumpID+0xc0>
			  sprintf_P(lcdteks,PSTR("%d.P%.2d | %d.P%.2d"),(iLoop+1),PPumpId[iLoop],(iLoop+5),PPumpId[iLoop+4]);
			  lcd_print((iLoop+1),1,lcdteks);
          }
          lcd_printf(3,15,PSTR("*)Back"));
    c1e0:	83 e0       	ldi	r24, 0x03	; 3
    c1e2:	6f e0       	ldi	r22, 0x0F	; 15
    c1e4:	44 e2       	ldi	r20, 0x24	; 36
    c1e6:	5e e0       	ldi	r21, 0x0E	; 14
    c1e8:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
	      lcd_printf(4,15,PSTR("#)Save"));
    c1ec:	84 e0       	ldi	r24, 0x04	; 4
    c1ee:	6f e0       	ldi	r22, 0x0F	; 15
    c1f0:	4d e1       	ldi	r20, 0x1D	; 29
    c1f2:	5e e0       	ldi	r21, 0x0E	; 14
    c1f4:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
          stMenuPumpID=mpSelectInput;
    c1f8:	82 e0       	ldi	r24, 0x02	; 2
    c1fa:	c0 c1       	rjmp	.+896    	; 0xc57c <FSettingPumpID+0x4d4>
	      break;
     case mpSelectInput:
	      KeyPressed=_key_scan(1);
    c1fc:	81 e0       	ldi	r24, 0x01	; 1
    c1fe:	0e 94 6d a6 	call	0x14cda	; 0x14cda <_key_scan>
    c202:	98 2e       	mov	r9, r24
	      KeyChar=_key_btn(KeyPressed);
    c204:	0e 94 ce a5 	call	0x14b9c	; 0x14b9c <_key_btn>
    c208:	98 2f       	mov	r25, r24
          if ((KeyChar>='1') && (KeyChar<='8')){
    c20a:	81 53       	subi	r24, 0x31	; 49
    c20c:	88 30       	cpi	r24, 0x08	; 8
    c20e:	08 f0       	brcs	.+2      	; 0xc212 <FSettingPumpID+0x16a>
    c210:	85 c0       	rjmp	.+266    	; 0xc31c <FSettingPumpID+0x274>
		      //eeprom_read_block((void*) &PPumpId, (const void*) &DefPumpMap,8);
			  switch(IFType){
    c212:	80 91 00 01 	lds	r24, 0x0100
    c216:	81 30       	cpi	r24, 0x01	; 1
    c218:	19 f0       	breq	.+6      	; 0xc220 <FSettingPumpID+0x178>
    c21a:	82 30       	cpi	r24, 0x02	; 2
    c21c:	a1 f5       	brne	.+104    	; 0xc286 <FSettingPumpID+0x1de>
    c21e:	17 c0       	rjmp	.+46     	; 0xc24e <FSettingPumpID+0x1a6>
			  case IT_SLAVE:
			       if (IsShift==False)IncValue(&PPumpId[KeyChar-'1'],0,99);//PPumpId[KeyChar-'1']=((PPumpId[KeyChar-'1']+1)%100);
    c220:	80 91 19 02 	lds	r24, 0x0219
    c224:	88 23       	and	r24, r24
    c226:	41 f4       	brne	.+16     	; 0xc238 <FSettingPumpID+0x190>
    c228:	e9 2f       	mov	r30, r25
    c22a:	f0 e0       	ldi	r31, 0x00	; 0
    c22c:	e1 52       	subi	r30, 0x21	; 33
    c22e:	fe 4f       	sbci	r31, 0xFE	; 254
		}
	}
}

void IncValue(char *Value,char MinValue,char MaxValue){
     if ((*Value)<MaxValue){
    c230:	80 81       	ld	r24, Z
    c232:	83 36       	cpi	r24, 0x63	; 99
    c234:	c8 f4       	brcc	.+50     	; 0xc268 <FSettingPumpID+0x1c0>
    c236:	16 c0       	rjmp	.+44     	; 0xc264 <FSettingPumpID+0x1bc>
		      //eeprom_read_block((void*) &PPumpId, (const void*) &DefPumpMap,8);
			  switch(IFType){
			  case IT_SLAVE:
			       if (IsShift==False)IncValue(&PPumpId[KeyChar-'1'],0,99);//PPumpId[KeyChar-'1']=((PPumpId[KeyChar-'1']+1)%100);
				   else
				   if (IsShift==True)DecValue(&PPumpId[KeyChar-'1'],0,99);//PPumpId[KeyChar-'1']=100-(100-((PPumpId[KeyChar-'1']+1)%100));
    c238:	81 30       	cpi	r24, 0x01	; 1
    c23a:	29 f5       	brne	.+74     	; 0xc286 <FSettingPumpID+0x1de>
    c23c:	e9 2f       	mov	r30, r25
    c23e:	f0 e0       	ldi	r31, 0x00	; 0
    c240:	e1 52       	subi	r30, 0x21	; 33
    c242:	fe 4f       	sbci	r31, 0xFE	; 254
	     (*Value)++;
	 }else *Value=MinValue;
}

void DecValue(char *Value,char MinValue,char MaxValue){
     if ((*Value)>MinValue){
    c244:	80 81       	ld	r24, Z
    c246:	88 23       	and	r24, r24
    c248:	d1 f4       	brne	.+52     	; 0xc27e <FSettingPumpID+0x1d6>
	     (*Value)--;
	 }else *Value=MaxValue;
    c24a:	83 e6       	ldi	r24, 0x63	; 99
    c24c:	1b c0       	rjmp	.+54     	; 0xc284 <FSettingPumpID+0x1dc>
			       if (IsShift==False)IncValue(&PPumpId[KeyChar-'1'],0,99);//PPumpId[KeyChar-'1']=((PPumpId[KeyChar-'1']+1)%100);
				   else
				   if (IsShift==True)DecValue(&PPumpId[KeyChar-'1'],0,99);//PPumpId[KeyChar-'1']=100-(100-((PPumpId[KeyChar-'1']+1)%100));
			       break;
              case IT_STANDALONE:
			       if (IsShift==False)IncValue(&PPumpId[KeyChar-'1'],0,16);//PPumpId[KeyChar-'1']=((PPumpId[KeyChar-'1']+1)%16);
    c24e:	80 91 19 02 	lds	r24, 0x0219
    c252:	88 23       	and	r24, r24
    c254:	59 f4       	brne	.+22     	; 0xc26c <FSettingPumpID+0x1c4>
    c256:	e9 2f       	mov	r30, r25
    c258:	f0 e0       	ldi	r31, 0x00	; 0
    c25a:	e1 52       	subi	r30, 0x21	; 33
    c25c:	fe 4f       	sbci	r31, 0xFE	; 254
		}
	}
}

void IncValue(char *Value,char MinValue,char MaxValue){
     if ((*Value)<MaxValue){
    c25e:	80 81       	ld	r24, Z
    c260:	80 31       	cpi	r24, 0x10	; 16
    c262:	10 f4       	brcc	.+4      	; 0xc268 <FSettingPumpID+0x1c0>
	     (*Value)++;
    c264:	8f 5f       	subi	r24, 0xFF	; 255
    c266:	0e c0       	rjmp	.+28     	; 0xc284 <FSettingPumpID+0x1dc>
	 }else *Value=MinValue;
    c268:	10 82       	st	Z, r1
    c26a:	0d c0       	rjmp	.+26     	; 0xc286 <FSettingPumpID+0x1de>
				   if (IsShift==True)DecValue(&PPumpId[KeyChar-'1'],0,99);//PPumpId[KeyChar-'1']=100-(100-((PPumpId[KeyChar-'1']+1)%100));
			       break;
              case IT_STANDALONE:
			       if (IsShift==False)IncValue(&PPumpId[KeyChar-'1'],0,16);//PPumpId[KeyChar-'1']=((PPumpId[KeyChar-'1']+1)%16);
				   else
				   if (IsShift==True)DecValue(&PPumpId[KeyChar-'1'],0,16);//PPumpId[KeyChar-'1']=17-(17-((PPumpId[KeyChar-'1']+1)%17));
    c26c:	81 30       	cpi	r24, 0x01	; 1
    c26e:	59 f4       	brne	.+22     	; 0xc286 <FSettingPumpID+0x1de>
    c270:	e9 2f       	mov	r30, r25
    c272:	f0 e0       	ldi	r31, 0x00	; 0
    c274:	e1 52       	subi	r30, 0x21	; 33
    c276:	fe 4f       	sbci	r31, 0xFE	; 254
	     (*Value)++;
	 }else *Value=MinValue;
}

void DecValue(char *Value,char MinValue,char MaxValue){
     if ((*Value)>MinValue){
    c278:	80 81       	ld	r24, Z
    c27a:	88 23       	and	r24, r24
    c27c:	11 f0       	breq	.+4      	; 0xc282 <FSettingPumpID+0x1da>
	     (*Value)--;
    c27e:	81 50       	subi	r24, 0x01	; 1
    c280:	01 c0       	rjmp	.+2      	; 0xc284 <FSettingPumpID+0x1dc>
	 }else *Value=MaxValue;
    c282:	80 e1       	ldi	r24, 0x10	; 16
    c284:	80 83       	st	Z, r24
    c286:	60 e1       	ldi	r22, 0x10	; 16
    c288:	e6 2e       	mov	r14, r22
    c28a:	62 e0       	ldi	r22, 0x02	; 2
    c28c:	f6 2e       	mov	r15, r22
    c28e:	01 e0       	ldi	r16, 0x01	; 1
    c290:	10 e0       	ldi	r17, 0x00	; 0
				   if (IsShift==True)DecValue(&PPumpId[KeyChar-'1'],0,16);//PPumpId[KeyChar-'1']=17-(17-((PPumpId[KeyChar-'1']+1)%17));
			       break;			  
			  }
			  //Redraw
			  for (iLoop=0;iLoop<4;iLoop++){
				  sprintf_P(lcdteks,PSTR("%d.P%.2d | %d.P%.2d"),(iLoop+1),PPumpId[iLoop],(iLoop+5),PPumpId[iLoop+4]);
    c292:	6e 01       	movw	r12, r28
    c294:	08 94       	sec
    c296:	c1 1c       	adc	r12, r1
    c298:	d1 1c       	adc	r13, r1
    c29a:	59 e0       	ldi	r21, 0x09	; 9
    c29c:	a5 2e       	mov	r10, r21
    c29e:	5e e0       	ldi	r21, 0x0E	; 14
    c2a0:	b5 2e       	mov	r11, r21
    c2a2:	8d b7       	in	r24, 0x3d	; 61
    c2a4:	9e b7       	in	r25, 0x3e	; 62
    c2a6:	0c 97       	sbiw	r24, 0x0c	; 12
    c2a8:	0f b6       	in	r0, 0x3f	; 63
    c2aa:	f8 94       	cli
    c2ac:	9e bf       	out	0x3e, r25	; 62
    c2ae:	0f be       	out	0x3f, r0	; 63
    c2b0:	8d bf       	out	0x3d, r24	; 61
    c2b2:	ed b7       	in	r30, 0x3d	; 61
    c2b4:	fe b7       	in	r31, 0x3e	; 62
    c2b6:	31 96       	adiw	r30, 0x01	; 1
    c2b8:	ad b7       	in	r26, 0x3d	; 61
    c2ba:	be b7       	in	r27, 0x3e	; 62
    c2bc:	12 96       	adiw	r26, 0x02	; 2
    c2be:	dc 92       	st	X, r13
    c2c0:	ce 92       	st	-X, r12
    c2c2:	11 97       	sbiw	r26, 0x01	; 1
    c2c4:	b3 82       	std	Z+3, r11	; 0x03
    c2c6:	a2 82       	std	Z+2, r10	; 0x02
    c2c8:	15 83       	std	Z+5, r17	; 0x05
    c2ca:	04 83       	std	Z+4, r16	; 0x04
    c2cc:	d7 01       	movw	r26, r14
    c2ce:	8c 91       	ld	r24, X
    c2d0:	86 83       	std	Z+6, r24	; 0x06
    c2d2:	17 82       	std	Z+7, r1	; 0x07
    c2d4:	0c 5f       	subi	r16, 0xFC	; 252
    c2d6:	1f 4f       	sbci	r17, 0xFF	; 255
    c2d8:	11 87       	std	Z+9, r17	; 0x09
    c2da:	00 87       	std	Z+8, r16	; 0x08
    c2dc:	04 50       	subi	r16, 0x04	; 4
    c2de:	10 40       	sbci	r17, 0x00	; 0
    c2e0:	14 96       	adiw	r26, 0x04	; 4
    c2e2:	8c 91       	ld	r24, X
    c2e4:	82 87       	std	Z+10, r24	; 0x0a
    c2e6:	13 86       	std	Z+11, r1	; 0x0b
    c2e8:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
				  lcd_print((iLoop+1),1,lcdteks);
    c2ec:	ed b7       	in	r30, 0x3d	; 61
    c2ee:	fe b7       	in	r31, 0x3e	; 62
    c2f0:	3c 96       	adiw	r30, 0x0c	; 12
    c2f2:	0f b6       	in	r0, 0x3f	; 63
    c2f4:	f8 94       	cli
    c2f6:	fe bf       	out	0x3e, r31	; 62
    c2f8:	0f be       	out	0x3f, r0	; 63
    c2fa:	ed bf       	out	0x3d, r30	; 61
    c2fc:	80 2f       	mov	r24, r16
    c2fe:	61 e0       	ldi	r22, 0x01	; 1
    c300:	a6 01       	movw	r20, r12
    c302:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
    c306:	08 94       	sec
    c308:	e1 1c       	adc	r14, r1
    c30a:	f1 1c       	adc	r15, r1
    c30c:	0f 5f       	subi	r16, 0xFF	; 255
    c30e:	1f 4f       	sbci	r17, 0xFF	; 255
				   else
				   if (IsShift==True)DecValue(&PPumpId[KeyChar-'1'],0,16);//PPumpId[KeyChar-'1']=17-(17-((PPumpId[KeyChar-'1']+1)%17));
			       break;			  
			  }
			  //Redraw
			  for (iLoop=0;iLoop<4;iLoop++){
    c310:	f4 e1       	ldi	r31, 0x14	; 20
    c312:	ef 16       	cp	r14, r31
    c314:	f2 e0       	ldi	r31, 0x02	; 2
    c316:	ff 06       	cpc	r15, r31
    c318:	21 f6       	brne	.-120    	; 0xc2a2 <FSettingPumpID+0x1fa>
    c31a:	2b c0       	rjmp	.+86     	; 0xc372 <FSettingPumpID+0x2ca>
				  sprintf_P(lcdteks,PSTR("%d.P%.2d | %d.P%.2d"),(iLoop+1),PPumpId[iLoop],(iLoop+5),PPumpId[iLoop+4]);
				  lcd_print((iLoop+1),1,lcdteks);
	          }
		  }else if (KeyChar=='#'){
    c31c:	93 32       	cpi	r25, 0x23	; 35
    c31e:	21 f5       	brne	.+72     	; 0xc368 <FSettingPumpID+0x2c0>
    c320:	40 e0       	ldi	r20, 0x00	; 0
    c322:	20 e0       	ldi	r18, 0x00	; 0
    c324:	30 e0       	ldi	r19, 0x00	; 0
    c326:	52 2f       	mov	r21, r18
		      //Evaluate same PumpID
			  PumpCount=0;
			  for (i=0;i<8;i++){
			       CheckPump=PPumpId[i];
    c328:	f9 01       	movw	r30, r18
    c32a:	e0 5f       	subi	r30, 0xF0	; 240
    c32c:	fd 4f       	sbci	r31, 0xFD	; 253
    c32e:	e0 81       	ld	r30, Z
				   if (CheckPump>0){
    c330:	ee 23       	and	r30, r30
    c332:	69 f0       	breq	.+26     	; 0xc34e <FSettingPumpID+0x2a6>
    c334:	a0 e1       	ldi	r26, 0x10	; 16
    c336:	b2 e0       	ldi	r27, 0x02	; 2
    c338:	90 e0       	ldi	r25, 0x00	; 0
				      for(j=0;j<8;j++){					      
					      if ((i!=j)&&(CheckPump==PPumpId[j]))
    c33a:	59 17       	cp	r21, r25
    c33c:	21 f0       	breq	.+8      	; 0xc346 <FSettingPumpID+0x29e>
    c33e:	8c 91       	ld	r24, X
    c340:	e8 17       	cp	r30, r24
    c342:	09 f4       	brne	.+2      	; 0xc346 <FSettingPumpID+0x29e>
						       PumpCount++;
    c344:	4f 5f       	subi	r20, 0xFF	; 255
		      //Evaluate same PumpID
			  PumpCount=0;
			  for (i=0;i<8;i++){
			       CheckPump=PPumpId[i];
				   if (CheckPump>0){
				      for(j=0;j<8;j++){					      
    c346:	9f 5f       	subi	r25, 0xFF	; 255
    c348:	11 96       	adiw	r26, 0x01	; 1
    c34a:	98 30       	cpi	r25, 0x08	; 8
    c34c:	b1 f7       	brne	.-20     	; 0xc33a <FSettingPumpID+0x292>
    c34e:	2f 5f       	subi	r18, 0xFF	; 255
    c350:	3f 4f       	sbci	r19, 0xFF	; 255
				  lcd_print((iLoop+1),1,lcdteks);
	          }
		  }else if (KeyChar=='#'){
		      //Evaluate same PumpID
			  PumpCount=0;
			  for (i=0;i<8;i++){
    c352:	28 30       	cpi	r18, 0x08	; 8
    c354:	31 05       	cpc	r19, r1
    c356:	39 f7       	brne	.-50     	; 0xc326 <FSettingPumpID+0x27e>
    c358:	40 93 0e 02 	sts	0x020E, r20
					      if ((i!=j)&&(CheckPump==PPumpId[j]))
						       PumpCount++;
					  }
				    }				     
				  }			       			  			  
			  if (PumpCount>0) stMenuPumpID=mpSaveFailed;
    c35c:	44 23       	and	r20, r20
    c35e:	11 f0       	breq	.+4      	; 0xc364 <FSettingPumpID+0x2bc>
    c360:	83 e0       	ldi	r24, 0x03	; 3
    c362:	05 c0       	rjmp	.+10     	; 0xc36e <FSettingPumpID+0x2c6>
			  else stMenuPumpID=mpSavingPumpId;
    c364:	85 e0       	ldi	r24, 0x05	; 5
    c366:	03 c0       	rjmp	.+6      	; 0xc36e <FSettingPumpID+0x2c6>
		  }	
		  else if (KeyChar=='*'){
    c368:	9a 32       	cpi	r25, 0x2A	; 42
    c36a:	19 f4       	brne	.+6      	; 0xc372 <FSettingPumpID+0x2ca>
		      stMenuPumpID=mpExitPumpId;
    c36c:	8a e0       	ldi	r24, 0x0A	; 10
    c36e:	80 93 1a 02 	sts	0x021A, r24
		  }
		  if (KeyPressed==_KEY_SHIFT){
    c372:	8b e7       	ldi	r24, 0x7B	; 123
    c374:	98 16       	cp	r9, r24
    c376:	09 f0       	breq	.+2      	; 0xc37a <FSettingPumpID+0x2d2>
    c378:	16 c1       	rjmp	.+556    	; 0xc5a6 <FSettingPumpID+0x4fe>
		      if (IsShift==False)IsShift=True;
    c37a:	80 91 19 02 	lds	r24, 0x0219
    c37e:	88 23       	and	r24, r24
    c380:	21 f4       	brne	.+8      	; 0xc38a <FSettingPumpID+0x2e2>
    c382:	81 e0       	ldi	r24, 0x01	; 1
    c384:	80 93 19 02 	sts	0x0219, r24
    c388:	0e c1       	rjmp	.+540    	; 0xc5a6 <FSettingPumpID+0x4fe>
			  else
			  if (IsShift==True)IsShift=False;
    c38a:	81 30       	cpi	r24, 0x01	; 1
    c38c:	09 f0       	breq	.+2      	; 0xc390 <FSettingPumpID+0x2e8>
    c38e:	0b c1       	rjmp	.+534    	; 0xc5a6 <FSettingPumpID+0x4fe>
    c390:	10 92 19 02 	sts	0x0219, r1
    c394:	08 c1       	rjmp	.+528    	; 0xc5a6 <FSettingPumpID+0x4fe>
		  }
	      break;
     case mpSaveFailed:
	      lcd_clear();
    c396:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
		  lcd_printf(1,1,PSTR("      Warning!      "));
    c39a:	81 e0       	ldi	r24, 0x01	; 1
    c39c:	61 e0       	ldi	r22, 0x01	; 1
    c39e:	44 ef       	ldi	r20, 0xF4	; 244
    c3a0:	5d e0       	ldi	r21, 0x0D	; 13
    c3a2:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  lcd_printf(2,1,PSTR("  Duplicate PumpID  "));
    c3a6:	82 e0       	ldi	r24, 0x02	; 2
    c3a8:	61 e0       	ldi	r22, 0x01	; 1
    c3aa:	4f ed       	ldi	r20, 0xDF	; 223
    c3ac:	5d e0       	ldi	r21, 0x0D	; 13
    c3ae:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  lcd_printf(3,1,PSTR("    Not Allowed     "));		  
    c3b2:	83 e0       	ldi	r24, 0x03	; 3
    c3b4:	61 e0       	ldi	r22, 0x01	; 1
    c3b6:	4a ec       	ldi	r20, 0xCA	; 202
    c3b8:	5d e0       	ldi	r21, 0x0D	; 13
    c3ba:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    c3be:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    c3c0:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    c3c2:	82 e0       	ldi	r24, 0x02	; 2
    c3c4:	80 93 bc 01 	sts	0x01BC, r24
	      lcd_clear();
		  lcd_printf(1,1,PSTR("      Warning!      "));
		  lcd_printf(2,1,PSTR("  Duplicate PumpID  "));
		  lcd_printf(3,1,PSTR("    Not Allowed     "));		  
		  system_beep(2);
	      TimDisplay=0;
    c3c8:	10 92 92 01 	sts	0x0192, r1
	      stMenuPumpID=mpDisplayFailed;
    c3cc:	84 e0       	ldi	r24, 0x04	; 4
    c3ce:	d6 c0       	rjmp	.+428    	; 0xc57c <FSettingPumpID+0x4d4>
          break;	 
     case mpDisplayFailed:
	      if (TimDisplay>6) stMenuPumpID=mpDisplayPumpId;
    c3d0:	80 91 92 01 	lds	r24, 0x0192
    c3d4:	87 30       	cpi	r24, 0x07	; 7
    c3d6:	08 f4       	brcc	.+2      	; 0xc3da <FSettingPumpID+0x332>
    c3d8:	e6 c0       	rjmp	.+460    	; 0xc5a6 <FSettingPumpID+0x4fe>
    c3da:	81 e0       	ldi	r24, 0x01	; 1
    c3dc:	cf c0       	rjmp	.+414    	; 0xc57c <FSettingPumpID+0x4d4>
	      break;
     case mpSavingPumpId:
	      eeprom_write_block((const void*) &PPumpId, (void*) &DefPumpMap, 8);
    c3de:	80 e1       	ldi	r24, 0x10	; 16
    c3e0:	92 e0       	ldi	r25, 0x02	; 2
    c3e2:	66 e4       	ldi	r22, 0x46	; 70
    c3e4:	70 e0       	ldi	r23, 0x00	; 0
    c3e6:	48 e0       	ldi	r20, 0x08	; 8
    c3e8:	50 e0       	ldi	r21, 0x00	; 0
    c3ea:	0e 94 48 ad 	call	0x15a90	; 0x15a90 <__eewr_block_m128>
		  if (IFType==IT_STANDALONE){
    c3ee:	80 91 00 01 	lds	r24, 0x0100
    c3f2:	82 30       	cpi	r24, 0x02	; 2
    c3f4:	d9 f4       	brne	.+54     	; 0xc42c <FSettingPumpID+0x384>
		      //SendConfig to Slave
			  lcd_clear();
    c3f6:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
              lcd_printf(1,1,PSTR("-PumpID-"));
    c3fa:	81 e0       	ldi	r24, 0x01	; 1
    c3fc:	61 e0       	ldi	r22, 0x01	; 1
    c3fe:	41 ec       	ldi	r20, 0xC1	; 193
    c400:	5d e0       	ldi	r21, 0x0D	; 13
    c402:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
              lcd_printf(2,1,PSTR("Saving.."));
    c406:	82 e0       	ldi	r24, 0x02	; 2
    c408:	61 e0       	ldi	r22, 0x01	; 1
    c40a:	48 eb       	ldi	r20, 0xB8	; 184
    c40c:	5d e0       	ldi	r21, 0x0D	; 13
    c40e:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
			  Idx=0;
    c412:	10 92 18 02 	sts	0x0218, r1
			  PumpCount=0;
    c416:	10 92 0e 02 	sts	0x020E, r1
              eeprom_read_block((void*) &PPumpId, (const void*) &DefPumpMap,8);
    c41a:	80 e1       	ldi	r24, 0x10	; 16
    c41c:	92 e0       	ldi	r25, 0x02	; 2
    c41e:	66 e4       	ldi	r22, 0x46	; 70
    c420:	70 e0       	ldi	r23, 0x00	; 0
    c422:	48 e0       	ldi	r20, 0x08	; 8
    c424:	50 e0       	ldi	r21, 0x00	; 0
    c426:	0e 94 30 ad 	call	0x15a60	; 0x15a60 <__eerd_block_m128>
    c42a:	a7 c0       	rjmp	.+334    	; 0xc57a <FSettingPumpID+0x4d2>
              stMenuPumpID=mpSendConfigToSlave;
		  }else if (IFType==IT_SLAVE){
    c42c:	81 30       	cpi	r24, 0x01	; 1
    c42e:	09 f0       	breq	.+2      	; 0xc432 <FSettingPumpID+0x38a>
    c430:	ba c0       	rjmp	.+372    	; 0xc5a6 <FSettingPumpID+0x4fe>
    c432:	ab c0       	rjmp	.+342    	; 0xc58a <FSettingPumpID+0x4e2>
		      //SendConfig to Slave              
              stMenuPumpID=mpExitPumpId;
		  }
	      break;
     case mpSendConfigToSlave:
	      IsStandaloneAcknoledge=False;
    c434:	10 92 82 01 	sts	0x0182, r1
	      if (PPumpId[Idx]!=0){
    c438:	90 91 18 02 	lds	r25, 0x0218
    c43c:	29 2f       	mov	r18, r25
    c43e:	30 e0       	ldi	r19, 0x00	; 0
    c440:	f9 01       	movw	r30, r18
    c442:	e0 5f       	subi	r30, 0xF0	; 240
    c444:	fd 4f       	sbci	r31, 0xFD	; 253
    c446:	60 81       	ld	r22, Z
    c448:	66 23       	and	r22, r22
    c44a:	81 f0       	breq	.+32     	; 0xc46c <FSettingPumpID+0x3c4>
		      PumpCount++;
    c44c:	80 91 0e 02 	lds	r24, 0x020E
    c450:	8f 5f       	subi	r24, 0xFF	; 255
    c452:	80 93 0e 02 	sts	0x020E, r24
		      MsgPumpId=((Idx<<4)|(0x0F&PPumpId[Idx]));//[Idx][PumpId]
    c456:	6f 70       	andi	r22, 0x0F	; 15
    c458:	44 e0       	ldi	r20, 0x04	; 4
    c45a:	22 0f       	add	r18, r18
    c45c:	33 1f       	adc	r19, r19
    c45e:	4a 95       	dec	r20
    c460:	e1 f7       	brne	.-8      	; 0xc45a <FSettingPumpID+0x3b2>
    c462:	62 2b       	or	r22, r18
    c464:	60 93 0f 02 	sts	0x020F, r22
	         //SendPoolingCommand(SC_SET_PUMPID,MsgPumpId);
			  SendSlaveCommand(SC_SET_PUMPID,MsgPumpId);
    c468:	8d e1       	ldi	r24, 0x1D	; 29
    c46a:	02 c0       	rjmp	.+4      	; 0xc470 <FSettingPumpID+0x3c8>
		  }else SendSlaveCommand(SC_CLEAR_PUMPID,Idx);//SendPoolingCommand(SC_CLEAR_PUMPID,Idx);
    c46c:	8e e1       	ldi	r24, 0x1E	; 30
    c46e:	69 2f       	mov	r22, r25
    c470:	0e 94 3d 60 	call	0xc07a	; 0xc07a <SendSlaveCommand>
		  sprintf_P(lcdteks,PSTR("Id[%d]=%.2d  "),Idx+1,PPumpId[Idx]);
    c474:	e0 91 18 02 	lds	r30, 0x0218
    c478:	f0 e0       	ldi	r31, 0x00	; 0
    c47a:	ad b7       	in	r26, 0x3d	; 61
    c47c:	be b7       	in	r27, 0x3e	; 62
    c47e:	18 97       	sbiw	r26, 0x08	; 8
    c480:	0f b6       	in	r0, 0x3f	; 63
    c482:	f8 94       	cli
    c484:	be bf       	out	0x3e, r27	; 62
    c486:	0f be       	out	0x3f, r0	; 63
    c488:	ad bf       	out	0x3d, r26	; 61
    c48a:	2d b7       	in	r18, 0x3d	; 61
    c48c:	3e b7       	in	r19, 0x3e	; 62
    c48e:	2f 5f       	subi	r18, 0xFF	; 255
    c490:	3f 4f       	sbci	r19, 0xFF	; 255
    c492:	8e 01       	movw	r16, r28
    c494:	0f 5f       	subi	r16, 0xFF	; 255
    c496:	1f 4f       	sbci	r17, 0xFF	; 255
    c498:	12 96       	adiw	r26, 0x02	; 2
    c49a:	1c 93       	st	X, r17
    c49c:	0e 93       	st	-X, r16
    c49e:	11 97       	sbiw	r26, 0x01	; 1
    c4a0:	8a ea       	ldi	r24, 0xAA	; 170
    c4a2:	9d e0       	ldi	r25, 0x0D	; 13
    c4a4:	d9 01       	movw	r26, r18
    c4a6:	13 96       	adiw	r26, 0x03	; 3
    c4a8:	9c 93       	st	X, r25
    c4aa:	8e 93       	st	-X, r24
    c4ac:	12 97       	sbiw	r26, 0x02	; 2
    c4ae:	31 96       	adiw	r30, 0x01	; 1
    c4b0:	15 96       	adiw	r26, 0x05	; 5
    c4b2:	fc 93       	st	X, r31
    c4b4:	ee 93       	st	-X, r30
    c4b6:	14 97       	sbiw	r26, 0x04	; 4
    c4b8:	31 97       	sbiw	r30, 0x01	; 1
    c4ba:	e0 5f       	subi	r30, 0xF0	; 240
    c4bc:	fd 4f       	sbci	r31, 0xFD	; 253
    c4be:	80 81       	ld	r24, Z
    c4c0:	16 96       	adiw	r26, 0x06	; 6
    c4c2:	8c 93       	st	X, r24
    c4c4:	16 97       	sbiw	r26, 0x06	; 6
    c4c6:	17 96       	adiw	r26, 0x07	; 7
    c4c8:	1c 92       	st	X, r1
    c4ca:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
		  lcd_print(3,1,lcdteks);
    c4ce:	ed b7       	in	r30, 0x3d	; 61
    c4d0:	fe b7       	in	r31, 0x3e	; 62
    c4d2:	38 96       	adiw	r30, 0x08	; 8
    c4d4:	0f b6       	in	r0, 0x3f	; 63
    c4d6:	f8 94       	cli
    c4d8:	fe bf       	out	0x3e, r31	; 62
    c4da:	0f be       	out	0x3f, r0	; 63
    c4dc:	ed bf       	out	0x3d, r30	; 61
    c4de:	83 e0       	ldi	r24, 0x03	; 3
    c4e0:	61 e0       	ldi	r22, 0x01	; 1
    c4e2:	a8 01       	movw	r20, r16
    c4e4:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
          stMenuPumpID=mpWaitSlaveReply;
    c4e8:	88 e0       	ldi	r24, 0x08	; 8
    c4ea:	48 c0       	rjmp	.+144    	; 0xc57c <FSettingPumpID+0x4d4>
	      break;
     case mpWaitSlaveReply:
	      KeyPressed=_key_scan(1);
    c4ec:	81 e0       	ldi	r24, 0x01	; 1
    c4ee:	0e 94 6d a6 	call	0x14cda	; 0x14cda <_key_scan>
	      KeyChar=_key_btn(KeyPressed);
    c4f2:	0e 94 ce a5 	call	0x14b9c	; 0x14b9c <_key_btn>
		  if (KeyChar=='*'){
    c4f6:	8a 32       	cpi	r24, 0x2A	; 42
    c4f8:	79 f4       	brne	.+30     	; 0xc518 <FSettingPumpID+0x470>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    c4fa:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    c4fc:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    c4fe:	82 e0       	ldi	r24, 0x02	; 2
    c500:	80 93 bc 01 	sts	0x01BC, r24
     case mpWaitSlaveReply:
	      KeyPressed=_key_scan(1);
	      KeyChar=_key_btn(KeyPressed);
		  if (KeyChar=='*'){
		      system_beep(2);
		      lcd_printf(2,1,PSTR("Cancel     "));
    c504:	61 e0       	ldi	r22, 0x01	; 1
    c506:	4e e9       	ldi	r20, 0x9E	; 158
    c508:	5d e0       	ldi	r21, 0x0D	; 13
    c50a:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
			  TimDisplay=0;
    c50e:	10 92 92 01 	sts	0x0192, r1
		      stMenuPumpID=mpDelayExitPumpId;
    c512:	89 e0       	ldi	r24, 0x09	; 9
    c514:	80 93 1a 02 	sts	0x021A, r24
			  }
          if (IsStandaloneAcknoledge==True){
    c518:	10 91 82 01 	lds	r17, 0x0182
    c51c:	11 30       	cpi	r17, 0x01	; 1
    c51e:	09 f0       	breq	.+2      	; 0xc522 <FSettingPumpID+0x47a>
    c520:	42 c0       	rjmp	.+132    	; 0xc5a6 <FSettingPumpID+0x4fe>
		      Idx++;
    c522:	80 91 18 02 	lds	r24, 0x0218
    c526:	8f 5f       	subi	r24, 0xFF	; 255
    c528:	80 93 18 02 	sts	0x0218, r24
		      if (Idx<8){//Finish, Send MaxPumpCount
    c52c:	88 30       	cpi	r24, 0x08	; 8
    c52e:	b8 f4       	brcc	.+46     	; 0xc55e <FSettingPumpID+0x4b6>
			      eeprom_write_byte(&DefPoolingPumpMax,PumpCount);
    c530:	85 e4       	ldi	r24, 0x45	; 69
    c532:	91 e0       	ldi	r25, 0x01	; 1
    c534:	60 91 0e 02 	lds	r22, 0x020E
    c538:	0e 94 52 ad 	call	0x15aa4	; 0x15aa4 <__eewr_byte_m128>
				  PumpCountMax=eeprom_read_byte(&DefPoolingPumpMax);
    c53c:	85 e4       	ldi	r24, 0x45	; 69
    c53e:	91 e0       	ldi	r25, 0x01	; 1
    c540:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
    c544:	80 93 5c 01 	sts	0x015C, r24
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
    c548:	95 e1       	ldi	r25, 0x15	; 21
    c54a:	90 93 a7 05 	sts	0x05A7, r25
	 PoolMsg=plMsg;
    c54e:	80 93 d3 0b 	sts	0x0BD3, r24
     IsControlPooling=True;
    c552:	10 93 84 01 	sts	0x0184, r17
		      Idx++;
		      if (Idx<8){//Finish, Send MaxPumpCount
			      eeprom_write_byte(&DefPoolingPumpMax,PumpCount);
				  PumpCountMax=eeprom_read_byte(&DefPoolingPumpMax);
                  SendPoolingCommand(SC_SET_POOLING_MAX_PUMP,PumpCountMax);
			      TimDisplay=0;		 
    c556:	10 92 92 01 	sts	0x0192, r1
				  stMenuPumpID=mpDelaySaveConfig;
    c55a:	87 e0       	ldi	r24, 0x07	; 7
    c55c:	0f c0       	rjmp	.+30     	; 0xc57c <FSettingPumpID+0x4d4>
			  }else{lcd_printf(2,1,PSTR("Completed"));
    c55e:	82 e0       	ldi	r24, 0x02	; 2
    c560:	61 e0       	ldi	r22, 0x01	; 1
    c562:	44 e9       	ldi	r20, 0x94	; 148
    c564:	5d e0       	ldi	r21, 0x0D	; 13
    c566:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
					TimDisplay=0;
    c56a:	10 92 92 01 	sts	0x0192, r1
				    stMenuPumpID=mpDelayExitPumpId;
    c56e:	89 e0       	ldi	r24, 0x09	; 9
    c570:	05 c0       	rjmp	.+10     	; 0xc57c <FSettingPumpID+0x4d4>
				   }
			  }		  
	      break;
     case mpDelaySaveConfig:
	      if (TimDisplay>2)stMenuPumpID=mpSendConfigToSlave;
    c572:	80 91 92 01 	lds	r24, 0x0192
    c576:	83 30       	cpi	r24, 0x03	; 3
    c578:	b0 f0       	brcs	.+44     	; 0xc5a6 <FSettingPumpID+0x4fe>
    c57a:	86 e0       	ldi	r24, 0x06	; 6
    c57c:	80 93 1a 02 	sts	0x021A, r24
    c580:	12 c0       	rjmp	.+36     	; 0xc5a6 <FSettingPumpID+0x4fe>
	      break;
     case mpDelayExitPumpId:
	      if (TimDisplay>8)stMenuPumpID=mpExitPumpId;
    c582:	80 91 92 01 	lds	r24, 0x0192
    c586:	89 30       	cpi	r24, 0x09	; 9
    c588:	70 f0       	brcs	.+28     	; 0xc5a6 <FSettingPumpID+0x4fe>
    c58a:	8a e0       	ldi	r24, 0x0A	; 10
    c58c:	f7 cf       	rjmp	.-18     	; 0xc57c <FSettingPumpID+0x4d4>
	      break;
     case mpExitPumpId:
	      if (IFType==IT_STANDALONE)
    c58e:	80 91 00 01 	lds	r24, 0x0100
    c592:	82 30       	cpi	r24, 0x02	; 2
    c594:	21 f4       	brne	.+8      	; 0xc59e <FSettingPumpID+0x4f6>
		      SendSlaveCommand(SC_START_POOL_SEQUENCE,0);
    c596:	80 e2       	ldi	r24, 0x20	; 32
    c598:	60 e0       	ldi	r22, 0x00	; 0
    c59a:	0e 94 3d 60 	call	0xc07a	; 0xc07a <SendSlaveCommand>
	      Result=MENU_DONE;
          stMenuPumpID=mpInitPumpId;
    c59e:	10 92 1a 02 	sts	0x021A, r1
    c5a2:	81 e0       	ldi	r24, 0x01	; 1
    c5a4:	01 c0       	rjmp	.+2      	; 0xc5a8 <FSettingPumpID+0x500>
    c5a6:	80 e0       	ldi	r24, 0x00	; 0
	      break;
	 }
   return Result;
}
    c5a8:	64 96       	adiw	r28, 0x14	; 20
    c5aa:	0f b6       	in	r0, 0x3f	; 63
    c5ac:	f8 94       	cli
    c5ae:	de bf       	out	0x3e, r29	; 62
    c5b0:	0f be       	out	0x3f, r0	; 63
    c5b2:	cd bf       	out	0x3d, r28	; 61
    c5b4:	cf 91       	pop	r28
    c5b6:	df 91       	pop	r29
    c5b8:	1f 91       	pop	r17
    c5ba:	0f 91       	pop	r16
    c5bc:	ff 90       	pop	r15
    c5be:	ef 90       	pop	r14
    c5c0:	df 90       	pop	r13
    c5c2:	cf 90       	pop	r12
    c5c4:	bf 90       	pop	r11
    c5c6:	af 90       	pop	r10
    c5c8:	9f 90       	pop	r9
    c5ca:	08 95       	ret

0000c5cc <_menu_pumpid>:

void _menu_pumpid(void){
	while(1){
	   if (FSettingPumpID()==MENU_DONE){
    c5cc:	0e 94 54 60 	call	0xc0a8	; 0xc0a8 <FSettingPumpID>
    c5d0:	81 30       	cpi	r24, 0x01	; 1
    c5d2:	e1 f7       	brne	.-8      	; 0xc5cc <_menu_pumpid>
	       break;
	   }	   
	}
}
    c5d4:	08 95       	ret

0000c5d6 <_menu_pump>:
        lcd_printf(4,15,PSTR("*)Exit"));
}



void _menu_pump(void){
    c5d6:	cf 93       	push	r28
    c5d8:	df 93       	push	r29
    c5da:	c4 ec       	ldi	r28, 0xC4	; 196
    c5dc:	d9 e0       	ldi	r29, 0x09	; 9
	char __key;

	while(1){
		lcd_clear();_delay_ms(10);
    c5de:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
    c5e2:	ce 01       	movw	r24, r28
    c5e4:	01 97       	sbiw	r24, 0x01	; 1
    c5e6:	f1 f7       	brne	.-4      	; 0xc5e4 <_menu_pump+0xe>
		lcd_printf(1, 1, PSTR("1)ID"));
    c5e8:	81 e0       	ldi	r24, 0x01	; 1
    c5ea:	61 e0       	ldi	r22, 0x01	; 1
    c5ec:	48 ec       	ldi	r20, 0xC8	; 200
    c5ee:	5e e0       	ldi	r21, 0x0E	; 14
    c5f0:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		lcd_printf(2, 1, PSTR("2)Product"));
    c5f4:	82 e0       	ldi	r24, 0x02	; 2
    c5f6:	61 e0       	ldi	r22, 0x01	; 1
    c5f8:	4e eb       	ldi	r20, 0xBE	; 190
    c5fa:	5e e0       	ldi	r21, 0x0E	; 14
    c5fc:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		lcd_printf(4, 1, PSTR("*)Exit"));
    c600:	84 e0       	ldi	r24, 0x04	; 4
    c602:	61 e0       	ldi	r22, 0x01	; 1
    c604:	47 eb       	ldi	r20, 0xB7	; 183
    c606:	5e e0       	ldi	r21, 0x0E	; 14
    c608:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>

		while(1){
			__key = _key_scan(1);
    c60c:	81 e0       	ldi	r24, 0x01	; 1
    c60e:	0e 94 6d a6 	call	0x14cda	; 0x14cda <_key_scan>
			if(__key == _KEY_CANCEL)
    c612:	87 3e       	cpi	r24, 0xE7	; 231
    c614:	51 f0       	breq	.+20     	; 0xc62a <_menu_pump+0x54>
				return;
			if(__key == _KEY_1){
    c616:	8e 3e       	cpi	r24, 0xEE	; 238
    c618:	19 f4       	brne	.+6      	; 0xc620 <_menu_pump+0x4a>
				_menu_pumpid();
    c61a:	0e 94 e6 62 	call	0xc5cc	; 0xc5cc <_menu_pumpid>
    c61e:	df cf       	rjmp	.-66     	; 0xc5de <_menu_pump+0x8>
				break;
			}
			if(__key == _KEY_2){
    c620:	8e 3d       	cpi	r24, 0xDE	; 222
    c622:	a1 f7       	brne	.-24     	; 0xc60c <_menu_pump+0x36>
				_menu_pumpprod();
    c624:	0e 94 74 50 	call	0xa0e8	; 0xa0e8 <_menu_pumpprod>
    c628:	da cf       	rjmp	.-76     	; 0xc5de <_menu_pump+0x8>
				break;
			}
		}
	}
}
    c62a:	df 91       	pop	r29
    c62c:	cf 91       	pop	r28
    c62e:	08 95       	ret

0000c630 <FMenuPumpType>:





void FMenuPumpType(){
    c630:	cf 92       	push	r12
    c632:	df 92       	push	r13
    c634:	ef 92       	push	r14
    c636:	ff 92       	push	r15
    c638:	0f 93       	push	r16
    c63a:	1f 93       	push	r17
    c63c:	df 93       	push	r29
    c63e:	cf 93       	push	r28
    c640:	cd b7       	in	r28, 0x3d	; 61
    c642:	de b7       	in	r29, 0x3e	; 62
    c644:	a8 97       	sbiw	r28, 0x28	; 40
    c646:	0f b6       	in	r0, 0x3f	; 63
    c648:	f8 94       	cli
    c64a:	de bf       	out	0x3e, r29	; 62
    c64c:	0f be       	out	0x3f, r0	; 63
    c64e:	cd bf       	out	0x3d, r28	; 61
     stPumpType=ptInitMenu;
	 IsRunPumpType=True;
	 while(IsRunPumpType==True){
		  switch(stPumpType){
		  case ptInitMenu:
		       lcd_clear();
    c650:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
			   lcd_printf(1,1,PSTR("-Dispenser Brand-"));
    c654:	81 e0       	ldi	r24, 0x01	; 1
    c656:	61 e0       	ldi	r22, 0x01	; 1
    c658:	45 ea       	ldi	r20, 0xA5	; 165
    c65a:	5e e0       	ldi	r21, 0x0E	; 14
    c65c:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
			   IdxType=eeprom_read_byte(&DefDispenserBrand);
    c660:	88 e3       	ldi	r24, 0x38	; 56
    c662:	91 e0       	ldi	r25, 0x01	; 1
    c664:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
			   //Brand Selection
			   if (IdxType>=3) IdxType=0;
    c668:	83 30       	cpi	r24, 0x03	; 3
    c66a:	08 f0       	brcs	.+2      	; 0xc66e <FMenuPumpType+0x3e>
    c66c:	80 e0       	ldi	r24, 0x00	; 0
               strcpy_P(DispenserBrandName,(PGM_P)pgm_read_word(&(DefListDispenserName[IdxType])));
    c66e:	08 2f       	mov	r16, r24
    c670:	10 e0       	ldi	r17, 0x00	; 0
    c672:	f8 01       	movw	r30, r16
    c674:	ee 0f       	add	r30, r30
    c676:	ff 1f       	adc	r31, r31
    c678:	eb 5f       	subi	r30, 0xFB	; 251
    c67a:	fc 4f       	sbci	r31, 0xFC	; 252
    c67c:	65 91       	lpm	r22, Z+
    c67e:	74 91       	lpm	r23, Z+
    c680:	f5 e1       	ldi	r31, 0x15	; 21
    c682:	cf 2e       	mov	r12, r31
    c684:	d1 2c       	mov	r13, r1
    c686:	cc 0e       	add	r12, r28
    c688:	dd 1e       	adc	r13, r29
    c68a:	c6 01       	movw	r24, r12
    c68c:	0e 94 e1 aa 	call	0x155c2	; 0x155c2 <strcpy_P>
			   sprintf_P(lcdteks,PSTR("%d.%s"),IdxType+1,DispenserBrandName);
    c690:	8d b7       	in	r24, 0x3d	; 61
    c692:	9e b7       	in	r25, 0x3e	; 62
    c694:	08 97       	sbiw	r24, 0x08	; 8
    c696:	0f b6       	in	r0, 0x3f	; 63
    c698:	f8 94       	cli
    c69a:	9e bf       	out	0x3e, r25	; 62
    c69c:	0f be       	out	0x3f, r0	; 63
    c69e:	8d bf       	out	0x3d, r24	; 61
    c6a0:	ed b7       	in	r30, 0x3d	; 61
    c6a2:	fe b7       	in	r31, 0x3e	; 62
    c6a4:	31 96       	adiw	r30, 0x01	; 1
    c6a6:	7e 01       	movw	r14, r28
    c6a8:	08 94       	sec
    c6aa:	e1 1c       	adc	r14, r1
    c6ac:	f1 1c       	adc	r15, r1
    c6ae:	ad b7       	in	r26, 0x3d	; 61
    c6b0:	be b7       	in	r27, 0x3e	; 62
    c6b2:	12 96       	adiw	r26, 0x02	; 2
    c6b4:	fc 92       	st	X, r15
    c6b6:	ee 92       	st	-X, r14
    c6b8:	11 97       	sbiw	r26, 0x01	; 1
    c6ba:	8f e9       	ldi	r24, 0x9F	; 159
    c6bc:	9e e0       	ldi	r25, 0x0E	; 14
    c6be:	93 83       	std	Z+3, r25	; 0x03
    c6c0:	82 83       	std	Z+2, r24	; 0x02
    c6c2:	0f 5f       	subi	r16, 0xFF	; 255
    c6c4:	1f 4f       	sbci	r17, 0xFF	; 255
    c6c6:	15 83       	std	Z+5, r17	; 0x05
    c6c8:	04 83       	std	Z+4, r16	; 0x04
    c6ca:	d7 82       	std	Z+7, r13	; 0x07
    c6cc:	c6 82       	std	Z+6, r12	; 0x06
    c6ce:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
			   lcd_print(2,1,lcdteks);
    c6d2:	8d b7       	in	r24, 0x3d	; 61
    c6d4:	9e b7       	in	r25, 0x3e	; 62
    c6d6:	08 96       	adiw	r24, 0x08	; 8
    c6d8:	0f b6       	in	r0, 0x3f	; 63
    c6da:	f8 94       	cli
    c6dc:	9e bf       	out	0x3e, r25	; 62
    c6de:	0f be       	out	0x3f, r0	; 63
    c6e0:	8d bf       	out	0x3d, r24	; 61
    c6e2:	82 e0       	ldi	r24, 0x02	; 2
    c6e4:	61 e0       	ldi	r22, 0x01	; 1
    c6e6:	a7 01       	movw	r20, r14
    c6e8:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
			   lcd_printf(4,1,PSTR("[*]Exit  [#]Change "));
    c6ec:	84 e0       	ldi	r24, 0x04	; 4
    c6ee:	61 e0       	ldi	r22, 0x01	; 1
    c6f0:	4b e8       	ldi	r20, 0x8B	; 139
    c6f2:	5e e0       	ldi	r21, 0x0E	; 14
    c6f4:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
			   if (IFType==IT_STANDALONE)
    c6f8:	80 91 00 01 	lds	r24, 0x0100
    c6fc:	82 30       	cpi	r24, 0x02	; 2
    c6fe:	21 f4       	brne	.+8      	; 0xc708 <FMenuPumpType+0xd8>
			       SendSlaveCommand(SC_STOP_POOL_SEQUENCE,0);
    c700:	8f e1       	ldi	r24, 0x1F	; 31
    c702:	60 e0       	ldi	r22, 0x00	; 0
    c704:	0e 94 3d 60 	call	0xc07a	; 0xc07a <SendSlaveCommand>
			   stPumpType=ptSelectBrand;
	 		   break;
          case ptSelectBrand:
		       KeyPressed = _key_scan(1);
    c708:	81 e0       	ldi	r24, 0x01	; 1
    c70a:	0e 94 6d a6 	call	0x14cda	; 0x14cda <_key_scan>
		       KeyChar    = _key_btn(KeyPressed);
    c70e:	0e 94 ce a5 	call	0x14b9c	; 0x14b9c <_key_btn>

			   if (KeyChar=='#'){
    c712:	83 32       	cpi	r24, 0x23	; 35
    c714:	11 f5       	brne	.+68     	; 0xc75a <FMenuPumpType+0x12a>
			       DispenserBrand=eeprom_read_byte(&DefDispenserBrand);
    c716:	88 e3       	ldi	r24, 0x38	; 56
    c718:	91 e0       	ldi	r25, 0x01	; 1
    c71a:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
				   if (DispenserBrand<ST_WAYNE_DART)
    c71e:	82 30       	cpi	r24, 0x02	; 2
    c720:	20 f4       	brcc	.+8      	; 0xc72a <FMenuPumpType+0xfa>
				        DispenserBrand++;
    c722:	8f 5f       	subi	r24, 0xFF	; 255
    c724:	80 93 5e 01 	sts	0x015E, r24
    c728:	02 c0       	rjmp	.+4      	; 0xc72e <FMenuPumpType+0xfe>
				   else DispenserBrand=ST_NONE;
    c72a:	10 92 5e 01 	sts	0x015E, r1
                   //Apply DecimalSetting  
				   SetDispenser(DispenserBrand);
    c72e:	80 91 5e 01 	lds	r24, 0x015E
    c732:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <SetDispenser>
			       eeprom_write_byte(&DefDispenserBrand,DispenserBrand);
    c736:	88 e3       	ldi	r24, 0x38	; 56
    c738:	91 e0       	ldi	r25, 0x01	; 1
    c73a:	60 91 5e 01 	lds	r22, 0x015E
    c73e:	0e 94 52 ad 	call	0x15aa4	; 0x15aa4 <__eewr_byte_m128>
				   //SendPoolingCommand(SC_SET_PUMP_TYPE,eeprom_read_byte(&DefDispenserBrand));
				   SendSlaveCommand(SC_SET_PUMP_TYPE,eeprom_read_byte(&DefDispenserBrand));
    c742:	88 e3       	ldi	r24, 0x38	; 56
    c744:	91 e0       	ldi	r25, 0x01	; 1
    c746:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
    c74a:	68 2f       	mov	r22, r24
    c74c:	8c e1       	ldi	r24, 0x1C	; 28
    c74e:	0e 94 3d 60 	call	0xc07a	; 0xc07a <SendSlaveCommand>
				   IsSetPumpType=True;//False;
    c752:	81 e0       	ldi	r24, 0x01	; 1
    c754:	80 93 23 01 	sts	0x0123, r24
    c758:	0b c0       	rjmp	.+22     	; 0xc770 <FMenuPumpType+0x140>
			       stPumpType=ptUpdated;			   
			   }else
			   if (KeyChar=='*'){
    c75a:	8a 32       	cpi	r24, 0x2A	; 42
    c75c:	a9 f6       	brne	.-86     	; 0xc708 <FMenuPumpType+0xd8>
			       IsRunPumpType=False;
				   if (IFType==IT_STANDALONE)SendSlaveCommand(SC_START_POOL_SEQUENCE,0);
    c75e:	80 91 00 01 	lds	r24, 0x0100
    c762:	82 30       	cpi	r24, 0x02	; 2
    c764:	51 f4       	brne	.+20     	; 0xc77a <FMenuPumpType+0x14a>
    c766:	80 e2       	ldi	r24, 0x20	; 32
    c768:	60 e0       	ldi	r22, 0x00	; 0
    c76a:	0e 94 3d 60 	call	0xc07a	; 0xc07a <SendSlaveCommand>
    c76e:	05 c0       	rjmp	.+10     	; 0xc77a <FMenuPumpType+0x14a>
			   }
		       break;
          case ptUpdated:
		       if (IsSetPumpType==True){
    c770:	80 91 23 01 	lds	r24, 0x0123
    c774:	81 30       	cpi	r24, 0x01	; 1
    c776:	e1 f7       	brne	.-8      	; 0xc770 <FMenuPumpType+0x140>
    c778:	6b cf       	rjmp	.-298    	; 0xc650 <FMenuPumpType+0x20>
			       stPumpType=ptInitMenu;
			   }
		       break;		         
	      }
	 }     
}
    c77a:	a8 96       	adiw	r28, 0x28	; 40
    c77c:	0f b6       	in	r0, 0x3f	; 63
    c77e:	f8 94       	cli
    c780:	de bf       	out	0x3e, r29	; 62
    c782:	0f be       	out	0x3f, r0	; 63
    c784:	cd bf       	out	0x3d, r28	; 61
    c786:	cf 91       	pop	r28
    c788:	df 91       	pop	r29
    c78a:	1f 91       	pop	r17
    c78c:	0f 91       	pop	r16
    c78e:	ff 90       	pop	r15
    c790:	ef 90       	pop	r14
    c792:	df 90       	pop	r13
    c794:	cf 90       	pop	r12
    c796:	08 95       	ret

0000c798 <FSettingPump>:
	      break;
	 
	 }
*/
	 char __key,Result;
		lcd_clear();_delay_ms(10);
    c798:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
    c79c:	84 ec       	ldi	r24, 0xC4	; 196
    c79e:	99 e0       	ldi	r25, 0x09	; 9
    c7a0:	01 97       	sbiw	r24, 0x01	; 1
    c7a2:	f1 f7       	brne	.-4      	; 0xc7a0 <FSettingPump+0x8>
		lcd_printf(1,1, PSTR("1)ID     "));
    c7a4:	81 e0       	ldi	r24, 0x01	; 1
    c7a6:	61 e0       	ldi	r22, 0x01	; 1
    c7a8:	44 e2       	ldi	r20, 0x24	; 36
    c7aa:	53 e1       	ldi	r21, 0x13	; 19
    c7ac:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		lcd_printf(2,1, PSTR("2)Product"));
    c7b0:	82 e0       	ldi	r24, 0x02	; 2
    c7b2:	61 e0       	ldi	r22, 0x01	; 1
    c7b4:	4a e1       	ldi	r20, 0x1A	; 26
    c7b6:	53 e1       	ldi	r21, 0x13	; 19
    c7b8:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		if (IFType==IT_STANDALONE){
    c7bc:	80 91 00 01 	lds	r24, 0x0100
    c7c0:	82 30       	cpi	r24, 0x02	; 2
    c7c2:	61 f4       	brne	.+24     	; 0xc7dc <FSettingPump+0x44>
		    lcd_printf(3,1, PSTR("3)Label  "));
    c7c4:	83 e0       	ldi	r24, 0x03	; 3
    c7c6:	61 e0       	ldi	r22, 0x01	; 1
    c7c8:	40 e1       	ldi	r20, 0x10	; 16
    c7ca:	53 e1       	ldi	r21, 0x13	; 19
    c7cc:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		    lcd_printf(4,1, PSTR("4)Brand  *)Exit"));
    c7d0:	84 e0       	ldi	r24, 0x04	; 4
    c7d2:	61 e0       	ldi	r22, 0x01	; 1
    c7d4:	40 e0       	ldi	r20, 0x00	; 0
    c7d6:	53 e1       	ldi	r21, 0x13	; 19
    c7d8:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		}

		while(1){
			__key = _key_scan(1);
    c7dc:	81 e0       	ldi	r24, 0x01	; 1
    c7de:	0e 94 6d a6 	call	0x14cda	; 0x14cda <_key_scan>
			if(__key == _KEY_CANCEL)
    c7e2:	87 3e       	cpi	r24, 0xE7	; 231
    c7e4:	d9 f0       	breq	.+54     	; 0xc81c <FSettingPump+0x84>
				break;
			if(__key == _KEY_1){
    c7e6:	8e 3e       	cpi	r24, 0xEE	; 238
    c7e8:	19 f4       	brne	.+6      	; 0xc7f0 <FSettingPump+0x58>
				_menu_pumpid();
    c7ea:	0e 94 e6 62 	call	0xc5cc	; 0xc5cc <_menu_pumpid>
    c7ee:	16 c0       	rjmp	.+44     	; 0xc81c <FSettingPump+0x84>
				break;
			}
			if(__key == _KEY_2){
    c7f0:	8e 3d       	cpi	r24, 0xDE	; 222
    c7f2:	19 f4       	brne	.+6      	; 0xc7fa <FSettingPump+0x62>
				_menu_pumpprod();
    c7f4:	0e 94 74 50 	call	0xa0e8	; 0xa0e8 <_menu_pumpprod>
    c7f8:	11 c0       	rjmp	.+34     	; 0xc81c <FSettingPump+0x84>
				break;
			}

			if((__key == _KEY_3)&&(IFType==IT_STANDALONE)){
    c7fa:	8e 3b       	cpi	r24, 0xBE	; 190
    c7fc:	39 f4       	brne	.+14     	; 0xc80c <FSettingPump+0x74>
    c7fe:	80 91 00 01 	lds	r24, 0x0100
    c802:	82 30       	cpi	r24, 0x02	; 2
    c804:	59 f7       	brne	.-42     	; 0xc7dc <FSettingPump+0x44>
			    FMenuPumpLabel();
    c806:	0e 94 87 50 	call	0xa10e	; 0xa10e <FMenuPumpLabel>
    c80a:	08 c0       	rjmp	.+16     	; 0xc81c <FSettingPump+0x84>
				break;
			}
			if((__key == _KEY_4)&&(IFType==IT_STANDALONE)){
    c80c:	8d 3e       	cpi	r24, 0xED	; 237
    c80e:	31 f7       	brne	.-52     	; 0xc7dc <FSettingPump+0x44>
    c810:	80 91 00 01 	lds	r24, 0x0100
    c814:	82 30       	cpi	r24, 0x02	; 2
    c816:	11 f7       	brne	.-60     	; 0xc7dc <FSettingPump+0x44>
			    FMenuPumpType();
    c818:	0e 94 18 63 	call	0xc630	; 0xc630 <FMenuPumpType>

		}

	Result=MENU_DONE;
	return Result;
}
    c81c:	81 e0       	ldi	r24, 0x01	; 1
    c81e:	08 95       	ret

0000c820 <StoreStandaloneTransData>:
     SendSlaveCommand(SC_TOTALIZER_ACK,iPumpID);
	 UpdateStandaloneStatus((iPumpID&0x0F),PS_TOTALIZER);	 
}
         
			                                         //      STX     MSGID  PumpID              6        8        8
void StoreStandaloneTransData(char *strRawTransData){//  [0x50,0x05]  01      01      1       004500   00000200  00000012 [0x06,0x60] = 24
    c820:	3f 92       	push	r3
    c822:	4f 92       	push	r4
    c824:	5f 92       	push	r5
    c826:	6f 92       	push	r6
    c828:	7f 92       	push	r7
    c82a:	8f 92       	push	r8
    c82c:	9f 92       	push	r9
    c82e:	af 92       	push	r10
    c830:	bf 92       	push	r11
    c832:	cf 92       	push	r12
    c834:	df 92       	push	r13
    c836:	ef 92       	push	r14
    c838:	ff 92       	push	r15
    c83a:	0f 93       	push	r16
    c83c:	1f 93       	push	r17
    c83e:	df 93       	push	r29
    c840:	cf 93       	push	r28
    c842:	cd b7       	in	r28, 0x3d	; 61
    c844:	de b7       	in	r29, 0x3e	; 62
    c846:	e0 97       	sbiw	r28, 0x30	; 48
    c848:	0f b6       	in	r0, 0x3f	; 63
    c84a:	f8 94       	cli
    c84c:	de bf       	out	0x3e, r29	; 62
    c84e:	0f be       	out	0x3f, r0	; 63
    c850:	cd bf       	out	0x3d, r28	; 61
    c852:	7c 01       	movw	r14, r24
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    c854:	dc 01       	movw	r26, r24
    c856:	12 96       	adiw	r26, 0x02	; 2
    c858:	8c 91       	ld	r24, X
    c85a:	12 97       	sbiw	r26, 0x02	; 2
    c85c:	89 83       	std	Y+1, r24	; 0x01
    c85e:	13 96       	adiw	r26, 0x03	; 3
    c860:	8c 91       	ld	r24, X
    c862:	8a 83       	std	Y+2, r24	; 0x02
	 }Dest[Length]=0;
    c864:	1b 82       	std	Y+3, r1	; 0x03
	 char strSend[30];
	 char TransDigit;
	 char FIPAddr;
      
	 StrPosCopy(strRawTransData,strPumpID,2,2);
	 RemZeroLead(strPumpID);
    c866:	8e 01       	movw	r16, r28
    c868:	0f 5f       	subi	r16, 0xFF	; 255
    c86a:	1f 4f       	sbci	r17, 0xFF	; 255
    c86c:	c8 01       	movw	r24, r16
    c86e:	0e 94 51 25 	call	0x4aa2	; 0x4aa2 <RemZeroLead>
	 iPumpID=atoi(strPumpID); 
    c872:	c8 01       	movw	r24, r16
    c874:	0e 94 c3 aa 	call	0x15586	; 0x15586 <atoi>
    c878:	58 2e       	mov	r5, r24
	 
	 FIPAddr=GetFIPAddr(iPumpID);
    c87a:	0e 94 0a 20 	call	0x4014	; 0x4014 <GetFIPAddr>
    c87e:	d8 2e       	mov	r13, r24
	 if (FIPAddr>0){
    c880:	88 23       	and	r24, r24
    c882:	09 f4       	brne	.+2      	; 0xc886 <StoreStandaloneTransData+0x66>
    c884:	01 c2       	rjmp	.+1026   	; 0xcc88 <StoreStandaloneTransData+0x468>
	    Dest[IdxSource+i]=Source[i];
	 }Dest[IdxSource+Length]=0;
}
char CharPosCopy(char *Source, unsigned int IdxSource){
     char Result;
     Result=Source[IdxSource];
    c886:	f7 01       	movw	r30, r14
    c888:	34 80       	ldd	r3, Z+4	; 0x04

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    c88a:	45 80       	ldd	r4, Z+5	; 0x05
    c88c:	14 e0       	ldi	r17, 0x04	; 4
    c88e:	a1 2e       	mov	r10, r17
    c890:	b1 2c       	mov	r11, r1
    c892:	ac 0e       	add	r10, r28
    c894:	bd 1e       	adc	r11, r29
    c896:	f5 01       	movw	r30, r10
    c898:	ce 01       	movw	r24, r28
    c89a:	0b 96       	adiw	r24, 0x0b	; 11
	     strMemory[i]=data;
    c89c:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    c89e:	e8 17       	cp	r30, r24
    c8a0:	f9 07       	cpc	r31, r25
    c8a2:	e1 f7       	brne	.-8      	; 0xc89c <StoreStandaloneTransData+0x7c>
    c8a4:	bd e1       	ldi	r27, 0x1D	; 29
    c8a6:	8b 2e       	mov	r8, r27
    c8a8:	91 2c       	mov	r9, r1
    c8aa:	8c 0e       	add	r8, r28
    c8ac:	9d 1e       	adc	r9, r29
    c8ae:	94 01       	movw	r18, r8
	     strMemory[i]=data;
    c8b0:	ce 01       	movw	r24, r28
    c8b2:	87 96       	adiw	r24, 0x27	; 39
    c8b4:	d9 01       	movw	r26, r18
    c8b6:	1d 92       	st	X+, r1
    c8b8:	9d 01       	movw	r18, r26

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    c8ba:	a8 17       	cp	r26, r24
    c8bc:	b9 07       	cpc	r27, r25
    c8be:	d1 f7       	brne	.-12     	; 0xc8b4 <StoreStandaloneTransData+0x94>
    c8c0:	3d 01       	movw	r6, r26
    c8c2:	fd 01       	movw	r30, r26
	     strMemory[i]=data;
    c8c4:	ce 01       	movw	r24, r28
    c8c6:	c1 96       	adiw	r24, 0x31	; 49
    c8c8:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    c8ca:	e8 17       	cp	r30, r24
    c8cc:	f9 07       	cpc	r31, r25
    c8ce:	e1 f7       	brne	.-8      	; 0xc8c8 <StoreStandaloneTransData+0xa8>
    c8d0:	a7 01       	movw	r20, r14
    c8d2:	d7 01       	movw	r26, r14
    c8d4:	f5 01       	movw	r30, r10
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    c8d6:	be 01       	movw	r22, r28
    c8d8:	66 5f       	subi	r22, 0xF6	; 246
    c8da:	7f 4f       	sbci	r23, 0xFF	; 255
	    Dest[i]=Source[IdxSource+i];
    c8dc:	16 96       	adiw	r26, 0x06	; 6
    c8de:	8c 91       	ld	r24, X
    c8e0:	16 97       	sbiw	r26, 0x06	; 6
    c8e2:	81 93       	st	Z+, r24
    c8e4:	11 96       	adiw	r26, 0x01	; 1
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    c8e6:	e6 17       	cp	r30, r22
    c8e8:	f7 07       	cpc	r31, r23
    c8ea:	c1 f7       	brne	.-16     	; 0xc8dc <StoreStandaloneTransData+0xbc>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    c8ec:	1a 86       	std	Y+10, r1	; 0x0a
    c8ee:	d7 01       	movw	r26, r14
    c8f0:	f4 01       	movw	r30, r8
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    c8f2:	be 01       	movw	r22, r28
    c8f4:	6b 5d       	subi	r22, 0xDB	; 219
    c8f6:	7f 4f       	sbci	r23, 0xFF	; 255
	    Dest[i]=Source[IdxSource+i];
    c8f8:	1c 96       	adiw	r26, 0x0c	; 12
    c8fa:	8c 91       	ld	r24, X
    c8fc:	1c 97       	sbiw	r26, 0x0c	; 12
    c8fe:	81 93       	st	Z+, r24
    c900:	11 96       	adiw	r26, 0x01	; 1
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    c902:	e6 17       	cp	r30, r22
    c904:	f7 07       	cpc	r31, r23
    c906:	c1 f7       	brne	.-16     	; 0xc8f8 <StoreStandaloneTransData+0xd8>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    c908:	1d a2       	std	Y+37, r1	; 0x25
    c90a:	f9 01       	movw	r30, r18
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    c90c:	be 01       	movw	r22, r28
    c90e:	69 5d       	subi	r22, 0xD9	; 217
    c910:	7f 4f       	sbci	r23, 0xFF	; 255
    c912:	9e 01       	movw	r18, r28
    c914:	21 5d       	subi	r18, 0xD1	; 209
    c916:	3f 4f       	sbci	r19, 0xFF	; 255
	    Dest[i]=Source[IdxSource+i];
    c918:	da 01       	movw	r26, r20
    c91a:	54 96       	adiw	r26, 0x14	; 20
    c91c:	8c 91       	ld	r24, X
    c91e:	81 93       	st	Z+, r24
    c920:	4f 5f       	subi	r20, 0xFF	; 255
    c922:	5f 4f       	sbci	r21, 0xFF	; 255
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    c924:	e2 17       	cp	r30, r18
    c926:	f3 07       	cpc	r31, r19
    c928:	b9 f7       	brne	.-18     	; 0xc918 <StoreStandaloneTransData+0xf8>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    c92a:	1f a6       	std	Y+47, r1	; 0x2f
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
    c92c:	f7 01       	movw	r30, r14
    c92e:	84 8d       	ldd	r24, Z+28	; 0x1c
    c930:	80 53       	subi	r24, 0x30	; 48
    c932:	8a 30       	cpi	r24, 0x0A	; 10
    c934:	98 f4       	brcc	.+38     	; 0xc95c <StoreStandaloneTransData+0x13c>

		 TransDigit=Ord(CharPosCopy(strRawTransData,28));
		 //Normalize7Digit
		 //sprintf_P(strSend,PSTR("Digit: %d"),TransDigit);
		 //uart_print(1,1,strSend);
		 if  (TransDigit==8){
    c936:	88 30       	cpi	r24, 0x08	; 8
    c938:	89 f4       	brne	.+34     	; 0xc95c <StoreStandaloneTransData+0x13c>
			  StrPosCopy(strPMoney,strPMoney,0,strlen(strPMoney)-1);	 
    c93a:	fb 01       	movw	r30, r22
    c93c:	01 90       	ld	r0, Z+
    c93e:	00 20       	and	r0, r0
    c940:	e9 f7       	brne	.-6      	; 0xc93c <StoreStandaloneTransData+0x11c>
    c942:	e6 1b       	sub	r30, r22
    c944:	f7 0b       	sbc	r31, r23
    c946:	32 97       	sbiw	r30, 0x02	; 2
    c948:	80 e0       	ldi	r24, 0x00	; 0
    c94a:	90 e0       	ldi	r25, 0x00	; 0
    c94c:	01 c0       	rjmp	.+2      	; 0xc950 <StoreStandaloneTransData+0x130>
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    c94e:	01 96       	adiw	r24, 0x01	; 1
    c950:	8e 17       	cp	r24, r30
    c952:	9f 07       	cpc	r25, r31
    c954:	e0 f3       	brcs	.-8      	; 0xc94e <StoreStandaloneTransData+0x12e>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    c956:	ec 0f       	add	r30, r28
    c958:	fd 1f       	adc	r31, r29
    c95a:	17 a2       	std	Z+39, r1	; 0x27
		 //sprintf_P(strSend,PSTR("Digit: %d"),TransDigit);
		 //uart_print(1,1,strSend);
		 if  (TransDigit==8){
			  StrPosCopy(strPMoney,strPMoney,0,strlen(strPMoney)-1);	 
		 }
		 RemZeroLead(strPPU);
    c95c:	ce 01       	movw	r24, r28
    c95e:	04 96       	adiw	r24, 0x04	; 4
    c960:	0e 94 51 25 	call	0x4aa2	; 0x4aa2 <RemZeroLead>
		 RemZeroLead(strPVolume);
    c964:	ce 01       	movw	r24, r28
    c966:	4d 96       	adiw	r24, 0x1d	; 29
    c968:	0e 94 51 25 	call	0x4aa2	; 0x4aa2 <RemZeroLead>
		 RemZeroLead(strPMoney);
    c96c:	8e 01       	movw	r16, r28
    c96e:	09 5d       	subi	r16, 0xD9	; 217
    c970:	1f 4f       	sbci	r17, 0xFF	; 255
    c972:	c8 01       	movw	r24, r16
    c974:	0e 94 51 25 	call	0x4aa2	; 0x4aa2 <RemZeroLead>
		 //sprintf_P(strSend,PSTR("Money: %s"),strPMoney);
		 //uart_print(1,1,strSend);


		 //Void Detection
		 if (atoi(strPMoney)==0)TransactionStatus=TS_VOID;
    c978:	c8 01       	movw	r24, r16
    c97a:	0e 94 c3 aa 	call	0x15586	; 0x15586 <atoi>
    c97e:	89 2b       	or	r24, r25
    c980:	09 f0       	breq	.+2      	; 0xc984 <StoreStandaloneTransData+0x164>
    c982:	07 c1       	rjmp	.+526    	; 0xcb92 <StoreStandaloneTransData+0x372>
		 else TransactionStatus=TS_NEW;
		 
		 if (TransactionStatus==TS_VOID){//RejectData
			 UpdateStandaloneStatus((iPumpID&0x0F),PS_VOID);
    c984:	85 2d       	mov	r24, r5
    c986:	8f 70       	andi	r24, 0x0F	; 15
    c988:	63 e1       	ldi	r22, 0x13	; 19
    c98a:	0e 94 3f 20 	call	0x407e	; 0x407e <UpdateStandaloneStatus>
    c98e:	7c c1       	rjmp	.+760    	; 0xcc88 <StoreStandaloneTransData+0x468>
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    c990:	f9 01       	movw	r30, r18
    c992:	81 91       	ld	r24, Z+
    c994:	9f 01       	movw	r18, r30
    c996:	fb 01       	movw	r30, r22
    c998:	81 93       	st	Z+, r24
    c99a:	bf 01       	movw	r22, r30
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    c99c:	24 17       	cp	r18, r20
    c99e:	35 07       	cpc	r19, r21
    c9a0:	b9 f7       	brne	.-18     	; 0xc990 <StoreStandaloneTransData+0x170>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    c9a2:	85 e3       	ldi	r24, 0x35	; 53
    c9a4:	90 e0       	ldi	r25, 0x00	; 0
    c9a6:	9c 01       	movw	r18, r24
    c9a8:	c2 9e       	mul	r12, r18
    c9aa:	c0 01       	movw	r24, r0
    c9ac:	c3 9e       	mul	r12, r19
    c9ae:	90 0d       	add	r25, r0
    c9b0:	d2 9e       	mul	r13, r18
    c9b2:	90 0d       	add	r25, r0
    c9b4:	11 24       	eor	r1, r1
    c9b6:	fc 01       	movw	r30, r24
    c9b8:	e8 55       	subi	r30, 0x58	; 88
    c9ba:	fa 4f       	sbci	r31, 0xFA	; 250
    c9bc:	ea 0f       	add	r30, r26
    c9be:	fb 1f       	adc	r31, r27
    c9c0:	13 82       	std	Z+3, r1	; 0x03
			 sprintf_P(strTransTime,PSTR("%s"),strSystemTime);
			 sprintf_P(strShift,PSTR("%d"),eeprom_read_byte(&DefShift));
					 
			 //TransNum,Date,Time
			 StrPosCopy(strTranNo,RecPumpData[FIPAddr].strTransNum,0,strlen(strTranNo));
			 StrPosCopy(strTransDate,RecPumpData[FIPAddr].strTransDate,0,strlen(strTransDate));
    c9c2:	fe 01       	movw	r30, r28
    c9c4:	3b 96       	adiw	r30, 0x0b	; 11
    c9c6:	df 01       	movw	r26, r30
    c9c8:	0d 90       	ld	r0, X+
    c9ca:	00 20       	and	r0, r0
    c9cc:	e9 f7       	brne	.-6      	; 0xc9c8 <StoreStandaloneTransData+0x1a8>
    c9ce:	11 97       	sbiw	r26, 0x01	; 1
    c9d0:	ae 1b       	sub	r26, r30
    c9d2:	bf 0b       	sbc	r27, r31
    c9d4:	bf 01       	movw	r22, r30
    c9d6:	9c 01       	movw	r18, r24
    c9d8:	2e 54       	subi	r18, 0x4E	; 78
    c9da:	3a 4f       	sbci	r19, 0xFA	; 250
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    c9dc:	af 01       	movw	r20, r30
    c9de:	4a 0f       	add	r20, r26
    c9e0:	5b 1f       	adc	r21, r27
    c9e2:	06 c0       	rjmp	.+12     	; 0xc9f0 <StoreStandaloneTransData+0x1d0>
	    Dest[i]=Source[IdxSource+i];
    c9e4:	fb 01       	movw	r30, r22
    c9e6:	81 91       	ld	r24, Z+
    c9e8:	bf 01       	movw	r22, r30
    c9ea:	f9 01       	movw	r30, r18
    c9ec:	81 93       	st	Z+, r24
    c9ee:	9f 01       	movw	r18, r30
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    c9f0:	64 17       	cp	r22, r20
    c9f2:	75 07       	cpc	r23, r21
    c9f4:	b9 f7       	brne	.-18     	; 0xc9e4 <StoreStandaloneTransData+0x1c4>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    c9f6:	85 e3       	ldi	r24, 0x35	; 53
    c9f8:	90 e0       	ldi	r25, 0x00	; 0
    c9fa:	9c 01       	movw	r18, r24
    c9fc:	c2 9e       	mul	r12, r18
    c9fe:	c0 01       	movw	r24, r0
    ca00:	c3 9e       	mul	r12, r19
    ca02:	90 0d       	add	r25, r0
    ca04:	d2 9e       	mul	r13, r18
    ca06:	90 0d       	add	r25, r0
    ca08:	11 24       	eor	r1, r1
    ca0a:	fc 01       	movw	r30, r24
    ca0c:	e8 55       	subi	r30, 0x58	; 88
    ca0e:	fa 4f       	sbci	r31, 0xFA	; 250
    ca10:	ea 0f       	add	r30, r26
    ca12:	fb 1f       	adc	r31, r27
    ca14:	12 86       	std	Z+10, r1	; 0x0a
			 sprintf_P(strShift,PSTR("%d"),eeprom_read_byte(&DefShift));
					 
			 //TransNum,Date,Time
			 StrPosCopy(strTranNo,RecPumpData[FIPAddr].strTransNum,0,strlen(strTranNo));
			 StrPosCopy(strTransDate,RecPumpData[FIPAddr].strTransDate,0,strlen(strTransDate));
			 StrPosCopy(strTransTime,RecPumpData[FIPAddr].strTransTime,0,strlen(strTransTime));
    ca16:	fe 01       	movw	r30, r28
    ca18:	74 96       	adiw	r30, 0x14	; 20
    ca1a:	df 01       	movw	r26, r30
    ca1c:	0d 90       	ld	r0, X+
    ca1e:	00 20       	and	r0, r0
    ca20:	e9 f7       	brne	.-6      	; 0xca1c <StoreStandaloneTransData+0x1fc>
    ca22:	11 97       	sbiw	r26, 0x01	; 1
    ca24:	ae 1b       	sub	r26, r30
    ca26:	bf 0b       	sbc	r27, r31
    ca28:	bf 01       	movw	r22, r30
    ca2a:	9c 01       	movw	r18, r24
    ca2c:	25 54       	subi	r18, 0x45	; 69
    ca2e:	3a 4f       	sbci	r19, 0xFA	; 250
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    ca30:	af 01       	movw	r20, r30
    ca32:	4a 0f       	add	r20, r26
    ca34:	5b 1f       	adc	r21, r27
    ca36:	06 c0       	rjmp	.+12     	; 0xca44 <StoreStandaloneTransData+0x224>
	    Dest[i]=Source[IdxSource+i];
    ca38:	fb 01       	movw	r30, r22
    ca3a:	81 91       	ld	r24, Z+
    ca3c:	bf 01       	movw	r22, r30
    ca3e:	f9 01       	movw	r30, r18
    ca40:	81 93       	st	Z+, r24
    ca42:	9f 01       	movw	r18, r30
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    ca44:	64 17       	cp	r22, r20
    ca46:	75 07       	cpc	r23, r21
    ca48:	b9 f7       	brne	.-18     	; 0xca38 <StoreStandaloneTransData+0x218>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    ca4a:	85 e3       	ldi	r24, 0x35	; 53
    ca4c:	90 e0       	ldi	r25, 0x00	; 0
    ca4e:	c8 9e       	mul	r12, r24
    ca50:	70 01       	movw	r14, r0
    ca52:	c9 9e       	mul	r12, r25
    ca54:	f0 0c       	add	r15, r0
    ca56:	d8 9e       	mul	r13, r24
    ca58:	f0 0c       	add	r15, r0
    ca5a:	11 24       	eor	r1, r1
    ca5c:	87 01       	movw	r16, r14
    ca5e:	08 55       	subi	r16, 0x58	; 88
    ca60:	1a 4f       	sbci	r17, 0xFA	; 250
    ca62:	a0 0f       	add	r26, r16
    ca64:	b1 1f       	adc	r27, r17
    ca66:	53 96       	adiw	r26, 0x13	; 19
    ca68:	1c 92       	st	X, r1
			 //TransNum,Date,Time
			 StrPosCopy(strTranNo,RecPumpData[FIPAddr].strTransNum,0,strlen(strTranNo));
			 StrPosCopy(strTransDate,RecPumpData[FIPAddr].strTransDate,0,strlen(strTransDate));
			 StrPosCopy(strTransTime,RecPumpData[FIPAddr].strTransTime,0,strlen(strTransTime));
			 //Grade Nozzle Shift
			 RecPumpData[FIPAddr].Grade=PGrade;
    ca6a:	f0 ed       	ldi	r31, 0xD0	; 208
    ca6c:	4f 0e       	add	r4, r31
    ca6e:	d8 01       	movw	r26, r16
    ca70:	4c 92       	st	X, r4
			 RecPumpData[FIPAddr].Nozzle=PNozzle;
    ca72:	3f 0e       	add	r3, r31
    ca74:	11 96       	adiw	r26, 0x01	; 1
    ca76:	3c 92       	st	X, r3
			 RecPumpData[FIPAddr].Shift=atoi(strShift);
    ca78:	89 e6       	ldi	r24, 0x69	; 105
    ca7a:	9c e0       	ldi	r25, 0x0C	; 12
    ca7c:	0e 94 c3 aa 	call	0x15586	; 0x15586 <atoi>
    ca80:	f8 01       	movw	r30, r16
    ca82:	82 83       	std	Z+2, r24	; 0x02
			 //Price Volume Money
			 StrPosCopy(strPPU,RecPumpData[FIPAddr].Price,0,strlen(strPPU));
    ca84:	fe 01       	movw	r30, r28
    ca86:	34 96       	adiw	r30, 0x04	; 4
    ca88:	df 01       	movw	r26, r30
    ca8a:	0d 90       	ld	r0, X+
    ca8c:	00 20       	and	r0, r0
    ca8e:	e9 f7       	brne	.-6      	; 0xca8a <StoreStandaloneTransData+0x26a>
    ca90:	11 97       	sbiw	r26, 0x01	; 1
    ca92:	ae 1b       	sub	r26, r30
    ca94:	bf 0b       	sbc	r27, r31
    ca96:	97 01       	movw	r18, r14
    ca98:	2c 53       	subi	r18, 0x3C	; 60
    ca9a:	3a 4f       	sbci	r19, 0xFA	; 250
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    ca9c:	af 01       	movw	r20, r30
    ca9e:	4a 0f       	add	r20, r26
    caa0:	5b 1f       	adc	r21, r27
    caa2:	06 c0       	rjmp	.+12     	; 0xcab0 <StoreStandaloneTransData+0x290>
	    Dest[i]=Source[IdxSource+i];
    caa4:	f5 01       	movw	r30, r10
    caa6:	81 91       	ld	r24, Z+
    caa8:	5f 01       	movw	r10, r30
    caaa:	f9 01       	movw	r30, r18
    caac:	81 93       	st	Z+, r24
    caae:	9f 01       	movw	r18, r30
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    cab0:	a4 16       	cp	r10, r20
    cab2:	b5 06       	cpc	r11, r21
    cab4:	b9 f7       	brne	.-18     	; 0xcaa4 <StoreStandaloneTransData+0x284>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    cab6:	85 e3       	ldi	r24, 0x35	; 53
    cab8:	90 e0       	ldi	r25, 0x00	; 0
    caba:	9c 01       	movw	r18, r24
    cabc:	c2 9e       	mul	r12, r18
    cabe:	c0 01       	movw	r24, r0
    cac0:	c3 9e       	mul	r12, r19
    cac2:	90 0d       	add	r25, r0
    cac4:	d2 9e       	mul	r13, r18
    cac6:	90 0d       	add	r25, r0
    cac8:	11 24       	eor	r1, r1
    caca:	fc 01       	movw	r30, r24
    cacc:	e8 55       	subi	r30, 0x58	; 88
    cace:	fa 4f       	sbci	r31, 0xFA	; 250
    cad0:	ea 0f       	add	r30, r26
    cad2:	fb 1f       	adc	r31, r27
    cad4:	14 8e       	std	Z+28, r1	; 0x1c
			 RecPumpData[FIPAddr].Grade=PGrade;
			 RecPumpData[FIPAddr].Nozzle=PNozzle;
			 RecPumpData[FIPAddr].Shift=atoi(strShift);
			 //Price Volume Money
			 StrPosCopy(strPPU,RecPumpData[FIPAddr].Price,0,strlen(strPPU));
			 StrPosCopy(strPVolume,RecPumpData[FIPAddr].Volume,0,strlen(strPVolume));
    cad6:	fe 01       	movw	r30, r28
    cad8:	7d 96       	adiw	r30, 0x1d	; 29
    cada:	df 01       	movw	r26, r30
    cadc:	0d 90       	ld	r0, X+
    cade:	00 20       	and	r0, r0
    cae0:	e9 f7       	brne	.-6      	; 0xcadc <StoreStandaloneTransData+0x2bc>
    cae2:	11 97       	sbiw	r26, 0x01	; 1
    cae4:	ae 1b       	sub	r26, r30
    cae6:	bf 0b       	sbc	r27, r31
    cae8:	9c 01       	movw	r18, r24
    caea:	25 53       	subi	r18, 0x35	; 53
    caec:	3a 4f       	sbci	r19, 0xFA	; 250
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    caee:	af 01       	movw	r20, r30
    caf0:	4a 0f       	add	r20, r26
    caf2:	5b 1f       	adc	r21, r27
    caf4:	06 c0       	rjmp	.+12     	; 0xcb02 <StoreStandaloneTransData+0x2e2>
	    Dest[i]=Source[IdxSource+i];
    caf6:	f4 01       	movw	r30, r8
    caf8:	81 91       	ld	r24, Z+
    cafa:	4f 01       	movw	r8, r30
    cafc:	f9 01       	movw	r30, r18
    cafe:	81 93       	st	Z+, r24
    cb00:	9f 01       	movw	r18, r30
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    cb02:	84 16       	cp	r8, r20
    cb04:	95 06       	cpc	r9, r21
    cb06:	b9 f7       	brne	.-18     	; 0xcaf6 <StoreStandaloneTransData+0x2d6>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    cb08:	85 e3       	ldi	r24, 0x35	; 53
    cb0a:	90 e0       	ldi	r25, 0x00	; 0
    cb0c:	9c 01       	movw	r18, r24
    cb0e:	c2 9e       	mul	r12, r18
    cb10:	c0 01       	movw	r24, r0
    cb12:	c3 9e       	mul	r12, r19
    cb14:	90 0d       	add	r25, r0
    cb16:	d2 9e       	mul	r13, r18
    cb18:	90 0d       	add	r25, r0
    cb1a:	11 24       	eor	r1, r1
    cb1c:	fc 01       	movw	r30, r24
    cb1e:	e8 55       	subi	r30, 0x58	; 88
    cb20:	fa 4f       	sbci	r31, 0xFA	; 250
    cb22:	ea 0f       	add	r30, r26
    cb24:	fb 1f       	adc	r31, r27
    cb26:	13 a2       	std	Z+35, r1	; 0x23
			 RecPumpData[FIPAddr].Nozzle=PNozzle;
			 RecPumpData[FIPAddr].Shift=atoi(strShift);
			 //Price Volume Money
			 StrPosCopy(strPPU,RecPumpData[FIPAddr].Price,0,strlen(strPPU));
			 StrPosCopy(strPVolume,RecPumpData[FIPAddr].Volume,0,strlen(strPVolume));
			 StrPosCopy(strPMoney,RecPumpData[FIPAddr].Money,0,strlen(strPMoney));
    cb28:	fe 01       	movw	r30, r28
    cb2a:	b7 96       	adiw	r30, 0x27	; 39
    cb2c:	df 01       	movw	r26, r30
    cb2e:	0d 90       	ld	r0, X+
    cb30:	00 20       	and	r0, r0
    cb32:	e9 f7       	brne	.-6      	; 0xcb2e <StoreStandaloneTransData+0x30e>
    cb34:	11 97       	sbiw	r26, 0x01	; 1
    cb36:	ae 1b       	sub	r26, r30
    cb38:	bf 0b       	sbc	r27, r31
    cb3a:	9c 01       	movw	r18, r24
    cb3c:	2c 52       	subi	r18, 0x2C	; 44
    cb3e:	3a 4f       	sbci	r19, 0xFA	; 250
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    cb40:	af 01       	movw	r20, r30
    cb42:	4a 0f       	add	r20, r26
    cb44:	5b 1f       	adc	r21, r27
    cb46:	06 c0       	rjmp	.+12     	; 0xcb54 <StoreStandaloneTransData+0x334>
	    Dest[i]=Source[IdxSource+i];
    cb48:	f3 01       	movw	r30, r6
    cb4a:	81 91       	ld	r24, Z+
    cb4c:	3f 01       	movw	r6, r30
    cb4e:	f9 01       	movw	r30, r18
    cb50:	81 93       	st	Z+, r24
    cb52:	9f 01       	movw	r18, r30
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    cb54:	64 16       	cp	r6, r20
    cb56:	75 06       	cpc	r7, r21
    cb58:	b9 f7       	brne	.-18     	; 0xcb48 <StoreStandaloneTransData+0x328>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    cb5a:	85 e3       	ldi	r24, 0x35	; 53
    cb5c:	90 e0       	ldi	r25, 0x00	; 0
    cb5e:	c8 9e       	mul	r12, r24
    cb60:	f0 01       	movw	r30, r0
    cb62:	c9 9e       	mul	r12, r25
    cb64:	f0 0d       	add	r31, r0
    cb66:	d8 9e       	mul	r13, r24
    cb68:	f0 0d       	add	r31, r0
    cb6a:	11 24       	eor	r1, r1
    cb6c:	e8 55       	subi	r30, 0x58	; 88
    cb6e:	fa 4f       	sbci	r31, 0xFA	; 250
    cb70:	ea 0f       	add	r30, r26
    cb72:	fb 1f       	adc	r31, r27
    cb74:	14 a6       	std	Z+44, r1	; 0x2c
			 //Price Volume Money
			 StrPosCopy(strPPU,RecPumpData[FIPAddr].Price,0,strlen(strPPU));
			 StrPosCopy(strPVolume,RecPumpData[FIPAddr].Volume,0,strlen(strPVolume));
			 StrPosCopy(strPMoney,RecPumpData[FIPAddr].Money,0,strlen(strPMoney));

			 UpdateStandaloneStatus((iPumpID&0x0F),PS_PRINT_READY);
    cb76:	85 2d       	mov	r24, r5
    cb78:	8f 70       	andi	r24, 0x0F	; 15
    cb7a:	60 e1       	ldi	r22, 0x10	; 16
    cb7c:	0e 94 3f 20 	call	0x407e	; 0x407e <UpdateStandaloneStatus>
			 
			 SetIncomingTransStatus(iPumpID,TS_NEW);		 
    cb80:	85 2d       	mov	r24, r5
    cb82:	62 e0       	ldi	r22, 0x02	; 2
    cb84:	0e 94 c7 1a 	call	0x358e	; 0x358e <SetIncomingTransStatus>

			 SendSlaveCommand(SC_TRANSACTION_ACK,iPumpID);
    cb88:	8b e0       	ldi	r24, 0x0B	; 11
    cb8a:	65 2d       	mov	r22, r5
    cb8c:	0e 94 3d 60 	call	0xc07a	; 0xc07a <SendSlaveCommand>
    cb90:	7b c0       	rjmp	.+246    	; 0xcc88 <StoreStandaloneTransData+0x468>
			 UpdateStandaloneStatus((iPumpID&0x0F),PS_VOID);
		 }
		 else 
		 if (TransactionStatus=TS_NEW){ 
			 //Update ReprintReady
			 ReprintReady[FIPAddr]=True;//Ready for Printing
    cb92:	da 94       	dec	r13
    cb94:	cd 2c       	mov	r12, r13
    cb96:	dd 24       	eor	r13, r13
    cb98:	f6 01       	movw	r30, r12
    cb9a:	ed 5e       	subi	r30, 0xED	; 237
    cb9c:	fe 4f       	sbci	r31, 0xFE	; 254
    cb9e:	81 e0       	ldi	r24, 0x01	; 1
    cba0:	80 83       	st	Z, r24
			 //FormatMoney(strPMoney);
			 //FormatVolume(strPVolume);

			 //uart_print(1,1,strPVolume);
			 
			 GenerateTransactionNum(strTranNo);		 
    cba2:	08 e8       	ldi	r16, 0x88	; 136
    cba4:	1c e0       	ldi	r17, 0x0C	; 12
    cba6:	c8 01       	movw	r24, r16
    cba8:	0e 94 2b 3f 	call	0x7e56	; 0x7e56 <GenerateTransactionNum>
			 sprintf_P(strTransDate,PSTR("%s"),strSystemDate);
    cbac:	00 d0       	rcall	.+0      	; 0xcbae <StoreStandaloneTransData+0x38e>
    cbae:	00 d0       	rcall	.+0      	; 0xcbb0 <StoreStandaloneTransData+0x390>
    cbb0:	00 d0       	rcall	.+0      	; 0xcbb2 <StoreStandaloneTransData+0x392>
    cbb2:	ed b7       	in	r30, 0x3d	; 61
    cbb4:	fe b7       	in	r31, 0x3e	; 62
    cbb6:	31 96       	adiw	r30, 0x01	; 1
    cbb8:	ce 01       	movw	r24, r28
    cbba:	0b 96       	adiw	r24, 0x0b	; 11
    cbbc:	ad b7       	in	r26, 0x3d	; 61
    cbbe:	be b7       	in	r27, 0x3e	; 62
    cbc0:	12 96       	adiw	r26, 0x02	; 2
    cbc2:	9c 93       	st	X, r25
    cbc4:	8e 93       	st	-X, r24
    cbc6:	11 97       	sbiw	r26, 0x01	; 1
    cbc8:	8e e3       	ldi	r24, 0x3E	; 62
    cbca:	94 e2       	ldi	r25, 0x24	; 36
    cbcc:	93 83       	std	Z+3, r25	; 0x03
    cbce:	82 83       	std	Z+2, r24	; 0x02
    cbd0:	8a eb       	ldi	r24, 0xBA	; 186
    cbd2:	93 e0       	ldi	r25, 0x03	; 3
    cbd4:	95 83       	std	Z+5, r25	; 0x05
    cbd6:	84 83       	std	Z+4, r24	; 0x04
    cbd8:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
			 sprintf_P(strTransTime,PSTR("%s"),strSystemTime);
    cbdc:	ed b7       	in	r30, 0x3d	; 61
    cbde:	fe b7       	in	r31, 0x3e	; 62
    cbe0:	31 96       	adiw	r30, 0x01	; 1
    cbe2:	ce 01       	movw	r24, r28
    cbe4:	44 96       	adiw	r24, 0x14	; 20
    cbe6:	ad b7       	in	r26, 0x3d	; 61
    cbe8:	be b7       	in	r27, 0x3e	; 62
    cbea:	12 96       	adiw	r26, 0x02	; 2
    cbec:	9c 93       	st	X, r25
    cbee:	8e 93       	st	-X, r24
    cbf0:	11 97       	sbiw	r26, 0x01	; 1
    cbf2:	8b e3       	ldi	r24, 0x3B	; 59
    cbf4:	94 e2       	ldi	r25, 0x24	; 36
    cbf6:	93 83       	std	Z+3, r25	; 0x03
    cbf8:	82 83       	std	Z+2, r24	; 0x02
    cbfa:	84 e7       	ldi	r24, 0x74	; 116
    cbfc:	98 e0       	ldi	r25, 0x08	; 8
    cbfe:	95 83       	std	Z+5, r25	; 0x05
    cc00:	84 83       	std	Z+4, r24	; 0x04
    cc02:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
			 sprintf_P(strShift,PSTR("%d"),eeprom_read_byte(&DefShift));
    cc06:	ed b7       	in	r30, 0x3d	; 61
    cc08:	fe b7       	in	r31, 0x3e	; 62
    cc0a:	36 96       	adiw	r30, 0x06	; 6
    cc0c:	0f b6       	in	r0, 0x3f	; 63
    cc0e:	f8 94       	cli
    cc10:	fe bf       	out	0x3e, r31	; 62
    cc12:	0f be       	out	0x3f, r0	; 63
    cc14:	ed bf       	out	0x3d, r30	; 61
    cc16:	80 e4       	ldi	r24, 0x40	; 64
    cc18:	91 e0       	ldi	r25, 0x01	; 1
    cc1a:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
    cc1e:	00 d0       	rcall	.+0      	; 0xcc20 <StoreStandaloneTransData+0x400>
    cc20:	00 d0       	rcall	.+0      	; 0xcc22 <StoreStandaloneTransData+0x402>
    cc22:	00 d0       	rcall	.+0      	; 0xcc24 <StoreStandaloneTransData+0x404>
    cc24:	ed b7       	in	r30, 0x3d	; 61
    cc26:	fe b7       	in	r31, 0x3e	; 62
    cc28:	31 96       	adiw	r30, 0x01	; 1
    cc2a:	29 e6       	ldi	r18, 0x69	; 105
    cc2c:	3c e0       	ldi	r19, 0x0C	; 12
    cc2e:	ad b7       	in	r26, 0x3d	; 61
    cc30:	be b7       	in	r27, 0x3e	; 62
    cc32:	12 96       	adiw	r26, 0x02	; 2
    cc34:	3c 93       	st	X, r19
    cc36:	2e 93       	st	-X, r18
    cc38:	11 97       	sbiw	r26, 0x01	; 1
    cc3a:	28 e3       	ldi	r18, 0x38	; 56
    cc3c:	34 e2       	ldi	r19, 0x24	; 36
    cc3e:	33 83       	std	Z+3, r19	; 0x03
    cc40:	22 83       	std	Z+2, r18	; 0x02
    cc42:	84 83       	std	Z+4, r24	; 0x04
    cc44:	15 82       	std	Z+5, r1	; 0x05
    cc46:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
					 
			 //TransNum,Date,Time
			 StrPosCopy(strTranNo,RecPumpData[FIPAddr].strTransNum,0,strlen(strTranNo));
    cc4a:	d8 01       	movw	r26, r16
    cc4c:	0d 90       	ld	r0, X+
    cc4e:	00 20       	and	r0, r0
    cc50:	e9 f7       	brne	.-6      	; 0xcc4c <StoreStandaloneTransData+0x42c>
    cc52:	11 97       	sbiw	r26, 0x01	; 1
    cc54:	a0 1b       	sub	r26, r16
    cc56:	b1 0b       	sbc	r27, r17
    cc58:	98 01       	movw	r18, r16
    cc5a:	85 e3       	ldi	r24, 0x35	; 53
    cc5c:	90 e0       	ldi	r25, 0x00	; 0
    cc5e:	c8 9e       	mul	r12, r24
    cc60:	b0 01       	movw	r22, r0
    cc62:	c9 9e       	mul	r12, r25
    cc64:	70 0d       	add	r23, r0
    cc66:	d8 9e       	mul	r13, r24
    cc68:	70 0d       	add	r23, r0
    cc6a:	11 24       	eor	r1, r1
    cc6c:	65 55       	subi	r22, 0x55	; 85
    cc6e:	7a 4f       	sbci	r23, 0xFA	; 250
    cc70:	ed b7       	in	r30, 0x3d	; 61
    cc72:	fe b7       	in	r31, 0x3e	; 62
    cc74:	36 96       	adiw	r30, 0x06	; 6
    cc76:	0f b6       	in	r0, 0x3f	; 63
    cc78:	f8 94       	cli
    cc7a:	fe bf       	out	0x3e, r31	; 62
    cc7c:	0f be       	out	0x3f, r0	; 63
    cc7e:	ed bf       	out	0x3d, r30	; 61
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    cc80:	ad 01       	movw	r20, r26
    cc82:	40 0f       	add	r20, r16
    cc84:	51 1f       	adc	r21, r17
    cc86:	8a ce       	rjmp	.-748    	; 0xc99c <StoreStandaloneTransData+0x17c>

			 SendSlaveCommand(SC_TRANSACTION_ACK,iPumpID);
		 }		 
	 }    
     //uart_print(0,1,strRawTransData);
}
    cc88:	e0 96       	adiw	r28, 0x30	; 48
    cc8a:	0f b6       	in	r0, 0x3f	; 63
    cc8c:	f8 94       	cli
    cc8e:	de bf       	out	0x3e, r29	; 62
    cc90:	0f be       	out	0x3f, r0	; 63
    cc92:	cd bf       	out	0x3d, r28	; 61
    cc94:	cf 91       	pop	r28
    cc96:	df 91       	pop	r29
    cc98:	1f 91       	pop	r17
    cc9a:	0f 91       	pop	r16
    cc9c:	ff 90       	pop	r15
    cc9e:	ef 90       	pop	r14
    cca0:	df 90       	pop	r13
    cca2:	cf 90       	pop	r12
    cca4:	bf 90       	pop	r11
    cca6:	af 90       	pop	r10
    cca8:	9f 90       	pop	r9
    ccaa:	8f 90       	pop	r8
    ccac:	7f 90       	pop	r7
    ccae:	6f 90       	pop	r6
    ccb0:	5f 90       	pop	r5
    ccb2:	4f 90       	pop	r4
    ccb4:	3f 90       	pop	r3
    ccb6:	08 95       	ret

0000ccb8 <StoreStandaloneTotalizerData>:
	  systemEDC();
	  systemConfigProtocol();
	  //systemGeniusProtocol(); //AKR-->Protocol disabled
}

void StoreStandaloneTotalizerData(char *strRawTransData){//Sending FlowSPI_Protocol <STX>   [MsgID][PumpID][Volume1][Amount1][Volume2][Amount2][Volume3][Amount3][Volume4][Amount4][Volume5][Amount5][Volume6][Amount6]<ETX>
    ccb8:	3f 92       	push	r3
    ccba:	4f 92       	push	r4
    ccbc:	5f 92       	push	r5
    ccbe:	6f 92       	push	r6
    ccc0:	7f 92       	push	r7
    ccc2:	8f 92       	push	r8
    ccc4:	9f 92       	push	r9
    ccc6:	af 92       	push	r10
    ccc8:	bf 92       	push	r11
    ccca:	cf 92       	push	r12
    cccc:	df 92       	push	r13
    ccce:	ef 92       	push	r14
    ccd0:	ff 92       	push	r15
    ccd2:	0f 93       	push	r16
    ccd4:	1f 93       	push	r17
    ccd6:	df 93       	push	r29
    ccd8:	cf 93       	push	r28
    ccda:	cd b7       	in	r28, 0x3d	; 61
    ccdc:	de b7       	in	r29, 0x3e	; 62
    ccde:	a5 97       	sbiw	r28, 0x25	; 37
    cce0:	0f b6       	in	r0, 0x3f	; 63
    cce2:	f8 94       	cli
    cce4:	de bf       	out	0x3e, r29	; 62
    cce6:	0f be       	out	0x3f, r0	; 63
    cce8:	cd bf       	out	0x3d, r28	; 61
    ccea:	5c 01       	movw	r10, r24
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    ccec:	fc 01       	movw	r30, r24
    ccee:	82 81       	ldd	r24, Z+2	; 0x02
    ccf0:	89 83       	std	Y+1, r24	; 0x01
    ccf2:	83 81       	ldd	r24, Z+3	; 0x03
    ccf4:	8a 83       	std	Y+2, r24	; 0x02
	 }Dest[Length]=0;
    ccf6:	1b 82       	std	Y+3, r1	; 0x03
	 //    uart(1,1,strRawTransData[i]); 
	 // }

     StrPosCopy(strRawTransData,strPumpID,2,2);
	 //IdIFT(strPumpID);
	 iPumpID=atoi(strPumpID);  
    ccf8:	ce 01       	movw	r24, r28
    ccfa:	01 96       	adiw	r24, 0x01	; 1
    ccfc:	0e 94 c3 aa 	call	0x15586	; 0x15586 <atoi>
    cd00:	88 2e       	mov	r8, r24
	 
	 FIPAddr=GetFIPAddr(iPumpID);
    cd02:	0e 94 0a 20 	call	0x4014	; 0x4014 <GetFIPAddr>
	 if (FIPAddr>0){
    cd06:	88 23       	and	r24, r24
    cd08:	09 f4       	brne	.+2      	; 0xcd0c <StoreStandaloneTotalizerData+0x54>
    cd0a:	56 c0       	rjmp	.+172    	; 0xcdb8 <StoreStandaloneTotalizerData+0x100>
	     FIPAddr=FIPAddr-1;
    cd0c:	38 2e       	mov	r3, r24
    cd0e:	3a 94       	dec	r3
    cd10:	34 e0       	ldi	r19, 0x04	; 4
    cd12:	c3 2e       	mov	r12, r19
    cd14:	d1 2c       	mov	r13, r1
    cd16:	ca 0c       	add	r12, r10
    cd18:	db 1c       	adc	r13, r11
    cd1a:	99 24       	eor	r9, r9
    cd1c:	93 94       	inc	r9
    cd1e:	2d ef       	ldi	r18, 0xFD	; 253
    cd20:	e2 2e       	mov	r14, r18
    cd22:	2f ef       	ldi	r18, 0xFF	; 255
    cd24:	f2 2e       	mov	r15, r18
    cd26:	94 e0       	ldi	r25, 0x04	; 4
    cd28:	49 2e       	mov	r4, r25
    cd2a:	51 2c       	mov	r5, r1
    cd2c:	4c 0e       	add	r4, r28
    cd2e:	5d 1e       	adc	r5, r29
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    cd30:	ce 01       	movw	r24, r28
    cd32:	40 96       	adiw	r24, 0x10	; 16
    cd34:	9b a3       	std	Y+35, r25	; 0x23
    cd36:	8a a3       	std	Y+34, r24	; 0x22
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    cd38:	83 e1       	ldi	r24, 0x13	; 19
    cd3a:	68 2e       	mov	r6, r24
    cd3c:	71 2c       	mov	r7, r1
    cd3e:	6c 0e       	add	r6, r28
    cd40:	7d 1e       	adc	r7, r29
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    cd42:	fe 01       	movw	r30, r28
    cd44:	7f 96       	adiw	r30, 0x1f	; 31
    cd46:	fd a3       	std	Y+37, r31	; 0x25
    cd48:	ec a3       	std	Y+36, r30	; 0x24
	 //IdIFT(strPumpID);
	 iPumpID=atoi(strPumpID);  
	 
	 FIPAddr=GetFIPAddr(iPumpID);
	 if (FIPAddr>0){
	     FIPAddr=FIPAddr-1;
    cd4a:	f2 01       	movw	r30, r4
    cd4c:	d6 01       	movw	r26, r12
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    cd4e:	8d 91       	ld	r24, X+
    cd50:	81 93       	st	Z+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    cd52:	8a a1       	ldd	r24, Y+34	; 0x22
    cd54:	9b a1       	ldd	r25, Y+35	; 0x23
    cd56:	e8 17       	cp	r30, r24
    cd58:	f9 07       	cpc	r31, r25
    cd5a:	c9 f7       	brne	.-14     	; 0xcd4e <StoreStandaloneTotalizerData+0x96>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    cd5c:	18 8a       	std	Y+16, r1	; 0x10
    cd5e:	d7 01       	movw	r26, r14
    cd60:	a0 95       	com	r26
    cd62:	b0 95       	com	r27
    cd64:	03 e0       	ldi	r16, 0x03	; 3
    cd66:	aa 0f       	add	r26, r26
    cd68:	bb 1f       	adc	r27, r27
    cd6a:	0a 95       	dec	r16
    cd6c:	e1 f7       	brne	.-8      	; 0xcd66 <StoreStandaloneTotalizerData+0xae>
    cd6e:	aa 0d       	add	r26, r10
    cd70:	bb 1d       	adc	r27, r11
    cd72:	f3 01       	movw	r30, r6
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    cd74:	8d 91       	ld	r24, X+
    cd76:	81 93       	st	Z+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    cd78:	8c a1       	ldd	r24, Y+36	; 0x24
    cd7a:	9d a1       	ldd	r25, Y+37	; 0x25
    cd7c:	e8 17       	cp	r30, r24
    cd7e:	f9 07       	cpc	r31, r25
    cd80:	c9 f7       	brne	.-14     	; 0xcd74 <StoreStandaloneTotalizerData+0xbc>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    cd82:	1f 8e       	std	Y+31, r1	; 0x1f

		 for (iGrade=1;iGrade<=6;iGrade++){          
			  StrPosCopy(strRawTransData,strGVolume,(4+((iGrade-1)*24)),12);
			  StrPosCopy(strRawTransData,strGMoney,(16+((iGrade-1)*24)),12);
			  
			  SetTotalizerData(TVOLUME,TOTALIZER_NOW,FIPAddr,iGrade,strGVolume);
    cd84:	80 e0       	ldi	r24, 0x00	; 0
    cd86:	61 e0       	ldi	r22, 0x01	; 1
    cd88:	43 2d       	mov	r20, r3
    cd8a:	29 2d       	mov	r18, r9
    cd8c:	82 01       	movw	r16, r4
    cd8e:	0e 94 e4 27 	call	0x4fc8	; 0x4fc8 <SetTotalizerData>
			  SetTotalizerData(TMONEY,TOTALIZER_NOW,FIPAddr,iGrade,strGMoney);
    cd92:	81 e0       	ldi	r24, 0x01	; 1
    cd94:	61 e0       	ldi	r22, 0x01	; 1
    cd96:	43 2d       	mov	r20, r3
    cd98:	29 2d       	mov	r18, r9
    cd9a:	83 01       	movw	r16, r6
    cd9c:	0e 94 e4 27 	call	0x4fc8	; 0x4fc8 <SetTotalizerData>
	 FIPAddr=GetFIPAddr(iPumpID);
	 if (FIPAddr>0){
	     FIPAddr=FIPAddr-1;
		 //uart_printf(1,1,PSTR("Totalizer:"));

		 for (iGrade=1;iGrade<=6;iGrade++){          
    cda0:	93 94       	inc	r9
    cda2:	ed ef       	ldi	r30, 0xFD	; 253
    cda4:	ff ef       	ldi	r31, 0xFF	; 255
    cda6:	ee 0e       	add	r14, r30
    cda8:	ff 1e       	adc	r15, r31
    cdaa:	88 e1       	ldi	r24, 0x18	; 24
    cdac:	90 e0       	ldi	r25, 0x00	; 0
    cdae:	c8 0e       	add	r12, r24
    cdb0:	d9 1e       	adc	r13, r25
    cdb2:	97 e0       	ldi	r25, 0x07	; 7
    cdb4:	99 16       	cp	r9, r25
    cdb6:	49 f6       	brne	.-110    	; 0xcd4a <StoreStandaloneTotalizerData+0x92>
			  SetTotalizerData(TMONEY,TOTALIZER_NOW,FIPAddr,iGrade,strGMoney);
			  //sprintf_P(strSend,PSTR("Nozzle:%d Volume:%s Money:%s"),iGrade,strGVolume,strGMoney);
			  //uart_print(0,1,strSend);
		 }	
	}
     SendSlaveCommand(SC_TOTALIZER_ACK,iPumpID);
    cdb8:	8d e0       	ldi	r24, 0x0D	; 13
    cdba:	68 2d       	mov	r22, r8
    cdbc:	0e 94 3d 60 	call	0xc07a	; 0xc07a <SendSlaveCommand>
	 UpdateStandaloneStatus((iPumpID&0x0F),PS_TOTALIZER);	 
    cdc0:	88 2d       	mov	r24, r8
    cdc2:	8f 70       	andi	r24, 0x0F	; 15
    cdc4:	64 e1       	ldi	r22, 0x14	; 20
    cdc6:	0e 94 3f 20 	call	0x407e	; 0x407e <UpdateStandaloneStatus>
}
    cdca:	a5 96       	adiw	r28, 0x25	; 37
    cdcc:	0f b6       	in	r0, 0x3f	; 63
    cdce:	f8 94       	cli
    cdd0:	de bf       	out	0x3e, r29	; 62
    cdd2:	0f be       	out	0x3f, r0	; 63
    cdd4:	cd bf       	out	0x3d, r28	; 61
    cdd6:	cf 91       	pop	r28
    cdd8:	df 91       	pop	r29
    cdda:	1f 91       	pop	r17
    cddc:	0f 91       	pop	r16
    cdde:	ff 90       	pop	r15
    cde0:	ef 90       	pop	r14
    cde2:	df 90       	pop	r13
    cde4:	cf 90       	pop	r12
    cde6:	bf 90       	pop	r11
    cde8:	af 90       	pop	r10
    cdea:	9f 90       	pop	r9
    cdec:	8f 90       	pop	r8
    cdee:	7f 90       	pop	r7
    cdf0:	6f 90       	pop	r6
    cdf2:	5f 90       	pop	r5
    cdf4:	4f 90       	pop	r4
    cdf6:	3f 90       	pop	r3
    cdf8:	08 95       	ret

0000cdfa <ScanStandaloneFlow>:
	 _spi(SlaveMessage);
	 _spi(0x06);
	 systemSlave();
}

void ScanStandaloneFlow(char data){  //<STX>[PumpID][STA]<ETX> --> 0x07 0xF1 0xF2 0x08
    cdfa:	0f 93       	push	r16
    cdfc:	1f 93       	push	r17
    cdfe:	08 2f       	mov	r16, r24

      DataPumpID=0;
      DataPumpStatus=0;
	  MixData=0;
      //Shift data
      zDataFlow[4]=zDataFlow[3];
    ce00:	80 91 a9 02 	lds	r24, 0x02A9
    ce04:	80 93 aa 02 	sts	0x02AA, r24
	  zDataFlow[3]=zDataFlow[2];
    ce08:	80 91 a8 02 	lds	r24, 0x02A8
    ce0c:	80 93 a9 02 	sts	0x02A9, r24
	  zDataFlow[2]=zDataFlow[1];
    ce10:	80 91 a7 02 	lds	r24, 0x02A7
    ce14:	80 93 a8 02 	sts	0x02A8, r24
      zDataFlow[1]=zDataFlow[0];
    ce18:	90 91 a6 02 	lds	r25, 0x02A6
    ce1c:	90 93 a7 02 	sts	0x02A7, r25
      zDataFlow[0]=data;
    ce20:	00 93 a6 02 	sts	0x02A6, r16

      //Scan UpdatedPumpStatus Flow
	  //<STX>[ID][STA]<ETX>: 0x07[ID STA]0x08
	  if((zDataFlow[2]==0x07)&&(zDataFlow[0]==0x08)){
    ce24:	87 30       	cpi	r24, 0x07	; 7
    ce26:	79 f4       	brne	.+30     	; 0xce46 <ScanStandaloneFlow+0x4c>
    ce28:	08 30       	cpi	r16, 0x08	; 8
    ce2a:	69 f4       	brne	.+26     	; 0xce46 <ScanStandaloneFlow+0x4c>
          MixData=zDataFlow[1];
	      DataPumpID=((MixData&0xF0)>>4);
		  DataPumpStatus=(MixData&0x0F);
    ce2c:	19 2f       	mov	r17, r25
    ce2e:	1f 70       	andi	r17, 0x0F	; 15
		  UpdateStandaloneStatus(DataPumpID,DataPumpStatus);
    ce30:	89 2f       	mov	r24, r25
    ce32:	82 95       	swap	r24
    ce34:	8f 70       	andi	r24, 0x0F	; 15
    ce36:	61 2f       	mov	r22, r17
    ce38:	0e 94 3f 20 	call	0x407e	; 0x407e <UpdateStandaloneStatus>
		  if (DataPumpStatus!=PUMP_NONE)IsStandAloneDetected=True;
    ce3c:	1e 30       	cpi	r17, 0x0E	; 14
    ce3e:	19 f0       	breq	.+6      	; 0xce46 <ScanStandaloneFlow+0x4c>
    ce40:	81 e0       	ldi	r24, 0x01	; 1
    ce42:	80 93 9c 01 	sts	0x019C, r24
		  //sprintf_P(strSend,PSTR("PS:%d Id:%d"),MixData,DataPumpID);
		  //uart_print(0,1,strSend);
	  }

	  //Scan Transaction Completion FEOT
	  if (IsStandaloneTrans==True){
    ce46:	80 91 9d 01 	lds	r24, 0x019D
    ce4a:	81 30       	cpi	r24, 0x01	; 1
    ce4c:	69 f4       	brne	.+26     	; 0xce68 <ScanStandaloneFlow+0x6e>
	      strStandReceived[iFlow]=data;
    ce4e:	80 91 a4 02 	lds	r24, 0x02A4
    ce52:	90 91 a5 02 	lds	r25, 0x02A5
    ce56:	fc 01       	movw	r30, r24
    ce58:	ea 5f       	subi	r30, 0xFA	; 250
    ce5a:	fc 4f       	sbci	r31, 0xFC	; 252
    ce5c:	00 83       	st	Z, r16
		  iFlow++;
    ce5e:	01 96       	adiw	r24, 0x01	; 1
    ce60:	90 93 a5 02 	sts	0x02A5, r25
    ce64:	80 93 a4 02 	sts	0x02A4, r24
	  }
	  if((zDataFlow[1]==0x05)&&(zDataFlow[0]==0x50)){
    ce68:	80 91 a7 02 	lds	r24, 0x02A7
    ce6c:	85 30       	cpi	r24, 0x05	; 5
    ce6e:	61 f4       	brne	.+24     	; 0xce88 <ScanStandaloneFlow+0x8e>
    ce70:	80 91 a6 02 	lds	r24, 0x02A6
    ce74:	80 35       	cpi	r24, 0x50	; 80
    ce76:	41 f5       	brne	.+80     	; 0xcec8 <ScanStandaloneFlow+0xce>
	      IsStandaloneTrans=True;
    ce78:	81 e0       	ldi	r24, 0x01	; 1
    ce7a:	80 93 9d 01 	sts	0x019D, r24
		  iFlow=0;
    ce7e:	10 92 a5 02 	sts	0x02A5, r1
    ce82:	10 92 a4 02 	sts	0x02A4, r1
    ce86:	20 c0       	rjmp	.+64     	; 0xcec8 <ScanStandaloneFlow+0xce>
	  }
	  if((zDataFlow[1]==0x06)&&(zDataFlow[0]==0x60)){
    ce88:	86 30       	cpi	r24, 0x06	; 6
    ce8a:	f1 f4       	brne	.+60     	; 0xcec8 <ScanStandaloneFlow+0xce>
    ce8c:	80 91 a6 02 	lds	r24, 0x02A6
    ce90:	80 36       	cpi	r24, 0x60	; 96
    ce92:	d1 f4       	brne	.+52     	; 0xcec8 <ScanStandaloneFlow+0xce>
	      IsStandaloneTrans=False;
    ce94:	10 92 9d 01 	sts	0x019D, r1
	      strStandReceived[iFlow]=0;
    ce98:	e0 91 a4 02 	lds	r30, 0x02A4
    ce9c:	f0 91 a5 02 	lds	r31, 0x02A5
    cea0:	ea 5f       	subi	r30, 0xFA	; 250
    cea2:	fc 4f       	sbci	r31, 0xFC	; 252
    cea4:	10 82       	st	Z, r1

		  //uart_print(1,1,strStandReceived);

		  MsgIDx=GetMessageID(strStandReceived);
    cea6:	86 e0       	ldi	r24, 0x06	; 6
    cea8:	93 e0       	ldi	r25, 0x03	; 3
    ceaa:	0e 94 7b 43 	call	0x86f6	; 0x86f6 <GetMessageID>
          if (MsgIDx==0x01)StoreStandaloneTransData(strStandReceived);
    ceae:	81 30       	cpi	r24, 0x01	; 1
    ceb0:	29 f4       	brne	.+10     	; 0xcebc <ScanStandaloneFlow+0xc2>
    ceb2:	86 e0       	ldi	r24, 0x06	; 6
    ceb4:	93 e0       	ldi	r25, 0x03	; 3
    ceb6:	0e 94 10 64 	call	0xc820	; 0xc820 <StoreStandaloneTransData>
    ceba:	06 c0       	rjmp	.+12     	; 0xcec8 <ScanStandaloneFlow+0xce>
		  else
          if (MsgIDx==0x02)StoreStandaloneTotalizerData(strStandReceived);
    cebc:	82 30       	cpi	r24, 0x02	; 2
    cebe:	21 f4       	brne	.+8      	; 0xcec8 <ScanStandaloneFlow+0xce>
    cec0:	86 e0       	ldi	r24, 0x06	; 6
    cec2:	93 e0       	ldi	r25, 0x03	; 3
    cec4:	0e 94 5c 66 	call	0xccb8	; 0xccb8 <StoreStandaloneTotalizerData>
	  }
	  //AcknoledgeCommand
	  if ((zDataFlow[3]==0x09)&&(zDataFlow[0]==0x0A)){
    cec8:	80 91 a9 02 	lds	r24, 0x02A9
    cecc:	89 30       	cpi	r24, 0x09	; 9
    cece:	c1 f5       	brne	.+112    	; 0xcf40 <ScanStandaloneFlow+0x146>
    ced0:	80 91 a6 02 	lds	r24, 0x02A6
    ced4:	8a 30       	cpi	r24, 0x0A	; 10
    ced6:	a1 f5       	brne	.+104    	; 0xcf40 <ScanStandaloneFlow+0x146>
	      
	      AcknoledgePump=zDataFlow[1];
    ced8:	90 91 a7 02 	lds	r25, 0x02A7
    cedc:	90 93 ec 0b 	sts	0x0BEC, r25
	      AcknoledgeCommand=zDataFlow[2];	  
    cee0:	80 91 a8 02 	lds	r24, 0x02A8
    cee4:	80 93 9d 05 	sts	0x059D, r24
		  switch(AcknoledgeCommand){
    cee8:	89 31       	cpi	r24, 0x19	; 25
    ceea:	51 f0       	breq	.+20     	; 0xcf00 <ScanStandaloneFlow+0x106>
    ceec:	8a 31       	cpi	r24, 0x1A	; 26
    ceee:	18 f4       	brcc	.+6      	; 0xcef6 <ScanStandaloneFlow+0xfc>
    cef0:	85 30       	cpi	r24, 0x05	; 5
    cef2:	19 f5       	brne	.+70     	; 0xcf3a <ScanStandaloneFlow+0x140>
    cef4:	17 c0       	rjmp	.+46     	; 0xcf24 <ScanStandaloneFlow+0x12a>
    cef6:	8a 31       	cpi	r24, 0x1A	; 26
    cef8:	c9 f0       	breq	.+50     	; 0xcf2c <ScanStandaloneFlow+0x132>
    cefa:	8c 31       	cpi	r24, 0x1C	; 28
    cefc:	f1 f4       	brne	.+60     	; 0xcf3a <ScanStandaloneFlow+0x140>
    cefe:	1a c0       	rjmp	.+52     	; 0xcf34 <ScanStandaloneFlow+0x13a>
		  case SC_LIVE_SEQUENCE:
		       iSequencePooling=AcknoledgePump;
    cf00:	90 93 80 01 	sts	0x0180, r25
			   IsNewPoolingSequence=True;
    cf04:	81 e0       	ldi	r24, 0x01	; 1
    cf06:	80 93 81 01 	sts	0x0181, r24
			   //SendPoolingCommand()
			   if (IsControlPooling==True){
    cf0a:	80 91 84 01 	lds	r24, 0x0184
    cf0e:	81 30       	cpi	r24, 0x01	; 1
    cf10:	a1 f4       	brne	.+40     	; 0xcf3a <ScanStandaloneFlow+0x140>
			       IsControlPooling=False;
    cf12:	10 92 84 01 	sts	0x0184, r1
				   SendSlaveCommand(PoolCmd,PoolMsg);
    cf16:	80 91 a7 05 	lds	r24, 0x05A7
    cf1a:	60 91 d3 0b 	lds	r22, 0x0BD3
    cf1e:	0e 94 3d 60 	call	0xc07a	; 0xc07a <SendSlaveCommand>
    cf22:	0b c0       	rjmp	.+22     	; 0xcf3a <ScanStandaloneFlow+0x140>
                }
		       break;
          case SC_TOTALIZER:
		       IsTotalizerReceived=True;
    cf24:	81 e0       	ldi	r24, 0x01	; 1
    cf26:	80 93 af 01 	sts	0x01AF, r24
    cf2a:	07 c0       	rjmp	.+14     	; 0xcf3a <ScanStandaloneFlow+0x140>
		       break;
		  case SC_POOL_RESTARTED:
		       IsPoolingRestarted=True;
    cf2c:	81 e0       	ldi	r24, 0x01	; 1
    cf2e:	80 93 83 01 	sts	0x0183, r24
    cf32:	03 c0       	rjmp	.+6      	; 0xcf3a <ScanStandaloneFlow+0x140>
		       break;
          case SC_SET_PUMP_TYPE:
		       IsSetPumpType=True;
    cf34:	81 e0       	ldi	r24, 0x01	; 1
    cf36:	80 93 23 01 	sts	0x0123, r24
		       break;
		  }
       IsStandaloneAcknoledge=True;
    cf3a:	81 e0       	ldi	r24, 0x01	; 1
    cf3c:	80 93 82 01 	sts	0x0182, r24
	  }
}
    cf40:	1f 91       	pop	r17
    cf42:	0f 91       	pop	r16
    cf44:	08 95       	ret

0000cf46 <__vector_17>:
//	  sprintf(SerialSend,"Length:%i",Length);	 
//	  uart_print(1,0,SerialSend);
	 }
}

ISR(SPI_STC_vect){
    cf46:	1f 92       	push	r1
    cf48:	0f 92       	push	r0
    cf4a:	0f b6       	in	r0, 0x3f	; 63
    cf4c:	0f 92       	push	r0
    cf4e:	0b b6       	in	r0, 0x3b	; 59
    cf50:	0f 92       	push	r0
    cf52:	11 24       	eor	r1, r1
    cf54:	1f 93       	push	r17
    cf56:	2f 93       	push	r18
    cf58:	3f 93       	push	r19
    cf5a:	4f 93       	push	r20
    cf5c:	5f 93       	push	r21
    cf5e:	6f 93       	push	r22
    cf60:	7f 93       	push	r23
    cf62:	8f 93       	push	r24
    cf64:	9f 93       	push	r25
    cf66:	af 93       	push	r26
    cf68:	bf 93       	push	r27
    cf6a:	ef 93       	push	r30
    cf6c:	ff 93       	push	r31
char dataSPI;
//char Reply=0;
    //uart(0,1,SPDR);
	dataSPI=SPDR;
    cf6e:	1f b1       	in	r17, 0x0f	; 15
	ScanRFIDFlow(dataSPI);
    cf70:	81 2f       	mov	r24, r17
    cf72:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <ScanRFIDFlow>
	if (IFType==IT_SLAVE)ScanEDCFlow(dataSPI);
    cf76:	80 91 00 01 	lds	r24, 0x0100
    cf7a:	81 30       	cpi	r24, 0x01	; 1
    cf7c:	21 f4       	brne	.+8      	; 0xcf86 <__vector_17+0x40>
    cf7e:	81 2f       	mov	r24, r17
    cf80:	0e 94 7f 14 	call	0x28fe	; 0x28fe <ScanEDCFlow>
    cf84:	05 c0       	rjmp	.+10     	; 0xcf90 <__vector_17+0x4a>
	else
	if (IFType==IT_STANDALONE)ScanStandaloneFlow(dataSPI);
    cf86:	82 30       	cpi	r24, 0x02	; 2
    cf88:	19 f4       	brne	.+6      	; 0xcf90 <__vector_17+0x4a>
    cf8a:	81 2f       	mov	r24, r17
    cf8c:	0e 94 fd 66 	call	0xcdfa	; 0xcdfa <ScanStandaloneFlow>
}
    cf90:	ff 91       	pop	r31
    cf92:	ef 91       	pop	r30
    cf94:	bf 91       	pop	r27
    cf96:	af 91       	pop	r26
    cf98:	9f 91       	pop	r25
    cf9a:	8f 91       	pop	r24
    cf9c:	7f 91       	pop	r23
    cf9e:	6f 91       	pop	r22
    cfa0:	5f 91       	pop	r21
    cfa2:	4f 91       	pop	r20
    cfa4:	3f 91       	pop	r19
    cfa6:	2f 91       	pop	r18
    cfa8:	1f 91       	pop	r17
    cfaa:	0f 90       	pop	r0
    cfac:	0b be       	out	0x3b, r0	; 59
    cfae:	0f 90       	pop	r0
    cfb0:	0f be       	out	0x3f, r0	; 63
    cfb2:	0f 90       	pop	r0
    cfb4:	1f 90       	pop	r1
    cfb6:	18 95       	reti

0000cfb8 <UserInput>:
void ShowMessage(char *Message){//Display Message on Line3
     char i;
}


char UserInput(char TypeUI,char xPos, char yPos,char *strResult, unsigned int MaxValue, char MaxLength){
    cfb8:	8f 92       	push	r8
    cfba:	9f 92       	push	r9
    cfbc:	af 92       	push	r10
    cfbe:	bf 92       	push	r11
    cfc0:	cf 92       	push	r12
    cfc2:	df 92       	push	r13
    cfc4:	ef 92       	push	r14
    cfc6:	ff 92       	push	r15
    cfc8:	0f 93       	push	r16
    cfca:	1f 93       	push	r17
    cfcc:	cf 93       	push	r28
    cfce:	df 93       	push	r29
    cfd0:	f8 2e       	mov	r15, r24
    cfd2:	96 2e       	mov	r9, r22
    cfd4:	d4 2e       	mov	r13, r20
    cfd6:	e9 01       	movw	r28, r18
    cfd8:	58 01       	movw	r10, r16
    cfda:	8e 2c       	mov	r8, r14
	 static char iHit=0,IsShifted=False,IsSameKey=False,IsNextKey=False,IsNewKey=False,IsFirst=False;//,KeyByte=0;
	 static unsigned int iLoop=0,KeyTimeout;//,TimerPressed=0,NewKeyTimeout;
	        unsigned int NumbValue=0;
	 char KeyPressed=0,KeyChar=0,iDisp=0;
     Result=USER_NONE;
	 switch(stUserInput){// 100 ->199 500 90
    cfdc:	10 91 7f 02 	lds	r17, 0x027F
    cfe0:	12 30       	cpi	r17, 0x02	; 2
    cfe2:	09 f4       	brne	.+2      	; 0xcfe6 <UserInput+0x2e>
    cfe4:	29 c2       	rjmp	.+1106   	; 0xd438 <UserInput+0x480>
    cfe6:	13 30       	cpi	r17, 0x03	; 3
    cfe8:	30 f4       	brcc	.+12     	; 0xcff6 <UserInput+0x3e>
    cfea:	11 23       	and	r17, r17
    cfec:	59 f0       	breq	.+22     	; 0xd004 <UserInput+0x4c>
    cfee:	11 30       	cpi	r17, 0x01	; 1
    cff0:	09 f0       	breq	.+2      	; 0xcff4 <UserInput+0x3c>
    cff2:	f2 c2       	rjmp	.+1508   	; 0xd5d8 <UserInput+0x620>
    cff4:	2c c0       	rjmp	.+88     	; 0xd04e <UserInput+0x96>
    cff6:	13 30       	cpi	r17, 0x03	; 3
    cff8:	09 f4       	brne	.+2      	; 0xcffc <UserInput+0x44>
    cffa:	73 c2       	rjmp	.+1254   	; 0xd4e2 <UserInput+0x52a>
    cffc:	14 30       	cpi	r17, 0x04	; 4
    cffe:	09 f0       	breq	.+2      	; 0xd002 <UserInput+0x4a>
    d000:	eb c2       	rjmp	.+1494   	; 0xd5d8 <UserInput+0x620>
    d002:	ec c2       	rjmp	.+1496   	; 0xd5dc <UserInput+0x624>
	 case uiInit:
	      iLoop=0;
    d004:	10 92 71 02 	sts	0x0271, r1
    d008:	10 92 70 02 	sts	0x0270, r1
		  stUserInput=uiInput;
		  xChar=xPos;yChar=yPos;
    d00c:	60 93 7e 02 	sts	0x027E, r22
    d010:	40 93 7d 02 	sts	0x027D, r20
          iValuePos=0;
    d014:	10 92 7c 02 	sts	0x027C, r1
		  KeyTimeout=0;
    d018:	10 92 6f 02 	sts	0x026F, r1
    d01c:	10 92 6e 02 	sts	0x026E, r1
		  IsSameKey=False;
    d020:	10 92 75 02 	sts	0x0275, r1
		  IsNextKey=False;
    d024:	10 92 74 02 	sts	0x0274, r1
		  IsNewKey=False;
    d028:	10 92 73 02 	sts	0x0273, r1
		  IsShifted=True;
    d02c:	91 e0       	ldi	r25, 0x01	; 1
    d02e:	90 93 76 02 	sts	0x0276, r25
		  zKeyChar=' ';
    d032:	80 e2       	ldi	r24, 0x20	; 32
    d034:	80 93 7b 02 	sts	0x027B, r24
		  iHit=0;
    d038:	10 92 77 02 	sts	0x0277, r1
		  IsFirst=False;
    d03c:	10 92 72 02 	sts	0x0272, r1
		  IsDelete=False;
    d040:	10 92 78 02 	sts	0x0278, r1
		  Result=USER_NO_DATA;
		  stUserInput=uiInput;
    d044:	90 93 7f 02 	sts	0x027F, r25
    d048:	65 e0       	ldi	r22, 0x05	; 5
    d04a:	e6 2e       	mov	r14, r22
    d04c:	cb c2       	rjmp	.+1430   	; 0xd5e4 <UserInput+0x62c>
	      break;
	 case uiInput:
	      KeyPressed=_key_scan(1);                  //  _  ABC DEF GHI JKL MNO PQRS TUV WXYZ
    d04e:	81 e0       	ldi	r24, 0x01	; 1
    d050:	0e 94 6d a6 	call	0x14cda	; 0x14cda <_key_scan>
    d054:	c8 2e       	mov	r12, r24
		  KeyChar= _key_btn(KeyPressed);            //  1   2   3   4   5   6   7    8   9
    d056:	0e 94 ce a5 	call	0x14b9c	; 0x14b9c <_key_btn>
    d05a:	e8 2e       	mov	r14, r24
		  if (KeyPressed==_KEY_SHIFT){
    d05c:	2b e7       	ldi	r18, 0x7B	; 123
    d05e:	c2 16       	cp	r12, r18
    d060:	59 f4       	brne	.+22     	; 0xd078 <UserInput+0xc0>
		      if (IsShifted==False)IsShifted=True;
    d062:	80 91 76 02 	lds	r24, 0x0276
    d066:	88 23       	and	r24, r24
    d068:	19 f4       	brne	.+6      	; 0xd070 <UserInput+0xb8>
    d06a:	10 93 76 02 	sts	0x0276, r17
    d06e:	04 c0       	rjmp	.+8      	; 0xd078 <UserInput+0xc0>
			  else
		      if (IsShifted==True)IsShifted=False;
    d070:	81 30       	cpi	r24, 0x01	; 1
    d072:	11 f4       	brne	.+4      	; 0xd078 <UserInput+0xc0>
    d074:	10 92 76 02 	sts	0x0276, r1
			  }
          
		  if (IsSameKey==True){
    d078:	80 91 75 02 	lds	r24, 0x0275
    d07c:	81 30       	cpi	r24, 0x01	; 1
    d07e:	e9 f4       	brne	.+58     	; 0xd0ba <UserInput+0x102>
		      KeyTimeout++;
    d080:	80 91 6e 02 	lds	r24, 0x026E
    d084:	90 91 6f 02 	lds	r25, 0x026F
    d088:	01 96       	adiw	r24, 0x01	; 1
    d08a:	90 93 6f 02 	sts	0x026F, r25
    d08e:	80 93 6e 02 	sts	0x026E, r24
              if (KeyTimeout>1000){
    d092:	89 5e       	subi	r24, 0xE9	; 233
    d094:	93 40       	sbci	r25, 0x03	; 3
    d096:	88 f0       	brcs	.+34     	; 0xd0ba <UserInput+0x102>
			      if (TypeUI==UI_ALPHANUM_PASSWORD)lcd_put(xChar,yChar,'*');
    d098:	f5 e0       	ldi	r31, 0x05	; 5
    d09a:	ff 16       	cp	r15, r31
    d09c:	39 f4       	brne	.+14     	; 0xd0ac <UserInput+0xf4>
    d09e:	80 91 7e 02 	lds	r24, 0x027E
    d0a2:	60 91 7d 02 	lds	r22, 0x027D
    d0a6:	4a e2       	ldi	r20, 0x2A	; 42
    d0a8:	0e 94 41 a5 	call	0x14a82	; 0x14a82 <lcd_put>

		          IsNextKey=True;
    d0ac:	81 e0       	ldi	r24, 0x01	; 1
    d0ae:	80 93 74 02 	sts	0x0274, r24
				  iLoop=0;
    d0b2:	10 92 71 02 	sts	0x0271, r1
    d0b6:	10 92 70 02 	sts	0x0270, r1
			     }
              }
            
 
 		  //if (((KeyChar>='0')&&(KeyChar<='9')&&(iValuePos<=MaxLength))||(IsNextKey==True)){
		  if (((KeyChar>='0')&&(KeyChar<='9')&&(iValuePos<MaxLength))||(IsNextKey==True)){
    d0ba:	8e 2d       	mov	r24, r14
    d0bc:	80 53       	subi	r24, 0x30	; 48
    d0be:	8a 30       	cpi	r24, 0x0A	; 10
    d0c0:	20 f4       	brcc	.+8      	; 0xd0ca <UserInput+0x112>
    d0c2:	80 91 7c 02 	lds	r24, 0x027C
    d0c6:	88 15       	cp	r24, r8
    d0c8:	40 f0       	brcs	.+16     	; 0xd0da <UserInput+0x122>
    d0ca:	80 91 74 02 	lds	r24, 0x0274
    d0ce:	81 30       	cpi	r24, 0x01	; 1
    d0d0:	21 f0       	breq	.+8      	; 0xd0da <UserInput+0x122>
    d0d2:	ee 24       	eor	r14, r14
    d0d4:	00 e0       	ldi	r16, 0x00	; 0
    d0d6:	10 e0       	ldi	r17, 0x00	; 0
    d0d8:	be c0       	rjmp	.+380    	; 0xd256 <UserInput+0x29e>
    d0da:	84 e2       	ldi	r24, 0x24	; 36
    d0dc:	94 ef       	ldi	r25, 0xF4	; 244
    d0de:	01 97       	sbiw	r24, 0x01	; 1
    d0e0:	f1 f7       	brne	.-4      	; 0xd0de <UserInput+0x126>
		       _delay_ms(250);
		       strResult[iValuePos]=KeyChar;
    d0e2:	80 91 7c 02 	lds	r24, 0x027C
    d0e6:	fe 01       	movw	r30, r28
    d0e8:	e8 0f       	add	r30, r24
    d0ea:	f1 1d       	adc	r31, r1
    d0ec:	e0 82       	st	Z, r14
		       strResult[iValuePos+1]=0;
    d0ee:	11 82       	std	Z+1, r1	; 0x01

			   if ((TypeUI==UI_NUMBER_R)||(TypeUI==UI_NUMBER_L)||(TypeUI==UI_NUM_PASSWORD)) 
    d0f0:	8f 2d       	mov	r24, r15
    d0f2:	81 50       	subi	r24, 0x01	; 1
    d0f4:	82 30       	cpi	r24, 0x02	; 2
    d0f6:	30 f0       	brcs	.+12     	; 0xd104 <UserInput+0x14c>
    d0f8:	24 e0       	ldi	r18, 0x04	; 4
    d0fa:	f2 16       	cp	r15, r18
    d0fc:	19 f0       	breq	.+6      	; 0xd104 <UserInput+0x14c>
    d0fe:	00 e0       	ldi	r16, 0x00	; 0
    d100:	10 e0       	ldi	r17, 0x00	; 0
    d102:	04 c0       	rjmp	.+8      	; 0xd10c <UserInput+0x154>
			        NumbValue=atoi(strResult);
    d104:	ce 01       	movw	r24, r28
    d106:	0e 94 c3 aa 	call	0x15586	; 0x15586 <atoi>
    d10a:	8c 01       	movw	r16, r24
			   else NumbValue=0;
				
			   if ((TypeUI==UI_ALPHANUM_R)||(TypeUI==UI_ALPHANUM_PASSWORD)){
    d10c:	83 e0       	ldi	r24, 0x03	; 3
    d10e:	f8 16       	cp	r15, r24
    d110:	21 f0       	breq	.+8      	; 0xd11a <UserInput+0x162>
    d112:	e5 e0       	ldi	r30, 0x05	; 5
    d114:	fe 16       	cp	r15, r30
    d116:	09 f0       	breq	.+2      	; 0xd11a <UserInput+0x162>
    d118:	63 c0       	rjmp	.+198    	; 0xd1e0 <UserInput+0x228>
			       if (KeyChar!=zKeyChar){
    d11a:	80 91 7b 02 	lds	r24, 0x027B
    d11e:	e8 16       	cp	r14, r24
    d120:	71 f0       	breq	.+28     	; 0xd13e <UserInput+0x186>
					   IsSameKey=False;
    d122:	10 92 75 02 	sts	0x0275, r1
					   IsNewKey=True;
    d126:	81 e0       	ldi	r24, 0x01	; 1
    d128:	80 93 73 02 	sts	0x0273, r24
				       iHit=0;
    d12c:	10 92 77 02 	sts	0x0277, r1
					   iLoop=1000;
    d130:	88 ee       	ldi	r24, 0xE8	; 232
    d132:	93 e0       	ldi	r25, 0x03	; 3
    d134:	90 93 71 02 	sts	0x0271, r25
    d138:	80 93 70 02 	sts	0x0270, r24
    d13c:	51 c0       	rjmp	.+162    	; 0xd1e0 <UserInput+0x228>
				   }
                   else{
				   if (IsNewKey==True){
    d13e:	80 91 73 02 	lds	r24, 0x0273
    d142:	81 30       	cpi	r24, 0x01	; 1
    d144:	71 f4       	brne	.+28     	; 0xd162 <UserInput+0x1aa>
					   IsNewKey=False;
    d146:	10 92 73 02 	sts	0x0273, r1
					   yChar--;
    d14a:	80 91 7d 02 	lds	r24, 0x027D
    d14e:	81 50       	subi	r24, 0x01	; 1
    d150:	80 93 7d 02 	sts	0x027D, r24
					   if (iValuePos>0) iValuePos--;
    d154:	80 91 7c 02 	lds	r24, 0x027C
    d158:	88 23       	and	r24, r24
    d15a:	19 f0       	breq	.+6      	; 0xd162 <UserInput+0x1aa>
    d15c:	81 50       	subi	r24, 0x01	; 1
    d15e:	80 93 7c 02 	sts	0x027C, r24
					   }
				   KeyTimeout=0;
    d162:	10 92 6f 02 	sts	0x026F, r1
    d166:	10 92 6e 02 	sts	0x026E, r1
				   IsSameKey=True;
    d16a:	81 e0       	ldi	r24, 0x01	; 1
    d16c:	80 93 75 02 	sts	0x0275, r24
				   if (iHit<pgm_read_byte(&MaxKeyHit[(zKeyChar-'0')])) 
    d170:	80 91 77 02 	lds	r24, 0x0277
    d174:	e0 91 7b 02 	lds	r30, 0x027B
    d178:	f0 e0       	ldi	r31, 0x00	; 0
    d17a:	e8 55       	subi	r30, 0x58	; 88
    d17c:	fd 4f       	sbci	r31, 0xFD	; 253
    d17e:	e4 91       	lpm	r30, Z+
    d180:	8e 17       	cp	r24, r30
    d182:	20 f4       	brcc	.+8      	; 0xd18c <UserInput+0x1d4>
				        iHit++;
    d184:	8f 5f       	subi	r24, 0xFF	; 255
    d186:	80 93 77 02 	sts	0x0277, r24
    d18a:	02 c0       	rjmp	.+4      	; 0xd190 <UserInput+0x1d8>
                   else iHit=0;
    d18c:	10 92 77 02 	sts	0x0277, r1
				   iLoop=1000;
    d190:	88 ee       	ldi	r24, 0xE8	; 232
    d192:	93 e0       	ldi	r25, 0x03	; 3
    d194:	90 93 71 02 	sts	0x0271, r25
    d198:	80 93 70 02 	sts	0x0270, r24

                   zAlphaChar=AlphaChar;
    d19c:	80 91 79 02 	lds	r24, 0x0279
    d1a0:	80 93 7a 02 	sts	0x027A, r24
			       AlphaChar=_table_alphanum(IsShifted,KeyPressed,iHit);			   
    d1a4:	80 91 76 02 	lds	r24, 0x0276
    d1a8:	6c 2d       	mov	r22, r12
    d1aa:	40 91 77 02 	lds	r20, 0x0277
    d1ae:	0e 94 20 a6 	call	0x14c40	; 0x14c40 <_table_alphanum>
    d1b2:	80 93 79 02 	sts	0x0279, r24
                   
				   if (IsNextKey==True){
    d1b6:	80 91 74 02 	lds	r24, 0x0274
    d1ba:	81 30       	cpi	r24, 0x01	; 1
    d1bc:	41 f4       	brne	.+16     	; 0xd1ce <UserInput+0x216>
                       AlphaChar=zAlphaChar;       
    d1be:	80 91 7a 02 	lds	r24, 0x027A
    d1c2:	80 93 79 02 	sts	0x0279, r24
					   IsNextKey=False;
    d1c6:	10 92 74 02 	sts	0x0274, r1
					   IsSameKey=False;
    d1ca:	10 92 75 02 	sts	0x0275, r1
				   }   
				   strResult[iValuePos]=AlphaChar;
    d1ce:	80 91 7c 02 	lds	r24, 0x027C
    d1d2:	fe 01       	movw	r30, r28
    d1d4:	e8 0f       	add	r30, r24
    d1d6:	f1 1d       	adc	r31, r1
    d1d8:	80 91 79 02 	lds	r24, 0x0279
    d1dc:	80 83       	st	Z, r24
		           strResult[iValuePos+1]=0;
    d1de:	11 82       	std	Z+1, r1	; 0x01
				 }//endElse 
				 
			   }//EndAlphaNum

			 if (TypeUI==UI_NUMBER_L){
    d1e0:	f2 e0       	ldi	r31, 0x02	; 2
    d1e2:	ff 16       	cp	r15, r31
    d1e4:	71 f4       	brne	.+28     	; 0xd202 <UserInput+0x24a>
			    if ((NumbValue<=MaxValue)||(MaxValue==0)){
    d1e6:	a0 16       	cp	r10, r16
    d1e8:	b1 06       	cpc	r11, r17
    d1ea:	18 f4       	brcc	.+6      	; 0xd1f2 <UserInput+0x23a>
    d1ec:	a1 14       	cp	r10, r1
    d1ee:	b1 04       	cpc	r11, r1
    d1f0:	71 f5       	brne	.+92     	; 0xd24e <UserInput+0x296>
				     iValuePos++;
    d1f2:	80 91 7c 02 	lds	r24, 0x027C
    d1f6:	8f 5f       	subi	r24, 0xFF	; 255
    d1f8:	80 93 7c 02 	sts	0x027C, r24
					 stUserInput=uiInputDisp;
    d1fc:	83 e0       	ldi	r24, 0x03	; 3
    d1fe:	80 93 7f 02 	sts	0x027F, r24
				} 
			 }
  
			   if ((NumbValue<=MaxValue)||(MaxValue==0)){
    d202:	a0 16       	cp	r10, r16
    d204:	b1 06       	cpc	r11, r17
    d206:	18 f4       	brcc	.+6      	; 0xd20e <UserInput+0x256>
    d208:	a1 14       	cp	r10, r1
    d20a:	b1 04       	cpc	r11, r1
    d20c:	01 f5       	brne	.+64     	; 0xd24e <UserInput+0x296>
			       if ((TypeUI==UI_NUMBER_R)||(TypeUI==UI_ALPHANUM_R)||
    d20e:	21 e0       	ldi	r18, 0x01	; 1
    d210:	f2 16       	cp	r15, r18
    d212:	49 f0       	breq	.+18     	; 0xd226 <UserInput+0x26e>
    d214:	83 e0       	ldi	r24, 0x03	; 3
    d216:	f8 16       	cp	r15, r24
    d218:	31 f0       	breq	.+12     	; 0xd226 <UserInput+0x26e>
    d21a:	e4 e0       	ldi	r30, 0x04	; 4
    d21c:	fe 16       	cp	r15, r30
    d21e:	19 f0       	breq	.+6      	; 0xd226 <UserInput+0x26e>
    d220:	f5 e0       	ldi	r31, 0x05	; 5
    d222:	ff 16       	cp	r15, r31
    d224:	a1 f4       	brne	.+40     	; 0xd24e <UserInput+0x296>
				       (TypeUI==UI_NUM_PASSWORD)||(TypeUI==UI_ALPHANUM_PASSWORD)){
				      if (IsSameKey==False){
    d226:	80 91 75 02 	lds	r24, 0x0275
    d22a:	88 23       	and	r24, r24
    d22c:	69 f4       	brne	.+26     	; 0xd248 <UserInput+0x290>
					      IsFirst=True;
    d22e:	81 e0       	ldi	r24, 0x01	; 1
    d230:	80 93 72 02 	sts	0x0272, r24
					      iValuePos++;
    d234:	80 91 7c 02 	lds	r24, 0x027C
    d238:	8f 5f       	subi	r24, 0xFF	; 255
    d23a:	80 93 7c 02 	sts	0x027C, r24
						  //FullEntry
						  if (iValuePos==MaxLength)Result=USER_FULL_ENTRY;
					      yChar++;
    d23e:	80 91 7d 02 	lds	r24, 0x027D
    d242:	8f 5f       	subi	r24, 0xFF	; 255
    d244:	80 93 7d 02 	sts	0x027D, r24
						  //yChar=(yChar+1;//Max Display

						  }
                  stUserInput=uiInputDisp;
    d248:	83 e0       	ldi	r24, 0x03	; 3
    d24a:	80 93 7f 02 	sts	0x027F, r24
				  }
			   }
              zKeyChar=KeyChar;
    d24e:	e0 92 7b 02 	sts	0x027B, r14
    d252:	54 e0       	ldi	r21, 0x04	; 4
    d254:	e5 2e       	mov	r14, r21
             Result=USER_ENTRY;
             }//EndKeyChar
			 
                 
              if ((TypeUI==UI_NUMBER_R)||(TypeUI==UI_NUMBER_L)||(TypeUI==UI_NUM_PASSWORD)){
    d256:	9f 2d       	mov	r25, r15
    d258:	91 50       	subi	r25, 0x01	; 1
    d25a:	92 30       	cpi	r25, 0x02	; 2
    d25c:	18 f0       	brcs	.+6      	; 0xd264 <UserInput+0x2ac>
    d25e:	24 e0       	ldi	r18, 0x04	; 4
    d260:	f2 16       	cp	r15, r18
    d262:	71 f4       	brne	.+28     	; 0xd280 <UserInput+0x2c8>
                   if((NumbValue>MaxValue)||(iValuePos==MaxLength)){
    d264:	a0 16       	cp	r10, r16
    d266:	b1 06       	cpc	r11, r17
    d268:	20 f0       	brcs	.+8      	; 0xd272 <UserInput+0x2ba>
    d26a:	80 91 7c 02 	lds	r24, 0x027C
    d26e:	88 15       	cp	r24, r8
    d270:	39 f4       	brne	.+14     	; 0xd280 <UserInput+0x2c8>
			           if (MaxValue>0)system_beep(1);
    d272:	ab 28       	or	r10, r11
    d274:	29 f0       	breq	.+10     	; 0xd280 <UserInput+0x2c8>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    d276:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    d278:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    d27a:	81 e0       	ldi	r24, 0x01	; 1
    d27c:	80 93 bc 01 	sts	0x01BC, r24
			           if (MaxValue>0)system_beep(1);
				   }
                 }
		  
		  //CANCEL OK
		  if (KeyPressed==_KEY_CANCEL){
    d280:	87 ee       	ldi	r24, 0xE7	; 231
    d282:	c8 16       	cp	r12, r24
    d284:	71 f4       	brne	.+28     	; 0xd2a2 <UserInput+0x2ea>
		      if (iValuePos>0){
    d286:	80 91 7c 02 	lds	r24, 0x027C
    d28a:	88 23       	and	r24, r24
    d28c:	41 f0       	breq	.+16     	; 0xd29e <UserInput+0x2e6>
			      iLoop=1999;
    d28e:	8f ec       	ldi	r24, 0xCF	; 207
    d290:	97 e0       	ldi	r25, 0x07	; 7
    d292:	90 93 71 02 	sts	0x0271, r25
    d296:	80 93 70 02 	sts	0x0270, r24
				  stUserInput=uiClearDisplay;
    d29a:	82 e0       	ldi	r24, 0x02	; 2
    d29c:	26 c0       	rjmp	.+76     	; 0xd2ea <UserInput+0x332>
				  }
			  else{
			      UserInputResult=USER_CANCEL;
    d29e:	81 e0       	ldi	r24, 0x01	; 1
    d2a0:	21 c0       	rjmp	.+66     	; 0xd2e4 <UserInput+0x32c>
			      stUserInput=uiFinished;
				  }
		  }
		  else {
		  if (KeyPressed==_KEY_ENTER){
    d2a2:	e7 eb       	ldi	r30, 0xB7	; 183
    d2a4:	ce 16       	cp	r12, r30
    d2a6:	19 f5       	brne	.+70     	; 0xd2ee <UserInput+0x336>
		      strResult[iValuePos]=0;
    d2a8:	80 91 7c 02 	lds	r24, 0x027C
    d2ac:	fe 01       	movw	r30, r28
    d2ae:	e8 0f       	add	r30, r24
    d2b0:	f1 1d       	adc	r31, r1
    d2b2:	10 82       	st	Z, r1
			  if ((TypeUI==UI_NUMBER_R)||(TypeUI==UI_NUMBER_L)){
    d2b4:	92 30       	cpi	r25, 0x02	; 2
    d2b6:	a8 f4       	brcc	.+42     	; 0xd2e2 <UserInput+0x32a>
			       if (iValuePos==0)sprintf_P(strResult,PSTR("0"));
    d2b8:	88 23       	and	r24, r24
    d2ba:	81 f4       	brne	.+32     	; 0xd2dc <UserInput+0x324>
    d2bc:	00 d0       	rcall	.+0      	; 0xd2be <UserInput+0x306>
    d2be:	00 d0       	rcall	.+0      	; 0xd2c0 <UserInput+0x308>
    d2c0:	ed b7       	in	r30, 0x3d	; 61
    d2c2:	fe b7       	in	r31, 0x3e	; 62
    d2c4:	d2 83       	std	Z+2, r29	; 0x02
    d2c6:	c1 83       	std	Z+1, r28	; 0x01
    d2c8:	88 e1       	ldi	r24, 0x18	; 24
    d2ca:	9e e1       	ldi	r25, 0x1E	; 30
    d2cc:	94 83       	std	Z+4, r25	; 0x04
    d2ce:	83 83       	std	Z+3, r24	; 0x03
    d2d0:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
    d2d4:	0f 90       	pop	r0
    d2d6:	0f 90       	pop	r0
    d2d8:	0f 90       	pop	r0
    d2da:	0f 90       	pop	r0
			       RemZeroLead(strResult);
    d2dc:	ce 01       	movw	r24, r28
    d2de:	0e 94 51 25 	call	0x4aa2	; 0x4aa2 <RemZeroLead>
				  }
		      UserInputResult=USER_OK;
    d2e2:	83 e0       	ldi	r24, 0x03	; 3
    d2e4:	80 93 80 02 	sts	0x0280, r24
		      stUserInput=uiFinished;
    d2e8:	84 e0       	ldi	r24, 0x04	; 4
    d2ea:	80 93 7f 02 	sts	0x027F, r24
			  }
		  }//EndElse

		  if ((iLoop%2000)==0){
    d2ee:	80 91 70 02 	lds	r24, 0x0270
    d2f2:	90 91 71 02 	lds	r25, 0x0271
    d2f6:	60 ed       	ldi	r22, 0xD0	; 208
    d2f8:	77 e0       	ldi	r23, 0x07	; 7
    d2fa:	0e 94 7a aa 	call	0x154f4	; 0x154f4 <__udivmodhi4>
    d2fe:	89 2b       	or	r24, r25
    d300:	09 f0       	breq	.+2      	; 0xd304 <UserInput+0x34c>
    d302:	4b c0       	rjmp	.+150    	; 0xd39a <UserInput+0x3e2>
		      if (IsSameKey==True)
    d304:	80 91 75 02 	lds	r24, 0x0275
    d308:	81 30       	cpi	r24, 0x01	; 1
    d30a:	c9 f4       	brne	.+50     	; 0xd33e <UserInput+0x386>
			      //lcd_put(xChar,yChar,AlphaChar); 
				  lcd_put(xPos+((yPos+iValuePos-1)/20),yPos+(iValuePos%20),AlphaChar); 
    d30c:	20 91 7c 02 	lds	r18, 0x027C
    d310:	82 2f       	mov	r24, r18
    d312:	90 e0       	ldi	r25, 0x00	; 0
    d314:	01 97       	sbiw	r24, 0x01	; 1
    d316:	8d 0d       	add	r24, r13
    d318:	91 1d       	adc	r25, r1
    d31a:	64 e1       	ldi	r22, 0x14	; 20
    d31c:	70 e0       	ldi	r23, 0x00	; 0
    d31e:	0e 94 8e aa 	call	0x1551c	; 0x1551c <__divmodhi4>
    d322:	36 2f       	mov	r19, r22
    d324:	82 2f       	mov	r24, r18
    d326:	64 e1       	ldi	r22, 0x14	; 20
    d328:	0e 94 61 aa 	call	0x154c2	; 0x154c2 <__udivmodqi4>
    d32c:	6d 2d       	mov	r22, r13
    d32e:	69 0f       	add	r22, r25
    d330:	89 2d       	mov	r24, r9
    d332:	83 0f       	add	r24, r19
    d334:	40 91 79 02 	lds	r20, 0x0279
    d338:	0e 94 41 a5 	call	0x14a82	; 0x14a82 <lcd_put>
    d33c:	2e c0       	rjmp	.+92     	; 0xd39a <UserInput+0x3e2>
			  else {
			      if((TypeUI==UI_ALPHANUM_PASSWORD)&&(iValuePos>0))lcd_put(xChar,yChar-1,'*'); 
    d33e:	f5 e0       	ldi	r31, 0x05	; 5
    d340:	ff 16       	cp	r15, r31
    d342:	61 f4       	brne	.+24     	; 0xd35c <UserInput+0x3a4>
    d344:	80 91 7c 02 	lds	r24, 0x027C
    d348:	88 23       	and	r24, r24
    d34a:	41 f0       	breq	.+16     	; 0xd35c <UserInput+0x3a4>
    d34c:	60 91 7d 02 	lds	r22, 0x027D
    d350:	61 50       	subi	r22, 0x01	; 1
    d352:	80 91 7e 02 	lds	r24, 0x027E
    d356:	4a e2       	ldi	r20, 0x2A	; 42
    d358:	0e 94 41 a5 	call	0x14a82	; 0x14a82 <lcd_put>
			      //lcd_put(xChar,yChar,'_'); 
				  lcd_put(xPos+((yPos+iValuePos-1)/20),yPos+(iValuePos%20),'_'); 
    d35c:	20 91 7c 02 	lds	r18, 0x027C
    d360:	82 2f       	mov	r24, r18
    d362:	90 e0       	ldi	r25, 0x00	; 0
    d364:	01 97       	sbiw	r24, 0x01	; 1
    d366:	8d 0d       	add	r24, r13
    d368:	91 1d       	adc	r25, r1
    d36a:	64 e1       	ldi	r22, 0x14	; 20
    d36c:	70 e0       	ldi	r23, 0x00	; 0
    d36e:	0e 94 8e aa 	call	0x1551c	; 0x1551c <__divmodhi4>
    d372:	36 2f       	mov	r19, r22
    d374:	82 2f       	mov	r24, r18
    d376:	64 e1       	ldi	r22, 0x14	; 20
    d378:	0e 94 61 aa 	call	0x154c2	; 0x154c2 <__udivmodqi4>
    d37c:	6d 2d       	mov	r22, r13
    d37e:	69 0f       	add	r22, r25
    d380:	89 2d       	mov	r24, r9
    d382:	83 0f       	add	r24, r19
    d384:	4f e5       	ldi	r20, 0x5F	; 95
    d386:	0e 94 41 a5 	call	0x14a82	; 0x14a82 <lcd_put>

				  if (IsFirst==True){
    d38a:	80 91 72 02 	lds	r24, 0x0272
    d38e:	81 30       	cpi	r24, 0x01	; 1
    d390:	21 f4       	brne	.+8      	; 0xd39a <UserInput+0x3e2>
				      IsFirst=False;
    d392:	10 92 72 02 	sts	0x0272, r1
				      zKeyChar=0;
    d396:	10 92 7b 02 	sts	0x027B, r1
					  }
				  }
			  }
          if ((iLoop%2000)==1000){
    d39a:	80 91 70 02 	lds	r24, 0x0270
    d39e:	90 91 71 02 	lds	r25, 0x0271
    d3a2:	60 ed       	ldi	r22, 0xD0	; 208
    d3a4:	77 e0       	ldi	r23, 0x07	; 7
    d3a6:	0e 94 7a aa 	call	0x154f4	; 0x154f4 <__udivmodhi4>
    d3aa:	88 5e       	subi	r24, 0xE8	; 232
    d3ac:	93 40       	sbci	r25, 0x03	; 3
    d3ae:	d1 f5       	brne	.+116    	; 0xd424 <UserInput+0x46c>
		      if (IsSameKey==True){
    d3b0:	80 91 75 02 	lds	r24, 0x0275
    d3b4:	81 30       	cpi	r24, 0x01	; 1
    d3b6:	f9 f4       	brne	.+62     	; 0xd3f6 <UserInput+0x43e>
			      if (TypeUI!=UI_NUM_PASSWORD)
    d3b8:	84 e0       	ldi	r24, 0x04	; 4
    d3ba:	f8 16       	cp	r15, r24
    d3bc:	b1 f0       	breq	.+44     	; 0xd3ea <UserInput+0x432>
				       //lcd_put(xChar,yChar,AlphaChar); 
					   lcd_put(xPos+((yPos+iValuePos-1)/20),yChar%21,AlphaChar); 
    d3be:	80 91 7c 02 	lds	r24, 0x027C
    d3c2:	90 e0       	ldi	r25, 0x00	; 0
    d3c4:	01 97       	sbiw	r24, 0x01	; 1
    d3c6:	8d 0d       	add	r24, r13
    d3c8:	91 1d       	adc	r25, r1
    d3ca:	64 e1       	ldi	r22, 0x14	; 20
    d3cc:	70 e0       	ldi	r23, 0x00	; 0
    d3ce:	0e 94 8e aa 	call	0x1551c	; 0x1551c <__divmodhi4>
    d3d2:	26 2f       	mov	r18, r22
    d3d4:	80 91 7d 02 	lds	r24, 0x027D
    d3d8:	65 e1       	ldi	r22, 0x15	; 21
    d3da:	0e 94 61 aa 	call	0x154c2	; 0x154c2 <__udivmodqi4>
    d3de:	89 2d       	mov	r24, r9
    d3e0:	82 0f       	add	r24, r18
    d3e2:	69 2f       	mov	r22, r25
    d3e4:	40 91 79 02 	lds	r20, 0x0279
    d3e8:	1b c0       	rjmp	.+54     	; 0xd420 <UserInput+0x468>
					   
				  else lcd_put(xChar,yChar,'*'); 
    d3ea:	80 91 7e 02 	lds	r24, 0x027E
    d3ee:	60 91 7d 02 	lds	r22, 0x027D
    d3f2:	4a e2       	ldi	r20, 0x2A	; 42
    d3f4:	15 c0       	rjmp	.+42     	; 0xd420 <UserInput+0x468>
			  }
			  //else lcd_put(xChar,yChar,' '); 
			  else lcd_put(xPos+((yPos+iValuePos-1)/20),yPos+(iValuePos%20),' '); 			  
    d3f6:	20 91 7c 02 	lds	r18, 0x027C
    d3fa:	82 2f       	mov	r24, r18
    d3fc:	90 e0       	ldi	r25, 0x00	; 0
    d3fe:	01 97       	sbiw	r24, 0x01	; 1
    d400:	8d 0d       	add	r24, r13
    d402:	91 1d       	adc	r25, r1
    d404:	64 e1       	ldi	r22, 0x14	; 20
    d406:	70 e0       	ldi	r23, 0x00	; 0
    d408:	0e 94 8e aa 	call	0x1551c	; 0x1551c <__divmodhi4>
    d40c:	36 2f       	mov	r19, r22
    d40e:	82 2f       	mov	r24, r18
    d410:	64 e1       	ldi	r22, 0x14	; 20
    d412:	0e 94 61 aa 	call	0x154c2	; 0x154c2 <__udivmodqi4>
    d416:	d9 0e       	add	r13, r25
    d418:	89 2d       	mov	r24, r9
    d41a:	83 0f       	add	r24, r19
    d41c:	6d 2d       	mov	r22, r13
    d41e:	40 e2       	ldi	r20, 0x20	; 32
    d420:	0e 94 41 a5 	call	0x14a82	; 0x14a82 <lcd_put>
			  }
          iLoop++;
    d424:	80 91 70 02 	lds	r24, 0x0270
    d428:	90 91 71 02 	lds	r25, 0x0271
    d42c:	01 96       	adiw	r24, 0x01	; 1
    d42e:	90 93 71 02 	sts	0x0271, r25
    d432:	80 93 70 02 	sts	0x0270, r24
    d436:	d6 c0       	rjmp	.+428    	; 0xd5e4 <UserInput+0x62c>
          break;
     case uiClearDisplay:
          if (TypeUI==UI_NUMBER_L){
    d438:	e2 e0       	ldi	r30, 0x02	; 2
    d43a:	8e 17       	cp	r24, r30
    d43c:	99 f4       	brne	.+38     	; 0xd464 <UserInput+0x4ac>
		      lcd_put(xChar,(yChar-iValuePos),' '); // 123_ 1_
    d43e:	60 91 7d 02 	lds	r22, 0x027D
    d442:	80 91 7c 02 	lds	r24, 0x027C
    d446:	68 1b       	sub	r22, r24
    d448:	80 91 7e 02 	lds	r24, 0x027E
    d44c:	40 e2       	ldi	r20, 0x20	; 32
    d44e:	0e 94 41 a5 	call	0x14a82	; 0x14a82 <lcd_put>
		      strResult[iValuePos]=0;
    d452:	80 91 7c 02 	lds	r24, 0x027C
    d456:	c8 0f       	add	r28, r24
    d458:	d1 1d       	adc	r29, r1
    d45a:	18 82       	st	Y, r1
		      iValuePos--;
    d45c:	81 50       	subi	r24, 0x01	; 1
    d45e:	80 93 7c 02 	sts	0x027C, r24
    d462:	33 c0       	rjmp	.+102    	; 0xd4ca <UserInput+0x512>
			  }
          else
		  if ((TypeUI==UI_NUMBER_R)||(TypeUI==UI_ALPHANUM_R)||
    d464:	f1 e0       	ldi	r31, 0x01	; 1
    d466:	8f 17       	cp	r24, r31
    d468:	49 f0       	breq	.+18     	; 0xd47c <UserInput+0x4c4>
    d46a:	23 e0       	ldi	r18, 0x03	; 3
    d46c:	82 17       	cp	r24, r18
    d46e:	31 f0       	breq	.+12     	; 0xd47c <UserInput+0x4c4>
    d470:	84 e0       	ldi	r24, 0x04	; 4
    d472:	f8 16       	cp	r15, r24
    d474:	19 f0       	breq	.+6      	; 0xd47c <UserInput+0x4c4>
    d476:	e5 e0       	ldi	r30, 0x05	; 5
    d478:	fe 16       	cp	r15, r30
    d47a:	39 f5       	brne	.+78     	; 0xd4ca <UserInput+0x512>
		      (TypeUI==UI_NUM_PASSWORD)||(TypeUI==UI_ALPHANUM_PASSWORD)){
		      //lcd_put(xChar,yChar,' '); // 123_ 1_
			  lcd_put(xPos+((yPos+iValuePos-1)/20),yPos+(iValuePos%20),' '); // 123_ 1_
    d47c:	20 91 7c 02 	lds	r18, 0x027C
    d480:	82 2f       	mov	r24, r18
    d482:	90 e0       	ldi	r25, 0x00	; 0
    d484:	01 97       	sbiw	r24, 0x01	; 1
    d486:	8d 0d       	add	r24, r13
    d488:	91 1d       	adc	r25, r1
    d48a:	64 e1       	ldi	r22, 0x14	; 20
    d48c:	70 e0       	ldi	r23, 0x00	; 0
    d48e:	0e 94 8e aa 	call	0x1551c	; 0x1551c <__divmodhi4>
    d492:	36 2f       	mov	r19, r22
    d494:	82 2f       	mov	r24, r18
    d496:	64 e1       	ldi	r22, 0x14	; 20
    d498:	0e 94 61 aa 	call	0x154c2	; 0x154c2 <__udivmodqi4>
    d49c:	d9 0e       	add	r13, r25
    d49e:	89 2d       	mov	r24, r9
    d4a0:	83 0f       	add	r24, r19
    d4a2:	6d 2d       	mov	r22, r13
    d4a4:	40 e2       	ldi	r20, 0x20	; 32
    d4a6:	0e 94 41 a5 	call	0x14a82	; 0x14a82 <lcd_put>
			  
		      strResult[iValuePos]=0;
    d4aa:	80 91 7c 02 	lds	r24, 0x027C
    d4ae:	c8 0f       	add	r28, r24
    d4b0:	d1 1d       	adc	r29, r1
    d4b2:	18 82       	st	Y, r1
		      iValuePos--;
    d4b4:	81 50       	subi	r24, 0x01	; 1
    d4b6:	80 93 7c 02 	sts	0x027C, r24
			  yChar--;
    d4ba:	80 91 7d 02 	lds	r24, 0x027D
    d4be:	81 50       	subi	r24, 0x01	; 1
    d4c0:	80 93 7d 02 	sts	0x027D, r24
			  IsDelete=True;
    d4c4:	81 e0       	ldi	r24, 0x01	; 1
    d4c6:	80 93 78 02 	sts	0x0278, r24
		  }
		  if (iValuePos==0)Result=USER_NO_DATA;		  
    d4ca:	80 91 7c 02 	lds	r24, 0x027C
    d4ce:	88 23       	and	r24, r24
    d4d0:	19 f4       	brne	.+6      	; 0xd4d8 <UserInput+0x520>
    d4d2:	45 e0       	ldi	r20, 0x05	; 5
    d4d4:	e4 2e       	mov	r14, r20
    d4d6:	01 c0       	rjmp	.+2      	; 0xd4da <UserInput+0x522>
    d4d8:	ee 24       	eor	r14, r14
		  stUserInput=uiInputDisp;//Redraw
    d4da:	83 e0       	ldi	r24, 0x03	; 3
    d4dc:	80 93 7f 02 	sts	0x027F, r24
    d4e0:	81 c0       	rjmp	.+258    	; 0xd5e4 <UserInput+0x62c>
	      break;      
     case uiInputDisp:
	      if(TypeUI==UI_ALPHANUM_PASSWORD){
    d4e2:	f5 e0       	ldi	r31, 0x05	; 5
    d4e4:	8f 17       	cp	r24, r31
    d4e6:	19 f5       	brne	.+70     	; 0xd52e <UserInput+0x576>
			  if (iValuePos>0){
    d4e8:	80 91 7c 02 	lds	r24, 0x027C
    d4ec:	88 23       	and	r24, r24
    d4ee:	a9 f0       	breq	.+42     	; 0xd51a <UserInput+0x562>
                  lcd_put(xChar,(yChar-2),'*');
    d4f0:	60 91 7d 02 	lds	r22, 0x027D
    d4f4:	62 50       	subi	r22, 0x02	; 2
    d4f6:	80 91 7e 02 	lds	r24, 0x027E
    d4fa:	4a e2       	ldi	r20, 0x2A	; 42
    d4fc:	0e 94 41 a5 	call	0x14a82	; 0x14a82 <lcd_put>
			      if (IsDelete==True){
    d500:	80 91 78 02 	lds	r24, 0x0278
    d504:	60 91 7d 02 	lds	r22, 0x027D
    d508:	81 30       	cpi	r24, 0x01	; 1
    d50a:	71 f0       	breq	.+28     	; 0xd528 <UserInput+0x570>
				      IsDelete=False;
			          lcd_put(xChar,(yChar-1),'*');
			          }
				  else lcd_put(xChar,(yChar-1),strResult[iValuePos-1]);
    d50c:	61 50       	subi	r22, 0x01	; 1
    d50e:	80 91 7c 02 	lds	r24, 0x027C
    d512:	c8 0f       	add	r28, r24
    d514:	d1 1d       	adc	r29, r1
    d516:	21 97       	sbiw	r28, 0x01	; 1
    d518:	4d c0       	rjmp	.+154    	; 0xd5b4 <UserInput+0x5fc>
			      }
			  else{ if(IsDelete==True){
    d51a:	80 91 78 02 	lds	r24, 0x0278
    d51e:	60 91 7d 02 	lds	r22, 0x027D
    d522:	81 30       	cpi	r24, 0x01	; 1
    d524:	09 f0       	breq	.+2      	; 0xd528 <UserInput+0x570>
    d526:	45 c0       	rjmp	.+138    	; 0xd5b2 <UserInput+0x5fa>
			           IsDelete=False;
    d528:	10 92 78 02 	sts	0x0278, r1
    d52c:	4c c0       	rjmp	.+152    	; 0xd5c6 <UserInput+0x60e>
					   lcd_put(xChar,(yChar-1),'*');
			           }
			        else lcd_put(xChar,(yChar-1),strResult[iValuePos]);
			  }
		  }else
	      if (TypeUI==UI_NUMBER_L){
    d52e:	22 e0       	ldi	r18, 0x02	; 2
    d530:	82 17       	cp	r24, r18
    d532:	a1 f4       	brne	.+40     	; 0xd55c <UserInput+0x5a4>
    d534:	10 e0       	ldi	r17, 0x00	; 0
    d536:	0d c0       	rjmp	.+26     	; 0xd552 <UserInput+0x59a>
	          for(iDisp=0;iDisp<iValuePos;iDisp++){
				  lcd_put(xChar,(yChar-(iValuePos-iDisp)),strResult[iDisp]);
    d538:	60 91 7d 02 	lds	r22, 0x027D
    d53c:	68 1b       	sub	r22, r24
    d53e:	61 0f       	add	r22, r17
    d540:	fe 01       	movw	r30, r28
    d542:	e1 0f       	add	r30, r17
    d544:	f1 1d       	adc	r31, r1
    d546:	80 91 7e 02 	lds	r24, 0x027E
    d54a:	40 81       	ld	r20, Z
    d54c:	0e 94 41 a5 	call	0x14a82	; 0x14a82 <lcd_put>
			           }
			        else lcd_put(xChar,(yChar-1),strResult[iValuePos]);
			  }
		  }else
	      if (TypeUI==UI_NUMBER_L){
	          for(iDisp=0;iDisp<iValuePos;iDisp++){
    d550:	1f 5f       	subi	r17, 0xFF	; 255
    d552:	80 91 7c 02 	lds	r24, 0x027C
    d556:	18 17       	cp	r17, r24
    d558:	78 f3       	brcs	.-34     	; 0xd538 <UserInput+0x580>
    d55a:	3b c0       	rjmp	.+118    	; 0xd5d2 <UserInput+0x61a>
				  lcd_put(xChar,(yChar-(iValuePos-iDisp)),strResult[iDisp]);
		      }
		  }else
	      if ((TypeUI==UI_NUMBER_R)||(TypeUI==UI_ALPHANUM_R)){
    d55c:	81 e0       	ldi	r24, 0x01	; 1
    d55e:	f8 16       	cp	r15, r24
    d560:	19 f0       	breq	.+6      	; 0xd568 <UserInput+0x5b0>
    d562:	e3 e0       	ldi	r30, 0x03	; 3
    d564:	fe 16       	cp	r15, r30
    d566:	51 f5       	brne	.+84     	; 0xd5bc <UserInput+0x604>
		      
			  //if (iValuePos>0) lcd_put(xChar,(yChar-1),strResult[iValuePos-1]);
			  if (iValuePos>0) lcd_put(xPos+((yPos+iValuePos-1)/21),yPos+((iValuePos-1)%20),strResult[iValuePos-1]);			  
    d568:	20 91 7c 02 	lds	r18, 0x027C
    d56c:	4d 2d       	mov	r20, r13
    d56e:	50 e0       	ldi	r21, 0x00	; 0
    d570:	22 23       	and	r18, r18
    d572:	c1 f0       	breq	.+48     	; 0xd5a4 <UserInput+0x5ec>
    d574:	30 e0       	ldi	r19, 0x00	; 0
    d576:	f9 01       	movw	r30, r18
    d578:	31 97       	sbiw	r30, 0x01	; 1
    d57a:	cf 01       	movw	r24, r30
    d57c:	84 0f       	add	r24, r20
    d57e:	95 1f       	adc	r25, r21
    d580:	65 e1       	ldi	r22, 0x15	; 21
    d582:	70 e0       	ldi	r23, 0x00	; 0
    d584:	0e 94 8e aa 	call	0x1551c	; 0x1551c <__divmodhi4>
    d588:	46 2f       	mov	r20, r22
    d58a:	cf 01       	movw	r24, r30
    d58c:	64 e1       	ldi	r22, 0x14	; 20
    d58e:	70 e0       	ldi	r23, 0x00	; 0
    d590:	0e 94 8e aa 	call	0x1551c	; 0x1551c <__divmodhi4>
    d594:	d8 0e       	add	r13, r24
    d596:	c2 0f       	add	r28, r18
    d598:	d3 1f       	adc	r29, r19
    d59a:	21 97       	sbiw	r28, 0x01	; 1
    d59c:	89 2d       	mov	r24, r9
    d59e:	84 0f       	add	r24, r20
    d5a0:	6d 2d       	mov	r22, r13
    d5a2:	0a c0       	rjmp	.+20     	; 0xd5b8 <UserInput+0x600>
			  else{ if ((yChar-1)>=yPos)lcd_put(xChar,(yChar-1),strResult[iValuePos]);
    d5a4:	60 91 7d 02 	lds	r22, 0x027D
    d5a8:	86 2f       	mov	r24, r22
    d5aa:	90 e0       	ldi	r25, 0x00	; 0
    d5ac:	48 17       	cp	r20, r24
    d5ae:	59 07       	cpc	r21, r25
    d5b0:	84 f4       	brge	.+32     	; 0xd5d2 <UserInput+0x61a>
    d5b2:	61 50       	subi	r22, 0x01	; 1
    d5b4:	80 91 7e 02 	lds	r24, 0x027E
    d5b8:	48 81       	ld	r20, Y
    d5ba:	09 c0       	rjmp	.+18     	; 0xd5ce <UserInput+0x616>
			  }
		  }else
		  //DisplayAsterik *
		  if (TypeUI==UI_NUM_PASSWORD){
    d5bc:	f4 e0       	ldi	r31, 0x04	; 4
    d5be:	ff 16       	cp	r15, r31
    d5c0:	41 f4       	brne	.+16     	; 0xd5d2 <UserInput+0x61a>
		      lcd_put(xChar,(yChar-1),'*');
    d5c2:	60 91 7d 02 	lds	r22, 0x027D
    d5c6:	61 50       	subi	r22, 0x01	; 1
    d5c8:	80 91 7e 02 	lds	r24, 0x027E
    d5cc:	4a e2       	ldi	r20, 0x2A	; 42
    d5ce:	0e 94 41 a5 	call	0x14a82	; 0x14a82 <lcd_put>
		  }

          stUserInput=uiInput;
    d5d2:	81 e0       	ldi	r24, 0x01	; 1
    d5d4:	80 93 7f 02 	sts	0x027F, r24
    d5d8:	ee 24       	eor	r14, r14
    d5da:	04 c0       	rjmp	.+8      	; 0xd5e4 <UserInput+0x62c>
	      break;	 
     case uiFinished:
	      Result=UserInputResult;
    d5dc:	e0 90 80 02 	lds	r14, 0x0280
	      stUserInput=uiInit;
    d5e0:	10 92 7f 02 	sts	0x027F, r1
	      break;
	 }
	 return Result;
}
    d5e4:	8e 2d       	mov	r24, r14
    d5e6:	df 91       	pop	r29
    d5e8:	cf 91       	pop	r28
    d5ea:	1f 91       	pop	r17
    d5ec:	0f 91       	pop	r16
    d5ee:	ff 90       	pop	r15
    d5f0:	ef 90       	pop	r14
    d5f2:	df 90       	pop	r13
    d5f4:	cf 90       	pop	r12
    d5f6:	bf 90       	pop	r11
    d5f8:	af 90       	pop	r10
    d5fa:	9f 90       	pop	r9
    d5fc:	8f 90       	pop	r8
    d5fe:	08 95       	ret

0000d600 <FSettingOperator>:
char FSettingHost(){
     _menu_host();
	 return MENU_DONE;
}

char FSettingOperator(){//Change Active Operator, Change Password
    d600:	ef 92       	push	r14
    d602:	0f 93       	push	r16
    d604:	1f 93       	push	r17
    d606:	df 93       	push	r29
    d608:	cf 93       	push	r28
    d60a:	cd b7       	in	r28, 0x3d	; 61
    d60c:	de b7       	in	r29, 0x3e	; 62
    d60e:	e5 97       	sbiw	r28, 0x35	; 53
    d610:	0f b6       	in	r0, 0x3f	; 63
    d612:	f8 94       	cli
    d614:	de bf       	out	0x3e, r29	; 62
    d616:	0f be       	out	0x3f, r0	; 63
    d618:	cd bf       	out	0x3d, r28	; 61
	        char KeyPressed,KeyChar,lcdteks[20],strPassword[15];
			char strOperatorName[18];
			char uiResult=USER_NONE,Result=MENU_NONE;

	 Result=MENU_NONE;
	 switch(stSettingOperator){
    d61a:	80 91 1e 02 	lds	r24, 0x021E
    d61e:	87 30       	cpi	r24, 0x07	; 7
    d620:	09 f4       	brne	.+2      	; 0xd624 <FSettingOperator+0x24>
    d622:	74 c1       	rjmp	.+744    	; 0xd90c <FSettingOperator+0x30c>
    d624:	88 30       	cpi	r24, 0x08	; 8
    d626:	90 f4       	brcc	.+36     	; 0xd64c <FSettingOperator+0x4c>
    d628:	83 30       	cpi	r24, 0x03	; 3
    d62a:	09 f4       	brne	.+2      	; 0xd62e <FSettingOperator+0x2e>
    d62c:	9e c0       	rjmp	.+316    	; 0xd76a <FSettingOperator+0x16a>
    d62e:	84 30       	cpi	r24, 0x04	; 4
    d630:	30 f4       	brcc	.+12     	; 0xd63e <FSettingOperator+0x3e>
    d632:	81 30       	cpi	r24, 0x01	; 1
    d634:	d1 f1       	breq	.+116    	; 0xd6aa <FSettingOperator+0xaa>
    d636:	82 30       	cpi	r24, 0x02	; 2
    d638:	08 f0       	brcs	.+2      	; 0xd63c <FSettingOperator+0x3c>
    d63a:	4a c0       	rjmp	.+148    	; 0xd6d0 <FSettingOperator+0xd0>
    d63c:	20 c0       	rjmp	.+64     	; 0xd67e <FSettingOperator+0x7e>
    d63e:	85 30       	cpi	r24, 0x05	; 5
    d640:	09 f4       	brne	.+2      	; 0xd644 <FSettingOperator+0x44>
    d642:	35 c1       	rjmp	.+618    	; 0xd8ae <FSettingOperator+0x2ae>
    d644:	86 30       	cpi	r24, 0x06	; 6
    d646:	08 f0       	brcs	.+2      	; 0xd64a <FSettingOperator+0x4a>
    d648:	4e c1       	rjmp	.+668    	; 0xd8e6 <FSettingOperator+0x2e6>
    d64a:	fd c0       	rjmp	.+506    	; 0xd846 <FSettingOperator+0x246>
    d64c:	8b 30       	cpi	r24, 0x0B	; 11
    d64e:	09 f4       	brne	.+2      	; 0xd652 <FSettingOperator+0x52>
    d650:	1f c2       	rjmp	.+1086   	; 0xda90 <FSettingOperator+0x490>
    d652:	8c 30       	cpi	r24, 0x0C	; 12
    d654:	38 f4       	brcc	.+14     	; 0xd664 <FSettingOperator+0x64>
    d656:	89 30       	cpi	r24, 0x09	; 9
    d658:	09 f4       	brne	.+2      	; 0xd65c <FSettingOperator+0x5c>
    d65a:	a6 c1       	rjmp	.+844    	; 0xd9a8 <FSettingOperator+0x3a8>
    d65c:	8a 30       	cpi	r24, 0x0A	; 10
    d65e:	08 f0       	brcs	.+2      	; 0xd662 <FSettingOperator+0x62>
    d660:	d6 c1       	rjmp	.+940    	; 0xda0e <FSettingOperator+0x40e>
    d662:	74 c1       	rjmp	.+744    	; 0xd94c <FSettingOperator+0x34c>
    d664:	8d 30       	cpi	r24, 0x0D	; 13
    d666:	09 f4       	brne	.+2      	; 0xd66a <FSettingOperator+0x6a>
    d668:	95 c2       	rjmp	.+1322   	; 0xdb94 <FSettingOperator+0x594>
    d66a:	8d 30       	cpi	r24, 0x0D	; 13
    d66c:	08 f4       	brcc	.+2      	; 0xd670 <FSettingOperator+0x70>
    d66e:	17 c2       	rjmp	.+1070   	; 0xda9e <FSettingOperator+0x49e>
    d670:	8e 30       	cpi	r24, 0x0E	; 14
    d672:	09 f4       	brne	.+2      	; 0xd676 <FSettingOperator+0x76>
    d674:	94 c2       	rjmp	.+1320   	; 0xdb9e <FSettingOperator+0x59e>
    d676:	8f 30       	cpi	r24, 0x0F	; 15
    d678:	09 f0       	breq	.+2      	; 0xd67c <FSettingOperator+0x7c>
    d67a:	9c c2       	rjmp	.+1336   	; 0xdbb4 <FSettingOperator+0x5b4>
    d67c:	97 c2       	rjmp	.+1326   	; 0xdbac <FSettingOperator+0x5ac>
	 case soMenuOption:
	      lcd_clear();
    d67e:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
		  lcd_printf(1,1,PSTR("1.Change Operator"));
    d682:	81 e0       	ldi	r24, 0x01	; 1
    d684:	61 e0       	ldi	r22, 0x01	; 1
    d686:	46 e7       	ldi	r20, 0x76	; 118
    d688:	52 e1       	ldi	r21, 0x12	; 18
    d68a:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  lcd_printf(2,1,PSTR("2.Change Password"));
    d68e:	82 e0       	ldi	r24, 0x02	; 2
    d690:	61 e0       	ldi	r22, 0x01	; 1
    d692:	44 e6       	ldi	r20, 0x64	; 100
    d694:	52 e1       	ldi	r21, 0x12	; 18
    d696:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  lcd_printf(4,1,PSTR("[*]Back          "));
    d69a:	84 e0       	ldi	r24, 0x04	; 4
    d69c:	61 e0       	ldi	r22, 0x01	; 1
    d69e:	42 e5       	ldi	r20, 0x52	; 82
    d6a0:	52 e1       	ldi	r21, 0x12	; 18
    d6a2:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
          stSettingOperator=soMenuOptionInput;
    d6a6:	81 e0       	ldi	r24, 0x01	; 1
    d6a8:	5e c2       	rjmp	.+1212   	; 0xdb66 <FSettingOperator+0x566>
	      break;
     case soMenuOptionInput:
	      KeyPressed=_key_scan(1);
    d6aa:	81 e0       	ldi	r24, 0x01	; 1
    d6ac:	0e 94 6d a6 	call	0x14cda	; 0x14cda <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
    d6b0:	0e 94 ce a5 	call	0x14b9c	; 0x14b9c <_key_btn>
		  switch(KeyChar){
    d6b4:	81 33       	cpi	r24, 0x31	; 49
    d6b6:	31 f0       	breq	.+12     	; 0xd6c4 <FSettingOperator+0xc4>
    d6b8:	82 33       	cpi	r24, 0x32	; 50
    d6ba:	31 f0       	breq	.+12     	; 0xd6c8 <FSettingOperator+0xc8>
    d6bc:	8a 32       	cpi	r24, 0x2A	; 42
    d6be:	09 f0       	breq	.+2      	; 0xd6c2 <FSettingOperator+0xc2>
    d6c0:	79 c2       	rjmp	.+1266   	; 0xdbb4 <FSettingOperator+0x5b4>
    d6c2:	04 c0       	rjmp	.+8      	; 0xd6cc <FSettingOperator+0xcc>
		  case '1':
		       stSettingOperator=soChangeOperatorInit;
    d6c4:	82 e0       	ldi	r24, 0x02	; 2
    d6c6:	4f c2       	rjmp	.+1182   	; 0xdb66 <FSettingOperator+0x566>
		       break;
          case '2':
		       stSettingOperator=soChangePasswordInit;
    d6c8:	85 e0       	ldi	r24, 0x05	; 5
    d6ca:	4d c2       	rjmp	.+1178   	; 0xdb66 <FSettingOperator+0x566>
		       break;
          case '*':
		       stSettingOperator=soExitSettingOperator;
    d6cc:	8f e0       	ldi	r24, 0x0F	; 15
    d6ce:	4b c2       	rjmp	.+1174   	; 0xdb66 <FSettingOperator+0x566>
		       break;
		  }
	      break;
     case soChangeOperatorInit:
	      lcd_clear();		  
    d6d0:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
		  eeprom_read_block((void*) &strOperatorName, (const void*) &DefOperatorName,18);
    d6d4:	8e 01       	movw	r16, r28
    d6d6:	00 5f       	subi	r16, 0xF0	; 240
    d6d8:	1f 4f       	sbci	r17, 0xFF	; 255
    d6da:	c8 01       	movw	r24, r16
    d6dc:	65 e1       	ldi	r22, 0x15	; 21
    d6de:	70 e0       	ldi	r23, 0x00	; 0
    d6e0:	42 e1       	ldi	r20, 0x12	; 18
    d6e2:	50 e0       	ldi	r21, 0x00	; 0
    d6e4:	0e 94 30 ad 	call	0x15a60	; 0x15a60 <__eerd_block_m128>
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    d6e8:	98 01       	movw	r18, r16
    d6ea:	ce 01       	movw	r24, r28
    d6ec:	4f 96       	adiw	r24, 0x1f	; 31
	    Dest[i]=Source[IdxSource+i];
    d6ee:	0f 5f       	subi	r16, 0xFF	; 255
    d6f0:	1f 4f       	sbci	r17, 0xFF	; 255
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    d6f2:	08 17       	cp	r16, r24
    d6f4:	19 07       	cpc	r17, r25
    d6f6:	d9 f7       	brne	.-10     	; 0xd6ee <FSettingOperator+0xee>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    d6f8:	1f 8e       	std	Y+31, r1	; 0x1f
     case soChangeOperatorInit:
	      lcd_clear();		  
		  eeprom_read_block((void*) &strOperatorName, (const void*) &DefOperatorName,18);
		  StrPosCopy(strOperatorName,strOperatorName,0,15);

		  sprintf_P(lcdteks,PSTR("%s"),strOperatorName);
    d6fa:	00 d0       	rcall	.+0      	; 0xd6fc <FSettingOperator+0xfc>
    d6fc:	00 d0       	rcall	.+0      	; 0xd6fe <FSettingOperator+0xfe>
    d6fe:	00 d0       	rcall	.+0      	; 0xd700 <FSettingOperator+0x100>
    d700:	ed b7       	in	r30, 0x3d	; 61
    d702:	fe b7       	in	r31, 0x3e	; 62
    d704:	31 96       	adiw	r30, 0x01	; 1
    d706:	8e 01       	movw	r16, r28
    d708:	0e 5d       	subi	r16, 0xDE	; 222
    d70a:	1f 4f       	sbci	r17, 0xFF	; 255
    d70c:	ad b7       	in	r26, 0x3d	; 61
    d70e:	be b7       	in	r27, 0x3e	; 62
    d710:	12 96       	adiw	r26, 0x02	; 2
    d712:	1c 93       	st	X, r17
    d714:	0e 93       	st	-X, r16
    d716:	11 97       	sbiw	r26, 0x01	; 1
    d718:	8f e4       	ldi	r24, 0x4F	; 79
    d71a:	92 e1       	ldi	r25, 0x12	; 18
    d71c:	93 83       	std	Z+3, r25	; 0x03
    d71e:	82 83       	std	Z+2, r24	; 0x02
    d720:	24 83       	std	Z+4, r18	; 0x04
    d722:	35 83       	std	Z+5, r19	; 0x05
    d724:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
		  lcd_printf(1,1,PSTR("Name:"));
    d728:	8d b7       	in	r24, 0x3d	; 61
    d72a:	9e b7       	in	r25, 0x3e	; 62
    d72c:	06 96       	adiw	r24, 0x06	; 6
    d72e:	0f b6       	in	r0, 0x3f	; 63
    d730:	f8 94       	cli
    d732:	9e bf       	out	0x3e, r25	; 62
    d734:	0f be       	out	0x3f, r0	; 63
    d736:	8d bf       	out	0x3d, r24	; 61
    d738:	81 e0       	ldi	r24, 0x01	; 1
    d73a:	61 e0       	ldi	r22, 0x01	; 1
    d73c:	49 e4       	ldi	r20, 0x49	; 73
    d73e:	52 e1       	ldi	r21, 0x12	; 18
    d740:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  lcd_print (1,6,lcdteks);
    d744:	81 e0       	ldi	r24, 0x01	; 1
    d746:	66 e0       	ldi	r22, 0x06	; 6
    d748:	a8 01       	movw	r20, r16
    d74a:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
		  lcd_printf(2,1,PSTR("New :_              "));
    d74e:	82 e0       	ldi	r24, 0x02	; 2
    d750:	61 e0       	ldi	r22, 0x01	; 1
    d752:	44 e3       	ldi	r20, 0x34	; 52
    d754:	52 e1       	ldi	r21, 0x12	; 18
    d756:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    d75a:	84 e0       	ldi	r24, 0x04	; 4
    d75c:	61 e0       	ldi	r22, 0x01	; 1
    d75e:	4f e1       	ldi	r20, 0x1F	; 31
    d760:	52 e1       	ldi	r21, 0x12	; 18
    d762:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
          stSettingOperator=soOperatorNameInput;
    d766:	83 e0       	ldi	r24, 0x03	; 3
    d768:	fe c1       	rjmp	.+1020   	; 0xdb66 <FSettingOperator+0x566>
	      break;
     case soOperatorNameInput:
          uiResult=USER_NONE;
	      uiResult=UserInput(UI_ALPHANUM_R,2,6,strFreeMessageLine1,0,16);
    d76a:	83 e0       	ldi	r24, 0x03	; 3
    d76c:	62 e0       	ldi	r22, 0x02	; 2
    d76e:	46 e0       	ldi	r20, 0x06	; 6
    d770:	22 e9       	ldi	r18, 0x92	; 146
    d772:	38 e0       	ldi	r19, 0x08	; 8
    d774:	00 e0       	ldi	r16, 0x00	; 0
    d776:	10 e0       	ldi	r17, 0x00	; 0
    d778:	a0 e1       	ldi	r26, 0x10	; 16
    d77a:	ea 2e       	mov	r14, r26
    d77c:	0e 94 dc 67 	call	0xcfb8	; 0xcfb8 <UserInput>
		  switch(uiResult){
    d780:	83 30       	cpi	r24, 0x03	; 3
    d782:	51 f0       	breq	.+20     	; 0xd798 <FSettingOperator+0x198>
    d784:	84 30       	cpi	r24, 0x04	; 4
    d786:	08 f4       	brcc	.+2      	; 0xd78a <FSettingOperator+0x18a>
    d788:	f0 c0       	rjmp	.+480    	; 0xd96a <FSettingOperator+0x36a>
    d78a:	84 30       	cpi	r24, 0x04	; 4
    d78c:	09 f4       	brne	.+2      	; 0xd790 <FSettingOperator+0x190>
    d78e:	51 c0       	rjmp	.+162    	; 0xd832 <FSettingOperator+0x232>
    d790:	85 30       	cpi	r24, 0x05	; 5
    d792:	09 f0       	breq	.+2      	; 0xd796 <FSettingOperator+0x196>
    d794:	0f c2       	rjmp	.+1054   	; 0xdbb4 <FSettingOperator+0x5b4>
    d796:	52 c0       	rjmp	.+164    	; 0xd83c <FSettingOperator+0x23c>
		  case USER_OK:
		       lcd_clear();
    d798:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
    d79c:	20 e0       	ldi	r18, 0x00	; 0
    d79e:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    d7a0:	ae 01       	movw	r20, r28
    d7a2:	40 5f       	subi	r20, 0xF0	; 240
    d7a4:	5f 4f       	sbci	r21, 0xFF	; 255
    d7a6:	fa 01       	movw	r30, r20
    d7a8:	e2 0f       	add	r30, r18
    d7aa:	f3 1f       	adc	r31, r19
    d7ac:	d9 01       	movw	r26, r18
    d7ae:	ae 56       	subi	r26, 0x6E	; 110
    d7b0:	b7 4f       	sbci	r27, 0xF7	; 247
    d7b2:	8c 91       	ld	r24, X
    d7b4:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    d7b6:	2f 5f       	subi	r18, 0xFF	; 255
    d7b8:	3f 4f       	sbci	r19, 0xFF	; 255
    d7ba:	2f 30       	cpi	r18, 0x0F	; 15
    d7bc:	31 05       	cpc	r19, r1
    d7be:	99 f7       	brne	.-26     	; 0xd7a6 <FSettingOperator+0x1a6>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    d7c0:	1f 8e       	std	Y+31, r1	; 0x1f
	      uiResult=UserInput(UI_ALPHANUM_R,2,6,strFreeMessageLine1,0,16);
		  switch(uiResult){
		  case USER_OK:
		       lcd_clear();
			   StrPosCopy(strFreeMessageLine1,strOperatorName,0,15);
		       sprintf_P(lcdteks,PSTR("%s"),strOperatorName);
    d7c2:	00 d0       	rcall	.+0      	; 0xd7c4 <FSettingOperator+0x1c4>
    d7c4:	00 d0       	rcall	.+0      	; 0xd7c6 <FSettingOperator+0x1c6>
    d7c6:	00 d0       	rcall	.+0      	; 0xd7c8 <FSettingOperator+0x1c8>
    d7c8:	ed b7       	in	r30, 0x3d	; 61
    d7ca:	fe b7       	in	r31, 0x3e	; 62
    d7cc:	31 96       	adiw	r30, 0x01	; 1
    d7ce:	8e 01       	movw	r16, r28
    d7d0:	0e 5d       	subi	r16, 0xDE	; 222
    d7d2:	1f 4f       	sbci	r17, 0xFF	; 255
    d7d4:	ad b7       	in	r26, 0x3d	; 61
    d7d6:	be b7       	in	r27, 0x3e	; 62
    d7d8:	12 96       	adiw	r26, 0x02	; 2
    d7da:	1c 93       	st	X, r17
    d7dc:	0e 93       	st	-X, r16
    d7de:	11 97       	sbiw	r26, 0x01	; 1
    d7e0:	8c e1       	ldi	r24, 0x1C	; 28
    d7e2:	92 e1       	ldi	r25, 0x12	; 18
    d7e4:	93 83       	std	Z+3, r25	; 0x03
    d7e6:	82 83       	std	Z+2, r24	; 0x02
    d7e8:	55 83       	std	Z+5, r21	; 0x05
    d7ea:	44 83       	std	Z+4, r20	; 0x04
    d7ec:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
			   lcd_printf(1,1,PSTR("New Operator:"));
    d7f0:	8d b7       	in	r24, 0x3d	; 61
    d7f2:	9e b7       	in	r25, 0x3e	; 62
    d7f4:	06 96       	adiw	r24, 0x06	; 6
    d7f6:	0f b6       	in	r0, 0x3f	; 63
    d7f8:	f8 94       	cli
    d7fa:	9e bf       	out	0x3e, r25	; 62
    d7fc:	0f be       	out	0x3f, r0	; 63
    d7fe:	8d bf       	out	0x3d, r24	; 61
    d800:	81 e0       	ldi	r24, 0x01	; 1
    d802:	61 e0       	ldi	r22, 0x01	; 1
    d804:	4e e0       	ldi	r20, 0x0E	; 14
    d806:	52 e1       	ldi	r21, 0x12	; 18
    d808:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
			   lcd_print (2,1,lcdteks);
    d80c:	82 e0       	ldi	r24, 0x02	; 2
    d80e:	61 e0       	ldi	r22, 0x01	; 1
    d810:	a8 01       	movw	r20, r16
    d812:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
			   lcd_printf(3,1,PSTR("Save?"));
    d816:	83 e0       	ldi	r24, 0x03	; 3
    d818:	61 e0       	ldi	r22, 0x01	; 1
    d81a:	48 e0       	ldi	r20, 0x08	; 8
    d81c:	52 e1       	ldi	r21, 0x12	; 18
    d81e:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
			   lcd_printf(4,1,PSTR("[*]No    [#]Yes"));
    d822:	84 e0       	ldi	r24, 0x04	; 4
    d824:	61 e0       	ldi	r22, 0x01	; 1
    d826:	48 ef       	ldi	r20, 0xF8	; 248
    d828:	51 e1       	ldi	r21, 0x11	; 17
    d82a:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
               stSettingOperator=soIsSaveOperatorName;
    d82e:	84 e0       	ldi	r24, 0x04	; 4
    d830:	9a c1       	rjmp	.+820    	; 0xdb66 <FSettingOperator+0x566>
		       break;
		  case USER_CANCEL:
               stSettingOperator=soMenuOption; 
		       break;
          case USER_ENTRY:
		       lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
    d832:	84 e0       	ldi	r24, 0x04	; 4
    d834:	61 e0       	ldi	r22, 0x01	; 1
    d836:	43 ee       	ldi	r20, 0xE3	; 227
    d838:	51 e1       	ldi	r21, 0x11	; 17
    d83a:	27 c1       	rjmp	.+590    	; 0xda8a <FSettingOperator+0x48a>
		       break;
          case USER_NO_DATA:
		       lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    d83c:	84 e0       	ldi	r24, 0x04	; 4
    d83e:	61 e0       	ldi	r22, 0x01	; 1
    d840:	4e ec       	ldi	r20, 0xCE	; 206
    d842:	51 e1       	ldi	r21, 0x11	; 17
    d844:	22 c1       	rjmp	.+580    	; 0xda8a <FSettingOperator+0x48a>
		       break;
		  }
	      break;
     case soIsSaveOperatorName:
          KeyPressed=_key_scan(1);
    d846:	81 e0       	ldi	r24, 0x01	; 1
    d848:	0e 94 6d a6 	call	0x14cda	; 0x14cda <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
    d84c:	0e 94 ce a5 	call	0x14b9c	; 0x14b9c <_key_btn>
		  switch(KeyChar){
    d850:	83 32       	cpi	r24, 0x23	; 35
    d852:	09 f0       	breq	.+2      	; 0xd856 <FSettingOperator+0x256>
    d854:	51 c0       	rjmp	.+162    	; 0xd8f8 <FSettingOperator+0x2f8>
          case '*':
		       stSettingOperator=soMenuOption;
		       break;
    d856:	20 e0       	ldi	r18, 0x00	; 0
    d858:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    d85a:	8e 01       	movw	r16, r28
    d85c:	00 5f       	subi	r16, 0xF0	; 240
    d85e:	1f 4f       	sbci	r17, 0xFF	; 255
    d860:	f8 01       	movw	r30, r16
    d862:	e2 0f       	add	r30, r18
    d864:	f3 1f       	adc	r31, r19
    d866:	d9 01       	movw	r26, r18
    d868:	ae 56       	subi	r26, 0x6E	; 110
    d86a:	b7 4f       	sbci	r27, 0xF7	; 247
    d86c:	8c 91       	ld	r24, X
    d86e:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    d870:	2f 5f       	subi	r18, 0xFF	; 255
    d872:	3f 4f       	sbci	r19, 0xFF	; 255
    d874:	2f 30       	cpi	r18, 0x0F	; 15
    d876:	31 05       	cpc	r19, r1
    d878:	99 f7       	brne	.-26     	; 0xd860 <FSettingOperator+0x260>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    d87a:	1f 8e       	std	Y+31, r1	; 0x1f
          case '*':
		       stSettingOperator=soMenuOption;
		       break;
          case '#':
		       StrPosCopy(strFreeMessageLine1,strOperatorName,0,15);
               AddSpaceLag(strOperatorName,18); 
    d87c:	c8 01       	movw	r24, r16
    d87e:	62 e1       	ldi	r22, 0x12	; 18
    d880:	0e 94 d6 2d 	call	0x5bac	; 0x5bac <AddSpaceLag>
		       eeprom_write_block((const void*) &strOperatorName, (void*) &DefOperatorName,18);
    d884:	c8 01       	movw	r24, r16
    d886:	65 e1       	ldi	r22, 0x15	; 21
    d888:	70 e0       	ldi	r23, 0x00	; 0
    d88a:	42 e1       	ldi	r20, 0x12	; 18
    d88c:	50 e0       	ldi	r21, 0x00	; 0
    d88e:	0e 94 48 ad 	call	0x15a90	; 0x15a90 <__eewr_block_m128>
		       lcd_printf(3,1,PSTR("Saved "));
    d892:	83 e0       	ldi	r24, 0x03	; 3
    d894:	61 e0       	ldi	r22, 0x01	; 1
    d896:	47 ec       	ldi	r20, 0xC7	; 199
    d898:	51 e1       	ldi	r21, 0x11	; 17
    d89a:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
			   TimDisplay=0;
    d89e:	10 92 92 01 	sts	0x0192, r1
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    d8a2:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    d8a4:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    d8a6:	81 e0       	ldi	r24, 0x01	; 1
    d8a8:	80 93 bc 01 	sts	0x01BC, r24
    d8ac:	44 c1       	rjmp	.+648    	; 0xdb36 <FSettingOperator+0x536>
		       stSettingOperator=soDelayDisplaySaved;
		       break;
		  }	      
		  break;
     case soChangePasswordInit:
	      lcd_clear();
    d8ae:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
		  lcd_printf(1,1,PSTR("-Change Password-"));
    d8b2:	81 e0       	ldi	r24, 0x01	; 1
    d8b4:	61 e0       	ldi	r22, 0x01	; 1
    d8b6:	45 eb       	ldi	r20, 0xB5	; 181
    d8b8:	51 e1       	ldi	r21, 0x11	; 17
    d8ba:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  lcd_printf(2,1,PSTR("1.Supervisor"));
    d8be:	82 e0       	ldi	r24, 0x02	; 2
    d8c0:	61 e0       	ldi	r22, 0x01	; 1
    d8c2:	48 ea       	ldi	r20, 0xA8	; 168
    d8c4:	51 e1       	ldi	r21, 0x11	; 17
    d8c6:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  lcd_printf(3,1,PSTR("2.Administrator"));
    d8ca:	83 e0       	ldi	r24, 0x03	; 3
    d8cc:	61 e0       	ldi	r22, 0x01	; 1
    d8ce:	48 e9       	ldi	r20, 0x98	; 152
    d8d0:	51 e1       	ldi	r21, 0x11	; 17
    d8d2:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  lcd_printf(4,1,PSTR("[*]Back     "));
    d8d6:	84 e0       	ldi	r24, 0x04	; 4
    d8d8:	61 e0       	ldi	r22, 0x01	; 1
    d8da:	4b e8       	ldi	r20, 0x8B	; 139
    d8dc:	51 e1       	ldi	r21, 0x11	; 17
    d8de:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
          stSettingOperator=soChangePasswordInput; 
    d8e2:	86 e0       	ldi	r24, 0x06	; 6
    d8e4:	40 c1       	rjmp	.+640    	; 0xdb66 <FSettingOperator+0x566>
	      break;
     case soChangePasswordInput:
          KeyPressed=_key_scan(1);
    d8e6:	81 e0       	ldi	r24, 0x01	; 1
    d8e8:	0e 94 6d a6 	call	0x14cda	; 0x14cda <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
    d8ec:	0e 94 ce a5 	call	0x14b9c	; 0x14b9c <_key_btn>
		  switch(KeyChar){
    d8f0:	81 33       	cpi	r24, 0x31	; 49
    d8f2:	31 f0       	breq	.+12     	; 0xd900 <FSettingOperator+0x300>
    d8f4:	82 33       	cpi	r24, 0x32	; 50
    d8f6:	31 f0       	breq	.+12     	; 0xd904 <FSettingOperator+0x304>
    d8f8:	8a 32       	cpi	r24, 0x2A	; 42
    d8fa:	09 f0       	breq	.+2      	; 0xd8fe <FSettingOperator+0x2fe>
    d8fc:	5b c1       	rjmp	.+694    	; 0xdbb4 <FSettingOperator+0x5b4>
    d8fe:	53 c1       	rjmp	.+678    	; 0xdba6 <FSettingOperator+0x5a6>
		  case '1':		 
		       PassType=PT_SUPERVISOR;
    d900:	81 e0       	ldi	r24, 0x01	; 1
    d902:	01 c0       	rjmp	.+2      	; 0xd906 <FSettingOperator+0x306>
		       stSettingOperator=soOldPasswordDisplay;
		       break;
          case '2':		       
		       PassType=PT_ADMINISTRATOR;
    d904:	82 e0       	ldi	r24, 0x02	; 2
    d906:	80 93 1d 02 	sts	0x021D, r24
    d90a:	75 c0       	rjmp	.+234    	; 0xd9f6 <FSettingOperator+0x3f6>
		       stSettingOperator=soMenuOption;
		       break;
		  }	      
	      break;
     case soOldPasswordDisplay:
	 	  lcd_clear();
    d90c:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
	      if (PassType==PT_SUPERVISOR){
    d910:	80 91 1d 02 	lds	r24, 0x021D
    d914:	81 30       	cpi	r24, 0x01	; 1
    d916:	21 f4       	brne	.+8      	; 0xd920 <FSettingOperator+0x320>
		      lcd_printf(1,1,PSTR("-Supervisor-"));              
    d918:	61 e0       	ldi	r22, 0x01	; 1
    d91a:	4e e7       	ldi	r20, 0x7E	; 126
    d91c:	51 e1       	ldi	r21, 0x11	; 17
    d91e:	06 c0       	rjmp	.+12     	; 0xd92c <FSettingOperator+0x32c>
		  }else if (PassType==PT_ADMINISTRATOR){		       
    d920:	82 30       	cpi	r24, 0x02	; 2
    d922:	31 f4       	brne	.+12     	; 0xd930 <FSettingOperator+0x330>
		       lcd_printf(1,1,PSTR("-Administrator-"));			   
    d924:	81 e0       	ldi	r24, 0x01	; 1
    d926:	61 e0       	ldi	r22, 0x01	; 1
    d928:	4e e6       	ldi	r20, 0x6E	; 110
    d92a:	51 e1       	ldi	r21, 0x11	; 17
    d92c:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  }
		      lcd_printf(2,1,PSTR("Old:_"));
    d930:	82 e0       	ldi	r24, 0x02	; 2
    d932:	61 e0       	ldi	r22, 0x01	; 1
    d934:	48 e6       	ldi	r20, 0x68	; 104
    d936:	51 e1       	ldi	r21, 0x11	; 17
    d938:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
			  lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    d93c:	84 e0       	ldi	r24, 0x04	; 4
    d93e:	61 e0       	ldi	r22, 0x01	; 1
    d940:	43 e5       	ldi	r20, 0x53	; 83
    d942:	51 e1       	ldi	r21, 0x11	; 17
    d944:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>

          stSettingOperator=soOldPasswordEntry;
    d948:	88 e0       	ldi	r24, 0x08	; 8
    d94a:	0d c1       	rjmp	.+538    	; 0xdb66 <FSettingOperator+0x566>
	      break;
     case soOldPasswordEntry:
          uiResult=USER_NONE;
          uiResult=UserInput(UI_NUM_PASSWORD,2,5,strFreeMessageLine1,0,8);           
    d94c:	84 e0       	ldi	r24, 0x04	; 4
    d94e:	62 e0       	ldi	r22, 0x02	; 2
    d950:	45 e0       	ldi	r20, 0x05	; 5
    d952:	22 e9       	ldi	r18, 0x92	; 146
    d954:	38 e0       	ldi	r19, 0x08	; 8
    d956:	00 e0       	ldi	r16, 0x00	; 0
    d958:	10 e0       	ldi	r17, 0x00	; 0
    d95a:	f8 e0       	ldi	r31, 0x08	; 8
    d95c:	ef 2e       	mov	r14, r31
    d95e:	0e 94 dc 67 	call	0xcfb8	; 0xcfb8 <UserInput>
		  switch(uiResult){
    d962:	83 30       	cpi	r24, 0x03	; 3
    d964:	61 f0       	breq	.+24     	; 0xd97e <FSettingOperator+0x37e>
    d966:	84 30       	cpi	r24, 0x04	; 4
    d968:	20 f4       	brcc	.+8      	; 0xd972 <FSettingOperator+0x372>
    d96a:	81 30       	cpi	r24, 0x01	; 1
    d96c:	09 f0       	breq	.+2      	; 0xd970 <FSettingOperator+0x370>
    d96e:	22 c1       	rjmp	.+580    	; 0xdbb4 <FSettingOperator+0x5b4>
    d970:	1a c1       	rjmp	.+564    	; 0xdba6 <FSettingOperator+0x5a6>
    d972:	84 30       	cpi	r24, 0x04	; 4
    d974:	79 f0       	breq	.+30     	; 0xd994 <FSettingOperator+0x394>
    d976:	85 30       	cpi	r24, 0x05	; 5
    d978:	09 f0       	breq	.+2      	; 0xd97c <FSettingOperator+0x37c>
    d97a:	1c c1       	rjmp	.+568    	; 0xdbb4 <FSettingOperator+0x5b4>
    d97c:	10 c0       	rjmp	.+32     	; 0xd99e <FSettingOperator+0x39e>
		  case USER_OK:
		       lcd_printf(2,1,PSTR("New:_               "));
    d97e:	82 e0       	ldi	r24, 0x02	; 2
    d980:	61 e0       	ldi	r22, 0x01	; 1
    d982:	4e e3       	ldi	r20, 0x3E	; 62
    d984:	51 e1       	ldi	r21, 0x11	; 17
    d986:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
			   lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    d98a:	84 e0       	ldi	r24, 0x04	; 4
    d98c:	61 e0       	ldi	r22, 0x01	; 1
    d98e:	49 e2       	ldi	r20, 0x29	; 41
    d990:	51 e1       	ldi	r21, 0x11	; 17
    d992:	6e c0       	rjmp	.+220    	; 0xda70 <FSettingOperator+0x470>
		       break;
		  case USER_CANCEL:
               stSettingOperator=soMenuOption; 
		       break;
          case USER_ENTRY:
		       lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
    d994:	84 e0       	ldi	r24, 0x04	; 4
    d996:	61 e0       	ldi	r22, 0x01	; 1
    d998:	44 e1       	ldi	r20, 0x14	; 20
    d99a:	51 e1       	ldi	r21, 0x11	; 17
    d99c:	76 c0       	rjmp	.+236    	; 0xda8a <FSettingOperator+0x48a>
		       break;
          case USER_NO_DATA:
		       lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    d99e:	84 e0       	ldi	r24, 0x04	; 4
    d9a0:	61 e0       	ldi	r22, 0x01	; 1
    d9a2:	4f ef       	ldi	r20, 0xFF	; 255
    d9a4:	50 e1       	ldi	r21, 0x10	; 16
    d9a6:	71 c0       	rjmp	.+226    	; 0xda8a <FSettingOperator+0x48a>
		       break;
		  }
	      break;
     case soNewPasswordEntry1:
          uiResult=USER_NONE;
          uiResult=UserInput(UI_NUM_PASSWORD,2,5,strFreeMessageLine2,0,8);           
    d9a8:	84 e0       	ldi	r24, 0x04	; 4
    d9aa:	62 e0       	ldi	r22, 0x02	; 2
    d9ac:	45 e0       	ldi	r20, 0x05	; 5
    d9ae:	23 ea       	ldi	r18, 0xA3	; 163
    d9b0:	37 e0       	ldi	r19, 0x07	; 7
    d9b2:	00 e0       	ldi	r16, 0x00	; 0
    d9b4:	10 e0       	ldi	r17, 0x00	; 0
    d9b6:	e8 e0       	ldi	r30, 0x08	; 8
    d9b8:	ee 2e       	mov	r14, r30
    d9ba:	0e 94 dc 67 	call	0xcfb8	; 0xcfb8 <UserInput>
		  switch(uiResult){
    d9be:	83 30       	cpi	r24, 0x03	; 3
    d9c0:	61 f0       	breq	.+24     	; 0xd9da <FSettingOperator+0x3da>
    d9c2:	84 30       	cpi	r24, 0x04	; 4
    d9c4:	20 f4       	brcc	.+8      	; 0xd9ce <FSettingOperator+0x3ce>
    d9c6:	81 30       	cpi	r24, 0x01	; 1
    d9c8:	09 f0       	breq	.+2      	; 0xd9cc <FSettingOperator+0x3cc>
    d9ca:	f4 c0       	rjmp	.+488    	; 0xdbb4 <FSettingOperator+0x5b4>
    d9cc:	14 c0       	rjmp	.+40     	; 0xd9f6 <FSettingOperator+0x3f6>
    d9ce:	84 30       	cpi	r24, 0x04	; 4
    d9d0:	a1 f0       	breq	.+40     	; 0xd9fa <FSettingOperator+0x3fa>
    d9d2:	85 30       	cpi	r24, 0x05	; 5
    d9d4:	09 f0       	breq	.+2      	; 0xd9d8 <FSettingOperator+0x3d8>
    d9d6:	ee c0       	rjmp	.+476    	; 0xdbb4 <FSettingOperator+0x5b4>
    d9d8:	15 c0       	rjmp	.+42     	; 0xda04 <FSettingOperator+0x404>
		  case USER_OK:
		       lcd_printf(3,1,PSTR("New:_               "));
    d9da:	83 e0       	ldi	r24, 0x03	; 3
    d9dc:	61 e0       	ldi	r22, 0x01	; 1
    d9de:	4a ee       	ldi	r20, 0xEA	; 234
    d9e0:	50 e1       	ldi	r21, 0x10	; 16
    d9e2:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
			   lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    d9e6:	84 e0       	ldi	r24, 0x04	; 4
    d9e8:	61 e0       	ldi	r22, 0x01	; 1
    d9ea:	45 ed       	ldi	r20, 0xD5	; 213
    d9ec:	50 e1       	ldi	r21, 0x10	; 16
    d9ee:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		       stSettingOperator=soNewPasswordEntry2;
    d9f2:	8a e0       	ldi	r24, 0x0A	; 10
    d9f4:	b8 c0       	rjmp	.+368    	; 0xdb66 <FSettingOperator+0x566>
		       break;
		  case USER_CANCEL:		       
			   stSettingOperator=soOldPasswordDisplay;
    d9f6:	87 e0       	ldi	r24, 0x07	; 7
    d9f8:	b6 c0       	rjmp	.+364    	; 0xdb66 <FSettingOperator+0x566>
		       break;
          case USER_ENTRY:
		       lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
    d9fa:	84 e0       	ldi	r24, 0x04	; 4
    d9fc:	61 e0       	ldi	r22, 0x01	; 1
    d9fe:	40 ec       	ldi	r20, 0xC0	; 192
    da00:	50 e1       	ldi	r21, 0x10	; 16
    da02:	43 c0       	rjmp	.+134    	; 0xda8a <FSettingOperator+0x48a>
		       break;
          case USER_NO_DATA:
		       lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    da04:	84 e0       	ldi	r24, 0x04	; 4
    da06:	61 e0       	ldi	r22, 0x01	; 1
    da08:	4b ea       	ldi	r20, 0xAB	; 171
    da0a:	50 e1       	ldi	r21, 0x10	; 16
    da0c:	3e c0       	rjmp	.+124    	; 0xda8a <FSettingOperator+0x48a>
		       break;
		  }	      
	      break;
     case soNewPasswordEntry2:
          uiResult=USER_NONE;
          uiResult=UserInput(UI_NUM_PASSWORD,3,5,strFreeMessageLine3,0,8);           
    da0e:	84 e0       	ldi	r24, 0x04	; 4
    da10:	63 e0       	ldi	r22, 0x03	; 3
    da12:	45 e0       	ldi	r20, 0x05	; 5
    da14:	2c e1       	ldi	r18, 0x1C	; 28
    da16:	38 e0       	ldi	r19, 0x08	; 8
    da18:	00 e0       	ldi	r16, 0x00	; 0
    da1a:	10 e0       	ldi	r17, 0x00	; 0
    da1c:	78 e0       	ldi	r23, 0x08	; 8
    da1e:	e7 2e       	mov	r14, r23
    da20:	0e 94 dc 67 	call	0xcfb8	; 0xcfb8 <UserInput>
		  switch(uiResult){
    da24:	83 30       	cpi	r24, 0x03	; 3
    da26:	61 f0       	breq	.+24     	; 0xda40 <FSettingOperator+0x440>
    da28:	84 30       	cpi	r24, 0x04	; 4
    da2a:	20 f4       	brcc	.+8      	; 0xda34 <FSettingOperator+0x434>
    da2c:	81 30       	cpi	r24, 0x01	; 1
    da2e:	09 f0       	breq	.+2      	; 0xda32 <FSettingOperator+0x432>
    da30:	c1 c0       	rjmp	.+386    	; 0xdbb4 <FSettingOperator+0x5b4>
    da32:	12 c0       	rjmp	.+36     	; 0xda58 <FSettingOperator+0x458>
    da34:	84 30       	cpi	r24, 0x04	; 4
    da36:	01 f1       	breq	.+64     	; 0xda78 <FSettingOperator+0x478>
    da38:	85 30       	cpi	r24, 0x05	; 5
    da3a:	09 f0       	breq	.+2      	; 0xda3e <FSettingOperator+0x43e>
    da3c:	bb c0       	rjmp	.+374    	; 0xdbb4 <FSettingOperator+0x5b4>
    da3e:	21 c0       	rjmp	.+66     	; 0xda82 <FSettingOperator+0x482>
		  case USER_OK:
		       lcd_clear();
    da40:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
               lcd_printf(2,1,PSTR("Validating.."));
    da44:	82 e0       	ldi	r24, 0x02	; 2
    da46:	61 e0       	ldi	r22, 0x01	; 1
    da48:	4e e9       	ldi	r20, 0x9E	; 158
    da4a:	50 e1       	ldi	r21, 0x10	; 16
    da4c:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
			   TimDisplay=0;
    da50:	10 92 92 01 	sts	0x0192, r1
		       stSettingOperator=soDispValidatePassword;
    da54:	8b e0       	ldi	r24, 0x0B	; 11
    da56:	87 c0       	rjmp	.+270    	; 0xdb66 <FSettingOperator+0x566>
		       break;
		  case USER_CANCEL:
               lcd_clear();
    da58:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
               lcd_printf(2,1,PSTR("New:_               "));
    da5c:	82 e0       	ldi	r24, 0x02	; 2
    da5e:	61 e0       	ldi	r22, 0x01	; 1
    da60:	49 e8       	ldi	r20, 0x89	; 137
    da62:	50 e1       	ldi	r21, 0x10	; 16
    da64:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
			   lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    da68:	84 e0       	ldi	r24, 0x04	; 4
    da6a:	61 e0       	ldi	r22, 0x01	; 1
    da6c:	44 e7       	ldi	r20, 0x74	; 116
    da6e:	50 e1       	ldi	r21, 0x10	; 16
    da70:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		       stSettingOperator=soNewPasswordEntry1;
    da74:	89 e0       	ldi	r24, 0x09	; 9
    da76:	77 c0       	rjmp	.+238    	; 0xdb66 <FSettingOperator+0x566>
		       break;
          case USER_ENTRY:
		       lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
    da78:	84 e0       	ldi	r24, 0x04	; 4
    da7a:	61 e0       	ldi	r22, 0x01	; 1
    da7c:	4f e5       	ldi	r20, 0x5F	; 95
    da7e:	50 e1       	ldi	r21, 0x10	; 16
    da80:	04 c0       	rjmp	.+8      	; 0xda8a <FSettingOperator+0x48a>
		       break;
          case USER_NO_DATA:
		       lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    da82:	84 e0       	ldi	r24, 0x04	; 4
    da84:	61 e0       	ldi	r22, 0x01	; 1
    da86:	4a e4       	ldi	r20, 0x4A	; 74
    da88:	50 e1       	ldi	r21, 0x10	; 16
    da8a:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
    da8e:	92 c0       	rjmp	.+292    	; 0xdbb4 <FSettingOperator+0x5b4>
		       break;
		  }	      
	      break;
     case soDispValidatePassword:
	      if (TimDisplay>3)stSettingOperator=soValidatePassword;
    da90:	80 91 92 01 	lds	r24, 0x0192
    da94:	84 30       	cpi	r24, 0x04	; 4
    da96:	08 f4       	brcc	.+2      	; 0xda9a <FSettingOperator+0x49a>
    da98:	8d c0       	rjmp	.+282    	; 0xdbb4 <FSettingOperator+0x5b4>
    da9a:	8c e0       	ldi	r24, 0x0C	; 12
    da9c:	64 c0       	rjmp	.+200    	; 0xdb66 <FSettingOperator+0x566>
	      break;
     case soValidatePassword:
          if (PassType==PT_SUPERVISOR) eeprom_read_block((void*) &strPassword, (const void*) &DefSysPassword, 10);		      			   
    da9e:	80 91 1d 02 	lds	r24, 0x021D
    daa2:	81 30       	cpi	r24, 0x01	; 1
    daa4:	29 f4       	brne	.+10     	; 0xdab0 <FSettingOperator+0x4b0>
    daa6:	ce 01       	movw	r24, r28
    daa8:	01 96       	adiw	r24, 0x01	; 1
    daaa:	6b e0       	ldi	r22, 0x0B	; 11
    daac:	70 e0       	ldi	r23, 0x00	; 0
    daae:	06 c0       	rjmp	.+12     	; 0xdabc <FSettingOperator+0x4bc>
		  else 
		  if (PassType==PT_ADMINISTRATOR) eeprom_read_block((void*) &strPassword, (const void*) &DefSpvPassword, 10);    
    dab0:	82 30       	cpi	r24, 0x02	; 2
    dab2:	41 f4       	brne	.+16     	; 0xdac4 <FSettingOperator+0x4c4>
    dab4:	ce 01       	movw	r24, r28
    dab6:	01 96       	adiw	r24, 0x01	; 1
    dab8:	61 e0       	ldi	r22, 0x01	; 1
    daba:	70 e0       	ldi	r23, 0x00	; 0
    dabc:	4a e0       	ldi	r20, 0x0A	; 10
    dabe:	50 e0       	ldi	r21, 0x00	; 0
    dac0:	0e 94 30 ad 	call	0x15a60	; 0x15a60 <__eerd_block_m128>
		  
		  //Check Old Validity
		  if (strcmp(strPassword,strFreeMessageLine1)==0){//OldMessage Valid
    dac4:	ce 01       	movw	r24, r28
    dac6:	01 96       	adiw	r24, 0x01	; 1
    dac8:	62 e9       	ldi	r22, 0x92	; 146
    daca:	78 e0       	ldi	r23, 0x08	; 8
    dacc:	0e 94 e8 aa 	call	0x155d0	; 0x155d0 <strcmp>
    dad0:	00 97       	sbiw	r24, 0x00	; 0
    dad2:	09 f0       	breq	.+2      	; 0xdad6 <FSettingOperator+0x4d6>
    dad4:	4b c0       	rjmp	.+150    	; 0xdb6c <FSettingOperator+0x56c>
              if (strcmp(strFreeMessageLine2,strFreeMessageLine3)==0){
    dad6:	83 ea       	ldi	r24, 0xA3	; 163
    dad8:	97 e0       	ldi	r25, 0x07	; 7
    dada:	6c e1       	ldi	r22, 0x1C	; 28
    dadc:	78 e0       	ldi	r23, 0x08	; 8
    dade:	0e 94 e8 aa 	call	0x155d0	; 0x155d0 <strcmp>
    dae2:	00 97       	sbiw	r24, 0x00	; 0
    dae4:	51 f5       	brne	.+84     	; 0xdb3a <FSettingOperator+0x53a>
                  
			      if (PassType==PT_SUPERVISOR) eeprom_write_block((const void*) &strFreeMessageLine2, (void*) &DefSysPassword, 10);		      			   
    dae6:	80 91 1d 02 	lds	r24, 0x021D
    daea:	81 30       	cpi	r24, 0x01	; 1
    daec:	29 f4       	brne	.+10     	; 0xdaf8 <FSettingOperator+0x4f8>
    daee:	83 ea       	ldi	r24, 0xA3	; 163
    daf0:	97 e0       	ldi	r25, 0x07	; 7
    daf2:	6b e0       	ldi	r22, 0x0B	; 11
    daf4:	70 e0       	ldi	r23, 0x00	; 0
    daf6:	06 c0       	rjmp	.+12     	; 0xdb04 <FSettingOperator+0x504>
		          else 
		          if (PassType==PT_ADMINISTRATOR) eeprom_write_block((const void*) &strFreeMessageLine2, (void*) &DefSpvPassword, 10);    
    daf8:	82 30       	cpi	r24, 0x02	; 2
    dafa:	41 f4       	brne	.+16     	; 0xdb0c <FSettingOperator+0x50c>
    dafc:	83 ea       	ldi	r24, 0xA3	; 163
    dafe:	97 e0       	ldi	r25, 0x07	; 7
    db00:	61 e0       	ldi	r22, 0x01	; 1
    db02:	70 e0       	ldi	r23, 0x00	; 0
    db04:	4a e0       	ldi	r20, 0x0A	; 10
    db06:	50 e0       	ldi	r21, 0x00	; 0
    db08:	0e 94 48 ad 	call	0x15a90	; 0x15a90 <__eewr_block_m128>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    db0c:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    db0e:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    db10:	81 e0       	ldi	r24, 0x01	; 1
    db12:	80 93 bc 01 	sts	0x01BC, r24
			      if (PassType==PT_SUPERVISOR) eeprom_write_block((const void*) &strFreeMessageLine2, (void*) &DefSysPassword, 10);		      			   
		          else 
		          if (PassType==PT_ADMINISTRATOR) eeprom_write_block((const void*) &strFreeMessageLine2, (void*) &DefSpvPassword, 10);    

			      system_beep(1);
				  lcd_clear();
    db16:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
			      lcd_printf(2,1,PSTR("     Completed      "));
    db1a:	82 e0       	ldi	r24, 0x02	; 2
    db1c:	61 e0       	ldi	r22, 0x01	; 1
    db1e:	45 e3       	ldi	r20, 0x35	; 53
    db20:	50 e1       	ldi	r21, 0x10	; 16
    db22:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
			      lcd_printf(3,1,PSTR("   Password Saved   "));    
    db26:	83 e0       	ldi	r24, 0x03	; 3
    db28:	61 e0       	ldi	r22, 0x01	; 1
    db2a:	40 e2       	ldi	r20, 0x20	; 32
    db2c:	50 e1       	ldi	r21, 0x10	; 16
    db2e:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
				  TimDisplay=0;
    db32:	10 92 92 01 	sts	0x0192, r1
				  stSettingOperator=soDelayDisplaySaved;
    db36:	8e e0       	ldi	r24, 0x0E	; 14
    db38:	16 c0       	rjmp	.+44     	; 0xdb66 <FSettingOperator+0x566>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    db3a:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    db3c:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    db3e:	82 e0       	ldi	r24, 0x02	; 2
    db40:	80 93 bc 01 	sts	0x01BC, r24
			      lcd_printf(3,1,PSTR("   Password Saved   "));    
				  TimDisplay=0;
				  stSettingOperator=soDelayDisplaySaved;
			  }else {
			  system_beep(2);
		      TimDisplay=0;
    db44:	10 92 92 01 	sts	0x0192, r1
		      lcd_clear();
    db48:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
		      lcd_printf(2,1,PSTR("      ERROR         "));
    db4c:	82 e0       	ldi	r24, 0x02	; 2
    db4e:	61 e0       	ldi	r22, 0x01	; 1
    db50:	4b e0       	ldi	r20, 0x0B	; 11
    db52:	50 e1       	ldi	r21, 0x10	; 16
    db54:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		      lcd_printf(3,1,PSTR("Invalid New Password"));
    db58:	83 e0       	ldi	r24, 0x03	; 3
    db5a:	61 e0       	ldi	r22, 0x01	; 1
    db5c:	46 ef       	ldi	r20, 0xF6	; 246
    db5e:	5f e0       	ldi	r21, 0x0F	; 15
    db60:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		      stSettingOperator=soDisplayInvalidPassword;
    db64:	8d e0       	ldi	r24, 0x0D	; 13
    db66:	80 93 1e 02 	sts	0x021E, r24
    db6a:	24 c0       	rjmp	.+72     	; 0xdbb4 <FSettingOperator+0x5b4>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    db6c:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    db6e:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    db70:	82 e0       	ldi	r24, 0x02	; 2
    db72:	80 93 bc 01 	sts	0x01BC, r24
		      stSettingOperator=soDisplayInvalidPassword;
			  }
		  }else {
		   //InvalidOld Password
		   system_beep(2);
		   TimDisplay=0;
    db76:	10 92 92 01 	sts	0x0192, r1
		   lcd_clear();
    db7a:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
		   lcd_printf(2,1,PSTR("      ERROR         "));
    db7e:	82 e0       	ldi	r24, 0x02	; 2
    db80:	61 e0       	ldi	r22, 0x01	; 1
    db82:	41 ee       	ldi	r20, 0xE1	; 225
    db84:	5f e0       	ldi	r21, 0x0F	; 15
    db86:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		   lcd_printf(3,1,PSTR("Invalid Old Password"));
    db8a:	83 e0       	ldi	r24, 0x03	; 3
    db8c:	61 e0       	ldi	r22, 0x01	; 1
    db8e:	4c ec       	ldi	r20, 0xCC	; 204
    db90:	5f e0       	ldi	r21, 0x0F	; 15
    db92:	e6 cf       	rjmp	.-52     	; 0xdb60 <FSettingOperator+0x560>
		   stSettingOperator=soDisplayInvalidPassword;
		   }
	      break;
     case soDisplayInvalidPassword:
	      if (TimDisplay>6)stSettingOperator=soMenuOption;
    db94:	80 91 92 01 	lds	r24, 0x0192
    db98:	87 30       	cpi	r24, 0x07	; 7
    db9a:	60 f0       	brcs	.+24     	; 0xdbb4 <FSettingOperator+0x5b4>
    db9c:	04 c0       	rjmp	.+8      	; 0xdba6 <FSettingOperator+0x5a6>
	      break;
     case soDelayDisplaySaved:
	      if (TimDisplay>4)stSettingOperator=soMenuOption;
    db9e:	80 91 92 01 	lds	r24, 0x0192
    dba2:	85 30       	cpi	r24, 0x05	; 5
    dba4:	38 f0       	brcs	.+14     	; 0xdbb4 <FSettingOperator+0x5b4>
    dba6:	10 92 1e 02 	sts	0x021E, r1
    dbaa:	04 c0       	rjmp	.+8      	; 0xdbb4 <FSettingOperator+0x5b4>
	      break;
	 case soExitSettingOperator:
	      stSettingOperator=soMenuOption;
    dbac:	10 92 1e 02 	sts	0x021E, r1
    dbb0:	81 e0       	ldi	r24, 0x01	; 1
    dbb2:	01 c0       	rjmp	.+2      	; 0xdbb6 <FSettingOperator+0x5b6>
    dbb4:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
	      break;
	 }
     return Result;
}
    dbb6:	e5 96       	adiw	r28, 0x35	; 53
    dbb8:	0f b6       	in	r0, 0x3f	; 63
    dbba:	f8 94       	cli
    dbbc:	de bf       	out	0x3e, r29	; 62
    dbbe:	0f be       	out	0x3f, r0	; 63
    dbc0:	cd bf       	out	0x3d, r28	; 61
    dbc2:	cf 91       	pop	r28
    dbc4:	df 91       	pop	r29
    dbc6:	1f 91       	pop	r17
    dbc8:	0f 91       	pop	r16
    dbca:	ef 90       	pop	r14
    dbcc:	08 95       	ret

0000dbce <FSettingProduct>:

void menu_product(){

}

char FSettingProduct(){//Using strDescription
    dbce:	6f 92       	push	r6
    dbd0:	7f 92       	push	r7
    dbd2:	8f 92       	push	r8
    dbd4:	9f 92       	push	r9
    dbd6:	af 92       	push	r10
    dbd8:	bf 92       	push	r11
    dbda:	cf 92       	push	r12
    dbdc:	df 92       	push	r13
    dbde:	ef 92       	push	r14
    dbe0:	ff 92       	push	r15
    dbe2:	0f 93       	push	r16
    dbe4:	1f 93       	push	r17
    dbe6:	df 93       	push	r29
    dbe8:	cf 93       	push	r28
    dbea:	cd b7       	in	r28, 0x3d	; 61
    dbec:	de b7       	in	r29, 0x3e	; 62
    dbee:	a1 97       	sbiw	r28, 0x21	; 33
    dbf0:	0f b6       	in	r0, 0x3f	; 63
    dbf2:	f8 94       	cli
    dbf4:	de bf       	out	0x3e, r29	; 62
    dbf6:	0f be       	out	0x3f, r0	; 63
    dbf8:	cd bf       	out	0x3d, r28	; 61
     char i;//,x,y;
	 char strProductName[13],lcdteks[20];
	 char Result=MENU_NONE;
	 
     Result=MENU_NONE;
     switch(stMenuProduct){
    dbfa:	80 91 21 02 	lds	r24, 0x0221
    dbfe:	83 30       	cpi	r24, 0x03	; 3
    dc00:	09 f4       	brne	.+2      	; 0xdc04 <FSettingProduct+0x36>
    dc02:	f9 c0       	rjmp	.+498    	; 0xddf6 <FSettingProduct+0x228>
    dc04:	84 30       	cpi	r24, 0x04	; 4
    dc06:	38 f4       	brcc	.+14     	; 0xdc16 <FSettingProduct+0x48>
    dc08:	81 30       	cpi	r24, 0x01	; 1
    dc0a:	09 f4       	brne	.+2      	; 0xdc0e <FSettingProduct+0x40>
    dc0c:	70 c0       	rjmp	.+224    	; 0xdcee <FSettingProduct+0x120>
    dc0e:	82 30       	cpi	r24, 0x02	; 2
    dc10:	08 f0       	brcs	.+2      	; 0xdc14 <FSettingProduct+0x46>
    dc12:	80 c0       	rjmp	.+256    	; 0xdd14 <FSettingProduct+0x146>
    dc14:	0a c0       	rjmp	.+20     	; 0xdc2a <FSettingProduct+0x5c>
    dc16:	85 30       	cpi	r24, 0x05	; 5
    dc18:	09 f4       	brne	.+2      	; 0xdc1c <FSettingProduct+0x4e>
    dc1a:	79 c1       	rjmp	.+754    	; 0xdf0e <FSettingProduct+0x340>
    dc1c:	85 30       	cpi	r24, 0x05	; 5
    dc1e:	08 f4       	brcc	.+2      	; 0xdc22 <FSettingProduct+0x54>
    dc20:	94 c1       	rjmp	.+808    	; 0xdf4a <FSettingProduct+0x37c>
    dc22:	86 30       	cpi	r24, 0x06	; 6
    dc24:	09 f0       	breq	.+2      	; 0xdc28 <FSettingProduct+0x5a>
    dc26:	b7 c1       	rjmp	.+878    	; 0xdf96 <FSettingProduct+0x3c8>
    dc28:	b2 c1       	rjmp	.+868    	; 0xdf8e <FSettingProduct+0x3c0>
	 case mpInitProduct:
	      //DisplayProductName
		  lcd_clear();
    dc2a:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
    dc2e:	7c eb       	ldi	r23, 0xBC	; 188
    dc30:	c7 2e       	mov	r12, r23
    dc32:	70 e0       	ldi	r23, 0x00	; 0
    dc34:	d7 2e       	mov	r13, r23
    dc36:	61 e0       	ldi	r22, 0x01	; 1
    dc38:	e6 2e       	mov	r14, r22
    dc3a:	f1 2c       	mov	r15, r1
		  //lcd_printf(1,1,PSTR("Product:"));
	      for(i=0;i<6;i++){//234 
	          eeprom_read_block((void*) &strProductName, (const void*) &DefProductName[i], 13);
    dc3c:	4e 01       	movw	r8, r28
    dc3e:	08 94       	sec
    dc40:	81 1c       	adc	r8, r1
    dc42:	91 1c       	adc	r9, r1
	          sprintf_P(lcdteks,PSTR("%d)%s"),(i+1),strProductName);
    dc44:	5e e0       	ldi	r21, 0x0E	; 14
    dc46:	a5 2e       	mov	r10, r21
    dc48:	b1 2c       	mov	r11, r1
    dc4a:	ac 0e       	add	r10, r28
    dc4c:	bd 1e       	adc	r11, r29
    dc4e:	46 ea       	ldi	r20, 0xA6	; 166
    dc50:	64 2e       	mov	r6, r20
    dc52:	43 e1       	ldi	r20, 0x13	; 19
    dc54:	74 2e       	mov	r7, r20
			  lcd_print((((i)%4)+1),(((i)/4)*10)+1,lcdteks);
    dc56:	0a e0       	ldi	r16, 0x0A	; 10
	 
     Result=MENU_NONE;
     switch(stMenuProduct){
	 case mpInitProduct:
	      //DisplayProductName
		  lcd_clear();
    dc58:	1e 2d       	mov	r17, r14
    dc5a:	11 50       	subi	r17, 0x01	; 1
		  //lcd_printf(1,1,PSTR("Product:"));
	      for(i=0;i<6;i++){//234 
	          eeprom_read_block((void*) &strProductName, (const void*) &DefProductName[i], 13);
    dc5c:	c4 01       	movw	r24, r8
    dc5e:	b6 01       	movw	r22, r12
    dc60:	4d e0       	ldi	r20, 0x0D	; 13
    dc62:	50 e0       	ldi	r21, 0x00	; 0
    dc64:	0e 94 30 ad 	call	0x15a60	; 0x15a60 <__eerd_block_m128>
	          sprintf_P(lcdteks,PSTR("%d)%s"),(i+1),strProductName);
    dc68:	8d b7       	in	r24, 0x3d	; 61
    dc6a:	9e b7       	in	r25, 0x3e	; 62
    dc6c:	08 97       	sbiw	r24, 0x08	; 8
    dc6e:	0f b6       	in	r0, 0x3f	; 63
    dc70:	f8 94       	cli
    dc72:	9e bf       	out	0x3e, r25	; 62
    dc74:	0f be       	out	0x3f, r0	; 63
    dc76:	8d bf       	out	0x3d, r24	; 61
    dc78:	ed b7       	in	r30, 0x3d	; 61
    dc7a:	fe b7       	in	r31, 0x3e	; 62
    dc7c:	31 96       	adiw	r30, 0x01	; 1
    dc7e:	ad b7       	in	r26, 0x3d	; 61
    dc80:	be b7       	in	r27, 0x3e	; 62
    dc82:	12 96       	adiw	r26, 0x02	; 2
    dc84:	bc 92       	st	X, r11
    dc86:	ae 92       	st	-X, r10
    dc88:	11 97       	sbiw	r26, 0x01	; 1
    dc8a:	73 82       	std	Z+3, r7	; 0x03
    dc8c:	62 82       	std	Z+2, r6	; 0x02
    dc8e:	f5 82       	std	Z+5, r15	; 0x05
    dc90:	e4 82       	std	Z+4, r14	; 0x04
    dc92:	97 82       	std	Z+7, r9	; 0x07
    dc94:	86 82       	std	Z+6, r8	; 0x06
    dc96:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
			  lcd_print((((i)%4)+1),(((i)/4)*10)+1,lcdteks);
    dc9a:	8d b7       	in	r24, 0x3d	; 61
    dc9c:	9e b7       	in	r25, 0x3e	; 62
    dc9e:	08 96       	adiw	r24, 0x08	; 8
    dca0:	0f b6       	in	r0, 0x3f	; 63
    dca2:	f8 94       	cli
    dca4:	9e bf       	out	0x3e, r25	; 62
    dca6:	0f be       	out	0x3f, r0	; 63
    dca8:	8d bf       	out	0x3d, r24	; 61
    dcaa:	61 2f       	mov	r22, r17
    dcac:	66 95       	lsr	r22
    dcae:	66 95       	lsr	r22
    dcb0:	60 9f       	mul	r22, r16
    dcb2:	b0 01       	movw	r22, r0
    dcb4:	11 24       	eor	r1, r1
    dcb6:	6f 5f       	subi	r22, 0xFF	; 255
    dcb8:	13 70       	andi	r17, 0x03	; 3
    dcba:	81 2f       	mov	r24, r17
    dcbc:	8f 5f       	subi	r24, 0xFF	; 255
    dcbe:	a5 01       	movw	r20, r10
    dcc0:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
    dcc4:	ad e0       	ldi	r26, 0x0D	; 13
    dcc6:	b0 e0       	ldi	r27, 0x00	; 0
    dcc8:	ca 0e       	add	r12, r26
    dcca:	db 1e       	adc	r13, r27
    dccc:	08 94       	sec
    dcce:	e1 1c       	adc	r14, r1
    dcd0:	f1 1c       	adc	r15, r1
     switch(stMenuProduct){
	 case mpInitProduct:
	      //DisplayProductName
		  lcd_clear();
		  //lcd_printf(1,1,PSTR("Product:"));
	      for(i=0;i<6;i++){//234 
    dcd2:	ba e0       	ldi	r27, 0x0A	; 10
    dcd4:	cb 16       	cp	r12, r27
    dcd6:	b1 e0       	ldi	r27, 0x01	; 1
    dcd8:	db 06       	cpc	r13, r27
    dcda:	09 f0       	breq	.+2      	; 0xdcde <FSettingProduct+0x110>
    dcdc:	bd cf       	rjmp	.-134    	; 0xdc58 <FSettingProduct+0x8a>
	          eeprom_read_block((void*) &strProductName, (const void*) &DefProductName[i], 13);
	          sprintf_P(lcdteks,PSTR("%d)%s"),(i+1),strProductName);
			  lcd_print((((i)%4)+1),(((i)/4)*10)+1,lcdteks);
		  }
		  lcd_printf(4,11,PSTR("*)Back"));
    dcde:	84 e0       	ldi	r24, 0x04	; 4
    dce0:	6b e0       	ldi	r22, 0x0B	; 11
    dce2:	4f e9       	ldi	r20, 0x9F	; 159
    dce4:	53 e1       	ldi	r21, 0x13	; 19
    dce6:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
          stMenuProduct=mpChangeProduct;
    dcea:	81 e0       	ldi	r24, 0x01	; 1
    dcec:	4a c1       	rjmp	.+660    	; 0xdf82 <FSettingProduct+0x3b4>
	      break;
     case mpChangeProduct:
		  KeyPressed=_key_scan(1);
    dcee:	81 e0       	ldi	r24, 0x01	; 1
    dcf0:	0e 94 6d a6 	call	0x14cda	; 0x14cda <_key_scan>
    dcf4:	18 2f       	mov	r17, r24
		  KeyChar=_key_btn(KeyPressed);
    dcf6:	0e 94 ce a5 	call	0x14b9c	; 0x14b9c <_key_btn>
		  if ((KeyChar>='1')&&(KeyChar<='6')){
    dcfa:	81 53       	subi	r24, 0x31	; 49
    dcfc:	86 30       	cpi	r24, 0x06	; 6
    dcfe:	28 f4       	brcc	.+10     	; 0xdd0a <FSettingProduct+0x13c>
		      ProdID=KeyChar-'1';
    dd00:	80 93 20 02 	sts	0x0220, r24
			  stMenuProduct=mpDispPrice;
    dd04:	82 e0       	ldi	r24, 0x02	; 2
    dd06:	80 93 21 02 	sts	0x0221, r24
		  }
		  if (KeyPressed==_KEY_CANCEL){
    dd0a:	17 3e       	cpi	r17, 0xE7	; 231
    dd0c:	09 f0       	breq	.+2      	; 0xdd10 <FSettingProduct+0x142>
    dd0e:	43 c1       	rjmp	.+646    	; 0xdf96 <FSettingProduct+0x3c8>
		      stMenuProduct=mpExitMenuProduct;
    dd10:	86 e0       	ldi	r24, 0x06	; 6
    dd12:	37 c1       	rjmp	.+622    	; 0xdf82 <FSettingProduct+0x3b4>
		  }
	      break;
     case mpDispPrice:
	 	  eeprom_read_block((void*) &strProductName, (const void*) &DefProductName[ProdID], 13);
    dd14:	60 91 20 02 	lds	r22, 0x0220
    dd18:	8d e0       	ldi	r24, 0x0D	; 13
    dd1a:	68 9f       	mul	r22, r24
    dd1c:	b0 01       	movw	r22, r0
    dd1e:	11 24       	eor	r1, r1
    dd20:	64 54       	subi	r22, 0x44	; 68
    dd22:	7f 4f       	sbci	r23, 0xFF	; 255
    dd24:	7e 01       	movw	r14, r28
    dd26:	08 94       	sec
    dd28:	e1 1c       	adc	r14, r1
    dd2a:	f1 1c       	adc	r15, r1
    dd2c:	c7 01       	movw	r24, r14
    dd2e:	4d e0       	ldi	r20, 0x0D	; 13
    dd30:	50 e0       	ldi	r21, 0x00	; 0
    dd32:	0e 94 30 ad 	call	0x15a60	; 0x15a60 <__eerd_block_m128>
		  eeprom_read_block((void*) &strPrice, (const void*) &DefProductPrice[ProdID], 9);
    dd36:	3e e9       	ldi	r19, 0x9E	; 158
    dd38:	c3 2e       	mov	r12, r19
    dd3a:	35 e0       	ldi	r19, 0x05	; 5
    dd3c:	d3 2e       	mov	r13, r19
    dd3e:	60 91 20 02 	lds	r22, 0x0220
    dd42:	89 e0       	ldi	r24, 0x09	; 9
    dd44:	68 9f       	mul	r22, r24
    dd46:	b0 01       	movw	r22, r0
    dd48:	11 24       	eor	r1, r1
    dd4a:	6a 57       	subi	r22, 0x7A	; 122
    dd4c:	7f 4f       	sbci	r23, 0xFF	; 255
    dd4e:	c6 01       	movw	r24, r12
    dd50:	49 e0       	ldi	r20, 0x09	; 9
    dd52:	50 e0       	ldi	r21, 0x00	; 0
    dd54:	0e 94 30 ad 	call	0x15a60	; 0x15a60 <__eerd_block_m128>
		  sprintf_P(lcdteks,PSTR("1)%s"),strProductName);
    dd58:	00 d0       	rcall	.+0      	; 0xdd5a <FSettingProduct+0x18c>
    dd5a:	00 d0       	rcall	.+0      	; 0xdd5c <FSettingProduct+0x18e>
    dd5c:	00 d0       	rcall	.+0      	; 0xdd5e <FSettingProduct+0x190>
    dd5e:	ed b7       	in	r30, 0x3d	; 61
    dd60:	fe b7       	in	r31, 0x3e	; 62
    dd62:	31 96       	adiw	r30, 0x01	; 1
    dd64:	8e 01       	movw	r16, r28
    dd66:	02 5f       	subi	r16, 0xF2	; 242
    dd68:	1f 4f       	sbci	r17, 0xFF	; 255
    dd6a:	ad b7       	in	r26, 0x3d	; 61
    dd6c:	be b7       	in	r27, 0x3e	; 62
    dd6e:	12 96       	adiw	r26, 0x02	; 2
    dd70:	1c 93       	st	X, r17
    dd72:	0e 93       	st	-X, r16
    dd74:	11 97       	sbiw	r26, 0x01	; 1
    dd76:	8a e9       	ldi	r24, 0x9A	; 154
    dd78:	93 e1       	ldi	r25, 0x13	; 19
    dd7a:	93 83       	std	Z+3, r25	; 0x03
    dd7c:	82 83       	std	Z+2, r24	; 0x02
    dd7e:	f5 82       	std	Z+5, r15	; 0x05
    dd80:	e4 82       	std	Z+4, r14	; 0x04
    dd82:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
		  lcd_clear();lcd_print(1,1,lcdteks);
    dd86:	8d b7       	in	r24, 0x3d	; 61
    dd88:	9e b7       	in	r25, 0x3e	; 62
    dd8a:	06 96       	adiw	r24, 0x06	; 6
    dd8c:	0f b6       	in	r0, 0x3f	; 63
    dd8e:	f8 94       	cli
    dd90:	9e bf       	out	0x3e, r25	; 62
    dd92:	0f be       	out	0x3f, r0	; 63
    dd94:	8d bf       	out	0x3d, r24	; 61
    dd96:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
    dd9a:	81 e0       	ldi	r24, 0x01	; 1
    dd9c:	61 e0       	ldi	r22, 0x01	; 1
    dd9e:	a8 01       	movw	r20, r16
    dda0:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
		  sprintf_P(lcdteks,PSTR("2)%s"),strPrice);
    dda4:	00 d0       	rcall	.+0      	; 0xdda6 <FSettingProduct+0x1d8>
    dda6:	00 d0       	rcall	.+0      	; 0xdda8 <FSettingProduct+0x1da>
    dda8:	00 d0       	rcall	.+0      	; 0xddaa <FSettingProduct+0x1dc>
    ddaa:	ed b7       	in	r30, 0x3d	; 61
    ddac:	fe b7       	in	r31, 0x3e	; 62
    ddae:	31 96       	adiw	r30, 0x01	; 1
    ddb0:	ad b7       	in	r26, 0x3d	; 61
    ddb2:	be b7       	in	r27, 0x3e	; 62
    ddb4:	12 96       	adiw	r26, 0x02	; 2
    ddb6:	1c 93       	st	X, r17
    ddb8:	0e 93       	st	-X, r16
    ddba:	11 97       	sbiw	r26, 0x01	; 1
    ddbc:	85 e9       	ldi	r24, 0x95	; 149
    ddbe:	93 e1       	ldi	r25, 0x13	; 19
    ddc0:	93 83       	std	Z+3, r25	; 0x03
    ddc2:	82 83       	std	Z+2, r24	; 0x02
    ddc4:	d5 82       	std	Z+5, r13	; 0x05
    ddc6:	c4 82       	std	Z+4, r12	; 0x04
    ddc8:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
		  lcd_print(2,1,lcdteks);
    ddcc:	8d b7       	in	r24, 0x3d	; 61
    ddce:	9e b7       	in	r25, 0x3e	; 62
    ddd0:	06 96       	adiw	r24, 0x06	; 6
    ddd2:	0f b6       	in	r0, 0x3f	; 63
    ddd4:	f8 94       	cli
    ddd6:	9e bf       	out	0x3e, r25	; 62
    ddd8:	0f be       	out	0x3f, r0	; 63
    ddda:	8d bf       	out	0x3d, r24	; 61
    dddc:	82 e0       	ldi	r24, 0x02	; 2
    ddde:	61 e0       	ldi	r22, 0x01	; 1
    dde0:	a8 01       	movw	r20, r16
    dde2:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
		  lcd_printf(4,1,PSTR("*)Back       "));
    dde6:	84 e0       	ldi	r24, 0x04	; 4
    dde8:	61 e0       	ldi	r22, 0x01	; 1
    ddea:	47 e8       	ldi	r20, 0x87	; 135
    ddec:	53 e1       	ldi	r21, 0x13	; 19
    ddee:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  stMenuProduct=mpIsEdit;
    ddf2:	83 e0       	ldi	r24, 0x03	; 3
    ddf4:	c6 c0       	rjmp	.+396    	; 0xdf82 <FSettingProduct+0x3b4>
	      break;
     case mpIsEdit:
		  KeyPressed=_key_scan(1);
    ddf6:	81 e0       	ldi	r24, 0x01	; 1
    ddf8:	0e 94 6d a6 	call	0x14cda	; 0x14cda <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
    ddfc:	0e 94 ce a5 	call	0x14b9c	; 0x14b9c <_key_btn>
		  if (KeyChar=='*'){
    de00:	8a 32       	cpi	r24, 0x2A	; 42
    de02:	09 f4       	brne	.+2      	; 0xde06 <FSettingProduct+0x238>
    de04:	9f c0       	rjmp	.+318    	; 0xdf44 <FSettingProduct+0x376>
		      stMenuProduct=mpInitProduct;
		  }else
		  if (KeyChar=='1'){
    de06:	81 33       	cpi	r24, 0x31	; 49
    de08:	09 f0       	breq	.+2      	; 0xde0c <FSettingProduct+0x23e>
    de0a:	4a c0       	rjmp	.+148    	; 0xdea0 <FSettingProduct+0x2d2>
		      eeprom_read_block((void*) &strProductName, (const void*) &DefProductName[ProdID], 13);
    de0c:	60 91 20 02 	lds	r22, 0x0220
    de10:	8d e0       	ldi	r24, 0x0D	; 13
    de12:	68 9f       	mul	r22, r24
    de14:	b0 01       	movw	r22, r0
    de16:	11 24       	eor	r1, r1
    de18:	64 54       	subi	r22, 0x44	; 68
    de1a:	7f 4f       	sbci	r23, 0xFF	; 255
    de1c:	8e 01       	movw	r16, r28
    de1e:	0f 5f       	subi	r16, 0xFF	; 255
    de20:	1f 4f       	sbci	r17, 0xFF	; 255
    de22:	c8 01       	movw	r24, r16
    de24:	4d e0       	ldi	r20, 0x0D	; 13
    de26:	50 e0       	ldi	r21, 0x00	; 0
    de28:	0e 94 30 ad 	call	0x15a60	; 0x15a60 <__eerd_block_m128>
		      sprintf_P(lcdteks,PSTR("Old:%s"),strProductName);
    de2c:	00 d0       	rcall	.+0      	; 0xde2e <FSettingProduct+0x260>
    de2e:	00 d0       	rcall	.+0      	; 0xde30 <FSettingProduct+0x262>
    de30:	00 d0       	rcall	.+0      	; 0xde32 <FSettingProduct+0x264>
    de32:	ed b7       	in	r30, 0x3d	; 61
    de34:	fe b7       	in	r31, 0x3e	; 62
    de36:	31 96       	adiw	r30, 0x01	; 1
    de38:	2e e0       	ldi	r18, 0x0E	; 14
    de3a:	e2 2e       	mov	r14, r18
    de3c:	f1 2c       	mov	r15, r1
    de3e:	ec 0e       	add	r14, r28
    de40:	fd 1e       	adc	r15, r29
    de42:	ad b7       	in	r26, 0x3d	; 61
    de44:	be b7       	in	r27, 0x3e	; 62
    de46:	12 96       	adiw	r26, 0x02	; 2
    de48:	fc 92       	st	X, r15
    de4a:	ee 92       	st	-X, r14
    de4c:	11 97       	sbiw	r26, 0x01	; 1
    de4e:	80 e8       	ldi	r24, 0x80	; 128
    de50:	93 e1       	ldi	r25, 0x13	; 19
    de52:	93 83       	std	Z+3, r25	; 0x03
    de54:	82 83       	std	Z+2, r24	; 0x02
    de56:	15 83       	std	Z+5, r17	; 0x05
    de58:	04 83       	std	Z+4, r16	; 0x04
    de5a:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
			  lcd_printf(1,1,PSTR("Edit Product Name   "));
    de5e:	8d b7       	in	r24, 0x3d	; 61
    de60:	9e b7       	in	r25, 0x3e	; 62
    de62:	06 96       	adiw	r24, 0x06	; 6
    de64:	0f b6       	in	r0, 0x3f	; 63
    de66:	f8 94       	cli
    de68:	9e bf       	out	0x3e, r25	; 62
    de6a:	0f be       	out	0x3f, r0	; 63
    de6c:	8d bf       	out	0x3d, r24	; 61
    de6e:	81 e0       	ldi	r24, 0x01	; 1
    de70:	61 e0       	ldi	r22, 0x01	; 1
    de72:	4b e6       	ldi	r20, 0x6B	; 107
    de74:	53 e1       	ldi	r21, 0x13	; 19
    de76:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		       lcd_print(2,1,lcdteks);
    de7a:	82 e0       	ldi	r24, 0x02	; 2
    de7c:	61 e0       	ldi	r22, 0x01	; 1
    de7e:	a7 01       	movw	r20, r14
    de80:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
			  lcd_printf(3,1,PSTR("New:_"));
    de84:	83 e0       	ldi	r24, 0x03	; 3
    de86:	61 e0       	ldi	r22, 0x01	; 1
    de88:	45 e6       	ldi	r20, 0x65	; 101
    de8a:	53 e1       	ldi	r21, 0x13	; 19
    de8c:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		      lcd_printf(4,1,PSTR("*)Back    #)OK      "));
    de90:	84 e0       	ldi	r24, 0x04	; 4
    de92:	61 e0       	ldi	r22, 0x01	; 1
    de94:	40 e5       	ldi	r20, 0x50	; 80
    de96:	53 e1       	ldi	r21, 0x13	; 19
    de98:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		      stMenuProduct=mpEditProductName;
    de9c:	85 e0       	ldi	r24, 0x05	; 5
    de9e:	71 c0       	rjmp	.+226    	; 0xdf82 <FSettingProduct+0x3b4>
		  }else
		  if (KeyChar=='2'){
    dea0:	82 33       	cpi	r24, 0x32	; 50
    dea2:	09 f0       	breq	.+2      	; 0xdea6 <FSettingProduct+0x2d8>
    dea4:	78 c0       	rjmp	.+240    	; 0xdf96 <FSettingProduct+0x3c8>
		      uiResult=USER_NONE;
		      sprintf_P(lcdteks,PSTR("Old:%s"),strPrice);
    dea6:	00 d0       	rcall	.+0      	; 0xdea8 <FSettingProduct+0x2da>
    dea8:	00 d0       	rcall	.+0      	; 0xdeaa <FSettingProduct+0x2dc>
    deaa:	00 d0       	rcall	.+0      	; 0xdeac <FSettingProduct+0x2de>
    deac:	ed b7       	in	r30, 0x3d	; 61
    deae:	fe b7       	in	r31, 0x3e	; 62
    deb0:	31 96       	adiw	r30, 0x01	; 1
    deb2:	8e 01       	movw	r16, r28
    deb4:	02 5f       	subi	r16, 0xF2	; 242
    deb6:	1f 4f       	sbci	r17, 0xFF	; 255
    deb8:	ad b7       	in	r26, 0x3d	; 61
    deba:	be b7       	in	r27, 0x3e	; 62
    debc:	12 96       	adiw	r26, 0x02	; 2
    debe:	1c 93       	st	X, r17
    dec0:	0e 93       	st	-X, r16
    dec2:	11 97       	sbiw	r26, 0x01	; 1
    dec4:	89 e4       	ldi	r24, 0x49	; 73
    dec6:	93 e1       	ldi	r25, 0x13	; 19
    dec8:	93 83       	std	Z+3, r25	; 0x03
    deca:	82 83       	std	Z+2, r24	; 0x02
    decc:	8e e9       	ldi	r24, 0x9E	; 158
    dece:	95 e0       	ldi	r25, 0x05	; 5
    ded0:	95 83       	std	Z+5, r25	; 0x05
    ded2:	84 83       	std	Z+4, r24	; 0x04
    ded4:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
		       lcd_print(2,1,lcdteks);
    ded8:	8d b7       	in	r24, 0x3d	; 61
    deda:	9e b7       	in	r25, 0x3e	; 62
    dedc:	06 96       	adiw	r24, 0x06	; 6
    dede:	0f b6       	in	r0, 0x3f	; 63
    dee0:	f8 94       	cli
    dee2:	9e bf       	out	0x3e, r25	; 62
    dee4:	0f be       	out	0x3f, r0	; 63
    dee6:	8d bf       	out	0x3d, r24	; 61
    dee8:	82 e0       	ldi	r24, 0x02	; 2
    deea:	61 e0       	ldi	r22, 0x01	; 1
    deec:	a8 01       	movw	r20, r16
    deee:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
			  lcd_printf(3,1,PSTR("New:_"));
    def2:	83 e0       	ldi	r24, 0x03	; 3
    def4:	61 e0       	ldi	r22, 0x01	; 1
    def6:	43 e4       	ldi	r20, 0x43	; 67
    def8:	53 e1       	ldi	r21, 0x13	; 19
    defa:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		      lcd_printf(4,1,PSTR("*)Back    #)OK      "));
    defe:	84 e0       	ldi	r24, 0x04	; 4
    df00:	61 e0       	ldi	r22, 0x01	; 1
    df02:	4e e2       	ldi	r20, 0x2E	; 46
    df04:	53 e1       	ldi	r21, 0x13	; 19
    df06:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		      stMenuProduct=mpEditPrice;
    df0a:	84 e0       	ldi	r24, 0x04	; 4
    df0c:	3a c0       	rjmp	.+116    	; 0xdf82 <FSettingProduct+0x3b4>
		  }
	      break;
     case mpEditProductName:
	      uiResult=UserInput(UI_ALPHANUM_R,3,5,strDescription,0,10);
    df0e:	83 e0       	ldi	r24, 0x03	; 3
    df10:	63 e0       	ldi	r22, 0x03	; 3
    df12:	45 e0       	ldi	r20, 0x05	; 5
    df14:	2c e0       	ldi	r18, 0x0C	; 12
    df16:	38 e0       	ldi	r19, 0x08	; 8
    df18:	00 e0       	ldi	r16, 0x00	; 0
    df1a:	10 e0       	ldi	r17, 0x00	; 0
    df1c:	9a e0       	ldi	r25, 0x0A	; 10
    df1e:	e9 2e       	mov	r14, r25
    df20:	0e 94 dc 67 	call	0xcfb8	; 0xcfb8 <UserInput>
		  if (uiResult==USER_OK){
    df24:	83 30       	cpi	r24, 0x03	; 3
    df26:	81 f5       	brne	.+96     	; 0xdf88 <FSettingProduct+0x3ba>
		      eeprom_write_block((const void*)&strDescription,(void*)&DefProductName[ProdID], 13);
    df28:	60 91 20 02 	lds	r22, 0x0220
    df2c:	8d e0       	ldi	r24, 0x0D	; 13
    df2e:	68 9f       	mul	r22, r24
    df30:	b0 01       	movw	r22, r0
    df32:	11 24       	eor	r1, r1
    df34:	64 54       	subi	r22, 0x44	; 68
    df36:	7f 4f       	sbci	r23, 0xFF	; 255
    df38:	8c e0       	ldi	r24, 0x0C	; 12
    df3a:	98 e0       	ldi	r25, 0x08	; 8
    df3c:	4d e0       	ldi	r20, 0x0D	; 13
    df3e:	50 e0       	ldi	r21, 0x00	; 0
    df40:	0e 94 48 ad 	call	0x15a90	; 0x15a90 <__eewr_block_m128>
		      stMenuProduct=mpInitProduct;
    df44:	10 92 21 02 	sts	0x0221, r1
    df48:	26 c0       	rjmp	.+76     	; 0xdf96 <FSettingProduct+0x3c8>
			  }
		  else
		  if (uiResult==USER_CANCEL)stMenuProduct=mpDispPrice;
	      break;
     case mpEditPrice:
	      uiResult=UserInput(UI_NUMBER_R,3,5,strPrice,0,7);
    df4a:	81 e0       	ldi	r24, 0x01	; 1
    df4c:	63 e0       	ldi	r22, 0x03	; 3
    df4e:	45 e0       	ldi	r20, 0x05	; 5
    df50:	2e e9       	ldi	r18, 0x9E	; 158
    df52:	35 e0       	ldi	r19, 0x05	; 5
    df54:	00 e0       	ldi	r16, 0x00	; 0
    df56:	10 e0       	ldi	r17, 0x00	; 0
    df58:	b7 e0       	ldi	r27, 0x07	; 7
    df5a:	eb 2e       	mov	r14, r27
    df5c:	0e 94 dc 67 	call	0xcfb8	; 0xcfb8 <UserInput>
		  if (uiResult==USER_OK){
    df60:	83 30       	cpi	r24, 0x03	; 3
    df62:	91 f4       	brne	.+36     	; 0xdf88 <FSettingProduct+0x3ba>
		      eeprom_write_block((const void*)&strPrice,(void*)&DefProductPrice[ProdID], 9);
    df64:	60 91 20 02 	lds	r22, 0x0220
    df68:	89 e0       	ldi	r24, 0x09	; 9
    df6a:	68 9f       	mul	r22, r24
    df6c:	b0 01       	movw	r22, r0
    df6e:	11 24       	eor	r1, r1
    df70:	6a 57       	subi	r22, 0x7A	; 122
    df72:	7f 4f       	sbci	r23, 0xFF	; 255
    df74:	8e e9       	ldi	r24, 0x9E	; 158
    df76:	95 e0       	ldi	r25, 0x05	; 5
    df78:	49 e0       	ldi	r20, 0x09	; 9
    df7a:	50 e0       	ldi	r21, 0x00	; 0
    df7c:	0e 94 48 ad 	call	0x15a90	; 0x15a90 <__eewr_block_m128>
		      stMenuProduct=mpDispPrice;//stMenuProduct=mpInit;
    df80:	82 e0       	ldi	r24, 0x02	; 2
    df82:	80 93 21 02 	sts	0x0221, r24
    df86:	07 c0       	rjmp	.+14     	; 0xdf96 <FSettingProduct+0x3c8>
			  }
		  else
		  if (uiResult==USER_CANCEL)stMenuProduct=mpDispPrice;
    df88:	81 30       	cpi	r24, 0x01	; 1
    df8a:	29 f4       	brne	.+10     	; 0xdf96 <FSettingProduct+0x3c8>
    df8c:	f9 cf       	rjmp	.-14     	; 0xdf80 <FSettingProduct+0x3b2>
	      break;
     case mpExitMenuProduct:
	      stMenuProduct=mpInitProduct;
    df8e:	10 92 21 02 	sts	0x0221, r1
    df92:	81 e0       	ldi	r24, 0x01	; 1
    df94:	01 c0       	rjmp	.+2      	; 0xdf98 <FSettingProduct+0x3ca>
    df96:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
	      break;
	 }
   return Result;
}
    df98:	a1 96       	adiw	r28, 0x21	; 33
    df9a:	0f b6       	in	r0, 0x3f	; 63
    df9c:	f8 94       	cli
    df9e:	de bf       	out	0x3e, r29	; 62
    dfa0:	0f be       	out	0x3f, r0	; 63
    dfa2:	cd bf       	out	0x3d, r28	; 61
    dfa4:	cf 91       	pop	r28
    dfa6:	df 91       	pop	r29
    dfa8:	1f 91       	pop	r17
    dfaa:	0f 91       	pop	r16
    dfac:	ff 90       	pop	r15
    dfae:	ef 90       	pop	r14
    dfb0:	df 90       	pop	r13
    dfb2:	cf 90       	pop	r12
    dfb4:	bf 90       	pop	r11
    dfb6:	af 90       	pop	r10
    dfb8:	9f 90       	pop	r9
    dfba:	8f 90       	pop	r8
    dfbc:	7f 90       	pop	r7
    dfbe:	6f 90       	pop	r6
    dfc0:	08 95       	ret

0000dfc2 <FMenuSettingFooter>:
	 }
   //_menu_header();   
   return Result;
}

char FMenuSettingFooter(){
    dfc2:	ef 92       	push	r14
    dfc4:	0f 93       	push	r16
    dfc6:	1f 93       	push	r17
    dfc8:	df 93       	push	r29
    dfca:	cf 93       	push	r28
    dfcc:	cd b7       	in	r28, 0x3d	; 61
    dfce:	de b7       	in	r29, 0x3e	; 62
    dfd0:	c6 54       	subi	r28, 0x46	; 70
    dfd2:	d0 40       	sbci	r29, 0x00	; 0
    dfd4:	0f b6       	in	r0, 0x3f	; 63
    dfd6:	f8 94       	cli
    dfd8:	de bf       	out	0x3e, r29	; 62
    dfda:	0f be       	out	0x3f, r0	; 63
    dfdc:	cd bf       	out	0x3d, r28	; 61
	 char strHeaderFooter[50];
	 char KeyChar;
	 
	 Result=MENU_NONE;
     
	 switch (stSettingHeader){
    dfde:	80 91 44 02 	lds	r24, 0x0244
    dfe2:	84 30       	cpi	r24, 0x04	; 4
    dfe4:	09 f4       	brne	.+2      	; 0xdfe8 <FMenuSettingFooter+0x26>
    dfe6:	3b c1       	rjmp	.+630    	; 0xe25e <FMenuSettingFooter+0x29c>
    dfe8:	85 30       	cpi	r24, 0x05	; 5
    dfea:	40 f4       	brcc	.+16     	; 0xdffc <FMenuSettingFooter+0x3a>
    dfec:	81 30       	cpi	r24, 0x01	; 1
    dfee:	79 f1       	breq	.+94     	; 0xe04e <FMenuSettingFooter+0x8c>
    dff0:	81 30       	cpi	r24, 0x01	; 1
    dff2:	88 f0       	brcs	.+34     	; 0xe016 <FMenuSettingFooter+0x54>
    dff4:	82 30       	cpi	r24, 0x02	; 2
    dff6:	09 f0       	breq	.+2      	; 0xdffa <FMenuSettingFooter+0x38>
    dff8:	7c c1       	rjmp	.+760    	; 0xe2f2 <FMenuSettingFooter+0x330>
    dffa:	74 c0       	rjmp	.+232    	; 0xe0e4 <FMenuSettingFooter+0x122>
    dffc:	86 30       	cpi	r24, 0x06	; 6
    dffe:	09 f4       	brne	.+2      	; 0xe002 <FMenuSettingFooter+0x40>
    e000:	d3 c0       	rjmp	.+422    	; 0xe1a8 <FMenuSettingFooter+0x1e6>
    e002:	86 30       	cpi	r24, 0x06	; 6
    e004:	08 f4       	brcc	.+2      	; 0xe008 <FMenuSettingFooter+0x46>
    e006:	bd c0       	rjmp	.+378    	; 0xe182 <FMenuSettingFooter+0x1c0>
    e008:	87 30       	cpi	r24, 0x07	; 7
    e00a:	09 f4       	brne	.+2      	; 0xe00e <FMenuSettingFooter+0x4c>
    e00c:	36 c1       	rjmp	.+620    	; 0xe27a <FMenuSettingFooter+0x2b8>
    e00e:	88 30       	cpi	r24, 0x08	; 8
    e010:	09 f0       	breq	.+2      	; 0xe014 <FMenuSettingFooter+0x52>
    e012:	6f c1       	rjmp	.+734    	; 0xe2f2 <FMenuSettingFooter+0x330>
    e014:	6a c1       	rjmp	.+724    	; 0xe2ea <FMenuSettingFooter+0x328>
	 case shInitHeader:
	      lcd_clear();
    e016:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
		  lcd_printf(1,1,PSTR("1)Footer1  3)Footer3"));
    e01a:	81 e0       	ldi	r24, 0x01	; 1
    e01c:	61 e0       	ldi	r22, 0x01	; 1
    e01e:	4d e9       	ldi	r20, 0x9D	; 157
    e020:	55 e1       	ldi	r21, 0x15	; 21
    e022:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  lcd_printf(2,1,PSTR("2)Footer2  4)Footer4"));
    e026:	82 e0       	ldi	r24, 0x02	; 2
    e028:	61 e0       	ldi	r22, 0x01	; 1
    e02a:	48 e8       	ldi	r20, 0x88	; 136
    e02c:	55 e1       	ldi	r21, 0x15	; 21
    e02e:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  lcd_printf(3,1,PSTR("                    "));
    e032:	83 e0       	ldi	r24, 0x03	; 3
    e034:	61 e0       	ldi	r22, 0x01	; 1
    e036:	43 e7       	ldi	r20, 0x73	; 115
    e038:	55 e1       	ldi	r21, 0x15	; 21
    e03a:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  lcd_printf(4,1,PSTR("*)Exit              "));
    e03e:	84 e0       	ldi	r24, 0x04	; 4
    e040:	61 e0       	ldi	r22, 0x01	; 1
    e042:	4e e5       	ldi	r20, 0x5E	; 94
    e044:	55 e1       	ldi	r21, 0x15	; 21
    e046:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  stSettingHeader=shHeaderSelect;
    e04a:	81 e0       	ldi	r24, 0x01	; 1
    e04c:	10 c1       	rjmp	.+544    	; 0xe26e <FMenuSettingFooter+0x2ac>
	      break;
      case shHeaderSelect:
	      KeyChar=_key_btn(_key_scan(1));
    e04e:	81 e0       	ldi	r24, 0x01	; 1
    e050:	0e 94 6d a6 	call	0x14cda	; 0x14cda <_key_scan>
    e054:	0e 94 ce a5 	call	0x14b9c	; 0x14b9c <_key_btn>
    e058:	e8 2e       	mov	r14, r24
		  if ((KeyChar>='1')&&(KeyChar<='6')){
    e05a:	81 53       	subi	r24, 0x31	; 49
    e05c:	86 30       	cpi	r24, 0x06	; 6
    e05e:	e0 f5       	brcc	.+120    	; 0xe0d8 <FMenuSettingFooter+0x116>
		       HeaderIdx=KeyChar-'1';//
    e060:	80 93 43 02 	sts	0x0243, r24
			   lcd_clear();
    e064:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
			   sprintf_P(lcdteks,PSTR("Edit Footer%d "),HeaderIdx+1);
    e068:	00 d0       	rcall	.+0      	; 0xe06a <FMenuSettingFooter+0xa8>
    e06a:	00 d0       	rcall	.+0      	; 0xe06c <FMenuSettingFooter+0xaa>
    e06c:	00 d0       	rcall	.+0      	; 0xe06e <FMenuSettingFooter+0xac>
    e06e:	ed b7       	in	r30, 0x3d	; 61
    e070:	fe b7       	in	r31, 0x3e	; 62
    e072:	31 96       	adiw	r30, 0x01	; 1
    e074:	8e 01       	movw	r16, r28
    e076:	0f 5f       	subi	r16, 0xFF	; 255
    e078:	1f 4f       	sbci	r17, 0xFF	; 255
    e07a:	ad b7       	in	r26, 0x3d	; 61
    e07c:	be b7       	in	r27, 0x3e	; 62
    e07e:	12 96       	adiw	r26, 0x02	; 2
    e080:	1c 93       	st	X, r17
    e082:	0e 93       	st	-X, r16
    e084:	11 97       	sbiw	r26, 0x01	; 1
    e086:	8f e4       	ldi	r24, 0x4F	; 79
    e088:	95 e1       	ldi	r25, 0x15	; 21
    e08a:	93 83       	std	Z+3, r25	; 0x03
    e08c:	82 83       	std	Z+2, r24	; 0x02
    e08e:	80 91 43 02 	lds	r24, 0x0243
    e092:	90 e0       	ldi	r25, 0x00	; 0
    e094:	01 96       	adiw	r24, 0x01	; 1
    e096:	95 83       	std	Z+5, r25	; 0x05
    e098:	84 83       	std	Z+4, r24	; 0x04
    e09a:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
			   lcd_print(1,1,lcdteks);
    e09e:	8d b7       	in	r24, 0x3d	; 61
    e0a0:	9e b7       	in	r25, 0x3e	; 62
    e0a2:	06 96       	adiw	r24, 0x06	; 6
    e0a4:	0f b6       	in	r0, 0x3f	; 63
    e0a6:	f8 94       	cli
    e0a8:	9e bf       	out	0x3e, r25	; 62
    e0aa:	0f be       	out	0x3f, r0	; 63
    e0ac:	8d bf       	out	0x3d, r24	; 61
    e0ae:	81 e0       	ldi	r24, 0x01	; 1
    e0b0:	61 e0       	ldi	r22, 0x01	; 1
    e0b2:	a8 01       	movw	r20, r16
    e0b4:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
			   lcd_printf(4,1,PSTR("[*]Back  [#]OK"));
    e0b8:	84 e0       	ldi	r24, 0x04	; 4
    e0ba:	61 e0       	ldi	r22, 0x01	; 1
    e0bc:	40 e4       	ldi	r20, 0x40	; 64
    e0be:	55 e1       	ldi	r21, 0x15	; 21
    e0c0:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
    e0c4:	ec ee       	ldi	r30, 0xEC	; 236
    e0c6:	f3 e0       	ldi	r31, 0x03	; 3
}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
	     strMemory[i]=data;
    e0c8:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    e0ca:	95 e0       	ldi	r25, 0x05	; 5
    e0cc:	ed 37       	cpi	r30, 0x7D	; 125
    e0ce:	f9 07       	cpc	r31, r25
    e0d0:	d9 f7       	brne	.-10     	; 0xe0c8 <FMenuSettingFooter+0x106>
			   lcd_clear();
			   sprintf_P(lcdteks,PSTR("Edit Footer%d "),HeaderIdx+1);
			   lcd_print(1,1,lcdteks);
			   lcd_printf(4,1,PSTR("[*]Back  [#]OK"));
			   FillChar(PrintBuffer,sizeof(PrintBuffer),0);
			   stSettingHeader=shEditHeader1;
    e0d2:	82 e0       	ldi	r24, 0x02	; 2
    e0d4:	80 93 44 02 	sts	0x0244, r24
		  }
		  if(KeyChar=='*')stSettingHeader=shExitSettingHeader;
    e0d8:	aa e2       	ldi	r26, 0x2A	; 42
    e0da:	ea 16       	cp	r14, r26
    e0dc:	09 f0       	breq	.+2      	; 0xe0e0 <FMenuSettingFooter+0x11e>
    e0de:	09 c1       	rjmp	.+530    	; 0xe2f2 <FMenuSettingFooter+0x330>
    e0e0:	88 e0       	ldi	r24, 0x08	; 8
    e0e2:	c5 c0       	rjmp	.+394    	; 0xe26e <FMenuSettingFooter+0x2ac>
	      break;
     case shEditHeader1:
          //uiResult=UserInput(UI_ALPHANUM_R,2,1,strFreeMessageLine1,0,20);
		  uiResult=UserInput(UI_ALPHANUM_R,2,1,PrintBuffer,0,40);
    e0e4:	83 e0       	ldi	r24, 0x03	; 3
    e0e6:	62 e0       	ldi	r22, 0x02	; 2
    e0e8:	41 e0       	ldi	r20, 0x01	; 1
    e0ea:	2c ee       	ldi	r18, 0xEC	; 236
    e0ec:	33 e0       	ldi	r19, 0x03	; 3
    e0ee:	00 e0       	ldi	r16, 0x00	; 0
    e0f0:	10 e0       	ldi	r17, 0x00	; 0
    e0f2:	e8 e2       	ldi	r30, 0x28	; 40
    e0f4:	ee 2e       	mov	r14, r30
    e0f6:	0e 94 dc 67 	call	0xcfb8	; 0xcfb8 <UserInput>
		  if (uiResult==USER_OK){
    e0fa:	83 30       	cpi	r24, 0x03	; 3
    e0fc:	f1 f5       	brne	.+124    	; 0xe17a <FMenuSettingFooter+0x1b8>
			  lcd_clear();
    e0fe:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
			  AddSpaceLag(PrintBuffer,40);
    e102:	8c ee       	ldi	r24, 0xEC	; 236
    e104:	93 e0       	ldi	r25, 0x03	; 3
    e106:	68 e2       	ldi	r22, 0x28	; 40
    e108:	0e 94 d6 2d 	call	0x5bac	; 0x5bac <AddSpaceLag>
    e10c:	20 e0       	ldi	r18, 0x00	; 0
    e10e:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    e110:	f9 01       	movw	r30, r18
    e112:	ee 56       	subi	r30, 0x6E	; 110
    e114:	f7 4f       	sbci	r31, 0xF7	; 247
    e116:	d9 01       	movw	r26, r18
    e118:	a4 51       	subi	r26, 0x14	; 20
    e11a:	bc 4f       	sbci	r27, 0xFC	; 252
    e11c:	8c 91       	ld	r24, X
    e11e:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    e120:	2f 5f       	subi	r18, 0xFF	; 255
    e122:	3f 4f       	sbci	r19, 0xFF	; 255
    e124:	24 31       	cpi	r18, 0x14	; 20
    e126:	31 05       	cpc	r19, r1
    e128:	99 f7       	brne	.-26     	; 0xe110 <FMenuSettingFooter+0x14e>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    e12a:	10 92 a6 08 	sts	0x08A6, r1
    e12e:	e0 e0       	ldi	r30, 0x00	; 0
    e130:	f4 e0       	ldi	r31, 0x04	; 4
    e132:	a3 ea       	ldi	r26, 0xA3	; 163
    e134:	b7 e0       	ldi	r27, 0x07	; 7
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    e136:	81 91       	ld	r24, Z+
    e138:	8d 93       	st	X+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    e13a:	84 e0       	ldi	r24, 0x04	; 4
    e13c:	e4 31       	cpi	r30, 0x14	; 20
    e13e:	f8 07       	cpc	r31, r24
    e140:	d1 f7       	brne	.-12     	; 0xe136 <FMenuSettingFooter+0x174>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    e142:	10 92 b7 07 	sts	0x07B7, r1
			  lcd_clear();
			  AddSpaceLag(PrintBuffer,40);
			  StrPosCopy(PrintBuffer,strFreeMessageLine1,0,20);
			  StrPosCopy(PrintBuffer,strFreeMessageLine2,20,20);

			  lcd_print(1,1,strFreeMessageLine1);			  
    e146:	81 e0       	ldi	r24, 0x01	; 1
    e148:	61 e0       	ldi	r22, 0x01	; 1
    e14a:	42 e9       	ldi	r20, 0x92	; 146
    e14c:	58 e0       	ldi	r21, 0x08	; 8
    e14e:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
			  lcd_print(2,1,strFreeMessageLine2);			  
    e152:	82 e0       	ldi	r24, 0x02	; 2
    e154:	61 e0       	ldi	r22, 0x01	; 1
    e156:	43 ea       	ldi	r20, 0xA3	; 163
    e158:	57 e0       	ldi	r21, 0x07	; 7
    e15a:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
			  
			  lcd_printf(3,1,PSTR("Align Center?"));
    e15e:	83 e0       	ldi	r24, 0x03	; 3
    e160:	61 e0       	ldi	r22, 0x01	; 1
    e162:	42 e3       	ldi	r20, 0x32	; 50
    e164:	55 e1       	ldi	r21, 0x15	; 21
    e166:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
			  lcd_printf(4,1,PSTR("[*]No  [#]Yes"));
    e16a:	84 e0       	ldi	r24, 0x04	; 4
    e16c:	61 e0       	ldi	r22, 0x01	; 1
    e16e:	44 e2       	ldi	r20, 0x24	; 36
    e170:	55 e1       	ldi	r21, 0x15	; 21
    e172:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		      stSettingHeader=shIsAlignCenter;
    e176:	85 e0       	ldi	r24, 0x05	; 5
    e178:	7a c0       	rjmp	.+244    	; 0xe26e <FMenuSettingFooter+0x2ac>
		  }
		  else
		  if (uiResult==USER_CANCEL)stSettingHeader=shInitHeader;
    e17a:	81 30       	cpi	r24, 0x01	; 1
    e17c:	09 f0       	breq	.+2      	; 0xe180 <FMenuSettingFooter+0x1be>
    e17e:	b9 c0       	rjmp	.+370    	; 0xe2f2 <FMenuSettingFooter+0x330>
    e180:	b1 c0       	rjmp	.+354    	; 0xe2e4 <FMenuSettingFooter+0x322>
	      break;
     case shIsAlignCenter:
	      KeyChar=_key_btn(_key_scan(1));
    e182:	81 e0       	ldi	r24, 0x01	; 1
    e184:	0e 94 6d a6 	call	0x14cda	; 0x14cda <_key_scan>
    e188:	0e 94 ce a5 	call	0x14b9c	; 0x14b9c <_key_btn>
          if(KeyChar=='#'){
    e18c:	83 32       	cpi	r24, 0x23	; 35
    e18e:	39 f4       	brne	.+14     	; 0xe19e <FMenuSettingFooter+0x1dc>
		      //AlignCenter			  
			  StrAlignCenter(PrintBuffer,40);
    e190:	8c ee       	ldi	r24, 0xEC	; 236
    e192:	93 e0       	ldi	r25, 0x03	; 3
    e194:	68 e2       	ldi	r22, 0x28	; 40
    e196:	70 e0       	ldi	r23, 0x00	; 0
    e198:	0e 94 d0 2f 	call	0x5fa0	; 0x5fa0 <StrAlignCenter>
    e19c:	03 c0       	rjmp	.+6      	; 0xe1a4 <FMenuSettingFooter+0x1e2>
			  stSettingHeader=shIsSaveHeader;
		  } else if(KeyChar=='*')stSettingHeader=shIsSaveHeader;		 
    e19e:	8a 32       	cpi	r24, 0x2A	; 42
    e1a0:	09 f0       	breq	.+2      	; 0xe1a4 <FMenuSettingFooter+0x1e2>
    e1a2:	a7 c0       	rjmp	.+334    	; 0xe2f2 <FMenuSettingFooter+0x330>
    e1a4:	86 e0       	ldi	r24, 0x06	; 6
    e1a6:	63 c0       	rjmp	.+198    	; 0xe26e <FMenuSettingFooter+0x2ac>
	      break;
     case shIsSaveHeader:
	      lcd_clear(); 
    e1a8:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
    e1ac:	20 e0       	ldi	r18, 0x00	; 0
    e1ae:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    e1b0:	f9 01       	movw	r30, r18
    e1b2:	ee 56       	subi	r30, 0x6E	; 110
    e1b4:	f7 4f       	sbci	r31, 0xF7	; 247
    e1b6:	d9 01       	movw	r26, r18
    e1b8:	a4 51       	subi	r26, 0x14	; 20
    e1ba:	bc 4f       	sbci	r27, 0xFC	; 252
    e1bc:	8c 91       	ld	r24, X
    e1be:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    e1c0:	2f 5f       	subi	r18, 0xFF	; 255
    e1c2:	3f 4f       	sbci	r19, 0xFF	; 255
    e1c4:	24 31       	cpi	r18, 0x14	; 20
    e1c6:	31 05       	cpc	r19, r1
    e1c8:	99 f7       	brne	.-26     	; 0xe1b0 <FMenuSettingFooter+0x1ee>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    e1ca:	10 92 a6 08 	sts	0x08A6, r1
    e1ce:	e0 e0       	ldi	r30, 0x00	; 0
    e1d0:	f4 e0       	ldi	r31, 0x04	; 4
    e1d2:	a3 ea       	ldi	r26, 0xA3	; 163
    e1d4:	b7 e0       	ldi	r27, 0x07	; 7
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    e1d6:	81 91       	ld	r24, Z+
    e1d8:	8d 93       	st	X+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    e1da:	94 e0       	ldi	r25, 0x04	; 4
    e1dc:	e4 31       	cpi	r30, 0x14	; 20
    e1de:	f9 07       	cpc	r31, r25
    e1e0:	d1 f7       	brne	.-12     	; 0xe1d6 <FMenuSettingFooter+0x214>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    e1e2:	10 92 b7 07 	sts	0x07B7, r1
	      break;
     case shIsSaveHeader:
	      lcd_clear(); 
		  StrPosCopy(PrintBuffer,strFreeMessageLine1,0,20);
		  StrPosCopy(PrintBuffer,strFreeMessageLine2,20,20);
          lcd_print(1,1,strFreeMessageLine1);
    e1e6:	81 e0       	ldi	r24, 0x01	; 1
    e1e8:	61 e0       	ldi	r22, 0x01	; 1
    e1ea:	42 e9       	ldi	r20, 0x92	; 146
    e1ec:	58 e0       	ldi	r21, 0x08	; 8
    e1ee:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
		  lcd_print(2,1,strFreeMessageLine2);
    e1f2:	82 e0       	ldi	r24, 0x02	; 2
    e1f4:	61 e0       	ldi	r22, 0x01	; 1
    e1f6:	43 ea       	ldi	r20, 0xA3	; 163
    e1f8:	57 e0       	ldi	r21, 0x07	; 7
    e1fa:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
		  sprintf_P(lcdteks,PSTR("Save Footer%d ?"),HeaderIdx+1);
    e1fe:	00 d0       	rcall	.+0      	; 0xe200 <FMenuSettingFooter+0x23e>
    e200:	00 d0       	rcall	.+0      	; 0xe202 <FMenuSettingFooter+0x240>
    e202:	00 d0       	rcall	.+0      	; 0xe204 <FMenuSettingFooter+0x242>
    e204:	ed b7       	in	r30, 0x3d	; 61
    e206:	fe b7       	in	r31, 0x3e	; 62
    e208:	31 96       	adiw	r30, 0x01	; 1
    e20a:	8e 01       	movw	r16, r28
    e20c:	0f 5f       	subi	r16, 0xFF	; 255
    e20e:	1f 4f       	sbci	r17, 0xFF	; 255
    e210:	ad b7       	in	r26, 0x3d	; 61
    e212:	be b7       	in	r27, 0x3e	; 62
    e214:	12 96       	adiw	r26, 0x02	; 2
    e216:	1c 93       	st	X, r17
    e218:	0e 93       	st	-X, r16
    e21a:	11 97       	sbiw	r26, 0x01	; 1
    e21c:	84 e1       	ldi	r24, 0x14	; 20
    e21e:	95 e1       	ldi	r25, 0x15	; 21
    e220:	93 83       	std	Z+3, r25	; 0x03
    e222:	82 83       	std	Z+2, r24	; 0x02
    e224:	80 91 43 02 	lds	r24, 0x0243
    e228:	90 e0       	ldi	r25, 0x00	; 0
    e22a:	01 96       	adiw	r24, 0x01	; 1
    e22c:	95 83       	std	Z+5, r25	; 0x05
    e22e:	84 83       	std	Z+4, r24	; 0x04
    e230:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
		  lcd_print(3,1,lcdteks);
    e234:	8d b7       	in	r24, 0x3d	; 61
    e236:	9e b7       	in	r25, 0x3e	; 62
    e238:	06 96       	adiw	r24, 0x06	; 6
    e23a:	0f b6       	in	r0, 0x3f	; 63
    e23c:	f8 94       	cli
    e23e:	9e bf       	out	0x3e, r25	; 62
    e240:	0f be       	out	0x3f, r0	; 63
    e242:	8d bf       	out	0x3d, r24	; 61
    e244:	83 e0       	ldi	r24, 0x03	; 3
    e246:	61 e0       	ldi	r22, 0x01	; 1
    e248:	a8 01       	movw	r20, r16
    e24a:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
		  lcd_printf(4,1,PSTR("[*]No [#]Yes"));		      
    e24e:	84 e0       	ldi	r24, 0x04	; 4
    e250:	61 e0       	ldi	r22, 0x01	; 1
    e252:	47 e0       	ldi	r20, 0x07	; 7
    e254:	55 e1       	ldi	r21, 0x15	; 21
    e256:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
	      stSettingHeader=shSaveHeaderQuestions;      
    e25a:	84 e0       	ldi	r24, 0x04	; 4
    e25c:	08 c0       	rjmp	.+16     	; 0xe26e <FMenuSettingFooter+0x2ac>
	      break;       
     case shSaveHeaderQuestions:
          KeyChar=_key_btn(_key_scan(1));
    e25e:	81 e0       	ldi	r24, 0x01	; 1
    e260:	0e 94 6d a6 	call	0x14cda	; 0x14cda <_key_scan>
    e264:	0e 94 ce a5 	call	0x14b9c	; 0x14b9c <_key_btn>
	      if(KeyChar=='#')stSettingHeader=shSaveHeader;
    e268:	83 32       	cpi	r24, 0x23	; 35
    e26a:	21 f4       	brne	.+8      	; 0xe274 <FMenuSettingFooter+0x2b2>
    e26c:	87 e0       	ldi	r24, 0x07	; 7
    e26e:	80 93 44 02 	sts	0x0244, r24
    e272:	3f c0       	rjmp	.+126    	; 0xe2f2 <FMenuSettingFooter+0x330>
		  else
          if(KeyChar=='*')stSettingHeader=shInitHeader;
    e274:	8a 32       	cpi	r24, 0x2A	; 42
    e276:	e9 f5       	brne	.+122    	; 0xe2f2 <FMenuSettingFooter+0x330>
    e278:	35 c0       	rjmp	.+106    	; 0xe2e4 <FMenuSettingFooter+0x322>
	      break;
     case shSaveHeader:
	      sprintf_P(strHeaderFooter,PSTR("%s%s"),strFreeMessageLine1,strFreeMessageLine2);
    e27a:	ad b7       	in	r26, 0x3d	; 61
    e27c:	be b7       	in	r27, 0x3e	; 62
    e27e:	18 97       	sbiw	r26, 0x08	; 8
    e280:	0f b6       	in	r0, 0x3f	; 63
    e282:	f8 94       	cli
    e284:	be bf       	out	0x3e, r27	; 62
    e286:	0f be       	out	0x3f, r0	; 63
    e288:	ad bf       	out	0x3d, r26	; 61
    e28a:	ed b7       	in	r30, 0x3d	; 61
    e28c:	fe b7       	in	r31, 0x3e	; 62
    e28e:	31 96       	adiw	r30, 0x01	; 1
    e290:	8e 01       	movw	r16, r28
    e292:	0b 5e       	subi	r16, 0xEB	; 235
    e294:	1f 4f       	sbci	r17, 0xFF	; 255
    e296:	12 96       	adiw	r26, 0x02	; 2
    e298:	1c 93       	st	X, r17
    e29a:	0e 93       	st	-X, r16
    e29c:	11 97       	sbiw	r26, 0x01	; 1
    e29e:	82 e0       	ldi	r24, 0x02	; 2
    e2a0:	95 e1       	ldi	r25, 0x15	; 21
    e2a2:	93 83       	std	Z+3, r25	; 0x03
    e2a4:	82 83       	std	Z+2, r24	; 0x02
    e2a6:	82 e9       	ldi	r24, 0x92	; 146
    e2a8:	98 e0       	ldi	r25, 0x08	; 8
    e2aa:	95 83       	std	Z+5, r25	; 0x05
    e2ac:	84 83       	std	Z+4, r24	; 0x04
    e2ae:	83 ea       	ldi	r24, 0xA3	; 163
    e2b0:	97 e0       	ldi	r25, 0x07	; 7
    e2b2:	97 83       	std	Z+7, r25	; 0x07
    e2b4:	86 83       	std	Z+6, r24	; 0x06
    e2b6:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	      eeprom_write_block((const void*) &strHeaderFooter, (void*) &DefHeaderFooter[HeaderIdx+6],40);
    e2ba:	8d b7       	in	r24, 0x3d	; 61
    e2bc:	9e b7       	in	r25, 0x3e	; 62
    e2be:	08 96       	adiw	r24, 0x08	; 8
    e2c0:	0f b6       	in	r0, 0x3f	; 63
    e2c2:	f8 94       	cli
    e2c4:	9e bf       	out	0x3e, r25	; 62
    e2c6:	0f be       	out	0x3f, r0	; 63
    e2c8:	8d bf       	out	0x3d, r24	; 61
    e2ca:	60 91 43 02 	lds	r22, 0x0243
    e2ce:	89 e2       	ldi	r24, 0x29	; 41
    e2d0:	68 9f       	mul	r22, r24
    e2d2:	b0 01       	movw	r22, r0
    e2d4:	11 24       	eor	r1, r1
    e2d6:	62 5e       	subi	r22, 0xE2	; 226
    e2d8:	7c 4f       	sbci	r23, 0xFC	; 252
    e2da:	c8 01       	movw	r24, r16
    e2dc:	48 e2       	ldi	r20, 0x28	; 40
    e2de:	50 e0       	ldi	r21, 0x00	; 0
    e2e0:	0e 94 48 ad 	call	0x15a90	; 0x15a90 <__eewr_block_m128>
		  //eeprom_write_block((const void*) &PrintBuffer, (void*) &DefHeaderFooter[HeaderIdx+6],40);

          stSettingHeader=shInitHeader;
    e2e4:	10 92 44 02 	sts	0x0244, r1
    e2e8:	04 c0       	rjmp	.+8      	; 0xe2f2 <FMenuSettingFooter+0x330>
	      break;
     case shExitSettingHeader:
          stSettingHeader=shInitHeader;
    e2ea:	10 92 44 02 	sts	0x0244, r1
    e2ee:	81 e0       	ldi	r24, 0x01	; 1
    e2f0:	01 c0       	rjmp	.+2      	; 0xe2f4 <FMenuSettingFooter+0x332>
    e2f2:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
	      break;	 
	 }
   return Result;
}
    e2f4:	ca 5b       	subi	r28, 0xBA	; 186
    e2f6:	df 4f       	sbci	r29, 0xFF	; 255
    e2f8:	0f b6       	in	r0, 0x3f	; 63
    e2fa:	f8 94       	cli
    e2fc:	de bf       	out	0x3e, r29	; 62
    e2fe:	0f be       	out	0x3f, r0	; 63
    e300:	cd bf       	out	0x3d, r28	; 61
    e302:	cf 91       	pop	r28
    e304:	df 91       	pop	r29
    e306:	1f 91       	pop	r17
    e308:	0f 91       	pop	r16
    e30a:	ef 90       	pop	r14
    e30c:	08 95       	ret

0000e30e <FMenuSettingHeader>:
	      break;
	 }
   return Result;
}

char FMenuSettingHeader(){
    e30e:	ef 92       	push	r14
    e310:	0f 93       	push	r16
    e312:	1f 93       	push	r17
    e314:	df 93       	push	r29
    e316:	cf 93       	push	r28
    e318:	cd b7       	in	r28, 0x3d	; 61
    e31a:	de b7       	in	r29, 0x3e	; 62
    e31c:	c6 54       	subi	r28, 0x46	; 70
    e31e:	d0 40       	sbci	r29, 0x00	; 0
    e320:	0f b6       	in	r0, 0x3f	; 63
    e322:	f8 94       	cli
    e324:	de bf       	out	0x3e, r29	; 62
    e326:	0f be       	out	0x3f, r0	; 63
    e328:	cd bf       	out	0x3d, r28	; 61
	 char lcdteks[20];
	 char strHeaderFooter[50];
	 
	 Result=MENU_NONE;
     
	 switch (stSettingHeader){
    e32a:	80 91 46 02 	lds	r24, 0x0246
    e32e:	84 30       	cpi	r24, 0x04	; 4
    e330:	09 f4       	brne	.+2      	; 0xe334 <FMenuSettingHeader+0x26>
    e332:	3b c1       	rjmp	.+630    	; 0xe5aa <FMenuSettingHeader+0x29c>
    e334:	85 30       	cpi	r24, 0x05	; 5
    e336:	40 f4       	brcc	.+16     	; 0xe348 <FMenuSettingHeader+0x3a>
    e338:	81 30       	cpi	r24, 0x01	; 1
    e33a:	79 f1       	breq	.+94     	; 0xe39a <FMenuSettingHeader+0x8c>
    e33c:	81 30       	cpi	r24, 0x01	; 1
    e33e:	88 f0       	brcs	.+34     	; 0xe362 <FMenuSettingHeader+0x54>
    e340:	82 30       	cpi	r24, 0x02	; 2
    e342:	09 f0       	breq	.+2      	; 0xe346 <FMenuSettingHeader+0x38>
    e344:	7c c1       	rjmp	.+760    	; 0xe63e <FMenuSettingHeader+0x330>
    e346:	74 c0       	rjmp	.+232    	; 0xe430 <FMenuSettingHeader+0x122>
    e348:	86 30       	cpi	r24, 0x06	; 6
    e34a:	09 f4       	brne	.+2      	; 0xe34e <FMenuSettingHeader+0x40>
    e34c:	d3 c0       	rjmp	.+422    	; 0xe4f4 <FMenuSettingHeader+0x1e6>
    e34e:	86 30       	cpi	r24, 0x06	; 6
    e350:	08 f4       	brcc	.+2      	; 0xe354 <FMenuSettingHeader+0x46>
    e352:	bd c0       	rjmp	.+378    	; 0xe4ce <FMenuSettingHeader+0x1c0>
    e354:	87 30       	cpi	r24, 0x07	; 7
    e356:	09 f4       	brne	.+2      	; 0xe35a <FMenuSettingHeader+0x4c>
    e358:	36 c1       	rjmp	.+620    	; 0xe5c6 <FMenuSettingHeader+0x2b8>
    e35a:	88 30       	cpi	r24, 0x08	; 8
    e35c:	09 f0       	breq	.+2      	; 0xe360 <FMenuSettingHeader+0x52>
    e35e:	6f c1       	rjmp	.+734    	; 0xe63e <FMenuSettingHeader+0x330>
    e360:	6a c1       	rjmp	.+724    	; 0xe636 <FMenuSettingHeader+0x328>
	 case shInitHeader:
	      lcd_clear();
    e362:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
		  lcd_printf(1,1,PSTR("1)Header1  4)Header4"));
    e366:	81 e0       	ldi	r24, 0x01	; 1
    e368:	61 e0       	ldi	r22, 0x01	; 1
    e36a:	4d e4       	ldi	r20, 0x4D	; 77
    e36c:	56 e1       	ldi	r21, 0x16	; 22
    e36e:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  lcd_printf(2,1,PSTR("2)Header2  5)Header5"));
    e372:	82 e0       	ldi	r24, 0x02	; 2
    e374:	61 e0       	ldi	r22, 0x01	; 1
    e376:	48 e3       	ldi	r20, 0x38	; 56
    e378:	56 e1       	ldi	r21, 0x16	; 22
    e37a:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  lcd_printf(3,1,PSTR("3)Header3  6)Header6"));
    e37e:	83 e0       	ldi	r24, 0x03	; 3
    e380:	61 e0       	ldi	r22, 0x01	; 1
    e382:	43 e2       	ldi	r20, 0x23	; 35
    e384:	56 e1       	ldi	r21, 0x16	; 22
    e386:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  lcd_printf(4,1,PSTR("*)Exit              "));
    e38a:	84 e0       	ldi	r24, 0x04	; 4
    e38c:	61 e0       	ldi	r22, 0x01	; 1
    e38e:	4e e0       	ldi	r20, 0x0E	; 14
    e390:	56 e1       	ldi	r21, 0x16	; 22
    e392:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  stSettingHeader=shHeaderSelect;
    e396:	81 e0       	ldi	r24, 0x01	; 1
    e398:	10 c1       	rjmp	.+544    	; 0xe5ba <FMenuSettingHeader+0x2ac>
	      break;
     case shHeaderSelect:
	      KeyChar=_key_btn(_key_scan(1));
    e39a:	81 e0       	ldi	r24, 0x01	; 1
    e39c:	0e 94 6d a6 	call	0x14cda	; 0x14cda <_key_scan>
    e3a0:	0e 94 ce a5 	call	0x14b9c	; 0x14b9c <_key_btn>
    e3a4:	e8 2e       	mov	r14, r24
		  if ((KeyChar>='1')&&(KeyChar<='6')){
    e3a6:	81 53       	subi	r24, 0x31	; 49
    e3a8:	86 30       	cpi	r24, 0x06	; 6
    e3aa:	e0 f5       	brcc	.+120    	; 0xe424 <FMenuSettingHeader+0x116>
		       HeaderIdx=KeyChar-'1';//
    e3ac:	80 93 45 02 	sts	0x0245, r24
			   lcd_clear();
    e3b0:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
			   sprintf_P(lcdteks,PSTR("Edit Header%d "),HeaderIdx+1);
    e3b4:	00 d0       	rcall	.+0      	; 0xe3b6 <FMenuSettingHeader+0xa8>
    e3b6:	00 d0       	rcall	.+0      	; 0xe3b8 <FMenuSettingHeader+0xaa>
    e3b8:	00 d0       	rcall	.+0      	; 0xe3ba <FMenuSettingHeader+0xac>
    e3ba:	ed b7       	in	r30, 0x3d	; 61
    e3bc:	fe b7       	in	r31, 0x3e	; 62
    e3be:	31 96       	adiw	r30, 0x01	; 1
    e3c0:	8e 01       	movw	r16, r28
    e3c2:	0f 5f       	subi	r16, 0xFF	; 255
    e3c4:	1f 4f       	sbci	r17, 0xFF	; 255
    e3c6:	ad b7       	in	r26, 0x3d	; 61
    e3c8:	be b7       	in	r27, 0x3e	; 62
    e3ca:	12 96       	adiw	r26, 0x02	; 2
    e3cc:	1c 93       	st	X, r17
    e3ce:	0e 93       	st	-X, r16
    e3d0:	11 97       	sbiw	r26, 0x01	; 1
    e3d2:	8f ef       	ldi	r24, 0xFF	; 255
    e3d4:	95 e1       	ldi	r25, 0x15	; 21
    e3d6:	93 83       	std	Z+3, r25	; 0x03
    e3d8:	82 83       	std	Z+2, r24	; 0x02
    e3da:	80 91 45 02 	lds	r24, 0x0245
    e3de:	90 e0       	ldi	r25, 0x00	; 0
    e3e0:	01 96       	adiw	r24, 0x01	; 1
    e3e2:	95 83       	std	Z+5, r25	; 0x05
    e3e4:	84 83       	std	Z+4, r24	; 0x04
    e3e6:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
			   lcd_print(1,1,lcdteks);
    e3ea:	8d b7       	in	r24, 0x3d	; 61
    e3ec:	9e b7       	in	r25, 0x3e	; 62
    e3ee:	06 96       	adiw	r24, 0x06	; 6
    e3f0:	0f b6       	in	r0, 0x3f	; 63
    e3f2:	f8 94       	cli
    e3f4:	9e bf       	out	0x3e, r25	; 62
    e3f6:	0f be       	out	0x3f, r0	; 63
    e3f8:	8d bf       	out	0x3d, r24	; 61
    e3fa:	81 e0       	ldi	r24, 0x01	; 1
    e3fc:	61 e0       	ldi	r22, 0x01	; 1
    e3fe:	a8 01       	movw	r20, r16
    e400:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
			   lcd_printf(4,1,PSTR("[*]Back  [#]OK"));
    e404:	84 e0       	ldi	r24, 0x04	; 4
    e406:	61 e0       	ldi	r22, 0x01	; 1
    e408:	40 ef       	ldi	r20, 0xF0	; 240
    e40a:	55 e1       	ldi	r21, 0x15	; 21
    e40c:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
    e410:	ec ee       	ldi	r30, 0xEC	; 236
    e412:	f3 e0       	ldi	r31, 0x03	; 3
}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
	     strMemory[i]=data;
    e414:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    e416:	95 e0       	ldi	r25, 0x05	; 5
    e418:	ed 37       	cpi	r30, 0x7D	; 125
    e41a:	f9 07       	cpc	r31, r25
    e41c:	d9 f7       	brne	.-10     	; 0xe414 <FMenuSettingHeader+0x106>
			   lcd_clear();
			   sprintf_P(lcdteks,PSTR("Edit Header%d "),HeaderIdx+1);
			   lcd_print(1,1,lcdteks);
			   lcd_printf(4,1,PSTR("[*]Back  [#]OK"));
			   FillChar(PrintBuffer,sizeof(PrintBuffer),0);
			   stSettingHeader=shEditHeader1;
    e41e:	82 e0       	ldi	r24, 0x02	; 2
    e420:	80 93 46 02 	sts	0x0246, r24
		  }
		  if(KeyChar=='*')stSettingHeader=shExitSettingHeader;
    e424:	aa e2       	ldi	r26, 0x2A	; 42
    e426:	ea 16       	cp	r14, r26
    e428:	09 f0       	breq	.+2      	; 0xe42c <FMenuSettingHeader+0x11e>
    e42a:	09 c1       	rjmp	.+530    	; 0xe63e <FMenuSettingHeader+0x330>
    e42c:	88 e0       	ldi	r24, 0x08	; 8
    e42e:	c5 c0       	rjmp	.+394    	; 0xe5ba <FMenuSettingHeader+0x2ac>
	      break;
     case shEditHeader1:
          //uiResult=UserInput(UI_ALPHANUM_R,2,1,strFreeMessageLine1,0,20);
		  uiResult=UserInput(UI_ALPHANUM_R,2,1,PrintBuffer,0,40);
    e430:	83 e0       	ldi	r24, 0x03	; 3
    e432:	62 e0       	ldi	r22, 0x02	; 2
    e434:	41 e0       	ldi	r20, 0x01	; 1
    e436:	2c ee       	ldi	r18, 0xEC	; 236
    e438:	33 e0       	ldi	r19, 0x03	; 3
    e43a:	00 e0       	ldi	r16, 0x00	; 0
    e43c:	10 e0       	ldi	r17, 0x00	; 0
    e43e:	f8 e2       	ldi	r31, 0x28	; 40
    e440:	ef 2e       	mov	r14, r31
    e442:	0e 94 dc 67 	call	0xcfb8	; 0xcfb8 <UserInput>
		  if (uiResult==USER_OK){
    e446:	83 30       	cpi	r24, 0x03	; 3
    e448:	f1 f5       	brne	.+124    	; 0xe4c6 <FMenuSettingHeader+0x1b8>
			  lcd_clear();
    e44a:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
			  AddSpaceLag(PrintBuffer,40);
    e44e:	8c ee       	ldi	r24, 0xEC	; 236
    e450:	93 e0       	ldi	r25, 0x03	; 3
    e452:	68 e2       	ldi	r22, 0x28	; 40
    e454:	0e 94 d6 2d 	call	0x5bac	; 0x5bac <AddSpaceLag>
    e458:	20 e0       	ldi	r18, 0x00	; 0
    e45a:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    e45c:	f9 01       	movw	r30, r18
    e45e:	ee 56       	subi	r30, 0x6E	; 110
    e460:	f7 4f       	sbci	r31, 0xF7	; 247
    e462:	d9 01       	movw	r26, r18
    e464:	a4 51       	subi	r26, 0x14	; 20
    e466:	bc 4f       	sbci	r27, 0xFC	; 252
    e468:	8c 91       	ld	r24, X
    e46a:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    e46c:	2f 5f       	subi	r18, 0xFF	; 255
    e46e:	3f 4f       	sbci	r19, 0xFF	; 255
    e470:	24 31       	cpi	r18, 0x14	; 20
    e472:	31 05       	cpc	r19, r1
    e474:	99 f7       	brne	.-26     	; 0xe45c <FMenuSettingHeader+0x14e>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    e476:	10 92 a6 08 	sts	0x08A6, r1
    e47a:	e0 e0       	ldi	r30, 0x00	; 0
    e47c:	f4 e0       	ldi	r31, 0x04	; 4
    e47e:	a3 ea       	ldi	r26, 0xA3	; 163
    e480:	b7 e0       	ldi	r27, 0x07	; 7
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    e482:	81 91       	ld	r24, Z+
    e484:	8d 93       	st	X+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    e486:	84 e0       	ldi	r24, 0x04	; 4
    e488:	e4 31       	cpi	r30, 0x14	; 20
    e48a:	f8 07       	cpc	r31, r24
    e48c:	d1 f7       	brne	.-12     	; 0xe482 <FMenuSettingHeader+0x174>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    e48e:	10 92 b7 07 	sts	0x07B7, r1
			  lcd_clear();
			  AddSpaceLag(PrintBuffer,40);
			  StrPosCopy(PrintBuffer,strFreeMessageLine1,0,20);
			  StrPosCopy(PrintBuffer,strFreeMessageLine2,20,20);

			  lcd_print(1,1,strFreeMessageLine1);			  
    e492:	81 e0       	ldi	r24, 0x01	; 1
    e494:	61 e0       	ldi	r22, 0x01	; 1
    e496:	42 e9       	ldi	r20, 0x92	; 146
    e498:	58 e0       	ldi	r21, 0x08	; 8
    e49a:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
			  lcd_print(2,1,strFreeMessageLine2);			  
    e49e:	82 e0       	ldi	r24, 0x02	; 2
    e4a0:	61 e0       	ldi	r22, 0x01	; 1
    e4a2:	43 ea       	ldi	r20, 0xA3	; 163
    e4a4:	57 e0       	ldi	r21, 0x07	; 7
    e4a6:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
			  
			  lcd_printf(3,1,PSTR("Align Center?"));
    e4aa:	83 e0       	ldi	r24, 0x03	; 3
    e4ac:	61 e0       	ldi	r22, 0x01	; 1
    e4ae:	42 ee       	ldi	r20, 0xE2	; 226
    e4b0:	55 e1       	ldi	r21, 0x15	; 21
    e4b2:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
			  lcd_printf(4,1,PSTR("[*]No  [#]Yes"));
    e4b6:	84 e0       	ldi	r24, 0x04	; 4
    e4b8:	61 e0       	ldi	r22, 0x01	; 1
    e4ba:	44 ed       	ldi	r20, 0xD4	; 212
    e4bc:	55 e1       	ldi	r21, 0x15	; 21
    e4be:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		      stSettingHeader=shIsAlignCenter;
    e4c2:	85 e0       	ldi	r24, 0x05	; 5
    e4c4:	7a c0       	rjmp	.+244    	; 0xe5ba <FMenuSettingHeader+0x2ac>
		  }
		  else
		  if (uiResult==USER_CANCEL)stSettingHeader=shInitHeader;
    e4c6:	81 30       	cpi	r24, 0x01	; 1
    e4c8:	09 f0       	breq	.+2      	; 0xe4cc <FMenuSettingHeader+0x1be>
    e4ca:	b9 c0       	rjmp	.+370    	; 0xe63e <FMenuSettingHeader+0x330>
    e4cc:	b1 c0       	rjmp	.+354    	; 0xe630 <FMenuSettingHeader+0x322>
	      break;
     case shIsAlignCenter:
	      KeyChar=_key_btn(_key_scan(1));
    e4ce:	81 e0       	ldi	r24, 0x01	; 1
    e4d0:	0e 94 6d a6 	call	0x14cda	; 0x14cda <_key_scan>
    e4d4:	0e 94 ce a5 	call	0x14b9c	; 0x14b9c <_key_btn>
          if(KeyChar=='#'){
    e4d8:	83 32       	cpi	r24, 0x23	; 35
    e4da:	39 f4       	brne	.+14     	; 0xe4ea <FMenuSettingHeader+0x1dc>
		      //AlignCenter			  
			  StrAlignCenter(PrintBuffer,40);
    e4dc:	8c ee       	ldi	r24, 0xEC	; 236
    e4de:	93 e0       	ldi	r25, 0x03	; 3
    e4e0:	68 e2       	ldi	r22, 0x28	; 40
    e4e2:	70 e0       	ldi	r23, 0x00	; 0
    e4e4:	0e 94 d0 2f 	call	0x5fa0	; 0x5fa0 <StrAlignCenter>
    e4e8:	03 c0       	rjmp	.+6      	; 0xe4f0 <FMenuSettingHeader+0x1e2>
			  stSettingHeader=shIsSaveHeader;
		  } else if(KeyChar=='*')stSettingHeader=shIsSaveHeader;		 
    e4ea:	8a 32       	cpi	r24, 0x2A	; 42
    e4ec:	09 f0       	breq	.+2      	; 0xe4f0 <FMenuSettingHeader+0x1e2>
    e4ee:	a7 c0       	rjmp	.+334    	; 0xe63e <FMenuSettingHeader+0x330>
    e4f0:	86 e0       	ldi	r24, 0x06	; 6
    e4f2:	63 c0       	rjmp	.+198    	; 0xe5ba <FMenuSettingHeader+0x2ac>
	      break;
     case shIsSaveHeader:
	      lcd_clear(); 
    e4f4:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
    e4f8:	20 e0       	ldi	r18, 0x00	; 0
    e4fa:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    e4fc:	f9 01       	movw	r30, r18
    e4fe:	ee 56       	subi	r30, 0x6E	; 110
    e500:	f7 4f       	sbci	r31, 0xF7	; 247
    e502:	d9 01       	movw	r26, r18
    e504:	a4 51       	subi	r26, 0x14	; 20
    e506:	bc 4f       	sbci	r27, 0xFC	; 252
    e508:	8c 91       	ld	r24, X
    e50a:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    e50c:	2f 5f       	subi	r18, 0xFF	; 255
    e50e:	3f 4f       	sbci	r19, 0xFF	; 255
    e510:	24 31       	cpi	r18, 0x14	; 20
    e512:	31 05       	cpc	r19, r1
    e514:	99 f7       	brne	.-26     	; 0xe4fc <FMenuSettingHeader+0x1ee>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    e516:	10 92 a6 08 	sts	0x08A6, r1
    e51a:	e0 e0       	ldi	r30, 0x00	; 0
    e51c:	f4 e0       	ldi	r31, 0x04	; 4
    e51e:	a3 ea       	ldi	r26, 0xA3	; 163
    e520:	b7 e0       	ldi	r27, 0x07	; 7
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    e522:	81 91       	ld	r24, Z+
    e524:	8d 93       	st	X+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    e526:	94 e0       	ldi	r25, 0x04	; 4
    e528:	e4 31       	cpi	r30, 0x14	; 20
    e52a:	f9 07       	cpc	r31, r25
    e52c:	d1 f7       	brne	.-12     	; 0xe522 <FMenuSettingHeader+0x214>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    e52e:	10 92 b7 07 	sts	0x07B7, r1
	      break;
     case shIsSaveHeader:
	      lcd_clear(); 
		  StrPosCopy(PrintBuffer,strFreeMessageLine1,0,20);
		  StrPosCopy(PrintBuffer,strFreeMessageLine2,20,20);
          lcd_print(1,1,strFreeMessageLine1);
    e532:	81 e0       	ldi	r24, 0x01	; 1
    e534:	61 e0       	ldi	r22, 0x01	; 1
    e536:	42 e9       	ldi	r20, 0x92	; 146
    e538:	58 e0       	ldi	r21, 0x08	; 8
    e53a:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
		  lcd_print(2,1,strFreeMessageLine2);
    e53e:	82 e0       	ldi	r24, 0x02	; 2
    e540:	61 e0       	ldi	r22, 0x01	; 1
    e542:	43 ea       	ldi	r20, 0xA3	; 163
    e544:	57 e0       	ldi	r21, 0x07	; 7
    e546:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
		  sprintf_P(lcdteks,PSTR("Save Header%d ?"),HeaderIdx+1);
    e54a:	00 d0       	rcall	.+0      	; 0xe54c <FMenuSettingHeader+0x23e>
    e54c:	00 d0       	rcall	.+0      	; 0xe54e <FMenuSettingHeader+0x240>
    e54e:	00 d0       	rcall	.+0      	; 0xe550 <FMenuSettingHeader+0x242>
    e550:	ed b7       	in	r30, 0x3d	; 61
    e552:	fe b7       	in	r31, 0x3e	; 62
    e554:	31 96       	adiw	r30, 0x01	; 1
    e556:	8e 01       	movw	r16, r28
    e558:	0f 5f       	subi	r16, 0xFF	; 255
    e55a:	1f 4f       	sbci	r17, 0xFF	; 255
    e55c:	ad b7       	in	r26, 0x3d	; 61
    e55e:	be b7       	in	r27, 0x3e	; 62
    e560:	12 96       	adiw	r26, 0x02	; 2
    e562:	1c 93       	st	X, r17
    e564:	0e 93       	st	-X, r16
    e566:	11 97       	sbiw	r26, 0x01	; 1
    e568:	84 ec       	ldi	r24, 0xC4	; 196
    e56a:	95 e1       	ldi	r25, 0x15	; 21
    e56c:	93 83       	std	Z+3, r25	; 0x03
    e56e:	82 83       	std	Z+2, r24	; 0x02
    e570:	80 91 45 02 	lds	r24, 0x0245
    e574:	90 e0       	ldi	r25, 0x00	; 0
    e576:	01 96       	adiw	r24, 0x01	; 1
    e578:	95 83       	std	Z+5, r25	; 0x05
    e57a:	84 83       	std	Z+4, r24	; 0x04
    e57c:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
		  lcd_print(3,1,lcdteks);
    e580:	8d b7       	in	r24, 0x3d	; 61
    e582:	9e b7       	in	r25, 0x3e	; 62
    e584:	06 96       	adiw	r24, 0x06	; 6
    e586:	0f b6       	in	r0, 0x3f	; 63
    e588:	f8 94       	cli
    e58a:	9e bf       	out	0x3e, r25	; 62
    e58c:	0f be       	out	0x3f, r0	; 63
    e58e:	8d bf       	out	0x3d, r24	; 61
    e590:	83 e0       	ldi	r24, 0x03	; 3
    e592:	61 e0       	ldi	r22, 0x01	; 1
    e594:	a8 01       	movw	r20, r16
    e596:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
		  lcd_printf(4,1,PSTR("[*]No [#]Yes"));		      
    e59a:	84 e0       	ldi	r24, 0x04	; 4
    e59c:	61 e0       	ldi	r22, 0x01	; 1
    e59e:	47 eb       	ldi	r20, 0xB7	; 183
    e5a0:	55 e1       	ldi	r21, 0x15	; 21
    e5a2:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
	      stSettingHeader=shSaveHeaderQuestions;      
    e5a6:	84 e0       	ldi	r24, 0x04	; 4
    e5a8:	08 c0       	rjmp	.+16     	; 0xe5ba <FMenuSettingHeader+0x2ac>
	      break;    
     case shSaveHeaderQuestions:
	      KeyChar=_key_btn(_key_scan(1));
    e5aa:	81 e0       	ldi	r24, 0x01	; 1
    e5ac:	0e 94 6d a6 	call	0x14cda	; 0x14cda <_key_scan>
    e5b0:	0e 94 ce a5 	call	0x14b9c	; 0x14b9c <_key_btn>
	      if(KeyChar=='#')stSettingHeader=shSaveHeader;
    e5b4:	83 32       	cpi	r24, 0x23	; 35
    e5b6:	21 f4       	brne	.+8      	; 0xe5c0 <FMenuSettingHeader+0x2b2>
    e5b8:	87 e0       	ldi	r24, 0x07	; 7
    e5ba:	80 93 46 02 	sts	0x0246, r24
    e5be:	3f c0       	rjmp	.+126    	; 0xe63e <FMenuSettingHeader+0x330>
		  else
          if(KeyChar=='*')stSettingHeader=shInitHeader;
    e5c0:	8a 32       	cpi	r24, 0x2A	; 42
    e5c2:	e9 f5       	brne	.+122    	; 0xe63e <FMenuSettingHeader+0x330>
    e5c4:	35 c0       	rjmp	.+106    	; 0xe630 <FMenuSettingHeader+0x322>
	      break;
     case shSaveHeader:
	      sprintf_P(strHeaderFooter,PSTR("%s%s"),strFreeMessageLine1,strFreeMessageLine2);
    e5c6:	ad b7       	in	r26, 0x3d	; 61
    e5c8:	be b7       	in	r27, 0x3e	; 62
    e5ca:	18 97       	sbiw	r26, 0x08	; 8
    e5cc:	0f b6       	in	r0, 0x3f	; 63
    e5ce:	f8 94       	cli
    e5d0:	be bf       	out	0x3e, r27	; 62
    e5d2:	0f be       	out	0x3f, r0	; 63
    e5d4:	ad bf       	out	0x3d, r26	; 61
    e5d6:	ed b7       	in	r30, 0x3d	; 61
    e5d8:	fe b7       	in	r31, 0x3e	; 62
    e5da:	31 96       	adiw	r30, 0x01	; 1
    e5dc:	8e 01       	movw	r16, r28
    e5de:	0b 5e       	subi	r16, 0xEB	; 235
    e5e0:	1f 4f       	sbci	r17, 0xFF	; 255
    e5e2:	12 96       	adiw	r26, 0x02	; 2
    e5e4:	1c 93       	st	X, r17
    e5e6:	0e 93       	st	-X, r16
    e5e8:	11 97       	sbiw	r26, 0x01	; 1
    e5ea:	82 eb       	ldi	r24, 0xB2	; 178
    e5ec:	95 e1       	ldi	r25, 0x15	; 21
    e5ee:	93 83       	std	Z+3, r25	; 0x03
    e5f0:	82 83       	std	Z+2, r24	; 0x02
    e5f2:	82 e9       	ldi	r24, 0x92	; 146
    e5f4:	98 e0       	ldi	r25, 0x08	; 8
    e5f6:	95 83       	std	Z+5, r25	; 0x05
    e5f8:	84 83       	std	Z+4, r24	; 0x04
    e5fa:	83 ea       	ldi	r24, 0xA3	; 163
    e5fc:	97 e0       	ldi	r25, 0x07	; 7
    e5fe:	97 83       	std	Z+7, r25	; 0x07
    e600:	86 83       	std	Z+6, r24	; 0x06
    e602:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	      eeprom_write_block((const void*) &strHeaderFooter, (void*) &DefHeaderFooter[HeaderIdx],40);
    e606:	8d b7       	in	r24, 0x3d	; 61
    e608:	9e b7       	in	r25, 0x3e	; 62
    e60a:	08 96       	adiw	r24, 0x08	; 8
    e60c:	0f b6       	in	r0, 0x3f	; 63
    e60e:	f8 94       	cli
    e610:	9e bf       	out	0x3e, r25	; 62
    e612:	0f be       	out	0x3f, r0	; 63
    e614:	8d bf       	out	0x3d, r24	; 61
    e616:	60 91 45 02 	lds	r22, 0x0245
    e61a:	89 e2       	ldi	r24, 0x29	; 41
    e61c:	68 9f       	mul	r22, r24
    e61e:	b0 01       	movw	r22, r0
    e620:	11 24       	eor	r1, r1
    e622:	68 5d       	subi	r22, 0xD8	; 216
    e624:	7d 4f       	sbci	r23, 0xFD	; 253
    e626:	c8 01       	movw	r24, r16
    e628:	48 e2       	ldi	r20, 0x28	; 40
    e62a:	50 e0       	ldi	r21, 0x00	; 0
    e62c:	0e 94 48 ad 	call	0x15a90	; 0x15a90 <__eewr_block_m128>
		  //eeprom_write_block((const void*) &PrintBuffer, (void*) &DefHeaderFooter[HeaderIdx],40);
          stSettingHeader=shInitHeader;
    e630:	10 92 46 02 	sts	0x0246, r1
    e634:	04 c0       	rjmp	.+8      	; 0xe63e <FMenuSettingHeader+0x330>
	      break;
     case shExitSettingHeader:
          stSettingHeader=shInitHeader;
    e636:	10 92 46 02 	sts	0x0246, r1
    e63a:	81 e0       	ldi	r24, 0x01	; 1
    e63c:	01 c0       	rjmp	.+2      	; 0xe640 <FMenuSettingHeader+0x332>
    e63e:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
	      break;	 
	 }
   //_menu_header();   
   return Result;
}
    e640:	ca 5b       	subi	r28, 0xBA	; 186
    e642:	df 4f       	sbci	r29, 0xFF	; 255
    e644:	0f b6       	in	r0, 0x3f	; 63
    e646:	f8 94       	cli
    e648:	de bf       	out	0x3e, r29	; 62
    e64a:	0f be       	out	0x3f, r0	; 63
    e64c:	cd bf       	out	0x3d, r28	; 61
    e64e:	cf 91       	pop	r28
    e650:	df 91       	pop	r29
    e652:	1f 91       	pop	r17
    e654:	0f 91       	pop	r16
    e656:	ef 90       	pop	r14
    e658:	08 95       	ret

0000e65a <FMenuAdminSettings>:

char FMenuAdminSettings(){
     static char stAdminSettings=asInitMenu;
	 char SubMenu,Result,KeyChar;
	 Result=MENU_NONE;
	 switch(stAdminSettings){
    e65a:	80 91 47 02 	lds	r24, 0x0247
    e65e:	83 30       	cpi	r24, 0x03	; 3
    e660:	09 f4       	brne	.+2      	; 0xe664 <FMenuAdminSettings+0xa>
    e662:	6e c0       	rjmp	.+220    	; 0xe740 <FMenuAdminSettings+0xe6>
    e664:	84 30       	cpi	r24, 0x04	; 4
    e666:	30 f4       	brcc	.+12     	; 0xe674 <FMenuAdminSettings+0x1a>
    e668:	81 30       	cpi	r24, 0x01	; 1
    e66a:	e9 f1       	breq	.+122    	; 0xe6e6 <FMenuAdminSettings+0x8c>
    e66c:	82 30       	cpi	r24, 0x02	; 2
    e66e:	08 f0       	brcs	.+2      	; 0xe672 <FMenuAdminSettings+0x18>
    e670:	64 c0       	rjmp	.+200    	; 0xe73a <FMenuAdminSettings+0xe0>
    e672:	0d c0       	rjmp	.+26     	; 0xe68e <FMenuAdminSettings+0x34>
    e674:	85 30       	cpi	r24, 0x05	; 5
    e676:	09 f4       	brne	.+2      	; 0xe67a <FMenuAdminSettings+0x20>
    e678:	66 c0       	rjmp	.+204    	; 0xe746 <FMenuAdminSettings+0xec>
    e67a:	85 30       	cpi	r24, 0x05	; 5
    e67c:	08 f4       	brcc	.+2      	; 0xe680 <FMenuAdminSettings+0x26>
    e67e:	6a c0       	rjmp	.+212    	; 0xe754 <FMenuAdminSettings+0xfa>
    e680:	86 30       	cpi	r24, 0x06	; 6
    e682:	09 f4       	brne	.+2      	; 0xe686 <FMenuAdminSettings+0x2c>
    e684:	63 c0       	rjmp	.+198    	; 0xe74c <FMenuAdminSettings+0xf2>
    e686:	87 30       	cpi	r24, 0x07	; 7
    e688:	09 f0       	breq	.+2      	; 0xe68c <FMenuAdminSettings+0x32>
    e68a:	6c c0       	rjmp	.+216    	; 0xe764 <FMenuAdminSettings+0x10a>
    e68c:	67 c0       	rjmp	.+206    	; 0xe75c <FMenuAdminSettings+0x102>
	 case asInitMenu:
          lcd_clear();
    e68e:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
		  if (IFType==IT_SLAVE){
    e692:	80 91 00 01 	lds	r24, 0x0100
    e696:	81 30       	cpi	r24, 0x01	; 1
    e698:	51 f4       	brne	.+20     	; 0xe6ae <FMenuAdminSettings+0x54>
		      lcd_printf(1,1, PSTR("1)Header    4)Client"));
    e69a:	61 e0       	ldi	r22, 0x01	; 1
    e69c:	4d eb       	ldi	r20, 0xBD	; 189
    e69e:	56 e1       	ldi	r21, 0x16	; 22
    e6a0:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		      lcd_printf(2,1, PSTR("2)Footer    5)Server"));
    e6a4:	82 e0       	ldi	r24, 0x02	; 2
    e6a6:	61 e0       	ldi	r22, 0x01	; 1
    e6a8:	48 ea       	ldi	r20, 0xA8	; 168
    e6aa:	56 e1       	ldi	r21, 0x16	; 22
    e6ac:	0c c0       	rjmp	.+24     	; 0xe6c6 <FMenuAdminSettings+0x6c>
		  }else
		  if (IFType==IT_STANDALONE){
    e6ae:	82 30       	cpi	r24, 0x02	; 2
    e6b0:	61 f4       	brne	.+24     	; 0xe6ca <FMenuAdminSettings+0x70>
		      lcd_printf(1,1, PSTR("1)Header            "));
    e6b2:	81 e0       	ldi	r24, 0x01	; 1
    e6b4:	61 e0       	ldi	r22, 0x01	; 1
    e6b6:	43 e9       	ldi	r20, 0x93	; 147
    e6b8:	56 e1       	ldi	r21, 0x16	; 22
    e6ba:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		      lcd_printf(2,1, PSTR("2)Footer            "));
    e6be:	82 e0       	ldi	r24, 0x02	; 2
    e6c0:	61 e0       	ldi	r22, 0x01	; 1
    e6c2:	4e e7       	ldi	r20, 0x7E	; 126
    e6c4:	56 e1       	ldi	r21, 0x16	; 22
    e6c6:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  }
		  lcd_printf(3,1, PSTR("3)Password          "));
    e6ca:	83 e0       	ldi	r24, 0x03	; 3
    e6cc:	61 e0       	ldi	r22, 0x01	; 1
    e6ce:	49 e6       	ldi	r20, 0x69	; 105
    e6d0:	56 e1       	ldi	r21, 0x16	; 22
    e6d2:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  lcd_printf(4,1, PSTR("*)Exit"));
    e6d6:	84 e0       	ldi	r24, 0x04	; 4
    e6d8:	61 e0       	ldi	r22, 0x01	; 1
    e6da:	42 e6       	ldi	r20, 0x62	; 98
    e6dc:	56 e1       	ldi	r21, 0x16	; 22
    e6de:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  stAdminSettings=asAdminSettingsOption;
    e6e2:	81 e0       	ldi	r24, 0x01	; 1
    e6e4:	27 c0       	rjmp	.+78     	; 0xe734 <FMenuAdminSettings+0xda>
		  break;
     case asAdminSettingsOption:
	      KeyChar=_key_btn(_key_scan(1));
    e6e6:	81 e0       	ldi	r24, 0x01	; 1
    e6e8:	0e 94 6d a6 	call	0x14cda	; 0x14cda <_key_scan>
    e6ec:	0e 94 ce a5 	call	0x14b9c	; 0x14b9c <_key_btn>
    e6f0:	98 2f       	mov	r25, r24
		  switch(KeyChar){
    e6f2:	82 33       	cpi	r24, 0x32	; 50
    e6f4:	61 f0       	breq	.+24     	; 0xe70e <FMenuAdminSettings+0xb4>
    e6f6:	83 33       	cpi	r24, 0x33	; 51
    e6f8:	28 f4       	brcc	.+10     	; 0xe704 <FMenuAdminSettings+0xaa>
    e6fa:	8a 32       	cpi	r24, 0x2A	; 42
    e6fc:	61 f0       	breq	.+24     	; 0xe716 <FMenuAdminSettings+0xbc>
    e6fe:	81 33       	cpi	r24, 0x31	; 49
    e700:	69 f4       	brne	.+26     	; 0xe71c <FMenuAdminSettings+0xc2>
    e702:	03 c0       	rjmp	.+6      	; 0xe70a <FMenuAdminSettings+0xb0>
    e704:	83 33       	cpi	r24, 0x33	; 51
    e706:	51 f4       	brne	.+20     	; 0xe71c <FMenuAdminSettings+0xc2>
    e708:	04 c0       	rjmp	.+8      	; 0xe712 <FMenuAdminSettings+0xb8>
		  case '1':stAdminSettings=asAdminSettingHeader;
    e70a:	82 e0       	ldi	r24, 0x02	; 2
    e70c:	05 c0       	rjmp	.+10     	; 0xe718 <FMenuAdminSettings+0xbe>
		       break;
		  case '2':stAdminSettings=asAdminSettingFooter;
    e70e:	83 e0       	ldi	r24, 0x03	; 3
    e710:	03 c0       	rjmp	.+6      	; 0xe718 <FMenuAdminSettings+0xbe>
		       break;
		  case '3':stAdminSettings=asAdminSettingPassword;
    e712:	84 e0       	ldi	r24, 0x04	; 4
    e714:	01 c0       	rjmp	.+2      	; 0xe718 <FMenuAdminSettings+0xbe>
		       break;
		  case '*':stAdminSettings=asExitAdminSetting;
    e716:	87 e0       	ldi	r24, 0x07	; 7
    e718:	80 93 47 02 	sts	0x0247, r24
		       break;			   
		  }
		  if (IFType==IT_SLAVE){
    e71c:	80 91 00 01 	lds	r24, 0x0100
    e720:	81 30       	cpi	r24, 0x01	; 1
    e722:	01 f5       	brne	.+64     	; 0xe764 <FMenuAdminSettings+0x10a>
			  switch(KeyChar){
    e724:	94 33       	cpi	r25, 0x34	; 52
    e726:	19 f0       	breq	.+6      	; 0xe72e <FMenuAdminSettings+0xd4>
    e728:	95 33       	cpi	r25, 0x35	; 53
    e72a:	e1 f4       	brne	.+56     	; 0xe764 <FMenuAdminSettings+0x10a>
    e72c:	02 c0       	rjmp	.+4      	; 0xe732 <FMenuAdminSettings+0xd8>
			  case '4':stAdminSettings=asAdminSettingClientIP;
    e72e:	85 e0       	ldi	r24, 0x05	; 5
    e730:	01 c0       	rjmp	.+2      	; 0xe734 <FMenuAdminSettings+0xda>
				   break;
			  case '5':stAdminSettings=asAdminSettingServerIP;
    e732:	86 e0       	ldi	r24, 0x06	; 6
    e734:	80 93 47 02 	sts	0x0247, r24
    e738:	0f c0       	rjmp	.+30     	; 0xe758 <FMenuAdminSettings+0xfe>
				   break;
			  }
		  }
	      break;
	 case asAdminSettingHeader:
	      SubMenu=FMenuSettingHeader();
    e73a:	0e 94 87 71 	call	0xe30e	; 0xe30e <FMenuSettingHeader>
    e73e:	08 c0       	rjmp	.+16     	; 0xe750 <FMenuAdminSettings+0xf6>
	      if (SubMenu==MENU_DONE)stAdminSettings=asInitMenu;
	      break;
	 case asAdminSettingFooter:
	      SubMenu=FMenuSettingFooter();
    e740:	0e 94 e1 6f 	call	0xdfc2	; 0xdfc2 <FMenuSettingFooter>
    e744:	05 c0       	rjmp	.+10     	; 0xe750 <FMenuAdminSettings+0xf6>
	 case asAdminSettingPassword:
	      SubMenu=FMenuSettingPassword();
	      if (SubMenu==MENU_DONE)stAdminSettings=asInitMenu;	 
	      break;
     case asAdminSettingClientIP:
	      SubMenu=FMenuSettingClientIP();
    e746:	0e 94 66 59 	call	0xb2cc	; 0xb2cc <FMenuSettingClientIP>
    e74a:	02 c0       	rjmp	.+4      	; 0xe750 <FMenuAdminSettings+0xf6>
	      if (SubMenu==MENU_DONE)stAdminSettings=asInitMenu;	 
	      break;
	 case asAdminSettingServerIP:
	      SubMenu=FMenuSettingServerIP();
    e74c:	0e 94 e1 56 	call	0xadc2	; 0xadc2 <FMenuSettingServerIP>
	      if (SubMenu==MENU_DONE)stAdminSettings=asInitMenu;	 
    e750:	81 30       	cpi	r24, 0x01	; 1
    e752:	41 f4       	brne	.+16     	; 0xe764 <FMenuAdminSettings+0x10a>
    e754:	10 92 47 02 	sts	0x0247, r1
    e758:	80 e0       	ldi	r24, 0x00	; 0
    e75a:	08 95       	ret
	      break;
     case asExitAdminSetting:
	      stAdminSettings=asInitMenu;
    e75c:	10 92 47 02 	sts	0x0247, r1
    e760:	81 e0       	ldi	r24, 0x01	; 1
    e762:	08 95       	ret
    e764:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
	      break;
	 }
   return Result;
}
    e766:	08 95       	ret

0000e768 <FMenuMaster>:
     else Result=RC_INVALID;

   return Result;
}

char FMenuMaster(){ 
    e768:	cf 92       	push	r12
    e76a:	df 92       	push	r13
    e76c:	ef 92       	push	r14
    e76e:	ff 92       	push	r15
    e770:	0f 93       	push	r16
    e772:	1f 93       	push	r17
    e774:	df 93       	push	r29
    e776:	cf 93       	push	r28
    e778:	cd b7       	in	r28, 0x3d	; 61
    e77a:	de b7       	in	r29, 0x3e	; 62
    e77c:	e2 97       	sbiw	r28, 0x32	; 50
    e77e:	0f b6       	in	r0, 0x3f	; 63
    e780:	f8 94       	cli
    e782:	de bf       	out	0x3e, r29	; 62
    e784:	0f be       	out	0x3f, r0	; 63
    e786:	cd bf       	out	0x3d, r28	; 61
static char stMenuMaster=mmInitMaster;
     char KeyPressed,KeyChar,Result=MENU_NONE;
	 char uiResult,lcdteks[20],PTime[10],PDate[10],strNewPassword[10];
	 char strSend[20];

	 switch(stMenuMaster){
    e788:	80 91 4c 02 	lds	r24, 0x024C
    e78c:	e8 2f       	mov	r30, r24
    e78e:	f0 e0       	ldi	r31, 0x00	; 0
    e790:	e9 31       	cpi	r30, 0x19	; 25
    e792:	f1 05       	cpc	r31, r1
    e794:	08 f0       	brcs	.+2      	; 0xe798 <FMenuMaster+0x30>
    e796:	dc c2       	rjmp	.+1464   	; 0xed50 <FMenuMaster+0x5e8>
    e798:	ec 59       	subi	r30, 0x9C	; 156
    e79a:	ff 4f       	sbci	r31, 0xFF	; 255
    e79c:	ee 0f       	add	r30, r30
    e79e:	ff 1f       	adc	r31, r31
    e7a0:	05 90       	lpm	r0, Z+
    e7a2:	f4 91       	lpm	r31, Z+
    e7a4:	e0 2d       	mov	r30, r0
    e7a6:	09 94       	ijmp
	 case mmInitMaster:
	      lcd_clear();
    e7a8:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
		  lcd_printf(1,1,PSTR("-System Admin Level-"));
    e7ac:	81 e0       	ldi	r24, 0x01	; 1
    e7ae:	61 e0       	ldi	r22, 0x01	; 1
    e7b0:	4f ee       	ldi	r20, 0xEF	; 239
    e7b2:	59 e1       	ldi	r21, 0x19	; 25
    e7b4:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  lcd_printf(2,1,PSTR("1.Restore Password  "));
    e7b8:	82 e0       	ldi	r24, 0x02	; 2
    e7ba:	61 e0       	ldi	r22, 0x01	; 1
    e7bc:	4a ed       	ldi	r20, 0xDA	; 218
    e7be:	59 e1       	ldi	r21, 0x19	; 25
    e7c0:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  lcd_printf(3,1,PSTR("2.Master Reset      "));
    e7c4:	83 e0       	ldi	r24, 0x03	; 3
    e7c6:	61 e0       	ldi	r22, 0x01	; 1
    e7c8:	45 ec       	ldi	r20, 0xC5	; 197
    e7ca:	59 e1       	ldi	r21, 0x19	; 25
    e7cc:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  lcd_printf(4,1,PSTR("[*]Exit             "));
    e7d0:	84 e0       	ldi	r24, 0x04	; 4
    e7d2:	61 e0       	ldi	r22, 0x01	; 1
    e7d4:	40 eb       	ldi	r20, 0xB0	; 176
    e7d6:	59 e1       	ldi	r21, 0x19	; 25
    e7d8:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>

		  //uart_printf(1,1,PSTR("-System Admin Level-"));

		  stMenuMaster=mmMasterSelect;
    e7dc:	81 e0       	ldi	r24, 0x01	; 1
    e7de:	11 c0       	rjmp	.+34     	; 0xe802 <FMenuMaster+0x9a>
	      break;
     case mmMasterSelect:
	 	  KeyPressed=_key_scan(1);
    e7e0:	81 e0       	ldi	r24, 0x01	; 1
    e7e2:	0e 94 6d a6 	call	0x14cda	; 0x14cda <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
    e7e6:	0e 94 ce a5 	call	0x14b9c	; 0x14b9c <_key_btn>
          switch(KeyChar){
    e7ea:	81 33       	cpi	r24, 0x31	; 49
    e7ec:	09 f4       	brne	.+2      	; 0xe7f0 <FMenuMaster+0x88>
    e7ee:	e0 c1       	rjmp	.+960    	; 0xebb0 <FMenuMaster+0x448>
    e7f0:	82 33       	cpi	r24, 0x32	; 50
    e7f2:	21 f0       	breq	.+8      	; 0xe7fc <FMenuMaster+0x94>
    e7f4:	8a 32       	cpi	r24, 0x2A	; 42
    e7f6:	09 f0       	breq	.+2      	; 0xe7fa <FMenuMaster+0x92>
    e7f8:	ab c2       	rjmp	.+1366   	; 0xed50 <FMenuMaster+0x5e8>
    e7fa:	02 c0       	rjmp	.+4      	; 0xe800 <FMenuMaster+0x98>
		  case '1':
               stMenuMaster=mmRestorePasswordMenu;
		       break;
		  case '2':
		       stMenuMaster=mmMasterReset;
    e7fc:	81 e1       	ldi	r24, 0x11	; 17
    e7fe:	01 c0       	rjmp	.+2      	; 0xe802 <FMenuMaster+0x9a>
		       break;
          case '*':
		       stMenuMaster=mmExitMaster;
    e800:	80 e1       	ldi	r24, 0x10	; 16
    e802:	80 93 4c 02 	sts	0x024C, r24
    e806:	a4 c2       	rjmp	.+1352   	; 0xed50 <FMenuMaster+0x5e8>
		       break;
		  }
	      break;
     case mmMasterReset:
		  
	      _datetime(0, strSystemDate, strSystemTime);
    e808:	04 e7       	ldi	r16, 0x74	; 116
    e80a:	18 e0       	ldi	r17, 0x08	; 8
    e80c:	80 e0       	ldi	r24, 0x00	; 0
    e80e:	6a eb       	ldi	r22, 0xBA	; 186
    e810:	73 e0       	ldi	r23, 0x03	; 3
    e812:	a8 01       	movw	r20, r16
    e814:	0e 94 ce a7 	call	0x14f9c	; 0x14f9c <_datetime>
	      sprintf_P(PTime,PSTR("%s"),strSystemTime);
    e818:	00 d0       	rcall	.+0      	; 0xe81a <FMenuMaster+0xb2>
    e81a:	00 d0       	rcall	.+0      	; 0xe81c <FMenuMaster+0xb4>
    e81c:	00 d0       	rcall	.+0      	; 0xe81e <FMenuMaster+0xb6>
    e81e:	ed b7       	in	r30, 0x3d	; 61
    e820:	fe b7       	in	r31, 0x3e	; 62
    e822:	31 96       	adiw	r30, 0x01	; 1
    e824:	7e 01       	movw	r14, r28
    e826:	08 94       	sec
    e828:	e1 1c       	adc	r14, r1
    e82a:	f1 1c       	adc	r15, r1
    e82c:	ad b7       	in	r26, 0x3d	; 61
    e82e:	be b7       	in	r27, 0x3e	; 62
    e830:	12 96       	adiw	r26, 0x02	; 2
    e832:	fc 92       	st	X, r15
    e834:	ee 92       	st	-X, r14
    e836:	11 97       	sbiw	r26, 0x01	; 1
    e838:	8d ea       	ldi	r24, 0xAD	; 173
    e83a:	99 e1       	ldi	r25, 0x19	; 25
    e83c:	93 83       	std	Z+3, r25	; 0x03
    e83e:	82 83       	std	Z+2, r24	; 0x02
    e840:	15 83       	std	Z+5, r17	; 0x05
    e842:	04 83       	std	Z+4, r16	; 0x04
    e844:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
		  sprintf_P(strGeniusCode,PSTR("22345678"));		  
    e848:	0f 90       	pop	r0
    e84a:	0f 90       	pop	r0
    e84c:	72 e9       	ldi	r23, 0x92	; 146
    e84e:	c7 2e       	mov	r12, r23
    e850:	75 e0       	ldi	r23, 0x05	; 5
    e852:	d7 2e       	mov	r13, r23
    e854:	ed b7       	in	r30, 0x3d	; 61
    e856:	fe b7       	in	r31, 0x3e	; 62
    e858:	d2 82       	std	Z+2, r13	; 0x02
    e85a:	c1 82       	std	Z+1, r12	; 0x01
    e85c:	84 ea       	ldi	r24, 0xA4	; 164
    e85e:	99 e1       	ldi	r25, 0x19	; 25
    e860:	94 83       	std	Z+4, r25	; 0x04
    e862:	83 83       	std	Z+3, r24	; 0x03
    e864:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
		  RemoveChar(PTime,':');sprintf_P(strKeyStamp,PSTR(""));
    e868:	0f 90       	pop	r0
    e86a:	0f 90       	pop	r0
    e86c:	0f 90       	pop	r0
    e86e:	0f 90       	pop	r0
    e870:	c7 01       	movw	r24, r14
    e872:	6a e3       	ldi	r22, 0x3A	; 58
    e874:	0e 94 a8 30 	call	0x6150	; 0x6150 <RemoveChar>
    e878:	00 d0       	rcall	.+0      	; 0xe87a <FMenuMaster+0x112>
    e87a:	00 d0       	rcall	.+0      	; 0xe87c <FMenuMaster+0x114>
    e87c:	00 ed       	ldi	r16, 0xD0	; 208
    e87e:	17 e0       	ldi	r17, 0x07	; 7
    e880:	ad b7       	in	r26, 0x3d	; 61
    e882:	be b7       	in	r27, 0x3e	; 62
    e884:	12 96       	adiw	r26, 0x02	; 2
    e886:	1c 93       	st	X, r17
    e888:	0e 93       	st	-X, r16
    e88a:	11 97       	sbiw	r26, 0x01	; 1
    e88c:	83 ea       	ldi	r24, 0xA3	; 163
    e88e:	99 e1       	ldi	r25, 0x19	; 25
    e890:	14 96       	adiw	r26, 0x04	; 4
    e892:	9c 93       	st	X, r25
    e894:	8e 93       	st	-X, r24
    e896:	13 97       	sbiw	r26, 0x03	; 3
    e898:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
		  GenerateKeyStamp(PTime,strGeniusCode,strKeyStamp);
    e89c:	0f 90       	pop	r0
    e89e:	0f 90       	pop	r0
    e8a0:	0f 90       	pop	r0
    e8a2:	0f 90       	pop	r0
    e8a4:	c7 01       	movw	r24, r14
    e8a6:	b6 01       	movw	r22, r12
    e8a8:	a8 01       	movw	r20, r16
    e8aa:	0e 94 69 31 	call	0x62d2	; 0x62d2 <GenerateKeyStamp>

		  lcd_clear();
    e8ae:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
		  lcd_printf(1,1,PSTR("-Master Reset-"));
    e8b2:	81 e0       	ldi	r24, 0x01	; 1
    e8b4:	61 e0       	ldi	r22, 0x01	; 1
    e8b6:	44 e9       	ldi	r20, 0x94	; 148
    e8b8:	59 e1       	ldi	r21, 0x19	; 25
    e8ba:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  sprintf_P(lcdteks,PSTR("Seed Code:%s"),strKeyStamp);
    e8be:	00 d0       	rcall	.+0      	; 0xe8c0 <FMenuMaster+0x158>
    e8c0:	00 d0       	rcall	.+0      	; 0xe8c2 <FMenuMaster+0x15a>
    e8c2:	00 d0       	rcall	.+0      	; 0xe8c4 <FMenuMaster+0x15c>
    e8c4:	ed b7       	in	r30, 0x3d	; 61
    e8c6:	fe b7       	in	r31, 0x3e	; 62
    e8c8:	31 96       	adiw	r30, 0x01	; 1
    e8ca:	6f e1       	ldi	r22, 0x1F	; 31
    e8cc:	e6 2e       	mov	r14, r22
    e8ce:	f1 2c       	mov	r15, r1
    e8d0:	ec 0e       	add	r14, r28
    e8d2:	fd 1e       	adc	r15, r29
    e8d4:	ad b7       	in	r26, 0x3d	; 61
    e8d6:	be b7       	in	r27, 0x3e	; 62
    e8d8:	12 96       	adiw	r26, 0x02	; 2
    e8da:	fc 92       	st	X, r15
    e8dc:	ee 92       	st	-X, r14
    e8de:	11 97       	sbiw	r26, 0x01	; 1
    e8e0:	87 e8       	ldi	r24, 0x87	; 135
    e8e2:	99 e1       	ldi	r25, 0x19	; 25
    e8e4:	93 83       	std	Z+3, r25	; 0x03
    e8e6:	82 83       	std	Z+2, r24	; 0x02
    e8e8:	15 83       	std	Z+5, r17	; 0x05
    e8ea:	04 83       	std	Z+4, r16	; 0x04
    e8ec:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
		  lcd_print(2,1,lcdteks);
    e8f0:	ed b7       	in	r30, 0x3d	; 61
    e8f2:	fe b7       	in	r31, 0x3e	; 62
    e8f4:	36 96       	adiw	r30, 0x06	; 6
    e8f6:	0f b6       	in	r0, 0x3f	; 63
    e8f8:	f8 94       	cli
    e8fa:	fe bf       	out	0x3e, r31	; 62
    e8fc:	0f be       	out	0x3f, r0	; 63
    e8fe:	ed bf       	out	0x3d, r30	; 61
    e900:	82 e0       	ldi	r24, 0x02	; 2
    e902:	61 e0       	ldi	r22, 0x01	; 1
    e904:	a7 01       	movw	r20, r14
    e906:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
		  lcd_printf(3,1,   PSTR("ResetCode:_         "));
    e90a:	83 e0       	ldi	r24, 0x03	; 3
    e90c:	61 e0       	ldi	r22, 0x01	; 1
    e90e:	42 e7       	ldi	r20, 0x72	; 114
    e910:	59 e1       	ldi	r21, 0x19	; 25
    e912:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  lcd_printf(4,1,   PSTR("[*]Cancel   [#]Enter"));		          
    e916:	84 e0       	ldi	r24, 0x04	; 4
    e918:	61 e0       	ldi	r22, 0x01	; 1
    e91a:	4d e5       	ldi	r20, 0x5D	; 93
    e91c:	59 e1       	ldi	r21, 0x19	; 25
    e91e:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
	      stMenuMaster=mmResetCodeEntry;
    e922:	82 e1       	ldi	r24, 0x12	; 18
    e924:	6e cf       	rjmp	.-292    	; 0xe802 <FMenuMaster+0x9a>
	      break;
     case mmResetCodeEntry:
          uiResult=UserInput(UI_NUMBER_R,3,11,strRestoreCode,0,9);
    e926:	81 e0       	ldi	r24, 0x01	; 1
    e928:	63 e0       	ldi	r22, 0x03	; 3
    e92a:	4b e0       	ldi	r20, 0x0B	; 11
    e92c:	2c e5       	ldi	r18, 0x5C	; 92
    e92e:	3c e0       	ldi	r19, 0x0C	; 12
    e930:	00 e0       	ldi	r16, 0x00	; 0
    e932:	10 e0       	ldi	r17, 0x00	; 0
    e934:	59 e0       	ldi	r21, 0x09	; 9
    e936:	e5 2e       	mov	r14, r21
    e938:	0e 94 dc 67 	call	0xcfb8	; 0xcfb8 <UserInput>
		  switch(uiResult){
    e93c:	83 30       	cpi	r24, 0x03	; 3
    e93e:	49 f0       	breq	.+18     	; 0xe952 <FMenuMaster+0x1ea>
    e940:	84 30       	cpi	r24, 0x04	; 4
    e942:	08 f4       	brcc	.+2      	; 0xe946 <FMenuMaster+0x1de>
    e944:	82 c1       	rjmp	.+772    	; 0xec4a <FMenuMaster+0x4e2>
    e946:	84 30       	cpi	r24, 0x04	; 4
    e948:	31 f0       	breq	.+12     	; 0xe956 <FMenuMaster+0x1ee>
    e94a:	85 30       	cpi	r24, 0x05	; 5
    e94c:	09 f0       	breq	.+2      	; 0xe950 <FMenuMaster+0x1e8>
    e94e:	00 c2       	rjmp	.+1024   	; 0xed50 <FMenuMaster+0x5e8>
    e950:	07 c0       	rjmp	.+14     	; 0xe960 <FMenuMaster+0x1f8>
		  case USER_OK:
               stMenuMaster=mmIsValidResetCode;
    e952:	83 e1       	ldi	r24, 0x13	; 19
    e954:	56 cf       	rjmp	.-340    	; 0xe802 <FMenuMaster+0x9a>
		       break;
          case USER_CANCEL:
		       stMenuMaster=mmExitMaster;
		       break;
		  case USER_ENTRY:
		       lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
    e956:	84 e0       	ldi	r24, 0x04	; 4
    e958:	61 e0       	ldi	r22, 0x01	; 1
    e95a:	48 e4       	ldi	r20, 0x48	; 72
    e95c:	59 e1       	ldi	r21, 0x19	; 25
    e95e:	8a c1       	rjmp	.+788    	; 0xec74 <FMenuMaster+0x50c>
		       break;
          case USER_NO_DATA:
		       lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    e960:	84 e0       	ldi	r24, 0x04	; 4
    e962:	61 e0       	ldi	r22, 0x01	; 1
    e964:	43 e3       	ldi	r20, 0x33	; 51
    e966:	59 e1       	ldi	r21, 0x19	; 25
    e968:	85 c1       	rjmp	.+778    	; 0xec74 <FMenuMaster+0x50c>
		       break;
		  }	      
	      break;
     case mmIsValidResetCode:
	      if (ValidateRestoreCode(strKeyStamp,strRestoreCode)==RC_VALID){
    e96a:	80 ed       	ldi	r24, 0xD0	; 208
    e96c:	97 e0       	ldi	r25, 0x07	; 7
    e96e:	6c e5       	ldi	r22, 0x5C	; 92
    e970:	7c e0       	ldi	r23, 0x0C	; 12
    e972:	0e 94 9b 47 	call	0x8f36	; 0x8f36 <ValidateRestoreCode>
    e976:	81 30       	cpi	r24, 0x01	; 1
    e978:	11 f4       	brne	.+4      	; 0xe97e <FMenuMaster+0x216>
		      stMenuMaster=mmMasterResetExec;
    e97a:	84 e1       	ldi	r24, 0x14	; 20
    e97c:	42 cf       	rjmp	.-380    	; 0xe802 <FMenuMaster+0x9a>
		  }else stMenuMaster=mmDisplayInvalidResetCode;
    e97e:	86 e1       	ldi	r24, 0x16	; 22
    e980:	40 cf       	rjmp	.-384    	; 0xe802 <FMenuMaster+0x9a>
	      break;
     case mmMasterResetExec:
	      lcd_clear();
    e982:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
	      lcd_printf(1,1,PSTR("Reset EEPROM"));
    e986:	81 e0       	ldi	r24, 0x01	; 1
    e988:	61 e0       	ldi	r22, 0x01	; 1
    e98a:	46 e2       	ldi	r20, 0x26	; 38
    e98c:	59 e1       	ldi	r21, 0x19	; 25
    e98e:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
	      lcd_printf(2,1,PSTR("Please Wait.."));
    e992:	82 e0       	ldi	r24, 0x02	; 2
    e994:	61 e0       	ldi	r22, 0x01	; 1
    e996:	48 e1       	ldi	r20, 0x18	; 24
    e998:	59 e1       	ldi	r21, 0x19	; 25
    e99a:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
	      MasterReset();
    e99e:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <MasterReset>
          stMenuMaster=mmSuccesfullReset;
    e9a2:	85 e1       	ldi	r24, 0x15	; 21
    e9a4:	2e cf       	rjmp	.-420    	; 0xe802 <FMenuMaster+0x9a>
	      break;
     case mmSuccesfullReset:
	      lcd_clear();
    e9a6:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    e9aa:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    e9ac:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    e9ae:	81 e0       	ldi	r24, 0x01	; 1
    e9b0:	80 93 bc 01 	sts	0x01BC, r24
          stMenuMaster=mmSuccesfullReset;
	      break;
     case mmSuccesfullReset:
	      lcd_clear();
		  system_beep(1);
	      lcd_printf(2,1,PSTR("Reset Complete"));
    e9b4:	82 e0       	ldi	r24, 0x02	; 2
    e9b6:	61 e0       	ldi	r22, 0x01	; 1
    e9b8:	49 e0       	ldi	r20, 0x09	; 9
    e9ba:	59 e1       	ldi	r21, 0x19	; 25
    e9bc:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
	      TimDisplay=0; 
    e9c0:	10 92 92 01 	sts	0x0192, r1
		  stMenuMaster=mmDelayDisplayComplete;
    e9c4:	88 e1       	ldi	r24, 0x18	; 24
    e9c6:	1d cf       	rjmp	.-454    	; 0xe802 <FMenuMaster+0x9a>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    e9c8:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    e9ca:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    e9cc:	81 e0       	ldi	r24, 0x01	; 1
    e9ce:	80 93 bc 01 	sts	0x01BC, r24
	      TimDisplay=0; 
		  stMenuMaster=mmDelayDisplayComplete;
	      break;
     case mmDisplayInvalidResetCode:
          system_beep(1);
          lcd_printf(3,1,PSTR("Invalid Code        "));
    e9d2:	83 e0       	ldi	r24, 0x03	; 3
    e9d4:	61 e0       	ldi	r22, 0x01	; 1
    e9d6:	44 ef       	ldi	r20, 0xF4	; 244
    e9d8:	58 e1       	ldi	r21, 0x18	; 24
    e9da:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
          TimDisplay=0; 
    e9de:	10 92 92 01 	sts	0x0192, r1
		  stMenuMaster=mmDelayDisplayInvalidResetCode;
    e9e2:	87 e1       	ldi	r24, 0x17	; 23
    e9e4:	0e cf       	rjmp	.-484    	; 0xe802 <FMenuMaster+0x9a>
     case mmDelayDisplayInvalidResetCode:
          if (TimDisplay>5)stMenuMaster=mmExitMaster;
	      break;
     
	 case mmDelayDisplayComplete:
          if (TimDisplay>5)stMenuMaster=mmExitMaster;
    e9e6:	80 91 92 01 	lds	r24, 0x0192
    e9ea:	86 30       	cpi	r24, 0x06	; 6
    e9ec:	08 f4       	brcc	.+2      	; 0xe9f0 <FMenuMaster+0x288>
    e9ee:	b0 c1       	rjmp	.+864    	; 0xed50 <FMenuMaster+0x5e8>
    e9f0:	07 cf       	rjmp	.-498    	; 0xe800 <FMenuMaster+0x98>
	      break;

     case mmRestorePasswordMenu:	      
	      lcd_clear();
    e9f2:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
		  lcd_printf(1,1,PSTR("Enter GeNiUs Code   "));
    e9f6:	81 e0       	ldi	r24, 0x01	; 1
    e9f8:	61 e0       	ldi	r22, 0x01	; 1
    e9fa:	4f ed       	ldi	r20, 0xDF	; 223
    e9fc:	58 e1       	ldi	r21, 0x18	; 24
    e9fe:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  lcd_printf(2,1,PSTR("_                   "));
    ea02:	82 e0       	ldi	r24, 0x02	; 2
    ea04:	61 e0       	ldi	r22, 0x01	; 1
    ea06:	4a ec       	ldi	r20, 0xCA	; 202
    ea08:	58 e1       	ldi	r21, 0x18	; 24
    ea0a:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  lcd_printf(4,4,PSTR("[*]Cancel   [#]Enter"));
    ea0e:	84 e0       	ldi	r24, 0x04	; 4
    ea10:	64 e0       	ldi	r22, 0x04	; 4
    ea12:	45 eb       	ldi	r20, 0xB5	; 181
    ea14:	58 e1       	ldi	r21, 0x18	; 24
    ea16:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  sprintf_P(strGeniusCode,PSTR(""));
    ea1a:	00 d0       	rcall	.+0      	; 0xea1c <FMenuMaster+0x2b4>
    ea1c:	00 d0       	rcall	.+0      	; 0xea1e <FMenuMaster+0x2b6>
    ea1e:	82 e9       	ldi	r24, 0x92	; 146
    ea20:	95 e0       	ldi	r25, 0x05	; 5
    ea22:	ad b7       	in	r26, 0x3d	; 61
    ea24:	be b7       	in	r27, 0x3e	; 62
    ea26:	12 96       	adiw	r26, 0x02	; 2
    ea28:	9c 93       	st	X, r25
    ea2a:	8e 93       	st	-X, r24
    ea2c:	11 97       	sbiw	r26, 0x01	; 1
    ea2e:	84 eb       	ldi	r24, 0xB4	; 180
    ea30:	98 e1       	ldi	r25, 0x18	; 24
    ea32:	14 96       	adiw	r26, 0x04	; 4
    ea34:	9c 93       	st	X, r25
    ea36:	8e 93       	st	-X, r24
    ea38:	13 97       	sbiw	r26, 0x03	; 3
    ea3a:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
          stMenuMaster=mmGeniusCodeEntry;
    ea3e:	83 e0       	ldi	r24, 0x03	; 3
    ea40:	80 93 4c 02 	sts	0x024C, r24
    ea44:	80 e0       	ldi	r24, 0x00	; 0
    ea46:	0f 90       	pop	r0
    ea48:	0f 90       	pop	r0
    ea4a:	0f 90       	pop	r0
    ea4c:	0f 90       	pop	r0
    ea4e:	81 c1       	rjmp	.+770    	; 0xed52 <FMenuMaster+0x5ea>
	      break;
     case mmGeniusCodeEntry:
	 	  uiResult=UserInput(UI_NUMBER_R,2,1,strGeniusCode,0,10);
    ea50:	81 e0       	ldi	r24, 0x01	; 1
    ea52:	62 e0       	ldi	r22, 0x02	; 2
    ea54:	41 e0       	ldi	r20, 0x01	; 1
    ea56:	22 e9       	ldi	r18, 0x92	; 146
    ea58:	35 e0       	ldi	r19, 0x05	; 5
    ea5a:	00 e0       	ldi	r16, 0x00	; 0
    ea5c:	10 e0       	ldi	r17, 0x00	; 0
    ea5e:	9a e0       	ldi	r25, 0x0A	; 10
    ea60:	e9 2e       	mov	r14, r25
    ea62:	0e 94 dc 67 	call	0xcfb8	; 0xcfb8 <UserInput>
		  switch(uiResult){
    ea66:	83 30       	cpi	r24, 0x03	; 3
    ea68:	49 f0       	breq	.+18     	; 0xea7c <FMenuMaster+0x314>
    ea6a:	84 30       	cpi	r24, 0x04	; 4
    ea6c:	08 f4       	brcc	.+2      	; 0xea70 <FMenuMaster+0x308>
    ea6e:	ed c0       	rjmp	.+474    	; 0xec4a <FMenuMaster+0x4e2>
    ea70:	84 30       	cpi	r24, 0x04	; 4
    ea72:	69 f0       	breq	.+26     	; 0xea8e <FMenuMaster+0x326>
    ea74:	85 30       	cpi	r24, 0x05	; 5
    ea76:	09 f0       	breq	.+2      	; 0xea7a <FMenuMaster+0x312>
    ea78:	6b c1       	rjmp	.+726    	; 0xed50 <FMenuMaster+0x5e8>
    ea7a:	0e c0       	rjmp	.+28     	; 0xea98 <FMenuMaster+0x330>
		  case USER_OK:               
			   //uart_printf(1,0,PSTR("GeniusCode: "));
			   //uart_print(1,1,strGeniusCode);
		       _datetime(0, strSystemDate, strSystemTime);
    ea7c:	80 e0       	ldi	r24, 0x00	; 0
    ea7e:	6a eb       	ldi	r22, 0xBA	; 186
    ea80:	73 e0       	ldi	r23, 0x03	; 3
    ea82:	44 e7       	ldi	r20, 0x74	; 116
    ea84:	58 e0       	ldi	r21, 0x08	; 8
    ea86:	0e 94 ce a7 	call	0x14f9c	; 0x14f9c <_datetime>
               stMenuMaster=mmIsValidGeniusCode;
    ea8a:	84 e0       	ldi	r24, 0x04	; 4
    ea8c:	ba ce       	rjmp	.-652    	; 0xe802 <FMenuMaster+0x9a>
		       break;
          case USER_CANCEL:
		       stMenuMaster=mmExitMaster;
		       break;
		  case USER_ENTRY:
		       lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
    ea8e:	84 e0       	ldi	r24, 0x04	; 4
    ea90:	61 e0       	ldi	r22, 0x01	; 1
    ea92:	4f e9       	ldi	r20, 0x9F	; 159
    ea94:	58 e1       	ldi	r21, 0x18	; 24
    ea96:	ee c0       	rjmp	.+476    	; 0xec74 <FMenuMaster+0x50c>
		       break;
          case USER_NO_DATA:
		       lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    ea98:	84 e0       	ldi	r24, 0x04	; 4
    ea9a:	61 e0       	ldi	r22, 0x01	; 1
    ea9c:	4a e8       	ldi	r20, 0x8A	; 138
    ea9e:	58 e1       	ldi	r21, 0x18	; 24
    eaa0:	e9 c0       	rjmp	.+466    	; 0xec74 <FMenuMaster+0x50c>
		       break;
		  }
	      break;
     case mmIsValidGeniusCode:
	      //GetDate
		      sprintf_P(PDate,PSTR("%s"),strSystemDate);
    eaa2:	00 d0       	rcall	.+0      	; 0xeaa4 <FMenuMaster+0x33c>
    eaa4:	00 d0       	rcall	.+0      	; 0xeaa6 <FMenuMaster+0x33e>
    eaa6:	00 d0       	rcall	.+0      	; 0xeaa8 <FMenuMaster+0x340>
    eaa8:	ed b7       	in	r30, 0x3d	; 61
    eaaa:	fe b7       	in	r31, 0x3e	; 62
    eaac:	31 96       	adiw	r30, 0x01	; 1
    eaae:	8e 01       	movw	r16, r28
    eab0:	05 5f       	subi	r16, 0xF5	; 245
    eab2:	1f 4f       	sbci	r17, 0xFF	; 255
    eab4:	ad b7       	in	r26, 0x3d	; 61
    eab6:	be b7       	in	r27, 0x3e	; 62
    eab8:	12 96       	adiw	r26, 0x02	; 2
    eaba:	1c 93       	st	X, r17
    eabc:	0e 93       	st	-X, r16
    eabe:	11 97       	sbiw	r26, 0x01	; 1
    eac0:	87 e8       	ldi	r24, 0x87	; 135
    eac2:	98 e1       	ldi	r25, 0x18	; 24
    eac4:	93 83       	std	Z+3, r25	; 0x03
    eac6:	82 83       	std	Z+2, r24	; 0x02
    eac8:	8a eb       	ldi	r24, 0xBA	; 186
    eaca:	93 e0       	ldi	r25, 0x03	; 3
    eacc:	95 83       	std	Z+5, r25	; 0x05
    eace:	84 83       	std	Z+4, r24	; 0x04
    ead0:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
			  RemoveChar(PDate,'/');
    ead4:	ed b7       	in	r30, 0x3d	; 61
    ead6:	fe b7       	in	r31, 0x3e	; 62
    ead8:	36 96       	adiw	r30, 0x06	; 6
    eada:	0f b6       	in	r0, 0x3f	; 63
    eadc:	f8 94       	cli
    eade:	fe bf       	out	0x3e, r31	; 62
    eae0:	0f be       	out	0x3f, r0	; 63
    eae2:	ed bf       	out	0x3d, r30	; 61
    eae4:	c8 01       	movw	r24, r16
    eae6:	6f e2       	ldi	r22, 0x2F	; 47
    eae8:	0e 94 a8 30 	call	0x6150	; 0x6150 <RemoveChar>
		  if (ValidateGeniusCode(PDate,strGeniusCode)==GC_VALID){
    eaec:	c8 01       	movw	r24, r16
    eaee:	62 e9       	ldi	r22, 0x92	; 146
    eaf0:	75 e0       	ldi	r23, 0x05	; 5
    eaf2:	0e 94 bd 47 	call	0x8f7a	; 0x8f7a <ValidateGeniusCode>
    eaf6:	81 30       	cpi	r24, 0x01	; 1
    eaf8:	09 f0       	breq	.+2      	; 0xeafc <FMenuMaster+0x394>
    eafa:	44 c0       	rjmp	.+136    	; 0xeb84 <FMenuMaster+0x41c>

		  	  sprintf_P(PTime,PSTR("%s"),strSystemTime);
    eafc:	00 d0       	rcall	.+0      	; 0xeafe <FMenuMaster+0x396>
    eafe:	00 d0       	rcall	.+0      	; 0xeb00 <FMenuMaster+0x398>
    eb00:	00 d0       	rcall	.+0      	; 0xeb02 <FMenuMaster+0x39a>
    eb02:	ed b7       	in	r30, 0x3d	; 61
    eb04:	fe b7       	in	r31, 0x3e	; 62
    eb06:	31 96       	adiw	r30, 0x01	; 1
    eb08:	8e 01       	movw	r16, r28
    eb0a:	0f 5f       	subi	r16, 0xFF	; 255
    eb0c:	1f 4f       	sbci	r17, 0xFF	; 255
    eb0e:	ad b7       	in	r26, 0x3d	; 61
    eb10:	be b7       	in	r27, 0x3e	; 62
    eb12:	12 96       	adiw	r26, 0x02	; 2
    eb14:	1c 93       	st	X, r17
    eb16:	0e 93       	st	-X, r16
    eb18:	11 97       	sbiw	r26, 0x01	; 1
    eb1a:	84 e8       	ldi	r24, 0x84	; 132
    eb1c:	98 e1       	ldi	r25, 0x18	; 24
    eb1e:	93 83       	std	Z+3, r25	; 0x03
    eb20:	82 83       	std	Z+2, r24	; 0x02
    eb22:	84 e7       	ldi	r24, 0x74	; 116
    eb24:	98 e0       	ldi	r25, 0x08	; 8
    eb26:	95 83       	std	Z+5, r25	; 0x05
    eb28:	84 83       	std	Z+4, r24	; 0x04
    eb2a:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
			  RemoveChar(PTime,':');sprintf_P(strKeyStamp,PSTR(""));
    eb2e:	ed b7       	in	r30, 0x3d	; 61
    eb30:	fe b7       	in	r31, 0x3e	; 62
    eb32:	36 96       	adiw	r30, 0x06	; 6
    eb34:	0f b6       	in	r0, 0x3f	; 63
    eb36:	f8 94       	cli
    eb38:	fe bf       	out	0x3e, r31	; 62
    eb3a:	0f be       	out	0x3f, r0	; 63
    eb3c:	ed bf       	out	0x3d, r30	; 61
    eb3e:	c8 01       	movw	r24, r16
    eb40:	6a e3       	ldi	r22, 0x3A	; 58
    eb42:	0e 94 a8 30 	call	0x6150	; 0x6150 <RemoveChar>
    eb46:	00 d0       	rcall	.+0      	; 0xeb48 <FMenuMaster+0x3e0>
    eb48:	00 d0       	rcall	.+0      	; 0xeb4a <FMenuMaster+0x3e2>
    eb4a:	b0 ed       	ldi	r27, 0xD0	; 208
    eb4c:	eb 2e       	mov	r14, r27
    eb4e:	b7 e0       	ldi	r27, 0x07	; 7
    eb50:	fb 2e       	mov	r15, r27
    eb52:	ad b7       	in	r26, 0x3d	; 61
    eb54:	be b7       	in	r27, 0x3e	; 62
    eb56:	12 96       	adiw	r26, 0x02	; 2
    eb58:	fc 92       	st	X, r15
    eb5a:	ee 92       	st	-X, r14
    eb5c:	11 97       	sbiw	r26, 0x01	; 1
    eb5e:	83 e8       	ldi	r24, 0x83	; 131
    eb60:	98 e1       	ldi	r25, 0x18	; 24
    eb62:	14 96       	adiw	r26, 0x04	; 4
    eb64:	9c 93       	st	X, r25
    eb66:	8e 93       	st	-X, r24
    eb68:	13 97       	sbiw	r26, 0x03	; 3
    eb6a:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>

              //sprintf_P(strSend,PSTR("Time:%s"),PTime);
			  // uart_print(1,1,strSend);

		      GenerateKeyStamp(PTime,strGeniusCode,strKeyStamp);			  
    eb6e:	0f 90       	pop	r0
    eb70:	0f 90       	pop	r0
    eb72:	0f 90       	pop	r0
    eb74:	0f 90       	pop	r0
    eb76:	c8 01       	movw	r24, r16
    eb78:	62 e9       	ldi	r22, 0x92	; 146
    eb7a:	75 e0       	ldi	r23, 0x05	; 5
    eb7c:	a7 01       	movw	r20, r14
    eb7e:	0e 94 69 31 	call	0x62d2	; 0x62d2 <GenerateKeyStamp>
    eb82:	cc c0       	rjmp	.+408    	; 0xed1c <FMenuMaster+0x5b4>
			  stMenuMaster=mmDisplayKeyStamp;
		  }else stMenuMaster=mmDisplayInvalidCode;
    eb84:	85 e0       	ldi	r24, 0x05	; 5
    eb86:	3d ce       	rjmp	.-902    	; 0xe802 <FMenuMaster+0x9a>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    eb88:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    eb8a:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    eb8c:	81 e0       	ldi	r24, 0x01	; 1
    eb8e:	80 93 bc 01 	sts	0x01BC, r24
			  stMenuMaster=mmDisplayKeyStamp;
		  }else stMenuMaster=mmDisplayInvalidCode;
	      break;
     case mmDisplayInvalidCode:
	      system_beep(1);
          lcd_printf(3,1,PSTR("Invalid Code        "));
    eb92:	83 e0       	ldi	r24, 0x03	; 3
    eb94:	61 e0       	ldi	r22, 0x01	; 1
    eb96:	4e e6       	ldi	r20, 0x6E	; 110
    eb98:	58 e1       	ldi	r21, 0x18	; 24
    eb9a:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
          TimDisplay=0; 
    eb9e:	10 92 92 01 	sts	0x0192, r1
		  stMenuMaster=mmDelayDisplayInvalidCode;
    eba2:	86 e0       	ldi	r24, 0x06	; 6
    eba4:	2e ce       	rjmp	.-932    	; 0xe802 <FMenuMaster+0x9a>
	      break;

     case mmDelayDisplayInvalidCode:
	      if (TimDisplay>5)stMenuMaster=mmRestorePasswordMenu;
    eba6:	80 91 92 01 	lds	r24, 0x0192
    ebaa:	86 30       	cpi	r24, 0x06	; 6
    ebac:	08 f4       	brcc	.+2      	; 0xebb0 <FMenuMaster+0x448>
    ebae:	d0 c0       	rjmp	.+416    	; 0xed50 <FMenuMaster+0x5e8>
    ebb0:	82 e0       	ldi	r24, 0x02	; 2
    ebb2:	27 ce       	rjmp	.-946    	; 0xe802 <FMenuMaster+0x9a>
	      break;
     case mmDisplayKeyStamp:
	      lcd_clear();
    ebb4:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
		  sprintf_P(lcdteks,PSTR("Key Stamp:%s "),strKeyStamp);
    ebb8:	00 d0       	rcall	.+0      	; 0xebba <FMenuMaster+0x452>
    ebba:	00 d0       	rcall	.+0      	; 0xebbc <FMenuMaster+0x454>
    ebbc:	00 d0       	rcall	.+0      	; 0xebbe <FMenuMaster+0x456>
    ebbe:	ed b7       	in	r30, 0x3d	; 61
    ebc0:	fe b7       	in	r31, 0x3e	; 62
    ebc2:	31 96       	adiw	r30, 0x01	; 1
    ebc4:	8e 01       	movw	r16, r28
    ebc6:	01 5e       	subi	r16, 0xE1	; 225
    ebc8:	1f 4f       	sbci	r17, 0xFF	; 255
    ebca:	ad b7       	in	r26, 0x3d	; 61
    ebcc:	be b7       	in	r27, 0x3e	; 62
    ebce:	12 96       	adiw	r26, 0x02	; 2
    ebd0:	1c 93       	st	X, r17
    ebd2:	0e 93       	st	-X, r16
    ebd4:	11 97       	sbiw	r26, 0x01	; 1
    ebd6:	80 e6       	ldi	r24, 0x60	; 96
    ebd8:	98 e1       	ldi	r25, 0x18	; 24
    ebda:	93 83       	std	Z+3, r25	; 0x03
    ebdc:	82 83       	std	Z+2, r24	; 0x02
    ebde:	80 ed       	ldi	r24, 0xD0	; 208
    ebe0:	97 e0       	ldi	r25, 0x07	; 7
    ebe2:	95 83       	std	Z+5, r25	; 0x05
    ebe4:	84 83       	std	Z+4, r24	; 0x04
    ebe6:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
		  lcd_print(1,1,lcdteks);
    ebea:	ed b7       	in	r30, 0x3d	; 61
    ebec:	fe b7       	in	r31, 0x3e	; 62
    ebee:	36 96       	adiw	r30, 0x06	; 6
    ebf0:	0f b6       	in	r0, 0x3f	; 63
    ebf2:	f8 94       	cli
    ebf4:	fe bf       	out	0x3e, r31	; 62
    ebf6:	0f be       	out	0x3f, r0	; 63
    ebf8:	ed bf       	out	0x3d, r30	; 61
    ebfa:	81 e0       	ldi	r24, 0x01	; 1
    ebfc:	61 e0       	ldi	r22, 0x01	; 1
    ebfe:	a8 01       	movw	r20, r16
    ec00:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
		  lcd_printf(2,1,PSTR("Enter Restore Code  "));
    ec04:	82 e0       	ldi	r24, 0x02	; 2
    ec06:	61 e0       	ldi	r22, 0x01	; 1
    ec08:	4b e4       	ldi	r20, 0x4B	; 75
    ec0a:	58 e1       	ldi	r21, 0x18	; 24
    ec0c:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  lcd_printf(3,1,PSTR("_                   "));
    ec10:	83 e0       	ldi	r24, 0x03	; 3
    ec12:	61 e0       	ldi	r22, 0x01	; 1
    ec14:	46 e3       	ldi	r20, 0x36	; 54
    ec16:	58 e1       	ldi	r21, 0x18	; 24
    ec18:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    ec1c:	84 e0       	ldi	r24, 0x04	; 4
    ec1e:	61 e0       	ldi	r22, 0x01	; 1
    ec20:	41 e2       	ldi	r20, 0x21	; 33
    ec22:	58 e1       	ldi	r21, 0x18	; 24
    ec24:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
          stMenuMaster=mmRestoreCodeEntry;
    ec28:	88 e0       	ldi	r24, 0x08	; 8
    ec2a:	eb cd       	rjmp	.-1066   	; 0xe802 <FMenuMaster+0x9a>
	      break;
     case mmRestoreCodeEntry:
	 	  uiResult=UserInput(UI_NUMBER_R,3,1,strRestoreCode,0,10);
    ec2c:	81 e0       	ldi	r24, 0x01	; 1
    ec2e:	63 e0       	ldi	r22, 0x03	; 3
    ec30:	41 e0       	ldi	r20, 0x01	; 1
    ec32:	2c e5       	ldi	r18, 0x5C	; 92
    ec34:	3c e0       	ldi	r19, 0x0C	; 12
    ec36:	00 e0       	ldi	r16, 0x00	; 0
    ec38:	10 e0       	ldi	r17, 0x00	; 0
    ec3a:	aa e0       	ldi	r26, 0x0A	; 10
    ec3c:	ea 2e       	mov	r14, r26
    ec3e:	0e 94 dc 67 	call	0xcfb8	; 0xcfb8 <UserInput>
		  switch(uiResult){
    ec42:	83 30       	cpi	r24, 0x03	; 3
    ec44:	61 f0       	breq	.+24     	; 0xec5e <FMenuMaster+0x4f6>
    ec46:	84 30       	cpi	r24, 0x04	; 4
    ec48:	20 f4       	brcc	.+8      	; 0xec52 <FMenuMaster+0x4ea>
    ec4a:	81 30       	cpi	r24, 0x01	; 1
    ec4c:	09 f0       	breq	.+2      	; 0xec50 <FMenuMaster+0x4e8>
    ec4e:	80 c0       	rjmp	.+256    	; 0xed50 <FMenuMaster+0x5e8>
    ec50:	d7 cd       	rjmp	.-1106   	; 0xe800 <FMenuMaster+0x98>
    ec52:	84 30       	cpi	r24, 0x04	; 4
    ec54:	31 f0       	breq	.+12     	; 0xec62 <FMenuMaster+0x4fa>
    ec56:	85 30       	cpi	r24, 0x05	; 5
    ec58:	09 f0       	breq	.+2      	; 0xec5c <FMenuMaster+0x4f4>
    ec5a:	7a c0       	rjmp	.+244    	; 0xed50 <FMenuMaster+0x5e8>
    ec5c:	07 c0       	rjmp	.+14     	; 0xec6c <FMenuMaster+0x504>
		  case USER_OK:
               stMenuMaster=mmIsValidRestoreCode;
    ec5e:	89 e0       	ldi	r24, 0x09	; 9
    ec60:	d0 cd       	rjmp	.-1120   	; 0xe802 <FMenuMaster+0x9a>
		       break;
          case USER_CANCEL:
		       stMenuMaster=mmExitMaster;
		       break;
		  case USER_ENTRY:
		       lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
    ec62:	84 e0       	ldi	r24, 0x04	; 4
    ec64:	61 e0       	ldi	r22, 0x01	; 1
    ec66:	4c e0       	ldi	r20, 0x0C	; 12
    ec68:	58 e1       	ldi	r21, 0x18	; 24
    ec6a:	04 c0       	rjmp	.+8      	; 0xec74 <FMenuMaster+0x50c>
		       break;
          case USER_NO_DATA:
		       lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    ec6c:	84 e0       	ldi	r24, 0x04	; 4
    ec6e:	61 e0       	ldi	r22, 0x01	; 1
    ec70:	47 ef       	ldi	r20, 0xF7	; 247
    ec72:	57 e1       	ldi	r21, 0x17	; 23
    ec74:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
    ec78:	6b c0       	rjmp	.+214    	; 0xed50 <FMenuMaster+0x5e8>
		       break;
		  }
	      break;
     case mmIsValidRestoreCode:
	      if (ValidateRestoreCode(strKeyStamp,strRestoreCode)==RC_VALID){
    ec7a:	80 ed       	ldi	r24, 0xD0	; 208
    ec7c:	97 e0       	ldi	r25, 0x07	; 7
    ec7e:	6c e5       	ldi	r22, 0x5C	; 92
    ec80:	7c e0       	ldi	r23, 0x0C	; 12
    ec82:	0e 94 9b 47 	call	0x8f36	; 0x8f36 <ValidateRestoreCode>
    ec86:	81 30       	cpi	r24, 0x01	; 1
    ec88:	11 f4       	brne	.+4      	; 0xec8e <FMenuMaster+0x526>
		      stMenuMaster=mmRestorePassword;
    ec8a:	8c e0       	ldi	r24, 0x0C	; 12
    ec8c:	ba cd       	rjmp	.-1164   	; 0xe802 <FMenuMaster+0x9a>
		  }else stMenuMaster=mmDisplayInvalidRestoreCode;
    ec8e:	8a e0       	ldi	r24, 0x0A	; 10
    ec90:	b8 cd       	rjmp	.-1168   	; 0xe802 <FMenuMaster+0x9a>
	      break;
     case mmRestorePassword:
	      sprintf_P(strNewPassword,PSTR(SPV_DEFAULT_PASS));
    ec92:	00 d0       	rcall	.+0      	; 0xec94 <FMenuMaster+0x52c>
    ec94:	00 d0       	rcall	.+0      	; 0xec96 <FMenuMaster+0x52e>
    ec96:	8e 01       	movw	r16, r28
    ec98:	0b 5e       	subi	r16, 0xEB	; 235
    ec9a:	1f 4f       	sbci	r17, 0xFF	; 255
    ec9c:	ad b7       	in	r26, 0x3d	; 61
    ec9e:	be b7       	in	r27, 0x3e	; 62
    eca0:	12 96       	adiw	r26, 0x02	; 2
    eca2:	1c 93       	st	X, r17
    eca4:	0e 93       	st	-X, r16
    eca6:	11 97       	sbiw	r26, 0x01	; 1
    eca8:	81 ef       	ldi	r24, 0xF1	; 241
    ecaa:	97 e1       	ldi	r25, 0x17	; 23
    ecac:	14 96       	adiw	r26, 0x04	; 4
    ecae:	9c 93       	st	X, r25
    ecb0:	8e 93       	st	-X, r24
    ecb2:	13 97       	sbiw	r26, 0x03	; 3
    ecb4:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
		  eeprom_write_block((const void*) &strNewPassword,(void*) &DefSpvPassword,sizeof(DefSpvPassword));
    ecb8:	0f 90       	pop	r0
    ecba:	0f 90       	pop	r0
    ecbc:	0f 90       	pop	r0
    ecbe:	0f 90       	pop	r0
    ecc0:	c8 01       	movw	r24, r16
    ecc2:	61 e0       	ldi	r22, 0x01	; 1
    ecc4:	70 e0       	ldi	r23, 0x00	; 0
    ecc6:	4a e0       	ldi	r20, 0x0A	; 10
    ecc8:	50 e0       	ldi	r21, 0x00	; 0
    ecca:	0e 94 48 ad 	call	0x15a90	; 0x15a90 <__eewr_block_m128>
		  sprintf_P(strNewPassword,PSTR(SYS_DEFAULT_PASS));
    ecce:	00 d0       	rcall	.+0      	; 0xecd0 <FMenuMaster+0x568>
    ecd0:	00 d0       	rcall	.+0      	; 0xecd2 <FMenuMaster+0x56a>
    ecd2:	ed b7       	in	r30, 0x3d	; 61
    ecd4:	fe b7       	in	r31, 0x3e	; 62
    ecd6:	12 83       	std	Z+2, r17	; 0x02
    ecd8:	01 83       	std	Z+1, r16	; 0x01
    ecda:	8b ee       	ldi	r24, 0xEB	; 235
    ecdc:	97 e1       	ldi	r25, 0x17	; 23
    ecde:	94 83       	std	Z+4, r25	; 0x04
    ece0:	83 83       	std	Z+3, r24	; 0x03
    ece2:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
		  eeprom_write_block((const void*) &strNewPassword,(void*) &DefSysPassword,sizeof(DefSysPassword));	      		  
    ece6:	0f 90       	pop	r0
    ece8:	0f 90       	pop	r0
    ecea:	0f 90       	pop	r0
    ecec:	0f 90       	pop	r0
    ecee:	c8 01       	movw	r24, r16
    ecf0:	6b e0       	ldi	r22, 0x0B	; 11
    ecf2:	70 e0       	ldi	r23, 0x00	; 0
    ecf4:	4a e0       	ldi	r20, 0x0A	; 10
    ecf6:	50 e0       	ldi	r21, 0x00	; 0
    ecf8:	0e 94 48 ad 	call	0x15a90	; 0x15a90 <__eewr_block_m128>
	      stMenuMaster=mmDisplaySuccess;
    ecfc:	8d e0       	ldi	r24, 0x0D	; 13
    ecfe:	81 cd       	rjmp	.-1278   	; 0xe802 <FMenuMaster+0x9a>
	      break;
     case mmDisplayInvalidRestoreCode:
	      lcd_printf(3,1,PSTR("Invalid Restore  "));
    ed00:	83 e0       	ldi	r24, 0x03	; 3
    ed02:	61 e0       	ldi	r22, 0x01	; 1
    ed04:	49 ed       	ldi	r20, 0xD9	; 217
    ed06:	57 e1       	ldi	r21, 0x17	; 23
    ed08:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  TimDisplay=0;
    ed0c:	10 92 92 01 	sts	0x0192, r1
          stMenuMaster=mmDelayInvalidRestoreCode;
    ed10:	8b e0       	ldi	r24, 0x0B	; 11
    ed12:	77 cd       	rjmp	.-1298   	; 0xe802 <FMenuMaster+0x9a>
	      break;
     case mmDelayInvalidRestoreCode:
	      if (TimDisplay>5)stMenuMaster=mmDisplayKeyStamp;
    ed14:	80 91 92 01 	lds	r24, 0x0192
    ed18:	86 30       	cpi	r24, 0x06	; 6
    ed1a:	d0 f0       	brcs	.+52     	; 0xed50 <FMenuMaster+0x5e8>
    ed1c:	87 e0       	ldi	r24, 0x07	; 7
    ed1e:	71 cd       	rjmp	.-1310   	; 0xe802 <FMenuMaster+0x9a>
	      break;
     case mmDisplaySuccess:
	      //lcd_clear();
		  lcd_printf(3,1,PSTR("Password Restored"));
    ed20:	83 e0       	ldi	r24, 0x03	; 3
    ed22:	61 e0       	ldi	r22, 0x01	; 1
    ed24:	47 ec       	ldi	r20, 0xC7	; 199
    ed26:	57 e1       	ldi	r21, 0x17	; 23
    ed28:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    ed2c:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    ed2e:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    ed30:	81 e0       	ldi	r24, 0x01	; 1
    ed32:	80 93 bc 01 	sts	0x01BC, r24
	      break;
     case mmDisplaySuccess:
	      //lcd_clear();
		  lcd_printf(3,1,PSTR("Password Restored"));
		  system_beep(1);
		  TimDisplay=0;
    ed36:	10 92 92 01 	sts	0x0192, r1
          stMenuMaster=mmDelayExit;
    ed3a:	8f e0       	ldi	r24, 0x0F	; 15
    ed3c:	62 cd       	rjmp	.-1340   	; 0xe802 <FMenuMaster+0x9a>
	      break;
     case mmDelayExit:
	      if (TimDisplay>=5)stMenuMaster=mmExitMaster;
    ed3e:	80 91 92 01 	lds	r24, 0x0192
    ed42:	85 30       	cpi	r24, 0x05	; 5
    ed44:	28 f0       	brcs	.+10     	; 0xed50 <FMenuMaster+0x5e8>
    ed46:	5c cd       	rjmp	.-1352   	; 0xe800 <FMenuMaster+0x98>
	      break;
     case mmExitMaster:
	      stMenuMaster=mmInitMaster;
    ed48:	10 92 4c 02 	sts	0x024C, r1
    ed4c:	81 e0       	ldi	r24, 0x01	; 1
    ed4e:	01 c0       	rjmp	.+2      	; 0xed52 <FMenuMaster+0x5ea>
    ed50:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
	      break;
	 }
  return Result;

}
    ed52:	e2 96       	adiw	r28, 0x32	; 50
    ed54:	0f b6       	in	r0, 0x3f	; 63
    ed56:	f8 94       	cli
    ed58:	de bf       	out	0x3e, r29	; 62
    ed5a:	0f be       	out	0x3f, r0	; 63
    ed5c:	cd bf       	out	0x3d, r28	; 61
    ed5e:	cf 91       	pop	r28
    ed60:	df 91       	pop	r29
    ed62:	1f 91       	pop	r17
    ed64:	0f 91       	pop	r16
    ed66:	ff 90       	pop	r15
    ed68:	ef 90       	pop	r14
    ed6a:	df 90       	pop	r13
    ed6c:	cf 90       	pop	r12
    ed6e:	08 95       	ret

0000ed70 <FMenuPassword>:
   return Result;	 
}



char FMenuPassword(){
    ed70:	af 92       	push	r10
    ed72:	bf 92       	push	r11
    ed74:	cf 92       	push	r12
    ed76:	df 92       	push	r13
    ed78:	ef 92       	push	r14
    ed7a:	0f 93       	push	r16
    ed7c:	1f 93       	push	r17
    ed7e:	df 93       	push	r29
    ed80:	cf 93       	push	r28
    ed82:	cd b7       	in	r28, 0x3d	; 61
    ed84:	de b7       	in	r29, 0x3e	; 62
    ed86:	6e 97       	sbiw	r28, 0x1e	; 30
    ed88:	0f b6       	in	r0, 0x3f	; 63
    ed8a:	f8 94       	cli
    ed8c:	de bf       	out	0x3e, r29	; 62
    ed8e:	0f be       	out	0x3f, r0	; 63
    ed90:	cd bf       	out	0x3d, r28	; 61
static char stMenuPasword=mpInitPassword,strPassword[10],PassStatus=MP_NONE;;
       char Result=MP_NONE,strMasterPass[10],strSystemPass[10],strAdminPass[10];
       char uiResult;

     Result=MP_NONE;
     switch(stMenuPasword){
    ed92:	e0 90 58 02 	lds	r14, 0x0258
    ed96:	81 e0       	ldi	r24, 0x01	; 1
    ed98:	e8 16       	cp	r14, r24
    ed9a:	01 f1       	breq	.+64     	; 0xeddc <FMenuPassword+0x6c>
    ed9c:	e8 16       	cp	r14, r24
    ed9e:	40 f0       	brcs	.+16     	; 0xedb0 <FMenuPassword+0x40>
    eda0:	e2 e0       	ldi	r30, 0x02	; 2
    eda2:	ee 16       	cp	r14, r30
    eda4:	e9 f1       	breq	.+122    	; 0xee20 <FMenuPassword+0xb0>
    eda6:	f3 e0       	ldi	r31, 0x03	; 3
    eda8:	ef 16       	cp	r14, r31
    edaa:	09 f0       	breq	.+2      	; 0xedae <FMenuPassword+0x3e>
    edac:	8c c0       	rjmp	.+280    	; 0xeec6 <FMenuPassword+0x156>
    edae:	86 c0       	rjmp	.+268    	; 0xeebc <FMenuPassword+0x14c>
	 case mpInitPassword:
	      lcd_clear();
    edb0:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
		  lcd_printf(1,1,PSTR("PASSWORD:"));
    edb4:	81 e0       	ldi	r24, 0x01	; 1
    edb6:	61 e0       	ldi	r22, 0x01	; 1
    edb8:	40 e6       	ldi	r20, 0x60	; 96
    edba:	5a e1       	ldi	r21, 0x1A	; 26
    edbc:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  lcd_printf(2,1,PSTR("_"));
    edc0:	82 e0       	ldi	r24, 0x02	; 2
    edc2:	61 e0       	ldi	r22, 0x01	; 1
    edc4:	4e e5       	ldi	r20, 0x5E	; 94
    edc6:	5a e1       	ldi	r21, 0x1A	; 26
    edc8:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    edcc:	84 e0       	ldi	r24, 0x04	; 4
    edce:	61 e0       	ldi	r22, 0x01	; 1
    edd0:	49 e4       	ldi	r20, 0x49	; 73
    edd2:	5a e1       	ldi	r21, 0x1A	; 26
    edd4:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  FillChar(strPassword,0,sizeof(strPassword));
		  stMenuPasword=mpInputPasword;
    edd8:	81 e0       	ldi	r24, 0x01	; 1
    edda:	6d c0       	rjmp	.+218    	; 0xeeb6 <FMenuPassword+0x146>
	      break;
     case mpInputPasword:
	 	      uiResult=UserInput(UI_NUM_PASSWORD,2,1,strPassword,0,8);
    eddc:	84 e0       	ldi	r24, 0x04	; 4
    edde:	62 e0       	ldi	r22, 0x02	; 2
    ede0:	41 e0       	ldi	r20, 0x01	; 1
    ede2:	2e e4       	ldi	r18, 0x4E	; 78
    ede4:	32 e0       	ldi	r19, 0x02	; 2
    ede6:	00 e0       	ldi	r16, 0x00	; 0
    ede8:	10 e0       	ldi	r17, 0x00	; 0
    edea:	a8 e0       	ldi	r26, 0x08	; 8
    edec:	ea 2e       	mov	r14, r26
    edee:	0e 94 dc 67 	call	0xcfb8	; 0xcfb8 <UserInput>
		  if (uiResult==USER_OK){
    edf2:	83 30       	cpi	r24, 0x03	; 3
    edf4:	11 f4       	brne	.+4      	; 0xedfa <FMenuPassword+0x8a>
		      stMenuPasword=mpProcessPassword;
    edf6:	82 e0       	ldi	r24, 0x02	; 2
    edf8:	5e c0       	rjmp	.+188    	; 0xeeb6 <FMenuPassword+0x146>
			  }
		  else
		  if (uiResult==USER_CANCEL){
    edfa:	81 30       	cpi	r24, 0x01	; 1
    edfc:	09 f4       	brne	.+2      	; 0xee00 <FMenuPassword+0x90>
    edfe:	4c c0       	rjmp	.+152    	; 0xee98 <FMenuPassword+0x128>
		      PassStatus=MP_CANCEL;
		      stMenuPasword=mpExit;
			  }
		  else
		  if (uiResult==USER_ENTRY)lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
    ee00:	84 30       	cpi	r24, 0x04	; 4
    ee02:	21 f4       	brne	.+8      	; 0xee0c <FMenuPassword+0x9c>
    ee04:	61 e0       	ldi	r22, 0x01	; 1
    ee06:	44 e3       	ldi	r20, 0x34	; 52
    ee08:	5a e1       	ldi	r21, 0x1A	; 26
    ee0a:	07 c0       	rjmp	.+14     	; 0xee1a <FMenuPassword+0xaa>
		  else
		  if (uiResult==USER_NO_DATA)lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    ee0c:	85 30       	cpi	r24, 0x05	; 5
    ee0e:	09 f0       	breq	.+2      	; 0xee12 <FMenuPassword+0xa2>
    ee10:	5a c0       	rjmp	.+180    	; 0xeec6 <FMenuPassword+0x156>
    ee12:	84 e0       	ldi	r24, 0x04	; 4
    ee14:	61 e0       	ldi	r22, 0x01	; 1
    ee16:	4f e1       	ldi	r20, 0x1F	; 31
    ee18:	5a e1       	ldi	r21, 0x1A	; 26
    ee1a:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
    ee1e:	53 c0       	rjmp	.+166    	; 0xeec6 <FMenuPassword+0x156>
          break;	 
	 case mpProcessPassword:
		      
	      sprintf_P(strMasterPass,PSTR(MASTER_PASSWORD)); 
    ee20:	00 d0       	rcall	.+0      	; 0xee22 <FMenuPassword+0xb2>
    ee22:	00 d0       	rcall	.+0      	; 0xee24 <FMenuPassword+0xb4>
    ee24:	8e 01       	movw	r16, r28
    ee26:	0f 5f       	subi	r16, 0xFF	; 255
    ee28:	1f 4f       	sbci	r17, 0xFF	; 255
    ee2a:	ed b7       	in	r30, 0x3d	; 61
    ee2c:	fe b7       	in	r31, 0x3e	; 62
    ee2e:	12 83       	std	Z+2, r17	; 0x02
    ee30:	01 83       	std	Z+1, r16	; 0x01
    ee32:	87 e1       	ldi	r24, 0x17	; 23
    ee34:	9a e1       	ldi	r25, 0x1A	; 26
    ee36:	94 83       	std	Z+4, r25	; 0x04
    ee38:	83 83       	std	Z+3, r24	; 0x03
    ee3a:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	      eeprom_read_block((void*) &strAdminPass, (const void*) &DefSpvPassword, 10);
    ee3e:	0f 90       	pop	r0
    ee40:	0f 90       	pop	r0
    ee42:	0f 90       	pop	r0
    ee44:	0f 90       	pop	r0
    ee46:	f5 e1       	ldi	r31, 0x15	; 21
    ee48:	cf 2e       	mov	r12, r31
    ee4a:	d1 2c       	mov	r13, r1
    ee4c:	cc 0e       	add	r12, r28
    ee4e:	dd 1e       	adc	r13, r29
    ee50:	c6 01       	movw	r24, r12
    ee52:	61 e0       	ldi	r22, 0x01	; 1
    ee54:	70 e0       	ldi	r23, 0x00	; 0
    ee56:	4a e0       	ldi	r20, 0x0A	; 10
    ee58:	50 e0       	ldi	r21, 0x00	; 0
    ee5a:	0e 94 30 ad 	call	0x15a60	; 0x15a60 <__eerd_block_m128>
	      eeprom_read_block((void*) &strSystemPass, (const void*) &DefSysPassword, 10);
    ee5e:	eb e0       	ldi	r30, 0x0B	; 11
    ee60:	ae 2e       	mov	r10, r30
    ee62:	b1 2c       	mov	r11, r1
    ee64:	ac 0e       	add	r10, r28
    ee66:	bd 1e       	adc	r11, r29
    ee68:	c5 01       	movw	r24, r10
    ee6a:	6b e0       	ldi	r22, 0x0B	; 11
    ee6c:	70 e0       	ldi	r23, 0x00	; 0
    ee6e:	4a e0       	ldi	r20, 0x0A	; 10
    ee70:	50 e0       	ldi	r21, 0x00	; 0
    ee72:	0e 94 30 ad 	call	0x15a60	; 0x15a60 <__eerd_block_m128>
		  
		  if (strcmp(strMasterPass,strPassword)==0)
    ee76:	c8 01       	movw	r24, r16
    ee78:	6e e4       	ldi	r22, 0x4E	; 78
    ee7a:	72 e0       	ldi	r23, 0x02	; 2
    ee7c:	0e 94 e8 aa 	call	0x155d0	; 0x155d0 <strcmp>
    ee80:	00 97       	sbiw	r24, 0x00	; 0
    ee82:	11 f4       	brne	.+4      	; 0xee88 <FMenuPassword+0x118>
		       PassStatus=MP_VALID_MASTER;
    ee84:	83 e0       	ldi	r24, 0x03	; 3
    ee86:	08 c0       	rjmp	.+16     	; 0xee98 <FMenuPassword+0x128>
		  else
	      if (strcmp(strAdminPass,strPassword)==0){
    ee88:	c6 01       	movw	r24, r12
    ee8a:	6e e4       	ldi	r22, 0x4E	; 78
    ee8c:	72 e0       	ldi	r23, 0x02	; 2
    ee8e:	0e 94 e8 aa 	call	0x155d0	; 0x155d0 <strcmp>
    ee92:	00 97       	sbiw	r24, 0x00	; 0
    ee94:	21 f4       	brne	.+8      	; 0xee9e <FMenuPassword+0x12e>
		       PassStatus=MP_VALID_ADMIN;
    ee96:	84 e0       	ldi	r24, 0x04	; 4
    ee98:	80 93 4d 02 	sts	0x024D, r24
    ee9c:	0b c0       	rjmp	.+22     	; 0xeeb4 <FMenuPassword+0x144>
               //lcd_printf(3,1,PSTR("Admin"));
               //_delay_ms(5000);
			   }
		  else if (strcmp(strSystemPass,strPassword)==0){
    ee9e:	c5 01       	movw	r24, r10
    eea0:	6e e4       	ldi	r22, 0x4E	; 78
    eea2:	72 e0       	ldi	r23, 0x02	; 2
    eea4:	0e 94 e8 aa 	call	0x155d0	; 0x155d0 <strcmp>
    eea8:	00 97       	sbiw	r24, 0x00	; 0
    eeaa:	11 f4       	brne	.+4      	; 0xeeb0 <FMenuPassword+0x140>
		       PassStatus=MP_VALID_SYSTEM;
    eeac:	85 e0       	ldi	r24, 0x05	; 5
    eeae:	f4 cf       	rjmp	.-24     	; 0xee98 <FMenuPassword+0x128>
			   //lcd_printf(3,1,PSTR("System"));
               //_delay_ms(5000);
			   }
		  else PassStatus=MP_INVALID;
    eeb0:	e0 92 4d 02 	sts	0x024D, r14
		  stMenuPasword=mpExit;
    eeb4:	83 e0       	ldi	r24, 0x03	; 3
    eeb6:	80 93 58 02 	sts	0x0258, r24
    eeba:	05 c0       	rjmp	.+10     	; 0xeec6 <FMenuPassword+0x156>
	      break;
	 case mpExit:
	      //lcd_print(3,1,strPassword);
		  //_delay_ms(5000);
	      stMenuPasword=mpInitPassword;
    eebc:	10 92 58 02 	sts	0x0258, r1
	      Result=PassStatus;
    eec0:	80 91 4d 02 	lds	r24, 0x024D
    eec4:	01 c0       	rjmp	.+2      	; 0xeec8 <FMenuPassword+0x158>
    eec6:	80 e0       	ldi	r24, 0x00	; 0
	      break;
	 }
   return Result;
}
    eec8:	6e 96       	adiw	r28, 0x1e	; 30
    eeca:	0f b6       	in	r0, 0x3f	; 63
    eecc:	f8 94       	cli
    eece:	de bf       	out	0x3e, r29	; 62
    eed0:	0f be       	out	0x3f, r0	; 63
    eed2:	cd bf       	out	0x3d, r28	; 61
    eed4:	cf 91       	pop	r28
    eed6:	df 91       	pop	r29
    eed8:	1f 91       	pop	r17
    eeda:	0f 91       	pop	r16
    eedc:	ef 90       	pop	r14
    eede:	df 90       	pop	r13
    eee0:	cf 90       	pop	r12
    eee2:	bf 90       	pop	r11
    eee4:	af 90       	pop	r10
    eee6:	08 95       	ret

0000eee8 <SetBaudRate>:
	 //Spooling HFCx 0000
	 cmdPrint=0b00010000|(1<<PRN_PAPER_CUT);
	 IsFreePrinting=True;
}

void SetBaudRate(char ComAddr,char brMap){//Com1..Com4
    eee8:	1f 93       	push	r17
    eeea:	28 2f       	mov	r18, r24
    eeec:	96 2f       	mov	r25, r22
unsigned int brValue=9600;
char brMessage=0;

     if ((ComAddr>=1)&&(ComAddr<=2)){
    eeee:	18 2f       	mov	r17, r24
    eef0:	11 50       	subi	r17, 0x01	; 1
    eef2:	12 30       	cpi	r17, 0x02	; 2
    eef4:	50 f4       	brcc	.+20     	; 0xef0a <SetBaudRate+0x22>
	     brValue=GetBaudrate(brMap);
    eef6:	86 2f       	mov	r24, r22
    eef8:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <GetBaudrate>
	      uart_init((ComAddr-1),brValue);
    eefc:	ac 01       	movw	r20, r24
    eefe:	60 e0       	ldi	r22, 0x00	; 0
    ef00:	70 e0       	ldi	r23, 0x00	; 0
    ef02:	81 2f       	mov	r24, r17
    ef04:	0e 94 bf a8 	call	0x1517e	; 0x1517e <uart_init>
    ef08:	18 c0       	rjmp	.+48     	; 0xef3a <SetBaudRate+0x52>
	 }else
     if ((ComAddr>=3)&&(ComAddr<=4)){
    ef0a:	83 50       	subi	r24, 0x03	; 3
    ef0c:	82 30       	cpi	r24, 0x02	; 2
    ef0e:	a8 f4       	brcc	.+42     	; 0xef3a <SetBaudRate+0x52>
	     //[COM][Baud]
		 brMessage=((ComAddr<<4)|(0x0F&brMap));
    ef10:	9f 70       	andi	r25, 0x0F	; 15
    ef12:	62 2f       	mov	r22, r18
    ef14:	62 95       	swap	r22
    ef16:	60 7f       	andi	r22, 0xF0	; 240
    ef18:	69 2b       	or	r22, r25
		 if (iSequencePooling>0)SendPoolingCommand(SC_BAUDRATE,brMessage);
    ef1a:	80 91 80 01 	lds	r24, 0x0180
    ef1e:	88 23       	and	r24, r24
    ef20:	49 f0       	breq	.+18     	; 0xef34 <SetBaudRate+0x4c>
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
    ef22:	86 e0       	ldi	r24, 0x06	; 6
    ef24:	80 93 a7 05 	sts	0x05A7, r24
	 PoolMsg=plMsg;
    ef28:	60 93 d3 0b 	sts	0x0BD3, r22
     IsControlPooling=True;
    ef2c:	81 e0       	ldi	r24, 0x01	; 1
    ef2e:	80 93 84 01 	sts	0x0184, r24
    ef32:	03 c0       	rjmp	.+6      	; 0xef3a <SetBaudRate+0x52>
	 }else
     if ((ComAddr>=3)&&(ComAddr<=4)){
	     //[COM][Baud]
		 brMessage=((ComAddr<<4)|(0x0F&brMap));
		 if (iSequencePooling>0)SendPoolingCommand(SC_BAUDRATE,brMessage);
		 else SendSlaveCommand(SC_BAUDRATE,brMessage);
    ef34:	86 e0       	ldi	r24, 0x06	; 6
    ef36:	0e 94 3d 60 	call	0xc07a	; 0xc07a <SendSlaveCommand>
		 
	 }
}
    ef3a:	1f 91       	pop	r17
    ef3c:	08 95       	ret

0000ef3e <FSettingSystem>:
	      break;
	 }
     return Result;
}

char FSettingSystem(){
    ef3e:	af 92       	push	r10
    ef40:	bf 92       	push	r11
    ef42:	cf 92       	push	r12
    ef44:	df 92       	push	r13
    ef46:	ef 92       	push	r14
    ef48:	ff 92       	push	r15
    ef4a:	0f 93       	push	r16
    ef4c:	1f 93       	push	r17
    ef4e:	df 93       	push	r29
    ef50:	cf 93       	push	r28
    ef52:	cd b7       	in	r28, 0x3d	; 61
    ef54:	de b7       	in	r29, 0x3e	; 62
    ef56:	64 97       	sbiw	r28, 0x14	; 20
    ef58:	0f b6       	in	r0, 0x3f	; 63
    ef5a:	f8 94       	cli
    ef5c:	de bf       	out	0x3e, r29	; 62
    ef5e:	0f be       	out	0x3f, r0	; 63
    ef60:	cd bf       	out	0x3d, r28	; 61
       char SubMenu,Result=MENU_NONE;
	   char HGMode;
       char lcdteks[20];
	   int bValue;

     switch(stSettingSytem){
    ef62:	80 91 1c 02 	lds	r24, 0x021C
    ef66:	82 30       	cpi	r24, 0x02	; 2
    ef68:	09 f4       	brne	.+2      	; 0xef6c <FSettingSystem+0x2e>
    ef6a:	b9 c0       	rjmp	.+370    	; 0xf0de <FSettingSystem+0x1a0>
    ef6c:	83 30       	cpi	r24, 0x03	; 3
    ef6e:	30 f4       	brcc	.+12     	; 0xef7c <FSettingSystem+0x3e>
    ef70:	88 23       	and	r24, r24
    ef72:	71 f0       	breq	.+28     	; 0xef90 <FSettingSystem+0x52>
    ef74:	81 30       	cpi	r24, 0x01	; 1
    ef76:	09 f0       	breq	.+2      	; 0xef7a <FSettingSystem+0x3c>
    ef78:	44 c1       	rjmp	.+648    	; 0xf202 <FSettingSystem+0x2c4>
    ef7a:	79 c0       	rjmp	.+242    	; 0xf06e <FSettingSystem+0x130>
    ef7c:	84 30       	cpi	r24, 0x04	; 4
    ef7e:	09 f4       	brne	.+2      	; 0xef82 <FSettingSystem+0x44>
    ef80:	35 c1       	rjmp	.+618    	; 0xf1ec <FSettingSystem+0x2ae>
    ef82:	84 30       	cpi	r24, 0x04	; 4
    ef84:	08 f4       	brcc	.+2      	; 0xef88 <FSettingSystem+0x4a>
    ef86:	08 c1       	rjmp	.+528    	; 0xf198 <FSettingSystem+0x25a>
    ef88:	85 30       	cpi	r24, 0x05	; 5
    ef8a:	09 f0       	breq	.+2      	; 0xef8e <FSettingSystem+0x50>
    ef8c:	3a c1       	rjmp	.+628    	; 0xf202 <FSettingSystem+0x2c4>
    ef8e:	35 c1       	rjmp	.+618    	; 0xf1fa <FSettingSystem+0x2bc>
	 case ssInitSettingSystem:
	      IFType=eeprom_read_byte(&DefInitIFT);
    ef90:	87 e3       	ldi	r24, 0x37	; 55
    ef92:	91 e0       	ldi	r25, 0x01	; 1
    ef94:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
    ef98:	18 2f       	mov	r17, r24
    ef9a:	80 93 00 01 	sts	0x0100, r24
		  HGMode=eeprom_read_byte(&DefHGMode);
    ef9e:	83 ec       	ldi	r24, 0xC3	; 195
    efa0:	93 e0       	ldi	r25, 0x03	; 3
    efa2:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
    efa6:	08 2f       	mov	r16, r24

	      if (IFType==IT_NONE)sprintf_P(lcdteks,PSTR("1.Mode:None"));
    efa8:	11 23       	and	r17, r17
    efaa:	69 f4       	brne	.+26     	; 0xefc6 <FSettingSystem+0x88>
    efac:	00 d0       	rcall	.+0      	; 0xefae <FSettingSystem+0x70>
    efae:	00 d0       	rcall	.+0      	; 0xefb0 <FSettingSystem+0x72>
    efb0:	ce 01       	movw	r24, r28
    efb2:	01 96       	adiw	r24, 0x01	; 1
    efb4:	ad b7       	in	r26, 0x3d	; 61
    efb6:	be b7       	in	r27, 0x3e	; 62
    efb8:	12 96       	adiw	r26, 0x02	; 2
    efba:	9c 93       	st	X, r25
    efbc:	8e 93       	st	-X, r24
    efbe:	11 97       	sbiw	r26, 0x01	; 1
    efc0:	80 ec       	ldi	r24, 0xC0	; 192
    efc2:	9f e0       	ldi	r25, 0x0F	; 15
    efc4:	1d c0       	rjmp	.+58     	; 0xf000 <FSettingSystem+0xc2>
		  else
	      if (IFType==IT_SLAVE)sprintf_P(lcdteks,PSTR("1.Mode:Slave"));
    efc6:	11 30       	cpi	r17, 0x01	; 1
    efc8:	69 f4       	brne	.+26     	; 0xefe4 <FSettingSystem+0xa6>
    efca:	00 d0       	rcall	.+0      	; 0xefcc <FSettingSystem+0x8e>
    efcc:	00 d0       	rcall	.+0      	; 0xefce <FSettingSystem+0x90>
    efce:	ce 01       	movw	r24, r28
    efd0:	01 96       	adiw	r24, 0x01	; 1
    efd2:	ed b7       	in	r30, 0x3d	; 61
    efd4:	fe b7       	in	r31, 0x3e	; 62
    efd6:	92 83       	std	Z+2, r25	; 0x02
    efd8:	81 83       	std	Z+1, r24	; 0x01
    efda:	83 eb       	ldi	r24, 0xB3	; 179
    efdc:	9f e0       	ldi	r25, 0x0F	; 15
    efde:	94 83       	std	Z+4, r25	; 0x04
    efe0:	83 83       	std	Z+3, r24	; 0x03
    efe2:	12 c0       	rjmp	.+36     	; 0xf008 <FSettingSystem+0xca>
		  else
	      if (IFType==IT_STANDALONE)sprintf_P(lcdteks,PSTR("1.Mode:Standalone"));
    efe4:	12 30       	cpi	r17, 0x02	; 2
    efe6:	b1 f4       	brne	.+44     	; 0xf014 <FSettingSystem+0xd6>
    efe8:	00 d0       	rcall	.+0      	; 0xefea <FSettingSystem+0xac>
    efea:	00 d0       	rcall	.+0      	; 0xefec <FSettingSystem+0xae>
    efec:	ce 01       	movw	r24, r28
    efee:	01 96       	adiw	r24, 0x01	; 1
    eff0:	ad b7       	in	r26, 0x3d	; 61
    eff2:	be b7       	in	r27, 0x3e	; 62
    eff4:	12 96       	adiw	r26, 0x02	; 2
    eff6:	9c 93       	st	X, r25
    eff8:	8e 93       	st	-X, r24
    effa:	11 97       	sbiw	r26, 0x01	; 1
    effc:	81 ea       	ldi	r24, 0xA1	; 161
    effe:	9f e0       	ldi	r25, 0x0F	; 15
    f000:	14 96       	adiw	r26, 0x04	; 4
    f002:	9c 93       	st	X, r25
    f004:	8e 93       	st	-X, r24
    f006:	13 97       	sbiw	r26, 0x03	; 3
    f008:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
    f00c:	0f 90       	pop	r0
    f00e:	0f 90       	pop	r0
    f010:	0f 90       	pop	r0
    f012:	0f 90       	pop	r0

	      lcd_clear();
    f014:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
		  lcd_print(1,1,lcdteks);
    f018:	81 e0       	ldi	r24, 0x01	; 1
    f01a:	61 e0       	ldi	r22, 0x01	; 1
    f01c:	ae 01       	movw	r20, r28
    f01e:	4f 5f       	subi	r20, 0xFF	; 255
    f020:	5f 4f       	sbci	r21, 0xFF	; 255
    f022:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
		  lcd_printf(2,1,PSTR("2.Baudrate"));
    f026:	82 e0       	ldi	r24, 0x02	; 2
    f028:	61 e0       	ldi	r22, 0x01	; 1
    f02a:	46 e9       	ldi	r20, 0x96	; 150
    f02c:	5f e0       	ldi	r21, 0x0F	; 15
    f02e:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>

		  if (HGMode==HM_TTL)lcd_printf(3,1,PSTR("3.COM3:TTL"));
    f032:	00 23       	and	r16, r16
    f034:	29 f4       	brne	.+10     	; 0xf040 <FSettingSystem+0x102>
    f036:	83 e0       	ldi	r24, 0x03	; 3
    f038:	61 e0       	ldi	r22, 0x01	; 1
    f03a:	4b e8       	ldi	r20, 0x8B	; 139
    f03c:	5f e0       	ldi	r21, 0x0F	; 15
    f03e:	0d c0       	rjmp	.+26     	; 0xf05a <FSettingSystem+0x11c>
		  else
		  if (HGMode==HM_232)lcd_printf(3,1,PSTR("3.COM3:232"));
    f040:	01 30       	cpi	r16, 0x01	; 1
    f042:	29 f4       	brne	.+10     	; 0xf04e <FSettingSystem+0x110>
    f044:	83 e0       	ldi	r24, 0x03	; 3
    f046:	61 e0       	ldi	r22, 0x01	; 1
    f048:	40 e8       	ldi	r20, 0x80	; 128
    f04a:	5f e0       	ldi	r21, 0x0F	; 15
    f04c:	06 c0       	rjmp	.+12     	; 0xf05a <FSettingSystem+0x11c>
		  else
		  if (HGMode==HM_485)lcd_printf(3,1,PSTR("3.COM3:485"));		  
    f04e:	02 30       	cpi	r16, 0x02	; 2
    f050:	31 f4       	brne	.+12     	; 0xf05e <FSettingSystem+0x120>
    f052:	83 e0       	ldi	r24, 0x03	; 3
    f054:	61 e0       	ldi	r22, 0x01	; 1
    f056:	45 e7       	ldi	r20, 0x75	; 117
    f058:	5f e0       	ldi	r21, 0x0F	; 15
    f05a:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  lcd_printf(4,1,PSTR("[*]Back      "));
    f05e:	84 e0       	ldi	r24, 0x04	; 4
    f060:	61 e0       	ldi	r22, 0x01	; 1
    f062:	47 e6       	ldi	r20, 0x67	; 103
    f064:	5f e0       	ldi	r21, 0x0F	; 15
    f066:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  stSettingSytem=ssMenuSelect;
    f06a:	81 e0       	ldi	r24, 0x01	; 1
    f06c:	bc c0       	rjmp	.+376    	; 0xf1e6 <FSettingSystem+0x2a8>
	      break;
     case ssMenuSelect:
          KeyPressed=_key_scan(1);
    f06e:	81 e0       	ldi	r24, 0x01	; 1
    f070:	0e 94 6d a6 	call	0x14cda	; 0x14cda <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
    f074:	0e 94 ce a5 	call	0x14b9c	; 0x14b9c <_key_btn>
		  if (KeyChar=='1'){
    f078:	81 33       	cpi	r24, 0x31	; 49
    f07a:	99 f4       	brne	.+38     	; 0xf0a2 <FSettingSystem+0x164>
		      IFType=((IFType+1)%3);
    f07c:	80 91 00 01 	lds	r24, 0x0100
    f080:	90 e0       	ldi	r25, 0x00	; 0
    f082:	01 96       	adiw	r24, 0x01	; 1
    f084:	63 e0       	ldi	r22, 0x03	; 3
    f086:	70 e0       	ldi	r23, 0x00	; 0
    f088:	0e 94 8e aa 	call	0x1551c	; 0x1551c <__divmodhi4>
    f08c:	80 93 00 01 	sts	0x0100, r24
			  SendSlaveCommand(IFType,DispenserBrand);
    f090:	60 91 5e 01 	lds	r22, 0x015E
    f094:	0e 94 3d 60 	call	0xc07a	; 0xc07a <SendSlaveCommand>
			  eeprom_write_byte(&DefInitIFT,IFType);
    f098:	87 e3       	ldi	r24, 0x37	; 55
    f09a:	91 e0       	ldi	r25, 0x01	; 1
    f09c:	60 91 00 01 	lds	r22, 0x0100
    f0a0:	17 c0       	rjmp	.+46     	; 0xf0d0 <FSettingSystem+0x192>
			  stSettingSytem=ssInitSettingSystem;
		  }
		  else
		  if (KeyChar=='2'){
    f0a2:	82 33       	cpi	r24, 0x32	; 50
    f0a4:	09 f4       	brne	.+2      	; 0xf0a8 <FSettingSystem+0x16a>
    f0a6:	99 c0       	rjmp	.+306    	; 0xf1da <FSettingSystem+0x29c>
		      stSettingSytem=ssComSettings;
		  }
		  else
		  if (KeyChar=='3'){
    f0a8:	83 33       	cpi	r24, 0x33	; 51
    f0aa:	a9 f4       	brne	.+42     	; 0xf0d6 <FSettingSystem+0x198>
		      HGMode=eeprom_read_byte(&DefHGMode);
    f0ac:	83 ec       	ldi	r24, 0xC3	; 195
    f0ae:	93 e0       	ldi	r25, 0x03	; 3
    f0b0:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
		      HGMode=((HGMode+1)%3);
    f0b4:	90 e0       	ldi	r25, 0x00	; 0
    f0b6:	01 96       	adiw	r24, 0x01	; 1
    f0b8:	63 e0       	ldi	r22, 0x03	; 3
    f0ba:	70 e0       	ldi	r23, 0x00	; 0
    f0bc:	0e 94 8e aa 	call	0x1551c	; 0x1551c <__divmodhi4>
    f0c0:	18 2f       	mov	r17, r24
			  SendSlaveCommand(SC_HGM_MODE,HGMode);
    f0c2:	81 e2       	ldi	r24, 0x21	; 33
    f0c4:	61 2f       	mov	r22, r17
    f0c6:	0e 94 3d 60 	call	0xc07a	; 0xc07a <SendSlaveCommand>
			  eeprom_write_byte(&DefHGMode,HGMode);
    f0ca:	83 ec       	ldi	r24, 0xC3	; 195
    f0cc:	93 e0       	ldi	r25, 0x03	; 3
    f0ce:	61 2f       	mov	r22, r17
    f0d0:	0e 94 52 ad 	call	0x15aa4	; 0x15aa4 <__eewr_byte_m128>
    f0d4:	8f c0       	rjmp	.+286    	; 0xf1f4 <FSettingSystem+0x2b6>
			  stSettingSytem=ssInitSettingSystem;
		  }
		  //else
		  if (KeyChar=='*'){
    f0d6:	8a 32       	cpi	r24, 0x2A	; 42
    f0d8:	09 f4       	brne	.+2      	; 0xf0dc <FSettingSystem+0x19e>
    f0da:	84 c0       	rjmp	.+264    	; 0xf1e4 <FSettingSystem+0x2a6>
    f0dc:	92 c0       	rjmp	.+292    	; 0xf202 <FSettingSystem+0x2c4>
		      stSettingSytem=ssExitSystemSettings;
		  }		  
		  break;
	 case ssComSettings:
	      lcd_clear();
    f0de:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
		  lcd_printf(1,1,PSTR("     -Baudrate-     "));
    f0e2:	81 e0       	ldi	r24, 0x01	; 1
    f0e4:	61 e0       	ldi	r22, 0x01	; 1
    f0e6:	42 e5       	ldi	r20, 0x52	; 82
    f0e8:	5f e0       	ldi	r21, 0x0F	; 15
    f0ea:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
    f0ee:	01 e0       	ldi	r16, 0x01	; 1
    f0f0:	10 e0       	ldi	r17, 0x00	; 0

		  for (i=0;i<4;i++){
		       bValue=GetBaudrate(eeprom_read_byte(&DefBaudrate[i]));
			   if (bValue==5787)bValue=12213;
		       sprintf_P(lcdteks,PSTR("COM%d:%d"),i+1,bValue);
    f0f2:	6e 01       	movw	r12, r28
    f0f4:	08 94       	sec
    f0f6:	c1 1c       	adc	r12, r1
    f0f8:	d1 1c       	adc	r13, r1
    f0fa:	89 e4       	ldi	r24, 0x49	; 73
    f0fc:	a8 2e       	mov	r10, r24
    f0fe:	8f e0       	ldi	r24, 0x0F	; 15
    f100:	b8 2e       	mov	r11, r24
			   lcd_print((2+(i%2)),1+(i/2*11),lcdteks);
    f102:	bb e0       	ldi	r27, 0x0B	; 11
    f104:	eb 2e       	mov	r14, r27
		      stSettingSytem=ssExitSystemSettings;
		  }		  
		  break;
	 case ssComSettings:
	      lcd_clear();
		  lcd_printf(1,1,PSTR("     -Baudrate-     "));
    f106:	f0 2e       	mov	r15, r16
    f108:	fa 94       	dec	r15

		  for (i=0;i<4;i++){
		       bValue=GetBaudrate(eeprom_read_byte(&DefBaudrate[i]));
    f10a:	c8 01       	movw	r24, r16
    f10c:	80 5c       	subi	r24, 0xC0	; 192
    f10e:	9e 4f       	sbci	r25, 0xFE	; 254
    f110:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
    f114:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <GetBaudrate>
			   if (bValue==5787)bValue=12213;
    f118:	b6 e1       	ldi	r27, 0x16	; 22
    f11a:	8b 39       	cpi	r24, 0x9B	; 155
    f11c:	9b 07       	cpc	r25, r27
    f11e:	11 f4       	brne	.+4      	; 0xf124 <FSettingSystem+0x1e6>
    f120:	85 eb       	ldi	r24, 0xB5	; 181
    f122:	9f e2       	ldi	r25, 0x2F	; 47
		       sprintf_P(lcdteks,PSTR("COM%d:%d"),i+1,bValue);
    f124:	ed b7       	in	r30, 0x3d	; 61
    f126:	fe b7       	in	r31, 0x3e	; 62
    f128:	38 97       	sbiw	r30, 0x08	; 8
    f12a:	0f b6       	in	r0, 0x3f	; 63
    f12c:	f8 94       	cli
    f12e:	fe bf       	out	0x3e, r31	; 62
    f130:	0f be       	out	0x3f, r0	; 63
    f132:	ed bf       	out	0x3d, r30	; 61
    f134:	31 96       	adiw	r30, 0x01	; 1
    f136:	ad b7       	in	r26, 0x3d	; 61
    f138:	be b7       	in	r27, 0x3e	; 62
    f13a:	12 96       	adiw	r26, 0x02	; 2
    f13c:	dc 92       	st	X, r13
    f13e:	ce 92       	st	-X, r12
    f140:	11 97       	sbiw	r26, 0x01	; 1
    f142:	b3 82       	std	Z+3, r11	; 0x03
    f144:	a2 82       	std	Z+2, r10	; 0x02
    f146:	15 83       	std	Z+5, r17	; 0x05
    f148:	04 83       	std	Z+4, r16	; 0x04
    f14a:	97 83       	std	Z+7, r25	; 0x07
    f14c:	86 83       	std	Z+6, r24	; 0x06
    f14e:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
			   lcd_print((2+(i%2)),1+(i/2*11),lcdteks);
    f152:	ed b7       	in	r30, 0x3d	; 61
    f154:	fe b7       	in	r31, 0x3e	; 62
    f156:	38 96       	adiw	r30, 0x08	; 8
    f158:	0f b6       	in	r0, 0x3f	; 63
    f15a:	f8 94       	cli
    f15c:	fe bf       	out	0x3e, r31	; 62
    f15e:	0f be       	out	0x3f, r0	; 63
    f160:	ed bf       	out	0x3d, r30	; 61
    f162:	6f 2d       	mov	r22, r15
    f164:	66 95       	lsr	r22
    f166:	6e 9d       	mul	r22, r14
    f168:	b0 01       	movw	r22, r0
    f16a:	11 24       	eor	r1, r1
    f16c:	6f 5f       	subi	r22, 0xFF	; 255
    f16e:	f1 e0       	ldi	r31, 0x01	; 1
    f170:	ff 22       	and	r15, r31
    f172:	8f 2d       	mov	r24, r15
    f174:	8e 5f       	subi	r24, 0xFE	; 254
    f176:	a6 01       	movw	r20, r12
    f178:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
    f17c:	0f 5f       	subi	r16, 0xFF	; 255
    f17e:	1f 4f       	sbci	r17, 0xFF	; 255
		  break;
	 case ssComSettings:
	      lcd_clear();
		  lcd_printf(1,1,PSTR("     -Baudrate-     "));

		  for (i=0;i<4;i++){
    f180:	05 30       	cpi	r16, 0x05	; 5
    f182:	11 05       	cpc	r17, r1
    f184:	09 f0       	breq	.+2      	; 0xf188 <FSettingSystem+0x24a>
    f186:	bf cf       	rjmp	.-130    	; 0xf106 <FSettingSystem+0x1c8>
		       bValue=GetBaudrate(eeprom_read_byte(&DefBaudrate[i]));
			   if (bValue==5787)bValue=12213;
		       sprintf_P(lcdteks,PSTR("COM%d:%d"),i+1,bValue);
			   lcd_print((2+(i%2)),1+(i/2*11),lcdteks);
		  }
		  lcd_printf(4,1,PSTR("[*]Back     "));
    f188:	84 e0       	ldi	r24, 0x04	; 4
    f18a:	61 e0       	ldi	r22, 0x01	; 1
    f18c:	4c e3       	ldi	r20, 0x3C	; 60
    f18e:	5f e0       	ldi	r21, 0x0F	; 15
    f190:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  stSettingSytem=ssBaudrateInput;
    f194:	83 e0       	ldi	r24, 0x03	; 3
    f196:	27 c0       	rjmp	.+78     	; 0xf1e6 <FSettingSystem+0x2a8>
	      break;
     case ssBaudrateInput:
	      KeyPressed=_key_scan(1);
    f198:	81 e0       	ldi	r24, 0x01	; 1
    f19a:	0e 94 6d a6 	call	0x14cda	; 0x14cda <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
    f19e:	0e 94 ce a5 	call	0x14b9c	; 0x14b9c <_key_btn>
    f1a2:	e8 2e       	mov	r14, r24
		  if ((KeyChar>='1')&&(KeyChar<='4')){
    f1a4:	81 53       	subi	r24, 0x31	; 49
    f1a6:	84 30       	cpi	r24, 0x04	; 4
    f1a8:	d0 f4       	brcc	.+52     	; 0xf1de <FSettingSystem+0x2a0>
		       brVal=eeprom_read_byte(&DefBaudrate[KeyChar-'1']);
    f1aa:	0e 2d       	mov	r16, r14
    f1ac:	10 e0       	ldi	r17, 0x00	; 0
    f1ae:	00 5f       	subi	r16, 0xF0	; 240
    f1b0:	1e 4f       	sbci	r17, 0xFE	; 254
    f1b2:	c8 01       	movw	r24, r16
    f1b4:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
			   brVal=((brVal+1)%3)+1;
    f1b8:	90 e0       	ldi	r25, 0x00	; 0
    f1ba:	01 96       	adiw	r24, 0x01	; 1
    f1bc:	63 e0       	ldi	r22, 0x03	; 3
    f1be:	70 e0       	ldi	r23, 0x00	; 0
    f1c0:	0e 94 8e aa 	call	0x1551c	; 0x1551c <__divmodhi4>
    f1c4:	f8 2e       	mov	r15, r24
    f1c6:	f3 94       	inc	r15
			   SetBaudRate(KeyChar-'0',brVal);
    f1c8:	8e 2d       	mov	r24, r14
    f1ca:	80 53       	subi	r24, 0x30	; 48
    f1cc:	6f 2d       	mov	r22, r15
    f1ce:	0e 94 74 77 	call	0xeee8	; 0xeee8 <SetBaudRate>
			   eeprom_write_byte(&DefBaudrate[KeyChar-'1'],brVal);
    f1d2:	c8 01       	movw	r24, r16
    f1d4:	6f 2d       	mov	r22, r15
    f1d6:	0e 94 52 ad 	call	0x15aa4	; 0x15aa4 <__eewr_byte_m128>
               stSettingSytem=ssComSettings;
    f1da:	82 e0       	ldi	r24, 0x02	; 2
    f1dc:	04 c0       	rjmp	.+8      	; 0xf1e6 <FSettingSystem+0x2a8>
		  }else if (KeyChar=='*')
    f1de:	2a e2       	ldi	r18, 0x2A	; 42
    f1e0:	e2 16       	cp	r14, r18
    f1e2:	79 f4       	brne	.+30     	; 0xf202 <FSettingSystem+0x2c4>
		      stSettingSytem=ssExitSystemSettings;		  	
    f1e4:	85 e0       	ldi	r24, 0x05	; 5
    f1e6:	80 93 1c 02 	sts	0x021C, r24
    f1ea:	0b c0       	rjmp	.+22     	; 0xf202 <FSettingSystem+0x2c4>
	      break;
	 case ssPumpPoolingSettings:
          SubMenu=FSettingPumpPooling();
    f1ec:	0e 94 21 5c 	call	0xb842	; 0xb842 <FSettingPumpPooling>
		  if (SubMenu==MENU_DONE)stSettingSytem=ssInitSettingSystem;
    f1f0:	81 30       	cpi	r24, 0x01	; 1
    f1f2:	39 f4       	brne	.+14     	; 0xf202 <FSettingSystem+0x2c4>
    f1f4:	10 92 1c 02 	sts	0x021C, r1
    f1f8:	04 c0       	rjmp	.+8      	; 0xf202 <FSettingSystem+0x2c4>
	      break;
     case ssExitSystemSettings:
	      stSettingSytem=ssInitSettingSystem;
    f1fa:	10 92 1c 02 	sts	0x021C, r1
    f1fe:	81 e0       	ldi	r24, 0x01	; 1
    f200:	01 c0       	rjmp	.+2      	; 0xf204 <FSettingSystem+0x2c6>
    f202:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
	      break;
	 }
     return Result;
}
    f204:	64 96       	adiw	r28, 0x14	; 20
    f206:	0f b6       	in	r0, 0x3f	; 63
    f208:	f8 94       	cli
    f20a:	de bf       	out	0x3e, r29	; 62
    f20c:	0f be       	out	0x3f, r0	; 63
    f20e:	cd bf       	out	0x3d, r28	; 61
    f210:	cf 91       	pop	r28
    f212:	df 91       	pop	r29
    f214:	1f 91       	pop	r17
    f216:	0f 91       	pop	r16
    f218:	ff 90       	pop	r15
    f21a:	ef 90       	pop	r14
    f21c:	df 90       	pop	r13
    f21e:	cf 90       	pop	r12
    f220:	bf 90       	pop	r11
    f222:	af 90       	pop	r10
    f224:	08 95       	ret

0000f226 <FMenuSettings>:
char FMenuSettings(){
char Result=MENU_NONE;
static char stMenuSettings=msInit,PageSetting=1;
     char KeyPressed,KeyChar,SubMenu;

     switch(stMenuSettings){
    f226:	80 91 22 02 	lds	r24, 0x0222
    f22a:	e8 2f       	mov	r30, r24
    f22c:	f0 e0       	ldi	r31, 0x00	; 0
    f22e:	e3 31       	cpi	r30, 0x13	; 19
    f230:	f1 05       	cpc	r31, r1
    f232:	08 f0       	brcs	.+2      	; 0xf236 <FMenuSettings+0x10>
    f234:	bf c0       	rjmp	.+382    	; 0xf3b4 <FMenuSettings+0x18e>
    f236:	e3 58       	subi	r30, 0x83	; 131
    f238:	ff 4f       	sbci	r31, 0xFF	; 255
    f23a:	ee 0f       	add	r30, r30
    f23c:	ff 1f       	adc	r31, r31
    f23e:	05 90       	lpm	r0, Z+
    f240:	f4 91       	lpm	r31, Z+
    f242:	e0 2d       	mov	r30, r0
    f244:	09 94       	ijmp
	 case msInit:
		  lcd_clear();
    f246:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
		  PageSetting=1;
    f24a:	81 e0       	ldi	r24, 0x01	; 1
    f24c:	80 93 57 01 	sts	0x0157, r24
    f250:	a9 c0       	rjmp	.+338    	; 0xf3a4 <FMenuSettings+0x17e>
		  stMenuSettings=msDisplayPage;
		  break;
	 case msDisplayPage:
	      stMenuSettings=msDisplayPage+PageSetting;
    f252:	80 91 57 01 	lds	r24, 0x0157
    f256:	8f 5f       	subi	r24, 0xFF	; 255
    f258:	a5 c0       	rjmp	.+330    	; 0xf3a4 <FMenuSettings+0x17e>
          break; 	 
	 case msDisplayPage1:
		  lcd_printf(1, 1, PSTR("1)Product  5)Printer"));
    f25a:	81 e0       	ldi	r24, 0x01	; 1
    f25c:	61 e0       	ldi	r22, 0x01	; 1
    f25e:	4f e3       	ldi	r20, 0x3F	; 63
    f260:	54 e1       	ldi	r21, 0x14	; 20
    f262:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  lcd_printf(2, 1, PSTR("2)Pump     6)Host   "));
    f266:	82 e0       	ldi	r24, 0x02	; 2
    f268:	61 e0       	ldi	r22, 0x01	; 1
    f26a:	4a e2       	ldi	r20, 0x2A	; 42
    f26c:	54 e1       	ldi	r21, 0x14	; 20
    f26e:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  lcd_printf(3, 1, PSTR("3)Decimal  7)Next   "));
    f272:	83 e0       	ldi	r24, 0x03	; 3
    f274:	61 e0       	ldi	r22, 0x01	; 1
    f276:	45 e1       	ldi	r20, 0x15	; 21
    f278:	54 e1       	ldi	r21, 0x14	; 20
    f27a:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  lcd_printf(4, 1, PSTR("4)Datetime *)Exit   "));
    f27e:	84 e0       	ldi	r24, 0x04	; 4
    f280:	61 e0       	ldi	r22, 0x01	; 1
    f282:	40 e0       	ldi	r20, 0x00	; 0
    f284:	54 e1       	ldi	r21, 0x14	; 20
    f286:	16 c0       	rjmp	.+44     	; 0xf2b4 <FMenuSettings+0x8e>
		  stMenuSettings=msSelection;
	      break;
	 case msDisplayPage2:
		  lcd_printf(1, 1, PSTR("1)Operator          "));
    f288:	81 e0       	ldi	r24, 0x01	; 1
    f28a:	61 e0       	ldi	r22, 0x01	; 1
    f28c:	4b ee       	ldi	r20, 0xEB	; 235
    f28e:	53 e1       	ldi	r21, 0x13	; 19
    f290:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  lcd_printf(2, 1, PSTR("2)System            "));
    f294:	82 e0       	ldi	r24, 0x02	; 2
    f296:	61 e0       	ldi	r22, 0x01	; 1
    f298:	46 ed       	ldi	r20, 0xD6	; 214
    f29a:	53 e1       	ldi	r21, 0x13	; 19
    f29c:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  lcd_printf(3, 1, PSTR("3)PumpPooling       "));
    f2a0:	83 e0       	ldi	r24, 0x03	; 3
    f2a2:	61 e0       	ldi	r22, 0x01	; 1
    f2a4:	41 ec       	ldi	r20, 0xC1	; 193
    f2a6:	53 e1       	ldi	r21, 0x13	; 19
    f2a8:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  lcd_printf(4, 1, PSTR("*)Back              "));
    f2ac:	84 e0       	ldi	r24, 0x04	; 4
    f2ae:	61 e0       	ldi	r22, 0x01	; 1
    f2b0:	4c ea       	ldi	r20, 0xAC	; 172
    f2b2:	53 e1       	ldi	r21, 0x13	; 19
    f2b4:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  stMenuSettings=msSelection;
    f2b8:	84 e0       	ldi	r24, 0x04	; 4
    f2ba:	74 c0       	rjmp	.+232    	; 0xf3a4 <FMenuSettings+0x17e>
	      break;
	 case msSelection:
	      stMenuSettings=msSelection+PageSetting;
    f2bc:	80 91 57 01 	lds	r24, 0x0157
    f2c0:	8c 5f       	subi	r24, 0xFC	; 252
    f2c2:	70 c0       	rjmp	.+224    	; 0xf3a4 <FMenuSettings+0x17e>
          break;	 
	 case msSelectionPage1:
		  KeyPressed=_key_scan(1);
    f2c4:	81 e0       	ldi	r24, 0x01	; 1
    f2c6:	0e 94 6d a6 	call	0x14cda	; 0x14cda <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
    f2ca:	0e 94 ce a5 	call	0x14b9c	; 0x14b9c <_key_btn>
		  switch(KeyChar){
    f2ce:	84 33       	cpi	r24, 0x34	; 52
    f2d0:	d1 f0       	breq	.+52     	; 0xf306 <FMenuSettings+0xe0>
    f2d2:	85 33       	cpi	r24, 0x35	; 53
    f2d4:	50 f4       	brcc	.+20     	; 0xf2ea <FMenuSettings+0xc4>
    f2d6:	82 33       	cpi	r24, 0x32	; 50
    f2d8:	91 f0       	breq	.+36     	; 0xf2fe <FMenuSettings+0xd8>
    f2da:	83 33       	cpi	r24, 0x33	; 51
    f2dc:	90 f4       	brcc	.+36     	; 0xf302 <FMenuSettings+0xdc>
    f2de:	8a 32       	cpi	r24, 0x2A	; 42
    f2e0:	d1 f0       	breq	.+52     	; 0xf316 <FMenuSettings+0xf0>
    f2e2:	81 33       	cpi	r24, 0x31	; 49
    f2e4:	09 f0       	breq	.+2      	; 0xf2e8 <FMenuSettings+0xc2>
    f2e6:	66 c0       	rjmp	.+204    	; 0xf3b4 <FMenuSettings+0x18e>
    f2e8:	08 c0       	rjmp	.+16     	; 0xf2fa <FMenuSettings+0xd4>
    f2ea:	86 33       	cpi	r24, 0x36	; 54
    f2ec:	81 f0       	breq	.+32     	; 0xf30e <FMenuSettings+0xe8>
    f2ee:	86 33       	cpi	r24, 0x36	; 54
    f2f0:	60 f0       	brcs	.+24     	; 0xf30a <FMenuSettings+0xe4>
    f2f2:	87 33       	cpi	r24, 0x37	; 55
    f2f4:	09 f0       	breq	.+2      	; 0xf2f8 <FMenuSettings+0xd2>
    f2f6:	5e c0       	rjmp	.+188    	; 0xf3b4 <FMenuSettings+0x18e>
    f2f8:	0c c0       	rjmp	.+24     	; 0xf312 <FMenuSettings+0xec>
		  case '1':
		       stMenuSettings=msMenuSettingProduct;
    f2fa:	89 e0       	ldi	r24, 0x09	; 9
    f2fc:	53 c0       	rjmp	.+166    	; 0xf3a4 <FMenuSettings+0x17e>
		       break;
		  case '2': 
		       stMenuSettings=msMenuSettingPump;
    f2fe:	8a e0       	ldi	r24, 0x0A	; 10
    f300:	51 c0       	rjmp	.+162    	; 0xf3a4 <FMenuSettings+0x17e>
		       break;
		  case '3':
		       stMenuSettings=msMenuSettingDec;
    f302:	8b e0       	ldi	r24, 0x0B	; 11
    f304:	4f c0       	rjmp	.+158    	; 0xf3a4 <FMenuSettings+0x17e>
		       break;
		  case '4':
		       stMenuSettings=msMenuSettingDatetime;
    f306:	8c e0       	ldi	r24, 0x0C	; 12
    f308:	4d c0       	rjmp	.+154    	; 0xf3a4 <FMenuSettings+0x17e>
		       break;
		  case '5':
		       stMenuSettings=msMenuSettingPrinter;
    f30a:	8d e0       	ldi	r24, 0x0D	; 13
    f30c:	4b c0       	rjmp	.+150    	; 0xf3a4 <FMenuSettings+0x17e>
		       break;
		  case '6':
		       stMenuSettings=msMenuSettingHost;
    f30e:	8e e0       	ldi	r24, 0x0E	; 14
    f310:	49 c0       	rjmp	.+146    	; 0xf3a4 <FMenuSettings+0x17e>
		       break;
		  case '7':
		       stMenuSettings=msMenuSettingNextPage;
    f312:	87 e0       	ldi	r24, 0x07	; 7
    f314:	47 c0       	rjmp	.+142    	; 0xf3a4 <FMenuSettings+0x17e>
		       break;
		  case '*':
		       stMenuSettings=msMenuSettingExit;
    f316:	82 e1       	ldi	r24, 0x12	; 18
    f318:	45 c0       	rjmp	.+138    	; 0xf3a4 <FMenuSettings+0x17e>
		       break;			   
		  }
	      break;
	 case msSelectionPage2:
	 	  KeyPressed=_key_scan(1);
    f31a:	81 e0       	ldi	r24, 0x01	; 1
    f31c:	0e 94 6d a6 	call	0x14cda	; 0x14cda <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
    f320:	0e 94 ce a5 	call	0x14b9c	; 0x14b9c <_key_btn>
		  switch(KeyChar){
    f324:	82 33       	cpi	r24, 0x32	; 50
    f326:	69 f0       	breq	.+26     	; 0xf342 <FMenuSettings+0x11c>
    f328:	83 33       	cpi	r24, 0x33	; 51
    f32a:	30 f4       	brcc	.+12     	; 0xf338 <FMenuSettings+0x112>
    f32c:	8a 32       	cpi	r24, 0x2A	; 42
    f32e:	69 f0       	breq	.+26     	; 0xf34a <FMenuSettings+0x124>
    f330:	81 33       	cpi	r24, 0x31	; 49
    f332:	09 f0       	breq	.+2      	; 0xf336 <FMenuSettings+0x110>
    f334:	3f c0       	rjmp	.+126    	; 0xf3b4 <FMenuSettings+0x18e>
    f336:	03 c0       	rjmp	.+6      	; 0xf33e <FMenuSettings+0x118>
    f338:	83 33       	cpi	r24, 0x33	; 51
    f33a:	e1 f5       	brne	.+120    	; 0xf3b4 <FMenuSettings+0x18e>
    f33c:	04 c0       	rjmp	.+8      	; 0xf346 <FMenuSettings+0x120>
		  case '1':
		       stMenuSettings=msMenuSettingOperator;
    f33e:	8f e0       	ldi	r24, 0x0F	; 15
    f340:	31 c0       	rjmp	.+98     	; 0xf3a4 <FMenuSettings+0x17e>
		       break;
		  case '2':
		       stMenuSettings=msMenuSettingSystem;
    f342:	80 e1       	ldi	r24, 0x10	; 16
    f344:	2f c0       	rjmp	.+94     	; 0xf3a4 <FMenuSettings+0x17e>
		       break;
		  case '3':
		       stMenuSettings=msMenuSettingPumpPooling;
    f346:	81 e1       	ldi	r24, 0x11	; 17
    f348:	2d c0       	rjmp	.+90     	; 0xf3a4 <FMenuSettings+0x17e>
		       break;
		  case '*':
		       stMenuSettings=msMenuSettingBackPage;
    f34a:	88 e0       	ldi	r24, 0x08	; 8
    f34c:	2b c0       	rjmp	.+86     	; 0xf3a4 <FMenuSettings+0x17e>
		       break;		  
		  }
	      break;
		  
	 case msMenuSettingNextPage:
	      if (PageSetting<2)PageSetting++;
    f34e:	80 91 57 01 	lds	r24, 0x0157
    f352:	82 30       	cpi	r24, 0x02	; 2
    f354:	d8 f4       	brcc	.+54     	; 0xf38c <FMenuSettings+0x166>
    f356:	8f 5f       	subi	r24, 0xFF	; 255
    f358:	05 c0       	rjmp	.+10     	; 0xf364 <FMenuSettings+0x13e>
		  stMenuSettings=msDisplayPage;
	      break;
	 case msMenuSettingBackPage:
	      if (PageSetting>1)PageSetting--;
    f35a:	80 91 57 01 	lds	r24, 0x0157
    f35e:	82 30       	cpi	r24, 0x02	; 2
    f360:	a8 f0       	brcs	.+42     	; 0xf38c <FMenuSettings+0x166>
    f362:	81 50       	subi	r24, 0x01	; 1
    f364:	80 93 57 01 	sts	0x0157, r24
    f368:	11 c0       	rjmp	.+34     	; 0xf38c <FMenuSettings+0x166>
		  stMenuSettings=msDisplayPage;
	      break;
//---Sub Menu Operations--------------------------------------------		  
     case msMenuSettingProduct:
	      SubMenu=FSettingProduct();
    f36a:	0e 94 e7 6d 	call	0xdbce	; 0xdbce <FSettingProduct>
    f36e:	18 c0       	rjmp	.+48     	; 0xf3a0 <FMenuSettings+0x17a>
		  if (SubMenu==MENU_DONE)stMenuSettings=msDisplayPage;
	      break;
	 case msMenuSettingPump:
	      SubMenu=FSettingPump();
    f370:	0e 94 cc 63 	call	0xc798	; 0xc798 <FSettingPump>
    f374:	15 c0       	rjmp	.+42     	; 0xf3a0 <FMenuSettings+0x17a>
		  if (SubMenu==MENU_DONE)stMenuSettings=msDisplayPage;
	      break;
	 case msMenuSettingDec:
	      SubMenu=FSettingDec();
    f376:	0e 94 78 51 	call	0xa2f0	; 0xa2f0 <FSettingDec>
    f37a:	12 c0       	rjmp	.+36     	; 0xf3a0 <FMenuSettings+0x17a>
	 }
     return Result;
}

char FSettingDatetime(){
     _menu_datetime();
    f37c:	0e 94 bc 53 	call	0xa778	; 0xa778 <_menu_datetime>
    f380:	05 c0       	rjmp	.+10     	; 0xf38c <FMenuSettings+0x166>
     return MENU_DONE;
}
char FSettingPrinter(){
     _menu_printer();
    f382:	0e 94 cd 4d 	call	0x9b9a	; 0x9b9a <_menu_printer>
    f386:	02 c0       	rjmp	.+4      	; 0xf38c <FMenuSettings+0x166>
	 return MENU_DONE;
}
char FSettingHost(){
     _menu_host();
    f388:	0e 94 5a 4c 	call	0x98b4	; 0x98b4 <_menu_host>
	      SubMenu=FSettingPrinter();
		  if (SubMenu==MENU_DONE)stMenuSettings=msDisplayPage;
	      break;
	 case msMenuSettingHost:
	      SubMenu=FSettingHost();
		  if (SubMenu==MENU_DONE)stMenuSettings=msDisplayPage;
    f38c:	81 e0       	ldi	r24, 0x01	; 1
    f38e:	0a c0       	rjmp	.+20     	; 0xf3a4 <FMenuSettings+0x17e>
	      break;
     case msMenuSettingOperator:
          SubMenu=FSettingOperator();
    f390:	0e 94 00 6b 	call	0xd600	; 0xd600 <FSettingOperator>
    f394:	05 c0       	rjmp	.+10     	; 0xf3a0 <FMenuSettings+0x17a>
		  if (SubMenu==MENU_DONE)stMenuSettings=msDisplayPage;
	      break;
	 case msMenuSettingSystem:
	      SubMenu=FSettingSystem();
    f396:	0e 94 9f 77 	call	0xef3e	; 0xef3e <FSettingSystem>
    f39a:	02 c0       	rjmp	.+4      	; 0xf3a0 <FMenuSettings+0x17a>
		  if (SubMenu==MENU_DONE)stMenuSettings=msDisplayPage;
	      break;	 
     case msMenuSettingPumpPooling:
	      SubMenu=FSettingPumpPooling();
    f39c:	0e 94 21 5c 	call	0xb842	; 0xb842 <FSettingPumpPooling>
		  if (SubMenu==MENU_DONE)stMenuSettings=msDisplayPage;
    f3a0:	81 30       	cpi	r24, 0x01	; 1
    f3a2:	41 f4       	brne	.+16     	; 0xf3b4 <FMenuSettings+0x18e>
    f3a4:	80 93 22 02 	sts	0x0222, r24
    f3a8:	80 e0       	ldi	r24, 0x00	; 0
    f3aa:	08 95       	ret
	      break;
//------------------------------------------------------------------
     case msMenuSettingExit:
	      stMenuSettings=msInit;
    f3ac:	10 92 22 02 	sts	0x0222, r1
    f3b0:	81 e0       	ldi	r24, 0x01	; 1
    f3b2:	08 95       	ret
    f3b4:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
	      break;
	 }
   return Result;
}
    f3b6:	08 95       	ret

0000f3b8 <InitComport>:
     	  break;	 
	 }
   return Result;
}

void InitComport(){
    f3b8:	af 92       	push	r10
    f3ba:	bf 92       	push	r11
    f3bc:	cf 92       	push	r12
    f3be:	df 92       	push	r13
    f3c0:	ff 92       	push	r15
    f3c2:	0f 93       	push	r16
    f3c4:	1f 93       	push	r17
    f3c6:	df 93       	push	r29
    f3c8:	cf 93       	push	r28
    f3ca:	cd b7       	in	r28, 0x3d	; 61
    f3cc:	de b7       	in	r29, 0x3e	; 62
    f3ce:	64 97       	sbiw	r28, 0x14	; 20
    f3d0:	0f b6       	in	r0, 0x3f	; 63
    f3d2:	f8 94       	cli
    f3d4:	de bf       	out	0x3e, r29	; 62
    f3d6:	0f be       	out	0x3f, r0	; 63
    f3d8:	cd bf       	out	0x3d, r28	; 61
     char brMap,i=0,lcdteks[20];	 
	 int bValue;
	 lcd_printf(3, 1, PSTR("Initialize COM ..."));
    f3da:	83 e0       	ldi	r24, 0x03	; 3
    f3dc:	61 e0       	ldi	r22, 0x01	; 1
    f3de:	4e e0       	ldi	r20, 0x0E	; 14
    f3e0:	5f e1       	ldi	r21, 0x1F	; 31
    f3e2:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
    f3e6:	01 e0       	ldi	r16, 0x01	; 1
    f3e8:	10 e0       	ldi	r17, 0x00	; 0
     for(i=0;i<4;i++){
	     brMap=eeprom_read_byte(&DefBaudrate[i]);
		 bValue=GetBaudrate(brMap);
		 if (bValue==5787)bValue=12213;
		 sprintf_P(lcdteks,PSTR("COM%d:%i           "),i+1,bValue);
    f3ea:	6e 01       	movw	r12, r28
    f3ec:	08 94       	sec
    f3ee:	c1 1c       	adc	r12, r1
    f3f0:	d1 1c       	adc	r13, r1
    f3f2:	9a ef       	ldi	r25, 0xFA	; 250
    f3f4:	a9 2e       	mov	r10, r25
    f3f6:	9e e1       	ldi	r25, 0x1E	; 30
    f3f8:	b9 2e       	mov	r11, r25
void InitComport(){
     char brMap,i=0,lcdteks[20];	 
	 int bValue;
	 lcd_printf(3, 1, PSTR("Initialize COM ..."));
     for(i=0;i<4;i++){
	     brMap=eeprom_read_byte(&DefBaudrate[i]);
    f3fa:	c8 01       	movw	r24, r16
    f3fc:	80 5c       	subi	r24, 0xC0	; 192
    f3fe:	9e 4f       	sbci	r25, 0xFE	; 254
    f400:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
    f404:	f8 2e       	mov	r15, r24
		 bValue=GetBaudrate(brMap);
    f406:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <GetBaudrate>
		 if (bValue==5787)bValue=12213;
    f40a:	26 e1       	ldi	r18, 0x16	; 22
    f40c:	8b 39       	cpi	r24, 0x9B	; 155
    f40e:	92 07       	cpc	r25, r18
    f410:	11 f4       	brne	.+4      	; 0xf416 <InitComport+0x5e>
    f412:	85 eb       	ldi	r24, 0xB5	; 181
    f414:	9f e2       	ldi	r25, 0x2F	; 47
		 sprintf_P(lcdteks,PSTR("COM%d:%i           "),i+1,bValue);
    f416:	ad b7       	in	r26, 0x3d	; 61
    f418:	be b7       	in	r27, 0x3e	; 62
    f41a:	18 97       	sbiw	r26, 0x08	; 8
    f41c:	0f b6       	in	r0, 0x3f	; 63
    f41e:	f8 94       	cli
    f420:	be bf       	out	0x3e, r27	; 62
    f422:	0f be       	out	0x3f, r0	; 63
    f424:	ad bf       	out	0x3d, r26	; 61
    f426:	ed b7       	in	r30, 0x3d	; 61
    f428:	fe b7       	in	r31, 0x3e	; 62
    f42a:	31 96       	adiw	r30, 0x01	; 1
    f42c:	12 96       	adiw	r26, 0x02	; 2
    f42e:	dc 92       	st	X, r13
    f430:	ce 92       	st	-X, r12
    f432:	11 97       	sbiw	r26, 0x01	; 1
    f434:	b3 82       	std	Z+3, r11	; 0x03
    f436:	a2 82       	std	Z+2, r10	; 0x02
    f438:	15 83       	std	Z+5, r17	; 0x05
    f43a:	04 83       	std	Z+4, r16	; 0x04
    f43c:	97 83       	std	Z+7, r25	; 0x07
    f43e:	86 83       	std	Z+6, r24	; 0x06
    f440:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
		 lcd_print(4,1,lcdteks);
    f444:	2d b7       	in	r18, 0x3d	; 61
    f446:	3e b7       	in	r19, 0x3e	; 62
    f448:	28 5f       	subi	r18, 0xF8	; 248
    f44a:	3f 4f       	sbci	r19, 0xFF	; 255
    f44c:	0f b6       	in	r0, 0x3f	; 63
    f44e:	f8 94       	cli
    f450:	3e bf       	out	0x3e, r19	; 62
    f452:	0f be       	out	0x3f, r0	; 63
    f454:	2d bf       	out	0x3d, r18	; 61
    f456:	84 e0       	ldi	r24, 0x04	; 4
    f458:	61 e0       	ldi	r22, 0x01	; 1
    f45a:	a6 01       	movw	r20, r12
    f45c:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
		 SetBaudRate(i+1,brMap);
    f460:	80 2f       	mov	r24, r16
    f462:	6f 2d       	mov	r22, r15
    f464:	0e 94 74 77 	call	0xeee8	; 0xeee8 <SetBaudRate>
 	     TimDisplay=0;
    f468:	10 92 92 01 	sts	0x0192, r1
    f46c:	04 c0       	rjmp	.+8      	; 0xf476 <InitComport+0xbe>
	     while(TimDisplay<2){
		     if (TimDisplay>1)break;
    f46e:	80 91 92 01 	lds	r24, 0x0192
    f472:	82 30       	cpi	r24, 0x02	; 2
    f474:	20 f4       	brcc	.+8      	; 0xf47e <InitComport+0xc6>
		 if (bValue==5787)bValue=12213;
		 sprintf_P(lcdteks,PSTR("COM%d:%i           "),i+1,bValue);
		 lcd_print(4,1,lcdteks);
		 SetBaudRate(i+1,brMap);
 	     TimDisplay=0;
	     while(TimDisplay<2){
    f476:	80 91 92 01 	lds	r24, 0x0192
    f47a:	82 30       	cpi	r24, 0x02	; 2
    f47c:	c0 f3       	brcs	.-16     	; 0xf46e <InitComport+0xb6>
    f47e:	0f 5f       	subi	r16, 0xFF	; 255
    f480:	1f 4f       	sbci	r17, 0xFF	; 255

void InitComport(){
     char brMap,i=0,lcdteks[20];	 
	 int bValue;
	 lcd_printf(3, 1, PSTR("Initialize COM ..."));
     for(i=0;i<4;i++){
    f482:	05 30       	cpi	r16, 0x05	; 5
    f484:	11 05       	cpc	r17, r1
    f486:	09 f0       	breq	.+2      	; 0xf48a <InitComport+0xd2>
    f488:	b8 cf       	rjmp	.-144    	; 0xf3fa <InitComport+0x42>
	     while(TimDisplay<2){
		     if (TimDisplay>1)break;
		 };

	 }
}
    f48a:	64 96       	adiw	r28, 0x14	; 20
    f48c:	0f b6       	in	r0, 0x3f	; 63
    f48e:	f8 94       	cli
    f490:	de bf       	out	0x3e, r29	; 62
    f492:	0f be       	out	0x3f, r0	; 63
    f494:	cd bf       	out	0x3d, r28	; 61
    f496:	cf 91       	pop	r28
    f498:	df 91       	pop	r29
    f49a:	1f 91       	pop	r17
    f49c:	0f 91       	pop	r16
    f49e:	ff 90       	pop	r15
    f4a0:	df 90       	pop	r13
    f4a2:	cf 90       	pop	r12
    f4a4:	bf 90       	pop	r11
    f4a6:	af 90       	pop	r10
    f4a8:	08 95       	ret

0000f4aa <IFTSendMessage>:
		else strCardID[i]=strRFID[i-(20-LengthID)];
	 }strCardID[20]=0;

}

void IFTSendMessage(char MsgCode){//<STX>[IFTID][Seq][No][SrceIP][DestIP][MsgCode]
    f4aa:	af 92       	push	r10
    f4ac:	bf 92       	push	r11
    f4ae:	cf 92       	push	r12
    f4b0:	df 92       	push	r13
    f4b2:	ef 92       	push	r14
    f4b4:	ff 92       	push	r15
    f4b6:	0f 93       	push	r16
    f4b8:	df 93       	push	r29
    f4ba:	cf 93       	push	r28
    f4bc:	cd b7       	in	r28, 0x3d	; 61
    f4be:	de b7       	in	r29, 0x3e	; 62
    f4c0:	c0 54       	subi	r28, 0x40	; 64
    f4c2:	d0 40       	sbci	r29, 0x00	; 0
    f4c4:	0f b6       	in	r0, 0x3f	; 63
    f4c6:	f8 94       	cli
    f4c8:	de bf       	out	0x3e, r29	; 62
    f4ca:	0f be       	out	0x3f, r0	; 63
    f4cc:	cd bf       	out	0x3d, r28	; 61
    f4ce:	08 2f       	mov	r16, r24
	 char strSeqNum[3];
	 char ReadIP[4];
	 char strSend[60];

     //STX
     uart(1, 1,0x01);
    f4d0:	81 e0       	ldi	r24, 0x01	; 1
    f4d2:	61 e0       	ldi	r22, 0x01	; 1
    f4d4:	41 e0       	ldi	r20, 0x01	; 1
    f4d6:	0e 94 d2 a8 	call	0x151a4	; 0x151a4 <uart>
	 //[IFTID]
	 IdIFT=(eeprom_read_byte(&DefIFT_ID)%100);
    f4da:	80 e0       	ldi	r24, 0x00	; 0
    f4dc:	90 e0       	ldi	r25, 0x00	; 0
    f4de:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
	 sprintf_P(strSend,PSTR("%.2d"),IdIFT);
    f4e2:	00 d0       	rcall	.+0      	; 0xf4e4 <IFTSendMessage+0x3a>
    f4e4:	00 d0       	rcall	.+0      	; 0xf4e6 <IFTSendMessage+0x3c>
    f4e6:	00 d0       	rcall	.+0      	; 0xf4e8 <IFTSendMessage+0x3e>
    f4e8:	ed b7       	in	r30, 0x3d	; 61
    f4ea:	fe b7       	in	r31, 0x3e	; 62
    f4ec:	31 96       	adiw	r30, 0x01	; 1
    f4ee:	45 e0       	ldi	r20, 0x05	; 5
    f4f0:	c4 2e       	mov	r12, r20
    f4f2:	d1 2c       	mov	r13, r1
    f4f4:	cc 0e       	add	r12, r28
    f4f6:	dd 1e       	adc	r13, r29
    f4f8:	ad b7       	in	r26, 0x3d	; 61
    f4fa:	be b7       	in	r27, 0x3e	; 62
    f4fc:	12 96       	adiw	r26, 0x02	; 2
    f4fe:	dc 92       	st	X, r13
    f500:	ce 92       	st	-X, r12
    f502:	11 97       	sbiw	r26, 0x01	; 1
    f504:	23 e8       	ldi	r18, 0x83	; 131
    f506:	33 e2       	ldi	r19, 0x23	; 35
    f508:	33 83       	std	Z+3, r19	; 0x03
    f50a:	22 83       	std	Z+2, r18	; 0x02
    f50c:	64 e6       	ldi	r22, 0x64	; 100
    f50e:	0e 94 61 aa 	call	0x154c2	; 0x154c2 <__udivmodqi4>
    f512:	94 83       	std	Z+4, r25	; 0x04
    f514:	15 82       	std	Z+5, r1	; 0x05
    f516:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	 uart_print(1, 0,strSend);
    f51a:	8d b7       	in	r24, 0x3d	; 61
    f51c:	9e b7       	in	r25, 0x3e	; 62
    f51e:	06 96       	adiw	r24, 0x06	; 6
    f520:	0f b6       	in	r0, 0x3f	; 63
    f522:	f8 94       	cli
    f524:	9e bf       	out	0x3e, r25	; 62
    f526:	0f be       	out	0x3f, r0	; 63
    f528:	8d bf       	out	0x3d, r24	; 61
    f52a:	81 e0       	ldi	r24, 0x01	; 1
    f52c:	60 e0       	ldi	r22, 0x00	; 0
    f52e:	a6 01       	movw	r20, r12
    f530:	0e 94 ef a8 	call	0x151de	; 0x151de <uart_print>
     //[Seq]
	 SeqNum=((SeqNum+1)%100);
    f534:	80 91 ae 01 	lds	r24, 0x01AE
    f538:	90 e0       	ldi	r25, 0x00	; 0
    f53a:	01 96       	adiw	r24, 0x01	; 1
    f53c:	64 e6       	ldi	r22, 0x64	; 100
    f53e:	70 e0       	ldi	r23, 0x00	; 0
    f540:	0e 94 8e aa 	call	0x1551c	; 0x1551c <__divmodhi4>
    f544:	80 93 ae 01 	sts	0x01AE, r24
	 sprintf_P(strSend,PSTR("%.2d"),SeqNum);	 
    f548:	00 d0       	rcall	.+0      	; 0xf54a <IFTSendMessage+0xa0>
    f54a:	00 d0       	rcall	.+0      	; 0xf54c <IFTSendMessage+0xa2>
    f54c:	00 d0       	rcall	.+0      	; 0xf54e <IFTSendMessage+0xa4>
    f54e:	ed b7       	in	r30, 0x3d	; 61
    f550:	fe b7       	in	r31, 0x3e	; 62
    f552:	31 96       	adiw	r30, 0x01	; 1
    f554:	ad b7       	in	r26, 0x3d	; 61
    f556:	be b7       	in	r27, 0x3e	; 62
    f558:	12 96       	adiw	r26, 0x02	; 2
    f55a:	dc 92       	st	X, r13
    f55c:	ce 92       	st	-X, r12
    f55e:	11 97       	sbiw	r26, 0x01	; 1
    f560:	2e e7       	ldi	r18, 0x7E	; 126
    f562:	33 e2       	ldi	r19, 0x23	; 35
    f564:	33 83       	std	Z+3, r19	; 0x03
    f566:	22 83       	std	Z+2, r18	; 0x02
    f568:	84 83       	std	Z+4, r24	; 0x04
    f56a:	15 82       	std	Z+5, r1	; 0x05
    f56c:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	 uart_print(1, 0,strSend);
    f570:	8d b7       	in	r24, 0x3d	; 61
    f572:	9e b7       	in	r25, 0x3e	; 62
    f574:	06 96       	adiw	r24, 0x06	; 6
    f576:	0f b6       	in	r0, 0x3f	; 63
    f578:	f8 94       	cli
    f57a:	9e bf       	out	0x3e, r25	; 62
    f57c:	0f be       	out	0x3f, r0	; 63
    f57e:	8d bf       	out	0x3d, r24	; 61
    f580:	81 e0       	ldi	r24, 0x01	; 1
    f582:	60 e0       	ldi	r22, 0x00	; 0
    f584:	a6 01       	movw	r20, r12
    f586:	0e 94 ef a8 	call	0x151de	; 0x151de <uart_print>
	 //[ClientIP]
     eeprom_read_block((void*)&ReadIP,(const void*)&DefClientIP,4);
    f58a:	7e 01       	movw	r14, r28
    f58c:	08 94       	sec
    f58e:	e1 1c       	adc	r14, r1
    f590:	f1 1c       	adc	r15, r1
    f592:	c7 01       	movw	r24, r14
    f594:	68 e2       	ldi	r22, 0x28	; 40
    f596:	70 e0       	ldi	r23, 0x00	; 0
    f598:	44 e0       	ldi	r20, 0x04	; 4
    f59a:	50 e0       	ldi	r21, 0x00	; 0
    f59c:	0e 94 30 ad 	call	0x15a60	; 0x15a60 <__eerd_block_m128>
	 sprintf_P(strSend,PSTR("%.3d.%.3d.%.3d.%.3d"),ReadIP[0],ReadIP[1],ReadIP[2],ReadIP[3]);
    f5a0:	ad b7       	in	r26, 0x3d	; 61
    f5a2:	be b7       	in	r27, 0x3e	; 62
    f5a4:	1c 97       	sbiw	r26, 0x0c	; 12
    f5a6:	0f b6       	in	r0, 0x3f	; 63
    f5a8:	f8 94       	cli
    f5aa:	be bf       	out	0x3e, r27	; 62
    f5ac:	0f be       	out	0x3f, r0	; 63
    f5ae:	ad bf       	out	0x3d, r26	; 61
    f5b0:	ed b7       	in	r30, 0x3d	; 61
    f5b2:	fe b7       	in	r31, 0x3e	; 62
    f5b4:	31 96       	adiw	r30, 0x01	; 1
    f5b6:	12 96       	adiw	r26, 0x02	; 2
    f5b8:	dc 92       	st	X, r13
    f5ba:	ce 92       	st	-X, r12
    f5bc:	11 97       	sbiw	r26, 0x01	; 1
    f5be:	8a e6       	ldi	r24, 0x6A	; 106
    f5c0:	93 e2       	ldi	r25, 0x23	; 35
    f5c2:	93 83       	std	Z+3, r25	; 0x03
    f5c4:	82 83       	std	Z+2, r24	; 0x02
    f5c6:	89 81       	ldd	r24, Y+1	; 0x01
    f5c8:	84 83       	std	Z+4, r24	; 0x04
    f5ca:	15 82       	std	Z+5, r1	; 0x05
    f5cc:	8a 81       	ldd	r24, Y+2	; 0x02
    f5ce:	86 83       	std	Z+6, r24	; 0x06
    f5d0:	17 82       	std	Z+7, r1	; 0x07
    f5d2:	8b 81       	ldd	r24, Y+3	; 0x03
    f5d4:	80 87       	std	Z+8, r24	; 0x08
    f5d6:	11 86       	std	Z+9, r1	; 0x09
    f5d8:	8c 81       	ldd	r24, Y+4	; 0x04
    f5da:	82 87       	std	Z+10, r24	; 0x0a
    f5dc:	13 86       	std	Z+11, r1	; 0x0b
    f5de:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	 uart_print(1, 0,strSend);
    f5e2:	8d b7       	in	r24, 0x3d	; 61
    f5e4:	9e b7       	in	r25, 0x3e	; 62
    f5e6:	0c 96       	adiw	r24, 0x0c	; 12
    f5e8:	0f b6       	in	r0, 0x3f	; 63
    f5ea:	f8 94       	cli
    f5ec:	9e bf       	out	0x3e, r25	; 62
    f5ee:	0f be       	out	0x3f, r0	; 63
    f5f0:	8d bf       	out	0x3d, r24	; 61
    f5f2:	81 e0       	ldi	r24, 0x01	; 1
    f5f4:	60 e0       	ldi	r22, 0x00	; 0
    f5f6:	a6 01       	movw	r20, r12
    f5f8:	0e 94 ef a8 	call	0x151de	; 0x151de <uart_print>
	 //[ServerIP]
     eeprom_read_block((void*)&ReadIP,(const void*)&DefServerIP,4);
    f5fc:	c7 01       	movw	r24, r14
    f5fe:	6c e2       	ldi	r22, 0x2C	; 44
    f600:	70 e0       	ldi	r23, 0x00	; 0
    f602:	44 e0       	ldi	r20, 0x04	; 4
    f604:	50 e0       	ldi	r21, 0x00	; 0
    f606:	0e 94 30 ad 	call	0x15a60	; 0x15a60 <__eerd_block_m128>
	 sprintf_P(strSend,PSTR("%.3d.%.3d.%.3d.%.3d"),ReadIP[0],ReadIP[1],ReadIP[2],ReadIP[3]);
    f60a:	ad b7       	in	r26, 0x3d	; 61
    f60c:	be b7       	in	r27, 0x3e	; 62
    f60e:	1c 97       	sbiw	r26, 0x0c	; 12
    f610:	0f b6       	in	r0, 0x3f	; 63
    f612:	f8 94       	cli
    f614:	be bf       	out	0x3e, r27	; 62
    f616:	0f be       	out	0x3f, r0	; 63
    f618:	ad bf       	out	0x3d, r26	; 61
    f61a:	ed b7       	in	r30, 0x3d	; 61
    f61c:	fe b7       	in	r31, 0x3e	; 62
    f61e:	31 96       	adiw	r30, 0x01	; 1
    f620:	12 96       	adiw	r26, 0x02	; 2
    f622:	dc 92       	st	X, r13
    f624:	ce 92       	st	-X, r12
    f626:	11 97       	sbiw	r26, 0x01	; 1
    f628:	86 e5       	ldi	r24, 0x56	; 86
    f62a:	93 e2       	ldi	r25, 0x23	; 35
    f62c:	93 83       	std	Z+3, r25	; 0x03
    f62e:	82 83       	std	Z+2, r24	; 0x02
    f630:	89 81       	ldd	r24, Y+1	; 0x01
    f632:	84 83       	std	Z+4, r24	; 0x04
    f634:	15 82       	std	Z+5, r1	; 0x05
    f636:	8a 81       	ldd	r24, Y+2	; 0x02
    f638:	86 83       	std	Z+6, r24	; 0x06
    f63a:	17 82       	std	Z+7, r1	; 0x07
    f63c:	8b 81       	ldd	r24, Y+3	; 0x03
    f63e:	80 87       	std	Z+8, r24	; 0x08
    f640:	11 86       	std	Z+9, r1	; 0x09
    f642:	8c 81       	ldd	r24, Y+4	; 0x04
    f644:	82 87       	std	Z+10, r24	; 0x0a
    f646:	13 86       	std	Z+11, r1	; 0x0b
    f648:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	 uart_print(1, 0,strSend);
    f64c:	8d b7       	in	r24, 0x3d	; 61
    f64e:	9e b7       	in	r25, 0x3e	; 62
    f650:	0c 96       	adiw	r24, 0x0c	; 12
    f652:	0f b6       	in	r0, 0x3f	; 63
    f654:	f8 94       	cli
    f656:	9e bf       	out	0x3e, r25	; 62
    f658:	0f be       	out	0x3f, r0	; 63
    f65a:	8d bf       	out	0x3d, r24	; 61
    f65c:	81 e0       	ldi	r24, 0x01	; 1
    f65e:	60 e0       	ldi	r22, 0x00	; 0
    f660:	a6 01       	movw	r20, r12
    f662:	0e 94 ef a8 	call	0x151de	; 0x151de <uart_print>
	 //[MsgCode]
	 sprintf_P(strSend,PSTR("%.2X"),MsgCode);	 
    f666:	00 d0       	rcall	.+0      	; 0xf668 <IFTSendMessage+0x1be>
    f668:	00 d0       	rcall	.+0      	; 0xf66a <IFTSendMessage+0x1c0>
    f66a:	00 d0       	rcall	.+0      	; 0xf66c <IFTSendMessage+0x1c2>
    f66c:	ed b7       	in	r30, 0x3d	; 61
    f66e:	fe b7       	in	r31, 0x3e	; 62
    f670:	31 96       	adiw	r30, 0x01	; 1
    f672:	ad b7       	in	r26, 0x3d	; 61
    f674:	be b7       	in	r27, 0x3e	; 62
    f676:	12 96       	adiw	r26, 0x02	; 2
    f678:	dc 92       	st	X, r13
    f67a:	ce 92       	st	-X, r12
    f67c:	11 97       	sbiw	r26, 0x01	; 1
    f67e:	81 e5       	ldi	r24, 0x51	; 81
    f680:	93 e2       	ldi	r25, 0x23	; 35
    f682:	93 83       	std	Z+3, r25	; 0x03
    f684:	82 83       	std	Z+2, r24	; 0x02
    f686:	04 83       	std	Z+4, r16	; 0x04
    f688:	15 82       	std	Z+5, r1	; 0x05
    f68a:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	 uart_print(1, 0,strSend);
    f68e:	8d b7       	in	r24, 0x3d	; 61
    f690:	9e b7       	in	r25, 0x3e	; 62
    f692:	06 96       	adiw	r24, 0x06	; 6
    f694:	0f b6       	in	r0, 0x3f	; 63
    f696:	f8 94       	cli
    f698:	9e bf       	out	0x3e, r25	; 62
    f69a:	0f be       	out	0x3f, r0	; 63
    f69c:	8d bf       	out	0x3d, r24	; 61
    f69e:	81 e0       	ldi	r24, 0x01	; 1
    f6a0:	60 e0       	ldi	r22, 0x00	; 0
    f6a2:	a6 01       	movw	r20, r12
    f6a4:	0e 94 ef a8 	call	0x151de	; 0x151de <uart_print>

     switch(MsgCode){
    f6a8:	02 33       	cpi	r16, 0x32	; 50
    f6aa:	09 f4       	brne	.+2      	; 0xf6ae <IFTSendMessage+0x204>
    f6ac:	7f c0       	rjmp	.+254    	; 0xf7ac <IFTSendMessage+0x302>
    f6ae:	03 33       	cpi	r16, 0x33	; 51
    f6b0:	70 f4       	brcc	.+28     	; 0xf6ce <IFTSendMessage+0x224>
    f6b2:	02 32       	cpi	r16, 0x22	; 34
    f6b4:	91 f1       	breq	.+100    	; 0xf71a <IFTSendMessage+0x270>
    f6b6:	03 32       	cpi	r16, 0x23	; 35
    f6b8:	20 f4       	brcc	.+8      	; 0xf6c2 <IFTSendMessage+0x218>
    f6ba:	04 30       	cpi	r16, 0x04	; 4
    f6bc:	09 f0       	breq	.+2      	; 0xf6c0 <IFTSendMessage+0x216>
    f6be:	1d c2       	rjmp	.+1082   	; 0xfafa <IFTSendMessage+0x650>
    f6c0:	19 c0       	rjmp	.+50     	; 0xf6f4 <IFTSendMessage+0x24a>
    f6c2:	04 32       	cpi	r16, 0x24	; 36
    f6c4:	d9 f1       	breq	.+118    	; 0xf73c <IFTSendMessage+0x292>
    f6c6:	08 32       	cpi	r16, 0x28	; 40
    f6c8:	09 f0       	breq	.+2      	; 0xf6cc <IFTSendMessage+0x222>
    f6ca:	17 c2       	rjmp	.+1070   	; 0xfafa <IFTSendMessage+0x650>
    f6cc:	53 c0       	rjmp	.+166    	; 0xf774 <IFTSendMessage+0x2ca>
    f6ce:	00 39       	cpi	r16, 0x90	; 144
    f6d0:	09 f4       	brne	.+2      	; 0xf6d4 <IFTSendMessage+0x22a>
    f6d2:	78 c1       	rjmp	.+752    	; 0xf9c4 <IFTSendMessage+0x51a>
    f6d4:	01 39       	cpi	r16, 0x91	; 145
    f6d6:	38 f4       	brcc	.+14     	; 0xf6e6 <IFTSendMessage+0x23c>
    f6d8:	06 35       	cpi	r16, 0x56	; 86
    f6da:	09 f4       	brne	.+2      	; 0xf6de <IFTSendMessage+0x234>
    f6dc:	d7 c0       	rjmp	.+430    	; 0xf88c <IFTSendMessage+0x3e2>
    f6de:	08 35       	cpi	r16, 0x58	; 88
    f6e0:	09 f0       	breq	.+2      	; 0xf6e4 <IFTSendMessage+0x23a>
    f6e2:	0b c2       	rjmp	.+1046   	; 0xfafa <IFTSendMessage+0x650>
    f6e4:	e8 c0       	rjmp	.+464    	; 0xf8b6 <IFTSendMessage+0x40c>
    f6e6:	02 39       	cpi	r16, 0x92	; 146
    f6e8:	09 f4       	brne	.+2      	; 0xf6ec <IFTSendMessage+0x242>
    f6ea:	8d c1       	rjmp	.+794    	; 0xfa06 <IFTSendMessage+0x55c>
    f6ec:	08 39       	cpi	r16, 0x98	; 152
    f6ee:	09 f0       	breq	.+2      	; 0xf6f2 <IFTSendMessage+0x248>
    f6f0:	04 c2       	rjmp	.+1032   	; 0xfafa <IFTSendMessage+0x650>
    f6f2:	e0 c1       	rjmp	.+960    	; 0xfab4 <IFTSendMessage+0x60a>
	 case MSG_04://Transaction Number
	      sprintf_P(strSend,PSTR("%s1"),strTranNo);
    f6f4:	00 d0       	rcall	.+0      	; 0xf6f6 <IFTSendMessage+0x24c>
    f6f6:	00 d0       	rcall	.+0      	; 0xf6f8 <IFTSendMessage+0x24e>
    f6f8:	00 d0       	rcall	.+0      	; 0xf6fa <IFTSendMessage+0x250>
    f6fa:	ed b7       	in	r30, 0x3d	; 61
    f6fc:	fe b7       	in	r31, 0x3e	; 62
    f6fe:	31 96       	adiw	r30, 0x01	; 1
    f700:	ad b7       	in	r26, 0x3d	; 61
    f702:	be b7       	in	r27, 0x3e	; 62
    f704:	12 96       	adiw	r26, 0x02	; 2
    f706:	dc 92       	st	X, r13
    f708:	ce 92       	st	-X, r12
    f70a:	11 97       	sbiw	r26, 0x01	; 1
    f70c:	8d e4       	ldi	r24, 0x4D	; 77
    f70e:	93 e2       	ldi	r25, 0x23	; 35
    f710:	93 83       	std	Z+3, r25	; 0x03
    f712:	82 83       	std	Z+2, r24	; 0x02
    f714:	88 e8       	ldi	r24, 0x88	; 136
    f716:	9c e0       	ldi	r25, 0x0C	; 12
    f718:	df c1       	rjmp	.+958    	; 0xfad8 <IFTSendMessage+0x62e>
	      uart_print(1, 0,strSend);
	      break;
	 case MSG_10://No Additional Parameter
	      break;
	 case MSG_22://strCardID
	      UpdateCardID();
    f71a:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <UpdateCardID>
	      sprintf_P(strSend,PSTR("%s"),strCardID);
    f71e:	00 d0       	rcall	.+0      	; 0xf720 <IFTSendMessage+0x276>
    f720:	00 d0       	rcall	.+0      	; 0xf722 <IFTSendMessage+0x278>
    f722:	00 d0       	rcall	.+0      	; 0xf724 <IFTSendMessage+0x27a>
    f724:	ed b7       	in	r30, 0x3d	; 61
    f726:	fe b7       	in	r31, 0x3e	; 62
    f728:	31 96       	adiw	r30, 0x01	; 1
    f72a:	ad b7       	in	r26, 0x3d	; 61
    f72c:	be b7       	in	r27, 0x3e	; 62
    f72e:	12 96       	adiw	r26, 0x02	; 2
    f730:	dc 92       	st	X, r13
    f732:	ce 92       	st	-X, r12
    f734:	11 97       	sbiw	r26, 0x01	; 1
    f736:	8a e4       	ldi	r24, 0x4A	; 74
    f738:	93 e2       	ldi	r25, 0x23	; 35
    f73a:	b8 c0       	rjmp	.+368    	; 0xf8ac <IFTSendMessage+0x402>
	      uart_print(1, 0,strSend);
	      break;
	 case MSG_24://strCardID, FIP_ID
	      UpdateCardID();
    f73c:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <UpdateCardID>
	      sprintf_P(strSend,PSTR("%s%s"),strCardID,strFIP_ID);
    f740:	ad b7       	in	r26, 0x3d	; 61
    f742:	be b7       	in	r27, 0x3e	; 62
    f744:	18 97       	sbiw	r26, 0x08	; 8
    f746:	0f b6       	in	r0, 0x3f	; 63
    f748:	f8 94       	cli
    f74a:	be bf       	out	0x3e, r27	; 62
    f74c:	0f be       	out	0x3f, r0	; 63
    f74e:	ad bf       	out	0x3d, r26	; 61
    f750:	ed b7       	in	r30, 0x3d	; 61
    f752:	fe b7       	in	r31, 0x3e	; 62
    f754:	31 96       	adiw	r30, 0x01	; 1
    f756:	12 96       	adiw	r26, 0x02	; 2
    f758:	dc 92       	st	X, r13
    f75a:	ce 92       	st	-X, r12
    f75c:	11 97       	sbiw	r26, 0x01	; 1
    f75e:	85 e4       	ldi	r24, 0x45	; 69
    f760:	93 e2       	ldi	r25, 0x23	; 35
    f762:	93 83       	std	Z+3, r25	; 0x03
    f764:	82 83       	std	Z+2, r24	; 0x02
    f766:	89 e8       	ldi	r24, 0x89	; 137
    f768:	9b e0       	ldi	r25, 0x0B	; 11
    f76a:	95 83       	std	Z+5, r25	; 0x05
    f76c:	84 83       	std	Z+4, r24	; 0x04
    f76e:	89 eb       	ldi	r24, 0xB9	; 185
    f770:	97 e0       	ldi	r25, 0x07	; 7
    f772:	41 c1       	rjmp	.+642    	; 0xf9f6 <IFTSendMessage+0x54c>
	      uart_print(1, 0,strSend);
	      break;

	 case MSG_28://strCardID, FIP_ID
	      UpdateCardID();
    f774:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <UpdateCardID>
	      sprintf_P(strSend,PSTR("%s%s"),strFIP_ID,strCardID);
    f778:	ad b7       	in	r26, 0x3d	; 61
    f77a:	be b7       	in	r27, 0x3e	; 62
    f77c:	18 97       	sbiw	r26, 0x08	; 8
    f77e:	0f b6       	in	r0, 0x3f	; 63
    f780:	f8 94       	cli
    f782:	be bf       	out	0x3e, r27	; 62
    f784:	0f be       	out	0x3f, r0	; 63
    f786:	ad bf       	out	0x3d, r26	; 61
    f788:	ed b7       	in	r30, 0x3d	; 61
    f78a:	fe b7       	in	r31, 0x3e	; 62
    f78c:	31 96       	adiw	r30, 0x01	; 1
    f78e:	12 96       	adiw	r26, 0x02	; 2
    f790:	dc 92       	st	X, r13
    f792:	ce 92       	st	-X, r12
    f794:	11 97       	sbiw	r26, 0x01	; 1
    f796:	80 e4       	ldi	r24, 0x40	; 64
    f798:	93 e2       	ldi	r25, 0x23	; 35
    f79a:	93 83       	std	Z+3, r25	; 0x03
    f79c:	82 83       	std	Z+2, r24	; 0x02
    f79e:	89 eb       	ldi	r24, 0xB9	; 185
    f7a0:	97 e0       	ldi	r25, 0x07	; 7
    f7a2:	95 83       	std	Z+5, r25	; 0x05
    f7a4:	84 83       	std	Z+4, r24	; 0x04
    f7a6:	89 e8       	ldi	r24, 0x89	; 137
    f7a8:	9b e0       	ldi	r25, 0x0B	; 11
    f7aa:	25 c1       	rjmp	.+586    	; 0xf9f6 <IFTSendMessage+0x54c>
	      uart_print(1, 0,strSend);
	      break;
	 case MSG_32://Change MOP
	      UpdateCardID();
    f7ac:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <UpdateCardID>
	      sprintf_P(strSend,PSTR("%s%s"),strFIP_ID,strPaymentType);
    f7b0:	ad b7       	in	r26, 0x3d	; 61
    f7b2:	be b7       	in	r27, 0x3e	; 62
    f7b4:	18 97       	sbiw	r26, 0x08	; 8
    f7b6:	0f b6       	in	r0, 0x3f	; 63
    f7b8:	f8 94       	cli
    f7ba:	be bf       	out	0x3e, r27	; 62
    f7bc:	0f be       	out	0x3f, r0	; 63
    f7be:	ad bf       	out	0x3d, r26	; 61
    f7c0:	ed b7       	in	r30, 0x3d	; 61
    f7c2:	fe b7       	in	r31, 0x3e	; 62
    f7c4:	31 96       	adiw	r30, 0x01	; 1
    f7c6:	12 96       	adiw	r26, 0x02	; 2
    f7c8:	dc 92       	st	X, r13
    f7ca:	ce 92       	st	-X, r12
    f7cc:	11 97       	sbiw	r26, 0x01	; 1
    f7ce:	8b e3       	ldi	r24, 0x3B	; 59
    f7d0:	93 e2       	ldi	r25, 0x23	; 35
    f7d2:	93 83       	std	Z+3, r25	; 0x03
    f7d4:	82 83       	std	Z+2, r24	; 0x02
    f7d6:	89 eb       	ldi	r24, 0xB9	; 185
    f7d8:	97 e0       	ldi	r25, 0x07	; 7
    f7da:	95 83       	std	Z+5, r25	; 0x05
    f7dc:	84 83       	std	Z+4, r24	; 0x04
    f7de:	80 e5       	ldi	r24, 0x50	; 80
    f7e0:	97 e0       	ldi	r25, 0x07	; 7
    f7e2:	97 83       	std	Z+7, r25	; 0x07
    f7e4:	86 83       	std	Z+6, r24	; 0x06
    f7e6:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	      uart_print(1,0,strSend);
    f7ea:	8d b7       	in	r24, 0x3d	; 61
    f7ec:	9e b7       	in	r25, 0x3e	; 62
    f7ee:	08 96       	adiw	r24, 0x08	; 8
    f7f0:	0f b6       	in	r0, 0x3f	; 63
    f7f2:	f8 94       	cli
    f7f4:	9e bf       	out	0x3e, r25	; 62
    f7f6:	0f be       	out	0x3f, r0	; 63
    f7f8:	8d bf       	out	0x3d, r24	; 61
    f7fa:	81 e0       	ldi	r24, 0x01	; 1
    f7fc:	60 e0       	ldi	r22, 0x00	; 0
    f7fe:	a6 01       	movw	r20, r12
    f800:	0e 94 ef a8 	call	0x151de	; 0x151de <uart_print>
		  sprintf_P(strSend,PSTR("%s%s"),strRef1,strRef2);
    f804:	ad b7       	in	r26, 0x3d	; 61
    f806:	be b7       	in	r27, 0x3e	; 62
    f808:	18 97       	sbiw	r26, 0x08	; 8
    f80a:	0f b6       	in	r0, 0x3f	; 63
    f80c:	f8 94       	cli
    f80e:	be bf       	out	0x3e, r27	; 62
    f810:	0f be       	out	0x3f, r0	; 63
    f812:	ad bf       	out	0x3d, r26	; 61
    f814:	ed b7       	in	r30, 0x3d	; 61
    f816:	fe b7       	in	r31, 0x3e	; 62
    f818:	31 96       	adiw	r30, 0x01	; 1
    f81a:	12 96       	adiw	r26, 0x02	; 2
    f81c:	dc 92       	st	X, r13
    f81e:	ce 92       	st	-X, r12
    f820:	11 97       	sbiw	r26, 0x01	; 1
    f822:	86 e3       	ldi	r24, 0x36	; 54
    f824:	93 e2       	ldi	r25, 0x23	; 35
    f826:	93 83       	std	Z+3, r25	; 0x03
    f828:	82 83       	std	Z+2, r24	; 0x02
    f82a:	8f e8       	ldi	r24, 0x8F	; 143
    f82c:	9c e0       	ldi	r25, 0x0C	; 12
    f82e:	95 83       	std	Z+5, r25	; 0x05
    f830:	84 83       	std	Z+4, r24	; 0x04
    f832:	8e e9       	ldi	r24, 0x9E	; 158
    f834:	9b e0       	ldi	r25, 0x0B	; 11
    f836:	97 83       	std	Z+7, r25	; 0x07
    f838:	86 83       	std	Z+6, r24	; 0x06
    f83a:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
		  uart_print(1,0,strSend);
    f83e:	8d b7       	in	r24, 0x3d	; 61
    f840:	9e b7       	in	r25, 0x3e	; 62
    f842:	08 96       	adiw	r24, 0x08	; 8
    f844:	0f b6       	in	r0, 0x3f	; 63
    f846:	f8 94       	cli
    f848:	9e bf       	out	0x3e, r25	; 62
    f84a:	0f be       	out	0x3f, r0	; 63
    f84c:	8d bf       	out	0x3d, r24	; 61
    f84e:	81 e0       	ldi	r24, 0x01	; 1
    f850:	60 e0       	ldi	r22, 0x00	; 0
    f852:	a6 01       	movw	r20, r12
    f854:	0e 94 ef a8 	call	0x151de	; 0x151de <uart_print>
		  sprintf_P(strSend,PSTR("%s%s"),strRef3,strRef4);
    f858:	ad b7       	in	r26, 0x3d	; 61
    f85a:	be b7       	in	r27, 0x3e	; 62
    f85c:	18 97       	sbiw	r26, 0x08	; 8
    f85e:	0f b6       	in	r0, 0x3f	; 63
    f860:	f8 94       	cli
    f862:	be bf       	out	0x3e, r27	; 62
    f864:	0f be       	out	0x3f, r0	; 63
    f866:	ad bf       	out	0x3d, r26	; 61
    f868:	ed b7       	in	r30, 0x3d	; 61
    f86a:	fe b7       	in	r31, 0x3e	; 62
    f86c:	31 96       	adiw	r30, 0x01	; 1
    f86e:	12 96       	adiw	r26, 0x02	; 2
    f870:	dc 92       	st	X, r13
    f872:	ce 92       	st	-X, r12
    f874:	11 97       	sbiw	r26, 0x01	; 1
    f876:	81 e3       	ldi	r24, 0x31	; 49
    f878:	93 e2       	ldi	r25, 0x23	; 35
    f87a:	93 83       	std	Z+3, r25	; 0x03
    f87c:	82 83       	std	Z+2, r24	; 0x02
    f87e:	8d e7       	ldi	r24, 0x7D	; 125
    f880:	98 e0       	ldi	r25, 0x08	; 8
    f882:	95 83       	std	Z+5, r25	; 0x05
    f884:	84 83       	std	Z+4, r24	; 0x04
    f886:	85 ea       	ldi	r24, 0xA5	; 165
    f888:	93 e0       	ldi	r25, 0x03	; 3
    f88a:	b5 c0       	rjmp	.+362    	; 0xf9f6 <IFTSendMessage+0x54c>
		  uart_print(1,0,strSend);
	      break;

	 case MSG_56://strCardID, FIP_ID
	      UpdateCardID();
    f88c:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <UpdateCardID>
	      sprintf_P(strSend,PSTR("%s"),strCardID);
    f890:	00 d0       	rcall	.+0      	; 0xf892 <IFTSendMessage+0x3e8>
    f892:	00 d0       	rcall	.+0      	; 0xf894 <IFTSendMessage+0x3ea>
    f894:	00 d0       	rcall	.+0      	; 0xf896 <IFTSendMessage+0x3ec>
    f896:	ed b7       	in	r30, 0x3d	; 61
    f898:	fe b7       	in	r31, 0x3e	; 62
    f89a:	31 96       	adiw	r30, 0x01	; 1
    f89c:	ad b7       	in	r26, 0x3d	; 61
    f89e:	be b7       	in	r27, 0x3e	; 62
    f8a0:	12 96       	adiw	r26, 0x02	; 2
    f8a2:	dc 92       	st	X, r13
    f8a4:	ce 92       	st	-X, r12
    f8a6:	11 97       	sbiw	r26, 0x01	; 1
    f8a8:	8e e2       	ldi	r24, 0x2E	; 46
    f8aa:	93 e2       	ldi	r25, 0x23	; 35
    f8ac:	93 83       	std	Z+3, r25	; 0x03
    f8ae:	82 83       	std	Z+2, r24	; 0x02
    f8b0:	89 e8       	ldi	r24, 0x89	; 137
    f8b2:	9b e0       	ldi	r25, 0x0B	; 11
    f8b4:	11 c1       	rjmp	.+546    	; 0xfad8 <IFTSendMessage+0x62e>
	      uart_print(1, 0,strSend);
	      break;
	 case MSG_58://Request Local Account Transaction
	      UpdateCardID();
    f8b6:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <UpdateCardID>
		  AddSpaceLead(strBalanceValue,13);
    f8ba:	3f e1       	ldi	r19, 0x1F	; 31
    f8bc:	a3 2e       	mov	r10, r19
    f8be:	3c e0       	ldi	r19, 0x0C	; 12
    f8c0:	b3 2e       	mov	r11, r19
    f8c2:	c5 01       	movw	r24, r10
    f8c4:	6d e0       	ldi	r22, 0x0D	; 13
    f8c6:	0e 94 6f 2d 	call	0x5ade	; 0x5ade <AddSpaceLead>
		  AddSpaceLead(strOdometer,10);
    f8ca:	23 ec       	ldi	r18, 0xC3	; 195
    f8cc:	e2 2e       	mov	r14, r18
    f8ce:	23 e0       	ldi	r18, 0x03	; 3
    f8d0:	f2 2e       	mov	r15, r18
    f8d2:	c7 01       	movw	r24, r14
    f8d4:	6a e0       	ldi	r22, 0x0A	; 10
    f8d6:	0e 94 6f 2d 	call	0x5ade	; 0x5ade <AddSpaceLead>
		  CardType=0;
    f8da:	10 92 89 03 	sts	0x0389, r1
		  sprintf_P(strSend,PSTR("%s%s%d"),strCardID,strFIP_ID,NozzleID);
    f8de:	ad b7       	in	r26, 0x3d	; 61
    f8e0:	be b7       	in	r27, 0x3e	; 62
    f8e2:	1a 97       	sbiw	r26, 0x0a	; 10
    f8e4:	0f b6       	in	r0, 0x3f	; 63
    f8e6:	f8 94       	cli
    f8e8:	be bf       	out	0x3e, r27	; 62
    f8ea:	0f be       	out	0x3f, r0	; 63
    f8ec:	ad bf       	out	0x3d, r26	; 61
    f8ee:	ed b7       	in	r30, 0x3d	; 61
    f8f0:	fe b7       	in	r31, 0x3e	; 62
    f8f2:	31 96       	adiw	r30, 0x01	; 1
    f8f4:	12 96       	adiw	r26, 0x02	; 2
    f8f6:	dc 92       	st	X, r13
    f8f8:	ce 92       	st	-X, r12
    f8fa:	11 97       	sbiw	r26, 0x01	; 1
    f8fc:	87 e2       	ldi	r24, 0x27	; 39
    f8fe:	93 e2       	ldi	r25, 0x23	; 35
    f900:	93 83       	std	Z+3, r25	; 0x03
    f902:	82 83       	std	Z+2, r24	; 0x02
    f904:	89 e8       	ldi	r24, 0x89	; 137
    f906:	9b e0       	ldi	r25, 0x0B	; 11
    f908:	95 83       	std	Z+5, r25	; 0x05
    f90a:	84 83       	std	Z+4, r24	; 0x04
    f90c:	89 eb       	ldi	r24, 0xB9	; 185
    f90e:	97 e0       	ldi	r25, 0x07	; 7
    f910:	97 83       	std	Z+7, r25	; 0x07
    f912:	86 83       	std	Z+6, r24	; 0x06
    f914:	80 91 6d 07 	lds	r24, 0x076D
    f918:	80 87       	std	Z+8, r24	; 0x08
    f91a:	11 86       	std	Z+9, r1	; 0x09
    f91c:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
		  uart_print(1,0,strSend);
    f920:	8d b7       	in	r24, 0x3d	; 61
    f922:	9e b7       	in	r25, 0x3e	; 62
    f924:	0a 96       	adiw	r24, 0x0a	; 10
    f926:	0f b6       	in	r0, 0x3f	; 63
    f928:	f8 94       	cli
    f92a:	9e bf       	out	0x3e, r25	; 62
    f92c:	0f be       	out	0x3f, r0	; 63
    f92e:	8d bf       	out	0x3d, r24	; 61
    f930:	81 e0       	ldi	r24, 0x01	; 1
    f932:	60 e0       	ldi	r22, 0x00	; 0
    f934:	a6 01       	movw	r20, r12
    f936:	0e 94 ef a8 	call	0x151de	; 0x151de <uart_print>
		  sprintf_P(strSend,PSTR("%s%s%d"),strBalanceType,strBalanceValue,CardType);
    f93a:	ad b7       	in	r26, 0x3d	; 61
    f93c:	be b7       	in	r27, 0x3e	; 62
    f93e:	1a 97       	sbiw	r26, 0x0a	; 10
    f940:	0f b6       	in	r0, 0x3f	; 63
    f942:	f8 94       	cli
    f944:	be bf       	out	0x3e, r27	; 62
    f946:	0f be       	out	0x3f, r0	; 63
    f948:	ad bf       	out	0x3d, r26	; 61
    f94a:	ed b7       	in	r30, 0x3d	; 61
    f94c:	fe b7       	in	r31, 0x3e	; 62
    f94e:	31 96       	adiw	r30, 0x01	; 1
    f950:	12 96       	adiw	r26, 0x02	; 2
    f952:	dc 92       	st	X, r13
    f954:	ce 92       	st	-X, r12
    f956:	11 97       	sbiw	r26, 0x01	; 1
    f958:	80 e2       	ldi	r24, 0x20	; 32
    f95a:	93 e2       	ldi	r25, 0x23	; 35
    f95c:	93 83       	std	Z+3, r25	; 0x03
    f95e:	82 83       	std	Z+2, r24	; 0x02
    f960:	83 ea       	ldi	r24, 0xA3	; 163
    f962:	93 e0       	ldi	r25, 0x03	; 3
    f964:	95 83       	std	Z+5, r25	; 0x05
    f966:	84 83       	std	Z+4, r24	; 0x04
    f968:	b7 82       	std	Z+7, r11	; 0x07
    f96a:	a6 82       	std	Z+6, r10	; 0x06
    f96c:	80 91 89 03 	lds	r24, 0x0389
    f970:	80 87       	std	Z+8, r24	; 0x08
    f972:	11 86       	std	Z+9, r1	; 0x09
    f974:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
		  uart_print(1,0,strSend);
    f978:	8d b7       	in	r24, 0x3d	; 61
    f97a:	9e b7       	in	r25, 0x3e	; 62
    f97c:	0a 96       	adiw	r24, 0x0a	; 10
    f97e:	0f b6       	in	r0, 0x3f	; 63
    f980:	f8 94       	cli
    f982:	9e bf       	out	0x3e, r25	; 62
    f984:	0f be       	out	0x3f, r0	; 63
    f986:	8d bf       	out	0x3d, r24	; 61
    f988:	81 e0       	ldi	r24, 0x01	; 1
    f98a:	60 e0       	ldi	r22, 0x00	; 0
    f98c:	a6 01       	movw	r20, r12
    f98e:	0e 94 ef a8 	call	0x151de	; 0x151de <uart_print>
		  uart_printf(1,0,PSTR("F0000000E123456FFFFF"));
    f992:	81 e0       	ldi	r24, 0x01	; 1
    f994:	60 e0       	ldi	r22, 0x00	; 0
    f996:	4b e0       	ldi	r20, 0x0B	; 11
    f998:	53 e2       	ldi	r21, 0x23	; 35
    f99a:	0e 94 17 a9 	call	0x1522e	; 0x1522e <uart_printf>
		  sprintf_P(strSend,PSTR("%s"),strOdometer);
    f99e:	00 d0       	rcall	.+0      	; 0xf9a0 <IFTSendMessage+0x4f6>
    f9a0:	00 d0       	rcall	.+0      	; 0xf9a2 <IFTSendMessage+0x4f8>
    f9a2:	00 d0       	rcall	.+0      	; 0xf9a4 <IFTSendMessage+0x4fa>
    f9a4:	ed b7       	in	r30, 0x3d	; 61
    f9a6:	fe b7       	in	r31, 0x3e	; 62
    f9a8:	31 96       	adiw	r30, 0x01	; 1
    f9aa:	ad b7       	in	r26, 0x3d	; 61
    f9ac:	be b7       	in	r27, 0x3e	; 62
    f9ae:	12 96       	adiw	r26, 0x02	; 2
    f9b0:	dc 92       	st	X, r13
    f9b2:	ce 92       	st	-X, r12
    f9b4:	11 97       	sbiw	r26, 0x01	; 1
    f9b6:	88 e0       	ldi	r24, 0x08	; 8
    f9b8:	93 e2       	ldi	r25, 0x23	; 35
    f9ba:	93 83       	std	Z+3, r25	; 0x03
    f9bc:	82 83       	std	Z+2, r24	; 0x02
    f9be:	f5 82       	std	Z+5, r15	; 0x05
    f9c0:	e4 82       	std	Z+4, r14	; 0x04
    f9c2:	8c c0       	rjmp	.+280    	; 0xfadc <IFTSendMessage+0x632>
		  uart_print(1,0,strSend);
		  break;
	 case MSG_90://Request EDC
	      sprintf_P(strSend,PSTR("%s%s"),strFIP_ID,strRef1);
    f9c4:	ad b7       	in	r26, 0x3d	; 61
    f9c6:	be b7       	in	r27, 0x3e	; 62
    f9c8:	18 97       	sbiw	r26, 0x08	; 8
    f9ca:	0f b6       	in	r0, 0x3f	; 63
    f9cc:	f8 94       	cli
    f9ce:	be bf       	out	0x3e, r27	; 62
    f9d0:	0f be       	out	0x3f, r0	; 63
    f9d2:	ad bf       	out	0x3d, r26	; 61
    f9d4:	ed b7       	in	r30, 0x3d	; 61
    f9d6:	fe b7       	in	r31, 0x3e	; 62
    f9d8:	31 96       	adiw	r30, 0x01	; 1
    f9da:	12 96       	adiw	r26, 0x02	; 2
    f9dc:	dc 92       	st	X, r13
    f9de:	ce 92       	st	-X, r12
    f9e0:	11 97       	sbiw	r26, 0x01	; 1
    f9e2:	83 e0       	ldi	r24, 0x03	; 3
    f9e4:	93 e2       	ldi	r25, 0x23	; 35
    f9e6:	93 83       	std	Z+3, r25	; 0x03
    f9e8:	82 83       	std	Z+2, r24	; 0x02
    f9ea:	89 eb       	ldi	r24, 0xB9	; 185
    f9ec:	97 e0       	ldi	r25, 0x07	; 7
    f9ee:	95 83       	std	Z+5, r25	; 0x05
    f9f0:	84 83       	std	Z+4, r24	; 0x04
    f9f2:	8f e8       	ldi	r24, 0x8F	; 143
    f9f4:	9c e0       	ldi	r25, 0x0C	; 12
    f9f6:	97 83       	std	Z+7, r25	; 0x07
    f9f8:	86 83       	std	Z+6, r24	; 0x06
    f9fa:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	      uart_print(1, 0,strSend);
    f9fe:	8d b7       	in	r24, 0x3d	; 61
    fa00:	9e b7       	in	r25, 0x3e	; 62
    fa02:	08 96       	adiw	r24, 0x08	; 8
    fa04:	70 c0       	rjmp	.+224    	; 0xfae6 <IFTSendMessage+0x63c>
	      break;
	 case MSG_92://EDC Approval
		  sprintf_P(strSend,PSTR("%s%s%s%s"),strTranNo,strFIP_ID,strCardType,strCardID);
    fa06:	ad b7       	in	r26, 0x3d	; 61
    fa08:	be b7       	in	r27, 0x3e	; 62
    fa0a:	1c 97       	sbiw	r26, 0x0c	; 12
    fa0c:	0f b6       	in	r0, 0x3f	; 63
    fa0e:	f8 94       	cli
    fa10:	be bf       	out	0x3e, r27	; 62
    fa12:	0f be       	out	0x3f, r0	; 63
    fa14:	ad bf       	out	0x3d, r26	; 61
    fa16:	ed b7       	in	r30, 0x3d	; 61
    fa18:	fe b7       	in	r31, 0x3e	; 62
    fa1a:	31 96       	adiw	r30, 0x01	; 1
    fa1c:	12 96       	adiw	r26, 0x02	; 2
    fa1e:	dc 92       	st	X, r13
    fa20:	ce 92       	st	-X, r12
    fa22:	11 97       	sbiw	r26, 0x01	; 1
    fa24:	8a ef       	ldi	r24, 0xFA	; 250
    fa26:	92 e2       	ldi	r25, 0x22	; 34
    fa28:	93 83       	std	Z+3, r25	; 0x03
    fa2a:	82 83       	std	Z+2, r24	; 0x02
    fa2c:	88 e8       	ldi	r24, 0x88	; 136
    fa2e:	9c e0       	ldi	r25, 0x0C	; 12
    fa30:	95 83       	std	Z+5, r25	; 0x05
    fa32:	84 83       	std	Z+4, r24	; 0x04
    fa34:	89 eb       	ldi	r24, 0xB9	; 185
    fa36:	97 e0       	ldi	r25, 0x07	; 7
    fa38:	97 83       	std	Z+7, r25	; 0x07
    fa3a:	86 83       	std	Z+6, r24	; 0x06
    fa3c:	84 ea       	ldi	r24, 0xA4	; 164
    fa3e:	9c e0       	ldi	r25, 0x0C	; 12
    fa40:	91 87       	std	Z+9, r25	; 0x09
    fa42:	80 87       	std	Z+8, r24	; 0x08
    fa44:	89 e8       	ldi	r24, 0x89	; 137
    fa46:	9b e0       	ldi	r25, 0x0B	; 11
    fa48:	93 87       	std	Z+11, r25	; 0x0b
    fa4a:	82 87       	std	Z+10, r24	; 0x0a
    fa4c:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	      uart_print(1,0,strSend);	    
    fa50:	8d b7       	in	r24, 0x3d	; 61
    fa52:	9e b7       	in	r25, 0x3e	; 62
    fa54:	0c 96       	adiw	r24, 0x0c	; 12
    fa56:	0f b6       	in	r0, 0x3f	; 63
    fa58:	f8 94       	cli
    fa5a:	9e bf       	out	0x3e, r25	; 62
    fa5c:	0f be       	out	0x3f, r0	; 63
    fa5e:	8d bf       	out	0x3d, r24	; 61
    fa60:	81 e0       	ldi	r24, 0x01	; 1
    fa62:	60 e0       	ldi	r22, 0x00	; 0
    fa64:	a6 01       	movw	r20, r12
    fa66:	0e 94 ef a8 	call	0x151de	; 0x151de <uart_print>
		  sprintf_P(strSend,PSTR("%s%s%s"),strApprovalCode,strInvoiceNumber,strDateTime);
    fa6a:	ad b7       	in	r26, 0x3d	; 61
    fa6c:	be b7       	in	r27, 0x3e	; 62
    fa6e:	1a 97       	sbiw	r26, 0x0a	; 10
    fa70:	0f b6       	in	r0, 0x3f	; 63
    fa72:	f8 94       	cli
    fa74:	be bf       	out	0x3e, r27	; 62
    fa76:	0f be       	out	0x3f, r0	; 63
    fa78:	ad bf       	out	0x3d, r26	; 61
    fa7a:	ed b7       	in	r30, 0x3d	; 61
    fa7c:	fe b7       	in	r31, 0x3e	; 62
    fa7e:	31 96       	adiw	r30, 0x01	; 1
    fa80:	12 96       	adiw	r26, 0x02	; 2
    fa82:	dc 92       	st	X, r13
    fa84:	ce 92       	st	-X, r12
    fa86:	11 97       	sbiw	r26, 0x01	; 1
    fa88:	83 ef       	ldi	r24, 0xF3	; 243
    fa8a:	92 e2       	ldi	r25, 0x22	; 34
    fa8c:	93 83       	std	Z+3, r25	; 0x03
    fa8e:	82 83       	std	Z+2, r24	; 0x02
    fa90:	80 ef       	ldi	r24, 0xF0	; 240
    fa92:	97 e0       	ldi	r25, 0x07	; 7
    fa94:	95 83       	std	Z+5, r25	; 0x05
    fa96:	84 83       	std	Z+4, r24	; 0x04
    fa98:	83 e5       	ldi	r24, 0x53	; 83
    fa9a:	97 e0       	ldi	r25, 0x07	; 7
    fa9c:	97 83       	std	Z+7, r25	; 0x07
    fa9e:	86 83       	std	Z+6, r24	; 0x06
    faa0:	8f eb       	ldi	r24, 0xBF	; 191
    faa2:	9b e0       	ldi	r25, 0x0B	; 11
    faa4:	91 87       	std	Z+9, r25	; 0x09
    faa6:	80 87       	std	Z+8, r24	; 0x08
    faa8:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	      uart_print(1,0,strSend);
    faac:	8d b7       	in	r24, 0x3d	; 61
    faae:	9e b7       	in	r25, 0x3e	; 62
    fab0:	0a 96       	adiw	r24, 0x0a	; 10
    fab2:	19 c0       	rjmp	.+50     	; 0xfae6 <IFTSendMessage+0x63c>
	      break;	 
	 case MSG_98://Request Transaction Info
	      sprintf_P(strSend,PSTR("%s"),strFIP_ID);
    fab4:	00 d0       	rcall	.+0      	; 0xfab6 <IFTSendMessage+0x60c>
    fab6:	00 d0       	rcall	.+0      	; 0xfab8 <IFTSendMessage+0x60e>
    fab8:	00 d0       	rcall	.+0      	; 0xfaba <IFTSendMessage+0x610>
    faba:	ed b7       	in	r30, 0x3d	; 61
    fabc:	fe b7       	in	r31, 0x3e	; 62
    fabe:	31 96       	adiw	r30, 0x01	; 1
    fac0:	ad b7       	in	r26, 0x3d	; 61
    fac2:	be b7       	in	r27, 0x3e	; 62
    fac4:	12 96       	adiw	r26, 0x02	; 2
    fac6:	dc 92       	st	X, r13
    fac8:	ce 92       	st	-X, r12
    faca:	11 97       	sbiw	r26, 0x01	; 1
    facc:	80 ef       	ldi	r24, 0xF0	; 240
    face:	92 e2       	ldi	r25, 0x22	; 34
    fad0:	93 83       	std	Z+3, r25	; 0x03
    fad2:	82 83       	std	Z+2, r24	; 0x02
    fad4:	89 eb       	ldi	r24, 0xB9	; 185
    fad6:	97 e0       	ldi	r25, 0x07	; 7
    fad8:	95 83       	std	Z+5, r25	; 0x05
    fada:	84 83       	std	Z+4, r24	; 0x04
    fadc:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	      uart_print(1, 0,strSend);
    fae0:	8d b7       	in	r24, 0x3d	; 61
    fae2:	9e b7       	in	r25, 0x3e	; 62
    fae4:	06 96       	adiw	r24, 0x06	; 6
    fae6:	0f b6       	in	r0, 0x3f	; 63
    fae8:	f8 94       	cli
    faea:	9e bf       	out	0x3e, r25	; 62
    faec:	0f be       	out	0x3f, r0	; 63
    faee:	8d bf       	out	0x3d, r24	; 61
    faf0:	81 e0       	ldi	r24, 0x01	; 1
    faf2:	60 e0       	ldi	r22, 0x00	; 0
    faf4:	a6 01       	movw	r20, r12
    faf6:	0e 94 ef a8 	call	0x151de	; 0x151de <uart_print>
	      break;

	 }     
     //[Checksum]
	 uart_printf(1,0,PSTR("F968CFFB"));
    fafa:	81 e0       	ldi	r24, 0x01	; 1
    fafc:	60 e0       	ldi	r22, 0x00	; 0
    fafe:	47 ee       	ldi	r20, 0xE7	; 231
    fb00:	52 e2       	ldi	r21, 0x22	; 34
    fb02:	0e 94 17 a9 	call	0x1522e	; 0x1522e <uart_printf>
	 //ETX
	 uart(1, 1,0x02);
    fb06:	81 e0       	ldi	r24, 0x01	; 1
    fb08:	61 e0       	ldi	r22, 0x01	; 1
    fb0a:	42 e0       	ldi	r20, 0x02	; 2
    fb0c:	0e 94 d2 a8 	call	0x151a4	; 0x151a4 <uart>
}
    fb10:	c0 5c       	subi	r28, 0xC0	; 192
    fb12:	df 4f       	sbci	r29, 0xFF	; 255
    fb14:	0f b6       	in	r0, 0x3f	; 63
    fb16:	f8 94       	cli
    fb18:	de bf       	out	0x3e, r29	; 62
    fb1a:	0f be       	out	0x3f, r0	; 63
    fb1c:	cd bf       	out	0x3d, r28	; 61
    fb1e:	cf 91       	pop	r28
    fb20:	df 91       	pop	r29
    fb22:	0f 91       	pop	r16
    fb24:	ff 90       	pop	r15
    fb26:	ef 90       	pop	r14
    fb28:	df 90       	pop	r13
    fb2a:	cf 90       	pop	r12
    fb2c:	bf 90       	pop	r11
    fb2e:	af 90       	pop	r10
    fb30:	08 95       	ret

0000fb32 <sendMessage98>:
	//if (xFIP_ID>16)xFIP_ID=16;
	sprintf_P(strSend,PSTR("%s%s%s%s98%.2dF968CFFB"),strIFT_ID,strSeqNum,strClientIP,strServerIP,xFIP_ID);
	uart_print(1, 0,strSend);
	uart(1, 1,0x02);
*/
    sprintf_P(strFIP_ID,PSTR("%.2d"),GetPumpID(FIPAddr));
    fb32:	0e 94 99 20 	call	0x4132	; 0x4132 <GetPumpID>
    fb36:	00 d0       	rcall	.+0      	; 0xfb38 <sendMessage98+0x6>
    fb38:	00 d0       	rcall	.+0      	; 0xfb3a <sendMessage98+0x8>
    fb3a:	00 d0       	rcall	.+0      	; 0xfb3c <sendMessage98+0xa>
    fb3c:	ed b7       	in	r30, 0x3d	; 61
    fb3e:	fe b7       	in	r31, 0x3e	; 62
    fb40:	31 96       	adiw	r30, 0x01	; 1
    fb42:	29 eb       	ldi	r18, 0xB9	; 185
    fb44:	37 e0       	ldi	r19, 0x07	; 7
    fb46:	ad b7       	in	r26, 0x3d	; 61
    fb48:	be b7       	in	r27, 0x3e	; 62
    fb4a:	12 96       	adiw	r26, 0x02	; 2
    fb4c:	3c 93       	st	X, r19
    fb4e:	2e 93       	st	-X, r18
    fb50:	11 97       	sbiw	r26, 0x01	; 1
    fb52:	22 ee       	ldi	r18, 0xE2	; 226
    fb54:	32 e2       	ldi	r19, 0x22	; 34
    fb56:	33 83       	std	Z+3, r19	; 0x03
    fb58:	22 83       	std	Z+2, r18	; 0x02
    fb5a:	84 83       	std	Z+4, r24	; 0x04
    fb5c:	15 82       	std	Z+5, r1	; 0x05
    fb5e:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	IFTSendMessage(MSG_98);
    fb62:	8d b7       	in	r24, 0x3d	; 61
    fb64:	9e b7       	in	r25, 0x3e	; 62
    fb66:	06 96       	adiw	r24, 0x06	; 6
    fb68:	0f b6       	in	r0, 0x3f	; 63
    fb6a:	f8 94       	cli
    fb6c:	9e bf       	out	0x3e, r25	; 62
    fb6e:	0f be       	out	0x3f, r0	; 63
    fb70:	8d bf       	out	0x3d, r24	; 61
    fb72:	88 e9       	ldi	r24, 0x98	; 152
    fb74:	0e 94 55 7a 	call	0xf4aa	; 0xf4aa <IFTSendMessage>
	IsBusyMsg11=True;
    fb78:	81 e0       	ldi	r24, 0x01	; 1
    fb7a:	80 93 ad 01 	sts	0x01AD, r24
}
    fb7e:	08 95       	ret

0000fb80 <FMenuTicket>:
	    StrResult[2]='0'+Val;
	    StrResult[3]=0;
		}   
}

char FMenuTicket(){
    fb80:	ef 92       	push	r14
    fb82:	0f 93       	push	r16
    fb84:	1f 93       	push	r17
    fb86:	df 93       	push	r29
    fb88:	cf 93       	push	r28
    fb8a:	cd b7       	in	r28, 0x3d	; 61
    fb8c:	de b7       	in	r29, 0x3e	; 62
    fb8e:	64 97       	sbiw	r28, 0x14	; 20
    fb90:	0f b6       	in	r0, 0x3f	; 63
    fb92:	f8 94       	cli
    fb94:	de bf       	out	0x3e, r29	; 62
    fb96:	0f be       	out	0x3f, r0	; 63
    fb98:	cd bf       	out	0x3d, r28	; 61
static unsigned int iLoop=0;
     char uiResult=USER_NONE,KeyPressed,KeyChar;
     char Result=MENU_NONE,lcdteks[20];

    Result=MENU_NONE;   
    switch(stMenuTicket){
    fb9a:	80 91 0d 02 	lds	r24, 0x020D
    fb9e:	86 30       	cpi	r24, 0x06	; 6
    fba0:	09 f4       	brne	.+2      	; 0xfba4 <FMenuTicket+0x24>
    fba2:	bf c0       	rjmp	.+382    	; 0xfd22 <FMenuTicket+0x1a2>
    fba4:	87 30       	cpi	r24, 0x07	; 7
    fba6:	88 f4       	brcc	.+34     	; 0xfbca <FMenuTicket+0x4a>
    fba8:	82 30       	cpi	r24, 0x02	; 2
    fbaa:	e9 f1       	breq	.+122    	; 0xfc26 <FMenuTicket+0xa6>
    fbac:	83 30       	cpi	r24, 0x03	; 3
    fbae:	30 f4       	brcc	.+12     	; 0xfbbc <FMenuTicket+0x3c>
    fbb0:	88 23       	and	r24, r24
    fbb2:	09 f1       	breq	.+66     	; 0xfbf6 <FMenuTicket+0x76>
    fbb4:	81 30       	cpi	r24, 0x01	; 1
    fbb6:	09 f0       	breq	.+2      	; 0xfbba <FMenuTicket+0x3a>
    fbb8:	21 c1       	rjmp	.+578    	; 0xfdfc <FMenuTicket+0x27c>
    fbba:	1f c0       	rjmp	.+62     	; 0xfbfa <FMenuTicket+0x7a>
    fbbc:	84 30       	cpi	r24, 0x04	; 4
    fbbe:	09 f4       	brne	.+2      	; 0xfbc2 <FMenuTicket+0x42>
    fbc0:	87 c0       	rjmp	.+270    	; 0xfcd0 <FMenuTicket+0x150>
    fbc2:	85 30       	cpi	r24, 0x05	; 5
    fbc4:	08 f0       	brcs	.+2      	; 0xfbc8 <FMenuTicket+0x48>
    fbc6:	a7 c0       	rjmp	.+334    	; 0xfd16 <FMenuTicket+0x196>
    fbc8:	4d c0       	rjmp	.+154    	; 0xfc64 <FMenuTicket+0xe4>
    fbca:	89 30       	cpi	r24, 0x09	; 9
    fbcc:	09 f4       	brne	.+2      	; 0xfbd0 <FMenuTicket+0x50>
    fbce:	f4 c0       	rjmp	.+488    	; 0xfdb8 <FMenuTicket+0x238>
    fbd0:	8a 30       	cpi	r24, 0x0A	; 10
    fbd2:	38 f4       	brcc	.+14     	; 0xfbe2 <FMenuTicket+0x62>
    fbd4:	87 30       	cpi	r24, 0x07	; 7
    fbd6:	09 f4       	brne	.+2      	; 0xfbda <FMenuTicket+0x5a>
    fbd8:	d2 c0       	rjmp	.+420    	; 0xfd7e <FMenuTicket+0x1fe>
    fbda:	88 30       	cpi	r24, 0x08	; 8
    fbdc:	09 f0       	breq	.+2      	; 0xfbe0 <FMenuTicket+0x60>
    fbde:	0e c1       	rjmp	.+540    	; 0xfdfc <FMenuTicket+0x27c>
    fbe0:	be c0       	rjmp	.+380    	; 0xfd5e <FMenuTicket+0x1de>
    fbe2:	8b 30       	cpi	r24, 0x0B	; 11
    fbe4:	09 f4       	brne	.+2      	; 0xfbe8 <FMenuTicket+0x68>
    fbe6:	ee c0       	rjmp	.+476    	; 0xfdc4 <FMenuTicket+0x244>
    fbe8:	8b 30       	cpi	r24, 0x0B	; 11
    fbea:	08 f4       	brcc	.+2      	; 0xfbee <FMenuTicket+0x6e>
    fbec:	01 c1       	rjmp	.+514    	; 0xfdf0 <FMenuTicket+0x270>
    fbee:	8c 30       	cpi	r24, 0x0C	; 12
    fbf0:	09 f0       	breq	.+2      	; 0xfbf4 <FMenuTicket+0x74>
    fbf2:	04 c1       	rjmp	.+520    	; 0xfdfc <FMenuTicket+0x27c>
    fbf4:	ff c0       	rjmp	.+510    	; 0xfdf4 <FMenuTicket+0x274>
	case mtInit:
		 stMenuTicket=mtPlatNo;
    fbf6:	81 e0       	ldi	r24, 0x01	; 1
    fbf8:	79 c0       	rjmp	.+242    	; 0xfcec <FMenuTicket+0x16c>
	     break;
    case mtPlatNo:
	     lcd_clear();
    fbfa:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
	     lcd_printf(1,1,PSTR("Input Plat No: "));
    fbfe:	81 e0       	ldi	r24, 0x01	; 1
    fc00:	61 e0       	ldi	r22, 0x01	; 1
    fc02:	4f e5       	ldi	r20, 0x5F	; 95
    fc04:	5c e0       	ldi	r21, 0x0C	; 12
    fc06:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
	     lcd_printf(2,1,PSTR("_"));
    fc0a:	82 e0       	ldi	r24, 0x02	; 2
    fc0c:	61 e0       	ldi	r22, 0x01	; 1
    fc0e:	4d e5       	ldi	r20, 0x5D	; 93
    fc10:	5c e0       	ldi	r21, 0x0C	; 12
    fc12:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
	     lcd_printf(4,1,PSTR("[*]Cancel  [#]Enter "));
    fc16:	84 e0       	ldi	r24, 0x04	; 4
    fc18:	61 e0       	ldi	r22, 0x01	; 1
    fc1a:	48 e4       	ldi	r20, 0x48	; 72
    fc1c:	5c e0       	ldi	r21, 0x0C	; 12
    fc1e:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		 uiResult=USER_NONE;
		 stMenuTicket=mtInputPlatNo;
    fc22:	82 e0       	ldi	r24, 0x02	; 2
    fc24:	63 c0       	rjmp	.+198    	; 0xfcec <FMenuTicket+0x16c>
	     break;
    case mtInputPlatNo:
	     uiResult=UserInput(UI_ALPHANUM_R,2,1,strLicPlate,0,10);
    fc26:	83 e0       	ldi	r24, 0x03	; 3
    fc28:	62 e0       	ldi	r22, 0x02	; 2
    fc2a:	41 e0       	ldi	r20, 0x01	; 1
    fc2c:	2a ef       	ldi	r18, 0xFA	; 250
    fc2e:	38 e0       	ldi	r19, 0x08	; 8
    fc30:	00 e0       	ldi	r16, 0x00	; 0
    fc32:	10 e0       	ldi	r17, 0x00	; 0
    fc34:	7a e0       	ldi	r23, 0x0A	; 10
    fc36:	e7 2e       	mov	r14, r23
    fc38:	0e 94 dc 67 	call	0xcfb8	; 0xcfb8 <UserInput>
		 if (uiResult==USER_OK)stMenuTicket=mtOdometer;
    fc3c:	83 30       	cpi	r24, 0x03	; 3
    fc3e:	09 f4       	brne	.+2      	; 0xfc42 <FMenuTicket+0xc2>
    fc40:	55 c0       	rjmp	.+170    	; 0xfcec <FMenuTicket+0x16c>
		 else
		 if (uiResult==USER_CANCEL)stMenuTicket=mtExitMenuTicket;
    fc42:	81 30       	cpi	r24, 0x01	; 1
    fc44:	09 f4       	brne	.+2      	; 0xfc48 <FMenuTicket+0xc8>
    fc46:	d4 c0       	rjmp	.+424    	; 0xfdf0 <FMenuTicket+0x270>
         else
		 if (uiResult==USER_ENTRY)lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
    fc48:	84 30       	cpi	r24, 0x04	; 4
    fc4a:	21 f4       	brne	.+8      	; 0xfc54 <FMenuTicket+0xd4>
    fc4c:	61 e0       	ldi	r22, 0x01	; 1
    fc4e:	43 e3       	ldi	r20, 0x33	; 51
    fc50:	5c e0       	ldi	r21, 0x0C	; 12
    fc52:	5e c0       	rjmp	.+188    	; 0xfd10 <FMenuTicket+0x190>
		 else
		 if (uiResult==USER_NO_DATA)lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    fc54:	85 30       	cpi	r24, 0x05	; 5
    fc56:	09 f0       	breq	.+2      	; 0xfc5a <FMenuTicket+0xda>
    fc58:	d1 c0       	rjmp	.+418    	; 0xfdfc <FMenuTicket+0x27c>
    fc5a:	84 e0       	ldi	r24, 0x04	; 4
    fc5c:	61 e0       	ldi	r22, 0x01	; 1
    fc5e:	4e e1       	ldi	r20, 0x1E	; 30
    fc60:	5c e0       	ldi	r21, 0x0C	; 12
    fc62:	56 c0       	rjmp	.+172    	; 0xfd10 <FMenuTicket+0x190>
	     break;
    case mtOdometer:
	     lcd_clear();
    fc64:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
		 sprintf_P(lcdteks,PSTR("Plat No: %s "),strLicPlate);
    fc68:	00 d0       	rcall	.+0      	; 0xfc6a <FMenuTicket+0xea>
    fc6a:	00 d0       	rcall	.+0      	; 0xfc6c <FMenuTicket+0xec>
    fc6c:	00 d0       	rcall	.+0      	; 0xfc6e <FMenuTicket+0xee>
    fc6e:	ed b7       	in	r30, 0x3d	; 61
    fc70:	fe b7       	in	r31, 0x3e	; 62
    fc72:	31 96       	adiw	r30, 0x01	; 1
    fc74:	8e 01       	movw	r16, r28
    fc76:	0f 5f       	subi	r16, 0xFF	; 255
    fc78:	1f 4f       	sbci	r17, 0xFF	; 255
    fc7a:	ad b7       	in	r26, 0x3d	; 61
    fc7c:	be b7       	in	r27, 0x3e	; 62
    fc7e:	12 96       	adiw	r26, 0x02	; 2
    fc80:	1c 93       	st	X, r17
    fc82:	0e 93       	st	-X, r16
    fc84:	11 97       	sbiw	r26, 0x01	; 1
    fc86:	81 e1       	ldi	r24, 0x11	; 17
    fc88:	9c e0       	ldi	r25, 0x0C	; 12
    fc8a:	93 83       	std	Z+3, r25	; 0x03
    fc8c:	82 83       	std	Z+2, r24	; 0x02
    fc8e:	8a ef       	ldi	r24, 0xFA	; 250
    fc90:	98 e0       	ldi	r25, 0x08	; 8
    fc92:	95 83       	std	Z+5, r25	; 0x05
    fc94:	84 83       	std	Z+4, r24	; 0x04
    fc96:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	     lcd_print(1,1,lcdteks);
    fc9a:	8d b7       	in	r24, 0x3d	; 61
    fc9c:	9e b7       	in	r25, 0x3e	; 62
    fc9e:	06 96       	adiw	r24, 0x06	; 6
    fca0:	0f b6       	in	r0, 0x3f	; 63
    fca2:	f8 94       	cli
    fca4:	9e bf       	out	0x3e, r25	; 62
    fca6:	0f be       	out	0x3f, r0	; 63
    fca8:	8d bf       	out	0x3d, r24	; 61
    fcaa:	81 e0       	ldi	r24, 0x01	; 1
    fcac:	61 e0       	ldi	r22, 0x01	; 1
    fcae:	a8 01       	movw	r20, r16
    fcb0:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
	     lcd_printf(2,1,PSTR("Odometer:_ "));
    fcb4:	82 e0       	ldi	r24, 0x02	; 2
    fcb6:	61 e0       	ldi	r22, 0x01	; 1
    fcb8:	45 e0       	ldi	r20, 0x05	; 5
    fcba:	5c e0       	ldi	r21, 0x0C	; 12
    fcbc:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
	     lcd_printf(4,1,PSTR("[*]Cancel  [#]Enter "));
    fcc0:	84 e0       	ldi	r24, 0x04	; 4
    fcc2:	61 e0       	ldi	r22, 0x01	; 1
    fcc4:	40 ef       	ldi	r20, 0xF0	; 240
    fcc6:	5b e0       	ldi	r21, 0x0B	; 11
    fcc8:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		 uiResult=USER_NONE;
		 stMenuTicket=mtInputOdometer;
    fccc:	84 e0       	ldi	r24, 0x04	; 4
    fcce:	0e c0       	rjmp	.+28     	; 0xfcec <FMenuTicket+0x16c>
	     break;
    case mtInputOdometer:
	     uiResult=UserInput(UI_NUMBER_R,2,10,strOdometer,0,10);
    fcd0:	81 e0       	ldi	r24, 0x01	; 1
    fcd2:	62 e0       	ldi	r22, 0x02	; 2
    fcd4:	4a e0       	ldi	r20, 0x0A	; 10
    fcd6:	23 ec       	ldi	r18, 0xC3	; 195
    fcd8:	33 e0       	ldi	r19, 0x03	; 3
    fcda:	00 e0       	ldi	r16, 0x00	; 0
    fcdc:	10 e0       	ldi	r17, 0x00	; 0
    fcde:	5a e0       	ldi	r21, 0x0A	; 10
    fce0:	e5 2e       	mov	r14, r21
    fce2:	0e 94 dc 67 	call	0xcfb8	; 0xcfb8 <UserInput>
		 if (uiResult==USER_OK)stMenuTicket=mtFIP;
    fce6:	83 30       	cpi	r24, 0x03	; 3
    fce8:	21 f4       	brne	.+8      	; 0xfcf2 <FMenuTicket+0x172>
    fcea:	85 e0       	ldi	r24, 0x05	; 5
    fcec:	80 93 0d 02 	sts	0x020D, r24
    fcf0:	85 c0       	rjmp	.+266    	; 0xfdfc <FMenuTicket+0x27c>
		 else
		 if (uiResult==USER_CANCEL)stMenuTicket=mtPlatNo;
    fcf2:	81 30       	cpi	r24, 0x01	; 1
    fcf4:	d9 f3       	breq	.-10     	; 0xfcec <FMenuTicket+0x16c>
		 else
		 if (uiResult==USER_ENTRY)lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
    fcf6:	84 30       	cpi	r24, 0x04	; 4
    fcf8:	21 f4       	brne	.+8      	; 0xfd02 <FMenuTicket+0x182>
    fcfa:	61 e0       	ldi	r22, 0x01	; 1
    fcfc:	4b ed       	ldi	r20, 0xDB	; 219
    fcfe:	5b e0       	ldi	r21, 0x0B	; 11
    fd00:	07 c0       	rjmp	.+14     	; 0xfd10 <FMenuTicket+0x190>
		 else
		 if (uiResult==USER_NO_DATA)lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    fd02:	85 30       	cpi	r24, 0x05	; 5
    fd04:	09 f0       	breq	.+2      	; 0xfd08 <FMenuTicket+0x188>
    fd06:	7a c0       	rjmp	.+244    	; 0xfdfc <FMenuTicket+0x27c>
    fd08:	84 e0       	ldi	r24, 0x04	; 4
    fd0a:	61 e0       	ldi	r22, 0x01	; 1
    fd0c:	46 ec       	ldi	r20, 0xC6	; 198
    fd0e:	5b e0       	ldi	r21, 0x0B	; 11
    fd10:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
    fd14:	73 c0       	rjmp	.+230    	; 0xfdfc <FMenuTicket+0x27c>
	     break;
    case mtFIP:
	     lcd_clear();
    fd16:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
		 _scr_pump();
    fd1a:	0e 94 f4 47 	call	0x8fe8	; 0x8fe8 <_scr_pump>
		 stMenuTicket=mtInputFIP;
    fd1e:	86 e0       	ldi	r24, 0x06	; 6
    fd20:	e5 cf       	rjmp	.-54     	; 0xfcec <FMenuTicket+0x16c>
	     break;
    case mtInputFIP:
	     KeyPressed=_key_scan(1);
    fd22:	81 e0       	ldi	r24, 0x01	; 1
    fd24:	0e 94 6d a6 	call	0x14cda	; 0x14cda <_key_scan>
    fd28:	18 2f       	mov	r17, r24
		 KeyChar=_key_btn(KeyPressed);
    fd2a:	0e 94 ce a5 	call	0x14b9c	; 0x14b9c <_key_btn>
		 if ((KeyChar>='1')&&(KeyChar<='8')){
    fd2e:	81 53       	subi	r24, 0x31	; 49
    fd30:	88 30       	cpi	r24, 0x08	; 8
    fd32:	40 f4       	brcc	.+16     	; 0xfd44 <FMenuTicket+0x1c4>
		     FIP_Used=KeyChar-'0';
    fd34:	8f 5f       	subi	r24, 0xFF	; 255
    fd36:	80 93 0a 02 	sts	0x020A, r24
			 zFIP_Used=FIP_Used;
    fd3a:	80 93 09 02 	sts	0x0209, r24
		     stMenuTicket=mtSendMsg98;
    fd3e:	87 e0       	ldi	r24, 0x07	; 7
    fd40:	80 93 0d 02 	sts	0x020D, r24
		 }
		 if (KeyPressed==_KEY_CANCEL){
    fd44:	17 3e       	cpi	r17, 0xE7	; 231
    fd46:	11 f4       	brne	.+4      	; 0xfd4c <FMenuTicket+0x1cc>
             stMenuTicket=mtOdometer;
    fd48:	83 e0       	ldi	r24, 0x03	; 3
    fd4a:	d0 cf       	rjmp	.-96     	; 0xfcec <FMenuTicket+0x16c>
		 }else
		 if (KeyPressed==_KEY_ENTER){
    fd4c:	17 3b       	cpi	r17, 0xB7	; 183
    fd4e:	09 f0       	breq	.+2      	; 0xfd52 <FMenuTicket+0x1d2>
    fd50:	55 c0       	rjmp	.+170    	; 0xfdfc <FMenuTicket+0x27c>
		     FIP_Used=zFIP_Used;
    fd52:	80 91 09 02 	lds	r24, 0x0209
    fd56:	80 93 0a 02 	sts	0x020A, r24
             stMenuTicket=mtInitWaitMessage99;
    fd5a:	88 e0       	ldi	r24, 0x08	; 8
    fd5c:	c7 cf       	rjmp	.-114    	; 0xfcec <FMenuTicket+0x16c>
		 }
	     break;	
    case mtInitWaitMessage99:
	     lcd_clear();
    fd5e:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
		 lcd_printf(2,1,PSTR("Send Request"));
    fd62:	82 e0       	ldi	r24, 0x02	; 2
    fd64:	61 e0       	ldi	r22, 0x01	; 1
    fd66:	49 eb       	ldi	r20, 0xB9	; 185
    fd68:	5b e0       	ldi	r21, 0x0B	; 11
    fd6a:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		 lcd_printf(3,1,PSTR("Proses"));
    fd6e:	83 e0       	ldi	r24, 0x03	; 3
    fd70:	61 e0       	ldi	r22, 0x01	; 1
    fd72:	42 eb       	ldi	r20, 0xB2	; 178
    fd74:	5b e0       	ldi	r21, 0x0B	; 11
    fd76:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
         stMenuTicket=mtSendMsg98;
    fd7a:	87 e0       	ldi	r24, 0x07	; 7
    fd7c:	b7 cf       	rjmp	.-146    	; 0xfcec <FMenuTicket+0x16c>
	     break;
    case mtSendMsg98:
	     iPos=0;
    fd7e:	10 92 0c 02 	sts	0x020C, r1
		 iSend=0;
    fd82:	10 92 0b 02 	sts	0x020B, r1
		 IsMessage99=False;
    fd86:	10 92 9f 01 	sts	0x019F, r1
		 TimSend=0;
    fd8a:	10 92 79 0c 	sts	0x0C79, r1
		 iLoop=0;
    fd8e:	10 92 08 02 	sts	0x0208, r1
    fd92:	10 92 07 02 	sts	0x0207, r1
		 if (IFType==IT_SLAVE)sendMessage98(FIP_Used);
    fd96:	80 91 00 01 	lds	r24, 0x0100
    fd9a:	81 30       	cpi	r24, 0x01	; 1
    fd9c:	29 f4       	brne	.+10     	; 0xfda8 <FMenuTicket+0x228>
    fd9e:	80 91 0a 02 	lds	r24, 0x020A
    fda2:	0e 94 99 7d 	call	0xfb32	; 0xfb32 <sendMessage98>
    fda6:	24 c0       	rjmp	.+72     	; 0xfdf0 <FMenuTicket+0x270>
		 else 
		 if (IFType==IT_STANDALONE)PrintStandalone(FIP_Used,False);
    fda8:	82 30       	cpi	r24, 0x02	; 2
    fdaa:	11 f5       	brne	.+68     	; 0xfdf0 <FMenuTicket+0x270>
    fdac:	80 91 0a 02 	lds	r24, 0x020A
    fdb0:	60 e0       	ldi	r22, 0x00	; 0
    fdb2:	0e 94 5e 45 	call	0x8abc	; 0x8abc <PrintStandalone>
    fdb6:	1c c0       	rjmp	.+56     	; 0xfdf0 <FMenuTicket+0x270>
	                     stMenuTicket=mtSendMsg98;
				  }
			 }
		 }
		 */
		 if (IsMessage99==True){ 
    fdb8:	80 91 9f 01 	lds	r24, 0x019F
    fdbc:	81 30       	cpi	r24, 0x01	; 1
    fdbe:	f1 f4       	brne	.+60     	; 0xfdfc <FMenuTicket+0x27c>
		    stMenuTicket=mtMessage99Received;
    fdc0:	8a e0       	ldi	r24, 0x0A	; 10
    fdc2:	94 cf       	rjmp	.-216    	; 0xfcec <FMenuTicket+0x16c>
	     break;
    case mtMessage99Received:
	     stMenuTicket=mtExitMenuTicket;
		 break;
    case mtNoConnection:
	     lcd_clear();
    fdc4:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
		 lcd_printf(2,1,PSTR("Error No Connection"));
    fdc8:	82 e0       	ldi	r24, 0x02	; 2
    fdca:	61 e0       	ldi	r22, 0x01	; 1
    fdcc:	4e e9       	ldi	r20, 0x9E	; 158
    fdce:	5b e0       	ldi	r21, 0x0B	; 11
    fdd0:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    fdd4:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    fdd6:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    fdd8:	82 e0       	ldi	r24, 0x02	; 2
    fdda:	80 93 bc 01 	sts	0x01BC, r24
    fdde:	80 e2       	ldi	r24, 0x20	; 32
    fde0:	9e e4       	ldi	r25, 0x4E	; 78
    fde2:	29 e1       	ldi	r18, 0x19	; 25
    fde4:	30 e0       	ldi	r19, 0x00	; 0
    fde6:	f9 01       	movw	r30, r18
    fde8:	31 97       	sbiw	r30, 0x01	; 1
    fdea:	f1 f7       	brne	.-4      	; 0xfde8 <FMenuTicket+0x268>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    fdec:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    fdee:	d9 f7       	brne	.-10     	; 0xfde6 <FMenuTicket+0x266>
    case mtNoConnection:
	     lcd_clear();
		 lcd_printf(2,1,PSTR("Error No Connection"));
		 system_beep(2);
		 _delay_ms(2000);
         stMenuTicket=mtExitMenuTicket;
    fdf0:	8c e0       	ldi	r24, 0x0C	; 12
    fdf2:	7c cf       	rjmp	.-264    	; 0xfcec <FMenuTicket+0x16c>
	     break;
    case mtExitMenuTicket:
	     Result=MENU_DONE;
	     stMenuTicket=mtInit;
    fdf4:	10 92 0d 02 	sts	0x020D, r1
    fdf8:	81 e0       	ldi	r24, 0x01	; 1
    fdfa:	01 c0       	rjmp	.+2      	; 0xfdfe <FMenuTicket+0x27e>
    fdfc:	80 e0       	ldi	r24, 0x00	; 0
	     break;
	}
  return Result;
}
    fdfe:	64 96       	adiw	r28, 0x14	; 20
    fe00:	0f b6       	in	r0, 0x3f	; 63
    fe02:	f8 94       	cli
    fe04:	de bf       	out	0x3e, r29	; 62
    fe06:	0f be       	out	0x3f, r0	; 63
    fe08:	cd bf       	out	0x3d, r28	; 61
    fe0a:	cf 91       	pop	r28
    fe0c:	df 91       	pop	r29
    fe0e:	1f 91       	pop	r17
    fe10:	0f 91       	pop	r16
    fe12:	ef 90       	pop	r14
    fe14:	08 95       	ret

0000fe16 <sendMessage94>:
	sprintf_P(strSend,PSTR("E9445512"));
    //uart_print(0, 0,strSend);
    uart_print(1, 0,strSend);
	uart(1, 1,0x02);
	*/
	IFTSendMessage(MSG_94);
    fe16:	84 e9       	ldi	r24, 0x94	; 148
    fe18:	0e 94 55 7a 	call	0xf4aa	; 0xf4aa <IFTSendMessage>
}
    fe1c:	08 95       	ret

0000fe1e <sendMessage92>:
	sprintf_P(strSend,PSTR("E9445512"));
    //uart_print(0, 0,strSend);
    uart_print(1, 0,strSend);
	uart(1, 1,0x02);
	*/
	IFTSendMessage(MSG_92);
    fe1e:	82 e9       	ldi	r24, 0x92	; 146
    fe20:	0e 94 55 7a 	call	0xf4aa	; 0xf4aa <IFTSendMessage>
}
    fe24:	08 95       	ret

0000fe26 <sendMessage90>:
    uart_print(1, 0,strSend);
	sprintf_P(strSend,PSTR("E9445512"));
    uart_print(1, 0,strSend);
	uart(1, 1,0x02);
	*/
	IFTSendMessage(MSG_90);
    fe26:	80 e9       	ldi	r24, 0x90	; 144
    fe28:	0e 94 55 7a 	call	0xf4aa	; 0xf4aa <IFTSendMessage>
}
    fe2c:	08 95       	ret

0000fe2e <FMenuEDCTransaction>:
	      break;
	 }
	 return Result;
}

char FMenuEDCTransaction(){
    fe2e:	0f 93       	push	r16
    fe30:	1f 93       	push	r17
static char FIP_Used=0;
       char lcdteks[20],Result=MENU_NONE;
       char KeyPressed=0,KeyChar,FIPResult;

     Result=MENU_NONE;
	 switch(stEtransaction){
    fe32:	80 91 62 02 	lds	r24, 0x0262
    fe36:	85 30       	cpi	r24, 0x05	; 5
    fe38:	09 f4       	brne	.+2      	; 0xfe3c <FMenuEDCTransaction+0xe>
    fe3a:	96 c0       	rjmp	.+300    	; 0xff68 <FMenuEDCTransaction+0x13a>
    fe3c:	86 30       	cpi	r24, 0x06	; 6
    fe3e:	90 f4       	brcc	.+36     	; 0xfe64 <FMenuEDCTransaction+0x36>
    fe40:	82 30       	cpi	r24, 0x02	; 2
    fe42:	09 f4       	brne	.+2      	; 0xfe46 <FMenuEDCTransaction+0x18>
    fe44:	52 c0       	rjmp	.+164    	; 0xfeea <FMenuEDCTransaction+0xbc>
    fe46:	83 30       	cpi	r24, 0x03	; 3
    fe48:	30 f4       	brcc	.+12     	; 0xfe56 <FMenuEDCTransaction+0x28>
    fe4a:	88 23       	and	r24, r24
    fe4c:	f1 f0       	breq	.+60     	; 0xfe8a <FMenuEDCTransaction+0x5c>
    fe4e:	81 30       	cpi	r24, 0x01	; 1
    fe50:	09 f0       	breq	.+2      	; 0xfe54 <FMenuEDCTransaction+0x26>
    fe52:	d2 c0       	rjmp	.+420    	; 0xfff8 <FMenuEDCTransaction+0x1ca>
    fe54:	36 c0       	rjmp	.+108    	; 0xfec2 <FMenuEDCTransaction+0x94>
    fe56:	83 30       	cpi	r24, 0x03	; 3
    fe58:	09 f4       	brne	.+2      	; 0xfe5c <FMenuEDCTransaction+0x2e>
    fe5a:	57 c0       	rjmp	.+174    	; 0xff0a <FMenuEDCTransaction+0xdc>
    fe5c:	84 30       	cpi	r24, 0x04	; 4
    fe5e:	09 f0       	breq	.+2      	; 0xfe62 <FMenuEDCTransaction+0x34>
    fe60:	cb c0       	rjmp	.+406    	; 0xfff8 <FMenuEDCTransaction+0x1ca>
    fe62:	7c c0       	rjmp	.+248    	; 0xff5c <FMenuEDCTransaction+0x12e>
    fe64:	88 30       	cpi	r24, 0x08	; 8
    fe66:	09 f4       	brne	.+2      	; 0xfe6a <FMenuEDCTransaction+0x3c>
    fe68:	b7 c0       	rjmp	.+366    	; 0xffd8 <FMenuEDCTransaction+0x1aa>
    fe6a:	89 30       	cpi	r24, 0x09	; 9
    fe6c:	38 f4       	brcc	.+14     	; 0xfe7c <FMenuEDCTransaction+0x4e>
    fe6e:	86 30       	cpi	r24, 0x06	; 6
    fe70:	09 f4       	brne	.+2      	; 0xfe74 <FMenuEDCTransaction+0x46>
    fe72:	8d c0       	rjmp	.+282    	; 0xff8e <FMenuEDCTransaction+0x160>
    fe74:	87 30       	cpi	r24, 0x07	; 7
    fe76:	09 f0       	breq	.+2      	; 0xfe7a <FMenuEDCTransaction+0x4c>
    fe78:	bf c0       	rjmp	.+382    	; 0xfff8 <FMenuEDCTransaction+0x1ca>
    fe7a:	8b c0       	rjmp	.+278    	; 0xff92 <FMenuEDCTransaction+0x164>
    fe7c:	89 30       	cpi	r24, 0x09	; 9
    fe7e:	09 f4       	brne	.+2      	; 0xfe82 <FMenuEDCTransaction+0x54>
    fe80:	b1 c0       	rjmp	.+354    	; 0xffe4 <FMenuEDCTransaction+0x1b6>
    fe82:	8a 30       	cpi	r24, 0x0A	; 10
    fe84:	09 f0       	breq	.+2      	; 0xfe88 <FMenuEDCTransaction+0x5a>
    fe86:	b8 c0       	rjmp	.+368    	; 0xfff8 <FMenuEDCTransaction+0x1ca>
    fe88:	b3 c0       	rjmp	.+358    	; 0xfff0 <FMenuEDCTransaction+0x1c2>
	 case etInit:
	      lcd_clear();
    fe8a:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
		  lcd_printf(1,1,PSTR("Select Card Type"));
    fe8e:	81 e0       	ldi	r24, 0x01	; 1
    fe90:	61 e0       	ldi	r22, 0x01	; 1
    fe92:	44 e6       	ldi	r20, 0x64	; 100
    fe94:	5c e1       	ldi	r21, 0x1C	; 28
    fe96:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
          lcd_printf(1,1,PSTR("1.Debit/Flash Card  "));
    fe9a:	81 e0       	ldi	r24, 0x01	; 1
    fe9c:	61 e0       	ldi	r22, 0x01	; 1
    fe9e:	4f e4       	ldi	r20, 0x4F	; 79
    fea0:	5c e1       	ldi	r21, 0x1C	; 28
    fea2:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  lcd_printf(2,1,PSTR("2.Credit Card       "));
    fea6:	82 e0       	ldi	r24, 0x02	; 2
    fea8:	61 e0       	ldi	r22, 0x01	; 1
    feaa:	4a e3       	ldi	r20, 0x3A	; 58
    feac:	5c e1       	ldi	r21, 0x1C	; 28
    feae:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
	      lcd_printf(4,1,PSTR("[*]Back             "));
    feb2:	84 e0       	ldi	r24, 0x04	; 4
    feb4:	61 e0       	ldi	r22, 0x01	; 1
    feb6:	45 e2       	ldi	r20, 0x25	; 37
    feb8:	5c e1       	ldi	r21, 0x1C	; 28
    feba:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  stEtransaction=etInputEDC;
    febe:	81 e0       	ldi	r24, 0x01	; 1
    fec0:	63 c0       	rjmp	.+198    	; 0xff88 <FMenuEDCTransaction+0x15a>
	      break;
     case etInputEDC:
	 	  KeyPressed=_key_scan(1);
    fec2:	81 e0       	ldi	r24, 0x01	; 1
    fec4:	0e 94 6d a6 	call	0x14cda	; 0x14cda <_key_scan>
    fec8:	08 2f       	mov	r16, r24
		  KeyChar=_key_btn(KeyPressed);
    feca:	0e 94 ce a5 	call	0x14b9c	; 0x14b9c <_key_btn>
    fece:	98 2f       	mov	r25, r24
		  if ((KeyChar>='1')&&(KeyChar<='2')){
    fed0:	81 53       	subi	r24, 0x31	; 49
    fed2:	82 30       	cpi	r24, 0x02	; 2
    fed4:	30 f4       	brcc	.+12     	; 0xfee2 <FMenuEDCTransaction+0xb4>
		       EDCType=KeyChar-'0';
    fed6:	90 53       	subi	r25, 0x30	; 48
    fed8:	90 93 0b 08 	sts	0x080B, r25
		       stEtransaction=etSelectFIP;
    fedc:	82 e0       	ldi	r24, 0x02	; 2
    fede:	80 93 62 02 	sts	0x0262, r24
		     }
		  if (KeyPressed==_KEY_CANCEL)stEtransaction=etExitEDCTransaction;
    fee2:	07 3e       	cpi	r16, 0xE7	; 231
    fee4:	09 f0       	breq	.+2      	; 0xfee8 <FMenuEDCTransaction+0xba>
    fee6:	88 c0       	rjmp	.+272    	; 0xfff8 <FMenuEDCTransaction+0x1ca>
    fee8:	81 c0       	rjmp	.+258    	; 0xffec <FMenuEDCTransaction+0x1be>
	      break;
	 case etSelectFIP:
	      FIPResult=menu_FIP(FIP_Used,strFIP_ID);
    feea:	80 e0       	ldi	r24, 0x00	; 0
    feec:	90 e0       	ldi	r25, 0x00	; 0
    feee:	69 eb       	ldi	r22, 0xB9	; 185
    fef0:	77 e0       	ldi	r23, 0x07	; 7
    fef2:	0e 94 5b 55 	call	0xaab6	; 0xaab6 <menu_FIP>
		  if (FIPResult==FIP_DONE)stEtransaction=etInitMessage90;
    fef6:	88 23       	and	r24, r24
    fef8:	11 f4       	brne	.+4      	; 0xfefe <FMenuEDCTransaction+0xd0>
    fefa:	83 e0       	ldi	r24, 0x03	; 3
    fefc:	45 c0       	rjmp	.+138    	; 0xff88 <FMenuEDCTransaction+0x15a>
		  else
		  if (FIPResult==FIP_CANCEL)stEtransaction=etInit;
    fefe:	82 30       	cpi	r24, 0x02	; 2
    ff00:	09 f0       	breq	.+2      	; 0xff04 <FMenuEDCTransaction+0xd6>
    ff02:	7a c0       	rjmp	.+244    	; 0xfff8 <FMenuEDCTransaction+0x1ca>
    ff04:	10 92 62 02 	sts	0x0262, r1
    ff08:	77 c0       	rjmp	.+238    	; 0xfff8 <FMenuEDCTransaction+0x1ca>
    ff0a:	ef e8       	ldi	r30, 0x8F	; 143
    ff0c:	fc e0       	ldi	r31, 0x0C	; 12
}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
	     strMemory[i]=data;
    ff0e:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    ff10:	8c e0       	ldi	r24, 0x0C	; 12
    ff12:	e4 3a       	cpi	r30, 0xA4	; 164
    ff14:	f8 07       	cpc	r31, r24
    ff16:	d9 f7       	brne	.-10     	; 0xff0e <FMenuEDCTransaction+0xe0>
		  else
		  if (FIPResult==FIP_CANCEL)stEtransaction=etInit;
	      break;
     case etInitMessage90:
	      FillChar(strRef1,sizeof(strRef1),0);
	      if (EDCType==1){
    ff18:	80 91 0b 08 	lds	r24, 0x080B
    ff1c:	81 30       	cpi	r24, 0x01	; 1
    ff1e:	19 f4       	brne	.+6      	; 0xff26 <FMenuEDCTransaction+0xf8>
		      AddSpaceLag(strRef1,20);
    ff20:	cf 01       	movw	r24, r30
    ff22:	45 97       	sbiw	r24, 0x15	; 21
    ff24:	16 c0       	rjmp	.+44     	; 0xff52 <FMenuEDCTransaction+0x124>
          }
		  else
	      if (EDCType==2){
    ff26:	82 30       	cpi	r24, 0x02	; 2
    ff28:	b9 f4       	brne	.+46     	; 0xff58 <FMenuEDCTransaction+0x12a>
		      sprintf_P(strRef1,PSTR("CREDITCARD"));
    ff2a:	00 d0       	rcall	.+0      	; 0xff2c <FMenuEDCTransaction+0xfe>
    ff2c:	00 d0       	rcall	.+0      	; 0xff2e <FMenuEDCTransaction+0x100>
    ff2e:	8f 01       	movw	r16, r30
    ff30:	05 51       	subi	r16, 0x15	; 21
    ff32:	10 40       	sbci	r17, 0x00	; 0
    ff34:	ed b7       	in	r30, 0x3d	; 61
    ff36:	fe b7       	in	r31, 0x3e	; 62
    ff38:	12 83       	std	Z+2, r17	; 0x02
    ff3a:	01 83       	std	Z+1, r16	; 0x01
    ff3c:	8a e1       	ldi	r24, 0x1A	; 26
    ff3e:	9c e1       	ldi	r25, 0x1C	; 28
    ff40:	94 83       	std	Z+4, r25	; 0x04
    ff42:	83 83       	std	Z+3, r24	; 0x03
    ff44:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
			  AddSpaceLag(strRef1,20);
    ff48:	0f 90       	pop	r0
    ff4a:	0f 90       	pop	r0
    ff4c:	0f 90       	pop	r0
    ff4e:	0f 90       	pop	r0
    ff50:	c8 01       	movw	r24, r16
    ff52:	64 e1       	ldi	r22, 0x14	; 20
    ff54:	0e 94 d6 2d 	call	0x5bac	; 0x5bac <AddSpaceLag>
		  }	 
	      stEtransaction=etSendingMessage90;
    ff58:	84 e0       	ldi	r24, 0x04	; 4
    ff5a:	16 c0       	rjmp	.+44     	; 0xff88 <FMenuEDCTransaction+0x15a>
	      break;
     case etSendingMessage90:
          sendMessage90();
    ff5c:	0e 94 13 7f 	call	0xfe26	; 0xfe26 <sendMessage90>
		  TimSend=0;
    ff60:	10 92 79 0c 	sts	0x0C79, r1
          stEtransaction=etWaitReply;
    ff64:	85 e0       	ldi	r24, 0x05	; 5
    ff66:	10 c0       	rjmp	.+32     	; 0xff88 <FMenuEDCTransaction+0x15a>
	      break;
     case etWaitReply:
	      if (TimSend>TIM_SEND*2)stEtransaction=etNoConnection;
    ff68:	80 91 79 0c 	lds	r24, 0x0C79
    ff6c:	85 31       	cpi	r24, 0x15	; 21
    ff6e:	18 f0       	brcs	.+6      	; 0xff76 <FMenuEDCTransaction+0x148>
    ff70:	88 e0       	ldi	r24, 0x08	; 8
    ff72:	80 93 62 02 	sts	0x0262, r24
		  if ((IsMessage91==True)||(IsMessage09==True))
    ff76:	80 91 a7 01 	lds	r24, 0x01A7
    ff7a:	81 30       	cpi	r24, 0x01	; 1
    ff7c:	21 f0       	breq	.+8      	; 0xff86 <FMenuEDCTransaction+0x158>
    ff7e:	80 91 a3 01 	lds	r24, 0x01A3
    ff82:	81 30       	cpi	r24, 0x01	; 1
    ff84:	c9 f5       	brne	.+114    	; 0xfff8 <FMenuEDCTransaction+0x1ca>
		       stEtransaction=etSuccesEDC;
    ff86:	86 e0       	ldi	r24, 0x06	; 6
    ff88:	80 93 62 02 	sts	0x0262, r24
    ff8c:	35 c0       	rjmp	.+106    	; 0xfff8 <FMenuEDCTransaction+0x1ca>
	      break;
     case etSuccesEDC:
	      stEtransaction=etDisplayFreeMessage;
    ff8e:	87 e0       	ldi	r24, 0x07	; 7
    ff90:	fb cf       	rjmp	.-10     	; 0xff88 <FMenuEDCTransaction+0x15a>
	      break;
     case etDisplayFreeMessage:
	      if (IsMessage09==True){
    ff92:	80 91 a3 01 	lds	r24, 0x01A3
    ff96:	81 30       	cpi	r24, 0x01	; 1
    ff98:	19 f5       	brne	.+70     	; 0xffe0 <FMenuEDCTransaction+0x1b2>
		      IsMessage09=False;
    ff9a:	10 92 a3 01 	sts	0x01A3, r1
	          procMessage09();
    ff9e:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <procMessage09>
		      lcd_clear();
    ffa2:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
		      lcd_print(1,1,strFreeMessageLine1);
    ffa6:	81 e0       	ldi	r24, 0x01	; 1
    ffa8:	61 e0       	ldi	r22, 0x01	; 1
    ffaa:	42 e9       	ldi	r20, 0x92	; 146
    ffac:	58 e0       	ldi	r21, 0x08	; 8
    ffae:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
		      lcd_print(2,1,strFreeMessageLine2);
    ffb2:	82 e0       	ldi	r24, 0x02	; 2
    ffb4:	61 e0       	ldi	r22, 0x01	; 1
    ffb6:	43 ea       	ldi	r20, 0xA3	; 163
    ffb8:	57 e0       	ldi	r21, 0x07	; 7
    ffba:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
		      lcd_print(3,1,strFreeMessageLine3);
    ffbe:	83 e0       	ldi	r24, 0x03	; 3
    ffc0:	61 e0       	ldi	r22, 0x01	; 1
    ffc2:	4c e1       	ldi	r20, 0x1C	; 28
    ffc4:	58 e0       	ldi	r21, 0x08	; 8
    ffc6:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
			  lcd_print(4,1,strFreeMessageLine4);
    ffca:	84 e0       	ldi	r24, 0x04	; 4
    ffcc:	61 e0       	ldi	r22, 0x01	; 1
    ffce:	46 ed       	ldi	r20, 0xD6	; 214
    ffd0:	5b e0       	ldi	r21, 0x0B	; 11
    ffd2:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
    ffd6:	02 c0       	rjmp	.+4      	; 0xffdc <FMenuEDCTransaction+0x1ae>
			  TimDisplay=0;
			  }
		  stEtransaction=etDelayExit;
	      break;
     case etNoConnection:
	      lcd_clear();
    ffd8:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
		  TimDisplay=0;
    ffdc:	10 92 92 01 	sts	0x0192, r1
		  stEtransaction=etDelayExit;
    ffe0:	89 e0       	ldi	r24, 0x09	; 9
    ffe2:	d2 cf       	rjmp	.-92     	; 0xff88 <FMenuEDCTransaction+0x15a>
	      break;
     case etDelayExit:
	      if (TimDisplay>8)stEtransaction=etExitEDCTransaction;
    ffe4:	80 91 92 01 	lds	r24, 0x0192
    ffe8:	89 30       	cpi	r24, 0x09	; 9
    ffea:	30 f0       	brcs	.+12     	; 0xfff8 <FMenuEDCTransaction+0x1ca>
    ffec:	8a e0       	ldi	r24, 0x0A	; 10
    ffee:	cc cf       	rjmp	.-104    	; 0xff88 <FMenuEDCTransaction+0x15a>
	      break;
     case etExitEDCTransaction:
	      stEtransaction=etInit;
    fff0:	10 92 62 02 	sts	0x0262, r1
    fff4:	81 e0       	ldi	r24, 0x01	; 1
    fff6:	01 c0       	rjmp	.+2      	; 0xfffa <FMenuEDCTransaction+0x1cc>
    fff8:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
	      break;
	 }
   return Result;
}
    fffa:	1f 91       	pop	r17
    fffc:	0f 91       	pop	r16
    fffe:	08 95       	ret

00010000 <sendMessage58>:
	CardType=0;
	sprintf_P(strSend,PSTR("%dF0000000E123456FFFFF%sE9445512"),CardType,strOdometer);
    uart_print(1, 0,strSend);
	uart(1, 1,0x02);
	*/
	IFTSendMessage(MSG_58);
   10000:	88 e5       	ldi	r24, 0x58	; 88
   10002:	0e 94 55 7a 	call	0xf4aa	; 0xf4aa <IFTSendMessage>
}
   10006:	08 95       	ret

00010008 <sendMessage56>:
    uart_print(1, 0,strSend);	

	uart_printf(1,0,PSTR("AF968CFFB"));
	uart(1, 1,0x02);
	*/
	IFTSendMessage(MSG_56);
   10008:	86 e5       	ldi	r24, 0x56	; 86
   1000a:	0e 94 55 7a 	call	0xf4aa	; 0xf4aa <IFTSendMessage>
}
   1000e:	08 95       	ret

00010010 <FMenuLocalAccount>:
	 __key_lgtcnt = 0; 
	 PORTG=PORTG&0b11111101;
}


char FMenuLocalAccount(){
   10010:	6f 92       	push	r6
   10012:	7f 92       	push	r7
   10014:	8f 92       	push	r8
   10016:	9f 92       	push	r9
   10018:	af 92       	push	r10
   1001a:	bf 92       	push	r11
   1001c:	cf 92       	push	r12
   1001e:	df 92       	push	r13
   10020:	ef 92       	push	r14
   10022:	ff 92       	push	r15
   10024:	0f 93       	push	r16
   10026:	1f 93       	push	r17
   10028:	df 93       	push	r29
   1002a:	cf 93       	push	r28
   1002c:	cd b7       	in	r28, 0x3d	; 61
   1002e:	de b7       	in	r29, 0x3e	; 62
   10030:	e4 97       	sbiw	r28, 0x34	; 52
   10032:	0f b6       	in	r0, 0x3f	; 63
   10034:	f8 94       	cli
   10036:	de bf       	out	0x3e, r29	; 62
   10038:	0f be       	out	0x3f, r0	; 63
   1003a:	cd bf       	out	0x3d, r28	; 61
       char ProductName[11],strName[21];//,strPumpL[3],strPumpR[3];
       char Result;

	   Result=MENU_NONE;
	                                 //|   Local Account   |          
	       switch(stLocalAccount){   //|ID: ACD12345       |
   1003c:	80 91 5b 01 	lds	r24, 0x015B
   10040:	90 e0       	ldi	r25, 0x00	; 0
   10042:	fc 01       	movw	r30, r24
   10044:	31 97       	sbiw	r30, 0x01	; 1
   10046:	ef 31       	cpi	r30, 0x1F	; 31
   10048:	f1 05       	cpc	r31, r1
   1004a:	10 f0       	brcs	.+4      	; 0x10050 <FMenuLocalAccount+0x40>
   1004c:	0c 94 98 88 	jmp	0x11130	; 0x11130 <FMenuLocalAccount+0x1120>
   10050:	e0 57       	subi	r30, 0x70	; 112
   10052:	ff 4f       	sbci	r31, 0xFF	; 255
   10054:	ee 0f       	add	r30, r30
   10056:	ff 1f       	adc	r31, r31
   10058:	05 90       	lpm	r0, Z+
   1005a:	f4 91       	lpm	r31, Z+
   1005c:	e0 2d       	mov	r30, r0
   1005e:	09 94       	ijmp
	      }
     }      
}

void BackLightTrig(){    
     __key_light = 1; 
   10060:	81 e0       	ldi	r24, 0x01	; 1
   10062:	80 93 ae 02 	sts	0x02AE, r24
	 __key_lgtcnt = 0; 
   10066:	10 92 af 02 	sts	0x02AF, r1
	 PORTG=PORTG&0b11111101;
   1006a:	80 91 65 00 	lds	r24, 0x0065
   1006e:	8d 7f       	andi	r24, 0xFD	; 253
   10070:	80 93 65 00 	sts	0x0065, r24
	                                 //|   Local Account   |          
	       switch(stLocalAccount){   //|ID: ACD12345       |
	       case laInit:              //|Process ...        |
		        //Process RFID Data  //|                   |
				//UpdateCardID();
                BackLightTrig();ViewCardID();
   10074:	0e 94 e0 3e 	call	0x7dc0	; 0x7dc0 <ViewCardID>
	            lcd_clear();
   10078:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
	            lcd_printf(1,1,PSTR("   Local Account   "));
   1007c:	81 e0       	ldi	r24, 0x01	; 1
   1007e:	61 e0       	ldi	r22, 0x01	; 1
   10080:	4e ec       	ldi	r20, 0xCE	; 206
   10082:	52 e2       	ldi	r21, 0x22	; 34
   10084:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
	            sprintf_P(lcdteks,PSTR("ID:%s"),strCardID);lcd_print(2,1,lcdteks);
   10088:	00 d0       	rcall	.+0      	; 0x1008a <FMenuLocalAccount+0x7a>
   1008a:	00 d0       	rcall	.+0      	; 0x1008c <FMenuLocalAccount+0x7c>
   1008c:	00 d0       	rcall	.+0      	; 0x1008e <FMenuLocalAccount+0x7e>
   1008e:	ed b7       	in	r30, 0x3d	; 61
   10090:	fe b7       	in	r31, 0x3e	; 62
   10092:	31 96       	adiw	r30, 0x01	; 1
   10094:	8e 01       	movw	r16, r28
   10096:	04 5f       	subi	r16, 0xF4	; 244
   10098:	1f 4f       	sbci	r17, 0xFF	; 255
   1009a:	ad b7       	in	r26, 0x3d	; 61
   1009c:	be b7       	in	r27, 0x3e	; 62
   1009e:	12 96       	adiw	r26, 0x02	; 2
   100a0:	1c 93       	st	X, r17
   100a2:	0e 93       	st	-X, r16
   100a4:	11 97       	sbiw	r26, 0x01	; 1
   100a6:	88 ec       	ldi	r24, 0xC8	; 200
   100a8:	92 e2       	ldi	r25, 0x22	; 34
   100aa:	93 83       	std	Z+3, r25	; 0x03
   100ac:	82 83       	std	Z+2, r24	; 0x02
   100ae:	89 e8       	ldi	r24, 0x89	; 137
   100b0:	9b e0       	ldi	r25, 0x0B	; 11
   100b2:	95 83       	std	Z+5, r25	; 0x05
   100b4:	84 83       	std	Z+4, r24	; 0x04
   100b6:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
   100ba:	ed b7       	in	r30, 0x3d	; 61
   100bc:	fe b7       	in	r31, 0x3e	; 62
   100be:	36 96       	adiw	r30, 0x06	; 6
   100c0:	0f b6       	in	r0, 0x3f	; 63
   100c2:	f8 94       	cli
   100c4:	fe bf       	out	0x3e, r31	; 62
   100c6:	0f be       	out	0x3f, r0	; 63
   100c8:	ed bf       	out	0x3d, r30	; 61
   100ca:	82 e0       	ldi	r24, 0x02	; 2
   100cc:	61 e0       	ldi	r22, 0x01	; 1
   100ce:	a8 01       	movw	r20, r16
   100d0:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
                lcd_printf(3,1,PSTR("Proses"));
   100d4:	83 e0       	ldi	r24, 0x03	; 3
   100d6:	61 e0       	ldi	r22, 0x01	; 1
   100d8:	41 ec       	ldi	r20, 0xC1	; 193
   100da:	52 e2       	ldi	r21, 0x22	; 34
   100dc:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
				iPos=0;//iLoop=0;
   100e0:	10 92 96 02 	sts	0x0296, r1
				IsFullAuthorized=False;
   100e4:	10 92 86 02 	sts	0x0286, r1
		        stLocalAccount=laSendID;
   100e8:	82 e0       	ldi	r24, 0x02	; 2
   100ea:	0b c0       	rjmp	.+22     	; 0x10102 <FMenuLocalAccount+0xf2>
				break;         
           case laSendID://sendMessage56 
				IsMessage57=False;
   100ec:	10 92 a5 01 	sts	0x01A5, r1
                sendMessage56();
   100f0:	0e 94 04 80 	call	0x10008	; 0x10008 <sendMessage56>
				iWait=0;iPos=0;
   100f4:	10 92 95 02 	sts	0x0295, r1
   100f8:	10 92 96 02 	sts	0x0296, r1
				//iLoop=0;
				TimSend=0;
   100fc:	10 92 79 0c 	sts	0x0C79, r1
				stLocalAccount=laWaitMessage57;
   10100:	83 e0       	ldi	r24, 0x03	; 3
   10102:	80 93 5b 01 	sts	0x015B, r24
   10106:	0c 94 98 88 	jmp	0x11130	; 0x11130 <FMenuLocalAccount+0x1120>
						 system_beep(2);
						 stLocalAccount=laConTimout;
				}
				*/
				
		        iLoop++;
   1010a:	80 91 84 02 	lds	r24, 0x0284
   1010e:	90 91 85 02 	lds	r25, 0x0285
   10112:	01 96       	adiw	r24, 0x01	; 1
   10114:	90 93 85 02 	sts	0x0285, r25
   10118:	80 93 84 02 	sts	0x0284, r24
				if ((iLoop%MSG_WAIT_TIMOUT)==0){
   1011c:	68 e9       	ldi	r22, 0x98	; 152
   1011e:	7a e3       	ldi	r23, 0x3A	; 58
   10120:	0e 94 7a aa 	call	0x154f4	; 0x154f4 <__udivmodhi4>
   10124:	89 2b       	or	r24, r25
   10126:	e1 f4       	brne	.+56     	; 0x10160 <FMenuLocalAccount+0x150>
				   if (iPos<5){
   10128:	60 91 96 02 	lds	r22, 0x0296
   1012c:	65 30       	cpi	r22, 0x05	; 5
   1012e:	58 f4       	brcc	.+22     	; 0x10146 <FMenuLocalAccount+0x136>
					   lcd_put(3,(8+iPos),'.');
   10130:	68 5f       	subi	r22, 0xF8	; 248
   10132:	83 e0       	ldi	r24, 0x03	; 3
   10134:	4e e2       	ldi	r20, 0x2E	; 46
   10136:	0e 94 41 a5 	call	0x14a82	; 0x14a82 <lcd_put>
				       iPos++;
   1013a:	80 91 96 02 	lds	r24, 0x0296
   1013e:	8f 5f       	subi	r24, 0xFF	; 255
   10140:	80 93 96 02 	sts	0x0296, r24
   10144:	0d c0       	rjmp	.+26     	; 0x10160 <FMenuLocalAccount+0x150>
					   }
				   else{
				       iPos=0;
   10146:	10 92 96 02 	sts	0x0296, r1
					   lcd_printf(3,(9+iPos),PSTR("       "));
   1014a:	83 e0       	ldi	r24, 0x03	; 3
   1014c:	69 e0       	ldi	r22, 0x09	; 9
   1014e:	49 eb       	ldi	r20, 0xB9	; 185
   10150:	52 e2       	ldi	r21, 0x22	; 34
   10152:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
					   iWait++;
   10156:	80 91 95 02 	lds	r24, 0x0295
   1015a:	8f 5f       	subi	r24, 0xFF	; 255
   1015c:	80 93 95 02 	sts	0x0295, r24
					   }
				}
				if (iWait>3){
   10160:	80 91 95 02 	lds	r24, 0x0295
   10164:	84 30       	cpi	r24, 0x04	; 4
   10166:	50 f0       	brcs	.+20     	; 0x1017c <FMenuLocalAccount+0x16c>
				    stLocalAccount=laConTimout;
   10168:	84 e0       	ldi	r24, 0x04	; 4
   1016a:	80 93 5b 01 	sts	0x015B, r24
					TimLocAcc=0;
   1016e:	10 92 ba 01 	sts	0x01BA, r1
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   10172:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   10174:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   10176:	82 e0       	ldi	r24, 0x02	; 2
   10178:	80 93 bc 01 	sts	0x01BC, r24
				    stLocalAccount=laConTimout;
					TimLocAcc=0;
					system_beep(2);
				    }
                 
				if (IsMessage57==True){
   1017c:	80 91 a5 01 	lds	r24, 0x01A5
   10180:	81 30       	cpi	r24, 0x01	; 1
   10182:	09 f0       	breq	.+2      	; 0x10186 <FMenuLocalAccount+0x176>
   10184:	d5 c7       	rjmp	.+4010   	; 0x11130 <FMenuLocalAccount+0x1120>
				    IsMessage57=False;
   10186:	10 92 a5 01 	sts	0x01A5, r1
				    stLocalAccount=laProcMessage57;
   1018a:	85 e0       	ldi	r24, 0x05	; 5
   1018c:	ba cf       	rjmp	.-140    	; 0x10102 <FMenuLocalAccount+0xf2>
					}
		        break;
           case laConTimout:
		        //IsErrorTCPIP=True;
				lcd_printf(3,1,PSTR("Sending Failed      "));
   1018e:	83 e0       	ldi	r24, 0x03	; 3
   10190:	61 e0       	ldi	r22, 0x01	; 1
   10192:	44 ea       	ldi	r20, 0xA4	; 164
   10194:	52 e2       	ldi	r21, 0x22	; 34
   10196:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
				lcd_printf(4,1,PSTR("TCP/IP Error        "));
   1019a:	84 e0       	ldi	r24, 0x04	; 4
   1019c:	61 e0       	ldi	r22, 0x01	; 1
   1019e:	4f e8       	ldi	r20, 0x8F	; 143
   101a0:	52 e2       	ldi	r21, 0x22	; 34
   101a2:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
                if (TimLocAcc>2)  stLocalAccount=laExitLocAcc;
   101a6:	80 91 ba 01 	lds	r24, 0x01BA
   101aa:	83 30       	cpi	r24, 0x03	; 3
   101ac:	08 f4       	brcc	.+2      	; 0x101b0 <FMenuLocalAccount+0x1a0>
   101ae:	c0 c7       	rjmp	.+3968   	; 0x11130 <FMenuLocalAccount+0x1120>
   101b0:	ad c7       	rjmp	.+3930   	; 0x1110c <FMenuLocalAccount+0x10fc>
		        break;
           case laProcMessage57://Process Message
				lcd_printf(3,1,PSTR("Data Received       "));
   101b2:	83 e0       	ldi	r24, 0x03	; 3
   101b4:	61 e0       	ldi	r22, 0x01	; 1
   101b6:	4a e7       	ldi	r20, 0x7A	; 122
   101b8:	52 e2       	ldi	r21, 0x22	; 34
   101ba:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
				LocAccStatus=GetLocAccStatus(procMessage57());
   101be:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <procMessage57>


char GetLocAccStatus(char paramMessage57){
     char Result;
	 Result=LA_NONE;
     if (paramMessage57==MSG57_INVALID)Result=LA_INVALID;
   101c2:	81 30       	cpi	r24, 0x01	; 1
   101c4:	29 f0       	breq	.+10     	; 0x101d0 <FMenuLocalAccount+0x1c0>
	 else
     if (paramMessage57==MSG57_VALID)Result=LA_VALID;
   101c6:	82 30       	cpi	r24, 0x02	; 2
   101c8:	19 f0       	breq	.+6      	; 0x101d0 <FMenuLocalAccount+0x1c0>
	 else
     if (paramMessage57==MSG57_LIMITED)Result=LA_LIMITED;
   101ca:	83 30       	cpi	r24, 0x03	; 3
   101cc:	09 f0       	breq	.+2      	; 0x101d0 <FMenuLocalAccount+0x1c0>
   101ce:	80 e0       	ldi	r24, 0x00	; 0
				lcd_printf(4,1,PSTR("TCP/IP Error        "));
                if (TimLocAcc>2)  stLocalAccount=laExitLocAcc;
		        break;
           case laProcMessage57://Process Message
				lcd_printf(3,1,PSTR("Data Received       "));
				LocAccStatus=GetLocAccStatus(procMessage57());
   101d0:	80 93 97 02 	sts	0x0297, r24
				TimLocAcc=0;
   101d4:	10 92 ba 01 	sts	0x01BA, r1
				stLocalAccount=laDispStatus;
   101d8:	86 e0       	ldi	r24, 0x06	; 6
   101da:	93 cf       	rjmp	.-218    	; 0x10102 <FMenuLocalAccount+0xf2>
		        break;
           case laDispStatus://Display Status
		        if (LocAccStatus==LA_INVALID){
   101dc:	80 91 97 02 	lds	r24, 0x0297
   101e0:	81 30       	cpi	r24, 0x01	; 1
   101e2:	29 f4       	brne	.+10     	; 0x101ee <FMenuLocalAccount+0x1de>
					lcd_printf(3,1,PSTR("Tidak Terdaftar     "));    
   101e4:	83 e0       	ldi	r24, 0x03	; 3
   101e6:	61 e0       	ldi	r22, 0x01	; 1
   101e8:	45 e6       	ldi	r20, 0x65	; 101
   101ea:	52 e2       	ldi	r21, 0x22	; 34
   101ec:	0d c0       	rjmp	.+26     	; 0x10208 <FMenuLocalAccount+0x1f8>
					TimLocAcc=0;
				    stLocalAccount=laDelayExit;
				}
				else
                if (LocAccStatus==LA_VALID) {
   101ee:	82 30       	cpi	r24, 0x02	; 2
   101f0:	31 f4       	brne	.+12     	; 0x101fe <FMenuLocalAccount+0x1ee>
				    stLocalAccount=laDispValid; 
   101f2:	87 e0       	ldi	r24, 0x07	; 7
   101f4:	80 93 5b 01 	sts	0x015B, r24
					lcd_clear();
   101f8:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
   101fc:	0c c0       	rjmp	.+24     	; 0x10216 <FMenuLocalAccount+0x206>
					}
				else
                if (LocAccStatus==LA_LIMITED){
   101fe:	83 30       	cpi	r24, 0x03	; 3
   10200:	51 f4       	brne	.+20     	; 0x10216 <FMenuLocalAccount+0x206>
					lcd_printf(3,1,PSTR("Kartu Terbatas      "));    
   10202:	61 e0       	ldi	r22, 0x01	; 1
   10204:	40 e5       	ldi	r20, 0x50	; 80
   10206:	52 e2       	ldi	r21, 0x22	; 34
   10208:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
					TimLocAcc=0;
   1020c:	10 92 ba 01 	sts	0x01BA, r1
				    stLocalAccount=laDelayExit;
   10210:	8e e1       	ldi	r24, 0x1E	; 30
   10212:	80 93 5b 01 	sts	0x015B, r24
				}
                if (TimLocAcc>5)stLocalAccount=laExitLocAcc;
   10216:	80 91 ba 01 	lds	r24, 0x01BA
   1021a:	86 30       	cpi	r24, 0x06	; 6
   1021c:	08 f4       	brcc	.+2      	; 0x10220 <FMenuLocalAccount+0x210>
   1021e:	88 c7       	rjmp	.+3856   	; 0x11130 <FMenuLocalAccount+0x1120>
   10220:	75 c7       	rjmp	.+3818   	; 0x1110c <FMenuLocalAccount+0x10fc>
		        break;
           case laDispValid://Display VALID ID
		        lcd_clear();
   10222:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
				sprintf_P(strBalanceValue,PSTR("%s"),strBalance);
   10226:	00 d0       	rcall	.+0      	; 0x10228 <FMenuLocalAccount+0x218>
   10228:	00 d0       	rcall	.+0      	; 0x1022a <FMenuLocalAccount+0x21a>
   1022a:	00 d0       	rcall	.+0      	; 0x1022c <FMenuLocalAccount+0x21c>
   1022c:	ed b7       	in	r30, 0x3d	; 61
   1022e:	fe b7       	in	r31, 0x3e	; 62
   10230:	31 96       	adiw	r30, 0x01	; 1
   10232:	8f e1       	ldi	r24, 0x1F	; 31
   10234:	9c e0       	ldi	r25, 0x0C	; 12
   10236:	ad b7       	in	r26, 0x3d	; 61
   10238:	be b7       	in	r27, 0x3e	; 62
   1023a:	12 96       	adiw	r26, 0x02	; 2
   1023c:	9c 93       	st	X, r25
   1023e:	8e 93       	st	-X, r24
   10240:	11 97       	sbiw	r26, 0x01	; 1
   10242:	8d e4       	ldi	r24, 0x4D	; 77
   10244:	92 e2       	ldi	r25, 0x22	; 34
   10246:	93 83       	std	Z+3, r25	; 0x03
   10248:	82 83       	std	Z+2, r24	; 0x02
   1024a:	08 ef       	ldi	r16, 0xF8	; 248
   1024c:	1b e0       	ldi	r17, 0x0B	; 11
   1024e:	15 83       	std	Z+5, r17	; 0x05
   10250:	04 83       	std	Z+4, r16	; 0x04
   10252:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
				FormatCurrency(strBalance);
   10256:	ed b7       	in	r30, 0x3d	; 61
   10258:	fe b7       	in	r31, 0x3e	; 62
   1025a:	36 96       	adiw	r30, 0x06	; 6
   1025c:	0f b6       	in	r0, 0x3f	; 63
   1025e:	f8 94       	cli
   10260:	fe bf       	out	0x3e, r31	; 62
   10262:	0f be       	out	0x3f, r0	; 63
   10264:	ed bf       	out	0x3d, r30	; 61
   10266:	c8 01       	movw	r24, r16
   10268:	0e 94 1f 33 	call	0x663e	; 0x663e <FormatCurrency>
   1026c:	20 e0       	ldi	r18, 0x00	; 0
   1026e:	30 e0       	ldi	r19, 0x00	; 0


void StringCopy(char *Source,char *Dest,char Length){
     char i;
	 for (i=0;i<Length;i++){
	     Dest[i]=Source[i];
   10270:	80 e2       	ldi	r24, 0x20	; 32
   10272:	e8 2e       	mov	r14, r24
   10274:	f1 2c       	mov	r15, r1
   10276:	ec 0e       	add	r14, r28
   10278:	fd 1e       	adc	r15, r29
   1027a:	f7 01       	movw	r30, r14
   1027c:	e2 0f       	add	r30, r18
   1027e:	f3 1f       	adc	r31, r19
   10280:	d9 01       	movw	r26, r18
   10282:	ac 5d       	subi	r26, 0xDC	; 220
   10284:	bc 4f       	sbci	r27, 0xFC	; 252
   10286:	8c 91       	ld	r24, X
   10288:	80 83       	st	Z, r24
   1028a:	2f 5f       	subi	r18, 0xFF	; 255
   1028c:	3f 4f       	sbci	r19, 0xFF	; 255
//Message 56


void StringCopy(char *Source,char *Dest,char Length){
     char i;
	 for (i=0;i<Length;i++){
   1028e:	24 31       	cpi	r18, 0x14	; 20
   10290:	31 05       	cpc	r19, r1
   10292:	99 f7       	brne	.-26     	; 0x1027a <FMenuLocalAccount+0x26a>
	     Dest[i]=Source[i];
	 }Dest[Length]=0;
   10294:	1c aa       	std	Y+52, r1	; 0x34
		        lcd_clear();
				sprintf_P(strBalanceValue,PSTR("%s"),strBalance);
				FormatCurrency(strBalance);

		        StringCopy(strCardHolder,strName,20);  				                                                        
		        sprintf_P(lcdteks,PSTR("%s"),strCompName);               lcd_print(1,1,lcdteks);   //[CompName]
   10296:	00 d0       	rcall	.+0      	; 0x10298 <FMenuLocalAccount+0x288>
   10298:	00 d0       	rcall	.+0      	; 0x1029a <FMenuLocalAccount+0x28a>
   1029a:	00 d0       	rcall	.+0      	; 0x1029c <FMenuLocalAccount+0x28c>
   1029c:	ed b7       	in	r30, 0x3d	; 61
   1029e:	fe b7       	in	r31, 0x3e	; 62
   102a0:	31 96       	adiw	r30, 0x01	; 1
   102a2:	8e 01       	movw	r16, r28
   102a4:	04 5f       	subi	r16, 0xF4	; 244
   102a6:	1f 4f       	sbci	r17, 0xFF	; 255
   102a8:	ad b7       	in	r26, 0x3d	; 61
   102aa:	be b7       	in	r27, 0x3e	; 62
   102ac:	12 96       	adiw	r26, 0x02	; 2
   102ae:	1c 93       	st	X, r17
   102b0:	0e 93       	st	-X, r16
   102b2:	11 97       	sbiw	r26, 0x01	; 1
   102b4:	8a e4       	ldi	r24, 0x4A	; 74
   102b6:	92 e2       	ldi	r25, 0x22	; 34
   102b8:	93 83       	std	Z+3, r25	; 0x03
   102ba:	82 83       	std	Z+2, r24	; 0x02
   102bc:	89 e7       	ldi	r24, 0x79	; 121
   102be:	97 e0       	ldi	r25, 0x07	; 7
   102c0:	95 83       	std	Z+5, r25	; 0x05
   102c2:	84 83       	std	Z+4, r24	; 0x04
   102c4:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
   102c8:	ed b7       	in	r30, 0x3d	; 61
   102ca:	fe b7       	in	r31, 0x3e	; 62
   102cc:	36 96       	adiw	r30, 0x06	; 6
   102ce:	0f b6       	in	r0, 0x3f	; 63
   102d0:	f8 94       	cli
   102d2:	fe bf       	out	0x3e, r31	; 62
   102d4:	0f be       	out	0x3f, r0	; 63
   102d6:	ed bf       	out	0x3d, r30	; 61
   102d8:	81 e0       	ldi	r24, 0x01	; 1
   102da:	61 e0       	ldi	r22, 0x01	; 1
   102dc:	a8 01       	movw	r20, r16
   102de:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
                //sprintf(lcdteks,"%s %s",strCardID,strName);    lcd_print(2,1,lcdteks);   //[Card ID][Card Holder]
				sprintf_P(lcdteks,PSTR("%s"),strName);                   lcd_print(2,1,lcdteks);   //[Card ID][Card Holder]
   102e2:	00 d0       	rcall	.+0      	; 0x102e4 <FMenuLocalAccount+0x2d4>
   102e4:	00 d0       	rcall	.+0      	; 0x102e6 <FMenuLocalAccount+0x2d6>
   102e6:	00 d0       	rcall	.+0      	; 0x102e8 <FMenuLocalAccount+0x2d8>
   102e8:	ed b7       	in	r30, 0x3d	; 61
   102ea:	fe b7       	in	r31, 0x3e	; 62
   102ec:	31 96       	adiw	r30, 0x01	; 1
   102ee:	ad b7       	in	r26, 0x3d	; 61
   102f0:	be b7       	in	r27, 0x3e	; 62
   102f2:	12 96       	adiw	r26, 0x02	; 2
   102f4:	1c 93       	st	X, r17
   102f6:	0e 93       	st	-X, r16
   102f8:	11 97       	sbiw	r26, 0x01	; 1
   102fa:	87 e4       	ldi	r24, 0x47	; 71
   102fc:	92 e2       	ldi	r25, 0x22	; 34
   102fe:	93 83       	std	Z+3, r25	; 0x03
   10300:	82 83       	std	Z+2, r24	; 0x02
   10302:	f5 82       	std	Z+5, r15	; 0x05
   10304:	e4 82       	std	Z+4, r14	; 0x04
   10306:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
   1030a:	ed b7       	in	r30, 0x3d	; 61
   1030c:	fe b7       	in	r31, 0x3e	; 62
   1030e:	36 96       	adiw	r30, 0x06	; 6
   10310:	0f b6       	in	r0, 0x3f	; 63
   10312:	f8 94       	cli
   10314:	fe bf       	out	0x3e, r31	; 62
   10316:	0f be       	out	0x3f, r0	; 63
   10318:	ed bf       	out	0x3d, r30	; 61
   1031a:	82 e0       	ldi	r24, 0x02	; 2
   1031c:	61 e0       	ldi	r22, 0x01	; 1
   1031e:	a8 01       	movw	r20, r16
   10320:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
				sprintf_P(lcdteks,PSTR("%s %s"),strLicPlate,strBalance); lcd_print(3,1,lcdteks);   //[LicPlate][Balance] 
   10324:	2d b7       	in	r18, 0x3d	; 61
   10326:	3e b7       	in	r19, 0x3e	; 62
   10328:	28 50       	subi	r18, 0x08	; 8
   1032a:	30 40       	sbci	r19, 0x00	; 0
   1032c:	0f b6       	in	r0, 0x3f	; 63
   1032e:	f8 94       	cli
   10330:	3e bf       	out	0x3e, r19	; 62
   10332:	0f be       	out	0x3f, r0	; 63
   10334:	2d bf       	out	0x3d, r18	; 61
   10336:	ed b7       	in	r30, 0x3d	; 61
   10338:	fe b7       	in	r31, 0x3e	; 62
   1033a:	31 96       	adiw	r30, 0x01	; 1
   1033c:	ad b7       	in	r26, 0x3d	; 61
   1033e:	be b7       	in	r27, 0x3e	; 62
   10340:	12 96       	adiw	r26, 0x02	; 2
   10342:	1c 93       	st	X, r17
   10344:	0e 93       	st	-X, r16
   10346:	11 97       	sbiw	r26, 0x01	; 1
   10348:	81 e4       	ldi	r24, 0x41	; 65
   1034a:	92 e2       	ldi	r25, 0x22	; 34
   1034c:	93 83       	std	Z+3, r25	; 0x03
   1034e:	82 83       	std	Z+2, r24	; 0x02
   10350:	8a ef       	ldi	r24, 0xFA	; 250
   10352:	98 e0       	ldi	r25, 0x08	; 8
   10354:	95 83       	std	Z+5, r25	; 0x05
   10356:	84 83       	std	Z+4, r24	; 0x04
   10358:	88 ef       	ldi	r24, 0xF8	; 248
   1035a:	9b e0       	ldi	r25, 0x0B	; 11
   1035c:	97 83       	std	Z+7, r25	; 0x07
   1035e:	86 83       	std	Z+6, r24	; 0x06
   10360:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
   10364:	ed b7       	in	r30, 0x3d	; 61
   10366:	fe b7       	in	r31, 0x3e	; 62
   10368:	38 96       	adiw	r30, 0x08	; 8
   1036a:	0f b6       	in	r0, 0x3f	; 63
   1036c:	f8 94       	cli
   1036e:	fe bf       	out	0x3e, r31	; 62
   10370:	0f be       	out	0x3f, r0	; 63
   10372:	ed bf       	out	0x3d, r30	; 61
   10374:	83 e0       	ldi	r24, 0x03	; 3
   10376:	61 e0       	ldi	r22, 0x01	; 1
   10378:	a8 01       	movw	r20, r16
   1037a:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
	            lcd_printf(4,1,PSTR("[*]Batal       [#]OK"));   //[*]Batal       [#]OK
   1037e:	84 e0       	ldi	r24, 0x04	; 4
   10380:	61 e0       	ldi	r22, 0x01	; 1
   10382:	4c e2       	ldi	r20, 0x2C	; 44
   10384:	52 e2       	ldi	r21, 0x22	; 34
   10386:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
				stLocalAccount=laDispValidInput;
   1038a:	88 e0       	ldi	r24, 0x08	; 8
   1038c:	ba ce       	rjmp	.-652    	; 0x10102 <FMenuLocalAccount+0xf2>
		        break;
           case laDispValidInput:
                KeyPressed=_key_scan(1);
   1038e:	81 e0       	ldi	r24, 0x01	; 1
   10390:	0e 94 6d a6 	call	0x14cda	; 0x14cda <_key_scan>
				if (KeyPressed==_KEY_ENTER) stLocalAccount=laSelectFIP;
   10394:	87 3b       	cpi	r24, 0xB7	; 183
   10396:	09 f4       	brne	.+2      	; 0x1039a <FMenuLocalAccount+0x38a>
   10398:	b3 c1       	rjmp	.+870    	; 0x10700 <FMenuLocalAccount+0x6f0>
				else
				if (KeyPressed==_KEY_CANCEL)stLocalAccount=laExitLocAcc;
   1039a:	87 3e       	cpi	r24, 0xE7	; 231
   1039c:	09 f0       	breq	.+2      	; 0x103a0 <FMenuLocalAccount+0x390>
   1039e:	c8 c6       	rjmp	.+3472   	; 0x11130 <FMenuLocalAccount+0x1120>
   103a0:	b5 c6       	rjmp	.+3434   	; 0x1110c <FMenuLocalAccount+0x10fc>
		        break;
           case laSelectFIP:      
			    FIPResult=menu_FIP(&FIP_Used,strFIP);
   103a2:	01 e9       	ldi	r16, 0x91	; 145
   103a4:	12 e0       	ldi	r17, 0x02	; 2
   103a6:	88 e8       	ldi	r24, 0x88	; 136
   103a8:	92 e0       	ldi	r25, 0x02	; 2
   103aa:	b8 01       	movw	r22, r16
   103ac:	0e 94 5b 55 	call	0xaab6	; 0xaab6 <menu_FIP>

			    if ((FIPResult==FIP_DONE)&&(FIP_Used>0)){
   103b0:	88 23       	and	r24, r24
   103b2:	09 f0       	breq	.+2      	; 0x103b6 <FMenuLocalAccount+0x3a6>
   103b4:	4e c0       	rjmp	.+156    	; 0x10452 <FMenuLocalAccount+0x442>
   103b6:	20 91 88 02 	lds	r18, 0x0288
   103ba:	22 23       	and	r18, r18
   103bc:	09 f4       	brne	.+2      	; 0x103c0 <FMenuLocalAccount+0x3b0>
   103be:	b8 c6       	rjmp	.+3440   	; 0x11130 <FMenuLocalAccount+0x1120>
                    sprintf_P(strFIP,PSTR("%.2d"),FIP_Used);
   103c0:	00 d0       	rcall	.+0      	; 0x103c2 <FMenuLocalAccount+0x3b2>
   103c2:	00 d0       	rcall	.+0      	; 0x103c4 <FMenuLocalAccount+0x3b4>
   103c4:	00 d0       	rcall	.+0      	; 0x103c6 <FMenuLocalAccount+0x3b6>
   103c6:	ed b7       	in	r30, 0x3d	; 61
   103c8:	fe b7       	in	r31, 0x3e	; 62
   103ca:	31 96       	adiw	r30, 0x01	; 1
   103cc:	ad b7       	in	r26, 0x3d	; 61
   103ce:	be b7       	in	r27, 0x3e	; 62
   103d0:	12 96       	adiw	r26, 0x02	; 2
   103d2:	1c 93       	st	X, r17
   103d4:	0e 93       	st	-X, r16
   103d6:	11 97       	sbiw	r26, 0x01	; 1
   103d8:	87 e2       	ldi	r24, 0x27	; 39
   103da:	92 e2       	ldi	r25, 0x22	; 34
   103dc:	93 83       	std	Z+3, r25	; 0x03
   103de:	82 83       	std	Z+2, r24	; 0x02
   103e0:	24 83       	std	Z+4, r18	; 0x04
   103e2:	15 82       	std	Z+5, r1	; 0x05
   103e4:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
					sprintf_P(strFIP_ID,PSTR("%.2d"),FIP_Used);
   103e8:	ed b7       	in	r30, 0x3d	; 61
   103ea:	fe b7       	in	r31, 0x3e	; 62
   103ec:	31 96       	adiw	r30, 0x01	; 1
   103ee:	89 eb       	ldi	r24, 0xB9	; 185
   103f0:	97 e0       	ldi	r25, 0x07	; 7
   103f2:	ad b7       	in	r26, 0x3d	; 61
   103f4:	be b7       	in	r27, 0x3e	; 62
   103f6:	12 96       	adiw	r26, 0x02	; 2
   103f8:	9c 93       	st	X, r25
   103fa:	8e 93       	st	-X, r24
   103fc:	11 97       	sbiw	r26, 0x01	; 1
   103fe:	82 e2       	ldi	r24, 0x22	; 34
   10400:	92 e2       	ldi	r25, 0x22	; 34
   10402:	93 83       	std	Z+3, r25	; 0x03
   10404:	82 83       	std	Z+2, r24	; 0x02
   10406:	80 91 88 02 	lds	r24, 0x0288
   1040a:	84 83       	std	Z+4, r24	; 0x04
   1040c:	15 82       	std	Z+5, r1	; 0x05
   1040e:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
                    //Load Product Info
					if (GetFIPAddr(FIP_Used)>0) 
   10412:	ed b7       	in	r30, 0x3d	; 61
   10414:	fe b7       	in	r31, 0x3e	; 62
   10416:	36 96       	adiw	r30, 0x06	; 6
   10418:	0f b6       	in	r0, 0x3f	; 63
   1041a:	f8 94       	cli
   1041c:	fe bf       	out	0x3e, r31	; 62
   1041e:	0f be       	out	0x3f, r0	; 63
   10420:	ed bf       	out	0x3d, r30	; 61
   10422:	80 91 88 02 	lds	r24, 0x0288
   10426:	0e 94 0a 20 	call	0x4014	; 0x4014 <GetFIPAddr>
   1042a:	88 23       	and	r24, r24
   1042c:	81 f0       	breq	.+32     	; 0x1044e <FMenuLocalAccount+0x43e>
					    eeprom_read_block((void*) &ProductID, (const void*) &DefNozzleMap[GetFIPAddr(FIP_Used)-1], 6);
   1042e:	80 91 88 02 	lds	r24, 0x0288
   10432:	0e 94 0a 20 	call	0x4014	; 0x4014 <GetFIPAddr>
   10436:	96 e0       	ldi	r25, 0x06	; 6
   10438:	89 9f       	mul	r24, r25
   1043a:	b0 01       	movw	r22, r0
   1043c:	11 24       	eor	r1, r1
   1043e:	60 5b       	subi	r22, 0xB0	; 176
   10440:	7f 4f       	sbci	r23, 0xFF	; 255
   10442:	89 e8       	ldi	r24, 0x89	; 137
   10444:	92 e0       	ldi	r25, 0x02	; 2
   10446:	46 e0       	ldi	r20, 0x06	; 6
   10448:	50 e0       	ldi	r21, 0x00	; 0
   1044a:	0e 94 30 ad 	call	0x15a60	; 0x15a60 <__eerd_block_m128>
				    stLocalAccount=laSelectProduct;
   1044e:	8b e0       	ldi	r24, 0x0B	; 11
   10450:	58 ce       	rjmp	.-848    	; 0x10102 <FMenuLocalAccount+0xf2>
				}
			    else if (FIPResult==FIP_CANCEL){
   10452:	82 30       	cpi	r24, 0x02	; 2
   10454:	09 f0       	breq	.+2      	; 0x10458 <FMenuLocalAccount+0x448>
   10456:	6c c6       	rjmp	.+3288   	; 0x11130 <FMenuLocalAccount+0x1120>
				    stLocalAccount=laDispValid;
   10458:	87 e0       	ldi	r24, 0x07	; 7
   1045a:	53 ce       	rjmp	.-858    	; 0x10102 <FMenuLocalAccount+0xf2>
		        break; 
           case laSelectFIPInput:

		        break;
           case laSelectProduct://NozzleID
				lcd_clear();
   1045c:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
		        sprintf_P(lcdteks,PSTR("Pompa-%s"),strFIP);lcd_print(1,1,lcdteks);
   10460:	00 d0       	rcall	.+0      	; 0x10462 <FMenuLocalAccount+0x452>
   10462:	00 d0       	rcall	.+0      	; 0x10464 <FMenuLocalAccount+0x454>
   10464:	00 d0       	rcall	.+0      	; 0x10466 <FMenuLocalAccount+0x456>
   10466:	ed b7       	in	r30, 0x3d	; 61
   10468:	fe b7       	in	r31, 0x3e	; 62
   1046a:	31 96       	adiw	r30, 0x01	; 1
   1046c:	8e 01       	movw	r16, r28
   1046e:	04 5f       	subi	r16, 0xF4	; 244
   10470:	1f 4f       	sbci	r17, 0xFF	; 255
   10472:	ad b7       	in	r26, 0x3d	; 61
   10474:	be b7       	in	r27, 0x3e	; 62
   10476:	12 96       	adiw	r26, 0x02	; 2
   10478:	1c 93       	st	X, r17
   1047a:	0e 93       	st	-X, r16
   1047c:	11 97       	sbiw	r26, 0x01	; 1
   1047e:	89 e1       	ldi	r24, 0x19	; 25
   10480:	92 e2       	ldi	r25, 0x22	; 34
   10482:	93 83       	std	Z+3, r25	; 0x03
   10484:	82 83       	std	Z+2, r24	; 0x02
   10486:	81 e9       	ldi	r24, 0x91	; 145
   10488:	92 e0       	ldi	r25, 0x02	; 2
   1048a:	95 83       	std	Z+5, r25	; 0x05
   1048c:	84 83       	std	Z+4, r24	; 0x04
   1048e:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
   10492:	ed b7       	in	r30, 0x3d	; 61
   10494:	fe b7       	in	r31, 0x3e	; 62
   10496:	36 96       	adiw	r30, 0x06	; 6
   10498:	0f b6       	in	r0, 0x3f	; 63
   1049a:	f8 94       	cli
   1049c:	fe bf       	out	0x3e, r31	; 62
   1049e:	0f be       	out	0x3f, r0	; 63
   104a0:	ed bf       	out	0x3d, r30	; 61
   104a2:	81 e0       	ldi	r24, 0x01	; 1
   104a4:	61 e0       	ldi	r22, 0x01	; 1
   104a6:	a8 01       	movw	r20, r16
   104a8:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
				//Not MPD->Single Product
				if ((ProductID[0]>=1)&&(ProductID[0]<=6)&&
   104ac:	90 91 89 02 	lds	r25, 0x0289
   104b0:	89 2f       	mov	r24, r25
   104b2:	81 50       	subi	r24, 0x01	; 1
   104b4:	86 30       	cpi	r24, 0x06	; 6
   104b6:	08 f0       	brcs	.+2      	; 0x104ba <FMenuLocalAccount+0x4aa>
   104b8:	4b c0       	rjmp	.+150    	; 0x10550 <FMenuLocalAccount+0x540>
   104ba:	80 91 8a 02 	lds	r24, 0x028A
   104be:	88 23       	and	r24, r24
   104c0:	09 f0       	breq	.+2      	; 0x104c4 <FMenuLocalAccount+0x4b4>
   104c2:	46 c0       	rjmp	.+140    	; 0x10550 <FMenuLocalAccount+0x540>
   104c4:	80 91 8b 02 	lds	r24, 0x028B
   104c8:	88 23       	and	r24, r24
   104ca:	09 f0       	breq	.+2      	; 0x104ce <FMenuLocalAccount+0x4be>
   104cc:	41 c0       	rjmp	.+130    	; 0x10550 <FMenuLocalAccount+0x540>
   104ce:	80 91 8c 02 	lds	r24, 0x028C
   104d2:	88 23       	and	r24, r24
   104d4:	e9 f5       	brne	.+122    	; 0x10550 <FMenuLocalAccount+0x540>
				    (ProductID[1]==0)&&(ProductID[2]==0)&&(ProductID[3]==0)){
                     //Load 1st Product      					 
					 ProdId=ProductID[0];
   104d6:	90 93 87 02 	sts	0x0287, r25
					 eeprom_read_block((void*) &ProductName, (const void*) &DefProductName[ProdId-1],10);
   104da:	6d e0       	ldi	r22, 0x0D	; 13
   104dc:	96 9f       	mul	r25, r22
   104de:	b0 01       	movw	r22, r0
   104e0:	11 24       	eor	r1, r1
   104e2:	61 55       	subi	r22, 0x51	; 81
   104e4:	7f 4f       	sbci	r23, 0xFF	; 255
   104e6:	8e 01       	movw	r16, r28
   104e8:	0f 5f       	subi	r16, 0xFF	; 255
   104ea:	1f 4f       	sbci	r17, 0xFF	; 255
   104ec:	c8 01       	movw	r24, r16
   104ee:	4a e0       	ldi	r20, 0x0A	; 10
   104f0:	50 e0       	ldi	r21, 0x00	; 0
   104f2:	0e 94 30 ad 	call	0x15a60	; 0x15a60 <__eerd_block_m128>
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   104f6:	ce 01       	movw	r24, r28
   104f8:	09 96       	adiw	r24, 0x09	; 9
	    Dest[i]=Source[IdxSource+i];
   104fa:	0f 5f       	subi	r16, 0xFF	; 255
   104fc:	1f 4f       	sbci	r17, 0xFF	; 255
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   104fe:	08 17       	cp	r16, r24
   10500:	19 07       	cpc	r17, r25
   10502:	d9 f7       	brne	.-10     	; 0x104fa <FMenuLocalAccount+0x4ea>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
   10504:	19 86       	std	Y+9, r1	; 0x09
				    (ProductID[1]==0)&&(ProductID[2]==0)&&(ProductID[3]==0)){
                     //Load 1st Product      					 
					 ProdId=ProductID[0];
					 eeprom_read_block((void*) &ProductName, (const void*) &DefProductName[ProdId-1],10);
					 StrPosCopy(ProductName,ProductName,0,8);
					 sprintf_P(strProduct,PSTR("%s"),ProductName);
   10506:	00 d0       	rcall	.+0      	; 0x10508 <FMenuLocalAccount+0x4f8>
   10508:	00 d0       	rcall	.+0      	; 0x1050a <FMenuLocalAccount+0x4fa>
   1050a:	00 d0       	rcall	.+0      	; 0x1050c <FMenuLocalAccount+0x4fc>
   1050c:	ed b7       	in	r30, 0x3d	; 61
   1050e:	fe b7       	in	r31, 0x3e	; 62
   10510:	31 96       	adiw	r30, 0x01	; 1
   10512:	8e e5       	ldi	r24, 0x5E	; 94
   10514:	97 e0       	ldi	r25, 0x07	; 7
   10516:	ad b7       	in	r26, 0x3d	; 61
   10518:	be b7       	in	r27, 0x3e	; 62
   1051a:	12 96       	adiw	r26, 0x02	; 2
   1051c:	9c 93       	st	X, r25
   1051e:	8e 93       	st	-X, r24
   10520:	11 97       	sbiw	r26, 0x01	; 1
   10522:	86 e1       	ldi	r24, 0x16	; 22
   10524:	92 e2       	ldi	r25, 0x22	; 34
   10526:	93 83       	std	Z+3, r25	; 0x03
   10528:	82 83       	std	Z+2, r24	; 0x02
   1052a:	ce 01       	movw	r24, r28
   1052c:	01 96       	adiw	r24, 0x01	; 1
   1052e:	95 83       	std	Z+5, r25	; 0x05
   10530:	84 83       	std	Z+4, r24	; 0x04
   10532:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
                     stLocalAccount=laSelectBalanceType;
   10536:	8d e0       	ldi	r24, 0x0D	; 13
   10538:	80 93 5b 01 	sts	0x015B, r24
   1053c:	80 e0       	ldi	r24, 0x00	; 0
   1053e:	ed b7       	in	r30, 0x3d	; 61
   10540:	fe b7       	in	r31, 0x3e	; 62
   10542:	36 96       	adiw	r30, 0x06	; 6
   10544:	0f b6       	in	r0, 0x3f	; 63
   10546:	f8 94       	cli
   10548:	fe bf       	out	0x3e, r31	; 62
   1054a:	0f be       	out	0x3f, r0	; 63
   1054c:	ed bf       	out	0x3d, r30	; 61
   1054e:	f1 c5       	rjmp	.+3042   	; 0x11132 <FMenuLocalAccount+0x1122>
					}else
                {
				//MultiProductDisplay Select:
				//Load Nozzle Configuration
				for(iNozzle=0;iNozzle<4;iNozzle++){
   10550:	10 92 8f 02 	sts	0x028F, r1
				        eeprom_read_block((void*) &ProductName, (const void*) &DefProductName[ProdId-1],10);
						StrPosCopy(ProductName,ProductName,0,8);
					    sprintf_P(lcdteks,PSTR("%d.%s"),(iNozzle+1),ProductName);
                    }
					else{
					       sprintf_P(lcdteks,PSTR("     "));					
   10554:	0c e0       	ldi	r16, 0x0C	; 12
   10556:	e0 2e       	mov	r14, r16
   10558:	f1 2c       	mov	r15, r1
   1055a:	ec 0e       	add	r14, r28
   1055c:	fd 1e       	adc	r15, r29
   1055e:	1a e0       	ldi	r17, 0x0A	; 10
   10560:	81 2e       	mov	r8, r17
   10562:	12 e2       	ldi	r17, 0x22	; 34
   10564:	91 2e       	mov	r9, r17
				//Load Nozzle Configuration
				for(iNozzle=0;iNozzle<4;iNozzle++){
                    //Masalah 0-->void
				    ProdId=ProductID[iNozzle];
					if ((ProdId>=1)&&(ProdId<=6)){
				        eeprom_read_block((void*) &ProductName, (const void*) &DefProductName[ProdId-1],10);
   10566:	bd e0       	ldi	r27, 0x0D	; 13
   10568:	6b 2e       	mov	r6, r27
   1056a:	8e 01       	movw	r16, r28
   1056c:	0f 5f       	subi	r16, 0xFF	; 255
   1056e:	1f 4f       	sbci	r17, 0xFF	; 255
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   10570:	a9 e0       	ldi	r26, 0x09	; 9
   10572:	aa 2e       	mov	r10, r26
   10574:	b1 2c       	mov	r11, r1
   10576:	ac 0e       	add	r10, r28
   10578:	bd 1e       	adc	r11, r29
                    //Masalah 0-->void
				    ProdId=ProductID[iNozzle];
					if ((ProdId>=1)&&(ProdId<=6)){
				        eeprom_read_block((void*) &ProductName, (const void*) &DefProductName[ProdId-1],10);
						StrPosCopy(ProductName,ProductName,0,8);
					    sprintf_P(lcdteks,PSTR("%d.%s"),(iNozzle+1),ProductName);
   1057a:	f0 e1       	ldi	r31, 0x10	; 16
   1057c:	cf 2e       	mov	r12, r31
   1057e:	f2 e2       	ldi	r31, 0x22	; 34
   10580:	df 2e       	mov	r13, r31
                    }
					else{
					       sprintf_P(lcdteks,PSTR("     "));					
					}
				    lcd_print(2+(iNozzle%2),1+(iNozzle/2)*11,lcdteks);
   10582:	eb e0       	ldi	r30, 0x0B	; 11
   10584:	7e 2e       	mov	r7, r30
   10586:	65 c0       	rjmp	.+202    	; 0x10652 <FMenuLocalAccount+0x642>
                {
				//MultiProductDisplay Select:
				//Load Nozzle Configuration
				for(iNozzle=0;iNozzle<4;iNozzle++){
                    //Masalah 0-->void
				    ProdId=ProductID[iNozzle];
   10588:	f0 e0       	ldi	r31, 0x00	; 0
   1058a:	e7 57       	subi	r30, 0x77	; 119
   1058c:	fd 4f       	sbci	r31, 0xFD	; 253
   1058e:	e0 81       	ld	r30, Z
   10590:	e0 93 87 02 	sts	0x0287, r30
					if ((ProdId>=1)&&(ProdId<=6)){
   10594:	8e 2f       	mov	r24, r30
   10596:	81 50       	subi	r24, 0x01	; 1
   10598:	86 30       	cpi	r24, 0x06	; 6
   1059a:	b8 f5       	brcc	.+110    	; 0x1060a <FMenuLocalAccount+0x5fa>
				        eeprom_read_block((void*) &ProductName, (const void*) &DefProductName[ProdId-1],10);
   1059c:	e6 9d       	mul	r30, r6
   1059e:	b0 01       	movw	r22, r0
   105a0:	11 24       	eor	r1, r1
   105a2:	61 55       	subi	r22, 0x51	; 81
   105a4:	7f 4f       	sbci	r23, 0xFF	; 255
   105a6:	c8 01       	movw	r24, r16
   105a8:	4a e0       	ldi	r20, 0x0A	; 10
   105aa:	50 e0       	ldi	r21, 0x00	; 0
   105ac:	0e 94 30 ad 	call	0x15a60	; 0x15a60 <__eerd_block_m128>
   105b0:	c8 01       	movw	r24, r16
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
   105b2:	01 96       	adiw	r24, 0x01	; 1
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   105b4:	8a 15       	cp	r24, r10
   105b6:	9b 05       	cpc	r25, r11
   105b8:	e1 f7       	brne	.-8      	; 0x105b2 <FMenuLocalAccount+0x5a2>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
   105ba:	19 86       	std	Y+9, r1	; 0x09
                    //Masalah 0-->void
				    ProdId=ProductID[iNozzle];
					if ((ProdId>=1)&&(ProdId<=6)){
				        eeprom_read_block((void*) &ProductName, (const void*) &DefProductName[ProdId-1],10);
						StrPosCopy(ProductName,ProductName,0,8);
					    sprintf_P(lcdteks,PSTR("%d.%s"),(iNozzle+1),ProductName);
   105bc:	2d b7       	in	r18, 0x3d	; 61
   105be:	3e b7       	in	r19, 0x3e	; 62
   105c0:	28 50       	subi	r18, 0x08	; 8
   105c2:	30 40       	sbci	r19, 0x00	; 0
   105c4:	0f b6       	in	r0, 0x3f	; 63
   105c6:	f8 94       	cli
   105c8:	3e bf       	out	0x3e, r19	; 62
   105ca:	0f be       	out	0x3f, r0	; 63
   105cc:	2d bf       	out	0x3d, r18	; 61
   105ce:	ed b7       	in	r30, 0x3d	; 61
   105d0:	fe b7       	in	r31, 0x3e	; 62
   105d2:	31 96       	adiw	r30, 0x01	; 1
   105d4:	ad b7       	in	r26, 0x3d	; 61
   105d6:	be b7       	in	r27, 0x3e	; 62
   105d8:	12 96       	adiw	r26, 0x02	; 2
   105da:	fc 92       	st	X, r15
   105dc:	ee 92       	st	-X, r14
   105de:	11 97       	sbiw	r26, 0x01	; 1
   105e0:	d3 82       	std	Z+3, r13	; 0x03
   105e2:	c2 82       	std	Z+2, r12	; 0x02
   105e4:	80 91 8f 02 	lds	r24, 0x028F
   105e8:	90 e0       	ldi	r25, 0x00	; 0
   105ea:	01 96       	adiw	r24, 0x01	; 1
   105ec:	95 83       	std	Z+5, r25	; 0x05
   105ee:	84 83       	std	Z+4, r24	; 0x04
   105f0:	17 83       	std	Z+7, r17	; 0x07
   105f2:	06 83       	std	Z+6, r16	; 0x06
   105f4:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
   105f8:	ed b7       	in	r30, 0x3d	; 61
   105fa:	fe b7       	in	r31, 0x3e	; 62
   105fc:	38 96       	adiw	r30, 0x08	; 8
   105fe:	0f b6       	in	r0, 0x3f	; 63
   10600:	f8 94       	cli
   10602:	fe bf       	out	0x3e, r31	; 62
   10604:	0f be       	out	0x3f, r0	; 63
   10606:	ed bf       	out	0x3d, r30	; 61
   10608:	12 c0       	rjmp	.+36     	; 0x1062e <FMenuLocalAccount+0x61e>
                    }
					else{
					       sprintf_P(lcdteks,PSTR("     "));					
   1060a:	00 d0       	rcall	.+0      	; 0x1060c <FMenuLocalAccount+0x5fc>
   1060c:	00 d0       	rcall	.+0      	; 0x1060e <FMenuLocalAccount+0x5fe>
   1060e:	ad b7       	in	r26, 0x3d	; 61
   10610:	be b7       	in	r27, 0x3e	; 62
   10612:	12 96       	adiw	r26, 0x02	; 2
   10614:	fc 92       	st	X, r15
   10616:	ee 92       	st	-X, r14
   10618:	11 97       	sbiw	r26, 0x01	; 1
   1061a:	14 96       	adiw	r26, 0x04	; 4
   1061c:	9c 92       	st	X, r9
   1061e:	8e 92       	st	-X, r8
   10620:	13 97       	sbiw	r26, 0x03	; 3
   10622:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
   10626:	0f 90       	pop	r0
   10628:	0f 90       	pop	r0
   1062a:	0f 90       	pop	r0
   1062c:	0f 90       	pop	r0
					}
				    lcd_print(2+(iNozzle%2),1+(iNozzle/2)*11,lcdteks);
   1062e:	80 91 8f 02 	lds	r24, 0x028F
   10632:	68 2f       	mov	r22, r24
   10634:	66 95       	lsr	r22
   10636:	67 9d       	mul	r22, r7
   10638:	b0 01       	movw	r22, r0
   1063a:	11 24       	eor	r1, r1
   1063c:	6f 5f       	subi	r22, 0xFF	; 255
   1063e:	81 70       	andi	r24, 0x01	; 1
   10640:	8e 5f       	subi	r24, 0xFE	; 254
   10642:	a7 01       	movw	r20, r14
   10644:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
                     stLocalAccount=laSelectBalanceType;
					}else
                {
				//MultiProductDisplay Select:
				//Load Nozzle Configuration
				for(iNozzle=0;iNozzle<4;iNozzle++){
   10648:	80 91 8f 02 	lds	r24, 0x028F
   1064c:	8f 5f       	subi	r24, 0xFF	; 255
   1064e:	80 93 8f 02 	sts	0x028F, r24
   10652:	e0 91 8f 02 	lds	r30, 0x028F
   10656:	e4 30       	cpi	r30, 0x04	; 4
   10658:	08 f4       	brcc	.+2      	; 0x1065c <FMenuLocalAccount+0x64c>
   1065a:	96 cf       	rjmp	.-212    	; 0x10588 <FMenuLocalAccount+0x578>
					else{
					       sprintf_P(lcdteks,PSTR("     "));					
					}
				    lcd_print(2+(iNozzle%2),1+(iNozzle/2)*11,lcdteks);
				}
	            lcd_printf(4,1,PSTR("[*]Back             "));   //"[*]Back             "				
   1065c:	84 e0       	ldi	r24, 0x04	; 4
   1065e:	61 e0       	ldi	r22, 0x01	; 1
   10660:	45 ef       	ldi	r20, 0xF5	; 245
   10662:	51 e2       	ldi	r21, 0x21	; 33
   10664:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
				stLocalAccount=laSelectProductInput;
   10668:	8c e0       	ldi	r24, 0x0C	; 12
   1066a:	4b cd       	rjmp	.-1386   	; 0x10102 <FMenuLocalAccount+0xf2>
				}
		        break; 
           case laSelectProductInput:
				KeyPressed=_key_scan(1);
   1066c:	81 e0       	ldi	r24, 0x01	; 1
   1066e:	0e 94 6d a6 	call	0x14cda	; 0x14cda <_key_scan>
   10672:	e8 2e       	mov	r14, r24
			    KeyChar=_key_btn(KeyPressed);
   10674:	0e 94 ce a5 	call	0x14b9c	; 0x14b9c <_key_btn>
				if ((KeyChar>='1')&&(KeyChar<='4')){
   10678:	81 53       	subi	r24, 0x31	; 49
   1067a:	84 30       	cpi	r24, 0x04	; 4
   1067c:	e8 f5       	brcc	.+122    	; 0x106f8 <FMenuLocalAccount+0x6e8>
				    iNozzle=KeyChar-'1';
   1067e:	80 93 8f 02 	sts	0x028F, r24
				    eeprom_read_block((void*) &ProductName, (const void*) &DefProductName[ProductID[iNozzle]-1],10);
   10682:	e8 2f       	mov	r30, r24
   10684:	f0 e0       	ldi	r31, 0x00	; 0
   10686:	e7 57       	subi	r30, 0x77	; 119
   10688:	fd 4f       	sbci	r31, 0xFD	; 253
   1068a:	60 81       	ld	r22, Z
   1068c:	7d e0       	ldi	r23, 0x0D	; 13
   1068e:	f7 2e       	mov	r15, r23
   10690:	6f 9d       	mul	r22, r15
   10692:	b0 01       	movw	r22, r0
   10694:	11 24       	eor	r1, r1
   10696:	61 55       	subi	r22, 0x51	; 81
   10698:	7f 4f       	sbci	r23, 0xFF	; 255
   1069a:	8e 01       	movw	r16, r28
   1069c:	0f 5f       	subi	r16, 0xFF	; 255
   1069e:	1f 4f       	sbci	r17, 0xFF	; 255
   106a0:	c8 01       	movw	r24, r16
   106a2:	4a e0       	ldi	r20, 0x0A	; 10
   106a4:	50 e0       	ldi	r21, 0x00	; 0
   106a6:	0e 94 30 ad 	call	0x15a60	; 0x15a60 <__eerd_block_m128>
					sprintf_P(strProduct,PSTR("%s"),ProductName);
   106aa:	00 d0       	rcall	.+0      	; 0x106ac <FMenuLocalAccount+0x69c>
   106ac:	00 d0       	rcall	.+0      	; 0x106ae <FMenuLocalAccount+0x69e>
   106ae:	00 d0       	rcall	.+0      	; 0x106b0 <FMenuLocalAccount+0x6a0>
   106b0:	ed b7       	in	r30, 0x3d	; 61
   106b2:	fe b7       	in	r31, 0x3e	; 62
   106b4:	31 96       	adiw	r30, 0x01	; 1
   106b6:	8e e5       	ldi	r24, 0x5E	; 94
   106b8:	97 e0       	ldi	r25, 0x07	; 7
   106ba:	ad b7       	in	r26, 0x3d	; 61
   106bc:	be b7       	in	r27, 0x3e	; 62
   106be:	12 96       	adiw	r26, 0x02	; 2
   106c0:	9c 93       	st	X, r25
   106c2:	8e 93       	st	-X, r24
   106c4:	11 97       	sbiw	r26, 0x01	; 1
   106c6:	82 ef       	ldi	r24, 0xF2	; 242
   106c8:	91 e2       	ldi	r25, 0x21	; 33
   106ca:	93 83       	std	Z+3, r25	; 0x03
   106cc:	82 83       	std	Z+2, r24	; 0x02
   106ce:	15 83       	std	Z+5, r17	; 0x05
   106d0:	04 83       	std	Z+4, r16	; 0x04
   106d2:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
					NozzleID=iNozzle+1;
   106d6:	80 91 8f 02 	lds	r24, 0x028F
   106da:	8f 5f       	subi	r24, 0xFF	; 255
   106dc:	80 93 6d 07 	sts	0x076D, r24
                    stLocalAccount=laSelectBalanceType;
   106e0:	f0 92 5b 01 	sts	0x015B, r15
					lcd_clear();
   106e4:	ed b7       	in	r30, 0x3d	; 61
   106e6:	fe b7       	in	r31, 0x3e	; 62
   106e8:	36 96       	adiw	r30, 0x06	; 6
   106ea:	0f b6       	in	r0, 0x3f	; 63
   106ec:	f8 94       	cli
   106ee:	fe bf       	out	0x3e, r31	; 62
   106f0:	0f be       	out	0x3f, r0	; 63
   106f2:	ed bf       	out	0x3d, r30	; 61
   106f4:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
					}                
				if (KeyPressed==_KEY_CANCEL)stLocalAccount=laSelectFIP;//Back To Pump Selection
   106f8:	f7 ee       	ldi	r31, 0xE7	; 231
   106fa:	ef 16       	cp	r14, r31
   106fc:	09 f0       	breq	.+2      	; 0x10700 <FMenuLocalAccount+0x6f0>
   106fe:	18 c5       	rjmp	.+2608   	; 0x11130 <FMenuLocalAccount+0x1120>
   10700:	89 e0       	ldi	r24, 0x09	; 9
   10702:	ff cc       	rjmp	.-1538   	; 0x10102 <FMenuLocalAccount+0xf2>
		        break;
           case laSelectBalanceType:
		        lcd_clear();
   10704:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
		        sprintf_P(lcdteks,PSTR("P%s-%s "),strFIP,strProduct);      
   10708:	2d b7       	in	r18, 0x3d	; 61
   1070a:	3e b7       	in	r19, 0x3e	; 62
   1070c:	28 50       	subi	r18, 0x08	; 8
   1070e:	30 40       	sbci	r19, 0x00	; 0
   10710:	0f b6       	in	r0, 0x3f	; 63
   10712:	f8 94       	cli
   10714:	3e bf       	out	0x3e, r19	; 62
   10716:	0f be       	out	0x3f, r0	; 63
   10718:	2d bf       	out	0x3d, r18	; 61
   1071a:	ed b7       	in	r30, 0x3d	; 61
   1071c:	fe b7       	in	r31, 0x3e	; 62
   1071e:	31 96       	adiw	r30, 0x01	; 1
   10720:	8e 01       	movw	r16, r28
   10722:	04 5f       	subi	r16, 0xF4	; 244
   10724:	1f 4f       	sbci	r17, 0xFF	; 255
   10726:	ad b7       	in	r26, 0x3d	; 61
   10728:	be b7       	in	r27, 0x3e	; 62
   1072a:	12 96       	adiw	r26, 0x02	; 2
   1072c:	1c 93       	st	X, r17
   1072e:	0e 93       	st	-X, r16
   10730:	11 97       	sbiw	r26, 0x01	; 1
   10732:	8a ee       	ldi	r24, 0xEA	; 234
   10734:	91 e2       	ldi	r25, 0x21	; 33
   10736:	93 83       	std	Z+3, r25	; 0x03
   10738:	82 83       	std	Z+2, r24	; 0x02
   1073a:	81 e9       	ldi	r24, 0x91	; 145
   1073c:	92 e0       	ldi	r25, 0x02	; 2
   1073e:	95 83       	std	Z+5, r25	; 0x05
   10740:	84 83       	std	Z+4, r24	; 0x04
   10742:	8e e5       	ldi	r24, 0x5E	; 94
   10744:	97 e0       	ldi	r25, 0x07	; 7
   10746:	97 83       	std	Z+7, r25	; 0x07
   10748:	86 83       	std	Z+6, r24	; 0x06
   1074a:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
				 lcd_print(1,1,lcdteks);                        //"P01-Pertamax        "                                                                      
   1074e:	ed b7       	in	r30, 0x3d	; 61
   10750:	fe b7       	in	r31, 0x3e	; 62
   10752:	38 96       	adiw	r30, 0x08	; 8
   10754:	0f b6       	in	r0, 0x3f	; 63
   10756:	f8 94       	cli
   10758:	fe bf       	out	0x3e, r31	; 62
   1075a:	0f be       	out	0x3f, r0	; 63
   1075c:	ed bf       	out	0x3d, r30	; 61
   1075e:	81 e0       	ldi	r24, 0x01	; 1
   10760:	61 e0       	ldi	r22, 0x01	; 1
   10762:	a8 01       	movw	r20, r16
   10764:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
		        lcd_printf(2,1,PSTR("[1]Volume           "));   //"[1]Premium          "                                                                      
   10768:	82 e0       	ldi	r24, 0x02	; 2
   1076a:	61 e0       	ldi	r22, 0x01	; 1
   1076c:	45 ed       	ldi	r20, 0xD5	; 213
   1076e:	51 e2       	ldi	r21, 0x21	; 33
   10770:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
				lcd_printf(3,1,PSTR("[2]Amount           "));   //"[2]Pertamax         "
   10774:	83 e0       	ldi	r24, 0x03	; 3
   10776:	61 e0       	ldi	r22, 0x01	; 1
   10778:	40 ec       	ldi	r20, 0xC0	; 192
   1077a:	51 e2       	ldi	r21, 0x21	; 33
   1077c:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
				lcd_printf(4,1,PSTR("[*]Back    [#]Next  "));   //"[*]Back             "						        
   10780:	84 e0       	ldi	r24, 0x04	; 4
   10782:	61 e0       	ldi	r22, 0x01	; 1
   10784:	4b ea       	ldi	r20, 0xAB	; 171
   10786:	51 e2       	ldi	r21, 0x21	; 33
   10788:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
	            //lcd_printf(4,1,PSTR("[*]Back    [#]Next  "));   //"[*]Back             "						        
                stLocalAccount=laSelectBalanceTypeInput;   
   1078c:	8e e0       	ldi	r24, 0x0E	; 14
   1078e:	b9 cc       	rjmp	.-1678   	; 0x10102 <FMenuLocalAccount+0xf2>
		        break;
           case laSelectBalanceTypeInput:
				KeyPressed=_key_scan(1);
   10790:	81 e0       	ldi	r24, 0x01	; 1
   10792:	0e 94 6d a6 	call	0x14cda	; 0x14cda <_key_scan>
   10796:	18 2f       	mov	r17, r24
			    KeyChar=_key_btn(KeyPressed);
   10798:	0e 94 ce a5 	call	0x14b9c	; 0x14b9c <_key_btn>
   1079c:	98 2f       	mov	r25, r24
				if ((KeyChar>='1')&&(KeyChar<='2')){
   1079e:	81 53       	subi	r24, 0x31	; 49
   107a0:	82 30       	cpi	r24, 0x02	; 2
   107a2:	80 f5       	brcc	.+96     	; 0x10804 <FMenuLocalAccount+0x7f4>
                    if(KeyChar=='1'){
   107a4:	91 33       	cpi	r25, 0x31	; 49
   107a6:	a1 f4       	brne	.+40     	; 0x107d0 <FMenuLocalAccount+0x7c0>
					   BalanceType=1;
   107a8:	81 e0       	ldi	r24, 0x01	; 1
   107aa:	80 93 94 02 	sts	0x0294, r24
					   sprintf_P(strBalanceType,PSTR("V"));
   107ae:	00 d0       	rcall	.+0      	; 0x107b0 <FMenuLocalAccount+0x7a0>
   107b0:	00 d0       	rcall	.+0      	; 0x107b2 <FMenuLocalAccount+0x7a2>
   107b2:	83 ea       	ldi	r24, 0xA3	; 163
   107b4:	93 e0       	ldi	r25, 0x03	; 3
   107b6:	ad b7       	in	r26, 0x3d	; 61
   107b8:	be b7       	in	r27, 0x3e	; 62
   107ba:	12 96       	adiw	r26, 0x02	; 2
   107bc:	9c 93       	st	X, r25
   107be:	8e 93       	st	-X, r24
   107c0:	11 97       	sbiw	r26, 0x01	; 1
   107c2:	89 ea       	ldi	r24, 0xA9	; 169
   107c4:	91 e2       	ldi	r25, 0x21	; 33
   107c6:	14 96       	adiw	r26, 0x04	; 4
   107c8:	9c 93       	st	X, r25
   107ca:	8e 93       	st	-X, r24
   107cc:	13 97       	sbiw	r26, 0x03	; 3
   107ce:	11 c0       	rjmp	.+34     	; 0x107f2 <FMenuLocalAccount+0x7e2>
					   }
					else
                    if(KeyChar=='2'){
   107d0:	92 33       	cpi	r25, 0x32	; 50
   107d2:	a9 f4       	brne	.+42     	; 0x107fe <FMenuLocalAccount+0x7ee>
					   BalanceType=2;
   107d4:	82 e0       	ldi	r24, 0x02	; 2
   107d6:	80 93 94 02 	sts	0x0294, r24
                       sprintf_P(strBalanceType,PSTR("A"));
   107da:	00 d0       	rcall	.+0      	; 0x107dc <FMenuLocalAccount+0x7cc>
   107dc:	00 d0       	rcall	.+0      	; 0x107de <FMenuLocalAccount+0x7ce>
   107de:	83 ea       	ldi	r24, 0xA3	; 163
   107e0:	93 e0       	ldi	r25, 0x03	; 3
   107e2:	ed b7       	in	r30, 0x3d	; 61
   107e4:	fe b7       	in	r31, 0x3e	; 62
   107e6:	92 83       	std	Z+2, r25	; 0x02
   107e8:	81 83       	std	Z+1, r24	; 0x01
   107ea:	87 ea       	ldi	r24, 0xA7	; 167
   107ec:	91 e2       	ldi	r25, 0x21	; 33
   107ee:	94 83       	std	Z+4, r25	; 0x04
   107f0:	83 83       	std	Z+3, r24	; 0x03
   107f2:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
   107f6:	0f 90       	pop	r0
   107f8:	0f 90       	pop	r0
   107fa:	0f 90       	pop	r0
   107fc:	0f 90       	pop	r0
					   }
				    stLocalAccount=laBalanceValue;  
   107fe:	8f e0       	ldi	r24, 0x0F	; 15
   10800:	80 93 5b 01 	sts	0x015B, r24
					}              
				if (KeyPressed==_KEY_CANCEL){
   10804:	17 3e       	cpi	r17, 0xE7	; 231
   10806:	c9 f4       	brne	.+50     	; 0x1083a <FMenuLocalAccount+0x82a>
				    if ((ProductID[0]>=1)&&(ProductID[0]<=6)&&(ProductID[1]==0)&&(ProductID[2]==0)&&(ProductID[3]==0))
   10808:	80 91 89 02 	lds	r24, 0x0289
   1080c:	81 50       	subi	r24, 0x01	; 1
   1080e:	86 30       	cpi	r24, 0x06	; 6
   10810:	70 f4       	brcc	.+28     	; 0x1082e <FMenuLocalAccount+0x81e>
   10812:	80 91 8a 02 	lds	r24, 0x028A
   10816:	88 23       	and	r24, r24
   10818:	51 f4       	brne	.+20     	; 0x1082e <FMenuLocalAccount+0x81e>
   1081a:	80 91 8b 02 	lds	r24, 0x028B
   1081e:	88 23       	and	r24, r24
   10820:	31 f4       	brne	.+12     	; 0x1082e <FMenuLocalAccount+0x81e>
   10822:	80 91 8c 02 	lds	r24, 0x028C
   10826:	88 23       	and	r24, r24
   10828:	11 f4       	brne	.+4      	; 0x1082e <FMenuLocalAccount+0x81e>
					     stLocalAccount=laSelectFIP;//Back To FIP Select Non MPD
   1082a:	89 e0       	ldi	r24, 0x09	; 9
   1082c:	01 c0       	rjmp	.+2      	; 0x10830 <FMenuLocalAccount+0x820>
                    else stLocalAccount=laSelectProduct;//Back To Product Selection MPD
   1082e:	8b e0       	ldi	r24, 0x0B	; 11
   10830:	80 93 5b 01 	sts	0x015B, r24
					lcd_clear();
   10834:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
   10838:	7b c4       	rjmp	.+2294   	; 0x11130 <FMenuLocalAccount+0x1120>
					}
                else
				if (KeyPressed==_KEY_ENTER){
   1083a:	17 3b       	cpi	r17, 0xB7	; 183
   1083c:	09 f0       	breq	.+2      	; 0x10840 <FMenuLocalAccount+0x830>
   1083e:	78 c4       	rjmp	.+2288   	; 0x11130 <FMenuLocalAccount+0x1120>
				    BalanceType=1;
   10840:	11 e0       	ldi	r17, 0x01	; 1
   10842:	10 93 94 02 	sts	0x0294, r17
					sprintf_P(strBalanceType,PSTR("A"));
   10846:	00 d0       	rcall	.+0      	; 0x10848 <FMenuLocalAccount+0x838>
   10848:	00 d0       	rcall	.+0      	; 0x1084a <FMenuLocalAccount+0x83a>
   1084a:	83 ea       	ldi	r24, 0xA3	; 163
   1084c:	93 e0       	ldi	r25, 0x03	; 3
   1084e:	ad b7       	in	r26, 0x3d	; 61
   10850:	be b7       	in	r27, 0x3e	; 62
   10852:	12 96       	adiw	r26, 0x02	; 2
   10854:	9c 93       	st	X, r25
   10856:	8e 93       	st	-X, r24
   10858:	11 97       	sbiw	r26, 0x01	; 1
   1085a:	85 ea       	ldi	r24, 0xA5	; 165
   1085c:	91 e2       	ldi	r25, 0x21	; 33
   1085e:	14 96       	adiw	r26, 0x04	; 4
   10860:	9c 93       	st	X, r25
   10862:	8e 93       	st	-X, r24
   10864:	13 97       	sbiw	r26, 0x03	; 3
   10866:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
					//sprintf_P(strBalanceValue,PSTR("999"));
					IsFullAuthorized=True;
   1086a:	10 93 86 02 	sts	0x0286, r17
                    stLocalAccount=laOdometer;//FullAuthorized
   1086e:	81 e1       	ldi	r24, 0x11	; 17
   10870:	80 93 5b 01 	sts	0x015B, r24
   10874:	80 e0       	ldi	r24, 0x00	; 0
   10876:	0f 90       	pop	r0
   10878:	0f 90       	pop	r0
   1087a:	0f 90       	pop	r0
   1087c:	0f 90       	pop	r0
   1087e:	59 c4       	rjmp	.+2226   	; 0x11132 <FMenuLocalAccount+0x1122>
					}

		        break;
           case laBalanceValue:
		        lcd_clear();
   10880:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
		        if(BalanceType==1){
   10884:	80 91 94 02 	lds	r24, 0x0294
   10888:	81 30       	cpi	r24, 0x01	; 1
   1088a:	f1 f5       	brne	.+124    	; 0x10908 <FMenuLocalAccount+0x8f8>
		           sprintf_P(lcdteks,PSTR("P%s-%s "),strFIP,strProduct);      
   1088c:	ed b7       	in	r30, 0x3d	; 61
   1088e:	fe b7       	in	r31, 0x3e	; 62
   10890:	38 97       	sbiw	r30, 0x08	; 8
   10892:	0f b6       	in	r0, 0x3f	; 63
   10894:	f8 94       	cli
   10896:	fe bf       	out	0x3e, r31	; 62
   10898:	0f be       	out	0x3f, r0	; 63
   1089a:	ed bf       	out	0x3d, r30	; 61
   1089c:	31 96       	adiw	r30, 0x01	; 1
   1089e:	8e 01       	movw	r16, r28
   108a0:	04 5f       	subi	r16, 0xF4	; 244
   108a2:	1f 4f       	sbci	r17, 0xFF	; 255
   108a4:	ad b7       	in	r26, 0x3d	; 61
   108a6:	be b7       	in	r27, 0x3e	; 62
   108a8:	12 96       	adiw	r26, 0x02	; 2
   108aa:	1c 93       	st	X, r17
   108ac:	0e 93       	st	-X, r16
   108ae:	11 97       	sbiw	r26, 0x01	; 1
   108b0:	8d e9       	ldi	r24, 0x9D	; 157
   108b2:	91 e2       	ldi	r25, 0x21	; 33
   108b4:	93 83       	std	Z+3, r25	; 0x03
   108b6:	82 83       	std	Z+2, r24	; 0x02
   108b8:	81 e9       	ldi	r24, 0x91	; 145
   108ba:	92 e0       	ldi	r25, 0x02	; 2
   108bc:	95 83       	std	Z+5, r25	; 0x05
   108be:	84 83       	std	Z+4, r24	; 0x04
   108c0:	8e e5       	ldi	r24, 0x5E	; 94
   108c2:	97 e0       	ldi	r25, 0x07	; 7
   108c4:	97 83       	std	Z+7, r25	; 0x07
   108c6:	86 83       	std	Z+6, r24	; 0x06
   108c8:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
				    lcd_print(1,1,lcdteks);                        //"P01-Pertamax        "                                                                      
   108cc:	ed b7       	in	r30, 0x3d	; 61
   108ce:	fe b7       	in	r31, 0x3e	; 62
   108d0:	38 96       	adiw	r30, 0x08	; 8
   108d2:	0f b6       	in	r0, 0x3f	; 63
   108d4:	f8 94       	cli
   108d6:	fe bf       	out	0x3e, r31	; 62
   108d8:	0f be       	out	0x3f, r0	; 63
   108da:	ed bf       	out	0x3d, r30	; 61
   108dc:	81 e0       	ldi	r24, 0x01	; 1
   108de:	61 e0       	ldi	r22, 0x01	; 1
   108e0:	a8 01       	movw	r20, r16
   108e2:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
		           lcd_printf(2,1,PSTR("[1]Volume:_         "));   //"[1]Volume:_         "                                                                      
   108e6:	82 e0       	ldi	r24, 0x02	; 2
   108e8:	61 e0       	ldi	r22, 0x01	; 1
   108ea:	48 e8       	ldi	r20, 0x88	; 136
   108ec:	51 e2       	ldi	r21, 0x21	; 33
   108ee:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
				   lcd_printf(3,1,PSTR("                    "));   //"                    "
   108f2:	83 e0       	ldi	r24, 0x03	; 3
   108f4:	61 e0       	ldi	r22, 0x01	; 1
   108f6:	43 e7       	ldi	r20, 0x73	; 115
   108f8:	51 e2       	ldi	r21, 0x21	; 33
   108fa:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
	               lcd_printf(4,1,PSTR("[*]Back  [#]OK      "));   //"[*]Back  [#]OK     "						        
   108fe:	84 e0       	ldi	r24, 0x04	; 4
   10900:	61 e0       	ldi	r22, 0x01	; 1
   10902:	4e e5       	ldi	r20, 0x5E	; 94
   10904:	51 e2       	ldi	r21, 0x21	; 33
   10906:	43 c0       	rjmp	.+134    	; 0x1098e <FMenuLocalAccount+0x97e>
				   }
                else
		        if(BalanceType==2){
   10908:	82 30       	cpi	r24, 0x02	; 2
   1090a:	09 f0       	breq	.+2      	; 0x1090e <FMenuLocalAccount+0x8fe>
   1090c:	42 c0       	rjmp	.+132    	; 0x10992 <FMenuLocalAccount+0x982>
		           sprintf_P(lcdteks,PSTR("P%s-%s "),strFIP,strProduct);      
   1090e:	2d b7       	in	r18, 0x3d	; 61
   10910:	3e b7       	in	r19, 0x3e	; 62
   10912:	28 50       	subi	r18, 0x08	; 8
   10914:	30 40       	sbci	r19, 0x00	; 0
   10916:	0f b6       	in	r0, 0x3f	; 63
   10918:	f8 94       	cli
   1091a:	3e bf       	out	0x3e, r19	; 62
   1091c:	0f be       	out	0x3f, r0	; 63
   1091e:	2d bf       	out	0x3d, r18	; 61
   10920:	ed b7       	in	r30, 0x3d	; 61
   10922:	fe b7       	in	r31, 0x3e	; 62
   10924:	31 96       	adiw	r30, 0x01	; 1
   10926:	8e 01       	movw	r16, r28
   10928:	04 5f       	subi	r16, 0xF4	; 244
   1092a:	1f 4f       	sbci	r17, 0xFF	; 255
   1092c:	ad b7       	in	r26, 0x3d	; 61
   1092e:	be b7       	in	r27, 0x3e	; 62
   10930:	12 96       	adiw	r26, 0x02	; 2
   10932:	1c 93       	st	X, r17
   10934:	0e 93       	st	-X, r16
   10936:	11 97       	sbiw	r26, 0x01	; 1
   10938:	86 e5       	ldi	r24, 0x56	; 86
   1093a:	91 e2       	ldi	r25, 0x21	; 33
   1093c:	93 83       	std	Z+3, r25	; 0x03
   1093e:	82 83       	std	Z+2, r24	; 0x02
   10940:	81 e9       	ldi	r24, 0x91	; 145
   10942:	92 e0       	ldi	r25, 0x02	; 2
   10944:	95 83       	std	Z+5, r25	; 0x05
   10946:	84 83       	std	Z+4, r24	; 0x04
   10948:	8e e5       	ldi	r24, 0x5E	; 94
   1094a:	97 e0       	ldi	r25, 0x07	; 7
   1094c:	97 83       	std	Z+7, r25	; 0x07
   1094e:	86 83       	std	Z+6, r24	; 0x06
   10950:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
				   lcd_print(1,1,lcdteks);                         //"P01-Pertamax        "                                                                      
   10954:	ed b7       	in	r30, 0x3d	; 61
   10956:	fe b7       	in	r31, 0x3e	; 62
   10958:	38 96       	adiw	r30, 0x08	; 8
   1095a:	0f b6       	in	r0, 0x3f	; 63
   1095c:	f8 94       	cli
   1095e:	fe bf       	out	0x3e, r31	; 62
   10960:	0f be       	out	0x3f, r0	; 63
   10962:	ed bf       	out	0x3d, r30	; 61
   10964:	81 e0       	ldi	r24, 0x01	; 1
   10966:	61 e0       	ldi	r22, 0x01	; 1
   10968:	a8 01       	movw	r20, r16
   1096a:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
		           lcd_printf(2,1,PSTR("                    "));   //"                    "                                                                      
   1096e:	82 e0       	ldi	r24, 0x02	; 2
   10970:	61 e0       	ldi	r22, 0x01	; 1
   10972:	41 e4       	ldi	r20, 0x41	; 65
   10974:	51 e2       	ldi	r21, 0x21	; 33
   10976:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
				   lcd_printf(3,1,PSTR("[2]Amount:_         "));   //"[2]Amount:_         "
   1097a:	83 e0       	ldi	r24, 0x03	; 3
   1097c:	61 e0       	ldi	r22, 0x01	; 1
   1097e:	4c e2       	ldi	r20, 0x2C	; 44
   10980:	51 e2       	ldi	r21, 0x21	; 33
   10982:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
	               lcd_printf(4,1,PSTR("[*]Back  [#]OK      "));   //"[*]Back  [#]OK      "			        
   10986:	84 e0       	ldi	r24, 0x04	; 4
   10988:	61 e0       	ldi	r22, 0x01	; 1
   1098a:	47 e1       	ldi	r20, 0x17	; 23
   1098c:	51 e2       	ldi	r21, 0x21	; 33
   1098e:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
				   }
                iLoop=0;
   10992:	10 92 85 02 	sts	0x0285, r1
   10996:	10 92 84 02 	sts	0x0284, r1
				iValuePos=0;
   1099a:	10 92 90 02 	sts	0x0290, r1
				//ValueChar[iValuePos]=' ';
		        stLocalAccount=laBalanceValueInput;  
   1099e:	80 e1       	ldi	r24, 0x10	; 16
   109a0:	b0 cb       	rjmp	.-2208   	; 0x10102 <FMenuLocalAccount+0xf2>
		        break; 
           case laBalanceValueInput:
		        uiResult=UserInput(UI_NUMBER_R,(1+BalanceType),11,strBalanceValue,0,10); 
   109a2:	60 91 94 02 	lds	r22, 0x0294
   109a6:	6f 5f       	subi	r22, 0xFF	; 255
   109a8:	81 e0       	ldi	r24, 0x01	; 1
   109aa:	4b e0       	ldi	r20, 0x0B	; 11
   109ac:	2f e1       	ldi	r18, 0x1F	; 31
   109ae:	3c e0       	ldi	r19, 0x0C	; 12
   109b0:	00 e0       	ldi	r16, 0x00	; 0
   109b2:	10 e0       	ldi	r17, 0x00	; 0
   109b4:	5a e0       	ldi	r21, 0x0A	; 10
   109b6:	e5 2e       	mov	r14, r21
   109b8:	0e 94 dc 67 	call	0xcfb8	; 0xcfb8 <UserInput>
				if (uiResult==USER_CANCEL){
   109bc:	81 30       	cpi	r24, 0x01	; 1
   109be:	39 f4       	brne	.+14     	; 0x109ce <FMenuLocalAccount+0x9be>
				    lcd_clear();
   109c0:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
   109c4:	88 ea       	ldi	r24, 0xA8	; 168
   109c6:	91 e6       	ldi	r25, 0x61	; 97
   109c8:	01 97       	sbiw	r24, 0x01	; 1
   109ca:	f1 f7       	brne	.-4      	; 0x109c8 <FMenuLocalAccount+0x9b8>
   109cc:	f9 c0       	rjmp	.+498    	; 0x10bc0 <FMenuLocalAccount+0xbb0>
					_delay_ms(100);		        
				    stLocalAccount=laSelectBalanceType;		        
					}
				else
				if (uiResult==USER_OK){				    
   109ce:	83 30       	cpi	r24, 0x03	; 3
   109d0:	09 f0       	breq	.+2      	; 0x109d4 <FMenuLocalAccount+0x9c4>
   109d2:	ae c3       	rjmp	.+1884   	; 0x11130 <FMenuLocalAccount+0x1120>
				    stLocalAccount=laOdometer;
   109d4:	81 e1       	ldi	r24, 0x11	; 17
   109d6:	80 93 5b 01 	sts	0x015B, r24
					lcd_clear();
   109da:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
   109de:	88 ea       	ldi	r24, 0xA8	; 168
   109e0:	91 e6       	ldi	r25, 0x61	; 97
   109e2:	01 97       	sbiw	r24, 0x01	; 1
   109e4:	f1 f7       	brne	.-4      	; 0x109e2 <FMenuLocalAccount+0x9d2>
   109e6:	a4 c3       	rjmp	.+1864   	; 0x11130 <FMenuLocalAccount+0x1120>
					_delay_ms(100);		        
					}
*/
		        break;
           case laOdometer://GetOdometer			
		        lcd_clear();
   109e8:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
				if (IsFullAuthorized==True){
   109ec:	80 91 86 02 	lds	r24, 0x0286
   109f0:	81 30       	cpi	r24, 0x01	; 1
   109f2:	09 f0       	breq	.+2      	; 0x109f6 <FMenuLocalAccount+0x9e6>
   109f4:	4a c0       	rjmp	.+148    	; 0x10a8a <FMenuLocalAccount+0xa7a>
				    lcd_printf(1,1,PSTR("Pump Product   Full"));
   109f6:	61 e0       	ldi	r22, 0x01	; 1
   109f8:	43 e0       	ldi	r20, 0x03	; 3
   109fa:	51 e2       	ldi	r21, 0x21	; 33
   109fc:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
					sprintf_P(lcdteks,PSTR("  %s %s "),strFIP,strProduct);    lcd_print(2,1,lcdteks);    //"P01  Pertamax       "
   10a00:	2d b7       	in	r18, 0x3d	; 61
   10a02:	3e b7       	in	r19, 0x3e	; 62
   10a04:	28 50       	subi	r18, 0x08	; 8
   10a06:	30 40       	sbci	r19, 0x00	; 0
   10a08:	0f b6       	in	r0, 0x3f	; 63
   10a0a:	f8 94       	cli
   10a0c:	3e bf       	out	0x3e, r19	; 62
   10a0e:	0f be       	out	0x3f, r0	; 63
   10a10:	2d bf       	out	0x3d, r18	; 61
   10a12:	ed b7       	in	r30, 0x3d	; 61
   10a14:	fe b7       	in	r31, 0x3e	; 62
   10a16:	31 96       	adiw	r30, 0x01	; 1
   10a18:	8e 01       	movw	r16, r28
   10a1a:	04 5f       	subi	r16, 0xF4	; 244
   10a1c:	1f 4f       	sbci	r17, 0xFF	; 255
   10a1e:	ad b7       	in	r26, 0x3d	; 61
   10a20:	be b7       	in	r27, 0x3e	; 62
   10a22:	12 96       	adiw	r26, 0x02	; 2
   10a24:	1c 93       	st	X, r17
   10a26:	0e 93       	st	-X, r16
   10a28:	11 97       	sbiw	r26, 0x01	; 1
   10a2a:	8a ef       	ldi	r24, 0xFA	; 250
   10a2c:	90 e2       	ldi	r25, 0x20	; 32
   10a2e:	93 83       	std	Z+3, r25	; 0x03
   10a30:	82 83       	std	Z+2, r24	; 0x02
   10a32:	81 e9       	ldi	r24, 0x91	; 145
   10a34:	92 e0       	ldi	r25, 0x02	; 2
   10a36:	95 83       	std	Z+5, r25	; 0x05
   10a38:	84 83       	std	Z+4, r24	; 0x04
   10a3a:	8e e5       	ldi	r24, 0x5E	; 94
   10a3c:	97 e0       	ldi	r25, 0x07	; 7
   10a3e:	97 83       	std	Z+7, r25	; 0x07
   10a40:	86 83       	std	Z+6, r24	; 0x06
   10a42:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
   10a46:	ed b7       	in	r30, 0x3d	; 61
   10a48:	fe b7       	in	r31, 0x3e	; 62
   10a4a:	38 96       	adiw	r30, 0x08	; 8
   10a4c:	0f b6       	in	r0, 0x3f	; 63
   10a4e:	f8 94       	cli
   10a50:	fe bf       	out	0x3e, r31	; 62
   10a52:	0f be       	out	0x3f, r0	; 63
   10a54:	ed bf       	out	0x3d, r30	; 61
   10a56:	82 e0       	ldi	r24, 0x02	; 2
   10a58:	61 e0       	ldi	r22, 0x01	; 1
   10a5a:	a8 01       	movw	r20, r16
   10a5c:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
		            sprintf_P(lcdteks,PSTR("  Tank"));            lcd_print(2,14,lcdteks);   //"P01  Pertamax 500000"
   10a60:	00 d0       	rcall	.+0      	; 0x10a62 <FMenuLocalAccount+0xa52>
   10a62:	00 d0       	rcall	.+0      	; 0x10a64 <FMenuLocalAccount+0xa54>
   10a64:	ad b7       	in	r26, 0x3d	; 61
   10a66:	be b7       	in	r27, 0x3e	; 62
   10a68:	12 96       	adiw	r26, 0x02	; 2
   10a6a:	1c 93       	st	X, r17
   10a6c:	0e 93       	st	-X, r16
   10a6e:	11 97       	sbiw	r26, 0x01	; 1
   10a70:	83 ef       	ldi	r24, 0xF3	; 243
   10a72:	90 e2       	ldi	r25, 0x20	; 32
   10a74:	14 96       	adiw	r26, 0x04	; 4
   10a76:	9c 93       	st	X, r25
   10a78:	8e 93       	st	-X, r24
   10a7a:	13 97       	sbiw	r26, 0x03	; 3
   10a7c:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
   10a80:	0f 90       	pop	r0
   10a82:	0f 90       	pop	r0
   10a84:	0f 90       	pop	r0
   10a86:	0f 90       	pop	r0
   10a88:	5e c0       	rjmp	.+188    	; 0x10b46 <FMenuLocalAccount+0xb36>
				}
                else{
		            if (BalanceType==1) lcd_printf(1,1,PSTR("Pump Product Volume"));
   10a8a:	80 91 94 02 	lds	r24, 0x0294
   10a8e:	81 30       	cpi	r24, 0x01	; 1
   10a90:	29 f4       	brne	.+10     	; 0x10a9c <FMenuLocalAccount+0xa8c>
   10a92:	61 e0       	ldi	r22, 0x01	; 1
   10a94:	4f ed       	ldi	r20, 0xDF	; 223
   10a96:	50 e2       	ldi	r21, 0x20	; 32
   10a98:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
                    if (BalanceType==2) lcd_printf(1,1,PSTR("Pump Product Amount"));//"Pump Product  Amount" 
   10a9c:	80 91 94 02 	lds	r24, 0x0294
   10aa0:	82 30       	cpi	r24, 0x02	; 2
   10aa2:	31 f4       	brne	.+12     	; 0x10ab0 <FMenuLocalAccount+0xaa0>
   10aa4:	81 e0       	ldi	r24, 0x01	; 1
   10aa6:	61 e0       	ldi	r22, 0x01	; 1
   10aa8:	4b ec       	ldi	r20, 0xCB	; 203
   10aaa:	50 e2       	ldi	r21, 0x20	; 32
   10aac:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
					sprintf_P(lcdteks,PSTR("  %s %s "),strFIP,strProduct);    lcd_print(2,1,lcdteks);    //"P01  Pertamax       "
   10ab0:	ed b7       	in	r30, 0x3d	; 61
   10ab2:	fe b7       	in	r31, 0x3e	; 62
   10ab4:	38 97       	sbiw	r30, 0x08	; 8
   10ab6:	0f b6       	in	r0, 0x3f	; 63
   10ab8:	f8 94       	cli
   10aba:	fe bf       	out	0x3e, r31	; 62
   10abc:	0f be       	out	0x3f, r0	; 63
   10abe:	ed bf       	out	0x3d, r30	; 61
   10ac0:	31 96       	adiw	r30, 0x01	; 1
   10ac2:	8e 01       	movw	r16, r28
   10ac4:	04 5f       	subi	r16, 0xF4	; 244
   10ac6:	1f 4f       	sbci	r17, 0xFF	; 255
   10ac8:	ad b7       	in	r26, 0x3d	; 61
   10aca:	be b7       	in	r27, 0x3e	; 62
   10acc:	12 96       	adiw	r26, 0x02	; 2
   10ace:	1c 93       	st	X, r17
   10ad0:	0e 93       	st	-X, r16
   10ad2:	11 97       	sbiw	r26, 0x01	; 1
   10ad4:	82 ec       	ldi	r24, 0xC2	; 194
   10ad6:	90 e2       	ldi	r25, 0x20	; 32
   10ad8:	93 83       	std	Z+3, r25	; 0x03
   10ada:	82 83       	std	Z+2, r24	; 0x02
   10adc:	81 e9       	ldi	r24, 0x91	; 145
   10ade:	92 e0       	ldi	r25, 0x02	; 2
   10ae0:	95 83       	std	Z+5, r25	; 0x05
   10ae2:	84 83       	std	Z+4, r24	; 0x04
   10ae4:	8e e5       	ldi	r24, 0x5E	; 94
   10ae6:	97 e0       	ldi	r25, 0x07	; 7
   10ae8:	97 83       	std	Z+7, r25	; 0x07
   10aea:	86 83       	std	Z+6, r24	; 0x06
   10aec:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
   10af0:	ed b7       	in	r30, 0x3d	; 61
   10af2:	fe b7       	in	r31, 0x3e	; 62
   10af4:	38 96       	adiw	r30, 0x08	; 8
   10af6:	0f b6       	in	r0, 0x3f	; 63
   10af8:	f8 94       	cli
   10afa:	fe bf       	out	0x3e, r31	; 62
   10afc:	0f be       	out	0x3f, r0	; 63
   10afe:	ed bf       	out	0x3d, r30	; 61
   10b00:	82 e0       	ldi	r24, 0x02	; 2
   10b02:	61 e0       	ldi	r22, 0x01	; 1
   10b04:	a8 01       	movw	r20, r16
   10b06:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
		            sprintf_P(lcdteks,PSTR("%s "),strBalanceValue);            lcd_print(2,14,lcdteks);   //"P01  Pertamax 500000"
   10b0a:	00 d0       	rcall	.+0      	; 0x10b0c <FMenuLocalAccount+0xafc>
   10b0c:	00 d0       	rcall	.+0      	; 0x10b0e <FMenuLocalAccount+0xafe>
   10b0e:	00 d0       	rcall	.+0      	; 0x10b10 <FMenuLocalAccount+0xb00>
   10b10:	ed b7       	in	r30, 0x3d	; 61
   10b12:	fe b7       	in	r31, 0x3e	; 62
   10b14:	31 96       	adiw	r30, 0x01	; 1
   10b16:	ad b7       	in	r26, 0x3d	; 61
   10b18:	be b7       	in	r27, 0x3e	; 62
   10b1a:	12 96       	adiw	r26, 0x02	; 2
   10b1c:	1c 93       	st	X, r17
   10b1e:	0e 93       	st	-X, r16
   10b20:	11 97       	sbiw	r26, 0x01	; 1
   10b22:	8e eb       	ldi	r24, 0xBE	; 190
   10b24:	90 e2       	ldi	r25, 0x20	; 32
   10b26:	93 83       	std	Z+3, r25	; 0x03
   10b28:	82 83       	std	Z+2, r24	; 0x02
   10b2a:	8f e1       	ldi	r24, 0x1F	; 31
   10b2c:	9c e0       	ldi	r25, 0x0C	; 12
   10b2e:	95 83       	std	Z+5, r25	; 0x05
   10b30:	84 83       	std	Z+4, r24	; 0x04
   10b32:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
   10b36:	ed b7       	in	r30, 0x3d	; 61
   10b38:	fe b7       	in	r31, 0x3e	; 62
   10b3a:	36 96       	adiw	r30, 0x06	; 6
   10b3c:	0f b6       	in	r0, 0x3f	; 63
   10b3e:	f8 94       	cli
   10b40:	fe bf       	out	0x3e, r31	; 62
   10b42:	0f be       	out	0x3f, r0	; 63
   10b44:	ed bf       	out	0x3d, r30	; 61
   10b46:	82 e0       	ldi	r24, 0x02	; 2
   10b48:	6e e0       	ldi	r22, 0x0E	; 14
   10b4a:	a8 01       	movw	r20, r16
   10b4c:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>

				}
				lcd_printf(3,1,PSTR("Odometer:_       "));                                //"Odometer:_          "
   10b50:	83 e0       	ldi	r24, 0x03	; 3
   10b52:	61 e0       	ldi	r22, 0x01	; 1
   10b54:	4c ea       	ldi	r20, 0xAC	; 172
   10b56:	50 e2       	ldi	r21, 0x20	; 32
   10b58:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
	            lcd_printf(4,1,PSTR("[*]Back  [#]OK   "));                                //"[*]Back  [#]OK      "						        
   10b5c:	84 e0       	ldi	r24, 0x04	; 4
   10b5e:	61 e0       	ldi	r22, 0x01	; 1
   10b60:	4a e9       	ldi	r20, 0x9A	; 154
   10b62:	50 e2       	ldi	r21, 0x20	; 32
   10b64:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
				ClearMem(strOdometer);
   10b68:	83 ec       	ldi	r24, 0xC3	; 195
   10b6a:	93 e0       	ldi	r25, 0x03	; 3
   10b6c:	0e 94 68 a5 	call	0x14ad0	; 0x14ad0 <ClearMem>
		        stLocalAccount=laOdometerInput;
   10b70:	82 e1       	ldi	r24, 0x12	; 18
   10b72:	c7 ca       	rjmp	.-2674   	; 0x10102 <FMenuLocalAccount+0xf2>
		        break;
           case laOdometerInput:
				uiResult=UserInput(UI_NUMBER_R,3,10,strOdometer,0,10);
   10b74:	23 ec       	ldi	r18, 0xC3	; 195
   10b76:	c2 2e       	mov	r12, r18
   10b78:	23 e0       	ldi	r18, 0x03	; 3
   10b7a:	d2 2e       	mov	r13, r18
   10b7c:	81 e0       	ldi	r24, 0x01	; 1
   10b7e:	63 e0       	ldi	r22, 0x03	; 3
   10b80:	4a e0       	ldi	r20, 0x0A	; 10
   10b82:	96 01       	movw	r18, r12
   10b84:	00 e0       	ldi	r16, 0x00	; 0
   10b86:	10 e0       	ldi	r17, 0x00	; 0
   10b88:	9a e0       	ldi	r25, 0x0A	; 10
   10b8a:	e9 2e       	mov	r14, r25
   10b8c:	0e 94 dc 67 	call	0xcfb8	; 0xcfb8 <UserInput>
				if (uiResult==USER_OK){
   10b90:	83 30       	cpi	r24, 0x03	; 3
   10b92:	79 f4       	brne	.+30     	; 0x10bb2 <FMenuLocalAccount+0xba2>
				    if ((strlen(strOdometer)==1)&&(strOdometer[0]=='0'))
   10b94:	f6 01       	movw	r30, r12
   10b96:	01 90       	ld	r0, Z+
   10b98:	00 20       	and	r0, r0
   10b9a:	e9 f7       	brne	.-6      	; 0x10b96 <FMenuLocalAccount+0xb86>
   10b9c:	e5 5c       	subi	r30, 0xC5	; 197
   10b9e:	f3 40       	sbci	r31, 0x03	; 3
   10ba0:	31 f4       	brne	.+12     	; 0x10bae <FMenuLocalAccount+0xb9e>
   10ba2:	80 91 c3 03 	lds	r24, 0x03C3
   10ba6:	80 33       	cpi	r24, 0x30	; 48
   10ba8:	11 f4       	brne	.+4      	; 0x10bae <FMenuLocalAccount+0xb9e>
					    strOdometer[0]=0;
   10baa:	10 92 c3 03 	sts	0x03C3, r1
				    stLocalAccount=laDataConfirm;
   10bae:	83 e1       	ldi	r24, 0x13	; 19
   10bb0:	a8 ca       	rjmp	.-2736   	; 0x10102 <FMenuLocalAccount+0xf2>
					}
			    else
			    if (uiResult==USER_CANCEL){
   10bb2:	81 30       	cpi	r24, 0x01	; 1
   10bb4:	09 f0       	breq	.+2      	; 0x10bb8 <FMenuLocalAccount+0xba8>
   10bb6:	bc c2       	rjmp	.+1400   	; 0x11130 <FMenuLocalAccount+0x1120>
				    if (IsFullAuthorized==True)
   10bb8:	80 91 86 02 	lds	r24, 0x0286
   10bbc:	81 30       	cpi	r24, 0x01	; 1
   10bbe:	11 f4       	brne	.+4      	; 0x10bc4 <FMenuLocalAccount+0xbb4>
					     stLocalAccount=laSelectBalanceType;
   10bc0:	8d e0       	ldi	r24, 0x0D	; 13
   10bc2:	9f ca       	rjmp	.-2754   	; 0x10102 <FMenuLocalAccount+0xf2>
					else stLocalAccount=laBalanceValue;		        
   10bc4:	8f e0       	ldi	r24, 0x0F	; 15
   10bc6:	9d ca       	rjmp	.-2758   	; 0x10102 <FMenuLocalAccount+0xf2>
				 }
		        break;
           case laDataConfirm: 
		        lcd_clear();
   10bc8:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
   10bcc:	ed e2       	ldi	r30, 0x2D	; 45
   10bce:	f3 e0       	ldi	r31, 0x03	; 3
   10bd0:	de 01       	movw	r26, r28
   10bd2:	90 96       	adiw	r26, 0x20	; 32
	 }Dest[Length]=0;
}
void StringCopyPos(char *Source,char *Dest,char SrcPos,char Length){
     char i;
	 for (i=0;i<Length;i++){
	     Dest[i]=Source[SrcPos+i];
   10bd4:	81 91       	ld	r24, Z+
   10bd6:	8d 93       	st	X+, r24
	     Dest[i]=Source[i];
	 }Dest[Length]=0;
}
void StringCopyPos(char *Source,char *Dest,char SrcPos,char Length){
     char i;
	 for (i=0;i<Length;i++){
   10bd8:	33 e0       	ldi	r19, 0x03	; 3
   10bda:	e7 33       	cpi	r30, 0x37	; 55
   10bdc:	f3 07       	cpc	r31, r19
   10bde:	d1 f7       	brne	.-12     	; 0x10bd4 <FMenuLocalAccount+0xbc4>
	     Dest[i]=Source[SrcPos+i];
	 }Dest[Length]=0;
   10be0:	1a a6       	std	Y+42, r1	; 0x2a
				 }
		        break;
           case laDataConfirm: 
		        lcd_clear();
		        StringCopyPos(strCardHolder,strName,9,10);                                          //Data Confirmation   
                sprintf_P(lcdteks,PSTR("%s "),strName);                  lcd_print(1,1,lcdteks);    //"Iyan The Man        "
   10be2:	00 d0       	rcall	.+0      	; 0x10be4 <FMenuLocalAccount+0xbd4>
   10be4:	00 d0       	rcall	.+0      	; 0x10be6 <FMenuLocalAccount+0xbd6>
   10be6:	00 d0       	rcall	.+0      	; 0x10be8 <FMenuLocalAccount+0xbd8>
   10be8:	ed b7       	in	r30, 0x3d	; 61
   10bea:	fe b7       	in	r31, 0x3e	; 62
   10bec:	31 96       	adiw	r30, 0x01	; 1
   10bee:	8e 01       	movw	r16, r28
   10bf0:	04 5f       	subi	r16, 0xF4	; 244
   10bf2:	1f 4f       	sbci	r17, 0xFF	; 255
   10bf4:	ad b7       	in	r26, 0x3d	; 61
   10bf6:	be b7       	in	r27, 0x3e	; 62
   10bf8:	12 96       	adiw	r26, 0x02	; 2
   10bfa:	1c 93       	st	X, r17
   10bfc:	0e 93       	st	-X, r16
   10bfe:	11 97       	sbiw	r26, 0x01	; 1
   10c00:	86 e9       	ldi	r24, 0x96	; 150
   10c02:	90 e2       	ldi	r25, 0x20	; 32
   10c04:	93 83       	std	Z+3, r25	; 0x03
   10c06:	82 83       	std	Z+2, r24	; 0x02
   10c08:	ce 01       	movw	r24, r28
   10c0a:	80 96       	adiw	r24, 0x20	; 32
   10c0c:	95 83       	std	Z+5, r25	; 0x05
   10c0e:	84 83       	std	Z+4, r24	; 0x04
   10c10:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
   10c14:	ed b7       	in	r30, 0x3d	; 61
   10c16:	fe b7       	in	r31, 0x3e	; 62
   10c18:	36 96       	adiw	r30, 0x06	; 6
   10c1a:	0f b6       	in	r0, 0x3f	; 63
   10c1c:	f8 94       	cli
   10c1e:	fe bf       	out	0x3e, r31	; 62
   10c20:	0f be       	out	0x3f, r0	; 63
   10c22:	ed bf       	out	0x3d, r30	; 61
   10c24:	81 e0       	ldi	r24, 0x01	; 1
   10c26:	61 e0       	ldi	r22, 0x01	; 1
   10c28:	a8 01       	movw	r20, r16
   10c2a:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
		        sprintf_P(lcdteks,PSTR("ID: %s"),strCardID);             lcd_print(2,1,lcdteks);    //"ID1CCDA565 OD:123456"
   10c2e:	00 d0       	rcall	.+0      	; 0x10c30 <FMenuLocalAccount+0xc20>
   10c30:	00 d0       	rcall	.+0      	; 0x10c32 <FMenuLocalAccount+0xc22>
   10c32:	00 d0       	rcall	.+0      	; 0x10c34 <FMenuLocalAccount+0xc24>
   10c34:	ed b7       	in	r30, 0x3d	; 61
   10c36:	fe b7       	in	r31, 0x3e	; 62
   10c38:	31 96       	adiw	r30, 0x01	; 1
   10c3a:	ad b7       	in	r26, 0x3d	; 61
   10c3c:	be b7       	in	r27, 0x3e	; 62
   10c3e:	12 96       	adiw	r26, 0x02	; 2
   10c40:	1c 93       	st	X, r17
   10c42:	0e 93       	st	-X, r16
   10c44:	11 97       	sbiw	r26, 0x01	; 1
   10c46:	8f e8       	ldi	r24, 0x8F	; 143
   10c48:	90 e2       	ldi	r25, 0x20	; 32
   10c4a:	93 83       	std	Z+3, r25	; 0x03
   10c4c:	82 83       	std	Z+2, r24	; 0x02
   10c4e:	89 e8       	ldi	r24, 0x89	; 137
   10c50:	9b e0       	ldi	r25, 0x0B	; 11
   10c52:	95 83       	std	Z+5, r25	; 0x05
   10c54:	84 83       	std	Z+4, r24	; 0x04
   10c56:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
   10c5a:	ed b7       	in	r30, 0x3d	; 61
   10c5c:	fe b7       	in	r31, 0x3e	; 62
   10c5e:	36 96       	adiw	r30, 0x06	; 6
   10c60:	0f b6       	in	r0, 0x3f	; 63
   10c62:	f8 94       	cli
   10c64:	fe bf       	out	0x3e, r31	; 62
   10c66:	0f be       	out	0x3f, r0	; 63
   10c68:	ed bf       	out	0x3d, r30	; 61
   10c6a:	82 e0       	ldi	r24, 0x02	; 2
   10c6c:	61 e0       	ldi	r22, 0x01	; 1
   10c6e:	a8 01       	movw	r20, r16
   10c70:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
				sprintf_P(lcdteks,PSTR("%s  %s "),strFIP,strProduct);    lcd_print(3,1,lcdteks);    //"P01  Pertamax 500000"
   10c74:	2d b7       	in	r18, 0x3d	; 61
   10c76:	3e b7       	in	r19, 0x3e	; 62
   10c78:	28 50       	subi	r18, 0x08	; 8
   10c7a:	30 40       	sbci	r19, 0x00	; 0
   10c7c:	0f b6       	in	r0, 0x3f	; 63
   10c7e:	f8 94       	cli
   10c80:	3e bf       	out	0x3e, r19	; 62
   10c82:	0f be       	out	0x3f, r0	; 63
   10c84:	2d bf       	out	0x3d, r18	; 61
   10c86:	ed b7       	in	r30, 0x3d	; 61
   10c88:	fe b7       	in	r31, 0x3e	; 62
   10c8a:	31 96       	adiw	r30, 0x01	; 1
   10c8c:	ad b7       	in	r26, 0x3d	; 61
   10c8e:	be b7       	in	r27, 0x3e	; 62
   10c90:	12 96       	adiw	r26, 0x02	; 2
   10c92:	1c 93       	st	X, r17
   10c94:	0e 93       	st	-X, r16
   10c96:	11 97       	sbiw	r26, 0x01	; 1
   10c98:	87 e8       	ldi	r24, 0x87	; 135
   10c9a:	90 e2       	ldi	r25, 0x20	; 32
   10c9c:	93 83       	std	Z+3, r25	; 0x03
   10c9e:	82 83       	std	Z+2, r24	; 0x02
   10ca0:	81 e9       	ldi	r24, 0x91	; 145
   10ca2:	92 e0       	ldi	r25, 0x02	; 2
   10ca4:	95 83       	std	Z+5, r25	; 0x05
   10ca6:	84 83       	std	Z+4, r24	; 0x04
   10ca8:	8e e5       	ldi	r24, 0x5E	; 94
   10caa:	97 e0       	ldi	r25, 0x07	; 7
   10cac:	97 83       	std	Z+7, r25	; 0x07
   10cae:	86 83       	std	Z+6, r24	; 0x06
   10cb0:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
   10cb4:	ed b7       	in	r30, 0x3d	; 61
   10cb6:	fe b7       	in	r31, 0x3e	; 62
   10cb8:	38 96       	adiw	r30, 0x08	; 8
   10cba:	0f b6       	in	r0, 0x3f	; 63
   10cbc:	f8 94       	cli
   10cbe:	fe bf       	out	0x3e, r31	; 62
   10cc0:	0f be       	out	0x3f, r0	; 63
   10cc2:	ed bf       	out	0x3d, r30	; 61
   10cc4:	83 e0       	ldi	r24, 0x03	; 3
   10cc6:	61 e0       	ldi	r22, 0x01	; 1
   10cc8:	a8 01       	movw	r20, r16
   10cca:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
		        if (IsFullAuthorized==True){
   10cce:	80 91 86 02 	lds	r24, 0x0286
   10cd2:	81 30       	cpi	r24, 0x01	; 1
   10cd4:	39 f4       	brne	.+14     	; 0x10ce4 <FMenuLocalAccount+0xcd4>
                    lcd_printf(3,15,PSTR(" Full"));
   10cd6:	83 e0       	ldi	r24, 0x03	; 3
   10cd8:	6f e0       	ldi	r22, 0x0F	; 15
   10cda:	41 e8       	ldi	r20, 0x81	; 129
   10cdc:	50 e2       	ldi	r21, 0x20	; 32
   10cde:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
   10ce2:	23 c0       	rjmp	.+70     	; 0x10d2a <FMenuLocalAccount+0xd1a>
				}
				else {
				    sprintf_P(lcdteks,PSTR("%s "),strBalanceValue);          lcd_print(3,15,lcdteks);   //"[*]Back [0]ESC [#]OK " 
   10ce4:	00 d0       	rcall	.+0      	; 0x10ce6 <FMenuLocalAccount+0xcd6>
   10ce6:	00 d0       	rcall	.+0      	; 0x10ce8 <FMenuLocalAccount+0xcd8>
   10ce8:	00 d0       	rcall	.+0      	; 0x10cea <FMenuLocalAccount+0xcda>
   10cea:	ed b7       	in	r30, 0x3d	; 61
   10cec:	fe b7       	in	r31, 0x3e	; 62
   10cee:	31 96       	adiw	r30, 0x01	; 1
   10cf0:	ad b7       	in	r26, 0x3d	; 61
   10cf2:	be b7       	in	r27, 0x3e	; 62
   10cf4:	12 96       	adiw	r26, 0x02	; 2
   10cf6:	1c 93       	st	X, r17
   10cf8:	0e 93       	st	-X, r16
   10cfa:	11 97       	sbiw	r26, 0x01	; 1
   10cfc:	8d e7       	ldi	r24, 0x7D	; 125
   10cfe:	90 e2       	ldi	r25, 0x20	; 32
   10d00:	93 83       	std	Z+3, r25	; 0x03
   10d02:	82 83       	std	Z+2, r24	; 0x02
   10d04:	8f e1       	ldi	r24, 0x1F	; 31
   10d06:	9c e0       	ldi	r25, 0x0C	; 12
   10d08:	95 83       	std	Z+5, r25	; 0x05
   10d0a:	84 83       	std	Z+4, r24	; 0x04
   10d0c:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
   10d10:	ed b7       	in	r30, 0x3d	; 61
   10d12:	fe b7       	in	r31, 0x3e	; 62
   10d14:	36 96       	adiw	r30, 0x06	; 6
   10d16:	0f b6       	in	r0, 0x3f	; 63
   10d18:	f8 94       	cli
   10d1a:	fe bf       	out	0x3e, r31	; 62
   10d1c:	0f be       	out	0x3f, r0	; 63
   10d1e:	ed bf       	out	0x3d, r30	; 61
   10d20:	83 e0       	ldi	r24, 0x03	; 3
   10d22:	6f e0       	ldi	r22, 0x0F	; 15
   10d24:	a8 01       	movw	r20, r16
   10d26:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
					}
	            lcd_printf(4,1,PSTR("[*]Back [0]ESC [#]OK"));    
   10d2a:	84 e0       	ldi	r24, 0x04	; 4
   10d2c:	61 e0       	ldi	r22, 0x01	; 1
   10d2e:	48 e6       	ldi	r20, 0x68	; 104
   10d30:	50 e2       	ldi	r21, 0x20	; 32
   10d32:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
                stLocalAccount=laDataConfirmInput;
   10d36:	84 e1       	ldi	r24, 0x14	; 20
   10d38:	e4 c9       	rjmp	.-3128   	; 0x10102 <FMenuLocalAccount+0xf2>
                //while(1){};   
		        break;
           case laDataConfirmInput:
                KeyPressed=_key_scan(1);
   10d3a:	81 e0       	ldi	r24, 0x01	; 1
   10d3c:	0e 94 6d a6 	call	0x14cda	; 0x14cda <_key_scan>
                if (KeyPressed==_KEY_CANCEL)stLocalAccount=laOdometer;		        
   10d40:	87 3e       	cpi	r24, 0xE7	; 231
   10d42:	11 f4       	brne	.+4      	; 0x10d48 <FMenuLocalAccount+0xd38>
   10d44:	81 e1       	ldi	r24, 0x11	; 17
   10d46:	dd c9       	rjmp	.-3142   	; 0x10102 <FMenuLocalAccount+0xf2>
				else
				if (KeyPressed==_KEY_ENTER)stLocalAccount=laProceedTransaction;
   10d48:	87 3b       	cpi	r24, 0xB7	; 183
   10d4a:	11 f4       	brne	.+4      	; 0x10d50 <FMenuLocalAccount+0xd40>
   10d4c:	85 e1       	ldi	r24, 0x15	; 21
   10d4e:	d9 c9       	rjmp	.-3150   	; 0x10102 <FMenuLocalAccount+0xf2>
				else
				if (KeyPressed==_KEY_0){
   10d50:	87 3d       	cpi	r24, 0xD7	; 215
   10d52:	09 f0       	breq	.+2      	; 0x10d56 <FMenuLocalAccount+0xd46>
   10d54:	ed c1       	rjmp	.+986    	; 0x11130 <FMenuLocalAccount+0x1120>
				   //ShowCancel
				   TimLocAcc=0;
   10d56:	10 92 ba 01 	sts	0x01BA, r1
                   lcd_clear();
   10d5a:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
				   lcd_printf(1,1,PSTR("Cancel Transaction  "));    //"Cancel Transaction"
   10d5e:	81 e0       	ldi	r24, 0x01	; 1
   10d60:	61 e0       	ldi	r22, 0x01	; 1
   10d62:	43 e5       	ldi	r20, 0x53	; 83
   10d64:	50 e2       	ldi	r21, 0x20	; 32
   10d66:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
   10d6a:	c9 c1       	rjmp	.+914    	; 0x110fe <FMenuLocalAccount+0x10ee>
				   stLocalAccount=laDelayExit;
				   }
		        break;
           case laProceedTransaction:
		        sendMessage58();
   10d6c:	0e 94 00 80 	call	0x10000	; 0x10000 <sendMessage58>
                RemZeroLead(strCardID);
   10d70:	89 e8       	ldi	r24, 0x89	; 137
   10d72:	9b e0       	ldi	r25, 0x0B	; 11
   10d74:	0e 94 51 25 	call	0x4aa2	; 0x4aa2 <RemZeroLead>
                RemZeroLead(strBalanceValue);
   10d78:	bf e1       	ldi	r27, 0x1F	; 31
   10d7a:	eb 2e       	mov	r14, r27
   10d7c:	bc e0       	ldi	r27, 0x0C	; 12
   10d7e:	fb 2e       	mov	r15, r27
   10d80:	c7 01       	movw	r24, r14
   10d82:	0e 94 51 25 	call	0x4aa2	; 0x4aa2 <RemZeroLead>
				sprintf_P(lcdteks,PSTR("P%s %s "),strFIP,strProduct);       lcd_print(1,1,lcdteks);    //"P01  Pertamax 500000"
   10d86:	2d b7       	in	r18, 0x3d	; 61
   10d88:	3e b7       	in	r19, 0x3e	; 62
   10d8a:	28 50       	subi	r18, 0x08	; 8
   10d8c:	30 40       	sbci	r19, 0x00	; 0
   10d8e:	0f b6       	in	r0, 0x3f	; 63
   10d90:	f8 94       	cli
   10d92:	3e bf       	out	0x3e, r19	; 62
   10d94:	0f be       	out	0x3f, r0	; 63
   10d96:	2d bf       	out	0x3d, r18	; 61
   10d98:	ed b7       	in	r30, 0x3d	; 61
   10d9a:	fe b7       	in	r31, 0x3e	; 62
   10d9c:	31 96       	adiw	r30, 0x01	; 1
   10d9e:	8e 01       	movw	r16, r28
   10da0:	04 5f       	subi	r16, 0xF4	; 244
   10da2:	1f 4f       	sbci	r17, 0xFF	; 255
   10da4:	ad b7       	in	r26, 0x3d	; 61
   10da6:	be b7       	in	r27, 0x3e	; 62
   10da8:	12 96       	adiw	r26, 0x02	; 2
   10daa:	1c 93       	st	X, r17
   10dac:	0e 93       	st	-X, r16
   10dae:	11 97       	sbiw	r26, 0x01	; 1
   10db0:	8b e4       	ldi	r24, 0x4B	; 75
   10db2:	90 e2       	ldi	r25, 0x20	; 32
   10db4:	93 83       	std	Z+3, r25	; 0x03
   10db6:	82 83       	std	Z+2, r24	; 0x02
   10db8:	81 e9       	ldi	r24, 0x91	; 145
   10dba:	92 e0       	ldi	r25, 0x02	; 2
   10dbc:	95 83       	std	Z+5, r25	; 0x05
   10dbe:	84 83       	std	Z+4, r24	; 0x04
   10dc0:	8e e5       	ldi	r24, 0x5E	; 94
   10dc2:	97 e0       	ldi	r25, 0x07	; 7
   10dc4:	97 83       	std	Z+7, r25	; 0x07
   10dc6:	86 83       	std	Z+6, r24	; 0x06
   10dc8:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
   10dcc:	ed b7       	in	r30, 0x3d	; 61
   10dce:	fe b7       	in	r31, 0x3e	; 62
   10dd0:	38 96       	adiw	r30, 0x08	; 8
   10dd2:	0f b6       	in	r0, 0x3f	; 63
   10dd4:	f8 94       	cli
   10dd6:	fe bf       	out	0x3e, r31	; 62
   10dd8:	0f be       	out	0x3f, r0	; 63
   10dda:	ed bf       	out	0x3d, r30	; 61
   10ddc:	81 e0       	ldi	r24, 0x01	; 1
   10dde:	61 e0       	ldi	r22, 0x01	; 1
   10de0:	a8 01       	movw	r20, r16
   10de2:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
		        sprintf_P(lcdteks,PSTR("%s"),strBalanceValue);              lcd_print(1,15,lcdteks);   //"ID1CCDA565          " 
   10de6:	00 d0       	rcall	.+0      	; 0x10de8 <FMenuLocalAccount+0xdd8>
   10de8:	00 d0       	rcall	.+0      	; 0x10dea <FMenuLocalAccount+0xdda>
   10dea:	00 d0       	rcall	.+0      	; 0x10dec <FMenuLocalAccount+0xddc>
   10dec:	ed b7       	in	r30, 0x3d	; 61
   10dee:	fe b7       	in	r31, 0x3e	; 62
   10df0:	31 96       	adiw	r30, 0x01	; 1
   10df2:	ad b7       	in	r26, 0x3d	; 61
   10df4:	be b7       	in	r27, 0x3e	; 62
   10df6:	12 96       	adiw	r26, 0x02	; 2
   10df8:	1c 93       	st	X, r17
   10dfa:	0e 93       	st	-X, r16
   10dfc:	11 97       	sbiw	r26, 0x01	; 1
   10dfe:	88 e4       	ldi	r24, 0x48	; 72
   10e00:	90 e2       	ldi	r25, 0x20	; 32
   10e02:	93 83       	std	Z+3, r25	; 0x03
   10e04:	82 83       	std	Z+2, r24	; 0x02
   10e06:	f5 82       	std	Z+5, r15	; 0x05
   10e08:	e4 82       	std	Z+4, r14	; 0x04
   10e0a:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
   10e0e:	ed b7       	in	r30, 0x3d	; 61
   10e10:	fe b7       	in	r31, 0x3e	; 62
   10e12:	36 96       	adiw	r30, 0x06	; 6
   10e14:	0f b6       	in	r0, 0x3f	; 63
   10e16:	f8 94       	cli
   10e18:	fe bf       	out	0x3e, r31	; 62
   10e1a:	0f be       	out	0x3f, r0	; 63
   10e1c:	ed bf       	out	0x3d, r30	; 61
   10e1e:	81 e0       	ldi	r24, 0x01	; 1
   10e20:	6f e0       	ldi	r22, 0x0F	; 15
   10e22:	a8 01       	movw	r20, r16
   10e24:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
                lcd_printf(3,1,PSTR("Mohon Tunggu        "));                                         //"Mohon Tunggu ...    "
   10e28:	83 e0       	ldi	r24, 0x03	; 3
   10e2a:	61 e0       	ldi	r22, 0x01	; 1
   10e2c:	43 e3       	ldi	r20, 0x33	; 51
   10e2e:	50 e2       	ldi	r21, 0x20	; 32
   10e30:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		        lcd_printf(4,1,PSTR("                    "));                                  //"                    "
   10e34:	84 e0       	ldi	r24, 0x04	; 4
   10e36:	61 e0       	ldi	r22, 0x01	; 1
   10e38:	4e e1       	ldi	r20, 0x1E	; 30
   10e3a:	50 e2       	ldi	r21, 0x20	; 32
   10e3c:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
				IsMessage00=False;
   10e40:	10 92 9e 01 	sts	0x019E, r1
				TimLocAcc=0;
   10e44:	10 92 ba 01 	sts	0x01BA, r1
				iLoop=0;iPos=0;iWait=0;
   10e48:	10 92 85 02 	sts	0x0285, r1
   10e4c:	10 92 84 02 	sts	0x0284, r1
   10e50:	10 92 96 02 	sts	0x0296, r1
   10e54:	10 92 95 02 	sts	0x0295, r1
				stLocalAccount=laWaitMessage00;
   10e58:	87 e1       	ldi	r24, 0x17	; 23
   10e5a:	53 c9       	rjmp	.-3418   	; 0x10102 <FMenuLocalAccount+0xf2>
		        break;
           case laWaitMessage00:
                iLoop++;
   10e5c:	80 91 84 02 	lds	r24, 0x0284
   10e60:	90 91 85 02 	lds	r25, 0x0285
   10e64:	01 96       	adiw	r24, 0x01	; 1
   10e66:	90 93 85 02 	sts	0x0285, r25
   10e6a:	80 93 84 02 	sts	0x0284, r24
				if ((iLoop%MSG_WAIT_TIMOUT)==0){
   10e6e:	68 e9       	ldi	r22, 0x98	; 152
   10e70:	7a e3       	ldi	r23, 0x3A	; 58
   10e72:	0e 94 7a aa 	call	0x154f4	; 0x154f4 <__udivmodhi4>
   10e76:	89 2b       	or	r24, r25
   10e78:	e1 f4       	brne	.+56     	; 0x10eb2 <FMenuLocalAccount+0xea2>
				   if (iPos<5){
   10e7a:	60 91 96 02 	lds	r22, 0x0296
   10e7e:	65 30       	cpi	r22, 0x05	; 5
   10e80:	58 f4       	brcc	.+22     	; 0x10e98 <FMenuLocalAccount+0xe88>
				       iPos++;
   10e82:	6f 5f       	subi	r22, 0xFF	; 255
   10e84:	60 93 96 02 	sts	0x0296, r22
					   lcd_xy(3,(14+iPos));_lcd('.');
   10e88:	62 5f       	subi	r22, 0xF2	; 242
   10e8a:	83 e0       	ldi	r24, 0x03	; 3
   10e8c:	0e 94 b3 a4 	call	0x14966	; 0x14966 <lcd_xy>
   10e90:	8e e2       	ldi	r24, 0x2E	; 46
   10e92:	0e 94 8d a4 	call	0x1491a	; 0x1491a <_lcd>
   10e96:	0d c0       	rjmp	.+26     	; 0x10eb2 <FMenuLocalAccount+0xea2>
					   }
				   else{
				       iPos=0;
   10e98:	10 92 96 02 	sts	0x0296, r1
					   lcd_printf(3,(14+iPos),PSTR("       "));
   10e9c:	83 e0       	ldi	r24, 0x03	; 3
   10e9e:	6e e0       	ldi	r22, 0x0E	; 14
   10ea0:	46 e1       	ldi	r20, 0x16	; 22
   10ea2:	50 e2       	ldi	r21, 0x20	; 32
   10ea4:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
					   iWait++;
   10ea8:	80 91 95 02 	lds	r24, 0x0295
   10eac:	8f 5f       	subi	r24, 0xFF	; 255
   10eae:	80 93 95 02 	sts	0x0295, r24
					   }
				}
				if (iWait>5){
   10eb2:	80 91 95 02 	lds	r24, 0x0295
   10eb6:	86 30       	cpi	r24, 0x06	; 6
   10eb8:	50 f0       	brcs	.+20     	; 0x10ece <FMenuLocalAccount+0xebe>
				    stLocalAccount=laConTimout;
   10eba:	84 e0       	ldi	r24, 0x04	; 4
   10ebc:	80 93 5b 01 	sts	0x015B, r24
					TimLocAcc=0;
   10ec0:	10 92 ba 01 	sts	0x01BA, r1
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   10ec4:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   10ec6:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   10ec8:	82 e0       	ldi	r24, 0x02	; 2
   10eca:	80 93 bc 01 	sts	0x01BC, r24
				if (iWait>5){
				    stLocalAccount=laConTimout;
					TimLocAcc=0;
					system_beep(2);
				    }
				if (IsMessage00==True){
   10ece:	80 91 9e 01 	lds	r24, 0x019E
   10ed2:	81 30       	cpi	r24, 0x01	; 1
   10ed4:	09 f0       	breq	.+2      	; 0x10ed8 <FMenuLocalAccount+0xec8>
   10ed6:	2c c1       	rjmp	.+600    	; 0x11130 <FMenuLocalAccount+0x1120>
                    IsMessage00=False;
   10ed8:	10 92 9e 01 	sts	0x019E, r1
				    stLocalAccount=laProcMessage00;
   10edc:	88 e1       	ldi	r24, 0x18	; 24
   10ede:	11 c9       	rjmp	.-3550   	; 0x10102 <FMenuLocalAccount+0xf2>
*/
char procMessage00(){
     char Result,strSend[10];
	 Result=MSG00_NACK;
	 //Message57
	 if((rcv_trans[0]==0x01)&&(transLength==MSG00_LENGTH)){
   10ee0:	80 91 1d 09 	lds	r24, 0x091D
   10ee4:	81 30       	cpi	r24, 0x01	; 1
   10ee6:	51 f4       	brne	.+20     	; 0x10efc <FMenuLocalAccount+0xeec>
   10ee8:	80 91 8b 01 	lds	r24, 0x018B
   10eec:	90 91 8c 01 	lds	r25, 0x018C
   10ef0:	8f 97       	sbiw	r24, 0x2f	; 47
   10ef2:	21 f4       	brne	.+8      	; 0x10efc <FMenuLocalAccount+0xeec>
	     //Reply
		 Result=(CharPosCopy(rcv_trans,37)-'0');
   10ef4:	80 91 42 09 	lds	r24, 0x0942
   10ef8:	80 53       	subi	r24, 0x30	; 48
   10efa:	01 c0       	rjmp	.+2      	; 0x10efe <FMenuLocalAccount+0xeee>
   10efc:	80 e0       	ldi	r24, 0x00	; 0
                    IsMessage00=False;
				    stLocalAccount=laProcMessage00;
					}
		        break;
           case laProcMessage00:
		        LocAccStatus=procMessage00();
   10efe:	80 93 97 02 	sts	0x0297, r24
                lcd_clear();
   10f02:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
		        switch(LocAccStatus){
   10f06:	10 91 97 02 	lds	r17, 0x0297
   10f0a:	11 30       	cpi	r17, 0x01	; 1
   10f0c:	59 f0       	breq	.+22     	; 0x10f24 <FMenuLocalAccount+0xf14>
   10f0e:	11 30       	cpi	r17, 0x01	; 1
   10f10:	20 f0       	brcs	.+8      	; 0x10f1a <FMenuLocalAccount+0xf0a>
   10f12:	13 30       	cpi	r17, 0x03	; 3
   10f14:	09 f0       	breq	.+2      	; 0x10f18 <FMenuLocalAccount+0xf08>
   10f16:	c0 c0       	rjmp	.+384    	; 0x11098 <FMenuLocalAccount+0x1088>
   10f18:	1b c0       	rjmp	.+54     	; 0x10f50 <FMenuLocalAccount+0xf40>
				case MSG00_NACK:
                     lcd_printf(2,1,PSTR("Authorisasi Gagal   "));
   10f1a:	82 e0       	ldi	r24, 0x02	; 2
   10f1c:	61 e0       	ldi	r22, 0x01	; 1
   10f1e:	41 e0       	ldi	r20, 0x01	; 1
   10f20:	50 e2       	ldi	r21, 0x20	; 32
   10f22:	1a c0       	rjmp	.+52     	; 0x10f58 <FMenuLocalAccount+0xf48>
					 system_beep(2); 
					 stLocalAccount=laDelayExit;
				     break;
                case MSG00_ACK:
				     lcd_printf(2,1,PSTR("Authorisasi Berhasil"));
   10f24:	82 e0       	ldi	r24, 0x02	; 2
   10f26:	61 e0       	ldi	r22, 0x01	; 1
   10f28:	4c ee       	ldi	r20, 0xEC	; 236
   10f2a:	5f e1       	ldi	r21, 0x1F	; 31
   10f2c:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
				     LocalAccountFIP[nLocalAccount]=FIP_Used;
   10f30:	90 91 8f 01 	lds	r25, 0x018F
   10f34:	e9 2f       	mov	r30, r25
   10f36:	f0 e0       	ldi	r31, 0x00	; 0
   10f38:	ea 5a       	subi	r30, 0xAA	; 170
   10f3a:	fc 4f       	sbci	r31, 0xFC	; 252
   10f3c:	80 91 88 02 	lds	r24, 0x0288
   10f40:	80 83       	st	Z, r24
					 nLocalAccount++;
   10f42:	9f 5f       	subi	r25, 0xFF	; 255
   10f44:	90 93 8f 01 	sts	0x018F, r25
					 IsViewFillingFIP=True;
   10f48:	10 93 96 01 	sts	0x0196, r17
					 stLocalAccount=laViewStatus;
   10f4c:	86 e1       	ldi	r24, 0x16	; 22
   10f4e:	a2 c0       	rjmp	.+324    	; 0x11094 <FMenuLocalAccount+0x1084>
				     break;
                case MSG00_NO_FIP:
                     lcd_printf(2,1,PSTR("FIP Tidak Siap    "));
   10f50:	82 e0       	ldi	r24, 0x02	; 2
   10f52:	61 e0       	ldi	r22, 0x01	; 1
   10f54:	49 ed       	ldi	r20, 0xD9	; 217
   10f56:	5f e1       	ldi	r21, 0x1F	; 31
   10f58:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   10f5c:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   10f5e:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   10f60:	82 e0       	ldi	r24, 0x02	; 2
   10f62:	80 93 bc 01 	sts	0x01BC, r24
					 stLocalAccount=laViewStatus;
				     break;
                case MSG00_NO_FIP:
                     lcd_printf(2,1,PSTR("FIP Tidak Siap    "));
					 system_beep(2);
					 stLocalAccount=laDelayExit;
   10f66:	8e e1       	ldi	r24, 0x1E	; 30
   10f68:	95 c0       	rjmp	.+298    	; 0x11094 <FMenuLocalAccount+0x1084>
				     break;
				}
				TimLocAcc=0;				
		        break;
           case laViewStatus:
                if (TimLocAcc>20)stLocalAccount=laExitLocAcc;//laDisplayTransaction;
   10f6a:	80 91 ba 01 	lds	r24, 0x01BA
   10f6e:	85 31       	cpi	r24, 0x15	; 21
   10f70:	08 f4       	brcc	.+2      	; 0x10f74 <FMenuLocalAccount+0xf64>
   10f72:	de c0       	rjmp	.+444    	; 0x11130 <FMenuLocalAccount+0x1120>
   10f74:	cb c0       	rjmp	.+406    	; 0x1110c <FMenuLocalAccount+0x10fc>
		        break; 
           case laDisplayTransaction:
		        lcd_clear();
   10f76:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
                sprintf_P(lcdteks,PSTR("P%s %s "),strFIP,strProduct); lcd_print(1,1,lcdteks);    //"P01  Pertamax 500000"
   10f7a:	2d b7       	in	r18, 0x3d	; 61
   10f7c:	3e b7       	in	r19, 0x3e	; 62
   10f7e:	28 50       	subi	r18, 0x08	; 8
   10f80:	30 40       	sbci	r19, 0x00	; 0
   10f82:	0f b6       	in	r0, 0x3f	; 63
   10f84:	f8 94       	cli
   10f86:	3e bf       	out	0x3e, r19	; 62
   10f88:	0f be       	out	0x3f, r0	; 63
   10f8a:	2d bf       	out	0x3d, r18	; 61
   10f8c:	ed b7       	in	r30, 0x3d	; 61
   10f8e:	fe b7       	in	r31, 0x3e	; 62
   10f90:	31 96       	adiw	r30, 0x01	; 1
   10f92:	ac e0       	ldi	r26, 0x0C	; 12
   10f94:	ea 2e       	mov	r14, r26
   10f96:	f1 2c       	mov	r15, r1
   10f98:	ec 0e       	add	r14, r28
   10f9a:	fd 1e       	adc	r15, r29
   10f9c:	ad b7       	in	r26, 0x3d	; 61
   10f9e:	be b7       	in	r27, 0x3e	; 62
   10fa0:	12 96       	adiw	r26, 0x02	; 2
   10fa2:	fc 92       	st	X, r15
   10fa4:	ee 92       	st	-X, r14
   10fa6:	11 97       	sbiw	r26, 0x01	; 1
   10fa8:	81 ed       	ldi	r24, 0xD1	; 209
   10faa:	9f e1       	ldi	r25, 0x1F	; 31
   10fac:	93 83       	std	Z+3, r25	; 0x03
   10fae:	82 83       	std	Z+2, r24	; 0x02
   10fb0:	81 e9       	ldi	r24, 0x91	; 145
   10fb2:	92 e0       	ldi	r25, 0x02	; 2
   10fb4:	95 83       	std	Z+5, r25	; 0x05
   10fb6:	84 83       	std	Z+4, r24	; 0x04
   10fb8:	8e e5       	ldi	r24, 0x5E	; 94
   10fba:	97 e0       	ldi	r25, 0x07	; 7
   10fbc:	97 83       	std	Z+7, r25	; 0x07
   10fbe:	86 83       	std	Z+6, r24	; 0x06
   10fc0:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
   10fc4:	ed b7       	in	r30, 0x3d	; 61
   10fc6:	fe b7       	in	r31, 0x3e	; 62
   10fc8:	38 96       	adiw	r30, 0x08	; 8
   10fca:	0f b6       	in	r0, 0x3f	; 63
   10fcc:	f8 94       	cli
   10fce:	fe bf       	out	0x3e, r31	; 62
   10fd0:	0f be       	out	0x3f, r0	; 63
   10fd2:	ed bf       	out	0x3d, r30	; 61
   10fd4:	81 e0       	ldi	r24, 0x01	; 1
   10fd6:	61 e0       	ldi	r22, 0x01	; 1
   10fd8:	a7 01       	movw	r20, r14
   10fda:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
		        sprintf_P(lcdteks,PSTR("%s"),strBalanceValue);        lcd_print(1,15,lcdteks);   //"ID1CCDA565          " 
   10fde:	00 d0       	rcall	.+0      	; 0x10fe0 <FMenuLocalAccount+0xfd0>
   10fe0:	00 d0       	rcall	.+0      	; 0x10fe2 <FMenuLocalAccount+0xfd2>
   10fe2:	00 d0       	rcall	.+0      	; 0x10fe4 <FMenuLocalAccount+0xfd4>
   10fe4:	ed b7       	in	r30, 0x3d	; 61
   10fe6:	fe b7       	in	r31, 0x3e	; 62
   10fe8:	31 96       	adiw	r30, 0x01	; 1
   10fea:	ad b7       	in	r26, 0x3d	; 61
   10fec:	be b7       	in	r27, 0x3e	; 62
   10fee:	12 96       	adiw	r26, 0x02	; 2
   10ff0:	fc 92       	st	X, r15
   10ff2:	ee 92       	st	-X, r14
   10ff4:	11 97       	sbiw	r26, 0x01	; 1
   10ff6:	8e ec       	ldi	r24, 0xCE	; 206
   10ff8:	9f e1       	ldi	r25, 0x1F	; 31
   10ffa:	93 83       	std	Z+3, r25	; 0x03
   10ffc:	82 83       	std	Z+2, r24	; 0x02
   10ffe:	8f e1       	ldi	r24, 0x1F	; 31
   11000:	9c e0       	ldi	r25, 0x0C	; 12
   11002:	95 83       	std	Z+5, r25	; 0x05
   11004:	84 83       	std	Z+4, r24	; 0x04
   11006:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
   1100a:	ed b7       	in	r30, 0x3d	; 61
   1100c:	fe b7       	in	r31, 0x3e	; 62
   1100e:	36 96       	adiw	r30, 0x06	; 6
   11010:	0f b6       	in	r0, 0x3f	; 63
   11012:	f8 94       	cli
   11014:	fe bf       	out	0x3e, r31	; 62
   11016:	0f be       	out	0x3f, r0	; 63
   11018:	ed bf       	out	0x3d, r30	; 61
   1101a:	81 e0       	ldi	r24, 0x01	; 1
   1101c:	6f e0       	ldi	r22, 0x0F	; 15
   1101e:	a7 01       	movw	r20, r14
   11020:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
                RemSpaceLead(strCardID);
   11024:	09 e8       	ldi	r16, 0x89	; 137
   11026:	1b e0       	ldi	r17, 0x0B	; 11
   11028:	c8 01       	movw	r24, r16
   1102a:	0e 94 99 25 	call	0x4b32	; 0x4b32 <RemSpaceLead>
				sprintf_P(lcdteks,PSTR("ID: %s"),strCardID);          lcd_print(2,1,lcdteks);
   1102e:	00 d0       	rcall	.+0      	; 0x11030 <FMenuLocalAccount+0x1020>
   11030:	00 d0       	rcall	.+0      	; 0x11032 <FMenuLocalAccount+0x1022>
   11032:	00 d0       	rcall	.+0      	; 0x11034 <FMenuLocalAccount+0x1024>
   11034:	ed b7       	in	r30, 0x3d	; 61
   11036:	fe b7       	in	r31, 0x3e	; 62
   11038:	31 96       	adiw	r30, 0x01	; 1
   1103a:	ad b7       	in	r26, 0x3d	; 61
   1103c:	be b7       	in	r27, 0x3e	; 62
   1103e:	12 96       	adiw	r26, 0x02	; 2
   11040:	fc 92       	st	X, r15
   11042:	ee 92       	st	-X, r14
   11044:	11 97       	sbiw	r26, 0x01	; 1
   11046:	87 ec       	ldi	r24, 0xC7	; 199
   11048:	9f e1       	ldi	r25, 0x1F	; 31
   1104a:	93 83       	std	Z+3, r25	; 0x03
   1104c:	82 83       	std	Z+2, r24	; 0x02
   1104e:	15 83       	std	Z+5, r17	; 0x05
   11050:	04 83       	std	Z+4, r16	; 0x04
   11052:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
   11056:	ed b7       	in	r30, 0x3d	; 61
   11058:	fe b7       	in	r31, 0x3e	; 62
   1105a:	36 96       	adiw	r30, 0x06	; 6
   1105c:	0f b6       	in	r0, 0x3f	; 63
   1105e:	f8 94       	cli
   11060:	fe bf       	out	0x3e, r31	; 62
   11062:	0f be       	out	0x3f, r0	; 63
   11064:	ed bf       	out	0x3d, r30	; 61
   11066:	82 e0       	ldi	r24, 0x02	; 2
   11068:	61 e0       	ldi	r22, 0x01	; 1
   1106a:	a7 01       	movw	r20, r14
   1106c:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
				TimLocAcc=0;
   11070:	10 92 ba 01 	sts	0x01BA, r1
		        IsCompleteFilling=False;
   11074:	10 92 a9 01 	sts	0x01A9, r1
				stLocalAccount=laWaitFilling;
   11078:	8d e1       	ldi	r24, 0x1D	; 29
   1107a:	43 c8       	rjmp	.-3962   	; 0x10102 <FMenuLocalAccount+0xf2>
		        break; 
           case laWaitFilling:
				if ((IsCompleteFilling==True)||(TimLocAcc>FILLING_TIMOUT)){
   1107c:	80 91 a9 01 	lds	r24, 0x01A9
   11080:	81 30       	cpi	r24, 0x01	; 1
   11082:	29 f0       	breq	.+10     	; 0x1108e <FMenuLocalAccount+0x107e>
   11084:	80 91 ba 01 	lds	r24, 0x01BA
   11088:	8b 30       	cpi	r24, 0x0B	; 11
   1108a:	08 f4       	brcc	.+2      	; 0x1108e <FMenuLocalAccount+0x107e>
   1108c:	51 c0       	rjmp	.+162    	; 0x11130 <FMenuLocalAccount+0x1120>
				    IsCompleteFilling=False;
   1108e:	10 92 a9 01 	sts	0x01A9, r1
				    stLocalAccount=laSuccessTransaction;
   11092:	89 e1       	ldi	r24, 0x19	; 25
   11094:	80 93 5b 01 	sts	0x015B, r24
					TimLocAcc=0;
   11098:	10 92 ba 01 	sts	0x01BA, r1
   1109c:	49 c0       	rjmp	.+146    	; 0x11130 <FMenuLocalAccount+0x1120>
					}
		        break;
           case laSuccessTransaction:
				lcd_clear();lcd_printf(2,1,PSTR("Transaksi Selesai"));
   1109e:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
   110a2:	82 e0       	ldi	r24, 0x02	; 2
   110a4:	61 e0       	ldi	r22, 0x01	; 1
   110a6:	45 eb       	ldi	r20, 0xB5	; 181
   110a8:	5f e1       	ldi	r21, 0x1F	; 31
   110aa:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
				//Show Status FIP
				sprintf_P(lcdteks,PSTR("Fueling @FIP:#%d"),FIP_Used);
   110ae:	00 d0       	rcall	.+0      	; 0x110b0 <FMenuLocalAccount+0x10a0>
   110b0:	00 d0       	rcall	.+0      	; 0x110b2 <FMenuLocalAccount+0x10a2>
   110b2:	00 d0       	rcall	.+0      	; 0x110b4 <FMenuLocalAccount+0x10a4>
   110b4:	ed b7       	in	r30, 0x3d	; 61
   110b6:	fe b7       	in	r31, 0x3e	; 62
   110b8:	31 96       	adiw	r30, 0x01	; 1
   110ba:	8e 01       	movw	r16, r28
   110bc:	04 5f       	subi	r16, 0xF4	; 244
   110be:	1f 4f       	sbci	r17, 0xFF	; 255
   110c0:	ad b7       	in	r26, 0x3d	; 61
   110c2:	be b7       	in	r27, 0x3e	; 62
   110c4:	12 96       	adiw	r26, 0x02	; 2
   110c6:	1c 93       	st	X, r17
   110c8:	0e 93       	st	-X, r16
   110ca:	11 97       	sbiw	r26, 0x01	; 1
   110cc:	84 ea       	ldi	r24, 0xA4	; 164
   110ce:	9f e1       	ldi	r25, 0x1F	; 31
   110d0:	93 83       	std	Z+3, r25	; 0x03
   110d2:	82 83       	std	Z+2, r24	; 0x02
   110d4:	80 91 88 02 	lds	r24, 0x0288
   110d8:	84 83       	std	Z+4, r24	; 0x04
   110da:	15 82       	std	Z+5, r1	; 0x05
   110dc:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
				lcd_print(3,1,lcdteks);
   110e0:	ed b7       	in	r30, 0x3d	; 61
   110e2:	fe b7       	in	r31, 0x3e	; 62
   110e4:	36 96       	adiw	r30, 0x06	; 6
   110e6:	0f b6       	in	r0, 0x3f	; 63
   110e8:	f8 94       	cli
   110ea:	fe bf       	out	0x3e, r31	; 62
   110ec:	0f be       	out	0x3f, r0	; 63
   110ee:	ed bf       	out	0x3d, r30	; 61
   110f0:	83 e0       	ldi	r24, 0x03	; 3
   110f2:	61 e0       	ldi	r22, 0x01	; 1
   110f4:	a8 01       	movw	r20, r16
   110f6:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>

				TimLocAcc=0;
				stLocalAccount=laDelayExit;
		        break;
           case laFailedTransaction:
		        TimLocAcc=0;
   110fa:	10 92 ba 01 	sts	0x01BA, r1
		        //Show Failed Report
				stLocalAccount=laDelayExit;
   110fe:	8e e1       	ldi	r24, 0x1E	; 30
   11100:	0c 94 81 80 	jmp	0x10102	; 0x10102 <FMenuLocalAccount+0xf2>
		        break;
           case laDelayExit:
		        if (TimLocAcc>15)stLocalAccount=laExitLocAcc;
   11104:	80 91 ba 01 	lds	r24, 0x01BA
   11108:	80 31       	cpi	r24, 0x10	; 16
   1110a:	90 f0       	brcs	.+36     	; 0x11130 <FMenuLocalAccount+0x1120>
   1110c:	8f e1       	ldi	r24, 0x1F	; 31
   1110e:	0c 94 81 80 	jmp	0x10102	; 0x10102 <FMenuLocalAccount+0xf2>
		        break;
           case laExitLocAcc:
		        Result=MENU_DONE;
				ClearMem(strOdometer);
   11112:	83 ec       	ldi	r24, 0xC3	; 195
   11114:	93 e0       	ldi	r25, 0x03	; 3
   11116:	0e 94 68 a5 	call	0x14ad0	; 0x14ad0 <ClearMem>
	            ClearMem(strLicPlate);
   1111a:	8a ef       	ldi	r24, 0xFA	; 250
   1111c:	98 e0       	ldi	r25, 0x08	; 8
   1111e:	0e 94 68 a5 	call	0x14ad0	; 0x14ad0 <ClearMem>
				stLocalAccount=laInit;
   11122:	81 e0       	ldi	r24, 0x01	; 1
   11124:	80 93 5b 01 	sts	0x015B, r24
				lcd_clear();
   11128:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
   1112c:	81 e0       	ldi	r24, 0x01	; 1
   1112e:	01 c0       	rjmp	.+2      	; 0x11132 <FMenuLocalAccount+0x1122>
   11130:	80 e0       	ldi	r24, 0x00	; 0
		        break;
	       }//EndSwitch
    return Result;
}
   11132:	e4 96       	adiw	r28, 0x34	; 52
   11134:	0f b6       	in	r0, 0x3f	; 63
   11136:	f8 94       	cli
   11138:	de bf       	out	0x3e, r29	; 62
   1113a:	0f be       	out	0x3f, r0	; 63
   1113c:	cd bf       	out	0x3d, r28	; 61
   1113e:	cf 91       	pop	r28
   11140:	df 91       	pop	r29
   11142:	1f 91       	pop	r17
   11144:	0f 91       	pop	r16
   11146:	ff 90       	pop	r15
   11148:	ef 90       	pop	r14
   1114a:	df 90       	pop	r13
   1114c:	cf 90       	pop	r12
   1114e:	bf 90       	pop	r11
   11150:	af 90       	pop	r10
   11152:	9f 90       	pop	r9
   11154:	8f 90       	pop	r8
   11156:	7f 90       	pop	r7
   11158:	6f 90       	pop	r6
   1115a:	08 95       	ret

0001115c <sendMessage32>:
	sprintf_P(strSend,PSTR("%s%s"),strRef3,strRef4);
    uart_print(1, 0,strSend);
	sprintf_P(strSend,PSTR("F968CFFB"));
    uart_print(1, 0,strSend);
	uart(1, 1,0x02);
*/IFTSendMessage(MSG_32);
   1115c:	82 e3       	ldi	r24, 0x32	; 50
   1115e:	0e 94 55 7a 	call	0xf4aa	; 0xf4aa <IFTSendMessage>
}
   11162:	08 95       	ret

00011164 <FMenuChangeMOP>:
	      break;
	 }
   return Result;
}

char FMenuChangeMOP(){
   11164:	af 92       	push	r10
   11166:	bf 92       	push	r11
   11168:	cf 92       	push	r12
   1116a:	df 92       	push	r13
   1116c:	ef 92       	push	r14
   1116e:	ff 92       	push	r15
   11170:	0f 93       	push	r16
   11172:	1f 93       	push	r17
   11174:	df 93       	push	r29
   11176:	cf 93       	push	r28
   11178:	cd b7       	in	r28, 0x3d	; 61
   1117a:	de b7       	in	r29, 0x3e	; 62
   1117c:	a3 97       	sbiw	r28, 0x23	; 35
   1117e:	0f b6       	in	r0, 0x3f	; 63
   11180:	f8 94       	cli
   11182:	de bf       	out	0x3e, r29	; 62
   11184:	0f be       	out	0x3f, r0	; 63
   11186:	cd bf       	out	0x3d, r28	; 61
       char lcdteks[20],i,msgResult;       
	   char strBankName[11],strSurcharge[4],Result;
       char uiResult,KeyPressed=0,KeyChar,FIPResult;

     Result=MENU_NONE; 
	 switch(stChangeMOP){
   11188:	80 91 61 02 	lds	r24, 0x0261
   1118c:	e8 2f       	mov	r30, r24
   1118e:	f0 e0       	ldi	r31, 0x00	; 0
   11190:	ee 31       	cpi	r30, 0x1E	; 30
   11192:	f1 05       	cpc	r31, r1
   11194:	08 f0       	brcs	.+2      	; 0x11198 <FMenuChangeMOP+0x34>
   11196:	f9 c3       	rjmp	.+2034   	; 0x1198a <FMenuChangeMOP+0x826>
   11198:	e1 55       	subi	r30, 0x51	; 81
   1119a:	ff 4f       	sbci	r31, 0xFF	; 255
   1119c:	ee 0f       	add	r30, r30
   1119e:	ff 1f       	adc	r31, r31
   111a0:	05 90       	lpm	r0, Z+
   111a2:	f4 91       	lpm	r31, Z+
   111a4:	e0 2d       	mov	r30, r0
   111a6:	09 94       	ijmp
	 case cmInit:
	      MOPType=PAY_NONE;
   111a8:	85 e0       	ldi	r24, 0x05	; 5
   111aa:	80 93 b8 01 	sts	0x01B8, r24
   111ae:	3a c1       	rjmp	.+628    	; 0x11424 <FMenuChangeMOP+0x2c0>
		  stChangeMOP=cmDisplayMOPOption;
	      break;
	 case cmDisplayMOPOption: //12345678901234567890
	      lcd_clear();
   111b0:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
	      lcd_printf(1,1,PSTR("   Select Payment   "));
   111b4:	81 e0       	ldi	r24, 0x01	; 1
   111b6:	61 e0       	ldi	r22, 0x01	; 1
   111b8:	45 e0       	ldi	r20, 0x05	; 5
   111ba:	5c e1       	ldi	r21, 0x1C	; 28
   111bc:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
	      lcd_printf(2,1,PSTR("1.Account 3.Voucher "));
   111c0:	82 e0       	ldi	r24, 0x02	; 2
   111c2:	61 e0       	ldi	r22, 0x01	; 1
   111c4:	40 ef       	ldi	r20, 0xF0	; 240
   111c6:	5b e1       	ldi	r21, 0x1B	; 27
   111c8:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
	      lcd_printf(3,1,PSTR("2.Bank    4.PumpTest"));
   111cc:	83 e0       	ldi	r24, 0x03	; 3
   111ce:	61 e0       	ldi	r22, 0x01	; 1
   111d0:	4b ed       	ldi	r20, 0xDB	; 219
   111d2:	5b e1       	ldi	r21, 0x1B	; 27
   111d4:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
	      lcd_printf(4,1,PSTR("[*]Back             "));
   111d8:	84 e0       	ldi	r24, 0x04	; 4
   111da:	61 e0       	ldi	r22, 0x01	; 1
   111dc:	46 ec       	ldi	r20, 0xC6	; 198
   111de:	5b e1       	ldi	r21, 0x1B	; 27
   111e0:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
          stChangeMOP=cmInputMOP;		 
   111e4:	82 e0       	ldi	r24, 0x02	; 2
   111e6:	9e c1       	rjmp	.+828    	; 0x11524 <FMenuChangeMOP+0x3c0>
		  break;
	 case cmInputMOP:
	      KeyPressed=_key_scan(1);
   111e8:	81 e0       	ldi	r24, 0x01	; 1
   111ea:	0e 94 6d a6 	call	0x14cda	; 0x14cda <_key_scan>
   111ee:	18 2f       	mov	r17, r24
		  KeyChar=_key_btn(KeyPressed);
   111f0:	0e 94 ce a5 	call	0x14b9c	; 0x14b9c <_key_btn>
   111f4:	98 2f       	mov	r25, r24
		  if ((KeyChar>='1')&&(KeyChar<='4')){
   111f6:	81 53       	subi	r24, 0x31	; 49
   111f8:	84 30       	cpi	r24, 0x04	; 4
   111fa:	f0 f4       	brcc	.+60     	; 0x11238 <FMenuChangeMOP+0xd4>
              switch(KeyChar){
   111fc:	92 33       	cpi	r25, 0x32	; 50
   111fe:	61 f0       	breq	.+24     	; 0x11218 <FMenuChangeMOP+0xb4>
   11200:	93 33       	cpi	r25, 0x33	; 51
   11202:	18 f4       	brcc	.+6      	; 0x1120a <FMenuChangeMOP+0xa6>
   11204:	91 33       	cpi	r25, 0x31	; 49
   11206:	c1 f4       	brne	.+48     	; 0x11238 <FMenuChangeMOP+0xd4>
   11208:	05 c0       	rjmp	.+10     	; 0x11214 <FMenuChangeMOP+0xb0>
   1120a:	93 33       	cpi	r25, 0x33	; 51
   1120c:	51 f0       	breq	.+20     	; 0x11222 <FMenuChangeMOP+0xbe>
   1120e:	94 33       	cpi	r25, 0x34	; 52
   11210:	99 f4       	brne	.+38     	; 0x11238 <FMenuChangeMOP+0xd4>
   11212:	0c c0       	rjmp	.+24     	; 0x1122c <FMenuChangeMOP+0xc8>
		        case '1':MOPType=PAY_ACCOUNT; stChangeMOP=cmSelectFIP;         break;
   11214:	81 e0       	ldi	r24, 0x01	; 1
   11216:	0b c0       	rjmp	.+22     	; 0x1122e <FMenuChangeMOP+0xca>
		        case '2':MOPType=PAY_BANK;    stChangeMOP=cmSelectBankName;    break;
   11218:	82 e0       	ldi	r24, 0x02	; 2
   1121a:	80 93 b8 01 	sts	0x01B8, r24
   1121e:	8b e0       	ldi	r24, 0x0B	; 11
   11220:	09 c0       	rjmp	.+18     	; 0x11234 <FMenuChangeMOP+0xd0>
		        case '3':MOPType=PAY_VOUCHER; stChangeMOP=cmDispInputVoucher;  break;
   11222:	83 e0       	ldi	r24, 0x03	; 3
   11224:	80 93 b8 01 	sts	0x01B8, r24
   11228:	8f e0       	ldi	r24, 0x0F	; 15
   1122a:	04 c0       	rjmp	.+8      	; 0x11234 <FMenuChangeMOP+0xd0>
		        case '4':MOPType=PAY_PUMPTEST;stChangeMOP=cmSelectFIP;         break;
   1122c:	84 e0       	ldi	r24, 0x04	; 4
   1122e:	80 93 b8 01 	sts	0x01B8, r24
   11232:	89 e0       	ldi	r24, 0x09	; 9
   11234:	80 93 61 02 	sts	0x0261, r24
		     }
		  }
		  if (KeyPressed==_KEY_CANCEL) stChangeMOP=cmExitChangeMOP;
   11238:	17 3e       	cpi	r17, 0xE7	; 231
   1123a:	09 f0       	breq	.+2      	; 0x1123e <FMenuChangeMOP+0xda>
   1123c:	a6 c3       	rjmp	.+1868   	; 0x1198a <FMenuChangeMOP+0x826>
   1123e:	9d c3       	rjmp	.+1850   	; 0x1197a <FMenuChangeMOP+0x816>
	      break;
	 case cmDispInputVoucher://Enter Voucher number
          lcd_clear();
   11240:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
		  lcd_printf(1,1,PSTR("Kode Voucher"));
   11244:	81 e0       	ldi	r24, 0x01	; 1
   11246:	61 e0       	ldi	r22, 0x01	; 1
   11248:	49 eb       	ldi	r20, 0xB9	; 185
   1124a:	5b e1       	ldi	r21, 0x1B	; 27
   1124c:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  lcd_printf(2,1,PSTR("_"));
   11250:	82 e0       	ldi	r24, 0x02	; 2
   11252:	61 e0       	ldi	r22, 0x01	; 1
   11254:	47 eb       	ldi	r20, 0xB7	; 183
   11256:	5b e1       	ldi	r21, 0x1B	; 27
   11258:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
   1125c:	84 e0       	ldi	r24, 0x04	; 4
   1125e:	61 e0       	ldi	r22, 0x01	; 1
   11260:	42 ea       	ldi	r20, 0xA2	; 162
   11262:	5b e1       	ldi	r21, 0x1B	; 27
   11264:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
   11268:	ec e3       	ldi	r30, 0x3C	; 60
   1126a:	fc e0       	ldi	r31, 0x0C	; 12
}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
	     strMemory[i]=data;
   1126c:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
   1126e:	8c e0       	ldi	r24, 0x0C	; 12
   11270:	e1 35       	cpi	r30, 0x51	; 81
   11272:	f8 07       	cpc	r31, r24
   11274:	d9 f7       	brne	.-10     	; 0x1126c <FMenuChangeMOP+0x108>
          lcd_clear();
		  lcd_printf(1,1,PSTR("Kode Voucher"));
		  lcd_printf(2,1,PSTR("_"));
		  lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
		  FillChar(strVoucherNum,sizeof(strVoucherNum),0);
          stChangeMOP=cmInputVoucher;		  
   11276:	87 e0       	ldi	r24, 0x07	; 7
   11278:	55 c1       	rjmp	.+682    	; 0x11524 <FMenuChangeMOP+0x3c0>
	      break;
     case cmInputVoucher:
          uiResult=UserInput(UI_NUMBER_R,2,1,strVoucherNum,0,13);
   1127a:	81 e0       	ldi	r24, 0x01	; 1
   1127c:	62 e0       	ldi	r22, 0x02	; 2
   1127e:	41 e0       	ldi	r20, 0x01	; 1
   11280:	2c e3       	ldi	r18, 0x3C	; 60
   11282:	3c e0       	ldi	r19, 0x0C	; 12
   11284:	00 e0       	ldi	r16, 0x00	; 0
   11286:	10 e0       	ldi	r17, 0x00	; 0
   11288:	5d e0       	ldi	r21, 0x0D	; 13
   1128a:	e5 2e       	mov	r14, r21
   1128c:	0e 94 dc 67 	call	0xcfb8	; 0xcfb8 <UserInput>
	      if (uiResult==USER_OK){
   11290:	83 30       	cpi	r24, 0x03	; 3
   11292:	11 f4       	brne	.+4      	; 0x11298 <FMenuChangeMOP+0x134>
		     stChangeMOP=cmSelectFIP;
   11294:	89 e0       	ldi	r24, 0x09	; 9
   11296:	46 c1       	rjmp	.+652    	; 0x11524 <FMenuChangeMOP+0x3c0>
			 }
		  else
	      if (uiResult==USER_CANCEL)stChangeMOP=cmDisplayMOPOption;
   11298:	81 30       	cpi	r24, 0x01	; 1
   1129a:	09 f4       	brne	.+2      	; 0x1129e <FMenuChangeMOP+0x13a>
   1129c:	43 c1       	rjmp	.+646    	; 0x11524 <FMenuChangeMOP+0x3c0>
		  else
		  if (uiResult==USER_ENTRY)lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
   1129e:	84 30       	cpi	r24, 0x04	; 4
   112a0:	21 f4       	brne	.+8      	; 0x112aa <FMenuChangeMOP+0x146>
   112a2:	61 e0       	ldi	r22, 0x01	; 1
   112a4:	4d e8       	ldi	r20, 0x8D	; 141
   112a6:	5b e1       	ldi	r21, 0x1B	; 27
   112a8:	25 c1       	rjmp	.+586    	; 0x114f4 <FMenuChangeMOP+0x390>
		  else
		  if (uiResult==USER_NO_DATA)lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
   112aa:	85 30       	cpi	r24, 0x05	; 5
   112ac:	09 f0       	breq	.+2      	; 0x112b0 <FMenuChangeMOP+0x14c>
   112ae:	6d c3       	rjmp	.+1754   	; 0x1198a <FMenuChangeMOP+0x826>
   112b0:	84 e0       	ldi	r24, 0x04	; 4
   112b2:	61 e0       	ldi	r22, 0x01	; 1
   112b4:	48 e7       	ldi	r20, 0x78	; 120
   112b6:	5b e1       	ldi	r21, 0x1B	; 27
   112b8:	1d c1       	rjmp	.+570    	; 0x114f4 <FMenuChangeMOP+0x390>
	      break;
	 case cmSelectFIP:
	      FIPResult=menu_FIP(&FIP_Used,strFIP_ID);
   112ba:	80 e6       	ldi	r24, 0x60	; 96
   112bc:	92 e0       	ldi	r25, 0x02	; 2
   112be:	69 eb       	ldi	r22, 0xB9	; 185
   112c0:	77 e0       	ldi	r23, 0x07	; 7
   112c2:	0e 94 5b 55 	call	0xaab6	; 0xaab6 <menu_FIP>
		  if (FIPResult==FIP_DONE){
   112c6:	88 23       	and	r24, r24
   112c8:	11 f4       	brne	.+4      	; 0x112ce <FMenuChangeMOP+0x16a>
		      //sprintf_P(strFIP_ID,PSTR("%.2d"),FIP_Used);
		      stChangeMOP=cmFlowFIP;
   112ca:	8e e0       	ldi	r24, 0x0E	; 14
   112cc:	2b c1       	rjmp	.+598    	; 0x11524 <FMenuChangeMOP+0x3c0>
		  }
		  else
		  if (FIPResult==FIP_CANCEL){
   112ce:	82 30       	cpi	r24, 0x02	; 2
   112d0:	09 f0       	breq	.+2      	; 0x112d4 <FMenuChangeMOP+0x170>
   112d2:	5b c3       	rjmp	.+1718   	; 0x1198a <FMenuChangeMOP+0x826>
		      if (MOPType==PAY_ACCOUNT)stChangeMOP=cmDisplayMOPOption;
   112d4:	80 91 b8 01 	lds	r24, 0x01B8
   112d8:	81 30       	cpi	r24, 0x01	; 1
   112da:	09 f4       	brne	.+2      	; 0x112de <FMenuChangeMOP+0x17a>
   112dc:	23 c1       	rjmp	.+582    	; 0x11524 <FMenuChangeMOP+0x3c0>
		      if (MOPType==PAY_BANK)stChangeMOP=cmSelectBankName;
   112de:	82 30       	cpi	r24, 0x02	; 2
   112e0:	09 f4       	brne	.+2      	; 0x112e4 <FMenuChangeMOP+0x180>
   112e2:	f9 c0       	rjmp	.+498    	; 0x114d6 <FMenuChangeMOP+0x372>
		      if (MOPType==PAY_VOUCHER)stChangeMOP=cmDispInputVoucher;
   112e4:	83 30       	cpi	r24, 0x03	; 3
   112e6:	11 f4       	brne	.+4      	; 0x112ec <FMenuChangeMOP+0x188>
   112e8:	8f e0       	ldi	r24, 0x0F	; 15
   112ea:	1c c1       	rjmp	.+568    	; 0x11524 <FMenuChangeMOP+0x3c0>
		      if (MOPType==PAY_PUMPTEST)stChangeMOP=cmDisplayMOPOption;		  
   112ec:	84 30       	cpi	r24, 0x04	; 4
   112ee:	09 f4       	brne	.+2      	; 0x112f2 <FMenuChangeMOP+0x18e>
   112f0:	99 c0       	rjmp	.+306    	; 0x11424 <FMenuChangeMOP+0x2c0>
   112f2:	4b c3       	rjmp	.+1686   	; 0x1198a <FMenuChangeMOP+0x826>
     case cmSelectFIPInput:
		
	      break;
		  //Load Bank Information
	 case cmSelectBankName:
	      lcd_clear();
   112f4:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
		  lcd_printf(1,1,PSTR("Select Bank"));
   112f8:	81 e0       	ldi	r24, 0x01	; 1
   112fa:	61 e0       	ldi	r22, 0x01	; 1
   112fc:	4c e6       	ldi	r20, 0x6C	; 108
   112fe:	5b e1       	ldi	r21, 0x1B	; 27
   11300:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  iLoop=0;
	      for(iLoop=0;iLoop<4;iLoop++){
   11304:	10 92 5c 02 	sts	0x025C, r1
   11308:	10 92 5b 02 	sts	0x025B, r1
			  eeprom_read_block((void*) &strBankName, (const void*) &DefBankName[iLoop], 11);
   1130c:	8e 01       	movw	r16, r28
   1130e:	0b 5f       	subi	r16, 0xFB	; 251
   11310:	1f 4f       	sbci	r17, 0xFF	; 255
   11312:	9b e0       	ldi	r25, 0x0B	; 11
   11314:	a9 2e       	mov	r10, r25
   11316:	b1 2c       	mov	r11, r1
			  if (strlen(strBankName<=10)){
			     sprintf_P(lcdteks,PSTR("%d.%s"),(iLoop+1),strBankName);
   11318:	80 e1       	ldi	r24, 0x10	; 16
   1131a:	e8 2e       	mov	r14, r24
   1131c:	f1 2c       	mov	r15, r1
   1131e:	ec 0e       	add	r14, r28
   11320:	fd 1e       	adc	r15, r29
   11322:	b6 e6       	ldi	r27, 0x66	; 102
   11324:	cb 2e       	mov	r12, r27
   11326:	bb e1       	ldi	r27, 0x1B	; 27
   11328:	db 2e       	mov	r13, r27
   1132a:	5b c0       	rjmp	.+182    	; 0x113e2 <FMenuChangeMOP+0x27e>
	 case cmSelectBankName:
	      lcd_clear();
		  lcd_printf(1,1,PSTR("Select Bank"));
		  iLoop=0;
	      for(iLoop=0;iLoop<4;iLoop++){
			  eeprom_read_block((void*) &strBankName, (const void*) &DefBankName[iLoop], 11);
   1132c:	8a 9d       	mul	r24, r10
   1132e:	b0 01       	movw	r22, r0
   11330:	8b 9d       	mul	r24, r11
   11332:	70 0d       	add	r23, r0
   11334:	9a 9d       	mul	r25, r10
   11336:	70 0d       	add	r23, r0
   11338:	11 24       	eor	r1, r1
   1133a:	66 5f       	subi	r22, 0xF6	; 246
   1133c:	7e 4f       	sbci	r23, 0xFE	; 254
   1133e:	c8 01       	movw	r24, r16
   11340:	4b e0       	ldi	r20, 0x0B	; 11
   11342:	50 e0       	ldi	r21, 0x00	; 0
   11344:	0e 94 30 ad 	call	0x15a60	; 0x15a60 <__eerd_block_m128>
			  if (strlen(strBankName<=10)){
   11348:	e0 e0       	ldi	r30, 0x00	; 0
   1134a:	f0 e0       	ldi	r31, 0x00	; 0
   1134c:	0b 30       	cpi	r16, 0x0B	; 11
   1134e:	11 05       	cpc	r17, r1
   11350:	10 f4       	brcc	.+4      	; 0x11356 <FMenuChangeMOP+0x1f2>
   11352:	e1 e0       	ldi	r30, 0x01	; 1
   11354:	f0 e0       	ldi	r31, 0x00	; 0
   11356:	80 81       	ld	r24, Z
   11358:	88 23       	and	r24, r24
   1135a:	d1 f1       	breq	.+116    	; 0x113d0 <FMenuChangeMOP+0x26c>
			     sprintf_P(lcdteks,PSTR("%d.%s"),(iLoop+1),strBankName);
   1135c:	ad b7       	in	r26, 0x3d	; 61
   1135e:	be b7       	in	r27, 0x3e	; 62
   11360:	18 97       	sbiw	r26, 0x08	; 8
   11362:	0f b6       	in	r0, 0x3f	; 63
   11364:	f8 94       	cli
   11366:	be bf       	out	0x3e, r27	; 62
   11368:	0f be       	out	0x3f, r0	; 63
   1136a:	ad bf       	out	0x3d, r26	; 61
   1136c:	ed b7       	in	r30, 0x3d	; 61
   1136e:	fe b7       	in	r31, 0x3e	; 62
   11370:	31 96       	adiw	r30, 0x01	; 1
   11372:	12 96       	adiw	r26, 0x02	; 2
   11374:	fc 92       	st	X, r15
   11376:	ee 92       	st	-X, r14
   11378:	11 97       	sbiw	r26, 0x01	; 1
   1137a:	d3 82       	std	Z+3, r13	; 0x03
   1137c:	c2 82       	std	Z+2, r12	; 0x02
   1137e:	80 91 5b 02 	lds	r24, 0x025B
   11382:	90 91 5c 02 	lds	r25, 0x025C
   11386:	01 96       	adiw	r24, 0x01	; 1
   11388:	95 83       	std	Z+5, r25	; 0x05
   1138a:	84 83       	std	Z+4, r24	; 0x04
   1138c:	17 83       	std	Z+7, r17	; 0x07
   1138e:	06 83       	std	Z+6, r16	; 0x06
   11390:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
			     lcd_print((2+(iLoop%2)),(1+((iLoop/2)*12)),lcdteks);
   11394:	20 91 5b 02 	lds	r18, 0x025B
   11398:	30 91 5c 02 	lds	r19, 0x025C
   1139c:	ed b7       	in	r30, 0x3d	; 61
   1139e:	fe b7       	in	r31, 0x3e	; 62
   113a0:	38 96       	adiw	r30, 0x08	; 8
   113a2:	0f b6       	in	r0, 0x3f	; 63
   113a4:	f8 94       	cli
   113a6:	fe bf       	out	0x3e, r31	; 62
   113a8:	0f be       	out	0x3f, r0	; 63
   113aa:	ed bf       	out	0x3d, r30	; 61
   113ac:	82 2f       	mov	r24, r18
   113ae:	81 70       	andi	r24, 0x01	; 1
   113b0:	36 95       	lsr	r19
   113b2:	27 95       	ror	r18
   113b4:	b9 01       	movw	r22, r18
   113b6:	66 0f       	add	r22, r22
   113b8:	77 1f       	adc	r23, r23
   113ba:	62 0f       	add	r22, r18
   113bc:	73 1f       	adc	r23, r19
   113be:	66 0f       	add	r22, r22
   113c0:	77 1f       	adc	r23, r23
   113c2:	66 0f       	add	r22, r22
   113c4:	77 1f       	adc	r23, r23
   113c6:	6f 5f       	subi	r22, 0xFF	; 255
   113c8:	8e 5f       	subi	r24, 0xFE	; 254
   113ca:	a7 01       	movw	r20, r14
   113cc:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
		  //Load Bank Information
	 case cmSelectBankName:
	      lcd_clear();
		  lcd_printf(1,1,PSTR("Select Bank"));
		  iLoop=0;
	      for(iLoop=0;iLoop<4;iLoop++){
   113d0:	80 91 5b 02 	lds	r24, 0x025B
   113d4:	90 91 5c 02 	lds	r25, 0x025C
   113d8:	01 96       	adiw	r24, 0x01	; 1
   113da:	90 93 5c 02 	sts	0x025C, r25
   113de:	80 93 5b 02 	sts	0x025B, r24
   113e2:	80 91 5b 02 	lds	r24, 0x025B
   113e6:	90 91 5c 02 	lds	r25, 0x025C
   113ea:	84 30       	cpi	r24, 0x04	; 4
   113ec:	91 05       	cpc	r25, r1
   113ee:	08 f4       	brcc	.+2      	; 0x113f2 <FMenuChangeMOP+0x28e>
   113f0:	9d cf       	rjmp	.-198    	; 0x1132c <FMenuChangeMOP+0x1c8>
			  if (strlen(strBankName<=10)){
			     sprintf_P(lcdteks,PSTR("%d.%s"),(iLoop+1),strBankName);
			     lcd_print((2+(iLoop%2)),(1+((iLoop/2)*12)),lcdteks);
				 }
		  }
	      lcd_printf(4,1,PSTR("[*]Back"));
   113f2:	84 e0       	ldi	r24, 0x04	; 4
   113f4:	61 e0       	ldi	r22, 0x01	; 1
   113f6:	4e e5       	ldi	r20, 0x5E	; 94
   113f8:	5b e1       	ldi	r21, 0x1B	; 27
   113fa:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  stChangeMOP=cmSelectBankNameInput;
   113fe:	8c e0       	ldi	r24, 0x0C	; 12
   11400:	91 c0       	rjmp	.+290    	; 0x11524 <FMenuChangeMOP+0x3c0>
	      break;
     case cmSelectBankNameInput:
		  KeyPressed=_key_scan(1);
   11402:	81 e0       	ldi	r24, 0x01	; 1
   11404:	0e 94 6d a6 	call	0x14cda	; 0x14cda <_key_scan>
   11408:	18 2f       	mov	r17, r24
		  KeyChar=_key_btn(KeyPressed);
   1140a:	0e 94 ce a5 	call	0x14b9c	; 0x14b9c <_key_btn>
          if ((KeyChar>='1')&&(KeyChar<='4')){
   1140e:	81 53       	subi	r24, 0x31	; 49
   11410:	84 30       	cpi	r24, 0x04	; 4
   11412:	28 f4       	brcc	.+10     	; 0x1141e <FMenuChangeMOP+0x2ba>
		      BankIdx=KeyChar-'1';
   11414:	80 93 5f 02 	sts	0x025F, r24
			  stChangeMOP=cmSelectFIP;
   11418:	89 e0       	ldi	r24, 0x09	; 9
   1141a:	80 93 61 02 	sts	0x0261, r24
		  }
		  if (KeyPressed==_KEY_CANCEL) stChangeMOP=cmDisplayMOPOption;
   1141e:	17 3e       	cpi	r17, 0xE7	; 231
   11420:	09 f0       	breq	.+2      	; 0x11424 <FMenuChangeMOP+0x2c0>
   11422:	b3 c2       	rjmp	.+1382   	; 0x1198a <FMenuChangeMOP+0x826>
   11424:	81 e0       	ldi	r24, 0x01	; 1
   11426:	7e c0       	rjmp	.+252    	; 0x11524 <FMenuChangeMOP+0x3c0>

	      break;
     case cmDispBankSurcharge:
	      lcd_clear();
   11428:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
		  eeprom_read_block((void*) &strBankName, (const void*) &DefBankName[BankIdx], 11);
   1142c:	65 e0       	ldi	r22, 0x05	; 5
   1142e:	e6 2e       	mov	r14, r22
   11430:	f1 2c       	mov	r15, r1
   11432:	ec 0e       	add	r14, r28
   11434:	fd 1e       	adc	r15, r29
   11436:	60 91 5f 02 	lds	r22, 0x025F
   1143a:	8b e0       	ldi	r24, 0x0B	; 11
   1143c:	68 9f       	mul	r22, r24
   1143e:	b0 01       	movw	r22, r0
   11440:	11 24       	eor	r1, r1
   11442:	66 5f       	subi	r22, 0xF6	; 246
   11444:	7e 4f       	sbci	r23, 0xFE	; 254
   11446:	c7 01       	movw	r24, r14
   11448:	4b e0       	ldi	r20, 0x0B	; 11
   1144a:	50 e0       	ldi	r21, 0x00	; 0
   1144c:	0e 94 30 ad 	call	0x15a60	; 0x15a60 <__eerd_block_m128>
		  sprintf_P(lcdteks,PSTR("%s"),strBankName);
   11450:	00 d0       	rcall	.+0      	; 0x11452 <FMenuChangeMOP+0x2ee>
   11452:	00 d0       	rcall	.+0      	; 0x11454 <FMenuChangeMOP+0x2f0>
   11454:	00 d0       	rcall	.+0      	; 0x11456 <FMenuChangeMOP+0x2f2>
   11456:	ed b7       	in	r30, 0x3d	; 61
   11458:	fe b7       	in	r31, 0x3e	; 62
   1145a:	31 96       	adiw	r30, 0x01	; 1
   1145c:	8e 01       	movw	r16, r28
   1145e:	00 5f       	subi	r16, 0xF0	; 240
   11460:	1f 4f       	sbci	r17, 0xFF	; 255
   11462:	ad b7       	in	r26, 0x3d	; 61
   11464:	be b7       	in	r27, 0x3e	; 62
   11466:	12 96       	adiw	r26, 0x02	; 2
   11468:	1c 93       	st	X, r17
   1146a:	0e 93       	st	-X, r16
   1146c:	11 97       	sbiw	r26, 0x01	; 1
   1146e:	8b e5       	ldi	r24, 0x5B	; 91
   11470:	9b e1       	ldi	r25, 0x1B	; 27
   11472:	93 83       	std	Z+3, r25	; 0x03
   11474:	82 83       	std	Z+2, r24	; 0x02
   11476:	f5 82       	std	Z+5, r15	; 0x05
   11478:	e4 82       	std	Z+4, r14	; 0x04
   1147a:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
		  lcd_print(1,1,lcdteks);
   1147e:	ed b7       	in	r30, 0x3d	; 61
   11480:	fe b7       	in	r31, 0x3e	; 62
   11482:	36 96       	adiw	r30, 0x06	; 6
   11484:	0f b6       	in	r0, 0x3f	; 63
   11486:	f8 94       	cli
   11488:	fe bf       	out	0x3e, r31	; 62
   1148a:	0f be       	out	0x3f, r0	; 63
   1148c:	ed bf       	out	0x3d, r30	; 61
   1148e:	81 e0       	ldi	r24, 0x01	; 1
   11490:	61 e0       	ldi	r22, 0x01	; 1
   11492:	a8 01       	movw	r20, r16
   11494:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
		  lcd_printf(2,1,PSTR("Surcharge:   _%"));
   11498:	82 e0       	ldi	r24, 0x02	; 2
   1149a:	61 e0       	ldi	r22, 0x01	; 1
   1149c:	4b e4       	ldi	r20, 0x4B	; 75
   1149e:	5b e1       	ldi	r21, 0x1B	; 27
   114a0:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
	      lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
   114a4:	84 e0       	ldi	r24, 0x04	; 4
   114a6:	61 e0       	ldi	r22, 0x01	; 1
   114a8:	46 e3       	ldi	r20, 0x36	; 54
   114aa:	5b e1       	ldi	r21, 0x1B	; 27
   114ac:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
          stChangeMOP=cmInputBankSurcharge;
   114b0:	8d e0       	ldi	r24, 0x0D	; 13
   114b2:	38 c0       	rjmp	.+112    	; 0x11524 <FMenuChangeMOP+0x3c0>
	      break;
	 case cmInputBankSurcharge:
	      //uiResult=UserInput(UI_NUMBER_L,2,14,ValueChar,100,3);
		  uiResult=UserInput(UI_NUMBER_L,2,14,strSurcharge,100,3);
   114b4:	82 e0       	ldi	r24, 0x02	; 2
   114b6:	62 e0       	ldi	r22, 0x02	; 2
   114b8:	4e e0       	ldi	r20, 0x0E	; 14
   114ba:	9e 01       	movw	r18, r28
   114bc:	2f 5f       	subi	r18, 0xFF	; 255
   114be:	3f 4f       	sbci	r19, 0xFF	; 255
   114c0:	04 e6       	ldi	r16, 0x64	; 100
   114c2:	10 e0       	ldi	r17, 0x00	; 0
   114c4:	53 e0       	ldi	r21, 0x03	; 3
   114c6:	e5 2e       	mov	r14, r21
   114c8:	0e 94 dc 67 	call	0xcfb8	; 0xcfb8 <UserInput>
	      if (uiResult==USER_OK)stChangeMOP=cmGenerateData;
   114cc:	83 30       	cpi	r24, 0x03	; 3
   114ce:	09 f4       	brne	.+2      	; 0x114d2 <FMenuChangeMOP+0x36e>
   114d0:	b7 c0       	rjmp	.+366    	; 0x11640 <FMenuChangeMOP+0x4dc>
		  else
	      if (uiResult==USER_CANCEL)stChangeMOP=cmSelectBankName;
   114d2:	81 30       	cpi	r24, 0x01	; 1
   114d4:	11 f4       	brne	.+4      	; 0x114da <FMenuChangeMOP+0x376>
   114d6:	8b e0       	ldi	r24, 0x0B	; 11
   114d8:	25 c0       	rjmp	.+74     	; 0x11524 <FMenuChangeMOP+0x3c0>
		  else
		  if (uiResult==USER_ENTRY)lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
   114da:	84 30       	cpi	r24, 0x04	; 4
   114dc:	21 f4       	brne	.+8      	; 0x114e6 <FMenuChangeMOP+0x382>
   114de:	61 e0       	ldi	r22, 0x01	; 1
   114e0:	41 e2       	ldi	r20, 0x21	; 33
   114e2:	5b e1       	ldi	r21, 0x1B	; 27
   114e4:	07 c0       	rjmp	.+14     	; 0x114f4 <FMenuChangeMOP+0x390>
		  else
		  if (uiResult==USER_NO_DATA)lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
   114e6:	85 30       	cpi	r24, 0x05	; 5
   114e8:	09 f0       	breq	.+2      	; 0x114ec <FMenuChangeMOP+0x388>
   114ea:	4f c2       	rjmp	.+1182   	; 0x1198a <FMenuChangeMOP+0x826>
   114ec:	84 e0       	ldi	r24, 0x04	; 4
   114ee:	61 e0       	ldi	r22, 0x01	; 1
   114f0:	4c e0       	ldi	r20, 0x0C	; 12
   114f2:	5b e1       	ldi	r21, 0x1B	; 27
   114f4:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
   114f8:	48 c2       	rjmp	.+1168   	; 0x1198a <FMenuChangeMOP+0x826>
	      break;
     case cmFlowFIP:
          switch(MOPType){
   114fa:	80 91 b8 01 	lds	r24, 0x01B8
   114fe:	82 30       	cpi	r24, 0x02	; 2
   11500:	61 f0       	breq	.+24     	; 0x1151a <FMenuChangeMOP+0x3b6>
   11502:	83 30       	cpi	r24, 0x03	; 3
   11504:	20 f4       	brcc	.+8      	; 0x1150e <FMenuChangeMOP+0x3aa>
   11506:	81 30       	cpi	r24, 0x01	; 1
   11508:	09 f0       	breq	.+2      	; 0x1150c <FMenuChangeMOP+0x3a8>
   1150a:	3f c2       	rjmp	.+1150   	; 0x1198a <FMenuChangeMOP+0x826>
   1150c:	0a c0       	rjmp	.+20     	; 0x11522 <FMenuChangeMOP+0x3be>
   1150e:	83 30       	cpi	r24, 0x03	; 3
   11510:	31 f0       	breq	.+12     	; 0x1151e <FMenuChangeMOP+0x3ba>
   11512:	84 30       	cpi	r24, 0x04	; 4
   11514:	09 f0       	breq	.+2      	; 0x11518 <FMenuChangeMOP+0x3b4>
   11516:	39 c2       	rjmp	.+1138   	; 0x1198a <FMenuChangeMOP+0x826>
   11518:	04 c0       	rjmp	.+8      	; 0x11522 <FMenuChangeMOP+0x3be>
		  case PAY_ACCOUNT: stChangeMOP=cmDispCardTap;       break;
		  case PAY_BANK:    stChangeMOP=cmDispBankSurcharge; break;
   1151a:	81 e1       	ldi	r24, 0x11	; 17
   1151c:	03 c0       	rjmp	.+6      	; 0x11524 <FMenuChangeMOP+0x3c0>
		  case PAY_VOUCHER: stChangeMOP=cmProsesVoucher;      break;
   1151e:	85 e1       	ldi	r24, 0x15	; 21
   11520:	01 c0       	rjmp	.+2      	; 0x11524 <FMenuChangeMOP+0x3c0>
		  case PAY_PUMPTEST:stChangeMOP=cmDispCardTap;       break;
   11522:	82 e1       	ldi	r24, 0x12	; 18
   11524:	80 93 61 02 	sts	0x0261, r24
   11528:	30 c2       	rjmp	.+1120   	; 0x1198a <FMenuChangeMOP+0x826>
		  }
	      break;
     case cmDispCardTap:
	      lcd_clear();
   1152a:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
	      lcd_printf(1,1,PSTR("Tap Kartu RFID"));
   1152e:	81 e0       	ldi	r24, 0x01	; 1
   11530:	61 e0       	ldi	r22, 0x01	; 1
   11532:	4d ef       	ldi	r20, 0xFD	; 253
   11534:	5a e1       	ldi	r21, 0x1A	; 26
   11536:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  sprintf_P(lcdteks,PSTR("FIP%s"),strFIP_ID);
   1153a:	00 d0       	rcall	.+0      	; 0x1153c <FMenuChangeMOP+0x3d8>
   1153c:	00 d0       	rcall	.+0      	; 0x1153e <FMenuChangeMOP+0x3da>
   1153e:	00 d0       	rcall	.+0      	; 0x11540 <FMenuChangeMOP+0x3dc>
   11540:	ed b7       	in	r30, 0x3d	; 61
   11542:	fe b7       	in	r31, 0x3e	; 62
   11544:	31 96       	adiw	r30, 0x01	; 1
   11546:	8e 01       	movw	r16, r28
   11548:	00 5f       	subi	r16, 0xF0	; 240
   1154a:	1f 4f       	sbci	r17, 0xFF	; 255
   1154c:	ad b7       	in	r26, 0x3d	; 61
   1154e:	be b7       	in	r27, 0x3e	; 62
   11550:	12 96       	adiw	r26, 0x02	; 2
   11552:	1c 93       	st	X, r17
   11554:	0e 93       	st	-X, r16
   11556:	11 97       	sbiw	r26, 0x01	; 1
   11558:	87 ef       	ldi	r24, 0xF7	; 247
   1155a:	9a e1       	ldi	r25, 0x1A	; 26
   1155c:	93 83       	std	Z+3, r25	; 0x03
   1155e:	82 83       	std	Z+2, r24	; 0x02
   11560:	89 eb       	ldi	r24, 0xB9	; 185
   11562:	97 e0       	ldi	r25, 0x07	; 7
   11564:	95 83       	std	Z+5, r25	; 0x05
   11566:	84 83       	std	Z+4, r24	; 0x04
   11568:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
		  lcd_print(2,1,lcdteks);
   1156c:	ed b7       	in	r30, 0x3d	; 61
   1156e:	fe b7       	in	r31, 0x3e	; 62
   11570:	36 96       	adiw	r30, 0x06	; 6
   11572:	0f b6       	in	r0, 0x3f	; 63
   11574:	f8 94       	cli
   11576:	fe bf       	out	0x3e, r31	; 62
   11578:	0f be       	out	0x3f, r0	; 63
   1157a:	ed bf       	out	0x3d, r30	; 61
   1157c:	82 e0       	ldi	r24, 0x02	; 2
   1157e:	61 e0       	ldi	r22, 0x01	; 1
   11580:	a8 01       	movw	r20, r16
   11582:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
          lcd_printf(4,1,PSTR("[*]Back    [#]Exit"));
   11586:	84 e0       	ldi	r24, 0x04	; 4
   11588:	61 e0       	ldi	r22, 0x01	; 1
   1158a:	44 ee       	ldi	r20, 0xE4	; 228
   1158c:	5a e1       	ldi	r21, 0x1A	; 26
   1158e:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  IsRFIDDetected=False;
   11592:	10 92 98 01 	sts	0x0198, r1
          stChangeMOP=cmRFIDCardInput;
   11596:	83 e1       	ldi	r24, 0x13	; 19
   11598:	c5 cf       	rjmp	.-118    	; 0x11524 <FMenuChangeMOP+0x3c0>
	      break;
	 case cmRFIDCardInput:
		  KeyPressed=_key_scan(1);
   1159a:	81 e0       	ldi	r24, 0x01	; 1
   1159c:	0e 94 6d a6 	call	0x14cda	; 0x14cda <_key_scan>
   115a0:	18 2f       	mov	r17, r24
		  KeyChar=_key_btn(KeyPressed);
   115a2:	0e 94 ce a5 	call	0x14b9c	; 0x14b9c <_key_btn>
		  if (KeyPressed==_KEY_ENTER){
   115a6:	17 3b       	cpi	r17, 0xB7	; 183
   115a8:	11 f4       	brne	.+4      	; 0x115ae <FMenuChangeMOP+0x44a>
		      stChangeMOP=cmExitChangeMOP;
   115aa:	8c e1       	ldi	r24, 0x1C	; 28
   115ac:	03 c0       	rjmp	.+6      	; 0x115b4 <FMenuChangeMOP+0x450>
		  }
		  else
		  if (KeyPressed==_KEY_CANCEL){
   115ae:	17 3e       	cpi	r17, 0xE7	; 231
   115b0:	19 f4       	brne	.+6      	; 0x115b8 <FMenuChangeMOP+0x454>
   		      stChangeMOP=cmSelectFIP;
   115b2:	89 e0       	ldi	r24, 0x09	; 9
   115b4:	80 93 61 02 	sts	0x0261, r24
			 }
          if (IsRFIDDetected==True){
   115b8:	80 91 98 01 	lds	r24, 0x0198
   115bc:	81 30       	cpi	r24, 0x01	; 1
   115be:	09 f0       	breq	.+2      	; 0x115c2 <FMenuChangeMOP+0x45e>
   115c0:	e4 c1       	rjmp	.+968    	; 0x1198a <FMenuChangeMOP+0x826>
		      IsRFIDDetected=False;
   115c2:	10 92 98 01 	sts	0x0198, r1
			   stChangeMOP=cmProsesRFID;
   115c6:	84 e1       	ldi	r24, 0x14	; 20
   115c8:	ad cf       	rjmp	.-166    	; 0x11524 <FMenuChangeMOP+0x3c0>
			 }
	      break;
     case cmProsesRFID:
	      ViewCardID();
   115ca:	0e 94 e0 3e 	call	0x7dc0	; 0x7dc0 <ViewCardID>
          sprintf_P(lcdteks,PSTR("ID:%s"),strCardID);lcd_print(2,1,lcdteks);
   115ce:	00 d0       	rcall	.+0      	; 0x115d0 <FMenuChangeMOP+0x46c>
   115d0:	00 d0       	rcall	.+0      	; 0x115d2 <FMenuChangeMOP+0x46e>
   115d2:	00 d0       	rcall	.+0      	; 0x115d4 <FMenuChangeMOP+0x470>
   115d4:	ed b7       	in	r30, 0x3d	; 61
   115d6:	fe b7       	in	r31, 0x3e	; 62
   115d8:	31 96       	adiw	r30, 0x01	; 1
   115da:	8e 01       	movw	r16, r28
   115dc:	00 5f       	subi	r16, 0xF0	; 240
   115de:	1f 4f       	sbci	r17, 0xFF	; 255
   115e0:	ad b7       	in	r26, 0x3d	; 61
   115e2:	be b7       	in	r27, 0x3e	; 62
   115e4:	12 96       	adiw	r26, 0x02	; 2
   115e6:	1c 93       	st	X, r17
   115e8:	0e 93       	st	-X, r16
   115ea:	11 97       	sbiw	r26, 0x01	; 1
   115ec:	8e ed       	ldi	r24, 0xDE	; 222
   115ee:	9a e1       	ldi	r25, 0x1A	; 26
   115f0:	93 83       	std	Z+3, r25	; 0x03
   115f2:	82 83       	std	Z+2, r24	; 0x02
   115f4:	89 e8       	ldi	r24, 0x89	; 137
   115f6:	9b e0       	ldi	r25, 0x0B	; 11
   115f8:	95 83       	std	Z+5, r25	; 0x05
   115fa:	84 83       	std	Z+4, r24	; 0x04
   115fc:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
   11600:	ed b7       	in	r30, 0x3d	; 61
   11602:	fe b7       	in	r31, 0x3e	; 62
   11604:	36 96       	adiw	r30, 0x06	; 6
   11606:	0f b6       	in	r0, 0x3f	; 63
   11608:	f8 94       	cli
   1160a:	fe bf       	out	0x3e, r31	; 62
   1160c:	0f be       	out	0x3f, r0	; 63
   1160e:	ed bf       	out	0x3d, r30	; 61
   11610:	82 e0       	ldi	r24, 0x02	; 2
   11612:	61 e0       	ldi	r22, 0x01	; 1
   11614:	a8 01       	movw	r20, r16
   11616:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
          lcd_printf(3,1,PSTR("Proses"));
   1161a:	83 e0       	ldi	r24, 0x03	; 3
   1161c:	61 e0       	ldi	r22, 0x01	; 1
   1161e:	47 ed       	ldi	r20, 0xD7	; 215
   11620:	5a e1       	ldi	r21, 0x1A	; 26
   11622:	0c c0       	rjmp	.+24     	; 0x1163c <FMenuChangeMOP+0x4d8>
		  stChangeMOP=cmGenerateData;
	      break;
     case cmProsesVoucher:
          lcd_clear();
   11624:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
          lcd_printf(1,1,PSTR("-MOP Voucher-")); 
   11628:	81 e0       	ldi	r24, 0x01	; 1
   1162a:	61 e0       	ldi	r22, 0x01	; 1
   1162c:	49 ec       	ldi	r20, 0xC9	; 201
   1162e:	5a e1       	ldi	r21, 0x1A	; 26
   11630:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
          lcd_printf(3,1,PSTR("Proses"));
   11634:	83 e0       	ldi	r24, 0x03	; 3
   11636:	61 e0       	ldi	r22, 0x01	; 1
   11638:	42 ec       	ldi	r20, 0xC2	; 194
   1163a:	5a e1       	ldi	r21, 0x1A	; 26
   1163c:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  stChangeMOP=cmGenerateData;
   11640:	86 e1       	ldi	r24, 0x16	; 22
   11642:	70 cf       	rjmp	.-288    	; 0x11524 <FMenuChangeMOP+0x3c0>
	      break;
   11644:	ef e8       	ldi	r30, 0x8F	; 143
   11646:	fc e0       	ldi	r31, 0x0C	; 12
}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
	     strMemory[i]=data;
   11648:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
   1164a:	8c e0       	ldi	r24, 0x0C	; 12
   1164c:	e4 3a       	cpi	r30, 0xA4	; 164
   1164e:	f8 07       	cpc	r31, r24
   11650:	d9 f7       	brne	.-10     	; 0x11648 <FMenuChangeMOP+0x4e4>
   11652:	ee e9       	ldi	r30, 0x9E	; 158
   11654:	fb e0       	ldi	r31, 0x0B	; 11
	     strMemory[i]=data;
   11656:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
   11658:	9b e0       	ldi	r25, 0x0B	; 11
   1165a:	e3 3b       	cpi	r30, 0xB3	; 179
   1165c:	f9 07       	cpc	r31, r25
   1165e:	d9 f7       	brne	.-10     	; 0x11656 <FMenuChangeMOP+0x4f2>
   11660:	ed e7       	ldi	r30, 0x7D	; 125
   11662:	f8 e0       	ldi	r31, 0x08	; 8
	     strMemory[i]=data;
   11664:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
   11666:	a8 e0       	ldi	r26, 0x08	; 8
   11668:	e2 39       	cpi	r30, 0x92	; 146
   1166a:	fa 07       	cpc	r31, r26
   1166c:	d9 f7       	brne	.-10     	; 0x11664 <FMenuChangeMOP+0x500>
   1166e:	95 ea       	ldi	r25, 0xA5	; 165
   11670:	e9 2e       	mov	r14, r25
   11672:	93 e0       	ldi	r25, 0x03	; 3
   11674:	f9 2e       	mov	r15, r25
	     strMemory[i]=data;
   11676:	f7 01       	movw	r30, r14
   11678:	11 92       	st	Z+, r1
   1167a:	7f 01       	movw	r14, r30

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
   1167c:	fa eb       	ldi	r31, 0xBA	; 186
   1167e:	ef 16       	cp	r14, r31
   11680:	f3 e0       	ldi	r31, 0x03	; 3
   11682:	ff 06       	cpc	r15, r31
   11684:	c1 f7       	brne	.-16     	; 0x11676 <FMenuChangeMOP+0x512>
     case cmGenerateData:
	      FillChar(strRef1,sizeof(strRef1),0);
	      FillChar(strRef2,sizeof(strRef2),0);
	      FillChar(strRef3,sizeof(strRef3),0);
	      FillChar(strRef4,sizeof(strRef4),0);
          switch(MOPType){
   11686:	80 91 b8 01 	lds	r24, 0x01B8
   1168a:	82 30       	cpi	r24, 0x02	; 2
   1168c:	f1 f0       	breq	.+60     	; 0x116ca <FMenuChangeMOP+0x566>
   1168e:	83 30       	cpi	r24, 0x03	; 3
   11690:	20 f4       	brcc	.+8      	; 0x1169a <FMenuChangeMOP+0x536>
   11692:	81 30       	cpi	r24, 0x01	; 1
   11694:	09 f0       	breq	.+2      	; 0x11698 <FMenuChangeMOP+0x534>
   11696:	ab c0       	rjmp	.+342    	; 0x117ee <FMenuChangeMOP+0x68a>
   11698:	07 c0       	rjmp	.+14     	; 0x116a8 <FMenuChangeMOP+0x544>
   1169a:	83 30       	cpi	r24, 0x03	; 3
   1169c:	09 f4       	brne	.+2      	; 0x116a0 <FMenuChangeMOP+0x53c>
   1169e:	62 c0       	rjmp	.+196    	; 0x11764 <FMenuChangeMOP+0x600>
   116a0:	84 30       	cpi	r24, 0x04	; 4
   116a2:	09 f0       	breq	.+2      	; 0x116a6 <FMenuChangeMOP+0x542>
   116a4:	a4 c0       	rjmp	.+328    	; 0x117ee <FMenuChangeMOP+0x68a>
   116a6:	73 c0       	rjmp	.+230    	; 0x1178e <FMenuChangeMOP+0x62a>
		  case PAY_ACCOUNT:
		       sprintf_P(strRef1,PSTR("%s"),strCardID); 
   116a8:	00 d0       	rcall	.+0      	; 0x116aa <FMenuChangeMOP+0x546>
   116aa:	00 d0       	rcall	.+0      	; 0x116ac <FMenuChangeMOP+0x548>
   116ac:	00 d0       	rcall	.+0      	; 0x116ae <FMenuChangeMOP+0x54a>
   116ae:	ed b7       	in	r30, 0x3d	; 61
   116b0:	fe b7       	in	r31, 0x3e	; 62
   116b2:	31 96       	adiw	r30, 0x01	; 1
   116b4:	8f e8       	ldi	r24, 0x8F	; 143
   116b6:	9c e0       	ldi	r25, 0x0C	; 12
   116b8:	ad b7       	in	r26, 0x3d	; 61
   116ba:	be b7       	in	r27, 0x3e	; 62
   116bc:	12 96       	adiw	r26, 0x02	; 2
   116be:	9c 93       	st	X, r25
   116c0:	8e 93       	st	-X, r24
   116c2:	11 97       	sbiw	r26, 0x01	; 1
   116c4:	8f eb       	ldi	r24, 0xBF	; 191
   116c6:	9a e1       	ldi	r25, 0x1A	; 26
   116c8:	82 c0       	rjmp	.+260    	; 0x117ce <FMenuChangeMOP+0x66a>
		       break;
		  case PAY_BANK:
		  	   eeprom_read_block((void*) &strBankName, (const void*) &DefBankName[BankIdx], 11);
   116ca:	8e 01       	movw	r16, r28
   116cc:	0b 5f       	subi	r16, 0xFB	; 251
   116ce:	1f 4f       	sbci	r17, 0xFF	; 255
   116d0:	60 91 5f 02 	lds	r22, 0x025F
   116d4:	8b e0       	ldi	r24, 0x0B	; 11
   116d6:	68 9f       	mul	r22, r24
   116d8:	b0 01       	movw	r22, r0
   116da:	11 24       	eor	r1, r1
   116dc:	66 5f       	subi	r22, 0xF6	; 246
   116de:	7e 4f       	sbci	r23, 0xFE	; 254
   116e0:	c8 01       	movw	r24, r16
   116e2:	4b e0       	ldi	r20, 0x0B	; 11
   116e4:	50 e0       	ldi	r21, 0x00	; 0
   116e6:	0e 94 30 ad 	call	0x15a60	; 0x15a60 <__eerd_block_m128>
		       sprintf_P(lcdteks,PSTR("%s"),strBankName);
   116ea:	00 d0       	rcall	.+0      	; 0x116ec <FMenuChangeMOP+0x588>
   116ec:	00 d0       	rcall	.+0      	; 0x116ee <FMenuChangeMOP+0x58a>
   116ee:	00 d0       	rcall	.+0      	; 0x116f0 <FMenuChangeMOP+0x58c>
   116f0:	ed b7       	in	r30, 0x3d	; 61
   116f2:	fe b7       	in	r31, 0x3e	; 62
   116f4:	31 96       	adiw	r30, 0x01	; 1
   116f6:	ce 01       	movw	r24, r28
   116f8:	40 96       	adiw	r24, 0x10	; 16
   116fa:	ad b7       	in	r26, 0x3d	; 61
   116fc:	be b7       	in	r27, 0x3e	; 62
   116fe:	12 96       	adiw	r26, 0x02	; 2
   11700:	9c 93       	st	X, r25
   11702:	8e 93       	st	-X, r24
   11704:	11 97       	sbiw	r26, 0x01	; 1
   11706:	8c eb       	ldi	r24, 0xBC	; 188
   11708:	9a e1       	ldi	r25, 0x1A	; 26
   1170a:	93 83       	std	Z+3, r25	; 0x03
   1170c:	82 83       	std	Z+2, r24	; 0x02
   1170e:	15 83       	std	Z+5, r17	; 0x05
   11710:	04 83       	std	Z+4, r16	; 0x04
   11712:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
		       sprintf_P(strRef1,PSTR("%s"),strBankName); 
   11716:	ed b7       	in	r30, 0x3d	; 61
   11718:	fe b7       	in	r31, 0x3e	; 62
   1171a:	31 96       	adiw	r30, 0x01	; 1
   1171c:	8f e8       	ldi	r24, 0x8F	; 143
   1171e:	9c e0       	ldi	r25, 0x0C	; 12
   11720:	ad b7       	in	r26, 0x3d	; 61
   11722:	be b7       	in	r27, 0x3e	; 62
   11724:	12 96       	adiw	r26, 0x02	; 2
   11726:	9c 93       	st	X, r25
   11728:	8e 93       	st	-X, r24
   1172a:	11 97       	sbiw	r26, 0x01	; 1
   1172c:	89 eb       	ldi	r24, 0xB9	; 185
   1172e:	9a e1       	ldi	r25, 0x1A	; 26
   11730:	93 83       	std	Z+3, r25	; 0x03
   11732:	82 83       	std	Z+2, r24	; 0x02
   11734:	15 83       	std	Z+5, r17	; 0x05
   11736:	04 83       	std	Z+4, r16	; 0x04
   11738:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
		       sprintf_P(strRef4,PSTR("%s"),strSurcharge); 
   1173c:	ed b7       	in	r30, 0x3d	; 61
   1173e:	fe b7       	in	r31, 0x3e	; 62
   11740:	31 96       	adiw	r30, 0x01	; 1
   11742:	8b ee       	ldi	r24, 0xEB	; 235
   11744:	9f ef       	ldi	r25, 0xFF	; 255
   11746:	e8 0e       	add	r14, r24
   11748:	f9 1e       	adc	r15, r25
   1174a:	ad b7       	in	r26, 0x3d	; 61
   1174c:	be b7       	in	r27, 0x3e	; 62
   1174e:	12 96       	adiw	r26, 0x02	; 2
   11750:	fc 92       	st	X, r15
   11752:	ee 92       	st	-X, r14
   11754:	11 97       	sbiw	r26, 0x01	; 1
   11756:	86 eb       	ldi	r24, 0xB6	; 182
   11758:	9a e1       	ldi	r25, 0x1A	; 26
   1175a:	93 83       	std	Z+3, r25	; 0x03
   1175c:	82 83       	std	Z+2, r24	; 0x02
   1175e:	ce 01       	movw	r24, r28
   11760:	01 96       	adiw	r24, 0x01	; 1
   11762:	39 c0       	rjmp	.+114    	; 0x117d6 <FMenuChangeMOP+0x672>
		       break;
		  case PAY_VOUCHER://Load data Ref1=Voucher on cmVoucherInput
		  	   sprintf_P(strRef1,PSTR("%s"),strVoucherNum); 
   11764:	00 d0       	rcall	.+0      	; 0x11766 <FMenuChangeMOP+0x602>
   11766:	00 d0       	rcall	.+0      	; 0x11768 <FMenuChangeMOP+0x604>
   11768:	00 d0       	rcall	.+0      	; 0x1176a <FMenuChangeMOP+0x606>
   1176a:	ed b7       	in	r30, 0x3d	; 61
   1176c:	fe b7       	in	r31, 0x3e	; 62
   1176e:	31 96       	adiw	r30, 0x01	; 1
   11770:	8f e8       	ldi	r24, 0x8F	; 143
   11772:	9c e0       	ldi	r25, 0x0C	; 12
   11774:	ad b7       	in	r26, 0x3d	; 61
   11776:	be b7       	in	r27, 0x3e	; 62
   11778:	12 96       	adiw	r26, 0x02	; 2
   1177a:	9c 93       	st	X, r25
   1177c:	8e 93       	st	-X, r24
   1177e:	11 97       	sbiw	r26, 0x01	; 1
   11780:	83 eb       	ldi	r24, 0xB3	; 179
   11782:	9a e1       	ldi	r25, 0x1A	; 26
   11784:	93 83       	std	Z+3, r25	; 0x03
   11786:	82 83       	std	Z+2, r24	; 0x02
   11788:	8c e3       	ldi	r24, 0x3C	; 60
   1178a:	9c e0       	ldi	r25, 0x0C	; 12
   1178c:	24 c0       	rjmp	.+72     	; 0x117d6 <FMenuChangeMOP+0x672>
		       break;
		  case PAY_PUMPTEST:
		  	   sprintf_P(strRef1,PSTR("PUMP TEST")); 
   1178e:	00 d0       	rcall	.+0      	; 0x11790 <FMenuChangeMOP+0x62c>
   11790:	00 d0       	rcall	.+0      	; 0x11792 <FMenuChangeMOP+0x62e>
   11792:	8f e8       	ldi	r24, 0x8F	; 143
   11794:	9c e0       	ldi	r25, 0x0C	; 12
   11796:	ad b7       	in	r26, 0x3d	; 61
   11798:	be b7       	in	r27, 0x3e	; 62
   1179a:	12 96       	adiw	r26, 0x02	; 2
   1179c:	9c 93       	st	X, r25
   1179e:	8e 93       	st	-X, r24
   117a0:	11 97       	sbiw	r26, 0x01	; 1
   117a2:	89 ea       	ldi	r24, 0xA9	; 169
   117a4:	9a e1       	ldi	r25, 0x1A	; 26
   117a6:	14 96       	adiw	r26, 0x04	; 4
   117a8:	9c 93       	st	X, r25
   117aa:	8e 93       	st	-X, r24
   117ac:	13 97       	sbiw	r26, 0x03	; 3
   117ae:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
		  	   sprintf_P(strRef2,PSTR("%s"),strCardID); 	       
   117b2:	00 d0       	rcall	.+0      	; 0x117b4 <FMenuChangeMOP+0x650>
   117b4:	ed b7       	in	r30, 0x3d	; 61
   117b6:	fe b7       	in	r31, 0x3e	; 62
   117b8:	31 96       	adiw	r30, 0x01	; 1
   117ba:	8e e9       	ldi	r24, 0x9E	; 158
   117bc:	9b e0       	ldi	r25, 0x0B	; 11
   117be:	ad b7       	in	r26, 0x3d	; 61
   117c0:	be b7       	in	r27, 0x3e	; 62
   117c2:	12 96       	adiw	r26, 0x02	; 2
   117c4:	9c 93       	st	X, r25
   117c6:	8e 93       	st	-X, r24
   117c8:	11 97       	sbiw	r26, 0x01	; 1
   117ca:	86 ea       	ldi	r24, 0xA6	; 166
   117cc:	9a e1       	ldi	r25, 0x1A	; 26
   117ce:	93 83       	std	Z+3, r25	; 0x03
   117d0:	82 83       	std	Z+2, r24	; 0x02
   117d2:	89 e8       	ldi	r24, 0x89	; 137
   117d4:	9b e0       	ldi	r25, 0x0B	; 11
   117d6:	95 83       	std	Z+5, r25	; 0x05
   117d8:	84 83       	std	Z+4, r24	; 0x04
   117da:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
   117de:	ed b7       	in	r30, 0x3d	; 61
   117e0:	fe b7       	in	r31, 0x3e	; 62
   117e2:	36 96       	adiw	r30, 0x06	; 6
   117e4:	0f b6       	in	r0, 0x3f	; 63
   117e6:	f8 94       	cli
   117e8:	fe bf       	out	0x3e, r31	; 62
   117ea:	0f be       	out	0x3f, r0	; 63
   117ec:	ed bf       	out	0x3d, r30	; 61
	     }String[Size]=0;
	 }
}

void leadingZero(char Val,char *StrResult){
     sprintf_P(StrResult,PSTR("%.2d"),Val);
   117ee:	00 d0       	rcall	.+0      	; 0x117f0 <FMenuChangeMOP+0x68c>
   117f0:	00 d0       	rcall	.+0      	; 0x117f2 <FMenuChangeMOP+0x68e>
   117f2:	00 d0       	rcall	.+0      	; 0x117f4 <FMenuChangeMOP+0x690>
   117f4:	ed b7       	in	r30, 0x3d	; 61
   117f6:	fe b7       	in	r31, 0x3e	; 62
   117f8:	31 96       	adiw	r30, 0x01	; 1
   117fa:	80 e5       	ldi	r24, 0x50	; 80
   117fc:	97 e0       	ldi	r25, 0x07	; 7
   117fe:	ad b7       	in	r26, 0x3d	; 61
   11800:	be b7       	in	r27, 0x3e	; 62
   11802:	12 96       	adiw	r26, 0x02	; 2
   11804:	9c 93       	st	X, r25
   11806:	8e 93       	st	-X, r24
   11808:	11 97       	sbiw	r26, 0x01	; 1
   1180a:	89 ee       	ldi	r24, 0xE9	; 233
   1180c:	9e e0       	ldi	r25, 0x0E	; 14
   1180e:	93 83       	std	Z+3, r25	; 0x03
   11810:	82 83       	std	Z+2, r24	; 0x02
   11812:	80 91 b8 01 	lds	r24, 0x01B8
   11816:	84 83       	std	Z+4, r24	; 0x04
   11818:	15 82       	std	Z+5, r1	; 0x05
   1181a:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
		  	   sprintf_P(strRef1,PSTR("PUMP TEST")); 
		  	   sprintf_P(strRef2,PSTR("%s"),strCardID); 	       
		       break;
		  }
		  leadingZero(MOPType,strPaymentType);
		  AddSpaceLead(strRef1,20);
   1181e:	ed b7       	in	r30, 0x3d	; 61
   11820:	fe b7       	in	r31, 0x3e	; 62
   11822:	36 96       	adiw	r30, 0x06	; 6
   11824:	0f b6       	in	r0, 0x3f	; 63
   11826:	f8 94       	cli
   11828:	fe bf       	out	0x3e, r31	; 62
   1182a:	0f be       	out	0x3f, r0	; 63
   1182c:	ed bf       	out	0x3d, r30	; 61
   1182e:	8f e8       	ldi	r24, 0x8F	; 143
   11830:	9c e0       	ldi	r25, 0x0C	; 12
   11832:	64 e1       	ldi	r22, 0x14	; 20
   11834:	0e 94 6f 2d 	call	0x5ade	; 0x5ade <AddSpaceLead>
		  AddSpaceLead(strRef2,20);
   11838:	8e e9       	ldi	r24, 0x9E	; 158
   1183a:	9b e0       	ldi	r25, 0x0B	; 11
   1183c:	64 e1       	ldi	r22, 0x14	; 20
   1183e:	0e 94 6f 2d 	call	0x5ade	; 0x5ade <AddSpaceLead>
		  AddSpaceLead(strRef3,20);
   11842:	8d e7       	ldi	r24, 0x7D	; 125
   11844:	98 e0       	ldi	r25, 0x08	; 8
   11846:	64 e1       	ldi	r22, 0x14	; 20
   11848:	0e 94 6f 2d 	call	0x5ade	; 0x5ade <AddSpaceLead>
		  AddSpaceLead(strRef4,20);
   1184c:	85 ea       	ldi	r24, 0xA5	; 165
   1184e:	93 e0       	ldi	r25, 0x03	; 3
   11850:	64 e1       	ldi	r22, 0x14	; 20
   11852:	0e 94 6f 2d 	call	0x5ade	; 0x5ade <AddSpaceLead>
		  iWait=0;
   11856:	10 92 5d 02 	sts	0x025D, r1
		  IsMessage09=False;
   1185a:	10 92 a3 01 	sts	0x01A3, r1
		  stChangeMOP=cmSendMessage32;	      
   1185e:	87 e1       	ldi	r24, 0x17	; 23
   11860:	61 ce       	rjmp	.-830    	; 0x11524 <FMenuChangeMOP+0x3c0>
	      break;
     case cmSendMessage32://SendMessage32
	      sendMessage32();
   11862:	0e 94 ae 88 	call	0x1115c	; 0x1115c <sendMessage32>
		  iLoop=0;
   11866:	10 92 5c 02 	sts	0x025C, r1
   1186a:	10 92 5b 02 	sts	0x025B, r1
		  iPos=0;
   1186e:	10 92 5e 02 	sts	0x025E, r1
		  lcd_printf(3,1,PSTR("Please Wait"));
   11872:	83 e0       	ldi	r24, 0x03	; 3
   11874:	61 e0       	ldi	r22, 0x01	; 1
   11876:	4a e9       	ldi	r20, 0x9A	; 154
   11878:	5a e1       	ldi	r21, 0x1A	; 26
   1187a:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  stChangeMOP=cmWaitReplyMessage;	      
   1187e:	88 e1       	ldi	r24, 0x18	; 24
   11880:	51 ce       	rjmp	.-862    	; 0x11524 <FMenuChangeMOP+0x3c0>
	      break;
     case cmWaitReplyMessage:
          iLoop++;
   11882:	80 91 5b 02 	lds	r24, 0x025B
   11886:	90 91 5c 02 	lds	r25, 0x025C
   1188a:	01 96       	adiw	r24, 0x01	; 1
   1188c:	90 93 5c 02 	sts	0x025C, r25
   11890:	80 93 5b 02 	sts	0x025B, r24
		  if ((iLoop%MSG_WAIT_TIMOUT)==0){
   11894:	68 e9       	ldi	r22, 0x98	; 152
   11896:	7a e3       	ldi	r23, 0x3A	; 58
   11898:	0e 94 7a aa 	call	0x154f4	; 0x154f4 <__udivmodhi4>
   1189c:	89 2b       	or	r24, r25
   1189e:	29 f5       	brne	.+74     	; 0x118ea <FMenuChangeMOP+0x786>
			 if (iPos<5){
   118a0:	60 91 5e 02 	lds	r22, 0x025E
   118a4:	65 30       	cpi	r22, 0x05	; 5
   118a6:	68 f4       	brcc	.+26     	; 0x118c2 <FMenuChangeMOP+0x75e>
				 lcd_xy(3,(13+iPos));_lcd('.');
   118a8:	63 5f       	subi	r22, 0xF3	; 243
   118aa:	83 e0       	ldi	r24, 0x03	; 3
   118ac:	0e 94 b3 a4 	call	0x14966	; 0x14966 <lcd_xy>
   118b0:	8e e2       	ldi	r24, 0x2E	; 46
   118b2:	0e 94 8d a4 	call	0x1491a	; 0x1491a <_lcd>
				 iPos++;
   118b6:	80 91 5e 02 	lds	r24, 0x025E
   118ba:	8f 5f       	subi	r24, 0xFF	; 255
   118bc:	80 93 5e 02 	sts	0x025E, r24
   118c0:	14 c0       	rjmp	.+40     	; 0x118ea <FMenuChangeMOP+0x786>
				}
			 else{
				 iPos=0;
   118c2:	10 92 5e 02 	sts	0x025E, r1
				 lcd_printf(3,(13+iPos),PSTR("       "));
   118c6:	83 e0       	ldi	r24, 0x03	; 3
   118c8:	6d e0       	ldi	r22, 0x0D	; 13
   118ca:	42 e9       	ldi	r20, 0x92	; 146
   118cc:	5a e1       	ldi	r21, 0x1A	; 26
   118ce:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
				 //Resend Message32
				 if (iWait<5)stChangeMOP=cmSendMessage32;
   118d2:	80 91 5d 02 	lds	r24, 0x025D
   118d6:	85 30       	cpi	r24, 0x05	; 5
   118d8:	18 f4       	brcc	.+6      	; 0x118e0 <FMenuChangeMOP+0x77c>
   118da:	87 e1       	ldi	r24, 0x17	; 23
   118dc:	80 93 61 02 	sts	0x0261, r24
				iWait++;
   118e0:	80 91 5d 02 	lds	r24, 0x025D
   118e4:	8f 5f       	subi	r24, 0xFF	; 255
   118e6:	80 93 5d 02 	sts	0x025D, r24
				}
		  }
		  if (iWait>5)stChangeMOP=cmNoReply;
   118ea:	80 91 5d 02 	lds	r24, 0x025D
   118ee:	86 30       	cpi	r24, 0x06	; 6
   118f0:	18 f0       	brcs	.+6      	; 0x118f8 <FMenuChangeMOP+0x794>
   118f2:	8a e1       	ldi	r24, 0x1A	; 26
   118f4:	80 93 61 02 	sts	0x0261, r24
		  if (IsMessage09==True)stChangeMOP=cmDisplayFreeMessage;
   118f8:	80 91 a3 01 	lds	r24, 0x01A3
   118fc:	81 30       	cpi	r24, 0x01	; 1
   118fe:	19 f4       	brne	.+6      	; 0x11906 <FMenuChangeMOP+0x7a2>
   11900:	89 e1       	ldi	r24, 0x19	; 25
   11902:	80 93 61 02 	sts	0x0261, r24
		  if (IsMessage99==True)stChangeMOP=cmFinishChangeMOP;
   11906:	80 91 9f 01 	lds	r24, 0x019F
   1190a:	81 30       	cpi	r24, 0x01	; 1
   1190c:	f1 f5       	brne	.+124    	; 0x1198a <FMenuChangeMOP+0x826>
   1190e:	37 c0       	rjmp	.+110    	; 0x1197e <FMenuChangeMOP+0x81a>
		  break;
     case cmDisplayFreeMessage:
	      IsMessage09=False;
   11910:	10 92 a3 01 	sts	0x01A3, r1
	      msgResult=procMessage09();
   11914:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <procMessage09>
		  lcd_clear();
   11918:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
		  lcd_print(1,1,strFreeMessageLine1);
   1191c:	81 e0       	ldi	r24, 0x01	; 1
   1191e:	61 e0       	ldi	r22, 0x01	; 1
   11920:	42 e9       	ldi	r20, 0x92	; 146
   11922:	58 e0       	ldi	r21, 0x08	; 8
   11924:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
		  lcd_print(2,1,strFreeMessageLine2);
   11928:	82 e0       	ldi	r24, 0x02	; 2
   1192a:	61 e0       	ldi	r22, 0x01	; 1
   1192c:	43 ea       	ldi	r20, 0xA3	; 163
   1192e:	57 e0       	ldi	r21, 0x07	; 7
   11930:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
		  lcd_print(3,1,strFreeMessageLine3);
   11934:	83 e0       	ldi	r24, 0x03	; 3
   11936:	61 e0       	ldi	r22, 0x01	; 1
   11938:	4c e1       	ldi	r20, 0x1C	; 28
   1193a:	58 e0       	ldi	r21, 0x08	; 8
   1193c:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
		  lcd_print(4,1,strFreeMessageLine4);
   11940:	84 e0       	ldi	r24, 0x04	; 4
   11942:	61 e0       	ldi	r22, 0x01	; 1
   11944:	46 ed       	ldi	r20, 0xD6	; 214
   11946:	5b e0       	ldi	r21, 0x0B	; 11
   11948:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
   1194c:	0e c0       	rjmp	.+28     	; 0x1196a <FMenuChangeMOP+0x806>
		  TimDisplay=0;
          stChangeMOP=cmDelayMOP;
	      break;
     case cmNoReply:
	      lcd_clear();
   1194e:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
		  lcd_printf(2,1,PSTR("No Reply    "));
   11952:	82 e0       	ldi	r24, 0x02	; 2
   11954:	61 e0       	ldi	r22, 0x01	; 1
   11956:	45 e8       	ldi	r20, 0x85	; 133
   11958:	5a e1       	ldi	r21, 0x1A	; 26
   1195a:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
	      lcd_printf(3,1,PSTR("TCP/IP Error"));
   1195e:	83 e0       	ldi	r24, 0x03	; 3
   11960:	61 e0       	ldi	r22, 0x01	; 1
   11962:	48 e7       	ldi	r20, 0x78	; 120
   11964:	5a e1       	ldi	r21, 0x1A	; 26
   11966:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  TimDisplay=0;
   1196a:	10 92 92 01 	sts	0x0192, r1
          stChangeMOP=cmDelayMOP;
   1196e:	8b e1       	ldi	r24, 0x1B	; 27
   11970:	d9 cd       	rjmp	.-1102   	; 0x11524 <FMenuChangeMOP+0x3c0>
	      break;
     case cmDelayMOP:
	      if (TimDisplay>9)stChangeMOP=cmExitChangeMOP;
   11972:	80 91 92 01 	lds	r24, 0x0192
   11976:	8a 30       	cpi	r24, 0x0A	; 10
   11978:	40 f0       	brcs	.+16     	; 0x1198a <FMenuChangeMOP+0x826>
   1197a:	8c e1       	ldi	r24, 0x1C	; 28
   1197c:	d3 cd       	rjmp	.-1114   	; 0x11524 <FMenuChangeMOP+0x3c0>
	      break;
     case cmExitChangeMOP:
	      stChangeMOP=cmFinishChangeMOP;
   1197e:	8d e1       	ldi	r24, 0x1D	; 29
   11980:	d1 cd       	rjmp	.-1118   	; 0x11524 <FMenuChangeMOP+0x3c0>
	      break;
     case cmFinishChangeMOP:
	      stChangeMOP=cmInit;
   11982:	10 92 61 02 	sts	0x0261, r1
   11986:	81 e0       	ldi	r24, 0x01	; 1
   11988:	01 c0       	rjmp	.+2      	; 0x1198c <FMenuChangeMOP+0x828>
   1198a:	80 e0       	ldi	r24, 0x00	; 0
		  Result=MENU_DONE;
	      break;
	 }
  return Result;
}
   1198c:	a3 96       	adiw	r28, 0x23	; 35
   1198e:	0f b6       	in	r0, 0x3f	; 63
   11990:	f8 94       	cli
   11992:	de bf       	out	0x3e, r29	; 62
   11994:	0f be       	out	0x3f, r0	; 63
   11996:	cd bf       	out	0x3d, r28	; 61
   11998:	cf 91       	pop	r28
   1199a:	df 91       	pop	r29
   1199c:	1f 91       	pop	r17
   1199e:	0f 91       	pop	r16
   119a0:	ff 90       	pop	r15
   119a2:	ef 90       	pop	r14
   119a4:	df 90       	pop	r13
   119a6:	cf 90       	pop	r12
   119a8:	bf 90       	pop	r11
   119aa:	af 90       	pop	r10
   119ac:	08 95       	ret

000119ae <sendMessage28>:
    uart_print(1, 0,strSend);
	UpdateCardID();
	sprintf_P(strSend,PSTR("%s%sF968CFFB"),strFIP_ID,strCardID);
    uart_print(1, 0,strSend);
	uart(1, 1,0x02);
	*/IFTSendMessage(MSG_28);
   119ae:	88 e2       	ldi	r24, 0x28	; 40
   119b0:	0e 94 55 7a 	call	0xf4aa	; 0xf4aa <IFTSendMessage>
}
   119b4:	08 95       	ret

000119b6 <FMenuReprint>:
	       break;
	 }
return Result;
}

char FMenuReprint(){
   119b6:	0f 93       	push	r16
   119b8:	1f 93       	push	r17
   119ba:	df 93       	push	r29
   119bc:	cf 93       	push	r28
   119be:	cd b7       	in	r28, 0x3d	; 61
   119c0:	de b7       	in	r29, 0x3e	; 62
   119c2:	64 97       	sbiw	r28, 0x14	; 20
   119c4:	0f b6       	in	r0, 0x3f	; 63
   119c6:	f8 94       	cli
   119c8:	de bf       	out	0x3e, r29	; 62
   119ca:	0f be       	out	0x3f, r0	; 63
   119cc:	cd bf       	out	0x3d, r28	; 61
static char KeyPressed=0,FIP_Used=0;
       char lcdteks[20],FIPResult,KeyChar;//,FIP_USED;
	   char PassResult,Result=MENU_NONE,ReprintResult;

     Result=MENU_NONE;
	 switch(stReprint){
   119ce:	80 91 68 02 	lds	r24, 0x0268
   119d2:	87 30       	cpi	r24, 0x07	; 7
   119d4:	09 f4       	brne	.+2      	; 0x119d8 <FMenuReprint+0x22>
   119d6:	9b c0       	rjmp	.+310    	; 0x11b0e <FMenuReprint+0x158>
   119d8:	88 30       	cpi	r24, 0x08	; 8
   119da:	90 f4       	brcc	.+36     	; 0x11a00 <FMenuReprint+0x4a>
   119dc:	83 30       	cpi	r24, 0x03	; 3
   119de:	09 f4       	brne	.+2      	; 0x119e2 <FMenuReprint+0x2c>
   119e0:	43 c0       	rjmp	.+134    	; 0x11a68 <FMenuReprint+0xb2>
   119e2:	84 30       	cpi	r24, 0x04	; 4
   119e4:	30 f4       	brcc	.+12     	; 0x119f2 <FMenuReprint+0x3c>
   119e6:	81 30       	cpi	r24, 0x01	; 1
   119e8:	09 f4       	brne	.+2      	; 0x119ec <FMenuReprint+0x36>
   119ea:	52 c0       	rjmp	.+164    	; 0x11a90 <FMenuReprint+0xda>
   119ec:	82 30       	cpi	r24, 0x02	; 2
   119ee:	48 f5       	brcc	.+82     	; 0x11a42 <FMenuReprint+0x8c>
   119f0:	1d c0       	rjmp	.+58     	; 0x11a2c <FMenuReprint+0x76>
   119f2:	85 30       	cpi	r24, 0x05	; 5
   119f4:	09 f4       	brne	.+2      	; 0x119f8 <FMenuReprint+0x42>
   119f6:	7c c0       	rjmp	.+248    	; 0x11af0 <FMenuReprint+0x13a>
   119f8:	86 30       	cpi	r24, 0x06	; 6
   119fa:	08 f0       	brcs	.+2      	; 0x119fe <FMenuReprint+0x48>
   119fc:	4d c0       	rjmp	.+154    	; 0x11a98 <FMenuReprint+0xe2>
   119fe:	42 c0       	rjmp	.+132    	; 0x11a84 <FMenuReprint+0xce>
   11a00:	8b 30       	cpi	r24, 0x0B	; 11
   11a02:	09 f4       	brne	.+2      	; 0x11a06 <FMenuReprint+0x50>
   11a04:	e5 c0       	rjmp	.+458    	; 0x11bd0 <FMenuReprint+0x21a>
   11a06:	8c 30       	cpi	r24, 0x0C	; 12
   11a08:	38 f4       	brcc	.+14     	; 0x11a18 <FMenuReprint+0x62>
   11a0a:	89 30       	cpi	r24, 0x09	; 9
   11a0c:	09 f4       	brne	.+2      	; 0x11a10 <FMenuReprint+0x5a>
   11a0e:	c5 c0       	rjmp	.+394    	; 0x11b9a <FMenuReprint+0x1e4>
   11a10:	8a 30       	cpi	r24, 0x0A	; 10
   11a12:	08 f0       	brcs	.+2      	; 0x11a16 <FMenuReprint+0x60>
   11a14:	d7 c0       	rjmp	.+430    	; 0x11bc4 <FMenuReprint+0x20e>
   11a16:	89 c0       	rjmp	.+274    	; 0x11b2a <FMenuReprint+0x174>
   11a18:	8d 30       	cpi	r24, 0x0D	; 13
   11a1a:	09 f4       	brne	.+2      	; 0x11a1e <FMenuReprint+0x68>
   11a1c:	f6 c0       	rjmp	.+492    	; 0x11c0a <FMenuReprint+0x254>
   11a1e:	8d 30       	cpi	r24, 0x0D	; 13
   11a20:	08 f4       	brcc	.+2      	; 0x11a24 <FMenuReprint+0x6e>
   11a22:	e0 c0       	rjmp	.+448    	; 0x11be4 <FMenuReprint+0x22e>
   11a24:	8e 30       	cpi	r24, 0x0E	; 14
   11a26:	09 f0       	breq	.+2      	; 0x11a2a <FMenuReprint+0x74>
   11a28:	f9 c0       	rjmp	.+498    	; 0x11c1c <FMenuReprint+0x266>
   11a2a:	f4 c0       	rjmp	.+488    	; 0x11c14 <FMenuReprint+0x25e>
	 case rtInit:
	      lcd_clear();
   11a2c:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
          if (IFType==IT_SLAVE)stReprint=rtFIP;
   11a30:	80 91 00 01 	lds	r24, 0x0100
   11a34:	81 30       	cpi	r24, 0x01	; 1
   11a36:	09 f4       	brne	.+2      	; 0x11a3a <FMenuReprint+0x84>
   11a38:	c0 c0       	rjmp	.+384    	; 0x11bba <FMenuReprint+0x204>
		  else
		  if (IFType==IT_STANDALONE)stReprint=rtStandaloneFIP;//rtValidPassword;//rtStandaloneFIP;
   11a3a:	82 30       	cpi	r24, 0x02	; 2
   11a3c:	09 f0       	breq	.+2      	; 0x11a40 <FMenuReprint+0x8a>
   11a3e:	ee c0       	rjmp	.+476    	; 0x11c1c <FMenuReprint+0x266>
   11a40:	04 c0       	rjmp	.+8      	; 0x11a4a <FMenuReprint+0x94>
	      break;
     case rtValidPassword:
	      PassResult=FMenuPassword();
   11a42:	0e 94 b8 76 	call	0xed70	; 0xed70 <FMenuPassword>
	      if (PassResult==MP_VALID_ADMIN)stReprint=rtStandaloneFIP;
   11a46:	84 30       	cpi	r24, 0x04	; 4
   11a48:	11 f4       	brne	.+4      	; 0x11a4e <FMenuReprint+0x98>
   11a4a:	81 e0       	ldi	r24, 0x01	; 1
   11a4c:	0a c0       	rjmp	.+20     	; 0x11a62 <FMenuReprint+0xac>
		  else
	      if (PassResult==MP_VALID_SYSTEM)stReprint=rtInvalidPassword;
   11a4e:	85 30       	cpi	r24, 0x05	; 5
   11a50:	11 f0       	breq	.+4      	; 0x11a56 <FMenuReprint+0xa0>
          else
	      if (PassResult==MP_INVALID)stReprint=rtInvalidPassword;
   11a52:	82 30       	cpi	r24, 0x02	; 2
   11a54:	11 f4       	brne	.+4      	; 0x11a5a <FMenuReprint+0xa4>
   11a56:	83 e0       	ldi	r24, 0x03	; 3
   11a58:	04 c0       	rjmp	.+8      	; 0x11a62 <FMenuReprint+0xac>
		  else
	      if (PassResult==MP_CANCEL)stReprint=rtExitReprint;
   11a5a:	81 30       	cpi	r24, 0x01	; 1
   11a5c:	09 f0       	breq	.+2      	; 0x11a60 <FMenuReprint+0xaa>
   11a5e:	de c0       	rjmp	.+444    	; 0x11c1c <FMenuReprint+0x266>
   11a60:	8e e0       	ldi	r24, 0x0E	; 14
   11a62:	80 93 68 02 	sts	0x0268, r24
   11a66:	da c0       	rjmp	.+436    	; 0x11c1c <FMenuReprint+0x266>
	      break;
     case rtInvalidPassword:
          TimDisplay=0;
   11a68:	10 92 92 01 	sts	0x0192, r1
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   11a6c:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   11a6e:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   11a70:	81 e0       	ldi	r24, 0x01	; 1
   11a72:	80 93 bc 01 	sts	0x01BC, r24
	      if (PassResult==MP_CANCEL)stReprint=rtExitReprint;
	      break;
     case rtInvalidPassword:
          TimDisplay=0;
		  system_beep(1);
		  lcd_printf(3,1,PSTR("Access Denied"));
   11a76:	83 e0       	ldi	r24, 0x03	; 3
   11a78:	61 e0       	ldi	r22, 0x01	; 1
   11a7a:	4b ec       	ldi	r20, 0xCB	; 203
   11a7c:	5d e1       	ldi	r21, 0x1D	; 29
   11a7e:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
   11a82:	43 c0       	rjmp	.+134    	; 0x11b0a <FMenuReprint+0x154>
          stReprint=rtTimDisplayInvalid;
	      break;
     case rtTimDisplayInvalid:
	      if (TimDisplay>2)stReprint=rtExitReprint;
   11a84:	80 91 92 01 	lds	r24, 0x0192
   11a88:	83 30       	cpi	r24, 0x03	; 3
   11a8a:	08 f4       	brcc	.+2      	; 0x11a8e <FMenuReprint+0xd8>
   11a8c:	c7 c0       	rjmp	.+398    	; 0x11c1c <FMenuReprint+0x266>
   11a8e:	e8 cf       	rjmp	.-48     	; 0x11a60 <FMenuReprint+0xaa>
	      break;
     case rtStandaloneFIP:
	      _scr_pump();
   11a90:	0e 94 f4 47 	call	0x8fe8	; 0x8fe8 <_scr_pump>
		  stReprint=rtStandaloneInputFIP;
   11a94:	86 e0       	ldi	r24, 0x06	; 6
   11a96:	e5 cf       	rjmp	.-54     	; 0x11a62 <FMenuReprint+0xac>
	      break;
     case rtStandaloneInputFIP:
		  KeyChar=_key_btn(_key_scan(1));
   11a98:	81 e0       	ldi	r24, 0x01	; 1
   11a9a:	0e 94 6d a6 	call	0x14cda	; 0x14cda <_key_scan>
   11a9e:	0e 94 ce a5 	call	0x14b9c	; 0x14b9c <_key_btn>
   11aa2:	98 2f       	mov	r25, r24
		  if ((KeyChar>='1')&&(KeyChar<='8')){
   11aa4:	81 53       	subi	r24, 0x31	; 49
   11aa6:	88 30       	cpi	r24, 0x08	; 8
   11aa8:	f8 f4       	brcc	.+62     	; 0x11ae8 <FMenuReprint+0x132>
		       SendPoolingCommand(SC_TRANSACTION,GetPumpID(KeyChar-'0'));
   11aaa:	09 2f       	mov	r16, r25
   11aac:	00 53       	subi	r16, 0x30	; 48
   11aae:	80 2f       	mov	r24, r16
   11ab0:	0e 94 99 20 	call	0x4132	; 0x4132 <GetPumpID>
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
   11ab4:	94 e0       	ldi	r25, 0x04	; 4
   11ab6:	90 93 a7 05 	sts	0x05A7, r25
	 PoolMsg=plMsg;
   11aba:	80 93 d3 0b 	sts	0x0BD3, r24
     IsControlPooling=True;
   11abe:	81 e0       	ldi	r24, 0x01	; 1
   11ac0:	80 93 84 01 	sts	0x0184, r24
	      break;
     case rtStandaloneInputFIP:
		  KeyChar=_key_btn(_key_scan(1));
		  if ((KeyChar>='1')&&(KeyChar<='8')){
		       SendPoolingCommand(SC_TRANSACTION,GetPumpID(KeyChar-'0'));
			   TimSend=0;
   11ac4:	10 92 79 0c 	sts	0x0C79, r1
			   while(TimSend<6){};
   11ac8:	80 91 79 0c 	lds	r24, 0x0C79
   11acc:	86 30       	cpi	r24, 0x06	; 6
   11ace:	e0 f3       	brcs	.-8      	; 0x11ac8 <FMenuReprint+0x112>
		       ReprintResult=PrintStandalone(KeyChar-'0',True);
   11ad0:	80 2f       	mov	r24, r16
   11ad2:	61 e0       	ldi	r22, 0x01	; 1
   11ad4:	0e 94 5e 45 	call	0x8abc	; 0x8abc <PrintStandalone>
			   if (ReprintResult==PS_NO_DATA)stReprint=rtDisplayNoTransaction;
   11ad8:	82 31       	cpi	r24, 0x12	; 18
   11ada:	11 f4       	brne	.+4      	; 0x11ae0 <FMenuReprint+0x12a>
   11adc:	85 e0       	ldi	r24, 0x05	; 5
   11ade:	c1 cf       	rjmp	.-126    	; 0x11a62 <FMenuReprint+0xac>
			   else if (ReprintResult==PS_PRINTED)stReprint=rtExitReprint;               
   11ae0:	81 31       	cpi	r24, 0x11	; 17
   11ae2:	09 f0       	breq	.+2      	; 0x11ae6 <FMenuReprint+0x130>
   11ae4:	9b c0       	rjmp	.+310    	; 0x11c1c <FMenuReprint+0x266>
   11ae6:	bc cf       	rjmp	.-136    	; 0x11a60 <FMenuReprint+0xaa>
			   //stReprint=rtExitReprint;
		  }else if (KeyChar=='*')stReprint=rtExitReprint;
   11ae8:	9a 32       	cpi	r25, 0x2A	; 42
   11aea:	09 f0       	breq	.+2      	; 0x11aee <FMenuReprint+0x138>
   11aec:	97 c0       	rjmp	.+302    	; 0x11c1c <FMenuReprint+0x266>
   11aee:	b8 cf       	rjmp	.-144    	; 0x11a60 <FMenuReprint+0xaa>
	      break;
     case rtDisplayNoTransaction:
	      lcd_printf(3, 1,PSTR("Tidak Ada Transaksi "));
   11af0:	83 e0       	ldi	r24, 0x03	; 3
   11af2:	61 e0       	ldi	r22, 0x01	; 1
   11af4:	46 eb       	ldi	r20, 0xB6	; 182
   11af6:	5d e1       	ldi	r21, 0x1D	; 29
   11af8:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   11afc:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   11afe:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   11b00:	81 e0       	ldi	r24, 0x01	; 1
   11b02:	80 93 bc 01 	sts	0x01BC, r24
		  }else if (KeyChar=='*')stReprint=rtExitReprint;
	      break;
     case rtDisplayNoTransaction:
	      lcd_printf(3, 1,PSTR("Tidak Ada Transaksi "));
		  system_beep(1);
          TimDisplay=0;
   11b06:	10 92 92 01 	sts	0x0192, r1
		  stReprint=rtTimDisplayInvalid;
   11b0a:	84 e0       	ldi	r24, 0x04	; 4
   11b0c:	aa cf       	rjmp	.-172    	; 0x11a62 <FMenuReprint+0xac>
	      break;
	 case rtFIP:
	      FIPResult=menu_FIP(&FIP_Used,strFIP_ID);
   11b0e:	86 e6       	ldi	r24, 0x66	; 102
   11b10:	92 e0       	ldi	r25, 0x02	; 2
   11b12:	69 eb       	ldi	r22, 0xB9	; 185
   11b14:	77 e0       	ldi	r23, 0x07	; 7
   11b16:	0e 94 5b 55 	call	0xaab6	; 0xaab6 <menu_FIP>
		  if (FIPResult==FIP_DONE){
   11b1a:	88 23       	and	r24, r24
   11b1c:	11 f4       	brne	.+4      	; 0x11b22 <FMenuReprint+0x16c>
		      stReprint=rtRFID;
   11b1e:	88 e0       	ldi	r24, 0x08	; 8
   11b20:	a0 cf       	rjmp	.-192    	; 0x11a62 <FMenuReprint+0xac>
			  }
		  else
		  if (FIPResult==FIP_CANCEL)stReprint=rtExitReprint;
   11b22:	82 30       	cpi	r24, 0x02	; 2
   11b24:	09 f0       	breq	.+2      	; 0x11b28 <FMenuReprint+0x172>
   11b26:	7a c0       	rjmp	.+244    	; 0x11c1c <FMenuReprint+0x266>
   11b28:	9b cf       	rjmp	.-202    	; 0x11a60 <FMenuReprint+0xaa>
	      break;
	 case rtRFID:
	      lcd_clear();
   11b2a:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
		  sprintf_P(lcdteks,PSTR("RePrint FIP:%s "),strFIP_ID);lcd_print(1,1,lcdteks);
   11b2e:	00 d0       	rcall	.+0      	; 0x11b30 <FMenuReprint+0x17a>
   11b30:	00 d0       	rcall	.+0      	; 0x11b32 <FMenuReprint+0x17c>
   11b32:	00 d0       	rcall	.+0      	; 0x11b34 <FMenuReprint+0x17e>
   11b34:	ed b7       	in	r30, 0x3d	; 61
   11b36:	fe b7       	in	r31, 0x3e	; 62
   11b38:	31 96       	adiw	r30, 0x01	; 1
   11b3a:	8e 01       	movw	r16, r28
   11b3c:	0f 5f       	subi	r16, 0xFF	; 255
   11b3e:	1f 4f       	sbci	r17, 0xFF	; 255
   11b40:	ad b7       	in	r26, 0x3d	; 61
   11b42:	be b7       	in	r27, 0x3e	; 62
   11b44:	12 96       	adiw	r26, 0x02	; 2
   11b46:	1c 93       	st	X, r17
   11b48:	0e 93       	st	-X, r16
   11b4a:	11 97       	sbiw	r26, 0x01	; 1
   11b4c:	86 ea       	ldi	r24, 0xA6	; 166
   11b4e:	9d e1       	ldi	r25, 0x1D	; 29
   11b50:	93 83       	std	Z+3, r25	; 0x03
   11b52:	82 83       	std	Z+2, r24	; 0x02
   11b54:	89 eb       	ldi	r24, 0xB9	; 185
   11b56:	97 e0       	ldi	r25, 0x07	; 7
   11b58:	95 83       	std	Z+5, r25	; 0x05
   11b5a:	84 83       	std	Z+4, r24	; 0x04
   11b5c:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
   11b60:	8d b7       	in	r24, 0x3d	; 61
   11b62:	9e b7       	in	r25, 0x3e	; 62
   11b64:	06 96       	adiw	r24, 0x06	; 6
   11b66:	0f b6       	in	r0, 0x3f	; 63
   11b68:	f8 94       	cli
   11b6a:	9e bf       	out	0x3e, r25	; 62
   11b6c:	0f be       	out	0x3f, r0	; 63
   11b6e:	8d bf       	out	0x3d, r24	; 61
   11b70:	81 e0       	ldi	r24, 0x01	; 1
   11b72:	61 e0       	ldi	r22, 0x01	; 1
   11b74:	a8 01       	movw	r20, r16
   11b76:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
		  lcd_printf(2,1,PSTR(  "Tap Supervisor Card"));
   11b7a:	82 e0       	ldi	r24, 0x02	; 2
   11b7c:	61 e0       	ldi	r22, 0x01	; 1
   11b7e:	42 e9       	ldi	r20, 0x92	; 146
   11b80:	5d e1       	ldi	r21, 0x1D	; 29
   11b82:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
          lcd_printf(4,1,PSTR(  "[*]Back    [#]Exit"));
   11b86:	84 e0       	ldi	r24, 0x04	; 4
   11b88:	61 e0       	ldi	r22, 0x01	; 1
   11b8a:	4f e7       	ldi	r20, 0x7F	; 127
   11b8c:	5d e1       	ldi	r21, 0x1D	; 29
   11b8e:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  IsRFIDDetected=False;
   11b92:	10 92 98 01 	sts	0x0198, r1
		  stReprint=rtInputRFID;
   11b96:	89 e0       	ldi	r24, 0x09	; 9
   11b98:	64 cf       	rjmp	.-312    	; 0x11a62 <FMenuReprint+0xac>
	      break;
	 case rtInputRFID:
	      if (IsRFIDDetected==True){
   11b9a:	80 91 98 01 	lds	r24, 0x0198
   11b9e:	81 30       	cpi	r24, 0x01	; 1
   11ba0:	29 f4       	brne	.+10     	; 0x11bac <FMenuReprint+0x1f6>
		      IsRFIDDetected=False;
   11ba2:	10 92 98 01 	sts	0x0198, r1
		      stReprint=rtSendMessage28;
   11ba6:	8a e0       	ldi	r24, 0x0A	; 10
   11ba8:	80 93 68 02 	sts	0x0268, r24
		  }
	 	  KeyPressed=_key_scan(1);
   11bac:	81 e0       	ldi	r24, 0x01	; 1
   11bae:	0e 94 6d a6 	call	0x14cda	; 0x14cda <_key_scan>
   11bb2:	80 93 67 02 	sts	0x0267, r24
		  if (KeyPressed==_KEY_CANCEL){
   11bb6:	87 3e       	cpi	r24, 0xE7	; 231
   11bb8:	11 f4       	brne	.+4      	; 0x11bbe <FMenuReprint+0x208>
		      stReprint=rtFIP;
   11bba:	87 e0       	ldi	r24, 0x07	; 7
   11bbc:	52 cf       	rjmp	.-348    	; 0x11a62 <FMenuReprint+0xac>
			  }
		  else
		  if (KeyPressed==_KEY_ENTER)stReprint=rtExitReprint;
   11bbe:	87 3b       	cpi	r24, 0xB7	; 183
   11bc0:	69 f5       	brne	.+90     	; 0x11c1c <FMenuReprint+0x266>
   11bc2:	4e cf       	rjmp	.-356    	; 0x11a60 <FMenuReprint+0xaa>
	      break;
     case rtSendMessage28:
		  sendMessage28();
   11bc4:	0e 94 d7 8c 	call	0x119ae	; 0x119ae <sendMessage28>
		  TimSend=0;
   11bc8:	10 92 79 0c 	sts	0x0C79, r1
		  stReprint=rtWaitReply;
   11bcc:	8b e0       	ldi	r24, 0x0B	; 11
   11bce:	49 cf       	rjmp	.-366    	; 0x11a62 <FMenuReprint+0xac>
		  break;
     case rtWaitReply:
	      if (TimSend>TIM_SEND*3)stReprint=rtNoConnection;
   11bd0:	80 91 79 0c 	lds	r24, 0x0C79
   11bd4:	8f 31       	cpi	r24, 0x1F	; 31
   11bd6:	18 f0       	brcs	.+6      	; 0x11bde <FMenuReprint+0x228>
   11bd8:	8c e0       	ldi	r24, 0x0C	; 12
   11bda:	80 93 68 02 	sts	0x0268, r24
	      if (IsMessage99==True){
   11bde:	80 91 9f 01 	lds	r24, 0x019F
   11be2:	3b cf       	rjmp	.-394    	; 0x11a5a <FMenuReprint+0xa4>
		      stReprint=rtExitReprint;
		  }
	      break;
     case rtNoConnection:
	      lcd_clear();
   11be4:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
		  lcd_printf(2,1,PSTR("TCP/IP ERROR "));
   11be8:	82 e0       	ldi	r24, 0x02	; 2
   11bea:	61 e0       	ldi	r22, 0x01	; 1
   11bec:	41 e7       	ldi	r20, 0x71	; 113
   11bee:	5d e1       	ldi	r21, 0x1D	; 29
   11bf0:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  lcd_printf(3,1,PSTR("No Connection"));
   11bf4:	83 e0       	ldi	r24, 0x03	; 3
   11bf6:	61 e0       	ldi	r22, 0x01	; 1
   11bf8:	43 e6       	ldi	r20, 0x63	; 99
   11bfa:	5d e1       	ldi	r21, 0x1D	; 29
   11bfc:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  TimDisplay=5;
   11c00:	85 e0       	ldi	r24, 0x05	; 5
   11c02:	80 93 92 01 	sts	0x0192, r24
		  stReprint=rtDelayExitReprint;
   11c06:	8d e0       	ldi	r24, 0x0D	; 13
   11c08:	2c cf       	rjmp	.-424    	; 0x11a62 <FMenuReprint+0xac>
	      break;
     case rtDelayExitReprint:
	      if(TimDisplay>=10)stReprint=rtExitReprint;
   11c0a:	80 91 92 01 	lds	r24, 0x0192
   11c0e:	8a 30       	cpi	r24, 0x0A	; 10
   11c10:	28 f0       	brcs	.+10     	; 0x11c1c <FMenuReprint+0x266>
   11c12:	26 cf       	rjmp	.-436    	; 0x11a60 <FMenuReprint+0xaa>
	      break;
	 case rtExitReprint:
	      stReprint=rtInit;
   11c14:	10 92 68 02 	sts	0x0268, r1
   11c18:	81 e0       	ldi	r24, 0x01	; 1
   11c1a:	01 c0       	rjmp	.+2      	; 0x11c1e <FMenuReprint+0x268>
   11c1c:	80 e0       	ldi	r24, 0x00	; 0
		  Result=MENU_DONE;
	      break;
	 }
  return Result;
}
   11c1e:	64 96       	adiw	r28, 0x14	; 20
   11c20:	0f b6       	in	r0, 0x3f	; 63
   11c22:	f8 94       	cli
   11c24:	de bf       	out	0x3e, r29	; 62
   11c26:	0f be       	out	0x3f, r0	; 63
   11c28:	cd bf       	out	0x3d, r28	; 61
   11c2a:	cf 91       	pop	r28
   11c2c:	df 91       	pop	r29
   11c2e:	1f 91       	pop	r17
   11c30:	0f 91       	pop	r16
   11c32:	08 95       	ret

00011c34 <FMenuAdmin>:

char FMenuAdmin(){
static char stMenuAdmin=maInitAdmin;
	 char SubMenu,KeyPressed,KeyChar,Result=MENU_NONE;
     
	 switch(stMenuAdmin){
   11c34:	80 91 4b 02 	lds	r24, 0x024B
   11c38:	83 30       	cpi	r24, 0x03	; 3
   11c3a:	09 f4       	brne	.+2      	; 0x11c3e <FMenuAdmin+0xa>
   11c3c:	66 c0       	rjmp	.+204    	; 0x11d0a <FMenuAdmin+0xd6>
   11c3e:	84 30       	cpi	r24, 0x04	; 4
   11c40:	30 f4       	brcc	.+12     	; 0x11c4e <FMenuAdmin+0x1a>
   11c42:	81 30       	cpi	r24, 0x01	; 1
   11c44:	69 f1       	breq	.+90     	; 0x11ca0 <FMenuAdmin+0x6c>
   11c46:	82 30       	cpi	r24, 0x02	; 2
   11c48:	08 f0       	brcs	.+2      	; 0x11c4c <FMenuAdmin+0x18>
   11c4a:	4d c0       	rjmp	.+154    	; 0x11ce6 <FMenuAdmin+0xb2>
   11c4c:	0d c0       	rjmp	.+26     	; 0x11c68 <FMenuAdmin+0x34>
   11c4e:	85 30       	cpi	r24, 0x05	; 5
   11c50:	09 f4       	brne	.+2      	; 0x11c54 <FMenuAdmin+0x20>
   11c52:	4e c0       	rjmp	.+156    	; 0x11cf0 <FMenuAdmin+0xbc>
   11c54:	85 30       	cpi	r24, 0x05	; 5
   11c56:	08 f4       	brcc	.+2      	; 0x11c5a <FMenuAdmin+0x26>
   11c58:	49 c0       	rjmp	.+146    	; 0x11cec <FMenuAdmin+0xb8>
   11c5a:	86 30       	cpi	r24, 0x06	; 6
   11c5c:	09 f4       	brne	.+2      	; 0x11c60 <FMenuAdmin+0x2c>
   11c5e:	51 c0       	rjmp	.+162    	; 0x11d02 <FMenuAdmin+0xce>
   11c60:	87 30       	cpi	r24, 0x07	; 7
   11c62:	09 f0       	breq	.+2      	; 0x11c66 <FMenuAdmin+0x32>
   11c64:	5a c0       	rjmp	.+180    	; 0x11d1a <FMenuAdmin+0xe6>
   11c66:	55 c0       	rjmp	.+170    	; 0x11d12 <FMenuAdmin+0xde>
	 case maInitAdmin:
		  lcd_clear();
   11c68:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
		  lcd_printf(1,1,PSTR("1)RePrint           "));
   11c6c:	81 e0       	ldi	r24, 0x01	; 1
   11c6e:	61 e0       	ldi	r22, 0x01	; 1
   11c70:	42 eb       	ldi	r20, 0xB2	; 178
   11c72:	57 e1       	ldi	r21, 0x17	; 23
   11c74:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  lcd_printf(2,1,PSTR("2)CloseShift        "));
   11c78:	82 e0       	ldi	r24, 0x02	; 2
   11c7a:	61 e0       	ldi	r22, 0x01	; 1
   11c7c:	4d e9       	ldi	r20, 0x9D	; 157
   11c7e:	57 e1       	ldi	r21, 0x17	; 23
   11c80:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  lcd_printf(3,1,PSTR("3)CloseDay          "));		  
   11c84:	83 e0       	ldi	r24, 0x03	; 3
   11c86:	61 e0       	ldi	r22, 0x01	; 1
   11c88:	48 e8       	ldi	r20, 0x88	; 136
   11c8a:	57 e1       	ldi	r21, 0x17	; 23
   11c8c:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  lcd_printf(4,1,PSTR("4)Settings   *)Exit "));
   11c90:	84 e0       	ldi	r24, 0x04	; 4
   11c92:	61 e0       	ldi	r22, 0x01	; 1
   11c94:	43 e7       	ldi	r20, 0x73	; 115
   11c96:	57 e1       	ldi	r21, 0x17	; 23
   11c98:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
	      stMenuAdmin=maSelectOptions;
   11c9c:	81 e0       	ldi	r24, 0x01	; 1
   11c9e:	2e c0       	rjmp	.+92     	; 0x11cfc <FMenuAdmin+0xc8>
	      break;
	 case maSelectOptions:
          KeyPressed=_key_scan(1);
   11ca0:	81 e0       	ldi	r24, 0x01	; 1
   11ca2:	0e 94 6d a6 	call	0x14cda	; 0x14cda <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
   11ca6:	0e 94 ce a5 	call	0x14b9c	; 0x14b9c <_key_btn>
		  switch (KeyChar){
   11caa:	82 33       	cpi	r24, 0x32	; 50
   11cac:	71 f0       	breq	.+28     	; 0x11cca <FMenuAdmin+0x96>
   11cae:	83 33       	cpi	r24, 0x33	; 51
   11cb0:	28 f4       	brcc	.+10     	; 0x11cbc <FMenuAdmin+0x88>
   11cb2:	8a 32       	cpi	r24, 0x2A	; 42
   11cb4:	11 f1       	breq	.+68     	; 0x11cfa <FMenuAdmin+0xc6>
   11cb6:	81 33       	cpi	r24, 0x31	; 49
   11cb8:	81 f5       	brne	.+96     	; 0x11d1a <FMenuAdmin+0xe6>
   11cba:	05 c0       	rjmp	.+10     	; 0x11cc6 <FMenuAdmin+0x92>
   11cbc:	83 33       	cpi	r24, 0x33	; 51
   11cbe:	59 f0       	breq	.+22     	; 0x11cd6 <FMenuAdmin+0xa2>
   11cc0:	84 33       	cpi	r24, 0x34	; 52
   11cc2:	59 f5       	brne	.+86     	; 0x11d1a <FMenuAdmin+0xe6>
   11cc4:	0e c0       	rjmp	.+28     	; 0x11ce2 <FMenuAdmin+0xae>
		  case '1':
		       stMenuAdmin=maMenuReprint;//maMenuAdminConfig;
   11cc6:	82 e0       	ldi	r24, 0x02	; 2
   11cc8:	19 c0       	rjmp	.+50     	; 0x11cfc <FMenuAdmin+0xc8>
		       break;  
		  case '2':
		       if (IFType==IT_STANDALONE)
   11cca:	80 91 00 01 	lds	r24, 0x0100
   11cce:	82 30       	cpi	r24, 0x02	; 2
   11cd0:	e1 f4       	brne	.+56     	; 0x11d0a <FMenuAdmin+0xd6>
			       stMenuAdmin=maMenuCloseShift;
   11cd2:	84 e0       	ldi	r24, 0x04	; 4
   11cd4:	13 c0       	rjmp	.+38     	; 0x11cfc <FMenuAdmin+0xc8>
               else stMenuAdmin=maInitAdmin;
		       break;  
		  case '3':
		       if (IFType==IT_STANDALONE)stMenuAdmin=maMenuCloseDay;
   11cd6:	80 91 00 01 	lds	r24, 0x0100
   11cda:	82 30       	cpi	r24, 0x02	; 2
   11cdc:	b1 f4       	brne	.+44     	; 0x11d0a <FMenuAdmin+0xd6>
   11cde:	85 e0       	ldi	r24, 0x05	; 5
   11ce0:	0d c0       	rjmp	.+26     	; 0x11cfc <FMenuAdmin+0xc8>
               else stMenuAdmin=maInitAdmin;
		       break;  
		  case '4':
		  	   stMenuAdmin=maMenuAdminSettings;
   11ce2:	86 e0       	ldi	r24, 0x06	; 6
   11ce4:	0b c0       	rjmp	.+22     	; 0x11cfc <FMenuAdmin+0xc8>
    		   stMenuAdmin=maExitMenuAdmin;
		       break;  		  
		  }		  
	      break;
     case maMenuReprint:
	      SubMenu=FMenuReprint();
   11ce6:	0e 94 db 8c 	call	0x119b6	; 0x119b6 <FMenuReprint>
   11cea:	05 c0       	rjmp	.+10     	; 0x11cf6 <FMenuAdmin+0xc2>
	 case maMenuAdminConfig://ChangePassword[],RePrint,PumpTest
	      SubMenu=FSubMenuAdmin();
		  if (SubMenu==MENU_DONE)stMenuAdmin=maInitAdmin;
          break;	 
	 case maMenuCloseShift:
	 	  SubMenu=FCloseShift(CONTINUE_SHIFT);
   11cec:	82 e0       	ldi	r24, 0x02	; 2
   11cee:	01 c0       	rjmp	.+2      	; 0x11cf2 <FMenuAdmin+0xbe>
		  if (SubMenu==MENU_DONE)stMenuAdmin=maExitMenuAdmin;
	      break;
     case maMenuCloseDay://maMenuCloseShift,maMenuCloseDay
	 	  SubMenu=FCloseShift(NEW_SHIFT);
   11cf0:	81 e0       	ldi	r24, 0x01	; 1
   11cf2:	0e 94 28 4a 	call	0x9450	; 0x9450 <FCloseShift>
		  if (SubMenu==MENU_DONE)stMenuAdmin=maExitMenuAdmin;
   11cf6:	81 30       	cpi	r24, 0x01	; 1
   11cf8:	81 f4       	brne	.+32     	; 0x11d1a <FMenuAdmin+0xe6>
   11cfa:	87 e0       	ldi	r24, 0x07	; 7
   11cfc:	80 93 4b 02 	sts	0x024B, r24
   11d00:	06 c0       	rjmp	.+12     	; 0x11d0e <FMenuAdmin+0xda>
	      break;
     case maMenuAdminSettings:
	      SubMenu=FMenuAdminSettings();
   11d02:	0e 94 2d 73 	call	0xe65a	; 0xe65a <FMenuAdminSettings>
		  if (SubMenu==MENU_DONE)stMenuAdmin=maInitAdmin;	      
   11d06:	81 30       	cpi	r24, 0x01	; 1
   11d08:	41 f4       	brne	.+16     	; 0x11d1a <FMenuAdmin+0xe6>
   11d0a:	10 92 4b 02 	sts	0x024B, r1
   11d0e:	80 e0       	ldi	r24, 0x00	; 0
   11d10:	08 95       	ret
	      break;
     case maExitMenuAdmin:
	      stMenuAdmin=maInitAdmin;	      
   11d12:	10 92 4b 02 	sts	0x024B, r1
   11d16:	81 e0       	ldi	r24, 0x01	; 1
   11d18:	08 95       	ret
   11d1a:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
          break;	 
	 }
   return Result;
}
   11d1c:	08 95       	ret

00011d1e <FMenuAuthorization>:


char FMenuAuthorization(){
char Result=MENU_NONE,PassResult=MP_NONE,SubMenu=MENU_NONE;
static char stMenuAuthorization=maInit,PassTry=0;
     switch(stMenuAuthorization){
   11d1e:	80 91 5a 02 	lds	r24, 0x025A
   11d22:	83 30       	cpi	r24, 0x03	; 3
   11d24:	51 f1       	breq	.+84     	; 0x11d7a <FMenuAuthorization+0x5c>
   11d26:	84 30       	cpi	r24, 0x04	; 4
   11d28:	28 f4       	brcc	.+10     	; 0x11d34 <FMenuAuthorization+0x16>
   11d2a:	81 30       	cpi	r24, 0x01	; 1
   11d2c:	81 f0       	breq	.+32     	; 0x11d4e <FMenuAuthorization+0x30>
   11d2e:	82 30       	cpi	r24, 0x02	; 2
   11d30:	38 f5       	brcc	.+78     	; 0x11d80 <FMenuAuthorization+0x62>
   11d32:	0a c0       	rjmp	.+20     	; 0x11d48 <FMenuAuthorization+0x2a>
   11d34:	85 30       	cpi	r24, 0x05	; 5
   11d36:	61 f1       	breq	.+88     	; 0x11d90 <FMenuAuthorization+0x72>
   11d38:	85 30       	cpi	r24, 0x05	; 5
   11d3a:	28 f1       	brcs	.+74     	; 0x11d86 <FMenuAuthorization+0x68>
   11d3c:	86 30       	cpi	r24, 0x06	; 6
   11d3e:	e1 f1       	breq	.+120    	; 0x11db8 <FMenuAuthorization+0x9a>
   11d40:	87 30       	cpi	r24, 0x07	; 7
   11d42:	09 f0       	breq	.+2      	; 0x11d46 <FMenuAuthorization+0x28>
   11d44:	4c c0       	rjmp	.+152    	; 0x11dde <FMenuAuthorization+0xc0>
   11d46:	47 c0       	rjmp	.+142    	; 0x11dd6 <FMenuAuthorization+0xb8>
	 case maInit:
	      PassTry=0;
   11d48:	10 92 59 02 	sts	0x0259, r1
   11d4c:	3d c0       	rjmp	.+122    	; 0x11dc8 <FMenuAuthorization+0xaa>
		  stMenuAuthorization=maInputPassword;
	      break;
	 case maInputPassword:
	      PassResult=FMenuPassword();
   11d4e:	0e 94 b8 76 	call	0xed70	; 0xed70 <FMenuPassword>
		  switch(PassResult){
   11d52:	83 30       	cpi	r24, 0x03	; 3
   11d54:	e1 f1       	breq	.+120    	; 0x11dce <FMenuAuthorization+0xb0>
   11d56:	84 30       	cpi	r24, 0x04	; 4
   11d58:	28 f4       	brcc	.+10     	; 0x11d64 <FMenuAuthorization+0x46>
   11d5a:	81 30       	cpi	r24, 0x01	; 1
   11d5c:	b9 f1       	breq	.+110    	; 0x11dcc <FMenuAuthorization+0xae>
   11d5e:	82 30       	cpi	r24, 0x02	; 2
   11d60:	f1 f5       	brne	.+124    	; 0x11dde <FMenuAuthorization+0xc0>
   11d62:	09 c0       	rjmp	.+18     	; 0x11d76 <FMenuAuthorization+0x58>
   11d64:	84 30       	cpi	r24, 0x04	; 4
   11d66:	19 f0       	breq	.+6      	; 0x11d6e <FMenuAuthorization+0x50>
   11d68:	85 30       	cpi	r24, 0x05	; 5
   11d6a:	c9 f5       	brne	.+114    	; 0x11dde <FMenuAuthorization+0xc0>
   11d6c:	02 c0       	rjmp	.+4      	; 0x11d72 <FMenuAuthorization+0x54>
		  case MP_VALID_ADMIN:
		       stMenuAuthorization=maMenuAdmin;
   11d6e:	82 e0       	ldi	r24, 0x02	; 2
   11d70:	2e c0       	rjmp	.+92     	; 0x11dce <FMenuAuthorization+0xb0>
		       break;
		  case MP_VALID_SYSTEM:
		       stMenuAuthorization=maMenuSettings;
   11d72:	84 e0       	ldi	r24, 0x04	; 4
   11d74:	2c c0       	rjmp	.+88     	; 0x11dce <FMenuAuthorization+0xb0>
		       break;
		  case MP_INVALID:
		       stMenuAuthorization=maInvalidAuthorization;
   11d76:	85 e0       	ldi	r24, 0x05	; 5
   11d78:	2a c0       	rjmp	.+84     	; 0x11dce <FMenuAuthorization+0xb0>
		  else
	      if (PassResult==MP_CANCEL)stMenuAuthorization=maExitAuthorization;
		  */
	      break;
	 case maMenuMaster:
	      SubMenu=FMenuMaster();
   11d7a:	0e 94 b4 73 	call	0xe768	; 0xe768 <FMenuMaster>
   11d7e:	05 c0       	rjmp	.+10     	; 0x11d8a <FMenuAuthorization+0x6c>
		  if (SubMenu==MENU_DONE)stMenuAuthorization=maExitAuthorization;
	      break;
	 case maMenuAdmin:
          SubMenu=FMenuAdmin();
   11d80:	0e 94 1a 8e 	call	0x11c34	; 0x11c34 <FMenuAdmin>
   11d84:	02 c0       	rjmp	.+4      	; 0x11d8a <FMenuAuthorization+0x6c>
		  if (SubMenu==MENU_DONE)stMenuAuthorization=maExitAuthorization;          
		  break;
	 case maMenuSettings:
	      SubMenu=FMenuSettings();
   11d86:	0e 94 13 79 	call	0xf226	; 0xf226 <FMenuSettings>
		  if (SubMenu==MENU_DONE)stMenuAuthorization=maExitAuthorization;
   11d8a:	81 30       	cpi	r24, 0x01	; 1
   11d8c:	41 f5       	brne	.+80     	; 0x11dde <FMenuAuthorization+0xc0>
   11d8e:	1e c0       	rjmp	.+60     	; 0x11dcc <FMenuAuthorization+0xae>
          break;	 
	 case maInvalidAuthorization:
	      PassTry++;
   11d90:	80 91 59 02 	lds	r24, 0x0259
   11d94:	8f 5f       	subi	r24, 0xFF	; 255
   11d96:	80 93 59 02 	sts	0x0259, r24
	      TimDisplay=0;
   11d9a:	10 92 92 01 	sts	0x0192, r1
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   11d9e:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   11da0:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   11da2:	81 e0       	ldi	r24, 0x01	; 1
   11da4:	80 93 bc 01 	sts	0x01BC, r24
          break;	 
	 case maInvalidAuthorization:
	      PassTry++;
	      TimDisplay=0;
		  system_beep(1);
		  lcd_printf(3,1,PSTR("Access Denied"));
   11da8:	83 e0       	ldi	r24, 0x03	; 3
   11daa:	61 e0       	ldi	r22, 0x01	; 1
   11dac:	4a e6       	ldi	r20, 0x6A	; 106
   11dae:	5a e1       	ldi	r21, 0x1A	; 26
   11db0:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  stMenuAuthorization=maDelayExitAuthorization;
   11db4:	86 e0       	ldi	r24, 0x06	; 6
   11db6:	0b c0       	rjmp	.+22     	; 0x11dce <FMenuAuthorization+0xb0>
          break;	 
	 case maDelayExitAuthorization:
	      if (TimDisplay>2){
   11db8:	80 91 92 01 	lds	r24, 0x0192
   11dbc:	83 30       	cpi	r24, 0x03	; 3
   11dbe:	78 f0       	brcs	.+30     	; 0x11dde <FMenuAuthorization+0xc0>
		      if (PassTry<3)stMenuAuthorization=maInputPassword;
   11dc0:	80 91 59 02 	lds	r24, 0x0259
   11dc4:	83 30       	cpi	r24, 0x03	; 3
   11dc6:	10 f4       	brcc	.+4      	; 0x11dcc <FMenuAuthorization+0xae>
   11dc8:	81 e0       	ldi	r24, 0x01	; 1
   11dca:	01 c0       	rjmp	.+2      	; 0x11dce <FMenuAuthorization+0xb0>
			  else stMenuAuthorization=maExitAuthorization;
   11dcc:	87 e0       	ldi	r24, 0x07	; 7
   11dce:	80 93 5a 02 	sts	0x025A, r24
   11dd2:	80 e0       	ldi	r24, 0x00	; 0
   11dd4:	08 95       	ret
		  }
	      break;
	 case maExitAuthorization:
	      stMenuAuthorization=maInit;
   11dd6:	10 92 5a 02 	sts	0x025A, r1
   11dda:	81 e0       	ldi	r24, 0x01	; 1
   11ddc:	08 95       	ret
   11dde:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
	      break;
	 }
   return Result;	 
}
   11de0:	08 95       	ret

00011de2 <sendMessage24>:
    uart_print(1, 0,strSend);
	UpdateCardID();
	sprintf_P(strSend,PSTR("%s%sF968CFFB"),strCardID,strFIP_ID);
    uart_print(1, 0,strSend);
	uart(1, 1,0x02);
	*/IFTSendMessage(MSG_24);
   11de2:	84 e2       	ldi	r24, 0x24	; 36
   11de4:	0e 94 55 7a 	call	0xf4aa	; 0xf4aa <IFTSendMessage>
}
   11de8:	08 95       	ret

00011dea <sendMessage22>:
    uart_print(1, 0,strSend);
	UpdateCardID();
	sprintf_P(strSend,PSTR("%sF968CFFB"),strCardID);
    uart_print(1, 0,strSend);
	uart(1, 1,0x02);
	*/IFTSendMessage(MSG_22);
   11dea:	82 e2       	ldi	r24, 0x22	; 34
   11dec:	0e 94 55 7a 	call	0xf4aa	; 0xf4aa <IFTSendMessage>
}
   11df0:	08 95       	ret

00011df2 <FMenuLoyalty>:
	      break;
	 }
  return Result;
}

char FMenuLoyalty(){
   11df2:	cf 92       	push	r12
   11df4:	df 92       	push	r13
   11df6:	ef 92       	push	r14
   11df8:	ff 92       	push	r15
   11dfa:	0f 93       	push	r16
   11dfc:	1f 93       	push	r17
   11dfe:	df 93       	push	r29
   11e00:	cf 93       	push	r28
   11e02:	cd b7       	in	r28, 0x3d	; 61
   11e04:	de b7       	in	r29, 0x3e	; 62
   11e06:	64 97       	sbiw	r28, 0x14	; 20
   11e08:	0f b6       	in	r0, 0x3f	; 63
   11e0a:	f8 94       	cli
   11e0c:	de bf       	out	0x3e, r29	; 62
   11e0e:	0f be       	out	0x3f, r0	; 63
   11e10:	cd bf       	out	0x3d, r28	; 61
       char FIPResult,FIP_USED;
	   char Result=MENU_NONE;
	   char KeyPressed=0,KeyChar;

     Result=MENU_NONE;
	 switch(stLoyalty){
   11e12:	00 91 65 02 	lds	r16, 0x0265
   11e16:	07 30       	cpi	r16, 0x07	; 7
   11e18:	09 f4       	brne	.+2      	; 0x11e1c <FMenuLoyalty+0x2a>
   11e1a:	04 c1       	rjmp	.+520    	; 0x12024 <FMenuLoyalty+0x232>
   11e1c:	08 30       	cpi	r16, 0x08	; 8
   11e1e:	98 f4       	brcc	.+38     	; 0x11e46 <FMenuLoyalty+0x54>
   11e20:	03 30       	cpi	r16, 0x03	; 3
   11e22:	09 f4       	brne	.+2      	; 0x11e26 <FMenuLoyalty+0x34>
   11e24:	5b c0       	rjmp	.+182    	; 0x11edc <FMenuLoyalty+0xea>
   11e26:	04 30       	cpi	r16, 0x04	; 4
   11e28:	38 f4       	brcc	.+14     	; 0x11e38 <FMenuLoyalty+0x46>
   11e2a:	01 30       	cpi	r16, 0x01	; 1
   11e2c:	09 f4       	brne	.+2      	; 0x11e30 <FMenuLoyalty+0x3e>
   11e2e:	42 c0       	rjmp	.+132    	; 0x11eb4 <FMenuLoyalty+0xc2>
   11e30:	02 30       	cpi	r16, 0x02	; 2
   11e32:	08 f0       	brcs	.+2      	; 0x11e36 <FMenuLoyalty+0x44>
   11e34:	61 c0       	rjmp	.+194    	; 0x11ef8 <FMenuLoyalty+0x106>
   11e36:	20 c0       	rjmp	.+64     	; 0x11e78 <FMenuLoyalty+0x86>
   11e38:	05 30       	cpi	r16, 0x05	; 5
   11e3a:	09 f4       	brne	.+2      	; 0x11e3e <FMenuLoyalty+0x4c>
   11e3c:	a2 c0       	rjmp	.+324    	; 0x11f82 <FMenuLoyalty+0x190>
   11e3e:	06 30       	cpi	r16, 0x06	; 6
   11e40:	08 f0       	brcs	.+2      	; 0x11e44 <FMenuLoyalty+0x52>
   11e42:	ba c0       	rjmp	.+372    	; 0x11fb8 <FMenuLoyalty+0x1c6>
   11e44:	8c c0       	rjmp	.+280    	; 0x11f5e <FMenuLoyalty+0x16c>
   11e46:	0b 30       	cpi	r16, 0x0B	; 11
   11e48:	09 f4       	brne	.+2      	; 0x11e4c <FMenuLoyalty+0x5a>
   11e4a:	36 c1       	rjmp	.+620    	; 0x120b8 <FMenuLoyalty+0x2c6>
   11e4c:	0c 30       	cpi	r16, 0x0C	; 12
   11e4e:	38 f4       	brcc	.+14     	; 0x11e5e <FMenuLoyalty+0x6c>
   11e50:	09 30       	cpi	r16, 0x09	; 9
   11e52:	09 f4       	brne	.+2      	; 0x11e56 <FMenuLoyalty+0x64>
   11e54:	f0 c0       	rjmp	.+480    	; 0x12036 <FMenuLoyalty+0x244>
   11e56:	0a 30       	cpi	r16, 0x0A	; 10
   11e58:	08 f0       	brcs	.+2      	; 0x11e5c <FMenuLoyalty+0x6a>
   11e5a:	10 c1       	rjmp	.+544    	; 0x1207c <FMenuLoyalty+0x28a>
   11e5c:	e6 c0       	rjmp	.+460    	; 0x1202a <FMenuLoyalty+0x238>
   11e5e:	0d 30       	cpi	r16, 0x0D	; 13
   11e60:	09 f4       	brne	.+2      	; 0x11e64 <FMenuLoyalty+0x72>
   11e62:	ea c1       	rjmp	.+980    	; 0x12238 <FMenuLoyalty+0x446>
   11e64:	0d 30       	cpi	r16, 0x0D	; 13
   11e66:	08 f4       	brcc	.+2      	; 0x11e6a <FMenuLoyalty+0x78>
   11e68:	f1 c1       	rjmp	.+994    	; 0x1224c <FMenuLoyalty+0x45a>
   11e6a:	0e 30       	cpi	r16, 0x0E	; 14
   11e6c:	09 f4       	brne	.+2      	; 0x11e70 <FMenuLoyalty+0x7e>
   11e6e:	00 c2       	rjmp	.+1024   	; 0x12270 <FMenuLoyalty+0x47e>
   11e70:	0f 30       	cpi	r16, 0x0F	; 15
   11e72:	09 f0       	breq	.+2      	; 0x11e76 <FMenuLoyalty+0x84>
   11e74:	09 c2       	rjmp	.+1042   	; 0x12288 <FMenuLoyalty+0x496>
   11e76:	02 c2       	rjmp	.+1028   	; 0x1227c <FMenuLoyalty+0x48a>
	 case mlInit:
	      lcd_clear();
   11e78:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
		  lcd_printf(1,1,PSTR("  Menu Loyalty   "));
   11e7c:	81 e0       	ldi	r24, 0x01	; 1
   11e7e:	61 e0       	ldi	r22, 0x01	; 1
   11e80:	41 e5       	ldi	r20, 0x51	; 81
   11e82:	5d e1       	ldi	r21, 0x1D	; 29
   11e84:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
          lcd_printf(1,1,PSTR("1.Enquiry        "));
   11e88:	81 e0       	ldi	r24, 0x01	; 1
   11e8a:	61 e0       	ldi	r22, 0x01	; 1
   11e8c:	4f e3       	ldi	r20, 0x3F	; 63
   11e8e:	5d e1       	ldi	r21, 0x1D	; 29
   11e90:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  lcd_printf(2,1,PSTR("2.Loyalty Update "));
   11e94:	82 e0       	ldi	r24, 0x02	; 2
   11e96:	61 e0       	ldi	r22, 0x01	; 1
   11e98:	4d e2       	ldi	r20, 0x2D	; 45
   11e9a:	5d e1       	ldi	r21, 0x1D	; 29
   11e9c:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
	      lcd_printf(4,1,PSTR("[*]Back          "));
   11ea0:	84 e0       	ldi	r24, 0x04	; 4
   11ea2:	61 e0       	ldi	r22, 0x01	; 1
   11ea4:	4b e1       	ldi	r20, 0x1B	; 27
   11ea6:	5d e1       	ldi	r21, 0x1D	; 29
   11ea8:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  IsLoyaltyUpdate=False;
   11eac:	10 92 63 02 	sts	0x0263, r1
		  stLoyalty=mlLoyaltySelect;
   11eb0:	81 e0       	ldi	r24, 0x01	; 1
   11eb2:	08 c0       	rjmp	.+16     	; 0x11ec4 <FMenuLoyalty+0xd2>
	      break;
	 case mlLoyaltySelect:
	 	  KeyPressed=_key_scan(1);
   11eb4:	81 e0       	ldi	r24, 0x01	; 1
   11eb6:	0e 94 6d a6 	call	0x14cda	; 0x14cda <_key_scan>
		  if (KeyPressed==_KEY_1){
   11eba:	8e 3e       	cpi	r24, 0xEE	; 238
   11ebc:	31 f4       	brne	.+12     	; 0x11eca <FMenuLoyalty+0xd8>
		      IsLoyaltyUpdate=False;
   11ebe:	10 92 63 02 	sts	0x0263, r1
		      stLoyalty=mlShowEnquiry;
   11ec2:	84 e0       	ldi	r24, 0x04	; 4
   11ec4:	80 93 65 02 	sts	0x0265, r24
   11ec8:	df c1       	rjmp	.+958    	; 0x12288 <FMenuLoyalty+0x496>
			  }
		  else
		  if (KeyPressed==_KEY_2){
   11eca:	8e 3d       	cpi	r24, 0xDE	; 222
   11ecc:	19 f4       	brne	.+6      	; 0x11ed4 <FMenuLoyalty+0xe2>
		      IsLoyaltyUpdate=True;
   11ece:	00 93 63 02 	sts	0x0263, r16
   11ed2:	69 c0       	rjmp	.+210    	; 0x11fa6 <FMenuLoyalty+0x1b4>
			  stLoyalty=mlSelectFIP;
			  }
		  if (KeyPressed==_KEY_CANCEL)stLoyalty=mlExitLoyalty;
   11ed4:	87 3e       	cpi	r24, 0xE7	; 231
   11ed6:	09 f4       	brne	.+2      	; 0x11eda <FMenuLoyalty+0xe8>
   11ed8:	cf c1       	rjmp	.+926    	; 0x12278 <FMenuLoyalty+0x486>
   11eda:	d6 c1       	rjmp	.+940    	; 0x12288 <FMenuLoyalty+0x496>
	      break;
     case mlSelectFIP:
	      FIPResult=menu_FIP(&FIP_Used,strFIP_ID);
   11edc:	84 e6       	ldi	r24, 0x64	; 100
   11ede:	92 e0       	ldi	r25, 0x02	; 2
   11ee0:	69 eb       	ldi	r22, 0xB9	; 185
   11ee2:	77 e0       	ldi	r23, 0x07	; 7
   11ee4:	0e 94 5b 55 	call	0xaab6	; 0xaab6 <menu_FIP>
		  if (FIPResult==FIP_DONE)stLoyalty=mlUpdateLoyalty;
   11ee8:	88 23       	and	r24, r24
   11eea:	11 f4       	brne	.+4      	; 0x11ef0 <FMenuLoyalty+0xfe>
   11eec:	82 e0       	ldi	r24, 0x02	; 2
   11eee:	ea cf       	rjmp	.-44     	; 0x11ec4 <FMenuLoyalty+0xd2>
		  else
		  if (FIPResult==FIP_CANCEL)stLoyalty=mlInit;
   11ef0:	82 30       	cpi	r24, 0x02	; 2
   11ef2:	09 f0       	breq	.+2      	; 0x11ef6 <FMenuLoyalty+0x104>
   11ef4:	c9 c1       	rjmp	.+914    	; 0x12288 <FMenuLoyalty+0x496>
   11ef6:	59 c0       	rjmp	.+178    	; 0x11faa <FMenuLoyalty+0x1b8>
	      break;
     case mlUpdateLoyalty: 
	      lcd_clear();
   11ef8:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
		  sprintf_P(lcdteks,PSTR("FIP:%s"),strFIP_ID);
   11efc:	00 d0       	rcall	.+0      	; 0x11efe <FMenuLoyalty+0x10c>
   11efe:	00 d0       	rcall	.+0      	; 0x11f00 <FMenuLoyalty+0x10e>
   11f00:	00 d0       	rcall	.+0      	; 0x11f02 <FMenuLoyalty+0x110>
   11f02:	ed b7       	in	r30, 0x3d	; 61
   11f04:	fe b7       	in	r31, 0x3e	; 62
   11f06:	31 96       	adiw	r30, 0x01	; 1
   11f08:	8e 01       	movw	r16, r28
   11f0a:	0f 5f       	subi	r16, 0xFF	; 255
   11f0c:	1f 4f       	sbci	r17, 0xFF	; 255
   11f0e:	ad b7       	in	r26, 0x3d	; 61
   11f10:	be b7       	in	r27, 0x3e	; 62
   11f12:	12 96       	adiw	r26, 0x02	; 2
   11f14:	1c 93       	st	X, r17
   11f16:	0e 93       	st	-X, r16
   11f18:	11 97       	sbiw	r26, 0x01	; 1
   11f1a:	84 e1       	ldi	r24, 0x14	; 20
   11f1c:	9d e1       	ldi	r25, 0x1D	; 29
   11f1e:	93 83       	std	Z+3, r25	; 0x03
   11f20:	82 83       	std	Z+2, r24	; 0x02
   11f22:	89 eb       	ldi	r24, 0xB9	; 185
   11f24:	97 e0       	ldi	r25, 0x07	; 7
   11f26:	95 83       	std	Z+5, r25	; 0x05
   11f28:	84 83       	std	Z+4, r24	; 0x04
   11f2a:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
		  lcd_printf(1,1,PSTR("Tap Kartu RFID"));
   11f2e:	8d b7       	in	r24, 0x3d	; 61
   11f30:	9e b7       	in	r25, 0x3e	; 62
   11f32:	06 96       	adiw	r24, 0x06	; 6
   11f34:	0f b6       	in	r0, 0x3f	; 63
   11f36:	f8 94       	cli
   11f38:	9e bf       	out	0x3e, r25	; 62
   11f3a:	0f be       	out	0x3f, r0	; 63
   11f3c:	8d bf       	out	0x3d, r24	; 61
   11f3e:	81 e0       	ldi	r24, 0x01	; 1
   11f40:	61 e0       	ldi	r22, 0x01	; 1
   11f42:	45 e0       	ldi	r20, 0x05	; 5
   11f44:	5d e1       	ldi	r21, 0x1D	; 29
   11f46:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  lcd_print(2,1,lcdteks);
   11f4a:	82 e0       	ldi	r24, 0x02	; 2
   11f4c:	61 e0       	ldi	r22, 0x01	; 1
   11f4e:	a8 01       	movw	r20, r16
   11f50:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
          lcd_printf(4,1,PSTR("[*]Back    [#]Exit"));
   11f54:	84 e0       	ldi	r24, 0x04	; 4
   11f56:	61 e0       	ldi	r22, 0x01	; 1
   11f58:	42 ef       	ldi	r20, 0xF2	; 242
   11f5a:	5c e1       	ldi	r21, 0x1C	; 28
   11f5c:	0c c0       	rjmp	.+24     	; 0x11f76 <FMenuLoyalty+0x184>
		  IsRFIDDetected=False;
	      stLoyalty=mlInputRFID;
	      break;
	 case mlShowEnquiry:
	      lcd_clear();
   11f5e:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
		  lcd_printf(1,1,PSTR("Tap Kartu RFID"));
   11f62:	81 e0       	ldi	r24, 0x01	; 1
   11f64:	61 e0       	ldi	r22, 0x01	; 1
   11f66:	43 ee       	ldi	r20, 0xE3	; 227
   11f68:	5c e1       	ldi	r21, 0x1C	; 28
   11f6a:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
          lcd_printf(4,1,PSTR("[*]Back    [#]Exit"));
   11f6e:	84 e0       	ldi	r24, 0x04	; 4
   11f70:	61 e0       	ldi	r22, 0x01	; 1
   11f72:	40 ed       	ldi	r20, 0xD0	; 208
   11f74:	5c e1       	ldi	r21, 0x1C	; 28
   11f76:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  IsRFIDDetected=False;
   11f7a:	10 92 98 01 	sts	0x0198, r1
		  stLoyalty=mlInputRFID;
   11f7e:	85 e0       	ldi	r24, 0x05	; 5
   11f80:	a1 cf       	rjmp	.-190    	; 0x11ec4 <FMenuLoyalty+0xd2>
	      break;
     case mlInputRFID:
	      if (IsRFIDDetected==True){
   11f82:	80 91 98 01 	lds	r24, 0x0198
   11f86:	81 30       	cpi	r24, 0x01	; 1
   11f88:	29 f4       	brne	.+10     	; 0x11f94 <FMenuLoyalty+0x1a2>
		      IsRFIDDetected=False;
   11f8a:	10 92 98 01 	sts	0x0198, r1
		      stLoyalty=mlShowProsesRFID;
   11f8e:	86 e0       	ldi	r24, 0x06	; 6
   11f90:	80 93 65 02 	sts	0x0265, r24
		  }
	 	  KeyPressed=_key_scan(1);
   11f94:	81 e0       	ldi	r24, 0x01	; 1
   11f96:	0e 94 6d a6 	call	0x14cda	; 0x14cda <_key_scan>
		  if (KeyPressed==_KEY_CANCEL){
   11f9a:	87 3e       	cpi	r24, 0xE7	; 231
   11f9c:	49 f4       	brne	.+18     	; 0x11fb0 <FMenuLoyalty+0x1be>
		      if (IsLoyaltyUpdate==True)
   11f9e:	80 91 63 02 	lds	r24, 0x0263
   11fa2:	81 30       	cpi	r24, 0x01	; 1
   11fa4:	11 f4       	brne	.+4      	; 0x11faa <FMenuLoyalty+0x1b8>
			       stLoyalty=mlSelectFIP;
   11fa6:	83 e0       	ldi	r24, 0x03	; 3
   11fa8:	8d cf       	rjmp	.-230    	; 0x11ec4 <FMenuLoyalty+0xd2>
			  else stLoyalty=mlInit;
   11faa:	10 92 65 02 	sts	0x0265, r1
   11fae:	6c c1       	rjmp	.+728    	; 0x12288 <FMenuLoyalty+0x496>
			  }
		  else
		  if (KeyPressed==_KEY_ENTER)stLoyalty=mlExitLoyalty;
   11fb0:	87 3b       	cpi	r24, 0xB7	; 183
   11fb2:	09 f0       	breq	.+2      	; 0x11fb6 <FMenuLoyalty+0x1c4>
   11fb4:	69 c1       	rjmp	.+722    	; 0x12288 <FMenuLoyalty+0x496>
   11fb6:	60 c1       	rjmp	.+704    	; 0x12278 <FMenuLoyalty+0x486>
	      break;
     case mlShowProsesRFID:
	      lcd_clear();
   11fb8:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
		  sprintf_P(lcdteks,PSTR("ID:%s"),strRFID);
   11fbc:	00 d0       	rcall	.+0      	; 0x11fbe <FMenuLoyalty+0x1cc>
   11fbe:	00 d0       	rcall	.+0      	; 0x11fc0 <FMenuLoyalty+0x1ce>
   11fc0:	00 d0       	rcall	.+0      	; 0x11fc2 <FMenuLoyalty+0x1d0>
   11fc2:	ed b7       	in	r30, 0x3d	; 61
   11fc4:	fe b7       	in	r31, 0x3e	; 62
   11fc6:	31 96       	adiw	r30, 0x01	; 1
   11fc8:	8e 01       	movw	r16, r28
   11fca:	0f 5f       	subi	r16, 0xFF	; 255
   11fcc:	1f 4f       	sbci	r17, 0xFF	; 255
   11fce:	ad b7       	in	r26, 0x3d	; 61
   11fd0:	be b7       	in	r27, 0x3e	; 62
   11fd2:	12 96       	adiw	r26, 0x02	; 2
   11fd4:	1c 93       	st	X, r17
   11fd6:	0e 93       	st	-X, r16
   11fd8:	11 97       	sbiw	r26, 0x01	; 1
   11fda:	8a ec       	ldi	r24, 0xCA	; 202
   11fdc:	9c e1       	ldi	r25, 0x1C	; 28
   11fde:	93 83       	std	Z+3, r25	; 0x03
   11fe0:	82 83       	std	Z+2, r24	; 0x02
   11fe2:	81 e5       	ldi	r24, 0x51	; 81
   11fe4:	9c e0       	ldi	r25, 0x0C	; 12
   11fe6:	95 83       	std	Z+5, r25	; 0x05
   11fe8:	84 83       	std	Z+4, r24	; 0x04
   11fea:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
		  lcd_print (1,1,lcdteks);	      
   11fee:	8d b7       	in	r24, 0x3d	; 61
   11ff0:	9e b7       	in	r25, 0x3e	; 62
   11ff2:	06 96       	adiw	r24, 0x06	; 6
   11ff4:	0f b6       	in	r0, 0x3f	; 63
   11ff6:	f8 94       	cli
   11ff8:	9e bf       	out	0x3e, r25	; 62
   11ffa:	0f be       	out	0x3f, r0	; 63
   11ffc:	8d bf       	out	0x3d, r24	; 61
   11ffe:	81 e0       	ldi	r24, 0x01	; 1
   12000:	61 e0       	ldi	r22, 0x01	; 1
   12002:	a8 01       	movw	r20, r16
   12004:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
		  lcd_printf(2,1,PSTR("Proses"));	      
   12008:	82 e0       	ldi	r24, 0x02	; 2
   1200a:	61 e0       	ldi	r22, 0x01	; 1
   1200c:	43 ec       	ldi	r20, 0xC3	; 195
   1200e:	5c e1       	ldi	r21, 0x1C	; 28
   12010:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  if (IsLoyaltyUpdate==True)stLoyalty=mlSendMessage24;
   12014:	80 91 63 02 	lds	r24, 0x0263
   12018:	81 30       	cpi	r24, 0x01	; 1
   1201a:	11 f4       	brne	.+4      	; 0x12020 <FMenuLoyalty+0x22e>
   1201c:	88 e0       	ldi	r24, 0x08	; 8
   1201e:	52 cf       	rjmp	.-348    	; 0x11ec4 <FMenuLoyalty+0xd2>
		  else stLoyalty=mlSendMessage22;
   12020:	87 e0       	ldi	r24, 0x07	; 7
   12022:	50 cf       	rjmp	.-352    	; 0x11ec4 <FMenuLoyalty+0xd2>
	      break;
     case mlSendMessage22:
	      sendMessage22();
   12024:	0e 94 f5 8e 	call	0x11dea	; 0x11dea <sendMessage22>
   12028:	02 c0       	rjmp	.+4      	; 0x1202e <FMenuLoyalty+0x23c>
		  TimSend=0;		  
          stLoyalty=mlWaitReply;
	      break;
     case mlSendMessage24:
	      sendMessage24();
   1202a:	0e 94 f1 8e 	call	0x11de2	; 0x11de2 <sendMessage24>
		  TimSend=0;		  
   1202e:	10 92 79 0c 	sts	0x0C79, r1
          stLoyalty=mlWaitReply;
   12032:	89 e0       	ldi	r24, 0x09	; 9
   12034:	47 cf       	rjmp	.-370    	; 0x11ec4 <FMenuLoyalty+0xd2>
	      break;
     case mlWaitReply:
	      if (TimSend>(TIM_SEND*3))
   12036:	80 91 79 0c 	lds	r24, 0x0C79
   1203a:	8f 31       	cpi	r24, 0x1F	; 31
   1203c:	18 f0       	brcs	.+6      	; 0x12044 <FMenuLoyalty+0x252>
		      stLoyalty=mlNoConnection;
   1203e:	8c e0       	ldi	r24, 0x0C	; 12
   12040:	80 93 65 02 	sts	0x0265, r24
	      if (IsMessage23==True){
   12044:	80 91 a2 01 	lds	r24, 0x01A2
   12048:	81 30       	cpi	r24, 0x01	; 1
   1204a:	39 f4       	brne	.+14     	; 0x1205a <FMenuLoyalty+0x268>
		      IsMessage23=False;
   1204c:	10 92 a2 01 	sts	0x01A2, r1
			  procMessage23();
   12050:	0e 94 27 18 	call	0x304e	; 0x304e <procMessage23>
			  stLoyalty=mlDispEnquiry;
   12054:	8b e0       	ldi	r24, 0x0B	; 11
   12056:	80 93 65 02 	sts	0x0265, r24
		  }
	      if (IsMessage09==True){
   1205a:	80 91 a3 01 	lds	r24, 0x01A3
   1205e:	81 30       	cpi	r24, 0x01	; 1
   12060:	39 f4       	brne	.+14     	; 0x12070 <FMenuLoyalty+0x27e>
		      IsMessage09=False;
   12062:	10 92 a3 01 	sts	0x01A3, r1
	          procMessage09();
   12066:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <procMessage09>
              stLoyalty=mlDisplayFreeMessage;
   1206a:	8a e0       	ldi	r24, 0x0A	; 10
   1206c:	80 93 65 02 	sts	0x0265, r24
		  }
	      if (IsMessage99==True){
   12070:	80 91 9f 01 	lds	r24, 0x019F
   12074:	81 30       	cpi	r24, 0x01	; 1
   12076:	09 f0       	breq	.+2      	; 0x1207a <FMenuLoyalty+0x288>
   12078:	07 c1       	rjmp	.+526    	; 0x12288 <FMenuLoyalty+0x496>
   1207a:	1c c0       	rjmp	.+56     	; 0x120b4 <FMenuLoyalty+0x2c2>
              stLoyalty=mlDelayExitLoyalty;
		  }
	      break;
     case mlDisplayFreeMessage:
		  lcd_clear();
   1207c:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
		  lcd_print(1,1,strFreeMessageLine1);
   12080:	81 e0       	ldi	r24, 0x01	; 1
   12082:	61 e0       	ldi	r22, 0x01	; 1
   12084:	42 e9       	ldi	r20, 0x92	; 146
   12086:	58 e0       	ldi	r21, 0x08	; 8
   12088:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
		  lcd_print(2,1,strFreeMessageLine2);
   1208c:	82 e0       	ldi	r24, 0x02	; 2
   1208e:	61 e0       	ldi	r22, 0x01	; 1
   12090:	43 ea       	ldi	r20, 0xA3	; 163
   12092:	57 e0       	ldi	r21, 0x07	; 7
   12094:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
		  lcd_print(3,1,strFreeMessageLine3);
   12098:	83 e0       	ldi	r24, 0x03	; 3
   1209a:	61 e0       	ldi	r22, 0x01	; 1
   1209c:	4c e1       	ldi	r20, 0x1C	; 28
   1209e:	58 e0       	ldi	r21, 0x08	; 8
   120a0:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
		  lcd_print(4,1,strFreeMessageLine4);
   120a4:	84 e0       	ldi	r24, 0x04	; 4
   120a6:	61 e0       	ldi	r22, 0x01	; 1
   120a8:	46 ed       	ldi	r20, 0xD6	; 214
   120aa:	5b e0       	ldi	r21, 0x0B	; 11
   120ac:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
		  TimDisplay=0;
   120b0:	10 92 92 01 	sts	0x0192, r1
		  stLoyalty=mlDelayExitLoyalty;
   120b4:	8e e0       	ldi	r24, 0x0E	; 14
   120b6:	06 cf       	rjmp	.-500    	; 0x11ec4 <FMenuLoyalty+0xd2>
	      break;
     case mlDispEnquiry:	      
	      lcd_clear();
   120b8:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
		  RemSpaceLag(strCardID);RemSpaceLag(strCardHolder);
   120bc:	e9 e8       	ldi	r30, 0x89	; 137
   120be:	ce 2e       	mov	r12, r30
   120c0:	eb e0       	ldi	r30, 0x0B	; 11
   120c2:	de 2e       	mov	r13, r30
   120c4:	c6 01       	movw	r24, r12
   120c6:	0e 94 e4 25 	call	0x4bc8	; 0x4bc8 <RemSpaceLag>
   120ca:	74 e2       	ldi	r23, 0x24	; 36
   120cc:	e7 2e       	mov	r14, r23
   120ce:	73 e0       	ldi	r23, 0x03	; 3
   120d0:	f7 2e       	mov	r15, r23
   120d2:	c7 01       	movw	r24, r14
   120d4:	0e 94 e4 25 	call	0x4bc8	; 0x4bc8 <RemSpaceLag>
		  sprintf_P(lcdteks,PSTR("%s:%s"),strCardID,strCardHolder);
   120d8:	ad b7       	in	r26, 0x3d	; 61
   120da:	be b7       	in	r27, 0x3e	; 62
   120dc:	18 97       	sbiw	r26, 0x08	; 8
   120de:	0f b6       	in	r0, 0x3f	; 63
   120e0:	f8 94       	cli
   120e2:	be bf       	out	0x3e, r27	; 62
   120e4:	0f be       	out	0x3f, r0	; 63
   120e6:	ad bf       	out	0x3d, r26	; 61
   120e8:	ed b7       	in	r30, 0x3d	; 61
   120ea:	fe b7       	in	r31, 0x3e	; 62
   120ec:	31 96       	adiw	r30, 0x01	; 1
   120ee:	8e 01       	movw	r16, r28
   120f0:	0f 5f       	subi	r16, 0xFF	; 255
   120f2:	1f 4f       	sbci	r17, 0xFF	; 255
   120f4:	12 96       	adiw	r26, 0x02	; 2
   120f6:	1c 93       	st	X, r17
   120f8:	0e 93       	st	-X, r16
   120fa:	11 97       	sbiw	r26, 0x01	; 1
   120fc:	8d eb       	ldi	r24, 0xBD	; 189
   120fe:	9c e1       	ldi	r25, 0x1C	; 28
   12100:	93 83       	std	Z+3, r25	; 0x03
   12102:	82 83       	std	Z+2, r24	; 0x02
   12104:	d5 82       	std	Z+5, r13	; 0x05
   12106:	c4 82       	std	Z+4, r12	; 0x04
   12108:	f7 82       	std	Z+7, r15	; 0x07
   1210a:	e6 82       	std	Z+6, r14	; 0x06
   1210c:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
		  lcd_print(1,1,lcdteks);RemSpaceLag(strLoyCurrentPoints);
   12110:	8d b7       	in	r24, 0x3d	; 61
   12112:	9e b7       	in	r25, 0x3e	; 62
   12114:	08 96       	adiw	r24, 0x08	; 8
   12116:	0f b6       	in	r0, 0x3f	; 63
   12118:	f8 94       	cli
   1211a:	9e bf       	out	0x3e, r25	; 62
   1211c:	0f be       	out	0x3f, r0	; 63
   1211e:	8d bf       	out	0x3d, r24	; 61
   12120:	81 e0       	ldi	r24, 0x01	; 1
   12122:	61 e0       	ldi	r22, 0x01	; 1
   12124:	a8 01       	movw	r20, r16
   12126:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
   1212a:	65 e3       	ldi	r22, 0x35	; 53
   1212c:	e6 2e       	mov	r14, r22
   1212e:	68 e0       	ldi	r22, 0x08	; 8
   12130:	f6 2e       	mov	r15, r22
   12132:	c7 01       	movw	r24, r14
   12134:	0e 94 e4 25 	call	0x4bc8	; 0x4bc8 <RemSpaceLag>
		  sprintf_P(lcdteks,PSTR("Points:%s"),strLoyCurrentPoints);
   12138:	00 d0       	rcall	.+0      	; 0x1213a <FMenuLoyalty+0x348>
   1213a:	00 d0       	rcall	.+0      	; 0x1213c <FMenuLoyalty+0x34a>
   1213c:	00 d0       	rcall	.+0      	; 0x1213e <FMenuLoyalty+0x34c>
   1213e:	ed b7       	in	r30, 0x3d	; 61
   12140:	fe b7       	in	r31, 0x3e	; 62
   12142:	31 96       	adiw	r30, 0x01	; 1
   12144:	ad b7       	in	r26, 0x3d	; 61
   12146:	be b7       	in	r27, 0x3e	; 62
   12148:	12 96       	adiw	r26, 0x02	; 2
   1214a:	1c 93       	st	X, r17
   1214c:	0e 93       	st	-X, r16
   1214e:	11 97       	sbiw	r26, 0x01	; 1
   12150:	83 eb       	ldi	r24, 0xB3	; 179
   12152:	9c e1       	ldi	r25, 0x1C	; 28
   12154:	93 83       	std	Z+3, r25	; 0x03
   12156:	82 83       	std	Z+2, r24	; 0x02
   12158:	f5 82       	std	Z+5, r15	; 0x05
   1215a:	e4 82       	std	Z+4, r14	; 0x04
   1215c:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
		  lcd_print(2,1,lcdteks);RemSpaceLag(strLoyCurrentPoints);
   12160:	8d b7       	in	r24, 0x3d	; 61
   12162:	9e b7       	in	r25, 0x3e	; 62
   12164:	06 96       	adiw	r24, 0x06	; 6
   12166:	0f b6       	in	r0, 0x3f	; 63
   12168:	f8 94       	cli
   1216a:	9e bf       	out	0x3e, r25	; 62
   1216c:	0f be       	out	0x3f, r0	; 63
   1216e:	8d bf       	out	0x3d, r24	; 61
   12170:	82 e0       	ldi	r24, 0x02	; 2
   12172:	61 e0       	ldi	r22, 0x01	; 1
   12174:	a8 01       	movw	r20, r16
   12176:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
   1217a:	c7 01       	movw	r24, r14
   1217c:	0e 94 e4 25 	call	0x4bc8	; 0x4bc8 <RemSpaceLag>
		  sprintf_P(lcdteks,PSTR("CM Amt:%s"),strLoyCurrMonConsumeA);
   12180:	00 d0       	rcall	.+0      	; 0x12182 <FMenuLoyalty+0x390>
   12182:	00 d0       	rcall	.+0      	; 0x12184 <FMenuLoyalty+0x392>
   12184:	00 d0       	rcall	.+0      	; 0x12186 <FMenuLoyalty+0x394>
   12186:	ed b7       	in	r30, 0x3d	; 61
   12188:	fe b7       	in	r31, 0x3e	; 62
   1218a:	31 96       	adiw	r30, 0x01	; 1
   1218c:	ad b7       	in	r26, 0x3d	; 61
   1218e:	be b7       	in	r27, 0x3e	; 62
   12190:	12 96       	adiw	r26, 0x02	; 2
   12192:	1c 93       	st	X, r17
   12194:	0e 93       	st	-X, r16
   12196:	11 97       	sbiw	r26, 0x01	; 1
   12198:	89 ea       	ldi	r24, 0xA9	; 169
   1219a:	9c e1       	ldi	r25, 0x1C	; 28
   1219c:	93 83       	std	Z+3, r25	; 0x03
   1219e:	82 83       	std	Z+2, r24	; 0x02
   121a0:	8e e7       	ldi	r24, 0x7E	; 126
   121a2:	93 e0       	ldi	r25, 0x03	; 3
   121a4:	95 83       	std	Z+5, r25	; 0x05
   121a6:	84 83       	std	Z+4, r24	; 0x04
   121a8:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
		  lcd_print(3,1,lcdteks);RemSpaceLag(strLoyCurrentPoints);
   121ac:	8d b7       	in	r24, 0x3d	; 61
   121ae:	9e b7       	in	r25, 0x3e	; 62
   121b0:	06 96       	adiw	r24, 0x06	; 6
   121b2:	0f b6       	in	r0, 0x3f	; 63
   121b4:	f8 94       	cli
   121b6:	9e bf       	out	0x3e, r25	; 62
   121b8:	0f be       	out	0x3f, r0	; 63
   121ba:	8d bf       	out	0x3d, r24	; 61
   121bc:	83 e0       	ldi	r24, 0x03	; 3
   121be:	61 e0       	ldi	r22, 0x01	; 1
   121c0:	a8 01       	movw	r20, r16
   121c2:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
   121c6:	c7 01       	movw	r24, r14
   121c8:	0e 94 e4 25 	call	0x4bc8	; 0x4bc8 <RemSpaceLag>
		  sprintf_P(lcdteks,PSTR("Cm Vol:%s"),strLoyCurrMonConsumeV);
   121cc:	00 d0       	rcall	.+0      	; 0x121ce <FMenuLoyalty+0x3dc>
   121ce:	00 d0       	rcall	.+0      	; 0x121d0 <FMenuLoyalty+0x3de>
   121d0:	00 d0       	rcall	.+0      	; 0x121d2 <FMenuLoyalty+0x3e0>
   121d2:	ed b7       	in	r30, 0x3d	; 61
   121d4:	fe b7       	in	r31, 0x3e	; 62
   121d6:	31 96       	adiw	r30, 0x01	; 1
   121d8:	ad b7       	in	r26, 0x3d	; 61
   121da:	be b7       	in	r27, 0x3e	; 62
   121dc:	12 96       	adiw	r26, 0x02	; 2
   121de:	1c 93       	st	X, r17
   121e0:	0e 93       	st	-X, r16
   121e2:	11 97       	sbiw	r26, 0x01	; 1
   121e4:	8f e9       	ldi	r24, 0x9F	; 159
   121e6:	9c e1       	ldi	r25, 0x1C	; 28
   121e8:	93 83       	std	Z+3, r25	; 0x03
   121ea:	82 83       	std	Z+2, r24	; 0x02
   121ec:	8d ee       	ldi	r24, 0xED	; 237
   121ee:	9b e0       	ldi	r25, 0x0B	; 11
   121f0:	95 83       	std	Z+5, r25	; 0x05
   121f2:	84 83       	std	Z+4, r24	; 0x04
   121f4:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
		  lcd_print(4,1,lcdteks);
   121f8:	8d b7       	in	r24, 0x3d	; 61
   121fa:	9e b7       	in	r25, 0x3e	; 62
   121fc:	06 96       	adiw	r24, 0x06	; 6
   121fe:	0f b6       	in	r0, 0x3f	; 63
   12200:	f8 94       	cli
   12202:	9e bf       	out	0x3e, r25	; 62
   12204:	0f be       	out	0x3f, r0	; 63
   12206:	8d bf       	out	0x3d, r24	; 61
   12208:	84 e0       	ldi	r24, 0x04	; 4
   1220a:	61 e0       	ldi	r22, 0x01	; 1
   1220c:	a8 01       	movw	r20, r16
   1220e:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
		  TimDisplay=0;
   12212:	10 92 92 01 	sts	0x0192, r1

		  if (eeprom_read_byte(&DefNotifScreen)==1) {
   12216:	88 e3       	ldi	r24, 0x38	; 56
   12218:	90 e0       	ldi	r25, 0x00	; 0
   1221a:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
   1221e:	81 30       	cpi	r24, 0x01	; 1
   12220:	09 f0       	breq	.+2      	; 0x12224 <FMenuLoyalty+0x432>
   12222:	48 cf       	rjmp	.-368    	; 0x120b4 <FMenuLoyalty+0x2c2>
		      stLoyalty=mlPressAnyKey;
   12224:	8d e0       	ldi	r24, 0x0D	; 13
   12226:	80 93 65 02 	sts	0x0265, r24
			  lcd_printf(2,1,PSTR("Press Any Key"));
   1222a:	82 e0       	ldi	r24, 0x02	; 2
   1222c:	61 e0       	ldi	r22, 0x01	; 1
   1222e:	41 e9       	ldi	r20, 0x91	; 145
   12230:	5c e1       	ldi	r21, 0x1C	; 28
   12232:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
   12236:	28 c0       	rjmp	.+80     	; 0x12288 <FMenuLoyalty+0x496>
          } else stLoyalty=mlDelayExitLoyalty;
		  break;
     case mlPressAnyKey:
	      KeyPressed=_key_scan(1);
   12238:	81 e0       	ldi	r24, 0x01	; 1
   1223a:	0e 94 6d a6 	call	0x14cda	; 0x14cda <_key_scan>
	      KeyChar=_key_btn(KeyPressed);
   1223e:	0e 94 ce a5 	call	0x14b9c	; 0x14b9c <_key_btn>
	      switch(KeyChar){		  
   12242:	83 32       	cpi	r24, 0x23	; 35
   12244:	c9 f0       	breq	.+50     	; 0x12278 <FMenuLoyalty+0x486>
   12246:	8a 32       	cpi	r24, 0x2A	; 42
   12248:	f9 f4       	brne	.+62     	; 0x12288 <FMenuLoyalty+0x496>
   1224a:	16 c0       	rjmp	.+44     	; 0x12278 <FMenuLoyalty+0x486>
               stLoyalty=mlExitLoyalty;
		       break;		  
		  }
	      break;
     case mlNoConnection:
	      lcd_clear();
   1224c:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
		  lcd_printf(2,1,PSTR("TCP/IP ERROR "));
   12250:	82 e0       	ldi	r24, 0x02	; 2
   12252:	61 e0       	ldi	r22, 0x01	; 1
   12254:	43 e8       	ldi	r20, 0x83	; 131
   12256:	5c e1       	ldi	r21, 0x1C	; 28
   12258:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  lcd_printf(3,1,PSTR("No Connection"));
   1225c:	83 e0       	ldi	r24, 0x03	; 3
   1225e:	61 e0       	ldi	r22, 0x01	; 1
   12260:	45 e7       	ldi	r20, 0x75	; 117
   12262:	5c e1       	ldi	r21, 0x1C	; 28
   12264:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		  TimDisplay=5;
   12268:	85 e0       	ldi	r24, 0x05	; 5
   1226a:	80 93 92 01 	sts	0x0192, r24
   1226e:	22 cf       	rjmp	.-444    	; 0x120b4 <FMenuLoyalty+0x2c2>
		  stLoyalty=mlDelayExitLoyalty;
	      break;
     case mlDelayExitLoyalty:
          if(TimDisplay>=10)stLoyalty=mlExitLoyalty;
   12270:	80 91 92 01 	lds	r24, 0x0192
   12274:	8a 30       	cpi	r24, 0x0A	; 10
   12276:	40 f0       	brcs	.+16     	; 0x12288 <FMenuLoyalty+0x496>
   12278:	8f e0       	ldi	r24, 0x0F	; 15
   1227a:	24 ce       	rjmp	.-952    	; 0x11ec4 <FMenuLoyalty+0xd2>
	      break;
	 case mlExitLoyalty:
	      lcd_clear();
   1227c:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
	      stLoyalty=mlInit;
   12280:	10 92 65 02 	sts	0x0265, r1
   12284:	81 e0       	ldi	r24, 0x01	; 1
   12286:	01 c0       	rjmp	.+2      	; 0x1228a <FMenuLoyalty+0x498>
   12288:	80 e0       	ldi	r24, 0x00	; 0
		  Result=MENU_DONE;
	      break;
	 }
	 return Result;
}
   1228a:	64 96       	adiw	r28, 0x14	; 20
   1228c:	0f b6       	in	r0, 0x3f	; 63
   1228e:	f8 94       	cli
   12290:	de bf       	out	0x3e, r29	; 62
   12292:	0f be       	out	0x3f, r0	; 63
   12294:	cd bf       	out	0x3d, r28	; 61
   12296:	cf 91       	pop	r28
   12298:	df 91       	pop	r29
   1229a:	1f 91       	pop	r17
   1229c:	0f 91       	pop	r16
   1229e:	ff 90       	pop	r15
   122a0:	ef 90       	pop	r14
   122a2:	df 90       	pop	r13
   122a4:	cf 90       	pop	r12
   122a6:	08 95       	ret

000122a8 <sendMessage10>:
	sprintf_P(strSend,PSTR("%s%s%s%s10F968CFFB"),strIFT_ID,strSeqNum,strClientIP,strServerIP);
    uart_print(1, 0,strSend);
	uart(1, 1,0x02);
	IsNewPacket=True;
	*/
	IsNewPacket=True;
   122a8:	81 e0       	ldi	r24, 0x01	; 1
   122aa:	80 93 88 01 	sts	0x0188, r24
	IFTSendMessage(MSG_10);
   122ae:	80 e1       	ldi	r24, 0x10	; 16
   122b0:	0e 94 55 7a 	call	0xf4aa	; 0xf4aa <IFTSendMessage>
}
   122b4:	08 95       	ret

000122b6 <InitializeConnection>:
void InitMemory(){
     PumpCountMax=eeprom_read_byte(&DefPoolingPumpMax);
	 ActivePump=eeprom_read_byte(&DefActivePump);
}

void InitializeConnection(){
   122b6:	df 92       	push	r13
   122b8:	ef 92       	push	r14
   122ba:	ff 92       	push	r15
   122bc:	0f 93       	push	r16
   122be:	1f 93       	push	r17
   122c0:	df 93       	push	r29
   122c2:	cf 93       	push	r28
   122c4:	cd b7       	in	r28, 0x3d	; 61
   122c6:	de b7       	in	r29, 0x3e	; 62
   122c8:	64 97       	sbiw	r28, 0x14	; 20
   122ca:	0f b6       	in	r0, 0x3f	; 63
   122cc:	f8 94       	cli
   122ce:	de bf       	out	0x3e, r29	; 62
   122d0:	0f be       	out	0x3f, r0	; 63
   122d2:	cd bf       	out	0x3d, r28	; 61
	unsigned int tConnect=0;
	char ForceType=IT_NONE,iCon=0,iTry=0,KeyPressed;
	char lcdteks[20];
	IFType=eeprom_read_byte(&DefInitIFT);
   122d4:	87 e3       	ldi	r24, 0x37	; 55
   122d6:	91 e0       	ldi	r25, 0x01	; 1
   122d8:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
   122dc:	18 2f       	mov	r17, r24
   122de:	80 93 00 01 	sts	0x0100, r24
	DispenserBrand=eeprom_read_byte(&DefDispenserBrand);
   122e2:	88 e3       	ldi	r24, 0x38	; 56
   122e4:	91 e0       	ldi	r25, 0x01	; 1
   122e6:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
   122ea:	80 93 5e 01 	sts	0x015E, r24

	//SendSlaveCommand(SC_STOP_POOL_SEQUENCE,0);

    //Send Msg10
	if  (IFType==IT_SLAVE){
   122ee:	11 30       	cpi	r17, 0x01	; 1
   122f0:	09 f0       	breq	.+2      	; 0x122f4 <InitializeConnection+0x3e>
   122f2:	5f c0       	rjmp	.+190    	; 0x123b2 <InitializeConnection+0xfc>
	     SendSlaveCommand(SC_SLAVE,ST_NONE);
   122f4:	81 e0       	ldi	r24, 0x01	; 1
   122f6:	60 e0       	ldi	r22, 0x00	; 0
   122f8:	0e 94 3d 60 	call	0xc07a	; 0xc07a <SendSlaveCommand>
		 char_count=0;
   122fc:	10 92 8a 01 	sts	0x018A, r1
   12300:	10 92 89 01 	sts	0x0189, r1
		 if (IsPowerOn==True){
   12304:	80 91 ba 02 	lds	r24, 0x02BA
   12308:	81 30       	cpi	r24, 0x01	; 1
   1230a:	59 f4       	brne	.+22     	; 0x12322 <InitializeConnection+0x6c>
		     IsPowerOn=False;
   1230c:	10 92 ba 02 	sts	0x02BA, r1
   12310:	8f ef       	ldi	r24, 0xFF	; 255
   12312:	9f ef       	ldi	r25, 0xFF	; 255
   12314:	29 e1       	ldi	r18, 0x19	; 25
   12316:	30 e0       	ldi	r19, 0x00	; 0
   12318:	f9 01       	movw	r30, r18
   1231a:	31 97       	sbiw	r30, 0x01	; 1
   1231c:	f1 f7       	brne	.-4      	; 0x1231a <InitializeConnection+0x64>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
   1231e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
   12320:	d9 f7       	brne	.-10     	; 0x12318 <InitializeConnection+0x62>
		     _delay_ms(8000);
			 }
         sendMessage10();
   12322:	0e 94 54 91 	call	0x122a8	; 0x122a8 <sendMessage10>
         sendMessage10();
   12326:	0e 94 54 91 	call	0x122a8	; 0x122a8 <sendMessage10>
         sendMessage10();
   1232a:	0e 94 54 91 	call	0x122a8	; 0x122a8 <sendMessage10>
         

         lcd_printf(4,1,PSTR("Connect         "));
   1232e:	84 e0       	ldi	r24, 0x04	; 4
   12330:	61 e0       	ldi	r22, 0x01	; 1
   12332:	49 ee       	ldi	r20, 0xE9	; 233
   12334:	5e e1       	ldi	r21, 0x1E	; 30
   12336:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		 lcd_printf(4,1,PSTR("Connect"));
   1233a:	84 e0       	ldi	r24, 0x04	; 4
   1233c:	61 e0       	ldi	r22, 0x01	; 1
   1233e:	41 ee       	ldi	r20, 0xE1	; 225
   12340:	5e e1       	ldi	r21, 0x1E	; 30
   12342:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		 //EstablishConnection TCP/IP
		 IsMessage11=False;
   12346:	10 92 a0 01 	sts	0x01A0, r1
   1234a:	ee 24       	eor	r14, r14
   1234c:	ff 24       	eor	r15, r15
   1234e:	10 e0       	ldi	r17, 0x00	; 0
   12350:	00 e0       	ldi	r16, 0x00	; 0
   12352:	2b c0       	rjmp	.+86     	; 0x123aa <InitializeConnection+0xf4>
		  //SlaveIdentification		  
		 while (IsMessage11==False){
		        lcd_put(4,(8+iCon),'.');
   12354:	61 2f       	mov	r22, r17
   12356:	68 5f       	subi	r22, 0xF8	; 248
   12358:	84 e0       	ldi	r24, 0x04	; 4
   1235a:	4e e2       	ldi	r20, 0x2E	; 46
   1235c:	0e 94 41 a5 	call	0x14a82	; 0x14a82 <lcd_put>
                tConnect++;
   12360:	08 94       	sec
   12362:	e1 1c       	adc	r14, r1
   12364:	f1 1c       	adc	r15, r1
				__key_lgtcnt=0;
   12366:	10 92 af 02 	sts	0x02AF, r1
			    if ((tConnect%200)==0)iCon++;
   1236a:	c7 01       	movw	r24, r14
   1236c:	68 ec       	ldi	r22, 0xC8	; 200
   1236e:	70 e0       	ldi	r23, 0x00	; 0
   12370:	0e 94 7a aa 	call	0x154f4	; 0x154f4 <__udivmodhi4>
   12374:	89 2b       	or	r24, r25
   12376:	09 f4       	brne	.+2      	; 0x1237a <InitializeConnection+0xc4>
   12378:	1f 5f       	subi	r17, 0xFF	; 255
			    if (iCon>8){
   1237a:	19 30       	cpi	r17, 0x09	; 9
   1237c:	70 f0       	brcs	.+28     	; 0x1239a <InitializeConnection+0xe4>
			        lcd_printf(4,1,PSTR("Connect         "));
   1237e:	84 e0       	ldi	r24, 0x04	; 4
   12380:	61 e0       	ldi	r22, 0x01	; 1
   12382:	40 ed       	ldi	r20, 0xD0	; 208
   12384:	5e e1       	ldi	r21, 0x1E	; 30
   12386:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
					
				    sendMessage10();
   1238a:	0e 94 54 91 	call	0x122a8	; 0x122a8 <sendMessage10>
				    SendSlaveCommand(SC_SLAVE,ST_NONE);
   1238e:	81 e0       	ldi	r24, 0x01	; 1
   12390:	60 e0       	ldi	r22, 0x00	; 0
   12392:	0e 94 3d 60 	call	0xc07a	; 0xc07a <SendSlaveCommand>
			        iCon=0;
				    iTry++;}
   12396:	0f 5f       	subi	r16, 0xFF	; 255
   12398:	10 e0       	ldi	r17, 0x00	; 0
			    if (iTry>3){
   1239a:	04 30       	cpi	r16, 0x04	; 4
   1239c:	30 f0       	brcs	.+12     	; 0x123aa <InitializeConnection+0xf4>
			        //IsErrorTCPIP=True;
				    IsAdvanzStartupInfo=False;		
   1239e:	10 92 aa 01 	sts	0x01AA, r1
					IFType=IT_STANDALONE;
   123a2:	82 e0       	ldi	r24, 0x02	; 2
   123a4:	80 93 00 01 	sts	0x0100, r24
   123a8:	04 c0       	rjmp	.+8      	; 0x123b2 <InitializeConnection+0xfc>
         lcd_printf(4,1,PSTR("Connect         "));
		 lcd_printf(4,1,PSTR("Connect"));
		 //EstablishConnection TCP/IP
		 IsMessage11=False;
		  //SlaveIdentification		  
		 while (IsMessage11==False){
   123aa:	80 91 a0 01 	lds	r24, 0x01A0
   123ae:	88 23       	and	r24, r24
   123b0:	89 f2       	breq	.-94     	; 0x12354 <InitializeConnection+0x9e>

			    }
            }//EndWhile
		}

	if (IFType==IT_STANDALONE){
   123b2:	80 91 00 01 	lds	r24, 0x0100
   123b6:	82 30       	cpi	r24, 0x02	; 2
   123b8:	09 f0       	breq	.+2      	; 0x123bc <InitializeConnection+0x106>
   123ba:	72 c0       	rjmp	.+228    	; 0x124a0 <InitializeConnection+0x1ea>
        IsStandAloneDetected=False;		
   123bc:	10 92 9c 01 	sts	0x019C, r1
		SendSlaveCommand(SC_STANDALONE,DispenserBrand);
   123c0:	60 91 5e 01 	lds	r22, 0x015E
   123c4:	0e 94 3d 60 	call	0xc07a	; 0xc07a <SendSlaveCommand>
		tConnect=0,iCon=0,iTry=0;
	    lcd_clear();
   123c8:	0e 94 28 a5 	call	0x14a50	; 0x14a50 <lcd_clear>
	    lcd_printf(1,1,PSTR("Scan Pump"));
   123cc:	81 e0       	ldi	r24, 0x01	; 1
   123ce:	61 e0       	ldi	r22, 0x01	; 1
   123d0:	46 ec       	ldi	r20, 0xC6	; 198
   123d2:	5e e1       	ldi	r21, 0x1E	; 30
   123d4:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		strcpy_P(lcdteks,(PGM_P)pgm_read_word(&(DefListDispenserName[eeprom_read_byte(&DefDispenserBrand)])));
   123d8:	88 e3       	ldi	r24, 0x38	; 56
   123da:	91 e0       	ldi	r25, 0x01	; 1
   123dc:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
   123e0:	e8 2f       	mov	r30, r24
   123e2:	f0 e0       	ldi	r31, 0x00	; 0
   123e4:	ee 0f       	add	r30, r30
   123e6:	ff 1f       	adc	r31, r31
   123e8:	eb 5f       	subi	r30, 0xFB	; 251
   123ea:	fc 4f       	sbci	r31, 0xFC	; 252
   123ec:	65 91       	lpm	r22, Z+
   123ee:	74 91       	lpm	r23, Z+
   123f0:	8e 01       	movw	r16, r28
   123f2:	0f 5f       	subi	r16, 0xFF	; 255
   123f4:	1f 4f       	sbci	r17, 0xFF	; 255
   123f6:	c8 01       	movw	r24, r16
   123f8:	0e 94 e1 aa 	call	0x155c2	; 0x155c2 <strcpy_P>
		sprintf_P(lcdteks,PSTR("%s"),lcdteks);
   123fc:	00 d0       	rcall	.+0      	; 0x123fe <InitializeConnection+0x148>
   123fe:	00 d0       	rcall	.+0      	; 0x12400 <InitializeConnection+0x14a>
   12400:	00 d0       	rcall	.+0      	; 0x12402 <InitializeConnection+0x14c>
   12402:	ed b7       	in	r30, 0x3d	; 61
   12404:	fe b7       	in	r31, 0x3e	; 62
   12406:	31 96       	adiw	r30, 0x01	; 1
   12408:	ad b7       	in	r26, 0x3d	; 61
   1240a:	be b7       	in	r27, 0x3e	; 62
   1240c:	12 96       	adiw	r26, 0x02	; 2
   1240e:	1c 93       	st	X, r17
   12410:	0e 93       	st	-X, r16
   12412:	11 97       	sbiw	r26, 0x01	; 1
   12414:	83 ec       	ldi	r24, 0xC3	; 195
   12416:	9e e1       	ldi	r25, 0x1E	; 30
   12418:	93 83       	std	Z+3, r25	; 0x03
   1241a:	82 83       	std	Z+2, r24	; 0x02
   1241c:	15 83       	std	Z+5, r17	; 0x05
   1241e:	04 83       	std	Z+4, r16	; 0x04
   12420:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	    lcd_print(2,1,lcdteks);
   12424:	8d b7       	in	r24, 0x3d	; 61
   12426:	9e b7       	in	r25, 0x3e	; 62
   12428:	06 96       	adiw	r24, 0x06	; 6
   1242a:	0f b6       	in	r0, 0x3f	; 63
   1242c:	f8 94       	cli
   1242e:	9e bf       	out	0x3e, r25	; 62
   12430:	0f be       	out	0x3f, r0	; 63
   12432:	8d bf       	out	0x3d, r24	; 61
   12434:	82 e0       	ldi	r24, 0x02	; 2
   12436:	61 e0       	ldi	r22, 0x01	; 1
   12438:	a8 01       	movw	r20, r16
   1243a:	0e 94 cf a4 	call	0x1499e	; 0x1499e <lcd_print>
   1243e:	00 e0       	ldi	r16, 0x00	; 0
   12440:	10 e0       	ldi	r17, 0x00	; 0
   12442:	ff 24       	eor	r15, r15
   12444:	dd 24       	eor	r13, r13
   12446:	28 c0       	rjmp	.+80     	; 0x12498 <InitializeConnection+0x1e2>

	    while (IsStandAloneDetected==False){
		       lcd_put(4,(1+iCon),'.');
   12448:	ef 2c       	mov	r14, r15
   1244a:	e3 94       	inc	r14
   1244c:	84 e0       	ldi	r24, 0x04	; 4
   1244e:	6e 2d       	mov	r22, r14
   12450:	4e e2       	ldi	r20, 0x2E	; 46
   12452:	0e 94 41 a5 	call	0x14a82	; 0x14a82 <lcd_put>
		       tConnect++;
   12456:	0f 5f       	subi	r16, 0xFF	; 255
   12458:	1f 4f       	sbci	r17, 0xFF	; 255
		       if ((tConnect%100)==0)iCon++;
   1245a:	c8 01       	movw	r24, r16
   1245c:	64 e6       	ldi	r22, 0x64	; 100
   1245e:	70 e0       	ldi	r23, 0x00	; 0
   12460:	0e 94 7a aa 	call	0x154f4	; 0x154f4 <__udivmodhi4>
   12464:	89 2b       	or	r24, r25
   12466:	09 f4       	brne	.+2      	; 0x1246a <InitializeConnection+0x1b4>
   12468:	fe 2c       	mov	r15, r14
		       if (iCon>16){
   1246a:	90 e1       	ldi	r25, 0x10	; 16
   1246c:	9f 15       	cp	r25, r15
   1246e:	88 f4       	brcc	.+34     	; 0x12492 <InitializeConnection+0x1dc>
			       __key_lgtcnt=0;
   12470:	10 92 af 02 	sts	0x02AF, r1
			       lcd_printf(4,1,PSTR("                   "));
   12474:	84 e0       	ldi	r24, 0x04	; 4
   12476:	61 e0       	ldi	r22, 0x01	; 1
   12478:	4f ea       	ldi	r20, 0xAF	; 175
   1247a:	5e e1       	ldi	r21, 0x1E	; 30
   1247c:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
				   //IsStandaloneAcknoledge=False;
		           SendSlaveCommand(SC_STANDALONE,DispenserBrand);
   12480:	82 e0       	ldi	r24, 0x02	; 2
   12482:	60 91 5e 01 	lds	r22, 0x015E
   12486:	0e 94 3d 60 	call	0xc07a	; 0xc07a <SendSlaveCommand>
                   //InitStandalone();

			       DisplayPumpStatus();
   1248a:	0e 94 c2 49 	call	0x9384	; 0x9384 <DisplayPumpStatus>
			       iCon=0;
			       iTry++;}
   1248e:	d3 94       	inc	r13
   12490:	ff 24       	eor	r15, r15
		           if (iTry>3) break; 
   12492:	a3 e0       	ldi	r26, 0x03	; 3
   12494:	ad 15       	cp	r26, r13
   12496:	20 f0       	brcs	.+8      	; 0x124a0 <InitializeConnection+0x1ea>
	    lcd_printf(1,1,PSTR("Scan Pump"));
		strcpy_P(lcdteks,(PGM_P)pgm_read_word(&(DefListDispenserName[eeprom_read_byte(&DefDispenserBrand)])));
		sprintf_P(lcdteks,PSTR("%s"),lcdteks);
	    lcd_print(2,1,lcdteks);

	    while (IsStandAloneDetected==False){
   12498:	80 91 9c 01 	lds	r24, 0x019C
   1249c:	88 23       	and	r24, r24
   1249e:	a1 f2       	breq	.-88     	; 0x12448 <InitializeConnection+0x192>
			       iCon=0;
			       iTry++;}
		           if (iTry>3) break; 
	    }
	}//EndIf
	if(IsMessage11==True){
   124a0:	10 91 a0 01 	lds	r17, 0x01A0
   124a4:	11 30       	cpi	r17, 0x01	; 1
   124a6:	d9 f4       	brne	.+54     	; 0x124de <InitializeConnection+0x228>
	   lcd_printf(4,1,PSTR("Connected           "));
   124a8:	84 e0       	ldi	r24, 0x04	; 4
   124aa:	61 e0       	ldi	r22, 0x01	; 1
   124ac:	4a e9       	ldi	r20, 0x9A	; 154
   124ae:	5e e1       	ldi	r21, 0x1E	; 30
   124b0:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
	   eeprom_write_byte(&DefInitIFT,IT_SLAVE);
   124b4:	87 e3       	ldi	r24, 0x37	; 55
   124b6:	91 e0       	ldi	r25, 0x01	; 1
   124b8:	61 e0       	ldi	r22, 0x01	; 1
   124ba:	0e 94 52 ad 	call	0x15aa4	; 0x15aa4 <__eewr_byte_m128>
	   IFType=IT_SLAVE;
   124be:	10 93 00 01 	sts	0x0100, r17
   124c2:	80 e3       	ldi	r24, 0x30	; 48
   124c4:	95 e7       	ldi	r25, 0x75	; 117
   124c6:	29 e1       	ldi	r18, 0x19	; 25
   124c8:	30 e0       	ldi	r19, 0x00	; 0
   124ca:	f9 01       	movw	r30, r18
   124cc:	31 97       	sbiw	r30, 0x01	; 1
   124ce:	f1 f7       	brne	.-4      	; 0x124cc <InitializeConnection+0x216>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
   124d0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
   124d2:	d9 f7       	brne	.-10     	; 0x124ca <InitializeConnection+0x214>
	   _delay_ms(3000);
	   //IsErrorTCPIP=False;
	   procMessage11();
   124d4:	0e 94 7f 46 	call	0x8cfe	; 0x8cfe <procMessage11>
	   IsAdvanzStartupInfo=True;
   124d8:	81 e0       	ldi	r24, 0x01	; 1
   124da:	80 93 aa 01 	sts	0x01AA, r24
	}
	if(IsStandAloneDetected==True){
   124de:	80 91 9c 01 	lds	r24, 0x019C
   124e2:	81 30       	cpi	r24, 0x01	; 1
   124e4:	71 f4       	brne	.+28     	; 0x12502 <InitializeConnection+0x24c>
	   lcd_printf(4,1,PSTR("PumpFound"));
   124e6:	84 e0       	ldi	r24, 0x04	; 4
   124e8:	61 e0       	ldi	r22, 0x01	; 1
   124ea:	40 e9       	ldi	r20, 0x90	; 144
   124ec:	5e e1       	ldi	r21, 0x1E	; 30
   124ee:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
	   eeprom_write_byte(&DefInitIFT,IT_STANDALONE);
   124f2:	87 e3       	ldi	r24, 0x37	; 55
   124f4:	91 e0       	ldi	r25, 0x01	; 1
   124f6:	62 e0       	ldi	r22, 0x02	; 2
   124f8:	0e 94 52 ad 	call	0x15aa4	; 0x15aa4 <__eewr_byte_m128>
	   IFType=IT_STANDALONE;
   124fc:	82 e0       	ldi	r24, 0x02	; 2
   124fe:	80 93 00 01 	sts	0x0100, r24
	}
	//PrintStatus
	if (eeprom_read_byte(&DefPrintInitialize)==True)GeneratePrintInit();
   12502:	86 e3       	ldi	r24, 0x36	; 54
   12504:	91 e0       	ldi	r25, 0x01	; 1
   12506:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
   1250a:	81 30       	cpi	r24, 0x01	; 1
   1250c:	11 f4       	brne	.+4      	; 0x12512 <InitializeConnection+0x25c>
   1250e:	0e 94 a8 32 	call	0x6550	; 0x6550 <GeneratePrintInit>
	if ((IsStandAloneDetected==False)&&(IsMessage11==False)){		
   12512:	80 91 9c 01 	lds	r24, 0x019C
   12516:	88 23       	and	r24, r24
   12518:	89 f5       	brne	.+98     	; 0x1257c <InitializeConnection+0x2c6>
   1251a:	80 91 a0 01 	lds	r24, 0x01A0
   1251e:	88 23       	and	r24, r24
   12520:	69 f5       	brne	.+90     	; 0x1257c <InitializeConnection+0x2c6>
		 lcd_printf(2,1,PSTR("TCP/IP Error"));
   12522:	82 e0       	ldi	r24, 0x02	; 2
   12524:	61 e0       	ldi	r22, 0x01	; 1
   12526:	43 e8       	ldi	r20, 0x83	; 131
   12528:	5e e1       	ldi	r21, 0x1E	; 30
   1252a:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		 lcd_printf(3,1,PSTR("No Pump Found"));
   1252e:	83 e0       	ldi	r24, 0x03	; 3
   12530:	61 e0       	ldi	r22, 0x01	; 1
   12532:	45 e7       	ldi	r20, 0x75	; 117
   12534:	5e e1       	ldi	r21, 0x1E	; 30
   12536:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
   1253a:	80 e2       	ldi	r24, 0x20	; 32
   1253c:	9e e4       	ldi	r25, 0x4E	; 78
   1253e:	29 e1       	ldi	r18, 0x19	; 25
   12540:	30 e0       	ldi	r19, 0x00	; 0
   12542:	f9 01       	movw	r30, r18
   12544:	31 97       	sbiw	r30, 0x01	; 1
   12546:	f1 f7       	brne	.-4      	; 0x12544 <InitializeConnection+0x28e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
   12548:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
   1254a:	d9 f7       	brne	.-10     	; 0x12542 <InitializeConnection+0x28c>
		 _delay_ms(2000);
		 ForceType=systemForceType();
   1254c:	0e 94 9d 53 	call	0xa73a	; 0xa73a <systemForceType>
		 if (ForceType=='1'){
   12550:	81 33       	cpi	r24, 0x31	; 49
   12552:	29 f4       	brne	.+10     	; 0x1255e <InitializeConnection+0x2a8>
		     IFType=IT_SLAVE;
   12554:	81 e0       	ldi	r24, 0x01	; 1
   12556:	80 93 00 01 	sts	0x0100, r24
			 SendSlaveCommand(SC_SLAVE,ST_NONE);
   1255a:	60 e0       	ldi	r22, 0x00	; 0
   1255c:	07 c0       	rjmp	.+14     	; 0x1256c <InitializeConnection+0x2b6>
         }
		 else
		 if (ForceType=='2'){
   1255e:	82 33       	cpi	r24, 0x32	; 50
   12560:	39 f4       	brne	.+14     	; 0x12570 <InitializeConnection+0x2ba>
		     IFType=IT_STANDALONE;
   12562:	82 e0       	ldi	r24, 0x02	; 2
   12564:	80 93 00 01 	sts	0x0100, r24
			 SendSlaveCommand(SC_STANDALONE,DispenserBrand);
   12568:	60 91 5e 01 	lds	r22, 0x015E
   1256c:	0e 94 3d 60 	call	0xc07a	; 0xc07a <SendSlaveCommand>

			 //SendPoolingCommand(SC_SET_POOLING_MAX_PUMP,eeprom_read_byte(&DefPoolingPumpMax));

			 //InitStandalone();
         }
		 eeprom_write_byte(&DefInitIFT,IFType);
   12570:	87 e3       	ldi	r24, 0x37	; 55
   12572:	91 e0       	ldi	r25, 0x01	; 1
   12574:	60 91 00 01 	lds	r22, 0x0100
   12578:	0e 94 52 ad 	call	0x15aa4	; 0x15aa4 <__eewr_byte_m128>
	}
	InitMemory();
   1257c:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <InitMemory>
	//SendSlaveCommand(SC_START_POOL_SEQUENCE,0);
	
}
   12580:	64 96       	adiw	r28, 0x14	; 20
   12582:	0f b6       	in	r0, 0x3f	; 63
   12584:	f8 94       	cli
   12586:	de bf       	out	0x3e, r29	; 62
   12588:	0f be       	out	0x3f, r0	; 63
   1258a:	cd bf       	out	0x3d, r28	; 61
   1258c:	cf 91       	pop	r28
   1258e:	df 91       	pop	r29
   12590:	1f 91       	pop	r17
   12592:	0f 91       	pop	r16
   12594:	ff 90       	pop	r15
   12596:	ef 90       	pop	r14
   12598:	df 90       	pop	r13
   1259a:	08 95       	ret

0001259c <sendMessage04>:
	 UpdateServerIP();//ReadDestIP
	 //strTranNo = strReceiptNum
	 sprintf_P(strSend,PSTR("%s%s%s%s04%s1F968CFFB"),strIFT_ID,strSeqNum,strClientIP,strServerIP,strTranNo);
     uart_print(1, 0,strSend);
	 uart(1, 1,0x02);
	 */IFTSendMessage(MSG_04);
   1259c:	84 e0       	ldi	r24, 0x04	; 4
   1259e:	0e 94 55 7a 	call	0xf4aa	; 0xf4aa <IFTSendMessage>
}
   125a2:	08 95       	ret

000125a4 <FreePrinting>:
	 } 
	 else uart(_COM_PRINTER,1,xSend);
	 zSend=xSend;
}

void FreePrinting(){
   125a4:	0f 93       	push	r16
   125a6:	1f 93       	push	r17
   125a8:	df 93       	push	r29
   125aa:	cf 93       	push	r28
   125ac:	cd b7       	in	r28, 0x3d	; 61
   125ae:	de b7       	in	r29, 0x3e	; 62
   125b0:	64 97       	sbiw	r28, 0x14	; 20
   125b2:	0f b6       	in	r0, 0x3f	; 63
   125b4:	f8 94       	cli
   125b6:	de bf       	out	0x3e, r29	; 62
   125b8:	0f be       	out	0x3f, r0	; 63
   125ba:	cd bf       	out	0x3d, r28	; 61
static char iPrinted=0,iHeader=0,iFooter=0,PrintCopy=0,iMargin=0,iScroll=0,nScroll=0;
static unsigned int iSend=0,LSend=0,iLoop=0;
       char strOperatorName[20];

     //Normalize FreePrintIdleState
     if ((IsFreePrinting==True)&&(stFreePrinting!=fpInit)){
   125bc:	20 91 a8 01 	lds	r18, 0x01A8
   125c0:	21 30       	cpi	r18, 0x01	; 1
   125c2:	31 f4       	brne	.+12     	; 0x125d0 <FreePrinting+0x2c>
   125c4:	80 91 25 01 	lds	r24, 0x0125
   125c8:	81 30       	cpi	r24, 0x01	; 1
   125ca:	11 f0       	breq	.+4      	; 0x125d0 <FreePrinting+0x2c>
	     stFreePrinting=fpInit;
   125cc:	20 93 25 01 	sts	0x0125, r18
	 }
	 switch (stFreePrinting){
   125d0:	80 91 25 01 	lds	r24, 0x0125
   125d4:	90 e0       	ldi	r25, 0x00	; 0
   125d6:	fc 01       	movw	r30, r24
   125d8:	31 97       	sbiw	r30, 0x01	; 1
   125da:	eb 31       	cpi	r30, 0x1B	; 27
   125dc:	f1 05       	cpc	r31, r1
   125de:	08 f0       	brcs	.+2      	; 0x125e2 <FreePrinting+0x3e>
   125e0:	7b c3       	rjmp	.+1782   	; 0x12cd8 <FreePrinting+0x734>
   125e2:	e3 53       	subi	r30, 0x33	; 51
   125e4:	ff 4f       	sbci	r31, 0xFF	; 255
   125e6:	ee 0f       	add	r30, r30
   125e8:	ff 1f       	adc	r31, r31
   125ea:	05 90       	lpm	r0, Z+
   125ec:	f4 91       	lpm	r31, Z+
   125ee:	e0 2d       	mov	r30, r0
   125f0:	09 94       	ijmp
     case fpInit:
	      //uart_printf(0,1,PSTR("fpInit"));
	      if (IsFreePrinting==True){
   125f2:	21 30       	cpi	r18, 0x01	; 1
   125f4:	09 f0       	breq	.+2      	; 0x125f8 <FreePrinting+0x54>
   125f6:	70 c3       	rjmp	.+1760   	; 0x12cd8 <FreePrinting+0x734>
		      IsFreePrinting=False;
   125f8:	10 92 a8 01 	sts	0x01A8, r1
			  IsBusyFreePrinting=True;
   125fc:	20 93 b4 01 	sts	0x01B4, r18
			  IsBusyPrint=False;
   12600:	10 92 b3 01 	sts	0x01B3, r1
			  iPrinted=0,iFooter=0;
   12604:	10 92 f5 01 	sts	0x01F5, r1
   12608:	10 92 f3 01 	sts	0x01F3, r1

			  PrintCopy=(cmdPrint&0x0F);
   1260c:	80 91 b5 01 	lds	r24, 0x01B5
   12610:	8f 70       	andi	r24, 0x0F	; 15
   12612:	80 93 f2 01 	sts	0x01F2, r24

			  //cmdPrint=cmdPrint|0b00100000;
			  //PrintCopy=2;

			  stFreePrinting=fpInitHeader;
   12616:	82 e0       	ldi	r24, 0x02	; 2
   12618:	80 93 25 01 	sts	0x0125, r24
			  InitPrinter();
   1261c:	0e 94 d5 45 	call	0x8baa	; 0x8baa <InitPrinter>
   12620:	5b c3       	rjmp	.+1718   	; 0x12cd8 <FreePrinting+0x734>
			  }
	      break;
     case fpInitHeader:
	      //uart_printf(0,1,PSTR("fpInitHeader"));
		  iHeader=0;
   12622:	10 92 f4 01 	sts	0x01F4, r1
	      if (((cmdPrint&0b10000000)>>7)==1){
   12626:	80 91 b5 01 	lds	r24, 0x01B5
   1262a:	88 1f       	adc	r24, r24
   1262c:	88 27       	eor	r24, r24
   1262e:	88 1f       	adc	r24, r24
   12630:	90 e0       	ldi	r25, 0x00	; 0
   12632:	81 30       	cpi	r24, 0x01	; 1
   12634:	91 05       	cpc	r25, r1
   12636:	11 f1       	breq	.+68     	; 0x1267c <FreePrinting+0xd8>
		      stFreePrinting=fpLoadHeader;
			  }
		  else
	      if (((cmdPrint&0b10000000)>>7)==0) stFreePrinting=fpInitMessage;	      
   12638:	89 2b       	or	r24, r25
   1263a:	09 f0       	breq	.+2      	; 0x1263e <FreePrinting+0x9a>
   1263c:	4d c3       	rjmp	.+1690   	; 0x12cd8 <FreePrinting+0x734>
   1263e:	85 e0       	ldi	r24, 0x05	; 5
   12640:	80 93 25 01 	sts	0x0125, r24
   12644:	49 c3       	rjmp	.+1682   	; 0x12cd8 <FreePrinting+0x734>
	      break;
     case fpLoadHeader:
	      //uart_printf(0,1,PSTR("fpLoadHeader"));
          //Header 1
	      eeprom_read_block((void*) &strPrint, (const void*) &DefHeaderFooter[iHeader], 40);
   12646:	60 91 f4 01 	lds	r22, 0x01F4
   1264a:	89 e2       	ldi	r24, 0x29	; 41
   1264c:	68 9f       	mul	r22, r24
   1264e:	b0 01       	movw	r22, r0
   12650:	11 24       	eor	r1, r1
   12652:	68 5d       	subi	r22, 0xD8	; 216
   12654:	7d 4f       	sbci	r23, 0xFD	; 253
   12656:	8c eb       	ldi	r24, 0xBC	; 188
   12658:	98 e0       	ldi	r25, 0x08	; 8
   1265a:	48 e2       	ldi	r20, 0x28	; 40
   1265c:	50 e0       	ldi	r21, 0x00	; 0
   1265e:	0e 94 30 ad 	call	0x15a60	; 0x15a60 <__eerd_block_m128>
		  iHeader++;
   12662:	80 91 f4 01 	lds	r24, 0x01F4
   12666:	8f 5f       	subi	r24, 0xFF	; 255
   12668:	80 93 f4 01 	sts	0x01F4, r24
		  if (iHeader<6){
   1266c:	86 30       	cpi	r24, 0x06	; 6
   1266e:	38 f7       	brcc	.-50     	; 0x1263e <FreePrinting+0x9a>
		      if (SpaceOnly(strPrint)==True){
   12670:	8c eb       	ldi	r24, 0xBC	; 188
   12672:	98 e0       	ldi	r25, 0x08	; 8
   12674:	0e 94 32 24 	call	0x4864	; 0x4864 <SpaceOnly>
   12678:	81 30       	cpi	r24, 0x01	; 1
   1267a:	11 f4       	brne	.+4      	; 0x12680 <FreePrinting+0xdc>
			      stFreePrinting=fpLoadHeader;
   1267c:	83 e0       	ldi	r24, 0x03	; 3
   1267e:	e0 cf       	rjmp	.-64     	; 0x12640 <FreePrinting+0x9c>
				  }	      
			  else{
			      stFreePrinting=fpPrintHeader;
   12680:	84 e0       	ldi	r24, 0x04	; 4
   12682:	80 93 25 01 	sts	0x0125, r24
			      iSend=0;
   12686:	10 92 ee 01 	sts	0x01EE, r1
   1268a:	10 92 ed 01 	sts	0x01ED, r1
				  iLoop=0;
   1268e:	10 92 ea 01 	sts	0x01EA, r1
   12692:	10 92 e9 01 	sts	0x01E9, r1
				  //PrintDoubleHeight on 1st Header
				  if (iHeader==1) PrintDoubleHeight();
   12696:	80 91 f4 01 	lds	r24, 0x01F4
   1269a:	81 30       	cpi	r24, 0x01	; 1
   1269c:	19 f4       	brne	.+6      	; 0x126a4 <FreePrinting+0x100>
   1269e:	0e 94 4f 46 	call	0x8c9e	; 0x8c9e <PrintDoubleHeight>
   126a2:	1a c3       	rjmp	.+1588   	; 0x12cd8 <FreePrinting+0x734>
				  else 
				  if (iHeader==2) PrintNormalHeight();
   126a4:	82 30       	cpi	r24, 0x02	; 2
   126a6:	09 f0       	breq	.+2      	; 0x126aa <FreePrinting+0x106>
   126a8:	17 c3       	rjmp	.+1582   	; 0x12cd8 <FreePrinting+0x734>
   126aa:	0e 94 39 46 	call	0x8c72	; 0x8c72 <PrintNormalHeight>
   126ae:	14 c3       	rjmp	.+1576   	; 0x12cd8 <FreePrinting+0x734>
		  {stFreePrinting=fpInitMessage;
		  }
	      break;
     case fpPrintHeader:
	      //uart_printf(0,1,PSTR("fpPrintHeader"));
		  if (iSend<40){
   126b0:	80 91 ed 01 	lds	r24, 0x01ED
   126b4:	90 91 ee 01 	lds	r25, 0x01EE
   126b8:	88 97       	sbiw	r24, 0x28	; 40
   126ba:	68 f4       	brcc	.+26     	; 0x126d6 <FreePrinting+0x132>
		      iLoop++;
   126bc:	80 91 e9 01 	lds	r24, 0x01E9
   126c0:	90 91 ea 01 	lds	r25, 0x01EA
   126c4:	01 96       	adiw	r24, 0x01	; 1
   126c6:	90 93 ea 01 	sts	0x01EA, r25
   126ca:	80 93 e9 01 	sts	0x01E9, r24
			  if ((iLoop%PRINT_DELAY)==0){
			     //uart(_COM_PRINTER,1,strPrint[iSend]);
		         //iSend++;
				 TimPrintBusy=0;
   126ce:	10 92 b6 01 	sts	0x01B6, r1
				 stFreePrinting=fpCheckPrintStatusHeader;
   126d2:	82 e1       	ldi	r24, 0x12	; 18
   126d4:	b5 cf       	rjmp	.-150    	; 0x12640 <FreePrinting+0x9c>
				 }
			  }
          else{ 
		     stFreePrinting=fpLoadHeader;
   126d6:	83 e0       	ldi	r24, 0x03	; 3
   126d8:	5c c2       	rjmp	.+1208   	; 0x12b92 <FreePrinting+0x5ee>
			 CarriegeReturn();
		  }
	      break;

     case fpCheckPrintStatusHeader:
	      if (IsBusyPrint==False){
   126da:	80 91 b3 01 	lds	r24, 0x01B3
   126de:	88 23       	and	r24, r24
   126e0:	09 f0       	breq	.+2      	; 0x126e4 <FreePrinting+0x140>
   126e2:	76 c2       	rjmp	.+1260   	; 0x12bd0 <FreePrinting+0x62c>
		      uart(_COM_PRINTER,1,strPrint[iSend]);
   126e4:	e0 91 ed 01 	lds	r30, 0x01ED
   126e8:	f0 91 ee 01 	lds	r31, 0x01EE
   126ec:	e4 54       	subi	r30, 0x44	; 68
   126ee:	f7 4f       	sbci	r31, 0xF7	; 247
   126f0:	61 e0       	ldi	r22, 0x01	; 1
   126f2:	40 81       	ld	r20, Z
   126f4:	0e 94 d2 a8 	call	0x151a4	; 0x151a4 <uart>
		      iSend++;
   126f8:	80 91 ed 01 	lds	r24, 0x01ED
   126fc:	90 91 ee 01 	lds	r25, 0x01EE
   12700:	01 96       	adiw	r24, 0x01	; 1
   12702:	90 93 ee 01 	sts	0x01EE, r25
   12706:	80 93 ed 01 	sts	0x01ED, r24
		      stFreePrinting=fpPrintHeader;
   1270a:	84 e0       	ldi	r24, 0x04	; 4
   1270c:	5f c2       	rjmp	.+1214   	; 0x12bcc <FreePrinting+0x628>
		      stFreePrinting=fpFinishFreePrinting;
			  }
	      break;
     case fpInitMessage:
	      //uart_printf(0,1,PSTR("fpInitMessage"));
	      iSend=0;iLoop=0;
   1270e:	10 92 ee 01 	sts	0x01EE, r1
   12712:	10 92 ed 01 	sts	0x01ED, r1
   12716:	10 92 ea 01 	sts	0x01EA, r1
   1271a:	10 92 e9 01 	sts	0x01E9, r1
          stFreePrinting=fpPrintMessage; 
   1271e:	08 e0       	ldi	r16, 0x08	; 8
   12720:	00 93 25 01 	sts	0x0125, r16
		  CarriegeReturn();
   12724:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
		  if (iPrinted>0) stFreePrinting=fpInitDuplicate;
   12728:	80 91 f5 01 	lds	r24, 0x01F5
   1272c:	88 23       	and	r24, r24
   1272e:	11 f0       	breq	.+4      	; 0x12734 <FreePrinting+0x190>
   12730:	86 e0       	ldi	r24, 0x06	; 6
   12732:	86 cf       	rjmp	.-244    	; 0x12640 <FreePrinting+0x9c>
		  else stFreePrinting=fpPrintMessage; 
   12734:	00 93 25 01 	sts	0x0125, r16
   12738:	cf c2       	rjmp	.+1438   	; 0x12cd8 <FreePrinting+0x734>
	      break;
     case fpInitDuplicate:
	      //uart_printf(0,1,PSTR("fpInitDuplicate"));
          if (iPrinted>0)sprintf_P(strPrint,PSTR("             DUPLICATE COPY        "));
   1273a:	80 91 f5 01 	lds	r24, 0x01F5
   1273e:	2c eb       	ldi	r18, 0xBC	; 188
   12740:	38 e0       	ldi	r19, 0x08	; 8
   12742:	88 23       	and	r24, r24
   12744:	79 f0       	breq	.+30     	; 0x12764 <FreePrinting+0x1c0>
   12746:	00 d0       	rcall	.+0      	; 0x12748 <FreePrinting+0x1a4>
   12748:	00 d0       	rcall	.+0      	; 0x1274a <FreePrinting+0x1a6>
   1274a:	ad b7       	in	r26, 0x3d	; 61
   1274c:	be b7       	in	r27, 0x3e	; 62
   1274e:	12 96       	adiw	r26, 0x02	; 2
   12750:	3c 93       	st	X, r19
   12752:	2e 93       	st	-X, r18
   12754:	11 97       	sbiw	r26, 0x01	; 1
   12756:	8d e7       	ldi	r24, 0x7D	; 125
   12758:	97 e0       	ldi	r25, 0x07	; 7
   1275a:	14 96       	adiw	r26, 0x04	; 4
   1275c:	9c 93       	st	X, r25
   1275e:	8e 93       	st	-X, r24
   12760:	13 97       	sbiw	r26, 0x03	; 3
   12762:	0a c0       	rjmp	.+20     	; 0x12778 <FreePrinting+0x1d4>
          else           sprintf_P(strPrint,PSTR("                                   "));
   12764:	00 d0       	rcall	.+0      	; 0x12766 <FreePrinting+0x1c2>
   12766:	00 d0       	rcall	.+0      	; 0x12768 <FreePrinting+0x1c4>
   12768:	ed b7       	in	r30, 0x3d	; 61
   1276a:	fe b7       	in	r31, 0x3e	; 62
   1276c:	32 83       	std	Z+2, r19	; 0x02
   1276e:	21 83       	std	Z+1, r18	; 0x01
   12770:	89 e5       	ldi	r24, 0x59	; 89
   12772:	97 e0       	ldi	r25, 0x07	; 7
   12774:	94 83       	std	Z+4, r25	; 0x04
   12776:	83 83       	std	Z+3, r24	; 0x03
   12778:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
   1277c:	0f 90       	pop	r0
   1277e:	0f 90       	pop	r0
   12780:	0f 90       	pop	r0
   12782:	0f 90       	pop	r0
		  iSend=0;
   12784:	10 92 ee 01 	sts	0x01EE, r1
   12788:	10 92 ed 01 	sts	0x01ED, r1
		  iLoop=0;
   1278c:	10 92 ea 01 	sts	0x01EA, r1
   12790:	10 92 e9 01 	sts	0x01E9, r1
		  LSend=strlen(strPrint);
   12794:	ec eb       	ldi	r30, 0xBC	; 188
   12796:	f8 e0       	ldi	r31, 0x08	; 8
   12798:	01 90       	ld	r0, Z+
   1279a:	00 20       	and	r0, r0
   1279c:	e9 f7       	brne	.-6      	; 0x12798 <FreePrinting+0x1f4>
   1279e:	31 97       	sbiw	r30, 0x01	; 1
   127a0:	ec 5b       	subi	r30, 0xBC	; 188
   127a2:	f8 40       	sbci	r31, 0x08	; 8
   127a4:	f0 93 ec 01 	sts	0x01EC, r31
   127a8:	e0 93 eb 01 	sts	0x01EB, r30
          stFreePrinting=fpPrintDuplicate; 
   127ac:	87 e0       	ldi	r24, 0x07	; 7
   127ae:	48 cf       	rjmp	.-368    	; 0x12640 <FreePrinting+0x9c>
	      break;
     case fpPrintDuplicate:
	      //uart_printf(0,1,PSTR("fpPrintDuplicate"));
		  if (iSend<LSend){
   127b0:	20 91 ed 01 	lds	r18, 0x01ED
   127b4:	30 91 ee 01 	lds	r19, 0x01EE
   127b8:	80 91 eb 01 	lds	r24, 0x01EB
   127bc:	90 91 ec 01 	lds	r25, 0x01EC
   127c0:	28 17       	cp	r18, r24
   127c2:	39 07       	cpc	r19, r25
   127c4:	68 f4       	brcc	.+26     	; 0x127e0 <FreePrinting+0x23c>
		      iLoop++;
   127c6:	80 91 e9 01 	lds	r24, 0x01E9
   127ca:	90 91 ea 01 	lds	r25, 0x01EA
   127ce:	01 96       	adiw	r24, 0x01	; 1
   127d0:	90 93 ea 01 	sts	0x01EA, r25
   127d4:	80 93 e9 01 	sts	0x01E9, r24
			  if((iLoop%PRINT_DELAY)==0){
			     //uart(_COM_PRINTER,1,strPrint[iSend]);
				 //iSend++;
				 TimPrintBusy=0;
   127d8:	10 92 b6 01 	sts	0x01B6, r1
                 stFreePrinting=fpCheckPrintStatusDuplicate;
   127dc:	85 e1       	ldi	r24, 0x15	; 21
   127de:	30 cf       	rjmp	.-416    	; 0x12640 <FreePrinting+0x9c>
				 }
			  }
          else {
		     iSend=0;
   127e0:	10 92 ee 01 	sts	0x01EE, r1
   127e4:	10 92 ed 01 	sts	0x01ED, r1
		     stFreePrinting=fpPrintMessage;
   127e8:	88 e0       	ldi	r24, 0x08	; 8
   127ea:	d3 c1       	rjmp	.+934    	; 0x12b92 <FreePrinting+0x5ee>
			 CarriegeReturn();	      
			 }
	      break;
     case fpCheckPrintStatusDuplicate:
	      if (IsBusyPrint==False){
   127ec:	80 91 b3 01 	lds	r24, 0x01B3
   127f0:	88 23       	and	r24, r24
   127f2:	09 f0       	breq	.+2      	; 0x127f6 <FreePrinting+0x252>
   127f4:	ed c1       	rjmp	.+986    	; 0x12bd0 <FreePrinting+0x62c>
		      uart(_COM_PRINTER,1,strPrint[iSend]);
   127f6:	e0 91 ed 01 	lds	r30, 0x01ED
   127fa:	f0 91 ee 01 	lds	r31, 0x01EE
   127fe:	e4 54       	subi	r30, 0x44	; 68
   12800:	f7 4f       	sbci	r31, 0xF7	; 247
   12802:	61 e0       	ldi	r22, 0x01	; 1
   12804:	40 81       	ld	r20, Z
   12806:	0e 94 d2 a8 	call	0x151a4	; 0x151a4 <uart>
		      iSend++;
   1280a:	80 91 ed 01 	lds	r24, 0x01ED
   1280e:	90 91 ee 01 	lds	r25, 0x01EE
   12812:	01 96       	adiw	r24, 0x01	; 1
   12814:	90 93 ee 01 	sts	0x01EE, r25
   12818:	80 93 ed 01 	sts	0x01ED, r24
		      stFreePrinting=fpPrintDuplicate;
   1281c:	87 e0       	ldi	r24, 0x07	; 7
   1281e:	d6 c1       	rjmp	.+940    	; 0x12bcc <FreePrinting+0x628>
		      stFreePrinting=fpFinishFreePrinting;
			  }
	      break;

     case fpPrintMessage:
		  if (iSend<LengthMessage81){
   12820:	20 91 ed 01 	lds	r18, 0x01ED
   12824:	30 91 ee 01 	lds	r19, 0x01EE
   12828:	80 91 8d 01 	lds	r24, 0x018D
   1282c:	90 91 8e 01 	lds	r25, 0x018E
   12830:	28 17       	cp	r18, r24
   12832:	39 07       	cpc	r19, r25
   12834:	68 f4       	brcc	.+26     	; 0x12850 <FreePrinting+0x2ac>
		      iLoop++;
   12836:	80 91 e9 01 	lds	r24, 0x01E9
   1283a:	90 91 ea 01 	lds	r25, 0x01EA
   1283e:	01 96       	adiw	r24, 0x01	; 1
   12840:	90 93 ea 01 	sts	0x01EA, r25
   12844:	80 93 e9 01 	sts	0x01E9, r24
			  if((iLoop%PRINT_DELAY)==0){
			     TimPrintBusy=0;
   12848:	10 92 b6 01 	sts	0x01B6, r1
				 stFreePrinting=fpCheckPrintStatusMessage;
   1284c:	83 e1       	ldi	r24, 0x13	; 19
   1284e:	f8 ce       	rjmp	.-528    	; 0x12640 <FreePrinting+0x9c>
				 }
			  }
          else stFreePrinting=fpLoadEndLine;//fpInitFooter;
   12850:	86 e1       	ldi	r24, 0x16	; 22
   12852:	f6 ce       	rjmp	.-532    	; 0x12640 <FreePrinting+0x9c>
	      break;
     
     case fpCheckPrintStatusMessage:
	      if (IsBusyPrint==False){
   12854:	80 91 b3 01 	lds	r24, 0x01B3
   12858:	88 23       	and	r24, r24
   1285a:	09 f0       	breq	.+2      	; 0x1285e <FreePrinting+0x2ba>
   1285c:	b9 c1       	rjmp	.+882    	; 0x12bd0 <FreePrinting+0x62c>
              if ((PrintBuffer[iSend]!=0x0D)||(PrintBuffer[iSend]!=0x0A))
			      SendPrint(PrintBuffer[iSend],PrintBuffer[iSend+1]);
   1285e:	e0 91 ed 01 	lds	r30, 0x01ED
   12862:	f0 91 ee 01 	lds	r31, 0x01EE
   12866:	e4 51       	subi	r30, 0x14	; 20
   12868:	fc 4f       	sbci	r31, 0xFC	; 252
   1286a:	80 81       	ld	r24, Z
   1286c:	61 81       	ldd	r22, Z+1	; 0x01
   1286e:	0e 94 b2 45 	call	0x8b64	; 0x8b64 <SendPrint>
			     // uart(_COM_PRINTER,1,PrintBuffer[iSend]);
              if ((PrintBuffer[iSend]==0x0D)||(PrintBuffer[iSend+1]==0x0A))
   12872:	e0 91 ed 01 	lds	r30, 0x01ED
   12876:	f0 91 ee 01 	lds	r31, 0x01EE
   1287a:	e4 51       	subi	r30, 0x14	; 20
   1287c:	fc 4f       	sbci	r31, 0xFC	; 252
   1287e:	80 81       	ld	r24, Z
   12880:	8d 30       	cpi	r24, 0x0D	; 13
   12882:	19 f0       	breq	.+6      	; 0x1288a <FreePrinting+0x2e6>
   12884:	81 81       	ldd	r24, Z+1	; 0x01
   12886:	8a 30       	cpi	r24, 0x0A	; 10
   12888:	11 f4       	brne	.+4      	; 0x1288e <FreePrinting+0x2ea>
			     CarriegeReturn();
   1288a:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
             iSend++;
   1288e:	80 91 ed 01 	lds	r24, 0x01ED
   12892:	90 91 ee 01 	lds	r25, 0x01EE
   12896:	01 96       	adiw	r24, 0x01	; 1
   12898:	90 93 ee 01 	sts	0x01EE, r25
   1289c:	80 93 ed 01 	sts	0x01ED, r24
		     stFreePrinting=fpPrintMessage;
   128a0:	88 e0       	ldi	r24, 0x08	; 8
   128a2:	94 c1       	rjmp	.+808    	; 0x12bcc <FreePrinting+0x628>
		      stFreePrinting=fpFinishFreePrinting;
			  }
	      break;
     //SpaceAdded
	 case fpInitSpace:
	      iLoop=0;
   128a4:	10 92 ea 01 	sts	0x01EA, r1
   128a8:	10 92 e9 01 	sts	0x01E9, r1
		  iMargin=0;
   128ac:	10 92 f1 01 	sts	0x01F1, r1
		  stFreePrinting=fpPrintMargin;
   128b0:	8a e0       	ldi	r24, 0x0A	; 10
   128b2:	c6 ce       	rjmp	.-628    	; 0x12640 <FreePrinting+0x9c>
	      break;
	 case fpPrintMargin:
		  if (iMargin<PRINT_MARGIN){
   128b4:	80 91 f1 01 	lds	r24, 0x01F1
   128b8:	85 30       	cpi	r24, 0x05	; 5
   128ba:	90 f4       	brcc	.+36     	; 0x128e0 <FreePrinting+0x33c>
		      iMargin++;
   128bc:	8f 5f       	subi	r24, 0xFF	; 255
   128be:	80 93 f1 01 	sts	0x01F1, r24
		      iLoop++;
   128c2:	80 91 e9 01 	lds	r24, 0x01E9
   128c6:	90 91 ea 01 	lds	r25, 0x01EA
   128ca:	01 96       	adiw	r24, 0x01	; 1
   128cc:	90 93 ea 01 	sts	0x01EA, r25
   128d0:	80 93 e9 01 	sts	0x01E9, r24
	          if ((iLoop%PRINT_DELAY)==0)uart(_COM_PRINTER,1,' ');
   128d4:	80 e0       	ldi	r24, 0x00	; 0
   128d6:	61 e0       	ldi	r22, 0x01	; 1
   128d8:	40 e2       	ldi	r20, 0x20	; 32
   128da:	0e 94 d2 a8 	call	0x151a4	; 0x151a4 <uart>
   128de:	fc c1       	rjmp	.+1016   	; 0x12cd8 <FreePrinting+0x734>
			 }
          else stFreePrinting=fpPrintMessage;
   128e0:	88 e0       	ldi	r24, 0x08	; 8
   128e2:	ae ce       	rjmp	.-676    	; 0x12640 <FreePrinting+0x9c>
	      break;
     
     //Added Operator Name:
	 case fpLoadEndLine:
		  eeprom_read_block((void*) &strOperatorName, (const void*) &DefOperatorName,18);
   128e4:	8e 01       	movw	r16, r28
   128e6:	0f 5f       	subi	r16, 0xFF	; 255
   128e8:	1f 4f       	sbci	r17, 0xFF	; 255
   128ea:	c8 01       	movw	r24, r16
   128ec:	65 e1       	ldi	r22, 0x15	; 21
   128ee:	70 e0       	ldi	r23, 0x00	; 0
   128f0:	42 e1       	ldi	r20, 0x12	; 18
   128f2:	50 e0       	ldi	r21, 0x00	; 0
   128f4:	0e 94 30 ad 	call	0x15a60	; 0x15a60 <__eerd_block_m128>
   128f8:	c8 01       	movw	r24, r16
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   128fa:	9e 01       	movw	r18, r28
   128fc:	20 5f       	subi	r18, 0xF0	; 240
   128fe:	3f 4f       	sbci	r19, 0xFF	; 255
	    Dest[i]=Source[IdxSource+i];
   12900:	01 96       	adiw	r24, 0x01	; 1
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   12902:	82 17       	cp	r24, r18
   12904:	93 07       	cpc	r25, r19
   12906:	e1 f7       	brne	.-8      	; 0x12900 <FreePrinting+0x35c>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
   12908:	18 8a       	std	Y+16, r1	; 0x10
     
     //Added Operator Name:
	 case fpLoadEndLine:
		  eeprom_read_block((void*) &strOperatorName, (const void*) &DefOperatorName,18);
          StrPosCopy(strOperatorName,strOperatorName,0,15);
          if (strlen(strOperatorName)>0){
   1290a:	89 81       	ldd	r24, Y+1	; 0x01
   1290c:	88 23       	and	r24, r24
   1290e:	09 f4       	brne	.+2      	; 0x12912 <FreePrinting+0x36e>
   12910:	d4 c0       	rjmp	.+424    	; 0x12aba <FreePrinting+0x516>
		  	  if (SpaceOnly(strOperatorName)!=True){
   12912:	ce 01       	movw	r24, r28
   12914:	01 96       	adiw	r24, 0x01	; 1
   12916:	0e 94 32 24 	call	0x4864	; 0x4864 <SpaceOnly>
   1291a:	81 30       	cpi	r24, 0x01	; 1
   1291c:	09 f4       	brne	.+2      	; 0x12920 <FreePrinting+0x37c>
   1291e:	cd c0       	rjmp	.+410    	; 0x12aba <FreePrinting+0x516>
			      sprintf_P(strPrint,PSTR("---------------------------------"));
   12920:	00 d0       	rcall	.+0      	; 0x12922 <FreePrinting+0x37e>
   12922:	00 d0       	rcall	.+0      	; 0x12924 <FreePrinting+0x380>
   12924:	0c eb       	ldi	r16, 0xBC	; 188
   12926:	18 e0       	ldi	r17, 0x08	; 8
   12928:	ad b7       	in	r26, 0x3d	; 61
   1292a:	be b7       	in	r27, 0x3e	; 62
   1292c:	12 96       	adiw	r26, 0x02	; 2
   1292e:	1c 93       	st	X, r17
   12930:	0e 93       	st	-X, r16
   12932:	11 97       	sbiw	r26, 0x01	; 1
   12934:	87 e3       	ldi	r24, 0x37	; 55
   12936:	97 e0       	ldi	r25, 0x07	; 7
   12938:	14 96       	adiw	r26, 0x04	; 4
   1293a:	9c 93       	st	X, r25
   1293c:	8e 93       	st	-X, r24
   1293e:	13 97       	sbiw	r26, 0x03	; 3
   12940:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
			      //AddSpaceLead(strPrint,(strlen(strPrint)+PRINT_MARGIN));
			      iSend=0;
   12944:	10 92 ee 01 	sts	0x01EE, r1
   12948:	10 92 ed 01 	sts	0x01ED, r1
				  iLoop=0;
   1294c:	10 92 ea 01 	sts	0x01EA, r1
   12950:	10 92 e9 01 	sts	0x01E9, r1
				  LSend=strlen(strPrint);
   12954:	f8 01       	movw	r30, r16
   12956:	01 90       	ld	r0, Z+
   12958:	00 20       	and	r0, r0
   1295a:	e9 f7       	brne	.-6      	; 0x12956 <FreePrinting+0x3b2>
   1295c:	8f 01       	movw	r16, r30
   1295e:	01 50       	subi	r16, 0x01	; 1
   12960:	10 40       	sbci	r17, 0x00	; 0
   12962:	0c 5b       	subi	r16, 0xBC	; 188
   12964:	18 40       	sbci	r17, 0x08	; 8
   12966:	10 93 ec 01 	sts	0x01EC, r17
   1296a:	00 93 eb 01 	sts	0x01EB, r16
				  stFreePrinting=fpPrintEndLine;	
   1296e:	87 e1       	ldi	r24, 0x17	; 23
   12970:	80 93 25 01 	sts	0x0125, r24
   12974:	0f 90       	pop	r0
   12976:	0f 90       	pop	r0
   12978:	0f 90       	pop	r0
   1297a:	0f 90       	pop	r0
   1297c:	ad c1       	rjmp	.+858    	; 0x12cd8 <FreePrinting+0x734>
			   }else stFreePrinting=fpInitFooter;
		  }else stFreePrinting=fpInitFooter;
	      break;

	 case fpPrintEndLine:
		  if (iSend<LSend){
   1297e:	20 91 ed 01 	lds	r18, 0x01ED
   12982:	30 91 ee 01 	lds	r19, 0x01EE
   12986:	80 91 eb 01 	lds	r24, 0x01EB
   1298a:	90 91 ec 01 	lds	r25, 0x01EC
   1298e:	28 17       	cp	r18, r24
   12990:	39 07       	cpc	r19, r25
   12992:	68 f4       	brcc	.+26     	; 0x129ae <FreePrinting+0x40a>
		      iLoop++;
   12994:	80 91 e9 01 	lds	r24, 0x01E9
   12998:	90 91 ea 01 	lds	r25, 0x01EA
   1299c:	01 96       	adiw	r24, 0x01	; 1
   1299e:	90 93 ea 01 	sts	0x01EA, r25
   129a2:	80 93 e9 01 	sts	0x01E9, r24
			  if((iLoop%PRINT_DELAY)==0){
				  TimPrintBusy=0;
   129a6:	10 92 b6 01 	sts	0x01B6, r1
				  stFreePrinting=fpCheckPrintEndLine;
   129aa:	88 e1       	ldi	r24, 0x18	; 24
   129ac:	49 ce       	rjmp	.-878    	; 0x12640 <FreePrinting+0x9c>
				}
			  }
          else {
			  CarriegeReturn();
   129ae:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
			  stFreePrinting=fpLoadOperatorName;
   129b2:	89 e1       	ldi	r24, 0x19	; 25
   129b4:	45 ce       	rjmp	.-886    	; 0x12640 <FreePrinting+0x9c>
			  }
	      break;
	 case fpCheckPrintEndLine:
	      if (IsBusyPrint==False){
   129b6:	80 91 b3 01 	lds	r24, 0x01B3
   129ba:	88 23       	and	r24, r24
   129bc:	09 f0       	breq	.+2      	; 0x129c0 <FreePrinting+0x41c>
   129be:	08 c1       	rjmp	.+528    	; 0x12bd0 <FreePrinting+0x62c>
		      uart(_COM_PRINTER,1,strPrint[iSend]);
   129c0:	e0 91 ed 01 	lds	r30, 0x01ED
   129c4:	f0 91 ee 01 	lds	r31, 0x01EE
   129c8:	e4 54       	subi	r30, 0x44	; 68
   129ca:	f7 4f       	sbci	r31, 0xF7	; 247
   129cc:	61 e0       	ldi	r22, 0x01	; 1
   129ce:	40 81       	ld	r20, Z
   129d0:	0e 94 d2 a8 	call	0x151a4	; 0x151a4 <uart>
		      iSend++;
   129d4:	80 91 ed 01 	lds	r24, 0x01ED
   129d8:	90 91 ee 01 	lds	r25, 0x01EE
   129dc:	01 96       	adiw	r24, 0x01	; 1
   129de:	90 93 ee 01 	sts	0x01EE, r25
   129e2:	80 93 ed 01 	sts	0x01ED, r24
		      stFreePrinting=fpPrintEndLine;
   129e6:	87 e1       	ldi	r24, 0x17	; 23
   129e8:	f1 c0       	rjmp	.+482    	; 0x12bcc <FreePrinting+0x628>
		      stFreePrinting=fpFinishFreePrinting;
			  }
	      break;

	 case fpLoadOperatorName:
		  eeprom_read_block((void*) &strOperatorName, (const void*) &DefOperatorName,18);
   129ea:	8e 01       	movw	r16, r28
   129ec:	0f 5f       	subi	r16, 0xFF	; 255
   129ee:	1f 4f       	sbci	r17, 0xFF	; 255
   129f0:	c8 01       	movw	r24, r16
   129f2:	65 e1       	ldi	r22, 0x15	; 21
   129f4:	70 e0       	ldi	r23, 0x00	; 0
   129f6:	42 e1       	ldi	r20, 0x12	; 18
   129f8:	50 e0       	ldi	r21, 0x00	; 0
   129fa:	0e 94 30 ad 	call	0x15a60	; 0x15a60 <__eerd_block_m128>
   129fe:	c8 01       	movw	r24, r16
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   12a00:	9e 01       	movw	r18, r28
   12a02:	20 5f       	subi	r18, 0xF0	; 240
   12a04:	3f 4f       	sbci	r19, 0xFF	; 255
	    Dest[i]=Source[IdxSource+i];
   12a06:	01 96       	adiw	r24, 0x01	; 1
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   12a08:	82 17       	cp	r24, r18
   12a0a:	93 07       	cpc	r25, r19
   12a0c:	e1 f7       	brne	.-8      	; 0x12a06 <FreePrinting+0x462>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
   12a0e:	18 8a       	std	Y+16, r1	; 0x10
	      break;

	 case fpLoadOperatorName:
		  eeprom_read_block((void*) &strOperatorName, (const void*) &DefOperatorName,18);
		  StrPosCopy(strOperatorName,strOperatorName,0,15);
		  sprintf_P(strPrint,PSTR("Operator: %s"),strOperatorName);
   12a10:	00 d0       	rcall	.+0      	; 0x12a12 <FreePrinting+0x46e>
   12a12:	00 d0       	rcall	.+0      	; 0x12a14 <FreePrinting+0x470>
   12a14:	00 d0       	rcall	.+0      	; 0x12a16 <FreePrinting+0x472>
   12a16:	ed b7       	in	r30, 0x3d	; 61
   12a18:	fe b7       	in	r31, 0x3e	; 62
   12a1a:	31 96       	adiw	r30, 0x01	; 1
   12a1c:	0c eb       	ldi	r16, 0xBC	; 188
   12a1e:	18 e0       	ldi	r17, 0x08	; 8
   12a20:	ad b7       	in	r26, 0x3d	; 61
   12a22:	be b7       	in	r27, 0x3e	; 62
   12a24:	12 96       	adiw	r26, 0x02	; 2
   12a26:	1c 93       	st	X, r17
   12a28:	0e 93       	st	-X, r16
   12a2a:	11 97       	sbiw	r26, 0x01	; 1
   12a2c:	8a e2       	ldi	r24, 0x2A	; 42
   12a2e:	97 e0       	ldi	r25, 0x07	; 7
   12a30:	93 83       	std	Z+3, r25	; 0x03
   12a32:	82 83       	std	Z+2, r24	; 0x02
   12a34:	ce 01       	movw	r24, r28
   12a36:	01 96       	adiw	r24, 0x01	; 1
   12a38:	95 83       	std	Z+5, r25	; 0x05
   12a3a:	84 83       	std	Z+4, r24	; 0x04
   12a3c:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	      iSend=0;
   12a40:	10 92 ee 01 	sts	0x01EE, r1
   12a44:	10 92 ed 01 	sts	0x01ED, r1
		  iLoop=0;
   12a48:	10 92 ea 01 	sts	0x01EA, r1
   12a4c:	10 92 e9 01 	sts	0x01E9, r1
		  LSend=strlen(strPrint);
   12a50:	f8 01       	movw	r30, r16
   12a52:	01 90       	ld	r0, Z+
   12a54:	00 20       	and	r0, r0
   12a56:	e9 f7       	brne	.-6      	; 0x12a52 <FreePrinting+0x4ae>
   12a58:	8f 01       	movw	r16, r30
   12a5a:	01 50       	subi	r16, 0x01	; 1
   12a5c:	10 40       	sbci	r17, 0x00	; 0
   12a5e:	0c 5b       	subi	r16, 0xBC	; 188
   12a60:	18 40       	sbci	r17, 0x08	; 8
   12a62:	10 93 ec 01 	sts	0x01EC, r17
   12a66:	00 93 eb 01 	sts	0x01EB, r16
		  stFreePrinting=fpPrintOperatorName;	
   12a6a:	8a e1       	ldi	r24, 0x1A	; 26
   12a6c:	80 93 25 01 	sts	0x0125, r24
   12a70:	8d b7       	in	r24, 0x3d	; 61
   12a72:	9e b7       	in	r25, 0x3e	; 62
   12a74:	06 96       	adiw	r24, 0x06	; 6
   12a76:	0f b6       	in	r0, 0x3f	; 63
   12a78:	f8 94       	cli
   12a7a:	9e bf       	out	0x3e, r25	; 62
   12a7c:	0f be       	out	0x3f, r0	; 63
   12a7e:	8d bf       	out	0x3d, r24	; 61
   12a80:	2b c1       	rjmp	.+598    	; 0x12cd8 <FreePrinting+0x734>
	      break;
	 case fpPrintOperatorName:
		  if (iSend<LSend){
   12a82:	20 91 ed 01 	lds	r18, 0x01ED
   12a86:	30 91 ee 01 	lds	r19, 0x01EE
   12a8a:	80 91 eb 01 	lds	r24, 0x01EB
   12a8e:	90 91 ec 01 	lds	r25, 0x01EC
   12a92:	28 17       	cp	r18, r24
   12a94:	39 07       	cpc	r19, r25
   12a96:	68 f4       	brcc	.+26     	; 0x12ab2 <FreePrinting+0x50e>
		      iLoop++;
   12a98:	80 91 e9 01 	lds	r24, 0x01E9
   12a9c:	90 91 ea 01 	lds	r25, 0x01EA
   12aa0:	01 96       	adiw	r24, 0x01	; 1
   12aa2:	90 93 ea 01 	sts	0x01EA, r25
   12aa6:	80 93 e9 01 	sts	0x01E9, r24
			  if((iLoop%PRINT_DELAY)==0){
				  TimPrintBusy=0;
   12aaa:	10 92 b6 01 	sts	0x01B6, r1
				  stFreePrinting=fpCheckPrintOperatorName;
   12aae:	8b e1       	ldi	r24, 0x1B	; 27
   12ab0:	c7 cd       	rjmp	.-1138   	; 0x12640 <FreePrinting+0x9c>
				}
			  }
          else {
			  CarriegeReturn();
   12ab2:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
			  CarriegeReturn();
   12ab6:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
			  stFreePrinting=fpInitFooter;
   12aba:	8b e0       	ldi	r24, 0x0B	; 11
   12abc:	c1 cd       	rjmp	.-1150   	; 0x12640 <FreePrinting+0x9c>
			  }
	      break;
	 case fpCheckPrintOperatorName:
	      if (IsBusyPrint==False){
   12abe:	80 91 b3 01 	lds	r24, 0x01B3
   12ac2:	88 23       	and	r24, r24
   12ac4:	09 f0       	breq	.+2      	; 0x12ac8 <FreePrinting+0x524>
   12ac6:	84 c0       	rjmp	.+264    	; 0x12bd0 <FreePrinting+0x62c>
		      uart(_COM_PRINTER,1,strPrint[iSend]);
   12ac8:	e0 91 ed 01 	lds	r30, 0x01ED
   12acc:	f0 91 ee 01 	lds	r31, 0x01EE
   12ad0:	e4 54       	subi	r30, 0x44	; 68
   12ad2:	f7 4f       	sbci	r31, 0xF7	; 247
   12ad4:	61 e0       	ldi	r22, 0x01	; 1
   12ad6:	40 81       	ld	r20, Z
   12ad8:	0e 94 d2 a8 	call	0x151a4	; 0x151a4 <uart>
		      iSend++;
   12adc:	80 91 ed 01 	lds	r24, 0x01ED
   12ae0:	90 91 ee 01 	lds	r25, 0x01EE
   12ae4:	01 96       	adiw	r24, 0x01	; 1
   12ae6:	90 93 ee 01 	sts	0x01EE, r25
   12aea:	80 93 ed 01 	sts	0x01ED, r24
		      stFreePrinting=fpPrintOperatorName;
   12aee:	8a e1       	ldi	r24, 0x1A	; 26
   12af0:	6d c0       	rjmp	.+218    	; 0x12bcc <FreePrinting+0x628>
			  }
	      break;

     case fpInitFooter:
	      //uart_printf(0,1,PSTR("fpInitFooter"));
          if (((cmdPrint&0b01000000)>>6)==1){
   12af2:	80 91 b5 01 	lds	r24, 0x01B5
   12af6:	86 ff       	sbrs	r24, 6
   12af8:	06 c0       	rjmp	.+12     	; 0x12b06 <FreePrinting+0x562>
		      stFreePrinting=fpLoadFooter;
   12afa:	8c e0       	ldi	r24, 0x0C	; 12
   12afc:	80 93 25 01 	sts	0x0125, r24
			  iFooter=0;
   12b00:	10 92 f3 01 	sts	0x01F3, r1
   12b04:	e9 c0       	rjmp	.+466    	; 0x12cd8 <FreePrinting+0x734>
			  }
		  else
	      if (((cmdPrint&0b01000000)>>6)==0) stFreePrinting=fpPaperCut;//fpInitScroll;	                
   12b06:	80 e1       	ldi	r24, 0x10	; 16
   12b08:	9b cd       	rjmp	.-1226   	; 0x12640 <FreePrinting+0x9c>
	      break;
     case fpLoadFooter:
	 	  //uart_printf(0,1,PSTR("fpLoadFooter"));
          //Footer 1
	      eeprom_read_block((void*) &strPrint, (const void*) &DefHeaderFooter[6+iFooter], 40);
   12b0a:	60 91 f3 01 	lds	r22, 0x01F3
   12b0e:	89 e2       	ldi	r24, 0x29	; 41
   12b10:	68 9f       	mul	r22, r24
   12b12:	b0 01       	movw	r22, r0
   12b14:	11 24       	eor	r1, r1
   12b16:	62 5e       	subi	r22, 0xE2	; 226
   12b18:	7c 4f       	sbci	r23, 0xFC	; 252
   12b1a:	8c eb       	ldi	r24, 0xBC	; 188
   12b1c:	98 e0       	ldi	r25, 0x08	; 8
   12b1e:	48 e2       	ldi	r20, 0x28	; 40
   12b20:	50 e0       	ldi	r21, 0x00	; 0
   12b22:	0e 94 30 ad 	call	0x15a60	; 0x15a60 <__eerd_block_m128>
		  iFooter++;
   12b26:	80 91 f3 01 	lds	r24, 0x01F3
   12b2a:	8f 5f       	subi	r24, 0xFF	; 255
   12b2c:	80 93 f3 01 	sts	0x01F3, r24
		  if (iFooter<=4){
   12b30:	85 30       	cpi	r24, 0x05	; 5
   12b32:	90 f4       	brcc	.+36     	; 0x12b58 <FreePrinting+0x5b4>
		      if (SpaceOnly(strPrint)==True){
   12b34:	8c eb       	ldi	r24, 0xBC	; 188
   12b36:	98 e0       	ldi	r25, 0x08	; 8
   12b38:	0e 94 32 24 	call	0x4864	; 0x4864 <SpaceOnly>
   12b3c:	81 30       	cpi	r24, 0x01	; 1
   12b3e:	11 f4       	brne	.+4      	; 0x12b44 <FreePrinting+0x5a0>
			      stFreePrinting=fpLoadFooter;
   12b40:	8c e0       	ldi	r24, 0x0C	; 12
   12b42:	7e cd       	rjmp	.-1284   	; 0x12640 <FreePrinting+0x9c>
				  }
			  else{
			      iSend=0;
   12b44:	10 92 ee 01 	sts	0x01EE, r1
   12b48:	10 92 ed 01 	sts	0x01ED, r1
				  iLoop=0;
   12b4c:	10 92 ea 01 	sts	0x01EA, r1
   12b50:	10 92 e9 01 	sts	0x01E9, r1
				  stFreePrinting=fpPrintFooter;
   12b54:	8d e0       	ldi	r24, 0x0D	; 13
   12b56:	74 cd       	rjmp	.-1304   	; 0x12640 <FreePrinting+0x9c>
			      }
		  }else{
		    CarriegeReturn();
   12b58:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
			iPrinted++;
   12b5c:	80 91 f5 01 	lds	r24, 0x01F5
   12b60:	8f 5f       	subi	r24, 0xFF	; 255
   12b62:	80 93 f5 01 	sts	0x01F5, r24

			//if (eeprom_read_byte(&DefPrinterType)==PT_CUSTOM_CUBE){
			    stFreePrinting=fpInitScroll;
   12b66:	8e e0       	ldi	r24, 0x0E	; 14
   12b68:	6b cd       	rjmp	.-1322   	; 0x12640 <FreePrinting+0x9c>
			//}else stFreePrinting=fpPaperCut;

			}
	      break;
     case fpPrintFooter:
		  if (iSend<40){
   12b6a:	80 91 ed 01 	lds	r24, 0x01ED
   12b6e:	90 91 ee 01 	lds	r25, 0x01EE
   12b72:	88 97       	sbiw	r24, 0x28	; 40
   12b74:	68 f4       	brcc	.+26     	; 0x12b90 <FreePrinting+0x5ec>
		      iLoop++;
   12b76:	80 91 e9 01 	lds	r24, 0x01E9
   12b7a:	90 91 ea 01 	lds	r25, 0x01EA
   12b7e:	01 96       	adiw	r24, 0x01	; 1
   12b80:	90 93 ea 01 	sts	0x01EA, r25
   12b84:	80 93 e9 01 	sts	0x01E9, r24
			  if((iLoop%PRINT_DELAY)==0){
		        //uart(_COM_PRINTER,1,strPrint[iSend]);
		        //iSend++;
				TimPrintBusy=0;
   12b88:	10 92 b6 01 	sts	0x01B6, r1
				stFreePrinting=fpCheckPrintStatusFooter;
   12b8c:	84 e1       	ldi	r24, 0x14	; 20
   12b8e:	58 cd       	rjmp	.-1360   	; 0x12640 <FreePrinting+0x9c>
				}
			  }
          else {
		      stFreePrinting=fpLoadFooter;
   12b90:	8c e0       	ldi	r24, 0x0C	; 12
   12b92:	80 93 25 01 	sts	0x0125, r24
			  CarriegeReturn();
   12b96:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
   12b9a:	9e c0       	rjmp	.+316    	; 0x12cd8 <FreePrinting+0x734>
			  }
	      break;
     
	 case fpCheckPrintStatusFooter:
	      if (IsBusyPrint==False){
   12b9c:	80 91 b3 01 	lds	r24, 0x01B3
   12ba0:	88 23       	and	r24, r24
   12ba2:	b1 f4       	brne	.+44     	; 0x12bd0 <FreePrinting+0x62c>
		      uart(_COM_PRINTER,1,strPrint[iSend]);
   12ba4:	e0 91 ed 01 	lds	r30, 0x01ED
   12ba8:	f0 91 ee 01 	lds	r31, 0x01EE
   12bac:	e4 54       	subi	r30, 0x44	; 68
   12bae:	f7 4f       	sbci	r31, 0xF7	; 247
   12bb0:	61 e0       	ldi	r22, 0x01	; 1
   12bb2:	40 81       	ld	r20, Z
   12bb4:	0e 94 d2 a8 	call	0x151a4	; 0x151a4 <uart>
		      iSend++;
   12bb8:	80 91 ed 01 	lds	r24, 0x01ED
   12bbc:	90 91 ee 01 	lds	r25, 0x01EE
   12bc0:	01 96       	adiw	r24, 0x01	; 1
   12bc2:	90 93 ee 01 	sts	0x01EE, r25
   12bc6:	80 93 ed 01 	sts	0x01ED, r24
		      stFreePrinting=fpPrintFooter;
   12bca:	8d e0       	ldi	r24, 0x0D	; 13
   12bcc:	80 93 25 01 	sts	0x0125, r24
		  }
		  if (TimPrintBusy>TIM_BUSY_PRINT){
   12bd0:	80 91 b6 01 	lds	r24, 0x01B6
   12bd4:	8b 30       	cpi	r24, 0x0B	; 11
   12bd6:	08 f4       	brcc	.+2      	; 0x12bda <FreePrinting+0x636>
   12bd8:	7f c0       	rjmp	.+254    	; 0x12cd8 <FreePrinting+0x734>
		      IsPrintERROR=True;
   12bda:	81 e0       	ldi	r24, 0x01	; 1
   12bdc:	80 93 b1 01 	sts	0x01B1, r24
		      stFreePrinting=fpFinishFreePrinting;
   12be0:	81 e1       	ldi	r24, 0x11	; 17
   12be2:	2e cd       	rjmp	.-1444   	; 0x12640 <FreePrinting+0x9c>
			  }
	      break;

     case fpInitScroll:
	      iScroll=0;
   12be4:	10 92 f0 01 	sts	0x01F0, r1
		  iSend=0;
   12be8:	10 92 ee 01 	sts	0x01EE, r1
   12bec:	10 92 ed 01 	sts	0x01ED, r1
		  if (iPrinted<PrintCopy)
   12bf0:	90 91 f5 01 	lds	r25, 0x01F5
   12bf4:	80 91 f2 01 	lds	r24, 0x01F2
   12bf8:	98 17       	cp	r25, r24
   12bfa:	28 f4       	brcc	.+10     	; 0x12c06 <FreePrinting+0x662>
		      nScroll=eeprom_read_byte(&DefPrintScrollSpace);
   12bfc:	82 e3       	ldi	r24, 0x32	; 50
   12bfe:	90 e0       	ldi	r25, 0x00	; 0
   12c00:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
   12c04:	04 c0       	rjmp	.+8      	; 0x12c0e <FreePrinting+0x66a>
		  else if (iPrinted>=PrintCopy)
		  	  nScroll=eeprom_read_byte(&DefPrintScrollEnd);
   12c06:	81 e3       	ldi	r24, 0x31	; 49
   12c08:	90 e0       	ldi	r25, 0x00	; 0
   12c0a:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
   12c0e:	80 93 ef 01 	sts	0x01EF, r24

          stFreePrinting=fpScrollPaper;
   12c12:	8f e0       	ldi	r24, 0x0F	; 15
   12c14:	15 cd       	rjmp	.-1494   	; 0x12640 <FreePrinting+0x9c>
	      break;
     case fpScrollPaper:
	      if (iScroll>nScroll)stFreePrinting=fpPaperCut;
   12c16:	90 91 f0 01 	lds	r25, 0x01F0
   12c1a:	80 91 ef 01 	lds	r24, 0x01EF
   12c1e:	89 17       	cp	r24, r25
   12c20:	18 f4       	brcc	.+6      	; 0x12c28 <FreePrinting+0x684>
   12c22:	80 e1       	ldi	r24, 0x10	; 16
   12c24:	80 93 25 01 	sts	0x0125, r24
		  iSend++;
   12c28:	80 91 ed 01 	lds	r24, 0x01ED
   12c2c:	90 91 ee 01 	lds	r25, 0x01EE
   12c30:	01 96       	adiw	r24, 0x01	; 1
   12c32:	90 93 ee 01 	sts	0x01EE, r25
   12c36:	80 93 ed 01 	sts	0x01ED, r24
		  if (iSend%PRINT_DELAY==0){
		      CarriegeReturn();
   12c3a:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
			  iScroll++;
   12c3e:	80 91 f0 01 	lds	r24, 0x01F0
   12c42:	8f 5f       	subi	r24, 0xFF	; 255
   12c44:	80 93 f0 01 	sts	0x01F0, r24
   12c48:	47 c0       	rjmp	.+142    	; 0x12cd8 <FreePrinting+0x734>
			  }
	      break;
     case fpPaperCut:
		  //uart_printf(0,1,PSTR("fpPaperCut"));
		  //iPrinted++;
          if (iPrinted<PrintCopy){
   12c4a:	90 91 f5 01 	lds	r25, 0x01F5
   12c4e:	80 91 f2 01 	lds	r24, 0x01F2
   12c52:	98 17       	cp	r25, r24
   12c54:	20 f4       	brcc	.+8      	; 0x12c5e <FreePrinting+0x6ba>
		      CarriegeReturn();
   12c56:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
              stFreePrinting=fpInitHeader;
   12c5a:	82 e0       	ldi	r24, 0x02	; 2
   12c5c:	07 c0       	rjmp	.+14     	; 0x12c6c <FreePrinting+0x6c8>
			  }
          else{
		      if (IFType==IT_SLAVE)sendMessage04();
   12c5e:	80 91 00 01 	lds	r24, 0x0100
   12c62:	81 30       	cpi	r24, 0x01	; 1
   12c64:	11 f4       	brne	.+4      	; 0x12c6a <FreePrinting+0x6c6>
   12c66:	0e 94 ce 92 	call	0x1259c	; 0x1259c <sendMessage04>
		      stFreePrinting=fpFinishFreePrinting;
   12c6a:	81 e1       	ldi	r24, 0x11	; 17
   12c6c:	80 93 25 01 	sts	0x0125, r24
			  }
          
		  if (((cmdPrint&0b00100000)>>5)==1){
   12c70:	80 91 b5 01 	lds	r24, 0x01B5
   12c74:	85 ff       	sbrs	r24, 5
   12c76:	30 c0       	rjmp	.+96     	; 0x12cd8 <FreePrinting+0x734>
		      if (iPrinted==0){
   12c78:	80 91 f5 01 	lds	r24, 0x01F5
   12c7c:	88 23       	and	r24, r24
   12c7e:	31 f4       	brne	.+12     	; 0x12c8c <FreePrinting+0x6e8>
			      CarriegeReturn();_delay_ms(50);
   12c80:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
   12c84:	84 ed       	ldi	r24, 0xD4	; 212
   12c86:	90 e3       	ldi	r25, 0x30	; 48
   12c88:	01 97       	sbiw	r24, 0x01	; 1
   12c8a:	f1 f7       	brne	.-4      	; 0x12c88 <FreePrinting+0x6e4>
				 }
              //HFCS 0000 : Header, Footer, Copy , Scrool [Copy:16x max]
		      if ((iPrinted==PrintCopy)){
   12c8c:	90 91 f5 01 	lds	r25, 0x01F5
   12c90:	80 91 f2 01 	lds	r24, 0x01F2
   12c94:	98 17       	cp	r25, r24
   12c96:	b1 f4       	brne	.+44     	; 0x12cc4 <FreePrinting+0x720>
			      // if (((cmdPrint&0b00010000)>>4)==1){
				  CarriegeReturn();_delay_ms(50);
   12c98:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
   12c9c:	04 ed       	ldi	r16, 0xD4	; 212
   12c9e:	10 e3       	ldi	r17, 0x30	; 48
   12ca0:	c8 01       	movw	r24, r16
   12ca2:	01 97       	sbiw	r24, 0x01	; 1
   12ca4:	f1 f7       	brne	.-4      	; 0x12ca2 <FreePrinting+0x6fe>
				  CarriegeReturn();_delay_ms(50);
   12ca6:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
   12caa:	c8 01       	movw	r24, r16
   12cac:	01 97       	sbiw	r24, 0x01	; 1
   12cae:	f1 f7       	brne	.-4      	; 0x12cac <FreePrinting+0x708>
				  CarriegeReturn();_delay_ms(50);
   12cb0:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
   12cb4:	c8 01       	movw	r24, r16
   12cb6:	01 97       	sbiw	r24, 0x01	; 1
   12cb8:	f1 f7       	brne	.-4      	; 0x12cb6 <FreePrinting+0x712>
				  CarriegeReturn();_delay_ms(50);
   12cba:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
   12cbe:	c8 01       	movw	r24, r16
   12cc0:	01 97       	sbiw	r24, 0x01	; 1
   12cc2:	f1 f7       	brne	.-4      	; 0x12cc0 <FreePrinting+0x71c>
				   //}
				 }
		      PaperCut();
   12cc4:	0e 94 65 46 	call	0x8cca	; 0x8cca <PaperCut>
   12cc8:	07 c0       	rjmp	.+14     	; 0x12cd8 <FreePrinting+0x734>
		   }
	      break;
     case fpFinishFreePrinting:
	 	  //uart_printf(0,1,PSTR("fpFinished"));
		  IsBusyFreePrinting=False;
   12cca:	10 92 b4 01 	sts	0x01B4, r1
	      stFreePrinting=fpInit;
   12cce:	81 e0       	ldi	r24, 0x01	; 1
   12cd0:	80 93 25 01 	sts	0x0125, r24
		  iPrinted=0;
   12cd4:	10 92 f5 01 	sts	0x01F5, r1
	      break;
	 }//EndCase
}
   12cd8:	64 96       	adiw	r28, 0x14	; 20
   12cda:	0f b6       	in	r0, 0x3f	; 63
   12cdc:	f8 94       	cli
   12cde:	de bf       	out	0x3e, r29	; 62
   12ce0:	0f be       	out	0x3f, r0	; 63
   12ce2:	cd bf       	out	0x3d, r28	; 61
   12ce4:	cf 91       	pop	r28
   12ce6:	df 91       	pop	r29
   12ce8:	1f 91       	pop	r17
   12cea:	0f 91       	pop	r16
   12cec:	08 95       	ret

00012cee <PrintIdle>:
		//Font Setting: 1D 21 01
		uart(_COM_PRINTER, 1, 0x1D);uart(_COM_PRINTER, 1, 0x21);uart(_COM_PRINTER, 1, 0x00);   
		}
}

void PrintIdle(){
   12cee:	ef 92       	push	r14
   12cf0:	ff 92       	push	r15
   12cf2:	0f 93       	push	r16
   12cf4:	1f 93       	push	r17
   12cf6:	df 93       	push	r29
   12cf8:	cf 93       	push	r28
   12cfa:	cd b7       	in	r28, 0x3d	; 61
   12cfc:	de b7       	in	r29, 0x3e	; 62
   12cfe:	64 97       	sbiw	r28, 0x14	; 20
   12d00:	0f b6       	in	r0, 0x3f	; 63
   12d02:	f8 94       	cli
   12d04:	de bf       	out	0x3e, r29	; 62
   12d06:	0f be       	out	0x3f, r0	; 63
   12d08:	cd bf       	out	0x3d, r28	; 61
		uart_print(1,1,strSend);
	 }
	 #endif

     //Normalize PrintIdleState
     if ((IsPrinting==True)&&(stPrintIdle!=piIdle)){
   12d0a:	80 91 ac 01 	lds	r24, 0x01AC
   12d0e:	81 30       	cpi	r24, 0x01	; 1
   12d10:	31 f4       	brne	.+12     	; 0x12d1e <PrintIdle+0x30>
   12d12:	80 91 06 02 	lds	r24, 0x0206
   12d16:	88 23       	and	r24, r24
   12d18:	11 f0       	breq	.+4      	; 0x12d1e <PrintIdle+0x30>
	     stPrintIdle=piIdle;
   12d1a:	10 92 06 02 	sts	0x0206, r1
	 }

     switch(stPrintIdle){
   12d1e:	80 91 06 02 	lds	r24, 0x0206
   12d22:	e8 2f       	mov	r30, r24
   12d24:	f0 e0       	ldi	r31, 0x00	; 0
   12d26:	e8 31       	cpi	r30, 0x18	; 24
   12d28:	f1 05       	cpc	r31, r1
   12d2a:	08 f0       	brcs	.+2      	; 0x12d2e <PrintIdle+0x40>
   12d2c:	5c c7       	rjmp	.+3768   	; 0x13be6 <PrintIdle+0xef8>
   12d2e:	e8 51       	subi	r30, 0x18	; 24
   12d30:	ff 4f       	sbci	r31, 0xFF	; 255
   12d32:	ee 0f       	add	r30, r30
   12d34:	ff 1f       	adc	r31, r31
   12d36:	05 90       	lpm	r0, Z+
   12d38:	f4 91       	lpm	r31, Z+
   12d3a:	e0 2d       	mov	r30, r0
   12d3c:	09 94       	ijmp
	 case piIdle:
	      if (IsPrinting==True){
   12d3e:	80 91 ac 01 	lds	r24, 0x01AC
   12d42:	81 30       	cpi	r24, 0x01	; 1
   12d44:	09 f0       	breq	.+2      	; 0x12d48 <PrintIdle+0x5a>
   12d46:	4f c7       	rjmp	.+3742   	; 0x13be6 <PrintIdle+0xef8>
		      IsPrinting=False;
   12d48:	10 92 ac 01 	sts	0x01AC, r1
			  IsBusyIdlePrinting=True;
   12d4c:	80 93 b2 01 	sts	0x01B2, r24
			  IsBusyPrint=False;
   12d50:	10 92 b3 01 	sts	0x01B3, r1
			  iPrinted=0;
   12d54:	10 92 f8 01 	sts	0x01F8, r1
			  PrintCopy=0;
   12d58:	10 92 f7 01 	sts	0x01F7, r1
		      stPrintIdle=piInit;
   12d5c:	80 93 06 02 	sts	0x0206, r24
			  InitPrinter();
   12d60:	0e 94 d5 45 	call	0x8baa	; 0x8baa <InitPrinter>
			  IsSignedField=False;
   12d64:	10 92 ff 01 	sts	0x01FF, r1
   12d68:	3e c7       	rjmp	.+3708   	; 0x13be6 <PrintIdle+0xef8>
			  }
	      break;
	 case piInit:
	      iHeader=0;
   12d6a:	10 92 05 02 	sts	0x0205, r1
		  CarriegeReturn();
   12d6e:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
   12d72:	1b c0       	rjmp	.+54     	; 0x12daa <PrintIdle+0xbc>
		  stPrintIdle=piLoadHeader;
	      break;
     case piLoadHeader:
	      eeprom_read_block((void*) &strPrint, (const void*) &DefHeaderFooter[iHeader], sizeof(DefHeaderFooter[iHeader]));
   12d74:	60 91 05 02 	lds	r22, 0x0205
   12d78:	89 e2       	ldi	r24, 0x29	; 41
   12d7a:	68 9f       	mul	r22, r24
   12d7c:	b0 01       	movw	r22, r0
   12d7e:	11 24       	eor	r1, r1
   12d80:	68 5d       	subi	r22, 0xD8	; 216
   12d82:	7d 4f       	sbci	r23, 0xFD	; 253
   12d84:	8c eb       	ldi	r24, 0xBC	; 188
   12d86:	98 e0       	ldi	r25, 0x08	; 8
   12d88:	49 e2       	ldi	r20, 0x29	; 41
   12d8a:	50 e0       	ldi	r21, 0x00	; 0
   12d8c:	0e 94 30 ad 	call	0x15a60	; 0x15a60 <__eerd_block_m128>
		  iHeader++;
   12d90:	80 91 05 02 	lds	r24, 0x0205
   12d94:	8f 5f       	subi	r24, 0xFF	; 255
   12d96:	80 93 05 02 	sts	0x0205, r24
		  if (iHeader<6){
   12d9a:	86 30       	cpi	r24, 0x06	; 6
   12d9c:	00 f5       	brcc	.+64     	; 0x12dde <PrintIdle+0xf0>
		      if (SpaceOnly(strPrint)==True){
   12d9e:	8c eb       	ldi	r24, 0xBC	; 188
   12da0:	98 e0       	ldi	r25, 0x08	; 8
   12da2:	0e 94 32 24 	call	0x4864	; 0x4864 <SpaceOnly>
   12da6:	81 30       	cpi	r24, 0x01	; 1
   12da8:	11 f4       	brne	.+4      	; 0x12dae <PrintIdle+0xc0>
			      stPrintIdle=piLoadHeader;
   12daa:	82 e0       	ldi	r24, 0x02	; 2
   12dac:	f1 c6       	rjmp	.+3554   	; 0x13b90 <PrintIdle+0xea2>
				  }	      
			  else{
			      stPrintIdle=piPrintHeader;
   12dae:	83 e0       	ldi	r24, 0x03	; 3
   12db0:	80 93 06 02 	sts	0x0206, r24
			      iSend=0;
   12db4:	10 92 fe 01 	sts	0x01FE, r1
   12db8:	10 92 fd 01 	sts	0x01FD, r1
				  iLoop=0;
   12dbc:	10 92 fa 01 	sts	0x01FA, r1
   12dc0:	10 92 f9 01 	sts	0x01F9, r1
				  //PrintDoubleHeight on 1st Header
				  if (iHeader==1) PrintDoubleHeight();
   12dc4:	80 91 05 02 	lds	r24, 0x0205
   12dc8:	81 30       	cpi	r24, 0x01	; 1
   12dca:	19 f4       	brne	.+6      	; 0x12dd2 <PrintIdle+0xe4>
   12dcc:	0e 94 4f 46 	call	0x8c9e	; 0x8c9e <PrintDoubleHeight>
   12dd0:	0a c7       	rjmp	.+3604   	; 0x13be6 <PrintIdle+0xef8>
				  else 
				  if (iHeader==2) PrintNormalHeight();
   12dd2:	82 30       	cpi	r24, 0x02	; 2
   12dd4:	09 f0       	breq	.+2      	; 0x12dd8 <PrintIdle+0xea>
   12dd6:	07 c7       	rjmp	.+3598   	; 0x13be6 <PrintIdle+0xef8>
   12dd8:	0e 94 39 46 	call	0x8c72	; 0x8c72 <PrintNormalHeight>
   12ddc:	04 c7       	rjmp	.+3592   	; 0x13be6 <PrintIdle+0xef8>
			   }
		  }else{stPrintIdle=piInitDuplicate; //stPrintIdle=piInitMessage;//
   12dde:	84 e0       	ldi	r24, 0x04	; 4
   12de0:	d7 c6       	rjmp	.+3502   	; 0x13b90 <PrintIdle+0xea2>
		        //else stPrintIdle=piInitMessage;
		  }
	      break;
	 case piPrintHeader:
		  if (iSend<40){
   12de2:	80 91 fd 01 	lds	r24, 0x01FD
   12de6:	90 91 fe 01 	lds	r25, 0x01FE
   12dea:	88 97       	sbiw	r24, 0x28	; 40
   12dec:	68 f4       	brcc	.+26     	; 0x12e08 <PrintIdle+0x11a>
		      iLoop++;
   12dee:	80 91 f9 01 	lds	r24, 0x01F9
   12df2:	90 91 fa 01 	lds	r25, 0x01FA
   12df6:	01 96       	adiw	r24, 0x01	; 1
   12df8:	90 93 fa 01 	sts	0x01FA, r25
   12dfc:	80 93 f9 01 	sts	0x01F9, r24
			  if ((iLoop%PRINT_DELAY)==0){
				 TimPrintBusy=0;
   12e00:	10 92 b6 01 	sts	0x01B6, r1
				 stPrintIdle=piCheckPrintStatusHeader;
   12e04:	8b e0       	ldi	r24, 0x0B	; 11
   12e06:	c4 c6       	rjmp	.+3464   	; 0x13b90 <PrintIdle+0xea2>
				 }
			  }
          else{ 
		     stPrintIdle=piLoadHeader;
   12e08:	82 e0       	ldi	r24, 0x02	; 2
   12e0a:	5a c6       	rjmp	.+3252   	; 0x13ac0 <PrintIdle+0xdd2>
			 CarriegeReturn();
		  }
	      break;
     case piCheckPrintStatusHeader:
	      if (IsBusyPrint==False){
   12e0c:	80 91 b3 01 	lds	r24, 0x01B3
   12e10:	88 23       	and	r24, r24
   12e12:	09 f0       	breq	.+2      	; 0x12e16 <PrintIdle+0x128>
   12e14:	b5 c6       	rjmp	.+3434   	; 0x13b80 <PrintIdle+0xe92>
		      uart(_COM_PRINTER,1,strPrint[iSend]);
   12e16:	e0 91 fd 01 	lds	r30, 0x01FD
   12e1a:	f0 91 fe 01 	lds	r31, 0x01FE
   12e1e:	e4 54       	subi	r30, 0x44	; 68
   12e20:	f7 4f       	sbci	r31, 0xF7	; 247
   12e22:	61 e0       	ldi	r22, 0x01	; 1
   12e24:	40 81       	ld	r20, Z
   12e26:	0e 94 d2 a8 	call	0x151a4	; 0x151a4 <uart>
		      iSend++;
   12e2a:	80 91 fd 01 	lds	r24, 0x01FD
   12e2e:	90 91 fe 01 	lds	r25, 0x01FE
   12e32:	01 96       	adiw	r24, 0x01	; 1
   12e34:	90 93 fe 01 	sts	0x01FE, r25
   12e38:	80 93 fd 01 	sts	0x01FD, r24
		      stPrintIdle=piPrintHeader;
   12e3c:	83 e0       	ldi	r24, 0x03	; 3
   12e3e:	9e c6       	rjmp	.+3388   	; 0x13b7c <PrintIdle+0xe8e>
		      stPrintIdle=piFinishPrintIdle;
			  }
	      break;

     case piInitDuplicate:
          if ((iPrinted>0)||(IsReprintTicket==True)){
   12e40:	80 91 f8 01 	lds	r24, 0x01F8
   12e44:	88 23       	and	r24, r24
   12e46:	21 f4       	brne	.+8      	; 0x12e50 <PrintIdle+0x162>
   12e48:	80 91 7f 01 	lds	r24, 0x017F
   12e4c:	81 30       	cpi	r24, 0x01	; 1
   12e4e:	a9 f4       	brne	.+42     	; 0x12e7a <PrintIdle+0x18c>
		      IsReprintTicket=False;
   12e50:	10 92 7f 01 	sts	0x017F, r1
		      CarriegeReturn(); 
   12e54:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
		      sprintf_P(strPrint,PSTR("             DUPLICATE COPY        "));
   12e58:	00 d0       	rcall	.+0      	; 0x12e5a <PrintIdle+0x16c>
   12e5a:	00 d0       	rcall	.+0      	; 0x12e5c <PrintIdle+0x16e>
   12e5c:	8c eb       	ldi	r24, 0xBC	; 188
   12e5e:	98 e0       	ldi	r25, 0x08	; 8
   12e60:	ad b7       	in	r26, 0x3d	; 61
   12e62:	be b7       	in	r27, 0x3e	; 62
   12e64:	12 96       	adiw	r26, 0x02	; 2
   12e66:	9c 93       	st	X, r25
   12e68:	8e 93       	st	-X, r24
   12e6a:	11 97       	sbiw	r26, 0x01	; 1
   12e6c:	8a e7       	ldi	r24, 0x7A	; 122
   12e6e:	9b e0       	ldi	r25, 0x0B	; 11
   12e70:	14 96       	adiw	r26, 0x04	; 4
   12e72:	9c 93       	st	X, r25
   12e74:	8e 93       	st	-X, r24
   12e76:	13 97       	sbiw	r26, 0x03	; 3
   12e78:	0c c0       	rjmp	.+24     	; 0x12e92 <PrintIdle+0x1a4>
		      }
          else{           sprintf_P(strPrint,PSTR(" "));
   12e7a:	00 d0       	rcall	.+0      	; 0x12e7c <PrintIdle+0x18e>
   12e7c:	00 d0       	rcall	.+0      	; 0x12e7e <PrintIdle+0x190>
   12e7e:	8c eb       	ldi	r24, 0xBC	; 188
   12e80:	98 e0       	ldi	r25, 0x08	; 8
   12e82:	ed b7       	in	r30, 0x3d	; 61
   12e84:	fe b7       	in	r31, 0x3e	; 62
   12e86:	92 83       	std	Z+2, r25	; 0x02
   12e88:	81 83       	std	Z+1, r24	; 0x01
   12e8a:	88 e7       	ldi	r24, 0x78	; 120
   12e8c:	9b e0       	ldi	r25, 0x0B	; 11
   12e8e:	94 83       	std	Z+4, r25	; 0x04
   12e90:	83 83       	std	Z+3, r24	; 0x03
   12e92:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
   12e96:	0f 90       	pop	r0
   12e98:	0f 90       	pop	r0
   12e9a:	0f 90       	pop	r0
   12e9c:	0f 90       	pop	r0
		      }
		  iSend=0;
   12e9e:	10 92 fe 01 	sts	0x01FE, r1
   12ea2:	10 92 fd 01 	sts	0x01FD, r1
		  iLoop=0;
   12ea6:	10 92 fa 01 	sts	0x01FA, r1
   12eaa:	10 92 f9 01 	sts	0x01F9, r1
		  LSend=strlen(strPrint);
   12eae:	ec eb       	ldi	r30, 0xBC	; 188
   12eb0:	f8 e0       	ldi	r31, 0x08	; 8
   12eb2:	01 90       	ld	r0, Z+
   12eb4:	00 20       	and	r0, r0
   12eb6:	e9 f7       	brne	.-6      	; 0x12eb2 <PrintIdle+0x1c4>
   12eb8:	31 97       	sbiw	r30, 0x01	; 1
   12eba:	ec 5b       	subi	r30, 0xBC	; 188
   12ebc:	f8 40       	sbci	r31, 0x08	; 8
   12ebe:	f0 93 fc 01 	sts	0x01FC, r31
   12ec2:	e0 93 fb 01 	sts	0x01FB, r30
          stPrintIdle=piPrintDuplicate; 
   12ec6:	85 e0       	ldi	r24, 0x05	; 5
   12ec8:	63 c6       	rjmp	.+3270   	; 0x13b90 <PrintIdle+0xea2>
	      break;
     case piPrintDuplicate:
		  if (iSend<LSend){
   12eca:	20 91 fd 01 	lds	r18, 0x01FD
   12ece:	30 91 fe 01 	lds	r19, 0x01FE
   12ed2:	80 91 fb 01 	lds	r24, 0x01FB
   12ed6:	90 91 fc 01 	lds	r25, 0x01FC
   12eda:	28 17       	cp	r18, r24
   12edc:	39 07       	cpc	r19, r25
   12ede:	68 f4       	brcc	.+26     	; 0x12efa <PrintIdle+0x20c>
		      iLoop++;
   12ee0:	80 91 f9 01 	lds	r24, 0x01F9
   12ee4:	90 91 fa 01 	lds	r25, 0x01FA
   12ee8:	01 96       	adiw	r24, 0x01	; 1
   12eea:	90 93 fa 01 	sts	0x01FA, r25
   12eee:	80 93 f9 01 	sts	0x01F9, r24
			  if((iLoop%PRINT_DELAY)==0){
				 TimPrintBusy=0;
   12ef2:	10 92 b6 01 	sts	0x01B6, r1
                 stPrintIdle=piCheckPrintStatusDuplicate;
   12ef6:	86 e0       	ldi	r24, 0x06	; 6
   12ef8:	4b c6       	rjmp	.+3222   	; 0x13b90 <PrintIdle+0xea2>
				 }
			  }
          else {
		     iSend=0;
   12efa:	10 92 fe 01 	sts	0x01FE, r1
   12efe:	10 92 fd 01 	sts	0x01FD, r1
		     stPrintIdle=piInitMessage;
   12f02:	87 e0       	ldi	r24, 0x07	; 7
   12f04:	45 c6       	rjmp	.+3210   	; 0x13b90 <PrintIdle+0xea2>
			 }
	      break;
     case piCheckPrintStatusDuplicate:
	      if (IsBusyPrint==False){
   12f06:	80 91 b3 01 	lds	r24, 0x01B3
   12f0a:	88 23       	and	r24, r24
   12f0c:	09 f0       	breq	.+2      	; 0x12f10 <PrintIdle+0x222>
   12f0e:	38 c6       	rjmp	.+3184   	; 0x13b80 <PrintIdle+0xe92>
		      uart(_COM_PRINTER,1,strPrint[iSend]);
   12f10:	e0 91 fd 01 	lds	r30, 0x01FD
   12f14:	f0 91 fe 01 	lds	r31, 0x01FE
   12f18:	e4 54       	subi	r30, 0x44	; 68
   12f1a:	f7 4f       	sbci	r31, 0xF7	; 247
   12f1c:	61 e0       	ldi	r22, 0x01	; 1
   12f1e:	40 81       	ld	r20, Z
   12f20:	0e 94 d2 a8 	call	0x151a4	; 0x151a4 <uart>
   12f24:	84 ec       	ldi	r24, 0xC4	; 196
   12f26:	99 e0       	ldi	r25, 0x09	; 9
   12f28:	01 97       	sbiw	r24, 0x01	; 1
   12f2a:	f1 f7       	brne	.-4      	; 0x12f28 <PrintIdle+0x23a>
			  _delay_ms(10);
		      iSend++;
   12f2c:	80 91 fd 01 	lds	r24, 0x01FD
   12f30:	90 91 fe 01 	lds	r25, 0x01FE
   12f34:	01 96       	adiw	r24, 0x01	; 1
   12f36:	90 93 fe 01 	sts	0x01FE, r25
   12f3a:	80 93 fd 01 	sts	0x01FD, r24
		      stPrintIdle=piPrintDuplicate;
   12f3e:	85 e0       	ldi	r24, 0x05	; 5
   12f40:	1d c6       	rjmp	.+3130   	; 0x13b7c <PrintIdle+0xe8e>
		      stPrintIdle=piFinishPrintIdle;
			  }
	      break;

     case piInitMessage:
	      iSend=0;iLoop=0;
   12f42:	10 92 fe 01 	sts	0x01FE, r1
   12f46:	10 92 fd 01 	sts	0x01FD, r1
   12f4a:	10 92 fa 01 	sts	0x01FA, r1
   12f4e:	10 92 f9 01 	sts	0x01F9, r1
		  iMessage=0;
   12f52:	10 92 01 02 	sts	0x0201, r1
		  switch(MOPType){
   12f56:	80 91 b8 01 	lds	r24, 0x01B8
   12f5a:	83 30       	cpi	r24, 0x03	; 3
   12f5c:	81 f0       	breq	.+32     	; 0x12f7e <PrintIdle+0x290>
   12f5e:	84 30       	cpi	r24, 0x04	; 4
   12f60:	28 f4       	brcc	.+10     	; 0x12f6c <PrintIdle+0x27e>
   12f62:	81 30       	cpi	r24, 0x01	; 1
   12f64:	61 f0       	breq	.+24     	; 0x12f7e <PrintIdle+0x290>
   12f66:	82 30       	cpi	r24, 0x02	; 2
   12f68:	40 f4       	brcc	.+16     	; 0x12f7a <PrintIdle+0x28c>
   12f6a:	10 c0       	rjmp	.+32     	; 0x12f8c <PrintIdle+0x29e>
   12f6c:	88 30       	cpi	r24, 0x08	; 8
   12f6e:	49 f0       	breq	.+18     	; 0x12f82 <PrintIdle+0x294>
   12f70:	89 30       	cpi	r24, 0x09	; 9
   12f72:	61 f0       	breq	.+24     	; 0x12f8c <PrintIdle+0x29e>
   12f74:	87 30       	cpi	r24, 0x07	; 7
   12f76:	51 f4       	brne	.+20     	; 0x12f8c <PrintIdle+0x29e>
   12f78:	02 c0       	rjmp	.+4      	; 0x12f7e <PrintIdle+0x290>
		  case MOP_CASH:
		       MessageLine=10;
			   PrintCopy=1;
		       break;
          case MOP_CREDIT_CARD:
		       MessageLine=10;
   12f7a:	8a e0       	ldi	r24, 0x0A	; 10
   12f7c:	03 c0       	rjmp	.+6      	; 0x12f84 <PrintIdle+0x296>
          case MOP_LOCAL_ACCOUNT:
		       MessageLine=20;
			   PrintCopy=2;
		       break;
          case MOP_VOUCHER:
		       MessageLine=20;
   12f7e:	84 e1       	ldi	r24, 0x14	; 20
   12f80:	01 c0       	rjmp	.+2      	; 0x12f84 <PrintIdle+0x296>
			   PrintCopy=2;
		       break;
          case MOP_PUMP_TEST:
		       MessageLine=12;
   12f82:	8c e0       	ldi	r24, 0x0C	; 12
   12f84:	80 93 00 02 	sts	0x0200, r24
			   PrintCopy=2;
   12f88:	82 e0       	ldi	r24, 0x02	; 2
   12f8a:	04 c0       	rjmp	.+8      	; 0x12f94 <PrintIdle+0x2a6>
          case MOP_VOID_CARD:
		       MessageLine=10;
			   PrintCopy=1;
		       break;          
          default:
		       MessageLine=10;
   12f8c:	8a e0       	ldi	r24, 0x0A	; 10
   12f8e:	80 93 00 02 	sts	0x0200, r24
			   PrintCopy=1;
   12f92:	81 e0       	ldi	r24, 0x01	; 1
   12f94:	80 93 f7 01 	sts	0x01F7, r24
		       break; 
		  }
		  //LoyaltyDetection
          if ((strlen(strLoyCardID)>0)&&(SpaceOnly(strLoyCardID)==False)){
   12f98:	80 91 e7 02 	lds	r24, 0x02E7
   12f9c:	88 23       	and	r24, r24
   12f9e:	49 f0       	breq	.+18     	; 0x12fb2 <PrintIdle+0x2c4>
   12fa0:	87 ee       	ldi	r24, 0xE7	; 231
   12fa2:	92 e0       	ldi	r25, 0x02	; 2
   12fa4:	0e 94 32 24 	call	0x4864	; 0x4864 <SpaceOnly>
   12fa8:	88 23       	and	r24, r24
   12faa:	19 f4       	brne	.+6      	; 0x12fb2 <PrintIdle+0x2c4>
		       MessageLine=33;
   12fac:	81 e2       	ldi	r24, 0x21	; 33
   12fae:	80 93 00 02 	sts	0x0200, r24
		  }
          //stPrintIdle=piLoadMessage;
		  stPrintIdle=piFormatingMessage;
   12fb2:	88 e0       	ldi	r24, 0x08	; 8
   12fb4:	ed c5       	rjmp	.+3034   	; 0x13b90 <PrintIdle+0xea2>
	      break;
     case piFormatingMessage:
	      if (iPrinted==0){
   12fb6:	80 91 f8 01 	lds	r24, 0x01F8
   12fba:	88 23       	and	r24, r24
   12fbc:	09 f0       	breq	.+2      	; 0x12fc0 <PrintIdle+0x2d2>
   12fbe:	99 c4       	rjmp	.+2354   	; 0x138f2 <PrintIdle+0xc04>

		      FormatDate(DATE_LONG_YEAR,strDate);
   12fc0:	6e e6       	ldi	r22, 0x6E	; 110
   12fc2:	77 e0       	ldi	r23, 0x07	; 7
   12fc4:	0e 94 00 25 	call	0x4a00	; 0x4a00 <FormatDate>
              RemZeroLead(strIslandID);
   12fc8:	87 ef       	ldi	r24, 0xF7	; 247
   12fca:	98 e0       	ldi	r25, 0x08	; 8
   12fcc:	0e 94 51 25 	call	0x4aa2	; 0x4aa2 <RemZeroLead>
			  RemZeroLead(strFIP_ID);
   12fd0:	89 eb       	ldi	r24, 0xB9	; 185
   12fd2:	97 e0       	ldi	r25, 0x07	; 7
   12fd4:	0e 94 51 25 	call	0x4aa2	; 0x4aa2 <RemZeroLead>
		      RemZeroLead(strPrice);              
   12fd8:	8e e9       	ldi	r24, 0x9E	; 158
   12fda:	95 e0       	ldi	r25, 0x05	; 5
   12fdc:	0e 94 51 25 	call	0x4aa2	; 0x4aa2 <RemZeroLead>
              if (IFType==IT_SLAVE)
   12fe0:	80 91 00 01 	lds	r24, 0x0100
   12fe4:	81 30       	cpi	r24, 0x01	; 1
   12fe6:	21 f4       	brne	.+8      	; 0x12ff0 <PrintIdle+0x302>
			      RemZeroLead(strVolume);
   12fe8:	85 e7       	ldi	r24, 0x75	; 117
   12fea:	93 e0       	ldi	r25, 0x03	; 3
   12fec:	0e 94 51 25 	call	0x4aa2	; 0x4aa2 <RemZeroLead>
              RemZeroLead(strAmount);
   12ff0:	83 eb       	ldi	r24, 0xB3	; 179
   12ff2:	9b e0       	ldi	r25, 0x0B	; 11
   12ff4:	0e 94 51 25 	call	0x4aa2	; 0x4aa2 <RemZeroLead>

			  RemDecimal(strPrice);
   12ff8:	8e e9       	ldi	r24, 0x9E	; 158
   12ffa:	95 e0       	ldi	r25, 0x05	; 5
   12ffc:	0e 94 4f 24 	call	0x489e	; 0x489e <RemDecimal>
			  RemDecimal(strAmount);
   13000:	83 eb       	ldi	r24, 0xB3	; 179
   13002:	9b e0       	ldi	r25, 0x0B	; 11
   13004:	0e 94 4f 24 	call	0x489e	; 0x489e <RemDecimal>
	  
			  FormatCurrency(strPrice);
   13008:	8e e9       	ldi	r24, 0x9E	; 158
   1300a:	95 e0       	ldi	r25, 0x05	; 5
   1300c:	0e 94 1f 33 	call	0x663e	; 0x663e <FormatCurrency>
			  FormatCurrency(strAmount);
   13010:	83 eb       	ldi	r24, 0xB3	; 179
   13012:	9b e0       	ldi	r25, 0x0B	; 11
   13014:	0e 94 1f 33 	call	0x663e	; 0x663e <FormatCurrency>
              if (IFType==IT_SLAVE){
   13018:	80 91 00 01 	lds	r24, 0x0100
   1301c:	81 30       	cpi	r24, 0x01	; 1
   1301e:	09 f0       	breq	.+2      	; 0x13022 <PrintIdle+0x334>
   13020:	68 c4       	rjmp	.+2256   	; 0x138f2 <PrintIdle+0xc04>
		          RemSpaceLag(strCardID);
   13022:	89 e8       	ldi	r24, 0x89	; 137
   13024:	9b e0       	ldi	r25, 0x0B	; 11
   13026:	0e 94 e4 25 	call	0x4bc8	; 0x4bc8 <RemSpaceLag>
		          RemSpaceLag(strCardHolder);
   1302a:	84 e2       	ldi	r24, 0x24	; 36
   1302c:	93 e0       	ldi	r25, 0x03	; 3
   1302e:	0e 94 e4 25 	call	0x4bc8	; 0x4bc8 <RemSpaceLag>
		          RemSpaceLag(strMOPName);
   13032:	8d e7       	ldi	r24, 0x7D	; 125
   13034:	95 e0       	ldi	r25, 0x05	; 5
   13036:	0e 94 e4 25 	call	0x4bc8	; 0x4bc8 <RemSpaceLag>
		          RemSpaceLag(strLoyCardHolder);
   1303a:	84 ec       	ldi	r24, 0xC4	; 196
   1303c:	92 e0       	ldi	r25, 0x02	; 2
   1303e:	0e 94 e4 25 	call	0x4bc8	; 0x4bc8 <RemSpaceLag>
		          RemSpaceLag(strCorporateID);
   13042:	8a e0       	ldi	r24, 0x0A	; 10
   13044:	9c e0       	ldi	r25, 0x0C	; 12
   13046:	0e 94 e4 25 	call	0x4bc8	; 0x4bc8 <RemSpaceLag>
		          RemSpaceLag(strCorporateName);
   1304a:	8d ec       	ldi	r24, 0xCD	; 205
   1304c:	93 e0       	ldi	r25, 0x03	; 3
   1304e:	0e 94 e4 25 	call	0x4bc8	; 0x4bc8 <RemSpaceLag>
		          RemSpaceLag(strLoyRedeemPoints);
   13052:	8a e9       	ldi	r24, 0x9A	; 154
   13054:	93 e0       	ldi	r25, 0x03	; 3
   13056:	0e 94 e4 25 	call	0x4bc8	; 0x4bc8 <RemSpaceLag>
		          RemSpaceLag(strLoyCurrMonConsumeV);
   1305a:	8d ee       	ldi	r24, 0xED	; 237
   1305c:	9b e0       	ldi	r25, 0x0B	; 11
   1305e:	0e 94 e4 25 	call	0x4bc8	; 0x4bc8 <RemSpaceLag>
				  RemSpaceLag(strLoyCurrMonConsumeA);
   13062:	8e e7       	ldi	r24, 0x7E	; 126
   13064:	93 e0       	ldi	r25, 0x03	; 3
   13066:	0e 94 e4 25 	call	0x4bc8	; 0x4bc8 <RemSpaceLag>
		          FormatCurrency(strLoyCurrMonConsumeV);              
   1306a:	8d ee       	ldi	r24, 0xED	; 237
   1306c:	9b e0       	ldi	r25, 0x0B	; 11
   1306e:	0e 94 1f 33 	call	0x663e	; 0x663e <FormatCurrency>
		          FormatCurrency(strLoyCurrMonConsumeA);
   13072:	8e e7       	ldi	r24, 0x7E	; 126
   13074:	93 e0       	ldi	r25, 0x03	; 3
   13076:	0e 94 1f 33 	call	0x663e	; 0x663e <FormatCurrency>
   1307a:	3b c4       	rjmp	.+2166   	; 0x138f2 <PrintIdle+0xc04>
			   }
		  }
          stPrintIdle=piLoadMessage;
	      break;
     case piLoadMessage:
	      switch(iMessage){
   1307c:	80 91 01 02 	lds	r24, 0x0201
   13080:	e8 2f       	mov	r30, r24
   13082:	f0 e0       	ldi	r31, 0x00	; 0
   13084:	e5 32       	cpi	r30, 0x25	; 37
   13086:	f1 05       	cpc	r31, r1
   13088:	08 f0       	brcs	.+2      	; 0x1308c <PrintIdle+0x39e>
   1308a:	f6 c3       	rjmp	.+2028   	; 0x13878 <PrintIdle+0xb8a>
   1308c:	e0 50       	subi	r30, 0x00	; 0
   1308e:	ff 4f       	sbci	r31, 0xFF	; 255
   13090:	0c eb       	ldi	r16, 0xBC	; 188
   13092:	18 e0       	ldi	r17, 0x08	; 8
   13094:	ee 0f       	add	r30, r30
   13096:	ff 1f       	adc	r31, r31
   13098:	05 90       	lpm	r0, Z+
   1309a:	f4 91       	lpm	r31, Z+
   1309c:	e0 2d       	mov	r30, r0
   1309e:	09 94       	ijmp
		  case 0:
		       CarriegeReturn();
   130a0:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("      Shift: %s  No.Trans: %s "),strShift,strTranNo);
   130a4:	8d b7       	in	r24, 0x3d	; 61
   130a6:	9e b7       	in	r25, 0x3e	; 62
   130a8:	08 97       	sbiw	r24, 0x08	; 8
   130aa:	0f b6       	in	r0, 0x3f	; 63
   130ac:	f8 94       	cli
   130ae:	9e bf       	out	0x3e, r25	; 62
   130b0:	0f be       	out	0x3f, r0	; 63
   130b2:	8d bf       	out	0x3d, r24	; 61
   130b4:	ed b7       	in	r30, 0x3d	; 61
   130b6:	fe b7       	in	r31, 0x3e	; 62
   130b8:	31 96       	adiw	r30, 0x01	; 1
   130ba:	ad b7       	in	r26, 0x3d	; 61
   130bc:	be b7       	in	r27, 0x3e	; 62
   130be:	12 96       	adiw	r26, 0x02	; 2
   130c0:	1c 93       	st	X, r17
   130c2:	0e 93       	st	-X, r16
   130c4:	11 97       	sbiw	r26, 0x01	; 1
   130c6:	89 e5       	ldi	r24, 0x59	; 89
   130c8:	9b e0       	ldi	r25, 0x0B	; 11
   130ca:	93 83       	std	Z+3, r25	; 0x03
   130cc:	82 83       	std	Z+2, r24	; 0x02
   130ce:	89 e6       	ldi	r24, 0x69	; 105
   130d0:	9c e0       	ldi	r25, 0x0C	; 12
   130d2:	95 83       	std	Z+5, r25	; 0x05
   130d4:	84 83       	std	Z+4, r24	; 0x04
   130d6:	88 e8       	ldi	r24, 0x88	; 136
   130d8:	9c e0       	ldi	r25, 0x0C	; 12
   130da:	1d c0       	rjmp	.+58     	; 0x13116 <PrintIdle+0x428>
		       break;
		  case 1:
		       //FormatDate(strDate);
			   CarriegeReturn();
   130dc:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("      Waktu: %s %s "),strDate,strTime);
   130e0:	8d b7       	in	r24, 0x3d	; 61
   130e2:	9e b7       	in	r25, 0x3e	; 62
   130e4:	08 97       	sbiw	r24, 0x08	; 8
   130e6:	0f b6       	in	r0, 0x3f	; 63
   130e8:	f8 94       	cli
   130ea:	9e bf       	out	0x3e, r25	; 62
   130ec:	0f be       	out	0x3f, r0	; 63
   130ee:	8d bf       	out	0x3d, r24	; 61
   130f0:	ed b7       	in	r30, 0x3d	; 61
   130f2:	fe b7       	in	r31, 0x3e	; 62
   130f4:	31 96       	adiw	r30, 0x01	; 1
   130f6:	ad b7       	in	r26, 0x3d	; 61
   130f8:	be b7       	in	r27, 0x3e	; 62
   130fa:	12 96       	adiw	r26, 0x02	; 2
   130fc:	1c 93       	st	X, r17
   130fe:	0e 93       	st	-X, r16
   13100:	11 97       	sbiw	r26, 0x01	; 1
   13102:	85 e4       	ldi	r24, 0x45	; 69
   13104:	9b e0       	ldi	r25, 0x0B	; 11
   13106:	93 83       	std	Z+3, r25	; 0x03
   13108:	82 83       	std	Z+2, r24	; 0x02
   1310a:	8e e6       	ldi	r24, 0x6E	; 110
   1310c:	97 e0       	ldi	r25, 0x07	; 7
   1310e:	95 83       	std	Z+5, r25	; 0x05
   13110:	84 83       	std	Z+4, r24	; 0x04
   13112:	8d e4       	ldi	r24, 0x4D	; 77
   13114:	93 e0       	ldi	r25, 0x03	; 3
   13116:	97 83       	std	Z+7, r25	; 0x07
   13118:	86 83       	std	Z+6, r24	; 0x06
   1311a:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
   1311e:	ed b7       	in	r30, 0x3d	; 61
   13120:	fe b7       	in	r31, 0x3e	; 62
   13122:	38 96       	adiw	r30, 0x08	; 8
   13124:	8d c3       	rjmp	.+1818   	; 0x13840 <PrintIdle+0xb52>
		       break;
		  case 2:
		       CarriegeReturn();
   13126:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("    ------------------------------"));
   1312a:	00 d0       	rcall	.+0      	; 0x1312c <PrintIdle+0x43e>
   1312c:	00 d0       	rcall	.+0      	; 0x1312e <PrintIdle+0x440>
   1312e:	ad b7       	in	r26, 0x3d	; 61
   13130:	be b7       	in	r27, 0x3e	; 62
   13132:	12 96       	adiw	r26, 0x02	; 2
   13134:	1c 93       	st	X, r17
   13136:	0e 93       	st	-X, r16
   13138:	11 97       	sbiw	r26, 0x01	; 1
   1313a:	82 e2       	ldi	r24, 0x22	; 34
   1313c:	9b e0       	ldi	r25, 0x0B	; 11
   1313e:	92 c3       	rjmp	.+1828   	; 0x13864 <PrintIdle+0xb76>
		       break;
		  case 3:
		       CarriegeReturn();
   13140:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
			   //RemZeroLead(strIslandID);
			   //RemZeroLead(strFIP_ID);
		       sprintf_P(strPrint,PSTR("      Pulau/Pompa : [%s]-%s"),strIslandID,strFIP_ID);
   13144:	ed b7       	in	r30, 0x3d	; 61
   13146:	fe b7       	in	r31, 0x3e	; 62
   13148:	38 97       	sbiw	r30, 0x08	; 8
   1314a:	0f b6       	in	r0, 0x3f	; 63
   1314c:	f8 94       	cli
   1314e:	fe bf       	out	0x3e, r31	; 62
   13150:	0f be       	out	0x3f, r0	; 63
   13152:	ed bf       	out	0x3d, r30	; 61
   13154:	31 96       	adiw	r30, 0x01	; 1
   13156:	ad b7       	in	r26, 0x3d	; 61
   13158:	be b7       	in	r27, 0x3e	; 62
   1315a:	12 96       	adiw	r26, 0x02	; 2
   1315c:	1c 93       	st	X, r17
   1315e:	0e 93       	st	-X, r16
   13160:	11 97       	sbiw	r26, 0x01	; 1
   13162:	86 e0       	ldi	r24, 0x06	; 6
   13164:	9b e0       	ldi	r25, 0x0B	; 11
   13166:	93 83       	std	Z+3, r25	; 0x03
   13168:	82 83       	std	Z+2, r24	; 0x02
   1316a:	87 ef       	ldi	r24, 0xF7	; 247
   1316c:	98 e0       	ldi	r25, 0x08	; 8
   1316e:	95 83       	std	Z+5, r25	; 0x05
   13170:	84 83       	std	Z+4, r24	; 0x04
   13172:	89 eb       	ldi	r24, 0xB9	; 185
   13174:	97 e0       	ldi	r25, 0x07	; 7
   13176:	cf cf       	rjmp	.-98     	; 0x13116 <PrintIdle+0x428>
		       break;
		  case 4:
		       CarriegeReturn();
   13178:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
			   sprintf_P(strPrint,PSTR("      Produk      : %s"),strDescription);
   1317c:	00 d0       	rcall	.+0      	; 0x1317e <PrintIdle+0x490>
   1317e:	00 d0       	rcall	.+0      	; 0x13180 <PrintIdle+0x492>
   13180:	00 d0       	rcall	.+0      	; 0x13182 <PrintIdle+0x494>
   13182:	ed b7       	in	r30, 0x3d	; 61
   13184:	fe b7       	in	r31, 0x3e	; 62
   13186:	31 96       	adiw	r30, 0x01	; 1
   13188:	ad b7       	in	r26, 0x3d	; 61
   1318a:	be b7       	in	r27, 0x3e	; 62
   1318c:	12 96       	adiw	r26, 0x02	; 2
   1318e:	1c 93       	st	X, r17
   13190:	0e 93       	st	-X, r16
   13192:	11 97       	sbiw	r26, 0x01	; 1
   13194:	8f ee       	ldi	r24, 0xEF	; 239
   13196:	9a e0       	ldi	r25, 0x0A	; 10
   13198:	93 83       	std	Z+3, r25	; 0x03
   1319a:	82 83       	std	Z+2, r24	; 0x02
   1319c:	8c e0       	ldi	r24, 0x0C	; 12
   1319e:	98 e0       	ldi	r25, 0x08	; 8
   131a0:	48 c3       	rjmp	.+1680   	; 0x13832 <PrintIdle+0xb44>
		       break;
		  case 5:
		       //RemZeroLead(strPrice);
               //FormatCurrency(strPrice);
               if (eeprom_read_byte(&DefPrintMoney)==True){
   131a2:	82 ec       	ldi	r24, 0xC2	; 194
   131a4:	93 e0       	ldi	r25, 0x03	; 3
   131a6:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
   131aa:	0c eb       	ldi	r16, 0xBC	; 188
   131ac:	18 e0       	ldi	r17, 0x08	; 8
   131ae:	81 30       	cpi	r24, 0x01	; 1
   131b0:	a9 f4       	brne	.+42     	; 0x131dc <PrintIdle+0x4ee>
			   	   CarriegeReturn();
   131b2:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("      Harga/L     : Rp.%s"),strPrice);
   131b6:	00 d0       	rcall	.+0      	; 0x131b8 <PrintIdle+0x4ca>
   131b8:	00 d0       	rcall	.+0      	; 0x131ba <PrintIdle+0x4cc>
   131ba:	00 d0       	rcall	.+0      	; 0x131bc <PrintIdle+0x4ce>
   131bc:	ed b7       	in	r30, 0x3d	; 61
   131be:	fe b7       	in	r31, 0x3e	; 62
   131c0:	31 96       	adiw	r30, 0x01	; 1
   131c2:	ad b7       	in	r26, 0x3d	; 61
   131c4:	be b7       	in	r27, 0x3e	; 62
   131c6:	12 96       	adiw	r26, 0x02	; 2
   131c8:	1c 93       	st	X, r17
   131ca:	0e 93       	st	-X, r16
   131cc:	11 97       	sbiw	r26, 0x01	; 1
   131ce:	85 ed       	ldi	r24, 0xD5	; 213
   131d0:	9a e0       	ldi	r25, 0x0A	; 10
   131d2:	93 83       	std	Z+3, r25	; 0x03
   131d4:	82 83       	std	Z+2, r24	; 0x02
   131d6:	8e e9       	ldi	r24, 0x9E	; 158
   131d8:	95 e0       	ldi	r25, 0x05	; 5
   131da:	2b c3       	rjmp	.+1622   	; 0x13832 <PrintIdle+0xb44>
			   }else sprintf_P(strPrint,PSTR(""));
   131dc:	00 d0       	rcall	.+0      	; 0x131de <PrintIdle+0x4f0>
   131de:	00 d0       	rcall	.+0      	; 0x131e0 <PrintIdle+0x4f2>
   131e0:	ad b7       	in	r26, 0x3d	; 61
   131e2:	be b7       	in	r27, 0x3e	; 62
   131e4:	12 96       	adiw	r26, 0x02	; 2
   131e6:	1c 93       	st	X, r17
   131e8:	0e 93       	st	-X, r16
   131ea:	11 97       	sbiw	r26, 0x01	; 1
   131ec:	84 ed       	ldi	r24, 0xD4	; 212
   131ee:	9a e0       	ldi	r25, 0x0A	; 10
   131f0:	39 c3       	rjmp	.+1650   	; 0x13864 <PrintIdle+0xb76>

		       break;
		  case 6:
		       //RemZeroLead(strVolume);
		       CarriegeReturn();
   131f2:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
			   sprintf_P(strPrint,PSTR("      Jml Liter   : %s L"),strVolume);
   131f6:	00 d0       	rcall	.+0      	; 0x131f8 <PrintIdle+0x50a>
   131f8:	00 d0       	rcall	.+0      	; 0x131fa <PrintIdle+0x50c>
   131fa:	00 d0       	rcall	.+0      	; 0x131fc <PrintIdle+0x50e>
   131fc:	ed b7       	in	r30, 0x3d	; 61
   131fe:	fe b7       	in	r31, 0x3e	; 62
   13200:	31 96       	adiw	r30, 0x01	; 1
   13202:	ad b7       	in	r26, 0x3d	; 61
   13204:	be b7       	in	r27, 0x3e	; 62
   13206:	12 96       	adiw	r26, 0x02	; 2
   13208:	1c 93       	st	X, r17
   1320a:	0e 93       	st	-X, r16
   1320c:	11 97       	sbiw	r26, 0x01	; 1
   1320e:	8b eb       	ldi	r24, 0xBB	; 187
   13210:	9a e0       	ldi	r25, 0x0A	; 10
   13212:	93 83       	std	Z+3, r25	; 0x03
   13214:	82 83       	std	Z+2, r24	; 0x02
   13216:	85 e7       	ldi	r24, 0x75	; 117
   13218:	93 e0       	ldi	r25, 0x03	; 3
   1321a:	0b c3       	rjmp	.+1558   	; 0x13832 <PrintIdle+0xb44>
		       break;
		  case 7:
		       //RemZeroLead(strAmount);		       
			   //FormatCurrency(strAmount);
               if (eeprom_read_byte(&DefPrintMoney)==True){
   1321c:	82 ec       	ldi	r24, 0xC2	; 194
   1321e:	93 e0       	ldi	r25, 0x03	; 3
   13220:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
   13224:	0c eb       	ldi	r16, 0xBC	; 188
   13226:	18 e0       	ldi	r17, 0x08	; 8
   13228:	81 30       	cpi	r24, 0x01	; 1
   1322a:	a9 f4       	brne	.+42     	; 0x13256 <PrintIdle+0x568>
			   	   CarriegeReturn();
   1322c:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("      Jml Rupiah  : Rp.%s"),strAmount);
   13230:	00 d0       	rcall	.+0      	; 0x13232 <PrintIdle+0x544>
   13232:	00 d0       	rcall	.+0      	; 0x13234 <PrintIdle+0x546>
   13234:	00 d0       	rcall	.+0      	; 0x13236 <PrintIdle+0x548>
   13236:	ed b7       	in	r30, 0x3d	; 61
   13238:	fe b7       	in	r31, 0x3e	; 62
   1323a:	31 96       	adiw	r30, 0x01	; 1
   1323c:	ad b7       	in	r26, 0x3d	; 61
   1323e:	be b7       	in	r27, 0x3e	; 62
   13240:	12 96       	adiw	r26, 0x02	; 2
   13242:	1c 93       	st	X, r17
   13244:	0e 93       	st	-X, r16
   13246:	11 97       	sbiw	r26, 0x01	; 1
   13248:	81 ea       	ldi	r24, 0xA1	; 161
   1324a:	9a e0       	ldi	r25, 0x0A	; 10
   1324c:	93 83       	std	Z+3, r25	; 0x03
   1324e:	82 83       	std	Z+2, r24	; 0x02
   13250:	83 eb       	ldi	r24, 0xB3	; 179
   13252:	9b e0       	ldi	r25, 0x0B	; 11
   13254:	ee c2       	rjmp	.+1500   	; 0x13832 <PrintIdle+0xb44>
			   }else sprintf_P(strPrint,PSTR(""));
   13256:	00 d0       	rcall	.+0      	; 0x13258 <PrintIdle+0x56a>
   13258:	00 d0       	rcall	.+0      	; 0x1325a <PrintIdle+0x56c>
   1325a:	ad b7       	in	r26, 0x3d	; 61
   1325c:	be b7       	in	r27, 0x3e	; 62
   1325e:	12 96       	adiw	r26, 0x02	; 2
   13260:	1c 93       	st	X, r17
   13262:	0e 93       	st	-X, r16
   13264:	11 97       	sbiw	r26, 0x01	; 1
   13266:	80 ea       	ldi	r24, 0xA0	; 160
   13268:	9a e0       	ldi	r25, 0x0A	; 10
   1326a:	fc c2       	rjmp	.+1528   	; 0x13864 <PrintIdle+0xb76>

		       break;
		  case 8:
		       if ((strlen(strLicPlate)>0)&&(SpaceOnly(strLicPlate)==False)){
   1326c:	0a ef       	ldi	r16, 0xFA	; 250
   1326e:	18 e0       	ldi	r17, 0x08	; 8
   13270:	80 91 fa 08 	lds	r24, 0x08FA
   13274:	88 23       	and	r24, r24
   13276:	09 f4       	brne	.+2      	; 0x1327a <PrintIdle+0x58c>
   13278:	10 c2       	rjmp	.+1056   	; 0x1369a <PrintIdle+0x9ac>
   1327a:	c8 01       	movw	r24, r16
   1327c:	0e 94 32 24 	call	0x4864	; 0x4864 <SpaceOnly>
   13280:	88 23       	and	r24, r24
   13282:	09 f0       	breq	.+2      	; 0x13286 <PrintIdle+0x598>
   13284:	0a c2       	rjmp	.+1044   	; 0x1369a <PrintIdle+0x9ac>
			       CarriegeReturn();
   13286:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("      No.Polisi   : %s"),strLicPlate);
   1328a:	00 d0       	rcall	.+0      	; 0x1328c <PrintIdle+0x59e>
   1328c:	00 d0       	rcall	.+0      	; 0x1328e <PrintIdle+0x5a0>
   1328e:	00 d0       	rcall	.+0      	; 0x13290 <PrintIdle+0x5a2>
   13290:	ed b7       	in	r30, 0x3d	; 61
   13292:	fe b7       	in	r31, 0x3e	; 62
   13294:	31 96       	adiw	r30, 0x01	; 1
   13296:	8c eb       	ldi	r24, 0xBC	; 188
   13298:	98 e0       	ldi	r25, 0x08	; 8
   1329a:	ad b7       	in	r26, 0x3d	; 61
   1329c:	be b7       	in	r27, 0x3e	; 62
   1329e:	12 96       	adiw	r26, 0x02	; 2
   132a0:	9c 93       	st	X, r25
   132a2:	8e 93       	st	-X, r24
   132a4:	11 97       	sbiw	r26, 0x01	; 1
   132a6:	89 e8       	ldi	r24, 0x89	; 137
   132a8:	9a e0       	ldi	r25, 0x0A	; 10
   132aa:	1f c0       	rjmp	.+62     	; 0x132ea <PrintIdle+0x5fc>
                   ClearMem(strLicPlate);
				   }
               else ClearMem(strPrint);
		       break;
		  case 9:
		       if ((strlen(strOdometer)>0)&&(SpaceOnly(strOdometer)==False)){
   132ac:	03 ec       	ldi	r16, 0xC3	; 195
   132ae:	13 e0       	ldi	r17, 0x03	; 3
   132b0:	80 91 c3 03 	lds	r24, 0x03C3
   132b4:	88 23       	and	r24, r24
   132b6:	09 f4       	brne	.+2      	; 0x132ba <PrintIdle+0x5cc>
   132b8:	f0 c1       	rjmp	.+992    	; 0x1369a <PrintIdle+0x9ac>
   132ba:	c8 01       	movw	r24, r16
   132bc:	0e 94 32 24 	call	0x4864	; 0x4864 <SpaceOnly>
   132c0:	88 23       	and	r24, r24
   132c2:	09 f0       	breq	.+2      	; 0x132c6 <PrintIdle+0x5d8>
   132c4:	ea c1       	rjmp	.+980    	; 0x1369a <PrintIdle+0x9ac>
			       CarriegeReturn();
   132c6:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
		           sprintf_P(strPrint,PSTR("      Odometer    : %s"),strOdometer);
   132ca:	00 d0       	rcall	.+0      	; 0x132cc <PrintIdle+0x5de>
   132cc:	00 d0       	rcall	.+0      	; 0x132ce <PrintIdle+0x5e0>
   132ce:	00 d0       	rcall	.+0      	; 0x132d0 <PrintIdle+0x5e2>
   132d0:	ed b7       	in	r30, 0x3d	; 61
   132d2:	fe b7       	in	r31, 0x3e	; 62
   132d4:	31 96       	adiw	r30, 0x01	; 1
   132d6:	8c eb       	ldi	r24, 0xBC	; 188
   132d8:	98 e0       	ldi	r25, 0x08	; 8
   132da:	ad b7       	in	r26, 0x3d	; 61
   132dc:	be b7       	in	r27, 0x3e	; 62
   132de:	12 96       	adiw	r26, 0x02	; 2
   132e0:	9c 93       	st	X, r25
   132e2:	8e 93       	st	-X, r24
   132e4:	11 97       	sbiw	r26, 0x01	; 1
   132e6:	82 e7       	ldi	r24, 0x72	; 114
   132e8:	9a e0       	ldi	r25, 0x0A	; 10
   132ea:	93 83       	std	Z+3, r25	; 0x03
   132ec:	82 83       	std	Z+2, r24	; 0x02
   132ee:	15 83       	std	Z+5, r17	; 0x05
   132f0:	04 83       	std	Z+4, r16	; 0x04
   132f2:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
				   ClearMem(strOdometer);
   132f6:	ed b7       	in	r30, 0x3d	; 61
   132f8:	fe b7       	in	r31, 0x3e	; 62
   132fa:	36 96       	adiw	r30, 0x06	; 6
   132fc:	0f b6       	in	r0, 0x3f	; 63
   132fe:	f8 94       	cli
   13300:	fe bf       	out	0x3e, r31	; 62
   13302:	0f be       	out	0x3f, r0	; 63
   13304:	ed bf       	out	0x3d, r30	; 61
   13306:	c8 01       	movw	r24, r16
   13308:	0e 94 68 a5 	call	0x14ad0	; 0x14ad0 <ClearMem>
   1330c:	b5 c2       	rjmp	.+1386   	; 0x13878 <PrintIdle+0xb8a>
			   }else ClearMem(strPrint);
		       break;
		  case 10:
		       CarriegeReturn();
   1330e:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("    ------------------------------"));
   13312:	00 d0       	rcall	.+0      	; 0x13314 <PrintIdle+0x626>
   13314:	00 d0       	rcall	.+0      	; 0x13316 <PrintIdle+0x628>
   13316:	ad b7       	in	r26, 0x3d	; 61
   13318:	be b7       	in	r27, 0x3e	; 62
   1331a:	12 96       	adiw	r26, 0x02	; 2
   1331c:	1c 93       	st	X, r17
   1331e:	0e 93       	st	-X, r16
   13320:	11 97       	sbiw	r26, 0x01	; 1
   13322:	8f e4       	ldi	r24, 0x4F	; 79
   13324:	9a e0       	ldi	r25, 0x0A	; 10
   13326:	9e c2       	rjmp	.+1340   	; 0x13864 <PrintIdle+0xb76>
		       break;
          //ChangeMOPPrint
		  case 11:
			   if ((MOPType==MOP_LOCAL_ACCOUNT)||(MOPType==MOP_DEBIT_CARD)||(MOPType==MOP_LOYALTY_LOCAL_ACCOUNT)){
   13328:	80 91 b8 01 	lds	r24, 0x01B8
   1332c:	81 30       	cpi	r24, 0x01	; 1
   1332e:	21 f0       	breq	.+8      	; 0x13338 <PrintIdle+0x64a>
   13330:	83 30       	cpi	r24, 0x03	; 3
   13332:	11 f0       	breq	.+4      	; 0x13338 <PrintIdle+0x64a>
   13334:	86 30       	cpi	r24, 0x06	; 6
   13336:	b9 f4       	brne	.+46     	; 0x13366 <PrintIdle+0x678>
			       //RemSpaceLag(strCardID);
				   CarriegeReturn();
   13338:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("    Kartu ID : %s"),strCardID);
   1333c:	00 d0       	rcall	.+0      	; 0x1333e <PrintIdle+0x650>
   1333e:	00 d0       	rcall	.+0      	; 0x13340 <PrintIdle+0x652>
   13340:	00 d0       	rcall	.+0      	; 0x13342 <PrintIdle+0x654>
   13342:	ed b7       	in	r30, 0x3d	; 61
   13344:	fe b7       	in	r31, 0x3e	; 62
   13346:	31 96       	adiw	r30, 0x01	; 1
   13348:	8c eb       	ldi	r24, 0xBC	; 188
   1334a:	98 e0       	ldi	r25, 0x08	; 8
   1334c:	ad b7       	in	r26, 0x3d	; 61
   1334e:	be b7       	in	r27, 0x3e	; 62
   13350:	12 96       	adiw	r26, 0x02	; 2
   13352:	9c 93       	st	X, r25
   13354:	8e 93       	st	-X, r24
   13356:	11 97       	sbiw	r26, 0x01	; 1
   13358:	8d e3       	ldi	r24, 0x3D	; 61
   1335a:	9a e0       	ldi	r25, 0x0A	; 10
   1335c:	93 83       	std	Z+3, r25	; 0x03
   1335e:	82 83       	std	Z+2, r24	; 0x02
   13360:	89 e8       	ldi	r24, 0x89	; 137
   13362:	9b e0       	ldi	r25, 0x0B	; 11
   13364:	18 c0       	rjmp	.+48     	; 0x13396 <PrintIdle+0x6a8>
				   IsSignedField=True;
				   }
	           else
			   if (MOPType==MOP_VOUCHER){
   13366:	87 30       	cpi	r24, 0x07	; 7
   13368:	f1 f4       	brne	.+60     	; 0x133a6 <PrintIdle+0x6b8>
			       //RemSpaceLag(strCardID);
				   CarriegeReturn();
   1336a:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("    Voucher No: %s"),strVoucherNum);
   1336e:	00 d0       	rcall	.+0      	; 0x13370 <PrintIdle+0x682>
   13370:	00 d0       	rcall	.+0      	; 0x13372 <PrintIdle+0x684>
   13372:	00 d0       	rcall	.+0      	; 0x13374 <PrintIdle+0x686>
   13374:	ed b7       	in	r30, 0x3d	; 61
   13376:	fe b7       	in	r31, 0x3e	; 62
   13378:	31 96       	adiw	r30, 0x01	; 1
   1337a:	8c eb       	ldi	r24, 0xBC	; 188
   1337c:	98 e0       	ldi	r25, 0x08	; 8
   1337e:	ad b7       	in	r26, 0x3d	; 61
   13380:	be b7       	in	r27, 0x3e	; 62
   13382:	12 96       	adiw	r26, 0x02	; 2
   13384:	9c 93       	st	X, r25
   13386:	8e 93       	st	-X, r24
   13388:	11 97       	sbiw	r26, 0x01	; 1
   1338a:	8a e2       	ldi	r24, 0x2A	; 42
   1338c:	9a e0       	ldi	r25, 0x0A	; 10
   1338e:	93 83       	std	Z+3, r25	; 0x03
   13390:	82 83       	std	Z+2, r24	; 0x02
   13392:	8c e3       	ldi	r24, 0x3C	; 60
   13394:	9c e0       	ldi	r25, 0x0C	; 12
   13396:	95 83       	std	Z+5, r25	; 0x05
   13398:	84 83       	std	Z+4, r24	; 0x04
   1339a:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
				   IsSignedField=True;
   1339e:	81 e0       	ldi	r24, 0x01	; 1
   133a0:	80 93 ff 01 	sts	0x01FF, r24
   133a4:	4a c2       	rjmp	.+1172   	; 0x1383a <PrintIdle+0xb4c>
   133a6:	0c eb       	ldi	r16, 0xBC	; 188
   133a8:	18 e0       	ldi	r17, 0x08	; 8
				   }
			   else
			   if (MOPType==MOP_PUMP_TEST) {
   133aa:	88 30       	cpi	r24, 0x08	; 8
   133ac:	09 f0       	breq	.+2      	; 0x133b0 <PrintIdle+0x6c2>
   133ae:	ab cf       	rjmp	.-170    	; 0x13306 <PrintIdle+0x618>
			       CarriegeReturn();
   133b0:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("          *** PUMP TEST ***       "));
   133b4:	00 d0       	rcall	.+0      	; 0x133b6 <PrintIdle+0x6c8>
   133b6:	00 d0       	rcall	.+0      	; 0x133b8 <PrintIdle+0x6ca>
   133b8:	ad b7       	in	r26, 0x3d	; 61
   133ba:	be b7       	in	r27, 0x3e	; 62
   133bc:	12 96       	adiw	r26, 0x02	; 2
   133be:	1c 93       	st	X, r17
   133c0:	0e 93       	st	-X, r16
   133c2:	11 97       	sbiw	r26, 0x01	; 1
   133c4:	87 e0       	ldi	r24, 0x07	; 7
   133c6:	9a e0       	ldi	r25, 0x0A	; 10
   133c8:	14 96       	adiw	r26, 0x04	; 4
   133ca:	9c 93       	st	X, r25
   133cc:	8e 93       	st	-X, r24
   133ce:	13 97       	sbiw	r26, 0x03	; 3
   133d0:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
				   IsSignedField=False;
   133d4:	10 92 ff 01 	sts	0x01FF, r1
   133d8:	4b c2       	rjmp	.+1174   	; 0x13870 <PrintIdle+0xb82>
				   }
               else ClearMem(strPrint);
		       break;
          case 12:
			   if (MOPType==MOP_LOCAL_ACCOUNT) {
   133da:	80 91 b8 01 	lds	r24, 0x01B8
   133de:	81 30       	cpi	r24, 0x01	; 1
   133e0:	99 f4       	brne	.+38     	; 0x13408 <PrintIdle+0x71a>
			       //RemSpaceLag(strCardHolder);
				   CarriegeReturn();
   133e2:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("    Nama     : %s"),strCardHolder);
   133e6:	00 d0       	rcall	.+0      	; 0x133e8 <PrintIdle+0x6fa>
   133e8:	00 d0       	rcall	.+0      	; 0x133ea <PrintIdle+0x6fc>
   133ea:	00 d0       	rcall	.+0      	; 0x133ec <PrintIdle+0x6fe>
   133ec:	ed b7       	in	r30, 0x3d	; 61
   133ee:	fe b7       	in	r31, 0x3e	; 62
   133f0:	31 96       	adiw	r30, 0x01	; 1
   133f2:	8c eb       	ldi	r24, 0xBC	; 188
   133f4:	98 e0       	ldi	r25, 0x08	; 8
   133f6:	ad b7       	in	r26, 0x3d	; 61
   133f8:	be b7       	in	r27, 0x3e	; 62
   133fa:	12 96       	adiw	r26, 0x02	; 2
   133fc:	9c 93       	st	X, r25
   133fe:	8e 93       	st	-X, r24
   13400:	11 97       	sbiw	r26, 0x01	; 1
   13402:	85 ef       	ldi	r24, 0xF5	; 245
   13404:	99 e0       	ldi	r25, 0x09	; 9
   13406:	3a c0       	rjmp	.+116    	; 0x1347c <PrintIdle+0x78e>
				   }
               else 
               if (MOPType==MOP_DEBIT_CARD) {//EDCApprovalCode
   13408:	83 30       	cpi	r24, 0x03	; 3
   1340a:	e9 f5       	brne	.+122    	; 0x13486 <PrintIdle+0x798>
			       if (IsPrintApprovalCode==True){
   1340c:	80 91 9a 01 	lds	r24, 0x019A
   13410:	81 30       	cpi	r24, 0x01	; 1
   13412:	11 f5       	brne	.+68     	; 0x13458 <PrintIdle+0x76a>
				       IsPrintApprovalCode=False;
   13414:	10 92 9a 01 	sts	0x019A, r1
					   FillChar(strCardHolder,0,sizeof(strCardHolder));
					   sprintf_P(strCardHolder,PSTR("%s  "),strApprovalCode);
   13418:	00 d0       	rcall	.+0      	; 0x1341a <PrintIdle+0x72c>
   1341a:	00 d0       	rcall	.+0      	; 0x1341c <PrintIdle+0x72e>
   1341c:	00 d0       	rcall	.+0      	; 0x1341e <PrintIdle+0x730>
   1341e:	ed b7       	in	r30, 0x3d	; 61
   13420:	fe b7       	in	r31, 0x3e	; 62
   13422:	31 96       	adiw	r30, 0x01	; 1
   13424:	84 e2       	ldi	r24, 0x24	; 36
   13426:	93 e0       	ldi	r25, 0x03	; 3
   13428:	ad b7       	in	r26, 0x3d	; 61
   1342a:	be b7       	in	r27, 0x3e	; 62
   1342c:	12 96       	adiw	r26, 0x02	; 2
   1342e:	9c 93       	st	X, r25
   13430:	8e 93       	st	-X, r24
   13432:	11 97       	sbiw	r26, 0x01	; 1
   13434:	80 ef       	ldi	r24, 0xF0	; 240
   13436:	99 e0       	ldi	r25, 0x09	; 9
   13438:	93 83       	std	Z+3, r25	; 0x03
   1343a:	82 83       	std	Z+2, r24	; 0x02
   1343c:	80 ef       	ldi	r24, 0xF0	; 240
   1343e:	97 e0       	ldi	r25, 0x07	; 7
   13440:	95 83       	std	Z+5, r25	; 0x05
   13442:	84 83       	std	Z+4, r24	; 0x04
   13444:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
   13448:	ed b7       	in	r30, 0x3d	; 61
   1344a:	fe b7       	in	r31, 0x3e	; 62
   1344c:	36 96       	adiw	r30, 0x06	; 6
   1344e:	0f b6       	in	r0, 0x3f	; 63
   13450:	f8 94       	cli
   13452:	fe bf       	out	0x3e, r31	; 62
   13454:	0f be       	out	0x3f, r0	; 63
   13456:	ed bf       	out	0x3d, r30	; 61
				   }
			       //RemSpaceLag(strCardHolder);
				   CarriegeReturn();
   13458:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("    Appr Code: %s"),strCardHolder);
   1345c:	00 d0       	rcall	.+0      	; 0x1345e <PrintIdle+0x770>
   1345e:	00 d0       	rcall	.+0      	; 0x13460 <PrintIdle+0x772>
   13460:	00 d0       	rcall	.+0      	; 0x13462 <PrintIdle+0x774>
   13462:	ed b7       	in	r30, 0x3d	; 61
   13464:	fe b7       	in	r31, 0x3e	; 62
   13466:	31 96       	adiw	r30, 0x01	; 1
   13468:	8c eb       	ldi	r24, 0xBC	; 188
   1346a:	98 e0       	ldi	r25, 0x08	; 8
   1346c:	ad b7       	in	r26, 0x3d	; 61
   1346e:	be b7       	in	r27, 0x3e	; 62
   13470:	12 96       	adiw	r26, 0x02	; 2
   13472:	9c 93       	st	X, r25
   13474:	8e 93       	st	-X, r24
   13476:	11 97       	sbiw	r26, 0x01	; 1
   13478:	8e ed       	ldi	r24, 0xDE	; 222
   1347a:	99 e0       	ldi	r25, 0x09	; 9
   1347c:	93 83       	std	Z+3, r25	; 0x03
   1347e:	82 83       	std	Z+2, r24	; 0x02
   13480:	84 e2       	ldi	r24, 0x24	; 36
   13482:	93 e0       	ldi	r25, 0x03	; 3
   13484:	d6 c1       	rjmp	.+940    	; 0x13832 <PrintIdle+0xb44>
				   }
               else
			   if (MOPType==MOP_VOUCHER){
   13486:	87 30       	cpi	r24, 0x07	; 7
   13488:	79 f4       	brne	.+30     	; 0x134a8 <PrintIdle+0x7ba>
			       CarriegeReturn();
   1348a:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("  "));
   1348e:	00 d0       	rcall	.+0      	; 0x13490 <PrintIdle+0x7a2>
   13490:	00 d0       	rcall	.+0      	; 0x13492 <PrintIdle+0x7a4>
   13492:	8c eb       	ldi	r24, 0xBC	; 188
   13494:	98 e0       	ldi	r25, 0x08	; 8
   13496:	ad b7       	in	r26, 0x3d	; 61
   13498:	be b7       	in	r27, 0x3e	; 62
   1349a:	12 96       	adiw	r26, 0x02	; 2
   1349c:	9c 93       	st	X, r25
   1349e:	8e 93       	st	-X, r24
   134a0:	11 97       	sbiw	r26, 0x01	; 1
   134a2:	8b ed       	ldi	r24, 0xDB	; 219
   134a4:	99 e0       	ldi	r25, 0x09	; 9
   134a6:	de c1       	rjmp	.+956    	; 0x13864 <PrintIdle+0xb76>
   134a8:	0c eb       	ldi	r16, 0xBC	; 188
   134aa:	18 e0       	ldi	r17, 0x08	; 8
				   }
			   else
			   if (MOPType==MOP_PUMP_TEST) {
   134ac:	88 30       	cpi	r24, 0x08	; 8
   134ae:	09 f0       	breq	.+2      	; 0x134b2 <PrintIdle+0x7c4>
   134b0:	2a cf       	rjmp	.-428    	; 0x13306 <PrintIdle+0x618>
			       CarriegeReturn();
   134b2:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("                 "));
   134b6:	00 d0       	rcall	.+0      	; 0x134b8 <PrintIdle+0x7ca>
   134b8:	00 d0       	rcall	.+0      	; 0x134ba <PrintIdle+0x7cc>
   134ba:	ed b7       	in	r30, 0x3d	; 61
   134bc:	fe b7       	in	r31, 0x3e	; 62
   134be:	12 83       	std	Z+2, r17	; 0x02
   134c0:	01 83       	std	Z+1, r16	; 0x01
   134c2:	89 ec       	ldi	r24, 0xC9	; 201
   134c4:	99 e0       	ldi	r25, 0x09	; 9
   134c6:	25 c0       	rjmp	.+74     	; 0x13512 <PrintIdle+0x824>
				   }
               else ClearMem(strPrint);
		       break;
          case 13:
		       if (IsSignedField==True){
   134c8:	80 91 ff 01 	lds	r24, 0x01FF
   134cc:	0c eb       	ldi	r16, 0xBC	; 188
   134ce:	18 e0       	ldi	r17, 0x08	; 8
   134d0:	81 30       	cpi	r24, 0x01	; 1
   134d2:	09 f0       	breq	.+2      	; 0x134d6 <PrintIdle+0x7e8>
   134d4:	18 cf       	rjmp	.-464    	; 0x13306 <PrintIdle+0x618>
			       CarriegeReturn();
   134d6:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("                      "));
   134da:	00 d0       	rcall	.+0      	; 0x134dc <PrintIdle+0x7ee>
   134dc:	00 d0       	rcall	.+0      	; 0x134de <PrintIdle+0x7f0>
   134de:	ad b7       	in	r26, 0x3d	; 61
   134e0:	be b7       	in	r27, 0x3e	; 62
   134e2:	12 96       	adiw	r26, 0x02	; 2
   134e4:	1c 93       	st	X, r17
   134e6:	0e 93       	st	-X, r16
   134e8:	11 97       	sbiw	r26, 0x01	; 1
   134ea:	82 eb       	ldi	r24, 0xB2	; 178
   134ec:	99 e0       	ldi	r25, 0x09	; 9
   134ee:	ba c1       	rjmp	.+884    	; 0x13864 <PrintIdle+0xb76>
               }else ClearMem(strPrint);
		       break;
          case 14:
		       if (IsSignedField==True){
   134f0:	80 91 ff 01 	lds	r24, 0x01FF
   134f4:	0c eb       	ldi	r16, 0xBC	; 188
   134f6:	18 e0       	ldi	r17, 0x08	; 8
   134f8:	81 30       	cpi	r24, 0x01	; 1
   134fa:	09 f0       	breq	.+2      	; 0x134fe <PrintIdle+0x810>
   134fc:	04 cf       	rjmp	.-504    	; 0x13306 <PrintIdle+0x618>
			       CarriegeReturn();
   134fe:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("                      "));
   13502:	00 d0       	rcall	.+0      	; 0x13504 <PrintIdle+0x816>
   13504:	00 d0       	rcall	.+0      	; 0x13506 <PrintIdle+0x818>
   13506:	ed b7       	in	r30, 0x3d	; 61
   13508:	fe b7       	in	r31, 0x3e	; 62
   1350a:	12 83       	std	Z+2, r17	; 0x02
   1350c:	01 83       	std	Z+1, r16	; 0x01
   1350e:	8b e9       	ldi	r24, 0x9B	; 155
   13510:	99 e0       	ldi	r25, 0x09	; 9
   13512:	94 83       	std	Z+4, r25	; 0x04
   13514:	83 83       	std	Z+3, r24	; 0x03
   13516:	aa c1       	rjmp	.+852    	; 0x1386c <PrintIdle+0xb7e>
			       //sprintf_P(strPrint,PSTR("                      "));
				   ClearMem(strPrint);
               }else ClearMem(strPrint);
		       break;
          case 17:
		       if (IsSignedField==True){
   13518:	80 91 ff 01 	lds	r24, 0x01FF
   1351c:	0c eb       	ldi	r16, 0xBC	; 188
   1351e:	18 e0       	ldi	r17, 0x08	; 8
   13520:	81 30       	cpi	r24, 0x01	; 1
   13522:	09 f0       	breq	.+2      	; 0x13526 <PrintIdle+0x838>
   13524:	f0 ce       	rjmp	.-544    	; 0x13306 <PrintIdle+0x618>
			       CarriegeReturn();
   13526:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("    Tanda Tangan  (______________)"));
   1352a:	00 d0       	rcall	.+0      	; 0x1352c <PrintIdle+0x83e>
   1352c:	00 d0       	rcall	.+0      	; 0x1352e <PrintIdle+0x840>
   1352e:	ad b7       	in	r26, 0x3d	; 61
   13530:	be b7       	in	r27, 0x3e	; 62
   13532:	12 96       	adiw	r26, 0x02	; 2
   13534:	1c 93       	st	X, r17
   13536:	0e 93       	st	-X, r16
   13538:	11 97       	sbiw	r26, 0x01	; 1
   1353a:	88 e7       	ldi	r24, 0x78	; 120
   1353c:	99 e0       	ldi	r25, 0x09	; 9
   1353e:	92 c1       	rjmp	.+804    	; 0x13864 <PrintIdle+0xb76>
               }else ClearMem(strPrint);
		       break;
          case 18:
		       if (IsSignedField==True){
   13540:	80 91 ff 01 	lds	r24, 0x01FF
   13544:	81 30       	cpi	r24, 0x01	; 1
   13546:	09 f0       	breq	.+2      	; 0x1354a <PrintIdle+0x85c>
   13548:	a8 c0       	rjmp	.+336    	; 0x1369a <PrintIdle+0x9ac>
			       IsSignedField=False;
   1354a:	10 92 ff 01 	sts	0x01FF, r1
   1354e:	a5 c0       	rjmp	.+330    	; 0x1369a <PrintIdle+0x9ac>
			       //sprintf_P(strPrint,PSTR("                      "));
				   ClearMem(strPrint);
               }else ClearMem(strPrint);
		       break;
          case 19://PrintMOP Name
		       if (MOPType!=MOP_CASH){
   13550:	80 91 b8 01 	lds	r24, 0x01B8
   13554:	0c eb       	ldi	r16, 0xBC	; 188
   13556:	18 e0       	ldi	r17, 0x08	; 8
   13558:	88 23       	and	r24, r24
   1355a:	09 f4       	brne	.+2      	; 0x1355e <PrintIdle+0x870>
   1355c:	d4 ce       	rjmp	.-600    	; 0x13306 <PrintIdle+0x618>
			       CarriegeReturn();
   1355e:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
			       //RemSpaceLag(strMOPName);
			       sprintf_P(strPrint,PSTR("    .%s"),strMOPName);
   13562:	00 d0       	rcall	.+0      	; 0x13564 <PrintIdle+0x876>
   13564:	00 d0       	rcall	.+0      	; 0x13566 <PrintIdle+0x878>
   13566:	00 d0       	rcall	.+0      	; 0x13568 <PrintIdle+0x87a>
   13568:	ed b7       	in	r30, 0x3d	; 61
   1356a:	fe b7       	in	r31, 0x3e	; 62
   1356c:	31 96       	adiw	r30, 0x01	; 1
   1356e:	ad b7       	in	r26, 0x3d	; 61
   13570:	be b7       	in	r27, 0x3e	; 62
   13572:	12 96       	adiw	r26, 0x02	; 2
   13574:	1c 93       	st	X, r17
   13576:	0e 93       	st	-X, r16
   13578:	11 97       	sbiw	r26, 0x01	; 1
   1357a:	80 e7       	ldi	r24, 0x70	; 112
   1357c:	99 e0       	ldi	r25, 0x09	; 9
   1357e:	93 83       	std	Z+3, r25	; 0x03
   13580:	82 83       	std	Z+2, r24	; 0x02
   13582:	8d e7       	ldi	r24, 0x7D	; 125
   13584:	95 e0       	ldi	r25, 0x05	; 5
   13586:	55 c1       	rjmp	.+682    	; 0x13832 <PrintIdle+0xb44>
			   }else ClearMem(strPrint);
		       break;
		  case 20:
		       if (MOPType!=MOP_CASH){
   13588:	80 91 b8 01 	lds	r24, 0x01B8
   1358c:	0c eb       	ldi	r16, 0xBC	; 188
   1358e:	18 e0       	ldi	r17, 0x08	; 8
   13590:	88 23       	and	r24, r24
   13592:	09 f4       	brne	.+2      	; 0x13596 <PrintIdle+0x8a8>
   13594:	b8 ce       	rjmp	.-656    	; 0x13306 <PrintIdle+0x618>
			       CarriegeReturn();
   13596:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
		           sprintf_P(strPrint,PSTR("    ------------------------------"));
   1359a:	00 d0       	rcall	.+0      	; 0x1359c <PrintIdle+0x8ae>
   1359c:	00 d0       	rcall	.+0      	; 0x1359e <PrintIdle+0x8b0>
   1359e:	ad b7       	in	r26, 0x3d	; 61
   135a0:	be b7       	in	r27, 0x3e	; 62
   135a2:	12 96       	adiw	r26, 0x02	; 2
   135a4:	1c 93       	st	X, r17
   135a6:	0e 93       	st	-X, r16
   135a8:	11 97       	sbiw	r26, 0x01	; 1
   135aa:	8d e4       	ldi	r24, 0x4D	; 77
   135ac:	99 e0       	ldi	r25, 0x09	; 9
   135ae:	5a c1       	rjmp	.+692    	; 0x13864 <PrintIdle+0xb76>
			   }else ClearMem(strPrint);
		       break;          
          //Loyalty
		  case 21:
		       CarriegeReturn();
   135b0:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("         LOYALTY INFORMATION      "));
   135b4:	00 d0       	rcall	.+0      	; 0x135b6 <PrintIdle+0x8c8>
   135b6:	00 d0       	rcall	.+0      	; 0x135b8 <PrintIdle+0x8ca>
   135b8:	ed b7       	in	r30, 0x3d	; 61
   135ba:	fe b7       	in	r31, 0x3e	; 62
   135bc:	12 83       	std	Z+2, r17	; 0x02
   135be:	01 83       	std	Z+1, r16	; 0x01
   135c0:	8a e2       	ldi	r24, 0x2A	; 42
   135c2:	99 e0       	ldi	r25, 0x09	; 9
   135c4:	a6 cf       	rjmp	.-180    	; 0x13512 <PrintIdle+0x824>
		       break; 			            
		  case 22:
		       CarriegeReturn();
   135c6:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("     Card ID      : %s"),strLoyCardID);
   135ca:	00 d0       	rcall	.+0      	; 0x135cc <PrintIdle+0x8de>
   135cc:	00 d0       	rcall	.+0      	; 0x135ce <PrintIdle+0x8e0>
   135ce:	00 d0       	rcall	.+0      	; 0x135d0 <PrintIdle+0x8e2>
   135d0:	ed b7       	in	r30, 0x3d	; 61
   135d2:	fe b7       	in	r31, 0x3e	; 62
   135d4:	31 96       	adiw	r30, 0x01	; 1
   135d6:	ad b7       	in	r26, 0x3d	; 61
   135d8:	be b7       	in	r27, 0x3e	; 62
   135da:	12 96       	adiw	r26, 0x02	; 2
   135dc:	1c 93       	st	X, r17
   135de:	0e 93       	st	-X, r16
   135e0:	11 97       	sbiw	r26, 0x01	; 1
   135e2:	83 e1       	ldi	r24, 0x13	; 19
   135e4:	99 e0       	ldi	r25, 0x09	; 9
   135e6:	93 83       	std	Z+3, r25	; 0x03
   135e8:	82 83       	std	Z+2, r24	; 0x02
   135ea:	87 ee       	ldi	r24, 0xE7	; 231
   135ec:	92 e0       	ldi	r25, 0x02	; 2
   135ee:	21 c1       	rjmp	.+578    	; 0x13832 <PrintIdle+0xb44>
		       break;
		  case 23:
		       CarriegeReturn();
   135f0:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
			   //RemSpaceLag(strLoyCardHolder);
		       sprintf_P(strPrint,PSTR("     Card Holder  : %s "),strLoyCardHolder);
   135f4:	00 d0       	rcall	.+0      	; 0x135f6 <PrintIdle+0x908>
   135f6:	00 d0       	rcall	.+0      	; 0x135f8 <PrintIdle+0x90a>
   135f8:	00 d0       	rcall	.+0      	; 0x135fa <PrintIdle+0x90c>
   135fa:	ed b7       	in	r30, 0x3d	; 61
   135fc:	fe b7       	in	r31, 0x3e	; 62
   135fe:	31 96       	adiw	r30, 0x01	; 1
   13600:	ad b7       	in	r26, 0x3d	; 61
   13602:	be b7       	in	r27, 0x3e	; 62
   13604:	12 96       	adiw	r26, 0x02	; 2
   13606:	1c 93       	st	X, r17
   13608:	0e 93       	st	-X, r16
   1360a:	11 97       	sbiw	r26, 0x01	; 1
   1360c:	8b ef       	ldi	r24, 0xFB	; 251
   1360e:	98 e0       	ldi	r25, 0x08	; 8
   13610:	93 83       	std	Z+3, r25	; 0x03
   13612:	82 83       	std	Z+2, r24	; 0x02
   13614:	84 ec       	ldi	r24, 0xC4	; 196
   13616:	92 e0       	ldi	r25, 0x02	; 2
   13618:	0c c1       	rjmp	.+536    	; 0x13832 <PrintIdle+0xb44>
		       break;
		  case 24:
		       if ((strlen(strCorporateID)>0)&&(SpaceOnly(strCorporateID)==False)){
   1361a:	0a e0       	ldi	r16, 0x0A	; 10
   1361c:	1c e0       	ldi	r17, 0x0C	; 12
   1361e:	80 91 0a 0c 	lds	r24, 0x0C0A
   13622:	88 23       	and	r24, r24
   13624:	d1 f1       	breq	.+116    	; 0x1369a <PrintIdle+0x9ac>
   13626:	c8 01       	movw	r24, r16
   13628:	0e 94 32 24 	call	0x4864	; 0x4864 <SpaceOnly>
   1362c:	88 23       	and	r24, r24
   1362e:	a9 f5       	brne	.+106    	; 0x1369a <PrintIdle+0x9ac>
		           CarriegeReturn();
   13630:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
				   //RemSpaceLag(strCorporateID);
		           sprintf_P(strPrint,PSTR("     Corp ID      : %s"),strCorporateID);
   13634:	00 d0       	rcall	.+0      	; 0x13636 <PrintIdle+0x948>
   13636:	00 d0       	rcall	.+0      	; 0x13638 <PrintIdle+0x94a>
   13638:	00 d0       	rcall	.+0      	; 0x1363a <PrintIdle+0x94c>
   1363a:	ed b7       	in	r30, 0x3d	; 61
   1363c:	fe b7       	in	r31, 0x3e	; 62
   1363e:	31 96       	adiw	r30, 0x01	; 1
   13640:	8c eb       	ldi	r24, 0xBC	; 188
   13642:	98 e0       	ldi	r25, 0x08	; 8
   13644:	ad b7       	in	r26, 0x3d	; 61
   13646:	be b7       	in	r27, 0x3e	; 62
   13648:	12 96       	adiw	r26, 0x02	; 2
   1364a:	9c 93       	st	X, r25
   1364c:	8e 93       	st	-X, r24
   1364e:	11 97       	sbiw	r26, 0x01	; 1
   13650:	84 ee       	ldi	r24, 0xE4	; 228
   13652:	98 e0       	ldi	r25, 0x08	; 8
   13654:	1d c0       	rjmp	.+58     	; 0x13690 <PrintIdle+0x9a2>
			   }else ClearMem(strPrint);
		       break;
		  case 25:
		       if ((strlen(strCorporateName)>0)&&(SpaceOnly(strCorporateName)==False)){
   13656:	0d ec       	ldi	r16, 0xCD	; 205
   13658:	13 e0       	ldi	r17, 0x03	; 3
   1365a:	80 91 cd 03 	lds	r24, 0x03CD
   1365e:	88 23       	and	r24, r24
   13660:	e1 f0       	breq	.+56     	; 0x1369a <PrintIdle+0x9ac>
   13662:	c8 01       	movw	r24, r16
   13664:	0e 94 32 24 	call	0x4864	; 0x4864 <SpaceOnly>
   13668:	88 23       	and	r24, r24
   1366a:	b9 f4       	brne	.+46     	; 0x1369a <PrintIdle+0x9ac>
		           CarriegeReturn();
   1366c:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
				   //RemSpaceLag(strCorporateName);
		           sprintf_P(strPrint,PSTR("     Corp Name    : %s"),strCorporateName);
   13670:	00 d0       	rcall	.+0      	; 0x13672 <PrintIdle+0x984>
   13672:	00 d0       	rcall	.+0      	; 0x13674 <PrintIdle+0x986>
   13674:	00 d0       	rcall	.+0      	; 0x13676 <PrintIdle+0x988>
   13676:	ed b7       	in	r30, 0x3d	; 61
   13678:	fe b7       	in	r31, 0x3e	; 62
   1367a:	31 96       	adiw	r30, 0x01	; 1
   1367c:	8c eb       	ldi	r24, 0xBC	; 188
   1367e:	98 e0       	ldi	r25, 0x08	; 8
   13680:	ad b7       	in	r26, 0x3d	; 61
   13682:	be b7       	in	r27, 0x3e	; 62
   13684:	12 96       	adiw	r26, 0x02	; 2
   13686:	9c 93       	st	X, r25
   13688:	8e 93       	st	-X, r24
   1368a:	11 97       	sbiw	r26, 0x01	; 1
   1368c:	8d ec       	ldi	r24, 0xCD	; 205
   1368e:	98 e0       	ldi	r25, 0x08	; 8
   13690:	93 83       	std	Z+3, r25	; 0x03
   13692:	82 83       	std	Z+2, r24	; 0x02
   13694:	15 83       	std	Z+5, r17	; 0x05
   13696:	04 83       	std	Z+4, r16	; 0x04
   13698:	ce c0       	rjmp	.+412    	; 0x13836 <PrintIdle+0xb48>
			   }else ClearMem(strPrint);
   1369a:	8c eb       	ldi	r24, 0xBC	; 188
   1369c:	98 e0       	ldi	r25, 0x08	; 8
   1369e:	34 ce       	rjmp	.-920    	; 0x13308 <PrintIdle+0x61a>
		       break;
		  case 26:
		       CarriegeReturn();
   136a0:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("     Gain Points  : %s"),strGainPoints);
   136a4:	00 d0       	rcall	.+0      	; 0x136a6 <PrintIdle+0x9b8>
   136a6:	00 d0       	rcall	.+0      	; 0x136a8 <PrintIdle+0x9ba>
   136a8:	00 d0       	rcall	.+0      	; 0x136aa <PrintIdle+0x9bc>
   136aa:	ed b7       	in	r30, 0x3d	; 61
   136ac:	fe b7       	in	r31, 0x3e	; 62
   136ae:	31 96       	adiw	r30, 0x01	; 1
   136b0:	ad b7       	in	r26, 0x3d	; 61
   136b2:	be b7       	in	r27, 0x3e	; 62
   136b4:	12 96       	adiw	r26, 0x02	; 2
   136b6:	1c 93       	st	X, r17
   136b8:	0e 93       	st	-X, r16
   136ba:	11 97       	sbiw	r26, 0x01	; 1
   136bc:	86 eb       	ldi	r24, 0xB6	; 182
   136be:	98 e0       	ldi	r25, 0x08	; 8
   136c0:	93 83       	std	Z+3, r25	; 0x03
   136c2:	82 83       	std	Z+2, r24	; 0x02
   136c4:	8b eb       	ldi	r24, 0xBB	; 187
   136c6:	92 e0       	ldi	r25, 0x02	; 2
   136c8:	b4 c0       	rjmp	.+360    	; 0x13832 <PrintIdle+0xb44>
		       break;
		  case 27:
		       CarriegeReturn();
   136ca:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("     Prev Points  : %s"),strPrevPoints);
   136ce:	00 d0       	rcall	.+0      	; 0x136d0 <PrintIdle+0x9e2>
   136d0:	00 d0       	rcall	.+0      	; 0x136d2 <PrintIdle+0x9e4>
   136d2:	00 d0       	rcall	.+0      	; 0x136d4 <PrintIdle+0x9e6>
   136d4:	ed b7       	in	r30, 0x3d	; 61
   136d6:	fe b7       	in	r31, 0x3e	; 62
   136d8:	31 96       	adiw	r30, 0x01	; 1
   136da:	ad b7       	in	r26, 0x3d	; 61
   136dc:	be b7       	in	r27, 0x3e	; 62
   136de:	12 96       	adiw	r26, 0x02	; 2
   136e0:	1c 93       	st	X, r17
   136e2:	0e 93       	st	-X, r16
   136e4:	11 97       	sbiw	r26, 0x01	; 1
   136e6:	8f e9       	ldi	r24, 0x9F	; 159
   136e8:	98 e0       	ldi	r25, 0x08	; 8
   136ea:	93 83       	std	Z+3, r25	; 0x03
   136ec:	82 83       	std	Z+2, r24	; 0x02
   136ee:	84 e1       	ldi	r24, 0x14	; 20
   136f0:	99 e0       	ldi	r25, 0x09	; 9
   136f2:	9f c0       	rjmp	.+318    	; 0x13832 <PrintIdle+0xb44>
		       break;
		  case 28:
		       CarriegeReturn();
   136f4:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("     Curr Points  : %s"),strLoyCurrentPoints);
   136f8:	00 d0       	rcall	.+0      	; 0x136fa <PrintIdle+0xa0c>
   136fa:	00 d0       	rcall	.+0      	; 0x136fc <PrintIdle+0xa0e>
   136fc:	00 d0       	rcall	.+0      	; 0x136fe <PrintIdle+0xa10>
   136fe:	ed b7       	in	r30, 0x3d	; 61
   13700:	fe b7       	in	r31, 0x3e	; 62
   13702:	31 96       	adiw	r30, 0x01	; 1
   13704:	ad b7       	in	r26, 0x3d	; 61
   13706:	be b7       	in	r27, 0x3e	; 62
   13708:	12 96       	adiw	r26, 0x02	; 2
   1370a:	1c 93       	st	X, r17
   1370c:	0e 93       	st	-X, r16
   1370e:	11 97       	sbiw	r26, 0x01	; 1
   13710:	88 e8       	ldi	r24, 0x88	; 136
   13712:	98 e0       	ldi	r25, 0x08	; 8
   13714:	93 83       	std	Z+3, r25	; 0x03
   13716:	82 83       	std	Z+2, r24	; 0x02
   13718:	85 e3       	ldi	r24, 0x35	; 53
   1371a:	98 e0       	ldi	r25, 0x08	; 8
   1371c:	8a c0       	rjmp	.+276    	; 0x13832 <PrintIdle+0xb44>
		       break;
		  case 29:
		       CarriegeReturn();
   1371e:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("     Expiry       : %s"),strLoyExpiry);
   13722:	00 d0       	rcall	.+0      	; 0x13724 <PrintIdle+0xa36>
   13724:	00 d0       	rcall	.+0      	; 0x13726 <PrintIdle+0xa38>
   13726:	00 d0       	rcall	.+0      	; 0x13728 <PrintIdle+0xa3a>
   13728:	ed b7       	in	r30, 0x3d	; 61
   1372a:	fe b7       	in	r31, 0x3e	; 62
   1372c:	31 96       	adiw	r30, 0x01	; 1
   1372e:	ad b7       	in	r26, 0x3d	; 61
   13730:	be b7       	in	r27, 0x3e	; 62
   13732:	12 96       	adiw	r26, 0x02	; 2
   13734:	1c 93       	st	X, r17
   13736:	0e 93       	st	-X, r16
   13738:	11 97       	sbiw	r26, 0x01	; 1
   1373a:	81 e7       	ldi	r24, 0x71	; 113
   1373c:	98 e0       	ldi	r25, 0x08	; 8
   1373e:	93 83       	std	Z+3, r25	; 0x03
   13740:	82 83       	std	Z+2, r24	; 0x02
   13742:	8a e7       	ldi	r24, 0x7A	; 122
   13744:	9c e0       	ldi	r25, 0x0C	; 12
   13746:	75 c0       	rjmp	.+234    	; 0x13832 <PrintIdle+0xb44>
		       break;
		  case 30:
		       CarriegeReturn();
   13748:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
			   //RemSpaceLag(strLoyRedeemPoints);
		       sprintf_P(strPrint,PSTR("     Total Redeem : %s"),strLoyRedeemPoints);
   1374c:	00 d0       	rcall	.+0      	; 0x1374e <PrintIdle+0xa60>
   1374e:	00 d0       	rcall	.+0      	; 0x13750 <PrintIdle+0xa62>
   13750:	00 d0       	rcall	.+0      	; 0x13752 <PrintIdle+0xa64>
   13752:	ed b7       	in	r30, 0x3d	; 61
   13754:	fe b7       	in	r31, 0x3e	; 62
   13756:	31 96       	adiw	r30, 0x01	; 1
   13758:	ad b7       	in	r26, 0x3d	; 61
   1375a:	be b7       	in	r27, 0x3e	; 62
   1375c:	12 96       	adiw	r26, 0x02	; 2
   1375e:	1c 93       	st	X, r17
   13760:	0e 93       	st	-X, r16
   13762:	11 97       	sbiw	r26, 0x01	; 1
   13764:	8a e5       	ldi	r24, 0x5A	; 90
   13766:	98 e0       	ldi	r25, 0x08	; 8
   13768:	93 83       	std	Z+3, r25	; 0x03
   1376a:	82 83       	std	Z+2, r24	; 0x02
   1376c:	8a e9       	ldi	r24, 0x9A	; 154
   1376e:	93 e0       	ldi	r25, 0x03	; 3
   13770:	60 c0       	rjmp	.+192    	; 0x13832 <PrintIdle+0xb44>
		       break;
		  case 31:
		       CarriegeReturn();
   13772:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
			   //RemSpaceLag(strLoyCurrMonConsumeV);
			   //FormatCurrency(strLoyCurrMonConsumeV);
		       sprintf_P(strPrint,PSTR("     Month Cons V : %s L"),strLoyCurrMonConsumeV);
   13776:	00 d0       	rcall	.+0      	; 0x13778 <PrintIdle+0xa8a>
   13778:	00 d0       	rcall	.+0      	; 0x1377a <PrintIdle+0xa8c>
   1377a:	00 d0       	rcall	.+0      	; 0x1377c <PrintIdle+0xa8e>
   1377c:	ed b7       	in	r30, 0x3d	; 61
   1377e:	fe b7       	in	r31, 0x3e	; 62
   13780:	31 96       	adiw	r30, 0x01	; 1
   13782:	ad b7       	in	r26, 0x3d	; 61
   13784:	be b7       	in	r27, 0x3e	; 62
   13786:	12 96       	adiw	r26, 0x02	; 2
   13788:	1c 93       	st	X, r17
   1378a:	0e 93       	st	-X, r16
   1378c:	11 97       	sbiw	r26, 0x01	; 1
   1378e:	81 e4       	ldi	r24, 0x41	; 65
   13790:	98 e0       	ldi	r25, 0x08	; 8
   13792:	93 83       	std	Z+3, r25	; 0x03
   13794:	82 83       	std	Z+2, r24	; 0x02
   13796:	8d ee       	ldi	r24, 0xED	; 237
   13798:	9b e0       	ldi	r25, 0x0B	; 11
   1379a:	4b c0       	rjmp	.+150    	; 0x13832 <PrintIdle+0xb44>
		       break;
		  case 32:
		       CarriegeReturn();
   1379c:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
			   //RemSpaceLag(strLoyCurrMonConsumeA);
			   //FormatCurrency(strLoyCurrMonConsumeA);
		       sprintf_P(strPrint,PSTR("     Month Cons A : Rp.%s"),strLoyCurrMonConsumeA);
   137a0:	00 d0       	rcall	.+0      	; 0x137a2 <PrintIdle+0xab4>
   137a2:	00 d0       	rcall	.+0      	; 0x137a4 <PrintIdle+0xab6>
   137a4:	00 d0       	rcall	.+0      	; 0x137a6 <PrintIdle+0xab8>
   137a6:	ed b7       	in	r30, 0x3d	; 61
   137a8:	fe b7       	in	r31, 0x3e	; 62
   137aa:	31 96       	adiw	r30, 0x01	; 1
   137ac:	ad b7       	in	r26, 0x3d	; 61
   137ae:	be b7       	in	r27, 0x3e	; 62
   137b0:	12 96       	adiw	r26, 0x02	; 2
   137b2:	1c 93       	st	X, r17
   137b4:	0e 93       	st	-X, r16
   137b6:	11 97       	sbiw	r26, 0x01	; 1
   137b8:	87 e2       	ldi	r24, 0x27	; 39
   137ba:	98 e0       	ldi	r25, 0x08	; 8
   137bc:	93 83       	std	Z+3, r25	; 0x03
   137be:	82 83       	std	Z+2, r24	; 0x02
   137c0:	8e e7       	ldi	r24, 0x7E	; 126
   137c2:	93 e0       	ldi	r25, 0x03	; 3
   137c4:	36 c0       	rjmp	.+108    	; 0x13832 <PrintIdle+0xb44>
		       break;
		  case 33://EndOfLoyalty
		       CarriegeReturn();
   137c6:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("    ------------------------------"));
   137ca:	00 d0       	rcall	.+0      	; 0x137cc <PrintIdle+0xade>
   137cc:	00 d0       	rcall	.+0      	; 0x137ce <PrintIdle+0xae0>
   137ce:	ad b7       	in	r26, 0x3d	; 61
   137d0:	be b7       	in	r27, 0x3e	; 62
   137d2:	12 96       	adiw	r26, 0x02	; 2
   137d4:	1c 93       	st	X, r17
   137d6:	0e 93       	st	-X, r16
   137d8:	11 97       	sbiw	r26, 0x01	; 1
   137da:	84 e0       	ldi	r24, 0x04	; 4
   137dc:	98 e0       	ldi	r25, 0x08	; 8
   137de:	42 c0       	rjmp	.+132    	; 0x13864 <PrintIdle+0xb76>
		       break;
		  case 34:
		       CarriegeReturn();
   137e0:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("     Surcharge Dsc: %s"),strSurchargeDesc);
   137e4:	00 d0       	rcall	.+0      	; 0x137e6 <PrintIdle+0xaf8>
   137e6:	00 d0       	rcall	.+0      	; 0x137e8 <PrintIdle+0xafa>
   137e8:	00 d0       	rcall	.+0      	; 0x137ea <PrintIdle+0xafc>
   137ea:	ed b7       	in	r30, 0x3d	; 61
   137ec:	fe b7       	in	r31, 0x3e	; 62
   137ee:	31 96       	adiw	r30, 0x01	; 1
   137f0:	ad b7       	in	r26, 0x3d	; 61
   137f2:	be b7       	in	r27, 0x3e	; 62
   137f4:	12 96       	adiw	r26, 0x02	; 2
   137f6:	1c 93       	st	X, r17
   137f8:	0e 93       	st	-X, r16
   137fa:	11 97       	sbiw	r26, 0x01	; 1
   137fc:	8d ee       	ldi	r24, 0xED	; 237
   137fe:	97 e0       	ldi	r25, 0x07	; 7
   13800:	93 83       	std	Z+3, r25	; 0x03
   13802:	82 83       	std	Z+2, r24	; 0x02
   13804:	8b ed       	ldi	r24, 0xDB	; 219
   13806:	97 e0       	ldi	r25, 0x07	; 7
   13808:	14 c0       	rjmp	.+40     	; 0x13832 <PrintIdle+0xb44>
		       break;
		  case 35:
		       CarriegeReturn();
   1380a:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("     Surcharge Amt: %s"),strSurchargeAmount);
   1380e:	00 d0       	rcall	.+0      	; 0x13810 <PrintIdle+0xb22>
   13810:	00 d0       	rcall	.+0      	; 0x13812 <PrintIdle+0xb24>
   13812:	00 d0       	rcall	.+0      	; 0x13814 <PrintIdle+0xb26>
   13814:	ed b7       	in	r30, 0x3d	; 61
   13816:	fe b7       	in	r31, 0x3e	; 62
   13818:	31 96       	adiw	r30, 0x01	; 1
   1381a:	ad b7       	in	r26, 0x3d	; 61
   1381c:	be b7       	in	r27, 0x3e	; 62
   1381e:	12 96       	adiw	r26, 0x02	; 2
   13820:	1c 93       	st	X, r17
   13822:	0e 93       	st	-X, r16
   13824:	11 97       	sbiw	r26, 0x01	; 1
   13826:	86 ed       	ldi	r24, 0xD6	; 214
   13828:	97 e0       	ldi	r25, 0x07	; 7
   1382a:	93 83       	std	Z+3, r25	; 0x03
   1382c:	82 83       	std	Z+2, r24	; 0x02
   1382e:	82 e5       	ldi	r24, 0x52	; 82
   13830:	98 e0       	ldi	r25, 0x08	; 8
   13832:	95 83       	std	Z+5, r25	; 0x05
   13834:	84 83       	std	Z+4, r24	; 0x04
   13836:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
   1383a:	ed b7       	in	r30, 0x3d	; 61
   1383c:	fe b7       	in	r31, 0x3e	; 62
   1383e:	36 96       	adiw	r30, 0x06	; 6
   13840:	0f b6       	in	r0, 0x3f	; 63
   13842:	f8 94       	cli
   13844:	fe bf       	out	0x3e, r31	; 62
   13846:	0f be       	out	0x3f, r0	; 63
   13848:	ed bf       	out	0x3d, r30	; 61
   1384a:	16 c0       	rjmp	.+44     	; 0x13878 <PrintIdle+0xb8a>
		       break;
		  case 36:
		       CarriegeReturn();
   1384c:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("    ------------------------------"));
   13850:	00 d0       	rcall	.+0      	; 0x13852 <PrintIdle+0xb64>
   13852:	00 d0       	rcall	.+0      	; 0x13854 <PrintIdle+0xb66>
   13854:	ad b7       	in	r26, 0x3d	; 61
   13856:	be b7       	in	r27, 0x3e	; 62
   13858:	12 96       	adiw	r26, 0x02	; 2
   1385a:	1c 93       	st	X, r17
   1385c:	0e 93       	st	-X, r16
   1385e:	11 97       	sbiw	r26, 0x01	; 1
   13860:	83 eb       	ldi	r24, 0xB3	; 179
   13862:	97 e0       	ldi	r25, 0x07	; 7
   13864:	14 96       	adiw	r26, 0x04	; 4
   13866:	9c 93       	st	X, r25
   13868:	8e 93       	st	-X, r24
   1386a:	13 97       	sbiw	r26, 0x03	; 3
   1386c:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
   13870:	0f 90       	pop	r0
   13872:	0f 90       	pop	r0
   13874:	0f 90       	pop	r0
   13876:	0f 90       	pop	r0
		       break;
		  }
		  iLoop=0;iSend=0;LSend=strlen(strPrint);
   13878:	10 92 fa 01 	sts	0x01FA, r1
   1387c:	10 92 f9 01 	sts	0x01F9, r1
   13880:	10 92 fe 01 	sts	0x01FE, r1
   13884:	10 92 fd 01 	sts	0x01FD, r1
   13888:	ec eb       	ldi	r30, 0xBC	; 188
   1388a:	f8 e0       	ldi	r31, 0x08	; 8
   1388c:	01 90       	ld	r0, Z+
   1388e:	00 20       	and	r0, r0
   13890:	e9 f7       	brne	.-6      	; 0x1388c <PrintIdle+0xb9e>
   13892:	31 97       	sbiw	r30, 0x01	; 1
   13894:	ec 5b       	subi	r30, 0xBC	; 188
   13896:	f8 40       	sbci	r31, 0x08	; 8
   13898:	f0 93 fc 01 	sts	0x01FC, r31
   1389c:	e0 93 fb 01 	sts	0x01FB, r30
          stPrintIdle=piPrintMessage;
   138a0:	8a e0       	ldi	r24, 0x0A	; 10
   138a2:	76 c1       	rjmp	.+748    	; 0x13b90 <PrintIdle+0xea2>
	      break;
     case piPrintMessage:
	      if (iSend<LSend){
   138a4:	20 91 fd 01 	lds	r18, 0x01FD
   138a8:	30 91 fe 01 	lds	r19, 0x01FE
   138ac:	80 91 fb 01 	lds	r24, 0x01FB
   138b0:	90 91 fc 01 	lds	r25, 0x01FC
   138b4:	28 17       	cp	r18, r24
   138b6:	39 07       	cpc	r19, r25
   138b8:	68 f4       	brcc	.+26     	; 0x138d4 <PrintIdle+0xbe6>
		      iLoop++;
   138ba:	80 91 f9 01 	lds	r24, 0x01F9
   138be:	90 91 fa 01 	lds	r25, 0x01FA
   138c2:	01 96       	adiw	r24, 0x01	; 1
   138c4:	90 93 fa 01 	sts	0x01FA, r25
   138c8:	80 93 f9 01 	sts	0x01F9, r24
			  if((iLoop%PRINT_DELAY)==0){
				 TimPrintBusy=0;
   138cc:	10 92 b6 01 	sts	0x01B6, r1
				 stPrintIdle=piCheckPrintStatusMessage;
   138d0:	8c e0       	ldi	r24, 0x0C	; 12
   138d2:	5e c1       	rjmp	.+700    	; 0x13b90 <PrintIdle+0xea2>
				 }
			  }
          else{iMessage++;
   138d4:	80 91 01 02 	lds	r24, 0x0201
   138d8:	8f 5f       	subi	r24, 0xFF	; 255
   138da:	80 93 01 02 	sts	0x0201, r24
		      if (iMessage>MessageLine){
   138de:	90 91 00 02 	lds	r25, 0x0200
   138e2:	98 17       	cp	r25, r24
   138e4:	30 f4       	brcc	.+12     	; 0x138f2 <PrintIdle+0xc04>
			      iFooter=0;				  
   138e6:	10 92 04 02 	sts	0x0204, r1
				  CarriegeReturn();
   138ea:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
				  stPrintIdle=piLoadOperatorName;//piLoadFooter;
   138ee:	85 e1       	ldi	r24, 0x15	; 21
   138f0:	4f c1       	rjmp	.+670    	; 0x13b90 <PrintIdle+0xea2>
			  }
			  else stPrintIdle=piLoadMessage;
   138f2:	89 e0       	ldi	r24, 0x09	; 9
   138f4:	4d c1       	rjmp	.+666    	; 0x13b90 <PrintIdle+0xea2>
			  }
	      break;
     case piCheckPrintStatusMessage:
	      if (IsBusyPrint==False){
   138f6:	80 91 b3 01 	lds	r24, 0x01B3
   138fa:	88 23       	and	r24, r24
   138fc:	09 f0       	breq	.+2      	; 0x13900 <PrintIdle+0xc12>
   138fe:	40 c1       	rjmp	.+640    	; 0x13b80 <PrintIdle+0xe92>
		      uart(_COM_PRINTER,1,strPrint[iSend]);
   13900:	e0 91 fd 01 	lds	r30, 0x01FD
   13904:	f0 91 fe 01 	lds	r31, 0x01FE
   13908:	e4 54       	subi	r30, 0x44	; 68
   1390a:	f7 4f       	sbci	r31, 0xF7	; 247
   1390c:	61 e0       	ldi	r22, 0x01	; 1
   1390e:	40 81       	ld	r20, Z
   13910:	0e 94 d2 a8 	call	0x151a4	; 0x151a4 <uart>
		      iSend++;
   13914:	80 91 fd 01 	lds	r24, 0x01FD
   13918:	90 91 fe 01 	lds	r25, 0x01FE
   1391c:	01 96       	adiw	r24, 0x01	; 1
   1391e:	90 93 fe 01 	sts	0x01FE, r25
   13922:	80 93 fd 01 	sts	0x01FD, r24
		      stPrintIdle=piPrintMessage;
   13926:	8a e0       	ldi	r24, 0x0A	; 10
   13928:	29 c1       	rjmp	.+594    	; 0x13b7c <PrintIdle+0xe8e>


	//Added Operator Name:
	 case piLoadOperatorName:
	      //CheckEmpty
		  eeprom_read_block((void*) &strOperatorName, (const void*) &DefOperatorName,18);
   1392a:	8e 01       	movw	r16, r28
   1392c:	0f 5f       	subi	r16, 0xFF	; 255
   1392e:	1f 4f       	sbci	r17, 0xFF	; 255
   13930:	c8 01       	movw	r24, r16
   13932:	65 e1       	ldi	r22, 0x15	; 21
   13934:	70 e0       	ldi	r23, 0x00	; 0
   13936:	42 e1       	ldi	r20, 0x12	; 18
   13938:	50 e0       	ldi	r21, 0x00	; 0
   1393a:	0e 94 30 ad 	call	0x15a60	; 0x15a60 <__eerd_block_m128>
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   1393e:	ce 01       	movw	r24, r28
   13940:	40 96       	adiw	r24, 0x10	; 16
	    Dest[i]=Source[IdxSource+i];
   13942:	0f 5f       	subi	r16, 0xFF	; 255
   13944:	1f 4f       	sbci	r17, 0xFF	; 255
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   13946:	08 17       	cp	r16, r24
   13948:	19 07       	cpc	r17, r25
   1394a:	d9 f7       	brne	.-10     	; 0x13942 <PrintIdle+0xc54>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
   1394c:	18 8a       	std	Y+16, r1	; 0x10
	//Added Operator Name:
	 case piLoadOperatorName:
	      //CheckEmpty
		  eeprom_read_block((void*) &strOperatorName, (const void*) &DefOperatorName,18);
		  StrPosCopy(strOperatorName,strOperatorName,0,15);
		  if (strlen(strOperatorName)>0){
   1394e:	89 81       	ldd	r24, Y+1	; 0x01
   13950:	88 23       	and	r24, r24
   13952:	09 f4       	brne	.+2      	; 0x13956 <PrintIdle+0xc68>
   13954:	93 c0       	rjmp	.+294    	; 0x13a7c <PrintIdle+0xd8e>
			  if (SpaceOnly(strOperatorName)!=True){		      				  
   13956:	7e 01       	movw	r14, r28
   13958:	08 94       	sec
   1395a:	e1 1c       	adc	r14, r1
   1395c:	f1 1c       	adc	r15, r1
   1395e:	c7 01       	movw	r24, r14
   13960:	0e 94 32 24 	call	0x4864	; 0x4864 <SpaceOnly>
   13964:	81 30       	cpi	r24, 0x01	; 1
   13966:	09 f4       	brne	.+2      	; 0x1396a <PrintIdle+0xc7c>
   13968:	89 c0       	rjmp	.+274    	; 0x13a7c <PrintIdle+0xd8e>
				  sprintf_P(strPrint,PSTR("     Operator: %s"),strOperatorName);			   
   1396a:	00 d0       	rcall	.+0      	; 0x1396c <PrintIdle+0xc7e>
   1396c:	00 d0       	rcall	.+0      	; 0x1396e <PrintIdle+0xc80>
   1396e:	00 d0       	rcall	.+0      	; 0x13970 <PrintIdle+0xc82>
   13970:	ed b7       	in	r30, 0x3d	; 61
   13972:	fe b7       	in	r31, 0x3e	; 62
   13974:	31 96       	adiw	r30, 0x01	; 1
   13976:	0c eb       	ldi	r16, 0xBC	; 188
   13978:	18 e0       	ldi	r17, 0x08	; 8
   1397a:	ad b7       	in	r26, 0x3d	; 61
   1397c:	be b7       	in	r27, 0x3e	; 62
   1397e:	12 96       	adiw	r26, 0x02	; 2
   13980:	1c 93       	st	X, r17
   13982:	0e 93       	st	-X, r16
   13984:	11 97       	sbiw	r26, 0x01	; 1
   13986:	81 ea       	ldi	r24, 0xA1	; 161
   13988:	97 e0       	ldi	r25, 0x07	; 7
   1398a:	93 83       	std	Z+3, r25	; 0x03
   1398c:	82 83       	std	Z+2, r24	; 0x02
   1398e:	f5 82       	std	Z+5, r15	; 0x05
   13990:	e4 82       	std	Z+4, r14	; 0x04
   13992:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
			      iSend=0;iLoop=0;
   13996:	10 92 fe 01 	sts	0x01FE, r1
   1399a:	10 92 fd 01 	sts	0x01FD, r1
   1399e:	10 92 fa 01 	sts	0x01FA, r1
   139a2:	10 92 f9 01 	sts	0x01F9, r1
				  LSend=strlen(strPrint);
   139a6:	f8 01       	movw	r30, r16
   139a8:	01 90       	ld	r0, Z+
   139aa:	00 20       	and	r0, r0
   139ac:	e9 f7       	brne	.-6      	; 0x139a8 <PrintIdle+0xcba>
   139ae:	8f 01       	movw	r16, r30
   139b0:	01 50       	subi	r16, 0x01	; 1
   139b2:	10 40       	sbci	r17, 0x00	; 0
   139b4:	0c 5b       	subi	r16, 0xBC	; 188
   139b6:	18 40       	sbci	r17, 0x08	; 8
   139b8:	10 93 fc 01 	sts	0x01FC, r17
   139bc:	00 93 fb 01 	sts	0x01FB, r16
				  stPrintIdle=piPrintOperatorName;
   139c0:	86 e1       	ldi	r24, 0x16	; 22
   139c2:	80 93 06 02 	sts	0x0206, r24
   139c6:	8d b7       	in	r24, 0x3d	; 61
   139c8:	9e b7       	in	r25, 0x3e	; 62
   139ca:	06 96       	adiw	r24, 0x06	; 6
   139cc:	0f b6       	in	r0, 0x3f	; 63
   139ce:	f8 94       	cli
   139d0:	9e bf       	out	0x3e, r25	; 62
   139d2:	0f be       	out	0x3f, r0	; 63
   139d4:	8d bf       	out	0x3d, r24	; 61
   139d6:	07 c1       	rjmp	.+526    	; 0x13be6 <PrintIdle+0xef8>
			  }else stPrintIdle=piLoadFooter;
          }  
          else stPrintIdle=piLoadFooter;
	      break;
	 case piPrintOperatorName:
		  if (iSend<LSend){
   139d8:	20 91 fd 01 	lds	r18, 0x01FD
   139dc:	30 91 fe 01 	lds	r19, 0x01FE
   139e0:	80 91 fb 01 	lds	r24, 0x01FB
   139e4:	90 91 fc 01 	lds	r25, 0x01FC
   139e8:	28 17       	cp	r18, r24
   139ea:	39 07       	cpc	r19, r25
   139ec:	68 f4       	brcc	.+26     	; 0x13a08 <PrintIdle+0xd1a>
		      iLoop++;
   139ee:	80 91 f9 01 	lds	r24, 0x01F9
   139f2:	90 91 fa 01 	lds	r25, 0x01FA
   139f6:	01 96       	adiw	r24, 0x01	; 1
   139f8:	90 93 fa 01 	sts	0x01FA, r25
   139fc:	80 93 f9 01 	sts	0x01F9, r24
			  if((iLoop%PRINT_DELAY)==0){
				  TimPrintBusy=0;
   13a00:	10 92 b6 01 	sts	0x01B6, r1
				  stPrintIdle=piCheckPrintOperatorName;
   13a04:	87 e1       	ldi	r24, 0x17	; 23
   13a06:	c4 c0       	rjmp	.+392    	; 0x13b90 <PrintIdle+0xea2>
				}
			  }
          else {
			  CarriegeReturn();
   13a08:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
			  CarriegeReturn();
   13a0c:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
   13a10:	35 c0       	rjmp	.+106    	; 0x13a7c <PrintIdle+0xd8e>
			  stPrintIdle=piLoadFooter;
			  }
	      break;
	 case piCheckPrintOperatorName:
	      if (IsBusyPrint==False){
   13a12:	80 91 b3 01 	lds	r24, 0x01B3
   13a16:	88 23       	and	r24, r24
   13a18:	09 f0       	breq	.+2      	; 0x13a1c <PrintIdle+0xd2e>
   13a1a:	b2 c0       	rjmp	.+356    	; 0x13b80 <PrintIdle+0xe92>
		      uart(_COM_PRINTER,1,strPrint[iSend]);
   13a1c:	e0 91 fd 01 	lds	r30, 0x01FD
   13a20:	f0 91 fe 01 	lds	r31, 0x01FE
   13a24:	e4 54       	subi	r30, 0x44	; 68
   13a26:	f7 4f       	sbci	r31, 0xF7	; 247
   13a28:	61 e0       	ldi	r22, 0x01	; 1
   13a2a:	40 81       	ld	r20, Z
   13a2c:	0e 94 d2 a8 	call	0x151a4	; 0x151a4 <uart>
		      iSend++;
   13a30:	80 91 fd 01 	lds	r24, 0x01FD
   13a34:	90 91 fe 01 	lds	r25, 0x01FE
   13a38:	01 96       	adiw	r24, 0x01	; 1
   13a3a:	90 93 fe 01 	sts	0x01FE, r25
   13a3e:	80 93 fd 01 	sts	0x01FD, r24
		      stPrintIdle=piPrintOperatorName;
   13a42:	86 e1       	ldi	r24, 0x16	; 22
   13a44:	9b c0       	rjmp	.+310    	; 0x13b7c <PrintIdle+0xe8e>
	      break;

	 	       
     case piLoadFooter:
	      FillChar(strPrint,0,sizeof(strPrint));
	      eeprom_read_block((void*) &strPrint, (const void*) &DefHeaderFooter[6+iFooter], 40);
   13a46:	60 91 04 02 	lds	r22, 0x0204
   13a4a:	89 e2       	ldi	r24, 0x29	; 41
   13a4c:	68 9f       	mul	r22, r24
   13a4e:	b0 01       	movw	r22, r0
   13a50:	11 24       	eor	r1, r1
   13a52:	62 5e       	subi	r22, 0xE2	; 226
   13a54:	7c 4f       	sbci	r23, 0xFC	; 252
   13a56:	8c eb       	ldi	r24, 0xBC	; 188
   13a58:	98 e0       	ldi	r25, 0x08	; 8
   13a5a:	48 e2       	ldi	r20, 0x28	; 40
   13a5c:	50 e0       	ldi	r21, 0x00	; 0
   13a5e:	0e 94 30 ad 	call	0x15a60	; 0x15a60 <__eerd_block_m128>
		  iFooter++;
   13a62:	80 91 04 02 	lds	r24, 0x0204
   13a66:	8f 5f       	subi	r24, 0xFF	; 255
   13a68:	80 93 04 02 	sts	0x0204, r24
		  if (iFooter<=4){
   13a6c:	85 30       	cpi	r24, 0x05	; 5
   13a6e:	90 f4       	brcc	.+36     	; 0x13a94 <PrintIdle+0xda6>
		      if (SpaceOnly(strPrint)==True){
   13a70:	8c eb       	ldi	r24, 0xBC	; 188
   13a72:	98 e0       	ldi	r25, 0x08	; 8
   13a74:	0e 94 32 24 	call	0x4864	; 0x4864 <SpaceOnly>
   13a78:	81 30       	cpi	r24, 0x01	; 1
   13a7a:	11 f4       	brne	.+4      	; 0x13a80 <PrintIdle+0xd92>
			      stPrintIdle=piLoadFooter;
   13a7c:	8e e0       	ldi	r24, 0x0E	; 14
   13a7e:	88 c0       	rjmp	.+272    	; 0x13b90 <PrintIdle+0xea2>
				  }
			  else{
			      iSend=0;
   13a80:	10 92 fe 01 	sts	0x01FE, r1
   13a84:	10 92 fd 01 	sts	0x01FD, r1
				  iLoop=0;
   13a88:	10 92 fa 01 	sts	0x01FA, r1
   13a8c:	10 92 f9 01 	sts	0x01F9, r1
				  stPrintIdle=piPrintFooter;
   13a90:	8f e0       	ldi	r24, 0x0F	; 15
   13a92:	7e c0       	rjmp	.+252    	; 0x13b90 <PrintIdle+0xea2>
				  //RemSpaceLag(strPrint);
				  //CarriegeReturn();
			      }
		  }else{stPrintIdle=piInitScroll;
   13a94:	81 e1       	ldi	r24, 0x11	; 17
   13a96:	7c c0       	rjmp	.+248    	; 0x13b90 <PrintIdle+0xea2>
		        //iPrinted++;
			}
	      break;
     case piPrintFooter:
		  if (iSend<40){
   13a98:	80 91 fd 01 	lds	r24, 0x01FD
   13a9c:	90 91 fe 01 	lds	r25, 0x01FE
   13aa0:	88 97       	sbiw	r24, 0x28	; 40
   13aa2:	68 f4       	brcc	.+26     	; 0x13abe <PrintIdle+0xdd0>
		      iLoop++;
   13aa4:	80 91 f9 01 	lds	r24, 0x01F9
   13aa8:	90 91 fa 01 	lds	r25, 0x01FA
   13aac:	01 96       	adiw	r24, 0x01	; 1
   13aae:	90 93 fa 01 	sts	0x01FA, r25
   13ab2:	80 93 f9 01 	sts	0x01F9, r24
			  if((iLoop%PRINT_DELAY)==0){
				TimPrintBusy=0;
   13ab6:	10 92 b6 01 	sts	0x01B6, r1
				stPrintIdle=piCheckPrintStatusFooter;
   13aba:	8d e0       	ldi	r24, 0x0D	; 13
   13abc:	69 c0       	rjmp	.+210    	; 0x13b90 <PrintIdle+0xea2>
				}
			  }
          else {
		      stPrintIdle=piLoadFooter;
   13abe:	8e e0       	ldi	r24, 0x0E	; 14
   13ac0:	80 93 06 02 	sts	0x0206, r24
			  CarriegeReturn();
   13ac4:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
   13ac8:	8e c0       	rjmp	.+284    	; 0x13be6 <PrintIdle+0xef8>
			  }
	      break;
     case piCheckPrintStatusFooter:
	      if (IsBusyPrint==False){
   13aca:	80 91 b3 01 	lds	r24, 0x01B3
   13ace:	88 23       	and	r24, r24
   13ad0:	09 f0       	breq	.+2      	; 0x13ad4 <PrintIdle+0xde6>
   13ad2:	56 c0       	rjmp	.+172    	; 0x13b80 <PrintIdle+0xe92>
		      uart(_COM_PRINTER,1,strPrint[iSend]);
   13ad4:	e0 91 fd 01 	lds	r30, 0x01FD
   13ad8:	f0 91 fe 01 	lds	r31, 0x01FE
   13adc:	e4 54       	subi	r30, 0x44	; 68
   13ade:	f7 4f       	sbci	r31, 0xF7	; 247
   13ae0:	61 e0       	ldi	r22, 0x01	; 1
   13ae2:	40 81       	ld	r20, Z
   13ae4:	0e 94 d2 a8 	call	0x151a4	; 0x151a4 <uart>
		      iSend++;
   13ae8:	80 91 fd 01 	lds	r24, 0x01FD
   13aec:	90 91 fe 01 	lds	r25, 0x01FE
   13af0:	01 96       	adiw	r24, 0x01	; 1
   13af2:	90 93 fe 01 	sts	0x01FE, r25
   13af6:	80 93 fd 01 	sts	0x01FD, r24
		      stPrintIdle=piPrintFooter;
   13afa:	8f e0       	ldi	r24, 0x0F	; 15
   13afc:	3f c0       	rjmp	.+126    	; 0x13b7c <PrintIdle+0xe8e>
		      stPrintIdle=piFinishPrintIdle;
			  }
	      break;

     case piInitScroll:
	      iPrinted++;
   13afe:	90 91 f8 01 	lds	r25, 0x01F8
   13b02:	9f 5f       	subi	r25, 0xFF	; 255
   13b04:	90 93 f8 01 	sts	0x01F8, r25
		  iScroll=0;
   13b08:	10 92 03 02 	sts	0x0203, r1
		  iLoop=0;
   13b0c:	10 92 fa 01 	sts	0x01FA, r1
   13b10:	10 92 f9 01 	sts	0x01F9, r1
		  if (iPrinted<PrintCopy){
   13b14:	80 91 f7 01 	lds	r24, 0x01F7
   13b18:	98 17       	cp	r25, r24
   13b1a:	28 f4       	brcc	.+10     	; 0x13b26 <PrintIdle+0xe38>
		      nScroll=eeprom_read_byte(&DefPrintScrollSpace);
   13b1c:	82 e3       	ldi	r24, 0x32	; 50
   13b1e:	90 e0       	ldi	r25, 0x00	; 0
   13b20:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
   13b24:	04 c0       	rjmp	.+8      	; 0x13b2e <PrintIdle+0xe40>
		  }else if (iPrinted>=PrintCopy){		  	  
		      nScroll=eeprom_read_byte(&DefPrintScrollEnd);
   13b26:	81 e3       	ldi	r24, 0x31	; 49
   13b28:	90 e0       	ldi	r25, 0x00	; 0
   13b2a:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
   13b2e:	80 93 02 02 	sts	0x0202, r24
		  if (eeprom_read_byte(&DefPrinterType)==PT_CUSTOM_TG02){
		      uart_printf(0,1,PSTR("----Scrolled2-----"));

		      stPrintIdle=piPaperCut;
		  }*/
          stPrintIdle=piScrollPaper;              
   13b32:	80 e1       	ldi	r24, 0x10	; 16
   13b34:	2d c0       	rjmp	.+90     	; 0x13b90 <PrintIdle+0xea2>
	      break;
     case piScrollPaper:
	      iLoop++;
   13b36:	80 91 f9 01 	lds	r24, 0x01F9
   13b3a:	90 91 fa 01 	lds	r25, 0x01FA
   13b3e:	01 96       	adiw	r24, 0x01	; 1
   13b40:	90 93 fa 01 	sts	0x01FA, r25
   13b44:	80 93 f9 01 	sts	0x01F9, r24
		  if (iLoop%PRINT_DELAY==0){
			  TimPrintBusy=0;
   13b48:	10 92 b6 01 	sts	0x01B6, r1
			  stPrintIdle=piCheckPrintStatusScroll;
   13b4c:	82 e1       	ldi	r24, 0x12	; 18
   13b4e:	80 93 06 02 	sts	0x0206, r24
			  }
	      if (iScroll>nScroll)stPrintIdle=piPaperCut;
   13b52:	90 91 03 02 	lds	r25, 0x0203
   13b56:	80 91 02 02 	lds	r24, 0x0202
   13b5a:	89 17       	cp	r24, r25
   13b5c:	08 f0       	brcs	.+2      	; 0x13b60 <PrintIdle+0xe72>
   13b5e:	43 c0       	rjmp	.+134    	; 0x13be6 <PrintIdle+0xef8>
   13b60:	83 e1       	ldi	r24, 0x13	; 19
   13b62:	16 c0       	rjmp	.+44     	; 0x13b90 <PrintIdle+0xea2>
	      break;
     case piCheckPrintStatusScroll:
	      if (IsBusyPrint==False){
   13b64:	80 91 b3 01 	lds	r24, 0x01B3
   13b68:	88 23       	and	r24, r24
   13b6a:	51 f4       	brne	.+20     	; 0x13b80 <PrintIdle+0xe92>
		      iScroll++;
   13b6c:	80 91 03 02 	lds	r24, 0x0203
   13b70:	8f 5f       	subi	r24, 0xFF	; 255
   13b72:	80 93 03 02 	sts	0x0203, r24
		      CarriegeReturn();
   13b76:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
		      stPrintIdle=piScrollPaper;
   13b7a:	80 e1       	ldi	r24, 0x10	; 16
   13b7c:	80 93 06 02 	sts	0x0206, r24
		  }
		  if (TimPrintBusy>TIM_BUSY_PRINT){
   13b80:	80 91 b6 01 	lds	r24, 0x01B6
   13b84:	8b 30       	cpi	r24, 0x0B	; 11
   13b86:	78 f1       	brcs	.+94     	; 0x13be6 <PrintIdle+0xef8>
		      IsPrintERROR=True;
   13b88:	81 e0       	ldi	r24, 0x01	; 1
   13b8a:	80 93 b1 01 	sts	0x01B1, r24
		      stPrintIdle=piFinishPrintIdle;
   13b8e:	84 e1       	ldi	r24, 0x14	; 20
   13b90:	80 93 06 02 	sts	0x0206, r24
   13b94:	28 c0       	rjmp	.+80     	; 0x13be6 <PrintIdle+0xef8>
	      break;
     case piPaperCut:
	      //sprintf_P(strSend,PSTR("i:%d Copy:%d"),iPrinted,PrintCopy);
		  //uart_print(0,1,strSend);

          if (iPrinted>=PrintCopy){
   13b96:	90 91 f8 01 	lds	r25, 0x01F8
   13b9a:	80 91 f7 01 	lds	r24, 0x01F7
   13b9e:	98 17       	cp	r25, r24
   13ba0:	10 f0       	brcs	.+4      	; 0x13ba6 <PrintIdle+0xeb8>
		      stPrintIdle=piFinishPrintIdle;
   13ba2:	84 e1       	ldi	r24, 0x14	; 20
   13ba4:	05 c0       	rjmp	.+10     	; 0x13bb0 <PrintIdle+0xec2>
			  }
		  else {CarriegeReturn();
   13ba6:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
		        CarriegeReturn();
   13baa:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <CarriegeReturn>
		        stPrintIdle=piInit;
   13bae:	81 e0       	ldi	r24, 0x01	; 1
   13bb0:	80 93 06 02 	sts	0x0206, r24
		       }
		  PaperCut();
   13bb4:	0e 94 65 46 	call	0x8cca	; 0x8cca <PaperCut>
   13bb8:	16 c0       	rjmp	.+44     	; 0x13be6 <PrintIdle+0xef8>
	      break;
     case piFinishPrintIdle:	      
	      switch(IFType){
   13bba:	80 91 00 01 	lds	r24, 0x0100
   13bbe:	81 30       	cpi	r24, 0x01	; 1
   13bc0:	19 f0       	breq	.+6      	; 0x13bc8 <PrintIdle+0xeda>
   13bc2:	82 30       	cpi	r24, 0x02	; 2
   13bc4:	61 f4       	brne	.+24     	; 0x13bde <PrintIdle+0xef0>
   13bc6:	03 c0       	rjmp	.+6      	; 0x13bce <PrintIdle+0xee0>
		  case IT_SLAVE:
		       sendMessage04();
   13bc8:	0e 94 ce 92 	call	0x1259c	; 0x1259c <sendMessage04>
   13bcc:	08 c0       	rjmp	.+16     	; 0x13bde <PrintIdle+0xef0>
		       break;
		  case IT_STANDALONE:		  
		       UpdateStandaloneStatus((atoi(strFIP_ID)&0x0F),PS_PRINTED);
   13bce:	89 eb       	ldi	r24, 0xB9	; 185
   13bd0:	97 e0       	ldi	r25, 0x07	; 7
   13bd2:	0e 94 c3 aa 	call	0x15586	; 0x15586 <atoi>
   13bd6:	8f 70       	andi	r24, 0x0F	; 15
   13bd8:	61 e1       	ldi	r22, 0x11	; 17
   13bda:	0e 94 3f 20 	call	0x407e	; 0x407e <UpdateStandaloneStatus>
			   //CurrentPumpStatus[FIPAddr]=PUMP_OFF;
			   //strPumpStatus[FIPAddr]=GetPumpStatusLabel(PUMP_OFF);			   
			   //IsNewPumpStatus=True;//UpdateDisplay
		       break;
		  }
		  IsBusyIdlePrinting=False;
   13bde:	10 92 b2 01 	sts	0x01B2, r1
          stPrintIdle=piIdle;
   13be2:	10 92 06 02 	sts	0x0206, r1
	      break;	 
	 }
}
   13be6:	64 96       	adiw	r28, 0x14	; 20
   13be8:	0f b6       	in	r0, 0x3f	; 63
   13bea:	f8 94       	cli
   13bec:	de bf       	out	0x3e, r29	; 62
   13bee:	0f be       	out	0x3f, r0	; 63
   13bf0:	cd bf       	out	0x3d, r28	; 61
   13bf2:	cf 91       	pop	r28
   13bf4:	df 91       	pop	r29
   13bf6:	1f 91       	pop	r17
   13bf8:	0f 91       	pop	r16
   13bfa:	ff 90       	pop	r15
   13bfc:	ef 90       	pop	r14
   13bfe:	08 95       	ret

00013c00 <systemPrinting>:
     

}

void systemPrinting(){
	 FreePrinting();
   13c00:	0e 94 d2 92 	call	0x125a4	; 0x125a4 <FreePrinting>
	 PrintIdle();
   13c04:	0e 94 77 96 	call	0x12cee	; 0x12cee <PrintIdle>
}
   13c08:	08 95       	ret

00013c0a <SendConfigParamater>:
          stConfigProtocol=cpWaitSend;
	      break;
	 }
}

void SendConfigParamater(){
   13c0a:	8f 92       	push	r8
   13c0c:	9f 92       	push	r9
   13c0e:	af 92       	push	r10
   13c10:	bf 92       	push	r11
   13c12:	cf 92       	push	r12
   13c14:	df 92       	push	r13
   13c16:	ef 92       	push	r14
   13c18:	ff 92       	push	r15
   13c1a:	0f 93       	push	r16
   13c1c:	1f 93       	push	r17
   13c1e:	df 93       	push	r29
   13c20:	cf 93       	push	r28
   13c22:	cd b7       	in	r28, 0x3d	; 61
   13c24:	de b7       	in	r29, 0x3e	; 62
   13c26:	c5 56       	subi	r28, 0x65	; 101
   13c28:	d0 40       	sbci	r29, 0x00	; 0
   13c2a:	0f b6       	in	r0, 0x3f	; 63
   13c2c:	f8 94       	cli
   13c2e:	de bf       	out	0x3e, r29	; 62
   13c30:	0f be       	out	0x3f, r0	; 63
   13c32:	cd bf       	out	0x3d, r28	; 61
char i,j,strSend[60];
char strEEPROM[41],xEEPROM;

     //Start
	 uart_printf(1,0,PSTR("<"));
   13c34:	81 e0       	ldi	r24, 0x01	; 1
   13c36:	60 e0       	ldi	r22, 0x00	; 0
   13c38:	48 ee       	ldi	r20, 0xE8	; 232
   13c3a:	53 e2       	ldi	r21, 0x23	; 35
   13c3c:	0e 94 17 a9 	call	0x1522e	; 0x1522e <uart_printf>
   13c40:	08 e2       	ldi	r16, 0x28	; 40
   13c42:	12 e0       	ldi	r17, 0x02	; 2
     //Header Footer 400
	 for (i=0;i<10;i++){
	      eeprom_read_block((void*) &strEEPROM, (const void*) &DefHeaderFooter[i],sizeof(DefHeaderFooter[i]));
   13c44:	5e 01       	movw	r10, r28
   13c46:	08 94       	sec
   13c48:	a1 1c       	adc	r10, r1
   13c4a:	b1 1c       	adc	r11, r1
		  FillChar(strSend,0,sizeof(strSend));
	      sprintf_P(strSend,PSTR("%s"),strEEPROM);
   13c4c:	ba e2       	ldi	r27, 0x2A	; 42
   13c4e:	eb 2e       	mov	r14, r27
   13c50:	f1 2c       	mov	r15, r1
   13c52:	ec 0e       	add	r14, r28
   13c54:	fd 1e       	adc	r15, r29
   13c56:	a5 ee       	ldi	r26, 0xE5	; 229
   13c58:	ca 2e       	mov	r12, r26
   13c5a:	a3 e2       	ldi	r26, 0x23	; 35
   13c5c:	da 2e       	mov	r13, r26

     //Start
	 uart_printf(1,0,PSTR("<"));
     //Header Footer 400
	 for (i=0;i<10;i++){
	      eeprom_read_block((void*) &strEEPROM, (const void*) &DefHeaderFooter[i],sizeof(DefHeaderFooter[i]));
   13c5e:	c5 01       	movw	r24, r10
   13c60:	b8 01       	movw	r22, r16
   13c62:	49 e2       	ldi	r20, 0x29	; 41
   13c64:	50 e0       	ldi	r21, 0x00	; 0
   13c66:	0e 94 30 ad 	call	0x15a60	; 0x15a60 <__eerd_block_m128>
		  FillChar(strSend,0,sizeof(strSend));
	      sprintf_P(strSend,PSTR("%s"),strEEPROM);
   13c6a:	00 d0       	rcall	.+0      	; 0x13c6c <SendConfigParamater+0x62>
   13c6c:	00 d0       	rcall	.+0      	; 0x13c6e <SendConfigParamater+0x64>
   13c6e:	00 d0       	rcall	.+0      	; 0x13c70 <SendConfigParamater+0x66>
   13c70:	ed b7       	in	r30, 0x3d	; 61
   13c72:	fe b7       	in	r31, 0x3e	; 62
   13c74:	31 96       	adiw	r30, 0x01	; 1
   13c76:	ad b7       	in	r26, 0x3d	; 61
   13c78:	be b7       	in	r27, 0x3e	; 62
   13c7a:	12 96       	adiw	r26, 0x02	; 2
   13c7c:	fc 92       	st	X, r15
   13c7e:	ee 92       	st	-X, r14
   13c80:	11 97       	sbiw	r26, 0x01	; 1
   13c82:	d3 82       	std	Z+3, r13	; 0x03
   13c84:	c2 82       	std	Z+2, r12	; 0x02
   13c86:	b5 82       	std	Z+5, r11	; 0x05
   13c88:	a4 82       	std	Z+4, r10	; 0x04
   13c8a:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
		  AddSpaceLag(strSend,40);
   13c8e:	ed b7       	in	r30, 0x3d	; 61
   13c90:	fe b7       	in	r31, 0x3e	; 62
   13c92:	36 96       	adiw	r30, 0x06	; 6
   13c94:	0f b6       	in	r0, 0x3f	; 63
   13c96:	f8 94       	cli
   13c98:	fe bf       	out	0x3e, r31	; 62
   13c9a:	0f be       	out	0x3f, r0	; 63
   13c9c:	ed bf       	out	0x3d, r30	; 61
   13c9e:	c7 01       	movw	r24, r14
   13ca0:	68 e2       	ldi	r22, 0x28	; 40
   13ca2:	0e 94 d6 2d 	call	0x5bac	; 0x5bac <AddSpaceLag>
		  uart_print(1,0,strSend);
   13ca6:	81 e0       	ldi	r24, 0x01	; 1
   13ca8:	60 e0       	ldi	r22, 0x00	; 0
   13caa:	a7 01       	movw	r20, r14
   13cac:	0e 94 ef a8 	call	0x151de	; 0x151de <uart_print>
   13cb0:	07 5d       	subi	r16, 0xD7	; 215
   13cb2:	1f 4f       	sbci	r17, 0xFF	; 255
char strEEPROM[41],xEEPROM;

     //Start
	 uart_printf(1,0,PSTR("<"));
     //Header Footer 400
	 for (i=0;i<10;i++){
   13cb4:	f3 e0       	ldi	r31, 0x03	; 3
   13cb6:	02 3c       	cpi	r16, 0xC2	; 194
   13cb8:	1f 07       	cpc	r17, r31
   13cba:	89 f6       	brne	.-94     	; 0x13c5e <SendConfigParamater+0x54>
   13cbc:	0c eb       	ldi	r16, 0xBC	; 188
   13cbe:	10 e0       	ldi	r17, 0x00	; 0
		  AddSpaceLag(strSend,40);
		  uart_print(1,0,strSend);
	 }
	 //ProductName 72 
	 for (i=0;i<6;i++){
		 eeprom_read_block((void*) &strEEPROM, (const void*) &DefProductName[i],sizeof(DefProductName[i]));
   13cc0:	5e 01       	movw	r10, r28
   13cc2:	08 94       	sec
   13cc4:	a1 1c       	adc	r10, r1
   13cc6:	b1 1c       	adc	r11, r1
		 FillChar(strSend,0,sizeof(strSend));
	     sprintf_P(strSend,PSTR("%s"),strEEPROM);
   13cc8:	fa e2       	ldi	r31, 0x2A	; 42
   13cca:	ef 2e       	mov	r14, r31
   13ccc:	f1 2c       	mov	r15, r1
   13cce:	ec 0e       	add	r14, r28
   13cd0:	fd 1e       	adc	r15, r29
   13cd2:	e2 ee       	ldi	r30, 0xE2	; 226
   13cd4:	ce 2e       	mov	r12, r30
   13cd6:	e3 e2       	ldi	r30, 0x23	; 35
   13cd8:	de 2e       	mov	r13, r30
		  AddSpaceLag(strSend,40);
		  uart_print(1,0,strSend);
	 }
	 //ProductName 72 
	 for (i=0;i<6;i++){
		 eeprom_read_block((void*) &strEEPROM, (const void*) &DefProductName[i],sizeof(DefProductName[i]));
   13cda:	c5 01       	movw	r24, r10
   13cdc:	b8 01       	movw	r22, r16
   13cde:	4d e0       	ldi	r20, 0x0D	; 13
   13ce0:	50 e0       	ldi	r21, 0x00	; 0
   13ce2:	0e 94 30 ad 	call	0x15a60	; 0x15a60 <__eerd_block_m128>
		 FillChar(strSend,0,sizeof(strSend));
	     sprintf_P(strSend,PSTR("%s"),strEEPROM);
   13ce6:	00 d0       	rcall	.+0      	; 0x13ce8 <SendConfigParamater+0xde>
   13ce8:	00 d0       	rcall	.+0      	; 0x13cea <SendConfigParamater+0xe0>
   13cea:	00 d0       	rcall	.+0      	; 0x13cec <SendConfigParamater+0xe2>
   13cec:	ed b7       	in	r30, 0x3d	; 61
   13cee:	fe b7       	in	r31, 0x3e	; 62
   13cf0:	31 96       	adiw	r30, 0x01	; 1
   13cf2:	ad b7       	in	r26, 0x3d	; 61
   13cf4:	be b7       	in	r27, 0x3e	; 62
   13cf6:	12 96       	adiw	r26, 0x02	; 2
   13cf8:	fc 92       	st	X, r15
   13cfa:	ee 92       	st	-X, r14
   13cfc:	11 97       	sbiw	r26, 0x01	; 1
   13cfe:	d3 82       	std	Z+3, r13	; 0x03
   13d00:	c2 82       	std	Z+2, r12	; 0x02
   13d02:	b5 82       	std	Z+5, r11	; 0x05
   13d04:	a4 82       	std	Z+4, r10	; 0x04
   13d06:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
		 AddSpaceLag(strSend,12);
   13d0a:	ed b7       	in	r30, 0x3d	; 61
   13d0c:	fe b7       	in	r31, 0x3e	; 62
   13d0e:	36 96       	adiw	r30, 0x06	; 6
   13d10:	0f b6       	in	r0, 0x3f	; 63
   13d12:	f8 94       	cli
   13d14:	fe bf       	out	0x3e, r31	; 62
   13d16:	0f be       	out	0x3f, r0	; 63
   13d18:	ed bf       	out	0x3d, r30	; 61
   13d1a:	c7 01       	movw	r24, r14
   13d1c:	6c e0       	ldi	r22, 0x0C	; 12
   13d1e:	0e 94 d6 2d 	call	0x5bac	; 0x5bac <AddSpaceLag>
		 uart_print(1,0,strSend);
   13d22:	81 e0       	ldi	r24, 0x01	; 1
   13d24:	60 e0       	ldi	r22, 0x00	; 0
   13d26:	a7 01       	movw	r20, r14
   13d28:	0e 94 ef a8 	call	0x151de	; 0x151de <uart_print>
   13d2c:	03 5f       	subi	r16, 0xF3	; 243
   13d2e:	1f 4f       	sbci	r17, 0xFF	; 255
	      sprintf_P(strSend,PSTR("%s"),strEEPROM);
		  AddSpaceLag(strSend,40);
		  uart_print(1,0,strSend);
	 }
	 //ProductName 72 
	 for (i=0;i<6;i++){
   13d30:	f1 e0       	ldi	r31, 0x01	; 1
   13d32:	0a 30       	cpi	r16, 0x0A	; 10
   13d34:	1f 07       	cpc	r17, r31
   13d36:	89 f6       	brne	.-94     	; 0x13cda <SendConfigParamater+0xd0>
   13d38:	06 e8       	ldi	r16, 0x86	; 134
   13d3a:	10 e0       	ldi	r17, 0x00	; 0
		 AddSpaceLag(strSend,12);
		 uart_print(1,0,strSend);
	 }
	 //ProductPrice 30
	 for (i=0;i<6;i++){
		 eeprom_read_block((void*) &strEEPROM, (const void*) &DefProductPrice[i],sizeof(DefProductPrice[i]));
   13d3c:	5e 01       	movw	r10, r28
   13d3e:	08 94       	sec
   13d40:	a1 1c       	adc	r10, r1
   13d42:	b1 1c       	adc	r11, r1
		 FillChar(strSend,0,sizeof(strSend));
	     sprintf_P(strSend,PSTR("%s"),strEEPROM);
   13d44:	7a e2       	ldi	r23, 0x2A	; 42
   13d46:	e7 2e       	mov	r14, r23
   13d48:	f1 2c       	mov	r15, r1
   13d4a:	ec 0e       	add	r14, r28
   13d4c:	fd 1e       	adc	r15, r29
   13d4e:	6f ed       	ldi	r22, 0xDF	; 223
   13d50:	c6 2e       	mov	r12, r22
   13d52:	63 e2       	ldi	r22, 0x23	; 35
   13d54:	d6 2e       	mov	r13, r22
		 AddSpaceLag(strSend,12);
		 uart_print(1,0,strSend);
	 }
	 //ProductPrice 30
	 for (i=0;i<6;i++){
		 eeprom_read_block((void*) &strEEPROM, (const void*) &DefProductPrice[i],sizeof(DefProductPrice[i]));
   13d56:	c5 01       	movw	r24, r10
   13d58:	b8 01       	movw	r22, r16
   13d5a:	49 e0       	ldi	r20, 0x09	; 9
   13d5c:	50 e0       	ldi	r21, 0x00	; 0
   13d5e:	0e 94 30 ad 	call	0x15a60	; 0x15a60 <__eerd_block_m128>
		 FillChar(strSend,0,sizeof(strSend));
	     sprintf_P(strSend,PSTR("%s"),strEEPROM);
   13d62:	00 d0       	rcall	.+0      	; 0x13d64 <SendConfigParamater+0x15a>
   13d64:	00 d0       	rcall	.+0      	; 0x13d66 <SendConfigParamater+0x15c>
   13d66:	00 d0       	rcall	.+0      	; 0x13d68 <SendConfigParamater+0x15e>
   13d68:	ed b7       	in	r30, 0x3d	; 61
   13d6a:	fe b7       	in	r31, 0x3e	; 62
   13d6c:	31 96       	adiw	r30, 0x01	; 1
   13d6e:	ad b7       	in	r26, 0x3d	; 61
   13d70:	be b7       	in	r27, 0x3e	; 62
   13d72:	12 96       	adiw	r26, 0x02	; 2
   13d74:	fc 92       	st	X, r15
   13d76:	ee 92       	st	-X, r14
   13d78:	11 97       	sbiw	r26, 0x01	; 1
   13d7a:	d3 82       	std	Z+3, r13	; 0x03
   13d7c:	c2 82       	std	Z+2, r12	; 0x02
   13d7e:	b5 82       	std	Z+5, r11	; 0x05
   13d80:	a4 82       	std	Z+4, r10	; 0x04
   13d82:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
		 AddSpaceLag(strSend,5);
   13d86:	ed b7       	in	r30, 0x3d	; 61
   13d88:	fe b7       	in	r31, 0x3e	; 62
   13d8a:	36 96       	adiw	r30, 0x06	; 6
   13d8c:	0f b6       	in	r0, 0x3f	; 63
   13d8e:	f8 94       	cli
   13d90:	fe bf       	out	0x3e, r31	; 62
   13d92:	0f be       	out	0x3f, r0	; 63
   13d94:	ed bf       	out	0x3d, r30	; 61
   13d96:	c7 01       	movw	r24, r14
   13d98:	65 e0       	ldi	r22, 0x05	; 5
   13d9a:	0e 94 d6 2d 	call	0x5bac	; 0x5bac <AddSpaceLag>
		 uart_print(1,0,strSend);
   13d9e:	81 e0       	ldi	r24, 0x01	; 1
   13da0:	60 e0       	ldi	r22, 0x00	; 0
   13da2:	a7 01       	movw	r20, r14
   13da4:	0e 94 ef a8 	call	0x151de	; 0x151de <uart_print>
   13da8:	07 5f       	subi	r16, 0xF7	; 247
   13daa:	1f 4f       	sbci	r17, 0xFF	; 255
	     sprintf_P(strSend,PSTR("%s"),strEEPROM);
		 AddSpaceLag(strSend,12);
		 uart_print(1,0,strSend);
	 }
	 //ProductPrice 30
	 for (i=0;i<6;i++){
   13dac:	f0 e0       	ldi	r31, 0x00	; 0
   13dae:	0c 3b       	cpi	r16, 0xBC	; 188
   13db0:	1f 07       	cpc	r17, r31
   13db2:	89 f6       	brne	.-94     	; 0x13d56 <SendConfigParamater+0x14c>
   13db4:	06 e4       	ldi	r16, 0x46	; 70
   13db6:	10 e0       	ldi	r17, 0x00	; 0
	 //PumpID Config 8
	 for (i=0;i<8;i++){
	      xEEPROM=eeprom_read_byte(&DefPumpMap[i]);
		  if (xEEPROM>=100)xEEPROM=0;
		  FillChar(strSend,0,sizeof(strSend));
	      sprintf_P(strSend,PSTR("%.2d"),xEEPROM);
   13db8:	5a e2       	ldi	r21, 0x2A	; 42
   13dba:	e5 2e       	mov	r14, r21
   13dbc:	f1 2c       	mov	r15, r1
   13dbe:	ec 0e       	add	r14, r28
   13dc0:	fd 1e       	adc	r15, r29
   13dc2:	4a ed       	ldi	r20, 0xDA	; 218
   13dc4:	c4 2e       	mov	r12, r20
   13dc6:	43 e2       	ldi	r20, 0x23	; 35
   13dc8:	d4 2e       	mov	r13, r20
		 AddSpaceLag(strSend,5);
		 uart_print(1,0,strSend);
	 }
	 //PumpID Config 8
	 for (i=0;i<8;i++){
	      xEEPROM=eeprom_read_byte(&DefPumpMap[i]);
   13dca:	c8 01       	movw	r24, r16
   13dcc:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
		  if (xEEPROM>=100)xEEPROM=0;
   13dd0:	84 36       	cpi	r24, 0x64	; 100
   13dd2:	08 f0       	brcs	.+2      	; 0x13dd6 <SendConfigParamater+0x1cc>
   13dd4:	80 e0       	ldi	r24, 0x00	; 0
		  FillChar(strSend,0,sizeof(strSend));
	      sprintf_P(strSend,PSTR("%.2d"),xEEPROM);
   13dd6:	00 d0       	rcall	.+0      	; 0x13dd8 <SendConfigParamater+0x1ce>
   13dd8:	00 d0       	rcall	.+0      	; 0x13dda <SendConfigParamater+0x1d0>
   13dda:	00 d0       	rcall	.+0      	; 0x13ddc <SendConfigParamater+0x1d2>
   13ddc:	ed b7       	in	r30, 0x3d	; 61
   13dde:	fe b7       	in	r31, 0x3e	; 62
   13de0:	31 96       	adiw	r30, 0x01	; 1
   13de2:	ad b7       	in	r26, 0x3d	; 61
   13de4:	be b7       	in	r27, 0x3e	; 62
   13de6:	12 96       	adiw	r26, 0x02	; 2
   13de8:	fc 92       	st	X, r15
   13dea:	ee 92       	st	-X, r14
   13dec:	11 97       	sbiw	r26, 0x01	; 1
   13dee:	d3 82       	std	Z+3, r13	; 0x03
   13df0:	c2 82       	std	Z+2, r12	; 0x02
   13df2:	84 83       	std	Z+4, r24	; 0x04
   13df4:	15 82       	std	Z+5, r1	; 0x05
   13df6:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
		  AddSpaceLag(strSend,2);
   13dfa:	ed b7       	in	r30, 0x3d	; 61
   13dfc:	fe b7       	in	r31, 0x3e	; 62
   13dfe:	36 96       	adiw	r30, 0x06	; 6
   13e00:	0f b6       	in	r0, 0x3f	; 63
   13e02:	f8 94       	cli
   13e04:	fe bf       	out	0x3e, r31	; 62
   13e06:	0f be       	out	0x3f, r0	; 63
   13e08:	ed bf       	out	0x3d, r30	; 61
   13e0a:	c7 01       	movw	r24, r14
   13e0c:	62 e0       	ldi	r22, 0x02	; 2
   13e0e:	0e 94 d6 2d 	call	0x5bac	; 0x5bac <AddSpaceLag>
		 uart_print(1,0,strSend);
   13e12:	81 e0       	ldi	r24, 0x01	; 1
   13e14:	60 e0       	ldi	r22, 0x00	; 0
   13e16:	a7 01       	movw	r20, r14
   13e18:	0e 94 ef a8 	call	0x151de	; 0x151de <uart_print>
   13e1c:	0f 5f       	subi	r16, 0xFF	; 255
   13e1e:	1f 4f       	sbci	r17, 0xFF	; 255
	     sprintf_P(strSend,PSTR("%s"),strEEPROM);
		 AddSpaceLag(strSend,5);
		 uart_print(1,0,strSend);
	 }
	 //PumpID Config 8
	 for (i=0;i<8;i++){
   13e20:	f0 e0       	ldi	r31, 0x00	; 0
   13e22:	0e 34       	cpi	r16, 0x4E	; 78
   13e24:	1f 07       	cpc	r17, r31
   13e26:	89 f6       	brne	.-94     	; 0x13dca <SendConfigParamater+0x1c0>
   13e28:	36 e5       	ldi	r19, 0x56	; 86
   13e2a:	e3 2e       	mov	r14, r19
   13e2c:	30 e0       	ldi	r19, 0x00	; 0
   13e2e:	f3 2e       	mov	r15, r19
	 //PumpID NozzleConfig 48
	 for (i=0;i<8;i++){
	      for (j=0;j<6;j++){
		       xEEPROM=eeprom_read_byte(&DefNozzleMap[i][j]);     
			   if (xEEPROM>=10)xEEPROM=0;
			   sprintf_P(strSend,PSTR("%d"),xEEPROM);
   13e30:	2a e2       	ldi	r18, 0x2A	; 42
   13e32:	a2 2e       	mov	r10, r18
   13e34:	b1 2c       	mov	r11, r1
   13e36:	ac 0e       	add	r10, r28
   13e38:	bd 1e       	adc	r11, r29
   13e3a:	97 ed       	ldi	r25, 0xD7	; 215
   13e3c:	89 2e       	mov	r8, r25
   13e3e:	93 e2       	ldi	r25, 0x23	; 35
   13e40:	99 2e       	mov	r9, r25
   13e42:	34 c0       	rjmp	.+104    	; 0x13eac <SendConfigParamater+0x2a2>
		 uart_print(1,0,strSend);
	 }
	 //PumpID NozzleConfig 48
	 for (i=0;i<8;i++){
	      for (j=0;j<6;j++){
		       xEEPROM=eeprom_read_byte(&DefNozzleMap[i][j]);     
   13e44:	c8 01       	movw	r24, r16
   13e46:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
			   if (xEEPROM>=10)xEEPROM=0;
   13e4a:	8a 30       	cpi	r24, 0x0A	; 10
   13e4c:	08 f0       	brcs	.+2      	; 0x13e50 <SendConfigParamater+0x246>
   13e4e:	80 e0       	ldi	r24, 0x00	; 0
			   sprintf_P(strSend,PSTR("%d"),xEEPROM);
   13e50:	00 d0       	rcall	.+0      	; 0x13e52 <SendConfigParamater+0x248>
   13e52:	00 d0       	rcall	.+0      	; 0x13e54 <SendConfigParamater+0x24a>
   13e54:	00 d0       	rcall	.+0      	; 0x13e56 <SendConfigParamater+0x24c>
   13e56:	ed b7       	in	r30, 0x3d	; 61
   13e58:	fe b7       	in	r31, 0x3e	; 62
   13e5a:	31 96       	adiw	r30, 0x01	; 1
   13e5c:	ad b7       	in	r26, 0x3d	; 61
   13e5e:	be b7       	in	r27, 0x3e	; 62
   13e60:	12 96       	adiw	r26, 0x02	; 2
   13e62:	bc 92       	st	X, r11
   13e64:	ae 92       	st	-X, r10
   13e66:	11 97       	sbiw	r26, 0x01	; 1
   13e68:	93 82       	std	Z+3, r9	; 0x03
   13e6a:	82 82       	std	Z+2, r8	; 0x02
   13e6c:	84 83       	std	Z+4, r24	; 0x04
   13e6e:	15 82       	std	Z+5, r1	; 0x05
   13e70:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
			   uart_print(1,0,strSend);
   13e74:	ed b7       	in	r30, 0x3d	; 61
   13e76:	fe b7       	in	r31, 0x3e	; 62
   13e78:	36 96       	adiw	r30, 0x06	; 6
   13e7a:	0f b6       	in	r0, 0x3f	; 63
   13e7c:	f8 94       	cli
   13e7e:	fe bf       	out	0x3e, r31	; 62
   13e80:	0f be       	out	0x3f, r0	; 63
   13e82:	ed bf       	out	0x3d, r30	; 61
   13e84:	81 e0       	ldi	r24, 0x01	; 1
   13e86:	60 e0       	ldi	r22, 0x00	; 0
   13e88:	a5 01       	movw	r20, r10
   13e8a:	0e 94 ef a8 	call	0x151de	; 0x151de <uart_print>
		  AddSpaceLag(strSend,2);
		 uart_print(1,0,strSend);
	 }
	 //PumpID NozzleConfig 48
	 for (i=0;i<8;i++){
	      for (j=0;j<6;j++){
   13e8e:	d3 94       	inc	r13
   13e90:	0f 5f       	subi	r16, 0xFF	; 255
   13e92:	1f 4f       	sbci	r17, 0xFF	; 255
   13e94:	f6 e0       	ldi	r31, 0x06	; 6
   13e96:	df 16       	cp	r13, r31
   13e98:	a9 f6       	brne	.-86     	; 0x13e44 <SendConfigParamater+0x23a>
   13e9a:	86 e0       	ldi	r24, 0x06	; 6
   13e9c:	90 e0       	ldi	r25, 0x00	; 0
   13e9e:	e8 0e       	add	r14, r24
   13ea0:	f9 1e       	adc	r15, r25
	      sprintf_P(strSend,PSTR("%.2d"),xEEPROM);
		  AddSpaceLag(strSend,2);
		 uart_print(1,0,strSend);
	 }
	 //PumpID NozzleConfig 48
	 for (i=0;i<8;i++){
   13ea2:	96 e8       	ldi	r25, 0x86	; 134
   13ea4:	e9 16       	cp	r14, r25
   13ea6:	90 e0       	ldi	r25, 0x00	; 0
   13ea8:	f9 06       	cpc	r15, r25
   13eaa:	19 f0       	breq	.+6      	; 0x13eb2 <SendConfigParamater+0x2a8>
   13eac:	87 01       	movw	r16, r14
   13eae:	dd 24       	eor	r13, r13
   13eb0:	c9 cf       	rjmp	.-110    	; 0x13e44 <SendConfigParamater+0x23a>
			   sprintf_P(strSend,PSTR("%d"),xEEPROM);
			   uart_print(1,0,strSend);
		  }
	 }
	 //PrintNoMoney
	 xEEPROM=eeprom_read_byte(&DefPrintMoney);
   13eb2:	82 ec       	ldi	r24, 0xC2	; 194
   13eb4:	93 e0       	ldi	r25, 0x03	; 3
   13eb6:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
	 if (xEEPROM==True){
   13eba:	81 30       	cpi	r24, 0x01	; 1
   13ebc:	79 f4       	brne	.+30     	; 0x13edc <SendConfigParamater+0x2d2>
		 sprintf_P(strSend,PSTR("1"));
   13ebe:	00 d0       	rcall	.+0      	; 0x13ec0 <SendConfigParamater+0x2b6>
   13ec0:	00 d0       	rcall	.+0      	; 0x13ec2 <SendConfigParamater+0x2b8>
   13ec2:	ad b7       	in	r26, 0x3d	; 61
   13ec4:	be b7       	in	r27, 0x3e	; 62
   13ec6:	12 96       	adiw	r26, 0x02	; 2
   13ec8:	bc 92       	st	X, r11
   13eca:	ae 92       	st	-X, r10
   13ecc:	11 97       	sbiw	r26, 0x01	; 1
   13ece:	85 ed       	ldi	r24, 0xD5	; 213
   13ed0:	93 e2       	ldi	r25, 0x23	; 35
   13ed2:	14 96       	adiw	r26, 0x04	; 4
   13ed4:	9c 93       	st	X, r25
   13ed6:	8e 93       	st	-X, r24
   13ed8:	13 97       	sbiw	r26, 0x03	; 3
   13eda:	0a c0       	rjmp	.+20     	; 0x13ef0 <SendConfigParamater+0x2e6>
	 }else{
	     sprintf_P(strSend,PSTR("0"));
   13edc:	00 d0       	rcall	.+0      	; 0x13ede <SendConfigParamater+0x2d4>
   13ede:	00 d0       	rcall	.+0      	; 0x13ee0 <SendConfigParamater+0x2d6>
   13ee0:	ed b7       	in	r30, 0x3d	; 61
   13ee2:	fe b7       	in	r31, 0x3e	; 62
   13ee4:	b2 82       	std	Z+2, r11	; 0x02
   13ee6:	a1 82       	std	Z+1, r10	; 0x01
   13ee8:	83 ed       	ldi	r24, 0xD3	; 211
   13eea:	93 e2       	ldi	r25, 0x23	; 35
   13eec:	94 83       	std	Z+4, r25	; 0x04
   13eee:	83 83       	std	Z+3, r24	; 0x03
   13ef0:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
   13ef4:	0f 90       	pop	r0
   13ef6:	0f 90       	pop	r0
   13ef8:	0f 90       	pop	r0
   13efa:	0f 90       	pop	r0
	 }uart_print(1,0,strSend);
   13efc:	8e 01       	movw	r16, r28
   13efe:	06 5d       	subi	r16, 0xD6	; 214
   13f00:	1f 4f       	sbci	r17, 0xFF	; 255
   13f02:	81 e0       	ldi	r24, 0x01	; 1
   13f04:	60 e0       	ldi	r22, 0x00	; 0
   13f06:	a8 01       	movw	r20, r16
   13f08:	0e 94 ef a8 	call	0x151de	; 0x151de <uart_print>
	 //TermId
     xEEPROM=eeprom_read_byte(&DefIFT_ID);     
   13f0c:	80 e0       	ldi	r24, 0x00	; 0
   13f0e:	90 e0       	ldi	r25, 0x00	; 0
   13f10:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
     sprintf_P(strSend,PSTR("%.2d"),xEEPROM);
   13f14:	00 d0       	rcall	.+0      	; 0x13f16 <SendConfigParamater+0x30c>
   13f16:	00 d0       	rcall	.+0      	; 0x13f18 <SendConfigParamater+0x30e>
   13f18:	00 d0       	rcall	.+0      	; 0x13f1a <SendConfigParamater+0x310>
   13f1a:	ed b7       	in	r30, 0x3d	; 61
   13f1c:	fe b7       	in	r31, 0x3e	; 62
   13f1e:	31 96       	adiw	r30, 0x01	; 1
   13f20:	ad b7       	in	r26, 0x3d	; 61
   13f22:	be b7       	in	r27, 0x3e	; 62
   13f24:	12 96       	adiw	r26, 0x02	; 2
   13f26:	1c 93       	st	X, r17
   13f28:	0e 93       	st	-X, r16
   13f2a:	11 97       	sbiw	r26, 0x01	; 1
   13f2c:	2e ec       	ldi	r18, 0xCE	; 206
   13f2e:	33 e2       	ldi	r19, 0x23	; 35
   13f30:	33 83       	std	Z+3, r19	; 0x03
   13f32:	22 83       	std	Z+2, r18	; 0x02
   13f34:	84 83       	std	Z+4, r24	; 0x04
   13f36:	15 82       	std	Z+5, r1	; 0x05
   13f38:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
     uart_print(1,0,strSend);
   13f3c:	ed b7       	in	r30, 0x3d	; 61
   13f3e:	fe b7       	in	r31, 0x3e	; 62
   13f40:	36 96       	adiw	r30, 0x06	; 6
   13f42:	0f b6       	in	r0, 0x3f	; 63
   13f44:	f8 94       	cli
   13f46:	fe bf       	out	0x3e, r31	; 62
   13f48:	0f be       	out	0x3f, r0	; 63
   13f4a:	ed bf       	out	0x3d, r30	; 61
   13f4c:	81 e0       	ldi	r24, 0x01	; 1
   13f4e:	60 e0       	ldi	r22, 0x00	; 0
   13f50:	a8 01       	movw	r20, r16
   13f52:	0e 94 ef a8 	call	0x151de	; 0x151de <uart_print>
   13f56:	8e e4       	ldi	r24, 0x4E	; 78
   13f58:	e8 2e       	mov	r14, r24
   13f5a:	80 e0       	ldi	r24, 0x00	; 0
   13f5c:	f8 2e       	mov	r15, r24
	 //PumpLabel
     for (i=0;i<8;i++){
	      xEEPROM=eeprom_read_byte(&DefPumpLabel[i]);
		  if (xEEPROM>=100)xEEPROM=0;
		  FillChar(strSend,0,sizeof(strSend));
	      sprintf_P(strSend,PSTR("%.2d"),xEEPROM);
   13f5e:	d0 2e       	mov	r13, r16
   13f60:	01 2f       	mov	r16, r17
   13f62:	b9 ec       	ldi	r27, 0xC9	; 201
   13f64:	ab 2e       	mov	r10, r27
   13f66:	b3 e2       	ldi	r27, 0x23	; 35
   13f68:	bb 2e       	mov	r11, r27
     xEEPROM=eeprom_read_byte(&DefIFT_ID);     
     sprintf_P(strSend,PSTR("%.2d"),xEEPROM);
     uart_print(1,0,strSend);
	 //PumpLabel
     for (i=0;i<8;i++){
	      xEEPROM=eeprom_read_byte(&DefPumpLabel[i]);
   13f6a:	c7 01       	movw	r24, r14
   13f6c:	0e 94 40 ad 	call	0x15a80	; 0x15a80 <__eerd_byte_m128>
		  if (xEEPROM>=100)xEEPROM=0;
   13f70:	84 36       	cpi	r24, 0x64	; 100
   13f72:	08 f0       	brcs	.+2      	; 0x13f76 <SendConfigParamater+0x36c>
   13f74:	80 e0       	ldi	r24, 0x00	; 0
		  FillChar(strSend,0,sizeof(strSend));
	      sprintf_P(strSend,PSTR("%.2d"),xEEPROM);
   13f76:	00 d0       	rcall	.+0      	; 0x13f78 <SendConfigParamater+0x36e>
   13f78:	00 d0       	rcall	.+0      	; 0x13f7a <SendConfigParamater+0x370>
   13f7a:	00 d0       	rcall	.+0      	; 0x13f7c <SendConfigParamater+0x372>
   13f7c:	ed b7       	in	r30, 0x3d	; 61
   13f7e:	fe b7       	in	r31, 0x3e	; 62
   13f80:	31 96       	adiw	r30, 0x01	; 1
   13f82:	ad b7       	in	r26, 0x3d	; 61
   13f84:	be b7       	in	r27, 0x3e	; 62
   13f86:	11 96       	adiw	r26, 0x01	; 1
   13f88:	dc 92       	st	X, r13
   13f8a:	11 97       	sbiw	r26, 0x01	; 1
   13f8c:	12 96       	adiw	r26, 0x02	; 2
   13f8e:	0c 93       	st	X, r16
   13f90:	b3 82       	std	Z+3, r11	; 0x03
   13f92:	a2 82       	std	Z+2, r10	; 0x02
   13f94:	84 83       	std	Z+4, r24	; 0x04
   13f96:	15 82       	std	Z+5, r1	; 0x05
   13f98:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
		  AddSpaceLag(strSend,2);
   13f9c:	ed b7       	in	r30, 0x3d	; 61
   13f9e:	fe b7       	in	r31, 0x3e	; 62
   13fa0:	36 96       	adiw	r30, 0x06	; 6
   13fa2:	0f b6       	in	r0, 0x3f	; 63
   13fa4:	f8 94       	cli
   13fa6:	fe bf       	out	0x3e, r31	; 62
   13fa8:	0f be       	out	0x3f, r0	; 63
   13faa:	ed bf       	out	0x3d, r30	; 61
   13fac:	8d 2d       	mov	r24, r13
   13fae:	90 2f       	mov	r25, r16
   13fb0:	62 e0       	ldi	r22, 0x02	; 2
   13fb2:	0e 94 d6 2d 	call	0x5bac	; 0x5bac <AddSpaceLag>
		 uart_print(1,0,strSend);
   13fb6:	81 e0       	ldi	r24, 0x01	; 1
   13fb8:	60 e0       	ldi	r22, 0x00	; 0
   13fba:	4d 2d       	mov	r20, r13
   13fbc:	50 2f       	mov	r21, r16
   13fbe:	0e 94 ef a8 	call	0x151de	; 0x151de <uart_print>
   13fc2:	08 94       	sec
   13fc4:	e1 1c       	adc	r14, r1
   13fc6:	f1 1c       	adc	r15, r1
	 //TermId
     xEEPROM=eeprom_read_byte(&DefIFT_ID);     
     sprintf_P(strSend,PSTR("%.2d"),xEEPROM);
     uart_print(1,0,strSend);
	 //PumpLabel
     for (i=0;i<8;i++){
   13fc8:	f6 e5       	ldi	r31, 0x56	; 86
   13fca:	ef 16       	cp	r14, r31
   13fcc:	f0 e0       	ldi	r31, 0x00	; 0
   13fce:	ff 06       	cpc	r15, r31
   13fd0:	61 f6       	brne	.-104    	; 0x13f6a <SendConfigParamater+0x360>
		  FillChar(strSend,0,sizeof(strSend));
	      sprintf_P(strSend,PSTR("%.2d"),xEEPROM);
		  AddSpaceLag(strSend,2);
		 uart_print(1,0,strSend);
	 }
	 uart_printf(1,1,PSTR(">"));
   13fd2:	81 e0       	ldi	r24, 0x01	; 1
   13fd4:	61 e0       	ldi	r22, 0x01	; 1
   13fd6:	47 ec       	ldi	r20, 0xC7	; 199
   13fd8:	53 e2       	ldi	r21, 0x23	; 35
   13fda:	0e 94 17 a9 	call	0x1522e	; 0x1522e <uart_printf>
	 //End
}
   13fde:	cb 59       	subi	r28, 0x9B	; 155
   13fe0:	df 4f       	sbci	r29, 0xFF	; 255
   13fe2:	0f b6       	in	r0, 0x3f	; 63
   13fe4:	f8 94       	cli
   13fe6:	de bf       	out	0x3e, r29	; 62
   13fe8:	0f be       	out	0x3f, r0	; 63
   13fea:	cd bf       	out	0x3d, r28	; 61
   13fec:	cf 91       	pop	r28
   13fee:	df 91       	pop	r29
   13ff0:	1f 91       	pop	r17
   13ff2:	0f 91       	pop	r16
   13ff4:	ff 90       	pop	r15
   13ff6:	ef 90       	pop	r14
   13ff8:	df 90       	pop	r13
   13ffa:	cf 90       	pop	r12
   13ffc:	bf 90       	pop	r11
   13ffe:	af 90       	pop	r10
   14000:	9f 90       	pop	r9
   14002:	8f 90       	pop	r8
   14004:	08 95       	ret

00014006 <SaveConfigParameter>:
     char Result;
	 Result=False;
   return Result;
}

void SaveConfigParameter(){
   14006:	6f 92       	push	r6
   14008:	7f 92       	push	r7
   1400a:	8f 92       	push	r8
   1400c:	9f 92       	push	r9
   1400e:	af 92       	push	r10
   14010:	bf 92       	push	r11
   14012:	cf 92       	push	r12
   14014:	df 92       	push	r13
   14016:	ef 92       	push	r14
   14018:	ff 92       	push	r15
   1401a:	0f 93       	push	r16
   1401c:	1f 93       	push	r17
   1401e:	df 93       	push	r29
   14020:	cf 93       	push	r28
   14022:	cd b7       	in	r28, 0x3d	; 61
   14024:	de b7       	in	r29, 0x3e	; 62
   14026:	c6 54       	subi	r28, 0x46	; 70
   14028:	d0 40       	sbci	r29, 0x00	; 0
   1402a:	0f b6       	in	r0, 0x3f	; 63
   1402c:	f8 94       	cli
   1402e:	de bf       	out	0x3e, r29	; 62
   14030:	0f be       	out	0x3f, r0	; 63
   14032:	cd bf       	out	0x3d, r28	; 61
char i,j;
char strEEPROM[50],xEEPROM;
unsigned int StrPos;
char strSend[20];
     
	 sprintf_P(strSend,PSTR("Length:%d"),transLength);
   14034:	00 d0       	rcall	.+0      	; 0x14036 <SaveConfigParameter+0x30>
   14036:	00 d0       	rcall	.+0      	; 0x14038 <SaveConfigParameter+0x32>
   14038:	00 d0       	rcall	.+0      	; 0x1403a <SaveConfigParameter+0x34>
   1403a:	ed b7       	in	r30, 0x3d	; 61
   1403c:	fe b7       	in	r31, 0x3e	; 62
   1403e:	31 96       	adiw	r30, 0x01	; 1
   14040:	8e 01       	movw	r16, r28
   14042:	0f 5f       	subi	r16, 0xFF	; 255
   14044:	1f 4f       	sbci	r17, 0xFF	; 255
   14046:	ad b7       	in	r26, 0x3d	; 61
   14048:	be b7       	in	r27, 0x3e	; 62
   1404a:	12 96       	adiw	r26, 0x02	; 2
   1404c:	1c 93       	st	X, r17
   1404e:	0e 93       	st	-X, r16
   14050:	11 97       	sbiw	r26, 0x01	; 1
   14052:	81 e0       	ldi	r24, 0x01	; 1
   14054:	94 e2       	ldi	r25, 0x24	; 36
   14056:	93 83       	std	Z+3, r25	; 0x03
   14058:	82 83       	std	Z+2, r24	; 0x02
   1405a:	80 91 8b 01 	lds	r24, 0x018B
   1405e:	90 91 8c 01 	lds	r25, 0x018C
   14062:	95 83       	std	Z+5, r25	; 0x05
   14064:	84 83       	std	Z+4, r24	; 0x04
   14066:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	 uart_print(1,1,strSend);
   1406a:	ed b7       	in	r30, 0x3d	; 61
   1406c:	fe b7       	in	r31, 0x3e	; 62
   1406e:	36 96       	adiw	r30, 0x06	; 6
   14070:	0f b6       	in	r0, 0x3f	; 63
   14072:	f8 94       	cli
   14074:	fe bf       	out	0x3e, r31	; 62
   14076:	0f be       	out	0x3f, r0	; 63
   14078:	ed bf       	out	0x3d, r30	; 61
   1407a:	81 e0       	ldi	r24, 0x01	; 1
   1407c:	61 e0       	ldi	r22, 0x01	; 1
   1407e:	a8 01       	movw	r20, r16
   14080:	0e 94 ef a8 	call	0x151de	; 0x151de <uart_print>

     StrPos=0;
	 uart_printf(1,1,PSTR("<Saving>")); 
   14084:	81 e0       	ldi	r24, 0x01	; 1
   14086:	61 e0       	ldi	r22, 0x01	; 1
   14088:	48 ef       	ldi	r20, 0xF8	; 248
   1408a:	53 e2       	ldi	r21, 0x23	; 35
   1408c:	0e 94 17 a9 	call	0x1522e	; 0x1522e <uart_printf>
   14090:	08 e2       	ldi	r16, 0x28	; 40
   14092:	12 e0       	ldi	r17, 0x02	; 2
   14094:	4d e1       	ldi	r20, 0x1D	; 29
   14096:	e4 2e       	mov	r14, r20
   14098:	49 e0       	ldi	r20, 0x09	; 9
   1409a:	f4 2e       	mov	r15, r20
   1409c:	35 e1       	ldi	r19, 0x15	; 21
   1409e:	a3 2e       	mov	r10, r19
   140a0:	b1 2c       	mov	r11, r1
   140a2:	ac 0e       	add	r10, r28
   140a4:	bd 1e       	adc	r11, r29
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   140a6:	2d e3       	ldi	r18, 0x3D	; 61
   140a8:	c2 2e       	mov	r12, r18
   140aa:	d1 2c       	mov	r13, r1
   140ac:	cc 0e       	add	r12, r28
   140ae:	dd 1e       	adc	r13, r29
     
	 sprintf_P(strSend,PSTR("Length:%d"),transLength);
	 uart_print(1,1,strSend);

     StrPos=0;
	 uart_printf(1,1,PSTR("<Saving>")); 
   140b0:	d7 01       	movw	r26, r14
   140b2:	f5 01       	movw	r30, r10
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
   140b4:	8d 91       	ld	r24, X+
   140b6:	81 93       	st	Z+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   140b8:	ec 15       	cp	r30, r12
   140ba:	fd 05       	cpc	r31, r13
   140bc:	d9 f7       	brne	.-10     	; 0x140b4 <SaveConfigParameter+0xae>
	 uart_printf(1,1,PSTR("<Saving>")); 
     //HeaderFooter
	 for(i=0;i<10;i++){
         FillChar(strEEPROM,0,sizeof(strEEPROM));   
		 StrPosCopy(rcv_trans,strEEPROM,(StrPos+(40*i)),40);
		 strEEPROM[40]=0;
   140be:	1d ae       	std	Y+61, r1	; 0x3d
		 eeprom_write_block((const void*) &strEEPROM, (void*) &DefHeaderFooter[i],41);
   140c0:	c5 01       	movw	r24, r10
   140c2:	b8 01       	movw	r22, r16
   140c4:	49 e2       	ldi	r20, 0x29	; 41
   140c6:	50 e0       	ldi	r21, 0x00	; 0
   140c8:	0e 94 48 ad 	call	0x15a90	; 0x15a90 <__eewr_block_m128>
   140cc:	07 5d       	subi	r16, 0xD7	; 215
   140ce:	1f 4f       	sbci	r17, 0xFF	; 255
   140d0:	88 e2       	ldi	r24, 0x28	; 40
   140d2:	90 e0       	ldi	r25, 0x00	; 0
   140d4:	e8 0e       	add	r14, r24
   140d6:	f9 1e       	adc	r15, r25
	 uart_print(1,1,strSend);

     StrPos=0;
	 uart_printf(1,1,PSTR("<Saving>")); 
     //HeaderFooter
	 for(i=0;i<10;i++){
   140d8:	93 e0       	ldi	r25, 0x03	; 3
   140da:	02 3c       	cpi	r16, 0xC2	; 194
   140dc:	19 07       	cpc	r17, r25
   140de:	41 f7       	brne	.-48     	; 0x140b0 <SaveConfigParameter+0xaa>
   140e0:	0c eb       	ldi	r16, 0xBC	; 188
   140e2:	10 e0       	ldi	r17, 0x00	; 0
   140e4:	9d ea       	ldi	r25, 0xAD	; 173
   140e6:	e9 2e       	mov	r14, r25
   140e8:	9a e0       	ldi	r25, 0x0A	; 10
   140ea:	f9 2e       	mov	r15, r25
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   140ec:	85 e1       	ldi	r24, 0x15	; 21
   140ee:	c8 2e       	mov	r12, r24
   140f0:	d1 2c       	mov	r13, r1
   140f2:	cc 0e       	add	r12, r28
   140f4:	dd 1e       	adc	r13, r29
   140f6:	b1 e2       	ldi	r27, 0x21	; 33
   140f8:	8b 2e       	mov	r8, r27
   140fa:	91 2c       	mov	r9, r1
   140fc:	8c 0e       	add	r8, r28
   140fe:	9d 1e       	adc	r9, r29
	 uart_print(1,1,strSend);

     StrPos=0;
	 uart_printf(1,1,PSTR("<Saving>")); 
     //HeaderFooter
	 for(i=0;i<10;i++){
   14100:	d7 01       	movw	r26, r14
   14102:	f5 01       	movw	r30, r10
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
   14104:	8d 91       	ld	r24, X+
   14106:	81 93       	st	Z+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   14108:	e8 15       	cp	r30, r8
   1410a:	f9 05       	cpc	r31, r9
   1410c:	d9 f7       	brne	.-10     	; 0x14104 <SaveConfigParameter+0xfe>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
   1410e:	19 a2       	std	Y+33, r1	; 0x21
	 //ProductName
	 StrPos=(40*10);
	 for(i=0;i<6;i++){
         FillChar(strEEPROM,0,sizeof(strEEPROM));   
		 StrPosCopy(rcv_trans,strEEPROM,(StrPos+(12*i)),12);
		 RemSpaceLag(strEEPROM);
   14110:	c6 01       	movw	r24, r12
   14112:	0e 94 e4 25 	call	0x4bc8	; 0x4bc8 <RemSpaceLag>
		 strEEPROM[strlen(strEEPROM)]=0;
   14116:	f6 01       	movw	r30, r12
   14118:	01 90       	ld	r0, Z+
   1411a:	00 20       	and	r0, r0
   1411c:	e9 f7       	brne	.-6      	; 0x14118 <SaveConfigParameter+0x112>
   1411e:	31 97       	sbiw	r30, 0x01	; 1
   14120:	10 82       	st	Z, r1
		 eeprom_write_block((const void*) &strEEPROM, (void*) &DefProductName[i],sizeof(DefProductName[i]));
   14122:	c6 01       	movw	r24, r12
   14124:	b8 01       	movw	r22, r16
   14126:	4d e0       	ldi	r20, 0x0D	; 13
   14128:	50 e0       	ldi	r21, 0x00	; 0
   1412a:	0e 94 48 ad 	call	0x15a90	; 0x15a90 <__eewr_block_m128>
   1412e:	03 5f       	subi	r16, 0xF3	; 243
   14130:	1f 4f       	sbci	r17, 0xFF	; 255
   14132:	ac e0       	ldi	r26, 0x0C	; 12
   14134:	b0 e0       	ldi	r27, 0x00	; 0
   14136:	ea 0e       	add	r14, r26
   14138:	fb 1e       	adc	r15, r27
		 eeprom_write_block((const void*) &strEEPROM, (void*) &DefHeaderFooter[i],41);
		 //uart_print(1,1,strEEPROM);
	 }
	 //ProductName
	 StrPos=(40*10);
	 for(i=0;i<6;i++){
   1413a:	b1 e0       	ldi	r27, 0x01	; 1
   1413c:	0a 30       	cpi	r16, 0x0A	; 10
   1413e:	1b 07       	cpc	r17, r27
   14140:	f9 f6       	brne	.-66     	; 0x14100 <SaveConfigParameter+0xfa>
   14142:	06 e8       	ldi	r16, 0x86	; 134
   14144:	10 e0       	ldi	r17, 0x00	; 0
   14146:	a5 ef       	ldi	r26, 0xF5	; 245
   14148:	ea 2e       	mov	r14, r26
   1414a:	aa e0       	ldi	r26, 0x0A	; 10
   1414c:	fa 2e       	mov	r15, r26
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   1414e:	f5 e1       	ldi	r31, 0x15	; 21
   14150:	cf 2e       	mov	r12, r31
   14152:	d1 2c       	mov	r13, r1
   14154:	cc 0e       	add	r12, r28
   14156:	dd 1e       	adc	r13, r29
   14158:	ea e1       	ldi	r30, 0x1A	; 26
   1415a:	8e 2e       	mov	r8, r30
   1415c:	91 2c       	mov	r9, r1
   1415e:	8c 0e       	add	r8, r28
   14160:	9d 1e       	adc	r9, r29
		 eeprom_write_block((const void*) &strEEPROM, (void*) &DefHeaderFooter[i],41);
		 //uart_print(1,1,strEEPROM);
	 }
	 //ProductName
	 StrPos=(40*10);
	 for(i=0;i<6;i++){
   14162:	d7 01       	movw	r26, r14
   14164:	f5 01       	movw	r30, r10
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
   14166:	8d 91       	ld	r24, X+
   14168:	81 93       	st	Z+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   1416a:	e8 15       	cp	r30, r8
   1416c:	f9 05       	cpc	r31, r9
   1416e:	d9 f7       	brne	.-10     	; 0x14166 <SaveConfigParameter+0x160>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
   14170:	1a 8e       	std	Y+26, r1	; 0x1a
	 //ProductPrice
	 StrPos=(40*10)+(12*6);
	 for(i=0;i<6;i++){
         FillChar(strEEPROM,0,sizeof(strEEPROM));   
		 StrPosCopy(rcv_trans,strEEPROM,(StrPos+(5*i)),5);
		 RemSpaceLag(strEEPROM);
   14172:	c6 01       	movw	r24, r12
   14174:	0e 94 e4 25 	call	0x4bc8	; 0x4bc8 <RemSpaceLag>
		 eeprom_write_block((const void*) &strEEPROM, (void*) &DefProductPrice[i],sizeof(DefProductPrice[i]));
   14178:	c6 01       	movw	r24, r12
   1417a:	b8 01       	movw	r22, r16
   1417c:	49 e0       	ldi	r20, 0x09	; 9
   1417e:	50 e0       	ldi	r21, 0x00	; 0
   14180:	0e 94 48 ad 	call	0x15a90	; 0x15a90 <__eewr_block_m128>
   14184:	07 5f       	subi	r16, 0xF7	; 247
   14186:	1f 4f       	sbci	r17, 0xFF	; 255
   14188:	e5 e0       	ldi	r30, 0x05	; 5
   1418a:	f0 e0       	ldi	r31, 0x00	; 0
   1418c:	ee 0e       	add	r14, r30
   1418e:	ff 1e       	adc	r15, r31
		// uart_print(1,1,strEEPROM);

	 }    
	 //ProductPrice
	 StrPos=(40*10)+(12*6);
	 for(i=0;i<6;i++){
   14190:	f0 e0       	ldi	r31, 0x00	; 0
   14192:	0c 3b       	cpi	r16, 0xBC	; 188
   14194:	1f 07       	cpc	r17, r31
   14196:	29 f7       	brne	.-54     	; 0x14162 <SaveConfigParameter+0x15c>
   14198:	73 e1       	ldi	r23, 0x13	; 19
   1419a:	e7 2e       	mov	r14, r23
   1419c:	7b e0       	ldi	r23, 0x0B	; 11
   1419e:	f7 2e       	mov	r15, r23
   141a0:	66 e4       	ldi	r22, 0x46	; 70
   141a2:	c6 2e       	mov	r12, r22
   141a4:	60 e0       	ldi	r22, 0x00	; 0
   141a6:	d6 2e       	mov	r13, r22
	 //PumpID Config
	 StrPos=(40*10)+(12*6)+(5*6);
	 for(i=0;i<8;i++){
         FillChar(strEEPROM,0,sizeof(strEEPROM));   
		 StrPosCopy(rcv_trans,strEEPROM,(StrPos+(2*i)),2);
		 RemZeroLead(strEEPROM);
   141a8:	55 e1       	ldi	r21, 0x15	; 21
   141aa:	a5 2e       	mov	r10, r21
   141ac:	b1 2c       	mov	r11, r1
   141ae:	ac 0e       	add	r10, r28
   141b0:	bd 1e       	adc	r11, r29
		 xEEPROM=atoi(strEEPROM);
         eeprom_write_byte(&DefPumpMap[i],xEEPROM);
		 sprintf_P(strSend,PSTR("%d"),xEEPROM);
   141b2:	3e 01       	movw	r6, r28
   141b4:	08 94       	sec
   141b6:	61 1c       	adc	r6, r1
   141b8:	71 1c       	adc	r7, r1
   141ba:	45 ef       	ldi	r20, 0xF5	; 245
   141bc:	84 2e       	mov	r8, r20
   141be:	43 e2       	ldi	r20, 0x23	; 35
   141c0:	94 2e       	mov	r9, r20
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
   141c2:	d7 01       	movw	r26, r14
   141c4:	8c 91       	ld	r24, X
   141c6:	8d 8b       	std	Y+21, r24	; 0x15
   141c8:	11 96       	adiw	r26, 0x01	; 1
   141ca:	8c 91       	ld	r24, X
   141cc:	8e 8b       	std	Y+22, r24	; 0x16
	 }Dest[Length]=0;
   141ce:	1f 8a       	std	Y+23, r1	; 0x17
	 //PumpID Config
	 StrPos=(40*10)+(12*6)+(5*6);
	 for(i=0;i<8;i++){
         FillChar(strEEPROM,0,sizeof(strEEPROM));   
		 StrPosCopy(rcv_trans,strEEPROM,(StrPos+(2*i)),2);
		 RemZeroLead(strEEPROM);
   141d0:	c5 01       	movw	r24, r10
   141d2:	0e 94 51 25 	call	0x4aa2	; 0x4aa2 <RemZeroLead>
		 xEEPROM=atoi(strEEPROM);
   141d6:	c5 01       	movw	r24, r10
   141d8:	0e 94 c3 aa 	call	0x15586	; 0x15586 <atoi>
   141dc:	18 2f       	mov	r17, r24
         eeprom_write_byte(&DefPumpMap[i],xEEPROM);
   141de:	c6 01       	movw	r24, r12
   141e0:	61 2f       	mov	r22, r17
   141e2:	0e 94 52 ad 	call	0x15aa4	; 0x15aa4 <__eewr_byte_m128>
		 sprintf_P(strSend,PSTR("%d"),xEEPROM);
   141e6:	00 d0       	rcall	.+0      	; 0x141e8 <SaveConfigParameter+0x1e2>
   141e8:	00 d0       	rcall	.+0      	; 0x141ea <SaveConfigParameter+0x1e4>
   141ea:	00 d0       	rcall	.+0      	; 0x141ec <SaveConfigParameter+0x1e6>
   141ec:	ed b7       	in	r30, 0x3d	; 61
   141ee:	fe b7       	in	r31, 0x3e	; 62
   141f0:	31 96       	adiw	r30, 0x01	; 1
   141f2:	ad b7       	in	r26, 0x3d	; 61
   141f4:	be b7       	in	r27, 0x3e	; 62
   141f6:	12 96       	adiw	r26, 0x02	; 2
   141f8:	7c 92       	st	X, r7
   141fa:	6e 92       	st	-X, r6
   141fc:	11 97       	sbiw	r26, 0x01	; 1
   141fe:	93 82       	std	Z+3, r9	; 0x03
   14200:	82 82       	std	Z+2, r8	; 0x02
   14202:	14 83       	std	Z+4, r17	; 0x04
   14204:	15 82       	std	Z+5, r1	; 0x05
   14206:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
   1420a:	e2 e0       	ldi	r30, 0x02	; 2
   1420c:	f0 e0       	ldi	r31, 0x00	; 0
   1420e:	ee 0e       	add	r14, r30
   14210:	ff 1e       	adc	r15, r31
   14212:	08 94       	sec
   14214:	c1 1c       	adc	r12, r1
   14216:	d1 1c       	adc	r13, r1
		// uart_print(1,1,strEEPROM);

	 }    
	 //PumpID Config
	 StrPos=(40*10)+(12*6)+(5*6);
	 for(i=0;i<8;i++){
   14218:	8d b7       	in	r24, 0x3d	; 61
   1421a:	9e b7       	in	r25, 0x3e	; 62
   1421c:	06 96       	adiw	r24, 0x06	; 6
   1421e:	0f b6       	in	r0, 0x3f	; 63
   14220:	f8 94       	cli
   14222:	9e bf       	out	0x3e, r25	; 62
   14224:	0f be       	out	0x3f, r0	; 63
   14226:	8d bf       	out	0x3d, r24	; 61
   14228:	93 e2       	ldi	r25, 0x23	; 35
   1422a:	e9 16       	cp	r14, r25
   1422c:	9b e0       	ldi	r25, 0x0B	; 11
   1422e:	f9 06       	cpc	r15, r25
   14230:	41 f6       	brne	.-112    	; 0x141c2 <SaveConfigParameter+0x1bc>
   14232:	36 e5       	ldi	r19, 0x56	; 86
   14234:	c3 2e       	mov	r12, r19
   14236:	30 e0       	ldi	r19, 0x00	; 0
   14238:	d3 2e       	mov	r13, r19
   1423a:	57 01       	movw	r10, r14
   1423c:	1d c0       	rjmp	.+58     	; 0x14278 <SaveConfigParameter+0x272>
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
   1423e:	d7 01       	movw	r26, r14
   14240:	6c 91       	ld	r22, X
   14242:	60 53       	subi	r22, 0x30	; 48
   14244:	6a 30       	cpi	r22, 0x0A	; 10
   14246:	08 f0       	brcs	.+2      	; 0x1424a <SaveConfigParameter+0x244>
   14248:	60 e0       	ldi	r22, 0x00	; 0
	 //PumpNozzle
	 StrPos=(40*10)+(12*6)+(5*6)+(2*8);
	 for (i=0;i<8;i++){
	     for (j=0;j<6;j++){
              xEEPROM=Ord(CharPosCopy(rcv_trans,StrPos+(i*6+j)));
		      eeprom_write_byte(&DefNozzleMap[i][j],xEEPROM);
   1424a:	c8 01       	movw	r24, r16
   1424c:	0e 94 52 ad 	call	0x15aa4	; 0x15aa4 <__eewr_byte_m128>

	 }    
	 //PumpNozzle
	 StrPos=(40*10)+(12*6)+(5*6)+(2*8);
	 for (i=0;i<8;i++){
	     for (j=0;j<6;j++){
   14250:	93 94       	inc	r9
   14252:	08 94       	sec
   14254:	e1 1c       	adc	r14, r1
   14256:	f1 1c       	adc	r15, r1
   14258:	0f 5f       	subi	r16, 0xFF	; 255
   1425a:	1f 4f       	sbci	r17, 0xFF	; 255
   1425c:	b6 e0       	ldi	r27, 0x06	; 6
   1425e:	9b 16       	cp	r9, r27
   14260:	71 f7       	brne	.-36     	; 0x1423e <SaveConfigParameter+0x238>
   14262:	e6 e0       	ldi	r30, 0x06	; 6
   14264:	f0 e0       	ldi	r31, 0x00	; 0
   14266:	ce 0e       	add	r12, r30
   14268:	df 1e       	adc	r13, r31
   1426a:	ae 0e       	add	r10, r30
   1426c:	bf 1e       	adc	r11, r31
		// uart_print(1,1,strSend); 

	 }    
	 //PumpNozzle
	 StrPos=(40*10)+(12*6)+(5*6)+(2*8);
	 for (i=0;i<8;i++){
   1426e:	f6 e8       	ldi	r31, 0x86	; 134
   14270:	cf 16       	cp	r12, r31
   14272:	f0 e0       	ldi	r31, 0x00	; 0
   14274:	df 06       	cpc	r13, r31
   14276:	21 f0       	breq	.+8      	; 0x14280 <SaveConfigParameter+0x27a>
   14278:	75 01       	movw	r14, r10
   1427a:	86 01       	movw	r16, r12
   1427c:	99 24       	eor	r9, r9
   1427e:	df cf       	rjmp	.-66     	; 0x1423e <SaveConfigParameter+0x238>
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
   14280:	80 91 53 0b 	lds	r24, 0x0B53
   14284:	80 53       	subi	r24, 0x30	; 48
   14286:	8a 30       	cpi	r24, 0x0A	; 10
   14288:	10 f0       	brcs	.+4      	; 0x1428e <SaveConfigParameter+0x288>
   1428a:	60 e0       	ldi	r22, 0x00	; 0
   1428c:	03 c0       	rjmp	.+6      	; 0x14294 <SaveConfigParameter+0x28e>
   1428e:	68 2f       	mov	r22, r24
   14290:	81 11       	cpse	r24, r1
   14292:	61 e0       	ldi	r22, 0x01	; 1
	 //PrintNoMoney
	 StrPos=(40*10)+(12*6)+(5*6)+(2*8)+(6*8);
	 xEEPROM=Ord(CharPosCopy(rcv_trans,StrPos));
	 if (xEEPROM==0)xEEPROM=False;
	 else xEEPROM=True;
	 eeprom_write_byte(&DefPrintMoney,xEEPROM);
   14294:	82 ec       	ldi	r24, 0xC2	; 194
   14296:	93 e0       	ldi	r25, 0x03	; 3
   14298:	0e 94 52 ad 	call	0x15aa4	; 0x15aa4 <__eewr_byte_m128>
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
   1429c:	80 91 54 0b 	lds	r24, 0x0B54
   142a0:	8d 8b       	std	Y+21, r24	; 0x15
   142a2:	80 91 55 0b 	lds	r24, 0x0B55
   142a6:	8e 8b       	std	Y+22, r24	; 0x16
	 }Dest[Length]=0;
   142a8:	1f 8a       	std	Y+23, r1	; 0x17

	 //TermID
	 StrPos=(40*10)+(12*6)+(5*6)+(2*8)+(6*8)+1;
     FillChar(strEEPROM,0,sizeof(strEEPROM));   
	 StrPosCopy(rcv_trans,strEEPROM,StrPos,2);
	 RemZeroLead(strEEPROM);
   142aa:	25 e1       	ldi	r18, 0x15	; 21
   142ac:	e2 2e       	mov	r14, r18
   142ae:	f1 2c       	mov	r15, r1
   142b0:	ec 0e       	add	r14, r28
   142b2:	fd 1e       	adc	r15, r29
   142b4:	c7 01       	movw	r24, r14
   142b6:	0e 94 51 25 	call	0x4aa2	; 0x4aa2 <RemZeroLead>
	 xEEPROM=atoi(strEEPROM);
   142ba:	c7 01       	movw	r24, r14
   142bc:	0e 94 c3 aa 	call	0x15586	; 0x15586 <atoi>
   142c0:	d8 2e       	mov	r13, r24
	 eeprom_write_byte(&DefIFT_ID,xEEPROM);
   142c2:	80 e0       	ldi	r24, 0x00	; 0
   142c4:	90 e0       	ldi	r25, 0x00	; 0
   142c6:	6d 2d       	mov	r22, r13
   142c8:	0e 94 52 ad 	call	0x15aa4	; 0x15aa4 <__eewr_byte_m128>
	 sprintf_P(strSend,PSTR("%d"),xEEPROM);
   142cc:	00 d0       	rcall	.+0      	; 0x142ce <SaveConfigParameter+0x2c8>
   142ce:	00 d0       	rcall	.+0      	; 0x142d0 <SaveConfigParameter+0x2ca>
   142d0:	00 d0       	rcall	.+0      	; 0x142d2 <SaveConfigParameter+0x2cc>
   142d2:	ed b7       	in	r30, 0x3d	; 61
   142d4:	fe b7       	in	r31, 0x3e	; 62
   142d6:	31 96       	adiw	r30, 0x01	; 1
   142d8:	8e 01       	movw	r16, r28
   142da:	0f 5f       	subi	r16, 0xFF	; 255
   142dc:	1f 4f       	sbci	r17, 0xFF	; 255
   142de:	ad b7       	in	r26, 0x3d	; 61
   142e0:	be b7       	in	r27, 0x3e	; 62
   142e2:	12 96       	adiw	r26, 0x02	; 2
   142e4:	1c 93       	st	X, r17
   142e6:	0e 93       	st	-X, r16
   142e8:	11 97       	sbiw	r26, 0x01	; 1
   142ea:	82 ef       	ldi	r24, 0xF2	; 242
   142ec:	93 e2       	ldi	r25, 0x23	; 35
   142ee:	93 83       	std	Z+3, r25	; 0x03
   142f0:	82 83       	std	Z+2, r24	; 0x02
   142f2:	d4 82       	std	Z+4, r13	; 0x04
   142f4:	15 82       	std	Z+5, r1	; 0x05
   142f6:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
   142fa:	96 e5       	ldi	r25, 0x56	; 86
   142fc:	c9 2e       	mov	r12, r25
   142fe:	9b e0       	ldi	r25, 0x0B	; 11
   14300:	d9 2e       	mov	r13, r25
   14302:	8e e4       	ldi	r24, 0x4E	; 78
   14304:	a8 2e       	mov	r10, r24
   14306:	80 e0       	ldi	r24, 0x00	; 0
   14308:	b8 2e       	mov	r11, r24
   1430a:	ed b7       	in	r30, 0x3d	; 61
   1430c:	fe b7       	in	r31, 0x3e	; 62
   1430e:	36 96       	adiw	r30, 0x06	; 6
   14310:	0f b6       	in	r0, 0x3f	; 63
   14312:	f8 94       	cli
   14314:	fe bf       	out	0x3e, r31	; 62
   14316:	0f be       	out	0x3f, r0	; 63
   14318:	ed bf       	out	0x3d, r30	; 61
	 //PumpLabel
	 StrPos=(40*10)+(12*6)+(5*6)+(2*8)+(6*8)+1+2;
	 for(i=0;i<8;i++){
         FillChar(strEEPROM,0,sizeof(strEEPROM));   
		 StrPosCopy(rcv_trans,strEEPROM,(StrPos+(2*i)),2);
		 RemZeroLead(strEEPROM);
   1431a:	9e 2c       	mov	r9, r14
   1431c:	ef 2c       	mov	r14, r15
		 xEEPROM=atoi(strEEPROM);
         eeprom_write_byte(&DefPumpLabel[i],xEEPROM);
		 sprintf_P(strSend,PSTR("%d"),xEEPROM);
   1431e:	f0 2e       	mov	r15, r16
   14320:	01 2f       	mov	r16, r17
   14322:	1f ee       	ldi	r17, 0xEF	; 239
   14324:	61 2e       	mov	r6, r17
   14326:	13 e2       	ldi	r17, 0x23	; 35
   14328:	71 2e       	mov	r7, r17
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
   1432a:	d6 01       	movw	r26, r12
   1432c:	8c 91       	ld	r24, X
   1432e:	8d 8b       	std	Y+21, r24	; 0x15
   14330:	11 96       	adiw	r26, 0x01	; 1
   14332:	8c 91       	ld	r24, X
   14334:	8e 8b       	std	Y+22, r24	; 0x16
	 }Dest[Length]=0;
   14336:	1f 8a       	std	Y+23, r1	; 0x17
	 //PumpLabel
	 StrPos=(40*10)+(12*6)+(5*6)+(2*8)+(6*8)+1+2;
	 for(i=0;i<8;i++){
         FillChar(strEEPROM,0,sizeof(strEEPROM));   
		 StrPosCopy(rcv_trans,strEEPROM,(StrPos+(2*i)),2);
		 RemZeroLead(strEEPROM);
   14338:	89 2d       	mov	r24, r9
   1433a:	9e 2d       	mov	r25, r14
   1433c:	0e 94 51 25 	call	0x4aa2	; 0x4aa2 <RemZeroLead>
		 xEEPROM=atoi(strEEPROM);
   14340:	89 2d       	mov	r24, r9
   14342:	9e 2d       	mov	r25, r14
   14344:	0e 94 c3 aa 	call	0x15586	; 0x15586 <atoi>
   14348:	18 2f       	mov	r17, r24
         eeprom_write_byte(&DefPumpLabel[i],xEEPROM);
   1434a:	c5 01       	movw	r24, r10
   1434c:	61 2f       	mov	r22, r17
   1434e:	0e 94 52 ad 	call	0x15aa4	; 0x15aa4 <__eewr_byte_m128>
		 sprintf_P(strSend,PSTR("%d"),xEEPROM);
   14352:	00 d0       	rcall	.+0      	; 0x14354 <SaveConfigParameter+0x34e>
   14354:	00 d0       	rcall	.+0      	; 0x14356 <SaveConfigParameter+0x350>
   14356:	00 d0       	rcall	.+0      	; 0x14358 <SaveConfigParameter+0x352>
   14358:	ed b7       	in	r30, 0x3d	; 61
   1435a:	fe b7       	in	r31, 0x3e	; 62
   1435c:	31 96       	adiw	r30, 0x01	; 1
   1435e:	ad b7       	in	r26, 0x3d	; 61
   14360:	be b7       	in	r27, 0x3e	; 62
   14362:	11 96       	adiw	r26, 0x01	; 1
   14364:	fc 92       	st	X, r15
   14366:	11 97       	sbiw	r26, 0x01	; 1
   14368:	12 96       	adiw	r26, 0x02	; 2
   1436a:	0c 93       	st	X, r16
   1436c:	73 82       	std	Z+3, r7	; 0x03
   1436e:	62 82       	std	Z+2, r6	; 0x02
   14370:	14 83       	std	Z+4, r17	; 0x04
   14372:	15 82       	std	Z+5, r1	; 0x05
   14374:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
   14378:	e2 e0       	ldi	r30, 0x02	; 2
   1437a:	f0 e0       	ldi	r31, 0x00	; 0
   1437c:	ce 0e       	add	r12, r30
   1437e:	df 1e       	adc	r13, r31
   14380:	08 94       	sec
   14382:	a1 1c       	adc	r10, r1
   14384:	b1 1c       	adc	r11, r1
	 sprintf_P(strSend,PSTR("%d"),xEEPROM);
//	 uart_print(1,1,strSend); 

	 //PumpLabel
	 StrPos=(40*10)+(12*6)+(5*6)+(2*8)+(6*8)+1+2;
	 for(i=0;i<8;i++){
   14386:	8d b7       	in	r24, 0x3d	; 61
   14388:	9e b7       	in	r25, 0x3e	; 62
   1438a:	06 96       	adiw	r24, 0x06	; 6
   1438c:	0f b6       	in	r0, 0x3f	; 63
   1438e:	f8 94       	cli
   14390:	9e bf       	out	0x3e, r25	; 62
   14392:	0f be       	out	0x3f, r0	; 63
   14394:	8d bf       	out	0x3d, r24	; 61
   14396:	96 e6       	ldi	r25, 0x66	; 102
   14398:	c9 16       	cp	r12, r25
   1439a:	9b e0       	ldi	r25, 0x0B	; 11
   1439c:	d9 06       	cpc	r13, r25
   1439e:	29 f6       	brne	.-118    	; 0x1432a <SaveConfigParameter+0x324>
		 xEEPROM=atoi(strEEPROM);
         eeprom_write_byte(&DefPumpLabel[i],xEEPROM);
		 sprintf_P(strSend,PSTR("%d"),xEEPROM);
//		 uart_print(1,1,strSend); 
	 }    
	 uart_printf(1,1,PSTR("<OK>")); 
   143a0:	81 e0       	ldi	r24, 0x01	; 1
   143a2:	61 e0       	ldi	r22, 0x01	; 1
   143a4:	4a ee       	ldi	r20, 0xEA	; 234
   143a6:	53 e2       	ldi	r21, 0x23	; 35
   143a8:	0e 94 17 a9 	call	0x1522e	; 0x1522e <uart_printf>
}
   143ac:	ca 5b       	subi	r28, 0xBA	; 186
   143ae:	df 4f       	sbci	r29, 0xFF	; 255
   143b0:	0f b6       	in	r0, 0x3f	; 63
   143b2:	f8 94       	cli
   143b4:	de bf       	out	0x3e, r29	; 62
   143b6:	0f be       	out	0x3f, r0	; 63
   143b8:	cd bf       	out	0x3d, r28	; 61
   143ba:	cf 91       	pop	r28
   143bc:	df 91       	pop	r29
   143be:	1f 91       	pop	r17
   143c0:	0f 91       	pop	r16
   143c2:	ff 90       	pop	r15
   143c4:	ef 90       	pop	r14
   143c6:	df 90       	pop	r13
   143c8:	cf 90       	pop	r12
   143ca:	bf 90       	pop	r11
   143cc:	af 90       	pop	r10
   143ce:	9f 90       	pop	r9
   143d0:	8f 90       	pop	r8
   143d2:	7f 90       	pop	r7
   143d4:	6f 90       	pop	r6
   143d6:	08 95       	ret

000143d8 <systemConfigProtocol>:



void systemConfigProtocol(){
     static char stConfigProtocol=cpWaitSend;
	 switch(stConfigProtocol){
   143d8:	80 91 a0 02 	lds	r24, 0x02A0
   143dc:	81 30       	cpi	r24, 0x01	; 1
   143de:	c1 f0       	breq	.+48     	; 0x14410 <systemConfigProtocol+0x38>
   143e0:	81 30       	cpi	r24, 0x01	; 1
   143e2:	18 f0       	brcs	.+6      	; 0x143ea <systemConfigProtocol+0x12>
   143e4:	82 30       	cpi	r24, 0x02	; 2
   143e6:	e9 f4       	brne	.+58     	; 0x14422 <systemConfigProtocol+0x4a>
   143e8:	18 c0       	rjmp	.+48     	; 0x1441a <systemConfigProtocol+0x42>
	 case cpWaitSend:
	      switch(ConfigCommand){
   143ea:	80 91 b0 01 	lds	r24, 0x01B0
   143ee:	81 30       	cpi	r24, 0x01	; 1
   143f0:	31 f0       	breq	.+12     	; 0x143fe <systemConfigProtocol+0x26>
   143f2:	82 30       	cpi	r24, 0x02	; 2
   143f4:	51 f4       	brne	.+20     	; 0x1440a <systemConfigProtocol+0x32>
		  case CC_SEND_CONFIG:
		       ConfigCommand=CC_NONE;
   143f6:	10 92 b0 01 	sts	0x01B0, r1
			   stConfigProtocol=cpSendingParameter;
   143fa:	81 e0       	ldi	r24, 0x01	; 1
   143fc:	03 c0       	rjmp	.+6      	; 0x14404 <systemConfigProtocol+0x2c>
		       break;
		  case CC_SAVE_CONFIG:
		       ConfigCommand=CC_NONE;
   143fe:	10 92 b0 01 	sts	0x01B0, r1
			   stConfigProtocol=cpSavingParameter;
   14402:	82 e0       	ldi	r24, 0x02	; 2
   14404:	80 93 a0 02 	sts	0x02A0, r24
   14408:	08 95       	ret
		       break;
          default:
		       ConfigCommand=CC_NONE;
   1440a:	10 92 b0 01 	sts	0x01B0, r1
   1440e:	08 95       	ret
		       break;
		  }
	      break;
     case cpSendingParameter:
	      SendConfigParamater();
   14410:	0e 94 05 9e 	call	0x13c0a	; 0x13c0a <SendConfigParamater>
          stConfigProtocol=cpWaitSend;
   14414:	10 92 a0 02 	sts	0x02A0, r1
   14418:	08 95       	ret
	      break;
     case cpSavingParameter:
          SaveConfigParameter();
   1441a:	0e 94 03 a0 	call	0x14006	; 0x14006 <SaveConfigParameter>
          stConfigProtocol=cpWaitSend;
   1441e:	10 92 a0 02 	sts	0x02A0, r1
   14422:	08 95       	ret

00014424 <FMenuIdle>:
	     ProcTimeOut++;
	}
	TimSend++;
}

void FMenuIdle(){
   14424:	1f 93       	push	r17
	static char stMenuIdle=miInit,ButtonID=0;
	       char PrintStandaloneResult=PS_NONE;
	       char KeyPressed=0,KeyChar=0;
	       char lcdteks[20];

	switch(stMenuIdle){
   14426:	80 91 ac 02 	lds	r24, 0x02AC
   1442a:	e8 2f       	mov	r30, r24
   1442c:	f0 e0       	ldi	r31, 0x00	; 0
   1442e:	e9 31       	cpi	r30, 0x19	; 25
   14430:	f1 05       	cpc	r31, r1
   14432:	08 f0       	brcs	.+2      	; 0x14436 <FMenuIdle+0x12>
   14434:	7e c1       	rjmp	.+764    	; 0x14732 <FMenuIdle+0x30e>
   14436:	eb 5d       	subi	r30, 0xDB	; 219
   14438:	fe 4f       	sbci	r31, 0xFE	; 254
   1443a:	ee 0f       	add	r30, r30
   1443c:	ff 1f       	adc	r31, r31
   1443e:	05 90       	lpm	r0, Z+
   14440:	f4 91       	lpm	r31, Z+
   14442:	e0 2d       	mov	r30, r0
   14444:	09 94       	ijmp
	case miInit:
         DisplayScreenIdle();
   14446:	0e 94 59 49 	call	0x92b2	; 0x92b2 <DisplayScreenIdle>
   1444a:	3a c1       	rjmp	.+628    	; 0x146c0 <FMenuIdle+0x29c>
		 stMenuIdle=miScan;		
	     break;
	case miScan:
         //Scan Key Pressed 
		 KeyPressed=_key_scan(1);
   1444c:	81 e0       	ldi	r24, 0x01	; 1
   1444e:	0e 94 6d a6 	call	0x14cda	; 0x14cda <_key_scan>
   14452:	18 2f       	mov	r17, r24
		 KeyChar= _key_btn(KeyPressed);       
   14454:	0e 94 ce a5 	call	0x14b9c	; 0x14b9c <_key_btn>

		 switch(KeyPressed){
   14458:	1b 3b       	cpi	r17, 0xBB	; 187
   1445a:	09 f4       	brne	.+2      	; 0x1445e <FMenuIdle+0x3a>
   1445c:	7a c0       	rjmp	.+244    	; 0x14552 <FMenuIdle+0x12e>
   1445e:	1c 3b       	cpi	r17, 0xBC	; 188
   14460:	70 f4       	brcc	.+28     	; 0x1447e <FMenuIdle+0x5a>
   14462:	1b 37       	cpi	r17, 0x7B	; 123
   14464:	69 f1       	breq	.+90     	; 0x144c0 <FMenuIdle+0x9c>
   14466:	1c 37       	cpi	r17, 0x7C	; 124
   14468:	20 f4       	brcc	.+8      	; 0x14472 <FMenuIdle+0x4e>
   1446a:	17 37       	cpi	r17, 0x77	; 119
   1446c:	09 f0       	breq	.+2      	; 0x14470 <FMenuIdle+0x4c>
   1446e:	61 c1       	rjmp	.+706    	; 0x14732 <FMenuIdle+0x30e>
   14470:	2e c0       	rjmp	.+92     	; 0x144ce <FMenuIdle+0xaa>
   14472:	1d 37       	cpi	r17, 0x7D	; 125
   14474:	e9 f0       	breq	.+58     	; 0x144b0 <FMenuIdle+0x8c>
   14476:	1e 37       	cpi	r17, 0x7E	; 126
   14478:	09 f0       	breq	.+2      	; 0x1447c <FMenuIdle+0x58>
   1447a:	5b c1       	rjmp	.+694    	; 0x14732 <FMenuIdle+0x30e>
   1447c:	12 c0       	rjmp	.+36     	; 0x144a2 <FMenuIdle+0x7e>
   1447e:	1d 3d       	cpi	r17, 0xDD	; 221
   14480:	09 f4       	brne	.+2      	; 0x14484 <FMenuIdle+0x60>
   14482:	4f c0       	rjmp	.+158    	; 0x14522 <FMenuIdle+0xfe>
   14484:	1e 3d       	cpi	r17, 0xDE	; 222
   14486:	38 f4       	brcc	.+14     	; 0x14496 <FMenuIdle+0x72>
   14488:	1d 3b       	cpi	r17, 0xBD	; 189
   1448a:	09 f4       	brne	.+2      	; 0x1448e <FMenuIdle+0x6a>
   1448c:	56 c0       	rjmp	.+172    	; 0x1453a <FMenuIdle+0x116>
   1448e:	17 3d       	cpi	r17, 0xD7	; 215
   14490:	09 f0       	breq	.+2      	; 0x14494 <FMenuIdle+0x70>
   14492:	4f c1       	rjmp	.+670    	; 0x14732 <FMenuIdle+0x30e>
   14494:	27 c0       	rjmp	.+78     	; 0x144e4 <FMenuIdle+0xc0>
   14496:	1e 3d       	cpi	r17, 0xDE	; 222
   14498:	61 f1       	breq	.+88     	; 0x144f2 <FMenuIdle+0xce>
   1449a:	1d 3e       	cpi	r17, 0xED	; 237
   1449c:	09 f0       	breq	.+2      	; 0x144a0 <FMenuIdle+0x7c>
   1449e:	49 c1       	rjmp	.+658    	; 0x14732 <FMenuIdle+0x30e>
   144a0:	34 c0       	rjmp	.+104    	; 0x1450a <FMenuIdle+0xe6>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   144a2:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   144a4:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   144a6:	92 e0       	ldi	r25, 0x02	; 2
   144a8:	90 93 bc 01 	sts	0x01BC, r25
         //Scan Key Pressed 
		 KeyPressed=_key_scan(1);
		 KeyChar= _key_btn(KeyPressed);       

		 switch(KeyPressed){
		 case _KEY_TIKET:system_beep(2);ButtonID=1;stMenuIdle=miDisplayProses;break;
   144ac:	81 e0       	ldi	r24, 0x01	; 1
   144ae:	15 c0       	rjmp	.+42     	; 0x144da <FMenuIdle+0xb6>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   144b0:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   144b2:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   144b4:	82 e0       	ldi	r24, 0x02	; 2
   144b6:	80 93 bc 01 	sts	0x01BC, r24
		 KeyPressed=_key_scan(1);
		 KeyChar= _key_btn(KeyPressed);       

		 switch(KeyPressed){
		 case _KEY_TIKET:system_beep(2);ButtonID=1;stMenuIdle=miDisplayProses;break;
		 case _KEY_MENU: system_beep(2);ButtonID=2;stMenuIdle=miDisplayProses;break;
   144ba:	80 93 ab 02 	sts	0x02AB, r24
   144be:	37 c1       	rjmp	.+622    	; 0x1472e <FMenuIdle+0x30a>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   144c0:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   144c2:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   144c4:	92 e0       	ldi	r25, 0x02	; 2
   144c6:	90 93 bc 01 	sts	0x01BC, r25
		 KeyChar= _key_btn(KeyPressed);       

		 switch(KeyPressed){
		 case _KEY_TIKET:system_beep(2);ButtonID=1;stMenuIdle=miDisplayProses;break;
		 case _KEY_MENU: system_beep(2);ButtonID=2;stMenuIdle=miDisplayProses;break;
		 case _KEY_SHIFT:system_beep(2);ButtonID=3;stMenuIdle=miDisplayProses;break;
   144ca:	83 e0       	ldi	r24, 0x03	; 3
   144cc:	06 c0       	rjmp	.+12     	; 0x144da <FMenuIdle+0xb6>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   144ce:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   144d0:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   144d2:	92 e0       	ldi	r25, 0x02	; 2
   144d4:	90 93 bc 01 	sts	0x01BC, r25

		 switch(KeyPressed){
		 case _KEY_TIKET:system_beep(2);ButtonID=1;stMenuIdle=miDisplayProses;break;
		 case _KEY_MENU: system_beep(2);ButtonID=2;stMenuIdle=miDisplayProses;break;
		 case _KEY_SHIFT:system_beep(2);ButtonID=3;stMenuIdle=miDisplayProses;break;
		 case _KEY_CLEAR:system_beep(2);ButtonID=4;stMenuIdle=miDisplayProses;break;//stMenuIdle=miTestMsg56;break;//miDisplayProses;break;
   144d8:	84 e0       	ldi	r24, 0x04	; 4
   144da:	80 93 ab 02 	sts	0x02AB, r24
   144de:	90 93 ac 02 	sts	0x02AC, r25
   144e2:	27 c1       	rjmp	.+590    	; 0x14732 <FMenuIdle+0x30e>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   144e4:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   144e6:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   144e8:	82 e0       	ldi	r24, 0x02	; 2
   144ea:	80 93 bc 01 	sts	0x01BC, r24
		 switch(KeyPressed){
		 case _KEY_TIKET:system_beep(2);ButtonID=1;stMenuIdle=miDisplayProses;break;
		 case _KEY_MENU: system_beep(2);ButtonID=2;stMenuIdle=miDisplayProses;break;
		 case _KEY_SHIFT:system_beep(2);ButtonID=3;stMenuIdle=miDisplayProses;break;
		 case _KEY_CLEAR:system_beep(2);ButtonID=4;stMenuIdle=miDisplayProses;break;//stMenuIdle=miTestMsg56;break;//miDisplayProses;break;
		 case _KEY_0:    system_beep(2);           stMenuIdle=miRunTicket;    break;
   144ee:	8c e0       	ldi	r24, 0x0C	; 12
   144f0:	1e c1       	rjmp	.+572    	; 0x1472e <FMenuIdle+0x30a>
	   //case _KEY_1:    system_beep(2);           stMenuIdle=miRunTotalizer; break;
		 case _KEY_2: if(IFType==IT_SLAVE) {system_beep(2); stMenuIdle=miRunEDC;}       break;
   144f2:	80 91 00 01 	lds	r24, 0x0100
   144f6:	81 30       	cpi	r24, 0x01	; 1
   144f8:	09 f0       	breq	.+2      	; 0x144fc <FMenuIdle+0xd8>
   144fa:	1b c1       	rjmp	.+566    	; 0x14732 <FMenuIdle+0x30e>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   144fc:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   144fe:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   14500:	82 e0       	ldi	r24, 0x02	; 2
   14502:	80 93 bc 01 	sts	0x01BC, r24
		 case _KEY_MENU: system_beep(2);ButtonID=2;stMenuIdle=miDisplayProses;break;
		 case _KEY_SHIFT:system_beep(2);ButtonID=3;stMenuIdle=miDisplayProses;break;
		 case _KEY_CLEAR:system_beep(2);ButtonID=4;stMenuIdle=miDisplayProses;break;//stMenuIdle=miTestMsg56;break;//miDisplayProses;break;
		 case _KEY_0:    system_beep(2);           stMenuIdle=miRunTicket;    break;
	   //case _KEY_1:    system_beep(2);           stMenuIdle=miRunTotalizer; break;
		 case _KEY_2: if(IFType==IT_SLAVE) {system_beep(2); stMenuIdle=miRunEDC;}       break;
   14506:	80 e1       	ldi	r24, 0x10	; 16
   14508:	12 c1       	rjmp	.+548    	; 0x1472e <FMenuIdle+0x30a>
	   //case _KEY_3:    system_beep(2);           stMenuIdle=miClearTotalizer;break;
		 case _KEY_4: if(IFType==IT_SLAVE) {system_beep(2);stMenuIdle=miRunReprint;}   break;
   1450a:	80 91 00 01 	lds	r24, 0x0100
   1450e:	81 30       	cpi	r24, 0x01	; 1
   14510:	09 f0       	breq	.+2      	; 0x14514 <FMenuIdle+0xf0>
   14512:	0f c1       	rjmp	.+542    	; 0x14732 <FMenuIdle+0x30e>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   14514:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   14516:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   14518:	82 e0       	ldi	r24, 0x02	; 2
   1451a:	80 93 bc 01 	sts	0x01BC, r24
		 case _KEY_CLEAR:system_beep(2);ButtonID=4;stMenuIdle=miDisplayProses;break;//stMenuIdle=miTestMsg56;break;//miDisplayProses;break;
		 case _KEY_0:    system_beep(2);           stMenuIdle=miRunTicket;    break;
	   //case _KEY_1:    system_beep(2);           stMenuIdle=miRunTotalizer; break;
		 case _KEY_2: if(IFType==IT_SLAVE) {system_beep(2); stMenuIdle=miRunEDC;}       break;
	   //case _KEY_3:    system_beep(2);           stMenuIdle=miClearTotalizer;break;
		 case _KEY_4: if(IFType==IT_SLAVE) {system_beep(2);stMenuIdle=miRunReprint;}   break;
   1451e:	82 e1       	ldi	r24, 0x12	; 18
   14520:	06 c1       	rjmp	.+524    	; 0x1472e <FMenuIdle+0x30a>
		 case _KEY_5: if(IFType==IT_SLAVE) {system_beep(2);stMenuIdle=miRunLoyalty;}   break;
   14522:	80 91 00 01 	lds	r24, 0x0100
   14526:	81 30       	cpi	r24, 0x01	; 1
   14528:	09 f0       	breq	.+2      	; 0x1452c <FMenuIdle+0x108>
   1452a:	03 c1       	rjmp	.+518    	; 0x14732 <FMenuIdle+0x30e>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   1452c:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   1452e:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   14530:	82 e0       	ldi	r24, 0x02	; 2
   14532:	80 93 bc 01 	sts	0x01BC, r24
		 case _KEY_0:    system_beep(2);           stMenuIdle=miRunTicket;    break;
	   //case _KEY_1:    system_beep(2);           stMenuIdle=miRunTotalizer; break;
		 case _KEY_2: if(IFType==IT_SLAVE) {system_beep(2); stMenuIdle=miRunEDC;}       break;
	   //case _KEY_3:    system_beep(2);           stMenuIdle=miClearTotalizer;break;
		 case _KEY_4: if(IFType==IT_SLAVE) {system_beep(2);stMenuIdle=miRunReprint;}   break;
		 case _KEY_5: if(IFType==IT_SLAVE) {system_beep(2);stMenuIdle=miRunLoyalty;}   break;
   14536:	81 e1       	ldi	r24, 0x11	; 17
   14538:	fa c0       	rjmp	.+500    	; 0x1472e <FMenuIdle+0x30a>
		 case _KEY_6: if(IFType==IT_SLAVE) {system_beep(2);stMenuIdle=miRunChangeMOP;} break;
   1453a:	80 91 00 01 	lds	r24, 0x0100
   1453e:	81 30       	cpi	r24, 0x01	; 1
   14540:	09 f0       	breq	.+2      	; 0x14544 <FMenuIdle+0x120>
   14542:	f7 c0       	rjmp	.+494    	; 0x14732 <FMenuIdle+0x30e>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   14544:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   14546:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   14548:	82 e0       	ldi	r24, 0x02	; 2
   1454a:	80 93 bc 01 	sts	0x01BC, r24
	   //case _KEY_1:    system_beep(2);           stMenuIdle=miRunTotalizer; break;
		 case _KEY_2: if(IFType==IT_SLAVE) {system_beep(2); stMenuIdle=miRunEDC;}       break;
	   //case _KEY_3:    system_beep(2);           stMenuIdle=miClearTotalizer;break;
		 case _KEY_4: if(IFType==IT_SLAVE) {system_beep(2);stMenuIdle=miRunReprint;}   break;
		 case _KEY_5: if(IFType==IT_SLAVE) {system_beep(2);stMenuIdle=miRunLoyalty;}   break;
		 case _KEY_6: if(IFType==IT_SLAVE) {system_beep(2);stMenuIdle=miRunChangeMOP;} break;
   1454e:	8f e0       	ldi	r24, 0x0F	; 15
   14550:	ee c0       	rjmp	.+476    	; 0x1472e <FMenuIdle+0x30a>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   14552:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   14554:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   14556:	82 e0       	ldi	r24, 0x02	; 2
   14558:	80 93 bc 01 	sts	0x01BC, r24
	   //case _KEY_3:    system_beep(2);           stMenuIdle=miClearTotalizer;break;
		 case _KEY_4: if(IFType==IT_SLAVE) {system_beep(2);stMenuIdle=miRunReprint;}   break;
		 case _KEY_5: if(IFType==IT_SLAVE) {system_beep(2);stMenuIdle=miRunLoyalty;}   break;
		 case _KEY_6: if(IFType==IT_SLAVE) {system_beep(2);stMenuIdle=miRunChangeMOP;} break;
		 //case _KEY_8:    system_beep(2);           stMenuIdle=miRunTestChar;   break;
		 case _KEY_9:    system_beep(2);stMenuIdle=miRunAuth;      break;
   1455c:	8d e0       	ldi	r24, 0x0D	; 13
   1455e:	e7 c0       	rjmp	.+462    	; 0x1472e <FMenuIdle+0x30a>
		 }
	     break;
    case miTestMsg56:
	     sprintf_P(strCardID,PSTR("4356A31A"));
   14560:	00 d0       	rcall	.+0      	; 0x14562 <FMenuIdle+0x13e>
   14562:	00 d0       	rcall	.+0      	; 0x14564 <FMenuIdle+0x140>
   14564:	89 e8       	ldi	r24, 0x89	; 137
   14566:	9b e0       	ldi	r25, 0x0B	; 11
   14568:	ed b7       	in	r30, 0x3d	; 61
   1456a:	fe b7       	in	r31, 0x3e	; 62
   1456c:	92 83       	std	Z+2, r25	; 0x02
   1456e:	81 83       	std	Z+1, r24	; 0x01
   14570:	89 e1       	ldi	r24, 0x19	; 25
   14572:	95 e2       	ldi	r25, 0x25	; 37
   14574:	94 83       	std	Z+4, r25	; 0x04
   14576:	83 83       	std	Z+3, r24	; 0x03
   14578:	0e 94 f9 aa 	call	0x155f2	; 0x155f2 <sprintf_P>
	     sendMessage56();
   1457c:	0f 90       	pop	r0
   1457e:	0f 90       	pop	r0
   14580:	0f 90       	pop	r0
   14582:	0f 90       	pop	r0
   14584:	0e 94 04 80 	call	0x10008	; 0x10008 <sendMessage56>
         stMenuIdle=miDisplayProses;
   14588:	82 e0       	ldi	r24, 0x02	; 2
   1458a:	d1 c0       	rjmp	.+418    	; 0x1472e <FMenuIdle+0x30a>
	     break;
	case miDisplayProses:
	     if (IsBusyIdlePrinting==False){
   1458c:	80 91 b2 01 	lds	r24, 0x01B2
   14590:	88 23       	and	r24, r24
   14592:	09 f0       	breq	.+2      	; 0x14596 <FMenuIdle+0x172>
   14594:	95 c0       	rjmp	.+298    	; 0x146c0 <FMenuIdle+0x29c>
		     lcd_printf(3,1,PSTR("SedangProses"));
   14596:	83 e0       	ldi	r24, 0x03	; 3
   14598:	61 e0       	ldi	r22, 0x01	; 1
   1459a:	4c e0       	ldi	r20, 0x0C	; 12
   1459c:	55 e2       	ldi	r21, 0x25	; 37
   1459e:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
	         TimDisplay=0;
   145a2:	10 92 92 01 	sts	0x0192, r1
			 stMenuIdle=miWaitProses;
   145a6:	83 e0       	ldi	r24, 0x03	; 3
   145a8:	c2 c0       	rjmp	.+388    	; 0x1472e <FMenuIdle+0x30a>
         }else stMenuIdle=miScan;
	     break;
    case miWaitProses:
	     if (TimDisplay>1){
   145aa:	80 91 92 01 	lds	r24, 0x0192
   145ae:	82 30       	cpi	r24, 0x02	; 2
   145b0:	08 f4       	brcc	.+2      	; 0x145b4 <FMenuIdle+0x190>
   145b2:	bf c0       	rjmp	.+382    	; 0x14732 <FMenuIdle+0x30e>
		     if (IFType==IT_SLAVE)stMenuIdle=miSendMessage98;
   145b4:	80 91 00 01 	lds	r24, 0x0100
   145b8:	81 30       	cpi	r24, 0x01	; 1
   145ba:	11 f4       	brne	.+4      	; 0x145c0 <FMenuIdle+0x19c>
   145bc:	84 e0       	ldi	r24, 0x04	; 4
   145be:	b7 c0       	rjmp	.+366    	; 0x1472e <FMenuIdle+0x30a>
			 else
		     if (IFType==IT_STANDALONE)stMenuIdle=miPrintStandalone;
   145c0:	82 30       	cpi	r24, 0x02	; 2
   145c2:	09 f0       	breq	.+2      	; 0x145c6 <FMenuIdle+0x1a2>
   145c4:	b6 c0       	rjmp	.+364    	; 0x14732 <FMenuIdle+0x30e>
   145c6:	87 e0       	ldi	r24, 0x07	; 7
   145c8:	b2 c0       	rjmp	.+356    	; 0x1472e <FMenuIdle+0x30a>
		 }
	     break;
    case miPrintStandalone:
	     PrintStandaloneResult=PrintStandalone(ButtonID,False);
   145ca:	80 91 ab 02 	lds	r24, 0x02AB
   145ce:	60 e0       	ldi	r22, 0x00	; 0
   145d0:	0e 94 5e 45 	call	0x8abc	; 0x8abc <PrintStandalone>
	     if (PrintStandaloneResult==PS_PRINTED)stMenuIdle=miReady;
   145d4:	81 31       	cpi	r24, 0x11	; 17
   145d6:	09 f4       	brne	.+2      	; 0x145da <FMenuIdle+0x1b6>
   145d8:	a9 c0       	rjmp	.+338    	; 0x1472c <FMenuIdle+0x308>
		 else
		 if (PrintStandaloneResult==PS_NO_DATA)stMenuIdle=miDisplayNoTransaction;
   145da:	82 31       	cpi	r24, 0x12	; 18
   145dc:	09 f0       	breq	.+2      	; 0x145e0 <FMenuIdle+0x1bc>
   145de:	a9 c0       	rjmp	.+338    	; 0x14732 <FMenuIdle+0x30e>
   145e0:	88 e0       	ldi	r24, 0x08	; 8
   145e2:	a5 c0       	rjmp	.+330    	; 0x1472e <FMenuIdle+0x30a>
	     break;
    case miDisplayNoTransaction:
	     lcd_printf(3, 1,PSTR("Tidak Ada Transaksi "));
   145e4:	83 e0       	ldi	r24, 0x03	; 3
   145e6:	61 e0       	ldi	r22, 0x01	; 1
   145e8:	47 ef       	ldi	r20, 0xF7	; 247
   145ea:	54 e2       	ldi	r21, 0x24	; 36
   145ec:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
         TimDisplay=0;
   145f0:	10 92 92 01 	sts	0x0192, r1
		 stMenuIdle=miWaitDisplayNoTransaction;
   145f4:	89 e0       	ldi	r24, 0x09	; 9
   145f6:	9b c0       	rjmp	.+310    	; 0x1472e <FMenuIdle+0x30a>
	     break;
    case miWaitDisplayNoTransaction:
	     if (TimDisplay>1){
   145f8:	80 91 92 01 	lds	r24, 0x0192
   145fc:	82 30       	cpi	r24, 0x02	; 2
   145fe:	08 f4       	brcc	.+2      	; 0x14602 <FMenuIdle+0x1de>
   14600:	98 c0       	rjmp	.+304    	; 0x14732 <FMenuIdle+0x30e>
	         lcd_printf(3,1,PSTR("Ready...            "));
   14602:	83 e0       	ldi	r24, 0x03	; 3
   14604:	61 e0       	ldi	r22, 0x01	; 1
   14606:	42 ee       	ldi	r20, 0xE2	; 226
   14608:	54 e2       	ldi	r21, 0x24	; 36
   1460a:	32 c0       	rjmp	.+100    	; 0x14670 <FMenuIdle+0x24c>
		     stMenuIdle=miWaitReady;
			 TimDisplay=0;
		 }
	     break;
    case miSendMessage98:
	     lcd_printf(3,1,PSTR("Please Wait..       "));
   1460c:	83 e0       	ldi	r24, 0x03	; 3
   1460e:	61 e0       	ldi	r22, 0x01	; 1
   14610:	4d ec       	ldi	r20, 0xCD	; 205
   14612:	54 e2       	ldi	r21, 0x24	; 36
   14614:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
	     sendMessage98(ButtonID);
   14618:	80 91 ab 02 	lds	r24, 0x02AB
   1461c:	0e 94 99 7d 	call	0xfb32	; 0xfb32 <sendMessage98>
		 ProcTimeOut=0;
   14620:	10 92 bb 01 	sts	0x01BB, r1
		 stMenuIdle=miWaitPlease;
   14624:	85 e0       	ldi	r24, 0x05	; 5
   14626:	83 c0       	rjmp	.+262    	; 0x1472e <FMenuIdle+0x30a>
	     break;
    case miWaitPlease:	     
         if (ProcTimeOut>TIM_NO_RESPONSE){
   14628:	80 91 bb 01 	lds	r24, 0x01BB
   1462c:	8f 30       	cpi	r24, 0x0F	; 15
   1462e:	58 f0       	brcs	.+22     	; 0x14646 <FMenuIdle+0x222>
	         lcd_printf(3,1,PSTR("No Response..       "));
   14630:	83 e0       	ldi	r24, 0x03	; 3
   14632:	61 e0       	ldi	r22, 0x01	; 1
   14634:	48 eb       	ldi	r20, 0xB8	; 184
   14636:	54 e2       	ldi	r21, 0x24	; 36
   14638:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		     stMenuIdle=miNoResponse;
   1463c:	86 e0       	ldi	r24, 0x06	; 6
   1463e:	80 93 ac 02 	sts	0x02AC, r24
			 TimDisplay=0;		 
   14642:	10 92 92 01 	sts	0x0192, r1
		 }
		 if ((IsMessage99==True)||(IsMessage00==True)){
   14646:	80 91 9f 01 	lds	r24, 0x019F
   1464a:	81 30       	cpi	r24, 0x01	; 1
   1464c:	29 f0       	breq	.+10     	; 0x14658 <FMenuIdle+0x234>
   1464e:	80 91 9e 01 	lds	r24, 0x019E
   14652:	81 30       	cpi	r24, 0x01	; 1
   14654:	09 f0       	breq	.+2      	; 0x14658 <FMenuIdle+0x234>
   14656:	6d c0       	rjmp	.+218    	; 0x14732 <FMenuIdle+0x30e>
		     ClearMem(strOdometer);
   14658:	83 ec       	ldi	r24, 0xC3	; 195
   1465a:	93 e0       	ldi	r25, 0x03	; 3
   1465c:	0e 94 68 a5 	call	0x14ad0	; 0x14ad0 <ClearMem>
		     ClearMem(strLicPlate);
   14660:	8a ef       	ldi	r24, 0xFA	; 250
   14662:	98 e0       	ldi	r25, 0x08	; 8
   14664:	0e 94 68 a5 	call	0x14ad0	; 0x14ad0 <ClearMem>
	         lcd_printf(3,1,PSTR("Ready...            "));
   14668:	83 e0       	ldi	r24, 0x03	; 3
   1466a:	61 e0       	ldi	r22, 0x01	; 1
   1466c:	43 ea       	ldi	r20, 0xA3	; 163
   1466e:	54 e2       	ldi	r21, 0x24	; 36
   14670:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		     stMenuIdle=miWaitReady;
   14674:	8a e0       	ldi	r24, 0x0A	; 10
   14676:	80 93 ac 02 	sts	0x02AC, r24
			 TimDisplay=0;
   1467a:	10 92 92 01 	sts	0x0192, r1
   1467e:	59 c0       	rjmp	.+178    	; 0x14732 <FMenuIdle+0x30e>
			 }
	     break;
    case miNoResponse:
         if (TimDisplay>1){
   14680:	80 91 92 01 	lds	r24, 0x0192
   14684:	82 30       	cpi	r24, 0x02	; 2
   14686:	08 f4       	brcc	.+2      	; 0x1468a <FMenuIdle+0x266>
   14688:	54 c0       	rjmp	.+168    	; 0x14732 <FMenuIdle+0x30e>
	         lcd_printf(3,1,PSTR("Ready...            "));
   1468a:	83 e0       	ldi	r24, 0x03	; 3
   1468c:	61 e0       	ldi	r22, 0x01	; 1
   1468e:	4e e8       	ldi	r20, 0x8E	; 142
   14690:	54 e2       	ldi	r21, 0x24	; 36
   14692:	ee cf       	rjmp	.-36     	; 0x14670 <FMenuIdle+0x24c>
		     stMenuIdle=miWaitReady;
			 TimDisplay=0;
			 }	     
	     break;
    case miWaitReady:
         if (TimDisplay>1){
   14694:	80 91 92 01 	lds	r24, 0x0192
   14698:	82 30       	cpi	r24, 0x02	; 2
   1469a:	08 f4       	brcc	.+2      	; 0x1469e <FMenuIdle+0x27a>
   1469c:	4a c0       	rjmp	.+148    	; 0x14732 <FMenuIdle+0x30e>
	         lcd_printf(3,1,PSTR("                "));
   1469e:	83 e0       	ldi	r24, 0x03	; 3
   146a0:	61 e0       	ldi	r22, 0x01	; 1
   146a2:	4d e7       	ldi	r20, 0x7D	; 125
   146a4:	54 e2       	ldi	r21, 0x24	; 36
   146a6:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		     stMenuIdle=miReady;
   146aa:	8b e0       	ldi	r24, 0x0B	; 11
   146ac:	e4 cf       	rjmp	.-56     	; 0x14676 <FMenuIdle+0x252>
			 TimDisplay=0;
			 }	     
	     break;
    case miReady:
	     DisplayScreenIdle();
   146ae:	0e 94 59 49 	call	0x92b2	; 0x92b2 <DisplayScreenIdle>
		 if (IFType==IT_STANDALONE)IsNewPumpStatus=True;
   146b2:	80 91 00 01 	lds	r24, 0x0100
   146b6:	82 30       	cpi	r24, 0x02	; 2
   146b8:	19 f4       	brne	.+6      	; 0x146c0 <FMenuIdle+0x29c>
   146ba:	81 e0       	ldi	r24, 0x01	; 1
   146bc:	80 93 01 01 	sts	0x0101, r24
		 stMenuIdle=miScan;
   146c0:	81 e0       	ldi	r24, 0x01	; 1
   146c2:	35 c0       	rjmp	.+106    	; 0x1472e <FMenuIdle+0x30a>
	     break;
	case miRunTicket://Slave,Standalone
		 if (FMenuTicket()==MENU_DONE)
   146c4:	0e 94 c0 7d 	call	0xfb80	; 0xfb80 <FMenuTicket>
   146c8:	2f c0       	rjmp	.+94     	; 0x14728 <FMenuIdle+0x304>
		     stMenuIdle=miReady;
	     break;
	case miRunAuth://Slave,Standalone
		 if (FMenuAuthorization()==MENU_DONE)
   146ca:	0e 94 8f 8e 	call	0x11d1e	; 0x11d1e <FMenuAuthorization>
   146ce:	2c c0       	rjmp	.+88     	; 0x14728 <FMenuIdle+0x304>
		     stMenuIdle=miReady;
	     break;
		 
    case miRunLocalAccount://Slave
		 if (FMenuLocalAccount()==MENU_DONE)
   146d0:	0e 94 08 80 	call	0x10010	; 0x10010 <FMenuLocalAccount>
   146d4:	29 c0       	rjmp	.+82     	; 0x14728 <FMenuIdle+0x304>
		     stMenuIdle=miReady;
	     break;  
    case miRunChangeMOP://Slave
	     if (FMenuChangeMOP()==MENU_DONE)
   146d6:	0e 94 b2 88 	call	0x11164	; 0x11164 <FMenuChangeMOP>
   146da:	26 c0       	rjmp	.+76     	; 0x14728 <FMenuIdle+0x304>
		     stMenuIdle=miReady;
	     break;
    case miRunEDC://Slave
	     if (FMenuEDCTransaction()==MENU_DONE)
   146dc:	0e 94 17 7f 	call	0xfe2e	; 0xfe2e <FMenuEDCTransaction>
   146e0:	23 c0       	rjmp	.+70     	; 0x14728 <FMenuIdle+0x304>
		     stMenuIdle=miReady;
         break;
    case miRunLoyalty://Slave
	     if (FMenuLoyalty()==MENU_DONE)
   146e2:	0e 94 f9 8e 	call	0x11df2	; 0x11df2 <FMenuLoyalty>
   146e6:	20 c0       	rjmp	.+64     	; 0x14728 <FMenuIdle+0x304>
		     stMenuIdle=miReady;
	     break;
    case miRunReprint://Slave,Standalone
	     if (FMenuReprint()==MENU_DONE)
   146e8:	0e 94 db 8c 	call	0x119b6	; 0x119b6 <FMenuReprint>
   146ec:	1d c0       	rjmp	.+58     	; 0x14728 <FMenuIdle+0x304>
		     stMenuIdle=miReady;
	     break;
    case miRunViewFreeMessage://Slave
	     if (FViewFreeMessage()==MENU_DONE)
   146ee:	0e 94 7c 48 	call	0x90f8	; 0x90f8 <FViewFreeMessage>
   146f2:	1a c0       	rjmp	.+52     	; 0x14728 <FMenuIdle+0x304>
		     stMenuIdle=miReady;
	     break;
    case miClearTotalizer://Standalone
	     lcd_printf(3,1,PSTR("Clear Data Totalizer"));
   146f4:	83 e0       	ldi	r24, 0x03	; 3
   146f6:	61 e0       	ldi	r22, 0x01	; 1
   146f8:	48 e6       	ldi	r20, 0x68	; 104
   146fa:	54 e2       	ldi	r21, 0x24	; 36
   146fc:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
	     ResetTotalizer(TOTALIZER_LAST);
   14700:	80 e0       	ldi	r24, 0x00	; 0
   14702:	0e 94 16 29 	call	0x522c	; 0x522c <ResetTotalizer>
         ResetTotalizer(TOTALIZER_NOW);
   14706:	81 e0       	ldi	r24, 0x01	; 1
   14708:	0e 94 16 29 	call	0x522c	; 0x522c <ResetTotalizer>
   1470c:	0f c0       	rjmp	.+30     	; 0x1472c <FMenuIdle+0x308>
         stMenuIdle=miReady;	      
	     break;
    case miRunTotalizer://Standalone
	     lcd_printf(3,1,PSTR("TotalizerAll     "));
   1470e:	83 e0       	ldi	r24, 0x03	; 3
   14710:	61 e0       	ldi	r22, 0x01	; 1
   14712:	46 e5       	ldi	r20, 0x56	; 86
   14714:	54 e2       	ldi	r21, 0x24	; 36
   14716:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
	     SendSlaveCommand(SC_TOTALIZER,PUMP_ALL);
   1471a:	85 e0       	ldi	r24, 0x05	; 5
   1471c:	62 e1       	ldi	r22, 0x12	; 18
   1471e:	0e 94 3d 60 	call	0xc07a	; 0xc07a <SendSlaveCommand>
   14722:	04 c0       	rjmp	.+8      	; 0x1472c <FMenuIdle+0x308>
		 stMenuIdle=miReady;	      
	     break;
    case miRunTestChar:	     
 	     if (FTestChar()==MENU_DONE)
   14724:	0e 94 b6 48 	call	0x916c	; 0x916c <FTestChar>
   14728:	81 30       	cpi	r24, 0x01	; 1
   1472a:	19 f4       	brne	.+6      	; 0x14732 <FMenuIdle+0x30e>
         stMenuIdle=miReady;
   1472c:	8b e0       	ldi	r24, 0x0B	; 11
   1472e:	80 93 ac 02 	sts	0x02AC, r24
	     break;
	}
//----------SYSTEM_PROC--------------------------------

        //Bank InfoUpdated
        if (IsMessage21==True){
   14732:	80 91 a1 01 	lds	r24, 0x01A1
   14736:	81 30       	cpi	r24, 0x01	; 1
   14738:	21 f4       	brne	.+8      	; 0x14742 <FMenuIdle+0x31e>
		    IsMessage21=False;
   1473a:	10 92 a1 01 	sts	0x01A1, r1
			procMessage21();
   1473e:	0e 94 a8 1b 	call	0x3750	; 0x3750 <procMessage21>

        }
        //Transaction Status
        if (IsMessage00==True){
   14742:	80 91 9e 01 	lds	r24, 0x019E
   14746:	81 30       	cpi	r24, 0x01	; 1
   14748:	91 f4       	brne	.+36     	; 0x1476e <FMenuIdle+0x34a>
		    IsMessage00=False;
   1474a:	10 92 9e 01 	sts	0x019E, r1
*/
char procMessage00(){
     char Result,strSend[10];
	 Result=MSG00_NACK;
	 //Message57
	 if((rcv_trans[0]==0x01)&&(transLength==MSG00_LENGTH)){
   1474e:	20 91 1d 09 	lds	r18, 0x091D
   14752:	21 30       	cpi	r18, 0x01	; 1
   14754:	61 f4       	brne	.+24     	; 0x1476e <FMenuIdle+0x34a>
   14756:	80 91 8b 01 	lds	r24, 0x018B
   1475a:	90 91 8c 01 	lds	r25, 0x018C
   1475e:	8f 97       	sbiw	r24, 0x2f	; 47
   14760:	31 f4       	brne	.+12     	; 0x1476e <FMenuIdle+0x34a>

        }
        //Transaction Status
        if (IsMessage00==True){
		    IsMessage00=False;
			if (procMessage00()==MSG00_NO_PRINT){
   14762:	80 91 42 09 	lds	r24, 0x0942
   14766:	84 33       	cpi	r24, 0x34	; 52
   14768:	11 f4       	brne	.+4      	; 0x1476e <FMenuIdle+0x34a>
			    IsNoTransaction=True;
   1476a:	20 93 ab 01 	sts	0x01AB, r18
				}
		}
  
		//Send EDC Message Information;
		if (IsSendMessageEDC==True){
   1476e:	80 91 97 01 	lds	r24, 0x0197
   14772:	81 30       	cpi	r24, 0x01	; 1
   14774:	21 f4       	brne	.+8      	; 0x1477e <FMenuIdle+0x35a>
		    IsSendMessageEDC=False;
   14776:	10 92 97 01 	sts	0x0197, r1
			SendEDCMessage();
   1477a:	0e 94 b8 5f 	call	0xbf70	; 0xbf70 <SendEDCMessage>
		}
		if (IsEDCApproved==True){
   1477e:	80 91 99 01 	lds	r24, 0x0199
   14782:	81 30       	cpi	r24, 0x01	; 1
   14784:	21 f4       	brne	.+8      	; 0x1478e <FMenuIdle+0x36a>
		    IsEDCApproved=False;
   14786:	10 92 99 01 	sts	0x0199, r1
            sendMessage92();
   1478a:	0e 94 0f 7f 	call	0xfe1e	; 0xfe1e <sendMessage92>
		}
		if (IsVoidTransaction==True){
   1478e:	80 91 9b 01 	lds	r24, 0x019B
   14792:	81 30       	cpi	r24, 0x01	; 1
   14794:	21 f4       	brne	.+8      	; 0x1479e <FMenuIdle+0x37a>
		    IsVoidTransaction=False;
   14796:	10 92 9b 01 	sts	0x019B, r1
            sendMessage94();
   1479a:	0e 94 0b 7f 	call	0xfe16	; 0xfe16 <sendMessage94>
		}


        //Message99 Detection 
        if (IsMessage99==True){
   1479e:	10 91 9f 01 	lds	r17, 0x019F
   147a2:	11 30       	cpi	r17, 0x01	; 1
   147a4:	31 f4       	brne	.+12     	; 0x147b2 <FMenuIdle+0x38e>
	        IsMessage99=False;
   147a6:	10 92 9f 01 	sts	0x019F, r1
		    procMessage99();
   147aa:	0e 94 42 41 	call	0x8284	; 0x8284 <procMessage99>
		    IsPrinting=True;
   147ae:	10 93 ac 01 	sts	0x01AC, r17
		}
		//No Transaction
		if (IsNoTransaction==True){
   147b2:	80 91 ab 01 	lds	r24, 0x01AB
   147b6:	81 30       	cpi	r24, 0x01	; 1
   147b8:	41 f4       	brne	.+16     	; 0x147ca <FMenuIdle+0x3a6>
			IsNoTransaction=False;
   147ba:	10 92 ab 01 	sts	0x01AB, r1
			lcd_printf(3, 1,PSTR("Tidak Ada Transaksi "));
   147be:	83 e0       	ldi	r24, 0x03	; 3
   147c0:	61 e0       	ldi	r22, 0x01	; 1
   147c2:	41 e4       	ldi	r20, 0x41	; 65
   147c4:	54 e2       	ldi	r21, 0x24	; 36
   147c6:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
		}
        
		//Display Idle
		if (stMenuIdle==miScan){//||(stMenuIdle=miWaitPlease)){ 
   147ca:	80 91 ac 02 	lds	r24, 0x02AC
   147ce:	81 30       	cpi	r24, 0x01	; 1
   147d0:	11 f4       	brne	.+4      	; 0x147d6 <FMenuIdle+0x3b2>
		    DisplayIdle();			
   147d2:	0e 94 50 5e 	call	0xbca0	; 0xbca0 <DisplayIdle>
			}        

        //Display FreeMessage
		if (stMenuIdle==miScan){ 
   147d6:	80 91 ac 02 	lds	r24, 0x02AC
   147da:	81 30       	cpi	r24, 0x01	; 1
   147dc:	59 f4       	brne	.+22     	; 0x147f4 <FMenuIdle+0x3d0>
		    if (IsMessage09==True){
   147de:	80 91 a3 01 	lds	r24, 0x01A3
   147e2:	81 30       	cpi	r24, 0x01	; 1
   147e4:	39 f4       	brne	.+14     	; 0x147f4 <FMenuIdle+0x3d0>
			    IsMessage09=False;
   147e6:	10 92 a3 01 	sts	0x01A3, r1
				procMessage09();
   147ea:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <procMessage09>
				stMenuIdle=miRunViewFreeMessage;
   147ee:	83 e1       	ldi	r24, 0x13	; 19
   147f0:	80 93 ac 02 	sts	0x02AC, r24
			   }
			}

        //LocalAccount Scanning
		if ((stMenuIdle==miScan)&&(IsRFIDDetected==True)){
   147f4:	80 91 ac 02 	lds	r24, 0x02AC
   147f8:	81 30       	cpi	r24, 0x01	; 1
   147fa:	71 f4       	brne	.+28     	; 0x14818 <FMenuIdle+0x3f4>
   147fc:	80 91 98 01 	lds	r24, 0x0198
   14800:	81 30       	cpi	r24, 0x01	; 1
   14802:	51 f4       	brne	.+20     	; 0x14818 <FMenuIdle+0x3f4>
		    IsRFIDDetected=False;
   14804:	10 92 98 01 	sts	0x0198, r1
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   14808:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   1480a:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   1480c:	82 e0       	ldi	r24, 0x02	; 2
   1480e:	80 93 bc 01 	sts	0x01BC, r24

        //LocalAccount Scanning
		if ((stMenuIdle==miScan)&&(IsRFIDDetected==True)){
		    IsRFIDDetected=False;
		    system_beep(2);           
			stMenuIdle=miRunLocalAccount;
   14812:	8e e0       	ldi	r24, 0x0E	; 14
   14814:	80 93 ac 02 	sts	0x02AC, r24
		}
        //Print Spooling
		if (IsMessage81==True){
   14818:	10 91 a6 01 	lds	r17, 0x01A6
   1481c:	11 30       	cpi	r17, 0x01	; 1
   1481e:	41 f4       	brne	.+16     	; 0x14830 <FMenuIdle+0x40c>
		    IsMessage81=False;
   14820:	10 92 a6 01 	sts	0x01A6, r1
			//Spooling HFCS 0000 : Header, Footer, Copy , Scrool [Copy:16x max]
			cmdPrint=procMessage81();
   14824:	0e 94 b9 18 	call	0x3172	; 0x3172 <procMessage81>
   14828:	80 93 b5 01 	sts	0x01B5, r24
			IsFreePrinting=True;
   1482c:	10 93 a8 01 	sts	0x01A8, r17
         }

    //SystemService
      systemGenerateReport();
   14830:	0e 94 8f 34 	call	0x691e	; 0x691e <systemGenerateReport>
      systemPrinting();
   14834:	0e 94 00 9e 	call	0x13c00	; 0x13c00 <systemPrinting>
	  systemEDC();
	  systemConfigProtocol();
   14838:	0e 94 ec a1 	call	0x143d8	; 0x143d8 <systemConfigProtocol>
	  //systemGeniusProtocol(); //AKR-->Protocol disabled
}
   1483c:	1f 91       	pop	r17
   1483e:	08 95       	ret

00014840 <lcd_command>:
	lcd_command(0x0c);
	lcd_command(0x06);
}

void lcd_command(unsigned char __chr){
	_LCD_PORT = __chr & 0xF0;
   14840:	98 2f       	mov	r25, r24
   14842:	90 7f       	andi	r25, 0xF0	; 240
   14844:	95 bb       	out	0x15, r25	; 21
	cbi(_LCD_PORT, _LCD_RS);
   14846:	ab 98       	cbi	0x15, 3	; 21
	sbi(_LCD_PORT, _LCD_E);
   14848:	a9 9a       	sbi	0x15, 1	; 21
   1484a:	48 ee       	ldi	r20, 0xE8	; 232
   1484c:	53 e0       	ldi	r21, 0x03	; 3
   1484e:	fa 01       	movw	r30, r20
   14850:	31 97       	sbiw	r30, 0x01	; 1
   14852:	f1 f7       	brne	.-4      	; 0x14850 <lcd_command+0x10>
	_LCD_BUSY;
	cbi(_LCD_PORT, _LCD_E);
   14854:	a9 98       	cbi	0x15, 1	; 21
   14856:	fa 01       	movw	r30, r20
   14858:	31 97       	sbiw	r30, 0x01	; 1
   1485a:	f1 f7       	brne	.-4      	; 0x14858 <lcd_command+0x18>
	_LCD_BUSY;

	_LCD_PORT = (__chr & 0x0F) << 4;
   1485c:	28 2f       	mov	r18, r24
   1485e:	30 e0       	ldi	r19, 0x00	; 0
   14860:	94 e0       	ldi	r25, 0x04	; 4
   14862:	22 0f       	add	r18, r18
   14864:	33 1f       	adc	r19, r19
   14866:	9a 95       	dec	r25
   14868:	e1 f7       	brne	.-8      	; 0x14862 <lcd_command+0x22>
   1486a:	25 bb       	out	0x15, r18	; 21
	cbi(_LCD_PORT, _LCD_RS);
   1486c:	ab 98       	cbi	0x15, 3	; 21
	sbi(_LCD_PORT, _LCD_E);
   1486e:	a9 9a       	sbi	0x15, 1	; 21
   14870:	fa 01       	movw	r30, r20
   14872:	31 97       	sbiw	r30, 0x01	; 1
   14874:	f1 f7       	brne	.-4      	; 0x14872 <lcd_command+0x32>
	_LCD_BUSY;
	cbi(_LCD_PORT, _LCD_E);
   14876:	a9 98       	cbi	0x15, 1	; 21
   14878:	fa 01       	movw	r30, r20
   1487a:	31 97       	sbiw	r30, 0x01	; 1
   1487c:	f1 f7       	brne	.-4      	; 0x1487a <lcd_command+0x3a>
	_LCD_BUSY;
	_LCD_BUSY;
	if (__chr==0x01) _delay_ms(50);
   1487e:	fa 01       	movw	r30, r20
   14880:	31 97       	sbiw	r30, 0x01	; 1
   14882:	f1 f7       	brne	.-4      	; 0x14880 <lcd_command+0x40>
   14884:	81 30       	cpi	r24, 0x01	; 1
   14886:	21 f4       	brne	.+8      	; 0x14890 <lcd_command+0x50>
   14888:	84 ed       	ldi	r24, 0xD4	; 212
   1488a:	90 e3       	ldi	r25, 0x30	; 48
   1488c:	01 97       	sbiw	r24, 0x01	; 1
   1488e:	f1 f7       	brne	.-4      	; 0x1488c <lcd_command+0x4c>
   14890:	08 95       	ret

00014892 <lcd_init>:
   14892:	86 ea       	ldi	r24, 0xA6	; 166
   14894:	9e e0       	ldi	r25, 0x0E	; 14
   14896:	01 97       	sbiw	r24, 0x01	; 1
   14898:	f1 f7       	brne	.-4      	; 0x14896 <lcd_init+0x4>

#define _LCD_BUSY	_delay_ms(4);

void lcd_init(void){
	_delay_ms(15);
	_LCD_PORT = 0x00;
   1489a:	15 ba       	out	0x15, r1	; 21
	_LCD_DDR |= (1 << _LCD_D7) | (1 << _LCD_D6) | (1 << _LCD_D5) | (1 << _LCD_D4);
   1489c:	84 b3       	in	r24, 0x14	; 20
   1489e:	80 6f       	ori	r24, 0xF0	; 240
   148a0:	84 bb       	out	0x14, r24	; 20
	_LCD_DDR |= (1 << _LCD_E) | (1 << _LCD_RW) | (1 << _LCD_RS);
   148a2:	84 b3       	in	r24, 0x14	; 20
   148a4:	8e 60       	ori	r24, 0x0E	; 14
   148a6:	84 bb       	out	0x14, r24	; 20

	_LCD_PORT = 0x30;
   148a8:	20 e3       	ldi	r18, 0x30	; 48
   148aa:	25 bb       	out	0x15, r18	; 21
	sbi(_LCD_PORT, _LCD_E);
   148ac:	a9 9a       	sbi	0x15, 1	; 21
   148ae:	88 ee       	ldi	r24, 0xE8	; 232
   148b0:	93 e0       	ldi	r25, 0x03	; 3
   148b2:	fc 01       	movw	r30, r24
   148b4:	31 97       	sbiw	r30, 0x01	; 1
   148b6:	f1 f7       	brne	.-4      	; 0x148b4 <lcd_init+0x22>
	_LCD_BUSY;
	cbi(_LCD_PORT, _LCD_E);
   148b8:	a9 98       	cbi	0x15, 1	; 21
   148ba:	fc 01       	movw	r30, r24
   148bc:	31 97       	sbiw	r30, 0x01	; 1
   148be:	f1 f7       	brne	.-4      	; 0x148bc <lcd_init+0x2a>
	_LCD_BUSY;

	_LCD_PORT = 0x30;
   148c0:	25 bb       	out	0x15, r18	; 21
	sbi(_LCD_PORT, _LCD_E);
   148c2:	a9 9a       	sbi	0x15, 1	; 21
   148c4:	fc 01       	movw	r30, r24
   148c6:	31 97       	sbiw	r30, 0x01	; 1
   148c8:	f1 f7       	brne	.-4      	; 0x148c6 <lcd_init+0x34>
	_LCD_BUSY;
	cbi(_LCD_PORT, _LCD_E);
   148ca:	a9 98       	cbi	0x15, 1	; 21
   148cc:	fc 01       	movw	r30, r24
   148ce:	31 97       	sbiw	r30, 0x01	; 1
   148d0:	f1 f7       	brne	.-4      	; 0x148ce <lcd_init+0x3c>
	_LCD_BUSY;

	_LCD_PORT = 0x30;
   148d2:	25 bb       	out	0x15, r18	; 21
	sbi(_LCD_PORT, _LCD_E);
   148d4:	a9 9a       	sbi	0x15, 1	; 21
   148d6:	fc 01       	movw	r30, r24
   148d8:	31 97       	sbiw	r30, 0x01	; 1
   148da:	f1 f7       	brne	.-4      	; 0x148d8 <lcd_init+0x46>
	_LCD_BUSY;
	cbi(_LCD_PORT, _LCD_E);
   148dc:	a9 98       	cbi	0x15, 1	; 21
   148de:	fc 01       	movw	r30, r24
   148e0:	31 97       	sbiw	r30, 0x01	; 1
   148e2:	f1 f7       	brne	.-4      	; 0x148e0 <lcd_init+0x4e>
	_LCD_BUSY;

	_LCD_PORT = 0x20;
   148e4:	20 e2       	ldi	r18, 0x20	; 32
   148e6:	25 bb       	out	0x15, r18	; 21
	sbi(_LCD_PORT, _LCD_E);
   148e8:	a9 9a       	sbi	0x15, 1	; 21
   148ea:	fc 01       	movw	r30, r24
   148ec:	31 97       	sbiw	r30, 0x01	; 1
   148ee:	f1 f7       	brne	.-4      	; 0x148ec <lcd_init+0x5a>
	_LCD_BUSY;
	cbi(_LCD_PORT, _LCD_E);
   148f0:	a9 98       	cbi	0x15, 1	; 21
   148f2:	01 97       	sbiw	r24, 0x01	; 1
   148f4:	f1 f7       	brne	.-4      	; 0x148f2 <lcd_init+0x60>
	_LCD_BUSY;

	_LIGHT_PORT = 0x01;
   148f6:	81 e0       	ldi	r24, 0x01	; 1
   148f8:	80 93 65 00 	sts	0x0065, r24
	_LIGHT_DDR |= (1 << _LIGHT_PIN);
   148fc:	e4 e6       	ldi	r30, 0x64	; 100
   148fe:	f0 e0       	ldi	r31, 0x00	; 0
   14900:	80 81       	ld	r24, Z
   14902:	82 60       	ori	r24, 0x02	; 2
   14904:	80 83       	st	Z, r24

	lcd_command(0x28);
   14906:	88 e2       	ldi	r24, 0x28	; 40
   14908:	0e 94 20 a4 	call	0x14840	; 0x14840 <lcd_command>
	lcd_command(0x0c);
   1490c:	8c e0       	ldi	r24, 0x0C	; 12
   1490e:	0e 94 20 a4 	call	0x14840	; 0x14840 <lcd_command>
	lcd_command(0x06);
   14912:	86 e0       	ldi	r24, 0x06	; 6
   14914:	0e 94 20 a4 	call	0x14840	; 0x14840 <lcd_command>
}
   14918:	08 95       	ret

0001491a <_lcd>:
	if (__chr==0x01) _delay_ms(50);

}

void _lcd(unsigned char __chr){
	_LCD_PORT =((__chr & 0xF0));
   1491a:	28 2f       	mov	r18, r24
   1491c:	20 7f       	andi	r18, 0xF0	; 240
   1491e:	25 bb       	out	0x15, r18	; 21
	sbi(_LCD_PORT, _LCD_RS);
   14920:	ab 9a       	sbi	0x15, 3	; 21
	sbi(_LCD_PORT, _LCD_E);
   14922:	a9 9a       	sbi	0x15, 1	; 21
	cbi(_LCD_PORT, _LCD_E);
   14924:	a9 98       	cbi	0x15, 1	; 21

	_LCD_PORT = (((__chr & 0x0F) << 4));
   14926:	90 e0       	ldi	r25, 0x00	; 0
   14928:	24 e0       	ldi	r18, 0x04	; 4
   1492a:	88 0f       	add	r24, r24
   1492c:	99 1f       	adc	r25, r25
   1492e:	2a 95       	dec	r18
   14930:	e1 f7       	brne	.-8      	; 0x1492a <_lcd+0x10>
   14932:	85 bb       	out	0x15, r24	; 21
	sbi(_LCD_PORT, _LCD_RS);
   14934:	ab 9a       	sbi	0x15, 3	; 21
	sbi(_LCD_PORT, _LCD_E);
   14936:	a9 9a       	sbi	0x15, 1	; 21
	cbi(_LCD_PORT, _LCD_E);
   14938:	a9 98       	cbi	0x15, 1	; 21
   1493a:	88 ee       	ldi	r24, 0xE8	; 232
   1493c:	93 e0       	ldi	r25, 0x03	; 3
   1493e:	01 97       	sbiw	r24, 0x01	; 1
   14940:	f1 f7       	brne	.-4      	; 0x1493e <_lcd+0x24>
	_LCD_BUSY;
	_delay_ms(1);
}
   14942:	8a ef       	ldi	r24, 0xFA	; 250
   14944:	90 e0       	ldi	r25, 0x00	; 0
   14946:	01 97       	sbiw	r24, 0x01	; 1
   14948:	f1 f7       	brne	.-4      	; 0x14946 <_lcd+0x2c>
   1494a:	08 95       	ret

0001494c <lcd_string>:
     lcd_printf(2,1,PSTR("                    "));
     lcd_printf(3,1,PSTR("                    "));
     lcd_printf(4,1,PSTR("                    "));
}

void lcd_string(char *__string){
   1494c:	cf 93       	push	r28
   1494e:	df 93       	push	r29
   14950:	ec 01       	movw	r28, r24
   14952:	03 c0       	rjmp	.+6      	; 0x1495a <lcd_string+0xe>
	while(*__string)
		_lcd(*__string++);
   14954:	21 96       	adiw	r28, 0x01	; 1
   14956:	0e 94 8d a4 	call	0x1491a	; 0x1491a <_lcd>
     lcd_printf(3,1,PSTR("                    "));
     lcd_printf(4,1,PSTR("                    "));
}

void lcd_string(char *__string){
	while(*__string)
   1495a:	88 81       	ld	r24, Y
   1495c:	88 23       	and	r24, r24
   1495e:	d1 f7       	brne	.-12     	; 0x14954 <lcd_string+0x8>
		_lcd(*__string++);
}
   14960:	df 91       	pop	r29
   14962:	cf 91       	pop	r28
   14964:	08 95       	ret

00014966 <lcd_xy>:

void lcd_xy(unsigned char __x, unsigned char __y){
	switch(__x){
   14966:	82 30       	cpi	r24, 0x02	; 2
   14968:	69 f0       	breq	.+26     	; 0x14984 <lcd_xy+0x1e>
   1496a:	83 30       	cpi	r24, 0x03	; 3
   1496c:	18 f4       	brcc	.+6      	; 0x14974 <lcd_xy+0xe>
   1496e:	81 30       	cpi	r24, 0x01	; 1
   14970:	a9 f4       	brne	.+42     	; 0x1499c <lcd_xy+0x36>
   14972:	05 c0       	rjmp	.+10     	; 0x1497e <lcd_xy+0x18>
   14974:	83 30       	cpi	r24, 0x03	; 3
   14976:	49 f0       	breq	.+18     	; 0x1498a <lcd_xy+0x24>
   14978:	84 30       	cpi	r24, 0x04	; 4
   1497a:	81 f4       	brne	.+32     	; 0x1499c <lcd_xy+0x36>
   1497c:	0b c0       	rjmp	.+22     	; 0x14994 <lcd_xy+0x2e>
		case 1:
			lcd_command(0x80 + __y - 1);
   1497e:	86 2f       	mov	r24, r22
   14980:	81 58       	subi	r24, 0x81	; 129
   14982:	05 c0       	rjmp	.+10     	; 0x1498e <lcd_xy+0x28>
			break;
		case 2:
			lcd_command(0xC0 + __y - 1);
   14984:	86 2f       	mov	r24, r22
   14986:	81 54       	subi	r24, 0x41	; 65
   14988:	02 c0       	rjmp	.+4      	; 0x1498e <lcd_xy+0x28>
			break;
		case 3:
			lcd_command(0x94 + __y - 1);
   1498a:	86 2f       	mov	r24, r22
   1498c:	8d 56       	subi	r24, 0x6D	; 109
   1498e:	0e 94 20 a4 	call	0x14840	; 0x14840 <lcd_command>
   14992:	08 95       	ret
			break;
		case 4:
			lcd_command(0xD4 + __y - 1);
   14994:	86 2f       	mov	r24, r22
   14996:	8d 52       	subi	r24, 0x2D	; 45
   14998:	0e 94 20 a4 	call	0x14840	; 0x14840 <lcd_command>
   1499c:	08 95       	ret

0001499e <lcd_print>:
	 for (i=0;i<strlen(string);i++){
          string[i]=0;
	 }     
}

void lcd_print(unsigned char __x, unsigned char __y, char *__string){
   1499e:	df 92       	push	r13
   149a0:	ef 92       	push	r14
   149a2:	ff 92       	push	r15
   149a4:	0f 93       	push	r16
   149a6:	1f 93       	push	r17
   149a8:	cf 93       	push	r28
   149aa:	df 93       	push	r29
   149ac:	06 2f       	mov	r16, r22
   149ae:	d4 2e       	mov	r13, r20
   149b0:	15 2f       	mov	r17, r21
    char yPos,iPos=0;//Modified by Iyan string [20] maks
	lcd_xy(__x, __y);
   149b2:	0e 94 b3 a4 	call	0x14966	; 0x14966 <lcd_xy>
   149b6:	2d 2d       	mov	r18, r13
   149b8:	31 2f       	mov	r19, r17
   149ba:	c9 01       	movw	r24, r18
   149bc:	ec 01       	movw	r28, r24
	iPos=0;
	while((*__string)&&(iPos<=(20-__y))){
   149be:	34 e1       	ldi	r19, 0x14	; 20
   149c0:	e3 2e       	mov	r14, r19
   149c2:	f1 2c       	mov	r15, r1
   149c4:	e0 1a       	sub	r14, r16
   149c6:	f1 08       	sbc	r15, r1
   149c8:	04 c0       	rjmp	.+8      	; 0x149d2 <lcd_print+0x34>
		_lcd(*__string);__string++;
   149ca:	82 2f       	mov	r24, r18
   149cc:	0e 94 8d a4 	call	0x1491a	; 0x1491a <_lcd>
   149d0:	21 96       	adiw	r28, 0x01	; 1
   149d2:	9e 01       	movw	r18, r28
   149d4:	2d 19       	sub	r18, r13
   149d6:	82 2f       	mov	r24, r18

void lcd_print(unsigned char __x, unsigned char __y, char *__string){
    char yPos,iPos=0;//Modified by Iyan string [20] maks
	lcd_xy(__x, __y);
	iPos=0;
	while((*__string)&&(iPos<=(20-__y))){
   149d8:	28 81       	ld	r18, Y
   149da:	22 23       	and	r18, r18
   149dc:	21 f0       	breq	.+8      	; 0x149e6 <lcd_print+0x48>
   149de:	90 e0       	ldi	r25, 0x00	; 0
   149e0:	e8 16       	cp	r14, r24
   149e2:	f9 06       	cpc	r15, r25
   149e4:	94 f7       	brge	.-28     	; 0x149ca <lcd_print+0x2c>
		_lcd(*__string);__string++;
		iPos++;
		}    
}
   149e6:	df 91       	pop	r29
   149e8:	cf 91       	pop	r28
   149ea:	1f 91       	pop	r17
   149ec:	0f 91       	pop	r16
   149ee:	ff 90       	pop	r15
   149f0:	ef 90       	pop	r14
   149f2:	df 90       	pop	r13
   149f4:	08 95       	ret

000149f6 <lcd_printf>:

void lcd_printf(unsigned char __x, unsigned char __y, char *__string){
   149f6:	df 92       	push	r13
   149f8:	ef 92       	push	r14
   149fa:	ff 92       	push	r15
   149fc:	0f 93       	push	r16
   149fe:	1f 93       	push	r17
   14a00:	cf 93       	push	r28
   14a02:	df 93       	push	r29
   14a04:	06 2f       	mov	r16, r22
   14a06:	d4 2e       	mov	r13, r20
   14a08:	15 2f       	mov	r17, r21
    char iPos=0;
	lcd_xy(__x, __y);
   14a0a:	0e 94 b3 a4 	call	0x14966	; 0x14966 <lcd_xy>
   14a0e:	8d 2d       	mov	r24, r13
   14a10:	91 2f       	mov	r25, r17
   14a12:	fc 01       	movw	r30, r24
   14a14:	ef 01       	movw	r28, r30
	iPos=0;
	while((pgm_read_byte(&(*__string)))&&(iPos<=(20-__y))){
   14a16:	44 e1       	ldi	r20, 0x14	; 20
   14a18:	e4 2e       	mov	r14, r20
   14a1a:	f1 2c       	mov	r15, r1
   14a1c:	e0 1a       	sub	r14, r16
   14a1e:	f1 08       	sbc	r15, r1
   14a20:	04 c0       	rjmp	.+8      	; 0x14a2a <lcd_printf+0x34>
		_lcd(pgm_read_byte(&(*__string)));
   14a22:	82 2f       	mov	r24, r18
   14a24:	0e 94 8d a4 	call	0x1491a	; 0x1491a <_lcd>
		__string++;
   14a28:	21 96       	adiw	r28, 0x01	; 1
   14a2a:	9e 01       	movw	r18, r28
   14a2c:	2d 19       	sub	r18, r13
   14a2e:	82 2f       	mov	r24, r18

void lcd_printf(unsigned char __x, unsigned char __y, char *__string){
    char iPos=0;
	lcd_xy(__x, __y);
	iPos=0;
	while((pgm_read_byte(&(*__string)))&&(iPos<=(20-__y))){
   14a30:	fe 01       	movw	r30, r28
   14a32:	24 91       	lpm	r18, Z+
   14a34:	22 23       	and	r18, r18
   14a36:	21 f0       	breq	.+8      	; 0x14a40 <lcd_printf+0x4a>
   14a38:	90 e0       	ldi	r25, 0x00	; 0
   14a3a:	e8 16       	cp	r14, r24
   14a3c:	f9 06       	cpc	r15, r25
   14a3e:	8c f7       	brge	.-30     	; 0x14a22 <lcd_printf+0x2c>
		_lcd(pgm_read_byte(&(*__string)));
		__string++;
		iPos++;
		}
}
   14a40:	df 91       	pop	r29
   14a42:	cf 91       	pop	r28
   14a44:	1f 91       	pop	r17
   14a46:	0f 91       	pop	r16
   14a48:	ff 90       	pop	r15
   14a4a:	ef 90       	pop	r14
   14a4c:	df 90       	pop	r13
   14a4e:	08 95       	ret

00014a50 <lcd_clear>:
	_LCD_BUSY;
	_delay_ms(1);
}

void lcd_clear(){
     lcd_printf(1,1,PSTR("                    "));
   14a50:	81 e0       	ldi	r24, 0x01	; 1
   14a52:	61 e0       	ldi	r22, 0x01	; 1
   14a54:	41 e6       	ldi	r20, 0x61	; 97
   14a56:	55 e2       	ldi	r21, 0x25	; 37
   14a58:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
     lcd_printf(2,1,PSTR("                    "));
   14a5c:	82 e0       	ldi	r24, 0x02	; 2
   14a5e:	61 e0       	ldi	r22, 0x01	; 1
   14a60:	4c e4       	ldi	r20, 0x4C	; 76
   14a62:	55 e2       	ldi	r21, 0x25	; 37
   14a64:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
     lcd_printf(3,1,PSTR("                    "));
   14a68:	83 e0       	ldi	r24, 0x03	; 3
   14a6a:	61 e0       	ldi	r22, 0x01	; 1
   14a6c:	47 e3       	ldi	r20, 0x37	; 55
   14a6e:	55 e2       	ldi	r21, 0x25	; 37
   14a70:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
     lcd_printf(4,1,PSTR("                    "));
   14a74:	84 e0       	ldi	r24, 0x04	; 4
   14a76:	61 e0       	ldi	r22, 0x01	; 1
   14a78:	42 e2       	ldi	r20, 0x22	; 34
   14a7a:	55 e2       	ldi	r21, 0x25	; 37
   14a7c:	0e 94 fb a4 	call	0x149f6	; 0x149f6 <lcd_printf>
}
   14a80:	08 95       	ret

00014a82 <lcd_put>:
		__string++;
		iPos++;
		}
}

void lcd_put(unsigned char __x, unsigned char __y, unsigned char __chr){
   14a82:	1f 93       	push	r17
   14a84:	14 2f       	mov	r17, r20
	lcd_xy(__x, __y);
   14a86:	0e 94 b3 a4 	call	0x14966	; 0x14966 <lcd_xy>
	_lcd(__chr);
   14a8a:	81 2f       	mov	r24, r17
   14a8c:	0e 94 8d a4 	call	0x1491a	; 0x1491a <_lcd>
}
   14a90:	1f 91       	pop	r17
   14a92:	08 95       	ret

00014a94 <lcd_cgram>:

void lcd_cgram(unsigned char location, char *ptr){
   14a94:	0f 93       	push	r16
   14a96:	1f 93       	push	r17
   14a98:	cf 93       	push	r28
   14a9a:	df 93       	push	r29
   14a9c:	8b 01       	movw	r16, r22
	unsigned char i;
    if(location < 8){
   14a9e:	88 30       	cpi	r24, 0x08	; 8
   14aa0:	90 f4       	brcc	.+36     	; 0x14ac6 <lcd_cgram+0x32>
		lcd_command(0x40 + (location * 8));
   14aa2:	88 0f       	add	r24, r24
   14aa4:	88 0f       	add	r24, r24
   14aa6:	88 0f       	add	r24, r24
   14aa8:	80 5c       	subi	r24, 0xC0	; 192
   14aaa:	0e 94 20 a4 	call	0x14840	; 0x14840 <lcd_command>
   14aae:	c0 e0       	ldi	r28, 0x00	; 0
   14ab0:	d0 e0       	ldi	r29, 0x00	; 0
		for(i = 0; i < 8; i++)
			_lcd(ptr[i]);
   14ab2:	f8 01       	movw	r30, r16
   14ab4:	ec 0f       	add	r30, r28
   14ab6:	fd 1f       	adc	r31, r29
   14ab8:	80 81       	ld	r24, Z
   14aba:	0e 94 8d a4 	call	0x1491a	; 0x1491a <_lcd>
   14abe:	21 96       	adiw	r28, 0x01	; 1

void lcd_cgram(unsigned char location, char *ptr){
	unsigned char i;
    if(location < 8){
		lcd_command(0x40 + (location * 8));
		for(i = 0; i < 8; i++)
   14ac0:	c8 30       	cpi	r28, 0x08	; 8
   14ac2:	d1 05       	cpc	r29, r1
   14ac4:	b1 f7       	brne	.-20     	; 0x14ab2 <lcd_cgram+0x1e>
			_lcd(ptr[i]);
	}
}
   14ac6:	df 91       	pop	r29
   14ac8:	cf 91       	pop	r28
   14aca:	1f 91       	pop	r17
   14acc:	0f 91       	pop	r16
   14ace:	08 95       	ret

00014ad0 <ClearMem>:
			lcd_command(0xD4 + __y - 1);
			break;
	}
}

void ClearMem(char *string){
   14ad0:	cf 93       	push	r28
   14ad2:	df 93       	push	r29
   14ad4:	20 e0       	ldi	r18, 0x00	; 0
   14ad6:	04 c0       	rjmp	.+8      	; 0x14ae0 <ClearMem+0x10>
     char i;
	 for (i=0;i<strlen(string);i++){
          string[i]=0;
   14ad8:	c8 0f       	add	r28, r24
   14ada:	d9 1f       	adc	r29, r25
   14adc:	18 82       	st	Y, r1
	}
}

void ClearMem(char *string){
     char i;
	 for (i=0;i<strlen(string);i++){
   14ade:	2f 5f       	subi	r18, 0xFF	; 255
   14ae0:	c2 2f       	mov	r28, r18
   14ae2:	d0 e0       	ldi	r29, 0x00	; 0
   14ae4:	fc 01       	movw	r30, r24
   14ae6:	01 90       	ld	r0, Z+
   14ae8:	00 20       	and	r0, r0
   14aea:	e9 f7       	brne	.-6      	; 0x14ae6 <ClearMem+0x16>
   14aec:	31 97       	sbiw	r30, 0x01	; 1
   14aee:	e8 1b       	sub	r30, r24
   14af0:	f9 0b       	sbc	r31, r25
   14af2:	ce 17       	cp	r28, r30
   14af4:	df 07       	cpc	r29, r31
   14af6:	80 f3       	brcs	.-32     	; 0x14ad8 <ClearMem+0x8>
          string[i]=0;
	 }     
}
   14af8:	df 91       	pop	r29
   14afa:	cf 91       	pop	r28
   14afc:	08 95       	ret

00014afe <_key_hit>:
													 {'7', 'P', 'Q', 'R', 'S', '\0'},
											         {'8', 'T', 'U', 'V', '\0'}, 
													 {'9', 'W', 'X', 'Y', 'Z', '\0'}}};
const unsigned char __maxchar[10] PROGMEM = {2, 4, 3, 3, 3, 3, 3, 4, 3, 4};

char _key_hit(void){
   14afe:	df 93       	push	r29
   14b00:	cf 93       	push	r28
   14b02:	00 d0       	rcall	.+0      	; 0x14b04 <_key_hit+0x6>
   14b04:	00 d0       	rcall	.+0      	; 0x14b06 <_key_hit+0x8>
   14b06:	cd b7       	in	r28, 0x3d	; 61
   14b08:	de b7       	in	r29, 0x3e	; 62
	unsigned char	i, keyhit=0x00;
	unsigned char	outmap[4] = {0xef, 0xdf, 0xbf, 0x7f};
   14b0a:	8f ee       	ldi	r24, 0xEF	; 239
   14b0c:	89 83       	std	Y+1, r24	; 0x01
   14b0e:	8f ed       	ldi	r24, 0xDF	; 223
   14b10:	8a 83       	std	Y+2, r24	; 0x02
   14b12:	8f eb       	ldi	r24, 0xBF	; 191
   14b14:	8b 83       	std	Y+3, r24	; 0x03
   14b16:	8f e7       	ldi	r24, 0x7F	; 127
   14b18:	8c 83       	std	Y+4, r24	; 0x04
   14b1a:	de 01       	movw	r26, r28
   14b1c:	11 96       	adiw	r26, 0x01	; 1
   14b1e:	2a ef       	ldi	r18, 0xFA	; 250
   14b20:	30 e0       	ldi	r19, 0x00	; 0

	for(i=0; i<4; i++){
   14b22:	ae 01       	movw	r20, r28
   14b24:	4b 5f       	subi	r20, 0xFB	; 251
   14b26:	5f 4f       	sbci	r21, 0xFF	; 255
   14b28:	c9 01       	movw	r24, r18
   14b2a:	01 97       	sbiw	r24, 0x01	; 1
   14b2c:	f1 f7       	brne	.-4      	; 0x14b2a <_key_hit+0x2c>
		_delay_ms(1);
		_KEY_PORT = outmap[i];
   14b2e:	8c 91       	ld	r24, X
   14b30:	80 93 62 00 	sts	0x0062, r24
   14b34:	f9 01       	movw	r30, r18
   14b36:	31 97       	sbiw	r30, 0x01	; 1
   14b38:	f1 f7       	brne	.-4      	; 0x14b36 <_key_hit+0x38>
		_delay_ms(1);
		keyhit = _KEY_MATRIX;
   14b3a:	90 b1       	in	r25, 0x00	; 0
		if (keyhit!=outmap[i]) 
   14b3c:	98 17       	cp	r25, r24
   14b3e:	21 f4       	brne	.+8      	; 0x14b48 <_key_hit+0x4a>
		    break;
   14b40:	11 96       	adiw	r26, 0x01	; 1

char _key_hit(void){
	unsigned char	i, keyhit=0x00;
	unsigned char	outmap[4] = {0xef, 0xdf, 0xbf, 0x7f};

	for(i=0; i<4; i++){
   14b42:	a4 17       	cp	r26, r20
   14b44:	b5 07       	cpc	r27, r21
   14b46:	81 f7       	brne	.-32     	; 0x14b28 <_key_hit+0x2a>
		keyhit = _KEY_MATRIX;
		if (keyhit!=outmap[i]) 
		    break;
	}
	return keyhit;
}
   14b48:	89 2f       	mov	r24, r25
   14b4a:	0f 90       	pop	r0
   14b4c:	0f 90       	pop	r0
   14b4e:	0f 90       	pop	r0
   14b50:	0f 90       	pop	r0
   14b52:	cf 91       	pop	r28
   14b54:	df 91       	pop	r29
   14b56:	08 95       	ret

00014b58 <_key_crr>:

char _key_crr(char __key){
	if(	__key != _KEY_1 && __key != _KEY_2 &&
   14b58:	8e 3e       	cpi	r24, 0xEE	; 238
   14b5a:	f9 f0       	breq	.+62     	; 0x14b9a <_key_crr+0x42>
   14b5c:	8e 3d       	cpi	r24, 0xDE	; 222
   14b5e:	e9 f0       	breq	.+58     	; 0x14b9a <_key_crr+0x42>
   14b60:	8e 3b       	cpi	r24, 0xBE	; 190
   14b62:	d9 f0       	breq	.+54     	; 0x14b9a <_key_crr+0x42>
   14b64:	8d 3e       	cpi	r24, 0xED	; 237
   14b66:	c9 f0       	breq	.+50     	; 0x14b9a <_key_crr+0x42>
   14b68:	8d 3d       	cpi	r24, 0xDD	; 221
   14b6a:	b9 f0       	breq	.+46     	; 0x14b9a <_key_crr+0x42>
   14b6c:	8d 3b       	cpi	r24, 0xBD	; 189
   14b6e:	a9 f0       	breq	.+42     	; 0x14b9a <_key_crr+0x42>
   14b70:	8b 3e       	cpi	r24, 0xEB	; 235
   14b72:	99 f0       	breq	.+38     	; 0x14b9a <_key_crr+0x42>
   14b74:	8b 3d       	cpi	r24, 0xDB	; 219
   14b76:	89 f0       	breq	.+34     	; 0x14b9a <_key_crr+0x42>
   14b78:	8b 3b       	cpi	r24, 0xBB	; 187
   14b7a:	79 f0       	breq	.+30     	; 0x14b9a <_key_crr+0x42>
   14b7c:	87 3d       	cpi	r24, 0xD7	; 215
   14b7e:	69 f0       	breq	.+26     	; 0x14b9a <_key_crr+0x42>
   14b80:	87 3e       	cpi	r24, 0xE7	; 231
   14b82:	59 f0       	breq	.+22     	; 0x14b9a <_key_crr+0x42>
   14b84:	87 3b       	cpi	r24, 0xB7	; 183
   14b86:	49 f0       	breq	.+18     	; 0x14b9a <_key_crr+0x42>
   14b88:	8e 37       	cpi	r24, 0x7E	; 126
   14b8a:	39 f0       	breq	.+14     	; 0x14b9a <_key_crr+0x42>
   14b8c:	8d 37       	cpi	r24, 0x7D	; 125
   14b8e:	29 f0       	breq	.+10     	; 0x14b9a <_key_crr+0x42>
   14b90:	8b 37       	cpi	r24, 0x7B	; 123
   14b92:	19 f0       	breq	.+6      	; 0x14b9a <_key_crr+0x42>
   14b94:	87 37       	cpi	r24, 0x77	; 119
   14b96:	09 f0       	breq	.+2      	; 0x14b9a <_key_crr+0x42>
   14b98:	80 e0       	ldi	r24, 0x00	; 0
		__key != _KEY_CANCEL && __key != _KEY_ENTER &&
		__key != _KEY_TIKET && __key != _KEY_MENU &&
		__key != _KEY_SHIFT && __key != _KEY_CLEAR)
		return _KEY_NULL;
	return __key;
}
   14b9a:	08 95       	ret

00014b9c <_key_btn>:

char _key_btn(char __key){
	char __keychar = 0;
	
	switch (__key){
   14b9c:	8e 3b       	cpi	r24, 0xBE	; 190
   14b9e:	91 f1       	breq	.+100    	; 0x14c04 <_key_btn+0x68>
   14ba0:	8f 3b       	cpi	r24, 0xBF	; 191
   14ba2:	a8 f4       	brcc	.+42     	; 0x14bce <_key_btn+0x32>
   14ba4:	8e 37       	cpi	r24, 0x7E	; 126
   14ba6:	09 f4       	brne	.+2      	; 0x14baa <_key_btn+0xe>
   14ba8:	41 c0       	rjmp	.+130    	; 0x14c2c <_key_btn+0x90>
   14baa:	8f 37       	cpi	r24, 0x7F	; 127
   14bac:	48 f4       	brcc	.+18     	; 0x14bc0 <_key_btn+0x24>
   14bae:	8b 37       	cpi	r24, 0x7B	; 123
   14bb0:	09 f4       	brne	.+2      	; 0x14bb4 <_key_btn+0x18>
   14bb2:	40 c0       	rjmp	.+128    	; 0x14c34 <_key_btn+0x98>
   14bb4:	8d 37       	cpi	r24, 0x7D	; 125
   14bb6:	e1 f1       	breq	.+120    	; 0x14c30 <_key_btn+0x94>
   14bb8:	87 37       	cpi	r24, 0x77	; 119
   14bba:	09 f0       	breq	.+2      	; 0x14bbe <_key_btn+0x22>
   14bbc:	3f c0       	rjmp	.+126    	; 0x14c3c <_key_btn+0xa0>
   14bbe:	3c c0       	rjmp	.+120    	; 0x14c38 <_key_btn+0x9c>
   14bc0:	8b 3b       	cpi	r24, 0xBB	; 187
   14bc2:	61 f1       	breq	.+88     	; 0x14c1c <_key_btn+0x80>
   14bc4:	8d 3b       	cpi	r24, 0xBD	; 189
   14bc6:	21 f1       	breq	.+72     	; 0x14c10 <_key_btn+0x74>
   14bc8:	87 3b       	cpi	r24, 0xB7	; 183
   14bca:	c1 f5       	brne	.+112    	; 0x14c3c <_key_btn+0xa0>
   14bcc:	2d c0       	rjmp	.+90     	; 0x14c28 <_key_btn+0x8c>
   14bce:	8e 3d       	cpi	r24, 0xDE	; 222
   14bd0:	a9 f0       	breq	.+42     	; 0x14bfc <_key_btn+0x60>
   14bd2:	8f 3d       	cpi	r24, 0xDF	; 223
   14bd4:	38 f4       	brcc	.+14     	; 0x14be4 <_key_btn+0x48>
   14bd6:	8b 3d       	cpi	r24, 0xDB	; 219
   14bd8:	f9 f0       	breq	.+62     	; 0x14c18 <_key_btn+0x7c>
   14bda:	8d 3d       	cpi	r24, 0xDD	; 221
   14bdc:	b9 f0       	breq	.+46     	; 0x14c0c <_key_btn+0x70>
   14bde:	87 3d       	cpi	r24, 0xD7	; 215
   14be0:	69 f5       	brne	.+90     	; 0x14c3c <_key_btn+0xa0>
   14be2:	1e c0       	rjmp	.+60     	; 0x14c20 <_key_btn+0x84>
   14be4:	8b 3e       	cpi	r24, 0xEB	; 235
   14be6:	b1 f0       	breq	.+44     	; 0x14c14 <_key_btn+0x78>
   14be8:	8c 3e       	cpi	r24, 0xEC	; 236
   14bea:	18 f4       	brcc	.+6      	; 0x14bf2 <_key_btn+0x56>
   14bec:	87 3e       	cpi	r24, 0xE7	; 231
   14bee:	31 f5       	brne	.+76     	; 0x14c3c <_key_btn+0xa0>
   14bf0:	19 c0       	rjmp	.+50     	; 0x14c24 <_key_btn+0x88>
   14bf2:	8d 3e       	cpi	r24, 0xED	; 237
   14bf4:	49 f0       	breq	.+18     	; 0x14c08 <_key_btn+0x6c>
   14bf6:	8e 3e       	cpi	r24, 0xEE	; 238
   14bf8:	09 f5       	brne	.+66     	; 0x14c3c <_key_btn+0xa0>
   14bfa:	02 c0       	rjmp	.+4      	; 0x14c00 <_key_btn+0x64>
   14bfc:	82 e3       	ldi	r24, 0x32	; 50
   14bfe:	08 95       	ret
   14c00:	81 e3       	ldi	r24, 0x31	; 49
   14c02:	08 95       	ret
   14c04:	83 e3       	ldi	r24, 0x33	; 51
   14c06:	08 95       	ret
		case 0xDE:
			__keychar = 0x32; //2
			break;
		case 0xBE:
			__keychar = 0x33; //3
			break;
   14c08:	84 e3       	ldi	r24, 0x34	; 52
   14c0a:	08 95       	ret
		case 0xED:
			__keychar = 0x34; //4
			break;
   14c0c:	85 e3       	ldi	r24, 0x35	; 53
   14c0e:	08 95       	ret
		case 0xDD:
			__keychar = 0x35; //5
			break;
   14c10:	86 e3       	ldi	r24, 0x36	; 54
   14c12:	08 95       	ret
		case 0xBD:
			__keychar = 0x36; //6
			break;
   14c14:	87 e3       	ldi	r24, 0x37	; 55
   14c16:	08 95       	ret
		case 0xEB:
			__keychar = 0x37; //7
			break;
   14c18:	88 e3       	ldi	r24, 0x38	; 56
   14c1a:	08 95       	ret
		case 0xDB:
			__keychar = 0x38; //8
			break;
   14c1c:	89 e3       	ldi	r24, 0x39	; 57
   14c1e:	08 95       	ret
		case 0xBB:
			__keychar = 0x39; //9
			break;
   14c20:	80 e3       	ldi	r24, 0x30	; 48
   14c22:	08 95       	ret
		case 0xD7:
			__keychar = 0x30; //0
			break;
   14c24:	8a e2       	ldi	r24, 0x2A	; 42
   14c26:	08 95       	ret
		case 0xE7:
			__keychar = 0x2a; //*
			break;
   14c28:	83 e2       	ldi	r24, 0x23	; 35
   14c2a:	08 95       	ret
		case 0xB7:
			__keychar = 0x23; //#
			break;
   14c2c:	81 ef       	ldi	r24, 0xF1	; 241
   14c2e:	08 95       	ret
		case 0x7E:
			__keychar = 0xF1; //Menu 1
			break;
   14c30:	82 ef       	ldi	r24, 0xF2	; 242
   14c32:	08 95       	ret
		case 0x7D:
			__keychar = 0xF2; //Menu 2
			break;
   14c34:	83 ef       	ldi	r24, 0xF3	; 243
   14c36:	08 95       	ret
		case 0x7B:
			__keychar = 0xF3; //Menu 3
			break;
   14c38:	84 ef       	ldi	r24, 0xF4	; 244
   14c3a:	08 95       	ret
		case 0x77:
			__keychar = 0xF4; //Menu 4
			break;
   14c3c:	80 e0       	ldi	r24, 0x00	; 0
			__keychar = 0x00;
			break;

	}
	return __keychar;
}
   14c3e:	08 95       	ret

00014c40 <_table_alphanum>:
	}
	_PAD_1st;
	return __key;
}

char _table_alphanum(char __caps, char __key, char __hit){
   14c40:	98 2f       	mov	r25, r24
unsigned char __retchar = 0;

	switch(__key){
   14c42:	6d 3d       	cpi	r22, 0xDD	; 221
   14c44:	11 f1       	breq	.+68     	; 0x14c8a <_table_alphanum+0x4a>
   14c46:	6e 3d       	cpi	r22, 0xDE	; 222
   14c48:	60 f4       	brcc	.+24     	; 0x14c62 <_table_alphanum+0x22>
   14c4a:	6d 3b       	cpi	r22, 0xBD	; 189
   14c4c:	01 f1       	breq	.+64     	; 0x14c8e <_table_alphanum+0x4e>
   14c4e:	6e 3b       	cpi	r22, 0xBE	; 190
   14c50:	18 f4       	brcc	.+6      	; 0x14c58 <_table_alphanum+0x18>
   14c52:	6b 3b       	cpi	r22, 0xBB	; 187
   14c54:	21 f5       	brne	.+72     	; 0x14c9e <_table_alphanum+0x5e>
   14c56:	21 c0       	rjmp	.+66     	; 0x14c9a <_table_alphanum+0x5a>
   14c58:	6e 3b       	cpi	r22, 0xBE	; 190
   14c5a:	99 f0       	breq	.+38     	; 0x14c82 <_table_alphanum+0x42>
   14c5c:	6b 3d       	cpi	r22, 0xDB	; 219
   14c5e:	f9 f4       	brne	.+62     	; 0x14c9e <_table_alphanum+0x5e>
   14c60:	1a c0       	rjmp	.+52     	; 0x14c96 <_table_alphanum+0x56>
   14c62:	6b 3e       	cpi	r22, 0xEB	; 235
   14c64:	b1 f0       	breq	.+44     	; 0x14c92 <_table_alphanum+0x52>
   14c66:	6c 3e       	cpi	r22, 0xEC	; 236
   14c68:	18 f4       	brcc	.+6      	; 0x14c70 <_table_alphanum+0x30>
   14c6a:	6e 3d       	cpi	r22, 0xDE	; 222
   14c6c:	c1 f4       	brne	.+48     	; 0x14c9e <_table_alphanum+0x5e>
   14c6e:	05 c0       	rjmp	.+10     	; 0x14c7a <_table_alphanum+0x3a>
   14c70:	6d 3e       	cpi	r22, 0xED	; 237
   14c72:	49 f0       	breq	.+18     	; 0x14c86 <_table_alphanum+0x46>
   14c74:	6e 3e       	cpi	r22, 0xEE	; 238
   14c76:	99 f4       	brne	.+38     	; 0x14c9e <_table_alphanum+0x5e>
   14c78:	02 c0       	rjmp	.+4      	; 0x14c7e <_table_alphanum+0x3e>
   14c7a:	82 e0       	ldi	r24, 0x02	; 2
   14c7c:	11 c0       	rjmp	.+34     	; 0x14ca0 <_table_alphanum+0x60>
   14c7e:	81 e0       	ldi	r24, 0x01	; 1
   14c80:	0f c0       	rjmp	.+30     	; 0x14ca0 <_table_alphanum+0x60>
   14c82:	83 e0       	ldi	r24, 0x03	; 3
   14c84:	0d c0       	rjmp	.+26     	; 0x14ca0 <_table_alphanum+0x60>
		case 0xDE:
			__key = 2; //2
			break;
		case 0xBE:
			__key = 3; //3
			break;
   14c86:	84 e0       	ldi	r24, 0x04	; 4
   14c88:	0b c0       	rjmp	.+22     	; 0x14ca0 <_table_alphanum+0x60>
		case 0xED:
			__key = 4; //4
			break;
   14c8a:	85 e0       	ldi	r24, 0x05	; 5
   14c8c:	09 c0       	rjmp	.+18     	; 0x14ca0 <_table_alphanum+0x60>
		case 0xDD:
			__key = 5; //5
			break;
   14c8e:	86 e0       	ldi	r24, 0x06	; 6
   14c90:	07 c0       	rjmp	.+14     	; 0x14ca0 <_table_alphanum+0x60>
		case 0xBD:
			__key = 6; //6
			break;
   14c92:	87 e0       	ldi	r24, 0x07	; 7
   14c94:	05 c0       	rjmp	.+10     	; 0x14ca0 <_table_alphanum+0x60>
		case 0xEB:
			__key = 7; //7
			break;
   14c96:	88 e0       	ldi	r24, 0x08	; 8
   14c98:	03 c0       	rjmp	.+6      	; 0x14ca0 <_table_alphanum+0x60>
		case 0xDB:
			__key = 8; //8
			break;
   14c9a:	89 e0       	ldi	r24, 0x09	; 9
   14c9c:	01 c0       	rjmp	.+2      	; 0x14ca0 <_table_alphanum+0x60>
		case 0xBB:
			__key = 9; //9
			break;
   14c9e:	80 e0       	ldi	r24, 0x00	; 0
		default:
			__key = 0;
			break;	
	}

	if(__hit <= pgm_read_byte(&__maxchar[__key]))
   14ca0:	28 2f       	mov	r18, r24
   14ca2:	30 e0       	ldi	r19, 0x00	; 0
   14ca4:	f9 01       	movw	r30, r18
   14ca6:	e2 51       	subi	r30, 0x12	; 18
   14ca8:	fa 4d       	sbci	r31, 0xDA	; 218
   14caa:	e4 91       	lpm	r30, Z+
   14cac:	e4 17       	cp	r30, r20
   14cae:	10 f4       	brcc	.+4      	; 0x14cb4 <_table_alphanum+0x74>
   14cb0:	80 e0       	ldi	r24, 0x00	; 0
   14cb2:	08 95       	ret
		__retchar = pgm_read_byte(&__alphanum[__caps][__key][__hit]);
   14cb4:	ec e3       	ldi	r30, 0x3C	; 60
   14cb6:	9e 9f       	mul	r25, r30
   14cb8:	f0 01       	movw	r30, r0
   14cba:	11 24       	eor	r1, r1
   14cbc:	e4 0f       	add	r30, r20
   14cbe:	f1 1d       	adc	r31, r1
   14cc0:	c9 01       	movw	r24, r18
   14cc2:	88 0f       	add	r24, r24
   14cc4:	99 1f       	adc	r25, r25
   14cc6:	82 0f       	add	r24, r18
   14cc8:	93 1f       	adc	r25, r19
   14cca:	88 0f       	add	r24, r24
   14ccc:	99 1f       	adc	r25, r25
   14cce:	e8 0f       	add	r30, r24
   14cd0:	f9 1f       	adc	r31, r25
   14cd2:	ea 58       	subi	r30, 0x8A	; 138
   14cd4:	fa 4d       	sbci	r31, 0xDA	; 218
   14cd6:	84 91       	lpm	r24, Z+
	else __retchar = '\0';

	return __retchar;
}
   14cd8:	08 95       	ret

00014cda <_key_scan>:





char _key_scan(char __select){
   14cda:	1f 93       	push	r17
   14cdc:	18 2f       	mov	r17, r24
	char	__key = 0;

	if(__select==_PAD_SINGLE || __select==_PAD_MULTI){
   14cde:	81 50       	subi	r24, 0x01	; 1
   14ce0:	82 30       	cpi	r24, 0x02	; 2
   14ce2:	08 f0       	brcs	.+2      	; 0x14ce6 <_key_scan+0xc>
   14ce4:	64 c0       	rjmp	.+200    	; 0x14dae <_key_scan+0xd4>
		__key = _key_hit();
   14ce6:	0e 94 7f a5 	call	0x14afe	; 0x14afe <_key_hit>
		__key = _key_crr(__key);
   14cea:	0e 94 ac a5 	call	0x14b58	; 0x14b58 <_key_crr>
   14cee:	28 2f       	mov	r18, r24

		if(__key!=_KEY_NULL){
   14cf0:	88 23       	and	r24, r24
   14cf2:	09 f4       	brne	.+2      	; 0x14cf6 <_key_scan+0x1c>
   14cf4:	5d c0       	rjmp	.+186    	; 0x14db0 <_key_scan+0xd6>
			_LIGHT_SET;
   14cf6:	91 e0       	ldi	r25, 0x01	; 1
   14cf8:	90 93 ae 02 	sts	0x02AE, r25
   14cfc:	10 92 af 02 	sts	0x02AF, r1
   14d00:	80 91 65 00 	lds	r24, 0x0065
   14d04:	8d 7f       	andi	r24, 0xFD	; 253
   14d06:	80 93 65 00 	sts	0x0065, r24
			if(__sec_par)
   14d0a:	80 91 b9 02 	lds	r24, 0x02B9
   14d0e:	88 23       	and	r24, r24
   14d10:	31 f0       	breq	.+12     	; 0x14d1e <_key_scan+0x44>
				_SEC_ON;
   14d12:	90 93 b4 02 	sts	0x02B4, r25
   14d16:	10 92 b6 02 	sts	0x02B6, r1
   14d1a:	10 92 b5 02 	sts	0x02B5, r1

			if(_IS1st){
   14d1e:	80 91 b0 02 	lds	r24, 0x02B0
   14d22:	88 23       	and	r24, r24
   14d24:	71 f4       	brne	.+28     	; 0x14d42 <_key_scan+0x68>
				if(	__key == _KEY_CANCEL || __key == _KEY_ENTER)
   14d26:	27 3e       	cpi	r18, 0xE7	; 231
   14d28:	11 f0       	breq	.+4      	; 0x14d2e <_key_scan+0x54>
   14d2a:	27 3b       	cpi	r18, 0xB7	; 183
   14d2c:	31 f4       	brne	.+12     	; 0x14d3a <_key_scan+0x60>
					if(__lock_num)
   14d2e:	80 91 ad 02 	lds	r24, 0x02AD
   14d32:	88 23       	and	r24, r24
   14d34:	11 f0       	breq	.+4      	; 0x14d3a <_key_scan+0x60>
						__lock_num = 0;
   14d36:	10 92 ad 02 	sts	0x02AD, r1
				_PAD_2nd;
   14d3a:	81 e0       	ldi	r24, 0x01	; 1
   14d3c:	80 93 b0 02 	sts	0x02B0, r24
   14d40:	31 c0       	rjmp	.+98     	; 0x14da4 <_key_scan+0xca>
				_delay_ms(5);
				return __key;
			}
			if(_IS2nd){
   14d42:	81 30       	cpi	r24, 0x01	; 1
   14d44:	a9 f5       	brne	.+106    	; 0x14db0 <_key_scan+0xd6>
				if(__select==_PAD_MULTI){
   14d46:	12 30       	cpi	r17, 0x02	; 2
   14d48:	21 f5       	brne	.+72     	; 0x14d92 <_key_scan+0xb8>
					if(	__key==_KEY_0 || __key==_KEY_1 || __key==_KEY_2 || __key==_KEY_3||
   14d4a:	27 3d       	cpi	r18, 0xD7	; 215
   14d4c:	91 f0       	breq	.+36     	; 0x14d72 <_key_scan+0x98>
   14d4e:	2e 3e       	cpi	r18, 0xEE	; 238
   14d50:	81 f0       	breq	.+32     	; 0x14d72 <_key_scan+0x98>
   14d52:	2e 3d       	cpi	r18, 0xDE	; 222
   14d54:	71 f0       	breq	.+28     	; 0x14d72 <_key_scan+0x98>
   14d56:	2e 3b       	cpi	r18, 0xBE	; 190
   14d58:	61 f0       	breq	.+24     	; 0x14d72 <_key_scan+0x98>
   14d5a:	2d 3e       	cpi	r18, 0xED	; 237
   14d5c:	51 f0       	breq	.+20     	; 0x14d72 <_key_scan+0x98>
   14d5e:	2d 3d       	cpi	r18, 0xDD	; 221
   14d60:	41 f0       	breq	.+16     	; 0x14d72 <_key_scan+0x98>
   14d62:	2d 3b       	cpi	r18, 0xBD	; 189
   14d64:	31 f0       	breq	.+12     	; 0x14d72 <_key_scan+0x98>
   14d66:	2b 3e       	cpi	r18, 0xEB	; 235
   14d68:	21 f0       	breq	.+8      	; 0x14d72 <_key_scan+0x98>
   14d6a:	2b 3d       	cpi	r18, 0xDB	; 219
   14d6c:	11 f0       	breq	.+4      	; 0x14d72 <_key_scan+0x98>
   14d6e:	2b 3b       	cpi	r18, 0xBB	; 187
   14d70:	81 f4       	brne	.+32     	; 0x14d92 <_key_scan+0xb8>
						__key==_KEY_4 || __key==_KEY_5 || __key==_KEY_6 ||
						__key==_KEY_7 || __key==_KEY_8 || __key==_KEY_9){
						if(__lock_num){
   14d72:	80 91 ad 02 	lds	r24, 0x02AD
   14d76:	88 23       	and	r24, r24
   14d78:	49 f0       	breq	.+18     	; 0x14d8c <_key_scan+0xb2>
							_SHIFT_SET;
   14d7a:	81 e0       	ldi	r24, 0x01	; 1
   14d7c:	80 93 b1 02 	sts	0x02B1, r24
   14d80:	10 92 b2 02 	sts	0x02B2, r1
							CURSOR_HIDE;
   14d84:	8c e0       	ldi	r24, 0x0C	; 12
   14d86:	0e 94 20 a4 	call	0x14840	; 0x14840 <lcd_command>
   14d8a:	03 c0       	rjmp	.+6      	; 0x14d92 <_key_scan+0xb8>
						}
						else
							__lock_num = 1;
   14d8c:	81 e0       	ldi	r24, 0x01	; 1
   14d8e:	80 93 ad 02 	sts	0x02AD, r24
					}
				}
				do{
					__key = _key_hit();
   14d92:	0e 94 7f a5 	call	0x14afe	; 0x14afe <_key_hit>
					__key = _key_crr(__key);
   14d96:	0e 94 ac a5 	call	0x14b58	; 0x14b58 <_key_crr>
   14d9a:	28 2f       	mov	r18, r24
				}while(__key!=_KEY_NULL);
   14d9c:	88 23       	and	r24, r24
   14d9e:	c9 f7       	brne	.-14     	; 0x14d92 <_key_scan+0xb8>
				_PAD_1st;
   14da0:	10 92 b0 02 	sts	0x02B0, r1
   14da4:	82 ee       	ldi	r24, 0xE2	; 226
   14da6:	94 e0       	ldi	r25, 0x04	; 4
   14da8:	01 97       	sbiw	r24, 0x01	; 1
   14daa:	f1 f7       	brne	.-4      	; 0x14da8 <_key_scan+0xce>
   14dac:	03 c0       	rjmp	.+6      	; 0x14db4 <_key_scan+0xda>
				_delay_ms(5);
				return _KEY_NULL;
   14dae:	20 e0       	ldi	r18, 0x00	; 0
			}
		}
	}
	_PAD_1st;
   14db0:	10 92 b0 02 	sts	0x02B0, r1
	return __key;
}
   14db4:	82 2f       	mov	r24, r18
   14db6:	1f 91       	pop	r17
   14db8:	08 95       	ret

00014dba <_spi_init>:
#include <util/delay.h>
#include <compat/deprecated.h>

#include "SPI.h"
void _spi_init(unsigned char __mode, unsigned char __interrupt){
	if(__mode){
   14dba:	88 23       	and	r24, r24
   14dbc:	41 f0       	breq	.+16     	; 0x14dce <_spi_init+0x14>
		_SPI_DDR = (1 << _SPI_MOSI) | (1 << _SPI_SCK);
   14dbe:	86 e0       	ldi	r24, 0x06	; 6
   14dc0:	87 bb       	out	0x17, r24	; 23
		if(__interrupt)
   14dc2:	66 23       	and	r22, r22
   14dc4:	11 f0       	breq	.+4      	; 0x14dca <_spi_init+0x10>
			SPCR = (1 << SPIE) | (1 << SPE) | (1 << MSTR) | (1 << SPR1);
   14dc6:	82 ed       	ldi	r24, 0xD2	; 210
   14dc8:	09 c0       	rjmp	.+18     	; 0x14ddc <_spi_init+0x22>
		else
			SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR1);
   14dca:	82 e5       	ldi	r24, 0x52	; 82
   14dcc:	07 c0       	rjmp	.+14     	; 0x14ddc <_spi_init+0x22>
	}
	else{
		_SPI_DDR = (1 << _SPI_MISO);
   14dce:	88 e0       	ldi	r24, 0x08	; 8
   14dd0:	87 bb       	out	0x17, r24	; 23
		if(__interrupt)
   14dd2:	66 23       	and	r22, r22
   14dd4:	11 f0       	breq	.+4      	; 0x14dda <_spi_init+0x20>
			SPCR = (1 << SPIE) | (1 << SPE);
   14dd6:	80 ec       	ldi	r24, 0xC0	; 192
   14dd8:	01 c0       	rjmp	.+2      	; 0x14ddc <_spi_init+0x22>
		else
			SPCR = (1 << SPE);
   14dda:	80 e4       	ldi	r24, 0x40	; 64
   14ddc:	8d b9       	out	0x0d, r24	; 13
   14dde:	08 95       	ret

00014de0 <_spi_enable>:
	}
}

void _spi_enable(unsigned char __select){
	if(__select == 0){
   14de0:	88 23       	and	r24, r24
   14de2:	19 f4       	brne	.+6      	; 0x14dea <_spi_enable+0xa>
		sbi(_SLAVE_PORT, _SLAVE_PIN);
   14de4:	db 9a       	sbi	0x1b, 3	; 27
		sbi(_MMC_PORT, _MMC_PIN);
   14de6:	1b 9a       	sbi	0x03, 3	; 3
   14de8:	08 95       	ret
	}
	if(__select == 1){
   14dea:	81 30       	cpi	r24, 0x01	; 1
   14dec:	39 f4       	brne	.+14     	; 0x14dfc <_spi_enable+0x1c>
		sbi(_MMC_PORT, _MMC_PIN);
   14dee:	1b 9a       	sbi	0x03, 3	; 3
   14df0:	82 ee       	ldi	r24, 0xE2	; 226
   14df2:	94 e0       	ldi	r25, 0x04	; 4
   14df4:	01 97       	sbiw	r24, 0x01	; 1
   14df6:	f1 f7       	brne	.-4      	; 0x14df4 <_spi_enable+0x14>
		_delay_ms(5);
		cbi(_SLAVE_PORT, _SLAVE_PIN);
   14df8:	db 98       	cbi	0x1b, 3	; 27
   14dfa:	08 95       	ret
	}
	if(__select == 2){
   14dfc:	82 30       	cpi	r24, 0x02	; 2
   14dfe:	31 f4       	brne	.+12     	; 0x14e0c <_spi_enable+0x2c>
		sbi(_SLAVE_PORT, _SLAVE_PIN);
   14e00:	db 9a       	sbi	0x1b, 3	; 27
   14e02:	82 ee       	ldi	r24, 0xE2	; 226
   14e04:	94 e0       	ldi	r25, 0x04	; 4
   14e06:	01 97       	sbiw	r24, 0x01	; 1
   14e08:	f1 f7       	brne	.-4      	; 0x14e06 <_spi_enable+0x26>
		_delay_ms(5);
		cbi(_MMC_PORT, _MMC_PIN);
   14e0a:	1b 98       	cbi	0x03, 3	; 3
   14e0c:	08 95       	ret

00014e0e <_spi>:
	}
}

unsigned char _spi(unsigned char __data){
	SPDR = __data;
   14e0e:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1 << SPIF)));
   14e10:	77 9b       	sbis	0x0e, 7	; 14
   14e12:	fe cf       	rjmp	.-4      	; 0x14e10 <_spi+0x2>
	return SPDR;
   14e14:	8f b1       	in	r24, 0x0f	; 15
}
   14e16:	08 95       	ret

00014e18 <_rtc>:

#include <compat/twi.h>

#include "RTC.h"

unsigned char _rtc(int __addr, int __len, char* __datetime, unsigned char __dir){
   14e18:	98 2f       	mov	r25, r24
	int				__twcr;
	unsigned char	__i = 0;
	
	if(__dir){
   14e1a:	22 23       	and	r18, r18
   14e1c:	09 f4       	brne	.+2      	; 0x14e20 <_rtc+0x8>
   14e1e:	49 c0       	rjmp	.+146    	; 0x14eb2 <_rtc+0x9a>
		TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
   14e20:	84 ea       	ldi	r24, 0xA4	; 164
   14e22:	80 93 74 00 	sts	0x0074, r24
		_rtc_response;
   14e26:	80 91 74 00 	lds	r24, 0x0074
   14e2a:	87 ff       	sbrs	r24, 7
   14e2c:	fc cf       	rjmp	.-8      	; 0x14e26 <_rtc+0xe>
		if(TW_STATUS != TW_START)
   14e2e:	80 91 71 00 	lds	r24, 0x0071
   14e32:	88 7f       	andi	r24, 0xF8	; 248
   14e34:	88 30       	cpi	r24, 0x08	; 8
   14e36:	09 f0       	breq	.+2      	; 0x14e3a <_rtc+0x22>
   14e38:	af c0       	rjmp	.+350    	; 0x14f98 <_rtc+0x180>
			return 1;

		TWDR = _DS1307W;
   14e3a:	80 ed       	ldi	r24, 0xD0	; 208
   14e3c:	80 93 73 00 	sts	0x0073, r24
		TWCR = _BV(TWINT) | _BV(TWEN);
   14e40:	84 e8       	ldi	r24, 0x84	; 132
   14e42:	80 93 74 00 	sts	0x0074, r24
		_rtc_response;
   14e46:	80 91 74 00 	lds	r24, 0x0074
   14e4a:	87 ff       	sbrs	r24, 7
   14e4c:	fc cf       	rjmp	.-8      	; 0x14e46 <_rtc+0x2e>
		if(TW_STATUS != TW_MT_SLA_ACK)
   14e4e:	80 91 71 00 	lds	r24, 0x0071
   14e52:	88 7f       	andi	r24, 0xF8	; 248
   14e54:	88 31       	cpi	r24, 0x18	; 24
   14e56:	09 f0       	breq	.+2      	; 0x14e5a <_rtc+0x42>
   14e58:	9f c0       	rjmp	.+318    	; 0x14f98 <_rtc+0x180>
			return 1;

		TWDR = __addr;
   14e5a:	90 93 73 00 	sts	0x0073, r25
		TWCR = _BV(TWINT) | _BV(TWEN);
   14e5e:	84 e8       	ldi	r24, 0x84	; 132
   14e60:	80 93 74 00 	sts	0x0074, r24
		_rtc_response;
   14e64:	80 91 74 00 	lds	r24, 0x0074
   14e68:	87 ff       	sbrs	r24, 7
   14e6a:	fc cf       	rjmp	.-8      	; 0x14e64 <_rtc+0x4c>
		if(TW_STATUS != TW_MT_DATA_ACK)
   14e6c:	80 91 71 00 	lds	r24, 0x0071
   14e70:	88 7f       	andi	r24, 0xF8	; 248
   14e72:	88 32       	cpi	r24, 0x28	; 40
   14e74:	09 f0       	breq	.+2      	; 0x14e78 <_rtc+0x60>
   14e76:	90 c0       	rjmp	.+288    	; 0x14f98 <_rtc+0x180>
   14e78:	9b 01       	movw	r18, r22
			return 1;

		for(; __len > 0; __len--){
			TWDR = __datetime[__i++];
			TWCR = _BV(TWINT) | _BV(TWEN);
   14e7a:	94 e8       	ldi	r25, 0x84	; 132
   14e7c:	14 c0       	rjmp	.+40     	; 0x14ea6 <_rtc+0x8e>
		_rtc_response;
		if(TW_STATUS != TW_MT_DATA_ACK)
			return 1;

		for(; __len > 0; __len--){
			TWDR = __datetime[__i++];
   14e7e:	fa 01       	movw	r30, r20
   14e80:	e8 0f       	add	r30, r24
   14e82:	f1 1d       	adc	r31, r1
   14e84:	80 81       	ld	r24, Z
   14e86:	80 93 73 00 	sts	0x0073, r24
			TWCR = _BV(TWINT) | _BV(TWEN);
   14e8a:	90 93 74 00 	sts	0x0074, r25
			_rtc_response;
   14e8e:	80 91 74 00 	lds	r24, 0x0074
   14e92:	87 ff       	sbrs	r24, 7
   14e94:	fc cf       	rjmp	.-8      	; 0x14e8e <_rtc+0x76>
			if(TW_STATUS == TW_MT_DATA_NACK)
   14e96:	80 91 71 00 	lds	r24, 0x0071
   14e9a:	88 7f       	andi	r24, 0xF8	; 248
   14e9c:	80 33       	cpi	r24, 0x30	; 48
   14e9e:	09 f4       	brne	.+2      	; 0x14ea2 <_rtc+0x8a>
   14ea0:	7b c0       	rjmp	.+246    	; 0x14f98 <_rtc+0x180>
		TWCR = _BV(TWINT) | _BV(TWEN);
		_rtc_response;
		if(TW_STATUS != TW_MT_DATA_ACK)
			return 1;

		for(; __len > 0; __len--){
   14ea2:	21 50       	subi	r18, 0x01	; 1
   14ea4:	30 40       	sbci	r19, 0x00	; 0
   14ea6:	86 2f       	mov	r24, r22
   14ea8:	82 1b       	sub	r24, r18
   14eaa:	12 16       	cp	r1, r18
   14eac:	13 06       	cpc	r1, r19
   14eae:	3c f3       	brlt	.-50     	; 0x14e7e <_rtc+0x66>
   14eb0:	6e c0       	rjmp	.+220    	; 0x14f8e <_rtc+0x176>
		}

		TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
	}
	else{
		TWCR =_BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
   14eb2:	84 ea       	ldi	r24, 0xA4	; 164
   14eb4:	80 93 74 00 	sts	0x0074, r24
		_rtc_response;
   14eb8:	80 91 74 00 	lds	r24, 0x0074
   14ebc:	87 ff       	sbrs	r24, 7
   14ebe:	fc cf       	rjmp	.-8      	; 0x14eb8 <_rtc+0xa0>
		if(TW_STATUS != TW_START)
   14ec0:	80 91 71 00 	lds	r24, 0x0071
   14ec4:	88 7f       	andi	r24, 0xF8	; 248
   14ec6:	88 30       	cpi	r24, 0x08	; 8
   14ec8:	09 f0       	breq	.+2      	; 0x14ecc <_rtc+0xb4>
   14eca:	66 c0       	rjmp	.+204    	; 0x14f98 <_rtc+0x180>
			return 1;

		TWDR = _DS1307W;
   14ecc:	80 ed       	ldi	r24, 0xD0	; 208
   14ece:	80 93 73 00 	sts	0x0073, r24
		TWCR = _BV(TWINT) | _BV(TWEN);
   14ed2:	84 e8       	ldi	r24, 0x84	; 132
   14ed4:	80 93 74 00 	sts	0x0074, r24
		_rtc_response;
   14ed8:	80 91 74 00 	lds	r24, 0x0074
   14edc:	87 ff       	sbrs	r24, 7
   14ede:	fc cf       	rjmp	.-8      	; 0x14ed8 <_rtc+0xc0>
		if(TW_STATUS != TW_MT_SLA_ACK)
   14ee0:	80 91 71 00 	lds	r24, 0x0071
   14ee4:	88 7f       	andi	r24, 0xF8	; 248
   14ee6:	88 31       	cpi	r24, 0x18	; 24
   14ee8:	09 f0       	breq	.+2      	; 0x14eec <_rtc+0xd4>
   14eea:	56 c0       	rjmp	.+172    	; 0x14f98 <_rtc+0x180>
			return 1;

		TWDR = __addr;
   14eec:	90 93 73 00 	sts	0x0073, r25
		TWCR = _BV(TWINT) | _BV(TWEN);
   14ef0:	84 e8       	ldi	r24, 0x84	; 132
   14ef2:	80 93 74 00 	sts	0x0074, r24
		_rtc_response;
   14ef6:	80 91 74 00 	lds	r24, 0x0074
   14efa:	87 ff       	sbrs	r24, 7
   14efc:	fc cf       	rjmp	.-8      	; 0x14ef6 <_rtc+0xde>
		if(TW_STATUS != TW_MT_DATA_ACK)
   14efe:	80 91 71 00 	lds	r24, 0x0071
   14f02:	88 7f       	andi	r24, 0xF8	; 248
   14f04:	88 32       	cpi	r24, 0x28	; 40
   14f06:	09 f0       	breq	.+2      	; 0x14f0a <_rtc+0xf2>
   14f08:	47 c0       	rjmp	.+142    	; 0x14f98 <_rtc+0x180>
			return 1;

		TWCR =_BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
   14f0a:	84 ea       	ldi	r24, 0xA4	; 164
   14f0c:	80 93 74 00 	sts	0x0074, r24
		_rtc_response;
   14f10:	80 91 74 00 	lds	r24, 0x0074
   14f14:	87 ff       	sbrs	r24, 7
   14f16:	fc cf       	rjmp	.-8      	; 0x14f10 <_rtc+0xf8>
		if(TW_STATUS != TW_REP_START)
   14f18:	80 91 71 00 	lds	r24, 0x0071
   14f1c:	88 7f       	andi	r24, 0xF8	; 248
   14f1e:	80 31       	cpi	r24, 0x10	; 16
   14f20:	d9 f5       	brne	.+118    	; 0x14f98 <_rtc+0x180>
			return 1;

		TWDR = _DS1307R;
   14f22:	81 ed       	ldi	r24, 0xD1	; 209
   14f24:	80 93 73 00 	sts	0x0073, r24
		TWCR =_BV(TWINT) | _BV(TWEN);
   14f28:	84 e8       	ldi	r24, 0x84	; 132
   14f2a:	80 93 74 00 	sts	0x0074, r24
		_rtc_response;
   14f2e:	80 91 74 00 	lds	r24, 0x0074
   14f32:	87 ff       	sbrs	r24, 7
   14f34:	fc cf       	rjmp	.-8      	; 0x14f2e <_rtc+0x116>
		if(TW_STATUS != TW_MR_SLA_ACK)
   14f36:	80 91 71 00 	lds	r24, 0x0071
   14f3a:	88 7f       	andi	r24, 0xF8	; 248
   14f3c:	80 34       	cpi	r24, 0x40	; 64
   14f3e:	61 f5       	brne	.+88     	; 0x14f98 <_rtc+0x180>
   14f40:	24 ec       	ldi	r18, 0xC4	; 196
   14f42:	30 e0       	ldi	r19, 0x00	; 0
   14f44:	90 e0       	ldi	r25, 0x00	; 0
   14f46:	20 c0       	rjmp	.+64     	; 0x14f88 <_rtc+0x170>
			return 1;

		for(__twcr = _BV(TWINT) | _BV(TWEN) | _BV(TWEA); __len > 0; __len--){
			if(__len == 1)
   14f48:	61 30       	cpi	r22, 0x01	; 1
   14f4a:	71 05       	cpc	r23, r1
   14f4c:	11 f4       	brne	.+4      	; 0x14f52 <_rtc+0x13a>
   14f4e:	24 e8       	ldi	r18, 0x84	; 132
   14f50:	30 e0       	ldi	r19, 0x00	; 0
				__twcr = _BV(TWINT) | _BV(TWEN);
			TWCR = __twcr;
   14f52:	20 93 74 00 	sts	0x0074, r18
			_rtc_response;
   14f56:	80 91 74 00 	lds	r24, 0x0074
   14f5a:	87 ff       	sbrs	r24, 7
   14f5c:	fc cf       	rjmp	.-8      	; 0x14f56 <_rtc+0x13e>
			if(TW_STATUS == TW_MR_DATA_NACK)
   14f5e:	80 91 71 00 	lds	r24, 0x0071
   14f62:	88 7f       	andi	r24, 0xF8	; 248
   14f64:	88 35       	cpi	r24, 0x58	; 88
   14f66:	11 f4       	brne	.+4      	; 0x14f6c <_rtc+0x154>
   14f68:	60 e0       	ldi	r22, 0x00	; 0
   14f6a:	70 e0       	ldi	r23, 0x00	; 0
				__len = 0;
			if(TW_STATUS == TW_MR_DATA_ACK)
   14f6c:	80 91 71 00 	lds	r24, 0x0071
   14f70:	88 7f       	andi	r24, 0xF8	; 248
   14f72:	80 35       	cpi	r24, 0x50	; 80
   14f74:	39 f4       	brne	.+14     	; 0x14f84 <_rtc+0x16c>
				__datetime[__i++] = TWDR;
   14f76:	80 91 73 00 	lds	r24, 0x0073
   14f7a:	fa 01       	movw	r30, r20
   14f7c:	e9 0f       	add	r30, r25
   14f7e:	f1 1d       	adc	r31, r1
   14f80:	80 83       	st	Z, r24
   14f82:	9f 5f       	subi	r25, 0xFF	; 255
		TWCR =_BV(TWINT) | _BV(TWEN);
		_rtc_response;
		if(TW_STATUS != TW_MR_SLA_ACK)
			return 1;

		for(__twcr = _BV(TWINT) | _BV(TWEN) | _BV(TWEA); __len > 0; __len--){
   14f84:	61 50       	subi	r22, 0x01	; 1
   14f86:	70 40       	sbci	r23, 0x00	; 0
   14f88:	16 16       	cp	r1, r22
   14f8a:	17 06       	cpc	r1, r23
   14f8c:	ec f2       	brlt	.-70     	; 0x14f48 <_rtc+0x130>
			if(TW_STATUS == TW_MR_DATA_NACK)
				__len = 0;
			if(TW_STATUS == TW_MR_DATA_ACK)
				__datetime[__i++] = TWDR;
		}
		TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
   14f8e:	84 e9       	ldi	r24, 0x94	; 148
   14f90:	80 93 74 00 	sts	0x0074, r24
   14f94:	80 e0       	ldi	r24, 0x00	; 0
   14f96:	08 95       	ret
   14f98:	81 e0       	ldi	r24, 0x01	; 1
	}

    return 0;
}
   14f9a:	08 95       	ret

00014f9c <_datetime>:

void _datetime(unsigned char __mode, char* __date, char* __time){
   14f9c:	ef 92       	push	r14
   14f9e:	ff 92       	push	r15
   14fa0:	0f 93       	push	r16
   14fa2:	1f 93       	push	r17
   14fa4:	df 93       	push	r29
   14fa6:	cf 93       	push	r28
   14fa8:	cd b7       	in	r28, 0x3d	; 61
   14faa:	de b7       	in	r29, 0x3e	; 62
   14fac:	64 97       	sbiw	r28, 0x14	; 20
   14fae:	0f b6       	in	r0, 0x3f	; 63
   14fb0:	f8 94       	cli
   14fb2:	de bf       	out	0x3e, r29	; 62
   14fb4:	0f be       	out	0x3f, r0	; 63
   14fb6:	cd bf       	out	0x3d, r28	; 61
   14fb8:	28 2f       	mov	r18, r24
   14fba:	8b 01       	movw	r16, r22
   14fbc:	7a 01       	movw	r14, r20
   14fbe:	ae 01       	movw	r20, r28
   14fc0:	4f 5f       	subi	r20, 0xFF	; 255
   14fc2:	5f 4f       	sbci	r21, 0xFF	; 255
	char	__datetime[20];

	if(__mode){
   14fc4:	88 23       	and	r24, r24
   14fc6:	99 f1       	breq	.+102    	; 0x1502e <_datetime+0x92>
		__datetime[4] = (((__date[0] - 0x30) & 0x0F) << 4) + ((__date[1] - 0x30) & 0x0F);
   14fc8:	fb 01       	movw	r30, r22
   14fca:	90 81       	ld	r25, Z
   14fcc:	92 95       	swap	r25
   14fce:	90 7f       	andi	r25, 0xF0	; 240
   14fd0:	81 81       	ldd	r24, Z+1	; 0x01
   14fd2:	8f 70       	andi	r24, 0x0F	; 15
   14fd4:	98 0f       	add	r25, r24
   14fd6:	9d 83       	std	Y+5, r25	; 0x05
		__datetime[5] = (((__date[3] - 0x30) & 0x0F) << 4) + ((__date[4] - 0x30) & 0x0F);
   14fd8:	93 81       	ldd	r25, Z+3	; 0x03
   14fda:	92 95       	swap	r25
   14fdc:	90 7f       	andi	r25, 0xF0	; 240
   14fde:	84 81       	ldd	r24, Z+4	; 0x04
   14fe0:	8f 70       	andi	r24, 0x0F	; 15
   14fe2:	98 0f       	add	r25, r24
   14fe4:	9e 83       	std	Y+6, r25	; 0x06
		__datetime[6] = (((__date[6] - 0x30) & 0x0F) << 4) + ((__date[7] - 0x30) & 0x0F);
   14fe6:	96 81       	ldd	r25, Z+6	; 0x06
   14fe8:	92 95       	swap	r25
   14fea:	90 7f       	andi	r25, 0xF0	; 240
   14fec:	87 81       	ldd	r24, Z+7	; 0x07
   14fee:	8f 70       	andi	r24, 0x0F	; 15
   14ff0:	98 0f       	add	r25, r24
   14ff2:	9f 83       	std	Y+7, r25	; 0x07

		__datetime[2] = (((__time[0] - 0x30) & 0x0F) << 4) + ((__time[1] - 0x30) & 0x0F);
   14ff4:	f7 01       	movw	r30, r14
   14ff6:	90 81       	ld	r25, Z
   14ff8:	92 95       	swap	r25
   14ffa:	90 7f       	andi	r25, 0xF0	; 240
   14ffc:	81 81       	ldd	r24, Z+1	; 0x01
   14ffe:	8f 70       	andi	r24, 0x0F	; 15
   15000:	98 0f       	add	r25, r24
   15002:	9b 83       	std	Y+3, r25	; 0x03
		__datetime[1] = (((__time[3] - 0x30) & 0x0F) << 4) + ((__time[4] - 0x30) & 0x0F);
   15004:	93 81       	ldd	r25, Z+3	; 0x03
   15006:	92 95       	swap	r25
   15008:	90 7f       	andi	r25, 0xF0	; 240
   1500a:	84 81       	ldd	r24, Z+4	; 0x04
   1500c:	8f 70       	andi	r24, 0x0F	; 15
   1500e:	98 0f       	add	r25, r24
   15010:	9a 83       	std	Y+2, r25	; 0x02
		__datetime[0] = (((__time[6] - 0x30) & 0x0F) << 4) + ((__time[7] - 0x30) & 0x0F);
   15012:	96 81       	ldd	r25, Z+6	; 0x06
   15014:	92 95       	swap	r25
   15016:	90 7f       	andi	r25, 0xF0	; 240
   15018:	87 81       	ldd	r24, Z+7	; 0x07
   1501a:	8f 70       	andi	r24, 0x0F	; 15
   1501c:	98 0f       	add	r25, r24
   1501e:	99 83       	std	Y+1, r25	; 0x01
		_rtc(0, 8, __datetime, __mode);
   15020:	80 e0       	ldi	r24, 0x00	; 0
   15022:	90 e0       	ldi	r25, 0x00	; 0
   15024:	68 e0       	ldi	r22, 0x08	; 8
   15026:	70 e0       	ldi	r23, 0x00	; 0
   15028:	0e 94 0c a7 	call	0x14e18	; 0x14e18 <_rtc>
   1502c:	4a c0       	rjmp	.+148    	; 0x150c2 <_datetime+0x126>
	}
	else
		if(_rtc(0, 8, __datetime, __mode) != 1){
   1502e:	80 e0       	ldi	r24, 0x00	; 0
   15030:	90 e0       	ldi	r25, 0x00	; 0
   15032:	68 e0       	ldi	r22, 0x08	; 8
   15034:	70 e0       	ldi	r23, 0x00	; 0
   15036:	20 e0       	ldi	r18, 0x00	; 0
   15038:	0e 94 0c a7 	call	0x14e18	; 0x14e18 <_rtc>
   1503c:	81 30       	cpi	r24, 0x01	; 1
   1503e:	09 f4       	brne	.+2      	; 0x15042 <_datetime+0xa6>
   15040:	40 c0       	rjmp	.+128    	; 0x150c2 <_datetime+0x126>
			__date[0] = (__datetime[4] >> 4) + 0x30;
   15042:	9d 81       	ldd	r25, Y+5	; 0x05
   15044:	89 2f       	mov	r24, r25
   15046:	82 95       	swap	r24
   15048:	8f 70       	andi	r24, 0x0F	; 15
   1504a:	80 5d       	subi	r24, 0xD0	; 208
   1504c:	f8 01       	movw	r30, r16
   1504e:	80 83       	st	Z, r24
			__date[1] = (__datetime[4] & 0x0F) + 0x30;
   15050:	9f 70       	andi	r25, 0x0F	; 15
   15052:	90 5d       	subi	r25, 0xD0	; 208
   15054:	91 83       	std	Z+1, r25	; 0x01
			__date[2] = '/';
   15056:	2f e2       	ldi	r18, 0x2F	; 47
   15058:	22 83       	std	Z+2, r18	; 0x02
			__date[3] = (__datetime[5] >> 4) + 0x30;
   1505a:	9e 81       	ldd	r25, Y+6	; 0x06
   1505c:	89 2f       	mov	r24, r25
   1505e:	82 95       	swap	r24
   15060:	8f 70       	andi	r24, 0x0F	; 15
   15062:	80 5d       	subi	r24, 0xD0	; 208
   15064:	83 83       	std	Z+3, r24	; 0x03
			__date[4] = (__datetime[5] & 0x0F) + 0x30;
   15066:	9f 70       	andi	r25, 0x0F	; 15
   15068:	90 5d       	subi	r25, 0xD0	; 208
   1506a:	94 83       	std	Z+4, r25	; 0x04
			__date[5] = '/';
   1506c:	25 83       	std	Z+5, r18	; 0x05
			__date[6] = (__datetime[6] >> 4) + 0x30;
   1506e:	9f 81       	ldd	r25, Y+7	; 0x07
   15070:	89 2f       	mov	r24, r25
   15072:	82 95       	swap	r24
   15074:	8f 70       	andi	r24, 0x0F	; 15
   15076:	80 5d       	subi	r24, 0xD0	; 208
   15078:	86 83       	std	Z+6, r24	; 0x06
			__date[7] = (__datetime[6] & 0x0F) + 0x30;
   1507a:	9f 70       	andi	r25, 0x0F	; 15
   1507c:	90 5d       	subi	r25, 0xD0	; 208
   1507e:	97 83       	std	Z+7, r25	; 0x07
			__date[8] = '\0';
   15080:	10 86       	std	Z+8, r1	; 0x08

			__time[0] = (__datetime[2] >> 4) + 0x30;
   15082:	9b 81       	ldd	r25, Y+3	; 0x03
   15084:	89 2f       	mov	r24, r25
   15086:	82 95       	swap	r24
   15088:	8f 70       	andi	r24, 0x0F	; 15
   1508a:	80 5d       	subi	r24, 0xD0	; 208
   1508c:	f7 01       	movw	r30, r14
   1508e:	80 83       	st	Z, r24
			__time[1] = (__datetime[2] & 0x0F) + 0x30;
   15090:	9f 70       	andi	r25, 0x0F	; 15
   15092:	90 5d       	subi	r25, 0xD0	; 208
   15094:	91 83       	std	Z+1, r25	; 0x01
			__time[2] = ':';
   15096:	2a e3       	ldi	r18, 0x3A	; 58
   15098:	22 83       	std	Z+2, r18	; 0x02
			__time[3] = (__datetime[1] >> 4) + 0x30;
   1509a:	9a 81       	ldd	r25, Y+2	; 0x02
   1509c:	89 2f       	mov	r24, r25
   1509e:	82 95       	swap	r24
   150a0:	8f 70       	andi	r24, 0x0F	; 15
   150a2:	80 5d       	subi	r24, 0xD0	; 208
   150a4:	83 83       	std	Z+3, r24	; 0x03
			__time[4] = (__datetime[1] & 0x0F) + 0x30;
   150a6:	9f 70       	andi	r25, 0x0F	; 15
   150a8:	90 5d       	subi	r25, 0xD0	; 208
   150aa:	94 83       	std	Z+4, r25	; 0x04
			__time[5] = ':';
   150ac:	25 83       	std	Z+5, r18	; 0x05
			__time[6] = (__datetime[0] >> 4) + 0x30;
   150ae:	99 81       	ldd	r25, Y+1	; 0x01
   150b0:	89 2f       	mov	r24, r25
   150b2:	82 95       	swap	r24
   150b4:	8f 70       	andi	r24, 0x0F	; 15
   150b6:	80 5d       	subi	r24, 0xD0	; 208
   150b8:	86 83       	std	Z+6, r24	; 0x06
			__time[7] = (__datetime[0] & 0x0F) + 0x30;
   150ba:	9f 70       	andi	r25, 0x0F	; 15
   150bc:	90 5d       	subi	r25, 0xD0	; 208
   150be:	97 83       	std	Z+7, r25	; 0x07
			__time[8] = '\0';
   150c0:	10 86       	std	Z+8, r1	; 0x08
		}
}
   150c2:	64 96       	adiw	r28, 0x14	; 20
   150c4:	0f b6       	in	r0, 0x3f	; 63
   150c6:	f8 94       	cli
   150c8:	de bf       	out	0x3e, r29	; 62
   150ca:	0f be       	out	0x3f, r0	; 63
   150cc:	cd bf       	out	0x3d, r28	; 61
   150ce:	cf 91       	pop	r28
   150d0:	df 91       	pop	r29
   150d2:	1f 91       	pop	r17
   150d4:	0f 91       	pop	r16
   150d6:	ff 90       	pop	r15
   150d8:	ef 90       	pop	r14
   150da:	08 95       	ret

000150dc <_day>:

unsigned char _day(void){
   150dc:	df 93       	push	r29
   150de:	cf 93       	push	r28
   150e0:	cd b7       	in	r28, 0x3d	; 61
   150e2:	de b7       	in	r29, 0x3e	; 62
   150e4:	64 97       	sbiw	r28, 0x14	; 20
   150e6:	0f b6       	in	r0, 0x3f	; 63
   150e8:	f8 94       	cli
   150ea:	de bf       	out	0x3e, r29	; 62
   150ec:	0f be       	out	0x3f, r0	; 63
   150ee:	cd bf       	out	0x3d, r28	; 61
	char	__datetime[20];

	if(_rtc(0, 8, __datetime, 0) != 1)
   150f0:	80 e0       	ldi	r24, 0x00	; 0
   150f2:	90 e0       	ldi	r25, 0x00	; 0
   150f4:	68 e0       	ldi	r22, 0x08	; 8
   150f6:	70 e0       	ldi	r23, 0x00	; 0
   150f8:	ae 01       	movw	r20, r28
   150fa:	4f 5f       	subi	r20, 0xFF	; 255
   150fc:	5f 4f       	sbci	r21, 0xFF	; 255
   150fe:	20 e0       	ldi	r18, 0x00	; 0
   15100:	0e 94 0c a7 	call	0x14e18	; 0x14e18 <_rtc>
   15104:	81 30       	cpi	r24, 0x01	; 1
   15106:	11 f4       	brne	.+4      	; 0x1510c <_day+0x30>
   15108:	80 e0       	ldi	r24, 0x00	; 0
   1510a:	02 c0       	rjmp	.+4      	; 0x15110 <_day+0x34>
		return __datetime[3] & 0x0F;
   1510c:	8c 81       	ldd	r24, Y+4	; 0x04
   1510e:	8f 70       	andi	r24, 0x0F	; 15
	return 0;
   15110:	64 96       	adiw	r28, 0x14	; 20
   15112:	0f b6       	in	r0, 0x3f	; 63
   15114:	f8 94       	cli
   15116:	de bf       	out	0x3e, r29	; 62
   15118:	0f be       	out	0x3f, r0	; 63
   1511a:	cd bf       	out	0x3d, r28	; 61
   1511c:	cf 91       	pop	r28
   1511e:	df 91       	pop	r29
   15120:	08 95       	ret

00015122 <uart_baudrate>:
	}

	uart_baudrate(__com, __baudrate);
}

void uart_baudrate(unsigned char __com, unsigned long __baudrate){
   15122:	1f 93       	push	r17
   15124:	18 2f       	mov	r17, r24
   15126:	9a 01       	movw	r18, r20
   15128:	ab 01       	movw	r20, r22
	unsigned long __br;

	__br = (unsigned long)((_CPU_DEFAULT + (__baudrate * 8)) / (__baudrate * 16) - 1);
   1512a:	ca 01       	movw	r24, r20
   1512c:	b9 01       	movw	r22, r18
   1512e:	60 50       	subi	r22, 0x00	; 0
   15130:	70 4e       	sbci	r23, 0xE0	; 224
   15132:	83 4e       	sbci	r24, 0xE3	; 227
   15134:	9f 4f       	sbci	r25, 0xFF	; 255
   15136:	f3 e0       	ldi	r31, 0x03	; 3
   15138:	66 0f       	add	r22, r22
   1513a:	77 1f       	adc	r23, r23
   1513c:	88 1f       	adc	r24, r24
   1513e:	99 1f       	adc	r25, r25
   15140:	fa 95       	dec	r31
   15142:	d1 f7       	brne	.-12     	; 0x15138 <uart_baudrate+0x16>
   15144:	e4 e0       	ldi	r30, 0x04	; 4
   15146:	22 0f       	add	r18, r18
   15148:	33 1f       	adc	r19, r19
   1514a:	44 1f       	adc	r20, r20
   1514c:	55 1f       	adc	r21, r21
   1514e:	ea 95       	dec	r30
   15150:	d1 f7       	brne	.-12     	; 0x15146 <uart_baudrate+0x24>
   15152:	0e 94 a1 aa 	call	0x15542	; 0x15542 <__udivmodsi4>
   15156:	21 50       	subi	r18, 0x01	; 1
   15158:	30 40       	sbci	r19, 0x00	; 0
   1515a:	40 40       	sbci	r20, 0x00	; 0
   1515c:	50 40       	sbci	r21, 0x00	; 0
   1515e:	bb 27       	eor	r27, r27
   15160:	a5 2f       	mov	r26, r21
   15162:	94 2f       	mov	r25, r20
   15164:	83 2f       	mov	r24, r19

	if(__com){
   15166:	11 23       	and	r17, r17
   15168:	29 f0       	breq	.+10     	; 0x15174 <uart_baudrate+0x52>
		UBRR1L = __br;
   1516a:	20 93 99 00 	sts	0x0099, r18
		UBRR1H = __br >> 8;
   1516e:	80 93 98 00 	sts	0x0098, r24
   15172:	03 c0       	rjmp	.+6      	; 0x1517a <uart_baudrate+0x58>
	}
	else{
		UBRR0L = __br;
   15174:	29 b9       	out	0x09, r18	; 9
		UBRR0H = __br >> 8;
   15176:	80 93 90 00 	sts	0x0090, r24
	}
}
   1517a:	1f 91       	pop	r17
   1517c:	08 95       	ret

0001517e <uart_init>:
#include <util/delay.h>
#include <string.h>

#include "UART.h"

void uart_init(unsigned char __com, unsigned long __baudrate){
   1517e:	98 2f       	mov	r25, r24
	if(__com){
   15180:	88 23       	and	r24, r24
   15182:	39 f0       	breq	.+14     	; 0x15192 <uart_init+0x14>
		UCSR1B = _BV(RXCIE1) | _BV(RXEN1) | _BV(TXEN1);
   15184:	88 e9       	ldi	r24, 0x98	; 152
   15186:	80 93 9a 00 	sts	0x009A, r24
		UCSR1C = _BV(UCSZ11) | _BV(UCSZ10);
   1518a:	86 e0       	ldi	r24, 0x06	; 6
   1518c:	80 93 9d 00 	sts	0x009D, r24
   15190:	05 c0       	rjmp	.+10     	; 0x1519c <uart_init+0x1e>
	}
	else{
		UCSR0B = _BV(RXCIE0) | _BV(RXEN0) | _BV(TXEN0);
   15192:	88 e9       	ldi	r24, 0x98	; 152
   15194:	8a b9       	out	0x0a, r24	; 10
		UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
   15196:	86 e0       	ldi	r24, 0x06	; 6
   15198:	80 93 95 00 	sts	0x0095, r24
	}

	uart_baudrate(__com, __baudrate);
   1519c:	89 2f       	mov	r24, r25
   1519e:	0e 94 91 a8 	call	0x15122	; 0x15122 <uart_baudrate>
}
   151a2:	08 95       	ret

000151a4 <uart>:
		UBRR0H = __br >> 8;
	}
}

unsigned char uart(unsigned char __com, unsigned char __dir, unsigned char __chr){
	if(__com){
   151a4:	88 23       	and	r24, r24
   151a6:	81 f0       	breq	.+32     	; 0x151c8 <uart+0x24>
		if(__dir){
   151a8:	66 23       	and	r22, r22
   151aa:	39 f0       	breq	.+14     	; 0x151ba <uart+0x16>
			loop_until_bit_is_set(UCSR1A, UDRE1);
   151ac:	80 91 9b 00 	lds	r24, 0x009B
   151b0:	85 ff       	sbrs	r24, 5
   151b2:	fc cf       	rjmp	.-8      	; 0x151ac <uart+0x8>
			UDR1 = __chr;
   151b4:	40 93 9c 00 	sts	0x009C, r20
   151b8:	0c c0       	rjmp	.+24     	; 0x151d2 <uart+0x2e>
		}
		else{
			loop_until_bit_is_set(UCSR1A, RXC);
   151ba:	80 91 9b 00 	lds	r24, 0x009B
   151be:	87 ff       	sbrs	r24, 7
   151c0:	fc cf       	rjmp	.-8      	; 0x151ba <uart+0x16>
			return UDR1;
   151c2:	80 91 9c 00 	lds	r24, 0x009C
   151c6:	08 95       	ret
		}
	}
	else{
		if(__dir){
   151c8:	66 23       	and	r22, r22
   151ca:	29 f0       	breq	.+10     	; 0x151d6 <uart+0x32>
			loop_until_bit_is_set(UCSR0A, UDRE0);
   151cc:	5d 9b       	sbis	0x0b, 5	; 11
   151ce:	fe cf       	rjmp	.-4      	; 0x151cc <uart+0x28>
			UDR0 = __chr;
   151d0:	4c b9       	out	0x0c, r20	; 12
   151d2:	81 e0       	ldi	r24, 0x01	; 1
   151d4:	08 95       	ret
		}
		else{
			loop_until_bit_is_set(UCSR0A,  RXC);
   151d6:	5f 9b       	sbis	0x0b, 7	; 11
   151d8:	fe cf       	rjmp	.-4      	; 0x151d6 <uart+0x32>
			return UDR0;
   151da:	8c b1       	in	r24, 0x0c	; 12
		}

	}

	return 1;
}
   151dc:	08 95       	ret

000151de <uart_print>:

void uart_print(unsigned char __com, unsigned char __ret, char *__str){
   151de:	0f 93       	push	r16
   151e0:	1f 93       	push	r17
   151e2:	cf 93       	push	r28
   151e4:	df 93       	push	r29
   151e6:	18 2f       	mov	r17, r24
   151e8:	06 2f       	mov	r16, r22
   151ea:	ea 01       	movw	r28, r20
	if(strlen(__str)>0)
   151ec:	88 81       	ld	r24, Y
   151ee:	88 23       	and	r24, r24
   151f0:	31 f4       	brne	.+12     	; 0x151fe <uart_print+0x20>
   151f2:	08 c0       	rjmp	.+16     	; 0x15204 <uart_print+0x26>
		while(*__str)
		     uart(__com, 1, *__str++);
   151f4:	21 96       	adiw	r28, 0x01	; 1
   151f6:	81 2f       	mov	r24, r17
   151f8:	61 e0       	ldi	r22, 0x01	; 1
   151fa:	0e 94 d2 a8 	call	0x151a4	; 0x151a4 <uart>
	return 1;
}

void uart_print(unsigned char __com, unsigned char __ret, char *__str){
	if(strlen(__str)>0)
		while(*__str)
   151fe:	48 81       	ld	r20, Y
   15200:	44 23       	and	r20, r20
   15202:	c1 f7       	brne	.-16     	; 0x151f4 <uart_print+0x16>
		     uart(__com, 1, *__str++);

	if(__ret){
   15204:	00 23       	and	r16, r16
   15206:	51 f0       	breq	.+20     	; 0x1521c <uart_print+0x3e>
		uart(__com, 1, 0x0D);
   15208:	81 2f       	mov	r24, r17
   1520a:	61 e0       	ldi	r22, 0x01	; 1
   1520c:	4d e0       	ldi	r20, 0x0D	; 13
   1520e:	0e 94 d2 a8 	call	0x151a4	; 0x151a4 <uart>
		uart(__com, 1, 0x0A);
   15212:	81 2f       	mov	r24, r17
   15214:	61 e0       	ldi	r22, 0x01	; 1
   15216:	4a e0       	ldi	r20, 0x0A	; 10
   15218:	0e 94 d2 a8 	call	0x151a4	; 0x151a4 <uart>
   1521c:	82 ee       	ldi	r24, 0xE2	; 226
   1521e:	94 e0       	ldi	r25, 0x04	; 4
   15220:	01 97       	sbiw	r24, 0x01	; 1
   15222:	f1 f7       	brne	.-4      	; 0x15220 <uart_print+0x42>
	}
	_delay_ms(5);
}
   15224:	df 91       	pop	r29
   15226:	cf 91       	pop	r28
   15228:	1f 91       	pop	r17
   1522a:	0f 91       	pop	r16
   1522c:	08 95       	ret

0001522e <uart_printf>:

void uart_printf(unsigned char __com, unsigned char __ret, char *__str){
   1522e:	0f 93       	push	r16
   15230:	1f 93       	push	r17
   15232:	cf 93       	push	r28
   15234:	df 93       	push	r29
   15236:	18 2f       	mov	r17, r24
   15238:	06 2f       	mov	r16, r22
   1523a:	ea 01       	movw	r28, r20
   1523c:	07 c0       	rjmp	.+14     	; 0x1524c <uart_printf+0x1e>
	while(pgm_read_byte(&(*__str)))
		uart(__com, 1, pgm_read_byte(&(*__str++)));
   1523e:	21 96       	adiw	r28, 0x01	; 1
   15240:	f9 01       	movw	r30, r18
   15242:	44 91       	lpm	r20, Z+
   15244:	81 2f       	mov	r24, r17
   15246:	61 e0       	ldi	r22, 0x01	; 1
   15248:	0e 94 d2 a8 	call	0x151a4	; 0x151a4 <uart>
   1524c:	9e 01       	movw	r18, r28
	}
	_delay_ms(5);
}

void uart_printf(unsigned char __com, unsigned char __ret, char *__str){
	while(pgm_read_byte(&(*__str)))
   1524e:	fe 01       	movw	r30, r28
   15250:	84 91       	lpm	r24, Z+
   15252:	88 23       	and	r24, r24
   15254:	a1 f7       	brne	.-24     	; 0x1523e <uart_printf+0x10>
		uart(__com, 1, pgm_read_byte(&(*__str++)));

	if(__ret){
   15256:	00 23       	and	r16, r16
   15258:	51 f0       	breq	.+20     	; 0x1526e <uart_printf+0x40>
		uart(__com, 1, 0x0D);
   1525a:	81 2f       	mov	r24, r17
   1525c:	61 e0       	ldi	r22, 0x01	; 1
   1525e:	4d e0       	ldi	r20, 0x0D	; 13
   15260:	0e 94 d2 a8 	call	0x151a4	; 0x151a4 <uart>
		uart(__com, 1, 0x0A);
   15264:	81 2f       	mov	r24, r17
   15266:	61 e0       	ldi	r22, 0x01	; 1
   15268:	4a e0       	ldi	r20, 0x0A	; 10
   1526a:	0e 94 d2 a8 	call	0x151a4	; 0x151a4 <uart>
   1526e:	86 ea       	ldi	r24, 0xA6	; 166
   15270:	9e e0       	ldi	r25, 0x0E	; 14
   15272:	01 97       	sbiw	r24, 0x01	; 1
   15274:	f1 f7       	brne	.-4      	; 0x15272 <uart_printf+0x44>
	}
	_delay_ms(15);
}
   15276:	df 91       	pop	r29
   15278:	cf 91       	pop	r28
   1527a:	1f 91       	pop	r17
   1527c:	0f 91       	pop	r16
   1527e:	08 95       	ret

00015280 <Int2Str>:

void Int2Str(char* __string, unsigned long __value){
   15280:	6f 92       	push	r6
   15282:	7f 92       	push	r7
   15284:	8f 92       	push	r8
   15286:	9f 92       	push	r9
   15288:	af 92       	push	r10
   1528a:	bf 92       	push	r11
   1528c:	cf 92       	push	r12
   1528e:	df 92       	push	r13
   15290:	ef 92       	push	r14
   15292:	ff 92       	push	r15
   15294:	0f 93       	push	r16
   15296:	1f 93       	push	r17
   15298:	cf 93       	push	r28
   1529a:	df 93       	push	r29
   1529c:	ec 01       	movw	r28, r24
	char			__flag = 0, __i = 0, __count;
	unsigned long	__num, __devider = 1000000000;
	int				__tmp;

	if(__value == 0){
   1529e:	41 15       	cp	r20, r1
   152a0:	51 05       	cpc	r21, r1
   152a2:	61 05       	cpc	r22, r1
   152a4:	71 05       	cpc	r23, r1
   152a6:	21 f4       	brne	.+8      	; 0x152b0 <Int2Str+0x30>
		__string[0] = '0';
   152a8:	80 e3       	ldi	r24, 0x30	; 48
   152aa:	88 83       	st	Y, r24
		__string[1] = '\0';
   152ac:	19 82       	std	Y+1, r1	; 0x01
   152ae:	48 c0       	rjmp	.+144    	; 0x15340 <Int2Str+0xc0>
		return;
   152b0:	4a 01       	movw	r8, r20
   152b2:	5b 01       	movw	r10, r22
   152b4:	c1 2c       	mov	r12, r1
   152b6:	ba ec       	ldi	r27, 0xCA	; 202
   152b8:	db 2e       	mov	r13, r27
   152ba:	ba e9       	ldi	r27, 0x9A	; 154
   152bc:	eb 2e       	mov	r14, r27
   152be:	bb e3       	ldi	r27, 0x3B	; 59
   152c0:	fb 2e       	mov	r15, r27
   152c2:	10 e0       	ldi	r17, 0x00	; 0
   152c4:	00 e0       	ldi	r16, 0x00	; 0
   152c6:	77 24       	eor	r7, r7
			if(!__flag)
				__flag = 1;
		}
		else
			if(__flag)
				__string[__i++] = 0x30;
   152c8:	a0 e3       	ldi	r26, 0x30	; 48
   152ca:	6a 2e       	mov	r6, r26
		return;
	}

	__num = __value;
	for(__count = 0; __count < 10; __count++){
		if(__num >= __devider){
   152cc:	8c 14       	cp	r8, r12
   152ce:	9d 04       	cpc	r9, r13
   152d0:	ae 04       	cpc	r10, r14
   152d2:	bf 04       	cpc	r11, r15
   152d4:	d0 f0       	brcs	.+52     	; 0x1530a <Int2Str+0x8a>
			__tmp = (int)(__num / __devider);
   152d6:	c5 01       	movw	r24, r10
   152d8:	b4 01       	movw	r22, r8
   152da:	a7 01       	movw	r20, r14
   152dc:	96 01       	movw	r18, r12
   152de:	0e 94 a1 aa 	call	0x15542	; 0x15542 <__udivmodsi4>
   152e2:	12 2f       	mov	r17, r18
			__num = __num % __devider;
   152e4:	c5 01       	movw	r24, r10
   152e6:	b4 01       	movw	r22, r8
   152e8:	a7 01       	movw	r20, r14
   152ea:	96 01       	movw	r18, r12
   152ec:	0e 94 a1 aa 	call	0x15542	; 0x15542 <__udivmodsi4>
   152f0:	ac 01       	movw	r20, r24
   152f2:	cb 01       	movw	r24, r22
   152f4:	da 01       	movw	r26, r20
   152f6:	4c 01       	movw	r8, r24
   152f8:	5d 01       	movw	r10, r26
			__string[__i++] = __tmp + 0x30;
   152fa:	fe 01       	movw	r30, r28
   152fc:	e0 0f       	add	r30, r16
   152fe:	f1 1d       	adc	r31, r1
   15300:	10 5d       	subi	r17, 0xD0	; 208
   15302:	10 83       	st	Z, r17
   15304:	0f 5f       	subi	r16, 0xFF	; 255
   15306:	11 e0       	ldi	r17, 0x01	; 1
   15308:	07 c0       	rjmp	.+14     	; 0x15318 <Int2Str+0x98>
			if(!__flag)
				__flag = 1;
		}
		else
			if(__flag)
   1530a:	11 23       	and	r17, r17
   1530c:	29 f0       	breq	.+10     	; 0x15318 <Int2Str+0x98>
				__string[__i++] = 0x30;
   1530e:	fe 01       	movw	r30, r28
   15310:	e0 0f       	add	r30, r16
   15312:	f1 1d       	adc	r31, r1
   15314:	60 82       	st	Z, r6
   15316:	0f 5f       	subi	r16, 0xFF	; 255
		__string[1] = '\0';
		return;
	}

	__num = __value;
	for(__count = 0; __count < 10; __count++){
   15318:	73 94       	inc	r7
   1531a:	8a e0       	ldi	r24, 0x0A	; 10
   1531c:	78 16       	cp	r7, r24
   1531e:	69 f0       	breq	.+26     	; 0x1533a <Int2Str+0xba>
				__flag = 1;
		}
		else
			if(__flag)
				__string[__i++] = 0x30;
		__devider = __devider / 10;
   15320:	c7 01       	movw	r24, r14
   15322:	b6 01       	movw	r22, r12
   15324:	2a e0       	ldi	r18, 0x0A	; 10
   15326:	30 e0       	ldi	r19, 0x00	; 0
   15328:	40 e0       	ldi	r20, 0x00	; 0
   1532a:	50 e0       	ldi	r21, 0x00	; 0
   1532c:	0e 94 a1 aa 	call	0x15542	; 0x15542 <__udivmodsi4>
   15330:	c9 01       	movw	r24, r18
   15332:	da 01       	movw	r26, r20
   15334:	6c 01       	movw	r12, r24
   15336:	7d 01       	movw	r14, r26
   15338:	c9 cf       	rjmp	.-110    	; 0x152cc <Int2Str+0x4c>
	}
	__string[__i] = '\0';
   1533a:	c0 0f       	add	r28, r16
   1533c:	d1 1d       	adc	r29, r1
   1533e:	18 82       	st	Y, r1
}
   15340:	df 91       	pop	r29
   15342:	cf 91       	pop	r28
   15344:	1f 91       	pop	r17
   15346:	0f 91       	pop	r16
   15348:	ff 90       	pop	r15
   1534a:	ef 90       	pop	r14
   1534c:	df 90       	pop	r13
   1534e:	cf 90       	pop	r12
   15350:	bf 90       	pop	r11
   15352:	af 90       	pop	r10
   15354:	9f 90       	pop	r9
   15356:	8f 90       	pop	r8
   15358:	7f 90       	pop	r7
   1535a:	6f 90       	pop	r6
   1535c:	08 95       	ret

0001535e <Str2Int>:

unsigned long Str2Int(char* __string){
   1535e:	6f 92       	push	r6
   15360:	7f 92       	push	r7
   15362:	8f 92       	push	r8
   15364:	9f 92       	push	r9
   15366:	af 92       	push	r10
   15368:	bf 92       	push	r11
   1536a:	cf 92       	push	r12
   1536c:	df 92       	push	r13
   1536e:	ef 92       	push	r14
   15370:	ff 92       	push	r15
   15372:	0f 93       	push	r16
   15374:	1f 93       	push	r17
   15376:	cf 93       	push	r28
   15378:	df 93       	push	r29
   1537a:	ec 01       	movw	r28, r24
	unsigned char	__i, __len;
	unsigned long	__multiplier = 1, __retval = 0;

	__len = strlen(__string);
   1537c:	dc 01       	movw	r26, r24
   1537e:	0d 90       	ld	r0, X+
   15380:	00 20       	and	r0, r0
   15382:	e9 f7       	brne	.-6      	; 0x1537e <Str2Int+0x20>
   15384:	11 97       	sbiw	r26, 0x01	; 1
   15386:	7a 2e       	mov	r7, r26
   15388:	78 1a       	sub	r7, r24

	if(__len > 0 && __len < 11){
   1538a:	87 2d       	mov	r24, r7
   1538c:	81 50       	subi	r24, 0x01	; 1
   1538e:	8a 30       	cpi	r24, 0x0A	; 10
   15390:	08 f0       	brcs	.+2      	; 0x15394 <Str2Int+0x36>
   15392:	64 c0       	rjmp	.+200    	; 0x1545c <Str2Int+0xfe>
   15394:	4e 01       	movw	r8, r28
   15396:	fe 01       	movw	r30, r28
		__devider = __devider / 10;
	}
	__string[__i] = '\0';
}

unsigned long Str2Int(char* __string){
   15398:	6c 2e       	mov	r6, r28
   1539a:	05 c0       	rjmp	.+10     	; 0x153a6 <Str2Int+0x48>

	__len = strlen(__string);

	if(__len > 0 && __len < 11){
		for(__i = 0; __i < __len; __i++)
			if(__string[__i] < 0x30 || __string[__i] > 0x39)
   1539c:	81 91       	ld	r24, Z+
   1539e:	80 53       	subi	r24, 0x30	; 48
   153a0:	8a 30       	cpi	r24, 0x0A	; 10
   153a2:	08 f0       	brcs	.+2      	; 0x153a6 <Str2Int+0x48>
   153a4:	5b c0       	rjmp	.+182    	; 0x1545c <Str2Int+0xfe>
	unsigned long	__multiplier = 1, __retval = 0;

	__len = strlen(__string);

	if(__len > 0 && __len < 11){
		for(__i = 0; __i < __len; __i++)
   153a6:	8e 2f       	mov	r24, r30
   153a8:	86 19       	sub	r24, r6
   153aa:	87 15       	cp	r24, r7
   153ac:	b8 f3       	brcs	.-18     	; 0x1539c <Str2Int+0x3e>
			if(__string[__i] < 0x30 || __string[__i] > 0x39)
				return 0;
		if(__len == 10){
   153ae:	8a e0       	ldi	r24, 0x0A	; 10
   153b0:	78 16       	cp	r7, r24
   153b2:	f9 f4       	brne	.+62     	; 0x153f2 <Str2Int+0x94>
			if(__string[0] < 0x30 || __string[0] > 0x32)
   153b4:	98 81       	ld	r25, Y
   153b6:	89 2f       	mov	r24, r25
   153b8:	80 53       	subi	r24, 0x30	; 48
   153ba:	83 30       	cpi	r24, 0x03	; 3
   153bc:	08 f0       	brcs	.+2      	; 0x153c0 <Str2Int+0x62>
   153be:	4e c0       	rjmp	.+156    	; 0x1545c <Str2Int+0xfe>
				return 0;
			if(__string[0] == 0x32){
   153c0:	92 33       	cpi	r25, 0x32	; 50
   153c2:	b9 f4       	brne	.+46     	; 0x153f2 <Str2Int+0x94>
   153c4:	fe 01       	movw	r30, r28
   153c6:	91 e0       	ldi	r25, 0x01	; 1
				for(__i = 1; __i < __len; __i++)
					if(__string[__i] < 0x30 || __string[__i] > 0x30)
   153c8:	81 81       	ldd	r24, Z+1	; 0x01
   153ca:	80 33       	cpi	r24, 0x30	; 48
   153cc:	09 f0       	breq	.+2      	; 0x153d0 <Str2Int+0x72>
   153ce:	46 c0       	rjmp	.+140    	; 0x1545c <Str2Int+0xfe>
				return 0;
		if(__len == 10){
			if(__string[0] < 0x30 || __string[0] > 0x32)
				return 0;
			if(__string[0] == 0x32){
				for(__i = 1; __i < __len; __i++)
   153d0:	9f 5f       	subi	r25, 0xFF	; 255
   153d2:	31 96       	adiw	r30, 0x01	; 1
   153d4:	9a 30       	cpi	r25, 0x0A	; 10
   153d6:	c1 f7       	brne	.-16     	; 0x153c8 <Str2Int+0x6a>
   153d8:	0c c0       	rjmp	.+24     	; 0x153f2 <Str2Int+0x94>
					if(__string[__i] < 0x30 || __string[__i] > 0x30)
						return 0;
			}
		}
		for(__i = 0; __i < __len - 1; __i++)
			__multiplier *= 10;
   153da:	c6 01       	movw	r24, r12
   153dc:	b5 01       	movw	r22, r10
   153de:	2a e0       	ldi	r18, 0x0A	; 10
   153e0:	30 e0       	ldi	r19, 0x00	; 0
   153e2:	40 e0       	ldi	r20, 0x00	; 0
   153e4:	50 e0       	ldi	r21, 0x00	; 0
   153e6:	0e 94 42 aa 	call	0x15484	; 0x15484 <__mulsi3>
   153ea:	5b 01       	movw	r10, r22
   153ec:	6c 01       	movw	r12, r24
				for(__i = 1; __i < __len; __i++)
					if(__string[__i] < 0x30 || __string[__i] > 0x30)
						return 0;
			}
		}
		for(__i = 0; __i < __len - 1; __i++)
   153ee:	1f 5f       	subi	r17, 0xFF	; 255
   153f0:	09 c0       	rjmp	.+18     	; 0x15404 <Str2Int+0xa6>
   153f2:	10 e0       	ldi	r17, 0x00	; 0
   153f4:	01 e0       	ldi	r16, 0x01	; 1
   153f6:	a0 2e       	mov	r10, r16
   153f8:	b1 2c       	mov	r11, r1
   153fa:	c1 2c       	mov	r12, r1
   153fc:	d1 2c       	mov	r13, r1
   153fe:	c7 2d       	mov	r28, r7
   15400:	d0 e0       	ldi	r29, 0x00	; 0
   15402:	21 97       	sbiw	r28, 0x01	; 1
   15404:	81 2f       	mov	r24, r17
   15406:	90 e0       	ldi	r25, 0x00	; 0
   15408:	8c 17       	cp	r24, r28
   1540a:	9d 07       	cpc	r25, r29
   1540c:	34 f3       	brlt	.-52     	; 0x153da <Str2Int+0x7c>
   1540e:	ee 24       	eor	r14, r14
   15410:	ff 24       	eor	r15, r15
   15412:	87 01       	movw	r16, r14
   15414:	1e c0       	rjmp	.+60     	; 0x15452 <Str2Int+0xf4>
			__multiplier *= 10;
		for(__i = 0; __i < __len; __i++, __multiplier /= 10)
			__retval += ((unsigned long)(__string[__i] - 0x30) * __multiplier);
   15416:	f4 01       	movw	r30, r8
   15418:	21 91       	ld	r18, Z+
   1541a:	4f 01       	movw	r8, r30
   1541c:	30 e0       	ldi	r19, 0x00	; 0
   1541e:	20 53       	subi	r18, 0x30	; 48
   15420:	30 40       	sbci	r19, 0x00	; 0
   15422:	44 27       	eor	r20, r20
   15424:	37 fd       	sbrc	r19, 7
   15426:	40 95       	com	r20
   15428:	54 2f       	mov	r21, r20
   1542a:	c6 01       	movw	r24, r12
   1542c:	b5 01       	movw	r22, r10
   1542e:	0e 94 42 aa 	call	0x15484	; 0x15484 <__mulsi3>
   15432:	e6 0e       	add	r14, r22
   15434:	f7 1e       	adc	r15, r23
   15436:	08 1f       	adc	r16, r24
   15438:	19 1f       	adc	r17, r25
						return 0;
			}
		}
		for(__i = 0; __i < __len - 1; __i++)
			__multiplier *= 10;
		for(__i = 0; __i < __len; __i++, __multiplier /= 10)
   1543a:	c6 01       	movw	r24, r12
   1543c:	b5 01       	movw	r22, r10
   1543e:	2a e0       	ldi	r18, 0x0A	; 10
   15440:	30 e0       	ldi	r19, 0x00	; 0
   15442:	40 e0       	ldi	r20, 0x00	; 0
   15444:	50 e0       	ldi	r21, 0x00	; 0
   15446:	0e 94 a1 aa 	call	0x15542	; 0x15542 <__udivmodsi4>
   1544a:	c9 01       	movw	r24, r18
   1544c:	da 01       	movw	r26, r20
   1544e:	5c 01       	movw	r10, r24
   15450:	6d 01       	movw	r12, r26
   15452:	88 2d       	mov	r24, r8
   15454:	86 19       	sub	r24, r6
   15456:	87 15       	cp	r24, r7
   15458:	f0 f2       	brcs	.-68     	; 0x15416 <Str2Int+0xb8>
   1545a:	03 c0       	rjmp	.+6      	; 0x15462 <Str2Int+0x104>
   1545c:	ee 24       	eor	r14, r14
   1545e:	ff 24       	eor	r15, r15
   15460:	87 01       	movw	r16, r14
			__retval += ((unsigned long)(__string[__i] - 0x30) * __multiplier);
	}
	return __retval;
}
   15462:	b7 01       	movw	r22, r14
   15464:	c8 01       	movw	r24, r16
   15466:	df 91       	pop	r29
   15468:	cf 91       	pop	r28
   1546a:	1f 91       	pop	r17
   1546c:	0f 91       	pop	r16
   1546e:	ff 90       	pop	r15
   15470:	ef 90       	pop	r14
   15472:	df 90       	pop	r13
   15474:	cf 90       	pop	r12
   15476:	bf 90       	pop	r11
   15478:	af 90       	pop	r10
   1547a:	9f 90       	pop	r9
   1547c:	8f 90       	pop	r8
   1547e:	7f 90       	pop	r7
   15480:	6f 90       	pop	r6
   15482:	08 95       	ret

00015484 <__mulsi3>:
   15484:	62 9f       	mul	r22, r18
   15486:	d0 01       	movw	r26, r0
   15488:	73 9f       	mul	r23, r19
   1548a:	f0 01       	movw	r30, r0
   1548c:	82 9f       	mul	r24, r18
   1548e:	e0 0d       	add	r30, r0
   15490:	f1 1d       	adc	r31, r1
   15492:	64 9f       	mul	r22, r20
   15494:	e0 0d       	add	r30, r0
   15496:	f1 1d       	adc	r31, r1
   15498:	92 9f       	mul	r25, r18
   1549a:	f0 0d       	add	r31, r0
   1549c:	83 9f       	mul	r24, r19
   1549e:	f0 0d       	add	r31, r0
   154a0:	74 9f       	mul	r23, r20
   154a2:	f0 0d       	add	r31, r0
   154a4:	65 9f       	mul	r22, r21
   154a6:	f0 0d       	add	r31, r0
   154a8:	99 27       	eor	r25, r25
   154aa:	72 9f       	mul	r23, r18
   154ac:	b0 0d       	add	r27, r0
   154ae:	e1 1d       	adc	r30, r1
   154b0:	f9 1f       	adc	r31, r25
   154b2:	63 9f       	mul	r22, r19
   154b4:	b0 0d       	add	r27, r0
   154b6:	e1 1d       	adc	r30, r1
   154b8:	f9 1f       	adc	r31, r25
   154ba:	bd 01       	movw	r22, r26
   154bc:	cf 01       	movw	r24, r30
   154be:	11 24       	eor	r1, r1
   154c0:	08 95       	ret

000154c2 <__udivmodqi4>:
   154c2:	99 1b       	sub	r25, r25
   154c4:	79 e0       	ldi	r23, 0x09	; 9
   154c6:	04 c0       	rjmp	.+8      	; 0x154d0 <__udivmodqi4_ep>

000154c8 <__udivmodqi4_loop>:
   154c8:	99 1f       	adc	r25, r25
   154ca:	96 17       	cp	r25, r22
   154cc:	08 f0       	brcs	.+2      	; 0x154d0 <__udivmodqi4_ep>
   154ce:	96 1b       	sub	r25, r22

000154d0 <__udivmodqi4_ep>:
   154d0:	88 1f       	adc	r24, r24
   154d2:	7a 95       	dec	r23
   154d4:	c9 f7       	brne	.-14     	; 0x154c8 <__udivmodqi4_loop>
   154d6:	80 95       	com	r24
   154d8:	08 95       	ret

000154da <__divmodqi4>:
   154da:	87 fb       	bst	r24, 7
   154dc:	08 2e       	mov	r0, r24
   154de:	06 26       	eor	r0, r22
   154e0:	87 fd       	sbrc	r24, 7
   154e2:	81 95       	neg	r24
   154e4:	67 fd       	sbrc	r22, 7
   154e6:	61 95       	neg	r22
   154e8:	ec df       	rcall	.-40     	; 0x154c2 <__udivmodqi4>
   154ea:	0e f4       	brtc	.+2      	; 0x154ee <__divmodqi4_1>
   154ec:	91 95       	neg	r25

000154ee <__divmodqi4_1>:
   154ee:	07 fc       	sbrc	r0, 7
   154f0:	81 95       	neg	r24

000154f2 <__divmodqi4_exit>:
   154f2:	08 95       	ret

000154f4 <__udivmodhi4>:
   154f4:	aa 1b       	sub	r26, r26
   154f6:	bb 1b       	sub	r27, r27
   154f8:	51 e1       	ldi	r21, 0x11	; 17
   154fa:	07 c0       	rjmp	.+14     	; 0x1550a <__udivmodhi4_ep>

000154fc <__udivmodhi4_loop>:
   154fc:	aa 1f       	adc	r26, r26
   154fe:	bb 1f       	adc	r27, r27
   15500:	a6 17       	cp	r26, r22
   15502:	b7 07       	cpc	r27, r23
   15504:	10 f0       	brcs	.+4      	; 0x1550a <__udivmodhi4_ep>
   15506:	a6 1b       	sub	r26, r22
   15508:	b7 0b       	sbc	r27, r23

0001550a <__udivmodhi4_ep>:
   1550a:	88 1f       	adc	r24, r24
   1550c:	99 1f       	adc	r25, r25
   1550e:	5a 95       	dec	r21
   15510:	a9 f7       	brne	.-22     	; 0x154fc <__udivmodhi4_loop>
   15512:	80 95       	com	r24
   15514:	90 95       	com	r25
   15516:	bc 01       	movw	r22, r24
   15518:	cd 01       	movw	r24, r26
   1551a:	08 95       	ret

0001551c <__divmodhi4>:
   1551c:	97 fb       	bst	r25, 7
   1551e:	09 2e       	mov	r0, r25
   15520:	07 26       	eor	r0, r23
   15522:	0a d0       	rcall	.+20     	; 0x15538 <__divmodhi4_neg1>
   15524:	77 fd       	sbrc	r23, 7
   15526:	04 d0       	rcall	.+8      	; 0x15530 <__divmodhi4_neg2>
   15528:	e5 df       	rcall	.-54     	; 0x154f4 <__udivmodhi4>
   1552a:	06 d0       	rcall	.+12     	; 0x15538 <__divmodhi4_neg1>
   1552c:	00 20       	and	r0, r0
   1552e:	1a f4       	brpl	.+6      	; 0x15536 <__divmodhi4_exit>

00015530 <__divmodhi4_neg2>:
   15530:	70 95       	com	r23
   15532:	61 95       	neg	r22
   15534:	7f 4f       	sbci	r23, 0xFF	; 255

00015536 <__divmodhi4_exit>:
   15536:	08 95       	ret

00015538 <__divmodhi4_neg1>:
   15538:	f6 f7       	brtc	.-4      	; 0x15536 <__divmodhi4_exit>
   1553a:	90 95       	com	r25
   1553c:	81 95       	neg	r24
   1553e:	9f 4f       	sbci	r25, 0xFF	; 255
   15540:	08 95       	ret

00015542 <__udivmodsi4>:
   15542:	a1 e2       	ldi	r26, 0x21	; 33
   15544:	1a 2e       	mov	r1, r26
   15546:	aa 1b       	sub	r26, r26
   15548:	bb 1b       	sub	r27, r27
   1554a:	fd 01       	movw	r30, r26
   1554c:	0d c0       	rjmp	.+26     	; 0x15568 <__udivmodsi4_ep>

0001554e <__udivmodsi4_loop>:
   1554e:	aa 1f       	adc	r26, r26
   15550:	bb 1f       	adc	r27, r27
   15552:	ee 1f       	adc	r30, r30
   15554:	ff 1f       	adc	r31, r31
   15556:	a2 17       	cp	r26, r18
   15558:	b3 07       	cpc	r27, r19
   1555a:	e4 07       	cpc	r30, r20
   1555c:	f5 07       	cpc	r31, r21
   1555e:	20 f0       	brcs	.+8      	; 0x15568 <__udivmodsi4_ep>
   15560:	a2 1b       	sub	r26, r18
   15562:	b3 0b       	sbc	r27, r19
   15564:	e4 0b       	sbc	r30, r20
   15566:	f5 0b       	sbc	r31, r21

00015568 <__udivmodsi4_ep>:
   15568:	66 1f       	adc	r22, r22
   1556a:	77 1f       	adc	r23, r23
   1556c:	88 1f       	adc	r24, r24
   1556e:	99 1f       	adc	r25, r25
   15570:	1a 94       	dec	r1
   15572:	69 f7       	brne	.-38     	; 0x1554e <__udivmodsi4_loop>
   15574:	60 95       	com	r22
   15576:	70 95       	com	r23
   15578:	80 95       	com	r24
   1557a:	90 95       	com	r25
   1557c:	9b 01       	movw	r18, r22
   1557e:	ac 01       	movw	r20, r24
   15580:	bd 01       	movw	r22, r26
   15582:	cf 01       	movw	r24, r30
   15584:	08 95       	ret

00015586 <atoi>:
   15586:	fc 01       	movw	r30, r24
   15588:	88 27       	eor	r24, r24
   1558a:	99 27       	eor	r25, r25
   1558c:	e8 94       	clt
   1558e:	21 91       	ld	r18, Z+
   15590:	20 32       	cpi	r18, 0x20	; 32
   15592:	e9 f3       	breq	.-6      	; 0x1558e <atoi+0x8>
   15594:	29 30       	cpi	r18, 0x09	; 9
   15596:	10 f0       	brcs	.+4      	; 0x1559c <atoi+0x16>
   15598:	2e 30       	cpi	r18, 0x0E	; 14
   1559a:	c8 f3       	brcs	.-14     	; 0x1558e <atoi+0x8>
   1559c:	2b 32       	cpi	r18, 0x2B	; 43
   1559e:	41 f0       	breq	.+16     	; 0x155b0 <atoi+0x2a>
   155a0:	2d 32       	cpi	r18, 0x2D	; 45
   155a2:	39 f4       	brne	.+14     	; 0x155b2 <atoi+0x2c>
   155a4:	68 94       	set
   155a6:	04 c0       	rjmp	.+8      	; 0x155b0 <atoi+0x2a>
   155a8:	0e 94 f1 aa 	call	0x155e2	; 0x155e2 <__mulhi_const_10>
   155ac:	82 0f       	add	r24, r18
   155ae:	91 1d       	adc	r25, r1
   155b0:	21 91       	ld	r18, Z+
   155b2:	20 53       	subi	r18, 0x30	; 48
   155b4:	2a 30       	cpi	r18, 0x0A	; 10
   155b6:	c0 f3       	brcs	.-16     	; 0x155a8 <atoi+0x22>
   155b8:	1e f4       	brtc	.+6      	; 0x155c0 <atoi+0x3a>
   155ba:	90 95       	com	r25
   155bc:	81 95       	neg	r24
   155be:	9f 4f       	sbci	r25, 0xFF	; 255
   155c0:	08 95       	ret

000155c2 <strcpy_P>:
   155c2:	fb 01       	movw	r30, r22
   155c4:	dc 01       	movw	r26, r24
   155c6:	05 90       	lpm	r0, Z+
   155c8:	0d 92       	st	X+, r0
   155ca:	00 20       	and	r0, r0
   155cc:	e1 f7       	brne	.-8      	; 0x155c6 <strcpy_P+0x4>
   155ce:	08 95       	ret

000155d0 <strcmp>:
   155d0:	fb 01       	movw	r30, r22
   155d2:	dc 01       	movw	r26, r24
   155d4:	8d 91       	ld	r24, X+
   155d6:	01 90       	ld	r0, Z+
   155d8:	80 19       	sub	r24, r0
   155da:	01 10       	cpse	r0, r1
   155dc:	d9 f3       	breq	.-10     	; 0x155d4 <strcmp+0x4>
   155de:	99 0b       	sbc	r25, r25
   155e0:	08 95       	ret

000155e2 <__mulhi_const_10>:
   155e2:	7a e0       	ldi	r23, 0x0A	; 10
   155e4:	97 9f       	mul	r25, r23
   155e6:	90 2d       	mov	r25, r0
   155e8:	87 9f       	mul	r24, r23
   155ea:	80 2d       	mov	r24, r0
   155ec:	91 0d       	add	r25, r1
   155ee:	11 24       	eor	r1, r1
   155f0:	08 95       	ret

000155f2 <sprintf_P>:
   155f2:	0f 93       	push	r16
   155f4:	1f 93       	push	r17
   155f6:	df 93       	push	r29
   155f8:	cf 93       	push	r28
   155fa:	cd b7       	in	r28, 0x3d	; 61
   155fc:	de b7       	in	r29, 0x3e	; 62
   155fe:	2e 97       	sbiw	r28, 0x0e	; 14
   15600:	0f b6       	in	r0, 0x3f	; 63
   15602:	f8 94       	cli
   15604:	de bf       	out	0x3e, r29	; 62
   15606:	0f be       	out	0x3f, r0	; 63
   15608:	cd bf       	out	0x3d, r28	; 61
   1560a:	0d 89       	ldd	r16, Y+21	; 0x15
   1560c:	1e 89       	ldd	r17, Y+22	; 0x16
   1560e:	8e e0       	ldi	r24, 0x0E	; 14
   15610:	8c 83       	std	Y+4, r24	; 0x04
   15612:	1a 83       	std	Y+2, r17	; 0x02
   15614:	09 83       	std	Y+1, r16	; 0x01
   15616:	8f ef       	ldi	r24, 0xFF	; 255
   15618:	9f e7       	ldi	r25, 0x7F	; 127
   1561a:	9e 83       	std	Y+6, r25	; 0x06
   1561c:	8d 83       	std	Y+5, r24	; 0x05
   1561e:	9e 01       	movw	r18, r28
   15620:	27 5e       	subi	r18, 0xE7	; 231
   15622:	3f 4f       	sbci	r19, 0xFF	; 255
   15624:	ce 01       	movw	r24, r28
   15626:	01 96       	adiw	r24, 0x01	; 1
   15628:	6f 89       	ldd	r22, Y+23	; 0x17
   1562a:	78 8d       	ldd	r23, Y+24	; 0x18
   1562c:	a9 01       	movw	r20, r18
   1562e:	0e 94 2a ab 	call	0x15654	; 0x15654 <vfprintf>
   15632:	2f 81       	ldd	r18, Y+7	; 0x07
   15634:	38 85       	ldd	r19, Y+8	; 0x08
   15636:	02 0f       	add	r16, r18
   15638:	13 1f       	adc	r17, r19
   1563a:	f8 01       	movw	r30, r16
   1563c:	10 82       	st	Z, r1
   1563e:	2e 96       	adiw	r28, 0x0e	; 14
   15640:	0f b6       	in	r0, 0x3f	; 63
   15642:	f8 94       	cli
   15644:	de bf       	out	0x3e, r29	; 62
   15646:	0f be       	out	0x3f, r0	; 63
   15648:	cd bf       	out	0x3d, r28	; 61
   1564a:	cf 91       	pop	r28
   1564c:	df 91       	pop	r29
   1564e:	1f 91       	pop	r17
   15650:	0f 91       	pop	r16
   15652:	08 95       	ret

00015654 <vfprintf>:
   15654:	2f 92       	push	r2
   15656:	3f 92       	push	r3
   15658:	4f 92       	push	r4
   1565a:	5f 92       	push	r5
   1565c:	6f 92       	push	r6
   1565e:	7f 92       	push	r7
   15660:	8f 92       	push	r8
   15662:	9f 92       	push	r9
   15664:	af 92       	push	r10
   15666:	bf 92       	push	r11
   15668:	cf 92       	push	r12
   1566a:	df 92       	push	r13
   1566c:	ef 92       	push	r14
   1566e:	ff 92       	push	r15
   15670:	0f 93       	push	r16
   15672:	1f 93       	push	r17
   15674:	df 93       	push	r29
   15676:	cf 93       	push	r28
   15678:	cd b7       	in	r28, 0x3d	; 61
   1567a:	de b7       	in	r29, 0x3e	; 62
   1567c:	2b 97       	sbiw	r28, 0x0b	; 11
   1567e:	0f b6       	in	r0, 0x3f	; 63
   15680:	f8 94       	cli
   15682:	de bf       	out	0x3e, r29	; 62
   15684:	0f be       	out	0x3f, r0	; 63
   15686:	cd bf       	out	0x3d, r28	; 61
   15688:	3c 01       	movw	r6, r24
   1568a:	2b 01       	movw	r4, r22
   1568c:	5a 01       	movw	r10, r20
   1568e:	fc 01       	movw	r30, r24
   15690:	17 82       	std	Z+7, r1	; 0x07
   15692:	16 82       	std	Z+6, r1	; 0x06
   15694:	83 81       	ldd	r24, Z+3	; 0x03
   15696:	81 fd       	sbrc	r24, 1
   15698:	03 c0       	rjmp	.+6      	; 0x156a0 <vfprintf+0x4c>
   1569a:	6f ef       	ldi	r22, 0xFF	; 255
   1569c:	7f ef       	ldi	r23, 0xFF	; 255
   1569e:	c6 c1       	rjmp	.+908    	; 0x15a2c <vfprintf+0x3d8>
   156a0:	9a e0       	ldi	r25, 0x0A	; 10
   156a2:	89 2e       	mov	r8, r25
   156a4:	1e 01       	movw	r2, r28
   156a6:	08 94       	sec
   156a8:	21 1c       	adc	r2, r1
   156aa:	31 1c       	adc	r3, r1
   156ac:	f3 01       	movw	r30, r6
   156ae:	23 81       	ldd	r18, Z+3	; 0x03
   156b0:	f2 01       	movw	r30, r4
   156b2:	23 fd       	sbrc	r18, 3
   156b4:	85 91       	lpm	r24, Z+
   156b6:	23 ff       	sbrs	r18, 3
   156b8:	81 91       	ld	r24, Z+
   156ba:	2f 01       	movw	r4, r30
   156bc:	88 23       	and	r24, r24
   156be:	09 f4       	brne	.+2      	; 0x156c2 <vfprintf+0x6e>
   156c0:	b2 c1       	rjmp	.+868    	; 0x15a26 <vfprintf+0x3d2>
   156c2:	85 32       	cpi	r24, 0x25	; 37
   156c4:	39 f4       	brne	.+14     	; 0x156d4 <vfprintf+0x80>
   156c6:	23 fd       	sbrc	r18, 3
   156c8:	85 91       	lpm	r24, Z+
   156ca:	23 ff       	sbrs	r18, 3
   156cc:	81 91       	ld	r24, Z+
   156ce:	2f 01       	movw	r4, r30
   156d0:	85 32       	cpi	r24, 0x25	; 37
   156d2:	29 f4       	brne	.+10     	; 0x156de <vfprintf+0x8a>
   156d4:	90 e0       	ldi	r25, 0x00	; 0
   156d6:	b3 01       	movw	r22, r6
   156d8:	0e 94 75 ad 	call	0x15aea	; 0x15aea <fputc>
   156dc:	e7 cf       	rjmp	.-50     	; 0x156ac <vfprintf+0x58>
   156de:	98 2f       	mov	r25, r24
   156e0:	ff 24       	eor	r15, r15
   156e2:	ee 24       	eor	r14, r14
   156e4:	99 24       	eor	r9, r9
   156e6:	ff e1       	ldi	r31, 0x1F	; 31
   156e8:	ff 15       	cp	r31, r15
   156ea:	d0 f0       	brcs	.+52     	; 0x15720 <vfprintf+0xcc>
   156ec:	9b 32       	cpi	r25, 0x2B	; 43
   156ee:	69 f0       	breq	.+26     	; 0x1570a <vfprintf+0xb6>
   156f0:	9c 32       	cpi	r25, 0x2C	; 44
   156f2:	28 f4       	brcc	.+10     	; 0x156fe <vfprintf+0xaa>
   156f4:	90 32       	cpi	r25, 0x20	; 32
   156f6:	59 f0       	breq	.+22     	; 0x1570e <vfprintf+0xba>
   156f8:	93 32       	cpi	r25, 0x23	; 35
   156fa:	91 f4       	brne	.+36     	; 0x15720 <vfprintf+0xcc>
   156fc:	0e c0       	rjmp	.+28     	; 0x1571a <vfprintf+0xc6>
   156fe:	9d 32       	cpi	r25, 0x2D	; 45
   15700:	49 f0       	breq	.+18     	; 0x15714 <vfprintf+0xc0>
   15702:	90 33       	cpi	r25, 0x30	; 48
   15704:	69 f4       	brne	.+26     	; 0x15720 <vfprintf+0xcc>
   15706:	41 e0       	ldi	r20, 0x01	; 1
   15708:	24 c0       	rjmp	.+72     	; 0x15752 <vfprintf+0xfe>
   1570a:	52 e0       	ldi	r21, 0x02	; 2
   1570c:	f5 2a       	or	r15, r21
   1570e:	84 e0       	ldi	r24, 0x04	; 4
   15710:	f8 2a       	or	r15, r24
   15712:	28 c0       	rjmp	.+80     	; 0x15764 <vfprintf+0x110>
   15714:	98 e0       	ldi	r25, 0x08	; 8
   15716:	f9 2a       	or	r15, r25
   15718:	25 c0       	rjmp	.+74     	; 0x15764 <vfprintf+0x110>
   1571a:	e0 e1       	ldi	r30, 0x10	; 16
   1571c:	fe 2a       	or	r15, r30
   1571e:	22 c0       	rjmp	.+68     	; 0x15764 <vfprintf+0x110>
   15720:	f7 fc       	sbrc	r15, 7
   15722:	29 c0       	rjmp	.+82     	; 0x15776 <vfprintf+0x122>
   15724:	89 2f       	mov	r24, r25
   15726:	80 53       	subi	r24, 0x30	; 48
   15728:	8a 30       	cpi	r24, 0x0A	; 10
   1572a:	70 f4       	brcc	.+28     	; 0x15748 <vfprintf+0xf4>
   1572c:	f6 fe       	sbrs	r15, 6
   1572e:	05 c0       	rjmp	.+10     	; 0x1573a <vfprintf+0xe6>
   15730:	98 9c       	mul	r9, r8
   15732:	90 2c       	mov	r9, r0
   15734:	11 24       	eor	r1, r1
   15736:	98 0e       	add	r9, r24
   15738:	15 c0       	rjmp	.+42     	; 0x15764 <vfprintf+0x110>
   1573a:	e8 9c       	mul	r14, r8
   1573c:	e0 2c       	mov	r14, r0
   1573e:	11 24       	eor	r1, r1
   15740:	e8 0e       	add	r14, r24
   15742:	f0 e2       	ldi	r31, 0x20	; 32
   15744:	ff 2a       	or	r15, r31
   15746:	0e c0       	rjmp	.+28     	; 0x15764 <vfprintf+0x110>
   15748:	9e 32       	cpi	r25, 0x2E	; 46
   1574a:	29 f4       	brne	.+10     	; 0x15756 <vfprintf+0x102>
   1574c:	f6 fc       	sbrc	r15, 6
   1574e:	6b c1       	rjmp	.+726    	; 0x15a26 <vfprintf+0x3d2>
   15750:	40 e4       	ldi	r20, 0x40	; 64
   15752:	f4 2a       	or	r15, r20
   15754:	07 c0       	rjmp	.+14     	; 0x15764 <vfprintf+0x110>
   15756:	9c 36       	cpi	r25, 0x6C	; 108
   15758:	19 f4       	brne	.+6      	; 0x15760 <vfprintf+0x10c>
   1575a:	50 e8       	ldi	r21, 0x80	; 128
   1575c:	f5 2a       	or	r15, r21
   1575e:	02 c0       	rjmp	.+4      	; 0x15764 <vfprintf+0x110>
   15760:	98 36       	cpi	r25, 0x68	; 104
   15762:	49 f4       	brne	.+18     	; 0x15776 <vfprintf+0x122>
   15764:	f2 01       	movw	r30, r4
   15766:	23 fd       	sbrc	r18, 3
   15768:	95 91       	lpm	r25, Z+
   1576a:	23 ff       	sbrs	r18, 3
   1576c:	91 91       	ld	r25, Z+
   1576e:	2f 01       	movw	r4, r30
   15770:	99 23       	and	r25, r25
   15772:	09 f0       	breq	.+2      	; 0x15776 <vfprintf+0x122>
   15774:	b8 cf       	rjmp	.-144    	; 0x156e6 <vfprintf+0x92>
   15776:	89 2f       	mov	r24, r25
   15778:	85 54       	subi	r24, 0x45	; 69
   1577a:	83 30       	cpi	r24, 0x03	; 3
   1577c:	18 f0       	brcs	.+6      	; 0x15784 <vfprintf+0x130>
   1577e:	80 52       	subi	r24, 0x20	; 32
   15780:	83 30       	cpi	r24, 0x03	; 3
   15782:	38 f4       	brcc	.+14     	; 0x15792 <vfprintf+0x13e>
   15784:	44 e0       	ldi	r20, 0x04	; 4
   15786:	50 e0       	ldi	r21, 0x00	; 0
   15788:	a4 0e       	add	r10, r20
   1578a:	b5 1e       	adc	r11, r21
   1578c:	5f e3       	ldi	r21, 0x3F	; 63
   1578e:	59 83       	std	Y+1, r21	; 0x01
   15790:	0f c0       	rjmp	.+30     	; 0x157b0 <vfprintf+0x15c>
   15792:	93 36       	cpi	r25, 0x63	; 99
   15794:	31 f0       	breq	.+12     	; 0x157a2 <vfprintf+0x14e>
   15796:	93 37       	cpi	r25, 0x73	; 115
   15798:	79 f0       	breq	.+30     	; 0x157b8 <vfprintf+0x164>
   1579a:	93 35       	cpi	r25, 0x53	; 83
   1579c:	09 f0       	breq	.+2      	; 0x157a0 <vfprintf+0x14c>
   1579e:	56 c0       	rjmp	.+172    	; 0x1584c <vfprintf+0x1f8>
   157a0:	20 c0       	rjmp	.+64     	; 0x157e2 <vfprintf+0x18e>
   157a2:	f5 01       	movw	r30, r10
   157a4:	80 81       	ld	r24, Z
   157a6:	89 83       	std	Y+1, r24	; 0x01
   157a8:	42 e0       	ldi	r20, 0x02	; 2
   157aa:	50 e0       	ldi	r21, 0x00	; 0
   157ac:	a4 0e       	add	r10, r20
   157ae:	b5 1e       	adc	r11, r21
   157b0:	61 01       	movw	r12, r2
   157b2:	01 e0       	ldi	r16, 0x01	; 1
   157b4:	10 e0       	ldi	r17, 0x00	; 0
   157b6:	12 c0       	rjmp	.+36     	; 0x157dc <vfprintf+0x188>
   157b8:	f5 01       	movw	r30, r10
   157ba:	c0 80       	ld	r12, Z
   157bc:	d1 80       	ldd	r13, Z+1	; 0x01
   157be:	f6 fc       	sbrc	r15, 6
   157c0:	03 c0       	rjmp	.+6      	; 0x157c8 <vfprintf+0x174>
   157c2:	6f ef       	ldi	r22, 0xFF	; 255
   157c4:	7f ef       	ldi	r23, 0xFF	; 255
   157c6:	02 c0       	rjmp	.+4      	; 0x157cc <vfprintf+0x178>
   157c8:	69 2d       	mov	r22, r9
   157ca:	70 e0       	ldi	r23, 0x00	; 0
   157cc:	42 e0       	ldi	r20, 0x02	; 2
   157ce:	50 e0       	ldi	r21, 0x00	; 0
   157d0:	a4 0e       	add	r10, r20
   157d2:	b5 1e       	adc	r11, r21
   157d4:	c6 01       	movw	r24, r12
   157d6:	0e 94 6a ad 	call	0x15ad4	; 0x15ad4 <strnlen>
   157da:	8c 01       	movw	r16, r24
   157dc:	5f e7       	ldi	r21, 0x7F	; 127
   157de:	f5 22       	and	r15, r21
   157e0:	14 c0       	rjmp	.+40     	; 0x1580a <vfprintf+0x1b6>
   157e2:	f5 01       	movw	r30, r10
   157e4:	c0 80       	ld	r12, Z
   157e6:	d1 80       	ldd	r13, Z+1	; 0x01
   157e8:	f6 fc       	sbrc	r15, 6
   157ea:	03 c0       	rjmp	.+6      	; 0x157f2 <vfprintf+0x19e>
   157ec:	6f ef       	ldi	r22, 0xFF	; 255
   157ee:	7f ef       	ldi	r23, 0xFF	; 255
   157f0:	02 c0       	rjmp	.+4      	; 0x157f6 <vfprintf+0x1a2>
   157f2:	69 2d       	mov	r22, r9
   157f4:	70 e0       	ldi	r23, 0x00	; 0
   157f6:	42 e0       	ldi	r20, 0x02	; 2
   157f8:	50 e0       	ldi	r21, 0x00	; 0
   157fa:	a4 0e       	add	r10, r20
   157fc:	b5 1e       	adc	r11, r21
   157fe:	c6 01       	movw	r24, r12
   15800:	0e 94 5f ad 	call	0x15abe	; 0x15abe <strnlen_P>
   15804:	8c 01       	movw	r16, r24
   15806:	50 e8       	ldi	r21, 0x80	; 128
   15808:	f5 2a       	or	r15, r21
   1580a:	f3 fe       	sbrs	r15, 3
   1580c:	07 c0       	rjmp	.+14     	; 0x1581c <vfprintf+0x1c8>
   1580e:	1a c0       	rjmp	.+52     	; 0x15844 <vfprintf+0x1f0>
   15810:	80 e2       	ldi	r24, 0x20	; 32
   15812:	90 e0       	ldi	r25, 0x00	; 0
   15814:	b3 01       	movw	r22, r6
   15816:	0e 94 75 ad 	call	0x15aea	; 0x15aea <fputc>
   1581a:	ea 94       	dec	r14
   1581c:	8e 2d       	mov	r24, r14
   1581e:	90 e0       	ldi	r25, 0x00	; 0
   15820:	08 17       	cp	r16, r24
   15822:	19 07       	cpc	r17, r25
   15824:	a8 f3       	brcs	.-22     	; 0x15810 <vfprintf+0x1bc>
   15826:	0e c0       	rjmp	.+28     	; 0x15844 <vfprintf+0x1f0>
   15828:	f6 01       	movw	r30, r12
   1582a:	f7 fc       	sbrc	r15, 7
   1582c:	85 91       	lpm	r24, Z+
   1582e:	f7 fe       	sbrs	r15, 7
   15830:	81 91       	ld	r24, Z+
   15832:	6f 01       	movw	r12, r30
   15834:	90 e0       	ldi	r25, 0x00	; 0
   15836:	b3 01       	movw	r22, r6
   15838:	0e 94 75 ad 	call	0x15aea	; 0x15aea <fputc>
   1583c:	e1 10       	cpse	r14, r1
   1583e:	ea 94       	dec	r14
   15840:	01 50       	subi	r16, 0x01	; 1
   15842:	10 40       	sbci	r17, 0x00	; 0
   15844:	01 15       	cp	r16, r1
   15846:	11 05       	cpc	r17, r1
   15848:	79 f7       	brne	.-34     	; 0x15828 <vfprintf+0x1d4>
   1584a:	ea c0       	rjmp	.+468    	; 0x15a20 <vfprintf+0x3cc>
   1584c:	94 36       	cpi	r25, 0x64	; 100
   1584e:	11 f0       	breq	.+4      	; 0x15854 <vfprintf+0x200>
   15850:	99 36       	cpi	r25, 0x69	; 105
   15852:	69 f5       	brne	.+90     	; 0x158ae <vfprintf+0x25a>
   15854:	f7 fe       	sbrs	r15, 7
   15856:	08 c0       	rjmp	.+16     	; 0x15868 <vfprintf+0x214>
   15858:	f5 01       	movw	r30, r10
   1585a:	20 81       	ld	r18, Z
   1585c:	31 81       	ldd	r19, Z+1	; 0x01
   1585e:	42 81       	ldd	r20, Z+2	; 0x02
   15860:	53 81       	ldd	r21, Z+3	; 0x03
   15862:	84 e0       	ldi	r24, 0x04	; 4
   15864:	90 e0       	ldi	r25, 0x00	; 0
   15866:	0a c0       	rjmp	.+20     	; 0x1587c <vfprintf+0x228>
   15868:	f5 01       	movw	r30, r10
   1586a:	80 81       	ld	r24, Z
   1586c:	91 81       	ldd	r25, Z+1	; 0x01
   1586e:	9c 01       	movw	r18, r24
   15870:	44 27       	eor	r20, r20
   15872:	37 fd       	sbrc	r19, 7
   15874:	40 95       	com	r20
   15876:	54 2f       	mov	r21, r20
   15878:	82 e0       	ldi	r24, 0x02	; 2
   1587a:	90 e0       	ldi	r25, 0x00	; 0
   1587c:	a8 0e       	add	r10, r24
   1587e:	b9 1e       	adc	r11, r25
   15880:	9f e6       	ldi	r25, 0x6F	; 111
   15882:	f9 22       	and	r15, r25
   15884:	57 ff       	sbrs	r21, 7
   15886:	09 c0       	rjmp	.+18     	; 0x1589a <vfprintf+0x246>
   15888:	50 95       	com	r21
   1588a:	40 95       	com	r20
   1588c:	30 95       	com	r19
   1588e:	21 95       	neg	r18
   15890:	3f 4f       	sbci	r19, 0xFF	; 255
   15892:	4f 4f       	sbci	r20, 0xFF	; 255
   15894:	5f 4f       	sbci	r21, 0xFF	; 255
   15896:	e0 e8       	ldi	r30, 0x80	; 128
   15898:	fe 2a       	or	r15, r30
   1589a:	ca 01       	movw	r24, r20
   1589c:	b9 01       	movw	r22, r18
   1589e:	a1 01       	movw	r20, r2
   158a0:	2a e0       	ldi	r18, 0x0A	; 10
   158a2:	30 e0       	ldi	r19, 0x00	; 0
   158a4:	0e 94 a1 ad 	call	0x15b42	; 0x15b42 <__ultoa_invert>
   158a8:	d8 2e       	mov	r13, r24
   158aa:	d2 18       	sub	r13, r2
   158ac:	40 c0       	rjmp	.+128    	; 0x1592e <vfprintf+0x2da>
   158ae:	95 37       	cpi	r25, 0x75	; 117
   158b0:	29 f4       	brne	.+10     	; 0x158bc <vfprintf+0x268>
   158b2:	1f 2d       	mov	r17, r15
   158b4:	1f 7e       	andi	r17, 0xEF	; 239
   158b6:	2a e0       	ldi	r18, 0x0A	; 10
   158b8:	30 e0       	ldi	r19, 0x00	; 0
   158ba:	1d c0       	rjmp	.+58     	; 0x158f6 <vfprintf+0x2a2>
   158bc:	1f 2d       	mov	r17, r15
   158be:	19 7f       	andi	r17, 0xF9	; 249
   158c0:	9f 36       	cpi	r25, 0x6F	; 111
   158c2:	61 f0       	breq	.+24     	; 0x158dc <vfprintf+0x288>
   158c4:	90 37       	cpi	r25, 0x70	; 112
   158c6:	20 f4       	brcc	.+8      	; 0x158d0 <vfprintf+0x27c>
   158c8:	98 35       	cpi	r25, 0x58	; 88
   158ca:	09 f0       	breq	.+2      	; 0x158ce <vfprintf+0x27a>
   158cc:	ac c0       	rjmp	.+344    	; 0x15a26 <vfprintf+0x3d2>
   158ce:	0f c0       	rjmp	.+30     	; 0x158ee <vfprintf+0x29a>
   158d0:	90 37       	cpi	r25, 0x70	; 112
   158d2:	39 f0       	breq	.+14     	; 0x158e2 <vfprintf+0x28e>
   158d4:	98 37       	cpi	r25, 0x78	; 120
   158d6:	09 f0       	breq	.+2      	; 0x158da <vfprintf+0x286>
   158d8:	a6 c0       	rjmp	.+332    	; 0x15a26 <vfprintf+0x3d2>
   158da:	04 c0       	rjmp	.+8      	; 0x158e4 <vfprintf+0x290>
   158dc:	28 e0       	ldi	r18, 0x08	; 8
   158de:	30 e0       	ldi	r19, 0x00	; 0
   158e0:	0a c0       	rjmp	.+20     	; 0x158f6 <vfprintf+0x2a2>
   158e2:	10 61       	ori	r17, 0x10	; 16
   158e4:	14 fd       	sbrc	r17, 4
   158e6:	14 60       	ori	r17, 0x04	; 4
   158e8:	20 e1       	ldi	r18, 0x10	; 16
   158ea:	30 e0       	ldi	r19, 0x00	; 0
   158ec:	04 c0       	rjmp	.+8      	; 0x158f6 <vfprintf+0x2a2>
   158ee:	14 fd       	sbrc	r17, 4
   158f0:	16 60       	ori	r17, 0x06	; 6
   158f2:	20 e1       	ldi	r18, 0x10	; 16
   158f4:	32 e0       	ldi	r19, 0x02	; 2
   158f6:	17 ff       	sbrs	r17, 7
   158f8:	08 c0       	rjmp	.+16     	; 0x1590a <vfprintf+0x2b6>
   158fa:	f5 01       	movw	r30, r10
   158fc:	60 81       	ld	r22, Z
   158fe:	71 81       	ldd	r23, Z+1	; 0x01
   15900:	82 81       	ldd	r24, Z+2	; 0x02
   15902:	93 81       	ldd	r25, Z+3	; 0x03
   15904:	44 e0       	ldi	r20, 0x04	; 4
   15906:	50 e0       	ldi	r21, 0x00	; 0
   15908:	08 c0       	rjmp	.+16     	; 0x1591a <vfprintf+0x2c6>
   1590a:	f5 01       	movw	r30, r10
   1590c:	80 81       	ld	r24, Z
   1590e:	91 81       	ldd	r25, Z+1	; 0x01
   15910:	bc 01       	movw	r22, r24
   15912:	80 e0       	ldi	r24, 0x00	; 0
   15914:	90 e0       	ldi	r25, 0x00	; 0
   15916:	42 e0       	ldi	r20, 0x02	; 2
   15918:	50 e0       	ldi	r21, 0x00	; 0
   1591a:	a4 0e       	add	r10, r20
   1591c:	b5 1e       	adc	r11, r21
   1591e:	a1 01       	movw	r20, r2
   15920:	0e 94 a1 ad 	call	0x15b42	; 0x15b42 <__ultoa_invert>
   15924:	d8 2e       	mov	r13, r24
   15926:	d2 18       	sub	r13, r2
   15928:	8f e7       	ldi	r24, 0x7F	; 127
   1592a:	f8 2e       	mov	r15, r24
   1592c:	f1 22       	and	r15, r17
   1592e:	f6 fe       	sbrs	r15, 6
   15930:	0b c0       	rjmp	.+22     	; 0x15948 <vfprintf+0x2f4>
   15932:	5e ef       	ldi	r21, 0xFE	; 254
   15934:	f5 22       	and	r15, r21
   15936:	d9 14       	cp	r13, r9
   15938:	38 f4       	brcc	.+14     	; 0x15948 <vfprintf+0x2f4>
   1593a:	f4 fe       	sbrs	r15, 4
   1593c:	07 c0       	rjmp	.+14     	; 0x1594c <vfprintf+0x2f8>
   1593e:	f2 fc       	sbrc	r15, 2
   15940:	05 c0       	rjmp	.+10     	; 0x1594c <vfprintf+0x2f8>
   15942:	8f ee       	ldi	r24, 0xEF	; 239
   15944:	f8 22       	and	r15, r24
   15946:	02 c0       	rjmp	.+4      	; 0x1594c <vfprintf+0x2f8>
   15948:	1d 2d       	mov	r17, r13
   1594a:	01 c0       	rjmp	.+2      	; 0x1594e <vfprintf+0x2fa>
   1594c:	19 2d       	mov	r17, r9
   1594e:	f4 fe       	sbrs	r15, 4
   15950:	0d c0       	rjmp	.+26     	; 0x1596c <vfprintf+0x318>
   15952:	fe 01       	movw	r30, r28
   15954:	ed 0d       	add	r30, r13
   15956:	f1 1d       	adc	r31, r1
   15958:	80 81       	ld	r24, Z
   1595a:	80 33       	cpi	r24, 0x30	; 48
   1595c:	19 f4       	brne	.+6      	; 0x15964 <vfprintf+0x310>
   1595e:	99 ee       	ldi	r25, 0xE9	; 233
   15960:	f9 22       	and	r15, r25
   15962:	08 c0       	rjmp	.+16     	; 0x15974 <vfprintf+0x320>
   15964:	1f 5f       	subi	r17, 0xFF	; 255
   15966:	f2 fe       	sbrs	r15, 2
   15968:	05 c0       	rjmp	.+10     	; 0x15974 <vfprintf+0x320>
   1596a:	03 c0       	rjmp	.+6      	; 0x15972 <vfprintf+0x31e>
   1596c:	8f 2d       	mov	r24, r15
   1596e:	86 78       	andi	r24, 0x86	; 134
   15970:	09 f0       	breq	.+2      	; 0x15974 <vfprintf+0x320>
   15972:	1f 5f       	subi	r17, 0xFF	; 255
   15974:	0f 2d       	mov	r16, r15
   15976:	f3 fc       	sbrc	r15, 3
   15978:	14 c0       	rjmp	.+40     	; 0x159a2 <vfprintf+0x34e>
   1597a:	f0 fe       	sbrs	r15, 0
   1597c:	0f c0       	rjmp	.+30     	; 0x1599c <vfprintf+0x348>
   1597e:	1e 15       	cp	r17, r14
   15980:	10 f0       	brcs	.+4      	; 0x15986 <vfprintf+0x332>
   15982:	9d 2c       	mov	r9, r13
   15984:	0b c0       	rjmp	.+22     	; 0x1599c <vfprintf+0x348>
   15986:	9d 2c       	mov	r9, r13
   15988:	9e 0c       	add	r9, r14
   1598a:	91 1a       	sub	r9, r17
   1598c:	1e 2d       	mov	r17, r14
   1598e:	06 c0       	rjmp	.+12     	; 0x1599c <vfprintf+0x348>
   15990:	80 e2       	ldi	r24, 0x20	; 32
   15992:	90 e0       	ldi	r25, 0x00	; 0
   15994:	b3 01       	movw	r22, r6
   15996:	0e 94 75 ad 	call	0x15aea	; 0x15aea <fputc>
   1599a:	1f 5f       	subi	r17, 0xFF	; 255
   1599c:	1e 15       	cp	r17, r14
   1599e:	c0 f3       	brcs	.-16     	; 0x15990 <vfprintf+0x33c>
   159a0:	04 c0       	rjmp	.+8      	; 0x159aa <vfprintf+0x356>
   159a2:	1e 15       	cp	r17, r14
   159a4:	10 f4       	brcc	.+4      	; 0x159aa <vfprintf+0x356>
   159a6:	e1 1a       	sub	r14, r17
   159a8:	01 c0       	rjmp	.+2      	; 0x159ac <vfprintf+0x358>
   159aa:	ee 24       	eor	r14, r14
   159ac:	04 ff       	sbrs	r16, 4
   159ae:	0f c0       	rjmp	.+30     	; 0x159ce <vfprintf+0x37a>
   159b0:	80 e3       	ldi	r24, 0x30	; 48
   159b2:	90 e0       	ldi	r25, 0x00	; 0
   159b4:	b3 01       	movw	r22, r6
   159b6:	0e 94 75 ad 	call	0x15aea	; 0x15aea <fputc>
   159ba:	02 ff       	sbrs	r16, 2
   159bc:	1d c0       	rjmp	.+58     	; 0x159f8 <vfprintf+0x3a4>
   159be:	01 fd       	sbrc	r16, 1
   159c0:	03 c0       	rjmp	.+6      	; 0x159c8 <vfprintf+0x374>
   159c2:	88 e7       	ldi	r24, 0x78	; 120
   159c4:	90 e0       	ldi	r25, 0x00	; 0
   159c6:	0e c0       	rjmp	.+28     	; 0x159e4 <vfprintf+0x390>
   159c8:	88 e5       	ldi	r24, 0x58	; 88
   159ca:	90 e0       	ldi	r25, 0x00	; 0
   159cc:	0b c0       	rjmp	.+22     	; 0x159e4 <vfprintf+0x390>
   159ce:	80 2f       	mov	r24, r16
   159d0:	86 78       	andi	r24, 0x86	; 134
   159d2:	91 f0       	breq	.+36     	; 0x159f8 <vfprintf+0x3a4>
   159d4:	01 ff       	sbrs	r16, 1
   159d6:	02 c0       	rjmp	.+4      	; 0x159dc <vfprintf+0x388>
   159d8:	8b e2       	ldi	r24, 0x2B	; 43
   159da:	01 c0       	rjmp	.+2      	; 0x159de <vfprintf+0x38a>
   159dc:	80 e2       	ldi	r24, 0x20	; 32
   159de:	f7 fc       	sbrc	r15, 7
   159e0:	8d e2       	ldi	r24, 0x2D	; 45
   159e2:	90 e0       	ldi	r25, 0x00	; 0
   159e4:	b3 01       	movw	r22, r6
   159e6:	0e 94 75 ad 	call	0x15aea	; 0x15aea <fputc>
   159ea:	06 c0       	rjmp	.+12     	; 0x159f8 <vfprintf+0x3a4>
   159ec:	80 e3       	ldi	r24, 0x30	; 48
   159ee:	90 e0       	ldi	r25, 0x00	; 0
   159f0:	b3 01       	movw	r22, r6
   159f2:	0e 94 75 ad 	call	0x15aea	; 0x15aea <fputc>
   159f6:	9a 94       	dec	r9
   159f8:	d9 14       	cp	r13, r9
   159fa:	c0 f3       	brcs	.-16     	; 0x159ec <vfprintf+0x398>
   159fc:	da 94       	dec	r13
   159fe:	f1 01       	movw	r30, r2
   15a00:	ed 0d       	add	r30, r13
   15a02:	f1 1d       	adc	r31, r1
   15a04:	80 81       	ld	r24, Z
   15a06:	90 e0       	ldi	r25, 0x00	; 0
   15a08:	b3 01       	movw	r22, r6
   15a0a:	0e 94 75 ad 	call	0x15aea	; 0x15aea <fputc>
   15a0e:	dd 20       	and	r13, r13
   15a10:	a9 f7       	brne	.-22     	; 0x159fc <vfprintf+0x3a8>
   15a12:	06 c0       	rjmp	.+12     	; 0x15a20 <vfprintf+0x3cc>
   15a14:	80 e2       	ldi	r24, 0x20	; 32
   15a16:	90 e0       	ldi	r25, 0x00	; 0
   15a18:	b3 01       	movw	r22, r6
   15a1a:	0e 94 75 ad 	call	0x15aea	; 0x15aea <fputc>
   15a1e:	ea 94       	dec	r14
   15a20:	ee 20       	and	r14, r14
   15a22:	c1 f7       	brne	.-16     	; 0x15a14 <vfprintf+0x3c0>
   15a24:	43 ce       	rjmp	.-890    	; 0x156ac <vfprintf+0x58>
   15a26:	f3 01       	movw	r30, r6
   15a28:	66 81       	ldd	r22, Z+6	; 0x06
   15a2a:	77 81       	ldd	r23, Z+7	; 0x07
   15a2c:	cb 01       	movw	r24, r22
   15a2e:	2b 96       	adiw	r28, 0x0b	; 11
   15a30:	0f b6       	in	r0, 0x3f	; 63
   15a32:	f8 94       	cli
   15a34:	de bf       	out	0x3e, r29	; 62
   15a36:	0f be       	out	0x3f, r0	; 63
   15a38:	cd bf       	out	0x3d, r28	; 61
   15a3a:	cf 91       	pop	r28
   15a3c:	df 91       	pop	r29
   15a3e:	1f 91       	pop	r17
   15a40:	0f 91       	pop	r16
   15a42:	ff 90       	pop	r15
   15a44:	ef 90       	pop	r14
   15a46:	df 90       	pop	r13
   15a48:	cf 90       	pop	r12
   15a4a:	bf 90       	pop	r11
   15a4c:	af 90       	pop	r10
   15a4e:	9f 90       	pop	r9
   15a50:	8f 90       	pop	r8
   15a52:	7f 90       	pop	r7
   15a54:	6f 90       	pop	r6
   15a56:	5f 90       	pop	r5
   15a58:	4f 90       	pop	r4
   15a5a:	3f 90       	pop	r3
   15a5c:	2f 90       	pop	r2
   15a5e:	08 95       	ret

00015a60 <__eerd_block_m128>:
   15a60:	dc 01       	movw	r26, r24
   15a62:	cb 01       	movw	r24, r22

00015a64 <__eerd_blraw_m128>:
   15a64:	fc 01       	movw	r30, r24
   15a66:	e1 99       	sbic	0x1c, 1	; 28
   15a68:	fe cf       	rjmp	.-4      	; 0x15a66 <__eerd_blraw_m128+0x2>
   15a6a:	06 c0       	rjmp	.+12     	; 0x15a78 <__eerd_blraw_m128+0x14>
   15a6c:	ff bb       	out	0x1f, r31	; 31
   15a6e:	ee bb       	out	0x1e, r30	; 30
   15a70:	e0 9a       	sbi	0x1c, 0	; 28
   15a72:	31 96       	adiw	r30, 0x01	; 1
   15a74:	0d b2       	in	r0, 0x1d	; 29
   15a76:	0d 92       	st	X+, r0
   15a78:	41 50       	subi	r20, 0x01	; 1
   15a7a:	50 40       	sbci	r21, 0x00	; 0
   15a7c:	b8 f7       	brcc	.-18     	; 0x15a6c <__eerd_blraw_m128+0x8>
   15a7e:	08 95       	ret

00015a80 <__eerd_byte_m128>:
   15a80:	e1 99       	sbic	0x1c, 1	; 28
   15a82:	fe cf       	rjmp	.-4      	; 0x15a80 <__eerd_byte_m128>
   15a84:	9f bb       	out	0x1f, r25	; 31
   15a86:	8e bb       	out	0x1e, r24	; 30
   15a88:	e0 9a       	sbi	0x1c, 0	; 28
   15a8a:	99 27       	eor	r25, r25
   15a8c:	8d b3       	in	r24, 0x1d	; 29
   15a8e:	08 95       	ret

00015a90 <__eewr_block_m128>:
   15a90:	dc 01       	movw	r26, r24
   15a92:	cb 01       	movw	r24, r22
   15a94:	03 c0       	rjmp	.+6      	; 0x15a9c <__eewr_block_m128+0xc>
   15a96:	2d 91       	ld	r18, X+
   15a98:	0e 94 53 ad 	call	0x15aa6	; 0x15aa6 <__eewr_r18_m128>
   15a9c:	41 50       	subi	r20, 0x01	; 1
   15a9e:	50 40       	sbci	r21, 0x00	; 0
   15aa0:	d0 f7       	brcc	.-12     	; 0x15a96 <__eewr_block_m128+0x6>
   15aa2:	08 95       	ret

00015aa4 <__eewr_byte_m128>:
   15aa4:	26 2f       	mov	r18, r22

00015aa6 <__eewr_r18_m128>:
   15aa6:	e1 99       	sbic	0x1c, 1	; 28
   15aa8:	fe cf       	rjmp	.-4      	; 0x15aa6 <__eewr_r18_m128>
   15aaa:	9f bb       	out	0x1f, r25	; 31
   15aac:	8e bb       	out	0x1e, r24	; 30
   15aae:	2d bb       	out	0x1d, r18	; 29
   15ab0:	0f b6       	in	r0, 0x3f	; 63
   15ab2:	f8 94       	cli
   15ab4:	e2 9a       	sbi	0x1c, 2	; 28
   15ab6:	e1 9a       	sbi	0x1c, 1	; 28
   15ab8:	0f be       	out	0x3f, r0	; 63
   15aba:	01 96       	adiw	r24, 0x01	; 1
   15abc:	08 95       	ret

00015abe <strnlen_P>:
   15abe:	fc 01       	movw	r30, r24
   15ac0:	05 90       	lpm	r0, Z+
   15ac2:	61 50       	subi	r22, 0x01	; 1
   15ac4:	70 40       	sbci	r23, 0x00	; 0
   15ac6:	01 10       	cpse	r0, r1
   15ac8:	d8 f7       	brcc	.-10     	; 0x15ac0 <strnlen_P+0x2>
   15aca:	80 95       	com	r24
   15acc:	90 95       	com	r25
   15ace:	8e 0f       	add	r24, r30
   15ad0:	9f 1f       	adc	r25, r31
   15ad2:	08 95       	ret

00015ad4 <strnlen>:
   15ad4:	fc 01       	movw	r30, r24
   15ad6:	61 50       	subi	r22, 0x01	; 1
   15ad8:	70 40       	sbci	r23, 0x00	; 0
   15ada:	01 90       	ld	r0, Z+
   15adc:	01 10       	cpse	r0, r1
   15ade:	d8 f7       	brcc	.-10     	; 0x15ad6 <strnlen+0x2>
   15ae0:	80 95       	com	r24
   15ae2:	90 95       	com	r25
   15ae4:	8e 0f       	add	r24, r30
   15ae6:	9f 1f       	adc	r25, r31
   15ae8:	08 95       	ret

00015aea <fputc>:
   15aea:	0f 93       	push	r16
   15aec:	1f 93       	push	r17
   15aee:	cf 93       	push	r28
   15af0:	df 93       	push	r29
   15af2:	8c 01       	movw	r16, r24
   15af4:	eb 01       	movw	r28, r22
   15af6:	8b 81       	ldd	r24, Y+3	; 0x03
   15af8:	81 ff       	sbrs	r24, 1
   15afa:	1b c0       	rjmp	.+54     	; 0x15b32 <fputc+0x48>
   15afc:	82 ff       	sbrs	r24, 2
   15afe:	0d c0       	rjmp	.+26     	; 0x15b1a <fputc+0x30>
   15b00:	2e 81       	ldd	r18, Y+6	; 0x06
   15b02:	3f 81       	ldd	r19, Y+7	; 0x07
   15b04:	8c 81       	ldd	r24, Y+4	; 0x04
   15b06:	9d 81       	ldd	r25, Y+5	; 0x05
   15b08:	28 17       	cp	r18, r24
   15b0a:	39 07       	cpc	r19, r25
   15b0c:	64 f4       	brge	.+24     	; 0x15b26 <fputc+0x3c>
   15b0e:	e8 81       	ld	r30, Y
   15b10:	f9 81       	ldd	r31, Y+1	; 0x01
   15b12:	01 93       	st	Z+, r16
   15b14:	f9 83       	std	Y+1, r31	; 0x01
   15b16:	e8 83       	st	Y, r30
   15b18:	06 c0       	rjmp	.+12     	; 0x15b26 <fputc+0x3c>
   15b1a:	e8 85       	ldd	r30, Y+8	; 0x08
   15b1c:	f9 85       	ldd	r31, Y+9	; 0x09
   15b1e:	80 2f       	mov	r24, r16
   15b20:	09 95       	icall
   15b22:	89 2b       	or	r24, r25
   15b24:	31 f4       	brne	.+12     	; 0x15b32 <fputc+0x48>
   15b26:	8e 81       	ldd	r24, Y+6	; 0x06
   15b28:	9f 81       	ldd	r25, Y+7	; 0x07
   15b2a:	01 96       	adiw	r24, 0x01	; 1
   15b2c:	9f 83       	std	Y+7, r25	; 0x07
   15b2e:	8e 83       	std	Y+6, r24	; 0x06
   15b30:	02 c0       	rjmp	.+4      	; 0x15b36 <fputc+0x4c>
   15b32:	0f ef       	ldi	r16, 0xFF	; 255
   15b34:	1f ef       	ldi	r17, 0xFF	; 255
   15b36:	c8 01       	movw	r24, r16
   15b38:	df 91       	pop	r29
   15b3a:	cf 91       	pop	r28
   15b3c:	1f 91       	pop	r17
   15b3e:	0f 91       	pop	r16
   15b40:	08 95       	ret

00015b42 <__ultoa_invert>:
   15b42:	fa 01       	movw	r30, r20
   15b44:	aa 27       	eor	r26, r26
   15b46:	28 30       	cpi	r18, 0x08	; 8
   15b48:	51 f1       	breq	.+84     	; 0x15b9e <__ultoa_invert+0x5c>
   15b4a:	20 31       	cpi	r18, 0x10	; 16
   15b4c:	81 f1       	breq	.+96     	; 0x15bae <__ultoa_invert+0x6c>
   15b4e:	e8 94       	clt
   15b50:	6f 93       	push	r22
   15b52:	6e 7f       	andi	r22, 0xFE	; 254
   15b54:	6e 5f       	subi	r22, 0xFE	; 254
   15b56:	7f 4f       	sbci	r23, 0xFF	; 255
   15b58:	8f 4f       	sbci	r24, 0xFF	; 255
   15b5a:	9f 4f       	sbci	r25, 0xFF	; 255
   15b5c:	af 4f       	sbci	r26, 0xFF	; 255
   15b5e:	b1 e0       	ldi	r27, 0x01	; 1
   15b60:	3e d0       	rcall	.+124    	; 0x15bde <__ultoa_invert+0x9c>
   15b62:	b4 e0       	ldi	r27, 0x04	; 4
   15b64:	3c d0       	rcall	.+120    	; 0x15bde <__ultoa_invert+0x9c>
   15b66:	67 0f       	add	r22, r23
   15b68:	78 1f       	adc	r23, r24
   15b6a:	89 1f       	adc	r24, r25
   15b6c:	9a 1f       	adc	r25, r26
   15b6e:	a1 1d       	adc	r26, r1
   15b70:	68 0f       	add	r22, r24
   15b72:	79 1f       	adc	r23, r25
   15b74:	8a 1f       	adc	r24, r26
   15b76:	91 1d       	adc	r25, r1
   15b78:	a1 1d       	adc	r26, r1
   15b7a:	6a 0f       	add	r22, r26
   15b7c:	71 1d       	adc	r23, r1
   15b7e:	81 1d       	adc	r24, r1
   15b80:	91 1d       	adc	r25, r1
   15b82:	a1 1d       	adc	r26, r1
   15b84:	20 d0       	rcall	.+64     	; 0x15bc6 <__ultoa_invert+0x84>
   15b86:	09 f4       	brne	.+2      	; 0x15b8a <__ultoa_invert+0x48>
   15b88:	68 94       	set
   15b8a:	3f 91       	pop	r19
   15b8c:	2a e0       	ldi	r18, 0x0A	; 10
   15b8e:	26 9f       	mul	r18, r22
   15b90:	11 24       	eor	r1, r1
   15b92:	30 19       	sub	r19, r0
   15b94:	30 5d       	subi	r19, 0xD0	; 208
   15b96:	31 93       	st	Z+, r19
   15b98:	de f6       	brtc	.-74     	; 0x15b50 <__ultoa_invert+0xe>
   15b9a:	cf 01       	movw	r24, r30
   15b9c:	08 95       	ret
   15b9e:	46 2f       	mov	r20, r22
   15ba0:	47 70       	andi	r20, 0x07	; 7
   15ba2:	40 5d       	subi	r20, 0xD0	; 208
   15ba4:	41 93       	st	Z+, r20
   15ba6:	b3 e0       	ldi	r27, 0x03	; 3
   15ba8:	0f d0       	rcall	.+30     	; 0x15bc8 <__ultoa_invert+0x86>
   15baa:	c9 f7       	brne	.-14     	; 0x15b9e <__ultoa_invert+0x5c>
   15bac:	f6 cf       	rjmp	.-20     	; 0x15b9a <__ultoa_invert+0x58>
   15bae:	46 2f       	mov	r20, r22
   15bb0:	4f 70       	andi	r20, 0x0F	; 15
   15bb2:	40 5d       	subi	r20, 0xD0	; 208
   15bb4:	4a 33       	cpi	r20, 0x3A	; 58
   15bb6:	18 f0       	brcs	.+6      	; 0x15bbe <__ultoa_invert+0x7c>
   15bb8:	49 5d       	subi	r20, 0xD9	; 217
   15bba:	31 fd       	sbrc	r19, 1
   15bbc:	40 52       	subi	r20, 0x20	; 32
   15bbe:	41 93       	st	Z+, r20
   15bc0:	02 d0       	rcall	.+4      	; 0x15bc6 <__ultoa_invert+0x84>
   15bc2:	a9 f7       	brne	.-22     	; 0x15bae <__ultoa_invert+0x6c>
   15bc4:	ea cf       	rjmp	.-44     	; 0x15b9a <__ultoa_invert+0x58>
   15bc6:	b4 e0       	ldi	r27, 0x04	; 4
   15bc8:	a6 95       	lsr	r26
   15bca:	97 95       	ror	r25
   15bcc:	87 95       	ror	r24
   15bce:	77 95       	ror	r23
   15bd0:	67 95       	ror	r22
   15bd2:	ba 95       	dec	r27
   15bd4:	c9 f7       	brne	.-14     	; 0x15bc8 <__ultoa_invert+0x86>
   15bd6:	00 97       	sbiw	r24, 0x00	; 0
   15bd8:	61 05       	cpc	r22, r1
   15bda:	71 05       	cpc	r23, r1
   15bdc:	08 95       	ret
   15bde:	9b 01       	movw	r18, r22
   15be0:	ac 01       	movw	r20, r24
   15be2:	0a 2e       	mov	r0, r26
   15be4:	06 94       	lsr	r0
   15be6:	57 95       	ror	r21
   15be8:	47 95       	ror	r20
   15bea:	37 95       	ror	r19
   15bec:	27 95       	ror	r18
   15bee:	ba 95       	dec	r27
   15bf0:	c9 f7       	brne	.-14     	; 0x15be4 <__ultoa_invert+0xa2>
   15bf2:	62 0f       	add	r22, r18
   15bf4:	73 1f       	adc	r23, r19
   15bf6:	84 1f       	adc	r24, r20
   15bf8:	95 1f       	adc	r25, r21
   15bfa:	a0 1d       	adc	r26, r0
   15bfc:	08 95       	ret

00015bfe <_exit>:
   15bfe:	f8 94       	cli

00015c00 <__stop_program>:
   15c00:	ff cf       	rjmp	.-2      	; 0x15c00 <__stop_program>
