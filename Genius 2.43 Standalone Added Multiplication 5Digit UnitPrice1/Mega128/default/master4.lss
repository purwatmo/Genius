
master4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800100  00015bd8  00015c8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00015bd8  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000bd9  0080015c  0080015c  00015ce8  2**0
                  ALLOC
  3 .eeprom       00000858  00810000  00810000  00015ce8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 000000e0  00000000  00000000  00016540  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000024ec  00000000  00000000  00016620  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001041c  00000000  00000000  00018b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b11  00000000  00000000  00028f28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000c448  00000000  00000000  00029a39  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001190  00000000  00000000  00035e84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000052ae  00000000  00000000  00037014  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006cb7  00000000  00000000  0003c2c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000498  00000000  00000000  00042f79  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fb 12 	jmp	0x25f6	; 0x25f6 <__ctors_end>
       4:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <__bad_interrupt>
       8:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <__bad_interrupt>
       c:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <__bad_interrupt>
      10:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <__bad_interrupt>
      14:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <__bad_interrupt>
      18:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <__bad_interrupt>
      1c:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <__bad_interrupt>
      20:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <__bad_interrupt>
      24:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <__bad_interrupt>
      28:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <__bad_interrupt>
      2c:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <__bad_interrupt>
      30:	0c 94 d5 13 	jmp	0x27aa	; 0x27aa <__vector_12>
      34:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <__bad_interrupt>
      38:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <__bad_interrupt>
      3c:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <__bad_interrupt>
      40:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <__bad_interrupt>
      44:	0c 94 70 67 	jmp	0xcee0	; 0xcee0 <__vector_17>
      48:	0c 94 6f 15 	jmp	0x2ade	; 0x2ade <__vector_18>
      4c:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <__bad_interrupt>
      50:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <__bad_interrupt>
      54:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <__bad_interrupt>
      58:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <__bad_interrupt>
      5c:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <__bad_interrupt>
      60:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <__bad_interrupt>
      64:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <__bad_interrupt>
      68:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <__bad_interrupt>
      6c:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <__bad_interrupt>
      70:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <__bad_interrupt>
      74:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <__bad_interrupt>
      78:	0c 94 7c 40 	jmp	0x80f8	; 0x80f8 <__vector_30>
      7c:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <__bad_interrupt>
      80:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <__bad_interrupt>
      84:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <__bad_interrupt>
      88:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <__bad_interrupt>
      8c:	50 14       	cp	r5, r0
      8e:	4e 14       	cp	r4, r14
      90:	52 14       	cp	r5, r2
      92:	54 14       	cp	r5, r4
      94:	56 14       	cp	r5, r6
      96:	58 14       	cp	r5, r8
      98:	5a 14       	cp	r5, r10
      9a:	5c 14       	cp	r5, r12
      9c:	5e 14       	cp	r5, r14
      9e:	60 14       	cp	r6, r0
      a0:	62 14       	cp	r6, r2
      a2:	64 14       	cp	r6, r4
      a4:	66 14       	cp	r6, r6
      a6:	74 14       	cp	r7, r4
      a8:	68 14       	cp	r6, r8
      aa:	74 14       	cp	r7, r4
      ac:	6a 14       	cp	r6, r10
      ae:	6c 14       	cp	r6, r12
      b0:	74 14       	cp	r7, r4
      b2:	6e 14       	cp	r6, r14
      b4:	70 14       	cp	r7, r0
      b6:	72 14       	cp	r7, r2
      b8:	74 14       	cp	r7, r4
      ba:	74 14       	cp	r7, r4
      bc:	68 14       	cp	r6, r8
      be:	5a 14       	cp	r5, r10
      c0:	74 14       	cp	r7, r4
      c2:	5c 14       	cp	r5, r12
      c4:	60 14       	cp	r6, r0
      c6:	64 14       	cp	r6, r4
      c8:	a1 73       	andi	r26, 0x31	; 49
      ca:	bd 73       	andi	r27, 0x3D	; 61
      cc:	c6 74       	andi	r28, 0x46	; 70
      ce:	f5 74       	andi	r31, 0x45	; 69
      d0:	1e 75       	andi	r17, 0x5E	; 94
      d2:	91 75       	andi	r25, 0x51	; 81
      d4:	a0 75       	andi	r26, 0x50	; 80
      d6:	a7 75       	andi	r26, 0x57	; 87
      d8:	e3 75       	andi	r30, 0x53	; 83
      da:	0a 76       	andi	r16, 0x6A	; 106
      dc:	4d 76       	andi	r20, 0x6D	; 109
      de:	57 76       	andi	r21, 0x67	; 103
      e0:	16 76       	andi	r17, 0x66	; 102
      e2:	5d 76       	andi	r21, 0x6D	; 109
      e4:	75 76       	andi	r23, 0x65	; 101
      e6:	6c 76       	andi	r22, 0x6C	; 108
      e8:	71 76       	andi	r23, 0x61	; 97
      ea:	d1 73       	andi	r29, 0x31	; 49
      ec:	60 74       	andi	r22, 0x40	; 64
      ee:	82 74       	andi	r24, 0x42	; 66
      f0:	8e 74       	andi	r24, 0x4E	; 78
      f2:	a0 74       	andi	r26, 0x40	; 64
      f4:	b1 74       	andi	r27, 0x41	; 65
      f6:	c0 74       	andi	r28, 0x40	; 64
      f8:	c0 74       	andi	r28, 0x40	; 64
      fa:	f0 78       	andi	r31, 0x80	; 128
      fc:	f6 78       	andi	r31, 0x86	; 134
      fe:	fa 78       	andi	r31, 0x8A	; 138
     100:	11 79       	andi	r17, 0x91	; 145
     102:	2b 79       	andi	r18, 0x9B	; 155
     104:	2f 79       	andi	r18, 0x9F	; 159
     106:	5a 79       	andi	r21, 0x9A	; 154
     108:	74 79       	andi	r23, 0x94	; 148
     10a:	7a 79       	andi	r23, 0x9A	; 154
     10c:	82 79       	andi	r24, 0x92	; 146
     10e:	85 79       	andi	r24, 0x95	; 149
     110:	88 79       	andi	r24, 0x98	; 152
     112:	8b 79       	andi	r24, 0x9B	; 155
     114:	8e 79       	andi	r24, 0x9E	; 158
     116:	91 79       	andi	r25, 0x91	; 145
     118:	95 79       	andi	r25, 0x95	; 149
     11a:	98 79       	andi	r25, 0x98	; 152
     11c:	9b 79       	andi	r25, 0x9B	; 155
     11e:	a3 79       	andi	r26, 0x93	; 147
     120:	fd 7f       	andi	r31, 0xFD	; 253
     122:	52 80       	ldd	r5, Z+2	; 0x02
     124:	61 80       	ldd	r6, Z+1	; 0x01
     126:	a3 80       	ldd	r10, Z+3	; 0x03
     128:	b5 80       	ldd	r11, Z+5	; 0x05
     12a:	ca 80       	ldd	r12, Y+2	; 0x02
     12c:	ed 80       	ldd	r14, Y+5	; 0x05
     12e:	a3 81       	ldd	r26, Z+3	; 0x03
     130:	ad 81       	ldd	r26, Y+5	; 0x05
     132:	74 88       	ldd	r7, Z+20	; 0x14
     134:	0a 82       	std	Y+2, r0	; 0x02
     136:	12 83       	std	Z+2, r17	; 0x02
     138:	5e 83       	std	Y+6, r21	; 0x06
     13a:	a4 83       	std	Z+4, r26	; 0x04
     13c:	1c 84       	ldd	r1, Y+12	; 0x0c
     13e:	ad 84       	ldd	r10, Y+13	; 0x0d
     140:	d0 84       	ldd	r13, Z+8	; 0x08
     142:	96 85       	ldd	r25, Z+14	; 0x0e
     144:	c0 85       	ldd	r28, Z+8	; 0x08
     146:	79 86       	std	Y+9, r7	; 0x09
     148:	92 86       	std	Z+10, r9	; 0x0a
     14a:	91 87       	std	Z+9, r25	; 0x09
     14c:	0a 87       	std	Y+10, r16	; 0x0a
     14e:	4c 87       	std	Y+12, r20	; 0x0c
     150:	2b 88       	ldd	r2, Y+19	; 0x13
     152:	59 88       	ldd	r5, Y+17	; 0x11
     154:	74 88       	ldd	r7, Z+20	; 0x14
     156:	97 87       	std	Z+15, r25	; 0x0f
     158:	1a 88       	ldd	r1, Y+18	; 0x12
     15a:	5e 88       	ldd	r5, Y+22	; 0x16
     15c:	65 88       	ldd	r6, Z+21	; 0x15
     15e:	b0 88       	ldd	r11, Z+16	; 0x10
     160:	b4 88       	ldd	r11, Z+20	; 0x14
     162:	d0 88       	ldd	r13, Z+16	; 0x10
     164:	b0 8c       	ldd	r11, Z+24	; 0x18
     166:	b0 8c       	ldd	r11, Z+24	; 0x18
     168:	b0 8c       	ldd	r11, Z+24	; 0x18
     16a:	b0 8c       	ldd	r11, Z+24	; 0x18
     16c:	19 89       	ldd	r17, Y+17	; 0x11
     16e:	b0 8c       	ldd	r11, Z+24	; 0x18
     170:	39 89       	ldd	r19, Y+17	; 0x11
     172:	b0 8c       	ldd	r11, Z+24	; 0x18
     174:	56 89       	ldd	r21, Z+22	; 0x16
     176:	dd 89       	ldd	r29, Y+21	; 0x15
     178:	36 8a       	std	Z+22, r3	; 0x16
     17a:	59 8a       	std	Y+17, r5	; 0x11
     17c:	fc 88       	ldd	r15, Y+20	; 0x14
     17e:	b0 8c       	ldd	r11, Z+24	; 0x18
     180:	f0 89       	ldd	r31, Z+16	; 0x10
     182:	71 8a       	std	Z+17, r7	; 0x11
     184:	a9 8a       	std	Y+17, r10	; 0x11
     186:	c1 8a       	std	Z+17, r12	; 0x11
     188:	fd 8a       	std	Y+21, r15	; 0x15
     18a:	0d 8b       	std	Y+21, r16	; 0x15
     18c:	1c 8c       	ldd	r1, Y+28	; 0x1c
     18e:	2c 8c       	ldd	r2, Y+28	; 0x1c
     190:	73 8c       	ldd	r7, Z+27	; 0x1b
     192:	92 8c       	ldd	r9, Z+26	; 0x1a
     194:	a4 8c       	ldd	r10, Z+28	; 0x1c
     196:	aa 8c       	ldd	r10, Y+26	; 0x1a
     198:	ac 8c       	ldd	r10, Y+28	; 0x1c
     19a:	e4 92       	.word	0x92e4	; ????
     19c:	fc 92       	st	X, r15
     19e:	0e 93       	st	-X, r16
     1a0:	43 93       	.word	0x9343	; ????
     1a2:	72 93       	st	-Z, r23
     1a4:	88 93       	.word	0x9388	; ????
     1a6:	c3 93       	.word	0x93c3	; ????
     1a8:	fb 93       	.word	0x93fb	; ????
     1aa:	3d 94 45 94 	jmp	0xf288a	; 0xf288a <__data_load_end+0xdcc56>
     1ae:	64 95       	.word	0x9564	; ????
     1b0:	70 95       	com	r23
     1b2:	a0 95       	com	r26
     1b4:	dd 95 f6 95 	jmp	0x772bec	; 0x772bec <__data_load_end+0x75cfb8>
     1b8:	10 96       	adiw	r26, 0x00	; 0
     1ba:	50 96       	adiw	r26, 0x10	; 16
     1bc:	58 93       	.word	0x9358	; ????
     1be:	15 94       	asr	r1
     1c0:	b9 95       	.word	0x95b9	; ????
     1c2:	e1 93       	st	Z+, r30	; undefined
     1c4:	5d 94 aa 94 	jmp	0x172954	; 0x172954 <__data_load_end+0x15cd20>
     1c8:	c6 94       	lsr	r12
     1ca:	e0 94       	com	r14
     1cc:	2c 95 4a 95 	jmp	0x492a94	; 0x492a94 <__data_load_end+0x47ce60>
     1d0:	8a 96       	adiw	r24, 0x2a	; 42
     1d2:	a0 96       	adiw	r28, 0x20	; 32
     1d4:	a5 96       	adiw	r28, 0x25	; 37
     1d6:	dc 96       	adiw	r26, 0x3c	; 60
     1d8:	0b 97       	sbiw	r24, 0x0b	; 11
     1da:	50 97       	sbiw	r26, 0x10	; 16
     1dc:	6e 97       	sbiw	r28, 0x1e	; 30
     1de:	8c 97       	sbiw	r24, 0x2c	; 44
     1e0:	c6 97       	sbiw	r24, 0x36	; 54
     1e2:	29 98       	cbi	0x05, 1	; 5
     1e4:	3d 9c       	mul	r3, r13
     1e6:	f1 96       	adiw	r30, 0x31	; 49
     1e8:	66 9c       	mul	r6, r6
     1ea:	50 9d       	mul	r21, r0
     1ec:	0e 9d       	mul	r16, r14
     1ee:	37 9d       	mul	r19, r7
     1f0:	86 9d       	mul	r24, r6
     1f2:	6a 9d       	mul	r22, r10
     1f4:	9d 9d       	mul	r25, r13
     1f6:	b6 9d       	mul	r27, r6
     1f8:	c8 9d       	mul	r28, r8
     1fa:	80 9c       	mul	r8, r0
     1fc:	d7 9c       	mul	r13, r7
     1fe:	f4 9c       	mul	r15, r4
     200:	3b 98       	cbi	0x07, 3	; 7
     202:	59 98       	cbi	0x0b, 1	; 11
     204:	7e 98       	cbi	0x0f, 6	; 15
     206:	8b 98       	cbi	0x11, 3	; 17
     208:	a7 98       	cbi	0x14, 7	; 20
     20a:	bc 98       	cbi	0x17, 4	; 23
     20c:	e4 98       	cbi	0x1c, 4	; 28
     20e:	f9 98       	cbi	0x1f, 1	; 31
     210:	21 99       	sbic	0x04, 1	; 4
     212:	41 99       	sbic	0x08, 1	; 8
     214:	72 99       	sbic	0x0e, 2	; 14
     216:	7f 99       	sbic	0x0f, 7	; 15
     218:	d8 99       	sbic	0x1b, 0	; 27
     21a:	4f 9a       	sbi	0x09, 7	; 9
     21c:	63 9a       	sbi	0x0c, 3	; 12
     21e:	38 9b       	sbis	0x07, 0	; 7
     220:	38 9b       	sbis	0x07, 0	; 7
     222:	77 9a       	sbi	0x0e, 7	; 14
     224:	8b 9a       	sbi	0x11, 3	; 17
     226:	93 9a       	sbi	0x12, 3	; 18
     228:	af 9a       	sbi	0x15, 7	; 21
     22a:	c3 9a       	sbi	0x18, 3	; 24
     22c:	ce 9a       	sbi	0x19, 6	; 25
     22e:	e3 9a       	sbi	0x1c, 3	; 28
     230:	f8 9a       	sbi	0x1f, 0	; 31
     232:	16 9b       	sbis	0x02, 6	; 2
     234:	3b 9b       	sbis	0x07, 3	; 7
     236:	50 9b       	sbis	0x0a, 0	; 10
     238:	65 9b       	sbis	0x0c, 5	; 12
     23a:	7a 9b       	sbis	0x0f, 2	; 15
     23c:	8f 9b       	sbis	0x11, 7	; 17
     23e:	a4 9b       	sbis	0x14, 4	; 20
     240:	b9 9b       	sbis	0x17, 1	; 23
     242:	ce 9b       	sbis	0x19, 6	; 25
     244:	db 9b       	sbis	0x1b, 3	; 27
     246:	f0 9b       	sbis	0x1e, 0	; 30
     248:	11 9c       	mul	r1, r1
     24a:	0e a2       	std	Y+38, r0	; 0x26
     24c:	11 a2       	std	Z+33, r1	; 0x21
     24e:	b1 a2       	std	Z+33, r11	; 0x21
     250:	c0 a2       	std	Z+32, r12	; 0x20
     252:	f1 a2       	std	Z+33, r15	; 0x21
     254:	ff a2       	std	Y+39, r15	; 0x27
     256:	2b a3       	std	Y+35, r18	; 0x23
     258:	d0 a2       	std	Z+32, r13	; 0x20
     25a:	dd a2       	std	Y+37, r13	; 0x25
     25c:	e7 a2       	std	Z+39, r14	; 0x27
     25e:	35 a3       	std	Z+37, r19	; 0x25
     260:	42 a3       	std	Z+34, r20	; 0x22
     262:	4d a3       	std	Y+37, r20	; 0x25
     264:	50 a3       	std	Z+32, r21	; 0x20
     266:	53 a3       	std	Z+35, r21	; 0x23
     268:	56 a3       	std	Z+38, r21	; 0x26
     26a:	59 a3       	std	Y+33, r21	; 0x21
     26c:	5c a3       	std	Y+36, r21	; 0x24
     26e:	5f a3       	std	Y+39, r21	; 0x27
     270:	62 a3       	std	Z+34, r22	; 0x22
     272:	84 a3       	std	Z+36, r24	; 0x24
     274:	72 a3       	std	Z+34, r23	; 0x22
     276:	65 a3       	std	Z+37, r22	; 0x25
     278:	7d a3       	std	Y+37, r23	; 0x25
     27a:	9b a2       	std	Y+35, r9	; 0x23

0000027c <__c.2986>:
     27c:	49 6e 69 74 69 61 6c 69 7a 65 2e 2e 2e 20 00        Initialize... .

0000028b <__c.2956>:
     28b:	57 61 74 63 68 44 6f 67 00                          WatchDog.

00000294 <__c.2954>:
     294:	42 72 6f 77 6e 4f 75 74 00                          BrownOut.

0000029d <__c.2952>:
     29d:	45 78 74 65 72 6e 61 6c 00                          External.

000002a6 <__c.2947>:
     2a6:	50 6f 77 65 72 4f 6e 00                             PowerOn.

000002ae <__prodloc>:
     2ae:	01 06 02 06 01 0d 02 0d 01 14 02 14                 ............

000002ba <__prntloc>:
     2ba:	01 08 02 08 03 08 04 08 01 13 02 13                 ............

000002c6 <__prntlmt>:
     2c6:	02 03 04 02 0f 0f                                   ......

000002cc <__prntstr>:
     2cc:	01 01 00 00 00 00                                   ......

000002d2 <__hostloc>:
     2d2:	01 0a 02 0a 03 0a                                   ......

000002d8 <MaxKeyHit>:
     2d8:	02 04 03 03 03 03 03 04 03 04                       ..........

000002e2 <strDispenserName1>:
     2e2:	4e 2f 41 00                                         N/A.

000002e6 <strDispenserName2>:
     2e6:	47 69 6c 62 61 72 63 6f 00                          Gilbarco.

000002ef <strDispenserName3>:
     2ef:	57 61 79 6e 65 20 44 41 52 54 00                    Wayne DART.

000002fa <strDispenserName4>:
     2fa:	54 61 74 73 75 6e 6f 00                             Tatsuno.

00000302 <strDispenserName5>:
     302:	4c 47 00                                            LG.

00000305 <DefListDispenserName>:
     305:	e2 02 e6 02 ef 02 fa 02 02 03                       ..........

0000030f <__c.9928>:
     30f:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     31f:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     32f:	20 20 20 20 20 20 20 20 00                                  .

00000338 <__c.9926>:
     338:	20 20 20 20 20 20 53 65 6d 6f 67 61 20 53 65 6c           Semoga Sel
     348:	61 6d 61 74 20 53 61 6d 70 61 69 20 54 75 6a 75     amat Sampai Tuju
     358:	61 6e 20 20 20 20 20 20 00                          an      .

00000361 <__c.9924>:
     361:	20 20 20 20 20 20 20 20 20 20 20 20 53 65 6c 61                 Sela
     371:	6d 61 74 20 20 4a 61 6c 61 6e 20 20 20 20 20 20     mat  Jalan      
     381:	20 20 20 20 20 20 20 20 00                                  .

0000038a <__c.9922>:
     38a:	20 20 20 20 20 20 20 20 20 20 20 20 20 54 65 72                  Ter
     39a:	69 6d 61 20 4b 61 73 69 68 20 20 20 20 20 20 20     ima Kasih       
     3aa:	20 20 20 20 20 20 20 20 00                                  .

000003b3 <__c.9920>:
     3b3:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     3c3:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     3d3:	20 20 20 20 20 20 20 20 00                                  .

000003dc <__c.9918>:
     3dc:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     3ec:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     3fc:	20 20 20 20 20 20 20 20 00                                  .

00000405 <__c.9916>:
     405:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     415:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     425:	20 20 20 20 20 20 20 20 00                                  .

0000042e <__c.9914>:
     42e:	20 20 20 20 20 20 20 20 20 20 20 20 4a 61 6b 61                 Jaka
     43e:	72 74 61 20 53 65 6c 61 74 61 6e 20 20 20 20 20     rta Selatan     
     44e:	20 20 20 20 20 20 20 20 00                                  .

00000457 <__c.9912>:
     457:	20 20 20 20 20 20 20 20 4a 4c 2e 20 52 53 20 46             JL. RS F
     467:	61 74 6d 61 77 61 74 69 20 4e 6f 2e 35 35 20 20     atmawati No.55  
     477:	20 20 20 20 20 20 20 20 00                                  .

00000480 <__c.9910>:
     480:	20 20 20 20 50 54 2e 20 48 41 4e 49 4e 44 4f 20         PT. HANINDO 
     490:	41 55 54 4f 4d 41 54 49 4f 4e 20 53 4f 4c 55 54     AUTOMATION SOLUT
     4a0:	49 4f 4e 53 20 20 20 20 00                          IONS    .

000004a9 <__c.9908>:
     4a9:	30 30 30 30 30 30 00                                000000.

000004b0 <__c.9906>:
     4b0:	42 52 49 00                                         BRI.

000004b4 <__c.9904>:
     4b4:	42 4e 49 00                                         BNI.

000004b8 <__c.9902>:
     4b8:	4d 61 6e 64 69 72 69 00                             Mandiri.

000004c0 <__c.9900>:
     4c0:	42 43 41 00                                         BCA.

000004c4 <__c.9898>:
     4c4:	44 69 65 73 65 6c 20 20 00                          Diesel  .

000004cd <__c.9896>:
     4cd:	42 69 6f 53 6f 6c 72 20 00                          BioSolr .

000004d6 <__c.9894>:
     4d6:	53 6f 6c 61 72 20 20 20 00                          Solar   .

000004df <__c.9892>:
     4df:	50 72 65 6d 69 75 6d 20 00                          Premium .

000004e8 <__c.9890>:
     4e8:	50 65 72 74 61 6d 61 78 00                          Pertamax.

000004f1 <__c.9888>:
     4f1:	50 65 72 74 2b 20 20 20 00                          Pert+   .

000004fa <__c.9886>:
     4fa:	36 35 30 30 00                                      6500.

000004ff <__c.9884>:
     4ff:	34 35 30 30 00                                      4500.

00000504 <__c.9882>:
     504:	36 35 30 30 00                                      6500.

00000509 <__c.9880>:
     509:	34 35 30 30 00                                      4500.

0000050e <__c.9878>:
     50e:	37 32 35 30 00                                      7250.

00000513 <__c.9876>:
     513:	36 35 30 30 00                                      6500.

00000518 <__c.9874>:
     518:	20 20 00                                              .

0000051b <__c.9778>:
     51b:	25 64 00                                            %d.

0000051e <__c.9776>:
     51e:	54 25 2e 32 64 25 2e 32 64 25 73 25 73 25 73 25     T%.2d%.2d%s%s%s%
     52e:	73 25 73 25 73 3a 00                                s%s%s:.

00000535 <__c.9727>:
     535:	32 30 25 73 2f 25 73 2f 25 73 20 25 73 3a 25 73     20%s/%s/%s %s:%s
     545:	3a 25 73 00                                         :%s.

00000549 <__c.9699>:
     549:	25 73 00                                            %s.

0000054c <__c.9690>:
     54c:	25 73 00                                            %s.

0000054f <__c.9639>:
     54f:	25 63 25 2e 32 64 3a 00                             %c%.2d:.

00000557 <__c.9618>:
     557:	43 54 53 52 50 00                                   CTSRP.

0000055d <__c.9594>:
     55d:	3a 00                                               :.

0000055f <__c.9440>:
     55f:	4e 2f 41 00                                         N/A.

00000563 <__c.9420>:
     563:	25 73 00                                            %s.

00000566 <__c.9415>:
	...

00000567 <__c.9288>:
     567:	25 64 2e 25 73 25 73 25 73 00                       %d.%s%s%s.

00000571 <__c.9286>:
     571:	25 64 2e 25 73 25 73 25 73 25 73 25 73 00           %d.%s%s%s%s%s.

0000057f <__c.9278>:
     57f:	54 4f 54 41 4c 20 25 73 25 73 00                    TOTAL %s%s.

0000058a <__c.9276>:
     58a:	54 4f 54 41 4c 20 25 73 25 73 25 73 25 73 00        TOTAL %s%s%s%s.

00000599 <__c.9272>:
     599:	25 73 25 73 00                                      %s%s.

0000059e <__c.9270>:
     59e:	25 73 25 73 25 73 25 73 00                          %s%s%s%s.

000005a7 <__c.9268>:
     5a7:	25 73 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 20 20 20     %s-----------   
     5b7:	20 20 20 20 20 20 20 20 20 20 20 20 20 00                        .

000005c5 <__c.9266>:
     5c5:	25 73 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 20 20 20     %s-----------   
     5d5:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 00           -------------.

000005e3 <__c.9264>:
     5e3:	41 77 61 6c 20 3a 25 73 25 73 00                    Awal :%s%s.

000005ee <__c.9262>:
     5ee:	41 77 61 6c 20 3a 25 73 25 73 25 73 25 73 00        Awal :%s%s%s%s.

000005fd <__c.9260>:
     5fd:	41 6b 68 69 72 3a 25 73 25 73 00                    Akhir:%s%s.

00000608 <__c.9258>:
     608:	41 6b 68 69 72 3a 25 73 25 73 25 73 25 73 00        Akhir:%s%s%s%s.

00000617 <__c.9256>:
     617:	50 25 64 2e 25 64 20 2d 20 25 73 20 00              P%d.%d - %s .

00000624 <__c.9254>:
     624:	50 25 64 2e 25 64 20 2d 20 25 73 20 25 73 20 25     P%d.%d - %s %s %
     634:	73 00                                               s.

00000636 <__c.9252>:
     636:	48 61 72 67 61 3a 20 52 70 2e 25 73 00              Harga: Rp.%s.

00000643 <__c.9248>:
     643:	4e 2f 41 00                                         N/A.

00000647 <__c.9244>:
     647:	50 55 4d 50 2d 50 52 4f 44 55 43 54 20 20 20 56     PUMP-PRODUCT   V
     657:	4f 4c 55 4d 45 28 4c 29 20 20 20 20 20 20 20 20     OLUME(L)        
     667:	20 20 20 20 20 20 00                                      .

0000066e <__c.9242>:
     66e:	50 55 4d 50 2d 50 52 4f 44 55 43 54 20 20 20 56     PUMP-PRODUCT   V
     67e:	4f 4c 55 4d 45 28 4c 29 20 20 20 20 52 55 50 49     OLUME(L)    RUPI
     68e:	41 48 28 52 50 29 00                                AH(RP).

00000695 <__c.9238>:
     695:	41 6b 68 69 72 20 53 68 69 66 74 20 3a 20 25 73     Akhir Shift : %s
     6a5:	20 00                                                .

000006a7 <__c.9236>:
     6a7:	41 77 61 6c 20 20 53 68 69 66 74 20 3a 20 25 73     Awal  Shift : %s
     6b7:	20 00                                                .

000006b9 <__c.9234>:
     6b9:	54 65 72 6d 69 6e 61 6c 20 49 44 20 3a 20 25 2e     Terminal ID : %.
     6c9:	32 64 20 20 20 20 20 20 20 20 20 20 20 20 20 20     2d              
     6d9:	20 20 20 20 20 00                                        .

000006df <__c.9232>:
     6df:	20 20 20 20 20 20 20 20 4c 61 70 6f 72 61 6e 20             Laporan 
     6ef:	54 75 74 75 70 20 53 68 69 66 74 3a 20 25 73 20     Tutup Shift: %s 
     6ff:	20 20 20 20 20 00                                        .

00000705 <__c.9229>:
     705:	25 64 00                                            %d.

00000708 <__c.9171>:
     708:	25 73 00                                            %s.

0000070b <__c.9166>:
     70b:	30 00                                               0.

0000070d <__c.9164>:
     70d:	30 00                                               0.

0000070f <__c.9000>:
     70f:	25 73 00                                            %s.

00000712 <__c.8998>:
     712:	25 73 00                                            %s.

00000715 <__c.8996>:
     715:	25 73 00                                            %s.

00000718 <__c.8994>:
     718:	25 73 00                                            %s.

0000071b <__c.8992>:
     71b:	25 73 00                                            %s.

0000071e <__c.8796>:
     71e:	25 73 00                                            %s.

00000721 <__c.8708>:
     721:	30 30 30 30 30 30 30 30 00                          00000000.

0000072a <__c.8627>:
     72a:	4f 70 65 72 61 74 6f 72 3a 20 25 73 00              Operator: %s.

00000737 <__c.8622>:
     737:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     747:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     757:	2d 00                                               -.

00000759 <__c.8613>:
     759:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     769:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     779:	20 20 20 00                                            .

0000077d <__c.8611>:
     77d:	20 20 20 20 20 20 20 20 20 20 20 20 20 44 55 50                  DUP
     78d:	4c 49 43 41 54 45 20 43 4f 50 59 20 20 20 20 20     LICATE COPY     
     79d:	20 20 20 00                                            .

000007a1 <__c.8459>:
     7a1:	20 20 20 20 20 4f 70 65 72 61 74 6f 72 3a 20 25          Operator: %
     7b1:	73 00                                               s.

000007b3 <__c.8454>:
     7b3:	20 20 20 20 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d         ------------
     7c3:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     7d3:	2d 2d 00                                            --.

000007d6 <__c.8451>:
     7d6:	20 20 20 20 20 53 75 72 63 68 61 72 67 65 20 41          Surcharge A
     7e6:	6d 74 3a 20 25 73 00                                mt: %s.

000007ed <__c.8448>:
     7ed:	20 20 20 20 20 53 75 72 63 68 61 72 67 65 20 44          Surcharge D
     7fd:	73 63 3a 20 25 73 00                                sc: %s.

00000804 <__c.8445>:
     804:	20 20 20 20 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d         ------------
     814:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     824:	2d 2d 00                                            --.

00000827 <__c.8442>:
     827:	20 20 20 20 20 4d 6f 6e 74 68 20 43 6f 6e 73 20          Month Cons 
     837:	41 20 3a 20 52 70 2e 25 73 00                       A : Rp.%s.

00000841 <__c.8439>:
     841:	20 20 20 20 20 4d 6f 6e 74 68 20 43 6f 6e 73 20          Month Cons 
     851:	56 20 3a 20 25 73 20 4c 00                          V : %s L.

0000085a <__c.8436>:
     85a:	20 20 20 20 20 54 6f 74 61 6c 20 52 65 64 65 65          Total Redee
     86a:	6d 20 3a 20 25 73 00                                m : %s.

00000871 <__c.8433>:
     871:	20 20 20 20 20 45 78 70 69 72 79 20 20 20 20 20          Expiry     
     881:	20 20 3a 20 25 73 00                                  : %s.

00000888 <__c.8430>:
     888:	20 20 20 20 20 43 75 72 72 20 50 6f 69 6e 74 73          Curr Points
     898:	20 20 3a 20 25 73 00                                  : %s.

0000089f <__c.8427>:
     89f:	20 20 20 20 20 50 72 65 76 20 50 6f 69 6e 74 73          Prev Points
     8af:	20 20 3a 20 25 73 00                                  : %s.

000008b6 <__c.8424>:
     8b6:	20 20 20 20 20 47 61 69 6e 20 50 6f 69 6e 74 73          Gain Points
     8c6:	20 20 3a 20 25 73 00                                  : %s.

000008cd <__c.8421>:
     8cd:	20 20 20 20 20 43 6f 72 70 20 4e 61 6d 65 20 20          Corp Name  
     8dd:	20 20 3a 20 25 73 00                                  : %s.

000008e4 <__c.8418>:
     8e4:	20 20 20 20 20 43 6f 72 70 20 49 44 20 20 20 20          Corp ID    
     8f4:	20 20 3a 20 25 73 00                                  : %s.

000008fb <__c.8415>:
     8fb:	20 20 20 20 20 43 61 72 64 20 48 6f 6c 64 65 72          Card Holder
     90b:	20 20 3a 20 25 73 20 00                               : %s .

00000913 <__c.8412>:
     913:	20 20 20 20 20 43 61 72 64 20 49 44 20 20 20 20          Card ID    
     923:	20 20 3a 20 25 73 00                                  : %s.

0000092a <__c.8409>:
     92a:	20 20 20 20 20 20 20 20 20 4c 4f 59 41 4c 54 59              LOYALTY
     93a:	20 49 4e 46 4f 52 4d 41 54 49 4f 4e 20 20 20 20      INFORMATION    
     94a:	20 20 00                                              .

0000094d <__c.8406>:
     94d:	20 20 20 20 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d         ------------
     95d:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     96d:	2d 2d 00                                            --.

00000970 <__c.8403>:
     970:	20 20 20 20 2e 25 73 00                                 .%s.

00000978 <__c.8399>:
     978:	20 20 20 20 54 61 6e 64 61 20 54 61 6e 67 61 6e         Tanda Tangan
     988:	20 20 28 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f       (_____________
     998:	5f 29 00                                            _).

0000099b <__c.8394>:
     99b:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     9ab:	20 20 20 20 20 20 00                                      .

000009b2 <__c.8391>:
     9b2:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     9c2:	20 20 20 20 20 20 00                                      .

000009c9 <__c.8388>:
     9c9:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     9d9:	20 00                                                .

000009db <__c.8386>:
     9db:	20 20 00                                              .

000009de <__c.8384>:
     9de:	20 20 20 20 41 70 70 72 20 43 6f 64 65 3a 20 25         Appr Code: %
     9ee:	73 00                                               s.

000009f0 <__c.8382>:
     9f0:	25 73 20 20 00                                      %s  .

000009f5 <__c.8380>:
     9f5:	20 20 20 20 4e 61 6d 61 20 20 20 20 20 3a 20 25         Nama     : %
     a05:	73 00                                               s.

00000a07 <__c.8377>:
     a07:	20 20 20 20 20 20 20 20 20 20 2a 2a 2a 20 50 55               *** PU
     a17:	4d 50 20 54 45 53 54 20 2a 2a 2a 20 20 20 20 20     MP TEST ***     
     a27:	20 20 00                                              .

00000a2a <__c.8375>:
     a2a:	20 20 20 20 56 6f 75 63 68 65 72 20 4e 6f 3a 20         Voucher No: 
     a3a:	25 73 00                                            %s.

00000a3d <__c.8373>:
     a3d:	20 20 20 20 4b 61 72 74 75 20 49 44 20 3a 20 25         Kartu ID : %
     a4d:	73 00                                               s.

00000a4f <__c.8370>:
     a4f:	20 20 20 20 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d         ------------
     a5f:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     a6f:	2d 2d 00                                            --.

00000a72 <__c.8367>:
     a72:	20 20 20 20 20 20 4f 64 6f 6d 65 74 65 72 20 20           Odometer  
     a82:	20 20 3a 20 25 73 00                                  : %s.

00000a89 <__c.8364>:
     a89:	20 20 20 20 20 20 4e 6f 2e 50 6f 6c 69 73 69 20           No.Polisi 
     a99:	20 20 3a 20 25 73 00                                  : %s.

00000aa0 <__c.8361>:
	...

00000aa1 <__c.8359>:
     aa1:	20 20 20 20 20 20 4a 6d 6c 20 52 75 70 69 61 68           Jml Rupiah
     ab1:	20 20 3a 20 52 70 2e 25 73 00                         : Rp.%s.

00000abb <__c.8356>:
     abb:	20 20 20 20 20 20 4a 6d 6c 20 4c 69 74 65 72 20           Jml Liter 
     acb:	20 20 3a 20 25 73 20 4c 00                            : %s L.

00000ad4 <__c.8353>:
	...

00000ad5 <__c.8351>:
     ad5:	20 20 20 20 20 20 48 61 72 67 61 2f 4c 20 20 20           Harga/L   
     ae5:	20 20 3a 20 52 70 2e 25 73 00                         : Rp.%s.

00000aef <__c.8348>:
     aef:	20 20 20 20 20 20 50 72 6f 64 75 6b 20 20 20 20           Produk    
     aff:	20 20 3a 20 25 73 00                                  : %s.

00000b06 <__c.8345>:
     b06:	20 20 20 20 20 20 50 75 6c 61 75 2f 50 6f 6d 70           Pulau/Pomp
     b16:	61 20 3a 20 5b 25 73 5d 2d 25 73 00                 a : [%s]-%s.

00000b22 <__c.8342>:
     b22:	20 20 20 20 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d         ------------
     b32:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     b42:	2d 2d 00                                            --.

00000b45 <__c.8339>:
     b45:	20 20 20 20 20 20 57 61 6b 74 75 3a 20 25 73 20           Waktu: %s 
     b55:	25 73 20 00                                         %s .

00000b59 <__c.8335>:
     b59:	20 20 20 20 20 20 53 68 69 66 74 3a 20 25 73 20           Shift: %s 
     b69:	20 4e 6f 2e 54 72 61 6e 73 3a 20 25 73 20 00         No.Trans: %s .

00000b78 <__c.8318>:
     b78:	20 00                                                .

00000b7a <__c.8316>:
     b7a:	20 20 20 20 20 20 20 20 20 20 20 20 20 44 55 50                  DUP
     b8a:	4c 49 43 41 54 45 20 43 4f 50 59 20 20 20 20 20     LICATE COPY     
     b9a:	20 20 20 00                                            .

00000b9e <__c.7904>:
     b9e:	45 72 72 6f 72 20 4e 6f 20 43 6f 6e 6e 65 63 74     Error No Connect
     bae:	69 6f 6e 00                                         ion.

00000bb2 <__c.7898>:
     bb2:	50 72 6f 73 65 73 00                                Proses.

00000bb9 <__c.7896>:
     bb9:	53 65 6e 64 20 52 65 71 75 65 73 74 00              Send Request.

00000bc6 <__c.7891>:
     bc6:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
     bd6:	6e 74 65 72 00                                      nter.

00000bdb <__c.7889>:
     bdb:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
     beb:	6e 74 65 72 00                                      nter.

00000bf0 <__c.7886>:
     bf0:	5b 2a 5d 43 61 6e 63 65 6c 20 20 5b 23 5d 45 6e     [*]Cancel  [#]En
     c00:	74 65 72 20 00                                      ter .

00000c05 <__c.7884>:
     c05:	4f 64 6f 6d 65 74 65 72 3a 5f 20 00                 Odometer:_ .

00000c11 <__c.7882>:
     c11:	50 6c 61 74 20 4e 6f 3a 20 25 73 20 00              Plat No: %s .

00000c1e <__c.7879>:
     c1e:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
     c2e:	6e 74 65 72 00                                      nter.

00000c33 <__c.7877>:
     c33:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
     c43:	6e 74 65 72 00                                      nter.

00000c48 <__c.7874>:
     c48:	5b 2a 5d 43 61 6e 63 65 6c 20 20 5b 23 5d 45 6e     [*]Cancel  [#]En
     c58:	74 65 72 20 00                                      ter .

00000c5d <__c.7872>:
     c5d:	5f 00                                               _.

00000c5f <__c.7870>:
     c5f:	49 6e 70 75 74 20 50 6c 61 74 20 4e 6f 3a 20 00     Input Plat No: .

00000c6f <__c.7794>:
     c6f:	23 29 53 61 76 65 00                                #)Save.

00000c76 <__c.7792>:
     c76:	34 29 54 65 72 6d 49 44 3a 25 64 20 00              4)TermID:%d .

00000c83 <__c.7790>:
     c83:	25 64 00                                            %d.

00000c86 <__c.7778>:
     c86:	25 64 00                                            %d.

00000c89 <__c.7770>:
     c89:	23 29 53 61 76 65 00                                #)Save.

00000c90 <__c.7768>:
     c90:	34 29 54 65 72 6d 49 44 3a 25 64 20 00              4)TermID:%d .

00000c9d <__c.7766>:
     c9d:	33 29 4e 6f 74 69 66 20 3a 20 20 20 20 20 2a 29     3)Notif :     *)
     cad:	45 78 69 74 00                                      Exit.

00000cb2 <__c.7764>:
     cb2:	32 29 44 2f 54 20 20 20 3a 00                       2)D/T   :.

00000cbc <__c.7762>:
     cbc:	31 29 4d 6f 6e 65 79 20 3a 00                       1)Money :.

00000cc6 <__c.7709>:
     cc6:	25 2e 32 64 00                                      %.2d.

00000ccb <__c.7707>:
     ccb:	25 64 00                                            %d.

00000cce <__c.7690>:
     cce:	25 2e 32 64 00                                      %.2d.

00000cd3 <__c.7688>:
     cd3:	25 64 00                                            %d.

00000cd6 <__c.7680>:
     cd6:	34 29 43 75 74 20 3a 20 20 2a 29 45 78 69 74 00     4)Cut :  *)Exit.

00000ce6 <__c.7678>:
     ce6:	33 29 4c 6f 67 6f 3a 20 20 23 29 53 61 76 65 00     3)Logo:  #)Save.

00000cf6 <__c.7676>:
     cf6:	32 29 53 69 7a 65 3a 20 20 36 29 53 70 61 63 65     2)Size:  6)Space
     d06:	20 3a 00                                             :.

00000d09 <__c.7674>:
     d09:	31 29 54 79 70 65 3a 20 20 35 29 53 63 72 6f 6c     1)Type:  5)Scrol
     d19:	6c 3a 00                                            l:.

00000d1c <__c.7610>:
     d1c:	2a 29 43 61 6e 63 65 6c 20 20 20 20 20 20 23 29     *)Cancel      #)
     d2c:	53 61 76 65 00                                      Save.

00000d31 <__c.7608>:
     d31:	54 49 4d 45 20 3a 20 00                             TIME : .

00000d39 <__c.7606>:
     d39:	44 41 54 45 20 3a 20 00                             DATE : .

00000d41 <__c.7556>:
     d41:	25 64 00                                            %d.

00000d44 <__c.7545>:
     d44:	25 64 00                                            %d.

00000d47 <__c.7537>:
     d47:	2a 29 45 78 69 74 20 20 20 20 20 20 20 20 23 29     *)Exit        #)
     d57:	53 61 76 65 00                                      Save.

00000d5c <__c.7535>:
     d5c:	32 29 4e 32 3a 20 20 34 29 4e 34 3a 20 20 36 29     2)N2:  4)N4:  6)
     d6c:	4e 36 3a 00                                         N6:.

00000d70 <__c.7533>:
     d70:	31 29 4e 31 3a 20 20 33 29 4e 33 3a 20 20 35 29     1)N1:  3)N3:  5)
     d80:	4e 35 3a 00                                         N5:.

00000d84 <__c.7531>:
     d84:	50 72 6f 64 75 63 74 20 46 49 50 25 2e 32 64 00     Product FIP%.2d.

00000d94 <__c.7447>:
     d94:	43 6f 6d 70 6c 65 74 65 64 00                       Completed.

00000d9e <__c.7445>:
     d9e:	43 61 6e 63 65 6c 20 20 20 20 20 00                 Cancel     .

00000daa <__c.7442>:
     daa:	49 64 5b 25 64 5d 3d 25 2e 32 64 20 20 00           Id[%d]=%.2d  .

00000db8 <__c.7439>:
     db8:	53 61 76 69 6e 67 2e 2e 00                          Saving...

00000dc1 <__c.7437>:
     dc1:	2d 50 75 6d 70 49 44 2d 00                          -PumpID-.

00000dca <__c.7433>:
     dca:	20 20 20 20 4e 6f 74 20 41 6c 6c 6f 77 65 64 20         Not Allowed 
     dda:	20 20 20 20 00                                          .

00000ddf <__c.7431>:
     ddf:	20 20 44 75 70 6c 69 63 61 74 65 20 50 75 6d 70       Duplicate Pump
     def:	49 44 20 20 00                                      ID  .

00000df4 <__c.7429>:
     df4:	20 20 20 20 20 20 57 61 72 6e 69 6e 67 21 20 20           Warning!  
     e04:	20 20 20 20 00                                          .

00000e09 <__c.7417>:
     e09:	25 64 2e 50 25 2e 32 64 20 7c 20 25 64 2e 50 25     %d.P%.2d | %d.P%
     e19:	2e 32 64 00                                         .2d.

00000e1d <__c.7411>:
     e1d:	23 29 53 61 76 65 00                                #)Save.

00000e24 <__c.7409>:
     e24:	2a 29 42 61 63 6b 00                                *)Back.

00000e2b <__c.7404>:
     e2b:	25 64 2e 50 25 2e 32 64 20 7c 20 25 64 2e 50 25     %d.P%.2d | %d.P%
     e3b:	2e 32 64 00                                         .2d.

00000e3f <__c.7355>:
     e3f:	25 2e 32 64 00                                      %.2d.

00000e44 <__c.7349>:
     e44:	25 2e 32 64 00                                      %.2d.

00000e49 <__c.7347>:
     e49:	34 29 34 3a 20 20 20 38 29 38 3a 20 20 20 2a 29     4)4:   8)8:   *)
     e59:	45 78 69 74 00                                      Exit.

00000e5e <__c.7345>:
     e5e:	33 29 33 3a 20 20 20 37 29 37 3a 20 20 20 23 29     3)3:   7)7:   #)
     e6e:	53 61 76 65 00                                      Save.

00000e73 <__c.7343>:
     e73:	32 29 32 3a 20 20 20 36 29 36 3a 00                 2)2:   6)6:.

00000e7f <__c.7341>:
     e7f:	31 29 31 3a 20 20 20 35 29 35 3a 00                 1)1:   5)5:.

00000e8b <__c.7307>:
     e8b:	5b 2a 5d 45 78 69 74 20 20 5b 23 5d 43 68 61 6e     [*]Exit  [#]Chan
     e9b:	67 65 20 00                                         ge .

00000e9f <__c.7305>:
     e9f:	25 64 2e 25 73 00                                   %d.%s.

00000ea5 <__c.7300>:
     ea5:	2d 44 69 73 70 65 6e 73 65 72 20 42 72 61 6e 64     -Dispenser Brand
     eb5:	2d 00                                               -.

00000eb7 <__c.7284>:
     eb7:	2a 29 45 78 69 74 00                                *)Exit.

00000ebe <__c.7282>:
     ebe:	32 29 50 72 6f 64 75 63 74 00                       2)Product.

00000ec8 <__c.7280>:
     ec8:	31 29 49 44 00                                      1)ID.

00000ecd <__c.7265>:
     ecd:	2a 29 45 78 69 74 00                                *)Exit.

00000ed4 <__c.7260>:
     ed4:	25 64 2e 50 25 2e 32 64 20 7c 20 25 64 2e 50 25     %d.P%.2d | %d.P%
     ee4:	2e 32 64 20 00                                      .2d .

00000ee9 <__c.7251>:
     ee9:	25 2e 32 64 00                                      %.2d.

00000eee <__c.7050>:
     eee:	5b 2a 5d 45 78 69 74 00                             [*]Exit.

00000ef6 <__c.7048>:
     ef6:	36 2e 41 63 74 3a 25 64 00                          6.Act:%d.

00000eff <__c.7046>:
     eff:	35 2e 44 6c 79 3a 25 64 00                          5.Dly:%d.

00000f08 <__c.7044>:
     f08:	34 2e 54 69 6d 50 6f 6f 6c 3a 25 64 00              4.TimPool:%d.

00000f15 <__c.7042>:
     f15:	33 2e 54 72 79 53 65 6e 64 3a 25 64 00              3.TrySend:%d.

00000f22 <__c.7040>:
     f22:	32 2e 6e 4e 6f 50 75 6d 70 3a 25 64 00              2.nNoPump:%d.

00000f2f <__c.7038>:
     f2f:	31 2e 4d 61 78 50 75 6d 70 3a 25 64 00              1.MaxPump:%d.

00000f3c <__c.6979>:
     f3c:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 00              [*]Back     .

00000f49 <__c.6974>:
     f49:	43 4f 4d 25 64 3a 25 64 00                          COM%d:%d.

00000f52 <__c.6972>:
     f52:	20 20 20 20 20 2d 42 61 75 64 72 61 74 65 2d 20          -Baudrate- 
     f62:	20 20 20 20 00                                          .

00000f67 <__c.6967>:
     f67:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 20 00           [*]Back      .

00000f75 <__c.6965>:
     f75:	33 2e 43 4f 4d 33 3a 34 38 35 00                    3.COM3:485.

00000f80 <__c.6963>:
     f80:	33 2e 43 4f 4d 33 3a 32 33 32 00                    3.COM3:232.

00000f8b <__c.6961>:
     f8b:	33 2e 43 4f 4d 33 3a 54 54 4c 00                    3.COM3:TTL.

00000f96 <__c.6959>:
     f96:	32 2e 42 61 75 64 72 61 74 65 00                    2.Baudrate.

00000fa1 <__c.6957>:
     fa1:	31 2e 4d 6f 64 65 3a 53 74 61 6e 64 61 6c 6f 6e     1.Mode:Standalon
     fb1:	65 00                                               e.

00000fb3 <__c.6955>:
     fb3:	31 2e 4d 6f 64 65 3a 53 6c 61 76 65 00              1.Mode:Slave.

00000fc0 <__c.6953>:
     fc0:	31 2e 4d 6f 64 65 3a 4e 6f 6e 65 00                 1.Mode:None.

00000fcc <__c.6906>:
     fcc:	49 6e 76 61 6c 69 64 20 4f 6c 64 20 50 61 73 73     Invalid Old Pass
     fdc:	77 6f 72 64 00                                      word.

00000fe1 <__c.6904>:
     fe1:	20 20 20 20 20 20 45 52 52 4f 52 20 20 20 20 20           ERROR     
     ff1:	20 20 20 20 00                                          .

00000ff6 <__c.6902>:
     ff6:	49 6e 76 61 6c 69 64 20 4e 65 77 20 50 61 73 73     Invalid New Pass
    1006:	77 6f 72 64 00                                      word.

0000100b <__c.6900>:
    100b:	20 20 20 20 20 20 45 52 52 4f 52 20 20 20 20 20           ERROR     
    101b:	20 20 20 20 00                                          .

00001020 <__c.6898>:
    1020:	20 20 20 50 61 73 73 77 6f 72 64 20 53 61 76 65        Password Save
    1030:	64 20 20 20 00                                      d   .

00001035 <__c.6896>:
    1035:	20 20 20 20 20 43 6f 6d 70 6c 65 74 65 64 20 20          Completed  
    1045:	20 20 20 20 00                                          .

0000104a <__c.6892>:
    104a:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    105a:	6e 74 65 72 00                                      nter.

0000105f <__c.6889>:
    105f:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
    106f:	6e 74 65 72 00                                      nter.

00001074 <__c.6886>:
    1074:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1084:	6e 74 65 72 00                                      nter.

00001089 <__c.6884>:
    1089:	4e 65 77 3a 5f 20 20 20 20 20 20 20 20 20 20 20     New:_           
    1099:	20 20 20 20 00                                          .

0000109e <__c.6880>:
    109e:	56 61 6c 69 64 61 74 69 6e 67 2e 2e 00              Validating...

000010ab <__c.6876>:
    10ab:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    10bb:	6e 74 65 72 00                                      nter.

000010c0 <__c.6873>:
    10c0:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
    10d0:	6e 74 65 72 00                                      nter.

000010d5 <__c.6868>:
    10d5:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    10e5:	6e 74 65 72 00                                      nter.

000010ea <__c.6866>:
    10ea:	4e 65 77 3a 5f 20 20 20 20 20 20 20 20 20 20 20     New:_           
    10fa:	20 20 20 20 00                                          .

000010ff <__c.6862>:
    10ff:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    110f:	6e 74 65 72 00                                      nter.

00001114 <__c.6859>:
    1114:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
    1124:	6e 74 65 72 00                                      nter.

00001129 <__c.6854>:
    1129:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1139:	6e 74 65 72 00                                      nter.

0000113e <__c.6852>:
    113e:	4e 65 77 3a 5f 20 20 20 20 20 20 20 20 20 20 20     New:_           
    114e:	20 20 20 20 00                                          .

00001153 <__c.6848>:
    1153:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1163:	6e 74 65 72 00                                      nter.

00001168 <__c.6846>:
    1168:	4f 6c 64 3a 5f 00                                   Old:_.

0000116e <__c.6844>:
    116e:	2d 41 64 6d 69 6e 69 73 74 72 61 74 6f 72 2d 00     -Administrator-.

0000117e <__c.6842>:
    117e:	2d 53 75 70 65 72 76 69 73 6f 72 2d 00              -Supervisor-.

0000118b <__c.6834>:
    118b:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 00              [*]Back     .

00001198 <__c.6832>:
    1198:	32 2e 41 64 6d 69 6e 69 73 74 72 61 74 6f 72 00     2.Administrator.

000011a8 <__c.6830>:
    11a8:	31 2e 53 75 70 65 72 76 69 73 6f 72 00              1.Supervisor.

000011b5 <__c.6828>:
    11b5:	2d 43 68 61 6e 67 65 20 50 61 73 73 77 6f 72 64     -Change Password
    11c5:	2d 00                                               -.

000011c7 <__c.6825>:
    11c7:	53 61 76 65 64 20 00                                Saved .

000011ce <__c.6819>:
    11ce:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    11de:	6e 74 65 72 00                                      nter.

000011e3 <__c.6816>:
    11e3:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
    11f3:	6e 74 65 72 00                                      nter.

000011f8 <__c.6811>:
    11f8:	5b 2a 5d 4e 6f 20 20 20 20 5b 23 5d 59 65 73 00     [*]No    [#]Yes.

00001208 <__c.6809>:
    1208:	53 61 76 65 3f 00                                   Save?.

0000120e <__c.6807>:
    120e:	4e 65 77 20 4f 70 65 72 61 74 6f 72 3a 00           New Operator:.

0000121c <__c.6805>:
    121c:	25 73 00                                            %s.

0000121f <__c.6801>:
    121f:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    122f:	6e 74 65 72 00                                      nter.

00001234 <__c.6799>:
    1234:	4e 65 77 20 3a 5f 20 20 20 20 20 20 20 20 20 20     New :_          
    1244:	20 20 20 20 00                                          .

00001249 <__c.6797>:
    1249:	4e 61 6d 65 3a 00                                   Name:.

0000124f <__c.6795>:
    124f:	25 73 00                                            %s.

00001252 <__c.6786>:
    1252:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 20 20 20 20     [*]Back         
    1262:	20 00                                                .

00001264 <__c.6784>:
    1264:	32 2e 43 68 61 6e 67 65 20 50 61 73 73 77 6f 72     2.Change Passwor
    1274:	64 00                                               d.

00001276 <__c.6782>:
    1276:	31 2e 43 68 61 6e 67 65 20 4f 70 65 72 61 74 6f     1.Change Operato
    1286:	72 00                                               r.

00001288 <__c.6698>:
    1288:	2a 29 42 61 63 6b 00                                *)Back.

0000128f <__c.6696>:
    128f:	34 2e 53 70 61 72 61 74 6f 72 3a 25 63 20 00        4.Sparator:%c .

0000129e <__c.6694>:
    129e:	33 2e 44 65 63 69 6d 61 6c 20 3a 25 63 20 00        3.Decimal :%c .

000012ad <__c.6692>:
    12ad:	32 2e 54 2e 4d 6f 6e 65 79 20 3a 25 64 20 00        2.T.Money :%d .

000012bc <__c.6690>:
    12bc:	31 2e 54 2e 56 6f 6c 75 6d 65 3a 25 64 20 00        1.T.Volume:%d .

000012cb <__c.6685>:
    12cb:	5b 2a 5d 42 61 63 6b 20 20 5b 23 5d 4e 65 78 74     [*]Back  [#]Next
	...

000012dc <__c.6683>:
    12dc:	33 2e 4d 6f 6e 65 79 20 3a 25 64 00                 3.Money :%d.

000012e8 <__c.6681>:
    12e8:	32 2e 56 6f 6c 75 6d 65 3a 25 64 00                 2.Volume:%d.

000012f4 <__c.6679>:
    12f4:	31 2e 50 72 69 63 65 20 3a 25 64 00                 1.Price :%d.

00001300 <__c.6662>:
    1300:	34 29 42 72 61 6e 64 20 20 2a 29 45 78 69 74 00     4)Brand  *)Exit.

00001310 <__c.6660>:
    1310:	33 29 4c 61 62 65 6c 20 20 00                       3)Label  .

0000131a <__c.6658>:
    131a:	32 29 50 72 6f 64 75 63 74 00                       2)Product.

00001324 <__c.6656>:
    1324:	31 29 49 44 20 20 20 20 20 00                       1)ID     .

0000132e <__c.6616>:
    132e:	2a 29 42 61 63 6b 20 20 20 20 23 29 4f 4b 20 20     *)Back    #)OK  
    133e:	20 20 20 20 00                                          .

00001343 <__c.6614>:
    1343:	4e 65 77 3a 5f 00                                   New:_.

00001349 <__c.6612>:
    1349:	4f 6c 64 3a 25 73 00                                Old:%s.

00001350 <__c.6610>:
    1350:	2a 29 42 61 63 6b 20 20 20 20 23 29 4f 4b 20 20     *)Back    #)OK  
    1360:	20 20 20 20 00                                          .

00001365 <__c.6608>:
    1365:	4e 65 77 3a 5f 00                                   New:_.

0000136b <__c.6606>:
    136b:	45 64 69 74 20 50 72 6f 64 75 63 74 20 4e 61 6d     Edit Product Nam
    137b:	65 20 20 20 00                                      e   .

00001380 <__c.6604>:
    1380:	4f 6c 64 3a 25 73 00                                Old:%s.

00001387 <__c.6601>:
    1387:	2a 29 42 61 63 6b 20 20 20 20 20 20 20 00           *)Back       .

00001395 <__c.6599>:
    1395:	32 29 25 73 00                                      2)%s.

0000139a <__c.6597>:
    139a:	31 29 25 73 00                                      1)%s.

0000139f <__c.6592>:
    139f:	2a 29 42 61 63 6b 00                                *)Back.

000013a6 <__c.6587>:
    13a6:	25 64 29 25 73 00                                   %d)%s.

000013ac <__c.6518>:
    13ac:	2a 29 42 61 63 6b 20 20 20 20 20 20 20 20 20 20     *)Back          
    13bc:	20 20 20 20 00                                          .

000013c1 <__c.6516>:
    13c1:	33 29 50 75 6d 70 50 6f 6f 6c 69 6e 67 20 20 20     3)PumpPooling   
    13d1:	20 20 20 20 00                                          .

000013d6 <__c.6514>:
    13d6:	32 29 53 79 73 74 65 6d 20 20 20 20 20 20 20 20     2)System        
    13e6:	20 20 20 20 00                                          .

000013eb <__c.6512>:
    13eb:	31 29 4f 70 65 72 61 74 6f 72 20 20 20 20 20 20     1)Operator      
    13fb:	20 20 20 20 00                                          .

00001400 <__c.6509>:
    1400:	34 29 44 61 74 65 74 69 6d 65 20 2a 29 45 78 69     4)Datetime *)Exi
    1410:	74 20 20 20 00                                      t   .

00001415 <__c.6507>:
    1415:	33 29 44 65 63 69 6d 61 6c 20 20 37 29 4e 65 78     3)Decimal  7)Nex
    1425:	74 20 20 20 00                                      t   .

0000142a <__c.6505>:
    142a:	32 29 50 75 6d 70 20 20 20 20 20 36 29 48 6f 73     2)Pump     6)Hos
    143a:	74 20 20 20 00                                      t   .

0000143f <__c.6503>:
    143f:	31 29 50 72 6f 64 75 63 74 20 20 35 29 50 72 69     1)Product  5)Pri
    144f:	6e 74 65 72 00                                      nter.

00001454 <__c.6418>:
    1454:	2e 00                                               ..

00001456 <__c.6416>:
    1456:	25 64 00                                            %d.

00001459 <__c.6414>:
    1459:	20 20 20 00                                            .

0000145d <__c.6412>:
    145d:	2e 00                                               ..

0000145f <__c.6410>:
    145f:	25 64 00                                            %d.

00001462 <__c.6408>:
    1462:	20 20 20 00                                            .

00001466 <__c.6401>:
    1466:	5b 2a 5d 63 61 6e 63 65 6c 20 20 5b 23 5d 6e 65     [*]cancel  [#]ne
    1476:	78 74 20 20 00                                      xt  .

0000147b <__c.6399>:
    147b:	4e 65 77 3a 20 20 20 5f 2e 20 20 20 2e 20 20 20     New:   _.   .   
    148b:	2e 20 20 20 00                                      .   .

00001490 <__c.6397>:
    1490:	4f 6c 64 3a 20 25 64 2e 25 64 2e 25 64 2e 25 64     Old: %d.%d.%d.%d
	...

000014a1 <__c.6395>:
    14a1:	53 65 72 76 65 72 20 49 50 00                       Server IP.

000014ab <__c.6306>:
    14ab:	2e 00                                               ..

000014ad <__c.6304>:
    14ad:	25 64 00                                            %d.

000014b0 <__c.6302>:
    14b0:	20 20 20 00                                            .

000014b4 <__c.6300>:
    14b4:	2e 00                                               ..

000014b6 <__c.6298>:
    14b6:	25 64 00                                            %d.

000014b9 <__c.6296>:
    14b9:	20 20 20 00                                            .

000014bd <__c.6289>:
    14bd:	5b 2a 5d 63 61 6e 63 65 6c 20 20 5b 23 5d 6e 65     [*]cancel  [#]ne
    14cd:	78 74 20 20 00                                      xt  .

000014d2 <__c.6287>:
    14d2:	4e 65 77 3a 20 20 20 5f 2e 20 20 20 2e 20 20 20     New:   _.   .   
    14e2:	2e 20 20 20 00                                      .   .

000014e7 <__c.6285>:
    14e7:	4f 6c 64 3a 20 25 64 2e 25 64 2e 25 64 2e 25 64     Old: %d.%d.%d.%d
	...

000014f8 <__c.6283>:
    14f8:	43 6c 69 65 6e 74 20 49 50 00                       Client IP.

00001502 <__c.6241>:
    1502:	25 73 25 73 00                                      %s%s.

00001507 <__c.6237>:
    1507:	5b 2a 5d 4e 6f 20 5b 23 5d 59 65 73 00              [*]No [#]Yes.

00001514 <__c.6235>:
    1514:	53 61 76 65 20 46 6f 6f 74 65 72 25 64 20 3f 00     Save Footer%d ?.

00001524 <__c.6231>:
    1524:	5b 2a 5d 4e 6f 20 20 5b 23 5d 59 65 73 00           [*]No  [#]Yes.

00001532 <__c.6229>:
    1532:	41 6c 69 67 6e 20 43 65 6e 74 65 72 3f 00           Align Center?.

00001540 <__c.6226>:
    1540:	5b 2a 5d 42 61 63 6b 20 20 5b 23 5d 4f 4b 00        [*]Back  [#]OK.

0000154f <__c.6224>:
    154f:	45 64 69 74 20 46 6f 6f 74 65 72 25 64 20 00        Edit Footer%d .

0000155e <__c.6220>:
    155e:	2a 29 45 78 69 74 20 20 20 20 20 20 20 20 20 20     *)Exit          
    156e:	20 20 20 20 00                                          .

00001573 <__c.6218>:
    1573:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    1583:	20 20 20 20 00                                          .

00001588 <__c.6216>:
    1588:	32 29 46 6f 6f 74 65 72 32 20 20 34 29 46 6f 6f     2)Footer2  4)Foo
    1598:	74 65 72 34 00                                      ter4.

0000159d <__c.6214>:
    159d:	31 29 46 6f 6f 74 65 72 31 20 20 33 29 46 6f 6f     1)Footer1  3)Foo
    15ad:	74 65 72 33 00                                      ter3.

000015b2 <__c.6183>:
    15b2:	25 73 25 73 00                                      %s%s.

000015b7 <__c.6179>:
    15b7:	5b 2a 5d 4e 6f 20 5b 23 5d 59 65 73 00              [*]No [#]Yes.

000015c4 <__c.6177>:
    15c4:	53 61 76 65 20 48 65 61 64 65 72 25 64 20 3f 00     Save Header%d ?.

000015d4 <__c.6173>:
    15d4:	5b 2a 5d 4e 6f 20 20 5b 23 5d 59 65 73 00           [*]No  [#]Yes.

000015e2 <__c.6171>:
    15e2:	41 6c 69 67 6e 20 43 65 6e 74 65 72 3f 00           Align Center?.

000015f0 <__c.6168>:
    15f0:	5b 2a 5d 42 61 63 6b 20 20 5b 23 5d 4f 4b 00        [*]Back  [#]OK.

000015ff <__c.6166>:
    15ff:	45 64 69 74 20 48 65 61 64 65 72 25 64 20 00        Edit Header%d .

0000160e <__c.6162>:
    160e:	2a 29 45 78 69 74 20 20 20 20 20 20 20 20 20 20     *)Exit          
    161e:	20 20 20 20 00                                          .

00001623 <__c.6160>:
    1623:	33 29 48 65 61 64 65 72 33 20 20 36 29 48 65 61     3)Header3  6)Hea
    1633:	64 65 72 36 00                                      der6.

00001638 <__c.6158>:
    1638:	32 29 48 65 61 64 65 72 32 20 20 35 29 48 65 61     2)Header2  5)Hea
    1648:	64 65 72 35 00                                      der5.

0000164d <__c.6156>:
    164d:	31 29 48 65 61 64 65 72 31 20 20 34 29 48 65 61     1)Header1  4)Hea
    165d:	64 65 72 34 00                                      der4.

00001662 <__c.6113>:
    1662:	2a 29 45 78 69 74 00                                *)Exit.

00001669 <__c.6111>:
    1669:	33 29 50 61 73 73 77 6f 72 64 20 20 20 20 20 20     3)Password      
    1679:	20 20 20 20 00                                          .

0000167e <__c.6109>:
    167e:	32 29 46 6f 6f 74 65 72 20 20 20 20 20 20 20 20     2)Footer        
    168e:	20 20 20 20 00                                          .

00001693 <__c.6107>:
    1693:	31 29 48 65 61 64 65 72 20 20 20 20 20 20 20 20     1)Header        
    16a3:	20 20 20 20 00                                          .

000016a8 <__c.6105>:
    16a8:	32 29 46 6f 6f 74 65 72 20 20 20 20 35 29 53 65     2)Footer    5)Se
    16b8:	72 76 65 72 00                                      rver.

000016bd <__c.6103>:
    16bd:	31 29 48 65 61 64 65 72 20 20 20 20 34 29 43 6c     1)Header    4)Cl
    16cd:	69 65 6e 74 00                                      ient.

000016d2 <__c.6049>:
    16d2:	53 61 76 69 6e 67 20 53 68 69 66 74 44 61 74 61     Saving ShiftData
    16e2:	2e 2e 20 00                                         .. .

000016e6 <__c.6044>:
    16e6:	25 73 20 25 73 00                                   %s %s.

000016ec <__c.6042>:
    16ec:	50 72 69 6e 74 69 6e 67 20 54 6f 74 61 6c 69 7a     Printing Totaliz
    16fc:	65 72 00                                            er.

000016ff <__c.6038>:
    16ff:	43 61 6e 63 65 6c 00                                Cancel.

00001706 <__c.6033>:
    1706:	45 72 72 6f 72 20 2d 20 4e 6f 20 50 75 6d 70 3a     Error - No Pump:
    1716:	25 64 20 00                                         %d .

0000171a <__c.6028>:
    171a:	57 61 69 74 20 50 75 6d 70 3a 25 64 20 00           Wait Pump:%d .

00001728 <__c.6024>:
    1728:	57 61 69 74 20 50 75 6d 70 3a 25 64 20 00           Wait Pump:%d .

00001736 <__c.6022>:
    1736:	54 6f 74 61 6c 69 7a 65 72 2e 2e 00                 Totalizer...

00001742 <__c.5950>:
    1742:	2a 29 45 78 69 74 00                                *)Exit.

00001749 <__c.5948>:
    1749:	33 2e 4c 6f 63 6b 20 50 75 6d 70 20 20 00           3.Lock Pump  .

00001757 <__c.5946>:
    1757:	32 2e 43 6c 6f 73 65 20 44 61 79 20 20 00           2.Close Day  .

00001765 <__c.5944>:
    1765:	31 2e 43 6c 6f 73 65 20 53 68 69 66 74 00           1.Close Shift.

00001773 <__c.5902>:
    1773:	34 29 53 65 74 74 69 6e 67 73 20 20 20 2a 29 45     4)Settings   *)E
    1783:	78 69 74 20 00                                      xit .

00001788 <__c.5900>:
    1788:	33 29 43 6c 6f 73 65 44 61 79 20 20 20 20 20 20     3)CloseDay      
    1798:	20 20 20 20 00                                          .

0000179d <__c.5898>:
    179d:	32 29 43 6c 6f 73 65 53 68 69 66 74 20 20 20 20     2)CloseShift    
    17ad:	20 20 20 20 00                                          .

000017b2 <__c.5896>:
    17b2:	31 29 52 65 50 72 69 6e 74 20 20 20 20 20 20 20     1)RePrint       
    17c2:	20 20 20 20 00                                          .

000017c7 <__c.5861>:
    17c7:	50 61 73 73 77 6f 72 64 20 52 65 73 74 6f 72 65     Password Restore
    17d7:	64 00                                               d.

000017d9 <__c.5857>:
    17d9:	49 6e 76 61 6c 69 64 20 52 65 73 74 6f 72 65 20     Invalid Restore 
    17e9:	20 00                                                .

000017eb <__c.5854>:
    17eb:	30 30 30 30 30 00                                   00000.

000017f1 <__c.5852>:
    17f1:	31 31 31 31 31 00                                   11111.

000017f7 <__c.5848>:
    17f7:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1807:	6e 74 65 72 00                                      nter.

0000180c <__c.5845>:
    180c:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
    181c:	6e 74 65 72 00                                      nter.

00001821 <__c.5838>:
    1821:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1831:	6e 74 65 72 00                                      nter.

00001836 <__c.5836>:
    1836:	5f 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20     _               
    1846:	20 20 20 20 00                                          .

0000184b <__c.5834>:
    184b:	45 6e 74 65 72 20 52 65 73 74 6f 72 65 20 43 6f     Enter Restore Co
    185b:	64 65 20 20 00                                      de  .

00001860 <__c.5832>:
    1860:	4b 65 79 20 53 74 61 6d 70 3a 25 73 20 00           Key Stamp:%s .

0000186e <__c.5828>:
    186e:	49 6e 76 61 6c 69 64 20 43 6f 64 65 20 20 20 20     Invalid Code    
    187e:	20 20 20 20 00                                          .

00001883 <__c.5825>:
	...

00001884 <__c.5823>:
    1884:	25 73 00                                            %s.

00001887 <__c.5821>:
    1887:	25 73 00                                            %s.

0000188a <__c.5818>:
    188a:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    189a:	6e 74 65 72 00                                      nter.

0000189f <__c.5815>:
    189f:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
    18af:	6e 74 65 72 00                                      nter.

000018b4 <__c.5808>:
	...

000018b5 <__c.5806>:
    18b5:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    18c5:	6e 74 65 72 00                                      nter.

000018ca <__c.5804>:
    18ca:	5f 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20     _               
    18da:	20 20 20 20 00                                          .

000018df <__c.5802>:
    18df:	45 6e 74 65 72 20 47 65 4e 69 55 73 20 43 6f 64     Enter GeNiUs Cod
    18ef:	65 20 20 20 00                                      e   .

000018f4 <__c.5797>:
    18f4:	49 6e 76 61 6c 69 64 20 43 6f 64 65 20 20 20 20     Invalid Code    
    1904:	20 20 20 20 00                                          .

00001909 <__c.5794>:
    1909:	52 65 73 65 74 20 43 6f 6d 70 6c 65 74 65 00        Reset Complete.

00001918 <__c.5791>:
    1918:	50 6c 65 61 73 65 20 57 61 69 74 2e 2e 00           Please Wait...

00001926 <__c.5789>:
    1926:	52 65 73 65 74 20 45 45 50 52 4f 4d 00              Reset EEPROM.

00001933 <__c.5785>:
    1933:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1943:	6e 74 65 72 00                                      nter.

00001948 <__c.5782>:
    1948:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
    1958:	6e 74 65 72 00                                      nter.

0000195d <__c.5775>:
    195d:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    196d:	6e 74 65 72 00                                      nter.

00001972 <__c.5773>:
    1972:	52 65 73 65 74 43 6f 64 65 3a 5f 20 20 20 20 20     ResetCode:_     
    1982:	20 20 20 20 00                                          .

00001987 <__c.5771>:
    1987:	53 65 65 64 20 43 6f 64 65 3a 25 73 00              Seed Code:%s.

00001994 <__c.5769>:
    1994:	2d 4d 61 73 74 65 72 20 52 65 73 65 74 2d 00        -Master Reset-.

000019a3 <__c.5767>:
	...

000019a4 <__c.5765>:
    19a4:	32 32 33 34 35 36 37 38 00                          22345678.

000019ad <__c.5763>:
    19ad:	25 73 00                                            %s.

000019b0 <__c.5754>:
    19b0:	5b 2a 5d 45 78 69 74 20 20 20 20 20 20 20 20 20     [*]Exit         
    19c0:	20 20 20 20 00                                          .

000019c5 <__c.5752>:
    19c5:	32 2e 4d 61 73 74 65 72 20 52 65 73 65 74 20 20     2.Master Reset  
    19d5:	20 20 20 20 00                                          .

000019da <__c.5750>:
    19da:	31 2e 52 65 73 74 6f 72 65 20 50 61 73 73 77 6f     1.Restore Passwo
    19ea:	72 64 20 20 00                                      rd  .

000019ef <__c.5748>:
    19ef:	2d 53 79 73 74 65 6d 20 41 64 6d 69 6e 20 4c 65     -System Admin Le
    19ff:	76 65 6c 2d 00                                      vel-.

00001a04 <__c.5689>:
    1a04:	25 73 25 73 00                                      %s%s.

00001a09 <__c.5661>:
    1a09:	25 73 00                                            %s.

00001a0c <__c.5628>:
    1a0c:	25 63 00                                            %c.

00001a0f <__c.5626>:
    1a0f:	32 30 25 73 00                                      20%s.

00001a14 <__c.5604>:
    1a14:	25 73 00                                            %s.

00001a17 <__c.5556>:
    1a17:	34 32 36 34 36 33 36 00                             4264636.

00001a1f <__c.5553>:
    1a1f:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1a2f:	6e 74 65 72 00                                      nter.

00001a34 <__c.5551>:
    1a34:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
    1a44:	6e 74 65 72 00                                      nter.

00001a49 <__c.5547>:
    1a49:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1a59:	6e 74 65 72 00                                      nter.

00001a5e <__c.5545>:
    1a5e:	5f 00                                               _.

00001a60 <__c.5543>:
    1a60:	50 41 53 53 57 4f 52 44 3a 00                       PASSWORD:.

00001a6a <__c.5515>:
    1a6a:	41 63 63 65 73 73 20 44 65 6e 69 65 64 00           Access Denied.

00001a78 <__c.5442>:
    1a78:	54 43 50 2f 49 50 20 45 72 72 6f 72 00              TCP/IP Error.

00001a85 <__c.5440>:
    1a85:	4e 6f 20 52 65 70 6c 79 20 20 20 20 00              No Reply    .

00001a92 <__c.5436>:
    1a92:	20 20 20 20 20 20 20 00                                    .

00001a9a <__c.5433>:
    1a9a:	50 6c 65 61 73 65 20 57 61 69 74 00                 Please Wait.

00001aa6 <__c.5430>:
    1aa6:	25 73 00                                            %s.

00001aa9 <__c.5428>:
    1aa9:	50 55 4d 50 20 54 45 53 54 00                       PUMP TEST.

00001ab3 <__c.5425>:
    1ab3:	25 73 00                                            %s.

00001ab6 <__c.5422>:
    1ab6:	25 73 00                                            %s.

00001ab9 <__c.5420>:
    1ab9:	25 73 00                                            %s.

00001abc <__c.5418>:
    1abc:	25 73 00                                            %s.

00001abf <__c.5414>:
    1abf:	25 73 00                                            %s.

00001ac2 <__c.5410>:
    1ac2:	50 72 6f 73 65 73 00                                Proses.

00001ac9 <__c.5408>:
    1ac9:	2d 4d 4f 50 20 56 6f 75 63 68 65 72 2d 00           -MOP Voucher-.

00001ad7 <__c.5405>:
    1ad7:	50 72 6f 73 65 73 00                                Proses.

00001ade <__c.5403>:
    1ade:	49 44 3a 25 73 00                                   ID:%s.

00001ae4 <__c.5399>:
    1ae4:	5b 2a 5d 42 61 63 6b 20 20 20 20 5b 23 5d 45 78     [*]Back    [#]Ex
    1af4:	69 74 00                                            it.

00001af7 <__c.5397>:
    1af7:	46 49 50 25 73 00                                   FIP%s.

00001afd <__c.5395>:
    1afd:	54 61 70 20 4b 61 72 74 75 20 52 46 49 44 00        Tap Kartu RFID.

00001b0c <__c.5386>:
    1b0c:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1b1c:	6e 74 65 72 00                                      nter.

00001b21 <__c.5384>:
    1b21:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
    1b31:	6e 74 65 72 00                                      nter.

00001b36 <__c.5381>:
    1b36:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1b46:	6e 74 65 72 00                                      nter.

00001b4b <__c.5379>:
    1b4b:	53 75 72 63 68 61 72 67 65 3a 20 20 20 5f 25 00     Surcharge:   _%.

00001b5b <__c.5377>:
    1b5b:	25 73 00                                            %s.

00001b5e <__c.5373>:
    1b5e:	5b 2a 5d 42 61 63 6b 00                             [*]Back.

00001b66 <__c.5368>:
    1b66:	25 64 2e 25 73 00                                   %d.%s.

00001b6c <__c.5366>:
    1b6c:	53 65 6c 65 63 74 20 42 61 6e 6b 00                 Select Bank.

00001b78 <__c.5361>:
    1b78:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1b88:	6e 74 65 72 00                                      nter.

00001b8d <__c.5359>:
    1b8d:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 5b 23 5d 45     [*]Back     [#]E
    1b9d:	6e 74 65 72 00                                      nter.

00001ba2 <__c.5356>:
    1ba2:	5b 2a 5d 43 61 6e 63 65 6c 20 20 20 5b 23 5d 45     [*]Cancel   [#]E
    1bb2:	6e 74 65 72 00                                      nter.

00001bb7 <__c.5354>:
    1bb7:	5f 00                                               _.

00001bb9 <__c.5352>:
    1bb9:	4b 6f 64 65 20 56 6f 75 63 68 65 72 00              Kode Voucher.

00001bc6 <__c.5343>:
    1bc6:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 20 20 20 20     [*]Back         
    1bd6:	20 20 20 20 00                                          .

00001bdb <__c.5341>:
    1bdb:	32 2e 42 61 6e 6b 20 20 20 20 34 2e 50 75 6d 70     2.Bank    4.Pump
    1beb:	54 65 73 74 00                                      Test.

00001bf0 <__c.5339>:
    1bf0:	31 2e 41 63 63 6f 75 6e 74 20 33 2e 56 6f 75 63     1.Account 3.Vouc
    1c00:	68 65 72 20 00                                      her .

00001c05 <__c.5337>:
    1c05:	20 20 20 53 65 6c 65 63 74 20 50 61 79 6d 65 6e        Select Paymen
    1c15:	74 20 20 20 00                                      t   .

00001c1a <__c.5288>:
    1c1a:	43 52 45 44 49 54 43 41 52 44 00                    CREDITCARD.

00001c25 <__c.5282>:
    1c25:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 20 20 20 20     [*]Back         
    1c35:	20 20 20 20 00                                          .

00001c3a <__c.5280>:
    1c3a:	32 2e 43 72 65 64 69 74 20 43 61 72 64 20 20 20     2.Credit Card   
    1c4a:	20 20 20 20 00                                          .

00001c4f <__c.5278>:
    1c4f:	31 2e 44 65 62 69 74 2f 46 6c 61 73 68 20 43 61     1.Debit/Flash Ca
    1c5f:	72 64 20 20 00                                      rd  .

00001c64 <__c.5276>:
    1c64:	53 65 6c 65 63 74 20 43 61 72 64 20 54 79 70 65     Select Card Type
	...

00001c75 <__c.5243>:
    1c75:	4e 6f 20 43 6f 6e 6e 65 63 74 69 6f 6e 00           No Connection.

00001c83 <__c.5241>:
    1c83:	54 43 50 2f 49 50 20 45 52 52 4f 52 20 00           TCP/IP ERROR .

00001c91 <__c.5234>:
    1c91:	50 72 65 73 73 20 41 6e 79 20 4b 65 79 00           Press Any Key.

00001c9f <__c.5232>:
    1c9f:	43 6d 20 56 6f 6c 3a 25 73 00                       Cm Vol:%s.

00001ca9 <__c.5230>:
    1ca9:	43 4d 20 41 6d 74 3a 25 73 00                       CM Amt:%s.

00001cb3 <__c.5228>:
    1cb3:	50 6f 69 6e 74 73 3a 25 73 00                       Points:%s.

00001cbd <__c.5226>:
    1cbd:	25 73 3a 25 73 00                                   %s:%s.

00001cc3 <__c.5219>:
    1cc3:	50 72 6f 73 65 73 00                                Proses.

00001cca <__c.5217>:
    1cca:	49 44 3a 25 73 00                                   ID:%s.

00001cd0 <__c.5213>:
    1cd0:	5b 2a 5d 42 61 63 6b 20 20 20 20 5b 23 5d 45 78     [*]Back    [#]Ex
    1ce0:	69 74 00                                            it.

00001ce3 <__c.5211>:
    1ce3:	54 61 70 20 4b 61 72 74 75 20 52 46 49 44 00        Tap Kartu RFID.

00001cf2 <__c.5208>:
    1cf2:	5b 2a 5d 42 61 63 6b 20 20 20 20 5b 23 5d 45 78     [*]Back    [#]Ex
    1d02:	69 74 00                                            it.

00001d05 <__c.5206>:
    1d05:	54 61 70 20 4b 61 72 74 75 20 52 46 49 44 00        Tap Kartu RFID.

00001d14 <__c.5204>:
    1d14:	46 49 50 3a 25 73 00                                FIP:%s.

00001d1b <__c.5198>:
    1d1b:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 20 20 20 20     [*]Back         
    1d2b:	20 00                                                .

00001d2d <__c.5196>:
    1d2d:	32 2e 4c 6f 79 61 6c 74 79 20 55 70 64 61 74 65     2.Loyalty Update
    1d3d:	20 00                                                .

00001d3f <__c.5194>:
    1d3f:	31 2e 45 6e 71 75 69 72 79 20 20 20 20 20 20 20     1.Enquiry       
    1d4f:	20 00                                                .

00001d51 <__c.5192>:
    1d51:	20 20 4d 65 6e 75 20 4c 6f 79 61 6c 74 79 20 20       Menu Loyalty  
    1d61:	20 00                                                .

00001d63 <__c.5155>:
    1d63:	4e 6f 20 43 6f 6e 6e 65 63 74 69 6f 6e 00           No Connection.

00001d71 <__c.5153>:
    1d71:	54 43 50 2f 49 50 20 45 52 52 4f 52 20 00           TCP/IP ERROR .

00001d7f <__c.5147>:
    1d7f:	5b 2a 5d 42 61 63 6b 20 20 20 20 5b 23 5d 45 78     [*]Back    [#]Ex
    1d8f:	69 74 00                                            it.

00001d92 <__c.5145>:
    1d92:	54 61 70 20 53 75 70 65 72 76 69 73 6f 72 20 43     Tap Supervisor C
    1da2:	61 72 64 00                                         ard.

00001da6 <__c.5143>:
    1da6:	52 65 50 72 69 6e 74 20 46 49 50 3a 25 73 20 00     RePrint FIP:%s .

00001db6 <__c.5139>:
    1db6:	54 69 64 61 6b 20 41 64 61 20 54 72 61 6e 73 61     Tidak Ada Transa
    1dc6:	6b 73 69 20 00                                      ksi .

00001dcb <__c.5130>:
    1dcb:	41 63 63 65 73 73 20 44 65 6e 69 65 64 00           Access Denied.

00001dd9 <__c.5087>:
    1dd9:	25 2e 32 64 00                                      %.2d.

00001dde <__c.5083>:
    1dde:	2a 29 45 78 69 74 00                                *)Exit.

00001de5 <__c.5081>:
    1de5:	23 29 4f 4b 20 00                                   #)OK .

00001deb <__c.5079>:
    1deb:	20 20 20 20 20 00                                        .

00001df1 <__c.5077>:
    1df1:	46 49 50 3a 5f 00                                   FIP:_.

00001df7 <__c.5072>:
    1df7:	25 64 2e 50 25 73 20 7c 20 25 64 2e 50 25 73 00     %d.P%s | %d.P%s.

00001e07 <__c.5023>:
    1e07:	30 32 25 73 25 73 25 73 25 73 25 73 25 73 25 73     02%s%s%s%s%s%s%s
	...

00001e18 <__c.4880>:
    1e18:	30 00                                               0.

00001e1a <__c.4811>:
    1e1a:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    1e2a:	20 20 20 20 00                                          .

00001e2f <__c.4806>:
    1e2f:	23 25 73 00                                         #%s.

00001e33 <__c.4804>:
    1e33:	25 2e 32 64 00                                      %.2d.

00001e38 <__c.4802>:
    1e38:	40 46 49 50 3a 00                                   @FIP:.

00001e3e <__c.4800>:
    1e3e:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    1e4e:	20 20 20 20 00                                          .

00001e53 <__c.4796>:
    1e53:	50 72 69 6e 74 69 6e 67 20 46 49 50 25 73 20 00     Printing FIP%s .

00001e63 <__c.4772>:
    1e63:	44 3a 25 64 20 43 3a 25 63 20 20 00                 D:%d C:%c  .

00001e6f <__c.4761>:
    1e6f:	25 73 20 25 73 00                                   %s %s.

00001e75 <__c.4733>:
    1e75:	4e 6f 20 50 75 6d 70 20 46 6f 75 6e 64 00           No Pump Found.

00001e83 <__c.4731>:
    1e83:	54 43 50 2f 49 50 20 45 72 72 6f 72 00              TCP/IP Error.

00001e90 <__c.4729>:
    1e90:	50 75 6d 70 46 6f 75 6e 64 00                       PumpFound.

00001e9a <__c.4727>:
    1e9a:	43 6f 6e 6e 65 63 74 65 64 20 20 20 20 20 20 20     Connected       
    1eaa:	20 20 20 20 00                                          .

00001eaf <__c.4722>:
    1eaf:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    1ebf:	20 20 20 00                                            .

00001ec3 <__c.4720>:
    1ec3:	25 73 00                                            %s.

00001ec6 <__c.4715>:
    1ec6:	53 63 61 6e 20 50 75 6d 70 00                       Scan Pump.

00001ed0 <__c.4710>:
    1ed0:	43 6f 6e 6e 65 63 74 20 20 20 20 20 20 20 20 20     Connect         
	...

00001ee1 <__c.4708>:
    1ee1:	43 6f 6e 6e 65 63 74 00                             Connect.

00001ee9 <__c.4706>:
    1ee9:	43 6f 6e 6e 65 63 74 20 20 20 20 20 20 20 20 20     Connect         
	...

00001efa <__c.4678>:
    1efa:	43 4f 4d 25 64 3a 25 69 20 20 20 20 20 20 20 20     COM%d:%i        
    1f0a:	20 20 20 00                                            .

00001f0e <__c.4676>:
    1f0e:	49 6e 69 74 69 61 6c 69 7a 65 20 43 4f 4d 20 2e     Initialize COM .
    1f1e:	2e 2e 00                                            ...

00001f21 <__c.4637>:
    1f21:	0a 47 65 4e 69 55 73 20 54 69 63 6b 65 74 20 50     .GeNiUs Ticket P
    1f31:	72 69 6e 74 65 72 20 0a 20 56 65 72 73 69 6f 6e     rinter . Version
    1f41:	3a 25 73 0a 20 4c 61 73 74 20 55 70 64 61 74 65     :%s. Last Update
    1f51:	20 25 73 20 0a 20 48 61 6e 69 6e 64 6f 20 41 75      %s . Hanindo Au
    1f61:	74 6f 6d 61 74 69 6f 6e 20 53 6f 6c 75 74 69 6f     tomation Solutio
    1f71:	6e 73 20 0a 20 77 77 77 2e 68 61 6e 69 6e 64 6f     ns . www.hanindo
    1f81:	67 72 6f 75 70 2e 63 6f 6d 0a 0a 0a 0a 0a 0a 0a     group.com.......
    1f91:	0a 00                                               ..

00001f93 <__c.4635>:
    1f93:	30 39 2f 30 38 2f 32 30 31 31 00                    09/08/2011.

00001f9e <__c.4633>:
    1f9e:	32 2e 34 33 00                                      2.43.

00001fa3 <__c.4539>:
    1fa3:	46 75 65 6c 69 6e 67 20 40 46 49 50 3a 23 25 64     Fueling @FIP:#%d
	...

00001fb4 <__c.4537>:
    1fb4:	54 72 61 6e 73 61 6b 73 69 20 53 65 6c 65 73 61     Transaksi Selesa
    1fc4:	69 00                                               i.

00001fc6 <__c.4533>:
    1fc6:	49 44 3a 20 25 73 00                                ID: %s.

00001fcd <__c.4531>:
    1fcd:	25 73 00                                            %s.

00001fd0 <__c.4529>:
    1fd0:	50 25 73 20 25 73 20 00                             P%s %s .

00001fd8 <__c.4525>:
    1fd8:	46 49 50 20 54 69 64 61 6b 20 53 69 61 70 20 20     FIP Tidak Siap  
    1fe8:	20 20 00                                              .

00001feb <__c.4522>:
    1feb:	41 75 74 68 6f 72 69 73 61 73 69 20 42 65 72 68     Authorisasi Berh
    1ffb:	61 73 69 6c 00                                      asil.

00002000 <__c.4518>:
    2000:	41 75 74 68 6f 72 69 73 61 73 69 20 47 61 67 61     Authorisasi Gaga
    2010:	6c 20 20 20 00                                      l   .

00002015 <__c.4514>:
    2015:	20 20 20 20 20 20 20 00                                    .

0000201d <__c.4511>:
    201d:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    202d:	20 20 20 20 00                                          .

00002032 <__c.4509>:
    2032:	4d 6f 68 6f 6e 20 54 75 6e 67 67 75 20 20 20 20     Mohon Tunggu    
    2042:	20 20 20 20 00                                          .

00002047 <__c.4507>:
    2047:	25 73 00                                            %s.

0000204a <__c.4505>:
    204a:	50 25 73 20 25 73 20 00                             P%s %s .

00002052 <__c.4502>:
    2052:	43 61 6e 63 65 6c 20 54 72 61 6e 73 61 63 74 69     Cancel Transacti
    2062:	6f 6e 20 20 00                                      on  .

00002067 <__c.4499>:
    2067:	5b 2a 5d 42 61 63 6b 20 5b 30 5d 45 53 43 20 5b     [*]Back [0]ESC [
    2077:	23 5d 4f 4b 00                                      #]OK.

0000207c <__c.4497>:
    207c:	25 73 20 00                                         %s .

00002080 <__c.4495>:
    2080:	20 46 75 6c 6c 00                                    Full.

00002086 <__c.4493>:
    2086:	25 73 20 20 25 73 20 00                             %s  %s .

0000208e <__c.4491>:
    208e:	49 44 3a 20 25 73 00                                ID: %s.

00002095 <__c.4489>:
    2095:	25 73 20 00                                         %s .

00002099 <__c.4485>:
    2099:	5b 2a 5d 42 61 63 6b 20 20 5b 23 5d 4f 4b 20 20     [*]Back  [#]OK  
    20a9:	20 00                                                .

000020ab <__c.4483>:
    20ab:	4f 64 6f 6d 65 74 65 72 3a 5f 20 20 20 20 20 20     Odometer:_      
    20bb:	20 00                                                .

000020bd <__c.4481>:
    20bd:	25 73 20 00                                         %s .

000020c1 <__c.4479>:
    20c1:	20 20 25 73 20 25 73 20 00                            %s %s .

000020ca <__c.4477>:
    20ca:	50 75 6d 70 20 50 72 6f 64 75 63 74 20 41 6d 6f     Pump Product Amo
    20da:	75 6e 74 00                                         unt.

000020de <__c.4475>:
    20de:	50 75 6d 70 20 50 72 6f 64 75 63 74 20 56 6f 6c     Pump Product Vol
    20ee:	75 6d 65 00                                         ume.

000020f2 <__c.4473>:
    20f2:	20 20 54 61 6e 6b 00                                  Tank.

000020f9 <__c.4471>:
    20f9:	20 20 25 73 20 25 73 20 00                            %s %s .

00002102 <__c.4469>:
    2102:	50 75 6d 70 20 50 72 6f 64 75 63 74 20 20 20 46     Pump Product   F
    2112:	75 6c 6c 00                                         ull.

00002116 <__c.4465>:
    2116:	5b 2a 5d 42 61 63 6b 20 20 5b 23 5d 4f 4b 20 20     [*]Back  [#]OK  
    2126:	20 20 20 20 00                                          .

0000212b <__c.4463>:
    212b:	5b 32 5d 41 6d 6f 75 6e 74 3a 5f 20 20 20 20 20     [2]Amount:_     
    213b:	20 20 20 20 00                                          .

00002140 <__c.4461>:
    2140:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    2150:	20 20 20 20 00                                          .

00002155 <__c.4459>:
    2155:	50 25 73 2d 25 73 20 00                             P%s-%s .

0000215d <__c.4457>:
    215d:	5b 2a 5d 42 61 63 6b 20 20 5b 23 5d 4f 4b 20 20     [*]Back  [#]OK  
    216d:	20 20 20 20 00                                          .

00002172 <__c.4455>:
    2172:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    2182:	20 20 20 20 00                                          .

00002187 <__c.4453>:
    2187:	5b 31 5d 56 6f 6c 75 6d 65 3a 5f 20 20 20 20 20     [1]Volume:_     
    2197:	20 20 20 20 00                                          .

0000219c <__c.4451>:
    219c:	50 25 73 2d 25 73 20 00                             P%s-%s .

000021a4 <__c.4448>:
    21a4:	41 00                                               A.

000021a6 <__c.4446>:
    21a6:	41 00                                               A.

000021a8 <__c.4444>:
    21a8:	56 00                                               V.

000021aa <__c.4441>:
    21aa:	5b 2a 5d 42 61 63 6b 20 20 20 20 5b 23 5d 4e 65     [*]Back    [#]Ne
    21ba:	78 74 20 20 00                                      xt  .

000021bf <__c.4439>:
    21bf:	5b 32 5d 41 6d 6f 75 6e 74 20 20 20 20 20 20 20     [2]Amount       
    21cf:	20 20 20 20 00                                          .

000021d4 <__c.4437>:
    21d4:	5b 31 5d 56 6f 6c 75 6d 65 20 20 20 20 20 20 20     [1]Volume       
    21e4:	20 20 20 20 00                                          .

000021e9 <__c.4435>:
    21e9:	50 25 73 2d 25 73 20 00                             P%s-%s .

000021f1 <__c.4432>:
    21f1:	25 73 00                                            %s.

000021f4 <__c.4429>:
    21f4:	5b 2a 5d 42 61 63 6b 20 20 20 20 20 20 20 20 20     [*]Back         
    2204:	20 20 20 20 00                                          .

00002209 <__c.4424>:
    2209:	20 20 20 20 20 00                                        .

0000220f <__c.4422>:
    220f:	25 64 2e 25 73 00                                   %d.%s.

00002215 <__c.4420>:
    2215:	25 73 00                                            %s.

00002218 <__c.4418>:
    2218:	50 6f 6d 70 61 2d 25 73 00                          Pompa-%s.

00002221 <__c.4414>:
    2221:	25 2e 32 64 00                                      %.2d.

00002226 <__c.4412>:
    2226:	25 2e 32 64 00                                      %.2d.

0000222b <__c.4408>:
    222b:	5b 2a 5d 42 61 74 61 6c 20 20 20 20 20 20 20 5b     [*]Batal       [
    223b:	23 5d 4f 4b 00                                      #]OK.

00002240 <__c.4406>:
    2240:	25 73 20 25 73 00                                   %s %s.

00002246 <__c.4404>:
    2246:	25 73 00                                            %s.

00002249 <__c.4402>:
    2249:	25 73 00                                            %s.

0000224c <__c.4400>:
    224c:	25 73 00                                            %s.

0000224f <__c.4397>:
    224f:	4b 61 72 74 75 20 54 65 72 62 61 74 61 73 20 20     Kartu Terbatas  
    225f:	20 20 20 20 00                                          .

00002264 <__c.4395>:
    2264:	54 69 64 61 6b 20 54 65 72 64 61 66 74 61 72 20     Tidak Terdaftar 
    2274:	20 20 20 20 00                                          .

00002279 <__c.4392>:
    2279:	44 61 74 61 20 52 65 63 65 69 76 65 64 20 20 20     Data Received   
    2289:	20 20 20 20 00                                          .

0000228e <__c.4389>:
    228e:	54 43 50 2f 49 50 20 45 72 72 6f 72 20 20 20 20     TCP/IP Error    
    229e:	20 20 20 20 00                                          .

000022a3 <__c.4387>:
    22a3:	53 65 6e 64 69 6e 67 20 46 61 69 6c 65 64 20 20     Sending Failed  
    22b3:	20 20 20 20 00                                          .

000022b8 <__c.4384>:
    22b8:	20 20 20 20 20 20 20 00                                    .

000022c0 <__c.4379>:
    22c0:	50 72 6f 73 65 73 00                                Proses.

000022c7 <__c.4377>:
    22c7:	49 44 3a 25 73 00                                   ID:%s.

000022cd <__c.4375>:
    22cd:	20 20 20 4c 6f 63 61 6c 20 41 63 63 6f 75 6e 74        Local Account
    22dd:	20 20 20 00                                            .

000022e1 <__c.4211>:
    22e1:	25 2e 32 64 00                                      %.2d.

000022e6 <__c.4163>:
    22e6:	46 39 36 38 43 46 46 42 00                          F968CFFB.

000022ef <__c.4161>:
    22ef:	25 73 00                                            %s.

000022f2 <__c.4158>:
    22f2:	25 73 25 73 25 73 00                                %s%s%s.

000022f9 <__c.4156>:
    22f9:	25 73 25 73 25 73 25 73 00                          %s%s%s%s.

00002302 <__c.4153>:
    2302:	25 73 25 73 00                                      %s%s.

00002307 <__c.4150>:
    2307:	25 73 00                                            %s.

0000230a <__c.4148>:
    230a:	46 30 30 30 30 30 30 30 45 31 32 33 34 35 36 46     F0000000E123456F
    231a:	46 46 46 46 00                                      FFFF.

0000231f <__c.4146>:
    231f:	25 73 25 73 25 64 00                                %s%s%d.

00002326 <__c.4144>:
    2326:	25 73 25 73 25 64 00                                %s%s%d.

0000232d <__c.4141>:
    232d:	25 73 00                                            %s.

00002330 <__c.4138>:
    2330:	25 73 25 73 00                                      %s%s.

00002335 <__c.4136>:
    2335:	25 73 25 73 00                                      %s%s.

0000233a <__c.4134>:
    233a:	25 73 25 73 00                                      %s%s.

0000233f <__c.4131>:
    233f:	25 73 25 73 00                                      %s%s.

00002344 <__c.4128>:
    2344:	25 73 25 73 00                                      %s%s.

00002349 <__c.4125>:
    2349:	25 73 00                                            %s.

0000234c <__c.4120>:
    234c:	25 73 31 00                                         %s1.

00002350 <__c.4117>:
    2350:	25 2e 32 58 00                                      %.2X.

00002355 <__c.4115>:
    2355:	25 2e 33 64 2e 25 2e 33 64 2e 25 2e 33 64 2e 25     %.3d.%.3d.%.3d.%
    2365:	2e 33 64 00                                         .3d.

00002369 <__c.4113>:
    2369:	25 2e 33 64 2e 25 2e 33 64 2e 25 2e 33 64 2e 25     %.3d.%.3d.%.3d.%
    2379:	2e 33 64 00                                         .3d.

0000237d <__c.4111>:
    237d:	25 2e 32 64 00                                      %.2d.

00002382 <__c.4109>:
    2382:	25 2e 32 64 00                                      %.2d.

00002387 <__c.4021>:
    2387:	25 73 20 25 73 00                                   %s %s.

0000238d <__c.4019>:
    238d:	32 2e 34 33 00                                      2.43.

00002392 <__c.4017>:
    2392:	47 65 4e 69 55 73 00                                GeNiUs.

00002399 <__c.4003>:
    2399:	50 72 65 73 73 20 61 6e 79 20 6b 65 79 2e 2e 20     Press any key.. 
    23a9:	20 20 20 20 00                                          .

000023ae <__c.3991>:
    23ae:	5b 31 5d 53 6c 61 76 65 20 5b 32 5d 53 74 61 6e     [1]Slave [2]Stan
    23be:	64 61 6c 6f 6e 65 00                                dalone.

000023c5 <__c.3911>:
    23c5:	3e 00                                               >.

000023c7 <__c.3906>:
    23c7:	25 2e 32 64 00                                      %.2d.

000023cc <__c.3904>:
    23cc:	25 2e 32 64 00                                      %.2d.

000023d1 <__c.3902>:
    23d1:	30 00                                               0.

000023d3 <__c.3900>:
    23d3:	31 00                                               1.

000023d5 <__c.3892>:
    23d5:	25 64 00                                            %d.

000023d8 <__c.3887>:
    23d8:	25 2e 32 64 00                                      %.2d.

000023dd <__c.3882>:
    23dd:	25 73 00                                            %s.

000023e0 <__c.3877>:
    23e0:	25 73 00                                            %s.

000023e3 <__c.3872>:
    23e3:	25 73 00                                            %s.

000023e6 <__c.3870>:
    23e6:	3c 00                                               <.

000023e8 <__c.3802>:
    23e8:	3c 4f 4b 3e 00                                      <OK>.

000023ed <__c.3797>:
    23ed:	25 64 00                                            %d.

000023f0 <__c.3795>:
    23f0:	25 64 00                                            %d.

000023f3 <__c.3784>:
    23f3:	25 64 00                                            %d.

000023f6 <__c.3773>:
    23f6:	3c 53 61 76 69 6e 67 3e 00                          <Saving>.

000023ff <__c.3771>:
    23ff:	4c 65 6e 67 74 68 3a 25 64 00                       Length:%d.

00002409 <__c.3587>:
    2409:	25 73 00                                            %s.

0000240c <__c.3523>:
    240c:	31 30 00                                            10.

0000240f <__c.3521>:
    240f:	25 73 00                                            %s.

00002412 <__c.3519>:
    2412:	25 73 00                                            %s.

00002415 <__c.3517>:
    2415:	25 73 00                                            %s.

00002418 <__c.3515>:
    2418:	25 73 00                                            %s.

0000241b <__c.3513>:
    241b:	25 73 00                                            %s.

0000241e <__c.3511>:
    241e:	25 2e 32 64 00                                      %.2d.

00002423 <__c.3509>:
    2423:	25 64 00                                            %d.

00002426 <__c.3507>:
    2426:	25 73 00                                            %s.

00002429 <__c.3505>:
    2429:	25 73 00                                            %s.

0000242c <__c.3503>:
    242c:	25 73 00                                            %s.

0000242f <__c.3501>:
    242f:	25 64 00                                            %d.

00002432 <__c.3499>:
    2432:	4e 2f 41 00                                         N/A.

00002436 <__c.3396>:
    2436:	25 64 00                                            %d.

00002439 <__c.3394>:
    2439:	25 73 00                                            %s.

0000243c <__c.3392>:
    243c:	25 73 00                                            %s.

0000243f <__c.3309>:
    243f:	54 69 64 61 6b 20 41 64 61 20 54 72 61 6e 73 61     Tidak Ada Transa
    244f:	6b 73 69 20 00                                      ksi .

00002454 <__c.3306>:
    2454:	54 6f 74 61 6c 69 7a 65 72 41 6c 6c 20 20 20 20     TotalizerAll    
    2464:	20 00                                                .

00002466 <__c.3303>:
    2466:	43 6c 65 61 72 20 44 61 74 61 20 54 6f 74 61 6c     Clear Data Total
    2476:	69 7a 65 72 00                                      izer.

0000247b <__c.3291>:
    247b:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
	...

0000248c <__c.3288>:
    248c:	52 65 61 64 79 2e 2e 2e 20 20 20 20 20 20 20 20     Ready...        
    249c:	20 20 20 20 00                                          .

000024a1 <__c.3285>:
    24a1:	52 65 61 64 79 2e 2e 2e 20 20 20 20 20 20 20 20     Ready...        
    24b1:	20 20 20 20 00                                          .

000024b6 <__c.3283>:
    24b6:	4e 6f 20 52 65 73 70 6f 6e 73 65 2e 2e 20 20 20     No Response..   
    24c6:	20 20 20 20 00                                          .

000024cb <__c.3280>:
    24cb:	50 6c 65 61 73 65 20 57 61 69 74 2e 2e 20 20 20     Please Wait..   
    24db:	20 20 20 20 00                                          .

000024e0 <__c.3277>:
    24e0:	52 65 61 64 79 2e 2e 2e 20 20 20 20 20 20 20 20     Ready...        
    24f0:	20 20 20 20 00                                          .

000024f5 <__c.3274>:
    24f5:	54 69 64 61 6b 20 41 64 61 20 54 72 61 6e 73 61     Tidak Ada Transa
    2505:	6b 73 69 20 00                                      ksi .

0000250a <__c.3269>:
    250a:	53 65 64 61 6e 67 50 72 6f 73 65 73 00              SedangProses.

00002517 <__c.3266>:
    2517:	34 33 35 36 41 33 31 41 00                          4356A31A.

00002520 <__c.1762>:
    2520:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    2530:	20 20 20 20 00                                          .

00002535 <__c.1760>:
    2535:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    2545:	20 20 20 20 00                                          .

0000254a <__c.1758>:
    254a:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    255a:	20 20 20 20 00                                          .

0000255f <__c.1756>:
    255f:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    256f:	20 20 20 20 00                                          .

00002574 <__alphanum>:
    2574:	30 20 2e 00 00 00 31 2e 2c 3f 21 00 32 61 62 63     0 ....1.,?!.2abc
    2584:	00 00 33 64 65 66 00 00 34 67 68 69 00 00 35 6a     ..3def..4ghi..5j
    2594:	6b 6c 00 00 36 6d 6e 6f 00 00 37 70 71 72 73 00     kl..6mno..7pqrs.
    25a4:	38 74 75 76 00 00 39 77 78 79 7a 00 30 20 2e 00     8tuv..9wxyz.0 ..
    25b4:	00 00 31 26 40 2b 2d 00 32 41 42 43 00 00 33 44     ..1&@+-.2ABC..3D
    25c4:	45 46 00 00 34 47 48 49 00 00 35 4a 4b 4c 00 00     EF..4GHI..5JKL..
    25d4:	36 4d 4e 4f 00 00 37 50 51 52 53 00 38 54 55 56     6MNO..7PQRS.8TUV
    25e4:	00 00 39 57 58 59 5a 00                             ..9WXYZ.

000025ec <__maxchar>:
    25ec:	02 04 03 03 03 03 03 04 03 04                       ..........

000025f6 <__ctors_end>:
    25f6:	11 24       	eor	r1, r1
    25f8:	1f be       	out	0x3f, r1	; 63
    25fa:	cf ef       	ldi	r28, 0xFF	; 255
    25fc:	d0 e1       	ldi	r29, 0x10	; 16
    25fe:	de bf       	out	0x3e, r29	; 62
    2600:	cd bf       	out	0x3d, r28	; 61

00002602 <__do_copy_data>:
    2602:	11 e0       	ldi	r17, 0x01	; 1
    2604:	a0 e0       	ldi	r26, 0x00	; 0
    2606:	b1 e0       	ldi	r27, 0x01	; 1
    2608:	e8 ed       	ldi	r30, 0xD8	; 216
    260a:	fb e5       	ldi	r31, 0x5B	; 91
    260c:	01 e0       	ldi	r16, 0x01	; 1
    260e:	0b bf       	out	0x3b, r16	; 59
    2610:	02 c0       	rjmp	.+4      	; 0x2616 <__do_copy_data+0x14>
    2612:	07 90       	elpm	r0, Z+
    2614:	0d 92       	st	X+, r0
    2616:	ac 35       	cpi	r26, 0x5C	; 92
    2618:	b1 07       	cpc	r27, r17
    261a:	d9 f7       	brne	.-10     	; 0x2612 <__do_copy_data+0x10>

0000261c <__do_clear_bss>:
    261c:	1d e0       	ldi	r17, 0x0D	; 13
    261e:	ac e5       	ldi	r26, 0x5C	; 92
    2620:	b1 e0       	ldi	r27, 0x01	; 1
    2622:	01 c0       	rjmp	.+2      	; 0x2626 <.do_clear_bss_start>

00002624 <.do_clear_bss_loop>:
    2624:	1d 92       	st	X+, r1

00002626 <.do_clear_bss_start>:
    2626:	a5 33       	cpi	r26, 0x35	; 53
    2628:	b1 07       	cpc	r27, r17
    262a:	e1 f7       	brne	.-8      	; 0x2624 <.do_clear_bss_loop>
    262c:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <main>
    2630:	0c 94 ea ad 	jmp	0x15bd4	; 0x15bd4 <_exit>

00002634 <__bad_interrupt>:
    2634:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00002638 <systemOnReset>:


void systemOnReset(){
     char SubMenu,KeyPressed,KeyChar,IsMasterReset=False;

     IsPowerOn=False;
    2638:	10 92 ba 02 	sts	0x02BA, r1
     if (MCUCSR & 1){   // Power-on Reset
    263c:	04 b6       	in	r0, 0x34	; 52
    263e:	00 fe       	sbrs	r0, 0
    2640:	30 c0       	rjmp	.+96     	; 0x26a2 <systemOnReset+0x6a>
         MCUCSR=0;lcd_printf(1,1,PSTR("PowerOn"));//Wiznet Blm Ready
    2642:	14 be       	out	0x34, r1	; 52
    2644:	81 e0       	ldi	r24, 0x01	; 1
    2646:	61 e0       	ldi	r22, 0x01	; 1
    2648:	46 ea       	ldi	r20, 0xA6	; 166
    264a:	52 e0       	ldi	r21, 0x02	; 2
    264c:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		 IsPowerOn=True;
    2650:	81 e0       	ldi	r24, 0x01	; 1
    2652:	80 93 ba 02 	sts	0x02BA, r24
         //Master Reset Detection
		 PORTF = 0xFF; DDRF = 0xF0;
    2656:	8f ef       	ldi	r24, 0xFF	; 255
    2658:	80 93 62 00 	sts	0x0062, r24
    265c:	80 ef       	ldi	r24, 0xF0	; 240
    265e:	80 93 61 00 	sts	0x0061, r24
		 KeyPressed=_key_scan(1);
    2662:	81 e0       	ldi	r24, 0x01	; 1
    2664:	0e 94 58 a6 	call	0x14cb0	; 0x14cb0 <_key_scan>
		 KeyChar= _key_btn(KeyPressed);
    2668:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <_key_btn>
		 if (KeyChar=='5'){
    266c:	85 33       	cpi	r24, 0x35	; 53
    266e:	89 f5       	brne	.+98     	; 0x26d2 <systemOnReset+0x9a>
		     system_beep(2);
    2670:	82 e0       	ldi	r24, 0x02	; 2
    2672:	90 e0       	ldi	r25, 0x00	; 0
    2674:	0e 94 03 16 	call	0x2c06	; 0x2c06 <system_beep>
		     IsMasterReset=True;
			 TCCR1B |= (1 << WGM12);
    2678:	8e b5       	in	r24, 0x2e	; 46
    267a:	88 60       	ori	r24, 0x08	; 8
    267c:	8e bd       	out	0x2e, r24	; 46
			 TIMSK |= (1 << OCIE1A);
    267e:	87 b7       	in	r24, 0x37	; 55
    2680:	80 61       	ori	r24, 0x10	; 16
    2682:	87 bf       	out	0x37, r24	; 55
			 sei();          //1/14745600=0,06781684028uS *1400 = 100uS 65535-1400+1=64136
    2684:	78 94       	sei
			 OCR1A   = 15624;//49911 -->0,33847384982639 ms
    2686:	88 e0       	ldi	r24, 0x08	; 8
    2688:	9d e3       	ldi	r25, 0x3D	; 61
    268a:	9b bd       	out	0x2b, r25	; 43
    268c:	8a bd       	out	0x2a, r24	; 42
			 TCCR1B |= ((1 << CS10) | (1 << CS11));
    268e:	8e b5       	in	r24, 0x2e	; 46
    2690:	83 60       	ori	r24, 0x03	; 3
    2692:	8e bd       	out	0x2e, r24	; 46
		     while(IsMasterReset==True){
			       SubMenu=FMenuMaster();
    2694:	0e 94 81 73 	call	0xe702	; 0xe702 <FMenuMaster>
				   if (SubMenu==MENU_DONE){
    2698:	81 30       	cpi	r24, 0x01	; 1
    269a:	e1 f7       	brne	.-8      	; 0x2694 <systemOnReset+0x5c>
				       IsMasterReset=False;
					   lcd_clear();
    269c:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
    26a0:	18 c0       	rjmp	.+48     	; 0x26d2 <systemOnReset+0x9a>
				   }
			 }		 
		 }
         }
     else 
     if (MCUCSR & 2){   // External Reset
    26a2:	04 b6       	in	r0, 0x34	; 52
    26a4:	01 fe       	sbrs	r0, 1
    26a6:	06 c0       	rjmp	.+12     	; 0x26b4 <systemOnReset+0x7c>
         MCUCSR=0;lcd_printf(1,1,PSTR("External"));
    26a8:	14 be       	out	0x34, r1	; 52
    26aa:	81 e0       	ldi	r24, 0x01	; 1
    26ac:	61 e0       	ldi	r22, 0x01	; 1
    26ae:	4d e9       	ldi	r20, 0x9D	; 157
    26b0:	52 e0       	ldi	r21, 0x02	; 2
    26b2:	0d c0       	rjmp	.+26     	; 0x26ce <systemOnReset+0x96>
        }
     else 
     if (MCUCSR & 4){   // Brown-Out Reset
    26b4:	04 b6       	in	r0, 0x34	; 52
    26b6:	02 fe       	sbrs	r0, 2
    26b8:	06 c0       	rjmp	.+12     	; 0x26c6 <systemOnReset+0x8e>
         MCUCSR=0;lcd_printf(1,1,PSTR("BrownOut"));
    26ba:	14 be       	out	0x34, r1	; 52
    26bc:	81 e0       	ldi	r24, 0x01	; 1
    26be:	61 e0       	ldi	r22, 0x01	; 1
    26c0:	44 e9       	ldi	r20, 0x94	; 148
    26c2:	52 e0       	ldi	r21, 0x02	; 2
    26c4:	04 c0       	rjmp	.+8      	; 0x26ce <systemOnReset+0x96>
         }
     else		  // Watchdog Reset
        {
         lcd_printf(1,1,PSTR("WatchDog"));
    26c6:	81 e0       	ldi	r24, 0x01	; 1
    26c8:	61 e0       	ldi	r22, 0x01	; 1
    26ca:	4b e8       	ldi	r20, 0x8B	; 139
    26cc:	52 e0       	ldi	r21, 0x02	; 2
    26ce:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
        };
     MCUCSR=0;		  
    26d2:	14 be       	out	0x34, r1	; 52
    26d4:	80 ee       	ldi	r24, 0xE0	; 224
    26d6:	9e e2       	ldi	r25, 0x2E	; 46
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    26d8:	20 e7       	ldi	r18, 0x70	; 112
    26da:	31 e0       	ldi	r19, 0x01	; 1
    26dc:	f9 01       	movw	r30, r18
    26de:	31 97       	sbiw	r30, 0x01	; 1
    26e0:	f1 f7       	brne	.-4      	; 0x26de <systemOnReset+0xa6>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26e2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26e4:	d9 f7       	brne	.-10     	; 0x26dc <systemOnReset+0xa4>
	 _delay_ms(1200);
}
    26e6:	08 95       	ret

000026e8 <SystemInit>:


void SystemInit(){
	unsigned int __delay =300;
	lcd_init();
    26e8:	0e 94 34 a4 	call	0x14868	; 0x14868 <lcd_init>
	lcd_clear();
    26ec:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
	BackLightTrig();
    26f0:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <BackLightTrig>
	systemOnReset();
    26f4:	0e 94 1c 13 	call	0x2638	; 0x2638 <systemOnReset>

	lcd_printf(4, 1, PSTR("Initialize... "));
    26f8:	84 e0       	ldi	r24, 0x04	; 4
    26fa:	61 e0       	ldi	r22, 0x01	; 1
    26fc:	4c e7       	ldi	r20, 0x7C	; 124
    26fe:	52 e0       	ldi	r21, 0x02	; 2
    2700:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
    2704:	88 eb       	ldi	r24, 0xB8	; 184
    2706:	9b e0       	ldi	r25, 0x0B	; 11
    2708:	20 e7       	ldi	r18, 0x70	; 112
    270a:	31 e0       	ldi	r19, 0x01	; 1
    270c:	f9 01       	movw	r30, r18
    270e:	31 97       	sbiw	r30, 0x01	; 1
    2710:	f1 f7       	brne	.-4      	; 0x270e <SystemInit+0x26>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2712:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2714:	d9 f7       	brne	.-10     	; 0x270c <SystemInit+0x24>
	_delay_ms(__delay);
	PORTA = 0XFF;		// Buffer for PORTA
    2716:	9f ef       	ldi	r25, 0xFF	; 255
    2718:	9b bb       	out	0x1b, r25	; 27
	DDRA = 0xFF;		// Pin 3 out (SS _SPI_SLAVE)
    271a:	9a bb       	out	0x1a, r25	; 26
	sbi(PORTA, 3);		// Disable SS _SPI_SLAVE
    271c:	db 9a       	sbi	0x1b, 3	; 27

	//Buzzer PORTB.5
	PORTB = 0xFF;DDRB = 0xFF;
    271e:	98 bb       	out	0x18, r25	; 24
    2720:	97 bb       	out	0x17, r25	; 23
	PORTD = 0b00001101;
    2722:	8d e0       	ldi	r24, 0x0D	; 13
    2724:	82 bb       	out	0x12, r24	; 18
    DDRD =  0b00001001;
    2726:	89 e0       	ldi	r24, 0x09	; 9
    2728:	81 bb       	out	0x11, r24	; 17

	TWBR = 0xFF;
    272a:	90 93 70 00 	sts	0x0070, r25
    //MMC
	PORTE = 0x0E;		// Buffer for PORTE
    272e:	8e e0       	ldi	r24, 0x0E	; 14
    2730:	83 b9       	out	0x03, r24	; 3
	DDRE = 0x0E;		// Pin 3 out (SS _SPI_MMC), pin 2 out (HB)
    2732:	82 b9       	out	0x02, r24	; 2
	sbi(PORTE, 3);		// Disable SS _SPI_MMC
    2734:	1b 9a       	sbi	0x03, 3	; 3
	cbi(PORTE, 2);		// HB on
    2736:	1a 98       	cbi	0x03, 2	; 3

	//Keypad
	PORTF = 0xFF;		// Buffer for PORTF
    2738:	90 93 62 00 	sts	0x0062, r25
	DDRF = 0xF0;		// 4 bit row, 4 bit column
    273c:	80 ef       	ldi	r24, 0xF0	; 240
    273e:	80 93 61 00 	sts	0x0061, r24

  	_spi_init(0,1);//Slave
    2742:	80 e0       	ldi	r24, 0x00	; 0
    2744:	61 e0       	ldi	r22, 0x01	; 1
    2746:	0e 94 c8 a6 	call	0x14d90	; 0x14d90 <_spi_init>
	sbi(DDRB,3);sbi(PORTB,3);//MISO Output
    274a:	bb 9a       	sbi	0x17, 3	; 23
    274c:	c3 9a       	sbi	0x18, 3	; 24
	cbi(DDRB,2);sbi(PORTB,2);//MOSI Input
    274e:	ba 98       	cbi	0x17, 2	; 23
    2750:	c2 9a       	sbi	0x18, 2	; 24
	cbi(DDRB,1);sbi(PORTB,1);//SCK  Input
    2752:	b9 98       	cbi	0x17, 1	; 23
    2754:	c1 9a       	sbi	0x18, 1	; 24

	TCCR1B |= (1 << WGM12);
    2756:	8e b5       	in	r24, 0x2e	; 46
    2758:	88 60       	ori	r24, 0x08	; 8
    275a:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1 << OCIE1A);
    275c:	87 b7       	in	r24, 0x37	; 55
    275e:	80 61       	ori	r24, 0x10	; 16
    2760:	87 bf       	out	0x37, r24	; 55
	sei();          //1/14745600=0,06781684028uS *1400 = 100uS 65535-1400+1=64136
    2762:	78 94       	sei
	OCR1A   = 15624;//49911 -->0,33847384982639 ms
    2764:	88 e0       	ldi	r24, 0x08	; 8
    2766:	9d e3       	ldi	r25, 0x3D	; 61
    2768:	9b bd       	out	0x2b, r25	; 43
    276a:	8a bd       	out	0x2a, r24	; 42
	TCCR1B |= ((1 << CS10) | (1 << CS11));
    276c:	8e b5       	in	r24, 0x2e	; 46
    276e:	83 60       	ori	r24, 0x03	; 3
    2770:	8e bd       	out	0x2e, r24	; 46

	SendSlaveCommand(SC_SLAVE,ST_NONE);
    2772:	81 e0       	ldi	r24, 0x01	; 1
    2774:	60 e0       	ldi	r22, 0x00	; 0
    2776:	0e 94 0a 60 	call	0xc014	; 0xc014 <SendSlaveCommand>
	
	InitComport();
    277a:	0e 94 a9 79 	call	0xf352	; 0xf352 <InitComport>
	_LIGHT_SET;
    277e:	81 e0       	ldi	r24, 0x01	; 1
    2780:	80 93 ae 02 	sts	0x02AE, r24
    2784:	10 92 af 02 	sts	0x02AF, r1
    2788:	80 91 65 00 	lds	r24, 0x0065
    278c:	8d 7f       	andi	r24, 0xFD	; 253
    278e:	80 93 65 00 	sts	0x0065, r24
	InitPrinter();
    2792:	0e 94 a2 45 	call	0x8b44	; 0x8b44 <InitPrinter>
    InitializeConnection();
    2796:	0e 94 46 91 	call	0x1228c	; 0x1228c <InitializeConnection>
	lcd_clear();
    279a:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
}
    279e:	08 95       	ret

000027a0 <main>:

//Master4 =1+20++2+1
void SystemInit();
//Program Utama
int main(){
	SystemInit();
    27a0:	0e 94 74 13 	call	0x26e8	; 0x26e8 <SystemInit>
	while(1){
	//FTestChar();
	//TestUserInput();
    FMenuIdle();
    27a4:	0e 94 fd a1 	call	0x143fa	; 0x143fa <FMenuIdle>
    27a8:	fd cf       	rjmp	.-6      	; 0x27a4 <main+0x4>

000027aa <__vector_12>:
	  strDispenserName3,
	  strDispenserName4,
	  strDispenserName5,
};

ISR(TIMER1_COMPA_vect){//Timer Overflow 1ms
    27aa:	1f 92       	push	r1
    27ac:	0f 92       	push	r0
    27ae:	0f b6       	in	r0, 0x3f	; 63
    27b0:	0f 92       	push	r0
    27b2:	11 24       	eor	r1, r1
    27b4:	2f 93       	push	r18
    27b6:	6f 93       	push	r22
    27b8:	7f 93       	push	r23
    27ba:	8f 93       	push	r24
    27bc:	9f 93       	push	r25
	if(__key_light == 1){
    27be:	80 91 ae 02 	lds	r24, 0x02AE
    27c2:	81 30       	cpi	r24, 0x01	; 1
    27c4:	81 f4       	brne	.+32     	; 0x27e6 <__vector_12+0x3c>
		__key_lgtcnt++;
    27c6:	80 91 af 02 	lds	r24, 0x02AF
    27ca:	8f 5f       	subi	r24, 0xFF	; 255
    27cc:	80 93 af 02 	sts	0x02AF, r24
		if(__key_lgtcnt == 150){
    27d0:	86 39       	cpi	r24, 0x96	; 150
    27d2:	49 f4       	brne	.+18     	; 0x27e6 <__vector_12+0x3c>
		   __key_light = 0; 
    27d4:	10 92 ae 02 	sts	0x02AE, r1
		   __key_lgtcnt = 0; 
    27d8:	10 92 af 02 	sts	0x02AF, r1
		   sbi(PORTG, 1);
    27dc:	80 91 65 00 	lds	r24, 0x0065
    27e0:	82 60       	ori	r24, 0x02	; 2
    27e2:	80 93 65 00 	sts	0x0065, r24
		   }
	}

	//Beep
	if (TimBeep>0){
    27e6:	80 91 bc 01 	lds	r24, 0x01BC
    27ea:	88 23       	and	r24, r24
    27ec:	31 f0       	breq	.+12     	; 0x27fa <__vector_12+0x50>
	    TimBeep--;
    27ee:	81 50       	subi	r24, 0x01	; 1
    27f0:	80 93 bc 01 	sts	0x01BC, r24
		DDRB=(DDRB|0b00100000);
    27f4:	bd 9a       	sbi	0x17, 5	; 23
	    PORTB=(PORTB&0b11011111);
    27f6:	c5 98       	cbi	0x18, 5	; 24
    27f8:	05 c0       	rjmp	.+10     	; 0x2804 <__vector_12+0x5a>
	    }
	else{PORTB=(PORTB|~PORTB);
    27fa:	98 b3       	in	r25, 0x18	; 24
    27fc:	88 b3       	in	r24, 0x18	; 24
    27fe:	80 95       	com	r24
    2800:	89 2b       	or	r24, r25
    2802:	88 bb       	out	0x18, r24	; 24
		}
    //LocalAccount
	TimLocAcc++;
    2804:	80 91 ba 01 	lds	r24, 0x01BA
    2808:	8f 5f       	subi	r24, 0xFF	; 255
    280a:	80 93 ba 01 	sts	0x01BA, r24
	//DisplaTicker
    TimTicker++;
    280e:	80 91 90 01 	lds	r24, 0x0190
    2812:	8f 5f       	subi	r24, 0xFF	; 255
    2814:	80 93 90 01 	sts	0x0190, r24
	TimPressed++;
    2818:	20 91 91 01 	lds	r18, 0x0191
    281c:	2f 5f       	subi	r18, 0xFF	; 255
    281e:	20 93 91 01 	sts	0x0191, r18
	if ((TimPressed%5)==0){
    2822:	82 2f       	mov	r24, r18
    2824:	65 e0       	ldi	r22, 0x05	; 5
    2826:	0e 94 4c aa 	call	0x15498	; 0x15498 <__udivmodqi4>
    282a:	99 23       	and	r25, r25
    282c:	71 f4       	brne	.+28     	; 0x284a <__vector_12+0xa0>
	    PORTE = PORTE^0x04;
    282e:	83 b1       	in	r24, 0x03	; 3
    2830:	94 e0       	ldi	r25, 0x04	; 4
    2832:	89 27       	eor	r24, r25
    2834:	83 b9       	out	0x03, r24	; 3
	    TimDisplay++;
    2836:	80 91 92 01 	lds	r24, 0x0192
    283a:	8f 5f       	subi	r24, 0xFF	; 255
    283c:	80 93 92 01 	sts	0x0192, r24
		TimPrintBusy++;
    2840:	80 91 b6 01 	lds	r24, 0x01B6
    2844:	8f 5f       	subi	r24, 0xFF	; 255
    2846:	80 93 b6 01 	sts	0x01B6, r24
	}
	if ((TimPressed%PRESSED_DELAY)==0){
    284a:	82 2f       	mov	r24, r18
    284c:	6a e0       	ldi	r22, 0x0A	; 10
    284e:	0e 94 4c aa 	call	0x15498	; 0x15498 <__udivmodqi4>
    2852:	99 23       	and	r25, r25
    2854:	29 f4       	brne	.+10     	; 0x2860 <__vector_12+0xb6>
	     ProcTimeOut++;
    2856:	80 91 bb 01 	lds	r24, 0x01BB
    285a:	8f 5f       	subi	r24, 0xFF	; 255
    285c:	80 93 bb 01 	sts	0x01BB, r24
	}
	TimSend++;
    2860:	80 91 fa 0c 	lds	r24, 0x0CFA
    2864:	8f 5f       	subi	r24, 0xFF	; 255
    2866:	80 93 fa 0c 	sts	0x0CFA, r24
}
    286a:	9f 91       	pop	r25
    286c:	8f 91       	pop	r24
    286e:	7f 91       	pop	r23
    2870:	6f 91       	pop	r22
    2872:	2f 91       	pop	r18
    2874:	0f 90       	pop	r0
    2876:	0f be       	out	0x3f, r0	; 63
    2878:	0f 90       	pop	r0
    287a:	1f 90       	pop	r1
    287c:	18 95       	reti

0000287e <RePrintStandalone>:

char RePrintStandalone(char FIPAddr){
     char Result=PS_NONE;

   return Result;
}
    287e:	86 e1       	ldi	r24, 0x16	; 22
    2880:	08 95       	ret

00002882 <GetPumpStatusLabel>:


char GetPumpStatusLabel(char xPumpStatus){
     char Result;

	 switch(xPumpStatus){
    2882:	e8 2f       	mov	r30, r24
    2884:	f0 e0       	ldi	r31, 0x00	; 0
    2886:	ee 31       	cpi	r30, 0x1E	; 30
    2888:	f1 05       	cpc	r31, r1
    288a:	70 f5       	brcc	.+92     	; 0x28e8 <GetPumpStatusLabel+0x66>
    288c:	ea 5b       	subi	r30, 0xBA	; 186
    288e:	ff 4f       	sbci	r31, 0xFF	; 255
    2890:	ee 0f       	add	r30, r30
    2892:	ff 1f       	adc	r31, r31
    2894:	05 90       	lpm	r0, Z+
    2896:	f4 91       	lpm	r31, Z+
    2898:	e0 2d       	mov	r30, r0
    289a:	09 94       	ijmp
    289c:	81 e3       	ldi	r24, 0x31	; 49
    289e:	08 95       	ret
    28a0:	85 e4       	ldi	r24, 0x45	; 69
    28a2:	08 95       	ret
    28a4:	82 e3       	ldi	r24, 0x32	; 50
    28a6:	08 95       	ret
	 case PUMP_ST1: 
	      Result='1';
		  break;
	 case PUMP_ST2: 
	 	  Result='2';
		  break;
    28a8:	83 e3       	ldi	r24, 0x33	; 51
    28aa:	08 95       	ret
     case PUMP_ST3:
	 	  Result='3';
		  break;	
    28ac:	84 e3       	ldi	r24, 0x34	; 52
    28ae:	08 95       	ret
	 case PUMP_ST4: 
          Result='4';
		  break;
    28b0:	85 e3       	ldi	r24, 0x35	; 53
    28b2:	08 95       	ret
	 case PUMP_ST5: 
	 	  Result='5';
		  break;
    28b4:	89 e6       	ldi	r24, 0x69	; 105
    28b6:	08 95       	ret
	 case PUMP_OFF: 
	 case PW_ONLINE:
	 	  Result='i';
		  break;
    28b8:	8e e6       	ldi	r24, 0x6E	; 110
    28ba:	08 95       	ret
     case PW_CALL:
	 case PUMP_CALL: 
	 	  Result='n';
		  break;     
    28bc:	81 e6       	ldi	r24, 0x61	; 97
    28be:	08 95       	ret
	 case PUMP_AUTH: 
	 	  Result='a';
		  break;
    28c0:	84 e6       	ldi	r24, 0x64	; 100
    28c2:	08 95       	ret
     case PW_AUTHORIZED:
	 case PUMP_BUSY: 
	 	  Result='d';
		  break;
    28c4:	8f e4       	ldi	r24, 0x4F	; 79
    28c6:	08 95       	ret
	 case PUMP_PEOT: 
	 	  Result='O';
		  break;
    28c8:	86 e4       	ldi	r24, 0x46	; 70
    28ca:	08 95       	ret
     case PW_END_DELIVERY:
	 case PUMP_FEOT: 
	 	  Result='F';
		  break;
    28cc:	83 e5       	ldi	r24, 0x53	; 83
    28ce:	08 95       	ret
	 case PUMP_STOP: 
	 	  Result='S';
		  break;
    28d0:	8d e2       	ldi	r24, 0x2D	; 45
    28d2:	08 95       	ret
	 case PUMP_NONE:
	 case PW_DISCONNECT:
	 	  Result='-';
		  break;
    28d4:	80 e5       	ldi	r24, 0x50	; 80
    28d6:	08 95       	ret
     case PS_PRINT_READY:
	      Result='P';
 	      break;
    28d8:	89 e4       	ldi	r24, 0x49	; 73
    28da:	08 95       	ret
     case PS_PRINTED:
	      Result='I';
 	      break;
    28dc:	86 e5       	ldi	r24, 0x56	; 86
    28de:	08 95       	ret
     case PS_VOID:
	      Result='V';
	      break;
    28e0:	84 e5       	ldi	r24, 0x54	; 84
    28e2:	08 95       	ret
     case PS_TOTALIZER:
	      Result='T';
	      break;
    28e4:	84 e7       	ldi	r24, 0x74	; 116
    28e6:	08 95       	ret
     case PS_FINISH_TOTALIZER:
	      Result='t';
	      break;
    28e8:	88 e7       	ldi	r24, 0x78	; 120
	 default:
          Result='x';
		  break;         	 
	 }
  return Result;	 
}
    28ea:	08 95       	ret

000028ec <SendPoolingCommand>:
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
    28ec:	80 93 29 06 	sts	0x0629, r24
	 PoolMsg=plMsg;
    28f0:	60 93 55 0c 	sts	0x0C55, r22
     IsControlPooling=True;
    28f4:	81 e0       	ldi	r24, 0x01	; 1
    28f6:	80 93 84 01 	sts	0x0184, r24
}
    28fa:	08 95       	ret

000028fc <ScanEDCFlow>:
	 RemZeroLead(strMsgID);
	 Result=atoi(strMsgID);
  return Result;
}

void ScanEDCFlow(char data){
    28fc:	28 2f       	mov	r18, r24


	 //uart(0,1,data);

     //EDC-MSG
     if (data==0x02){
    28fe:	82 30       	cpi	r24, 0x02	; 2
    2900:	39 f4       	brne	.+14     	; 0x2910 <ScanEDCFlow+0x14>
	     IsEDCFlow=True;
    2902:	81 e0       	ldi	r24, 0x01	; 1
    2904:	80 93 a3 02 	sts	0x02A3, r24
		 nFlow=0;
    2908:	10 92 a2 02 	sts	0x02A2, r1
    290c:	10 92 a1 02 	sts	0x02A1, r1
	 }//FillMessage
     if (IsEDCFlow==True){
    2910:	80 91 a3 02 	lds	r24, 0x02A3
    2914:	81 30       	cpi	r24, 0x01	; 1
    2916:	69 f4       	brne	.+26     	; 0x2932 <ScanEDCFlow+0x36>
	     rcv_trans[nFlow]=data;
    2918:	80 91 a1 02 	lds	r24, 0x02A1
    291c:	90 91 a2 02 	lds	r25, 0x02A2
    2920:	fc 01       	movw	r30, r24
    2922:	e1 56       	subi	r30, 0x61	; 97
    2924:	f6 4f       	sbci	r31, 0xF6	; 246
    2926:	20 83       	st	Z, r18
		 nFlow++;
    2928:	01 96       	adiw	r24, 0x01	; 1
    292a:	90 93 a2 02 	sts	0x02A2, r25
    292e:	80 93 a1 02 	sts	0x02A1, r24
	 }//CloseMessage
	 if ((data==0x03)||(nFlow>=MSG03_LENGTH)){
    2932:	23 30       	cpi	r18, 0x03	; 3
    2934:	41 f0       	breq	.+16     	; 0x2946 <ScanEDCFlow+0x4a>
    2936:	80 91 a1 02 	lds	r24, 0x02A1
    293a:	90 91 a2 02 	lds	r25, 0x02A2
    293e:	8d 34       	cpi	r24, 0x4D	; 77
    2940:	91 05       	cpc	r25, r1
    2942:	08 f4       	brcc	.+2      	; 0x2946 <ScanEDCFlow+0x4a>
    2944:	99 c0       	rjmp	.+306    	; 0x2a78 <ScanEDCFlow+0x17c>
	     //for(i=0;i<nFlow;i++){uart(0,1,rcv_trans[i]);}
	     IsEDCFlow=False;
    2946:	10 92 a3 02 	sts	0x02A3, r1
		 EDCMsgCode=((rcv_trans[1]-'0')*10)+(rcv_trans[2]-'0');
    294a:	30 91 a1 09 	lds	r19, 0x09A1
    294e:	30 51       	subi	r19, 0x10	; 16
    2950:	80 91 a0 09 	lds	r24, 0x09A0
    2954:	2a e0       	ldi	r18, 0x0A	; 10
    2956:	82 9f       	mul	r24, r18
    2958:	c0 01       	movw	r24, r0
    295a:	11 24       	eor	r1, r1
    295c:	38 0f       	add	r19, r24

		 if (EDCMsgCode==0x03){
    295e:	33 30       	cpi	r19, 0x03	; 3
    2960:	09 f0       	breq	.+2      	; 0x2964 <ScanEDCFlow+0x68>
    2962:	65 c0       	rjmp	.+202    	; 0x2a2e <ScanEDCFlow+0x132>
    2964:	e2 ea       	ldi	r30, 0xA2	; 162
    2966:	f9 e0       	ldi	r31, 0x09	; 9
    2968:	a9 e0       	ldi	r26, 0x09	; 9
    296a:	bd e0       	ldi	r27, 0x0D	; 13
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    296c:	81 91       	ld	r24, Z+
    296e:	8d 93       	st	X+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    2970:	89 e0       	ldi	r24, 0x09	; 9
    2972:	e8 3a       	cpi	r30, 0xA8	; 168
    2974:	f8 07       	cpc	r31, r24
    2976:	d1 f7       	brne	.-12     	; 0x296c <ScanEDCFlow+0x70>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    2978:	10 92 0f 0d 	sts	0x0D0F, r1
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    297c:	80 81       	ld	r24, Z
    297e:	80 93 3b 08 	sts	0x083B, r24
    2982:	81 81       	ldd	r24, Z+1	; 0x01
    2984:	80 93 3c 08 	sts	0x083C, r24
	 }Dest[Length]=0;
    2988:	10 92 3d 08 	sts	0x083D, r1
    298c:	32 96       	adiw	r30, 0x02	; 2
    298e:	a5 e2       	ldi	r26, 0x25	; 37
    2990:	bd e0       	ldi	r27, 0x0D	; 13
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    2992:	81 91       	ld	r24, Z+
    2994:	8d 93       	st	X+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    2996:	89 e0       	ldi	r24, 0x09	; 9
    2998:	e9 3b       	cpi	r30, 0xB9	; 185
    299a:	f8 07       	cpc	r31, r24
    299c:	d1 f7       	brne	.-12     	; 0x2992 <ScanEDCFlow+0x96>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    299e:	10 92 34 0d 	sts	0x0D34, r1
    29a2:	ab e0       	ldi	r26, 0x0B	; 11
    29a4:	bc e0       	ldi	r27, 0x0C	; 12
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    29a6:	81 91       	ld	r24, Z+
    29a8:	8d 93       	st	X+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    29aa:	89 e0       	ldi	r24, 0x09	; 9
    29ac:	ec 3c       	cpi	r30, 0xCC	; 204
    29ae:	f8 07       	cpc	r31, r24
    29b0:	d1 f7       	brne	.-12     	; 0x29a6 <ScanEDCFlow+0xaa>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    29b2:	10 92 1e 0c 	sts	0x0C1E, r1
    29b6:	20 e0       	ldi	r18, 0x00	; 0
    29b8:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    29ba:	f9 01       	movw	r30, r18
    29bc:	ee 58       	subi	r30, 0x8E	; 142
    29be:	f7 4f       	sbci	r31, 0xF7	; 247
    29c0:	d9 01       	movw	r26, r18
    29c2:	a1 56       	subi	r26, 0x61	; 97
    29c4:	b6 4f       	sbci	r27, 0xF6	; 246
    29c6:	9d 96       	adiw	r26, 0x2d	; 45
    29c8:	8c 91       	ld	r24, X
    29ca:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    29cc:	2f 5f       	subi	r18, 0xFF	; 255
    29ce:	3f 4f       	sbci	r19, 0xFF	; 255
    29d0:	26 30       	cpi	r18, 0x06	; 6
    29d2:	31 05       	cpc	r19, r1
    29d4:	91 f7       	brne	.-28     	; 0x29ba <ScanEDCFlow+0xbe>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    29d6:	10 92 78 08 	sts	0x0878, r1
    29da:	20 e0       	ldi	r18, 0x00	; 0
    29dc:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    29de:	f9 01       	movw	r30, r18
    29e0:	eb 52       	subi	r30, 0x2B	; 43
    29e2:	f8 4f       	sbci	r31, 0xF8	; 248
    29e4:	d9 01       	movw	r26, r18
    29e6:	a1 56       	subi	r26, 0x61	; 97
    29e8:	b6 4f       	sbci	r27, 0xF6	; 246
    29ea:	d3 96       	adiw	r26, 0x33	; 51
    29ec:	8c 91       	ld	r24, X
    29ee:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    29f0:	2f 5f       	subi	r18, 0xFF	; 255
    29f2:	3f 4f       	sbci	r19, 0xFF	; 255
    29f4:	2a 30       	cpi	r18, 0x0A	; 10
    29f6:	31 05       	cpc	r19, r1
    29f8:	91 f7       	brne	.-28     	; 0x29de <ScanEDCFlow+0xe2>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    29fa:	10 92 df 07 	sts	0x07DF, r1
    29fe:	20 e0       	ldi	r18, 0x00	; 0
    2a00:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    2a02:	f9 01       	movw	r30, r18
    2a04:	ef 5b       	subi	r30, 0xBF	; 191
    2a06:	f3 4f       	sbci	r31, 0xF3	; 243
    2a08:	d9 01       	movw	r26, r18
    2a0a:	a1 56       	subi	r26, 0x61	; 97
    2a0c:	b6 4f       	sbci	r27, 0xF6	; 246
    2a0e:	dd 96       	adiw	r26, 0x3d	; 61
    2a10:	8c 91       	ld	r24, X
    2a12:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    2a14:	2f 5f       	subi	r18, 0xFF	; 255
    2a16:	3f 4f       	sbci	r19, 0xFF	; 255
    2a18:	2e 30       	cpi	r18, 0x0E	; 14
    2a1a:	31 05       	cpc	r19, r1
    2a1c:	91 f7       	brne	.-28     	; 0x2a02 <ScanEDCFlow+0x106>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    2a1e:	10 92 4f 0c 	sts	0x0C4F, r1
             StrPosCopy(rcv_trans,strCardType,11,15);
             StrPosCopy(rcv_trans,strCardID,26,19);
             StrPosCopy(rcv_trans,strApprovalCode,45,6);
             StrPosCopy(rcv_trans,strInvoiceNumber,51,10);
             StrPosCopy(rcv_trans,strDateTime,61,14);
		     IsEDCApproved=True;//Sending Message 92
    2a22:	81 e0       	ldi	r24, 0x01	; 1
    2a24:	80 93 99 01 	sts	0x0199, r24
			 IsPrintApprovalCode=True;
    2a28:	80 93 9a 01 	sts	0x019A, r24
    2a2c:	08 95       	ret
	    }else
		 if (EDCMsgCode==0x04){
    2a2e:	34 30       	cpi	r19, 0x04	; 4
    2a30:	19 f5       	brne	.+70     	; 0x2a78 <ScanEDCFlow+0x17c>
    2a32:	e2 ea       	ldi	r30, 0xA2	; 162
    2a34:	f9 e0       	ldi	r31, 0x09	; 9
    2a36:	a2 e7       	ldi	r26, 0x72	; 114
    2a38:	b8 e0       	ldi	r27, 0x08	; 8
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    2a3a:	81 91       	ld	r24, Z+
    2a3c:	8d 93       	st	X+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    2a3e:	89 e0       	ldi	r24, 0x09	; 9
    2a40:	e8 3a       	cpi	r30, 0xA8	; 168
    2a42:	f8 07       	cpc	r31, r24
    2a44:	d1 f7       	brne	.-12     	; 0x2a3a <ScanEDCFlow+0x13e>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    2a46:	10 92 78 08 	sts	0x0878, r1
    2a4a:	a5 ed       	ldi	r26, 0xD5	; 213
    2a4c:	b7 e0       	ldi	r27, 0x07	; 7
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    2a4e:	81 91       	ld	r24, Z+
    2a50:	8d 93       	st	X+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    2a52:	89 e0       	ldi	r24, 0x09	; 9
    2a54:	e2 3b       	cpi	r30, 0xB2	; 178
    2a56:	f8 07       	cpc	r31, r24
    2a58:	d1 f7       	brne	.-12     	; 0x2a4e <ScanEDCFlow+0x152>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    2a5a:	10 92 df 07 	sts	0x07DF, r1
    2a5e:	a1 e4       	ldi	r26, 0x41	; 65
    2a60:	bc e0       	ldi	r27, 0x0C	; 12
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    2a62:	81 91       	ld	r24, Z+
    2a64:	8d 93       	st	X+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    2a66:	89 e0       	ldi	r24, 0x09	; 9
    2a68:	e0 3c       	cpi	r30, 0xC0	; 192
    2a6a:	f8 07       	cpc	r31, r24
    2a6c:	d1 f7       	brne	.-12     	; 0x2a62 <ScanEDCFlow+0x166>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    2a6e:	10 92 4f 0c 	sts	0x0C4F, r1
	    }else
		 if (EDCMsgCode==0x04){
             StrPosCopy(rcv_trans,strApprovalCode,3,6);
             StrPosCopy(rcv_trans,strInvoiceNumber,9,10);
             StrPosCopy(rcv_trans,strDateTime,19,14);
			 IsVoidTransaction=True;
    2a72:	81 e0       	ldi	r24, 0x01	; 1
    2a74:	80 93 9b 01 	sts	0x019B, r24
    2a78:	08 95       	ret

00002a7a <ScanHiddenKeyFlow>:
	    }
    }//MSGDetection
}

void ScanHiddenKeyFlow(char KeyIn){
}
    2a7a:	08 95       	ret

00002a7c <ScanRFIDFlow>:


void ScanRFIDFlow(char data){//                   12 11 10 9  8  7  6  5  4  3  2  1  0
    2a7c:	98 2f       	mov	r25, r24
    2a7e:	e1 ef       	ldi	r30, 0xF1	; 241
    2a80:	f8 e0       	ldi	r31, 0x08	; 8
     char i=0,strSerial[20]; //Shift Data Serial; 02 32 33 44 31 30 41 36 43 0D 0A 0A 03 
	                                                //2 50 51 65 68 68 68 54 67 13 10 3

	 for(i=0;i<19;i++){
        strSerialFlow[19-i]=strSerialFlow[18-i];   
    2a82:	80 81       	ld	r24, Z
    2a84:	81 83       	std	Z+1, r24	; 0x01
    2a86:	31 97       	sbiw	r30, 0x01	; 1

void ScanRFIDFlow(char data){//                   12 11 10 9  8  7  6  5  4  3  2  1  0
     char i=0,strSerial[20]; //Shift Data Serial; 02 32 33 44 31 30 41 36 43 0D 0A 0A 03 
	                                                //2 50 51 65 68 68 68 54 67 13 10 3

	 for(i=0;i<19;i++){
    2a88:	88 e0       	ldi	r24, 0x08	; 8
    2a8a:	ee 3d       	cpi	r30, 0xDE	; 222
    2a8c:	f8 07       	cpc	r31, r24
    2a8e:	c9 f7       	brne	.-14     	; 0x2a82 <ScanRFIDFlow+0x6>
        strSerialFlow[19-i]=strSerialFlow[18-i];   
	 }  strSerialFlow[0]=data;
    2a90:	9f 01       	movw	r18, r30
    2a92:	2f 5f       	subi	r18, 0xFF	; 255
    2a94:	3f 4f       	sbci	r19, 0xFF	; 255
    2a96:	91 83       	std	Z+1, r25	; 0x01
	 //Detection
	 if ((strSerialFlow[11]==0x02)&&(strSerialFlow[1]==0x0A)&&(strSerialFlow[0]==0x03)){
    2a98:	84 85       	ldd	r24, Z+12	; 0x0c
    2a9a:	82 30       	cpi	r24, 0x02	; 2
    2a9c:	f9 f4       	brne	.+62     	; 0x2adc <ScanRFIDFlow+0x60>
    2a9e:	80 91 e0 08 	lds	r24, 0x08E0
    2aa2:	8a 30       	cpi	r24, 0x0A	; 10
    2aa4:	d9 f4       	brne	.+54     	; 0x2adc <ScanRFIDFlow+0x60>
    2aa6:	93 30       	cpi	r25, 0x03	; 3
    2aa8:	c9 f4       	brne	.+50     	; 0x2adc <ScanRFIDFlow+0x60>
    2aaa:	f9 01       	movw	r30, r18
    2aac:	3a 96       	adiw	r30, 0x0a	; 10
    2aae:	a3 ed       	ldi	r26, 0xD3	; 211
    2ab0:	bc e0       	ldi	r27, 0x0C	; 12
		for(i=0;i<8;i++) strRFID[i]=strSerialFlow[10-i];
    2ab2:	80 81       	ld	r24, Z
    2ab4:	8d 93       	st	X+, r24
    2ab6:	31 97       	sbiw	r30, 0x01	; 1
    2ab8:	88 e0       	ldi	r24, 0x08	; 8
    2aba:	e1 3e       	cpi	r30, 0xE1	; 225
    2abc:	f8 07       	cpc	r31, r24
    2abe:	c9 f7       	brne	.-14     	; 0x2ab2 <ScanRFIDFlow+0x36>
        strRFID[8]=0;
    2ac0:	10 92 db 0c 	sts	0x0CDB, r1
	    IsRFIDDetected=True;
    2ac4:	81 e0       	ldi	r24, 0x01	; 1
    2ac6:	80 93 98 01 	sts	0x0198, r24
	      }
     }      
}

void BackLightTrig(){    
     __key_light = 1; 
    2aca:	80 93 ae 02 	sts	0x02AE, r24
	 __key_lgtcnt = 0; 
    2ace:	10 92 af 02 	sts	0x02AF, r1
	 PORTG=PORTG&0b11111101;
    2ad2:	80 91 65 00 	lds	r24, 0x0065
    2ad6:	8d 7f       	andi	r24, 0xFD	; 253
    2ad8:	80 93 65 00 	sts	0x0065, r24
    2adc:	08 95       	ret

00002ade <__vector_18>:
	if (IFType==IT_SLAVE)ScanEDCFlow(dataSPI);
	else
	if (IFType==IT_STANDALONE)ScanStandaloneFlow(dataSPI);
}

ISR(USART0_RX_vect){
    2ade:	1f 92       	push	r1
    2ae0:	0f 92       	push	r0
    2ae2:	0f b6       	in	r0, 0x3f	; 63
    2ae4:	0f 92       	push	r0
    2ae6:	11 24       	eor	r1, r1
    2ae8:	8f 93       	push	r24
    2aea:	9f 93       	push	r25
	char dataRX0,IsSPI=False;
	dataRX0= UDR0;
    2aec:	9c b1       	in	r25, 0x0c	; 12
	//PrintBusyDetection
	if ((IsBusyIdlePrinting==True)||(IsBusyFreePrinting==True)){
    2aee:	80 91 b2 01 	lds	r24, 0x01B2
    2af2:	81 30       	cpi	r24, 0x01	; 1
    2af4:	21 f0       	breq	.+8      	; 0x2afe <__vector_18+0x20>
    2af6:	80 91 b4 01 	lds	r24, 0x01B4
    2afa:	81 30       	cpi	r24, 0x01	; 1
    2afc:	51 f4       	brne	.+20     	; 0x2b12 <__vector_18+0x34>
	    if (dataRX0==19)IsBusyPrint=True;
    2afe:	93 31       	cpi	r25, 0x13	; 19
    2b00:	21 f4       	brne	.+8      	; 0x2b0a <__vector_18+0x2c>
    2b02:	81 e0       	ldi	r24, 0x01	; 1
    2b04:	80 93 b3 01 	sts	0x01B3, r24
    2b08:	04 c0       	rjmp	.+8      	; 0x2b12 <__vector_18+0x34>
		else 
	    if (dataRX0==17)IsBusyPrint=False;	
    2b0a:	91 31       	cpi	r25, 0x11	; 17
    2b0c:	11 f4       	brne	.+4      	; 0x2b12 <__vector_18+0x34>
    2b0e:	10 92 b3 01 	sts	0x01B3, r1
	}
}
    2b12:	9f 91       	pop	r25
    2b14:	8f 91       	pop	r24
    2b16:	0f 90       	pop	r0
    2b18:	0f be       	out	0x3f, r0	; 63
    2b1a:	0f 90       	pop	r0
    2b1c:	1f 90       	pop	r1
    2b1e:	18 95       	reti

00002b20 <ScanCommand>:

char ScanCommand(char *strFlow,char *fCommand){
     char Result;
	 Result=False;
   return Result;
}
    2b20:	80 e0       	ldi	r24, 0x00	; 0
    2b22:	08 95       	ret

00002b24 <ConfigProtocol>:
	 }
	 uart_printf(1,1,PSTR(">"));
	 //End
}

void ConfigProtocol(char dataIn){
    2b24:	28 2f       	mov	r18, r24
     static char Conflow[7];
    //Configuration Data Request 
	if ((Conflow[6]=='i')&&(Conflow[5]=='C')&&(Conflow[4]=='o')&&(Conflow[3]=='n')&&(Conflow[2]=='f')&&(Conflow[1]=='?')&&(Conflow[0]==0x0D)&&(dataIn==0x0A)){
    2b26:	80 91 9f 02 	lds	r24, 0x029F
    2b2a:	89 36       	cpi	r24, 0x69	; 105
    2b2c:	e9 f4       	brne	.+58     	; 0x2b68 <ConfigProtocol+0x44>
    2b2e:	80 91 9e 02 	lds	r24, 0x029E
    2b32:	83 34       	cpi	r24, 0x43	; 67
    2b34:	c9 f4       	brne	.+50     	; 0x2b68 <ConfigProtocol+0x44>
    2b36:	80 91 9d 02 	lds	r24, 0x029D
    2b3a:	8f 36       	cpi	r24, 0x6F	; 111
    2b3c:	a9 f4       	brne	.+42     	; 0x2b68 <ConfigProtocol+0x44>
    2b3e:	80 91 9c 02 	lds	r24, 0x029C
    2b42:	8e 36       	cpi	r24, 0x6E	; 110
    2b44:	89 f4       	brne	.+34     	; 0x2b68 <ConfigProtocol+0x44>
    2b46:	80 91 9b 02 	lds	r24, 0x029B
    2b4a:	86 36       	cpi	r24, 0x66	; 102
    2b4c:	69 f4       	brne	.+26     	; 0x2b68 <ConfigProtocol+0x44>
    2b4e:	80 91 9a 02 	lds	r24, 0x029A
    2b52:	8f 33       	cpi	r24, 0x3F	; 63
    2b54:	49 f4       	brne	.+18     	; 0x2b68 <ConfigProtocol+0x44>
    2b56:	80 91 99 02 	lds	r24, 0x0299
    2b5a:	8d 30       	cpi	r24, 0x0D	; 13
    2b5c:	29 f4       	brne	.+10     	; 0x2b68 <ConfigProtocol+0x44>
    2b5e:	2a 30       	cpi	r18, 0x0A	; 10
    2b60:	19 f4       	brne	.+6      	; 0x2b68 <ConfigProtocol+0x44>
	     //SendConfigParamater();        
		 ConfigCommand=CC_SEND_CONFIG;
    2b62:	82 e0       	ldi	r24, 0x02	; 2
    2b64:	80 93 b0 01 	sts	0x01B0, r24
	}

	if (IsConfigFlow==True){        
    2b68:	80 91 85 01 	lds	r24, 0x0185
    2b6c:	81 30       	cpi	r24, 0x01	; 1
    2b6e:	69 f4       	brne	.+26     	; 0x2b8a <ConfigProtocol+0x66>
	    rcv_trans[char_count]=dataIn;
    2b70:	80 91 89 01 	lds	r24, 0x0189
    2b74:	90 91 8a 01 	lds	r25, 0x018A
    2b78:	fc 01       	movw	r30, r24
    2b7a:	e1 56       	subi	r30, 0x61	; 97
    2b7c:	f6 4f       	sbci	r31, 0xF6	; 246
    2b7e:	20 83       	st	Z, r18
	    char_count++; 
    2b80:	01 96       	adiw	r24, 0x01	; 1
    2b82:	90 93 8a 01 	sts	0x018A, r25
    2b86:	80 93 89 01 	sts	0x0189, r24
	}
	if ((Conflow[0]==0x04)&&(dataIn==0x40)){
    2b8a:	80 91 99 02 	lds	r24, 0x0299
    2b8e:	84 30       	cpi	r24, 0x04	; 4
    2b90:	51 f4       	brne	.+20     	; 0x2ba6 <ConfigProtocol+0x82>
    2b92:	20 34       	cpi	r18, 0x40	; 64
    2b94:	e9 f4       	brne	.+58     	; 0x2bd0 <ConfigProtocol+0xac>
	     IsConfigFlow=True;
    2b96:	81 e0       	ldi	r24, 0x01	; 1
    2b98:	80 93 85 01 	sts	0x0185, r24
		 char_count=0;
    2b9c:	10 92 8a 01 	sts	0x018A, r1
    2ba0:	10 92 89 01 	sts	0x0189, r1
    2ba4:	15 c0       	rjmp	.+42     	; 0x2bd0 <ConfigProtocol+0xac>
	}
	//SavingData
	if ((Conflow[0]==0x05)&&(dataIn==0x50)){
    2ba6:	85 30       	cpi	r24, 0x05	; 5
    2ba8:	99 f4       	brne	.+38     	; 0x2bd0 <ConfigProtocol+0xac>
    2baa:	20 35       	cpi	r18, 0x50	; 80
    2bac:	89 f4       	brne	.+34     	; 0x2bd0 <ConfigProtocol+0xac>
	     transLength=char_count;
    2bae:	80 91 89 01 	lds	r24, 0x0189
    2bb2:	90 91 8a 01 	lds	r25, 0x018A
    2bb6:	90 93 8c 01 	sts	0x018C, r25
    2bba:	80 93 8b 01 	sts	0x018B, r24
		 char_count=0;
    2bbe:	10 92 8a 01 	sts	0x018A, r1
    2bc2:	10 92 89 01 	sts	0x0189, r1
	     IsConfigFlow=False;
    2bc6:	10 92 85 01 	sts	0x0185, r1
		 ConfigCommand=CC_SAVE_CONFIG;
    2bca:	81 e0       	ldi	r24, 0x01	; 1
    2bcc:	80 93 b0 01 	sts	0x01B0, r24
		 //SaveConfigParameter();
	}

	//Shifting
	Conflow[6]=Conflow[5];
    2bd0:	80 91 9e 02 	lds	r24, 0x029E
    2bd4:	80 93 9f 02 	sts	0x029F, r24
	Conflow[5]=Conflow[4];
    2bd8:	80 91 9d 02 	lds	r24, 0x029D
    2bdc:	80 93 9e 02 	sts	0x029E, r24
	Conflow[4]=Conflow[3];
    2be0:	80 91 9c 02 	lds	r24, 0x029C
    2be4:	80 93 9d 02 	sts	0x029D, r24
	Conflow[3]=Conflow[2];
    2be8:	80 91 9b 02 	lds	r24, 0x029B
    2bec:	80 93 9c 02 	sts	0x029C, r24
	Conflow[2]=Conflow[1];
    2bf0:	80 91 9a 02 	lds	r24, 0x029A
    2bf4:	80 93 9b 02 	sts	0x029B, r24
	Conflow[1]=Conflow[0];
    2bf8:	80 91 99 02 	lds	r24, 0x0299
    2bfc:	80 93 9a 02 	sts	0x029A, r24
	Conflow[0]=dataIn;
    2c00:	20 93 99 02 	sts	0x0299, r18

}
    2c04:	08 95       	ret

00002c06 <system_beep>:
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    2c06:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    2c08:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    2c0a:	80 93 bc 01 	sts	0x01BC, r24
}
    2c0e:	08 95       	ret

00002c10 <systemRestart>:
	 iRestart=0;
	 while(iRestart<100){
	       strRestart[iRestart]=iRestart;
	       iRestart++;	 
	 }
}
    2c10:	08 95       	ret

00002c12 <Low>:

char Low(char X){
     char Result;
	 Result=(0x0F&X);
	 return Result;
}
    2c12:	8f 70       	andi	r24, 0x0F	; 15
    2c14:	08 95       	ret

00002c16 <High>:
char High(char X){
     char Result;
	 Result=((X>>4)&(0x0F));
	 return Result;
}
    2c16:	82 95       	swap	r24
    2c18:	8f 70       	andi	r24, 0x0F	; 15
    2c1a:	08 95       	ret

00002c1c <Str>:
char Str(char H){
    2c1c:	98 2f       	mov	r25, r24
unsigned char Conv=0;
        if ((H>=0)&&(H<=9)) Conv='0'+H;
    2c1e:	8a 30       	cpi	r24, 0x0A	; 10
    2c20:	10 f4       	brcc	.+4      	; 0x2c26 <Str+0xa>
    2c22:	80 5d       	subi	r24, 0xD0	; 208
    2c24:	08 95       	ret
        else
        if ((H>=0x0A)&&(H<=0x0F)) Conv='A'+(H-10);    
    2c26:	8a 50       	subi	r24, 0x0A	; 10
    2c28:	86 30       	cpi	r24, 0x06	; 6
    2c2a:	10 f0       	brcs	.+4      	; 0x2c30 <Str+0x14>
    2c2c:	80 e0       	ldi	r24, 0x00	; 0
    2c2e:	08 95       	ret
    2c30:	89 2f       	mov	r24, r25
    2c32:	89 5c       	subi	r24, 0xC9	; 201
        return (Conv);
}
    2c34:	08 95       	ret

00002c36 <charToHex>:

void charToHex(char X, char *Result){
    2c36:	ff 92       	push	r15
    2c38:	0f 93       	push	r16
    2c3a:	1f 93       	push	r17
    2c3c:	f8 2e       	mov	r15, r24
    2c3e:	8b 01       	movw	r16, r22
     Result[0]=Str(High(X));
    2c40:	82 95       	swap	r24
    2c42:	8f 70       	andi	r24, 0x0F	; 15
    2c44:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <Str>
    2c48:	f8 01       	movw	r30, r16
    2c4a:	80 83       	st	Z, r24
	 Result[1]=Str(Low(X));
    2c4c:	8f 2d       	mov	r24, r15
    2c4e:	8f 70       	andi	r24, 0x0F	; 15
    2c50:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <Str>
    2c54:	f8 01       	movw	r30, r16
    2c56:	81 83       	std	Z+1, r24	; 0x01
	 Result[2]=0;
    2c58:	12 82       	std	Z+2, r1	; 0x02
	 
}
    2c5a:	1f 91       	pop	r17
    2c5c:	0f 91       	pop	r16
    2c5e:	ff 90       	pop	r15
    2c60:	08 95       	ret

00002c62 <strToInt>:

char strToInt(char *str){
    2c62:	fc 01       	movw	r30, r24
     char Result;
     Result=(((str[0]-'0')*10) +(str[0]-'0'));
    2c64:	80 81       	ld	r24, Z
    2c66:	2a e0       	ldi	r18, 0x0A	; 10
    2c68:	82 9f       	mul	r24, r18
    2c6a:	90 01       	movw	r18, r0
    2c6c:	11 24       	eor	r1, r1
    2c6e:	80 51       	subi	r24, 0x10	; 16
	 return Result;
}
    2c70:	82 0f       	add	r24, r18
    2c72:	08 95       	ret

00002c74 <intToStr>:

void intToStr(char X, char *str){
    2c74:	58 2f       	mov	r21, r24
    2c76:	fb 01       	movw	r30, r22
     char R,P,S;
	 R=X/100;
    2c78:	64 e6       	ldi	r22, 0x64	; 100
    2c7a:	0e 94 4c aa 	call	0x15498	; 0x15498 <__udivmodqi4>
    2c7e:	a8 2f       	mov	r26, r24
	 P=(X%100)/10;
    2c80:	85 2f       	mov	r24, r21
    2c82:	0e 94 4c aa 	call	0x15498	; 0x15498 <__udivmodqi4>
    2c86:	89 2f       	mov	r24, r25
    2c88:	6a e0       	ldi	r22, 0x0A	; 10
    2c8a:	0e 94 4c aa 	call	0x15498	; 0x15498 <__udivmodqi4>
    2c8e:	48 2f       	mov	r20, r24
	 S=X-(R*100)-(P*10);
    2c90:	8c e9       	ldi	r24, 0x9C	; 156
    2c92:	9f ef       	ldi	r25, 0xFF	; 255
    2c94:	a8 9f       	mul	r26, r24
    2c96:	80 2d       	mov	r24, r0
    2c98:	11 24       	eor	r1, r1
    2c9a:	85 0f       	add	r24, r21
    2c9c:	26 ef       	ldi	r18, 0xF6	; 246
    2c9e:	3f ef       	ldi	r19, 0xFF	; 255
    2ca0:	42 9f       	mul	r20, r18
    2ca2:	90 2d       	mov	r25, r0
    2ca4:	11 24       	eor	r1, r1
    2ca6:	98 0f       	add	r25, r24
	 if (X>=100){
    2ca8:	54 36       	cpi	r21, 0x64	; 100
    2caa:	40 f0       	brcs	.+16     	; 0x2cbc <intToStr+0x48>
	     str[0]=('0'+R);
    2cac:	a0 5d       	subi	r26, 0xD0	; 208
    2cae:	a0 83       	st	Z, r26
	     str[1]=('0'+P);
    2cb0:	40 5d       	subi	r20, 0xD0	; 208
    2cb2:	41 83       	std	Z+1, r20	; 0x01
	     str[2]=('0'+S);
    2cb4:	90 5d       	subi	r25, 0xD0	; 208
    2cb6:	92 83       	std	Z+2, r25	; 0x02
	     str[3]=0;
    2cb8:	13 82       	std	Z+3, r1	; 0x03
    2cba:	08 95       	ret
	 if ((X>=10)&&(X>100)){
	     str[0]=('0'+P);
	     str[1]=('0'+S);
	     str[2]=0;
	 }else 
	 if (X<=10){
    2cbc:	5b 30       	cpi	r21, 0x0B	; 11
    2cbe:	18 f4       	brcc	.+6      	; 0x2cc6 <intToStr+0x52>
	     str[0]=('0'+S);
    2cc0:	90 5d       	subi	r25, 0xD0	; 208
    2cc2:	90 83       	st	Z, r25
	     str[1]=0;
    2cc4:	11 82       	std	Z+1, r1	; 0x01
    2cc6:	08 95       	ret

00002cc8 <UpdateClientIP>:
	 for(i=0;i<4;i++){
	     zeroIP(IP_blok[i],strIP[i]);
	 }
     sprintf_P(strClientIP,PSTR("%s.%s.%s.%s"),strIP[0],strIP[1],strIP[2],strIP[3]);
	 */
}
    2cc8:	08 95       	ret

00002cca <UpdateServerIP>:
	 for(i=0;i<4;i++){
	     zeroIP(IP_blok[i],strIP[i]);
	 }
		 sprintf_P(strServerIP,PSTR("%s.%s.%s.%s"),strIP[0],strIP[1],strIP[2],strIP[3]);
		 */
}
    2cca:	08 95       	ret

00002ccc <UpdateIFT_ID>:
void UpdateIFT_ID(){
    /* char IdIFT;
	 IdIFT=(eeprom_read_byte(&DefIFT_ID)%100);
	 sprintf_P(strIFT_ID,PSTR("%.2d"),IdIFT);
	 */
}
    2ccc:	08 95       	ret

00002cce <UpdateSeqNum>:
/*
     if (SeqNum<100)SeqNum++;
	 else SeqNum=0;
	 leadingZero(SeqNum,strSeqNum);
	 */
} 
    2cce:	08 95       	ret

00002cd0 <ViewCardID>:
}




void ViewCardID(){//+12345678 -->12345678
    2cd0:	20 e0       	ldi	r18, 0x00	; 0
    2cd2:	30 e0       	ldi	r19, 0x00	; 0
     char i;
	 for(i=0;i<8;i++){         //00000000000012345678
		strCardID[i]=strRFID[i];
    2cd4:	f9 01       	movw	r30, r18
    2cd6:	e5 5f       	subi	r30, 0xF5	; 245
    2cd8:	f3 4f       	sbci	r31, 0xF3	; 243
    2cda:	d9 01       	movw	r26, r18
    2cdc:	ad 52       	subi	r26, 0x2D	; 45
    2cde:	b3 4f       	sbci	r27, 0xF3	; 243
    2ce0:	8c 91       	ld	r24, X
    2ce2:	80 83       	st	Z, r24
    2ce4:	2f 5f       	subi	r18, 0xFF	; 255
    2ce6:	3f 4f       	sbci	r19, 0xFF	; 255



void ViewCardID(){//+12345678 -->12345678
     char i;
	 for(i=0;i<8;i++){         //00000000000012345678
    2ce8:	28 30       	cpi	r18, 0x08	; 8
    2cea:	31 05       	cpc	r19, r1
    2cec:	99 f7       	brne	.-26     	; 0x2cd4 <ViewCardID+0x4>
		strCardID[i]=strRFID[i];
	 }strCardID[8]=0;     
    2cee:	10 92 13 0c 	sts	0x0C13, r1
}
    2cf2:	08 95       	ret

00002cf4 <StringCopy>:
//Message 56


void StringCopy(char *Source,char *Dest,char Length){
    2cf4:	cf 93       	push	r28
    2cf6:	df 93       	push	r29
    2cf8:	db 01       	movw	r26, r22
    2cfa:	ec 01       	movw	r28, r24
    2cfc:	20 e0       	ldi	r18, 0x00	; 0
    2cfe:	30 e0       	ldi	r19, 0x00	; 0
    2d00:	07 c0       	rjmp	.+14     	; 0x2d10 <StringCopy+0x1c>
     char i;
	 for (i=0;i<Length;i++){
	     Dest[i]=Source[i];
    2d02:	fd 01       	movw	r30, r26
    2d04:	e2 0f       	add	r30, r18
    2d06:	f3 1f       	adc	r31, r19
    2d08:	89 91       	ld	r24, Y+
    2d0a:	80 83       	st	Z, r24
    2d0c:	2f 5f       	subi	r18, 0xFF	; 255
    2d0e:	3f 4f       	sbci	r19, 0xFF	; 255
//Message 56


void StringCopy(char *Source,char *Dest,char Length){
     char i;
	 for (i=0;i<Length;i++){
    2d10:	24 17       	cp	r18, r20
    2d12:	b8 f3       	brcs	.-18     	; 0x2d02 <StringCopy+0xe>
	     Dest[i]=Source[i];
	 }Dest[Length]=0;
    2d14:	a4 0f       	add	r26, r20
    2d16:	b1 1d       	adc	r27, r1
    2d18:	1c 92       	st	X, r1
}
    2d1a:	df 91       	pop	r29
    2d1c:	cf 91       	pop	r28
    2d1e:	08 95       	ret

00002d20 <StringCopyPos>:
void StringCopyPos(char *Source,char *Dest,char SrcPos,char Length){
    2d20:	cf 93       	push	r28
    2d22:	df 93       	push	r29
    2d24:	db 01       	movw	r26, r22
    2d26:	ec 01       	movw	r28, r24
    2d28:	c4 0f       	add	r28, r20
    2d2a:	d1 1d       	adc	r29, r1
    2d2c:	40 e0       	ldi	r20, 0x00	; 0
    2d2e:	50 e0       	ldi	r21, 0x00	; 0
    2d30:	07 c0       	rjmp	.+14     	; 0x2d40 <StringCopyPos+0x20>
     char i;
	 for (i=0;i<Length;i++){
	     Dest[i]=Source[SrcPos+i];
    2d32:	fd 01       	movw	r30, r26
    2d34:	e4 0f       	add	r30, r20
    2d36:	f5 1f       	adc	r31, r21
    2d38:	89 91       	ld	r24, Y+
    2d3a:	80 83       	st	Z, r24
    2d3c:	4f 5f       	subi	r20, 0xFF	; 255
    2d3e:	5f 4f       	sbci	r21, 0xFF	; 255
	     Dest[i]=Source[i];
	 }Dest[Length]=0;
}
void StringCopyPos(char *Source,char *Dest,char SrcPos,char Length){
     char i;
	 for (i=0;i<Length;i++){
    2d40:	42 17       	cp	r20, r18
    2d42:	b8 f3       	brcs	.-18     	; 0x2d32 <StringCopyPos+0x12>
	     Dest[i]=Source[SrcPos+i];
	 }Dest[Length]=0;
    2d44:	a2 0f       	add	r26, r18
    2d46:	b1 1d       	adc	r27, r1
    2d48:	1c 92       	st	X, r1
}
    2d4a:	df 91       	pop	r29
    2d4c:	cf 91       	pop	r28
    2d4e:	08 95       	ret

00002d50 <TestLocalAccount>:

void TestLocalAccount(){

}
    2d50:	08 95       	ret

00002d52 <BackLightTrig>:
	      }
     }      
}

void BackLightTrig(){    
     __key_light = 1; 
    2d52:	81 e0       	ldi	r24, 0x01	; 1
    2d54:	80 93 ae 02 	sts	0x02AE, r24
	 __key_lgtcnt = 0; 
    2d58:	10 92 af 02 	sts	0x02AF, r1
	 PORTG=PORTG&0b11111101;
    2d5c:	e5 e6       	ldi	r30, 0x65	; 101
    2d5e:	f0 e0       	ldi	r31, 0x00	; 0
    2d60:	80 81       	ld	r24, Z
    2d62:	8d 7f       	andi	r24, 0xFD	; 253
    2d64:	80 83       	st	Z, r24
}
    2d66:	08 95       	ret

00002d68 <GetBaudrate>:
	 }
}

int GetBaudrate(char brSetting){
int Result=0;
     switch(brSetting){
    2d68:	82 30       	cpi	r24, 0x02	; 2
    2d6a:	59 f0       	breq	.+22     	; 0x2d82 <GetBaudrate+0x1a>
    2d6c:	82 30       	cpi	r24, 0x02	; 2
    2d6e:	18 f0       	brcs	.+6      	; 0x2d76 <GetBaudrate+0xe>
    2d70:	83 30       	cpi	r24, 0x03	; 3
    2d72:	21 f4       	brne	.+8      	; 0x2d7c <GetBaudrate+0x14>
    2d74:	09 c0       	rjmp	.+18     	; 0x2d88 <GetBaudrate+0x20>
    2d76:	20 e8       	ldi	r18, 0x80	; 128
    2d78:	35 e2       	ldi	r19, 0x25	; 37
    2d7a:	08 c0       	rjmp	.+16     	; 0x2d8c <GetBaudrate+0x24>
    2d7c:	20 e0       	ldi	r18, 0x00	; 0
    2d7e:	30 e0       	ldi	r19, 0x00	; 0
    2d80:	05 c0       	rjmp	.+10     	; 0x2d8c <GetBaudrate+0x24>
    2d82:	20 e0       	ldi	r18, 0x00	; 0
    2d84:	3b e4       	ldi	r19, 0x4B	; 75
    2d86:	02 c0       	rjmp	.+4      	; 0x2d8c <GetBaudrate+0x24>
	 case br9600: 
	      Result=9600;
	      break;
	 case br19200:
	      Result=19200;
	      break;
    2d88:	2b e9       	ldi	r18, 0x9B	; 155
    2d8a:	36 e1       	ldi	r19, 0x16	; 22
	 case br5787:
	      Result=5787;
     	  break;	 
	 }
   return Result;
}
    2d8c:	c9 01       	movw	r24, r18
    2d8e:	08 95       	ret

00002d90 <InitStandalone>:
	      RunInitStandalone=False;
	      break;
	 }
  }
  */
}
    2d90:	08 95       	ret

00002d92 <DisplayQueueFIP>:


void DisplayQueueFIP(){// FIP:#1#2#3#4#5

}
    2d92:	08 95       	ret

00002d94 <ShowMessage>:
	 }
}

void ShowMessage(char *Message){//Display Message on Line3
     char i;
}
    2d94:	08 95       	ret

00002d96 <CalcLRC>:

char CalcLRC(char xLRC,char DataIn){
     char Result;
	 Result=xLRC^DataIn;
     return(Result);
}
    2d96:	86 27       	eor	r24, r22
    2d98:	08 95       	ret

00002d9a <systemEDC>:
}

void systemEDC(){//EDC Handler
     

}
    2d9a:	08 95       	ret

00002d9c <GeniusCalc>:


char GeniusCalc(char cOption, char valA, char valB){
     char valC_H,valC_L,xValA,xValB,Result;
	 Result=0;
     switch(cOption){
    2d9c:	88 23       	and	r24, r24
    2d9e:	19 f0       	breq	.+6      	; 0x2da6 <GeniusCalc+0xa>
    2da0:	81 30       	cpi	r24, 0x01	; 1
    2da2:	49 f5       	brne	.+82     	; 0x2df6 <GeniusCalc+0x5a>
    2da4:	11 c0       	rjmp	.+34     	; 0x2dc8 <GeniusCalc+0x2c>
	 case G_PLUS:                  // 5 + 8 = 1 + 3 = 4
	      valC_H=(valA+valB)/10;   //  
    2da6:	26 2f       	mov	r18, r22
    2da8:	30 e0       	ldi	r19, 0x00	; 0
    2daa:	24 0f       	add	r18, r20
    2dac:	31 1d       	adc	r19, r1
		  valC_L=(valA+valB)%10;   //
	      Result=valC_H+valC_L;
    2dae:	c9 01       	movw	r24, r18
    2db0:	6a e0       	ldi	r22, 0x0A	; 10
    2db2:	70 e0       	ldi	r23, 0x00	; 0
    2db4:	0e 94 79 aa 	call	0x154f2	; 0x154f2 <__divmodhi4>
    2db8:	48 2f       	mov	r20, r24
    2dba:	c9 01       	movw	r24, r18
    2dbc:	6a e0       	ldi	r22, 0x0A	; 10
    2dbe:	70 e0       	ldi	r23, 0x00	; 0
    2dc0:	0e 94 79 aa 	call	0x154f2	; 0x154f2 <__divmodhi4>
    2dc4:	46 0f       	add	r20, r22
    2dc6:	18 c0       	rjmp	.+48     	; 0x2df8 <GeniusCalc+0x5c>
	      break;
	 case G_MULTY:                 
	      if (valA>0)xValA=valA;
    2dc8:	66 23       	and	r22, r22
    2dca:	09 f4       	brne	.+2      	; 0x2dce <GeniusCalc+0x32>
    2dcc:	61 e0       	ldi	r22, 0x01	; 1
		  else xValA=1;
	      if (valB>0)xValB=valB;
    2dce:	44 23       	and	r20, r20
    2dd0:	09 f4       	brne	.+2      	; 0x2dd4 <GeniusCalc+0x38>
    2dd2:	41 e0       	ldi	r20, 0x01	; 1
		  else xValB=1;
	      valC_H=(xValA*xValB)/10;   //  
    2dd4:	46 9f       	mul	r20, r22
    2dd6:	90 01       	movw	r18, r0
    2dd8:	11 24       	eor	r1, r1
    2dda:	c9 01       	movw	r24, r18
    2ddc:	6a e0       	ldi	r22, 0x0A	; 10
    2dde:	70 e0       	ldi	r23, 0x00	; 0
    2de0:	0e 94 79 aa 	call	0x154f2	; 0x154f2 <__divmodhi4>
    2de4:	46 2f       	mov	r20, r22
		  valC_L=(xValA*xValB)%10;   //
    2de6:	c9 01       	movw	r24, r18
    2de8:	6a e0       	ldi	r22, 0x0A	; 10
    2dea:	70 e0       	ldi	r23, 0x00	; 0
    2dec:	0e 94 79 aa 	call	0x154f2	; 0x154f2 <__divmodhi4>
    2df0:	64 2f       	mov	r22, r20
    2df2:	48 2f       	mov	r20, r24
    2df4:	d8 cf       	rjmp	.-80     	; 0x2da6 <GeniusCalc+0xa>
    2df6:	40 e0       	ldi	r20, 0x00	; 0
	 case G_MINUS:
	      
	      break;
	 }
   return Result;
}
    2df8:	84 2f       	mov	r24, r20
    2dfa:	08 95       	ret

00002dfc <FSubMenuAdmin>:

char FSubMenuAdmin(){
     char Result;
	 Result=MENU_DONE;
   return Result;
}
    2dfc:	81 e0       	ldi	r24, 0x01	; 1
    2dfe:	08 95       	ret

00002e00 <CountNoPumpSatus>:
	      break;	 
	 } 
   return Result;
}

char CountNoPumpSatus(char *strPumpStatusTotalizer){
    2e00:	ff 92       	push	r15
    2e02:	0f 93       	push	r16
    2e04:	1f 93       	push	r17
    2e06:	cf 93       	push	r28
    2e08:	df 93       	push	r29
char i,Result;
     Result=0;
	 for (i=0;i<PumpCountMax;i++){
    2e0a:	f0 90 5c 01 	lds	r15, 0x015C
    2e0e:	ec 01       	movw	r28, r24
    2e10:	00 e0       	ldi	r16, 0x00	; 0
    2e12:	10 e0       	ldi	r17, 0x00	; 0
    2e14:	09 c0       	rjmp	.+18     	; 0x2e28 <CountNoPumpSatus+0x28>
	      if (strPumpStatusTotalizer[i]==GetPumpStatusLabel(PUMP_NONE)){
    2e16:	8e e0       	ldi	r24, 0x0E	; 14
    2e18:	0e 94 41 14 	call	0x2882	; 0x2882 <GetPumpStatusLabel>
    2e1c:	98 81       	ld	r25, Y
    2e1e:	98 17       	cp	r25, r24
    2e20:	09 f4       	brne	.+2      	; 0x2e24 <CountNoPumpSatus+0x24>
		      Result++;		  
    2e22:	1f 5f       	subi	r17, 0xFF	; 255
}

char CountNoPumpSatus(char *strPumpStatusTotalizer){
char i,Result;
     Result=0;
	 for (i=0;i<PumpCountMax;i++){
    2e24:	0f 5f       	subi	r16, 0xFF	; 255
    2e26:	21 96       	adiw	r28, 0x01	; 1
    2e28:	0f 15       	cp	r16, r15
    2e2a:	a8 f3       	brcs	.-22     	; 0x2e16 <CountNoPumpSatus+0x16>
	      if (strPumpStatusTotalizer[i]==GetPumpStatusLabel(PUMP_NONE)){
		      Result++;		  
		  }	 
	 }
  return Result;
}
    2e2c:	81 2f       	mov	r24, r17
    2e2e:	df 91       	pop	r29
    2e30:	cf 91       	pop	r28
    2e32:	1f 91       	pop	r17
    2e34:	0f 91       	pop	r16
    2e36:	ff 90       	pop	r15
    2e38:	08 95       	ret

00002e3a <FCloseDay>:
   return Result;
}

char FCloseDay(){

}
    2e3a:	08 95       	ret

00002e3c <FLockPump>:
char FLockPump(){

}
    2e3c:	08 95       	ret

00002e3e <FMenuSettingPassword>:
char FMenuSettingPassword(){
     char Result;
   //_menu_password();
   Result=MENU_DONE;
   return Result;
}
    2e3e:	81 e0       	ldi	r24, 0x01	; 1
    2e40:	08 95       	ret

00002e42 <menu_product>:
   return Result;
}

void menu_product(){

}
    2e42:	08 95       	ret

00002e44 <IncValue>:
            lcd_print(xPos,yPos,strLabel);
		}
	}
}

void IncValue(char *Value,char MinValue,char MaxValue){
    2e44:	fc 01       	movw	r30, r24
     if ((*Value)<MaxValue){
    2e46:	80 81       	ld	r24, Z
    2e48:	84 17       	cp	r24, r20
    2e4a:	18 f4       	brcc	.+6      	; 0x2e52 <IncValue+0xe>
	     (*Value)++;
    2e4c:	8f 5f       	subi	r24, 0xFF	; 255
    2e4e:	80 83       	st	Z, r24
    2e50:	08 95       	ret
	 }else *Value=MinValue;
    2e52:	60 83       	st	Z, r22
    2e54:	08 95       	ret

00002e56 <DecValue>:
}

void DecValue(char *Value,char MinValue,char MaxValue){
    2e56:	fc 01       	movw	r30, r24
     if ((*Value)>MinValue){
    2e58:	80 81       	ld	r24, Z
    2e5a:	68 17       	cp	r22, r24
    2e5c:	18 f4       	brcc	.+6      	; 0x2e64 <DecValue+0xe>
	     (*Value)--;
    2e5e:	81 50       	subi	r24, 0x01	; 1
    2e60:	80 83       	st	Z, r24
    2e62:	08 95       	ret
	 }else *Value=MaxValue;
    2e64:	40 83       	st	Z, r20
    2e66:	08 95       	ret

00002e68 <zeroIP>:
		 
		}

	}
}
void zeroIP(unsigned char Val,char *StrResult){
    2e68:	58 2f       	mov	r21, r24
    2e6a:	fb 01       	movw	r30, r22
     unsigned char R,P,S;
	 if (Val>=100){
    2e6c:	84 36       	cpi	r24, 0x64	; 100
    2e6e:	00 f1       	brcs	.+64     	; 0x2eb0 <zeroIP+0x48>
	    R=(Val/100);
    2e70:	64 e6       	ldi	r22, 0x64	; 100
    2e72:	0e 94 4c aa 	call	0x15498	; 0x15498 <__udivmodqi4>
    2e76:	48 2f       	mov	r20, r24
        P=((Val%100)/10);
    2e78:	85 2f       	mov	r24, r21
    2e7a:	0e 94 4c aa 	call	0x15498	; 0x15498 <__udivmodqi4>
    2e7e:	89 2f       	mov	r24, r25
    2e80:	6a e0       	ldi	r22, 0x0A	; 10
    2e82:	0e 94 4c aa 	call	0x15498	; 0x15498 <__udivmodqi4>
		S=Val-((R*100)+(P*10)); 
        StrResult[0]='0'+R;//+(Val/100);
    2e86:	40 5d       	subi	r20, 0xD0	; 208
    2e88:	40 83       	st	Z, r20
    2e8a:	40 53       	subi	r20, 0x30	; 48
	    StrResult[1]='0'+P;//+((Val%100)/10);
    2e8c:	80 5d       	subi	r24, 0xD0	; 208
    2e8e:	81 83       	std	Z+1, r24	; 0x01
    2e90:	80 53       	subi	r24, 0x30	; 48
		StrResult[2]='0'+S;//+(Val-((Val/100)*100)-((Val%100)/10));
    2e92:	50 5d       	subi	r21, 0xD0	; 208
    2e94:	2c e9       	ldi	r18, 0x9C	; 156
    2e96:	3f ef       	ldi	r19, 0xFF	; 255
    2e98:	42 9f       	mul	r20, r18
    2e9a:	40 2d       	mov	r20, r0
    2e9c:	11 24       	eor	r1, r1
    2e9e:	45 0f       	add	r20, r21
    2ea0:	26 ef       	ldi	r18, 0xF6	; 246
    2ea2:	3f ef       	ldi	r19, 0xFF	; 255
    2ea4:	82 9f       	mul	r24, r18
    2ea6:	80 2d       	mov	r24, r0
    2ea8:	11 24       	eor	r1, r1
    2eaa:	84 0f       	add	r24, r20
    2eac:	82 83       	std	Z+2, r24	; 0x02
    2eae:	10 c0       	rjmp	.+32     	; 0x2ed0 <zeroIP+0x68>
		StrResult[3]=0;
		}else     
	 if ((Val>=10)&&(Val<100)){
    2eb0:	8a 50       	subi	r24, 0x0A	; 10
    2eb2:	8a 35       	cpi	r24, 0x5A	; 90
    2eb4:	78 f4       	brcc	.+30     	; 0x2ed4 <zeroIP+0x6c>
        StrResult[0]='0';
    2eb6:	80 e3       	ldi	r24, 0x30	; 48
    2eb8:	80 83       	st	Z, r24
	    StrResult[1]=('0'+(Val/10));
    2eba:	85 2f       	mov	r24, r21
    2ebc:	6a e0       	ldi	r22, 0x0A	; 10
    2ebe:	0e 94 4c aa 	call	0x15498	; 0x15498 <__udivmodqi4>
    2ec2:	80 5d       	subi	r24, 0xD0	; 208
    2ec4:	81 83       	std	Z+1, r24	; 0x01
		StrResult[2]=('0'+(Val%10));
    2ec6:	85 2f       	mov	r24, r21
    2ec8:	0e 94 4c aa 	call	0x15498	; 0x15498 <__udivmodqi4>
    2ecc:	90 5d       	subi	r25, 0xD0	; 208
    2ece:	92 83       	std	Z+2, r25	; 0x02
		StrResult[3]=0;
    2ed0:	13 82       	std	Z+3, r1	; 0x03
    2ed2:	08 95       	ret
		}
     else
	 if (Val<10){
    2ed4:	5a 30       	cpi	r21, 0x0A	; 10
    2ed6:	30 f4       	brcc	.+12     	; 0x2ee4 <zeroIP+0x7c>
	    StrResult[0]='0';
    2ed8:	80 e3       	ldi	r24, 0x30	; 48
    2eda:	80 83       	st	Z, r24
		StrResult[1]='0';
    2edc:	81 83       	std	Z+1, r24	; 0x01
	    StrResult[2]='0'+Val;
    2ede:	50 5d       	subi	r21, 0xD0	; 208
    2ee0:	52 83       	std	Z+2, r21	; 0x02
	    StrResult[3]=0;
    2ee2:	13 82       	std	Z+3, r1	; 0x03
    2ee4:	08 95       	ret

00002ee6 <GetLocAccStatus>:


char GetLocAccStatus(char paramMessage57){
     char Result;
	 Result=LA_NONE;
     if (paramMessage57==MSG57_INVALID)Result=LA_INVALID;
    2ee6:	81 30       	cpi	r24, 0x01	; 1
    2ee8:	29 f0       	breq	.+10     	; 0x2ef4 <GetLocAccStatus+0xe>
	 else
     if (paramMessage57==MSG57_VALID)Result=LA_VALID;
    2eea:	82 30       	cpi	r24, 0x02	; 2
    2eec:	19 f0       	breq	.+6      	; 0x2ef4 <GetLocAccStatus+0xe>
	 else
     if (paramMessage57==MSG57_LIMITED)Result=LA_LIMITED;
    2eee:	83 30       	cpi	r24, 0x03	; 3
    2ef0:	09 f0       	breq	.+2      	; 0x2ef4 <GetLocAccStatus+0xe>
    2ef2:	80 e0       	ldi	r24, 0x00	; 0
	 return Result;
}
    2ef4:	08 95       	ret

00002ef6 <FTestRemZero>:
	     RemZeroLead(strTest);  
		 uart_print(0,1,strTest);

	while (1){};
  #endif
}
    2ef6:	08 95       	ret

00002ef8 <StrPosCopy>:
     nAddedSpace=(Length-srcLength)/2;
     AddSpaceLead(Source,srcLength+nAddedSpace);
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
    2ef8:	cf 93       	push	r28
    2efa:	df 93       	push	r29
    2efc:	eb 01       	movw	r28, r22
    2efe:	da 01       	movw	r26, r20
    2f00:	a8 0f       	add	r26, r24
    2f02:	b9 1f       	adc	r27, r25
    2f04:	40 e0       	ldi	r20, 0x00	; 0
    2f06:	50 e0       	ldi	r21, 0x00	; 0
    2f08:	07 c0       	rjmp	.+14     	; 0x2f18 <StrPosCopy+0x20>
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    2f0a:	fe 01       	movw	r30, r28
    2f0c:	e4 0f       	add	r30, r20
    2f0e:	f5 1f       	adc	r31, r21
    2f10:	8d 91       	ld	r24, X+
    2f12:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    2f14:	4f 5f       	subi	r20, 0xFF	; 255
    2f16:	5f 4f       	sbci	r21, 0xFF	; 255
    2f18:	42 17       	cp	r20, r18
    2f1a:	53 07       	cpc	r21, r19
    2f1c:	b0 f3       	brcs	.-20     	; 0x2f0a <StrPosCopy+0x12>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    2f1e:	c2 0f       	add	r28, r18
    2f20:	d3 1f       	adc	r29, r19
    2f22:	18 82       	st	Y, r1
}
    2f24:	df 91       	pop	r29
    2f26:	cf 91       	pop	r28
    2f28:	08 95       	ret

00002f2a <StrPosPaste>:
void StrPosPaste(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
    2f2a:	0f 93       	push	r16
    2f2c:	1f 93       	push	r17
    2f2e:	cf 93       	push	r28
    2f30:	df 93       	push	r29
    2f32:	8c 01       	movw	r16, r24
    2f34:	db 01       	movw	r26, r22
    2f36:	eb 01       	movw	r28, r22
    2f38:	c4 0f       	add	r28, r20
    2f3a:	d5 1f       	adc	r29, r21
    2f3c:	60 e0       	ldi	r22, 0x00	; 0
    2f3e:	70 e0       	ldi	r23, 0x00	; 0
    2f40:	07 c0       	rjmp	.+14     	; 0x2f50 <StrPosPaste+0x26>
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[IdxSource+i]=Source[i];
    2f42:	f8 01       	movw	r30, r16
    2f44:	e6 0f       	add	r30, r22
    2f46:	f7 1f       	adc	r31, r23
    2f48:	80 81       	ld	r24, Z
    2f4a:	89 93       	st	Y+, r24
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
}
void StrPosPaste(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    2f4c:	6f 5f       	subi	r22, 0xFF	; 255
    2f4e:	7f 4f       	sbci	r23, 0xFF	; 255
    2f50:	62 17       	cp	r22, r18
    2f52:	73 07       	cpc	r23, r19
    2f54:	b0 f3       	brcs	.-20     	; 0x2f42 <StrPosPaste+0x18>
	    Dest[IdxSource+i]=Source[i];
	 }Dest[IdxSource+Length]=0;
    2f56:	a4 0f       	add	r26, r20
    2f58:	b5 1f       	adc	r27, r21
    2f5a:	a2 0f       	add	r26, r18
    2f5c:	b3 1f       	adc	r27, r19
    2f5e:	1c 92       	st	X, r1
}
    2f60:	df 91       	pop	r29
    2f62:	cf 91       	pop	r28
    2f64:	1f 91       	pop	r17
    2f66:	0f 91       	pop	r16
    2f68:	08 95       	ret

00002f6a <CharPosCopy>:
char CharPosCopy(char *Source, unsigned int IdxSource){
    2f6a:	fb 01       	movw	r30, r22
    2f6c:	e8 0f       	add	r30, r24
    2f6e:	f9 1f       	adc	r31, r25
     char Result;
     Result=Source[IdxSource];
	 return Result;
}
    2f70:	80 81       	ld	r24, Z
    2f72:	08 95       	ret

00002f74 <procMessage00>:
*/
char procMessage00(){
     char Result,strSend[10];
	 Result=MSG00_NACK;
	 //Message57
	 if((rcv_trans[0]==0x01)&&(transLength==MSG00_LENGTH)){
    2f74:	80 91 9f 09 	lds	r24, 0x099F
    2f78:	81 30       	cpi	r24, 0x01	; 1
    2f7a:	51 f4       	brne	.+20     	; 0x2f90 <procMessage00+0x1c>
    2f7c:	80 91 8b 01 	lds	r24, 0x018B
    2f80:	90 91 8c 01 	lds	r25, 0x018C
    2f84:	8f 97       	sbiw	r24, 0x2f	; 47
    2f86:	21 f4       	brne	.+8      	; 0x2f90 <procMessage00+0x1c>
	     //Reply
		 Result=(CharPosCopy(rcv_trans,37)-'0');
    2f88:	80 91 c4 09 	lds	r24, 0x09C4
    2f8c:	80 53       	subi	r24, 0x30	; 48
    2f8e:	08 95       	ret
    2f90:	80 e0       	ldi	r24, 0x00	; 0
		 //sprintf(strSend,"R=%d",Result);
		 //uart_print(0,1,strSend);
		 //*/
		 }
     return Result;
}
    2f92:	08 95       	ret

00002f94 <procMessage09>:
	    Dest[IdxSource+i]=Source[i];
	 }Dest[IdxSource+Length]=0;
}
char CharPosCopy(char *Source, unsigned int IdxSource){
     char Result;
     Result=Source[IdxSource];
    2f94:	90 91 c6 09 	lds	r25, 0x09C6
    2f98:	20 e0       	ldi	r18, 0x00	; 0
    2f9a:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    2f9c:	f9 01       	movw	r30, r18
    2f9e:	ec 5e       	subi	r30, 0xEC	; 236
    2fa0:	f6 4f       	sbci	r31, 0xF6	; 246
    2fa2:	d9 01       	movw	r26, r18
    2fa4:	a1 56       	subi	r26, 0x61	; 97
    2fa6:	b6 4f       	sbci	r27, 0xF6	; 246
    2fa8:	97 96       	adiw	r26, 0x27	; 39
    2faa:	8c 91       	ld	r24, X
    2fac:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    2fae:	2f 5f       	subi	r18, 0xFF	; 255
    2fb0:	3f 4f       	sbci	r19, 0xFF	; 255
    2fb2:	24 31       	cpi	r18, 0x14	; 20
    2fb4:	31 05       	cpc	r19, r1
    2fb6:	91 f7       	brne	.-28     	; 0x2f9c <procMessage09+0x8>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    2fb8:	10 92 28 09 	sts	0x0928, r1
    2fbc:	20 e0       	ldi	r18, 0x00	; 0
    2fbe:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    2fc0:	f9 01       	movw	r30, r18
    2fc2:	eb 5d       	subi	r30, 0xDB	; 219
    2fc4:	f7 4f       	sbci	r31, 0xF7	; 247
    2fc6:	d9 01       	movw	r26, r18
    2fc8:	a1 56       	subi	r26, 0x61	; 97
    2fca:	b6 4f       	sbci	r27, 0xF6	; 246
    2fcc:	db 96       	adiw	r26, 0x3b	; 59
    2fce:	8c 91       	ld	r24, X
    2fd0:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    2fd2:	2f 5f       	subi	r18, 0xFF	; 255
    2fd4:	3f 4f       	sbci	r19, 0xFF	; 255
    2fd6:	24 31       	cpi	r18, 0x14	; 20
    2fd8:	31 05       	cpc	r19, r1
    2fda:	91 f7       	brne	.-28     	; 0x2fc0 <procMessage09+0x2c>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    2fdc:	10 92 39 08 	sts	0x0839, r1
    2fe0:	20 e0       	ldi	r18, 0x00	; 0
    2fe2:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    2fe4:	f9 01       	movw	r30, r18
    2fe6:	e2 56       	subi	r30, 0x62	; 98
    2fe8:	f7 4f       	sbci	r31, 0xF7	; 247
    2fea:	d9 01       	movw	r26, r18
    2fec:	a2 51       	subi	r26, 0x12	; 18
    2fee:	b6 4f       	sbci	r27, 0xF6	; 246
    2ff0:	8c 91       	ld	r24, X
    2ff2:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    2ff4:	2f 5f       	subi	r18, 0xFF	; 255
    2ff6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ff8:	24 31       	cpi	r18, 0x14	; 20
    2ffa:	31 05       	cpc	r19, r1
    2ffc:	99 f7       	brne	.-26     	; 0x2fe4 <procMessage09+0x50>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    2ffe:	10 92 b2 08 	sts	0x08B2, r1
    3002:	20 e0       	ldi	r18, 0x00	; 0
    3004:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    3006:	f9 01       	movw	r30, r18
    3008:	e8 5a       	subi	r30, 0xA8	; 168
    300a:	f3 4f       	sbci	r31, 0xF3	; 243
    300c:	d9 01       	movw	r26, r18
    300e:	ae 5f       	subi	r26, 0xFE	; 254
    3010:	b5 4f       	sbci	r27, 0xF5	; 245
    3012:	8c 91       	ld	r24, X
    3014:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    3016:	2f 5f       	subi	r18, 0xFF	; 255
    3018:	3f 4f       	sbci	r19, 0xFF	; 255
    301a:	24 31       	cpi	r18, 0x14	; 20
    301c:	31 05       	cpc	r19, r1
    301e:	99 f7       	brne	.-26     	; 0x3006 <procMessage09+0x72>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    3020:	10 92 6c 0c 	sts	0x0C6C, r1
       StrPosCopy(rcv_trans,strFreeMessageLine1,39,20);
       StrPosCopy(rcv_trans,strFreeMessageLine2,59,20);
       StrPosCopy(rcv_trans,strFreeMessageLine3,79,20);
       StrPosCopy(rcv_trans,strFreeMessageLine4,99,20);
	 return Result;
}
    3024:	89 2f       	mov	r24, r25
    3026:	80 53       	subi	r24, 0x30	; 48
    3028:	08 95       	ret

0000302a <procMessage23>:
		 eeprom_write_block((const void*)&strBankName, (void*)&DefBankName[i], 11);
	 }
	 return Result;
}

char procMessage23(){
    302a:	20 e0       	ldi	r18, 0x00	; 0
    302c:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    302e:	f9 01       	movw	r30, r18
    3030:	e5 5f       	subi	r30, 0xF5	; 245
    3032:	f3 4f       	sbci	r31, 0xF3	; 243
    3034:	d9 01       	movw	r26, r18
    3036:	a1 56       	subi	r26, 0x61	; 97
    3038:	b6 4f       	sbci	r27, 0xF6	; 246
    303a:	95 96       	adiw	r26, 0x25	; 37
    303c:	8c 91       	ld	r24, X
    303e:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    3040:	2f 5f       	subi	r18, 0xFF	; 255
    3042:	3f 4f       	sbci	r19, 0xFF	; 255
    3044:	24 31       	cpi	r18, 0x14	; 20
    3046:	31 05       	cpc	r19, r1
    3048:	91 f7       	brne	.-28     	; 0x302e <procMessage23+0x4>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    304a:	10 92 1f 0c 	sts	0x0C1F, r1
    304e:	20 e0       	ldi	r18, 0x00	; 0
    3050:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    3052:	f9 01       	movw	r30, r18
    3054:	ea 55       	subi	r30, 0x5A	; 90
    3056:	fc 4f       	sbci	r31, 0xFC	; 252
    3058:	d9 01       	movw	r26, r18
    305a:	a1 56       	subi	r26, 0x61	; 97
    305c:	b6 4f       	sbci	r27, 0xF6	; 246
    305e:	d9 96       	adiw	r26, 0x39	; 57
    3060:	8c 91       	ld	r24, X
    3062:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    3064:	2f 5f       	subi	r18, 0xFF	; 255
    3066:	3f 4f       	sbci	r19, 0xFF	; 255
    3068:	2e 31       	cpi	r18, 0x1E	; 30
    306a:	31 05       	cpc	r19, r1
    306c:	91 f7       	brne	.-28     	; 0x3052 <procMessage23+0x28>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    306e:	10 92 c4 03 	sts	0x03C4, r1
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    3072:	80 91 f6 09 	lds	r24, 0x09F6
    3076:	80 93 0c 04 	sts	0x040C, r24
	 }Dest[Length]=0;
    307a:	10 92 0d 04 	sts	0x040D, r1
    307e:	20 e0       	ldi	r18, 0x00	; 0
    3080:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    3082:	f9 01       	movw	r30, r18
    3084:	e9 54       	subi	r30, 0x49	; 73
    3086:	f7 4f       	sbci	r31, 0xF7	; 247
    3088:	d9 01       	movw	r26, r18
    308a:	a9 50       	subi	r26, 0x09	; 9
    308c:	b6 4f       	sbci	r27, 0xF6	; 246
    308e:	8c 91       	ld	r24, X
    3090:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    3092:	2f 5f       	subi	r18, 0xFF	; 255
    3094:	3f 4f       	sbci	r19, 0xFF	; 255
    3096:	28 30       	cpi	r18, 0x08	; 8
    3098:	31 05       	cpc	r19, r1
    309a:	99 f7       	brne	.-26     	; 0x3082 <procMessage23+0x58>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    309c:	10 92 bf 08 	sts	0x08BF, r1
    30a0:	20 e0       	ldi	r18, 0x00	; 0
    30a2:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    30a4:	f9 01       	movw	r30, r18
    30a6:	e0 50       	subi	r30, 0x00	; 0
    30a8:	fc 4f       	sbci	r31, 0xFC	; 252
    30aa:	d9 01       	movw	r26, r18
    30ac:	a1 50       	subi	r26, 0x01	; 1
    30ae:	b6 4f       	sbci	r27, 0xF6	; 246
    30b0:	8c 91       	ld	r24, X
    30b2:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    30b4:	2f 5f       	subi	r18, 0xFF	; 255
    30b6:	3f 4f       	sbci	r19, 0xFF	; 255
    30b8:	2a 30       	cpi	r18, 0x0A	; 10
    30ba:	31 05       	cpc	r19, r1
    30bc:	99 f7       	brne	.-26     	; 0x30a4 <procMessage23+0x7a>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    30be:	10 92 0a 04 	sts	0x040A, r1
    30c2:	20 e0       	ldi	r18, 0x00	; 0
    30c4:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    30c6:	f9 01       	movw	r30, r18
    30c8:	e1 59       	subi	r30, 0x91	; 145
    30ca:	f3 4f       	sbci	r31, 0xF3	; 243
    30cc:	d9 01       	movw	r26, r18
    30ce:	a7 5f       	subi	r26, 0xF7	; 247
    30d0:	b5 4f       	sbci	r27, 0xF5	; 245
    30d2:	8c 91       	ld	r24, X
    30d4:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    30d6:	2f 5f       	subi	r18, 0xFF	; 255
    30d8:	3f 4f       	sbci	r19, 0xFF	; 255
    30da:	2a 30       	cpi	r18, 0x0A	; 10
    30dc:	31 05       	cpc	r19, r1
    30de:	99 f7       	brne	.-26     	; 0x30c6 <procMessage23+0x9c>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    30e0:	10 92 79 0c 	sts	0x0C79, r1
    30e4:	20 e0       	ldi	r18, 0x00	; 0
    30e6:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    30e8:	f9 01       	movw	r30, r18
    30ea:	ef 5b       	subi	r30, 0xBF	; 191
    30ec:	f3 4f       	sbci	r31, 0xF3	; 243
    30ee:	d9 01       	movw	r26, r18
    30f0:	ad 5e       	subi	r26, 0xED	; 237
    30f2:	b5 4f       	sbci	r27, 0xF5	; 245
    30f4:	8c 91       	ld	r24, X
    30f6:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    30f8:	2f 5f       	subi	r18, 0xFF	; 255
    30fa:	3f 4f       	sbci	r19, 0xFF	; 255
    30fc:	23 31       	cpi	r18, 0x13	; 19
    30fe:	31 05       	cpc	r19, r1
    3100:	99 f7       	brne	.-26     	; 0x30e8 <procMessage23+0xbe>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    3102:	10 92 54 0c 	sts	0x0C54, r1
    3106:	20 e0       	ldi	r18, 0x00	; 0
    3108:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    310a:	f9 01       	movw	r30, r18
    310c:	eb 5c       	subi	r30, 0xCB	; 203
    310e:	f3 4f       	sbci	r31, 0xF3	; 243
    3110:	d9 01       	movw	r26, r18
    3112:	aa 5d       	subi	r26, 0xDA	; 218
    3114:	b5 4f       	sbci	r27, 0xF5	; 245
    3116:	8c 91       	ld	r24, X
    3118:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    311a:	2f 5f       	subi	r18, 0xFF	; 255
    311c:	3f 4f       	sbci	r19, 0xFF	; 255
    311e:	27 30       	cpi	r18, 0x07	; 7
    3120:	31 05       	cpc	r19, r1
    3122:	99 f7       	brne	.-26     	; 0x310a <procMessage23+0xe0>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    3124:	10 92 3c 0c 	sts	0x0C3C, r1
    3128:	20 e0       	ldi	r18, 0x00	; 0
    312a:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    312c:	f9 01       	movw	r30, r18
    312e:	e5 54       	subi	r30, 0x45	; 69
    3130:	fd 4f       	sbci	r31, 0xFD	; 253
    3132:	d9 01       	movw	r26, r18
    3134:	a3 5d       	subi	r26, 0xD3	; 211
    3136:	b5 4f       	sbci	r27, 0xF5	; 245
    3138:	8c 91       	ld	r24, X
    313a:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    313c:	2f 5f       	subi	r18, 0xFF	; 255
    313e:	3f 4f       	sbci	r19, 0xFF	; 255
    3140:	24 30       	cpi	r18, 0x04	; 4
    3142:	31 05       	cpc	r19, r1
    3144:	99 f7       	brne	.-26     	; 0x312c <procMessage23+0x102>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    3146:	10 92 bf 02 	sts	0x02BF, r1
     StrPosCopy(rcv_trans,strLoyCurrMonConsumeV,106,10);
     StrPosCopy(rcv_trans,strDateTime,116,19);
     StrPosCopy(rcv_trans,strAmount,135,7);
     StrPosCopy(rcv_trans,strGainPoints,142,4);
     return Result;
}
    314a:	80 e0       	ldi	r24, 0x00	; 0
    314c:	08 95       	ret

0000314e <procMessage81>:
uart_print(0,1,strCardID);
*/	
     return Result;
}

char procMessage81(){// Result: HFCS0000
    314e:	cf 93       	push	r28
    3150:	df 93       	push	r29
     char Result=0,PrintCopy=0;//
	 char lcdteks[20];
	 //PrintHeader
     if ((CharPosCopy(rcv_trans,37))=='Y') Result=(Result|(1<<7));
    3152:	80 91 c4 09 	lds	r24, 0x09C4
    3156:	89 35       	cpi	r24, 0x59	; 89
    3158:	11 f4       	brne	.+4      	; 0x315e <procMessage81+0x10>
    315a:	90 e8       	ldi	r25, 0x80	; 128
    315c:	01 c0       	rjmp	.+2      	; 0x3160 <procMessage81+0x12>
    315e:	90 e0       	ldi	r25, 0x00	; 0
     //PrintFooter
	 if ((CharPosCopy(rcv_trans,38))=='Y') Result=(Result|(1<<6));
    3160:	80 91 c5 09 	lds	r24, 0x09C5
    3164:	89 35       	cpi	r24, 0x59	; 89
    3166:	09 f4       	brne	.+2      	; 0x316a <procMessage81+0x1c>
    3168:	90 64       	ori	r25, 0x40	; 64
	 //PaperCut
     if ((CharPosCopy(rcv_trans,39))=='Y') Result=(Result|(1<<5));
    316a:	80 91 c6 09 	lds	r24, 0x09C6
    316e:	89 35       	cpi	r24, 0x59	; 89
    3170:	09 f4       	brne	.+2      	; 0x3174 <procMessage81+0x26>
    3172:	90 62       	ori	r25, 0x20	; 32
	 //Scrool
	 Result=(Result|(1<<4));
    3174:	90 61       	ori	r25, 0x10	; 16

	 //Copies
	 PrintCopy=(CharPosCopy(rcv_trans,40)-'0');
    3176:	80 91 c7 09 	lds	r24, 0x09C7
    317a:	80 53       	subi	r24, 0x30	; 48
     if (PrintCopy<=16) Result=Result|PrintCopy;
    317c:	81 31       	cpi	r24, 0x11	; 17
    317e:	08 f4       	brcc	.+2      	; 0x3182 <procMessage81+0x34>
    3180:	98 2b       	or	r25, r24
	 //Spooling
     StrPosCopy(rcv_trans,PrintBuffer,44,LengthMessage81);
    3182:	c0 91 8d 01 	lds	r28, 0x018D
    3186:	d0 91 8e 01 	lds	r29, 0x018E
    318a:	20 e0       	ldi	r18, 0x00	; 0
    318c:	30 e0       	ldi	r19, 0x00	; 0
    318e:	0b c0       	rjmp	.+22     	; 0x31a6 <procMessage81+0x58>
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    3190:	f9 01       	movw	r30, r18
    3192:	e2 59       	subi	r30, 0x92	; 146
    3194:	fb 4f       	sbci	r31, 0xFB	; 251
    3196:	d9 01       	movw	r26, r18
    3198:	a1 56       	subi	r26, 0x61	; 97
    319a:	b6 4f       	sbci	r27, 0xF6	; 246
    319c:	9c 96       	adiw	r26, 0x2c	; 44
    319e:	8c 91       	ld	r24, X
    31a0:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    31a2:	2f 5f       	subi	r18, 0xFF	; 255
    31a4:	3f 4f       	sbci	r19, 0xFF	; 255
    31a6:	2c 17       	cp	r18, r28
    31a8:	3d 07       	cpc	r19, r29
    31aa:	90 f3       	brcs	.-28     	; 0x3190 <procMessage81+0x42>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    31ac:	c2 59       	subi	r28, 0x92	; 146
    31ae:	db 4f       	sbci	r29, 0xFB	; 251
    31b0:	18 82       	st	Y, r1
	 //sprintf(lcdteks,"cmdPrint:%d ",Result);
     //uart_print(0,1,lcdteks);

	 //while(1){};
	 return Result;
}
    31b2:	89 2f       	mov	r24, r25
    31b4:	df 91       	pop	r29
    31b6:	cf 91       	pop	r28
    31b8:	08 95       	ret

000031ba <FillChar>:
	 if(CutType== 1) { uart(_COM_PRINTER, 1, 0x6D);}
	 if(CutType== 2) {uart(_COM_PRINTER, 1, 0x69);}

}

void FillChar(char *strMemory, unsigned int Length,char data){
    31ba:	20 e0       	ldi	r18, 0x00	; 0
    31bc:	30 e0       	ldi	r19, 0x00	; 0
    31be:	06 c0       	rjmp	.+12     	; 0x31cc <FillChar+0x12>
     unsigned int i;
	 for (i=0;i<Length;i++){
	     strMemory[i]=data;
    31c0:	fc 01       	movw	r30, r24
    31c2:	e2 0f       	add	r30, r18
    31c4:	f3 1f       	adc	r31, r19
    31c6:	40 83       	st	Z, r20

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    31c8:	2f 5f       	subi	r18, 0xFF	; 255
    31ca:	3f 4f       	sbci	r19, 0xFF	; 255
    31cc:	26 17       	cp	r18, r22
    31ce:	37 07       	cpc	r19, r23
    31d0:	b8 f3       	brcs	.-18     	; 0x31c0 <FillChar+0x6>
	     strMemory[i]=data;
	 }
}
    31d2:	08 95       	ret

000031d4 <ProcMessage91>:

void ProcMessage91(){
    31d4:	20 e0       	ldi	r18, 0x00	; 0
    31d6:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    31d8:	f9 01       	movw	r30, r18
    31da:	e7 5f       	subi	r30, 0xF7	; 247
    31dc:	f2 4f       	sbci	r31, 0xF2	; 242
    31de:	d9 01       	movw	r26, r18
    31e0:	a1 56       	subi	r26, 0x61	; 97
    31e2:	b6 4f       	sbci	r27, 0xF6	; 246
    31e4:	95 96       	adiw	r26, 0x25	; 37
    31e6:	8c 91       	ld	r24, X
    31e8:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    31ea:	2f 5f       	subi	r18, 0xFF	; 255
    31ec:	3f 4f       	sbci	r19, 0xFF	; 255
    31ee:	26 30       	cpi	r18, 0x06	; 6
    31f0:	31 05       	cpc	r19, r1
    31f2:	91 f7       	brne	.-28     	; 0x31d8 <ProcMessage91+0x4>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    31f4:	10 92 0f 0d 	sts	0x0D0F, r1
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    31f8:	80 91 ca 09 	lds	r24, 0x09CA
    31fc:	80 93 3b 08 	sts	0x083B, r24
    3200:	80 91 cb 09 	lds	r24, 0x09CB
    3204:	80 93 3c 08 	sts	0x083C, r24
	 }Dest[Length]=0;
    3208:	10 92 3d 08 	sts	0x083D, r1
    320c:	20 e0       	ldi	r18, 0x00	; 0
    320e:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    3210:	f9 01       	movw	r30, r18
    3212:	e2 57       	subi	r30, 0x72	; 114
    3214:	f7 4f       	sbci	r31, 0xF7	; 247
    3216:	d9 01       	movw	r26, r18
    3218:	a1 56       	subi	r26, 0x61	; 97
    321a:	b6 4f       	sbci	r27, 0xF6	; 246
    321c:	9d 96       	adiw	r26, 0x2d	; 45
    321e:	8c 91       	ld	r24, X
    3220:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    3222:	2f 5f       	subi	r18, 0xFF	; 255
    3224:	3f 4f       	sbci	r19, 0xFF	; 255
    3226:	2f 30       	cpi	r18, 0x0F	; 15
    3228:	31 05       	cpc	r19, r1
    322a:	91 f7       	brne	.-28     	; 0x3210 <ProcMessage91+0x3c>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    322c:	10 92 9d 08 	sts	0x089D, r1
    3230:	20 e0       	ldi	r18, 0x00	; 0
    3232:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    3234:	f9 01       	movw	r30, r18
    3236:	e0 5e       	subi	r30, 0xE0	; 224
    3238:	f9 4f       	sbci	r31, 0xF9	; 249
    323a:	d9 01       	movw	r26, r18
    323c:	a1 56       	subi	r26, 0x61	; 97
    323e:	b6 4f       	sbci	r27, 0xF6	; 246
    3240:	dc 96       	adiw	r26, 0x3c	; 60
    3242:	8c 91       	ld	r24, X
    3244:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    3246:	2f 5f       	subi	r18, 0xFF	; 255
    3248:	3f 4f       	sbci	r19, 0xFF	; 255
    324a:	26 30       	cpi	r18, 0x06	; 6
    324c:	31 05       	cpc	r19, r1
    324e:	91 f7       	brne	.-28     	; 0x3234 <ProcMessage91+0x60>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    3250:	10 92 26 06 	sts	0x0626, r1
    3254:	20 e0       	ldi	r18, 0x00	; 0
    3256:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    3258:	f9 01       	movw	r30, r18
    325a:	e9 50       	subi	r30, 0x09	; 9
    325c:	fc 4f       	sbci	r31, 0xFC	; 252
    325e:	d9 01       	movw	r26, r18
    3260:	af 51       	subi	r26, 0x1F	; 31
    3262:	b6 4f       	sbci	r27, 0xF6	; 246
    3264:	8c 91       	ld	r24, X
    3266:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    3268:	2f 5f       	subi	r18, 0xFF	; 255
    326a:	3f 4f       	sbci	r19, 0xFF	; 255
    326c:	28 30       	cpi	r18, 0x08	; 8
    326e:	31 05       	cpc	r19, r1
    3270:	99 f7       	brne	.-26     	; 0x3258 <ProcMessage91+0x84>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    3272:	10 92 ff 03 	sts	0x03FF, r1
    3276:	20 e0       	ldi	r18, 0x00	; 0
    3278:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    327a:	f9 01       	movw	r30, r18
    327c:	eb 5c       	subi	r30, 0xCB	; 203
    327e:	f3 4f       	sbci	r31, 0xF3	; 243
    3280:	d9 01       	movw	r26, r18
    3282:	a7 51       	subi	r26, 0x17	; 23
    3284:	b6 4f       	sbci	r27, 0xF6	; 246
    3286:	8c 91       	ld	r24, X
    3288:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    328a:	2f 5f       	subi	r18, 0xFF	; 255
    328c:	3f 4f       	sbci	r19, 0xFF	; 255
    328e:	28 30       	cpi	r18, 0x08	; 8
    3290:	31 05       	cpc	r19, r1
    3292:	99 f7       	brne	.-26     	; 0x327a <ProcMessage91+0xa6>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    3294:	10 92 3d 0c 	sts	0x0C3D, r1
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    3298:	80 91 f1 09 	lds	r24, 0x09F1
    329c:	80 93 0c 04 	sts	0x040C, r24
	 }Dest[Length]=0;
    32a0:	10 92 0d 04 	sts	0x040D, r1
    32a4:	20 e0       	ldi	r18, 0x00	; 0
    32a6:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    32a8:	f9 01       	movw	r30, r18
    32aa:	e4 50       	subi	r30, 0x04	; 4
    32ac:	fd 4f       	sbci	r31, 0xFD	; 253
    32ae:	d9 01       	movw	r26, r18
    32b0:	ae 50       	subi	r26, 0x0E	; 14
    32b2:	b6 4f       	sbci	r27, 0xF6	; 246
    32b4:	8c 91       	ld	r24, X
    32b6:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    32b8:	2f 5f       	subi	r18, 0xFF	; 255
    32ba:	3f 4f       	sbci	r19, 0xFF	; 255
    32bc:	29 30       	cpi	r18, 0x09	; 9
    32be:	31 05       	cpc	r19, r1
    32c0:	99 f7       	brne	.-26     	; 0x32a8 <ProcMessage91+0xd4>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    32c2:	10 92 05 03 	sts	0x0305, r1
     StrPosCopy(rcv_trans,strPrice,60,6);
     StrPosCopy(rcv_trans,strVolume,66,8);
     StrPosCopy(rcv_trans,strAmount,74,8); 
	 StrPosCopy(rcv_trans,strStatus,82,1);
     StrPosCopy(rcv_trans,strSurcharge,83,9);    
}
    32c6:	08 95       	ret

000032c8 <IdentifyMessage>:
        //sprintf_P(strSerial,PSTR("RFID:%s"),strRFID);
        //uart_print(0,1,strSerial);
	 }
}

void IdentifyMessage(char STX,unsigned int Length){
    32c8:	1f 93       	push	r17
   if (STX==0x01){
    32ca:	81 30       	cpi	r24, 0x01	; 1
    32cc:	09 f0       	breq	.+2      	; 0x32d0 <IdentifyMessage+0x8>
    32ce:	5f c0       	rjmp	.+190    	; 0x338e <IdentifyMessage+0xc6>
	    if ((Length==MSG00_LENGTH)||(MsgCode==0)) IsMessage00=True;//47
    32d0:	6f 32       	cpi	r22, 0x2F	; 47
    32d2:	71 05       	cpc	r23, r1
    32d4:	21 f0       	breq	.+8      	; 0x32de <IdentifyMessage+0x16>
    32d6:	80 91 24 01 	lds	r24, 0x0124
    32da:	88 23       	and	r24, r24
    32dc:	21 f4       	brne	.+8      	; 0x32e6 <IdentifyMessage+0x1e>
    32de:	81 e0       	ldi	r24, 0x01	; 1
    32e0:	80 93 9e 01 	sts	0x019E, r24
    32e4:	4a c0       	rjmp	.+148    	; 0x337a <IdentifyMessage+0xb2>
		else
	    if ((Length==MSG09_LENGTH)||(MsgCode==9)) IsMessage09=True;//615
    32e6:	6c 36       	cpi	r22, 0x6C	; 108
    32e8:	71 05       	cpc	r23, r1
    32ea:	11 f0       	breq	.+4      	; 0x32f0 <IdentifyMessage+0x28>
    32ec:	89 30       	cpi	r24, 0x09	; 9
    32ee:	21 f4       	brne	.+8      	; 0x32f8 <IdentifyMessage+0x30>
    32f0:	81 e0       	ldi	r24, 0x01	; 1
    32f2:	80 93 a3 01 	sts	0x01A3, r24
    32f6:	41 c0       	rjmp	.+130    	; 0x337a <IdentifyMessage+0xb2>
		else
	    if ((Length==MSG11_LENGTH)||(MsgCode==11)) IsMessage11=True;//615
    32f8:	92 e0       	ldi	r25, 0x02	; 2
    32fa:	67 36       	cpi	r22, 0x67	; 103
    32fc:	79 07       	cpc	r23, r25
    32fe:	11 f0       	breq	.+4      	; 0x3304 <IdentifyMessage+0x3c>
    3300:	8b 30       	cpi	r24, 0x0B	; 11
    3302:	21 f4       	brne	.+8      	; 0x330c <IdentifyMessage+0x44>
    3304:	81 e0       	ldi	r24, 0x01	; 1
    3306:	80 93 a0 01 	sts	0x01A0, r24
    330a:	37 c0       	rjmp	.+110    	; 0x337a <IdentifyMessage+0xb2>
		else
	    if ((Length==MSG23_LENGTH)||(MsgCode==23)) IsMessage23=True;//145
    330c:	61 39       	cpi	r22, 0x91	; 145
    330e:	71 05       	cpc	r23, r1
    3310:	11 f0       	breq	.+4      	; 0x3316 <IdentifyMessage+0x4e>
    3312:	87 31       	cpi	r24, 0x17	; 23
    3314:	21 f4       	brne	.+8      	; 0x331e <IdentifyMessage+0x56>
    3316:	81 e0       	ldi	r24, 0x01	; 1
    3318:	80 93 a2 01 	sts	0x01A2, r24
    331c:	2e c0       	rjmp	.+92     	; 0x337a <IdentifyMessage+0xb2>
		else
	    if ((Length==MSG57_LENGTH)||(MsgCode==57)) IsMessage57=True;//230
    331e:	66 3e       	cpi	r22, 0xE6	; 230
    3320:	71 05       	cpc	r23, r1
    3322:	11 f0       	breq	.+4      	; 0x3328 <IdentifyMessage+0x60>
    3324:	89 33       	cpi	r24, 0x39	; 57
    3326:	21 f4       	brne	.+8      	; 0x3330 <IdentifyMessage+0x68>
    3328:	81 e0       	ldi	r24, 0x01	; 1
    332a:	80 93 a5 01 	sts	0x01A5, r24
    332e:	25 c0       	rjmp	.+74     	; 0x337a <IdentifyMessage+0xb2>
		else
	    if ((Length==MSG99_LENGTH)||(MsgCode==99)) IsMessage99=True;//378
    3330:	91 e0       	ldi	r25, 0x01	; 1
    3332:	68 39       	cpi	r22, 0x98	; 152
    3334:	79 07       	cpc	r23, r25
    3336:	11 f0       	breq	.+4      	; 0x333c <IdentifyMessage+0x74>
    3338:	83 36       	cpi	r24, 0x63	; 99
    333a:	21 f4       	brne	.+8      	; 0x3344 <IdentifyMessage+0x7c>
    333c:	81 e0       	ldi	r24, 0x01	; 1
    333e:	80 93 9f 01 	sts	0x019F, r24
    3342:	1b c0       	rjmp	.+54     	; 0x337a <IdentifyMessage+0xb2>
		else
	    if ((Length==MSG81_LENGTH)||(MsgCode==81)) IsMessage81=True;//426
    3344:	91 e0       	ldi	r25, 0x01	; 1
    3346:	66 3b       	cpi	r22, 0xB6	; 182
    3348:	79 07       	cpc	r23, r25
    334a:	11 f0       	breq	.+4      	; 0x3350 <IdentifyMessage+0x88>
    334c:	81 35       	cpi	r24, 0x51	; 81
    334e:	21 f4       	brne	.+8      	; 0x3358 <IdentifyMessage+0x90>
    3350:	81 e0       	ldi	r24, 0x01	; 1
    3352:	80 93 a6 01 	sts	0x01A6, r24
    3356:	11 c0       	rjmp	.+34     	; 0x337a <IdentifyMessage+0xb2>
		else
	    if ((Length==MSG91_LENGTH)||(MsgCode==91)) IsMessage91=True;//426
    3358:	6c 35       	cpi	r22, 0x5C	; 92
    335a:	71 05       	cpc	r23, r1
    335c:	11 f0       	breq	.+4      	; 0x3362 <IdentifyMessage+0x9a>
    335e:	8b 35       	cpi	r24, 0x5B	; 91
    3360:	21 f4       	brne	.+8      	; 0x336a <IdentifyMessage+0xa2>
    3362:	81 e0       	ldi	r24, 0x01	; 1
    3364:	80 93 a7 01 	sts	0x01A7, r24
    3368:	08 c0       	rjmp	.+16     	; 0x337a <IdentifyMessage+0xb2>
		else
	    if ((Length==MSG21_LENGTH)||(MsgCode==21)) IsMessage21=True;//426
    336a:	66 35       	cpi	r22, 0x56	; 86
    336c:	71 05       	cpc	r23, r1
    336e:	11 f0       	breq	.+4      	; 0x3374 <IdentifyMessage+0xac>
    3370:	85 31       	cpi	r24, 0x15	; 21
    3372:	19 f4       	brne	.+6      	; 0x337a <IdentifyMessage+0xb2>
    3374:	81 e0       	ldi	r24, 0x01	; 1
    3376:	80 93 a1 01 	sts	0x01A1, r24
        //EDC AdvanZ Respond
		if (IsMessage91==True){
    337a:	10 91 a7 01 	lds	r17, 0x01A7
    337e:	11 30       	cpi	r17, 0x01	; 1
    3380:	31 f4       	brne	.+12     	; 0x338e <IdentifyMessage+0xc6>
		    IsMessage91=False;
    3382:	10 92 a7 01 	sts	0x01A7, r1
		    ProcMessage91();
    3386:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <ProcMessage91>
			IsSendMessageEDC=True;
    338a:	10 93 97 01 	sts	0x0197, r17
		  }

//	  sprintf(SerialSend,"Length:%i",Length);	 
//	  uart_print(1,0,SerialSend);
	 }
}
    338e:	1f 91       	pop	r17
    3390:	08 95       	ret

00003392 <Tab>:

	  }
     return Result;     
}

void Tab(char *sTab, char nTab){
    3392:	fc 01       	movw	r30, r24
    3394:	dc 01       	movw	r26, r24
    3396:	80 e0       	ldi	r24, 0x00	; 0
     char i;
	 for(i=0;i<nTab;i++){
	     sTab[i]=' ';
    3398:	90 e2       	ldi	r25, 0x20	; 32
    339a:	02 c0       	rjmp	.+4      	; 0x33a0 <Tab+0xe>
    339c:	9d 93       	st	X+, r25
     return Result;     
}

void Tab(char *sTab, char nTab){
     char i;
	 for(i=0;i<nTab;i++){
    339e:	8f 5f       	subi	r24, 0xFF	; 255
    33a0:	86 17       	cp	r24, r22
    33a2:	e0 f3       	brcs	.-8      	; 0x339c <Tab+0xa>
	     sTab[i]=' ';
	 }sTab[nTab]=0;
    33a4:	e6 0f       	add	r30, r22
    33a6:	f1 1d       	adc	r31, r1
    33a8:	10 82       	st	Z, r1
}
    33aa:	08 95       	ret

000033ac <StrToRaw>:
			  }
		  }
	 }
}
                                       //12byte->6Byte         0 1 2 3  
void StrToRaw(char *Source,char *Dest){//Source: "1234567890AB"
    33ac:	dc 01       	movw	r26, r24
    33ae:	20 e0       	ldi	r18, 0x00	; 0
    33b0:	30 e0       	ldi	r19, 0x00	; 0
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
    33b2:	9c 91       	ld	r25, X
    33b4:	90 53       	subi	r25, 0x30	; 48
    33b6:	9a 30       	cpi	r25, 0x0A	; 10
    33b8:	08 f0       	brcs	.+2      	; 0x33bc <StrToRaw+0x10>
    33ba:	90 e0       	ldi	r25, 0x00	; 0
	 char xRaw=0;
	 for (i=0;i<6;i++){
	      xA=Ord(Source[(2*i)]);
		  xB=(0x0F&Ord(Source[(2*i)+1]));
	      xRaw=((xA<<4) | xB);
	      Dest[i]=xRaw;
    33bc:	11 96       	adiw	r26, 0x01	; 1
    33be:	8c 91       	ld	r24, X
    33c0:	11 97       	sbiw	r26, 0x01	; 1
    33c2:	80 53       	subi	r24, 0x30	; 48
    33c4:	8a 30       	cpi	r24, 0x0A	; 10
    33c6:	08 f0       	brcs	.+2      	; 0x33ca <StrToRaw+0x1e>
    33c8:	80 e0       	ldi	r24, 0x00	; 0
    33ca:	fb 01       	movw	r30, r22
    33cc:	e2 0f       	add	r30, r18
    33ce:	f3 1f       	adc	r31, r19
    33d0:	8f 70       	andi	r24, 0x0F	; 15
    33d2:	92 95       	swap	r25
    33d4:	90 7f       	andi	r25, 0xF0	; 240
    33d6:	98 2b       	or	r25, r24
    33d8:	90 83       	st	Z, r25
    33da:	2f 5f       	subi	r18, 0xFF	; 255
    33dc:	3f 4f       	sbci	r19, 0xFF	; 255
    33de:	12 96       	adiw	r26, 0x02	; 2
}
                                       //12byte->6Byte         0 1 2 3  
void StrToRaw(char *Source,char *Dest){//Source: "1234567890AB"
     char i,xA,xB;                //Dest  :  12345678 
	 char xRaw=0;
	 for (i=0;i<6;i++){
    33e0:	26 30       	cpi	r18, 0x06	; 6
    33e2:	31 05       	cpc	r19, r1
    33e4:	31 f7       	brne	.-52     	; 0x33b2 <StrToRaw+0x6>
	      xA=Ord(Source[(2*i)]);
		  xB=(0x0F&Ord(Source[(2*i)+1]));
	      xRaw=((xA<<4) | xB);
	      Dest[i]=xRaw;
	 }	      
}
    33e6:	08 95       	ret

000033e8 <RawToStr>:
void RawToStr(char *Source,char *Dest){//Source:   1234567890AB
    33e8:	cf 93       	push	r28
    33ea:	df 93       	push	r29
    33ec:	eb 01       	movw	r28, r22
    33ee:	db 01       	movw	r26, r22
    33f0:	20 e0       	ldi	r18, 0x00	; 0
    33f2:	30 e0       	ldi	r19, 0x00	; 0
     unsigned char i,xRaw,cA,cB;               //Dest  :  "12345678" 
	 for (i=0;i<6;i++){
	      cA=Chr(Source[i]>>4);
    33f4:	fc 01       	movw	r30, r24
    33f6:	e2 0f       	add	r30, r18
    33f8:	f3 1f       	adc	r31, r19
    33fa:	e0 81       	ld	r30, Z
    33fc:	4e 2f       	mov	r20, r30
    33fe:	42 95       	swap	r20
    3400:	4f 70       	andi	r20, 0x0F	; 15
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
    3402:	4a 30       	cpi	r20, 0x0A	; 10
    3404:	10 f0       	brcs	.+4      	; 0x340a <RawToStr+0x22>
    3406:	40 e3       	ldi	r20, 0x30	; 48
    3408:	01 c0       	rjmp	.+2      	; 0x340c <RawToStr+0x24>
	    Result='0'+X;
    340a:	40 5d       	subi	r20, 0xD0	; 208
}
void RawToStr(char *Source,char *Dest){//Source:   1234567890AB
     unsigned char i,xRaw,cA,cB;               //Dest  :  "12345678" 
	 for (i=0;i<6;i++){
	      cA=Chr(Source[i]>>4);
	      cB=Chr(Source[i]&0x0F);
    340c:	ef 70       	andi	r30, 0x0F	; 15
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
    340e:	ea 30       	cpi	r30, 0x0A	; 10
    3410:	10 f0       	brcs	.+4      	; 0x3416 <RawToStr+0x2e>
    3412:	e0 e3       	ldi	r30, 0x30	; 48
    3414:	01 c0       	rjmp	.+2      	; 0x3418 <RawToStr+0x30>
	    Result='0'+X;
    3416:	e0 5d       	subi	r30, 0xD0	; 208
void RawToStr(char *Source,char *Dest){//Source:   1234567890AB
     unsigned char i,xRaw,cA,cB;               //Dest  :  "12345678" 
	 for (i=0;i<6;i++){
	      cA=Chr(Source[i]>>4);
	      cB=Chr(Source[i]&0x0F);
          Dest[2*i]=cA;
    3418:	4c 93       	st	X, r20
          Dest[(2*i)+1]=cB;
    341a:	11 96       	adiw	r26, 0x01	; 1
    341c:	ec 93       	st	X, r30
    341e:	11 97       	sbiw	r26, 0x01	; 1
    3420:	2f 5f       	subi	r18, 0xFF	; 255
    3422:	3f 4f       	sbci	r19, 0xFF	; 255
    3424:	12 96       	adiw	r26, 0x02	; 2
	      Dest[i]=xRaw;
	 }	      
}
void RawToStr(char *Source,char *Dest){//Source:   1234567890AB
     unsigned char i,xRaw,cA,cB;               //Dest  :  "12345678" 
	 for (i=0;i<6;i++){
    3426:	26 30       	cpi	r18, 0x06	; 6
    3428:	31 05       	cpc	r19, r1
    342a:	21 f7       	brne	.-56     	; 0x33f4 <RawToStr+0xc>
	      cA=Chr(Source[i]>>4);
	      cB=Chr(Source[i]&0x0F);
          Dest[2*i]=cA;
          Dest[(2*i)+1]=cB;
	 }Dest[12]=0;
    342c:	1c 86       	std	Y+12, r1	; 0x0c
}
    342e:	df 91       	pop	r29
    3430:	cf 91       	pop	r28
    3432:	08 95       	ret

00003434 <CalcMinus>:
}

char CalcMinus(char A, char B){
     signed char xC;//,xA,xB;
	 char Result;
	 if (A>=B) xC=((A-'0')-(B-'0'));
    3434:	86 17       	cp	r24, r22
    3436:	08 f4       	brcc	.+2      	; 0x343a <CalcMinus+0x6>
	 else xC=10+((A-'0')-(B-'0'));//
    3438:	86 5f       	subi	r24, 0xF6	; 246
    343a:	86 1b       	sub	r24, r22
	 Result='0'+xC;
  return Result;
}
    343c:	80 5d       	subi	r24, 0xD0	; 208
    343e:	08 95       	ret

00003440 <CalcPlus>:

char CalcPlus(char A, char B){
    3440:	80 56       	subi	r24, 0x60	; 96
    3442:	86 0f       	add	r24, r22
    3444:	6a e0       	ldi	r22, 0x0A	; 10
    3446:	0e 94 58 aa 	call	0x154b0	; 0x154b0 <__divmodqi4>
     signed char xA,xB,xC;
	 char Result;
	 xC=((A-'0')+(B-'0'));
     Result='0'+(xC%10);  
   return Result;
}
    344a:	89 2f       	mov	r24, r25
    344c:	80 5d       	subi	r24, 0xD0	; 208
    344e:	08 95       	ret

00003450 <Chr>:
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
    3450:	8a 30       	cpi	r24, 0x0A	; 10
    3452:	10 f0       	brcs	.+4      	; 0x3458 <Chr+0x8>
    3454:	80 e3       	ldi	r24, 0x30	; 48
    3456:	08 95       	ret
	    Result='0'+X;
    3458:	80 5d       	subi	r24, 0xD0	; 208
	 }
	return Result;
}
    345a:	08 95       	ret

0000345c <Ord>:
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
    345c:	80 53       	subi	r24, 0x30	; 48
    345e:	8a 30       	cpi	r24, 0x0A	; 10
    3460:	08 f0       	brcs	.+2      	; 0x3464 <Ord+0x8>
    3462:	80 e0       	ldi	r24, 0x00	; 0
	    Result=c-'0';
	 }
	return Result;
}
    3464:	08 95       	ret

00003466 <FTestCalculation>:
		  else
		  if (KeyChar=='*')stTestCalc=tcInitData;
	      break;	 
	 }
*/
}
    3466:	08 95       	ret

00003468 <GetTabSpace>:
	     StrCalc(TPLUS,prevSeg,currSeg,prevSeg);
	 }
	 sprintf_P(strC,PSTR("%s"),prevSeg);
}

void GetTabSpace(signed char TabLength, char *strTab){
    3468:	48 2f       	mov	r20, r24
    346a:	fb 01       	movw	r30, r22
     char i,nTab;
	 if (TabLength>0){
    346c:	18 16       	cp	r1, r24
    346e:	64 f4       	brge	.+24     	; 0x3488 <GetTabSpace+0x20>
		 nTab=TabLength;//%40;
    3470:	56 2f       	mov	r21, r22
    3472:	db 01       	movw	r26, r22
		 for(i=0;i<nTab;i++){
		     strTab[i]=' ';
    3474:	90 e2       	ldi	r25, 0x20	; 32
    3476:	9d 93       	st	X+, r25

void GetTabSpace(signed char TabLength, char *strTab){
     char i,nTab;
	 if (TabLength>0){
		 nTab=TabLength;//%40;
		 for(i=0;i<nTab;i++){
    3478:	8a 2f       	mov	r24, r26
    347a:	85 1b       	sub	r24, r21
    347c:	84 17       	cp	r24, r20
    347e:	d8 f3       	brcs	.-10     	; 0x3476 <GetTabSpace+0xe>
		     strTab[i]=' ';
		 }strTab[nTab]=0;
    3480:	e4 0f       	add	r30, r20
    3482:	f1 1d       	adc	r31, r1
    3484:	10 82       	st	Z, r1
    3486:	08 95       	ret
     }else{
	 strTab[0]=' ';
    3488:	80 e2       	ldi	r24, 0x20	; 32
    348a:	80 83       	st	Z, r24
	 strTab[1]=0;
    348c:	11 82       	std	Z+1, r1	; 0x01
    348e:	08 95       	ret

00003490 <GetBorderValue>:

}

char GetBorderValue(char BoderType){
     char Result=0;
	 switch (BoderType){
    3490:	86 30       	cpi	r24, 0x06	; 6
    3492:	51 f1       	breq	.+84     	; 0x34e8 <GetBorderValue+0x58>
    3494:	87 30       	cpi	r24, 0x07	; 7
    3496:	70 f4       	brcc	.+28     	; 0x34b4 <GetBorderValue+0x24>
    3498:	83 30       	cpi	r24, 0x03	; 3
    349a:	11 f1       	breq	.+68     	; 0x34e0 <GetBorderValue+0x50>
    349c:	84 30       	cpi	r24, 0x04	; 4
    349e:	28 f4       	brcc	.+10     	; 0x34aa <GetBorderValue+0x1a>
    34a0:	81 30       	cpi	r24, 0x01	; 1
    34a2:	c1 f0       	breq	.+48     	; 0x34d4 <GetBorderValue+0x44>
    34a4:	82 30       	cpi	r24, 0x02	; 2
    34a6:	c1 f4       	brne	.+48     	; 0x34d8 <GetBorderValue+0x48>
    34a8:	19 c0       	rjmp	.+50     	; 0x34dc <GetBorderValue+0x4c>
    34aa:	84 30       	cpi	r24, 0x04	; 4
    34ac:	d9 f0       	breq	.+54     	; 0x34e4 <GetBorderValue+0x54>
    34ae:	85 30       	cpi	r24, 0x05	; 5
    34b0:	99 f4       	brne	.+38     	; 0x34d8 <GetBorderValue+0x48>
    34b2:	22 c0       	rjmp	.+68     	; 0x34f8 <GetBorderValue+0x68>
    34b4:	89 30       	cpi	r24, 0x09	; 9
    34b6:	f1 f0       	breq	.+60     	; 0x34f4 <GetBorderValue+0x64>
    34b8:	8a 30       	cpi	r24, 0x0A	; 10
    34ba:	28 f4       	brcc	.+10     	; 0x34c6 <GetBorderValue+0x36>
    34bc:	87 30       	cpi	r24, 0x07	; 7
    34be:	b1 f0       	breq	.+44     	; 0x34ec <GetBorderValue+0x5c>
    34c0:	88 30       	cpi	r24, 0x08	; 8
    34c2:	51 f4       	brne	.+20     	; 0x34d8 <GetBorderValue+0x48>
    34c4:	15 c0       	rjmp	.+42     	; 0x34f0 <GetBorderValue+0x60>
    34c6:	8b 30       	cpi	r24, 0x0B	; 11
    34c8:	d9 f0       	breq	.+54     	; 0x3500 <GetBorderValue+0x70>
    34ca:	8b 30       	cpi	r24, 0x0B	; 11
    34cc:	b8 f0       	brcs	.+46     	; 0x34fc <GetBorderValue+0x6c>
    34ce:	8c 30       	cpi	r24, 0x0C	; 12
    34d0:	19 f4       	brne	.+6      	; 0x34d8 <GetBorderValue+0x48>
    34d2:	18 c0       	rjmp	.+48     	; 0x3504 <GetBorderValue+0x74>
    34d4:	8a ed       	ldi	r24, 0xDA	; 218
    34d6:	08 95       	ret
    34d8:	80 e0       	ldi	r24, 0x00	; 0
    34da:	08 95       	ret
    34dc:	82 ec       	ldi	r24, 0xC2	; 194
    34de:	08 95       	ret
		case btTopLeft: 
		     Result=0xDA;
			 break;
		case btTopCenter: 
		     Result=0xC2;
			 break;
    34e0:	8f eb       	ldi	r24, 0xBF	; 191
    34e2:	08 95       	ret
		case btTopRight:
		     Result=0xBF;		 
			 break;
    34e4:	83 ec       	ldi	r24, 0xC3	; 195
    34e6:	08 95       	ret
		case btMiddleLeft: 
			 Result=0xC3;
			 break;
    34e8:	84 eb       	ldi	r24, 0xB4	; 180
    34ea:	08 95       	ret
		case btMiddleRight: 
			 Result=0xB4;
			 break;
    34ec:	80 ec       	ldi	r24, 0xC0	; 192
    34ee:	08 95       	ret
		case btBottomLeft: 
		     Result=0xC0;
			 break;
    34f0:	81 ec       	ldi	r24, 0xC1	; 193
    34f2:	08 95       	ret
		case btBottomCenter: 
			 Result=0xC1;
			 break;
    34f4:	89 ed       	ldi	r24, 0xD9	; 217
    34f6:	08 95       	ret
		case btBottomRight: 
			 Result=0xD9;
			 break;
    34f8:	85 ec       	ldi	r24, 0xC5	; 197
    34fa:	08 95       	ret
        case btMiddleCenter:
		     Result=0xC5;
		     break;
    34fc:	83 eb       	ldi	r24, 0xB3	; 179
    34fe:	08 95       	ret
		case btVertical: 
			 Result=0xB3;
			 break;
    3500:	84 ec       	ldi	r24, 0xC4	; 196
    3502:	08 95       	ret
		case btHorizontal:
			 Result=0xC4;
			 break;	 
    3504:	8d e0       	ldi	r24, 0x0D	; 13
        case btNewLine:
		     Result=0x0D;
			 break;	 
	 }
   return Result;
}
    3506:	08 95       	ret

00003508 <InserBorder>:

void InserBorder(char BorderType, char *strPrnBuffer,char nLength,unsigned int *Pos){
    3508:	bf 92       	push	r11
    350a:	cf 92       	push	r12
    350c:	df 92       	push	r13
    350e:	ef 92       	push	r14
    3510:	ff 92       	push	r15
    3512:	0f 93       	push	r16
    3514:	1f 93       	push	r17
    3516:	cf 93       	push	r28
    3518:	df 93       	push	r29
    351a:	b8 2e       	mov	r11, r24
    351c:	8b 01       	movw	r16, r22
    351e:	e4 2e       	mov	r14, r20
    3520:	69 01       	movw	r12, r18
     char i;//,BorderValue=0;
	 unsigned int StartPos,iPos=0;
	 
	 iPos=*Pos;
    3522:	f9 01       	movw	r30, r18
    3524:	c0 81       	ld	r28, Z
    3526:	d1 81       	ldd	r29, Z+1	; 0x01
    3528:	0c 0f       	add	r16, r28
    352a:	1d 1f       	adc	r17, r29
    352c:	ff 24       	eor	r15, r15
    352e:	07 c0       	rjmp	.+14     	; 0x353e <InserBorder+0x36>
	 StartPos=iPos;
	 for (i=0;i<nLength;i++){
	      strPrnBuffer[iPos]=GetBorderValue(BorderType);
    3530:	8b 2d       	mov	r24, r11
    3532:	0e 94 48 1a 	call	0x3490	; 0x3490 <GetBorderValue>
    3536:	f8 01       	movw	r30, r16
    3538:	81 93       	st	Z+, r24
    353a:	8f 01       	movw	r16, r30
     char i;//,BorderValue=0;
	 unsigned int StartPos,iPos=0;
	 
	 iPos=*Pos;
	 StartPos=iPos;
	 for (i=0;i<nLength;i++){
    353c:	f3 94       	inc	r15
    353e:	fe 14       	cp	r15, r14
    3540:	b8 f3       	brcs	.-18     	; 0x3530 <InserBorder+0x28>
	 //for (i=0;i<nLength;i++){
	 //     if (strPrnBuffer[i+StartPos]!=GetBorderValue(BorderType)){
//		      strPrnBuffer[i+StartPos]=GetBorderValue(BorderType);
//		  }
//	 }
     *Pos=iPos;
    3542:	ce 0d       	add	r28, r14
    3544:	d1 1d       	adc	r29, r1
    3546:	f6 01       	movw	r30, r12
    3548:	d1 83       	std	Z+1, r29	; 0x01
    354a:	c0 83       	st	Z, r28
}
    354c:	df 91       	pop	r29
    354e:	cf 91       	pop	r28
    3550:	1f 91       	pop	r17
    3552:	0f 91       	pop	r16
    3554:	ff 90       	pop	r15
    3556:	ef 90       	pop	r14
    3558:	df 90       	pop	r13
    355a:	cf 90       	pop	r12
    355c:	bf 90       	pop	r11
    355e:	08 95       	ret

00003560 <TestUserInput>:
	   //lcd_printf(1,1,PSTR("InputNumber:"));
       //lcd_printf(2,1,PSTR("_         "));
	}
  return Result;
  */
}
    3560:	08 95       	ret

00003562 <GeniusSendPumpStatus>:
   return Result;
}

void GeniusSendPumpStatus(char iPumpID){
     
}
    3562:	08 95       	ret

00003564 <GeniusSendStopPump>:
void GeniusSendStopPump(char iPumpID){
}
    3564:	08 95       	ret

00003566 <GeniusSendResumePump>:
void GeniusSendResumePump(char iPumpID){
}
    3566:	08 95       	ret

00003568 <GeniusSendPumpPreset>:
void GeniusSendPumpPreset(char iPumpID){
}
    3568:	08 95       	ret

0000356a <SetIncomingTransStatus>:
	 sprintf_P(strSend,PSTR("%d"),cSum);
	 uart_print(1,1,strSend);	 
}


void SetIncomingTransStatus(char iPumpID,char xTransStatus){
    356a:	e8 2f       	mov	r30, r24
char iStatus,xMaskA,xMaskB,xMaskC,xPumpID;
	 xPumpID=(iPumpID&0x0F);
    356c:	28 2f       	mov	r18, r24
    356e:	2f 70       	andi	r18, 0x0F	; 15
     iStatus=IncomingTransaction[xPumpID/8];
    3570:	82 2f       	mov	r24, r18
    3572:	86 95       	lsr	r24
    3574:	86 95       	lsr	r24
    3576:	86 95       	lsr	r24
    3578:	a8 2f       	mov	r26, r24
    357a:	b0 e0       	ldi	r27, 0x00	; 0
    357c:	aa 5a       	subi	r26, 0xAA	; 170
    357e:	b3 4f       	sbci	r27, 0xF3	; 243
    3580:	4c 91       	ld	r20, X
	 if (xTransStatus==TS_NEW){
    3582:	62 30       	cpi	r22, 0x02	; 2
    3584:	59 f4       	brne	.+22     	; 0x359c <SetIncomingTransStatus+0x32>
	     iStatus=(iStatus|(1<<(xPumpID%8)));	 
    3586:	27 70       	andi	r18, 0x07	; 7
    3588:	81 e0       	ldi	r24, 0x01	; 1
    358a:	90 e0       	ldi	r25, 0x00	; 0
    358c:	02 c0       	rjmp	.+4      	; 0x3592 <SetIncomingTransStatus+0x28>
    358e:	88 0f       	add	r24, r24
    3590:	99 1f       	adc	r25, r25
    3592:	2a 95       	dec	r18
    3594:	e2 f7       	brpl	.-8      	; 0x358e <SetIncomingTransStatus+0x24>
    3596:	48 2b       	or	r20, r24
		 IncomingTransaction[xPumpID/8]=iStatus;
    3598:	4c 93       	st	X, r20
    359a:	08 95       	ret
	 }else if (xTransStatus==TS_OLD){
    359c:	63 30       	cpi	r22, 0x03	; 3
    359e:	b1 f4       	brne	.+44     	; 0x35cc <SetIncomingTransStatus+0x62>
		 xMaskA=(0xFE<<(xPumpID%8));
    35a0:	27 70       	andi	r18, 0x07	; 7
    35a2:	8e ef       	ldi	r24, 0xFE	; 254
    35a4:	90 e0       	ldi	r25, 0x00	; 0
    35a6:	01 c0       	rjmp	.+2      	; 0x35aa <SetIncomingTransStatus+0x40>
    35a8:	88 0f       	add	r24, r24
    35aa:	2a 95       	dec	r18
    35ac:	ea f7       	brpl	.-6      	; 0x35a8 <SetIncomingTransStatus+0x3e>
		 xMaskB=(~xMaskA)>>1;
		 xMaskC=xMaskA|xMaskB;
		 iStatus=iStatus&xMaskC;
		 IncomingTransaction[iPumpID/8]=iStatus;
    35ae:	e6 95       	lsr	r30
    35b0:	e6 95       	lsr	r30
    35b2:	e6 95       	lsr	r30
    35b4:	f0 e0       	ldi	r31, 0x00	; 0
    35b6:	ea 5a       	subi	r30, 0xAA	; 170
    35b8:	f3 4f       	sbci	r31, 0xF3	; 243
    35ba:	28 2f       	mov	r18, r24
    35bc:	30 e0       	ldi	r19, 0x00	; 0
    35be:	20 95       	com	r18
    35c0:	30 95       	com	r19
    35c2:	35 95       	asr	r19
    35c4:	27 95       	ror	r18
    35c6:	82 2b       	or	r24, r18
    35c8:	84 23       	and	r24, r20
    35ca:	80 83       	st	Z, r24
    35cc:	08 95       	ret

000035ce <GetIncomingTransStatus>:
	 }
}
char GetIncomingTransStatus(char iPumpID){
     char xPumpID,Result;
	 xPumpID=(iPumpID&0x0F);
    35ce:	8f 70       	andi	r24, 0x0F	; 15
	 Result=TS_NONE;
     if((IncomingTransaction[xPumpID/8]>>(xPumpID%8))==1){
    35d0:	e8 2f       	mov	r30, r24
    35d2:	e6 95       	lsr	r30
    35d4:	e6 95       	lsr	r30
    35d6:	e6 95       	lsr	r30
    35d8:	f0 e0       	ldi	r31, 0x00	; 0
    35da:	ea 5a       	subi	r30, 0xAA	; 170
    35dc:	f3 4f       	sbci	r31, 0xF3	; 243
    35de:	90 81       	ld	r25, Z
    35e0:	29 2f       	mov	r18, r25
    35e2:	30 e0       	ldi	r19, 0x00	; 0
    35e4:	87 70       	andi	r24, 0x07	; 7
    35e6:	02 c0       	rjmp	.+4      	; 0x35ec <GetIncomingTransStatus+0x1e>
    35e8:	35 95       	asr	r19
    35ea:	27 95       	ror	r18
    35ec:	8a 95       	dec	r24
    35ee:	e2 f7       	brpl	.-8      	; 0x35e8 <GetIncomingTransStatus+0x1a>
    35f0:	21 30       	cpi	r18, 0x01	; 1
    35f2:	31 05       	cpc	r19, r1
    35f4:	11 f4       	brne	.+4      	; 0x35fa <GetIncomingTransStatus+0x2c>
    35f6:	82 e0       	ldi	r24, 0x02	; 2
    35f8:	08 95       	ret
	     Result=TS_NEW;
	 }else
     if((IncomingTransaction[xPumpID/8]>>(xPumpID%8))==0){
    35fa:	23 2b       	or	r18, r19
    35fc:	11 f4       	brne	.+4      	; 0x3602 <GetIncomingTransStatus+0x34>
    35fe:	83 e0       	ldi	r24, 0x03	; 3
    3600:	08 95       	ret
    3602:	80 e0       	ldi	r24, 0x00	; 0
	     Result=TS_OLD;
	 }
   return Result;
}
    3604:	08 95       	ret

00003606 <ComposeDatetime>:
	}
	 //NormalizeDecimal(eeprom_read_byte(&DefDecimalTotalMoney),2,Result);
}


void ComposeDatetime(char *Result){// 2010/10/01 16:27:44
    3606:	df 93       	push	r29
    3608:	cf 93       	push	r28
    360a:	cd b7       	in	r28, 0x3d	; 61
    360c:	de b7       	in	r29, 0x3e	; 62
    360e:	62 97       	sbiw	r28, 0x12	; 18
    3610:	0f b6       	in	r0, 0x3f	; 63
    3612:	f8 94       	cli
    3614:	de bf       	out	0x3e, r29	; 62
    3616:	0f be       	out	0x3f, r0	; 63
    3618:	cd bf       	out	0x3d, r28	; 61
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    361a:	20 91 3c 04 	lds	r18, 0x043C
    361e:	2f 83       	std	Y+7, r18	; 0x07
    3620:	20 91 3d 04 	lds	r18, 0x043D
    3624:	28 87       	std	Y+8, r18	; 0x08
	 }Dest[Length]=0;
    3626:	19 86       	std	Y+9, r1	; 0x09
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    3628:	20 91 3f 04 	lds	r18, 0x043F
    362c:	2c 83       	std	Y+4, r18	; 0x04
    362e:	20 91 40 04 	lds	r18, 0x0440
    3632:	2d 83       	std	Y+5, r18	; 0x05
	 }Dest[Length]=0;
    3634:	1e 82       	std	Y+6, r1	; 0x06
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    3636:	20 91 42 04 	lds	r18, 0x0442
    363a:	29 83       	std	Y+1, r18	; 0x01
    363c:	20 91 43 04 	lds	r18, 0x0443
    3640:	2a 83       	std	Y+2, r18	; 0x02
	 }Dest[Length]=0;
    3642:	1b 82       	std	Y+3, r1	; 0x03
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    3644:	20 91 f6 08 	lds	r18, 0x08F6
    3648:	2a 87       	std	Y+10, r18	; 0x0a
    364a:	20 91 f7 08 	lds	r18, 0x08F7
    364e:	2b 87       	std	Y+11, r18	; 0x0b
	 }Dest[Length]=0;
    3650:	1c 86       	std	Y+12, r1	; 0x0c
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    3652:	20 91 f9 08 	lds	r18, 0x08F9
    3656:	2d 87       	std	Y+13, r18	; 0x0d
    3658:	20 91 fa 08 	lds	r18, 0x08FA
    365c:	2e 87       	std	Y+14, r18	; 0x0e
	 }Dest[Length]=0;
    365e:	1f 86       	std	Y+15, r1	; 0x0f
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    3660:	20 91 fc 08 	lds	r18, 0x08FC
    3664:	28 8b       	std	Y+16, r18	; 0x10
    3666:	20 91 fd 08 	lds	r18, 0x08FD
    366a:	29 8b       	std	Y+17, r18	; 0x11
	 }Dest[Length]=0;
    366c:	1a 8a       	std	Y+18, r1	; 0x12
     StrPosCopy(strSystemDate,sYear,6,2);

     StrPosCopy(strSystemTime,sHour,0,2);
     StrPosCopy(strSystemTime,sMinute,3,2);
     StrPosCopy(strSystemTime,sSecond,6,2);
	 sprintf_P(Result,PSTR("20%s/%s/%s %s:%s:%s"),sYear,sMonth,sDay,sHour,sMinute,sSecond);
    366e:	2d b7       	in	r18, 0x3d	; 61
    3670:	3e b7       	in	r19, 0x3e	; 62
    3672:	20 51       	subi	r18, 0x10	; 16
    3674:	30 40       	sbci	r19, 0x00	; 0
    3676:	0f b6       	in	r0, 0x3f	; 63
    3678:	f8 94       	cli
    367a:	3e bf       	out	0x3e, r19	; 62
    367c:	0f be       	out	0x3f, r0	; 63
    367e:	2d bf       	out	0x3d, r18	; 61
    3680:	ed b7       	in	r30, 0x3d	; 61
    3682:	fe b7       	in	r31, 0x3e	; 62
    3684:	31 96       	adiw	r30, 0x01	; 1
    3686:	ad b7       	in	r26, 0x3d	; 61
    3688:	be b7       	in	r27, 0x3e	; 62
    368a:	12 96       	adiw	r26, 0x02	; 2
    368c:	9c 93       	st	X, r25
    368e:	8e 93       	st	-X, r24
    3690:	11 97       	sbiw	r26, 0x01	; 1
    3692:	85 e3       	ldi	r24, 0x35	; 53
    3694:	95 e0       	ldi	r25, 0x05	; 5
    3696:	93 83       	std	Z+3, r25	; 0x03
    3698:	82 83       	std	Z+2, r24	; 0x02
    369a:	ce 01       	movw	r24, r28
    369c:	01 96       	adiw	r24, 0x01	; 1
    369e:	95 83       	std	Z+5, r25	; 0x05
    36a0:	84 83       	std	Z+4, r24	; 0x04
    36a2:	ce 01       	movw	r24, r28
    36a4:	04 96       	adiw	r24, 0x04	; 4
    36a6:	97 83       	std	Z+7, r25	; 0x07
    36a8:	86 83       	std	Z+6, r24	; 0x06
    36aa:	ce 01       	movw	r24, r28
    36ac:	07 96       	adiw	r24, 0x07	; 7
    36ae:	91 87       	std	Z+9, r25	; 0x09
    36b0:	80 87       	std	Z+8, r24	; 0x08
    36b2:	ce 01       	movw	r24, r28
    36b4:	0a 96       	adiw	r24, 0x0a	; 10
    36b6:	93 87       	std	Z+11, r25	; 0x0b
    36b8:	82 87       	std	Z+10, r24	; 0x0a
    36ba:	ce 01       	movw	r24, r28
    36bc:	0d 96       	adiw	r24, 0x0d	; 13
    36be:	95 87       	std	Z+13, r25	; 0x0d
    36c0:	84 87       	std	Z+12, r24	; 0x0c
    36c2:	ce 01       	movw	r24, r28
    36c4:	40 96       	adiw	r24, 0x10	; 16
    36c6:	97 87       	std	Z+15, r25	; 0x0f
    36c8:	86 87       	std	Z+14, r24	; 0x0e
    36ca:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
    36ce:	2d b7       	in	r18, 0x3d	; 61
    36d0:	3e b7       	in	r19, 0x3e	; 62
    36d2:	20 5f       	subi	r18, 0xF0	; 240
    36d4:	3f 4f       	sbci	r19, 0xFF	; 255
    36d6:	0f b6       	in	r0, 0x3f	; 63
    36d8:	f8 94       	cli
    36da:	3e bf       	out	0x3e, r19	; 62
    36dc:	0f be       	out	0x3f, r0	; 63
    36de:	2d bf       	out	0x3d, r18	; 61
}
    36e0:	62 96       	adiw	r28, 0x12	; 18
    36e2:	0f b6       	in	r0, 0x3f	; 63
    36e4:	f8 94       	cli
    36e6:	de bf       	out	0x3e, r29	; 62
    36e8:	0f be       	out	0x3f, r0	; 63
    36ea:	cd bf       	out	0x3d, r28	; 61
    36ec:	cf 91       	pop	r28
    36ee:	df 91       	pop	r29
    36f0:	08 95       	ret

000036f2 <leadingZero>:
	     }String[Size]=0;
	 }
}

void leadingZero(char Val,char *StrResult){
     sprintf_P(StrResult,PSTR("%.2d"),Val);
    36f2:	00 d0       	rcall	.+0      	; 0x36f4 <leadingZero+0x2>
    36f4:	00 d0       	rcall	.+0      	; 0x36f6 <leadingZero+0x4>
    36f6:	00 d0       	rcall	.+0      	; 0x36f8 <leadingZero+0x6>
    36f8:	ed b7       	in	r30, 0x3d	; 61
    36fa:	fe b7       	in	r31, 0x3e	; 62
    36fc:	31 96       	adiw	r30, 0x01	; 1
    36fe:	ad b7       	in	r26, 0x3d	; 61
    3700:	be b7       	in	r27, 0x3e	; 62
    3702:	12 96       	adiw	r26, 0x02	; 2
    3704:	7c 93       	st	X, r23
    3706:	6e 93       	st	-X, r22
    3708:	11 97       	sbiw	r26, 0x01	; 1
    370a:	29 ee       	ldi	r18, 0xE9	; 233
    370c:	3e e0       	ldi	r19, 0x0E	; 14
    370e:	33 83       	std	Z+3, r19	; 0x03
    3710:	22 83       	std	Z+2, r18	; 0x02
    3712:	84 83       	std	Z+4, r24	; 0x04
    3714:	15 82       	std	Z+5, r1	; 0x05
    3716:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
    371a:	8d b7       	in	r24, 0x3d	; 61
    371c:	9e b7       	in	r25, 0x3e	; 62
    371e:	06 96       	adiw	r24, 0x06	; 6
    3720:	0f b6       	in	r0, 0x3f	; 63
    3722:	f8 94       	cli
    3724:	9e bf       	out	0x3e, r25	; 62
    3726:	0f be       	out	0x3f, r0	; 63
    3728:	8d bf       	out	0x3d, r24	; 61

}
    372a:	08 95       	ret

0000372c <procMessage21>:
       StrPosCopy(rcv_trans,strFreeMessageLine3,79,20);
       StrPosCopy(rcv_trans,strFreeMessageLine4,99,20);
	 return Result;
}

char procMessage21(){
    372c:	af 92       	push	r10
    372e:	bf 92       	push	r11
    3730:	cf 92       	push	r12
    3732:	df 92       	push	r13
    3734:	ef 92       	push	r14
    3736:	ff 92       	push	r15
    3738:	0f 93       	push	r16
    373a:	1f 93       	push	r17
    373c:	df 93       	push	r29
    373e:	cf 93       	push	r28
    3740:	cd b7       	in	r28, 0x3d	; 61
    3742:	de b7       	in	r29, 0x3e	; 62
    3744:	2b 97       	sbiw	r28, 0x0b	; 11
    3746:	0f b6       	in	r0, 0x3f	; 63
    3748:	f8 94       	cli
    374a:	de bf       	out	0x3e, r29	; 62
    374c:	0f be       	out	0x3f, r0	; 63
    374e:	cd bf       	out	0x3d, r28	; 61
    3750:	0a e0       	ldi	r16, 0x0A	; 10
    3752:	11 e0       	ldi	r17, 0x01	; 1
    3754:	34 ec       	ldi	r19, 0xC4	; 196
    3756:	e3 2e       	mov	r14, r19
    3758:	39 e0       	ldi	r19, 0x09	; 9
    375a:	f3 2e       	mov	r15, r19
    375c:	6e 01       	movw	r12, r28
    375e:	08 94       	sec
    3760:	c1 1c       	adc	r12, r1
    3762:	d1 1c       	adc	r13, r1
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    3764:	2b e0       	ldi	r18, 0x0B	; 11
    3766:	a2 2e       	mov	r10, r18
    3768:	b1 2c       	mov	r11, r1
    376a:	ac 0e       	add	r10, r28
    376c:	bd 1e       	adc	r11, r29
       StrPosCopy(rcv_trans,strFreeMessageLine3,79,20);
       StrPosCopy(rcv_trans,strFreeMessageLine4,99,20);
	 return Result;
}

char procMessage21(){
    376e:	f6 01       	movw	r30, r12
    3770:	d7 01       	movw	r26, r14
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    3772:	8d 91       	ld	r24, X+
    3774:	81 93       	st	Z+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    3776:	ea 15       	cp	r30, r10
    3778:	fb 05       	cpc	r31, r11
    377a:	d9 f7       	brne	.-10     	; 0x3772 <procMessage21+0x46>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    377c:	1b 86       	std	Y+11, r1	; 0x0b
     char i,Result,strBankName[11];
	 Result=0;
	 for(i=0;i<4;i++){
         StrPosCopy(rcv_trans,strBankName,(37+(i*10)),10);
		 //Result=((Result<<1)|SaveToEEPROM(strBankName,DefBankName[i],11)); 
		 eeprom_write_block((const void*)&strBankName, (void*)&DefBankName[i], 11);
    377e:	c6 01       	movw	r24, r12
    3780:	b8 01       	movw	r22, r16
    3782:	4b e0       	ldi	r20, 0x0B	; 11
    3784:	50 e0       	ldi	r21, 0x00	; 0
    3786:	0e 94 33 ad 	call	0x15a66	; 0x15a66 <__eewr_block_m128>
    378a:	05 5f       	subi	r16, 0xF5	; 245
    378c:	1f 4f       	sbci	r17, 0xFF	; 255
    378e:	8a e0       	ldi	r24, 0x0A	; 10
    3790:	90 e0       	ldi	r25, 0x00	; 0
    3792:	e8 0e       	add	r14, r24
    3794:	f9 1e       	adc	r15, r25
}

char procMessage21(){
     char i,Result,strBankName[11];
	 Result=0;
	 for(i=0;i<4;i++){
    3796:	91 e0       	ldi	r25, 0x01	; 1
    3798:	06 33       	cpi	r16, 0x36	; 54
    379a:	19 07       	cpc	r17, r25
    379c:	41 f7       	brne	.-48     	; 0x376e <procMessage21+0x42>
         StrPosCopy(rcv_trans,strBankName,(37+(i*10)),10);
		 //Result=((Result<<1)|SaveToEEPROM(strBankName,DefBankName[i],11)); 
		 eeprom_write_block((const void*)&strBankName, (void*)&DefBankName[i], 11);
	 }
	 return Result;
}
    379e:	80 e0       	ldi	r24, 0x00	; 0
    37a0:	2b 96       	adiw	r28, 0x0b	; 11
    37a2:	0f b6       	in	r0, 0x3f	; 63
    37a4:	f8 94       	cli
    37a6:	de bf       	out	0x3e, r29	; 62
    37a8:	0f be       	out	0x3f, r0	; 63
    37aa:	cd bf       	out	0x3d, r28	; 61
    37ac:	cf 91       	pop	r28
    37ae:	df 91       	pop	r29
    37b0:	1f 91       	pop	r17
    37b2:	0f 91       	pop	r16
    37b4:	ff 90       	pop	r15
    37b6:	ef 90       	pop	r14
    37b8:	df 90       	pop	r13
    37ba:	cf 90       	pop	r12
    37bc:	bf 90       	pop	r11
    37be:	af 90       	pop	r10
    37c0:	08 95       	ret

000037c2 <MasterReset>:
		     eeprom_write_byte(&DefDecimalPrice+i,DecimalSetting[i]);
		 }
	 }
}

void MasterReset(){
    37c2:	af 92       	push	r10
    37c4:	bf 92       	push	r11
    37c6:	df 92       	push	r13
    37c8:	ef 92       	push	r14
    37ca:	ff 92       	push	r15
    37cc:	0f 93       	push	r16
    37ce:	1f 93       	push	r17
    37d0:	df 93       	push	r29
    37d2:	cf 93       	push	r28
    37d4:	cd b7       	in	r28, 0x3d	; 61
    37d6:	de b7       	in	r29, 0x3e	; 62
    37d8:	ec 97       	sbiw	r28, 0x3c	; 60
    37da:	0f b6       	in	r0, 0x3f	; 63
    37dc:	f8 94       	cli
    37de:	de bf       	out	0x3e, r29	; 62
    37e0:	0f be       	out	0x3f, r0	; 63
    37e2:	cd bf       	out	0x3d, r28	; 61
     char strEEP[50];
	 char xArray[10];
     //Restore All Stored EEPROM data to the Default
     sprintf_P(strEEP,PSTR("  "));
    37e4:	00 d0       	rcall	.+0      	; 0x37e6 <MasterReset+0x24>
    37e6:	00 d0       	rcall	.+0      	; 0x37e8 <MasterReset+0x26>
    37e8:	5b e0       	ldi	r21, 0x0B	; 11
    37ea:	e5 2e       	mov	r14, r21
    37ec:	f1 2c       	mov	r15, r1
    37ee:	ec 0e       	add	r14, r28
    37f0:	fd 1e       	adc	r15, r29
    37f2:	ed b7       	in	r30, 0x3d	; 61
    37f4:	fe b7       	in	r31, 0x3e	; 62
    37f6:	f2 82       	std	Z+2, r15	; 0x02
    37f8:	e1 82       	std	Z+1, r14	; 0x01
    37fa:	88 e1       	ldi	r24, 0x18	; 24
    37fc:	95 e0       	ldi	r25, 0x05	; 5
    37fe:	94 83       	std	Z+4, r25	; 0x04
    3800:	83 83       	std	Z+3, r24	; 0x03
    3802:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefOperatorName, sizeof(DefOperatorName));
    3806:	0f 90       	pop	r0
    3808:	0f 90       	pop	r0
    380a:	0f 90       	pop	r0
    380c:	0f 90       	pop	r0
    380e:	c7 01       	movw	r24, r14
    3810:	65 e1       	ldi	r22, 0x15	; 21
    3812:	70 e0       	ldi	r23, 0x00	; 0
    3814:	43 e1       	ldi	r20, 0x13	; 19
    3816:	50 e0       	ldi	r21, 0x00	; 0
    3818:	0e 94 33 ad 	call	0x15a66	; 0x15a66 <__eewr_block_m128>

	 xArray[0]=192;	 xArray[1]=168; 	 xArray[2]=16;	 xArray[3]=70; 
    381c:	40 ec       	ldi	r20, 0xC0	; 192
    381e:	d4 2e       	mov	r13, r20
    3820:	d9 82       	std	Y+1, r13	; 0x01
    3822:	08 ea       	ldi	r16, 0xA8	; 168
    3824:	0a 83       	std	Y+2, r16	; 0x02
    3826:	10 e1       	ldi	r17, 0x10	; 16
    3828:	1b 83       	std	Y+3, r17	; 0x03
    382a:	86 e4       	ldi	r24, 0x46	; 70
    382c:	8c 83       	std	Y+4, r24	; 0x04
	 eeprom_write_block((const void*) &xArray, (void*) &DefClientIP, 4);
    382e:	5e 01       	movw	r10, r28
    3830:	08 94       	sec
    3832:	a1 1c       	adc	r10, r1
    3834:	b1 1c       	adc	r11, r1
    3836:	c5 01       	movw	r24, r10
    3838:	68 e2       	ldi	r22, 0x28	; 40
    383a:	70 e0       	ldi	r23, 0x00	; 0
    383c:	44 e0       	ldi	r20, 0x04	; 4
    383e:	50 e0       	ldi	r21, 0x00	; 0
    3840:	0e 94 33 ad 	call	0x15a66	; 0x15a66 <__eewr_block_m128>

	 xArray[0]=192;	 xArray[1]=168; 	 xArray[2]=16;	 xArray[3]=180; 
    3844:	d9 82       	std	Y+1, r13	; 0x01
    3846:	0a 83       	std	Y+2, r16	; 0x02
    3848:	1b 83       	std	Y+3, r17	; 0x03
    384a:	84 eb       	ldi	r24, 0xB4	; 180
    384c:	8c 83       	std	Y+4, r24	; 0x04
	 eeprom_write_block((const void*) &xArray, (void*) &DefServerIP, 4);
    384e:	c5 01       	movw	r24, r10
    3850:	6c e2       	ldi	r22, 0x2C	; 44
    3852:	70 e0       	ldi	r23, 0x00	; 0
    3854:	44 e0       	ldi	r20, 0x04	; 4
    3856:	50 e0       	ldi	r21, 0x00	; 0
    3858:	0e 94 33 ad 	call	0x15a66	; 0x15a66 <__eewr_block_m128>

     eeprom_write_byte(&DefPrinterType,PT_CUSTOM_TG02);
    385c:	80 e3       	ldi	r24, 0x30	; 48
    385e:	90 e0       	ldi	r25, 0x00	; 0
    3860:	61 e0       	ldi	r22, 0x01	; 1
    3862:	0e 94 3d ad 	call	0x15a7a	; 0x15a7a <__eewr_byte_m128>

	 eeprom_write_byte(&DefPrintScrollEnd,7);
    3866:	81 e3       	ldi	r24, 0x31	; 49
    3868:	90 e0       	ldi	r25, 0x00	; 0
    386a:	67 e0       	ldi	r22, 0x07	; 7
    386c:	0e 94 3d ad 	call	0x15a7a	; 0x15a7a <__eewr_byte_m128>
	 eeprom_write_byte(&DefPrintScrollSpace,5);
    3870:	82 e3       	ldi	r24, 0x32	; 50
    3872:	90 e0       	ldi	r25, 0x00	; 0
    3874:	65 e0       	ldi	r22, 0x05	; 5
    3876:	0e 94 3d ad 	call	0x15a7a	; 0x15a7a <__eewr_byte_m128>
	 eeprom_write_byte(&DefPrintAutoCut,2);
    387a:	83 e3       	ldi	r24, 0x33	; 51
    387c:	90 e0       	ldi	r25, 0x00	; 0
    387e:	62 e0       	ldi	r22, 0x02	; 2
    3880:	0e 94 3d ad 	call	0x15a7a	; 0x15a7a <__eewr_byte_m128>
	 eeprom_write_byte(&DefPrintLogo,0);
    3884:	84 e3       	ldi	r24, 0x34	; 52
    3886:	90 e0       	ldi	r25, 0x00	; 0
    3888:	60 e0       	ldi	r22, 0x00	; 0
    388a:	0e 94 3d ad 	call	0x15a7a	; 0x15a7a <__eewr_byte_m128>
	 eeprom_write_byte(&DefPrintSize,3);
    388e:	85 e3       	ldi	r24, 0x35	; 53
    3890:	90 e0       	ldi	r25, 0x00	; 0
    3892:	63 e0       	ldi	r22, 0x03	; 3
    3894:	0e 94 3d ad 	call	0x15a7a	; 0x15a7a <__eewr_byte_m128>

	 eeprom_write_byte(&DefConnectionHost,0);
    3898:	86 e3       	ldi	r24, 0x36	; 54
    389a:	90 e0       	ldi	r25, 0x00	; 0
    389c:	60 e0       	ldi	r22, 0x00	; 0
    389e:	0e 94 3d ad 	call	0x15a7a	; 0x15a7a <__eewr_byte_m128>
	 eeprom_write_byte(&DefShowDateTime,1);
    38a2:	87 e3       	ldi	r24, 0x37	; 55
    38a4:	90 e0       	ldi	r25, 0x00	; 0
    38a6:	61 e0       	ldi	r22, 0x01	; 1
    38a8:	0e 94 3d ad 	call	0x15a7a	; 0x15a7a <__eewr_byte_m128>
	 eeprom_write_byte(&DefNotifScreen,1);
    38ac:	88 e3       	ldi	r24, 0x38	; 56
    38ae:	90 e0       	ldi	r25, 0x00	; 0
    38b0:	61 e0       	ldi	r22, 0x01	; 1
    38b2:	0e 94 3d ad 	call	0x15a7a	; 0x15a7a <__eewr_byte_m128>

	 eeprom_write_byte(&DefDecimalPrice,0);
    38b6:	89 e3       	ldi	r24, 0x39	; 57
    38b8:	90 e0       	ldi	r25, 0x00	; 0
    38ba:	60 e0       	ldi	r22, 0x00	; 0
    38bc:	0e 94 3d ad 	call	0x15a7a	; 0x15a7a <__eewr_byte_m128>
	 eeprom_write_byte(&DefDecimalVolume,3);
    38c0:	8a e3       	ldi	r24, 0x3A	; 58
    38c2:	90 e0       	ldi	r25, 0x00	; 0
    38c4:	63 e0       	ldi	r22, 0x03	; 3
    38c6:	0e 94 3d ad 	call	0x15a7a	; 0x15a7a <__eewr_byte_m128>
	 eeprom_write_byte(&DefDecimalMoney,0);
    38ca:	8b e3       	ldi	r24, 0x3B	; 59
    38cc:	90 e0       	ldi	r25, 0x00	; 0
    38ce:	60 e0       	ldi	r22, 0x00	; 0
    38d0:	0e 94 3d ad 	call	0x15a7a	; 0x15a7a <__eewr_byte_m128>
	 eeprom_write_byte(&DefDecimalTotalVolume,2);
    38d4:	8d e3       	ldi	r24, 0x3D	; 61
    38d6:	90 e0       	ldi	r25, 0x00	; 0
    38d8:	62 e0       	ldi	r22, 0x02	; 2
    38da:	0e 94 3d ad 	call	0x15a7a	; 0x15a7a <__eewr_byte_m128>
	 eeprom_write_byte(&DefDecimalTotalMoney,0);
    38de:	8e e3       	ldi	r24, 0x3E	; 62
    38e0:	90 e0       	ldi	r25, 0x00	; 0
    38e2:	60 e0       	ldi	r22, 0x00	; 0
    38e4:	0e 94 3d ad 	call	0x15a7a	; 0x15a7a <__eewr_byte_m128>
	 eeprom_write_byte(&DefDecimalMark,',');
    38e8:	8f e3       	ldi	r24, 0x3F	; 63
    38ea:	90 e0       	ldi	r25, 0x00	; 0
    38ec:	6c e2       	ldi	r22, 0x2C	; 44
    38ee:	0e 94 3d ad 	call	0x15a7a	; 0x15a7a <__eewr_byte_m128>
	 eeprom_write_byte(&DefCurrencyMark,'.');
    38f2:	80 e4       	ldi	r24, 0x40	; 64
    38f4:	90 e0       	ldi	r25, 0x00	; 0
    38f6:	6e e2       	ldi	r22, 0x2E	; 46
    38f8:	0e 94 3d ad 	call	0x15a7a	; 0x15a7a <__eewr_byte_m128>

	 xArray[0]=',';	 xArray[1]='.'; 	 xArray[2]=' ';	 xArray[3]='/';  xArray[4]='-'; 
    38fc:	8c e2       	ldi	r24, 0x2C	; 44
    38fe:	89 83       	std	Y+1, r24	; 0x01
    3900:	8e e2       	ldi	r24, 0x2E	; 46
    3902:	8a 83       	std	Y+2, r24	; 0x02
    3904:	80 e2       	ldi	r24, 0x20	; 32
    3906:	8b 83       	std	Y+3, r24	; 0x03
    3908:	8f e2       	ldi	r24, 0x2F	; 47
    390a:	8c 83       	std	Y+4, r24	; 0x04
    390c:	8d e2       	ldi	r24, 0x2D	; 45
    390e:	8d 83       	std	Y+5, r24	; 0x05
	 eeprom_write_block((const void*) &xArray, (void*) &DefMarkMap, 5);
    3910:	c5 01       	movw	r24, r10
    3912:	61 e4       	ldi	r22, 0x41	; 65
    3914:	70 e0       	ldi	r23, 0x00	; 0
    3916:	45 e0       	ldi	r20, 0x05	; 5
    3918:	50 e0       	ldi	r21, 0x00	; 0
    391a:	0e 94 33 ad 	call	0x15a66	; 0x15a66 <__eewr_block_m128>

	 xArray[0]=1;	 xArray[1]=2; 	 xArray[2]=0;	 xArray[3]=0; xArray[4]=0;	 xArray[5]=0; xArray[6]=0;	 	 
    391e:	dd 24       	eor	r13, r13
    3920:	d3 94       	inc	r13
    3922:	d9 82       	std	Y+1, r13	; 0x01
    3924:	12 e0       	ldi	r17, 0x02	; 2
    3926:	1a 83       	std	Y+2, r17	; 0x02
    3928:	1b 82       	std	Y+3, r1	; 0x03
    392a:	1c 82       	std	Y+4, r1	; 0x04
    392c:	1d 82       	std	Y+5, r1	; 0x05
    392e:	1e 82       	std	Y+6, r1	; 0x06
    3930:	1f 82       	std	Y+7, r1	; 0x07
	 eeprom_write_block((const void*) &xArray, (void*) &DefPumpMap, 8);
    3932:	c5 01       	movw	r24, r10
    3934:	66 e4       	ldi	r22, 0x46	; 70
    3936:	70 e0       	ldi	r23, 0x00	; 0
    3938:	48 e0       	ldi	r20, 0x08	; 8
    393a:	50 e0       	ldi	r21, 0x00	; 0
    393c:	0e 94 33 ad 	call	0x15a66	; 0x15a66 <__eewr_block_m128>
	 eeprom_write_block((const void*) &xArray, (void*) &DefPumpLabel, 8);
    3940:	c5 01       	movw	r24, r10
    3942:	6e e4       	ldi	r22, 0x4E	; 78
    3944:	70 e0       	ldi	r23, 0x00	; 0
    3946:	48 e0       	ldi	r20, 0x08	; 8
    3948:	50 e0       	ldi	r21, 0x00	; 0
    394a:	0e 94 33 ad 	call	0x15a66	; 0x15a66 <__eewr_block_m128>

	 xArray[0]=1;	 xArray[1]=2; 	 xArray[2]=0;	 xArray[3]=0; xArray[4]=0;	 xArray[5]=0; 
    394e:	d9 82       	std	Y+1, r13	; 0x01
    3950:	1a 83       	std	Y+2, r17	; 0x02
    3952:	1b 82       	std	Y+3, r1	; 0x03
    3954:	1c 82       	std	Y+4, r1	; 0x04
    3956:	1d 82       	std	Y+5, r1	; 0x05
    3958:	1e 82       	std	Y+6, r1	; 0x06
	 eeprom_write_block((const void*) &xArray, (void*) &DefNozzleMap[0], 6);
    395a:	06 e5       	ldi	r16, 0x56	; 86
    395c:	10 e0       	ldi	r17, 0x00	; 0
    395e:	c5 01       	movw	r24, r10
    3960:	b8 01       	movw	r22, r16
    3962:	46 e0       	ldi	r20, 0x06	; 6
    3964:	50 e0       	ldi	r21, 0x00	; 0
    3966:	0e 94 33 ad 	call	0x15a66	; 0x15a66 <__eewr_block_m128>
	 eeprom_write_block((const void*) &xArray, (void*) &DefNozzleMap[1], 6);
    396a:	0a 5f       	subi	r16, 0xFA	; 250
    396c:	1f 4f       	sbci	r17, 0xFF	; 255
    396e:	c5 01       	movw	r24, r10
    3970:	b8 01       	movw	r22, r16
    3972:	46 e0       	ldi	r20, 0x06	; 6
    3974:	50 e0       	ldi	r21, 0x00	; 0
    3976:	0e 94 33 ad 	call	0x15a66	; 0x15a66 <__eewr_block_m128>

	 sprintf_P(strEEP,PSTR("6500"));
    397a:	00 d0       	rcall	.+0      	; 0x397c <MasterReset+0x1ba>
    397c:	00 d0       	rcall	.+0      	; 0x397e <MasterReset+0x1bc>
    397e:	ed b7       	in	r30, 0x3d	; 61
    3980:	fe b7       	in	r31, 0x3e	; 62
    3982:	f2 82       	std	Z+2, r15	; 0x02
    3984:	e1 82       	std	Z+1, r14	; 0x01
    3986:	83 e1       	ldi	r24, 0x13	; 19
    3988:	95 e0       	ldi	r25, 0x05	; 5
    398a:	94 83       	std	Z+4, r25	; 0x04
    398c:	83 83       	std	Z+3, r24	; 0x03
    398e:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductPrice[0], sizeof(DefProductPrice[0]));
    3992:	0f 90       	pop	r0
    3994:	0f 90       	pop	r0
    3996:	0f 90       	pop	r0
    3998:	0f 90       	pop	r0
    399a:	06 e8       	ldi	r16, 0x86	; 134
    399c:	10 e0       	ldi	r17, 0x00	; 0
    399e:	c7 01       	movw	r24, r14
    39a0:	b8 01       	movw	r22, r16
    39a2:	49 e0       	ldi	r20, 0x09	; 9
    39a4:	50 e0       	ldi	r21, 0x00	; 0
    39a6:	0e 94 33 ad 	call	0x15a66	; 0x15a66 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("7250"));
    39aa:	00 d0       	rcall	.+0      	; 0x39ac <MasterReset+0x1ea>
    39ac:	00 d0       	rcall	.+0      	; 0x39ae <MasterReset+0x1ec>
    39ae:	ed b7       	in	r30, 0x3d	; 61
    39b0:	fe b7       	in	r31, 0x3e	; 62
    39b2:	f2 82       	std	Z+2, r15	; 0x02
    39b4:	e1 82       	std	Z+1, r14	; 0x01
    39b6:	8e e0       	ldi	r24, 0x0E	; 14
    39b8:	95 e0       	ldi	r25, 0x05	; 5
    39ba:	94 83       	std	Z+4, r25	; 0x04
    39bc:	83 83       	std	Z+3, r24	; 0x03
    39be:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductPrice[1], sizeof(DefProductPrice[1]));
    39c2:	0f 90       	pop	r0
    39c4:	0f 90       	pop	r0
    39c6:	0f 90       	pop	r0
    39c8:	0f 90       	pop	r0
    39ca:	07 5f       	subi	r16, 0xF7	; 247
    39cc:	1f 4f       	sbci	r17, 0xFF	; 255
    39ce:	c7 01       	movw	r24, r14
    39d0:	b8 01       	movw	r22, r16
    39d2:	49 e0       	ldi	r20, 0x09	; 9
    39d4:	50 e0       	ldi	r21, 0x00	; 0
    39d6:	0e 94 33 ad 	call	0x15a66	; 0x15a66 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("4500"));
    39da:	00 d0       	rcall	.+0      	; 0x39dc <MasterReset+0x21a>
    39dc:	00 d0       	rcall	.+0      	; 0x39de <MasterReset+0x21c>
    39de:	ed b7       	in	r30, 0x3d	; 61
    39e0:	fe b7       	in	r31, 0x3e	; 62
    39e2:	f2 82       	std	Z+2, r15	; 0x02
    39e4:	e1 82       	std	Z+1, r14	; 0x01
    39e6:	89 e0       	ldi	r24, 0x09	; 9
    39e8:	95 e0       	ldi	r25, 0x05	; 5
    39ea:	94 83       	std	Z+4, r25	; 0x04
    39ec:	83 83       	std	Z+3, r24	; 0x03
    39ee:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductPrice[2], sizeof(DefProductPrice[2]));
    39f2:	0f 90       	pop	r0
    39f4:	0f 90       	pop	r0
    39f6:	0f 90       	pop	r0
    39f8:	0f 90       	pop	r0
    39fa:	07 5f       	subi	r16, 0xF7	; 247
    39fc:	1f 4f       	sbci	r17, 0xFF	; 255
    39fe:	c7 01       	movw	r24, r14
    3a00:	b8 01       	movw	r22, r16
    3a02:	49 e0       	ldi	r20, 0x09	; 9
    3a04:	50 e0       	ldi	r21, 0x00	; 0
    3a06:	0e 94 33 ad 	call	0x15a66	; 0x15a66 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("6500"));
    3a0a:	00 d0       	rcall	.+0      	; 0x3a0c <MasterReset+0x24a>
    3a0c:	00 d0       	rcall	.+0      	; 0x3a0e <MasterReset+0x24c>
    3a0e:	ed b7       	in	r30, 0x3d	; 61
    3a10:	fe b7       	in	r31, 0x3e	; 62
    3a12:	f2 82       	std	Z+2, r15	; 0x02
    3a14:	e1 82       	std	Z+1, r14	; 0x01
    3a16:	84 e0       	ldi	r24, 0x04	; 4
    3a18:	95 e0       	ldi	r25, 0x05	; 5
    3a1a:	94 83       	std	Z+4, r25	; 0x04
    3a1c:	83 83       	std	Z+3, r24	; 0x03
    3a1e:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductPrice[3], sizeof(DefProductPrice[3]));
    3a22:	0f 90       	pop	r0
    3a24:	0f 90       	pop	r0
    3a26:	0f 90       	pop	r0
    3a28:	0f 90       	pop	r0
    3a2a:	07 5f       	subi	r16, 0xF7	; 247
    3a2c:	1f 4f       	sbci	r17, 0xFF	; 255
    3a2e:	c7 01       	movw	r24, r14
    3a30:	b8 01       	movw	r22, r16
    3a32:	49 e0       	ldi	r20, 0x09	; 9
    3a34:	50 e0       	ldi	r21, 0x00	; 0
    3a36:	0e 94 33 ad 	call	0x15a66	; 0x15a66 <__eewr_block_m128>
     sprintf_P(strEEP,PSTR("4500"));
    3a3a:	00 d0       	rcall	.+0      	; 0x3a3c <MasterReset+0x27a>
    3a3c:	00 d0       	rcall	.+0      	; 0x3a3e <MasterReset+0x27c>
    3a3e:	ed b7       	in	r30, 0x3d	; 61
    3a40:	fe b7       	in	r31, 0x3e	; 62
    3a42:	f2 82       	std	Z+2, r15	; 0x02
    3a44:	e1 82       	std	Z+1, r14	; 0x01
    3a46:	8f ef       	ldi	r24, 0xFF	; 255
    3a48:	94 e0       	ldi	r25, 0x04	; 4
    3a4a:	94 83       	std	Z+4, r25	; 0x04
    3a4c:	83 83       	std	Z+3, r24	; 0x03
    3a4e:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductPrice[4], sizeof(DefProductPrice[4]));
    3a52:	0f 90       	pop	r0
    3a54:	0f 90       	pop	r0
    3a56:	0f 90       	pop	r0
    3a58:	0f 90       	pop	r0
    3a5a:	07 5f       	subi	r16, 0xF7	; 247
    3a5c:	1f 4f       	sbci	r17, 0xFF	; 255
    3a5e:	c7 01       	movw	r24, r14
    3a60:	b8 01       	movw	r22, r16
    3a62:	49 e0       	ldi	r20, 0x09	; 9
    3a64:	50 e0       	ldi	r21, 0x00	; 0
    3a66:	0e 94 33 ad 	call	0x15a66	; 0x15a66 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("6500"));
    3a6a:	00 d0       	rcall	.+0      	; 0x3a6c <MasterReset+0x2aa>
    3a6c:	00 d0       	rcall	.+0      	; 0x3a6e <MasterReset+0x2ac>
    3a6e:	ed b7       	in	r30, 0x3d	; 61
    3a70:	fe b7       	in	r31, 0x3e	; 62
    3a72:	f2 82       	std	Z+2, r15	; 0x02
    3a74:	e1 82       	std	Z+1, r14	; 0x01
    3a76:	8a ef       	ldi	r24, 0xFA	; 250
    3a78:	94 e0       	ldi	r25, 0x04	; 4
    3a7a:	94 83       	std	Z+4, r25	; 0x04
    3a7c:	83 83       	std	Z+3, r24	; 0x03
    3a7e:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductPrice[5], sizeof(DefProductPrice[5]));
    3a82:	0f 90       	pop	r0
    3a84:	0f 90       	pop	r0
    3a86:	0f 90       	pop	r0
    3a88:	0f 90       	pop	r0
    3a8a:	07 5f       	subi	r16, 0xF7	; 247
    3a8c:	1f 4f       	sbci	r17, 0xFF	; 255
    3a8e:	c7 01       	movw	r24, r14
    3a90:	b8 01       	movw	r22, r16
    3a92:	49 e0       	ldi	r20, 0x09	; 9
    3a94:	50 e0       	ldi	r21, 0x00	; 0
    3a96:	0e 94 33 ad 	call	0x15a66	; 0x15a66 <__eewr_block_m128>

	 sprintf_P(strEEP,PSTR("Pert+   "));
    3a9a:	00 d0       	rcall	.+0      	; 0x3a9c <MasterReset+0x2da>
    3a9c:	00 d0       	rcall	.+0      	; 0x3a9e <MasterReset+0x2dc>
    3a9e:	ed b7       	in	r30, 0x3d	; 61
    3aa0:	fe b7       	in	r31, 0x3e	; 62
    3aa2:	f2 82       	std	Z+2, r15	; 0x02
    3aa4:	e1 82       	std	Z+1, r14	; 0x01
    3aa6:	81 ef       	ldi	r24, 0xF1	; 241
    3aa8:	94 e0       	ldi	r25, 0x04	; 4
    3aaa:	94 83       	std	Z+4, r25	; 0x04
    3aac:	83 83       	std	Z+3, r24	; 0x03
    3aae:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductName[0], sizeof(DefProductName[0]));
    3ab2:	0f 90       	pop	r0
    3ab4:	0f 90       	pop	r0
    3ab6:	0f 90       	pop	r0
    3ab8:	0f 90       	pop	r0
    3aba:	0c eb       	ldi	r16, 0xBC	; 188
    3abc:	10 e0       	ldi	r17, 0x00	; 0
    3abe:	c7 01       	movw	r24, r14
    3ac0:	b8 01       	movw	r22, r16
    3ac2:	4d e0       	ldi	r20, 0x0D	; 13
    3ac4:	50 e0       	ldi	r21, 0x00	; 0
    3ac6:	0e 94 33 ad 	call	0x15a66	; 0x15a66 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("Pertamax"));
    3aca:	00 d0       	rcall	.+0      	; 0x3acc <MasterReset+0x30a>
    3acc:	00 d0       	rcall	.+0      	; 0x3ace <MasterReset+0x30c>
    3ace:	ed b7       	in	r30, 0x3d	; 61
    3ad0:	fe b7       	in	r31, 0x3e	; 62
    3ad2:	f2 82       	std	Z+2, r15	; 0x02
    3ad4:	e1 82       	std	Z+1, r14	; 0x01
    3ad6:	88 ee       	ldi	r24, 0xE8	; 232
    3ad8:	94 e0       	ldi	r25, 0x04	; 4
    3ada:	94 83       	std	Z+4, r25	; 0x04
    3adc:	83 83       	std	Z+3, r24	; 0x03
    3ade:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductName[1], sizeof(DefProductName[1]));
    3ae2:	0f 90       	pop	r0
    3ae4:	0f 90       	pop	r0
    3ae6:	0f 90       	pop	r0
    3ae8:	0f 90       	pop	r0
    3aea:	03 5f       	subi	r16, 0xF3	; 243
    3aec:	1f 4f       	sbci	r17, 0xFF	; 255
    3aee:	c7 01       	movw	r24, r14
    3af0:	b8 01       	movw	r22, r16
    3af2:	4d e0       	ldi	r20, 0x0D	; 13
    3af4:	50 e0       	ldi	r21, 0x00	; 0
    3af6:	0e 94 33 ad 	call	0x15a66	; 0x15a66 <__eewr_block_m128>
     sprintf_P(strEEP,PSTR("Premium "));
    3afa:	00 d0       	rcall	.+0      	; 0x3afc <MasterReset+0x33a>
    3afc:	00 d0       	rcall	.+0      	; 0x3afe <MasterReset+0x33c>
    3afe:	ed b7       	in	r30, 0x3d	; 61
    3b00:	fe b7       	in	r31, 0x3e	; 62
    3b02:	f2 82       	std	Z+2, r15	; 0x02
    3b04:	e1 82       	std	Z+1, r14	; 0x01
    3b06:	8f ed       	ldi	r24, 0xDF	; 223
    3b08:	94 e0       	ldi	r25, 0x04	; 4
    3b0a:	94 83       	std	Z+4, r25	; 0x04
    3b0c:	83 83       	std	Z+3, r24	; 0x03
    3b0e:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductName[2], sizeof(DefProductName[2]));
    3b12:	0f 90       	pop	r0
    3b14:	0f 90       	pop	r0
    3b16:	0f 90       	pop	r0
    3b18:	0f 90       	pop	r0
    3b1a:	03 5f       	subi	r16, 0xF3	; 243
    3b1c:	1f 4f       	sbci	r17, 0xFF	; 255
    3b1e:	c7 01       	movw	r24, r14
    3b20:	b8 01       	movw	r22, r16
    3b22:	4d e0       	ldi	r20, 0x0D	; 13
    3b24:	50 e0       	ldi	r21, 0x00	; 0
    3b26:	0e 94 33 ad 	call	0x15a66	; 0x15a66 <__eewr_block_m128>
     sprintf_P(strEEP,PSTR("Solar   "));
    3b2a:	00 d0       	rcall	.+0      	; 0x3b2c <MasterReset+0x36a>
    3b2c:	00 d0       	rcall	.+0      	; 0x3b2e <MasterReset+0x36c>
    3b2e:	ed b7       	in	r30, 0x3d	; 61
    3b30:	fe b7       	in	r31, 0x3e	; 62
    3b32:	f2 82       	std	Z+2, r15	; 0x02
    3b34:	e1 82       	std	Z+1, r14	; 0x01
    3b36:	86 ed       	ldi	r24, 0xD6	; 214
    3b38:	94 e0       	ldi	r25, 0x04	; 4
    3b3a:	94 83       	std	Z+4, r25	; 0x04
    3b3c:	83 83       	std	Z+3, r24	; 0x03
    3b3e:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductName[3], sizeof(DefProductName[3]));
    3b42:	0f 90       	pop	r0
    3b44:	0f 90       	pop	r0
    3b46:	0f 90       	pop	r0
    3b48:	0f 90       	pop	r0
    3b4a:	03 5f       	subi	r16, 0xF3	; 243
    3b4c:	1f 4f       	sbci	r17, 0xFF	; 255
    3b4e:	c7 01       	movw	r24, r14
    3b50:	b8 01       	movw	r22, r16
    3b52:	4d e0       	ldi	r20, 0x0D	; 13
    3b54:	50 e0       	ldi	r21, 0x00	; 0
    3b56:	0e 94 33 ad 	call	0x15a66	; 0x15a66 <__eewr_block_m128>
     sprintf_P(strEEP,PSTR("BioSolr "));
    3b5a:	00 d0       	rcall	.+0      	; 0x3b5c <MasterReset+0x39a>
    3b5c:	00 d0       	rcall	.+0      	; 0x3b5e <MasterReset+0x39c>
    3b5e:	ed b7       	in	r30, 0x3d	; 61
    3b60:	fe b7       	in	r31, 0x3e	; 62
    3b62:	f2 82       	std	Z+2, r15	; 0x02
    3b64:	e1 82       	std	Z+1, r14	; 0x01
    3b66:	8d ec       	ldi	r24, 0xCD	; 205
    3b68:	94 e0       	ldi	r25, 0x04	; 4
    3b6a:	94 83       	std	Z+4, r25	; 0x04
    3b6c:	83 83       	std	Z+3, r24	; 0x03
    3b6e:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductName[4], sizeof(DefProductName[4]));
    3b72:	0f 90       	pop	r0
    3b74:	0f 90       	pop	r0
    3b76:	0f 90       	pop	r0
    3b78:	0f 90       	pop	r0
    3b7a:	03 5f       	subi	r16, 0xF3	; 243
    3b7c:	1f 4f       	sbci	r17, 0xFF	; 255
    3b7e:	c7 01       	movw	r24, r14
    3b80:	b8 01       	movw	r22, r16
    3b82:	4d e0       	ldi	r20, 0x0D	; 13
    3b84:	50 e0       	ldi	r21, 0x00	; 0
    3b86:	0e 94 33 ad 	call	0x15a66	; 0x15a66 <__eewr_block_m128>
     sprintf_P(strEEP,PSTR("Diesel  "));
    3b8a:	00 d0       	rcall	.+0      	; 0x3b8c <MasterReset+0x3ca>
    3b8c:	00 d0       	rcall	.+0      	; 0x3b8e <MasterReset+0x3cc>
    3b8e:	ed b7       	in	r30, 0x3d	; 61
    3b90:	fe b7       	in	r31, 0x3e	; 62
    3b92:	f2 82       	std	Z+2, r15	; 0x02
    3b94:	e1 82       	std	Z+1, r14	; 0x01
    3b96:	84 ec       	ldi	r24, 0xC4	; 196
    3b98:	94 e0       	ldi	r25, 0x04	; 4
    3b9a:	94 83       	std	Z+4, r25	; 0x04
    3b9c:	83 83       	std	Z+3, r24	; 0x03
    3b9e:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefProductName[5], sizeof(DefProductName[5]));
    3ba2:	0f 90       	pop	r0
    3ba4:	0f 90       	pop	r0
    3ba6:	0f 90       	pop	r0
    3ba8:	0f 90       	pop	r0
    3baa:	c7 01       	movw	r24, r14
    3bac:	6d ef       	ldi	r22, 0xFD	; 253
    3bae:	70 e0       	ldi	r23, 0x00	; 0
    3bb0:	4d e0       	ldi	r20, 0x0D	; 13
    3bb2:	50 e0       	ldi	r21, 0x00	; 0
    3bb4:	0e 94 33 ad 	call	0x15a66	; 0x15a66 <__eewr_block_m128>

	 sprintf_P(strEEP,PSTR("BCA"));
    3bb8:	00 d0       	rcall	.+0      	; 0x3bba <MasterReset+0x3f8>
    3bba:	00 d0       	rcall	.+0      	; 0x3bbc <MasterReset+0x3fa>
    3bbc:	ed b7       	in	r30, 0x3d	; 61
    3bbe:	fe b7       	in	r31, 0x3e	; 62
    3bc0:	f2 82       	std	Z+2, r15	; 0x02
    3bc2:	e1 82       	std	Z+1, r14	; 0x01
    3bc4:	80 ec       	ldi	r24, 0xC0	; 192
    3bc6:	94 e0       	ldi	r25, 0x04	; 4
    3bc8:	94 83       	std	Z+4, r25	; 0x04
    3bca:	83 83       	std	Z+3, r24	; 0x03
    3bcc:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefBankName[0], sizeof(DefBankName[0]));
    3bd0:	0f 90       	pop	r0
    3bd2:	0f 90       	pop	r0
    3bd4:	0f 90       	pop	r0
    3bd6:	0f 90       	pop	r0
    3bd8:	0a e0       	ldi	r16, 0x0A	; 10
    3bda:	11 e0       	ldi	r17, 0x01	; 1
    3bdc:	c7 01       	movw	r24, r14
    3bde:	b8 01       	movw	r22, r16
    3be0:	4b e0       	ldi	r20, 0x0B	; 11
    3be2:	50 e0       	ldi	r21, 0x00	; 0
    3be4:	0e 94 33 ad 	call	0x15a66	; 0x15a66 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("Mandiri"));
    3be8:	00 d0       	rcall	.+0      	; 0x3bea <MasterReset+0x428>
    3bea:	00 d0       	rcall	.+0      	; 0x3bec <MasterReset+0x42a>
    3bec:	ed b7       	in	r30, 0x3d	; 61
    3bee:	fe b7       	in	r31, 0x3e	; 62
    3bf0:	f2 82       	std	Z+2, r15	; 0x02
    3bf2:	e1 82       	std	Z+1, r14	; 0x01
    3bf4:	88 eb       	ldi	r24, 0xB8	; 184
    3bf6:	94 e0       	ldi	r25, 0x04	; 4
    3bf8:	94 83       	std	Z+4, r25	; 0x04
    3bfa:	83 83       	std	Z+3, r24	; 0x03
    3bfc:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefBankName[1], sizeof(DefBankName[1]));
    3c00:	0f 90       	pop	r0
    3c02:	0f 90       	pop	r0
    3c04:	0f 90       	pop	r0
    3c06:	0f 90       	pop	r0
    3c08:	05 5f       	subi	r16, 0xF5	; 245
    3c0a:	1f 4f       	sbci	r17, 0xFF	; 255
    3c0c:	c7 01       	movw	r24, r14
    3c0e:	b8 01       	movw	r22, r16
    3c10:	4b e0       	ldi	r20, 0x0B	; 11
    3c12:	50 e0       	ldi	r21, 0x00	; 0
    3c14:	0e 94 33 ad 	call	0x15a66	; 0x15a66 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("BNI"));
    3c18:	00 d0       	rcall	.+0      	; 0x3c1a <MasterReset+0x458>
    3c1a:	00 d0       	rcall	.+0      	; 0x3c1c <MasterReset+0x45a>
    3c1c:	ed b7       	in	r30, 0x3d	; 61
    3c1e:	fe b7       	in	r31, 0x3e	; 62
    3c20:	f2 82       	std	Z+2, r15	; 0x02
    3c22:	e1 82       	std	Z+1, r14	; 0x01
    3c24:	84 eb       	ldi	r24, 0xB4	; 180
    3c26:	94 e0       	ldi	r25, 0x04	; 4
    3c28:	94 83       	std	Z+4, r25	; 0x04
    3c2a:	83 83       	std	Z+3, r24	; 0x03
    3c2c:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefBankName[2], sizeof(DefBankName[2]));
    3c30:	0f 90       	pop	r0
    3c32:	0f 90       	pop	r0
    3c34:	0f 90       	pop	r0
    3c36:	0f 90       	pop	r0
    3c38:	05 5f       	subi	r16, 0xF5	; 245
    3c3a:	1f 4f       	sbci	r17, 0xFF	; 255
    3c3c:	c7 01       	movw	r24, r14
    3c3e:	b8 01       	movw	r22, r16
    3c40:	4b e0       	ldi	r20, 0x0B	; 11
    3c42:	50 e0       	ldi	r21, 0x00	; 0
    3c44:	0e 94 33 ad 	call	0x15a66	; 0x15a66 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("BRI"));
    3c48:	00 d0       	rcall	.+0      	; 0x3c4a <MasterReset+0x488>
    3c4a:	00 d0       	rcall	.+0      	; 0x3c4c <MasterReset+0x48a>
    3c4c:	ed b7       	in	r30, 0x3d	; 61
    3c4e:	fe b7       	in	r31, 0x3e	; 62
    3c50:	f2 82       	std	Z+2, r15	; 0x02
    3c52:	e1 82       	std	Z+1, r14	; 0x01
    3c54:	80 eb       	ldi	r24, 0xB0	; 176
    3c56:	94 e0       	ldi	r25, 0x04	; 4
    3c58:	94 83       	std	Z+4, r25	; 0x04
    3c5a:	83 83       	std	Z+3, r24	; 0x03
    3c5c:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefBankName[3], sizeof(DefBankName[3]));
    3c60:	0f 90       	pop	r0
    3c62:	0f 90       	pop	r0
    3c64:	0f 90       	pop	r0
    3c66:	0f 90       	pop	r0
    3c68:	05 5f       	subi	r16, 0xF5	; 245
    3c6a:	1f 4f       	sbci	r17, 0xFF	; 255
    3c6c:	c7 01       	movw	r24, r14
    3c6e:	b8 01       	movw	r22, r16
    3c70:	4b e0       	ldi	r20, 0x0B	; 11
    3c72:	50 e0       	ldi	r21, 0x00	; 0
    3c74:	0e 94 33 ad 	call	0x15a66	; 0x15a66 <__eewr_block_m128>

	 eeprom_write_byte(&DefPrintInitialize,False);
    3c78:	86 e3       	ldi	r24, 0x36	; 54
    3c7a:	91 e0       	ldi	r25, 0x01	; 1
    3c7c:	60 e0       	ldi	r22, 0x00	; 0
    3c7e:	0e 94 3d ad 	call	0x15a7a	; 0x15a7a <__eewr_byte_m128>
	 eeprom_write_byte(&DefInitIFT,IT_SLAVE);
    3c82:	87 e3       	ldi	r24, 0x37	; 55
    3c84:	91 e0       	ldi	r25, 0x01	; 1
    3c86:	61 e0       	ldi	r22, 0x01	; 1
    3c88:	0e 94 3d ad 	call	0x15a7a	; 0x15a7a <__eewr_byte_m128>
	 eeprom_write_byte(&DefDispenserBrand,ST_GILBARCO);//ST_WAYNE_DART;
    3c8c:	88 e3       	ldi	r24, 0x38	; 56
    3c8e:	91 e0       	ldi	r25, 0x01	; 1
    3c90:	61 e0       	ldi	r22, 0x01	; 1
    3c92:	0e 94 3d ad 	call	0x15a7a	; 0x15a7a <__eewr_byte_m128>

	 sprintf_P(strEEP,PSTR("000000"));
    3c96:	00 d0       	rcall	.+0      	; 0x3c98 <MasterReset+0x4d6>
    3c98:	00 d0       	rcall	.+0      	; 0x3c9a <MasterReset+0x4d8>
    3c9a:	ed b7       	in	r30, 0x3d	; 61
    3c9c:	fe b7       	in	r31, 0x3e	; 62
    3c9e:	f2 82       	std	Z+2, r15	; 0x02
    3ca0:	e1 82       	std	Z+1, r14	; 0x01
    3ca2:	89 ea       	ldi	r24, 0xA9	; 169
    3ca4:	94 e0       	ldi	r25, 0x04	; 4
    3ca6:	94 83       	std	Z+4, r25	; 0x04
    3ca8:	83 83       	std	Z+3, r24	; 0x03
    3caa:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefTransactionNumber, sizeof(DefTransactionNumber));
    3cae:	0f 90       	pop	r0
    3cb0:	0f 90       	pop	r0
    3cb2:	0f 90       	pop	r0
    3cb4:	0f 90       	pop	r0
    3cb6:	c7 01       	movw	r24, r14
    3cb8:	69 e3       	ldi	r22, 0x39	; 57
    3cba:	71 e0       	ldi	r23, 0x01	; 1
    3cbc:	47 e0       	ldi	r20, 0x07	; 7
    3cbe:	50 e0       	ldi	r21, 0x00	; 0
    3cc0:	0e 94 33 ad 	call	0x15a66	; 0x15a66 <__eewr_block_m128>

     eeprom_write_byte(&DefShift,1);
    3cc4:	80 e4       	ldi	r24, 0x40	; 64
    3cc6:	91 e0       	ldi	r25, 0x01	; 1
    3cc8:	61 e0       	ldi	r22, 0x01	; 1
    3cca:	0e 94 3d ad 	call	0x15a7a	; 0x15a7a <__eewr_byte_m128>

	 xArray[0]=br9600;	 xArray[1]=br9600; 	 xArray[2]=br5787;	 xArray[3]=br9600;
    3cce:	d9 82       	std	Y+1, r13	; 0x01
    3cd0:	da 82       	std	Y+2, r13	; 0x02
    3cd2:	83 e0       	ldi	r24, 0x03	; 3
    3cd4:	8b 83       	std	Y+3, r24	; 0x03
    3cd6:	dc 82       	std	Y+4, r13	; 0x04
	 eeprom_write_block((const void*) &xArray, (void*) &DefBaudrate, 4);
    3cd8:	c5 01       	movw	r24, r10
    3cda:	61 e4       	ldi	r22, 0x41	; 65
    3cdc:	71 e0       	ldi	r23, 0x01	; 1
    3cde:	44 e0       	ldi	r20, 0x04	; 4
    3ce0:	50 e0       	ldi	r21, 0x00	; 0
    3ce2:	0e 94 33 ad 	call	0x15a66	; 0x15a66 <__eewr_block_m128>

     eeprom_write_byte(&DefPoolingPumpMax,MAX_PUMP);
    3ce6:	85 e4       	ldi	r24, 0x45	; 69
    3ce8:	91 e0       	ldi	r25, 0x01	; 1
    3cea:	64 e0       	ldi	r22, 0x04	; 4
    3cec:	0e 94 3d ad 	call	0x15a7a	; 0x15a7a <__eewr_byte_m128>
     eeprom_write_byte(&DefPoolingNoPumpCount,NO_PUMP_COUNT_MAX);
    3cf0:	86 e4       	ldi	r24, 0x46	; 70
    3cf2:	91 e0       	ldi	r25, 0x01	; 1
    3cf4:	65 e0       	ldi	r22, 0x05	; 5
    3cf6:	0e 94 3d ad 	call	0x15a7a	; 0x15a7a <__eewr_byte_m128>
     eeprom_write_byte(&DefPoolingTryResend,TRY_RESEND);
    3cfa:	87 e4       	ldi	r24, 0x47	; 71
    3cfc:	91 e0       	ldi	r25, 0x01	; 1
    3cfe:	62 e0       	ldi	r22, 0x02	; 2
    3d00:	0e 94 3d ad 	call	0x15a7a	; 0x15a7a <__eewr_byte_m128>
     eeprom_write_byte(&DefPoolingSendTimeout,SEND_TIMEOUT);
    3d04:	88 e4       	ldi	r24, 0x48	; 72
    3d06:	91 e0       	ldi	r25, 0x01	; 1
    3d08:	65 e0       	ldi	r22, 0x05	; 5
    3d0a:	0e 94 3d ad 	call	0x15a7a	; 0x15a7a <__eewr_byte_m128>
     eeprom_write_byte(&DefPoolingDelayNextPump,DELAY_NEXT_PUMP);
    3d0e:	89 e4       	ldi	r24, 0x49	; 73
    3d10:	91 e0       	ldi	r25, 0x01	; 1
    3d12:	65 e0       	ldi	r22, 0x05	; 5
    3d14:	0e 94 3d ad 	call	0x15a7a	; 0x15a7a <__eewr_byte_m128>
     eeprom_write_byte(&DefActivePump,ACTIVE_PUMP);
    3d18:	8a e4       	ldi	r24, 0x4A	; 74
    3d1a:	91 e0       	ldi	r25, 0x01	; 1
    3d1c:	64 e0       	ldi	r22, 0x04	; 4
    3d1e:	0e 94 3d ad 	call	0x15a7a	; 0x15a7a <__eewr_byte_m128>
     eeprom_write_byte(&DefSequenceTimeout,SEQUENCE_TIMEOUT);
    3d22:	8b e4       	ldi	r24, 0x4B	; 75
    3d24:	91 e0       	ldi	r25, 0x01	; 1
    3d26:	6a e0       	ldi	r22, 0x0A	; 10
    3d28:	0e 94 3d ad 	call	0x15a7a	; 0x15a7a <__eewr_byte_m128>

     eeprom_write_byte(&DefPrintMoney,True);
    3d2c:	82 ec       	ldi	r24, 0xC2	; 194
    3d2e:	93 e0       	ldi	r25, 0x03	; 3
    3d30:	61 e0       	ldi	r22, 0x01	; 1
    3d32:	0e 94 3d ad 	call	0x15a7a	; 0x15a7a <__eewr_byte_m128>
	 eeprom_write_byte(&DefHGMode,HM_232);//HM_TTL,HM_232,HM_485
    3d36:	83 ec       	ldi	r24, 0xC3	; 195
    3d38:	93 e0       	ldi	r25, 0x03	; 3
    3d3a:	61 e0       	ldi	r22, 0x01	; 1
    3d3c:	0e 94 3d ad 	call	0x15a7a	; 0x15a7a <__eewr_byte_m128>

	 sprintf_P(strEEP,PSTR("    PT. HANINDO AUTOMATION SOLUTIONS    "));
    3d40:	00 d0       	rcall	.+0      	; 0x3d42 <MasterReset+0x580>
    3d42:	00 d0       	rcall	.+0      	; 0x3d44 <MasterReset+0x582>
    3d44:	ed b7       	in	r30, 0x3d	; 61
    3d46:	fe b7       	in	r31, 0x3e	; 62
    3d48:	f2 82       	std	Z+2, r15	; 0x02
    3d4a:	e1 82       	std	Z+1, r14	; 0x01
    3d4c:	80 e8       	ldi	r24, 0x80	; 128
    3d4e:	94 e0       	ldi	r25, 0x04	; 4
    3d50:	94 83       	std	Z+4, r25	; 0x04
    3d52:	83 83       	std	Z+3, r24	; 0x03
    3d54:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefHeaderFooter[0],41);
    3d58:	0f 90       	pop	r0
    3d5a:	0f 90       	pop	r0
    3d5c:	0f 90       	pop	r0
    3d5e:	0f 90       	pop	r0
    3d60:	08 e2       	ldi	r16, 0x28	; 40
    3d62:	12 e0       	ldi	r17, 0x02	; 2
    3d64:	c7 01       	movw	r24, r14
    3d66:	b8 01       	movw	r22, r16
    3d68:	49 e2       	ldi	r20, 0x29	; 41
    3d6a:	50 e0       	ldi	r21, 0x00	; 0
    3d6c:	0e 94 33 ad 	call	0x15a66	; 0x15a66 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("        JL. RS Fatmawati No.55          "));
    3d70:	00 d0       	rcall	.+0      	; 0x3d72 <MasterReset+0x5b0>
    3d72:	00 d0       	rcall	.+0      	; 0x3d74 <MasterReset+0x5b2>
    3d74:	ed b7       	in	r30, 0x3d	; 61
    3d76:	fe b7       	in	r31, 0x3e	; 62
    3d78:	f2 82       	std	Z+2, r15	; 0x02
    3d7a:	e1 82       	std	Z+1, r14	; 0x01
    3d7c:	87 e5       	ldi	r24, 0x57	; 87
    3d7e:	94 e0       	ldi	r25, 0x04	; 4
    3d80:	94 83       	std	Z+4, r25	; 0x04
    3d82:	83 83       	std	Z+3, r24	; 0x03
    3d84:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefHeaderFooter[1],41);
    3d88:	0f 90       	pop	r0
    3d8a:	0f 90       	pop	r0
    3d8c:	0f 90       	pop	r0
    3d8e:	0f 90       	pop	r0
    3d90:	07 5d       	subi	r16, 0xD7	; 215
    3d92:	1f 4f       	sbci	r17, 0xFF	; 255
    3d94:	c7 01       	movw	r24, r14
    3d96:	b8 01       	movw	r22, r16
    3d98:	49 e2       	ldi	r20, 0x29	; 41
    3d9a:	50 e0       	ldi	r21, 0x00	; 0
    3d9c:	0e 94 33 ad 	call	0x15a66	; 0x15a66 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("            Jakarta Selatan             "));
    3da0:	00 d0       	rcall	.+0      	; 0x3da2 <MasterReset+0x5e0>
    3da2:	00 d0       	rcall	.+0      	; 0x3da4 <MasterReset+0x5e2>
    3da4:	ed b7       	in	r30, 0x3d	; 61
    3da6:	fe b7       	in	r31, 0x3e	; 62
    3da8:	f2 82       	std	Z+2, r15	; 0x02
    3daa:	e1 82       	std	Z+1, r14	; 0x01
    3dac:	8e e2       	ldi	r24, 0x2E	; 46
    3dae:	94 e0       	ldi	r25, 0x04	; 4
    3db0:	94 83       	std	Z+4, r25	; 0x04
    3db2:	83 83       	std	Z+3, r24	; 0x03
    3db4:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefHeaderFooter[2],41);
    3db8:	0f 90       	pop	r0
    3dba:	0f 90       	pop	r0
    3dbc:	0f 90       	pop	r0
    3dbe:	0f 90       	pop	r0
    3dc0:	c7 01       	movw	r24, r14
    3dc2:	6a e7       	ldi	r22, 0x7A	; 122
    3dc4:	72 e0       	ldi	r23, 0x02	; 2
    3dc6:	49 e2       	ldi	r20, 0x29	; 41
    3dc8:	50 e0       	ldi	r21, 0x00	; 0
    3dca:	0e 94 33 ad 	call	0x15a66	; 0x15a66 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("                                        "));
    3dce:	00 d0       	rcall	.+0      	; 0x3dd0 <MasterReset+0x60e>
    3dd0:	00 d0       	rcall	.+0      	; 0x3dd2 <MasterReset+0x610>
    3dd2:	ed b7       	in	r30, 0x3d	; 61
    3dd4:	fe b7       	in	r31, 0x3e	; 62
    3dd6:	f2 82       	std	Z+2, r15	; 0x02
    3dd8:	e1 82       	std	Z+1, r14	; 0x01
    3dda:	85 e0       	ldi	r24, 0x05	; 5
    3ddc:	94 e0       	ldi	r25, 0x04	; 4
    3dde:	94 83       	std	Z+4, r25	; 0x04
    3de0:	83 83       	std	Z+3, r24	; 0x03
    3de2:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefHeaderFooter[3],41);
    3de6:	0f 90       	pop	r0
    3de8:	0f 90       	pop	r0
    3dea:	0f 90       	pop	r0
    3dec:	0f 90       	pop	r0
    3dee:	c7 01       	movw	r24, r14
    3df0:	63 ea       	ldi	r22, 0xA3	; 163
    3df2:	72 e0       	ldi	r23, 0x02	; 2
    3df4:	49 e2       	ldi	r20, 0x29	; 41
    3df6:	50 e0       	ldi	r21, 0x00	; 0
    3df8:	0e 94 33 ad 	call	0x15a66	; 0x15a66 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("                                        "));
    3dfc:	00 d0       	rcall	.+0      	; 0x3dfe <MasterReset+0x63c>
    3dfe:	00 d0       	rcall	.+0      	; 0x3e00 <MasterReset+0x63e>
    3e00:	ed b7       	in	r30, 0x3d	; 61
    3e02:	fe b7       	in	r31, 0x3e	; 62
    3e04:	f2 82       	std	Z+2, r15	; 0x02
    3e06:	e1 82       	std	Z+1, r14	; 0x01
    3e08:	8c ed       	ldi	r24, 0xDC	; 220
    3e0a:	93 e0       	ldi	r25, 0x03	; 3
    3e0c:	94 83       	std	Z+4, r25	; 0x04
    3e0e:	83 83       	std	Z+3, r24	; 0x03
    3e10:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefHeaderFooter[4],41);
    3e14:	0f 90       	pop	r0
    3e16:	0f 90       	pop	r0
    3e18:	0f 90       	pop	r0
    3e1a:	0f 90       	pop	r0
    3e1c:	c7 01       	movw	r24, r14
    3e1e:	6c ec       	ldi	r22, 0xCC	; 204
    3e20:	72 e0       	ldi	r23, 0x02	; 2
    3e22:	49 e2       	ldi	r20, 0x29	; 41
    3e24:	50 e0       	ldi	r21, 0x00	; 0
    3e26:	0e 94 33 ad 	call	0x15a66	; 0x15a66 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("                                        "));
    3e2a:	00 d0       	rcall	.+0      	; 0x3e2c <MasterReset+0x66a>
    3e2c:	00 d0       	rcall	.+0      	; 0x3e2e <MasterReset+0x66c>
    3e2e:	ed b7       	in	r30, 0x3d	; 61
    3e30:	fe b7       	in	r31, 0x3e	; 62
    3e32:	f2 82       	std	Z+2, r15	; 0x02
    3e34:	e1 82       	std	Z+1, r14	; 0x01
    3e36:	83 eb       	ldi	r24, 0xB3	; 179
    3e38:	93 e0       	ldi	r25, 0x03	; 3
    3e3a:	94 83       	std	Z+4, r25	; 0x04
    3e3c:	83 83       	std	Z+3, r24	; 0x03
    3e3e:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefHeaderFooter[5],41);
    3e42:	0f 90       	pop	r0
    3e44:	0f 90       	pop	r0
    3e46:	0f 90       	pop	r0
    3e48:	0f 90       	pop	r0
    3e4a:	c7 01       	movw	r24, r14
    3e4c:	65 ef       	ldi	r22, 0xF5	; 245
    3e4e:	72 e0       	ldi	r23, 0x02	; 2
    3e50:	49 e2       	ldi	r20, 0x29	; 41
    3e52:	50 e0       	ldi	r21, 0x00	; 0
    3e54:	0e 94 33 ad 	call	0x15a66	; 0x15a66 <__eewr_block_m128>

	 sprintf_P(strEEP,PSTR("             Terima Kasih               "));
    3e58:	00 d0       	rcall	.+0      	; 0x3e5a <MasterReset+0x698>
    3e5a:	00 d0       	rcall	.+0      	; 0x3e5c <MasterReset+0x69a>
    3e5c:	ed b7       	in	r30, 0x3d	; 61
    3e5e:	fe b7       	in	r31, 0x3e	; 62
    3e60:	f2 82       	std	Z+2, r15	; 0x02
    3e62:	e1 82       	std	Z+1, r14	; 0x01
    3e64:	8a e8       	ldi	r24, 0x8A	; 138
    3e66:	93 e0       	ldi	r25, 0x03	; 3
    3e68:	94 83       	std	Z+4, r25	; 0x04
    3e6a:	83 83       	std	Z+3, r24	; 0x03
    3e6c:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefHeaderFooter[6],41);
    3e70:	0f 90       	pop	r0
    3e72:	0f 90       	pop	r0
    3e74:	0f 90       	pop	r0
    3e76:	0f 90       	pop	r0
    3e78:	c7 01       	movw	r24, r14
    3e7a:	6e e1       	ldi	r22, 0x1E	; 30
    3e7c:	73 e0       	ldi	r23, 0x03	; 3
    3e7e:	49 e2       	ldi	r20, 0x29	; 41
    3e80:	50 e0       	ldi	r21, 0x00	; 0
    3e82:	0e 94 33 ad 	call	0x15a66	; 0x15a66 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("            Selamat  Jalan              "));
    3e86:	00 d0       	rcall	.+0      	; 0x3e88 <MasterReset+0x6c6>
    3e88:	00 d0       	rcall	.+0      	; 0x3e8a <MasterReset+0x6c8>
    3e8a:	ed b7       	in	r30, 0x3d	; 61
    3e8c:	fe b7       	in	r31, 0x3e	; 62
    3e8e:	f2 82       	std	Z+2, r15	; 0x02
    3e90:	e1 82       	std	Z+1, r14	; 0x01
    3e92:	81 e6       	ldi	r24, 0x61	; 97
    3e94:	93 e0       	ldi	r25, 0x03	; 3
    3e96:	94 83       	std	Z+4, r25	; 0x04
    3e98:	83 83       	std	Z+3, r24	; 0x03
    3e9a:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefHeaderFooter[7],41);
    3e9e:	0f 90       	pop	r0
    3ea0:	0f 90       	pop	r0
    3ea2:	0f 90       	pop	r0
    3ea4:	0f 90       	pop	r0
    3ea6:	c7 01       	movw	r24, r14
    3ea8:	67 e4       	ldi	r22, 0x47	; 71
    3eaa:	73 e0       	ldi	r23, 0x03	; 3
    3eac:	49 e2       	ldi	r20, 0x29	; 41
    3eae:	50 e0       	ldi	r21, 0x00	; 0
    3eb0:	0e 94 33 ad 	call	0x15a66	; 0x15a66 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("      Semoga Selamat Sampai Tujuan      "));
    3eb4:	00 d0       	rcall	.+0      	; 0x3eb6 <MasterReset+0x6f4>
    3eb6:	00 d0       	rcall	.+0      	; 0x3eb8 <MasterReset+0x6f6>
    3eb8:	ed b7       	in	r30, 0x3d	; 61
    3eba:	fe b7       	in	r31, 0x3e	; 62
    3ebc:	f2 82       	std	Z+2, r15	; 0x02
    3ebe:	e1 82       	std	Z+1, r14	; 0x01
    3ec0:	88 e3       	ldi	r24, 0x38	; 56
    3ec2:	93 e0       	ldi	r25, 0x03	; 3
    3ec4:	94 83       	std	Z+4, r25	; 0x04
    3ec6:	83 83       	std	Z+3, r24	; 0x03
    3ec8:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefHeaderFooter[8],41);
    3ecc:	0f 90       	pop	r0
    3ece:	0f 90       	pop	r0
    3ed0:	0f 90       	pop	r0
    3ed2:	0f 90       	pop	r0
    3ed4:	c7 01       	movw	r24, r14
    3ed6:	60 e7       	ldi	r22, 0x70	; 112
    3ed8:	73 e0       	ldi	r23, 0x03	; 3
    3eda:	49 e2       	ldi	r20, 0x29	; 41
    3edc:	50 e0       	ldi	r21, 0x00	; 0
    3ede:	0e 94 33 ad 	call	0x15a66	; 0x15a66 <__eewr_block_m128>
	 sprintf_P(strEEP,PSTR("                                        "));
    3ee2:	00 d0       	rcall	.+0      	; 0x3ee4 <MasterReset+0x722>
    3ee4:	00 d0       	rcall	.+0      	; 0x3ee6 <MasterReset+0x724>
    3ee6:	ed b7       	in	r30, 0x3d	; 61
    3ee8:	fe b7       	in	r31, 0x3e	; 62
    3eea:	f2 82       	std	Z+2, r15	; 0x02
    3eec:	e1 82       	std	Z+1, r14	; 0x01
    3eee:	8f e0       	ldi	r24, 0x0F	; 15
    3ef0:	93 e0       	ldi	r25, 0x03	; 3
    3ef2:	94 83       	std	Z+4, r25	; 0x04
    3ef4:	83 83       	std	Z+3, r24	; 0x03
    3ef6:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	 eeprom_write_block((const void*)&strEEP, (void*) &DefHeaderFooter[9],41);
    3efa:	0f 90       	pop	r0
    3efc:	0f 90       	pop	r0
    3efe:	0f 90       	pop	r0
    3f00:	0f 90       	pop	r0
    3f02:	c7 01       	movw	r24, r14
    3f04:	69 e9       	ldi	r22, 0x99	; 153
    3f06:	73 e0       	ldi	r23, 0x03	; 3
    3f08:	49 e2       	ldi	r20, 0x29	; 41
    3f0a:	50 e0       	ldi	r21, 0x00	; 0
    3f0c:	0e 94 33 ad 	call	0x15a66	; 0x15a66 <__eewr_block_m128>
	 
	 eeprom_write_byte(&DefIFT_ID,1);
    3f10:	80 e0       	ldi	r24, 0x00	; 0
    3f12:	90 e0       	ldi	r25, 0x00	; 0
    3f14:	61 e0       	ldi	r22, 0x01	; 1
    3f16:	0e 94 3d ad 	call	0x15a7a	; 0x15a7a <__eewr_byte_m128>
}
    3f1a:	ec 96       	adiw	r28, 0x3c	; 60
    3f1c:	0f b6       	in	r0, 0x3f	; 63
    3f1e:	f8 94       	cli
    3f20:	de bf       	out	0x3e, r29	; 62
    3f22:	0f be       	out	0x3f, r0	; 63
    3f24:	cd bf       	out	0x3d, r28	; 61
    3f26:	cf 91       	pop	r28
    3f28:	df 91       	pop	r29
    3f2a:	1f 91       	pop	r17
    3f2c:	0f 91       	pop	r16
    3f2e:	ff 90       	pop	r15
    3f30:	ef 90       	pop	r14
    3f32:	df 90       	pop	r13
    3f34:	bf 90       	pop	r11
    3f36:	af 90       	pop	r10
    3f38:	08 95       	ret

00003f3a <SetDispenser>:
		  }
	      break;
	 }
}

void SetDispenser(char DispType){
    3f3a:	ef 92       	push	r14
    3f3c:	ff 92       	push	r15
    3f3e:	0f 93       	push	r16
    3f40:	1f 93       	push	r17
    3f42:	df 93       	push	r29
    3f44:	cf 93       	push	r28
    3f46:	00 d0       	rcall	.+0      	; 0x3f48 <SetDispenser+0xe>
    3f48:	00 d0       	rcall	.+0      	; 0x3f4a <SetDispenser+0x10>
    3f4a:	0f 92       	push	r0
    3f4c:	cd b7       	in	r28, 0x3d	; 61
    3f4e:	de b7       	in	r29, 0x3e	; 62
    3f50:	18 2f       	mov	r17, r24
     char CurrentDispenser;
	 char i,DecimalSetting[5];
     CurrentDispenser=eeprom_read_byte(&DefDispenserBrand);
    3f52:	88 e3       	ldi	r24, 0x38	; 56
    3f54:	91 e0       	ldi	r25, 0x01	; 1
    3f56:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
	 if (CurrentDispenser!=DispType){
    3f5a:	81 17       	cp	r24, r17
    3f5c:	29 f0       	breq	.+10     	; 0x3f68 <SetDispenser+0x2e>
	     eeprom_write_byte(&DefDispenserBrand,DispType);
    3f5e:	88 e3       	ldi	r24, 0x38	; 56
    3f60:	91 e0       	ldi	r25, 0x01	; 1
    3f62:	61 2f       	mov	r22, r17
    3f64:	0e 94 3d ad 	call	0x15a7a	; 0x15a7a <__eewr_byte_m128>
	 }
     //Apply Setting for Pump respectively
	 switch(DispType){
    3f68:	11 30       	cpi	r17, 0x01	; 1
    3f6a:	19 f0       	breq	.+6      	; 0x3f72 <SetDispenser+0x38>
    3f6c:	12 30       	cpi	r17, 0x02	; 2
    3f6e:	71 f4       	brne	.+28     	; 0x3f8c <SetDispenser+0x52>
    3f70:	08 c0       	rjmp	.+16     	; 0x3f82 <SetDispenser+0x48>
	 case ST_GILBARCO:
          DecimalSetting[0]=0;//Price
    3f72:	19 82       	std	Y+1, r1	; 0x01
		  DecimalSetting[1]=3;//Volume
    3f74:	83 e0       	ldi	r24, 0x03	; 3
    3f76:	8a 83       	std	Y+2, r24	; 0x02
		  DecimalSetting[2]=0;//Money
    3f78:	1b 82       	std	Y+3, r1	; 0x03
		  DecimalSetting[3]=2;//TotalVolume
    3f7a:	82 e0       	ldi	r24, 0x02	; 2
    3f7c:	8c 83       	std	Y+4, r24	; 0x04
		  DecimalSetting[4]=0;//TotalMoney 
    3f7e:	1d 82       	std	Y+5, r1	; 0x05
    3f80:	05 c0       	rjmp	.+10     	; 0x3f8c <SetDispenser+0x52>
	      break;
	 case ST_WAYNE_DART:
          DecimalSetting[0]=0;//Price
    3f82:	19 82       	std	Y+1, r1	; 0x01
		  DecimalSetting[1]=2;//Volume
    3f84:	1a 83       	std	Y+2, r17	; 0x02
		  DecimalSetting[2]=0;//Money
    3f86:	1b 82       	std	Y+3, r1	; 0x03
		  DecimalSetting[3]=2;//TotalVolume
    3f88:	1c 83       	std	Y+4, r17	; 0x04
		  DecimalSetting[4]=2;//TotalMoney 
    3f8a:	1d 83       	std	Y+5, r17	; 0x05
    3f8c:	09 e3       	ldi	r16, 0x39	; 57
    3f8e:	10 e0       	ldi	r17, 0x00	; 0
    3f90:	7e 01       	movw	r14, r28
    3f92:	08 94       	sec
    3f94:	e1 1c       	adc	r14, r1
    3f96:	f1 1c       	adc	r15, r1
	      break;	 
	 }
	 //ApplyChanges
     for (i=0;i<5;i++){
	     if (eeprom_read_byte(&DefDecimalPrice+i)!=DecimalSetting[i]){
    3f98:	c8 01       	movw	r24, r16
    3f9a:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
    3f9e:	f7 01       	movw	r30, r14
    3fa0:	60 81       	ld	r22, Z
    3fa2:	86 17       	cp	r24, r22
    3fa4:	19 f0       	breq	.+6      	; 0x3fac <SetDispenser+0x72>
		     eeprom_write_byte(&DefDecimalPrice+i,DecimalSetting[i]);
    3fa6:	c8 01       	movw	r24, r16
    3fa8:	0e 94 3d ad 	call	0x15a7a	; 0x15a7a <__eewr_byte_m128>
    3fac:	0f 5f       	subi	r16, 0xFF	; 255
    3fae:	1f 4f       	sbci	r17, 0xFF	; 255
    3fb0:	08 94       	sec
    3fb2:	e1 1c       	adc	r14, r1
    3fb4:	f1 1c       	adc	r15, r1
		  DecimalSetting[3]=2;//TotalVolume
		  DecimalSetting[4]=2;//TotalMoney 
	      break;	 
	 }
	 //ApplyChanges
     for (i=0;i<5;i++){
    3fb6:	f0 e0       	ldi	r31, 0x00	; 0
    3fb8:	0e 33       	cpi	r16, 0x3E	; 62
    3fba:	1f 07       	cpc	r17, r31
    3fbc:	69 f7       	brne	.-38     	; 0x3f98 <SetDispenser+0x5e>
	     if (eeprom_read_byte(&DefDecimalPrice+i)!=DecimalSetting[i]){
		     eeprom_write_byte(&DefDecimalPrice+i,DecimalSetting[i]);
		 }
	 }
}
    3fbe:	0f 90       	pop	r0
    3fc0:	0f 90       	pop	r0
    3fc2:	0f 90       	pop	r0
    3fc4:	0f 90       	pop	r0
    3fc6:	0f 90       	pop	r0
    3fc8:	cf 91       	pop	r28
    3fca:	df 91       	pop	r29
    3fcc:	1f 91       	pop	r17
    3fce:	0f 91       	pop	r16
    3fd0:	ff 90       	pop	r15
    3fd2:	ef 90       	pop	r14
    3fd4:	08 95       	ret

00003fd6 <InitMemory>:

	 }
}

void InitMemory(){
     PumpCountMax=eeprom_read_byte(&DefPoolingPumpMax);
    3fd6:	85 e4       	ldi	r24, 0x45	; 69
    3fd8:	91 e0       	ldi	r25, 0x01	; 1
    3fda:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
    3fde:	80 93 5c 01 	sts	0x015C, r24
	 ActivePump=eeprom_read_byte(&DefActivePump);
    3fe2:	8a e4       	ldi	r24, 0x4A	; 74
    3fe4:	91 e0       	ldi	r25, 0x01	; 1
    3fe6:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
    3fea:	80 93 5d 01 	sts	0x015D, r24
}
    3fee:	08 95       	ret

00003ff0 <GetFIPAddr>:
	    Result=PPumpID[FIPAddr-1];
	 }
   return Result;
}

char GetFIPAddr(char iPumpID){//Find FIP Addr based on PumpID respectively: 
    3ff0:	ff 92       	push	r15
    3ff2:	0f 93       	push	r16
    3ff4:	1f 93       	push	r17
    3ff6:	df 93       	push	r29
    3ff8:	cf 93       	push	r28
    3ffa:	cd b7       	in	r28, 0x3d	; 61
    3ffc:	de b7       	in	r29, 0x3e	; 62
    3ffe:	28 97       	sbiw	r28, 0x08	; 8
    4000:	0f b6       	in	r0, 0x3f	; 63
    4002:	f8 94       	cli
    4004:	de bf       	out	0x3e, r29	; 62
    4006:	0f be       	out	0x3f, r0	; 63
    4008:	cd bf       	out	0x3d, r28	; 61
    400a:	f8 2e       	mov	r15, r24
char i,PPumpID[8],Result;     //FIP1..FIP8
	 Result=0; 
	 eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap,8);
    400c:	8e 01       	movw	r16, r28
    400e:	0f 5f       	subi	r16, 0xFF	; 255
    4010:	1f 4f       	sbci	r17, 0xFF	; 255
    4012:	c8 01       	movw	r24, r16
    4014:	66 e4       	ldi	r22, 0x46	; 70
    4016:	70 e0       	ldi	r23, 0x00	; 0
    4018:	48 e0       	ldi	r20, 0x08	; 8
    401a:	50 e0       	ldi	r21, 0x00	; 0
    401c:	0e 94 1b ad 	call	0x15a36	; 0x15a36 <__eerd_block_m128>
    4020:	f8 01       	movw	r30, r16
     for(i=0;i<8;i++){
    4022:	9e 01       	movw	r18, r28
    4024:	27 5f       	subi	r18, 0xF7	; 247
    4026:	3f 4f       	sbci	r19, 0xFF	; 255
}

char GetFIPAddr(char iPumpID){//Find FIP Addr based on PumpID respectively: 
char i,PPumpID[8],Result;     //FIP1..FIP8
	 Result=0; 
	 eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap,8);
    4028:	9e 2f       	mov	r25, r30
    402a:	90 1b       	sub	r25, r16
     for(i=0;i<8;i++){
	     if (PPumpID[i]==iPumpID){
    402c:	80 81       	ld	r24, Z
    402e:	8f 15       	cp	r24, r15
    4030:	19 f4       	brne	.+6      	; 0x4038 <GetFIPAddr+0x48>
		     Result=i+1;
    4032:	89 2f       	mov	r24, r25
    4034:	8f 5f       	subi	r24, 0xFF	; 255
    4036:	05 c0       	rjmp	.+10     	; 0x4042 <GetFIPAddr+0x52>
			 break;
    4038:	31 96       	adiw	r30, 0x01	; 1

char GetFIPAddr(char iPumpID){//Find FIP Addr based on PumpID respectively: 
char i,PPumpID[8],Result;     //FIP1..FIP8
	 Result=0; 
	 eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap,8);
     for(i=0;i<8;i++){
    403a:	e2 17       	cp	r30, r18
    403c:	f3 07       	cpc	r31, r19
    403e:	a1 f7       	brne	.-24     	; 0x4028 <GetFIPAddr+0x38>
    4040:	80 e0       	ldi	r24, 0x00	; 0
		     Result=i+1;
			 break;
		 }
	 }
   return Result;
}
    4042:	28 96       	adiw	r28, 0x08	; 8
    4044:	0f b6       	in	r0, 0x3f	; 63
    4046:	f8 94       	cli
    4048:	de bf       	out	0x3e, r29	; 62
    404a:	0f be       	out	0x3f, r0	; 63
    404c:	cd bf       	out	0x3d, r28	; 61
    404e:	cf 91       	pop	r28
    4050:	df 91       	pop	r29
    4052:	1f 91       	pop	r17
    4054:	0f 91       	pop	r16
    4056:	ff 90       	pop	r15
    4058:	08 95       	ret

0000405a <UpdateStandaloneStatus>:
		 sprintf_P(lcdteks,PSTR("%s"),SPump);
         lcd_print(4,1,lcdteks);
     	 }
}

void UpdateStandaloneStatus(char xPumpID,char xPumpStatus){//xPumpID: (1-16)&0x0F
    405a:	ff 92       	push	r15
    405c:	0f 93       	push	r16
    405e:	1f 93       	push	r17
    4060:	cf 93       	push	r28
    4062:	df 93       	push	r29
    4064:	18 2f       	mov	r17, r24
    4066:	f6 2e       	mov	r15, r22
char strSend[20],iPumpID; //[xxxxxxxxxPx]
char iAddr;

	 if (xPumpID<16){
    4068:	80 31       	cpi	r24, 0x10	; 16
    406a:	08 f0       	brcs	.+2      	; 0x406e <UpdateStandaloneStatus+0x14>
    406c:	4a c0       	rjmp	.+148    	; 0x4102 <UpdateStandaloneStatus+0xa8>
	     DispenserBrand=eeprom_read_byte(&DefDispenserBrand);
    406e:	88 e3       	ldi	r24, 0x38	; 56
    4070:	91 e0       	ldi	r25, 0x01	; 1
    4072:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
    4076:	80 93 5e 01 	sts	0x015E, r24
	     switch(DispenserBrand){
    407a:	81 50       	subi	r24, 0x01	; 1
    407c:	82 30       	cpi	r24, 0x02	; 2
    407e:	08 f4       	brcc	.+2      	; 0x4082 <UpdateStandaloneStatus+0x28>
    4080:	81 2f       	mov	r24, r17
	     case ST_WAYNE_DART:
              iPumpID=xPumpID;
	          break;				   
	     }

		 iAddr=GetFIPAddr(iPumpID);
    4082:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <GetFIPAddr>
		 if (iAddr>0){
    4086:	88 23       	and	r24, r24
    4088:	e1 f1       	breq	.+120    	; 0x4102 <UpdateStandaloneStatus+0xa8>
		     iAddr=iAddr-1;
			 if (strPumpStatus[iAddr]!=GetPumpStatusLabel(PS_PRINT_READY)){//iFdiiiiiiiiiiiii
    408a:	81 50       	subi	r24, 0x01	; 1
    408c:	c8 2f       	mov	r28, r24
    408e:	d0 e0       	ldi	r29, 0x00	; 0
    4090:	80 e1       	ldi	r24, 0x10	; 16
    4092:	0e 94 41 14 	call	0x2882	; 0x2882 <GetPumpStatusLabel>
    4096:	8e 01       	movw	r16, r28
    4098:	0e 5f       	subi	r16, 0xFE	; 254
    409a:	1e 4f       	sbci	r17, 0xFE	; 254
    409c:	f8 01       	movw	r30, r16
    409e:	90 81       	ld	r25, Z
    40a0:	98 17       	cp	r25, r24
    40a2:	b1 f0       	breq	.+44     	; 0x40d0 <UpdateStandaloneStatus+0x76>
		         if (xPumpStatus!=PS_PRINT_READY)
    40a4:	f0 e1       	ldi	r31, 0x10	; 16
    40a6:	ff 16       	cp	r15, r31
    40a8:	21 f0       	breq	.+8      	; 0x40b2 <UpdateStandaloneStatus+0x58>
				     CurrentPumpStatus[iAddr]=xPumpStatus;
    40aa:	fe 01       	movw	r30, r28
    40ac:	e1 5a       	subi	r30, 0xA1	; 161
    40ae:	fe 4f       	sbci	r31, 0xFE	; 254
    40b0:	f0 82       	st	Z, r15
			     strPumpStatus[iAddr]=GetPumpStatusLabel(xPumpStatus);
    40b2:	8f 2d       	mov	r24, r15
    40b4:	0e 94 41 14 	call	0x2882	; 0x2882 <GetPumpStatusLabel>
    40b8:	8e 01       	movw	r16, r28
    40ba:	0e 5f       	subi	r16, 0xFE	; 254
    40bc:	1e 4f       	sbci	r17, 0xFE	; 254
    40be:	f8 01       	movw	r30, r16
    40c0:	80 83       	st	Z, r24
                 if (xPumpStatus==PS_FINISH_TOTALIZER)
    40c2:	f5 e1       	ldi	r31, 0x15	; 21
    40c4:	ff 16       	cp	r15, r31
    40c6:	c1 f4       	brne	.+48     	; 0x40f8 <UpdateStandaloneStatus+0x9e>
				     strPumpStatus[iAddr]=GetPumpStatusLabel(CurrentPumpStatus[iAddr]);
    40c8:	c1 5a       	subi	r28, 0xA1	; 161
    40ca:	de 4f       	sbci	r29, 0xFE	; 254
    40cc:	88 81       	ld	r24, Y
    40ce:	10 c0       	rjmp	.+32     	; 0x40f0 <UpdateStandaloneStatus+0x96>
    40d0:	fe 01       	movw	r30, r28
    40d2:	e1 5a       	subi	r30, 0xA1	; 161
    40d4:	fe 4f       	sbci	r31, 0xFE	; 254
		     }else if ((strPumpStatus[iAddr]==GetPumpStatusLabel(PS_PRINT_READY))||(xPumpStatus==PUMP_FEOT)||(xPumpStatus==PS_PRINTED)||(xPumpStatus==PS_TOTALIZER)){//P
			     if (xPumpStatus==PS_PRINTED){
    40d6:	81 e1       	ldi	r24, 0x11	; 17
    40d8:	f8 16       	cp	r15, r24
    40da:	11 f4       	brne	.+4      	; 0x40e0 <UpdateStandaloneStatus+0x86>
				 //New

				     //if (CurrentPumpStatus[iAddr]!=GetPumpStatusLabel(PS_PRINT_READY))
			             strPumpStatus[iAddr]=GetPumpStatusLabel(CurrentPumpStatus[iAddr]);
    40dc:	80 81       	ld	r24, Z
    40de:	08 c0       	rjmp	.+16     	; 0x40f0 <UpdateStandaloneStatus+0x96>
					 //    CurrentPumpStatus[iAddr]=PUMP_OFF;
					 //    strPumpStatus[iAddr]=GetPumpStatusLabel(PUMP_OFF);
					 //}

				  }
			     else CurrentPumpStatus[iAddr]=xPumpStatus;			 
    40e0:	f0 82       	st	Z, r15
			 if (xPumpStatus==PUMP_FEOT){
    40e2:	8b e0       	ldi	r24, 0x0B	; 11
    40e4:	f8 16       	cp	r15, r24
    40e6:	21 f0       	breq	.+8      	; 0x40f0 <UpdateStandaloneStatus+0x96>
			     CurrentPumpStatus[iAddr]=xPumpStatus;
			     strPumpStatus[iAddr]=GetPumpStatusLabel(CurrentPumpStatus[iAddr]);
				 }
             else if (xPumpStatus==PS_TOTALIZER){
    40e8:	f4 e1       	ldi	r31, 0x14	; 20
    40ea:	ff 16       	cp	r15, r31
    40ec:	29 f4       	brne	.+10     	; 0x40f8 <UpdateStandaloneStatus+0x9e>
			      strPumpStatus[iAddr]=GetPumpStatusLabel(xPumpStatus);
    40ee:	84 e1       	ldi	r24, 0x14	; 20
    40f0:	0e 94 41 14 	call	0x2882	; 0x2882 <GetPumpStatusLabel>
    40f4:	f8 01       	movw	r30, r16
    40f6:	80 83       	st	Z, r24
				 }
		 }		 	     
         strPumpStatus[16]=0;
    40f8:	10 92 12 01 	sts	0x0112, r1
	     IsNewPumpStatus=True;		 
    40fc:	81 e0       	ldi	r24, 0x01	; 1
    40fe:	80 93 01 01 	sts	0x0101, r24
		 }		 
	 }
}
    4102:	df 91       	pop	r29
    4104:	cf 91       	pop	r28
    4106:	1f 91       	pop	r17
    4108:	0f 91       	pop	r16
    410a:	ff 90       	pop	r15
    410c:	08 95       	ret

0000410e <GetPumpID>:
     StrPosCopy(strSystemTime,sSecond,6,2);
	 sprintf_P(Result,PSTR("20%s/%s/%s %s:%s:%s"),sYear,sMonth,sDay,sHour,sMinute,sSecond);
}


char GetPumpID(char FIPAddr){//Find Stored PumpID in PumpMap
    410e:	1f 93       	push	r17
    4110:	df 93       	push	r29
    4112:	cf 93       	push	r28
    4114:	cd b7       	in	r28, 0x3d	; 61
    4116:	de b7       	in	r29, 0x3e	; 62
    4118:	28 97       	sbiw	r28, 0x08	; 8
    411a:	0f b6       	in	r0, 0x3f	; 63
    411c:	f8 94       	cli
    411e:	de bf       	out	0x3e, r29	; 62
    4120:	0f be       	out	0x3f, r0	; 63
    4122:	cd bf       	out	0x3d, r28	; 61
    4124:	18 2f       	mov	r17, r24
     char PPumpID[8],Result;     
     eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap,8);
    4126:	ce 01       	movw	r24, r28
    4128:	01 96       	adiw	r24, 0x01	; 1
    412a:	66 e4       	ldi	r22, 0x46	; 70
    412c:	70 e0       	ldi	r23, 0x00	; 0
    412e:	48 e0       	ldi	r20, 0x08	; 8
    4130:	50 e0       	ldi	r21, 0x00	; 0
    4132:	0e 94 1b ad 	call	0x15a36	; 0x15a36 <__eerd_block_m128>
	 Result=0;
	 if ((FIPAddr>0) && (FIPAddr<8)){
    4136:	81 2f       	mov	r24, r17
    4138:	81 50       	subi	r24, 0x01	; 1
    413a:	87 30       	cpi	r24, 0x07	; 7
    413c:	10 f0       	brcs	.+4      	; 0x4142 <GetPumpID+0x34>
    413e:	80 e0       	ldi	r24, 0x00	; 0
    4140:	04 c0       	rjmp	.+8      	; 0x414a <GetPumpID+0x3c>
	    Result=PPumpID[FIPAddr-1];
    4142:	fe 01       	movw	r30, r28
    4144:	e1 0f       	add	r30, r17
    4146:	f1 1d       	adc	r31, r1
    4148:	80 81       	ld	r24, Z
	 }
   return Result;
}
    414a:	28 96       	adiw	r28, 0x08	; 8
    414c:	0f b6       	in	r0, 0x3f	; 63
    414e:	f8 94       	cli
    4150:	de bf       	out	0x3e, r29	; 62
    4152:	0f be       	out	0x3f, r0	; 63
    4154:	cd bf       	out	0x3d, r28	; 61
    4156:	cf 91       	pop	r28
    4158:	df 91       	pop	r29
    415a:	1f 91       	pop	r17
    415c:	08 95       	ret

0000415e <GetTotalizerData>:
	 if (TType==TMONEY)eeprom_write_block((const void*)&rawValue,(void*)&(TotalMoney[TAddr][iPumpAddr][iGrade]), sizeof(rawValue));
}



void GetTotalizerData(char TType, char TAddr, char xPumpAddr, char xGradeAddr, char *strValue){// 0 1 1 "0000000"
    415e:	0f 93       	push	r16
    4160:	1f 93       	push	r17
    4162:	df 93       	push	r29
    4164:	cf 93       	push	r28
    4166:	00 d0       	rcall	.+0      	; 0x4168 <GetTotalizerData+0xa>
    4168:	00 d0       	rcall	.+0      	; 0x416a <GetTotalizerData+0xc>
    416a:	00 d0       	rcall	.+0      	; 0x416c <GetTotalizerData+0xe>
    416c:	cd b7       	in	r28, 0x3d	; 61
    416e:	de b7       	in	r29, 0x3e	; 62
    4170:	96 2f       	mov	r25, r22
     char rawValue[6],iPumpAddr,iGrade;

	 iPumpAddr=(xPumpAddr&0x0F);
    4172:	4f 70       	andi	r20, 0x0F	; 15
	 if ((xGradeAddr>=1)&&(xGradeAddr<=6))
    4174:	21 50       	subi	r18, 0x01	; 1
    4176:	26 30       	cpi	r18, 0x06	; 6
    4178:	08 f4       	brcc	.+2      	; 0x417c <GetTotalizerData+0x1e>
    417a:	52 2f       	mov	r21, r18
	     iGrade=xGradeAddr-1;
     
//TotalVolume[2][16][6][6];
//GetTotalizerData(TVOLUME,TOTALIZER_LAST,PumpNum,xGrade,strLastVolume);
	 if (TType==TVOLUME)eeprom_read_block((void*) &rawValue, (const void*) &(TotalVolume[TAddr][iPumpAddr][iGrade]), sizeof(rawValue));
    417c:	88 23       	and	r24, r24
    417e:	d9 f4       	brne	.+54     	; 0x41b6 <GetTotalizerData+0x58>
    4180:	64 e2       	ldi	r22, 0x24	; 36
    4182:	46 9f       	mul	r20, r22
    4184:	b0 01       	movw	r22, r0
    4186:	11 24       	eor	r1, r1
    4188:	29 2f       	mov	r18, r25
    418a:	30 e0       	ldi	r19, 0x00	; 0
    418c:	80 e2       	ldi	r24, 0x20	; 32
    418e:	91 e0       	ldi	r25, 0x01	; 1
    4190:	fc 01       	movw	r30, r24
    4192:	2e 9f       	mul	r18, r30
    4194:	c0 01       	movw	r24, r0
    4196:	2f 9f       	mul	r18, r31
    4198:	90 0d       	add	r25, r0
    419a:	3e 9f       	mul	r19, r30
    419c:	90 0d       	add	r25, r0
    419e:	11 24       	eor	r1, r1
    41a0:	68 0f       	add	r22, r24
    41a2:	79 1f       	adc	r23, r25
    41a4:	86 e0       	ldi	r24, 0x06	; 6
    41a6:	58 9f       	mul	r21, r24
    41a8:	c0 01       	movw	r24, r0
    41aa:	11 24       	eor	r1, r1
    41ac:	68 0f       	add	r22, r24
    41ae:	79 1f       	adc	r23, r25
    41b0:	6c 53       	subi	r22, 0x3C	; 60
    41b2:	7c 4f       	sbci	r23, 0xFC	; 252
    41b4:	1c c0       	rjmp	.+56     	; 0x41ee <GetTotalizerData+0x90>
	 else 
	 if (TType==TMONEY)eeprom_read_block((void*) &rawValue, (const void*) &(TotalMoney[TAddr][iPumpAddr][iGrade]), sizeof(rawValue));
    41b6:	81 30       	cpi	r24, 0x01	; 1
    41b8:	01 f5       	brne	.+64     	; 0x41fa <GetTotalizerData+0x9c>
    41ba:	64 e2       	ldi	r22, 0x24	; 36
    41bc:	46 9f       	mul	r20, r22
    41be:	b0 01       	movw	r22, r0
    41c0:	11 24       	eor	r1, r1
    41c2:	29 2f       	mov	r18, r25
    41c4:	30 e0       	ldi	r19, 0x00	; 0
    41c6:	80 e2       	ldi	r24, 0x20	; 32
    41c8:	91 e0       	ldi	r25, 0x01	; 1
    41ca:	fc 01       	movw	r30, r24
    41cc:	2e 9f       	mul	r18, r30
    41ce:	c0 01       	movw	r24, r0
    41d0:	2f 9f       	mul	r18, r31
    41d2:	90 0d       	add	r25, r0
    41d4:	3e 9f       	mul	r19, r30
    41d6:	90 0d       	add	r25, r0
    41d8:	11 24       	eor	r1, r1
    41da:	68 0f       	add	r22, r24
    41dc:	79 1f       	adc	r23, r25
    41de:	86 e0       	ldi	r24, 0x06	; 6
    41e0:	58 9f       	mul	r21, r24
    41e2:	c0 01       	movw	r24, r0
    41e4:	11 24       	eor	r1, r1
    41e6:	68 0f       	add	r22, r24
    41e8:	79 1f       	adc	r23, r25
    41ea:	6c 5f       	subi	r22, 0xFC	; 252
    41ec:	79 4f       	sbci	r23, 0xF9	; 249
    41ee:	ce 01       	movw	r24, r28
    41f0:	01 96       	adiw	r24, 0x01	; 1
    41f2:	46 e0       	ldi	r20, 0x06	; 6
    41f4:	50 e0       	ldi	r21, 0x00	; 0
    41f6:	0e 94 1b ad 	call	0x15a36	; 0x15a36 <__eerd_block_m128>
	 //Convert RawData to String 
	 RawToStr(rawValue,strValue);
    41fa:	ce 01       	movw	r24, r28
    41fc:	01 96       	adiw	r24, 0x01	; 1
    41fe:	b8 01       	movw	r22, r16
    4200:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <RawToStr>
}
    4204:	26 96       	adiw	r28, 0x06	; 6
    4206:	0f b6       	in	r0, 0x3f	; 63
    4208:	f8 94       	cli
    420a:	de bf       	out	0x3e, r29	; 62
    420c:	0f be       	out	0x3f, r0	; 63
    420e:	cd bf       	out	0x3d, r28	; 61
    4210:	cf 91       	pop	r28
    4212:	df 91       	pop	r29
    4214:	1f 91       	pop	r17
    4216:	0f 91       	pop	r16
    4218:	08 95       	ret

0000421a <SaveToEEPROM>:
     return Result;
}



char SaveToEEPROM(char *Src,char *Dest,unsigned int Length){
    421a:	ef 92       	push	r14
    421c:	ff 92       	push	r15
    421e:	0f 93       	push	r16
    4220:	1f 93       	push	r17
    4222:	df 93       	push	r29
    4224:	cf 93       	push	r28
    4226:	cd b7       	in	r28, 0x3d	; 61
    4228:	de b7       	in	r29, 0x3e	; 62
    422a:	ac 97       	sbiw	r28, 0x2c	; 44
    422c:	0f b6       	in	r0, 0x3f	; 63
    422e:	f8 94       	cli
    4230:	de bf       	out	0x3e, r29	; 62
    4232:	0f be       	out	0x3f, r0	; 63
    4234:	cd bf       	out	0x3d, r28	; 61
    4236:	9a a7       	std	Y+42, r25	; 0x2a
    4238:	89 a7       	std	Y+41, r24	; 0x29
    423a:	7c a7       	std	Y+44, r23	; 0x2c
    423c:	6b a7       	std	Y+43, r22	; 0x2b
    423e:	7a 01       	movw	r14, r20
     char strCompare[40];
	 //Read Previous Data
     eeprom_read_block((void*)&Dest,(const void*)&strCompare, Length);
    4240:	8e 01       	movw	r16, r28
    4242:	05 5d       	subi	r16, 0xD5	; 213
    4244:	1f 4f       	sbci	r17, 0xFF	; 255
    4246:	c8 01       	movw	r24, r16
    4248:	be 01       	movw	r22, r28
    424a:	6f 5f       	subi	r22, 0xFF	; 255
    424c:	7f 4f       	sbci	r23, 0xFF	; 255
    424e:	0e 94 1b ad 	call	0x15a36	; 0x15a36 <__eerd_block_m128>
     //if 
     eeprom_write_block((const void*)&Src,(void*)&Dest, Length);
    4252:	ce 01       	movw	r24, r28
    4254:	89 96       	adiw	r24, 0x29	; 41
    4256:	b8 01       	movw	r22, r16
    4258:	a7 01       	movw	r20, r14
    425a:	0e 94 33 ad 	call	0x15a66	; 0x15a66 <__eewr_block_m128>
}
    425e:	ac 96       	adiw	r28, 0x2c	; 44
    4260:	0f b6       	in	r0, 0x3f	; 63
    4262:	f8 94       	cli
    4264:	de bf       	out	0x3e, r29	; 62
    4266:	0f be       	out	0x3f, r0	; 63
    4268:	cd bf       	out	0x3d, r28	; 61
    426a:	cf 91       	pop	r28
    426c:	df 91       	pop	r29
    426e:	1f 91       	pop	r17
    4270:	0f 91       	pop	r16
    4272:	ff 90       	pop	r15
    4274:	ef 90       	pop	r14
    4276:	08 95       	ret

00004278 <SelectMark>:
	      break;
	 }
    return Result;
}

char SelectMark(char InMark){
    4278:	df 92       	push	r13
    427a:	ef 92       	push	r14
    427c:	ff 92       	push	r15
    427e:	0f 93       	push	r16
    4280:	1f 93       	push	r17
    4282:	df 93       	push	r29
    4284:	cf 93       	push	r28
    4286:	00 d0       	rcall	.+0      	; 0x4288 <SelectMark+0x10>
    4288:	00 d0       	rcall	.+0      	; 0x428a <SelectMark+0x12>
    428a:	0f 92       	push	r0
    428c:	cd b7       	in	r28, 0x3d	; 61
    428e:	de b7       	in	r29, 0x3e	; 62
    4290:	d8 2e       	mov	r13, r24
char i,Result,PMark[5],Length;
     eeprom_read_block((void*)&PMark,(const void*)&DefMarkMap, sizeof(DefMarkMap));
    4292:	8e 01       	movw	r16, r28
    4294:	0f 5f       	subi	r16, 0xFF	; 255
    4296:	1f 4f       	sbci	r17, 0xFF	; 255
    4298:	c8 01       	movw	r24, r16
    429a:	61 e4       	ldi	r22, 0x41	; 65
    429c:	70 e0       	ldi	r23, 0x00	; 0
    429e:	45 e0       	ldi	r20, 0x05	; 5
    42a0:	50 e0       	ldi	r21, 0x00	; 0
    42a2:	0e 94 1b ad 	call	0x15a36	; 0x15a36 <__eerd_block_m128>
    42a6:	ed 2d       	mov	r30, r13
    42a8:	21 e0       	ldi	r18, 0x01	; 1
    42aa:	30 e0       	ldi	r19, 0x00	; 0
	 Length=sizeof(DefMarkMap);
	 Result=InMark;
     for(i=0;i<Length;i++){
	     if (InMark==PMark[i])
		     Result=PMark[(i+1)%Length];
    42ac:	78 01       	movw	r14, r16
char i,Result,PMark[5],Length;
     eeprom_read_block((void*)&PMark,(const void*)&DefMarkMap, sizeof(DefMarkMap));
	 Length=sizeof(DefMarkMap);
	 Result=InMark;
     for(i=0;i<Length;i++){
	     if (InMark==PMark[i])
    42ae:	d8 01       	movw	r26, r16
    42b0:	8c 91       	ld	r24, X
    42b2:	d8 16       	cp	r13, r24
    42b4:	49 f4       	brne	.+18     	; 0x42c8 <SelectMark+0x50>
		     Result=PMark[(i+1)%Length];
    42b6:	c9 01       	movw	r24, r18
    42b8:	65 e0       	ldi	r22, 0x05	; 5
    42ba:	70 e0       	ldi	r23, 0x00	; 0
    42bc:	0e 94 79 aa 	call	0x154f2	; 0x154f2 <__divmodhi4>
    42c0:	f7 01       	movw	r30, r14
    42c2:	e8 0f       	add	r30, r24
    42c4:	f9 1f       	adc	r31, r25
    42c6:	e0 81       	ld	r30, Z
    42c8:	0f 5f       	subi	r16, 0xFF	; 255
    42ca:	1f 4f       	sbci	r17, 0xFF	; 255
    42cc:	2f 5f       	subi	r18, 0xFF	; 255
    42ce:	3f 4f       	sbci	r19, 0xFF	; 255
char SelectMark(char InMark){
char i,Result,PMark[5],Length;
     eeprom_read_block((void*)&PMark,(const void*)&DefMarkMap, sizeof(DefMarkMap));
	 Length=sizeof(DefMarkMap);
	 Result=InMark;
     for(i=0;i<Length;i++){
    42d0:	26 30       	cpi	r18, 0x06	; 6
    42d2:	31 05       	cpc	r19, r1
    42d4:	61 f7       	brne	.-40     	; 0x42ae <SelectMark+0x36>
	     if (InMark==PMark[i])
		     Result=PMark[(i+1)%Length];
	 }
     return Result;
}
    42d6:	8e 2f       	mov	r24, r30
    42d8:	0f 90       	pop	r0
    42da:	0f 90       	pop	r0
    42dc:	0f 90       	pop	r0
    42de:	0f 90       	pop	r0
    42e0:	0f 90       	pop	r0
    42e2:	cf 91       	pop	r28
    42e4:	df 91       	pop	r29
    42e6:	1f 91       	pop	r17
    42e8:	0f 91       	pop	r16
    42ea:	ff 90       	pop	r15
    42ec:	ef 90       	pop	r14
    42ee:	df 90       	pop	r13
    42f0:	08 95       	ret

000042f2 <SumChecksum>:
	Geniflow[1]=Geniflow[0];
	Geniflow[0]=dataIn;
*/
}

char SumChecksum(char *strChecked){
    42f2:	ac 01       	movw	r20, r24
     unsigned int SigmaSum=0;
	 char i,Result;
	 for(i=0;i<strlen(strChecked);i++){
    42f4:	dc 01       	movw	r26, r24
    42f6:	0d 90       	ld	r0, X+
    42f8:	00 20       	and	r0, r0
    42fa:	e9 f7       	brne	.-6      	; 0x42f6 <SumChecksum+0x4>
    42fc:	11 97       	sbiw	r26, 0x01	; 1
    42fe:	a8 1b       	sub	r26, r24
    4300:	b9 0b       	sbc	r27, r25
    4302:	20 e0       	ldi	r18, 0x00	; 0
    4304:	30 e0       	ldi	r19, 0x00	; 0
    4306:	90 e0       	ldi	r25, 0x00	; 0
    4308:	06 c0       	rjmp	.+12     	; 0x4316 <SumChecksum+0x24>
	     SigmaSum=SigmaSum+strChecked[i];
    430a:	e4 0f       	add	r30, r20
    430c:	f5 1f       	adc	r31, r21
    430e:	80 81       	ld	r24, Z
    4310:	28 0f       	add	r18, r24
    4312:	31 1d       	adc	r19, r1
}

char SumChecksum(char *strChecked){
     unsigned int SigmaSum=0;
	 char i,Result;
	 for(i=0;i<strlen(strChecked);i++){
    4314:	9f 5f       	subi	r25, 0xFF	; 255
    4316:	e9 2f       	mov	r30, r25
    4318:	f0 e0       	ldi	r31, 0x00	; 0
    431a:	ea 17       	cp	r30, r26
    431c:	fb 07       	cpc	r31, r27
    431e:	a8 f3       	brcs	.-22     	; 0x430a <SumChecksum+0x18>
	     SigmaSum=SigmaSum+strChecked[i];
	 }
	 Result=(SigmaSum%255);
    4320:	c9 01       	movw	r24, r18
    4322:	6f ef       	ldi	r22, 0xFF	; 255
    4324:	70 e0       	ldi	r23, 0x00	; 0
    4326:	0e 94 65 aa 	call	0x154ca	; 0x154ca <__udivmodhi4>
	 if (Result==0)Result=255;
    432a:	88 23       	and	r24, r24
    432c:	09 f4       	brne	.+2      	; 0x4330 <SumChecksum+0x3e>
    432e:	8f ef       	ldi	r24, 0xFF	; 255
   return Result;
}
    4330:	08 95       	ret

00004332 <IsGeniusCommand>:
	 sprintf_P(strSend,PSTR("%s"),sCSum);
	 uart_print(1,1,strSend);
*/
}

char IsGeniusCommand(char GCommand){
    4332:	ff 92       	push	r15
    4334:	0f 93       	push	r16
    4336:	1f 93       	push	r17
    4338:	df 93       	push	r29
    433a:	cf 93       	push	r28
    433c:	cd b7       	in	r28, 0x3d	; 61
    433e:	de b7       	in	r29, 0x3e	; 62
    4340:	2a 97       	sbiw	r28, 0x0a	; 10
    4342:	0f b6       	in	r0, 0x3f	; 63
    4344:	f8 94       	cli
    4346:	de bf       	out	0x3e, r29	; 62
    4348:	0f be       	out	0x3f, r0	; 63
    434a:	cd bf       	out	0x3d, r28	; 61
    434c:	f8 2e       	mov	r15, r24
     char i,Result,CommandList[10];
     Result=False;
	 sprintf_P(CommandList,PSTR("CTSRP"));
    434e:	00 d0       	rcall	.+0      	; 0x4350 <IsGeniusCommand+0x1e>
    4350:	00 d0       	rcall	.+0      	; 0x4352 <IsGeniusCommand+0x20>
    4352:	8e 01       	movw	r16, r28
    4354:	0f 5f       	subi	r16, 0xFF	; 255
    4356:	1f 4f       	sbci	r17, 0xFF	; 255
    4358:	ed b7       	in	r30, 0x3d	; 61
    435a:	fe b7       	in	r31, 0x3e	; 62
    435c:	12 83       	std	Z+2, r17	; 0x02
    435e:	01 83       	std	Z+1, r16	; 0x01
    4360:	87 e5       	ldi	r24, 0x57	; 87
    4362:	95 e0       	ldi	r25, 0x05	; 5
    4364:	94 83       	std	Z+4, r25	; 0x04
    4366:	83 83       	std	Z+3, r24	; 0x03
    4368:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	 for(i=0;i<strlen(CommandList);i++){
    436c:	d8 01       	movw	r26, r16
    436e:	0d 90       	ld	r0, X+
    4370:	00 20       	and	r0, r0
    4372:	e9 f7       	brne	.-6      	; 0x436e <IsGeniusCommand+0x3c>
    4374:	11 97       	sbiw	r26, 0x01	; 1
    4376:	a0 1b       	sub	r26, r16
    4378:	b1 0b       	sbc	r27, r17
    437a:	90 e0       	ldi	r25, 0x00	; 0
    437c:	0f 90       	pop	r0
    437e:	0f 90       	pop	r0
    4380:	0f 90       	pop	r0
    4382:	0f 90       	pop	r0
	    if (CommandList[i]==GCommand){
    4384:	98 01       	movw	r18, r16
    4386:	08 c0       	rjmp	.+16     	; 0x4398 <IsGeniusCommand+0x66>
    4388:	e2 0f       	add	r30, r18
    438a:	f3 1f       	adc	r31, r19
    438c:	80 81       	ld	r24, Z
    438e:	8f 15       	cp	r24, r15
    4390:	11 f4       	brne	.+4      	; 0x4396 <IsGeniusCommand+0x64>
    4392:	81 e0       	ldi	r24, 0x01	; 1
    4394:	07 c0       	rjmp	.+14     	; 0x43a4 <IsGeniusCommand+0x72>

char IsGeniusCommand(char GCommand){
     char i,Result,CommandList[10];
     Result=False;
	 sprintf_P(CommandList,PSTR("CTSRP"));
	 for(i=0;i<strlen(CommandList);i++){
    4396:	9f 5f       	subi	r25, 0xFF	; 255
    4398:	e9 2f       	mov	r30, r25
    439a:	f0 e0       	ldi	r31, 0x00	; 0
    439c:	ea 17       	cp	r30, r26
    439e:	fb 07       	cpc	r31, r27
    43a0:	98 f3       	brcs	.-26     	; 0x4388 <IsGeniusCommand+0x56>
    43a2:	80 e0       	ldi	r24, 0x00	; 0
		    Result=True;
			break;
			}
	 }
   return Result;	 
}
    43a4:	2a 96       	adiw	r28, 0x0a	; 10
    43a6:	0f b6       	in	r0, 0x3f	; 63
    43a8:	f8 94       	cli
    43aa:	de bf       	out	0x3e, r29	; 62
    43ac:	0f be       	out	0x3f, r0	; 63
    43ae:	cd bf       	out	0x3d, r28	; 61
    43b0:	cf 91       	pop	r28
    43b2:	df 91       	pop	r29
    43b4:	1f 91       	pop	r17
    43b6:	0f 91       	pop	r16
    43b8:	ff 90       	pop	r15
    43ba:	08 95       	ret

000043bc <Pos>:
  */
}
		

//Genius Protocol Version:1.0 AKR
int Pos(char *Substr, char *String){//1245:4645
    43bc:	0f 93       	push	r16
    43be:	1f 93       	push	r17
    43c0:	cf 93       	push	r28
    43c2:	df 93       	push	r29
    43c4:	ac 01       	movw	r20, r24
    char i,j,CountMatch;
	char Length,subLen,PosFound;

	Length=strlen(String);
    43c6:	fb 01       	movw	r30, r22
    43c8:	01 90       	ld	r0, Z+
    43ca:	00 20       	and	r0, r0
    43cc:	e9 f7       	brne	.-6      	; 0x43c8 <Pos+0xc>
    43ce:	31 97       	sbiw	r30, 0x01	; 1
    43d0:	1e 2f       	mov	r17, r30
    43d2:	16 1b       	sub	r17, r22
	subLen=strlen(Substr);
    43d4:	fc 01       	movw	r30, r24
    43d6:	01 90       	ld	r0, Z+
    43d8:	00 20       	and	r0, r0
    43da:	e9 f7       	brne	.-6      	; 0x43d6 <Pos+0x1a>
    43dc:	31 97       	sbiw	r30, 0x01	; 1
    43de:	0e 2f       	mov	r16, r30
    43e0:	08 1b       	sub	r16, r24
    43e2:	db 01       	movw	r26, r22
    43e4:	60 e0       	ldi	r22, 0x00	; 0
    43e6:	18 c0       	rjmp	.+48     	; 0x4418 <Pos+0x5c>
	PosFound=Length;
	for(i=0;i<Length;i++){
	    if (String[i]==Substr[0]){
    43e8:	9c 91       	ld	r25, X
    43ea:	fa 01       	movw	r30, r20
    43ec:	80 81       	ld	r24, Z
    43ee:	98 17       	cp	r25, r24
    43f0:	89 f4       	brne	.+34     	; 0x4414 <Pos+0x58>
    43f2:	ed 01       	movw	r28, r26
    43f4:	20 e0       	ldi	r18, 0x00	; 0
    43f6:	30 e0       	ldi	r19, 0x00	; 0
    43f8:	09 c0       	rjmp	.+18     	; 0x440c <Pos+0x50>
		    CountMatch=0;
			for(j=0;j<subLen;j++){
			    //notFound
			    if (Substr[j]==String[i+j]){
    43fa:	fa 01       	movw	r30, r20
    43fc:	e2 0f       	add	r30, r18
    43fe:	f3 1f       	adc	r31, r19
    4400:	90 81       	ld	r25, Z
    4402:	89 91       	ld	r24, Y+
    4404:	2f 5f       	subi	r18, 0xFF	; 255
    4406:	3f 4f       	sbci	r19, 0xFF	; 255
    4408:	98 17       	cp	r25, r24
    440a:	21 f4       	brne	.+8      	; 0x4414 <Pos+0x58>
	subLen=strlen(Substr);
	PosFound=Length;
	for(i=0;i<Length;i++){
	    if (String[i]==Substr[0]){
		    CountMatch=0;
			for(j=0;j<subLen;j++){
    440c:	20 17       	cp	r18, r16
    440e:	a8 f3       	brcs	.-22     	; 0x43fa <Pos+0x3e>
    4410:	86 2f       	mov	r24, r22
    4412:	05 c0       	rjmp	.+10     	; 0x441e <Pos+0x62>
	char Length,subLen,PosFound;

	Length=strlen(String);
	subLen=strlen(Substr);
	PosFound=Length;
	for(i=0;i<Length;i++){
    4414:	6f 5f       	subi	r22, 0xFF	; 255
    4416:	11 96       	adiw	r26, 0x01	; 1
    4418:	61 17       	cp	r22, r17
    441a:	30 f3       	brcs	.-52     	; 0x43e8 <Pos+0x2c>
    441c:	81 2f       	mov	r24, r17
			    break;  
			}
		}
	}
  return  PosFound;
}
    441e:	90 e0       	ldi	r25, 0x00	; 0
    4420:	df 91       	pop	r29
    4422:	cf 91       	pop	r28
    4424:	1f 91       	pop	r17
    4426:	0f 91       	pop	r16
    4428:	08 95       	ret

0000442a <CreateReport>:
//		  }
//	 }
     *Pos=iPos;
}

void CreateReport(char *strData, char *strPrnBuffer, unsigned int *Pos){
    442a:	7f 92       	push	r7
    442c:	8f 92       	push	r8
    442e:	9f 92       	push	r9
    4430:	af 92       	push	r10
    4432:	bf 92       	push	r11
    4434:	cf 92       	push	r12
    4436:	df 92       	push	r13
    4438:	ef 92       	push	r14
    443a:	ff 92       	push	r15
    443c:	0f 93       	push	r16
    443e:	1f 93       	push	r17
    4440:	cf 93       	push	r28
    4442:	df 93       	push	r29
    4444:	5c 01       	movw	r10, r24
    4446:	6b 01       	movw	r12, r22
    4448:	4a 01       	movw	r8, r20
     unsigned int iPos,PosResult,Length;
	 char i,strSend[20];
	 Length=strlen(strData);
    444a:	ec 01       	movw	r28, r24
    444c:	09 90       	ld	r0, Y+
    444e:	00 20       	and	r0, r0
    4450:	e9 f7       	brne	.-6      	; 0x444c <CreateReport+0x22>
    4452:	21 97       	sbiw	r28, 0x01	; 1
    4454:	c8 1b       	sub	r28, r24
    4456:	d9 0b       	sbc	r29, r25
    4458:	cb 32       	cpi	r28, 0x2B	; 43
    445a:	d1 05       	cpc	r29, r1
    445c:	10 f0       	brcs	.+4      	; 0x4462 <CreateReport+0x38>
    445e:	ca e2       	ldi	r28, 0x2A	; 42
    4460:	d0 e0       	ldi	r29, 0x00	; 0
	 if (Length>BORDER_LENGTH)Length=BORDER_LENGTH;
     
	 iPos=*Pos;
    4462:	f4 01       	movw	r30, r8
    4464:	00 81       	ld	r16, Z
    4466:	11 81       	ldd	r17, Z+1	; 0x01
	 strPrnBuffer[iPos]=GetBorderValue(btVertical);
    4468:	76 01       	movw	r14, r12
    446a:	e0 0e       	add	r14, r16
    446c:	f1 1e       	adc	r15, r17
    446e:	8a e0       	ldi	r24, 0x0A	; 10
    4470:	0e 94 48 1a 	call	0x3490	; 0x3490 <GetBorderValue>
    4474:	78 2e       	mov	r7, r24
    4476:	f7 01       	movw	r30, r14
    4478:	80 83       	st	Z, r24
     iPos++;
    447a:	98 01       	movw	r18, r16
    447c:	2f 5f       	subi	r18, 0xFF	; 255
    447e:	3f 4f       	sbci	r19, 0xFF	; 255
    4480:	d7 01       	movw	r26, r14
    4482:	90 e0       	ldi	r25, 0x00	; 0
    4484:	07 c0       	rjmp	.+14     	; 0x4494 <CreateReport+0x6a>

	 for (i=0;i<Length;i++){	      
	      strPrnBuffer[iPos]=strData[i];	      	 
    4486:	ea 0d       	add	r30, r10
    4488:	fb 1d       	adc	r31, r11
    448a:	80 81       	ld	r24, Z
    448c:	8c 93       	st	X, r24
		  iPos++;
    448e:	2f 5f       	subi	r18, 0xFF	; 255
    4490:	3f 4f       	sbci	r19, 0xFF	; 255
     
	 iPos=*Pos;
	 strPrnBuffer[iPos]=GetBorderValue(btVertical);
     iPos++;

	 for (i=0;i<Length;i++){	      
    4492:	9f 5f       	subi	r25, 0xFF	; 255
    4494:	e9 2f       	mov	r30, r25
    4496:	f0 e0       	ldi	r31, 0x00	; 0
    4498:	11 96       	adiw	r26, 0x01	; 1
    449a:	ec 17       	cp	r30, r28
    449c:	fd 07       	cpc	r31, r29
    449e:	98 f3       	brcs	.-26     	; 0x4486 <CreateReport+0x5c>
    44a0:	62 2f       	mov	r22, r18
	      strPrnBuffer[iPos]=strData[i];	      	 
		  iPos++;
	 }
	 if (Length<BORDER_LENGTH){
    44a2:	ca 32       	cpi	r28, 0x2A	; 42
    44a4:	d1 05       	cpc	r29, r1
    44a6:	91 f0       	breq	.+36     	; 0x44cc <CreateReport+0xa2>
    44a8:	f6 01       	movw	r30, r12
    44aa:	e2 0f       	add	r30, r18
    44ac:	f3 1f       	adc	r31, r19
	     for (i=0;i<(BORDER_LENGTH-Length);i++){	      
    44ae:	4a e2       	ldi	r20, 0x2A	; 42
    44b0:	50 e0       	ldi	r21, 0x00	; 0
    44b2:	4c 1b       	sub	r20, r28
    44b4:	5d 0b       	sbc	r21, r29
	          strPrnBuffer[iPos]=' ';
    44b6:	70 e2       	ldi	r23, 0x20	; 32
    44b8:	03 c0       	rjmp	.+6      	; 0x44c0 <CreateReport+0x96>
    44ba:	71 93       	st	Z+, r23
		      iPos++;
    44bc:	2f 5f       	subi	r18, 0xFF	; 255
    44be:	3f 4f       	sbci	r19, 0xFF	; 255
	 for (i=0;i<Length;i++){	      
	      strPrnBuffer[iPos]=strData[i];	      	 
		  iPos++;
	 }
	 if (Length<BORDER_LENGTH){
	     for (i=0;i<(BORDER_LENGTH-Length);i++){	      
    44c0:	82 2f       	mov	r24, r18
    44c2:	86 1b       	sub	r24, r22
    44c4:	90 e0       	ldi	r25, 0x00	; 0
    44c6:	84 17       	cp	r24, r20
    44c8:	95 07       	cpc	r25, r21
    44ca:	b8 f3       	brcs	.-18     	; 0x44ba <CreateReport+0x90>
	          strPrnBuffer[iPos]=' ';
		      iPos++;
	     }	    
	 }
	 strPrnBuffer[iPos]=GetBorderValue(btVertical);
    44cc:	f6 01       	movw	r30, r12
    44ce:	e2 0f       	add	r30, r18
    44d0:	f3 1f       	adc	r31, r19
    44d2:	70 82       	st	Z, r7
     iPos++;
    44d4:	c9 01       	movw	r24, r18
    44d6:	01 96       	adiw	r24, 0x01	; 1
     //PosResult=*Pos+Length;
	 strPrnBuffer[iPos]=0x0D; 
    44d8:	c8 0e       	add	r12, r24
    44da:	d9 1e       	adc	r13, r25
    44dc:	2d e0       	ldi	r18, 0x0D	; 13
    44de:	f6 01       	movw	r30, r12
    44e0:	20 83       	st	Z, r18
	 iPos++;

   //*Pos=PosResult+1;
   *Pos=iPos;
    44e2:	01 96       	adiw	r24, 0x01	; 1
    44e4:	f4 01       	movw	r30, r8
    44e6:	91 83       	std	Z+1, r25	; 0x01
    44e8:	80 83       	st	Z, r24
    //sprintf_P(strSend,PSTR("Pos:%d"),*Pos);
	//uart_print(0,1,strSend);
}
    44ea:	df 91       	pop	r29
    44ec:	cf 91       	pop	r28
    44ee:	1f 91       	pop	r17
    44f0:	0f 91       	pop	r16
    44f2:	ff 90       	pop	r15
    44f4:	ef 90       	pop	r14
    44f6:	df 90       	pop	r13
    44f8:	cf 90       	pop	r12
    44fa:	bf 90       	pop	r11
    44fc:	af 90       	pop	r10
    44fe:	9f 90       	pop	r9
    4500:	8f 90       	pop	r8
    4502:	7f 90       	pop	r7
    4504:	08 95       	ret

00004506 <AddList>:

//AddListTotal(xGrade,strRef1);
void ClearList(char *strList){
     FillChar(strList,strlen(strList),0);
}
void AddList(char GradeId, char *strList){
    4506:	38 2f       	mov	r19, r24
    4508:	ab 01       	movw	r20, r22
     char i,iPos,Length,IsFound=False;	 
	 if ((GradeId>=1)&&((GradeId<=6))){
    450a:	81 50       	subi	r24, 0x01	; 1
    450c:	86 30       	cpi	r24, 0x06	; 6
    450e:	68 f5       	brcc	.+90     	; 0x456a <AddList+0x64>
		 iPos=0;
		 IsFound=False;	
		 Length=strlen(strList);
    4510:	fb 01       	movw	r30, r22
    4512:	01 90       	ld	r0, Z+
    4514:	00 20       	and	r0, r0
    4516:	e9 f7       	brne	.-6      	; 0x4512 <AddList+0xc>
    4518:	31 97       	sbiw	r30, 0x01	; 1
    451a:	e6 1b       	sub	r30, r22
    451c:	f7 0b       	sbc	r31, r23
    451e:	7e 2f       	mov	r23, r30
	     if (Length>0){
    4520:	ee 23       	and	r30, r30
    4522:	11 f4       	brne	.+4      	; 0x4528 <AddList+0x22>
    4524:	20 e0       	ldi	r18, 0x00	; 0
    4526:	14 c0       	rjmp	.+40     	; 0x4550 <AddList+0x4a>
    4528:	80 e0       	ldi	r24, 0x00	; 0
    452a:	90 e0       	ldi	r25, 0x00	; 0
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
	    Result='0'+X;
    452c:	63 2f       	mov	r22, r19
    452e:	60 5d       	subi	r22, 0xD0	; 208
		 Length=strlen(strList);
	     if (Length>0){
			 for (i=0;i<Length;i++){//"123"
			      //uart(1,1,strList[i]);
			      iPos++;
			      if (strList[i]==Chr(GradeId)){
    4530:	fa 01       	movw	r30, r20
    4532:	e8 0f       	add	r30, r24
    4534:	f9 1f       	adc	r31, r25
    4536:	e0 81       	ld	r30, Z
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
    4538:	3a 30       	cpi	r19, 0x0A	; 10
    453a:	10 f0       	brcs	.+4      	; 0x4540 <AddList+0x3a>
    453c:	20 e3       	ldi	r18, 0x30	; 48
    453e:	01 c0       	rjmp	.+2      	; 0x4542 <AddList+0x3c>
	    Result='0'+X;
    4540:	26 2f       	mov	r18, r22
		 Length=strlen(strList);
	     if (Length>0){
			 for (i=0;i<Length;i++){//"123"
			      //uart(1,1,strList[i]);
			      iPos++;
			      if (strList[i]==Chr(GradeId)){
    4542:	e2 17       	cp	r30, r18
    4544:	91 f0       	breq	.+36     	; 0x456a <AddList+0x64>
    4546:	28 2f       	mov	r18, r24
    4548:	2f 5f       	subi	r18, 0xFF	; 255
    454a:	01 96       	adiw	r24, 0x01	; 1
	 if ((GradeId>=1)&&((GradeId<=6))){
		 iPos=0;
		 IsFound=False;	
		 Length=strlen(strList);
	     if (Length>0){
			 for (i=0;i<Length;i++){//"123"
    454c:	87 17       	cp	r24, r23
    454e:	80 f3       	brcs	.-32     	; 0x4530 <AddList+0x2a>
					  break;
				  }
			 }
	     }
		 if (IsFound==False){
		     strList[iPos]=Chr(GradeId);
    4550:	62 2f       	mov	r22, r18
    4552:	70 e0       	ldi	r23, 0x00	; 0
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
    4554:	3a 30       	cpi	r19, 0x0A	; 10
    4556:	10 f0       	brcs	.+4      	; 0x455c <AddList+0x56>
    4558:	80 e3       	ldi	r24, 0x30	; 48
    455a:	02 c0       	rjmp	.+4      	; 0x4560 <AddList+0x5a>
	    Result='0'+X;
    455c:	83 2f       	mov	r24, r19
    455e:	80 5d       	subi	r24, 0xD0	; 208
					  break;
				  }
			 }
	     }
		 if (IsFound==False){
		     strList[iPos]=Chr(GradeId);
    4560:	fa 01       	movw	r30, r20
    4562:	e6 0f       	add	r30, r22
    4564:	f7 1f       	adc	r31, r23
    4566:	80 83       	st	Z, r24
		     strList[iPos+1]=0;
    4568:	11 82       	std	Z+1, r1	; 0x01
    456a:	08 95       	ret

0000456c <ClearList>:
	 AddSpaceLag(strProductName,10);
}

//AddListTotal(xGrade,strRef1);
void ClearList(char *strList){
     FillChar(strList,strlen(strList),0);
    456c:	dc 01       	movw	r26, r24
    456e:	0d 90       	ld	r0, X+
    4570:	00 20       	and	r0, r0
    4572:	e9 f7       	brne	.-6      	; 0x456e <ClearList+0x2>
    4574:	11 97       	sbiw	r26, 0x01	; 1
    4576:	a8 1b       	sub	r26, r24
    4578:	b9 0b       	sbc	r27, r25
    457a:	20 e0       	ldi	r18, 0x00	; 0
    457c:	30 e0       	ldi	r19, 0x00	; 0
    457e:	06 c0       	rjmp	.+12     	; 0x458c <ClearList+0x20>
}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
	     strMemory[i]=data;
    4580:	fc 01       	movw	r30, r24
    4582:	e2 0f       	add	r30, r18
    4584:	f3 1f       	adc	r31, r19
    4586:	10 82       	st	Z, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    4588:	2f 5f       	subi	r18, 0xFF	; 255
    458a:	3f 4f       	sbci	r19, 0xFF	; 255
    458c:	2a 17       	cp	r18, r26
    458e:	3b 07       	cpc	r19, r27
    4590:	b8 f3       	brcs	.-18     	; 0x4580 <ClearList+0x14>
}

//AddListTotal(xGrade,strRef1);
void ClearList(char *strList){
     FillChar(strList,strlen(strList),0);
}
    4592:	08 95       	ret

00004594 <CalcSegmen>:
		 */
		 CalcMultiply(strA,strB,strC);
	 }
}

void CalcSegmen(char *strMain, char cNum, char *strResult){
    4594:	6f 92       	push	r6
    4596:	7f 92       	push	r7
    4598:	8f 92       	push	r8
    459a:	9f 92       	push	r9
    459c:	bf 92       	push	r11
    459e:	cf 92       	push	r12
    45a0:	df 92       	push	r13
    45a2:	ef 92       	push	r14
    45a4:	ff 92       	push	r15
    45a6:	0f 93       	push	r16
    45a8:	1f 93       	push	r17
    45aa:	df 93       	push	r29
    45ac:	cf 93       	push	r28
    45ae:	cd b7       	in	r28, 0x3d	; 61
    45b0:	de b7       	in	r29, 0x3e	; 62
    45b2:	64 97       	sbiw	r28, 0x14	; 20
    45b4:	0f b6       	in	r0, 0x3f	; 63
    45b6:	f8 94       	cli
    45b8:	de bf       	out	0x3e, r29	; 62
    45ba:	0f be       	out	0x3f, r0	; 63
    45bc:	cd bf       	out	0x3d, r28	; 61
    45be:	7c 01       	movw	r14, r24
    45c0:	6a 01       	movw	r12, r20
    45c2:	bb 24       	eor	r11, r11
    45c4:	30 e0       	ldi	r19, 0x00	; 0

	 xResNext=0;
     xRes=0;

	 for(i=0;i<strlen(strMain);i++){           
         xCalc=(strMain[strlen(strMain)-1-i]-'0')*(cNum-'0')+xResNext;//Hasil
    45c6:	06 2f       	mov	r16, r22
    45c8:	10 e0       	ldi	r17, 0x00	; 0
    45ca:	00 53       	subi	r16, 0x30	; 48
    45cc:	10 40       	sbci	r17, 0x00	; 0
		 xRes=xCalc%10;
		 xResNext=xCalc/10;
	     tmpResult[i]='0'+xRes;	 
    45ce:	3e 01       	movw	r6, r28
    45d0:	08 94       	sec
    45d2:	61 1c       	adc	r6, r1
    45d4:	71 1c       	adc	r7, r1
		 tmpResult[i+1]=0;
    45d6:	62 e0       	ldi	r22, 0x02	; 2
    45d8:	86 2e       	mov	r8, r22
    45da:	91 2c       	mov	r9, r1
    45dc:	8c 0e       	add	r8, r28
    45de:	9d 1e       	adc	r9, r29
    45e0:	24 c0       	rjmp	.+72     	; 0x462a <CalcSegmen+0x96>

	 xResNext=0;
     xRes=0;

	 for(i=0;i<strlen(strMain);i++){           
         xCalc=(strMain[strlen(strMain)-1-i]-'0')*(cNum-'0')+xResNext;//Hasil
    45e2:	11 97       	sbiw	r26, 0x01	; 1
    45e4:	a4 1b       	sub	r26, r20
    45e6:	b5 0b       	sbc	r27, r21
    45e8:	ae 0d       	add	r26, r14
    45ea:	bf 1d       	adc	r27, r15
    45ec:	8c 91       	ld	r24, X
    45ee:	90 e0       	ldi	r25, 0x00	; 0
    45f0:	c0 97       	sbiw	r24, 0x30	; 48
    45f2:	bc 01       	movw	r22, r24
    45f4:	60 9f       	mul	r22, r16
    45f6:	c0 01       	movw	r24, r0
    45f8:	61 9f       	mul	r22, r17
    45fa:	90 0d       	add	r25, r0
    45fc:	70 9f       	mul	r23, r16
    45fe:	90 0d       	add	r25, r0
    4600:	11 24       	eor	r1, r1
    4602:	23 2f       	mov	r18, r19
    4604:	28 0f       	add	r18, r24
		 xRes=xCalc%10;
		 xResNext=xCalc/10;
    4606:	82 2f       	mov	r24, r18
    4608:	6a e0       	ldi	r22, 0x0A	; 10
    460a:	0e 94 4c aa 	call	0x15498	; 0x15498 <__udivmodqi4>
    460e:	38 2f       	mov	r19, r24
	     tmpResult[i]='0'+xRes;	 
    4610:	f3 01       	movw	r30, r6
    4612:	e4 0f       	add	r30, r20
    4614:	f5 1f       	adc	r31, r21
    4616:	82 2f       	mov	r24, r18
    4618:	0e 94 4c aa 	call	0x15498	; 0x15498 <__udivmodqi4>
    461c:	90 5d       	subi	r25, 0xD0	; 208
    461e:	90 83       	st	Z, r25
		 tmpResult[i+1]=0;
    4620:	48 0d       	add	r20, r8
    4622:	59 1d       	adc	r21, r9
    4624:	fa 01       	movw	r30, r20
    4626:	10 82       	st	Z, r1
	 char i,lenR,xCalc,xRes,xResNext,tmpResult[20];

	 xResNext=0;
     xRes=0;

	 for(i=0;i<strlen(strMain);i++){           
    4628:	b3 94       	inc	r11
    462a:	4b 2d       	mov	r20, r11
    462c:	50 e0       	ldi	r21, 0x00	; 0
    462e:	d7 01       	movw	r26, r14
    4630:	0d 90       	ld	r0, X+
    4632:	00 20       	and	r0, r0
    4634:	e9 f7       	brne	.-6      	; 0x4630 <CalcSegmen+0x9c>
    4636:	11 97       	sbiw	r26, 0x01	; 1
    4638:	ae 19       	sub	r26, r14
    463a:	bf 09       	sbc	r27, r15
    463c:	4a 17       	cp	r20, r26
    463e:	5b 07       	cpc	r21, r27
    4640:	80 f2       	brcs	.-96     	; 0x45e2 <CalcSegmen+0x4e>
		 xRes=xCalc%10;
		 xResNext=xCalc/10;
	     tmpResult[i]='0'+xRes;	 
		 tmpResult[i+1]=0;
	 }
	 if (xResNext>0){
    4642:	33 23       	and	r19, r19
    4644:	89 f0       	breq	.+34     	; 0x4668 <CalcSegmen+0xd4>
	     lenR=strlen(tmpResult);
    4646:	fe 01       	movw	r30, r28
    4648:	31 96       	adiw	r30, 0x01	; 1
    464a:	df 01       	movw	r26, r30
    464c:	0d 90       	ld	r0, X+
    464e:	00 20       	and	r0, r0
    4650:	e9 f7       	brne	.-6      	; 0x464c <CalcSegmen+0xb8>
    4652:	11 97       	sbiw	r26, 0x01	; 1
	     tmpResult[lenR]='0'+xResNext;
    4654:	ae 1b       	sub	r26, r30
    4656:	b0 e0       	ldi	r27, 0x00	; 0
    4658:	ea 0f       	add	r30, r26
    465a:	fb 1f       	adc	r31, r27
    465c:	30 5d       	subi	r19, 0xD0	; 208
    465e:	30 83       	st	Z, r19
		 tmpResult[lenR+1]=0;	 
    4660:	ac 0f       	add	r26, r28
    4662:	bd 1f       	adc	r27, r29
    4664:	12 96       	adiw	r26, 0x02	; 2
    4666:	1c 92       	st	X, r1
	 }
	 lenR=strlen(tmpResult);
    4668:	de 01       	movw	r26, r28
    466a:	11 96       	adiw	r26, 0x01	; 1
    466c:	fd 01       	movw	r30, r26
    466e:	01 90       	ld	r0, Z+
    4670:	00 20       	and	r0, r0
    4672:	e9 f7       	brne	.-6      	; 0x466e <CalcSegmen+0xda>
    4674:	31 97       	sbiw	r30, 0x01	; 1
    4676:	9e 2f       	mov	r25, r30
    4678:	9a 1b       	sub	r25, r26
    467a:	a9 0f       	add	r26, r25
    467c:	b1 1d       	adc	r27, r1
    467e:	f6 01       	movw	r30, r12
    4680:	02 c0       	rjmp	.+4      	; 0x4686 <CalcSegmen+0xf2>
	 for (i=0;i<lenR;i++){
	     strResult[i]=tmpResult[lenR-1-i];
    4682:	8c 91       	ld	r24, X
    4684:	81 93       	st	Z+, r24
    4686:	11 97       	sbiw	r26, 0x01	; 1
	     lenR=strlen(tmpResult);
	     tmpResult[lenR]='0'+xResNext;
		 tmpResult[lenR+1]=0;	 
	 }
	 lenR=strlen(tmpResult);
	 for (i=0;i<lenR;i++){
    4688:	ac 17       	cp	r26, r28
    468a:	bd 07       	cpc	r27, r29
    468c:	d1 f7       	brne	.-12     	; 0x4682 <CalcSegmen+0xee>
	     strResult[i]=tmpResult[lenR-1-i];
	 }
	 strResult[lenR]=0;
    468e:	c9 0e       	add	r12, r25
    4690:	d1 1c       	adc	r13, r1
    4692:	f6 01       	movw	r30, r12
    4694:	10 82       	st	Z, r1
}
    4696:	64 96       	adiw	r28, 0x14	; 20
    4698:	0f b6       	in	r0, 0x3f	; 63
    469a:	f8 94       	cli
    469c:	de bf       	out	0x3e, r29	; 62
    469e:	0f be       	out	0x3f, r0	; 63
    46a0:	cd bf       	out	0x3d, r28	; 61
    46a2:	cf 91       	pop	r28
    46a4:	df 91       	pop	r29
    46a6:	1f 91       	pop	r17
    46a8:	0f 91       	pop	r16
    46aa:	ff 90       	pop	r15
    46ac:	ef 90       	pop	r14
    46ae:	df 90       	pop	r13
    46b0:	cf 90       	pop	r12
    46b2:	bf 90       	pop	r11
    46b4:	9f 90       	pop	r9
    46b6:	8f 90       	pop	r8
    46b8:	7f 90       	pop	r7
    46ba:	6f 90       	pop	r6
    46bc:	08 95       	ret

000046be <GetMinusPos>:
	      break;	 
	 }
*/
}

char GetMinusPos(char *strNumber){
    46be:	ac 01       	movw	r20, r24
char i,Result;
     Result=0;
     for(i=0;i<strlen(strNumber);i++){
    46c0:	dc 01       	movw	r26, r24
    46c2:	0d 90       	ld	r0, X+
    46c4:	00 20       	and	r0, r0
    46c6:	e9 f7       	brne	.-6      	; 0x46c2 <GetMinusPos+0x4>
    46c8:	11 97       	sbiw	r26, 0x01	; 1
    46ca:	a8 1b       	sub	r26, r24
    46cc:	b9 0b       	sbc	r27, r25
    46ce:	20 e0       	ldi	r18, 0x00	; 0
    46d0:	0a c0       	rjmp	.+20     	; 0x46e6 <GetMinusPos+0x28>
	     if (strNumber[i]=='-'){
    46d2:	e4 0f       	add	r30, r20
    46d4:	f5 1f       	adc	r31, r21
    46d6:	80 81       	ld	r24, Z
    46d8:	92 2f       	mov	r25, r18
    46da:	9f 5f       	subi	r25, 0xFF	; 255
    46dc:	8d 32       	cpi	r24, 0x2D	; 45
    46de:	11 f4       	brne	.+4      	; 0x46e4 <GetMinusPos+0x26>
		     Result=i+1;
    46e0:	89 2f       	mov	r24, r25
    46e2:	08 95       	ret
}

char GetMinusPos(char *strNumber){
char i,Result;
     Result=0;
     for(i=0;i<strlen(strNumber);i++){
    46e4:	29 2f       	mov	r18, r25
    46e6:	e2 2f       	mov	r30, r18
    46e8:	f0 e0       	ldi	r31, 0x00	; 0
    46ea:	ea 17       	cp	r30, r26
    46ec:	fb 07       	cpc	r31, r27
    46ee:	88 f3       	brcs	.-30     	; 0x46d2 <GetMinusPos+0x14>
    46f0:	80 e0       	ldi	r24, 0x00	; 0
		     Result=i+1;
			 break;
		 }
	 }
  return Result;     
}
    46f2:	08 95       	ret

000046f4 <IsMinus>:

char IsMinus(char *strNumber){
char i,Result=False;
     Result=False;
	 if (GetMinusPos(strNumber)>0){
    46f4:	0e 94 5f 23 	call	0x46be	; 0x46be <GetMinusPos>
    46f8:	81 11       	cpse	r24, r1
    46fa:	81 e0       	ldi	r24, 0x01	; 1
	     Result=True;
	 }     
  return Result;
}
    46fc:	08 95       	ret

000046fe <RemoveMinus>:

void RemoveMinus(char *strNumber){
    46fe:	cf 93       	push	r28
    4700:	df 93       	push	r29
    4702:	ec 01       	movw	r28, r24
     char MinPos,Length;

     if (IsMinus(strNumber)==True){
    4704:	0e 94 7a 23 	call	0x46f4	; 0x46f4 <IsMinus>
    4708:	81 30       	cpi	r24, 0x01	; 1
    470a:	19 f5       	brne	.+70     	; 0x4752 <RemoveMinus+0x54>
	     MinPos=GetMinusPos(strNumber);
    470c:	ce 01       	movw	r24, r28
    470e:	0e 94 5f 23 	call	0x46be	; 0x46be <GetMinusPos>
		 Length=strlen(strNumber);
    4712:	de 01       	movw	r26, r28
    4714:	0d 90       	ld	r0, X+
    4716:	00 20       	and	r0, r0
    4718:	e9 f7       	brne	.-6      	; 0x4714 <RemoveMinus+0x16>
    471a:	11 97       	sbiw	r26, 0x01	; 1
		 StrPosCopy(strNumber,strNumber,MinPos,(Length-MinPos));	      
    471c:	ac 1b       	sub	r26, r28
    471e:	b0 e0       	ldi	r27, 0x00	; 0
    4720:	90 e0       	ldi	r25, 0x00	; 0
    4722:	a8 1b       	sub	r26, r24
    4724:	b9 0b       	sbc	r27, r25
    4726:	ae 01       	movw	r20, r28
    4728:	48 0f       	add	r20, r24
    472a:	59 1f       	adc	r21, r25
    472c:	20 e0       	ldi	r18, 0x00	; 0
    472e:	30 e0       	ldi	r19, 0x00	; 0
    4730:	0a c0       	rjmp	.+20     	; 0x4746 <RemoveMinus+0x48>
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    4732:	be 01       	movw	r22, r28
    4734:	62 0f       	add	r22, r18
    4736:	73 1f       	adc	r23, r19
    4738:	fa 01       	movw	r30, r20
    473a:	81 91       	ld	r24, Z+
    473c:	af 01       	movw	r20, r30
    473e:	fb 01       	movw	r30, r22
    4740:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    4742:	2f 5f       	subi	r18, 0xFF	; 255
    4744:	3f 4f       	sbci	r19, 0xFF	; 255
    4746:	2a 17       	cp	r18, r26
    4748:	3b 07       	cpc	r19, r27
    474a:	98 f3       	brcs	.-26     	; 0x4732 <RemoveMinus+0x34>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    474c:	ac 0f       	add	r26, r28
    474e:	bd 1f       	adc	r27, r29
    4750:	1c 92       	st	X, r1
     if (IsMinus(strNumber)==True){
	     MinPos=GetMinusPos(strNumber);
		 Length=strlen(strNumber);
		 StrPosCopy(strNumber,strNumber,MinPos,(Length-MinPos));	      
	 }
}
    4752:	df 91       	pop	r29
    4754:	cf 91       	pop	r28
    4756:	08 95       	ret

00004758 <IsMoreThan>:
	    Result=c-'0';
	 }
	return Result;
}

char IsMoreThan(char *strA, char *strB){
    4758:	ac 01       	movw	r20, r24
    475a:	27 2f       	mov	r18, r23
     char i,LengthA,LengthB,Result=False;
	 char strSend[20];	 
     //Check Length
	 LengthA=strlen(strA);
    475c:	fc 01       	movw	r30, r24
    475e:	01 90       	ld	r0, Z+
    4760:	00 20       	and	r0, r0
    4762:	e9 f7       	brne	.-6      	; 0x475e <IsMoreThan+0x6>
    4764:	31 97       	sbiw	r30, 0x01	; 1
    4766:	7e 2f       	mov	r23, r30
    4768:	78 1b       	sub	r23, r24
	 LengthB=strlen(strB);
    476a:	a6 2f       	mov	r26, r22
    476c:	b2 2f       	mov	r27, r18
    476e:	fd 01       	movw	r30, r26
    4770:	01 90       	ld	r0, Z+
    4772:	00 20       	and	r0, r0
    4774:	e9 f7       	brne	.-6      	; 0x4770 <IsMoreThan+0x18>
    4776:	31 97       	sbiw	r30, 0x01	; 1
    4778:	e6 1b       	sub	r30, r22
	 Result=False;
	 if (LengthA>LengthB)Result=True;
    477a:	e7 17       	cp	r30, r23
    477c:	48 f1       	brcs	.+82     	; 0x47d0 <IsMoreThan+0x78>
	 else 
	 if (LengthA==LengthB){          //456755 
    477e:	7e 17       	cp	r23, r30
    4780:	49 f5       	brne	.+82     	; 0x47d4 <IsMoreThan+0x7c>
    4782:	86 2f       	mov	r24, r22
    4784:	92 2f       	mov	r25, r18
    4786:	9c 01       	movw	r18, r24
    4788:	d9 01       	movw	r26, r18
    478a:	20 e0       	ldi	r18, 0x00	; 0
    478c:	30 e0       	ldi	r19, 0x00	; 0
    478e:	1d c0       	rjmp	.+58     	; 0x47ca <IsMoreThan+0x72>
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
    4790:	fa 01       	movw	r30, r20
    4792:	e2 0f       	add	r30, r18
    4794:	f3 1f       	adc	r31, r19
    4796:	e0 81       	ld	r30, Z
    4798:	e0 53       	subi	r30, 0x30	; 48
    479a:	ea 30       	cpi	r30, 0x0A	; 10
    479c:	10 f0       	brcs	.+4      	; 0x47a2 <IsMoreThan+0x4a>
    479e:	60 e0       	ldi	r22, 0x00	; 0
    47a0:	01 c0       	rjmp	.+2      	; 0x47a4 <IsMoreThan+0x4c>
    47a2:	6e 2f       	mov	r22, r30
	 Result=False;
	 if (LengthA>LengthB)Result=True;
	 else 
	 if (LengthA==LengthB){          //456755 
	     for(i=0;i<LengthA;i++){    //456410   
		     if (Ord(strA[i])>Ord(strB[i])){
    47a4:	8c 91       	ld	r24, X
    47a6:	80 53       	subi	r24, 0x30	; 48
    47a8:	8a 30       	cpi	r24, 0x0A	; 10
    47aa:	10 f0       	brcs	.+4      	; 0x47b0 <IsMoreThan+0x58>
    47ac:	90 e0       	ldi	r25, 0x00	; 0
    47ae:	01 c0       	rjmp	.+2      	; 0x47b2 <IsMoreThan+0x5a>
    47b0:	98 2f       	mov	r25, r24
    47b2:	96 17       	cp	r25, r22
    47b4:	68 f0       	brcs	.+26     	; 0x47d0 <IsMoreThan+0x78>
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
    47b6:	ea 30       	cpi	r30, 0x0A	; 10
    47b8:	08 f0       	brcs	.+2      	; 0x47bc <IsMoreThan+0x64>
    47ba:	e0 e0       	ldi	r30, 0x00	; 0
	 if (LengthA==LengthB){          //456755 
	     for(i=0;i<LengthA;i++){    //456410   
		     if (Ord(strA[i])>Ord(strB[i])){
			     Result=True;
				 break;
			 }else if (Ord(strA[i])<Ord(strB[i])){
    47bc:	8a 30       	cpi	r24, 0x0A	; 10
    47be:	10 f4       	brcc	.+4      	; 0x47c4 <IsMoreThan+0x6c>
    47c0:	e8 17       	cp	r30, r24
    47c2:	40 f0       	brcs	.+16     	; 0x47d4 <IsMoreThan+0x7c>
    47c4:	2f 5f       	subi	r18, 0xFF	; 255
    47c6:	3f 4f       	sbci	r19, 0xFF	; 255
    47c8:	11 96       	adiw	r26, 0x01	; 1
	 LengthB=strlen(strB);
	 Result=False;
	 if (LengthA>LengthB)Result=True;
	 else 
	 if (LengthA==LengthB){          //456755 
	     for(i=0;i<LengthA;i++){    //456410   
    47ca:	27 17       	cp	r18, r23
    47cc:	08 f3       	brcs	.-62     	; 0x4790 <IsMoreThan+0x38>
    47ce:	02 c0       	rjmp	.+4      	; 0x47d4 <IsMoreThan+0x7c>
    47d0:	81 e0       	ldi	r24, 0x01	; 1
    47d2:	08 95       	ret
    47d4:	80 e0       	ldi	r24, 0x00	; 0
				 break;
			 }			 		 
		 }
	 }
  return Result;
}
    47d6:	08 95       	ret

000047d8 <IsZerroAll>:
   return Result;
}

char IsZerroAll(char *strZerro){
     char i,Length,nZerro=0,Result;
	 Length=strlen(strZerro);
    47d8:	fc 01       	movw	r30, r24
    47da:	01 90       	ld	r0, Z+
    47dc:	00 20       	and	r0, r0
    47de:	e9 f7       	brne	.-6      	; 0x47da <IsZerroAll+0x2>
    47e0:	31 97       	sbiw	r30, 0x01	; 1
    47e2:	e8 1b       	sub	r30, r24
    47e4:	dc 01       	movw	r26, r24
    47e6:	ae 0f       	add	r26, r30
    47e8:	b1 1d       	adc	r27, r1
    47ea:	20 e0       	ldi	r18, 0x00	; 0
    47ec:	90 e0       	ldi	r25, 0x00	; 0
    47ee:	06 c0       	rjmp	.+12     	; 0x47fc <IsZerroAll+0x24>
	 nZerro=0;
	 Result=False;
	 for(i=0;i<Length;i++){
	     if (strZerro[Length-i]=='0')nZerro++;
    47f0:	8c 91       	ld	r24, X
    47f2:	80 33       	cpi	r24, 0x30	; 48
    47f4:	09 f4       	brne	.+2      	; 0x47f8 <IsZerroAll+0x20>
    47f6:	2f 5f       	subi	r18, 0xFF	; 255
char IsZerroAll(char *strZerro){
     char i,Length,nZerro=0,Result;
	 Length=strlen(strZerro);
	 nZerro=0;
	 Result=False;
	 for(i=0;i<Length;i++){
    47f8:	9f 5f       	subi	r25, 0xFF	; 255
    47fa:	11 97       	sbiw	r26, 0x01	; 1
    47fc:	9e 17       	cp	r25, r30
    47fe:	c0 f3       	brcs	.-16     	; 0x47f0 <IsZerroAll+0x18>
    4800:	80 e0       	ldi	r24, 0x00	; 0
    4802:	2e 17       	cp	r18, r30
    4804:	09 f4       	brne	.+2      	; 0x4808 <IsZerroAll+0x30>
    4806:	81 e0       	ldi	r24, 0x01	; 1
	     if (strZerro[Length-i]=='0')nZerro++;
	 }if (nZerro==Length) Result=True;
  return Result;
}
    4808:	08 95       	ret

0000480a <PstrCopy>:
void CarriegeReturn(){
     uart(_COM_PRINTER, 1, 0x0D);     
     uart(_COM_PRINTER, 1, 0x0A);
}

void PstrCopy(char *Dest,char *Source){
    480a:	cf 93       	push	r28
    480c:	df 93       	push	r29
    480e:	20 e0       	ldi	r18, 0x00	; 0
    4810:	08 c0       	rjmp	.+16     	; 0x4822 <PstrCopy+0x18>
     char i=0;
	 for(i=0;i<strlen(Source);i++){
	    Dest[i]=pgm_read_byte(&Source[i]);
    4812:	fb 01       	movw	r30, r22
    4814:	ec 0f       	add	r30, r28
    4816:	fd 1f       	adc	r31, r29
    4818:	e4 91       	lpm	r30, Z+
    481a:	c8 0f       	add	r28, r24
    481c:	d9 1f       	adc	r29, r25
    481e:	e8 83       	st	Y, r30
     uart(_COM_PRINTER, 1, 0x0A);
}

void PstrCopy(char *Dest,char *Source){
     char i=0;
	 for(i=0;i<strlen(Source);i++){
    4820:	2f 5f       	subi	r18, 0xFF	; 255
    4822:	c2 2f       	mov	r28, r18
    4824:	d0 e0       	ldi	r29, 0x00	; 0
    4826:	fb 01       	movw	r30, r22
    4828:	01 90       	ld	r0, Z+
    482a:	00 20       	and	r0, r0
    482c:	e9 f7       	brne	.-6      	; 0x4828 <PstrCopy+0x1e>
    482e:	31 97       	sbiw	r30, 0x01	; 1
    4830:	e6 1b       	sub	r30, r22
    4832:	f7 0b       	sbc	r31, r23
    4834:	ce 17       	cp	r28, r30
    4836:	df 07       	cpc	r29, r31
    4838:	60 f3       	brcs	.-40     	; 0x4812 <PstrCopy+0x8>
	    Dest[i]=pgm_read_byte(&Source[i]);
	 }
}
    483a:	df 91       	pop	r29
    483c:	cf 91       	pop	r28
    483e:	08 95       	ret

00004840 <SpaceOnly>:
	     if (strDecimal[i]==DecPointMark)
		     strDecimal[i]=0;
	 }
}

char SpaceOnly(char *string){
    4840:	ac 01       	movw	r20, r24
     char Result,nChar=0;
	 unsigned int i=0;
	 nChar=0;
	 Result=False;
	 for(i=0;i<strlen(string);i++){
    4842:	dc 01       	movw	r26, r24
    4844:	0d 90       	ld	r0, X+
    4846:	00 20       	and	r0, r0
    4848:	e9 f7       	brne	.-6      	; 0x4844 <SpaceOnly+0x4>
    484a:	11 97       	sbiw	r26, 0x01	; 1
    484c:	a8 1b       	sub	r26, r24
    484e:	b9 0b       	sbc	r27, r25
    4850:	90 e0       	ldi	r25, 0x00	; 0
    4852:	20 e0       	ldi	r18, 0x00	; 0
    4854:	30 e0       	ldi	r19, 0x00	; 0
    4856:	09 c0       	rjmp	.+18     	; 0x486a <SpaceOnly+0x2a>
	    if(string[i]!=' ') nChar++;
    4858:	fa 01       	movw	r30, r20
    485a:	e2 0f       	add	r30, r18
    485c:	f3 1f       	adc	r31, r19
    485e:	80 81       	ld	r24, Z
    4860:	80 32       	cpi	r24, 0x20	; 32
    4862:	09 f0       	breq	.+2      	; 0x4866 <SpaceOnly+0x26>
    4864:	9f 5f       	subi	r25, 0xFF	; 255
char SpaceOnly(char *string){
     char Result,nChar=0;
	 unsigned int i=0;
	 nChar=0;
	 Result=False;
	 for(i=0;i<strlen(string);i++){
    4866:	2f 5f       	subi	r18, 0xFF	; 255
    4868:	3f 4f       	sbci	r19, 0xFF	; 255
    486a:	2a 17       	cp	r18, r26
    486c:	3b 07       	cpc	r19, r27
    486e:	a0 f3       	brcs	.-24     	; 0x4858 <SpaceOnly+0x18>
    4870:	80 e0       	ldi	r24, 0x00	; 0
    4872:	99 23       	and	r25, r25
    4874:	09 f4       	brne	.+2      	; 0x4878 <SpaceOnly+0x38>
    4876:	81 e0       	ldi	r24, 0x01	; 1
	 }
	 if (nChar>0) Result=False;
	 else Result=True;

	 return Result;
}
    4878:	08 95       	ret

0000487a <RemDecimal>:
	 }
}



void RemDecimal(char *strDecimal){//4500.00-->4500
    487a:	cf 93       	push	r28
    487c:	df 93       	push	r29
    487e:	ec 01       	movw	r28, r24
char i,DecPointMark;
     DecPointMark=eeprom_read_byte(&DefDecimalMark);	 
    4880:	8f e3       	ldi	r24, 0x3F	; 63
    4882:	90 e0       	ldi	r25, 0x00	; 0
    4884:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
    4888:	38 2f       	mov	r19, r24
    488a:	20 e0       	ldi	r18, 0x00	; 0
    488c:	08 c0       	rjmp	.+16     	; 0x489e <RemDecimal+0x24>

     for(i=0;i<strlen(strDecimal);i++){
	     if (strDecimal[i]==DecPointMark)
    488e:	fe 01       	movw	r30, r28
    4890:	e8 0f       	add	r30, r24
    4892:	f9 1f       	adc	r31, r25
    4894:	80 81       	ld	r24, Z
    4896:	83 17       	cp	r24, r19
    4898:	09 f4       	brne	.+2      	; 0x489c <RemDecimal+0x22>
		     strDecimal[i]=0;
    489a:	10 82       	st	Z, r1

void RemDecimal(char *strDecimal){//4500.00-->4500
char i,DecPointMark;
     DecPointMark=eeprom_read_byte(&DefDecimalMark);	 

     for(i=0;i<strlen(strDecimal);i++){
    489c:	2f 5f       	subi	r18, 0xFF	; 255
    489e:	82 2f       	mov	r24, r18
    48a0:	90 e0       	ldi	r25, 0x00	; 0
    48a2:	fe 01       	movw	r30, r28
    48a4:	01 90       	ld	r0, Z+
    48a6:	00 20       	and	r0, r0
    48a8:	e9 f7       	brne	.-6      	; 0x48a4 <RemDecimal+0x2a>
    48aa:	31 97       	sbiw	r30, 0x01	; 1
    48ac:	ec 1b       	sub	r30, r28
    48ae:	fd 0b       	sbc	r31, r29
    48b0:	8e 17       	cp	r24, r30
    48b2:	9f 07       	cpc	r25, r31
    48b4:	60 f3       	brcs	.-40     	; 0x488e <RemDecimal+0x14>
	     if (strDecimal[i]==DecPointMark)
		     strDecimal[i]=0;
	 }
}
    48b6:	df 91       	pop	r29
    48b8:	cf 91       	pop	r28
    48ba:	08 95       	ret

000048bc <GetProductPrice>:
          stGenerateReport=grScanAction;
	      break;
	 }
}
//SaveTotalProduct(xGrade,strDeltaVolume,strDeltaMoney);
void GetProductPrice(char *sPrice,char xPumpID,char xNozzle){
    48bc:	cf 92       	push	r12
    48be:	df 92       	push	r13
    48c0:	ef 92       	push	r14
    48c2:	ff 92       	push	r15
    48c4:	0f 93       	push	r16
    48c6:	1f 93       	push	r17
    48c8:	df 93       	push	r29
    48ca:	cf 93       	push	r28
    48cc:	cd b7       	in	r28, 0x3d	; 61
    48ce:	de b7       	in	r29, 0x3e	; 62
    48d0:	67 97       	sbiw	r28, 0x17	; 23
    48d2:	0f b6       	in	r0, 0x3f	; 63
    48d4:	f8 94       	cli
    48d6:	de bf       	out	0x3e, r29	; 62
    48d8:	0f be       	out	0x3f, r0	; 63
    48da:	cd bf       	out	0x3d, r28	; 61
    48dc:	7c 01       	movw	r14, r24
    48de:	d6 2e       	mov	r13, r22
    48e0:	c4 2e       	mov	r12, r20
char i,PPumpID[8],PProdID[6],strPrice[9],iPumpID,xProductID;
     sprintf_P(sPrice,PSTR(""));
    48e2:	00 d0       	rcall	.+0      	; 0x48e4 <GetProductPrice+0x28>
    48e4:	00 d0       	rcall	.+0      	; 0x48e6 <GetProductPrice+0x2a>
    48e6:	ad b7       	in	r26, 0x3d	; 61
    48e8:	be b7       	in	r27, 0x3e	; 62
    48ea:	12 96       	adiw	r26, 0x02	; 2
    48ec:	9c 93       	st	X, r25
    48ee:	8e 93       	st	-X, r24
    48f0:	11 97       	sbiw	r26, 0x01	; 1
    48f2:	86 e6       	ldi	r24, 0x66	; 102
    48f4:	95 e0       	ldi	r25, 0x05	; 5
    48f6:	14 96       	adiw	r26, 0x04	; 4
    48f8:	9c 93       	st	X, r25
    48fa:	8e 93       	st	-X, r24
    48fc:	13 97       	sbiw	r26, 0x03	; 3
    48fe:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
     //FindPumpID
	 eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap,8);
    4902:	0f 90       	pop	r0
    4904:	0f 90       	pop	r0
    4906:	0f 90       	pop	r0
    4908:	0f 90       	pop	r0
    490a:	8e 01       	movw	r16, r28
    490c:	09 5f       	subi	r16, 0xF9	; 249
    490e:	1f 4f       	sbci	r17, 0xFF	; 255
    4910:	c8 01       	movw	r24, r16
    4912:	66 e4       	ldi	r22, 0x46	; 70
    4914:	70 e0       	ldi	r23, 0x00	; 0
    4916:	48 e0       	ldi	r20, 0x08	; 8
    4918:	50 e0       	ldi	r21, 0x00	; 0
    491a:	0e 94 1b ad 	call	0x15a36	; 0x15a36 <__eerd_block_m128>
    491e:	f8 01       	movw	r30, r16
	 iPumpID=0;
	 for(i=0;i<8;i++){
    4920:	9e 01       	movw	r18, r28
    4922:	21 5f       	subi	r18, 0xF1	; 241
    4924:	3f 4f       	sbci	r19, 0xFF	; 255
//SaveTotalProduct(xGrade,strDeltaVolume,strDeltaMoney);
void GetProductPrice(char *sPrice,char xPumpID,char xNozzle){
char i,PPumpID[8],PProdID[6],strPrice[9],iPumpID,xProductID;
     sprintf_P(sPrice,PSTR(""));
     //FindPumpID
	 eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap,8);
    4926:	9e 2f       	mov	r25, r30
    4928:	90 1b       	sub	r25, r16
	 iPumpID=0;
	 for(i=0;i<8;i++){
	     if (PPumpID[i]==xPumpID){
    492a:	80 81       	ld	r24, Z
    492c:	8d 15       	cp	r24, r13
    492e:	11 f4       	brne	.+4      	; 0x4934 <GetProductPrice+0x78>
    4930:	89 2f       	mov	r24, r25
    4932:	05 c0       	rjmp	.+10     	; 0x493e <GetProductPrice+0x82>
    4934:	31 96       	adiw	r30, 0x01	; 1
char i,PPumpID[8],PProdID[6],strPrice[9],iPumpID,xProductID;
     sprintf_P(sPrice,PSTR(""));
     //FindPumpID
	 eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap,8);
	 iPumpID=0;
	 for(i=0;i<8;i++){
    4936:	e2 17       	cp	r30, r18
    4938:	f3 07       	cpc	r31, r19
    493a:	a9 f7       	brne	.-22     	; 0x4926 <GetProductPrice+0x6a>
    493c:	80 e0       	ldi	r24, 0x00	; 0
	     if (PPumpID[i]==xPumpID){
		     iPumpID=i;
			 break;
		 }	 
	 }
	 if ((iPumpID>=0)&&(xNozzle<6)){
    493e:	b5 e0       	ldi	r27, 0x05	; 5
    4940:	bc 15       	cp	r27, r12
    4942:	e8 f1       	brcs	.+122    	; 0x49be <GetProductPrice+0x102>
         eeprom_read_block((void*) &PProdID,(const void*) &DefNozzleMap[iPumpID],6);
    4944:	66 e0       	ldi	r22, 0x06	; 6
    4946:	86 9f       	mul	r24, r22
    4948:	b0 01       	movw	r22, r0
    494a:	11 24       	eor	r1, r1
    494c:	6a 5a       	subi	r22, 0xAA	; 170
    494e:	7f 4f       	sbci	r23, 0xFF	; 255
    4950:	ce 01       	movw	r24, r28
    4952:	01 96       	adiw	r24, 0x01	; 1
    4954:	46 e0       	ldi	r20, 0x06	; 6
    4956:	50 e0       	ldi	r21, 0x00	; 0
    4958:	0e 94 1b ad 	call	0x15a36	; 0x15a36 <__eerd_block_m128>
         xProductID=PProdID[xNozzle-1];
		 //Price
		 eeprom_read_block((void*) &strPrice, (const void*) &DefProductPrice[xProductID-1], 9);
    495c:	8e 01       	movw	r16, r28
    495e:	01 5f       	subi	r16, 0xF1	; 241
    4960:	1f 4f       	sbci	r17, 0xFF	; 255
    4962:	fe 01       	movw	r30, r28
    4964:	ec 0d       	add	r30, r12
    4966:	f1 1d       	adc	r31, r1
    4968:	60 81       	ld	r22, Z
    496a:	89 e0       	ldi	r24, 0x09	; 9
    496c:	68 9f       	mul	r22, r24
    496e:	b0 01       	movw	r22, r0
    4970:	11 24       	eor	r1, r1
    4972:	63 58       	subi	r22, 0x83	; 131
    4974:	7f 4f       	sbci	r23, 0xFF	; 255
    4976:	c8 01       	movw	r24, r16
    4978:	49 e0       	ldi	r20, 0x09	; 9
    497a:	50 e0       	ldi	r21, 0x00	; 0
    497c:	0e 94 1b ad 	call	0x15a36	; 0x15a36 <__eerd_block_m128>
		 RemDecimal(strPrice);
    4980:	c8 01       	movw	r24, r16
    4982:	0e 94 3d 24 	call	0x487a	; 0x487a <RemDecimal>
		 sprintf_P(sPrice,PSTR("%s"),strPrice);
    4986:	00 d0       	rcall	.+0      	; 0x4988 <GetProductPrice+0xcc>
    4988:	00 d0       	rcall	.+0      	; 0x498a <GetProductPrice+0xce>
    498a:	00 d0       	rcall	.+0      	; 0x498c <GetProductPrice+0xd0>
    498c:	ed b7       	in	r30, 0x3d	; 61
    498e:	fe b7       	in	r31, 0x3e	; 62
    4990:	31 96       	adiw	r30, 0x01	; 1
    4992:	ad b7       	in	r26, 0x3d	; 61
    4994:	be b7       	in	r27, 0x3e	; 62
    4996:	12 96       	adiw	r26, 0x02	; 2
    4998:	fc 92       	st	X, r15
    499a:	ee 92       	st	-X, r14
    499c:	11 97       	sbiw	r26, 0x01	; 1
    499e:	83 e6       	ldi	r24, 0x63	; 99
    49a0:	95 e0       	ldi	r25, 0x05	; 5
    49a2:	93 83       	std	Z+3, r25	; 0x03
    49a4:	82 83       	std	Z+2, r24	; 0x02
    49a6:	15 83       	std	Z+5, r17	; 0x05
    49a8:	04 83       	std	Z+4, r16	; 0x04
    49aa:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
    49ae:	ed b7       	in	r30, 0x3d	; 61
    49b0:	fe b7       	in	r31, 0x3e	; 62
    49b2:	36 96       	adiw	r30, 0x06	; 6
    49b4:	0f b6       	in	r0, 0x3f	; 63
    49b6:	f8 94       	cli
    49b8:	fe bf       	out	0x3e, r31	; 62
    49ba:	0f be       	out	0x3f, r0	; 63
    49bc:	ed bf       	out	0x3d, r30	; 61
	 }    
	 //Clear Decimal

}
    49be:	67 96       	adiw	r28, 0x17	; 23
    49c0:	0f b6       	in	r0, 0x3f	; 63
    49c2:	f8 94       	cli
    49c4:	de bf       	out	0x3e, r29	; 62
    49c6:	0f be       	out	0x3f, r0	; 63
    49c8:	cd bf       	out	0x3d, r28	; 61
    49ca:	cf 91       	pop	r28
    49cc:	df 91       	pop	r29
    49ce:	1f 91       	pop	r17
    49d0:	0f 91       	pop	r16
    49d2:	ff 90       	pop	r15
    49d4:	ef 90       	pop	r14
    49d6:	df 90       	pop	r13
    49d8:	cf 90       	pop	r12
    49da:	08 95       	ret

000049dc <FormatDate>:
	 }     
   }
}

              //Fmt:DATE_LONG_YEAR,DATE_SHORT_YEAR //0123456789    0123456789 
void FormatDate(char FmtYear, char *Date){         //2010/06/16 -> 16/06/2010
    49dc:	df 93       	push	r29
    49de:	cf 93       	push	r28
    49e0:	cd b7       	in	r28, 0x3d	; 61
    49e2:	de b7       	in	r29, 0x3e	; 62
    49e4:	2b 97       	sbiw	r28, 0x0b	; 11
    49e6:	0f b6       	in	r0, 0x3f	; 63
    49e8:	f8 94       	cli
    49ea:	de bf       	out	0x3e, r29	; 62
    49ec:	0f be       	out	0x3f, r0	; 63
    49ee:	cd bf       	out	0x3d, r28	; 61
    49f0:	98 2f       	mov	r25, r24
    49f2:	9b 01       	movw	r18, r22
     char i,sDate[11];

     sDate[0]=Date[8];
    49f4:	fb 01       	movw	r30, r22
    49f6:	80 85       	ldd	r24, Z+8	; 0x08
    49f8:	89 83       	std	Y+1, r24	; 0x01
	 sDate[1]=Date[9];
    49fa:	81 85       	ldd	r24, Z+9	; 0x09
    49fc:	8a 83       	std	Y+2, r24	; 0x02
     sDate[2]=Date[7];
    49fe:	87 81       	ldd	r24, Z+7	; 0x07
    4a00:	8b 83       	std	Y+3, r24	; 0x03
	 sDate[3]=Date[5];
    4a02:	85 81       	ldd	r24, Z+5	; 0x05
    4a04:	8c 83       	std	Y+4, r24	; 0x04
     sDate[4]=Date[6];
    4a06:	86 81       	ldd	r24, Z+6	; 0x06
    4a08:	8d 83       	std	Y+5, r24	; 0x05
	 sDate[5]=Date[4];
    4a0a:	84 81       	ldd	r24, Z+4	; 0x04
    4a0c:	8e 83       	std	Y+6, r24	; 0x06
	 switch(FmtYear){
    4a0e:	99 23       	and	r25, r25
    4a10:	19 f0       	breq	.+6      	; 0x4a18 <FormatDate+0x3c>
    4a12:	91 30       	cpi	r25, 0x01	; 1
    4a14:	59 f4       	brne	.+22     	; 0x4a2c <FormatDate+0x50>
    4a16:	0f c0       	rjmp	.+30     	; 0x4a36 <FormatDate+0x5a>
	 case DATE_LONG_YEAR:
	 	  for(i=0;i<4;i++)sDate[i+6]=Date[i];
    4a18:	fb 01       	movw	r30, r22
    4a1a:	80 81       	ld	r24, Z
    4a1c:	8f 83       	std	Y+7, r24	; 0x07
    4a1e:	81 81       	ldd	r24, Z+1	; 0x01
    4a20:	88 87       	std	Y+8, r24	; 0x08
    4a22:	82 81       	ldd	r24, Z+2	; 0x02
    4a24:	89 87       	std	Y+9, r24	; 0x09
    4a26:	83 81       	ldd	r24, Z+3	; 0x03
    4a28:	8a 87       	std	Y+10, r24	; 0x0a
          sDate[10]=0;
    4a2a:	1b 86       	std	Y+11, r1	; 0x0b
    4a2c:	90 e0       	ldi	r25, 0x00	; 0
	      for(i=0;i<2;i++)sDate[i+6]=Date[i+2];
          sDate[8]=0;
	      break;
	 }
	 //replace
	 for(i=0;i<strlen(sDate);i++)Date[i]=sDate[i];
    4a2e:	ae 01       	movw	r20, r28
    4a30:	4f 5f       	subi	r20, 0xFF	; 255
    4a32:	5f 4f       	sbci	r21, 0xFF	; 255
    4a34:	0f c0       	rjmp	.+30     	; 0x4a54 <FormatDate+0x78>
	 case DATE_LONG_YEAR:
	 	  for(i=0;i<4;i++)sDate[i+6]=Date[i];
          sDate[10]=0;
	      break;
	 case DATE_SHORT_YEAR:
	      for(i=0;i<2;i++)sDate[i+6]=Date[i+2];
    4a36:	fb 01       	movw	r30, r22
    4a38:	82 81       	ldd	r24, Z+2	; 0x02
    4a3a:	8f 83       	std	Y+7, r24	; 0x07
    4a3c:	83 81       	ldd	r24, Z+3	; 0x03
    4a3e:	88 87       	std	Y+8, r24	; 0x08
          sDate[8]=0;
    4a40:	19 86       	std	Y+9, r1	; 0x09
    4a42:	f4 cf       	rjmp	.-24     	; 0x4a2c <FormatDate+0x50>
	      break;
	 }
	 //replace
	 for(i=0;i<strlen(sDate);i++)Date[i]=sDate[i];
    4a44:	f9 01       	movw	r30, r18
    4a46:	ea 0f       	add	r30, r26
    4a48:	fb 1f       	adc	r31, r27
    4a4a:	a4 0f       	add	r26, r20
    4a4c:	b5 1f       	adc	r27, r21
    4a4e:	8c 91       	ld	r24, X
    4a50:	80 83       	st	Z, r24
    4a52:	9f 5f       	subi	r25, 0xFF	; 255
    4a54:	a9 2f       	mov	r26, r25
    4a56:	b0 e0       	ldi	r27, 0x00	; 0
    4a58:	fa 01       	movw	r30, r20
    4a5a:	01 90       	ld	r0, Z+
    4a5c:	00 20       	and	r0, r0
    4a5e:	e9 f7       	brne	.-6      	; 0x4a5a <FormatDate+0x7e>
    4a60:	31 97       	sbiw	r30, 0x01	; 1
    4a62:	e4 1b       	sub	r30, r20
    4a64:	f5 0b       	sbc	r31, r21
    4a66:	ae 17       	cp	r26, r30
    4a68:	bf 07       	cpc	r27, r31
    4a6a:	60 f3       	brcs	.-40     	; 0x4a44 <FormatDate+0x68>
}
    4a6c:	2b 96       	adiw	r28, 0x0b	; 11
    4a6e:	0f b6       	in	r0, 0x3f	; 63
    4a70:	f8 94       	cli
    4a72:	de bf       	out	0x3e, r29	; 62
    4a74:	0f be       	out	0x3f, r0	; 63
    4a76:	cd bf       	out	0x3d, r28	; 61
    4a78:	cf 91       	pop	r28
    4a7a:	df 91       	pop	r29
    4a7c:	08 95       	ret

00004a7e <RemZeroLead>:

	while (1){};
  #endif
}

void RemZeroLead(char *Zeroed){//Remove Zero Character 00001004 000050000 0 
    4a7e:	cf 93       	push	r28
    4a80:	df 93       	push	r29
    4a82:	ec 01       	movw	r28, r24
unsigned char i=0,Length=0,ZeroPos=0,IsFound=False;;
     IsFound=False;
     ZeroPos=0;Length=strlen(Zeroed);
    4a84:	fc 01       	movw	r30, r24
    4a86:	01 90       	ld	r0, Z+
    4a88:	00 20       	and	r0, r0
    4a8a:	e9 f7       	brne	.-6      	; 0x4a86 <RemZeroLead+0x8>
    4a8c:	31 97       	sbiw	r30, 0x01	; 1
    4a8e:	e8 1b       	sub	r30, r24
  if ((Length>1)&&(Zeroed[0]=='0')){
    4a90:	e2 30       	cpi	r30, 0x02	; 2
    4a92:	d0 f1       	brcs	.+116    	; 0x4b08 <RemZeroLead+0x8a>
    4a94:	88 81       	ld	r24, Y
    4a96:	80 33       	cpi	r24, 0x30	; 48
    4a98:	b9 f5       	brne	.+110    	; 0x4b08 <RemZeroLead+0x8a>
    4a9a:	4c 2f       	mov	r20, r28
    4a9c:	de 01       	movw	r26, r28
    4a9e:	90 e0       	ldi	r25, 0x00	; 0
	 if (Zeroed[0]=='0'){
         for(i=0;i<Length;i++){//00000000->0
	         if ((Zeroed[i]=='0')&&(Zeroed[i+1]=='0')&&(IsFound==False)) ZeroPos++;
    4aa0:	8c 91       	ld	r24, X
    4aa2:	80 33       	cpi	r24, 0x30	; 48
    4aa4:	69 f4       	brne	.+26     	; 0x4ac0 <RemZeroLead+0x42>
    4aa6:	11 96       	adiw	r26, 0x01	; 1
    4aa8:	8c 91       	ld	r24, X
    4aaa:	11 97       	sbiw	r26, 0x01	; 1
    4aac:	80 33       	cpi	r24, 0x30	; 48
    4aae:	11 f4       	brne	.+4      	; 0x4ab4 <RemZeroLead+0x36>
    4ab0:	9f 5f       	subi	r25, 0xFF	; 255
    4ab2:	06 c0       	rjmp	.+12     	; 0x4ac0 <RemZeroLead+0x42>
             if ((Zeroed[i]=='0')&&(Zeroed[i+1]!='0')){
			     if ((Zeroed[i+1]=='.')||(Zeroed[i+1]==','))ZeroPos--;
    4ab4:	8e 32       	cpi	r24, 0x2E	; 46
    4ab6:	11 f0       	breq	.+4      	; 0x4abc <RemZeroLead+0x3e>
    4ab8:	8c 32       	cpi	r24, 0x2C	; 44
    4aba:	41 f4       	brne	.+16     	; 0x4acc <RemZeroLead+0x4e>
    4abc:	91 50       	subi	r25, 0x01	; 1
    4abe:	06 c0       	rjmp	.+12     	; 0x4acc <RemZeroLead+0x4e>
    4ac0:	11 96       	adiw	r26, 0x01	; 1
unsigned char i=0,Length=0,ZeroPos=0,IsFound=False;;
     IsFound=False;
     ZeroPos=0;Length=strlen(Zeroed);
  if ((Length>1)&&(Zeroed[0]=='0')){
	 if (Zeroed[0]=='0'){
         for(i=0;i<Length;i++){//00000000->0
    4ac2:	8a 2f       	mov	r24, r26
    4ac4:	84 1b       	sub	r24, r20
    4ac6:	8e 17       	cp	r24, r30
    4ac8:	58 f3       	brcs	.-42     	; 0x4aa0 <RemZeroLead+0x22>
    4aca:	01 c0       	rjmp	.+2      	; 0x4ace <RemZeroLead+0x50>
		         IsFound=True;
			     break;			  
			     }
	      }

		  if (IsFound==True)ZeroPos++;
    4acc:	9f 5f       	subi	r25, 0xFF	; 255
		  if (ZeroPos>=Length)ZeroPos=Length-1;
    4ace:	9e 17       	cp	r25, r30
    4ad0:	10 f0       	brcs	.+4      	; 0x4ad6 <RemZeroLead+0x58>
    4ad2:	9e 2f       	mov	r25, r30
    4ad4:	91 50       	subi	r25, 0x01	; 1
    4ad6:	40 e0       	ldi	r20, 0x00	; 0
          for(i=0;i<(Length-ZeroPos);i++){
    4ad8:	89 2f       	mov	r24, r25
    4ada:	90 e0       	ldi	r25, 0x00	; 0
    4adc:	2e 2f       	mov	r18, r30
    4ade:	30 e0       	ldi	r19, 0x00	; 0
    4ae0:	28 1b       	sub	r18, r24
    4ae2:	39 0b       	sbc	r19, r25
	          Zeroed[i]=Zeroed[i+ZeroPos];
    4ae4:	be 01       	movw	r22, r28
    4ae6:	68 0f       	add	r22, r24
    4ae8:	79 1f       	adc	r23, r25
    4aea:	09 c0       	rjmp	.+18     	; 0x4afe <RemZeroLead+0x80>
    4aec:	fe 01       	movw	r30, r28
    4aee:	ea 0f       	add	r30, r26
    4af0:	fb 1f       	adc	r31, r27
    4af2:	a6 0f       	add	r26, r22
    4af4:	b7 1f       	adc	r27, r23
    4af6:	8c 91       	ld	r24, X
    4af8:	80 83       	st	Z, r24
		      Zeroed[i+1]=0;
    4afa:	11 82       	std	Z+1, r1	; 0x01
			     }
	      }

		  if (IsFound==True)ZeroPos++;
		  if (ZeroPos>=Length)ZeroPos=Length-1;
          for(i=0;i<(Length-ZeroPos);i++){
    4afc:	4f 5f       	subi	r20, 0xFF	; 255
    4afe:	a4 2f       	mov	r26, r20
    4b00:	b0 e0       	ldi	r27, 0x00	; 0
    4b02:	a2 17       	cp	r26, r18
    4b04:	b3 07       	cpc	r27, r19
    4b06:	94 f3       	brlt	.-28     	; 0x4aec <RemZeroLead+0x6e>
	          Zeroed[i]=Zeroed[i+ZeroPos];
		      Zeroed[i+1]=0;
	   }//Zeroed[Length-ZeroPos]=0;
	 }     
   }
}
    4b08:	df 91       	pop	r29
    4b0a:	cf 91       	pop	r28
    4b0c:	08 95       	ret

00004b0e <RemSpaceLead>:
	 if (Spaced[PosSpaced]==' ')Spaced[PosSpaced]=0;
	 if (Spaced[0]==' ')Spaced[0]=0;
	 Spaced[strlen(Spaced)]=0;
}

void RemSpaceLead(char *Zeroed){//Remove Space Character SSSSSS1234 12340234
    4b0e:	cf 93       	push	r28
    4b10:	df 93       	push	r29
    4b12:	ec 01       	movw	r28, r24
unsigned char i=0,Length=0,ZeroPos=0,IsFound=False;;
     ZeroPos=0;Length=strlen(Zeroed);
    4b14:	fc 01       	movw	r30, r24
    4b16:	01 90       	ld	r0, Z+
    4b18:	00 20       	and	r0, r0
    4b1a:	e9 f7       	brne	.-6      	; 0x4b16 <RemSpaceLead+0x8>
    4b1c:	31 97       	sbiw	r30, 0x01	; 1
    4b1e:	6e 2f       	mov	r22, r30
    4b20:	68 1b       	sub	r22, r24
	 if ((Length>1)&&(Zeroed[0]==' ')){
    4b22:	62 30       	cpi	r22, 0x02	; 2
    4b24:	e0 f1       	brcs	.+120    	; 0x4b9e <RemSpaceLead+0x90>
    4b26:	88 81       	ld	r24, Y
    4b28:	80 32       	cpi	r24, 0x20	; 32
    4b2a:	c9 f5       	brne	.+114    	; 0x4b9e <RemSpaceLead+0x90>
    4b2c:	4c 2f       	mov	r20, r28
    4b2e:	fe 01       	movw	r30, r28
    4b30:	90 e0       	ldi	r25, 0x00	; 0
    4b32:	20 e0       	ldi	r18, 0x00	; 0
	     for(i=0;i<Length;i++){
		     if ((Zeroed[i]==' ')&&(Zeroed[i+1]==' ')&&(IsFound==False)) ZeroPos++;
    4b34:	80 81       	ld	r24, Z
    4b36:	80 32       	cpi	r24, 0x20	; 32
    4b38:	41 f4       	brne	.+16     	; 0x4b4a <RemSpaceLead+0x3c>
    4b3a:	81 81       	ldd	r24, Z+1	; 0x01
    4b3c:	80 32       	cpi	r24, 0x20	; 32
    4b3e:	21 f4       	brne	.+8      	; 0x4b48 <RemSpaceLead+0x3a>
    4b40:	22 23       	and	r18, r18
    4b42:	19 f4       	brne	.+6      	; 0x4b4a <RemSpaceLead+0x3c>
    4b44:	9f 5f       	subi	r25, 0xFF	; 255
    4b46:	01 c0       	rjmp	.+2      	; 0x4b4a <RemSpaceLead+0x3c>
    4b48:	21 e0       	ldi	r18, 0x01	; 1
    4b4a:	31 96       	adiw	r30, 0x01	; 1

void RemSpaceLead(char *Zeroed){//Remove Space Character SSSSSS1234 12340234
unsigned char i=0,Length=0,ZeroPos=0,IsFound=False;;
     ZeroPos=0;Length=strlen(Zeroed);
	 if ((Length>1)&&(Zeroed[0]==' ')){
	     for(i=0;i<Length;i++){
    4b4c:	8e 2f       	mov	r24, r30
    4b4e:	84 1b       	sub	r24, r20
    4b50:	86 17       	cp	r24, r22
    4b52:	80 f3       	brcs	.-32     	; 0x4b34 <RemSpaceLead+0x26>
		     if ((Zeroed[i]==' ')&&(Zeroed[i+1]==' ')&&(IsFound==False)) ZeroPos++;
	         if((Zeroed[i]==' ')&&(Zeroed[i+1]!=' '))IsFound=True;
		 }ZeroPos++;
    4b54:	39 2f       	mov	r19, r25
    4b56:	3f 5f       	subi	r19, 0xFF	; 255
    4b58:	20 e0       	ldi	r18, 0x00	; 0
	     for(i=0;i<strlen(Zeroed);i++){
		     Zeroed[i]=Zeroed[i+ZeroPos];
    4b5a:	43 2f       	mov	r20, r19
    4b5c:	50 e0       	ldi	r21, 0x00	; 0
    4b5e:	09 c0       	rjmp	.+18     	; 0x4b72 <RemSpaceLead+0x64>
    4b60:	fe 01       	movw	r30, r28
    4b62:	e8 0f       	add	r30, r24
    4b64:	f9 1f       	adc	r31, r25
    4b66:	df 01       	movw	r26, r30
    4b68:	a4 0f       	add	r26, r20
    4b6a:	b5 1f       	adc	r27, r21
    4b6c:	8c 91       	ld	r24, X
    4b6e:	80 83       	st	Z, r24
	 if ((Length>1)&&(Zeroed[0]==' ')){
	     for(i=0;i<Length;i++){
		     if ((Zeroed[i]==' ')&&(Zeroed[i+1]==' ')&&(IsFound==False)) ZeroPos++;
	         if((Zeroed[i]==' ')&&(Zeroed[i+1]!=' '))IsFound=True;
		 }ZeroPos++;
	     for(i=0;i<strlen(Zeroed);i++){
    4b70:	2f 5f       	subi	r18, 0xFF	; 255
    4b72:	82 2f       	mov	r24, r18
    4b74:	90 e0       	ldi	r25, 0x00	; 0
    4b76:	fe 01       	movw	r30, r28
    4b78:	01 90       	ld	r0, Z+
    4b7a:	00 20       	and	r0, r0
    4b7c:	e9 f7       	brne	.-6      	; 0x4b78 <RemSpaceLead+0x6a>
    4b7e:	31 97       	sbiw	r30, 0x01	; 1
    4b80:	ec 1b       	sub	r30, r28
    4b82:	fd 0b       	sbc	r31, r29
    4b84:	8e 17       	cp	r24, r30
    4b86:	9f 07       	cpc	r25, r31
    4b88:	58 f3       	brcs	.-42     	; 0x4b60 <RemSpaceLead+0x52>
		     Zeroed[i]=Zeroed[i+ZeroPos];
		 }
		 //Clearence
		 for(i=(Length-ZeroPos);i<Length;i++){
    4b8a:	86 2f       	mov	r24, r22
    4b8c:	83 1b       	sub	r24, r19
    4b8e:	05 c0       	rjmp	.+10     	; 0x4b9a <RemSpaceLead+0x8c>
		     Zeroed[i]=0;
    4b90:	fe 01       	movw	r30, r28
    4b92:	e8 0f       	add	r30, r24
    4b94:	f1 1d       	adc	r31, r1
    4b96:	10 82       	st	Z, r1
		 }ZeroPos++;
	     for(i=0;i<strlen(Zeroed);i++){
		     Zeroed[i]=Zeroed[i+ZeroPos];
		 }
		 //Clearence
		 for(i=(Length-ZeroPos);i<Length;i++){
    4b98:	8f 5f       	subi	r24, 0xFF	; 255
    4b9a:	86 17       	cp	r24, r22
    4b9c:	c8 f3       	brcs	.-14     	; 0x4b90 <RemSpaceLead+0x82>
		     Zeroed[i]=0;
		 }
     }
}
    4b9e:	df 91       	pop	r29
    4ba0:	cf 91       	pop	r28
    4ba2:	08 95       	ret

00004ba4 <RemSpaceLag>:
	 if (Spaced[0]==' ')Spaced[0]=0;
	 Spaced[strlen(Spaced)]=0;
}
*/
                                                      //012345678
void RemSpaceLag(char *Spaced){//Remove Space Character 1234SSSSS L=9 i=0 i=7
    4ba4:	0f 93       	push	r16
    4ba6:	1f 93       	push	r17
    4ba8:	cf 93       	push	r28
    4baa:	df 93       	push	r29
    4bac:	ec 01       	movw	r28, r24
unsigned char i=0,Length=0,PosSpaced=0;
     Length=strlen(Spaced);
    4bae:	dc 01       	movw	r26, r24
    4bb0:	0d 90       	ld	r0, X+
    4bb2:	00 20       	and	r0, r0
    4bb4:	e9 f7       	brne	.-6      	; 0x4bb0 <RemSpaceLag+0xc>
    4bb6:	11 97       	sbiw	r26, 0x01	; 1
    4bb8:	a8 1b       	sub	r26, r24
    4bba:	b0 e0       	ldi	r27, 0x00	; 0
    4bbc:	20 e0       	ldi	r18, 0x00	; 0
    4bbe:	30 e0       	ldi	r19, 0x00	; 0
     for(i=0;i<(Length-1);i++){
    4bc0:	6a 2f       	mov	r22, r26
    4bc2:	70 e0       	ldi	r23, 0x00	; 0
    4bc4:	8b 01       	movw	r16, r22
    4bc6:	01 50       	subi	r16, 0x01	; 1
    4bc8:	10 40       	sbci	r17, 0x00	; 0
	     if ((Spaced[Length-i-2]==' ')&&(Spaced[Length-i-1]==' ')){
		      Spaced[Length-i-1]=0;
    4bca:	a1 50       	subi	r26, 0x01	; 1
    4bcc:	16 c0       	rjmp	.+44     	; 0x4bfa <RemSpaceLag+0x56>
                                                      //012345678
void RemSpaceLag(char *Spaced){//Remove Space Character 1234SSSSS L=9 i=0 i=7
unsigned char i=0,Length=0,PosSpaced=0;
     Length=strlen(Spaced);
     for(i=0;i<(Length-1);i++){
	     if ((Spaced[Length-i-2]==' ')&&(Spaced[Length-i-1]==' ')){
    4bce:	ab 01       	movw	r20, r22
    4bd0:	48 1b       	sub	r20, r24
    4bd2:	59 0b       	sbc	r21, r25
    4bd4:	fe 01       	movw	r30, r28
    4bd6:	e4 0f       	add	r30, r20
    4bd8:	f5 1f       	adc	r31, r21
    4bda:	32 97       	sbiw	r30, 0x02	; 2
    4bdc:	80 81       	ld	r24, Z
    4bde:	80 32       	cpi	r24, 0x20	; 32
    4be0:	89 f4       	brne	.+34     	; 0x4c04 <RemSpaceLag+0x60>
    4be2:	fa 01       	movw	r30, r20
    4be4:	31 97       	sbiw	r30, 0x01	; 1
    4be6:	ec 0f       	add	r30, r28
    4be8:	fd 1f       	adc	r31, r29
    4bea:	2f 5f       	subi	r18, 0xFF	; 255
    4bec:	3f 4f       	sbci	r19, 0xFF	; 255
    4bee:	80 81       	ld	r24, Z
    4bf0:	80 32       	cpi	r24, 0x20	; 32
    4bf2:	41 f4       	brne	.+16     	; 0x4c04 <RemSpaceLag+0x60>
		      Spaced[Length-i-1]=0;
    4bf4:	10 82       	st	Z, r1
    4bf6:	ba 2f       	mov	r27, r26
    4bf8:	b2 1b       	sub	r27, r18
*/
                                                      //012345678
void RemSpaceLag(char *Spaced){//Remove Space Character 1234SSSSS L=9 i=0 i=7
unsigned char i=0,Length=0,PosSpaced=0;
     Length=strlen(Spaced);
     for(i=0;i<(Length-1);i++){
    4bfa:	82 2f       	mov	r24, r18
    4bfc:	90 e0       	ldi	r25, 0x00	; 0
    4bfe:	80 17       	cp	r24, r16
    4c00:	91 07       	cpc	r25, r17
    4c02:	2c f3       	brlt	.-54     	; 0x4bce <RemSpaceLag+0x2a>
		      Spaced[Length-i-1]=0;
			  PosSpaced=Length-i-2;
			  }
         else break;
	 }
	 if (Spaced[PosSpaced]==' ')Spaced[PosSpaced]=0;
    4c04:	fe 01       	movw	r30, r28
    4c06:	eb 0f       	add	r30, r27
    4c08:	f1 1d       	adc	r31, r1
    4c0a:	80 81       	ld	r24, Z
    4c0c:	80 32       	cpi	r24, 0x20	; 32
    4c0e:	09 f4       	brne	.+2      	; 0x4c12 <RemSpaceLag+0x6e>
    4c10:	10 82       	st	Z, r1
	 if (Spaced[0]==' ')Spaced[0]=0;
    4c12:	88 81       	ld	r24, Y
    4c14:	80 32       	cpi	r24, 0x20	; 32
    4c16:	09 f4       	brne	.+2      	; 0x4c1a <RemSpaceLag+0x76>
    4c18:	18 82       	st	Y, r1
	 Spaced[strlen(Spaced)]=0;
    4c1a:	fe 01       	movw	r30, r28
    4c1c:	01 90       	ld	r0, Z+
    4c1e:	00 20       	and	r0, r0
    4c20:	e9 f7       	brne	.-6      	; 0x4c1c <RemSpaceLag+0x78>
    4c22:	31 97       	sbiw	r30, 0x01	; 1
    4c24:	ec 1b       	sub	r30, r28
    4c26:	fd 0b       	sbc	r31, r29
    4c28:	ec 0f       	add	r30, r28
    4c2a:	fd 1f       	adc	r31, r29
    4c2c:	10 82       	st	Z, r1
}
    4c2e:	df 91       	pop	r29
    4c30:	cf 91       	pop	r28
    4c32:	1f 91       	pop	r17
    4c34:	0f 91       	pop	r16
    4c36:	08 95       	ret

00004c38 <procMessage57>:
     StrPosCopy(rcv_trans,strAmount,135,7);
     StrPosCopy(rcv_trans,strGainPoints,142,4);
     return Result;
}

char procMessage57(){
    4c38:	1f 93       	push	r17
	    Dest[IdxSource+i]=Source[i];
	 }Dest[IdxSource+Length]=0;
}
char CharPosCopy(char *Source, unsigned int IdxSource){
     char Result;
     Result=Source[IdxSource];
    4c3a:	10 91 d8 09 	lds	r17, 0x09D8
    4c3e:	20 e0       	ldi	r18, 0x00	; 0
    4c40:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    4c42:	f9 01       	movw	r30, r18
    4c44:	e1 56       	subi	r30, 0x61	; 97
    4c46:	f6 4f       	sbci	r31, 0xF6	; 246
    4c48:	d9 01       	movw	r26, r18
    4c4a:	a5 5f       	subi	r26, 0xF5	; 245
    4c4c:	b3 4f       	sbci	r27, 0xF3	; 243
    4c4e:	95 96       	adiw	r26, 0x25	; 37
    4c50:	8c 91       	ld	r24, X
    4c52:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    4c54:	2f 5f       	subi	r18, 0xFF	; 255
    4c56:	3f 4f       	sbci	r19, 0xFF	; 255
    4c58:	24 31       	cpi	r18, 0x14	; 20
    4c5a:	31 05       	cpc	r19, r1
    4c5c:	91 f7       	brne	.-28     	; 0x4c42 <procMessage57+0xa>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    4c5e:	10 92 b3 09 	sts	0x09B3, r1
	 
	     //Card Status
		 Result=(CharPosCopy(rcv_trans,57)-'0')+1;
		 //CardID
		 StrPosCopy(strCardID,rcv_trans,37,20);
		 RemSpaceLead(strCardID);
    4c62:	8b e0       	ldi	r24, 0x0B	; 11
    4c64:	9c e0       	ldi	r25, 0x0C	; 12
    4c66:	0e 94 87 25 	call	0x4b0e	; 0x4b0e <RemSpaceLead>
    4c6a:	20 e0       	ldi	r18, 0x00	; 0
    4c6c:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    4c6e:	f9 01       	movw	r30, r18
    4c70:	ea 55       	subi	r30, 0x5A	; 90
    4c72:	fc 4f       	sbci	r31, 0xFC	; 252
    4c74:	d9 01       	movw	r26, r18
    4c76:	a1 56       	subi	r26, 0x61	; 97
    4c78:	b6 4f       	sbci	r27, 0xF6	; 246
    4c7a:	dc 96       	adiw	r26, 0x3c	; 60
    4c7c:	8c 91       	ld	r24, X
    4c7e:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    4c80:	2f 5f       	subi	r18, 0xFF	; 255
    4c82:	3f 4f       	sbci	r19, 0xFF	; 255
    4c84:	28 32       	cpi	r18, 0x28	; 40
    4c86:	31 05       	cpc	r19, r1
    4c88:	91 f7       	brne	.-28     	; 0x4c6e <procMessage57+0x36>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    4c8a:	10 92 ce 03 	sts	0x03CE, r1
		 //CardID
		 StrPosCopy(strCardID,rcv_trans,37,20);
		 RemSpaceLead(strCardID);
	     //Card Holder
		 StrPosCopy(rcv_trans,strCardHolder,60,40);
		 RemSpaceLag(strCardHolder);
    4c8e:	86 ea       	ldi	r24, 0xA6	; 166
    4c90:	93 e0       	ldi	r25, 0x03	; 3
    4c92:	0e 94 d2 25 	call	0x4ba4	; 0x4ba4 <RemSpaceLag>
    4c96:	20 e0       	ldi	r18, 0x00	; 0
    4c98:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    4c9a:	f9 01       	movw	r30, r18
    4c9c:	e3 52       	subi	r30, 0x23	; 35
    4c9e:	fc 4f       	sbci	r31, 0xFC	; 252
    4ca0:	d9 01       	movw	r26, r18
    4ca2:	a9 5c       	subi	r26, 0xC9	; 201
    4ca4:	b5 4f       	sbci	r27, 0xF5	; 245
    4ca6:	8c 91       	ld	r24, X
    4ca8:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    4caa:	2f 5f       	subi	r18, 0xFF	; 255
    4cac:	3f 4f       	sbci	r19, 0xFF	; 255
    4cae:	29 31       	cpi	r18, 0x19	; 25
    4cb0:	31 05       	cpc	r19, r1
    4cb2:	99 f7       	brne	.-26     	; 0x4c9a <procMessage57+0x62>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    4cb4:	10 92 f6 03 	sts	0x03F6, r1
	     //Card Holder
		 StrPosCopy(rcv_trans,strCardHolder,60,40);
		 RemSpaceLag(strCardHolder);
		 //BalanceTypePrint
		 StrPosCopy(rcv_trans,strBalanceTypePrint,154-2,25);
		 RemSpaceLag(strBalanceTypePrint);
    4cb8:	8d ed       	ldi	r24, 0xDD	; 221
    4cba:	93 e0       	ldi	r25, 0x03	; 3
    4cbc:	0e 94 d2 25 	call	0x4ba4	; 0x4ba4 <RemSpaceLag>
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    4cc0:	80 91 50 0a 	lds	r24, 0x0A50
    4cc4:	80 93 e5 02 	sts	0x02E5, r24
	 }Dest[Length]=0;
    4cc8:	10 92 e6 02 	sts	0x02E6, r1
    4ccc:	20 e0       	ldi	r18, 0x00	; 0
    4cce:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    4cd0:	f9 01       	movw	r30, r18
    4cd2:	e6 58       	subi	r30, 0x86	; 134
    4cd4:	f3 4f       	sbci	r31, 0xF3	; 243
    4cd6:	d9 01       	movw	r26, r18
    4cd8:	af 5a       	subi	r26, 0xAF	; 175
    4cda:	b5 4f       	sbci	r27, 0xF5	; 245
    4cdc:	8c 91       	ld	r24, X
    4cde:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    4ce0:	2f 5f       	subi	r18, 0xFF	; 255
    4ce2:	3f 4f       	sbci	r19, 0xFF	; 255
    4ce4:	2d 30       	cpi	r18, 0x0D	; 13
    4ce6:	31 05       	cpc	r19, r1
    4ce8:	99 f7       	brne	.-26     	; 0x4cd0 <procMessage57+0x98>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    4cea:	10 92 87 0c 	sts	0x0C87, r1
		 RemSpaceLag(strBalanceTypePrint);
         //BalanceTypeCode
		 StrPosCopy(rcv_trans,strBalanceCode,177,1);
		 //Balance
		 StrPosCopy(rcv_trans,strBalance,178,13);
		 RemSpaceLead(strBalance);
    4cee:	8a e7       	ldi	r24, 0x7A	; 122
    4cf0:	9c e0       	ldi	r25, 0x0C	; 12
    4cf2:	0e 94 87 25 	call	0x4b0e	; 0x4b0e <RemSpaceLead>
    4cf6:	20 e0       	ldi	r18, 0x00	; 0
    4cf8:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    4cfa:	f9 01       	movw	r30, r18
    4cfc:	e4 58       	subi	r30, 0x84	; 132
    4cfe:	f6 4f       	sbci	r31, 0xF6	; 246
    4d00:	d9 01       	movw	r26, r18
    4d02:	a2 5a       	subi	r26, 0xA2	; 162
    4d04:	b5 4f       	sbci	r27, 0xF5	; 245
    4d06:	8c 91       	ld	r24, X
    4d08:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    4d0a:	2f 5f       	subi	r18, 0xFF	; 255
    4d0c:	3f 4f       	sbci	r19, 0xFF	; 255
    4d0e:	2a 30       	cpi	r18, 0x0A	; 10
    4d10:	31 05       	cpc	r19, r1
    4d12:	99 f7       	brne	.-26     	; 0x4cfa <procMessage57+0xc2>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    4d14:	10 92 86 09 	sts	0x0986, r1
		 //Balance
		 StrPosCopy(rcv_trans,strBalance,178,13);
		 RemSpaceLead(strBalance);
		 //LicPlate
		 StrPosCopy(rcv_trans,strLicPlate,193-2,10);
		 RemSpaceLag(strLicPlate);
    4d18:	8c e7       	ldi	r24, 0x7C	; 124
    4d1a:	99 e0       	ldi	r25, 0x09	; 9
    4d1c:	0e 94 d2 25 	call	0x4ba4	; 0x4ba4 <RemSpaceLag>
    4d20:	20 e0       	ldi	r18, 0x00	; 0
    4d22:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    4d24:	f9 01       	movw	r30, r18
    4d26:	e5 50       	subi	r30, 0x05	; 5
    4d28:	f8 4f       	sbci	r31, 0xF8	; 248
    4d2a:	d9 01       	movw	r26, r18
    4d2c:	a8 59       	subi	r26, 0x98	; 152
    4d2e:	b5 4f       	sbci	r27, 0xF5	; 245
    4d30:	8c 91       	ld	r24, X
    4d32:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    4d34:	2f 5f       	subi	r18, 0xFF	; 255
    4d36:	3f 4f       	sbci	r19, 0xFF	; 255
    4d38:	24 31       	cpi	r18, 0x14	; 20
    4d3a:	31 05       	cpc	r19, r1
    4d3c:	99 f7       	brne	.-26     	; 0x4d24 <procMessage57+0xec>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    4d3e:	10 92 0f 08 	sts	0x080F, r1
		 //LicPlate
		 StrPosCopy(rcv_trans,strLicPlate,193-2,10);
		 RemSpaceLag(strLicPlate);
		 //CompName
		 StrPosCopy(rcv_trans,strCompName,203-2,20);
		 RemSpaceLag(strCompName);
    4d42:	8b ef       	ldi	r24, 0xFB	; 251
    4d44:	97 e0       	ldi	r25, 0x07	; 7
    4d46:	0e 94 d2 25 	call	0x4ba4	; 0x4ba4 <RemSpaceLag>
		 uart_print(0,1,strCompName);
		 
uart_print(0,1,strCardID);
*/	
     return Result;
}
    4d4a:	81 2f       	mov	r24, r17
    4d4c:	8f 52       	subi	r24, 0x2F	; 47
    4d4e:	1f 91       	pop	r17
    4d50:	08 95       	ret

00004d52 <clearString>:
	     break;
	}
  return Result;
}

void clearString(char *str){
    4d52:	20 e0       	ldi	r18, 0x00	; 0
    4d54:	30 e0       	ldi	r19, 0x00	; 0
    4d56:	06 c0       	rjmp	.+12     	; 0x4d64 <clearString+0x12>
     int i;
	 for(i=0;i<strlen(str);i++){
	    str[i]=0;
    4d58:	fc 01       	movw	r30, r24
    4d5a:	e2 0f       	add	r30, r18
    4d5c:	f3 1f       	adc	r31, r19
    4d5e:	10 82       	st	Z, r1
  return Result;
}

void clearString(char *str){
     int i;
	 for(i=0;i<strlen(str);i++){
    4d60:	2f 5f       	subi	r18, 0xFF	; 255
    4d62:	3f 4f       	sbci	r19, 0xFF	; 255
    4d64:	fc 01       	movw	r30, r24
    4d66:	01 90       	ld	r0, Z+
    4d68:	00 20       	and	r0, r0
    4d6a:	e9 f7       	brne	.-6      	; 0x4d66 <clearString+0x14>
    4d6c:	31 97       	sbiw	r30, 0x01	; 1
    4d6e:	e8 1b       	sub	r30, r24
    4d70:	f9 0b       	sbc	r31, r25
    4d72:	2e 17       	cp	r18, r30
    4d74:	3f 07       	cpc	r19, r31
    4d76:	80 f3       	brcs	.-32     	; 0x4d58 <clearString+0x6>
	    str[i]=0;
	 }
}
    4d78:	08 95       	ret

00004d7a <AddZeroLead>:
	 }String[Size]=0;
  }
}


void AddZeroLead(char *String,unsigned char Size){// 1234 ->0000001234
    4d7a:	bf 92       	push	r11
    4d7c:	cf 92       	push	r12
    4d7e:	df 92       	push	r13
    4d80:	ef 92       	push	r14
    4d82:	ff 92       	push	r15
    4d84:	0f 93       	push	r16
    4d86:	1f 93       	push	r17
    4d88:	df 93       	push	r29
    4d8a:	cf 93       	push	r28
    4d8c:	cd b7       	in	r28, 0x3d	; 61
    4d8e:	de b7       	in	r29, 0x3e	; 62
    4d90:	6e 97       	sbiw	r28, 0x1e	; 30
    4d92:	0f b6       	in	r0, 0x3f	; 63
    4d94:	f8 94       	cli
    4d96:	de bf       	out	0x3e, r29	; 62
    4d98:	0f be       	out	0x3f, r0	; 63
    4d9a:	cd bf       	out	0x3d, r28	; 61
    4d9c:	8c 01       	movw	r16, r24
     char i,Length,strAdded[30];
     Length=strlen(String);
    4d9e:	fc 01       	movw	r30, r24
    4da0:	01 90       	ld	r0, Z+
    4da2:	00 20       	and	r0, r0
    4da4:	e9 f7       	brne	.-6      	; 0x4da0 <AddZeroLead+0x26>
    4da6:	31 97       	sbiw	r30, 0x01	; 1
    4da8:	2e 2f       	mov	r18, r30
    4daa:	28 1b       	sub	r18, r24

	 if (Size>Length){
    4dac:	26 17       	cp	r18, r22
    4dae:	e0 f5       	brcc	.+120    	; 0x4e28 <AddZeroLead+0xae>
    4db0:	7e 01       	movw	r14, r28
    4db2:	08 94       	sec
    4db4:	e1 1c       	adc	r14, r1
    4db6:	f1 1c       	adc	r15, r1
    4db8:	f7 01       	movw	r30, r14
	 }String[Size]=0;
  }
}


void AddZeroLead(char *String,unsigned char Size){// 1234 ->0000001234
    4dba:	be 2c       	mov	r11, r14
     char i,Length,strAdded[30];
     Length=strlen(String);

	 if (Size>Length){
         for(i=0;i<Size;i++){
	         strAdded[i]='0';
    4dbc:	90 e3       	ldi	r25, 0x30	; 48
    4dbe:	01 c0       	rjmp	.+2      	; 0x4dc2 <AddZeroLead+0x48>
    4dc0:	91 93       	st	Z+, r25
void AddZeroLead(char *String,unsigned char Size){// 1234 ->0000001234
     char i,Length,strAdded[30];
     Length=strlen(String);

	 if (Size>Length){
         for(i=0;i<Size;i++){
    4dc2:	8e 2f       	mov	r24, r30
    4dc4:	8b 19       	sub	r24, r11
    4dc6:	86 17       	cp	r24, r22
    4dc8:	d8 f3       	brcs	.-10     	; 0x4dc0 <AddZeroLead+0x46>
	         strAdded[i]='0';
	     }strAdded[Size]=0;
    4dca:	46 2f       	mov	r20, r22
    4dcc:	50 e0       	ldi	r21, 0x00	; 0
    4dce:	ce 01       	movw	r24, r28
    4dd0:	01 96       	adiw	r24, 0x01	; 1
    4dd2:	fc 01       	movw	r30, r24
    4dd4:	e4 0f       	add	r30, r20
    4dd6:	f5 1f       	adc	r31, r21
    4dd8:	10 82       	st	Z, r1
	     //Copy
         for(i=(Size-Length);i<Size;i++){
    4dda:	76 2f       	mov	r23, r22
    4ddc:	72 1b       	sub	r23, r18
    4dde:	6c 01       	movw	r12, r24
	         strAdded[i]=String[i-(Size-Length)];
    4de0:	30 e0       	ldi	r19, 0x00	; 0
    4de2:	24 1b       	sub	r18, r20
    4de4:	35 0b       	sbc	r19, r21
    4de6:	0c c0       	rjmp	.+24     	; 0x4e00 <AddZeroLead+0x86>
    4de8:	e7 2f       	mov	r30, r23
    4dea:	f0 e0       	ldi	r31, 0x00	; 0
    4dec:	d6 01       	movw	r26, r12
    4dee:	ae 0f       	add	r26, r30
    4df0:	bf 1f       	adc	r27, r31
    4df2:	e0 0f       	add	r30, r16
    4df4:	f1 1f       	adc	r31, r17
    4df6:	e2 0f       	add	r30, r18
    4df8:	f3 1f       	adc	r31, r19
    4dfa:	80 81       	ld	r24, Z
    4dfc:	8c 93       	st	X, r24
	 if (Size>Length){
         for(i=0;i<Size;i++){
	         strAdded[i]='0';
	     }strAdded[Size]=0;
	     //Copy
         for(i=(Size-Length);i<Size;i++){
    4dfe:	7f 5f       	subi	r23, 0xFF	; 255
    4e00:	76 17       	cp	r23, r22
    4e02:	90 f3       	brcs	.-28     	; 0x4de8 <AddZeroLead+0x6e>
	         strAdded[i]=String[i-(Size-Length)];
	     }strAdded[Size]=0;
    4e04:	4c 0d       	add	r20, r12
    4e06:	5d 1d       	adc	r21, r13
    4e08:	da 01       	movw	r26, r20
    4e0a:	1c 92       	st	X, r1
    4e0c:	f8 01       	movw	r30, r16
    4e0e:	04 c0       	rjmp	.+8      	; 0x4e18 <AddZeroLead+0x9e>
	     //Zeroed
         for(i=0;i<Size;i++){
	         String[i]=strAdded[i];
    4e10:	d7 01       	movw	r26, r14
    4e12:	8d 91       	ld	r24, X+
    4e14:	7d 01       	movw	r14, r26
    4e16:	81 93       	st	Z+, r24
	     //Copy
         for(i=(Size-Length);i<Size;i++){
	         strAdded[i]=String[i-(Size-Length)];
	     }strAdded[Size]=0;
	     //Zeroed
         for(i=0;i<Size;i++){
    4e18:	8e 2d       	mov	r24, r14
    4e1a:	8b 19       	sub	r24, r11
    4e1c:	86 17       	cp	r24, r22
    4e1e:	c0 f3       	brcs	.-16     	; 0x4e10 <AddZeroLead+0x96>
	         String[i]=strAdded[i];
	     }String[Size]=0;
    4e20:	06 0f       	add	r16, r22
    4e22:	11 1d       	adc	r17, r1
    4e24:	f8 01       	movw	r30, r16
    4e26:	10 82       	st	Z, r1
	 }
}
    4e28:	6e 96       	adiw	r28, 0x1e	; 30
    4e2a:	0f b6       	in	r0, 0x3f	; 63
    4e2c:	f8 94       	cli
    4e2e:	de bf       	out	0x3e, r29	; 62
    4e30:	0f be       	out	0x3f, r0	; 63
    4e32:	cd bf       	out	0x3d, r28	; 61
    4e34:	cf 91       	pop	r28
    4e36:	df 91       	pop	r29
    4e38:	1f 91       	pop	r17
    4e3a:	0f 91       	pop	r16
    4e3c:	ff 90       	pop	r15
    4e3e:	ef 90       	pop	r14
    4e40:	df 90       	pop	r13
    4e42:	cf 90       	pop	r12
    4e44:	bf 90       	pop	r11
    4e46:	08 95       	ret

00004e48 <GetTotalizerMoney>:
	     FIPAddr=FIPAddr-1;	     
	     GetTotalizerData(TVOLUME,TOTALIZER_NOW,FIPAddr,iGrade,Result);
	 }
	 //NormalizeDecimal(eeprom_read_byte(&DefDecimalTotalVolume),2,Result);
}
void GetTotalizerMoney(char iPumpID,char iGrade, char *Result){
    4e48:	0f 93       	push	r16
    4e4a:	1f 93       	push	r17
    4e4c:	cf 93       	push	r28
    4e4e:	df 93       	push	r29
    4e50:	18 2f       	mov	r17, r24
    4e52:	06 2f       	mov	r16, r22
    4e54:	ea 01       	movw	r28, r20
     char FIPAddr;
     AddZeroLead(Result,13); 
    4e56:	ca 01       	movw	r24, r20
    4e58:	6d e0       	ldi	r22, 0x0D	; 13
    4e5a:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <AddZeroLead>
	 FIPAddr=GetFIPAddr(iPumpID);
    4e5e:	81 2f       	mov	r24, r17
    4e60:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <GetFIPAddr>
    4e64:	48 2f       	mov	r20, r24
	 if (FIPAddr>0){
    4e66:	88 23       	and	r24, r24
    4e68:	39 f0       	breq	.+14     	; 0x4e78 <GetTotalizerMoney+0x30>
	    FIPAddr=FIPAddr-1;
	    GetTotalizerData(TMONEY,TOTALIZER_NOW,FIPAddr,iGrade,Result);
    4e6a:	41 50       	subi	r20, 0x01	; 1
    4e6c:	81 e0       	ldi	r24, 0x01	; 1
    4e6e:	61 e0       	ldi	r22, 0x01	; 1
    4e70:	20 2f       	mov	r18, r16
    4e72:	8e 01       	movw	r16, r28
    4e74:	0e 94 af 20 	call	0x415e	; 0x415e <GetTotalizerData>
	}
	 //NormalizeDecimal(eeprom_read_byte(&DefDecimalTotalMoney),2,Result);
}
    4e78:	df 91       	pop	r29
    4e7a:	cf 91       	pop	r28
    4e7c:	1f 91       	pop	r17
    4e7e:	0f 91       	pop	r16
    4e80:	08 95       	ret

00004e82 <GetTotalizerVolume>:
     AddZeroLead(Result,10);
	 sprintf_P(Result,PSTR("%s"),RecPumpData[iPumpID&0x0F].Money);
	 //NormalizeDecimal(eeprom_read_byte(&DefDecimalMoney),3,Result);
}

void GetTotalizerVolume(char iPumpID,char iGrade,char *Result){
    4e82:	0f 93       	push	r16
    4e84:	1f 93       	push	r17
    4e86:	cf 93       	push	r28
    4e88:	df 93       	push	r29
    4e8a:	18 2f       	mov	r17, r24
    4e8c:	06 2f       	mov	r16, r22
    4e8e:	ea 01       	movw	r28, r20
     char FIPAddr;
     AddZeroLead(Result,11);
    4e90:	ca 01       	movw	r24, r20
    4e92:	6b e0       	ldi	r22, 0x0B	; 11
    4e94:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <AddZeroLead>
	 FIPAddr=GetFIPAddr(iPumpID);
    4e98:	81 2f       	mov	r24, r17
    4e9a:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <GetFIPAddr>
    4e9e:	48 2f       	mov	r20, r24
	 if (FIPAddr>0){
    4ea0:	88 23       	and	r24, r24
    4ea2:	39 f0       	breq	.+14     	; 0x4eb2 <GetTotalizerVolume+0x30>
	     FIPAddr=FIPAddr-1;	     
	     GetTotalizerData(TVOLUME,TOTALIZER_NOW,FIPAddr,iGrade,Result);
    4ea4:	41 50       	subi	r20, 0x01	; 1
    4ea6:	80 e0       	ldi	r24, 0x00	; 0
    4ea8:	61 e0       	ldi	r22, 0x01	; 1
    4eaa:	20 2f       	mov	r18, r16
    4eac:	8e 01       	movw	r16, r28
    4eae:	0e 94 af 20 	call	0x415e	; 0x415e <GetTotalizerData>
	 }
	 //NormalizeDecimal(eeprom_read_byte(&DefDecimalTotalVolume),2,Result);
}
    4eb2:	df 91       	pop	r29
    4eb4:	cf 91       	pop	r28
    4eb6:	1f 91       	pop	r17
    4eb8:	0f 91       	pop	r16
    4eba:	08 95       	ret

00004ebc <GetTransactionMoney>:
void GetTransactionVolume(char iPumpID,char *Result){
     AddZeroLead(Result,10);
     sprintf_P(Result,PSTR("%s"),RecPumpData[iPumpID&0x0F].Volume); 
	 //NormalizeDecimal(eeprom_read_byte(&DefDecimalVolume),3,Result);
}
void GetTransactionMoney(char iPumpID,char *Result){
    4ebc:	ef 92       	push	r14
    4ebe:	ff 92       	push	r15
    4ec0:	0f 93       	push	r16
    4ec2:	1f 93       	push	r17
    4ec4:	08 2f       	mov	r16, r24
    4ec6:	7b 01       	movw	r14, r22
     AddZeroLead(Result,10);
    4ec8:	cb 01       	movw	r24, r22
    4eca:	6a e0       	ldi	r22, 0x0A	; 10
    4ecc:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <AddZeroLead>
	 sprintf_P(Result,PSTR("%s"),RecPumpData[iPumpID&0x0F].Money);
    4ed0:	00 d0       	rcall	.+0      	; 0x4ed2 <GetTransactionMoney+0x16>
    4ed2:	00 d0       	rcall	.+0      	; 0x4ed4 <GetTransactionMoney+0x18>
    4ed4:	00 d0       	rcall	.+0      	; 0x4ed6 <GetTransactionMoney+0x1a>
    4ed6:	ed b7       	in	r30, 0x3d	; 61
    4ed8:	fe b7       	in	r31, 0x3e	; 62
    4eda:	31 96       	adiw	r30, 0x01	; 1
    4edc:	ad b7       	in	r26, 0x3d	; 61
    4ede:	be b7       	in	r27, 0x3e	; 62
    4ee0:	12 96       	adiw	r26, 0x02	; 2
    4ee2:	fc 92       	st	X, r15
    4ee4:	ee 92       	st	-X, r14
    4ee6:	11 97       	sbiw	r26, 0x01	; 1
    4ee8:	89 e4       	ldi	r24, 0x49	; 73
    4eea:	95 e0       	ldi	r25, 0x05	; 5
    4eec:	93 83       	std	Z+3, r25	; 0x03
    4eee:	82 83       	std	Z+2, r24	; 0x02
    4ef0:	10 e0       	ldi	r17, 0x00	; 0
    4ef2:	0f 70       	andi	r16, 0x0F	; 15
    4ef4:	10 70       	andi	r17, 0x00	; 0
    4ef6:	85 e3       	ldi	r24, 0x35	; 53
    4ef8:	90 e0       	ldi	r25, 0x00	; 0
    4efa:	9c 01       	movw	r18, r24
    4efc:	02 9f       	mul	r16, r18
    4efe:	c0 01       	movw	r24, r0
    4f00:	03 9f       	mul	r16, r19
    4f02:	90 0d       	add	r25, r0
    4f04:	12 9f       	mul	r17, r18
    4f06:	90 0d       	add	r25, r0
    4f08:	11 24       	eor	r1, r1
    4f0a:	8a 5a       	subi	r24, 0xAA	; 170
    4f0c:	99 4f       	sbci	r25, 0xF9	; 249
    4f0e:	95 83       	std	Z+5, r25	; 0x05
    4f10:	84 83       	std	Z+4, r24	; 0x04
    4f12:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
    4f16:	8d b7       	in	r24, 0x3d	; 61
    4f18:	9e b7       	in	r25, 0x3e	; 62
    4f1a:	06 96       	adiw	r24, 0x06	; 6
    4f1c:	0f b6       	in	r0, 0x3f	; 63
    4f1e:	f8 94       	cli
    4f20:	9e bf       	out	0x3e, r25	; 62
    4f22:	0f be       	out	0x3f, r0	; 63
    4f24:	8d bf       	out	0x3d, r24	; 61
	 //NormalizeDecimal(eeprom_read_byte(&DefDecimalMoney),3,Result);
}
    4f26:	1f 91       	pop	r17
    4f28:	0f 91       	pop	r16
    4f2a:	ff 90       	pop	r15
    4f2c:	ef 90       	pop	r14
    4f2e:	08 95       	ret

00004f30 <GetTransactionVolume>:
     }
*/
     FormatDecimal(Result,CurrentDecimal);
}

void GetTransactionVolume(char iPumpID,char *Result){
    4f30:	ef 92       	push	r14
    4f32:	ff 92       	push	r15
    4f34:	0f 93       	push	r16
    4f36:	1f 93       	push	r17
    4f38:	08 2f       	mov	r16, r24
    4f3a:	7b 01       	movw	r14, r22
     AddZeroLead(Result,10);
    4f3c:	cb 01       	movw	r24, r22
    4f3e:	6a e0       	ldi	r22, 0x0A	; 10
    4f40:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <AddZeroLead>
     sprintf_P(Result,PSTR("%s"),RecPumpData[iPumpID&0x0F].Volume); 
    4f44:	00 d0       	rcall	.+0      	; 0x4f46 <GetTransactionVolume+0x16>
    4f46:	00 d0       	rcall	.+0      	; 0x4f48 <GetTransactionVolume+0x18>
    4f48:	00 d0       	rcall	.+0      	; 0x4f4a <GetTransactionVolume+0x1a>
    4f4a:	ed b7       	in	r30, 0x3d	; 61
    4f4c:	fe b7       	in	r31, 0x3e	; 62
    4f4e:	31 96       	adiw	r30, 0x01	; 1
    4f50:	ad b7       	in	r26, 0x3d	; 61
    4f52:	be b7       	in	r27, 0x3e	; 62
    4f54:	12 96       	adiw	r26, 0x02	; 2
    4f56:	fc 92       	st	X, r15
    4f58:	ee 92       	st	-X, r14
    4f5a:	11 97       	sbiw	r26, 0x01	; 1
    4f5c:	8c e4       	ldi	r24, 0x4C	; 76
    4f5e:	95 e0       	ldi	r25, 0x05	; 5
    4f60:	93 83       	std	Z+3, r25	; 0x03
    4f62:	82 83       	std	Z+2, r24	; 0x02
    4f64:	10 e0       	ldi	r17, 0x00	; 0
    4f66:	0f 70       	andi	r16, 0x0F	; 15
    4f68:	10 70       	andi	r17, 0x00	; 0
    4f6a:	85 e3       	ldi	r24, 0x35	; 53
    4f6c:	90 e0       	ldi	r25, 0x00	; 0
    4f6e:	9c 01       	movw	r18, r24
    4f70:	02 9f       	mul	r16, r18
    4f72:	c0 01       	movw	r24, r0
    4f74:	03 9f       	mul	r16, r19
    4f76:	90 0d       	add	r25, r0
    4f78:	12 9f       	mul	r17, r18
    4f7a:	90 0d       	add	r25, r0
    4f7c:	11 24       	eor	r1, r1
    4f7e:	83 5b       	subi	r24, 0xB3	; 179
    4f80:	99 4f       	sbci	r25, 0xF9	; 249
    4f82:	95 83       	std	Z+5, r25	; 0x05
    4f84:	84 83       	std	Z+4, r24	; 0x04
    4f86:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
    4f8a:	8d b7       	in	r24, 0x3d	; 61
    4f8c:	9e b7       	in	r25, 0x3e	; 62
    4f8e:	06 96       	adiw	r24, 0x06	; 6
    4f90:	0f b6       	in	r0, 0x3f	; 63
    4f92:	f8 94       	cli
    4f94:	9e bf       	out	0x3e, r25	; 62
    4f96:	0f be       	out	0x3f, r0	; 63
    4f98:	8d bf       	out	0x3d, r24	; 61
	 //NormalizeDecimal(eeprom_read_byte(&DefDecimalVolume),3,Result);
}
    4f9a:	1f 91       	pop	r17
    4f9c:	0f 91       	pop	r16
    4f9e:	ff 90       	pop	r15
    4fa0:	ef 90       	pop	r14
    4fa2:	08 95       	ret

00004fa4 <SetTotalizerData>:
			  }
		  }
	 }
}

void SetTotalizerData(char TType, char TAddr, char xPumpAddr, char xGradeAddr, char *strValue){// 0 1 1 "00000000"
    4fa4:	af 92       	push	r10
    4fa6:	bf 92       	push	r11
    4fa8:	cf 92       	push	r12
    4faa:	df 92       	push	r13
    4fac:	ef 92       	push	r14
    4fae:	ff 92       	push	r15
    4fb0:	0f 93       	push	r16
    4fb2:	1f 93       	push	r17
    4fb4:	df 93       	push	r29
    4fb6:	cf 93       	push	r28
    4fb8:	cd b7       	in	r28, 0x3d	; 61
    4fba:	de b7       	in	r29, 0x3e	; 62
    4fbc:	65 97       	sbiw	r28, 0x15	; 21
    4fbe:	0f b6       	in	r0, 0x3f	; 63
    4fc0:	f8 94       	cli
    4fc2:	de bf       	out	0x3e, r29	; 62
    4fc4:	0f be       	out	0x3f, r0	; 63
    4fc6:	cd bf       	out	0x3d, r28	; 61
    4fc8:	d8 2e       	mov	r13, r24
    4fca:	c6 2e       	mov	r12, r22
    4fcc:	b4 2e       	mov	r11, r20
    4fce:	a2 2e       	mov	r10, r18
     char rawValue[6],iPumpAddr,iGrade;
	 char strPValue[15];
	 char Idx;
	 char strSend[30];
	 //Convert String to RawData
	 if (strlen(strValue)<=12){
    4fd0:	d8 01       	movw	r26, r16
    4fd2:	0d 90       	ld	r0, X+
    4fd4:	00 20       	and	r0, r0
    4fd6:	e9 f7       	brne	.-6      	; 0x4fd2 <SetTotalizerData+0x2e>
    4fd8:	11 97       	sbiw	r26, 0x01	; 1
    4fda:	a0 1b       	sub	r26, r16
    4fdc:	b1 0b       	sbc	r27, r17
    4fde:	77 e0       	ldi	r23, 0x07	; 7
    4fe0:	e7 2e       	mov	r14, r23
    4fe2:	f1 2c       	mov	r15, r1
    4fe4:	ec 0e       	add	r14, r28
    4fe6:	fd 1e       	adc	r15, r29
    4fe8:	ad 30       	cpi	r26, 0x0D	; 13
    4fea:	b1 05       	cpc	r27, r1
    4fec:	58 f5       	brcc	.+86     	; 0x5044 <SetTotalizerData+0xa0>
	     sprintf_P(strPValue,PSTR("%s"),strValue);
    4fee:	00 d0       	rcall	.+0      	; 0x4ff0 <SetTotalizerData+0x4c>
    4ff0:	00 d0       	rcall	.+0      	; 0x4ff2 <SetTotalizerData+0x4e>
    4ff2:	00 d0       	rcall	.+0      	; 0x4ff4 <SetTotalizerData+0x50>
    4ff4:	ed b7       	in	r30, 0x3d	; 61
    4ff6:	fe b7       	in	r31, 0x3e	; 62
    4ff8:	31 96       	adiw	r30, 0x01	; 1
    4ffa:	ad b7       	in	r26, 0x3d	; 61
    4ffc:	be b7       	in	r27, 0x3e	; 62
    4ffe:	12 96       	adiw	r26, 0x02	; 2
    5000:	fc 92       	st	X, r15
    5002:	ee 92       	st	-X, r14
    5004:	11 97       	sbiw	r26, 0x01	; 1
    5006:	8e e1       	ldi	r24, 0x1E	; 30
    5008:	97 e0       	ldi	r25, 0x07	; 7
    500a:	93 83       	std	Z+3, r25	; 0x03
    500c:	82 83       	std	Z+2, r24	; 0x02
    500e:	15 83       	std	Z+5, r17	; 0x05
    5010:	04 83       	std	Z+4, r16	; 0x04
    5012:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
		 if (strlen(strPValue)<12)AddZeroLead(strPValue,12);
    5016:	f7 01       	movw	r30, r14
    5018:	01 90       	ld	r0, Z+
    501a:	00 20       	and	r0, r0
    501c:	e9 f7       	brne	.-6      	; 0x5018 <SetTotalizerData+0x74>
    501e:	31 97       	sbiw	r30, 0x01	; 1
    5020:	ee 19       	sub	r30, r14
    5022:	ff 09       	sbc	r31, r15
    5024:	4d b7       	in	r20, 0x3d	; 61
    5026:	5e b7       	in	r21, 0x3e	; 62
    5028:	4a 5f       	subi	r20, 0xFA	; 250
    502a:	5f 4f       	sbci	r21, 0xFF	; 255
    502c:	0f b6       	in	r0, 0x3f	; 63
    502e:	f8 94       	cli
    5030:	5e bf       	out	0x3e, r21	; 62
    5032:	0f be       	out	0x3f, r0	; 63
    5034:	4d bf       	out	0x3d, r20	; 61
    5036:	3c 97       	sbiw	r30, 0x0c	; 12
    5038:	a0 f4       	brcc	.+40     	; 0x5062 <SetTotalizerData+0xbe>
    503a:	c7 01       	movw	r24, r14
    503c:	6c e0       	ldi	r22, 0x0C	; 12
    503e:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <AddZeroLead>
    5042:	0f c0       	rjmp	.+30     	; 0x5062 <SetTotalizerData+0xbe>
    5044:	8a 2f       	mov	r24, r26
    5046:	8c 50       	subi	r24, 0x0C	; 12
    5048:	f8 01       	movw	r30, r16
    504a:	e8 0f       	add	r30, r24
    504c:	f1 1d       	adc	r31, r1
    504e:	d7 01       	movw	r26, r14
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    5050:	9e 01       	movw	r18, r28
    5052:	2d 5e       	subi	r18, 0xED	; 237
    5054:	3f 4f       	sbci	r19, 0xFF	; 255
	    Dest[i]=Source[IdxSource+i];
    5056:	81 91       	ld	r24, Z+
    5058:	8d 93       	st	X+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    505a:	a2 17       	cp	r26, r18
    505c:	b3 07       	cpc	r27, r19
    505e:	d9 f7       	brne	.-10     	; 0x5056 <SetTotalizerData+0xb2>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    5060:	1b 8a       	std	Y+19, r1	; 0x13
	 else {//Lebih dari 8: 0123456789
	     Idx=strlen(strValue)-12;
	     StrPosCopy(strValue,strPValue,Idx,12);
	 }

	 iPumpAddr=(xPumpAddr&0x0F);
    5062:	0b 2d       	mov	r16, r11
    5064:	0f 70       	andi	r16, 0x0F	; 15
	 if ((xGradeAddr>=1)&&(xGradeAddr<=6))
    5066:	1a 2d       	mov	r17, r10
    5068:	11 50       	subi	r17, 0x01	; 1
    506a:	16 30       	cpi	r17, 0x06	; 6
    506c:	08 f0       	brcs	.+2      	; 0x5070 <SetTotalizerData+0xcc>
    506e:	10 e0       	ldi	r17, 0x00	; 0
	     iGrade=xGradeAddr-1;
	 StrToRaw(strPValue,rawValue);
    5070:	ce 01       	movw	r24, r28
    5072:	07 96       	adiw	r24, 0x07	; 7
    5074:	7e 01       	movw	r14, r28
    5076:	08 94       	sec
    5078:	e1 1c       	adc	r14, r1
    507a:	f1 1c       	adc	r15, r1
    507c:	b7 01       	movw	r22, r14
    507e:	0e 94 d6 19 	call	0x33ac	; 0x33ac <StrToRaw>

	 if (TType==TVOLUME)eeprom_write_block((const void*)&rawValue,(void*)&(TotalVolume[TAddr][iPumpAddr][iGrade]), sizeof(rawValue));
    5082:	dd 20       	and	r13, r13
    5084:	d9 f4       	brne	.+54     	; 0x50bc <SetTotalizerData+0x118>
    5086:	64 e2       	ldi	r22, 0x24	; 36
    5088:	06 9f       	mul	r16, r22
    508a:	b0 01       	movw	r22, r0
    508c:	11 24       	eor	r1, r1
    508e:	2c 2d       	mov	r18, r12
    5090:	30 e0       	ldi	r19, 0x00	; 0
    5092:	80 e2       	ldi	r24, 0x20	; 32
    5094:	91 e0       	ldi	r25, 0x01	; 1
    5096:	dc 01       	movw	r26, r24
    5098:	2a 9f       	mul	r18, r26
    509a:	c0 01       	movw	r24, r0
    509c:	2b 9f       	mul	r18, r27
    509e:	90 0d       	add	r25, r0
    50a0:	3a 9f       	mul	r19, r26
    50a2:	90 0d       	add	r25, r0
    50a4:	11 24       	eor	r1, r1
    50a6:	68 0f       	add	r22, r24
    50a8:	79 1f       	adc	r23, r25
    50aa:	86 e0       	ldi	r24, 0x06	; 6
    50ac:	18 9f       	mul	r17, r24
    50ae:	c0 01       	movw	r24, r0
    50b0:	11 24       	eor	r1, r1
    50b2:	68 0f       	add	r22, r24
    50b4:	79 1f       	adc	r23, r25
    50b6:	6c 53       	subi	r22, 0x3C	; 60
    50b8:	7c 4f       	sbci	r23, 0xFC	; 252
    50ba:	1d c0       	rjmp	.+58     	; 0x50f6 <SetTotalizerData+0x152>
	 else 
	 if (TType==TMONEY)eeprom_write_block((const void*)&rawValue,(void*)&(TotalMoney[TAddr][iPumpAddr][iGrade]), sizeof(rawValue));
    50bc:	b1 e0       	ldi	r27, 0x01	; 1
    50be:	db 16       	cp	r13, r27
    50c0:	f9 f4       	brne	.+62     	; 0x5100 <SetTotalizerData+0x15c>
    50c2:	64 e2       	ldi	r22, 0x24	; 36
    50c4:	06 9f       	mul	r16, r22
    50c6:	b0 01       	movw	r22, r0
    50c8:	11 24       	eor	r1, r1
    50ca:	2c 2d       	mov	r18, r12
    50cc:	30 e0       	ldi	r19, 0x00	; 0
    50ce:	80 e2       	ldi	r24, 0x20	; 32
    50d0:	91 e0       	ldi	r25, 0x01	; 1
    50d2:	ac 01       	movw	r20, r24
    50d4:	24 9f       	mul	r18, r20
    50d6:	c0 01       	movw	r24, r0
    50d8:	25 9f       	mul	r18, r21
    50da:	90 0d       	add	r25, r0
    50dc:	34 9f       	mul	r19, r20
    50de:	90 0d       	add	r25, r0
    50e0:	11 24       	eor	r1, r1
    50e2:	68 0f       	add	r22, r24
    50e4:	79 1f       	adc	r23, r25
    50e6:	86 e0       	ldi	r24, 0x06	; 6
    50e8:	18 9f       	mul	r17, r24
    50ea:	c0 01       	movw	r24, r0
    50ec:	11 24       	eor	r1, r1
    50ee:	68 0f       	add	r22, r24
    50f0:	79 1f       	adc	r23, r25
    50f2:	6c 5f       	subi	r22, 0xFC	; 252
    50f4:	79 4f       	sbci	r23, 0xF9	; 249
    50f6:	c7 01       	movw	r24, r14
    50f8:	46 e0       	ldi	r20, 0x06	; 6
    50fa:	50 e0       	ldi	r21, 0x00	; 0
    50fc:	0e 94 33 ad 	call	0x15a66	; 0x15a66 <__eewr_block_m128>
}
    5100:	65 96       	adiw	r28, 0x15	; 21
    5102:	0f b6       	in	r0, 0x3f	; 63
    5104:	f8 94       	cli
    5106:	de bf       	out	0x3e, r29	; 62
    5108:	0f be       	out	0x3f, r0	; 63
    510a:	cd bf       	out	0x3d, r28	; 61
    510c:	cf 91       	pop	r28
    510e:	df 91       	pop	r29
    5110:	1f 91       	pop	r17
    5112:	0f 91       	pop	r16
    5114:	ff 90       	pop	r15
    5116:	ef 90       	pop	r14
    5118:	df 90       	pop	r13
    511a:	cf 90       	pop	r12
    511c:	bf 90       	pop	r11
    511e:	af 90       	pop	r10
    5120:	08 95       	ret

00005122 <SaveTotalizerCurrentToLast>:
	 }Dest[12]=0;
}

//SetTotalizerData(TVOLUME,TOTALIZER_NOW,1,1,strVolume)

void SaveTotalizerCurrentToLast(){
    5122:	4f 92       	push	r4
    5124:	5f 92       	push	r5
    5126:	7f 92       	push	r7
    5128:	8f 92       	push	r8
    512a:	9f 92       	push	r9
    512c:	af 92       	push	r10
    512e:	bf 92       	push	r11
    5130:	cf 92       	push	r12
    5132:	df 92       	push	r13
    5134:	ef 92       	push	r14
    5136:	ff 92       	push	r15
    5138:	0f 93       	push	r16
    513a:	1f 93       	push	r17
    513c:	df 93       	push	r29
    513e:	cf 93       	push	r28
    5140:	cd b7       	in	r28, 0x3d	; 61
    5142:	de b7       	in	r29, 0x3e	; 62
    5144:	2f 97       	sbiw	r28, 0x0f	; 15
    5146:	0f b6       	in	r0, 0x3f	; 63
    5148:	f8 94       	cli
    514a:	de bf       	out	0x3e, r29	; 62
    514c:	0f be       	out	0x3f, r0	; 63
    514e:	cd bf       	out	0x3d, r28	; 61
    5150:	77 24       	eor	r7, r7
    5152:	73 94       	inc	r7
	 
	 for (iPump=1;iPump<=16;iPump++){//Pump
	      FIPAddr=GetFIPAddr(iPump);
		  if (FIPAddr>0){
		      FIPAddr=FIPAddr-1;
			  for(iGrade=1;iGrade<=6;iGrade++){
    5154:	4e 01       	movw	r8, r28
    5156:	08 94       	sec
    5158:	81 1c       	adc	r8, r1
    515a:	91 1c       	adc	r9, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    515c:	e0 e1       	ldi	r30, 0x10	; 16
    515e:	4e 2e       	mov	r4, r30
    5160:	51 2c       	mov	r5, r1
    5162:	4c 0e       	add	r4, r28
    5164:	5d 1e       	adc	r5, r29
     char iPump,iGrade;
     char strValue[15];
     char FIPAddr;
	 
	 for (iPump=1;iPump<=16;iPump++){//Pump
	      FIPAddr=GetFIPAddr(iPump);
    5166:	87 2d       	mov	r24, r7
    5168:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <GetFIPAddr>
		  if (FIPAddr>0){
    516c:	88 23       	and	r24, r24
    516e:	91 f1       	breq	.+100    	; 0x51d4 <SaveTotalizerCurrentToLast+0xb2>
		      FIPAddr=FIPAddr-1;
    5170:	a8 2e       	mov	r10, r24
    5172:	aa 94       	dec	r10
    5174:	bb 24       	eor	r11, r11
    5176:	b3 94       	inc	r11
    5178:	2a c0       	rjmp	.+84     	; 0x51ce <SaveTotalizerCurrentToLast+0xac>
}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
	     strMemory[i]=data;
    517a:	f7 01       	movw	r30, r14
    517c:	11 92       	st	Z+, r1
    517e:	7f 01       	movw	r14, r30

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    5180:	e4 15       	cp	r30, r4
    5182:	f5 05       	cpc	r31, r5
    5184:	d1 f7       	brne	.-12     	; 0x517a <SaveTotalizerCurrentToLast+0x58>
	      FIPAddr=GetFIPAddr(iPump);
		  if (FIPAddr>0){
		      FIPAddr=FIPAddr-1;
			  for(iGrade=1;iGrade<=6;iGrade++){
				  FillChar(strValue,sizeof(strValue),0);
				  GetTotalizerData(TVOLUME,TOTALIZER_NOW,FIPAddr,iGrade,strValue);
    5186:	80 e0       	ldi	r24, 0x00	; 0
    5188:	61 e0       	ldi	r22, 0x01	; 1
    518a:	4a 2d       	mov	r20, r10
    518c:	2b 2d       	mov	r18, r11
    518e:	84 01       	movw	r16, r8
    5190:	0e 94 af 20 	call	0x415e	; 0x415e <GetTotalizerData>
				  SetTotalizerData(TVOLUME,TOTALIZER_LAST,FIPAddr,iGrade,strValue);
    5194:	80 e0       	ldi	r24, 0x00	; 0
    5196:	60 e0       	ldi	r22, 0x00	; 0
    5198:	4a 2d       	mov	r20, r10
    519a:	2b 2d       	mov	r18, r11
    519c:	0e 94 d2 27 	call	0x4fa4	; 0x4fa4 <SetTotalizerData>
}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
	     strMemory[i]=data;
    51a0:	f6 01       	movw	r30, r12
    51a2:	11 92       	st	Z+, r1
    51a4:	6f 01       	movw	r12, r30

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    51a6:	ee 15       	cp	r30, r14
    51a8:	ff 05       	cpc	r31, r15
    51aa:	d1 f7       	brne	.-12     	; 0x51a0 <SaveTotalizerCurrentToLast+0x7e>
			  for(iGrade=1;iGrade<=6;iGrade++){
				  FillChar(strValue,sizeof(strValue),0);
				  GetTotalizerData(TVOLUME,TOTALIZER_NOW,FIPAddr,iGrade,strValue);
				  SetTotalizerData(TVOLUME,TOTALIZER_LAST,FIPAddr,iGrade,strValue);
				  FillChar(strValue,sizeof(strValue),0);
				  GetTotalizerData(TMONEY,TOTALIZER_NOW,FIPAddr,iGrade,strValue);
    51ac:	81 e0       	ldi	r24, 0x01	; 1
    51ae:	61 e0       	ldi	r22, 0x01	; 1
    51b0:	4a 2d       	mov	r20, r10
    51b2:	2b 2d       	mov	r18, r11
    51b4:	84 01       	movw	r16, r8
    51b6:	0e 94 af 20 	call	0x415e	; 0x415e <GetTotalizerData>
				  SetTotalizerData(TMONEY,TOTALIZER_LAST,FIPAddr,iGrade,strValue);
    51ba:	81 e0       	ldi	r24, 0x01	; 1
    51bc:	60 e0       	ldi	r22, 0x00	; 0
    51be:	4a 2d       	mov	r20, r10
    51c0:	2b 2d       	mov	r18, r11
    51c2:	0e 94 d2 27 	call	0x4fa4	; 0x4fa4 <SetTotalizerData>
	 
	 for (iPump=1;iPump<=16;iPump++){//Pump
	      FIPAddr=GetFIPAddr(iPump);
		  if (FIPAddr>0){
		      FIPAddr=FIPAddr-1;
			  for(iGrade=1;iGrade<=6;iGrade++){
    51c6:	b3 94       	inc	r11
    51c8:	f7 e0       	ldi	r31, 0x07	; 7
    51ca:	bf 16       	cp	r11, r31
    51cc:	19 f0       	breq	.+6      	; 0x51d4 <SaveTotalizerCurrentToLast+0xb2>
    51ce:	64 01       	movw	r12, r8
    51d0:	74 01       	movw	r14, r8
    51d2:	d3 cf       	rjmp	.-90     	; 0x517a <SaveTotalizerCurrentToLast+0x58>
void SaveTotalizerCurrentToLast(){
     char iPump,iGrade;
     char strValue[15];
     char FIPAddr;
	 
	 for (iPump=1;iPump<=16;iPump++){//Pump
    51d4:	73 94       	inc	r7
    51d6:	81 e1       	ldi	r24, 0x11	; 17
    51d8:	78 16       	cp	r7, r24
    51da:	29 f6       	brne	.-118    	; 0x5166 <SaveTotalizerCurrentToLast+0x44>
				  GetTotalizerData(TMONEY,TOTALIZER_NOW,FIPAddr,iGrade,strValue);
				  SetTotalizerData(TMONEY,TOTALIZER_LAST,FIPAddr,iGrade,strValue);
			  }
		  }
	 }
}
    51dc:	2f 96       	adiw	r28, 0x0f	; 15
    51de:	0f b6       	in	r0, 0x3f	; 63
    51e0:	f8 94       	cli
    51e2:	de bf       	out	0x3e, r29	; 62
    51e4:	0f be       	out	0x3f, r0	; 63
    51e6:	cd bf       	out	0x3d, r28	; 61
    51e8:	cf 91       	pop	r28
    51ea:	df 91       	pop	r29
    51ec:	1f 91       	pop	r17
    51ee:	0f 91       	pop	r16
    51f0:	ff 90       	pop	r15
    51f2:	ef 90       	pop	r14
    51f4:	df 90       	pop	r13
    51f6:	cf 90       	pop	r12
    51f8:	bf 90       	pop	r11
    51fa:	af 90       	pop	r10
    51fc:	9f 90       	pop	r9
    51fe:	8f 90       	pop	r8
    5200:	7f 90       	pop	r7
    5202:	5f 90       	pop	r5
    5204:	4f 90       	pop	r4
    5206:	08 95       	ret

00005208 <ResetTotalizer>:
}

//-------------------Totalizer-----------------------------------------
//TAddr{TOTALIZER_LAST,TOTALIZER_NOW}
//TType:{TNONE,TVOLUME,TMONEY};
void ResetTotalizer(char TAddr){//Clear All TotalizerData;
    5208:	af 92       	push	r10
    520a:	bf 92       	push	r11
    520c:	cf 92       	push	r12
    520e:	df 92       	push	r13
    5210:	ef 92       	push	r14
    5212:	ff 92       	push	r15
    5214:	0f 93       	push	r16
    5216:	1f 93       	push	r17
    5218:	df 93       	push	r29
    521a:	cf 93       	push	r28
    521c:	cd b7       	in	r28, 0x3d	; 61
    521e:	de b7       	in	r29, 0x3e	; 62
    5220:	29 97       	sbiw	r28, 0x09	; 9
    5222:	0f b6       	in	r0, 0x3f	; 63
    5224:	f8 94       	cli
    5226:	de bf       	out	0x3e, r29	; 62
    5228:	0f be       	out	0x3f, r0	; 63
    522a:	cd bf       	out	0x3d, r28	; 61
    522c:	a8 2e       	mov	r10, r24
     char iPump,iGrade;
     char strValue[9];
	 char FIPAddr;
	 
	 sprintf_P(strValue,PSTR("00000000"));
    522e:	00 d0       	rcall	.+0      	; 0x5230 <ResetTotalizer+0x28>
    5230:	00 d0       	rcall	.+0      	; 0x5232 <ResetTotalizer+0x2a>
    5232:	6e 01       	movw	r12, r28
    5234:	08 94       	sec
    5236:	c1 1c       	adc	r12, r1
    5238:	d1 1c       	adc	r13, r1
    523a:	ed b7       	in	r30, 0x3d	; 61
    523c:	fe b7       	in	r31, 0x3e	; 62
    523e:	d2 82       	std	Z+2, r13	; 0x02
    5240:	c1 82       	std	Z+1, r12	; 0x01
    5242:	81 e2       	ldi	r24, 0x21	; 33
    5244:	97 e0       	ldi	r25, 0x07	; 7
    5246:	94 83       	std	Z+4, r25	; 0x04
    5248:	83 83       	std	Z+3, r24	; 0x03
    524a:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
    524e:	ee 24       	eor	r14, r14
    5250:	e3 94       	inc	r14
    5252:	0f 90       	pop	r0
    5254:	0f 90       	pop	r0
    5256:	0f 90       	pop	r0
    5258:	0f 90       	pop	r0
	 for (iPump=1;iPump<=16;iPump++){//Pump
	      FIPAddr=GetFIPAddr(iPump);
    525a:	8e 2d       	mov	r24, r14
    525c:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <GetFIPAddr>
		  if (FIPAddr>0){
    5260:	88 23       	and	r24, r24
    5262:	a9 f0       	breq	.+42     	; 0x528e <ResetTotalizer+0x86>
		      FIPAddr=FIPAddr-1;
    5264:	b8 2e       	mov	r11, r24
    5266:	ba 94       	dec	r11
    5268:	ff 24       	eor	r15, r15
    526a:	f3 94       	inc	r15
			  for(iGrade=1;iGrade<=6;iGrade++){
				  SetTotalizerData(TVOLUME,TAddr,FIPAddr,iGrade,strValue);
    526c:	80 e0       	ldi	r24, 0x00	; 0
    526e:	6a 2d       	mov	r22, r10
    5270:	4b 2d       	mov	r20, r11
    5272:	2f 2d       	mov	r18, r15
    5274:	86 01       	movw	r16, r12
    5276:	0e 94 d2 27 	call	0x4fa4	; 0x4fa4 <SetTotalizerData>
				  SetTotalizerData(TMONEY,TAddr,FIPAddr,iGrade,strValue);
    527a:	81 e0       	ldi	r24, 0x01	; 1
    527c:	6a 2d       	mov	r22, r10
    527e:	4b 2d       	mov	r20, r11
    5280:	2f 2d       	mov	r18, r15
    5282:	0e 94 d2 27 	call	0x4fa4	; 0x4fa4 <SetTotalizerData>
	 sprintf_P(strValue,PSTR("00000000"));
	 for (iPump=1;iPump<=16;iPump++){//Pump
	      FIPAddr=GetFIPAddr(iPump);
		  if (FIPAddr>0){
		      FIPAddr=FIPAddr-1;
			  for(iGrade=1;iGrade<=6;iGrade++){
    5286:	f3 94       	inc	r15
    5288:	f7 e0       	ldi	r31, 0x07	; 7
    528a:	ff 16       	cp	r15, r31
    528c:	79 f7       	brne	.-34     	; 0x526c <ResetTotalizer+0x64>
     char iPump,iGrade;
     char strValue[9];
	 char FIPAddr;
	 
	 sprintf_P(strValue,PSTR("00000000"));
	 for (iPump=1;iPump<=16;iPump++){//Pump
    528e:	e3 94       	inc	r14
    5290:	81 e1       	ldi	r24, 0x11	; 17
    5292:	e8 16       	cp	r14, r24
    5294:	11 f7       	brne	.-60     	; 0x525a <ResetTotalizer+0x52>
				  SetTotalizerData(TVOLUME,TAddr,FIPAddr,iGrade,strValue);
				  SetTotalizerData(TMONEY,TAddr,FIPAddr,iGrade,strValue);
			  }
		  }
	 }
}
    5296:	29 96       	adiw	r28, 0x09	; 9
    5298:	0f b6       	in	r0, 0x3f	; 63
    529a:	f8 94       	cli
    529c:	de bf       	out	0x3e, r29	; 62
    529e:	0f be       	out	0x3f, r0	; 63
    52a0:	cd bf       	out	0x3d, r28	; 61
    52a2:	cf 91       	pop	r28
    52a4:	df 91       	pop	r29
    52a6:	1f 91       	pop	r17
    52a8:	0f 91       	pop	r16
    52aa:	ff 90       	pop	r15
    52ac:	ef 90       	pop	r14
    52ae:	df 90       	pop	r13
    52b0:	cf 90       	pop	r12
    52b2:	bf 90       	pop	r11
    52b4:	af 90       	pop	r10
    52b6:	08 95       	ret

000052b8 <AddZeroLag>:
	         String[i]=strAdded[i];
	     }String[Size]=0;
	 }
}

void AddZeroLag(char *String,unsigned char Size){// [123]->12300
    52b8:	cf 93       	push	r28
    52ba:	df 93       	push	r29
    52bc:	ec 01       	movw	r28, r24
char i,Length;
     Length=strlen(String);
    52be:	dc 01       	movw	r26, r24
    52c0:	0d 90       	ld	r0, X+
    52c2:	00 20       	and	r0, r0
    52c4:	e9 f7       	brne	.-6      	; 0x52c0 <AddZeroLag+0x8>
    52c6:	11 97       	sbiw	r26, 0x01	; 1
    52c8:	a8 1b       	sub	r26, r24
    52ca:	b9 0b       	sbc	r27, r25
  if (Length<Size){   
    52cc:	a6 17       	cp	r26, r22
    52ce:	60 f4       	brcc	.+24     	; 0x52e8 <AddZeroLag+0x30>
    52d0:	8a 2f       	mov	r24, r26
     for(i=Length;i<Size;i++){
	    String[i]='0';
    52d2:	90 e3       	ldi	r25, 0x30	; 48
    52d4:	fe 01       	movw	r30, r28
    52d6:	e8 0f       	add	r30, r24
    52d8:	f1 1d       	adc	r31, r1
    52da:	90 83       	st	Z, r25

void AddZeroLag(char *String,unsigned char Size){// [123]->12300
char i,Length;
     Length=strlen(String);
  if (Length<Size){   
     for(i=Length;i<Size;i++){
    52dc:	8f 5f       	subi	r24, 0xFF	; 255
    52de:	86 17       	cp	r24, r22
    52e0:	c8 f3       	brcs	.-14     	; 0x52d4 <AddZeroLag+0x1c>
	    String[i]='0';
	 }String[Size]=0;
    52e2:	c6 0f       	add	r28, r22
    52e4:	d1 1d       	adc	r29, r1
    52e6:	18 82       	st	Y, r1
  }
}
    52e8:	df 91       	pop	r29
    52ea:	cf 91       	pop	r28
    52ec:	08 95       	ret

000052ee <StrCalc>:
     
	 //if (NinePos<Length-4)
	 StrCalc(TPLUS,strMaxValue,strOverflowed,strOverflowed);
}
                                                                   //     1111111 
void StrCalc(char TOperation, char *strA , char *strB, char *strC){//  A: 00000000
    52ee:	3f 92       	push	r3
    52f0:	4f 92       	push	r4
    52f2:	5f 92       	push	r5
    52f4:	6f 92       	push	r6
    52f6:	7f 92       	push	r7
    52f8:	8f 92       	push	r8
    52fa:	9f 92       	push	r9
    52fc:	af 92       	push	r10
    52fe:	bf 92       	push	r11
    5300:	cf 92       	push	r12
    5302:	df 92       	push	r13
    5304:	ef 92       	push	r14
    5306:	ff 92       	push	r15
    5308:	0f 93       	push	r16
    530a:	1f 93       	push	r17
    530c:	df 93       	push	r29
    530e:	cf 93       	push	r28
    5310:	cd b7       	in	r28, 0x3d	; 61
    5312:	de b7       	in	r29, 0x3e	; 62
    5314:	c8 55       	subi	r28, 0x58	; 88
    5316:	d0 40       	sbci	r29, 0x00	; 0
    5318:	0f b6       	in	r0, 0x3f	; 63
    531a:	f8 94       	cli
    531c:	de bf       	out	0x3e, r29	; 62
    531e:	0f be       	out	0x3f, r0	; 63
    5320:	cd bf       	out	0x3d, r28	; 61
    5322:	68 2e       	mov	r6, r24
    5324:	67 96       	adiw	r28, 0x17	; 23
    5326:	7f af       	std	Y+63, r23	; 0x3f
    5328:	6e af       	std	Y+62, r22	; 0x3e
    532a:	67 97       	sbiw	r28, 0x17	; 23
    532c:	69 96       	adiw	r28, 0x19	; 25
    532e:	5f af       	std	Y+63, r21	; 0x3f
    5330:	4e af       	std	Y+62, r20	; 0x3e
    5332:	69 97       	sbiw	r28, 0x19	; 25
    5334:	59 01       	movw	r10, r18
    5336:	fe 01       	movw	r30, r28
    5338:	31 96       	adiw	r30, 0x01	; 1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    533a:	ce 01       	movw	r24, r28
    533c:	45 96       	adiw	r24, 0x15	; 21
	     strMemory[i]=data;
    533e:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    5340:	e8 17       	cp	r30, r24
    5342:	f9 07       	cpc	r31, r25
    5344:	e1 f7       	brne	.-8      	; 0x533e <StrCalc+0x50>
	     strMemory[i]=data;
    5346:	ce 01       	movw	r24, r28
    5348:	89 96       	adiw	r24, 0x29	; 41
    534a:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    534c:	e8 17       	cp	r30, r24
    534e:	f9 07       	cpc	r31, r25
    5350:	e1 f7       	brne	.-8      	; 0x534a <StrCalc+0x5c>
    5352:	fe 01       	movw	r30, r28
    5354:	fd 96       	adiw	r30, 0x3d	; 61
	     strMemory[i]=data;
    5356:	cf 01       	movw	r24, r30
    5358:	44 96       	adiw	r24, 0x14	; 20
    535a:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    535c:	e8 17       	cp	r30, r24
    535e:	f9 07       	cpc	r31, r25
    5360:	e1 f7       	brne	.-8      	; 0x535a <StrCalc+0x6c>
	 FillChar(tmpB,sizeof(tmpB),0);
	 FillChar(Result,sizeof(Result),0);
                                            // -5    -5     5    5
	                                        // -6 -   6 -  -6 -  6 -
                                            // -5+6   
	 sprintf_P(tmpA,PSTR("%s"),strA);       // 
    5362:	00 d0       	rcall	.+0      	; 0x5364 <StrCalc+0x76>
    5364:	00 d0       	rcall	.+0      	; 0x5366 <StrCalc+0x78>
    5366:	00 d0       	rcall	.+0      	; 0x5368 <StrCalc+0x7a>
    5368:	ed b7       	in	r30, 0x3d	; 61
    536a:	fe b7       	in	r31, 0x3e	; 62
    536c:	31 96       	adiw	r30, 0x01	; 1
    536e:	8e 01       	movw	r16, r28
    5370:	0f 5f       	subi	r16, 0xFF	; 255
    5372:	1f 4f       	sbci	r17, 0xFF	; 255
    5374:	ad b7       	in	r26, 0x3d	; 61
    5376:	be b7       	in	r27, 0x3e	; 62
    5378:	12 96       	adiw	r26, 0x02	; 2
    537a:	1c 93       	st	X, r17
    537c:	0e 93       	st	-X, r16
    537e:	11 97       	sbiw	r26, 0x01	; 1
    5380:	8b e1       	ldi	r24, 0x1B	; 27
    5382:	97 e0       	ldi	r25, 0x07	; 7
    5384:	93 83       	std	Z+3, r25	; 0x03
    5386:	82 83       	std	Z+2, r24	; 0x02
    5388:	67 96       	adiw	r28, 0x17	; 23
    538a:	2e ad       	ldd	r18, Y+62	; 0x3e
    538c:	3f ad       	ldd	r19, Y+63	; 0x3f
    538e:	67 97       	sbiw	r28, 0x17	; 23
    5390:	35 83       	std	Z+5, r19	; 0x05
    5392:	24 83       	std	Z+4, r18	; 0x04
    5394:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	 sprintf_P(tmpB,PSTR("%s"),strB);  
    5398:	ed b7       	in	r30, 0x3d	; 61
    539a:	fe b7       	in	r31, 0x3e	; 62
    539c:	31 96       	adiw	r30, 0x01	; 1
    539e:	ce 01       	movw	r24, r28
    53a0:	45 96       	adiw	r24, 0x15	; 21
    53a2:	ad b7       	in	r26, 0x3d	; 61
    53a4:	be b7       	in	r27, 0x3e	; 62
    53a6:	12 96       	adiw	r26, 0x02	; 2
    53a8:	9c 93       	st	X, r25
    53aa:	8e 93       	st	-X, r24
    53ac:	11 97       	sbiw	r26, 0x01	; 1
    53ae:	88 e1       	ldi	r24, 0x18	; 24
    53b0:	97 e0       	ldi	r25, 0x07	; 7
    53b2:	93 83       	std	Z+3, r25	; 0x03
    53b4:	82 83       	std	Z+2, r24	; 0x02
    53b6:	69 96       	adiw	r28, 0x19	; 25
    53b8:	2e ad       	ldd	r18, Y+62	; 0x3e
    53ba:	3f ad       	ldd	r19, Y+63	; 0x3f
    53bc:	69 97       	sbiw	r28, 0x19	; 25
    53be:	35 83       	std	Z+5, r19	; 0x05
    53c0:	24 83       	std	Z+4, r18	; 0x04
    53c2:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>

     if (IsMinus(tmpA)==True){
    53c6:	8d b7       	in	r24, 0x3d	; 61
    53c8:	9e b7       	in	r25, 0x3e	; 62
    53ca:	06 96       	adiw	r24, 0x06	; 6
    53cc:	0f b6       	in	r0, 0x3f	; 63
    53ce:	f8 94       	cli
    53d0:	9e bf       	out	0x3e, r25	; 62
    53d2:	0f be       	out	0x3f, r0	; 63
    53d4:	8d bf       	out	0x3d, r24	; 61
    53d6:	c8 01       	movw	r24, r16
    53d8:	0e 94 7a 23 	call	0x46f4	; 0x46f4 <IsMinus>
    53dc:	81 30       	cpi	r24, 0x01	; 1
    53de:	21 f0       	breq	.+8      	; 0x53e8 <StrCalc+0xfa>
    53e0:	65 96       	adiw	r28, 0x15	; 21
    53e2:	1f ae       	std	Y+63, r1	; 0x3f
    53e4:	65 97       	sbiw	r28, 0x15	; 21
    53e6:	07 c0       	rjmp	.+14     	; 0x53f6 <StrCalc+0x108>
	     RemoveMinus(tmpA);
    53e8:	c8 01       	movw	r24, r16
    53ea:	0e 94 7f 23 	call	0x46fe	; 0x46fe <RemoveMinus>
    53ee:	91 e0       	ldi	r25, 0x01	; 1
    53f0:	65 96       	adiw	r28, 0x15	; 21
    53f2:	9f af       	std	Y+63, r25	; 0x3f
    53f4:	65 97       	sbiw	r28, 0x15	; 21
		 IsMinA=True;
	 }
     if (IsMinus(tmpB)==True){
    53f6:	8e 01       	movw	r16, r28
    53f8:	0b 5e       	subi	r16, 0xEB	; 235
    53fa:	1f 4f       	sbci	r17, 0xFF	; 255
    53fc:	c8 01       	movw	r24, r16
    53fe:	0e 94 7a 23 	call	0x46f4	; 0x46f4 <IsMinus>
    5402:	81 30       	cpi	r24, 0x01	; 1
    5404:	21 f0       	breq	.+8      	; 0x540e <StrCalc+0x120>
    5406:	64 96       	adiw	r28, 0x14	; 20
    5408:	1f ae       	std	Y+63, r1	; 0x3f
    540a:	64 97       	sbiw	r28, 0x14	; 20
    540c:	07 c0       	rjmp	.+14     	; 0x541c <StrCalc+0x12e>
	     RemoveMinus(tmpB);
    540e:	c8 01       	movw	r24, r16
    5410:	0e 94 7f 23 	call	0x46fe	; 0x46fe <RemoveMinus>
    5414:	a1 e0       	ldi	r26, 0x01	; 1
    5416:	64 96       	adiw	r28, 0x14	; 20
    5418:	af af       	std	Y+63, r26	; 0x3f
    541a:	64 97       	sbiw	r28, 0x14	; 20
		 IsMinB=True;
	 }    	

     lenA=strlen(tmpA);
    541c:	fe 01       	movw	r30, r28
    541e:	31 96       	adiw	r30, 0x01	; 1
    5420:	df 01       	movw	r26, r30
    5422:	0d 90       	ld	r0, X+
    5424:	00 20       	and	r0, r0
    5426:	e9 f7       	brne	.-6      	; 0x5422 <StrCalc+0x134>
    5428:	cd 01       	movw	r24, r26
    542a:	01 97       	sbiw	r24, 0x01	; 1
    542c:	8e 1b       	sub	r24, r30
    542e:	9f 0b       	sbc	r25, r31
     lenB=strlen(tmpB);
    5430:	de 01       	movw	r26, r28
    5432:	55 96       	adiw	r26, 0x15	; 21
    5434:	fd 01       	movw	r30, r26
    5436:	01 90       	ld	r0, Z+
    5438:	00 20       	and	r0, r0
    543a:	e9 f7       	brne	.-6      	; 0x5436 <StrCalc+0x148>
    543c:	31 97       	sbiw	r30, 0x01	; 1
     /*
	 sprintf_P(strSend,PSTR("A:%s"),strA);	 uart_print(0,1,strSend);
	 sprintf_P(strSend,PSTR("B:%s"),strB);	 uart_print(0,1,strSend);
     */

     AddZeroLead(tmpA,FixLen+1);
    543e:	1e 2f       	mov	r17, r30
    5440:	1a 1b       	sub	r17, r26
    5442:	18 17       	cp	r17, r24
    5444:	08 f4       	brcc	.+2      	; 0x5448 <StrCalc+0x15a>
    5446:	18 2f       	mov	r17, r24
    5448:	1f 5f       	subi	r17, 0xFF	; 255
    544a:	7e 01       	movw	r14, r28
    544c:	08 94       	sec
    544e:	e1 1c       	adc	r14, r1
    5450:	f1 1c       	adc	r15, r1
    5452:	c7 01       	movw	r24, r14
    5454:	61 2f       	mov	r22, r17
    5456:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <AddZeroLead>
     AddZeroLead(tmpB,FixLen+1);
    545a:	05 e1       	ldi	r16, 0x15	; 21
    545c:	c0 2e       	mov	r12, r16
    545e:	d1 2c       	mov	r13, r1
    5460:	cc 0e       	add	r12, r28
    5462:	dd 1e       	adc	r13, r29
    5464:	c6 01       	movw	r24, r12
    5466:	61 2f       	mov	r22, r17
    5468:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <AddZeroLead>
	 uart_print(0,1,strSend);
	 sprintf_P(strSend,PSTR("B:%s"),strB);
	 uart_print(0,1,strSend);
	 */

     lenA=strlen(tmpA);
    546c:	f7 01       	movw	r30, r14
    546e:	01 90       	ld	r0, Z+
    5470:	00 20       	and	r0, r0
    5472:	e9 f7       	brne	.-6      	; 0x546e <StrCalc+0x180>
    5474:	31 97       	sbiw	r30, 0x01	; 1
    5476:	7e 2e       	mov	r7, r30
    5478:	7e 18       	sub	r7, r14
     lenB=strlen(tmpB);
    547a:	f6 01       	movw	r30, r12
    547c:	01 90       	ld	r0, Z+
    547e:	00 20       	and	r0, r0
    5480:	e9 f7       	brne	.-6      	; 0x547c <StrCalc+0x18e>
    5482:	31 97       	sbiw	r30, 0x01	; 1
    5484:	9e 2e       	mov	r9, r30
    5486:	9c 18       	sub	r9, r12
     IsNegative=False;
	 
	 IsNegative=False;
	 IsSwap=False;

	 if (IsMoreThan(tmpB,tmpA)==True){
    5488:	c6 01       	movw	r24, r12
    548a:	b7 01       	movw	r22, r14
    548c:	0e 94 ac 23 	call	0x4758	; 0x4758 <IsMoreThan>
    5490:	81 30       	cpi	r24, 0x01	; 1
    5492:	11 f0       	breq	.+4      	; 0x5498 <StrCalc+0x1aa>
    5494:	80 e0       	ldi	r24, 0x00	; 0
    5496:	42 c0       	rjmp	.+132    	; 0x551c <StrCalc+0x22e>
	     IsSwap=True;
         sprintf_P(tmpC,PSTR("%s"),tmpA);
    5498:	00 d0       	rcall	.+0      	; 0x549a <StrCalc+0x1ac>
    549a:	00 d0       	rcall	.+0      	; 0x549c <StrCalc+0x1ae>
    549c:	00 d0       	rcall	.+0      	; 0x549e <StrCalc+0x1b0>
    549e:	ed b7       	in	r30, 0x3d	; 61
    54a0:	fe b7       	in	r31, 0x3e	; 62
    54a2:	31 96       	adiw	r30, 0x01	; 1
    54a4:	8e 01       	movw	r16, r28
    54a6:	07 5d       	subi	r16, 0xD7	; 215
    54a8:	1f 4f       	sbci	r17, 0xFF	; 255
    54aa:	ad b7       	in	r26, 0x3d	; 61
    54ac:	be b7       	in	r27, 0x3e	; 62
    54ae:	12 96       	adiw	r26, 0x02	; 2
    54b0:	1c 93       	st	X, r17
    54b2:	0e 93       	st	-X, r16
    54b4:	11 97       	sbiw	r26, 0x01	; 1
    54b6:	85 e1       	ldi	r24, 0x15	; 21
    54b8:	97 e0       	ldi	r25, 0x07	; 7
    54ba:	93 83       	std	Z+3, r25	; 0x03
    54bc:	82 83       	std	Z+2, r24	; 0x02
    54be:	f5 82       	std	Z+5, r15	; 0x05
    54c0:	e4 82       	std	Z+4, r14	; 0x04
    54c2:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
		 sprintf_P(tmpA,PSTR("%s"),tmpB);
    54c6:	ed b7       	in	r30, 0x3d	; 61
    54c8:	fe b7       	in	r31, 0x3e	; 62
    54ca:	31 96       	adiw	r30, 0x01	; 1
    54cc:	ad b7       	in	r26, 0x3d	; 61
    54ce:	be b7       	in	r27, 0x3e	; 62
    54d0:	12 96       	adiw	r26, 0x02	; 2
    54d2:	fc 92       	st	X, r15
    54d4:	ee 92       	st	-X, r14
    54d6:	11 97       	sbiw	r26, 0x01	; 1
    54d8:	82 e1       	ldi	r24, 0x12	; 18
    54da:	97 e0       	ldi	r25, 0x07	; 7
    54dc:	93 83       	std	Z+3, r25	; 0x03
    54de:	82 83       	std	Z+2, r24	; 0x02
    54e0:	d5 82       	std	Z+5, r13	; 0x05
    54e2:	c4 82       	std	Z+4, r12	; 0x04
    54e4:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
		 sprintf_P(tmpB,PSTR("%s"),tmpC);
    54e8:	ed b7       	in	r30, 0x3d	; 61
    54ea:	fe b7       	in	r31, 0x3e	; 62
    54ec:	31 96       	adiw	r30, 0x01	; 1
    54ee:	ad b7       	in	r26, 0x3d	; 61
    54f0:	be b7       	in	r27, 0x3e	; 62
    54f2:	12 96       	adiw	r26, 0x02	; 2
    54f4:	dc 92       	st	X, r13
    54f6:	ce 92       	st	-X, r12
    54f8:	11 97       	sbiw	r26, 0x01	; 1
    54fa:	8f e0       	ldi	r24, 0x0F	; 15
    54fc:	97 e0       	ldi	r25, 0x07	; 7
    54fe:	93 83       	std	Z+3, r25	; 0x03
    5500:	82 83       	std	Z+2, r24	; 0x02
    5502:	15 83       	std	Z+5, r17	; 0x05
    5504:	04 83       	std	Z+4, r16	; 0x04
    5506:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
    550a:	81 e0       	ldi	r24, 0x01	; 1
    550c:	ed b7       	in	r30, 0x3d	; 61
    550e:	fe b7       	in	r31, 0x3e	; 62
    5510:	36 96       	adiw	r30, 0x06	; 6
    5512:	0f b6       	in	r0, 0x3f	; 63
    5514:	f8 94       	cli
    5516:	fe bf       	out	0x3e, r31	; 62
    5518:	0f be       	out	0x3f, r0	; 63
    551a:	ed bf       	out	0x3d, r30	; 61
	 }
    
	if (TOperation==TMINUS){
    551c:	66 20       	and	r6, r6
    551e:	39 f5       	brne	.+78     	; 0x556e <StrCalc+0x280>
	    TCalc=TOperation;
		IsNegative=False;
		if (IsSwap==True){
    5520:	81 30       	cpi	r24, 0x01	; 1
    5522:	99 f4       	brne	.+38     	; 0x554a <StrCalc+0x25c>
		    if ((IsMinA==True)&&(IsMinB==True)){IsNegative=False;TCalc=TMINUS;}
    5524:	65 96       	adiw	r28, 0x15	; 21
    5526:	ff ad       	ldd	r31, Y+63	; 0x3f
    5528:	65 97       	sbiw	r28, 0x15	; 21
    552a:	f1 30       	cpi	r31, 0x01	; 1
    552c:	39 f4       	brne	.+14     	; 0x553c <StrCalc+0x24e>
    552e:	64 96       	adiw	r28, 0x14	; 20
    5530:	2f ad       	ldd	r18, Y+63	; 0x3f
    5532:	64 97       	sbiw	r28, 0x14	; 20
    5534:	21 30       	cpi	r18, 0x01	; 1
    5536:	09 f0       	breq	.+2      	; 0x553a <StrCalc+0x24c>
    5538:	9e c1       	rjmp	.+828    	; 0x5876 <StrCalc+0x588>
    553a:	42 c0       	rjmp	.+132    	; 0x55c0 <StrCalc+0x2d2>
            else if ((IsMinA==True)&&(IsMinB==False)){IsNegative=True;TCalc=TPLUS;}
            else if ((IsMinA==False)&&(IsMinB==True)){IsNegative=False;TCalc=TPLUS;}
    553c:	64 96       	adiw	r28, 0x14	; 20
    553e:	3f ad       	ldd	r19, Y+63	; 0x3f
    5540:	64 97       	sbiw	r28, 0x14	; 20
    5542:	31 30       	cpi	r19, 0x01	; 1
    5544:	09 f0       	breq	.+2      	; 0x5548 <StrCalc+0x25a>
    5546:	8e c1       	rjmp	.+796    	; 0x5864 <StrCalc+0x576>
    5548:	92 c1       	rjmp	.+804    	; 0x586e <StrCalc+0x580>
            else if ((IsMinA==False)&&(IsMinB==False)){IsNegative=True;TCalc=TMINUS;}
		}else
		if (IsSwap==False){
		    if ((IsMinA==True)&&(IsMinB==True)){IsNegative=True;TCalc=TMINUS;}
    554a:	65 96       	adiw	r28, 0x15	; 21
    554c:	8f ad       	ldd	r24, Y+63	; 0x3f
    554e:	65 97       	sbiw	r28, 0x15	; 21
    5550:	81 30       	cpi	r24, 0x01	; 1
    5552:	39 f4       	brne	.+14     	; 0x5562 <StrCalc+0x274>
    5554:	64 96       	adiw	r28, 0x14	; 20
    5556:	9f ad       	ldd	r25, Y+63	; 0x3f
    5558:	64 97       	sbiw	r28, 0x14	; 20
    555a:	91 30       	cpi	r25, 0x01	; 1
    555c:	09 f0       	breq	.+2      	; 0x5560 <StrCalc+0x272>
    555e:	8b c1       	rjmp	.+790    	; 0x5876 <StrCalc+0x588>
    5560:	81 c1       	rjmp	.+770    	; 0x5864 <StrCalc+0x576>
            else if ((IsMinA==True)&&(IsMinB==False)){IsNegative=True;TCalc=TPLUS;}
            else if ((IsMinA==False)&&(IsMinB==True)){IsNegative=False;TCalc=TPLUS;}
    5562:	64 96       	adiw	r28, 0x14	; 20
    5564:	af ad       	ldd	r26, Y+63	; 0x3f
    5566:	64 97       	sbiw	r28, 0x14	; 20
    5568:	a1 30       	cpi	r26, 0x01	; 1
    556a:	51 f5       	brne	.+84     	; 0x55c0 <StrCalc+0x2d2>
    556c:	80 c1       	rjmp	.+768    	; 0x586e <StrCalc+0x580>
            else if ((IsMinA==False)&&(IsMinB==False)){IsNegative=False;TCalc=TMINUS;}
		}
	 }else
	if (TOperation==TPLUS){
    556e:	b1 e0       	ldi	r27, 0x01	; 1
    5570:	6b 16       	cp	r6, r27
    5572:	31 f5       	brne	.+76     	; 0x55c0 <StrCalc+0x2d2>
	    TCalc=TOperation;
		IsNegative=False;
		if (IsSwap==True){
    5574:	81 30       	cpi	r24, 0x01	; 1
    5576:	91 f4       	brne	.+36     	; 0x559c <StrCalc+0x2ae>
		    if ((IsMinA==True)&&(IsMinB==True)){IsNegative=True;TCalc=TPLUS;}
    5578:	65 96       	adiw	r28, 0x15	; 21
    557a:	ef ad       	ldd	r30, Y+63	; 0x3f
    557c:	65 97       	sbiw	r28, 0x15	; 21
    557e:	e1 30       	cpi	r30, 0x01	; 1
    5580:	31 f4       	brne	.+12     	; 0x558e <StrCalc+0x2a0>
    5582:	64 96       	adiw	r28, 0x14	; 20
    5584:	ff ad       	ldd	r31, Y+63	; 0x3f
    5586:	64 97       	sbiw	r28, 0x14	; 20
    5588:	f1 30       	cpi	r31, 0x01	; 1
    558a:	d1 f4       	brne	.+52     	; 0x55c0 <StrCalc+0x2d2>
    558c:	74 c1       	rjmp	.+744    	; 0x5876 <StrCalc+0x588>
            else if ((IsMinA==True)&&(IsMinB==False)){IsNegative=False;TCalc=TMINUS;}
            else if ((IsMinA==False)&&(IsMinB==True)){IsNegative=True;TCalc=TMINUS;}
    558e:	64 96       	adiw	r28, 0x14	; 20
    5590:	2f ad       	ldd	r18, Y+63	; 0x3f
    5592:	64 97       	sbiw	r28, 0x14	; 20
    5594:	21 30       	cpi	r18, 0x01	; 1
    5596:	09 f0       	breq	.+2      	; 0x559a <StrCalc+0x2ac>
    5598:	6a c1       	rjmp	.+724    	; 0x586e <StrCalc+0x580>
    559a:	64 c1       	rjmp	.+712    	; 0x5864 <StrCalc+0x576>
            else if ((IsMinA==False)&&(IsMinB==False)){IsNegative=False;TCalc=TPLUS;}
		}else
		if (IsSwap==False){
		    if ((IsMinA==True)&&(IsMinB==True)){IsNegative=True;TCalc=TPLUS;}
    559c:	65 96       	adiw	r28, 0x15	; 21
    559e:	3f ad       	ldd	r19, Y+63	; 0x3f
    55a0:	65 97       	sbiw	r28, 0x15	; 21
    55a2:	31 30       	cpi	r19, 0x01	; 1
    55a4:	39 f4       	brne	.+14     	; 0x55b4 <StrCalc+0x2c6>
    55a6:	64 96       	adiw	r28, 0x14	; 20
    55a8:	8f ad       	ldd	r24, Y+63	; 0x3f
    55aa:	64 97       	sbiw	r28, 0x14	; 20
    55ac:	81 30       	cpi	r24, 0x01	; 1
    55ae:	09 f0       	breq	.+2      	; 0x55b2 <StrCalc+0x2c4>
    55b0:	59 c1       	rjmp	.+690    	; 0x5864 <StrCalc+0x576>
    55b2:	61 c1       	rjmp	.+706    	; 0x5876 <StrCalc+0x588>
            else if ((IsMinA==True)&&(IsMinB==False)){IsNegative=True;TCalc=TMINUS;}
            else if ((IsMinA==False)&&(IsMinB==True)){IsNegative=False;TCalc=TMINUS;}
    55b4:	64 96       	adiw	r28, 0x14	; 20
    55b6:	9f ad       	ldd	r25, Y+63	; 0x3f
    55b8:	64 97       	sbiw	r28, 0x14	; 20
    55ba:	91 30       	cpi	r25, 0x01	; 1
    55bc:	09 f0       	breq	.+2      	; 0x55c0 <StrCalc+0x2d2>
    55be:	57 c1       	rjmp	.+686    	; 0x586e <StrCalc+0x580>
   // A: 100000
   // B: 000001 -
   // -----------
   // C: 099999

	 if (TCalc==TMINUS){
    55c0:	62 96       	adiw	r28, 0x12	; 18
    55c2:	1f ae       	std	Y+63, r1	; 0x3f
    55c4:	62 97       	sbiw	r28, 0x12	; 18
     
	 //if (NinePos<Length-4)
	 StrCalc(TPLUS,strMaxValue,strOverflowed,strOverflowed);
}
                                                                   //     1111111 
void StrCalc(char TOperation, char *strA , char *strB, char *strC){//  A: 00000000
    55c6:	e7 2c       	mov	r14, r7
    55c8:	ff 24       	eor	r15, r15
    55ca:	67 01       	movw	r12, r14
    55cc:	08 94       	sec
    55ce:	c1 08       	sbc	r12, r1
    55d0:	d1 08       	sbc	r13, r1
    55d2:	ae 01       	movw	r20, r28
    55d4:	43 5c       	subi	r20, 0xC3	; 195
    55d6:	5f 4f       	sbci	r21, 0xFF	; 255
    55d8:	4c 0d       	add	r20, r12
    55da:	5d 1d       	adc	r21, r13
    55dc:	ce 01       	movw	r24, r28
    55de:	01 96       	adiw	r24, 0x01	; 1
    55e0:	8c 01       	movw	r16, r24
    55e2:	0c 0d       	add	r16, r12
    55e4:	1d 1d       	adc	r17, r13
    55e6:	be 01       	movw	r22, r28
    55e8:	69 0d       	add	r22, r9
    55ea:	71 1d       	adc	r23, r1
    55ec:	6c 5e       	subi	r22, 0xEC	; 236
    55ee:	7f 4f       	sbci	r23, 0xFF	; 255
    55f0:	99 24       	eor	r9, r9
			     Result[lenA-i-1]=Chr(Ord(tmpA[lenA-i-1])-Ord(tmpB[lenB-i-1]));
			 }else
			 if (Ord(tmpA[lenA-i-1])<Ord(tmpB[lenB-i-1])){
			 //Pinjaman
			     for(j=i+1;j<lenA;j++){
				     if (tmpA[lenA-j-1]=='0')tmpA[lenA-j-1]='9';
    55f2:	2c 01       	movw	r4, r24
    55f4:	b9 e3       	ldi	r27, 0x39	; 57
    55f6:	8b 2e       	mov	r8, r27
					 if (tmpA[lenA-j-1]!='0'){
					     tmpA[lenA-j-1]=Chr(Ord(tmpA[lenA-j-1])-1);
						 break;
					 }				 
				 }
				 Result[lenA-i-1]=Chr(10+Ord(tmpA[lenA-i-1])-Ord(tmpB[lenB-i-1]));
    55f8:	9a e0       	ldi	r25, 0x0A	; 10
    55fa:	52 c0       	rjmp	.+164    	; 0x56a0 <StrCalc+0x3b2>
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
    55fc:	d8 01       	movw	r26, r16
    55fe:	8c 91       	ld	r24, X
    5600:	80 53       	subi	r24, 0x30	; 48
    5602:	8a 30       	cpi	r24, 0x0A	; 10
    5604:	10 f0       	brcs	.+4      	; 0x560a <StrCalc+0x31c>
    5606:	20 e0       	ldi	r18, 0x00	; 0
    5608:	01 c0       	rjmp	.+2      	; 0x560c <StrCalc+0x31e>
    560a:	28 2f       	mov	r18, r24
   // -----------
   // C: 099999

	 if (TCalc==TMINUS){
	     for(i=0;i<lenA;i++){		 
		     if (Ord(tmpA[lenA-i-1])>=Ord(tmpB[lenB-i-1])){
    560c:	fb 01       	movw	r30, r22
    560e:	30 81       	ld	r19, Z
    5610:	30 53       	subi	r19, 0x30	; 48
    5612:	3a 30       	cpi	r19, 0x0A	; 10
    5614:	10 f4       	brcc	.+4      	; 0x561a <StrCalc+0x32c>
    5616:	23 17       	cp	r18, r19
    5618:	40 f0       	brcs	.+16     	; 0x562a <StrCalc+0x33c>
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
    561a:	8a 30       	cpi	r24, 0x0A	; 10
    561c:	08 f0       	brcs	.+2      	; 0x5620 <StrCalc+0x332>
    561e:	80 e0       	ldi	r24, 0x00	; 0

	 if (TCalc==TMINUS){
	     for(i=0;i<lenA;i++){		 
		     if (Ord(tmpA[lenA-i-1])>=Ord(tmpB[lenB-i-1])){
			 //Cukup
			     Result[lenA-i-1]=Chr(Ord(tmpA[lenA-i-1])-Ord(tmpB[lenB-i-1]));
    5620:	3a 30       	cpi	r19, 0x0A	; 10
    5622:	08 f0       	brcs	.+2      	; 0x5626 <StrCalc+0x338>
    5624:	30 e0       	ldi	r19, 0x00	; 0
    5626:	83 1b       	sub	r24, r19
    5628:	2d c0       	rjmp	.+90     	; 0x5684 <StrCalc+0x396>
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
    562a:	8a 30       	cpi	r24, 0x0A	; 10
    562c:	10 f4       	brcc	.+4      	; 0x5632 <StrCalc+0x344>
	     for(i=0;i<lenA;i++){		 
		     if (Ord(tmpA[lenA-i-1])>=Ord(tmpB[lenB-i-1])){
			 //Cukup
			     Result[lenA-i-1]=Chr(Ord(tmpA[lenA-i-1])-Ord(tmpB[lenB-i-1]));
			 }else
			 if (Ord(tmpA[lenA-i-1])<Ord(tmpB[lenB-i-1])){
    562e:	83 17       	cp	r24, r19
    5630:	80 f5       	brcc	.+96     	; 0x5692 <StrCalc+0x3a4>
    5632:	29 2d       	mov	r18, r9
    5634:	0a c0       	rjmp	.+20     	; 0x564a <StrCalc+0x35c>
			 //Pinjaman
			     for(j=i+1;j<lenA;j++){
				     if (tmpA[lenA-j-1]=='0')tmpA[lenA-j-1]='9';
    5636:	f6 01       	movw	r30, r12
    5638:	e2 1b       	sub	r30, r18
    563a:	f1 09       	sbc	r31, r1
    563c:	d2 01       	movw	r26, r4
    563e:	ae 0f       	add	r26, r30
    5640:	bf 1f       	adc	r27, r31
    5642:	8c 91       	ld	r24, X
    5644:	80 33       	cpi	r24, 0x30	; 48
    5646:	29 f4       	brne	.+10     	; 0x5652 <StrCalc+0x364>
    5648:	8c 92       	st	X, r8
			 //Cukup
			     Result[lenA-i-1]=Chr(Ord(tmpA[lenA-i-1])-Ord(tmpB[lenB-i-1]));
			 }else
			 if (Ord(tmpA[lenA-i-1])<Ord(tmpB[lenB-i-1])){
			 //Pinjaman
			     for(j=i+1;j<lenA;j++){
    564a:	2f 5f       	subi	r18, 0xFF	; 255
    564c:	27 15       	cp	r18, r7
    564e:	98 f3       	brcs	.-26     	; 0x5636 <StrCalc+0x348>
    5650:	10 c0       	rjmp	.+32     	; 0x5672 <StrCalc+0x384>
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
    5652:	28 2f       	mov	r18, r24
    5654:	20 53       	subi	r18, 0x30	; 48
    5656:	2a 30       	cpi	r18, 0x0A	; 10
    5658:	08 f0       	brcs	.+2      	; 0x565c <StrCalc+0x36e>
    565a:	20 e0       	ldi	r18, 0x00	; 0
			 //Pinjaman
			     for(j=i+1;j<lenA;j++){
				     if (tmpA[lenA-j-1]=='0')tmpA[lenA-j-1]='9';
					 else
					 if (tmpA[lenA-j-1]!='0'){
					     tmpA[lenA-j-1]=Chr(Ord(tmpA[lenA-j-1])-1);
    565c:	82 2f       	mov	r24, r18
    565e:	81 50       	subi	r24, 0x01	; 1
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
    5660:	8a 30       	cpi	r24, 0x0A	; 10
    5662:	10 f0       	brcs	.+4      	; 0x5668 <StrCalc+0x37a>
    5664:	80 e3       	ldi	r24, 0x30	; 48
    5666:	02 c0       	rjmp	.+4      	; 0x566c <StrCalc+0x37e>
	    Result='0'+X;
    5668:	82 2f       	mov	r24, r18
    566a:	81 5d       	subi	r24, 0xD1	; 209
			 //Pinjaman
			     for(j=i+1;j<lenA;j++){
				     if (tmpA[lenA-j-1]=='0')tmpA[lenA-j-1]='9';
					 else
					 if (tmpA[lenA-j-1]!='0'){
					     tmpA[lenA-j-1]=Chr(Ord(tmpA[lenA-j-1])-1);
    566c:	e4 0d       	add	r30, r4
    566e:	f5 1d       	adc	r31, r5
    5670:	80 83       	st	Z, r24
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
    5672:	f8 01       	movw	r30, r16
    5674:	20 81       	ld	r18, Z
    5676:	20 53       	subi	r18, 0x30	; 48
    5678:	2a 30       	cpi	r18, 0x0A	; 10
    567a:	08 f0       	brcs	.+2      	; 0x567e <StrCalc+0x390>
    567c:	20 e0       	ldi	r18, 0x00	; 0
					 if (tmpA[lenA-j-1]!='0'){
					     tmpA[lenA-j-1]=Chr(Ord(tmpA[lenA-j-1])-1);
						 break;
					 }				 
				 }
				 Result[lenA-i-1]=Chr(10+Ord(tmpA[lenA-i-1])-Ord(tmpB[lenB-i-1]));
    567e:	89 2f       	mov	r24, r25
    5680:	83 1b       	sub	r24, r19
    5682:	82 0f       	add	r24, r18
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
    5684:	8a 30       	cpi	r24, 0x0A	; 10
    5686:	10 f0       	brcs	.+4      	; 0x568c <StrCalc+0x39e>
    5688:	80 e3       	ldi	r24, 0x30	; 48
    568a:	01 c0       	rjmp	.+2      	; 0x568e <StrCalc+0x3a0>
	    Result='0'+X;
    568c:	80 5d       	subi	r24, 0xD0	; 208
					 if (tmpA[lenA-j-1]!='0'){
					     tmpA[lenA-j-1]=Chr(Ord(tmpA[lenA-j-1])-1);
						 break;
					 }				 
				 }
				 Result[lenA-i-1]=Chr(10+Ord(tmpA[lenA-i-1])-Ord(tmpB[lenB-i-1]));
    568e:	da 01       	movw	r26, r20
    5690:	8c 93       	st	X, r24
   // B: 000001 -
   // -----------
   // C: 099999

	 if (TCalc==TMINUS){
	     for(i=0;i<lenA;i++){		 
    5692:	93 94       	inc	r9
    5694:	41 50       	subi	r20, 0x01	; 1
    5696:	50 40       	sbci	r21, 0x00	; 0
    5698:	01 50       	subi	r16, 0x01	; 1
    569a:	10 40       	sbci	r17, 0x00	; 0
    569c:	61 50       	subi	r22, 0x01	; 1
    569e:	70 40       	sbci	r23, 0x00	; 0
    56a0:	97 14       	cp	r9, r7
    56a2:	08 f4       	brcc	.+2      	; 0x56a6 <StrCalc+0x3b8>
    56a4:	ab cf       	rjmp	.-170    	; 0x55fc <StrCalc+0x30e>
						 break;
					 }				 
				 }
				 Result[lenA-i-1]=Chr(10+Ord(tmpA[lenA-i-1])-Ord(tmpB[lenB-i-1]));
			 }
		 }Result[lenA]=0;		    
    56a6:	8e 01       	movw	r16, r28
    56a8:	03 5c       	subi	r16, 0xC3	; 195
    56aa:	1f 4f       	sbci	r17, 0xFF	; 255
    56ac:	e0 0e       	add	r14, r16
    56ae:	f1 1e       	adc	r15, r17
    56b0:	f7 01       	movw	r30, r14
    56b2:	10 82       	st	Z, r1
       RemZeroLead(Result);
    56b4:	c8 01       	movw	r24, r16
    56b6:	0e 94 3f 25 	call	0x4a7e	; 0x4a7e <RemZeroLead>
//	 sprintf_P(strSend,PSTR("C':%s"),Result);
//	 uart_print(0,1,strSend);
		 
		 FixLen=strlen(Result);
    56ba:	f8 01       	movw	r30, r16
    56bc:	01 90       	ld	r0, Z+
    56be:	00 20       	and	r0, r0
    56c0:	e9 f7       	brne	.-6      	; 0x56bc <StrCalc+0x3ce>
    56c2:	31 97       	sbiw	r30, 0x01	; 1
    56c4:	3e 2f       	mov	r19, r30
    56c6:	30 1b       	sub	r19, r16
    56c8:	d8 01       	movw	r26, r16
    56ca:	20 e0       	ldi	r18, 0x00	; 0
    56cc:	90 e0       	ldi	r25, 0x00	; 0
		 iPos=0;
		 for(i=0;i<FixLen;i++){
		     if ((i==0)&&(IsNegative==True)){
			     strC[iPos]='-';
    56ce:	4d e2       	ldi	r20, 0x2D	; 45
    56d0:	13 c0       	rjmp	.+38     	; 0x56f8 <StrCalc+0x40a>
//	 uart_print(0,1,strSend);
		 
		 FixLen=strlen(Result);
		 iPos=0;
		 for(i=0;i<FixLen;i++){
		     if ((i==0)&&(IsNegative==True)){
    56d2:	22 23       	and	r18, r18
    56d4:	51 f4       	brne	.+20     	; 0x56ea <StrCalc+0x3fc>
    56d6:	62 96       	adiw	r28, 0x12	; 18
    56d8:	ff ad       	ldd	r31, Y+63	; 0x3f
    56da:	62 97       	sbiw	r28, 0x12	; 18
    56dc:	f1 30       	cpi	r31, 0x01	; 1
    56de:	29 f4       	brne	.+10     	; 0x56ea <StrCalc+0x3fc>
			     strC[iPos]='-';
    56e0:	f5 01       	movw	r30, r10
    56e2:	e9 0f       	add	r30, r25
    56e4:	f1 1d       	adc	r31, r1
    56e6:	40 83       	st	Z, r20
				 iPos++;
    56e8:	9f 5f       	subi	r25, 0xFF	; 255
			 }
		     strC[iPos]=Result[i];
    56ea:	f5 01       	movw	r30, r10
    56ec:	e9 0f       	add	r30, r25
    56ee:	f1 1d       	adc	r31, r1
    56f0:	8d 91       	ld	r24, X+
    56f2:	80 83       	st	Z, r24
			 iPos++;
    56f4:	9f 5f       	subi	r25, 0xFF	; 255
//	 sprintf_P(strSend,PSTR("C':%s"),Result);
//	 uart_print(0,1,strSend);
		 
		 FixLen=strlen(Result);
		 iPos=0;
		 for(i=0;i<FixLen;i++){
    56f6:	2f 5f       	subi	r18, 0xFF	; 255
    56f8:	23 17       	cp	r18, r19
    56fa:	58 f3       	brcs	.-42     	; 0x56d2 <StrCalc+0x3e4>
			     strC[iPos]='-';
				 iPos++;
			 }
		     strC[iPos]=Result[i];
			 iPos++;
		 }strC[iPos]=0;
    56fc:	f5 01       	movw	r30, r10
    56fe:	e9 0f       	add	r30, r25
    5700:	f1 1d       	adc	r31, r1
    5702:	10 82       	st	Z, r1
    5704:	a0 c0       	rjmp	.+320    	; 0x5846 <StrCalc+0x558>
	 }
	 else                     //         1
	 if (TCalc==TPLUS){  //A:099999999
    5706:	ad e3       	ldi	r26, 0x3D	; 61
    5708:	ea 2e       	mov	r14, r26
    570a:	f1 2c       	mov	r15, r1
    570c:	ec 0e       	add	r14, r28
    570e:	fd 1e       	adc	r15, r29
    5710:	ae 01       	movw	r20, r28
    5712:	49 0d       	add	r20, r9
    5714:	51 1d       	adc	r21, r1
    5716:	4c 5e       	subi	r20, 0xEC	; 236
    5718:	5f 4f       	sbci	r21, 0xFF	; 255
     
	 //if (NinePos<Length-4)
	 StrCalc(TPLUS,strMaxValue,strOverflowed,strOverflowed);
}
                                                                   //     1111111 
void StrCalc(char TOperation, char *strA , char *strB, char *strC){//  A: 00000000
    571a:	07 2d       	mov	r16, r7
    571c:	10 e0       	ldi	r17, 0x00	; 0
    571e:	48 01       	movw	r8, r16
    5720:	08 94       	sec
    5722:	81 08       	sbc	r8, r1
    5724:	91 08       	sbc	r9, r1
    5726:	ce 01       	movw	r24, r28
    5728:	01 96       	adiw	r24, 0x01	; 1
    572a:	6c 01       	movw	r12, r24
    572c:	c8 0c       	add	r12, r8
    572e:	d9 1c       	adc	r13, r9
    5730:	30 e0       	ldi	r19, 0x00	; 0
    5732:	20 e0       	ldi	r18, 0x00	; 0
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
    5734:	2c 01       	movw	r4, r24
                 //Lebih
				 Result[i]=Chr(newC%10);
				 zMin=newC/10;
			     for(j=i+1;j<lenA;j++){
				     if ((Ord(tmpA[lenA-j-1])+zMin)>=10){
					     tmpA[lenA-j-1]=Chr((Ord(tmpA[lenA-j-1])+zMin)%10);
    5736:	f0 e3       	ldi	r31, 0x30	; 48
    5738:	3f 2e       	mov	r3, r31
    573a:	47 c0       	rjmp	.+142    	; 0x57ca <StrCalc+0x4dc>
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
    573c:	d6 01       	movw	r26, r12
    573e:	9c 91       	ld	r25, X
    5740:	90 53       	subi	r25, 0x30	; 48
    5742:	9a 30       	cpi	r25, 0x0A	; 10
    5744:	08 f0       	brcs	.+2      	; 0x5748 <StrCalc+0x45a>
    5746:	90 e0       	ldi	r25, 0x00	; 0
	 }
	 else                     //         1
	 if (TCalc==TPLUS){  //A:099999999
	     zMin=0;              //B:000000001
	     for(i=0;i<lenA;i++){ //C:       00
		     newC=(Ord(tmpA[lenA-i-1])+Ord(tmpB[lenB-i-1]));			 
    5748:	fa 01       	movw	r30, r20
    574a:	80 81       	ld	r24, Z
    574c:	80 53       	subi	r24, 0x30	; 48
    574e:	8a 30       	cpi	r24, 0x0A	; 10
    5750:	08 f0       	brcs	.+2      	; 0x5754 <StrCalc+0x466>
    5752:	80 e0       	ldi	r24, 0x00	; 0
    5754:	89 0f       	add	r24, r25
			 if (newC<10){
    5756:	8a 30       	cpi	r24, 0x0A	; 10
    5758:	18 f4       	brcc	.+6      	; 0x5760 <StrCalc+0x472>
			     Result[i]=Chr(newC);
    575a:	80 5d       	subi	r24, 0xD0	; 208
    575c:	d7 01       	movw	r26, r14
    575e:	28 c0       	rjmp	.+80     	; 0x57b0 <StrCalc+0x4c2>
				 zMin=newC/10;
			 }else if (newC>=10){
                 //Lebih
				 Result[i]=Chr(newC%10);
    5760:	6a e0       	ldi	r22, 0x0A	; 10
    5762:	0e 94 4c aa 	call	0x15498	; 0x15498 <__udivmodqi4>
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
    5766:	9a 30       	cpi	r25, 0x0A	; 10
    5768:	10 f0       	brcs	.+4      	; 0x576e <StrCalc+0x480>
    576a:	90 e3       	ldi	r25, 0x30	; 48
    576c:	01 c0       	rjmp	.+2      	; 0x5770 <StrCalc+0x482>
	    Result='0'+X;
    576e:	90 5d       	subi	r25, 0xD0	; 208
			 if (newC<10){
			     Result[i]=Chr(newC);
				 zMin=newC/10;
			 }else if (newC>=10){
                 //Lebih
				 Result[i]=Chr(newC%10);
    5770:	f7 01       	movw	r30, r14
    5772:	90 83       	st	Z, r25
    5774:	83 2f       	mov	r24, r19
    5776:	0e c0       	rjmp	.+28     	; 0x5794 <StrCalc+0x4a6>
				 zMin=newC/10;
			     for(j=i+1;j<lenA;j++){
				     if ((Ord(tmpA[lenA-j-1])+zMin)>=10){
    5778:	d4 01       	movw	r26, r8
    577a:	a8 1b       	sub	r26, r24
    577c:	b1 09       	sbc	r27, r1
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
    577e:	f2 01       	movw	r30, r4
    5780:	ea 0f       	add	r30, r26
    5782:	fb 1f       	adc	r31, r27
    5784:	90 81       	ld	r25, Z
    5786:	90 53       	subi	r25, 0x30	; 48
    5788:	9a 30       	cpi	r25, 0x0A	; 10
    578a:	08 f0       	brcs	.+2      	; 0x578e <StrCalc+0x4a0>
    578c:	79 c0       	rjmp	.+242    	; 0x5880 <StrCalc+0x592>
			 }else if (newC>=10){
                 //Lebih
				 Result[i]=Chr(newC%10);
				 zMin=newC/10;
			     for(j=i+1;j<lenA;j++){
				     if ((Ord(tmpA[lenA-j-1])+zMin)>=10){
    578e:	99 30       	cpi	r25, 0x09	; 9
    5790:	29 f4       	brne	.+10     	; 0x579c <StrCalc+0x4ae>
					     tmpA[lenA-j-1]=Chr((Ord(tmpA[lenA-j-1])+zMin)%10);
    5792:	30 82       	st	Z, r3
				 zMin=newC/10;
			 }else if (newC>=10){
                 //Lebih
				 Result[i]=Chr(newC%10);
				 zMin=newC/10;
			     for(j=i+1;j<lenA;j++){
    5794:	8f 5f       	subi	r24, 0xFF	; 255
    5796:	87 15       	cp	r24, r7
    5798:	78 f3       	brcs	.-34     	; 0x5778 <StrCalc+0x48a>
    579a:	0d c0       	rjmp	.+26     	; 0x57b6 <StrCalc+0x4c8>
				     if ((Ord(tmpA[lenA-j-1])+zMin)>=10){
					     tmpA[lenA-j-1]=Chr((Ord(tmpA[lenA-j-1])+zMin)%10);
						 zMin=1;
					 }else{
					     tmpA[lenA-j-1]=Chr((Ord(tmpA[lenA-j-1])+zMin));
    579c:	89 2f       	mov	r24, r25
    579e:	8f 5f       	subi	r24, 0xFF	; 255
  return Result;
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
    57a0:	8a 30       	cpi	r24, 0x0A	; 10
    57a2:	10 f0       	brcs	.+4      	; 0x57a8 <StrCalc+0x4ba>
    57a4:	80 e3       	ldi	r24, 0x30	; 48
    57a6:	02 c0       	rjmp	.+4      	; 0x57ac <StrCalc+0x4be>
	    Result='0'+X;
    57a8:	89 2f       	mov	r24, r25
    57aa:	8f 5c       	subi	r24, 0xCF	; 207
			     for(j=i+1;j<lenA;j++){
				     if ((Ord(tmpA[lenA-j-1])+zMin)>=10){
					     tmpA[lenA-j-1]=Chr((Ord(tmpA[lenA-j-1])+zMin)%10);
						 zMin=1;
					 }else{
					     tmpA[lenA-j-1]=Chr((Ord(tmpA[lenA-j-1])+zMin));
    57ac:	a4 0d       	add	r26, r4
    57ae:	b5 1d       	adc	r27, r5
    57b0:	8c 93       	st	X, r24
    57b2:	20 e0       	ldi	r18, 0x00	; 0
    57b4:	01 c0       	rjmp	.+2      	; 0x57b8 <StrCalc+0x4ca>
				 zMin=newC/10;
			 }else if (newC>=10){
                 //Lebih
				 Result[i]=Chr(newC%10);
				 zMin=newC/10;
			     for(j=i+1;j<lenA;j++){
    57b6:	21 e0       	ldi	r18, 0x01	; 1
		 }strC[iPos]=0;
	 }
	 else                     //         1
	 if (TCalc==TPLUS){  //A:099999999
	     zMin=0;              //B:000000001
	     for(i=0;i<lenA;i++){ //C:       00
    57b8:	3f 5f       	subi	r19, 0xFF	; 255
    57ba:	08 94       	sec
    57bc:	e1 1c       	adc	r14, r1
    57be:	f1 1c       	adc	r15, r1
    57c0:	41 50       	subi	r20, 0x01	; 1
    57c2:	50 40       	sbci	r21, 0x00	; 0
    57c4:	08 94       	sec
    57c6:	c1 08       	sbc	r12, r1
    57c8:	d1 08       	sbc	r13, r1
    57ca:	37 15       	cp	r19, r7
    57cc:	08 f4       	brcc	.+2      	; 0x57d0 <StrCalc+0x4e2>
    57ce:	b6 cf       	rjmp	.-148    	; 0x573c <StrCalc+0x44e>
}

char Chr(char X){//Return Char Value
     char Result='0';
	 if ((X>=0)&&(X<=9)){
	    Result='0'+X;
    57d0:	20 5d       	subi	r18, 0xD0	; 208
				 }//EndFor j                
			   }//End else
			 }//EndFor

		  //Result[lenA]==Chr(zMin); ???
		  Result[lenA]=Chr(zMin);
    57d2:	de 01       	movw	r26, r28
    57d4:	dd 96       	adiw	r26, 0x3d	; 61
    57d6:	fd 01       	movw	r30, r26
    57d8:	e0 0f       	add	r30, r16
    57da:	f1 1f       	adc	r31, r17
    57dc:	20 83       	st	Z, r18
		  Result[lenA+1]=0;
    57de:	0c 0f       	add	r16, r28
    57e0:	1d 1f       	adc	r17, r29
    57e2:	f8 01       	movw	r30, r16
    57e4:	16 ae       	std	Z+62, r1	; 0x3e
		 FixLen=strlen(Result);
		 for(i=0;i<FixLen;i++){
		     strC[i]=Result[FixLen-i-1];
		 }strC[FixLen]=0;
*/
         FixLen=strlen(Result);
    57e6:	fd 01       	movw	r30, r26
    57e8:	01 90       	ld	r0, Z+
    57ea:	00 20       	and	r0, r0
    57ec:	e9 f7       	brne	.-6      	; 0x57e8 <StrCalc+0x4fa>
    57ee:	31 97       	sbiw	r30, 0x01	; 1
    57f0:	5e 2f       	mov	r21, r30
    57f2:	5a 1b       	sub	r21, r26
    57f4:	25 2f       	mov	r18, r21
    57f6:	30 e0       	ldi	r19, 0x00	; 0
    57f8:	21 50       	subi	r18, 0x01	; 1
    57fa:	30 40       	sbci	r19, 0x00	; 0
    57fc:	2a 0f       	add	r18, r26
    57fe:	3b 1f       	adc	r19, r27
    5800:	40 e0       	ldi	r20, 0x00	; 0
    5802:	90 e0       	ldi	r25, 0x00	; 0
		 iPos=0;
		 for(i=0;i<FixLen;i++){
		     if ((i==0)&&(IsNegative==True)){
			     strC[iPos]='-';
    5804:	6d e2       	ldi	r22, 0x2D	; 45
    5806:	16 c0       	rjmp	.+44     	; 0x5834 <StrCalc+0x546>
		 }strC[FixLen]=0;
*/
         FixLen=strlen(Result);
		 iPos=0;
		 for(i=0;i<FixLen;i++){
		     if ((i==0)&&(IsNegative==True)){
    5808:	44 23       	and	r20, r20
    580a:	51 f4       	brne	.+20     	; 0x5820 <StrCalc+0x532>
    580c:	63 96       	adiw	r28, 0x13	; 19
    580e:	ff ad       	ldd	r31, Y+63	; 0x3f
    5810:	63 97       	sbiw	r28, 0x13	; 19
    5812:	f1 30       	cpi	r31, 0x01	; 1
    5814:	29 f4       	brne	.+10     	; 0x5820 <StrCalc+0x532>
			     strC[iPos]='-';
    5816:	f5 01       	movw	r30, r10
    5818:	e9 0f       	add	r30, r25
    581a:	f1 1d       	adc	r31, r1
    581c:	60 83       	st	Z, r22
				 iPos++;
    581e:	9f 5f       	subi	r25, 0xFF	; 255
			 }
		     strC[iPos]=Result[FixLen-i-1];
    5820:	f5 01       	movw	r30, r10
    5822:	e9 0f       	add	r30, r25
    5824:	f1 1d       	adc	r31, r1
    5826:	d9 01       	movw	r26, r18
    5828:	8c 91       	ld	r24, X
    582a:	80 83       	st	Z, r24
			 iPos++;
    582c:	9f 5f       	subi	r25, 0xFF	; 255
		     strC[i]=Result[FixLen-i-1];
		 }strC[FixLen]=0;
*/
         FixLen=strlen(Result);
		 iPos=0;
		 for(i=0;i<FixLen;i++){
    582e:	4f 5f       	subi	r20, 0xFF	; 255
    5830:	21 50       	subi	r18, 0x01	; 1
    5832:	30 40       	sbci	r19, 0x00	; 0
    5834:	45 17       	cp	r20, r21
    5836:	40 f3       	brcs	.-48     	; 0x5808 <StrCalc+0x51a>
			     strC[iPos]='-';
				 iPos++;
			 }
		     strC[iPos]=Result[FixLen-i-1];
			 iPos++;
		 }strC[iPos]=0;
    5838:	f5 01       	movw	r30, r10
    583a:	e9 0f       	add	r30, r25
    583c:	f1 1d       	adc	r31, r1
    583e:	10 82       	st	Z, r1

       RemZeroLead(strC);
    5840:	c5 01       	movw	r24, r10
    5842:	0e 94 3f 25 	call	0x4a7e	; 0x4a7e <RemZeroLead>
  //    sprintf_P(strSend,PSTR("C':%s"),strC);
//	 uart_print(0,1,strSend);

	 }//EndIf 

	 if (TOperation==TMULTIPLY){
    5846:	b2 e0       	ldi	r27, 0x02	; 2
    5848:	6b 16       	cp	r6, r27
    584a:	e1 f4       	brne	.+56     	; 0x5884 <StrCalc+0x596>
		 valA=atol(strA);
		 valB=atol(strB);
		 valC=valA*valB;		 
         ltoa(valC,strC,10);
		 */
		 CalcMultiply(strA,strB,strC);
    584c:	67 96       	adiw	r28, 0x17	; 23
    584e:	8e ad       	ldd	r24, Y+62	; 0x3e
    5850:	9f ad       	ldd	r25, Y+63	; 0x3f
    5852:	67 97       	sbiw	r28, 0x17	; 23
    5854:	69 96       	adiw	r28, 0x19	; 25
    5856:	6e ad       	ldd	r22, Y+62	; 0x3e
    5858:	7f ad       	ldd	r23, Y+63	; 0x3f
    585a:	69 97       	sbiw	r28, 0x19	; 25
    585c:	a5 01       	movw	r20, r10
    585e:	0e 94 5b 2c 	call	0x58b6	; 0x58b6 <CalcMultiply>
    5862:	10 c0       	rjmp	.+32     	; 0x5884 <StrCalc+0x596>
	 }
}
    5864:	e1 e0       	ldi	r30, 0x01	; 1
    5866:	62 96       	adiw	r28, 0x12	; 18
    5868:	ef af       	std	Y+63, r30	; 0x3f
    586a:	62 97       	sbiw	r28, 0x12	; 18
    586c:	ac ce       	rjmp	.-680    	; 0x55c6 <StrCalc+0x2d8>
    586e:	63 96       	adiw	r28, 0x13	; 19
    5870:	1f ae       	std	Y+63, r1	; 0x3f
    5872:	63 97       	sbiw	r28, 0x13	; 19
    5874:	48 cf       	rjmp	.-368    	; 0x5706 <StrCalc+0x418>
    5876:	f1 e0       	ldi	r31, 0x01	; 1
    5878:	63 96       	adiw	r28, 0x13	; 19
    587a:	ff af       	std	Y+63, r31	; 0x3f
    587c:	63 97       	sbiw	r28, 0x13	; 19
    587e:	43 cf       	rjmp	.-378    	; 0x5706 <StrCalc+0x418>
    5880:	90 e0       	ldi	r25, 0x00	; 0
    5882:	8c cf       	rjmp	.-232    	; 0x579c <StrCalc+0x4ae>
    5884:	c8 5a       	subi	r28, 0xA8	; 168
    5886:	df 4f       	sbci	r29, 0xFF	; 255
    5888:	0f b6       	in	r0, 0x3f	; 63
    588a:	f8 94       	cli
    588c:	de bf       	out	0x3e, r29	; 62
    588e:	0f be       	out	0x3f, r0	; 63
    5890:	cd bf       	out	0x3d, r28	; 61
    5892:	cf 91       	pop	r28
    5894:	df 91       	pop	r29
    5896:	1f 91       	pop	r17
    5898:	0f 91       	pop	r16
    589a:	ff 90       	pop	r15
    589c:	ef 90       	pop	r14
    589e:	df 90       	pop	r13
    58a0:	cf 90       	pop	r12
    58a2:	bf 90       	pop	r11
    58a4:	af 90       	pop	r10
    58a6:	9f 90       	pop	r9
    58a8:	8f 90       	pop	r8
    58aa:	7f 90       	pop	r7
    58ac:	6f 90       	pop	r6
    58ae:	5f 90       	pop	r5
    58b0:	4f 90       	pop	r4
    58b2:	3f 90       	pop	r3
    58b4:	08 95       	ret

000058b6 <CalcMultiply>:
	 }
	 strResult[lenR]=0;
}


void CalcMultiply(char *strA,char *strB,char *strC){
    58b6:	4f 92       	push	r4
    58b8:	5f 92       	push	r5
    58ba:	6f 92       	push	r6
    58bc:	7f 92       	push	r7
    58be:	8f 92       	push	r8
    58c0:	9f 92       	push	r9
    58c2:	af 92       	push	r10
    58c4:	bf 92       	push	r11
    58c6:	cf 92       	push	r12
    58c8:	df 92       	push	r13
    58ca:	ef 92       	push	r14
    58cc:	ff 92       	push	r15
    58ce:	0f 93       	push	r16
    58d0:	1f 93       	push	r17
    58d2:	df 93       	push	r29
    58d4:	cf 93       	push	r28
    58d6:	cd b7       	in	r28, 0x3d	; 61
    58d8:	de b7       	in	r29, 0x3e	; 62
    58da:	a8 97       	sbiw	r28, 0x28	; 40
    58dc:	0f b6       	in	r0, 0x3f	; 63
    58de:	f8 94       	cli
    58e0:	de bf       	out	0x3e, r29	; 62
    58e2:	0f be       	out	0x3f, r0	; 63
    58e4:	cd bf       	out	0x3d, r28	; 61
    58e6:	3c 01       	movw	r6, r24
    58e8:	6b 01       	movw	r12, r22
    58ea:	2a 01       	movw	r4, r20
	 
	 */
	 char i,lenB;
	 char prevSeg[20],currSeg[20];

     RemZeroLead(strA);
    58ec:	0e 94 3f 25 	call	0x4a7e	; 0x4a7e <RemZeroLead>
     RemZeroLead(strB);
    58f0:	c6 01       	movw	r24, r12
    58f2:	0e 94 3f 25 	call	0x4a7e	; 0x4a7e <RemZeroLead>
	 lenB=strlen(strB);
    58f6:	d6 01       	movw	r26, r12
    58f8:	0d 90       	ld	r0, X+
    58fa:	00 20       	and	r0, r0
    58fc:	e9 f7       	brne	.-6      	; 0x58f8 <CalcMultiply+0x42>
    58fe:	11 97       	sbiw	r26, 0x01	; 1
    5900:	8a 2e       	mov	r8, r26
    5902:	8c 18       	sub	r8, r12
	 sprintf_P(prevSeg,PSTR("0"));
    5904:	00 d0       	rcall	.+0      	; 0x5906 <CalcMultiply+0x50>
    5906:	00 d0       	rcall	.+0      	; 0x5908 <CalcMultiply+0x52>
    5908:	8e 01       	movw	r16, r28
    590a:	0f 5f       	subi	r16, 0xFF	; 255
    590c:	1f 4f       	sbci	r17, 0xFF	; 255
    590e:	ad b7       	in	r26, 0x3d	; 61
    5910:	be b7       	in	r27, 0x3e	; 62
    5912:	12 96       	adiw	r26, 0x02	; 2
    5914:	1c 93       	st	X, r17
    5916:	0e 93       	st	-X, r16
    5918:	11 97       	sbiw	r26, 0x01	; 1
    591a:	8d e0       	ldi	r24, 0x0D	; 13
    591c:	97 e0       	ldi	r25, 0x07	; 7
    591e:	14 96       	adiw	r26, 0x04	; 4
    5920:	9c 93       	st	X, r25
    5922:	8e 93       	st	-X, r24
    5924:	13 97       	sbiw	r26, 0x03	; 3
    5926:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	 sprintf_P(currSeg,PSTR("0"));
    592a:	85 e1       	ldi	r24, 0x15	; 21
    592c:	e8 2e       	mov	r14, r24
    592e:	f1 2c       	mov	r15, r1
    5930:	ec 0e       	add	r14, r28
    5932:	fd 1e       	adc	r15, r29
    5934:	ed b7       	in	r30, 0x3d	; 61
    5936:	fe b7       	in	r31, 0x3e	; 62
    5938:	f2 82       	std	Z+2, r15	; 0x02
    593a:	e1 82       	std	Z+1, r14	; 0x01
    593c:	8b e0       	ldi	r24, 0x0B	; 11
    593e:	97 e0       	ldi	r25, 0x07	; 7
    5940:	94 83       	std	Z+4, r25	; 0x04
    5942:	83 83       	std	Z+3, r24	; 0x03
    5944:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
    5948:	bb 24       	eor	r11, r11
    594a:	0f 90       	pop	r0
    594c:	0f 90       	pop	r0
    594e:	0f 90       	pop	r0
    5950:	0f 90       	pop	r0
    5952:	a0 2e       	mov	r10, r16
    5954:	91 2e       	mov	r9, r17

	 for(i=0;i<strlen(strB);i++){
	     //
         CalcSegmen(strA,strB[lenB-1-i],currSeg);
    5956:	08 2d       	mov	r16, r8
    5958:	10 e0       	ldi	r17, 0x00	; 0
    595a:	01 50       	subi	r16, 0x01	; 1
    595c:	10 40       	sbci	r17, 0x00	; 0
    595e:	1f c0       	rjmp	.+62     	; 0x599e <CalcMultiply+0xe8>
    5960:	f8 01       	movw	r30, r16
    5962:	e8 1b       	sub	r30, r24
    5964:	f9 0b       	sbc	r31, r25
    5966:	ec 0d       	add	r30, r12
    5968:	fd 1d       	adc	r31, r13
    596a:	c3 01       	movw	r24, r6
    596c:	60 81       	ld	r22, Z
    596e:	a7 01       	movw	r20, r14
    5970:	0e 94 ca 22 	call	0x4594	; 0x4594 <CalcSegmen>
         AddZeroLag(currSeg,strlen(currSeg)+i);
    5974:	f7 01       	movw	r30, r14
    5976:	01 90       	ld	r0, Z+
    5978:	00 20       	and	r0, r0
    597a:	e9 f7       	brne	.-6      	; 0x5976 <CalcMultiply+0xc0>
    597c:	31 97       	sbiw	r30, 0x01	; 1
    597e:	ee 19       	sub	r30, r14
    5980:	ff 09       	sbc	r31, r15
    5982:	6b 2d       	mov	r22, r11
    5984:	6e 0f       	add	r22, r30
    5986:	c7 01       	movw	r24, r14
    5988:	0e 94 5c 29 	call	0x52b8	; 0x52b8 <AddZeroLag>
	     StrCalc(TPLUS,prevSeg,currSeg,prevSeg);
    598c:	81 e0       	ldi	r24, 0x01	; 1
    598e:	6a 2d       	mov	r22, r10
    5990:	79 2d       	mov	r23, r9
    5992:	a7 01       	movw	r20, r14
    5994:	2a 2d       	mov	r18, r10
    5996:	39 2d       	mov	r19, r9
    5998:	0e 94 77 29 	call	0x52ee	; 0x52ee <StrCalc>
     RemZeroLead(strB);
	 lenB=strlen(strB);
	 sprintf_P(prevSeg,PSTR("0"));
	 sprintf_P(currSeg,PSTR("0"));

	 for(i=0;i<strlen(strB);i++){
    599c:	b3 94       	inc	r11
    599e:	f6 01       	movw	r30, r12
    59a0:	01 90       	ld	r0, Z+
    59a2:	00 20       	and	r0, r0
    59a4:	e9 f7       	brne	.-6      	; 0x59a0 <CalcMultiply+0xea>
    59a6:	31 97       	sbiw	r30, 0x01	; 1
    59a8:	ec 19       	sub	r30, r12
    59aa:	fd 09       	sbc	r31, r13
    59ac:	8b 2d       	mov	r24, r11
    59ae:	90 e0       	ldi	r25, 0x00	; 0
    59b0:	8e 17       	cp	r24, r30
    59b2:	9f 07       	cpc	r25, r31
    59b4:	a8 f2       	brcs	.-86     	; 0x5960 <CalcMultiply+0xaa>
	     //
         CalcSegmen(strA,strB[lenB-1-i],currSeg);
         AddZeroLag(currSeg,strlen(currSeg)+i);
	     StrCalc(TPLUS,prevSeg,currSeg,prevSeg);
	 }
	 sprintf_P(strC,PSTR("%s"),prevSeg);
    59b6:	00 d0       	rcall	.+0      	; 0x59b8 <CalcMultiply+0x102>
    59b8:	00 d0       	rcall	.+0      	; 0x59ba <CalcMultiply+0x104>
    59ba:	00 d0       	rcall	.+0      	; 0x59bc <CalcMultiply+0x106>
    59bc:	ed b7       	in	r30, 0x3d	; 61
    59be:	fe b7       	in	r31, 0x3e	; 62
    59c0:	31 96       	adiw	r30, 0x01	; 1
    59c2:	ad b7       	in	r26, 0x3d	; 61
    59c4:	be b7       	in	r27, 0x3e	; 62
    59c6:	12 96       	adiw	r26, 0x02	; 2
    59c8:	5c 92       	st	X, r5
    59ca:	4e 92       	st	-X, r4
    59cc:	11 97       	sbiw	r26, 0x01	; 1
    59ce:	88 e0       	ldi	r24, 0x08	; 8
    59d0:	97 e0       	ldi	r25, 0x07	; 7
    59d2:	93 83       	std	Z+3, r25	; 0x03
    59d4:	82 83       	std	Z+2, r24	; 0x02
    59d6:	a4 82       	std	Z+4, r10	; 0x04
    59d8:	95 82       	std	Z+5, r9	; 0x05
    59da:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
    59de:	ed b7       	in	r30, 0x3d	; 61
    59e0:	fe b7       	in	r31, 0x3e	; 62
    59e2:	36 96       	adiw	r30, 0x06	; 6
    59e4:	0f b6       	in	r0, 0x3f	; 63
    59e6:	f8 94       	cli
    59e8:	fe bf       	out	0x3e, r31	; 62
    59ea:	0f be       	out	0x3f, r0	; 63
    59ec:	ed bf       	out	0x3d, r30	; 61
}
    59ee:	a8 96       	adiw	r28, 0x28	; 40
    59f0:	0f b6       	in	r0, 0x3f	; 63
    59f2:	f8 94       	cli
    59f4:	de bf       	out	0x3e, r29	; 62
    59f6:	0f be       	out	0x3f, r0	; 63
    59f8:	cd bf       	out	0x3d, r28	; 61
    59fa:	cf 91       	pop	r28
    59fc:	df 91       	pop	r29
    59fe:	1f 91       	pop	r17
    5a00:	0f 91       	pop	r16
    5a02:	ff 90       	pop	r15
    5a04:	ef 90       	pop	r14
    5a06:	df 90       	pop	r13
    5a08:	cf 90       	pop	r12
    5a0a:	bf 90       	pop	r11
    5a0c:	af 90       	pop	r10
    5a0e:	9f 90       	pop	r9
    5a10:	8f 90       	pop	r8
    5a12:	7f 90       	pop	r7
    5a14:	6f 90       	pop	r6
    5a16:	5f 90       	pop	r5
    5a18:	4f 90       	pop	r4
    5a1a:	08 95       	ret

00005a1c <NormalizeOverflow>:
		 Length=strlen(strNumber);
		 StrPosCopy(strNumber,strNumber,MinPos,(Length-MinPos));	      
	 }
}

void NormalizeOverflow(char *strOverflowed){
    5a1c:	cf 92       	push	r12
    5a1e:	df 92       	push	r13
    5a20:	ef 92       	push	r14
    5a22:	ff 92       	push	r15
    5a24:	0f 93       	push	r16
    5a26:	1f 93       	push	r17
    5a28:	df 93       	push	r29
    5a2a:	cf 93       	push	r28
    5a2c:	cd b7       	in	r28, 0x3d	; 61
    5a2e:	de b7       	in	r29, 0x3e	; 62
    5a30:	64 97       	sbiw	r28, 0x14	; 20
    5a32:	0f b6       	in	r0, 0x3f	; 63
    5a34:	f8 94       	cli
    5a36:	de bf       	out	0x3e, r29	; 62
    5a38:	0f be       	out	0x3f, r0	; 63
    5a3a:	cd bf       	out	0x3d, r28	; 61
    5a3c:	d8 2e       	mov	r13, r24
    5a3e:	c9 2e       	mov	r12, r25
char i,Length,strMaxValue[20];//-99999999

     Length=strlen(strOverflowed);//-999453
    5a40:	a8 2f       	mov	r26, r24
    5a42:	b9 2f       	mov	r27, r25
    5a44:	fd 01       	movw	r30, r26
    5a46:	01 90       	ld	r0, Z+
    5a48:	00 20       	and	r0, r0
    5a4a:	e9 f7       	brne	.-6      	; 0x5a46 <NormalizeOverflow+0x2a>
    5a4c:	31 97       	sbiw	r30, 0x01	; 1
    5a4e:	4e 2f       	mov	r20, r30
    5a50:	48 1b       	sub	r20, r24
    5a52:	20 e0       	ldi	r18, 0x00	; 0
    5a54:	30 e0       	ldi	r19, 0x00	; 0
    5a56:	7e 01       	movw	r14, r28
    5a58:	08 94       	sec
    5a5a:	e1 1c       	adc	r14, r1
    5a5c:	f1 1c       	adc	r15, r1
    5a5e:	04 2f       	mov	r16, r20
    5a60:	10 e0       	ldi	r17, 0x00	; 0
    5a62:	0e c0       	rjmp	.+28     	; 0x5a80 <NormalizeOverflow+0x64>
     for(i=0;i<Length;i++){//123456
	     strMaxValue[i]='0'+((Length-i)/Length);
    5a64:	f7 01       	movw	r30, r14
    5a66:	e2 0f       	add	r30, r18
    5a68:	f3 1f       	adc	r31, r19
    5a6a:	c8 01       	movw	r24, r16
    5a6c:	82 1b       	sub	r24, r18
    5a6e:	93 0b       	sbc	r25, r19
    5a70:	64 2f       	mov	r22, r20
    5a72:	70 e0       	ldi	r23, 0x00	; 0
    5a74:	0e 94 79 aa 	call	0x154f2	; 0x154f2 <__divmodhi4>
    5a78:	60 5d       	subi	r22, 0xD0	; 208
    5a7a:	60 83       	st	Z, r22
    5a7c:	2f 5f       	subi	r18, 0xFF	; 255
    5a7e:	3f 4f       	sbci	r19, 0xFF	; 255

void NormalizeOverflow(char *strOverflowed){
char i,Length,strMaxValue[20];//-99999999

     Length=strlen(strOverflowed);//-999453
     for(i=0;i<Length;i++){//123456
    5a80:	24 17       	cp	r18, r20
    5a82:	80 f3       	brcs	.-32     	; 0x5a64 <NormalizeOverflow+0x48>
	     strMaxValue[i]='0'+((Length-i)/Length);
	 }strMaxValue[Length]=0;
    5a84:	0e 0d       	add	r16, r14
    5a86:	1f 1d       	adc	r17, r15
    5a88:	f8 01       	movw	r30, r16
    5a8a:	10 82       	st	Z, r1
     
	 //if (NinePos<Length-4)
	 StrCalc(TPLUS,strMaxValue,strOverflowed,strOverflowed);
    5a8c:	81 e0       	ldi	r24, 0x01	; 1
    5a8e:	b7 01       	movw	r22, r14
    5a90:	4d 2d       	mov	r20, r13
    5a92:	5c 2d       	mov	r21, r12
    5a94:	2d 2d       	mov	r18, r13
    5a96:	3c 2d       	mov	r19, r12
    5a98:	0e 94 77 29 	call	0x52ee	; 0x52ee <StrCalc>
}
    5a9c:	64 96       	adiw	r28, 0x14	; 20
    5a9e:	0f b6       	in	r0, 0x3f	; 63
    5aa0:	f8 94       	cli
    5aa2:	de bf       	out	0x3e, r29	; 62
    5aa4:	0f be       	out	0x3f, r0	; 63
    5aa6:	cd bf       	out	0x3d, r28	; 61
    5aa8:	cf 91       	pop	r28
    5aaa:	df 91       	pop	r29
    5aac:	1f 91       	pop	r17
    5aae:	0f 91       	pop	r16
    5ab0:	ff 90       	pop	r15
    5ab2:	ef 90       	pop	r14
    5ab4:	df 90       	pop	r13
    5ab6:	cf 90       	pop	r12
    5ab8:	08 95       	ret

00005aba <AddSpaceLead>:
	    String[i]=' ';
	 }String[Size]=0;
  }
}

void AddSpaceLead(char *String,unsigned char Size){//
    5aba:	bf 92       	push	r11
    5abc:	cf 92       	push	r12
    5abe:	df 92       	push	r13
    5ac0:	ef 92       	push	r14
    5ac2:	ff 92       	push	r15
    5ac4:	0f 93       	push	r16
    5ac6:	1f 93       	push	r17
    5ac8:	df 93       	push	r29
    5aca:	cf 93       	push	r28
    5acc:	cd b7       	in	r28, 0x3d	; 61
    5ace:	de b7       	in	r29, 0x3e	; 62
    5ad0:	e2 97       	sbiw	r28, 0x32	; 50
    5ad2:	0f b6       	in	r0, 0x3f	; 63
    5ad4:	f8 94       	cli
    5ad6:	de bf       	out	0x3e, r29	; 62
    5ad8:	0f be       	out	0x3f, r0	; 63
    5ada:	cd bf       	out	0x3d, r28	; 61
    5adc:	8c 01       	movw	r16, r24
     char i,Length,strAdded[50];
     Length=strlen(String);
    5ade:	fc 01       	movw	r30, r24
    5ae0:	01 90       	ld	r0, Z+
    5ae2:	00 20       	and	r0, r0
    5ae4:	e9 f7       	brne	.-6      	; 0x5ae0 <AddSpaceLead+0x26>
    5ae6:	31 97       	sbiw	r30, 0x01	; 1
    5ae8:	2e 2f       	mov	r18, r30
    5aea:	28 1b       	sub	r18, r24

	 if (Size>Length){
    5aec:	26 17       	cp	r18, r22
    5aee:	e0 f5       	brcc	.+120    	; 0x5b68 <AddSpaceLead+0xae>
    5af0:	7e 01       	movw	r14, r28
    5af2:	08 94       	sec
    5af4:	e1 1c       	adc	r14, r1
    5af6:	f1 1c       	adc	r15, r1
    5af8:	f7 01       	movw	r30, r14
	    String[i]=' ';
	 }String[Size]=0;
  }
}

void AddSpaceLead(char *String,unsigned char Size){//
    5afa:	be 2c       	mov	r11, r14
     char i,Length,strAdded[50];
     Length=strlen(String);

	 if (Size>Length){
         for(i=0;i<Size;i++){
	         strAdded[i]=' ';
    5afc:	90 e2       	ldi	r25, 0x20	; 32
    5afe:	01 c0       	rjmp	.+2      	; 0x5b02 <AddSpaceLead+0x48>
    5b00:	91 93       	st	Z+, r25
void AddSpaceLead(char *String,unsigned char Size){//
     char i,Length,strAdded[50];
     Length=strlen(String);

	 if (Size>Length){
         for(i=0;i<Size;i++){
    5b02:	8e 2f       	mov	r24, r30
    5b04:	8b 19       	sub	r24, r11
    5b06:	86 17       	cp	r24, r22
    5b08:	d8 f3       	brcs	.-10     	; 0x5b00 <AddSpaceLead+0x46>
	         strAdded[i]=' ';
	     }strAdded[Size]=0;
    5b0a:	46 2f       	mov	r20, r22
    5b0c:	50 e0       	ldi	r21, 0x00	; 0
    5b0e:	ce 01       	movw	r24, r28
    5b10:	01 96       	adiw	r24, 0x01	; 1
    5b12:	fc 01       	movw	r30, r24
    5b14:	e4 0f       	add	r30, r20
    5b16:	f5 1f       	adc	r31, r21
    5b18:	10 82       	st	Z, r1
	     //Copy
         for(i=(Size-Length);i<Size;i++){
    5b1a:	76 2f       	mov	r23, r22
    5b1c:	72 1b       	sub	r23, r18
    5b1e:	6c 01       	movw	r12, r24
	         strAdded[i]=String[i-(Size-Length)];
    5b20:	30 e0       	ldi	r19, 0x00	; 0
    5b22:	24 1b       	sub	r18, r20
    5b24:	35 0b       	sbc	r19, r21
    5b26:	0c c0       	rjmp	.+24     	; 0x5b40 <AddSpaceLead+0x86>
    5b28:	e7 2f       	mov	r30, r23
    5b2a:	f0 e0       	ldi	r31, 0x00	; 0
    5b2c:	d6 01       	movw	r26, r12
    5b2e:	ae 0f       	add	r26, r30
    5b30:	bf 1f       	adc	r27, r31
    5b32:	e0 0f       	add	r30, r16
    5b34:	f1 1f       	adc	r31, r17
    5b36:	e2 0f       	add	r30, r18
    5b38:	f3 1f       	adc	r31, r19
    5b3a:	80 81       	ld	r24, Z
    5b3c:	8c 93       	st	X, r24
	 if (Size>Length){
         for(i=0;i<Size;i++){
	         strAdded[i]=' ';
	     }strAdded[Size]=0;
	     //Copy
         for(i=(Size-Length);i<Size;i++){
    5b3e:	7f 5f       	subi	r23, 0xFF	; 255
    5b40:	76 17       	cp	r23, r22
    5b42:	90 f3       	brcs	.-28     	; 0x5b28 <AddSpaceLead+0x6e>
	         strAdded[i]=String[i-(Size-Length)];
	     }strAdded[Size]=0;
    5b44:	4c 0d       	add	r20, r12
    5b46:	5d 1d       	adc	r21, r13
    5b48:	da 01       	movw	r26, r20
    5b4a:	1c 92       	st	X, r1
    5b4c:	f8 01       	movw	r30, r16
    5b4e:	04 c0       	rjmp	.+8      	; 0x5b58 <AddSpaceLead+0x9e>
	     //Spaced
         for(i=0;i<Size;i++){
	         String[i]=strAdded[i];
    5b50:	d7 01       	movw	r26, r14
    5b52:	8d 91       	ld	r24, X+
    5b54:	7d 01       	movw	r14, r26
    5b56:	81 93       	st	Z+, r24
	     //Copy
         for(i=(Size-Length);i<Size;i++){
	         strAdded[i]=String[i-(Size-Length)];
	     }strAdded[Size]=0;
	     //Spaced
         for(i=0;i<Size;i++){
    5b58:	8e 2d       	mov	r24, r14
    5b5a:	8b 19       	sub	r24, r11
    5b5c:	86 17       	cp	r24, r22
    5b5e:	c0 f3       	brcs	.-16     	; 0x5b50 <AddSpaceLead+0x96>
	         String[i]=strAdded[i];
	     }String[Size]=0;
    5b60:	06 0f       	add	r16, r22
    5b62:	11 1d       	adc	r17, r1
    5b64:	f8 01       	movw	r30, r16
    5b66:	10 82       	st	Z, r1
	 }
}
    5b68:	e2 96       	adiw	r28, 0x32	; 50
    5b6a:	0f b6       	in	r0, 0x3f	; 63
    5b6c:	f8 94       	cli
    5b6e:	de bf       	out	0x3e, r29	; 62
    5b70:	0f be       	out	0x3f, r0	; 63
    5b72:	cd bf       	out	0x3d, r28	; 61
    5b74:	cf 91       	pop	r28
    5b76:	df 91       	pop	r29
    5b78:	1f 91       	pop	r17
    5b7a:	0f 91       	pop	r16
    5b7c:	ff 90       	pop	r15
    5b7e:	ef 90       	pop	r14
    5b80:	df 90       	pop	r13
    5b82:	cf 90       	pop	r12
    5b84:	bf 90       	pop	r11
    5b86:	08 95       	ret

00005b88 <AddSpaceLag>:
	 }
}



void AddSpaceLag(char *String,unsigned char Size){// [CREDITCARD             ]
    5b88:	cf 93       	push	r28
    5b8a:	df 93       	push	r29
    5b8c:	ec 01       	movw	r28, r24
char i,Length;
     Length=strlen(String);
    5b8e:	dc 01       	movw	r26, r24
    5b90:	0d 90       	ld	r0, X+
    5b92:	00 20       	and	r0, r0
    5b94:	e9 f7       	brne	.-6      	; 0x5b90 <AddSpaceLag+0x8>
    5b96:	11 97       	sbiw	r26, 0x01	; 1
    5b98:	a8 1b       	sub	r26, r24
    5b9a:	b9 0b       	sbc	r27, r25
  if (Length<Size){   
    5b9c:	a6 17       	cp	r26, r22
    5b9e:	60 f4       	brcc	.+24     	; 0x5bb8 <AddSpaceLag+0x30>
    5ba0:	8a 2f       	mov	r24, r26
     for(i=Length;i<Size;i++){
	    String[i]=' ';
    5ba2:	90 e2       	ldi	r25, 0x20	; 32
    5ba4:	fe 01       	movw	r30, r28
    5ba6:	e8 0f       	add	r30, r24
    5ba8:	f1 1d       	adc	r31, r1
    5baa:	90 83       	st	Z, r25

void AddSpaceLag(char *String,unsigned char Size){// [CREDITCARD             ]
char i,Length;
     Length=strlen(String);
  if (Length<Size){   
     for(i=Length;i<Size;i++){
    5bac:	8f 5f       	subi	r24, 0xFF	; 255
    5bae:	86 17       	cp	r24, r22
    5bb0:	c8 f3       	brcs	.-14     	; 0x5ba4 <AddSpaceLag+0x1c>
	    String[i]=' ';
	 }String[Size]=0;
    5bb2:	c6 0f       	add	r28, r22
    5bb4:	d1 1d       	adc	r29, r1
    5bb6:	18 82       	st	Y, r1
  }
}
    5bb8:	df 91       	pop	r29
    5bba:	cf 91       	pop	r28
    5bbc:	08 95       	ret

00005bbe <GetProductName>:
	 }    
	 //Clear Decimal

}

void GetProductName(char GradeId,char *strProductName){
    5bbe:	0f 93       	push	r16
    5bc0:	1f 93       	push	r17
    5bc2:	df 93       	push	r29
    5bc4:	cf 93       	push	r28
    5bc6:	cd b7       	in	r28, 0x3d	; 61
    5bc8:	de b7       	in	r29, 0x3e	; 62
    5bca:	2c 97       	sbiw	r28, 0x0c	; 12
    5bcc:	0f b6       	in	r0, 0x3f	; 63
    5bce:	f8 94       	cli
    5bd0:	de bf       	out	0x3e, r29	; 62
    5bd2:	0f be       	out	0x3f, r0	; 63
    5bd4:	cd bf       	out	0x3d, r28	; 61
    5bd6:	48 2f       	mov	r20, r24
    5bd8:	8b 01       	movw	r16, r22
    5bda:	fe 01       	movw	r30, r28
    5bdc:	31 96       	adiw	r30, 0x01	; 1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    5bde:	9e 01       	movw	r18, r28
    5be0:	23 5f       	subi	r18, 0xF3	; 243
    5be2:	3f 4f       	sbci	r19, 0xFF	; 255
	     strMemory[i]=data;
    5be4:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    5be6:	e2 17       	cp	r30, r18
    5be8:	f3 07       	cpc	r31, r19
    5bea:	e1 f7       	brne	.-8      	; 0x5be4 <GetProductName+0x26>
    5bec:	ce 01       	movw	r24, r28
    5bee:	01 96       	adiw	r24, 0x01	; 1

void GetProductName(char GradeId,char *strProductName){
char SProductName[12],i,Length;
     FillChar(SProductName,sizeof(SProductName),0); 
	 //eeprom_read_block((void*) &SProductName, (const void*) &DefProductName[GradeId-1],10);
	 if (GradeId>0) eeprom_read_block((void*) &SProductName, (const void*) &DefProductName[GradeId-1],10);
    5bf0:	44 23       	and	r20, r20
    5bf2:	59 f0       	breq	.+22     	; 0x5c0a <GetProductName+0x4c>
    5bf4:	6d e0       	ldi	r22, 0x0D	; 13
    5bf6:	46 9f       	mul	r20, r22
    5bf8:	b0 01       	movw	r22, r0
    5bfa:	11 24       	eor	r1, r1
    5bfc:	61 55       	subi	r22, 0x51	; 81
    5bfe:	7f 4f       	sbci	r23, 0xFF	; 255
    5c00:	4a e0       	ldi	r20, 0x0A	; 10
    5c02:	50 e0       	ldi	r21, 0x00	; 0
    5c04:	0e 94 1b ad 	call	0x15a36	; 0x15a36 <__eerd_block_m128>
    5c08:	14 c0       	rjmp	.+40     	; 0x5c32 <GetProductName+0x74>
	 else sprintf_P(SProductName,PSTR("N/A"));
    5c0a:	00 d0       	rcall	.+0      	; 0x5c0c <GetProductName+0x4e>
    5c0c:	00 d0       	rcall	.+0      	; 0x5c0e <GetProductName+0x50>
    5c0e:	ad b7       	in	r26, 0x3d	; 61
    5c10:	be b7       	in	r27, 0x3e	; 62
    5c12:	12 96       	adiw	r26, 0x02	; 2
    5c14:	9c 93       	st	X, r25
    5c16:	8e 93       	st	-X, r24
    5c18:	11 97       	sbiw	r26, 0x01	; 1
    5c1a:	8f e5       	ldi	r24, 0x5F	; 95
    5c1c:	95 e0       	ldi	r25, 0x05	; 5
    5c1e:	14 96       	adiw	r26, 0x04	; 4
    5c20:	9c 93       	st	X, r25
    5c22:	8e 93       	st	-X, r24
    5c24:	13 97       	sbiw	r26, 0x03	; 3
    5c26:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
    5c2a:	0f 90       	pop	r0
    5c2c:	0f 90       	pop	r0
    5c2e:	0f 90       	pop	r0
    5c30:	0f 90       	pop	r0

     Length=strlen(SProductName);
    5c32:	de 01       	movw	r26, r28
    5c34:	11 96       	adiw	r26, 0x01	; 1
    5c36:	fd 01       	movw	r30, r26
    5c38:	01 90       	ld	r0, Z+
    5c3a:	00 20       	and	r0, r0
    5c3c:	e9 f7       	brne	.-6      	; 0x5c38 <GetProductName+0x7a>
    5c3e:	31 97       	sbiw	r30, 0x01	; 1
    5c40:	ea 1b       	sub	r30, r26
    5c42:	eb 30       	cpi	r30, 0x0B	; 11
    5c44:	08 f0       	brcs	.+2      	; 0x5c48 <GetProductName+0x8a>
    5c46:	ea e0       	ldi	r30, 0x0A	; 10
    5c48:	ae 01       	movw	r20, r28
    5c4a:	4f 5f       	subi	r20, 0xFF	; 255
    5c4c:	5f 4f       	sbci	r21, 0xFF	; 255
    5c4e:	98 01       	movw	r18, r16
    5c50:	ba 01       	movw	r22, r20
    5c52:	06 c0       	rjmp	.+12     	; 0x5c60 <GetProductName+0xa2>
	 if (Length>10)Length=10;

	 for(i=0;i<Length;i++){
	     strProductName[i]=SProductName[i];
    5c54:	db 01       	movw	r26, r22
    5c56:	8d 91       	ld	r24, X+
    5c58:	bd 01       	movw	r22, r26
    5c5a:	d9 01       	movw	r26, r18
    5c5c:	8d 93       	st	X+, r24
    5c5e:	9d 01       	movw	r18, r26
	 else sprintf_P(SProductName,PSTR("N/A"));

     Length=strlen(SProductName);
	 if (Length>10)Length=10;

	 for(i=0;i<Length;i++){
    5c60:	86 2f       	mov	r24, r22
    5c62:	84 1b       	sub	r24, r20
    5c64:	8e 17       	cp	r24, r30
    5c66:	b0 f3       	brcs	.-20     	; 0x5c54 <GetProductName+0x96>
	     strProductName[i]=SProductName[i];
	 }strProductName[Length]=0;
    5c68:	c8 01       	movw	r24, r16
    5c6a:	8e 0f       	add	r24, r30
    5c6c:	91 1d       	adc	r25, r1
    5c6e:	fc 01       	movw	r30, r24
    5c70:	10 82       	st	Z, r1

	 AddSpaceLag(strProductName,10);
    5c72:	c8 01       	movw	r24, r16
    5c74:	6a e0       	ldi	r22, 0x0A	; 10
    5c76:	0e 94 c4 2d 	call	0x5b88	; 0x5b88 <AddSpaceLag>
}
    5c7a:	2c 96       	adiw	r28, 0x0c	; 12
    5c7c:	0f b6       	in	r0, 0x3f	; 63
    5c7e:	f8 94       	cli
    5c80:	de bf       	out	0x3e, r29	; 62
    5c82:	0f be       	out	0x3f, r0	; 63
    5c84:	cd bf       	out	0x3d, r28	; 61
    5c86:	cf 91       	pop	r28
    5c88:	df 91       	pop	r29
    5c8a:	1f 91       	pop	r17
    5c8c:	0f 91       	pop	r16
    5c8e:	08 95       	ret

00005c90 <GeniusSendLastTransaction>:
}
void GeniusSendPumpPreset(char iPumpID){
}


void GeniusSendLastTransaction(char iPumpID){
    5c90:	2f 92       	push	r2
    5c92:	3f 92       	push	r3
    5c94:	4f 92       	push	r4
    5c96:	5f 92       	push	r5
    5c98:	6f 92       	push	r6
    5c9a:	7f 92       	push	r7
    5c9c:	8f 92       	push	r8
    5c9e:	9f 92       	push	r9
    5ca0:	af 92       	push	r10
    5ca2:	bf 92       	push	r11
    5ca4:	cf 92       	push	r12
    5ca6:	df 92       	push	r13
    5ca8:	ef 92       	push	r14
    5caa:	ff 92       	push	r15
    5cac:	0f 93       	push	r16
    5cae:	1f 93       	push	r17
    5cb0:	df 93       	push	r29
    5cb2:	cf 93       	push	r28
    5cb4:	cd b7       	in	r28, 0x3d	; 61
    5cb6:	de b7       	in	r29, 0x3e	; 62
    5cb8:	c0 5b       	subi	r28, 0xB0	; 176
    5cba:	d0 40       	sbci	r29, 0x00	; 0
    5cbc:	0f b6       	in	r0, 0x3f	; 63
    5cbe:	f8 94       	cli
    5cc0:	de bf       	out	0x3e, r29	; 62
    5cc2:	0f be       	out	0x3f, r0	; 63
    5cc4:	cd bf       	out	0x3d, r28	; 61
    5cc6:	e8 2e       	mov	r14, r24
    5cc8:	fe 01       	movw	r30, r28
    5cca:	37 96       	adiw	r30, 0x07	; 7

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    5ccc:	ce 01       	movw	r24, r28
    5cce:	46 96       	adiw	r24, 0x16	; 22
	     strMemory[i]=data;
    5cd0:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    5cd2:	e8 17       	cp	r30, r24
    5cd4:	f9 07       	cpc	r31, r25
    5cd6:	e1 f7       	brne	.-8      	; 0x5cd0 <GeniusSendLastTransaction+0x40>
	     strMemory[i]=data;
    5cd8:	ce 01       	movw	r24, r28
    5cda:	85 96       	adiw	r24, 0x25	; 37
    5cdc:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    5cde:	e8 17       	cp	r30, r24
    5ce0:	f9 07       	cpc	r31, r25
    5ce2:	e1 f7       	brne	.-8      	; 0x5cdc <GeniusSendLastTransaction+0x4c>
	     strMemory[i]=data;
    5ce4:	ce 01       	movw	r24, r28
    5ce6:	c4 96       	adiw	r24, 0x34	; 52
    5ce8:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    5cea:	e8 17       	cp	r30, r24
    5cec:	f9 07       	cpc	r31, r25
    5cee:	e1 f7       	brne	.-8      	; 0x5ce8 <GeniusSendLastTransaction+0x58>
	     strMemory[i]=data;
    5cf0:	cf 01       	movw	r24, r30
    5cf2:	3f 01       	movw	r6, r30
    5cf4:	0f 96       	adiw	r24, 0x0f	; 15
    5cf6:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    5cf8:	e8 17       	cp	r30, r24
    5cfa:	f9 07       	cpc	r31, r25
    5cfc:	e1 f7       	brne	.-8      	; 0x5cf6 <GeniusSendLastTransaction+0x66>
	 FillChar(STotalVolume,sizeof(STotalVolume),0);
	 FillChar(STotalMoney,sizeof(STotalMoney),0);
	      

	 //Generate
	 FIPAddr=GetFIPAddr(iPumpID);
    5cfe:	8e 2d       	mov	r24, r14
    5d00:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <GetFIPAddr>
     eeprom_read_block((void*) &PProductID, (const void*) &DefNozzleMap[FIPAddr-1], 6);
    5d04:	96 e0       	ldi	r25, 0x06	; 6
    5d06:	89 9f       	mul	r24, r25
    5d08:	b0 01       	movw	r22, r0
    5d0a:	11 24       	eor	r1, r1
    5d0c:	60 5b       	subi	r22, 0xB0	; 176
    5d0e:	7f 4f       	sbci	r23, 0xFF	; 255
    5d10:	8e 01       	movw	r16, r28
    5d12:	0f 5f       	subi	r16, 0xFF	; 255
    5d14:	1f 4f       	sbci	r17, 0xFF	; 255
    5d16:	c8 01       	movw	r24, r16
    5d18:	46 e0       	ldi	r20, 0x06	; 6
    5d1a:	50 e0       	ldi	r21, 0x00	; 0
    5d1c:	0e 94 1b ad 	call	0x15a36	; 0x15a36 <__eerd_block_m128>
	 iNozzle=RecPumpData[iPumpID&0x0F].Grade;
    5d20:	2e 2c       	mov	r2, r14
    5d22:	33 24       	eor	r3, r3
    5d24:	91 01       	movw	r18, r2
    5d26:	2f 70       	andi	r18, 0x0F	; 15
    5d28:	30 70       	andi	r19, 0x00	; 0
    5d2a:	85 e3       	ldi	r24, 0x35	; 53
    5d2c:	90 e0       	ldi	r25, 0x00	; 0
    5d2e:	28 9f       	mul	r18, r24
    5d30:	f0 01       	movw	r30, r0
    5d32:	29 9f       	mul	r18, r25
    5d34:	f0 0d       	add	r31, r0
    5d36:	38 9f       	mul	r19, r24
    5d38:	f0 0d       	add	r31, r0
    5d3a:	11 24       	eor	r1, r1
    5d3c:	e6 5d       	subi	r30, 0xD6	; 214
    5d3e:	f9 4f       	sbci	r31, 0xF9	; 249
    5d40:	f0 80       	ld	r15, Z
	 iProdID=PProductID[iNozzle];
    5d42:	4f 2c       	mov	r4, r15
    5d44:	55 24       	eor	r5, r5

	 GetProductName(iProdID,strProduct);
    5d46:	04 0d       	add	r16, r4
    5d48:	15 1d       	adc	r17, r5
    5d4a:	d8 01       	movw	r26, r16
    5d4c:	8c 91       	ld	r24, X
    5d4e:	60 ee       	ldi	r22, 0xE0	; 224
    5d50:	77 e0       	ldi	r23, 0x07	; 7
    5d52:	0e 94 df 2d 	call	0x5bbe	; 0x5bbe <GetProductName>
	 GetTransactionVolume(iPumpID,SVolume);
    5d56:	47 e0       	ldi	r20, 0x07	; 7
    5d58:	84 2e       	mov	r8, r20
    5d5a:	91 2c       	mov	r9, r1
    5d5c:	8c 0e       	add	r8, r28
    5d5e:	9d 1e       	adc	r9, r29
    5d60:	8e 2d       	mov	r24, r14
    5d62:	b4 01       	movw	r22, r8
    5d64:	0e 94 98 27 	call	0x4f30	; 0x4f30 <GetTransactionVolume>
	 GetTransactionMoney(iPumpID,SMoney);
    5d68:	36 e1       	ldi	r19, 0x16	; 22
    5d6a:	a3 2e       	mov	r10, r19
    5d6c:	b1 2c       	mov	r11, r1
    5d6e:	ac 0e       	add	r10, r28
    5d70:	bd 1e       	adc	r11, r29
    5d72:	8e 2d       	mov	r24, r14
    5d74:	b5 01       	movw	r22, r10
    5d76:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <GetTransactionMoney>
	 GetTotalizerVolume(iPumpID,iNozzle,STotalVolume);
    5d7a:	25 e2       	ldi	r18, 0x25	; 37
    5d7c:	c2 2e       	mov	r12, r18
    5d7e:	d1 2c       	mov	r13, r1
    5d80:	cc 0e       	add	r12, r28
    5d82:	dd 1e       	adc	r13, r29
    5d84:	8e 2d       	mov	r24, r14
    5d86:	6f 2d       	mov	r22, r15
    5d88:	a6 01       	movw	r20, r12
    5d8a:	0e 94 41 27 	call	0x4e82	; 0x4e82 <GetTotalizerVolume>
	 GetTotalizerMoney(iPumpID,iNozzle,STotalMoney);
    5d8e:	8e 2d       	mov	r24, r14
    5d90:	6f 2d       	mov	r22, r15
    5d92:	a3 01       	movw	r20, r6
    5d94:	0e 94 24 27 	call	0x4e48	; 0x4e48 <GetTotalizerMoney>
	 
     ComposeDatetime(SDatetime);
    5d98:	93 e4       	ldi	r25, 0x43	; 67
    5d9a:	e9 2e       	mov	r14, r25
    5d9c:	f1 2c       	mov	r15, r1
    5d9e:	ec 0e       	add	r14, r28
    5da0:	fd 1e       	adc	r15, r29
    5da2:	c7 01       	movw	r24, r14
    5da4:	0e 94 03 1b 	call	0x3606	; 0x3606 <ComposeDatetime>

	 //Compose
	 sprintf_P(strSend,PSTR("T%.2d%.2d%s%s%s%s%s%s:"),iPumpID,iNozzle,strProduct,SDatetime,SVolume,SMoney,STotalVolume,STotalMoney);
    5da8:	ed b7       	in	r30, 0x3d	; 61
    5daa:	fe b7       	in	r31, 0x3e	; 62
    5dac:	74 97       	sbiw	r30, 0x14	; 20
    5dae:	0f b6       	in	r0, 0x3f	; 63
    5db0:	f8 94       	cli
    5db2:	fe bf       	out	0x3e, r31	; 62
    5db4:	0f be       	out	0x3f, r0	; 63
    5db6:	ed bf       	out	0x3d, r30	; 61
    5db8:	31 96       	adiw	r30, 0x01	; 1
    5dba:	8e 01       	movw	r16, r28
    5dbc:	09 5a       	subi	r16, 0xA9	; 169
    5dbe:	1f 4f       	sbci	r17, 0xFF	; 255
    5dc0:	ad b7       	in	r26, 0x3d	; 61
    5dc2:	be b7       	in	r27, 0x3e	; 62
    5dc4:	12 96       	adiw	r26, 0x02	; 2
    5dc6:	1c 93       	st	X, r17
    5dc8:	0e 93       	st	-X, r16
    5dca:	11 97       	sbiw	r26, 0x01	; 1
    5dcc:	8e e1       	ldi	r24, 0x1E	; 30
    5dce:	95 e0       	ldi	r25, 0x05	; 5
    5dd0:	93 83       	std	Z+3, r25	; 0x03
    5dd2:	82 83       	std	Z+2, r24	; 0x02
    5dd4:	35 82       	std	Z+5, r3	; 0x05
    5dd6:	24 82       	std	Z+4, r2	; 0x04
    5dd8:	57 82       	std	Z+7, r5	; 0x07
    5dda:	46 82       	std	Z+6, r4	; 0x06
    5ddc:	80 ee       	ldi	r24, 0xE0	; 224
    5dde:	97 e0       	ldi	r25, 0x07	; 7
    5de0:	91 87       	std	Z+9, r25	; 0x09
    5de2:	80 87       	std	Z+8, r24	; 0x08
    5de4:	f3 86       	std	Z+11, r15	; 0x0b
    5de6:	e2 86       	std	Z+10, r14	; 0x0a
    5de8:	95 86       	std	Z+13, r9	; 0x0d
    5dea:	84 86       	std	Z+12, r8	; 0x0c
    5dec:	b7 86       	std	Z+15, r11	; 0x0f
    5dee:	a6 86       	std	Z+14, r10	; 0x0e
    5df0:	d1 8a       	std	Z+17, r13	; 0x11
    5df2:	c0 8a       	std	Z+16, r12	; 0x10
    5df4:	62 8a       	std	Z+18, r6	; 0x12
    5df6:	73 8a       	std	Z+19, r7	; 0x13
    5df8:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	 cSum=SumChecksum(strSend);
    5dfc:	ad b7       	in	r26, 0x3d	; 61
    5dfe:	be b7       	in	r27, 0x3e	; 62
    5e00:	54 96       	adiw	r26, 0x14	; 20
    5e02:	0f b6       	in	r0, 0x3f	; 63
    5e04:	f8 94       	cli
    5e06:	be bf       	out	0x3e, r27	; 62
    5e08:	0f be       	out	0x3f, r0	; 63
    5e0a:	ad bf       	out	0x3d, r26	; 61
    5e0c:	c8 01       	movw	r24, r16
    5e0e:	0e 94 79 21 	call	0x42f2	; 0x42f2 <SumChecksum>
    5e12:	e8 2e       	mov	r14, r24
	 uart_print(1,0,strSend);
    5e14:	81 e0       	ldi	r24, 0x01	; 1
    5e16:	60 e0       	ldi	r22, 0x00	; 0
    5e18:	a8 01       	movw	r20, r16
    5e1a:	0e 94 da a8 	call	0x151b4	; 0x151b4 <uart_print>
    5e1e:	f8 01       	movw	r30, r16

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    5e20:	c8 01       	movw	r24, r16
    5e22:	f9 2e       	mov	r15, r25
    5e24:	ce 01       	movw	r24, r28
    5e26:	8f 54       	subi	r24, 0x4F	; 79
    5e28:	9f 4f       	sbci	r25, 0xFF	; 255
	     strMemory[i]=data;
    5e2a:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    5e2c:	e8 17       	cp	r30, r24
    5e2e:	f9 07       	cpc	r31, r25
    5e30:	e1 f7       	brne	.-8      	; 0x5e2a <GeniusSendLastTransaction+0x19a>
	 //Compose
	 sprintf_P(strSend,PSTR("T%.2d%.2d%s%s%s%s%s%s:"),iPumpID,iNozzle,strProduct,SDatetime,SVolume,SMoney,STotalVolume,STotalMoney);
	 cSum=SumChecksum(strSend);
	 uart_print(1,0,strSend);
	 FillChar(strSend,sizeof(strSend),0);      
	 sprintf_P(strSend,PSTR("%d"),cSum);
    5e32:	00 d0       	rcall	.+0      	; 0x5e34 <GeniusSendLastTransaction+0x1a4>
    5e34:	00 d0       	rcall	.+0      	; 0x5e36 <GeniusSendLastTransaction+0x1a6>
    5e36:	00 d0       	rcall	.+0      	; 0x5e38 <GeniusSendLastTransaction+0x1a8>
    5e38:	ed b7       	in	r30, 0x3d	; 61
    5e3a:	fe b7       	in	r31, 0x3e	; 62
    5e3c:	31 96       	adiw	r30, 0x01	; 1
    5e3e:	ad b7       	in	r26, 0x3d	; 61
    5e40:	be b7       	in	r27, 0x3e	; 62
    5e42:	11 96       	adiw	r26, 0x01	; 1
    5e44:	0c 93       	st	X, r16
    5e46:	11 97       	sbiw	r26, 0x01	; 1
    5e48:	12 96       	adiw	r26, 0x02	; 2
    5e4a:	fc 92       	st	X, r15
    5e4c:	8b e1       	ldi	r24, 0x1B	; 27
    5e4e:	95 e0       	ldi	r25, 0x05	; 5
    5e50:	93 83       	std	Z+3, r25	; 0x03
    5e52:	82 83       	std	Z+2, r24	; 0x02
    5e54:	e4 82       	std	Z+4, r14	; 0x04
    5e56:	15 82       	std	Z+5, r1	; 0x05
    5e58:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	 uart_print(1,1,strSend);	 
    5e5c:	ed b7       	in	r30, 0x3d	; 61
    5e5e:	fe b7       	in	r31, 0x3e	; 62
    5e60:	36 96       	adiw	r30, 0x06	; 6
    5e62:	0f b6       	in	r0, 0x3f	; 63
    5e64:	f8 94       	cli
    5e66:	fe bf       	out	0x3e, r31	; 62
    5e68:	0f be       	out	0x3f, r0	; 63
    5e6a:	ed bf       	out	0x3d, r30	; 61
    5e6c:	81 e0       	ldi	r24, 0x01	; 1
    5e6e:	61 e0       	ldi	r22, 0x01	; 1
    5e70:	40 2f       	mov	r20, r16
    5e72:	5f 2d       	mov	r21, r15
    5e74:	0e 94 da a8 	call	0x151b4	; 0x151b4 <uart_print>
}
    5e78:	c0 55       	subi	r28, 0x50	; 80
    5e7a:	df 4f       	sbci	r29, 0xFF	; 255
    5e7c:	0f b6       	in	r0, 0x3f	; 63
    5e7e:	f8 94       	cli
    5e80:	de bf       	out	0x3e, r29	; 62
    5e82:	0f be       	out	0x3f, r0	; 63
    5e84:	cd bf       	out	0x3d, r28	; 61
    5e86:	cf 91       	pop	r28
    5e88:	df 91       	pop	r29
    5e8a:	1f 91       	pop	r17
    5e8c:	0f 91       	pop	r16
    5e8e:	ff 90       	pop	r15
    5e90:	ef 90       	pop	r14
    5e92:	df 90       	pop	r13
    5e94:	cf 90       	pop	r12
    5e96:	bf 90       	pop	r11
    5e98:	af 90       	pop	r10
    5e9a:	9f 90       	pop	r9
    5e9c:	8f 90       	pop	r8
    5e9e:	7f 90       	pop	r7
    5ea0:	6f 90       	pop	r6
    5ea2:	5f 90       	pop	r5
    5ea4:	4f 90       	pop	r4
    5ea6:	3f 90       	pop	r3
    5ea8:	2f 90       	pop	r2
    5eaa:	08 95       	ret

00005eac <systemGeniusProtocol>:
	     Result=TS_OLD;
	 }
   return Result;
}

void systemGeniusProtocol(){
    5eac:	1f 93       	push	r17
static char stGeniusProtocol=gpInitScan;
static char iPumpID;
	 
	 switch(stGeniusProtocol){
    5eae:	80 91 bf 01 	lds	r24, 0x01BF
    5eb2:	83 30       	cpi	r24, 0x03	; 3
    5eb4:	61 f1       	breq	.+88     	; 0x5f0e <systemGeniusProtocol+0x62>
    5eb6:	84 30       	cpi	r24, 0x04	; 4
    5eb8:	28 f4       	brcc	.+10     	; 0x5ec4 <systemGeniusProtocol+0x18>
    5eba:	81 30       	cpi	r24, 0x01	; 1
    5ebc:	81 f0       	breq	.+32     	; 0x5ede <systemGeniusProtocol+0x32>
    5ebe:	82 30       	cpi	r24, 0x02	; 2
    5ec0:	c0 f4       	brcc	.+48     	; 0x5ef2 <systemGeniusProtocol+0x46>
    5ec2:	09 c0       	rjmp	.+18     	; 0x5ed6 <systemGeniusProtocol+0x2a>
    5ec4:	85 30       	cpi	r24, 0x05	; 5
    5ec6:	09 f4       	brne	.+2      	; 0x5eca <systemGeniusProtocol+0x1e>
    5ec8:	43 c0       	rjmp	.+134    	; 0x5f50 <systemGeniusProtocol+0xa4>
    5eca:	85 30       	cpi	r24, 0x05	; 5
    5ecc:	a0 f1       	brcs	.+104    	; 0x5f36 <systemGeniusProtocol+0x8a>
    5ece:	86 30       	cpi	r24, 0x06	; 6
    5ed0:	09 f0       	breq	.+2      	; 0x5ed4 <systemGeniusProtocol+0x28>
    5ed2:	52 c0       	rjmp	.+164    	; 0x5f78 <systemGeniusProtocol+0xcc>
    5ed4:	43 c0       	rjmp	.+134    	; 0x5f5c <systemGeniusProtocol+0xb0>
	 case gpInitScan:
	      iPumpID=1;
    5ed6:	81 e0       	ldi	r24, 0x01	; 1
    5ed8:	80 93 be 01 	sts	0x01BE, r24
    5edc:	4b c0       	rjmp	.+150    	; 0x5f74 <systemGeniusProtocol+0xc8>
          stGeniusProtocol=gpScanNewTransaction;
	      break;
	 case gpScanNewTransaction:
	      if (GetIncomingTransStatus(PumpID)==TS_NEW){
    5ede:	80 91 bd 01 	lds	r24, 0x01BD
    5ee2:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <GetIncomingTransStatus>
    5ee6:	82 30       	cpi	r24, 0x02	; 2
    5ee8:	09 f0       	breq	.+2      	; 0x5eec <systemGeniusProtocol+0x40>
    5eea:	46 c0       	rjmp	.+140    	; 0x5f78 <systemGeniusProtocol+0xcc>
		      IsTotalizerReceived=False;
    5eec:	10 92 af 01 	sts	0x01AF, r1
    5ef0:	41 c0       	rjmp	.+130    	; 0x5f74 <systemGeniusProtocol+0xc8>
		      stGeniusProtocol=gpRequestTotalizer;
		  }
	      break;
     case gpRequestTotalizer:
	      SendPoolingCommand(SC_TOTALIZER,iPumpID);
    5ef2:	90 91 be 01 	lds	r25, 0x01BE
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
    5ef6:	85 e0       	ldi	r24, 0x05	; 5
    5ef8:	80 93 29 06 	sts	0x0629, r24
	 PoolMsg=plMsg;
    5efc:	90 93 55 0c 	sts	0x0C55, r25
     IsControlPooling=True;
    5f00:	81 e0       	ldi	r24, 0x01	; 1
    5f02:	80 93 84 01 	sts	0x0184, r24
		      stGeniusProtocol=gpRequestTotalizer;
		  }
	      break;
     case gpRequestTotalizer:
	      SendPoolingCommand(SC_TOTALIZER,iPumpID);
		  TimSend=0;
    5f06:	10 92 fa 0c 	sts	0x0CFA, r1
		  stGeniusProtocol=gpWaitRequestedTotalizer;
    5f0a:	83 e0       	ldi	r24, 0x03	; 3
    5f0c:	33 c0       	rjmp	.+102    	; 0x5f74 <systemGeniusProtocol+0xc8>
	      break;
     case gpWaitRequestedTotalizer:
	      if ((IsTotalizerReceived==True)&&(AcknoledgePump==iPumpID)){
    5f0e:	80 91 af 01 	lds	r24, 0x01AF
    5f12:	81 30       	cpi	r24, 0x01	; 1
    5f14:	59 f4       	brne	.+22     	; 0x5f2c <systemGeniusProtocol+0x80>
    5f16:	90 91 6e 0c 	lds	r25, 0x0C6E
    5f1a:	80 91 be 01 	lds	r24, 0x01BE
    5f1e:	98 17       	cp	r25, r24
    5f20:	29 f4       	brne	.+10     	; 0x5f2c <systemGeniusProtocol+0x80>
		      IsTotalizerReceived=False;
    5f22:	10 92 af 01 	sts	0x01AF, r1
			  stGeniusProtocol=gpSendTransactionData;
    5f26:	84 e0       	ldi	r24, 0x04	; 4
    5f28:	80 93 bf 01 	sts	0x01BF, r24
		  }
	      if (TimSend>TIM_SEND*2)stGeniusProtocol=gpNextPumpScan;
    5f2c:	80 91 fa 0c 	lds	r24, 0x0CFA
    5f30:	85 31       	cpi	r24, 0x15	; 21
    5f32:	10 f1       	brcs	.+68     	; 0x5f78 <systemGeniusProtocol+0xcc>
    5f34:	11 c0       	rjmp	.+34     	; 0x5f58 <systemGeniusProtocol+0xac>
	      break;
     case gpSendTransactionData:
          GeniusSendLastTransaction(iPumpID);
    5f36:	80 91 be 01 	lds	r24, 0x01BE
    5f3a:	0e 94 48 2e 	call	0x5c90	; 0x5c90 <GeniusSendLastTransaction>
		  SetIncomingTransStatus(iPumpID,TS_OLD);
    5f3e:	80 91 be 01 	lds	r24, 0x01BE
    5f42:	63 e0       	ldi	r22, 0x03	; 3
    5f44:	0e 94 b5 1a 	call	0x356a	; 0x356a <SetIncomingTransStatus>
		  
		  TimSend=0;
    5f48:	10 92 fa 0c 	sts	0x0CFA, r1
          stGeniusProtocol=gpDelayNextPumpScan;
    5f4c:	85 e0       	ldi	r24, 0x05	; 5
    5f4e:	12 c0       	rjmp	.+36     	; 0x5f74 <systemGeniusProtocol+0xc8>
	      break;
     case gpDelayNextPumpScan:
          if (TimSend>1)stGeniusProtocol=gpNextPumpScan;
    5f50:	80 91 fa 0c 	lds	r24, 0x0CFA
    5f54:	82 30       	cpi	r24, 0x02	; 2
    5f56:	80 f0       	brcs	.+32     	; 0x5f78 <systemGeniusProtocol+0xcc>
    5f58:	86 e0       	ldi	r24, 0x06	; 6
    5f5a:	0c c0       	rjmp	.+24     	; 0x5f74 <systemGeniusProtocol+0xc8>
	      break;
     case gpNextPumpScan:
          if (iPumpID<=eeprom_read_byte(&DefPoolingPumpMax)){
    5f5c:	10 91 be 01 	lds	r17, 0x01BE
    5f60:	85 e4       	ldi	r24, 0x45	; 69
    5f62:	91 e0       	ldi	r25, 0x01	; 1
    5f64:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
    5f68:	81 17       	cp	r24, r17
    5f6a:	30 f0       	brcs	.+12     	; 0x5f78 <systemGeniusProtocol+0xcc>
		      iPumpID++;
    5f6c:	1f 5f       	subi	r17, 0xFF	; 255
    5f6e:	10 93 be 01 	sts	0x01BE, r17
              stGeniusProtocol=gpScanNewTransaction;
    5f72:	81 e0       	ldi	r24, 0x01	; 1
    5f74:	80 93 bf 01 	sts	0x01BF, r24
		  }
	      break;
	 }
}
    5f78:	1f 91       	pop	r17
    5f7a:	08 95       	ret

00005f7c <StrAlignCenter>:
	 }
	 //replace
	 for(i=0;i<strlen(sDate);i++)Date[i]=sDate[i];
}

void StrAlignCenter(char *Source, unsigned int Length){
    5f7c:	ef 92       	push	r14
    5f7e:	ff 92       	push	r15
    5f80:	0f 93       	push	r16
    5f82:	1f 93       	push	r17
    5f84:	18 2f       	mov	r17, r24
    5f86:	09 2f       	mov	r16, r25
    5f88:	7b 01       	movw	r14, r22
char nAddedSpace,srcLength;
     RemSpaceLag(Source);
    5f8a:	0e 94 d2 25 	call	0x4ba4	; 0x4ba4 <RemSpaceLag>
	 RemSpaceLead(Source);
    5f8e:	81 2f       	mov	r24, r17
    5f90:	90 2f       	mov	r25, r16
    5f92:	0e 94 87 25 	call	0x4b0e	; 0x4b0e <RemSpaceLead>
	 srcLength=strlen(Source);
    5f96:	a1 2f       	mov	r26, r17
    5f98:	b0 2f       	mov	r27, r16
    5f9a:	fd 01       	movw	r30, r26
    5f9c:	01 90       	ld	r0, Z+
    5f9e:	00 20       	and	r0, r0
    5fa0:	e9 f7       	brne	.-6      	; 0x5f9c <StrAlignCenter+0x20>
    5fa2:	31 97       	sbiw	r30, 0x01	; 1
    5fa4:	e1 1b       	sub	r30, r17
     nAddedSpace=(Length-srcLength)/2;
     AddSpaceLead(Source,srcLength+nAddedSpace);
    5fa6:	c7 01       	movw	r24, r14
    5fa8:	8e 1b       	sub	r24, r30
    5faa:	91 09       	sbc	r25, r1
    5fac:	96 95       	lsr	r25
    5fae:	87 95       	ror	r24
    5fb0:	e8 0f       	add	r30, r24
    5fb2:	81 2f       	mov	r24, r17
    5fb4:	90 2f       	mov	r25, r16
    5fb6:	6e 2f       	mov	r22, r30
    5fb8:	0e 94 5d 2d 	call	0x5aba	; 0x5aba <AddSpaceLead>
	 AddSpaceLag(Source,Length);
    5fbc:	81 2f       	mov	r24, r17
    5fbe:	90 2f       	mov	r25, r16
    5fc0:	6e 2d       	mov	r22, r14
    5fc2:	0e 94 c4 2d 	call	0x5b88	; 0x5b88 <AddSpaceLag>
}
    5fc6:	1f 91       	pop	r17
    5fc8:	0f 91       	pop	r16
    5fca:	ff 90       	pop	r15
    5fcc:	ef 90       	pop	r14
    5fce:	08 95       	ret

00005fd0 <AddCharLead>:
	 }String[Size]=0;
  }

}

void AddCharLead(char *String,char CharAdded,unsigned char Size){//
    5fd0:	bf 92       	push	r11
    5fd2:	cf 92       	push	r12
    5fd4:	df 92       	push	r13
    5fd6:	ef 92       	push	r14
    5fd8:	ff 92       	push	r15
    5fda:	0f 93       	push	r16
    5fdc:	1f 93       	push	r17
    5fde:	df 93       	push	r29
    5fe0:	cf 93       	push	r28
    5fe2:	cd b7       	in	r28, 0x3d	; 61
    5fe4:	de b7       	in	r29, 0x3e	; 62
    5fe6:	6e 97       	sbiw	r28, 0x1e	; 30
    5fe8:	0f b6       	in	r0, 0x3f	; 63
    5fea:	f8 94       	cli
    5fec:	de bf       	out	0x3e, r29	; 62
    5fee:	0f be       	out	0x3f, r0	; 63
    5ff0:	cd bf       	out	0x3d, r28	; 61
    5ff2:	8c 01       	movw	r16, r24
    5ff4:	e4 2e       	mov	r14, r20
     char i,Length,strAdded[30];
     Length=strlen(String);
    5ff6:	fc 01       	movw	r30, r24
    5ff8:	01 90       	ld	r0, Z+
    5ffa:	00 20       	and	r0, r0
    5ffc:	e9 f7       	brne	.-6      	; 0x5ff8 <AddCharLead+0x28>
    5ffe:	31 97       	sbiw	r30, 0x01	; 1
    6000:	2e 2f       	mov	r18, r30
    6002:	28 1b       	sub	r18, r24

	 if (Size>Length){
    6004:	24 17       	cp	r18, r20
    6006:	d0 f5       	brcc	.+116    	; 0x607c <AddCharLead+0xac>
    6008:	ae 01       	movw	r20, r28
    600a:	4f 5f       	subi	r20, 0xFF	; 255
    600c:	5f 4f       	sbci	r21, 0xFF	; 255
    600e:	fa 01       	movw	r30, r20
	 }String[Size]=0;
  }

}

void AddCharLead(char *String,char CharAdded,unsigned char Size){//
    6010:	b4 2e       	mov	r11, r20
    6012:	01 c0       	rjmp	.+2      	; 0x6016 <AddCharLead+0x46>
     char i,Length,strAdded[30];
     Length=strlen(String);

	 if (Size>Length){
         for(i=0;i<Size;i++){
	         strAdded[i]=CharAdded;
    6014:	61 93       	st	Z+, r22
void AddCharLead(char *String,char CharAdded,unsigned char Size){//
     char i,Length,strAdded[30];
     Length=strlen(String);

	 if (Size>Length){
         for(i=0;i<Size;i++){
    6016:	8e 2f       	mov	r24, r30
    6018:	8b 19       	sub	r24, r11
    601a:	8e 15       	cp	r24, r14
    601c:	d8 f3       	brcs	.-10     	; 0x6014 <AddCharLead+0x44>
	         strAdded[i]=CharAdded;
	     }strAdded[Size]=0;
    601e:	6e 2d       	mov	r22, r14
    6020:	70 e0       	ldi	r23, 0x00	; 0
    6022:	ce 01       	movw	r24, r28
    6024:	01 96       	adiw	r24, 0x01	; 1
    6026:	fc 01       	movw	r30, r24
    6028:	e6 0f       	add	r30, r22
    602a:	f7 1f       	adc	r31, r23
    602c:	10 82       	st	Z, r1
	     //Copy
         for(i=(Size-Length);i<Size;i++){
    602e:	fe 2c       	mov	r15, r14
    6030:	f2 1a       	sub	r15, r18
    6032:	6c 01       	movw	r12, r24
	         strAdded[i]=String[i-(Size-Length)];
    6034:	30 e0       	ldi	r19, 0x00	; 0
    6036:	26 1b       	sub	r18, r22
    6038:	37 0b       	sbc	r19, r23
    603a:	0c c0       	rjmp	.+24     	; 0x6054 <AddCharLead+0x84>
    603c:	ef 2d       	mov	r30, r15
    603e:	f0 e0       	ldi	r31, 0x00	; 0
    6040:	d6 01       	movw	r26, r12
    6042:	ae 0f       	add	r26, r30
    6044:	bf 1f       	adc	r27, r31
    6046:	e0 0f       	add	r30, r16
    6048:	f1 1f       	adc	r31, r17
    604a:	e2 0f       	add	r30, r18
    604c:	f3 1f       	adc	r31, r19
    604e:	80 81       	ld	r24, Z
    6050:	8c 93       	st	X, r24
	 if (Size>Length){
         for(i=0;i<Size;i++){
	         strAdded[i]=CharAdded;
	     }strAdded[Size]=0;
	     //Copy
         for(i=(Size-Length);i<Size;i++){
    6052:	f3 94       	inc	r15
    6054:	fe 14       	cp	r15, r14
    6056:	90 f3       	brcs	.-28     	; 0x603c <AddCharLead+0x6c>
	         strAdded[i]=String[i-(Size-Length)];
	     }strAdded[Size]=0;
    6058:	6c 0d       	add	r22, r12
    605a:	7d 1d       	adc	r23, r13
    605c:	db 01       	movw	r26, r22
    605e:	1c 92       	st	X, r1
    6060:	f8 01       	movw	r30, r16
    6062:	04 c0       	rjmp	.+8      	; 0x606c <AddCharLead+0x9c>
	     //Spaced
         for(i=0;i<Size;i++){
	         String[i]=strAdded[i];
    6064:	da 01       	movw	r26, r20
    6066:	8d 91       	ld	r24, X+
    6068:	ad 01       	movw	r20, r26
    606a:	81 93       	st	Z+, r24
	     //Copy
         for(i=(Size-Length);i<Size;i++){
	         strAdded[i]=String[i-(Size-Length)];
	     }strAdded[Size]=0;
	     //Spaced
         for(i=0;i<Size;i++){
    606c:	84 2f       	mov	r24, r20
    606e:	8b 19       	sub	r24, r11
    6070:	8e 15       	cp	r24, r14
    6072:	c0 f3       	brcs	.-16     	; 0x6064 <AddCharLead+0x94>
	         String[i]=strAdded[i];
	     }String[Size]=0;
    6074:	0e 0d       	add	r16, r14
    6076:	11 1d       	adc	r17, r1
    6078:	f8 01       	movw	r30, r16
    607a:	10 82       	st	Z, r1
	 }
}
    607c:	6e 96       	adiw	r28, 0x1e	; 30
    607e:	0f b6       	in	r0, 0x3f	; 63
    6080:	f8 94       	cli
    6082:	de bf       	out	0x3e, r29	; 62
    6084:	0f be       	out	0x3f, r0	; 63
    6086:	cd bf       	out	0x3d, r28	; 61
    6088:	cf 91       	pop	r28
    608a:	df 91       	pop	r29
    608c:	1f 91       	pop	r17
    608e:	0f 91       	pop	r16
    6090:	ff 90       	pop	r15
    6092:	ef 90       	pop	r14
    6094:	df 90       	pop	r13
    6096:	cf 90       	pop	r12
    6098:	bf 90       	pop	r11
    609a:	08 95       	ret

0000609c <AddCharLag>:
    }
return Result;
}

//String Processing
void AddCharLag(char *String,char CharAdded,unsigned char Size){
    609c:	cf 93       	push	r28
    609e:	df 93       	push	r29
    60a0:	ec 01       	movw	r28, r24
char i,Length;
     Length=strlen(String);
    60a2:	dc 01       	movw	r26, r24
    60a4:	0d 90       	ld	r0, X+
    60a6:	00 20       	and	r0, r0
    60a8:	e9 f7       	brne	.-6      	; 0x60a4 <AddCharLag+0x8>
    60aa:	11 97       	sbiw	r26, 0x01	; 1
    60ac:	a8 1b       	sub	r26, r24
    60ae:	b9 0b       	sbc	r27, r25
  if (Length<Size){   
    60b0:	a4 17       	cp	r26, r20
    60b2:	58 f4       	brcc	.+22     	; 0x60ca <AddCharLag+0x2e>
    60b4:	8a 2f       	mov	r24, r26
     for(i=Length;i<Size;i++){
	    String[i]=CharAdded;
    60b6:	fe 01       	movw	r30, r28
    60b8:	e8 0f       	add	r30, r24
    60ba:	f1 1d       	adc	r31, r1
    60bc:	60 83       	st	Z, r22
//String Processing
void AddCharLag(char *String,char CharAdded,unsigned char Size){
char i,Length;
     Length=strlen(String);
  if (Length<Size){   
     for(i=Length;i<Size;i++){
    60be:	8f 5f       	subi	r24, 0xFF	; 255
    60c0:	84 17       	cp	r24, r20
    60c2:	c8 f3       	brcs	.-14     	; 0x60b6 <AddCharLag+0x1a>
	    String[i]=CharAdded;
	 }String[Size]=0;
    60c4:	c4 0f       	add	r28, r20
    60c6:	d1 1d       	adc	r29, r1
    60c8:	18 82       	st	Y, r1
  }

}
    60ca:	df 91       	pop	r29
    60cc:	cf 91       	pop	r28
    60ce:	08 95       	ret

000060d0 <CountTotalizerSatus>:
		      Result++;		  
		  }	 
	 }
  return Result;
}
char CountTotalizerSatus(char *strPumpStatusTotalizer){
    60d0:	cf 92       	push	r12
    60d2:	df 92       	push	r13
    60d4:	ef 92       	push	r14
    60d6:	ff 92       	push	r15
    60d8:	0f 93       	push	r16
    60da:	1f 93       	push	r17
    60dc:	cf 93       	push	r28
    60de:	df 93       	push	r29
    60e0:	7c 01       	movw	r14, r24
char i,Result;
     Result=0;
	 for (i=0;i<strlen(strPumpStatusTotalizer);i++){
    60e2:	dc 01       	movw	r26, r24
    60e4:	0d 90       	ld	r0, X+
    60e6:	00 20       	and	r0, r0
    60e8:	e9 f7       	brne	.-6      	; 0x60e4 <CountTotalizerSatus+0x14>
    60ea:	8d 01       	movw	r16, r26
    60ec:	01 50       	subi	r16, 0x01	; 1
    60ee:	10 40       	sbci	r17, 0x00	; 0
    60f0:	08 1b       	sub	r16, r24
    60f2:	19 0b       	sbc	r17, r25
    60f4:	cc 24       	eor	r12, r12
    60f6:	dd 24       	eor	r13, r13
    60f8:	0a c0       	rjmp	.+20     	; 0x610e <CountTotalizerSatus+0x3e>
	      if (strPumpStatusTotalizer[i]==GetPumpStatusLabel(PS_TOTALIZER)){
    60fa:	84 e1       	ldi	r24, 0x14	; 20
    60fc:	0e 94 41 14 	call	0x2882	; 0x2882 <GetPumpStatusLabel>
    6100:	ce 0d       	add	r28, r14
    6102:	df 1d       	adc	r29, r15
    6104:	98 81       	ld	r25, Y
    6106:	98 17       	cp	r25, r24
    6108:	09 f4       	brne	.+2      	; 0x610c <CountTotalizerSatus+0x3c>
		      Result++;		  
    610a:	d3 94       	inc	r13
  return Result;
}
char CountTotalizerSatus(char *strPumpStatusTotalizer){
char i,Result;
     Result=0;
	 for (i=0;i<strlen(strPumpStatusTotalizer);i++){
    610c:	c3 94       	inc	r12
    610e:	cc 2d       	mov	r28, r12
    6110:	d0 e0       	ldi	r29, 0x00	; 0
    6112:	c0 17       	cp	r28, r16
    6114:	d1 07       	cpc	r29, r17
    6116:	88 f3       	brcs	.-30     	; 0x60fa <CountTotalizerSatus+0x2a>
	      if (strPumpStatusTotalizer[i]==GetPumpStatusLabel(PS_TOTALIZER)){
		      Result++;		  
		  }	 
	 }
  return Result;
}
    6118:	8d 2d       	mov	r24, r13
    611a:	df 91       	pop	r29
    611c:	cf 91       	pop	r28
    611e:	1f 91       	pop	r17
    6120:	0f 91       	pop	r16
    6122:	ff 90       	pop	r15
    6124:	ef 90       	pop	r14
    6126:	df 90       	pop	r13
    6128:	cf 90       	pop	r12
    612a:	08 95       	ret

0000612c <RemoveChar>:
	   sprintf_P(strSend,PSTR("Wrap:%s"),strDestCode);
	   uart_print(1,1,strSend);     
	 #endif
}

void RemoveChar(char *strSource, char cRem){
    612c:	1f 93       	push	r17
    612e:	df 93       	push	r29
    6130:	cf 93       	push	r28
    6132:	cd b7       	in	r28, 0x3d	; 61
    6134:	de b7       	in	r29, 0x3e	; 62
    6136:	64 97       	sbiw	r28, 0x14	; 20
    6138:	0f b6       	in	r0, 0x3f	; 63
    613a:	f8 94       	cli
    613c:	de bf       	out	0x3e, r29	; 62
    613e:	0f be       	out	0x3f, r0	; 63
    6140:	cd bf       	out	0x3d, r28	; 61
    6142:	16 2f       	mov	r17, r22
    6144:	50 e0       	ldi	r21, 0x00	; 0
    6146:	40 e0       	ldi	r20, 0x00	; 0
     char i,iAdd,sTemp[20];
     iAdd=0;
	 for(i=0;i<strlen(strSource);i++){
	     if (strSource[i]!=cRem){
		     sTemp[iAdd]=strSource[i];
    6148:	be 01       	movw	r22, r28
    614a:	6f 5f       	subi	r22, 0xFF	; 255
    614c:	7f 4f       	sbci	r23, 0xFF	; 255
    614e:	0c c0       	rjmp	.+24     	; 0x6168 <RemoveChar+0x3c>

void RemoveChar(char *strSource, char cRem){
     char i,iAdd,sTemp[20];
     iAdd=0;
	 for(i=0;i<strlen(strSource);i++){
	     if (strSource[i]!=cRem){
    6150:	28 0f       	add	r18, r24
    6152:	39 1f       	adc	r19, r25
    6154:	d9 01       	movw	r26, r18
    6156:	2c 91       	ld	r18, X
    6158:	21 17       	cp	r18, r17
    615a:	29 f0       	breq	.+10     	; 0x6166 <RemoveChar+0x3a>
		     sTemp[iAdd]=strSource[i];
    615c:	fb 01       	movw	r30, r22
    615e:	e4 0f       	add	r30, r20
    6160:	f1 1d       	adc	r31, r1
    6162:	20 83       	st	Z, r18
			 iAdd++;
    6164:	4f 5f       	subi	r20, 0xFF	; 255
}

void RemoveChar(char *strSource, char cRem){
     char i,iAdd,sTemp[20];
     iAdd=0;
	 for(i=0;i<strlen(strSource);i++){
    6166:	5f 5f       	subi	r21, 0xFF	; 255
    6168:	25 2f       	mov	r18, r21
    616a:	30 e0       	ldi	r19, 0x00	; 0
    616c:	fc 01       	movw	r30, r24
    616e:	01 90       	ld	r0, Z+
    6170:	00 20       	and	r0, r0
    6172:	e9 f7       	brne	.-6      	; 0x616e <RemoveChar+0x42>
    6174:	31 97       	sbiw	r30, 0x01	; 1
    6176:	e8 1b       	sub	r30, r24
    6178:	f9 0b       	sbc	r31, r25
    617a:	2e 17       	cp	r18, r30
    617c:	3f 07       	cpc	r19, r31
    617e:	40 f3       	brcs	.-48     	; 0x6150 <RemoveChar+0x24>
	     if (strSource[i]!=cRem){
		     sTemp[iAdd]=strSource[i];
			 iAdd++;
          }
	 }sTemp[iAdd]=0;
    6180:	9e 01       	movw	r18, r28
    6182:	2f 5f       	subi	r18, 0xFF	; 255
    6184:	3f 4f       	sbci	r19, 0xFF	; 255
    6186:	f9 01       	movw	r30, r18
    6188:	e4 0f       	add	r30, r20
    618a:	f1 1d       	adc	r31, r1
    618c:	10 82       	st	Z, r1
	 sprintf_P(strSource,PSTR("%s"),sTemp);
    618e:	00 d0       	rcall	.+0      	; 0x6190 <RemoveChar+0x64>
    6190:	00 d0       	rcall	.+0      	; 0x6192 <RemoveChar+0x66>
    6192:	00 d0       	rcall	.+0      	; 0x6194 <RemoveChar+0x68>
    6194:	ed b7       	in	r30, 0x3d	; 61
    6196:	fe b7       	in	r31, 0x3e	; 62
    6198:	31 96       	adiw	r30, 0x01	; 1
    619a:	ad b7       	in	r26, 0x3d	; 61
    619c:	be b7       	in	r27, 0x3e	; 62
    619e:	12 96       	adiw	r26, 0x02	; 2
    61a0:	9c 93       	st	X, r25
    61a2:	8e 93       	st	-X, r24
    61a4:	11 97       	sbiw	r26, 0x01	; 1
    61a6:	89 e0       	ldi	r24, 0x09	; 9
    61a8:	9a e1       	ldi	r25, 0x1A	; 26
    61aa:	93 83       	std	Z+3, r25	; 0x03
    61ac:	82 83       	std	Z+2, r24	; 0x02
    61ae:	35 83       	std	Z+5, r19	; 0x05
    61b0:	24 83       	std	Z+4, r18	; 0x04
    61b2:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
    61b6:	ed b7       	in	r30, 0x3d	; 61
    61b8:	fe b7       	in	r31, 0x3e	; 62
    61ba:	36 96       	adiw	r30, 0x06	; 6
    61bc:	0f b6       	in	r0, 0x3f	; 63
    61be:	f8 94       	cli
    61c0:	fe bf       	out	0x3e, r31	; 62
    61c2:	0f be       	out	0x3f, r0	; 63
    61c4:	ed bf       	out	0x3d, r30	; 61
}
    61c6:	64 96       	adiw	r28, 0x14	; 20
    61c8:	0f b6       	in	r0, 0x3f	; 63
    61ca:	f8 94       	cli
    61cc:	de bf       	out	0x3e, r29	; 62
    61ce:	0f be       	out	0x3f, r0	; 63
    61d0:	cd bf       	out	0x3d, r28	; 61
    61d2:	cf 91       	pop	r28
    61d4:	df 91       	pop	r29
    61d6:	1f 91       	pop	r17
    61d8:	08 95       	ret

000061da <WrapCode>:
	      break;
	 }
   return Result;
}

void WrapCode(char *strRawCode){
    61da:	8f 92       	push	r8
    61dc:	9f 92       	push	r9
    61de:	bf 92       	push	r11
    61e0:	cf 92       	push	r12
    61e2:	df 92       	push	r13
    61e4:	ef 92       	push	r14
    61e6:	ff 92       	push	r15
    61e8:	0f 93       	push	r16
    61ea:	1f 93       	push	r17
    61ec:	df 93       	push	r29
    61ee:	cf 93       	push	r28
    61f0:	cd b7       	in	r28, 0x3d	; 61
    61f2:	de b7       	in	r29, 0x3e	; 62
    61f4:	2f 97       	sbiw	r28, 0x0f	; 15
    61f6:	0f b6       	in	r0, 0x3f	; 63
    61f8:	f8 94       	cli
    61fa:	de bf       	out	0x3e, r29	; 62
    61fc:	0f be       	out	0x3f, r0	; 63
    61fe:	cd bf       	out	0x3d, r28	; 61
    6200:	6c 01       	movw	r12, r24
    6202:	bb 24       	eor	r11, r11
    6204:	40 e0       	ldi	r20, 0x00	; 0
    6206:	4e 01       	movw	r8, r28
    6208:	08 94       	sec
    620a:	81 1c       	adc	r8, r1
    620c:	91 1c       	adc	r9, r1
    620e:	12 c0       	rjmp	.+36     	; 0x6234 <WrapCode+0x5a>
     char i,seedKey;
	 char strTemp[15];
	 //62678677 ->68846445
	 seedKey=0;
	 for (i=0;i<strlen(strRawCode);i++){
	      strTemp[i]='0'+GeniusCalc(G_PLUS,(strRawCode[i]-'0'),seedKey);
    6210:	86 01       	movw	r16, r12
    6212:	0e 0d       	add	r16, r14
    6214:	1f 1d       	adc	r17, r15
    6216:	d8 01       	movw	r26, r16
    6218:	6c 91       	ld	r22, X
    621a:	60 53       	subi	r22, 0x30	; 48
    621c:	80 e0       	ldi	r24, 0x00	; 0
    621e:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <GeniusCalc>
    6222:	e8 0c       	add	r14, r8
    6224:	f9 1c       	adc	r15, r9
    6226:	80 5d       	subi	r24, 0xD0	; 208
    6228:	f7 01       	movw	r30, r14
    622a:	80 83       	st	Z, r24
		  seedKey=strRawCode[i]-'0';
    622c:	d8 01       	movw	r26, r16
    622e:	4c 91       	ld	r20, X
    6230:	40 53       	subi	r20, 0x30	; 48
void WrapCode(char *strRawCode){
     char i,seedKey;
	 char strTemp[15];
	 //62678677 ->68846445
	 seedKey=0;
	 for (i=0;i<strlen(strRawCode);i++){
    6232:	b3 94       	inc	r11
    6234:	eb 2c       	mov	r14, r11
    6236:	ff 24       	eor	r15, r15
    6238:	d6 01       	movw	r26, r12
    623a:	0d 90       	ld	r0, X+
    623c:	00 20       	and	r0, r0
    623e:	e9 f7       	brne	.-6      	; 0x623a <WrapCode+0x60>
    6240:	11 97       	sbiw	r26, 0x01	; 1
    6242:	ac 19       	sub	r26, r12
    6244:	bd 09       	sbc	r27, r13
    6246:	ea 16       	cp	r14, r26
    6248:	fb 06       	cpc	r15, r27
    624a:	10 f3       	brcs	.-60     	; 0x6210 <WrapCode+0x36>
	      strTemp[i]='0'+GeniusCalc(G_PLUS,(strRawCode[i]-'0'),seedKey);
		  seedKey=strRawCode[i]-'0';
	 }strTemp[strlen(strRawCode)]=0;
    624c:	a8 0d       	add	r26, r8
    624e:	b9 1d       	adc	r27, r9
    6250:	1c 92       	st	X, r1
     sprintf_P(strRawCode,PSTR("%s"),strTemp);
    6252:	00 d0       	rcall	.+0      	; 0x6254 <WrapCode+0x7a>
    6254:	00 d0       	rcall	.+0      	; 0x6256 <WrapCode+0x7c>
    6256:	00 d0       	rcall	.+0      	; 0x6258 <WrapCode+0x7e>
    6258:	ed b7       	in	r30, 0x3d	; 61
    625a:	fe b7       	in	r31, 0x3e	; 62
    625c:	31 96       	adiw	r30, 0x01	; 1
    625e:	ad b7       	in	r26, 0x3d	; 61
    6260:	be b7       	in	r27, 0x3e	; 62
    6262:	12 96       	adiw	r26, 0x02	; 2
    6264:	dc 92       	st	X, r13
    6266:	ce 92       	st	-X, r12
    6268:	11 97       	sbiw	r26, 0x01	; 1
    626a:	84 e1       	ldi	r24, 0x14	; 20
    626c:	9a e1       	ldi	r25, 0x1A	; 26
    626e:	93 83       	std	Z+3, r25	; 0x03
    6270:	82 83       	std	Z+2, r24	; 0x02
    6272:	95 82       	std	Z+5, r9	; 0x05
    6274:	84 82       	std	Z+4, r8	; 0x04
    6276:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
    627a:	ed b7       	in	r30, 0x3d	; 61
    627c:	fe b7       	in	r31, 0x3e	; 62
    627e:	36 96       	adiw	r30, 0x06	; 6
    6280:	0f b6       	in	r0, 0x3f	; 63
    6282:	f8 94       	cli
    6284:	fe bf       	out	0x3e, r31	; 62
    6286:	0f be       	out	0x3f, r0	; 63
    6288:	ed bf       	out	0x3d, r30	; 61
}
    628a:	2f 96       	adiw	r28, 0x0f	; 15
    628c:	0f b6       	in	r0, 0x3f	; 63
    628e:	f8 94       	cli
    6290:	de bf       	out	0x3e, r29	; 62
    6292:	0f be       	out	0x3f, r0	; 63
    6294:	cd bf       	out	0x3d, r28	; 61
    6296:	cf 91       	pop	r28
    6298:	df 91       	pop	r29
    629a:	1f 91       	pop	r17
    629c:	0f 91       	pop	r16
    629e:	ff 90       	pop	r15
    62a0:	ef 90       	pop	r14
    62a2:	df 90       	pop	r13
    62a4:	cf 90       	pop	r12
    62a6:	bf 90       	pop	r11
    62a8:	9f 90       	pop	r9
    62aa:	8f 90       	pop	r8
    62ac:	08 95       	ret

000062ae <GenerateKeyStamp>:


   return Result;
}

void GenerateKeyStamp(char *sTime, char *sGCode, char *strKeyStamp){//
    62ae:	8f 92       	push	r8
    62b0:	9f 92       	push	r9
    62b2:	af 92       	push	r10
    62b4:	bf 92       	push	r11
    62b6:	df 92       	push	r13
    62b8:	ef 92       	push	r14
    62ba:	ff 92       	push	r15
    62bc:	0f 93       	push	r16
    62be:	1f 93       	push	r17
    62c0:	df 93       	push	r29
    62c2:	cf 93       	push	r28
    62c4:	cd b7       	in	r28, 0x3d	; 61
    62c6:	de b7       	in	r29, 0x3e	; 62
    62c8:	2d 97       	sbiw	r28, 0x0d	; 13
    62ca:	0f b6       	in	r0, 0x3f	; 63
    62cc:	f8 94       	cli
    62ce:	de bf       	out	0x3e, r29	; 62
    62d0:	0f be       	out	0x3f, r0	; 63
    62d2:	cd bf       	out	0x3d, r28	; 61
    62d4:	9c 01       	movw	r18, r24
    62d6:	7b 01       	movw	r14, r22
    62d8:	5a 01       	movw	r10, r20
	             65585577
	 */
     char seedIdx,sSeed[10],sAdd[3],i;
     
	 seedIdx=(sTime[5]-'0')%8; 
	 sAdd[0]=sGCode[seedIdx];
    62da:	dc 01       	movw	r26, r24
    62dc:	15 96       	adiw	r26, 0x05	; 5
    62de:	8c 91       	ld	r24, X
    62e0:	90 e0       	ldi	r25, 0x00	; 0
    62e2:	c0 97       	sbiw	r24, 0x30	; 48
    62e4:	68 e0       	ldi	r22, 0x08	; 8
    62e6:	70 e0       	ldi	r23, 0x00	; 0
    62e8:	0e 94 79 aa 	call	0x154f2	; 0x154f2 <__divmodhi4>
    62ec:	f7 01       	movw	r30, r14
    62ee:	e8 0f       	add	r30, r24
    62f0:	f1 1d       	adc	r31, r1
    62f2:	80 81       	ld	r24, Z
    62f4:	89 83       	std	Y+1, r24	; 0x01
     seedIdx=(sTime[6]-'0')%8;
	 sAdd[1]=sGCode[seedIdx];
    62f6:	f9 01       	movw	r30, r18
    62f8:	86 81       	ldd	r24, Z+6	; 0x06
    62fa:	90 e0       	ldi	r25, 0x00	; 0
    62fc:	c0 97       	sbiw	r24, 0x30	; 48
    62fe:	68 e0       	ldi	r22, 0x08	; 8
    6300:	70 e0       	ldi	r23, 0x00	; 0
    6302:	0e 94 79 aa 	call	0x154f2	; 0x154f2 <__divmodhi4>
    6306:	f7 01       	movw	r30, r14
    6308:	e8 0f       	add	r30, r24
    630a:	f1 1d       	adc	r31, r1
    630c:	80 81       	ld	r24, Z
    630e:	8a 83       	std	Y+2, r24	; 0x02
	 sAdd[2]=0;
    6310:	1b 82       	std	Y+3, r1	; 0x03

	 sprintf_P(sSeed,PSTR("%s%s"),sTime,sAdd);
    6312:	8d b7       	in	r24, 0x3d	; 61
    6314:	9e b7       	in	r25, 0x3e	; 62
    6316:	08 97       	sbiw	r24, 0x08	; 8
    6318:	0f b6       	in	r0, 0x3f	; 63
    631a:	f8 94       	cli
    631c:	9e bf       	out	0x3e, r25	; 62
    631e:	0f be       	out	0x3f, r0	; 63
    6320:	8d bf       	out	0x3d, r24	; 61
    6322:	ed b7       	in	r30, 0x3d	; 61
    6324:	fe b7       	in	r31, 0x3e	; 62
    6326:	31 96       	adiw	r30, 0x01	; 1
    6328:	8e 01       	movw	r16, r28
    632a:	0c 5f       	subi	r16, 0xFC	; 252
    632c:	1f 4f       	sbci	r17, 0xFF	; 255
    632e:	ad b7       	in	r26, 0x3d	; 61
    6330:	be b7       	in	r27, 0x3e	; 62
    6332:	12 96       	adiw	r26, 0x02	; 2
    6334:	1c 93       	st	X, r17
    6336:	0e 93       	st	-X, r16
    6338:	11 97       	sbiw	r26, 0x01	; 1
    633a:	84 e0       	ldi	r24, 0x04	; 4
    633c:	9a e1       	ldi	r25, 0x1A	; 26
    633e:	93 83       	std	Z+3, r25	; 0x03
    6340:	82 83       	std	Z+2, r24	; 0x02
    6342:	35 83       	std	Z+5, r19	; 0x05
    6344:	24 83       	std	Z+4, r18	; 0x04
    6346:	ce 01       	movw	r24, r28
    6348:	01 96       	adiw	r24, 0x01	; 1
    634a:	97 83       	std	Z+7, r25	; 0x07
    634c:	86 83       	std	Z+6, r24	; 0x06
    634e:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
    6352:	dd 24       	eor	r13, r13
    6354:	ed b7       	in	r30, 0x3d	; 61
    6356:	fe b7       	in	r31, 0x3e	; 62
    6358:	38 96       	adiw	r30, 0x08	; 8
    635a:	0f b6       	in	r0, 0x3f	; 63
    635c:	f8 94       	cli
    635e:	fe bf       	out	0x3e, r31	; 62
    6360:	0f be       	out	0x3f, r0	; 63
    6362:	ed bf       	out	0x3d, r30	; 61
     for(i=0;i<strlen(sGCode);i++){
	     strKeyStamp[i]='0'+GeniusCalc(G_MULTY,(sSeed[i]-'0'),(sGCode[i]-'0'));		 
    6364:	48 01       	movw	r8, r16
    6366:	13 c0       	rjmp	.+38     	; 0x638e <GenerateKeyStamp+0xe0>
    6368:	f4 01       	movw	r30, r8
    636a:	e0 0f       	add	r30, r16
    636c:	f1 1f       	adc	r31, r17
    636e:	60 81       	ld	r22, Z
    6370:	60 53       	subi	r22, 0x30	; 48
    6372:	f7 01       	movw	r30, r14
    6374:	e0 0f       	add	r30, r16
    6376:	f1 1f       	adc	r31, r17
    6378:	40 81       	ld	r20, Z
    637a:	40 53       	subi	r20, 0x30	; 48
    637c:	81 e0       	ldi	r24, 0x01	; 1
    637e:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <GeniusCalc>
    6382:	0a 0d       	add	r16, r10
    6384:	1b 1d       	adc	r17, r11
    6386:	80 5d       	subi	r24, 0xD0	; 208
    6388:	d8 01       	movw	r26, r16
    638a:	8c 93       	st	X, r24
     seedIdx=(sTime[6]-'0')%8;
	 sAdd[1]=sGCode[seedIdx];
	 sAdd[2]=0;

	 sprintf_P(sSeed,PSTR("%s%s"),sTime,sAdd);
     for(i=0;i<strlen(sGCode);i++){
    638c:	d3 94       	inc	r13
    638e:	0d 2d       	mov	r16, r13
    6390:	10 e0       	ldi	r17, 0x00	; 0
    6392:	d7 01       	movw	r26, r14
    6394:	0d 90       	ld	r0, X+
    6396:	00 20       	and	r0, r0
    6398:	e9 f7       	brne	.-6      	; 0x6394 <GenerateKeyStamp+0xe6>
    639a:	11 97       	sbiw	r26, 0x01	; 1
    639c:	ae 19       	sub	r26, r14
    639e:	bf 09       	sbc	r27, r15
    63a0:	0a 17       	cp	r16, r26
    63a2:	1b 07       	cpc	r17, r27
    63a4:	08 f3       	brcs	.-62     	; 0x6368 <GenerateKeyStamp+0xba>
	     strKeyStamp[i]='0'+GeniusCalc(G_MULTY,(sSeed[i]-'0'),(sGCode[i]-'0'));		 
	 }strKeyStamp[strlen(sGCode)]=0;
    63a6:	aa 0d       	add	r26, r10
    63a8:	bb 1d       	adc	r27, r11
    63aa:	1c 92       	st	X, r1
     WrapCode(strKeyStamp);
    63ac:	c5 01       	movw	r24, r10
    63ae:	0e 94 ed 30 	call	0x61da	; 0x61da <WrapCode>
}
    63b2:	2d 96       	adiw	r28, 0x0d	; 13
    63b4:	0f b6       	in	r0, 0x3f	; 63
    63b6:	f8 94       	cli
    63b8:	de bf       	out	0x3e, r29	; 62
    63ba:	0f be       	out	0x3f, r0	; 63
    63bc:	cd bf       	out	0x3d, r28	; 61
    63be:	cf 91       	pop	r28
    63c0:	df 91       	pop	r29
    63c2:	1f 91       	pop	r17
    63c4:	0f 91       	pop	r16
    63c6:	ff 90       	pop	r15
    63c8:	ef 90       	pop	r14
    63ca:	df 90       	pop	r13
    63cc:	bf 90       	pop	r11
    63ce:	af 90       	pop	r10
    63d0:	9f 90       	pop	r9
    63d2:	8f 90       	pop	r8
    63d4:	08 95       	ret

000063d6 <GenerateGeniusCode>:
		  seedKey=strRawCode[i]-'0';
	 }strTemp[strlen(strRawCode)]=0;
     sprintf_P(strRawCode,PSTR("%s"),strTemp);
}

void GenerateGeniusCode(char *srcDate, char cSeed, char *strDestCode){
    63d6:	af 92       	push	r10
    63d8:	bf 92       	push	r11
    63da:	cf 92       	push	r12
    63dc:	df 92       	push	r13
    63de:	ef 92       	push	r14
    63e0:	ff 92       	push	r15
    63e2:	0f 93       	push	r16
    63e4:	1f 93       	push	r17
    63e6:	df 93       	push	r29
    63e8:	cf 93       	push	r28
    63ea:	cd b7       	in	r28, 0x3d	; 61
    63ec:	de b7       	in	r29, 0x3e	; 62
    63ee:	28 97       	sbiw	r28, 0x08	; 8
    63f0:	0f b6       	in	r0, 0x3f	; 63
    63f2:	f8 94       	cli
    63f4:	de bf       	out	0x3e, r29	; 62
    63f6:	0f be       	out	0x3f, r0	; 63
    63f8:	cd bf       	out	0x3d, r28	; 61
    63fa:	6c 01       	movw	r12, r24
    63fc:	f6 2e       	mov	r15, r22
    63fe:	5a 01       	movw	r10, r20
	    sprintf_P(strSend,PSTR("Date[%s]"),srcDate);
		uart_print(1,1,strSend);
     #endif
    

	 StrPosCopy(srcDate,AddYear,strlen(srcDate)-2,2);
    6400:	fc 01       	movw	r30, r24
    6402:	01 90       	ld	r0, Z+
    6404:	00 20       	and	r0, r0
    6406:	e9 f7       	brne	.-6      	; 0x6402 <GenerateGeniusCode+0x2c>
    6408:	e8 1b       	sub	r30, r24
    640a:	f9 0b       	sbc	r31, r25
    640c:	33 97       	sbiw	r30, 0x03	; 3
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    640e:	e8 0f       	add	r30, r24
    6410:	f9 1f       	adc	r31, r25
    6412:	80 81       	ld	r24, Z
    6414:	89 83       	std	Y+1, r24	; 0x01
    6416:	81 81       	ldd	r24, Z+1	; 0x01
    6418:	8a 83       	std	Y+2, r24	; 0x02
	 }Dest[Length]=0;
    641a:	1b 82       	std	Y+3, r1	; 0x03
    #ifdef DEBUG_GENIUS_CODE
	    sprintf_P(strSend,PSTR("Year:[%s]"),AddYear);
		uart_print(1,1,strSend);
     #endif

	 sprintf_P(SYear,PSTR("20%s"),AddYear);
    641c:	00 d0       	rcall	.+0      	; 0x641e <GenerateGeniusCode+0x48>
    641e:	00 d0       	rcall	.+0      	; 0x6420 <GenerateGeniusCode+0x4a>
    6420:	00 d0       	rcall	.+0      	; 0x6422 <GenerateGeniusCode+0x4c>
    6422:	ed b7       	in	r30, 0x3d	; 61
    6424:	fe b7       	in	r31, 0x3e	; 62
    6426:	31 96       	adiw	r30, 0x01	; 1
    6428:	8e 01       	movw	r16, r28
    642a:	0c 5f       	subi	r16, 0xFC	; 252
    642c:	1f 4f       	sbci	r17, 0xFF	; 255
    642e:	ad b7       	in	r26, 0x3d	; 61
    6430:	be b7       	in	r27, 0x3e	; 62
    6432:	12 96       	adiw	r26, 0x02	; 2
    6434:	1c 93       	st	X, r17
    6436:	0e 93       	st	-X, r16
    6438:	11 97       	sbiw	r26, 0x01	; 1
    643a:	8f e0       	ldi	r24, 0x0F	; 15
    643c:	9a e1       	ldi	r25, 0x1A	; 26
    643e:	93 83       	std	Z+3, r25	; 0x03
    6440:	82 83       	std	Z+2, r24	; 0x02
    6442:	ce 01       	movw	r24, r28
    6444:	01 96       	adiw	r24, 0x01	; 1
    6446:	95 83       	std	Z+5, r25	; 0x05
    6448:	84 83       	std	Z+4, r24	; 0x04
    644a:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	 StrPosPaste(SYear,srcDate,strlen(srcDate)-2,strlen(SYear));
    644e:	d6 01       	movw	r26, r12
    6450:	0d 90       	ld	r0, X+
    6452:	00 20       	and	r0, r0
    6454:	e9 f7       	brne	.-6      	; 0x6450 <GenerateGeniusCode+0x7a>
    6456:	ac 19       	sub	r26, r12
    6458:	bd 09       	sbc	r27, r13
    645a:	f8 01       	movw	r30, r16
    645c:	01 90       	ld	r0, Z+
    645e:	00 20       	and	r0, r0
    6460:	e9 f7       	brne	.-6      	; 0x645c <GenerateGeniusCode+0x86>
    6462:	31 97       	sbiw	r30, 0x01	; 1
    6464:	e0 1b       	sub	r30, r16
    6466:	f1 0b       	sbc	r31, r17
    6468:	8d b7       	in	r24, 0x3d	; 61
    646a:	9e b7       	in	r25, 0x3e	; 62
    646c:	06 96       	adiw	r24, 0x06	; 6
    646e:	0f b6       	in	r0, 0x3f	; 63
    6470:	f8 94       	cli
    6472:	9e bf       	out	0x3e, r25	; 62
    6474:	0f be       	out	0x3f, r0	; 63
    6476:	8d bf       	out	0x3d, r24	; 61
    6478:	13 97       	sbiw	r26, 0x03	; 3
    647a:	c8 01       	movw	r24, r16
    647c:	b6 01       	movw	r22, r12
    647e:	ad 01       	movw	r20, r26
    6480:	9f 01       	movw	r18, r30
    6482:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <StrPosPaste>
	 #ifdef DEBUG_GENIUS_CODE
	    sprintf_P(strSend,PSTR("NewDate[%s]"),srcDate);
		uart_print(1,1,strSend);
     #endif

	 sprintf_P(strDestCode,PSTR("%c"),cSeed);     
    6486:	00 d0       	rcall	.+0      	; 0x6488 <GenerateGeniusCode+0xb2>
    6488:	00 d0       	rcall	.+0      	; 0x648a <GenerateGeniusCode+0xb4>
    648a:	00 d0       	rcall	.+0      	; 0x648c <GenerateGeniusCode+0xb6>
    648c:	ed b7       	in	r30, 0x3d	; 61
    648e:	fe b7       	in	r31, 0x3e	; 62
    6490:	31 96       	adiw	r30, 0x01	; 1
    6492:	ad b7       	in	r26, 0x3d	; 61
    6494:	be b7       	in	r27, 0x3e	; 62
    6496:	12 96       	adiw	r26, 0x02	; 2
    6498:	bc 92       	st	X, r11
    649a:	ae 92       	st	-X, r10
    649c:	11 97       	sbiw	r26, 0x01	; 1
    649e:	8c e0       	ldi	r24, 0x0C	; 12
    64a0:	9a e1       	ldi	r25, 0x1A	; 26
    64a2:	93 83       	std	Z+3, r25	; 0x03
    64a4:	82 83       	std	Z+2, r24	; 0x02
    64a6:	f4 82       	std	Z+4, r15	; 0x04
    64a8:	15 82       	std	Z+5, r1	; 0x05
    64aa:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
    64ae:	ee 24       	eor	r14, r14
    64b0:	e3 94       	inc	r14
    64b2:	ed b7       	in	r30, 0x3d	; 61
    64b4:	fe b7       	in	r31, 0x3e	; 62
    64b6:	36 96       	adiw	r30, 0x06	; 6
    64b8:	0f b6       	in	r0, 0x3f	; 63
    64ba:	f8 94       	cli
    64bc:	fe bf       	out	0x3e, r31	; 62
    64be:	0f be       	out	0x3f, r0	; 63
    64c0:	ed bf       	out	0x3d, r30	; 61
	 GCalcOpt=G_PLUS;
	 for (i=1;i<strlen(srcDate);i++){
	      strDestCode[i]='0'+GeniusCalc(GCalcOpt,(cSeed-'0'),(srcDate[i]-'0'));	 
    64c2:	f0 ed       	ldi	r31, 0xD0	; 208
    64c4:	ff 0e       	add	r15, r31
    64c6:	0f c0       	rjmp	.+30     	; 0x64e6 <GenerateGeniusCode+0x110>
    64c8:	f6 01       	movw	r30, r12
    64ca:	e0 0f       	add	r30, r16
    64cc:	f1 1f       	adc	r31, r17
    64ce:	40 81       	ld	r20, Z
    64d0:	40 53       	subi	r20, 0x30	; 48
    64d2:	80 e0       	ldi	r24, 0x00	; 0
    64d4:	6f 2d       	mov	r22, r15
    64d6:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <GeniusCalc>
    64da:	0a 0d       	add	r16, r10
    64dc:	1b 1d       	adc	r17, r11
    64de:	80 5d       	subi	r24, 0xD0	; 208
    64e0:	d8 01       	movw	r26, r16
    64e2:	8c 93       	st	X, r24
		uart_print(1,1,strSend);
     #endif

	 sprintf_P(strDestCode,PSTR("%c"),cSeed);     
	 GCalcOpt=G_PLUS;
	 for (i=1;i<strlen(srcDate);i++){
    64e4:	e3 94       	inc	r14
    64e6:	0e 2d       	mov	r16, r14
    64e8:	10 e0       	ldi	r17, 0x00	; 0
    64ea:	d6 01       	movw	r26, r12
    64ec:	0d 90       	ld	r0, X+
    64ee:	00 20       	and	r0, r0
    64f0:	e9 f7       	brne	.-6      	; 0x64ec <GenerateGeniusCode+0x116>
    64f2:	11 97       	sbiw	r26, 0x01	; 1
    64f4:	ac 19       	sub	r26, r12
    64f6:	bd 09       	sbc	r27, r13
    64f8:	0a 17       	cp	r16, r26
    64fa:	1b 07       	cpc	r17, r27
    64fc:	28 f3       	brcs	.-54     	; 0x64c8 <GenerateGeniusCode+0xf2>
	      strDestCode[i]='0'+GeniusCalc(GCalcOpt,(cSeed-'0'),(srcDate[i]-'0'));	 
	 }strDestCode[strlen(srcDate)]=0;
    64fe:	aa 0d       	add	r26, r10
    6500:	bb 1d       	adc	r27, r11
    6502:	1c 92       	st	X, r1
	 #ifdef DEBUG_GENIUS_CODE
       sprintf_P(strSend,PSTR("1st:%s"),strDestCode);
	   uart_print(1,1,strSend);     
	 #endif

	 WrapCode(strDestCode);
    6504:	c5 01       	movw	r24, r10
    6506:	0e 94 ed 30 	call	0x61da	; 0x61da <WrapCode>
	 #ifdef DEBUG_GENIUS_CODE
	   sprintf_P(strSend,PSTR("Wrap:%s"),strDestCode);
	   uart_print(1,1,strSend);     
	 #endif
}
    650a:	28 96       	adiw	r28, 0x08	; 8
    650c:	0f b6       	in	r0, 0x3f	; 63
    650e:	f8 94       	cli
    6510:	de bf       	out	0x3e, r29	; 62
    6512:	0f be       	out	0x3f, r0	; 63
    6514:	cd bf       	out	0x3d, r28	; 61
    6516:	cf 91       	pop	r28
    6518:	df 91       	pop	r29
    651a:	1f 91       	pop	r17
    651c:	0f 91       	pop	r16
    651e:	ff 90       	pop	r15
    6520:	ef 90       	pop	r14
    6522:	df 90       	pop	r13
    6524:	cf 90       	pop	r12
    6526:	bf 90       	pop	r11
    6528:	af 90       	pop	r10
    652a:	08 95       	ret

0000652c <GeneratePrintInit>:





void GeneratePrintInit(){//Create Initialize Print 
    652c:	cf 92       	push	r12
    652e:	df 92       	push	r13
    6530:	ef 92       	push	r14
    6532:	ff 92       	push	r15
    6534:	0f 93       	push	r16
    6536:	1f 93       	push	r17
    6538:	df 93       	push	r29
    653a:	cf 93       	push	r28
    653c:	cd b7       	in	r28, 0x3d	; 61
    653e:	de b7       	in	r29, 0x3e	; 62
    6540:	62 97       	sbiw	r28, 0x12	; 18
    6542:	0f b6       	in	r0, 0x3f	; 63
    6544:	f8 94       	cli
    6546:	de bf       	out	0x3e, r29	; 62
    6548:	0f be       	out	0x3f, r0	; 63
    654a:	cd bf       	out	0x3d, r28	; 61
     char strVernum[6],strVerdate[12];
	 sprintf_P(strVernum,PSTR(VERSION_NUM));
    654c:	00 d0       	rcall	.+0      	; 0x654e <GeneratePrintInit+0x22>
    654e:	00 d0       	rcall	.+0      	; 0x6550 <GeneratePrintInit+0x24>
    6550:	6e 01       	movw	r12, r28
    6552:	08 94       	sec
    6554:	c1 1c       	adc	r12, r1
    6556:	d1 1c       	adc	r13, r1
    6558:	ad b7       	in	r26, 0x3d	; 61
    655a:	be b7       	in	r27, 0x3e	; 62
    655c:	12 96       	adiw	r26, 0x02	; 2
    655e:	dc 92       	st	X, r13
    6560:	ce 92       	st	-X, r12
    6562:	11 97       	sbiw	r26, 0x01	; 1
    6564:	8e e9       	ldi	r24, 0x9E	; 158
    6566:	9f e1       	ldi	r25, 0x1F	; 31
    6568:	14 96       	adiw	r26, 0x04	; 4
    656a:	9c 93       	st	X, r25
    656c:	8e 93       	st	-X, r24
    656e:	13 97       	sbiw	r26, 0x03	; 3
    6570:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	 sprintf_P(strVerdate,PSTR(VERSION_DATE));
    6574:	67 e0       	ldi	r22, 0x07	; 7
    6576:	e6 2e       	mov	r14, r22
    6578:	f1 2c       	mov	r15, r1
    657a:	ec 0e       	add	r14, r28
    657c:	fd 1e       	adc	r15, r29
    657e:	ed b7       	in	r30, 0x3d	; 61
    6580:	fe b7       	in	r31, 0x3e	; 62
    6582:	f2 82       	std	Z+2, r15	; 0x02
    6584:	e1 82       	std	Z+1, r14	; 0x01
    6586:	83 e9       	ldi	r24, 0x93	; 147
    6588:	9f e1       	ldi	r25, 0x1F	; 31
    658a:	94 83       	std	Z+4, r25	; 0x04
    658c:	83 83       	std	Z+3, r24	; 0x03
    658e:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
     sprintf_P(PrintBuffer,PSTR("\nGeNiUs Ticket Printer \n Version:%s\n Last Update %s \n Hanindo Automation Solutions \n www.hanindogroup.com\n\n\n\n\n\n\n\n"),strVernum,strVerdate);
    6592:	00 d0       	rcall	.+0      	; 0x6594 <GeneratePrintInit+0x68>
    6594:	00 d0       	rcall	.+0      	; 0x6596 <GeneratePrintInit+0x6a>
    6596:	ed b7       	in	r30, 0x3d	; 61
    6598:	fe b7       	in	r31, 0x3e	; 62
    659a:	31 96       	adiw	r30, 0x01	; 1
    659c:	0e e6       	ldi	r16, 0x6E	; 110
    659e:	14 e0       	ldi	r17, 0x04	; 4
    65a0:	ad b7       	in	r26, 0x3d	; 61
    65a2:	be b7       	in	r27, 0x3e	; 62
    65a4:	12 96       	adiw	r26, 0x02	; 2
    65a6:	1c 93       	st	X, r17
    65a8:	0e 93       	st	-X, r16
    65aa:	11 97       	sbiw	r26, 0x01	; 1
    65ac:	81 e2       	ldi	r24, 0x21	; 33
    65ae:	9f e1       	ldi	r25, 0x1F	; 31
    65b0:	93 83       	std	Z+3, r25	; 0x03
    65b2:	82 83       	std	Z+2, r24	; 0x02
    65b4:	d5 82       	std	Z+5, r13	; 0x05
    65b6:	c4 82       	std	Z+4, r12	; 0x04
    65b8:	f7 82       	std	Z+7, r15	; 0x07
    65ba:	e6 82       	std	Z+6, r14	; 0x06
    65bc:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	 uart_print(0,1,PrintBuffer);
    65c0:	ed b7       	in	r30, 0x3d	; 61
    65c2:	fe b7       	in	r31, 0x3e	; 62
    65c4:	38 96       	adiw	r30, 0x08	; 8
    65c6:	0f b6       	in	r0, 0x3f	; 63
    65c8:	f8 94       	cli
    65ca:	fe bf       	out	0x3e, r31	; 62
    65cc:	0f be       	out	0x3f, r0	; 63
    65ce:	ed bf       	out	0x3d, r30	; 61
    65d0:	80 e0       	ldi	r24, 0x00	; 0
    65d2:	61 e0       	ldi	r22, 0x01	; 1
    65d4:	a8 01       	movw	r20, r16
    65d6:	0e 94 da a8 	call	0x151b4	; 0x151b4 <uart_print>
	 LengthMessage81=strlen(PrintBuffer);
    65da:	f8 01       	movw	r30, r16
    65dc:	01 90       	ld	r0, Z+
    65de:	00 20       	and	r0, r0
    65e0:	e9 f7       	brne	.-6      	; 0x65dc <GeneratePrintInit+0xb0>
    65e2:	31 97       	sbiw	r30, 0x01	; 1
    65e4:	e0 1b       	sub	r30, r16
    65e6:	f1 0b       	sbc	r31, r17
    65e8:	f0 93 8e 01 	sts	0x018E, r31
    65ec:	e0 93 8d 01 	sts	0x018D, r30
	 //Spooling HFCx 0000
	 cmdPrint=0b00010000|(1<<PRN_PAPER_CUT);
    65f0:	80 e3       	ldi	r24, 0x30	; 48
    65f2:	80 93 b5 01 	sts	0x01B5, r24
	 IsFreePrinting=True;
    65f6:	81 e0       	ldi	r24, 0x01	; 1
    65f8:	80 93 a8 01 	sts	0x01A8, r24
}
    65fc:	62 96       	adiw	r28, 0x12	; 18
    65fe:	0f b6       	in	r0, 0x3f	; 63
    6600:	f8 94       	cli
    6602:	de bf       	out	0x3e, r29	; 62
    6604:	0f be       	out	0x3f, r0	; 63
    6606:	cd bf       	out	0x3d, r28	; 61
    6608:	cf 91       	pop	r28
    660a:	df 91       	pop	r29
    660c:	1f 91       	pop	r17
    660e:	0f 91       	pop	r16
    6610:	ff 90       	pop	r15
    6612:	ef 90       	pop	r14
    6614:	df 90       	pop	r13
    6616:	cf 90       	pop	r12
    6618:	08 95       	ret

0000661a <FormatCurrency>:
     DecCfg=eeprom_read_byte(&DefDecimalTotalVolume);
	 FormatDecimal(strRawVolume,DecCfg);
}


void FormatCurrency(char *strCurrency){// 5000000.00 5,000,000.00
    661a:	9f 92       	push	r9
    661c:	af 92       	push	r10
    661e:	bf 92       	push	r11
    6620:	cf 92       	push	r12
    6622:	df 92       	push	r13
    6624:	ef 92       	push	r14
    6626:	ff 92       	push	r15
    6628:	0f 93       	push	r16
    662a:	1f 93       	push	r17
    662c:	df 93       	push	r29
    662e:	cf 93       	push	r28
    6630:	cd b7       	in	r28, 0x3d	; 61
    6632:	de b7       	in	r29, 0x3e	; 62
    6634:	64 97       	sbiw	r28, 0x14	; 20
    6636:	0f b6       	in	r0, 0x3f	; 63
    6638:	f8 94       	cli
    663a:	de bf       	out	0x3e, r29	; 62
    663c:	0f be       	out	0x3f, r0	; 63
    663e:	cd bf       	out	0x3d, r28	; 61
    6640:	6c 01       	movw	r12, r24
     char i,dotPos=0,iPos=0,Length=0,nComa=0;//cPos=0,;
	 char fmtCurrency[20];
	 char CurrencyMark,DecimalMark;

	 CurrencyMark=eeprom_read_byte(&DefCurrencyMark);
    6642:	80 e4       	ldi	r24, 0x40	; 64
    6644:	90 e0       	ldi	r25, 0x00	; 0
    6646:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
    664a:	98 2e       	mov	r9, r24
	 DecimalMark=eeprom_read_byte(&DefDecimalMark);
    664c:	8f e3       	ldi	r24, 0x3F	; 63
    664e:	90 e0       	ldi	r25, 0x00	; 0
    6650:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>

	 Length=strlen(strCurrency);//123,456
    6654:	f6 01       	movw	r30, r12
    6656:	01 90       	ld	r0, Z+
    6658:	00 20       	and	r0, r0
    665a:	e9 f7       	brne	.-6      	; 0x6656 <FormatCurrency+0x3c>
    665c:	31 97       	sbiw	r30, 0x01	; 1
    665e:	ee 2e       	mov	r14, r30
    6660:	ec 18       	sub	r14, r12
    6662:	fe 01       	movw	r30, r28
    6664:	31 96       	adiw	r30, 0x01	; 1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    6666:	9e 01       	movw	r18, r28
    6668:	2b 5e       	subi	r18, 0xEB	; 235
    666a:	3f 4f       	sbci	r19, 0xFF	; 255
	     strMemory[i]=data;
    666c:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    666e:	e2 17       	cp	r30, r18
    6670:	f3 07       	cpc	r31, r19
    6672:	e1 f7       	brne	.-8      	; 0x666c <FormatCurrency+0x52>
    6674:	f6 01       	movw	r30, r12
    6676:	fe 2c       	mov	r15, r14
    6678:	90 e0       	ldi	r25, 0x00	; 0
    667a:	30 e0       	ldi	r19, 0x00	; 0
    667c:	09 c0       	rjmp	.+18     	; 0x6690 <FormatCurrency+0x76>
	 dotPos=Length;
	 nComa=0;
	 FillChar(fmtCurrency,sizeof(fmtCurrency),0);
	 //Detection
	 for(i=0;i<Length;i++){// 123,456 
	     if (strCurrency[i]==DecimalMark) dotPos=i;//3
    667e:	20 81       	ld	r18, Z
    6680:	28 17       	cp	r18, r24
    6682:	09 f4       	brne	.+2      	; 0x6686 <FormatCurrency+0x6c>
    6684:	f9 2e       	mov	r15, r25
		 if (strCurrency[i]==CurrencyMark) nComa++;//0
    6686:	29 15       	cp	r18, r9
    6688:	09 f4       	brne	.+2      	; 0x668c <FormatCurrency+0x72>
    668a:	3f 5f       	subi	r19, 0xFF	; 255
	 Length=strlen(strCurrency);//123,456
	 dotPos=Length;
	 nComa=0;
	 FillChar(fmtCurrency,sizeof(fmtCurrency),0);
	 //Detection
	 for(i=0;i<Length;i++){// 123,456 
    668c:	9f 5f       	subi	r25, 0xFF	; 255
    668e:	31 96       	adiw	r30, 0x01	; 1
    6690:	9e 15       	cp	r25, r14
    6692:	a8 f3       	brcs	.-22     	; 0x667e <FormatCurrency+0x64>
	     if (strCurrency[i]==DecimalMark) dotPos=i;//3
		 if (strCurrency[i]==CurrencyMark) nComa++;//0
	 }

	 if((nComa==0)&&(dotPos>3)){		 
    6694:	33 23       	and	r19, r19
    6696:	09 f0       	breq	.+2      	; 0x669a <FormatCurrency+0x80>
    6698:	5e c0       	rjmp	.+188    	; 0x6756 <FormatCurrency+0x13c>
    669a:	83 e0       	ldi	r24, 0x03	; 3
    669c:	8f 15       	cp	r24, r15
    669e:	08 f0       	brcs	.+2      	; 0x66a2 <FormatCurrency+0x88>
    66a0:	5a c0       	rjmp	.+180    	; 0x6756 <FormatCurrency+0x13c>
    66a2:	40 e0       	ldi	r20, 0x00	; 0
    66a4:	20 e0       	ldi	r18, 0x00	; 0
    66a6:	30 e0       	ldi	r19, 0x00	; 0
         iPos=0;
	     for(i=0;i<dotPos;i++){
	         if ((((dotPos-i)%3)==0)&&(i<(dotPos))&&(i>0)){ 
    66a8:	af 2c       	mov	r10, r15
    66aa:	bb 24       	eor	r11, r11
		        fmtCurrency[iPos]=CurrencyMark;
    66ac:	8e 01       	movw	r16, r28
    66ae:	0f 5f       	subi	r16, 0xFF	; 255
    66b0:	1f 4f       	sbci	r17, 0xFF	; 255
	 }

	 if((nComa==0)&&(dotPos>3)){		 
         iPos=0;
	     for(i=0;i<dotPos;i++){
	         if ((((dotPos-i)%3)==0)&&(i<(dotPos))&&(i>0)){ 
    66b2:	c5 01       	movw	r24, r10
    66b4:	82 1b       	sub	r24, r18
    66b6:	93 0b       	sbc	r25, r19
    66b8:	63 e0       	ldi	r22, 0x03	; 3
    66ba:	70 e0       	ldi	r23, 0x00	; 0
    66bc:	0e 94 79 aa 	call	0x154f2	; 0x154f2 <__divmodhi4>
    66c0:	89 2b       	or	r24, r25
    66c2:	49 f4       	brne	.+18     	; 0x66d6 <FormatCurrency+0xbc>
    66c4:	2f 15       	cp	r18, r15
    66c6:	38 f4       	brcc	.+14     	; 0x66d6 <FormatCurrency+0xbc>
    66c8:	22 23       	and	r18, r18
    66ca:	29 f0       	breq	.+10     	; 0x66d6 <FormatCurrency+0xbc>
		        fmtCurrency[iPos]=CurrencyMark;
    66cc:	f8 01       	movw	r30, r16
    66ce:	e4 0f       	add	r30, r20
    66d0:	f1 1d       	adc	r31, r1
    66d2:	90 82       	st	Z, r9
		        iPos++;
    66d4:	4f 5f       	subi	r20, 0xFF	; 255
		        }
		        fmtCurrency[iPos]=strCurrency[i];
    66d6:	d8 01       	movw	r26, r16
    66d8:	a4 0f       	add	r26, r20
    66da:	b1 1d       	adc	r27, r1
    66dc:	f6 01       	movw	r30, r12
    66de:	e2 0f       	add	r30, r18
    66e0:	f3 1f       	adc	r31, r19
    66e2:	80 81       	ld	r24, Z
    66e4:	8c 93       	st	X, r24
			    iPos++;
    66e6:	4f 5f       	subi	r20, 0xFF	; 255
			    fmtCurrency[iPos]=0;
    66e8:	f8 01       	movw	r30, r16
    66ea:	e4 0f       	add	r30, r20
    66ec:	f1 1d       	adc	r31, r1
    66ee:	10 82       	st	Z, r1
    66f0:	2f 5f       	subi	r18, 0xFF	; 255
    66f2:	3f 4f       	sbci	r19, 0xFF	; 255
		 if (strCurrency[i]==CurrencyMark) nComa++;//0
	 }

	 if((nComa==0)&&(dotPos>3)){		 
         iPos=0;
	     for(i=0;i<dotPos;i++){
    66f4:	2f 15       	cp	r18, r15
    66f6:	e8 f2       	brcs	.-70     	; 0x66b2 <FormatCurrency+0x98>
    66f8:	9f 2d       	mov	r25, r15
			    iPos++;
			    fmtCurrency[iPos]=0;
	         }
         
	     for(i=dotPos;i<Length;i++){
		        fmtCurrency[iPos]=strCurrency[i];
    66fa:	9e 01       	movw	r18, r28
    66fc:	2f 5f       	subi	r18, 0xFF	; 255
    66fe:	3f 4f       	sbci	r19, 0xFF	; 255
    6700:	0e c0       	rjmp	.+28     	; 0x671e <FormatCurrency+0x104>
    6702:	d9 01       	movw	r26, r18
    6704:	a4 0f       	add	r26, r20
    6706:	b1 1d       	adc	r27, r1
    6708:	f6 01       	movw	r30, r12
    670a:	e9 0f       	add	r30, r25
    670c:	f1 1d       	adc	r31, r1
    670e:	80 81       	ld	r24, Z
    6710:	8c 93       	st	X, r24
			    iPos++;
    6712:	4f 5f       	subi	r20, 0xFF	; 255
			    fmtCurrency[iPos]=0;
    6714:	f9 01       	movw	r30, r18
    6716:	e4 0f       	add	r30, r20
    6718:	f1 1d       	adc	r31, r1
    671a:	10 82       	st	Z, r1
		        fmtCurrency[iPos]=strCurrency[i];
			    iPos++;
			    fmtCurrency[iPos]=0;
	         }
         
	     for(i=dotPos;i<Length;i++){
    671c:	9f 5f       	subi	r25, 0xFF	; 255
    671e:	9e 15       	cp	r25, r14
    6720:	80 f3       	brcs	.-32     	; 0x6702 <FormatCurrency+0xe8>
    6722:	90 e0       	ldi	r25, 0x00	; 0
		        fmtCurrency[iPos]=strCurrency[i];
			    iPos++;
			    fmtCurrency[iPos]=0;
	         }
	      for(i=0;i<strlen(fmtCurrency);i++){
    6724:	9e 01       	movw	r18, r28
    6726:	2f 5f       	subi	r18, 0xFF	; 255
    6728:	3f 4f       	sbci	r19, 0xFF	; 255
    672a:	09 c0       	rjmp	.+18     	; 0x673e <FormatCurrency+0x124>
	          strCurrency[i]=fmtCurrency[i];
    672c:	f6 01       	movw	r30, r12
    672e:	ea 0f       	add	r30, r26
    6730:	fb 1f       	adc	r31, r27
    6732:	a2 0f       	add	r26, r18
    6734:	b3 1f       	adc	r27, r19
    6736:	8c 91       	ld	r24, X
    6738:	80 83       	st	Z, r24
			  strCurrency[i+1]=0;
    673a:	11 82       	std	Z+1, r1	; 0x01
	     for(i=dotPos;i<Length;i++){
		        fmtCurrency[iPos]=strCurrency[i];
			    iPos++;
			    fmtCurrency[iPos]=0;
	         }
	      for(i=0;i<strlen(fmtCurrency);i++){
    673c:	9f 5f       	subi	r25, 0xFF	; 255
    673e:	a9 2f       	mov	r26, r25
    6740:	b0 e0       	ldi	r27, 0x00	; 0
    6742:	f9 01       	movw	r30, r18
    6744:	01 90       	ld	r0, Z+
    6746:	00 20       	and	r0, r0
    6748:	e9 f7       	brne	.-6      	; 0x6744 <FormatCurrency+0x12a>
    674a:	31 97       	sbiw	r30, 0x01	; 1
    674c:	e2 1b       	sub	r30, r18
    674e:	f3 0b       	sbc	r31, r19
    6750:	ae 17       	cp	r26, r30
    6752:	bf 07       	cpc	r27, r31
    6754:	58 f3       	brcs	.-42     	; 0x672c <FormatCurrency+0x112>
	          strCurrency[i]=fmtCurrency[i];
			  strCurrency[i+1]=0;
	      }
     }      
}
    6756:	64 96       	adiw	r28, 0x14	; 20
    6758:	0f b6       	in	r0, 0x3f	; 63
    675a:	f8 94       	cli
    675c:	de bf       	out	0x3e, r29	; 62
    675e:	0f be       	out	0x3f, r0	; 63
    6760:	cd bf       	out	0x3d, r28	; 61
    6762:	cf 91       	pop	r28
    6764:	df 91       	pop	r29
    6766:	1f 91       	pop	r17
    6768:	0f 91       	pop	r16
    676a:	ff 90       	pop	r15
    676c:	ef 90       	pop	r14
    676e:	df 90       	pop	r13
    6770:	cf 90       	pop	r12
    6772:	bf 90       	pop	r11
    6774:	af 90       	pop	r10
    6776:	9f 90       	pop	r9
    6778:	08 95       	ret

0000677a <FormatDecimal>:

void TestLocalAccount(){

}

void FormatDecimal(char *strRawData, char DecimalCfg){// 9-> 0,009 0,234 123 
    677a:	ef 92       	push	r14
    677c:	ff 92       	push	r15
    677e:	0f 93       	push	r16
    6780:	1f 93       	push	r17
    6782:	df 93       	push	r29
    6784:	cf 93       	push	r28
    6786:	cd b7       	in	r28, 0x3d	; 61
    6788:	de b7       	in	r29, 0x3e	; 62
    678a:	64 97       	sbiw	r28, 0x14	; 20
    678c:	0f b6       	in	r0, 0x3f	; 63
    678e:	f8 94       	cli
    6790:	de bf       	out	0x3e, r29	; 62
    6792:	0f be       	out	0x3f, r0	; 63
    6794:	cd bf       	out	0x3d, r28	; 61
    6796:	8c 01       	movw	r16, r24
    6798:	f6 2e       	mov	r15, r22
     char i,iPos,CommaPos,Length=0;                 //1->0,01 
	 char strDecimalFormated[20];
	 char DecPointMark;
     if (DecimalCfg>0){    
    679a:	66 23       	and	r22, r22
    679c:	09 f4       	brne	.+2      	; 0x67a0 <FormatDecimal+0x26>
    679e:	55 c0       	rjmp	.+170    	; 0x684a <FormatDecimal+0xd0>
		 DecPointMark=eeprom_read_byte(&DefDecimalMark);	 
    67a0:	8f e3       	ldi	r24, 0x3F	; 63
    67a2:	90 e0       	ldi	r25, 0x00	; 0
    67a4:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
    67a8:	e8 2e       	mov	r14, r24
		 Length=strlen(strRawData);
    67aa:	f8 01       	movw	r30, r16
    67ac:	01 90       	ld	r0, Z+
    67ae:	00 20       	and	r0, r0
    67b0:	e9 f7       	brne	.-6      	; 0x67ac <FormatDecimal+0x32>
    67b2:	31 97       	sbiw	r30, 0x01	; 1
    67b4:	3e 2f       	mov	r19, r30
    67b6:	30 1b       	sub	r19, r16

		 if (Length>DecimalCfg)CommaPos=Length-DecimalCfg;
    67b8:	f3 16       	cp	r15, r19
    67ba:	c0 f5       	brcc	.+112    	; 0x682c <FormatDecimal+0xb2>
    67bc:	83 2f       	mov	r24, r19
    67be:	8f 19       	sub	r24, r15
    67c0:	f8 2e       	mov	r15, r24
    67c2:	b8 01       	movw	r22, r16
    67c4:	d8 01       	movw	r26, r16
    67c6:	20 e0       	ldi	r18, 0x00	; 0
    67c8:	90 e0       	ldi	r25, 0x00	; 0

		 
		 iPos=0;
		 for(i=0;i<Length;i++){
			 if (i==CommaPos){
				 strDecimalFormated[iPos]=DecPointMark;
    67ca:	ae 01       	movw	r20, r28
    67cc:	4f 5f       	subi	r20, 0xFF	; 255
    67ce:	5f 4f       	sbci	r21, 0xFF	; 255
    67d0:	0e c0       	rjmp	.+28     	; 0x67ee <FormatDecimal+0x74>
			 }

		 
		 iPos=0;
		 for(i=0;i<Length;i++){
			 if (i==CommaPos){
    67d2:	2f 15       	cp	r18, r15
    67d4:	29 f4       	brne	.+10     	; 0x67e0 <FormatDecimal+0x66>
				 strDecimalFormated[iPos]=DecPointMark;
    67d6:	fa 01       	movw	r30, r20
    67d8:	e9 0f       	add	r30, r25
    67da:	f1 1d       	adc	r31, r1
    67dc:	e0 82       	st	Z, r14
				 iPos++;
    67de:	9f 5f       	subi	r25, 0xFF	; 255
			}
			strDecimalFormated[iPos]=strRawData[i];
    67e0:	fa 01       	movw	r30, r20
    67e2:	e9 0f       	add	r30, r25
    67e4:	f1 1d       	adc	r31, r1
    67e6:	8d 91       	ld	r24, X+
    67e8:	80 83       	st	Z, r24
			//strDecimalFormated[iPos+1]=0;
			iPos++;
    67ea:	9f 5f       	subi	r25, 0xFF	; 255
			 CommaPos=1;
			 }

		 
		 iPos=0;
		 for(i=0;i<Length;i++){
    67ec:	2f 5f       	subi	r18, 0xFF	; 255
    67ee:	23 17       	cp	r18, r19
    67f0:	80 f3       	brcs	.-32     	; 0x67d2 <FormatDecimal+0x58>
				 iPos++;
			}
			strDecimalFormated[iPos]=strRawData[i];
			//strDecimalFormated[iPos+1]=0;
			iPos++;
		 }strDecimalFormated[iPos]=0;
    67f2:	9e 01       	movw	r18, r28
    67f4:	2f 5f       	subi	r18, 0xFF	; 255
    67f6:	3f 4f       	sbci	r19, 0xFF	; 255
    67f8:	f9 01       	movw	r30, r18
    67fa:	e9 0f       	add	r30, r25
    67fc:	f1 1d       	adc	r31, r1
    67fe:	10 82       	st	Z, r1
		 
         //uart_print(1,1,strDecimalFormated); 

		 Length=strlen(strDecimalFormated);
    6800:	f9 01       	movw	r30, r18
    6802:	01 90       	ld	r0, Z+
    6804:	00 20       	and	r0, r0
    6806:	e9 f7       	brne	.-6      	; 0x6802 <FormatDecimal+0x88>
    6808:	31 97       	sbiw	r30, 0x01	; 1
    680a:	9e 2f       	mov	r25, r30
    680c:	92 1b       	sub	r25, r18
    680e:	d9 01       	movw	r26, r18
    6810:	04 c0       	rjmp	.+8      	; 0x681a <FormatDecimal+0xa0>
		 for(i=0;i<Length;i++){
			 strRawData[i]=strDecimalFormated[i];
    6812:	8d 91       	ld	r24, X+
    6814:	fb 01       	movw	r30, r22
    6816:	81 93       	st	Z+, r24
    6818:	bf 01       	movw	r22, r30
		 }strDecimalFormated[iPos]=0;
		 
         //uart_print(1,1,strDecimalFormated); 

		 Length=strlen(strDecimalFormated);
		 for(i=0;i<Length;i++){
    681a:	8a 2f       	mov	r24, r26
    681c:	82 1b       	sub	r24, r18
    681e:	89 17       	cp	r24, r25
    6820:	c0 f3       	brcs	.-16     	; 0x6812 <FormatDecimal+0x98>
			 strRawData[i]=strDecimalFormated[i];
		 }strRawData[Length]=0;
    6822:	09 0f       	add	r16, r25
    6824:	11 1d       	adc	r17, r1
    6826:	f8 01       	movw	r30, r16
    6828:	10 82       	st	Z, r1
    682a:	0f c0       	rjmp	.+30     	; 0x684a <FormatDecimal+0xd0>
		 if (Length>DecimalCfg)CommaPos=Length-DecimalCfg;
		 else CommaPos=1;


		 if (Length<=DecimalCfg){// 123 -> 0123
			 AddZeroLead(strRawData,(DecimalCfg+1));
    682c:	f3 94       	inc	r15
    682e:	c8 01       	movw	r24, r16
    6830:	6f 2d       	mov	r22, r15
    6832:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <AddZeroLead>
			 //AddZeroLead(strRawData,(DecimalCfg+2));
			 Length=strlen(strRawData);
    6836:	f8 01       	movw	r30, r16
    6838:	01 90       	ld	r0, Z+
    683a:	00 20       	and	r0, r0
    683c:	e9 f7       	brne	.-6      	; 0x6838 <FormatDecimal+0xbe>
    683e:	31 97       	sbiw	r30, 0x01	; 1
    6840:	3e 2f       	mov	r19, r30
    6842:	30 1b       	sub	r19, r16
    6844:	ff 24       	eor	r15, r15
    6846:	f3 94       	inc	r15
    6848:	bc cf       	rjmp	.-136    	; 0x67c2 <FormatDecimal+0x48>
		 for(i=0;i<Length;i++){
			 strRawData[i]=strDecimalFormated[i];
		 }strRawData[Length]=0;
	 }
          //uart_print(1,1,strRawData); 
}
    684a:	64 96       	adiw	r28, 0x14	; 20
    684c:	0f b6       	in	r0, 0x3f	; 63
    684e:	f8 94       	cli
    6850:	de bf       	out	0x3e, r29	; 62
    6852:	0f be       	out	0x3f, r0	; 63
    6854:	cd bf       	out	0x3d, r28	; 61
    6856:	cf 91       	pop	r28
    6858:	df 91       	pop	r29
    685a:	1f 91       	pop	r17
    685c:	0f 91       	pop	r16
    685e:	ff 90       	pop	r15
    6860:	ef 90       	pop	r14
    6862:	08 95       	ret

00006864 <NormalizeDecimal>:
	 Result=(SigmaSum%255);
	 if (Result==0)Result=255;
   return Result;
}

void NormalizeDecimal(char CurrentDecimal, char NewDecimal, char *Result){// 01234567,89
    6864:	68 2f       	mov	r22, r24
    6866:	ca 01       	movw	r24, r20
		 StrPosCopy(Result,SResult,DeltaDec,Length-DeltaDec);
		 	           
	 
     }
*/
     FormatDecimal(Result,CurrentDecimal);
    6868:	0e 94 bd 33 	call	0x677a	; 0x677a <FormatDecimal>
}
    686c:	08 95       	ret

0000686e <FormatTotalizerVolume>:
     char DecCfg;
     DecCfg=eeprom_read_byte(&DefDecimalTotalMoney);
	 FormatDecimal(strRawMoney,DecCfg);
}

void FormatTotalizerVolume(char *strRawVolume){//96->0,96 
    686e:	0f 93       	push	r16
    6870:	1f 93       	push	r17
    6872:	8c 01       	movw	r16, r24
     char DecCfg;
     DecCfg=eeprom_read_byte(&DefDecimalTotalVolume);
    6874:	8d e3       	ldi	r24, 0x3D	; 61
    6876:	90 e0       	ldi	r25, 0x00	; 0
    6878:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
    687c:	68 2f       	mov	r22, r24
	 FormatDecimal(strRawVolume,DecCfg);
    687e:	c8 01       	movw	r24, r16
    6880:	0e 94 bd 33 	call	0x677a	; 0x677a <FormatDecimal>
}
    6884:	1f 91       	pop	r17
    6886:	0f 91       	pop	r16
    6888:	08 95       	ret

0000688a <FormatTotalizerMoney>:
     char DecCfg;
     DecCfg=eeprom_read_byte(&DefDecimalVolume);
	 FormatDecimal(strRawVolume,DecCfg);
}

void FormatTotalizerMoney(char *strRawMoney){
    688a:	0f 93       	push	r16
    688c:	1f 93       	push	r17
    688e:	8c 01       	movw	r16, r24
     char DecCfg;
     DecCfg=eeprom_read_byte(&DefDecimalTotalMoney);
    6890:	8e e3       	ldi	r24, 0x3E	; 62
    6892:	90 e0       	ldi	r25, 0x00	; 0
    6894:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
    6898:	68 2f       	mov	r22, r24
	 FormatDecimal(strRawMoney,DecCfg);
    689a:	c8 01       	movw	r24, r16
    689c:	0e 94 bd 33 	call	0x677a	; 0x677a <FormatDecimal>
}
    68a0:	1f 91       	pop	r17
    68a2:	0f 91       	pop	r16
    68a4:	08 95       	ret

000068a6 <FormatVolume>:
     char DecCfg;
     DecCfg=eeprom_read_byte(&DefDecimalMoney);
	 FormatDecimal(strRawMoney,DecCfg);
}

void FormatVolume(char *strRawVolume){//96->0,96 
    68a6:	0f 93       	push	r16
    68a8:	1f 93       	push	r17
    68aa:	8c 01       	movw	r16, r24
     char DecCfg;
     DecCfg=eeprom_read_byte(&DefDecimalVolume);
    68ac:	8a e3       	ldi	r24, 0x3A	; 58
    68ae:	90 e0       	ldi	r25, 0x00	; 0
    68b0:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
    68b4:	68 2f       	mov	r22, r24
	 FormatDecimal(strRawVolume,DecCfg);
    68b6:	c8 01       	movw	r24, r16
    68b8:	0e 94 bd 33 	call	0x677a	; 0x677a <FormatDecimal>
}
    68bc:	1f 91       	pop	r17
    68be:	0f 91       	pop	r16
    68c0:	08 95       	ret

000068c2 <FormatMoney>:
     char DecCfg;
     DecCfg=eeprom_read_byte(&DefDecimalPrice);
	 FormatDecimal(strRawPrice,DecCfg);
}

void FormatMoney(char *strRawMoney){
    68c2:	0f 93       	push	r16
    68c4:	1f 93       	push	r17
    68c6:	8c 01       	movw	r16, r24
     char DecCfg;
     DecCfg=eeprom_read_byte(&DefDecimalMoney);
    68c8:	8b e3       	ldi	r24, 0x3B	; 59
    68ca:	90 e0       	ldi	r25, 0x00	; 0
    68cc:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
    68d0:	68 2f       	mov	r22, r24
	 FormatDecimal(strRawMoney,DecCfg);
    68d2:	c8 01       	movw	r24, r16
    68d4:	0e 94 bd 33 	call	0x677a	; 0x677a <FormatDecimal>
}
    68d8:	1f 91       	pop	r17
    68da:	0f 91       	pop	r16
    68dc:	08 95       	ret

000068de <FormatPrice>:
		 }strRawData[Length]=0;
	 }
          //uart_print(1,1,strRawData); 
}

void FormatPrice(char *strRawPrice){
    68de:	0f 93       	push	r16
    68e0:	1f 93       	push	r17
    68e2:	8c 01       	movw	r16, r24
     char DecCfg;
     DecCfg=eeprom_read_byte(&DefDecimalPrice);
    68e4:	89 e3       	ldi	r24, 0x39	; 57
    68e6:	90 e0       	ldi	r25, 0x00	; 0
    68e8:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
    68ec:	68 2f       	mov	r22, r24
	 FormatDecimal(strRawPrice,DecCfg);
    68ee:	c8 01       	movw	r24, r16
    68f0:	0e 94 bd 33 	call	0x677a	; 0x677a <FormatDecimal>
}
    68f4:	1f 91       	pop	r17
    68f6:	0f 91       	pop	r16
    68f8:	08 95       	ret

000068fa <systemGenerateReport>:
	 }
}

//Spooling HFCS 0000 : Header, Footer, Copy , Scrool [Copy:16x max]
//			cmdPrint=procMessage81();
void systemGenerateReport(){
    68fa:	2f 92       	push	r2
    68fc:	3f 92       	push	r3
    68fe:	4f 92       	push	r4
    6900:	5f 92       	push	r5
    6902:	6f 92       	push	r6
    6904:	7f 92       	push	r7
    6906:	8f 92       	push	r8
    6908:	9f 92       	push	r9
    690a:	af 92       	push	r10
    690c:	bf 92       	push	r11
    690e:	cf 92       	push	r12
    6910:	df 92       	push	r13
    6912:	ef 92       	push	r14
    6914:	ff 92       	push	r15
    6916:	0f 93       	push	r16
    6918:	1f 93       	push	r17
    691a:	df 93       	push	r29
    691c:	cf 93       	push	r28
    691e:	cd b7       	in	r28, 0x3d	; 61
    6920:	de b7       	in	r29, 0x3e	; 62
    6922:	cb 5f       	subi	r28, 0xFB	; 251
    6924:	d0 40       	sbci	r29, 0x00	; 0
    6926:	0f b6       	in	r0, 0x3f	; 63
    6928:	f8 94       	cli
    692a:	de bf       	out	0x3e, r29	; 62
    692c:	0f be       	out	0x3f, r0	; 63
    692e:	cd bf       	out	0x3d, r28	; 61
	   char strTabSpace[20],strTabSpace2[20];
	   char iTotal;//,PadLength;
	   char sPrice[10],strProductPrice[20];
	   char FIPAddr;

     switch(stGenerateReport){
    6930:	10 91 e8 01 	lds	r17, 0x01E8
    6934:	16 30       	cpi	r17, 0x06	; 6
    6936:	09 f4       	brne	.+2      	; 0x693a <systemGenerateReport+0x40>
    6938:	4d c2       	rjmp	.+1178   	; 0x6dd4 <systemGenerateReport+0x4da>
    693a:	17 30       	cpi	r17, 0x07	; 7
    693c:	98 f4       	brcc	.+38     	; 0x6964 <systemGenerateReport+0x6a>
    693e:	12 30       	cpi	r17, 0x02	; 2
    6940:	09 f4       	brne	.+2      	; 0x6944 <systemGenerateReport+0x4a>
    6942:	a3 c0       	rjmp	.+326    	; 0x6a8a <systemGenerateReport+0x190>
    6944:	13 30       	cpi	r17, 0x03	; 3
    6946:	38 f4       	brcc	.+14     	; 0x6956 <systemGenerateReport+0x5c>
    6948:	11 23       	and	r17, r17
    694a:	31 f1       	breq	.+76     	; 0x6998 <systemGenerateReport+0x9e>
    694c:	11 30       	cpi	r17, 0x01	; 1
    694e:	11 f0       	breq	.+4      	; 0x6954 <systemGenerateReport+0x5a>
    6950:	0c 94 b4 3e 	jmp	0x7d68	; 0x7d68 <systemGenerateReport+0x146e>
    6954:	2d c0       	rjmp	.+90     	; 0x69b0 <systemGenerateReport+0xb6>
    6956:	14 30       	cpi	r17, 0x04	; 4
    6958:	09 f4       	brne	.+2      	; 0x695c <systemGenerateReport+0x62>
    695a:	bb c1       	rjmp	.+886    	; 0x6cd2 <systemGenerateReport+0x3d8>
    695c:	15 30       	cpi	r17, 0x05	; 5
    695e:	08 f0       	brcs	.+2      	; 0x6962 <systemGenerateReport+0x68>
    6960:	9a c6       	rjmp	.+3380   	; 0x7696 <systemGenerateReport+0xd9c>
    6962:	ae c1       	rjmp	.+860    	; 0x6cc0 <systemGenerateReport+0x3c6>
    6964:	19 30       	cpi	r17, 0x09	; 9
    6966:	09 f4       	brne	.+2      	; 0x696a <systemGenerateReport+0x70>
    6968:	96 c6       	rjmp	.+3372   	; 0x7696 <systemGenerateReport+0xd9c>
    696a:	1a 30       	cpi	r17, 0x0A	; 10
    696c:	40 f4       	brcc	.+16     	; 0x697e <systemGenerateReport+0x84>
    696e:	17 30       	cpi	r17, 0x07	; 7
    6970:	09 f4       	brne	.+2      	; 0x6974 <systemGenerateReport+0x7a>
    6972:	92 c2       	rjmp	.+1316   	; 0x6e98 <systemGenerateReport+0x59e>
    6974:	18 30       	cpi	r17, 0x08	; 8
    6976:	11 f0       	breq	.+4      	; 0x697c <systemGenerateReport+0x82>
    6978:	0c 94 b4 3e 	jmp	0x7d68	; 0x7d68 <systemGenerateReport+0x146e>
    697c:	9a c2       	rjmp	.+1332   	; 0x6eb2 <systemGenerateReport+0x5b8>
    697e:	1b 30       	cpi	r17, 0x0B	; 11
    6980:	11 f4       	brne	.+4      	; 0x6986 <systemGenerateReport+0x8c>
    6982:	0c 94 a7 3e 	jmp	0x7d4e	; 0x7d4e <systemGenerateReport+0x1454>
    6986:	1b 30       	cpi	r17, 0x0B	; 11
    6988:	08 f4       	brcc	.+2      	; 0x698c <systemGenerateReport+0x92>
    698a:	8c c6       	rjmp	.+3352   	; 0x76a4 <systemGenerateReport+0xdaa>
    698c:	1c 30       	cpi	r17, 0x0C	; 12
    698e:	11 f0       	breq	.+4      	; 0x6994 <systemGenerateReport+0x9a>
    6990:	0c 94 b4 3e 	jmp	0x7d68	; 0x7d68 <systemGenerateReport+0x146e>
    6994:	0c 94 af 3e 	jmp	0x7d5e	; 0x7d5e <systemGenerateReport+0x1464>
	 case grScanAction://Wait for Complete incoming Totalizer data	      
		  if (IsGenerateReport==True){
    6998:	80 91 86 01 	lds	r24, 0x0186
    699c:	81 30       	cpi	r24, 0x01	; 1
    699e:	11 f0       	breq	.+4      	; 0x69a4 <systemGenerateReport+0xaa>
    69a0:	0c 94 b4 3e 	jmp	0x7d68	; 0x7d68 <systemGenerateReport+0x146e>
		      IsGenerateReport=False;
    69a4:	10 92 86 01 	sts	0x0186, r1
			  IsFinishPrintingTotalizer=False;
    69a8:	10 92 87 01 	sts	0x0187, r1
    69ac:	0c 94 ac 3e 	jmp	0x7d58	; 0x7d58 <systemGenerateReport+0x145e>
			  stGenerateReport=grInitData;
		  }
	      break;
	 case grInitData:
	      xPump=1;
    69b0:	10 93 e7 01 	sts	0x01E7, r17
		  xNozzle=1;
    69b4:	10 93 e6 01 	sts	0x01E6, r17
		  RepPos=0;
    69b8:	10 92 d7 01 	sts	0x01D7, r1
    69bc:	10 92 d6 01 	sts	0x01D6, r1
    69c0:	ee e6       	ldi	r30, 0x6E	; 110
    69c2:	f4 e0       	ldi	r31, 0x04	; 4
}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
	     strMemory[i]=data;
    69c4:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    69c6:	85 e0       	ldi	r24, 0x05	; 5
    69c8:	ef 3f       	cpi	r30, 0xFF	; 255
    69ca:	f8 07       	cpc	r31, r24
    69cc:	d9 f7       	brne	.-10     	; 0x69c4 <systemGenerateReport+0xca>
    69ce:	fe 01       	movw	r30, r28
    69d0:	eb 55       	subi	r30, 0x5B	; 91
    69d2:	ff 4f       	sbci	r31, 0xFF	; 255
	     strMemory[i]=data;
    69d4:	ce 01       	movw	r24, r28
    69d6:	8b 50       	subi	r24, 0x0B	; 11
    69d8:	9f 4f       	sbci	r25, 0xFF	; 255
    69da:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    69dc:	e8 17       	cp	r30, r24
    69de:	f9 07       	cpc	r31, r25
    69e0:	e1 f7       	brne	.-8      	; 0x69da <systemGenerateReport+0xe0>
    69e2:	fe 01       	movw	r30, r28
    69e4:	f7 96       	adiw	r30, 0x37	; 55
	     strMemory[i]=data;
    69e6:	cf 01       	movw	r24, r30
    69e8:	0f 96       	adiw	r24, 0x0f	; 15
    69ea:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    69ec:	e8 17       	cp	r30, r24
    69ee:	f9 07       	cpc	r31, r25
    69f0:	e1 f7       	brne	.-8      	; 0x69ea <systemGenerateReport+0xf0>
    69f2:	fe 01       	movw	r30, r28
    69f4:	ea 5b       	subi	r30, 0xBA	; 186
    69f6:	ff 4f       	sbci	r31, 0xFF	; 255
	     strMemory[i]=data;
    69f8:	cf 01       	movw	r24, r30
    69fa:	0f 96       	adiw	r24, 0x0f	; 15
    69fc:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    69fe:	e8 17       	cp	r30, r24
    6a00:	f9 07       	cpc	r31, r25
    6a02:	e1 f7       	brne	.-8      	; 0x69fc <systemGenerateReport+0x102>
    6a04:	e9 e7       	ldi	r30, 0x79	; 121
    6a06:	f8 e0       	ldi	r31, 0x08	; 8
	     strMemory[i]=data;
    6a08:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    6a0a:	98 e0       	ldi	r25, 0x08	; 8
    6a0c:	ed 38       	cpi	r30, 0x8D	; 141
    6a0e:	f9 07       	cpc	r31, r25
    6a10:	d9 f7       	brne	.-10     	; 0x6a08 <systemGenerateReport+0x10e>
    6a12:	ea e2       	ldi	r30, 0x2A	; 42
    6a14:	f9 e0       	ldi	r31, 0x09	; 9
	     strMemory[i]=data;
    6a16:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    6a18:	a9 e0       	ldi	r26, 0x09	; 9
    6a1a:	ee 33       	cpi	r30, 0x3E	; 62
    6a1c:	fa 07       	cpc	r31, r26
    6a1e:	d9 f7       	brne	.-10     	; 0x6a16 <systemGenerateReport+0x11c>
    6a20:	ef ea       	ldi	r30, 0xAF	; 175
    6a22:	fc e0       	ldi	r31, 0x0C	; 12
	     strMemory[i]=data;
    6a24:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    6a26:	bc e0       	ldi	r27, 0x0C	; 12
    6a28:	ee 3b       	cpi	r30, 0xBE	; 190
    6a2a:	fb 07       	cpc	r31, r27
    6a2c:	d9 f7       	brne	.-10     	; 0x6a24 <systemGenerateReport+0x12a>
    6a2e:	e7 e8       	ldi	r30, 0x87	; 135
    6a30:	f9 e0       	ldi	r31, 0x09	; 9
	     strMemory[i]=data;
    6a32:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    6a34:	89 e0       	ldi	r24, 0x09	; 9
    6a36:	e6 39       	cpi	r30, 0x96	; 150
    6a38:	f8 07       	cpc	r31, r24
    6a3a:	d9 f7       	brne	.-10     	; 0x6a32 <systemGenerateReport+0x138>
		  FillChar(strTotalMoney,sizeof(strTotalMoney),0);


		  FillChar(strDeltaMoney,sizeof(strDeltaMoney),0);
		  FillChar(strDeltaVolume,sizeof(strDeltaVolume),0);
		  sprintf_P(strShift,PSTR("%d"),eeprom_read_byte(&DefShift));
    6a3c:	80 e4       	ldi	r24, 0x40	; 64
    6a3e:	91 e0       	ldi	r25, 0x01	; 1
    6a40:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
    6a44:	00 d0       	rcall	.+0      	; 0x6a46 <systemGenerateReport+0x14c>
    6a46:	00 d0       	rcall	.+0      	; 0x6a48 <systemGenerateReport+0x14e>
    6a48:	00 d0       	rcall	.+0      	; 0x6a4a <systemGenerateReport+0x150>
    6a4a:	ed b7       	in	r30, 0x3d	; 61
    6a4c:	fe b7       	in	r31, 0x3e	; 62
    6a4e:	31 96       	adiw	r30, 0x01	; 1
    6a50:	2a ee       	ldi	r18, 0xEA	; 234
    6a52:	3c e0       	ldi	r19, 0x0C	; 12
    6a54:	ad b7       	in	r26, 0x3d	; 61
    6a56:	be b7       	in	r27, 0x3e	; 62
    6a58:	12 96       	adiw	r26, 0x02	; 2
    6a5a:	3c 93       	st	X, r19
    6a5c:	2e 93       	st	-X, r18
    6a5e:	11 97       	sbiw	r26, 0x01	; 1
    6a60:	25 e0       	ldi	r18, 0x05	; 5
    6a62:	37 e0       	ldi	r19, 0x07	; 7
    6a64:	33 83       	std	Z+3, r19	; 0x03
    6a66:	22 83       	std	Z+2, r18	; 0x02
    6a68:	84 83       	std	Z+4, r24	; 0x04
    6a6a:	15 82       	std	Z+5, r1	; 0x05
    6a6c:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>

          stGenerateReport=grCreateReportHeader;
    6a70:	82 e0       	ldi	r24, 0x02	; 2
    6a72:	80 93 e8 01 	sts	0x01E8, r24
    6a76:	ed b7       	in	r30, 0x3d	; 61
    6a78:	fe b7       	in	r31, 0x3e	; 62
    6a7a:	36 96       	adiw	r30, 0x06	; 6
    6a7c:	0f b6       	in	r0, 0x3f	; 63
    6a7e:	f8 94       	cli
    6a80:	fe bf       	out	0x3e, r31	; 62
    6a82:	0f be       	out	0x3f, r0	; 63
    6a84:	ed bf       	out	0x3d, r30	; 61
    6a86:	0c 94 b4 3e 	jmp	0x7d68	; 0x7d68 <systemGenerateReport+0x146e>
	      break;
	 case grCreateReportHeader://Border: btTopLeft,btTopCenter,btTopRight,btMiddleLeft,btMiddleCenter,btMiddleRight,btBottomLeft,btBottomCenter,btBottomRight,btVertical,btHorizontal
		  eeprom_read_block((void*) &LastShiftDateTime, (const void*) &DefLastShiftDateTime, sizeof(DefLastShiftDateTime));
    6a8a:	45 e5       	ldi	r20, 0x55	; 85
    6a8c:	e4 2e       	mov	r14, r20
    6a8e:	f1 2c       	mov	r15, r1
    6a90:	ec 0e       	add	r14, r28
    6a92:	fd 1e       	adc	r15, r29
    6a94:	c7 01       	movw	r24, r14
    6a96:	64 e4       	ldi	r22, 0x44	; 68
    6a98:	78 e0       	ldi	r23, 0x08	; 8
    6a9a:	44 e1       	ldi	r20, 0x14	; 20
    6a9c:	50 e0       	ldi	r21, 0x00	; 0
    6a9e:	0e 94 1b ad 	call	0x15a36	; 0x15a36 <__eerd_block_m128>
          
		  InserBorder(btTopLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btTopRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);
    6aa2:	81 e0       	ldi	r24, 0x01	; 1
    6aa4:	6e e6       	ldi	r22, 0x6E	; 110
    6aa6:	74 e0       	ldi	r23, 0x04	; 4
    6aa8:	41 e0       	ldi	r20, 0x01	; 1
    6aaa:	26 ed       	ldi	r18, 0xD6	; 214
    6aac:	31 e0       	ldi	r19, 0x01	; 1
    6aae:	0e 94 84 1a 	call	0x3508	; 0x3508 <InserBorder>
    6ab2:	8b e0       	ldi	r24, 0x0B	; 11
    6ab4:	6e e6       	ldi	r22, 0x6E	; 110
    6ab6:	74 e0       	ldi	r23, 0x04	; 4
    6ab8:	4a e2       	ldi	r20, 0x2A	; 42
    6aba:	26 ed       	ldi	r18, 0xD6	; 214
    6abc:	31 e0       	ldi	r19, 0x01	; 1
    6abe:	0e 94 84 1a 	call	0x3508	; 0x3508 <InserBorder>
    6ac2:	83 e0       	ldi	r24, 0x03	; 3
    6ac4:	6e e6       	ldi	r22, 0x6E	; 110
    6ac6:	74 e0       	ldi	r23, 0x04	; 4
    6ac8:	41 e0       	ldi	r20, 0x01	; 1
    6aca:	26 ed       	ldi	r18, 0xD6	; 214
    6acc:	31 e0       	ldi	r19, 0x01	; 1
    6ace:	0e 94 84 1a 	call	0x3508	; 0x3508 <InserBorder>
    6ad2:	8c e0       	ldi	r24, 0x0C	; 12
    6ad4:	6e e6       	ldi	r22, 0x6E	; 110
    6ad6:	74 e0       	ldi	r23, 0x04	; 4
    6ad8:	41 e0       	ldi	r20, 0x01	; 1
    6ada:	26 ed       	ldi	r18, 0xD6	; 214
    6adc:	31 e0       	ldi	r19, 0x01	; 1
    6ade:	0e 94 84 1a 	call	0x3508	; 0x3508 <InserBorder>
	      sprintf_P(strReport,PSTR("        Laporan Tutup Shift: %s      "),strShift);CreateReport(strReport,PrintBuffer,&RepPos);
    6ae2:	00 d0       	rcall	.+0      	; 0x6ae4 <systemGenerateReport+0x1ea>
    6ae4:	00 d0       	rcall	.+0      	; 0x6ae6 <systemGenerateReport+0x1ec>
    6ae6:	00 d0       	rcall	.+0      	; 0x6ae8 <systemGenerateReport+0x1ee>
    6ae8:	ed b7       	in	r30, 0x3d	; 61
    6aea:	fe b7       	in	r31, 0x3e	; 62
    6aec:	31 96       	adiw	r30, 0x01	; 1
    6aee:	8e 01       	movw	r16, r28
    6af0:	0b 55       	subi	r16, 0x5B	; 91
    6af2:	1f 4f       	sbci	r17, 0xFF	; 255
    6af4:	ad b7       	in	r26, 0x3d	; 61
    6af6:	be b7       	in	r27, 0x3e	; 62
    6af8:	12 96       	adiw	r26, 0x02	; 2
    6afa:	1c 93       	st	X, r17
    6afc:	0e 93       	st	-X, r16
    6afe:	11 97       	sbiw	r26, 0x01	; 1
    6b00:	8f ed       	ldi	r24, 0xDF	; 223
    6b02:	96 e0       	ldi	r25, 0x06	; 6
    6b04:	93 83       	std	Z+3, r25	; 0x03
    6b06:	82 83       	std	Z+2, r24	; 0x02
    6b08:	8a ee       	ldi	r24, 0xEA	; 234
    6b0a:	9c e0       	ldi	r25, 0x0C	; 12
    6b0c:	95 83       	std	Z+5, r25	; 0x05
    6b0e:	84 83       	std	Z+4, r24	; 0x04
    6b10:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
    6b14:	ed b7       	in	r30, 0x3d	; 61
    6b16:	fe b7       	in	r31, 0x3e	; 62
    6b18:	36 96       	adiw	r30, 0x06	; 6
    6b1a:	0f b6       	in	r0, 0x3f	; 63
    6b1c:	f8 94       	cli
    6b1e:	fe bf       	out	0x3e, r31	; 62
    6b20:	0f be       	out	0x3f, r0	; 63
    6b22:	ed bf       	out	0x3d, r30	; 61
    6b24:	c8 01       	movw	r24, r16
    6b26:	6e e6       	ldi	r22, 0x6E	; 110
    6b28:	74 e0       	ldi	r23, 0x04	; 4
    6b2a:	46 ed       	ldi	r20, 0xD6	; 214
    6b2c:	51 e0       	ldi	r21, 0x01	; 1
    6b2e:	0e 94 15 22 	call	0x442a	; 0x442a <CreateReport>
		  InserBorder(btMiddleLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btMiddleRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);     
    6b32:	84 e0       	ldi	r24, 0x04	; 4
    6b34:	6e e6       	ldi	r22, 0x6E	; 110
    6b36:	74 e0       	ldi	r23, 0x04	; 4
    6b38:	41 e0       	ldi	r20, 0x01	; 1
    6b3a:	26 ed       	ldi	r18, 0xD6	; 214
    6b3c:	31 e0       	ldi	r19, 0x01	; 1
    6b3e:	0e 94 84 1a 	call	0x3508	; 0x3508 <InserBorder>
    6b42:	8b e0       	ldi	r24, 0x0B	; 11
    6b44:	6e e6       	ldi	r22, 0x6E	; 110
    6b46:	74 e0       	ldi	r23, 0x04	; 4
    6b48:	4a e2       	ldi	r20, 0x2A	; 42
    6b4a:	26 ed       	ldi	r18, 0xD6	; 214
    6b4c:	31 e0       	ldi	r19, 0x01	; 1
    6b4e:	0e 94 84 1a 	call	0x3508	; 0x3508 <InserBorder>
    6b52:	86 e0       	ldi	r24, 0x06	; 6
    6b54:	6e e6       	ldi	r22, 0x6E	; 110
    6b56:	74 e0       	ldi	r23, 0x04	; 4
    6b58:	41 e0       	ldi	r20, 0x01	; 1
    6b5a:	26 ed       	ldi	r18, 0xD6	; 214
    6b5c:	31 e0       	ldi	r19, 0x01	; 1
    6b5e:	0e 94 84 1a 	call	0x3508	; 0x3508 <InserBorder>
    6b62:	8c e0       	ldi	r24, 0x0C	; 12
    6b64:	6e e6       	ldi	r22, 0x6E	; 110
    6b66:	74 e0       	ldi	r23, 0x04	; 4
    6b68:	41 e0       	ldi	r20, 0x01	; 1
    6b6a:	26 ed       	ldi	r18, 0xD6	; 214
    6b6c:	31 e0       	ldi	r19, 0x01	; 1
    6b6e:	0e 94 84 1a 	call	0x3508	; 0x3508 <InserBorder>
	      sprintf_P(strReport,PSTR("Terminal ID : %.2d                   "),eeprom_read_byte(&DefIFT_ID));CreateReport(strReport,PrintBuffer,&RepPos);
    6b72:	80 e0       	ldi	r24, 0x00	; 0
    6b74:	90 e0       	ldi	r25, 0x00	; 0
    6b76:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
    6b7a:	00 d0       	rcall	.+0      	; 0x6b7c <systemGenerateReport+0x282>
    6b7c:	00 d0       	rcall	.+0      	; 0x6b7e <systemGenerateReport+0x284>
    6b7e:	00 d0       	rcall	.+0      	; 0x6b80 <systemGenerateReport+0x286>
    6b80:	ed b7       	in	r30, 0x3d	; 61
    6b82:	fe b7       	in	r31, 0x3e	; 62
    6b84:	31 96       	adiw	r30, 0x01	; 1
    6b86:	ad b7       	in	r26, 0x3d	; 61
    6b88:	be b7       	in	r27, 0x3e	; 62
    6b8a:	12 96       	adiw	r26, 0x02	; 2
    6b8c:	1c 93       	st	X, r17
    6b8e:	0e 93       	st	-X, r16
    6b90:	11 97       	sbiw	r26, 0x01	; 1
    6b92:	29 eb       	ldi	r18, 0xB9	; 185
    6b94:	36 e0       	ldi	r19, 0x06	; 6
    6b96:	33 83       	std	Z+3, r19	; 0x03
    6b98:	22 83       	std	Z+2, r18	; 0x02
    6b9a:	84 83       	std	Z+4, r24	; 0x04
    6b9c:	15 82       	std	Z+5, r1	; 0x05
    6b9e:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
    6ba2:	ed b7       	in	r30, 0x3d	; 61
    6ba4:	fe b7       	in	r31, 0x3e	; 62
    6ba6:	36 96       	adiw	r30, 0x06	; 6
    6ba8:	0f b6       	in	r0, 0x3f	; 63
    6baa:	f8 94       	cli
    6bac:	fe bf       	out	0x3e, r31	; 62
    6bae:	0f be       	out	0x3f, r0	; 63
    6bb0:	ed bf       	out	0x3d, r30	; 61
    6bb2:	c8 01       	movw	r24, r16
    6bb4:	6e e6       	ldi	r22, 0x6E	; 110
    6bb6:	74 e0       	ldi	r23, 0x04	; 4
    6bb8:	46 ed       	ldi	r20, 0xD6	; 214
    6bba:	51 e0       	ldi	r21, 0x01	; 1
    6bbc:	0e 94 15 22 	call	0x442a	; 0x442a <CreateReport>
	      sprintf_P(strReport,PSTR("Awal  Shift : %s "),LastShiftDateTime);             CreateReport(strReport,PrintBuffer,&RepPos);
    6bc0:	00 d0       	rcall	.+0      	; 0x6bc2 <systemGenerateReport+0x2c8>
    6bc2:	00 d0       	rcall	.+0      	; 0x6bc4 <systemGenerateReport+0x2ca>
    6bc4:	00 d0       	rcall	.+0      	; 0x6bc6 <systemGenerateReport+0x2cc>
    6bc6:	ed b7       	in	r30, 0x3d	; 61
    6bc8:	fe b7       	in	r31, 0x3e	; 62
    6bca:	31 96       	adiw	r30, 0x01	; 1
    6bcc:	ad b7       	in	r26, 0x3d	; 61
    6bce:	be b7       	in	r27, 0x3e	; 62
    6bd0:	12 96       	adiw	r26, 0x02	; 2
    6bd2:	1c 93       	st	X, r17
    6bd4:	0e 93       	st	-X, r16
    6bd6:	11 97       	sbiw	r26, 0x01	; 1
    6bd8:	87 ea       	ldi	r24, 0xA7	; 167
    6bda:	96 e0       	ldi	r25, 0x06	; 6
    6bdc:	93 83       	std	Z+3, r25	; 0x03
    6bde:	82 83       	std	Z+2, r24	; 0x02
    6be0:	f5 82       	std	Z+5, r15	; 0x05
    6be2:	e4 82       	std	Z+4, r14	; 0x04
    6be4:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
    6be8:	ed b7       	in	r30, 0x3d	; 61
    6bea:	fe b7       	in	r31, 0x3e	; 62
    6bec:	36 96       	adiw	r30, 0x06	; 6
    6bee:	0f b6       	in	r0, 0x3f	; 63
    6bf0:	f8 94       	cli
    6bf2:	fe bf       	out	0x3e, r31	; 62
    6bf4:	0f be       	out	0x3f, r0	; 63
    6bf6:	ed bf       	out	0x3d, r30	; 61
    6bf8:	c8 01       	movw	r24, r16
    6bfa:	6e e6       	ldi	r22, 0x6E	; 110
    6bfc:	74 e0       	ldi	r23, 0x04	; 4
    6bfe:	46 ed       	ldi	r20, 0xD6	; 214
    6c00:	51 e0       	ldi	r21, 0x01	; 1
    6c02:	0e 94 15 22 	call	0x442a	; 0x442a <CreateReport>
	      sprintf_P(strReport,PSTR("Akhir Shift : %s "),CurrentShiftDateTime);      CreateReport(strReport,PrintBuffer,&RepPos);
    6c06:	00 d0       	rcall	.+0      	; 0x6c08 <systemGenerateReport+0x30e>
    6c08:	00 d0       	rcall	.+0      	; 0x6c0a <systemGenerateReport+0x310>
    6c0a:	00 d0       	rcall	.+0      	; 0x6c0c <systemGenerateReport+0x312>
    6c0c:	ed b7       	in	r30, 0x3d	; 61
    6c0e:	fe b7       	in	r31, 0x3e	; 62
    6c10:	31 96       	adiw	r30, 0x01	; 1
    6c12:	ad b7       	in	r26, 0x3d	; 61
    6c14:	be b7       	in	r27, 0x3e	; 62
    6c16:	12 96       	adiw	r26, 0x02	; 2
    6c18:	1c 93       	st	X, r17
    6c1a:	0e 93       	st	-X, r16
    6c1c:	11 97       	sbiw	r26, 0x01	; 1
    6c1e:	85 e9       	ldi	r24, 0x95	; 149
    6c20:	96 e0       	ldi	r25, 0x06	; 6
    6c22:	93 83       	std	Z+3, r25	; 0x03
    6c24:	82 83       	std	Z+2, r24	; 0x02
    6c26:	80 e1       	ldi	r24, 0x10	; 16
    6c28:	98 e0       	ldi	r25, 0x08	; 8
    6c2a:	95 83       	std	Z+5, r25	; 0x05
    6c2c:	84 83       	std	Z+4, r24	; 0x04
    6c2e:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
    6c32:	ed b7       	in	r30, 0x3d	; 61
    6c34:	fe b7       	in	r31, 0x3e	; 62
    6c36:	36 96       	adiw	r30, 0x06	; 6
    6c38:	0f b6       	in	r0, 0x3f	; 63
    6c3a:	f8 94       	cli
    6c3c:	fe bf       	out	0x3e, r31	; 62
    6c3e:	0f be       	out	0x3f, r0	; 63
    6c40:	ed bf       	out	0x3d, r30	; 61
    6c42:	c8 01       	movw	r24, r16
    6c44:	6e e6       	ldi	r22, 0x6E	; 110
    6c46:	74 e0       	ldi	r23, 0x04	; 4
    6c48:	46 ed       	ldi	r20, 0xD6	; 214
    6c4a:	51 e0       	ldi	r21, 0x01	; 1
    6c4c:	0e 94 15 22 	call	0x442a	; 0x442a <CreateReport>
	      //sprintf_P(strReport,PSTR("Transaksi   : %s "),DeltaTransaction);      CreateReport(strReport,PrintBuffer,&RepPos);
          InserBorder(btBottomLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btBottomRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);
    6c50:	87 e0       	ldi	r24, 0x07	; 7
    6c52:	6e e6       	ldi	r22, 0x6E	; 110
    6c54:	74 e0       	ldi	r23, 0x04	; 4
    6c56:	41 e0       	ldi	r20, 0x01	; 1
    6c58:	26 ed       	ldi	r18, 0xD6	; 214
    6c5a:	31 e0       	ldi	r19, 0x01	; 1
    6c5c:	0e 94 84 1a 	call	0x3508	; 0x3508 <InserBorder>
    6c60:	8b e0       	ldi	r24, 0x0B	; 11
    6c62:	6e e6       	ldi	r22, 0x6E	; 110
    6c64:	74 e0       	ldi	r23, 0x04	; 4
    6c66:	4a e2       	ldi	r20, 0x2A	; 42
    6c68:	26 ed       	ldi	r18, 0xD6	; 214
    6c6a:	31 e0       	ldi	r19, 0x01	; 1
    6c6c:	0e 94 84 1a 	call	0x3508	; 0x3508 <InserBorder>
    6c70:	89 e0       	ldi	r24, 0x09	; 9
    6c72:	6e e6       	ldi	r22, 0x6E	; 110
    6c74:	74 e0       	ldi	r23, 0x04	; 4
    6c76:	41 e0       	ldi	r20, 0x01	; 1
    6c78:	26 ed       	ldi	r18, 0xD6	; 214
    6c7a:	31 e0       	ldi	r19, 0x01	; 1
    6c7c:	0e 94 84 1a 	call	0x3508	; 0x3508 <InserBorder>
    6c80:	8c e0       	ldi	r24, 0x0C	; 12
    6c82:	6e e6       	ldi	r22, 0x6E	; 110
    6c84:	74 e0       	ldi	r23, 0x04	; 4
    6c86:	41 e0       	ldi	r20, 0x01	; 1
    6c88:	26 ed       	ldi	r18, 0xD6	; 214
    6c8a:	31 e0       	ldi	r19, 0x01	; 1
    6c8c:	0e 94 84 1a 	call	0x3508	; 0x3508 <InserBorder>
		  /*
	      if (eeprom_read_byte(&DefPrintMoney)==True)sprintf_P(strReport,PSTR("PUMP-PRODUCT   VOLUME(L)    RUPIAH(RP)"));         
	      else sprintf_P(strReport,PSTR("PUMP-PRODUCT   VOLUME(L)              "));CreateReport(strReport,PrintBuffer,&RepPos);
          InserBorder(btBottomLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btBottomRight,PrintBuffer,1,&RepPos);//InserBorder(btNewLine,PrintBuffer,1,&RepPos);         		 
          */
		  ClearList(GradeList);
    6c90:	88 ed       	ldi	r24, 0xD8	; 216
    6c92:	91 e0       	ldi	r25, 0x01	; 1
    6c94:	0e 94 b6 22 	call	0x456c	; 0x456c <ClearList>
		  cmdPrint=0b10000000;//PrintHeader
    6c98:	80 e8       	ldi	r24, 0x80	; 128
    6c9a:	80 93 b5 01 	sts	0x01B5, r24
		  LengthMessage81=RepPos+1;
    6c9e:	80 91 d6 01 	lds	r24, 0x01D6
    6ca2:	90 91 d7 01 	lds	r25, 0x01D7
    6ca6:	01 96       	adiw	r24, 0x01	; 1
    6ca8:	90 93 8e 01 	sts	0x018E, r25
    6cac:	80 93 8d 01 	sts	0x018D, r24
		  IsFreePrinting=True;
    6cb0:	81 e0       	ldi	r24, 0x01	; 1
    6cb2:	80 93 a8 01 	sts	0x01A8, r24
          IsBusyFreePrinting=True;
    6cb6:	80 93 b4 01 	sts	0x01B4, r24
		  		  
          stGenerateReport=grWaitPrinted1;
    6cba:	83 e0       	ldi	r24, 0x03	; 3
    6cbc:	0c 94 ac 3e 	jmp	0x7d58	; 0x7d58 <systemGenerateReport+0x145e>
	      break;
     case grWaitPrinted1:
          if (IsBusyFreePrinting==False)
    6cc0:	80 91 b4 01 	lds	r24, 0x01B4
    6cc4:	88 23       	and	r24, r24
    6cc6:	11 f0       	breq	.+4      	; 0x6ccc <systemGenerateReport+0x3d2>
    6cc8:	0c 94 b4 3e 	jmp	0x7d68	; 0x7d68 <systemGenerateReport+0x146e>
		      stGenerateReport=grGenerateLabel;//grGenerateReportData;//grFinishGenerateReport;
    6ccc:	84 e0       	ldi	r24, 0x04	; 4
    6cce:	0c 94 ac 3e 	jmp	0x7d58	; 0x7d58 <systemGenerateReport+0x145e>
	      break;
     case grGenerateLabel:
          RepPos=0;
    6cd2:	10 92 d7 01 	sts	0x01D7, r1
    6cd6:	10 92 d6 01 	sts	0x01D6, r1
          InserBorder(btTopLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btTopRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);          
    6cda:	81 e0       	ldi	r24, 0x01	; 1
    6cdc:	6e e6       	ldi	r22, 0x6E	; 110
    6cde:	74 e0       	ldi	r23, 0x04	; 4
    6ce0:	41 e0       	ldi	r20, 0x01	; 1
    6ce2:	26 ed       	ldi	r18, 0xD6	; 214
    6ce4:	31 e0       	ldi	r19, 0x01	; 1
    6ce6:	0e 94 84 1a 	call	0x3508	; 0x3508 <InserBorder>
    6cea:	8b e0       	ldi	r24, 0x0B	; 11
    6cec:	6e e6       	ldi	r22, 0x6E	; 110
    6cee:	74 e0       	ldi	r23, 0x04	; 4
    6cf0:	4a e2       	ldi	r20, 0x2A	; 42
    6cf2:	26 ed       	ldi	r18, 0xD6	; 214
    6cf4:	31 e0       	ldi	r19, 0x01	; 1
    6cf6:	0e 94 84 1a 	call	0x3508	; 0x3508 <InserBorder>
    6cfa:	83 e0       	ldi	r24, 0x03	; 3
    6cfc:	6e e6       	ldi	r22, 0x6E	; 110
    6cfe:	74 e0       	ldi	r23, 0x04	; 4
    6d00:	41 e0       	ldi	r20, 0x01	; 1
    6d02:	26 ed       	ldi	r18, 0xD6	; 214
    6d04:	31 e0       	ldi	r19, 0x01	; 1
    6d06:	0e 94 84 1a 	call	0x3508	; 0x3508 <InserBorder>
    6d0a:	8c e0       	ldi	r24, 0x0C	; 12
    6d0c:	6e e6       	ldi	r22, 0x6E	; 110
    6d0e:	74 e0       	ldi	r23, 0x04	; 4
    6d10:	41 e0       	ldi	r20, 0x01	; 1
    6d12:	26 ed       	ldi	r18, 0xD6	; 214
    6d14:	31 e0       	ldi	r19, 0x01	; 1
    6d16:	0e 94 84 1a 	call	0x3508	; 0x3508 <InserBorder>
	      if (eeprom_read_byte(&DefPrintMoney)==True)
    6d1a:	82 ec       	ldi	r24, 0xC2	; 194
    6d1c:	93 e0       	ldi	r25, 0x03	; 3
    6d1e:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
    6d22:	35 ea       	ldi	r19, 0xA5	; 165
    6d24:	c3 2e       	mov	r12, r19
    6d26:	d1 2c       	mov	r13, r1
    6d28:	cc 0e       	add	r12, r28
    6d2a:	dd 1e       	adc	r13, r29
    6d2c:	81 30       	cpi	r24, 0x01	; 1
    6d2e:	79 f4       	brne	.+30     	; 0x6d4e <systemGenerateReport+0x454>
		       sprintf_P(strReport,PSTR("PUMP-PRODUCT   VOLUME(L)    RUPIAH(RP)"));         
    6d30:	00 d0       	rcall	.+0      	; 0x6d32 <systemGenerateReport+0x438>
    6d32:	00 d0       	rcall	.+0      	; 0x6d34 <systemGenerateReport+0x43a>
    6d34:	ad b7       	in	r26, 0x3d	; 61
    6d36:	be b7       	in	r27, 0x3e	; 62
    6d38:	12 96       	adiw	r26, 0x02	; 2
    6d3a:	dc 92       	st	X, r13
    6d3c:	ce 92       	st	-X, r12
    6d3e:	11 97       	sbiw	r26, 0x01	; 1
    6d40:	8e e6       	ldi	r24, 0x6E	; 110
    6d42:	96 e0       	ldi	r25, 0x06	; 6
    6d44:	14 96       	adiw	r26, 0x04	; 4
    6d46:	9c 93       	st	X, r25
    6d48:	8e 93       	st	-X, r24
    6d4a:	13 97       	sbiw	r26, 0x03	; 3
    6d4c:	0a c0       	rjmp	.+20     	; 0x6d62 <systemGenerateReport+0x468>
	      else sprintf_P(strReport,PSTR("PUMP-PRODUCT   VOLUME(L)              "));CreateReport(strReport,PrintBuffer,&RepPos);
    6d4e:	00 d0       	rcall	.+0      	; 0x6d50 <systemGenerateReport+0x456>
    6d50:	00 d0       	rcall	.+0      	; 0x6d52 <systemGenerateReport+0x458>
    6d52:	ed b7       	in	r30, 0x3d	; 61
    6d54:	fe b7       	in	r31, 0x3e	; 62
    6d56:	d2 82       	std	Z+2, r13	; 0x02
    6d58:	c1 82       	std	Z+1, r12	; 0x01
    6d5a:	87 e4       	ldi	r24, 0x47	; 71
    6d5c:	96 e0       	ldi	r25, 0x06	; 6
    6d5e:	94 83       	std	Z+4, r25	; 0x04
    6d60:	83 83       	std	Z+3, r24	; 0x03
    6d62:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
    6d66:	0f 90       	pop	r0
    6d68:	0f 90       	pop	r0
    6d6a:	0f 90       	pop	r0
    6d6c:	0f 90       	pop	r0
    6d6e:	ce 01       	movw	r24, r28
    6d70:	8b 55       	subi	r24, 0x5B	; 91
    6d72:	9f 4f       	sbci	r25, 0xFF	; 255
    6d74:	6e e6       	ldi	r22, 0x6E	; 110
    6d76:	74 e0       	ldi	r23, 0x04	; 4
    6d78:	46 ed       	ldi	r20, 0xD6	; 214
    6d7a:	51 e0       	ldi	r21, 0x01	; 1
    6d7c:	0e 94 15 22 	call	0x442a	; 0x442a <CreateReport>
          InserBorder(btBottomLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btBottomRight,PrintBuffer,1,&RepPos);//InserBorder(btNewLine,PrintBuffer,1,&RepPos);         		 
    6d80:	87 e0       	ldi	r24, 0x07	; 7
    6d82:	6e e6       	ldi	r22, 0x6E	; 110
    6d84:	74 e0       	ldi	r23, 0x04	; 4
    6d86:	41 e0       	ldi	r20, 0x01	; 1
    6d88:	26 ed       	ldi	r18, 0xD6	; 214
    6d8a:	31 e0       	ldi	r19, 0x01	; 1
    6d8c:	0e 94 84 1a 	call	0x3508	; 0x3508 <InserBorder>
    6d90:	8b e0       	ldi	r24, 0x0B	; 11
    6d92:	6e e6       	ldi	r22, 0x6E	; 110
    6d94:	74 e0       	ldi	r23, 0x04	; 4
    6d96:	4a e2       	ldi	r20, 0x2A	; 42
    6d98:	26 ed       	ldi	r18, 0xD6	; 214
    6d9a:	31 e0       	ldi	r19, 0x01	; 1
    6d9c:	0e 94 84 1a 	call	0x3508	; 0x3508 <InserBorder>
    6da0:	89 e0       	ldi	r24, 0x09	; 9
    6da2:	6e e6       	ldi	r22, 0x6E	; 110
    6da4:	74 e0       	ldi	r23, 0x04	; 4
    6da6:	41 e0       	ldi	r20, 0x01	; 1
    6da8:	26 ed       	ldi	r18, 0xD6	; 214
    6daa:	31 e0       	ldi	r19, 0x01	; 1
    6dac:	0e 94 84 1a 	call	0x3508	; 0x3508 <InserBorder>
          
		  cmdPrint=0b00000000;
    6db0:	10 92 b5 01 	sts	0x01B5, r1
		  LengthMessage81=RepPos+1;
    6db4:	80 91 d6 01 	lds	r24, 0x01D6
    6db8:	90 91 d7 01 	lds	r25, 0x01D7
    6dbc:	01 96       	adiw	r24, 0x01	; 1
    6dbe:	90 93 8e 01 	sts	0x018E, r25
    6dc2:	80 93 8d 01 	sts	0x018D, r24

		  IsFreePrinting=True;
    6dc6:	81 e0       	ldi	r24, 0x01	; 1
    6dc8:	80 93 a8 01 	sts	0x01A8, r24
	      IsBusyFreePrinting=True;
    6dcc:	80 93 b4 01 	sts	0x01B4, r24

		  stGenerateReport=grWaitLabelPrinted;
    6dd0:	85 e0       	ldi	r24, 0x05	; 5
    6dd2:	c2 c7       	rjmp	.+3972   	; 0x7d58 <systemGenerateReport+0x145e>
          if (IsBusyFreePrinting==False)
		      stGenerateReport=grGenerateReportData;//grFinishGenerateReport;
	      break;
     case grGenerateReportData:
	      //Generate: PumpNum, Nozzle, Product
	      if ((xPump>=1)&&(xPump<=8)){
    6dd4:	80 91 e7 01 	lds	r24, 0x01E7
    6dd8:	81 50       	subi	r24, 0x01	; 1
    6dda:	88 30       	cpi	r24, 0x08	; 8
    6ddc:	08 f0       	brcs	.+2      	; 0x6de0 <systemGenerateReport+0x4e6>
    6dde:	c4 c7       	rjmp	.+3976   	; 0x7d68 <systemGenerateReport+0x146e>
		      eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap, 8);
    6de0:	ce 01       	movw	r24, r28
    6de2:	07 96       	adiw	r24, 0x07	; 7
    6de4:	66 e4       	ldi	r22, 0x46	; 70
    6de6:	70 e0       	ldi	r23, 0x00	; 0
    6de8:	48 e0       	ldi	r20, 0x08	; 8
    6dea:	50 e0       	ldi	r21, 0x00	; 0
    6dec:	0e 94 1b ad 	call	0x15a36	; 0x15a36 <__eerd_block_m128>
			  PumpNum=PPumpID[xPump-1];
    6df0:	90 91 e7 01 	lds	r25, 0x01E7
    6df4:	fe 01       	movw	r30, r28
    6df6:	e9 0f       	add	r30, r25
    6df8:	f1 1d       	adc	r31, r1
    6dfa:	86 81       	ldd	r24, Z+6	; 0x06
    6dfc:	80 93 e4 01 	sts	0x01E4, r24
			  if (PumpNum>0){
    6e00:	88 23       	and	r24, r24
    6e02:	09 f4       	brne	.+2      	; 0x6e06 <systemGenerateReport+0x50c>
    6e04:	47 c0       	rjmp	.+142    	; 0x6e94 <systemGenerateReport+0x59a>
				  eeprom_read_block((void*) &PProductID, (const void*) &DefNozzleMap[xPump-1], 6);
    6e06:	91 9f       	mul	r25, r17
    6e08:	b0 01       	movw	r22, r0
    6e0a:	11 24       	eor	r1, r1
    6e0c:	60 5b       	subi	r22, 0xB0	; 176
    6e0e:	7f 4f       	sbci	r23, 0xFF	; 255
    6e10:	ce 01       	movw	r24, r28
    6e12:	01 96       	adiw	r24, 0x01	; 1
    6e14:	46 e0       	ldi	r20, 0x06	; 6
    6e16:	50 e0       	ldi	r21, 0x00	; 0
    6e18:	0e 94 1b ad 	call	0x15a36	; 0x15a36 <__eerd_block_m128>
				  xGrade=PProductID[xNozzle-1];
    6e1c:	80 91 e6 01 	lds	r24, 0x01E6
    6e20:	fe 01       	movw	r30, r28
    6e22:	e8 0f       	add	r30, r24
    6e24:	f1 1d       	adc	r31, r1
    6e26:	80 81       	ld	r24, Z
    6e28:	80 93 e5 01 	sts	0x01E5, r24
    6e2c:	20 ee       	ldi	r18, 0xE0	; 224
    6e2e:	a2 2e       	mov	r10, r18
    6e30:	27 e0       	ldi	r18, 0x07	; 7
    6e32:	b2 2e       	mov	r11, r18

				  if (xGrade>0){
    6e34:	88 23       	and	r24, r24
    6e36:	91 f0       	breq	.+36     	; 0x6e5c <systemGenerateReport+0x562>
				      GetProductName(xGrade,strProduct);
    6e38:	b5 01       	movw	r22, r10
    6e3a:	0e 94 df 2d 	call	0x5bbe	; 0x5bbe <GetProductName>
                      GradeUsed=xGrade;
    6e3e:	80 91 e5 01 	lds	r24, 0x01E5
    6e42:	80 93 e2 01 	sts	0x01E2, r24
					  xGrade=xNozzle;//
    6e46:	80 91 e6 01 	lds	r24, 0x01E6
    6e4a:	80 93 e5 01 	sts	0x01E5, r24
					  PumpNozzle=xNozzle;
    6e4e:	80 93 e3 01 	sts	0x01E3, r24
					  xNozzle++;
    6e52:	8f 5f       	subi	r24, 0xFF	; 255
    6e54:	80 93 e6 01 	sts	0x01E6, r24
					  stGenerateReport=grCreateReportTotalizer;
    6e58:	88 e0       	ldi	r24, 0x08	; 8
    6e5a:	7e c7       	rjmp	.+3836   	; 0x7d58 <systemGenerateReport+0x145e>
				  }
				  else{sprintf_P(strProduct,PSTR("N/A"));			  
    6e5c:	00 d0       	rcall	.+0      	; 0x6e5e <systemGenerateReport+0x564>
    6e5e:	00 d0       	rcall	.+0      	; 0x6e60 <systemGenerateReport+0x566>
    6e60:	ad b7       	in	r26, 0x3d	; 61
    6e62:	be b7       	in	r27, 0x3e	; 62
    6e64:	12 96       	adiw	r26, 0x02	; 2
    6e66:	bc 92       	st	X, r11
    6e68:	ae 92       	st	-X, r10
    6e6a:	11 97       	sbiw	r26, 0x01	; 1
    6e6c:	83 e4       	ldi	r24, 0x43	; 67
    6e6e:	96 e0       	ldi	r25, 0x06	; 6
    6e70:	14 96       	adiw	r26, 0x04	; 4
    6e72:	9c 93       	st	X, r25
    6e74:	8e 93       	st	-X, r24
    6e76:	13 97       	sbiw	r26, 0x03	; 3
    6e78:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
					   xNozzle++;
    6e7c:	80 91 e6 01 	lds	r24, 0x01E6
    6e80:	8f 5f       	subi	r24, 0xFF	; 255
    6e82:	80 93 e6 01 	sts	0x01E6, r24
					   if (xNozzle>6)stGenerateReport=grNextPump;
    6e86:	0f 90       	pop	r0
    6e88:	0f 90       	pop	r0
    6e8a:	0f 90       	pop	r0
    6e8c:	0f 90       	pop	r0
    6e8e:	87 30       	cpi	r24, 0x07	; 7
    6e90:	08 f4       	brcc	.+2      	; 0x6e94 <systemGenerateReport+0x59a>
    6e92:	6a c7       	rjmp	.+3796   	; 0x7d68 <systemGenerateReport+0x146e>
					  }
				}else stGenerateReport=grNextPump;
    6e94:	87 e0       	ldi	r24, 0x07	; 7
    6e96:	60 c7       	rjmp	.+3776   	; 0x7d58 <systemGenerateReport+0x145e>
			  }
	      break;
     case grNextPump:
	      xNozzle=1;
    6e98:	81 e0       	ldi	r24, 0x01	; 1
    6e9a:	80 93 e6 01 	sts	0x01E6, r24
	      xPump++;
    6e9e:	80 91 e7 01 	lds	r24, 0x01E7
    6ea2:	8f 5f       	subi	r24, 0xFF	; 255
    6ea4:	80 93 e7 01 	sts	0x01E7, r24
	      if (xPump>8)stGenerateReport=grCreateReportFooter;
    6ea8:	89 30       	cpi	r24, 0x09	; 9
    6eaa:	08 f4       	brcc	.+2      	; 0x6eae <systemGenerateReport+0x5b4>
    6eac:	f9 c3       	rjmp	.+2034   	; 0x76a0 <systemGenerateReport+0xda6>
    6eae:	8a e0       	ldi	r24, 0x0A	; 10
    6eb0:	53 c7       	rjmp	.+3750   	; 0x7d58 <systemGenerateReport+0x145e>
		  else stGenerateReport=grGenerateReportData;
	      break;
     case grCreateReportTotalizer:

          RepPos=0;
    6eb2:	10 92 d7 01 	sts	0x01D7, r1
    6eb6:	10 92 d6 01 	sts	0x01D6, r1
    6eba:	ee e6       	ldi	r30, 0x6E	; 110
    6ebc:	f4 e0       	ldi	r31, 0x04	; 4
}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
	     strMemory[i]=data;
    6ebe:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    6ec0:	b5 e0       	ldi	r27, 0x05	; 5
    6ec2:	ef 3f       	cpi	r30, 0xFF	; 255
    6ec4:	fb 07       	cpc	r31, r27
    6ec6:	d9 f7       	brne	.-10     	; 0x6ebe <systemGenerateReport+0x5c4>
    6ec8:	fe 01       	movw	r30, r28
    6eca:	eb 55       	subi	r30, 0x5B	; 91
    6ecc:	ff 4f       	sbci	r31, 0xFF	; 255
	     strMemory[i]=data;
    6ece:	ce 01       	movw	r24, r28
    6ed0:	8b 50       	subi	r24, 0x0B	; 11
    6ed2:	9f 4f       	sbci	r25, 0xFF	; 255
    6ed4:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    6ed6:	e8 17       	cp	r30, r24
    6ed8:	f9 07       	cpc	r31, r25
    6eda:	e1 f7       	brne	.-8      	; 0x6ed4 <systemGenerateReport+0x5da>
    6edc:	ef ea       	ldi	r30, 0xAF	; 175
    6ede:	fc e0       	ldi	r31, 0x0C	; 12
	     strMemory[i]=data;
    6ee0:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    6ee2:	8c e0       	ldi	r24, 0x0C	; 12
    6ee4:	ee 3b       	cpi	r30, 0xBE	; 190
    6ee6:	f8 07       	cpc	r31, r24
    6ee8:	d9 f7       	brne	.-10     	; 0x6ee0 <systemGenerateReport+0x5e6>
    6eea:	e7 e8       	ldi	r30, 0x87	; 135
    6eec:	f9 e0       	ldi	r31, 0x09	; 9
	     strMemory[i]=data;
    6eee:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    6ef0:	99 e0       	ldi	r25, 0x09	; 9
    6ef2:	e6 39       	cpi	r30, 0x96	; 150
    6ef4:	f9 07       	cpc	r31, r25
    6ef6:	d9 f7       	brne	.-10     	; 0x6eee <systemGenerateReport+0x5f4>
    6ef8:	fe 01       	movw	r30, r28
    6efa:	79 96       	adiw	r30, 0x19	; 25
	     strMemory[i]=data;
    6efc:	ce 01       	movw	r24, r28
    6efe:	88 96       	adiw	r24, 0x28	; 40
    6f00:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    6f02:	e8 17       	cp	r30, r24
    6f04:	f9 07       	cpc	r31, r25
    6f06:	e1 f7       	brne	.-8      	; 0x6f00 <systemGenerateReport+0x606>
	     strMemory[i]=data;
    6f08:	ce 01       	movw	r24, r28
    6f0a:	c7 96       	adiw	r24, 0x37	; 55
    6f0c:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    6f0e:	e8 17       	cp	r30, r24
    6f10:	f9 07       	cpc	r31, r25
    6f12:	e1 f7       	brne	.-8      	; 0x6f0c <systemGenerateReport+0x612>
	     strMemory[i]=data;
    6f14:	cf 01       	movw	r24, r30
    6f16:	0f 96       	adiw	r24, 0x0f	; 15
    6f18:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    6f1a:	e8 17       	cp	r30, r24
    6f1c:	f9 07       	cpc	r31, r25
    6f1e:	e1 f7       	brne	.-8      	; 0x6f18 <systemGenerateReport+0x61e>
    6f20:	fe 01       	movw	r30, r28
    6f22:	ea 5b       	subi	r30, 0xBA	; 186
    6f24:	ff 4f       	sbci	r31, 0xFF	; 255
	     strMemory[i]=data;
    6f26:	cf 01       	movw	r24, r30
    6f28:	ee 2e       	mov	r14, r30
    6f2a:	d9 2e       	mov	r13, r25
    6f2c:	0f 96       	adiw	r24, 0x0f	; 15
    6f2e:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    6f30:	e8 17       	cp	r30, r24
    6f32:	f9 07       	cpc	r31, r25
    6f34:	e1 f7       	brne	.-8      	; 0x6f2e <systemGenerateReport+0x634>
		  FillChar(strLastMoney,sizeof(strLastMoney),0);

		  FillChar(strCurrentVolume,sizeof(strCurrentVolume),0);
		  FillChar(strCurrentMoney,sizeof(strCurrentMoney),0);

          FIPAddr=GetFIPAddr(PumpNum); 
    6f36:	80 91 e4 01 	lds	r24, 0x01E4
    6f3a:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <GetFIPAddr>
		  if (FIPAddr>0){
    6f3e:	88 23       	and	r24, r24
    6f40:	49 f1       	breq	.+82     	; 0x6f94 <systemGenerateReport+0x69a>
		      FIPAddr=FIPAddr-1;		  
    6f42:	f8 2e       	mov	r15, r24
    6f44:	fa 94       	dec	r15
			  GetTotalizerData(TVOLUME,TOTALIZER_LAST,FIPAddr,PumpNozzle,strLastVolume);
    6f46:	80 e0       	ldi	r24, 0x00	; 0
    6f48:	60 e0       	ldi	r22, 0x00	; 0
    6f4a:	4f 2d       	mov	r20, r15
    6f4c:	20 91 e3 01 	lds	r18, 0x01E3
    6f50:	8e 01       	movw	r16, r28
    6f52:	07 5e       	subi	r16, 0xE7	; 231
    6f54:	1f 4f       	sbci	r17, 0xFF	; 255
    6f56:	0e 94 af 20 	call	0x415e	; 0x415e <GetTotalizerData>
			  GetTotalizerData(TMONEY,TOTALIZER_LAST,FIPAddr,PumpNozzle,strLastMoney);
    6f5a:	81 e0       	ldi	r24, 0x01	; 1
    6f5c:	60 e0       	ldi	r22, 0x00	; 0
    6f5e:	4f 2d       	mov	r20, r15
    6f60:	20 91 e3 01 	lds	r18, 0x01E3
    6f64:	8e 01       	movw	r16, r28
    6f66:	08 5d       	subi	r16, 0xD8	; 216
    6f68:	1f 4f       	sbci	r17, 0xFF	; 255
    6f6a:	0e 94 af 20 	call	0x415e	; 0x415e <GetTotalizerData>

			  GetTotalizerData(TVOLUME,TOTALIZER_NOW,FIPAddr,PumpNozzle,strCurrentVolume);
    6f6e:	80 e0       	ldi	r24, 0x00	; 0
    6f70:	61 e0       	ldi	r22, 0x01	; 1
    6f72:	4f 2d       	mov	r20, r15
    6f74:	20 91 e3 01 	lds	r18, 0x01E3
    6f78:	8e 01       	movw	r16, r28
    6f7a:	09 5c       	subi	r16, 0xC9	; 201
    6f7c:	1f 4f       	sbci	r17, 0xFF	; 255
    6f7e:	0e 94 af 20 	call	0x415e	; 0x415e <GetTotalizerData>
			  GetTotalizerData(TMONEY,TOTALIZER_NOW,FIPAddr,PumpNozzle,strCurrentMoney);
    6f82:	81 e0       	ldi	r24, 0x01	; 1
    6f84:	61 e0       	ldi	r22, 0x01	; 1
    6f86:	4f 2d       	mov	r20, r15
    6f88:	20 91 e3 01 	lds	r18, 0x01E3
    6f8c:	0e 2d       	mov	r16, r14
    6f8e:	1d 2d       	mov	r17, r13
    6f90:	0e 94 af 20 	call	0x415e	; 0x415e <GetTotalizerData>
		  }

		  StrCalc(TMINUS,strCurrentVolume,strLastVolume,strDeltaVolume);
    6f94:	80 e0       	ldi	r24, 0x00	; 0
    6f96:	be 01       	movw	r22, r28
    6f98:	69 5c       	subi	r22, 0xC9	; 201
    6f9a:	7f 4f       	sbci	r23, 0xFF	; 255
    6f9c:	ae 01       	movw	r20, r28
    6f9e:	47 5e       	subi	r20, 0xE7	; 231
    6fa0:	5f 4f       	sbci	r21, 0xFF	; 255
    6fa2:	27 e8       	ldi	r18, 0x87	; 135
    6fa4:	39 e0       	ldi	r19, 0x09	; 9
    6fa6:	0e 94 77 29 	call	0x52ee	; 0x52ee <StrCalc>

		  if (IsMinus(strDeltaVolume)==True)
    6faa:	87 e8       	ldi	r24, 0x87	; 135
    6fac:	99 e0       	ldi	r25, 0x09	; 9
    6fae:	0e 94 7a 23 	call	0x46f4	; 0x46f4 <IsMinus>
    6fb2:	81 30       	cpi	r24, 0x01	; 1
    6fb4:	21 f4       	brne	.+8      	; 0x6fbe <systemGenerateReport+0x6c4>
		      NormalizeOverflow(strDeltaVolume);
    6fb6:	87 e8       	ldi	r24, 0x87	; 135
    6fb8:	99 e0       	ldi	r25, 0x09	; 9
    6fba:	0e 94 0e 2d 	call	0x5a1c	; 0x5a1c <NormalizeOverflow>

		  //Calculate Wayne Estimated Total Money
		  if (eeprom_read_byte(&DefDispenserBrand)==ST_WAYNE_DART){
    6fbe:	88 e3       	ldi	r24, 0x38	; 56
    6fc0:	91 e0       	ldi	r25, 0x01	; 1
    6fc2:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
    6fc6:	82 30       	cpi	r24, 0x02	; 2
    6fc8:	79 f4       	brne	.+30     	; 0x6fe8 <systemGenerateReport+0x6ee>
              GetProductPrice(sPrice,PumpNum,PumpNozzle);//Money = Price x Volume
    6fca:	8e 01       	movw	r16, r28
    6fcc:	01 5f       	subi	r16, 0xF1	; 241
    6fce:	1f 4f       	sbci	r17, 0xFF	; 255
    6fd0:	c8 01       	movw	r24, r16
    6fd2:	60 91 e4 01 	lds	r22, 0x01E4
    6fd6:	40 91 e3 01 	lds	r20, 0x01E3
    6fda:	0e 94 5e 24 	call	0x48bc	; 0x48bc <GetProductPrice>
			  StrCalc(TMULTIPLY,sPrice,strDeltaVolume,strDeltaMoney);
    6fde:	82 e0       	ldi	r24, 0x02	; 2
    6fe0:	b8 01       	movw	r22, r16
    6fe2:	47 e8       	ldi	r20, 0x87	; 135
    6fe4:	59 e0       	ldi	r21, 0x09	; 9
    6fe6:	07 c0       	rjmp	.+14     	; 0x6ff6 <systemGenerateReport+0x6fc>
			  
		  }else StrCalc(TMINUS,strCurrentMoney,strLastMoney,strDeltaMoney);
    6fe8:	80 e0       	ldi	r24, 0x00	; 0
    6fea:	be 01       	movw	r22, r28
    6fec:	6a 5b       	subi	r22, 0xBA	; 186
    6fee:	7f 4f       	sbci	r23, 0xFF	; 255
    6ff0:	ae 01       	movw	r20, r28
    6ff2:	48 5d       	subi	r20, 0xD8	; 216
    6ff4:	5f 4f       	sbci	r21, 0xFF	; 255
    6ff6:	2f ea       	ldi	r18, 0xAF	; 175
    6ff8:	3c e0       	ldi	r19, 0x0C	; 12
    6ffa:	0e 94 77 29 	call	0x52ee	; 0x52ee <StrCalc>

		  if (IsMinus(strDeltaMoney)==True)
    6ffe:	8f ea       	ldi	r24, 0xAF	; 175
    7000:	9c e0       	ldi	r25, 0x0C	; 12
    7002:	0e 94 7a 23 	call	0x46f4	; 0x46f4 <IsMinus>
    7006:	81 30       	cpi	r24, 0x01	; 1
    7008:	21 f4       	brne	.+8      	; 0x7012 <systemGenerateReport+0x718>
		      NormalizeOverflow(strDeltaMoney);
    700a:	8f ea       	ldi	r24, 0xAF	; 175
    700c:	9c e0       	ldi	r25, 0x0C	; 12
    700e:	0e 94 0e 2d 	call	0x5a1c	; 0x5a1c <NormalizeOverflow>

		  AddList(GradeUsed,GradeList);
    7012:	80 91 e2 01 	lds	r24, 0x01E2
    7016:	68 ed       	ldi	r22, 0xD8	; 216
    7018:	71 e0       	ldi	r23, 0x01	; 1
    701a:	0e 94 83 22 	call	0x4506	; 0x4506 <AddList>
		  
		  StrCalc(TPLUS,strTotalVolume,strDeltaVolume,strTotalVolume);
    701e:	81 e0       	ldi	r24, 0x01	; 1
    7020:	69 e7       	ldi	r22, 0x79	; 121
    7022:	78 e0       	ldi	r23, 0x08	; 8
    7024:	47 e8       	ldi	r20, 0x87	; 135
    7026:	59 e0       	ldi	r21, 0x09	; 9
    7028:	9b 01       	movw	r18, r22
    702a:	0e 94 77 29 	call	0x52ee	; 0x52ee <StrCalc>
		  StrCalc(TPLUS,strTotalMoney,strDeltaMoney,strTotalMoney);
    702e:	81 e0       	ldi	r24, 0x01	; 1
    7030:	6a e2       	ldi	r22, 0x2A	; 42
    7032:	79 e0       	ldi	r23, 0x09	; 9
    7034:	4f ea       	ldi	r20, 0xAF	; 175
    7036:	5c e0       	ldi	r21, 0x0C	; 12
    7038:	9b 01       	movw	r18, r22
    703a:	0e 94 77 29 	call	0x52ee	; 0x52ee <StrCalc>


		  RemZeroLead(strDeltaMoney);
    703e:	8f ea       	ldi	r24, 0xAF	; 175
    7040:	9c e0       	ldi	r25, 0x0C	; 12
    7042:	0e 94 3f 25 	call	0x4a7e	; 0x4a7e <RemZeroLead>
		  RemZeroLead(strCurrentMoney);
    7046:	96 e4       	ldi	r25, 0x46	; 70
    7048:	c9 2e       	mov	r12, r25
    704a:	d1 2c       	mov	r13, r1
    704c:	cc 0e       	add	r12, r28
    704e:	dd 1e       	adc	r13, r29
    7050:	c6 01       	movw	r24, r12
    7052:	0e 94 3f 25 	call	0x4a7e	; 0x4a7e <RemZeroLead>
		  RemZeroLead(strLastMoney);
    7056:	88 e2       	ldi	r24, 0x28	; 40
    7058:	e8 2e       	mov	r14, r24
    705a:	f1 2c       	mov	r15, r1
    705c:	ec 0e       	add	r14, r28
    705e:	fd 1e       	adc	r15, r29
    7060:	c7 01       	movw	r24, r14
    7062:	0e 94 3f 25 	call	0x4a7e	; 0x4a7e <RemZeroLead>

          RemZeroLead(strDeltaVolume);
    7066:	87 e8       	ldi	r24, 0x87	; 135
    7068:	99 e0       	ldi	r25, 0x09	; 9
    706a:	0e 94 3f 25 	call	0x4a7e	; 0x4a7e <RemZeroLead>
          RemZeroLead(strCurrentVolume);
    706e:	07 e3       	ldi	r16, 0x37	; 55
    7070:	a0 2e       	mov	r10, r16
    7072:	b1 2c       	mov	r11, r1
    7074:	ac 0e       	add	r10, r28
    7076:	bd 1e       	adc	r11, r29
    7078:	c5 01       	movw	r24, r10
    707a:	0e 94 3f 25 	call	0x4a7e	; 0x4a7e <RemZeroLead>
          RemZeroLead(strLastVolume);
    707e:	8e 01       	movw	r16, r28
    7080:	07 5e       	subi	r16, 0xE7	; 231
    7082:	1f 4f       	sbci	r17, 0xFF	; 255
    7084:	c8 01       	movw	r24, r16
    7086:	0e 94 3f 25 	call	0x4a7e	; 0x4a7e <RemZeroLead>

		  FormatTotalizerMoney(strDeltaMoney);
    708a:	8f ea       	ldi	r24, 0xAF	; 175
    708c:	9c e0       	ldi	r25, 0x0C	; 12
    708e:	0e 94 45 34 	call	0x688a	; 0x688a <FormatTotalizerMoney>
		  FormatTotalizerMoney(strCurrentMoney);
    7092:	c6 01       	movw	r24, r12
    7094:	0e 94 45 34 	call	0x688a	; 0x688a <FormatTotalizerMoney>
		  FormatTotalizerMoney(strLastMoney);
    7098:	c7 01       	movw	r24, r14
    709a:	0e 94 45 34 	call	0x688a	; 0x688a <FormatTotalizerMoney>

		  FormatTotalizerVolume(strDeltaVolume);
    709e:	87 e8       	ldi	r24, 0x87	; 135
    70a0:	99 e0       	ldi	r25, 0x09	; 9
    70a2:	0e 94 37 34 	call	0x686e	; 0x686e <FormatTotalizerVolume>
		  FormatTotalizerVolume(strLastVolume);
    70a6:	c8 01       	movw	r24, r16
    70a8:	0e 94 37 34 	call	0x686e	; 0x686e <FormatTotalizerVolume>
		  FormatTotalizerVolume(strCurrentVolume); 
    70ac:	c5 01       	movw	r24, r10
    70ae:	0e 94 37 34 	call	0x686e	; 0x686e <FormatTotalizerVolume>

          FormatCurrency(strDeltaMoney);
    70b2:	8f ea       	ldi	r24, 0xAF	; 175
    70b4:	9c e0       	ldi	r25, 0x0C	; 12
    70b6:	0e 94 0d 33 	call	0x661a	; 0x661a <FormatCurrency>
		  FormatCurrency(strCurrentMoney);
    70ba:	c6 01       	movw	r24, r12
    70bc:	0e 94 0d 33 	call	0x661a	; 0x661a <FormatCurrency>
		  FormatCurrency(strLastMoney);
    70c0:	c7 01       	movw	r24, r14
    70c2:	0e 94 0d 33 	call	0x661a	; 0x661a <FormatCurrency>

		  FormatCurrency(strDeltaVolume);		  
    70c6:	87 e8       	ldi	r24, 0x87	; 135
    70c8:	99 e0       	ldi	r25, 0x09	; 9
    70ca:	0e 94 0d 33 	call	0x661a	; 0x661a <FormatCurrency>
		  FormatCurrency(strLastVolume);
    70ce:	c8 01       	movw	r24, r16
    70d0:	0e 94 0d 33 	call	0x661a	; 0x661a <FormatCurrency>
          FormatCurrency(strCurrentVolume);
    70d4:	c5 01       	movw	r24, r10
    70d6:	0e 94 0d 33 	call	0x661a	; 0x661a <FormatCurrency>


          InserBorder(btTopLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btTopRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);          
    70da:	81 e0       	ldi	r24, 0x01	; 1
    70dc:	6e e6       	ldi	r22, 0x6E	; 110
    70de:	74 e0       	ldi	r23, 0x04	; 4
    70e0:	41 e0       	ldi	r20, 0x01	; 1
    70e2:	26 ed       	ldi	r18, 0xD6	; 214
    70e4:	31 e0       	ldi	r19, 0x01	; 1
    70e6:	0e 94 84 1a 	call	0x3508	; 0x3508 <InserBorder>
    70ea:	8b e0       	ldi	r24, 0x0B	; 11
    70ec:	6e e6       	ldi	r22, 0x6E	; 110
    70ee:	74 e0       	ldi	r23, 0x04	; 4
    70f0:	4a e2       	ldi	r20, 0x2A	; 42
    70f2:	26 ed       	ldi	r18, 0xD6	; 214
    70f4:	31 e0       	ldi	r19, 0x01	; 1
    70f6:	0e 94 84 1a 	call	0x3508	; 0x3508 <InserBorder>
    70fa:	83 e0       	ldi	r24, 0x03	; 3
    70fc:	6e e6       	ldi	r22, 0x6E	; 110
    70fe:	74 e0       	ldi	r23, 0x04	; 4
    7100:	41 e0       	ldi	r20, 0x01	; 1
    7102:	26 ed       	ldi	r18, 0xD6	; 214
    7104:	31 e0       	ldi	r19, 0x01	; 1
    7106:	0e 94 84 1a 	call	0x3508	; 0x3508 <InserBorder>
    710a:	8c e0       	ldi	r24, 0x0C	; 12
    710c:	6e e6       	ldi	r22, 0x6E	; 110
    710e:	74 e0       	ldi	r23, 0x04	; 4
    7110:	41 e0       	ldi	r20, 0x01	; 1
    7112:	26 ed       	ldi	r18, 0xD6	; 214
    7114:	31 e0       	ldi	r19, 0x01	; 1
    7116:	0e 94 84 1a 	call	0x3508	; 0x3508 <InserBorder>
          if (eeprom_read_byte(&DefDispenserBrand)==ST_WAYNE_DART){
    711a:	88 e3       	ldi	r24, 0x38	; 56
    711c:	91 e0       	ldi	r25, 0x01	; 1
    711e:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
    7122:	15 ea       	ldi	r17, 0xA5	; 165
    7124:	c1 2e       	mov	r12, r17
    7126:	d1 2c       	mov	r13, r1
    7128:	cc 0e       	add	r12, r28
    712a:	dd 1e       	adc	r13, r29
    712c:	b0 ee       	ldi	r27, 0xE0	; 224
    712e:	ab 2e       	mov	r10, r27
    7130:	b7 e0       	ldi	r27, 0x07	; 7
    7132:	bb 2e       	mov	r11, r27
    7134:	82 30       	cpi	r24, 0x02	; 2
    7136:	09 f0       	breq	.+2      	; 0x713a <systemGenerateReport+0x840>
    7138:	6a c0       	rjmp	.+212    	; 0x720e <systemGenerateReport+0x914>
		      GetProductPrice(sPrice,PumpNum,PumpNozzle);
    713a:	af e0       	ldi	r26, 0x0F	; 15
    713c:	ea 2e       	mov	r14, r26
    713e:	f1 2c       	mov	r15, r1
    7140:	ec 0e       	add	r14, r28
    7142:	fd 1e       	adc	r15, r29
    7144:	c7 01       	movw	r24, r14
    7146:	60 91 e4 01 	lds	r22, 0x01E4
    714a:	40 91 e3 01 	lds	r20, 0x01E3
    714e:	0e 94 5e 24 	call	0x48bc	; 0x48bc <GetProductPrice>
			  sprintf_P(strProductPrice,PSTR("Harga: Rp.%s"),sPrice);
    7152:	00 d0       	rcall	.+0      	; 0x7154 <systemGenerateReport+0x85a>
    7154:	00 d0       	rcall	.+0      	; 0x7156 <systemGenerateReport+0x85c>
    7156:	00 d0       	rcall	.+0      	; 0x7158 <systemGenerateReport+0x85e>
    7158:	ed b7       	in	r30, 0x3d	; 61
    715a:	fe b7       	in	r31, 0x3e	; 62
    715c:	31 96       	adiw	r30, 0x01	; 1
    715e:	8e 01       	movw	r16, r28
    7160:	0f 56       	subi	r16, 0x6F	; 111
    7162:	1f 4f       	sbci	r17, 0xFF	; 255
    7164:	ad b7       	in	r26, 0x3d	; 61
    7166:	be b7       	in	r27, 0x3e	; 62
    7168:	12 96       	adiw	r26, 0x02	; 2
    716a:	1c 93       	st	X, r17
    716c:	0e 93       	st	-X, r16
    716e:	11 97       	sbiw	r26, 0x01	; 1
    7170:	86 e3       	ldi	r24, 0x36	; 54
    7172:	96 e0       	ldi	r25, 0x06	; 6
    7174:	93 83       	std	Z+3, r25	; 0x03
    7176:	82 83       	std	Z+2, r24	; 0x02
    7178:	f5 82       	std	Z+5, r15	; 0x05
    717a:	e4 82       	std	Z+4, r14	; 0x04
    717c:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>

		      GetTabSpace(((17+10-strlen(strProduct))-strlen(strProductPrice)),strTabSpace2);
    7180:	d5 01       	movw	r26, r10
    7182:	0d 90       	ld	r0, X+
    7184:	00 20       	and	r0, r0
    7186:	e9 f7       	brne	.-6      	; 0x7182 <systemGenerateReport+0x888>
    7188:	11 97       	sbiw	r26, 0x01	; 1
    718a:	aa 19       	sub	r26, r10
    718c:	bb 09       	sbc	r27, r11
    718e:	f8 01       	movw	r30, r16
    7190:	01 90       	ld	r0, Z+
    7192:	00 20       	and	r0, r0
    7194:	e9 f7       	brne	.-6      	; 0x7190 <systemGenerateReport+0x896>
    7196:	31 97       	sbiw	r30, 0x01	; 1
    7198:	8d b7       	in	r24, 0x3d	; 61
    719a:	9e b7       	in	r25, 0x3e	; 62
    719c:	06 96       	adiw	r24, 0x06	; 6
    719e:	0f b6       	in	r0, 0x3f	; 63
    71a0:	f8 94       	cli
    71a2:	9e bf       	out	0x3e, r25	; 62
    71a4:	0f be       	out	0x3f, r0	; 63
    71a6:	8d bf       	out	0x3d, r24	; 61
    71a8:	80 2f       	mov	r24, r16
    71aa:	8e 1b       	sub	r24, r30
    71ac:	8a 1b       	sub	r24, r26
    71ae:	fd e7       	ldi	r31, 0x7D	; 125
    71b0:	ef 2e       	mov	r14, r31
    71b2:	f1 2c       	mov	r15, r1
    71b4:	ec 0e       	add	r14, r28
    71b6:	fd 1e       	adc	r15, r29
    71b8:	85 5e       	subi	r24, 0xE5	; 229
    71ba:	b7 01       	movw	r22, r14
    71bc:	0e 94 34 1a 	call	0x3468	; 0x3468 <GetTabSpace>
		      sprintf_P(strReport,PSTR("P%d.%d - %s %s %s"),PumpNum,PumpNozzle,strProduct,strTabSpace2,strProductPrice);
    71c0:	ad b7       	in	r26, 0x3d	; 61
    71c2:	be b7       	in	r27, 0x3e	; 62
    71c4:	1e 97       	sbiw	r26, 0x0e	; 14
    71c6:	0f b6       	in	r0, 0x3f	; 63
    71c8:	f8 94       	cli
    71ca:	be bf       	out	0x3e, r27	; 62
    71cc:	0f be       	out	0x3f, r0	; 63
    71ce:	ad bf       	out	0x3d, r26	; 61
    71d0:	ed b7       	in	r30, 0x3d	; 61
    71d2:	fe b7       	in	r31, 0x3e	; 62
    71d4:	31 96       	adiw	r30, 0x01	; 1
    71d6:	12 96       	adiw	r26, 0x02	; 2
    71d8:	dc 92       	st	X, r13
    71da:	ce 92       	st	-X, r12
    71dc:	11 97       	sbiw	r26, 0x01	; 1
    71de:	84 e2       	ldi	r24, 0x24	; 36
    71e0:	96 e0       	ldi	r25, 0x06	; 6
    71e2:	93 83       	std	Z+3, r25	; 0x03
    71e4:	82 83       	std	Z+2, r24	; 0x02
    71e6:	80 91 e4 01 	lds	r24, 0x01E4
    71ea:	84 83       	std	Z+4, r24	; 0x04
    71ec:	15 82       	std	Z+5, r1	; 0x05
    71ee:	80 91 e3 01 	lds	r24, 0x01E3
    71f2:	86 83       	std	Z+6, r24	; 0x06
    71f4:	17 82       	std	Z+7, r1	; 0x07
    71f6:	b1 86       	std	Z+9, r11	; 0x09
    71f8:	a0 86       	std	Z+8, r10	; 0x08
    71fa:	f3 86       	std	Z+11, r15	; 0x0b
    71fc:	e2 86       	std	Z+10, r14	; 0x0a
    71fe:	15 87       	std	Z+13, r17	; 0x0d
    7200:	04 87       	std	Z+12, r16	; 0x0c
    7202:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
    7206:	ed b7       	in	r30, 0x3d	; 61
    7208:	fe b7       	in	r31, 0x3e	; 62
    720a:	3e 96       	adiw	r30, 0x0e	; 14
    720c:	24 c0       	rjmp	.+72     	; 0x7256 <systemGenerateReport+0x95c>
		  }
		  else sprintf_P(strReport,PSTR("P%d.%d - %s "),PumpNum,PumpNozzle,strProduct);
    720e:	8d b7       	in	r24, 0x3d	; 61
    7210:	9e b7       	in	r25, 0x3e	; 62
    7212:	0a 97       	sbiw	r24, 0x0a	; 10
    7214:	0f b6       	in	r0, 0x3f	; 63
    7216:	f8 94       	cli
    7218:	9e bf       	out	0x3e, r25	; 62
    721a:	0f be       	out	0x3f, r0	; 63
    721c:	8d bf       	out	0x3d, r24	; 61
    721e:	ed b7       	in	r30, 0x3d	; 61
    7220:	fe b7       	in	r31, 0x3e	; 62
    7222:	31 96       	adiw	r30, 0x01	; 1
    7224:	ad b7       	in	r26, 0x3d	; 61
    7226:	be b7       	in	r27, 0x3e	; 62
    7228:	12 96       	adiw	r26, 0x02	; 2
    722a:	dc 92       	st	X, r13
    722c:	ce 92       	st	-X, r12
    722e:	11 97       	sbiw	r26, 0x01	; 1
    7230:	87 e1       	ldi	r24, 0x17	; 23
    7232:	96 e0       	ldi	r25, 0x06	; 6
    7234:	93 83       	std	Z+3, r25	; 0x03
    7236:	82 83       	std	Z+2, r24	; 0x02
    7238:	80 91 e4 01 	lds	r24, 0x01E4
    723c:	84 83       	std	Z+4, r24	; 0x04
    723e:	15 82       	std	Z+5, r1	; 0x05
    7240:	80 91 e3 01 	lds	r24, 0x01E3
    7244:	86 83       	std	Z+6, r24	; 0x06
    7246:	17 82       	std	Z+7, r1	; 0x07
    7248:	b1 86       	std	Z+9, r11	; 0x09
    724a:	a0 86       	std	Z+8, r10	; 0x08
    724c:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
    7250:	ed b7       	in	r30, 0x3d	; 61
    7252:	fe b7       	in	r31, 0x3e	; 62
    7254:	3a 96       	adiw	r30, 0x0a	; 10
    7256:	0f b6       	in	r0, 0x3f	; 63
    7258:	f8 94       	cli
    725a:	fe bf       	out	0x3e, r31	; 62
    725c:	0f be       	out	0x3f, r0	; 63
    725e:	ed bf       	out	0x3d, r30	; 61
		  CreateReport(strReport,PrintBuffer,&RepPos);
    7260:	e5 ea       	ldi	r30, 0xA5	; 165
    7262:	8e 2e       	mov	r8, r30
    7264:	91 2c       	mov	r9, r1
    7266:	8c 0e       	add	r8, r28
    7268:	9d 1e       	adc	r9, r29
    726a:	c4 01       	movw	r24, r8
    726c:	6e e6       	ldi	r22, 0x6E	; 110
    726e:	74 e0       	ldi	r23, 0x04	; 4
    7270:	46 ed       	ldi	r20, 0xD6	; 214
    7272:	51 e0       	ldi	r21, 0x01	; 1
    7274:	0e 94 15 22 	call	0x442a	; 0x442a <CreateReport>
          InserBorder(btMiddleLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btMiddleRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);          
    7278:	84 e0       	ldi	r24, 0x04	; 4
    727a:	6e e6       	ldi	r22, 0x6E	; 110
    727c:	74 e0       	ldi	r23, 0x04	; 4
    727e:	41 e0       	ldi	r20, 0x01	; 1
    7280:	26 ed       	ldi	r18, 0xD6	; 214
    7282:	31 e0       	ldi	r19, 0x01	; 1
    7284:	0e 94 84 1a 	call	0x3508	; 0x3508 <InserBorder>
    7288:	8b e0       	ldi	r24, 0x0B	; 11
    728a:	6e e6       	ldi	r22, 0x6E	; 110
    728c:	74 e0       	ldi	r23, 0x04	; 4
    728e:	4a e2       	ldi	r20, 0x2A	; 42
    7290:	26 ed       	ldi	r18, 0xD6	; 214
    7292:	31 e0       	ldi	r19, 0x01	; 1
    7294:	0e 94 84 1a 	call	0x3508	; 0x3508 <InserBorder>
    7298:	86 e0       	ldi	r24, 0x06	; 6
    729a:	6e e6       	ldi	r22, 0x6E	; 110
    729c:	74 e0       	ldi	r23, 0x04	; 4
    729e:	41 e0       	ldi	r20, 0x01	; 1
    72a0:	26 ed       	ldi	r18, 0xD6	; 214
    72a2:	31 e0       	ldi	r19, 0x01	; 1
    72a4:	0e 94 84 1a 	call	0x3508	; 0x3508 <InserBorder>
    72a8:	8c e0       	ldi	r24, 0x0C	; 12
    72aa:	6e e6       	ldi	r22, 0x6E	; 110
    72ac:	74 e0       	ldi	r23, 0x04	; 4
    72ae:	41 e0       	ldi	r20, 0x01	; 1
    72b0:	26 ed       	ldi	r18, 0xD6	; 214
    72b2:	31 e0       	ldi	r19, 0x01	; 1
    72b4:	0e 94 84 1a 	call	0x3508	; 0x3508 <InserBorder>

		  GetTabSpace((17-strlen(strCurrentVolume)),strTabSpace);
    72b8:	77 e3       	ldi	r23, 0x37	; 55
    72ba:	e7 2e       	mov	r14, r23
    72bc:	f1 2c       	mov	r15, r1
    72be:	ec 0e       	add	r14, r28
    72c0:	fd 1e       	adc	r15, r29
    72c2:	f7 01       	movw	r30, r14
    72c4:	01 90       	ld	r0, Z+
    72c6:	00 20       	and	r0, r0
    72c8:	e9 f7       	brne	.-6      	; 0x72c4 <systemGenerateReport+0x9ca>
    72ca:	8e 2d       	mov	r24, r14
    72cc:	8e 1b       	sub	r24, r30
    72ce:	69 e6       	ldi	r22, 0x69	; 105
    72d0:	c6 2e       	mov	r12, r22
    72d2:	d1 2c       	mov	r13, r1
    72d4:	cc 0e       	add	r12, r28
    72d6:	dd 1e       	adc	r13, r29
    72d8:	8e 5e       	subi	r24, 0xEE	; 238
    72da:	b6 01       	movw	r22, r12
    72dc:	0e 94 34 1a 	call	0x3468	; 0x3468 <GetTabSpace>
		  GetTabSpace((15-strlen(strCurrentMoney)),strTabSpace2);
    72e0:	8e 01       	movw	r16, r28
    72e2:	0a 5b       	subi	r16, 0xBA	; 186
    72e4:	1f 4f       	sbci	r17, 0xFF	; 255
    72e6:	f8 01       	movw	r30, r16
    72e8:	01 90       	ld	r0, Z+
    72ea:	00 20       	and	r0, r0
    72ec:	e9 f7       	brne	.-6      	; 0x72e8 <systemGenerateReport+0x9ee>
    72ee:	80 2f       	mov	r24, r16
    72f0:	8e 1b       	sub	r24, r30
    72f2:	5d e7       	ldi	r21, 0x7D	; 125
    72f4:	a5 2e       	mov	r10, r21
    72f6:	b1 2c       	mov	r11, r1
    72f8:	ac 0e       	add	r10, r28
    72fa:	bd 1e       	adc	r11, r29
    72fc:	80 5f       	subi	r24, 0xF0	; 240
    72fe:	b5 01       	movw	r22, r10
    7300:	0e 94 34 1a 	call	0x3468	; 0x3468 <GetTabSpace>
		  //PrintMoney
		  if (eeprom_read_byte(&DefPrintMoney)==True) sprintf_P(strReport,PSTR("Akhir:%s%s%s%s"),strTabSpace,strCurrentVolume,strTabSpace2,strCurrentMoney);//CreateReport(strReport,PrintBuffer,&RepPos);
    7304:	82 ec       	ldi	r24, 0xC2	; 194
    7306:	93 e0       	ldi	r25, 0x03	; 3
    7308:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
    730c:	81 30       	cpi	r24, 0x01	; 1
    730e:	19 f5       	brne	.+70     	; 0x7356 <systemGenerateReport+0xa5c>
    7310:	8d b7       	in	r24, 0x3d	; 61
    7312:	9e b7       	in	r25, 0x3e	; 62
    7314:	0c 97       	sbiw	r24, 0x0c	; 12
    7316:	0f b6       	in	r0, 0x3f	; 63
    7318:	f8 94       	cli
    731a:	9e bf       	out	0x3e, r25	; 62
    731c:	0f be       	out	0x3f, r0	; 63
    731e:	8d bf       	out	0x3d, r24	; 61
    7320:	ed b7       	in	r30, 0x3d	; 61
    7322:	fe b7       	in	r31, 0x3e	; 62
    7324:	31 96       	adiw	r30, 0x01	; 1
    7326:	ad b7       	in	r26, 0x3d	; 61
    7328:	be b7       	in	r27, 0x3e	; 62
    732a:	12 96       	adiw	r26, 0x02	; 2
    732c:	9c 92       	st	X, r9
    732e:	8e 92       	st	-X, r8
    7330:	11 97       	sbiw	r26, 0x01	; 1
    7332:	88 e0       	ldi	r24, 0x08	; 8
    7334:	96 e0       	ldi	r25, 0x06	; 6
    7336:	93 83       	std	Z+3, r25	; 0x03
    7338:	82 83       	std	Z+2, r24	; 0x02
    733a:	d5 82       	std	Z+5, r13	; 0x05
    733c:	c4 82       	std	Z+4, r12	; 0x04
    733e:	f7 82       	std	Z+7, r15	; 0x07
    7340:	e6 82       	std	Z+6, r14	; 0x06
    7342:	b1 86       	std	Z+9, r11	; 0x09
    7344:	a0 86       	std	Z+8, r10	; 0x08
    7346:	13 87       	std	Z+11, r17	; 0x0b
    7348:	02 87       	std	Z+10, r16	; 0x0a
    734a:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
    734e:	ed b7       	in	r30, 0x3d	; 61
    7350:	fe b7       	in	r31, 0x3e	; 62
    7352:	3c 96       	adiw	r30, 0x0c	; 12
    7354:	1e c0       	rjmp	.+60     	; 0x7392 <systemGenerateReport+0xa98>
		  else sprintf_P(strReport,PSTR("Akhir:%s%s"),strTabSpace,strCurrentVolume);
    7356:	8d b7       	in	r24, 0x3d	; 61
    7358:	9e b7       	in	r25, 0x3e	; 62
    735a:	08 97       	sbiw	r24, 0x08	; 8
    735c:	0f b6       	in	r0, 0x3f	; 63
    735e:	f8 94       	cli
    7360:	9e bf       	out	0x3e, r25	; 62
    7362:	0f be       	out	0x3f, r0	; 63
    7364:	8d bf       	out	0x3d, r24	; 61
    7366:	ed b7       	in	r30, 0x3d	; 61
    7368:	fe b7       	in	r31, 0x3e	; 62
    736a:	31 96       	adiw	r30, 0x01	; 1
    736c:	ad b7       	in	r26, 0x3d	; 61
    736e:	be b7       	in	r27, 0x3e	; 62
    7370:	12 96       	adiw	r26, 0x02	; 2
    7372:	9c 92       	st	X, r9
    7374:	8e 92       	st	-X, r8
    7376:	11 97       	sbiw	r26, 0x01	; 1
    7378:	8d ef       	ldi	r24, 0xFD	; 253
    737a:	95 e0       	ldi	r25, 0x05	; 5
    737c:	93 83       	std	Z+3, r25	; 0x03
    737e:	82 83       	std	Z+2, r24	; 0x02
    7380:	d5 82       	std	Z+5, r13	; 0x05
    7382:	c4 82       	std	Z+4, r12	; 0x04
    7384:	f7 82       	std	Z+7, r15	; 0x07
    7386:	e6 82       	std	Z+6, r14	; 0x06
    7388:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
    738c:	ed b7       	in	r30, 0x3d	; 61
    738e:	fe b7       	in	r31, 0x3e	; 62
    7390:	38 96       	adiw	r30, 0x08	; 8
    7392:	0f b6       	in	r0, 0x3f	; 63
    7394:	f8 94       	cli
    7396:	fe bf       	out	0x3e, r31	; 62
    7398:	0f be       	out	0x3f, r0	; 63
    739a:	ed bf       	out	0x3d, r30	; 61
		  CreateReport(strReport,PrintBuffer,&RepPos);
    739c:	45 ea       	ldi	r20, 0xA5	; 165
    739e:	a4 2e       	mov	r10, r20
    73a0:	b1 2c       	mov	r11, r1
    73a2:	ac 0e       	add	r10, r28
    73a4:	bd 1e       	adc	r11, r29
    73a6:	c5 01       	movw	r24, r10
    73a8:	6e e6       	ldi	r22, 0x6E	; 110
    73aa:	74 e0       	ldi	r23, 0x04	; 4
    73ac:	46 ed       	ldi	r20, 0xD6	; 214
    73ae:	51 e0       	ldi	r21, 0x01	; 1
    73b0:	0e 94 15 22 	call	0x442a	; 0x442a <CreateReport>

		  GetTabSpace((17-strlen(strLastVolume)),strTabSpace);
    73b4:	39 e1       	ldi	r19, 0x19	; 25
    73b6:	e3 2e       	mov	r14, r19
    73b8:	f1 2c       	mov	r15, r1
    73ba:	ec 0e       	add	r14, r28
    73bc:	fd 1e       	adc	r15, r29
    73be:	f7 01       	movw	r30, r14
    73c0:	01 90       	ld	r0, Z+
    73c2:	00 20       	and	r0, r0
    73c4:	e9 f7       	brne	.-6      	; 0x73c0 <systemGenerateReport+0xac6>
    73c6:	8e 2d       	mov	r24, r14
    73c8:	8e 1b       	sub	r24, r30
    73ca:	29 e6       	ldi	r18, 0x69	; 105
    73cc:	c2 2e       	mov	r12, r18
    73ce:	d1 2c       	mov	r13, r1
    73d0:	cc 0e       	add	r12, r28
    73d2:	dd 1e       	adc	r13, r29
    73d4:	8e 5e       	subi	r24, 0xEE	; 238
    73d6:	b6 01       	movw	r22, r12
    73d8:	0e 94 34 1a 	call	0x3468	; 0x3468 <GetTabSpace>
		  GetTabSpace((15-strlen(strLastMoney)),strTabSpace2);
    73dc:	8e 01       	movw	r16, r28
    73de:	08 5d       	subi	r16, 0xD8	; 216
    73e0:	1f 4f       	sbci	r17, 0xFF	; 255
    73e2:	f8 01       	movw	r30, r16
    73e4:	01 90       	ld	r0, Z+
    73e6:	00 20       	and	r0, r0
    73e8:	e9 f7       	brne	.-6      	; 0x73e4 <systemGenerateReport+0xaea>
    73ea:	80 2f       	mov	r24, r16
    73ec:	8e 1b       	sub	r24, r30
    73ee:	9d e7       	ldi	r25, 0x7D	; 125
    73f0:	89 2e       	mov	r8, r25
    73f2:	91 2c       	mov	r9, r1
    73f4:	8c 0e       	add	r8, r28
    73f6:	9d 1e       	adc	r9, r29
    73f8:	80 5f       	subi	r24, 0xF0	; 240
    73fa:	b4 01       	movw	r22, r8
    73fc:	0e 94 34 1a 	call	0x3468	; 0x3468 <GetTabSpace>
		  //PrintMoney
		  if (eeprom_read_byte(&DefPrintMoney)==True)sprintf_P(strReport,PSTR("Awal :%s%s%s%s"),strTabSpace,strLastVolume,strTabSpace2,strLastMoney);//CreateReport(strReport,PrintBuffer,&RepPos);
    7400:	82 ec       	ldi	r24, 0xC2	; 194
    7402:	93 e0       	ldi	r25, 0x03	; 3
    7404:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
    7408:	81 30       	cpi	r24, 0x01	; 1
    740a:	19 f5       	brne	.+70     	; 0x7452 <systemGenerateReport+0xb58>
    740c:	8d b7       	in	r24, 0x3d	; 61
    740e:	9e b7       	in	r25, 0x3e	; 62
    7410:	0c 97       	sbiw	r24, 0x0c	; 12
    7412:	0f b6       	in	r0, 0x3f	; 63
    7414:	f8 94       	cli
    7416:	9e bf       	out	0x3e, r25	; 62
    7418:	0f be       	out	0x3f, r0	; 63
    741a:	8d bf       	out	0x3d, r24	; 61
    741c:	ed b7       	in	r30, 0x3d	; 61
    741e:	fe b7       	in	r31, 0x3e	; 62
    7420:	31 96       	adiw	r30, 0x01	; 1
    7422:	ad b7       	in	r26, 0x3d	; 61
    7424:	be b7       	in	r27, 0x3e	; 62
    7426:	12 96       	adiw	r26, 0x02	; 2
    7428:	bc 92       	st	X, r11
    742a:	ae 92       	st	-X, r10
    742c:	11 97       	sbiw	r26, 0x01	; 1
    742e:	8e ee       	ldi	r24, 0xEE	; 238
    7430:	95 e0       	ldi	r25, 0x05	; 5
    7432:	93 83       	std	Z+3, r25	; 0x03
    7434:	82 83       	std	Z+2, r24	; 0x02
    7436:	d5 82       	std	Z+5, r13	; 0x05
    7438:	c4 82       	std	Z+4, r12	; 0x04
    743a:	f7 82       	std	Z+7, r15	; 0x07
    743c:	e6 82       	std	Z+6, r14	; 0x06
    743e:	91 86       	std	Z+9, r9	; 0x09
    7440:	80 86       	std	Z+8, r8	; 0x08
    7442:	13 87       	std	Z+11, r17	; 0x0b
    7444:	02 87       	std	Z+10, r16	; 0x0a
    7446:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
    744a:	ed b7       	in	r30, 0x3d	; 61
    744c:	fe b7       	in	r31, 0x3e	; 62
    744e:	3c 96       	adiw	r30, 0x0c	; 12
    7450:	1e c0       	rjmp	.+60     	; 0x748e <systemGenerateReport+0xb94>
		  else sprintf_P(strReport,PSTR("Awal :%s%s"),strTabSpace,strLastVolume);
    7452:	8d b7       	in	r24, 0x3d	; 61
    7454:	9e b7       	in	r25, 0x3e	; 62
    7456:	08 97       	sbiw	r24, 0x08	; 8
    7458:	0f b6       	in	r0, 0x3f	; 63
    745a:	f8 94       	cli
    745c:	9e bf       	out	0x3e, r25	; 62
    745e:	0f be       	out	0x3f, r0	; 63
    7460:	8d bf       	out	0x3d, r24	; 61
    7462:	ed b7       	in	r30, 0x3d	; 61
    7464:	fe b7       	in	r31, 0x3e	; 62
    7466:	31 96       	adiw	r30, 0x01	; 1
    7468:	ad b7       	in	r26, 0x3d	; 61
    746a:	be b7       	in	r27, 0x3e	; 62
    746c:	12 96       	adiw	r26, 0x02	; 2
    746e:	bc 92       	st	X, r11
    7470:	ae 92       	st	-X, r10
    7472:	11 97       	sbiw	r26, 0x01	; 1
    7474:	83 ee       	ldi	r24, 0xE3	; 227
    7476:	95 e0       	ldi	r25, 0x05	; 5
    7478:	93 83       	std	Z+3, r25	; 0x03
    747a:	82 83       	std	Z+2, r24	; 0x02
    747c:	d5 82       	std	Z+5, r13	; 0x05
    747e:	c4 82       	std	Z+4, r12	; 0x04
    7480:	f7 82       	std	Z+7, r15	; 0x07
    7482:	e6 82       	std	Z+6, r14	; 0x06
    7484:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
    7488:	ed b7       	in	r30, 0x3d	; 61
    748a:	fe b7       	in	r31, 0x3e	; 62
    748c:	38 96       	adiw	r30, 0x08	; 8
    748e:	0f b6       	in	r0, 0x3f	; 63
    7490:	f8 94       	cli
    7492:	fe bf       	out	0x3e, r31	; 62
    7494:	0f be       	out	0x3f, r0	; 63
    7496:	ed bf       	out	0x3d, r30	; 61
		  CreateReport(strReport,PrintBuffer,&RepPos);
    7498:	8e 01       	movw	r16, r28
    749a:	0b 55       	subi	r16, 0x5B	; 91
    749c:	1f 4f       	sbci	r17, 0xFF	; 255
    749e:	c8 01       	movw	r24, r16
    74a0:	6e e6       	ldi	r22, 0x6E	; 110
    74a2:	74 e0       	ldi	r23, 0x04	; 4
    74a4:	46 ed       	ldi	r20, 0xD6	; 214
    74a6:	51 e0       	ldi	r21, 0x01	; 1
    74a8:	0e 94 15 22 	call	0x442a	; 0x442a <CreateReport>

		  GetTabSpace(12,strTabSpace);
    74ac:	b9 e6       	ldi	r27, 0x69	; 105
    74ae:	eb 2e       	mov	r14, r27
    74b0:	f1 2c       	mov	r15, r1
    74b2:	ec 0e       	add	r14, r28
    74b4:	fd 1e       	adc	r15, r29
    74b6:	8c e0       	ldi	r24, 0x0C	; 12
    74b8:	b7 01       	movw	r22, r14
    74ba:	0e 94 34 1a 	call	0x3468	; 0x3468 <GetTabSpace>
          //PrintMoney
          if (eeprom_read_byte(&DefPrintMoney)==True)sprintf_P(strReport,PSTR("%s-----------   -------------"),strTabSpace);//CreateReport(strReport,PrintBuffer,&RepPos);
    74be:	82 ec       	ldi	r24, 0xC2	; 194
    74c0:	93 e0       	ldi	r25, 0x03	; 3
    74c2:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
    74c6:	81 30       	cpi	r24, 0x01	; 1
    74c8:	79 f4       	brne	.+30     	; 0x74e8 <systemGenerateReport+0xbee>
    74ca:	00 d0       	rcall	.+0      	; 0x74cc <systemGenerateReport+0xbd2>
    74cc:	00 d0       	rcall	.+0      	; 0x74ce <systemGenerateReport+0xbd4>
    74ce:	00 d0       	rcall	.+0      	; 0x74d0 <systemGenerateReport+0xbd6>
    74d0:	ed b7       	in	r30, 0x3d	; 61
    74d2:	fe b7       	in	r31, 0x3e	; 62
    74d4:	31 96       	adiw	r30, 0x01	; 1
    74d6:	ad b7       	in	r26, 0x3d	; 61
    74d8:	be b7       	in	r27, 0x3e	; 62
    74da:	12 96       	adiw	r26, 0x02	; 2
    74dc:	1c 93       	st	X, r17
    74de:	0e 93       	st	-X, r16
    74e0:	11 97       	sbiw	r26, 0x01	; 1
    74e2:	85 ec       	ldi	r24, 0xC5	; 197
    74e4:	95 e0       	ldi	r25, 0x05	; 5
    74e6:	0e c0       	rjmp	.+28     	; 0x7504 <systemGenerateReport+0xc0a>
		  else sprintf_P(strReport,PSTR("%s-----------                "),strTabSpace);CreateReport(strReport,PrintBuffer,&RepPos);
    74e8:	00 d0       	rcall	.+0      	; 0x74ea <systemGenerateReport+0xbf0>
    74ea:	00 d0       	rcall	.+0      	; 0x74ec <systemGenerateReport+0xbf2>
    74ec:	00 d0       	rcall	.+0      	; 0x74ee <systemGenerateReport+0xbf4>
    74ee:	ed b7       	in	r30, 0x3d	; 61
    74f0:	fe b7       	in	r31, 0x3e	; 62
    74f2:	31 96       	adiw	r30, 0x01	; 1
    74f4:	ad b7       	in	r26, 0x3d	; 61
    74f6:	be b7       	in	r27, 0x3e	; 62
    74f8:	12 96       	adiw	r26, 0x02	; 2
    74fa:	1c 93       	st	X, r17
    74fc:	0e 93       	st	-X, r16
    74fe:	11 97       	sbiw	r26, 0x01	; 1
    7500:	87 ea       	ldi	r24, 0xA7	; 167
    7502:	95 e0       	ldi	r25, 0x05	; 5
    7504:	93 83       	std	Z+3, r25	; 0x03
    7506:	82 83       	std	Z+2, r24	; 0x02
    7508:	f5 82       	std	Z+5, r15	; 0x05
    750a:	e4 82       	std	Z+4, r14	; 0x04
    750c:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
    7510:	ed b7       	in	r30, 0x3d	; 61
    7512:	fe b7       	in	r31, 0x3e	; 62
    7514:	36 96       	adiw	r30, 0x06	; 6
    7516:	0f b6       	in	r0, 0x3f	; 63
    7518:	f8 94       	cli
    751a:	fe bf       	out	0x3e, r31	; 62
    751c:	0f be       	out	0x3f, r0	; 63
    751e:	ed bf       	out	0x3d, r30	; 61
    7520:	a5 ea       	ldi	r26, 0xA5	; 165
    7522:	ea 2e       	mov	r14, r26
    7524:	f1 2c       	mov	r15, r1
    7526:	ec 0e       	add	r14, r28
    7528:	fd 1e       	adc	r15, r29
    752a:	c7 01       	movw	r24, r14
    752c:	6e e6       	ldi	r22, 0x6E	; 110
    752e:	74 e0       	ldi	r23, 0x04	; 4
    7530:	46 ed       	ldi	r20, 0xD6	; 214
    7532:	51 e0       	ldi	r21, 0x01	; 1
    7534:	0e 94 15 22 	call	0x442a	; 0x442a <CreateReport>

		  GetTabSpace((23-strlen(strDeltaVolume)),strTabSpace);
    7538:	f7 e8       	ldi	r31, 0x87	; 135
    753a:	cf 2e       	mov	r12, r31
    753c:	f9 e0       	ldi	r31, 0x09	; 9
    753e:	df 2e       	mov	r13, r31
    7540:	f6 01       	movw	r30, r12
    7542:	01 90       	ld	r0, Z+
    7544:	00 20       	and	r0, r0
    7546:	e9 f7       	brne	.-6      	; 0x7542 <systemGenerateReport+0xc48>
    7548:	31 97       	sbiw	r30, 0x01	; 1
    754a:	ec 19       	sub	r30, r12
    754c:	fd 09       	sbc	r31, r13
    754e:	8e 01       	movw	r16, r28
    7550:	07 59       	subi	r16, 0x97	; 151
    7552:	1f 4f       	sbci	r17, 0xFF	; 255
    7554:	87 e1       	ldi	r24, 0x17	; 23
    7556:	8e 1b       	sub	r24, r30
    7558:	b8 01       	movw	r22, r16
    755a:	0e 94 34 1a 	call	0x3468	; 0x3468 <GetTabSpace>
		  GetTabSpace((15-strlen(strDeltaMoney)),strTabSpace2);
    755e:	ef ea       	ldi	r30, 0xAF	; 175
    7560:	8e 2e       	mov	r8, r30
    7562:	ec e0       	ldi	r30, 0x0C	; 12
    7564:	9e 2e       	mov	r9, r30
    7566:	f4 01       	movw	r30, r8
    7568:	01 90       	ld	r0, Z+
    756a:	00 20       	and	r0, r0
    756c:	e9 f7       	brne	.-6      	; 0x7568 <systemGenerateReport+0xc6e>
    756e:	31 97       	sbiw	r30, 0x01	; 1
    7570:	e8 19       	sub	r30, r8
    7572:	f9 09       	sbc	r31, r9
    7574:	7d e7       	ldi	r23, 0x7D	; 125
    7576:	a7 2e       	mov	r10, r23
    7578:	b1 2c       	mov	r11, r1
    757a:	ac 0e       	add	r10, r28
    757c:	bd 1e       	adc	r11, r29
    757e:	8f e0       	ldi	r24, 0x0F	; 15
    7580:	8e 1b       	sub	r24, r30
    7582:	b5 01       	movw	r22, r10
    7584:	0e 94 34 1a 	call	0x3468	; 0x3468 <GetTabSpace>
          //PrintMoney
		  if (eeprom_read_byte(&DefPrintMoney)==True)sprintf_P(strReport,PSTR("%s%s%s%s"),strTabSpace,strDeltaVolume,strTabSpace2,strDeltaMoney);//CreateReport(strReport,PrintBuffer,&RepPos);
    7588:	82 ec       	ldi	r24, 0xC2	; 194
    758a:	93 e0       	ldi	r25, 0x03	; 3
    758c:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
    7590:	81 30       	cpi	r24, 0x01	; 1
    7592:	19 f5       	brne	.+70     	; 0x75da <systemGenerateReport+0xce0>
    7594:	8d b7       	in	r24, 0x3d	; 61
    7596:	9e b7       	in	r25, 0x3e	; 62
    7598:	0c 97       	sbiw	r24, 0x0c	; 12
    759a:	0f b6       	in	r0, 0x3f	; 63
    759c:	f8 94       	cli
    759e:	9e bf       	out	0x3e, r25	; 62
    75a0:	0f be       	out	0x3f, r0	; 63
    75a2:	8d bf       	out	0x3d, r24	; 61
    75a4:	ed b7       	in	r30, 0x3d	; 61
    75a6:	fe b7       	in	r31, 0x3e	; 62
    75a8:	31 96       	adiw	r30, 0x01	; 1
    75aa:	ad b7       	in	r26, 0x3d	; 61
    75ac:	be b7       	in	r27, 0x3e	; 62
    75ae:	12 96       	adiw	r26, 0x02	; 2
    75b0:	fc 92       	st	X, r15
    75b2:	ee 92       	st	-X, r14
    75b4:	11 97       	sbiw	r26, 0x01	; 1
    75b6:	8e e9       	ldi	r24, 0x9E	; 158
    75b8:	95 e0       	ldi	r25, 0x05	; 5
    75ba:	93 83       	std	Z+3, r25	; 0x03
    75bc:	82 83       	std	Z+2, r24	; 0x02
    75be:	15 83       	std	Z+5, r17	; 0x05
    75c0:	04 83       	std	Z+4, r16	; 0x04
    75c2:	d7 82       	std	Z+7, r13	; 0x07
    75c4:	c6 82       	std	Z+6, r12	; 0x06
    75c6:	b1 86       	std	Z+9, r11	; 0x09
    75c8:	a0 86       	std	Z+8, r10	; 0x08
    75ca:	93 86       	std	Z+11, r9	; 0x0b
    75cc:	82 86       	std	Z+10, r8	; 0x0a
    75ce:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
    75d2:	ed b7       	in	r30, 0x3d	; 61
    75d4:	fe b7       	in	r31, 0x3e	; 62
    75d6:	3c 96       	adiw	r30, 0x0c	; 12
    75d8:	1e c0       	rjmp	.+60     	; 0x7616 <systemGenerateReport+0xd1c>
          else sprintf_P(strReport,PSTR("%s%s"),strTabSpace,strDeltaVolume);CreateReport(strReport,PrintBuffer,&RepPos);
    75da:	8d b7       	in	r24, 0x3d	; 61
    75dc:	9e b7       	in	r25, 0x3e	; 62
    75de:	08 97       	sbiw	r24, 0x08	; 8
    75e0:	0f b6       	in	r0, 0x3f	; 63
    75e2:	f8 94       	cli
    75e4:	9e bf       	out	0x3e, r25	; 62
    75e6:	0f be       	out	0x3f, r0	; 63
    75e8:	8d bf       	out	0x3d, r24	; 61
    75ea:	ed b7       	in	r30, 0x3d	; 61
    75ec:	fe b7       	in	r31, 0x3e	; 62
    75ee:	31 96       	adiw	r30, 0x01	; 1
    75f0:	ad b7       	in	r26, 0x3d	; 61
    75f2:	be b7       	in	r27, 0x3e	; 62
    75f4:	12 96       	adiw	r26, 0x02	; 2
    75f6:	fc 92       	st	X, r15
    75f8:	ee 92       	st	-X, r14
    75fa:	11 97       	sbiw	r26, 0x01	; 1
    75fc:	89 e9       	ldi	r24, 0x99	; 153
    75fe:	95 e0       	ldi	r25, 0x05	; 5
    7600:	93 83       	std	Z+3, r25	; 0x03
    7602:	82 83       	std	Z+2, r24	; 0x02
    7604:	15 83       	std	Z+5, r17	; 0x05
    7606:	04 83       	std	Z+4, r16	; 0x04
    7608:	d7 82       	std	Z+7, r13	; 0x07
    760a:	c6 82       	std	Z+6, r12	; 0x06
    760c:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
    7610:	ed b7       	in	r30, 0x3d	; 61
    7612:	fe b7       	in	r31, 0x3e	; 62
    7614:	38 96       	adiw	r30, 0x08	; 8
    7616:	0f b6       	in	r0, 0x3f	; 63
    7618:	f8 94       	cli
    761a:	fe bf       	out	0x3e, r31	; 62
    761c:	0f be       	out	0x3f, r0	; 63
    761e:	ed bf       	out	0x3d, r30	; 61
    7620:	ce 01       	movw	r24, r28
    7622:	8b 55       	subi	r24, 0x5B	; 91
    7624:	9f 4f       	sbci	r25, 0xFF	; 255
    7626:	6e e6       	ldi	r22, 0x6E	; 110
    7628:	74 e0       	ldi	r23, 0x04	; 4
    762a:	46 ed       	ldi	r20, 0xD6	; 214
    762c:	51 e0       	ldi	r21, 0x01	; 1
    762e:	0e 94 15 22 	call	0x442a	; 0x442a <CreateReport>

          InserBorder(btBottomLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btBottomRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);
    7632:	87 e0       	ldi	r24, 0x07	; 7
    7634:	6e e6       	ldi	r22, 0x6E	; 110
    7636:	74 e0       	ldi	r23, 0x04	; 4
    7638:	41 e0       	ldi	r20, 0x01	; 1
    763a:	26 ed       	ldi	r18, 0xD6	; 214
    763c:	31 e0       	ldi	r19, 0x01	; 1
    763e:	0e 94 84 1a 	call	0x3508	; 0x3508 <InserBorder>
    7642:	8b e0       	ldi	r24, 0x0B	; 11
    7644:	6e e6       	ldi	r22, 0x6E	; 110
    7646:	74 e0       	ldi	r23, 0x04	; 4
    7648:	4a e2       	ldi	r20, 0x2A	; 42
    764a:	26 ed       	ldi	r18, 0xD6	; 214
    764c:	31 e0       	ldi	r19, 0x01	; 1
    764e:	0e 94 84 1a 	call	0x3508	; 0x3508 <InserBorder>
    7652:	89 e0       	ldi	r24, 0x09	; 9
    7654:	6e e6       	ldi	r22, 0x6E	; 110
    7656:	74 e0       	ldi	r23, 0x04	; 4
    7658:	41 e0       	ldi	r20, 0x01	; 1
    765a:	26 ed       	ldi	r18, 0xD6	; 214
    765c:	31 e0       	ldi	r19, 0x01	; 1
    765e:	0e 94 84 1a 	call	0x3508	; 0x3508 <InserBorder>
    7662:	8c e0       	ldi	r24, 0x0C	; 12
    7664:	6e e6       	ldi	r22, 0x6E	; 110
    7666:	74 e0       	ldi	r23, 0x04	; 4
    7668:	41 e0       	ldi	r20, 0x01	; 1
    766a:	26 ed       	ldi	r18, 0xD6	; 214
    766c:	31 e0       	ldi	r19, 0x01	; 1
    766e:	0e 94 84 1a 	call	0x3508	; 0x3508 <InserBorder>


          cmdPrint=0b00000000;
    7672:	10 92 b5 01 	sts	0x01B5, r1
		  LengthMessage81=RepPos+1;
    7676:	80 91 d6 01 	lds	r24, 0x01D6
    767a:	90 91 d7 01 	lds	r25, 0x01D7
    767e:	01 96       	adiw	r24, 0x01	; 1
    7680:	90 93 8e 01 	sts	0x018E, r25
    7684:	80 93 8d 01 	sts	0x018D, r24

		  IsFreePrinting=True;
    7688:	81 e0       	ldi	r24, 0x01	; 1
    768a:	80 93 a8 01 	sts	0x01A8, r24
	      IsBusyFreePrinting=True;
    768e:	80 93 b4 01 	sts	0x01B4, r24

	      stGenerateReport=grWaitPrinted2;
    7692:	89 e0       	ldi	r24, 0x09	; 9
    7694:	61 c3       	rjmp	.+1730   	; 0x7d58 <systemGenerateReport+0x145e>
	      break;
     case grWaitPrinted2:
	 
          if (IsBusyFreePrinting==False)stGenerateReport=grGenerateReportData;
    7696:	80 91 b4 01 	lds	r24, 0x01B4
    769a:	88 23       	and	r24, r24
    769c:	09 f0       	breq	.+2      	; 0x76a0 <systemGenerateReport+0xda6>
    769e:	64 c3       	rjmp	.+1736   	; 0x7d68 <systemGenerateReport+0x146e>
    76a0:	86 e0       	ldi	r24, 0x06	; 6
    76a2:	5a c3       	rjmp	.+1716   	; 0x7d58 <systemGenerateReport+0x145e>
	      break;
     case grCreateReportFooter:
          RepPos=0;
    76a4:	10 92 d7 01 	sts	0x01D7, r1
    76a8:	10 92 d6 01 	sts	0x01D6, r1
    76ac:	ee e6       	ldi	r30, 0x6E	; 110
    76ae:	f4 e0       	ldi	r31, 0x04	; 4
}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
	     strMemory[i]=data;
    76b0:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    76b2:	85 e0       	ldi	r24, 0x05	; 5
    76b4:	ef 3f       	cpi	r30, 0xFF	; 255
    76b6:	f8 07       	cpc	r31, r24
    76b8:	d9 f7       	brne	.-10     	; 0x76b0 <systemGenerateReport+0xdb6>
    76ba:	fe 01       	movw	r30, r28
    76bc:	eb 55       	subi	r30, 0x5B	; 91
    76be:	ff 4f       	sbci	r31, 0xFF	; 255
	     strMemory[i]=data;
    76c0:	cf 01       	movw	r24, r30
    76c2:	9e 2e       	mov	r9, r30
    76c4:	89 2e       	mov	r8, r25
    76c6:	ce 01       	movw	r24, r28
    76c8:	8b 50       	subi	r24, 0x0B	; 11
    76ca:	9f 4f       	sbci	r25, 0xFF	; 255
    76cc:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    76ce:	e8 17       	cp	r30, r24
    76d0:	f9 07       	cpc	r31, r25
    76d2:	e1 f7       	brne	.-8      	; 0x76cc <systemGenerateReport+0xdd2>
     case grCreateReportFooter:
          RepPos=0;
		  FillChar(PrintBuffer,sizeof(PrintBuffer),0);
		  FillChar(strReport,sizeof(strReport),0);

		  RemZeroLead(strTotalMoney);
    76d4:	6a e2       	ldi	r22, 0x2A	; 42
    76d6:	c6 2e       	mov	r12, r22
    76d8:	69 e0       	ldi	r22, 0x09	; 9
    76da:	d6 2e       	mov	r13, r22
    76dc:	c6 01       	movw	r24, r12
    76de:	0e 94 3f 25 	call	0x4a7e	; 0x4a7e <RemZeroLead>
		  RemZeroLead(strTotalVolume);
    76e2:	59 e7       	ldi	r21, 0x79	; 121
    76e4:	e5 2e       	mov	r14, r21
    76e6:	58 e0       	ldi	r21, 0x08	; 8
    76e8:	f5 2e       	mov	r15, r21
    76ea:	c7 01       	movw	r24, r14
    76ec:	0e 94 3f 25 	call	0x4a7e	; 0x4a7e <RemZeroLead>

		  FormatTotalizerMoney(strTotalMoney);
    76f0:	c6 01       	movw	r24, r12
    76f2:	0e 94 45 34 	call	0x688a	; 0x688a <FormatTotalizerMoney>
		  FormatCurrency(strTotalMoney);
    76f6:	c6 01       	movw	r24, r12
    76f8:	0e 94 0d 33 	call	0x661a	; 0x661a <FormatCurrency>
		  FormatTotalizerVolume(strTotalVolume);
    76fc:	c7 01       	movw	r24, r14
    76fe:	0e 94 37 34 	call	0x686e	; 0x686e <FormatTotalizerVolume>
		  FormatCurrency(strTotalVolume);
    7702:	c7 01       	movw	r24, r14
    7704:	0e 94 0d 33 	call	0x661a	; 0x661a <FormatCurrency>

          //Test
		  //RemZeroLead(strTotalMoney);
		  //RemZeroLead(strTotalVolume);

		  InserBorder(btTopLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btTopRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);          
    7708:	81 e0       	ldi	r24, 0x01	; 1
    770a:	6e e6       	ldi	r22, 0x6E	; 110
    770c:	74 e0       	ldi	r23, 0x04	; 4
    770e:	41 e0       	ldi	r20, 0x01	; 1
    7710:	26 ed       	ldi	r18, 0xD6	; 214
    7712:	31 e0       	ldi	r19, 0x01	; 1
    7714:	0e 94 84 1a 	call	0x3508	; 0x3508 <InserBorder>
    7718:	8b e0       	ldi	r24, 0x0B	; 11
    771a:	6e e6       	ldi	r22, 0x6E	; 110
    771c:	74 e0       	ldi	r23, 0x04	; 4
    771e:	4a e2       	ldi	r20, 0x2A	; 42
    7720:	26 ed       	ldi	r18, 0xD6	; 214
    7722:	31 e0       	ldi	r19, 0x01	; 1
    7724:	0e 94 84 1a 	call	0x3508	; 0x3508 <InserBorder>
    7728:	83 e0       	ldi	r24, 0x03	; 3
    772a:	6e e6       	ldi	r22, 0x6E	; 110
    772c:	74 e0       	ldi	r23, 0x04	; 4
    772e:	41 e0       	ldi	r20, 0x01	; 1
    7730:	26 ed       	ldi	r18, 0xD6	; 214
    7732:	31 e0       	ldi	r19, 0x01	; 1
    7734:	0e 94 84 1a 	call	0x3508	; 0x3508 <InserBorder>
    7738:	8c e0       	ldi	r24, 0x0C	; 12
    773a:	6e e6       	ldi	r22, 0x6E	; 110
    773c:	74 e0       	ldi	r23, 0x04	; 4
    773e:	41 e0       	ldi	r20, 0x01	; 1
    7740:	26 ed       	ldi	r18, 0xD6	; 214
    7742:	31 e0       	ldi	r19, 0x01	; 1
    7744:	0e 94 84 1a 	call	0x3508	; 0x3508 <InserBorder>
		  GetTabSpace((17-strlen(strTotalVolume)),strTabSpace);
    7748:	f7 01       	movw	r30, r14
    774a:	01 90       	ld	r0, Z+
    774c:	00 20       	and	r0, r0
    774e:	e9 f7       	brne	.-6      	; 0x774a <systemGenerateReport+0xe50>
    7750:	31 97       	sbiw	r30, 0x01	; 1
    7752:	ee 19       	sub	r30, r14
    7754:	ff 09       	sbc	r31, r15
    7756:	8e 01       	movw	r16, r28
    7758:	07 59       	subi	r16, 0x97	; 151
    775a:	1f 4f       	sbci	r17, 0xFF	; 255
    775c:	81 e1       	ldi	r24, 0x11	; 17
    775e:	8e 1b       	sub	r24, r30
    7760:	b8 01       	movw	r22, r16
    7762:	0e 94 34 1a 	call	0x3468	; 0x3468 <GetTabSpace>
		  GetTabSpace((15-strlen(strTotalMoney)),strTabSpace2);
    7766:	f6 01       	movw	r30, r12
    7768:	01 90       	ld	r0, Z+
    776a:	00 20       	and	r0, r0
    776c:	e9 f7       	brne	.-6      	; 0x7768 <systemGenerateReport+0xe6e>
    776e:	31 97       	sbiw	r30, 0x01	; 1
    7770:	ec 19       	sub	r30, r12
    7772:	fd 09       	sbc	r31, r13
    7774:	4d e7       	ldi	r20, 0x7D	; 125
    7776:	a4 2e       	mov	r10, r20
    7778:	b1 2c       	mov	r11, r1
    777a:	ac 0e       	add	r10, r28
    777c:	bd 1e       	adc	r11, r29
    777e:	8f e0       	ldi	r24, 0x0F	; 15
    7780:	8e 1b       	sub	r24, r30
    7782:	b5 01       	movw	r22, r10
    7784:	0e 94 34 1a 	call	0x3468	; 0x3468 <GetTabSpace>
          //PrintMoney
		  if (eeprom_read_byte(&DefPrintMoney)==True)sprintf_P(strReport,PSTR("TOTAL %s%s%s%s"),strTabSpace,strTotalVolume,strTabSpace2,strTotalMoney);//CreateReport(strReport,PrintBuffer,&RepPos);
    7788:	82 ec       	ldi	r24, 0xC2	; 194
    778a:	93 e0       	ldi	r25, 0x03	; 3
    778c:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
    7790:	81 30       	cpi	r24, 0x01	; 1
    7792:	11 f5       	brne	.+68     	; 0x77d8 <systemGenerateReport+0xede>
    7794:	ad b7       	in	r26, 0x3d	; 61
    7796:	be b7       	in	r27, 0x3e	; 62
    7798:	1c 97       	sbiw	r26, 0x0c	; 12
    779a:	0f b6       	in	r0, 0x3f	; 63
    779c:	f8 94       	cli
    779e:	be bf       	out	0x3e, r27	; 62
    77a0:	0f be       	out	0x3f, r0	; 63
    77a2:	ad bf       	out	0x3d, r26	; 61
    77a4:	ed b7       	in	r30, 0x3d	; 61
    77a6:	fe b7       	in	r31, 0x3e	; 62
    77a8:	31 96       	adiw	r30, 0x01	; 1
    77aa:	11 96       	adiw	r26, 0x01	; 1
    77ac:	9c 92       	st	X, r9
    77ae:	11 97       	sbiw	r26, 0x01	; 1
    77b0:	12 96       	adiw	r26, 0x02	; 2
    77b2:	8c 92       	st	X, r8
    77b4:	8a e8       	ldi	r24, 0x8A	; 138
    77b6:	95 e0       	ldi	r25, 0x05	; 5
    77b8:	93 83       	std	Z+3, r25	; 0x03
    77ba:	82 83       	std	Z+2, r24	; 0x02
    77bc:	15 83       	std	Z+5, r17	; 0x05
    77be:	04 83       	std	Z+4, r16	; 0x04
    77c0:	f7 82       	std	Z+7, r15	; 0x07
    77c2:	e6 82       	std	Z+6, r14	; 0x06
    77c4:	b1 86       	std	Z+9, r11	; 0x09
    77c6:	a0 86       	std	Z+8, r10	; 0x08
    77c8:	d3 86       	std	Z+11, r13	; 0x0b
    77ca:	c2 86       	std	Z+10, r12	; 0x0a
    77cc:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
    77d0:	ed b7       	in	r30, 0x3d	; 61
    77d2:	fe b7       	in	r31, 0x3e	; 62
    77d4:	3c 96       	adiw	r30, 0x0c	; 12
    77d6:	1f c0       	rjmp	.+62     	; 0x7816 <systemGenerateReport+0xf1c>
		  else sprintf_P(strReport,PSTR("TOTAL %s%s"),strTabSpace,strTotalVolume);CreateReport(strReport,PrintBuffer,&RepPos);
    77d8:	8d b7       	in	r24, 0x3d	; 61
    77da:	9e b7       	in	r25, 0x3e	; 62
    77dc:	08 97       	sbiw	r24, 0x08	; 8
    77de:	0f b6       	in	r0, 0x3f	; 63
    77e0:	f8 94       	cli
    77e2:	9e bf       	out	0x3e, r25	; 62
    77e4:	0f be       	out	0x3f, r0	; 63
    77e6:	8d bf       	out	0x3d, r24	; 61
    77e8:	ed b7       	in	r30, 0x3d	; 61
    77ea:	fe b7       	in	r31, 0x3e	; 62
    77ec:	31 96       	adiw	r30, 0x01	; 1
    77ee:	ad b7       	in	r26, 0x3d	; 61
    77f0:	be b7       	in	r27, 0x3e	; 62
    77f2:	11 96       	adiw	r26, 0x01	; 1
    77f4:	9c 92       	st	X, r9
    77f6:	11 97       	sbiw	r26, 0x01	; 1
    77f8:	12 96       	adiw	r26, 0x02	; 2
    77fa:	8c 92       	st	X, r8
    77fc:	8f e7       	ldi	r24, 0x7F	; 127
    77fe:	95 e0       	ldi	r25, 0x05	; 5
    7800:	93 83       	std	Z+3, r25	; 0x03
    7802:	82 83       	std	Z+2, r24	; 0x02
    7804:	15 83       	std	Z+5, r17	; 0x05
    7806:	04 83       	std	Z+4, r16	; 0x04
    7808:	f7 82       	std	Z+7, r15	; 0x07
    780a:	e6 82       	std	Z+6, r14	; 0x06
    780c:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
    7810:	ed b7       	in	r30, 0x3d	; 61
    7812:	fe b7       	in	r31, 0x3e	; 62
    7814:	38 96       	adiw	r30, 0x08	; 8
    7816:	0f b6       	in	r0, 0x3f	; 63
    7818:	f8 94       	cli
    781a:	fe bf       	out	0x3e, r31	; 62
    781c:	0f be       	out	0x3f, r0	; 63
    781e:	ed bf       	out	0x3d, r30	; 61
    7820:	ce 01       	movw	r24, r28
    7822:	8b 55       	subi	r24, 0x5B	; 91
    7824:	9f 4f       	sbci	r25, 0xFF	; 255
    7826:	6e e6       	ldi	r22, 0x6E	; 110
    7828:	74 e0       	ldi	r23, 0x04	; 4
    782a:	46 ed       	ldi	r20, 0xD6	; 214
    782c:	51 e0       	ldi	r21, 0x01	; 1
    782e:	0e 94 15 22 	call	0x442a	; 0x442a <CreateReport>

		  InserBorder(btMiddleLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btMiddleRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);     	      
    7832:	84 e0       	ldi	r24, 0x04	; 4
    7834:	6e e6       	ldi	r22, 0x6E	; 110
    7836:	74 e0       	ldi	r23, 0x04	; 4
    7838:	41 e0       	ldi	r20, 0x01	; 1
    783a:	26 ed       	ldi	r18, 0xD6	; 214
    783c:	31 e0       	ldi	r19, 0x01	; 1
    783e:	0e 94 84 1a 	call	0x3508	; 0x3508 <InserBorder>
    7842:	8b e0       	ldi	r24, 0x0B	; 11
    7844:	6e e6       	ldi	r22, 0x6E	; 110
    7846:	74 e0       	ldi	r23, 0x04	; 4
    7848:	4a e2       	ldi	r20, 0x2A	; 42
    784a:	26 ed       	ldi	r18, 0xD6	; 214
    784c:	31 e0       	ldi	r19, 0x01	; 1
    784e:	0e 94 84 1a 	call	0x3508	; 0x3508 <InserBorder>
    7852:	86 e0       	ldi	r24, 0x06	; 6
    7854:	6e e6       	ldi	r22, 0x6E	; 110
    7856:	74 e0       	ldi	r23, 0x04	; 4
    7858:	41 e0       	ldi	r20, 0x01	; 1
    785a:	26 ed       	ldi	r18, 0xD6	; 214
    785c:	31 e0       	ldi	r19, 0x01	; 1
    785e:	0e 94 84 1a 	call	0x3508	; 0x3508 <InserBorder>
    7862:	8c e0       	ldi	r24, 0x0C	; 12
    7864:	6e e6       	ldi	r22, 0x6E	; 110
    7866:	74 e0       	ldi	r23, 0x04	; 4
    7868:	41 e0       	ldi	r20, 0x01	; 1
    786a:	26 ed       	ldi	r18, 0xD6	; 214
    786c:	31 e0       	ldi	r19, 0x01	; 1
    786e:	0e 94 84 1a 	call	0x3508	; 0x3508 <InserBorder>
    7872:	cb 50       	subi	r28, 0x0B	; 11
    7874:	df 4f       	sbci	r29, 0xFF	; 255
    7876:	18 82       	st	Y, r1
    7878:	c5 5f       	subi	r28, 0xF5	; 245
    787a:	d0 40       	sbci	r29, 0x00	; 0

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    787c:	ce 01       	movw	r24, r28
    787e:	88 96       	adiw	r24, 0x28	; 40
    7880:	c6 50       	subi	r28, 0x06	; 6
    7882:	df 4f       	sbci	r29, 0xFF	; 255
    7884:	99 83       	std	Y+1, r25	; 0x01
    7886:	88 83       	st	Y, r24
    7888:	ca 5f       	subi	r28, 0xFA	; 250
    788a:	d0 40       	sbci	r29, 0x00	; 0
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
    788c:	37 e3       	ldi	r19, 0x37	; 55
    788e:	23 2e       	mov	r2, r19
    7890:	31 2c       	mov	r3, r1
    7892:	2c 0e       	add	r2, r28
    7894:	3d 1e       	adc	r3, r29
    7896:	d1 01       	movw	r26, r2
    7898:	1f 96       	adiw	r26, 0x0f	; 15
    789a:	ca 50       	subi	r28, 0x0A	; 10
    789c:	df 4f       	sbci	r29, 0xFF	; 255
    789e:	b9 83       	std	Y+1, r27	; 0x01
    78a0:	a8 83       	st	Y, r26
    78a2:	c6 5f       	subi	r28, 0xF6	; 246
    78a4:	d0 40       	sbci	r29, 0x00	; 0
    78a6:	e6 e4       	ldi	r30, 0x46	; 70
    78a8:	f0 e0       	ldi	r31, 0x00	; 0
    78aa:	ec 0f       	add	r30, r28
    78ac:	fd 1f       	adc	r31, r29
    78ae:	3f 96       	adiw	r30, 0x0f	; 15
    78b0:	c8 50       	subi	r28, 0x08	; 8
    78b2:	df 4f       	sbci	r29, 0xFF	; 255
    78b4:	f9 83       	std	Y+1, r31	; 0x01
    78b6:	e8 83       	st	Y, r30
    78b8:	c8 5f       	subi	r28, 0xF8	; 248
    78ba:	d0 40       	sbci	r29, 0x00	; 0
    78bc:	da c1       	rjmp	.+948    	; 0x7c72 <systemGenerateReport+0x1378>
    78be:	f2 01       	movw	r30, r4
    78c0:	e8 52       	subi	r30, 0x28	; 40
    78c2:	fe 4f       	sbci	r31, 0xFE	; 254
    78c4:	80 81       	ld	r24, Z
    78c6:	80 53       	subi	r24, 0x30	; 48
    78c8:	8a 30       	cpi	r24, 0x0A	; 10
    78ca:	08 f0       	brcs	.+2      	; 0x78ce <systemGenerateReport+0xfd4>
    78cc:	80 e0       	ldi	r24, 0x00	; 0
		  else sprintf_P(strReport,PSTR("TOTAL %s%s"),strTabSpace,strTotalVolume);CreateReport(strReport,PrintBuffer,&RepPos);

		  InserBorder(btMiddleLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btMiddleRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);     	      

		  for(iTotal=0;iTotal<strlen(GradeList);iTotal++){
		      xGrade=Ord(GradeList[iTotal]);
    78ce:	80 93 e5 01 	sts	0x01E5, r24
			  if (xGrade>0){
    78d2:	88 23       	and	r24, r24
    78d4:	09 f4       	brne	.+2      	; 0x78d8 <systemGenerateReport+0xfde>
    78d6:	c2 c1       	rjmp	.+900    	; 0x7c5c <systemGenerateReport+0x1362>
			      GetProductName(xGrade,strProduct);
    78d8:	60 ee       	ldi	r22, 0xE0	; 224
    78da:	77 e0       	ldi	r23, 0x07	; 7
    78dc:	0e 94 df 2d 	call	0x5bbe	; 0x5bbe <GetProductName>
    78e0:	e9 e7       	ldi	r30, 0x79	; 121
    78e2:	f8 e0       	ldi	r31, 0x08	; 8
}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
	     strMemory[i]=data;
    78e4:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    78e6:	88 e0       	ldi	r24, 0x08	; 8
    78e8:	ed 38       	cpi	r30, 0x8D	; 141
    78ea:	f8 07       	cpc	r31, r24
    78ec:	d9 f7       	brne	.-10     	; 0x78e4 <systemGenerateReport+0xfea>
    78ee:	ea e2       	ldi	r30, 0x2A	; 42
    78f0:	f9 e0       	ldi	r31, 0x09	; 9
	     strMemory[i]=data;
    78f2:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    78f4:	99 e0       	ldi	r25, 0x09	; 9
    78f6:	ee 33       	cpi	r30, 0x3E	; 62
    78f8:	f9 07       	cpc	r31, r25
    78fa:	d9 f7       	brne	.-10     	; 0x78f2 <systemGenerateReport+0xff8>
			      GetProductName(xGrade,strProduct);
				  
				  FillChar(strTotalVolume,sizeof(strTotalVolume),0);
				  FillChar(strTotalMoney,sizeof(strTotalMoney),0);

				  for(xPump=1;xPump<=8;xPump++){
    78fc:	81 e0       	ldi	r24, 0x01	; 1
    78fe:	80 93 e7 01 	sts	0x01E7, r24
				      eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap, 8);
    7902:	27 e0       	ldi	r18, 0x07	; 7
    7904:	82 2e       	mov	r8, r18
    7906:	91 2c       	mov	r9, r1
    7908:	8c 0e       	add	r8, r28
    790a:	9d 1e       	adc	r9, r29

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    790c:	99 e1       	ldi	r25, 0x19	; 25
    790e:	c9 2e       	mov	r12, r25
    7910:	d1 2c       	mov	r13, r1
    7912:	cc 0e       	add	r12, r28
    7914:	dd 1e       	adc	r13, r29
								      NormalizeOverflow(strDeltaVolume);


								  //Calculate Wayne Estimated Total Money
								  if (eeprom_read_byte(&DefDispenserBrand)==ST_WAYNE_DART){
						              GetProductPrice(sPrice,PumpNum,PumpNozzle);//Money = Price x Volume
    7916:	8f e0       	ldi	r24, 0x0F	; 15
    7918:	a8 2e       	mov	r10, r24
    791a:	b1 2c       	mov	r11, r1
    791c:	ac 0e       	add	r10, r28
    791e:	bd 1e       	adc	r11, r29
    7920:	ee c0       	rjmp	.+476    	; 0x7afe <systemGenerateReport+0x1204>
				  
				  FillChar(strTotalVolume,sizeof(strTotalVolume),0);
				  FillChar(strTotalMoney,sizeof(strTotalMoney),0);

				  for(xPump=1;xPump<=8;xPump++){
				      eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap, 8);
    7922:	c4 01       	movw	r24, r8
    7924:	66 e4       	ldi	r22, 0x46	; 70
    7926:	70 e0       	ldi	r23, 0x00	; 0
    7928:	48 e0       	ldi	r20, 0x08	; 8
    792a:	50 e0       	ldi	r21, 0x00	; 0
    792c:	0e 94 1b ad 	call	0x15a36	; 0x15a36 <__eerd_block_m128>
			          PumpNum=PPumpID[xPump-1];
    7930:	80 91 e7 01 	lds	r24, 0x01E7
    7934:	fe 01       	movw	r30, r28
    7936:	e8 0f       	add	r30, r24
    7938:	f1 1d       	adc	r31, r1
    793a:	86 81       	ldd	r24, Z+6	; 0x06
    793c:	80 93 e4 01 	sts	0x01E4, r24
					  if (PumpNum>0){
    7940:	88 23       	and	r24, r24
    7942:	09 f4       	brne	.+2      	; 0x7946 <systemGenerateReport+0x104c>
    7944:	d7 c0       	rjmp	.+430    	; 0x7af4 <systemGenerateReport+0x11fa>
						  for (xNozzle=1;xNozzle<=6;xNozzle++){
    7946:	81 e0       	ldi	r24, 0x01	; 1
    7948:	80 93 e6 01 	sts	0x01E6, r24
							  eeprom_read_block((void*) &PProductID, (const void*) &DefNozzleMap[xPump-1], 6);
    794c:	06 e0       	ldi	r16, 0x06	; 6
    794e:	e0 2e       	mov	r14, r16
    7950:	cc c0       	rjmp	.+408    	; 0x7aea <systemGenerateReport+0x11f0>
    7952:	60 91 e7 01 	lds	r22, 0x01E7
    7956:	6e 9d       	mul	r22, r14
    7958:	b0 01       	movw	r22, r0
    795a:	11 24       	eor	r1, r1
    795c:	60 5b       	subi	r22, 0xB0	; 176
    795e:	7f 4f       	sbci	r23, 0xFF	; 255
    7960:	ce 01       	movw	r24, r28
    7962:	01 96       	adiw	r24, 0x01	; 1
    7964:	46 e0       	ldi	r20, 0x06	; 6
    7966:	50 e0       	ldi	r21, 0x00	; 0
    7968:	0e 94 1b ad 	call	0x15a36	; 0x15a36 <__eerd_block_m128>
							  //Found Grade
						      if (PProductID[xNozzle-1]==xGrade){
    796c:	80 91 e6 01 	lds	r24, 0x01E6
    7970:	fe 01       	movw	r30, r28
    7972:	e8 0f       	add	r30, r24
    7974:	f1 1d       	adc	r31, r1
    7976:	90 81       	ld	r25, Z
    7978:	80 91 e5 01 	lds	r24, 0x01E5
    797c:	98 17       	cp	r25, r24
    797e:	09 f0       	breq	.+2      	; 0x7982 <systemGenerateReport+0x1088>
    7980:	af c0       	rjmp	.+350    	; 0x7ae0 <systemGenerateReport+0x11e6>
    7982:	ef ea       	ldi	r30, 0xAF	; 175
    7984:	fc e0       	ldi	r31, 0x0C	; 12
}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
	     strMemory[i]=data;
    7986:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    7988:	ac e0       	ldi	r26, 0x0C	; 12
    798a:	ee 3b       	cpi	r30, 0xBE	; 190
    798c:	fa 07       	cpc	r31, r26
    798e:	d9 f7       	brne	.-10     	; 0x7986 <systemGenerateReport+0x108c>
    7990:	e7 e8       	ldi	r30, 0x87	; 135
    7992:	f9 e0       	ldi	r31, 0x09	; 9
	     strMemory[i]=data;
    7994:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    7996:	b9 e0       	ldi	r27, 0x09	; 9
    7998:	e6 39       	cpi	r30, 0x96	; 150
    799a:	fb 07       	cpc	r31, r27
    799c:	d9 f7       	brne	.-10     	; 0x7994 <systemGenerateReport+0x109a>
    799e:	f6 01       	movw	r30, r12
	     strMemory[i]=data;
    79a0:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    79a2:	c6 50       	subi	r28, 0x06	; 6
    79a4:	df 4f       	sbci	r29, 0xFF	; 255
    79a6:	88 81       	ld	r24, Y
    79a8:	99 81       	ldd	r25, Y+1	; 0x01
    79aa:	ca 5f       	subi	r28, 0xFA	; 250
    79ac:	d0 40       	sbci	r29, 0x00	; 0
    79ae:	e8 17       	cp	r30, r24
    79b0:	f9 07       	cpc	r31, r25
    79b2:	b1 f7       	brne	.-20     	; 0x79a0 <systemGenerateReport+0x10a6>
    79b4:	fe 01       	movw	r30, r28
    79b6:	b8 96       	adiw	r30, 0x28	; 40
	     strMemory[i]=data;
    79b8:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    79ba:	e2 15       	cp	r30, r2
    79bc:	f3 05       	cpc	r31, r3
    79be:	e1 f7       	brne	.-8      	; 0x79b8 <systemGenerateReport+0x10be>
    79c0:	f1 01       	movw	r30, r2
	     strMemory[i]=data;
    79c2:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    79c4:	ca 50       	subi	r28, 0x0A	; 10
    79c6:	df 4f       	sbci	r29, 0xFF	; 255
    79c8:	a8 81       	ld	r26, Y
    79ca:	b9 81       	ldd	r27, Y+1	; 0x01
    79cc:	c6 5f       	subi	r28, 0xF6	; 246
    79ce:	d0 40       	sbci	r29, 0x00	; 0
    79d0:	ea 17       	cp	r30, r26
    79d2:	fb 07       	cpc	r31, r27
    79d4:	b1 f7       	brne	.-20     	; 0x79c2 <systemGenerateReport+0x10c8>
    79d6:	fe 01       	movw	r30, r28
    79d8:	ea 5b       	subi	r30, 0xBA	; 186
    79da:	ff 4f       	sbci	r31, 0xFF	; 255
	     strMemory[i]=data;
    79dc:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    79de:	c8 50       	subi	r28, 0x08	; 8
    79e0:	df 4f       	sbci	r29, 0xFF	; 255
    79e2:	88 81       	ld	r24, Y
    79e4:	99 81       	ldd	r25, Y+1	; 0x01
    79e6:	c8 5f       	subi	r28, 0xF8	; 248
    79e8:	d0 40       	sbci	r29, 0x00	; 0
    79ea:	e8 17       	cp	r30, r24
    79ec:	f9 07       	cpc	r31, r25
    79ee:	b1 f7       	brne	.-20     	; 0x79dc <systemGenerateReport+0x10e2>
								  FillChar(strLastVolume,sizeof(strLastVolume),0);
								  FillChar(strLastMoney,sizeof(strLastMoney),0);
								  FillChar(strCurrentVolume,sizeof(strCurrentVolume),0);
								  FillChar(strCurrentMoney,sizeof(strCurrentMoney),0);

								  PumpNozzle=xNozzle;
    79f0:	80 91 e6 01 	lds	r24, 0x01E6
    79f4:	80 93 e3 01 	sts	0x01E3, r24
								  
								  FIPAddr=GetFIPAddr(PumpNum); 
    79f8:	80 91 e4 01 	lds	r24, 0x01E4
    79fc:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <GetFIPAddr>
								  if (FIPAddr>0){
    7a00:	88 23       	and	r24, r24
    7a02:	31 f1       	breq	.+76     	; 0x7a50 <systemGenerateReport+0x1156>
									  FIPAddr=FIPAddr-1;							  							  							      
    7a04:	f8 2e       	mov	r15, r24
    7a06:	fa 94       	dec	r15
									  GetTotalizerData(TVOLUME,TOTALIZER_LAST,FIPAddr,PumpNozzle,strLastVolume);
    7a08:	80 e0       	ldi	r24, 0x00	; 0
    7a0a:	60 e0       	ldi	r22, 0x00	; 0
    7a0c:	4f 2d       	mov	r20, r15
    7a0e:	20 91 e3 01 	lds	r18, 0x01E3
    7a12:	86 01       	movw	r16, r12
    7a14:	0e 94 af 20 	call	0x415e	; 0x415e <GetTotalizerData>
									  GetTotalizerData(TMONEY,TOTALIZER_LAST,FIPAddr,PumpNozzle,strLastMoney);
    7a18:	81 e0       	ldi	r24, 0x01	; 1
    7a1a:	60 e0       	ldi	r22, 0x00	; 0
    7a1c:	4f 2d       	mov	r20, r15
    7a1e:	20 91 e3 01 	lds	r18, 0x01E3
    7a22:	8e 01       	movw	r16, r28
    7a24:	08 5d       	subi	r16, 0xD8	; 216
    7a26:	1f 4f       	sbci	r17, 0xFF	; 255
    7a28:	0e 94 af 20 	call	0x415e	; 0x415e <GetTotalizerData>

									  GetTotalizerData(TVOLUME,TOTALIZER_NOW,FIPAddr,PumpNozzle,strCurrentVolume);
    7a2c:	80 e0       	ldi	r24, 0x00	; 0
    7a2e:	61 e0       	ldi	r22, 0x01	; 1
    7a30:	4f 2d       	mov	r20, r15
    7a32:	20 91 e3 01 	lds	r18, 0x01E3
    7a36:	81 01       	movw	r16, r2
    7a38:	0e 94 af 20 	call	0x415e	; 0x415e <GetTotalizerData>
									  GetTotalizerData(TMONEY,TOTALIZER_NOW,FIPAddr,PumpNozzle,strCurrentMoney);
    7a3c:	81 e0       	ldi	r24, 0x01	; 1
    7a3e:	61 e0       	ldi	r22, 0x01	; 1
    7a40:	4f 2d       	mov	r20, r15
    7a42:	20 91 e3 01 	lds	r18, 0x01E3
    7a46:	8e 01       	movw	r16, r28
    7a48:	0a 5b       	subi	r16, 0xBA	; 186
    7a4a:	1f 4f       	sbci	r17, 0xFF	; 255
    7a4c:	0e 94 af 20 	call	0x415e	; 0x415e <GetTotalizerData>
								  }

								  StrCalc(TMINUS,strCurrentVolume,strLastVolume,strDeltaVolume);
    7a50:	80 e0       	ldi	r24, 0x00	; 0
    7a52:	b1 01       	movw	r22, r2
    7a54:	a6 01       	movw	r20, r12
    7a56:	27 e8       	ldi	r18, 0x87	; 135
    7a58:	39 e0       	ldi	r19, 0x09	; 9
    7a5a:	0e 94 77 29 	call	0x52ee	; 0x52ee <StrCalc>
								  if (IsMinus(strDeltaVolume)==True)
    7a5e:	87 e8       	ldi	r24, 0x87	; 135
    7a60:	99 e0       	ldi	r25, 0x09	; 9
    7a62:	0e 94 7a 23 	call	0x46f4	; 0x46f4 <IsMinus>
    7a66:	81 30       	cpi	r24, 0x01	; 1
    7a68:	21 f4       	brne	.+8      	; 0x7a72 <systemGenerateReport+0x1178>
								      NormalizeOverflow(strDeltaVolume);
    7a6a:	87 e8       	ldi	r24, 0x87	; 135
    7a6c:	99 e0       	ldi	r25, 0x09	; 9
    7a6e:	0e 94 0e 2d 	call	0x5a1c	; 0x5a1c <NormalizeOverflow>


								  //Calculate Wayne Estimated Total Money
								  if (eeprom_read_byte(&DefDispenserBrand)==ST_WAYNE_DART){
    7a72:	88 e3       	ldi	r24, 0x38	; 56
    7a74:	91 e0       	ldi	r25, 0x01	; 1
    7a76:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
    7a7a:	82 30       	cpi	r24, 0x02	; 2
    7a7c:	61 f4       	brne	.+24     	; 0x7a96 <systemGenerateReport+0x119c>
						              GetProductPrice(sPrice,PumpNum,PumpNozzle);//Money = Price x Volume
    7a7e:	c5 01       	movw	r24, r10
    7a80:	60 91 e4 01 	lds	r22, 0x01E4
    7a84:	40 91 e3 01 	lds	r20, 0x01E3
    7a88:	0e 94 5e 24 	call	0x48bc	; 0x48bc <GetProductPrice>
									  StrCalc(TMULTIPLY,sPrice,strDeltaVolume,strDeltaMoney);
    7a8c:	82 e0       	ldi	r24, 0x02	; 2
    7a8e:	b5 01       	movw	r22, r10
    7a90:	47 e8       	ldi	r20, 0x87	; 135
    7a92:	59 e0       	ldi	r21, 0x09	; 9
    7a94:	07 c0       	rjmp	.+14     	; 0x7aa4 <systemGenerateReport+0x11aa>
								  }else StrCalc(TMINUS,strCurrentMoney,strLastMoney,strDeltaMoney);
    7a96:	80 e0       	ldi	r24, 0x00	; 0
    7a98:	be 01       	movw	r22, r28
    7a9a:	6a 5b       	subi	r22, 0xBA	; 186
    7a9c:	7f 4f       	sbci	r23, 0xFF	; 255
    7a9e:	ae 01       	movw	r20, r28
    7aa0:	48 5d       	subi	r20, 0xD8	; 216
    7aa2:	5f 4f       	sbci	r21, 0xFF	; 255
    7aa4:	2f ea       	ldi	r18, 0xAF	; 175
    7aa6:	3c e0       	ldi	r19, 0x0C	; 12
    7aa8:	0e 94 77 29 	call	0x52ee	; 0x52ee <StrCalc>
								  //StrCalc(TMINUS,strCurrentMoney,strLastMoney,strDeltaMoney);
								  if (IsMinus(strDeltaMoney)==True)
    7aac:	8f ea       	ldi	r24, 0xAF	; 175
    7aae:	9c e0       	ldi	r25, 0x0C	; 12
    7ab0:	0e 94 7a 23 	call	0x46f4	; 0x46f4 <IsMinus>
    7ab4:	81 30       	cpi	r24, 0x01	; 1
    7ab6:	21 f4       	brne	.+8      	; 0x7ac0 <systemGenerateReport+0x11c6>
								      NormalizeOverflow(strDeltaMoney);
    7ab8:	8f ea       	ldi	r24, 0xAF	; 175
    7aba:	9c e0       	ldi	r25, 0x0C	; 12
    7abc:	0e 94 0e 2d 	call	0x5a1c	; 0x5a1c <NormalizeOverflow>
		  
								  StrCalc(TPLUS,strTotalVolume,strDeltaVolume,strTotalVolume);
    7ac0:	81 e0       	ldi	r24, 0x01	; 1
    7ac2:	69 e7       	ldi	r22, 0x79	; 121
    7ac4:	78 e0       	ldi	r23, 0x08	; 8
    7ac6:	47 e8       	ldi	r20, 0x87	; 135
    7ac8:	59 e0       	ldi	r21, 0x09	; 9
    7aca:	9b 01       	movw	r18, r22
    7acc:	0e 94 77 29 	call	0x52ee	; 0x52ee <StrCalc>
								  StrCalc(TPLUS,strTotalMoney,strDeltaMoney,strTotalMoney);
    7ad0:	81 e0       	ldi	r24, 0x01	; 1
    7ad2:	6a e2       	ldi	r22, 0x2A	; 42
    7ad4:	79 e0       	ldi	r23, 0x09	; 9
    7ad6:	4f ea       	ldi	r20, 0xAF	; 175
    7ad8:	5c e0       	ldi	r21, 0x0C	; 12
    7ada:	9b 01       	movw	r18, r22
    7adc:	0e 94 77 29 	call	0x52ee	; 0x52ee <StrCalc>

				  for(xPump=1;xPump<=8;xPump++){
				      eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap, 8);
			          PumpNum=PPumpID[xPump-1];
					  if (PumpNum>0){
						  for (xNozzle=1;xNozzle<=6;xNozzle++){
    7ae0:	80 91 e6 01 	lds	r24, 0x01E6
    7ae4:	8f 5f       	subi	r24, 0xFF	; 255
    7ae6:	80 93 e6 01 	sts	0x01E6, r24
    7aea:	80 91 e6 01 	lds	r24, 0x01E6
    7aee:	87 30       	cpi	r24, 0x07	; 7
    7af0:	08 f4       	brcc	.+2      	; 0x7af4 <systemGenerateReport+0x11fa>
    7af2:	2f cf       	rjmp	.-418    	; 0x7952 <systemGenerateReport+0x1058>
			      GetProductName(xGrade,strProduct);
				  
				  FillChar(strTotalVolume,sizeof(strTotalVolume),0);
				  FillChar(strTotalMoney,sizeof(strTotalMoney),0);

				  for(xPump=1;xPump<=8;xPump++){
    7af4:	80 91 e7 01 	lds	r24, 0x01E7
    7af8:	8f 5f       	subi	r24, 0xFF	; 255
    7afa:	80 93 e7 01 	sts	0x01E7, r24
    7afe:	80 91 e7 01 	lds	r24, 0x01E7
    7b02:	89 30       	cpi	r24, 0x09	; 9
    7b04:	08 f4       	brcc	.+2      	; 0x7b08 <systemGenerateReport+0x120e>
    7b06:	0d cf       	rjmp	.-486    	; 0x7922 <systemGenerateReport+0x1028>
							  }
						  }
					  }				  
				  }

				  RemZeroLead(strTotalMoney);
    7b08:	1a e2       	ldi	r17, 0x2A	; 42
    7b0a:	a1 2e       	mov	r10, r17
    7b0c:	19 e0       	ldi	r17, 0x09	; 9
    7b0e:	b1 2e       	mov	r11, r17
    7b10:	c5 01       	movw	r24, r10
    7b12:	0e 94 3f 25 	call	0x4a7e	; 0x4a7e <RemZeroLead>
				  RemZeroLead(strTotalVolume);
    7b16:	09 e7       	ldi	r16, 0x79	; 121
    7b18:	18 e0       	ldi	r17, 0x08	; 8
    7b1a:	c8 01       	movw	r24, r16
    7b1c:	0e 94 3f 25 	call	0x4a7e	; 0x4a7e <RemZeroLead>

				  FormatTotalizerMoney(strTotalMoney);
    7b20:	c5 01       	movw	r24, r10
    7b22:	0e 94 45 34 	call	0x688a	; 0x688a <FormatTotalizerMoney>
				  FormatCurrency(strTotalMoney);
    7b26:	c5 01       	movw	r24, r10
    7b28:	0e 94 0d 33 	call	0x661a	; 0x661a <FormatCurrency>

				  FormatTotalizerVolume(strTotalVolume);
    7b2c:	c8 01       	movw	r24, r16
    7b2e:	0e 94 37 34 	call	0x686e	; 0x686e <FormatTotalizerVolume>
				  FormatCurrency(strTotalVolume);
    7b32:	c8 01       	movw	r24, r16
    7b34:	0e 94 0d 33 	call	0x661a	; 0x661a <FormatCurrency>
		          //Test
				 // RemZeroLead(strTotalMoney);
				 // RemZeroLead(strTotalVolume);


			      GetTabSpace((21-strlen(strProduct)-strlen(strTotalVolume)),strTabSpace);
    7b38:	b0 ee       	ldi	r27, 0xE0	; 224
    7b3a:	8b 2e       	mov	r8, r27
    7b3c:	b7 e0       	ldi	r27, 0x07	; 7
    7b3e:	9b 2e       	mov	r9, r27
    7b40:	f4 01       	movw	r30, r8
    7b42:	01 90       	ld	r0, Z+
    7b44:	00 20       	and	r0, r0
    7b46:	e9 f7       	brne	.-6      	; 0x7b42 <systemGenerateReport+0x1248>
    7b48:	31 97       	sbiw	r30, 0x01	; 1
    7b4a:	e8 19       	sub	r30, r8
    7b4c:	f9 09       	sbc	r31, r9
    7b4e:	d8 01       	movw	r26, r16
    7b50:	0d 90       	ld	r0, X+
    7b52:	00 20       	and	r0, r0
    7b54:	e9 f7       	brne	.-6      	; 0x7b50 <systemGenerateReport+0x1256>
    7b56:	11 97       	sbiw	r26, 0x01	; 1
    7b58:	a0 1b       	sub	r26, r16
    7b5a:	b1 0b       	sbc	r27, r17
    7b5c:	e1 95       	neg	r30
    7b5e:	ea 1b       	sub	r30, r26
    7b60:	a9 e6       	ldi	r26, 0x69	; 105
    7b62:	ea 2e       	mov	r14, r26
    7b64:	f1 2c       	mov	r15, r1
    7b66:	ec 0e       	add	r14, r28
    7b68:	fd 1e       	adc	r15, r29
    7b6a:	8e 2f       	mov	r24, r30
    7b6c:	8b 5e       	subi	r24, 0xEB	; 235
    7b6e:	b7 01       	movw	r22, r14
    7b70:	0e 94 34 1a 	call	0x3468	; 0x3468 <GetTabSpace>
			      GetTabSpace((15-strlen(strTotalMoney)),strTabSpace2);
    7b74:	f5 01       	movw	r30, r10
    7b76:	01 90       	ld	r0, Z+
    7b78:	00 20       	and	r0, r0
    7b7a:	e9 f7       	brne	.-6      	; 0x7b76 <systemGenerateReport+0x127c>
    7b7c:	31 97       	sbiw	r30, 0x01	; 1
    7b7e:	ea 19       	sub	r30, r10
    7b80:	fb 09       	sbc	r31, r11
    7b82:	fd e7       	ldi	r31, 0x7D	; 125
    7b84:	6f 2e       	mov	r6, r31
    7b86:	71 2c       	mov	r7, r1
    7b88:	6c 0e       	add	r6, r28
    7b8a:	7d 1e       	adc	r7, r29
    7b8c:	8f e0       	ldi	r24, 0x0F	; 15
    7b8e:	8e 1b       	sub	r24, r30
    7b90:	b3 01       	movw	r22, r6
    7b92:	0e 94 34 1a 	call	0x3468	; 0x3468 <GetTabSpace>

				  //PrintMoney
		          if (eeprom_read_byte(&DefPrintMoney)==True)sprintf_P(strReport,PSTR("%d.%s%s%s%s%s"),iTotal+1,strProduct,strTabSpace,strTotalVolume,strTabSpace2,strTotalMoney);
    7b96:	82 ec       	ldi	r24, 0xC2	; 194
    7b98:	93 e0       	ldi	r25, 0x03	; 3
    7b9a:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
    7b9e:	75 ea       	ldi	r23, 0xA5	; 165
    7ba0:	c7 2e       	mov	r12, r23
    7ba2:	d1 2c       	mov	r13, r1
    7ba4:	cc 0e       	add	r12, r28
    7ba6:	dd 1e       	adc	r13, r29
    7ba8:	92 01       	movw	r18, r4
    7baa:	2f 5f       	subi	r18, 0xFF	; 255
    7bac:	3f 4f       	sbci	r19, 0xFF	; 255
    7bae:	81 30       	cpi	r24, 0x01	; 1
    7bb0:	29 f5       	brne	.+74     	; 0x7bfc <systemGenerateReport+0x1302>
    7bb2:	ad b7       	in	r26, 0x3d	; 61
    7bb4:	be b7       	in	r27, 0x3e	; 62
    7bb6:	50 97       	sbiw	r26, 0x10	; 16
    7bb8:	0f b6       	in	r0, 0x3f	; 63
    7bba:	f8 94       	cli
    7bbc:	be bf       	out	0x3e, r27	; 62
    7bbe:	0f be       	out	0x3f, r0	; 63
    7bc0:	ad bf       	out	0x3d, r26	; 61
    7bc2:	ed b7       	in	r30, 0x3d	; 61
    7bc4:	fe b7       	in	r31, 0x3e	; 62
    7bc6:	31 96       	adiw	r30, 0x01	; 1
    7bc8:	12 96       	adiw	r26, 0x02	; 2
    7bca:	dc 92       	st	X, r13
    7bcc:	ce 92       	st	-X, r12
    7bce:	11 97       	sbiw	r26, 0x01	; 1
    7bd0:	81 e7       	ldi	r24, 0x71	; 113
    7bd2:	95 e0       	ldi	r25, 0x05	; 5
    7bd4:	93 83       	std	Z+3, r25	; 0x03
    7bd6:	82 83       	std	Z+2, r24	; 0x02
    7bd8:	35 83       	std	Z+5, r19	; 0x05
    7bda:	24 83       	std	Z+4, r18	; 0x04
    7bdc:	97 82       	std	Z+7, r9	; 0x07
    7bde:	86 82       	std	Z+6, r8	; 0x06
    7be0:	f1 86       	std	Z+9, r15	; 0x09
    7be2:	e0 86       	std	Z+8, r14	; 0x08
    7be4:	13 87       	std	Z+11, r17	; 0x0b
    7be6:	02 87       	std	Z+10, r16	; 0x0a
    7be8:	75 86       	std	Z+13, r7	; 0x0d
    7bea:	64 86       	std	Z+12, r6	; 0x0c
    7bec:	b7 86       	std	Z+15, r11	; 0x0f
    7bee:	a6 86       	std	Z+14, r10	; 0x0e
    7bf0:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
    7bf4:	ed b7       	in	r30, 0x3d	; 61
    7bf6:	fe b7       	in	r31, 0x3e	; 62
    7bf8:	70 96       	adiw	r30, 0x10	; 16
    7bfa:	22 c0       	rjmp	.+68     	; 0x7c40 <systemGenerateReport+0x1346>
				  else sprintf_P(strReport,PSTR("%d.%s%s%s"),iTotal+1,strProduct,strTabSpace,strTotalVolume);
    7bfc:	8d b7       	in	r24, 0x3d	; 61
    7bfe:	9e b7       	in	r25, 0x3e	; 62
    7c00:	0c 97       	sbiw	r24, 0x0c	; 12
    7c02:	0f b6       	in	r0, 0x3f	; 63
    7c04:	f8 94       	cli
    7c06:	9e bf       	out	0x3e, r25	; 62
    7c08:	0f be       	out	0x3f, r0	; 63
    7c0a:	8d bf       	out	0x3d, r24	; 61
    7c0c:	ed b7       	in	r30, 0x3d	; 61
    7c0e:	fe b7       	in	r31, 0x3e	; 62
    7c10:	31 96       	adiw	r30, 0x01	; 1
    7c12:	ad b7       	in	r26, 0x3d	; 61
    7c14:	be b7       	in	r27, 0x3e	; 62
    7c16:	12 96       	adiw	r26, 0x02	; 2
    7c18:	dc 92       	st	X, r13
    7c1a:	ce 92       	st	-X, r12
    7c1c:	11 97       	sbiw	r26, 0x01	; 1
    7c1e:	87 e6       	ldi	r24, 0x67	; 103
    7c20:	95 e0       	ldi	r25, 0x05	; 5
    7c22:	93 83       	std	Z+3, r25	; 0x03
    7c24:	82 83       	std	Z+2, r24	; 0x02
    7c26:	35 83       	std	Z+5, r19	; 0x05
    7c28:	24 83       	std	Z+4, r18	; 0x04
    7c2a:	97 82       	std	Z+7, r9	; 0x07
    7c2c:	86 82       	std	Z+6, r8	; 0x06
    7c2e:	f1 86       	std	Z+9, r15	; 0x09
    7c30:	e0 86       	std	Z+8, r14	; 0x08
    7c32:	13 87       	std	Z+11, r17	; 0x0b
    7c34:	02 87       	std	Z+10, r16	; 0x0a
    7c36:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
    7c3a:	ed b7       	in	r30, 0x3d	; 61
    7c3c:	fe b7       	in	r31, 0x3e	; 62
    7c3e:	3c 96       	adiw	r30, 0x0c	; 12
    7c40:	0f b6       	in	r0, 0x3f	; 63
    7c42:	f8 94       	cli
    7c44:	fe bf       	out	0x3e, r31	; 62
    7c46:	0f be       	out	0x3f, r0	; 63
    7c48:	ed bf       	out	0x3d, r30	; 61

				  CreateReport(strReport,PrintBuffer,&RepPos);
    7c4a:	ce 01       	movw	r24, r28
    7c4c:	8b 55       	subi	r24, 0x5B	; 91
    7c4e:	9f 4f       	sbci	r25, 0xFF	; 255
    7c50:	6e e6       	ldi	r22, 0x6E	; 110
    7c52:	74 e0       	ldi	r23, 0x04	; 4
    7c54:	46 ed       	ldi	r20, 0xD6	; 214
    7c56:	51 e0       	ldi	r21, 0x01	; 1
    7c58:	0e 94 15 22 	call	0x442a	; 0x442a <CreateReport>
		  if (eeprom_read_byte(&DefPrintMoney)==True)sprintf_P(strReport,PSTR("TOTAL %s%s%s%s"),strTabSpace,strTotalVolume,strTabSpace2,strTotalMoney);//CreateReport(strReport,PrintBuffer,&RepPos);
		  else sprintf_P(strReport,PSTR("TOTAL %s%s"),strTabSpace,strTotalVolume);CreateReport(strReport,PrintBuffer,&RepPos);

		  InserBorder(btMiddleLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btMiddleRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);     	      

		  for(iTotal=0;iTotal<strlen(GradeList);iTotal++){
    7c5c:	cb 50       	subi	r28, 0x0B	; 11
    7c5e:	df 4f       	sbci	r29, 0xFF	; 255
    7c60:	f8 81       	ld	r31, Y
    7c62:	c5 5f       	subi	r28, 0xF5	; 245
    7c64:	d0 40       	sbci	r29, 0x00	; 0
    7c66:	ff 5f       	subi	r31, 0xFF	; 255
    7c68:	cb 50       	subi	r28, 0x0B	; 11
    7c6a:	df 4f       	sbci	r29, 0xFF	; 255
    7c6c:	f8 83       	st	Y, r31
    7c6e:	c5 5f       	subi	r28, 0xF5	; 245
    7c70:	d0 40       	sbci	r29, 0x00	; 0
    7c72:	e8 ed       	ldi	r30, 0xD8	; 216
    7c74:	f1 e0       	ldi	r31, 0x01	; 1
    7c76:	01 90       	ld	r0, Z+
    7c78:	00 20       	and	r0, r0
    7c7a:	e9 f7       	brne	.-6      	; 0x7c76 <systemGenerateReport+0x137c>
    7c7c:	31 97       	sbiw	r30, 0x01	; 1
    7c7e:	e8 5d       	subi	r30, 0xD8	; 216
    7c80:	f1 40       	sbci	r31, 0x01	; 1
    7c82:	cb 50       	subi	r28, 0x0B	; 11
    7c84:	df 4f       	sbci	r29, 0xFF	; 255
    7c86:	88 81       	ld	r24, Y
    7c88:	c5 5f       	subi	r28, 0xF5	; 245
    7c8a:	d0 40       	sbci	r29, 0x00	; 0
    7c8c:	48 2e       	mov	r4, r24
    7c8e:	55 24       	eor	r5, r5
    7c90:	4e 16       	cp	r4, r30
    7c92:	5f 06       	cpc	r5, r31
    7c94:	08 f4       	brcc	.+2      	; 0x7c98 <systemGenerateReport+0x139e>
    7c96:	13 ce       	rjmp	.-986    	; 0x78be <systemGenerateReport+0xfc4>
				  else sprintf_P(strReport,PSTR("%d.%s%s%s"),iTotal+1,strProduct,strTabSpace,strTotalVolume);

				  CreateReport(strReport,PrintBuffer,&RepPos);
               }
		  }
          InserBorder(btBottomLeft,PrintBuffer,1,&RepPos);InserBorder(btHorizontal,PrintBuffer,BORDER_LENGTH,&RepPos);InserBorder(btBottomRight,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);
    7c98:	87 e0       	ldi	r24, 0x07	; 7
    7c9a:	6e e6       	ldi	r22, 0x6E	; 110
    7c9c:	74 e0       	ldi	r23, 0x04	; 4
    7c9e:	41 e0       	ldi	r20, 0x01	; 1
    7ca0:	26 ed       	ldi	r18, 0xD6	; 214
    7ca2:	31 e0       	ldi	r19, 0x01	; 1
    7ca4:	0e 94 84 1a 	call	0x3508	; 0x3508 <InserBorder>
    7ca8:	8b e0       	ldi	r24, 0x0B	; 11
    7caa:	6e e6       	ldi	r22, 0x6E	; 110
    7cac:	74 e0       	ldi	r23, 0x04	; 4
    7cae:	4a e2       	ldi	r20, 0x2A	; 42
    7cb0:	26 ed       	ldi	r18, 0xD6	; 214
    7cb2:	31 e0       	ldi	r19, 0x01	; 1
    7cb4:	0e 94 84 1a 	call	0x3508	; 0x3508 <InserBorder>
    7cb8:	89 e0       	ldi	r24, 0x09	; 9
    7cba:	6e e6       	ldi	r22, 0x6E	; 110
    7cbc:	74 e0       	ldi	r23, 0x04	; 4
    7cbe:	41 e0       	ldi	r20, 0x01	; 1
    7cc0:	26 ed       	ldi	r18, 0xD6	; 214
    7cc2:	31 e0       	ldi	r19, 0x01	; 1
    7cc4:	0e 94 84 1a 	call	0x3508	; 0x3508 <InserBorder>
    7cc8:	8c e0       	ldi	r24, 0x0C	; 12
    7cca:	6e e6       	ldi	r22, 0x6E	; 110
    7ccc:	74 e0       	ldi	r23, 0x04	; 4
    7cce:	41 e0       	ldi	r20, 0x01	; 1
    7cd0:	26 ed       	ldi	r18, 0xD6	; 214
    7cd2:	31 e0       	ldi	r19, 0x01	; 1
    7cd4:	0e 94 84 1a 	call	0x3508	; 0x3508 <InserBorder>
		  InserBorder(btNewLine,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);InserBorder(btNewLine,PrintBuffer,1,&RepPos);
    7cd8:	8c e0       	ldi	r24, 0x0C	; 12
    7cda:	6e e6       	ldi	r22, 0x6E	; 110
    7cdc:	74 e0       	ldi	r23, 0x04	; 4
    7cde:	41 e0       	ldi	r20, 0x01	; 1
    7ce0:	26 ed       	ldi	r18, 0xD6	; 214
    7ce2:	31 e0       	ldi	r19, 0x01	; 1
    7ce4:	0e 94 84 1a 	call	0x3508	; 0x3508 <InserBorder>
    7ce8:	8c e0       	ldi	r24, 0x0C	; 12
    7cea:	6e e6       	ldi	r22, 0x6E	; 110
    7cec:	74 e0       	ldi	r23, 0x04	; 4
    7cee:	41 e0       	ldi	r20, 0x01	; 1
    7cf0:	26 ed       	ldi	r18, 0xD6	; 214
    7cf2:	31 e0       	ldi	r19, 0x01	; 1
    7cf4:	0e 94 84 1a 	call	0x3508	; 0x3508 <InserBorder>
    7cf8:	8c e0       	ldi	r24, 0x0C	; 12
    7cfa:	6e e6       	ldi	r22, 0x6E	; 110
    7cfc:	74 e0       	ldi	r23, 0x04	; 4
    7cfe:	41 e0       	ldi	r20, 0x01	; 1
    7d00:	26 ed       	ldi	r18, 0xD6	; 214
    7d02:	31 e0       	ldi	r19, 0x01	; 1
    7d04:	0e 94 84 1a 	call	0x3508	; 0x3508 <InserBorder>
    7d08:	8c e0       	ldi	r24, 0x0C	; 12
    7d0a:	6e e6       	ldi	r22, 0x6E	; 110
    7d0c:	74 e0       	ldi	r23, 0x04	; 4
    7d0e:	41 e0       	ldi	r20, 0x01	; 1
    7d10:	26 ed       	ldi	r18, 0xD6	; 214
    7d12:	31 e0       	ldi	r19, 0x01	; 1
    7d14:	0e 94 84 1a 	call	0x3508	; 0x3508 <InserBorder>
    7d18:	8c e0       	ldi	r24, 0x0C	; 12
    7d1a:	6e e6       	ldi	r22, 0x6E	; 110
    7d1c:	74 e0       	ldi	r23, 0x04	; 4
    7d1e:	41 e0       	ldi	r20, 0x01	; 1
    7d20:	26 ed       	ldi	r18, 0xD6	; 214
    7d22:	31 e0       	ldi	r19, 0x01	; 1
    7d24:	0e 94 84 1a 	call	0x3508	; 0x3508 <InserBorder>


          cmdPrint=0b00010000|(1<<PRN_PAPER_CUT);
    7d28:	80 e3       	ldi	r24, 0x30	; 48
    7d2a:	80 93 b5 01 	sts	0x01B5, r24
		  LengthMessage81=RepPos+1;
    7d2e:	80 91 d6 01 	lds	r24, 0x01D6
    7d32:	90 91 d7 01 	lds	r25, 0x01D7
    7d36:	01 96       	adiw	r24, 0x01	; 1
    7d38:	90 93 8e 01 	sts	0x018E, r25
    7d3c:	80 93 8d 01 	sts	0x018D, r24
		  IsFreePrinting=True;
    7d40:	81 e0       	ldi	r24, 0x01	; 1
    7d42:	80 93 a8 01 	sts	0x01A8, r24
	      IsBusyFreePrinting=True; 
    7d46:	80 93 b4 01 	sts	0x01B4, r24
         	       
	      stGenerateReport=grWaitPrinted3;
    7d4a:	8b e0       	ldi	r24, 0x0B	; 11
    7d4c:	05 c0       	rjmp	.+10     	; 0x7d58 <systemGenerateReport+0x145e>
	      break;
     case grWaitPrinted3:
          if (IsBusyFreePrinting==False)stGenerateReport=grFinishGenerateReport;
    7d4e:	80 91 b4 01 	lds	r24, 0x01B4
    7d52:	88 23       	and	r24, r24
    7d54:	49 f4       	brne	.+18     	; 0x7d68 <systemGenerateReport+0x146e>
    7d56:	8c e0       	ldi	r24, 0x0C	; 12
    7d58:	80 93 e8 01 	sts	0x01E8, r24
    7d5c:	05 c0       	rjmp	.+10     	; 0x7d68 <systemGenerateReport+0x146e>
	      break;
     case grFinishGenerateReport:
	      IsFinishPrintingTotalizer=True;
    7d5e:	81 e0       	ldi	r24, 0x01	; 1
    7d60:	80 93 87 01 	sts	0x0187, r24
          stGenerateReport=grScanAction;
    7d64:	10 92 e8 01 	sts	0x01E8, r1
	      break;
	 }
}
    7d68:	c5 50       	subi	r28, 0x05	; 5
    7d6a:	df 4f       	sbci	r29, 0xFF	; 255
    7d6c:	0f b6       	in	r0, 0x3f	; 63
    7d6e:	f8 94       	cli
    7d70:	de bf       	out	0x3e, r29	; 62
    7d72:	0f be       	out	0x3f, r0	; 63
    7d74:	cd bf       	out	0x3d, r28	; 61
    7d76:	cf 91       	pop	r28
    7d78:	df 91       	pop	r29
    7d7a:	1f 91       	pop	r17
    7d7c:	0f 91       	pop	r16
    7d7e:	ff 90       	pop	r15
    7d80:	ef 90       	pop	r14
    7d82:	df 90       	pop	r13
    7d84:	cf 90       	pop	r12
    7d86:	bf 90       	pop	r11
    7d88:	af 90       	pop	r10
    7d8a:	9f 90       	pop	r9
    7d8c:	8f 90       	pop	r8
    7d8e:	7f 90       	pop	r7
    7d90:	6f 90       	pop	r6
    7d92:	5f 90       	pop	r5
    7d94:	4f 90       	pop	r4
    7d96:	3f 90       	pop	r3
    7d98:	2f 90       	pop	r2
    7d9a:	08 95       	ret

00007d9c <UpdateCardID>:
	 else SeqNum=0;
	 leadingZero(SeqNum,strSeqNum);
	 */
} 

void UpdateCardID(){
    7d9c:	cf 93       	push	r28
    7d9e:	df 93       	push	r29
     char i,LengthID;
	 LengthID=strlen(strRFID);  //           +12345678  
    7da0:	e3 ed       	ldi	r30, 0xD3	; 211
    7da2:	fc e0       	ldi	r31, 0x0C	; 12
    7da4:	01 90       	ld	r0, Z+
    7da6:	00 20       	and	r0, r0
    7da8:	e9 f7       	brne	.-6      	; 0x7da4 <UpdateCardID+0x8>
    7daa:	31 97       	sbiw	r30, 0x01	; 1
    7dac:	e3 5d       	subi	r30, 0xD3	; 211
    7dae:	fc 40       	sbci	r31, 0x0C	; 12
    7db0:	ab e0       	ldi	r26, 0x0B	; 11
    7db2:	bc e0       	ldi	r27, 0x0C	; 12
	 else SeqNum=0;
	 leadingZero(SeqNum,strSeqNum);
	 */
} 

void UpdateCardID(){
    7db4:	f0 e0       	ldi	r31, 0x00	; 0
    7db6:	ef 01       	movw	r28, r30
    7db8:	c1 54       	subi	r28, 0x41	; 65
    7dba:	d3 4f       	sbci	r29, 0xF3	; 243
    7dbc:	20 e0       	ldi	r18, 0x00	; 0
    7dbe:	30 e0       	ldi	r19, 0x00	; 0
     char i,LengthID;
	 LengthID=strlen(strRFID);  //           +12345678  
	 for(i=0;i<20;i++){         //SSSSSSSSSSSS12345678
	    if (i<(20-LengthID))strCardID[i]=' ';
    7dc0:	44 e1       	ldi	r20, 0x14	; 20
    7dc2:	50 e0       	ldi	r21, 0x00	; 0
    7dc4:	4e 1b       	sub	r20, r30
    7dc6:	5f 0b       	sbc	r21, r31
    7dc8:	90 e2       	ldi	r25, 0x20	; 32
    7dca:	24 17       	cp	r18, r20
    7dcc:	35 07       	cpc	r19, r21
    7dce:	14 f4       	brge	.+4      	; 0x7dd4 <UpdateCardID+0x38>
    7dd0:	9c 93       	st	X, r25
    7dd2:	02 c0       	rjmp	.+4      	; 0x7dd8 <UpdateCardID+0x3c>
		else strCardID[i]=strRFID[i-(20-LengthID)];
    7dd4:	88 81       	ld	r24, Y
    7dd6:	8c 93       	st	X, r24
    7dd8:	2f 5f       	subi	r18, 0xFF	; 255
    7dda:	3f 4f       	sbci	r19, 0xFF	; 255
    7ddc:	11 96       	adiw	r26, 0x01	; 1
    7dde:	21 96       	adiw	r28, 0x01	; 1
} 

void UpdateCardID(){
     char i,LengthID;
	 LengthID=strlen(strRFID);  //           +12345678  
	 for(i=0;i<20;i++){         //SSSSSSSSSSSS12345678
    7de0:	24 31       	cpi	r18, 0x14	; 20
    7de2:	31 05       	cpc	r19, r1
    7de4:	91 f7       	brne	.-28     	; 0x7dca <UpdateCardID+0x2e>
	    if (i<(20-LengthID))strCardID[i]=' ';
		else strCardID[i]=strRFID[i-(20-LengthID)];
	 }strCardID[20]=0;
    7de6:	10 92 1f 0c 	sts	0x0C1F, r1

}
    7dea:	df 91       	pop	r29
    7dec:	cf 91       	pop	r28
    7dee:	08 95       	ret

00007df0 <GenerateTransactionNum>:
		 //else Result=PS_NO_DATA;    		    
	 }	
   return Result;
}

void GenerateTransactionNum(char *sTransNumber){//Create and Save TransactionNumber to EEPROM
    7df0:	cf 92       	push	r12
    7df2:	df 92       	push	r13
    7df4:	ef 92       	push	r14
    7df6:	ff 92       	push	r15
    7df8:	0f 93       	push	r16
    7dfa:	1f 93       	push	r17
    7dfc:	df 93       	push	r29
    7dfe:	cf 93       	push	r28
    7e00:	cd b7       	in	r28, 0x3d	; 61
    7e02:	de b7       	in	r29, 0x3e	; 62
    7e04:	27 97       	sbiw	r28, 0x07	; 7
    7e06:	0f b6       	in	r0, 0x3f	; 63
    7e08:	f8 94       	cli
    7e0a:	de bf       	out	0x3e, r29	; 62
    7e0c:	0f be       	out	0x3f, r0	; 63
    7e0e:	cd bf       	out	0x3d, r28	; 61
    7e10:	6c 01       	movw	r12, r24
    7e12:	fe 01       	movw	r30, r28
    7e14:	31 96       	adiw	r30, 0x01	; 1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    7e16:	ce 01       	movw	r24, r28
    7e18:	08 96       	adiw	r24, 0x08	; 8
	     strMemory[i]=data;
    7e1a:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    7e1c:	e8 17       	cp	r30, r24
    7e1e:	f9 07       	cpc	r31, r25
    7e20:	e1 f7       	brne	.-8      	; 0x7e1a <GenerateTransactionNum+0x2a>
}

void GenerateTransactionNum(char *sTransNumber){//Create and Save TransactionNumber to EEPROM
     char i,PTransNum[7],cNum,xNum=0,xAdd=0,Length=0;
	 FillChar(PTransNum,sizeof(PTransNum),0);//"999999"->"000000"
     eeprom_read_block((void*) &PTransNum, (const void*) &DefTransactionNumber,sizeof(DefTransactionNumber));
    7e22:	8e 01       	movw	r16, r28
    7e24:	0f 5f       	subi	r16, 0xFF	; 255
    7e26:	1f 4f       	sbci	r17, 0xFF	; 255
    7e28:	c8 01       	movw	r24, r16
    7e2a:	69 e3       	ldi	r22, 0x39	; 57
    7e2c:	71 e0       	ldi	r23, 0x01	; 1
    7e2e:	47 e0       	ldi	r20, 0x07	; 7
    7e30:	50 e0       	ldi	r21, 0x00	; 0
    7e32:	0e 94 1b ad 	call	0x15a36	; 0x15a36 <__eerd_block_m128>
     xAdd=1;
	 xNum=0;
	 Length=strlen(PTransNum);
    7e36:	f8 01       	movw	r30, r16
    7e38:	01 90       	ld	r0, Z+
    7e3a:	00 20       	and	r0, r0
    7e3c:	e9 f7       	brne	.-6      	; 0x7e38 <GenerateTransactionNum+0x48>
    7e3e:	31 97       	sbiw	r30, 0x01	; 1
    7e40:	e0 1b       	sub	r30, r16
		 //else Result=PS_NO_DATA;    		    
	 }	
   return Result;
}

void GenerateTransactionNum(char *sTransNumber){//Create and Save TransactionNumber to EEPROM
    7e42:	f0 e0       	ldi	r31, 0x00	; 0
    7e44:	0e 0f       	add	r16, r30
    7e46:	1f 1f       	adc	r17, r31
    7e48:	31 97       	sbiw	r30, 0x01	; 1
    7e4a:	76 01       	movw	r14, r12
    7e4c:	ee 0e       	add	r14, r30
    7e4e:	ff 1e       	adc	r15, r31
    7e50:	31 96       	adiw	r30, 0x01	; 1
    7e52:	61 e0       	ldi	r22, 0x01	; 1
    7e54:	19 c0       	rjmp	.+50     	; 0x7e88 <GenerateTransactionNum+0x98>
	 xNum=0;
	 Length=strlen(PTransNum);

	 for(i=0;i<Length;i++){//[000009] 999999 123456
	     xNum=PTransNum[Length-i-1]-'0';		 
		 cNum='0'+((xNum+xAdd)%10);
    7e56:	d8 01       	movw	r26, r16
    7e58:	2c 91       	ld	r18, X
    7e5a:	20 53       	subi	r18, 0x30	; 48
    7e5c:	30 e0       	ldi	r19, 0x00	; 0
    7e5e:	26 0f       	add	r18, r22
    7e60:	31 1d       	adc	r19, r1
    7e62:	c9 01       	movw	r24, r18
    7e64:	6a e0       	ldi	r22, 0x0A	; 10
    7e66:	70 e0       	ldi	r23, 0x00	; 0
    7e68:	0e 94 79 aa 	call	0x154f2	; 0x154f2 <__divmodhi4>
    7e6c:	48 2f       	mov	r20, r24
    7e6e:	40 5d       	subi	r20, 0xD0	; 208
		 xAdd=((xNum+xAdd)/10);
    7e70:	c9 01       	movw	r24, r18
    7e72:	6a e0       	ldi	r22, 0x0A	; 10
    7e74:	70 e0       	ldi	r23, 0x00	; 0
    7e76:	0e 94 79 aa 	call	0x154f2	; 0x154f2 <__divmodhi4>
		 PTransNum[Length-i-1]=cNum;
    7e7a:	d8 01       	movw	r26, r16
    7e7c:	4c 93       	st	X, r20
		 sTransNumber[Length-i-1]=cNum;
    7e7e:	d7 01       	movw	r26, r14
    7e80:	4c 93       	st	X, r20
    7e82:	08 94       	sec
    7e84:	e1 08       	sbc	r14, r1
    7e86:	f1 08       	sbc	r15, r1
    7e88:	01 50       	subi	r16, 0x01	; 1
    7e8a:	10 40       	sbci	r17, 0x00	; 0
     eeprom_read_block((void*) &PTransNum, (const void*) &DefTransactionNumber,sizeof(DefTransactionNumber));
     xAdd=1;
	 xNum=0;
	 Length=strlen(PTransNum);

	 for(i=0;i<Length;i++){//[000009] 999999 123456
    7e8c:	0c 17       	cp	r16, r28
    7e8e:	1d 07       	cpc	r17, r29
    7e90:	11 f7       	brne	.-60     	; 0x7e56 <GenerateTransactionNum+0x66>
		 cNum='0'+((xNum+xAdd)%10);
		 xAdd=((xNum+xAdd)/10);
		 PTransNum[Length-i-1]=cNum;
		 sTransNumber[Length-i-1]=cNum;
	 }
	 sTransNumber[Length]=0;
    7e92:	ce 0e       	add	r12, r30
    7e94:	df 1e       	adc	r13, r31
    7e96:	d6 01       	movw	r26, r12
    7e98:	1c 92       	st	X, r1
	 PTransNum[Length]=0;
    7e9a:	ce 01       	movw	r24, r28
    7e9c:	01 96       	adiw	r24, 0x01	; 1
    7e9e:	e8 0f       	add	r30, r24
    7ea0:	f9 1f       	adc	r31, r25
    7ea2:	10 82       	st	Z, r1

     eeprom_write_block((const void*)&PTransNum,(void*)&DefTransactionNumber,sizeof(DefTransactionNumber));
    7ea4:	69 e3       	ldi	r22, 0x39	; 57
    7ea6:	71 e0       	ldi	r23, 0x01	; 1
    7ea8:	47 e0       	ldi	r20, 0x07	; 7
    7eaa:	50 e0       	ldi	r21, 0x00	; 0
    7eac:	0e 94 33 ad 	call	0x15a66	; 0x15a66 <__eewr_block_m128>
}
    7eb0:	27 96       	adiw	r28, 0x07	; 7
    7eb2:	0f b6       	in	r0, 0x3f	; 63
    7eb4:	f8 94       	cli
    7eb6:	de bf       	out	0x3e, r29	; 62
    7eb8:	0f be       	out	0x3f, r0	; 63
    7eba:	cd bf       	out	0x3d, r28	; 61
    7ebc:	cf 91       	pop	r28
    7ebe:	df 91       	pop	r29
    7ec0:	1f 91       	pop	r17
    7ec2:	0f 91       	pop	r16
    7ec4:	ff 90       	pop	r15
    7ec6:	ef 90       	pop	r14
    7ec8:	df 90       	pop	r13
    7eca:	cf 90       	pop	r12
    7ecc:	08 95       	ret

00007ece <GetParameter>:
	}
  return  PosFound;
}


void GetParameter(char *GFlow,char FLength,char *GCmd,char *GPumpID, char *GeniCSum){
    7ece:	8f 92       	push	r8
    7ed0:	9f 92       	push	r9
    7ed2:	af 92       	push	r10
    7ed4:	bf 92       	push	r11
    7ed6:	cf 92       	push	r12
    7ed8:	df 92       	push	r13
    7eda:	ef 92       	push	r14
    7edc:	ff 92       	push	r15
    7ede:	0f 93       	push	r16
    7ee0:	1f 93       	push	r17
    7ee2:	df 93       	push	r29
    7ee4:	cf 93       	push	r28
    7ee6:	cd b7       	in	r28, 0x3d	; 61
    7ee8:	de b7       	in	r29, 0x3e	; 62
    7eea:	a7 97       	sbiw	r28, 0x27	; 39
    7eec:	0f b6       	in	r0, 0x3f	; 63
    7eee:	f8 94       	cli
    7ef0:	de bf       	out	0x3e, r29	; 62
    7ef2:	0f be       	out	0x3f, r0	; 63
    7ef4:	cd bf       	out	0x3d, r28	; 61
    7ef6:	79 01       	movw	r14, r18
    7ef8:	48 01       	movw	r8, r16
    7efa:	e6 2f       	mov	r30, r22
    7efc:	f0 e0       	ldi	r31, 0x00	; 0
    7efe:	31 97       	sbiw	r30, 0x01	; 1
    7f00:	e8 0f       	add	r30, r24
    7f02:	f9 1f       	adc	r31, r25
    7f04:	9e 01       	movw	r18, r28
    7f06:	26 5f       	subi	r18, 0xF6	; 246
    7f08:	3f 4f       	sbci	r19, 0xFF	; 255
    7f0a:	d9 01       	movw	r26, r18
    7f0c:	03 c0       	rjmp	.+6      	; 0x7f14 <GetParameter+0x46>
char strSend[20],strSub[3];
int SumLength;

     //TransposeFlow
     for (i=0;i<FLength;i++){	 
	     SGeniusFlow[i]=GFlow[FLength-i-1];
    7f0e:	80 81       	ld	r24, Z
    7f10:	8d 93       	st	X+, r24
    7f12:	31 97       	sbiw	r30, 0x01	; 1
char SGeniusFlow[30];
char strSend[20],strSub[3];
int SumLength;

     //TransposeFlow
     for (i=0;i<FLength;i++){	 
    7f14:	8a 2f       	mov	r24, r26
    7f16:	82 1b       	sub	r24, r18
    7f18:	86 17       	cp	r24, r22
    7f1a:	c8 f3       	brcs	.-14     	; 0x7f0e <GetParameter+0x40>
	     SGeniusFlow[i]=GFlow[FLength-i-1];
	 }SGeniusFlow[FLength]=0;
    7f1c:	c6 2e       	mov	r12, r22
    7f1e:	dd 24       	eor	r13, r13
    7f20:	6a e0       	ldi	r22, 0x0A	; 10
    7f22:	a6 2e       	mov	r10, r22
    7f24:	b1 2c       	mov	r11, r1
    7f26:	ac 0e       	add	r10, r28
    7f28:	bd 1e       	adc	r11, r29
    7f2a:	f5 01       	movw	r30, r10
    7f2c:	ec 0d       	add	r30, r12
    7f2e:	fd 1d       	adc	r31, r13
    7f30:	10 82       	st	Z, r1

	 xCmd=CharPosCopy(SGeniusFlow,0);
	 *GCmd=xCmd;
    7f32:	8a 85       	ldd	r24, Y+10	; 0x0a
    7f34:	fa 01       	movw	r30, r20
    7f36:	80 83       	st	Z, r24
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    7f38:	8b 85       	ldd	r24, Y+11	; 0x0b
    7f3a:	89 83       	std	Y+1, r24	; 0x01
    7f3c:	8c 85       	ldd	r24, Y+12	; 0x0c
    7f3e:	8a 83       	std	Y+2, r24	; 0x02
	 }Dest[Length]=0;
    7f40:	1b 82       	std	Y+3, r1	; 0x03
	 }SGeniusFlow[FLength]=0;

	 xCmd=CharPosCopy(SGeniusFlow,0);
	 *GCmd=xCmd;
	 StrPosCopy(SGeniusFlow,sPumpID,1,2);
	 xPumpID=atoi(sPumpID);
    7f42:	ce 01       	movw	r24, r28
    7f44:	01 96       	adiw	r24, 0x01	; 1
    7f46:	0e 94 ae aa 	call	0x1555c	; 0x1555c <atoi>
	 *GPumpID=xPumpID;
    7f4a:	f7 01       	movw	r30, r14
    7f4c:	80 83       	st	Z, r24
	 sprintf_P(strSub,PSTR(":"));
    7f4e:	00 d0       	rcall	.+0      	; 0x7f50 <GetParameter+0x82>
    7f50:	00 d0       	rcall	.+0      	; 0x7f52 <GetParameter+0x84>
    7f52:	57 e0       	ldi	r21, 0x07	; 7
    7f54:	e5 2e       	mov	r14, r21
    7f56:	f1 2c       	mov	r15, r1
    7f58:	ec 0e       	add	r14, r28
    7f5a:	fd 1e       	adc	r15, r29
    7f5c:	ed b7       	in	r30, 0x3d	; 61
    7f5e:	fe b7       	in	r31, 0x3e	; 62
    7f60:	f2 82       	std	Z+2, r15	; 0x02
    7f62:	e1 82       	std	Z+1, r14	; 0x01
    7f64:	8d e5       	ldi	r24, 0x5D	; 93
    7f66:	95 e0       	ldi	r25, 0x05	; 5
    7f68:	94 83       	std	Z+4, r25	; 0x04
    7f6a:	83 83       	std	Z+3, r24	; 0x03
    7f6c:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	 if (Pos(strSub,SGeniusFlow)<FLength){
    7f70:	0f 90       	pop	r0
    7f72:	0f 90       	pop	r0
    7f74:	0f 90       	pop	r0
    7f76:	0f 90       	pop	r0
    7f78:	c7 01       	movw	r24, r14
    7f7a:	b5 01       	movw	r22, r10
    7f7c:	0e 94 de 21 	call	0x43bc	; 0x43bc <Pos>
    7f80:	8c 15       	cp	r24, r12
    7f82:	9d 05       	cpc	r25, r13
    7f84:	4c f5       	brge	.+82     	; 0x7fd8 <GetParameter+0x10a>
	     SumLength=FLength-Pos(strSub,SGeniusFlow);
    7f86:	c7 01       	movw	r24, r14
    7f88:	b5 01       	movw	r22, r10
    7f8a:	0e 94 de 21 	call	0x43bc	; 0x43bc <Pos>
    7f8e:	8c 01       	movw	r16, r24
	 	 StrPosCopy(SGeniusFlow,sCSum,Pos(strSub,SGeniusFlow)+1,SumLength);
    7f90:	c7 01       	movw	r24, r14
    7f92:	b5 01       	movw	r22, r10
    7f94:	0e 94 de 21 	call	0x43bc	; 0x43bc <Pos>
    7f98:	a6 01       	movw	r20, r12
    7f9a:	40 1b       	sub	r20, r16
    7f9c:	51 0b       	sbc	r21, r17
    7f9e:	d5 01       	movw	r26, r10
    7fa0:	a8 0f       	add	r26, r24
    7fa2:	b9 1f       	adc	r27, r25
    7fa4:	20 e0       	ldi	r18, 0x00	; 0
    7fa6:	30 e0       	ldi	r19, 0x00	; 0
    7fa8:	be 01       	movw	r22, r28
    7faa:	6c 5f       	subi	r22, 0xFC	; 252
    7fac:	7f 4f       	sbci	r23, 0xFF	; 255
    7fae:	07 c0       	rjmp	.+14     	; 0x7fbe <GetParameter+0xf0>
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    7fb0:	fb 01       	movw	r30, r22
    7fb2:	e2 0f       	add	r30, r18
    7fb4:	f3 1f       	adc	r31, r19
    7fb6:	8c 91       	ld	r24, X
    7fb8:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    7fba:	2f 5f       	subi	r18, 0xFF	; 255
    7fbc:	3f 4f       	sbci	r19, 0xFF	; 255
    7fbe:	11 96       	adiw	r26, 0x01	; 1
    7fc0:	24 17       	cp	r18, r20
    7fc2:	35 07       	cpc	r19, r21
    7fc4:	a8 f3       	brcs	.-22     	; 0x7fb0 <GetParameter+0xe2>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    7fc6:	46 0f       	add	r20, r22
    7fc8:	57 1f       	adc	r21, r23
    7fca:	fa 01       	movw	r30, r20
    7fcc:	10 82       	st	Z, r1
	 *GPumpID=xPumpID;
	 sprintf_P(strSub,PSTR(":"));
	 if (Pos(strSub,SGeniusFlow)<FLength){
	     SumLength=FLength-Pos(strSub,SGeniusFlow);
	 	 StrPosCopy(SGeniusFlow,sCSum,Pos(strSub,SGeniusFlow)+1,SumLength);
		 xCsum=atoi(sCSum);
    7fce:	cb 01       	movw	r24, r22
    7fd0:	0e 94 ae aa 	call	0x1555c	; 0x1555c <atoi>
	     *GeniCSum=xCsum;
    7fd4:	f4 01       	movw	r30, r8
    7fd6:	80 83       	st	Z, r24
	 sprintf_P(strSend,PSTR("%d"),xPumpID);
	 uart_print(1,1,strSend);
	 sprintf_P(strSend,PSTR("%s"),sCSum);
	 uart_print(1,1,strSend);
*/
}
    7fd8:	a7 96       	adiw	r28, 0x27	; 39
    7fda:	0f b6       	in	r0, 0x3f	; 63
    7fdc:	f8 94       	cli
    7fde:	de bf       	out	0x3e, r29	; 62
    7fe0:	0f be       	out	0x3f, r0	; 63
    7fe2:	cd bf       	out	0x3d, r28	; 61
    7fe4:	cf 91       	pop	r28
    7fe6:	df 91       	pop	r29
    7fe8:	1f 91       	pop	r17
    7fea:	0f 91       	pop	r16
    7fec:	ff 90       	pop	r15
    7fee:	ef 90       	pop	r14
    7ff0:	df 90       	pop	r13
    7ff2:	cf 90       	pop	r12
    7ff4:	bf 90       	pop	r11
    7ff6:	af 90       	pop	r10
    7ff8:	9f 90       	pop	r9
    7ffa:	8f 90       	pop	r8
    7ffc:	08 95       	ret

00007ffe <GeniusProtocol>:
   return Result;	 
}

//enum eGeniusProtocolCommand{GP_PUMP_STATUS,GP_PUMP_LAST_TRANSACTION,GP_PUMP_STOP,GP_PUMP_RESUME,GP_PUMP_PRESET};

void GeniusProtocol(char dataIn){
    7ffe:	ff 92       	push	r15
    8000:	0f 93       	push	r16
    8002:	1f 93       	push	r17
    8004:	df 93       	push	r29
    8006:	cf 93       	push	r28
    8008:	cd b7       	in	r28, 0x3d	; 61
    800a:	de b7       	in	r29, 0x3e	; 62
    800c:	67 97       	sbiw	r28, 0x17	; 23
    800e:	0f b6       	in	r0, 0x3f	; 63
    8010:	f8 94       	cli
    8012:	de bf       	out	0x3e, r29	; 62
    8014:	0f be       	out	0x3f, r0	; 63
    8016:	cd bf       	out	0x3d, r28	; 61
    8018:	f8 2e       	mov	r15, r24
	 char i,GeniCmd,GeniPumpID,GeniCSum;//,sCmd[7];
	 char strSend[20];

    //uart(1,1,dataIn);

	if (dataIn==0x0D){	
    801a:	8d e0       	ldi	r24, 0x0D	; 13
    801c:	f8 16       	cp	r15, r24
    801e:	09 f0       	breq	.+2      	; 0x8022 <GeniusProtocol+0x24>
    8020:	45 c0       	rjmp	.+138    	; 0x80ac <GeniusProtocol+0xae>
	    GetParameter(Geniflow,FlowLength,&GeniCmd,&GeniPumpID,&GeniCSum);
    8022:	82 ec       	ldi	r24, 0xC2	; 194
    8024:	91 e0       	ldi	r25, 0x01	; 1
    8026:	60 91 c1 01 	lds	r22, 0x01C1
    802a:	ae 01       	movw	r20, r28
    802c:	4f 5f       	subi	r20, 0xFF	; 255
    802e:	5f 4f       	sbci	r21, 0xFF	; 255
    8030:	9e 01       	movw	r18, r28
    8032:	2e 5f       	subi	r18, 0xFE	; 254
    8034:	3f 4f       	sbci	r19, 0xFF	; 255
    8036:	8e 01       	movw	r16, r28
    8038:	0d 5f       	subi	r16, 0xFD	; 253
    803a:	1f 4f       	sbci	r17, 0xFF	; 255
    803c:	0e 94 67 3f 	call	0x7ece	; 0x7ece <GetParameter>
		FlowLength=0;
    8040:	10 92 c1 01 	sts	0x01C1, r1
		IsGeniusFlow=False;
    8044:	10 92 c0 01 	sts	0x01C0, r1
		FillChar(strSend,0,sizeof(strSend));
		sprintf_P(strSend,PSTR("%c%.2d:"),GeniCmd,GeniPumpID);
    8048:	ad b7       	in	r26, 0x3d	; 61
    804a:	be b7       	in	r27, 0x3e	; 62
    804c:	18 97       	sbiw	r26, 0x08	; 8
    804e:	0f b6       	in	r0, 0x3f	; 63
    8050:	f8 94       	cli
    8052:	be bf       	out	0x3e, r27	; 62
    8054:	0f be       	out	0x3f, r0	; 63
    8056:	ad bf       	out	0x3d, r26	; 61
    8058:	ed b7       	in	r30, 0x3d	; 61
    805a:	fe b7       	in	r31, 0x3e	; 62
    805c:	31 96       	adiw	r30, 0x01	; 1
    805e:	8e 01       	movw	r16, r28
    8060:	0c 5f       	subi	r16, 0xFC	; 252
    8062:	1f 4f       	sbci	r17, 0xFF	; 255
    8064:	12 96       	adiw	r26, 0x02	; 2
    8066:	1c 93       	st	X, r17
    8068:	0e 93       	st	-X, r16
    806a:	11 97       	sbiw	r26, 0x01	; 1
    806c:	8f e4       	ldi	r24, 0x4F	; 79
    806e:	95 e0       	ldi	r25, 0x05	; 5
    8070:	93 83       	std	Z+3, r25	; 0x03
    8072:	82 83       	std	Z+2, r24	; 0x02
    8074:	89 81       	ldd	r24, Y+1	; 0x01
    8076:	84 83       	std	Z+4, r24	; 0x04
    8078:	15 82       	std	Z+5, r1	; 0x05
    807a:	8a 81       	ldd	r24, Y+2	; 0x02
    807c:	86 83       	std	Z+6, r24	; 0x06
    807e:	17 82       	std	Z+7, r1	; 0x07
    8080:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
		//uart_print(1,1,strSend);


		if ((SumChecksum(strSend))==GeniCSum){
    8084:	8d b7       	in	r24, 0x3d	; 61
    8086:	9e b7       	in	r25, 0x3e	; 62
    8088:	08 96       	adiw	r24, 0x08	; 8
    808a:	0f b6       	in	r0, 0x3f	; 63
    808c:	f8 94       	cli
    808e:	9e bf       	out	0x3e, r25	; 62
    8090:	0f be       	out	0x3f, r0	; 63
    8092:	8d bf       	out	0x3d, r24	; 61
    8094:	c8 01       	movw	r24, r16
    8096:	0e 94 79 21 	call	0x42f2	; 0x42f2 <SumChecksum>
    809a:	9b 81       	ldd	r25, Y+3	; 0x03
    809c:	89 17       	cp	r24, r25
    809e:	31 f4       	brne	.+12     	; 0x80ac <GeniusProtocol+0xae>
		     switch(GeniCmd){
    80a0:	89 81       	ldd	r24, Y+1	; 0x01
    80a2:	84 35       	cpi	r24, 0x54	; 84
    80a4:	19 f4       	brne	.+6      	; 0x80ac <GeniusProtocol+0xae>
			 case 'C'://PumpStatus
			      GeniusSendPumpStatus(GeniPumpID);
			      break;
             case 'T'://Transaction Request: T01:239<0D>
			      GeniusSendLastTransaction(GeniPumpID);
    80a6:	8a 81       	ldd	r24, Y+2	; 0x02
    80a8:	0e 94 48 2e 	call	0x5c90	; 0x5c90 <GeniusSendLastTransaction>
    80ac:	e4 ed       	ldi	r30, 0xD4	; 212
    80ae:	f1 e0       	ldi	r31, 0x01	; 1
			 }
		}
	}
	//Shifting
	for(i=19;i>0;i--){
	    Geniflow[i]=Geniflow[i-1];	
    80b0:	80 81       	ld	r24, Z
    80b2:	81 83       	std	Z+1, r24	; 0x01
    80b4:	31 97       	sbiw	r30, 0x01	; 1
			      break;
			 }
		}
	}
	//Shifting
	for(i=19;i>0;i--){
    80b6:	91 e0       	ldi	r25, 0x01	; 1
    80b8:	e1 3c       	cpi	r30, 0xC1	; 193
    80ba:	f9 07       	cpc	r31, r25
    80bc:	c9 f7       	brne	.-14     	; 0x80b0 <GeniusProtocol+0xb2>
	    Geniflow[i]=Geniflow[i-1];	
	}Geniflow[0]=dataIn;
    80be:	f1 82       	std	Z+1, r15	; 0x01

	if (IsGeniusCommand(dataIn)==True)IsGeniusFlow=True;
    80c0:	8f 2d       	mov	r24, r15
    80c2:	0e 94 99 21 	call	0x4332	; 0x4332 <IsGeniusCommand>
    80c6:	81 30       	cpi	r24, 0x01	; 1
    80c8:	11 f4       	brne	.+4      	; 0x80ce <GeniusProtocol+0xd0>
    80ca:	80 93 c0 01 	sts	0x01C0, r24
	if (IsGeniusFlow==True)FlowLength++;
    80ce:	80 91 c0 01 	lds	r24, 0x01C0
    80d2:	81 30       	cpi	r24, 0x01	; 1
    80d4:	29 f4       	brne	.+10     	; 0x80e0 <GeniusProtocol+0xe2>
    80d6:	80 91 c1 01 	lds	r24, 0x01C1
    80da:	8f 5f       	subi	r24, 0xFF	; 255
    80dc:	80 93 c1 01 	sts	0x01C1, r24
	Geniflow[3]=Geniflow[2];
	Geniflow[2]=Geniflow[1];
	Geniflow[1]=Geniflow[0];
	Geniflow[0]=dataIn;
*/
}
    80e0:	67 96       	adiw	r28, 0x17	; 23
    80e2:	0f b6       	in	r0, 0x3f	; 63
    80e4:	f8 94       	cli
    80e6:	de bf       	out	0x3e, r29	; 62
    80e8:	0f be       	out	0x3f, r0	; 63
    80ea:	cd bf       	out	0x3d, r28	; 61
    80ec:	cf 91       	pop	r28
    80ee:	df 91       	pop	r29
    80f0:	1f 91       	pop	r17
    80f2:	0f 91       	pop	r16
    80f4:	ff 90       	pop	r15
    80f6:	08 95       	ret

000080f8 <__vector_30>:
}

// NotSuccessful! 


ISR(USART1_RX_vect){
    80f8:	1f 92       	push	r1
    80fa:	0f 92       	push	r0
    80fc:	0f b6       	in	r0, 0x3f	; 63
    80fe:	0f 92       	push	r0
    8100:	0b b6       	in	r0, 0x3b	; 59
    8102:	0f 92       	push	r0
    8104:	11 24       	eor	r1, r1
    8106:	1f 93       	push	r17
    8108:	2f 93       	push	r18
    810a:	3f 93       	push	r19
    810c:	4f 93       	push	r20
    810e:	5f 93       	push	r21
    8110:	6f 93       	push	r22
    8112:	7f 93       	push	r23
    8114:	8f 93       	push	r24
    8116:	9f 93       	push	r25
    8118:	af 93       	push	r26
    811a:	bf 93       	push	r27
    811c:	ef 93       	push	r30
    811e:	ff 93       	push	r31
	char dataTX1,serialSend[12];
	static char IsAdvanZProtocol=False;
	unsigned int i;
	dataTX1 = UDR1;
    8120:	10 91 9c 00 	lds	r17, 0x009C
    //Not Successfull!
	//NewPacket
	if (IsNewPacket==True){
    8124:	80 91 88 01 	lds	r24, 0x0188
    8128:	81 30       	cpi	r24, 0x01	; 1
    812a:	51 f4       	brne	.+20     	; 0x8140 <__vector_30+0x48>
	    if (dataTX1==0x01){
    812c:	11 30       	cpi	r17, 0x01	; 1
    812e:	41 f4       	brne	.+16     	; 0x8140 <__vector_30+0x48>
		    char_count=0;
    8130:	10 92 8a 01 	sts	0x018A, r1
    8134:	10 92 89 01 	sts	0x0189, r1
            IsNewPacket=False;
    8138:	10 92 88 01 	sts	0x0188, r1
			IsAdvanZProtocol=True;
    813c:	10 93 98 02 	sts	0x0298, r17
			}
	}
    //Save data to buffer if AdvanZ MSG
	if (IsAdvanZProtocol==True){
    8140:	80 91 98 02 	lds	r24, 0x0298
    8144:	81 30       	cpi	r24, 0x01	; 1
    8146:	69 f4       	brne	.+26     	; 0x8162 <__vector_30+0x6a>
	    rcv_trans[char_count]=dataTX1;
    8148:	80 91 89 01 	lds	r24, 0x0189
    814c:	90 91 8a 01 	lds	r25, 0x018A
    8150:	fc 01       	movw	r30, r24
    8152:	e1 56       	subi	r30, 0x61	; 97
    8154:	f6 4f       	sbci	r31, 0xF6	; 246
    8156:	10 83       	st	Z, r17
	    char_count++; 
    8158:	01 96       	adiw	r24, 0x01	; 1
    815a:	90 93 8a 01 	sts	0x018A, r25
    815e:	80 93 89 01 	sts	0x0189, r24
	}

	if (dataTX1==0x02){
    8162:	12 30       	cpi	r17, 0x02	; 2
    8164:	b1 f5       	brne	.+108    	; 0x81d2 <__vector_30+0xda>
		transLength=char_count;
    8166:	60 91 89 01 	lds	r22, 0x0189
    816a:	70 91 8a 01 	lds	r23, 0x018A
    816e:	70 93 8c 01 	sts	0x018C, r23
    8172:	60 93 8b 01 	sts	0x018B, r22
		char_count=0;
    8176:	10 92 8a 01 	sts	0x018A, r1
    817a:	10 92 89 01 	sts	0x0189, r1
		IsAdvanZProtocol=False;
    817e:	10 92 98 02 	sts	0x0298, r1

		//MessageIdentification
        if (MsgCode!=MSG_NONE)MsgCode=MSG_NONE;
	    MsgCode=((rcv_trans[35]-'0')*10)+(rcv_trans[36]-'0');
    8182:	20 91 c3 09 	lds	r18, 0x09C3
    8186:	20 51       	subi	r18, 0x10	; 16
    8188:	80 91 c2 09 	lds	r24, 0x09C2
    818c:	3a e0       	ldi	r19, 0x0A	; 10
    818e:	83 9f       	mul	r24, r19
    8190:	c0 01       	movw	r24, r0
    8192:	11 24       	eor	r1, r1
    8194:	28 0f       	add	r18, r24
    8196:	20 93 24 01 	sts	0x0124, r18
     
	    IdentifyMessage(rcv_trans[0],transLength);
    819a:	80 91 9f 09 	lds	r24, 0x099F
    819e:	0e 94 64 19 	call	0x32c8	; 0x32c8 <IdentifyMessage>
		IsNewPacket=True;
    81a2:	21 e0       	ldi	r18, 0x01	; 1
    81a4:	20 93 88 01 	sts	0x0188, r18

		if ((rcv_trans[35]=='8')&&(rcv_trans[36]=='1')){
    81a8:	80 91 c2 09 	lds	r24, 0x09C2
    81ac:	88 33       	cpi	r24, 0x38	; 56
    81ae:	89 f4       	brne	.+34     	; 0x81d2 <__vector_30+0xda>
    81b0:	80 91 c3 09 	lds	r24, 0x09C3
    81b4:	81 33       	cpi	r24, 0x31	; 49
    81b6:	69 f4       	brne	.+26     	; 0x81d2 <__vector_30+0xda>
		   LengthMessage81=transLength-12-44;
    81b8:	80 91 8b 01 	lds	r24, 0x018B
    81bc:	90 91 8c 01 	lds	r25, 0x018C
    81c0:	c8 97       	sbiw	r24, 0x38	; 56
    81c2:	90 93 8e 01 	sts	0x018E, r25
    81c6:	80 93 8d 01 	sts	0x018D, r24
		   IsMessage81=True;
    81ca:	20 93 a6 01 	sts	0x01A6, r18
		   IsCompleteFilling=True;
    81ce:	20 93 a9 01 	sts	0x01A9, r18
		

	}//Endif(dataTX1==0x02)

	//ConfigDetection: iConf?<0D><0A>
	if (IsNewPacket!=True)
    81d2:	80 91 88 01 	lds	r24, 0x0188
    81d6:	81 30       	cpi	r24, 0x01	; 1
    81d8:	19 f0       	breq	.+6      	; 0x81e0 <__vector_30+0xe8>
	    ConfigProtocol(dataTX1);
    81da:	81 2f       	mov	r24, r17
    81dc:	0e 94 92 15 	call	0x2b24	; 0x2b24 <ConfigProtocol>
	//GeniusDetection: [CMD][MSG][CSUM][0x0D]
	if ((IFType==IT_STANDALONE)&&(IsNewPacket!=True))
    81e0:	80 91 00 01 	lds	r24, 0x0100
    81e4:	82 30       	cpi	r24, 0x02	; 2
    81e6:	39 f4       	brne	.+14     	; 0x81f6 <__vector_30+0xfe>
    81e8:	80 91 88 01 	lds	r24, 0x0188
    81ec:	81 30       	cpi	r24, 0x01	; 1
    81ee:	19 f0       	breq	.+6      	; 0x81f6 <__vector_30+0xfe>
	     GeniusProtocol(dataTX1);		
    81f0:	81 2f       	mov	r24, r17
    81f2:	0e 94 ff 3f 	call	0x7ffe	; 0x7ffe <GeniusProtocol>
    //uart(0,1,dataTX1);
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}
    81f6:	ff 91       	pop	r31
    81f8:	ef 91       	pop	r30
    81fa:	bf 91       	pop	r27
    81fc:	af 91       	pop	r26
    81fe:	9f 91       	pop	r25
    8200:	8f 91       	pop	r24
    8202:	7f 91       	pop	r23
    8204:	6f 91       	pop	r22
    8206:	5f 91       	pop	r21
    8208:	4f 91       	pop	r20
    820a:	3f 91       	pop	r19
    820c:	2f 91       	pop	r18
    820e:	1f 91       	pop	r17
    8210:	0f 90       	pop	r0
    8212:	0b be       	out	0x3b, r0	; 59
    8214:	0f 90       	pop	r0
    8216:	0f be       	out	0x3f, r0	; 63
    8218:	0f 90       	pop	r0
    821a:	1f 90       	pop	r1
    821c:	18 95       	reti

0000821e <procMessage99>:
     StrPosCopy(rcv_trans,strAmount,74,8); 
	 StrPosCopy(rcv_trans,strStatus,82,1);
     StrPosCopy(rcv_trans,strSurcharge,83,9);    
}

char procMessage99(){//<STX>[IFT IDSeq N Srce IPDest IPMsg CodeTran NoShiftDateTimeIsland IDFIP IDProduct IDDescriptionPriceVolumeAmountMOP TypeMOP NameCard IDCard HolderBalance Type Balance MeterVolume MeterAmount Current TimePrint Count Checksum ETX
    821e:	0f 93       	push	r16
    8220:	1f 93       	push	r17
     char Result;
	 Result=MSG99_NONE;
	 //Message99
	 if((rcv_trans[0]==0x01)&&(transLength>=378)){
    8222:	80 91 9f 09 	lds	r24, 0x099F
    8226:	81 30       	cpi	r24, 0x01	; 1
    8228:	09 f0       	breq	.+2      	; 0x822c <procMessage99+0xe>
    822a:	2e c2       	rjmp	.+1116   	; 0x8688 <procMessage99+0x46a>
    822c:	80 91 8b 01 	lds	r24, 0x018B
    8230:	90 91 8c 01 	lds	r25, 0x018C
    8234:	8a 57       	subi	r24, 0x7A	; 122
    8236:	91 40       	sbci	r25, 0x01	; 1
    8238:	08 f4       	brcc	.+2      	; 0x823c <procMessage99+0x1e>
    823a:	26 c2       	rjmp	.+1100   	; 0x8688 <procMessage99+0x46a>
    823c:	20 e0       	ldi	r18, 0x00	; 0
    823e:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8240:	f9 01       	movw	r30, r18
    8242:	e7 5f       	subi	r30, 0xF7	; 247
    8244:	f2 4f       	sbci	r31, 0xF2	; 242
    8246:	d9 01       	movw	r26, r18
    8248:	a1 56       	subi	r26, 0x61	; 97
    824a:	b6 4f       	sbci	r27, 0xF6	; 246
    824c:	95 96       	adiw	r26, 0x25	; 37
    824e:	8c 91       	ld	r24, X
    8250:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8252:	2f 5f       	subi	r18, 0xFF	; 255
    8254:	3f 4f       	sbci	r19, 0xFF	; 255
    8256:	26 30       	cpi	r18, 0x06	; 6
    8258:	31 05       	cpc	r19, r1
    825a:	91 f7       	brne	.-28     	; 0x8240 <procMessage99+0x22>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    825c:	10 92 0f 0d 	sts	0x0D0F, r1
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8260:	80 91 ca 09 	lds	r24, 0x09CA
    8264:	80 93 ea 0c 	sts	0x0CEA, r24
	 }Dest[Length]=0;
    8268:	10 92 eb 0c 	sts	0x0CEB, r1
	 Result=MSG99_NONE;
	 //Message99
	 if((rcv_trans[0]==0x01)&&(transLength>=378)){
       StrPosCopy(rcv_trans,strTranNo,37,6);//Transaction Number
       StrPosCopy(rcv_trans,strShift,43,1);
       Shift=(CharPosCopy(rcv_trans,43)-'0');
    826c:	80 53       	subi	r24, 0x30	; 48
    826e:	80 93 b9 01 	sts	0x01B9, r24
    8272:	20 e0       	ldi	r18, 0x00	; 0
    8274:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8276:	f9 01       	movw	r30, r18
    8278:	e0 51       	subi	r30, 0x10	; 16
    827a:	f8 4f       	sbci	r31, 0xF8	; 248
    827c:	d9 01       	movw	r26, r18
    827e:	a1 56       	subi	r26, 0x61	; 97
    8280:	b6 4f       	sbci	r27, 0xF6	; 246
    8282:	9c 96       	adiw	r26, 0x2c	; 44
    8284:	8c 91       	ld	r24, X
    8286:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8288:	2f 5f       	subi	r18, 0xFF	; 255
    828a:	3f 4f       	sbci	r19, 0xFF	; 255
    828c:	2a 30       	cpi	r18, 0x0A	; 10
    828e:	31 05       	cpc	r19, r1
    8290:	91 f7       	brne	.-28     	; 0x8276 <procMessage99+0x58>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8292:	10 92 fa 07 	sts	0x07FA, r1
    8296:	20 e0       	ldi	r18, 0x00	; 0
    8298:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    829a:	f9 01       	movw	r30, r18
    829c:	e1 53       	subi	r30, 0x31	; 49
    829e:	fc 4f       	sbci	r31, 0xFC	; 252
    82a0:	d9 01       	movw	r26, r18
    82a2:	a1 56       	subi	r26, 0x61	; 97
    82a4:	b6 4f       	sbci	r27, 0xF6	; 246
    82a6:	d6 96       	adiw	r26, 0x36	; 54
    82a8:	8c 91       	ld	r24, X
    82aa:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    82ac:	2f 5f       	subi	r18, 0xFF	; 255
    82ae:	3f 4f       	sbci	r19, 0xFF	; 255
    82b0:	28 30       	cpi	r18, 0x08	; 8
    82b2:	31 05       	cpc	r19, r1
    82b4:	91 f7       	brne	.-28     	; 0x829a <procMessage99+0x7c>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    82b6:	10 92 d7 03 	sts	0x03D7, r1
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    82ba:	80 91 dd 09 	lds	r24, 0x09DD
    82be:	80 93 79 09 	sts	0x0979, r24
    82c2:	80 91 de 09 	lds	r24, 0x09DE
    82c6:	80 93 7a 09 	sts	0x097A, r24
	 }Dest[Length]=0;
    82ca:	10 92 7b 09 	sts	0x097B, r1
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    82ce:	80 91 df 09 	lds	r24, 0x09DF
    82d2:	80 93 3b 08 	sts	0x083B, r24
    82d6:	80 91 e0 09 	lds	r24, 0x09E0
    82da:	80 93 3c 08 	sts	0x083C, r24
	 }Dest[Length]=0;
    82de:	10 92 3d 08 	sts	0x083D, r1
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    82e2:	80 91 e1 09 	lds	r24, 0x09E1
    82e6:	80 93 f3 08 	sts	0x08F3, r24
    82ea:	80 91 e2 09 	lds	r24, 0x09E2
    82ee:	80 93 f4 08 	sts	0x08F4, r24
	 }Dest[Length]=0;
    82f2:	10 92 f5 08 	sts	0x08F5, r1
    82f6:	20 e0       	ldi	r18, 0x00	; 0
    82f8:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    82fa:	f9 01       	movw	r30, r18
    82fc:	e2 57       	subi	r30, 0x72	; 114
    82fe:	f7 4f       	sbci	r31, 0xF7	; 247
    8300:	d9 01       	movw	r26, r18
    8302:	ad 51       	subi	r26, 0x1D	; 29
    8304:	b6 4f       	sbci	r27, 0xF6	; 246
    8306:	8c 91       	ld	r24, X
    8308:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    830a:	2f 5f       	subi	r18, 0xFF	; 255
    830c:	3f 4f       	sbci	r19, 0xFF	; 255
    830e:	2f 30       	cpi	r18, 0x0F	; 15
    8310:	31 05       	cpc	r19, r1
    8312:	99 f7       	brne	.-26     	; 0x82fa <procMessage99+0xdc>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8314:	10 92 9d 08 	sts	0x089D, r1
    8318:	20 e0       	ldi	r18, 0x00	; 0
    831a:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    831c:	f9 01       	movw	r30, r18
    831e:	e0 5e       	subi	r30, 0xE0	; 224
    8320:	f9 4f       	sbci	r31, 0xF9	; 249
    8322:	d9 01       	movw	r26, r18
    8324:	ae 50       	subi	r26, 0x0E	; 14
    8326:	b6 4f       	sbci	r27, 0xF6	; 246
    8328:	8c 91       	ld	r24, X
    832a:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    832c:	2f 5f       	subi	r18, 0xFF	; 255
    832e:	3f 4f       	sbci	r19, 0xFF	; 255
    8330:	28 30       	cpi	r18, 0x08	; 8
    8332:	31 05       	cpc	r19, r1
    8334:	99 f7       	brne	.-26     	; 0x831c <procMessage99+0xfe>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8336:	10 92 28 06 	sts	0x0628, r1
    833a:	20 e0       	ldi	r18, 0x00	; 0
    833c:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    833e:	f9 01       	movw	r30, r18
    8340:	e9 50       	subi	r30, 0x09	; 9
    8342:	fc 4f       	sbci	r31, 0xFC	; 252
    8344:	d9 01       	movw	r26, r18
    8346:	a6 50       	subi	r26, 0x06	; 6
    8348:	b6 4f       	sbci	r27, 0xF6	; 246
    834a:	8c 91       	ld	r24, X
    834c:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    834e:	2f 5f       	subi	r18, 0xFF	; 255
    8350:	3f 4f       	sbci	r19, 0xFF	; 255
    8352:	28 30       	cpi	r18, 0x08	; 8
    8354:	31 05       	cpc	r19, r1
    8356:	99 f7       	brne	.-26     	; 0x833e <procMessage99+0x120>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8358:	10 92 ff 03 	sts	0x03FF, r1
    835c:	20 e0       	ldi	r18, 0x00	; 0
    835e:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8360:	f9 01       	movw	r30, r18
    8362:	eb 5c       	subi	r30, 0xCB	; 203
    8364:	f3 4f       	sbci	r31, 0xF3	; 243
    8366:	d9 01       	movw	r26, r18
    8368:	ae 5f       	subi	r26, 0xFE	; 254
    836a:	b5 4f       	sbci	r27, 0xF5	; 245
    836c:	8c 91       	ld	r24, X
    836e:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8370:	2f 5f       	subi	r18, 0xFF	; 255
    8372:	3f 4f       	sbci	r19, 0xFF	; 255
    8374:	2a 30       	cpi	r18, 0x0A	; 10
    8376:	31 05       	cpc	r19, r1
    8378:	99 f7       	brne	.-26     	; 0x8360 <procMessage99+0x142>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    837a:	10 92 3f 0c 	sts	0x0C3F, r1

	   //FillChar(strAmount,sizeof(strAmount),0);
       StrPosCopy(rcv_trans,strAmount,99,10);

       //StrPosCopy(rcv_trans,strMOPType,109,1);
       MOPType=(CharPosCopy(rcv_trans,109)-'0');
    837e:	80 91 0c 0a 	lds	r24, 0x0A0C
    8382:	80 53       	subi	r24, 0x30	; 48
    8384:	80 93 b8 01 	sts	0x01B8, r24
    8388:	20 e0       	ldi	r18, 0x00	; 0
    838a:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    838c:	f9 01       	movw	r30, r18
    838e:	e1 50       	subi	r30, 0x01	; 1
    8390:	fa 4f       	sbci	r31, 0xFA	; 250
    8392:	d9 01       	movw	r26, r18
    8394:	a3 5f       	subi	r26, 0xF3	; 243
    8396:	b5 4f       	sbci	r27, 0xF5	; 245
    8398:	8c 91       	ld	r24, X
    839a:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    839c:	2f 5f       	subi	r18, 0xFF	; 255
    839e:	3f 4f       	sbci	r19, 0xFF	; 255
    83a0:	24 31       	cpi	r18, 0x14	; 20
    83a2:	31 05       	cpc	r19, r1
    83a4:	99 f7       	brne	.-26     	; 0x838c <procMessage99+0x16e>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    83a6:	10 92 13 06 	sts	0x0613, r1
    83aa:	20 e0       	ldi	r18, 0x00	; 0
    83ac:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    83ae:	f9 01       	movw	r30, r18
    83b0:	e5 5f       	subi	r30, 0xF5	; 245
    83b2:	f3 4f       	sbci	r31, 0xF3	; 243
    83b4:	d9 01       	movw	r26, r18
    83b6:	af 5d       	subi	r26, 0xDF	; 223
    83b8:	b5 4f       	sbci	r27, 0xF5	; 245
    83ba:	8c 91       	ld	r24, X
    83bc:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    83be:	2f 5f       	subi	r18, 0xFF	; 255
    83c0:	3f 4f       	sbci	r19, 0xFF	; 255
    83c2:	24 31       	cpi	r18, 0x14	; 20
    83c4:	31 05       	cpc	r19, r1
    83c6:	99 f7       	brne	.-26     	; 0x83ae <procMessage99+0x190>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    83c8:	10 92 1f 0c 	sts	0x0C1F, r1
    83cc:	20 e0       	ldi	r18, 0x00	; 0
    83ce:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    83d0:	f9 01       	movw	r30, r18
    83d2:	ea 55       	subi	r30, 0x5A	; 90
    83d4:	fc 4f       	sbci	r31, 0xFC	; 252
    83d6:	d9 01       	movw	r26, r18
    83d8:	ab 5c       	subi	r26, 0xCB	; 203
    83da:	b5 4f       	sbci	r27, 0xF5	; 245
    83dc:	8c 91       	ld	r24, X
    83de:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    83e0:	2f 5f       	subi	r18, 0xFF	; 255
    83e2:	3f 4f       	sbci	r19, 0xFF	; 255
    83e4:	28 32       	cpi	r18, 0x28	; 40
    83e6:	31 05       	cpc	r19, r1
    83e8:	99 f7       	brne	.-26     	; 0x83d0 <procMessage99+0x1b2>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    83ea:	10 92 ce 03 	sts	0x03CE, r1
    83ee:	20 e0       	ldi	r18, 0x00	; 0
    83f0:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    83f2:	f9 01       	movw	r30, r18
    83f4:	e3 52       	subi	r30, 0x23	; 35
    83f6:	fc 4f       	sbci	r31, 0xFC	; 252
    83f8:	d9 01       	movw	r26, r18
    83fa:	a3 5a       	subi	r26, 0xA3	; 163
    83fc:	b5 4f       	sbci	r27, 0xF5	; 245
    83fe:	8c 91       	ld	r24, X
    8400:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8402:	2f 5f       	subi	r18, 0xFF	; 255
    8404:	3f 4f       	sbci	r19, 0xFF	; 255
    8406:	29 31       	cpi	r18, 0x19	; 25
    8408:	31 05       	cpc	r19, r1
    840a:	99 f7       	brne	.-26     	; 0x83f2 <procMessage99+0x1d4>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    840c:	10 92 f6 03 	sts	0x03F6, r1
    8410:	20 e0       	ldi	r18, 0x00	; 0
    8412:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8414:	f9 01       	movw	r30, r18
    8416:	e6 58       	subi	r30, 0x86	; 134
    8418:	f3 4f       	sbci	r31, 0xF3	; 243
    841a:	d9 01       	movw	r26, r18
    841c:	aa 58       	subi	r26, 0x8A	; 138
    841e:	b5 4f       	sbci	r27, 0xF5	; 245
    8420:	8c 91       	ld	r24, X
    8422:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8424:	2f 5f       	subi	r18, 0xFF	; 255
    8426:	3f 4f       	sbci	r19, 0xFF	; 255
    8428:	2d 30       	cpi	r18, 0x0D	; 13
    842a:	31 05       	cpc	r19, r1
    842c:	99 f7       	brne	.-26     	; 0x8414 <procMessage99+0x1f6>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    842e:	10 92 87 0c 	sts	0x0C87, r1
    8432:	20 e0       	ldi	r18, 0x00	; 0
    8434:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8436:	f9 01       	movw	r30, r18
    8438:	e2 5f       	subi	r30, 0xF2	; 242
    843a:	fb 4f       	sbci	r31, 0xFB	; 251
    843c:	d9 01       	movw	r26, r18
    843e:	ad 57       	subi	r26, 0x7D	; 125
    8440:	b5 4f       	sbci	r27, 0xF5	; 245
    8442:	8c 91       	ld	r24, X
    8444:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8446:	2f 5f       	subi	r18, 0xFF	; 255
    8448:	3f 4f       	sbci	r19, 0xFF	; 255
    844a:	2d 30       	cpi	r18, 0x0D	; 13
    844c:	31 05       	cpc	r19, r1
    844e:	99 f7       	brne	.-26     	; 0x8436 <procMessage99+0x218>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8450:	10 92 1b 04 	sts	0x041B, r1
    8454:	20 e0       	ldi	r18, 0x00	; 0
    8456:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8458:	f9 01       	movw	r30, r18
    845a:	e5 59       	subi	r30, 0x95	; 149
    845c:	f6 4f       	sbci	r31, 0xF6	; 246
    845e:	d9 01       	movw	r26, r18
    8460:	a0 57       	subi	r26, 0x70	; 112
    8462:	b5 4f       	sbci	r27, 0xF5	; 245
    8464:	8c 91       	ld	r24, X
    8466:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8468:	2f 5f       	subi	r18, 0xFF	; 255
    846a:	3f 4f       	sbci	r19, 0xFF	; 255
    846c:	2d 30       	cpi	r18, 0x0D	; 13
    846e:	31 05       	cpc	r19, r1
    8470:	99 f7       	brne	.-26     	; 0x8458 <procMessage99+0x23a>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8472:	10 92 78 09 	sts	0x0978, r1
    8476:	20 e0       	ldi	r18, 0x00	; 0
    8478:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    847a:	f9 01       	movw	r30, r18
    847c:	e2 5c       	subi	r30, 0xC2	; 194
    847e:	f7 4f       	sbci	r31, 0xF7	; 247
    8480:	d9 01       	movw	r26, r18
    8482:	a3 56       	subi	r26, 0x63	; 99
    8484:	b5 4f       	sbci	r27, 0xF5	; 245
    8486:	8c 91       	ld	r24, X
    8488:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    848a:	2f 5f       	subi	r18, 0xFF	; 255
    848c:	3f 4f       	sbci	r19, 0xFF	; 255
    848e:	23 31       	cpi	r18, 0x13	; 19
    8490:	31 05       	cpc	r19, r1
    8492:	99 f7       	brne	.-26     	; 0x847a <procMessage99+0x25c>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8494:	10 92 51 08 	sts	0x0851, r1
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8498:	80 91 b0 0a 	lds	r24, 0x0AB0
    849c:	80 93 06 0d 	sts	0x0D06, r24
    84a0:	80 91 b1 0a 	lds	r24, 0x0AB1
    84a4:	80 93 07 0d 	sts	0x0D07, r24
	 }Dest[Length]=0;
    84a8:	10 92 08 0d 	sts	0x0D08, r1
    84ac:	20 e0       	ldi	r18, 0x00	; 0
    84ae:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    84b0:	f9 01       	movw	r30, r18
    84b2:	ea 56       	subi	r30, 0x6A	; 106
    84b4:	f6 4f       	sbci	r31, 0xF6	; 246
    84b6:	d9 01       	movw	r26, r18
    84b8:	ae 54       	subi	r26, 0x4E	; 78
    84ba:	b5 4f       	sbci	r27, 0xF5	; 245
    84bc:	8c 91       	ld	r24, X
    84be:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    84c0:	2f 5f       	subi	r18, 0xFF	; 255
    84c2:	3f 4f       	sbci	r19, 0xFF	; 255
    84c4:	28 30       	cpi	r18, 0x08	; 8
    84c6:	31 05       	cpc	r19, r1
    84c8:	99 f7       	brne	.-26     	; 0x84b0 <procMessage99+0x292>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    84ca:	10 92 9e 09 	sts	0x099E, r1
    84ce:	20 e0       	ldi	r18, 0x00	; 0
    84d0:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    84d2:	f9 01       	movw	r30, r18
    84d4:	e5 54       	subi	r30, 0x45	; 69
    84d6:	fd 4f       	sbci	r31, 0xFD	; 253
    84d8:	d9 01       	movw	r26, r18
    84da:	a6 54       	subi	r26, 0x46	; 70
    84dc:	b5 4f       	sbci	r27, 0xF5	; 245
    84de:	8c 91       	ld	r24, X
    84e0:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    84e2:	2f 5f       	subi	r18, 0xFF	; 255
    84e4:	3f 4f       	sbci	r19, 0xFF	; 255
    84e6:	28 30       	cpi	r18, 0x08	; 8
    84e8:	31 05       	cpc	r19, r1
    84ea:	99 f7       	brne	.-26     	; 0x84d2 <procMessage99+0x2b4>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    84ec:	10 92 c3 02 	sts	0x02C3, r1
    84f0:	20 e0       	ldi	r18, 0x00	; 0
    84f2:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    84f4:	f9 01       	movw	r30, r18
    84f6:	e9 51       	subi	r30, 0x19	; 25
    84f8:	fd 4f       	sbci	r31, 0xFD	; 253
    84fa:	d9 01       	movw	r26, r18
    84fc:	ae 53       	subi	r26, 0x3E	; 62
    84fe:	b5 4f       	sbci	r27, 0xF5	; 245
    8500:	8c 91       	ld	r24, X
    8502:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8504:	2f 5f       	subi	r18, 0xFF	; 255
    8506:	3f 4f       	sbci	r19, 0xFF	; 255
    8508:	24 31       	cpi	r18, 0x14	; 20
    850a:	31 05       	cpc	r19, r1
    850c:	99 f7       	brne	.-26     	; 0x84f4 <procMessage99+0x2d6>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    850e:	10 92 fb 02 	sts	0x02FB, r1
    8512:	20 e0       	ldi	r18, 0x00	; 0
    8514:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8516:	f9 01       	movw	r30, r18
    8518:	ec 53       	subi	r30, 0x3C	; 60
    851a:	fd 4f       	sbci	r31, 0xFD	; 253
    851c:	d9 01       	movw	r26, r18
    851e:	aa 52       	subi	r26, 0x2A	; 42
    8520:	b5 4f       	sbci	r27, 0xF5	; 245
    8522:	8c 91       	ld	r24, X
    8524:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8526:	2f 5f       	subi	r18, 0xFF	; 255
    8528:	3f 4f       	sbci	r19, 0xFF	; 255
    852a:	2e 31       	cpi	r18, 0x1E	; 30
    852c:	31 05       	cpc	r19, r1
    852e:	99 f7       	brne	.-26     	; 0x8516 <procMessage99+0x2f8>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8530:	10 92 e2 02 	sts	0x02E2, r1
    8534:	20 e0       	ldi	r18, 0x00	; 0
    8536:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8538:	f9 01       	movw	r30, r18
    853a:	e9 54       	subi	r30, 0x49	; 73
    853c:	f7 4f       	sbci	r31, 0xF7	; 247
    853e:	d9 01       	movw	r26, r18
    8540:	ac 50       	subi	r26, 0x0C	; 12
    8542:	b5 4f       	sbci	r27, 0xF5	; 245
    8544:	8c 91       	ld	r24, X
    8546:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8548:	2f 5f       	subi	r18, 0xFF	; 255
    854a:	3f 4f       	sbci	r19, 0xFF	; 255
    854c:	28 30       	cpi	r18, 0x08	; 8
    854e:	31 05       	cpc	r19, r1
    8550:	99 f7       	brne	.-26     	; 0x8538 <procMessage99+0x31a>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8552:	10 92 bf 08 	sts	0x08BF, r1
    8556:	20 e0       	ldi	r18, 0x00	; 0
    8558:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    855a:	f9 01       	movw	r30, r18
    855c:	e0 50       	subi	r30, 0x00	; 0
    855e:	fc 4f       	sbci	r31, 0xFC	; 252
    8560:	d9 01       	movw	r26, r18
    8562:	a4 50       	subi	r26, 0x04	; 4
    8564:	b5 4f       	sbci	r27, 0xF5	; 245
    8566:	8c 91       	ld	r24, X
    8568:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    856a:	2f 5f       	subi	r18, 0xFF	; 255
    856c:	3f 4f       	sbci	r19, 0xFF	; 255
    856e:	2a 30       	cpi	r18, 0x0A	; 10
    8570:	31 05       	cpc	r19, r1
    8572:	99 f7       	brne	.-26     	; 0x855a <procMessage99+0x33c>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8574:	10 92 0a 04 	sts	0x040A, r1
    8578:	20 e0       	ldi	r18, 0x00	; 0
    857a:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    857c:	f9 01       	movw	r30, r18
    857e:	e1 59       	subi	r30, 0x91	; 145
    8580:	f3 4f       	sbci	r31, 0xF3	; 243
    8582:	d9 01       	movw	r26, r18
    8584:	aa 5f       	subi	r26, 0xFA	; 250
    8586:	b4 4f       	sbci	r27, 0xF4	; 244
    8588:	8c 91       	ld	r24, X
    858a:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    858c:	2f 5f       	subi	r18, 0xFF	; 255
    858e:	3f 4f       	sbci	r19, 0xFF	; 255
    8590:	2a 30       	cpi	r18, 0x0A	; 10
    8592:	31 05       	cpc	r19, r1
    8594:	99 f7       	brne	.-26     	; 0x857c <procMessage99+0x35e>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8596:	10 92 79 0c 	sts	0x0C79, r1
    859a:	20 e0       	ldi	r18, 0x00	; 0
    859c:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    859e:	f9 01       	movw	r30, r18
    85a0:	e3 5a       	subi	r30, 0xA3	; 163
    85a2:	f7 4f       	sbci	r31, 0xF7	; 247
    85a4:	d9 01       	movw	r26, r18
    85a6:	a0 5f       	subi	r26, 0xF0	; 240
    85a8:	b4 4f       	sbci	r27, 0xF4	; 244
    85aa:	8c 91       	ld	r24, X
    85ac:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    85ae:	2f 5f       	subi	r18, 0xFF	; 255
    85b0:	3f 4f       	sbci	r19, 0xFF	; 255
    85b2:	24 31       	cpi	r18, 0x14	; 20
    85b4:	31 05       	cpc	r19, r1
    85b6:	99 f7       	brne	.-26     	; 0x859e <procMessage99+0x380>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    85b8:	10 92 71 08 	sts	0x0871, r1
    85bc:	20 e0       	ldi	r18, 0x00	; 0
    85be:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    85c0:	f9 01       	movw	r30, r18
    85c2:	ec 52       	subi	r30, 0x2C	; 44
    85c4:	f7 4f       	sbci	r31, 0xF7	; 247
    85c6:	d9 01       	movw	r26, r18
    85c8:	ac 5d       	subi	r26, 0xDC	; 220
    85ca:	b4 4f       	sbci	r27, 0xF4	; 244
    85cc:	8c 91       	ld	r24, X
    85ce:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    85d0:	2f 5f       	subi	r18, 0xFF	; 255
    85d2:	3f 4f       	sbci	r19, 0xFF	; 255
    85d4:	2a 30       	cpi	r18, 0x0A	; 10
    85d6:	31 05       	cpc	r19, r1
    85d8:	99 f7       	brne	.-26     	; 0x85c0 <procMessage99+0x3a2>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    85da:	10 92 de 08 	sts	0x08DE, r1
    85de:	20 e0       	ldi	r18, 0x00	; 0
    85e0:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    85e2:	f9 01       	movw	r30, r18
    85e4:	e4 5e       	subi	r30, 0xE4	; 228
    85e6:	fb 4f       	sbci	r31, 0xFB	; 251
    85e8:	d9 01       	movw	r26, r18
    85ea:	a2 5d       	subi	r26, 0xD2	; 210
    85ec:	b4 4f       	sbci	r27, 0xF4	; 244
    85ee:	8c 91       	ld	r24, X
    85f0:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    85f2:	2f 5f       	subi	r18, 0xFF	; 255
    85f4:	3f 4f       	sbci	r19, 0xFF	; 255
    85f6:	28 30       	cpi	r18, 0x08	; 8
    85f8:	31 05       	cpc	r19, r1
    85fa:	99 f7       	brne	.-26     	; 0x85e2 <procMessage99+0x3c4>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    85fc:	10 92 24 04 	sts	0x0424, r1
    8600:	20 e0       	ldi	r18, 0x00	; 0
    8602:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8604:	f9 01       	movw	r30, r18
    8606:	e5 50       	subi	r30, 0x05	; 5
    8608:	f3 4f       	sbci	r31, 0xF3	; 243
    860a:	d9 01       	movw	r26, r18
    860c:	aa 5c       	subi	r26, 0xCA	; 202
    860e:	b4 4f       	sbci	r27, 0xF4	; 244
    8610:	8c 91       	ld	r24, X
    8612:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8614:	2f 5f       	subi	r18, 0xFF	; 255
    8616:	3f 4f       	sbci	r19, 0xFF	; 255
    8618:	2a 30       	cpi	r18, 0x0A	; 10
    861a:	31 05       	cpc	r19, r1
    861c:	99 f7       	brne	.-26     	; 0x8604 <procMessage99+0x3e6>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    861e:	10 92 05 0d 	sts	0x0D05, r1
    8622:	20 e0       	ldi	r18, 0x00	; 0
    8624:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8626:	f9 01       	movw	r30, r18
    8628:	e4 57       	subi	r30, 0x74	; 116
    862a:	f3 4f       	sbci	r31, 0xF3	; 243
    862c:	d9 01       	movw	r26, r18
    862e:	a0 5c       	subi	r26, 0xC0	; 192
    8630:	b4 4f       	sbci	r27, 0xF4	; 244
    8632:	8c 91       	ld	r24, X
    8634:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8636:	2f 5f       	subi	r18, 0xFF	; 255
    8638:	3f 4f       	sbci	r19, 0xFF	; 255
    863a:	24 31       	cpi	r18, 0x14	; 20
    863c:	31 05       	cpc	r19, r1
    863e:	99 f7       	brne	.-26     	; 0x8626 <procMessage99+0x408>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8640:	10 92 a0 0c 	sts	0x0CA0, r1
    8644:	20 e0       	ldi	r18, 0x00	; 0
    8646:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8648:	f9 01       	movw	r30, r18
    864a:	e1 5b       	subi	r30, 0xB1	; 177
    864c:	fb 4f       	sbci	r31, 0xFB	; 251
    864e:	d9 01       	movw	r26, r18
    8650:	ac 5a       	subi	r26, 0xAC	; 172
    8652:	b4 4f       	sbci	r27, 0xF4	; 244
    8654:	8c 91       	ld	r24, X
    8656:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8658:	2f 5f       	subi	r18, 0xFF	; 255
    865a:	3f 4f       	sbci	r19, 0xFF	; 255
    865c:	2e 31       	cpi	r18, 0x1E	; 30
    865e:	31 05       	cpc	r19, r1
    8660:	99 f7       	brne	.-26     	; 0x8648 <procMessage99+0x42a>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8662:	10 92 6d 04 	sts	0x046D, r1
       StrPosCopy(rcv_trans,strCorporateName,437,30);
	   //


	   //FIP Detection LocalAccount Null Filling
	   if ((nLocalAccount>0)&&(LocalAccountFIP[0]==atoi(strFIP_ID))){
    8666:	80 91 8f 01 	lds	r24, 0x018F
    866a:	88 23       	and	r24, r24
    866c:	69 f0       	breq	.+26     	; 0x8688 <procMessage99+0x46a>
    866e:	00 91 d8 03 	lds	r16, 0x03D8
    8672:	10 e0       	ldi	r17, 0x00	; 0
    8674:	8b e3       	ldi	r24, 0x3B	; 59
    8676:	98 e0       	ldi	r25, 0x08	; 8
    8678:	0e 94 ae aa 	call	0x1555c	; 0x1555c <atoi>
    867c:	08 17       	cp	r16, r24
    867e:	19 07       	cpc	r17, r25
    8680:	19 f4       	brne	.+6      	; 0x8688 <procMessage99+0x46a>
	        IsCompleteFilling=True;
    8682:	81 e0       	ldi	r24, 0x01	; 1
    8684:	80 93 a9 01 	sts	0x01A9, r24
	   }

	  }
     return Result;     
}
    8688:	80 e0       	ldi	r24, 0x00	; 0
    868a:	1f 91       	pop	r17
    868c:	0f 91       	pop	r16
    868e:	08 95       	ret

00008690 <GetMessageID>:
		  }
       IsStandaloneAcknoledge=True;
	  }
}

char GetMessageID(char *strMessageFlow){
    8690:	0f 93       	push	r16
    8692:	1f 93       	push	r17
    8694:	df 93       	push	r29
    8696:	cf 93       	push	r28
    8698:	00 d0       	rcall	.+0      	; 0x869a <GetMessageID+0xa>
    869a:	0f 92       	push	r0
    869c:	cd b7       	in	r28, 0x3d	; 61
    869e:	de b7       	in	r29, 0x3e	; 62
    86a0:	fc 01       	movw	r30, r24
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    86a2:	80 81       	ld	r24, Z
    86a4:	89 83       	std	Y+1, r24	; 0x01
    86a6:	81 81       	ldd	r24, Z+1	; 0x01
    86a8:	8a 83       	std	Y+2, r24	; 0x02
	 }Dest[Length]=0;
    86aa:	1b 82       	std	Y+3, r1	; 0x03
}

char GetMessageID(char *strMessageFlow){
     char Result,strMsgID[3];
	 StrPosCopy(strMessageFlow,strMsgID,0,2);
	 RemZeroLead(strMsgID);
    86ac:	8e 01       	movw	r16, r28
    86ae:	0f 5f       	subi	r16, 0xFF	; 255
    86b0:	1f 4f       	sbci	r17, 0xFF	; 255
    86b2:	c8 01       	movw	r24, r16
    86b4:	0e 94 3f 25 	call	0x4a7e	; 0x4a7e <RemZeroLead>
	 Result=atoi(strMsgID);
    86b8:	c8 01       	movw	r24, r16
    86ba:	0e 94 ae aa 	call	0x1555c	; 0x1555c <atoi>
  return Result;
}
    86be:	0f 90       	pop	r0
    86c0:	0f 90       	pop	r0
    86c2:	0f 90       	pop	r0
    86c4:	cf 91       	pop	r28
    86c6:	df 91       	pop	r29
    86c8:	1f 91       	pop	r17
    86ca:	0f 91       	pop	r16
    86cc:	08 95       	ret

000086ce <GenerateStandaloneTransData>:

     eeprom_write_block((const void*)&PTransNum,(void*)&DefTransactionNumber,sizeof(DefTransactionNumber));
}


char GenerateStandaloneTransData(char xPumpID, char *PNozzle){//[1,2,3..16]->[1,2,3..0]
    86ce:	bf 92       	push	r11
    86d0:	cf 92       	push	r12
    86d2:	df 92       	push	r13
    86d4:	ef 92       	push	r14
    86d6:	ff 92       	push	r15
    86d8:	0f 93       	push	r16
    86da:	1f 93       	push	r17
    86dc:	df 93       	push	r29
    86de:	cf 93       	push	r28
    86e0:	cd b7       	in	r28, 0x3d	; 61
    86e2:	de b7       	in	r29, 0x3e	; 62
    86e4:	6e 97       	sbiw	r28, 0x1e	; 30
    86e6:	0f b6       	in	r0, 0x3f	; 63
    86e8:	f8 94       	cli
    86ea:	de bf       	out	0x3e, r29	; 62
    86ec:	0f be       	out	0x3f, r0	; 63
    86ee:	cd bf       	out	0x3d, r28	; 61
    86f0:	e8 2e       	mov	r14, r24
    86f2:	8b 01       	movw	r16, r22
	 char strConfUnitPrice[10];
	 unsigned int PumpPrice,ConfigPrice;
	 char strConst[5];

	 iPumpID=(xPumpID&0x0F);
	 FIPAddr=GetFIPAddr(iPumpID);
    86f4:	8f 70       	andi	r24, 0x0F	; 15
    86f6:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <GetFIPAddr>
     if (FIPAddr>0){
    86fa:	88 23       	and	r24, r24
    86fc:	09 f4       	brne	.+2      	; 0x8700 <GenerateStandaloneTransData+0x32>
    86fe:	9b c1       	rjmp	.+822    	; 0x8a36 <GenerateStandaloneTransData+0x368>
	     FIPAddr=FIPAddr-1;
		 iProdID=PNozzle[RecPumpData[FIPAddr].Grade];
    8700:	81 50       	subi	r24, 0x01	; 1
    8702:	c8 2e       	mov	r12, r24
    8704:	dd 24       	eor	r13, r13
    8706:	85 e3       	ldi	r24, 0x35	; 53
    8708:	90 e0       	ldi	r25, 0x00	; 0
    870a:	c8 9e       	mul	r12, r24
    870c:	f0 01       	movw	r30, r0
    870e:	c9 9e       	mul	r12, r25
    8710:	f0 0d       	add	r31, r0
    8712:	d8 9e       	mul	r13, r24
    8714:	f0 0d       	add	r31, r0
    8716:	11 24       	eor	r1, r1
    8718:	e6 5d       	subi	r30, 0xD6	; 214
    871a:	f9 4f       	sbci	r31, 0xF9	; 249
    871c:	80 81       	ld	r24, Z
    871e:	08 0f       	add	r16, r24
    8720:	11 1d       	adc	r17, r1
    8722:	d8 01       	movw	r26, r16
    8724:	bc 90       	ld	r11, X
    8726:	ce 01       	movw	r24, r28
    8728:	40 96       	adiw	r24, 0x10	; 16

		 if (iProdID>0) eeprom_read_block((void*) &ProductName, (const void*) &DefProductName[iProdID-1],sizeof(DefProductName[iProdID-1]));
    872a:	bb 20       	and	r11, r11
    872c:	59 f0       	breq	.+22     	; 0x8744 <GenerateStandaloneTransData+0x76>
    872e:	6d e0       	ldi	r22, 0x0D	; 13
    8730:	b6 9e       	mul	r11, r22
    8732:	b0 01       	movw	r22, r0
    8734:	11 24       	eor	r1, r1
    8736:	61 55       	subi	r22, 0x51	; 81
    8738:	7f 4f       	sbci	r23, 0xFF	; 255
    873a:	4d e0       	ldi	r20, 0x0D	; 13
    873c:	50 e0       	ldi	r21, 0x00	; 0
    873e:	0e 94 1b ad 	call	0x15a36	; 0x15a36 <__eerd_block_m128>
    8742:	10 c0       	rjmp	.+32     	; 0x8764 <GenerateStandaloneTransData+0x96>
		 else sprintf_P(ProductName,PSTR("N/A"));
    8744:	00 d0       	rcall	.+0      	; 0x8746 <GenerateStandaloneTransData+0x78>
    8746:	00 d0       	rcall	.+0      	; 0x8748 <GenerateStandaloneTransData+0x7a>
    8748:	ed b7       	in	r30, 0x3d	; 61
    874a:	fe b7       	in	r31, 0x3e	; 62
    874c:	92 83       	std	Z+2, r25	; 0x02
    874e:	81 83       	std	Z+1, r24	; 0x01
    8750:	82 e3       	ldi	r24, 0x32	; 50
    8752:	94 e2       	ldi	r25, 0x24	; 36
    8754:	94 83       	std	Z+4, r25	; 0x04
    8756:	83 83       	std	Z+3, r24	; 0x03
    8758:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
    875c:	0f 90       	pop	r0
    875e:	0f 90       	pop	r0
    8760:	0f 90       	pop	r0
    8762:	0f 90       	pop	r0

		 TermID=eeprom_read_byte(&DefIFT_ID);
    8764:	80 e0       	ldi	r24, 0x00	; 0
    8766:	90 e0       	ldi	r25, 0x00	; 0
    8768:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
    876c:	f8 2e       	mov	r15, r24

		 //Shift,TransNum,Date,Time
		 sprintf_P(strShift,PSTR("%d"),RecPumpData[FIPAddr].Shift);
    876e:	00 d0       	rcall	.+0      	; 0x8770 <GenerateStandaloneTransData+0xa2>
    8770:	00 d0       	rcall	.+0      	; 0x8772 <GenerateStandaloneTransData+0xa4>
    8772:	00 d0       	rcall	.+0      	; 0x8774 <GenerateStandaloneTransData+0xa6>
    8774:	ad b7       	in	r26, 0x3d	; 61
    8776:	be b7       	in	r27, 0x3e	; 62
    8778:	11 96       	adiw	r26, 0x01	; 1
    877a:	8a ee       	ldi	r24, 0xEA	; 234
    877c:	9c e0       	ldi	r25, 0x0C	; 12
    877e:	ed b7       	in	r30, 0x3d	; 61
    8780:	fe b7       	in	r31, 0x3e	; 62
    8782:	92 83       	std	Z+2, r25	; 0x02
    8784:	81 83       	std	Z+1, r24	; 0x01
    8786:	8f e2       	ldi	r24, 0x2F	; 47
    8788:	94 e2       	ldi	r25, 0x24	; 36
    878a:	13 96       	adiw	r26, 0x03	; 3
    878c:	9c 93       	st	X, r25
    878e:	8e 93       	st	-X, r24
    8790:	12 97       	sbiw	r26, 0x02	; 2
    8792:	85 e3       	ldi	r24, 0x35	; 53
    8794:	90 e0       	ldi	r25, 0x00	; 0
    8796:	c8 9e       	mul	r12, r24
    8798:	80 01       	movw	r16, r0
    879a:	c9 9e       	mul	r12, r25
    879c:	10 0d       	add	r17, r0
    879e:	d8 9e       	mul	r13, r24
    87a0:	10 0d       	add	r17, r0
    87a2:	11 24       	eor	r1, r1
    87a4:	f8 01       	movw	r30, r16
    87a6:	e6 5d       	subi	r30, 0xD6	; 214
    87a8:	f9 4f       	sbci	r31, 0xF9	; 249
    87aa:	82 81       	ldd	r24, Z+2	; 0x02
    87ac:	14 96       	adiw	r26, 0x04	; 4
    87ae:	8c 93       	st	X, r24
    87b0:	14 97       	sbiw	r26, 0x04	; 4
    87b2:	15 96       	adiw	r26, 0x05	; 5
    87b4:	1c 92       	st	X, r1
    87b6:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
		 sprintf_P(strTranNo,PSTR("%s"),RecPumpData[FIPAddr].strTransNum);
    87ba:	ed b7       	in	r30, 0x3d	; 61
    87bc:	fe b7       	in	r31, 0x3e	; 62
    87be:	31 96       	adiw	r30, 0x01	; 1
    87c0:	89 e0       	ldi	r24, 0x09	; 9
    87c2:	9d e0       	ldi	r25, 0x0D	; 13
    87c4:	ad b7       	in	r26, 0x3d	; 61
    87c6:	be b7       	in	r27, 0x3e	; 62
    87c8:	12 96       	adiw	r26, 0x02	; 2
    87ca:	9c 93       	st	X, r25
    87cc:	8e 93       	st	-X, r24
    87ce:	11 97       	sbiw	r26, 0x01	; 1
    87d0:	8c e2       	ldi	r24, 0x2C	; 44
    87d2:	94 e2       	ldi	r25, 0x24	; 36
    87d4:	93 83       	std	Z+3, r25	; 0x03
    87d6:	82 83       	std	Z+2, r24	; 0x02
    87d8:	c8 01       	movw	r24, r16
    87da:	83 5d       	subi	r24, 0xD3	; 211
    87dc:	99 4f       	sbci	r25, 0xF9	; 249
    87de:	95 83       	std	Z+5, r25	; 0x05
    87e0:	84 83       	std	Z+4, r24	; 0x04
    87e2:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	     sprintf_P(strDate,PSTR("%s"),RecPumpData[FIPAddr].strTransDate);
    87e6:	ed b7       	in	r30, 0x3d	; 61
    87e8:	fe b7       	in	r31, 0x3e	; 62
    87ea:	31 96       	adiw	r30, 0x01	; 1
    87ec:	80 ef       	ldi	r24, 0xF0	; 240
    87ee:	97 e0       	ldi	r25, 0x07	; 7
    87f0:	ad b7       	in	r26, 0x3d	; 61
    87f2:	be b7       	in	r27, 0x3e	; 62
    87f4:	12 96       	adiw	r26, 0x02	; 2
    87f6:	9c 93       	st	X, r25
    87f8:	8e 93       	st	-X, r24
    87fa:	11 97       	sbiw	r26, 0x01	; 1
    87fc:	89 e2       	ldi	r24, 0x29	; 41
    87fe:	94 e2       	ldi	r25, 0x24	; 36
    8800:	93 83       	std	Z+3, r25	; 0x03
    8802:	82 83       	std	Z+2, r24	; 0x02
    8804:	c8 01       	movw	r24, r16
    8806:	8c 5c       	subi	r24, 0xCC	; 204
    8808:	99 4f       	sbci	r25, 0xF9	; 249
    880a:	95 83       	std	Z+5, r25	; 0x05
    880c:	84 83       	std	Z+4, r24	; 0x04
    880e:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
		 sprintf_P(strTime,PSTR("%s"),RecPumpData[FIPAddr].strTransTime);	 
    8812:	ed b7       	in	r30, 0x3d	; 61
    8814:	fe b7       	in	r31, 0x3e	; 62
    8816:	31 96       	adiw	r30, 0x01	; 1
    8818:	8f ec       	ldi	r24, 0xCF	; 207
    881a:	93 e0       	ldi	r25, 0x03	; 3
    881c:	ad b7       	in	r26, 0x3d	; 61
    881e:	be b7       	in	r27, 0x3e	; 62
    8820:	12 96       	adiw	r26, 0x02	; 2
    8822:	9c 93       	st	X, r25
    8824:	8e 93       	st	-X, r24
    8826:	11 97       	sbiw	r26, 0x01	; 1
    8828:	86 e2       	ldi	r24, 0x26	; 38
    882a:	94 e2       	ldi	r25, 0x24	; 36
    882c:	93 83       	std	Z+3, r25	; 0x03
    882e:	82 83       	std	Z+2, r24	; 0x02
    8830:	c8 01       	movw	r24, r16
    8832:	83 5c       	subi	r24, 0xC3	; 195
    8834:	99 4f       	sbci	r25, 0xF9	; 249
    8836:	95 83       	std	Z+5, r25	; 0x05
    8838:	84 83       	std	Z+4, r24	; 0x04
    883a:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>

	     //TermID,FIP_ID,Product
		 sprintf_P(strIslandID,PSTR("%d"),TermID);
    883e:	ed b7       	in	r30, 0x3d	; 61
    8840:	fe b7       	in	r31, 0x3e	; 62
    8842:	31 96       	adiw	r30, 0x01	; 1
    8844:	89 e7       	ldi	r24, 0x79	; 121
    8846:	99 e0       	ldi	r25, 0x09	; 9
    8848:	ad b7       	in	r26, 0x3d	; 61
    884a:	be b7       	in	r27, 0x3e	; 62
    884c:	12 96       	adiw	r26, 0x02	; 2
    884e:	9c 93       	st	X, r25
    8850:	8e 93       	st	-X, r24
    8852:	11 97       	sbiw	r26, 0x01	; 1
    8854:	83 e2       	ldi	r24, 0x23	; 35
    8856:	94 e2       	ldi	r25, 0x24	; 36
    8858:	93 83       	std	Z+3, r25	; 0x03
    885a:	82 83       	std	Z+2, r24	; 0x02
    885c:	f4 82       	std	Z+4, r15	; 0x04
    885e:	15 82       	std	Z+5, r1	; 0x05
    8860:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
		 sprintf_P(strFIP_ID,PSTR("%.2d"),xPumpID);
    8864:	ed b7       	in	r30, 0x3d	; 61
    8866:	fe b7       	in	r31, 0x3e	; 62
    8868:	31 96       	adiw	r30, 0x01	; 1
    886a:	8b e3       	ldi	r24, 0x3B	; 59
    886c:	98 e0       	ldi	r25, 0x08	; 8
    886e:	ad b7       	in	r26, 0x3d	; 61
    8870:	be b7       	in	r27, 0x3e	; 62
    8872:	12 96       	adiw	r26, 0x02	; 2
    8874:	9c 93       	st	X, r25
    8876:	8e 93       	st	-X, r24
    8878:	11 97       	sbiw	r26, 0x01	; 1
    887a:	8e e1       	ldi	r24, 0x1E	; 30
    887c:	94 e2       	ldi	r25, 0x24	; 36
    887e:	93 83       	std	Z+3, r25	; 0x03
    8880:	82 83       	std	Z+2, r24	; 0x02
    8882:	e4 82       	std	Z+4, r14	; 0x04
    8884:	15 82       	std	Z+5, r1	; 0x05
    8886:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	     sprintf_P(strDescription,PSTR("%s"),ProductName);
    888a:	ed b7       	in	r30, 0x3d	; 61
    888c:	fe b7       	in	r31, 0x3e	; 62
    888e:	31 96       	adiw	r30, 0x01	; 1
    8890:	8e e8       	ldi	r24, 0x8E	; 142
    8892:	98 e0       	ldi	r25, 0x08	; 8
    8894:	ad b7       	in	r26, 0x3d	; 61
    8896:	be b7       	in	r27, 0x3e	; 62
    8898:	12 96       	adiw	r26, 0x02	; 2
    889a:	9c 93       	st	X, r25
    889c:	8e 93       	st	-X, r24
    889e:	11 97       	sbiw	r26, 0x01	; 1
    88a0:	8b e1       	ldi	r24, 0x1B	; 27
    88a2:	94 e2       	ldi	r25, 0x24	; 36
    88a4:	93 83       	std	Z+3, r25	; 0x03
    88a6:	82 83       	std	Z+2, r24	; 0x02
    88a8:	ce 01       	movw	r24, r28
    88aa:	40 96       	adiw	r24, 0x10	; 16
    88ac:	95 83       	std	Z+5, r25	; 0x05
    88ae:	84 83       	std	Z+4, r24	; 0x04
    88b0:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>

		 //Price Volume Money
		 sprintf_P(strPrice,PSTR("%s"),RecPumpData[FIPAddr].Price);
    88b4:	ed b7       	in	r30, 0x3d	; 61
    88b6:	fe b7       	in	r31, 0x3e	; 62
    88b8:	31 96       	adiw	r30, 0x01	; 1
    88ba:	70 e2       	ldi	r23, 0x20	; 32
    88bc:	e7 2e       	mov	r14, r23
    88be:	76 e0       	ldi	r23, 0x06	; 6
    88c0:	f7 2e       	mov	r15, r23
    88c2:	ad b7       	in	r26, 0x3d	; 61
    88c4:	be b7       	in	r27, 0x3e	; 62
    88c6:	12 96       	adiw	r26, 0x02	; 2
    88c8:	fc 92       	st	X, r15
    88ca:	ee 92       	st	-X, r14
    88cc:	11 97       	sbiw	r26, 0x01	; 1
    88ce:	88 e1       	ldi	r24, 0x18	; 24
    88d0:	94 e2       	ldi	r25, 0x24	; 36
    88d2:	93 83       	std	Z+3, r25	; 0x03
    88d4:	82 83       	std	Z+2, r24	; 0x02
    88d6:	c8 01       	movw	r24, r16
    88d8:	8a 5b       	subi	r24, 0xBA	; 186
    88da:	99 4f       	sbci	r25, 0xF9	; 249
    88dc:	95 83       	std	Z+5, r25	; 0x05
    88de:	84 83       	std	Z+4, r24	; 0x04
    88e0:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	     sprintf_P(strVolume,PSTR("%s"),RecPumpData[FIPAddr].Volume);
    88e4:	ed b7       	in	r30, 0x3d	; 61
    88e6:	fe b7       	in	r31, 0x3e	; 62
    88e8:	31 96       	adiw	r30, 0x01	; 1
    88ea:	87 ef       	ldi	r24, 0xF7	; 247
    88ec:	93 e0       	ldi	r25, 0x03	; 3
    88ee:	ad b7       	in	r26, 0x3d	; 61
    88f0:	be b7       	in	r27, 0x3e	; 62
    88f2:	12 96       	adiw	r26, 0x02	; 2
    88f4:	9c 93       	st	X, r25
    88f6:	8e 93       	st	-X, r24
    88f8:	11 97       	sbiw	r26, 0x01	; 1
    88fa:	85 e1       	ldi	r24, 0x15	; 21
    88fc:	94 e2       	ldi	r25, 0x24	; 36
    88fe:	93 83       	std	Z+3, r25	; 0x03
    8900:	82 83       	std	Z+2, r24	; 0x02
    8902:	c8 01       	movw	r24, r16
    8904:	83 5b       	subi	r24, 0xB3	; 179
    8906:	99 4f       	sbci	r25, 0xF9	; 249
    8908:	95 83       	std	Z+5, r25	; 0x05
    890a:	84 83       	std	Z+4, r24	; 0x04
    890c:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
		 sprintf_P(strAmount,PSTR("%s"),RecPumpData[FIPAddr].Money);
    8910:	ed b7       	in	r30, 0x3d	; 61
    8912:	fe b7       	in	r31, 0x3e	; 62
    8914:	31 96       	adiw	r30, 0x01	; 1
    8916:	85 e3       	ldi	r24, 0x35	; 53
    8918:	9c e0       	ldi	r25, 0x0C	; 12
    891a:	ad b7       	in	r26, 0x3d	; 61
    891c:	be b7       	in	r27, 0x3e	; 62
    891e:	12 96       	adiw	r26, 0x02	; 2
    8920:	9c 93       	st	X, r25
    8922:	8e 93       	st	-X, r24
    8924:	11 97       	sbiw	r26, 0x01	; 1
    8926:	82 e1       	ldi	r24, 0x12	; 18
    8928:	94 e2       	ldi	r25, 0x24	; 36
    892a:	93 83       	std	Z+3, r25	; 0x03
    892c:	82 83       	std	Z+2, r24	; 0x02
    892e:	0a 5a       	subi	r16, 0xAA	; 170
    8930:	19 4f       	sbci	r17, 0xF9	; 249
    8932:	15 83       	std	Z+5, r17	; 0x05
    8934:	04 83       	std	Z+4, r16	; 0x04
    8936:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>

		 
		 //Genius4.23 ->Enhanced Multiplication for 6 Digit Pump
		 //Read Price Configuration
		 if (iProdID>0) eeprom_read_block((void*) &strConfUnitPrice, (const void*) &DefProductPrice[iProdID-1],sizeof(DefProductPrice[iProdID-1]));
    893a:	ed b7       	in	r30, 0x3d	; 61
    893c:	fe b7       	in	r31, 0x3e	; 62
    893e:	36 96       	adiw	r30, 0x06	; 6
    8940:	0f b6       	in	r0, 0x3f	; 63
    8942:	f8 94       	cli
    8944:	fe bf       	out	0x3e, r31	; 62
    8946:	0f be       	out	0x3f, r0	; 63
    8948:	ed bf       	out	0x3d, r30	; 61
    894a:	ce 01       	movw	r24, r28
    894c:	06 96       	adiw	r24, 0x06	; 6
    894e:	bb 20       	and	r11, r11
    8950:	59 f0       	breq	.+22     	; 0x8968 <GenerateStandaloneTransData+0x29a>
    8952:	69 e0       	ldi	r22, 0x09	; 9
    8954:	b6 9e       	mul	r11, r22
    8956:	b0 01       	movw	r22, r0
    8958:	11 24       	eor	r1, r1
    895a:	63 58       	subi	r22, 0x83	; 131
    895c:	7f 4f       	sbci	r23, 0xFF	; 255
    895e:	49 e0       	ldi	r20, 0x09	; 9
    8960:	50 e0       	ldi	r21, 0x00	; 0
    8962:	0e 94 1b ad 	call	0x15a36	; 0x15a36 <__eerd_block_m128>
    8966:	1c c0       	rjmp	.+56     	; 0x89a0 <GenerateStandaloneTransData+0x2d2>
		 else sprintf_P(strConfUnitPrice,PSTR("%s"),strPrice);
    8968:	00 d0       	rcall	.+0      	; 0x896a <GenerateStandaloneTransData+0x29c>
    896a:	00 d0       	rcall	.+0      	; 0x896c <GenerateStandaloneTransData+0x29e>
    896c:	00 d0       	rcall	.+0      	; 0x896e <GenerateStandaloneTransData+0x2a0>
    896e:	ed b7       	in	r30, 0x3d	; 61
    8970:	fe b7       	in	r31, 0x3e	; 62
    8972:	31 96       	adiw	r30, 0x01	; 1
    8974:	ad b7       	in	r26, 0x3d	; 61
    8976:	be b7       	in	r27, 0x3e	; 62
    8978:	12 96       	adiw	r26, 0x02	; 2
    897a:	9c 93       	st	X, r25
    897c:	8e 93       	st	-X, r24
    897e:	11 97       	sbiw	r26, 0x01	; 1
    8980:	8f e0       	ldi	r24, 0x0F	; 15
    8982:	94 e2       	ldi	r25, 0x24	; 36
    8984:	93 83       	std	Z+3, r25	; 0x03
    8986:	82 83       	std	Z+2, r24	; 0x02
    8988:	f5 82       	std	Z+5, r15	; 0x05
    898a:	e4 82       	std	Z+4, r14	; 0x04
    898c:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
    8990:	ed b7       	in	r30, 0x3d	; 61
    8992:	fe b7       	in	r31, 0x3e	; 62
    8994:	36 96       	adiw	r30, 0x06	; 6
    8996:	0f b6       	in	r0, 0x3f	; 63
    8998:	f8 94       	cli
    899a:	fe bf       	out	0x3e, r31	; 62
    899c:	0f be       	out	0x3f, r0	; 63
    899e:	ed bf       	out	0x3d, r30	; 61

		 PumpPrice=atoi(strPrice);
    89a0:	80 e2       	ldi	r24, 0x20	; 32
    89a2:	96 e0       	ldi	r25, 0x06	; 6
    89a4:	0e 94 ae aa 	call	0x1555c	; 0x1555c <atoi>
    89a8:	7c 01       	movw	r14, r24
		 ConfigPrice=atoi(strConfUnitPrice);
    89aa:	8e 01       	movw	r16, r28
    89ac:	0a 5f       	subi	r16, 0xFA	; 250
    89ae:	1f 4f       	sbci	r17, 0xFF	; 255
    89b0:	c8 01       	movw	r24, r16
    89b2:	0e 94 ae aa 	call	0x1555c	; 0x1555c <atoi>

		 if ((strlen(strConfUnitPrice)>=5)&&(ConfigPrice>PumpPrice)){//if Price Configured > Pump Price
    89b6:	f8 01       	movw	r30, r16
    89b8:	01 90       	ld	r0, Z+
    89ba:	00 20       	and	r0, r0
    89bc:	e9 f7       	brne	.-6      	; 0x89b8 <GenerateStandaloneTransData+0x2ea>
    89be:	31 97       	sbiw	r30, 0x01	; 1
    89c0:	e0 1b       	sub	r30, r16
    89c2:	f1 0b       	sbc	r31, r17
    89c4:	35 97       	sbiw	r30, 0x05	; 5
    89c6:	30 f1       	brcs	.+76     	; 0x8a14 <GenerateStandaloneTransData+0x346>
    89c8:	e8 16       	cp	r14, r24
    89ca:	f9 06       	cpc	r15, r25
    89cc:	18 f5       	brcc	.+70     	; 0x8a14 <GenerateStandaloneTransData+0x346>
		     sprintf_P(strConst,PSTR("10"));
    89ce:	00 d0       	rcall	.+0      	; 0x89d0 <GenerateStandaloneTransData+0x302>
    89d0:	00 d0       	rcall	.+0      	; 0x89d2 <GenerateStandaloneTransData+0x304>
    89d2:	8e 01       	movw	r16, r28
    89d4:	0f 5f       	subi	r16, 0xFF	; 255
    89d6:	1f 4f       	sbci	r17, 0xFF	; 255
    89d8:	ad b7       	in	r26, 0x3d	; 61
    89da:	be b7       	in	r27, 0x3e	; 62
    89dc:	12 96       	adiw	r26, 0x02	; 2
    89de:	1c 93       	st	X, r17
    89e0:	0e 93       	st	-X, r16
    89e2:	11 97       	sbiw	r26, 0x01	; 1
    89e4:	8c e0       	ldi	r24, 0x0C	; 12
    89e6:	94 e2       	ldi	r25, 0x24	; 36
    89e8:	14 96       	adiw	r26, 0x04	; 4
    89ea:	9c 93       	st	X, r25
    89ec:	8e 93       	st	-X, r24
    89ee:	13 97       	sbiw	r26, 0x03	; 3
    89f0:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
		     CalcMultiply(strPrice,strConst,strPrice);
    89f4:	0f 90       	pop	r0
    89f6:	0f 90       	pop	r0
    89f8:	0f 90       	pop	r0
    89fa:	0f 90       	pop	r0
    89fc:	80 e2       	ldi	r24, 0x20	; 32
    89fe:	96 e0       	ldi	r25, 0x06	; 6
    8a00:	b8 01       	movw	r22, r16
    8a02:	ac 01       	movw	r20, r24
    8a04:	0e 94 5b 2c 	call	0x58b6	; 0x58b6 <CalcMultiply>
			 CalcMultiply(strAmount,strConst,strAmount);
    8a08:	85 e3       	ldi	r24, 0x35	; 53
    8a0a:	9c e0       	ldi	r25, 0x0C	; 12
    8a0c:	b8 01       	movw	r22, r16
    8a0e:	ac 01       	movw	r20, r24
    8a10:	0e 94 5b 2c 	call	0x58b6	; 0x58b6 <CalcMultiply>
		 }       

		 //Formating Decimal Genius 4.32 Previus In StoreStandaloneTransData

		 FormatPrice(strPrice);
    8a14:	80 e2       	ldi	r24, 0x20	; 32
    8a16:	96 e0       	ldi	r25, 0x06	; 6
    8a18:	0e 94 6f 34 	call	0x68de	; 0x68de <FormatPrice>
		 FormatVolume(strVolume);
    8a1c:	87 ef       	ldi	r24, 0xF7	; 247
    8a1e:	93 e0       	ldi	r25, 0x03	; 3
    8a20:	0e 94 53 34 	call	0x68a6	; 0x68a6 <FormatVolume>
		 FormatMoney(strAmount);		 
    8a24:	85 e3       	ldi	r24, 0x35	; 53
    8a26:	9c e0       	ldi	r25, 0x0C	; 12
    8a28:	0e 94 61 34 	call	0x68c2	; 0x68c2 <FormatMoney>

		 MOPType=MOP_CASH;
    8a2c:	10 92 b8 01 	sts	0x01B8, r1
	     IsPrinting=True;	 
    8a30:	81 e0       	ldi	r24, 0x01	; 1
    8a32:	80 93 ac 01 	sts	0x01AC, r24
	 }
	 //ProductName	 
	 //iProdID=PNozzle[RecPumpData[iPumpID].Nozzle];
	 //BAsedOnGrade
   return Result;
}
    8a36:	6e 96       	adiw	r28, 0x1e	; 30
    8a38:	0f b6       	in	r0, 0x3f	; 63
    8a3a:	f8 94       	cli
    8a3c:	de bf       	out	0x3e, r29	; 62
    8a3e:	0f be       	out	0x3f, r0	; 63
    8a40:	cd bf       	out	0x3d, r28	; 61
    8a42:	cf 91       	pop	r28
    8a44:	df 91       	pop	r29
    8a46:	1f 91       	pop	r17
    8a48:	0f 91       	pop	r16
    8a4a:	ff 90       	pop	r15
    8a4c:	ef 90       	pop	r14
    8a4e:	df 90       	pop	r13
    8a50:	cf 90       	pop	r12
    8a52:	bf 90       	pop	r11
    8a54:	08 95       	ret

00008a56 <PrintStandalone>:
     char Result=PS_NONE;

   return Result;
}

char PrintStandalone(char FIPAddr,char IsReprint){
    8a56:	ef 92       	push	r14
    8a58:	ff 92       	push	r15
    8a5a:	0f 93       	push	r16
    8a5c:	1f 93       	push	r17
    8a5e:	df 93       	push	r29
    8a60:	cf 93       	push	r28
    8a62:	00 d0       	rcall	.+0      	; 0x8a64 <PrintStandalone+0xe>
    8a64:	00 d0       	rcall	.+0      	; 0x8a66 <PrintStandalone+0x10>
    8a66:	00 d0       	rcall	.+0      	; 0x8a68 <PrintStandalone+0x12>
    8a68:	cd b7       	in	r28, 0x3d	; 61
    8a6a:	de b7       	in	r29, 0x3e	; 62
    8a6c:	f8 2e       	mov	r15, r24
    8a6e:	06 2f       	mov	r16, r22
	 char LFIPAddr;
	      
	 Result=PS_NO_DATA;

//	 eeprom_read_block((void*) &PPumpID, (const void*) &DefPumpMap, 8);
	 iPumpID=GetPumpID(FIPAddr);//PPumpID[FIPAddr-1];
    8a70:	0e 94 87 20 	call	0x410e	; 0x410e <GetPumpID>
    8a74:	e8 2e       	mov	r14, r24
     LFIPAddr=GetFIPAddr(iPumpID);
    8a76:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <GetFIPAddr>
    8a7a:	18 2f       	mov	r17, r24

     if (LFIPAddr>0){
    8a7c:	88 23       	and	r24, r24
    8a7e:	89 f1       	breq	.+98     	; 0x8ae2 <PrintStandalone+0x8c>
	     LFIPAddr=LFIPAddr-1;
	     if ((IsReprint==True)||(iPumpID>0)&&(strPumpStatus[LFIPAddr]==GetPumpStatusLabel(PS_PRINT_READY))){    	 
    8a80:	01 30       	cpi	r16, 0x01	; 1
    8a82:	69 f0       	breq	.+26     	; 0x8a9e <PrintStandalone+0x48>
    8a84:	ee 20       	and	r14, r14
    8a86:	69 f1       	breq	.+90     	; 0x8ae2 <PrintStandalone+0x8c>
    8a88:	80 e1       	ldi	r24, 0x10	; 16
    8a8a:	0e 94 41 14 	call	0x2882	; 0x2882 <GetPumpStatusLabel>
    8a8e:	11 50       	subi	r17, 0x01	; 1
    8a90:	e1 2f       	mov	r30, r17
    8a92:	f0 e0       	ldi	r31, 0x00	; 0
    8a94:	ee 5f       	subi	r30, 0xFE	; 254
    8a96:	fe 4f       	sbci	r31, 0xFE	; 254
    8a98:	90 81       	ld	r25, Z
    8a9a:	98 17       	cp	r25, r24
    8a9c:	11 f5       	brne	.+68     	; 0x8ae2 <PrintStandalone+0x8c>
		     eeprom_read_block((void*) &PProductID, (const void*) &DefNozzleMap[FIPAddr-1], 6);		 
    8a9e:	66 e0       	ldi	r22, 0x06	; 6
    8aa0:	f6 9e       	mul	r15, r22
    8aa2:	b0 01       	movw	r22, r0
    8aa4:	11 24       	eor	r1, r1
    8aa6:	60 5b       	subi	r22, 0xB0	; 176
    8aa8:	7f 4f       	sbci	r23, 0xFF	; 255
    8aaa:	ce 01       	movw	r24, r28
    8aac:	01 96       	adiw	r24, 0x01	; 1
    8aae:	46 e0       	ldi	r20, 0x06	; 6
    8ab0:	50 e0       	ldi	r21, 0x00	; 0
    8ab2:	0e 94 1b ad 	call	0x15a36	; 0x15a36 <__eerd_block_m128>
		     if (((ReprintReady[FIPAddr-1]==True))||(IsReprint==False)){
    8ab6:	ef 2d       	mov	r30, r15
    8ab8:	f0 e0       	ldi	r31, 0x00	; 0
    8aba:	ee 5e       	subi	r30, 0xEE	; 238
    8abc:	fe 4f       	sbci	r31, 0xFE	; 254
    8abe:	80 81       	ld	r24, Z
    8ac0:	81 30       	cpi	r24, 0x01	; 1
    8ac2:	19 f0       	breq	.+6      	; 0x8aca <PrintStandalone+0x74>
    8ac4:	00 23       	and	r16, r16
    8ac6:	29 f0       	breq	.+10     	; 0x8ad2 <PrintStandalone+0x7c>
    8ac8:	0c c0       	rjmp	.+24     	; 0x8ae2 <PrintStandalone+0x8c>
			       if (IsReprint==True)IsReprintTicket=True;
    8aca:	01 30       	cpi	r16, 0x01	; 1
    8acc:	11 f4       	brne	.+4      	; 0x8ad2 <PrintStandalone+0x7c>
    8ace:	00 93 7f 01 	sts	0x017F, r16
			       GenerateStandaloneTransData(iPumpID,PProductID);		 			   
    8ad2:	8e 2d       	mov	r24, r14
    8ad4:	be 01       	movw	r22, r28
    8ad6:	6f 5f       	subi	r22, 0xFF	; 255
    8ad8:	7f 4f       	sbci	r23, 0xFF	; 255
    8ada:	0e 94 67 43 	call	0x86ce	; 0x86ce <GenerateStandaloneTransData>
    8ade:	81 e1       	ldi	r24, 0x11	; 17
    8ae0:	01 c0       	rjmp	.+2      	; 0x8ae4 <PrintStandalone+0x8e>
    8ae2:	82 e1       	ldi	r24, 0x12	; 18
			 }//else Result=PS_NO_DATA;
		 }
		 //else Result=PS_NO_DATA;    		    
	 }	
   return Result;
}
    8ae4:	26 96       	adiw	r28, 0x06	; 6
    8ae6:	0f b6       	in	r0, 0x3f	; 63
    8ae8:	f8 94       	cli
    8aea:	de bf       	out	0x3e, r29	; 62
    8aec:	0f be       	out	0x3f, r0	; 63
    8aee:	cd bf       	out	0x3d, r28	; 61
    8af0:	cf 91       	pop	r28
    8af2:	df 91       	pop	r29
    8af4:	1f 91       	pop	r17
    8af6:	0f 91       	pop	r16
    8af8:	ff 90       	pop	r15
    8afa:	ef 90       	pop	r14
    8afc:	08 95       	ret

00008afe <SendPrint>:
	 for(i=0;i<strlen(Source);i++){
	    Dest[i]=pgm_read_byte(&Source[i]);
	 }
}

void SendPrint(char xSend,char xSendLead){
    8afe:	1f 93       	push	r17
    8b00:	18 2f       	mov	r17, r24
static char zSend;     
	 if (xSend==0x19){
    8b02:	89 31       	cpi	r24, 0x19	; 25
    8b04:	59 f4       	brne	.+22     	; 0x8b1c <SendPrint+0x1e>
	     if (zSend==xSendLead)uart(_COM_PRINTER,1,xSendLead);
    8b06:	40 91 f6 01 	lds	r20, 0x01F6
    8b0a:	46 17       	cp	r20, r22
    8b0c:	19 f4       	brne	.+6      	; 0x8b14 <SendPrint+0x16>
    8b0e:	80 e0       	ldi	r24, 0x00	; 0
    8b10:	61 e0       	ldi	r22, 0x01	; 1
    8b12:	07 c0       	rjmp	.+14     	; 0x8b22 <SendPrint+0x24>
		 else uart(_COM_PRINTER,1,' ');	 
    8b14:	80 e0       	ldi	r24, 0x00	; 0
    8b16:	61 e0       	ldi	r22, 0x01	; 1
    8b18:	40 e2       	ldi	r20, 0x20	; 32
    8b1a:	03 c0       	rjmp	.+6      	; 0x8b22 <SendPrint+0x24>
	 } 
	 else uart(_COM_PRINTER,1,xSend);
    8b1c:	80 e0       	ldi	r24, 0x00	; 0
    8b1e:	61 e0       	ldi	r22, 0x01	; 1
    8b20:	41 2f       	mov	r20, r17
    8b22:	0e 94 bd a8 	call	0x1517a	; 0x1517a <uart>
	 zSend=xSend;
    8b26:	10 93 f6 01 	sts	0x01F6, r17
}
    8b2a:	1f 91       	pop	r17
    8b2c:	08 95       	ret

00008b2e <CarriegeReturn>:
	      break;	 
	 }
}

void CarriegeReturn(){
     uart(_COM_PRINTER, 1, 0x0D);     
    8b2e:	80 e0       	ldi	r24, 0x00	; 0
    8b30:	61 e0       	ldi	r22, 0x01	; 1
    8b32:	4d e0       	ldi	r20, 0x0D	; 13
    8b34:	0e 94 bd a8 	call	0x1517a	; 0x1517a <uart>
     uart(_COM_PRINTER, 1, 0x0A);
    8b38:	80 e0       	ldi	r24, 0x00	; 0
    8b3a:	61 e0       	ldi	r22, 0x01	; 1
    8b3c:	4a e0       	ldi	r20, 0x0A	; 10
    8b3e:	0e 94 bd a8 	call	0x1517a	; 0x1517a <uart>
}
    8b42:	08 95       	ret

00008b44 <InitPrinter>:
		 }
}

void InitPrinter(){
char PrinterType;
     PrinterType=eeprom_read_byte(&DefPrinterType);
    8b44:	80 e3       	ldi	r24, 0x30	; 48
    8b46:	90 e0       	ldi	r25, 0x00	; 0
    8b48:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
    //Custom Printer TG02
	//Density Lowest: 1D 7C 00
	if (PrinterType==PT_CUSTOM_TG02){
    8b4c:	81 30       	cpi	r24, 0x01	; 1
    8b4e:	71 f5       	brne	.+92     	; 0x8bac <InitPrinter+0x68>
		uart(_COM_PRINTER, 1, 0x1D);uart(_COM_PRINTER, 1, 0x7C);uart(_COM_PRINTER, 1, 0x00);
    8b50:	80 e0       	ldi	r24, 0x00	; 0
    8b52:	61 e0       	ldi	r22, 0x01	; 1
    8b54:	4d e1       	ldi	r20, 0x1D	; 29
    8b56:	0e 94 bd a8 	call	0x1517a	; 0x1517a <uart>
    8b5a:	80 e0       	ldi	r24, 0x00	; 0
    8b5c:	61 e0       	ldi	r22, 0x01	; 1
    8b5e:	4c e7       	ldi	r20, 0x7C	; 124
    8b60:	0e 94 bd a8 	call	0x1517a	; 0x1517a <uart>
    8b64:	80 e0       	ldi	r24, 0x00	; 0
    8b66:	61 e0       	ldi	r22, 0x01	; 1
    8b68:	40 e0       	ldi	r20, 0x00	; 0
    8b6a:	0e 94 bd a8 	call	0x1517a	; 0x1517a <uart>
		//Double Strike ON : 1B 47 01
		uart(_COM_PRINTER, 1, 0x1B);uart(_COM_PRINTER, 1, 0x47);uart(_COM_PRINTER, 1, 0x01);
    8b6e:	80 e0       	ldi	r24, 0x00	; 0
    8b70:	61 e0       	ldi	r22, 0x01	; 1
    8b72:	4b e1       	ldi	r20, 0x1B	; 27
    8b74:	0e 94 bd a8 	call	0x1517a	; 0x1517a <uart>
    8b78:	80 e0       	ldi	r24, 0x00	; 0
    8b7a:	61 e0       	ldi	r22, 0x01	; 1
    8b7c:	47 e4       	ldi	r20, 0x47	; 71
    8b7e:	0e 94 bd a8 	call	0x1517a	; 0x1517a <uart>
    8b82:	80 e0       	ldi	r24, 0x00	; 0
    8b84:	61 e0       	ldi	r22, 0x01	; 1
    8b86:	41 e0       	ldi	r20, 0x01	; 1
    8b88:	0e 94 bd a8 	call	0x1517a	; 0x1517a <uart>
		//Font Setting: 1D 21 01
		uart(_COM_PRINTER, 1, 0x1D);uart(_COM_PRINTER, 1, 0x21);uart(_COM_PRINTER, 1, 0x01);   
    8b8c:	80 e0       	ldi	r24, 0x00	; 0
    8b8e:	61 e0       	ldi	r22, 0x01	; 1
    8b90:	4d e1       	ldi	r20, 0x1D	; 29
    8b92:	0e 94 bd a8 	call	0x1517a	; 0x1517a <uart>
    8b96:	80 e0       	ldi	r24, 0x00	; 0
    8b98:	61 e0       	ldi	r22, 0x01	; 1
    8b9a:	41 e2       	ldi	r20, 0x21	; 33
    8b9c:	0e 94 bd a8 	call	0x1517a	; 0x1517a <uart>
    8ba0:	80 e0       	ldi	r24, 0x00	; 0
    8ba2:	61 e0       	ldi	r22, 0x01	; 1
    8ba4:	41 e0       	ldi	r20, 0x01	; 1
    8ba6:	0e 94 bd a8 	call	0x1517a	; 0x1517a <uart>
    8baa:	08 95       	ret
		}
    else
	if (PrinterType==PT_CUSTOM_CUBE){
    8bac:	82 30       	cpi	r24, 0x02	; 2
    8bae:	69 f5       	brne	.+90     	; 0x8c0a <InitPrinter+0xc6>
        //Print Density 0%
		uart(_COM_PRINTER, 1, 0x1D);uart(_COM_PRINTER, 1, 0x7C);uart(_COM_PRINTER, 1, 0x04);
    8bb0:	80 e0       	ldi	r24, 0x00	; 0
    8bb2:	61 e0       	ldi	r22, 0x01	; 1
    8bb4:	4d e1       	ldi	r20, 0x1D	; 29
    8bb6:	0e 94 bd a8 	call	0x1517a	; 0x1517a <uart>
    8bba:	80 e0       	ldi	r24, 0x00	; 0
    8bbc:	61 e0       	ldi	r22, 0x01	; 1
    8bbe:	4c e7       	ldi	r20, 0x7C	; 124
    8bc0:	0e 94 bd a8 	call	0x1517a	; 0x1517a <uart>
    8bc4:	80 e0       	ldi	r24, 0x00	; 0
    8bc6:	61 e0       	ldi	r22, 0x01	; 1
    8bc8:	44 e0       	ldi	r20, 0x04	; 4
    8bca:	0e 94 bd a8 	call	0x1517a	; 0x1517a <uart>
		//Double Strike OFF : 1B 47 00
		uart(_COM_PRINTER, 1, 0x1B);uart(_COM_PRINTER, 1, 0x47);uart(_COM_PRINTER, 1, 0x00);
    8bce:	80 e0       	ldi	r24, 0x00	; 0
    8bd0:	61 e0       	ldi	r22, 0x01	; 1
    8bd2:	4b e1       	ldi	r20, 0x1B	; 27
    8bd4:	0e 94 bd a8 	call	0x1517a	; 0x1517a <uart>
    8bd8:	80 e0       	ldi	r24, 0x00	; 0
    8bda:	61 e0       	ldi	r22, 0x01	; 1
    8bdc:	47 e4       	ldi	r20, 0x47	; 71
    8bde:	0e 94 bd a8 	call	0x1517a	; 0x1517a <uart>
    8be2:	80 e0       	ldi	r24, 0x00	; 0
    8be4:	61 e0       	ldi	r22, 0x01	; 1
    8be6:	40 e0       	ldi	r20, 0x00	; 0
    8be8:	0e 94 bd a8 	call	0x1517a	; 0x1517a <uart>
		//Font Setting: 1D 21 01
		uart(_COM_PRINTER, 1, 0x1D);uart(_COM_PRINTER, 1, 0x21);uart(_COM_PRINTER, 1, 0x00);   
    8bec:	80 e0       	ldi	r24, 0x00	; 0
    8bee:	61 e0       	ldi	r22, 0x01	; 1
    8bf0:	4d e1       	ldi	r20, 0x1D	; 29
    8bf2:	0e 94 bd a8 	call	0x1517a	; 0x1517a <uart>
    8bf6:	80 e0       	ldi	r24, 0x00	; 0
    8bf8:	61 e0       	ldi	r22, 0x01	; 1
    8bfa:	41 e2       	ldi	r20, 0x21	; 33
    8bfc:	0e 94 bd a8 	call	0x1517a	; 0x1517a <uart>
    8c00:	80 e0       	ldi	r24, 0x00	; 0
    8c02:	61 e0       	ldi	r22, 0x01	; 1
    8c04:	40 e0       	ldi	r20, 0x00	; 0
    8c06:	0e 94 bd a8 	call	0x1517a	; 0x1517a <uart>
    8c0a:	08 95       	ret

00008c0c <PrintNormalHeight>:
		 }
}

void PrintNormalHeight(){
char PrinterType;
     PrinterType=eeprom_read_byte(&DefPrinterType);
    8c0c:	80 e3       	ldi	r24, 0x30	; 48
    8c0e:	90 e0       	ldi	r25, 0x00	; 0
    8c10:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
	 if (PrinterType==PT_CUSTOM_CUBE){
    8c14:	82 30       	cpi	r24, 0x02	; 2
    8c16:	79 f4       	brne	.+30     	; 0x8c36 <PrintNormalHeight+0x2a>
	     uart(_COM_PRINTER, 1, 0x1D);uart(_COM_PRINTER, 1, 0x21);uart(_COM_PRINTER, 1, 0x00);
    8c18:	80 e0       	ldi	r24, 0x00	; 0
    8c1a:	61 e0       	ldi	r22, 0x01	; 1
    8c1c:	4d e1       	ldi	r20, 0x1D	; 29
    8c1e:	0e 94 bd a8 	call	0x1517a	; 0x1517a <uart>
    8c22:	80 e0       	ldi	r24, 0x00	; 0
    8c24:	61 e0       	ldi	r22, 0x01	; 1
    8c26:	41 e2       	ldi	r20, 0x21	; 33
    8c28:	0e 94 bd a8 	call	0x1517a	; 0x1517a <uart>
    8c2c:	80 e0       	ldi	r24, 0x00	; 0
    8c2e:	61 e0       	ldi	r22, 0x01	; 1
    8c30:	40 e0       	ldi	r20, 0x00	; 0
    8c32:	0e 94 bd a8 	call	0x1517a	; 0x1517a <uart>
    8c36:	08 95       	ret

00008c38 <PrintDoubleHeight>:

//void SetPrinterCharacterWidth

void PrintDoubleHeight(){
char PrinterType;
     PrinterType=eeprom_read_byte(&DefPrinterType);
    8c38:	80 e3       	ldi	r24, 0x30	; 48
    8c3a:	90 e0       	ldi	r25, 0x00	; 0
    8c3c:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
	 if (PrinterType==PT_CUSTOM_CUBE){
    8c40:	82 30       	cpi	r24, 0x02	; 2
    8c42:	79 f4       	brne	.+30     	; 0x8c62 <PrintDoubleHeight+0x2a>
	     uart(_COM_PRINTER, 1, 0x1D);uart(_COM_PRINTER, 1, 0x21);uart(_COM_PRINTER, 1, 0x01);
    8c44:	80 e0       	ldi	r24, 0x00	; 0
    8c46:	61 e0       	ldi	r22, 0x01	; 1
    8c48:	4d e1       	ldi	r20, 0x1D	; 29
    8c4a:	0e 94 bd a8 	call	0x1517a	; 0x1517a <uart>
    8c4e:	80 e0       	ldi	r24, 0x00	; 0
    8c50:	61 e0       	ldi	r22, 0x01	; 1
    8c52:	41 e2       	ldi	r20, 0x21	; 33
    8c54:	0e 94 bd a8 	call	0x1517a	; 0x1517a <uart>
    8c58:	80 e0       	ldi	r24, 0x00	; 0
    8c5a:	61 e0       	ldi	r22, 0x01	; 1
    8c5c:	41 e0       	ldi	r20, 0x01	; 1
    8c5e:	0e 94 bd a8 	call	0x1517a	; 0x1517a <uart>
    8c62:	08 95       	ret

00008c64 <PaperCut>:

	 return Result;
}


void PaperCut(){
    8c64:	1f 93       	push	r17
     char CutType;
     CutType= eeprom_read_byte(&DefPrintAutoCut);
    8c66:	83 e3       	ldi	r24, 0x33	; 51
    8c68:	90 e0       	ldi	r25, 0x00	; 0
    8c6a:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
    8c6e:	18 2f       	mov	r17, r24
     uart(_COM_PRINTER, 1, 0x1B);
    8c70:	80 e0       	ldi	r24, 0x00	; 0
    8c72:	61 e0       	ldi	r22, 0x01	; 1
    8c74:	4b e1       	ldi	r20, 0x1B	; 27
    8c76:	0e 94 bd a8 	call	0x1517a	; 0x1517a <uart>
	 if(CutType== 1) { uart(_COM_PRINTER, 1, 0x6D);}
    8c7a:	11 30       	cpi	r17, 0x01	; 1
    8c7c:	21 f4       	brne	.+8      	; 0x8c86 <PaperCut+0x22>
    8c7e:	80 e0       	ldi	r24, 0x00	; 0
    8c80:	61 e0       	ldi	r22, 0x01	; 1
    8c82:	4d e6       	ldi	r20, 0x6D	; 109
    8c84:	05 c0       	rjmp	.+10     	; 0x8c90 <PaperCut+0x2c>
	 if(CutType== 2) {uart(_COM_PRINTER, 1, 0x69);}
    8c86:	12 30       	cpi	r17, 0x02	; 2
    8c88:	29 f4       	brne	.+10     	; 0x8c94 <PaperCut+0x30>
    8c8a:	80 e0       	ldi	r24, 0x00	; 0
    8c8c:	61 e0       	ldi	r22, 0x01	; 1
    8c8e:	49 e6       	ldi	r20, 0x69	; 105
    8c90:	0e 94 bd a8 	call	0x1517a	; 0x1517a <uart>

}
    8c94:	1f 91       	pop	r17
    8c96:	08 95       	ret

00008c98 <procMessage11>:
}




void procMessage11(){
    8c98:	6f 92       	push	r6
    8c9a:	7f 92       	push	r7
    8c9c:	8f 92       	push	r8
    8c9e:	9f 92       	push	r9
    8ca0:	af 92       	push	r10
    8ca2:	bf 92       	push	r11
    8ca4:	cf 92       	push	r12
    8ca6:	df 92       	push	r13
    8ca8:	ef 92       	push	r14
    8caa:	ff 92       	push	r15
    8cac:	0f 93       	push	r16
    8cae:	1f 93       	push	r17
    8cb0:	df 93       	push	r29
    8cb2:	cf 93       	push	r28
    8cb4:	cd b7       	in	r28, 0x3d	; 61
    8cb6:	de b7       	in	r29, 0x3e	; 62
    8cb8:	c0 59       	subi	r28, 0x90	; 144
    8cba:	d0 40       	sbci	r29, 0x00	; 0
    8cbc:	0f b6       	in	r0, 0x3f	; 63
    8cbe:	f8 94       	cli
    8cc0:	de bf       	out	0x3e, r29	; 62
    8cc2:	0f be       	out	0x3f, r0	; 63
    8cc4:	cd bf       	out	0x3d, r28	; 61
    8cc6:	20 e0       	ldi	r18, 0x00	; 0
    8cc8:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8cca:	ae 01       	movw	r20, r28
    8ccc:	46 5f       	subi	r20, 0xF6	; 246
    8cce:	5f 4f       	sbci	r21, 0xFF	; 255
    8cd0:	fa 01       	movw	r30, r20
    8cd2:	e2 0f       	add	r30, r18
    8cd4:	f3 1f       	adc	r31, r19
    8cd6:	d9 01       	movw	r26, r18
    8cd8:	a1 56       	subi	r26, 0x61	; 97
    8cda:	b6 4f       	sbci	r27, 0xF6	; 246
    8cdc:	9b 96       	adiw	r26, 0x2b	; 43
    8cde:	8c 91       	ld	r24, X
    8ce0:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8ce2:	2f 5f       	subi	r18, 0xFF	; 255
    8ce4:	3f 4f       	sbci	r19, 0xFF	; 255
    8ce6:	2a 30       	cpi	r18, 0x0A	; 10
    8ce8:	31 05       	cpc	r19, r1
    8cea:	91 f7       	brne	.-28     	; 0x8cd0 <procMessage11+0x38>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8cec:	fa 01       	movw	r30, r20
    8cee:	12 86       	std	Z+10, r1	; 0x0a
     char buffHeader[50],strReadEEPROM[50];
	 char strProductName[13],strProductPrice[9],strTime[12],strDate[10];

     //Update Datetime
	 StrPosCopy(rcv_trans,strDate,43,10);//2004/09/14 19:05:36
	 FormatDate(DATE_SHORT_YEAR,strDate);
    8cf0:	81 e0       	ldi	r24, 0x01	; 1
    8cf2:	ba 01       	movw	r22, r20
    8cf4:	0e 94 ee 24 	call	0x49dc	; 0x49dc <FormatDate>
    8cf8:	20 e0       	ldi	r18, 0x00	; 0
    8cfa:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8cfc:	ae 01       	movw	r20, r28
    8cfe:	4c 5e       	subi	r20, 0xEC	; 236
    8d00:	5f 4f       	sbci	r21, 0xFF	; 255
    8d02:	fa 01       	movw	r30, r20
    8d04:	e2 0f       	add	r30, r18
    8d06:	f3 1f       	adc	r31, r19
    8d08:	d9 01       	movw	r26, r18
    8d0a:	a1 56       	subi	r26, 0x61	; 97
    8d0c:	b6 4f       	sbci	r27, 0xF6	; 246
    8d0e:	d6 96       	adiw	r26, 0x36	; 54
    8d10:	8c 91       	ld	r24, X
    8d12:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8d14:	2f 5f       	subi	r18, 0xFF	; 255
    8d16:	3f 4f       	sbci	r19, 0xFF	; 255
    8d18:	28 30       	cpi	r18, 0x08	; 8
    8d1a:	31 05       	cpc	r19, r1
    8d1c:	91 f7       	brne	.-28     	; 0x8d02 <procMessage11+0x6a>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8d1e:	1c 8e       	std	Y+28, r1	; 0x1c

     //Update Datetime
	 StrPosCopy(rcv_trans,strDate,43,10);//2004/09/14 19:05:36
	 FormatDate(DATE_SHORT_YEAR,strDate);
	 StrPosCopy(rcv_trans,strTime,54,8);
	 _datetime(_DATETIME_WRITE,strDate,strTime);
    8d20:	81 e0       	ldi	r24, 0x01	; 1
    8d22:	be 01       	movw	r22, r28
    8d24:	66 5f       	subi	r22, 0xF6	; 246
    8d26:	7f 4f       	sbci	r23, 0xFF	; 255
    8d28:	0e 94 b9 a7 	call	0x14f72	; 0x14f72 <_datetime>
    8d2c:	08 e2       	ldi	r16, 0x28	; 40
    8d2e:	12 e0       	ldi	r17, 0x02	; 2
    8d30:	7d ed       	ldi	r23, 0xDD	; 221
    8d32:	e7 2e       	mov	r14, r23
    8d34:	79 e0       	ldi	r23, 0x09	; 9
    8d36:	f7 2e       	mov	r15, r23
    8d38:	6d e2       	ldi	r22, 0x2D	; 45
    8d3a:	c6 2e       	mov	r12, r22
    8d3c:	d1 2c       	mov	r13, r1
    8d3e:	cc 0e       	add	r12, r28
    8d40:	dd 1e       	adc	r13, r29
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8d42:	58 e2       	ldi	r21, 0x28	; 40
    8d44:	a5 2e       	mov	r10, r21
    8d46:	b1 2c       	mov	r11, r1
    8d48:	ac 0c       	add	r10, r12
    8d4a:	bd 1c       	adc	r11, r13
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8d4c:	45 e5       	ldi	r20, 0x55	; 85
    8d4e:	64 2e       	mov	r6, r20
    8d50:	71 2c       	mov	r7, r1
    8d52:	6c 0e       	add	r6, r28
    8d54:	7d 1e       	adc	r7, r29
	      
	 //HeaderFooter
	 for(i=0;i<10;i++){
	     FillChar(buffHeader,0,sizeof(buffHeader));   
         StrPosCopy(rcv_trans,buffHeader,62+(i*40),40);
		 eeprom_read_block((void*) &strReadEEPROM, (const void*) &DefHeaderFooter[i],41);
    8d56:	3f e5       	ldi	r19, 0x5F	; 95
    8d58:	83 2e       	mov	r8, r19
    8d5a:	91 2c       	mov	r9, r1
    8d5c:	8c 0e       	add	r8, r28
    8d5e:	9d 1e       	adc	r9, r29

     //Update Datetime
	 StrPosCopy(rcv_trans,strDate,43,10);//2004/09/14 19:05:36
	 FormatDate(DATE_SHORT_YEAR,strDate);
	 StrPosCopy(rcv_trans,strTime,54,8);
	 _datetime(_DATETIME_WRITE,strDate,strTime);
    8d60:	f6 01       	movw	r30, r12
    8d62:	d7 01       	movw	r26, r14
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8d64:	8d 91       	ld	r24, X+
    8d66:	81 93       	st	Z+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8d68:	ea 15       	cp	r30, r10
    8d6a:	fb 05       	cpc	r31, r11
    8d6c:	d9 f7       	brne	.-10     	; 0x8d64 <procMessage11+0xcc>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8d6e:	f3 01       	movw	r30, r6
    8d70:	10 82       	st	Z, r1
	      
	 //HeaderFooter
	 for(i=0;i<10;i++){
	     FillChar(buffHeader,0,sizeof(buffHeader));   
         StrPosCopy(rcv_trans,buffHeader,62+(i*40),40);
		 eeprom_read_block((void*) &strReadEEPROM, (const void*) &DefHeaderFooter[i],41);
    8d72:	c4 01       	movw	r24, r8
    8d74:	b8 01       	movw	r22, r16
    8d76:	49 e2       	ldi	r20, 0x29	; 41
    8d78:	50 e0       	ldi	r21, 0x00	; 0
    8d7a:	0e 94 1b ad 	call	0x15a36	; 0x15a36 <__eerd_block_m128>
	     if (strcmp(strReadEEPROM,buffHeader)!=0)
    8d7e:	c4 01       	movw	r24, r8
    8d80:	b6 01       	movw	r22, r12
    8d82:	0e 94 d3 aa 	call	0x155a6	; 0x155a6 <strcmp>
    8d86:	00 97       	sbiw	r24, 0x00	; 0
    8d88:	31 f0       	breq	.+12     	; 0x8d96 <procMessage11+0xfe>
		     eeprom_write_block((const void*) &buffHeader, (void*) &DefHeaderFooter[i], 41);
    8d8a:	c6 01       	movw	r24, r12
    8d8c:	b8 01       	movw	r22, r16
    8d8e:	49 e2       	ldi	r20, 0x29	; 41
    8d90:	50 e0       	ldi	r21, 0x00	; 0
    8d92:	0e 94 33 ad 	call	0x15a66	; 0x15a66 <__eewr_block_m128>
    8d96:	07 5d       	subi	r16, 0xD7	; 215
    8d98:	1f 4f       	sbci	r17, 0xFF	; 255
    8d9a:	88 e2       	ldi	r24, 0x28	; 40
    8d9c:	90 e0       	ldi	r25, 0x00	; 0
    8d9e:	e8 0e       	add	r14, r24
    8da0:	f9 1e       	adc	r15, r25
	 FormatDate(DATE_SHORT_YEAR,strDate);
	 StrPosCopy(rcv_trans,strTime,54,8);
	 _datetime(_DATETIME_WRITE,strDate,strTime);
	      
	 //HeaderFooter
	 for(i=0;i<10;i++){
    8da2:	93 e0       	ldi	r25, 0x03	; 3
    8da4:	02 3c       	cpi	r16, 0xC2	; 194
    8da6:	19 07       	cpc	r17, r25
    8da8:	d9 f6       	brne	.-74     	; 0x8d60 <procMessage11+0xc8>
    8daa:	0c eb       	ldi	r16, 0xBC	; 188
    8dac:	10 e0       	ldi	r17, 0x00	; 0
    8dae:	25 e8       	ldi	r18, 0x85	; 133
    8db0:	e2 2e       	mov	r14, r18
    8db2:	2b e0       	ldi	r18, 0x0B	; 11
    8db4:	f2 2e       	mov	r15, r18
    8db6:	90 e2       	ldi	r25, 0x20	; 32
    8db8:	c9 2e       	mov	r12, r25
    8dba:	d1 2c       	mov	r13, r1
    8dbc:	cc 0e       	add	r12, r28
    8dbe:	dd 1e       	adc	r13, r29
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8dc0:	8c e2       	ldi	r24, 0x2C	; 44
    8dc2:	88 2e       	mov	r8, r24
    8dc4:	91 2c       	mov	r9, r1
    8dc6:	8c 0e       	add	r8, r28
    8dc8:	9d 1e       	adc	r9, r29
	 */
	 //ProductName
	 for(i=0;i<6;i++){
	    StrPosCopy(rcv_trans,strProductName,(486+(i*12)),12);
		RemSpaceLag(strProductName);
		eeprom_read_block((void*) &strReadEEPROM, (const void*) &DefProductName[i],12);
    8dca:	bf e5       	ldi	r27, 0x5F	; 95
    8dcc:	ab 2e       	mov	r10, r27
    8dce:	b1 2c       	mov	r11, r1
    8dd0:	ac 0e       	add	r10, r28
    8dd2:	bd 1e       	adc	r11, r29
	 FormatDate(DATE_SHORT_YEAR,strDate);
	 StrPosCopy(rcv_trans,strTime,54,8);
	 _datetime(_DATETIME_WRITE,strDate,strTime);
	      
	 //HeaderFooter
	 for(i=0;i<10;i++){
    8dd4:	f6 01       	movw	r30, r12
    8dd6:	d7 01       	movw	r26, r14
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8dd8:	8d 91       	ld	r24, X+
    8dda:	81 93       	st	Z+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8ddc:	e8 15       	cp	r30, r8
    8dde:	f9 05       	cpc	r31, r9
    8de0:	d9 f7       	brne	.-10     	; 0x8dd8 <procMessage11+0x140>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8de2:	1c a6       	std	Y+44, r1	; 0x2c
     eeprom_write_block((const void*) &buffHeader, (void*) &DefHeaderFooter[9], 40);
	 */
	 //ProductName
	 for(i=0;i<6;i++){
	    StrPosCopy(rcv_trans,strProductName,(486+(i*12)),12);
		RemSpaceLag(strProductName);
    8de4:	c6 01       	movw	r24, r12
    8de6:	0e 94 d2 25 	call	0x4ba4	; 0x4ba4 <RemSpaceLag>
		eeprom_read_block((void*) &strReadEEPROM, (const void*) &DefProductName[i],12);
    8dea:	c5 01       	movw	r24, r10
    8dec:	b8 01       	movw	r22, r16
    8dee:	4c e0       	ldi	r20, 0x0C	; 12
    8df0:	50 e0       	ldi	r21, 0x00	; 0
    8df2:	0e 94 1b ad 	call	0x15a36	; 0x15a36 <__eerd_block_m128>
		if (strcmp(strReadEEPROM,strProductName)!=0)
    8df6:	c5 01       	movw	r24, r10
    8df8:	b6 01       	movw	r22, r12
    8dfa:	0e 94 d3 aa 	call	0x155a6	; 0x155a6 <strcmp>
    8dfe:	00 97       	sbiw	r24, 0x00	; 0
    8e00:	31 f0       	breq	.+12     	; 0x8e0e <procMessage11+0x176>
		    eeprom_write_block((const void*) &strProductName, (void*) &DefProductName[i], 12);
    8e02:	c6 01       	movw	r24, r12
    8e04:	b8 01       	movw	r22, r16
    8e06:	4c e0       	ldi	r20, 0x0C	; 12
    8e08:	50 e0       	ldi	r21, 0x00	; 0
    8e0a:	0e 94 33 ad 	call	0x15a66	; 0x15a66 <__eewr_block_m128>
    8e0e:	03 5f       	subi	r16, 0xF3	; 243
    8e10:	1f 4f       	sbci	r17, 0xFF	; 255
    8e12:	ec e0       	ldi	r30, 0x0C	; 12
    8e14:	f0 e0       	ldi	r31, 0x00	; 0
    8e16:	ee 0e       	add	r14, r30
    8e18:	ff 1e       	adc	r15, r31
     eeprom_write_block((const void*) &buffHeader, (void*) &DefHeaderFooter[8], 40);
     StrPosCopy(rcv_trans,buffHeader,422,40);
     eeprom_write_block((const void*) &buffHeader, (void*) &DefHeaderFooter[9], 40);
	 */
	 //ProductName
	 for(i=0;i<6;i++){
    8e1a:	f1 e0       	ldi	r31, 0x01	; 1
    8e1c:	0a 30       	cpi	r16, 0x0A	; 10
    8e1e:	1f 07       	cpc	r17, r31
    8e20:	c9 f6       	brne	.-78     	; 0x8dd4 <procMessage11+0x13c>
    8e22:	06 e8       	ldi	r16, 0x86	; 134
    8e24:	10 e0       	ldi	r17, 0x00	; 0
    8e26:	ad ec       	ldi	r26, 0xCD	; 205
    8e28:	ea 2e       	mov	r14, r26
    8e2a:	ab e0       	ldi	r26, 0x0B	; 11
    8e2c:	fa 2e       	mov	r15, r26
    8e2e:	6e 01       	movw	r12, r28
    8e30:	08 94       	sec
    8e32:	c1 1c       	adc	r12, r1
    8e34:	d1 1c       	adc	r13, r1
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8e36:	f9 e0       	ldi	r31, 0x09	; 9
    8e38:	8f 2e       	mov	r8, r31
    8e3a:	91 2c       	mov	r9, r1
    8e3c:	8c 0e       	add	r8, r28
    8e3e:	9d 1e       	adc	r9, r29
        StrPosCopy(rcv_trans,strProductPrice,(558+(i*8)),8);
		RemSpaceLag(strProductPrice);
		RemZeroLead(strProductPrice);
		RemDecimal(strProductPrice);

		eeprom_read_block((void*) &strReadEEPROM, (const void*) &DefProductPrice[i], 8);
    8e40:	ef e5       	ldi	r30, 0x5F	; 95
    8e42:	ae 2e       	mov	r10, r30
    8e44:	b1 2c       	mov	r11, r1
    8e46:	ac 0e       	add	r10, r28
    8e48:	bd 1e       	adc	r11, r29
     eeprom_write_block((const void*) &buffHeader, (void*) &DefHeaderFooter[8], 40);
     StrPosCopy(rcv_trans,buffHeader,422,40);
     eeprom_write_block((const void*) &buffHeader, (void*) &DefHeaderFooter[9], 40);
	 */
	 //ProductName
	 for(i=0;i<6;i++){
    8e4a:	f6 01       	movw	r30, r12
    8e4c:	d7 01       	movw	r26, r14
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    8e4e:	8d 91       	ld	r24, X+
    8e50:	81 93       	st	Z+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    8e52:	e8 15       	cp	r30, r8
    8e54:	f9 05       	cpc	r31, r9
    8e56:	d9 f7       	brne	.-10     	; 0x8e4e <procMessage11+0x1b6>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    8e58:	19 86       	std	Y+9, r1	; 0x09
		    eeprom_write_block((const void*) &strProductName, (void*) &DefProductName[i], 12);
	 }
	 //ProductPrice
	 for(i=0;i<6;i++){
        StrPosCopy(rcv_trans,strProductPrice,(558+(i*8)),8);
		RemSpaceLag(strProductPrice);
    8e5a:	c6 01       	movw	r24, r12
    8e5c:	0e 94 d2 25 	call	0x4ba4	; 0x4ba4 <RemSpaceLag>
		RemZeroLead(strProductPrice);
    8e60:	c6 01       	movw	r24, r12
    8e62:	0e 94 3f 25 	call	0x4a7e	; 0x4a7e <RemZeroLead>
		RemDecimal(strProductPrice);
    8e66:	c6 01       	movw	r24, r12
    8e68:	0e 94 3d 24 	call	0x487a	; 0x487a <RemDecimal>

		eeprom_read_block((void*) &strReadEEPROM, (const void*) &DefProductPrice[i], 8);
    8e6c:	c5 01       	movw	r24, r10
    8e6e:	b8 01       	movw	r22, r16
    8e70:	48 e0       	ldi	r20, 0x08	; 8
    8e72:	50 e0       	ldi	r21, 0x00	; 0
    8e74:	0e 94 1b ad 	call	0x15a36	; 0x15a36 <__eerd_block_m128>
		if (strcmp(strReadEEPROM,strProductPrice)!=0)
    8e78:	c5 01       	movw	r24, r10
    8e7a:	b6 01       	movw	r22, r12
    8e7c:	0e 94 d3 aa 	call	0x155a6	; 0x155a6 <strcmp>
    8e80:	00 97       	sbiw	r24, 0x00	; 0
    8e82:	31 f0       	breq	.+12     	; 0x8e90 <procMessage11+0x1f8>
		    eeprom_write_block((const void*) &strProductPrice, (void*) &DefProductPrice[i], 8);
    8e84:	c6 01       	movw	r24, r12
    8e86:	b8 01       	movw	r22, r16
    8e88:	48 e0       	ldi	r20, 0x08	; 8
    8e8a:	50 e0       	ldi	r21, 0x00	; 0
    8e8c:	0e 94 33 ad 	call	0x15a66	; 0x15a66 <__eewr_block_m128>
    8e90:	07 5f       	subi	r16, 0xF7	; 247
    8e92:	1f 4f       	sbci	r17, 0xFF	; 255
    8e94:	88 e0       	ldi	r24, 0x08	; 8
    8e96:	90 e0       	ldi	r25, 0x00	; 0
    8e98:	e8 0e       	add	r14, r24
    8e9a:	f9 1e       	adc	r15, r25
		eeprom_read_block((void*) &strReadEEPROM, (const void*) &DefProductName[i],12);
		if (strcmp(strReadEEPROM,strProductName)!=0)
		    eeprom_write_block((const void*) &strProductName, (void*) &DefProductName[i], 12);
	 }
	 //ProductPrice
	 for(i=0;i<6;i++){
    8e9c:	90 e0       	ldi	r25, 0x00	; 0
    8e9e:	0c 3b       	cpi	r16, 0xBC	; 188
    8ea0:	19 07       	cpc	r17, r25
    8ea2:	99 f6       	brne	.-90     	; 0x8e4a <procMessage11+0x1b2>

		eeprom_read_block((void*) &strReadEEPROM, (const void*) &DefProductPrice[i], 8);
		if (strcmp(strReadEEPROM,strProductPrice)!=0)
		    eeprom_write_block((const void*) &strProductPrice, (void*) &DefProductPrice[i], 8);
	 }
}
    8ea4:	c0 57       	subi	r28, 0x70	; 112
    8ea6:	df 4f       	sbci	r29, 0xFF	; 255
    8ea8:	0f b6       	in	r0, 0x3f	; 63
    8eaa:	f8 94       	cli
    8eac:	de bf       	out	0x3e, r29	; 62
    8eae:	0f be       	out	0x3f, r0	; 63
    8eb0:	cd bf       	out	0x3d, r28	; 61
    8eb2:	cf 91       	pop	r28
    8eb4:	df 91       	pop	r29
    8eb6:	1f 91       	pop	r17
    8eb8:	0f 91       	pop	r16
    8eba:	ff 90       	pop	r15
    8ebc:	ef 90       	pop	r14
    8ebe:	df 90       	pop	r13
    8ec0:	cf 90       	pop	r12
    8ec2:	bf 90       	pop	r11
    8ec4:	af 90       	pop	r10
    8ec6:	9f 90       	pop	r9
    8ec8:	8f 90       	pop	r8
    8eca:	7f 90       	pop	r7
    8ecc:	6f 90       	pop	r6
    8ece:	08 95       	ret

00008ed0 <ValidateRestoreCode>:
	     strKeyStamp[i]='0'+GeniusCalc(G_MULTY,(sSeed[i]-'0'),(sGCode[i]-'0'));		 
	 }strKeyStamp[strlen(sGCode)]=0;
     WrapCode(strKeyStamp);
}

char ValidateRestoreCode(char *sKeyStamp, char *sRestoreCode){//==RC_VALID
    8ed0:	ef 92       	push	r14
    8ed2:	ff 92       	push	r15
    8ed4:	0f 93       	push	r16
    8ed6:	1f 93       	push	r17
    8ed8:	cf 93       	push	r28
    8eda:	df 93       	push	r29
    8edc:	ec 01       	movw	r28, r24
    8ede:	7b 01       	movw	r14, r22

	 //  KeyStamp: [6]5585577 WrapCode6x
	 //sprintf_P(strSend,PSTR("KeyStamp:%s"),sKeyStamp);
	 //uart_print(1,1,strSend);

	 nSum=sKeyStamp[0]-'0';
    8ee0:	08 81       	ld	r16, Y
    8ee2:	00 53       	subi	r16, 0x30	; 48
    8ee4:	10 e0       	ldi	r17, 0x00	; 0
    8ee6:	04 c0       	rjmp	.+8      	; 0x8ef0 <ValidateRestoreCode+0x20>
	 for (i=0;i<nSum;i++){
         WrapCode(sKeyStamp);
    8ee8:	ce 01       	movw	r24, r28
    8eea:	0e 94 ed 30 	call	0x61da	; 0x61da <WrapCode>
	 //  KeyStamp: [6]5585577 WrapCode6x
	 //sprintf_P(strSend,PSTR("KeyStamp:%s"),sKeyStamp);
	 //uart_print(1,1,strSend);

	 nSum=sKeyStamp[0]-'0';
	 for (i=0;i<nSum;i++){
    8eee:	1f 5f       	subi	r17, 0xFF	; 255
    8ef0:	10 17       	cp	r17, r16
    8ef2:	d0 f3       	brcs	.-12     	; 0x8ee8 <ValidateRestoreCode+0x18>
	 //uart_print(1,1,strSend);
     
	 //sprintf_P(strSend,PSTR("WrapStamp:%s"),sRestoreCode);
	 //uart_print(1,1,strSend);

	 if (strcmp(sKeyStamp,sRestoreCode)==0)
    8ef4:	ce 01       	movw	r24, r28
    8ef6:	b7 01       	movw	r22, r14
    8ef8:	0e 94 d3 aa 	call	0x155a6	; 0x155a6 <strcmp>
    8efc:	00 97       	sbiw	r24, 0x00	; 0
    8efe:	11 f0       	breq	.+4      	; 0x8f04 <ValidateRestoreCode+0x34>
    8f00:	82 e0       	ldi	r24, 0x02	; 2
    8f02:	01 c0       	rjmp	.+2      	; 0x8f06 <ValidateRestoreCode+0x36>
    8f04:	81 e0       	ldi	r24, 0x01	; 1
	     Result=RC_VALID;	 
     else Result=RC_INVALID;

   return Result;
}
    8f06:	df 91       	pop	r29
    8f08:	cf 91       	pop	r28
    8f0a:	1f 91       	pop	r17
    8f0c:	0f 91       	pop	r16
    8f0e:	ff 90       	pop	r15
    8f10:	ef 90       	pop	r14
    8f12:	08 95       	ret

00008f14 <ValidateGeniusCode>:
          }
	 }sTemp[iAdd]=0;
	 sprintf_P(strSource,PSTR("%s"),sTemp);
}

char ValidateGeniusCode(char *sDate, char *sGenCode){//==GC_VALID
    8f14:	ef 92       	push	r14
    8f16:	ff 92       	push	r15
    8f18:	0f 93       	push	r16
    8f1a:	1f 93       	push	r17
    8f1c:	df 93       	push	r29
    8f1e:	cf 93       	push	r28
    8f20:	cd b7       	in	r28, 0x3d	; 61
    8f22:	de b7       	in	r29, 0x3e	; 62
    8f24:	2a 97       	sbiw	r28, 0x0a	; 10
    8f26:	0f b6       	in	r0, 0x3f	; 63
    8f28:	f8 94       	cli
    8f2a:	de bf       	out	0x3e, r29	; 62
    8f2c:	0f be       	out	0x3f, r0	; 63
    8f2e:	cd bf       	out	0x3d, r28	; 61
    8f30:	7b 01       	movw	r14, r22

         #ifdef DEBUG_GENIUS_CODE
		 sprintf_P(strSend,PSTR("[%s]"),sGenCode); 
         uart_print(1,1,strSend);
		 #endif
	 if (strlen(sGenCode)==8){//Length musti  8
    8f32:	fb 01       	movw	r30, r22
    8f34:	01 90       	ld	r0, Z+
    8f36:	00 20       	and	r0, r0
    8f38:	e9 f7       	brne	.-6      	; 0x8f34 <ValidateGeniusCode+0x20>
    8f3a:	39 97       	sbiw	r30, 0x09	; 9
    8f3c:	e6 17       	cp	r30, r22
    8f3e:	f7 07       	cpc	r31, r23
    8f40:	11 f0       	breq	.+4      	; 0x8f46 <ValidateGeniusCode+0x32>
    8f42:	80 e0       	ldi	r24, 0x00	; 0
    8f44:	11 c0       	rjmp	.+34     	; 0x8f68 <ValidateGeniusCode+0x54>
	     //sDate: 05012001		 
		 GenerateGeniusCode(sDate,sGenCode[0],sAutoGen);
    8f46:	fb 01       	movw	r30, r22
    8f48:	60 81       	ld	r22, Z
    8f4a:	8e 01       	movw	r16, r28
    8f4c:	0f 5f       	subi	r16, 0xFF	; 255
    8f4e:	1f 4f       	sbci	r17, 0xFF	; 255
    8f50:	a8 01       	movw	r20, r16
    8f52:	0e 94 eb 31 	call	0x63d6	; 0x63d6 <GenerateGeniusCode>
         #ifdef DEBUG_GENIUS_CODE
		 sprintf_P(strSend,PSTR("%s|%s"),sAutoGen,sGenCode); 
         uart_print(1,1,strSend);
		 #endif

         if (strcmp(sAutoGen,sGenCode)==0)
    8f56:	c8 01       	movw	r24, r16
    8f58:	b7 01       	movw	r22, r14
    8f5a:	0e 94 d3 aa 	call	0x155a6	; 0x155a6 <strcmp>
    8f5e:	00 97       	sbiw	r24, 0x00	; 0
    8f60:	11 f0       	breq	.+4      	; 0x8f66 <ValidateGeniusCode+0x52>
    8f62:	82 e0       	ldi	r24, 0x02	; 2
    8f64:	01 c0       	rjmp	.+2      	; 0x8f68 <ValidateGeniusCode+0x54>
    8f66:	81 e0       	ldi	r24, 0x01	; 1
         else Result=GC_INVALID;
	 }


   return Result;
}
    8f68:	2a 96       	adiw	r28, 0x0a	; 10
    8f6a:	0f b6       	in	r0, 0x3f	; 63
    8f6c:	f8 94       	cli
    8f6e:	de bf       	out	0x3e, r29	; 62
    8f70:	0f be       	out	0x3f, r0	; 63
    8f72:	cd bf       	out	0x3d, r28	; 61
    8f74:	cf 91       	pop	r28
    8f76:	df 91       	pop	r29
    8f78:	1f 91       	pop	r17
    8f7a:	0f 91       	pop	r16
    8f7c:	ff 90       	pop	r15
    8f7e:	ef 90       	pop	r14
    8f80:	08 95       	ret

00008f82 <_scr_pump>:

void leadingZero(char Val,char *StrResult){
     sprintf_P(StrResult,PSTR("%.2d"),Val);

}
void _scr_pump(void){
    8f82:	8f 92       	push	r8
    8f84:	9f 92       	push	r9
    8f86:	af 92       	push	r10
    8f88:	bf 92       	push	r11
    8f8a:	cf 92       	push	r12
    8f8c:	df 92       	push	r13
    8f8e:	ef 92       	push	r14
    8f90:	ff 92       	push	r15
    8f92:	0f 93       	push	r16
    8f94:	1f 93       	push	r17
    8f96:	df 93       	push	r29
    8f98:	cf 93       	push	r28
    8f9a:	cd b7       	in	r28, 0x3d	; 61
    8f9c:	de b7       	in	r29, 0x3e	; 62
    8f9e:	6c 97       	sbiw	r28, 0x1c	; 28
    8fa0:	0f b6       	in	r0, 0x3f	; 63
    8fa2:	f8 94       	cli
    8fa4:	de bf       	out	0x3e, r29	; 62
    8fa6:	0f be       	out	0x3f, r0	; 63
    8fa8:	cd bf       	out	0x3d, r28	; 61
	 //char strPumpL[3],strPumpR[3];
	 char __pump_id[8];
	 char i;
     char lcdteks[20];
	 lcd_clear();_delay_ms(10);
    8faa:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
    8fae:	84 ec       	ldi	r24, 0xC4	; 196
    8fb0:	99 e0       	ldi	r25, 0x09	; 9
    8fb2:	01 97       	sbiw	r24, 0x01	; 1
    8fb4:	f1 f7       	brne	.-4      	; 0x8fb2 <_scr_pump+0x30>
	 //Display
		eeprom_read_block((void*) &__pump_id, (const void*) &DefPumpMap, 8);
    8fb6:	8e 01       	movw	r16, r28
    8fb8:	0f 5f       	subi	r16, 0xFF	; 255
    8fba:	1f 4f       	sbci	r17, 0xFF	; 255
    8fbc:	c8 01       	movw	r24, r16
    8fbe:	66 e4       	ldi	r22, 0x46	; 70
    8fc0:	70 e0       	ldi	r23, 0x00	; 0
    8fc2:	48 e0       	ldi	r20, 0x08	; 8
    8fc4:	50 e0       	ldi	r21, 0x00	; 0
    8fc6:	0e 94 1b ad 	call	0x15a36	; 0x15a36 <__eerd_block_m128>
    8fca:	78 01       	movw	r14, r16
    8fcc:	01 e0       	ldi	r16, 0x01	; 1
    8fce:	10 e0       	ldi	r17, 0x00	; 0
        for (i=0;i<4;i++){
             //leadingZero(__pump_id[i],strPumpL);
			 //leadingZero(__pump_id[i+4],strPumpR);
             //sprintf_P(lcdteks,PSTR("%d.P%s | %.P%s  "),(i+1),strPumpL,(i+5),strPumpR);
			 sprintf_P(lcdteks,PSTR("%d.P%.2d | %d.P%.2d "),(i+1),__pump_id[i],(i+5),__pump_id[i+4]);
    8fd0:	a9 e0       	ldi	r26, 0x09	; 9
    8fd2:	ca 2e       	mov	r12, r26
    8fd4:	d1 2c       	mov	r13, r1
    8fd6:	cc 0e       	add	r12, r28
    8fd8:	dd 1e       	adc	r13, r29
    8fda:	f4 ed       	ldi	r31, 0xD4	; 212
    8fdc:	8f 2e       	mov	r8, r31
    8fde:	fe e0       	ldi	r31, 0x0E	; 14
    8fe0:	9f 2e       	mov	r9, r31
	 char i;
     char lcdteks[20];
	 lcd_clear();_delay_ms(10);
	 //Display
		eeprom_read_block((void*) &__pump_id, (const void*) &DefPumpMap, 8);
        for (i=0;i<4;i++){
    8fe2:	e5 e0       	ldi	r30, 0x05	; 5
    8fe4:	ae 2e       	mov	r10, r30
    8fe6:	b1 2c       	mov	r11, r1
    8fe8:	ac 0e       	add	r10, r28
    8fea:	bd 1e       	adc	r11, r29
             //leadingZero(__pump_id[i],strPumpL);
			 //leadingZero(__pump_id[i+4],strPumpR);
             //sprintf_P(lcdteks,PSTR("%d.P%s | %.P%s  "),(i+1),strPumpL,(i+5),strPumpR);
			 sprintf_P(lcdteks,PSTR("%d.P%.2d | %d.P%.2d "),(i+1),__pump_id[i],(i+5),__pump_id[i+4]);
    8fec:	8d b7       	in	r24, 0x3d	; 61
    8fee:	9e b7       	in	r25, 0x3e	; 62
    8ff0:	0c 97       	sbiw	r24, 0x0c	; 12
    8ff2:	0f b6       	in	r0, 0x3f	; 63
    8ff4:	f8 94       	cli
    8ff6:	9e bf       	out	0x3e, r25	; 62
    8ff8:	0f be       	out	0x3f, r0	; 63
    8ffa:	8d bf       	out	0x3d, r24	; 61
    8ffc:	ed b7       	in	r30, 0x3d	; 61
    8ffe:	fe b7       	in	r31, 0x3e	; 62
    9000:	31 96       	adiw	r30, 0x01	; 1
    9002:	ad b7       	in	r26, 0x3d	; 61
    9004:	be b7       	in	r27, 0x3e	; 62
    9006:	12 96       	adiw	r26, 0x02	; 2
    9008:	dc 92       	st	X, r13
    900a:	ce 92       	st	-X, r12
    900c:	11 97       	sbiw	r26, 0x01	; 1
    900e:	93 82       	std	Z+3, r9	; 0x03
    9010:	82 82       	std	Z+2, r8	; 0x02
    9012:	15 83       	std	Z+5, r17	; 0x05
    9014:	04 83       	std	Z+4, r16	; 0x04
    9016:	d7 01       	movw	r26, r14
    9018:	8c 91       	ld	r24, X
    901a:	86 83       	std	Z+6, r24	; 0x06
    901c:	17 82       	std	Z+7, r1	; 0x07
    901e:	0c 5f       	subi	r16, 0xFC	; 252
    9020:	1f 4f       	sbci	r17, 0xFF	; 255
    9022:	11 87       	std	Z+9, r17	; 0x09
    9024:	00 87       	std	Z+8, r16	; 0x08
    9026:	04 50       	subi	r16, 0x04	; 4
    9028:	10 40       	sbci	r17, 0x00	; 0
    902a:	14 96       	adiw	r26, 0x04	; 4
    902c:	8c 91       	ld	r24, X
    902e:	82 87       	std	Z+10, r24	; 0x0a
    9030:	13 86       	std	Z+11, r1	; 0x0b
    9032:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
			 lcd_print((i+1),1,lcdteks);
    9036:	8d b7       	in	r24, 0x3d	; 61
    9038:	9e b7       	in	r25, 0x3e	; 62
    903a:	0c 96       	adiw	r24, 0x0c	; 12
    903c:	0f b6       	in	r0, 0x3f	; 63
    903e:	f8 94       	cli
    9040:	9e bf       	out	0x3e, r25	; 62
    9042:	0f be       	out	0x3f, r0	; 63
    9044:	8d bf       	out	0x3d, r24	; 61
    9046:	80 2f       	mov	r24, r16
    9048:	61 e0       	ldi	r22, 0x01	; 1
    904a:	a6 01       	movw	r20, r12
    904c:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
    9050:	08 94       	sec
    9052:	e1 1c       	adc	r14, r1
    9054:	f1 1c       	adc	r15, r1
    9056:	0f 5f       	subi	r16, 0xFF	; 255
    9058:	1f 4f       	sbci	r17, 0xFF	; 255
	 char i;
     char lcdteks[20];
	 lcd_clear();_delay_ms(10);
	 //Display
		eeprom_read_block((void*) &__pump_id, (const void*) &DefPumpMap, 8);
        for (i=0;i<4;i++){
    905a:	ea 14       	cp	r14, r10
    905c:	fb 04       	cpc	r15, r11
    905e:	31 f6       	brne	.-116    	; 0x8fec <_scr_pump+0x6a>
			 //leadingZero(__pump_id[i+4],strPumpR);
             //sprintf_P(lcdteks,PSTR("%d.P%s | %.P%s  "),(i+1),strPumpL,(i+5),strPumpR);
			 sprintf_P(lcdteks,PSTR("%d.P%.2d | %d.P%.2d "),(i+1),__pump_id[i],(i+5),__pump_id[i+4]);
			 lcd_print((i+1),1,lcdteks);
		}
        lcd_printf(4,15,PSTR("*)Exit"));
    9060:	84 e0       	ldi	r24, 0x04	; 4
    9062:	6f e0       	ldi	r22, 0x0F	; 15
    9064:	4d ec       	ldi	r20, 0xCD	; 205
    9066:	5e e0       	ldi	r21, 0x0E	; 14
    9068:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
}
    906c:	6c 96       	adiw	r28, 0x1c	; 28
    906e:	0f b6       	in	r0, 0x3f	; 63
    9070:	f8 94       	cli
    9072:	de bf       	out	0x3e, r29	; 62
    9074:	0f be       	out	0x3f, r0	; 63
    9076:	cd bf       	out	0x3d, r28	; 61
    9078:	cf 91       	pop	r28
    907a:	df 91       	pop	r29
    907c:	1f 91       	pop	r17
    907e:	0f 91       	pop	r16
    9080:	ff 90       	pop	r15
    9082:	ef 90       	pop	r14
    9084:	df 90       	pop	r13
    9086:	cf 90       	pop	r12
    9088:	bf 90       	pop	r11
    908a:	af 90       	pop	r10
    908c:	9f 90       	pop	r9
    908e:	8f 90       	pop	r8
    9090:	08 95       	ret

00009092 <FViewFreeMessage>:
char FViewFreeMessage(){
static char stFreeMessage=fmInit;
       char Result=MENU_NONE;
     
	 Result=MENU_NONE;
	 switch(stFreeMessage){
    9092:	80 91 6d 02 	lds	r24, 0x026D
    9096:	81 30       	cpi	r24, 0x01	; 1
    9098:	49 f0       	breq	.+18     	; 0x90ac <FViewFreeMessage+0x1a>
    909a:	81 30       	cpi	r24, 0x01	; 1
    909c:	28 f0       	brcs	.+10     	; 0x90a8 <FViewFreeMessage+0x16>
    909e:	82 30       	cpi	r24, 0x02	; 2
    90a0:	19 f1       	breq	.+70     	; 0x90e8 <FViewFreeMessage+0x56>
    90a2:	83 30       	cpi	r24, 0x03	; 3
    90a4:	71 f5       	brne	.+92     	; 0x9102 <FViewFreeMessage+0x70>
    90a6:	29 c0       	rjmp	.+82     	; 0x90fa <FViewFreeMessage+0x68>
	 case fmInit:
	      stFreeMessage=fmDisplayFreeMessage;
    90a8:	81 e0       	ldi	r24, 0x01	; 1
    90aa:	23 c0       	rjmp	.+70     	; 0x90f2 <FViewFreeMessage+0x60>
	      break;
     case fmDisplayFreeMessage:
		  lcd_clear();
    90ac:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
		  lcd_print(1,1,strFreeMessageLine1);
    90b0:	81 e0       	ldi	r24, 0x01	; 1
    90b2:	61 e0       	ldi	r22, 0x01	; 1
    90b4:	44 e1       	ldi	r20, 0x14	; 20
    90b6:	59 e0       	ldi	r21, 0x09	; 9
    90b8:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
		  lcd_print(2,1,strFreeMessageLine2);
    90bc:	82 e0       	ldi	r24, 0x02	; 2
    90be:	61 e0       	ldi	r22, 0x01	; 1
    90c0:	45 e2       	ldi	r20, 0x25	; 37
    90c2:	58 e0       	ldi	r21, 0x08	; 8
    90c4:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
		  lcd_print(3,1,strFreeMessageLine3);
    90c8:	83 e0       	ldi	r24, 0x03	; 3
    90ca:	61 e0       	ldi	r22, 0x01	; 1
    90cc:	4e e9       	ldi	r20, 0x9E	; 158
    90ce:	58 e0       	ldi	r21, 0x08	; 8
    90d0:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
		  lcd_print(4,1,strFreeMessageLine4);
    90d4:	84 e0       	ldi	r24, 0x04	; 4
    90d6:	61 e0       	ldi	r22, 0x01	; 1
    90d8:	48 e5       	ldi	r20, 0x58	; 88
    90da:	5c e0       	ldi	r21, 0x0C	; 12
    90dc:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
	      TimDisplay=0;
    90e0:	10 92 92 01 	sts	0x0192, r1
	      stFreeMessage=fmDelayViewMesage;
    90e4:	82 e0       	ldi	r24, 0x02	; 2
    90e6:	05 c0       	rjmp	.+10     	; 0x90f2 <FViewFreeMessage+0x60>
	      break;
	 case fmDelayViewMesage:  
	      if (TimDisplay>TIM_FREE_MESSAGE)stFreeMessage=fmFinishFreeMessage;
    90e8:	80 91 92 01 	lds	r24, 0x0192
    90ec:	8b 30       	cpi	r24, 0x0B	; 11
    90ee:	48 f0       	brcs	.+18     	; 0x9102 <FViewFreeMessage+0x70>
    90f0:	83 e0       	ldi	r24, 0x03	; 3
    90f2:	80 93 6d 02 	sts	0x026D, r24
    90f6:	80 e0       	ldi	r24, 0x00	; 0
    90f8:	08 95       	ret
	      break;
     case fmFinishFreeMessage:
          stFreeMessage=fmInit;
    90fa:	10 92 6d 02 	sts	0x026D, r1
    90fe:	81 e0       	ldi	r24, 0x01	; 1
    9100:	08 95       	ret
    9102:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
	      break;
	 }
  return Result;
}
    9104:	08 95       	ret

00009106 <FTestChar>:
		TimTicker++;
	}

}

char FTestChar(){
    9106:	0f 93       	push	r16
    9108:	1f 93       	push	r17
    910a:	df 93       	push	r29
    910c:	cf 93       	push	r28
    910e:	cd b7       	in	r28, 0x3d	; 61
    9110:	de b7       	in	r29, 0x3e	; 62
    9112:	64 97       	sbiw	r28, 0x14	; 20
    9114:	0f b6       	in	r0, 0x3f	; 63
    9116:	f8 94       	cli
    9118:	de bf       	out	0x3e, r29	; 62
    911a:	0f be       	out	0x3f, r0	; 63
    911c:	cd bf       	out	0x3d, r28	; 61
char lcdteks[20],Result;
char i=0;
     Result=MENU_NONE;
     sprintf_P(lcdteks,PSTR("D:%d C:%c  "),i,i);
    911e:	8d b7       	in	r24, 0x3d	; 61
    9120:	9e b7       	in	r25, 0x3e	; 62
    9122:	08 97       	sbiw	r24, 0x08	; 8
    9124:	0f b6       	in	r0, 0x3f	; 63
    9126:	f8 94       	cli
    9128:	9e bf       	out	0x3e, r25	; 62
    912a:	0f be       	out	0x3f, r0	; 63
    912c:	8d bf       	out	0x3d, r24	; 61
    912e:	ed b7       	in	r30, 0x3d	; 61
    9130:	fe b7       	in	r31, 0x3e	; 62
    9132:	31 96       	adiw	r30, 0x01	; 1
    9134:	8e 01       	movw	r16, r28
    9136:	0f 5f       	subi	r16, 0xFF	; 255
    9138:	1f 4f       	sbci	r17, 0xFF	; 255
    913a:	ad b7       	in	r26, 0x3d	; 61
    913c:	be b7       	in	r27, 0x3e	; 62
    913e:	12 96       	adiw	r26, 0x02	; 2
    9140:	1c 93       	st	X, r17
    9142:	0e 93       	st	-X, r16
    9144:	11 97       	sbiw	r26, 0x01	; 1
    9146:	83 e6       	ldi	r24, 0x63	; 99
    9148:	9e e1       	ldi	r25, 0x1E	; 30
    914a:	93 83       	std	Z+3, r25	; 0x03
    914c:	82 83       	std	Z+2, r24	; 0x02
    914e:	15 82       	std	Z+5, r1	; 0x05
    9150:	14 82       	std	Z+4, r1	; 0x04
    9152:	17 82       	std	Z+7, r1	; 0x07
    9154:	16 82       	std	Z+6, r1	; 0x06
    9156:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
     lcd_print(1,1,lcdteks);
    915a:	8d b7       	in	r24, 0x3d	; 61
    915c:	9e b7       	in	r25, 0x3e	; 62
    915e:	08 96       	adiw	r24, 0x08	; 8
    9160:	0f b6       	in	r0, 0x3f	; 63
    9162:	f8 94       	cli
    9164:	9e bf       	out	0x3e, r25	; 62
    9166:	0f be       	out	0x3f, r0	; 63
    9168:	8d bf       	out	0x3d, r24	; 61
    916a:	81 e0       	ldi	r24, 0x01	; 1
    916c:	61 e0       	ldi	r22, 0x01	; 1
    916e:	a8 01       	movw	r20, r16
    9170:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
    9174:	88 ee       	ldi	r24, 0xE8	; 232
    9176:	9d ef       	ldi	r25, 0xFD	; 253
    9178:	29 e1       	ldi	r18, 0x19	; 25
    917a:	30 e0       	ldi	r19, 0x00	; 0
    917c:	f9 01       	movw	r30, r18
    917e:	31 97       	sbiw	r30, 0x01	; 1
    9180:	f1 f7       	brne	.-4      	; 0x917e <FTestChar+0x78>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    9182:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    9184:	d9 f7       	brne	.-10     	; 0x917c <FTestChar+0x76>
	 if (i==0xFF)Result=MENU_DONE;
	 i++;
     _delay_ms(6500);
  return Result;
}
    9186:	80 e0       	ldi	r24, 0x00	; 0
    9188:	64 96       	adiw	r28, 0x14	; 20
    918a:	0f b6       	in	r0, 0x3f	; 63
    918c:	f8 94       	cli
    918e:	de bf       	out	0x3e, r29	; 62
    9190:	0f be       	out	0x3f, r0	; 63
    9192:	cd bf       	out	0x3d, r28	; 61
    9194:	cf 91       	pop	r28
    9196:	df 91       	pop	r29
    9198:	1f 91       	pop	r17
    919a:	0f 91       	pop	r16
    919c:	08 95       	ret

0000919e <DisplayDateTime>:

void DisplayQueueFIP(){// FIP:#1#2#3#4#5

}

void DisplayDateTime(){
    919e:	cf 92       	push	r12
    91a0:	df 92       	push	r13
    91a2:	ef 92       	push	r14
    91a4:	ff 92       	push	r15
    91a6:	0f 93       	push	r16
    91a8:	1f 93       	push	r17
    91aa:	df 93       	push	r29
    91ac:	cf 93       	push	r28
    91ae:	cd b7       	in	r28, 0x3d	; 61
    91b0:	de b7       	in	r29, 0x3e	; 62
    91b2:	64 97       	sbiw	r28, 0x14	; 20
    91b4:	0f b6       	in	r0, 0x3f	; 63
    91b6:	f8 94       	cli
    91b8:	de bf       	out	0x3e, r29	; 62
    91ba:	0f be       	out	0x3f, r0	; 63
    91bc:	cd bf       	out	0x3d, r28	; 61
char lcdteks[20];
	 _datetime(0, strSystemDate, strSystemTime);
    91be:	1c e3       	ldi	r17, 0x3C	; 60
    91c0:	e1 2e       	mov	r14, r17
    91c2:	14 e0       	ldi	r17, 0x04	; 4
    91c4:	f1 2e       	mov	r15, r17
    91c6:	b6 ef       	ldi	r27, 0xF6	; 246
    91c8:	cb 2e       	mov	r12, r27
    91ca:	b8 e0       	ldi	r27, 0x08	; 8
    91cc:	db 2e       	mov	r13, r27
    91ce:	80 e0       	ldi	r24, 0x00	; 0
    91d0:	b7 01       	movw	r22, r14
    91d2:	a6 01       	movw	r20, r12
    91d4:	0e 94 b9 a7 	call	0x14f72	; 0x14f72 <_datetime>
	 sprintf_P(lcdteks,PSTR("%s %s"),strSystemDate,strSystemTime);
    91d8:	8d b7       	in	r24, 0x3d	; 61
    91da:	9e b7       	in	r25, 0x3e	; 62
    91dc:	08 97       	sbiw	r24, 0x08	; 8
    91de:	0f b6       	in	r0, 0x3f	; 63
    91e0:	f8 94       	cli
    91e2:	9e bf       	out	0x3e, r25	; 62
    91e4:	0f be       	out	0x3f, r0	; 63
    91e6:	8d bf       	out	0x3d, r24	; 61
    91e8:	ed b7       	in	r30, 0x3d	; 61
    91ea:	fe b7       	in	r31, 0x3e	; 62
    91ec:	31 96       	adiw	r30, 0x01	; 1
    91ee:	8e 01       	movw	r16, r28
    91f0:	0f 5f       	subi	r16, 0xFF	; 255
    91f2:	1f 4f       	sbci	r17, 0xFF	; 255
    91f4:	ad b7       	in	r26, 0x3d	; 61
    91f6:	be b7       	in	r27, 0x3e	; 62
    91f8:	12 96       	adiw	r26, 0x02	; 2
    91fa:	1c 93       	st	X, r17
    91fc:	0e 93       	st	-X, r16
    91fe:	11 97       	sbiw	r26, 0x01	; 1
    9200:	8f e6       	ldi	r24, 0x6F	; 111
    9202:	9e e1       	ldi	r25, 0x1E	; 30
    9204:	93 83       	std	Z+3, r25	; 0x03
    9206:	82 83       	std	Z+2, r24	; 0x02
    9208:	f5 82       	std	Z+5, r15	; 0x05
    920a:	e4 82       	std	Z+4, r14	; 0x04
    920c:	d7 82       	std	Z+7, r13	; 0x07
    920e:	c6 82       	std	Z+6, r12	; 0x06
    9210:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	 lcd_print(2, 1, lcdteks);
    9214:	8d b7       	in	r24, 0x3d	; 61
    9216:	9e b7       	in	r25, 0x3e	; 62
    9218:	08 96       	adiw	r24, 0x08	; 8
    921a:	0f b6       	in	r0, 0x3f	; 63
    921c:	f8 94       	cli
    921e:	9e bf       	out	0x3e, r25	; 62
    9220:	0f be       	out	0x3f, r0	; 63
    9222:	8d bf       	out	0x3d, r24	; 61
    9224:	82 e0       	ldi	r24, 0x02	; 2
    9226:	61 e0       	ldi	r22, 0x01	; 1
    9228:	a8 01       	movw	r20, r16
    922a:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
}
    922e:	64 96       	adiw	r28, 0x14	; 20
    9230:	0f b6       	in	r0, 0x3f	; 63
    9232:	f8 94       	cli
    9234:	de bf       	out	0x3e, r29	; 62
    9236:	0f be       	out	0x3f, r0	; 63
    9238:	cd bf       	out	0x3d, r28	; 61
    923a:	cf 91       	pop	r28
    923c:	df 91       	pop	r29
    923e:	1f 91       	pop	r17
    9240:	0f 91       	pop	r16
    9242:	ff 90       	pop	r15
    9244:	ef 90       	pop	r14
    9246:	df 90       	pop	r13
    9248:	cf 90       	pop	r12
    924a:	08 95       	ret

0000924c <DisplayScreenIdle>:
		if ((__num>='0')&&(__num<='9')||(IsStandAloneDetected==True)) 
		break;
	 }
}

void DisplayScreenIdle(void){
    924c:	cf 92       	push	r12
    924e:	df 92       	push	r13
    9250:	ef 92       	push	r14
    9252:	ff 92       	push	r15
    9254:	0f 93       	push	r16
    9256:	1f 93       	push	r17
    9258:	df 93       	push	r29
    925a:	cf 93       	push	r28
    925c:	cd b7       	in	r28, 0x3d	; 61
    925e:	de b7       	in	r29, 0x3e	; 62
    9260:	a8 97       	sbiw	r28, 0x28	; 40
    9262:	0f b6       	in	r0, 0x3f	; 63
    9264:	f8 94       	cli
    9266:	de bf       	out	0x3e, r29	; 62
    9268:	0f be       	out	0x3f, r0	; 63
    926a:	cd bf       	out	0x3d, r28	; 61
char strCodeName[10],strVersion[10],lcdteks[20];
    sprintf_P(strCodeName,PSTR(CODE_NAME)); 
    926c:	00 d0       	rcall	.+0      	; 0x926e <DisplayScreenIdle+0x22>
    926e:	00 d0       	rcall	.+0      	; 0x9270 <DisplayScreenIdle+0x24>
    9270:	6e 01       	movw	r12, r28
    9272:	08 94       	sec
    9274:	c1 1c       	adc	r12, r1
    9276:	d1 1c       	adc	r13, r1
    9278:	ad b7       	in	r26, 0x3d	; 61
    927a:	be b7       	in	r27, 0x3e	; 62
    927c:	12 96       	adiw	r26, 0x02	; 2
    927e:	dc 92       	st	X, r13
    9280:	ce 92       	st	-X, r12
    9282:	11 97       	sbiw	r26, 0x01	; 1
    9284:	82 e9       	ldi	r24, 0x92	; 146
    9286:	93 e2       	ldi	r25, 0x23	; 35
    9288:	14 96       	adiw	r26, 0x04	; 4
    928a:	9c 93       	st	X, r25
    928c:	8e 93       	st	-X, r24
    928e:	13 97       	sbiw	r26, 0x03	; 3
    9290:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
    sprintf_P(strVersion,PSTR(VERSION_NUM)); 
    9294:	0b e0       	ldi	r16, 0x0B	; 11
    9296:	e0 2e       	mov	r14, r16
    9298:	f1 2c       	mov	r15, r1
    929a:	ec 0e       	add	r14, r28
    929c:	fd 1e       	adc	r15, r29
    929e:	ed b7       	in	r30, 0x3d	; 61
    92a0:	fe b7       	in	r31, 0x3e	; 62
    92a2:	f2 82       	std	Z+2, r15	; 0x02
    92a4:	e1 82       	std	Z+1, r14	; 0x01
    92a6:	8d e8       	ldi	r24, 0x8D	; 141
    92a8:	93 e2       	ldi	r25, 0x23	; 35
    92aa:	94 83       	std	Z+4, r25	; 0x04
    92ac:	83 83       	std	Z+3, r24	; 0x03
    92ae:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
    sprintf_P(lcdteks,PSTR("%s %s"),strCodeName,strVersion); 
    92b2:	00 d0       	rcall	.+0      	; 0x92b4 <DisplayScreenIdle+0x68>
    92b4:	00 d0       	rcall	.+0      	; 0x92b6 <DisplayScreenIdle+0x6a>
    92b6:	ed b7       	in	r30, 0x3d	; 61
    92b8:	fe b7       	in	r31, 0x3e	; 62
    92ba:	31 96       	adiw	r30, 0x01	; 1
    92bc:	8e 01       	movw	r16, r28
    92be:	0b 5e       	subi	r16, 0xEB	; 235
    92c0:	1f 4f       	sbci	r17, 0xFF	; 255
    92c2:	ad b7       	in	r26, 0x3d	; 61
    92c4:	be b7       	in	r27, 0x3e	; 62
    92c6:	12 96       	adiw	r26, 0x02	; 2
    92c8:	1c 93       	st	X, r17
    92ca:	0e 93       	st	-X, r16
    92cc:	11 97       	sbiw	r26, 0x01	; 1
    92ce:	87 e8       	ldi	r24, 0x87	; 135
    92d0:	93 e2       	ldi	r25, 0x23	; 35
    92d2:	93 83       	std	Z+3, r25	; 0x03
    92d4:	82 83       	std	Z+2, r24	; 0x02
    92d6:	d5 82       	std	Z+5, r13	; 0x05
    92d8:	c4 82       	std	Z+4, r12	; 0x04
    92da:	f7 82       	std	Z+7, r15	; 0x07
    92dc:	e6 82       	std	Z+6, r14	; 0x06
    92de:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	lcd_clear();
    92e2:	ed b7       	in	r30, 0x3d	; 61
    92e4:	fe b7       	in	r31, 0x3e	; 62
    92e6:	38 96       	adiw	r30, 0x08	; 8
    92e8:	0f b6       	in	r0, 0x3f	; 63
    92ea:	f8 94       	cli
    92ec:	fe bf       	out	0x3e, r31	; 62
    92ee:	0f be       	out	0x3f, r0	; 63
    92f0:	ed bf       	out	0x3d, r30	; 61
    92f2:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
	lcd_print(1,1,lcdteks);
    92f6:	81 e0       	ldi	r24, 0x01	; 1
    92f8:	61 e0       	ldi	r22, 0x01	; 1
    92fa:	a8 01       	movw	r20, r16
    92fc:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
}
    9300:	a8 96       	adiw	r28, 0x28	; 40
    9302:	0f b6       	in	r0, 0x3f	; 63
    9304:	f8 94       	cli
    9306:	de bf       	out	0x3e, r29	; 62
    9308:	0f be       	out	0x3f, r0	; 63
    930a:	cd bf       	out	0x3d, r28	; 61
    930c:	cf 91       	pop	r28
    930e:	df 91       	pop	r29
    9310:	1f 91       	pop	r17
    9312:	0f 91       	pop	r16
    9314:	ff 90       	pop	r15
    9316:	ef 90       	pop	r14
    9318:	df 90       	pop	r13
    931a:	cf 90       	pop	r12
    931c:	08 95       	ret

0000931e <DisplayPumpStatus>:
		  break;         	 
	 }
  return Result;	 
}

void DisplayPumpStatus(){
    931e:	0f 93       	push	r16
    9320:	1f 93       	push	r17
    9322:	df 93       	push	r29
    9324:	cf 93       	push	r28
    9326:	cd b7       	in	r28, 0x3d	; 61
    9328:	de b7       	in	r29, 0x3e	; 62
    932a:	a8 97       	sbiw	r28, 0x28	; 40
    932c:	0f b6       	in	r0, 0x3f	; 63
    932e:	f8 94       	cli
    9330:	de bf       	out	0x3e, r29	; 62
    9332:	0f be       	out	0x3f, r0	; 63
    9334:	cd bf       	out	0x3d, r28	; 61
     char SPump[20],lcdteks[20];

	 if (IsNewPumpStatus==True){
    9336:	80 91 01 01 	lds	r24, 0x0101
    933a:	81 30       	cpi	r24, 0x01	; 1
    933c:	09 f0       	breq	.+2      	; 0x9340 <DisplayPumpStatus+0x22>
    933e:	4a c0       	rjmp	.+148    	; 0x93d4 <DisplayPumpStatus+0xb6>
	     IsNewPumpStatus=False;
    9340:	10 92 01 01 	sts	0x0101, r1
	      }
     }      
}

void BackLightTrig(){    
     __key_light = 1; 
    9344:	80 93 ae 02 	sts	0x02AE, r24
	 __key_lgtcnt = 0; 
    9348:	10 92 af 02 	sts	0x02AF, r1
	 PORTG=PORTG&0b11111101;
    934c:	80 91 65 00 	lds	r24, 0x0065
    9350:	8d 7f       	andi	r24, 0xFD	; 253
    9352:	80 93 65 00 	sts	0x0065, r24
     char SPump[20],lcdteks[20];

	 if (IsNewPumpStatus==True){
	     IsNewPumpStatus=False;
		 BackLightTrig();
		 StrPosCopy(strPumpStatus,SPump,0,PumpCountMax);
    9356:	80 91 5c 01 	lds	r24, 0x015C
    935a:	48 2f       	mov	r20, r24
    935c:	50 e0       	ldi	r21, 0x00	; 0
    935e:	20 e0       	ldi	r18, 0x00	; 0
    9360:	30 e0       	ldi	r19, 0x00	; 0
    9362:	be 01       	movw	r22, r28
    9364:	6f 5f       	subi	r22, 0xFF	; 255
    9366:	7f 4f       	sbci	r23, 0xFF	; 255
    9368:	0a c0       	rjmp	.+20     	; 0x937e <DisplayPumpStatus+0x60>
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    936a:	fb 01       	movw	r30, r22
    936c:	e2 0f       	add	r30, r18
    936e:	f3 1f       	adc	r31, r19
    9370:	d9 01       	movw	r26, r18
    9372:	ae 5f       	subi	r26, 0xFE	; 254
    9374:	be 4f       	sbci	r27, 0xFE	; 254
    9376:	8c 91       	ld	r24, X
    9378:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    937a:	2f 5f       	subi	r18, 0xFF	; 255
    937c:	3f 4f       	sbci	r19, 0xFF	; 255
    937e:	24 17       	cp	r18, r20
    9380:	35 07       	cpc	r19, r21
    9382:	98 f3       	brcs	.-26     	; 0x936a <DisplayPumpStatus+0x4c>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    9384:	46 0f       	add	r20, r22
    9386:	57 1f       	adc	r21, r23
    9388:	da 01       	movw	r26, r20
    938a:	1c 92       	st	X, r1

	 if (IsNewPumpStatus==True){
	     IsNewPumpStatus=False;
		 BackLightTrig();
		 StrPosCopy(strPumpStatus,SPump,0,PumpCountMax);
		 sprintf_P(lcdteks,PSTR("%s"),SPump);
    938c:	00 d0       	rcall	.+0      	; 0x938e <DisplayPumpStatus+0x70>
    938e:	00 d0       	rcall	.+0      	; 0x9390 <DisplayPumpStatus+0x72>
    9390:	00 d0       	rcall	.+0      	; 0x9392 <DisplayPumpStatus+0x74>
    9392:	ed b7       	in	r30, 0x3d	; 61
    9394:	fe b7       	in	r31, 0x3e	; 62
    9396:	31 96       	adiw	r30, 0x01	; 1
    9398:	8e 01       	movw	r16, r28
    939a:	0b 5e       	subi	r16, 0xEB	; 235
    939c:	1f 4f       	sbci	r17, 0xFF	; 255
    939e:	ad b7       	in	r26, 0x3d	; 61
    93a0:	be b7       	in	r27, 0x3e	; 62
    93a2:	12 96       	adiw	r26, 0x02	; 2
    93a4:	1c 93       	st	X, r17
    93a6:	0e 93       	st	-X, r16
    93a8:	11 97       	sbiw	r26, 0x01	; 1
    93aa:	89 e0       	ldi	r24, 0x09	; 9
    93ac:	94 e2       	ldi	r25, 0x24	; 36
    93ae:	93 83       	std	Z+3, r25	; 0x03
    93b0:	82 83       	std	Z+2, r24	; 0x02
    93b2:	75 83       	std	Z+5, r23	; 0x05
    93b4:	64 83       	std	Z+4, r22	; 0x04
    93b6:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
         lcd_print(4,1,lcdteks);
    93ba:	ed b7       	in	r30, 0x3d	; 61
    93bc:	fe b7       	in	r31, 0x3e	; 62
    93be:	36 96       	adiw	r30, 0x06	; 6
    93c0:	0f b6       	in	r0, 0x3f	; 63
    93c2:	f8 94       	cli
    93c4:	fe bf       	out	0x3e, r31	; 62
    93c6:	0f be       	out	0x3f, r0	; 63
    93c8:	ed bf       	out	0x3d, r30	; 61
    93ca:	84 e0       	ldi	r24, 0x04	; 4
    93cc:	61 e0       	ldi	r22, 0x01	; 1
    93ce:	a8 01       	movw	r20, r16
    93d0:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
     	 }
}
    93d4:	a8 96       	adiw	r28, 0x28	; 40
    93d6:	0f b6       	in	r0, 0x3f	; 63
    93d8:	f8 94       	cli
    93da:	de bf       	out	0x3e, r29	; 62
    93dc:	0f be       	out	0x3f, r0	; 63
    93de:	cd bf       	out	0x3d, r28	; 61
    93e0:	cf 91       	pop	r28
    93e2:	df 91       	pop	r29
    93e4:	1f 91       	pop	r17
    93e6:	0f 91       	pop	r16
    93e8:	08 95       	ret

000093ea <FCloseShift>:
	 }
  return Result;
}


char FCloseShift(char ShiftType){//SHIFT_NONE,NEW_SHIFT,CONTINUE_SHIFT
    93ea:	df 92       	push	r13
    93ec:	ef 92       	push	r14
    93ee:	ff 92       	push	r15
    93f0:	0f 93       	push	r16
    93f2:	1f 93       	push	r17
    93f4:	df 93       	push	r29
    93f6:	cf 93       	push	r28
    93f8:	cd b7       	in	r28, 0x3d	; 61
    93fa:	de b7       	in	r29, 0x3e	; 62
    93fc:	64 97       	sbiw	r28, 0x14	; 20
    93fe:	0f b6       	in	r0, 0x3f	; 63
    9400:	f8 94       	cli
    9402:	de bf       	out	0x3e, r29	; 62
    9404:	0f be       	out	0x3f, r0	; 63
    9406:	cd bf       	out	0x3d, r28	; 61
    9408:	18 2f       	mov	r17, r24
	 char KeyPressed;
	 char FIPAddr;


	 Result=MENU_NONE;
	 switch(stCloseShift){
    940a:	80 91 49 02 	lds	r24, 0x0249
    940e:	87 30       	cpi	r24, 0x07	; 7
    9410:	09 f4       	brne	.+2      	; 0x9414 <FCloseShift+0x2a>
    9412:	98 c1       	rjmp	.+816    	; 0x9744 <FCloseShift+0x35a>
    9414:	88 30       	cpi	r24, 0x08	; 8
    9416:	78 f4       	brcc	.+30     	; 0x9436 <FCloseShift+0x4c>
    9418:	84 30       	cpi	r24, 0x04	; 4
    941a:	09 f4       	brne	.+2      	; 0x941e <FCloseShift+0x34>
    941c:	64 c0       	rjmp	.+200    	; 0x94e6 <FCloseShift+0xfc>
    941e:	85 30       	cpi	r24, 0x05	; 5
    9420:	18 f4       	brcc	.+6      	; 0x9428 <FCloseShift+0x3e>
    9422:	88 23       	and	r24, r24
    9424:	c1 f0       	breq	.+48     	; 0x9456 <FCloseShift+0x6c>
    9426:	04 c2       	rjmp	.+1032   	; 0x9830 <FCloseShift+0x446>
    9428:	85 30       	cpi	r24, 0x05	; 5
    942a:	09 f4       	brne	.+2      	; 0x942e <FCloseShift+0x44>
    942c:	a2 c0       	rjmp	.+324    	; 0x9572 <FCloseShift+0x188>
    942e:	86 30       	cpi	r24, 0x06	; 6
    9430:	09 f0       	breq	.+2      	; 0x9434 <FCloseShift+0x4a>
    9432:	fe c1       	rjmp	.+1020   	; 0x9830 <FCloseShift+0x446>
    9434:	a4 c0       	rjmp	.+328    	; 0x957e <FCloseShift+0x194>
    9436:	8a 30       	cpi	r24, 0x0A	; 10
    9438:	09 f4       	brne	.+2      	; 0x943c <FCloseShift+0x52>
    943a:	c8 c1       	rjmp	.+912    	; 0x97cc <FCloseShift+0x3e2>
    943c:	8b 30       	cpi	r24, 0x0B	; 11
    943e:	20 f4       	brcc	.+8      	; 0x9448 <FCloseShift+0x5e>
    9440:	88 30       	cpi	r24, 0x08	; 8
    9442:	09 f0       	breq	.+2      	; 0x9446 <FCloseShift+0x5c>
    9444:	f5 c1       	rjmp	.+1002   	; 0x9830 <FCloseShift+0x446>
    9446:	84 c1       	rjmp	.+776    	; 0x9750 <FCloseShift+0x366>
    9448:	8b 30       	cpi	r24, 0x0B	; 11
    944a:	09 f4       	brne	.+2      	; 0x944e <FCloseShift+0x64>
    944c:	ed c1       	rjmp	.+986    	; 0x9828 <FCloseShift+0x43e>
    944e:	8c 30       	cpi	r24, 0x0C	; 12
    9450:	09 f0       	breq	.+2      	; 0x9454 <FCloseShift+0x6a>
    9452:	ee c1       	rjmp	.+988    	; 0x9830 <FCloseShift+0x446>
    9454:	c3 c1       	rjmp	.+902    	; 0x97dc <FCloseShift+0x3f2>
	 case csInitCloseShift:
	      ActivePump=eeprom_read_byte(&DefActivePump);
    9456:	8a e4       	ldi	r24, 0x4A	; 74
    9458:	91 e0       	ldi	r25, 0x01	; 1
    945a:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
    945e:	80 93 5d 01 	sts	0x015D, r24
		  IsPumpBusy=False;
    9462:	10 92 48 02 	sts	0x0248, r1
    9466:	ff 24       	eor	r15, r15
					
		       if (strPumpStatus[FIPAddr]==GetPumpStatusLabel(PS_TOTALIZER))
			        UpdateStandaloneStatus(GetPumpID(FIPAddr),PUMP_OFF);
					
               if (strPumpStatus[FIPAddr]==GetPumpStatusLabel(PUMP_BUSY))
			       IsPumpBusy=True;
    9468:	dd 24       	eor	r13, r13
    946a:	d3 94       	inc	r13
    946c:	36 c0       	rjmp	.+108    	; 0x94da <FCloseShift+0xf0>
	 case csInitCloseShift:
	      ActivePump=eeprom_read_byte(&DefActivePump);
		  IsPumpBusy=False;
		  //FindBusy Pump
		  for (FIPAddr=0;FIPAddr<ActivePump;FIPAddr++){		       
		       if ((strPumpStatus[FIPAddr]!=GetPumpStatusLabel(PUMP_NONE))&&(strPumpStatus[FIPAddr]!=GetPumpStatusLabel(PUMP_OFF))&&(strPumpStatus[FIPAddr]!=GetPumpStatusLabel(PUMP_BUSY)))
    946e:	0f 2d       	mov	r16, r15
    9470:	10 e0       	ldi	r17, 0x00	; 0
    9472:	f8 01       	movw	r30, r16
    9474:	ee 5f       	subi	r30, 0xFE	; 254
    9476:	fe 4f       	sbci	r31, 0xFE	; 254
    9478:	e0 80       	ld	r14, Z
    947a:	8e e0       	ldi	r24, 0x0E	; 14
    947c:	0e 94 41 14 	call	0x2882	; 0x2882 <GetPumpStatusLabel>
    9480:	e8 16       	cp	r14, r24
    9482:	81 f0       	breq	.+32     	; 0x94a4 <FCloseShift+0xba>
    9484:	86 e0       	ldi	r24, 0x06	; 6
    9486:	0e 94 41 14 	call	0x2882	; 0x2882 <GetPumpStatusLabel>
    948a:	e8 16       	cp	r14, r24
    948c:	59 f0       	breq	.+22     	; 0x94a4 <FCloseShift+0xba>
    948e:	89 e0       	ldi	r24, 0x09	; 9
    9490:	0e 94 41 14 	call	0x2882	; 0x2882 <GetPumpStatusLabel>
    9494:	e8 16       	cp	r14, r24
    9496:	31 f0       	breq	.+12     	; 0x94a4 <FCloseShift+0xba>
				    UpdateStandaloneStatus(GetPumpID(FIPAddr),PUMP_OFF);
    9498:	8f 2d       	mov	r24, r15
    949a:	0e 94 87 20 	call	0x410e	; 0x410e <GetPumpID>
    949e:	66 e0       	ldi	r22, 0x06	; 6
    94a0:	0e 94 2d 20 	call	0x405a	; 0x405a <UpdateStandaloneStatus>
					
		       if (strPumpStatus[FIPAddr]==GetPumpStatusLabel(PS_TOTALIZER))
    94a4:	84 e1       	ldi	r24, 0x14	; 20
    94a6:	0e 94 41 14 	call	0x2882	; 0x2882 <GetPumpStatusLabel>
    94aa:	f8 01       	movw	r30, r16
    94ac:	ee 5f       	subi	r30, 0xFE	; 254
    94ae:	fe 4f       	sbci	r31, 0xFE	; 254
    94b0:	90 81       	ld	r25, Z
    94b2:	98 17       	cp	r25, r24
    94b4:	31 f4       	brne	.+12     	; 0x94c2 <FCloseShift+0xd8>
			        UpdateStandaloneStatus(GetPumpID(FIPAddr),PUMP_OFF);
    94b6:	8f 2d       	mov	r24, r15
    94b8:	0e 94 87 20 	call	0x410e	; 0x410e <GetPumpID>
    94bc:	66 e0       	ldi	r22, 0x06	; 6
    94be:	0e 94 2d 20 	call	0x405a	; 0x405a <UpdateStandaloneStatus>
					
               if (strPumpStatus[FIPAddr]==GetPumpStatusLabel(PUMP_BUSY))
    94c2:	89 e0       	ldi	r24, 0x09	; 9
    94c4:	0e 94 41 14 	call	0x2882	; 0x2882 <GetPumpStatusLabel>
    94c8:	0e 5f       	subi	r16, 0xFE	; 254
    94ca:	1e 4f       	sbci	r17, 0xFE	; 254
    94cc:	d8 01       	movw	r26, r16
    94ce:	9c 91       	ld	r25, X
    94d0:	98 17       	cp	r25, r24
    94d2:	11 f4       	brne	.+4      	; 0x94d8 <FCloseShift+0xee>
			       IsPumpBusy=True;
    94d4:	d0 92 48 02 	sts	0x0248, r13
	 switch(stCloseShift){
	 case csInitCloseShift:
	      ActivePump=eeprom_read_byte(&DefActivePump);
		  IsPumpBusy=False;
		  //FindBusy Pump
		  for (FIPAddr=0;FIPAddr<ActivePump;FIPAddr++){		       
    94d8:	f3 94       	inc	r15
    94da:	80 91 5d 01 	lds	r24, 0x015D
    94de:	f8 16       	cp	r15, r24
    94e0:	30 f2       	brcs	.-116    	; 0x946e <FCloseShift+0x84>
					
               if (strPumpStatus[FIPAddr]==GetPumpStatusLabel(PUMP_BUSY))
			       IsPumpBusy=True;
			   }

          stCloseShift=csSendTotalizerALL;
    94e2:	84 e0       	ldi	r24, 0x04	; 4
    94e4:	9e c1       	rjmp	.+828    	; 0x9822 <FCloseShift+0x438>
			  */
	      break;
     case csWaitPumpLocked:	     
	      break;
     case csSendTotalizerALL:
	      lcd_clear();
    94e6:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
		  lcd_printf(1,1,PSTR("Totalizer.."));
    94ea:	81 e0       	ldi	r24, 0x01	; 1
    94ec:	61 e0       	ldi	r22, 0x01	; 1
    94ee:	46 e3       	ldi	r20, 0x36	; 54
    94f0:	57 e1       	ldi	r21, 0x17	; 23
    94f2:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  
		  sprintf_P(lcdteks,PSTR("Wait Pump:%d "),(ActivePump-CountTotalizerSatus(strPumpStatus)));
    94f6:	00 91 5d 01 	lds	r16, 0x015D
    94fa:	10 e0       	ldi	r17, 0x00	; 0
    94fc:	82 e0       	ldi	r24, 0x02	; 2
    94fe:	91 e0       	ldi	r25, 0x01	; 1
    9500:	0e 94 68 30 	call	0x60d0	; 0x60d0 <CountTotalizerSatus>
    9504:	00 d0       	rcall	.+0      	; 0x9506 <FCloseShift+0x11c>
    9506:	00 d0       	rcall	.+0      	; 0x9508 <FCloseShift+0x11e>
    9508:	00 d0       	rcall	.+0      	; 0x950a <FCloseShift+0x120>
    950a:	ed b7       	in	r30, 0x3d	; 61
    950c:	fe b7       	in	r31, 0x3e	; 62
    950e:	31 96       	adiw	r30, 0x01	; 1
    9510:	7e 01       	movw	r14, r28
    9512:	08 94       	sec
    9514:	e1 1c       	adc	r14, r1
    9516:	f1 1c       	adc	r15, r1
    9518:	ad b7       	in	r26, 0x3d	; 61
    951a:	be b7       	in	r27, 0x3e	; 62
    951c:	12 96       	adiw	r26, 0x02	; 2
    951e:	fc 92       	st	X, r15
    9520:	ee 92       	st	-X, r14
    9522:	11 97       	sbiw	r26, 0x01	; 1
    9524:	28 e2       	ldi	r18, 0x28	; 40
    9526:	37 e1       	ldi	r19, 0x17	; 23
    9528:	33 83       	std	Z+3, r19	; 0x03
    952a:	22 83       	std	Z+2, r18	; 0x02
    952c:	08 1b       	sub	r16, r24
    952e:	11 09       	sbc	r17, r1
    9530:	15 83       	std	Z+5, r17	; 0x05
    9532:	04 83       	std	Z+4, r16	; 0x04
    9534:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
		  lcd_print(2,1,lcdteks);
    9538:	ed b7       	in	r30, 0x3d	; 61
    953a:	fe b7       	in	r31, 0x3e	; 62
    953c:	36 96       	adiw	r30, 0x06	; 6
    953e:	0f b6       	in	r0, 0x3f	; 63
    9540:	f8 94       	cli
    9542:	fe bf       	out	0x3e, r31	; 62
    9544:	0f be       	out	0x3f, r0	; 63
    9546:	ed bf       	out	0x3d, r30	; 61
    9548:	82 e0       	ldi	r24, 0x02	; 2
    954a:	61 e0       	ldi	r22, 0x01	; 1
    954c:	a7 01       	movw	r20, r14
    954e:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>


          IsNewPumpStatus=True;
    9552:	11 e0       	ldi	r17, 0x01	; 1
    9554:	10 93 01 01 	sts	0x0101, r17
		  DisplayPumpStatus(); 
    9558:	0e 94 8f 49 	call	0x931e	; 0x931e <DisplayPumpStatus>
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
    955c:	95 e0       	ldi	r25, 0x05	; 5
    955e:	90 93 29 06 	sts	0x0629, r25
	 PoolMsg=plMsg;
    9562:	82 e1       	ldi	r24, 0x12	; 18
    9564:	80 93 55 0c 	sts	0x0C55, r24
     IsControlPooling=True;
    9568:	10 93 84 01 	sts	0x0184, r17
          IsNewPumpStatus=True;
		  DisplayPumpStatus(); 
		  //SendCommand
	      //SendSlaveCommand(SC_TOTALIZER,PUMP_ALL);          
		  SendPoolingCommand(SC_TOTALIZER,PUMP_ALL);
		  stCloseShift=csDisplayPumpStatus;
    956c:	90 93 49 02 	sts	0x0249, r25
    9570:	5f c1       	rjmp	.+702    	; 0x9830 <FCloseShift+0x446>
	      break;
     case csDisplayPumpStatus:
		  DisplayPumpStatus(); 
    9572:	0e 94 8f 49 	call	0x931e	; 0x931e <DisplayPumpStatus>
		  TimDisplay=0;         
    9576:	10 92 92 01 	sts	0x0192, r1
          stCloseShift=csWaitTotalizerComplete;
    957a:	86 e0       	ldi	r24, 0x06	; 6
    957c:	52 c1       	rjmp	.+676    	; 0x9822 <FCloseShift+0x438>
	      break;
     case csWaitTotalizerComplete:
	      KeyPressed=_key_scan(1);
    957e:	81 e0       	ldi	r24, 0x01	; 1
    9580:	0e 94 58 a6 	call	0x14cb0	; 0x14cb0 <_key_scan>
    9584:	d8 2e       	mov	r13, r24
		  if (IsNewPumpStatus==True){
    9586:	80 91 01 01 	lds	r24, 0x0101
    958a:	81 30       	cpi	r24, 0x01	; 1
    958c:	89 f5       	brne	.+98     	; 0x95f0 <FCloseShift+0x206>
			  sprintf_P(lcdteks,PSTR("Wait Pump:%d "),(ActivePump-CountTotalizerSatus(strPumpStatus)));
    958e:	00 91 5d 01 	lds	r16, 0x015D
    9592:	10 e0       	ldi	r17, 0x00	; 0
    9594:	82 e0       	ldi	r24, 0x02	; 2
    9596:	91 e0       	ldi	r25, 0x01	; 1
    9598:	0e 94 68 30 	call	0x60d0	; 0x60d0 <CountTotalizerSatus>
    959c:	00 d0       	rcall	.+0      	; 0x959e <FCloseShift+0x1b4>
    959e:	00 d0       	rcall	.+0      	; 0x95a0 <FCloseShift+0x1b6>
    95a0:	00 d0       	rcall	.+0      	; 0x95a2 <FCloseShift+0x1b8>
    95a2:	ed b7       	in	r30, 0x3d	; 61
    95a4:	fe b7       	in	r31, 0x3e	; 62
    95a6:	31 96       	adiw	r30, 0x01	; 1
    95a8:	7e 01       	movw	r14, r28
    95aa:	08 94       	sec
    95ac:	e1 1c       	adc	r14, r1
    95ae:	f1 1c       	adc	r15, r1
    95b0:	ad b7       	in	r26, 0x3d	; 61
    95b2:	be b7       	in	r27, 0x3e	; 62
    95b4:	12 96       	adiw	r26, 0x02	; 2
    95b6:	fc 92       	st	X, r15
    95b8:	ee 92       	st	-X, r14
    95ba:	11 97       	sbiw	r26, 0x01	; 1
    95bc:	2a e1       	ldi	r18, 0x1A	; 26
    95be:	37 e1       	ldi	r19, 0x17	; 23
    95c0:	33 83       	std	Z+3, r19	; 0x03
    95c2:	22 83       	std	Z+2, r18	; 0x02
    95c4:	08 1b       	sub	r16, r24
    95c6:	11 09       	sbc	r17, r1
    95c8:	15 83       	std	Z+5, r17	; 0x05
    95ca:	04 83       	std	Z+4, r16	; 0x04
    95cc:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
			  lcd_print(2,1,lcdteks);
    95d0:	ed b7       	in	r30, 0x3d	; 61
    95d2:	fe b7       	in	r31, 0x3e	; 62
    95d4:	36 96       	adiw	r30, 0x06	; 6
    95d6:	0f b6       	in	r0, 0x3f	; 63
    95d8:	f8 94       	cli
    95da:	fe bf       	out	0x3e, r31	; 62
    95dc:	0f be       	out	0x3f, r0	; 63
    95de:	ed bf       	out	0x3d, r30	; 61
    95e0:	82 e0       	ldi	r24, 0x02	; 2
    95e2:	61 e0       	ldi	r22, 0x01	; 1
    95e4:	a7 01       	movw	r20, r14
    95e6:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
		  	  stCloseShift=csDisplayPumpStatus;	 
    95ea:	85 e0       	ldi	r24, 0x05	; 5
    95ec:	80 93 49 02 	sts	0x0249, r24
		  }
		  if ((CountTotalizerSatus(strPumpStatus)>=ActivePump)&&(TimDisplay>5)){
    95f0:	82 e0       	ldi	r24, 0x02	; 2
    95f2:	91 e0       	ldi	r25, 0x01	; 1
    95f4:	0e 94 68 30 	call	0x60d0	; 0x60d0 <CountTotalizerSatus>
    95f8:	90 91 5d 01 	lds	r25, 0x015D
    95fc:	89 17       	cp	r24, r25
    95fe:	a0 f0       	brcs	.+40     	; 0x9628 <FCloseShift+0x23e>
    9600:	80 91 92 01 	lds	r24, 0x0192
    9604:	86 30       	cpi	r24, 0x06	; 6
    9606:	80 f0       	brcs	.+32     	; 0x9628 <FCloseShift+0x23e>
    9608:	10 e0       	ldi	r17, 0x00	; 0
    960a:	07 c0       	rjmp	.+14     	; 0x961a <FCloseShift+0x230>
		      for (FIPAddr=0;FIPAddr<ActivePump;FIPAddr++)
			       UpdateStandaloneStatus(GetPumpID(FIPAddr),PUMP_OFF);
    960c:	81 2f       	mov	r24, r17
    960e:	0e 94 87 20 	call	0x410e	; 0x410e <GetPumpID>
    9612:	66 e0       	ldi	r22, 0x06	; 6
    9614:	0e 94 2d 20 	call	0x405a	; 0x405a <UpdateStandaloneStatus>
			  sprintf_P(lcdteks,PSTR("Wait Pump:%d "),(ActivePump-CountTotalizerSatus(strPumpStatus)));
			  lcd_print(2,1,lcdteks);
		  	  stCloseShift=csDisplayPumpStatus;	 
		  }
		  if ((CountTotalizerSatus(strPumpStatus)>=ActivePump)&&(TimDisplay>5)){
		      for (FIPAddr=0;FIPAddr<ActivePump;FIPAddr++)
    9618:	1f 5f       	subi	r17, 0xFF	; 255
    961a:	80 91 5d 01 	lds	r24, 0x015D
    961e:	18 17       	cp	r17, r24
    9620:	a8 f3       	brcs	.-22     	; 0x960c <FCloseShift+0x222>
			       UpdateStandaloneStatus(GetPumpID(FIPAddr),PUMP_OFF);

		      stCloseShift=csGenerateReport;		      
    9622:	88 e0       	ldi	r24, 0x08	; 8
    9624:	80 93 49 02 	sts	0x0249, r24
			  }
          //sprintf_P(lcdteks,PSTR("TimSend:%d"),TimDisplay);
		  //lcd_print(3,1,lcdteks);

          if ((TimDisplay>15)&&(IsPumpBusy!=True)){
    9628:	80 91 92 01 	lds	r24, 0x0192
    962c:	80 31       	cpi	r24, 0x10	; 16
    962e:	08 f4       	brcc	.+2      	; 0x9632 <FCloseShift+0x248>
    9630:	60 c0       	rjmp	.+192    	; 0x96f2 <FCloseShift+0x308>
    9632:	80 91 48 02 	lds	r24, 0x0248
    9636:	81 30       	cpi	r24, 0x01	; 1
    9638:	09 f4       	brne	.+2      	; 0x963c <FCloseShift+0x252>
    963a:	5b c0       	rjmp	.+182    	; 0x96f2 <FCloseShift+0x308>
		      if(CountNoPumpSatus(strPumpStatus)>=eeprom_read_byte(&DefActivePump)){
    963c:	82 e0       	ldi	r24, 0x02	; 2
    963e:	91 e0       	ldi	r25, 0x01	; 1
    9640:	0e 94 00 17 	call	0x2e00	; 0x2e00 <CountNoPumpSatus>
    9644:	18 2f       	mov	r17, r24
    9646:	8a e4       	ldi	r24, 0x4A	; 74
    9648:	91 e0       	ldi	r25, 0x01	; 1
    964a:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
    964e:	18 17       	cp	r17, r24
    9650:	08 f4       	brcc	.+2      	; 0x9654 <FCloseShift+0x26a>
    9652:	4f c0       	rjmp	.+158    	; 0x96f2 <FCloseShift+0x308>
			  //lcd_printf(2,1,PSTR("NoPumpFound  ")); 
			  //sprintf_P(lcdteks,PSTR("NoPumpFound:%d"),CountNoPumpSatus(strPumpStatus));
			  sprintf_P(lcdteks,PSTR("Error - No Pump:%d "),ActivePump-CountNoPumpSatus(strPumpStatus));
    9654:	00 91 5d 01 	lds	r16, 0x015D
    9658:	10 e0       	ldi	r17, 0x00	; 0
    965a:	82 e0       	ldi	r24, 0x02	; 2
    965c:	91 e0       	ldi	r25, 0x01	; 1
    965e:	0e 94 00 17 	call	0x2e00	; 0x2e00 <CountNoPumpSatus>
    9662:	00 d0       	rcall	.+0      	; 0x9664 <FCloseShift+0x27a>
    9664:	00 d0       	rcall	.+0      	; 0x9666 <FCloseShift+0x27c>
    9666:	00 d0       	rcall	.+0      	; 0x9668 <FCloseShift+0x27e>
    9668:	ed b7       	in	r30, 0x3d	; 61
    966a:	fe b7       	in	r31, 0x3e	; 62
    966c:	31 96       	adiw	r30, 0x01	; 1
    966e:	7e 01       	movw	r14, r28
    9670:	08 94       	sec
    9672:	e1 1c       	adc	r14, r1
    9674:	f1 1c       	adc	r15, r1
    9676:	ad b7       	in	r26, 0x3d	; 61
    9678:	be b7       	in	r27, 0x3e	; 62
    967a:	12 96       	adiw	r26, 0x02	; 2
    967c:	fc 92       	st	X, r15
    967e:	ee 92       	st	-X, r14
    9680:	11 97       	sbiw	r26, 0x01	; 1
    9682:	26 e0       	ldi	r18, 0x06	; 6
    9684:	37 e1       	ldi	r19, 0x17	; 23
    9686:	33 83       	std	Z+3, r19	; 0x03
    9688:	22 83       	std	Z+2, r18	; 0x02
    968a:	08 1b       	sub	r16, r24
    968c:	11 09       	sbc	r17, r1
    968e:	15 83       	std	Z+5, r17	; 0x05
    9690:	04 83       	std	Z+4, r16	; 0x04
    9692:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
			  lcd_print(3,1,lcdteks);
    9696:	ed b7       	in	r30, 0x3d	; 61
    9698:	fe b7       	in	r31, 0x3e	; 62
    969a:	36 96       	adiw	r30, 0x06	; 6
    969c:	0f b6       	in	r0, 0x3f	; 63
    969e:	f8 94       	cli
    96a0:	fe bf       	out	0x3e, r31	; 62
    96a2:	0f be       	out	0x3f, r0	; 63
    96a4:	ed bf       	out	0x3d, r30	; 61
    96a6:	83 e0       	ldi	r24, 0x03	; 3
    96a8:	61 e0       	ldi	r22, 0x01	; 1
    96aa:	a7 01       	movw	r20, r14
    96ac:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
    96b0:	10 e0       	ldi	r17, 0x00	; 0
    96b2:	11 c0       	rjmp	.+34     	; 0x96d6 <FCloseShift+0x2ec>
			  
			  for (FIPAddr=0;FIPAddr<ActivePump;FIPAddr++){
		           if (strPumpStatus[FIPAddr]==GetPumpStatusLabel(PS_TOTALIZER))
    96b4:	84 e1       	ldi	r24, 0x14	; 20
    96b6:	0e 94 41 14 	call	0x2882	; 0x2882 <GetPumpStatusLabel>
    96ba:	e1 2f       	mov	r30, r17
    96bc:	f0 e0       	ldi	r31, 0x00	; 0
    96be:	ee 5f       	subi	r30, 0xFE	; 254
    96c0:	fe 4f       	sbci	r31, 0xFE	; 254
    96c2:	90 81       	ld	r25, Z
    96c4:	98 17       	cp	r25, r24
    96c6:	31 f4       	brne	.+12     	; 0x96d4 <FCloseShift+0x2ea>
			           UpdateStandaloneStatus(GetPumpID(FIPAddr),PUMP_OFF);
    96c8:	81 2f       	mov	r24, r17
    96ca:	0e 94 87 20 	call	0x410e	; 0x410e <GetPumpID>
    96ce:	66 e0       	ldi	r22, 0x06	; 6
    96d0:	0e 94 2d 20 	call	0x405a	; 0x405a <UpdateStandaloneStatus>
			  //lcd_printf(2,1,PSTR("NoPumpFound  ")); 
			  //sprintf_P(lcdteks,PSTR("NoPumpFound:%d"),CountNoPumpSatus(strPumpStatus));
			  sprintf_P(lcdteks,PSTR("Error - No Pump:%d "),ActivePump-CountNoPumpSatus(strPumpStatus));
			  lcd_print(3,1,lcdteks);
			  
			  for (FIPAddr=0;FIPAddr<ActivePump;FIPAddr++){
    96d4:	1f 5f       	subi	r17, 0xFF	; 255
    96d6:	80 91 5d 01 	lds	r24, 0x015D
    96da:	18 17       	cp	r17, r24
    96dc:	58 f3       	brcs	.-42     	; 0x96b4 <FCloseShift+0x2ca>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    96de:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    96e0:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    96e2:	81 e0       	ldi	r24, 0x01	; 1
    96e4:	80 93 bc 01 	sts	0x01BC, r24
		           if (strPumpStatus[FIPAddr]==GetPumpStatusLabel(PS_TOTALIZER))
			           UpdateStandaloneStatus(GetPumpID(FIPAddr),PUMP_OFF);
			  }

			  system_beep(1);
			  TimDisplay=0;
    96e8:	10 92 92 01 	sts	0x0192, r1
			  stCloseShift=csNoPumpFound;		     
    96ec:	87 e0       	ldi	r24, 0x07	; 7
    96ee:	80 93 49 02 	sts	0x0249, r24
			  }			  
		  }
		  if (KeyPressed==_KEY_CANCEL){
    96f2:	f7 ee       	ldi	r31, 0xE7	; 231
    96f4:	df 16       	cp	r13, r31
    96f6:	09 f0       	breq	.+2      	; 0x96fa <FCloseShift+0x310>
    96f8:	9b c0       	rjmp	.+310    	; 0x9830 <FCloseShift+0x446>
			  sprintf_P(lcdteks,PSTR("Cancel"));
    96fa:	00 d0       	rcall	.+0      	; 0x96fc <FCloseShift+0x312>
    96fc:	00 d0       	rcall	.+0      	; 0x96fe <FCloseShift+0x314>
    96fe:	8e 01       	movw	r16, r28
    9700:	0f 5f       	subi	r16, 0xFF	; 255
    9702:	1f 4f       	sbci	r17, 0xFF	; 255
    9704:	ad b7       	in	r26, 0x3d	; 61
    9706:	be b7       	in	r27, 0x3e	; 62
    9708:	12 96       	adiw	r26, 0x02	; 2
    970a:	1c 93       	st	X, r17
    970c:	0e 93       	st	-X, r16
    970e:	11 97       	sbiw	r26, 0x01	; 1
    9710:	8f ef       	ldi	r24, 0xFF	; 255
    9712:	96 e1       	ldi	r25, 0x16	; 22
    9714:	14 96       	adiw	r26, 0x04	; 4
    9716:	9c 93       	st	X, r25
    9718:	8e 93       	st	-X, r24
    971a:	13 97       	sbiw	r26, 0x03	; 3
    971c:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
			  lcd_print(3,1,lcdteks);
    9720:	0f 90       	pop	r0
    9722:	0f 90       	pop	r0
    9724:	0f 90       	pop	r0
    9726:	0f 90       	pop	r0
    9728:	83 e0       	ldi	r24, 0x03	; 3
    972a:	61 e0       	ldi	r22, 0x01	; 1
    972c:	a8 01       	movw	r20, r16
    972e:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    9732:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    9734:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    9736:	81 e0       	ldi	r24, 0x01	; 1
    9738:	80 93 bc 01 	sts	0x01BC, r24
		  }
		  if (KeyPressed==_KEY_CANCEL){
			  sprintf_P(lcdteks,PSTR("Cancel"));
			  lcd_print(3,1,lcdteks);
			  system_beep(1);
			  TimDisplay=0;
    973c:	10 92 92 01 	sts	0x0192, r1
			  stCloseShift=csNoPumpFound;		     		  
    9740:	87 e0       	ldi	r24, 0x07	; 7
    9742:	6f c0       	rjmp	.+222    	; 0x9822 <FCloseShift+0x438>
		  }
	      break;
     case csNoPumpFound:
	      if (TimDisplay>TIM_DISPLAY){
    9744:	80 91 92 01 	lds	r24, 0x0192
    9748:	8b 30       	cpi	r24, 0x0B	; 11
    974a:	08 f4       	brcc	.+2      	; 0x974e <FCloseShift+0x364>
    974c:	71 c0       	rjmp	.+226    	; 0x9830 <FCloseShift+0x446>
    974e:	68 c0       	rjmp	.+208    	; 0x9820 <FCloseShift+0x436>
		      stCloseShift=csFinishCloseShift;
		  }	      
	      break;
     case csGenerateReport:
		  lcd_printf(1,1,PSTR("Printing Totalizer"));
    9750:	81 e0       	ldi	r24, 0x01	; 1
    9752:	61 e0       	ldi	r22, 0x01	; 1
    9754:	4c ee       	ldi	r20, 0xEC	; 236
    9756:	56 e1       	ldi	r21, 0x16	; 22
    9758:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
          _datetime(0, strSystemDate, strSystemTime);
    975c:	0c e3       	ldi	r16, 0x3C	; 60
    975e:	14 e0       	ldi	r17, 0x04	; 4
    9760:	86 ef       	ldi	r24, 0xF6	; 246
    9762:	e8 2e       	mov	r14, r24
    9764:	88 e0       	ldi	r24, 0x08	; 8
    9766:	f8 2e       	mov	r15, r24
    9768:	80 e0       	ldi	r24, 0x00	; 0
    976a:	b8 01       	movw	r22, r16
    976c:	a7 01       	movw	r20, r14
    976e:	0e 94 b9 a7 	call	0x14f72	; 0x14f72 <_datetime>
		  sprintf_P(CurrentShiftDateTime,PSTR("%s %s"),strSystemDate,strSystemTime);
    9772:	ed b7       	in	r30, 0x3d	; 61
    9774:	fe b7       	in	r31, 0x3e	; 62
    9776:	38 97       	sbiw	r30, 0x08	; 8
    9778:	0f b6       	in	r0, 0x3f	; 63
    977a:	f8 94       	cli
    977c:	fe bf       	out	0x3e, r31	; 62
    977e:	0f be       	out	0x3f, r0	; 63
    9780:	ed bf       	out	0x3d, r30	; 61
    9782:	31 96       	adiw	r30, 0x01	; 1
    9784:	80 e1       	ldi	r24, 0x10	; 16
    9786:	98 e0       	ldi	r25, 0x08	; 8
    9788:	ad b7       	in	r26, 0x3d	; 61
    978a:	be b7       	in	r27, 0x3e	; 62
    978c:	12 96       	adiw	r26, 0x02	; 2
    978e:	9c 93       	st	X, r25
    9790:	8e 93       	st	-X, r24
    9792:	11 97       	sbiw	r26, 0x01	; 1
    9794:	86 ee       	ldi	r24, 0xE6	; 230
    9796:	96 e1       	ldi	r25, 0x16	; 22
    9798:	93 83       	std	Z+3, r25	; 0x03
    979a:	82 83       	std	Z+2, r24	; 0x02
    979c:	15 83       	std	Z+5, r17	; 0x05
    979e:	04 83       	std	Z+4, r16	; 0x04
    97a0:	f7 82       	std	Z+7, r15	; 0x07
    97a2:	e6 82       	std	Z+6, r14	; 0x06
    97a4:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
		  IsGenerateReport=True;
    97a8:	81 e0       	ldi	r24, 0x01	; 1
    97aa:	80 93 86 01 	sts	0x0186, r24
		  IsFinishPrintingTotalizer=False;
    97ae:	10 92 87 01 	sts	0x0187, r1
		  stCloseShift=csWaitPrintTotalizerComplete;
    97b2:	8a e0       	ldi	r24, 0x0A	; 10
    97b4:	80 93 49 02 	sts	0x0249, r24
    97b8:	80 e0       	ldi	r24, 0x00	; 0
    97ba:	ed b7       	in	r30, 0x3d	; 61
    97bc:	fe b7       	in	r31, 0x3e	; 62
    97be:	38 96       	adiw	r30, 0x08	; 8
    97c0:	0f b6       	in	r0, 0x3f	; 63
    97c2:	f8 94       	cli
    97c4:	fe bf       	out	0x3e, r31	; 62
    97c6:	0f be       	out	0x3f, r0	; 63
    97c8:	ed bf       	out	0x3d, r30	; 61
    97ca:	33 c0       	rjmp	.+102    	; 0x9832 <FCloseShift+0x448>
	      break;
     case csWaitTotalizerALL:
	      break;
     case csWaitPrintTotalizerComplete:
	      if (IsFinishPrintingTotalizer==True){
    97cc:	80 91 87 01 	lds	r24, 0x0187
    97d0:	81 30       	cpi	r24, 0x01	; 1
    97d2:	71 f5       	brne	.+92     	; 0x9830 <FCloseShift+0x446>
		      IsFinishPrintingTotalizer=False;
    97d4:	10 92 87 01 	sts	0x0187, r1
		      stCloseShift=csDumpShift;
    97d8:	8c e0       	ldi	r24, 0x0C	; 12
    97da:	23 c0       	rjmp	.+70     	; 0x9822 <FCloseShift+0x438>
		  }
	      break;
     case csDumpShift://Increment CurrentShift save Current to Last
		  lcd_printf(1,1,PSTR("Saving ShiftData.. "));
    97dc:	81 e0       	ldi	r24, 0x01	; 1
    97de:	61 e0       	ldi	r22, 0x01	; 1
    97e0:	42 ed       	ldi	r20, 0xD2	; 210
    97e2:	56 e1       	ldi	r21, 0x16	; 22
    97e4:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
	      if (ShiftType==CONTINUE_SHIFT)//Shift=Shift+1
    97e8:	12 30       	cpi	r17, 0x02	; 2
    97ea:	49 f4       	brne	.+18     	; 0x97fe <FCloseShift+0x414>
		      eeprom_write_byte(&DefShift,eeprom_read_byte(&DefShift)+1);	 
    97ec:	80 e4       	ldi	r24, 0x40	; 64
    97ee:	91 e0       	ldi	r25, 0x01	; 1
    97f0:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
    97f4:	68 2f       	mov	r22, r24
    97f6:	6f 5f       	subi	r22, 0xFF	; 255
    97f8:	80 e4       	ldi	r24, 0x40	; 64
    97fa:	91 e0       	ldi	r25, 0x01	; 1
    97fc:	05 c0       	rjmp	.+10     	; 0x9808 <FCloseShift+0x41e>
          else if (ShiftType==NEW_SHIFT)//Shift=1
    97fe:	11 30       	cpi	r17, 0x01	; 1
    9800:	29 f4       	brne	.+10     	; 0x980c <FCloseShift+0x422>
		      eeprom_write_byte(&DefShift,1);	 
    9802:	80 e4       	ldi	r24, 0x40	; 64
    9804:	91 e0       	ldi	r25, 0x01	; 1
    9806:	61 e0       	ldi	r22, 0x01	; 1
    9808:	0e 94 3d ad 	call	0x15a7a	; 0x15a7a <__eewr_byte_m128>

          SaveTotalizerCurrentToLast();
    980c:	0e 94 91 28 	call	0x5122	; 0x5122 <SaveTotalizerCurrentToLast>
          eeprom_write_block((const void*) &CurrentShiftDateTime, (void*) &DefLastShiftDateTime,sizeof(DefLastShiftDateTime));
    9810:	80 e1       	ldi	r24, 0x10	; 16
    9812:	98 e0       	ldi	r25, 0x08	; 8
    9814:	64 e4       	ldi	r22, 0x44	; 68
    9816:	78 e0       	ldi	r23, 0x08	; 8
    9818:	44 e1       	ldi	r20, 0x14	; 20
    981a:	50 e0       	ldi	r21, 0x00	; 0
    981c:	0e 94 33 ad 	call	0x15a66	; 0x15a66 <__eewr_block_m128>
		  stCloseShift=csFinishCloseShift;
    9820:	8b e0       	ldi	r24, 0x0B	; 11
    9822:	80 93 49 02 	sts	0x0249, r24
    9826:	04 c0       	rjmp	.+8      	; 0x9830 <FCloseShift+0x446>
	      break;
     case csFinishCloseShift:
          stCloseShift=csInitCloseShift;
    9828:	10 92 49 02 	sts	0x0249, r1
    982c:	81 e0       	ldi	r24, 0x01	; 1
    982e:	01 c0       	rjmp	.+2      	; 0x9832 <FCloseShift+0x448>
    9830:	80 e0       	ldi	r24, 0x00	; 0
		  Result=MENU_DONE;
	      break;
	 }
	 //uart_printf(0,1,PSTR("Close Shift"));	
   return Result;
}
    9832:	64 96       	adiw	r28, 0x14	; 20
    9834:	0f b6       	in	r0, 0x3f	; 63
    9836:	f8 94       	cli
    9838:	de bf       	out	0x3e, r29	; 62
    983a:	0f be       	out	0x3f, r0	; 63
    983c:	cd bf       	out	0x3d, r28	; 61
    983e:	cf 91       	pop	r28
    9840:	df 91       	pop	r29
    9842:	1f 91       	pop	r17
    9844:	0f 91       	pop	r16
    9846:	ff 90       	pop	r15
    9848:	ef 90       	pop	r14
    984a:	df 90       	pop	r13
    984c:	08 95       	ret

0000984e <_menu_host>:
			lcd_print(__x, __y, __buff);
		}
	}
}

void _menu_host(void){
    984e:	4f 92       	push	r4
    9850:	5f 92       	push	r5
    9852:	6f 92       	push	r6
    9854:	7f 92       	push	r7
    9856:	8f 92       	push	r8
    9858:	9f 92       	push	r9
    985a:	bf 92       	push	r11
    985c:	cf 92       	push	r12
    985e:	df 92       	push	r13
    9860:	ef 92       	push	r14
    9862:	ff 92       	push	r15
    9864:	0f 93       	push	r16
    9866:	1f 93       	push	r17
    9868:	df 93       	push	r29
    986a:	cf 93       	push	r28
    986c:	cd b7       	in	r28, 0x3d	; 61
    986e:	de b7       	in	r29, 0x3e	; 62
    9870:	6d 97       	sbiw	r28, 0x1d	; 29
    9872:	0f b6       	in	r0, 0x3f	; 63
    9874:	f8 94       	cli
    9876:	de bf       	out	0x3e, r29	; 62
    9878:	0f be       	out	0x3f, r0	; 63
    987a:	cd bf       	out	0x3d, r28	; 61
	char 			__value[4];
	unsigned char	__i, __x, __y, __key, __num, __buff[5];
	char lcdteks[20];
	char TermID;

	__value[0] = eeprom_read_byte(&DefPrintMoney);
    987c:	82 ec       	ldi	r24, 0xC2	; 194
    987e:	93 e0       	ldi	r25, 0x03	; 3
    9880:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
    9884:	89 83       	std	Y+1, r24	; 0x01
	__value[1] = eeprom_read_byte(&DefShowDateTime);
    9886:	87 e3       	ldi	r24, 0x37	; 55
    9888:	90 e0       	ldi	r25, 0x00	; 0
    988a:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
    988e:	8a 83       	std	Y+2, r24	; 0x02
	__value[2] = eeprom_read_byte(&DefNotifScreen);
    9890:	88 e3       	ldi	r24, 0x38	; 56
    9892:	90 e0       	ldi	r25, 0x00	; 0
    9894:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
    9898:	8b 83       	std	Y+3, r24	; 0x03
	TermID= eeprom_read_byte(&DefIFT_ID);
    989a:	80 e0       	ldi	r24, 0x00	; 0
    989c:	90 e0       	ldi	r25, 0x00	; 0
    989e:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
    98a2:	b8 2e       	mov	r11, r24


	lcd_clear();_delay_ms(10);
    98a4:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
    98a8:	84 ec       	ldi	r24, 0xC4	; 196
    98aa:	99 e0       	ldi	r25, 0x09	; 9
    98ac:	01 97       	sbiw	r24, 0x01	; 1
    98ae:	f1 f7       	brne	.-4      	; 0x98ac <_menu_host+0x5e>
	lcd_printf(1, 1, PSTR("1)Money :"));
    98b0:	81 e0       	ldi	r24, 0x01	; 1
    98b2:	61 e0       	ldi	r22, 0x01	; 1
    98b4:	4c eb       	ldi	r20, 0xBC	; 188
    98b6:	5c e0       	ldi	r21, 0x0C	; 12
    98b8:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
	lcd_printf(2, 1, PSTR("2)D/T   :"));
    98bc:	82 e0       	ldi	r24, 0x02	; 2
    98be:	61 e0       	ldi	r22, 0x01	; 1
    98c0:	42 eb       	ldi	r20, 0xB2	; 178
    98c2:	5c e0       	ldi	r21, 0x0C	; 12
    98c4:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
	lcd_printf(3, 1, PSTR("3)Notif :     *)Exit"));
    98c8:	83 e0       	ldi	r24, 0x03	; 3
    98ca:	61 e0       	ldi	r22, 0x01	; 1
    98cc:	4d e9       	ldi	r20, 0x9D	; 157
    98ce:	5c e0       	ldi	r21, 0x0C	; 12
    98d0:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
    sprintf_P(lcdteks,PSTR("4)TermID:%d "),TermID);
    98d4:	00 d0       	rcall	.+0      	; 0x98d6 <_menu_host+0x88>
    98d6:	00 d0       	rcall	.+0      	; 0x98d8 <_menu_host+0x8a>
    98d8:	00 d0       	rcall	.+0      	; 0x98da <_menu_host+0x8c>
    98da:	ed b7       	in	r30, 0x3d	; 61
    98dc:	fe b7       	in	r31, 0x3e	; 62
    98de:	31 96       	adiw	r30, 0x01	; 1
    98e0:	8e 01       	movw	r16, r28
    98e2:	06 5f       	subi	r16, 0xF6	; 246
    98e4:	1f 4f       	sbci	r17, 0xFF	; 255
    98e6:	ad b7       	in	r26, 0x3d	; 61
    98e8:	be b7       	in	r27, 0x3e	; 62
    98ea:	12 96       	adiw	r26, 0x02	; 2
    98ec:	1c 93       	st	X, r17
    98ee:	0e 93       	st	-X, r16
    98f0:	11 97       	sbiw	r26, 0x01	; 1
    98f2:	80 e9       	ldi	r24, 0x90	; 144
    98f4:	9c e0       	ldi	r25, 0x0C	; 12
    98f6:	93 83       	std	Z+3, r25	; 0x03
    98f8:	82 83       	std	Z+2, r24	; 0x02
    98fa:	b4 82       	std	Z+4, r11	; 0x04
    98fc:	15 82       	std	Z+5, r1	; 0x05
    98fe:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	lcd_print(4, 1,lcdteks);
    9902:	ed b7       	in	r30, 0x3d	; 61
    9904:	fe b7       	in	r31, 0x3e	; 62
    9906:	36 96       	adiw	r30, 0x06	; 6
    9908:	0f b6       	in	r0, 0x3f	; 63
    990a:	f8 94       	cli
    990c:	fe bf       	out	0x3e, r31	; 62
    990e:	0f be       	out	0x3f, r0	; 63
    9910:	ed bf       	out	0x3d, r30	; 61
    9912:	84 e0       	ldi	r24, 0x04	; 4
    9914:	61 e0       	ldi	r22, 0x01	; 1
    9916:	a8 01       	movw	r20, r16
    9918:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
	lcd_printf(4, 15, PSTR("#)Save"));
    991c:	84 e0       	ldi	r24, 0x04	; 4
    991e:	6f e0       	ldi	r22, 0x0F	; 15
    9920:	49 e8       	ldi	r20, 0x89	; 137
    9922:	5c e0       	ldi	r21, 0x0C	; 12
    9924:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
    9928:	e2 ed       	ldi	r30, 0xD2	; 210
    992a:	ee 2e       	mov	r14, r30
    992c:	e2 e0       	ldi	r30, 0x02	; 2
    992e:	fe 2e       	mov	r15, r30
    9930:	6e 01       	movw	r12, r28
    9932:	08 94       	sec
    9934:	c1 1c       	adc	r12, r1
    9936:	d1 1c       	adc	r13, r1

	for(__i = 0; __i < 3; __i++){
		__x = pgm_read_byte(&__hostloc[__i][0]);
		__y = pgm_read_byte(&__hostloc[__i][1]);
		sprintf_P(__buff,PSTR("%d"),__value[__i]);
    9938:	75 e0       	ldi	r23, 0x05	; 5
    993a:	87 2e       	mov	r8, r23
    993c:	91 2c       	mov	r9, r1
    993e:	8c 0e       	add	r8, r28
    9940:	9d 1e       	adc	r9, r29
    9942:	66 e8       	ldi	r22, 0x86	; 134
    9944:	66 2e       	mov	r6, r22
    9946:	6c e0       	ldi	r22, 0x0C	; 12
    9948:	76 2e       	mov	r7, r22
    sprintf_P(lcdteks,PSTR("4)TermID:%d "),TermID);
	lcd_print(4, 1,lcdteks);
	lcd_printf(4, 15, PSTR("#)Save"));

	for(__i = 0; __i < 3; __i++){
		__x = pgm_read_byte(&__hostloc[__i][0]);
    994a:	f7 01       	movw	r30, r14
    994c:	04 91       	lpm	r16, Z+
		__y = pgm_read_byte(&__hostloc[__i][1]);
    994e:	08 94       	sec
    9950:	e1 1c       	adc	r14, r1
    9952:	f1 1c       	adc	r15, r1
    9954:	f7 01       	movw	r30, r14
    9956:	14 91       	lpm	r17, Z+
		sprintf_P(__buff,PSTR("%d"),__value[__i]);
    9958:	00 d0       	rcall	.+0      	; 0x995a <_menu_host+0x10c>
    995a:	00 d0       	rcall	.+0      	; 0x995c <_menu_host+0x10e>
    995c:	00 d0       	rcall	.+0      	; 0x995e <_menu_host+0x110>
    995e:	ed b7       	in	r30, 0x3d	; 61
    9960:	fe b7       	in	r31, 0x3e	; 62
    9962:	31 96       	adiw	r30, 0x01	; 1
    9964:	ad b7       	in	r26, 0x3d	; 61
    9966:	be b7       	in	r27, 0x3e	; 62
    9968:	12 96       	adiw	r26, 0x02	; 2
    996a:	9c 92       	st	X, r9
    996c:	8e 92       	st	-X, r8
    996e:	11 97       	sbiw	r26, 0x01	; 1
    9970:	73 82       	std	Z+3, r7	; 0x03
    9972:	62 82       	std	Z+2, r6	; 0x02
    9974:	d6 01       	movw	r26, r12
    9976:	8d 91       	ld	r24, X+
    9978:	6d 01       	movw	r12, r26
    997a:	84 83       	std	Z+4, r24	; 0x04
    997c:	15 82       	std	Z+5, r1	; 0x05
    997e:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
		//_f_inttostr(__buff, __value[__i]);
		lcd_print(__x, __y, __buff);
    9982:	ed b7       	in	r30, 0x3d	; 61
    9984:	fe b7       	in	r31, 0x3e	; 62
    9986:	36 96       	adiw	r30, 0x06	; 6
    9988:	0f b6       	in	r0, 0x3f	; 63
    998a:	f8 94       	cli
    998c:	fe bf       	out	0x3e, r31	; 62
    998e:	0f be       	out	0x3f, r0	; 63
    9990:	ed bf       	out	0x3d, r30	; 61
    9992:	80 2f       	mov	r24, r16
    9994:	61 2f       	mov	r22, r17
    9996:	a4 01       	movw	r20, r8
    9998:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
    999c:	08 94       	sec
    999e:	e1 1c       	adc	r14, r1
    99a0:	f1 1c       	adc	r15, r1
	lcd_printf(3, 1, PSTR("3)Notif :     *)Exit"));
    sprintf_P(lcdteks,PSTR("4)TermID:%d "),TermID);
	lcd_print(4, 1,lcdteks);
	lcd_printf(4, 15, PSTR("#)Save"));

	for(__i = 0; __i < 3; __i++){
    99a2:	f8 ed       	ldi	r31, 0xD8	; 216
    99a4:	ef 16       	cp	r14, r31
    99a6:	f2 e0       	ldi	r31, 0x02	; 2
    99a8:	ff 06       	cpc	r15, r31
    99aa:	79 f6       	brne	.-98     	; 0x994a <_menu_host+0xfc>
			lcd_print(__x, __y, __buff);
		}else
		if (__num=='4'){
		    if (TermID<=99)TermID++;
			else TermID=1;
	     sprintf_P(lcdteks,PSTR("4)TermID:%d "),TermID);
    99ac:	5a e0       	ldi	r21, 0x0A	; 10
    99ae:	85 2e       	mov	r8, r21
    99b0:	91 2c       	mov	r9, r1
    99b2:	8c 0e       	add	r8, r28
    99b4:	9d 1e       	adc	r9, r29
    99b6:	46 e7       	ldi	r20, 0x76	; 118
    99b8:	44 2e       	mov	r4, r20
    99ba:	4c e0       	ldi	r20, 0x0C	; 12
    99bc:	54 2e       	mov	r5, r20
			eeprom_write_byte(&DefNotifScreen, __value[2]);
			eeprom_write_byte(&DefIFT_ID,TermID);
			break;
		}
		if(__num >= 0x31 && __num <= 0x33){
			if(__value[__num - 0x31] == 1)
    99be:	6e 01       	movw	r12, r28
    99c0:	08 94       	sec
    99c2:	c1 1c       	adc	r12, r1
    99c4:	d1 1c       	adc	r13, r1
				__value[__num - 0x31] = 0;
			else
				__value[__num - 0x31]++;
			__x = pgm_read_byte(&__hostloc[__num - 0x31][0]);
			__y = pgm_read_byte(&__hostloc[__num - 0x31][1]);
			sprintf_P(__buff,PSTR("%d"),__value[__num - 0x31]);
    99c6:	35 e0       	ldi	r19, 0x05	; 5
    99c8:	e3 2e       	mov	r14, r19
    99ca:	f1 2c       	mov	r15, r1
    99cc:	ec 0e       	add	r14, r28
    99ce:	fd 1e       	adc	r15, r29
    99d0:	23 e8       	ldi	r18, 0x83	; 131
    99d2:	62 2e       	mov	r6, r18
    99d4:	2c e0       	ldi	r18, 0x0C	; 12
    99d6:	72 2e       	mov	r7, r18
		//_f_inttostr(__buff, __value[__i]);
		lcd_print(__x, __y, __buff);
	}

	while(1){
		__key = _key_scan(1);
    99d8:	81 e0       	ldi	r24, 0x01	; 1
    99da:	0e 94 58 a6 	call	0x14cb0	; 0x14cb0 <_key_scan>
    99de:	18 2f       	mov	r17, r24
		__num = _key_btn(__key);
    99e0:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <_key_btn>
    99e4:	98 2f       	mov	r25, r24

		if(__key == _KEY_CANCEL)
    99e6:	17 3e       	cpi	r17, 0xE7	; 231
    99e8:	09 f4       	brne	.+2      	; 0x99ec <_menu_host+0x19e>
    99ea:	8a c0       	rjmp	.+276    	; 0x9b00 <_menu_host+0x2b2>
			return;
		if(__key==_KEY_ENTER){
    99ec:	17 3b       	cpi	r17, 0xB7	; 183
    99ee:	a9 f4       	brne	.+42     	; 0x9a1a <_menu_host+0x1cc>
			eeprom_write_byte(&DefPrintMoney, __value[0]);
    99f0:	82 ec       	ldi	r24, 0xC2	; 194
    99f2:	93 e0       	ldi	r25, 0x03	; 3
    99f4:	69 81       	ldd	r22, Y+1	; 0x01
    99f6:	0e 94 3d ad 	call	0x15a7a	; 0x15a7a <__eewr_byte_m128>
			eeprom_write_byte(&DefShowDateTime, __value[1]);
    99fa:	87 e3       	ldi	r24, 0x37	; 55
    99fc:	90 e0       	ldi	r25, 0x00	; 0
    99fe:	6a 81       	ldd	r22, Y+2	; 0x02
    9a00:	0e 94 3d ad 	call	0x15a7a	; 0x15a7a <__eewr_byte_m128>
			eeprom_write_byte(&DefNotifScreen, __value[2]);
    9a04:	88 e3       	ldi	r24, 0x38	; 56
    9a06:	90 e0       	ldi	r25, 0x00	; 0
    9a08:	6b 81       	ldd	r22, Y+3	; 0x03
    9a0a:	0e 94 3d ad 	call	0x15a7a	; 0x15a7a <__eewr_byte_m128>
			eeprom_write_byte(&DefIFT_ID,TermID);
    9a0e:	80 e0       	ldi	r24, 0x00	; 0
    9a10:	90 e0       	ldi	r25, 0x00	; 0
    9a12:	6b 2d       	mov	r22, r11
    9a14:	0e 94 3d ad 	call	0x15a7a	; 0x15a7a <__eewr_byte_m128>
    9a18:	73 c0       	rjmp	.+230    	; 0x9b00 <_menu_host+0x2b2>
			break;
		}
		if(__num >= 0x31 && __num <= 0x33){
    9a1a:	81 53       	subi	r24, 0x31	; 49
    9a1c:	83 30       	cpi	r24, 0x03	; 3
    9a1e:	08 f0       	brcs	.+2      	; 0x9a22 <_menu_host+0x1d4>
    9a20:	3f c0       	rjmp	.+126    	; 0x9aa0 <_menu_host+0x252>
			if(__value[__num - 0x31] == 1)
    9a22:	a9 2f       	mov	r26, r25
    9a24:	b0 e0       	ldi	r27, 0x00	; 0
    9a26:	d1 97       	sbiw	r26, 0x31	; 49
    9a28:	f6 01       	movw	r30, r12
    9a2a:	ea 0f       	add	r30, r26
    9a2c:	fb 1f       	adc	r31, r27
    9a2e:	80 81       	ld	r24, Z
    9a30:	81 30       	cpi	r24, 0x01	; 1
    9a32:	11 f4       	brne	.+4      	; 0x9a38 <_menu_host+0x1ea>
				__value[__num - 0x31] = 0;
    9a34:	10 82       	st	Z, r1
    9a36:	02 c0       	rjmp	.+4      	; 0x9a3c <_menu_host+0x1ee>
			else
				__value[__num - 0x31]++;
    9a38:	8f 5f       	subi	r24, 0xFF	; 255
    9a3a:	80 83       	st	Z, r24
			__x = pgm_read_byte(&__hostloc[__num - 0x31][0]);
    9a3c:	29 2f       	mov	r18, r25
    9a3e:	30 e0       	ldi	r19, 0x00	; 0
    9a40:	21 53       	subi	r18, 0x31	; 49
    9a42:	30 40       	sbci	r19, 0x00	; 0
    9a44:	22 0f       	add	r18, r18
    9a46:	33 1f       	adc	r19, r19
    9a48:	c9 01       	movw	r24, r18
    9a4a:	8e 52       	subi	r24, 0x2E	; 46
    9a4c:	9d 4f       	sbci	r25, 0xFD	; 253
    9a4e:	fc 01       	movw	r30, r24
    9a50:	04 91       	lpm	r16, Z+
			__y = pgm_read_byte(&__hostloc[__num - 0x31][1]);
    9a52:	2d 52       	subi	r18, 0x2D	; 45
    9a54:	3d 4f       	sbci	r19, 0xFD	; 253
    9a56:	f9 01       	movw	r30, r18
    9a58:	14 91       	lpm	r17, Z+
			sprintf_P(__buff,PSTR("%d"),__value[__num - 0x31]);
    9a5a:	00 d0       	rcall	.+0      	; 0x9a5c <_menu_host+0x20e>
    9a5c:	00 d0       	rcall	.+0      	; 0x9a5e <_menu_host+0x210>
    9a5e:	00 d0       	rcall	.+0      	; 0x9a60 <_menu_host+0x212>
    9a60:	2d b7       	in	r18, 0x3d	; 61
    9a62:	3e b7       	in	r19, 0x3e	; 62
    9a64:	2f 5f       	subi	r18, 0xFF	; 255
    9a66:	3f 4f       	sbci	r19, 0xFF	; 255
    9a68:	ed b7       	in	r30, 0x3d	; 61
    9a6a:	fe b7       	in	r31, 0x3e	; 62
    9a6c:	f2 82       	std	Z+2, r15	; 0x02
    9a6e:	e1 82       	std	Z+1, r14	; 0x01
    9a70:	f9 01       	movw	r30, r18
    9a72:	73 82       	std	Z+3, r7	; 0x03
    9a74:	62 82       	std	Z+2, r6	; 0x02
    9a76:	ac 0d       	add	r26, r12
    9a78:	bd 1d       	adc	r27, r13
    9a7a:	8c 91       	ld	r24, X
    9a7c:	84 83       	std	Z+4, r24	; 0x04
    9a7e:	15 82       	std	Z+5, r1	; 0x05
    9a80:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
			//_f_inttostr(__buff, __value[__num - 0x31]);
			lcd_print(__x, __y, __buff);
    9a84:	8d b7       	in	r24, 0x3d	; 61
    9a86:	9e b7       	in	r25, 0x3e	; 62
    9a88:	06 96       	adiw	r24, 0x06	; 6
    9a8a:	0f b6       	in	r0, 0x3f	; 63
    9a8c:	f8 94       	cli
    9a8e:	9e bf       	out	0x3e, r25	; 62
    9a90:	0f be       	out	0x3f, r0	; 63
    9a92:	8d bf       	out	0x3d, r24	; 61
    9a94:	80 2f       	mov	r24, r16
    9a96:	61 2f       	mov	r22, r17
    9a98:	a7 01       	movw	r20, r14
    9a9a:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
    9a9e:	9c cf       	rjmp	.-200    	; 0x99d8 <_menu_host+0x18a>
		}else
		if (__num=='4'){
    9aa0:	94 33       	cpi	r25, 0x34	; 52
    9aa2:	09 f0       	breq	.+2      	; 0x9aa6 <_menu_host+0x258>
    9aa4:	99 cf       	rjmp	.-206    	; 0x99d8 <_menu_host+0x18a>
		    if (TermID<=99)TermID++;
    9aa6:	93 e6       	ldi	r25, 0x63	; 99
    9aa8:	9b 15       	cp	r25, r11
    9aaa:	18 f4       	brcc	.+6      	; 0x9ab2 <_menu_host+0x264>
    9aac:	bb 24       	eor	r11, r11
    9aae:	b3 94       	inc	r11
    9ab0:	01 c0       	rjmp	.+2      	; 0x9ab4 <_menu_host+0x266>
    9ab2:	b3 94       	inc	r11
			else TermID=1;
	     sprintf_P(lcdteks,PSTR("4)TermID:%d "),TermID);
    9ab4:	00 d0       	rcall	.+0      	; 0x9ab6 <_menu_host+0x268>
    9ab6:	00 d0       	rcall	.+0      	; 0x9ab8 <_menu_host+0x26a>
    9ab8:	00 d0       	rcall	.+0      	; 0x9aba <_menu_host+0x26c>
    9aba:	ed b7       	in	r30, 0x3d	; 61
    9abc:	fe b7       	in	r31, 0x3e	; 62
    9abe:	31 96       	adiw	r30, 0x01	; 1
    9ac0:	ad b7       	in	r26, 0x3d	; 61
    9ac2:	be b7       	in	r27, 0x3e	; 62
    9ac4:	12 96       	adiw	r26, 0x02	; 2
    9ac6:	9c 92       	st	X, r9
    9ac8:	8e 92       	st	-X, r8
    9aca:	11 97       	sbiw	r26, 0x01	; 1
    9acc:	53 82       	std	Z+3, r5	; 0x03
    9ace:	42 82       	std	Z+2, r4	; 0x02
    9ad0:	b4 82       	std	Z+4, r11	; 0x04
    9ad2:	15 82       	std	Z+5, r1	; 0x05
    9ad4:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
		 lcd_print(4, 1,lcdteks);lcd_printf(4, 15, PSTR("#)Save"));
    9ad8:	ed b7       	in	r30, 0x3d	; 61
    9ada:	fe b7       	in	r31, 0x3e	; 62
    9adc:	36 96       	adiw	r30, 0x06	; 6
    9ade:	0f b6       	in	r0, 0x3f	; 63
    9ae0:	f8 94       	cli
    9ae2:	fe bf       	out	0x3e, r31	; 62
    9ae4:	0f be       	out	0x3f, r0	; 63
    9ae6:	ed bf       	out	0x3d, r30	; 61
    9ae8:	84 e0       	ldi	r24, 0x04	; 4
    9aea:	61 e0       	ldi	r22, 0x01	; 1
    9aec:	a4 01       	movw	r20, r8
    9aee:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
    9af2:	84 e0       	ldi	r24, 0x04	; 4
    9af4:	6f e0       	ldi	r22, 0x0F	; 15
    9af6:	4f e6       	ldi	r20, 0x6F	; 111
    9af8:	5c e0       	ldi	r21, 0x0C	; 12
    9afa:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
    9afe:	6c cf       	rjmp	.-296    	; 0x99d8 <_menu_host+0x18a>
		 
		}

	}
}
    9b00:	6d 96       	adiw	r28, 0x1d	; 29
    9b02:	0f b6       	in	r0, 0x3f	; 63
    9b04:	f8 94       	cli
    9b06:	de bf       	out	0x3e, r29	; 62
    9b08:	0f be       	out	0x3f, r0	; 63
    9b0a:	cd bf       	out	0x3d, r28	; 61
    9b0c:	cf 91       	pop	r28
    9b0e:	df 91       	pop	r29
    9b10:	1f 91       	pop	r17
    9b12:	0f 91       	pop	r16
    9b14:	ff 90       	pop	r15
    9b16:	ef 90       	pop	r14
    9b18:	df 90       	pop	r13
    9b1a:	cf 90       	pop	r12
    9b1c:	bf 90       	pop	r11
    9b1e:	9f 90       	pop	r9
    9b20:	8f 90       	pop	r8
    9b22:	7f 90       	pop	r7
    9b24:	6f 90       	pop	r6
    9b26:	5f 90       	pop	r5
    9b28:	4f 90       	pop	r4
    9b2a:	08 95       	ret

00009b2c <FSettingHost>:
char FSettingPrinter(){
     _menu_printer();
	 return MENU_DONE;
}
char FSettingHost(){
     _menu_host();
    9b2c:	0e 94 27 4c 	call	0x984e	; 0x984e <_menu_host>
	 return MENU_DONE;
}
    9b30:	81 e0       	ldi	r24, 0x01	; 1
    9b32:	08 95       	ret

00009b34 <_menu_printer>:
}

//*************************************************************************
//  ngeset printer

void _menu_printer(void){
    9b34:	2f 92       	push	r2
    9b36:	3f 92       	push	r3
    9b38:	4f 92       	push	r4
    9b3a:	5f 92       	push	r5
    9b3c:	6f 92       	push	r6
    9b3e:	7f 92       	push	r7
    9b40:	8f 92       	push	r8
    9b42:	9f 92       	push	r9
    9b44:	af 92       	push	r10
    9b46:	bf 92       	push	r11
    9b48:	cf 92       	push	r12
    9b4a:	df 92       	push	r13
    9b4c:	ef 92       	push	r14
    9b4e:	ff 92       	push	r15
    9b50:	0f 93       	push	r16
    9b52:	1f 93       	push	r17
    9b54:	df 93       	push	r29
    9b56:	cf 93       	push	r28
    9b58:	cd b7       	in	r28, 0x3d	; 61
    9b5a:	de b7       	in	r29, 0x3e	; 62
    9b5c:	2c 97       	sbiw	r28, 0x0c	; 12
    9b5e:	0f b6       	in	r0, 0x3f	; 63
    9b60:	f8 94       	cli
    9b62:	de bf       	out	0x3e, r29	; 62
    9b64:	0f be       	out	0x3f, r0	; 63
    9b66:	cd bf       	out	0x3d, r28	; 61
	char 			__value[6];
	char	__i, __x, __y, __lmt, __start, __key, __num, __buff[6];
//	char lcdteks[20];

	__value[0] = eeprom_read_byte(&DefPrinterType);
    9b68:	80 e3       	ldi	r24, 0x30	; 48
    9b6a:	90 e0       	ldi	r25, 0x00	; 0
    9b6c:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
    9b70:	89 83       	std	Y+1, r24	; 0x01
	__value[1] = eeprom_read_byte(&DefPrintSize);
    9b72:	85 e3       	ldi	r24, 0x35	; 53
    9b74:	90 e0       	ldi	r25, 0x00	; 0
    9b76:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
    9b7a:	8a 83       	std	Y+2, r24	; 0x02
	__value[2] = eeprom_read_byte(&DefPrintLogo);
    9b7c:	84 e3       	ldi	r24, 0x34	; 52
    9b7e:	90 e0       	ldi	r25, 0x00	; 0
    9b80:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
    9b84:	8b 83       	std	Y+3, r24	; 0x03
	__value[3] = eeprom_read_byte(&DefPrintAutoCut);
    9b86:	83 e3       	ldi	r24, 0x33	; 51
    9b88:	90 e0       	ldi	r25, 0x00	; 0
    9b8a:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
    9b8e:	8c 83       	std	Y+4, r24	; 0x04
	__value[4] = eeprom_read_byte(&DefPrintScrollEnd);
    9b90:	81 e3       	ldi	r24, 0x31	; 49
    9b92:	90 e0       	ldi	r25, 0x00	; 0
    9b94:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
    9b98:	8d 83       	std	Y+5, r24	; 0x05
	__value[5] = eeprom_read_byte(&DefPrintScrollSpace);
    9b9a:	82 e3       	ldi	r24, 0x32	; 50
    9b9c:	90 e0       	ldi	r25, 0x00	; 0
    9b9e:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
    9ba2:	8e 83       	std	Y+6, r24	; 0x06

	lcd_clear();
    9ba4:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
	lcd_printf(1, 1, PSTR("1)Type:  5)Scroll:"));
    9ba8:	81 e0       	ldi	r24, 0x01	; 1
    9baa:	61 e0       	ldi	r22, 0x01	; 1
    9bac:	49 e0       	ldi	r20, 0x09	; 9
    9bae:	5d e0       	ldi	r21, 0x0D	; 13
    9bb0:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
	lcd_printf(2, 1, PSTR("2)Size:  6)Space :"));
    9bb4:	82 e0       	ldi	r24, 0x02	; 2
    9bb6:	61 e0       	ldi	r22, 0x01	; 1
    9bb8:	46 ef       	ldi	r20, 0xF6	; 246
    9bba:	5c e0       	ldi	r21, 0x0C	; 12
    9bbc:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
	lcd_printf(3, 1, PSTR("3)Logo:  #)Save"));
    9bc0:	83 e0       	ldi	r24, 0x03	; 3
    9bc2:	61 e0       	ldi	r22, 0x01	; 1
    9bc4:	46 ee       	ldi	r20, 0xE6	; 230
    9bc6:	5c e0       	ldi	r21, 0x0C	; 12
    9bc8:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
	lcd_printf(4, 1, PSTR("4)Cut :  *)Exit"));
    9bcc:	84 e0       	ldi	r24, 0x04	; 4
    9bce:	61 e0       	ldi	r22, 0x01	; 1
    9bd0:	46 ed       	ldi	r20, 0xD6	; 214
    9bd2:	5c e0       	ldi	r21, 0x0C	; 12
    9bd4:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
    9bd8:	0a eb       	ldi	r16, 0xBA	; 186
    9bda:	12 e0       	ldi	r17, 0x02	; 2
    9bdc:	4e 01       	movw	r8, r28
    9bde:	08 94       	sec
    9be0:	81 1c       	adc	r8, r1
    9be2:	91 1c       	adc	r9, r1
    9be4:	74 01       	movw	r14, r8

	for(__i = 0; __i < 6; __i++){
		__x = pgm_read_byte(&__prntloc[__i][0]);
		__y = pgm_read_byte(&__prntloc[__i][1]);
        sprintf_P(__buff,PSTR("%d"),__value[__i]);
    9be6:	27 e0       	ldi	r18, 0x07	; 7
    9be8:	c2 2e       	mov	r12, r18
    9bea:	d1 2c       	mov	r13, r1
    9bec:	cc 0e       	add	r12, r28
    9bee:	dd 1e       	adc	r13, r29
    9bf0:	93 ed       	ldi	r25, 0xD3	; 211
    9bf2:	29 2e       	mov	r2, r25
    9bf4:	9c e0       	ldi	r25, 0x0C	; 12
    9bf6:	39 2e       	mov	r3, r25
		//_f_inttostr(__buff, __value[__i]);
		if(__i == 4) sprintf_P(__buff,PSTR("%.2d"),__value[__i]);
    9bf8:	8e ec       	ldi	r24, 0xCE	; 206
    9bfa:	48 2e       	mov	r4, r24
    9bfc:	8c e0       	ldi	r24, 0x0C	; 12
    9bfe:	58 2e       	mov	r5, r24
	lcd_printf(2, 1, PSTR("2)Size:  6)Space :"));
	lcd_printf(3, 1, PSTR("3)Logo:  #)Save"));
	lcd_printf(4, 1, PSTR("4)Cut :  *)Exit"));

	for(__i = 0; __i < 6; __i++){
		__x = pgm_read_byte(&__prntloc[__i][0]);
    9c00:	f8 01       	movw	r30, r16
    9c02:	74 90       	lpm	r7, Z+
		__y = pgm_read_byte(&__prntloc[__i][1]);
    9c04:	0f 5f       	subi	r16, 0xFF	; 255
    9c06:	1f 4f       	sbci	r17, 0xFF	; 255
    9c08:	f8 01       	movw	r30, r16
    9c0a:	a4 90       	lpm	r10, Z+
    9c0c:	01 50       	subi	r16, 0x01	; 1
    9c0e:	10 40       	sbci	r17, 0x00	; 0
        sprintf_P(__buff,PSTR("%d"),__value[__i]);
    9c10:	d7 01       	movw	r26, r14
    9c12:	bc 90       	ld	r11, X
    9c14:	00 d0       	rcall	.+0      	; 0x9c16 <_menu_printer+0xe2>
    9c16:	00 d0       	rcall	.+0      	; 0x9c18 <_menu_printer+0xe4>
    9c18:	00 d0       	rcall	.+0      	; 0x9c1a <_menu_printer+0xe6>
    9c1a:	ed b7       	in	r30, 0x3d	; 61
    9c1c:	fe b7       	in	r31, 0x3e	; 62
    9c1e:	31 96       	adiw	r30, 0x01	; 1
    9c20:	ad b7       	in	r26, 0x3d	; 61
    9c22:	be b7       	in	r27, 0x3e	; 62
    9c24:	12 96       	adiw	r26, 0x02	; 2
    9c26:	dc 92       	st	X, r13
    9c28:	ce 92       	st	-X, r12
    9c2a:	11 97       	sbiw	r26, 0x01	; 1
    9c2c:	33 82       	std	Z+3, r3	; 0x03
    9c2e:	22 82       	std	Z+2, r2	; 0x02
    9c30:	b4 82       	std	Z+4, r11	; 0x04
    9c32:	15 82       	std	Z+5, r1	; 0x05
    9c34:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
		//_f_inttostr(__buff, __value[__i]);
		if(__i == 4) sprintf_P(__buff,PSTR("%.2d"),__value[__i]);
    9c38:	8e 2d       	mov	r24, r14
    9c3a:	88 19       	sub	r24, r8
    9c3c:	ed b7       	in	r30, 0x3d	; 61
    9c3e:	fe b7       	in	r31, 0x3e	; 62
    9c40:	36 96       	adiw	r30, 0x06	; 6
    9c42:	0f b6       	in	r0, 0x3f	; 63
    9c44:	f8 94       	cli
    9c46:	fe bf       	out	0x3e, r31	; 62
    9c48:	0f be       	out	0x3f, r0	; 63
    9c4a:	ed bf       	out	0x3d, r30	; 61
    9c4c:	84 30       	cpi	r24, 0x04	; 4
    9c4e:	d1 f4       	brne	.+52     	; 0x9c84 <_menu_printer+0x150>
    9c50:	00 d0       	rcall	.+0      	; 0x9c52 <_menu_printer+0x11e>
    9c52:	00 d0       	rcall	.+0      	; 0x9c54 <_menu_printer+0x120>
    9c54:	00 d0       	rcall	.+0      	; 0x9c56 <_menu_printer+0x122>
    9c56:	ed b7       	in	r30, 0x3d	; 61
    9c58:	fe b7       	in	r31, 0x3e	; 62
    9c5a:	31 96       	adiw	r30, 0x01	; 1
    9c5c:	ad b7       	in	r26, 0x3d	; 61
    9c5e:	be b7       	in	r27, 0x3e	; 62
    9c60:	12 96       	adiw	r26, 0x02	; 2
    9c62:	dc 92       	st	X, r13
    9c64:	ce 92       	st	-X, r12
    9c66:	11 97       	sbiw	r26, 0x01	; 1
    9c68:	53 82       	std	Z+3, r5	; 0x03
    9c6a:	42 82       	std	Z+2, r4	; 0x02
    9c6c:	b4 82       	std	Z+4, r11	; 0x04
    9c6e:	15 82       	std	Z+5, r1	; 0x05
    9c70:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
    9c74:	ed b7       	in	r30, 0x3d	; 61
    9c76:	fe b7       	in	r31, 0x3e	; 62
    9c78:	36 96       	adiw	r30, 0x06	; 6
    9c7a:	0f b6       	in	r0, 0x3f	; 63
    9c7c:	f8 94       	cli
    9c7e:	fe bf       	out	0x3e, r31	; 62
    9c80:	0f be       	out	0x3f, r0	; 63
    9c82:	ed bf       	out	0x3d, r30	; 61
		//_f_punctuation(__buff, 0, 2, 0);
		lcd_print(__x, __y, __buff);
    9c84:	87 2d       	mov	r24, r7
    9c86:	6a 2d       	mov	r22, r10
    9c88:	a6 01       	movw	r20, r12
    9c8a:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
    9c8e:	0e 5f       	subi	r16, 0xFE	; 254
    9c90:	1f 4f       	sbci	r17, 0xFF	; 255
    9c92:	08 94       	sec
    9c94:	e1 1c       	adc	r14, r1
    9c96:	f1 1c       	adc	r15, r1
	lcd_printf(1, 1, PSTR("1)Type:  5)Scroll:"));
	lcd_printf(2, 1, PSTR("2)Size:  6)Space :"));
	lcd_printf(3, 1, PSTR("3)Logo:  #)Save"));
	lcd_printf(4, 1, PSTR("4)Cut :  *)Exit"));

	for(__i = 0; __i < 6; __i++){
    9c98:	f2 e0       	ldi	r31, 0x02	; 2
    9c9a:	06 3c       	cpi	r16, 0xC6	; 198
    9c9c:	1f 07       	cpc	r17, r31
    9c9e:	09 f0       	breq	.+2      	; 0x9ca2 <_menu_printer+0x16e>
    9ca0:	af cf       	rjmp	.-162    	; 0x9c00 <_menu_printer+0xcc>

		}
		if(__num >= 0x31 && __num <= 0x36){
			__lmt = pgm_read_byte(&__prntlmt[__num - 0x31]);
			__start = pgm_read_byte(&__prntstr[__num - 0x31]);
			if(__value[__num - 0x31] == __lmt)
    9ca2:	2e 01       	movw	r4, r28
    9ca4:	08 94       	sec
    9ca6:	41 1c       	adc	r4, r1
    9ca8:	51 1c       	adc	r5, r1
				__value[__num - 0x31] = __start;
			else
				__value[__num - 0x31]++;
			__x = pgm_read_byte(&__prntloc[__num - 0x31][0]);
			__y = pgm_read_byte(&__prntloc[__num - 0x31][1]);
			sprintf_P(__buff,PSTR("%d"),__value[__num - 0x31]);
    9caa:	17 e0       	ldi	r17, 0x07	; 7
    9cac:	e1 2e       	mov	r14, r17
    9cae:	f1 2c       	mov	r15, r1
    9cb0:	ec 0e       	add	r14, r28
    9cb2:	fd 1e       	adc	r15, r29
    9cb4:	bb ec       	ldi	r27, 0xCB	; 203
    9cb6:	6b 2e       	mov	r6, r27
    9cb8:	bc e0       	ldi	r27, 0x0C	; 12
    9cba:	7b 2e       	mov	r7, r27
			//_f_inttostr(__buff, __value[__num - 0x31]);
			if((__num == 0x35)||(__num == 0x36))
			   sprintf_P(__buff,PSTR("%.2d"),__value[__num - 0x31]);
    9cbc:	a6 ec       	ldi	r26, 0xC6	; 198
    9cbe:	2a 2e       	mov	r2, r26
    9cc0:	ac e0       	ldi	r26, 0x0C	; 12
    9cc2:	3a 2e       	mov	r3, r26
		__key = _key_scan(1);
		__num = _key_btn(__key);
		if(__key == _KEY_CANCEL)
			return;
		if(__key==_KEY_ENTER){
			eeprom_write_byte(&DefPrinterType, __value[0]);
    9cc4:	89 80       	ldd	r8, Y+1	; 0x01
			eeprom_write_byte(&DefPrintSize, __value[1]);
    9cc6:	9a 80       	ldd	r9, Y+2	; 0x02
			eeprom_write_byte(&DefPrintLogo, __value[2]);
    9cc8:	ab 80       	ldd	r10, Y+3	; 0x03
			eeprom_write_byte(&DefPrintAutoCut, __value[3]);
    9cca:	bc 80       	ldd	r11, Y+4	; 0x04
			eeprom_write_byte(&DefPrintScrollEnd, __value[4]);
    9ccc:	cd 80       	ldd	r12, Y+5	; 0x05
			eeprom_write_byte(&DefPrintScrollSpace, __value[5]);
    9cce:	de 80       	ldd	r13, Y+6	; 0x06
	}
    //sprintf_P(lcdteks,PSTR("6)Space :%.2d"),__value[5]);
	//lcd_print(2,10,lcdteks);

	while(1){	
		__key = _key_scan(1);
    9cd0:	81 e0       	ldi	r24, 0x01	; 1
    9cd2:	0e 94 58 a6 	call	0x14cb0	; 0x14cb0 <_key_scan>
    9cd6:	18 2f       	mov	r17, r24
		__num = _key_btn(__key);
    9cd8:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <_key_btn>
    9cdc:	08 2f       	mov	r16, r24
		if(__key == _KEY_CANCEL)
    9cde:	17 3e       	cpi	r17, 0xE7	; 231
    9ce0:	09 f4       	brne	.+2      	; 0x9ce4 <_menu_printer+0x1b0>
    9ce2:	85 c0       	rjmp	.+266    	; 0x9dee <_menu_printer+0x2ba>
			return;
		if(__key==_KEY_ENTER){
    9ce4:	17 3b       	cpi	r17, 0xB7	; 183
    9ce6:	f1 f4       	brne	.+60     	; 0x9d24 <_menu_printer+0x1f0>
			eeprom_write_byte(&DefPrinterType, __value[0]);
    9ce8:	80 e3       	ldi	r24, 0x30	; 48
    9cea:	90 e0       	ldi	r25, 0x00	; 0
    9cec:	68 2d       	mov	r22, r8
    9cee:	0e 94 3d ad 	call	0x15a7a	; 0x15a7a <__eewr_byte_m128>
			eeprom_write_byte(&DefPrintSize, __value[1]);
    9cf2:	85 e3       	ldi	r24, 0x35	; 53
    9cf4:	90 e0       	ldi	r25, 0x00	; 0
    9cf6:	69 2d       	mov	r22, r9
    9cf8:	0e 94 3d ad 	call	0x15a7a	; 0x15a7a <__eewr_byte_m128>
			eeprom_write_byte(&DefPrintLogo, __value[2]);
    9cfc:	84 e3       	ldi	r24, 0x34	; 52
    9cfe:	90 e0       	ldi	r25, 0x00	; 0
    9d00:	6a 2d       	mov	r22, r10
    9d02:	0e 94 3d ad 	call	0x15a7a	; 0x15a7a <__eewr_byte_m128>
			eeprom_write_byte(&DefPrintAutoCut, __value[3]);
    9d06:	83 e3       	ldi	r24, 0x33	; 51
    9d08:	90 e0       	ldi	r25, 0x00	; 0
    9d0a:	6b 2d       	mov	r22, r11
    9d0c:	0e 94 3d ad 	call	0x15a7a	; 0x15a7a <__eewr_byte_m128>
			eeprom_write_byte(&DefPrintScrollEnd, __value[4]);
    9d10:	81 e3       	ldi	r24, 0x31	; 49
    9d12:	90 e0       	ldi	r25, 0x00	; 0
    9d14:	6c 2d       	mov	r22, r12
    9d16:	0e 94 3d ad 	call	0x15a7a	; 0x15a7a <__eewr_byte_m128>
			eeprom_write_byte(&DefPrintScrollSpace, __value[5]);
    9d1a:	82 e3       	ldi	r24, 0x32	; 50
    9d1c:	90 e0       	ldi	r25, 0x00	; 0
    9d1e:	6d 2d       	mov	r22, r13
    9d20:	0e 94 3d ad 	call	0x15a7a	; 0x15a7a <__eewr_byte_m128>

		}
		if(__num >= 0x31 && __num <= 0x36){
    9d24:	80 2f       	mov	r24, r16
    9d26:	81 53       	subi	r24, 0x31	; 49
    9d28:	86 30       	cpi	r24, 0x06	; 6
    9d2a:	90 f6       	brcc	.-92     	; 0x9cd0 <_menu_printer+0x19c>
			__lmt = pgm_read_byte(&__prntlmt[__num - 0x31]);
    9d2c:	a0 2f       	mov	r26, r16
    9d2e:	b0 e0       	ldi	r27, 0x00	; 0
    9d30:	d1 97       	sbiw	r26, 0x31	; 49
    9d32:	fd 01       	movw	r30, r26
    9d34:	ea 53       	subi	r30, 0x3A	; 58
    9d36:	fd 4f       	sbci	r31, 0xFD	; 253
    9d38:	24 91       	lpm	r18, Z+
			__start = pgm_read_byte(&__prntstr[__num - 0x31]);
    9d3a:	fd 01       	movw	r30, r26
    9d3c:	e4 53       	subi	r30, 0x34	; 52
    9d3e:	fd 4f       	sbci	r31, 0xFD	; 253
    9d40:	94 91       	lpm	r25, Z+
			if(__value[__num - 0x31] == __lmt)
    9d42:	f2 01       	movw	r30, r4
    9d44:	ea 0f       	add	r30, r26
    9d46:	fb 1f       	adc	r31, r27
    9d48:	80 81       	ld	r24, Z
    9d4a:	82 17       	cp	r24, r18
    9d4c:	11 f4       	brne	.+4      	; 0x9d52 <_menu_printer+0x21e>
				__value[__num - 0x31] = __start;
    9d4e:	90 83       	st	Z, r25
    9d50:	02 c0       	rjmp	.+4      	; 0x9d56 <_menu_printer+0x222>
			else
				__value[__num - 0x31]++;
    9d52:	8f 5f       	subi	r24, 0xFF	; 255
    9d54:	80 83       	st	Z, r24
			__x = pgm_read_byte(&__prntloc[__num - 0x31][0]);
    9d56:	9d 01       	movw	r18, r26
    9d58:	22 0f       	add	r18, r18
    9d5a:	33 1f       	adc	r19, r19
    9d5c:	c9 01       	movw	r24, r18
    9d5e:	86 54       	subi	r24, 0x46	; 70
    9d60:	9d 4f       	sbci	r25, 0xFD	; 253
    9d62:	fc 01       	movw	r30, r24
    9d64:	c4 90       	lpm	r12, Z+
			__y = pgm_read_byte(&__prntloc[__num - 0x31][1]);
    9d66:	25 54       	subi	r18, 0x45	; 69
    9d68:	3d 4f       	sbci	r19, 0xFD	; 253
    9d6a:	f9 01       	movw	r30, r18
    9d6c:	d4 90       	lpm	r13, Z+
			sprintf_P(__buff,PSTR("%d"),__value[__num - 0x31]);
    9d6e:	a4 0d       	add	r26, r4
    9d70:	b5 1d       	adc	r27, r5
    9d72:	1c 91       	ld	r17, X
    9d74:	00 d0       	rcall	.+0      	; 0x9d76 <_menu_printer+0x242>
    9d76:	00 d0       	rcall	.+0      	; 0x9d78 <_menu_printer+0x244>
    9d78:	00 d0       	rcall	.+0      	; 0x9d7a <_menu_printer+0x246>
    9d7a:	ed b7       	in	r30, 0x3d	; 61
    9d7c:	fe b7       	in	r31, 0x3e	; 62
    9d7e:	31 96       	adiw	r30, 0x01	; 1
    9d80:	ad b7       	in	r26, 0x3d	; 61
    9d82:	be b7       	in	r27, 0x3e	; 62
    9d84:	12 96       	adiw	r26, 0x02	; 2
    9d86:	fc 92       	st	X, r15
    9d88:	ee 92       	st	-X, r14
    9d8a:	11 97       	sbiw	r26, 0x01	; 1
    9d8c:	73 82       	std	Z+3, r7	; 0x03
    9d8e:	62 82       	std	Z+2, r6	; 0x02
    9d90:	14 83       	std	Z+4, r17	; 0x04
    9d92:	15 82       	std	Z+5, r1	; 0x05
    9d94:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
			//_f_inttostr(__buff, __value[__num - 0x31]);
			if((__num == 0x35)||(__num == 0x36))
    9d98:	05 53       	subi	r16, 0x35	; 53
    9d9a:	ed b7       	in	r30, 0x3d	; 61
    9d9c:	fe b7       	in	r31, 0x3e	; 62
    9d9e:	36 96       	adiw	r30, 0x06	; 6
    9da0:	0f b6       	in	r0, 0x3f	; 63
    9da2:	f8 94       	cli
    9da4:	fe bf       	out	0x3e, r31	; 62
    9da6:	0f be       	out	0x3f, r0	; 63
    9da8:	ed bf       	out	0x3d, r30	; 61
    9daa:	02 30       	cpi	r16, 0x02	; 2
    9dac:	d0 f4       	brcc	.+52     	; 0x9de2 <_menu_printer+0x2ae>
			   sprintf_P(__buff,PSTR("%.2d"),__value[__num - 0x31]);
    9dae:	00 d0       	rcall	.+0      	; 0x9db0 <_menu_printer+0x27c>
    9db0:	00 d0       	rcall	.+0      	; 0x9db2 <_menu_printer+0x27e>
    9db2:	00 d0       	rcall	.+0      	; 0x9db4 <_menu_printer+0x280>
    9db4:	ed b7       	in	r30, 0x3d	; 61
    9db6:	fe b7       	in	r31, 0x3e	; 62
    9db8:	31 96       	adiw	r30, 0x01	; 1
    9dba:	ad b7       	in	r26, 0x3d	; 61
    9dbc:	be b7       	in	r27, 0x3e	; 62
    9dbe:	12 96       	adiw	r26, 0x02	; 2
    9dc0:	fc 92       	st	X, r15
    9dc2:	ee 92       	st	-X, r14
    9dc4:	11 97       	sbiw	r26, 0x01	; 1
    9dc6:	33 82       	std	Z+3, r3	; 0x03
    9dc8:	22 82       	std	Z+2, r2	; 0x02
    9dca:	14 83       	std	Z+4, r17	; 0x04
    9dcc:	15 82       	std	Z+5, r1	; 0x05
    9dce:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
    9dd2:	ed b7       	in	r30, 0x3d	; 61
    9dd4:	fe b7       	in	r31, 0x3e	; 62
    9dd6:	36 96       	adiw	r30, 0x06	; 6
    9dd8:	0f b6       	in	r0, 0x3f	; 63
    9dda:	f8 94       	cli
    9ddc:	fe bf       	out	0x3e, r31	; 62
    9dde:	0f be       	out	0x3f, r0	; 63
    9de0:	ed bf       	out	0x3d, r30	; 61
				//_f_punctuation(__buff, 0, 2, 0);

			lcd_print(__x, __y, __buff);
    9de2:	8c 2d       	mov	r24, r12
    9de4:	6d 2d       	mov	r22, r13
    9de6:	a7 01       	movw	r20, r14
    9de8:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
    9dec:	6b cf       	rjmp	.-298    	; 0x9cc4 <_menu_printer+0x190>
		}
	}
}
    9dee:	2c 96       	adiw	r28, 0x0c	; 12
    9df0:	0f b6       	in	r0, 0x3f	; 63
    9df2:	f8 94       	cli
    9df4:	de bf       	out	0x3e, r29	; 62
    9df6:	0f be       	out	0x3f, r0	; 63
    9df8:	cd bf       	out	0x3d, r28	; 61
    9dfa:	cf 91       	pop	r28
    9dfc:	df 91       	pop	r29
    9dfe:	1f 91       	pop	r17
    9e00:	0f 91       	pop	r16
    9e02:	ff 90       	pop	r15
    9e04:	ef 90       	pop	r14
    9e06:	df 90       	pop	r13
    9e08:	cf 90       	pop	r12
    9e0a:	bf 90       	pop	r11
    9e0c:	af 90       	pop	r10
    9e0e:	9f 90       	pop	r9
    9e10:	8f 90       	pop	r8
    9e12:	7f 90       	pop	r7
    9e14:	6f 90       	pop	r6
    9e16:	5f 90       	pop	r5
    9e18:	4f 90       	pop	r4
    9e1a:	3f 90       	pop	r3
    9e1c:	2f 90       	pop	r2
    9e1e:	08 95       	ret

00009e20 <FSettingPrinter>:
char FSettingDatetime(){
     _menu_datetime();
     return MENU_DONE;
}
char FSettingPrinter(){
     _menu_printer();
    9e20:	0e 94 9a 4d 	call	0x9b34	; 0x9b34 <_menu_printer>
	 return MENU_DONE;
}
    9e24:	81 e0       	ldi	r24, 0x01	; 1
    9e26:	08 95       	ret

00009e28 <_menu_pumpprodinput>:
				*/
		}
	}
}

void _menu_pumpprodinput(unsigned char __select){
    9e28:	6f 92       	push	r6
    9e2a:	7f 92       	push	r7
    9e2c:	8f 92       	push	r8
    9e2e:	9f 92       	push	r9
    9e30:	af 92       	push	r10
    9e32:	bf 92       	push	r11
    9e34:	cf 92       	push	r12
    9e36:	df 92       	push	r13
    9e38:	ef 92       	push	r14
    9e3a:	ff 92       	push	r15
    9e3c:	0f 93       	push	r16
    9e3e:	1f 93       	push	r17
    9e40:	df 93       	push	r29
    9e42:	cf 93       	push	r28
    9e44:	cd b7       	in	r28, 0x3d	; 61
    9e46:	de b7       	in	r29, 0x3e	; 62
    9e48:	a7 97       	sbiw	r28, 0x27	; 39
    9e4a:	0f b6       	in	r0, 0x3f	; 63
    9e4c:	f8 94       	cli
    9e4e:	de bf       	out	0x3e, r29	; 62
    9e50:	0f be       	out	0x3f, r0	; 63
    9e52:	cd bf       	out	0x3d, r28	; 61
    9e54:	b8 2e       	mov	r11, r24
	char 			__pump_prod[6],__pump_id[8];
	unsigned char	i, __x, __y, __key, __num, __buff[5];
	char lcdteks[20];

	eeprom_read_block((void*) &__pump_id, (const void*) &DefPumpMap, 8);
    9e56:	8e 01       	movw	r16, r28
    9e58:	04 5f       	subi	r16, 0xF4	; 244
    9e5a:	1f 4f       	sbci	r17, 0xFF	; 255
    9e5c:	c8 01       	movw	r24, r16
    9e5e:	66 e4       	ldi	r22, 0x46	; 70
    9e60:	70 e0       	ldi	r23, 0x00	; 0
    9e62:	48 e0       	ldi	r20, 0x08	; 8
    9e64:	50 e0       	ldi	r21, 0x00	; 0
    9e66:	0e 94 1b ad 	call	0x15a36	; 0x15a36 <__eerd_block_m128>
	eeprom_read_block((void*) &__pump_prod, (const void*) &DefNozzleMap[__select], 6);
    9e6a:	86 e0       	ldi	r24, 0x06	; 6
    9e6c:	b8 9e       	mul	r11, r24
    9e6e:	40 01       	movw	r8, r0
    9e70:	11 24       	eor	r1, r1
    9e72:	86 e5       	ldi	r24, 0x56	; 86
    9e74:	90 e0       	ldi	r25, 0x00	; 0
    9e76:	88 0e       	add	r8, r24
    9e78:	99 1e       	adc	r9, r25
    9e7a:	b6 e0       	ldi	r27, 0x06	; 6
    9e7c:	cb 2e       	mov	r12, r27
    9e7e:	d1 2c       	mov	r13, r1
    9e80:	cc 0e       	add	r12, r28
    9e82:	dd 1e       	adc	r13, r29
    9e84:	c6 01       	movw	r24, r12
    9e86:	b4 01       	movw	r22, r8
    9e88:	46 e0       	ldi	r20, 0x06	; 6
    9e8a:	50 e0       	ldi	r21, 0x00	; 0
    9e8c:	0e 94 1b ad 	call	0x15a36	; 0x15a36 <__eerd_block_m128>

	lcd_clear();_delay_ms(10);
    9e90:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
    9e94:	84 ec       	ldi	r24, 0xC4	; 196
    9e96:	99 e0       	ldi	r25, 0x09	; 9
    9e98:	01 97       	sbiw	r24, 0x01	; 1
    9e9a:	f1 f7       	brne	.-4      	; 0x9e98 <_menu_pumpprodinput+0x70>
    sprintf_P(lcdteks, PSTR("Product FIP%.2d"),__pump_id[__select]);
    9e9c:	00 d0       	rcall	.+0      	; 0x9e9e <_menu_pumpprodinput+0x76>
    9e9e:	00 d0       	rcall	.+0      	; 0x9ea0 <_menu_pumpprodinput+0x78>
    9ea0:	00 d0       	rcall	.+0      	; 0x9ea2 <_menu_pumpprodinput+0x7a>
    9ea2:	ed b7       	in	r30, 0x3d	; 61
    9ea4:	fe b7       	in	r31, 0x3e	; 62
    9ea6:	31 96       	adiw	r30, 0x01	; 1
    9ea8:	a4 e1       	ldi	r26, 0x14	; 20
    9eaa:	ea 2e       	mov	r14, r26
    9eac:	f1 2c       	mov	r15, r1
    9eae:	ec 0e       	add	r14, r28
    9eb0:	fd 1e       	adc	r15, r29
    9eb2:	ad b7       	in	r26, 0x3d	; 61
    9eb4:	be b7       	in	r27, 0x3e	; 62
    9eb6:	12 96       	adiw	r26, 0x02	; 2
    9eb8:	fc 92       	st	X, r15
    9eba:	ee 92       	st	-X, r14
    9ebc:	11 97       	sbiw	r26, 0x01	; 1
    9ebe:	84 e8       	ldi	r24, 0x84	; 132
    9ec0:	9d e0       	ldi	r25, 0x0D	; 13
    9ec2:	93 83       	std	Z+3, r25	; 0x03
    9ec4:	82 83       	std	Z+2, r24	; 0x02
    9ec6:	0b 0d       	add	r16, r11
    9ec8:	11 1d       	adc	r17, r1
    9eca:	d8 01       	movw	r26, r16
    9ecc:	8c 91       	ld	r24, X
    9ece:	84 83       	std	Z+4, r24	; 0x04
    9ed0:	15 82       	std	Z+5, r1	; 0x05
    9ed2:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
    lcd_print(1, 1,lcdteks);
    9ed6:	ed b7       	in	r30, 0x3d	; 61
    9ed8:	fe b7       	in	r31, 0x3e	; 62
    9eda:	36 96       	adiw	r30, 0x06	; 6
    9edc:	0f b6       	in	r0, 0x3f	; 63
    9ede:	f8 94       	cli
    9ee0:	fe bf       	out	0x3e, r31	; 62
    9ee2:	0f be       	out	0x3f, r0	; 63
    9ee4:	ed bf       	out	0x3d, r30	; 61
    9ee6:	81 e0       	ldi	r24, 0x01	; 1
    9ee8:	61 e0       	ldi	r22, 0x01	; 1
    9eea:	a7 01       	movw	r20, r14
    9eec:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>

	lcd_printf(2, 1, PSTR("1)N1:  3)N3:  5)N5:"));
    9ef0:	82 e0       	ldi	r24, 0x02	; 2
    9ef2:	61 e0       	ldi	r22, 0x01	; 1
    9ef4:	40 e7       	ldi	r20, 0x70	; 112
    9ef6:	5d e0       	ldi	r21, 0x0D	; 13
    9ef8:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
	lcd_printf(3, 1, PSTR("2)N2:  4)N4:  6)N6:"));
    9efc:	83 e0       	ldi	r24, 0x03	; 3
    9efe:	61 e0       	ldi	r22, 0x01	; 1
    9f00:	4c e5       	ldi	r20, 0x5C	; 92
    9f02:	5d e0       	ldi	r21, 0x0D	; 13
    9f04:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
	lcd_printf(4, 1, PSTR("*)Exit        #)Save"));
    9f08:	84 e0       	ldi	r24, 0x04	; 4
    9f0a:	61 e0       	ldi	r22, 0x01	; 1
    9f0c:	47 e4       	ldi	r20, 0x47	; 71
    9f0e:	5d e0       	ldi	r21, 0x0D	; 13
    9f10:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
    9f14:	ee ea       	ldi	r30, 0xAE	; 174
    9f16:	ee 2e       	mov	r14, r30
    9f18:	e2 e0       	ldi	r30, 0x02	; 2
    9f1a:	fe 2e       	mov	r15, r30

	for(i=0;i<6;i++){
		__x = pgm_read_byte(&__prodloc[i][0]);
		__y = pgm_read_byte(&__prodloc[i][1]);

        sprintf_P(__buff,PSTR("%d"),__pump_prod[i]);
    9f1c:	5e 01       	movw	r10, r28
    9f1e:	08 94       	sec
    9f20:	a1 1c       	adc	r10, r1
    9f22:	b1 1c       	adc	r11, r1
    9f24:	74 e4       	ldi	r23, 0x44	; 68
    9f26:	67 2e       	mov	r6, r23
    9f28:	7d e0       	ldi	r23, 0x0D	; 13
    9f2a:	77 2e       	mov	r7, r23
	lcd_printf(2, 1, PSTR("1)N1:  3)N3:  5)N5:"));
	lcd_printf(3, 1, PSTR("2)N2:  4)N4:  6)N6:"));
	lcd_printf(4, 1, PSTR("*)Exit        #)Save"));

	for(i=0;i<6;i++){
		__x = pgm_read_byte(&__prodloc[i][0]);
    9f2c:	f7 01       	movw	r30, r14
    9f2e:	04 91       	lpm	r16, Z+
		__y = pgm_read_byte(&__prodloc[i][1]);
    9f30:	08 94       	sec
    9f32:	e1 1c       	adc	r14, r1
    9f34:	f1 1c       	adc	r15, r1
    9f36:	f7 01       	movw	r30, r14
    9f38:	14 91       	lpm	r17, Z+

        sprintf_P(__buff,PSTR("%d"),__pump_prod[i]);
    9f3a:	00 d0       	rcall	.+0      	; 0x9f3c <_menu_pumpprodinput+0x114>
    9f3c:	00 d0       	rcall	.+0      	; 0x9f3e <_menu_pumpprodinput+0x116>
    9f3e:	00 d0       	rcall	.+0      	; 0x9f40 <_menu_pumpprodinput+0x118>
    9f40:	ed b7       	in	r30, 0x3d	; 61
    9f42:	fe b7       	in	r31, 0x3e	; 62
    9f44:	31 96       	adiw	r30, 0x01	; 1
    9f46:	ad b7       	in	r26, 0x3d	; 61
    9f48:	be b7       	in	r27, 0x3e	; 62
    9f4a:	12 96       	adiw	r26, 0x02	; 2
    9f4c:	bc 92       	st	X, r11
    9f4e:	ae 92       	st	-X, r10
    9f50:	11 97       	sbiw	r26, 0x01	; 1
    9f52:	73 82       	std	Z+3, r7	; 0x03
    9f54:	62 82       	std	Z+2, r6	; 0x02
    9f56:	d6 01       	movw	r26, r12
    9f58:	8d 91       	ld	r24, X+
    9f5a:	6d 01       	movw	r12, r26
    9f5c:	84 83       	std	Z+4, r24	; 0x04
    9f5e:	15 82       	std	Z+5, r1	; 0x05
    9f60:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
		lcd_print(__x+1, __y, __buff);
    9f64:	ed b7       	in	r30, 0x3d	; 61
    9f66:	fe b7       	in	r31, 0x3e	; 62
    9f68:	36 96       	adiw	r30, 0x06	; 6
    9f6a:	0f b6       	in	r0, 0x3f	; 63
    9f6c:	f8 94       	cli
    9f6e:	fe bf       	out	0x3e, r31	; 62
    9f70:	0f be       	out	0x3f, r0	; 63
    9f72:	ed bf       	out	0x3d, r30	; 61
    9f74:	80 2f       	mov	r24, r16
    9f76:	8f 5f       	subi	r24, 0xFF	; 255
    9f78:	61 2f       	mov	r22, r17
    9f7a:	a5 01       	movw	r20, r10
    9f7c:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
    9f80:	08 94       	sec
    9f82:	e1 1c       	adc	r14, r1
    9f84:	f1 1c       	adc	r15, r1

	lcd_printf(2, 1, PSTR("1)N1:  3)N3:  5)N5:"));
	lcd_printf(3, 1, PSTR("2)N2:  4)N4:  6)N6:"));
	lcd_printf(4, 1, PSTR("*)Exit        #)Save"));

	for(i=0;i<6;i++){
    9f86:	fa eb       	ldi	r31, 0xBA	; 186
    9f88:	ef 16       	cp	r14, r31
    9f8a:	f2 e0       	ldi	r31, 0x02	; 2
    9f8c:	ff 06       	cpc	r15, r31
    9f8e:	71 f6       	brne	.-100    	; 0x9f2c <_menu_pumpprodinput+0x104>
		if(__key == _KEY_ENTER){
			eeprom_write_block((const void*) &__pump_prod, (void*) &DefNozzleMap[__select], 6);
			return;
		}
		if(__num >= '1' && __num <= '6'){
			if(__pump_prod[__num - '1'] == 6)
    9f90:	66 e0       	ldi	r22, 0x06	; 6
    9f92:	c6 2e       	mov	r12, r22
    9f94:	d1 2c       	mov	r13, r1
    9f96:	cc 0e       	add	r12, r28
    9f98:	dd 1e       	adc	r13, r29
			else
				__pump_prod[__num - '1']++;

			__x = pgm_read_byte(&__prodloc[__num - 0x31][0]);
			__y = pgm_read_byte(&__prodloc[__num - 0x31][1]);
			sprintf_P(__buff,PSTR("%d"),__pump_prod[__num - 0x31]);
    9f9a:	7e 01       	movw	r14, r28
    9f9c:	08 94       	sec
    9f9e:	e1 1c       	adc	r14, r1
    9fa0:	f1 1c       	adc	r15, r1
    9fa2:	51 e4       	ldi	r21, 0x41	; 65
    9fa4:	a5 2e       	mov	r10, r21
    9fa6:	5d e0       	ldi	r21, 0x0D	; 13
    9fa8:	b5 2e       	mov	r11, r21
		//lcd_print(2+(i%2),(i/2)*6,lcdteks);
	}

	while(1){
		
		__key = _key_scan(1);
    9faa:	81 e0       	ldi	r24, 0x01	; 1
    9fac:	0e 94 58 a6 	call	0x14cb0	; 0x14cb0 <_key_scan>
    9fb0:	18 2f       	mov	r17, r24
		__num = _key_btn(__key);
    9fb2:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <_key_btn>
    9fb6:	98 2f       	mov	r25, r24
		if(__key == _KEY_CANCEL)
    9fb8:	17 3e       	cpi	r17, 0xE7	; 231
    9fba:	09 f4       	brne	.+2      	; 0x9fbe <_menu_pumpprodinput+0x196>
    9fbc:	4d c0       	rjmp	.+154    	; 0xa058 <_menu_pumpprodinput+0x230>
			return;
		if(__key == _KEY_ENTER){
    9fbe:	17 3b       	cpi	r17, 0xB7	; 183
    9fc0:	41 f4       	brne	.+16     	; 0x9fd2 <_menu_pumpprodinput+0x1aa>
			eeprom_write_block((const void*) &__pump_prod, (void*) &DefNozzleMap[__select], 6);
    9fc2:	ce 01       	movw	r24, r28
    9fc4:	06 96       	adiw	r24, 0x06	; 6
    9fc6:	b4 01       	movw	r22, r8
    9fc8:	46 e0       	ldi	r20, 0x06	; 6
    9fca:	50 e0       	ldi	r21, 0x00	; 0
    9fcc:	0e 94 33 ad 	call	0x15a66	; 0x15a66 <__eewr_block_m128>
    9fd0:	43 c0       	rjmp	.+134    	; 0xa058 <_menu_pumpprodinput+0x230>
			return;
		}
		if(__num >= '1' && __num <= '6'){
    9fd2:	81 53       	subi	r24, 0x31	; 49
    9fd4:	86 30       	cpi	r24, 0x06	; 6
    9fd6:	48 f7       	brcc	.-46     	; 0x9faa <_menu_pumpprodinput+0x182>
			if(__pump_prod[__num - '1'] == 6)
    9fd8:	a9 2f       	mov	r26, r25
    9fda:	b0 e0       	ldi	r27, 0x00	; 0
    9fdc:	d1 97       	sbiw	r26, 0x31	; 49
    9fde:	f6 01       	movw	r30, r12
    9fe0:	ea 0f       	add	r30, r26
    9fe2:	fb 1f       	adc	r31, r27
    9fe4:	80 81       	ld	r24, Z
    9fe6:	86 30       	cpi	r24, 0x06	; 6
    9fe8:	11 f4       	brne	.+4      	; 0x9fee <_menu_pumpprodinput+0x1c6>
				__pump_prod[__num - '1'] = 0;
    9fea:	10 82       	st	Z, r1
    9fec:	02 c0       	rjmp	.+4      	; 0x9ff2 <_menu_pumpprodinput+0x1ca>
			else
				__pump_prod[__num - '1']++;
    9fee:	8f 5f       	subi	r24, 0xFF	; 255
    9ff0:	80 83       	st	Z, r24

			__x = pgm_read_byte(&__prodloc[__num - 0x31][0]);
    9ff2:	29 2f       	mov	r18, r25
    9ff4:	30 e0       	ldi	r19, 0x00	; 0
    9ff6:	21 53       	subi	r18, 0x31	; 49
    9ff8:	30 40       	sbci	r19, 0x00	; 0
    9ffa:	22 0f       	add	r18, r18
    9ffc:	33 1f       	adc	r19, r19
    9ffe:	c9 01       	movw	r24, r18
    a000:	82 55       	subi	r24, 0x52	; 82
    a002:	9d 4f       	sbci	r25, 0xFD	; 253
    a004:	fc 01       	movw	r30, r24
    a006:	04 91       	lpm	r16, Z+
			__y = pgm_read_byte(&__prodloc[__num - 0x31][1]);
    a008:	21 55       	subi	r18, 0x51	; 81
    a00a:	3d 4f       	sbci	r19, 0xFD	; 253
    a00c:	f9 01       	movw	r30, r18
    a00e:	14 91       	lpm	r17, Z+
			sprintf_P(__buff,PSTR("%d"),__pump_prod[__num - 0x31]);
    a010:	00 d0       	rcall	.+0      	; 0xa012 <_menu_pumpprodinput+0x1ea>
    a012:	00 d0       	rcall	.+0      	; 0xa014 <_menu_pumpprodinput+0x1ec>
    a014:	00 d0       	rcall	.+0      	; 0xa016 <_menu_pumpprodinput+0x1ee>
    a016:	2d b7       	in	r18, 0x3d	; 61
    a018:	3e b7       	in	r19, 0x3e	; 62
    a01a:	2f 5f       	subi	r18, 0xFF	; 255
    a01c:	3f 4f       	sbci	r19, 0xFF	; 255
    a01e:	ed b7       	in	r30, 0x3d	; 61
    a020:	fe b7       	in	r31, 0x3e	; 62
    a022:	f2 82       	std	Z+2, r15	; 0x02
    a024:	e1 82       	std	Z+1, r14	; 0x01
    a026:	f9 01       	movw	r30, r18
    a028:	b3 82       	std	Z+3, r11	; 0x03
    a02a:	a2 82       	std	Z+2, r10	; 0x02
    a02c:	ac 0d       	add	r26, r12
    a02e:	bd 1d       	adc	r27, r13
    a030:	8c 91       	ld	r24, X
    a032:	84 83       	std	Z+4, r24	; 0x04
    a034:	15 82       	std	Z+5, r1	; 0x05
    a036:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
			//_f_inttostr(__buff, __pump_prod[__num - 0x31]);
			lcd_print(__x+1, __y, __buff);
    a03a:	8d b7       	in	r24, 0x3d	; 61
    a03c:	9e b7       	in	r25, 0x3e	; 62
    a03e:	06 96       	adiw	r24, 0x06	; 6
    a040:	0f b6       	in	r0, 0x3f	; 63
    a042:	f8 94       	cli
    a044:	9e bf       	out	0x3e, r25	; 62
    a046:	0f be       	out	0x3f, r0	; 63
    a048:	8d bf       	out	0x3d, r24	; 61
    a04a:	80 2f       	mov	r24, r16
    a04c:	8f 5f       	subi	r24, 0xFF	; 255
    a04e:	61 2f       	mov	r22, r17
    a050:	a7 01       	movw	r20, r14
    a052:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
    a056:	a9 cf       	rjmp	.-174    	; 0x9faa <_menu_pumpprodinput+0x182>
		}
	}
}
    a058:	a7 96       	adiw	r28, 0x27	; 39
    a05a:	0f b6       	in	r0, 0x3f	; 63
    a05c:	f8 94       	cli
    a05e:	de bf       	out	0x3e, r29	; 62
    a060:	0f be       	out	0x3f, r0	; 63
    a062:	cd bf       	out	0x3d, r28	; 61
    a064:	cf 91       	pop	r28
    a066:	df 91       	pop	r29
    a068:	1f 91       	pop	r17
    a06a:	0f 91       	pop	r16
    a06c:	ff 90       	pop	r15
    a06e:	ef 90       	pop	r14
    a070:	df 90       	pop	r13
    a072:	cf 90       	pop	r12
    a074:	bf 90       	pop	r11
    a076:	af 90       	pop	r10
    a078:	9f 90       	pop	r9
    a07a:	8f 90       	pop	r8
    a07c:	7f 90       	pop	r7
    a07e:	6f 90       	pop	r6
    a080:	08 95       	ret

0000a082 <_menu_pumpprod>:
}

void _menu_pumpprod(void){
	char KeyPressed,KeyChar;
	while(1){
		lcd_clear();
    a082:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
		_scr_pump();
    a086:	0e 94 c1 47 	call	0x8f82	; 0x8f82 <_scr_pump>
		while(1){
			KeyPressed=_key_scan(1);
    a08a:	81 e0       	ldi	r24, 0x01	; 1
    a08c:	0e 94 58 a6 	call	0x14cb0	; 0x14cb0 <_key_scan>
		    KeyChar=_key_btn(KeyPressed);
    a090:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <_key_btn>
    a094:	98 2f       	mov	r25, r24

			if ((KeyChar>='1')&&(KeyChar<='8')){
    a096:	81 53       	subi	r24, 0x31	; 49
    a098:	88 30       	cpi	r24, 0x08	; 8
    a09a:	18 f4       	brcc	.+6      	; 0xa0a2 <_menu_pumpprod+0x20>
			     _menu_pumpprodinput(KeyChar-'1');
    a09c:	0e 94 14 4f 	call	0x9e28	; 0x9e28 <_menu_pumpprodinput>
    a0a0:	f0 cf       	rjmp	.-32     	; 0xa082 <_menu_pumpprod>
				break;
			}else if (KeyChar=='*'){
    a0a2:	9a 32       	cpi	r25, 0x2A	; 42
    a0a4:	91 f7       	brne	.-28     	; 0xa08a <_menu_pumpprod+0x8>
			if(__key == _KEY_CANCEL)
				return;
				*/
		}
	}
}
    a0a6:	08 95       	ret

0000a0a8 <FMenuPumpLabel>:
		       break;		         
	      }
	 }     
}

void FMenuPumpLabel(){
    a0a8:	6f 92       	push	r6
    a0aa:	7f 92       	push	r7
    a0ac:	8f 92       	push	r8
    a0ae:	9f 92       	push	r9
    a0b0:	af 92       	push	r10
    a0b2:	bf 92       	push	r11
    a0b4:	cf 92       	push	r12
    a0b6:	df 92       	push	r13
    a0b8:	ef 92       	push	r14
    a0ba:	ff 92       	push	r15
    a0bc:	1f 93       	push	r17
    a0be:	df 93       	push	r29
    a0c0:	cf 93       	push	r28
    a0c2:	cd b7       	in	r28, 0x3d	; 61
    a0c4:	de b7       	in	r29, 0x3e	; 62
    a0c6:	2d 97       	sbiw	r28, 0x0d	; 13
    a0c8:	0f b6       	in	r0, 0x3f	; 63
    a0ca:	f8 94       	cli
    a0cc:	de bf       	out	0x3e, r29	; 62
    a0ce:	0f be       	out	0x3f, r0	; 63
    a0d0:	cd bf       	out	0x3d, r28	; 61
	char PPumpLabel[8];
	unsigned char i, xPos,yPos,KeyPressed,KeyChar,strLabel[5];
	static char MaxCountId=16;

	eeprom_read_block((void*) &PPumpLabel, (const void*) &DefPumpLabel, 8);
    a0d2:	36 e0       	ldi	r19, 0x06	; 6
    a0d4:	c3 2e       	mov	r12, r19
    a0d6:	d1 2c       	mov	r13, r1
    a0d8:	cc 0e       	add	r12, r28
    a0da:	dd 1e       	adc	r13, r29
    a0dc:	c6 01       	movw	r24, r12
    a0de:	6e e4       	ldi	r22, 0x4E	; 78
    a0e0:	70 e0       	ldi	r23, 0x00	; 0
    a0e2:	48 e0       	ldi	r20, 0x08	; 8
    a0e4:	50 e0       	ldi	r21, 0x00	; 0
    a0e6:	0e 94 1b ad 	call	0x15a36	; 0x15a36 <__eerd_block_m128>
	MaxCountId=99;
    a0ea:	83 e6       	ldi	r24, 0x63	; 99
    a0ec:	80 93 56 01 	sts	0x0156, r24
	lcd_clear();_delay_ms(10);
    a0f0:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
    a0f4:	84 ec       	ldi	r24, 0xC4	; 196
    a0f6:	99 e0       	ldi	r25, 0x09	; 9
    a0f8:	01 97       	sbiw	r24, 0x01	; 1
    a0fa:	f1 f7       	brne	.-4      	; 0xa0f8 <FMenuPumpLabel+0x50>
	lcd_printf(1, 1, PSTR("1)1:   5)5:"));
    a0fc:	81 e0       	ldi	r24, 0x01	; 1
    a0fe:	61 e0       	ldi	r22, 0x01	; 1
    a100:	4f e7       	ldi	r20, 0x7F	; 127
    a102:	5e e0       	ldi	r21, 0x0E	; 14
    a104:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
	lcd_printf(2, 1, PSTR("2)2:   6)6:"));
    a108:	82 e0       	ldi	r24, 0x02	; 2
    a10a:	61 e0       	ldi	r22, 0x01	; 1
    a10c:	43 e7       	ldi	r20, 0x73	; 115
    a10e:	5e e0       	ldi	r21, 0x0E	; 14
    a110:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
	lcd_printf(3, 1, PSTR("3)3:   7)7:   #)Save"));
    a114:	83 e0       	ldi	r24, 0x03	; 3
    a116:	61 e0       	ldi	r22, 0x01	; 1
    a118:	4e e5       	ldi	r20, 0x5E	; 94
    a11a:	5e e0       	ldi	r21, 0x0E	; 14
    a11c:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
	lcd_printf(4, 1, PSTR("4)4:   8)8:   *)Exit"));
    a120:	84 e0       	ldi	r24, 0x04	; 4
    a122:	61 e0       	ldi	r22, 0x01	; 1
    a124:	49 e4       	ldi	r20, 0x49	; 73
    a126:	5e e0       	ldi	r21, 0x0E	; 14
    a128:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
    a12c:	76 01       	movw	r14, r12

	for(i=0;i< 8;i++){
	    sprintf_P(strLabel,PSTR("%.2d"),PPumpLabel[i]);
    a12e:	5e 01       	movw	r10, r28
    a130:	08 94       	sec
    a132:	a1 1c       	adc	r10, r1
    a134:	b1 1c       	adc	r11, r1
    a136:	24 e4       	ldi	r18, 0x44	; 68
    a138:	62 2e       	mov	r6, r18
    a13a:	2e e0       	ldi	r18, 0x0E	; 14
    a13c:	72 2e       	mov	r7, r18
	lcd_printf(1, 1, PSTR("1)1:   5)5:"));
	lcd_printf(2, 1, PSTR("2)2:   6)6:"));
	lcd_printf(3, 1, PSTR("3)3:   7)7:   #)Save"));
	lcd_printf(4, 1, PSTR("4)4:   8)8:   *)Exit"));

	for(i=0;i< 8;i++){
    a13e:	9e e0       	ldi	r25, 0x0E	; 14
    a140:	89 2e       	mov	r8, r25
    a142:	91 2c       	mov	r9, r1
    a144:	8c 0e       	add	r8, r28
    a146:	9d 1e       	adc	r9, r29
	MaxCountId=99;
	lcd_clear();_delay_ms(10);
	lcd_printf(1, 1, PSTR("1)1:   5)5:"));
	lcd_printf(2, 1, PSTR("2)2:   6)6:"));
	lcd_printf(3, 1, PSTR("3)3:   7)7:   #)Save"));
	lcd_printf(4, 1, PSTR("4)4:   8)8:   *)Exit"));
    a148:	1e 2d       	mov	r17, r14
    a14a:	1c 19       	sub	r17, r12

	for(i=0;i< 8;i++){
	    sprintf_P(strLabel,PSTR("%.2d"),PPumpLabel[i]);
    a14c:	00 d0       	rcall	.+0      	; 0xa14e <FMenuPumpLabel+0xa6>
    a14e:	00 d0       	rcall	.+0      	; 0xa150 <FMenuPumpLabel+0xa8>
    a150:	00 d0       	rcall	.+0      	; 0xa152 <FMenuPumpLabel+0xaa>
    a152:	ed b7       	in	r30, 0x3d	; 61
    a154:	fe b7       	in	r31, 0x3e	; 62
    a156:	31 96       	adiw	r30, 0x01	; 1
    a158:	ad b7       	in	r26, 0x3d	; 61
    a15a:	be b7       	in	r27, 0x3e	; 62
    a15c:	12 96       	adiw	r26, 0x02	; 2
    a15e:	bc 92       	st	X, r11
    a160:	ae 92       	st	-X, r10
    a162:	11 97       	sbiw	r26, 0x01	; 1
    a164:	73 82       	std	Z+3, r7	; 0x03
    a166:	62 82       	std	Z+2, r6	; 0x02
    a168:	d7 01       	movw	r26, r14
    a16a:	8d 91       	ld	r24, X+
    a16c:	7d 01       	movw	r14, r26
    a16e:	84 83       	std	Z+4, r24	; 0x04
    a170:	15 82       	std	Z+5, r1	; 0x05
    a172:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
		xPos=1+(i%4);
		yPos=5+(i/4)*8;
        lcd_print(xPos,yPos,strLabel);
    a176:	ed b7       	in	r30, 0x3d	; 61
    a178:	fe b7       	in	r31, 0x3e	; 62
    a17a:	36 96       	adiw	r30, 0x06	; 6
    a17c:	0f b6       	in	r0, 0x3f	; 63
    a17e:	f8 94       	cli
    a180:	fe bf       	out	0x3e, r31	; 62
    a182:	0f be       	out	0x3f, r0	; 63
    a184:	ed bf       	out	0x3d, r30	; 61
    a186:	61 2f       	mov	r22, r17
    a188:	66 95       	lsr	r22
    a18a:	66 95       	lsr	r22
    a18c:	66 0f       	add	r22, r22
    a18e:	66 0f       	add	r22, r22
    a190:	66 0f       	add	r22, r22
    a192:	6b 5f       	subi	r22, 0xFB	; 251
    a194:	13 70       	andi	r17, 0x03	; 3
    a196:	81 2f       	mov	r24, r17
    a198:	8f 5f       	subi	r24, 0xFF	; 255
    a19a:	a5 01       	movw	r20, r10
    a19c:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
	lcd_printf(1, 1, PSTR("1)1:   5)5:"));
	lcd_printf(2, 1, PSTR("2)2:   6)6:"));
	lcd_printf(3, 1, PSTR("3)3:   7)7:   #)Save"));
	lcd_printf(4, 1, PSTR("4)4:   8)8:   *)Exit"));

	for(i=0;i< 8;i++){
    a1a0:	e8 14       	cp	r14, r8
    a1a2:	f9 04       	cpc	r15, r9
    a1a4:	89 f6       	brne	.-94     	; 0xa148 <FMenuPumpLabel+0xa0>
			eeprom_write_block((const void*) &PPumpLabel, (void*) &DefPumpLabel, 8);
			break;
		}
		if ((KeyChar>='1') && (KeyChar<= '8')){
		     i=(KeyChar-'1');
			if(PPumpLabel[i] == MaxCountId)
    a1a6:	86 e0       	ldi	r24, 0x06	; 6
    a1a8:	c8 2e       	mov	r12, r24
    a1aa:	d1 2c       	mov	r13, r1
    a1ac:	cc 0e       	add	r12, r28
    a1ae:	dd 1e       	adc	r13, r29
			   PPumpLabel[i] = 0;
			else
			   PPumpLabel[i]++;
            xPos=1+(i%4);
		    yPos=5+(i/4)*8;
			sprintf_P(strLabel,PSTR("%.2d"),PPumpLabel[i]);
    a1b0:	7e 01       	movw	r14, r28
    a1b2:	08 94       	sec
    a1b4:	e1 1c       	adc	r14, r1
    a1b6:	f1 1c       	adc	r15, r1
    a1b8:	1f e3       	ldi	r17, 0x3F	; 63
    a1ba:	a1 2e       	mov	r10, r17
    a1bc:	1e e0       	ldi	r17, 0x0E	; 14
    a1be:	b1 2e       	mov	r11, r17
		yPos=5+(i/4)*8;
        lcd_print(xPos,yPos,strLabel);
	}

	while(1){
		KeyPressed = _key_scan(1);
    a1c0:	81 e0       	ldi	r24, 0x01	; 1
    a1c2:	0e 94 58 a6 	call	0x14cb0	; 0x14cb0 <_key_scan>
    a1c6:	18 2f       	mov	r17, r24
		KeyChar    = _key_btn(KeyPressed);
    a1c8:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <_key_btn>
		if(KeyPressed == _KEY_CANCEL)break;
    a1cc:	17 3e       	cpi	r17, 0xE7	; 231
    a1ce:	09 f4       	brne	.+2      	; 0xa1d2 <FMenuPumpLabel+0x12a>
    a1d0:	48 c0       	rjmp	.+144    	; 0xa262 <FMenuPumpLabel+0x1ba>
		else
		if(KeyPressed == _KEY_ENTER){
    a1d2:	17 3b       	cpi	r17, 0xB7	; 183
    a1d4:	49 f4       	brne	.+18     	; 0xa1e8 <FMenuPumpLabel+0x140>
			eeprom_write_block((const void*) &PPumpLabel, (void*) &DefPumpLabel, 8);
    a1d6:	ce 01       	movw	r24, r28
    a1d8:	06 96       	adiw	r24, 0x06	; 6
    a1da:	6e e4       	ldi	r22, 0x4E	; 78
    a1dc:	70 e0       	ldi	r23, 0x00	; 0
    a1de:	48 e0       	ldi	r20, 0x08	; 8
    a1e0:	50 e0       	ldi	r21, 0x00	; 0
    a1e2:	0e 94 33 ad 	call	0x15a66	; 0x15a66 <__eewr_block_m128>
    a1e6:	3d c0       	rjmp	.+122    	; 0xa262 <FMenuPumpLabel+0x1ba>
			break;
		}
		if ((KeyChar>='1') && (KeyChar<= '8')){
    a1e8:	18 2f       	mov	r17, r24
    a1ea:	11 53       	subi	r17, 0x31	; 49
    a1ec:	18 30       	cpi	r17, 0x08	; 8
    a1ee:	40 f7       	brcc	.-48     	; 0xa1c0 <FMenuPumpLabel+0x118>
		     i=(KeyChar-'1');
			if(PPumpLabel[i] == MaxCountId)
    a1f0:	a1 2f       	mov	r26, r17
    a1f2:	b0 e0       	ldi	r27, 0x00	; 0
    a1f4:	f6 01       	movw	r30, r12
    a1f6:	ea 0f       	add	r30, r26
    a1f8:	fb 1f       	adc	r31, r27
    a1fa:	90 81       	ld	r25, Z
    a1fc:	80 91 56 01 	lds	r24, 0x0156
    a200:	98 17       	cp	r25, r24
    a202:	11 f4       	brne	.+4      	; 0xa208 <FMenuPumpLabel+0x160>
			   PPumpLabel[i] = 0;
    a204:	10 82       	st	Z, r1
    a206:	02 c0       	rjmp	.+4      	; 0xa20c <FMenuPumpLabel+0x164>
			else
			   PPumpLabel[i]++;
    a208:	9f 5f       	subi	r25, 0xFF	; 255
    a20a:	90 83       	st	Z, r25
            xPos=1+(i%4);
		    yPos=5+(i/4)*8;
			sprintf_P(strLabel,PSTR("%.2d"),PPumpLabel[i]);
    a20c:	00 d0       	rcall	.+0      	; 0xa20e <FMenuPumpLabel+0x166>
    a20e:	00 d0       	rcall	.+0      	; 0xa210 <FMenuPumpLabel+0x168>
    a210:	00 d0       	rcall	.+0      	; 0xa212 <FMenuPumpLabel+0x16a>
    a212:	2d b7       	in	r18, 0x3d	; 61
    a214:	3e b7       	in	r19, 0x3e	; 62
    a216:	2f 5f       	subi	r18, 0xFF	; 255
    a218:	3f 4f       	sbci	r19, 0xFF	; 255
    a21a:	ed b7       	in	r30, 0x3d	; 61
    a21c:	fe b7       	in	r31, 0x3e	; 62
    a21e:	f2 82       	std	Z+2, r15	; 0x02
    a220:	e1 82       	std	Z+1, r14	; 0x01
    a222:	f9 01       	movw	r30, r18
    a224:	b3 82       	std	Z+3, r11	; 0x03
    a226:	a2 82       	std	Z+2, r10	; 0x02
    a228:	ac 0d       	add	r26, r12
    a22a:	bd 1d       	adc	r27, r13
    a22c:	8c 91       	ld	r24, X
    a22e:	84 83       	std	Z+4, r24	; 0x04
    a230:	15 82       	std	Z+5, r1	; 0x05
    a232:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
            lcd_print(xPos,yPos,strLabel);
    a236:	8d b7       	in	r24, 0x3d	; 61
    a238:	9e b7       	in	r25, 0x3e	; 62
    a23a:	06 96       	adiw	r24, 0x06	; 6
    a23c:	0f b6       	in	r0, 0x3f	; 63
    a23e:	f8 94       	cli
    a240:	9e bf       	out	0x3e, r25	; 62
    a242:	0f be       	out	0x3f, r0	; 63
    a244:	8d bf       	out	0x3d, r24	; 61
    a246:	61 2f       	mov	r22, r17
    a248:	66 95       	lsr	r22
    a24a:	66 95       	lsr	r22
    a24c:	66 0f       	add	r22, r22
    a24e:	66 0f       	add	r22, r22
    a250:	66 0f       	add	r22, r22
    a252:	6b 5f       	subi	r22, 0xFB	; 251
    a254:	13 70       	andi	r17, 0x03	; 3
    a256:	81 2f       	mov	r24, r17
    a258:	8f 5f       	subi	r24, 0xFF	; 255
    a25a:	a7 01       	movw	r20, r14
    a25c:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
    a260:	af cf       	rjmp	.-162    	; 0xa1c0 <FMenuPumpLabel+0x118>
		}
	}
}
    a262:	2d 96       	adiw	r28, 0x0d	; 13
    a264:	0f b6       	in	r0, 0x3f	; 63
    a266:	f8 94       	cli
    a268:	de bf       	out	0x3e, r29	; 62
    a26a:	0f be       	out	0x3f, r0	; 63
    a26c:	cd bf       	out	0x3d, r28	; 61
    a26e:	cf 91       	pop	r28
    a270:	df 91       	pop	r29
    a272:	1f 91       	pop	r17
    a274:	ff 90       	pop	r15
    a276:	ef 90       	pop	r14
    a278:	df 90       	pop	r13
    a27a:	cf 90       	pop	r12
    a27c:	bf 90       	pop	r11
    a27e:	af 90       	pop	r10
    a280:	9f 90       	pop	r9
    a282:	8f 90       	pop	r8
    a284:	7f 90       	pop	r7
    a286:	6f 90       	pop	r6
    a288:	08 95       	ret

0000a28a <FSettingDec>:

	Result=MENU_DONE;
	return Result;
}

char FSettingDec(){
    a28a:	cf 92       	push	r12
    a28c:	df 92       	push	r13
    a28e:	ef 92       	push	r14
    a290:	ff 92       	push	r15
    a292:	0f 93       	push	r16
    a294:	1f 93       	push	r17
    a296:	df 93       	push	r29
    a298:	cf 93       	push	r28
    a29a:	cd b7       	in	r28, 0x3d	; 61
    a29c:	de b7       	in	r29, 0x3e	; 62
    a29e:	64 97       	sbiw	r28, 0x14	; 20
    a2a0:	0f b6       	in	r0, 0x3f	; 63
    a2a2:	f8 94       	cli
    a2a4:	de bf       	out	0x3e, r29	; 62
    a2a6:	0f be       	out	0x3f, r0	; 63
    a2a8:	cd bf       	out	0x3d, r28	; 61
static char stSettingDecimal=sdInitDisplay;
     char PDecimalConfig[4],Addr,KeyChar,Result;
	 char lcdteks[20];

     Result=MENU_NONE;
	 switch(stSettingDecimal){
    a2aa:	80 91 1f 02 	lds	r24, 0x021F
    a2ae:	82 30       	cpi	r24, 0x02	; 2
    a2b0:	09 f4       	brne	.+2      	; 0xa2b4 <FSettingDec+0x2a>
    a2b2:	b3 c0       	rjmp	.+358    	; 0xa41a <FSettingDec+0x190>
    a2b4:	83 30       	cpi	r24, 0x03	; 3
    a2b6:	30 f4       	brcc	.+12     	; 0xa2c4 <FSettingDec+0x3a>
    a2b8:	88 23       	and	r24, r24
    a2ba:	71 f0       	breq	.+28     	; 0xa2d8 <FSettingDec+0x4e>
    a2bc:	81 30       	cpi	r24, 0x01	; 1
    a2be:	09 f0       	breq	.+2      	; 0xa2c2 <FSettingDec+0x38>
    a2c0:	83 c1       	rjmp	.+774    	; 0xa5c8 <FSettingDec+0x33e>
    a2c2:	89 c0       	rjmp	.+274    	; 0xa3d6 <FSettingDec+0x14c>
    a2c4:	84 30       	cpi	r24, 0x04	; 4
    a2c6:	09 f4       	brne	.+2      	; 0xa2ca <FSettingDec+0x40>
    a2c8:	77 c1       	rjmp	.+750    	; 0xa5b8 <FSettingDec+0x32e>
    a2ca:	84 30       	cpi	r24, 0x04	; 4
    a2cc:	08 f4       	brcc	.+2      	; 0xa2d0 <FSettingDec+0x46>
    a2ce:	48 c1       	rjmp	.+656    	; 0xa560 <FSettingDec+0x2d6>
    a2d0:	85 30       	cpi	r24, 0x05	; 5
    a2d2:	09 f0       	breq	.+2      	; 0xa2d6 <FSettingDec+0x4c>
    a2d4:	79 c1       	rjmp	.+754    	; 0xa5c8 <FSettingDec+0x33e>
    a2d6:	74 c1       	rjmp	.+744    	; 0xa5c0 <FSettingDec+0x336>
	 case sdInitDisplay:
	      lcd_clear();         //"12345678901234567890
    a2d8:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
		  PDecimalConfig[0]=eeprom_read_byte(&DefDecimalPrice);
    a2dc:	89 e3       	ldi	r24, 0x39	; 57
    a2de:	90 e0       	ldi	r25, 0x00	; 0
    a2e0:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
    a2e4:	f8 2e       	mov	r15, r24
		  PDecimalConfig[1]=eeprom_read_byte(&DefDecimalVolume);
    a2e6:	8a e3       	ldi	r24, 0x3A	; 58
    a2e8:	90 e0       	ldi	r25, 0x00	; 0
    a2ea:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
    a2ee:	e8 2e       	mov	r14, r24
		  PDecimalConfig[2]=eeprom_read_byte(&DefDecimalMoney);
    a2f0:	8b e3       	ldi	r24, 0x3B	; 59
    a2f2:	90 e0       	ldi	r25, 0x00	; 0
    a2f4:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
    a2f8:	d8 2e       	mov	r13, r24


		  sprintf_P(lcdteks,PSTR("1.Price :%d"),PDecimalConfig[0]);
    a2fa:	00 d0       	rcall	.+0      	; 0xa2fc <FSettingDec+0x72>
    a2fc:	00 d0       	rcall	.+0      	; 0xa2fe <FSettingDec+0x74>
    a2fe:	00 d0       	rcall	.+0      	; 0xa300 <FSettingDec+0x76>
    a300:	ed b7       	in	r30, 0x3d	; 61
    a302:	fe b7       	in	r31, 0x3e	; 62
    a304:	31 96       	adiw	r30, 0x01	; 1
    a306:	8e 01       	movw	r16, r28
    a308:	0f 5f       	subi	r16, 0xFF	; 255
    a30a:	1f 4f       	sbci	r17, 0xFF	; 255
    a30c:	ad b7       	in	r26, 0x3d	; 61
    a30e:	be b7       	in	r27, 0x3e	; 62
    a310:	12 96       	adiw	r26, 0x02	; 2
    a312:	1c 93       	st	X, r17
    a314:	0e 93       	st	-X, r16
    a316:	11 97       	sbiw	r26, 0x01	; 1
    a318:	84 ef       	ldi	r24, 0xF4	; 244
    a31a:	92 e1       	ldi	r25, 0x12	; 18
    a31c:	93 83       	std	Z+3, r25	; 0x03
    a31e:	82 83       	std	Z+2, r24	; 0x02
    a320:	f4 82       	std	Z+4, r15	; 0x04
    a322:	15 82       	std	Z+5, r1	; 0x05
    a324:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
		  lcd_print(1,1,lcdteks);
    a328:	8d b7       	in	r24, 0x3d	; 61
    a32a:	9e b7       	in	r25, 0x3e	; 62
    a32c:	06 96       	adiw	r24, 0x06	; 6
    a32e:	0f b6       	in	r0, 0x3f	; 63
    a330:	f8 94       	cli
    a332:	9e bf       	out	0x3e, r25	; 62
    a334:	0f be       	out	0x3f, r0	; 63
    a336:	8d bf       	out	0x3d, r24	; 61
    a338:	81 e0       	ldi	r24, 0x01	; 1
    a33a:	61 e0       	ldi	r22, 0x01	; 1
    a33c:	a8 01       	movw	r20, r16
    a33e:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
		  sprintf_P(lcdteks,PSTR("2.Volume:%d"),PDecimalConfig[1]);
    a342:	00 d0       	rcall	.+0      	; 0xa344 <FSettingDec+0xba>
    a344:	00 d0       	rcall	.+0      	; 0xa346 <FSettingDec+0xbc>
    a346:	00 d0       	rcall	.+0      	; 0xa348 <FSettingDec+0xbe>
    a348:	ed b7       	in	r30, 0x3d	; 61
    a34a:	fe b7       	in	r31, 0x3e	; 62
    a34c:	31 96       	adiw	r30, 0x01	; 1
    a34e:	ad b7       	in	r26, 0x3d	; 61
    a350:	be b7       	in	r27, 0x3e	; 62
    a352:	12 96       	adiw	r26, 0x02	; 2
    a354:	1c 93       	st	X, r17
    a356:	0e 93       	st	-X, r16
    a358:	11 97       	sbiw	r26, 0x01	; 1
    a35a:	88 ee       	ldi	r24, 0xE8	; 232
    a35c:	92 e1       	ldi	r25, 0x12	; 18
    a35e:	93 83       	std	Z+3, r25	; 0x03
    a360:	82 83       	std	Z+2, r24	; 0x02
    a362:	e4 82       	std	Z+4, r14	; 0x04
    a364:	15 82       	std	Z+5, r1	; 0x05
    a366:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
		  lcd_print(2,1,lcdteks);
    a36a:	8d b7       	in	r24, 0x3d	; 61
    a36c:	9e b7       	in	r25, 0x3e	; 62
    a36e:	06 96       	adiw	r24, 0x06	; 6
    a370:	0f b6       	in	r0, 0x3f	; 63
    a372:	f8 94       	cli
    a374:	9e bf       	out	0x3e, r25	; 62
    a376:	0f be       	out	0x3f, r0	; 63
    a378:	8d bf       	out	0x3d, r24	; 61
    a37a:	82 e0       	ldi	r24, 0x02	; 2
    a37c:	61 e0       	ldi	r22, 0x01	; 1
    a37e:	a8 01       	movw	r20, r16
    a380:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
		  sprintf_P(lcdteks,PSTR("3.Money :%d"),PDecimalConfig[2]);
    a384:	00 d0       	rcall	.+0      	; 0xa386 <FSettingDec+0xfc>
    a386:	00 d0       	rcall	.+0      	; 0xa388 <FSettingDec+0xfe>
    a388:	00 d0       	rcall	.+0      	; 0xa38a <FSettingDec+0x100>
    a38a:	ed b7       	in	r30, 0x3d	; 61
    a38c:	fe b7       	in	r31, 0x3e	; 62
    a38e:	31 96       	adiw	r30, 0x01	; 1
    a390:	ad b7       	in	r26, 0x3d	; 61
    a392:	be b7       	in	r27, 0x3e	; 62
    a394:	12 96       	adiw	r26, 0x02	; 2
    a396:	1c 93       	st	X, r17
    a398:	0e 93       	st	-X, r16
    a39a:	11 97       	sbiw	r26, 0x01	; 1
    a39c:	8c ed       	ldi	r24, 0xDC	; 220
    a39e:	92 e1       	ldi	r25, 0x12	; 18
    a3a0:	93 83       	std	Z+3, r25	; 0x03
    a3a2:	82 83       	std	Z+2, r24	; 0x02
    a3a4:	d4 82       	std	Z+4, r13	; 0x04
    a3a6:	15 82       	std	Z+5, r1	; 0x05
    a3a8:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
		  lcd_print(3,1,lcdteks);
    a3ac:	8d b7       	in	r24, 0x3d	; 61
    a3ae:	9e b7       	in	r25, 0x3e	; 62
    a3b0:	06 96       	adiw	r24, 0x06	; 6
    a3b2:	0f b6       	in	r0, 0x3f	; 63
    a3b4:	f8 94       	cli
    a3b6:	9e bf       	out	0x3e, r25	; 62
    a3b8:	0f be       	out	0x3f, r0	; 63
    a3ba:	8d bf       	out	0x3d, r24	; 61
    a3bc:	83 e0       	ldi	r24, 0x03	; 3
    a3be:	61 e0       	ldi	r22, 0x01	; 1
    a3c0:	a8 01       	movw	r20, r16
    a3c2:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
		  lcd_printf(4,1,PSTR("[*]Back  [#]Next"));		  
    a3c6:	84 e0       	ldi	r24, 0x04	; 4
    a3c8:	61 e0       	ldi	r22, 0x01	; 1
    a3ca:	4b ec       	ldi	r20, 0xCB	; 203
    a3cc:	52 e1       	ldi	r21, 0x12	; 18
    a3ce:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  stSettingDecimal=sdSelectKey1;
    a3d2:	81 e0       	ldi	r24, 0x01	; 1
    a3d4:	f2 c0       	rjmp	.+484    	; 0xa5ba <FSettingDec+0x330>
		  break;
     case sdSelectKey1:
          KeyChar=_key_btn(_key_scan(1));
    a3d6:	81 e0       	ldi	r24, 0x01	; 1
    a3d8:	0e 94 58 a6 	call	0x14cb0	; 0x14cb0 <_key_scan>
    a3dc:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <_key_btn>
		  if ((KeyChar>='1')&&(KeyChar<='3')){
    a3e0:	08 2f       	mov	r16, r24
    a3e2:	01 53       	subi	r16, 0x31	; 49
    a3e4:	03 30       	cpi	r16, 0x03	; 3
    a3e6:	88 f4       	brcc	.+34     	; 0xa40a <FSettingDec+0x180>
		      Addr=KeyChar-'1';
		  	  PDecimalConfig[Addr]=eeprom_read_byte(&DefDecimalPrice+Addr);
    a3e8:	10 e0       	ldi	r17, 0x00	; 0
    a3ea:	07 5c       	subi	r16, 0xC7	; 199
    a3ec:	1f 4f       	sbci	r17, 0xFF	; 255
    a3ee:	c8 01       	movw	r24, r16
    a3f0:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
			  PDecimalConfig[Addr]=(PDecimalConfig[Addr]+1)%3;
			  eeprom_write_byte(&DefDecimalPrice+Addr,PDecimalConfig[Addr]);
    a3f4:	90 e0       	ldi	r25, 0x00	; 0
    a3f6:	01 96       	adiw	r24, 0x01	; 1
    a3f8:	63 e0       	ldi	r22, 0x03	; 3
    a3fa:	70 e0       	ldi	r23, 0x00	; 0
    a3fc:	0e 94 79 aa 	call	0x154f2	; 0x154f2 <__divmodhi4>
    a400:	68 2f       	mov	r22, r24
    a402:	c8 01       	movw	r24, r16
    a404:	0e 94 3d ad 	call	0x15a7a	; 0x15a7a <__eewr_byte_m128>
    a408:	d4 c0       	rjmp	.+424    	; 0xa5b2 <FSettingDec+0x328>
              stSettingDecimal=sdInitDisplay;
		  }else if (KeyChar=='*') stSettingDecimal=sdExitSettingDecimal;
    a40a:	8a 32       	cpi	r24, 0x2A	; 42
    a40c:	11 f4       	brne	.+4      	; 0xa412 <FSettingDec+0x188>
    a40e:	85 e0       	ldi	r24, 0x05	; 5
    a410:	d4 c0       	rjmp	.+424    	; 0xa5ba <FSettingDec+0x330>
		  else if (KeyChar=='#') stSettingDecimal=sdInitDisplay2;
    a412:	83 32       	cpi	r24, 0x23	; 35
    a414:	09 f0       	breq	.+2      	; 0xa418 <FSettingDec+0x18e>
    a416:	d8 c0       	rjmp	.+432    	; 0xa5c8 <FSettingDec+0x33e>
    a418:	cf c0       	rjmp	.+414    	; 0xa5b8 <FSettingDec+0x32e>
          break;
     case sdInitDisplay2:
		  PDecimalConfig[0]=eeprom_read_byte(&DefDecimalTotalVolume);
    a41a:	8d e3       	ldi	r24, 0x3D	; 61
    a41c:	90 e0       	ldi	r25, 0x00	; 0
    a41e:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
    a422:	f8 2e       	mov	r15, r24
		  PDecimalConfig[1]=eeprom_read_byte(&DefDecimalTotalMoney);
    a424:	8e e3       	ldi	r24, 0x3E	; 62
    a426:	90 e0       	ldi	r25, 0x00	; 0
    a428:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
    a42c:	e8 2e       	mov	r14, r24
		  PDecimalConfig[2]=eeprom_read_byte(&DefDecimalMark);
    a42e:	8f e3       	ldi	r24, 0x3F	; 63
    a430:	90 e0       	ldi	r25, 0x00	; 0
    a432:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
    a436:	d8 2e       	mov	r13, r24
		  PDecimalConfig[3]=eeprom_read_byte(&DefCurrencyMark);
    a438:	80 e4       	ldi	r24, 0x40	; 64
    a43a:	90 e0       	ldi	r25, 0x00	; 0
    a43c:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
    a440:	c8 2e       	mov	r12, r24
		  sprintf_P(lcdteks,PSTR("1.T.Volume:%d "),PDecimalConfig[0]);
    a442:	00 d0       	rcall	.+0      	; 0xa444 <FSettingDec+0x1ba>
    a444:	00 d0       	rcall	.+0      	; 0xa446 <FSettingDec+0x1bc>
    a446:	00 d0       	rcall	.+0      	; 0xa448 <FSettingDec+0x1be>
    a448:	ed b7       	in	r30, 0x3d	; 61
    a44a:	fe b7       	in	r31, 0x3e	; 62
    a44c:	31 96       	adiw	r30, 0x01	; 1
    a44e:	8e 01       	movw	r16, r28
    a450:	0f 5f       	subi	r16, 0xFF	; 255
    a452:	1f 4f       	sbci	r17, 0xFF	; 255
    a454:	ad b7       	in	r26, 0x3d	; 61
    a456:	be b7       	in	r27, 0x3e	; 62
    a458:	12 96       	adiw	r26, 0x02	; 2
    a45a:	1c 93       	st	X, r17
    a45c:	0e 93       	st	-X, r16
    a45e:	11 97       	sbiw	r26, 0x01	; 1
    a460:	8c eb       	ldi	r24, 0xBC	; 188
    a462:	92 e1       	ldi	r25, 0x12	; 18
    a464:	93 83       	std	Z+3, r25	; 0x03
    a466:	82 83       	std	Z+2, r24	; 0x02
    a468:	f4 82       	std	Z+4, r15	; 0x04
    a46a:	15 82       	std	Z+5, r1	; 0x05
    a46c:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
		  lcd_print(1,1,lcdteks);
    a470:	8d b7       	in	r24, 0x3d	; 61
    a472:	9e b7       	in	r25, 0x3e	; 62
    a474:	06 96       	adiw	r24, 0x06	; 6
    a476:	0f b6       	in	r0, 0x3f	; 63
    a478:	f8 94       	cli
    a47a:	9e bf       	out	0x3e, r25	; 62
    a47c:	0f be       	out	0x3f, r0	; 63
    a47e:	8d bf       	out	0x3d, r24	; 61
    a480:	81 e0       	ldi	r24, 0x01	; 1
    a482:	61 e0       	ldi	r22, 0x01	; 1
    a484:	a8 01       	movw	r20, r16
    a486:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
		  sprintf_P(lcdteks,PSTR("2.T.Money :%d "),PDecimalConfig[1]);
    a48a:	00 d0       	rcall	.+0      	; 0xa48c <FSettingDec+0x202>
    a48c:	00 d0       	rcall	.+0      	; 0xa48e <FSettingDec+0x204>
    a48e:	00 d0       	rcall	.+0      	; 0xa490 <FSettingDec+0x206>
    a490:	ed b7       	in	r30, 0x3d	; 61
    a492:	fe b7       	in	r31, 0x3e	; 62
    a494:	31 96       	adiw	r30, 0x01	; 1
    a496:	ad b7       	in	r26, 0x3d	; 61
    a498:	be b7       	in	r27, 0x3e	; 62
    a49a:	12 96       	adiw	r26, 0x02	; 2
    a49c:	1c 93       	st	X, r17
    a49e:	0e 93       	st	-X, r16
    a4a0:	11 97       	sbiw	r26, 0x01	; 1
    a4a2:	8d ea       	ldi	r24, 0xAD	; 173
    a4a4:	92 e1       	ldi	r25, 0x12	; 18
    a4a6:	93 83       	std	Z+3, r25	; 0x03
    a4a8:	82 83       	std	Z+2, r24	; 0x02
    a4aa:	e4 82       	std	Z+4, r14	; 0x04
    a4ac:	15 82       	std	Z+5, r1	; 0x05
    a4ae:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
		  lcd_print(2,1,lcdteks);
    a4b2:	8d b7       	in	r24, 0x3d	; 61
    a4b4:	9e b7       	in	r25, 0x3e	; 62
    a4b6:	06 96       	adiw	r24, 0x06	; 6
    a4b8:	0f b6       	in	r0, 0x3f	; 63
    a4ba:	f8 94       	cli
    a4bc:	9e bf       	out	0x3e, r25	; 62
    a4be:	0f be       	out	0x3f, r0	; 63
    a4c0:	8d bf       	out	0x3d, r24	; 61
    a4c2:	82 e0       	ldi	r24, 0x02	; 2
    a4c4:	61 e0       	ldi	r22, 0x01	; 1
    a4c6:	a8 01       	movw	r20, r16
    a4c8:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
		  sprintf_P(lcdteks,PSTR("3.Decimal :%c "),PDecimalConfig[2]);
    a4cc:	00 d0       	rcall	.+0      	; 0xa4ce <FSettingDec+0x244>
    a4ce:	00 d0       	rcall	.+0      	; 0xa4d0 <FSettingDec+0x246>
    a4d0:	00 d0       	rcall	.+0      	; 0xa4d2 <FSettingDec+0x248>
    a4d2:	ed b7       	in	r30, 0x3d	; 61
    a4d4:	fe b7       	in	r31, 0x3e	; 62
    a4d6:	31 96       	adiw	r30, 0x01	; 1
    a4d8:	ad b7       	in	r26, 0x3d	; 61
    a4da:	be b7       	in	r27, 0x3e	; 62
    a4dc:	12 96       	adiw	r26, 0x02	; 2
    a4de:	1c 93       	st	X, r17
    a4e0:	0e 93       	st	-X, r16
    a4e2:	11 97       	sbiw	r26, 0x01	; 1
    a4e4:	8e e9       	ldi	r24, 0x9E	; 158
    a4e6:	92 e1       	ldi	r25, 0x12	; 18
    a4e8:	93 83       	std	Z+3, r25	; 0x03
    a4ea:	82 83       	std	Z+2, r24	; 0x02
    a4ec:	d4 82       	std	Z+4, r13	; 0x04
    a4ee:	15 82       	std	Z+5, r1	; 0x05
    a4f0:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
		  lcd_print(3,1,lcdteks);
    a4f4:	8d b7       	in	r24, 0x3d	; 61
    a4f6:	9e b7       	in	r25, 0x3e	; 62
    a4f8:	06 96       	adiw	r24, 0x06	; 6
    a4fa:	0f b6       	in	r0, 0x3f	; 63
    a4fc:	f8 94       	cli
    a4fe:	9e bf       	out	0x3e, r25	; 62
    a500:	0f be       	out	0x3f, r0	; 63
    a502:	8d bf       	out	0x3d, r24	; 61
    a504:	83 e0       	ldi	r24, 0x03	; 3
    a506:	61 e0       	ldi	r22, 0x01	; 1
    a508:	a8 01       	movw	r20, r16
    a50a:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
		  sprintf_P(lcdteks,PSTR("4.Sparator:%c "),PDecimalConfig[3]);
    a50e:	00 d0       	rcall	.+0      	; 0xa510 <FSettingDec+0x286>
    a510:	00 d0       	rcall	.+0      	; 0xa512 <FSettingDec+0x288>
    a512:	00 d0       	rcall	.+0      	; 0xa514 <FSettingDec+0x28a>
    a514:	ed b7       	in	r30, 0x3d	; 61
    a516:	fe b7       	in	r31, 0x3e	; 62
    a518:	31 96       	adiw	r30, 0x01	; 1
    a51a:	ad b7       	in	r26, 0x3d	; 61
    a51c:	be b7       	in	r27, 0x3e	; 62
    a51e:	12 96       	adiw	r26, 0x02	; 2
    a520:	1c 93       	st	X, r17
    a522:	0e 93       	st	-X, r16
    a524:	11 97       	sbiw	r26, 0x01	; 1
    a526:	8f e8       	ldi	r24, 0x8F	; 143
    a528:	92 e1       	ldi	r25, 0x12	; 18
    a52a:	93 83       	std	Z+3, r25	; 0x03
    a52c:	82 83       	std	Z+2, r24	; 0x02
    a52e:	c4 82       	std	Z+4, r12	; 0x04
    a530:	15 82       	std	Z+5, r1	; 0x05
    a532:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
		  lcd_print(4,1,lcdteks);
    a536:	8d b7       	in	r24, 0x3d	; 61
    a538:	9e b7       	in	r25, 0x3e	; 62
    a53a:	06 96       	adiw	r24, 0x06	; 6
    a53c:	0f b6       	in	r0, 0x3f	; 63
    a53e:	f8 94       	cli
    a540:	9e bf       	out	0x3e, r25	; 62
    a542:	0f be       	out	0x3f, r0	; 63
    a544:	8d bf       	out	0x3d, r24	; 61
    a546:	84 e0       	ldi	r24, 0x04	; 4
    a548:	61 e0       	ldi	r22, 0x01	; 1
    a54a:	a8 01       	movw	r20, r16
    a54c:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
		  lcd_printf(4,14,PSTR("*)Back"));
    a550:	84 e0       	ldi	r24, 0x04	; 4
    a552:	6e e0       	ldi	r22, 0x0E	; 14
    a554:	48 e8       	ldi	r20, 0x88	; 136
    a556:	52 e1       	ldi	r21, 0x12	; 18
    a558:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
	      stSettingDecimal=sdSelectKey2;
    a55c:	83 e0       	ldi	r24, 0x03	; 3
    a55e:	2d c0       	rjmp	.+90     	; 0xa5ba <FSettingDec+0x330>
	      break;
     case sdSelectKey2:
          KeyChar=_key_btn(_key_scan(1));
    a560:	81 e0       	ldi	r24, 0x01	; 1
    a562:	0e 94 58 a6 	call	0x14cb0	; 0x14cb0 <_key_scan>
    a566:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <_key_btn>
    a56a:	98 2f       	mov	r25, r24
		  if ((KeyChar>='1')&&(KeyChar<='2')){
    a56c:	08 2f       	mov	r16, r24
    a56e:	01 53       	subi	r16, 0x31	; 49
    a570:	02 30       	cpi	r16, 0x02	; 2
    a572:	68 f4       	brcc	.+26     	; 0xa58e <FSettingDec+0x304>
		      Addr=KeyChar-'1';
		  	  PDecimalConfig[Addr]=eeprom_read_byte(&DefDecimalTotalVolume+Addr);
    a574:	10 e0       	ldi	r17, 0x00	; 0
    a576:	03 5c       	subi	r16, 0xC3	; 195
    a578:	1f 4f       	sbci	r17, 0xFF	; 255
    a57a:	c8 01       	movw	r24, r16
    a57c:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
		      PDecimalConfig[Addr]=(PDecimalConfig[Addr]+1)%4;

			  eeprom_write_byte(&DefDecimalTotalVolume+Addr,PDecimalConfig[Addr]);
    a580:	68 2f       	mov	r22, r24
    a582:	70 e0       	ldi	r23, 0x00	; 0
    a584:	6f 5f       	subi	r22, 0xFF	; 255
    a586:	7f 4f       	sbci	r23, 0xFF	; 255
    a588:	63 70       	andi	r22, 0x03	; 3
    a58a:	70 70       	andi	r23, 0x00	; 0
    a58c:	0c c0       	rjmp	.+24     	; 0xa5a6 <FSettingDec+0x31c>
              stSettingDecimal=sdInitDisplay2;
		  }else if ((KeyChar>='3')&&(KeyChar<='4')){
    a58e:	83 53       	subi	r24, 0x33	; 51
    a590:	82 30       	cpi	r24, 0x02	; 2
    a592:	68 f4       	brcc	.+26     	; 0xa5ae <FSettingDec+0x324>
		      Addr=KeyChar-'1';
		  	  PDecimalConfig[Addr]=eeprom_read_byte(&DefDecimalTotalVolume+Addr);
    a594:	10 e0       	ldi	r17, 0x00	; 0
    a596:	03 5c       	subi	r16, 0xC3	; 195
    a598:	1f 4f       	sbci	r17, 0xFF	; 255
    a59a:	c8 01       	movw	r24, r16
    a59c:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
			  PDecimalConfig[Addr]=SelectMark(PDecimalConfig[Addr]);
    a5a0:	0e 94 3c 21 	call	0x4278	; 0x4278 <SelectMark>
    a5a4:	68 2f       	mov	r22, r24
			  eeprom_write_byte(&DefDecimalTotalVolume+Addr,PDecimalConfig[Addr]);
    a5a6:	c8 01       	movw	r24, r16
    a5a8:	0e 94 3d ad 	call	0x15a7a	; 0x15a7a <__eewr_byte_m128>
    a5ac:	05 c0       	rjmp	.+10     	; 0xa5b8 <FSettingDec+0x32e>
              stSettingDecimal=sdInitDisplay2;
		  }else if (KeyChar=='*') stSettingDecimal=sdInitDisplay;
    a5ae:	9a 32       	cpi	r25, 0x2A	; 42
    a5b0:	59 f4       	brne	.+22     	; 0xa5c8 <FSettingDec+0x33e>
    a5b2:	10 92 1f 02 	sts	0x021F, r1
    a5b6:	08 c0       	rjmp	.+16     	; 0xa5c8 <FSettingDec+0x33e>
		          stSettingDecimal=sdTestInput;
				  }*/
          break;
     case sdTestInput:
	      //if (TestUserInput()==MENU_DONE)
		  stSettingDecimal=sdInitDisplay2;
    a5b8:	82 e0       	ldi	r24, 0x02	; 2
    a5ba:	80 93 1f 02 	sts	0x021F, r24
    a5be:	04 c0       	rjmp	.+8      	; 0xa5c8 <FSettingDec+0x33e>
	      break;
	 case sdExitSettingDecimal:
          stSettingDecimal=sdInitDisplay;
    a5c0:	10 92 1f 02 	sts	0x021F, r1
    a5c4:	81 e0       	ldi	r24, 0x01	; 1
    a5c6:	01 c0       	rjmp	.+2      	; 0xa5ca <FSettingDec+0x340>
    a5c8:	80 e0       	ldi	r24, 0x00	; 0
		  Result=MENU_DONE;
	      break;
	 }
    return Result;
}
    a5ca:	64 96       	adiw	r28, 0x14	; 20
    a5cc:	0f b6       	in	r0, 0x3f	; 63
    a5ce:	f8 94       	cli
    a5d0:	de bf       	out	0x3e, r29	; 62
    a5d2:	0f be       	out	0x3f, r0	; 63
    a5d4:	cd bf       	out	0x3d, r28	; 61
    a5d6:	cf 91       	pop	r28
    a5d8:	df 91       	pop	r29
    a5da:	1f 91       	pop	r17
    a5dc:	0f 91       	pop	r16
    a5de:	ff 90       	pop	r15
    a5e0:	ef 90       	pop	r14
    a5e2:	df 90       	pop	r13
    a5e4:	cf 90       	pop	r12
    a5e6:	08 95       	ret

0000a5e8 <FMenuShift>:
static char stMenuShift=msInitMenuShift;
     char SubMenu,KeyChar,KeyPressed;
     char Result;

Result=MENU_NONE;
     switch(stMenuShift){
    a5e8:	80 91 4a 02 	lds	r24, 0x024A
    a5ec:	82 30       	cpi	r24, 0x02	; 2
    a5ee:	09 f4       	brne	.+2      	; 0xa5f2 <FMenuShift+0xa>
    a5f0:	48 c0       	rjmp	.+144    	; 0xa682 <FMenuShift+0x9a>
    a5f2:	83 30       	cpi	r24, 0x03	; 3
    a5f4:	30 f4       	brcc	.+12     	; 0xa602 <FMenuShift+0x1a>
    a5f6:	88 23       	and	r24, r24
    a5f8:	69 f0       	breq	.+26     	; 0xa614 <FMenuShift+0x2c>
    a5fa:	81 30       	cpi	r24, 0x01	; 1
    a5fc:	09 f0       	breq	.+2      	; 0xa600 <FMenuShift+0x18>
    a5fe:	50 c0       	rjmp	.+160    	; 0xa6a0 <FMenuShift+0xb8>
    a600:	25 c0       	rjmp	.+74     	; 0xa64c <FMenuShift+0x64>
    a602:	84 30       	cpi	r24, 0x04	; 4
    a604:	09 f4       	brne	.+2      	; 0xa608 <FMenuShift+0x20>
    a606:	4c c0       	rjmp	.+152    	; 0xa6a0 <FMenuShift+0xb8>
    a608:	84 30       	cpi	r24, 0x04	; 4
    a60a:	e8 f1       	brcs	.+122    	; 0xa686 <FMenuShift+0x9e>
    a60c:	85 30       	cpi	r24, 0x05	; 5
    a60e:	09 f0       	breq	.+2      	; 0xa612 <FMenuShift+0x2a>
    a610:	47 c0       	rjmp	.+142    	; 0xa6a0 <FMenuShift+0xb8>
    a612:	42 c0       	rjmp	.+132    	; 0xa698 <FMenuShift+0xb0>
	 case msInitMenuShift:
	      lcd_clear();
    a614:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
		  lcd_printf(1,1,PSTR("1.Close Shift"));
    a618:	81 e0       	ldi	r24, 0x01	; 1
    a61a:	61 e0       	ldi	r22, 0x01	; 1
    a61c:	45 e6       	ldi	r20, 0x65	; 101
    a61e:	57 e1       	ldi	r21, 0x17	; 23
    a620:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  lcd_printf(2,1,PSTR("2.Close Day  "));
    a624:	82 e0       	ldi	r24, 0x02	; 2
    a626:	61 e0       	ldi	r22, 0x01	; 1
    a628:	47 e5       	ldi	r20, 0x57	; 87
    a62a:	57 e1       	ldi	r21, 0x17	; 23
    a62c:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  lcd_printf(3,1,PSTR("3.Lock Pump  "));
    a630:	83 e0       	ldi	r24, 0x03	; 3
    a632:	61 e0       	ldi	r22, 0x01	; 1
    a634:	49 e4       	ldi	r20, 0x49	; 73
    a636:	57 e1       	ldi	r21, 0x17	; 23
    a638:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  lcd_printf(4,1,PSTR("*)Exit"));
    a63c:	84 e0       	ldi	r24, 0x04	; 4
    a63e:	61 e0       	ldi	r22, 0x01	; 1
    a640:	42 e4       	ldi	r20, 0x42	; 66
    a642:	57 e1       	ldi	r21, 0x17	; 23
    a644:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  stMenuShift=msSelectShift;
    a648:	81 e0       	ldi	r24, 0x01	; 1
    a64a:	18 c0       	rjmp	.+48     	; 0xa67c <FMenuShift+0x94>
	      break;
     case msSelectShift:
          KeyPressed=_key_scan(1);
    a64c:	81 e0       	ldi	r24, 0x01	; 1
    a64e:	0e 94 58 a6 	call	0x14cb0	; 0x14cb0 <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
    a652:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <_key_btn>
          switch(KeyChar){
    a656:	82 33       	cpi	r24, 0x32	; 50
    a658:	61 f0       	breq	.+24     	; 0xa672 <FMenuShift+0x8a>
    a65a:	83 33       	cpi	r24, 0x33	; 51
    a65c:	28 f4       	brcc	.+10     	; 0xa668 <FMenuShift+0x80>
    a65e:	8a 32       	cpi	r24, 0x2A	; 42
    a660:	61 f0       	breq	.+24     	; 0xa67a <FMenuShift+0x92>
    a662:	81 33       	cpi	r24, 0x31	; 49
    a664:	e9 f4       	brne	.+58     	; 0xa6a0 <FMenuShift+0xb8>
    a666:	03 c0       	rjmp	.+6      	; 0xa66e <FMenuShift+0x86>
    a668:	83 33       	cpi	r24, 0x33	; 51
    a66a:	d1 f4       	brne	.+52     	; 0xa6a0 <FMenuShift+0xb8>
    a66c:	04 c0       	rjmp	.+8      	; 0xa676 <FMenuShift+0x8e>
		  case '1':
		       SubMenu=MENU_NONE;
		       stMenuShift=msCloseShift;
    a66e:	82 e0       	ldi	r24, 0x02	; 2
    a670:	05 c0       	rjmp	.+10     	; 0xa67c <FMenuShift+0x94>
		       break; 
		  case '2':
		       SubMenu=MENU_NONE;
		       stMenuShift=msCloseDay;
    a672:	83 e0       	ldi	r24, 0x03	; 3
    a674:	03 c0       	rjmp	.+6      	; 0xa67c <FMenuShift+0x94>
		       break; 
		  case '3':
		       SubMenu=MENU_NONE;
		       stMenuShift=msLockPump;
    a676:	84 e0       	ldi	r24, 0x04	; 4
    a678:	01 c0       	rjmp	.+2      	; 0xa67c <FMenuShift+0x94>
		       break; 
		  case '*':
		       stMenuShift=msExitShift;
    a67a:	85 e0       	ldi	r24, 0x05	; 5
    a67c:	80 93 4a 02 	sts	0x024A, r24
    a680:	09 c0       	rjmp	.+18     	; 0xa694 <FMenuShift+0xac>
		       break; 			   		  
		  }
		  break;
     case msCloseShift:
	      SubMenu=FCloseShift(CONTINUE_SHIFT);
    a682:	82 e0       	ldi	r24, 0x02	; 2
    a684:	01 c0       	rjmp	.+2      	; 0xa688 <FMenuShift+0xa0>
		  if (SubMenu==MENU_DONE)stMenuShift=msInitMenuShift;
		  //IsGenerateReport=True;		  
	      break;
     case msCloseDay:
	      SubMenu=FCloseShift(NEW_SHIFT);
    a686:	81 e0       	ldi	r24, 0x01	; 1
    a688:	0e 94 f5 49 	call	0x93ea	; 0x93ea <FCloseShift>
		  if (SubMenu==MENU_DONE)stMenuShift=msInitMenuShift;
    a68c:	81 30       	cpi	r24, 0x01	; 1
    a68e:	41 f4       	brne	.+16     	; 0xa6a0 <FMenuShift+0xb8>
    a690:	10 92 4a 02 	sts	0x024A, r1
    a694:	80 e0       	ldi	r24, 0x00	; 0
    a696:	08 95       	ret
     case msLockPump:
	      SubMenu=FLockPump();
		  if (SubMenu==MENU_DONE)stMenuShift=msInitMenuShift;
	      break;
     case msExitShift:
          stMenuShift=msInitMenuShift;
    a698:	10 92 4a 02 	sts	0x024A, r1
    a69c:	81 e0       	ldi	r24, 0x01	; 1
    a69e:	08 95       	ret
    a6a0:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
	      break;	 
	 } 
   return Result;
}
    a6a2:	08 95       	ret

0000a6a4 <system_stop>:
	return Result;
}

void system_stop(){
	 char __key,__num;
	 lcd_printf(4,1,PSTR("Press any key..     "));
    a6a4:	84 e0       	ldi	r24, 0x04	; 4
    a6a6:	61 e0       	ldi	r22, 0x01	; 1
    a6a8:	49 e9       	ldi	r20, 0x99	; 153
    a6aa:	53 e2       	ldi	r21, 0x23	; 35
    a6ac:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    a6b0:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    a6b2:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    a6b4:	85 e0       	ldi	r24, 0x05	; 5
    a6b6:	80 93 bc 01 	sts	0x01BC, r24
void system_stop(){
	 char __key,__num;
	 lcd_printf(4,1,PSTR("Press any key..     "));
	 system_beep(5);
	 while(1){
		__key = _key_scan(1);
    a6ba:	81 e0       	ldi	r24, 0x01	; 1
    a6bc:	0e 94 58 a6 	call	0x14cb0	; 0x14cb0 <_key_scan>
		__num = _key_btn(__key);
    a6c0:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <_key_btn>
		if ((__num>='0')&&(__num<='9')||(IsStandAloneDetected==True)) 
    a6c4:	80 53       	subi	r24, 0x30	; 48
    a6c6:	8a 30       	cpi	r24, 0x0A	; 10
    a6c8:	20 f0       	brcs	.+8      	; 0xa6d2 <system_stop+0x2e>
    a6ca:	80 91 9c 01 	lds	r24, 0x019C
    a6ce:	81 30       	cpi	r24, 0x01	; 1
    a6d0:	a1 f7       	brne	.-24     	; 0xa6ba <system_stop+0x16>
    a6d2:	08 95       	ret

0000a6d4 <systemForceType>:
	 }
}

char systemForceType(){
     char Result,KeyChar;
	 lcd_printf(4,1,PSTR("[1]Slave [2]Standalone"));
    a6d4:	84 e0       	ldi	r24, 0x04	; 4
    a6d6:	61 e0       	ldi	r22, 0x01	; 1
    a6d8:	4e ea       	ldi	r20, 0xAE	; 174
    a6da:	53 e2       	ldi	r21, 0x23	; 35
    a6dc:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    a6e0:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    a6e2:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    a6e4:	81 e0       	ldi	r24, 0x01	; 1
    a6e6:	80 93 bc 01 	sts	0x01BC, r24
    a6ea:	80 e5       	ldi	r24, 0x50	; 80
    a6ec:	93 ec       	ldi	r25, 0xC3	; 195
    a6ee:	01 97       	sbiw	r24, 0x01	; 1
    a6f0:	f1 f7       	brne	.-4      	; 0xa6ee <systemForceType+0x1a>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    a6f2:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    a6f4:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    a6f6:	82 e0       	ldi	r24, 0x02	; 2
    a6f8:	80 93 bc 01 	sts	0x01BC, r24
	 lcd_printf(4,1,PSTR("[1]Slave [2]Standalone"));
	 system_beep(1);
	 _delay_ms(200);
	 system_beep(2);
	 while(1){
	    KeyChar=_key_btn(_key_scan(1));
    a6fc:	81 e0       	ldi	r24, 0x01	; 1
    a6fe:	0e 94 58 a6 	call	0x14cb0	; 0x14cb0 <_key_scan>
    a702:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <_key_btn>
    a706:	98 2f       	mov	r25, r24
		if ((KeyChar=='1')||(KeyChar=='2')){
    a708:	81 53       	subi	r24, 0x31	; 49
    a70a:	82 30       	cpi	r24, 0x02	; 2
    a70c:	b8 f7       	brcc	.-18     	; 0xa6fc <systemForceType+0x28>
		    Result=KeyChar;
			break;
		}
	 }
	return Result;
}
    a70e:	89 2f       	mov	r24, r25
    a710:	08 95       	ret

0000a712 <_menu_datetime>:
		}
	}
}


void _menu_datetime(void){
    a712:	8f 92       	push	r8
    a714:	9f 92       	push	r9
    a716:	af 92       	push	r10
    a718:	bf 92       	push	r11
    a71a:	cf 92       	push	r12
    a71c:	df 92       	push	r13
    a71e:	ef 92       	push	r14
    a720:	ff 92       	push	r15
    a722:	0f 93       	push	r16
    a724:	1f 93       	push	r17
    a726:	df 93       	push	r29
    a728:	cf 93       	push	r28
    a72a:	cd b7       	in	r28, 0x3d	; 61
    a72c:	de b7       	in	r29, 0x3e	; 62
    a72e:	c2 54       	subi	r28, 0x42	; 66
    a730:	d0 40       	sbci	r29, 0x00	; 0
    a732:	0f b6       	in	r0, 0x3f	; 63
    a734:	f8 94       	cli
    a736:	de bf       	out	0x3e, r29	; 62
    a738:	0f be       	out	0x3f, r0	; 63
    a73a:	cd bf       	out	0x3d, r28	; 61
	char	__key, __chr;
	char	__date[9];
	char	__time[9];
	char	__map[12][4] = {	{1,  8, 0, 3}, {1,  9, 0, 9}, {1, 11, 0, 1}, {1, 12, 0, 9},
								{1, 14, 0, 9}, {1, 15, 0, 9}, {2,  8, 0, 2}, {2,  9, 0, 9},
								{2, 11, 0, 5}, {2, 12, 0, 9}, {2, 14, 0, 5}, {2, 15, 0, 9}};
    a73c:	de 01       	movw	r26, r28
    a73e:	53 96       	adiw	r26, 0x13	; 19
    a740:	e6 e2       	ldi	r30, 0x26	; 38
    a742:	f1 e0       	ldi	r31, 0x01	; 1
    a744:	80 e3       	ldi	r24, 0x30	; 48
    a746:	01 90       	ld	r0, Z+
    a748:	0d 92       	st	X+, r0
    a74a:	81 50       	subi	r24, 0x01	; 1
    a74c:	e1 f7       	brne	.-8      	; 0xa746 <_menu_datetime+0x34>

	_datetime(_DATETIME_READ, __date, __time);
    a74e:	8e 01       	movw	r16, r28
    a750:	0f 5f       	subi	r16, 0xFF	; 255
    a752:	1f 4f       	sbci	r17, 0xFF	; 255
    a754:	b8 01       	movw	r22, r16
    a756:	ae 01       	movw	r20, r28
    a758:	46 5f       	subi	r20, 0xF6	; 246
    a75a:	5f 4f       	sbci	r21, 0xFF	; 255
    a75c:	0e 94 b9 a7 	call	0x14f72	; 0x14f72 <_datetime>
    a760:	85 e1       	ldi	r24, 0x15	; 21
    a762:	88 2e       	mov	r8, r24
    a764:	91 2c       	mov	r9, r1
    a766:	8c 0e       	add	r8, r28
    a768:	9d 1e       	adc	r9, r29
    a76a:	d4 01       	movw	r26, r8
    a76c:	20 e0       	ldi	r18, 0x00	; 0
    a76e:	30 e0       	ldi	r19, 0x00	; 0
    a770:	40 e0       	ldi	r20, 0x00	; 0
    a772:	50 e0       	ldi	r21, 0x00	; 0
	for(__i = 0, __ii = 0; __i < 6; __i++, __ii++){
		if(__i == 2 || __i == 4)
    a774:	22 30       	cpi	r18, 0x02	; 2
    a776:	31 05       	cpc	r19, r1
    a778:	19 f0       	breq	.+6      	; 0xa780 <_menu_datetime+0x6e>
    a77a:	24 30       	cpi	r18, 0x04	; 4
    a77c:	31 05       	cpc	r19, r1
    a77e:	11 f4       	brne	.+4      	; 0xa784 <_menu_datetime+0x72>
			__ii++;
    a780:	4f 5f       	subi	r20, 0xFF	; 255
    a782:	5f 4f       	sbci	r21, 0xFF	; 255
		__map[__i][2] = __date[__ii];
    a784:	f8 01       	movw	r30, r16
    a786:	e4 0f       	add	r30, r20
    a788:	f5 1f       	adc	r31, r21
    a78a:	80 81       	ld	r24, Z
    a78c:	8c 93       	st	X, r24
	char	__map[12][4] = {	{1,  8, 0, 3}, {1,  9, 0, 9}, {1, 11, 0, 1}, {1, 12, 0, 9},
								{1, 14, 0, 9}, {1, 15, 0, 9}, {2,  8, 0, 2}, {2,  9, 0, 9},
								{2, 11, 0, 5}, {2, 12, 0, 9}, {2, 14, 0, 5}, {2, 15, 0, 9}};

	_datetime(_DATETIME_READ, __date, __time);
	for(__i = 0, __ii = 0; __i < 6; __i++, __ii++){
    a78e:	2f 5f       	subi	r18, 0xFF	; 255
    a790:	3f 4f       	sbci	r19, 0xFF	; 255
    a792:	14 96       	adiw	r26, 0x04	; 4
    a794:	26 30       	cpi	r18, 0x06	; 6
    a796:	31 05       	cpc	r19, r1
    a798:	19 f0       	breq	.+6      	; 0xa7a0 <_menu_datetime+0x8e>
    a79a:	4f 5f       	subi	r20, 0xFF	; 255
    a79c:	5f 4f       	sbci	r21, 0xFF	; 255
    a79e:	ea cf       	rjmp	.-44     	; 0xa774 <_menu_datetime+0x62>
    a7a0:	0d e2       	ldi	r16, 0x2D	; 45
    a7a2:	a0 2e       	mov	r10, r16
    a7a4:	b1 2c       	mov	r11, r1
    a7a6:	ac 0e       	add	r10, r28
    a7a8:	bd 1e       	adc	r11, r29
    a7aa:	d5 01       	movw	r26, r10
    a7ac:	40 e0       	ldi	r20, 0x00	; 0
    a7ae:	50 e0       	ldi	r21, 0x00	; 0
		__map[__i][2] = __date[__ii];
	}
	for(__i = 6, __ii = 0; __i < 12; __i++, __ii++){
		if(__i == 8 || __i == 10)
			__ii++;
		__map[__i][2] = __time[__ii];
    a7b0:	1a e0       	ldi	r17, 0x0A	; 10
    a7b2:	e1 2e       	mov	r14, r17
    a7b4:	f1 2c       	mov	r15, r1
    a7b6:	ec 0e       	add	r14, r28
    a7b8:	fd 1e       	adc	r15, r29
		if(__i == 2 || __i == 4)
			__ii++;
		__map[__i][2] = __date[__ii];
	}
	for(__i = 6, __ii = 0; __i < 12; __i++, __ii++){
		if(__i == 8 || __i == 10)
    a7ba:	28 30       	cpi	r18, 0x08	; 8
    a7bc:	31 05       	cpc	r19, r1
    a7be:	19 f0       	breq	.+6      	; 0xa7c6 <_menu_datetime+0xb4>
    a7c0:	2a 30       	cpi	r18, 0x0A	; 10
    a7c2:	31 05       	cpc	r19, r1
    a7c4:	11 f4       	brne	.+4      	; 0xa7ca <_menu_datetime+0xb8>
			__ii++;
    a7c6:	4f 5f       	subi	r20, 0xFF	; 255
    a7c8:	5f 4f       	sbci	r21, 0xFF	; 255
		__map[__i][2] = __time[__ii];
    a7ca:	f7 01       	movw	r30, r14
    a7cc:	e4 0f       	add	r30, r20
    a7ce:	f5 1f       	adc	r31, r21
    a7d0:	80 81       	ld	r24, Z
    a7d2:	8c 93       	st	X, r24
	for(__i = 0, __ii = 0; __i < 6; __i++, __ii++){
		if(__i == 2 || __i == 4)
			__ii++;
		__map[__i][2] = __date[__ii];
	}
	for(__i = 6, __ii = 0; __i < 12; __i++, __ii++){
    a7d4:	2f 5f       	subi	r18, 0xFF	; 255
    a7d6:	3f 4f       	sbci	r19, 0xFF	; 255
    a7d8:	14 96       	adiw	r26, 0x04	; 4
    a7da:	2c 30       	cpi	r18, 0x0C	; 12
    a7dc:	31 05       	cpc	r19, r1
    a7de:	19 f0       	breq	.+6      	; 0xa7e6 <_menu_datetime+0xd4>
    a7e0:	4f 5f       	subi	r20, 0xFF	; 255
    a7e2:	5f 4f       	sbci	r21, 0xFF	; 255
    a7e4:	ea cf       	rjmp	.-44     	; 0xa7ba <_menu_datetime+0xa8>
		if(__i == 8 || __i == 10)
			__ii++;
		__map[__i][2] = __time[__ii];
	}

	lcd_clear();_delay_ms(10);
    a7e6:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
    a7ea:	84 ec       	ldi	r24, 0xC4	; 196
    a7ec:	99 e0       	ldi	r25, 0x09	; 9
    a7ee:	01 97       	sbiw	r24, 0x01	; 1
    a7f0:	f1 f7       	brne	.-4      	; 0xa7ee <_menu_datetime+0xdc>
	lcd_printf(1, 1, PSTR("DATE : "));
    a7f2:	81 e0       	ldi	r24, 0x01	; 1
    a7f4:	61 e0       	ldi	r22, 0x01	; 1
    a7f6:	49 e3       	ldi	r20, 0x39	; 57
    a7f8:	5d e0       	ldi	r21, 0x0D	; 13
    a7fa:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
	lcd_printf(2, 1, PSTR("TIME : "));
    a7fe:	82 e0       	ldi	r24, 0x02	; 2
    a800:	61 e0       	ldi	r22, 0x01	; 1
    a802:	41 e3       	ldi	r20, 0x31	; 49
    a804:	5d e0       	ldi	r21, 0x0D	; 13
    a806:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
	lcd_print(1, 8, __date);
    a80a:	81 e0       	ldi	r24, 0x01	; 1
    a80c:	68 e0       	ldi	r22, 0x08	; 8
    a80e:	8e 01       	movw	r16, r28
    a810:	0f 5f       	subi	r16, 0xFF	; 255
    a812:	1f 4f       	sbci	r17, 0xFF	; 255
    a814:	a8 01       	movw	r20, r16
    a816:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
	lcd_print(2, 8, __time);
    a81a:	82 e0       	ldi	r24, 0x02	; 2
    a81c:	68 e0       	ldi	r22, 0x08	; 8
    a81e:	a7 01       	movw	r20, r14
    a820:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
	lcd_printf(4, 1, PSTR("*)Cancel      #)Save"));
    a824:	84 e0       	ldi	r24, 0x04	; 4
    a826:	61 e0       	ldi	r22, 0x01	; 1
    a828:	4c e1       	ldi	r20, 0x1C	; 28
    a82a:	5d e0       	ldi	r21, 0x0D	; 13
    a82c:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>

	__i = 0;
	lcd_xy(__map[__i][0], __map[__i][1]);
    a830:	8b 89       	ldd	r24, Y+19	; 0x13
    a832:	6c 89       	ldd	r22, Y+20	; 0x14
    a834:	0e 94 9e a4 	call	0x1493c	; 0x1493c <lcd_xy>
	CURSOR_SHOW;
    a838:	8f e0       	ldi	r24, 0x0F	; 15
    a83a:	0e 94 0b a4 	call	0x14816	; 0x14816 <lcd_command>
    a83e:	ee 24       	eor	r14, r14
    a840:	ff 24       	eor	r15, r15
					else
						goto LEWAT;
				}
			}
CETAK:
			__map[__i][2] = __chr;
    a842:	68 01       	movw	r12, r16
	lcd_xy(__map[__i][0], __map[__i][1]);
	CURSOR_SHOW;

	while(1){
		
		__key = _key_scan(1);
    a844:	81 e0       	ldi	r24, 0x01	; 1
    a846:	0e 94 58 a6 	call	0x14cb0	; 0x14cb0 <_key_scan>
    a84a:	18 2f       	mov	r17, r24
		__chr = _key_btn(__key);
    a84c:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <_key_btn>
    a850:	48 2f       	mov	r20, r24
		if(__chr >= 0x30 && __chr <= 0x39){
    a852:	80 53       	subi	r24, 0x30	; 48
    a854:	8a 30       	cpi	r24, 0x0A	; 10
    a856:	08 f0       	brcs	.+2      	; 0xa85a <_menu_datetime+0x148>
    a858:	72 c0       	rjmp	.+228    	; 0xa93e <_menu_datetime+0x22c>
			if(__i == 0 || __i == 2 || __i == 6 || __i == 8 || __i == 10){
    a85a:	e1 14       	cp	r14, r1
    a85c:	f1 04       	cpc	r15, r1
    a85e:	81 f0       	breq	.+32     	; 0xa880 <_menu_datetime+0x16e>
    a860:	82 e0       	ldi	r24, 0x02	; 2
    a862:	e8 16       	cp	r14, r24
    a864:	f1 04       	cpc	r15, r1
    a866:	61 f0       	breq	.+24     	; 0xa880 <_menu_datetime+0x16e>
    a868:	96 e0       	ldi	r25, 0x06	; 6
    a86a:	e9 16       	cp	r14, r25
    a86c:	f1 04       	cpc	r15, r1
    a86e:	41 f0       	breq	.+16     	; 0xa880 <_menu_datetime+0x16e>
    a870:	a8 e0       	ldi	r26, 0x08	; 8
    a872:	ea 16       	cp	r14, r26
    a874:	f1 04       	cpc	r15, r1
    a876:	21 f0       	breq	.+8      	; 0xa880 <_menu_datetime+0x16e>
    a878:	ba e0       	ldi	r27, 0x0A	; 10
    a87a:	eb 16       	cp	r14, r27
    a87c:	f1 04       	cpc	r15, r1
    a87e:	81 f4       	brne	.+32     	; 0xa8a0 <_menu_datetime+0x18e>
				if((__chr - 0x30) <= __map[__i][3])
    a880:	84 2f       	mov	r24, r20
    a882:	90 e0       	ldi	r25, 0x00	; 0
    a884:	c0 97       	sbiw	r24, 0x30	; 48
    a886:	f7 01       	movw	r30, r14
    a888:	ee 0f       	add	r30, r30
    a88a:	ff 1f       	adc	r31, r31
    a88c:	ee 0f       	add	r30, r30
    a88e:	ff 1f       	adc	r31, r31
    a890:	ec 0d       	add	r30, r12
    a892:	fd 1d       	adc	r31, r13
    a894:	25 89       	ldd	r18, Z+21	; 0x15
    a896:	30 e0       	ldi	r19, 0x00	; 0
    a898:	28 17       	cp	r18, r24
    a89a:	39 07       	cpc	r19, r25
    a89c:	84 f5       	brge	.+96     	; 0xa8fe <_menu_datetime+0x1ec>
    a89e:	4f c0       	rjmp	.+158    	; 0xa93e <_menu_datetime+0x22c>
					goto CETAK;
				else
					goto LEWAT;
			}
			if(__i == 1){
    a8a0:	81 e0       	ldi	r24, 0x01	; 1
    a8a2:	e8 16       	cp	r14, r24
    a8a4:	f1 04       	cpc	r15, r1
    a8a6:	61 f4       	brne	.+24     	; 0xa8c0 <_menu_datetime+0x1ae>
				if((__map[0][2] - 0x30) < __map[0][3])
    a8a8:	2d 89       	ldd	r18, Y+21	; 0x15
    a8aa:	30 e0       	ldi	r19, 0x00	; 0
    a8ac:	2f 52       	subi	r18, 0x2F	; 47
    a8ae:	30 40       	sbci	r19, 0x00	; 0
    a8b0:	8e 89       	ldd	r24, Y+22	; 0x16
    a8b2:	90 e0       	ldi	r25, 0x00	; 0
    a8b4:	82 17       	cp	r24, r18
    a8b6:	93 07       	cpc	r25, r19
    a8b8:	14 f5       	brge	.+68     	; 0xa8fe <_menu_datetime+0x1ec>
					goto CETAK;
				if((__map[0][2] - 0x30) >= __map[0][3]){
					if(__chr < 0x32)
    a8ba:	42 33       	cpi	r20, 0x32	; 50
    a8bc:	00 f1       	brcs	.+64     	; 0xa8fe <_menu_datetime+0x1ec>
    a8be:	3f c0       	rjmp	.+126    	; 0xa93e <_menu_datetime+0x22c>
						goto CETAK;
					else
						goto LEWAT;
				}
			}
			if(__i == 3){
    a8c0:	93 e0       	ldi	r25, 0x03	; 3
    a8c2:	e9 16       	cp	r14, r25
    a8c4:	f1 04       	cpc	r15, r1
    a8c6:	61 f4       	brne	.+24     	; 0xa8e0 <_menu_datetime+0x1ce>
				if((__map[2][2] - 0x30) < __map[2][3])
    a8c8:	2d 8d       	ldd	r18, Y+29	; 0x1d
    a8ca:	30 e0       	ldi	r19, 0x00	; 0
    a8cc:	2f 52       	subi	r18, 0x2F	; 47
    a8ce:	30 40       	sbci	r19, 0x00	; 0
    a8d0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    a8d2:	90 e0       	ldi	r25, 0x00	; 0
    a8d4:	82 17       	cp	r24, r18
    a8d6:	93 07       	cpc	r25, r19
    a8d8:	94 f4       	brge	.+36     	; 0xa8fe <_menu_datetime+0x1ec>
					goto CETAK;
				if((__map[2][2] - 0x30) >= __map[2][3]){
					if(__chr < 0x33)
    a8da:	43 33       	cpi	r20, 0x33	; 51
    a8dc:	80 f0       	brcs	.+32     	; 0xa8fe <_menu_datetime+0x1ec>
    a8de:	2f c0       	rjmp	.+94     	; 0xa93e <_menu_datetime+0x22c>
						goto CETAK;
					else
						goto LEWAT;
				}
			}
			if(__i == 7){
    a8e0:	a7 e0       	ldi	r26, 0x07	; 7
    a8e2:	ea 16       	cp	r14, r26
    a8e4:	f1 04       	cpc	r15, r1
    a8e6:	59 f4       	brne	.+22     	; 0xa8fe <_menu_datetime+0x1ec>
				if((__map[6][2] - 0x30) < __map[6][3])
    a8e8:	2d a5       	ldd	r18, Y+45	; 0x2d
    a8ea:	30 e0       	ldi	r19, 0x00	; 0
    a8ec:	2f 52       	subi	r18, 0x2F	; 47
    a8ee:	30 40       	sbci	r19, 0x00	; 0
    a8f0:	8e a5       	ldd	r24, Y+46	; 0x2e
    a8f2:	90 e0       	ldi	r25, 0x00	; 0
    a8f4:	82 17       	cp	r24, r18
    a8f6:	93 07       	cpc	r25, r19
    a8f8:	14 f4       	brge	.+4      	; 0xa8fe <_menu_datetime+0x1ec>
					goto CETAK;
				if((__map[6][2] - 0x30) >= __map[6][3]){
					if(__chr < 0x34)
    a8fa:	44 33       	cpi	r20, 0x34	; 52
    a8fc:	00 f5       	brcc	.+64     	; 0xa93e <_menu_datetime+0x22c>
					else
						goto LEWAT;
				}
			}
CETAK:
			__map[__i][2] = __chr;
    a8fe:	f7 01       	movw	r30, r14
    a900:	ee 0f       	add	r30, r30
    a902:	ff 1f       	adc	r31, r31
    a904:	ee 0f       	add	r30, r30
    a906:	ff 1f       	adc	r31, r31
    a908:	ec 0d       	add	r30, r12
    a90a:	fd 1d       	adc	r31, r13
    a90c:	44 8b       	std	Z+20, r20	; 0x14
			_lcd(__chr);
    a90e:	84 2f       	mov	r24, r20
    a910:	0e 94 78 a4 	call	0x148f0	; 0x148f0 <_lcd>
			__i++;
    a914:	08 94       	sec
    a916:	e1 1c       	adc	r14, r1
    a918:	f1 1c       	adc	r15, r1
    a91a:	bc e0       	ldi	r27, 0x0C	; 12
    a91c:	eb 16       	cp	r14, r27
    a91e:	f1 04       	cpc	r15, r1
    a920:	1c f0       	brlt	.+6      	; 0xa928 <_menu_datetime+0x216>
    a922:	7b e0       	ldi	r23, 0x0B	; 11
    a924:	e7 2e       	mov	r14, r23
    a926:	f1 2c       	mov	r15, r1
			if(__i > 11)
				__i = 11;
			lcd_xy(__map[__i][0], __map[__i][1]);
    a928:	f7 01       	movw	r30, r14
    a92a:	ee 0f       	add	r30, r30
    a92c:	ff 1f       	adc	r31, r31
    a92e:	ee 0f       	add	r30, r30
    a930:	ff 1f       	adc	r31, r31
    a932:	ec 0d       	add	r30, r12
    a934:	fd 1d       	adc	r31, r13
    a936:	82 89       	ldd	r24, Z+18	; 0x12
    a938:	63 89       	ldd	r22, Z+19	; 0x13
    a93a:	0e 94 9e a4 	call	0x1493c	; 0x1493c <lcd_xy>
LEWAT:		;
		}
		if(__key == _KEY_SHIFT){
    a93e:	1b 37       	cpi	r17, 0x7B	; 123
    a940:	59 f4       	brne	.+22     	; 0xa958 <_menu_datetime+0x246>
			__i++;
    a942:	08 94       	sec
    a944:	e1 1c       	adc	r14, r1
    a946:	f1 1c       	adc	r15, r1
    a948:	8c e0       	ldi	r24, 0x0C	; 12
    a94a:	e8 16       	cp	r14, r24
    a94c:	f1 04       	cpc	r15, r1
    a94e:	6c f0       	brlt	.+26     	; 0xa96a <_menu_datetime+0x258>
    a950:	5b e0       	ldi	r21, 0x0B	; 11
    a952:	e5 2e       	mov	r14, r21
    a954:	f1 2c       	mov	r15, r1
    a956:	09 c0       	rjmp	.+18     	; 0xa96a <_menu_datetime+0x258>
			if(__i > 11)
				__i = 11;
			lcd_xy(__map[__i][0], __map[__i][1]);
		}
		if(__key == _KEY_CLEAR){
    a958:	17 37       	cpi	r17, 0x77	; 119
    a95a:	99 f4       	brne	.+38     	; 0xa982 <_menu_datetime+0x270>
			__i--;
    a95c:	08 94       	sec
    a95e:	e1 08       	sbc	r14, r1
    a960:	f1 08       	sbc	r15, r1
    a962:	f7 fe       	sbrs	r15, 7
    a964:	02 c0       	rjmp	.+4      	; 0xa96a <_menu_datetime+0x258>
    a966:	ee 24       	eor	r14, r14
    a968:	ff 24       	eor	r15, r15
			if(__i <= 0)
				__i = 0;
			lcd_xy(__map[__i][0], __map[__i][1]);
    a96a:	f7 01       	movw	r30, r14
    a96c:	ee 0f       	add	r30, r30
    a96e:	ff 1f       	adc	r31, r31
    a970:	ee 0f       	add	r30, r30
    a972:	ff 1f       	adc	r31, r31
    a974:	ec 0d       	add	r30, r12
    a976:	fd 1d       	adc	r31, r13
    a978:	82 89       	ldd	r24, Z+18	; 0x12
    a97a:	63 89       	ldd	r22, Z+19	; 0x13
    a97c:	0e 94 9e a4 	call	0x1493c	; 0x1493c <lcd_xy>
    a980:	61 cf       	rjmp	.-318    	; 0xa844 <_menu_datetime+0x132>
		}
		if(__key == _KEY_CANCEL)
    a982:	17 3e       	cpi	r17, 0xE7	; 231
    a984:	09 f4       	brne	.+2      	; 0xa988 <_menu_datetime+0x276>
    a986:	49 c0       	rjmp	.+146    	; 0xaa1a <_menu_datetime+0x308>
			break;
		if(__key == _KEY_ENTER){
    a988:	17 3b       	cpi	r17, 0xB7	; 183
    a98a:	09 f0       	breq	.+2      	; 0xa98e <_menu_datetime+0x27c>
    a98c:	5b cf       	rjmp	.-330    	; 0xa844 <_menu_datetime+0x132>
    a98e:	20 e0       	ldi	r18, 0x00	; 0
    a990:	30 e0       	ldi	r19, 0x00	; 0
    a992:	40 e0       	ldi	r20, 0x00	; 0
    a994:	50 e0       	ldi	r21, 0x00	; 0
			for(__i = 0, __ii = 0; __i < 6; __i++, __ii++){
				if(__i == 2 || __i == 4)
					__ii++;
				__date[__ii] = __map[__i][2];
    a996:	be 01       	movw	r22, r28
    a998:	6f 5f       	subi	r22, 0xFF	; 255
    a99a:	7f 4f       	sbci	r23, 0xFF	; 255
		}
		if(__key == _KEY_CANCEL)
			break;
		if(__key == _KEY_ENTER){
			for(__i = 0, __ii = 0; __i < 6; __i++, __ii++){
				if(__i == 2 || __i == 4)
    a99c:	22 30       	cpi	r18, 0x02	; 2
    a99e:	31 05       	cpc	r19, r1
    a9a0:	19 f0       	breq	.+6      	; 0xa9a8 <_menu_datetime+0x296>
    a9a2:	24 30       	cpi	r18, 0x04	; 4
    a9a4:	31 05       	cpc	r19, r1
    a9a6:	11 f4       	brne	.+4      	; 0xa9ac <_menu_datetime+0x29a>
					__ii++;
    a9a8:	4f 5f       	subi	r20, 0xFF	; 255
    a9aa:	5f 4f       	sbci	r21, 0xFF	; 255
				__date[__ii] = __map[__i][2];
    a9ac:	fb 01       	movw	r30, r22
    a9ae:	e4 0f       	add	r30, r20
    a9b0:	f5 1f       	adc	r31, r21
    a9b2:	d4 01       	movw	r26, r8
    a9b4:	8c 91       	ld	r24, X
    a9b6:	80 83       	st	Z, r24
			lcd_xy(__map[__i][0], __map[__i][1]);
		}
		if(__key == _KEY_CANCEL)
			break;
		if(__key == _KEY_ENTER){
			for(__i = 0, __ii = 0; __i < 6; __i++, __ii++){
    a9b8:	2f 5f       	subi	r18, 0xFF	; 255
    a9ba:	3f 4f       	sbci	r19, 0xFF	; 255
    a9bc:	84 e0       	ldi	r24, 0x04	; 4
    a9be:	90 e0       	ldi	r25, 0x00	; 0
    a9c0:	88 0e       	add	r8, r24
    a9c2:	99 1e       	adc	r9, r25
    a9c4:	26 30       	cpi	r18, 0x06	; 6
    a9c6:	31 05       	cpc	r19, r1
    a9c8:	19 f0       	breq	.+6      	; 0xa9d0 <_menu_datetime+0x2be>
    a9ca:	4f 5f       	subi	r20, 0xFF	; 255
    a9cc:	5f 4f       	sbci	r21, 0xFF	; 255
    a9ce:	e6 cf       	rjmp	.-52     	; 0xa99c <_menu_datetime+0x28a>
    a9d0:	60 e0       	ldi	r22, 0x00	; 0
    a9d2:	70 e0       	ldi	r23, 0x00	; 0
				__date[__ii] = __map[__i][2];
			}
			for(__i = 6, __ii = 0; __i < 12; __i++, __ii++){
				if(__i == 8 || __i == 10)
					__ii++;
				__time[__ii] = __map[__i][2];
    a9d4:	ae 01       	movw	r20, r28
    a9d6:	46 5f       	subi	r20, 0xF6	; 246
    a9d8:	5f 4f       	sbci	r21, 0xFF	; 255
				if(__i == 2 || __i == 4)
					__ii++;
				__date[__ii] = __map[__i][2];
			}
			for(__i = 6, __ii = 0; __i < 12; __i++, __ii++){
				if(__i == 8 || __i == 10)
    a9da:	28 30       	cpi	r18, 0x08	; 8
    a9dc:	31 05       	cpc	r19, r1
    a9de:	19 f0       	breq	.+6      	; 0xa9e6 <_menu_datetime+0x2d4>
    a9e0:	2a 30       	cpi	r18, 0x0A	; 10
    a9e2:	31 05       	cpc	r19, r1
    a9e4:	11 f4       	brne	.+4      	; 0xa9ea <_menu_datetime+0x2d8>
					__ii++;
    a9e6:	6f 5f       	subi	r22, 0xFF	; 255
    a9e8:	7f 4f       	sbci	r23, 0xFF	; 255
				__time[__ii] = __map[__i][2];
    a9ea:	fa 01       	movw	r30, r20
    a9ec:	e6 0f       	add	r30, r22
    a9ee:	f7 1f       	adc	r31, r23
    a9f0:	d5 01       	movw	r26, r10
    a9f2:	8c 91       	ld	r24, X
    a9f4:	80 83       	st	Z, r24
			for(__i = 0, __ii = 0; __i < 6; __i++, __ii++){
				if(__i == 2 || __i == 4)
					__ii++;
				__date[__ii] = __map[__i][2];
			}
			for(__i = 6, __ii = 0; __i < 12; __i++, __ii++){
    a9f6:	2f 5f       	subi	r18, 0xFF	; 255
    a9f8:	3f 4f       	sbci	r19, 0xFF	; 255
    a9fa:	84 e0       	ldi	r24, 0x04	; 4
    a9fc:	90 e0       	ldi	r25, 0x00	; 0
    a9fe:	a8 0e       	add	r10, r24
    aa00:	b9 1e       	adc	r11, r25
    aa02:	2c 30       	cpi	r18, 0x0C	; 12
    aa04:	31 05       	cpc	r19, r1
    aa06:	19 f0       	breq	.+6      	; 0xaa0e <_menu_datetime+0x2fc>
    aa08:	6f 5f       	subi	r22, 0xFF	; 255
    aa0a:	7f 4f       	sbci	r23, 0xFF	; 255
    aa0c:	e6 cf       	rjmp	.-52     	; 0xa9da <_menu_datetime+0x2c8>
				if(__i == 8 || __i == 10)
					__ii++;
				__time[__ii] = __map[__i][2];
			}
			_datetime(_DATETIME_WRITE, __date, __time);
    aa0e:	81 e0       	ldi	r24, 0x01	; 1
    aa10:	be 01       	movw	r22, r28
    aa12:	6f 5f       	subi	r22, 0xFF	; 255
    aa14:	7f 4f       	sbci	r23, 0xFF	; 255
    aa16:	0e 94 b9 a7 	call	0x14f72	; 0x14f72 <_datetime>
			break;
		}
	}
	CURSOR_HIDE;
    aa1a:	8c e0       	ldi	r24, 0x0C	; 12
    aa1c:	0e 94 0b a4 	call	0x14816	; 0x14816 <lcd_command>
}
    aa20:	ce 5b       	subi	r28, 0xBE	; 190
    aa22:	df 4f       	sbci	r29, 0xFF	; 255
    aa24:	0f b6       	in	r0, 0x3f	; 63
    aa26:	f8 94       	cli
    aa28:	de bf       	out	0x3e, r29	; 62
    aa2a:	0f be       	out	0x3f, r0	; 63
    aa2c:	cd bf       	out	0x3d, r28	; 61
    aa2e:	cf 91       	pop	r28
    aa30:	df 91       	pop	r29
    aa32:	1f 91       	pop	r17
    aa34:	0f 91       	pop	r16
    aa36:	ff 90       	pop	r15
    aa38:	ef 90       	pop	r14
    aa3a:	df 90       	pop	r13
    aa3c:	cf 90       	pop	r12
    aa3e:	bf 90       	pop	r11
    aa40:	af 90       	pop	r10
    aa42:	9f 90       	pop	r9
    aa44:	8f 90       	pop	r8
    aa46:	08 95       	ret

0000aa48 <FSettingDatetime>:
	 }
     return Result;
}

char FSettingDatetime(){
     _menu_datetime();
    aa48:	0e 94 89 53 	call	0xa712	; 0xa712 <_menu_datetime>
     return MENU_DONE;
}
    aa4c:	81 e0       	ldi	r24, 0x01	; 1
    aa4e:	08 95       	ret

0000aa50 <menu_FIP>:
	 }
  return Result;
}


char menu_FIP(char *xFIP,char *sFIPUsed){
    aa50:	4f 92       	push	r4
    aa52:	5f 92       	push	r5
    aa54:	6f 92       	push	r6
    aa56:	7f 92       	push	r7
    aa58:	8f 92       	push	r8
    aa5a:	9f 92       	push	r9
    aa5c:	af 92       	push	r10
    aa5e:	bf 92       	push	r11
    aa60:	cf 92       	push	r12
    aa62:	df 92       	push	r13
    aa64:	ef 92       	push	r14
    aa66:	ff 92       	push	r15
    aa68:	0f 93       	push	r16
    aa6a:	1f 93       	push	r17
    aa6c:	df 93       	push	r29
    aa6e:	cf 93       	push	r28
    aa70:	cd b7       	in	r28, 0x3d	; 61
    aa72:	de b7       	in	r29, 0x3e	; 62
    aa74:	a2 97       	sbiw	r28, 0x22	; 34
    aa76:	0f b6       	in	r0, 0x3f	; 63
    aa78:	f8 94       	cli
    aa7a:	de bf       	out	0x3e, r29	; 62
    aa7c:	0f be       	out	0x3f, r0	; 63
    aa7e:	cd bf       	out	0x3d, r28	; 61
    aa80:	7c 01       	movw	r14, r24
    aa82:	6b 01       	movw	r12, r22

       char KeyPressed=0,KeyChar;
       char Result=FIP_NONE;
       char FIP[8],strPumpL[3],strPumpR[3],lcdteks[20];

       switch(stEnterFIP){
    aa84:	80 91 6c 02 	lds	r24, 0x026C
    aa88:	81 30       	cpi	r24, 0x01	; 1
    aa8a:	09 f4       	brne	.+2      	; 0xaa8e <menu_FIP+0x3e>
    aa8c:	cd c0       	rjmp	.+410    	; 0xac28 <menu_FIP+0x1d8>
    aa8e:	81 30       	cpi	r24, 0x01	; 1
    aa90:	20 f0       	brcs	.+8      	; 0xaa9a <menu_FIP+0x4a>
    aa92:	82 30       	cpi	r24, 0x02	; 2
    aa94:	09 f0       	breq	.+2      	; 0xaa98 <menu_FIP+0x48>
    aa96:	4a c1       	rjmp	.+660    	; 0xad2c <menu_FIP+0x2dc>
    aa98:	47 c1       	rjmp	.+654    	; 0xad28 <menu_FIP+0x2d8>
 	   case efInit:
	 	    eeprom_read_block((void*) &FIP, (const void*) &DefPumpMap, 8);
    aa9a:	8e 01       	movw	r16, r28
    aa9c:	09 5f       	subi	r16, 0xF9	; 249
    aa9e:	1f 4f       	sbci	r17, 0xFF	; 255
    aaa0:	c8 01       	movw	r24, r16
    aaa2:	66 e4       	ldi	r22, 0x46	; 70
    aaa4:	70 e0       	ldi	r23, 0x00	; 0
    aaa6:	48 e0       	ldi	r20, 0x08	; 8
    aaa8:	50 e0       	ldi	r21, 0x00	; 0
    aaaa:	0e 94 1b ad 	call	0x15a36	; 0x15a36 <__eerd_block_m128>
		    lcd_clear(); 
    aaae:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
    aab2:	f8 01       	movw	r30, r16
    aab4:	20 e0       	ldi	r18, 0x00	; 0
    aab6:	30 e0       	ldi	r19, 0x00	; 0
    aab8:	07 c0       	rjmp	.+14     	; 0xaac8 <menu_FIP+0x78>
		    for (iLoop=0;iLoop<8;iLoop++){
			     if (FIP[iLoop]>99) FIP[iLoop]=0;
    aaba:	80 81       	ld	r24, Z
    aabc:	84 36       	cpi	r24, 0x64	; 100
    aabe:	08 f0       	brcs	.+2      	; 0xaac2 <menu_FIP+0x72>
    aac0:	10 82       	st	Z, r1
    aac2:	2f 5f       	subi	r18, 0xFF	; 255
    aac4:	3f 4f       	sbci	r19, 0xFF	; 255
    aac6:	31 96       	adiw	r30, 0x01	; 1

       switch(stEnterFIP){
 	   case efInit:
	 	    eeprom_read_block((void*) &FIP, (const void*) &DefPumpMap, 8);
		    lcd_clear(); 
		    for (iLoop=0;iLoop<8;iLoop++){
    aac8:	28 30       	cpi	r18, 0x08	; 8
    aaca:	31 05       	cpc	r19, r1
    aacc:	b0 f3       	brcs	.-20     	; 0xaaba <menu_FIP+0x6a>
			     if (FIP[iLoop]>99) FIP[iLoop]=0;
		    }
		    for(iLoop=0;iLoop<4;iLoop++){
    aace:	10 92 6a 02 	sts	0x026A, r1
    aad2:	10 92 69 02 	sts	0x0269, r1
	     }String[Size]=0;
	 }
}

void leadingZero(char Val,char *StrResult){
     sprintf_P(StrResult,PSTR("%.2d"),Val);
    aad6:	5e 01       	movw	r10, r28
    aad8:	08 94       	sec
    aada:	a1 1c       	adc	r10, r1
    aadc:	b1 1c       	adc	r11, r1
    aade:	59 ee       	ldi	r21, 0xE9	; 233
    aae0:	c5 2e       	mov	r12, r21
    aae2:	5e e0       	ldi	r21, 0x0E	; 14
    aae4:	d5 2e       	mov	r13, r21
    aae6:	47 e0       	ldi	r20, 0x07	; 7
    aae8:	44 2e       	mov	r4, r20
    aaea:	51 2c       	mov	r5, r1
    aaec:	4c 0e       	add	r4, r28
    aaee:	5d 1e       	adc	r5, r29
		    for (iLoop=0;iLoop<8;iLoop++){
			     if (FIP[iLoop]>99) FIP[iLoop]=0;
		    }
		    for(iLoop=0;iLoop<4;iLoop++){
		        leadingZero(FIP[iLoop],strPumpL);leadingZero(FIP[iLoop+4],strPumpR);
                sprintf_P(lcdteks,PSTR("%d.P%s | %d.P%s"),(iLoop+1),strPumpL,(iLoop+5),strPumpR);
    aaf0:	34 e0       	ldi	r19, 0x04	; 4
    aaf2:	e3 2e       	mov	r14, r19
    aaf4:	f1 2c       	mov	r15, r1
    aaf6:	ec 0e       	add	r14, r28
    aaf8:	fd 1e       	adc	r15, r29
    aafa:	2b e0       	ldi	r18, 0x0B	; 11
    aafc:	62 2e       	mov	r6, r18
    aafe:	71 2c       	mov	r7, r1
    ab00:	6c 0e       	add	r6, r28
    ab02:	7d 1e       	adc	r7, r29
    ab04:	8e 01       	movw	r16, r28
    ab06:	01 5f       	subi	r16, 0xF1	; 241
    ab08:	1f 4f       	sbci	r17, 0xFF	; 255
    ab0a:	97 ef       	ldi	r25, 0xF7	; 247
    ab0c:	89 2e       	mov	r8, r25
    ab0e:	9d e1       	ldi	r25, 0x1D	; 29
    ab10:	99 2e       	mov	r9, r25
    ab12:	64 c0       	rjmp	.+200    	; 0xabdc <menu_FIP+0x18c>
	     }String[Size]=0;
	 }
}

void leadingZero(char Val,char *StrResult){
     sprintf_P(StrResult,PSTR("%.2d"),Val);
    ab14:	00 d0       	rcall	.+0      	; 0xab16 <menu_FIP+0xc6>
    ab16:	00 d0       	rcall	.+0      	; 0xab18 <menu_FIP+0xc8>
    ab18:	00 d0       	rcall	.+0      	; 0xab1a <menu_FIP+0xca>
    ab1a:	2d b7       	in	r18, 0x3d	; 61
    ab1c:	3e b7       	in	r19, 0x3e	; 62
    ab1e:	2f 5f       	subi	r18, 0xFF	; 255
    ab20:	3f 4f       	sbci	r19, 0xFF	; 255
    ab22:	ed b7       	in	r30, 0x3d	; 61
    ab24:	fe b7       	in	r31, 0x3e	; 62
    ab26:	b2 82       	std	Z+2, r11	; 0x02
    ab28:	a1 82       	std	Z+1, r10	; 0x01
    ab2a:	f9 01       	movw	r30, r18
    ab2c:	d3 82       	std	Z+3, r13	; 0x03
    ab2e:	c2 82       	std	Z+2, r12	; 0x02
    ab30:	a4 0d       	add	r26, r4
    ab32:	b5 1d       	adc	r27, r5
    ab34:	8c 91       	ld	r24, X
    ab36:	84 83       	std	Z+4, r24	; 0x04
    ab38:	15 82       	std	Z+5, r1	; 0x05
    ab3a:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
    ab3e:	ad b7       	in	r26, 0x3d	; 61
    ab40:	be b7       	in	r27, 0x3e	; 62
    ab42:	11 96       	adiw	r26, 0x01	; 1
    ab44:	ed b7       	in	r30, 0x3d	; 61
    ab46:	fe b7       	in	r31, 0x3e	; 62
    ab48:	f2 82       	std	Z+2, r15	; 0x02
    ab4a:	e1 82       	std	Z+1, r14	; 0x01
    ab4c:	13 96       	adiw	r26, 0x03	; 3
    ab4e:	dc 92       	st	X, r13
    ab50:	ce 92       	st	-X, r12
    ab52:	12 97       	sbiw	r26, 0x02	; 2
    ab54:	e0 91 69 02 	lds	r30, 0x0269
    ab58:	f0 91 6a 02 	lds	r31, 0x026A
    ab5c:	e6 0d       	add	r30, r6
    ab5e:	f7 1d       	adc	r31, r7
    ab60:	80 81       	ld	r24, Z
    ab62:	14 96       	adiw	r26, 0x04	; 4
    ab64:	8c 93       	st	X, r24
    ab66:	14 97       	sbiw	r26, 0x04	; 4
    ab68:	15 96       	adiw	r26, 0x05	; 5
    ab6a:	1c 92       	st	X, r1
    ab6c:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
		    for (iLoop=0;iLoop<8;iLoop++){
			     if (FIP[iLoop]>99) FIP[iLoop]=0;
		    }
		    for(iLoop=0;iLoop<4;iLoop++){
		        leadingZero(FIP[iLoop],strPumpL);leadingZero(FIP[iLoop+4],strPumpR);
                sprintf_P(lcdteks,PSTR("%d.P%s | %d.P%s"),(iLoop+1),strPumpL,(iLoop+5),strPumpR);
    ab70:	80 91 69 02 	lds	r24, 0x0269
    ab74:	90 91 6a 02 	lds	r25, 0x026A
    ab78:	00 d0       	rcall	.+0      	; 0xab7a <menu_FIP+0x12a>
    ab7a:	00 d0       	rcall	.+0      	; 0xab7c <menu_FIP+0x12c>
    ab7c:	00 d0       	rcall	.+0      	; 0xab7e <menu_FIP+0x12e>
    ab7e:	ed b7       	in	r30, 0x3d	; 61
    ab80:	fe b7       	in	r31, 0x3e	; 62
    ab82:	31 96       	adiw	r30, 0x01	; 1
    ab84:	ad b7       	in	r26, 0x3d	; 61
    ab86:	be b7       	in	r27, 0x3e	; 62
    ab88:	12 96       	adiw	r26, 0x02	; 2
    ab8a:	1c 93       	st	X, r17
    ab8c:	0e 93       	st	-X, r16
    ab8e:	11 97       	sbiw	r26, 0x01	; 1
    ab90:	93 82       	std	Z+3, r9	; 0x03
    ab92:	82 82       	std	Z+2, r8	; 0x02
    ab94:	01 96       	adiw	r24, 0x01	; 1
    ab96:	95 83       	std	Z+5, r25	; 0x05
    ab98:	84 83       	std	Z+4, r24	; 0x04
    ab9a:	b7 82       	std	Z+7, r11	; 0x07
    ab9c:	a6 82       	std	Z+6, r10	; 0x06
    ab9e:	04 96       	adiw	r24, 0x04	; 4
    aba0:	91 87       	std	Z+9, r25	; 0x09
    aba2:	80 87       	std	Z+8, r24	; 0x08
    aba4:	f3 86       	std	Z+11, r15	; 0x0b
    aba6:	e2 86       	std	Z+10, r14	; 0x0a
    aba8:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
			    lcd_print((iLoop+1),1,lcdteks);
    abac:	ed b7       	in	r30, 0x3d	; 61
    abae:	fe b7       	in	r31, 0x3e	; 62
    abb0:	3c 96       	adiw	r30, 0x0c	; 12
    abb2:	0f b6       	in	r0, 0x3f	; 63
    abb4:	f8 94       	cli
    abb6:	fe bf       	out	0x3e, r31	; 62
    abb8:	0f be       	out	0x3f, r0	; 63
    abba:	ed bf       	out	0x3d, r30	; 61
    abbc:	80 91 69 02 	lds	r24, 0x0269
    abc0:	8f 5f       	subi	r24, 0xFF	; 255
    abc2:	61 e0       	ldi	r22, 0x01	; 1
    abc4:	a8 01       	movw	r20, r16
    abc6:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
	 	    eeprom_read_block((void*) &FIP, (const void*) &DefPumpMap, 8);
		    lcd_clear(); 
		    for (iLoop=0;iLoop<8;iLoop++){
			     if (FIP[iLoop]>99) FIP[iLoop]=0;
		    }
		    for(iLoop=0;iLoop<4;iLoop++){
    abca:	80 91 69 02 	lds	r24, 0x0269
    abce:	90 91 6a 02 	lds	r25, 0x026A
    abd2:	01 96       	adiw	r24, 0x01	; 1
    abd4:	90 93 6a 02 	sts	0x026A, r25
    abd8:	80 93 69 02 	sts	0x0269, r24
    abdc:	a0 91 69 02 	lds	r26, 0x0269
    abe0:	b0 91 6a 02 	lds	r27, 0x026A
    abe4:	a4 30       	cpi	r26, 0x04	; 4
    abe6:	b1 05       	cpc	r27, r1
    abe8:	08 f4       	brcc	.+2      	; 0xabec <menu_FIP+0x19c>
    abea:	94 cf       	rjmp	.-216    	; 0xab14 <menu_FIP+0xc4>
		        leadingZero(FIP[iLoop],strPumpL);leadingZero(FIP[iLoop+4],strPumpR);
                sprintf_P(lcdteks,PSTR("%d.P%s | %d.P%s"),(iLoop+1),strPumpL,(iLoop+5),strPumpR);
			    lcd_print((iLoop+1),1,lcdteks);
			}
		    lcd_printf(1,15,PSTR("FIP:_"));    //"1.P01 | 5.P05 FIP:_ "                                                                      
    abec:	81 e0       	ldi	r24, 0x01	; 1
    abee:	6f e0       	ldi	r22, 0x0F	; 15
    abf0:	41 ef       	ldi	r20, 0xF1	; 241
    abf2:	5d e1       	ldi	r21, 0x1D	; 29
    abf4:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		    lcd_printf(2,15,PSTR("     "));    //"2.P02 | 6.P05       "
    abf8:	82 e0       	ldi	r24, 0x02	; 2
    abfa:	6f e0       	ldi	r22, 0x0F	; 15
    abfc:	4b ee       	ldi	r20, 0xEB	; 235
    abfe:	5d e1       	ldi	r21, 0x1D	; 29
    ac00:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		    lcd_printf(3,15,PSTR("#)OK "));    //"3.P03 | 7.P07 #)OK  "
    ac04:	83 e0       	ldi	r24, 0x03	; 3
    ac06:	6f e0       	ldi	r22, 0x0F	; 15
    ac08:	45 ee       	ldi	r20, 0xE5	; 229
    ac0a:	5d e1       	ldi	r21, 0x1D	; 29
    ac0c:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
	        lcd_printf(4,15,PSTR("*)Exit"));   //"4.P04 | 8.P08 *)Exit"				
    ac10:	84 e0       	ldi	r24, 0x04	; 4
    ac12:	6f e0       	ldi	r22, 0x0F	; 15
    ac14:	4e ed       	ldi	r20, 0xDE	; 222
    ac16:	5d e1       	ldi	r21, 0x1D	; 29
    ac18:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		    iLoop=0;
    ac1c:	10 92 6a 02 	sts	0x026A, r1
    ac20:	10 92 69 02 	sts	0x0269, r1
		    stEnterFIP=efFIPInput;
    ac24:	81 e0       	ldi	r24, 0x01	; 1
    ac26:	7d c0       	rjmp	.+250    	; 0xad22 <menu_FIP+0x2d2>
	        break;
	   case efFIPInput:
		    iLoop++;
    ac28:	80 91 69 02 	lds	r24, 0x0269
    ac2c:	90 91 6a 02 	lds	r25, 0x026A
    ac30:	01 96       	adiw	r24, 0x01	; 1
    ac32:	90 93 6a 02 	sts	0x026A, r25
    ac36:	80 93 69 02 	sts	0x0269, r24
		    KeyPressed=_key_scan(1);
    ac3a:	81 e0       	ldi	r24, 0x01	; 1
    ac3c:	0e 94 58 a6 	call	0x14cb0	; 0x14cb0 <_key_scan>
    ac40:	08 2f       	mov	r16, r24
		    KeyChar=_key_btn(KeyPressed);
    ac42:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <_key_btn>
    ac46:	98 2f       	mov	r25, r24
		    if ((KeyChar>='1')&&(KeyChar<='8')){
    ac48:	18 2f       	mov	r17, r24
    ac4a:	11 53       	subi	r17, 0x31	; 49
    ac4c:	18 30       	cpi	r17, 0x08	; 8
    ac4e:	60 f4       	brcc	.+24     	; 0xac68 <menu_FIP+0x218>
		 	     if (KeyCharLast!=KeyChar){
    ac50:	80 91 5a 01 	lds	r24, 0x015A
    ac54:	89 17       	cp	r24, r25
    ac56:	41 f0       	breq	.+16     	; 0xac68 <menu_FIP+0x218>
				     KeyCharLast=KeyChar;
    ac58:	90 93 5a 01 	sts	0x015A, r25
				     iLoop=1000;
    ac5c:	88 ee       	ldi	r24, 0xE8	; 232
    ac5e:	93 e0       	ldi	r25, 0x03	; 3
    ac60:	90 93 6a 02 	sts	0x026A, r25
    ac64:	80 93 69 02 	sts	0x0269, r24
                 }
		    }
 		    if ((iLoop%2000)==0){
    ac68:	80 91 69 02 	lds	r24, 0x0269
    ac6c:	90 91 6a 02 	lds	r25, 0x026A
    ac70:	60 ed       	ldi	r22, 0xD0	; 208
    ac72:	77 e0       	ldi	r23, 0x07	; 7
    ac74:	0e 94 65 aa 	call	0x154ca	; 0x154ca <__udivmodhi4>
    ac78:	89 2b       	or	r24, r25
    ac7a:	39 f4       	brne	.+14     	; 0xac8a <menu_FIP+0x23a>
		        lcd_xy(1,19);_lcd('_'); 
    ac7c:	81 e0       	ldi	r24, 0x01	; 1
    ac7e:	63 e1       	ldi	r22, 0x13	; 19
    ac80:	0e 94 9e a4 	call	0x1493c	; 0x1493c <lcd_xy>
    ac84:	8f e5       	ldi	r24, 0x5F	; 95
    ac86:	0e 94 78 a4 	call	0x148f0	; 0x148f0 <_lcd>
			   }
           if ((iLoop%2000)==1000){
    ac8a:	80 91 69 02 	lds	r24, 0x0269
    ac8e:	90 91 6a 02 	lds	r25, 0x026A
    ac92:	60 ed       	ldi	r22, 0xD0	; 208
    ac94:	77 e0       	ldi	r23, 0x07	; 7
    ac96:	0e 94 65 aa 	call	0x154ca	; 0x154ca <__udivmodhi4>
    ac9a:	88 5e       	subi	r24, 0xE8	; 232
    ac9c:	93 40       	sbci	r25, 0x03	; 3
    ac9e:	41 f4       	brne	.+16     	; 0xacb0 <menu_FIP+0x260>
			    lcd_xy(1,19);_lcd(KeyCharLast); 
    aca0:	81 e0       	ldi	r24, 0x01	; 1
    aca2:	63 e1       	ldi	r22, 0x13	; 19
    aca4:	0e 94 9e a4 	call	0x1493c	; 0x1493c <lcd_xy>
    aca8:	80 91 5a 01 	lds	r24, 0x015A
    acac:	0e 94 78 a4 	call	0x148f0	; 0x148f0 <_lcd>
			   }

		   if (((KeyChar>='1')&&(KeyChar<='8'))||(KeyPressed==_KEY_ENTER)&&(KeyCharLast!=' ')){ 
    acb0:	18 30       	cpi	r17, 0x08	; 8
    acb2:	30 f0       	brcs	.+12     	; 0xacc0 <menu_FIP+0x270>
    acb4:	07 3b       	cpi	r16, 0xB7	; 183
    acb6:	91 f5       	brne	.+100    	; 0xad1c <menu_FIP+0x2cc>
    acb8:	80 91 5a 01 	lds	r24, 0x015A
    acbc:	80 32       	cpi	r24, 0x20	; 32
    acbe:	b1 f1       	breq	.+108    	; 0xad2c <menu_FIP+0x2dc>
		         FIP_Used=FIP[KeyCharLast-'1'];
    acc0:	80 91 5a 01 	lds	r24, 0x015A
    acc4:	fe 01       	movw	r30, r28
    acc6:	ba 97       	sbiw	r30, 0x2a	; 42
    acc8:	e8 0f       	add	r30, r24
    acca:	f1 1d       	adc	r31, r1
    accc:	20 81       	ld	r18, Z
    acce:	20 93 6b 02 	sts	0x026B, r18
				 if (FIP_Used<=99){
    acd2:	24 36       	cpi	r18, 0x64	; 100
    acd4:	f0 f4       	brcc	.+60     	; 0xad12 <menu_FIP+0x2c2>
                     //leadingZero(FIP_Used,sFIPUsed);
					 //xFIP[0]=FIP_Used;
					 *xFIP=FIP_Used;
    acd6:	d7 01       	movw	r26, r14
    acd8:	2c 93       	st	X, r18
					 sprintf_P(sFIPUsed,PSTR("%.2d"),FIP_Used);
    acda:	00 d0       	rcall	.+0      	; 0xacdc <menu_FIP+0x28c>
    acdc:	00 d0       	rcall	.+0      	; 0xacde <menu_FIP+0x28e>
    acde:	00 d0       	rcall	.+0      	; 0xace0 <menu_FIP+0x290>
    ace0:	ed b7       	in	r30, 0x3d	; 61
    ace2:	fe b7       	in	r31, 0x3e	; 62
    ace4:	31 96       	adiw	r30, 0x01	; 1
    ace6:	ad b7       	in	r26, 0x3d	; 61
    ace8:	be b7       	in	r27, 0x3e	; 62
    acea:	12 96       	adiw	r26, 0x02	; 2
    acec:	dc 92       	st	X, r13
    acee:	ce 92       	st	-X, r12
    acf0:	11 97       	sbiw	r26, 0x01	; 1
    acf2:	89 ed       	ldi	r24, 0xD9	; 217
    acf4:	9d e1       	ldi	r25, 0x1D	; 29
    acf6:	93 83       	std	Z+3, r25	; 0x03
    acf8:	82 83       	std	Z+2, r24	; 0x02
    acfa:	24 83       	std	Z+4, r18	; 0x04
    acfc:	15 82       	std	Z+5, r1	; 0x05
    acfe:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
    ad02:	ed b7       	in	r30, 0x3d	; 61
    ad04:	fe b7       	in	r31, 0x3e	; 62
    ad06:	36 96       	adiw	r30, 0x06	; 6
    ad08:	0f b6       	in	r0, 0x3f	; 63
    ad0a:	f8 94       	cli
    ad0c:	fe bf       	out	0x3e, r31	; 62
    ad0e:	0f be       	out	0x3f, r0	; 63
    ad10:	ed bf       	out	0x3d, r30	; 61

					 }
				 Result=FIP_DONE;
                 stEnterFIP=efExitFIPInput;
    ad12:	82 e0       	ldi	r24, 0x02	; 2
    ad14:	80 93 6c 02 	sts	0x026C, r24
    ad18:	80 e0       	ldi	r24, 0x00	; 0
    ad1a:	09 c0       	rjmp	.+18     	; 0xad2e <menu_FIP+0x2de>
		   }
		   else
		   if (KeyPressed==_KEY_CANCEL){
    ad1c:	07 3e       	cpi	r16, 0xE7	; 231
    ad1e:	31 f4       	brne	.+12     	; 0xad2c <menu_FIP+0x2dc>
               Result=FIP_CANCEL;
			   stEnterFIP=efExitFIPInput;
    ad20:	82 e0       	ldi	r24, 0x02	; 2
    ad22:	80 93 6c 02 	sts	0x026C, r24
    ad26:	03 c0       	rjmp	.+6      	; 0xad2e <menu_FIP+0x2de>
		   }
	       break;
      case efExitFIPInput:
           stEnterFIP=efInit;
    ad28:	10 92 6c 02 	sts	0x026C, r1
    ad2c:	81 e0       	ldi	r24, 0x01	; 1
	       break;
	 }
return Result;
}
    ad2e:	a2 96       	adiw	r28, 0x22	; 34
    ad30:	0f b6       	in	r0, 0x3f	; 63
    ad32:	f8 94       	cli
    ad34:	de bf       	out	0x3e, r29	; 62
    ad36:	0f be       	out	0x3f, r0	; 63
    ad38:	cd bf       	out	0x3d, r28	; 61
    ad3a:	cf 91       	pop	r28
    ad3c:	df 91       	pop	r29
    ad3e:	1f 91       	pop	r17
    ad40:	0f 91       	pop	r16
    ad42:	ff 90       	pop	r15
    ad44:	ef 90       	pop	r14
    ad46:	df 90       	pop	r13
    ad48:	cf 90       	pop	r12
    ad4a:	bf 90       	pop	r11
    ad4c:	af 90       	pop	r10
    ad4e:	9f 90       	pop	r9
    ad50:	8f 90       	pop	r8
    ad52:	7f 90       	pop	r7
    ad54:	6f 90       	pop	r6
    ad56:	5f 90       	pop	r5
    ad58:	4f 90       	pop	r4
    ad5a:	08 95       	ret

0000ad5c <FMenuSettingServerIP>:
		       break;     
		  }//EndSwitch	 
    return Result;
}

char FMenuSettingServerIP(){
    ad5c:	ff 92       	push	r15
    ad5e:	0f 93       	push	r16
    ad60:	1f 93       	push	r17
    ad62:	df 93       	push	r29
    ad64:	cf 93       	push	r28
    ad66:	cd b7       	in	r28, 0x3d	; 61
    ad68:	de b7       	in	r29, 0x3e	; 62
    ad6a:	64 97       	sbiw	r28, 0x14	; 20
    ad6c:	0f b6       	in	r0, 0x3f	; 63
    ad6e:	f8 94       	cli
    ad70:	de bf       	out	0x3e, r29	; 62
    ad72:	0f be       	out	0x3f, r0	; 63
    ad74:	cd bf       	out	0x3d, r28	; 61
     //Server IP
     //Old: 192.168.123.000
	 //New:   _.   .   .
	 //--------------------
	 //*)cancel    #)next
	 Result=MENU_NONE;
    ad76:	10 92 2e 02 	sts	0x022E, r1
     switch(stClientIP){
    ad7a:	80 91 58 01 	lds	r24, 0x0158
    ad7e:	82 30       	cpi	r24, 0x02	; 2
    ad80:	09 f4       	brne	.+2      	; 0xad84 <FMenuSettingServerIP+0x28>
    ad82:	79 c0       	rjmp	.+242    	; 0xae76 <FMenuSettingServerIP+0x11a>
    ad84:	83 30       	cpi	r24, 0x03	; 3
    ad86:	20 f4       	brcc	.+8      	; 0xad90 <FMenuSettingServerIP+0x34>
    ad88:	81 30       	cpi	r24, 0x01	; 1
    ad8a:	09 f0       	breq	.+2      	; 0xad8e <FMenuSettingServerIP+0x32>
    ad8c:	5e c2       	rjmp	.+1212   	; 0xb24a <FMenuSettingServerIP+0x4ee>
    ad8e:	07 c0       	rjmp	.+14     	; 0xad9e <FMenuSettingServerIP+0x42>
    ad90:	83 30       	cpi	r24, 0x03	; 3
    ad92:	09 f4       	brne	.+2      	; 0xad96 <FMenuSettingServerIP+0x3a>
    ad94:	55 c2       	rjmp	.+1194   	; 0xb240 <FMenuSettingServerIP+0x4e4>
    ad96:	84 30       	cpi	r24, 0x04	; 4
    ad98:	09 f0       	breq	.+2      	; 0xad9c <FMenuSettingServerIP+0x40>
    ad9a:	57 c2       	rjmp	.+1198   	; 0xb24a <FMenuSettingServerIP+0x4ee>
    ad9c:	45 c2       	rjmp	.+1162   	; 0xb228 <FMenuSettingServerIP+0x4cc>
		  case cipInit:
			   lcd_clear();
    ad9e:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
	           lcd_printf(1,1,PSTR("Server IP"));
    ada2:	81 e0       	ldi	r24, 0x01	; 1
    ada4:	61 e0       	ldi	r22, 0x01	; 1
    ada6:	41 ea       	ldi	r20, 0xA1	; 161
    ada8:	54 e1       	ldi	r21, 0x14	; 20
    adaa:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
			   eeprom_read_block((void*)&IP_blok,(const void*)&DefServerIP,4);
    adae:	87 e2       	ldi	r24, 0x27	; 39
    adb0:	92 e0       	ldi	r25, 0x02	; 2
    adb2:	6c e2       	ldi	r22, 0x2C	; 44
    adb4:	70 e0       	ldi	r23, 0x00	; 0
    adb6:	44 e0       	ldi	r20, 0x04	; 4
    adb8:	50 e0       	ldi	r21, 0x00	; 0
    adba:	0e 94 1b ad 	call	0x15a36	; 0x15a36 <__eerd_block_m128>
	           sprintf_P(lcdteks,PSTR("Old: %d.%d.%d.%d"),IP_blok[0],IP_blok[1],IP_blok[2],IP_blok[3]);
    adbe:	8d b7       	in	r24, 0x3d	; 61
    adc0:	9e b7       	in	r25, 0x3e	; 62
    adc2:	0c 97       	sbiw	r24, 0x0c	; 12
    adc4:	0f b6       	in	r0, 0x3f	; 63
    adc6:	f8 94       	cli
    adc8:	9e bf       	out	0x3e, r25	; 62
    adca:	0f be       	out	0x3f, r0	; 63
    adcc:	8d bf       	out	0x3d, r24	; 61
    adce:	ed b7       	in	r30, 0x3d	; 61
    add0:	fe b7       	in	r31, 0x3e	; 62
    add2:	31 96       	adiw	r30, 0x01	; 1
    add4:	8e 01       	movw	r16, r28
    add6:	0f 5f       	subi	r16, 0xFF	; 255
    add8:	1f 4f       	sbci	r17, 0xFF	; 255
    adda:	ad b7       	in	r26, 0x3d	; 61
    addc:	be b7       	in	r27, 0x3e	; 62
    adde:	12 96       	adiw	r26, 0x02	; 2
    ade0:	1c 93       	st	X, r17
    ade2:	0e 93       	st	-X, r16
    ade4:	11 97       	sbiw	r26, 0x01	; 1
    ade6:	80 e9       	ldi	r24, 0x90	; 144
    ade8:	94 e1       	ldi	r25, 0x14	; 20
    adea:	93 83       	std	Z+3, r25	; 0x03
    adec:	82 83       	std	Z+2, r24	; 0x02
    adee:	80 91 27 02 	lds	r24, 0x0227
    adf2:	84 83       	std	Z+4, r24	; 0x04
    adf4:	15 82       	std	Z+5, r1	; 0x05
    adf6:	80 91 28 02 	lds	r24, 0x0228
    adfa:	86 83       	std	Z+6, r24	; 0x06
    adfc:	17 82       	std	Z+7, r1	; 0x07
    adfe:	80 91 29 02 	lds	r24, 0x0229
    ae02:	80 87       	std	Z+8, r24	; 0x08
    ae04:	11 86       	std	Z+9, r1	; 0x09
    ae06:	80 91 2a 02 	lds	r24, 0x022A
    ae0a:	82 87       	std	Z+10, r24	; 0x0a
    ae0c:	13 86       	std	Z+11, r1	; 0x0b
    ae0e:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	           lcd_print(2,1,lcdteks);
    ae12:	ed b7       	in	r30, 0x3d	; 61
    ae14:	fe b7       	in	r31, 0x3e	; 62
    ae16:	3c 96       	adiw	r30, 0x0c	; 12
    ae18:	0f b6       	in	r0, 0x3f	; 63
    ae1a:	f8 94       	cli
    ae1c:	fe bf       	out	0x3e, r31	; 62
    ae1e:	0f be       	out	0x3f, r0	; 63
    ae20:	ed bf       	out	0x3d, r30	; 61
    ae22:	82 e0       	ldi	r24, 0x02	; 2
    ae24:	61 e0       	ldi	r22, 0x01	; 1
    ae26:	a8 01       	movw	r20, r16
    ae28:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
			   lcd_printf(3,1,PSTR("New:   _.   .   .   "));
    ae2c:	83 e0       	ldi	r24, 0x03	; 3
    ae2e:	61 e0       	ldi	r22, 0x01	; 1
    ae30:	4b e7       	ldi	r20, 0x7B	; 123
    ae32:	54 e1       	ldi	r21, 0x14	; 20
    ae34:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
			   lcd_printf(4,1,PSTR("[*]cancel  [#]next  "));
    ae38:	84 e0       	ldi	r24, 0x04	; 4
    ae3a:	61 e0       	ldi	r22, 0x01	; 1
    ae3c:	46 e6       	ldi	r20, 0x66	; 102
    ae3e:	54 e1       	ldi	r21, 0x14	; 20
    ae40:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
               iLoop=0;
    ae44:	10 92 26 02 	sts	0x0226, r1
    ae48:	10 92 25 02 	sts	0x0225, r1
			   y=3,x=8;
    ae4c:	83 e0       	ldi	r24, 0x03	; 3
    ae4e:	80 93 2c 02 	sts	0x022C, r24
    ae52:	88 e0       	ldi	r24, 0x08	; 8
    ae54:	80 93 2d 02 	sts	0x022D, r24
			   iInput=0; iBlok=0;
    ae58:	10 92 2b 02 	sts	0x022B, r1
    ae5c:	10 92 24 02 	sts	0x0224, r1
    ae60:	10 92 23 02 	sts	0x0223, r1
			   IPchar[0]='0';IPchar[1]='0';IPchar[2]='0';
    ae64:	80 e3       	ldi	r24, 0x30	; 48
    ae66:	80 93 30 02 	sts	0x0230, r24
    ae6a:	80 93 31 02 	sts	0x0231, r24
    ae6e:	80 93 32 02 	sts	0x0232, r24
			   stClientIP=cipInputIP; 
    ae72:	82 e0       	ldi	r24, 0x02	; 2
    ae74:	e2 c1       	rjmp	.+964    	; 0xb23a <FMenuSettingServerIP+0x4de>
		       break;
          case cipInputIP:
			   //Blinking 60% _ 
			   iLoop++;
    ae76:	80 91 25 02 	lds	r24, 0x0225
    ae7a:	90 91 26 02 	lds	r25, 0x0226
    ae7e:	01 96       	adiw	r24, 0x01	; 1
    ae80:	90 93 26 02 	sts	0x0226, r25
    ae84:	80 93 25 02 	sts	0x0225, r24
			   if ((iLoop%2000)==0){
    ae88:	60 ed       	ldi	r22, 0xD0	; 208
    ae8a:	77 e0       	ldi	r23, 0x07	; 7
    ae8c:	0e 94 65 aa 	call	0x154ca	; 0x154ca <__udivmodhi4>
    ae90:	89 2b       	or	r24, r25
    ae92:	81 f4       	brne	.+32     	; 0xaeb4 <FMenuSettingServerIP+0x158>
			      lcd_put(y,(x+(iBlok*4)),'_'); 
    ae94:	80 91 23 02 	lds	r24, 0x0223
    ae98:	90 91 24 02 	lds	r25, 0x0224
    ae9c:	88 0f       	add	r24, r24
    ae9e:	99 1f       	adc	r25, r25
    aea0:	88 0f       	add	r24, r24
    aea2:	99 1f       	adc	r25, r25
    aea4:	60 91 2d 02 	lds	r22, 0x022D
    aea8:	68 0f       	add	r22, r24
    aeaa:	80 91 2c 02 	lds	r24, 0x022C
    aeae:	4f e5       	ldi	r20, 0x5F	; 95
    aeb0:	0e 94 2c a5 	call	0x14a58	; 0x14a58 <lcd_put>
			   }
			   if ((iLoop%2000)==1000){
    aeb4:	80 91 25 02 	lds	r24, 0x0225
    aeb8:	90 91 26 02 	lds	r25, 0x0226
    aebc:	60 ed       	ldi	r22, 0xD0	; 208
    aebe:	77 e0       	ldi	r23, 0x07	; 7
    aec0:	0e 94 65 aa 	call	0x154ca	; 0x154ca <__udivmodhi4>
    aec4:	88 5e       	subi	r24, 0xE8	; 232
    aec6:	93 40       	sbci	r25, 0x03	; 3
    aec8:	81 f4       	brne	.+32     	; 0xaeea <FMenuSettingServerIP+0x18e>
			      lcd_put(y,(x+(iBlok*4)),' '); 
    aeca:	80 91 23 02 	lds	r24, 0x0223
    aece:	90 91 24 02 	lds	r25, 0x0224
    aed2:	88 0f       	add	r24, r24
    aed4:	99 1f       	adc	r25, r25
    aed6:	88 0f       	add	r24, r24
    aed8:	99 1f       	adc	r25, r25
    aeda:	60 91 2d 02 	lds	r22, 0x022D
    aede:	68 0f       	add	r22, r24
    aee0:	80 91 2c 02 	lds	r24, 0x022C
    aee4:	40 e2       	ldi	r20, 0x20	; 32
    aee6:	0e 94 2c a5 	call	0x14a58	; 0x14a58 <lcd_put>
			   }
			   //GetKeyPressed
			   keyPressed=_key_scan(1);
    aeea:	81 e0       	ldi	r24, 0x01	; 1
    aeec:	0e 94 58 a6 	call	0x14cb0	; 0x14cb0 <_key_scan>
    aef0:	f8 2e       	mov	r15, r24
			   keyChar=_key_btn(keyPressed);
    aef2:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <_key_btn>
    aef6:	28 2f       	mov	r18, r24
               if ((keyChar>='0')&&(keyChar<='9')){
    aef8:	80 53       	subi	r24, 0x30	; 48
    aefa:	8a 30       	cpi	r24, 0x0A	; 10
    aefc:	08 f0       	brcs	.+2      	; 0xaf00 <FMenuSettingServerIP+0x1a4>
    aefe:	d6 c0       	rjmp	.+428    	; 0xb0ac <FMenuSettingServerIP+0x350>
    af00:	80 e5       	ldi	r24, 0x50	; 80
    af02:	93 ec       	ldi	r25, 0xC3	; 195
    af04:	01 97       	sbiw	r24, 0x01	; 1
    af06:	f1 f7       	brne	.-4      	; 0xaf04 <FMenuSettingServerIP+0x1a8>
			       _delay_ms(200);
			       IPchar[iInput]=keyChar;
    af08:	80 91 2b 02 	lds	r24, 0x022B
    af0c:	e8 2f       	mov	r30, r24
    af0e:	f0 e0       	ldi	r31, 0x00	; 0
    af10:	e0 5d       	subi	r30, 0xD0	; 208
    af12:	fd 4f       	sbci	r31, 0xFD	; 253
    af14:	20 83       	st	Z, r18
				   iInput++;                    
    af16:	8f 5f       	subi	r24, 0xFF	; 255
    af18:	80 93 2b 02 	sts	0x022B, r24
				   for (i=1;i<(iInput+1);i++){
    af1c:	81 e0       	ldi	r24, 0x01	; 1
    af1e:	1c c0       	rjmp	.+56     	; 0xaf58 <FMenuSettingServerIP+0x1fc>
				       lcd_xy(y,((x+(iBlok*4))-(3-i)));_lcd(IPchar[i-1]);
    af20:	80 91 2d 02 	lds	r24, 0x022D
    af24:	68 0f       	add	r22, r24
    af26:	63 50       	subi	r22, 0x03	; 3
    af28:	80 91 23 02 	lds	r24, 0x0223
    af2c:	90 91 24 02 	lds	r25, 0x0224
    af30:	88 0f       	add	r24, r24
    af32:	99 1f       	adc	r25, r25
    af34:	88 0f       	add	r24, r24
    af36:	99 1f       	adc	r25, r25
    af38:	68 0f       	add	r22, r24
    af3a:	80 91 2c 02 	lds	r24, 0x022C
    af3e:	0e 94 9e a4 	call	0x1493c	; 0x1493c <lcd_xy>
    af42:	e0 91 2f 02 	lds	r30, 0x022F
    af46:	f0 e0       	ldi	r31, 0x00	; 0
    af48:	e1 5d       	subi	r30, 0xD1	; 209
    af4a:	fd 4f       	sbci	r31, 0xFD	; 253
    af4c:	80 81       	ld	r24, Z
    af4e:	0e 94 78 a4 	call	0x148f0	; 0x148f0 <_lcd>
			   keyChar=_key_btn(keyPressed);
               if ((keyChar>='0')&&(keyChar<='9')){
			       _delay_ms(200);
			       IPchar[iInput]=keyChar;
				   iInput++;                    
				   for (i=1;i<(iInput+1);i++){
    af52:	80 91 2f 02 	lds	r24, 0x022F
    af56:	8f 5f       	subi	r24, 0xFF	; 255
    af58:	80 93 2f 02 	sts	0x022F, r24
    af5c:	70 91 2b 02 	lds	r23, 0x022B
    af60:	60 91 2f 02 	lds	r22, 0x022F
    af64:	27 2f       	mov	r18, r23
    af66:	30 e0       	ldi	r19, 0x00	; 0
    af68:	86 2f       	mov	r24, r22
    af6a:	90 e0       	ldi	r25, 0x00	; 0
    af6c:	28 17       	cp	r18, r24
    af6e:	39 07       	cpc	r19, r25
    af70:	bc f6       	brge	.-82     	; 0xaf20 <FMenuSettingServerIP+0x1c4>
				       lcd_xy(y,((x+(iBlok*4))-(3-i)));_lcd(IPchar[i-1]);
				   }
                   //NextInput
				   if (iInput>=3){
    af72:	73 30       	cpi	r23, 0x03	; 3
    af74:	08 f4       	brcc	.+2      	; 0xaf78 <FMenuSettingServerIP+0x21c>
    af76:	91 c0       	rjmp	.+290    	; 0xb09a <FMenuSettingServerIP+0x33e>
				       IP_blok[iBlok]=((IPchar[0]-'0')*100)+((IPchar[1]-'0')*10)+((IPchar[2]-'0'));
    af78:	40 91 23 02 	lds	r20, 0x0223
    af7c:	50 91 24 02 	lds	r21, 0x0224
    af80:	fa 01       	movw	r30, r20
    af82:	e9 5d       	subi	r30, 0xD9	; 217
    af84:	fd 4f       	sbci	r31, 0xFD	; 253
    af86:	20 91 32 02 	lds	r18, 0x0232
    af8a:	20 5d       	subi	r18, 0xD0	; 208
    af8c:	80 91 30 02 	lds	r24, 0x0230
    af90:	34 e6       	ldi	r19, 0x64	; 100
    af92:	83 9f       	mul	r24, r19
    af94:	c0 01       	movw	r24, r0
    af96:	11 24       	eor	r1, r1
    af98:	28 0f       	add	r18, r24
    af9a:	80 91 31 02 	lds	r24, 0x0231
    af9e:	3a e0       	ldi	r19, 0x0A	; 10
    afa0:	83 9f       	mul	r24, r19
    afa2:	c0 01       	movw	r24, r0
    afa4:	11 24       	eor	r1, r1
    afa6:	28 0f       	add	r18, r24
    afa8:	20 83       	st	Z, r18
					   IPchar[0]='0';IPchar[1]='0';IPchar[2]='0';
    afaa:	80 e3       	ldi	r24, 0x30	; 48
    afac:	80 93 30 02 	sts	0x0230, r24
    afb0:	80 93 31 02 	sts	0x0231, r24
    afb4:	80 93 32 02 	sts	0x0232, r24
					   //Reposition Value
					   lcd_printf(y,((x+(iBlok*4))-iInput),PSTR("   "));
    afb8:	44 0f       	add	r20, r20
    afba:	55 1f       	adc	r21, r21
    afbc:	44 0f       	add	r20, r20
    afbe:	55 1f       	adc	r21, r21
    afc0:	60 91 2d 02 	lds	r22, 0x022D
    afc4:	64 0f       	add	r22, r20
    afc6:	67 1b       	sub	r22, r23
    afc8:	80 91 2c 02 	lds	r24, 0x022C
    afcc:	42 e6       	ldi	r20, 0x62	; 98
    afce:	54 e1       	ldi	r21, 0x14	; 20
    afd0:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
					   sprintf_P(lcdteks,PSTR("%d"),IP_blok[iBlok]);
    afd4:	00 d0       	rcall	.+0      	; 0xafd6 <FMenuSettingServerIP+0x27a>
    afd6:	00 d0       	rcall	.+0      	; 0xafd8 <FMenuSettingServerIP+0x27c>
    afd8:	00 d0       	rcall	.+0      	; 0xafda <FMenuSettingServerIP+0x27e>
    afda:	ad b7       	in	r26, 0x3d	; 61
    afdc:	be b7       	in	r27, 0x3e	; 62
    afde:	11 96       	adiw	r26, 0x01	; 1
    afe0:	8e 01       	movw	r16, r28
    afe2:	0f 5f       	subi	r16, 0xFF	; 255
    afe4:	1f 4f       	sbci	r17, 0xFF	; 255
    afe6:	ed b7       	in	r30, 0x3d	; 61
    afe8:	fe b7       	in	r31, 0x3e	; 62
    afea:	12 83       	std	Z+2, r17	; 0x02
    afec:	01 83       	std	Z+1, r16	; 0x01
    afee:	8f e5       	ldi	r24, 0x5F	; 95
    aff0:	94 e1       	ldi	r25, 0x14	; 20
    aff2:	13 96       	adiw	r26, 0x03	; 3
    aff4:	9c 93       	st	X, r25
    aff6:	8e 93       	st	-X, r24
    aff8:	12 97       	sbiw	r26, 0x02	; 2
    affa:	e0 91 23 02 	lds	r30, 0x0223
    affe:	f0 91 24 02 	lds	r31, 0x0224
    b002:	e9 5d       	subi	r30, 0xD9	; 217
    b004:	fd 4f       	sbci	r31, 0xFD	; 253
    b006:	80 81       	ld	r24, Z
    b008:	14 96       	adiw	r26, 0x04	; 4
    b00a:	8c 93       	st	X, r24
    b00c:	14 97       	sbiw	r26, 0x04	; 4
    b00e:	15 96       	adiw	r26, 0x05	; 5
    b010:	1c 92       	st	X, r1
    b012:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
                       lcd_print(y,1+((x+(iBlok*4))-strlen(lcdteks)),lcdteks);
    b016:	f8 01       	movw	r30, r16
    b018:	01 90       	ld	r0, Z+
    b01a:	00 20       	and	r0, r0
    b01c:	e9 f7       	brne	.-6      	; 0xb018 <FMenuSettingServerIP+0x2bc>
    b01e:	31 97       	sbiw	r30, 0x01	; 1
    b020:	e0 1b       	sub	r30, r16
    b022:	f1 0b       	sbc	r31, r17
    b024:	8d b7       	in	r24, 0x3d	; 61
    b026:	9e b7       	in	r25, 0x3e	; 62
    b028:	06 96       	adiw	r24, 0x06	; 6
    b02a:	0f b6       	in	r0, 0x3f	; 63
    b02c:	f8 94       	cli
    b02e:	9e bf       	out	0x3e, r25	; 62
    b030:	0f be       	out	0x3f, r0	; 63
    b032:	8d bf       	out	0x3d, r24	; 61
    b034:	60 91 2d 02 	lds	r22, 0x022D
    b038:	6f 5f       	subi	r22, 0xFF	; 255
    b03a:	80 91 23 02 	lds	r24, 0x0223
    b03e:	90 91 24 02 	lds	r25, 0x0224
    b042:	88 0f       	add	r24, r24
    b044:	99 1f       	adc	r25, r25
    b046:	88 0f       	add	r24, r24
    b048:	99 1f       	adc	r25, r25
    b04a:	68 0f       	add	r22, r24
    b04c:	6e 1b       	sub	r22, r30
    b04e:	80 91 2c 02 	lds	r24, 0x022C
    b052:	a8 01       	movw	r20, r16
    b054:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
					   if (iBlok>0)lcd_printf(y,1+((x+((iBlok-1)*4))),PSTR("."));
    b058:	80 91 23 02 	lds	r24, 0x0223
    b05c:	90 91 24 02 	lds	r25, 0x0224
    b060:	00 97       	sbiw	r24, 0x00	; 0
    b062:	81 f0       	breq	.+32     	; 0xb084 <FMenuSettingServerIP+0x328>
    b064:	60 91 2d 02 	lds	r22, 0x022D
    b068:	6f 5f       	subi	r22, 0xFF	; 255
    b06a:	81 50       	subi	r24, 0x01	; 1
    b06c:	90 4c       	sbci	r25, 0xC0	; 192
    b06e:	88 0f       	add	r24, r24
    b070:	99 1f       	adc	r25, r25
    b072:	88 0f       	add	r24, r24
    b074:	99 1f       	adc	r25, r25
    b076:	68 0f       	add	r22, r24
    b078:	80 91 2c 02 	lds	r24, 0x022C
    b07c:	4d e5       	ldi	r20, 0x5D	; 93
    b07e:	54 e1       	ldi	r21, 0x14	; 20
    b080:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
					   iInput=0;
    b084:	10 92 2b 02 	sts	0x022B, r1
					   iBlok++;
    b088:	80 91 23 02 	lds	r24, 0x0223
    b08c:	90 91 24 02 	lds	r25, 0x0224
    b090:	01 96       	adiw	r24, 0x01	; 1
    b092:	90 93 24 02 	sts	0x0224, r25
    b096:	80 93 23 02 	sts	0x0223, r24

				   }
				   if (iBlok>=4)stClientIP=cipStoreIPblok;
    b09a:	80 91 23 02 	lds	r24, 0x0223
    b09e:	90 91 24 02 	lds	r25, 0x0224
    b0a2:	04 97       	sbiw	r24, 0x04	; 4
    b0a4:	18 f0       	brcs	.+6      	; 0xb0ac <FMenuSettingServerIP+0x350>
    b0a6:	84 e0       	ldi	r24, 0x04	; 4
    b0a8:	80 93 58 01 	sts	0x0158, r24
			   }

			   if (keyPressed==_KEY_CANCEL){
    b0ac:	97 ee       	ldi	r25, 0xE7	; 231
    b0ae:	f9 16       	cp	r15, r25
    b0b0:	09 f4       	brne	.+2      	; 0xb0b4 <FMenuSettingServerIP+0x358>
    b0b2:	c2 c0       	rjmp	.+388    	; 0xb238 <FMenuSettingServerIP+0x4dc>
			       stClientIP=cipExit; 
			   }
			   else
			   if (keyPressed==_KEY_ENTER){
    b0b4:	a7 eb       	ldi	r26, 0xB7	; 183
    b0b6:	fa 16       	cp	r15, r26
    b0b8:	09 f0       	breq	.+2      	; 0xb0bc <FMenuSettingServerIP+0x360>
    b0ba:	c7 c0       	rjmp	.+398    	; 0xb24a <FMenuSettingServerIP+0x4ee>
			       //NextInput
			       if (iBlok<4){
    b0bc:	40 91 23 02 	lds	r20, 0x0223
    b0c0:	50 91 24 02 	lds	r21, 0x0224
    b0c4:	44 30       	cpi	r20, 0x04	; 4
    b0c6:	51 05       	cpc	r21, r1
    b0c8:	08 f0       	brcs	.+2      	; 0xb0cc <FMenuSettingServerIP+0x370>
    b0ca:	a6 c0       	rjmp	.+332    	; 0xb218 <FMenuSettingServerIP+0x4bc>
				       if (iInput==1)IP_blok[iBlok]=((IPchar[0]-'0'));
    b0cc:	80 91 2b 02 	lds	r24, 0x022B
    b0d0:	81 30       	cpi	r24, 0x01	; 1
    b0d2:	41 f4       	brne	.+16     	; 0xb0e4 <FMenuSettingServerIP+0x388>
    b0d4:	fa 01       	movw	r30, r20
    b0d6:	e9 5d       	subi	r30, 0xD9	; 217
    b0d8:	fd 4f       	sbci	r31, 0xFD	; 253
    b0da:	80 91 30 02 	lds	r24, 0x0230
    b0de:	80 53       	subi	r24, 0x30	; 48
    b0e0:	80 83       	st	Z, r24
    b0e2:	22 c0       	rjmp	.+68     	; 0xb128 <FMenuSettingServerIP+0x3cc>
					   if (iInput==2)IP_blok[iBlok]=((IPchar[0]-'0')*10)+(IPchar[1]-'0');
    b0e4:	82 30       	cpi	r24, 0x02	; 2
    b0e6:	49 f4       	brne	.+18     	; 0xb0fa <FMenuSettingServerIP+0x39e>
    b0e8:	fa 01       	movw	r30, r20
    b0ea:	e9 5d       	subi	r30, 0xD9	; 217
    b0ec:	fd 4f       	sbci	r31, 0xFD	; 253
    b0ee:	20 91 31 02 	lds	r18, 0x0231
    b0f2:	20 51       	subi	r18, 0x10	; 16
    b0f4:	80 91 30 02 	lds	r24, 0x0230
    b0f8:	11 c0       	rjmp	.+34     	; 0xb11c <FMenuSettingServerIP+0x3c0>
					   if (iInput==3)IP_blok[iBlok]=((IPchar[0]-'0')*100)+((IPchar[1]-'0')*10)+((IPchar[2]-'0'));
    b0fa:	83 30       	cpi	r24, 0x03	; 3
    b0fc:	a9 f4       	brne	.+42     	; 0xb128 <FMenuSettingServerIP+0x3cc>
    b0fe:	fa 01       	movw	r30, r20
    b100:	e9 5d       	subi	r30, 0xD9	; 217
    b102:	fd 4f       	sbci	r31, 0xFD	; 253
    b104:	20 91 32 02 	lds	r18, 0x0232
    b108:	20 5d       	subi	r18, 0xD0	; 208
    b10a:	80 91 30 02 	lds	r24, 0x0230
    b10e:	34 e6       	ldi	r19, 0x64	; 100
    b110:	83 9f       	mul	r24, r19
    b112:	c0 01       	movw	r24, r0
    b114:	11 24       	eor	r1, r1
    b116:	28 0f       	add	r18, r24
    b118:	80 91 31 02 	lds	r24, 0x0231
    b11c:	3a e0       	ldi	r19, 0x0A	; 10
    b11e:	83 9f       	mul	r24, r19
    b120:	c0 01       	movw	r24, r0
    b122:	11 24       	eor	r1, r1
    b124:	28 0f       	add	r18, r24
    b126:	20 83       	st	Z, r18
				       
					   IPchar[0]='0';IPchar[1]='0';IPchar[2]='0';
    b128:	80 e3       	ldi	r24, 0x30	; 48
    b12a:	80 93 30 02 	sts	0x0230, r24
    b12e:	80 93 31 02 	sts	0x0231, r24
    b132:	80 93 32 02 	sts	0x0232, r24
					   //Reposition Value
					   lcd_printf(y,((x+(iBlok*4))-3),PSTR("   "));
    b136:	60 91 2d 02 	lds	r22, 0x022D
    b13a:	63 50       	subi	r22, 0x03	; 3
    b13c:	44 0f       	add	r20, r20
    b13e:	55 1f       	adc	r21, r21
    b140:	44 0f       	add	r20, r20
    b142:	55 1f       	adc	r21, r21
    b144:	64 0f       	add	r22, r20
    b146:	80 91 2c 02 	lds	r24, 0x022C
    b14a:	49 e5       	ldi	r20, 0x59	; 89
    b14c:	54 e1       	ldi	r21, 0x14	; 20
    b14e:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
					   sprintf_P(lcdteks,PSTR("%d"),IP_blok[iBlok]);
    b152:	00 d0       	rcall	.+0      	; 0xb154 <FMenuSettingServerIP+0x3f8>
    b154:	00 d0       	rcall	.+0      	; 0xb156 <FMenuSettingServerIP+0x3fa>
    b156:	00 d0       	rcall	.+0      	; 0xb158 <FMenuSettingServerIP+0x3fc>
    b158:	ad b7       	in	r26, 0x3d	; 61
    b15a:	be b7       	in	r27, 0x3e	; 62
    b15c:	11 96       	adiw	r26, 0x01	; 1
    b15e:	8e 01       	movw	r16, r28
    b160:	0f 5f       	subi	r16, 0xFF	; 255
    b162:	1f 4f       	sbci	r17, 0xFF	; 255
    b164:	ed b7       	in	r30, 0x3d	; 61
    b166:	fe b7       	in	r31, 0x3e	; 62
    b168:	12 83       	std	Z+2, r17	; 0x02
    b16a:	01 83       	std	Z+1, r16	; 0x01
    b16c:	86 e5       	ldi	r24, 0x56	; 86
    b16e:	94 e1       	ldi	r25, 0x14	; 20
    b170:	13 96       	adiw	r26, 0x03	; 3
    b172:	9c 93       	st	X, r25
    b174:	8e 93       	st	-X, r24
    b176:	12 97       	sbiw	r26, 0x02	; 2
    b178:	e0 91 23 02 	lds	r30, 0x0223
    b17c:	f0 91 24 02 	lds	r31, 0x0224
    b180:	e9 5d       	subi	r30, 0xD9	; 217
    b182:	fd 4f       	sbci	r31, 0xFD	; 253
    b184:	80 81       	ld	r24, Z
    b186:	14 96       	adiw	r26, 0x04	; 4
    b188:	8c 93       	st	X, r24
    b18a:	14 97       	sbiw	r26, 0x04	; 4
    b18c:	15 96       	adiw	r26, 0x05	; 5
    b18e:	1c 92       	st	X, r1
    b190:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
                       lcd_print(y,1+((x+(iBlok*4))-strlen(lcdteks)),lcdteks);
    b194:	f8 01       	movw	r30, r16
    b196:	01 90       	ld	r0, Z+
    b198:	00 20       	and	r0, r0
    b19a:	e9 f7       	brne	.-6      	; 0xb196 <FMenuSettingServerIP+0x43a>
    b19c:	31 97       	sbiw	r30, 0x01	; 1
    b19e:	e0 1b       	sub	r30, r16
    b1a0:	f1 0b       	sbc	r31, r17
    b1a2:	8d b7       	in	r24, 0x3d	; 61
    b1a4:	9e b7       	in	r25, 0x3e	; 62
    b1a6:	06 96       	adiw	r24, 0x06	; 6
    b1a8:	0f b6       	in	r0, 0x3f	; 63
    b1aa:	f8 94       	cli
    b1ac:	9e bf       	out	0x3e, r25	; 62
    b1ae:	0f be       	out	0x3f, r0	; 63
    b1b0:	8d bf       	out	0x3d, r24	; 61
    b1b2:	60 91 2d 02 	lds	r22, 0x022D
    b1b6:	6f 5f       	subi	r22, 0xFF	; 255
    b1b8:	80 91 23 02 	lds	r24, 0x0223
    b1bc:	90 91 24 02 	lds	r25, 0x0224
    b1c0:	88 0f       	add	r24, r24
    b1c2:	99 1f       	adc	r25, r25
    b1c4:	88 0f       	add	r24, r24
    b1c6:	99 1f       	adc	r25, r25
    b1c8:	68 0f       	add	r22, r24
    b1ca:	6e 1b       	sub	r22, r30
    b1cc:	80 91 2c 02 	lds	r24, 0x022C
    b1d0:	a8 01       	movw	r20, r16
    b1d2:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>

					   if (iBlok>0)lcd_printf(y,1+((x+((iBlok-1)*4))),PSTR("."));
    b1d6:	80 91 23 02 	lds	r24, 0x0223
    b1da:	90 91 24 02 	lds	r25, 0x0224
    b1de:	00 97       	sbiw	r24, 0x00	; 0
    b1e0:	81 f0       	breq	.+32     	; 0xb202 <FMenuSettingServerIP+0x4a6>
    b1e2:	60 91 2d 02 	lds	r22, 0x022D
    b1e6:	6f 5f       	subi	r22, 0xFF	; 255
    b1e8:	81 50       	subi	r24, 0x01	; 1
    b1ea:	90 4c       	sbci	r25, 0xC0	; 192
    b1ec:	88 0f       	add	r24, r24
    b1ee:	99 1f       	adc	r25, r25
    b1f0:	88 0f       	add	r24, r24
    b1f2:	99 1f       	adc	r25, r25
    b1f4:	68 0f       	add	r22, r24
    b1f6:	80 91 2c 02 	lds	r24, 0x022C
    b1fa:	44 e5       	ldi	r20, 0x54	; 84
    b1fc:	54 e1       	ldi	r21, 0x14	; 20
    b1fe:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
				       iInput=0;
    b202:	10 92 2b 02 	sts	0x022B, r1
					   iBlok++;	   
    b206:	80 91 23 02 	lds	r24, 0x0223
    b20a:	90 91 24 02 	lds	r25, 0x0224
    b20e:	01 96       	adiw	r24, 0x01	; 1
    b210:	90 93 24 02 	sts	0x0224, r25
    b214:	80 93 23 02 	sts	0x0223, r24
				   }
				   if (iBlok>=4)stClientIP=cipStoreIPblok;
    b218:	80 91 23 02 	lds	r24, 0x0223
    b21c:	90 91 24 02 	lds	r25, 0x0224
    b220:	04 97       	sbiw	r24, 0x04	; 4
    b222:	98 f0       	brcs	.+38     	; 0xb24a <FMenuSettingServerIP+0x4ee>
    b224:	84 e0       	ldi	r24, 0x04	; 4
    b226:	09 c0       	rjmp	.+18     	; 0xb23a <FMenuSettingServerIP+0x4de>
			   }
		       break;
          case cipStoreIPblok:
		       //UpdateIPblok
			   eeprom_write_block((const void*) &IP_blok,(const void*) &DefServerIP,4);
    b228:	87 e2       	ldi	r24, 0x27	; 39
    b22a:	92 e0       	ldi	r25, 0x02	; 2
    b22c:	6c e2       	ldi	r22, 0x2C	; 44
    b22e:	70 e0       	ldi	r23, 0x00	; 0
    b230:	44 e0       	ldi	r20, 0x04	; 4
    b232:	50 e0       	ldi	r21, 0x00	; 0
    b234:	0e 94 33 ad 	call	0x15a66	; 0x15a66 <__eewr_block_m128>
			   stClientIP=cipExit;
    b238:	83 e0       	ldi	r24, 0x03	; 3
    b23a:	80 93 58 01 	sts	0x0158, r24
    b23e:	05 c0       	rjmp	.+10     	; 0xb24a <FMenuSettingServerIP+0x4ee>
		       break; 
          case cipExit://Cancel IPConfig
			   stClientIP=cipInit;
    b240:	81 e0       	ldi	r24, 0x01	; 1
    b242:	80 93 58 01 	sts	0x0158, r24
			   Result=MENU_DONE;
    b246:	80 93 2e 02 	sts	0x022E, r24
		       break;     
		  }//EndSwitch	 
	return Result;
}
    b24a:	80 91 2e 02 	lds	r24, 0x022E
    b24e:	64 96       	adiw	r28, 0x14	; 20
    b250:	0f b6       	in	r0, 0x3f	; 63
    b252:	f8 94       	cli
    b254:	de bf       	out	0x3e, r29	; 62
    b256:	0f be       	out	0x3f, r0	; 63
    b258:	cd bf       	out	0x3d, r28	; 61
    b25a:	cf 91       	pop	r28
    b25c:	df 91       	pop	r29
    b25e:	1f 91       	pop	r17
    b260:	0f 91       	pop	r16
    b262:	ff 90       	pop	r15
    b264:	08 95       	ret

0000b266 <FMenuSettingClientIP>:





char FMenuSettingClientIP(){
    b266:	ff 92       	push	r15
    b268:	0f 93       	push	r16
    b26a:	1f 93       	push	r17
    b26c:	df 93       	push	r29
    b26e:	cf 93       	push	r28
    b270:	cd b7       	in	r28, 0x3d	; 61
    b272:	de b7       	in	r29, 0x3e	; 62
    b274:	64 97       	sbiw	r28, 0x14	; 20
    b276:	0f b6       	in	r0, 0x3f	; 63
    b278:	f8 94       	cli
    b27a:	de bf       	out	0x3e, r29	; 62
    b27c:	0f be       	out	0x3f, r0	; 63
    b27e:	cd bf       	out	0x3d, r28	; 61
     //Client IP
     //Old: 192.168.123.000
	 //New:   _.   .   .
	 //--------------------
	 //*)cancel    #)next
     Result=MENU_NONE;
    b280:	10 92 3e 02 	sts	0x023E, r1
	 switch(stClientIP){
    b284:	80 91 59 01 	lds	r24, 0x0159
    b288:	82 30       	cpi	r24, 0x02	; 2
    b28a:	09 f4       	brne	.+2      	; 0xb28e <FMenuSettingClientIP+0x28>
    b28c:	79 c0       	rjmp	.+242    	; 0xb380 <FMenuSettingClientIP+0x11a>
    b28e:	83 30       	cpi	r24, 0x03	; 3
    b290:	20 f4       	brcc	.+8      	; 0xb29a <FMenuSettingClientIP+0x34>
    b292:	81 30       	cpi	r24, 0x01	; 1
    b294:	09 f0       	breq	.+2      	; 0xb298 <FMenuSettingClientIP+0x32>
    b296:	5e c2       	rjmp	.+1212   	; 0xb754 <FMenuSettingClientIP+0x4ee>
    b298:	07 c0       	rjmp	.+14     	; 0xb2a8 <FMenuSettingClientIP+0x42>
    b29a:	83 30       	cpi	r24, 0x03	; 3
    b29c:	09 f4       	brne	.+2      	; 0xb2a0 <FMenuSettingClientIP+0x3a>
    b29e:	55 c2       	rjmp	.+1194   	; 0xb74a <FMenuSettingClientIP+0x4e4>
    b2a0:	84 30       	cpi	r24, 0x04	; 4
    b2a2:	09 f0       	breq	.+2      	; 0xb2a6 <FMenuSettingClientIP+0x40>
    b2a4:	57 c2       	rjmp	.+1198   	; 0xb754 <FMenuSettingClientIP+0x4ee>
    b2a6:	45 c2       	rjmp	.+1162   	; 0xb732 <FMenuSettingClientIP+0x4cc>
		  case cipInit:
			   lcd_clear();
    b2a8:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
	           lcd_printf(1,1,PSTR("Client IP"));
    b2ac:	81 e0       	ldi	r24, 0x01	; 1
    b2ae:	61 e0       	ldi	r22, 0x01	; 1
    b2b0:	48 ef       	ldi	r20, 0xF8	; 248
    b2b2:	54 e1       	ldi	r21, 0x14	; 20
    b2b4:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
			   eeprom_read_block((void*)&IP_blok,(const void*)&DefClientIP,4);
    b2b8:	87 e3       	ldi	r24, 0x37	; 55
    b2ba:	92 e0       	ldi	r25, 0x02	; 2
    b2bc:	68 e2       	ldi	r22, 0x28	; 40
    b2be:	70 e0       	ldi	r23, 0x00	; 0
    b2c0:	44 e0       	ldi	r20, 0x04	; 4
    b2c2:	50 e0       	ldi	r21, 0x00	; 0
    b2c4:	0e 94 1b ad 	call	0x15a36	; 0x15a36 <__eerd_block_m128>
	           sprintf_P(lcdteks,PSTR("Old: %d.%d.%d.%d"),IP_blok[0],IP_blok[1],IP_blok[2],IP_blok[3]);
    b2c8:	8d b7       	in	r24, 0x3d	; 61
    b2ca:	9e b7       	in	r25, 0x3e	; 62
    b2cc:	0c 97       	sbiw	r24, 0x0c	; 12
    b2ce:	0f b6       	in	r0, 0x3f	; 63
    b2d0:	f8 94       	cli
    b2d2:	9e bf       	out	0x3e, r25	; 62
    b2d4:	0f be       	out	0x3f, r0	; 63
    b2d6:	8d bf       	out	0x3d, r24	; 61
    b2d8:	ed b7       	in	r30, 0x3d	; 61
    b2da:	fe b7       	in	r31, 0x3e	; 62
    b2dc:	31 96       	adiw	r30, 0x01	; 1
    b2de:	8e 01       	movw	r16, r28
    b2e0:	0f 5f       	subi	r16, 0xFF	; 255
    b2e2:	1f 4f       	sbci	r17, 0xFF	; 255
    b2e4:	ad b7       	in	r26, 0x3d	; 61
    b2e6:	be b7       	in	r27, 0x3e	; 62
    b2e8:	12 96       	adiw	r26, 0x02	; 2
    b2ea:	1c 93       	st	X, r17
    b2ec:	0e 93       	st	-X, r16
    b2ee:	11 97       	sbiw	r26, 0x01	; 1
    b2f0:	87 ee       	ldi	r24, 0xE7	; 231
    b2f2:	94 e1       	ldi	r25, 0x14	; 20
    b2f4:	93 83       	std	Z+3, r25	; 0x03
    b2f6:	82 83       	std	Z+2, r24	; 0x02
    b2f8:	80 91 37 02 	lds	r24, 0x0237
    b2fc:	84 83       	std	Z+4, r24	; 0x04
    b2fe:	15 82       	std	Z+5, r1	; 0x05
    b300:	80 91 38 02 	lds	r24, 0x0238
    b304:	86 83       	std	Z+6, r24	; 0x06
    b306:	17 82       	std	Z+7, r1	; 0x07
    b308:	80 91 39 02 	lds	r24, 0x0239
    b30c:	80 87       	std	Z+8, r24	; 0x08
    b30e:	11 86       	std	Z+9, r1	; 0x09
    b310:	80 91 3a 02 	lds	r24, 0x023A
    b314:	82 87       	std	Z+10, r24	; 0x0a
    b316:	13 86       	std	Z+11, r1	; 0x0b
    b318:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	           lcd_print(2,1,lcdteks);
    b31c:	ed b7       	in	r30, 0x3d	; 61
    b31e:	fe b7       	in	r31, 0x3e	; 62
    b320:	3c 96       	adiw	r30, 0x0c	; 12
    b322:	0f b6       	in	r0, 0x3f	; 63
    b324:	f8 94       	cli
    b326:	fe bf       	out	0x3e, r31	; 62
    b328:	0f be       	out	0x3f, r0	; 63
    b32a:	ed bf       	out	0x3d, r30	; 61
    b32c:	82 e0       	ldi	r24, 0x02	; 2
    b32e:	61 e0       	ldi	r22, 0x01	; 1
    b330:	a8 01       	movw	r20, r16
    b332:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
			   lcd_printf(3,1,PSTR("New:   _.   .   .   "));
    b336:	83 e0       	ldi	r24, 0x03	; 3
    b338:	61 e0       	ldi	r22, 0x01	; 1
    b33a:	42 ed       	ldi	r20, 0xD2	; 210
    b33c:	54 e1       	ldi	r21, 0x14	; 20
    b33e:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
			   lcd_printf(4,1,PSTR("[*]cancel  [#]next  "));
    b342:	84 e0       	ldi	r24, 0x04	; 4
    b344:	61 e0       	ldi	r22, 0x01	; 1
    b346:	4d eb       	ldi	r20, 0xBD	; 189
    b348:	54 e1       	ldi	r21, 0x14	; 20
    b34a:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
               iLoop=0;
    b34e:	10 92 36 02 	sts	0x0236, r1
    b352:	10 92 35 02 	sts	0x0235, r1
			   y=3,x=8;
    b356:	83 e0       	ldi	r24, 0x03	; 3
    b358:	80 93 3c 02 	sts	0x023C, r24
    b35c:	88 e0       	ldi	r24, 0x08	; 8
    b35e:	80 93 3d 02 	sts	0x023D, r24
			   iInput=0; iBlok=0;
    b362:	10 92 3b 02 	sts	0x023B, r1
    b366:	10 92 34 02 	sts	0x0234, r1
    b36a:	10 92 33 02 	sts	0x0233, r1
			   IPchar[0]='0';IPchar[1]='0';IPchar[2]='0';
    b36e:	80 e3       	ldi	r24, 0x30	; 48
    b370:	80 93 40 02 	sts	0x0240, r24
    b374:	80 93 41 02 	sts	0x0241, r24
    b378:	80 93 42 02 	sts	0x0242, r24
			   stClientIP=cipInputIP; 
    b37c:	82 e0       	ldi	r24, 0x02	; 2
    b37e:	e2 c1       	rjmp	.+964    	; 0xb744 <FMenuSettingClientIP+0x4de>
		       break;
          case cipInputIP:
			   //Blinking 60% _ 
			   iLoop++;
    b380:	80 91 35 02 	lds	r24, 0x0235
    b384:	90 91 36 02 	lds	r25, 0x0236
    b388:	01 96       	adiw	r24, 0x01	; 1
    b38a:	90 93 36 02 	sts	0x0236, r25
    b38e:	80 93 35 02 	sts	0x0235, r24
			   if ((iLoop%2000)==0){
    b392:	60 ed       	ldi	r22, 0xD0	; 208
    b394:	77 e0       	ldi	r23, 0x07	; 7
    b396:	0e 94 65 aa 	call	0x154ca	; 0x154ca <__udivmodhi4>
    b39a:	89 2b       	or	r24, r25
    b39c:	81 f4       	brne	.+32     	; 0xb3be <FMenuSettingClientIP+0x158>
			      lcd_put(y,(x+(iBlok*4)),'_'); 
    b39e:	80 91 33 02 	lds	r24, 0x0233
    b3a2:	90 91 34 02 	lds	r25, 0x0234
    b3a6:	88 0f       	add	r24, r24
    b3a8:	99 1f       	adc	r25, r25
    b3aa:	88 0f       	add	r24, r24
    b3ac:	99 1f       	adc	r25, r25
    b3ae:	60 91 3d 02 	lds	r22, 0x023D
    b3b2:	68 0f       	add	r22, r24
    b3b4:	80 91 3c 02 	lds	r24, 0x023C
    b3b8:	4f e5       	ldi	r20, 0x5F	; 95
    b3ba:	0e 94 2c a5 	call	0x14a58	; 0x14a58 <lcd_put>
			   }
			   if ((iLoop%2000)==1000){
    b3be:	80 91 35 02 	lds	r24, 0x0235
    b3c2:	90 91 36 02 	lds	r25, 0x0236
    b3c6:	60 ed       	ldi	r22, 0xD0	; 208
    b3c8:	77 e0       	ldi	r23, 0x07	; 7
    b3ca:	0e 94 65 aa 	call	0x154ca	; 0x154ca <__udivmodhi4>
    b3ce:	88 5e       	subi	r24, 0xE8	; 232
    b3d0:	93 40       	sbci	r25, 0x03	; 3
    b3d2:	81 f4       	brne	.+32     	; 0xb3f4 <FMenuSettingClientIP+0x18e>
			      lcd_put(y,(x+(iBlok*4)),' '); 
    b3d4:	80 91 33 02 	lds	r24, 0x0233
    b3d8:	90 91 34 02 	lds	r25, 0x0234
    b3dc:	88 0f       	add	r24, r24
    b3de:	99 1f       	adc	r25, r25
    b3e0:	88 0f       	add	r24, r24
    b3e2:	99 1f       	adc	r25, r25
    b3e4:	60 91 3d 02 	lds	r22, 0x023D
    b3e8:	68 0f       	add	r22, r24
    b3ea:	80 91 3c 02 	lds	r24, 0x023C
    b3ee:	40 e2       	ldi	r20, 0x20	; 32
    b3f0:	0e 94 2c a5 	call	0x14a58	; 0x14a58 <lcd_put>
			   }
			   //GetKeyPressed
			   keyPressed=_key_scan(1);
    b3f4:	81 e0       	ldi	r24, 0x01	; 1
    b3f6:	0e 94 58 a6 	call	0x14cb0	; 0x14cb0 <_key_scan>
    b3fa:	f8 2e       	mov	r15, r24
			   keyChar=_key_btn(keyPressed);
    b3fc:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <_key_btn>
    b400:	28 2f       	mov	r18, r24
               if ((keyChar>='0')&&(keyChar<='9')){
    b402:	80 53       	subi	r24, 0x30	; 48
    b404:	8a 30       	cpi	r24, 0x0A	; 10
    b406:	08 f0       	brcs	.+2      	; 0xb40a <FMenuSettingClientIP+0x1a4>
    b408:	d6 c0       	rjmp	.+428    	; 0xb5b6 <FMenuSettingClientIP+0x350>
    b40a:	80 e5       	ldi	r24, 0x50	; 80
    b40c:	93 ec       	ldi	r25, 0xC3	; 195
    b40e:	01 97       	sbiw	r24, 0x01	; 1
    b410:	f1 f7       	brne	.-4      	; 0xb40e <FMenuSettingClientIP+0x1a8>
			       _delay_ms(200);
			       IPchar[iInput]=keyChar;
    b412:	80 91 3b 02 	lds	r24, 0x023B
    b416:	e8 2f       	mov	r30, r24
    b418:	f0 e0       	ldi	r31, 0x00	; 0
    b41a:	e0 5c       	subi	r30, 0xC0	; 192
    b41c:	fd 4f       	sbci	r31, 0xFD	; 253
    b41e:	20 83       	st	Z, r18
				   iInput++;                    
    b420:	8f 5f       	subi	r24, 0xFF	; 255
    b422:	80 93 3b 02 	sts	0x023B, r24
				   for (i=1;i<(iInput+1);i++){
    b426:	81 e0       	ldi	r24, 0x01	; 1
    b428:	1c c0       	rjmp	.+56     	; 0xb462 <FMenuSettingClientIP+0x1fc>
				       lcd_xy(y,((x+(iBlok*4))-(3-i)));_lcd(IPchar[i-1]);
    b42a:	80 91 3d 02 	lds	r24, 0x023D
    b42e:	68 0f       	add	r22, r24
    b430:	63 50       	subi	r22, 0x03	; 3
    b432:	80 91 33 02 	lds	r24, 0x0233
    b436:	90 91 34 02 	lds	r25, 0x0234
    b43a:	88 0f       	add	r24, r24
    b43c:	99 1f       	adc	r25, r25
    b43e:	88 0f       	add	r24, r24
    b440:	99 1f       	adc	r25, r25
    b442:	68 0f       	add	r22, r24
    b444:	80 91 3c 02 	lds	r24, 0x023C
    b448:	0e 94 9e a4 	call	0x1493c	; 0x1493c <lcd_xy>
    b44c:	e0 91 3f 02 	lds	r30, 0x023F
    b450:	f0 e0       	ldi	r31, 0x00	; 0
    b452:	e1 5c       	subi	r30, 0xC1	; 193
    b454:	fd 4f       	sbci	r31, 0xFD	; 253
    b456:	80 81       	ld	r24, Z
    b458:	0e 94 78 a4 	call	0x148f0	; 0x148f0 <_lcd>
			   keyChar=_key_btn(keyPressed);
               if ((keyChar>='0')&&(keyChar<='9')){
			       _delay_ms(200);
			       IPchar[iInput]=keyChar;
				   iInput++;                    
				   for (i=1;i<(iInput+1);i++){
    b45c:	80 91 3f 02 	lds	r24, 0x023F
    b460:	8f 5f       	subi	r24, 0xFF	; 255
    b462:	80 93 3f 02 	sts	0x023F, r24
    b466:	70 91 3b 02 	lds	r23, 0x023B
    b46a:	60 91 3f 02 	lds	r22, 0x023F
    b46e:	27 2f       	mov	r18, r23
    b470:	30 e0       	ldi	r19, 0x00	; 0
    b472:	86 2f       	mov	r24, r22
    b474:	90 e0       	ldi	r25, 0x00	; 0
    b476:	28 17       	cp	r18, r24
    b478:	39 07       	cpc	r19, r25
    b47a:	bc f6       	brge	.-82     	; 0xb42a <FMenuSettingClientIP+0x1c4>
				       lcd_xy(y,((x+(iBlok*4))-(3-i)));_lcd(IPchar[i-1]);
				   }
                   //NextInput
				   if (iInput>=3){
    b47c:	73 30       	cpi	r23, 0x03	; 3
    b47e:	08 f4       	brcc	.+2      	; 0xb482 <FMenuSettingClientIP+0x21c>
    b480:	91 c0       	rjmp	.+290    	; 0xb5a4 <FMenuSettingClientIP+0x33e>
				       IP_blok[iBlok]=((IPchar[0]-'0')*100)+((IPchar[1]-'0')*10)+((IPchar[2]-'0'));
    b482:	40 91 33 02 	lds	r20, 0x0233
    b486:	50 91 34 02 	lds	r21, 0x0234
    b48a:	fa 01       	movw	r30, r20
    b48c:	e9 5c       	subi	r30, 0xC9	; 201
    b48e:	fd 4f       	sbci	r31, 0xFD	; 253
    b490:	20 91 42 02 	lds	r18, 0x0242
    b494:	20 5d       	subi	r18, 0xD0	; 208
    b496:	80 91 40 02 	lds	r24, 0x0240
    b49a:	34 e6       	ldi	r19, 0x64	; 100
    b49c:	83 9f       	mul	r24, r19
    b49e:	c0 01       	movw	r24, r0
    b4a0:	11 24       	eor	r1, r1
    b4a2:	28 0f       	add	r18, r24
    b4a4:	80 91 41 02 	lds	r24, 0x0241
    b4a8:	3a e0       	ldi	r19, 0x0A	; 10
    b4aa:	83 9f       	mul	r24, r19
    b4ac:	c0 01       	movw	r24, r0
    b4ae:	11 24       	eor	r1, r1
    b4b0:	28 0f       	add	r18, r24
    b4b2:	20 83       	st	Z, r18
					   IPchar[0]='0';IPchar[1]='0';IPchar[2]='0';
    b4b4:	80 e3       	ldi	r24, 0x30	; 48
    b4b6:	80 93 40 02 	sts	0x0240, r24
    b4ba:	80 93 41 02 	sts	0x0241, r24
    b4be:	80 93 42 02 	sts	0x0242, r24
					   //Reposition Value
					   lcd_printf(y,((x+(iBlok*4))-iInput),PSTR("   "));
    b4c2:	44 0f       	add	r20, r20
    b4c4:	55 1f       	adc	r21, r21
    b4c6:	44 0f       	add	r20, r20
    b4c8:	55 1f       	adc	r21, r21
    b4ca:	60 91 3d 02 	lds	r22, 0x023D
    b4ce:	64 0f       	add	r22, r20
    b4d0:	67 1b       	sub	r22, r23
    b4d2:	80 91 3c 02 	lds	r24, 0x023C
    b4d6:	49 eb       	ldi	r20, 0xB9	; 185
    b4d8:	54 e1       	ldi	r21, 0x14	; 20
    b4da:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
					   sprintf_P(lcdteks,PSTR("%d"),IP_blok[iBlok]);
    b4de:	00 d0       	rcall	.+0      	; 0xb4e0 <FMenuSettingClientIP+0x27a>
    b4e0:	00 d0       	rcall	.+0      	; 0xb4e2 <FMenuSettingClientIP+0x27c>
    b4e2:	00 d0       	rcall	.+0      	; 0xb4e4 <FMenuSettingClientIP+0x27e>
    b4e4:	ad b7       	in	r26, 0x3d	; 61
    b4e6:	be b7       	in	r27, 0x3e	; 62
    b4e8:	11 96       	adiw	r26, 0x01	; 1
    b4ea:	8e 01       	movw	r16, r28
    b4ec:	0f 5f       	subi	r16, 0xFF	; 255
    b4ee:	1f 4f       	sbci	r17, 0xFF	; 255
    b4f0:	ed b7       	in	r30, 0x3d	; 61
    b4f2:	fe b7       	in	r31, 0x3e	; 62
    b4f4:	12 83       	std	Z+2, r17	; 0x02
    b4f6:	01 83       	std	Z+1, r16	; 0x01
    b4f8:	86 eb       	ldi	r24, 0xB6	; 182
    b4fa:	94 e1       	ldi	r25, 0x14	; 20
    b4fc:	13 96       	adiw	r26, 0x03	; 3
    b4fe:	9c 93       	st	X, r25
    b500:	8e 93       	st	-X, r24
    b502:	12 97       	sbiw	r26, 0x02	; 2
    b504:	e0 91 33 02 	lds	r30, 0x0233
    b508:	f0 91 34 02 	lds	r31, 0x0234
    b50c:	e9 5c       	subi	r30, 0xC9	; 201
    b50e:	fd 4f       	sbci	r31, 0xFD	; 253
    b510:	80 81       	ld	r24, Z
    b512:	14 96       	adiw	r26, 0x04	; 4
    b514:	8c 93       	st	X, r24
    b516:	14 97       	sbiw	r26, 0x04	; 4
    b518:	15 96       	adiw	r26, 0x05	; 5
    b51a:	1c 92       	st	X, r1
    b51c:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
                       lcd_print(y,1+((x+(iBlok*4))-strlen(lcdteks)),lcdteks);
    b520:	f8 01       	movw	r30, r16
    b522:	01 90       	ld	r0, Z+
    b524:	00 20       	and	r0, r0
    b526:	e9 f7       	brne	.-6      	; 0xb522 <FMenuSettingClientIP+0x2bc>
    b528:	31 97       	sbiw	r30, 0x01	; 1
    b52a:	e0 1b       	sub	r30, r16
    b52c:	f1 0b       	sbc	r31, r17
    b52e:	8d b7       	in	r24, 0x3d	; 61
    b530:	9e b7       	in	r25, 0x3e	; 62
    b532:	06 96       	adiw	r24, 0x06	; 6
    b534:	0f b6       	in	r0, 0x3f	; 63
    b536:	f8 94       	cli
    b538:	9e bf       	out	0x3e, r25	; 62
    b53a:	0f be       	out	0x3f, r0	; 63
    b53c:	8d bf       	out	0x3d, r24	; 61
    b53e:	60 91 3d 02 	lds	r22, 0x023D
    b542:	6f 5f       	subi	r22, 0xFF	; 255
    b544:	80 91 33 02 	lds	r24, 0x0233
    b548:	90 91 34 02 	lds	r25, 0x0234
    b54c:	88 0f       	add	r24, r24
    b54e:	99 1f       	adc	r25, r25
    b550:	88 0f       	add	r24, r24
    b552:	99 1f       	adc	r25, r25
    b554:	68 0f       	add	r22, r24
    b556:	6e 1b       	sub	r22, r30
    b558:	80 91 3c 02 	lds	r24, 0x023C
    b55c:	a8 01       	movw	r20, r16
    b55e:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
					   if (iBlok>0)lcd_printf(y,1+((x+((iBlok-1)*4))),PSTR("."));
    b562:	80 91 33 02 	lds	r24, 0x0233
    b566:	90 91 34 02 	lds	r25, 0x0234
    b56a:	00 97       	sbiw	r24, 0x00	; 0
    b56c:	81 f0       	breq	.+32     	; 0xb58e <FMenuSettingClientIP+0x328>
    b56e:	60 91 3d 02 	lds	r22, 0x023D
    b572:	6f 5f       	subi	r22, 0xFF	; 255
    b574:	81 50       	subi	r24, 0x01	; 1
    b576:	90 4c       	sbci	r25, 0xC0	; 192
    b578:	88 0f       	add	r24, r24
    b57a:	99 1f       	adc	r25, r25
    b57c:	88 0f       	add	r24, r24
    b57e:	99 1f       	adc	r25, r25
    b580:	68 0f       	add	r22, r24
    b582:	80 91 3c 02 	lds	r24, 0x023C
    b586:	44 eb       	ldi	r20, 0xB4	; 180
    b588:	54 e1       	ldi	r21, 0x14	; 20
    b58a:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
					   iInput=0;
    b58e:	10 92 3b 02 	sts	0x023B, r1
					   iBlok++;
    b592:	80 91 33 02 	lds	r24, 0x0233
    b596:	90 91 34 02 	lds	r25, 0x0234
    b59a:	01 96       	adiw	r24, 0x01	; 1
    b59c:	90 93 34 02 	sts	0x0234, r25
    b5a0:	80 93 33 02 	sts	0x0233, r24

				   }
				   if (iBlok>=4)stClientIP=cipStoreIPblok;
    b5a4:	80 91 33 02 	lds	r24, 0x0233
    b5a8:	90 91 34 02 	lds	r25, 0x0234
    b5ac:	04 97       	sbiw	r24, 0x04	; 4
    b5ae:	18 f0       	brcs	.+6      	; 0xb5b6 <FMenuSettingClientIP+0x350>
    b5b0:	84 e0       	ldi	r24, 0x04	; 4
    b5b2:	80 93 59 01 	sts	0x0159, r24
			   }

			   if (keyPressed==_KEY_CANCEL){
    b5b6:	97 ee       	ldi	r25, 0xE7	; 231
    b5b8:	f9 16       	cp	r15, r25
    b5ba:	09 f4       	brne	.+2      	; 0xb5be <FMenuSettingClientIP+0x358>
    b5bc:	c2 c0       	rjmp	.+388    	; 0xb742 <FMenuSettingClientIP+0x4dc>
			       stClientIP=cipExit; 
			   }
			   else
			   if (keyPressed==_KEY_ENTER){
    b5be:	a7 eb       	ldi	r26, 0xB7	; 183
    b5c0:	fa 16       	cp	r15, r26
    b5c2:	09 f0       	breq	.+2      	; 0xb5c6 <FMenuSettingClientIP+0x360>
    b5c4:	c7 c0       	rjmp	.+398    	; 0xb754 <FMenuSettingClientIP+0x4ee>
			       //NextInput
			       if (iBlok<4){
    b5c6:	40 91 33 02 	lds	r20, 0x0233
    b5ca:	50 91 34 02 	lds	r21, 0x0234
    b5ce:	44 30       	cpi	r20, 0x04	; 4
    b5d0:	51 05       	cpc	r21, r1
    b5d2:	08 f0       	brcs	.+2      	; 0xb5d6 <FMenuSettingClientIP+0x370>
    b5d4:	a6 c0       	rjmp	.+332    	; 0xb722 <FMenuSettingClientIP+0x4bc>
				       if (iInput==1)IP_blok[iBlok]=((IPchar[0]-'0'));
    b5d6:	80 91 3b 02 	lds	r24, 0x023B
    b5da:	81 30       	cpi	r24, 0x01	; 1
    b5dc:	41 f4       	brne	.+16     	; 0xb5ee <FMenuSettingClientIP+0x388>
    b5de:	fa 01       	movw	r30, r20
    b5e0:	e9 5c       	subi	r30, 0xC9	; 201
    b5e2:	fd 4f       	sbci	r31, 0xFD	; 253
    b5e4:	80 91 40 02 	lds	r24, 0x0240
    b5e8:	80 53       	subi	r24, 0x30	; 48
    b5ea:	80 83       	st	Z, r24
    b5ec:	22 c0       	rjmp	.+68     	; 0xb632 <FMenuSettingClientIP+0x3cc>
					   if (iInput==2)IP_blok[iBlok]=((IPchar[0]-'0')*10)+(IPchar[1]-'0');
    b5ee:	82 30       	cpi	r24, 0x02	; 2
    b5f0:	49 f4       	brne	.+18     	; 0xb604 <FMenuSettingClientIP+0x39e>
    b5f2:	fa 01       	movw	r30, r20
    b5f4:	e9 5c       	subi	r30, 0xC9	; 201
    b5f6:	fd 4f       	sbci	r31, 0xFD	; 253
    b5f8:	20 91 41 02 	lds	r18, 0x0241
    b5fc:	20 51       	subi	r18, 0x10	; 16
    b5fe:	80 91 40 02 	lds	r24, 0x0240
    b602:	11 c0       	rjmp	.+34     	; 0xb626 <FMenuSettingClientIP+0x3c0>
					   if (iInput==3)IP_blok[iBlok]=((IPchar[0]-'0')*100)+((IPchar[1]-'0')*10)+((IPchar[2]-'0'));
    b604:	83 30       	cpi	r24, 0x03	; 3
    b606:	a9 f4       	brne	.+42     	; 0xb632 <FMenuSettingClientIP+0x3cc>
    b608:	fa 01       	movw	r30, r20
    b60a:	e9 5c       	subi	r30, 0xC9	; 201
    b60c:	fd 4f       	sbci	r31, 0xFD	; 253
    b60e:	20 91 42 02 	lds	r18, 0x0242
    b612:	20 5d       	subi	r18, 0xD0	; 208
    b614:	80 91 40 02 	lds	r24, 0x0240
    b618:	34 e6       	ldi	r19, 0x64	; 100
    b61a:	83 9f       	mul	r24, r19
    b61c:	c0 01       	movw	r24, r0
    b61e:	11 24       	eor	r1, r1
    b620:	28 0f       	add	r18, r24
    b622:	80 91 41 02 	lds	r24, 0x0241
    b626:	3a e0       	ldi	r19, 0x0A	; 10
    b628:	83 9f       	mul	r24, r19
    b62a:	c0 01       	movw	r24, r0
    b62c:	11 24       	eor	r1, r1
    b62e:	28 0f       	add	r18, r24
    b630:	20 83       	st	Z, r18
				       
					   IPchar[0]='0';IPchar[1]='0';IPchar[2]='0';
    b632:	80 e3       	ldi	r24, 0x30	; 48
    b634:	80 93 40 02 	sts	0x0240, r24
    b638:	80 93 41 02 	sts	0x0241, r24
    b63c:	80 93 42 02 	sts	0x0242, r24
					   //Reposition Value
					   lcd_printf(y,((x+(iBlok*4))-3),PSTR("   "));
    b640:	60 91 3d 02 	lds	r22, 0x023D
    b644:	63 50       	subi	r22, 0x03	; 3
    b646:	44 0f       	add	r20, r20
    b648:	55 1f       	adc	r21, r21
    b64a:	44 0f       	add	r20, r20
    b64c:	55 1f       	adc	r21, r21
    b64e:	64 0f       	add	r22, r20
    b650:	80 91 3c 02 	lds	r24, 0x023C
    b654:	40 eb       	ldi	r20, 0xB0	; 176
    b656:	54 e1       	ldi	r21, 0x14	; 20
    b658:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
					   sprintf_P(lcdteks,PSTR("%d"),IP_blok[iBlok]);
    b65c:	00 d0       	rcall	.+0      	; 0xb65e <FMenuSettingClientIP+0x3f8>
    b65e:	00 d0       	rcall	.+0      	; 0xb660 <FMenuSettingClientIP+0x3fa>
    b660:	00 d0       	rcall	.+0      	; 0xb662 <FMenuSettingClientIP+0x3fc>
    b662:	ad b7       	in	r26, 0x3d	; 61
    b664:	be b7       	in	r27, 0x3e	; 62
    b666:	11 96       	adiw	r26, 0x01	; 1
    b668:	8e 01       	movw	r16, r28
    b66a:	0f 5f       	subi	r16, 0xFF	; 255
    b66c:	1f 4f       	sbci	r17, 0xFF	; 255
    b66e:	ed b7       	in	r30, 0x3d	; 61
    b670:	fe b7       	in	r31, 0x3e	; 62
    b672:	12 83       	std	Z+2, r17	; 0x02
    b674:	01 83       	std	Z+1, r16	; 0x01
    b676:	8d ea       	ldi	r24, 0xAD	; 173
    b678:	94 e1       	ldi	r25, 0x14	; 20
    b67a:	13 96       	adiw	r26, 0x03	; 3
    b67c:	9c 93       	st	X, r25
    b67e:	8e 93       	st	-X, r24
    b680:	12 97       	sbiw	r26, 0x02	; 2
    b682:	e0 91 33 02 	lds	r30, 0x0233
    b686:	f0 91 34 02 	lds	r31, 0x0234
    b68a:	e9 5c       	subi	r30, 0xC9	; 201
    b68c:	fd 4f       	sbci	r31, 0xFD	; 253
    b68e:	80 81       	ld	r24, Z
    b690:	14 96       	adiw	r26, 0x04	; 4
    b692:	8c 93       	st	X, r24
    b694:	14 97       	sbiw	r26, 0x04	; 4
    b696:	15 96       	adiw	r26, 0x05	; 5
    b698:	1c 92       	st	X, r1
    b69a:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
                       lcd_print(y,1+((x+(iBlok*4))-strlen(lcdteks)),lcdteks);
    b69e:	f8 01       	movw	r30, r16
    b6a0:	01 90       	ld	r0, Z+
    b6a2:	00 20       	and	r0, r0
    b6a4:	e9 f7       	brne	.-6      	; 0xb6a0 <FMenuSettingClientIP+0x43a>
    b6a6:	31 97       	sbiw	r30, 0x01	; 1
    b6a8:	e0 1b       	sub	r30, r16
    b6aa:	f1 0b       	sbc	r31, r17
    b6ac:	8d b7       	in	r24, 0x3d	; 61
    b6ae:	9e b7       	in	r25, 0x3e	; 62
    b6b0:	06 96       	adiw	r24, 0x06	; 6
    b6b2:	0f b6       	in	r0, 0x3f	; 63
    b6b4:	f8 94       	cli
    b6b6:	9e bf       	out	0x3e, r25	; 62
    b6b8:	0f be       	out	0x3f, r0	; 63
    b6ba:	8d bf       	out	0x3d, r24	; 61
    b6bc:	60 91 3d 02 	lds	r22, 0x023D
    b6c0:	6f 5f       	subi	r22, 0xFF	; 255
    b6c2:	80 91 33 02 	lds	r24, 0x0233
    b6c6:	90 91 34 02 	lds	r25, 0x0234
    b6ca:	88 0f       	add	r24, r24
    b6cc:	99 1f       	adc	r25, r25
    b6ce:	88 0f       	add	r24, r24
    b6d0:	99 1f       	adc	r25, r25
    b6d2:	68 0f       	add	r22, r24
    b6d4:	6e 1b       	sub	r22, r30
    b6d6:	80 91 3c 02 	lds	r24, 0x023C
    b6da:	a8 01       	movw	r20, r16
    b6dc:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>

					   if (iBlok>0)lcd_printf(y,1+((x+((iBlok-1)*4))),PSTR("."));
    b6e0:	80 91 33 02 	lds	r24, 0x0233
    b6e4:	90 91 34 02 	lds	r25, 0x0234
    b6e8:	00 97       	sbiw	r24, 0x00	; 0
    b6ea:	81 f0       	breq	.+32     	; 0xb70c <FMenuSettingClientIP+0x4a6>
    b6ec:	60 91 3d 02 	lds	r22, 0x023D
    b6f0:	6f 5f       	subi	r22, 0xFF	; 255
    b6f2:	81 50       	subi	r24, 0x01	; 1
    b6f4:	90 4c       	sbci	r25, 0xC0	; 192
    b6f6:	88 0f       	add	r24, r24
    b6f8:	99 1f       	adc	r25, r25
    b6fa:	88 0f       	add	r24, r24
    b6fc:	99 1f       	adc	r25, r25
    b6fe:	68 0f       	add	r22, r24
    b700:	80 91 3c 02 	lds	r24, 0x023C
    b704:	4b ea       	ldi	r20, 0xAB	; 171
    b706:	54 e1       	ldi	r21, 0x14	; 20
    b708:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
				       iInput=0;
    b70c:	10 92 3b 02 	sts	0x023B, r1
					   iBlok++;	   
    b710:	80 91 33 02 	lds	r24, 0x0233
    b714:	90 91 34 02 	lds	r25, 0x0234
    b718:	01 96       	adiw	r24, 0x01	; 1
    b71a:	90 93 34 02 	sts	0x0234, r25
    b71e:	80 93 33 02 	sts	0x0233, r24
				   }
				   if (iBlok>=4)stClientIP=cipStoreIPblok;
    b722:	80 91 33 02 	lds	r24, 0x0233
    b726:	90 91 34 02 	lds	r25, 0x0234
    b72a:	04 97       	sbiw	r24, 0x04	; 4
    b72c:	98 f0       	brcs	.+38     	; 0xb754 <FMenuSettingClientIP+0x4ee>
    b72e:	84 e0       	ldi	r24, 0x04	; 4
    b730:	09 c0       	rjmp	.+18     	; 0xb744 <FMenuSettingClientIP+0x4de>
			   }
		       break;
          case cipStoreIPblok://UpdateIPblok
			   eeprom_write_block((const void*) &IP_blok,(const void*) &DefClientIP,4);
    b732:	87 e3       	ldi	r24, 0x37	; 55
    b734:	92 e0       	ldi	r25, 0x02	; 2
    b736:	68 e2       	ldi	r22, 0x28	; 40
    b738:	70 e0       	ldi	r23, 0x00	; 0
    b73a:	44 e0       	ldi	r20, 0x04	; 4
    b73c:	50 e0       	ldi	r21, 0x00	; 0
    b73e:	0e 94 33 ad 	call	0x15a66	; 0x15a66 <__eewr_block_m128>
			   stClientIP=cipExit;
    b742:	83 e0       	ldi	r24, 0x03	; 3
    b744:	80 93 59 01 	sts	0x0159, r24
    b748:	05 c0       	rjmp	.+10     	; 0xb754 <FMenuSettingClientIP+0x4ee>
		       break; 
          case cipExit://Cancel IPConfig
		       stClientIP=cipInit;
    b74a:	81 e0       	ldi	r24, 0x01	; 1
    b74c:	80 93 59 01 	sts	0x0159, r24
		       Result=MENU_DONE;
    b750:	80 93 3e 02 	sts	0x023E, r24
		       break;     
		  }//EndSwitch	 
    return Result;
}
    b754:	80 91 3e 02 	lds	r24, 0x023E
    b758:	64 96       	adiw	r28, 0x14	; 20
    b75a:	0f b6       	in	r0, 0x3f	; 63
    b75c:	f8 94       	cli
    b75e:	de bf       	out	0x3e, r29	; 62
    b760:	0f be       	out	0x3f, r0	; 63
    b762:	cd bf       	out	0x3d, r28	; 61
    b764:	cf 91       	pop	r28
    b766:	df 91       	pop	r29
    b768:	1f 91       	pop	r17
    b76a:	0f 91       	pop	r16
    b76c:	ff 90       	pop	r15
    b76e:	08 95       	ret

0000b770 <DisplayStandaloneSequence>:
	 i++;
     _delay_ms(6500);
  return Result;
}

void DisplayStandaloneSequence(char x,char y, char PoolingSequence){
    b770:	df 93       	push	r29
    b772:	cf 93       	push	r28
    b774:	cd b7       	in	r28, 0x3d	; 61
    b776:	de b7       	in	r29, 0x3e	; 62
    b778:	28 97       	sbiw	r28, 0x08	; 8
    b77a:	0f b6       	in	r0, 0x3f	; 63
    b77c:	f8 94       	cli
    b77e:	de bf       	out	0x3e, r29	; 62
    b780:	0f be       	out	0x3f, r0	; 63
    b782:	cd bf       	out	0x3d, r28	; 61
    b784:	58 2f       	mov	r21, r24
	 MapSequence[3]='/';
	 MapSequence[4]='-';
	 MapSequence[5]=164;//0x5C;
	 MapSequence[6]='|';
	 MapSequence[7]='/';
	 if (IsPoolingRestarted==False)lcd_put(x,y,MapSequence[(PoolingSequence%8)]);     
    b786:	80 91 83 01 	lds	r24, 0x0183
    b78a:	88 23       	and	r24, r24
    b78c:	a1 f4       	brne	.+40     	; 0xb7b6 <DisplayStandaloneSequence+0x46>

void DisplayStandaloneSequence(char x,char y, char PoolingSequence){
     char MapSequence[8];

     //sprintf_P(MapSequence,PSTR("-\|/-|/"));
	 MapSequence[0]='-';
    b78e:	3d e2       	ldi	r19, 0x2D	; 45
    b790:	39 83       	std	Y+1, r19	; 0x01
	 MapSequence[1]='`';//0x5C;
    b792:	80 e6       	ldi	r24, 0x60	; 96
    b794:	8a 83       	std	Y+2, r24	; 0x02
	 MapSequence[2]='|';
    b796:	2c e7       	ldi	r18, 0x7C	; 124
    b798:	2b 83       	std	Y+3, r18	; 0x03
	 MapSequence[3]='/';
    b79a:	9f e2       	ldi	r25, 0x2F	; 47
    b79c:	9c 83       	std	Y+4, r25	; 0x04
	 MapSequence[4]='-';
    b79e:	3d 83       	std	Y+5, r19	; 0x05
	 MapSequence[5]=164;//0x5C;
    b7a0:	84 ea       	ldi	r24, 0xA4	; 164
    b7a2:	8e 83       	std	Y+6, r24	; 0x06
	 MapSequence[6]='|';
    b7a4:	2f 83       	std	Y+7, r18	; 0x07
	 MapSequence[7]='/';
    b7a6:	98 87       	std	Y+8, r25	; 0x08
	 if (IsPoolingRestarted==False)lcd_put(x,y,MapSequence[(PoolingSequence%8)]);     
    b7a8:	47 70       	andi	r20, 0x07	; 7
    b7aa:	fe 01       	movw	r30, r28
    b7ac:	e4 0f       	add	r30, r20
    b7ae:	f1 1d       	adc	r31, r1
    b7b0:	85 2f       	mov	r24, r21
    b7b2:	41 81       	ldd	r20, Z+1	; 0x01
    b7b4:	08 c0       	rjmp	.+16     	; 0xb7c6 <DisplayStandaloneSequence+0x56>
	 else if (IsPoolingRestarted==True){
    b7b6:	80 91 83 01 	lds	r24, 0x0183
    b7ba:	81 30       	cpi	r24, 0x01	; 1
    b7bc:	31 f4       	brne	.+12     	; 0xb7ca <DisplayStandaloneSequence+0x5a>
	          IsPoolingRestarted=False;
    b7be:	10 92 83 01 	sts	0x0183, r1
	          lcd_put(x,y,'X');     
    b7c2:	85 2f       	mov	r24, r21
    b7c4:	48 e5       	ldi	r20, 0x58	; 88
    b7c6:	0e 94 2c a5 	call	0x14a58	; 0x14a58 <lcd_put>
			  }

}
    b7ca:	28 96       	adiw	r28, 0x08	; 8
    b7cc:	0f b6       	in	r0, 0x3f	; 63
    b7ce:	f8 94       	cli
    b7d0:	de bf       	out	0x3e, r29	; 62
    b7d2:	0f be       	out	0x3f, r0	; 63
    b7d4:	cd bf       	out	0x3d, r28	; 61
    b7d6:	cf 91       	pop	r28
    b7d8:	df 91       	pop	r29
    b7da:	08 95       	ret

0000b7dc <FSettingPumpPooling>:
	      break;
	 }
     return Result;
}

char FSettingPumpPooling(){//Parameter: PumpCount,
    b7dc:	ef 92       	push	r14
    b7de:	ff 92       	push	r15
    b7e0:	0f 93       	push	r16
    b7e2:	1f 93       	push	r17
    b7e4:	df 93       	push	r29
    b7e6:	cf 93       	push	r28
    b7e8:	cd b7       	in	r28, 0x3d	; 61
    b7ea:	de b7       	in	r29, 0x3e	; 62
    b7ec:	6a 97       	sbiw	r28, 0x1a	; 26
    b7ee:	0f b6       	in	r0, 0x3f	; 63
    b7f0:	f8 94       	cli
    b7f2:	de bf       	out	0x3e, r29	; 62
    b7f4:	0f be       	out	0x3f, r0	; 63
    b7f6:	cd bf       	out	0x3d, r28	; 61
static char stPumpPooling=ppInitMenu;
	   char i,lcdteks[20];
	   char KeyChar,Addr=0,PPoolingSetting[6];
     
	 Result=MENU_NONE;
     switch(stPumpPooling){
    b7f8:	80 91 1b 02 	lds	r24, 0x021B
    b7fc:	82 30       	cpi	r24, 0x02	; 2
    b7fe:	09 f4       	brne	.+2      	; 0xb802 <FSettingPumpPooling+0x26>
    b800:	18 c1       	rjmp	.+560    	; 0xba32 <FSettingPumpPooling+0x256>
    b802:	83 30       	cpi	r24, 0x03	; 3
    b804:	30 f4       	brcc	.+12     	; 0xb812 <FSettingPumpPooling+0x36>
    b806:	88 23       	and	r24, r24
    b808:	59 f0       	breq	.+22     	; 0xb820 <FSettingPumpPooling+0x44>
    b80a:	81 30       	cpi	r24, 0x01	; 1
    b80c:	09 f0       	breq	.+2      	; 0xb810 <FSettingPumpPooling+0x34>
    b80e:	ed c1       	rjmp	.+986    	; 0xbbea <FSettingPumpPooling+0x40e>
    b810:	06 c1       	rjmp	.+524    	; 0xba1e <FSettingPumpPooling+0x242>
    b812:	83 30       	cpi	r24, 0x03	; 3
    b814:	09 f4       	brne	.+2      	; 0xb818 <FSettingPumpPooling+0x3c>
    b816:	da c1       	rjmp	.+948    	; 0xbbcc <FSettingPumpPooling+0x3f0>
    b818:	84 30       	cpi	r24, 0x04	; 4
    b81a:	09 f0       	breq	.+2      	; 0xb81e <FSettingPumpPooling+0x42>
    b81c:	e6 c1       	rjmp	.+972    	; 0xbbea <FSettingPumpPooling+0x40e>
    b81e:	e1 c1       	rjmp	.+962    	; 0xbbe2 <FSettingPumpPooling+0x406>
	 case ppInitMenu:
          lcd_clear();
    b820:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
    b824:	00 e0       	ldi	r16, 0x00	; 0
    b826:	10 e0       	ldi	r17, 0x00	; 0
		  for (i=0;i<6;i++){
		      PPoolingSetting[i]=eeprom_read_byte(&DefPoolingPumpMax+i);
    b828:	7e 01       	movw	r14, r28
    b82a:	08 94       	sec
    b82c:	e1 1c       	adc	r14, r1
    b82e:	f1 1c       	adc	r15, r1
    b830:	c8 01       	movw	r24, r16
    b832:	8b 5b       	subi	r24, 0xBB	; 187
    b834:	9e 4f       	sbci	r25, 0xFE	; 254
    b836:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
    b83a:	f7 01       	movw	r30, r14
    b83c:	e0 0f       	add	r30, r16
    b83e:	f1 1f       	adc	r31, r17
    b840:	80 83       	st	Z, r24
    b842:	0f 5f       	subi	r16, 0xFF	; 255
    b844:	1f 4f       	sbci	r17, 0xFF	; 255
     
	 Result=MENU_NONE;
     switch(stPumpPooling){
	 case ppInitMenu:
          lcd_clear();
		  for (i=0;i<6;i++){
    b846:	06 30       	cpi	r16, 0x06	; 6
    b848:	11 05       	cpc	r17, r1
    b84a:	91 f7       	brne	.-28     	; 0xb830 <FSettingPumpPooling+0x54>
		      PPoolingSetting[i]=eeprom_read_byte(&DefPoolingPumpMax+i);
		  }

		  sprintf_P(lcdteks,PSTR("1.MaxPump:%d"),PPoolingSetting[0]);lcd_print(1,1,lcdteks);
    b84c:	00 d0       	rcall	.+0      	; 0xb84e <FSettingPumpPooling+0x72>
    b84e:	00 d0       	rcall	.+0      	; 0xb850 <FSettingPumpPooling+0x74>
    b850:	00 d0       	rcall	.+0      	; 0xb852 <FSettingPumpPooling+0x76>
    b852:	ed b7       	in	r30, 0x3d	; 61
    b854:	fe b7       	in	r31, 0x3e	; 62
    b856:	31 96       	adiw	r30, 0x01	; 1
    b858:	8e 01       	movw	r16, r28
    b85a:	09 5f       	subi	r16, 0xF9	; 249
    b85c:	1f 4f       	sbci	r17, 0xFF	; 255
    b85e:	ad b7       	in	r26, 0x3d	; 61
    b860:	be b7       	in	r27, 0x3e	; 62
    b862:	12 96       	adiw	r26, 0x02	; 2
    b864:	1c 93       	st	X, r17
    b866:	0e 93       	st	-X, r16
    b868:	11 97       	sbiw	r26, 0x01	; 1
    b86a:	8f e2       	ldi	r24, 0x2F	; 47
    b86c:	9f e0       	ldi	r25, 0x0F	; 15
    b86e:	93 83       	std	Z+3, r25	; 0x03
    b870:	82 83       	std	Z+2, r24	; 0x02
    b872:	89 81       	ldd	r24, Y+1	; 0x01
    b874:	84 83       	std	Z+4, r24	; 0x04
    b876:	15 82       	std	Z+5, r1	; 0x05
    b878:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
    b87c:	ed b7       	in	r30, 0x3d	; 61
    b87e:	fe b7       	in	r31, 0x3e	; 62
    b880:	36 96       	adiw	r30, 0x06	; 6
    b882:	0f b6       	in	r0, 0x3f	; 63
    b884:	f8 94       	cli
    b886:	fe bf       	out	0x3e, r31	; 62
    b888:	0f be       	out	0x3f, r0	; 63
    b88a:	ed bf       	out	0x3d, r30	; 61
    b88c:	81 e0       	ldi	r24, 0x01	; 1
    b88e:	61 e0       	ldi	r22, 0x01	; 1
    b890:	a8 01       	movw	r20, r16
    b892:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
          sprintf_P(lcdteks,PSTR("2.nNoPump:%d"),PPoolingSetting[1]);lcd_print(2,1,lcdteks);
    b896:	00 d0       	rcall	.+0      	; 0xb898 <FSettingPumpPooling+0xbc>
    b898:	00 d0       	rcall	.+0      	; 0xb89a <FSettingPumpPooling+0xbe>
    b89a:	00 d0       	rcall	.+0      	; 0xb89c <FSettingPumpPooling+0xc0>
    b89c:	ed b7       	in	r30, 0x3d	; 61
    b89e:	fe b7       	in	r31, 0x3e	; 62
    b8a0:	31 96       	adiw	r30, 0x01	; 1
    b8a2:	ad b7       	in	r26, 0x3d	; 61
    b8a4:	be b7       	in	r27, 0x3e	; 62
    b8a6:	12 96       	adiw	r26, 0x02	; 2
    b8a8:	1c 93       	st	X, r17
    b8aa:	0e 93       	st	-X, r16
    b8ac:	11 97       	sbiw	r26, 0x01	; 1
    b8ae:	82 e2       	ldi	r24, 0x22	; 34
    b8b0:	9f e0       	ldi	r25, 0x0F	; 15
    b8b2:	93 83       	std	Z+3, r25	; 0x03
    b8b4:	82 83       	std	Z+2, r24	; 0x02
    b8b6:	8a 81       	ldd	r24, Y+2	; 0x02
    b8b8:	84 83       	std	Z+4, r24	; 0x04
    b8ba:	15 82       	std	Z+5, r1	; 0x05
    b8bc:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
    b8c0:	ed b7       	in	r30, 0x3d	; 61
    b8c2:	fe b7       	in	r31, 0x3e	; 62
    b8c4:	36 96       	adiw	r30, 0x06	; 6
    b8c6:	0f b6       	in	r0, 0x3f	; 63
    b8c8:	f8 94       	cli
    b8ca:	fe bf       	out	0x3e, r31	; 62
    b8cc:	0f be       	out	0x3f, r0	; 63
    b8ce:	ed bf       	out	0x3d, r30	; 61
    b8d0:	82 e0       	ldi	r24, 0x02	; 2
    b8d2:	61 e0       	ldi	r22, 0x01	; 1
    b8d4:	a8 01       	movw	r20, r16
    b8d6:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
          sprintf_P(lcdteks,PSTR("3.TrySend:%d"),PPoolingSetting[2]);lcd_print(3,1,lcdteks);
    b8da:	00 d0       	rcall	.+0      	; 0xb8dc <FSettingPumpPooling+0x100>
    b8dc:	00 d0       	rcall	.+0      	; 0xb8de <FSettingPumpPooling+0x102>
    b8de:	00 d0       	rcall	.+0      	; 0xb8e0 <FSettingPumpPooling+0x104>
    b8e0:	ed b7       	in	r30, 0x3d	; 61
    b8e2:	fe b7       	in	r31, 0x3e	; 62
    b8e4:	31 96       	adiw	r30, 0x01	; 1
    b8e6:	ad b7       	in	r26, 0x3d	; 61
    b8e8:	be b7       	in	r27, 0x3e	; 62
    b8ea:	12 96       	adiw	r26, 0x02	; 2
    b8ec:	1c 93       	st	X, r17
    b8ee:	0e 93       	st	-X, r16
    b8f0:	11 97       	sbiw	r26, 0x01	; 1
    b8f2:	85 e1       	ldi	r24, 0x15	; 21
    b8f4:	9f e0       	ldi	r25, 0x0F	; 15
    b8f6:	93 83       	std	Z+3, r25	; 0x03
    b8f8:	82 83       	std	Z+2, r24	; 0x02
    b8fa:	8b 81       	ldd	r24, Y+3	; 0x03
    b8fc:	84 83       	std	Z+4, r24	; 0x04
    b8fe:	15 82       	std	Z+5, r1	; 0x05
    b900:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
    b904:	ed b7       	in	r30, 0x3d	; 61
    b906:	fe b7       	in	r31, 0x3e	; 62
    b908:	36 96       	adiw	r30, 0x06	; 6
    b90a:	0f b6       	in	r0, 0x3f	; 63
    b90c:	f8 94       	cli
    b90e:	fe bf       	out	0x3e, r31	; 62
    b910:	0f be       	out	0x3f, r0	; 63
    b912:	ed bf       	out	0x3d, r30	; 61
    b914:	83 e0       	ldi	r24, 0x03	; 3
    b916:	61 e0       	ldi	r22, 0x01	; 1
    b918:	a8 01       	movw	r20, r16
    b91a:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
          sprintf_P(lcdteks,PSTR("4.TimPool:%d"),PPoolingSetting[3]);lcd_print(4,1,lcdteks);
    b91e:	00 d0       	rcall	.+0      	; 0xb920 <FSettingPumpPooling+0x144>
    b920:	00 d0       	rcall	.+0      	; 0xb922 <FSettingPumpPooling+0x146>
    b922:	00 d0       	rcall	.+0      	; 0xb924 <FSettingPumpPooling+0x148>
    b924:	ed b7       	in	r30, 0x3d	; 61
    b926:	fe b7       	in	r31, 0x3e	; 62
    b928:	31 96       	adiw	r30, 0x01	; 1
    b92a:	ad b7       	in	r26, 0x3d	; 61
    b92c:	be b7       	in	r27, 0x3e	; 62
    b92e:	12 96       	adiw	r26, 0x02	; 2
    b930:	1c 93       	st	X, r17
    b932:	0e 93       	st	-X, r16
    b934:	11 97       	sbiw	r26, 0x01	; 1
    b936:	88 e0       	ldi	r24, 0x08	; 8
    b938:	9f e0       	ldi	r25, 0x0F	; 15
    b93a:	93 83       	std	Z+3, r25	; 0x03
    b93c:	82 83       	std	Z+2, r24	; 0x02
    b93e:	8c 81       	ldd	r24, Y+4	; 0x04
    b940:	84 83       	std	Z+4, r24	; 0x04
    b942:	15 82       	std	Z+5, r1	; 0x05
    b944:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
    b948:	ed b7       	in	r30, 0x3d	; 61
    b94a:	fe b7       	in	r31, 0x3e	; 62
    b94c:	36 96       	adiw	r30, 0x06	; 6
    b94e:	0f b6       	in	r0, 0x3f	; 63
    b950:	f8 94       	cli
    b952:	fe bf       	out	0x3e, r31	; 62
    b954:	0f be       	out	0x3f, r0	; 63
    b956:	ed bf       	out	0x3d, r30	; 61
    b958:	84 e0       	ldi	r24, 0x04	; 4
    b95a:	61 e0       	ldi	r22, 0x01	; 1
    b95c:	a8 01       	movw	r20, r16
    b95e:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
          sprintf_P(lcdteks,PSTR("5.Dly:%d"),PPoolingSetting[4]);lcd_print(1,13,lcdteks);
    b962:	00 d0       	rcall	.+0      	; 0xb964 <FSettingPumpPooling+0x188>
    b964:	00 d0       	rcall	.+0      	; 0xb966 <FSettingPumpPooling+0x18a>
    b966:	00 d0       	rcall	.+0      	; 0xb968 <FSettingPumpPooling+0x18c>
    b968:	ed b7       	in	r30, 0x3d	; 61
    b96a:	fe b7       	in	r31, 0x3e	; 62
    b96c:	31 96       	adiw	r30, 0x01	; 1
    b96e:	ad b7       	in	r26, 0x3d	; 61
    b970:	be b7       	in	r27, 0x3e	; 62
    b972:	12 96       	adiw	r26, 0x02	; 2
    b974:	1c 93       	st	X, r17
    b976:	0e 93       	st	-X, r16
    b978:	11 97       	sbiw	r26, 0x01	; 1
    b97a:	8f ef       	ldi	r24, 0xFF	; 255
    b97c:	9e e0       	ldi	r25, 0x0E	; 14
    b97e:	93 83       	std	Z+3, r25	; 0x03
    b980:	82 83       	std	Z+2, r24	; 0x02
    b982:	8d 81       	ldd	r24, Y+5	; 0x05
    b984:	84 83       	std	Z+4, r24	; 0x04
    b986:	15 82       	std	Z+5, r1	; 0x05
    b988:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
    b98c:	ed b7       	in	r30, 0x3d	; 61
    b98e:	fe b7       	in	r31, 0x3e	; 62
    b990:	36 96       	adiw	r30, 0x06	; 6
    b992:	0f b6       	in	r0, 0x3f	; 63
    b994:	f8 94       	cli
    b996:	fe bf       	out	0x3e, r31	; 62
    b998:	0f be       	out	0x3f, r0	; 63
    b99a:	ed bf       	out	0x3d, r30	; 61
    b99c:	81 e0       	ldi	r24, 0x01	; 1
    b99e:	6d e0       	ldi	r22, 0x0D	; 13
    b9a0:	a8 01       	movw	r20, r16
    b9a2:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
          sprintf_P(lcdteks,PSTR("6.Act:%d"),PPoolingSetting[5]);lcd_print(2,13,lcdteks);
    b9a6:	00 d0       	rcall	.+0      	; 0xb9a8 <FSettingPumpPooling+0x1cc>
    b9a8:	00 d0       	rcall	.+0      	; 0xb9aa <FSettingPumpPooling+0x1ce>
    b9aa:	00 d0       	rcall	.+0      	; 0xb9ac <FSettingPumpPooling+0x1d0>
    b9ac:	ed b7       	in	r30, 0x3d	; 61
    b9ae:	fe b7       	in	r31, 0x3e	; 62
    b9b0:	31 96       	adiw	r30, 0x01	; 1
    b9b2:	ad b7       	in	r26, 0x3d	; 61
    b9b4:	be b7       	in	r27, 0x3e	; 62
    b9b6:	12 96       	adiw	r26, 0x02	; 2
    b9b8:	1c 93       	st	X, r17
    b9ba:	0e 93       	st	-X, r16
    b9bc:	11 97       	sbiw	r26, 0x01	; 1
    b9be:	86 ef       	ldi	r24, 0xF6	; 246
    b9c0:	9e e0       	ldi	r25, 0x0E	; 14
    b9c2:	93 83       	std	Z+3, r25	; 0x03
    b9c4:	82 83       	std	Z+2, r24	; 0x02
    b9c6:	8e 81       	ldd	r24, Y+6	; 0x06
    b9c8:	84 83       	std	Z+4, r24	; 0x04
    b9ca:	15 82       	std	Z+5, r1	; 0x05
    b9cc:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
    b9d0:	ed b7       	in	r30, 0x3d	; 61
    b9d2:	fe b7       	in	r31, 0x3e	; 62
    b9d4:	36 96       	adiw	r30, 0x06	; 6
    b9d6:	0f b6       	in	r0, 0x3f	; 63
    b9d8:	f8 94       	cli
    b9da:	fe bf       	out	0x3e, r31	; 62
    b9dc:	0f be       	out	0x3f, r0	; 63
    b9de:	ed bf       	out	0x3d, r30	; 61
    b9e0:	82 e0       	ldi	r24, 0x02	; 2
    b9e2:	6d e0       	ldi	r22, 0x0D	; 13
    b9e4:	a8 01       	movw	r20, r16
    b9e6:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
          sprintf_P(lcdteks,PSTR("[*]Exit"));lcd_print(4,13,lcdteks);
    b9ea:	00 d0       	rcall	.+0      	; 0xb9ec <FSettingPumpPooling+0x210>
    b9ec:	00 d0       	rcall	.+0      	; 0xb9ee <FSettingPumpPooling+0x212>
    b9ee:	ad b7       	in	r26, 0x3d	; 61
    b9f0:	be b7       	in	r27, 0x3e	; 62
    b9f2:	12 96       	adiw	r26, 0x02	; 2
    b9f4:	1c 93       	st	X, r17
    b9f6:	0e 93       	st	-X, r16
    b9f8:	11 97       	sbiw	r26, 0x01	; 1
    b9fa:	8e ee       	ldi	r24, 0xEE	; 238
    b9fc:	9e e0       	ldi	r25, 0x0E	; 14
    b9fe:	14 96       	adiw	r26, 0x04	; 4
    ba00:	9c 93       	st	X, r25
    ba02:	8e 93       	st	-X, r24
    ba04:	13 97       	sbiw	r26, 0x03	; 3
    ba06:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
    ba0a:	0f 90       	pop	r0
    ba0c:	0f 90       	pop	r0
    ba0e:	0f 90       	pop	r0
    ba10:	0f 90       	pop	r0
    ba12:	84 e0       	ldi	r24, 0x04	; 4
    ba14:	6d e0       	ldi	r22, 0x0D	; 13
    ba16:	a8 01       	movw	r20, r16
    ba18:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
    ba1c:	08 c0       	rjmp	.+16     	; 0xba2e <FSettingPumpPooling+0x252>

          stPumpPooling=ppPoolingSettingInput;
	      break;
     case ppDisplaySequence:
          IsNewPoolingSequence=False;
    ba1e:	10 92 81 01 	sts	0x0181, r1
		  DisplayStandaloneSequence(3,14,iSequencePooling);
    ba22:	83 e0       	ldi	r24, 0x03	; 3
    ba24:	6e e0       	ldi	r22, 0x0E	; 14
    ba26:	40 91 80 01 	lds	r20, 0x0180
    ba2a:	0e 94 b8 5b 	call	0xb770	; 0xb770 <DisplayStandaloneSequence>
          stPumpPooling=ppPoolingSettingInput;
    ba2e:	82 e0       	ldi	r24, 0x02	; 2
    ba30:	ca c0       	rjmp	.+404    	; 0xbbc6 <FSettingPumpPooling+0x3ea>
	      break;
     case ppPoolingSettingInput:
	      if(IsNewPoolingSequence==True)stPumpPooling=ppDisplaySequence;
    ba32:	80 91 81 01 	lds	r24, 0x0181
    ba36:	81 30       	cpi	r24, 0x01	; 1
    ba38:	11 f4       	brne	.+4      	; 0xba3e <FSettingPumpPooling+0x262>
    ba3a:	80 93 1b 02 	sts	0x021B, r24

          KeyChar=_key_btn(_key_scan(1));
    ba3e:	81 e0       	ldi	r24, 0x01	; 1
    ba40:	0e 94 58 a6 	call	0x14cb0	; 0x14cb0 <_key_scan>
    ba44:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <_key_btn>
		  if ((KeyChar>='1')&&(KeyChar<='6')){
    ba48:	08 2f       	mov	r16, r24
    ba4a:	01 53       	subi	r16, 0x31	; 49
    ba4c:	06 30       	cpi	r16, 0x06	; 6
    ba4e:	10 f0       	brcs	.+4      	; 0xba54 <FSettingPumpPooling+0x278>
    ba50:	00 e0       	ldi	r16, 0x00	; 0
    ba52:	04 c0       	rjmp	.+8      	; 0xba5c <FSettingPumpPooling+0x280>
		      Addr=KeyChar-'1';
			  TimSend=0;
    ba54:	10 92 fa 0c 	sts	0x0CFA, r1
			  IsStandaloneAcknoledge=False;
    ba58:	10 92 82 01 	sts	0x0182, r1
          }
		  switch(KeyChar){
    ba5c:	83 33       	cpi	r24, 0x33	; 51
    ba5e:	09 f4       	brne	.+2      	; 0xba62 <FSettingPumpPooling+0x286>
    ba60:	58 c0       	rjmp	.+176    	; 0xbb12 <FSettingPumpPooling+0x336>
    ba62:	84 33       	cpi	r24, 0x34	; 52
    ba64:	40 f4       	brcc	.+16     	; 0xba76 <FSettingPumpPooling+0x29a>
    ba66:	81 33       	cpi	r24, 0x31	; 49
    ba68:	81 f0       	breq	.+32     	; 0xba8a <FSettingPumpPooling+0x2ae>
    ba6a:	82 33       	cpi	r24, 0x32	; 50
    ba6c:	b0 f5       	brcc	.+108    	; 0xbada <FSettingPumpPooling+0x2fe>
    ba6e:	8a 32       	cpi	r24, 0x2A	; 42
    ba70:	09 f0       	breq	.+2      	; 0xba74 <FSettingPumpPooling+0x298>
    ba72:	bb c0       	rjmp	.+374    	; 0xbbea <FSettingPumpPooling+0x40e>
    ba74:	a7 c0       	rjmp	.+334    	; 0xbbc4 <FSettingPumpPooling+0x3e8>
    ba76:	85 33       	cpi	r24, 0x35	; 53
    ba78:	09 f4       	brne	.+2      	; 0xba7c <FSettingPumpPooling+0x2a0>
    ba7a:	7c c0       	rjmp	.+248    	; 0xbb74 <FSettingPumpPooling+0x398>
    ba7c:	85 33       	cpi	r24, 0x35	; 53
    ba7e:	08 f4       	brcc	.+2      	; 0xba82 <FSettingPumpPooling+0x2a6>
    ba80:	6a c0       	rjmp	.+212    	; 0xbb56 <FSettingPumpPooling+0x37a>
    ba82:	86 33       	cpi	r24, 0x36	; 54
    ba84:	09 f0       	breq	.+2      	; 0xba88 <FSettingPumpPooling+0x2ac>
    ba86:	b1 c0       	rjmp	.+354    	; 0xbbea <FSettingPumpPooling+0x40e>
    ba88:	84 c0       	rjmp	.+264    	; 0xbb92 <FSettingPumpPooling+0x3b6>
		  case '1'://MaxPump
		       PPoolingSetting[Addr]=((PPoolingSetting[Addr]+1)%17);
    ba8a:	20 2f       	mov	r18, r16
    ba8c:	30 e0       	ldi	r19, 0x00	; 0
    ba8e:	fe 01       	movw	r30, r28
    ba90:	31 96       	adiw	r30, 0x01	; 1
    ba92:	e2 0f       	add	r30, r18
    ba94:	f3 1f       	adc	r31, r19
    ba96:	80 81       	ld	r24, Z
    ba98:	90 e0       	ldi	r25, 0x00	; 0
    ba9a:	01 96       	adiw	r24, 0x01	; 1
    ba9c:	61 e1       	ldi	r22, 0x11	; 17
    ba9e:	70 e0       	ldi	r23, 0x00	; 0
    baa0:	0e 94 79 aa 	call	0x154f2	; 0x154f2 <__divmodhi4>
    baa4:	80 83       	st	Z, r24
			   if (PPoolingSetting[Addr]==0)PPoolingSetting[Addr]=1;
    baa6:	88 23       	and	r24, r24
    baa8:	11 f4       	brne	.+4      	; 0xbaae <FSettingPumpPooling+0x2d2>
    baaa:	81 e0       	ldi	r24, 0x01	; 1
    baac:	80 83       	st	Z, r24
			   //SendSlaveCommand(SC_SET_POOLING_MAX_PUMP,PPoolingSetting[Addr]);
			   SendPoolingCommand(SC_SET_POOLING_MAX_PUMP,PPoolingSetting[Addr]);
    baae:	2c 0f       	add	r18, r28
    bab0:	3d 1f       	adc	r19, r29
    bab2:	f9 01       	movw	r30, r18
    bab4:	11 81       	ldd	r17, Z+1	; 0x01
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
    bab6:	85 e1       	ldi	r24, 0x15	; 21
    bab8:	80 93 29 06 	sts	0x0629, r24
	 PoolMsg=plMsg;
    babc:	10 93 55 0c 	sts	0x0C55, r17
     IsControlPooling=True;
    bac0:	81 e0       	ldi	r24, 0x01	; 1
    bac2:	80 93 84 01 	sts	0x0184, r24
		       PPoolingSetting[Addr]=((PPoolingSetting[Addr]+1)%17);
			   if (PPoolingSetting[Addr]==0)PPoolingSetting[Addr]=1;
			   //SendSlaveCommand(SC_SET_POOLING_MAX_PUMP,PPoolingSetting[Addr]);
			   SendPoolingCommand(SC_SET_POOLING_MAX_PUMP,PPoolingSetting[Addr]);

			   eeprom_write_byte(&DefPoolingPumpMax+Addr,PPoolingSetting[Addr]);
    bac6:	80 2f       	mov	r24, r16
    bac8:	90 e0       	ldi	r25, 0x00	; 0
    baca:	8b 5b       	subi	r24, 0xBB	; 187
    bacc:	9e 4f       	sbci	r25, 0xFE	; 254
    bace:	61 2f       	mov	r22, r17
    bad0:	0e 94 3d ad 	call	0x15a7a	; 0x15a7a <__eewr_byte_m128>
			   PumpCountMax=PPoolingSetting[Addr];
    bad4:	10 93 5c 01 	sts	0x015C, r17
    bad8:	1a c0       	rjmp	.+52     	; 0xbb0e <FSettingPumpPooling+0x332>
			   //stPumpPooling=ppInitMenu;
			   stPumpPooling=ppWaitPoolingRespond;
		       break;
		  case '2'://NoPump
		       PPoolingSetting[Addr]=((PPoolingSetting[Addr]+1)%21);
    bada:	20 2f       	mov	r18, r16
    badc:	30 e0       	ldi	r19, 0x00	; 0
    bade:	fe 01       	movw	r30, r28
    bae0:	e2 0f       	add	r30, r18
    bae2:	f3 1f       	adc	r31, r19
    bae4:	81 81       	ldd	r24, Z+1	; 0x01
    bae6:	90 e0       	ldi	r25, 0x00	; 0
    bae8:	01 96       	adiw	r24, 0x01	; 1
    baea:	65 e1       	ldi	r22, 0x15	; 21
    baec:	70 e0       	ldi	r23, 0x00	; 0
    baee:	0e 94 79 aa 	call	0x154f2	; 0x154f2 <__divmodhi4>
    baf2:	68 2f       	mov	r22, r24
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
    baf4:	84 e1       	ldi	r24, 0x14	; 20
    baf6:	80 93 29 06 	sts	0x0629, r24
	 PoolMsg=plMsg;
    bafa:	60 93 55 0c 	sts	0x0C55, r22
     IsControlPooling=True;
    bafe:	81 e0       	ldi	r24, 0x01	; 1
    bb00:	80 93 84 01 	sts	0x0184, r24
		  case '2'://NoPump
		       PPoolingSetting[Addr]=((PPoolingSetting[Addr]+1)%21);
			   //SendSlaveCommand(SC_SET_POOLING_NO_PUMP_COUNT,PPoolingSetting[Addr]);
			   SendPoolingCommand(SC_SET_POOLING_NO_PUMP_COUNT,PPoolingSetting[Addr]);

			   eeprom_write_byte(&DefPoolingPumpMax+Addr,PPoolingSetting[Addr]);
    bb04:	c9 01       	movw	r24, r18
    bb06:	8b 5b       	subi	r24, 0xBB	; 187
    bb08:	9e 4f       	sbci	r25, 0xFE	; 254
    bb0a:	0e 94 3d ad 	call	0x15a7a	; 0x15a7a <__eewr_byte_m128>
			   //stPumpPooling=ppInitMenu;
			   stPumpPooling=ppWaitPoolingRespond;
    bb0e:	83 e0       	ldi	r24, 0x03	; 3
    bb10:	5a c0       	rjmp	.+180    	; 0xbbc6 <FSettingPumpPooling+0x3ea>
		       break;
		  case '3'://TrySend
		       PPoolingSetting[Addr]=((PPoolingSetting[Addr]+1)%21);
    bb12:	20 2f       	mov	r18, r16
    bb14:	30 e0       	ldi	r19, 0x00	; 0
    bb16:	fe 01       	movw	r30, r28
    bb18:	31 96       	adiw	r30, 0x01	; 1
    bb1a:	e2 0f       	add	r30, r18
    bb1c:	f3 1f       	adc	r31, r19
    bb1e:	80 81       	ld	r24, Z
    bb20:	90 e0       	ldi	r25, 0x00	; 0
    bb22:	01 96       	adiw	r24, 0x01	; 1
    bb24:	65 e1       	ldi	r22, 0x15	; 21
    bb26:	70 e0       	ldi	r23, 0x00	; 0
    bb28:	0e 94 79 aa 	call	0x154f2	; 0x154f2 <__divmodhi4>
    bb2c:	80 83       	st	Z, r24
			   if (PPoolingSetting[Addr]==0)PPoolingSetting[Addr]=1;
    bb2e:	88 23       	and	r24, r24
    bb30:	11 f4       	brne	.+4      	; 0xbb36 <FSettingPumpPooling+0x35a>
    bb32:	81 e0       	ldi	r24, 0x01	; 1
    bb34:	80 83       	st	Z, r24
			   //SendSlaveCommand(SC_SET_POOLING_SEND,PPoolingSetting[Addr]);
			   SendPoolingCommand(SC_SET_POOLING_SEND,PPoolingSetting[Addr]);
    bb36:	2c 0f       	add	r18, r28
    bb38:	3d 1f       	adc	r19, r29
    bb3a:	d9 01       	movw	r26, r18
    bb3c:	11 96       	adiw	r26, 0x01	; 1
    bb3e:	6c 91       	ld	r22, X
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
    bb40:	86 e1       	ldi	r24, 0x16	; 22
    bb42:	80 93 29 06 	sts	0x0629, r24
	 PoolMsg=plMsg;
    bb46:	60 93 55 0c 	sts	0x0C55, r22
     IsControlPooling=True;
    bb4a:	81 e0       	ldi	r24, 0x01	; 1
    bb4c:	80 93 84 01 	sts	0x0184, r24
		       PPoolingSetting[Addr]=((PPoolingSetting[Addr]+1)%21);
			   if (PPoolingSetting[Addr]==0)PPoolingSetting[Addr]=1;
			   //SendSlaveCommand(SC_SET_POOLING_SEND,PPoolingSetting[Addr]);
			   SendPoolingCommand(SC_SET_POOLING_SEND,PPoolingSetting[Addr]);

			   eeprom_write_byte(&DefPoolingPumpMax+Addr,PPoolingSetting[Addr]);
    bb50:	80 2f       	mov	r24, r16
    bb52:	90 e0       	ldi	r25, 0x00	; 0
    bb54:	d8 cf       	rjmp	.-80     	; 0xbb06 <FSettingPumpPooling+0x32a>
			   //stPumpPooling=ppInitMenu;
			   stPumpPooling=ppWaitPoolingRespond;
		       break;
		  case '4'://TimPool
		       PPoolingSetting[Addr]=((PPoolingSetting[Addr]+1)%21);
    bb56:	20 2f       	mov	r18, r16
    bb58:	30 e0       	ldi	r19, 0x00	; 0
    bb5a:	fe 01       	movw	r30, r28
    bb5c:	e2 0f       	add	r30, r18
    bb5e:	f3 1f       	adc	r31, r19
    bb60:	81 81       	ldd	r24, Z+1	; 0x01
    bb62:	90 e0       	ldi	r25, 0x00	; 0
    bb64:	01 96       	adiw	r24, 0x01	; 1
    bb66:	65 e1       	ldi	r22, 0x15	; 21
    bb68:	70 e0       	ldi	r23, 0x00	; 0
    bb6a:	0e 94 79 aa 	call	0x154f2	; 0x154f2 <__divmodhi4>
    bb6e:	68 2f       	mov	r22, r24
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
    bb70:	87 e1       	ldi	r24, 0x17	; 23
    bb72:	c1 cf       	rjmp	.-126    	; 0xbaf6 <FSettingPumpPooling+0x31a>
			   eeprom_write_byte(&DefPoolingPumpMax+Addr,PPoolingSetting[Addr]);
			   //stPumpPooling=ppInitMenu;
			   stPumpPooling=ppWaitPoolingRespond;
		       break;
		  case '5'://DelayNextPump
		       PPoolingSetting[Addr]=((PPoolingSetting[Addr]+1)%41); 
    bb74:	20 2f       	mov	r18, r16
    bb76:	30 e0       	ldi	r19, 0x00	; 0
    bb78:	fe 01       	movw	r30, r28
    bb7a:	e2 0f       	add	r30, r18
    bb7c:	f3 1f       	adc	r31, r19
    bb7e:	81 81       	ldd	r24, Z+1	; 0x01
    bb80:	90 e0       	ldi	r25, 0x00	; 0
    bb82:	01 96       	adiw	r24, 0x01	; 1
    bb84:	69 e2       	ldi	r22, 0x29	; 41
    bb86:	70 e0       	ldi	r23, 0x00	; 0
    bb88:	0e 94 79 aa 	call	0x154f2	; 0x154f2 <__divmodhi4>
    bb8c:	68 2f       	mov	r22, r24
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
    bb8e:	88 e1       	ldi	r24, 0x18	; 24
    bb90:	b2 cf       	rjmp	.-156    	; 0xbaf6 <FSettingPumpPooling+0x31a>
			   eeprom_write_byte(&DefPoolingPumpMax+Addr,PPoolingSetting[Addr]);
			   //stPumpPooling=ppInitMenu;
               stPumpPooling=ppWaitPoolingRespond;
		       break;
		  case '6'://ActivePump
		       PPoolingSetting[Addr]=((PPoolingSetting[Addr]+1)%(1+eeprom_read_byte(&DefPoolingPumpMax))); 			       
    bb92:	85 e4       	ldi	r24, 0x45	; 69
    bb94:	91 e0       	ldi	r25, 0x01	; 1
    bb96:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
			   eeprom_write_byte(&DefPoolingPumpMax+Addr,PPoolingSetting[Addr]);
    bb9a:	10 e0       	ldi	r17, 0x00	; 0
    bb9c:	fe 01       	movw	r30, r28
    bb9e:	e0 0f       	add	r30, r16
    bba0:	f1 1f       	adc	r31, r17
    bba2:	21 81       	ldd	r18, Z+1	; 0x01
    bba4:	30 e0       	ldi	r19, 0x00	; 0
    bba6:	68 2f       	mov	r22, r24
    bba8:	70 e0       	ldi	r23, 0x00	; 0
    bbaa:	6f 5f       	subi	r22, 0xFF	; 255
    bbac:	7f 4f       	sbci	r23, 0xFF	; 255
    bbae:	c9 01       	movw	r24, r18
    bbb0:	01 96       	adiw	r24, 0x01	; 1
    bbb2:	0e 94 79 aa 	call	0x154f2	; 0x154f2 <__divmodhi4>
    bbb6:	68 2f       	mov	r22, r24
    bbb8:	c8 01       	movw	r24, r16
    bbba:	8b 5b       	subi	r24, 0xBB	; 187
    bbbc:	9e 4f       	sbci	r25, 0xFE	; 254
    bbbe:	0e 94 3d ad 	call	0x15a7a	; 0x15a7a <__eewr_byte_m128>
    bbc2:	0c c0       	rjmp	.+24     	; 0xbbdc <FSettingPumpPooling+0x400>
			   stPumpPooling=ppInitMenu;
		       break;
		  case '*'://Exit
		       stPumpPooling=ppExitSettingPooling;		            
    bbc4:	84 e0       	ldi	r24, 0x04	; 4
    bbc6:	80 93 1b 02 	sts	0x021B, r24
    bbca:	0f c0       	rjmp	.+30     	; 0xbbea <FSettingPumpPooling+0x40e>
		       break;
		  }  
	      break;
     case ppWaitPoolingRespond:	    
	      if ((IsStandaloneAcknoledge==True)||(TimSend>5))stPumpPooling=ppInitMenu;
    bbcc:	80 91 82 01 	lds	r24, 0x0182
    bbd0:	81 30       	cpi	r24, 0x01	; 1
    bbd2:	21 f0       	breq	.+8      	; 0xbbdc <FSettingPumpPooling+0x400>
    bbd4:	80 91 fa 0c 	lds	r24, 0x0CFA
    bbd8:	86 30       	cpi	r24, 0x06	; 6
    bbda:	38 f0       	brcs	.+14     	; 0xbbea <FSettingPumpPooling+0x40e>
    bbdc:	10 92 1b 02 	sts	0x021B, r1
    bbe0:	04 c0       	rjmp	.+8      	; 0xbbea <FSettingPumpPooling+0x40e>
	      break;
     case ppExitSettingPooling:
          stPumpPooling=ppInitMenu;
    bbe2:	10 92 1b 02 	sts	0x021B, r1
    bbe6:	81 e0       	ldi	r24, 0x01	; 1
    bbe8:	01 c0       	rjmp	.+2      	; 0xbbec <FSettingPumpPooling+0x410>
    bbea:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
	      break;
    }
return Result;
}
    bbec:	6a 96       	adiw	r28, 0x1a	; 26
    bbee:	0f b6       	in	r0, 0x3f	; 63
    bbf0:	f8 94       	cli
    bbf2:	de bf       	out	0x3e, r29	; 62
    bbf4:	0f be       	out	0x3f, r0	; 63
    bbf6:	cd bf       	out	0x3d, r28	; 61
    bbf8:	cf 91       	pop	r28
    bbfa:	df 91       	pop	r29
    bbfc:	1f 91       	pop	r17
    bbfe:	0f 91       	pop	r16
    bc00:	ff 90       	pop	r15
    bc02:	ef 90       	pop	r14
    bc04:	08 95       	ret

0000bc06 <DisplayTicker>:
	case tiDelayLeft:
         if (TimTicker>TICKER_DELAY)stDisplayTicker=tiRight;	     
	     break;
	}
*/
    if (TimTicker>(TICKER_DELAY*2+1)){
    bc06:	80 91 90 01 	lds	r24, 0x0190
    bc0a:	86 31       	cpi	r24, 0x16	; 22
    bc0c:	38 f0       	brcs	.+14     	; 0xbc1c <DisplayTicker+0x16>
	    lcd_put(4, 1, '>');
    bc0e:	84 e0       	ldi	r24, 0x04	; 4
    bc10:	61 e0       	ldi	r22, 0x01	; 1
    bc12:	4e e3       	ldi	r20, 0x3E	; 62
    bc14:	0e 94 2c a5 	call	0x14a58	; 0x14a58 <lcd_put>
		TimTicker=0;
    bc18:	10 92 90 01 	sts	0x0190, r1
	}
    if (TimTicker==TICKER_DELAY){
    bc1c:	80 91 90 01 	lds	r24, 0x0190
    bc20:	8a 30       	cpi	r24, 0x0A	; 10
    bc22:	51 f4       	brne	.+20     	; 0xbc38 <DisplayTicker+0x32>
	    lcd_put(4, 1, '<');
    bc24:	84 e0       	ldi	r24, 0x04	; 4
    bc26:	61 e0       	ldi	r22, 0x01	; 1
    bc28:	4c e3       	ldi	r20, 0x3C	; 60
    bc2a:	0e 94 2c a5 	call	0x14a58	; 0x14a58 <lcd_put>
		TimTicker++;
    bc2e:	80 91 90 01 	lds	r24, 0x0190
    bc32:	8f 5f       	subi	r24, 0xFF	; 255
    bc34:	80 93 90 01 	sts	0x0190, r24
    bc38:	08 95       	ret

0000bc3a <DisplayIdle>:
	          lcd_put(x,y,'X');     
			  }

}

void DisplayIdle(){
    bc3a:	6f 92       	push	r6
    bc3c:	7f 92       	push	r7
    bc3e:	8f 92       	push	r8
    bc40:	9f 92       	push	r9
    bc42:	af 92       	push	r10
    bc44:	bf 92       	push	r11
    bc46:	cf 92       	push	r12
    bc48:	df 92       	push	r13
    bc4a:	ff 92       	push	r15
    bc4c:	0f 93       	push	r16
    bc4e:	1f 93       	push	r17
    bc50:	df 93       	push	r29
    bc52:	cf 93       	push	r28
    bc54:	cd b7       	in	r28, 0x3d	; 61
    bc56:	de b7       	in	r29, 0x3e	; 62
    bc58:	67 97       	sbiw	r28, 0x17	; 23
    bc5a:	0f b6       	in	r0, 0x3f	; 63
    bc5c:	f8 94       	cli
    bc5e:	de bf       	out	0x3e, r29	; 62
    bc60:	0f be       	out	0x3f, r0	; 63
    bc62:	cd bf       	out	0x3d, r28	; 61
static unsigned int iLoopDisplayIdle=0;
static char stDispIdle=diScan;
     char i,iDisp;
     char lcdteks[20],sFIP[3];

     iLoopDisplayIdle++;
    bc64:	80 91 82 02 	lds	r24, 0x0282
    bc68:	90 91 83 02 	lds	r25, 0x0283
    bc6c:	01 96       	adiw	r24, 0x01	; 1
    bc6e:	90 93 83 02 	sts	0x0283, r25
    bc72:	80 93 82 02 	sts	0x0282, r24
     //Setting DateTime ON

	if ((iLoopDisplayIdle%50)==0){
    bc76:	62 e3       	ldi	r22, 0x32	; 50
    bc78:	70 e0       	ldi	r23, 0x00	; 0
    bc7a:	0e 94 65 aa 	call	0x154ca	; 0x154ca <__udivmodhi4>
    bc7e:	89 2b       	or	r24, r25
    bc80:	09 f5       	brne	.+66     	; 0xbcc4 <DisplayIdle+0x8a>
	   if (IFType==IT_STANDALONE)DisplayPumpStatus();
    bc82:	80 91 00 01 	lds	r24, 0x0100
    bc86:	82 30       	cpi	r24, 0x02	; 2
    bc88:	11 f4       	brne	.+4      	; 0xbc8e <DisplayIdle+0x54>
    bc8a:	0e 94 8f 49 	call	0x931e	; 0x931e <DisplayPumpStatus>
	   if(eeprom_read_byte(&DefShowDateTime)) DisplayDateTime();
    bc8e:	87 e3       	ldi	r24, 0x37	; 55
    bc90:	90 e0       	ldi	r25, 0x00	; 0
    bc92:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
    bc96:	88 23       	and	r24, r24
    bc98:	19 f0       	breq	.+6      	; 0xbca0 <DisplayIdle+0x66>
    bc9a:	0e 94 cf 48 	call	0x919e	; 0x919e <DisplayDateTime>
    bc9e:	02 c0       	rjmp	.+4      	; 0xbca4 <DisplayIdle+0x6a>
       else DisplayTicker();
    bca0:	0e 94 03 5e 	call	0xbc06	; 0xbc06 <DisplayTicker>
	   //Display Standalone Sequnece
	   
	   if((IFType==IT_STANDALONE)&&(IsNewPoolingSequence==True)){
    bca4:	80 91 00 01 	lds	r24, 0x0100
    bca8:	82 30       	cpi	r24, 0x02	; 2
    bcaa:	61 f4       	brne	.+24     	; 0xbcc4 <DisplayIdle+0x8a>
    bcac:	80 91 81 01 	lds	r24, 0x0181
    bcb0:	81 30       	cpi	r24, 0x01	; 1
    bcb2:	41 f4       	brne	.+16     	; 0xbcc4 <DisplayIdle+0x8a>
	       IsNewPoolingSequence=False;
    bcb4:	10 92 81 01 	sts	0x0181, r1
		   DisplayStandaloneSequence(4,18,iSequencePooling);
    bcb8:	84 e0       	ldi	r24, 0x04	; 4
    bcba:	62 e1       	ldi	r22, 0x12	; 18
    bcbc:	40 91 80 01 	lds	r20, 0x0180
    bcc0:	0e 94 b8 5b 	call	0xb770	; 0xb770 <DisplayStandaloneSequence>

	 }
     //DisplayPumpStatus Standalone Mode

	 //Display Printing FIP
	 switch (stDispIdle){
    bcc4:	f0 90 81 02 	lds	r15, 0x0281
    bcc8:	ff 20       	and	r15, r15
    bcca:	29 f0       	breq	.+10     	; 0xbcd6 <DisplayIdle+0x9c>
    bccc:	81 e0       	ldi	r24, 0x01	; 1
    bcce:	f8 16       	cp	r15, r24
    bcd0:	09 f0       	breq	.+2      	; 0xbcd4 <DisplayIdle+0x9a>
    bcd2:	58 c0       	rjmp	.+176    	; 0xbd84 <DisplayIdle+0x14a>
    bcd4:	2f c0       	rjmp	.+94     	; 0xbd34 <DisplayIdle+0xfa>
	 case diScan:
	      if (IsBusyIdlePrinting==True){
    bcd6:	f0 90 b2 01 	lds	r15, 0x01B2
    bcda:	91 e0       	ldi	r25, 0x01	; 1
    bcdc:	f9 16       	cp	r15, r25
    bcde:	09 f0       	breq	.+2      	; 0xbce2 <DisplayIdle+0xa8>
    bce0:	51 c0       	rjmp	.+162    	; 0xbd84 <DisplayIdle+0x14a>
		       sprintf_P(lcdteks,PSTR("Printing FIP%s "),strFIP_ID);
    bce2:	00 d0       	rcall	.+0      	; 0xbce4 <DisplayIdle+0xaa>
    bce4:	00 d0       	rcall	.+0      	; 0xbce6 <DisplayIdle+0xac>
    bce6:	00 d0       	rcall	.+0      	; 0xbce8 <DisplayIdle+0xae>
    bce8:	ed b7       	in	r30, 0x3d	; 61
    bcea:	fe b7       	in	r31, 0x3e	; 62
    bcec:	31 96       	adiw	r30, 0x01	; 1
    bcee:	8e 01       	movw	r16, r28
    bcf0:	0c 5f       	subi	r16, 0xFC	; 252
    bcf2:	1f 4f       	sbci	r17, 0xFF	; 255
    bcf4:	ad b7       	in	r26, 0x3d	; 61
    bcf6:	be b7       	in	r27, 0x3e	; 62
    bcf8:	12 96       	adiw	r26, 0x02	; 2
    bcfa:	1c 93       	st	X, r17
    bcfc:	0e 93       	st	-X, r16
    bcfe:	11 97       	sbiw	r26, 0x01	; 1
    bd00:	83 e5       	ldi	r24, 0x53	; 83
    bd02:	9e e1       	ldi	r25, 0x1E	; 30
    bd04:	93 83       	std	Z+3, r25	; 0x03
    bd06:	82 83       	std	Z+2, r24	; 0x02
    bd08:	8b e3       	ldi	r24, 0x3B	; 59
    bd0a:	98 e0       	ldi	r25, 0x08	; 8
    bd0c:	95 83       	std	Z+5, r25	; 0x05
    bd0e:	84 83       	std	Z+4, r24	; 0x04
    bd10:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
			   lcd_print(3,1,lcdteks);
    bd14:	ed b7       	in	r30, 0x3d	; 61
    bd16:	fe b7       	in	r31, 0x3e	; 62
    bd18:	36 96       	adiw	r30, 0x06	; 6
    bd1a:	0f b6       	in	r0, 0x3f	; 63
    bd1c:	f8 94       	cli
    bd1e:	fe bf       	out	0x3e, r31	; 62
    bd20:	0f be       	out	0x3f, r0	; 63
    bd22:	ed bf       	out	0x3d, r30	; 61
    bd24:	83 e0       	ldi	r24, 0x03	; 3
    bd26:	61 e0       	ldi	r22, 0x01	; 1
    bd28:	a8 01       	movw	r20, r16
    bd2a:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
			   stDispIdle=diWaitNoBusy;
    bd2e:	f0 92 81 02 	sts	0x0281, r15
    bd32:	28 c0       	rjmp	.+80     	; 0xbd84 <DisplayIdle+0x14a>
		  }         
	      break;
     case diWaitNoBusy:
	      if (IsBusyIdlePrinting==False){
    bd34:	80 91 b2 01 	lds	r24, 0x01B2
    bd38:	88 23       	and	r24, r24
    bd3a:	21 f5       	brne	.+72     	; 0xbd84 <DisplayIdle+0x14a>
		       sprintf_P(lcdteks,PSTR("                    "));
    bd3c:	00 d0       	rcall	.+0      	; 0xbd3e <DisplayIdle+0x104>
    bd3e:	00 d0       	rcall	.+0      	; 0xbd40 <DisplayIdle+0x106>
    bd40:	8e 01       	movw	r16, r28
    bd42:	0c 5f       	subi	r16, 0xFC	; 252
    bd44:	1f 4f       	sbci	r17, 0xFF	; 255
    bd46:	ad b7       	in	r26, 0x3d	; 61
    bd48:	be b7       	in	r27, 0x3e	; 62
    bd4a:	12 96       	adiw	r26, 0x02	; 2
    bd4c:	1c 93       	st	X, r17
    bd4e:	0e 93       	st	-X, r16
    bd50:	11 97       	sbiw	r26, 0x01	; 1
    bd52:	8e e3       	ldi	r24, 0x3E	; 62
    bd54:	9e e1       	ldi	r25, 0x1E	; 30
    bd56:	14 96       	adiw	r26, 0x04	; 4
    bd58:	9c 93       	st	X, r25
    bd5a:	8e 93       	st	-X, r24
    bd5c:	13 97       	sbiw	r26, 0x03	; 3
    bd5e:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
			   lcd_print(3,1,lcdteks);
    bd62:	0f 90       	pop	r0
    bd64:	0f 90       	pop	r0
    bd66:	0f 90       	pop	r0
    bd68:	0f 90       	pop	r0
    bd6a:	83 e0       	ldi	r24, 0x03	; 3
    bd6c:	61 e0       	ldi	r22, 0x01	; 1
    bd6e:	a8 01       	movw	r20, r16
    bd70:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
			   stDispIdle=diScan;
    bd74:	10 92 81 02 	sts	0x0281, r1
			   if (nLocalAccount>0)IsViewFillingFIP=True;
    bd78:	80 91 8f 01 	lds	r24, 0x018F
    bd7c:	88 23       	and	r24, r24
    bd7e:	11 f0       	breq	.+4      	; 0xbd84 <DisplayIdle+0x14a>
    bd80:	f0 92 96 01 	sts	0x0196, r15
		  }
	      break;     
	 }
	 //Display Filling FIP
	 if (IsViewFillingFIP==True){
    bd84:	80 91 96 01 	lds	r24, 0x0196
    bd88:	81 30       	cpi	r24, 0x01	; 1
    bd8a:	09 f0       	breq	.+2      	; 0xbd8e <DisplayIdle+0x154>
    bd8c:	69 c0       	rjmp	.+210    	; 0xbe60 <DisplayIdle+0x226>
	     IsViewFillingFIP=False;
    bd8e:	10 92 96 01 	sts	0x0196, r1
		 if (nLocalAccount>0){
    bd92:	80 91 8f 01 	lds	r24, 0x018F
    bd96:	88 23       	and	r24, r24
    bd98:	09 f4       	brne	.+2      	; 0xbd9c <DisplayIdle+0x162>
    bd9a:	5c c0       	rjmp	.+184    	; 0xbe54 <DisplayIdle+0x21a>
		     lcd_printf(3,1,PSTR("@FIP:"));
    bd9c:	83 e0       	ldi	r24, 0x03	; 3
    bd9e:	61 e0       	ldi	r22, 0x01	; 1
    bda0:	48 e3       	ldi	r20, 0x38	; 56
    bda2:	5e e1       	ldi	r21, 0x1E	; 30
    bda4:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
    bda8:	ff 24       	eor	r15, r15
		     for (iDisp=0;iDisp<nLocalAccount;iDisp++){
			      //leadingZero(LocalAccountFIP[iDisp],sFIP);
				  sprintf_P(sFIP,PSTR("%.2d"),LocalAccountFIP[iDisp]);
    bdaa:	5e 01       	movw	r10, r28
    bdac:	08 94       	sec
    bdae:	a1 1c       	adc	r10, r1
    bdb0:	b1 1c       	adc	r11, r1
    bdb2:	b3 e3       	ldi	r27, 0x33	; 51
    bdb4:	6b 2e       	mov	r6, r27
    bdb6:	be e1       	ldi	r27, 0x1E	; 30
    bdb8:	7b 2e       	mov	r7, r27
			      sprintf_P(lcdteks,PSTR("#%s"),sFIP);
    bdba:	a4 e0       	ldi	r26, 0x04	; 4
    bdbc:	ca 2e       	mov	r12, r26
    bdbe:	d1 2c       	mov	r13, r1
    bdc0:	cc 0e       	add	r12, r28
    bdc2:	dd 1e       	adc	r13, r29
    bdc4:	ff e2       	ldi	r31, 0x2F	; 47
    bdc6:	8f 2e       	mov	r8, r31
    bdc8:	fe e1       	ldi	r31, 0x1E	; 30
    bdca:	9f 2e       	mov	r9, r31
    bdcc:	3d c0       	rjmp	.+122    	; 0xbe48 <DisplayIdle+0x20e>
	     IsViewFillingFIP=False;
		 if (nLocalAccount>0){
		     lcd_printf(3,1,PSTR("@FIP:"));
		     for (iDisp=0;iDisp<nLocalAccount;iDisp++){
			      //leadingZero(LocalAccountFIP[iDisp],sFIP);
				  sprintf_P(sFIP,PSTR("%.2d"),LocalAccountFIP[iDisp]);
    bdce:	0f 2d       	mov	r16, r15
    bdd0:	10 e0       	ldi	r17, 0x00	; 0
    bdd2:	00 d0       	rcall	.+0      	; 0xbdd4 <DisplayIdle+0x19a>
    bdd4:	00 d0       	rcall	.+0      	; 0xbdd6 <DisplayIdle+0x19c>
    bdd6:	00 d0       	rcall	.+0      	; 0xbdd8 <DisplayIdle+0x19e>
    bdd8:	ad b7       	in	r26, 0x3d	; 61
    bdda:	be b7       	in	r27, 0x3e	; 62
    bddc:	11 96       	adiw	r26, 0x01	; 1
    bdde:	ed b7       	in	r30, 0x3d	; 61
    bde0:	fe b7       	in	r31, 0x3e	; 62
    bde2:	b2 82       	std	Z+2, r11	; 0x02
    bde4:	a1 82       	std	Z+1, r10	; 0x01
    bde6:	13 96       	adiw	r26, 0x03	; 3
    bde8:	7c 92       	st	X, r7
    bdea:	6e 92       	st	-X, r6
    bdec:	12 97       	sbiw	r26, 0x02	; 2
    bdee:	f8 01       	movw	r30, r16
    bdf0:	e8 52       	subi	r30, 0x28	; 40
    bdf2:	fc 4f       	sbci	r31, 0xFC	; 252
    bdf4:	80 81       	ld	r24, Z
    bdf6:	14 96       	adiw	r26, 0x04	; 4
    bdf8:	8c 93       	st	X, r24
    bdfa:	14 97       	sbiw	r26, 0x04	; 4
    bdfc:	15 96       	adiw	r26, 0x05	; 5
    bdfe:	1c 92       	st	X, r1
    be00:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
			      sprintf_P(lcdteks,PSTR("#%s"),sFIP);
    be04:	ed b7       	in	r30, 0x3d	; 61
    be06:	fe b7       	in	r31, 0x3e	; 62
    be08:	31 96       	adiw	r30, 0x01	; 1
    be0a:	ad b7       	in	r26, 0x3d	; 61
    be0c:	be b7       	in	r27, 0x3e	; 62
    be0e:	12 96       	adiw	r26, 0x02	; 2
    be10:	dc 92       	st	X, r13
    be12:	ce 92       	st	-X, r12
    be14:	11 97       	sbiw	r26, 0x01	; 1
    be16:	93 82       	std	Z+3, r9	; 0x03
    be18:	82 82       	std	Z+2, r8	; 0x02
    be1a:	b5 82       	std	Z+5, r11	; 0x05
    be1c:	a4 82       	std	Z+4, r10	; 0x04
    be1e:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
			      lcd_print(3,6+(iDisp*3),lcdteks);
    be22:	ed b7       	in	r30, 0x3d	; 61
    be24:	fe b7       	in	r31, 0x3e	; 62
    be26:	36 96       	adiw	r30, 0x06	; 6
    be28:	0f b6       	in	r0, 0x3f	; 63
    be2a:	f8 94       	cli
    be2c:	fe bf       	out	0x3e, r31	; 62
    be2e:	0f be       	out	0x3f, r0	; 63
    be30:	ed bf       	out	0x3d, r30	; 61
    be32:	b8 01       	movw	r22, r16
    be34:	66 0f       	add	r22, r22
    be36:	77 1f       	adc	r23, r23
    be38:	60 0f       	add	r22, r16
    be3a:	71 1f       	adc	r23, r17
    be3c:	6a 5f       	subi	r22, 0xFA	; 250
    be3e:	83 e0       	ldi	r24, 0x03	; 3
    be40:	a6 01       	movw	r20, r12
    be42:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
	 //Display Filling FIP
	 if (IsViewFillingFIP==True){
	     IsViewFillingFIP=False;
		 if (nLocalAccount>0){
		     lcd_printf(3,1,PSTR("@FIP:"));
		     for (iDisp=0;iDisp<nLocalAccount;iDisp++){
    be46:	f3 94       	inc	r15
    be48:	80 91 8f 01 	lds	r24, 0x018F
    be4c:	f8 16       	cp	r15, r24
    be4e:	08 f4       	brcc	.+2      	; 0xbe52 <DisplayIdle+0x218>
    be50:	be cf       	rjmp	.-132    	; 0xbdce <DisplayIdle+0x194>
    be52:	06 c0       	rjmp	.+12     	; 0xbe60 <DisplayIdle+0x226>
				  sprintf_P(sFIP,PSTR("%.2d"),LocalAccountFIP[iDisp]);
			      sprintf_P(lcdteks,PSTR("#%s"),sFIP);
			      lcd_print(3,6+(iDisp*3),lcdteks);
		     }
		 }else{
		 lcd_printf(3,1,PSTR("                    "));
    be54:	83 e0       	ldi	r24, 0x03	; 3
    be56:	61 e0       	ldi	r22, 0x01	; 1
    be58:	4a e1       	ldi	r20, 0x1A	; 26
    be5a:	5e e1       	ldi	r21, 0x1E	; 30
    be5c:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		 }    
	 }
	 //Filling @FIP 
     if (IsCompleteFilling==True){
    be60:	80 91 a9 01 	lds	r24, 0x01A9
    be64:	81 30       	cpi	r24, 0x01	; 1
    be66:	c1 f4       	brne	.+48     	; 0xbe98 <DisplayIdle+0x25e>
	     IsCompleteFilling=False;
    be68:	10 92 a9 01 	sts	0x01A9, r1
	     if (nLocalAccount>0){
    be6c:	90 91 8f 01 	lds	r25, 0x018F
    be70:	99 23       	and	r25, r25
    be72:	91 f0       	breq	.+36     	; 0xbe98 <DisplayIdle+0x25e>
    be74:	e8 ed       	ldi	r30, 0xD8	; 216
    be76:	f3 e0       	ldi	r31, 0x03	; 3
			 for(i=0;i<nLocalAccount;i++){//Shift data
    be78:	29 2f       	mov	r18, r25
    be7a:	30 e0       	ldi	r19, 0x00	; 0
    be7c:	2e 0f       	add	r18, r30
    be7e:	3f 1f       	adc	r19, r31
    be80:	02 c0       	rjmp	.+4      	; 0xbe86 <DisplayIdle+0x24c>
			     LocalAccountFIP[i]=LocalAccountFIP[i+1];
    be82:	81 81       	ldd	r24, Z+1	; 0x01
    be84:	81 93       	st	Z+, r24
	 }
	 //Filling @FIP 
     if (IsCompleteFilling==True){
	     IsCompleteFilling=False;
	     if (nLocalAccount>0){
			 for(i=0;i<nLocalAccount;i++){//Shift data
    be86:	e2 17       	cp	r30, r18
    be88:	f3 07       	cpc	r31, r19
    be8a:	d9 f7       	brne	.-10     	; 0xbe82 <DisplayIdle+0x248>
			     LocalAccountFIP[i]=LocalAccountFIP[i+1];
			 }
			 nLocalAccount--;
    be8c:	91 50       	subi	r25, 0x01	; 1
    be8e:	90 93 8f 01 	sts	0x018F, r25
             IsViewFillingFIP=True; 
    be92:	81 e0       	ldi	r24, 0x01	; 1
    be94:	80 93 96 01 	sts	0x0196, r24
		 }
	 }
}
    be98:	67 96       	adiw	r28, 0x17	; 23
    be9a:	0f b6       	in	r0, 0x3f	; 63
    be9c:	f8 94       	cli
    be9e:	de bf       	out	0x3e, r29	; 62
    bea0:	0f be       	out	0x3f, r0	; 63
    bea2:	cd bf       	out	0x3d, r28	; 61
    bea4:	cf 91       	pop	r28
    bea6:	df 91       	pop	r29
    bea8:	1f 91       	pop	r17
    beaa:	0f 91       	pop	r16
    beac:	ff 90       	pop	r15
    beae:	df 90       	pop	r13
    beb0:	cf 90       	pop	r12
    beb2:	bf 90       	pop	r11
    beb4:	af 90       	pop	r10
    beb6:	9f 90       	pop	r9
    beb8:	8f 90       	pop	r8
    beba:	7f 90       	pop	r7
    bebc:	6f 90       	pop	r6
    bebe:	08 95       	ret

0000bec0 <systemMaster>:
	cbi(DDRB,2);sbi(PORTB,2);//MOSI Input
	cbi(DDRB,1);sbi(PORTB,1);//SCK  Input
}

void systemMaster(){
  	_spi_init(1, 0);         //Master
    bec0:	81 e0       	ldi	r24, 0x01	; 1
    bec2:	60 e0       	ldi	r22, 0x00	; 0
    bec4:	0e 94 c8 a6 	call	0x14d90	; 0x14d90 <_spi_init>
    _spi_enable(_SPI_SLAVE); //Enable SS 
    bec8:	81 e0       	ldi	r24, 0x01	; 1
    beca:	0e 94 db a6 	call	0x14db6	; 0x14db6 <_spi_enable>
	cbi(DDRB,3);sbi(PORTB,3);//MISO Input
    bece:	bb 98       	cbi	0x17, 3	; 23
    bed0:	c3 9a       	sbi	0x18, 3	; 24
	sbi(DDRB,2);             //MOSI Output
    bed2:	ba 9a       	sbi	0x17, 2	; 23
}
    bed4:	08 95       	ret

0000bed6 <systemSlave>:




void systemSlave(){
    _spi_enable(_SPI_NONE);	
    bed6:	80 e0       	ldi	r24, 0x00	; 0
    bed8:	0e 94 db a6 	call	0x14db6	; 0x14db6 <_spi_enable>
  	_spi_init(0, 1);         //Slave
    bedc:	80 e0       	ldi	r24, 0x00	; 0
    bede:	61 e0       	ldi	r22, 0x01	; 1
    bee0:	0e 94 c8 a6 	call	0x14d90	; 0x14d90 <_spi_init>
	sbi(DDRB,3);             //MISO Output
    bee4:	bb 9a       	sbi	0x17, 3	; 23
	sbi(DDRB,3);sbi(PORTB,3);//MISO Output
    bee6:	bb 9a       	sbi	0x17, 3	; 23
    bee8:	c3 9a       	sbi	0x18, 3	; 24
	cbi(DDRB,2);sbi(PORTB,2);//MOSI Input
    beea:	ba 98       	cbi	0x17, 2	; 23
    beec:	c2 9a       	sbi	0x18, 2	; 24
	cbi(DDRB,1);sbi(PORTB,1);//SCK  Input
    beee:	b9 98       	cbi	0x17, 1	; 23
    bef0:	c1 9a       	sbi	0x18, 1	; 24
}
    bef2:	08 95       	ret

0000bef4 <EDCSendByte>:
    _spi_enable(_SPI_SLAVE); //Enable SS 
	cbi(DDRB,3);sbi(PORTB,3);//MISO Input
	sbi(DDRB,2);             //MOSI Output
}

void EDCSendByte(char EDCData){
    bef4:	1f 93       	push	r17
    bef6:	18 2f       	mov	r17, r24
     systemMaster();	 
    bef8:	0e 94 60 5f 	call	0xbec0	; 0xbec0 <systemMaster>
     _spi(EDCData);
    befc:	81 2f       	mov	r24, r17
    befe:	0e 94 f2 a6 	call	0x14de4	; 0x14de4 <_spi>
     systemSlave();
    bf02:	0e 94 6b 5f 	call	0xbed6	; 0xbed6 <systemSlave>
}
    bf06:	1f 91       	pop	r17
    bf08:	08 95       	ret

0000bf0a <SendEDCMessage>:
     char Result;
	 Result=xLRC^DataIn;
     return(Result);
}

void SendEDCMessage(){
    bf0a:	cf 92       	push	r12
    bf0c:	df 92       	push	r13
    bf0e:	ef 92       	push	r14
    bf10:	ff 92       	push	r15
    bf12:	0f 93       	push	r16
    bf14:	1f 93       	push	r17
    bf16:	df 93       	push	r29
    bf18:	cf 93       	push	r28
    bf1a:	cd b7       	in	r28, 0x3d	; 61
    bf1c:	de b7       	in	r29, 0x3e	; 62
    bf1e:	ec 97       	sbiw	r28, 0x3c	; 60
    bf20:	0f b6       	in	r0, 0x3f	; 63
    bf22:	f8 94       	cli
    bf24:	de bf       	out	0x3e, r29	; 62
    bf26:	0f be       	out	0x3f, r0	; 63
    bf28:	cd bf       	out	0x3d, r28	; 61

     //GenerateData
	 //sprintf_P(strAmount,PSTR("%d"),100);//Testing Only
	 //AddZeroLead(strAmount,8);
	 //uart_printf(0,0,PSTR("StrStatus:"));uart_print(0,1,strStatus);
     sprintf_P(SerialEDC,PSTR("02%s%s%s%s%s%s%s"),strTranNo,strFIP_ID,strDescription,strPrice,strVolume,strAmount,strStatus);     
    bf2a:	8d b7       	in	r24, 0x3d	; 61
    bf2c:	9e b7       	in	r25, 0x3e	; 62
    bf2e:	42 97       	sbiw	r24, 0x12	; 18
    bf30:	0f b6       	in	r0, 0x3f	; 63
    bf32:	f8 94       	cli
    bf34:	9e bf       	out	0x3e, r25	; 62
    bf36:	0f be       	out	0x3f, r0	; 63
    bf38:	8d bf       	out	0x3d, r24	; 61
    bf3a:	ed b7       	in	r30, 0x3d	; 61
    bf3c:	fe b7       	in	r31, 0x3e	; 62
    bf3e:	31 96       	adiw	r30, 0x01	; 1
    bf40:	8e 01       	movw	r16, r28
    bf42:	0f 5f       	subi	r16, 0xFF	; 255
    bf44:	1f 4f       	sbci	r17, 0xFF	; 255
    bf46:	ad b7       	in	r26, 0x3d	; 61
    bf48:	be b7       	in	r27, 0x3e	; 62
    bf4a:	12 96       	adiw	r26, 0x02	; 2
    bf4c:	1c 93       	st	X, r17
    bf4e:	0e 93       	st	-X, r16
    bf50:	11 97       	sbiw	r26, 0x01	; 1
    bf52:	87 e0       	ldi	r24, 0x07	; 7
    bf54:	9e e1       	ldi	r25, 0x1E	; 30
    bf56:	93 83       	std	Z+3, r25	; 0x03
    bf58:	82 83       	std	Z+2, r24	; 0x02
    bf5a:	89 e0       	ldi	r24, 0x09	; 9
    bf5c:	9d e0       	ldi	r25, 0x0D	; 13
    bf5e:	95 83       	std	Z+5, r25	; 0x05
    bf60:	84 83       	std	Z+4, r24	; 0x04
    bf62:	8b e3       	ldi	r24, 0x3B	; 59
    bf64:	98 e0       	ldi	r25, 0x08	; 8
    bf66:	97 83       	std	Z+7, r25	; 0x07
    bf68:	86 83       	std	Z+6, r24	; 0x06
    bf6a:	8e e8       	ldi	r24, 0x8E	; 142
    bf6c:	98 e0       	ldi	r25, 0x08	; 8
    bf6e:	91 87       	std	Z+9, r25	; 0x09
    bf70:	80 87       	std	Z+8, r24	; 0x08
    bf72:	80 e2       	ldi	r24, 0x20	; 32
    bf74:	96 e0       	ldi	r25, 0x06	; 6
    bf76:	93 87       	std	Z+11, r25	; 0x0b
    bf78:	82 87       	std	Z+10, r24	; 0x0a
    bf7a:	87 ef       	ldi	r24, 0xF7	; 247
    bf7c:	93 e0       	ldi	r25, 0x03	; 3
    bf7e:	95 87       	std	Z+13, r25	; 0x0d
    bf80:	84 87       	std	Z+12, r24	; 0x0c
    bf82:	85 e3       	ldi	r24, 0x35	; 53
    bf84:	9c e0       	ldi	r25, 0x0C	; 12
    bf86:	97 87       	std	Z+15, r25	; 0x0f
    bf88:	86 87       	std	Z+14, r24	; 0x0e
    bf8a:	8c e0       	ldi	r24, 0x0C	; 12
    bf8c:	94 e0       	ldi	r25, 0x04	; 4
    bf8e:	91 8b       	std	Z+17, r25	; 0x11
    bf90:	80 8b       	std	Z+16, r24	; 0x10
    bf92:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>

	 //SendingData
	 xCRC=0;EDCSendByte(0x02);
    bf96:	8d b7       	in	r24, 0x3d	; 61
    bf98:	9e b7       	in	r25, 0x3e	; 62
    bf9a:	42 96       	adiw	r24, 0x12	; 18
    bf9c:	0f b6       	in	r0, 0x3f	; 63
    bf9e:	f8 94       	cli
    bfa0:	9e bf       	out	0x3e, r25	; 62
    bfa2:	0f be       	out	0x3f, r0	; 63
    bfa4:	8d bf       	out	0x3d, r24	; 61
    bfa6:	82 e0       	ldi	r24, 0x02	; 2
    bfa8:	0e 94 7a 5f 	call	0xbef4	; 0xbef4 <EDCSendByte>
    bfac:	ff 24       	eor	r15, r15
    bfae:	92 e0       	ldi	r25, 0x02	; 2
    bfb0:	e9 2e       	mov	r14, r25
    bfb2:	84 ed       	ldi	r24, 0xD4	; 212
    bfb4:	c8 2e       	mov	r12, r24
    bfb6:	80 e3       	ldi	r24, 0x30	; 48
    bfb8:	d8 2e       	mov	r13, r24
    bfba:	0a c0       	rjmp	.+20     	; 0xbfd0 <SendEDCMessage+0xc6>
	 xCRC=CalcLRC(xCRC,0x02);	      
	 for (i=0;i<strlen(SerialEDC);i++){
          xCRC=CalcLRC(xCRC,SerialEDC[i]);
    bfbc:	a0 0f       	add	r26, r16
    bfbe:	b1 1f       	adc	r27, r17
    bfc0:	8c 91       	ld	r24, X
     systemSlave();
}

char CalcLRC(char xLRC,char DataIn){
     char Result;
	 Result=xLRC^DataIn;
    bfc2:	e8 26       	eor	r14, r24
	 //SendingData
	 xCRC=0;EDCSendByte(0x02);
	 xCRC=CalcLRC(xCRC,0x02);	      
	 for (i=0;i<strlen(SerialEDC);i++){
          xCRC=CalcLRC(xCRC,SerialEDC[i]);
          EDCSendByte(SerialEDC[i]);
    bfc4:	0e 94 7a 5f 	call	0xbef4	; 0xbef4 <EDCSendByte>
    bfc8:	c6 01       	movw	r24, r12
    bfca:	01 97       	sbiw	r24, 0x01	; 1
    bfcc:	f1 f7       	brne	.-4      	; 0xbfca <SendEDCMessage+0xc0>
     sprintf_P(SerialEDC,PSTR("02%s%s%s%s%s%s%s"),strTranNo,strFIP_ID,strDescription,strPrice,strVolume,strAmount,strStatus);     

	 //SendingData
	 xCRC=0;EDCSendByte(0x02);
	 xCRC=CalcLRC(xCRC,0x02);	      
	 for (i=0;i<strlen(SerialEDC);i++){
    bfce:	f3 94       	inc	r15
    bfd0:	f8 01       	movw	r30, r16
    bfd2:	01 90       	ld	r0, Z+
    bfd4:	00 20       	and	r0, r0
    bfd6:	e9 f7       	brne	.-6      	; 0xbfd2 <SendEDCMessage+0xc8>
    bfd8:	31 97       	sbiw	r30, 0x01	; 1
    bfda:	e0 1b       	sub	r30, r16
    bfdc:	f1 0b       	sbc	r31, r17
    bfde:	af 2d       	mov	r26, r15
    bfe0:	b0 e0       	ldi	r27, 0x00	; 0
    bfe2:	ae 17       	cp	r26, r30
    bfe4:	bf 07       	cpc	r27, r31
    bfe6:	50 f3       	brcs	.-44     	; 0xbfbc <SendEDCMessage+0xb2>
          xCRC=CalcLRC(xCRC,SerialEDC[i]);
          EDCSendByte(SerialEDC[i]);
		  //uart(0,1,SerialEDC[i]);
		  _delay_ms(SPI_EDC_DELAY);//min:8
	 }
     EDCSendByte(0x03);
    bfe8:	83 e0       	ldi	r24, 0x03	; 3
    bfea:	0e 94 7a 5f 	call	0xbef4	; 0xbef4 <EDCSendByte>
	 xCRC=CalcLRC(xCRC,0x03);	      
	 EDCSendByte(xCRC);
    bfee:	83 e0       	ldi	r24, 0x03	; 3
    bff0:	8e 25       	eor	r24, r14
    bff2:	0e 94 7a 5f 	call	0xbef4	; 0xbef4 <EDCSendByte>
}
    bff6:	ec 96       	adiw	r28, 0x3c	; 60
    bff8:	0f b6       	in	r0, 0x3f	; 63
    bffa:	f8 94       	cli
    bffc:	de bf       	out	0x3e, r29	; 62
    bffe:	0f be       	out	0x3f, r0	; 63
    c000:	cd bf       	out	0x3d, r28	; 61
    c002:	cf 91       	pop	r28
    c004:	df 91       	pop	r29
    c006:	1f 91       	pop	r17
    c008:	0f 91       	pop	r16
    c00a:	ff 90       	pop	r15
    c00c:	ef 90       	pop	r14
    c00e:	df 90       	pop	r13
    c010:	cf 90       	pop	r12
    c012:	08 95       	ret

0000c014 <SendSlaveCommand>:
void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
	 PoolMsg=plMsg;
     IsControlPooling=True;
}
void SendSlaveCommand(char SlaveCommand,char SlaveMessage){     
    c014:	0f 93       	push	r16
    c016:	1f 93       	push	r17
    c018:	18 2f       	mov	r17, r24
    c01a:	06 2f       	mov	r16, r22
	 systemMaster();
    c01c:	0e 94 60 5f 	call	0xbec0	; 0xbec0 <systemMaster>
	 _spi(0x05);
    c020:	85 e0       	ldi	r24, 0x05	; 5
    c022:	0e 94 f2 a6 	call	0x14de4	; 0x14de4 <_spi>
	 _spi(SlaveCommand);
    c026:	81 2f       	mov	r24, r17
    c028:	0e 94 f2 a6 	call	0x14de4	; 0x14de4 <_spi>
	 _spi(SlaveMessage);
    c02c:	80 2f       	mov	r24, r16
    c02e:	0e 94 f2 a6 	call	0x14de4	; 0x14de4 <_spi>
	 _spi(0x06);
    c032:	86 e0       	ldi	r24, 0x06	; 6
    c034:	0e 94 f2 a6 	call	0x14de4	; 0x14de4 <_spi>
	 systemSlave();
    c038:	0e 94 6b 5f 	call	0xbed6	; 0xbed6 <systemSlave>
}
    c03c:	1f 91       	pop	r17
    c03e:	0f 91       	pop	r16
    c040:	08 95       	ret

0000c042 <FSettingPumpID>:
     if ((*Value)>MinValue){
	     (*Value)--;
	 }else *Value=MaxValue;
}

char FSettingPumpID(){
    c042:	9f 92       	push	r9
    c044:	af 92       	push	r10
    c046:	bf 92       	push	r11
    c048:	cf 92       	push	r12
    c04a:	df 92       	push	r13
    c04c:	ef 92       	push	r14
    c04e:	ff 92       	push	r15
    c050:	0f 93       	push	r16
    c052:	1f 93       	push	r17
    c054:	df 93       	push	r29
    c056:	cf 93       	push	r28
    c058:	cd b7       	in	r28, 0x3d	; 61
    c05a:	de b7       	in	r29, 0x3e	; 62
    c05c:	64 97       	sbiw	r28, 0x14	; 20
    c05e:	0f b6       	in	r0, 0x3f	; 63
    c060:	f8 94       	cli
    c062:	de bf       	out	0x3e, r29	; 62
    c064:	0f be       	out	0x3f, r0	; 63
    c066:	cd bf       	out	0x3d, r28	; 61
	 char iLoop,Result,KeyChar,KeyPressed,i,j,CheckPump;
	 char lcdteks[20];
	 static char Idx,PPumpId[8],MsgPumpId,PumpCount;
     
	 Result=MENU_NONE;
	 switch (stMenuPumpID){
    c068:	80 91 1a 02 	lds	r24, 0x021A
    c06c:	85 30       	cpi	r24, 0x05	; 5
    c06e:	09 f4       	brne	.+2      	; 0xc072 <FSettingPumpID+0x30>
    c070:	83 c1       	rjmp	.+774    	; 0xc378 <FSettingPumpID+0x336>
    c072:	86 30       	cpi	r24, 0x06	; 6
    c074:	90 f4       	brcc	.+36     	; 0xc09a <FSettingPumpID+0x58>
    c076:	82 30       	cpi	r24, 0x02	; 2
    c078:	09 f4       	brne	.+2      	; 0xc07c <FSettingPumpID+0x3a>
    c07a:	8d c0       	rjmp	.+282    	; 0xc196 <FSettingPumpID+0x154>
    c07c:	83 30       	cpi	r24, 0x03	; 3
    c07e:	30 f4       	brcc	.+12     	; 0xc08c <FSettingPumpID+0x4a>
    c080:	88 23       	and	r24, r24
    c082:	f1 f0       	breq	.+60     	; 0xc0c0 <FSettingPumpID+0x7e>
    c084:	81 30       	cpi	r24, 0x01	; 1
    c086:	09 f0       	breq	.+2      	; 0xc08a <FSettingPumpID+0x48>
    c088:	5b c2       	rjmp	.+1206   	; 0xc540 <FSettingPumpID+0x4fe>
    c08a:	2b c0       	rjmp	.+86     	; 0xc0e2 <FSettingPumpID+0xa0>
    c08c:	83 30       	cpi	r24, 0x03	; 3
    c08e:	09 f4       	brne	.+2      	; 0xc092 <FSettingPumpID+0x50>
    c090:	4f c1       	rjmp	.+670    	; 0xc330 <FSettingPumpID+0x2ee>
    c092:	84 30       	cpi	r24, 0x04	; 4
    c094:	09 f0       	breq	.+2      	; 0xc098 <FSettingPumpID+0x56>
    c096:	54 c2       	rjmp	.+1192   	; 0xc540 <FSettingPumpID+0x4fe>
    c098:	68 c1       	rjmp	.+720    	; 0xc36a <FSettingPumpID+0x328>
    c09a:	88 30       	cpi	r24, 0x08	; 8
    c09c:	09 f4       	brne	.+2      	; 0xc0a0 <FSettingPumpID+0x5e>
    c09e:	f3 c1       	rjmp	.+998    	; 0xc486 <FSettingPumpID+0x444>
    c0a0:	89 30       	cpi	r24, 0x09	; 9
    c0a2:	38 f4       	brcc	.+14     	; 0xc0b2 <FSettingPumpID+0x70>
    c0a4:	86 30       	cpi	r24, 0x06	; 6
    c0a6:	09 f4       	brne	.+2      	; 0xc0aa <FSettingPumpID+0x68>
    c0a8:	92 c1       	rjmp	.+804    	; 0xc3ce <FSettingPumpID+0x38c>
    c0aa:	87 30       	cpi	r24, 0x07	; 7
    c0ac:	09 f0       	breq	.+2      	; 0xc0b0 <FSettingPumpID+0x6e>
    c0ae:	48 c2       	rjmp	.+1168   	; 0xc540 <FSettingPumpID+0x4fe>
    c0b0:	2d c2       	rjmp	.+1114   	; 0xc50c <FSettingPumpID+0x4ca>
    c0b2:	89 30       	cpi	r24, 0x09	; 9
    c0b4:	09 f4       	brne	.+2      	; 0xc0b8 <FSettingPumpID+0x76>
    c0b6:	32 c2       	rjmp	.+1124   	; 0xc51c <FSettingPumpID+0x4da>
    c0b8:	8a 30       	cpi	r24, 0x0A	; 10
    c0ba:	09 f0       	breq	.+2      	; 0xc0be <FSettingPumpID+0x7c>
    c0bc:	41 c2       	rjmp	.+1154   	; 0xc540 <FSettingPumpID+0x4fe>
    c0be:	34 c2       	rjmp	.+1128   	; 0xc528 <FSettingPumpID+0x4e6>
	 case mpInitPumpId:	      
	      //Disable PumpPooling
		  if (IFType==IT_STANDALONE)SendSlaveCommand(SC_STOP_POOL_SEQUENCE,0);
    c0c0:	80 91 00 01 	lds	r24, 0x0100
    c0c4:	82 30       	cpi	r24, 0x02	; 2
    c0c6:	21 f4       	brne	.+8      	; 0xc0d0 <FSettingPumpID+0x8e>
    c0c8:	8f e1       	ldi	r24, 0x1F	; 31
    c0ca:	60 e0       	ldi	r22, 0x00	; 0
    c0cc:	0e 94 0a 60 	call	0xc014	; 0xc014 <SendSlaveCommand>
		  eeprom_read_block((void*) &PPumpId, (const void*) &DefPumpMap,8);
    c0d0:	80 e1       	ldi	r24, 0x10	; 16
    c0d2:	92 e0       	ldi	r25, 0x02	; 2
    c0d4:	66 e4       	ldi	r22, 0x46	; 70
    c0d6:	70 e0       	ldi	r23, 0x00	; 0
    c0d8:	48 e0       	ldi	r20, 0x08	; 8
    c0da:	50 e0       	ldi	r21, 0x00	; 0
    c0dc:	0e 94 1b ad 	call	0x15a36	; 0x15a36 <__eerd_block_m128>
    c0e0:	49 c1       	rjmp	.+658    	; 0xc374 <FSettingPumpID+0x332>
          stMenuPumpID=mpDisplayPumpId;
	      break;
	 case mpDisplayPumpId:
	      lcd_clear();		  
    c0e2:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
    c0e6:	e0 e1       	ldi	r30, 0x10	; 16
    c0e8:	ee 2e       	mov	r14, r30
    c0ea:	e2 e0       	ldi	r30, 0x02	; 2
    c0ec:	fe 2e       	mov	r15, r30
    c0ee:	01 e0       	ldi	r16, 0x01	; 1
    c0f0:	10 e0       	ldi	r17, 0x00	; 0
		  for (iLoop=0;iLoop<4;iLoop++){
			  sprintf_P(lcdteks,PSTR("%d.P%.2d | %d.P%.2d"),(iLoop+1),PPumpId[iLoop],(iLoop+5),PPumpId[iLoop+4]);
    c0f2:	6e 01       	movw	r12, r28
    c0f4:	08 94       	sec
    c0f6:	c1 1c       	adc	r12, r1
    c0f8:	d1 1c       	adc	r13, r1
    c0fa:	7b e2       	ldi	r23, 0x2B	; 43
    c0fc:	a7 2e       	mov	r10, r23
    c0fe:	7e e0       	ldi	r23, 0x0E	; 14
    c100:	b7 2e       	mov	r11, r23
    c102:	8d b7       	in	r24, 0x3d	; 61
    c104:	9e b7       	in	r25, 0x3e	; 62
    c106:	0c 97       	sbiw	r24, 0x0c	; 12
    c108:	0f b6       	in	r0, 0x3f	; 63
    c10a:	f8 94       	cli
    c10c:	9e bf       	out	0x3e, r25	; 62
    c10e:	0f be       	out	0x3f, r0	; 63
    c110:	8d bf       	out	0x3d, r24	; 61
    c112:	ed b7       	in	r30, 0x3d	; 61
    c114:	fe b7       	in	r31, 0x3e	; 62
    c116:	31 96       	adiw	r30, 0x01	; 1
    c118:	ad b7       	in	r26, 0x3d	; 61
    c11a:	be b7       	in	r27, 0x3e	; 62
    c11c:	12 96       	adiw	r26, 0x02	; 2
    c11e:	dc 92       	st	X, r13
    c120:	ce 92       	st	-X, r12
    c122:	11 97       	sbiw	r26, 0x01	; 1
    c124:	b3 82       	std	Z+3, r11	; 0x03
    c126:	a2 82       	std	Z+2, r10	; 0x02
    c128:	15 83       	std	Z+5, r17	; 0x05
    c12a:	04 83       	std	Z+4, r16	; 0x04
    c12c:	d7 01       	movw	r26, r14
    c12e:	8c 91       	ld	r24, X
    c130:	86 83       	std	Z+6, r24	; 0x06
    c132:	17 82       	std	Z+7, r1	; 0x07
    c134:	0c 5f       	subi	r16, 0xFC	; 252
    c136:	1f 4f       	sbci	r17, 0xFF	; 255
    c138:	11 87       	std	Z+9, r17	; 0x09
    c13a:	00 87       	std	Z+8, r16	; 0x08
    c13c:	04 50       	subi	r16, 0x04	; 4
    c13e:	10 40       	sbci	r17, 0x00	; 0
    c140:	14 96       	adiw	r26, 0x04	; 4
    c142:	8c 91       	ld	r24, X
    c144:	82 87       	std	Z+10, r24	; 0x0a
    c146:	13 86       	std	Z+11, r1	; 0x0b
    c148:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
			  lcd_print((iLoop+1),1,lcdteks);
    c14c:	ed b7       	in	r30, 0x3d	; 61
    c14e:	fe b7       	in	r31, 0x3e	; 62
    c150:	3c 96       	adiw	r30, 0x0c	; 12
    c152:	0f b6       	in	r0, 0x3f	; 63
    c154:	f8 94       	cli
    c156:	fe bf       	out	0x3e, r31	; 62
    c158:	0f be       	out	0x3f, r0	; 63
    c15a:	ed bf       	out	0x3d, r30	; 61
    c15c:	80 2f       	mov	r24, r16
    c15e:	61 e0       	ldi	r22, 0x01	; 1
    c160:	a6 01       	movw	r20, r12
    c162:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
    c166:	08 94       	sec
    c168:	e1 1c       	adc	r14, r1
    c16a:	f1 1c       	adc	r15, r1
    c16c:	0f 5f       	subi	r16, 0xFF	; 255
    c16e:	1f 4f       	sbci	r17, 0xFF	; 255
		  eeprom_read_block((void*) &PPumpId, (const void*) &DefPumpMap,8);
          stMenuPumpID=mpDisplayPumpId;
	      break;
	 case mpDisplayPumpId:
	      lcd_clear();		  
		  for (iLoop=0;iLoop<4;iLoop++){
    c170:	f4 e1       	ldi	r31, 0x14	; 20
    c172:	ef 16       	cp	r14, r31
    c174:	f2 e0       	ldi	r31, 0x02	; 2
    c176:	ff 06       	cpc	r15, r31
    c178:	21 f6       	brne	.-120    	; 0xc102 <FSettingPumpID+0xc0>
			  sprintf_P(lcdteks,PSTR("%d.P%.2d | %d.P%.2d"),(iLoop+1),PPumpId[iLoop],(iLoop+5),PPumpId[iLoop+4]);
			  lcd_print((iLoop+1),1,lcdteks);
          }
          lcd_printf(3,15,PSTR("*)Back"));
    c17a:	83 e0       	ldi	r24, 0x03	; 3
    c17c:	6f e0       	ldi	r22, 0x0F	; 15
    c17e:	44 e2       	ldi	r20, 0x24	; 36
    c180:	5e e0       	ldi	r21, 0x0E	; 14
    c182:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
	      lcd_printf(4,15,PSTR("#)Save"));
    c186:	84 e0       	ldi	r24, 0x04	; 4
    c188:	6f e0       	ldi	r22, 0x0F	; 15
    c18a:	4d e1       	ldi	r20, 0x1D	; 29
    c18c:	5e e0       	ldi	r21, 0x0E	; 14
    c18e:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
          stMenuPumpID=mpSelectInput;
    c192:	82 e0       	ldi	r24, 0x02	; 2
    c194:	c0 c1       	rjmp	.+896    	; 0xc516 <FSettingPumpID+0x4d4>
	      break;
     case mpSelectInput:
	      KeyPressed=_key_scan(1);
    c196:	81 e0       	ldi	r24, 0x01	; 1
    c198:	0e 94 58 a6 	call	0x14cb0	; 0x14cb0 <_key_scan>
    c19c:	98 2e       	mov	r9, r24
	      KeyChar=_key_btn(KeyPressed);
    c19e:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <_key_btn>
    c1a2:	98 2f       	mov	r25, r24
          if ((KeyChar>='1') && (KeyChar<='8')){
    c1a4:	81 53       	subi	r24, 0x31	; 49
    c1a6:	88 30       	cpi	r24, 0x08	; 8
    c1a8:	08 f0       	brcs	.+2      	; 0xc1ac <FSettingPumpID+0x16a>
    c1aa:	85 c0       	rjmp	.+266    	; 0xc2b6 <FSettingPumpID+0x274>
		      //eeprom_read_block((void*) &PPumpId, (const void*) &DefPumpMap,8);
			  switch(IFType){
    c1ac:	80 91 00 01 	lds	r24, 0x0100
    c1b0:	81 30       	cpi	r24, 0x01	; 1
    c1b2:	19 f0       	breq	.+6      	; 0xc1ba <FSettingPumpID+0x178>
    c1b4:	82 30       	cpi	r24, 0x02	; 2
    c1b6:	a1 f5       	brne	.+104    	; 0xc220 <FSettingPumpID+0x1de>
    c1b8:	17 c0       	rjmp	.+46     	; 0xc1e8 <FSettingPumpID+0x1a6>
			  case IT_SLAVE:
			       if (IsShift==False)IncValue(&PPumpId[KeyChar-'1'],0,99);//PPumpId[KeyChar-'1']=((PPumpId[KeyChar-'1']+1)%100);
    c1ba:	80 91 19 02 	lds	r24, 0x0219
    c1be:	88 23       	and	r24, r24
    c1c0:	41 f4       	brne	.+16     	; 0xc1d2 <FSettingPumpID+0x190>
    c1c2:	e9 2f       	mov	r30, r25
    c1c4:	f0 e0       	ldi	r31, 0x00	; 0
    c1c6:	e1 52       	subi	r30, 0x21	; 33
    c1c8:	fe 4f       	sbci	r31, 0xFE	; 254
		}
	}
}

void IncValue(char *Value,char MinValue,char MaxValue){
     if ((*Value)<MaxValue){
    c1ca:	80 81       	ld	r24, Z
    c1cc:	83 36       	cpi	r24, 0x63	; 99
    c1ce:	c8 f4       	brcc	.+50     	; 0xc202 <FSettingPumpID+0x1c0>
    c1d0:	16 c0       	rjmp	.+44     	; 0xc1fe <FSettingPumpID+0x1bc>
		      //eeprom_read_block((void*) &PPumpId, (const void*) &DefPumpMap,8);
			  switch(IFType){
			  case IT_SLAVE:
			       if (IsShift==False)IncValue(&PPumpId[KeyChar-'1'],0,99);//PPumpId[KeyChar-'1']=((PPumpId[KeyChar-'1']+1)%100);
				   else
				   if (IsShift==True)DecValue(&PPumpId[KeyChar-'1'],0,99);//PPumpId[KeyChar-'1']=100-(100-((PPumpId[KeyChar-'1']+1)%100));
    c1d2:	81 30       	cpi	r24, 0x01	; 1
    c1d4:	29 f5       	brne	.+74     	; 0xc220 <FSettingPumpID+0x1de>
    c1d6:	e9 2f       	mov	r30, r25
    c1d8:	f0 e0       	ldi	r31, 0x00	; 0
    c1da:	e1 52       	subi	r30, 0x21	; 33
    c1dc:	fe 4f       	sbci	r31, 0xFE	; 254
	     (*Value)++;
	 }else *Value=MinValue;
}

void DecValue(char *Value,char MinValue,char MaxValue){
     if ((*Value)>MinValue){
    c1de:	80 81       	ld	r24, Z
    c1e0:	88 23       	and	r24, r24
    c1e2:	d1 f4       	brne	.+52     	; 0xc218 <FSettingPumpID+0x1d6>
	     (*Value)--;
	 }else *Value=MaxValue;
    c1e4:	83 e6       	ldi	r24, 0x63	; 99
    c1e6:	1b c0       	rjmp	.+54     	; 0xc21e <FSettingPumpID+0x1dc>
			       if (IsShift==False)IncValue(&PPumpId[KeyChar-'1'],0,99);//PPumpId[KeyChar-'1']=((PPumpId[KeyChar-'1']+1)%100);
				   else
				   if (IsShift==True)DecValue(&PPumpId[KeyChar-'1'],0,99);//PPumpId[KeyChar-'1']=100-(100-((PPumpId[KeyChar-'1']+1)%100));
			       break;
              case IT_STANDALONE:
			       if (IsShift==False)IncValue(&PPumpId[KeyChar-'1'],0,16);//PPumpId[KeyChar-'1']=((PPumpId[KeyChar-'1']+1)%16);
    c1e8:	80 91 19 02 	lds	r24, 0x0219
    c1ec:	88 23       	and	r24, r24
    c1ee:	59 f4       	brne	.+22     	; 0xc206 <FSettingPumpID+0x1c4>
    c1f0:	e9 2f       	mov	r30, r25
    c1f2:	f0 e0       	ldi	r31, 0x00	; 0
    c1f4:	e1 52       	subi	r30, 0x21	; 33
    c1f6:	fe 4f       	sbci	r31, 0xFE	; 254
		}
	}
}

void IncValue(char *Value,char MinValue,char MaxValue){
     if ((*Value)<MaxValue){
    c1f8:	80 81       	ld	r24, Z
    c1fa:	80 31       	cpi	r24, 0x10	; 16
    c1fc:	10 f4       	brcc	.+4      	; 0xc202 <FSettingPumpID+0x1c0>
	     (*Value)++;
    c1fe:	8f 5f       	subi	r24, 0xFF	; 255
    c200:	0e c0       	rjmp	.+28     	; 0xc21e <FSettingPumpID+0x1dc>
	 }else *Value=MinValue;
    c202:	10 82       	st	Z, r1
    c204:	0d c0       	rjmp	.+26     	; 0xc220 <FSettingPumpID+0x1de>
				   if (IsShift==True)DecValue(&PPumpId[KeyChar-'1'],0,99);//PPumpId[KeyChar-'1']=100-(100-((PPumpId[KeyChar-'1']+1)%100));
			       break;
              case IT_STANDALONE:
			       if (IsShift==False)IncValue(&PPumpId[KeyChar-'1'],0,16);//PPumpId[KeyChar-'1']=((PPumpId[KeyChar-'1']+1)%16);
				   else
				   if (IsShift==True)DecValue(&PPumpId[KeyChar-'1'],0,16);//PPumpId[KeyChar-'1']=17-(17-((PPumpId[KeyChar-'1']+1)%17));
    c206:	81 30       	cpi	r24, 0x01	; 1
    c208:	59 f4       	brne	.+22     	; 0xc220 <FSettingPumpID+0x1de>
    c20a:	e9 2f       	mov	r30, r25
    c20c:	f0 e0       	ldi	r31, 0x00	; 0
    c20e:	e1 52       	subi	r30, 0x21	; 33
    c210:	fe 4f       	sbci	r31, 0xFE	; 254
	     (*Value)++;
	 }else *Value=MinValue;
}

void DecValue(char *Value,char MinValue,char MaxValue){
     if ((*Value)>MinValue){
    c212:	80 81       	ld	r24, Z
    c214:	88 23       	and	r24, r24
    c216:	11 f0       	breq	.+4      	; 0xc21c <FSettingPumpID+0x1da>
	     (*Value)--;
    c218:	81 50       	subi	r24, 0x01	; 1
    c21a:	01 c0       	rjmp	.+2      	; 0xc21e <FSettingPumpID+0x1dc>
	 }else *Value=MaxValue;
    c21c:	80 e1       	ldi	r24, 0x10	; 16
    c21e:	80 83       	st	Z, r24
    c220:	60 e1       	ldi	r22, 0x10	; 16
    c222:	e6 2e       	mov	r14, r22
    c224:	62 e0       	ldi	r22, 0x02	; 2
    c226:	f6 2e       	mov	r15, r22
    c228:	01 e0       	ldi	r16, 0x01	; 1
    c22a:	10 e0       	ldi	r17, 0x00	; 0
				   if (IsShift==True)DecValue(&PPumpId[KeyChar-'1'],0,16);//PPumpId[KeyChar-'1']=17-(17-((PPumpId[KeyChar-'1']+1)%17));
			       break;			  
			  }
			  //Redraw
			  for (iLoop=0;iLoop<4;iLoop++){
				  sprintf_P(lcdteks,PSTR("%d.P%.2d | %d.P%.2d"),(iLoop+1),PPumpId[iLoop],(iLoop+5),PPumpId[iLoop+4]);
    c22c:	6e 01       	movw	r12, r28
    c22e:	08 94       	sec
    c230:	c1 1c       	adc	r12, r1
    c232:	d1 1c       	adc	r13, r1
    c234:	59 e0       	ldi	r21, 0x09	; 9
    c236:	a5 2e       	mov	r10, r21
    c238:	5e e0       	ldi	r21, 0x0E	; 14
    c23a:	b5 2e       	mov	r11, r21
    c23c:	8d b7       	in	r24, 0x3d	; 61
    c23e:	9e b7       	in	r25, 0x3e	; 62
    c240:	0c 97       	sbiw	r24, 0x0c	; 12
    c242:	0f b6       	in	r0, 0x3f	; 63
    c244:	f8 94       	cli
    c246:	9e bf       	out	0x3e, r25	; 62
    c248:	0f be       	out	0x3f, r0	; 63
    c24a:	8d bf       	out	0x3d, r24	; 61
    c24c:	ed b7       	in	r30, 0x3d	; 61
    c24e:	fe b7       	in	r31, 0x3e	; 62
    c250:	31 96       	adiw	r30, 0x01	; 1
    c252:	ad b7       	in	r26, 0x3d	; 61
    c254:	be b7       	in	r27, 0x3e	; 62
    c256:	12 96       	adiw	r26, 0x02	; 2
    c258:	dc 92       	st	X, r13
    c25a:	ce 92       	st	-X, r12
    c25c:	11 97       	sbiw	r26, 0x01	; 1
    c25e:	b3 82       	std	Z+3, r11	; 0x03
    c260:	a2 82       	std	Z+2, r10	; 0x02
    c262:	15 83       	std	Z+5, r17	; 0x05
    c264:	04 83       	std	Z+4, r16	; 0x04
    c266:	d7 01       	movw	r26, r14
    c268:	8c 91       	ld	r24, X
    c26a:	86 83       	std	Z+6, r24	; 0x06
    c26c:	17 82       	std	Z+7, r1	; 0x07
    c26e:	0c 5f       	subi	r16, 0xFC	; 252
    c270:	1f 4f       	sbci	r17, 0xFF	; 255
    c272:	11 87       	std	Z+9, r17	; 0x09
    c274:	00 87       	std	Z+8, r16	; 0x08
    c276:	04 50       	subi	r16, 0x04	; 4
    c278:	10 40       	sbci	r17, 0x00	; 0
    c27a:	14 96       	adiw	r26, 0x04	; 4
    c27c:	8c 91       	ld	r24, X
    c27e:	82 87       	std	Z+10, r24	; 0x0a
    c280:	13 86       	std	Z+11, r1	; 0x0b
    c282:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
				  lcd_print((iLoop+1),1,lcdteks);
    c286:	ed b7       	in	r30, 0x3d	; 61
    c288:	fe b7       	in	r31, 0x3e	; 62
    c28a:	3c 96       	adiw	r30, 0x0c	; 12
    c28c:	0f b6       	in	r0, 0x3f	; 63
    c28e:	f8 94       	cli
    c290:	fe bf       	out	0x3e, r31	; 62
    c292:	0f be       	out	0x3f, r0	; 63
    c294:	ed bf       	out	0x3d, r30	; 61
    c296:	80 2f       	mov	r24, r16
    c298:	61 e0       	ldi	r22, 0x01	; 1
    c29a:	a6 01       	movw	r20, r12
    c29c:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
    c2a0:	08 94       	sec
    c2a2:	e1 1c       	adc	r14, r1
    c2a4:	f1 1c       	adc	r15, r1
    c2a6:	0f 5f       	subi	r16, 0xFF	; 255
    c2a8:	1f 4f       	sbci	r17, 0xFF	; 255
				   else
				   if (IsShift==True)DecValue(&PPumpId[KeyChar-'1'],0,16);//PPumpId[KeyChar-'1']=17-(17-((PPumpId[KeyChar-'1']+1)%17));
			       break;			  
			  }
			  //Redraw
			  for (iLoop=0;iLoop<4;iLoop++){
    c2aa:	f4 e1       	ldi	r31, 0x14	; 20
    c2ac:	ef 16       	cp	r14, r31
    c2ae:	f2 e0       	ldi	r31, 0x02	; 2
    c2b0:	ff 06       	cpc	r15, r31
    c2b2:	21 f6       	brne	.-120    	; 0xc23c <FSettingPumpID+0x1fa>
    c2b4:	2b c0       	rjmp	.+86     	; 0xc30c <FSettingPumpID+0x2ca>
				  sprintf_P(lcdteks,PSTR("%d.P%.2d | %d.P%.2d"),(iLoop+1),PPumpId[iLoop],(iLoop+5),PPumpId[iLoop+4]);
				  lcd_print((iLoop+1),1,lcdteks);
	          }
		  }else if (KeyChar=='#'){
    c2b6:	93 32       	cpi	r25, 0x23	; 35
    c2b8:	21 f5       	brne	.+72     	; 0xc302 <FSettingPumpID+0x2c0>
    c2ba:	40 e0       	ldi	r20, 0x00	; 0
    c2bc:	20 e0       	ldi	r18, 0x00	; 0
    c2be:	30 e0       	ldi	r19, 0x00	; 0
    c2c0:	52 2f       	mov	r21, r18
		      //Evaluate same PumpID
			  PumpCount=0;
			  for (i=0;i<8;i++){
			       CheckPump=PPumpId[i];
    c2c2:	f9 01       	movw	r30, r18
    c2c4:	e0 5f       	subi	r30, 0xF0	; 240
    c2c6:	fd 4f       	sbci	r31, 0xFD	; 253
    c2c8:	e0 81       	ld	r30, Z
				   if (CheckPump>0){
    c2ca:	ee 23       	and	r30, r30
    c2cc:	69 f0       	breq	.+26     	; 0xc2e8 <FSettingPumpID+0x2a6>
    c2ce:	a0 e1       	ldi	r26, 0x10	; 16
    c2d0:	b2 e0       	ldi	r27, 0x02	; 2
    c2d2:	90 e0       	ldi	r25, 0x00	; 0
				      for(j=0;j<8;j++){					      
					      if ((i!=j)&&(CheckPump==PPumpId[j]))
    c2d4:	59 17       	cp	r21, r25
    c2d6:	21 f0       	breq	.+8      	; 0xc2e0 <FSettingPumpID+0x29e>
    c2d8:	8c 91       	ld	r24, X
    c2da:	e8 17       	cp	r30, r24
    c2dc:	09 f4       	brne	.+2      	; 0xc2e0 <FSettingPumpID+0x29e>
						       PumpCount++;
    c2de:	4f 5f       	subi	r20, 0xFF	; 255
		      //Evaluate same PumpID
			  PumpCount=0;
			  for (i=0;i<8;i++){
			       CheckPump=PPumpId[i];
				   if (CheckPump>0){
				      for(j=0;j<8;j++){					      
    c2e0:	9f 5f       	subi	r25, 0xFF	; 255
    c2e2:	11 96       	adiw	r26, 0x01	; 1
    c2e4:	98 30       	cpi	r25, 0x08	; 8
    c2e6:	b1 f7       	brne	.-20     	; 0xc2d4 <FSettingPumpID+0x292>
    c2e8:	2f 5f       	subi	r18, 0xFF	; 255
    c2ea:	3f 4f       	sbci	r19, 0xFF	; 255
				  lcd_print((iLoop+1),1,lcdteks);
	          }
		  }else if (KeyChar=='#'){
		      //Evaluate same PumpID
			  PumpCount=0;
			  for (i=0;i<8;i++){
    c2ec:	28 30       	cpi	r18, 0x08	; 8
    c2ee:	31 05       	cpc	r19, r1
    c2f0:	39 f7       	brne	.-50     	; 0xc2c0 <FSettingPumpID+0x27e>
    c2f2:	40 93 0e 02 	sts	0x020E, r20
					      if ((i!=j)&&(CheckPump==PPumpId[j]))
						       PumpCount++;
					  }
				    }				     
				  }			       			  			  
			  if (PumpCount>0) stMenuPumpID=mpSaveFailed;
    c2f6:	44 23       	and	r20, r20
    c2f8:	11 f0       	breq	.+4      	; 0xc2fe <FSettingPumpID+0x2bc>
    c2fa:	83 e0       	ldi	r24, 0x03	; 3
    c2fc:	05 c0       	rjmp	.+10     	; 0xc308 <FSettingPumpID+0x2c6>
			  else stMenuPumpID=mpSavingPumpId;
    c2fe:	85 e0       	ldi	r24, 0x05	; 5
    c300:	03 c0       	rjmp	.+6      	; 0xc308 <FSettingPumpID+0x2c6>
		  }	
		  else if (KeyChar=='*'){
    c302:	9a 32       	cpi	r25, 0x2A	; 42
    c304:	19 f4       	brne	.+6      	; 0xc30c <FSettingPumpID+0x2ca>
		      stMenuPumpID=mpExitPumpId;
    c306:	8a e0       	ldi	r24, 0x0A	; 10
    c308:	80 93 1a 02 	sts	0x021A, r24
		  }
		  if (KeyPressed==_KEY_SHIFT){
    c30c:	8b e7       	ldi	r24, 0x7B	; 123
    c30e:	98 16       	cp	r9, r24
    c310:	09 f0       	breq	.+2      	; 0xc314 <FSettingPumpID+0x2d2>
    c312:	16 c1       	rjmp	.+556    	; 0xc540 <FSettingPumpID+0x4fe>
		      if (IsShift==False)IsShift=True;
    c314:	80 91 19 02 	lds	r24, 0x0219
    c318:	88 23       	and	r24, r24
    c31a:	21 f4       	brne	.+8      	; 0xc324 <FSettingPumpID+0x2e2>
    c31c:	81 e0       	ldi	r24, 0x01	; 1
    c31e:	80 93 19 02 	sts	0x0219, r24
    c322:	0e c1       	rjmp	.+540    	; 0xc540 <FSettingPumpID+0x4fe>
			  else
			  if (IsShift==True)IsShift=False;
    c324:	81 30       	cpi	r24, 0x01	; 1
    c326:	09 f0       	breq	.+2      	; 0xc32a <FSettingPumpID+0x2e8>
    c328:	0b c1       	rjmp	.+534    	; 0xc540 <FSettingPumpID+0x4fe>
    c32a:	10 92 19 02 	sts	0x0219, r1
    c32e:	08 c1       	rjmp	.+528    	; 0xc540 <FSettingPumpID+0x4fe>
		  }
	      break;
     case mpSaveFailed:
	      lcd_clear();
    c330:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
		  lcd_printf(1,1,PSTR("      Warning!      "));
    c334:	81 e0       	ldi	r24, 0x01	; 1
    c336:	61 e0       	ldi	r22, 0x01	; 1
    c338:	44 ef       	ldi	r20, 0xF4	; 244
    c33a:	5d e0       	ldi	r21, 0x0D	; 13
    c33c:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  lcd_printf(2,1,PSTR("  Duplicate PumpID  "));
    c340:	82 e0       	ldi	r24, 0x02	; 2
    c342:	61 e0       	ldi	r22, 0x01	; 1
    c344:	4f ed       	ldi	r20, 0xDF	; 223
    c346:	5d e0       	ldi	r21, 0x0D	; 13
    c348:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  lcd_printf(3,1,PSTR("    Not Allowed     "));		  
    c34c:	83 e0       	ldi	r24, 0x03	; 3
    c34e:	61 e0       	ldi	r22, 0x01	; 1
    c350:	4a ec       	ldi	r20, 0xCA	; 202
    c352:	5d e0       	ldi	r21, 0x0D	; 13
    c354:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    c358:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    c35a:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    c35c:	82 e0       	ldi	r24, 0x02	; 2
    c35e:	80 93 bc 01 	sts	0x01BC, r24
	      lcd_clear();
		  lcd_printf(1,1,PSTR("      Warning!      "));
		  lcd_printf(2,1,PSTR("  Duplicate PumpID  "));
		  lcd_printf(3,1,PSTR("    Not Allowed     "));		  
		  system_beep(2);
	      TimDisplay=0;
    c362:	10 92 92 01 	sts	0x0192, r1
	      stMenuPumpID=mpDisplayFailed;
    c366:	84 e0       	ldi	r24, 0x04	; 4
    c368:	d6 c0       	rjmp	.+428    	; 0xc516 <FSettingPumpID+0x4d4>
          break;	 
     case mpDisplayFailed:
	      if (TimDisplay>6) stMenuPumpID=mpDisplayPumpId;
    c36a:	80 91 92 01 	lds	r24, 0x0192
    c36e:	87 30       	cpi	r24, 0x07	; 7
    c370:	08 f4       	brcc	.+2      	; 0xc374 <FSettingPumpID+0x332>
    c372:	e6 c0       	rjmp	.+460    	; 0xc540 <FSettingPumpID+0x4fe>
    c374:	81 e0       	ldi	r24, 0x01	; 1
    c376:	cf c0       	rjmp	.+414    	; 0xc516 <FSettingPumpID+0x4d4>
	      break;
     case mpSavingPumpId:
	      eeprom_write_block((const void*) &PPumpId, (void*) &DefPumpMap, 8);
    c378:	80 e1       	ldi	r24, 0x10	; 16
    c37a:	92 e0       	ldi	r25, 0x02	; 2
    c37c:	66 e4       	ldi	r22, 0x46	; 70
    c37e:	70 e0       	ldi	r23, 0x00	; 0
    c380:	48 e0       	ldi	r20, 0x08	; 8
    c382:	50 e0       	ldi	r21, 0x00	; 0
    c384:	0e 94 33 ad 	call	0x15a66	; 0x15a66 <__eewr_block_m128>
		  if (IFType==IT_STANDALONE){
    c388:	80 91 00 01 	lds	r24, 0x0100
    c38c:	82 30       	cpi	r24, 0x02	; 2
    c38e:	d9 f4       	brne	.+54     	; 0xc3c6 <FSettingPumpID+0x384>
		      //SendConfig to Slave
			  lcd_clear();
    c390:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
              lcd_printf(1,1,PSTR("-PumpID-"));
    c394:	81 e0       	ldi	r24, 0x01	; 1
    c396:	61 e0       	ldi	r22, 0x01	; 1
    c398:	41 ec       	ldi	r20, 0xC1	; 193
    c39a:	5d e0       	ldi	r21, 0x0D	; 13
    c39c:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
              lcd_printf(2,1,PSTR("Saving.."));
    c3a0:	82 e0       	ldi	r24, 0x02	; 2
    c3a2:	61 e0       	ldi	r22, 0x01	; 1
    c3a4:	48 eb       	ldi	r20, 0xB8	; 184
    c3a6:	5d e0       	ldi	r21, 0x0D	; 13
    c3a8:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
			  Idx=0;
    c3ac:	10 92 18 02 	sts	0x0218, r1
			  PumpCount=0;
    c3b0:	10 92 0e 02 	sts	0x020E, r1
              eeprom_read_block((void*) &PPumpId, (const void*) &DefPumpMap,8);
    c3b4:	80 e1       	ldi	r24, 0x10	; 16
    c3b6:	92 e0       	ldi	r25, 0x02	; 2
    c3b8:	66 e4       	ldi	r22, 0x46	; 70
    c3ba:	70 e0       	ldi	r23, 0x00	; 0
    c3bc:	48 e0       	ldi	r20, 0x08	; 8
    c3be:	50 e0       	ldi	r21, 0x00	; 0
    c3c0:	0e 94 1b ad 	call	0x15a36	; 0x15a36 <__eerd_block_m128>
    c3c4:	a7 c0       	rjmp	.+334    	; 0xc514 <FSettingPumpID+0x4d2>
              stMenuPumpID=mpSendConfigToSlave;
		  }else if (IFType==IT_SLAVE){
    c3c6:	81 30       	cpi	r24, 0x01	; 1
    c3c8:	09 f0       	breq	.+2      	; 0xc3cc <FSettingPumpID+0x38a>
    c3ca:	ba c0       	rjmp	.+372    	; 0xc540 <FSettingPumpID+0x4fe>
    c3cc:	ab c0       	rjmp	.+342    	; 0xc524 <FSettingPumpID+0x4e2>
		      //SendConfig to Slave              
              stMenuPumpID=mpExitPumpId;
		  }
	      break;
     case mpSendConfigToSlave:
	      IsStandaloneAcknoledge=False;
    c3ce:	10 92 82 01 	sts	0x0182, r1
	      if (PPumpId[Idx]!=0){
    c3d2:	90 91 18 02 	lds	r25, 0x0218
    c3d6:	29 2f       	mov	r18, r25
    c3d8:	30 e0       	ldi	r19, 0x00	; 0
    c3da:	f9 01       	movw	r30, r18
    c3dc:	e0 5f       	subi	r30, 0xF0	; 240
    c3de:	fd 4f       	sbci	r31, 0xFD	; 253
    c3e0:	60 81       	ld	r22, Z
    c3e2:	66 23       	and	r22, r22
    c3e4:	81 f0       	breq	.+32     	; 0xc406 <FSettingPumpID+0x3c4>
		      PumpCount++;
    c3e6:	80 91 0e 02 	lds	r24, 0x020E
    c3ea:	8f 5f       	subi	r24, 0xFF	; 255
    c3ec:	80 93 0e 02 	sts	0x020E, r24
		      MsgPumpId=((Idx<<4)|(0x0F&PPumpId[Idx]));//[Idx][PumpId]
    c3f0:	6f 70       	andi	r22, 0x0F	; 15
    c3f2:	44 e0       	ldi	r20, 0x04	; 4
    c3f4:	22 0f       	add	r18, r18
    c3f6:	33 1f       	adc	r19, r19
    c3f8:	4a 95       	dec	r20
    c3fa:	e1 f7       	brne	.-8      	; 0xc3f4 <FSettingPumpID+0x3b2>
    c3fc:	62 2b       	or	r22, r18
    c3fe:	60 93 0f 02 	sts	0x020F, r22
	         //SendPoolingCommand(SC_SET_PUMPID,MsgPumpId);
			  SendSlaveCommand(SC_SET_PUMPID,MsgPumpId);
    c402:	8d e1       	ldi	r24, 0x1D	; 29
    c404:	02 c0       	rjmp	.+4      	; 0xc40a <FSettingPumpID+0x3c8>
		  }else SendSlaveCommand(SC_CLEAR_PUMPID,Idx);//SendPoolingCommand(SC_CLEAR_PUMPID,Idx);
    c406:	8e e1       	ldi	r24, 0x1E	; 30
    c408:	69 2f       	mov	r22, r25
    c40a:	0e 94 0a 60 	call	0xc014	; 0xc014 <SendSlaveCommand>
		  sprintf_P(lcdteks,PSTR("Id[%d]=%.2d  "),Idx+1,PPumpId[Idx]);
    c40e:	e0 91 18 02 	lds	r30, 0x0218
    c412:	f0 e0       	ldi	r31, 0x00	; 0
    c414:	ad b7       	in	r26, 0x3d	; 61
    c416:	be b7       	in	r27, 0x3e	; 62
    c418:	18 97       	sbiw	r26, 0x08	; 8
    c41a:	0f b6       	in	r0, 0x3f	; 63
    c41c:	f8 94       	cli
    c41e:	be bf       	out	0x3e, r27	; 62
    c420:	0f be       	out	0x3f, r0	; 63
    c422:	ad bf       	out	0x3d, r26	; 61
    c424:	2d b7       	in	r18, 0x3d	; 61
    c426:	3e b7       	in	r19, 0x3e	; 62
    c428:	2f 5f       	subi	r18, 0xFF	; 255
    c42a:	3f 4f       	sbci	r19, 0xFF	; 255
    c42c:	8e 01       	movw	r16, r28
    c42e:	0f 5f       	subi	r16, 0xFF	; 255
    c430:	1f 4f       	sbci	r17, 0xFF	; 255
    c432:	12 96       	adiw	r26, 0x02	; 2
    c434:	1c 93       	st	X, r17
    c436:	0e 93       	st	-X, r16
    c438:	11 97       	sbiw	r26, 0x01	; 1
    c43a:	8a ea       	ldi	r24, 0xAA	; 170
    c43c:	9d e0       	ldi	r25, 0x0D	; 13
    c43e:	d9 01       	movw	r26, r18
    c440:	13 96       	adiw	r26, 0x03	; 3
    c442:	9c 93       	st	X, r25
    c444:	8e 93       	st	-X, r24
    c446:	12 97       	sbiw	r26, 0x02	; 2
    c448:	31 96       	adiw	r30, 0x01	; 1
    c44a:	15 96       	adiw	r26, 0x05	; 5
    c44c:	fc 93       	st	X, r31
    c44e:	ee 93       	st	-X, r30
    c450:	14 97       	sbiw	r26, 0x04	; 4
    c452:	31 97       	sbiw	r30, 0x01	; 1
    c454:	e0 5f       	subi	r30, 0xF0	; 240
    c456:	fd 4f       	sbci	r31, 0xFD	; 253
    c458:	80 81       	ld	r24, Z
    c45a:	16 96       	adiw	r26, 0x06	; 6
    c45c:	8c 93       	st	X, r24
    c45e:	16 97       	sbiw	r26, 0x06	; 6
    c460:	17 96       	adiw	r26, 0x07	; 7
    c462:	1c 92       	st	X, r1
    c464:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
		  lcd_print(3,1,lcdteks);
    c468:	ed b7       	in	r30, 0x3d	; 61
    c46a:	fe b7       	in	r31, 0x3e	; 62
    c46c:	38 96       	adiw	r30, 0x08	; 8
    c46e:	0f b6       	in	r0, 0x3f	; 63
    c470:	f8 94       	cli
    c472:	fe bf       	out	0x3e, r31	; 62
    c474:	0f be       	out	0x3f, r0	; 63
    c476:	ed bf       	out	0x3d, r30	; 61
    c478:	83 e0       	ldi	r24, 0x03	; 3
    c47a:	61 e0       	ldi	r22, 0x01	; 1
    c47c:	a8 01       	movw	r20, r16
    c47e:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
          stMenuPumpID=mpWaitSlaveReply;
    c482:	88 e0       	ldi	r24, 0x08	; 8
    c484:	48 c0       	rjmp	.+144    	; 0xc516 <FSettingPumpID+0x4d4>
	      break;
     case mpWaitSlaveReply:
	      KeyPressed=_key_scan(1);
    c486:	81 e0       	ldi	r24, 0x01	; 1
    c488:	0e 94 58 a6 	call	0x14cb0	; 0x14cb0 <_key_scan>
	      KeyChar=_key_btn(KeyPressed);
    c48c:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <_key_btn>
		  if (KeyChar=='*'){
    c490:	8a 32       	cpi	r24, 0x2A	; 42
    c492:	79 f4       	brne	.+30     	; 0xc4b2 <FSettingPumpID+0x470>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    c494:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    c496:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    c498:	82 e0       	ldi	r24, 0x02	; 2
    c49a:	80 93 bc 01 	sts	0x01BC, r24
     case mpWaitSlaveReply:
	      KeyPressed=_key_scan(1);
	      KeyChar=_key_btn(KeyPressed);
		  if (KeyChar=='*'){
		      system_beep(2);
		      lcd_printf(2,1,PSTR("Cancel     "));
    c49e:	61 e0       	ldi	r22, 0x01	; 1
    c4a0:	4e e9       	ldi	r20, 0x9E	; 158
    c4a2:	5d e0       	ldi	r21, 0x0D	; 13
    c4a4:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
			  TimDisplay=0;
    c4a8:	10 92 92 01 	sts	0x0192, r1
		      stMenuPumpID=mpDelayExitPumpId;
    c4ac:	89 e0       	ldi	r24, 0x09	; 9
    c4ae:	80 93 1a 02 	sts	0x021A, r24
			  }
          if (IsStandaloneAcknoledge==True){
    c4b2:	10 91 82 01 	lds	r17, 0x0182
    c4b6:	11 30       	cpi	r17, 0x01	; 1
    c4b8:	09 f0       	breq	.+2      	; 0xc4bc <FSettingPumpID+0x47a>
    c4ba:	42 c0       	rjmp	.+132    	; 0xc540 <FSettingPumpID+0x4fe>
		      Idx++;
    c4bc:	80 91 18 02 	lds	r24, 0x0218
    c4c0:	8f 5f       	subi	r24, 0xFF	; 255
    c4c2:	80 93 18 02 	sts	0x0218, r24
		      if (Idx<8){//Finish, Send MaxPumpCount
    c4c6:	88 30       	cpi	r24, 0x08	; 8
    c4c8:	b8 f4       	brcc	.+46     	; 0xc4f8 <FSettingPumpID+0x4b6>
			      eeprom_write_byte(&DefPoolingPumpMax,PumpCount);
    c4ca:	85 e4       	ldi	r24, 0x45	; 69
    c4cc:	91 e0       	ldi	r25, 0x01	; 1
    c4ce:	60 91 0e 02 	lds	r22, 0x020E
    c4d2:	0e 94 3d ad 	call	0x15a7a	; 0x15a7a <__eewr_byte_m128>
				  PumpCountMax=eeprom_read_byte(&DefPoolingPumpMax);
    c4d6:	85 e4       	ldi	r24, 0x45	; 69
    c4d8:	91 e0       	ldi	r25, 0x01	; 1
    c4da:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
    c4de:	80 93 5c 01 	sts	0x015C, r24
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
    c4e2:	95 e1       	ldi	r25, 0x15	; 21
    c4e4:	90 93 29 06 	sts	0x0629, r25
	 PoolMsg=plMsg;
    c4e8:	80 93 55 0c 	sts	0x0C55, r24
     IsControlPooling=True;
    c4ec:	10 93 84 01 	sts	0x0184, r17
		      Idx++;
		      if (Idx<8){//Finish, Send MaxPumpCount
			      eeprom_write_byte(&DefPoolingPumpMax,PumpCount);
				  PumpCountMax=eeprom_read_byte(&DefPoolingPumpMax);
                  SendPoolingCommand(SC_SET_POOLING_MAX_PUMP,PumpCountMax);
			      TimDisplay=0;		 
    c4f0:	10 92 92 01 	sts	0x0192, r1
				  stMenuPumpID=mpDelaySaveConfig;
    c4f4:	87 e0       	ldi	r24, 0x07	; 7
    c4f6:	0f c0       	rjmp	.+30     	; 0xc516 <FSettingPumpID+0x4d4>
			  }else{lcd_printf(2,1,PSTR("Completed"));
    c4f8:	82 e0       	ldi	r24, 0x02	; 2
    c4fa:	61 e0       	ldi	r22, 0x01	; 1
    c4fc:	44 e9       	ldi	r20, 0x94	; 148
    c4fe:	5d e0       	ldi	r21, 0x0D	; 13
    c500:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
					TimDisplay=0;
    c504:	10 92 92 01 	sts	0x0192, r1
				    stMenuPumpID=mpDelayExitPumpId;
    c508:	89 e0       	ldi	r24, 0x09	; 9
    c50a:	05 c0       	rjmp	.+10     	; 0xc516 <FSettingPumpID+0x4d4>
				   }
			  }		  
	      break;
     case mpDelaySaveConfig:
	      if (TimDisplay>2)stMenuPumpID=mpSendConfigToSlave;
    c50c:	80 91 92 01 	lds	r24, 0x0192
    c510:	83 30       	cpi	r24, 0x03	; 3
    c512:	b0 f0       	brcs	.+44     	; 0xc540 <FSettingPumpID+0x4fe>
    c514:	86 e0       	ldi	r24, 0x06	; 6
    c516:	80 93 1a 02 	sts	0x021A, r24
    c51a:	12 c0       	rjmp	.+36     	; 0xc540 <FSettingPumpID+0x4fe>
	      break;
     case mpDelayExitPumpId:
	      if (TimDisplay>8)stMenuPumpID=mpExitPumpId;
    c51c:	80 91 92 01 	lds	r24, 0x0192
    c520:	89 30       	cpi	r24, 0x09	; 9
    c522:	70 f0       	brcs	.+28     	; 0xc540 <FSettingPumpID+0x4fe>
    c524:	8a e0       	ldi	r24, 0x0A	; 10
    c526:	f7 cf       	rjmp	.-18     	; 0xc516 <FSettingPumpID+0x4d4>
	      break;
     case mpExitPumpId:
	      if (IFType==IT_STANDALONE)
    c528:	80 91 00 01 	lds	r24, 0x0100
    c52c:	82 30       	cpi	r24, 0x02	; 2
    c52e:	21 f4       	brne	.+8      	; 0xc538 <FSettingPumpID+0x4f6>
		      SendSlaveCommand(SC_START_POOL_SEQUENCE,0);
    c530:	80 e2       	ldi	r24, 0x20	; 32
    c532:	60 e0       	ldi	r22, 0x00	; 0
    c534:	0e 94 0a 60 	call	0xc014	; 0xc014 <SendSlaveCommand>
	      Result=MENU_DONE;
          stMenuPumpID=mpInitPumpId;
    c538:	10 92 1a 02 	sts	0x021A, r1
    c53c:	81 e0       	ldi	r24, 0x01	; 1
    c53e:	01 c0       	rjmp	.+2      	; 0xc542 <FSettingPumpID+0x500>
    c540:	80 e0       	ldi	r24, 0x00	; 0
	      break;
	 }
   return Result;
}
    c542:	64 96       	adiw	r28, 0x14	; 20
    c544:	0f b6       	in	r0, 0x3f	; 63
    c546:	f8 94       	cli
    c548:	de bf       	out	0x3e, r29	; 62
    c54a:	0f be       	out	0x3f, r0	; 63
    c54c:	cd bf       	out	0x3d, r28	; 61
    c54e:	cf 91       	pop	r28
    c550:	df 91       	pop	r29
    c552:	1f 91       	pop	r17
    c554:	0f 91       	pop	r16
    c556:	ff 90       	pop	r15
    c558:	ef 90       	pop	r14
    c55a:	df 90       	pop	r13
    c55c:	cf 90       	pop	r12
    c55e:	bf 90       	pop	r11
    c560:	af 90       	pop	r10
    c562:	9f 90       	pop	r9
    c564:	08 95       	ret

0000c566 <_menu_pumpid>:

void _menu_pumpid(void){
	while(1){
	   if (FSettingPumpID()==MENU_DONE){
    c566:	0e 94 21 60 	call	0xc042	; 0xc042 <FSettingPumpID>
    c56a:	81 30       	cpi	r24, 0x01	; 1
    c56c:	e1 f7       	brne	.-8      	; 0xc566 <_menu_pumpid>
	       break;
	   }	   
	}
}
    c56e:	08 95       	ret

0000c570 <_menu_pump>:
        lcd_printf(4,15,PSTR("*)Exit"));
}



void _menu_pump(void){
    c570:	cf 93       	push	r28
    c572:	df 93       	push	r29
    c574:	c4 ec       	ldi	r28, 0xC4	; 196
    c576:	d9 e0       	ldi	r29, 0x09	; 9
	char __key;

	while(1){
		lcd_clear();_delay_ms(10);
    c578:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
    c57c:	ce 01       	movw	r24, r28
    c57e:	01 97       	sbiw	r24, 0x01	; 1
    c580:	f1 f7       	brne	.-4      	; 0xc57e <_menu_pump+0xe>
		lcd_printf(1, 1, PSTR("1)ID"));
    c582:	81 e0       	ldi	r24, 0x01	; 1
    c584:	61 e0       	ldi	r22, 0x01	; 1
    c586:	48 ec       	ldi	r20, 0xC8	; 200
    c588:	5e e0       	ldi	r21, 0x0E	; 14
    c58a:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		lcd_printf(2, 1, PSTR("2)Product"));
    c58e:	82 e0       	ldi	r24, 0x02	; 2
    c590:	61 e0       	ldi	r22, 0x01	; 1
    c592:	4e eb       	ldi	r20, 0xBE	; 190
    c594:	5e e0       	ldi	r21, 0x0E	; 14
    c596:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		lcd_printf(4, 1, PSTR("*)Exit"));
    c59a:	84 e0       	ldi	r24, 0x04	; 4
    c59c:	61 e0       	ldi	r22, 0x01	; 1
    c59e:	47 eb       	ldi	r20, 0xB7	; 183
    c5a0:	5e e0       	ldi	r21, 0x0E	; 14
    c5a2:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>

		while(1){
			__key = _key_scan(1);
    c5a6:	81 e0       	ldi	r24, 0x01	; 1
    c5a8:	0e 94 58 a6 	call	0x14cb0	; 0x14cb0 <_key_scan>
			if(__key == _KEY_CANCEL)
    c5ac:	87 3e       	cpi	r24, 0xE7	; 231
    c5ae:	51 f0       	breq	.+20     	; 0xc5c4 <_menu_pump+0x54>
				return;
			if(__key == _KEY_1){
    c5b0:	8e 3e       	cpi	r24, 0xEE	; 238
    c5b2:	19 f4       	brne	.+6      	; 0xc5ba <_menu_pump+0x4a>
				_menu_pumpid();
    c5b4:	0e 94 b3 62 	call	0xc566	; 0xc566 <_menu_pumpid>
    c5b8:	df cf       	rjmp	.-66     	; 0xc578 <_menu_pump+0x8>
				break;
			}
			if(__key == _KEY_2){
    c5ba:	8e 3d       	cpi	r24, 0xDE	; 222
    c5bc:	a1 f7       	brne	.-24     	; 0xc5a6 <_menu_pump+0x36>
				_menu_pumpprod();
    c5be:	0e 94 41 50 	call	0xa082	; 0xa082 <_menu_pumpprod>
    c5c2:	da cf       	rjmp	.-76     	; 0xc578 <_menu_pump+0x8>
				break;
			}
		}
	}
}
    c5c4:	df 91       	pop	r29
    c5c6:	cf 91       	pop	r28
    c5c8:	08 95       	ret

0000c5ca <FMenuPumpType>:





void FMenuPumpType(){
    c5ca:	cf 92       	push	r12
    c5cc:	df 92       	push	r13
    c5ce:	ef 92       	push	r14
    c5d0:	ff 92       	push	r15
    c5d2:	0f 93       	push	r16
    c5d4:	1f 93       	push	r17
    c5d6:	df 93       	push	r29
    c5d8:	cf 93       	push	r28
    c5da:	cd b7       	in	r28, 0x3d	; 61
    c5dc:	de b7       	in	r29, 0x3e	; 62
    c5de:	a8 97       	sbiw	r28, 0x28	; 40
    c5e0:	0f b6       	in	r0, 0x3f	; 63
    c5e2:	f8 94       	cli
    c5e4:	de bf       	out	0x3e, r29	; 62
    c5e6:	0f be       	out	0x3f, r0	; 63
    c5e8:	cd bf       	out	0x3d, r28	; 61
     stPumpType=ptInitMenu;
	 IsRunPumpType=True;
	 while(IsRunPumpType==True){
		  switch(stPumpType){
		  case ptInitMenu:
		       lcd_clear();
    c5ea:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
			   lcd_printf(1,1,PSTR("-Dispenser Brand-"));
    c5ee:	81 e0       	ldi	r24, 0x01	; 1
    c5f0:	61 e0       	ldi	r22, 0x01	; 1
    c5f2:	45 ea       	ldi	r20, 0xA5	; 165
    c5f4:	5e e0       	ldi	r21, 0x0E	; 14
    c5f6:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
			   IdxType=eeprom_read_byte(&DefDispenserBrand);
    c5fa:	88 e3       	ldi	r24, 0x38	; 56
    c5fc:	91 e0       	ldi	r25, 0x01	; 1
    c5fe:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
			   //Brand Selection
			   if (IdxType>=3) IdxType=0;
    c602:	83 30       	cpi	r24, 0x03	; 3
    c604:	08 f0       	brcs	.+2      	; 0xc608 <FMenuPumpType+0x3e>
    c606:	80 e0       	ldi	r24, 0x00	; 0
               strcpy_P(DispenserBrandName,(PGM_P)pgm_read_word(&(DefListDispenserName[IdxType])));
    c608:	08 2f       	mov	r16, r24
    c60a:	10 e0       	ldi	r17, 0x00	; 0
    c60c:	f8 01       	movw	r30, r16
    c60e:	ee 0f       	add	r30, r30
    c610:	ff 1f       	adc	r31, r31
    c612:	eb 5f       	subi	r30, 0xFB	; 251
    c614:	fc 4f       	sbci	r31, 0xFC	; 252
    c616:	65 91       	lpm	r22, Z+
    c618:	74 91       	lpm	r23, Z+
    c61a:	f5 e1       	ldi	r31, 0x15	; 21
    c61c:	cf 2e       	mov	r12, r31
    c61e:	d1 2c       	mov	r13, r1
    c620:	cc 0e       	add	r12, r28
    c622:	dd 1e       	adc	r13, r29
    c624:	c6 01       	movw	r24, r12
    c626:	0e 94 cc aa 	call	0x15598	; 0x15598 <strcpy_P>
			   sprintf_P(lcdteks,PSTR("%d.%s"),IdxType+1,DispenserBrandName);
    c62a:	8d b7       	in	r24, 0x3d	; 61
    c62c:	9e b7       	in	r25, 0x3e	; 62
    c62e:	08 97       	sbiw	r24, 0x08	; 8
    c630:	0f b6       	in	r0, 0x3f	; 63
    c632:	f8 94       	cli
    c634:	9e bf       	out	0x3e, r25	; 62
    c636:	0f be       	out	0x3f, r0	; 63
    c638:	8d bf       	out	0x3d, r24	; 61
    c63a:	ed b7       	in	r30, 0x3d	; 61
    c63c:	fe b7       	in	r31, 0x3e	; 62
    c63e:	31 96       	adiw	r30, 0x01	; 1
    c640:	7e 01       	movw	r14, r28
    c642:	08 94       	sec
    c644:	e1 1c       	adc	r14, r1
    c646:	f1 1c       	adc	r15, r1
    c648:	ad b7       	in	r26, 0x3d	; 61
    c64a:	be b7       	in	r27, 0x3e	; 62
    c64c:	12 96       	adiw	r26, 0x02	; 2
    c64e:	fc 92       	st	X, r15
    c650:	ee 92       	st	-X, r14
    c652:	11 97       	sbiw	r26, 0x01	; 1
    c654:	8f e9       	ldi	r24, 0x9F	; 159
    c656:	9e e0       	ldi	r25, 0x0E	; 14
    c658:	93 83       	std	Z+3, r25	; 0x03
    c65a:	82 83       	std	Z+2, r24	; 0x02
    c65c:	0f 5f       	subi	r16, 0xFF	; 255
    c65e:	1f 4f       	sbci	r17, 0xFF	; 255
    c660:	15 83       	std	Z+5, r17	; 0x05
    c662:	04 83       	std	Z+4, r16	; 0x04
    c664:	d7 82       	std	Z+7, r13	; 0x07
    c666:	c6 82       	std	Z+6, r12	; 0x06
    c668:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
			   lcd_print(2,1,lcdteks);
    c66c:	8d b7       	in	r24, 0x3d	; 61
    c66e:	9e b7       	in	r25, 0x3e	; 62
    c670:	08 96       	adiw	r24, 0x08	; 8
    c672:	0f b6       	in	r0, 0x3f	; 63
    c674:	f8 94       	cli
    c676:	9e bf       	out	0x3e, r25	; 62
    c678:	0f be       	out	0x3f, r0	; 63
    c67a:	8d bf       	out	0x3d, r24	; 61
    c67c:	82 e0       	ldi	r24, 0x02	; 2
    c67e:	61 e0       	ldi	r22, 0x01	; 1
    c680:	a7 01       	movw	r20, r14
    c682:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
			   lcd_printf(4,1,PSTR("[*]Exit  [#]Change "));
    c686:	84 e0       	ldi	r24, 0x04	; 4
    c688:	61 e0       	ldi	r22, 0x01	; 1
    c68a:	4b e8       	ldi	r20, 0x8B	; 139
    c68c:	5e e0       	ldi	r21, 0x0E	; 14
    c68e:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
			   if (IFType==IT_STANDALONE)
    c692:	80 91 00 01 	lds	r24, 0x0100
    c696:	82 30       	cpi	r24, 0x02	; 2
    c698:	21 f4       	brne	.+8      	; 0xc6a2 <FMenuPumpType+0xd8>
			       SendSlaveCommand(SC_STOP_POOL_SEQUENCE,0);
    c69a:	8f e1       	ldi	r24, 0x1F	; 31
    c69c:	60 e0       	ldi	r22, 0x00	; 0
    c69e:	0e 94 0a 60 	call	0xc014	; 0xc014 <SendSlaveCommand>
			   stPumpType=ptSelectBrand;
	 		   break;
          case ptSelectBrand:
		       KeyPressed = _key_scan(1);
    c6a2:	81 e0       	ldi	r24, 0x01	; 1
    c6a4:	0e 94 58 a6 	call	0x14cb0	; 0x14cb0 <_key_scan>
		       KeyChar    = _key_btn(KeyPressed);
    c6a8:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <_key_btn>

			   if (KeyChar=='#'){
    c6ac:	83 32       	cpi	r24, 0x23	; 35
    c6ae:	11 f5       	brne	.+68     	; 0xc6f4 <FMenuPumpType+0x12a>
			       DispenserBrand=eeprom_read_byte(&DefDispenserBrand);
    c6b0:	88 e3       	ldi	r24, 0x38	; 56
    c6b2:	91 e0       	ldi	r25, 0x01	; 1
    c6b4:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
				   if (DispenserBrand<ST_WAYNE_DART)
    c6b8:	82 30       	cpi	r24, 0x02	; 2
    c6ba:	20 f4       	brcc	.+8      	; 0xc6c4 <FMenuPumpType+0xfa>
				        DispenserBrand++;
    c6bc:	8f 5f       	subi	r24, 0xFF	; 255
    c6be:	80 93 5e 01 	sts	0x015E, r24
    c6c2:	02 c0       	rjmp	.+4      	; 0xc6c8 <FMenuPumpType+0xfe>
				   else DispenserBrand=ST_NONE;
    c6c4:	10 92 5e 01 	sts	0x015E, r1
                   //Apply DecimalSetting  
				   SetDispenser(DispenserBrand);
    c6c8:	80 91 5e 01 	lds	r24, 0x015E
    c6cc:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <SetDispenser>
			       eeprom_write_byte(&DefDispenserBrand,DispenserBrand);
    c6d0:	88 e3       	ldi	r24, 0x38	; 56
    c6d2:	91 e0       	ldi	r25, 0x01	; 1
    c6d4:	60 91 5e 01 	lds	r22, 0x015E
    c6d8:	0e 94 3d ad 	call	0x15a7a	; 0x15a7a <__eewr_byte_m128>
				   //SendPoolingCommand(SC_SET_PUMP_TYPE,eeprom_read_byte(&DefDispenserBrand));
				   SendSlaveCommand(SC_SET_PUMP_TYPE,eeprom_read_byte(&DefDispenserBrand));
    c6dc:	88 e3       	ldi	r24, 0x38	; 56
    c6de:	91 e0       	ldi	r25, 0x01	; 1
    c6e0:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
    c6e4:	68 2f       	mov	r22, r24
    c6e6:	8c e1       	ldi	r24, 0x1C	; 28
    c6e8:	0e 94 0a 60 	call	0xc014	; 0xc014 <SendSlaveCommand>
				   IsSetPumpType=True;//False;
    c6ec:	81 e0       	ldi	r24, 0x01	; 1
    c6ee:	80 93 23 01 	sts	0x0123, r24
    c6f2:	0b c0       	rjmp	.+22     	; 0xc70a <FMenuPumpType+0x140>
			       stPumpType=ptUpdated;			   
			   }else
			   if (KeyChar=='*'){
    c6f4:	8a 32       	cpi	r24, 0x2A	; 42
    c6f6:	a9 f6       	brne	.-86     	; 0xc6a2 <FMenuPumpType+0xd8>
			       IsRunPumpType=False;
				   if (IFType==IT_STANDALONE)SendSlaveCommand(SC_START_POOL_SEQUENCE,0);
    c6f8:	80 91 00 01 	lds	r24, 0x0100
    c6fc:	82 30       	cpi	r24, 0x02	; 2
    c6fe:	51 f4       	brne	.+20     	; 0xc714 <FMenuPumpType+0x14a>
    c700:	80 e2       	ldi	r24, 0x20	; 32
    c702:	60 e0       	ldi	r22, 0x00	; 0
    c704:	0e 94 0a 60 	call	0xc014	; 0xc014 <SendSlaveCommand>
    c708:	05 c0       	rjmp	.+10     	; 0xc714 <FMenuPumpType+0x14a>
			   }
		       break;
          case ptUpdated:
		       if (IsSetPumpType==True){
    c70a:	80 91 23 01 	lds	r24, 0x0123
    c70e:	81 30       	cpi	r24, 0x01	; 1
    c710:	e1 f7       	brne	.-8      	; 0xc70a <FMenuPumpType+0x140>
    c712:	6b cf       	rjmp	.-298    	; 0xc5ea <FMenuPumpType+0x20>
			       stPumpType=ptInitMenu;
			   }
		       break;		         
	      }
	 }     
}
    c714:	a8 96       	adiw	r28, 0x28	; 40
    c716:	0f b6       	in	r0, 0x3f	; 63
    c718:	f8 94       	cli
    c71a:	de bf       	out	0x3e, r29	; 62
    c71c:	0f be       	out	0x3f, r0	; 63
    c71e:	cd bf       	out	0x3d, r28	; 61
    c720:	cf 91       	pop	r28
    c722:	df 91       	pop	r29
    c724:	1f 91       	pop	r17
    c726:	0f 91       	pop	r16
    c728:	ff 90       	pop	r15
    c72a:	ef 90       	pop	r14
    c72c:	df 90       	pop	r13
    c72e:	cf 90       	pop	r12
    c730:	08 95       	ret

0000c732 <FSettingPump>:
	      break;
	 
	 }
*/
	 char __key,Result;
		lcd_clear();_delay_ms(10);
    c732:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
    c736:	84 ec       	ldi	r24, 0xC4	; 196
    c738:	99 e0       	ldi	r25, 0x09	; 9
    c73a:	01 97       	sbiw	r24, 0x01	; 1
    c73c:	f1 f7       	brne	.-4      	; 0xc73a <FSettingPump+0x8>
		lcd_printf(1,1, PSTR("1)ID     "));
    c73e:	81 e0       	ldi	r24, 0x01	; 1
    c740:	61 e0       	ldi	r22, 0x01	; 1
    c742:	44 e2       	ldi	r20, 0x24	; 36
    c744:	53 e1       	ldi	r21, 0x13	; 19
    c746:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		lcd_printf(2,1, PSTR("2)Product"));
    c74a:	82 e0       	ldi	r24, 0x02	; 2
    c74c:	61 e0       	ldi	r22, 0x01	; 1
    c74e:	4a e1       	ldi	r20, 0x1A	; 26
    c750:	53 e1       	ldi	r21, 0x13	; 19
    c752:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		if (IFType==IT_STANDALONE){
    c756:	80 91 00 01 	lds	r24, 0x0100
    c75a:	82 30       	cpi	r24, 0x02	; 2
    c75c:	61 f4       	brne	.+24     	; 0xc776 <FSettingPump+0x44>
		    lcd_printf(3,1, PSTR("3)Label  "));
    c75e:	83 e0       	ldi	r24, 0x03	; 3
    c760:	61 e0       	ldi	r22, 0x01	; 1
    c762:	40 e1       	ldi	r20, 0x10	; 16
    c764:	53 e1       	ldi	r21, 0x13	; 19
    c766:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		    lcd_printf(4,1, PSTR("4)Brand  *)Exit"));
    c76a:	84 e0       	ldi	r24, 0x04	; 4
    c76c:	61 e0       	ldi	r22, 0x01	; 1
    c76e:	40 e0       	ldi	r20, 0x00	; 0
    c770:	53 e1       	ldi	r21, 0x13	; 19
    c772:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		}

		while(1){
			__key = _key_scan(1);
    c776:	81 e0       	ldi	r24, 0x01	; 1
    c778:	0e 94 58 a6 	call	0x14cb0	; 0x14cb0 <_key_scan>
			if(__key == _KEY_CANCEL)
    c77c:	87 3e       	cpi	r24, 0xE7	; 231
    c77e:	d9 f0       	breq	.+54     	; 0xc7b6 <FSettingPump+0x84>
				break;
			if(__key == _KEY_1){
    c780:	8e 3e       	cpi	r24, 0xEE	; 238
    c782:	19 f4       	brne	.+6      	; 0xc78a <FSettingPump+0x58>
				_menu_pumpid();
    c784:	0e 94 b3 62 	call	0xc566	; 0xc566 <_menu_pumpid>
    c788:	16 c0       	rjmp	.+44     	; 0xc7b6 <FSettingPump+0x84>
				break;
			}
			if(__key == _KEY_2){
    c78a:	8e 3d       	cpi	r24, 0xDE	; 222
    c78c:	19 f4       	brne	.+6      	; 0xc794 <FSettingPump+0x62>
				_menu_pumpprod();
    c78e:	0e 94 41 50 	call	0xa082	; 0xa082 <_menu_pumpprod>
    c792:	11 c0       	rjmp	.+34     	; 0xc7b6 <FSettingPump+0x84>
				break;
			}

			if((__key == _KEY_3)&&(IFType==IT_STANDALONE)){
    c794:	8e 3b       	cpi	r24, 0xBE	; 190
    c796:	39 f4       	brne	.+14     	; 0xc7a6 <FSettingPump+0x74>
    c798:	80 91 00 01 	lds	r24, 0x0100
    c79c:	82 30       	cpi	r24, 0x02	; 2
    c79e:	59 f7       	brne	.-42     	; 0xc776 <FSettingPump+0x44>
			    FMenuPumpLabel();
    c7a0:	0e 94 54 50 	call	0xa0a8	; 0xa0a8 <FMenuPumpLabel>
    c7a4:	08 c0       	rjmp	.+16     	; 0xc7b6 <FSettingPump+0x84>
				break;
			}
			if((__key == _KEY_4)&&(IFType==IT_STANDALONE)){
    c7a6:	8d 3e       	cpi	r24, 0xED	; 237
    c7a8:	31 f7       	brne	.-52     	; 0xc776 <FSettingPump+0x44>
    c7aa:	80 91 00 01 	lds	r24, 0x0100
    c7ae:	82 30       	cpi	r24, 0x02	; 2
    c7b0:	11 f7       	brne	.-60     	; 0xc776 <FSettingPump+0x44>
			    FMenuPumpType();
    c7b2:	0e 94 e5 62 	call	0xc5ca	; 0xc5ca <FMenuPumpType>

		}

	Result=MENU_DONE;
	return Result;
}
    c7b6:	81 e0       	ldi	r24, 0x01	; 1
    c7b8:	08 95       	ret

0000c7ba <StoreStandaloneTransData>:
     SendSlaveCommand(SC_TOTALIZER_ACK,iPumpID);
	 UpdateStandaloneStatus((iPumpID&0x0F),PS_TOTALIZER);	 
}
         
			                                         //      STX     MSGID  PumpID              6        8        8
void StoreStandaloneTransData(char *strRawTransData){//  [0x50,0x05]  01      01      1       004500   00000200  00000012 [0x06,0x60] = 24
    c7ba:	3f 92       	push	r3
    c7bc:	4f 92       	push	r4
    c7be:	5f 92       	push	r5
    c7c0:	6f 92       	push	r6
    c7c2:	7f 92       	push	r7
    c7c4:	8f 92       	push	r8
    c7c6:	9f 92       	push	r9
    c7c8:	af 92       	push	r10
    c7ca:	bf 92       	push	r11
    c7cc:	cf 92       	push	r12
    c7ce:	df 92       	push	r13
    c7d0:	ef 92       	push	r14
    c7d2:	ff 92       	push	r15
    c7d4:	0f 93       	push	r16
    c7d6:	1f 93       	push	r17
    c7d8:	df 93       	push	r29
    c7da:	cf 93       	push	r28
    c7dc:	cd b7       	in	r28, 0x3d	; 61
    c7de:	de b7       	in	r29, 0x3e	; 62
    c7e0:	e0 97       	sbiw	r28, 0x30	; 48
    c7e2:	0f b6       	in	r0, 0x3f	; 63
    c7e4:	f8 94       	cli
    c7e6:	de bf       	out	0x3e, r29	; 62
    c7e8:	0f be       	out	0x3f, r0	; 63
    c7ea:	cd bf       	out	0x3d, r28	; 61
    c7ec:	7c 01       	movw	r14, r24
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    c7ee:	dc 01       	movw	r26, r24
    c7f0:	12 96       	adiw	r26, 0x02	; 2
    c7f2:	8c 91       	ld	r24, X
    c7f4:	12 97       	sbiw	r26, 0x02	; 2
    c7f6:	89 83       	std	Y+1, r24	; 0x01
    c7f8:	13 96       	adiw	r26, 0x03	; 3
    c7fa:	8c 91       	ld	r24, X
    c7fc:	8a 83       	std	Y+2, r24	; 0x02
	 }Dest[Length]=0;
    c7fe:	1b 82       	std	Y+3, r1	; 0x03
	 char strSend[30];
	 char TransDigit;
	 char FIPAddr;
      
	 StrPosCopy(strRawTransData,strPumpID,2,2);
	 RemZeroLead(strPumpID);
    c800:	8e 01       	movw	r16, r28
    c802:	0f 5f       	subi	r16, 0xFF	; 255
    c804:	1f 4f       	sbci	r17, 0xFF	; 255
    c806:	c8 01       	movw	r24, r16
    c808:	0e 94 3f 25 	call	0x4a7e	; 0x4a7e <RemZeroLead>
	 iPumpID=atoi(strPumpID); 
    c80c:	c8 01       	movw	r24, r16
    c80e:	0e 94 ae aa 	call	0x1555c	; 0x1555c <atoi>
    c812:	58 2e       	mov	r5, r24
	 
	 FIPAddr=GetFIPAddr(iPumpID);
    c814:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <GetFIPAddr>
    c818:	d8 2e       	mov	r13, r24
	 if (FIPAddr>0){
    c81a:	88 23       	and	r24, r24
    c81c:	09 f4       	brne	.+2      	; 0xc820 <StoreStandaloneTransData+0x66>
    c81e:	01 c2       	rjmp	.+1026   	; 0xcc22 <StoreStandaloneTransData+0x468>
	    Dest[IdxSource+i]=Source[i];
	 }Dest[IdxSource+Length]=0;
}
char CharPosCopy(char *Source, unsigned int IdxSource){
     char Result;
     Result=Source[IdxSource];
    c820:	f7 01       	movw	r30, r14
    c822:	34 80       	ldd	r3, Z+4	; 0x04

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    c824:	45 80       	ldd	r4, Z+5	; 0x05
    c826:	14 e0       	ldi	r17, 0x04	; 4
    c828:	a1 2e       	mov	r10, r17
    c82a:	b1 2c       	mov	r11, r1
    c82c:	ac 0e       	add	r10, r28
    c82e:	bd 1e       	adc	r11, r29
    c830:	f5 01       	movw	r30, r10
    c832:	ce 01       	movw	r24, r28
    c834:	0b 96       	adiw	r24, 0x0b	; 11
	     strMemory[i]=data;
    c836:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    c838:	e8 17       	cp	r30, r24
    c83a:	f9 07       	cpc	r31, r25
    c83c:	e1 f7       	brne	.-8      	; 0xc836 <StoreStandaloneTransData+0x7c>
    c83e:	bd e1       	ldi	r27, 0x1D	; 29
    c840:	8b 2e       	mov	r8, r27
    c842:	91 2c       	mov	r9, r1
    c844:	8c 0e       	add	r8, r28
    c846:	9d 1e       	adc	r9, r29
    c848:	94 01       	movw	r18, r8
	     strMemory[i]=data;
    c84a:	ce 01       	movw	r24, r28
    c84c:	87 96       	adiw	r24, 0x27	; 39
    c84e:	d9 01       	movw	r26, r18
    c850:	1d 92       	st	X+, r1
    c852:	9d 01       	movw	r18, r26

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    c854:	a8 17       	cp	r26, r24
    c856:	b9 07       	cpc	r27, r25
    c858:	d1 f7       	brne	.-12     	; 0xc84e <StoreStandaloneTransData+0x94>
    c85a:	3d 01       	movw	r6, r26
    c85c:	fd 01       	movw	r30, r26
	     strMemory[i]=data;
    c85e:	ce 01       	movw	r24, r28
    c860:	c1 96       	adiw	r24, 0x31	; 49
    c862:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    c864:	e8 17       	cp	r30, r24
    c866:	f9 07       	cpc	r31, r25
    c868:	e1 f7       	brne	.-8      	; 0xc862 <StoreStandaloneTransData+0xa8>
    c86a:	a7 01       	movw	r20, r14
    c86c:	d7 01       	movw	r26, r14
    c86e:	f5 01       	movw	r30, r10
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    c870:	be 01       	movw	r22, r28
    c872:	66 5f       	subi	r22, 0xF6	; 246
    c874:	7f 4f       	sbci	r23, 0xFF	; 255
	    Dest[i]=Source[IdxSource+i];
    c876:	16 96       	adiw	r26, 0x06	; 6
    c878:	8c 91       	ld	r24, X
    c87a:	16 97       	sbiw	r26, 0x06	; 6
    c87c:	81 93       	st	Z+, r24
    c87e:	11 96       	adiw	r26, 0x01	; 1
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    c880:	e6 17       	cp	r30, r22
    c882:	f7 07       	cpc	r31, r23
    c884:	c1 f7       	brne	.-16     	; 0xc876 <StoreStandaloneTransData+0xbc>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    c886:	1a 86       	std	Y+10, r1	; 0x0a
    c888:	d7 01       	movw	r26, r14
    c88a:	f4 01       	movw	r30, r8
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    c88c:	be 01       	movw	r22, r28
    c88e:	6b 5d       	subi	r22, 0xDB	; 219
    c890:	7f 4f       	sbci	r23, 0xFF	; 255
	    Dest[i]=Source[IdxSource+i];
    c892:	1c 96       	adiw	r26, 0x0c	; 12
    c894:	8c 91       	ld	r24, X
    c896:	1c 97       	sbiw	r26, 0x0c	; 12
    c898:	81 93       	st	Z+, r24
    c89a:	11 96       	adiw	r26, 0x01	; 1
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    c89c:	e6 17       	cp	r30, r22
    c89e:	f7 07       	cpc	r31, r23
    c8a0:	c1 f7       	brne	.-16     	; 0xc892 <StoreStandaloneTransData+0xd8>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    c8a2:	1d a2       	std	Y+37, r1	; 0x25
    c8a4:	f9 01       	movw	r30, r18
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    c8a6:	be 01       	movw	r22, r28
    c8a8:	69 5d       	subi	r22, 0xD9	; 217
    c8aa:	7f 4f       	sbci	r23, 0xFF	; 255
    c8ac:	9e 01       	movw	r18, r28
    c8ae:	21 5d       	subi	r18, 0xD1	; 209
    c8b0:	3f 4f       	sbci	r19, 0xFF	; 255
	    Dest[i]=Source[IdxSource+i];
    c8b2:	da 01       	movw	r26, r20
    c8b4:	54 96       	adiw	r26, 0x14	; 20
    c8b6:	8c 91       	ld	r24, X
    c8b8:	81 93       	st	Z+, r24
    c8ba:	4f 5f       	subi	r20, 0xFF	; 255
    c8bc:	5f 4f       	sbci	r21, 0xFF	; 255
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    c8be:	e2 17       	cp	r30, r18
    c8c0:	f3 07       	cpc	r31, r19
    c8c2:	b9 f7       	brne	.-18     	; 0xc8b2 <StoreStandaloneTransData+0xf8>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    c8c4:	1f a6       	std	Y+47, r1	; 0x2f
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
    c8c6:	f7 01       	movw	r30, r14
    c8c8:	84 8d       	ldd	r24, Z+28	; 0x1c
    c8ca:	80 53       	subi	r24, 0x30	; 48
    c8cc:	8a 30       	cpi	r24, 0x0A	; 10
    c8ce:	98 f4       	brcc	.+38     	; 0xc8f6 <StoreStandaloneTransData+0x13c>

		 TransDigit=Ord(CharPosCopy(strRawTransData,28));
		 //Normalize7Digit
		 //sprintf_P(strSend,PSTR("Digit: %d"),TransDigit);
		 //uart_print(1,1,strSend);
		 if  (TransDigit==8){
    c8d0:	88 30       	cpi	r24, 0x08	; 8
    c8d2:	89 f4       	brne	.+34     	; 0xc8f6 <StoreStandaloneTransData+0x13c>
			  StrPosCopy(strPMoney,strPMoney,0,strlen(strPMoney)-1);	 
    c8d4:	fb 01       	movw	r30, r22
    c8d6:	01 90       	ld	r0, Z+
    c8d8:	00 20       	and	r0, r0
    c8da:	e9 f7       	brne	.-6      	; 0xc8d6 <StoreStandaloneTransData+0x11c>
    c8dc:	e6 1b       	sub	r30, r22
    c8de:	f7 0b       	sbc	r31, r23
    c8e0:	32 97       	sbiw	r30, 0x02	; 2
    c8e2:	80 e0       	ldi	r24, 0x00	; 0
    c8e4:	90 e0       	ldi	r25, 0x00	; 0
    c8e6:	01 c0       	rjmp	.+2      	; 0xc8ea <StoreStandaloneTransData+0x130>
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    c8e8:	01 96       	adiw	r24, 0x01	; 1
    c8ea:	8e 17       	cp	r24, r30
    c8ec:	9f 07       	cpc	r25, r31
    c8ee:	e0 f3       	brcs	.-8      	; 0xc8e8 <StoreStandaloneTransData+0x12e>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    c8f0:	ec 0f       	add	r30, r28
    c8f2:	fd 1f       	adc	r31, r29
    c8f4:	17 a2       	std	Z+39, r1	; 0x27
		 //sprintf_P(strSend,PSTR("Digit: %d"),TransDigit);
		 //uart_print(1,1,strSend);
		 if  (TransDigit==8){
			  StrPosCopy(strPMoney,strPMoney,0,strlen(strPMoney)-1);	 
		 }
		 RemZeroLead(strPPU);
    c8f6:	ce 01       	movw	r24, r28
    c8f8:	04 96       	adiw	r24, 0x04	; 4
    c8fa:	0e 94 3f 25 	call	0x4a7e	; 0x4a7e <RemZeroLead>
		 RemZeroLead(strPVolume);
    c8fe:	ce 01       	movw	r24, r28
    c900:	4d 96       	adiw	r24, 0x1d	; 29
    c902:	0e 94 3f 25 	call	0x4a7e	; 0x4a7e <RemZeroLead>
		 RemZeroLead(strPMoney);
    c906:	8e 01       	movw	r16, r28
    c908:	09 5d       	subi	r16, 0xD9	; 217
    c90a:	1f 4f       	sbci	r17, 0xFF	; 255
    c90c:	c8 01       	movw	r24, r16
    c90e:	0e 94 3f 25 	call	0x4a7e	; 0x4a7e <RemZeroLead>
		 //sprintf_P(strSend,PSTR("Money: %s"),strPMoney);
		 //uart_print(1,1,strSend);


		 //Void Detection
		 if (atoi(strPMoney)==0)TransactionStatus=TS_VOID;
    c912:	c8 01       	movw	r24, r16
    c914:	0e 94 ae aa 	call	0x1555c	; 0x1555c <atoi>
    c918:	89 2b       	or	r24, r25
    c91a:	09 f0       	breq	.+2      	; 0xc91e <StoreStandaloneTransData+0x164>
    c91c:	07 c1       	rjmp	.+526    	; 0xcb2c <StoreStandaloneTransData+0x372>
		 else TransactionStatus=TS_NEW;
		 
		 if (TransactionStatus==TS_VOID){//RejectData
			 UpdateStandaloneStatus((iPumpID&0x0F),PS_VOID);
    c91e:	85 2d       	mov	r24, r5
    c920:	8f 70       	andi	r24, 0x0F	; 15
    c922:	63 e1       	ldi	r22, 0x13	; 19
    c924:	0e 94 2d 20 	call	0x405a	; 0x405a <UpdateStandaloneStatus>
    c928:	7c c1       	rjmp	.+760    	; 0xcc22 <StoreStandaloneTransData+0x468>
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    c92a:	f9 01       	movw	r30, r18
    c92c:	81 91       	ld	r24, Z+
    c92e:	9f 01       	movw	r18, r30
    c930:	fb 01       	movw	r30, r22
    c932:	81 93       	st	Z+, r24
    c934:	bf 01       	movw	r22, r30
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    c936:	24 17       	cp	r18, r20
    c938:	35 07       	cpc	r19, r21
    c93a:	b9 f7       	brne	.-18     	; 0xc92a <StoreStandaloneTransData+0x170>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    c93c:	85 e3       	ldi	r24, 0x35	; 53
    c93e:	90 e0       	ldi	r25, 0x00	; 0
    c940:	9c 01       	movw	r18, r24
    c942:	c2 9e       	mul	r12, r18
    c944:	c0 01       	movw	r24, r0
    c946:	c3 9e       	mul	r12, r19
    c948:	90 0d       	add	r25, r0
    c94a:	d2 9e       	mul	r13, r18
    c94c:	90 0d       	add	r25, r0
    c94e:	11 24       	eor	r1, r1
    c950:	fc 01       	movw	r30, r24
    c952:	e6 5d       	subi	r30, 0xD6	; 214
    c954:	f9 4f       	sbci	r31, 0xF9	; 249
    c956:	ea 0f       	add	r30, r26
    c958:	fb 1f       	adc	r31, r27
    c95a:	13 82       	std	Z+3, r1	; 0x03
			 sprintf_P(strTransTime,PSTR("%s"),strSystemTime);
			 sprintf_P(strShift,PSTR("%d"),eeprom_read_byte(&DefShift));
					 
			 //TransNum,Date,Time
			 StrPosCopy(strTranNo,RecPumpData[FIPAddr].strTransNum,0,strlen(strTranNo));
			 StrPosCopy(strTransDate,RecPumpData[FIPAddr].strTransDate,0,strlen(strTransDate));
    c95c:	fe 01       	movw	r30, r28
    c95e:	3b 96       	adiw	r30, 0x0b	; 11
    c960:	df 01       	movw	r26, r30
    c962:	0d 90       	ld	r0, X+
    c964:	00 20       	and	r0, r0
    c966:	e9 f7       	brne	.-6      	; 0xc962 <StoreStandaloneTransData+0x1a8>
    c968:	11 97       	sbiw	r26, 0x01	; 1
    c96a:	ae 1b       	sub	r26, r30
    c96c:	bf 0b       	sbc	r27, r31
    c96e:	bf 01       	movw	r22, r30
    c970:	9c 01       	movw	r18, r24
    c972:	2c 5c       	subi	r18, 0xCC	; 204
    c974:	39 4f       	sbci	r19, 0xF9	; 249
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    c976:	af 01       	movw	r20, r30
    c978:	4a 0f       	add	r20, r26
    c97a:	5b 1f       	adc	r21, r27
    c97c:	06 c0       	rjmp	.+12     	; 0xc98a <StoreStandaloneTransData+0x1d0>
	    Dest[i]=Source[IdxSource+i];
    c97e:	fb 01       	movw	r30, r22
    c980:	81 91       	ld	r24, Z+
    c982:	bf 01       	movw	r22, r30
    c984:	f9 01       	movw	r30, r18
    c986:	81 93       	st	Z+, r24
    c988:	9f 01       	movw	r18, r30
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    c98a:	64 17       	cp	r22, r20
    c98c:	75 07       	cpc	r23, r21
    c98e:	b9 f7       	brne	.-18     	; 0xc97e <StoreStandaloneTransData+0x1c4>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    c990:	85 e3       	ldi	r24, 0x35	; 53
    c992:	90 e0       	ldi	r25, 0x00	; 0
    c994:	9c 01       	movw	r18, r24
    c996:	c2 9e       	mul	r12, r18
    c998:	c0 01       	movw	r24, r0
    c99a:	c3 9e       	mul	r12, r19
    c99c:	90 0d       	add	r25, r0
    c99e:	d2 9e       	mul	r13, r18
    c9a0:	90 0d       	add	r25, r0
    c9a2:	11 24       	eor	r1, r1
    c9a4:	fc 01       	movw	r30, r24
    c9a6:	e6 5d       	subi	r30, 0xD6	; 214
    c9a8:	f9 4f       	sbci	r31, 0xF9	; 249
    c9aa:	ea 0f       	add	r30, r26
    c9ac:	fb 1f       	adc	r31, r27
    c9ae:	12 86       	std	Z+10, r1	; 0x0a
			 sprintf_P(strShift,PSTR("%d"),eeprom_read_byte(&DefShift));
					 
			 //TransNum,Date,Time
			 StrPosCopy(strTranNo,RecPumpData[FIPAddr].strTransNum,0,strlen(strTranNo));
			 StrPosCopy(strTransDate,RecPumpData[FIPAddr].strTransDate,0,strlen(strTransDate));
			 StrPosCopy(strTransTime,RecPumpData[FIPAddr].strTransTime,0,strlen(strTransTime));
    c9b0:	fe 01       	movw	r30, r28
    c9b2:	74 96       	adiw	r30, 0x14	; 20
    c9b4:	df 01       	movw	r26, r30
    c9b6:	0d 90       	ld	r0, X+
    c9b8:	00 20       	and	r0, r0
    c9ba:	e9 f7       	brne	.-6      	; 0xc9b6 <StoreStandaloneTransData+0x1fc>
    c9bc:	11 97       	sbiw	r26, 0x01	; 1
    c9be:	ae 1b       	sub	r26, r30
    c9c0:	bf 0b       	sbc	r27, r31
    c9c2:	bf 01       	movw	r22, r30
    c9c4:	9c 01       	movw	r18, r24
    c9c6:	23 5c       	subi	r18, 0xC3	; 195
    c9c8:	39 4f       	sbci	r19, 0xF9	; 249
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    c9ca:	af 01       	movw	r20, r30
    c9cc:	4a 0f       	add	r20, r26
    c9ce:	5b 1f       	adc	r21, r27
    c9d0:	06 c0       	rjmp	.+12     	; 0xc9de <StoreStandaloneTransData+0x224>
	    Dest[i]=Source[IdxSource+i];
    c9d2:	fb 01       	movw	r30, r22
    c9d4:	81 91       	ld	r24, Z+
    c9d6:	bf 01       	movw	r22, r30
    c9d8:	f9 01       	movw	r30, r18
    c9da:	81 93       	st	Z+, r24
    c9dc:	9f 01       	movw	r18, r30
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    c9de:	64 17       	cp	r22, r20
    c9e0:	75 07       	cpc	r23, r21
    c9e2:	b9 f7       	brne	.-18     	; 0xc9d2 <StoreStandaloneTransData+0x218>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    c9e4:	85 e3       	ldi	r24, 0x35	; 53
    c9e6:	90 e0       	ldi	r25, 0x00	; 0
    c9e8:	c8 9e       	mul	r12, r24
    c9ea:	70 01       	movw	r14, r0
    c9ec:	c9 9e       	mul	r12, r25
    c9ee:	f0 0c       	add	r15, r0
    c9f0:	d8 9e       	mul	r13, r24
    c9f2:	f0 0c       	add	r15, r0
    c9f4:	11 24       	eor	r1, r1
    c9f6:	87 01       	movw	r16, r14
    c9f8:	06 5d       	subi	r16, 0xD6	; 214
    c9fa:	19 4f       	sbci	r17, 0xF9	; 249
    c9fc:	a0 0f       	add	r26, r16
    c9fe:	b1 1f       	adc	r27, r17
    ca00:	53 96       	adiw	r26, 0x13	; 19
    ca02:	1c 92       	st	X, r1
			 //TransNum,Date,Time
			 StrPosCopy(strTranNo,RecPumpData[FIPAddr].strTransNum,0,strlen(strTranNo));
			 StrPosCopy(strTransDate,RecPumpData[FIPAddr].strTransDate,0,strlen(strTransDate));
			 StrPosCopy(strTransTime,RecPumpData[FIPAddr].strTransTime,0,strlen(strTransTime));
			 //Grade Nozzle Shift
			 RecPumpData[FIPAddr].Grade=PGrade;
    ca04:	f0 ed       	ldi	r31, 0xD0	; 208
    ca06:	4f 0e       	add	r4, r31
    ca08:	d8 01       	movw	r26, r16
    ca0a:	4c 92       	st	X, r4
			 RecPumpData[FIPAddr].Nozzle=PNozzle;
    ca0c:	3f 0e       	add	r3, r31
    ca0e:	11 96       	adiw	r26, 0x01	; 1
    ca10:	3c 92       	st	X, r3
			 RecPumpData[FIPAddr].Shift=atoi(strShift);
    ca12:	8a ee       	ldi	r24, 0xEA	; 234
    ca14:	9c e0       	ldi	r25, 0x0C	; 12
    ca16:	0e 94 ae aa 	call	0x1555c	; 0x1555c <atoi>
    ca1a:	f8 01       	movw	r30, r16
    ca1c:	82 83       	std	Z+2, r24	; 0x02
			 //Price Volume Money
			 StrPosCopy(strPPU,RecPumpData[FIPAddr].Price,0,strlen(strPPU));
    ca1e:	fe 01       	movw	r30, r28
    ca20:	34 96       	adiw	r30, 0x04	; 4
    ca22:	df 01       	movw	r26, r30
    ca24:	0d 90       	ld	r0, X+
    ca26:	00 20       	and	r0, r0
    ca28:	e9 f7       	brne	.-6      	; 0xca24 <StoreStandaloneTransData+0x26a>
    ca2a:	11 97       	sbiw	r26, 0x01	; 1
    ca2c:	ae 1b       	sub	r26, r30
    ca2e:	bf 0b       	sbc	r27, r31
    ca30:	97 01       	movw	r18, r14
    ca32:	2a 5b       	subi	r18, 0xBA	; 186
    ca34:	39 4f       	sbci	r19, 0xF9	; 249
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    ca36:	af 01       	movw	r20, r30
    ca38:	4a 0f       	add	r20, r26
    ca3a:	5b 1f       	adc	r21, r27
    ca3c:	06 c0       	rjmp	.+12     	; 0xca4a <StoreStandaloneTransData+0x290>
	    Dest[i]=Source[IdxSource+i];
    ca3e:	f5 01       	movw	r30, r10
    ca40:	81 91       	ld	r24, Z+
    ca42:	5f 01       	movw	r10, r30
    ca44:	f9 01       	movw	r30, r18
    ca46:	81 93       	st	Z+, r24
    ca48:	9f 01       	movw	r18, r30
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    ca4a:	a4 16       	cp	r10, r20
    ca4c:	b5 06       	cpc	r11, r21
    ca4e:	b9 f7       	brne	.-18     	; 0xca3e <StoreStandaloneTransData+0x284>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    ca50:	85 e3       	ldi	r24, 0x35	; 53
    ca52:	90 e0       	ldi	r25, 0x00	; 0
    ca54:	9c 01       	movw	r18, r24
    ca56:	c2 9e       	mul	r12, r18
    ca58:	c0 01       	movw	r24, r0
    ca5a:	c3 9e       	mul	r12, r19
    ca5c:	90 0d       	add	r25, r0
    ca5e:	d2 9e       	mul	r13, r18
    ca60:	90 0d       	add	r25, r0
    ca62:	11 24       	eor	r1, r1
    ca64:	fc 01       	movw	r30, r24
    ca66:	e6 5d       	subi	r30, 0xD6	; 214
    ca68:	f9 4f       	sbci	r31, 0xF9	; 249
    ca6a:	ea 0f       	add	r30, r26
    ca6c:	fb 1f       	adc	r31, r27
    ca6e:	14 8e       	std	Z+28, r1	; 0x1c
			 RecPumpData[FIPAddr].Grade=PGrade;
			 RecPumpData[FIPAddr].Nozzle=PNozzle;
			 RecPumpData[FIPAddr].Shift=atoi(strShift);
			 //Price Volume Money
			 StrPosCopy(strPPU,RecPumpData[FIPAddr].Price,0,strlen(strPPU));
			 StrPosCopy(strPVolume,RecPumpData[FIPAddr].Volume,0,strlen(strPVolume));
    ca70:	fe 01       	movw	r30, r28
    ca72:	7d 96       	adiw	r30, 0x1d	; 29
    ca74:	df 01       	movw	r26, r30
    ca76:	0d 90       	ld	r0, X+
    ca78:	00 20       	and	r0, r0
    ca7a:	e9 f7       	brne	.-6      	; 0xca76 <StoreStandaloneTransData+0x2bc>
    ca7c:	11 97       	sbiw	r26, 0x01	; 1
    ca7e:	ae 1b       	sub	r26, r30
    ca80:	bf 0b       	sbc	r27, r31
    ca82:	9c 01       	movw	r18, r24
    ca84:	23 5b       	subi	r18, 0xB3	; 179
    ca86:	39 4f       	sbci	r19, 0xF9	; 249
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    ca88:	af 01       	movw	r20, r30
    ca8a:	4a 0f       	add	r20, r26
    ca8c:	5b 1f       	adc	r21, r27
    ca8e:	06 c0       	rjmp	.+12     	; 0xca9c <StoreStandaloneTransData+0x2e2>
	    Dest[i]=Source[IdxSource+i];
    ca90:	f4 01       	movw	r30, r8
    ca92:	81 91       	ld	r24, Z+
    ca94:	4f 01       	movw	r8, r30
    ca96:	f9 01       	movw	r30, r18
    ca98:	81 93       	st	Z+, r24
    ca9a:	9f 01       	movw	r18, r30
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    ca9c:	84 16       	cp	r8, r20
    ca9e:	95 06       	cpc	r9, r21
    caa0:	b9 f7       	brne	.-18     	; 0xca90 <StoreStandaloneTransData+0x2d6>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    caa2:	85 e3       	ldi	r24, 0x35	; 53
    caa4:	90 e0       	ldi	r25, 0x00	; 0
    caa6:	9c 01       	movw	r18, r24
    caa8:	c2 9e       	mul	r12, r18
    caaa:	c0 01       	movw	r24, r0
    caac:	c3 9e       	mul	r12, r19
    caae:	90 0d       	add	r25, r0
    cab0:	d2 9e       	mul	r13, r18
    cab2:	90 0d       	add	r25, r0
    cab4:	11 24       	eor	r1, r1
    cab6:	fc 01       	movw	r30, r24
    cab8:	e6 5d       	subi	r30, 0xD6	; 214
    caba:	f9 4f       	sbci	r31, 0xF9	; 249
    cabc:	ea 0f       	add	r30, r26
    cabe:	fb 1f       	adc	r31, r27
    cac0:	13 a2       	std	Z+35, r1	; 0x23
			 RecPumpData[FIPAddr].Nozzle=PNozzle;
			 RecPumpData[FIPAddr].Shift=atoi(strShift);
			 //Price Volume Money
			 StrPosCopy(strPPU,RecPumpData[FIPAddr].Price,0,strlen(strPPU));
			 StrPosCopy(strPVolume,RecPumpData[FIPAddr].Volume,0,strlen(strPVolume));
			 StrPosCopy(strPMoney,RecPumpData[FIPAddr].Money,0,strlen(strPMoney));
    cac2:	fe 01       	movw	r30, r28
    cac4:	b7 96       	adiw	r30, 0x27	; 39
    cac6:	df 01       	movw	r26, r30
    cac8:	0d 90       	ld	r0, X+
    caca:	00 20       	and	r0, r0
    cacc:	e9 f7       	brne	.-6      	; 0xcac8 <StoreStandaloneTransData+0x30e>
    cace:	11 97       	sbiw	r26, 0x01	; 1
    cad0:	ae 1b       	sub	r26, r30
    cad2:	bf 0b       	sbc	r27, r31
    cad4:	9c 01       	movw	r18, r24
    cad6:	2a 5a       	subi	r18, 0xAA	; 170
    cad8:	39 4f       	sbci	r19, 0xF9	; 249
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    cada:	af 01       	movw	r20, r30
    cadc:	4a 0f       	add	r20, r26
    cade:	5b 1f       	adc	r21, r27
    cae0:	06 c0       	rjmp	.+12     	; 0xcaee <StoreStandaloneTransData+0x334>
	    Dest[i]=Source[IdxSource+i];
    cae2:	f3 01       	movw	r30, r6
    cae4:	81 91       	ld	r24, Z+
    cae6:	3f 01       	movw	r6, r30
    cae8:	f9 01       	movw	r30, r18
    caea:	81 93       	st	Z+, r24
    caec:	9f 01       	movw	r18, r30
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    caee:	64 16       	cp	r6, r20
    caf0:	75 06       	cpc	r7, r21
    caf2:	b9 f7       	brne	.-18     	; 0xcae2 <StoreStandaloneTransData+0x328>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    caf4:	85 e3       	ldi	r24, 0x35	; 53
    caf6:	90 e0       	ldi	r25, 0x00	; 0
    caf8:	c8 9e       	mul	r12, r24
    cafa:	f0 01       	movw	r30, r0
    cafc:	c9 9e       	mul	r12, r25
    cafe:	f0 0d       	add	r31, r0
    cb00:	d8 9e       	mul	r13, r24
    cb02:	f0 0d       	add	r31, r0
    cb04:	11 24       	eor	r1, r1
    cb06:	e6 5d       	subi	r30, 0xD6	; 214
    cb08:	f9 4f       	sbci	r31, 0xF9	; 249
    cb0a:	ea 0f       	add	r30, r26
    cb0c:	fb 1f       	adc	r31, r27
    cb0e:	14 a6       	std	Z+44, r1	; 0x2c
			 //Price Volume Money
			 StrPosCopy(strPPU,RecPumpData[FIPAddr].Price,0,strlen(strPPU));
			 StrPosCopy(strPVolume,RecPumpData[FIPAddr].Volume,0,strlen(strPVolume));
			 StrPosCopy(strPMoney,RecPumpData[FIPAddr].Money,0,strlen(strPMoney));

			 UpdateStandaloneStatus((iPumpID&0x0F),PS_PRINT_READY);
    cb10:	85 2d       	mov	r24, r5
    cb12:	8f 70       	andi	r24, 0x0F	; 15
    cb14:	60 e1       	ldi	r22, 0x10	; 16
    cb16:	0e 94 2d 20 	call	0x405a	; 0x405a <UpdateStandaloneStatus>
			 
			 SetIncomingTransStatus(iPumpID,TS_NEW);		 
    cb1a:	85 2d       	mov	r24, r5
    cb1c:	62 e0       	ldi	r22, 0x02	; 2
    cb1e:	0e 94 b5 1a 	call	0x356a	; 0x356a <SetIncomingTransStatus>

			 SendSlaveCommand(SC_TRANSACTION_ACK,iPumpID);
    cb22:	8b e0       	ldi	r24, 0x0B	; 11
    cb24:	65 2d       	mov	r22, r5
    cb26:	0e 94 0a 60 	call	0xc014	; 0xc014 <SendSlaveCommand>
    cb2a:	7b c0       	rjmp	.+246    	; 0xcc22 <StoreStandaloneTransData+0x468>
			 UpdateStandaloneStatus((iPumpID&0x0F),PS_VOID);
		 }
		 else 
		 if (TransactionStatus=TS_NEW){ 
			 //Update ReprintReady
			 ReprintReady[FIPAddr]=True;//Ready for Printing
    cb2c:	da 94       	dec	r13
    cb2e:	cd 2c       	mov	r12, r13
    cb30:	dd 24       	eor	r13, r13
    cb32:	f6 01       	movw	r30, r12
    cb34:	ed 5e       	subi	r30, 0xED	; 237
    cb36:	fe 4f       	sbci	r31, 0xFE	; 254
    cb38:	81 e0       	ldi	r24, 0x01	; 1
    cb3a:	80 83       	st	Z, r24
			 //FormatMoney(strPMoney);
			 //FormatVolume(strPVolume);

			 //uart_print(1,1,strPVolume);
			 
			 GenerateTransactionNum(strTranNo);		 
    cb3c:	09 e0       	ldi	r16, 0x09	; 9
    cb3e:	1d e0       	ldi	r17, 0x0D	; 13
    cb40:	c8 01       	movw	r24, r16
    cb42:	0e 94 f8 3e 	call	0x7df0	; 0x7df0 <GenerateTransactionNum>
			 sprintf_P(strTransDate,PSTR("%s"),strSystemDate);
    cb46:	00 d0       	rcall	.+0      	; 0xcb48 <StoreStandaloneTransData+0x38e>
    cb48:	00 d0       	rcall	.+0      	; 0xcb4a <StoreStandaloneTransData+0x390>
    cb4a:	00 d0       	rcall	.+0      	; 0xcb4c <StoreStandaloneTransData+0x392>
    cb4c:	ed b7       	in	r30, 0x3d	; 61
    cb4e:	fe b7       	in	r31, 0x3e	; 62
    cb50:	31 96       	adiw	r30, 0x01	; 1
    cb52:	ce 01       	movw	r24, r28
    cb54:	0b 96       	adiw	r24, 0x0b	; 11
    cb56:	ad b7       	in	r26, 0x3d	; 61
    cb58:	be b7       	in	r27, 0x3e	; 62
    cb5a:	12 96       	adiw	r26, 0x02	; 2
    cb5c:	9c 93       	st	X, r25
    cb5e:	8e 93       	st	-X, r24
    cb60:	11 97       	sbiw	r26, 0x01	; 1
    cb62:	8c e3       	ldi	r24, 0x3C	; 60
    cb64:	94 e2       	ldi	r25, 0x24	; 36
    cb66:	93 83       	std	Z+3, r25	; 0x03
    cb68:	82 83       	std	Z+2, r24	; 0x02
    cb6a:	8c e3       	ldi	r24, 0x3C	; 60
    cb6c:	94 e0       	ldi	r25, 0x04	; 4
    cb6e:	95 83       	std	Z+5, r25	; 0x05
    cb70:	84 83       	std	Z+4, r24	; 0x04
    cb72:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
			 sprintf_P(strTransTime,PSTR("%s"),strSystemTime);
    cb76:	ed b7       	in	r30, 0x3d	; 61
    cb78:	fe b7       	in	r31, 0x3e	; 62
    cb7a:	31 96       	adiw	r30, 0x01	; 1
    cb7c:	ce 01       	movw	r24, r28
    cb7e:	44 96       	adiw	r24, 0x14	; 20
    cb80:	ad b7       	in	r26, 0x3d	; 61
    cb82:	be b7       	in	r27, 0x3e	; 62
    cb84:	12 96       	adiw	r26, 0x02	; 2
    cb86:	9c 93       	st	X, r25
    cb88:	8e 93       	st	-X, r24
    cb8a:	11 97       	sbiw	r26, 0x01	; 1
    cb8c:	89 e3       	ldi	r24, 0x39	; 57
    cb8e:	94 e2       	ldi	r25, 0x24	; 36
    cb90:	93 83       	std	Z+3, r25	; 0x03
    cb92:	82 83       	std	Z+2, r24	; 0x02
    cb94:	86 ef       	ldi	r24, 0xF6	; 246
    cb96:	98 e0       	ldi	r25, 0x08	; 8
    cb98:	95 83       	std	Z+5, r25	; 0x05
    cb9a:	84 83       	std	Z+4, r24	; 0x04
    cb9c:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
			 sprintf_P(strShift,PSTR("%d"),eeprom_read_byte(&DefShift));
    cba0:	ed b7       	in	r30, 0x3d	; 61
    cba2:	fe b7       	in	r31, 0x3e	; 62
    cba4:	36 96       	adiw	r30, 0x06	; 6
    cba6:	0f b6       	in	r0, 0x3f	; 63
    cba8:	f8 94       	cli
    cbaa:	fe bf       	out	0x3e, r31	; 62
    cbac:	0f be       	out	0x3f, r0	; 63
    cbae:	ed bf       	out	0x3d, r30	; 61
    cbb0:	80 e4       	ldi	r24, 0x40	; 64
    cbb2:	91 e0       	ldi	r25, 0x01	; 1
    cbb4:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
    cbb8:	00 d0       	rcall	.+0      	; 0xcbba <StoreStandaloneTransData+0x400>
    cbba:	00 d0       	rcall	.+0      	; 0xcbbc <StoreStandaloneTransData+0x402>
    cbbc:	00 d0       	rcall	.+0      	; 0xcbbe <StoreStandaloneTransData+0x404>
    cbbe:	ed b7       	in	r30, 0x3d	; 61
    cbc0:	fe b7       	in	r31, 0x3e	; 62
    cbc2:	31 96       	adiw	r30, 0x01	; 1
    cbc4:	2a ee       	ldi	r18, 0xEA	; 234
    cbc6:	3c e0       	ldi	r19, 0x0C	; 12
    cbc8:	ad b7       	in	r26, 0x3d	; 61
    cbca:	be b7       	in	r27, 0x3e	; 62
    cbcc:	12 96       	adiw	r26, 0x02	; 2
    cbce:	3c 93       	st	X, r19
    cbd0:	2e 93       	st	-X, r18
    cbd2:	11 97       	sbiw	r26, 0x01	; 1
    cbd4:	26 e3       	ldi	r18, 0x36	; 54
    cbd6:	34 e2       	ldi	r19, 0x24	; 36
    cbd8:	33 83       	std	Z+3, r19	; 0x03
    cbda:	22 83       	std	Z+2, r18	; 0x02
    cbdc:	84 83       	std	Z+4, r24	; 0x04
    cbde:	15 82       	std	Z+5, r1	; 0x05
    cbe0:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
					 
			 //TransNum,Date,Time
			 StrPosCopy(strTranNo,RecPumpData[FIPAddr].strTransNum,0,strlen(strTranNo));
    cbe4:	d8 01       	movw	r26, r16
    cbe6:	0d 90       	ld	r0, X+
    cbe8:	00 20       	and	r0, r0
    cbea:	e9 f7       	brne	.-6      	; 0xcbe6 <StoreStandaloneTransData+0x42c>
    cbec:	11 97       	sbiw	r26, 0x01	; 1
    cbee:	a0 1b       	sub	r26, r16
    cbf0:	b1 0b       	sbc	r27, r17
    cbf2:	98 01       	movw	r18, r16
    cbf4:	85 e3       	ldi	r24, 0x35	; 53
    cbf6:	90 e0       	ldi	r25, 0x00	; 0
    cbf8:	c8 9e       	mul	r12, r24
    cbfa:	b0 01       	movw	r22, r0
    cbfc:	c9 9e       	mul	r12, r25
    cbfe:	70 0d       	add	r23, r0
    cc00:	d8 9e       	mul	r13, r24
    cc02:	70 0d       	add	r23, r0
    cc04:	11 24       	eor	r1, r1
    cc06:	63 5d       	subi	r22, 0xD3	; 211
    cc08:	79 4f       	sbci	r23, 0xF9	; 249
    cc0a:	ed b7       	in	r30, 0x3d	; 61
    cc0c:	fe b7       	in	r31, 0x3e	; 62
    cc0e:	36 96       	adiw	r30, 0x06	; 6
    cc10:	0f b6       	in	r0, 0x3f	; 63
    cc12:	f8 94       	cli
    cc14:	fe bf       	out	0x3e, r31	; 62
    cc16:	0f be       	out	0x3f, r0	; 63
    cc18:	ed bf       	out	0x3d, r30	; 61
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    cc1a:	ad 01       	movw	r20, r26
    cc1c:	40 0f       	add	r20, r16
    cc1e:	51 1f       	adc	r21, r17
    cc20:	8a ce       	rjmp	.-748    	; 0xc936 <StoreStandaloneTransData+0x17c>

			 SendSlaveCommand(SC_TRANSACTION_ACK,iPumpID);
		 }		 
	 }    
     //uart_print(0,1,strRawTransData);
}
    cc22:	e0 96       	adiw	r28, 0x30	; 48
    cc24:	0f b6       	in	r0, 0x3f	; 63
    cc26:	f8 94       	cli
    cc28:	de bf       	out	0x3e, r29	; 62
    cc2a:	0f be       	out	0x3f, r0	; 63
    cc2c:	cd bf       	out	0x3d, r28	; 61
    cc2e:	cf 91       	pop	r28
    cc30:	df 91       	pop	r29
    cc32:	1f 91       	pop	r17
    cc34:	0f 91       	pop	r16
    cc36:	ff 90       	pop	r15
    cc38:	ef 90       	pop	r14
    cc3a:	df 90       	pop	r13
    cc3c:	cf 90       	pop	r12
    cc3e:	bf 90       	pop	r11
    cc40:	af 90       	pop	r10
    cc42:	9f 90       	pop	r9
    cc44:	8f 90       	pop	r8
    cc46:	7f 90       	pop	r7
    cc48:	6f 90       	pop	r6
    cc4a:	5f 90       	pop	r5
    cc4c:	4f 90       	pop	r4
    cc4e:	3f 90       	pop	r3
    cc50:	08 95       	ret

0000cc52 <StoreStandaloneTotalizerData>:
	  systemEDC();
	  systemConfigProtocol();
	  //systemGeniusProtocol(); //AKR-->Protocol disabled
}

void StoreStandaloneTotalizerData(char *strRawTransData){//Sending FlowSPI_Protocol <STX>   [MsgID][PumpID][Volume1][Amount1][Volume2][Amount2][Volume3][Amount3][Volume4][Amount4][Volume5][Amount5][Volume6][Amount6]<ETX>
    cc52:	3f 92       	push	r3
    cc54:	4f 92       	push	r4
    cc56:	5f 92       	push	r5
    cc58:	6f 92       	push	r6
    cc5a:	7f 92       	push	r7
    cc5c:	8f 92       	push	r8
    cc5e:	9f 92       	push	r9
    cc60:	af 92       	push	r10
    cc62:	bf 92       	push	r11
    cc64:	cf 92       	push	r12
    cc66:	df 92       	push	r13
    cc68:	ef 92       	push	r14
    cc6a:	ff 92       	push	r15
    cc6c:	0f 93       	push	r16
    cc6e:	1f 93       	push	r17
    cc70:	df 93       	push	r29
    cc72:	cf 93       	push	r28
    cc74:	cd b7       	in	r28, 0x3d	; 61
    cc76:	de b7       	in	r29, 0x3e	; 62
    cc78:	a5 97       	sbiw	r28, 0x25	; 37
    cc7a:	0f b6       	in	r0, 0x3f	; 63
    cc7c:	f8 94       	cli
    cc7e:	de bf       	out	0x3e, r29	; 62
    cc80:	0f be       	out	0x3f, r0	; 63
    cc82:	cd bf       	out	0x3d, r28	; 61
    cc84:	5c 01       	movw	r10, r24
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    cc86:	fc 01       	movw	r30, r24
    cc88:	82 81       	ldd	r24, Z+2	; 0x02
    cc8a:	89 83       	std	Y+1, r24	; 0x01
    cc8c:	83 81       	ldd	r24, Z+3	; 0x03
    cc8e:	8a 83       	std	Y+2, r24	; 0x02
	 }Dest[Length]=0;
    cc90:	1b 82       	std	Y+3, r1	; 0x03
	 //    uart(1,1,strRawTransData[i]); 
	 // }

     StrPosCopy(strRawTransData,strPumpID,2,2);
	 //IdIFT(strPumpID);
	 iPumpID=atoi(strPumpID);  
    cc92:	ce 01       	movw	r24, r28
    cc94:	01 96       	adiw	r24, 0x01	; 1
    cc96:	0e 94 ae aa 	call	0x1555c	; 0x1555c <atoi>
    cc9a:	88 2e       	mov	r8, r24
	 
	 FIPAddr=GetFIPAddr(iPumpID);
    cc9c:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <GetFIPAddr>
	 if (FIPAddr>0){
    cca0:	88 23       	and	r24, r24
    cca2:	09 f4       	brne	.+2      	; 0xcca6 <StoreStandaloneTotalizerData+0x54>
    cca4:	56 c0       	rjmp	.+172    	; 0xcd52 <StoreStandaloneTotalizerData+0x100>
	     FIPAddr=FIPAddr-1;
    cca6:	38 2e       	mov	r3, r24
    cca8:	3a 94       	dec	r3
    ccaa:	34 e0       	ldi	r19, 0x04	; 4
    ccac:	c3 2e       	mov	r12, r19
    ccae:	d1 2c       	mov	r13, r1
    ccb0:	ca 0c       	add	r12, r10
    ccb2:	db 1c       	adc	r13, r11
    ccb4:	99 24       	eor	r9, r9
    ccb6:	93 94       	inc	r9
    ccb8:	2d ef       	ldi	r18, 0xFD	; 253
    ccba:	e2 2e       	mov	r14, r18
    ccbc:	2f ef       	ldi	r18, 0xFF	; 255
    ccbe:	f2 2e       	mov	r15, r18
    ccc0:	94 e0       	ldi	r25, 0x04	; 4
    ccc2:	49 2e       	mov	r4, r25
    ccc4:	51 2c       	mov	r5, r1
    ccc6:	4c 0e       	add	r4, r28
    ccc8:	5d 1e       	adc	r5, r29
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    ccca:	ce 01       	movw	r24, r28
    cccc:	40 96       	adiw	r24, 0x10	; 16
    ccce:	9b a3       	std	Y+35, r25	; 0x23
    ccd0:	8a a3       	std	Y+34, r24	; 0x22
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    ccd2:	83 e1       	ldi	r24, 0x13	; 19
    ccd4:	68 2e       	mov	r6, r24
    ccd6:	71 2c       	mov	r7, r1
    ccd8:	6c 0e       	add	r6, r28
    ccda:	7d 1e       	adc	r7, r29
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    ccdc:	fe 01       	movw	r30, r28
    ccde:	7f 96       	adiw	r30, 0x1f	; 31
    cce0:	fd a3       	std	Y+37, r31	; 0x25
    cce2:	ec a3       	std	Y+36, r30	; 0x24
	 //IdIFT(strPumpID);
	 iPumpID=atoi(strPumpID);  
	 
	 FIPAddr=GetFIPAddr(iPumpID);
	 if (FIPAddr>0){
	     FIPAddr=FIPAddr-1;
    cce4:	f2 01       	movw	r30, r4
    cce6:	d6 01       	movw	r26, r12
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    cce8:	8d 91       	ld	r24, X+
    ccea:	81 93       	st	Z+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    ccec:	8a a1       	ldd	r24, Y+34	; 0x22
    ccee:	9b a1       	ldd	r25, Y+35	; 0x23
    ccf0:	e8 17       	cp	r30, r24
    ccf2:	f9 07       	cpc	r31, r25
    ccf4:	c9 f7       	brne	.-14     	; 0xcce8 <StoreStandaloneTotalizerData+0x96>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    ccf6:	18 8a       	std	Y+16, r1	; 0x10
    ccf8:	d7 01       	movw	r26, r14
    ccfa:	a0 95       	com	r26
    ccfc:	b0 95       	com	r27
    ccfe:	03 e0       	ldi	r16, 0x03	; 3
    cd00:	aa 0f       	add	r26, r26
    cd02:	bb 1f       	adc	r27, r27
    cd04:	0a 95       	dec	r16
    cd06:	e1 f7       	brne	.-8      	; 0xcd00 <StoreStandaloneTotalizerData+0xae>
    cd08:	aa 0d       	add	r26, r10
    cd0a:	bb 1d       	adc	r27, r11
    cd0c:	f3 01       	movw	r30, r6
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    cd0e:	8d 91       	ld	r24, X+
    cd10:	81 93       	st	Z+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    cd12:	8c a1       	ldd	r24, Y+36	; 0x24
    cd14:	9d a1       	ldd	r25, Y+37	; 0x25
    cd16:	e8 17       	cp	r30, r24
    cd18:	f9 07       	cpc	r31, r25
    cd1a:	c9 f7       	brne	.-14     	; 0xcd0e <StoreStandaloneTotalizerData+0xbc>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    cd1c:	1f 8e       	std	Y+31, r1	; 0x1f

		 for (iGrade=1;iGrade<=6;iGrade++){          
			  StrPosCopy(strRawTransData,strGVolume,(4+((iGrade-1)*24)),12);
			  StrPosCopy(strRawTransData,strGMoney,(16+((iGrade-1)*24)),12);
			  
			  SetTotalizerData(TVOLUME,TOTALIZER_NOW,FIPAddr,iGrade,strGVolume);
    cd1e:	80 e0       	ldi	r24, 0x00	; 0
    cd20:	61 e0       	ldi	r22, 0x01	; 1
    cd22:	43 2d       	mov	r20, r3
    cd24:	29 2d       	mov	r18, r9
    cd26:	82 01       	movw	r16, r4
    cd28:	0e 94 d2 27 	call	0x4fa4	; 0x4fa4 <SetTotalizerData>
			  SetTotalizerData(TMONEY,TOTALIZER_NOW,FIPAddr,iGrade,strGMoney);
    cd2c:	81 e0       	ldi	r24, 0x01	; 1
    cd2e:	61 e0       	ldi	r22, 0x01	; 1
    cd30:	43 2d       	mov	r20, r3
    cd32:	29 2d       	mov	r18, r9
    cd34:	83 01       	movw	r16, r6
    cd36:	0e 94 d2 27 	call	0x4fa4	; 0x4fa4 <SetTotalizerData>
	 FIPAddr=GetFIPAddr(iPumpID);
	 if (FIPAddr>0){
	     FIPAddr=FIPAddr-1;
		 //uart_printf(1,1,PSTR("Totalizer:"));

		 for (iGrade=1;iGrade<=6;iGrade++){          
    cd3a:	93 94       	inc	r9
    cd3c:	ed ef       	ldi	r30, 0xFD	; 253
    cd3e:	ff ef       	ldi	r31, 0xFF	; 255
    cd40:	ee 0e       	add	r14, r30
    cd42:	ff 1e       	adc	r15, r31
    cd44:	88 e1       	ldi	r24, 0x18	; 24
    cd46:	90 e0       	ldi	r25, 0x00	; 0
    cd48:	c8 0e       	add	r12, r24
    cd4a:	d9 1e       	adc	r13, r25
    cd4c:	97 e0       	ldi	r25, 0x07	; 7
    cd4e:	99 16       	cp	r9, r25
    cd50:	49 f6       	brne	.-110    	; 0xcce4 <StoreStandaloneTotalizerData+0x92>
			  SetTotalizerData(TMONEY,TOTALIZER_NOW,FIPAddr,iGrade,strGMoney);
			  //sprintf_P(strSend,PSTR("Nozzle:%d Volume:%s Money:%s"),iGrade,strGVolume,strGMoney);
			  //uart_print(0,1,strSend);
		 }	
	}
     SendSlaveCommand(SC_TOTALIZER_ACK,iPumpID);
    cd52:	8d e0       	ldi	r24, 0x0D	; 13
    cd54:	68 2d       	mov	r22, r8
    cd56:	0e 94 0a 60 	call	0xc014	; 0xc014 <SendSlaveCommand>
	 UpdateStandaloneStatus((iPumpID&0x0F),PS_TOTALIZER);	 
    cd5a:	88 2d       	mov	r24, r8
    cd5c:	8f 70       	andi	r24, 0x0F	; 15
    cd5e:	64 e1       	ldi	r22, 0x14	; 20
    cd60:	0e 94 2d 20 	call	0x405a	; 0x405a <UpdateStandaloneStatus>
}
    cd64:	a5 96       	adiw	r28, 0x25	; 37
    cd66:	0f b6       	in	r0, 0x3f	; 63
    cd68:	f8 94       	cli
    cd6a:	de bf       	out	0x3e, r29	; 62
    cd6c:	0f be       	out	0x3f, r0	; 63
    cd6e:	cd bf       	out	0x3d, r28	; 61
    cd70:	cf 91       	pop	r28
    cd72:	df 91       	pop	r29
    cd74:	1f 91       	pop	r17
    cd76:	0f 91       	pop	r16
    cd78:	ff 90       	pop	r15
    cd7a:	ef 90       	pop	r14
    cd7c:	df 90       	pop	r13
    cd7e:	cf 90       	pop	r12
    cd80:	bf 90       	pop	r11
    cd82:	af 90       	pop	r10
    cd84:	9f 90       	pop	r9
    cd86:	8f 90       	pop	r8
    cd88:	7f 90       	pop	r7
    cd8a:	6f 90       	pop	r6
    cd8c:	5f 90       	pop	r5
    cd8e:	4f 90       	pop	r4
    cd90:	3f 90       	pop	r3
    cd92:	08 95       	ret

0000cd94 <ScanStandaloneFlow>:
	 _spi(SlaveMessage);
	 _spi(0x06);
	 systemSlave();
}

void ScanStandaloneFlow(char data){  //<STX>[PumpID][STA]<ETX> --> 0x07 0xF1 0xF2 0x08
    cd94:	0f 93       	push	r16
    cd96:	1f 93       	push	r17
    cd98:	08 2f       	mov	r16, r24

      DataPumpID=0;
      DataPumpStatus=0;
	  MixData=0;
      //Shift data
      zDataFlow[4]=zDataFlow[3];
    cd9a:	80 91 a9 02 	lds	r24, 0x02A9
    cd9e:	80 93 aa 02 	sts	0x02AA, r24
	  zDataFlow[3]=zDataFlow[2];
    cda2:	80 91 a8 02 	lds	r24, 0x02A8
    cda6:	80 93 a9 02 	sts	0x02A9, r24
	  zDataFlow[2]=zDataFlow[1];
    cdaa:	80 91 a7 02 	lds	r24, 0x02A7
    cdae:	80 93 a8 02 	sts	0x02A8, r24
      zDataFlow[1]=zDataFlow[0];
    cdb2:	90 91 a6 02 	lds	r25, 0x02A6
    cdb6:	90 93 a7 02 	sts	0x02A7, r25
      zDataFlow[0]=data;
    cdba:	00 93 a6 02 	sts	0x02A6, r16

      //Scan UpdatedPumpStatus Flow
	  //<STX>[ID][STA]<ETX>: 0x07[ID STA]0x08
	  if((zDataFlow[2]==0x07)&&(zDataFlow[0]==0x08)){
    cdbe:	87 30       	cpi	r24, 0x07	; 7
    cdc0:	79 f4       	brne	.+30     	; 0xcde0 <ScanStandaloneFlow+0x4c>
    cdc2:	08 30       	cpi	r16, 0x08	; 8
    cdc4:	69 f4       	brne	.+26     	; 0xcde0 <ScanStandaloneFlow+0x4c>
          MixData=zDataFlow[1];
	      DataPumpID=((MixData&0xF0)>>4);
		  DataPumpStatus=(MixData&0x0F);
    cdc6:	19 2f       	mov	r17, r25
    cdc8:	1f 70       	andi	r17, 0x0F	; 15
		  UpdateStandaloneStatus(DataPumpID,DataPumpStatus);
    cdca:	89 2f       	mov	r24, r25
    cdcc:	82 95       	swap	r24
    cdce:	8f 70       	andi	r24, 0x0F	; 15
    cdd0:	61 2f       	mov	r22, r17
    cdd2:	0e 94 2d 20 	call	0x405a	; 0x405a <UpdateStandaloneStatus>
		  if (DataPumpStatus!=PUMP_NONE)IsStandAloneDetected=True;
    cdd6:	1e 30       	cpi	r17, 0x0E	; 14
    cdd8:	19 f0       	breq	.+6      	; 0xcde0 <ScanStandaloneFlow+0x4c>
    cdda:	81 e0       	ldi	r24, 0x01	; 1
    cddc:	80 93 9c 01 	sts	0x019C, r24
		  //sprintf_P(strSend,PSTR("PS:%d Id:%d"),MixData,DataPumpID);
		  //uart_print(0,1,strSend);
	  }

	  //Scan Transaction Completion FEOT
	  if (IsStandaloneTrans==True){
    cde0:	80 91 9d 01 	lds	r24, 0x019D
    cde4:	81 30       	cpi	r24, 0x01	; 1
    cde6:	69 f4       	brne	.+26     	; 0xce02 <ScanStandaloneFlow+0x6e>
	      strStandReceived[iFlow]=data;
    cde8:	80 91 a4 02 	lds	r24, 0x02A4
    cdec:	90 91 a5 02 	lds	r25, 0x02A5
    cdf0:	fc 01       	movw	r30, r24
    cdf2:	ea 5f       	subi	r30, 0xFA	; 250
    cdf4:	fc 4f       	sbci	r31, 0xFC	; 252
    cdf6:	00 83       	st	Z, r16
		  iFlow++;
    cdf8:	01 96       	adiw	r24, 0x01	; 1
    cdfa:	90 93 a5 02 	sts	0x02A5, r25
    cdfe:	80 93 a4 02 	sts	0x02A4, r24
	  }
	  if((zDataFlow[1]==0x05)&&(zDataFlow[0]==0x50)){
    ce02:	80 91 a7 02 	lds	r24, 0x02A7
    ce06:	85 30       	cpi	r24, 0x05	; 5
    ce08:	61 f4       	brne	.+24     	; 0xce22 <ScanStandaloneFlow+0x8e>
    ce0a:	80 91 a6 02 	lds	r24, 0x02A6
    ce0e:	80 35       	cpi	r24, 0x50	; 80
    ce10:	41 f5       	brne	.+80     	; 0xce62 <ScanStandaloneFlow+0xce>
	      IsStandaloneTrans=True;
    ce12:	81 e0       	ldi	r24, 0x01	; 1
    ce14:	80 93 9d 01 	sts	0x019D, r24
		  iFlow=0;
    ce18:	10 92 a5 02 	sts	0x02A5, r1
    ce1c:	10 92 a4 02 	sts	0x02A4, r1
    ce20:	20 c0       	rjmp	.+64     	; 0xce62 <ScanStandaloneFlow+0xce>
	  }
	  if((zDataFlow[1]==0x06)&&(zDataFlow[0]==0x60)){
    ce22:	86 30       	cpi	r24, 0x06	; 6
    ce24:	f1 f4       	brne	.+60     	; 0xce62 <ScanStandaloneFlow+0xce>
    ce26:	80 91 a6 02 	lds	r24, 0x02A6
    ce2a:	80 36       	cpi	r24, 0x60	; 96
    ce2c:	d1 f4       	brne	.+52     	; 0xce62 <ScanStandaloneFlow+0xce>
	      IsStandaloneTrans=False;
    ce2e:	10 92 9d 01 	sts	0x019D, r1
	      strStandReceived[iFlow]=0;
    ce32:	e0 91 a4 02 	lds	r30, 0x02A4
    ce36:	f0 91 a5 02 	lds	r31, 0x02A5
    ce3a:	ea 5f       	subi	r30, 0xFA	; 250
    ce3c:	fc 4f       	sbci	r31, 0xFC	; 252
    ce3e:	10 82       	st	Z, r1

		  //uart_print(1,1,strStandReceived);

		  MsgIDx=GetMessageID(strStandReceived);
    ce40:	86 e0       	ldi	r24, 0x06	; 6
    ce42:	93 e0       	ldi	r25, 0x03	; 3
    ce44:	0e 94 48 43 	call	0x8690	; 0x8690 <GetMessageID>
          if (MsgIDx==0x01)StoreStandaloneTransData(strStandReceived);
    ce48:	81 30       	cpi	r24, 0x01	; 1
    ce4a:	29 f4       	brne	.+10     	; 0xce56 <ScanStandaloneFlow+0xc2>
    ce4c:	86 e0       	ldi	r24, 0x06	; 6
    ce4e:	93 e0       	ldi	r25, 0x03	; 3
    ce50:	0e 94 dd 63 	call	0xc7ba	; 0xc7ba <StoreStandaloneTransData>
    ce54:	06 c0       	rjmp	.+12     	; 0xce62 <ScanStandaloneFlow+0xce>
		  else
          if (MsgIDx==0x02)StoreStandaloneTotalizerData(strStandReceived);
    ce56:	82 30       	cpi	r24, 0x02	; 2
    ce58:	21 f4       	brne	.+8      	; 0xce62 <ScanStandaloneFlow+0xce>
    ce5a:	86 e0       	ldi	r24, 0x06	; 6
    ce5c:	93 e0       	ldi	r25, 0x03	; 3
    ce5e:	0e 94 29 66 	call	0xcc52	; 0xcc52 <StoreStandaloneTotalizerData>
	  }
	  //AcknoledgeCommand
	  if ((zDataFlow[3]==0x09)&&(zDataFlow[0]==0x0A)){
    ce62:	80 91 a9 02 	lds	r24, 0x02A9
    ce66:	89 30       	cpi	r24, 0x09	; 9
    ce68:	c1 f5       	brne	.+112    	; 0xceda <ScanStandaloneFlow+0x146>
    ce6a:	80 91 a6 02 	lds	r24, 0x02A6
    ce6e:	8a 30       	cpi	r24, 0x0A	; 10
    ce70:	a1 f5       	brne	.+104    	; 0xceda <ScanStandaloneFlow+0x146>
	      
	      AcknoledgePump=zDataFlow[1];
    ce72:	90 91 a7 02 	lds	r25, 0x02A7
    ce76:	90 93 6e 0c 	sts	0x0C6E, r25
	      AcknoledgeCommand=zDataFlow[2];	  
    ce7a:	80 91 a8 02 	lds	r24, 0x02A8
    ce7e:	80 93 1f 06 	sts	0x061F, r24
		  switch(AcknoledgeCommand){
    ce82:	89 31       	cpi	r24, 0x19	; 25
    ce84:	51 f0       	breq	.+20     	; 0xce9a <ScanStandaloneFlow+0x106>
    ce86:	8a 31       	cpi	r24, 0x1A	; 26
    ce88:	18 f4       	brcc	.+6      	; 0xce90 <ScanStandaloneFlow+0xfc>
    ce8a:	85 30       	cpi	r24, 0x05	; 5
    ce8c:	19 f5       	brne	.+70     	; 0xced4 <ScanStandaloneFlow+0x140>
    ce8e:	17 c0       	rjmp	.+46     	; 0xcebe <ScanStandaloneFlow+0x12a>
    ce90:	8a 31       	cpi	r24, 0x1A	; 26
    ce92:	c9 f0       	breq	.+50     	; 0xcec6 <ScanStandaloneFlow+0x132>
    ce94:	8c 31       	cpi	r24, 0x1C	; 28
    ce96:	f1 f4       	brne	.+60     	; 0xced4 <ScanStandaloneFlow+0x140>
    ce98:	1a c0       	rjmp	.+52     	; 0xcece <ScanStandaloneFlow+0x13a>
		  case SC_LIVE_SEQUENCE:
		       iSequencePooling=AcknoledgePump;
    ce9a:	90 93 80 01 	sts	0x0180, r25
			   IsNewPoolingSequence=True;
    ce9e:	81 e0       	ldi	r24, 0x01	; 1
    cea0:	80 93 81 01 	sts	0x0181, r24
			   //SendPoolingCommand()
			   if (IsControlPooling==True){
    cea4:	80 91 84 01 	lds	r24, 0x0184
    cea8:	81 30       	cpi	r24, 0x01	; 1
    ceaa:	a1 f4       	brne	.+40     	; 0xced4 <ScanStandaloneFlow+0x140>
			       IsControlPooling=False;
    ceac:	10 92 84 01 	sts	0x0184, r1
				   SendSlaveCommand(PoolCmd,PoolMsg);
    ceb0:	80 91 29 06 	lds	r24, 0x0629
    ceb4:	60 91 55 0c 	lds	r22, 0x0C55
    ceb8:	0e 94 0a 60 	call	0xc014	; 0xc014 <SendSlaveCommand>
    cebc:	0b c0       	rjmp	.+22     	; 0xced4 <ScanStandaloneFlow+0x140>
                }
		       break;
          case SC_TOTALIZER:
		       IsTotalizerReceived=True;
    cebe:	81 e0       	ldi	r24, 0x01	; 1
    cec0:	80 93 af 01 	sts	0x01AF, r24
    cec4:	07 c0       	rjmp	.+14     	; 0xced4 <ScanStandaloneFlow+0x140>
		       break;
		  case SC_POOL_RESTARTED:
		       IsPoolingRestarted=True;
    cec6:	81 e0       	ldi	r24, 0x01	; 1
    cec8:	80 93 83 01 	sts	0x0183, r24
    cecc:	03 c0       	rjmp	.+6      	; 0xced4 <ScanStandaloneFlow+0x140>
		       break;
          case SC_SET_PUMP_TYPE:
		       IsSetPumpType=True;
    cece:	81 e0       	ldi	r24, 0x01	; 1
    ced0:	80 93 23 01 	sts	0x0123, r24
		       break;
		  }
       IsStandaloneAcknoledge=True;
    ced4:	81 e0       	ldi	r24, 0x01	; 1
    ced6:	80 93 82 01 	sts	0x0182, r24
	  }
}
    ceda:	1f 91       	pop	r17
    cedc:	0f 91       	pop	r16
    cede:	08 95       	ret

0000cee0 <__vector_17>:
//	  sprintf(SerialSend,"Length:%i",Length);	 
//	  uart_print(1,0,SerialSend);
	 }
}

ISR(SPI_STC_vect){
    cee0:	1f 92       	push	r1
    cee2:	0f 92       	push	r0
    cee4:	0f b6       	in	r0, 0x3f	; 63
    cee6:	0f 92       	push	r0
    cee8:	0b b6       	in	r0, 0x3b	; 59
    ceea:	0f 92       	push	r0
    ceec:	11 24       	eor	r1, r1
    ceee:	1f 93       	push	r17
    cef0:	2f 93       	push	r18
    cef2:	3f 93       	push	r19
    cef4:	4f 93       	push	r20
    cef6:	5f 93       	push	r21
    cef8:	6f 93       	push	r22
    cefa:	7f 93       	push	r23
    cefc:	8f 93       	push	r24
    cefe:	9f 93       	push	r25
    cf00:	af 93       	push	r26
    cf02:	bf 93       	push	r27
    cf04:	ef 93       	push	r30
    cf06:	ff 93       	push	r31
char dataSPI;
//char Reply=0;
    //uart(0,1,SPDR);
	dataSPI=SPDR;
    cf08:	1f b1       	in	r17, 0x0f	; 15
	ScanRFIDFlow(dataSPI);
    cf0a:	81 2f       	mov	r24, r17
    cf0c:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <ScanRFIDFlow>
	if (IFType==IT_SLAVE)ScanEDCFlow(dataSPI);
    cf10:	80 91 00 01 	lds	r24, 0x0100
    cf14:	81 30       	cpi	r24, 0x01	; 1
    cf16:	21 f4       	brne	.+8      	; 0xcf20 <__vector_17+0x40>
    cf18:	81 2f       	mov	r24, r17
    cf1a:	0e 94 7e 14 	call	0x28fc	; 0x28fc <ScanEDCFlow>
    cf1e:	05 c0       	rjmp	.+10     	; 0xcf2a <__vector_17+0x4a>
	else
	if (IFType==IT_STANDALONE)ScanStandaloneFlow(dataSPI);
    cf20:	82 30       	cpi	r24, 0x02	; 2
    cf22:	19 f4       	brne	.+6      	; 0xcf2a <__vector_17+0x4a>
    cf24:	81 2f       	mov	r24, r17
    cf26:	0e 94 ca 66 	call	0xcd94	; 0xcd94 <ScanStandaloneFlow>
}
    cf2a:	ff 91       	pop	r31
    cf2c:	ef 91       	pop	r30
    cf2e:	bf 91       	pop	r27
    cf30:	af 91       	pop	r26
    cf32:	9f 91       	pop	r25
    cf34:	8f 91       	pop	r24
    cf36:	7f 91       	pop	r23
    cf38:	6f 91       	pop	r22
    cf3a:	5f 91       	pop	r21
    cf3c:	4f 91       	pop	r20
    cf3e:	3f 91       	pop	r19
    cf40:	2f 91       	pop	r18
    cf42:	1f 91       	pop	r17
    cf44:	0f 90       	pop	r0
    cf46:	0b be       	out	0x3b, r0	; 59
    cf48:	0f 90       	pop	r0
    cf4a:	0f be       	out	0x3f, r0	; 63
    cf4c:	0f 90       	pop	r0
    cf4e:	1f 90       	pop	r1
    cf50:	18 95       	reti

0000cf52 <UserInput>:
void ShowMessage(char *Message){//Display Message on Line3
     char i;
}


char UserInput(char TypeUI,char xPos, char yPos,char *strResult, unsigned int MaxValue, char MaxLength){
    cf52:	8f 92       	push	r8
    cf54:	9f 92       	push	r9
    cf56:	af 92       	push	r10
    cf58:	bf 92       	push	r11
    cf5a:	cf 92       	push	r12
    cf5c:	df 92       	push	r13
    cf5e:	ef 92       	push	r14
    cf60:	ff 92       	push	r15
    cf62:	0f 93       	push	r16
    cf64:	1f 93       	push	r17
    cf66:	cf 93       	push	r28
    cf68:	df 93       	push	r29
    cf6a:	f8 2e       	mov	r15, r24
    cf6c:	96 2e       	mov	r9, r22
    cf6e:	d4 2e       	mov	r13, r20
    cf70:	e9 01       	movw	r28, r18
    cf72:	58 01       	movw	r10, r16
    cf74:	8e 2c       	mov	r8, r14
	 static char iHit=0,IsShifted=False,IsSameKey=False,IsNextKey=False,IsNewKey=False,IsFirst=False;//,KeyByte=0;
	 static unsigned int iLoop=0,KeyTimeout;//,TimerPressed=0,NewKeyTimeout;
	        unsigned int NumbValue=0;
	 char KeyPressed=0,KeyChar=0,iDisp=0;
     Result=USER_NONE;
	 switch(stUserInput){// 100 ->199 500 90
    cf76:	10 91 7f 02 	lds	r17, 0x027F
    cf7a:	12 30       	cpi	r17, 0x02	; 2
    cf7c:	09 f4       	brne	.+2      	; 0xcf80 <UserInput+0x2e>
    cf7e:	29 c2       	rjmp	.+1106   	; 0xd3d2 <UserInput+0x480>
    cf80:	13 30       	cpi	r17, 0x03	; 3
    cf82:	30 f4       	brcc	.+12     	; 0xcf90 <UserInput+0x3e>
    cf84:	11 23       	and	r17, r17
    cf86:	59 f0       	breq	.+22     	; 0xcf9e <UserInput+0x4c>
    cf88:	11 30       	cpi	r17, 0x01	; 1
    cf8a:	09 f0       	breq	.+2      	; 0xcf8e <UserInput+0x3c>
    cf8c:	f2 c2       	rjmp	.+1508   	; 0xd572 <UserInput+0x620>
    cf8e:	2c c0       	rjmp	.+88     	; 0xcfe8 <UserInput+0x96>
    cf90:	13 30       	cpi	r17, 0x03	; 3
    cf92:	09 f4       	brne	.+2      	; 0xcf96 <UserInput+0x44>
    cf94:	73 c2       	rjmp	.+1254   	; 0xd47c <UserInput+0x52a>
    cf96:	14 30       	cpi	r17, 0x04	; 4
    cf98:	09 f0       	breq	.+2      	; 0xcf9c <UserInput+0x4a>
    cf9a:	eb c2       	rjmp	.+1494   	; 0xd572 <UserInput+0x620>
    cf9c:	ec c2       	rjmp	.+1496   	; 0xd576 <UserInput+0x624>
	 case uiInit:
	      iLoop=0;
    cf9e:	10 92 71 02 	sts	0x0271, r1
    cfa2:	10 92 70 02 	sts	0x0270, r1
		  stUserInput=uiInput;
		  xChar=xPos;yChar=yPos;
    cfa6:	60 93 7e 02 	sts	0x027E, r22
    cfaa:	40 93 7d 02 	sts	0x027D, r20
          iValuePos=0;
    cfae:	10 92 7c 02 	sts	0x027C, r1
		  KeyTimeout=0;
    cfb2:	10 92 6f 02 	sts	0x026F, r1
    cfb6:	10 92 6e 02 	sts	0x026E, r1
		  IsSameKey=False;
    cfba:	10 92 75 02 	sts	0x0275, r1
		  IsNextKey=False;
    cfbe:	10 92 74 02 	sts	0x0274, r1
		  IsNewKey=False;
    cfc2:	10 92 73 02 	sts	0x0273, r1
		  IsShifted=True;
    cfc6:	91 e0       	ldi	r25, 0x01	; 1
    cfc8:	90 93 76 02 	sts	0x0276, r25
		  zKeyChar=' ';
    cfcc:	80 e2       	ldi	r24, 0x20	; 32
    cfce:	80 93 7b 02 	sts	0x027B, r24
		  iHit=0;
    cfd2:	10 92 77 02 	sts	0x0277, r1
		  IsFirst=False;
    cfd6:	10 92 72 02 	sts	0x0272, r1
		  IsDelete=False;
    cfda:	10 92 78 02 	sts	0x0278, r1
		  Result=USER_NO_DATA;
		  stUserInput=uiInput;
    cfde:	90 93 7f 02 	sts	0x027F, r25
    cfe2:	65 e0       	ldi	r22, 0x05	; 5
    cfe4:	e6 2e       	mov	r14, r22
    cfe6:	cb c2       	rjmp	.+1430   	; 0xd57e <UserInput+0x62c>
	      break;
	 case uiInput:
	      KeyPressed=_key_scan(1);                  //  _  ABC DEF GHI JKL MNO PQRS TUV WXYZ
    cfe8:	81 e0       	ldi	r24, 0x01	; 1
    cfea:	0e 94 58 a6 	call	0x14cb0	; 0x14cb0 <_key_scan>
    cfee:	c8 2e       	mov	r12, r24
		  KeyChar= _key_btn(KeyPressed);            //  1   2   3   4   5   6   7    8   9
    cff0:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <_key_btn>
    cff4:	e8 2e       	mov	r14, r24
		  if (KeyPressed==_KEY_SHIFT){
    cff6:	2b e7       	ldi	r18, 0x7B	; 123
    cff8:	c2 16       	cp	r12, r18
    cffa:	59 f4       	brne	.+22     	; 0xd012 <UserInput+0xc0>
		      if (IsShifted==False)IsShifted=True;
    cffc:	80 91 76 02 	lds	r24, 0x0276
    d000:	88 23       	and	r24, r24
    d002:	19 f4       	brne	.+6      	; 0xd00a <UserInput+0xb8>
    d004:	10 93 76 02 	sts	0x0276, r17
    d008:	04 c0       	rjmp	.+8      	; 0xd012 <UserInput+0xc0>
			  else
		      if (IsShifted==True)IsShifted=False;
    d00a:	81 30       	cpi	r24, 0x01	; 1
    d00c:	11 f4       	brne	.+4      	; 0xd012 <UserInput+0xc0>
    d00e:	10 92 76 02 	sts	0x0276, r1
			  }
          
		  if (IsSameKey==True){
    d012:	80 91 75 02 	lds	r24, 0x0275
    d016:	81 30       	cpi	r24, 0x01	; 1
    d018:	e9 f4       	brne	.+58     	; 0xd054 <UserInput+0x102>
		      KeyTimeout++;
    d01a:	80 91 6e 02 	lds	r24, 0x026E
    d01e:	90 91 6f 02 	lds	r25, 0x026F
    d022:	01 96       	adiw	r24, 0x01	; 1
    d024:	90 93 6f 02 	sts	0x026F, r25
    d028:	80 93 6e 02 	sts	0x026E, r24
              if (KeyTimeout>1000){
    d02c:	89 5e       	subi	r24, 0xE9	; 233
    d02e:	93 40       	sbci	r25, 0x03	; 3
    d030:	88 f0       	brcs	.+34     	; 0xd054 <UserInput+0x102>
			      if (TypeUI==UI_ALPHANUM_PASSWORD)lcd_put(xChar,yChar,'*');
    d032:	f5 e0       	ldi	r31, 0x05	; 5
    d034:	ff 16       	cp	r15, r31
    d036:	39 f4       	brne	.+14     	; 0xd046 <UserInput+0xf4>
    d038:	80 91 7e 02 	lds	r24, 0x027E
    d03c:	60 91 7d 02 	lds	r22, 0x027D
    d040:	4a e2       	ldi	r20, 0x2A	; 42
    d042:	0e 94 2c a5 	call	0x14a58	; 0x14a58 <lcd_put>

		          IsNextKey=True;
    d046:	81 e0       	ldi	r24, 0x01	; 1
    d048:	80 93 74 02 	sts	0x0274, r24
				  iLoop=0;
    d04c:	10 92 71 02 	sts	0x0271, r1
    d050:	10 92 70 02 	sts	0x0270, r1
			     }
              }
            
 
 		  //if (((KeyChar>='0')&&(KeyChar<='9')&&(iValuePos<=MaxLength))||(IsNextKey==True)){
		  if (((KeyChar>='0')&&(KeyChar<='9')&&(iValuePos<MaxLength))||(IsNextKey==True)){
    d054:	8e 2d       	mov	r24, r14
    d056:	80 53       	subi	r24, 0x30	; 48
    d058:	8a 30       	cpi	r24, 0x0A	; 10
    d05a:	20 f4       	brcc	.+8      	; 0xd064 <UserInput+0x112>
    d05c:	80 91 7c 02 	lds	r24, 0x027C
    d060:	88 15       	cp	r24, r8
    d062:	40 f0       	brcs	.+16     	; 0xd074 <UserInput+0x122>
    d064:	80 91 74 02 	lds	r24, 0x0274
    d068:	81 30       	cpi	r24, 0x01	; 1
    d06a:	21 f0       	breq	.+8      	; 0xd074 <UserInput+0x122>
    d06c:	ee 24       	eor	r14, r14
    d06e:	00 e0       	ldi	r16, 0x00	; 0
    d070:	10 e0       	ldi	r17, 0x00	; 0
    d072:	be c0       	rjmp	.+380    	; 0xd1f0 <UserInput+0x29e>
    d074:	84 e2       	ldi	r24, 0x24	; 36
    d076:	94 ef       	ldi	r25, 0xF4	; 244
    d078:	01 97       	sbiw	r24, 0x01	; 1
    d07a:	f1 f7       	brne	.-4      	; 0xd078 <UserInput+0x126>
		       _delay_ms(250);
		       strResult[iValuePos]=KeyChar;
    d07c:	80 91 7c 02 	lds	r24, 0x027C
    d080:	fe 01       	movw	r30, r28
    d082:	e8 0f       	add	r30, r24
    d084:	f1 1d       	adc	r31, r1
    d086:	e0 82       	st	Z, r14
		       strResult[iValuePos+1]=0;
    d088:	11 82       	std	Z+1, r1	; 0x01

			   if ((TypeUI==UI_NUMBER_R)||(TypeUI==UI_NUMBER_L)||(TypeUI==UI_NUM_PASSWORD)) 
    d08a:	8f 2d       	mov	r24, r15
    d08c:	81 50       	subi	r24, 0x01	; 1
    d08e:	82 30       	cpi	r24, 0x02	; 2
    d090:	30 f0       	brcs	.+12     	; 0xd09e <UserInput+0x14c>
    d092:	24 e0       	ldi	r18, 0x04	; 4
    d094:	f2 16       	cp	r15, r18
    d096:	19 f0       	breq	.+6      	; 0xd09e <UserInput+0x14c>
    d098:	00 e0       	ldi	r16, 0x00	; 0
    d09a:	10 e0       	ldi	r17, 0x00	; 0
    d09c:	04 c0       	rjmp	.+8      	; 0xd0a6 <UserInput+0x154>
			        NumbValue=atoi(strResult);
    d09e:	ce 01       	movw	r24, r28
    d0a0:	0e 94 ae aa 	call	0x1555c	; 0x1555c <atoi>
    d0a4:	8c 01       	movw	r16, r24
			   else NumbValue=0;
				
			   if ((TypeUI==UI_ALPHANUM_R)||(TypeUI==UI_ALPHANUM_PASSWORD)){
    d0a6:	83 e0       	ldi	r24, 0x03	; 3
    d0a8:	f8 16       	cp	r15, r24
    d0aa:	21 f0       	breq	.+8      	; 0xd0b4 <UserInput+0x162>
    d0ac:	e5 e0       	ldi	r30, 0x05	; 5
    d0ae:	fe 16       	cp	r15, r30
    d0b0:	09 f0       	breq	.+2      	; 0xd0b4 <UserInput+0x162>
    d0b2:	63 c0       	rjmp	.+198    	; 0xd17a <UserInput+0x228>
			       if (KeyChar!=zKeyChar){
    d0b4:	80 91 7b 02 	lds	r24, 0x027B
    d0b8:	e8 16       	cp	r14, r24
    d0ba:	71 f0       	breq	.+28     	; 0xd0d8 <UserInput+0x186>
					   IsSameKey=False;
    d0bc:	10 92 75 02 	sts	0x0275, r1
					   IsNewKey=True;
    d0c0:	81 e0       	ldi	r24, 0x01	; 1
    d0c2:	80 93 73 02 	sts	0x0273, r24
				       iHit=0;
    d0c6:	10 92 77 02 	sts	0x0277, r1
					   iLoop=1000;
    d0ca:	88 ee       	ldi	r24, 0xE8	; 232
    d0cc:	93 e0       	ldi	r25, 0x03	; 3
    d0ce:	90 93 71 02 	sts	0x0271, r25
    d0d2:	80 93 70 02 	sts	0x0270, r24
    d0d6:	51 c0       	rjmp	.+162    	; 0xd17a <UserInput+0x228>
				   }
                   else{
				   if (IsNewKey==True){
    d0d8:	80 91 73 02 	lds	r24, 0x0273
    d0dc:	81 30       	cpi	r24, 0x01	; 1
    d0de:	71 f4       	brne	.+28     	; 0xd0fc <UserInput+0x1aa>
					   IsNewKey=False;
    d0e0:	10 92 73 02 	sts	0x0273, r1
					   yChar--;
    d0e4:	80 91 7d 02 	lds	r24, 0x027D
    d0e8:	81 50       	subi	r24, 0x01	; 1
    d0ea:	80 93 7d 02 	sts	0x027D, r24
					   if (iValuePos>0) iValuePos--;
    d0ee:	80 91 7c 02 	lds	r24, 0x027C
    d0f2:	88 23       	and	r24, r24
    d0f4:	19 f0       	breq	.+6      	; 0xd0fc <UserInput+0x1aa>
    d0f6:	81 50       	subi	r24, 0x01	; 1
    d0f8:	80 93 7c 02 	sts	0x027C, r24
					   }
				   KeyTimeout=0;
    d0fc:	10 92 6f 02 	sts	0x026F, r1
    d100:	10 92 6e 02 	sts	0x026E, r1
				   IsSameKey=True;
    d104:	81 e0       	ldi	r24, 0x01	; 1
    d106:	80 93 75 02 	sts	0x0275, r24
				   if (iHit<pgm_read_byte(&MaxKeyHit[(zKeyChar-'0')])) 
    d10a:	80 91 77 02 	lds	r24, 0x0277
    d10e:	e0 91 7b 02 	lds	r30, 0x027B
    d112:	f0 e0       	ldi	r31, 0x00	; 0
    d114:	e8 55       	subi	r30, 0x58	; 88
    d116:	fd 4f       	sbci	r31, 0xFD	; 253
    d118:	e4 91       	lpm	r30, Z+
    d11a:	8e 17       	cp	r24, r30
    d11c:	20 f4       	brcc	.+8      	; 0xd126 <UserInput+0x1d4>
				        iHit++;
    d11e:	8f 5f       	subi	r24, 0xFF	; 255
    d120:	80 93 77 02 	sts	0x0277, r24
    d124:	02 c0       	rjmp	.+4      	; 0xd12a <UserInput+0x1d8>
                   else iHit=0;
    d126:	10 92 77 02 	sts	0x0277, r1
				   iLoop=1000;
    d12a:	88 ee       	ldi	r24, 0xE8	; 232
    d12c:	93 e0       	ldi	r25, 0x03	; 3
    d12e:	90 93 71 02 	sts	0x0271, r25
    d132:	80 93 70 02 	sts	0x0270, r24

                   zAlphaChar=AlphaChar;
    d136:	80 91 79 02 	lds	r24, 0x0279
    d13a:	80 93 7a 02 	sts	0x027A, r24
			       AlphaChar=_table_alphanum(IsShifted,KeyPressed,iHit);			   
    d13e:	80 91 76 02 	lds	r24, 0x0276
    d142:	6c 2d       	mov	r22, r12
    d144:	40 91 77 02 	lds	r20, 0x0277
    d148:	0e 94 0b a6 	call	0x14c16	; 0x14c16 <_table_alphanum>
    d14c:	80 93 79 02 	sts	0x0279, r24
                   
				   if (IsNextKey==True){
    d150:	80 91 74 02 	lds	r24, 0x0274
    d154:	81 30       	cpi	r24, 0x01	; 1
    d156:	41 f4       	brne	.+16     	; 0xd168 <UserInput+0x216>
                       AlphaChar=zAlphaChar;       
    d158:	80 91 7a 02 	lds	r24, 0x027A
    d15c:	80 93 79 02 	sts	0x0279, r24
					   IsNextKey=False;
    d160:	10 92 74 02 	sts	0x0274, r1
					   IsSameKey=False;
    d164:	10 92 75 02 	sts	0x0275, r1
				   }   
				   strResult[iValuePos]=AlphaChar;
    d168:	80 91 7c 02 	lds	r24, 0x027C
    d16c:	fe 01       	movw	r30, r28
    d16e:	e8 0f       	add	r30, r24
    d170:	f1 1d       	adc	r31, r1
    d172:	80 91 79 02 	lds	r24, 0x0279
    d176:	80 83       	st	Z, r24
		           strResult[iValuePos+1]=0;
    d178:	11 82       	std	Z+1, r1	; 0x01
				 }//endElse 
				 
			   }//EndAlphaNum

			 if (TypeUI==UI_NUMBER_L){
    d17a:	f2 e0       	ldi	r31, 0x02	; 2
    d17c:	ff 16       	cp	r15, r31
    d17e:	71 f4       	brne	.+28     	; 0xd19c <UserInput+0x24a>
			    if ((NumbValue<=MaxValue)||(MaxValue==0)){
    d180:	a0 16       	cp	r10, r16
    d182:	b1 06       	cpc	r11, r17
    d184:	18 f4       	brcc	.+6      	; 0xd18c <UserInput+0x23a>
    d186:	a1 14       	cp	r10, r1
    d188:	b1 04       	cpc	r11, r1
    d18a:	71 f5       	brne	.+92     	; 0xd1e8 <UserInput+0x296>
				     iValuePos++;
    d18c:	80 91 7c 02 	lds	r24, 0x027C
    d190:	8f 5f       	subi	r24, 0xFF	; 255
    d192:	80 93 7c 02 	sts	0x027C, r24
					 stUserInput=uiInputDisp;
    d196:	83 e0       	ldi	r24, 0x03	; 3
    d198:	80 93 7f 02 	sts	0x027F, r24
				} 
			 }
  
			   if ((NumbValue<=MaxValue)||(MaxValue==0)){
    d19c:	a0 16       	cp	r10, r16
    d19e:	b1 06       	cpc	r11, r17
    d1a0:	18 f4       	brcc	.+6      	; 0xd1a8 <UserInput+0x256>
    d1a2:	a1 14       	cp	r10, r1
    d1a4:	b1 04       	cpc	r11, r1
    d1a6:	01 f5       	brne	.+64     	; 0xd1e8 <UserInput+0x296>
			       if ((TypeUI==UI_NUMBER_R)||(TypeUI==UI_ALPHANUM_R)||
    d1a8:	21 e0       	ldi	r18, 0x01	; 1
    d1aa:	f2 16       	cp	r15, r18
    d1ac:	49 f0       	breq	.+18     	; 0xd1c0 <UserInput+0x26e>
    d1ae:	83 e0       	ldi	r24, 0x03	; 3
    d1b0:	f8 16       	cp	r15, r24
    d1b2:	31 f0       	breq	.+12     	; 0xd1c0 <UserInput+0x26e>
    d1b4:	e4 e0       	ldi	r30, 0x04	; 4
    d1b6:	fe 16       	cp	r15, r30
    d1b8:	19 f0       	breq	.+6      	; 0xd1c0 <UserInput+0x26e>
    d1ba:	f5 e0       	ldi	r31, 0x05	; 5
    d1bc:	ff 16       	cp	r15, r31
    d1be:	a1 f4       	brne	.+40     	; 0xd1e8 <UserInput+0x296>
				       (TypeUI==UI_NUM_PASSWORD)||(TypeUI==UI_ALPHANUM_PASSWORD)){
				      if (IsSameKey==False){
    d1c0:	80 91 75 02 	lds	r24, 0x0275
    d1c4:	88 23       	and	r24, r24
    d1c6:	69 f4       	brne	.+26     	; 0xd1e2 <UserInput+0x290>
					      IsFirst=True;
    d1c8:	81 e0       	ldi	r24, 0x01	; 1
    d1ca:	80 93 72 02 	sts	0x0272, r24
					      iValuePos++;
    d1ce:	80 91 7c 02 	lds	r24, 0x027C
    d1d2:	8f 5f       	subi	r24, 0xFF	; 255
    d1d4:	80 93 7c 02 	sts	0x027C, r24
						  //FullEntry
						  if (iValuePos==MaxLength)Result=USER_FULL_ENTRY;
					      yChar++;
    d1d8:	80 91 7d 02 	lds	r24, 0x027D
    d1dc:	8f 5f       	subi	r24, 0xFF	; 255
    d1de:	80 93 7d 02 	sts	0x027D, r24
						  //yChar=(yChar+1;//Max Display

						  }
                  stUserInput=uiInputDisp;
    d1e2:	83 e0       	ldi	r24, 0x03	; 3
    d1e4:	80 93 7f 02 	sts	0x027F, r24
				  }
			   }
              zKeyChar=KeyChar;
    d1e8:	e0 92 7b 02 	sts	0x027B, r14
    d1ec:	54 e0       	ldi	r21, 0x04	; 4
    d1ee:	e5 2e       	mov	r14, r21
             Result=USER_ENTRY;
             }//EndKeyChar
			 
                 
              if ((TypeUI==UI_NUMBER_R)||(TypeUI==UI_NUMBER_L)||(TypeUI==UI_NUM_PASSWORD)){
    d1f0:	9f 2d       	mov	r25, r15
    d1f2:	91 50       	subi	r25, 0x01	; 1
    d1f4:	92 30       	cpi	r25, 0x02	; 2
    d1f6:	18 f0       	brcs	.+6      	; 0xd1fe <UserInput+0x2ac>
    d1f8:	24 e0       	ldi	r18, 0x04	; 4
    d1fa:	f2 16       	cp	r15, r18
    d1fc:	71 f4       	brne	.+28     	; 0xd21a <UserInput+0x2c8>
                   if((NumbValue>MaxValue)||(iValuePos==MaxLength)){
    d1fe:	a0 16       	cp	r10, r16
    d200:	b1 06       	cpc	r11, r17
    d202:	20 f0       	brcs	.+8      	; 0xd20c <UserInput+0x2ba>
    d204:	80 91 7c 02 	lds	r24, 0x027C
    d208:	88 15       	cp	r24, r8
    d20a:	39 f4       	brne	.+14     	; 0xd21a <UserInput+0x2c8>
			           if (MaxValue>0)system_beep(1);
    d20c:	ab 28       	or	r10, r11
    d20e:	29 f0       	breq	.+10     	; 0xd21a <UserInput+0x2c8>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    d210:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    d212:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    d214:	81 e0       	ldi	r24, 0x01	; 1
    d216:	80 93 bc 01 	sts	0x01BC, r24
			           if (MaxValue>0)system_beep(1);
				   }
                 }
		  
		  //CANCEL OK
		  if (KeyPressed==_KEY_CANCEL){
    d21a:	87 ee       	ldi	r24, 0xE7	; 231
    d21c:	c8 16       	cp	r12, r24
    d21e:	71 f4       	brne	.+28     	; 0xd23c <UserInput+0x2ea>
		      if (iValuePos>0){
    d220:	80 91 7c 02 	lds	r24, 0x027C
    d224:	88 23       	and	r24, r24
    d226:	41 f0       	breq	.+16     	; 0xd238 <UserInput+0x2e6>
			      iLoop=1999;
    d228:	8f ec       	ldi	r24, 0xCF	; 207
    d22a:	97 e0       	ldi	r25, 0x07	; 7
    d22c:	90 93 71 02 	sts	0x0271, r25
    d230:	80 93 70 02 	sts	0x0270, r24
				  stUserInput=uiClearDisplay;
    d234:	82 e0       	ldi	r24, 0x02	; 2
    d236:	26 c0       	rjmp	.+76     	; 0xd284 <UserInput+0x332>
				  }
			  else{
			      UserInputResult=USER_CANCEL;
    d238:	81 e0       	ldi	r24, 0x01	; 1
    d23a:	21 c0       	rjmp	.+66     	; 0xd27e <UserInput+0x32c>
			      stUserInput=uiFinished;
				  }
		  }
		  else {
		  if (KeyPressed==_KEY_ENTER){
    d23c:	e7 eb       	ldi	r30, 0xB7	; 183
    d23e:	ce 16       	cp	r12, r30
    d240:	19 f5       	brne	.+70     	; 0xd288 <UserInput+0x336>
		      strResult[iValuePos]=0;
    d242:	80 91 7c 02 	lds	r24, 0x027C
    d246:	fe 01       	movw	r30, r28
    d248:	e8 0f       	add	r30, r24
    d24a:	f1 1d       	adc	r31, r1
    d24c:	10 82       	st	Z, r1
			  if ((TypeUI==UI_NUMBER_R)||(TypeUI==UI_NUMBER_L)){
    d24e:	92 30       	cpi	r25, 0x02	; 2
    d250:	a8 f4       	brcc	.+42     	; 0xd27c <UserInput+0x32a>
			       if (iValuePos==0)sprintf_P(strResult,PSTR("0"));
    d252:	88 23       	and	r24, r24
    d254:	81 f4       	brne	.+32     	; 0xd276 <UserInput+0x324>
    d256:	00 d0       	rcall	.+0      	; 0xd258 <UserInput+0x306>
    d258:	00 d0       	rcall	.+0      	; 0xd25a <UserInput+0x308>
    d25a:	ed b7       	in	r30, 0x3d	; 61
    d25c:	fe b7       	in	r31, 0x3e	; 62
    d25e:	d2 83       	std	Z+2, r29	; 0x02
    d260:	c1 83       	std	Z+1, r28	; 0x01
    d262:	88 e1       	ldi	r24, 0x18	; 24
    d264:	9e e1       	ldi	r25, 0x1E	; 30
    d266:	94 83       	std	Z+4, r25	; 0x04
    d268:	83 83       	std	Z+3, r24	; 0x03
    d26a:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
    d26e:	0f 90       	pop	r0
    d270:	0f 90       	pop	r0
    d272:	0f 90       	pop	r0
    d274:	0f 90       	pop	r0
			       RemZeroLead(strResult);
    d276:	ce 01       	movw	r24, r28
    d278:	0e 94 3f 25 	call	0x4a7e	; 0x4a7e <RemZeroLead>
				  }
		      UserInputResult=USER_OK;
    d27c:	83 e0       	ldi	r24, 0x03	; 3
    d27e:	80 93 80 02 	sts	0x0280, r24
		      stUserInput=uiFinished;
    d282:	84 e0       	ldi	r24, 0x04	; 4
    d284:	80 93 7f 02 	sts	0x027F, r24
			  }
		  }//EndElse

		  if ((iLoop%2000)==0){
    d288:	80 91 70 02 	lds	r24, 0x0270
    d28c:	90 91 71 02 	lds	r25, 0x0271
    d290:	60 ed       	ldi	r22, 0xD0	; 208
    d292:	77 e0       	ldi	r23, 0x07	; 7
    d294:	0e 94 65 aa 	call	0x154ca	; 0x154ca <__udivmodhi4>
    d298:	89 2b       	or	r24, r25
    d29a:	09 f0       	breq	.+2      	; 0xd29e <UserInput+0x34c>
    d29c:	4b c0       	rjmp	.+150    	; 0xd334 <UserInput+0x3e2>
		      if (IsSameKey==True)
    d29e:	80 91 75 02 	lds	r24, 0x0275
    d2a2:	81 30       	cpi	r24, 0x01	; 1
    d2a4:	c9 f4       	brne	.+50     	; 0xd2d8 <UserInput+0x386>
			      //lcd_put(xChar,yChar,AlphaChar); 
				  lcd_put(xPos+((yPos+iValuePos-1)/20),yPos+(iValuePos%20),AlphaChar); 
    d2a6:	20 91 7c 02 	lds	r18, 0x027C
    d2aa:	82 2f       	mov	r24, r18
    d2ac:	90 e0       	ldi	r25, 0x00	; 0
    d2ae:	01 97       	sbiw	r24, 0x01	; 1
    d2b0:	8d 0d       	add	r24, r13
    d2b2:	91 1d       	adc	r25, r1
    d2b4:	64 e1       	ldi	r22, 0x14	; 20
    d2b6:	70 e0       	ldi	r23, 0x00	; 0
    d2b8:	0e 94 79 aa 	call	0x154f2	; 0x154f2 <__divmodhi4>
    d2bc:	36 2f       	mov	r19, r22
    d2be:	82 2f       	mov	r24, r18
    d2c0:	64 e1       	ldi	r22, 0x14	; 20
    d2c2:	0e 94 4c aa 	call	0x15498	; 0x15498 <__udivmodqi4>
    d2c6:	6d 2d       	mov	r22, r13
    d2c8:	69 0f       	add	r22, r25
    d2ca:	89 2d       	mov	r24, r9
    d2cc:	83 0f       	add	r24, r19
    d2ce:	40 91 79 02 	lds	r20, 0x0279
    d2d2:	0e 94 2c a5 	call	0x14a58	; 0x14a58 <lcd_put>
    d2d6:	2e c0       	rjmp	.+92     	; 0xd334 <UserInput+0x3e2>
			  else {
			      if((TypeUI==UI_ALPHANUM_PASSWORD)&&(iValuePos>0))lcd_put(xChar,yChar-1,'*'); 
    d2d8:	f5 e0       	ldi	r31, 0x05	; 5
    d2da:	ff 16       	cp	r15, r31
    d2dc:	61 f4       	brne	.+24     	; 0xd2f6 <UserInput+0x3a4>
    d2de:	80 91 7c 02 	lds	r24, 0x027C
    d2e2:	88 23       	and	r24, r24
    d2e4:	41 f0       	breq	.+16     	; 0xd2f6 <UserInput+0x3a4>
    d2e6:	60 91 7d 02 	lds	r22, 0x027D
    d2ea:	61 50       	subi	r22, 0x01	; 1
    d2ec:	80 91 7e 02 	lds	r24, 0x027E
    d2f0:	4a e2       	ldi	r20, 0x2A	; 42
    d2f2:	0e 94 2c a5 	call	0x14a58	; 0x14a58 <lcd_put>
			      //lcd_put(xChar,yChar,'_'); 
				  lcd_put(xPos+((yPos+iValuePos-1)/20),yPos+(iValuePos%20),'_'); 
    d2f6:	20 91 7c 02 	lds	r18, 0x027C
    d2fa:	82 2f       	mov	r24, r18
    d2fc:	90 e0       	ldi	r25, 0x00	; 0
    d2fe:	01 97       	sbiw	r24, 0x01	; 1
    d300:	8d 0d       	add	r24, r13
    d302:	91 1d       	adc	r25, r1
    d304:	64 e1       	ldi	r22, 0x14	; 20
    d306:	70 e0       	ldi	r23, 0x00	; 0
    d308:	0e 94 79 aa 	call	0x154f2	; 0x154f2 <__divmodhi4>
    d30c:	36 2f       	mov	r19, r22
    d30e:	82 2f       	mov	r24, r18
    d310:	64 e1       	ldi	r22, 0x14	; 20
    d312:	0e 94 4c aa 	call	0x15498	; 0x15498 <__udivmodqi4>
    d316:	6d 2d       	mov	r22, r13
    d318:	69 0f       	add	r22, r25
    d31a:	89 2d       	mov	r24, r9
    d31c:	83 0f       	add	r24, r19
    d31e:	4f e5       	ldi	r20, 0x5F	; 95
    d320:	0e 94 2c a5 	call	0x14a58	; 0x14a58 <lcd_put>

				  if (IsFirst==True){
    d324:	80 91 72 02 	lds	r24, 0x0272
    d328:	81 30       	cpi	r24, 0x01	; 1
    d32a:	21 f4       	brne	.+8      	; 0xd334 <UserInput+0x3e2>
				      IsFirst=False;
    d32c:	10 92 72 02 	sts	0x0272, r1
				      zKeyChar=0;
    d330:	10 92 7b 02 	sts	0x027B, r1
					  }
				  }
			  }
          if ((iLoop%2000)==1000){
    d334:	80 91 70 02 	lds	r24, 0x0270
    d338:	90 91 71 02 	lds	r25, 0x0271
    d33c:	60 ed       	ldi	r22, 0xD0	; 208
    d33e:	77 e0       	ldi	r23, 0x07	; 7
    d340:	0e 94 65 aa 	call	0x154ca	; 0x154ca <__udivmodhi4>
    d344:	88 5e       	subi	r24, 0xE8	; 232
    d346:	93 40       	sbci	r25, 0x03	; 3
    d348:	d1 f5       	brne	.+116    	; 0xd3be <UserInput+0x46c>
		      if (IsSameKey==True){
    d34a:	80 91 75 02 	lds	r24, 0x0275
    d34e:	81 30       	cpi	r24, 0x01	; 1
    d350:	f9 f4       	brne	.+62     	; 0xd390 <UserInput+0x43e>
			      if (TypeUI!=UI_NUM_PASSWORD)
    d352:	84 e0       	ldi	r24, 0x04	; 4
    d354:	f8 16       	cp	r15, r24
    d356:	b1 f0       	breq	.+44     	; 0xd384 <UserInput+0x432>
				       //lcd_put(xChar,yChar,AlphaChar); 
					   lcd_put(xPos+((yPos+iValuePos-1)/20),yChar%21,AlphaChar); 
    d358:	80 91 7c 02 	lds	r24, 0x027C
    d35c:	90 e0       	ldi	r25, 0x00	; 0
    d35e:	01 97       	sbiw	r24, 0x01	; 1
    d360:	8d 0d       	add	r24, r13
    d362:	91 1d       	adc	r25, r1
    d364:	64 e1       	ldi	r22, 0x14	; 20
    d366:	70 e0       	ldi	r23, 0x00	; 0
    d368:	0e 94 79 aa 	call	0x154f2	; 0x154f2 <__divmodhi4>
    d36c:	26 2f       	mov	r18, r22
    d36e:	80 91 7d 02 	lds	r24, 0x027D
    d372:	65 e1       	ldi	r22, 0x15	; 21
    d374:	0e 94 4c aa 	call	0x15498	; 0x15498 <__udivmodqi4>
    d378:	89 2d       	mov	r24, r9
    d37a:	82 0f       	add	r24, r18
    d37c:	69 2f       	mov	r22, r25
    d37e:	40 91 79 02 	lds	r20, 0x0279
    d382:	1b c0       	rjmp	.+54     	; 0xd3ba <UserInput+0x468>
					   
				  else lcd_put(xChar,yChar,'*'); 
    d384:	80 91 7e 02 	lds	r24, 0x027E
    d388:	60 91 7d 02 	lds	r22, 0x027D
    d38c:	4a e2       	ldi	r20, 0x2A	; 42
    d38e:	15 c0       	rjmp	.+42     	; 0xd3ba <UserInput+0x468>
			  }
			  //else lcd_put(xChar,yChar,' '); 
			  else lcd_put(xPos+((yPos+iValuePos-1)/20),yPos+(iValuePos%20),' '); 			  
    d390:	20 91 7c 02 	lds	r18, 0x027C
    d394:	82 2f       	mov	r24, r18
    d396:	90 e0       	ldi	r25, 0x00	; 0
    d398:	01 97       	sbiw	r24, 0x01	; 1
    d39a:	8d 0d       	add	r24, r13
    d39c:	91 1d       	adc	r25, r1
    d39e:	64 e1       	ldi	r22, 0x14	; 20
    d3a0:	70 e0       	ldi	r23, 0x00	; 0
    d3a2:	0e 94 79 aa 	call	0x154f2	; 0x154f2 <__divmodhi4>
    d3a6:	36 2f       	mov	r19, r22
    d3a8:	82 2f       	mov	r24, r18
    d3aa:	64 e1       	ldi	r22, 0x14	; 20
    d3ac:	0e 94 4c aa 	call	0x15498	; 0x15498 <__udivmodqi4>
    d3b0:	d9 0e       	add	r13, r25
    d3b2:	89 2d       	mov	r24, r9
    d3b4:	83 0f       	add	r24, r19
    d3b6:	6d 2d       	mov	r22, r13
    d3b8:	40 e2       	ldi	r20, 0x20	; 32
    d3ba:	0e 94 2c a5 	call	0x14a58	; 0x14a58 <lcd_put>
			  }
          iLoop++;
    d3be:	80 91 70 02 	lds	r24, 0x0270
    d3c2:	90 91 71 02 	lds	r25, 0x0271
    d3c6:	01 96       	adiw	r24, 0x01	; 1
    d3c8:	90 93 71 02 	sts	0x0271, r25
    d3cc:	80 93 70 02 	sts	0x0270, r24
    d3d0:	d6 c0       	rjmp	.+428    	; 0xd57e <UserInput+0x62c>
          break;
     case uiClearDisplay:
          if (TypeUI==UI_NUMBER_L){
    d3d2:	e2 e0       	ldi	r30, 0x02	; 2
    d3d4:	8e 17       	cp	r24, r30
    d3d6:	99 f4       	brne	.+38     	; 0xd3fe <UserInput+0x4ac>
		      lcd_put(xChar,(yChar-iValuePos),' '); // 123_ 1_
    d3d8:	60 91 7d 02 	lds	r22, 0x027D
    d3dc:	80 91 7c 02 	lds	r24, 0x027C
    d3e0:	68 1b       	sub	r22, r24
    d3e2:	80 91 7e 02 	lds	r24, 0x027E
    d3e6:	40 e2       	ldi	r20, 0x20	; 32
    d3e8:	0e 94 2c a5 	call	0x14a58	; 0x14a58 <lcd_put>
		      strResult[iValuePos]=0;
    d3ec:	80 91 7c 02 	lds	r24, 0x027C
    d3f0:	c8 0f       	add	r28, r24
    d3f2:	d1 1d       	adc	r29, r1
    d3f4:	18 82       	st	Y, r1
		      iValuePos--;
    d3f6:	81 50       	subi	r24, 0x01	; 1
    d3f8:	80 93 7c 02 	sts	0x027C, r24
    d3fc:	33 c0       	rjmp	.+102    	; 0xd464 <UserInput+0x512>
			  }
          else
		  if ((TypeUI==UI_NUMBER_R)||(TypeUI==UI_ALPHANUM_R)||
    d3fe:	f1 e0       	ldi	r31, 0x01	; 1
    d400:	8f 17       	cp	r24, r31
    d402:	49 f0       	breq	.+18     	; 0xd416 <UserInput+0x4c4>
    d404:	23 e0       	ldi	r18, 0x03	; 3
    d406:	82 17       	cp	r24, r18
    d408:	31 f0       	breq	.+12     	; 0xd416 <UserInput+0x4c4>
    d40a:	84 e0       	ldi	r24, 0x04	; 4
    d40c:	f8 16       	cp	r15, r24
    d40e:	19 f0       	breq	.+6      	; 0xd416 <UserInput+0x4c4>
    d410:	e5 e0       	ldi	r30, 0x05	; 5
    d412:	fe 16       	cp	r15, r30
    d414:	39 f5       	brne	.+78     	; 0xd464 <UserInput+0x512>
		      (TypeUI==UI_NUM_PASSWORD)||(TypeUI==UI_ALPHANUM_PASSWORD)){
		      //lcd_put(xChar,yChar,' '); // 123_ 1_
			  lcd_put(xPos+((yPos+iValuePos-1)/20),yPos+(iValuePos%20),' '); // 123_ 1_
    d416:	20 91 7c 02 	lds	r18, 0x027C
    d41a:	82 2f       	mov	r24, r18
    d41c:	90 e0       	ldi	r25, 0x00	; 0
    d41e:	01 97       	sbiw	r24, 0x01	; 1
    d420:	8d 0d       	add	r24, r13
    d422:	91 1d       	adc	r25, r1
    d424:	64 e1       	ldi	r22, 0x14	; 20
    d426:	70 e0       	ldi	r23, 0x00	; 0
    d428:	0e 94 79 aa 	call	0x154f2	; 0x154f2 <__divmodhi4>
    d42c:	36 2f       	mov	r19, r22
    d42e:	82 2f       	mov	r24, r18
    d430:	64 e1       	ldi	r22, 0x14	; 20
    d432:	0e 94 4c aa 	call	0x15498	; 0x15498 <__udivmodqi4>
    d436:	d9 0e       	add	r13, r25
    d438:	89 2d       	mov	r24, r9
    d43a:	83 0f       	add	r24, r19
    d43c:	6d 2d       	mov	r22, r13
    d43e:	40 e2       	ldi	r20, 0x20	; 32
    d440:	0e 94 2c a5 	call	0x14a58	; 0x14a58 <lcd_put>
			  
		      strResult[iValuePos]=0;
    d444:	80 91 7c 02 	lds	r24, 0x027C
    d448:	c8 0f       	add	r28, r24
    d44a:	d1 1d       	adc	r29, r1
    d44c:	18 82       	st	Y, r1
		      iValuePos--;
    d44e:	81 50       	subi	r24, 0x01	; 1
    d450:	80 93 7c 02 	sts	0x027C, r24
			  yChar--;
    d454:	80 91 7d 02 	lds	r24, 0x027D
    d458:	81 50       	subi	r24, 0x01	; 1
    d45a:	80 93 7d 02 	sts	0x027D, r24
			  IsDelete=True;
    d45e:	81 e0       	ldi	r24, 0x01	; 1
    d460:	80 93 78 02 	sts	0x0278, r24
		  }
		  if (iValuePos==0)Result=USER_NO_DATA;		  
    d464:	80 91 7c 02 	lds	r24, 0x027C
    d468:	88 23       	and	r24, r24
    d46a:	19 f4       	brne	.+6      	; 0xd472 <UserInput+0x520>
    d46c:	45 e0       	ldi	r20, 0x05	; 5
    d46e:	e4 2e       	mov	r14, r20
    d470:	01 c0       	rjmp	.+2      	; 0xd474 <UserInput+0x522>
    d472:	ee 24       	eor	r14, r14
		  stUserInput=uiInputDisp;//Redraw
    d474:	83 e0       	ldi	r24, 0x03	; 3
    d476:	80 93 7f 02 	sts	0x027F, r24
    d47a:	81 c0       	rjmp	.+258    	; 0xd57e <UserInput+0x62c>
	      break;      
     case uiInputDisp:
	      if(TypeUI==UI_ALPHANUM_PASSWORD){
    d47c:	f5 e0       	ldi	r31, 0x05	; 5
    d47e:	8f 17       	cp	r24, r31
    d480:	19 f5       	brne	.+70     	; 0xd4c8 <UserInput+0x576>
			  if (iValuePos>0){
    d482:	80 91 7c 02 	lds	r24, 0x027C
    d486:	88 23       	and	r24, r24
    d488:	a9 f0       	breq	.+42     	; 0xd4b4 <UserInput+0x562>
                  lcd_put(xChar,(yChar-2),'*');
    d48a:	60 91 7d 02 	lds	r22, 0x027D
    d48e:	62 50       	subi	r22, 0x02	; 2
    d490:	80 91 7e 02 	lds	r24, 0x027E
    d494:	4a e2       	ldi	r20, 0x2A	; 42
    d496:	0e 94 2c a5 	call	0x14a58	; 0x14a58 <lcd_put>
			      if (IsDelete==True){
    d49a:	80 91 78 02 	lds	r24, 0x0278
    d49e:	60 91 7d 02 	lds	r22, 0x027D
    d4a2:	81 30       	cpi	r24, 0x01	; 1
    d4a4:	71 f0       	breq	.+28     	; 0xd4c2 <UserInput+0x570>
				      IsDelete=False;
			          lcd_put(xChar,(yChar-1),'*');
			          }
				  else lcd_put(xChar,(yChar-1),strResult[iValuePos-1]);
    d4a6:	61 50       	subi	r22, 0x01	; 1
    d4a8:	80 91 7c 02 	lds	r24, 0x027C
    d4ac:	c8 0f       	add	r28, r24
    d4ae:	d1 1d       	adc	r29, r1
    d4b0:	21 97       	sbiw	r28, 0x01	; 1
    d4b2:	4d c0       	rjmp	.+154    	; 0xd54e <UserInput+0x5fc>
			      }
			  else{ if(IsDelete==True){
    d4b4:	80 91 78 02 	lds	r24, 0x0278
    d4b8:	60 91 7d 02 	lds	r22, 0x027D
    d4bc:	81 30       	cpi	r24, 0x01	; 1
    d4be:	09 f0       	breq	.+2      	; 0xd4c2 <UserInput+0x570>
    d4c0:	45 c0       	rjmp	.+138    	; 0xd54c <UserInput+0x5fa>
			           IsDelete=False;
    d4c2:	10 92 78 02 	sts	0x0278, r1
    d4c6:	4c c0       	rjmp	.+152    	; 0xd560 <UserInput+0x60e>
					   lcd_put(xChar,(yChar-1),'*');
			           }
			        else lcd_put(xChar,(yChar-1),strResult[iValuePos]);
			  }
		  }else
	      if (TypeUI==UI_NUMBER_L){
    d4c8:	22 e0       	ldi	r18, 0x02	; 2
    d4ca:	82 17       	cp	r24, r18
    d4cc:	a1 f4       	brne	.+40     	; 0xd4f6 <UserInput+0x5a4>
    d4ce:	10 e0       	ldi	r17, 0x00	; 0
    d4d0:	0d c0       	rjmp	.+26     	; 0xd4ec <UserInput+0x59a>
	          for(iDisp=0;iDisp<iValuePos;iDisp++){
				  lcd_put(xChar,(yChar-(iValuePos-iDisp)),strResult[iDisp]);
    d4d2:	60 91 7d 02 	lds	r22, 0x027D
    d4d6:	68 1b       	sub	r22, r24
    d4d8:	61 0f       	add	r22, r17
    d4da:	fe 01       	movw	r30, r28
    d4dc:	e1 0f       	add	r30, r17
    d4de:	f1 1d       	adc	r31, r1
    d4e0:	80 91 7e 02 	lds	r24, 0x027E
    d4e4:	40 81       	ld	r20, Z
    d4e6:	0e 94 2c a5 	call	0x14a58	; 0x14a58 <lcd_put>
			           }
			        else lcd_put(xChar,(yChar-1),strResult[iValuePos]);
			  }
		  }else
	      if (TypeUI==UI_NUMBER_L){
	          for(iDisp=0;iDisp<iValuePos;iDisp++){
    d4ea:	1f 5f       	subi	r17, 0xFF	; 255
    d4ec:	80 91 7c 02 	lds	r24, 0x027C
    d4f0:	18 17       	cp	r17, r24
    d4f2:	78 f3       	brcs	.-34     	; 0xd4d2 <UserInput+0x580>
    d4f4:	3b c0       	rjmp	.+118    	; 0xd56c <UserInput+0x61a>
				  lcd_put(xChar,(yChar-(iValuePos-iDisp)),strResult[iDisp]);
		      }
		  }else
	      if ((TypeUI==UI_NUMBER_R)||(TypeUI==UI_ALPHANUM_R)){
    d4f6:	81 e0       	ldi	r24, 0x01	; 1
    d4f8:	f8 16       	cp	r15, r24
    d4fa:	19 f0       	breq	.+6      	; 0xd502 <UserInput+0x5b0>
    d4fc:	e3 e0       	ldi	r30, 0x03	; 3
    d4fe:	fe 16       	cp	r15, r30
    d500:	51 f5       	brne	.+84     	; 0xd556 <UserInput+0x604>
		      
			  //if (iValuePos>0) lcd_put(xChar,(yChar-1),strResult[iValuePos-1]);
			  if (iValuePos>0) lcd_put(xPos+((yPos+iValuePos-1)/21),yPos+((iValuePos-1)%20),strResult[iValuePos-1]);			  
    d502:	20 91 7c 02 	lds	r18, 0x027C
    d506:	4d 2d       	mov	r20, r13
    d508:	50 e0       	ldi	r21, 0x00	; 0
    d50a:	22 23       	and	r18, r18
    d50c:	c1 f0       	breq	.+48     	; 0xd53e <UserInput+0x5ec>
    d50e:	30 e0       	ldi	r19, 0x00	; 0
    d510:	f9 01       	movw	r30, r18
    d512:	31 97       	sbiw	r30, 0x01	; 1
    d514:	cf 01       	movw	r24, r30
    d516:	84 0f       	add	r24, r20
    d518:	95 1f       	adc	r25, r21
    d51a:	65 e1       	ldi	r22, 0x15	; 21
    d51c:	70 e0       	ldi	r23, 0x00	; 0
    d51e:	0e 94 79 aa 	call	0x154f2	; 0x154f2 <__divmodhi4>
    d522:	46 2f       	mov	r20, r22
    d524:	cf 01       	movw	r24, r30
    d526:	64 e1       	ldi	r22, 0x14	; 20
    d528:	70 e0       	ldi	r23, 0x00	; 0
    d52a:	0e 94 79 aa 	call	0x154f2	; 0x154f2 <__divmodhi4>
    d52e:	d8 0e       	add	r13, r24
    d530:	c2 0f       	add	r28, r18
    d532:	d3 1f       	adc	r29, r19
    d534:	21 97       	sbiw	r28, 0x01	; 1
    d536:	89 2d       	mov	r24, r9
    d538:	84 0f       	add	r24, r20
    d53a:	6d 2d       	mov	r22, r13
    d53c:	0a c0       	rjmp	.+20     	; 0xd552 <UserInput+0x600>
			  else{ if ((yChar-1)>=yPos)lcd_put(xChar,(yChar-1),strResult[iValuePos]);
    d53e:	60 91 7d 02 	lds	r22, 0x027D
    d542:	86 2f       	mov	r24, r22
    d544:	90 e0       	ldi	r25, 0x00	; 0
    d546:	48 17       	cp	r20, r24
    d548:	59 07       	cpc	r21, r25
    d54a:	84 f4       	brge	.+32     	; 0xd56c <UserInput+0x61a>
    d54c:	61 50       	subi	r22, 0x01	; 1
    d54e:	80 91 7e 02 	lds	r24, 0x027E
    d552:	48 81       	ld	r20, Y
    d554:	09 c0       	rjmp	.+18     	; 0xd568 <UserInput+0x616>
			  }
		  }else
		  //DisplayAsterik *
		  if (TypeUI==UI_NUM_PASSWORD){
    d556:	f4 e0       	ldi	r31, 0x04	; 4
    d558:	ff 16       	cp	r15, r31
    d55a:	41 f4       	brne	.+16     	; 0xd56c <UserInput+0x61a>
		      lcd_put(xChar,(yChar-1),'*');
    d55c:	60 91 7d 02 	lds	r22, 0x027D
    d560:	61 50       	subi	r22, 0x01	; 1
    d562:	80 91 7e 02 	lds	r24, 0x027E
    d566:	4a e2       	ldi	r20, 0x2A	; 42
    d568:	0e 94 2c a5 	call	0x14a58	; 0x14a58 <lcd_put>
		  }

          stUserInput=uiInput;
    d56c:	81 e0       	ldi	r24, 0x01	; 1
    d56e:	80 93 7f 02 	sts	0x027F, r24
    d572:	ee 24       	eor	r14, r14
    d574:	04 c0       	rjmp	.+8      	; 0xd57e <UserInput+0x62c>
	      break;	 
     case uiFinished:
	      Result=UserInputResult;
    d576:	e0 90 80 02 	lds	r14, 0x0280
	      stUserInput=uiInit;
    d57a:	10 92 7f 02 	sts	0x027F, r1
	      break;
	 }
	 return Result;
}
    d57e:	8e 2d       	mov	r24, r14
    d580:	df 91       	pop	r29
    d582:	cf 91       	pop	r28
    d584:	1f 91       	pop	r17
    d586:	0f 91       	pop	r16
    d588:	ff 90       	pop	r15
    d58a:	ef 90       	pop	r14
    d58c:	df 90       	pop	r13
    d58e:	cf 90       	pop	r12
    d590:	bf 90       	pop	r11
    d592:	af 90       	pop	r10
    d594:	9f 90       	pop	r9
    d596:	8f 90       	pop	r8
    d598:	08 95       	ret

0000d59a <FSettingOperator>:
char FSettingHost(){
     _menu_host();
	 return MENU_DONE;
}

char FSettingOperator(){//Change Active Operator, Change Password
    d59a:	ef 92       	push	r14
    d59c:	0f 93       	push	r16
    d59e:	1f 93       	push	r17
    d5a0:	df 93       	push	r29
    d5a2:	cf 93       	push	r28
    d5a4:	cd b7       	in	r28, 0x3d	; 61
    d5a6:	de b7       	in	r29, 0x3e	; 62
    d5a8:	e5 97       	sbiw	r28, 0x35	; 53
    d5aa:	0f b6       	in	r0, 0x3f	; 63
    d5ac:	f8 94       	cli
    d5ae:	de bf       	out	0x3e, r29	; 62
    d5b0:	0f be       	out	0x3f, r0	; 63
    d5b2:	cd bf       	out	0x3d, r28	; 61
	        char KeyPressed,KeyChar,lcdteks[20],strPassword[15];
			char strOperatorName[18];
			char uiResult=USER_NONE,Result=MENU_NONE;

	 Result=MENU_NONE;
	 switch(stSettingOperator){
    d5b4:	80 91 1e 02 	lds	r24, 0x021E
    d5b8:	87 30       	cpi	r24, 0x07	; 7
    d5ba:	09 f4       	brne	.+2      	; 0xd5be <FSettingOperator+0x24>
    d5bc:	74 c1       	rjmp	.+744    	; 0xd8a6 <FSettingOperator+0x30c>
    d5be:	88 30       	cpi	r24, 0x08	; 8
    d5c0:	90 f4       	brcc	.+36     	; 0xd5e6 <FSettingOperator+0x4c>
    d5c2:	83 30       	cpi	r24, 0x03	; 3
    d5c4:	09 f4       	brne	.+2      	; 0xd5c8 <FSettingOperator+0x2e>
    d5c6:	9e c0       	rjmp	.+316    	; 0xd704 <FSettingOperator+0x16a>
    d5c8:	84 30       	cpi	r24, 0x04	; 4
    d5ca:	30 f4       	brcc	.+12     	; 0xd5d8 <FSettingOperator+0x3e>
    d5cc:	81 30       	cpi	r24, 0x01	; 1
    d5ce:	d1 f1       	breq	.+116    	; 0xd644 <FSettingOperator+0xaa>
    d5d0:	82 30       	cpi	r24, 0x02	; 2
    d5d2:	08 f0       	brcs	.+2      	; 0xd5d6 <FSettingOperator+0x3c>
    d5d4:	4a c0       	rjmp	.+148    	; 0xd66a <FSettingOperator+0xd0>
    d5d6:	20 c0       	rjmp	.+64     	; 0xd618 <FSettingOperator+0x7e>
    d5d8:	85 30       	cpi	r24, 0x05	; 5
    d5da:	09 f4       	brne	.+2      	; 0xd5de <FSettingOperator+0x44>
    d5dc:	35 c1       	rjmp	.+618    	; 0xd848 <FSettingOperator+0x2ae>
    d5de:	86 30       	cpi	r24, 0x06	; 6
    d5e0:	08 f0       	brcs	.+2      	; 0xd5e4 <FSettingOperator+0x4a>
    d5e2:	4e c1       	rjmp	.+668    	; 0xd880 <FSettingOperator+0x2e6>
    d5e4:	fd c0       	rjmp	.+506    	; 0xd7e0 <FSettingOperator+0x246>
    d5e6:	8b 30       	cpi	r24, 0x0B	; 11
    d5e8:	09 f4       	brne	.+2      	; 0xd5ec <FSettingOperator+0x52>
    d5ea:	1f c2       	rjmp	.+1086   	; 0xda2a <FSettingOperator+0x490>
    d5ec:	8c 30       	cpi	r24, 0x0C	; 12
    d5ee:	38 f4       	brcc	.+14     	; 0xd5fe <FSettingOperator+0x64>
    d5f0:	89 30       	cpi	r24, 0x09	; 9
    d5f2:	09 f4       	brne	.+2      	; 0xd5f6 <FSettingOperator+0x5c>
    d5f4:	a6 c1       	rjmp	.+844    	; 0xd942 <FSettingOperator+0x3a8>
    d5f6:	8a 30       	cpi	r24, 0x0A	; 10
    d5f8:	08 f0       	brcs	.+2      	; 0xd5fc <FSettingOperator+0x62>
    d5fa:	d6 c1       	rjmp	.+940    	; 0xd9a8 <FSettingOperator+0x40e>
    d5fc:	74 c1       	rjmp	.+744    	; 0xd8e6 <FSettingOperator+0x34c>
    d5fe:	8d 30       	cpi	r24, 0x0D	; 13
    d600:	09 f4       	brne	.+2      	; 0xd604 <FSettingOperator+0x6a>
    d602:	95 c2       	rjmp	.+1322   	; 0xdb2e <FSettingOperator+0x594>
    d604:	8d 30       	cpi	r24, 0x0D	; 13
    d606:	08 f4       	brcc	.+2      	; 0xd60a <FSettingOperator+0x70>
    d608:	17 c2       	rjmp	.+1070   	; 0xda38 <FSettingOperator+0x49e>
    d60a:	8e 30       	cpi	r24, 0x0E	; 14
    d60c:	09 f4       	brne	.+2      	; 0xd610 <FSettingOperator+0x76>
    d60e:	94 c2       	rjmp	.+1320   	; 0xdb38 <FSettingOperator+0x59e>
    d610:	8f 30       	cpi	r24, 0x0F	; 15
    d612:	09 f0       	breq	.+2      	; 0xd616 <FSettingOperator+0x7c>
    d614:	9c c2       	rjmp	.+1336   	; 0xdb4e <FSettingOperator+0x5b4>
    d616:	97 c2       	rjmp	.+1326   	; 0xdb46 <FSettingOperator+0x5ac>
	 case soMenuOption:
	      lcd_clear();
    d618:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
		  lcd_printf(1,1,PSTR("1.Change Operator"));
    d61c:	81 e0       	ldi	r24, 0x01	; 1
    d61e:	61 e0       	ldi	r22, 0x01	; 1
    d620:	46 e7       	ldi	r20, 0x76	; 118
    d622:	52 e1       	ldi	r21, 0x12	; 18
    d624:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  lcd_printf(2,1,PSTR("2.Change Password"));
    d628:	82 e0       	ldi	r24, 0x02	; 2
    d62a:	61 e0       	ldi	r22, 0x01	; 1
    d62c:	44 e6       	ldi	r20, 0x64	; 100
    d62e:	52 e1       	ldi	r21, 0x12	; 18
    d630:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  lcd_printf(4,1,PSTR("[*]Back          "));
    d634:	84 e0       	ldi	r24, 0x04	; 4
    d636:	61 e0       	ldi	r22, 0x01	; 1
    d638:	42 e5       	ldi	r20, 0x52	; 82
    d63a:	52 e1       	ldi	r21, 0x12	; 18
    d63c:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
          stSettingOperator=soMenuOptionInput;
    d640:	81 e0       	ldi	r24, 0x01	; 1
    d642:	5e c2       	rjmp	.+1212   	; 0xdb00 <FSettingOperator+0x566>
	      break;
     case soMenuOptionInput:
	      KeyPressed=_key_scan(1);
    d644:	81 e0       	ldi	r24, 0x01	; 1
    d646:	0e 94 58 a6 	call	0x14cb0	; 0x14cb0 <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
    d64a:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <_key_btn>
		  switch(KeyChar){
    d64e:	81 33       	cpi	r24, 0x31	; 49
    d650:	31 f0       	breq	.+12     	; 0xd65e <FSettingOperator+0xc4>
    d652:	82 33       	cpi	r24, 0x32	; 50
    d654:	31 f0       	breq	.+12     	; 0xd662 <FSettingOperator+0xc8>
    d656:	8a 32       	cpi	r24, 0x2A	; 42
    d658:	09 f0       	breq	.+2      	; 0xd65c <FSettingOperator+0xc2>
    d65a:	79 c2       	rjmp	.+1266   	; 0xdb4e <FSettingOperator+0x5b4>
    d65c:	04 c0       	rjmp	.+8      	; 0xd666 <FSettingOperator+0xcc>
		  case '1':
		       stSettingOperator=soChangeOperatorInit;
    d65e:	82 e0       	ldi	r24, 0x02	; 2
    d660:	4f c2       	rjmp	.+1182   	; 0xdb00 <FSettingOperator+0x566>
		       break;
          case '2':
		       stSettingOperator=soChangePasswordInit;
    d662:	85 e0       	ldi	r24, 0x05	; 5
    d664:	4d c2       	rjmp	.+1178   	; 0xdb00 <FSettingOperator+0x566>
		       break;
          case '*':
		       stSettingOperator=soExitSettingOperator;
    d666:	8f e0       	ldi	r24, 0x0F	; 15
    d668:	4b c2       	rjmp	.+1174   	; 0xdb00 <FSettingOperator+0x566>
		       break;
		  }
	      break;
     case soChangeOperatorInit:
	      lcd_clear();		  
    d66a:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
		  eeprom_read_block((void*) &strOperatorName, (const void*) &DefOperatorName,18);
    d66e:	8e 01       	movw	r16, r28
    d670:	00 5f       	subi	r16, 0xF0	; 240
    d672:	1f 4f       	sbci	r17, 0xFF	; 255
    d674:	c8 01       	movw	r24, r16
    d676:	65 e1       	ldi	r22, 0x15	; 21
    d678:	70 e0       	ldi	r23, 0x00	; 0
    d67a:	42 e1       	ldi	r20, 0x12	; 18
    d67c:	50 e0       	ldi	r21, 0x00	; 0
    d67e:	0e 94 1b ad 	call	0x15a36	; 0x15a36 <__eerd_block_m128>
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    d682:	98 01       	movw	r18, r16
    d684:	ce 01       	movw	r24, r28
    d686:	4f 96       	adiw	r24, 0x1f	; 31
	    Dest[i]=Source[IdxSource+i];
    d688:	0f 5f       	subi	r16, 0xFF	; 255
    d68a:	1f 4f       	sbci	r17, 0xFF	; 255
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    d68c:	08 17       	cp	r16, r24
    d68e:	19 07       	cpc	r17, r25
    d690:	d9 f7       	brne	.-10     	; 0xd688 <FSettingOperator+0xee>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    d692:	1f 8e       	std	Y+31, r1	; 0x1f
     case soChangeOperatorInit:
	      lcd_clear();		  
		  eeprom_read_block((void*) &strOperatorName, (const void*) &DefOperatorName,18);
		  StrPosCopy(strOperatorName,strOperatorName,0,15);

		  sprintf_P(lcdteks,PSTR("%s"),strOperatorName);
    d694:	00 d0       	rcall	.+0      	; 0xd696 <FSettingOperator+0xfc>
    d696:	00 d0       	rcall	.+0      	; 0xd698 <FSettingOperator+0xfe>
    d698:	00 d0       	rcall	.+0      	; 0xd69a <FSettingOperator+0x100>
    d69a:	ed b7       	in	r30, 0x3d	; 61
    d69c:	fe b7       	in	r31, 0x3e	; 62
    d69e:	31 96       	adiw	r30, 0x01	; 1
    d6a0:	8e 01       	movw	r16, r28
    d6a2:	0e 5d       	subi	r16, 0xDE	; 222
    d6a4:	1f 4f       	sbci	r17, 0xFF	; 255
    d6a6:	ad b7       	in	r26, 0x3d	; 61
    d6a8:	be b7       	in	r27, 0x3e	; 62
    d6aa:	12 96       	adiw	r26, 0x02	; 2
    d6ac:	1c 93       	st	X, r17
    d6ae:	0e 93       	st	-X, r16
    d6b0:	11 97       	sbiw	r26, 0x01	; 1
    d6b2:	8f e4       	ldi	r24, 0x4F	; 79
    d6b4:	92 e1       	ldi	r25, 0x12	; 18
    d6b6:	93 83       	std	Z+3, r25	; 0x03
    d6b8:	82 83       	std	Z+2, r24	; 0x02
    d6ba:	24 83       	std	Z+4, r18	; 0x04
    d6bc:	35 83       	std	Z+5, r19	; 0x05
    d6be:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
		  lcd_printf(1,1,PSTR("Name:"));
    d6c2:	8d b7       	in	r24, 0x3d	; 61
    d6c4:	9e b7       	in	r25, 0x3e	; 62
    d6c6:	06 96       	adiw	r24, 0x06	; 6
    d6c8:	0f b6       	in	r0, 0x3f	; 63
    d6ca:	f8 94       	cli
    d6cc:	9e bf       	out	0x3e, r25	; 62
    d6ce:	0f be       	out	0x3f, r0	; 63
    d6d0:	8d bf       	out	0x3d, r24	; 61
    d6d2:	81 e0       	ldi	r24, 0x01	; 1
    d6d4:	61 e0       	ldi	r22, 0x01	; 1
    d6d6:	49 e4       	ldi	r20, 0x49	; 73
    d6d8:	52 e1       	ldi	r21, 0x12	; 18
    d6da:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  lcd_print (1,6,lcdteks);
    d6de:	81 e0       	ldi	r24, 0x01	; 1
    d6e0:	66 e0       	ldi	r22, 0x06	; 6
    d6e2:	a8 01       	movw	r20, r16
    d6e4:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
		  lcd_printf(2,1,PSTR("New :_              "));
    d6e8:	82 e0       	ldi	r24, 0x02	; 2
    d6ea:	61 e0       	ldi	r22, 0x01	; 1
    d6ec:	44 e3       	ldi	r20, 0x34	; 52
    d6ee:	52 e1       	ldi	r21, 0x12	; 18
    d6f0:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    d6f4:	84 e0       	ldi	r24, 0x04	; 4
    d6f6:	61 e0       	ldi	r22, 0x01	; 1
    d6f8:	4f e1       	ldi	r20, 0x1F	; 31
    d6fa:	52 e1       	ldi	r21, 0x12	; 18
    d6fc:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
          stSettingOperator=soOperatorNameInput;
    d700:	83 e0       	ldi	r24, 0x03	; 3
    d702:	fe c1       	rjmp	.+1020   	; 0xdb00 <FSettingOperator+0x566>
	      break;
     case soOperatorNameInput:
          uiResult=USER_NONE;
	      uiResult=UserInput(UI_ALPHANUM_R,2,6,strFreeMessageLine1,0,16);
    d704:	83 e0       	ldi	r24, 0x03	; 3
    d706:	62 e0       	ldi	r22, 0x02	; 2
    d708:	46 e0       	ldi	r20, 0x06	; 6
    d70a:	24 e1       	ldi	r18, 0x14	; 20
    d70c:	39 e0       	ldi	r19, 0x09	; 9
    d70e:	00 e0       	ldi	r16, 0x00	; 0
    d710:	10 e0       	ldi	r17, 0x00	; 0
    d712:	a0 e1       	ldi	r26, 0x10	; 16
    d714:	ea 2e       	mov	r14, r26
    d716:	0e 94 a9 67 	call	0xcf52	; 0xcf52 <UserInput>
		  switch(uiResult){
    d71a:	83 30       	cpi	r24, 0x03	; 3
    d71c:	51 f0       	breq	.+20     	; 0xd732 <FSettingOperator+0x198>
    d71e:	84 30       	cpi	r24, 0x04	; 4
    d720:	08 f4       	brcc	.+2      	; 0xd724 <FSettingOperator+0x18a>
    d722:	f0 c0       	rjmp	.+480    	; 0xd904 <FSettingOperator+0x36a>
    d724:	84 30       	cpi	r24, 0x04	; 4
    d726:	09 f4       	brne	.+2      	; 0xd72a <FSettingOperator+0x190>
    d728:	51 c0       	rjmp	.+162    	; 0xd7cc <FSettingOperator+0x232>
    d72a:	85 30       	cpi	r24, 0x05	; 5
    d72c:	09 f0       	breq	.+2      	; 0xd730 <FSettingOperator+0x196>
    d72e:	0f c2       	rjmp	.+1054   	; 0xdb4e <FSettingOperator+0x5b4>
    d730:	52 c0       	rjmp	.+164    	; 0xd7d6 <FSettingOperator+0x23c>
		  case USER_OK:
		       lcd_clear();
    d732:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
    d736:	20 e0       	ldi	r18, 0x00	; 0
    d738:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    d73a:	ae 01       	movw	r20, r28
    d73c:	40 5f       	subi	r20, 0xF0	; 240
    d73e:	5f 4f       	sbci	r21, 0xFF	; 255
    d740:	fa 01       	movw	r30, r20
    d742:	e2 0f       	add	r30, r18
    d744:	f3 1f       	adc	r31, r19
    d746:	d9 01       	movw	r26, r18
    d748:	ac 5e       	subi	r26, 0xEC	; 236
    d74a:	b6 4f       	sbci	r27, 0xF6	; 246
    d74c:	8c 91       	ld	r24, X
    d74e:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    d750:	2f 5f       	subi	r18, 0xFF	; 255
    d752:	3f 4f       	sbci	r19, 0xFF	; 255
    d754:	2f 30       	cpi	r18, 0x0F	; 15
    d756:	31 05       	cpc	r19, r1
    d758:	99 f7       	brne	.-26     	; 0xd740 <FSettingOperator+0x1a6>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    d75a:	1f 8e       	std	Y+31, r1	; 0x1f
	      uiResult=UserInput(UI_ALPHANUM_R,2,6,strFreeMessageLine1,0,16);
		  switch(uiResult){
		  case USER_OK:
		       lcd_clear();
			   StrPosCopy(strFreeMessageLine1,strOperatorName,0,15);
		       sprintf_P(lcdteks,PSTR("%s"),strOperatorName);
    d75c:	00 d0       	rcall	.+0      	; 0xd75e <FSettingOperator+0x1c4>
    d75e:	00 d0       	rcall	.+0      	; 0xd760 <FSettingOperator+0x1c6>
    d760:	00 d0       	rcall	.+0      	; 0xd762 <FSettingOperator+0x1c8>
    d762:	ed b7       	in	r30, 0x3d	; 61
    d764:	fe b7       	in	r31, 0x3e	; 62
    d766:	31 96       	adiw	r30, 0x01	; 1
    d768:	8e 01       	movw	r16, r28
    d76a:	0e 5d       	subi	r16, 0xDE	; 222
    d76c:	1f 4f       	sbci	r17, 0xFF	; 255
    d76e:	ad b7       	in	r26, 0x3d	; 61
    d770:	be b7       	in	r27, 0x3e	; 62
    d772:	12 96       	adiw	r26, 0x02	; 2
    d774:	1c 93       	st	X, r17
    d776:	0e 93       	st	-X, r16
    d778:	11 97       	sbiw	r26, 0x01	; 1
    d77a:	8c e1       	ldi	r24, 0x1C	; 28
    d77c:	92 e1       	ldi	r25, 0x12	; 18
    d77e:	93 83       	std	Z+3, r25	; 0x03
    d780:	82 83       	std	Z+2, r24	; 0x02
    d782:	55 83       	std	Z+5, r21	; 0x05
    d784:	44 83       	std	Z+4, r20	; 0x04
    d786:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
			   lcd_printf(1,1,PSTR("New Operator:"));
    d78a:	8d b7       	in	r24, 0x3d	; 61
    d78c:	9e b7       	in	r25, 0x3e	; 62
    d78e:	06 96       	adiw	r24, 0x06	; 6
    d790:	0f b6       	in	r0, 0x3f	; 63
    d792:	f8 94       	cli
    d794:	9e bf       	out	0x3e, r25	; 62
    d796:	0f be       	out	0x3f, r0	; 63
    d798:	8d bf       	out	0x3d, r24	; 61
    d79a:	81 e0       	ldi	r24, 0x01	; 1
    d79c:	61 e0       	ldi	r22, 0x01	; 1
    d79e:	4e e0       	ldi	r20, 0x0E	; 14
    d7a0:	52 e1       	ldi	r21, 0x12	; 18
    d7a2:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
			   lcd_print (2,1,lcdteks);
    d7a6:	82 e0       	ldi	r24, 0x02	; 2
    d7a8:	61 e0       	ldi	r22, 0x01	; 1
    d7aa:	a8 01       	movw	r20, r16
    d7ac:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
			   lcd_printf(3,1,PSTR("Save?"));
    d7b0:	83 e0       	ldi	r24, 0x03	; 3
    d7b2:	61 e0       	ldi	r22, 0x01	; 1
    d7b4:	48 e0       	ldi	r20, 0x08	; 8
    d7b6:	52 e1       	ldi	r21, 0x12	; 18
    d7b8:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
			   lcd_printf(4,1,PSTR("[*]No    [#]Yes"));
    d7bc:	84 e0       	ldi	r24, 0x04	; 4
    d7be:	61 e0       	ldi	r22, 0x01	; 1
    d7c0:	48 ef       	ldi	r20, 0xF8	; 248
    d7c2:	51 e1       	ldi	r21, 0x11	; 17
    d7c4:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
               stSettingOperator=soIsSaveOperatorName;
    d7c8:	84 e0       	ldi	r24, 0x04	; 4
    d7ca:	9a c1       	rjmp	.+820    	; 0xdb00 <FSettingOperator+0x566>
		       break;
		  case USER_CANCEL:
               stSettingOperator=soMenuOption; 
		       break;
          case USER_ENTRY:
		       lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
    d7cc:	84 e0       	ldi	r24, 0x04	; 4
    d7ce:	61 e0       	ldi	r22, 0x01	; 1
    d7d0:	43 ee       	ldi	r20, 0xE3	; 227
    d7d2:	51 e1       	ldi	r21, 0x11	; 17
    d7d4:	27 c1       	rjmp	.+590    	; 0xda24 <FSettingOperator+0x48a>
		       break;
          case USER_NO_DATA:
		       lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    d7d6:	84 e0       	ldi	r24, 0x04	; 4
    d7d8:	61 e0       	ldi	r22, 0x01	; 1
    d7da:	4e ec       	ldi	r20, 0xCE	; 206
    d7dc:	51 e1       	ldi	r21, 0x11	; 17
    d7de:	22 c1       	rjmp	.+580    	; 0xda24 <FSettingOperator+0x48a>
		       break;
		  }
	      break;
     case soIsSaveOperatorName:
          KeyPressed=_key_scan(1);
    d7e0:	81 e0       	ldi	r24, 0x01	; 1
    d7e2:	0e 94 58 a6 	call	0x14cb0	; 0x14cb0 <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
    d7e6:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <_key_btn>
		  switch(KeyChar){
    d7ea:	83 32       	cpi	r24, 0x23	; 35
    d7ec:	09 f0       	breq	.+2      	; 0xd7f0 <FSettingOperator+0x256>
    d7ee:	51 c0       	rjmp	.+162    	; 0xd892 <FSettingOperator+0x2f8>
          case '*':
		       stSettingOperator=soMenuOption;
		       break;
    d7f0:	20 e0       	ldi	r18, 0x00	; 0
    d7f2:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    d7f4:	8e 01       	movw	r16, r28
    d7f6:	00 5f       	subi	r16, 0xF0	; 240
    d7f8:	1f 4f       	sbci	r17, 0xFF	; 255
    d7fa:	f8 01       	movw	r30, r16
    d7fc:	e2 0f       	add	r30, r18
    d7fe:	f3 1f       	adc	r31, r19
    d800:	d9 01       	movw	r26, r18
    d802:	ac 5e       	subi	r26, 0xEC	; 236
    d804:	b6 4f       	sbci	r27, 0xF6	; 246
    d806:	8c 91       	ld	r24, X
    d808:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    d80a:	2f 5f       	subi	r18, 0xFF	; 255
    d80c:	3f 4f       	sbci	r19, 0xFF	; 255
    d80e:	2f 30       	cpi	r18, 0x0F	; 15
    d810:	31 05       	cpc	r19, r1
    d812:	99 f7       	brne	.-26     	; 0xd7fa <FSettingOperator+0x260>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    d814:	1f 8e       	std	Y+31, r1	; 0x1f
          case '*':
		       stSettingOperator=soMenuOption;
		       break;
          case '#':
		       StrPosCopy(strFreeMessageLine1,strOperatorName,0,15);
               AddSpaceLag(strOperatorName,18); 
    d816:	c8 01       	movw	r24, r16
    d818:	62 e1       	ldi	r22, 0x12	; 18
    d81a:	0e 94 c4 2d 	call	0x5b88	; 0x5b88 <AddSpaceLag>
		       eeprom_write_block((const void*) &strOperatorName, (void*) &DefOperatorName,18);
    d81e:	c8 01       	movw	r24, r16
    d820:	65 e1       	ldi	r22, 0x15	; 21
    d822:	70 e0       	ldi	r23, 0x00	; 0
    d824:	42 e1       	ldi	r20, 0x12	; 18
    d826:	50 e0       	ldi	r21, 0x00	; 0
    d828:	0e 94 33 ad 	call	0x15a66	; 0x15a66 <__eewr_block_m128>
		       lcd_printf(3,1,PSTR("Saved "));
    d82c:	83 e0       	ldi	r24, 0x03	; 3
    d82e:	61 e0       	ldi	r22, 0x01	; 1
    d830:	47 ec       	ldi	r20, 0xC7	; 199
    d832:	51 e1       	ldi	r21, 0x11	; 17
    d834:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
			   TimDisplay=0;
    d838:	10 92 92 01 	sts	0x0192, r1
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    d83c:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    d83e:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    d840:	81 e0       	ldi	r24, 0x01	; 1
    d842:	80 93 bc 01 	sts	0x01BC, r24
    d846:	44 c1       	rjmp	.+648    	; 0xdad0 <FSettingOperator+0x536>
		       stSettingOperator=soDelayDisplaySaved;
		       break;
		  }	      
		  break;
     case soChangePasswordInit:
	      lcd_clear();
    d848:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
		  lcd_printf(1,1,PSTR("-Change Password-"));
    d84c:	81 e0       	ldi	r24, 0x01	; 1
    d84e:	61 e0       	ldi	r22, 0x01	; 1
    d850:	45 eb       	ldi	r20, 0xB5	; 181
    d852:	51 e1       	ldi	r21, 0x11	; 17
    d854:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  lcd_printf(2,1,PSTR("1.Supervisor"));
    d858:	82 e0       	ldi	r24, 0x02	; 2
    d85a:	61 e0       	ldi	r22, 0x01	; 1
    d85c:	48 ea       	ldi	r20, 0xA8	; 168
    d85e:	51 e1       	ldi	r21, 0x11	; 17
    d860:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  lcd_printf(3,1,PSTR("2.Administrator"));
    d864:	83 e0       	ldi	r24, 0x03	; 3
    d866:	61 e0       	ldi	r22, 0x01	; 1
    d868:	48 e9       	ldi	r20, 0x98	; 152
    d86a:	51 e1       	ldi	r21, 0x11	; 17
    d86c:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  lcd_printf(4,1,PSTR("[*]Back     "));
    d870:	84 e0       	ldi	r24, 0x04	; 4
    d872:	61 e0       	ldi	r22, 0x01	; 1
    d874:	4b e8       	ldi	r20, 0x8B	; 139
    d876:	51 e1       	ldi	r21, 0x11	; 17
    d878:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
          stSettingOperator=soChangePasswordInput; 
    d87c:	86 e0       	ldi	r24, 0x06	; 6
    d87e:	40 c1       	rjmp	.+640    	; 0xdb00 <FSettingOperator+0x566>
	      break;
     case soChangePasswordInput:
          KeyPressed=_key_scan(1);
    d880:	81 e0       	ldi	r24, 0x01	; 1
    d882:	0e 94 58 a6 	call	0x14cb0	; 0x14cb0 <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
    d886:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <_key_btn>
		  switch(KeyChar){
    d88a:	81 33       	cpi	r24, 0x31	; 49
    d88c:	31 f0       	breq	.+12     	; 0xd89a <FSettingOperator+0x300>
    d88e:	82 33       	cpi	r24, 0x32	; 50
    d890:	31 f0       	breq	.+12     	; 0xd89e <FSettingOperator+0x304>
    d892:	8a 32       	cpi	r24, 0x2A	; 42
    d894:	09 f0       	breq	.+2      	; 0xd898 <FSettingOperator+0x2fe>
    d896:	5b c1       	rjmp	.+694    	; 0xdb4e <FSettingOperator+0x5b4>
    d898:	53 c1       	rjmp	.+678    	; 0xdb40 <FSettingOperator+0x5a6>
		  case '1':		 
		       PassType=PT_SUPERVISOR;
    d89a:	81 e0       	ldi	r24, 0x01	; 1
    d89c:	01 c0       	rjmp	.+2      	; 0xd8a0 <FSettingOperator+0x306>
		       stSettingOperator=soOldPasswordDisplay;
		       break;
          case '2':		       
		       PassType=PT_ADMINISTRATOR;
    d89e:	82 e0       	ldi	r24, 0x02	; 2
    d8a0:	80 93 1d 02 	sts	0x021D, r24
    d8a4:	75 c0       	rjmp	.+234    	; 0xd990 <FSettingOperator+0x3f6>
		       stSettingOperator=soMenuOption;
		       break;
		  }	      
	      break;
     case soOldPasswordDisplay:
	 	  lcd_clear();
    d8a6:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
	      if (PassType==PT_SUPERVISOR){
    d8aa:	80 91 1d 02 	lds	r24, 0x021D
    d8ae:	81 30       	cpi	r24, 0x01	; 1
    d8b0:	21 f4       	brne	.+8      	; 0xd8ba <FSettingOperator+0x320>
		      lcd_printf(1,1,PSTR("-Supervisor-"));              
    d8b2:	61 e0       	ldi	r22, 0x01	; 1
    d8b4:	4e e7       	ldi	r20, 0x7E	; 126
    d8b6:	51 e1       	ldi	r21, 0x11	; 17
    d8b8:	06 c0       	rjmp	.+12     	; 0xd8c6 <FSettingOperator+0x32c>
		  }else if (PassType==PT_ADMINISTRATOR){		       
    d8ba:	82 30       	cpi	r24, 0x02	; 2
    d8bc:	31 f4       	brne	.+12     	; 0xd8ca <FSettingOperator+0x330>
		       lcd_printf(1,1,PSTR("-Administrator-"));			   
    d8be:	81 e0       	ldi	r24, 0x01	; 1
    d8c0:	61 e0       	ldi	r22, 0x01	; 1
    d8c2:	4e e6       	ldi	r20, 0x6E	; 110
    d8c4:	51 e1       	ldi	r21, 0x11	; 17
    d8c6:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  }
		      lcd_printf(2,1,PSTR("Old:_"));
    d8ca:	82 e0       	ldi	r24, 0x02	; 2
    d8cc:	61 e0       	ldi	r22, 0x01	; 1
    d8ce:	48 e6       	ldi	r20, 0x68	; 104
    d8d0:	51 e1       	ldi	r21, 0x11	; 17
    d8d2:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
			  lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    d8d6:	84 e0       	ldi	r24, 0x04	; 4
    d8d8:	61 e0       	ldi	r22, 0x01	; 1
    d8da:	43 e5       	ldi	r20, 0x53	; 83
    d8dc:	51 e1       	ldi	r21, 0x11	; 17
    d8de:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>

          stSettingOperator=soOldPasswordEntry;
    d8e2:	88 e0       	ldi	r24, 0x08	; 8
    d8e4:	0d c1       	rjmp	.+538    	; 0xdb00 <FSettingOperator+0x566>
	      break;
     case soOldPasswordEntry:
          uiResult=USER_NONE;
          uiResult=UserInput(UI_NUM_PASSWORD,2,5,strFreeMessageLine1,0,8);           
    d8e6:	84 e0       	ldi	r24, 0x04	; 4
    d8e8:	62 e0       	ldi	r22, 0x02	; 2
    d8ea:	45 e0       	ldi	r20, 0x05	; 5
    d8ec:	24 e1       	ldi	r18, 0x14	; 20
    d8ee:	39 e0       	ldi	r19, 0x09	; 9
    d8f0:	00 e0       	ldi	r16, 0x00	; 0
    d8f2:	10 e0       	ldi	r17, 0x00	; 0
    d8f4:	f8 e0       	ldi	r31, 0x08	; 8
    d8f6:	ef 2e       	mov	r14, r31
    d8f8:	0e 94 a9 67 	call	0xcf52	; 0xcf52 <UserInput>
		  switch(uiResult){
    d8fc:	83 30       	cpi	r24, 0x03	; 3
    d8fe:	61 f0       	breq	.+24     	; 0xd918 <FSettingOperator+0x37e>
    d900:	84 30       	cpi	r24, 0x04	; 4
    d902:	20 f4       	brcc	.+8      	; 0xd90c <FSettingOperator+0x372>
    d904:	81 30       	cpi	r24, 0x01	; 1
    d906:	09 f0       	breq	.+2      	; 0xd90a <FSettingOperator+0x370>
    d908:	22 c1       	rjmp	.+580    	; 0xdb4e <FSettingOperator+0x5b4>
    d90a:	1a c1       	rjmp	.+564    	; 0xdb40 <FSettingOperator+0x5a6>
    d90c:	84 30       	cpi	r24, 0x04	; 4
    d90e:	79 f0       	breq	.+30     	; 0xd92e <FSettingOperator+0x394>
    d910:	85 30       	cpi	r24, 0x05	; 5
    d912:	09 f0       	breq	.+2      	; 0xd916 <FSettingOperator+0x37c>
    d914:	1c c1       	rjmp	.+568    	; 0xdb4e <FSettingOperator+0x5b4>
    d916:	10 c0       	rjmp	.+32     	; 0xd938 <FSettingOperator+0x39e>
		  case USER_OK:
		       lcd_printf(2,1,PSTR("New:_               "));
    d918:	82 e0       	ldi	r24, 0x02	; 2
    d91a:	61 e0       	ldi	r22, 0x01	; 1
    d91c:	4e e3       	ldi	r20, 0x3E	; 62
    d91e:	51 e1       	ldi	r21, 0x11	; 17
    d920:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
			   lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    d924:	84 e0       	ldi	r24, 0x04	; 4
    d926:	61 e0       	ldi	r22, 0x01	; 1
    d928:	49 e2       	ldi	r20, 0x29	; 41
    d92a:	51 e1       	ldi	r21, 0x11	; 17
    d92c:	6e c0       	rjmp	.+220    	; 0xda0a <FSettingOperator+0x470>
		       break;
		  case USER_CANCEL:
               stSettingOperator=soMenuOption; 
		       break;
          case USER_ENTRY:
		       lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
    d92e:	84 e0       	ldi	r24, 0x04	; 4
    d930:	61 e0       	ldi	r22, 0x01	; 1
    d932:	44 e1       	ldi	r20, 0x14	; 20
    d934:	51 e1       	ldi	r21, 0x11	; 17
    d936:	76 c0       	rjmp	.+236    	; 0xda24 <FSettingOperator+0x48a>
		       break;
          case USER_NO_DATA:
		       lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    d938:	84 e0       	ldi	r24, 0x04	; 4
    d93a:	61 e0       	ldi	r22, 0x01	; 1
    d93c:	4f ef       	ldi	r20, 0xFF	; 255
    d93e:	50 e1       	ldi	r21, 0x10	; 16
    d940:	71 c0       	rjmp	.+226    	; 0xda24 <FSettingOperator+0x48a>
		       break;
		  }
	      break;
     case soNewPasswordEntry1:
          uiResult=USER_NONE;
          uiResult=UserInput(UI_NUM_PASSWORD,2,5,strFreeMessageLine2,0,8);           
    d942:	84 e0       	ldi	r24, 0x04	; 4
    d944:	62 e0       	ldi	r22, 0x02	; 2
    d946:	45 e0       	ldi	r20, 0x05	; 5
    d948:	25 e2       	ldi	r18, 0x25	; 37
    d94a:	38 e0       	ldi	r19, 0x08	; 8
    d94c:	00 e0       	ldi	r16, 0x00	; 0
    d94e:	10 e0       	ldi	r17, 0x00	; 0
    d950:	e8 e0       	ldi	r30, 0x08	; 8
    d952:	ee 2e       	mov	r14, r30
    d954:	0e 94 a9 67 	call	0xcf52	; 0xcf52 <UserInput>
		  switch(uiResult){
    d958:	83 30       	cpi	r24, 0x03	; 3
    d95a:	61 f0       	breq	.+24     	; 0xd974 <FSettingOperator+0x3da>
    d95c:	84 30       	cpi	r24, 0x04	; 4
    d95e:	20 f4       	brcc	.+8      	; 0xd968 <FSettingOperator+0x3ce>
    d960:	81 30       	cpi	r24, 0x01	; 1
    d962:	09 f0       	breq	.+2      	; 0xd966 <FSettingOperator+0x3cc>
    d964:	f4 c0       	rjmp	.+488    	; 0xdb4e <FSettingOperator+0x5b4>
    d966:	14 c0       	rjmp	.+40     	; 0xd990 <FSettingOperator+0x3f6>
    d968:	84 30       	cpi	r24, 0x04	; 4
    d96a:	a1 f0       	breq	.+40     	; 0xd994 <FSettingOperator+0x3fa>
    d96c:	85 30       	cpi	r24, 0x05	; 5
    d96e:	09 f0       	breq	.+2      	; 0xd972 <FSettingOperator+0x3d8>
    d970:	ee c0       	rjmp	.+476    	; 0xdb4e <FSettingOperator+0x5b4>
    d972:	15 c0       	rjmp	.+42     	; 0xd99e <FSettingOperator+0x404>
		  case USER_OK:
		       lcd_printf(3,1,PSTR("New:_               "));
    d974:	83 e0       	ldi	r24, 0x03	; 3
    d976:	61 e0       	ldi	r22, 0x01	; 1
    d978:	4a ee       	ldi	r20, 0xEA	; 234
    d97a:	50 e1       	ldi	r21, 0x10	; 16
    d97c:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
			   lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    d980:	84 e0       	ldi	r24, 0x04	; 4
    d982:	61 e0       	ldi	r22, 0x01	; 1
    d984:	45 ed       	ldi	r20, 0xD5	; 213
    d986:	50 e1       	ldi	r21, 0x10	; 16
    d988:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		       stSettingOperator=soNewPasswordEntry2;
    d98c:	8a e0       	ldi	r24, 0x0A	; 10
    d98e:	b8 c0       	rjmp	.+368    	; 0xdb00 <FSettingOperator+0x566>
		       break;
		  case USER_CANCEL:		       
			   stSettingOperator=soOldPasswordDisplay;
    d990:	87 e0       	ldi	r24, 0x07	; 7
    d992:	b6 c0       	rjmp	.+364    	; 0xdb00 <FSettingOperator+0x566>
		       break;
          case USER_ENTRY:
		       lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
    d994:	84 e0       	ldi	r24, 0x04	; 4
    d996:	61 e0       	ldi	r22, 0x01	; 1
    d998:	40 ec       	ldi	r20, 0xC0	; 192
    d99a:	50 e1       	ldi	r21, 0x10	; 16
    d99c:	43 c0       	rjmp	.+134    	; 0xda24 <FSettingOperator+0x48a>
		       break;
          case USER_NO_DATA:
		       lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    d99e:	84 e0       	ldi	r24, 0x04	; 4
    d9a0:	61 e0       	ldi	r22, 0x01	; 1
    d9a2:	4b ea       	ldi	r20, 0xAB	; 171
    d9a4:	50 e1       	ldi	r21, 0x10	; 16
    d9a6:	3e c0       	rjmp	.+124    	; 0xda24 <FSettingOperator+0x48a>
		       break;
		  }	      
	      break;
     case soNewPasswordEntry2:
          uiResult=USER_NONE;
          uiResult=UserInput(UI_NUM_PASSWORD,3,5,strFreeMessageLine3,0,8);           
    d9a8:	84 e0       	ldi	r24, 0x04	; 4
    d9aa:	63 e0       	ldi	r22, 0x03	; 3
    d9ac:	45 e0       	ldi	r20, 0x05	; 5
    d9ae:	2e e9       	ldi	r18, 0x9E	; 158
    d9b0:	38 e0       	ldi	r19, 0x08	; 8
    d9b2:	00 e0       	ldi	r16, 0x00	; 0
    d9b4:	10 e0       	ldi	r17, 0x00	; 0
    d9b6:	78 e0       	ldi	r23, 0x08	; 8
    d9b8:	e7 2e       	mov	r14, r23
    d9ba:	0e 94 a9 67 	call	0xcf52	; 0xcf52 <UserInput>
		  switch(uiResult){
    d9be:	83 30       	cpi	r24, 0x03	; 3
    d9c0:	61 f0       	breq	.+24     	; 0xd9da <FSettingOperator+0x440>
    d9c2:	84 30       	cpi	r24, 0x04	; 4
    d9c4:	20 f4       	brcc	.+8      	; 0xd9ce <FSettingOperator+0x434>
    d9c6:	81 30       	cpi	r24, 0x01	; 1
    d9c8:	09 f0       	breq	.+2      	; 0xd9cc <FSettingOperator+0x432>
    d9ca:	c1 c0       	rjmp	.+386    	; 0xdb4e <FSettingOperator+0x5b4>
    d9cc:	12 c0       	rjmp	.+36     	; 0xd9f2 <FSettingOperator+0x458>
    d9ce:	84 30       	cpi	r24, 0x04	; 4
    d9d0:	01 f1       	breq	.+64     	; 0xda12 <FSettingOperator+0x478>
    d9d2:	85 30       	cpi	r24, 0x05	; 5
    d9d4:	09 f0       	breq	.+2      	; 0xd9d8 <FSettingOperator+0x43e>
    d9d6:	bb c0       	rjmp	.+374    	; 0xdb4e <FSettingOperator+0x5b4>
    d9d8:	21 c0       	rjmp	.+66     	; 0xda1c <FSettingOperator+0x482>
		  case USER_OK:
		       lcd_clear();
    d9da:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
               lcd_printf(2,1,PSTR("Validating.."));
    d9de:	82 e0       	ldi	r24, 0x02	; 2
    d9e0:	61 e0       	ldi	r22, 0x01	; 1
    d9e2:	4e e9       	ldi	r20, 0x9E	; 158
    d9e4:	50 e1       	ldi	r21, 0x10	; 16
    d9e6:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
			   TimDisplay=0;
    d9ea:	10 92 92 01 	sts	0x0192, r1
		       stSettingOperator=soDispValidatePassword;
    d9ee:	8b e0       	ldi	r24, 0x0B	; 11
    d9f0:	87 c0       	rjmp	.+270    	; 0xdb00 <FSettingOperator+0x566>
		       break;
		  case USER_CANCEL:
               lcd_clear();
    d9f2:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
               lcd_printf(2,1,PSTR("New:_               "));
    d9f6:	82 e0       	ldi	r24, 0x02	; 2
    d9f8:	61 e0       	ldi	r22, 0x01	; 1
    d9fa:	49 e8       	ldi	r20, 0x89	; 137
    d9fc:	50 e1       	ldi	r21, 0x10	; 16
    d9fe:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
			   lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    da02:	84 e0       	ldi	r24, 0x04	; 4
    da04:	61 e0       	ldi	r22, 0x01	; 1
    da06:	44 e7       	ldi	r20, 0x74	; 116
    da08:	50 e1       	ldi	r21, 0x10	; 16
    da0a:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		       stSettingOperator=soNewPasswordEntry1;
    da0e:	89 e0       	ldi	r24, 0x09	; 9
    da10:	77 c0       	rjmp	.+238    	; 0xdb00 <FSettingOperator+0x566>
		       break;
          case USER_ENTRY:
		       lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
    da12:	84 e0       	ldi	r24, 0x04	; 4
    da14:	61 e0       	ldi	r22, 0x01	; 1
    da16:	4f e5       	ldi	r20, 0x5F	; 95
    da18:	50 e1       	ldi	r21, 0x10	; 16
    da1a:	04 c0       	rjmp	.+8      	; 0xda24 <FSettingOperator+0x48a>
		       break;
          case USER_NO_DATA:
		       lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    da1c:	84 e0       	ldi	r24, 0x04	; 4
    da1e:	61 e0       	ldi	r22, 0x01	; 1
    da20:	4a e4       	ldi	r20, 0x4A	; 74
    da22:	50 e1       	ldi	r21, 0x10	; 16
    da24:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
    da28:	92 c0       	rjmp	.+292    	; 0xdb4e <FSettingOperator+0x5b4>
		       break;
		  }	      
	      break;
     case soDispValidatePassword:
	      if (TimDisplay>3)stSettingOperator=soValidatePassword;
    da2a:	80 91 92 01 	lds	r24, 0x0192
    da2e:	84 30       	cpi	r24, 0x04	; 4
    da30:	08 f4       	brcc	.+2      	; 0xda34 <FSettingOperator+0x49a>
    da32:	8d c0       	rjmp	.+282    	; 0xdb4e <FSettingOperator+0x5b4>
    da34:	8c e0       	ldi	r24, 0x0C	; 12
    da36:	64 c0       	rjmp	.+200    	; 0xdb00 <FSettingOperator+0x566>
	      break;
     case soValidatePassword:
          if (PassType==PT_SUPERVISOR) eeprom_read_block((void*) &strPassword, (const void*) &DefSysPassword, 10);		      			   
    da38:	80 91 1d 02 	lds	r24, 0x021D
    da3c:	81 30       	cpi	r24, 0x01	; 1
    da3e:	29 f4       	brne	.+10     	; 0xda4a <FSettingOperator+0x4b0>
    da40:	ce 01       	movw	r24, r28
    da42:	01 96       	adiw	r24, 0x01	; 1
    da44:	6b e0       	ldi	r22, 0x0B	; 11
    da46:	70 e0       	ldi	r23, 0x00	; 0
    da48:	06 c0       	rjmp	.+12     	; 0xda56 <FSettingOperator+0x4bc>
		  else 
		  if (PassType==PT_ADMINISTRATOR) eeprom_read_block((void*) &strPassword, (const void*) &DefSpvPassword, 10);    
    da4a:	82 30       	cpi	r24, 0x02	; 2
    da4c:	41 f4       	brne	.+16     	; 0xda5e <FSettingOperator+0x4c4>
    da4e:	ce 01       	movw	r24, r28
    da50:	01 96       	adiw	r24, 0x01	; 1
    da52:	61 e0       	ldi	r22, 0x01	; 1
    da54:	70 e0       	ldi	r23, 0x00	; 0
    da56:	4a e0       	ldi	r20, 0x0A	; 10
    da58:	50 e0       	ldi	r21, 0x00	; 0
    da5a:	0e 94 1b ad 	call	0x15a36	; 0x15a36 <__eerd_block_m128>
		  
		  //Check Old Validity
		  if (strcmp(strPassword,strFreeMessageLine1)==0){//OldMessage Valid
    da5e:	ce 01       	movw	r24, r28
    da60:	01 96       	adiw	r24, 0x01	; 1
    da62:	64 e1       	ldi	r22, 0x14	; 20
    da64:	79 e0       	ldi	r23, 0x09	; 9
    da66:	0e 94 d3 aa 	call	0x155a6	; 0x155a6 <strcmp>
    da6a:	00 97       	sbiw	r24, 0x00	; 0
    da6c:	09 f0       	breq	.+2      	; 0xda70 <FSettingOperator+0x4d6>
    da6e:	4b c0       	rjmp	.+150    	; 0xdb06 <FSettingOperator+0x56c>
              if (strcmp(strFreeMessageLine2,strFreeMessageLine3)==0){
    da70:	85 e2       	ldi	r24, 0x25	; 37
    da72:	98 e0       	ldi	r25, 0x08	; 8
    da74:	6e e9       	ldi	r22, 0x9E	; 158
    da76:	78 e0       	ldi	r23, 0x08	; 8
    da78:	0e 94 d3 aa 	call	0x155a6	; 0x155a6 <strcmp>
    da7c:	00 97       	sbiw	r24, 0x00	; 0
    da7e:	51 f5       	brne	.+84     	; 0xdad4 <FSettingOperator+0x53a>
                  
			      if (PassType==PT_SUPERVISOR) eeprom_write_block((const void*) &strFreeMessageLine2, (void*) &DefSysPassword, 10);		      			   
    da80:	80 91 1d 02 	lds	r24, 0x021D
    da84:	81 30       	cpi	r24, 0x01	; 1
    da86:	29 f4       	brne	.+10     	; 0xda92 <FSettingOperator+0x4f8>
    da88:	85 e2       	ldi	r24, 0x25	; 37
    da8a:	98 e0       	ldi	r25, 0x08	; 8
    da8c:	6b e0       	ldi	r22, 0x0B	; 11
    da8e:	70 e0       	ldi	r23, 0x00	; 0
    da90:	06 c0       	rjmp	.+12     	; 0xda9e <FSettingOperator+0x504>
		          else 
		          if (PassType==PT_ADMINISTRATOR) eeprom_write_block((const void*) &strFreeMessageLine2, (void*) &DefSpvPassword, 10);    
    da92:	82 30       	cpi	r24, 0x02	; 2
    da94:	41 f4       	brne	.+16     	; 0xdaa6 <FSettingOperator+0x50c>
    da96:	85 e2       	ldi	r24, 0x25	; 37
    da98:	98 e0       	ldi	r25, 0x08	; 8
    da9a:	61 e0       	ldi	r22, 0x01	; 1
    da9c:	70 e0       	ldi	r23, 0x00	; 0
    da9e:	4a e0       	ldi	r20, 0x0A	; 10
    daa0:	50 e0       	ldi	r21, 0x00	; 0
    daa2:	0e 94 33 ad 	call	0x15a66	; 0x15a66 <__eewr_block_m128>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    daa6:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    daa8:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    daaa:	81 e0       	ldi	r24, 0x01	; 1
    daac:	80 93 bc 01 	sts	0x01BC, r24
			      if (PassType==PT_SUPERVISOR) eeprom_write_block((const void*) &strFreeMessageLine2, (void*) &DefSysPassword, 10);		      			   
		          else 
		          if (PassType==PT_ADMINISTRATOR) eeprom_write_block((const void*) &strFreeMessageLine2, (void*) &DefSpvPassword, 10);    

			      system_beep(1);
				  lcd_clear();
    dab0:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
			      lcd_printf(2,1,PSTR("     Completed      "));
    dab4:	82 e0       	ldi	r24, 0x02	; 2
    dab6:	61 e0       	ldi	r22, 0x01	; 1
    dab8:	45 e3       	ldi	r20, 0x35	; 53
    daba:	50 e1       	ldi	r21, 0x10	; 16
    dabc:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
			      lcd_printf(3,1,PSTR("   Password Saved   "));    
    dac0:	83 e0       	ldi	r24, 0x03	; 3
    dac2:	61 e0       	ldi	r22, 0x01	; 1
    dac4:	40 e2       	ldi	r20, 0x20	; 32
    dac6:	50 e1       	ldi	r21, 0x10	; 16
    dac8:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
				  TimDisplay=0;
    dacc:	10 92 92 01 	sts	0x0192, r1
				  stSettingOperator=soDelayDisplaySaved;
    dad0:	8e e0       	ldi	r24, 0x0E	; 14
    dad2:	16 c0       	rjmp	.+44     	; 0xdb00 <FSettingOperator+0x566>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    dad4:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    dad6:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    dad8:	82 e0       	ldi	r24, 0x02	; 2
    dada:	80 93 bc 01 	sts	0x01BC, r24
			      lcd_printf(3,1,PSTR("   Password Saved   "));    
				  TimDisplay=0;
				  stSettingOperator=soDelayDisplaySaved;
			  }else {
			  system_beep(2);
		      TimDisplay=0;
    dade:	10 92 92 01 	sts	0x0192, r1
		      lcd_clear();
    dae2:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
		      lcd_printf(2,1,PSTR("      ERROR         "));
    dae6:	82 e0       	ldi	r24, 0x02	; 2
    dae8:	61 e0       	ldi	r22, 0x01	; 1
    daea:	4b e0       	ldi	r20, 0x0B	; 11
    daec:	50 e1       	ldi	r21, 0x10	; 16
    daee:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		      lcd_printf(3,1,PSTR("Invalid New Password"));
    daf2:	83 e0       	ldi	r24, 0x03	; 3
    daf4:	61 e0       	ldi	r22, 0x01	; 1
    daf6:	46 ef       	ldi	r20, 0xF6	; 246
    daf8:	5f e0       	ldi	r21, 0x0F	; 15
    dafa:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		      stSettingOperator=soDisplayInvalidPassword;
    dafe:	8d e0       	ldi	r24, 0x0D	; 13
    db00:	80 93 1e 02 	sts	0x021E, r24
    db04:	24 c0       	rjmp	.+72     	; 0xdb4e <FSettingOperator+0x5b4>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    db06:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    db08:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    db0a:	82 e0       	ldi	r24, 0x02	; 2
    db0c:	80 93 bc 01 	sts	0x01BC, r24
		      stSettingOperator=soDisplayInvalidPassword;
			  }
		  }else {
		   //InvalidOld Password
		   system_beep(2);
		   TimDisplay=0;
    db10:	10 92 92 01 	sts	0x0192, r1
		   lcd_clear();
    db14:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
		   lcd_printf(2,1,PSTR("      ERROR         "));
    db18:	82 e0       	ldi	r24, 0x02	; 2
    db1a:	61 e0       	ldi	r22, 0x01	; 1
    db1c:	41 ee       	ldi	r20, 0xE1	; 225
    db1e:	5f e0       	ldi	r21, 0x0F	; 15
    db20:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		   lcd_printf(3,1,PSTR("Invalid Old Password"));
    db24:	83 e0       	ldi	r24, 0x03	; 3
    db26:	61 e0       	ldi	r22, 0x01	; 1
    db28:	4c ec       	ldi	r20, 0xCC	; 204
    db2a:	5f e0       	ldi	r21, 0x0F	; 15
    db2c:	e6 cf       	rjmp	.-52     	; 0xdafa <FSettingOperator+0x560>
		   stSettingOperator=soDisplayInvalidPassword;
		   }
	      break;
     case soDisplayInvalidPassword:
	      if (TimDisplay>6)stSettingOperator=soMenuOption;
    db2e:	80 91 92 01 	lds	r24, 0x0192
    db32:	87 30       	cpi	r24, 0x07	; 7
    db34:	60 f0       	brcs	.+24     	; 0xdb4e <FSettingOperator+0x5b4>
    db36:	04 c0       	rjmp	.+8      	; 0xdb40 <FSettingOperator+0x5a6>
	      break;
     case soDelayDisplaySaved:
	      if (TimDisplay>4)stSettingOperator=soMenuOption;
    db38:	80 91 92 01 	lds	r24, 0x0192
    db3c:	85 30       	cpi	r24, 0x05	; 5
    db3e:	38 f0       	brcs	.+14     	; 0xdb4e <FSettingOperator+0x5b4>
    db40:	10 92 1e 02 	sts	0x021E, r1
    db44:	04 c0       	rjmp	.+8      	; 0xdb4e <FSettingOperator+0x5b4>
	      break;
	 case soExitSettingOperator:
	      stSettingOperator=soMenuOption;
    db46:	10 92 1e 02 	sts	0x021E, r1
    db4a:	81 e0       	ldi	r24, 0x01	; 1
    db4c:	01 c0       	rjmp	.+2      	; 0xdb50 <FSettingOperator+0x5b6>
    db4e:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
	      break;
	 }
     return Result;
}
    db50:	e5 96       	adiw	r28, 0x35	; 53
    db52:	0f b6       	in	r0, 0x3f	; 63
    db54:	f8 94       	cli
    db56:	de bf       	out	0x3e, r29	; 62
    db58:	0f be       	out	0x3f, r0	; 63
    db5a:	cd bf       	out	0x3d, r28	; 61
    db5c:	cf 91       	pop	r28
    db5e:	df 91       	pop	r29
    db60:	1f 91       	pop	r17
    db62:	0f 91       	pop	r16
    db64:	ef 90       	pop	r14
    db66:	08 95       	ret

0000db68 <FSettingProduct>:

void menu_product(){

}

char FSettingProduct(){//Using strDescription
    db68:	6f 92       	push	r6
    db6a:	7f 92       	push	r7
    db6c:	8f 92       	push	r8
    db6e:	9f 92       	push	r9
    db70:	af 92       	push	r10
    db72:	bf 92       	push	r11
    db74:	cf 92       	push	r12
    db76:	df 92       	push	r13
    db78:	ef 92       	push	r14
    db7a:	ff 92       	push	r15
    db7c:	0f 93       	push	r16
    db7e:	1f 93       	push	r17
    db80:	df 93       	push	r29
    db82:	cf 93       	push	r28
    db84:	cd b7       	in	r28, 0x3d	; 61
    db86:	de b7       	in	r29, 0x3e	; 62
    db88:	a1 97       	sbiw	r28, 0x21	; 33
    db8a:	0f b6       	in	r0, 0x3f	; 63
    db8c:	f8 94       	cli
    db8e:	de bf       	out	0x3e, r29	; 62
    db90:	0f be       	out	0x3f, r0	; 63
    db92:	cd bf       	out	0x3d, r28	; 61
     char i;//,x,y;
	 char strProductName[13],lcdteks[20];
	 char Result=MENU_NONE;
	 
     Result=MENU_NONE;
     switch(stMenuProduct){
    db94:	80 91 21 02 	lds	r24, 0x0221
    db98:	83 30       	cpi	r24, 0x03	; 3
    db9a:	09 f4       	brne	.+2      	; 0xdb9e <FSettingProduct+0x36>
    db9c:	f9 c0       	rjmp	.+498    	; 0xdd90 <FSettingProduct+0x228>
    db9e:	84 30       	cpi	r24, 0x04	; 4
    dba0:	38 f4       	brcc	.+14     	; 0xdbb0 <FSettingProduct+0x48>
    dba2:	81 30       	cpi	r24, 0x01	; 1
    dba4:	09 f4       	brne	.+2      	; 0xdba8 <FSettingProduct+0x40>
    dba6:	70 c0       	rjmp	.+224    	; 0xdc88 <FSettingProduct+0x120>
    dba8:	82 30       	cpi	r24, 0x02	; 2
    dbaa:	08 f0       	brcs	.+2      	; 0xdbae <FSettingProduct+0x46>
    dbac:	80 c0       	rjmp	.+256    	; 0xdcae <FSettingProduct+0x146>
    dbae:	0a c0       	rjmp	.+20     	; 0xdbc4 <FSettingProduct+0x5c>
    dbb0:	85 30       	cpi	r24, 0x05	; 5
    dbb2:	09 f4       	brne	.+2      	; 0xdbb6 <FSettingProduct+0x4e>
    dbb4:	79 c1       	rjmp	.+754    	; 0xdea8 <FSettingProduct+0x340>
    dbb6:	85 30       	cpi	r24, 0x05	; 5
    dbb8:	08 f4       	brcc	.+2      	; 0xdbbc <FSettingProduct+0x54>
    dbba:	94 c1       	rjmp	.+808    	; 0xdee4 <FSettingProduct+0x37c>
    dbbc:	86 30       	cpi	r24, 0x06	; 6
    dbbe:	09 f0       	breq	.+2      	; 0xdbc2 <FSettingProduct+0x5a>
    dbc0:	b7 c1       	rjmp	.+878    	; 0xdf30 <FSettingProduct+0x3c8>
    dbc2:	b2 c1       	rjmp	.+868    	; 0xdf28 <FSettingProduct+0x3c0>
	 case mpInitProduct:
	      //DisplayProductName
		  lcd_clear();
    dbc4:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
    dbc8:	7c eb       	ldi	r23, 0xBC	; 188
    dbca:	c7 2e       	mov	r12, r23
    dbcc:	70 e0       	ldi	r23, 0x00	; 0
    dbce:	d7 2e       	mov	r13, r23
    dbd0:	61 e0       	ldi	r22, 0x01	; 1
    dbd2:	e6 2e       	mov	r14, r22
    dbd4:	f1 2c       	mov	r15, r1
		  //lcd_printf(1,1,PSTR("Product:"));
	      for(i=0;i<6;i++){//234 
	          eeprom_read_block((void*) &strProductName, (const void*) &DefProductName[i], 13);
    dbd6:	4e 01       	movw	r8, r28
    dbd8:	08 94       	sec
    dbda:	81 1c       	adc	r8, r1
    dbdc:	91 1c       	adc	r9, r1
	          sprintf_P(lcdteks,PSTR("%d)%s"),(i+1),strProductName);
    dbde:	5e e0       	ldi	r21, 0x0E	; 14
    dbe0:	a5 2e       	mov	r10, r21
    dbe2:	b1 2c       	mov	r11, r1
    dbe4:	ac 0e       	add	r10, r28
    dbe6:	bd 1e       	adc	r11, r29
    dbe8:	46 ea       	ldi	r20, 0xA6	; 166
    dbea:	64 2e       	mov	r6, r20
    dbec:	43 e1       	ldi	r20, 0x13	; 19
    dbee:	74 2e       	mov	r7, r20
			  lcd_print((((i)%4)+1),(((i)/4)*10)+1,lcdteks);
    dbf0:	0a e0       	ldi	r16, 0x0A	; 10
	 
     Result=MENU_NONE;
     switch(stMenuProduct){
	 case mpInitProduct:
	      //DisplayProductName
		  lcd_clear();
    dbf2:	1e 2d       	mov	r17, r14
    dbf4:	11 50       	subi	r17, 0x01	; 1
		  //lcd_printf(1,1,PSTR("Product:"));
	      for(i=0;i<6;i++){//234 
	          eeprom_read_block((void*) &strProductName, (const void*) &DefProductName[i], 13);
    dbf6:	c4 01       	movw	r24, r8
    dbf8:	b6 01       	movw	r22, r12
    dbfa:	4d e0       	ldi	r20, 0x0D	; 13
    dbfc:	50 e0       	ldi	r21, 0x00	; 0
    dbfe:	0e 94 1b ad 	call	0x15a36	; 0x15a36 <__eerd_block_m128>
	          sprintf_P(lcdteks,PSTR("%d)%s"),(i+1),strProductName);
    dc02:	8d b7       	in	r24, 0x3d	; 61
    dc04:	9e b7       	in	r25, 0x3e	; 62
    dc06:	08 97       	sbiw	r24, 0x08	; 8
    dc08:	0f b6       	in	r0, 0x3f	; 63
    dc0a:	f8 94       	cli
    dc0c:	9e bf       	out	0x3e, r25	; 62
    dc0e:	0f be       	out	0x3f, r0	; 63
    dc10:	8d bf       	out	0x3d, r24	; 61
    dc12:	ed b7       	in	r30, 0x3d	; 61
    dc14:	fe b7       	in	r31, 0x3e	; 62
    dc16:	31 96       	adiw	r30, 0x01	; 1
    dc18:	ad b7       	in	r26, 0x3d	; 61
    dc1a:	be b7       	in	r27, 0x3e	; 62
    dc1c:	12 96       	adiw	r26, 0x02	; 2
    dc1e:	bc 92       	st	X, r11
    dc20:	ae 92       	st	-X, r10
    dc22:	11 97       	sbiw	r26, 0x01	; 1
    dc24:	73 82       	std	Z+3, r7	; 0x03
    dc26:	62 82       	std	Z+2, r6	; 0x02
    dc28:	f5 82       	std	Z+5, r15	; 0x05
    dc2a:	e4 82       	std	Z+4, r14	; 0x04
    dc2c:	97 82       	std	Z+7, r9	; 0x07
    dc2e:	86 82       	std	Z+6, r8	; 0x06
    dc30:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
			  lcd_print((((i)%4)+1),(((i)/4)*10)+1,lcdteks);
    dc34:	8d b7       	in	r24, 0x3d	; 61
    dc36:	9e b7       	in	r25, 0x3e	; 62
    dc38:	08 96       	adiw	r24, 0x08	; 8
    dc3a:	0f b6       	in	r0, 0x3f	; 63
    dc3c:	f8 94       	cli
    dc3e:	9e bf       	out	0x3e, r25	; 62
    dc40:	0f be       	out	0x3f, r0	; 63
    dc42:	8d bf       	out	0x3d, r24	; 61
    dc44:	61 2f       	mov	r22, r17
    dc46:	66 95       	lsr	r22
    dc48:	66 95       	lsr	r22
    dc4a:	60 9f       	mul	r22, r16
    dc4c:	b0 01       	movw	r22, r0
    dc4e:	11 24       	eor	r1, r1
    dc50:	6f 5f       	subi	r22, 0xFF	; 255
    dc52:	13 70       	andi	r17, 0x03	; 3
    dc54:	81 2f       	mov	r24, r17
    dc56:	8f 5f       	subi	r24, 0xFF	; 255
    dc58:	a5 01       	movw	r20, r10
    dc5a:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
    dc5e:	ad e0       	ldi	r26, 0x0D	; 13
    dc60:	b0 e0       	ldi	r27, 0x00	; 0
    dc62:	ca 0e       	add	r12, r26
    dc64:	db 1e       	adc	r13, r27
    dc66:	08 94       	sec
    dc68:	e1 1c       	adc	r14, r1
    dc6a:	f1 1c       	adc	r15, r1
     switch(stMenuProduct){
	 case mpInitProduct:
	      //DisplayProductName
		  lcd_clear();
		  //lcd_printf(1,1,PSTR("Product:"));
	      for(i=0;i<6;i++){//234 
    dc6c:	ba e0       	ldi	r27, 0x0A	; 10
    dc6e:	cb 16       	cp	r12, r27
    dc70:	b1 e0       	ldi	r27, 0x01	; 1
    dc72:	db 06       	cpc	r13, r27
    dc74:	09 f0       	breq	.+2      	; 0xdc78 <FSettingProduct+0x110>
    dc76:	bd cf       	rjmp	.-134    	; 0xdbf2 <FSettingProduct+0x8a>
	          eeprom_read_block((void*) &strProductName, (const void*) &DefProductName[i], 13);
	          sprintf_P(lcdteks,PSTR("%d)%s"),(i+1),strProductName);
			  lcd_print((((i)%4)+1),(((i)/4)*10)+1,lcdteks);
		  }
		  lcd_printf(4,11,PSTR("*)Back"));
    dc78:	84 e0       	ldi	r24, 0x04	; 4
    dc7a:	6b e0       	ldi	r22, 0x0B	; 11
    dc7c:	4f e9       	ldi	r20, 0x9F	; 159
    dc7e:	53 e1       	ldi	r21, 0x13	; 19
    dc80:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
          stMenuProduct=mpChangeProduct;
    dc84:	81 e0       	ldi	r24, 0x01	; 1
    dc86:	4a c1       	rjmp	.+660    	; 0xdf1c <FSettingProduct+0x3b4>
	      break;
     case mpChangeProduct:
		  KeyPressed=_key_scan(1);
    dc88:	81 e0       	ldi	r24, 0x01	; 1
    dc8a:	0e 94 58 a6 	call	0x14cb0	; 0x14cb0 <_key_scan>
    dc8e:	18 2f       	mov	r17, r24
		  KeyChar=_key_btn(KeyPressed);
    dc90:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <_key_btn>
		  if ((KeyChar>='1')&&(KeyChar<='6')){
    dc94:	81 53       	subi	r24, 0x31	; 49
    dc96:	86 30       	cpi	r24, 0x06	; 6
    dc98:	28 f4       	brcc	.+10     	; 0xdca4 <FSettingProduct+0x13c>
		      ProdID=KeyChar-'1';
    dc9a:	80 93 20 02 	sts	0x0220, r24
			  stMenuProduct=mpDispPrice;
    dc9e:	82 e0       	ldi	r24, 0x02	; 2
    dca0:	80 93 21 02 	sts	0x0221, r24
		  }
		  if (KeyPressed==_KEY_CANCEL){
    dca4:	17 3e       	cpi	r17, 0xE7	; 231
    dca6:	09 f0       	breq	.+2      	; 0xdcaa <FSettingProduct+0x142>
    dca8:	43 c1       	rjmp	.+646    	; 0xdf30 <FSettingProduct+0x3c8>
		      stMenuProduct=mpExitMenuProduct;
    dcaa:	86 e0       	ldi	r24, 0x06	; 6
    dcac:	37 c1       	rjmp	.+622    	; 0xdf1c <FSettingProduct+0x3b4>
		  }
	      break;
     case mpDispPrice:
	 	  eeprom_read_block((void*) &strProductName, (const void*) &DefProductName[ProdID], 13);
    dcae:	60 91 20 02 	lds	r22, 0x0220
    dcb2:	8d e0       	ldi	r24, 0x0D	; 13
    dcb4:	68 9f       	mul	r22, r24
    dcb6:	b0 01       	movw	r22, r0
    dcb8:	11 24       	eor	r1, r1
    dcba:	64 54       	subi	r22, 0x44	; 68
    dcbc:	7f 4f       	sbci	r23, 0xFF	; 255
    dcbe:	7e 01       	movw	r14, r28
    dcc0:	08 94       	sec
    dcc2:	e1 1c       	adc	r14, r1
    dcc4:	f1 1c       	adc	r15, r1
    dcc6:	c7 01       	movw	r24, r14
    dcc8:	4d e0       	ldi	r20, 0x0D	; 13
    dcca:	50 e0       	ldi	r21, 0x00	; 0
    dccc:	0e 94 1b ad 	call	0x15a36	; 0x15a36 <__eerd_block_m128>
		  eeprom_read_block((void*) &strPrice, (const void*) &DefProductPrice[ProdID], 9);
    dcd0:	30 e2       	ldi	r19, 0x20	; 32
    dcd2:	c3 2e       	mov	r12, r19
    dcd4:	36 e0       	ldi	r19, 0x06	; 6
    dcd6:	d3 2e       	mov	r13, r19
    dcd8:	60 91 20 02 	lds	r22, 0x0220
    dcdc:	89 e0       	ldi	r24, 0x09	; 9
    dcde:	68 9f       	mul	r22, r24
    dce0:	b0 01       	movw	r22, r0
    dce2:	11 24       	eor	r1, r1
    dce4:	6a 57       	subi	r22, 0x7A	; 122
    dce6:	7f 4f       	sbci	r23, 0xFF	; 255
    dce8:	c6 01       	movw	r24, r12
    dcea:	49 e0       	ldi	r20, 0x09	; 9
    dcec:	50 e0       	ldi	r21, 0x00	; 0
    dcee:	0e 94 1b ad 	call	0x15a36	; 0x15a36 <__eerd_block_m128>
		  sprintf_P(lcdteks,PSTR("1)%s"),strProductName);
    dcf2:	00 d0       	rcall	.+0      	; 0xdcf4 <FSettingProduct+0x18c>
    dcf4:	00 d0       	rcall	.+0      	; 0xdcf6 <FSettingProduct+0x18e>
    dcf6:	00 d0       	rcall	.+0      	; 0xdcf8 <FSettingProduct+0x190>
    dcf8:	ed b7       	in	r30, 0x3d	; 61
    dcfa:	fe b7       	in	r31, 0x3e	; 62
    dcfc:	31 96       	adiw	r30, 0x01	; 1
    dcfe:	8e 01       	movw	r16, r28
    dd00:	02 5f       	subi	r16, 0xF2	; 242
    dd02:	1f 4f       	sbci	r17, 0xFF	; 255
    dd04:	ad b7       	in	r26, 0x3d	; 61
    dd06:	be b7       	in	r27, 0x3e	; 62
    dd08:	12 96       	adiw	r26, 0x02	; 2
    dd0a:	1c 93       	st	X, r17
    dd0c:	0e 93       	st	-X, r16
    dd0e:	11 97       	sbiw	r26, 0x01	; 1
    dd10:	8a e9       	ldi	r24, 0x9A	; 154
    dd12:	93 e1       	ldi	r25, 0x13	; 19
    dd14:	93 83       	std	Z+3, r25	; 0x03
    dd16:	82 83       	std	Z+2, r24	; 0x02
    dd18:	f5 82       	std	Z+5, r15	; 0x05
    dd1a:	e4 82       	std	Z+4, r14	; 0x04
    dd1c:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
		  lcd_clear();lcd_print(1,1,lcdteks);
    dd20:	8d b7       	in	r24, 0x3d	; 61
    dd22:	9e b7       	in	r25, 0x3e	; 62
    dd24:	06 96       	adiw	r24, 0x06	; 6
    dd26:	0f b6       	in	r0, 0x3f	; 63
    dd28:	f8 94       	cli
    dd2a:	9e bf       	out	0x3e, r25	; 62
    dd2c:	0f be       	out	0x3f, r0	; 63
    dd2e:	8d bf       	out	0x3d, r24	; 61
    dd30:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
    dd34:	81 e0       	ldi	r24, 0x01	; 1
    dd36:	61 e0       	ldi	r22, 0x01	; 1
    dd38:	a8 01       	movw	r20, r16
    dd3a:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
		  sprintf_P(lcdteks,PSTR("2)%s"),strPrice);
    dd3e:	00 d0       	rcall	.+0      	; 0xdd40 <FSettingProduct+0x1d8>
    dd40:	00 d0       	rcall	.+0      	; 0xdd42 <FSettingProduct+0x1da>
    dd42:	00 d0       	rcall	.+0      	; 0xdd44 <FSettingProduct+0x1dc>
    dd44:	ed b7       	in	r30, 0x3d	; 61
    dd46:	fe b7       	in	r31, 0x3e	; 62
    dd48:	31 96       	adiw	r30, 0x01	; 1
    dd4a:	ad b7       	in	r26, 0x3d	; 61
    dd4c:	be b7       	in	r27, 0x3e	; 62
    dd4e:	12 96       	adiw	r26, 0x02	; 2
    dd50:	1c 93       	st	X, r17
    dd52:	0e 93       	st	-X, r16
    dd54:	11 97       	sbiw	r26, 0x01	; 1
    dd56:	85 e9       	ldi	r24, 0x95	; 149
    dd58:	93 e1       	ldi	r25, 0x13	; 19
    dd5a:	93 83       	std	Z+3, r25	; 0x03
    dd5c:	82 83       	std	Z+2, r24	; 0x02
    dd5e:	d5 82       	std	Z+5, r13	; 0x05
    dd60:	c4 82       	std	Z+4, r12	; 0x04
    dd62:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
		  lcd_print(2,1,lcdteks);
    dd66:	8d b7       	in	r24, 0x3d	; 61
    dd68:	9e b7       	in	r25, 0x3e	; 62
    dd6a:	06 96       	adiw	r24, 0x06	; 6
    dd6c:	0f b6       	in	r0, 0x3f	; 63
    dd6e:	f8 94       	cli
    dd70:	9e bf       	out	0x3e, r25	; 62
    dd72:	0f be       	out	0x3f, r0	; 63
    dd74:	8d bf       	out	0x3d, r24	; 61
    dd76:	82 e0       	ldi	r24, 0x02	; 2
    dd78:	61 e0       	ldi	r22, 0x01	; 1
    dd7a:	a8 01       	movw	r20, r16
    dd7c:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
		  lcd_printf(4,1,PSTR("*)Back       "));
    dd80:	84 e0       	ldi	r24, 0x04	; 4
    dd82:	61 e0       	ldi	r22, 0x01	; 1
    dd84:	47 e8       	ldi	r20, 0x87	; 135
    dd86:	53 e1       	ldi	r21, 0x13	; 19
    dd88:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  stMenuProduct=mpIsEdit;
    dd8c:	83 e0       	ldi	r24, 0x03	; 3
    dd8e:	c6 c0       	rjmp	.+396    	; 0xdf1c <FSettingProduct+0x3b4>
	      break;
     case mpIsEdit:
		  KeyPressed=_key_scan(1);
    dd90:	81 e0       	ldi	r24, 0x01	; 1
    dd92:	0e 94 58 a6 	call	0x14cb0	; 0x14cb0 <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
    dd96:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <_key_btn>
		  if (KeyChar=='*'){
    dd9a:	8a 32       	cpi	r24, 0x2A	; 42
    dd9c:	09 f4       	brne	.+2      	; 0xdda0 <FSettingProduct+0x238>
    dd9e:	9f c0       	rjmp	.+318    	; 0xdede <FSettingProduct+0x376>
		      stMenuProduct=mpInitProduct;
		  }else
		  if (KeyChar=='1'){
    dda0:	81 33       	cpi	r24, 0x31	; 49
    dda2:	09 f0       	breq	.+2      	; 0xdda6 <FSettingProduct+0x23e>
    dda4:	4a c0       	rjmp	.+148    	; 0xde3a <FSettingProduct+0x2d2>
		      eeprom_read_block((void*) &strProductName, (const void*) &DefProductName[ProdID], 13);
    dda6:	60 91 20 02 	lds	r22, 0x0220
    ddaa:	8d e0       	ldi	r24, 0x0D	; 13
    ddac:	68 9f       	mul	r22, r24
    ddae:	b0 01       	movw	r22, r0
    ddb0:	11 24       	eor	r1, r1
    ddb2:	64 54       	subi	r22, 0x44	; 68
    ddb4:	7f 4f       	sbci	r23, 0xFF	; 255
    ddb6:	8e 01       	movw	r16, r28
    ddb8:	0f 5f       	subi	r16, 0xFF	; 255
    ddba:	1f 4f       	sbci	r17, 0xFF	; 255
    ddbc:	c8 01       	movw	r24, r16
    ddbe:	4d e0       	ldi	r20, 0x0D	; 13
    ddc0:	50 e0       	ldi	r21, 0x00	; 0
    ddc2:	0e 94 1b ad 	call	0x15a36	; 0x15a36 <__eerd_block_m128>
		      sprintf_P(lcdteks,PSTR("Old:%s"),strProductName);
    ddc6:	00 d0       	rcall	.+0      	; 0xddc8 <FSettingProduct+0x260>
    ddc8:	00 d0       	rcall	.+0      	; 0xddca <FSettingProduct+0x262>
    ddca:	00 d0       	rcall	.+0      	; 0xddcc <FSettingProduct+0x264>
    ddcc:	ed b7       	in	r30, 0x3d	; 61
    ddce:	fe b7       	in	r31, 0x3e	; 62
    ddd0:	31 96       	adiw	r30, 0x01	; 1
    ddd2:	2e e0       	ldi	r18, 0x0E	; 14
    ddd4:	e2 2e       	mov	r14, r18
    ddd6:	f1 2c       	mov	r15, r1
    ddd8:	ec 0e       	add	r14, r28
    ddda:	fd 1e       	adc	r15, r29
    dddc:	ad b7       	in	r26, 0x3d	; 61
    ddde:	be b7       	in	r27, 0x3e	; 62
    dde0:	12 96       	adiw	r26, 0x02	; 2
    dde2:	fc 92       	st	X, r15
    dde4:	ee 92       	st	-X, r14
    dde6:	11 97       	sbiw	r26, 0x01	; 1
    dde8:	80 e8       	ldi	r24, 0x80	; 128
    ddea:	93 e1       	ldi	r25, 0x13	; 19
    ddec:	93 83       	std	Z+3, r25	; 0x03
    ddee:	82 83       	std	Z+2, r24	; 0x02
    ddf0:	15 83       	std	Z+5, r17	; 0x05
    ddf2:	04 83       	std	Z+4, r16	; 0x04
    ddf4:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
			  lcd_printf(1,1,PSTR("Edit Product Name   "));
    ddf8:	8d b7       	in	r24, 0x3d	; 61
    ddfa:	9e b7       	in	r25, 0x3e	; 62
    ddfc:	06 96       	adiw	r24, 0x06	; 6
    ddfe:	0f b6       	in	r0, 0x3f	; 63
    de00:	f8 94       	cli
    de02:	9e bf       	out	0x3e, r25	; 62
    de04:	0f be       	out	0x3f, r0	; 63
    de06:	8d bf       	out	0x3d, r24	; 61
    de08:	81 e0       	ldi	r24, 0x01	; 1
    de0a:	61 e0       	ldi	r22, 0x01	; 1
    de0c:	4b e6       	ldi	r20, 0x6B	; 107
    de0e:	53 e1       	ldi	r21, 0x13	; 19
    de10:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		       lcd_print(2,1,lcdteks);
    de14:	82 e0       	ldi	r24, 0x02	; 2
    de16:	61 e0       	ldi	r22, 0x01	; 1
    de18:	a7 01       	movw	r20, r14
    de1a:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
			  lcd_printf(3,1,PSTR("New:_"));
    de1e:	83 e0       	ldi	r24, 0x03	; 3
    de20:	61 e0       	ldi	r22, 0x01	; 1
    de22:	45 e6       	ldi	r20, 0x65	; 101
    de24:	53 e1       	ldi	r21, 0x13	; 19
    de26:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		      lcd_printf(4,1,PSTR("*)Back    #)OK      "));
    de2a:	84 e0       	ldi	r24, 0x04	; 4
    de2c:	61 e0       	ldi	r22, 0x01	; 1
    de2e:	40 e5       	ldi	r20, 0x50	; 80
    de30:	53 e1       	ldi	r21, 0x13	; 19
    de32:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		      stMenuProduct=mpEditProductName;
    de36:	85 e0       	ldi	r24, 0x05	; 5
    de38:	71 c0       	rjmp	.+226    	; 0xdf1c <FSettingProduct+0x3b4>
		  }else
		  if (KeyChar=='2'){
    de3a:	82 33       	cpi	r24, 0x32	; 50
    de3c:	09 f0       	breq	.+2      	; 0xde40 <FSettingProduct+0x2d8>
    de3e:	78 c0       	rjmp	.+240    	; 0xdf30 <FSettingProduct+0x3c8>
		      uiResult=USER_NONE;
		      sprintf_P(lcdteks,PSTR("Old:%s"),strPrice);
    de40:	00 d0       	rcall	.+0      	; 0xde42 <FSettingProduct+0x2da>
    de42:	00 d0       	rcall	.+0      	; 0xde44 <FSettingProduct+0x2dc>
    de44:	00 d0       	rcall	.+0      	; 0xde46 <FSettingProduct+0x2de>
    de46:	ed b7       	in	r30, 0x3d	; 61
    de48:	fe b7       	in	r31, 0x3e	; 62
    de4a:	31 96       	adiw	r30, 0x01	; 1
    de4c:	8e 01       	movw	r16, r28
    de4e:	02 5f       	subi	r16, 0xF2	; 242
    de50:	1f 4f       	sbci	r17, 0xFF	; 255
    de52:	ad b7       	in	r26, 0x3d	; 61
    de54:	be b7       	in	r27, 0x3e	; 62
    de56:	12 96       	adiw	r26, 0x02	; 2
    de58:	1c 93       	st	X, r17
    de5a:	0e 93       	st	-X, r16
    de5c:	11 97       	sbiw	r26, 0x01	; 1
    de5e:	89 e4       	ldi	r24, 0x49	; 73
    de60:	93 e1       	ldi	r25, 0x13	; 19
    de62:	93 83       	std	Z+3, r25	; 0x03
    de64:	82 83       	std	Z+2, r24	; 0x02
    de66:	80 e2       	ldi	r24, 0x20	; 32
    de68:	96 e0       	ldi	r25, 0x06	; 6
    de6a:	95 83       	std	Z+5, r25	; 0x05
    de6c:	84 83       	std	Z+4, r24	; 0x04
    de6e:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
		       lcd_print(2,1,lcdteks);
    de72:	8d b7       	in	r24, 0x3d	; 61
    de74:	9e b7       	in	r25, 0x3e	; 62
    de76:	06 96       	adiw	r24, 0x06	; 6
    de78:	0f b6       	in	r0, 0x3f	; 63
    de7a:	f8 94       	cli
    de7c:	9e bf       	out	0x3e, r25	; 62
    de7e:	0f be       	out	0x3f, r0	; 63
    de80:	8d bf       	out	0x3d, r24	; 61
    de82:	82 e0       	ldi	r24, 0x02	; 2
    de84:	61 e0       	ldi	r22, 0x01	; 1
    de86:	a8 01       	movw	r20, r16
    de88:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
			  lcd_printf(3,1,PSTR("New:_"));
    de8c:	83 e0       	ldi	r24, 0x03	; 3
    de8e:	61 e0       	ldi	r22, 0x01	; 1
    de90:	43 e4       	ldi	r20, 0x43	; 67
    de92:	53 e1       	ldi	r21, 0x13	; 19
    de94:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		      lcd_printf(4,1,PSTR("*)Back    #)OK      "));
    de98:	84 e0       	ldi	r24, 0x04	; 4
    de9a:	61 e0       	ldi	r22, 0x01	; 1
    de9c:	4e e2       	ldi	r20, 0x2E	; 46
    de9e:	53 e1       	ldi	r21, 0x13	; 19
    dea0:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		      stMenuProduct=mpEditPrice;
    dea4:	84 e0       	ldi	r24, 0x04	; 4
    dea6:	3a c0       	rjmp	.+116    	; 0xdf1c <FSettingProduct+0x3b4>
		  }
	      break;
     case mpEditProductName:
	      uiResult=UserInput(UI_ALPHANUM_R,3,5,strDescription,0,10);
    dea8:	83 e0       	ldi	r24, 0x03	; 3
    deaa:	63 e0       	ldi	r22, 0x03	; 3
    deac:	45 e0       	ldi	r20, 0x05	; 5
    deae:	2e e8       	ldi	r18, 0x8E	; 142
    deb0:	38 e0       	ldi	r19, 0x08	; 8
    deb2:	00 e0       	ldi	r16, 0x00	; 0
    deb4:	10 e0       	ldi	r17, 0x00	; 0
    deb6:	9a e0       	ldi	r25, 0x0A	; 10
    deb8:	e9 2e       	mov	r14, r25
    deba:	0e 94 a9 67 	call	0xcf52	; 0xcf52 <UserInput>
		  if (uiResult==USER_OK){
    debe:	83 30       	cpi	r24, 0x03	; 3
    dec0:	81 f5       	brne	.+96     	; 0xdf22 <FSettingProduct+0x3ba>
		      eeprom_write_block((const void*)&strDescription,(void*)&DefProductName[ProdID], 13);
    dec2:	60 91 20 02 	lds	r22, 0x0220
    dec6:	8d e0       	ldi	r24, 0x0D	; 13
    dec8:	68 9f       	mul	r22, r24
    deca:	b0 01       	movw	r22, r0
    decc:	11 24       	eor	r1, r1
    dece:	64 54       	subi	r22, 0x44	; 68
    ded0:	7f 4f       	sbci	r23, 0xFF	; 255
    ded2:	8e e8       	ldi	r24, 0x8E	; 142
    ded4:	98 e0       	ldi	r25, 0x08	; 8
    ded6:	4d e0       	ldi	r20, 0x0D	; 13
    ded8:	50 e0       	ldi	r21, 0x00	; 0
    deda:	0e 94 33 ad 	call	0x15a66	; 0x15a66 <__eewr_block_m128>
		      stMenuProduct=mpInitProduct;
    dede:	10 92 21 02 	sts	0x0221, r1
    dee2:	26 c0       	rjmp	.+76     	; 0xdf30 <FSettingProduct+0x3c8>
			  }
		  else
		  if (uiResult==USER_CANCEL)stMenuProduct=mpDispPrice;
	      break;
     case mpEditPrice:
	      uiResult=UserInput(UI_NUMBER_R,3,5,strPrice,0,7);
    dee4:	81 e0       	ldi	r24, 0x01	; 1
    dee6:	63 e0       	ldi	r22, 0x03	; 3
    dee8:	45 e0       	ldi	r20, 0x05	; 5
    deea:	20 e2       	ldi	r18, 0x20	; 32
    deec:	36 e0       	ldi	r19, 0x06	; 6
    deee:	00 e0       	ldi	r16, 0x00	; 0
    def0:	10 e0       	ldi	r17, 0x00	; 0
    def2:	b7 e0       	ldi	r27, 0x07	; 7
    def4:	eb 2e       	mov	r14, r27
    def6:	0e 94 a9 67 	call	0xcf52	; 0xcf52 <UserInput>
		  if (uiResult==USER_OK){
    defa:	83 30       	cpi	r24, 0x03	; 3
    defc:	91 f4       	brne	.+36     	; 0xdf22 <FSettingProduct+0x3ba>
		      eeprom_write_block((const void*)&strPrice,(void*)&DefProductPrice[ProdID], 9);
    defe:	60 91 20 02 	lds	r22, 0x0220
    df02:	89 e0       	ldi	r24, 0x09	; 9
    df04:	68 9f       	mul	r22, r24
    df06:	b0 01       	movw	r22, r0
    df08:	11 24       	eor	r1, r1
    df0a:	6a 57       	subi	r22, 0x7A	; 122
    df0c:	7f 4f       	sbci	r23, 0xFF	; 255
    df0e:	80 e2       	ldi	r24, 0x20	; 32
    df10:	96 e0       	ldi	r25, 0x06	; 6
    df12:	49 e0       	ldi	r20, 0x09	; 9
    df14:	50 e0       	ldi	r21, 0x00	; 0
    df16:	0e 94 33 ad 	call	0x15a66	; 0x15a66 <__eewr_block_m128>
		      stMenuProduct=mpDispPrice;//stMenuProduct=mpInit;
    df1a:	82 e0       	ldi	r24, 0x02	; 2
    df1c:	80 93 21 02 	sts	0x0221, r24
    df20:	07 c0       	rjmp	.+14     	; 0xdf30 <FSettingProduct+0x3c8>
			  }
		  else
		  if (uiResult==USER_CANCEL)stMenuProduct=mpDispPrice;
    df22:	81 30       	cpi	r24, 0x01	; 1
    df24:	29 f4       	brne	.+10     	; 0xdf30 <FSettingProduct+0x3c8>
    df26:	f9 cf       	rjmp	.-14     	; 0xdf1a <FSettingProduct+0x3b2>
	      break;
     case mpExitMenuProduct:
	      stMenuProduct=mpInitProduct;
    df28:	10 92 21 02 	sts	0x0221, r1
    df2c:	81 e0       	ldi	r24, 0x01	; 1
    df2e:	01 c0       	rjmp	.+2      	; 0xdf32 <FSettingProduct+0x3ca>
    df30:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
	      break;
	 }
   return Result;
}
    df32:	a1 96       	adiw	r28, 0x21	; 33
    df34:	0f b6       	in	r0, 0x3f	; 63
    df36:	f8 94       	cli
    df38:	de bf       	out	0x3e, r29	; 62
    df3a:	0f be       	out	0x3f, r0	; 63
    df3c:	cd bf       	out	0x3d, r28	; 61
    df3e:	cf 91       	pop	r28
    df40:	df 91       	pop	r29
    df42:	1f 91       	pop	r17
    df44:	0f 91       	pop	r16
    df46:	ff 90       	pop	r15
    df48:	ef 90       	pop	r14
    df4a:	df 90       	pop	r13
    df4c:	cf 90       	pop	r12
    df4e:	bf 90       	pop	r11
    df50:	af 90       	pop	r10
    df52:	9f 90       	pop	r9
    df54:	8f 90       	pop	r8
    df56:	7f 90       	pop	r7
    df58:	6f 90       	pop	r6
    df5a:	08 95       	ret

0000df5c <FMenuSettingFooter>:
	 }
   //_menu_header();   
   return Result;
}

char FMenuSettingFooter(){
    df5c:	ef 92       	push	r14
    df5e:	0f 93       	push	r16
    df60:	1f 93       	push	r17
    df62:	df 93       	push	r29
    df64:	cf 93       	push	r28
    df66:	cd b7       	in	r28, 0x3d	; 61
    df68:	de b7       	in	r29, 0x3e	; 62
    df6a:	c6 54       	subi	r28, 0x46	; 70
    df6c:	d0 40       	sbci	r29, 0x00	; 0
    df6e:	0f b6       	in	r0, 0x3f	; 63
    df70:	f8 94       	cli
    df72:	de bf       	out	0x3e, r29	; 62
    df74:	0f be       	out	0x3f, r0	; 63
    df76:	cd bf       	out	0x3d, r28	; 61
	 char strHeaderFooter[50];
	 char KeyChar;
	 
	 Result=MENU_NONE;
     
	 switch (stSettingHeader){
    df78:	80 91 44 02 	lds	r24, 0x0244
    df7c:	84 30       	cpi	r24, 0x04	; 4
    df7e:	09 f4       	brne	.+2      	; 0xdf82 <FMenuSettingFooter+0x26>
    df80:	3b c1       	rjmp	.+630    	; 0xe1f8 <FMenuSettingFooter+0x29c>
    df82:	85 30       	cpi	r24, 0x05	; 5
    df84:	40 f4       	brcc	.+16     	; 0xdf96 <FMenuSettingFooter+0x3a>
    df86:	81 30       	cpi	r24, 0x01	; 1
    df88:	79 f1       	breq	.+94     	; 0xdfe8 <FMenuSettingFooter+0x8c>
    df8a:	81 30       	cpi	r24, 0x01	; 1
    df8c:	88 f0       	brcs	.+34     	; 0xdfb0 <FMenuSettingFooter+0x54>
    df8e:	82 30       	cpi	r24, 0x02	; 2
    df90:	09 f0       	breq	.+2      	; 0xdf94 <FMenuSettingFooter+0x38>
    df92:	7c c1       	rjmp	.+760    	; 0xe28c <FMenuSettingFooter+0x330>
    df94:	74 c0       	rjmp	.+232    	; 0xe07e <FMenuSettingFooter+0x122>
    df96:	86 30       	cpi	r24, 0x06	; 6
    df98:	09 f4       	brne	.+2      	; 0xdf9c <FMenuSettingFooter+0x40>
    df9a:	d3 c0       	rjmp	.+422    	; 0xe142 <FMenuSettingFooter+0x1e6>
    df9c:	86 30       	cpi	r24, 0x06	; 6
    df9e:	08 f4       	brcc	.+2      	; 0xdfa2 <FMenuSettingFooter+0x46>
    dfa0:	bd c0       	rjmp	.+378    	; 0xe11c <FMenuSettingFooter+0x1c0>
    dfa2:	87 30       	cpi	r24, 0x07	; 7
    dfa4:	09 f4       	brne	.+2      	; 0xdfa8 <FMenuSettingFooter+0x4c>
    dfa6:	36 c1       	rjmp	.+620    	; 0xe214 <FMenuSettingFooter+0x2b8>
    dfa8:	88 30       	cpi	r24, 0x08	; 8
    dfaa:	09 f0       	breq	.+2      	; 0xdfae <FMenuSettingFooter+0x52>
    dfac:	6f c1       	rjmp	.+734    	; 0xe28c <FMenuSettingFooter+0x330>
    dfae:	6a c1       	rjmp	.+724    	; 0xe284 <FMenuSettingFooter+0x328>
	 case shInitHeader:
	      lcd_clear();
    dfb0:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
		  lcd_printf(1,1,PSTR("1)Footer1  3)Footer3"));
    dfb4:	81 e0       	ldi	r24, 0x01	; 1
    dfb6:	61 e0       	ldi	r22, 0x01	; 1
    dfb8:	4d e9       	ldi	r20, 0x9D	; 157
    dfba:	55 e1       	ldi	r21, 0x15	; 21
    dfbc:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  lcd_printf(2,1,PSTR("2)Footer2  4)Footer4"));
    dfc0:	82 e0       	ldi	r24, 0x02	; 2
    dfc2:	61 e0       	ldi	r22, 0x01	; 1
    dfc4:	48 e8       	ldi	r20, 0x88	; 136
    dfc6:	55 e1       	ldi	r21, 0x15	; 21
    dfc8:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  lcd_printf(3,1,PSTR("                    "));
    dfcc:	83 e0       	ldi	r24, 0x03	; 3
    dfce:	61 e0       	ldi	r22, 0x01	; 1
    dfd0:	43 e7       	ldi	r20, 0x73	; 115
    dfd2:	55 e1       	ldi	r21, 0x15	; 21
    dfd4:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  lcd_printf(4,1,PSTR("*)Exit              "));
    dfd8:	84 e0       	ldi	r24, 0x04	; 4
    dfda:	61 e0       	ldi	r22, 0x01	; 1
    dfdc:	4e e5       	ldi	r20, 0x5E	; 94
    dfde:	55 e1       	ldi	r21, 0x15	; 21
    dfe0:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  stSettingHeader=shHeaderSelect;
    dfe4:	81 e0       	ldi	r24, 0x01	; 1
    dfe6:	10 c1       	rjmp	.+544    	; 0xe208 <FMenuSettingFooter+0x2ac>
	      break;
      case shHeaderSelect:
	      KeyChar=_key_btn(_key_scan(1));
    dfe8:	81 e0       	ldi	r24, 0x01	; 1
    dfea:	0e 94 58 a6 	call	0x14cb0	; 0x14cb0 <_key_scan>
    dfee:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <_key_btn>
    dff2:	e8 2e       	mov	r14, r24
		  if ((KeyChar>='1')&&(KeyChar<='6')){
    dff4:	81 53       	subi	r24, 0x31	; 49
    dff6:	86 30       	cpi	r24, 0x06	; 6
    dff8:	e0 f5       	brcc	.+120    	; 0xe072 <FMenuSettingFooter+0x116>
		       HeaderIdx=KeyChar-'1';//
    dffa:	80 93 43 02 	sts	0x0243, r24
			   lcd_clear();
    dffe:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
			   sprintf_P(lcdteks,PSTR("Edit Footer%d "),HeaderIdx+1);
    e002:	00 d0       	rcall	.+0      	; 0xe004 <FMenuSettingFooter+0xa8>
    e004:	00 d0       	rcall	.+0      	; 0xe006 <FMenuSettingFooter+0xaa>
    e006:	00 d0       	rcall	.+0      	; 0xe008 <FMenuSettingFooter+0xac>
    e008:	ed b7       	in	r30, 0x3d	; 61
    e00a:	fe b7       	in	r31, 0x3e	; 62
    e00c:	31 96       	adiw	r30, 0x01	; 1
    e00e:	8e 01       	movw	r16, r28
    e010:	0f 5f       	subi	r16, 0xFF	; 255
    e012:	1f 4f       	sbci	r17, 0xFF	; 255
    e014:	ad b7       	in	r26, 0x3d	; 61
    e016:	be b7       	in	r27, 0x3e	; 62
    e018:	12 96       	adiw	r26, 0x02	; 2
    e01a:	1c 93       	st	X, r17
    e01c:	0e 93       	st	-X, r16
    e01e:	11 97       	sbiw	r26, 0x01	; 1
    e020:	8f e4       	ldi	r24, 0x4F	; 79
    e022:	95 e1       	ldi	r25, 0x15	; 21
    e024:	93 83       	std	Z+3, r25	; 0x03
    e026:	82 83       	std	Z+2, r24	; 0x02
    e028:	80 91 43 02 	lds	r24, 0x0243
    e02c:	90 e0       	ldi	r25, 0x00	; 0
    e02e:	01 96       	adiw	r24, 0x01	; 1
    e030:	95 83       	std	Z+5, r25	; 0x05
    e032:	84 83       	std	Z+4, r24	; 0x04
    e034:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
			   lcd_print(1,1,lcdteks);
    e038:	8d b7       	in	r24, 0x3d	; 61
    e03a:	9e b7       	in	r25, 0x3e	; 62
    e03c:	06 96       	adiw	r24, 0x06	; 6
    e03e:	0f b6       	in	r0, 0x3f	; 63
    e040:	f8 94       	cli
    e042:	9e bf       	out	0x3e, r25	; 62
    e044:	0f be       	out	0x3f, r0	; 63
    e046:	8d bf       	out	0x3d, r24	; 61
    e048:	81 e0       	ldi	r24, 0x01	; 1
    e04a:	61 e0       	ldi	r22, 0x01	; 1
    e04c:	a8 01       	movw	r20, r16
    e04e:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
			   lcd_printf(4,1,PSTR("[*]Back  [#]OK"));
    e052:	84 e0       	ldi	r24, 0x04	; 4
    e054:	61 e0       	ldi	r22, 0x01	; 1
    e056:	40 e4       	ldi	r20, 0x40	; 64
    e058:	55 e1       	ldi	r21, 0x15	; 21
    e05a:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
    e05e:	ee e6       	ldi	r30, 0x6E	; 110
    e060:	f4 e0       	ldi	r31, 0x04	; 4
}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
	     strMemory[i]=data;
    e062:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    e064:	95 e0       	ldi	r25, 0x05	; 5
    e066:	ef 3f       	cpi	r30, 0xFF	; 255
    e068:	f9 07       	cpc	r31, r25
    e06a:	d9 f7       	brne	.-10     	; 0xe062 <FMenuSettingFooter+0x106>
			   lcd_clear();
			   sprintf_P(lcdteks,PSTR("Edit Footer%d "),HeaderIdx+1);
			   lcd_print(1,1,lcdteks);
			   lcd_printf(4,1,PSTR("[*]Back  [#]OK"));
			   FillChar(PrintBuffer,sizeof(PrintBuffer),0);
			   stSettingHeader=shEditHeader1;
    e06c:	82 e0       	ldi	r24, 0x02	; 2
    e06e:	80 93 44 02 	sts	0x0244, r24
		  }
		  if(KeyChar=='*')stSettingHeader=shExitSettingHeader;
    e072:	aa e2       	ldi	r26, 0x2A	; 42
    e074:	ea 16       	cp	r14, r26
    e076:	09 f0       	breq	.+2      	; 0xe07a <FMenuSettingFooter+0x11e>
    e078:	09 c1       	rjmp	.+530    	; 0xe28c <FMenuSettingFooter+0x330>
    e07a:	88 e0       	ldi	r24, 0x08	; 8
    e07c:	c5 c0       	rjmp	.+394    	; 0xe208 <FMenuSettingFooter+0x2ac>
	      break;
     case shEditHeader1:
          //uiResult=UserInput(UI_ALPHANUM_R,2,1,strFreeMessageLine1,0,20);
		  uiResult=UserInput(UI_ALPHANUM_R,2,1,PrintBuffer,0,40);
    e07e:	83 e0       	ldi	r24, 0x03	; 3
    e080:	62 e0       	ldi	r22, 0x02	; 2
    e082:	41 e0       	ldi	r20, 0x01	; 1
    e084:	2e e6       	ldi	r18, 0x6E	; 110
    e086:	34 e0       	ldi	r19, 0x04	; 4
    e088:	00 e0       	ldi	r16, 0x00	; 0
    e08a:	10 e0       	ldi	r17, 0x00	; 0
    e08c:	e8 e2       	ldi	r30, 0x28	; 40
    e08e:	ee 2e       	mov	r14, r30
    e090:	0e 94 a9 67 	call	0xcf52	; 0xcf52 <UserInput>
		  if (uiResult==USER_OK){
    e094:	83 30       	cpi	r24, 0x03	; 3
    e096:	f1 f5       	brne	.+124    	; 0xe114 <FMenuSettingFooter+0x1b8>
			  lcd_clear();
    e098:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
			  AddSpaceLag(PrintBuffer,40);
    e09c:	8e e6       	ldi	r24, 0x6E	; 110
    e09e:	94 e0       	ldi	r25, 0x04	; 4
    e0a0:	68 e2       	ldi	r22, 0x28	; 40
    e0a2:	0e 94 c4 2d 	call	0x5b88	; 0x5b88 <AddSpaceLag>
    e0a6:	20 e0       	ldi	r18, 0x00	; 0
    e0a8:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    e0aa:	f9 01       	movw	r30, r18
    e0ac:	ec 5e       	subi	r30, 0xEC	; 236
    e0ae:	f6 4f       	sbci	r31, 0xF6	; 246
    e0b0:	d9 01       	movw	r26, r18
    e0b2:	a2 59       	subi	r26, 0x92	; 146
    e0b4:	bb 4f       	sbci	r27, 0xFB	; 251
    e0b6:	8c 91       	ld	r24, X
    e0b8:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    e0ba:	2f 5f       	subi	r18, 0xFF	; 255
    e0bc:	3f 4f       	sbci	r19, 0xFF	; 255
    e0be:	24 31       	cpi	r18, 0x14	; 20
    e0c0:	31 05       	cpc	r19, r1
    e0c2:	99 f7       	brne	.-26     	; 0xe0aa <FMenuSettingFooter+0x14e>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    e0c4:	10 92 28 09 	sts	0x0928, r1
    e0c8:	e2 e8       	ldi	r30, 0x82	; 130
    e0ca:	f4 e0       	ldi	r31, 0x04	; 4
    e0cc:	a5 e2       	ldi	r26, 0x25	; 37
    e0ce:	b8 e0       	ldi	r27, 0x08	; 8
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    e0d0:	81 91       	ld	r24, Z+
    e0d2:	8d 93       	st	X+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    e0d4:	84 e0       	ldi	r24, 0x04	; 4
    e0d6:	e6 39       	cpi	r30, 0x96	; 150
    e0d8:	f8 07       	cpc	r31, r24
    e0da:	d1 f7       	brne	.-12     	; 0xe0d0 <FMenuSettingFooter+0x174>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    e0dc:	10 92 39 08 	sts	0x0839, r1
			  lcd_clear();
			  AddSpaceLag(PrintBuffer,40);
			  StrPosCopy(PrintBuffer,strFreeMessageLine1,0,20);
			  StrPosCopy(PrintBuffer,strFreeMessageLine2,20,20);

			  lcd_print(1,1,strFreeMessageLine1);			  
    e0e0:	81 e0       	ldi	r24, 0x01	; 1
    e0e2:	61 e0       	ldi	r22, 0x01	; 1
    e0e4:	44 e1       	ldi	r20, 0x14	; 20
    e0e6:	59 e0       	ldi	r21, 0x09	; 9
    e0e8:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
			  lcd_print(2,1,strFreeMessageLine2);			  
    e0ec:	82 e0       	ldi	r24, 0x02	; 2
    e0ee:	61 e0       	ldi	r22, 0x01	; 1
    e0f0:	45 e2       	ldi	r20, 0x25	; 37
    e0f2:	58 e0       	ldi	r21, 0x08	; 8
    e0f4:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
			  
			  lcd_printf(3,1,PSTR("Align Center?"));
    e0f8:	83 e0       	ldi	r24, 0x03	; 3
    e0fa:	61 e0       	ldi	r22, 0x01	; 1
    e0fc:	42 e3       	ldi	r20, 0x32	; 50
    e0fe:	55 e1       	ldi	r21, 0x15	; 21
    e100:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
			  lcd_printf(4,1,PSTR("[*]No  [#]Yes"));
    e104:	84 e0       	ldi	r24, 0x04	; 4
    e106:	61 e0       	ldi	r22, 0x01	; 1
    e108:	44 e2       	ldi	r20, 0x24	; 36
    e10a:	55 e1       	ldi	r21, 0x15	; 21
    e10c:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		      stSettingHeader=shIsAlignCenter;
    e110:	85 e0       	ldi	r24, 0x05	; 5
    e112:	7a c0       	rjmp	.+244    	; 0xe208 <FMenuSettingFooter+0x2ac>
		  }
		  else
		  if (uiResult==USER_CANCEL)stSettingHeader=shInitHeader;
    e114:	81 30       	cpi	r24, 0x01	; 1
    e116:	09 f0       	breq	.+2      	; 0xe11a <FMenuSettingFooter+0x1be>
    e118:	b9 c0       	rjmp	.+370    	; 0xe28c <FMenuSettingFooter+0x330>
    e11a:	b1 c0       	rjmp	.+354    	; 0xe27e <FMenuSettingFooter+0x322>
	      break;
     case shIsAlignCenter:
	      KeyChar=_key_btn(_key_scan(1));
    e11c:	81 e0       	ldi	r24, 0x01	; 1
    e11e:	0e 94 58 a6 	call	0x14cb0	; 0x14cb0 <_key_scan>
    e122:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <_key_btn>
          if(KeyChar=='#'){
    e126:	83 32       	cpi	r24, 0x23	; 35
    e128:	39 f4       	brne	.+14     	; 0xe138 <FMenuSettingFooter+0x1dc>
		      //AlignCenter			  
			  StrAlignCenter(PrintBuffer,40);
    e12a:	8e e6       	ldi	r24, 0x6E	; 110
    e12c:	94 e0       	ldi	r25, 0x04	; 4
    e12e:	68 e2       	ldi	r22, 0x28	; 40
    e130:	70 e0       	ldi	r23, 0x00	; 0
    e132:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <StrAlignCenter>
    e136:	03 c0       	rjmp	.+6      	; 0xe13e <FMenuSettingFooter+0x1e2>
			  stSettingHeader=shIsSaveHeader;
		  } else if(KeyChar=='*')stSettingHeader=shIsSaveHeader;		 
    e138:	8a 32       	cpi	r24, 0x2A	; 42
    e13a:	09 f0       	breq	.+2      	; 0xe13e <FMenuSettingFooter+0x1e2>
    e13c:	a7 c0       	rjmp	.+334    	; 0xe28c <FMenuSettingFooter+0x330>
    e13e:	86 e0       	ldi	r24, 0x06	; 6
    e140:	63 c0       	rjmp	.+198    	; 0xe208 <FMenuSettingFooter+0x2ac>
	      break;
     case shIsSaveHeader:
	      lcd_clear(); 
    e142:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
    e146:	20 e0       	ldi	r18, 0x00	; 0
    e148:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    e14a:	f9 01       	movw	r30, r18
    e14c:	ec 5e       	subi	r30, 0xEC	; 236
    e14e:	f6 4f       	sbci	r31, 0xF6	; 246
    e150:	d9 01       	movw	r26, r18
    e152:	a2 59       	subi	r26, 0x92	; 146
    e154:	bb 4f       	sbci	r27, 0xFB	; 251
    e156:	8c 91       	ld	r24, X
    e158:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    e15a:	2f 5f       	subi	r18, 0xFF	; 255
    e15c:	3f 4f       	sbci	r19, 0xFF	; 255
    e15e:	24 31       	cpi	r18, 0x14	; 20
    e160:	31 05       	cpc	r19, r1
    e162:	99 f7       	brne	.-26     	; 0xe14a <FMenuSettingFooter+0x1ee>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    e164:	10 92 28 09 	sts	0x0928, r1
    e168:	e2 e8       	ldi	r30, 0x82	; 130
    e16a:	f4 e0       	ldi	r31, 0x04	; 4
    e16c:	a5 e2       	ldi	r26, 0x25	; 37
    e16e:	b8 e0       	ldi	r27, 0x08	; 8
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    e170:	81 91       	ld	r24, Z+
    e172:	8d 93       	st	X+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    e174:	94 e0       	ldi	r25, 0x04	; 4
    e176:	e6 39       	cpi	r30, 0x96	; 150
    e178:	f9 07       	cpc	r31, r25
    e17a:	d1 f7       	brne	.-12     	; 0xe170 <FMenuSettingFooter+0x214>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    e17c:	10 92 39 08 	sts	0x0839, r1
	      break;
     case shIsSaveHeader:
	      lcd_clear(); 
		  StrPosCopy(PrintBuffer,strFreeMessageLine1,0,20);
		  StrPosCopy(PrintBuffer,strFreeMessageLine2,20,20);
          lcd_print(1,1,strFreeMessageLine1);
    e180:	81 e0       	ldi	r24, 0x01	; 1
    e182:	61 e0       	ldi	r22, 0x01	; 1
    e184:	44 e1       	ldi	r20, 0x14	; 20
    e186:	59 e0       	ldi	r21, 0x09	; 9
    e188:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
		  lcd_print(2,1,strFreeMessageLine2);
    e18c:	82 e0       	ldi	r24, 0x02	; 2
    e18e:	61 e0       	ldi	r22, 0x01	; 1
    e190:	45 e2       	ldi	r20, 0x25	; 37
    e192:	58 e0       	ldi	r21, 0x08	; 8
    e194:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
		  sprintf_P(lcdteks,PSTR("Save Footer%d ?"),HeaderIdx+1);
    e198:	00 d0       	rcall	.+0      	; 0xe19a <FMenuSettingFooter+0x23e>
    e19a:	00 d0       	rcall	.+0      	; 0xe19c <FMenuSettingFooter+0x240>
    e19c:	00 d0       	rcall	.+0      	; 0xe19e <FMenuSettingFooter+0x242>
    e19e:	ed b7       	in	r30, 0x3d	; 61
    e1a0:	fe b7       	in	r31, 0x3e	; 62
    e1a2:	31 96       	adiw	r30, 0x01	; 1
    e1a4:	8e 01       	movw	r16, r28
    e1a6:	0f 5f       	subi	r16, 0xFF	; 255
    e1a8:	1f 4f       	sbci	r17, 0xFF	; 255
    e1aa:	ad b7       	in	r26, 0x3d	; 61
    e1ac:	be b7       	in	r27, 0x3e	; 62
    e1ae:	12 96       	adiw	r26, 0x02	; 2
    e1b0:	1c 93       	st	X, r17
    e1b2:	0e 93       	st	-X, r16
    e1b4:	11 97       	sbiw	r26, 0x01	; 1
    e1b6:	84 e1       	ldi	r24, 0x14	; 20
    e1b8:	95 e1       	ldi	r25, 0x15	; 21
    e1ba:	93 83       	std	Z+3, r25	; 0x03
    e1bc:	82 83       	std	Z+2, r24	; 0x02
    e1be:	80 91 43 02 	lds	r24, 0x0243
    e1c2:	90 e0       	ldi	r25, 0x00	; 0
    e1c4:	01 96       	adiw	r24, 0x01	; 1
    e1c6:	95 83       	std	Z+5, r25	; 0x05
    e1c8:	84 83       	std	Z+4, r24	; 0x04
    e1ca:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
		  lcd_print(3,1,lcdteks);
    e1ce:	8d b7       	in	r24, 0x3d	; 61
    e1d0:	9e b7       	in	r25, 0x3e	; 62
    e1d2:	06 96       	adiw	r24, 0x06	; 6
    e1d4:	0f b6       	in	r0, 0x3f	; 63
    e1d6:	f8 94       	cli
    e1d8:	9e bf       	out	0x3e, r25	; 62
    e1da:	0f be       	out	0x3f, r0	; 63
    e1dc:	8d bf       	out	0x3d, r24	; 61
    e1de:	83 e0       	ldi	r24, 0x03	; 3
    e1e0:	61 e0       	ldi	r22, 0x01	; 1
    e1e2:	a8 01       	movw	r20, r16
    e1e4:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
		  lcd_printf(4,1,PSTR("[*]No [#]Yes"));		      
    e1e8:	84 e0       	ldi	r24, 0x04	; 4
    e1ea:	61 e0       	ldi	r22, 0x01	; 1
    e1ec:	47 e0       	ldi	r20, 0x07	; 7
    e1ee:	55 e1       	ldi	r21, 0x15	; 21
    e1f0:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
	      stSettingHeader=shSaveHeaderQuestions;      
    e1f4:	84 e0       	ldi	r24, 0x04	; 4
    e1f6:	08 c0       	rjmp	.+16     	; 0xe208 <FMenuSettingFooter+0x2ac>
	      break;       
     case shSaveHeaderQuestions:
          KeyChar=_key_btn(_key_scan(1));
    e1f8:	81 e0       	ldi	r24, 0x01	; 1
    e1fa:	0e 94 58 a6 	call	0x14cb0	; 0x14cb0 <_key_scan>
    e1fe:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <_key_btn>
	      if(KeyChar=='#')stSettingHeader=shSaveHeader;
    e202:	83 32       	cpi	r24, 0x23	; 35
    e204:	21 f4       	brne	.+8      	; 0xe20e <FMenuSettingFooter+0x2b2>
    e206:	87 e0       	ldi	r24, 0x07	; 7
    e208:	80 93 44 02 	sts	0x0244, r24
    e20c:	3f c0       	rjmp	.+126    	; 0xe28c <FMenuSettingFooter+0x330>
		  else
          if(KeyChar=='*')stSettingHeader=shInitHeader;
    e20e:	8a 32       	cpi	r24, 0x2A	; 42
    e210:	e9 f5       	brne	.+122    	; 0xe28c <FMenuSettingFooter+0x330>
    e212:	35 c0       	rjmp	.+106    	; 0xe27e <FMenuSettingFooter+0x322>
	      break;
     case shSaveHeader:
	      sprintf_P(strHeaderFooter,PSTR("%s%s"),strFreeMessageLine1,strFreeMessageLine2);
    e214:	ad b7       	in	r26, 0x3d	; 61
    e216:	be b7       	in	r27, 0x3e	; 62
    e218:	18 97       	sbiw	r26, 0x08	; 8
    e21a:	0f b6       	in	r0, 0x3f	; 63
    e21c:	f8 94       	cli
    e21e:	be bf       	out	0x3e, r27	; 62
    e220:	0f be       	out	0x3f, r0	; 63
    e222:	ad bf       	out	0x3d, r26	; 61
    e224:	ed b7       	in	r30, 0x3d	; 61
    e226:	fe b7       	in	r31, 0x3e	; 62
    e228:	31 96       	adiw	r30, 0x01	; 1
    e22a:	8e 01       	movw	r16, r28
    e22c:	0b 5e       	subi	r16, 0xEB	; 235
    e22e:	1f 4f       	sbci	r17, 0xFF	; 255
    e230:	12 96       	adiw	r26, 0x02	; 2
    e232:	1c 93       	st	X, r17
    e234:	0e 93       	st	-X, r16
    e236:	11 97       	sbiw	r26, 0x01	; 1
    e238:	82 e0       	ldi	r24, 0x02	; 2
    e23a:	95 e1       	ldi	r25, 0x15	; 21
    e23c:	93 83       	std	Z+3, r25	; 0x03
    e23e:	82 83       	std	Z+2, r24	; 0x02
    e240:	84 e1       	ldi	r24, 0x14	; 20
    e242:	99 e0       	ldi	r25, 0x09	; 9
    e244:	95 83       	std	Z+5, r25	; 0x05
    e246:	84 83       	std	Z+4, r24	; 0x04
    e248:	85 e2       	ldi	r24, 0x25	; 37
    e24a:	98 e0       	ldi	r25, 0x08	; 8
    e24c:	97 83       	std	Z+7, r25	; 0x07
    e24e:	86 83       	std	Z+6, r24	; 0x06
    e250:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	      eeprom_write_block((const void*) &strHeaderFooter, (void*) &DefHeaderFooter[HeaderIdx+6],40);
    e254:	8d b7       	in	r24, 0x3d	; 61
    e256:	9e b7       	in	r25, 0x3e	; 62
    e258:	08 96       	adiw	r24, 0x08	; 8
    e25a:	0f b6       	in	r0, 0x3f	; 63
    e25c:	f8 94       	cli
    e25e:	9e bf       	out	0x3e, r25	; 62
    e260:	0f be       	out	0x3f, r0	; 63
    e262:	8d bf       	out	0x3d, r24	; 61
    e264:	60 91 43 02 	lds	r22, 0x0243
    e268:	89 e2       	ldi	r24, 0x29	; 41
    e26a:	68 9f       	mul	r22, r24
    e26c:	b0 01       	movw	r22, r0
    e26e:	11 24       	eor	r1, r1
    e270:	62 5e       	subi	r22, 0xE2	; 226
    e272:	7c 4f       	sbci	r23, 0xFC	; 252
    e274:	c8 01       	movw	r24, r16
    e276:	48 e2       	ldi	r20, 0x28	; 40
    e278:	50 e0       	ldi	r21, 0x00	; 0
    e27a:	0e 94 33 ad 	call	0x15a66	; 0x15a66 <__eewr_block_m128>
		  //eeprom_write_block((const void*) &PrintBuffer, (void*) &DefHeaderFooter[HeaderIdx+6],40);

          stSettingHeader=shInitHeader;
    e27e:	10 92 44 02 	sts	0x0244, r1
    e282:	04 c0       	rjmp	.+8      	; 0xe28c <FMenuSettingFooter+0x330>
	      break;
     case shExitSettingHeader:
          stSettingHeader=shInitHeader;
    e284:	10 92 44 02 	sts	0x0244, r1
    e288:	81 e0       	ldi	r24, 0x01	; 1
    e28a:	01 c0       	rjmp	.+2      	; 0xe28e <FMenuSettingFooter+0x332>
    e28c:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
	      break;	 
	 }
   return Result;
}
    e28e:	ca 5b       	subi	r28, 0xBA	; 186
    e290:	df 4f       	sbci	r29, 0xFF	; 255
    e292:	0f b6       	in	r0, 0x3f	; 63
    e294:	f8 94       	cli
    e296:	de bf       	out	0x3e, r29	; 62
    e298:	0f be       	out	0x3f, r0	; 63
    e29a:	cd bf       	out	0x3d, r28	; 61
    e29c:	cf 91       	pop	r28
    e29e:	df 91       	pop	r29
    e2a0:	1f 91       	pop	r17
    e2a2:	0f 91       	pop	r16
    e2a4:	ef 90       	pop	r14
    e2a6:	08 95       	ret

0000e2a8 <FMenuSettingHeader>:
	      break;
	 }
   return Result;
}

char FMenuSettingHeader(){
    e2a8:	ef 92       	push	r14
    e2aa:	0f 93       	push	r16
    e2ac:	1f 93       	push	r17
    e2ae:	df 93       	push	r29
    e2b0:	cf 93       	push	r28
    e2b2:	cd b7       	in	r28, 0x3d	; 61
    e2b4:	de b7       	in	r29, 0x3e	; 62
    e2b6:	c6 54       	subi	r28, 0x46	; 70
    e2b8:	d0 40       	sbci	r29, 0x00	; 0
    e2ba:	0f b6       	in	r0, 0x3f	; 63
    e2bc:	f8 94       	cli
    e2be:	de bf       	out	0x3e, r29	; 62
    e2c0:	0f be       	out	0x3f, r0	; 63
    e2c2:	cd bf       	out	0x3d, r28	; 61
	 char lcdteks[20];
	 char strHeaderFooter[50];
	 
	 Result=MENU_NONE;
     
	 switch (stSettingHeader){
    e2c4:	80 91 46 02 	lds	r24, 0x0246
    e2c8:	84 30       	cpi	r24, 0x04	; 4
    e2ca:	09 f4       	brne	.+2      	; 0xe2ce <FMenuSettingHeader+0x26>
    e2cc:	3b c1       	rjmp	.+630    	; 0xe544 <FMenuSettingHeader+0x29c>
    e2ce:	85 30       	cpi	r24, 0x05	; 5
    e2d0:	40 f4       	brcc	.+16     	; 0xe2e2 <FMenuSettingHeader+0x3a>
    e2d2:	81 30       	cpi	r24, 0x01	; 1
    e2d4:	79 f1       	breq	.+94     	; 0xe334 <FMenuSettingHeader+0x8c>
    e2d6:	81 30       	cpi	r24, 0x01	; 1
    e2d8:	88 f0       	brcs	.+34     	; 0xe2fc <FMenuSettingHeader+0x54>
    e2da:	82 30       	cpi	r24, 0x02	; 2
    e2dc:	09 f0       	breq	.+2      	; 0xe2e0 <FMenuSettingHeader+0x38>
    e2de:	7c c1       	rjmp	.+760    	; 0xe5d8 <FMenuSettingHeader+0x330>
    e2e0:	74 c0       	rjmp	.+232    	; 0xe3ca <FMenuSettingHeader+0x122>
    e2e2:	86 30       	cpi	r24, 0x06	; 6
    e2e4:	09 f4       	brne	.+2      	; 0xe2e8 <FMenuSettingHeader+0x40>
    e2e6:	d3 c0       	rjmp	.+422    	; 0xe48e <FMenuSettingHeader+0x1e6>
    e2e8:	86 30       	cpi	r24, 0x06	; 6
    e2ea:	08 f4       	brcc	.+2      	; 0xe2ee <FMenuSettingHeader+0x46>
    e2ec:	bd c0       	rjmp	.+378    	; 0xe468 <FMenuSettingHeader+0x1c0>
    e2ee:	87 30       	cpi	r24, 0x07	; 7
    e2f0:	09 f4       	brne	.+2      	; 0xe2f4 <FMenuSettingHeader+0x4c>
    e2f2:	36 c1       	rjmp	.+620    	; 0xe560 <FMenuSettingHeader+0x2b8>
    e2f4:	88 30       	cpi	r24, 0x08	; 8
    e2f6:	09 f0       	breq	.+2      	; 0xe2fa <FMenuSettingHeader+0x52>
    e2f8:	6f c1       	rjmp	.+734    	; 0xe5d8 <FMenuSettingHeader+0x330>
    e2fa:	6a c1       	rjmp	.+724    	; 0xe5d0 <FMenuSettingHeader+0x328>
	 case shInitHeader:
	      lcd_clear();
    e2fc:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
		  lcd_printf(1,1,PSTR("1)Header1  4)Header4"));
    e300:	81 e0       	ldi	r24, 0x01	; 1
    e302:	61 e0       	ldi	r22, 0x01	; 1
    e304:	4d e4       	ldi	r20, 0x4D	; 77
    e306:	56 e1       	ldi	r21, 0x16	; 22
    e308:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  lcd_printf(2,1,PSTR("2)Header2  5)Header5"));
    e30c:	82 e0       	ldi	r24, 0x02	; 2
    e30e:	61 e0       	ldi	r22, 0x01	; 1
    e310:	48 e3       	ldi	r20, 0x38	; 56
    e312:	56 e1       	ldi	r21, 0x16	; 22
    e314:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  lcd_printf(3,1,PSTR("3)Header3  6)Header6"));
    e318:	83 e0       	ldi	r24, 0x03	; 3
    e31a:	61 e0       	ldi	r22, 0x01	; 1
    e31c:	43 e2       	ldi	r20, 0x23	; 35
    e31e:	56 e1       	ldi	r21, 0x16	; 22
    e320:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  lcd_printf(4,1,PSTR("*)Exit              "));
    e324:	84 e0       	ldi	r24, 0x04	; 4
    e326:	61 e0       	ldi	r22, 0x01	; 1
    e328:	4e e0       	ldi	r20, 0x0E	; 14
    e32a:	56 e1       	ldi	r21, 0x16	; 22
    e32c:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  stSettingHeader=shHeaderSelect;
    e330:	81 e0       	ldi	r24, 0x01	; 1
    e332:	10 c1       	rjmp	.+544    	; 0xe554 <FMenuSettingHeader+0x2ac>
	      break;
     case shHeaderSelect:
	      KeyChar=_key_btn(_key_scan(1));
    e334:	81 e0       	ldi	r24, 0x01	; 1
    e336:	0e 94 58 a6 	call	0x14cb0	; 0x14cb0 <_key_scan>
    e33a:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <_key_btn>
    e33e:	e8 2e       	mov	r14, r24
		  if ((KeyChar>='1')&&(KeyChar<='6')){
    e340:	81 53       	subi	r24, 0x31	; 49
    e342:	86 30       	cpi	r24, 0x06	; 6
    e344:	e0 f5       	brcc	.+120    	; 0xe3be <FMenuSettingHeader+0x116>
		       HeaderIdx=KeyChar-'1';//
    e346:	80 93 45 02 	sts	0x0245, r24
			   lcd_clear();
    e34a:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
			   sprintf_P(lcdteks,PSTR("Edit Header%d "),HeaderIdx+1);
    e34e:	00 d0       	rcall	.+0      	; 0xe350 <FMenuSettingHeader+0xa8>
    e350:	00 d0       	rcall	.+0      	; 0xe352 <FMenuSettingHeader+0xaa>
    e352:	00 d0       	rcall	.+0      	; 0xe354 <FMenuSettingHeader+0xac>
    e354:	ed b7       	in	r30, 0x3d	; 61
    e356:	fe b7       	in	r31, 0x3e	; 62
    e358:	31 96       	adiw	r30, 0x01	; 1
    e35a:	8e 01       	movw	r16, r28
    e35c:	0f 5f       	subi	r16, 0xFF	; 255
    e35e:	1f 4f       	sbci	r17, 0xFF	; 255
    e360:	ad b7       	in	r26, 0x3d	; 61
    e362:	be b7       	in	r27, 0x3e	; 62
    e364:	12 96       	adiw	r26, 0x02	; 2
    e366:	1c 93       	st	X, r17
    e368:	0e 93       	st	-X, r16
    e36a:	11 97       	sbiw	r26, 0x01	; 1
    e36c:	8f ef       	ldi	r24, 0xFF	; 255
    e36e:	95 e1       	ldi	r25, 0x15	; 21
    e370:	93 83       	std	Z+3, r25	; 0x03
    e372:	82 83       	std	Z+2, r24	; 0x02
    e374:	80 91 45 02 	lds	r24, 0x0245
    e378:	90 e0       	ldi	r25, 0x00	; 0
    e37a:	01 96       	adiw	r24, 0x01	; 1
    e37c:	95 83       	std	Z+5, r25	; 0x05
    e37e:	84 83       	std	Z+4, r24	; 0x04
    e380:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
			   lcd_print(1,1,lcdteks);
    e384:	8d b7       	in	r24, 0x3d	; 61
    e386:	9e b7       	in	r25, 0x3e	; 62
    e388:	06 96       	adiw	r24, 0x06	; 6
    e38a:	0f b6       	in	r0, 0x3f	; 63
    e38c:	f8 94       	cli
    e38e:	9e bf       	out	0x3e, r25	; 62
    e390:	0f be       	out	0x3f, r0	; 63
    e392:	8d bf       	out	0x3d, r24	; 61
    e394:	81 e0       	ldi	r24, 0x01	; 1
    e396:	61 e0       	ldi	r22, 0x01	; 1
    e398:	a8 01       	movw	r20, r16
    e39a:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
			   lcd_printf(4,1,PSTR("[*]Back  [#]OK"));
    e39e:	84 e0       	ldi	r24, 0x04	; 4
    e3a0:	61 e0       	ldi	r22, 0x01	; 1
    e3a2:	40 ef       	ldi	r20, 0xF0	; 240
    e3a4:	55 e1       	ldi	r21, 0x15	; 21
    e3a6:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
    e3aa:	ee e6       	ldi	r30, 0x6E	; 110
    e3ac:	f4 e0       	ldi	r31, 0x04	; 4
}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
	     strMemory[i]=data;
    e3ae:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    e3b0:	95 e0       	ldi	r25, 0x05	; 5
    e3b2:	ef 3f       	cpi	r30, 0xFF	; 255
    e3b4:	f9 07       	cpc	r31, r25
    e3b6:	d9 f7       	brne	.-10     	; 0xe3ae <FMenuSettingHeader+0x106>
			   lcd_clear();
			   sprintf_P(lcdteks,PSTR("Edit Header%d "),HeaderIdx+1);
			   lcd_print(1,1,lcdteks);
			   lcd_printf(4,1,PSTR("[*]Back  [#]OK"));
			   FillChar(PrintBuffer,sizeof(PrintBuffer),0);
			   stSettingHeader=shEditHeader1;
    e3b8:	82 e0       	ldi	r24, 0x02	; 2
    e3ba:	80 93 46 02 	sts	0x0246, r24
		  }
		  if(KeyChar=='*')stSettingHeader=shExitSettingHeader;
    e3be:	aa e2       	ldi	r26, 0x2A	; 42
    e3c0:	ea 16       	cp	r14, r26
    e3c2:	09 f0       	breq	.+2      	; 0xe3c6 <FMenuSettingHeader+0x11e>
    e3c4:	09 c1       	rjmp	.+530    	; 0xe5d8 <FMenuSettingHeader+0x330>
    e3c6:	88 e0       	ldi	r24, 0x08	; 8
    e3c8:	c5 c0       	rjmp	.+394    	; 0xe554 <FMenuSettingHeader+0x2ac>
	      break;
     case shEditHeader1:
          //uiResult=UserInput(UI_ALPHANUM_R,2,1,strFreeMessageLine1,0,20);
		  uiResult=UserInput(UI_ALPHANUM_R,2,1,PrintBuffer,0,40);
    e3ca:	83 e0       	ldi	r24, 0x03	; 3
    e3cc:	62 e0       	ldi	r22, 0x02	; 2
    e3ce:	41 e0       	ldi	r20, 0x01	; 1
    e3d0:	2e e6       	ldi	r18, 0x6E	; 110
    e3d2:	34 e0       	ldi	r19, 0x04	; 4
    e3d4:	00 e0       	ldi	r16, 0x00	; 0
    e3d6:	10 e0       	ldi	r17, 0x00	; 0
    e3d8:	f8 e2       	ldi	r31, 0x28	; 40
    e3da:	ef 2e       	mov	r14, r31
    e3dc:	0e 94 a9 67 	call	0xcf52	; 0xcf52 <UserInput>
		  if (uiResult==USER_OK){
    e3e0:	83 30       	cpi	r24, 0x03	; 3
    e3e2:	f1 f5       	brne	.+124    	; 0xe460 <FMenuSettingHeader+0x1b8>
			  lcd_clear();
    e3e4:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
			  AddSpaceLag(PrintBuffer,40);
    e3e8:	8e e6       	ldi	r24, 0x6E	; 110
    e3ea:	94 e0       	ldi	r25, 0x04	; 4
    e3ec:	68 e2       	ldi	r22, 0x28	; 40
    e3ee:	0e 94 c4 2d 	call	0x5b88	; 0x5b88 <AddSpaceLag>
    e3f2:	20 e0       	ldi	r18, 0x00	; 0
    e3f4:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    e3f6:	f9 01       	movw	r30, r18
    e3f8:	ec 5e       	subi	r30, 0xEC	; 236
    e3fa:	f6 4f       	sbci	r31, 0xF6	; 246
    e3fc:	d9 01       	movw	r26, r18
    e3fe:	a2 59       	subi	r26, 0x92	; 146
    e400:	bb 4f       	sbci	r27, 0xFB	; 251
    e402:	8c 91       	ld	r24, X
    e404:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    e406:	2f 5f       	subi	r18, 0xFF	; 255
    e408:	3f 4f       	sbci	r19, 0xFF	; 255
    e40a:	24 31       	cpi	r18, 0x14	; 20
    e40c:	31 05       	cpc	r19, r1
    e40e:	99 f7       	brne	.-26     	; 0xe3f6 <FMenuSettingHeader+0x14e>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    e410:	10 92 28 09 	sts	0x0928, r1
    e414:	e2 e8       	ldi	r30, 0x82	; 130
    e416:	f4 e0       	ldi	r31, 0x04	; 4
    e418:	a5 e2       	ldi	r26, 0x25	; 37
    e41a:	b8 e0       	ldi	r27, 0x08	; 8
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    e41c:	81 91       	ld	r24, Z+
    e41e:	8d 93       	st	X+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    e420:	84 e0       	ldi	r24, 0x04	; 4
    e422:	e6 39       	cpi	r30, 0x96	; 150
    e424:	f8 07       	cpc	r31, r24
    e426:	d1 f7       	brne	.-12     	; 0xe41c <FMenuSettingHeader+0x174>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    e428:	10 92 39 08 	sts	0x0839, r1
			  lcd_clear();
			  AddSpaceLag(PrintBuffer,40);
			  StrPosCopy(PrintBuffer,strFreeMessageLine1,0,20);
			  StrPosCopy(PrintBuffer,strFreeMessageLine2,20,20);

			  lcd_print(1,1,strFreeMessageLine1);			  
    e42c:	81 e0       	ldi	r24, 0x01	; 1
    e42e:	61 e0       	ldi	r22, 0x01	; 1
    e430:	44 e1       	ldi	r20, 0x14	; 20
    e432:	59 e0       	ldi	r21, 0x09	; 9
    e434:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
			  lcd_print(2,1,strFreeMessageLine2);			  
    e438:	82 e0       	ldi	r24, 0x02	; 2
    e43a:	61 e0       	ldi	r22, 0x01	; 1
    e43c:	45 e2       	ldi	r20, 0x25	; 37
    e43e:	58 e0       	ldi	r21, 0x08	; 8
    e440:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
			  
			  lcd_printf(3,1,PSTR("Align Center?"));
    e444:	83 e0       	ldi	r24, 0x03	; 3
    e446:	61 e0       	ldi	r22, 0x01	; 1
    e448:	42 ee       	ldi	r20, 0xE2	; 226
    e44a:	55 e1       	ldi	r21, 0x15	; 21
    e44c:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
			  lcd_printf(4,1,PSTR("[*]No  [#]Yes"));
    e450:	84 e0       	ldi	r24, 0x04	; 4
    e452:	61 e0       	ldi	r22, 0x01	; 1
    e454:	44 ed       	ldi	r20, 0xD4	; 212
    e456:	55 e1       	ldi	r21, 0x15	; 21
    e458:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		      stSettingHeader=shIsAlignCenter;
    e45c:	85 e0       	ldi	r24, 0x05	; 5
    e45e:	7a c0       	rjmp	.+244    	; 0xe554 <FMenuSettingHeader+0x2ac>
		  }
		  else
		  if (uiResult==USER_CANCEL)stSettingHeader=shInitHeader;
    e460:	81 30       	cpi	r24, 0x01	; 1
    e462:	09 f0       	breq	.+2      	; 0xe466 <FMenuSettingHeader+0x1be>
    e464:	b9 c0       	rjmp	.+370    	; 0xe5d8 <FMenuSettingHeader+0x330>
    e466:	b1 c0       	rjmp	.+354    	; 0xe5ca <FMenuSettingHeader+0x322>
	      break;
     case shIsAlignCenter:
	      KeyChar=_key_btn(_key_scan(1));
    e468:	81 e0       	ldi	r24, 0x01	; 1
    e46a:	0e 94 58 a6 	call	0x14cb0	; 0x14cb0 <_key_scan>
    e46e:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <_key_btn>
          if(KeyChar=='#'){
    e472:	83 32       	cpi	r24, 0x23	; 35
    e474:	39 f4       	brne	.+14     	; 0xe484 <FMenuSettingHeader+0x1dc>
		      //AlignCenter			  
			  StrAlignCenter(PrintBuffer,40);
    e476:	8e e6       	ldi	r24, 0x6E	; 110
    e478:	94 e0       	ldi	r25, 0x04	; 4
    e47a:	68 e2       	ldi	r22, 0x28	; 40
    e47c:	70 e0       	ldi	r23, 0x00	; 0
    e47e:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <StrAlignCenter>
    e482:	03 c0       	rjmp	.+6      	; 0xe48a <FMenuSettingHeader+0x1e2>
			  stSettingHeader=shIsSaveHeader;
		  } else if(KeyChar=='*')stSettingHeader=shIsSaveHeader;		 
    e484:	8a 32       	cpi	r24, 0x2A	; 42
    e486:	09 f0       	breq	.+2      	; 0xe48a <FMenuSettingHeader+0x1e2>
    e488:	a7 c0       	rjmp	.+334    	; 0xe5d8 <FMenuSettingHeader+0x330>
    e48a:	86 e0       	ldi	r24, 0x06	; 6
    e48c:	63 c0       	rjmp	.+198    	; 0xe554 <FMenuSettingHeader+0x2ac>
	      break;
     case shIsSaveHeader:
	      lcd_clear(); 
    e48e:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
    e492:	20 e0       	ldi	r18, 0x00	; 0
    e494:	30 e0       	ldi	r19, 0x00	; 0
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    e496:	f9 01       	movw	r30, r18
    e498:	ec 5e       	subi	r30, 0xEC	; 236
    e49a:	f6 4f       	sbci	r31, 0xF6	; 246
    e49c:	d9 01       	movw	r26, r18
    e49e:	a2 59       	subi	r26, 0x92	; 146
    e4a0:	bb 4f       	sbci	r27, 0xFB	; 251
    e4a2:	8c 91       	ld	r24, X
    e4a4:	80 83       	st	Z, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    e4a6:	2f 5f       	subi	r18, 0xFF	; 255
    e4a8:	3f 4f       	sbci	r19, 0xFF	; 255
    e4aa:	24 31       	cpi	r18, 0x14	; 20
    e4ac:	31 05       	cpc	r19, r1
    e4ae:	99 f7       	brne	.-26     	; 0xe496 <FMenuSettingHeader+0x1ee>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    e4b0:	10 92 28 09 	sts	0x0928, r1
    e4b4:	e2 e8       	ldi	r30, 0x82	; 130
    e4b6:	f4 e0       	ldi	r31, 0x04	; 4
    e4b8:	a5 e2       	ldi	r26, 0x25	; 37
    e4ba:	b8 e0       	ldi	r27, 0x08	; 8
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
    e4bc:	81 91       	ld	r24, Z+
    e4be:	8d 93       	st	X+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
    e4c0:	94 e0       	ldi	r25, 0x04	; 4
    e4c2:	e6 39       	cpi	r30, 0x96	; 150
    e4c4:	f9 07       	cpc	r31, r25
    e4c6:	d1 f7       	brne	.-12     	; 0xe4bc <FMenuSettingHeader+0x214>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
    e4c8:	10 92 39 08 	sts	0x0839, r1
	      break;
     case shIsSaveHeader:
	      lcd_clear(); 
		  StrPosCopy(PrintBuffer,strFreeMessageLine1,0,20);
		  StrPosCopy(PrintBuffer,strFreeMessageLine2,20,20);
          lcd_print(1,1,strFreeMessageLine1);
    e4cc:	81 e0       	ldi	r24, 0x01	; 1
    e4ce:	61 e0       	ldi	r22, 0x01	; 1
    e4d0:	44 e1       	ldi	r20, 0x14	; 20
    e4d2:	59 e0       	ldi	r21, 0x09	; 9
    e4d4:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
		  lcd_print(2,1,strFreeMessageLine2);
    e4d8:	82 e0       	ldi	r24, 0x02	; 2
    e4da:	61 e0       	ldi	r22, 0x01	; 1
    e4dc:	45 e2       	ldi	r20, 0x25	; 37
    e4de:	58 e0       	ldi	r21, 0x08	; 8
    e4e0:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
		  sprintf_P(lcdteks,PSTR("Save Header%d ?"),HeaderIdx+1);
    e4e4:	00 d0       	rcall	.+0      	; 0xe4e6 <FMenuSettingHeader+0x23e>
    e4e6:	00 d0       	rcall	.+0      	; 0xe4e8 <FMenuSettingHeader+0x240>
    e4e8:	00 d0       	rcall	.+0      	; 0xe4ea <FMenuSettingHeader+0x242>
    e4ea:	ed b7       	in	r30, 0x3d	; 61
    e4ec:	fe b7       	in	r31, 0x3e	; 62
    e4ee:	31 96       	adiw	r30, 0x01	; 1
    e4f0:	8e 01       	movw	r16, r28
    e4f2:	0f 5f       	subi	r16, 0xFF	; 255
    e4f4:	1f 4f       	sbci	r17, 0xFF	; 255
    e4f6:	ad b7       	in	r26, 0x3d	; 61
    e4f8:	be b7       	in	r27, 0x3e	; 62
    e4fa:	12 96       	adiw	r26, 0x02	; 2
    e4fc:	1c 93       	st	X, r17
    e4fe:	0e 93       	st	-X, r16
    e500:	11 97       	sbiw	r26, 0x01	; 1
    e502:	84 ec       	ldi	r24, 0xC4	; 196
    e504:	95 e1       	ldi	r25, 0x15	; 21
    e506:	93 83       	std	Z+3, r25	; 0x03
    e508:	82 83       	std	Z+2, r24	; 0x02
    e50a:	80 91 45 02 	lds	r24, 0x0245
    e50e:	90 e0       	ldi	r25, 0x00	; 0
    e510:	01 96       	adiw	r24, 0x01	; 1
    e512:	95 83       	std	Z+5, r25	; 0x05
    e514:	84 83       	std	Z+4, r24	; 0x04
    e516:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
		  lcd_print(3,1,lcdteks);
    e51a:	8d b7       	in	r24, 0x3d	; 61
    e51c:	9e b7       	in	r25, 0x3e	; 62
    e51e:	06 96       	adiw	r24, 0x06	; 6
    e520:	0f b6       	in	r0, 0x3f	; 63
    e522:	f8 94       	cli
    e524:	9e bf       	out	0x3e, r25	; 62
    e526:	0f be       	out	0x3f, r0	; 63
    e528:	8d bf       	out	0x3d, r24	; 61
    e52a:	83 e0       	ldi	r24, 0x03	; 3
    e52c:	61 e0       	ldi	r22, 0x01	; 1
    e52e:	a8 01       	movw	r20, r16
    e530:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
		  lcd_printf(4,1,PSTR("[*]No [#]Yes"));		      
    e534:	84 e0       	ldi	r24, 0x04	; 4
    e536:	61 e0       	ldi	r22, 0x01	; 1
    e538:	47 eb       	ldi	r20, 0xB7	; 183
    e53a:	55 e1       	ldi	r21, 0x15	; 21
    e53c:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
	      stSettingHeader=shSaveHeaderQuestions;      
    e540:	84 e0       	ldi	r24, 0x04	; 4
    e542:	08 c0       	rjmp	.+16     	; 0xe554 <FMenuSettingHeader+0x2ac>
	      break;    
     case shSaveHeaderQuestions:
	      KeyChar=_key_btn(_key_scan(1));
    e544:	81 e0       	ldi	r24, 0x01	; 1
    e546:	0e 94 58 a6 	call	0x14cb0	; 0x14cb0 <_key_scan>
    e54a:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <_key_btn>
	      if(KeyChar=='#')stSettingHeader=shSaveHeader;
    e54e:	83 32       	cpi	r24, 0x23	; 35
    e550:	21 f4       	brne	.+8      	; 0xe55a <FMenuSettingHeader+0x2b2>
    e552:	87 e0       	ldi	r24, 0x07	; 7
    e554:	80 93 46 02 	sts	0x0246, r24
    e558:	3f c0       	rjmp	.+126    	; 0xe5d8 <FMenuSettingHeader+0x330>
		  else
          if(KeyChar=='*')stSettingHeader=shInitHeader;
    e55a:	8a 32       	cpi	r24, 0x2A	; 42
    e55c:	e9 f5       	brne	.+122    	; 0xe5d8 <FMenuSettingHeader+0x330>
    e55e:	35 c0       	rjmp	.+106    	; 0xe5ca <FMenuSettingHeader+0x322>
	      break;
     case shSaveHeader:
	      sprintf_P(strHeaderFooter,PSTR("%s%s"),strFreeMessageLine1,strFreeMessageLine2);
    e560:	ad b7       	in	r26, 0x3d	; 61
    e562:	be b7       	in	r27, 0x3e	; 62
    e564:	18 97       	sbiw	r26, 0x08	; 8
    e566:	0f b6       	in	r0, 0x3f	; 63
    e568:	f8 94       	cli
    e56a:	be bf       	out	0x3e, r27	; 62
    e56c:	0f be       	out	0x3f, r0	; 63
    e56e:	ad bf       	out	0x3d, r26	; 61
    e570:	ed b7       	in	r30, 0x3d	; 61
    e572:	fe b7       	in	r31, 0x3e	; 62
    e574:	31 96       	adiw	r30, 0x01	; 1
    e576:	8e 01       	movw	r16, r28
    e578:	0b 5e       	subi	r16, 0xEB	; 235
    e57a:	1f 4f       	sbci	r17, 0xFF	; 255
    e57c:	12 96       	adiw	r26, 0x02	; 2
    e57e:	1c 93       	st	X, r17
    e580:	0e 93       	st	-X, r16
    e582:	11 97       	sbiw	r26, 0x01	; 1
    e584:	82 eb       	ldi	r24, 0xB2	; 178
    e586:	95 e1       	ldi	r25, 0x15	; 21
    e588:	93 83       	std	Z+3, r25	; 0x03
    e58a:	82 83       	std	Z+2, r24	; 0x02
    e58c:	84 e1       	ldi	r24, 0x14	; 20
    e58e:	99 e0       	ldi	r25, 0x09	; 9
    e590:	95 83       	std	Z+5, r25	; 0x05
    e592:	84 83       	std	Z+4, r24	; 0x04
    e594:	85 e2       	ldi	r24, 0x25	; 37
    e596:	98 e0       	ldi	r25, 0x08	; 8
    e598:	97 83       	std	Z+7, r25	; 0x07
    e59a:	86 83       	std	Z+6, r24	; 0x06
    e59c:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	      eeprom_write_block((const void*) &strHeaderFooter, (void*) &DefHeaderFooter[HeaderIdx],40);
    e5a0:	8d b7       	in	r24, 0x3d	; 61
    e5a2:	9e b7       	in	r25, 0x3e	; 62
    e5a4:	08 96       	adiw	r24, 0x08	; 8
    e5a6:	0f b6       	in	r0, 0x3f	; 63
    e5a8:	f8 94       	cli
    e5aa:	9e bf       	out	0x3e, r25	; 62
    e5ac:	0f be       	out	0x3f, r0	; 63
    e5ae:	8d bf       	out	0x3d, r24	; 61
    e5b0:	60 91 45 02 	lds	r22, 0x0245
    e5b4:	89 e2       	ldi	r24, 0x29	; 41
    e5b6:	68 9f       	mul	r22, r24
    e5b8:	b0 01       	movw	r22, r0
    e5ba:	11 24       	eor	r1, r1
    e5bc:	68 5d       	subi	r22, 0xD8	; 216
    e5be:	7d 4f       	sbci	r23, 0xFD	; 253
    e5c0:	c8 01       	movw	r24, r16
    e5c2:	48 e2       	ldi	r20, 0x28	; 40
    e5c4:	50 e0       	ldi	r21, 0x00	; 0
    e5c6:	0e 94 33 ad 	call	0x15a66	; 0x15a66 <__eewr_block_m128>
		  //eeprom_write_block((const void*) &PrintBuffer, (void*) &DefHeaderFooter[HeaderIdx],40);
          stSettingHeader=shInitHeader;
    e5ca:	10 92 46 02 	sts	0x0246, r1
    e5ce:	04 c0       	rjmp	.+8      	; 0xe5d8 <FMenuSettingHeader+0x330>
	      break;
     case shExitSettingHeader:
          stSettingHeader=shInitHeader;
    e5d0:	10 92 46 02 	sts	0x0246, r1
    e5d4:	81 e0       	ldi	r24, 0x01	; 1
    e5d6:	01 c0       	rjmp	.+2      	; 0xe5da <FMenuSettingHeader+0x332>
    e5d8:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
	      break;	 
	 }
   //_menu_header();   
   return Result;
}
    e5da:	ca 5b       	subi	r28, 0xBA	; 186
    e5dc:	df 4f       	sbci	r29, 0xFF	; 255
    e5de:	0f b6       	in	r0, 0x3f	; 63
    e5e0:	f8 94       	cli
    e5e2:	de bf       	out	0x3e, r29	; 62
    e5e4:	0f be       	out	0x3f, r0	; 63
    e5e6:	cd bf       	out	0x3d, r28	; 61
    e5e8:	cf 91       	pop	r28
    e5ea:	df 91       	pop	r29
    e5ec:	1f 91       	pop	r17
    e5ee:	0f 91       	pop	r16
    e5f0:	ef 90       	pop	r14
    e5f2:	08 95       	ret

0000e5f4 <FMenuAdminSettings>:

char FMenuAdminSettings(){
     static char stAdminSettings=asInitMenu;
	 char SubMenu,Result,KeyChar;
	 Result=MENU_NONE;
	 switch(stAdminSettings){
    e5f4:	80 91 47 02 	lds	r24, 0x0247
    e5f8:	83 30       	cpi	r24, 0x03	; 3
    e5fa:	09 f4       	brne	.+2      	; 0xe5fe <FMenuAdminSettings+0xa>
    e5fc:	6e c0       	rjmp	.+220    	; 0xe6da <FMenuAdminSettings+0xe6>
    e5fe:	84 30       	cpi	r24, 0x04	; 4
    e600:	30 f4       	brcc	.+12     	; 0xe60e <FMenuAdminSettings+0x1a>
    e602:	81 30       	cpi	r24, 0x01	; 1
    e604:	e9 f1       	breq	.+122    	; 0xe680 <FMenuAdminSettings+0x8c>
    e606:	82 30       	cpi	r24, 0x02	; 2
    e608:	08 f0       	brcs	.+2      	; 0xe60c <FMenuAdminSettings+0x18>
    e60a:	64 c0       	rjmp	.+200    	; 0xe6d4 <FMenuAdminSettings+0xe0>
    e60c:	0d c0       	rjmp	.+26     	; 0xe628 <FMenuAdminSettings+0x34>
    e60e:	85 30       	cpi	r24, 0x05	; 5
    e610:	09 f4       	brne	.+2      	; 0xe614 <FMenuAdminSettings+0x20>
    e612:	66 c0       	rjmp	.+204    	; 0xe6e0 <FMenuAdminSettings+0xec>
    e614:	85 30       	cpi	r24, 0x05	; 5
    e616:	08 f4       	brcc	.+2      	; 0xe61a <FMenuAdminSettings+0x26>
    e618:	6a c0       	rjmp	.+212    	; 0xe6ee <FMenuAdminSettings+0xfa>
    e61a:	86 30       	cpi	r24, 0x06	; 6
    e61c:	09 f4       	brne	.+2      	; 0xe620 <FMenuAdminSettings+0x2c>
    e61e:	63 c0       	rjmp	.+198    	; 0xe6e6 <FMenuAdminSettings+0xf2>
    e620:	87 30       	cpi	r24, 0x07	; 7
    e622:	09 f0       	breq	.+2      	; 0xe626 <FMenuAdminSettings+0x32>
    e624:	6c c0       	rjmp	.+216    	; 0xe6fe <FMenuAdminSettings+0x10a>
    e626:	67 c0       	rjmp	.+206    	; 0xe6f6 <FMenuAdminSettings+0x102>
	 case asInitMenu:
          lcd_clear();
    e628:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
		  if (IFType==IT_SLAVE){
    e62c:	80 91 00 01 	lds	r24, 0x0100
    e630:	81 30       	cpi	r24, 0x01	; 1
    e632:	51 f4       	brne	.+20     	; 0xe648 <FMenuAdminSettings+0x54>
		      lcd_printf(1,1, PSTR("1)Header    4)Client"));
    e634:	61 e0       	ldi	r22, 0x01	; 1
    e636:	4d eb       	ldi	r20, 0xBD	; 189
    e638:	56 e1       	ldi	r21, 0x16	; 22
    e63a:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		      lcd_printf(2,1, PSTR("2)Footer    5)Server"));
    e63e:	82 e0       	ldi	r24, 0x02	; 2
    e640:	61 e0       	ldi	r22, 0x01	; 1
    e642:	48 ea       	ldi	r20, 0xA8	; 168
    e644:	56 e1       	ldi	r21, 0x16	; 22
    e646:	0c c0       	rjmp	.+24     	; 0xe660 <FMenuAdminSettings+0x6c>
		  }else
		  if (IFType==IT_STANDALONE){
    e648:	82 30       	cpi	r24, 0x02	; 2
    e64a:	61 f4       	brne	.+24     	; 0xe664 <FMenuAdminSettings+0x70>
		      lcd_printf(1,1, PSTR("1)Header            "));
    e64c:	81 e0       	ldi	r24, 0x01	; 1
    e64e:	61 e0       	ldi	r22, 0x01	; 1
    e650:	43 e9       	ldi	r20, 0x93	; 147
    e652:	56 e1       	ldi	r21, 0x16	; 22
    e654:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		      lcd_printf(2,1, PSTR("2)Footer            "));
    e658:	82 e0       	ldi	r24, 0x02	; 2
    e65a:	61 e0       	ldi	r22, 0x01	; 1
    e65c:	4e e7       	ldi	r20, 0x7E	; 126
    e65e:	56 e1       	ldi	r21, 0x16	; 22
    e660:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  }
		  lcd_printf(3,1, PSTR("3)Password          "));
    e664:	83 e0       	ldi	r24, 0x03	; 3
    e666:	61 e0       	ldi	r22, 0x01	; 1
    e668:	49 e6       	ldi	r20, 0x69	; 105
    e66a:	56 e1       	ldi	r21, 0x16	; 22
    e66c:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  lcd_printf(4,1, PSTR("*)Exit"));
    e670:	84 e0       	ldi	r24, 0x04	; 4
    e672:	61 e0       	ldi	r22, 0x01	; 1
    e674:	42 e6       	ldi	r20, 0x62	; 98
    e676:	56 e1       	ldi	r21, 0x16	; 22
    e678:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  stAdminSettings=asAdminSettingsOption;
    e67c:	81 e0       	ldi	r24, 0x01	; 1
    e67e:	27 c0       	rjmp	.+78     	; 0xe6ce <FMenuAdminSettings+0xda>
		  break;
     case asAdminSettingsOption:
	      KeyChar=_key_btn(_key_scan(1));
    e680:	81 e0       	ldi	r24, 0x01	; 1
    e682:	0e 94 58 a6 	call	0x14cb0	; 0x14cb0 <_key_scan>
    e686:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <_key_btn>
    e68a:	98 2f       	mov	r25, r24
		  switch(KeyChar){
    e68c:	82 33       	cpi	r24, 0x32	; 50
    e68e:	61 f0       	breq	.+24     	; 0xe6a8 <FMenuAdminSettings+0xb4>
    e690:	83 33       	cpi	r24, 0x33	; 51
    e692:	28 f4       	brcc	.+10     	; 0xe69e <FMenuAdminSettings+0xaa>
    e694:	8a 32       	cpi	r24, 0x2A	; 42
    e696:	61 f0       	breq	.+24     	; 0xe6b0 <FMenuAdminSettings+0xbc>
    e698:	81 33       	cpi	r24, 0x31	; 49
    e69a:	69 f4       	brne	.+26     	; 0xe6b6 <FMenuAdminSettings+0xc2>
    e69c:	03 c0       	rjmp	.+6      	; 0xe6a4 <FMenuAdminSettings+0xb0>
    e69e:	83 33       	cpi	r24, 0x33	; 51
    e6a0:	51 f4       	brne	.+20     	; 0xe6b6 <FMenuAdminSettings+0xc2>
    e6a2:	04 c0       	rjmp	.+8      	; 0xe6ac <FMenuAdminSettings+0xb8>
		  case '1':stAdminSettings=asAdminSettingHeader;
    e6a4:	82 e0       	ldi	r24, 0x02	; 2
    e6a6:	05 c0       	rjmp	.+10     	; 0xe6b2 <FMenuAdminSettings+0xbe>
		       break;
		  case '2':stAdminSettings=asAdminSettingFooter;
    e6a8:	83 e0       	ldi	r24, 0x03	; 3
    e6aa:	03 c0       	rjmp	.+6      	; 0xe6b2 <FMenuAdminSettings+0xbe>
		       break;
		  case '3':stAdminSettings=asAdminSettingPassword;
    e6ac:	84 e0       	ldi	r24, 0x04	; 4
    e6ae:	01 c0       	rjmp	.+2      	; 0xe6b2 <FMenuAdminSettings+0xbe>
		       break;
		  case '*':stAdminSettings=asExitAdminSetting;
    e6b0:	87 e0       	ldi	r24, 0x07	; 7
    e6b2:	80 93 47 02 	sts	0x0247, r24
		       break;			   
		  }
		  if (IFType==IT_SLAVE){
    e6b6:	80 91 00 01 	lds	r24, 0x0100
    e6ba:	81 30       	cpi	r24, 0x01	; 1
    e6bc:	01 f5       	brne	.+64     	; 0xe6fe <FMenuAdminSettings+0x10a>
			  switch(KeyChar){
    e6be:	94 33       	cpi	r25, 0x34	; 52
    e6c0:	19 f0       	breq	.+6      	; 0xe6c8 <FMenuAdminSettings+0xd4>
    e6c2:	95 33       	cpi	r25, 0x35	; 53
    e6c4:	e1 f4       	brne	.+56     	; 0xe6fe <FMenuAdminSettings+0x10a>
    e6c6:	02 c0       	rjmp	.+4      	; 0xe6cc <FMenuAdminSettings+0xd8>
			  case '4':stAdminSettings=asAdminSettingClientIP;
    e6c8:	85 e0       	ldi	r24, 0x05	; 5
    e6ca:	01 c0       	rjmp	.+2      	; 0xe6ce <FMenuAdminSettings+0xda>
				   break;
			  case '5':stAdminSettings=asAdminSettingServerIP;
    e6cc:	86 e0       	ldi	r24, 0x06	; 6
    e6ce:	80 93 47 02 	sts	0x0247, r24
    e6d2:	0f c0       	rjmp	.+30     	; 0xe6f2 <FMenuAdminSettings+0xfe>
				   break;
			  }
		  }
	      break;
	 case asAdminSettingHeader:
	      SubMenu=FMenuSettingHeader();
    e6d4:	0e 94 54 71 	call	0xe2a8	; 0xe2a8 <FMenuSettingHeader>
    e6d8:	08 c0       	rjmp	.+16     	; 0xe6ea <FMenuAdminSettings+0xf6>
	      if (SubMenu==MENU_DONE)stAdminSettings=asInitMenu;
	      break;
	 case asAdminSettingFooter:
	      SubMenu=FMenuSettingFooter();
    e6da:	0e 94 ae 6f 	call	0xdf5c	; 0xdf5c <FMenuSettingFooter>
    e6de:	05 c0       	rjmp	.+10     	; 0xe6ea <FMenuAdminSettings+0xf6>
	 case asAdminSettingPassword:
	      SubMenu=FMenuSettingPassword();
	      if (SubMenu==MENU_DONE)stAdminSettings=asInitMenu;	 
	      break;
     case asAdminSettingClientIP:
	      SubMenu=FMenuSettingClientIP();
    e6e0:	0e 94 33 59 	call	0xb266	; 0xb266 <FMenuSettingClientIP>
    e6e4:	02 c0       	rjmp	.+4      	; 0xe6ea <FMenuAdminSettings+0xf6>
	      if (SubMenu==MENU_DONE)stAdminSettings=asInitMenu;	 
	      break;
	 case asAdminSettingServerIP:
	      SubMenu=FMenuSettingServerIP();
    e6e6:	0e 94 ae 56 	call	0xad5c	; 0xad5c <FMenuSettingServerIP>
	      if (SubMenu==MENU_DONE)stAdminSettings=asInitMenu;	 
    e6ea:	81 30       	cpi	r24, 0x01	; 1
    e6ec:	41 f4       	brne	.+16     	; 0xe6fe <FMenuAdminSettings+0x10a>
    e6ee:	10 92 47 02 	sts	0x0247, r1
    e6f2:	80 e0       	ldi	r24, 0x00	; 0
    e6f4:	08 95       	ret
	      break;
     case asExitAdminSetting:
	      stAdminSettings=asInitMenu;
    e6f6:	10 92 47 02 	sts	0x0247, r1
    e6fa:	81 e0       	ldi	r24, 0x01	; 1
    e6fc:	08 95       	ret
    e6fe:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
	      break;
	 }
   return Result;
}
    e700:	08 95       	ret

0000e702 <FMenuMaster>:
     else Result=RC_INVALID;

   return Result;
}

char FMenuMaster(){ 
    e702:	cf 92       	push	r12
    e704:	df 92       	push	r13
    e706:	ef 92       	push	r14
    e708:	ff 92       	push	r15
    e70a:	0f 93       	push	r16
    e70c:	1f 93       	push	r17
    e70e:	df 93       	push	r29
    e710:	cf 93       	push	r28
    e712:	cd b7       	in	r28, 0x3d	; 61
    e714:	de b7       	in	r29, 0x3e	; 62
    e716:	e2 97       	sbiw	r28, 0x32	; 50
    e718:	0f b6       	in	r0, 0x3f	; 63
    e71a:	f8 94       	cli
    e71c:	de bf       	out	0x3e, r29	; 62
    e71e:	0f be       	out	0x3f, r0	; 63
    e720:	cd bf       	out	0x3d, r28	; 61
static char stMenuMaster=mmInitMaster;
     char KeyPressed,KeyChar,Result=MENU_NONE;
	 char uiResult,lcdteks[20],PTime[10],PDate[10],strNewPassword[10];
	 char strSend[20];

	 switch(stMenuMaster){
    e722:	80 91 4c 02 	lds	r24, 0x024C
    e726:	e8 2f       	mov	r30, r24
    e728:	f0 e0       	ldi	r31, 0x00	; 0
    e72a:	e9 31       	cpi	r30, 0x19	; 25
    e72c:	f1 05       	cpc	r31, r1
    e72e:	08 f0       	brcs	.+2      	; 0xe732 <FMenuMaster+0x30>
    e730:	dc c2       	rjmp	.+1464   	; 0xecea <FMenuMaster+0x5e8>
    e732:	ec 59       	subi	r30, 0x9C	; 156
    e734:	ff 4f       	sbci	r31, 0xFF	; 255
    e736:	ee 0f       	add	r30, r30
    e738:	ff 1f       	adc	r31, r31
    e73a:	05 90       	lpm	r0, Z+
    e73c:	f4 91       	lpm	r31, Z+
    e73e:	e0 2d       	mov	r30, r0
    e740:	09 94       	ijmp
	 case mmInitMaster:
	      lcd_clear();
    e742:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
		  lcd_printf(1,1,PSTR("-System Admin Level-"));
    e746:	81 e0       	ldi	r24, 0x01	; 1
    e748:	61 e0       	ldi	r22, 0x01	; 1
    e74a:	4f ee       	ldi	r20, 0xEF	; 239
    e74c:	59 e1       	ldi	r21, 0x19	; 25
    e74e:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  lcd_printf(2,1,PSTR("1.Restore Password  "));
    e752:	82 e0       	ldi	r24, 0x02	; 2
    e754:	61 e0       	ldi	r22, 0x01	; 1
    e756:	4a ed       	ldi	r20, 0xDA	; 218
    e758:	59 e1       	ldi	r21, 0x19	; 25
    e75a:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  lcd_printf(3,1,PSTR("2.Master Reset      "));
    e75e:	83 e0       	ldi	r24, 0x03	; 3
    e760:	61 e0       	ldi	r22, 0x01	; 1
    e762:	45 ec       	ldi	r20, 0xC5	; 197
    e764:	59 e1       	ldi	r21, 0x19	; 25
    e766:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  lcd_printf(4,1,PSTR("[*]Exit             "));
    e76a:	84 e0       	ldi	r24, 0x04	; 4
    e76c:	61 e0       	ldi	r22, 0x01	; 1
    e76e:	40 eb       	ldi	r20, 0xB0	; 176
    e770:	59 e1       	ldi	r21, 0x19	; 25
    e772:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>

		  //uart_printf(1,1,PSTR("-System Admin Level-"));

		  stMenuMaster=mmMasterSelect;
    e776:	81 e0       	ldi	r24, 0x01	; 1
    e778:	11 c0       	rjmp	.+34     	; 0xe79c <FMenuMaster+0x9a>
	      break;
     case mmMasterSelect:
	 	  KeyPressed=_key_scan(1);
    e77a:	81 e0       	ldi	r24, 0x01	; 1
    e77c:	0e 94 58 a6 	call	0x14cb0	; 0x14cb0 <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
    e780:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <_key_btn>
          switch(KeyChar){
    e784:	81 33       	cpi	r24, 0x31	; 49
    e786:	09 f4       	brne	.+2      	; 0xe78a <FMenuMaster+0x88>
    e788:	e0 c1       	rjmp	.+960    	; 0xeb4a <FMenuMaster+0x448>
    e78a:	82 33       	cpi	r24, 0x32	; 50
    e78c:	21 f0       	breq	.+8      	; 0xe796 <FMenuMaster+0x94>
    e78e:	8a 32       	cpi	r24, 0x2A	; 42
    e790:	09 f0       	breq	.+2      	; 0xe794 <FMenuMaster+0x92>
    e792:	ab c2       	rjmp	.+1366   	; 0xecea <FMenuMaster+0x5e8>
    e794:	02 c0       	rjmp	.+4      	; 0xe79a <FMenuMaster+0x98>
		  case '1':
               stMenuMaster=mmRestorePasswordMenu;
		       break;
		  case '2':
		       stMenuMaster=mmMasterReset;
    e796:	81 e1       	ldi	r24, 0x11	; 17
    e798:	01 c0       	rjmp	.+2      	; 0xe79c <FMenuMaster+0x9a>
		       break;
          case '*':
		       stMenuMaster=mmExitMaster;
    e79a:	80 e1       	ldi	r24, 0x10	; 16
    e79c:	80 93 4c 02 	sts	0x024C, r24
    e7a0:	a4 c2       	rjmp	.+1352   	; 0xecea <FMenuMaster+0x5e8>
		       break;
		  }
	      break;
     case mmMasterReset:
		  
	      _datetime(0, strSystemDate, strSystemTime);
    e7a2:	06 ef       	ldi	r16, 0xF6	; 246
    e7a4:	18 e0       	ldi	r17, 0x08	; 8
    e7a6:	80 e0       	ldi	r24, 0x00	; 0
    e7a8:	6c e3       	ldi	r22, 0x3C	; 60
    e7aa:	74 e0       	ldi	r23, 0x04	; 4
    e7ac:	a8 01       	movw	r20, r16
    e7ae:	0e 94 b9 a7 	call	0x14f72	; 0x14f72 <_datetime>
	      sprintf_P(PTime,PSTR("%s"),strSystemTime);
    e7b2:	00 d0       	rcall	.+0      	; 0xe7b4 <FMenuMaster+0xb2>
    e7b4:	00 d0       	rcall	.+0      	; 0xe7b6 <FMenuMaster+0xb4>
    e7b6:	00 d0       	rcall	.+0      	; 0xe7b8 <FMenuMaster+0xb6>
    e7b8:	ed b7       	in	r30, 0x3d	; 61
    e7ba:	fe b7       	in	r31, 0x3e	; 62
    e7bc:	31 96       	adiw	r30, 0x01	; 1
    e7be:	7e 01       	movw	r14, r28
    e7c0:	08 94       	sec
    e7c2:	e1 1c       	adc	r14, r1
    e7c4:	f1 1c       	adc	r15, r1
    e7c6:	ad b7       	in	r26, 0x3d	; 61
    e7c8:	be b7       	in	r27, 0x3e	; 62
    e7ca:	12 96       	adiw	r26, 0x02	; 2
    e7cc:	fc 92       	st	X, r15
    e7ce:	ee 92       	st	-X, r14
    e7d0:	11 97       	sbiw	r26, 0x01	; 1
    e7d2:	8d ea       	ldi	r24, 0xAD	; 173
    e7d4:	99 e1       	ldi	r25, 0x19	; 25
    e7d6:	93 83       	std	Z+3, r25	; 0x03
    e7d8:	82 83       	std	Z+2, r24	; 0x02
    e7da:	15 83       	std	Z+5, r17	; 0x05
    e7dc:	04 83       	std	Z+4, r16	; 0x04
    e7de:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
		  sprintf_P(strGeniusCode,PSTR("22345678"));		  
    e7e2:	0f 90       	pop	r0
    e7e4:	0f 90       	pop	r0
    e7e6:	74 e1       	ldi	r23, 0x14	; 20
    e7e8:	c7 2e       	mov	r12, r23
    e7ea:	76 e0       	ldi	r23, 0x06	; 6
    e7ec:	d7 2e       	mov	r13, r23
    e7ee:	ed b7       	in	r30, 0x3d	; 61
    e7f0:	fe b7       	in	r31, 0x3e	; 62
    e7f2:	d2 82       	std	Z+2, r13	; 0x02
    e7f4:	c1 82       	std	Z+1, r12	; 0x01
    e7f6:	84 ea       	ldi	r24, 0xA4	; 164
    e7f8:	99 e1       	ldi	r25, 0x19	; 25
    e7fa:	94 83       	std	Z+4, r25	; 0x04
    e7fc:	83 83       	std	Z+3, r24	; 0x03
    e7fe:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
		  RemoveChar(PTime,':');sprintf_P(strKeyStamp,PSTR(""));
    e802:	0f 90       	pop	r0
    e804:	0f 90       	pop	r0
    e806:	0f 90       	pop	r0
    e808:	0f 90       	pop	r0
    e80a:	c7 01       	movw	r24, r14
    e80c:	6a e3       	ldi	r22, 0x3A	; 58
    e80e:	0e 94 96 30 	call	0x612c	; 0x612c <RemoveChar>
    e812:	00 d0       	rcall	.+0      	; 0xe814 <FMenuMaster+0x112>
    e814:	00 d0       	rcall	.+0      	; 0xe816 <FMenuMaster+0x114>
    e816:	02 e5       	ldi	r16, 0x52	; 82
    e818:	18 e0       	ldi	r17, 0x08	; 8
    e81a:	ad b7       	in	r26, 0x3d	; 61
    e81c:	be b7       	in	r27, 0x3e	; 62
    e81e:	12 96       	adiw	r26, 0x02	; 2
    e820:	1c 93       	st	X, r17
    e822:	0e 93       	st	-X, r16
    e824:	11 97       	sbiw	r26, 0x01	; 1
    e826:	83 ea       	ldi	r24, 0xA3	; 163
    e828:	99 e1       	ldi	r25, 0x19	; 25
    e82a:	14 96       	adiw	r26, 0x04	; 4
    e82c:	9c 93       	st	X, r25
    e82e:	8e 93       	st	-X, r24
    e830:	13 97       	sbiw	r26, 0x03	; 3
    e832:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
		  GenerateKeyStamp(PTime,strGeniusCode,strKeyStamp);
    e836:	0f 90       	pop	r0
    e838:	0f 90       	pop	r0
    e83a:	0f 90       	pop	r0
    e83c:	0f 90       	pop	r0
    e83e:	c7 01       	movw	r24, r14
    e840:	b6 01       	movw	r22, r12
    e842:	a8 01       	movw	r20, r16
    e844:	0e 94 57 31 	call	0x62ae	; 0x62ae <GenerateKeyStamp>

		  lcd_clear();
    e848:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
		  lcd_printf(1,1,PSTR("-Master Reset-"));
    e84c:	81 e0       	ldi	r24, 0x01	; 1
    e84e:	61 e0       	ldi	r22, 0x01	; 1
    e850:	44 e9       	ldi	r20, 0x94	; 148
    e852:	59 e1       	ldi	r21, 0x19	; 25
    e854:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  sprintf_P(lcdteks,PSTR("Seed Code:%s"),strKeyStamp);
    e858:	00 d0       	rcall	.+0      	; 0xe85a <FMenuMaster+0x158>
    e85a:	00 d0       	rcall	.+0      	; 0xe85c <FMenuMaster+0x15a>
    e85c:	00 d0       	rcall	.+0      	; 0xe85e <FMenuMaster+0x15c>
    e85e:	ed b7       	in	r30, 0x3d	; 61
    e860:	fe b7       	in	r31, 0x3e	; 62
    e862:	31 96       	adiw	r30, 0x01	; 1
    e864:	6f e1       	ldi	r22, 0x1F	; 31
    e866:	e6 2e       	mov	r14, r22
    e868:	f1 2c       	mov	r15, r1
    e86a:	ec 0e       	add	r14, r28
    e86c:	fd 1e       	adc	r15, r29
    e86e:	ad b7       	in	r26, 0x3d	; 61
    e870:	be b7       	in	r27, 0x3e	; 62
    e872:	12 96       	adiw	r26, 0x02	; 2
    e874:	fc 92       	st	X, r15
    e876:	ee 92       	st	-X, r14
    e878:	11 97       	sbiw	r26, 0x01	; 1
    e87a:	87 e8       	ldi	r24, 0x87	; 135
    e87c:	99 e1       	ldi	r25, 0x19	; 25
    e87e:	93 83       	std	Z+3, r25	; 0x03
    e880:	82 83       	std	Z+2, r24	; 0x02
    e882:	15 83       	std	Z+5, r17	; 0x05
    e884:	04 83       	std	Z+4, r16	; 0x04
    e886:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
		  lcd_print(2,1,lcdteks);
    e88a:	ed b7       	in	r30, 0x3d	; 61
    e88c:	fe b7       	in	r31, 0x3e	; 62
    e88e:	36 96       	adiw	r30, 0x06	; 6
    e890:	0f b6       	in	r0, 0x3f	; 63
    e892:	f8 94       	cli
    e894:	fe bf       	out	0x3e, r31	; 62
    e896:	0f be       	out	0x3f, r0	; 63
    e898:	ed bf       	out	0x3d, r30	; 61
    e89a:	82 e0       	ldi	r24, 0x02	; 2
    e89c:	61 e0       	ldi	r22, 0x01	; 1
    e89e:	a7 01       	movw	r20, r14
    e8a0:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
		  lcd_printf(3,1,   PSTR("ResetCode:_         "));
    e8a4:	83 e0       	ldi	r24, 0x03	; 3
    e8a6:	61 e0       	ldi	r22, 0x01	; 1
    e8a8:	42 e7       	ldi	r20, 0x72	; 114
    e8aa:	59 e1       	ldi	r21, 0x19	; 25
    e8ac:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  lcd_printf(4,1,   PSTR("[*]Cancel   [#]Enter"));		          
    e8b0:	84 e0       	ldi	r24, 0x04	; 4
    e8b2:	61 e0       	ldi	r22, 0x01	; 1
    e8b4:	4d e5       	ldi	r20, 0x5D	; 93
    e8b6:	59 e1       	ldi	r21, 0x19	; 25
    e8b8:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
	      stMenuMaster=mmResetCodeEntry;
    e8bc:	82 e1       	ldi	r24, 0x12	; 18
    e8be:	6e cf       	rjmp	.-292    	; 0xe79c <FMenuMaster+0x9a>
	      break;
     case mmResetCodeEntry:
          uiResult=UserInput(UI_NUMBER_R,3,11,strRestoreCode,0,9);
    e8c0:	81 e0       	ldi	r24, 0x01	; 1
    e8c2:	63 e0       	ldi	r22, 0x03	; 3
    e8c4:	4b e0       	ldi	r20, 0x0B	; 11
    e8c6:	2d ed       	ldi	r18, 0xDD	; 221
    e8c8:	3c e0       	ldi	r19, 0x0C	; 12
    e8ca:	00 e0       	ldi	r16, 0x00	; 0
    e8cc:	10 e0       	ldi	r17, 0x00	; 0
    e8ce:	59 e0       	ldi	r21, 0x09	; 9
    e8d0:	e5 2e       	mov	r14, r21
    e8d2:	0e 94 a9 67 	call	0xcf52	; 0xcf52 <UserInput>
		  switch(uiResult){
    e8d6:	83 30       	cpi	r24, 0x03	; 3
    e8d8:	49 f0       	breq	.+18     	; 0xe8ec <FMenuMaster+0x1ea>
    e8da:	84 30       	cpi	r24, 0x04	; 4
    e8dc:	08 f4       	brcc	.+2      	; 0xe8e0 <FMenuMaster+0x1de>
    e8de:	82 c1       	rjmp	.+772    	; 0xebe4 <FMenuMaster+0x4e2>
    e8e0:	84 30       	cpi	r24, 0x04	; 4
    e8e2:	31 f0       	breq	.+12     	; 0xe8f0 <FMenuMaster+0x1ee>
    e8e4:	85 30       	cpi	r24, 0x05	; 5
    e8e6:	09 f0       	breq	.+2      	; 0xe8ea <FMenuMaster+0x1e8>
    e8e8:	00 c2       	rjmp	.+1024   	; 0xecea <FMenuMaster+0x5e8>
    e8ea:	07 c0       	rjmp	.+14     	; 0xe8fa <FMenuMaster+0x1f8>
		  case USER_OK:
               stMenuMaster=mmIsValidResetCode;
    e8ec:	83 e1       	ldi	r24, 0x13	; 19
    e8ee:	56 cf       	rjmp	.-340    	; 0xe79c <FMenuMaster+0x9a>
		       break;
          case USER_CANCEL:
		       stMenuMaster=mmExitMaster;
		       break;
		  case USER_ENTRY:
		       lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
    e8f0:	84 e0       	ldi	r24, 0x04	; 4
    e8f2:	61 e0       	ldi	r22, 0x01	; 1
    e8f4:	48 e4       	ldi	r20, 0x48	; 72
    e8f6:	59 e1       	ldi	r21, 0x19	; 25
    e8f8:	8a c1       	rjmp	.+788    	; 0xec0e <FMenuMaster+0x50c>
		       break;
          case USER_NO_DATA:
		       lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    e8fa:	84 e0       	ldi	r24, 0x04	; 4
    e8fc:	61 e0       	ldi	r22, 0x01	; 1
    e8fe:	43 e3       	ldi	r20, 0x33	; 51
    e900:	59 e1       	ldi	r21, 0x19	; 25
    e902:	85 c1       	rjmp	.+778    	; 0xec0e <FMenuMaster+0x50c>
		       break;
		  }	      
	      break;
     case mmIsValidResetCode:
	      if (ValidateRestoreCode(strKeyStamp,strRestoreCode)==RC_VALID){
    e904:	82 e5       	ldi	r24, 0x52	; 82
    e906:	98 e0       	ldi	r25, 0x08	; 8
    e908:	6d ed       	ldi	r22, 0xDD	; 221
    e90a:	7c e0       	ldi	r23, 0x0C	; 12
    e90c:	0e 94 68 47 	call	0x8ed0	; 0x8ed0 <ValidateRestoreCode>
    e910:	81 30       	cpi	r24, 0x01	; 1
    e912:	11 f4       	brne	.+4      	; 0xe918 <FMenuMaster+0x216>
		      stMenuMaster=mmMasterResetExec;
    e914:	84 e1       	ldi	r24, 0x14	; 20
    e916:	42 cf       	rjmp	.-380    	; 0xe79c <FMenuMaster+0x9a>
		  }else stMenuMaster=mmDisplayInvalidResetCode;
    e918:	86 e1       	ldi	r24, 0x16	; 22
    e91a:	40 cf       	rjmp	.-384    	; 0xe79c <FMenuMaster+0x9a>
	      break;
     case mmMasterResetExec:
	      lcd_clear();
    e91c:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
	      lcd_printf(1,1,PSTR("Reset EEPROM"));
    e920:	81 e0       	ldi	r24, 0x01	; 1
    e922:	61 e0       	ldi	r22, 0x01	; 1
    e924:	46 e2       	ldi	r20, 0x26	; 38
    e926:	59 e1       	ldi	r21, 0x19	; 25
    e928:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
	      lcd_printf(2,1,PSTR("Please Wait.."));
    e92c:	82 e0       	ldi	r24, 0x02	; 2
    e92e:	61 e0       	ldi	r22, 0x01	; 1
    e930:	48 e1       	ldi	r20, 0x18	; 24
    e932:	59 e1       	ldi	r21, 0x19	; 25
    e934:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
	      MasterReset();
    e938:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <MasterReset>
          stMenuMaster=mmSuccesfullReset;
    e93c:	85 e1       	ldi	r24, 0x15	; 21
    e93e:	2e cf       	rjmp	.-420    	; 0xe79c <FMenuMaster+0x9a>
	      break;
     case mmSuccesfullReset:
	      lcd_clear();
    e940:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    e944:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    e946:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    e948:	81 e0       	ldi	r24, 0x01	; 1
    e94a:	80 93 bc 01 	sts	0x01BC, r24
          stMenuMaster=mmSuccesfullReset;
	      break;
     case mmSuccesfullReset:
	      lcd_clear();
		  system_beep(1);
	      lcd_printf(2,1,PSTR("Reset Complete"));
    e94e:	82 e0       	ldi	r24, 0x02	; 2
    e950:	61 e0       	ldi	r22, 0x01	; 1
    e952:	49 e0       	ldi	r20, 0x09	; 9
    e954:	59 e1       	ldi	r21, 0x19	; 25
    e956:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
	      TimDisplay=0; 
    e95a:	10 92 92 01 	sts	0x0192, r1
		  stMenuMaster=mmDelayDisplayComplete;
    e95e:	88 e1       	ldi	r24, 0x18	; 24
    e960:	1d cf       	rjmp	.-454    	; 0xe79c <FMenuMaster+0x9a>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    e962:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    e964:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    e966:	81 e0       	ldi	r24, 0x01	; 1
    e968:	80 93 bc 01 	sts	0x01BC, r24
	      TimDisplay=0; 
		  stMenuMaster=mmDelayDisplayComplete;
	      break;
     case mmDisplayInvalidResetCode:
          system_beep(1);
          lcd_printf(3,1,PSTR("Invalid Code        "));
    e96c:	83 e0       	ldi	r24, 0x03	; 3
    e96e:	61 e0       	ldi	r22, 0x01	; 1
    e970:	44 ef       	ldi	r20, 0xF4	; 244
    e972:	58 e1       	ldi	r21, 0x18	; 24
    e974:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
          TimDisplay=0; 
    e978:	10 92 92 01 	sts	0x0192, r1
		  stMenuMaster=mmDelayDisplayInvalidResetCode;
    e97c:	87 e1       	ldi	r24, 0x17	; 23
    e97e:	0e cf       	rjmp	.-484    	; 0xe79c <FMenuMaster+0x9a>
     case mmDelayDisplayInvalidResetCode:
          if (TimDisplay>5)stMenuMaster=mmExitMaster;
	      break;
     
	 case mmDelayDisplayComplete:
          if (TimDisplay>5)stMenuMaster=mmExitMaster;
    e980:	80 91 92 01 	lds	r24, 0x0192
    e984:	86 30       	cpi	r24, 0x06	; 6
    e986:	08 f4       	brcc	.+2      	; 0xe98a <FMenuMaster+0x288>
    e988:	b0 c1       	rjmp	.+864    	; 0xecea <FMenuMaster+0x5e8>
    e98a:	07 cf       	rjmp	.-498    	; 0xe79a <FMenuMaster+0x98>
	      break;

     case mmRestorePasswordMenu:	      
	      lcd_clear();
    e98c:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
		  lcd_printf(1,1,PSTR("Enter GeNiUs Code   "));
    e990:	81 e0       	ldi	r24, 0x01	; 1
    e992:	61 e0       	ldi	r22, 0x01	; 1
    e994:	4f ed       	ldi	r20, 0xDF	; 223
    e996:	58 e1       	ldi	r21, 0x18	; 24
    e998:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  lcd_printf(2,1,PSTR("_                   "));
    e99c:	82 e0       	ldi	r24, 0x02	; 2
    e99e:	61 e0       	ldi	r22, 0x01	; 1
    e9a0:	4a ec       	ldi	r20, 0xCA	; 202
    e9a2:	58 e1       	ldi	r21, 0x18	; 24
    e9a4:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  lcd_printf(4,4,PSTR("[*]Cancel   [#]Enter"));
    e9a8:	84 e0       	ldi	r24, 0x04	; 4
    e9aa:	64 e0       	ldi	r22, 0x04	; 4
    e9ac:	45 eb       	ldi	r20, 0xB5	; 181
    e9ae:	58 e1       	ldi	r21, 0x18	; 24
    e9b0:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  sprintf_P(strGeniusCode,PSTR(""));
    e9b4:	00 d0       	rcall	.+0      	; 0xe9b6 <FMenuMaster+0x2b4>
    e9b6:	00 d0       	rcall	.+0      	; 0xe9b8 <FMenuMaster+0x2b6>
    e9b8:	84 e1       	ldi	r24, 0x14	; 20
    e9ba:	96 e0       	ldi	r25, 0x06	; 6
    e9bc:	ad b7       	in	r26, 0x3d	; 61
    e9be:	be b7       	in	r27, 0x3e	; 62
    e9c0:	12 96       	adiw	r26, 0x02	; 2
    e9c2:	9c 93       	st	X, r25
    e9c4:	8e 93       	st	-X, r24
    e9c6:	11 97       	sbiw	r26, 0x01	; 1
    e9c8:	84 eb       	ldi	r24, 0xB4	; 180
    e9ca:	98 e1       	ldi	r25, 0x18	; 24
    e9cc:	14 96       	adiw	r26, 0x04	; 4
    e9ce:	9c 93       	st	X, r25
    e9d0:	8e 93       	st	-X, r24
    e9d2:	13 97       	sbiw	r26, 0x03	; 3
    e9d4:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
          stMenuMaster=mmGeniusCodeEntry;
    e9d8:	83 e0       	ldi	r24, 0x03	; 3
    e9da:	80 93 4c 02 	sts	0x024C, r24
    e9de:	80 e0       	ldi	r24, 0x00	; 0
    e9e0:	0f 90       	pop	r0
    e9e2:	0f 90       	pop	r0
    e9e4:	0f 90       	pop	r0
    e9e6:	0f 90       	pop	r0
    e9e8:	81 c1       	rjmp	.+770    	; 0xecec <FMenuMaster+0x5ea>
	      break;
     case mmGeniusCodeEntry:
	 	  uiResult=UserInput(UI_NUMBER_R,2,1,strGeniusCode,0,10);
    e9ea:	81 e0       	ldi	r24, 0x01	; 1
    e9ec:	62 e0       	ldi	r22, 0x02	; 2
    e9ee:	41 e0       	ldi	r20, 0x01	; 1
    e9f0:	24 e1       	ldi	r18, 0x14	; 20
    e9f2:	36 e0       	ldi	r19, 0x06	; 6
    e9f4:	00 e0       	ldi	r16, 0x00	; 0
    e9f6:	10 e0       	ldi	r17, 0x00	; 0
    e9f8:	9a e0       	ldi	r25, 0x0A	; 10
    e9fa:	e9 2e       	mov	r14, r25
    e9fc:	0e 94 a9 67 	call	0xcf52	; 0xcf52 <UserInput>
		  switch(uiResult){
    ea00:	83 30       	cpi	r24, 0x03	; 3
    ea02:	49 f0       	breq	.+18     	; 0xea16 <FMenuMaster+0x314>
    ea04:	84 30       	cpi	r24, 0x04	; 4
    ea06:	08 f4       	brcc	.+2      	; 0xea0a <FMenuMaster+0x308>
    ea08:	ed c0       	rjmp	.+474    	; 0xebe4 <FMenuMaster+0x4e2>
    ea0a:	84 30       	cpi	r24, 0x04	; 4
    ea0c:	69 f0       	breq	.+26     	; 0xea28 <FMenuMaster+0x326>
    ea0e:	85 30       	cpi	r24, 0x05	; 5
    ea10:	09 f0       	breq	.+2      	; 0xea14 <FMenuMaster+0x312>
    ea12:	6b c1       	rjmp	.+726    	; 0xecea <FMenuMaster+0x5e8>
    ea14:	0e c0       	rjmp	.+28     	; 0xea32 <FMenuMaster+0x330>
		  case USER_OK:               
			   //uart_printf(1,0,PSTR("GeniusCode: "));
			   //uart_print(1,1,strGeniusCode);
		       _datetime(0, strSystemDate, strSystemTime);
    ea16:	80 e0       	ldi	r24, 0x00	; 0
    ea18:	6c e3       	ldi	r22, 0x3C	; 60
    ea1a:	74 e0       	ldi	r23, 0x04	; 4
    ea1c:	46 ef       	ldi	r20, 0xF6	; 246
    ea1e:	58 e0       	ldi	r21, 0x08	; 8
    ea20:	0e 94 b9 a7 	call	0x14f72	; 0x14f72 <_datetime>
               stMenuMaster=mmIsValidGeniusCode;
    ea24:	84 e0       	ldi	r24, 0x04	; 4
    ea26:	ba ce       	rjmp	.-652    	; 0xe79c <FMenuMaster+0x9a>
		       break;
          case USER_CANCEL:
		       stMenuMaster=mmExitMaster;
		       break;
		  case USER_ENTRY:
		       lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
    ea28:	84 e0       	ldi	r24, 0x04	; 4
    ea2a:	61 e0       	ldi	r22, 0x01	; 1
    ea2c:	4f e9       	ldi	r20, 0x9F	; 159
    ea2e:	58 e1       	ldi	r21, 0x18	; 24
    ea30:	ee c0       	rjmp	.+476    	; 0xec0e <FMenuMaster+0x50c>
		       break;
          case USER_NO_DATA:
		       lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    ea32:	84 e0       	ldi	r24, 0x04	; 4
    ea34:	61 e0       	ldi	r22, 0x01	; 1
    ea36:	4a e8       	ldi	r20, 0x8A	; 138
    ea38:	58 e1       	ldi	r21, 0x18	; 24
    ea3a:	e9 c0       	rjmp	.+466    	; 0xec0e <FMenuMaster+0x50c>
		       break;
		  }
	      break;
     case mmIsValidGeniusCode:
	      //GetDate
		      sprintf_P(PDate,PSTR("%s"),strSystemDate);
    ea3c:	00 d0       	rcall	.+0      	; 0xea3e <FMenuMaster+0x33c>
    ea3e:	00 d0       	rcall	.+0      	; 0xea40 <FMenuMaster+0x33e>
    ea40:	00 d0       	rcall	.+0      	; 0xea42 <FMenuMaster+0x340>
    ea42:	ed b7       	in	r30, 0x3d	; 61
    ea44:	fe b7       	in	r31, 0x3e	; 62
    ea46:	31 96       	adiw	r30, 0x01	; 1
    ea48:	8e 01       	movw	r16, r28
    ea4a:	05 5f       	subi	r16, 0xF5	; 245
    ea4c:	1f 4f       	sbci	r17, 0xFF	; 255
    ea4e:	ad b7       	in	r26, 0x3d	; 61
    ea50:	be b7       	in	r27, 0x3e	; 62
    ea52:	12 96       	adiw	r26, 0x02	; 2
    ea54:	1c 93       	st	X, r17
    ea56:	0e 93       	st	-X, r16
    ea58:	11 97       	sbiw	r26, 0x01	; 1
    ea5a:	87 e8       	ldi	r24, 0x87	; 135
    ea5c:	98 e1       	ldi	r25, 0x18	; 24
    ea5e:	93 83       	std	Z+3, r25	; 0x03
    ea60:	82 83       	std	Z+2, r24	; 0x02
    ea62:	8c e3       	ldi	r24, 0x3C	; 60
    ea64:	94 e0       	ldi	r25, 0x04	; 4
    ea66:	95 83       	std	Z+5, r25	; 0x05
    ea68:	84 83       	std	Z+4, r24	; 0x04
    ea6a:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
			  RemoveChar(PDate,'/');
    ea6e:	ed b7       	in	r30, 0x3d	; 61
    ea70:	fe b7       	in	r31, 0x3e	; 62
    ea72:	36 96       	adiw	r30, 0x06	; 6
    ea74:	0f b6       	in	r0, 0x3f	; 63
    ea76:	f8 94       	cli
    ea78:	fe bf       	out	0x3e, r31	; 62
    ea7a:	0f be       	out	0x3f, r0	; 63
    ea7c:	ed bf       	out	0x3d, r30	; 61
    ea7e:	c8 01       	movw	r24, r16
    ea80:	6f e2       	ldi	r22, 0x2F	; 47
    ea82:	0e 94 96 30 	call	0x612c	; 0x612c <RemoveChar>
		  if (ValidateGeniusCode(PDate,strGeniusCode)==GC_VALID){
    ea86:	c8 01       	movw	r24, r16
    ea88:	64 e1       	ldi	r22, 0x14	; 20
    ea8a:	76 e0       	ldi	r23, 0x06	; 6
    ea8c:	0e 94 8a 47 	call	0x8f14	; 0x8f14 <ValidateGeniusCode>
    ea90:	81 30       	cpi	r24, 0x01	; 1
    ea92:	09 f0       	breq	.+2      	; 0xea96 <FMenuMaster+0x394>
    ea94:	44 c0       	rjmp	.+136    	; 0xeb1e <FMenuMaster+0x41c>

		  	  sprintf_P(PTime,PSTR("%s"),strSystemTime);
    ea96:	00 d0       	rcall	.+0      	; 0xea98 <FMenuMaster+0x396>
    ea98:	00 d0       	rcall	.+0      	; 0xea9a <FMenuMaster+0x398>
    ea9a:	00 d0       	rcall	.+0      	; 0xea9c <FMenuMaster+0x39a>
    ea9c:	ed b7       	in	r30, 0x3d	; 61
    ea9e:	fe b7       	in	r31, 0x3e	; 62
    eaa0:	31 96       	adiw	r30, 0x01	; 1
    eaa2:	8e 01       	movw	r16, r28
    eaa4:	0f 5f       	subi	r16, 0xFF	; 255
    eaa6:	1f 4f       	sbci	r17, 0xFF	; 255
    eaa8:	ad b7       	in	r26, 0x3d	; 61
    eaaa:	be b7       	in	r27, 0x3e	; 62
    eaac:	12 96       	adiw	r26, 0x02	; 2
    eaae:	1c 93       	st	X, r17
    eab0:	0e 93       	st	-X, r16
    eab2:	11 97       	sbiw	r26, 0x01	; 1
    eab4:	84 e8       	ldi	r24, 0x84	; 132
    eab6:	98 e1       	ldi	r25, 0x18	; 24
    eab8:	93 83       	std	Z+3, r25	; 0x03
    eaba:	82 83       	std	Z+2, r24	; 0x02
    eabc:	86 ef       	ldi	r24, 0xF6	; 246
    eabe:	98 e0       	ldi	r25, 0x08	; 8
    eac0:	95 83       	std	Z+5, r25	; 0x05
    eac2:	84 83       	std	Z+4, r24	; 0x04
    eac4:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
			  RemoveChar(PTime,':');sprintf_P(strKeyStamp,PSTR(""));
    eac8:	ed b7       	in	r30, 0x3d	; 61
    eaca:	fe b7       	in	r31, 0x3e	; 62
    eacc:	36 96       	adiw	r30, 0x06	; 6
    eace:	0f b6       	in	r0, 0x3f	; 63
    ead0:	f8 94       	cli
    ead2:	fe bf       	out	0x3e, r31	; 62
    ead4:	0f be       	out	0x3f, r0	; 63
    ead6:	ed bf       	out	0x3d, r30	; 61
    ead8:	c8 01       	movw	r24, r16
    eada:	6a e3       	ldi	r22, 0x3A	; 58
    eadc:	0e 94 96 30 	call	0x612c	; 0x612c <RemoveChar>
    eae0:	00 d0       	rcall	.+0      	; 0xeae2 <FMenuMaster+0x3e0>
    eae2:	00 d0       	rcall	.+0      	; 0xeae4 <FMenuMaster+0x3e2>
    eae4:	b2 e5       	ldi	r27, 0x52	; 82
    eae6:	eb 2e       	mov	r14, r27
    eae8:	b8 e0       	ldi	r27, 0x08	; 8
    eaea:	fb 2e       	mov	r15, r27
    eaec:	ad b7       	in	r26, 0x3d	; 61
    eaee:	be b7       	in	r27, 0x3e	; 62
    eaf0:	12 96       	adiw	r26, 0x02	; 2
    eaf2:	fc 92       	st	X, r15
    eaf4:	ee 92       	st	-X, r14
    eaf6:	11 97       	sbiw	r26, 0x01	; 1
    eaf8:	83 e8       	ldi	r24, 0x83	; 131
    eafa:	98 e1       	ldi	r25, 0x18	; 24
    eafc:	14 96       	adiw	r26, 0x04	; 4
    eafe:	9c 93       	st	X, r25
    eb00:	8e 93       	st	-X, r24
    eb02:	13 97       	sbiw	r26, 0x03	; 3
    eb04:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>

              //sprintf_P(strSend,PSTR("Time:%s"),PTime);
			  // uart_print(1,1,strSend);

		      GenerateKeyStamp(PTime,strGeniusCode,strKeyStamp);			  
    eb08:	0f 90       	pop	r0
    eb0a:	0f 90       	pop	r0
    eb0c:	0f 90       	pop	r0
    eb0e:	0f 90       	pop	r0
    eb10:	c8 01       	movw	r24, r16
    eb12:	64 e1       	ldi	r22, 0x14	; 20
    eb14:	76 e0       	ldi	r23, 0x06	; 6
    eb16:	a7 01       	movw	r20, r14
    eb18:	0e 94 57 31 	call	0x62ae	; 0x62ae <GenerateKeyStamp>
    eb1c:	cc c0       	rjmp	.+408    	; 0xecb6 <FMenuMaster+0x5b4>
			  stMenuMaster=mmDisplayKeyStamp;
		  }else stMenuMaster=mmDisplayInvalidCode;
    eb1e:	85 e0       	ldi	r24, 0x05	; 5
    eb20:	3d ce       	rjmp	.-902    	; 0xe79c <FMenuMaster+0x9a>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    eb22:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    eb24:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    eb26:	81 e0       	ldi	r24, 0x01	; 1
    eb28:	80 93 bc 01 	sts	0x01BC, r24
			  stMenuMaster=mmDisplayKeyStamp;
		  }else stMenuMaster=mmDisplayInvalidCode;
	      break;
     case mmDisplayInvalidCode:
	      system_beep(1);
          lcd_printf(3,1,PSTR("Invalid Code        "));
    eb2c:	83 e0       	ldi	r24, 0x03	; 3
    eb2e:	61 e0       	ldi	r22, 0x01	; 1
    eb30:	4e e6       	ldi	r20, 0x6E	; 110
    eb32:	58 e1       	ldi	r21, 0x18	; 24
    eb34:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
          TimDisplay=0; 
    eb38:	10 92 92 01 	sts	0x0192, r1
		  stMenuMaster=mmDelayDisplayInvalidCode;
    eb3c:	86 e0       	ldi	r24, 0x06	; 6
    eb3e:	2e ce       	rjmp	.-932    	; 0xe79c <FMenuMaster+0x9a>
	      break;

     case mmDelayDisplayInvalidCode:
	      if (TimDisplay>5)stMenuMaster=mmRestorePasswordMenu;
    eb40:	80 91 92 01 	lds	r24, 0x0192
    eb44:	86 30       	cpi	r24, 0x06	; 6
    eb46:	08 f4       	brcc	.+2      	; 0xeb4a <FMenuMaster+0x448>
    eb48:	d0 c0       	rjmp	.+416    	; 0xecea <FMenuMaster+0x5e8>
    eb4a:	82 e0       	ldi	r24, 0x02	; 2
    eb4c:	27 ce       	rjmp	.-946    	; 0xe79c <FMenuMaster+0x9a>
	      break;
     case mmDisplayKeyStamp:
	      lcd_clear();
    eb4e:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
		  sprintf_P(lcdteks,PSTR("Key Stamp:%s "),strKeyStamp);
    eb52:	00 d0       	rcall	.+0      	; 0xeb54 <FMenuMaster+0x452>
    eb54:	00 d0       	rcall	.+0      	; 0xeb56 <FMenuMaster+0x454>
    eb56:	00 d0       	rcall	.+0      	; 0xeb58 <FMenuMaster+0x456>
    eb58:	ed b7       	in	r30, 0x3d	; 61
    eb5a:	fe b7       	in	r31, 0x3e	; 62
    eb5c:	31 96       	adiw	r30, 0x01	; 1
    eb5e:	8e 01       	movw	r16, r28
    eb60:	01 5e       	subi	r16, 0xE1	; 225
    eb62:	1f 4f       	sbci	r17, 0xFF	; 255
    eb64:	ad b7       	in	r26, 0x3d	; 61
    eb66:	be b7       	in	r27, 0x3e	; 62
    eb68:	12 96       	adiw	r26, 0x02	; 2
    eb6a:	1c 93       	st	X, r17
    eb6c:	0e 93       	st	-X, r16
    eb6e:	11 97       	sbiw	r26, 0x01	; 1
    eb70:	80 e6       	ldi	r24, 0x60	; 96
    eb72:	98 e1       	ldi	r25, 0x18	; 24
    eb74:	93 83       	std	Z+3, r25	; 0x03
    eb76:	82 83       	std	Z+2, r24	; 0x02
    eb78:	82 e5       	ldi	r24, 0x52	; 82
    eb7a:	98 e0       	ldi	r25, 0x08	; 8
    eb7c:	95 83       	std	Z+5, r25	; 0x05
    eb7e:	84 83       	std	Z+4, r24	; 0x04
    eb80:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
		  lcd_print(1,1,lcdteks);
    eb84:	ed b7       	in	r30, 0x3d	; 61
    eb86:	fe b7       	in	r31, 0x3e	; 62
    eb88:	36 96       	adiw	r30, 0x06	; 6
    eb8a:	0f b6       	in	r0, 0x3f	; 63
    eb8c:	f8 94       	cli
    eb8e:	fe bf       	out	0x3e, r31	; 62
    eb90:	0f be       	out	0x3f, r0	; 63
    eb92:	ed bf       	out	0x3d, r30	; 61
    eb94:	81 e0       	ldi	r24, 0x01	; 1
    eb96:	61 e0       	ldi	r22, 0x01	; 1
    eb98:	a8 01       	movw	r20, r16
    eb9a:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
		  lcd_printf(2,1,PSTR("Enter Restore Code  "));
    eb9e:	82 e0       	ldi	r24, 0x02	; 2
    eba0:	61 e0       	ldi	r22, 0x01	; 1
    eba2:	4b e4       	ldi	r20, 0x4B	; 75
    eba4:	58 e1       	ldi	r21, 0x18	; 24
    eba6:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  lcd_printf(3,1,PSTR("_                   "));
    ebaa:	83 e0       	ldi	r24, 0x03	; 3
    ebac:	61 e0       	ldi	r22, 0x01	; 1
    ebae:	46 e3       	ldi	r20, 0x36	; 54
    ebb0:	58 e1       	ldi	r21, 0x18	; 24
    ebb2:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    ebb6:	84 e0       	ldi	r24, 0x04	; 4
    ebb8:	61 e0       	ldi	r22, 0x01	; 1
    ebba:	41 e2       	ldi	r20, 0x21	; 33
    ebbc:	58 e1       	ldi	r21, 0x18	; 24
    ebbe:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
          stMenuMaster=mmRestoreCodeEntry;
    ebc2:	88 e0       	ldi	r24, 0x08	; 8
    ebc4:	eb cd       	rjmp	.-1066   	; 0xe79c <FMenuMaster+0x9a>
	      break;
     case mmRestoreCodeEntry:
	 	  uiResult=UserInput(UI_NUMBER_R,3,1,strRestoreCode,0,10);
    ebc6:	81 e0       	ldi	r24, 0x01	; 1
    ebc8:	63 e0       	ldi	r22, 0x03	; 3
    ebca:	41 e0       	ldi	r20, 0x01	; 1
    ebcc:	2d ed       	ldi	r18, 0xDD	; 221
    ebce:	3c e0       	ldi	r19, 0x0C	; 12
    ebd0:	00 e0       	ldi	r16, 0x00	; 0
    ebd2:	10 e0       	ldi	r17, 0x00	; 0
    ebd4:	aa e0       	ldi	r26, 0x0A	; 10
    ebd6:	ea 2e       	mov	r14, r26
    ebd8:	0e 94 a9 67 	call	0xcf52	; 0xcf52 <UserInput>
		  switch(uiResult){
    ebdc:	83 30       	cpi	r24, 0x03	; 3
    ebde:	61 f0       	breq	.+24     	; 0xebf8 <FMenuMaster+0x4f6>
    ebe0:	84 30       	cpi	r24, 0x04	; 4
    ebe2:	20 f4       	brcc	.+8      	; 0xebec <FMenuMaster+0x4ea>
    ebe4:	81 30       	cpi	r24, 0x01	; 1
    ebe6:	09 f0       	breq	.+2      	; 0xebea <FMenuMaster+0x4e8>
    ebe8:	80 c0       	rjmp	.+256    	; 0xecea <FMenuMaster+0x5e8>
    ebea:	d7 cd       	rjmp	.-1106   	; 0xe79a <FMenuMaster+0x98>
    ebec:	84 30       	cpi	r24, 0x04	; 4
    ebee:	31 f0       	breq	.+12     	; 0xebfc <FMenuMaster+0x4fa>
    ebf0:	85 30       	cpi	r24, 0x05	; 5
    ebf2:	09 f0       	breq	.+2      	; 0xebf6 <FMenuMaster+0x4f4>
    ebf4:	7a c0       	rjmp	.+244    	; 0xecea <FMenuMaster+0x5e8>
    ebf6:	07 c0       	rjmp	.+14     	; 0xec06 <FMenuMaster+0x504>
		  case USER_OK:
               stMenuMaster=mmIsValidRestoreCode;
    ebf8:	89 e0       	ldi	r24, 0x09	; 9
    ebfa:	d0 cd       	rjmp	.-1120   	; 0xe79c <FMenuMaster+0x9a>
		       break;
          case USER_CANCEL:
		       stMenuMaster=mmExitMaster;
		       break;
		  case USER_ENTRY:
		       lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
    ebfc:	84 e0       	ldi	r24, 0x04	; 4
    ebfe:	61 e0       	ldi	r22, 0x01	; 1
    ec00:	4c e0       	ldi	r20, 0x0C	; 12
    ec02:	58 e1       	ldi	r21, 0x18	; 24
    ec04:	04 c0       	rjmp	.+8      	; 0xec0e <FMenuMaster+0x50c>
		       break;
          case USER_NO_DATA:
		       lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    ec06:	84 e0       	ldi	r24, 0x04	; 4
    ec08:	61 e0       	ldi	r22, 0x01	; 1
    ec0a:	47 ef       	ldi	r20, 0xF7	; 247
    ec0c:	57 e1       	ldi	r21, 0x17	; 23
    ec0e:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
    ec12:	6b c0       	rjmp	.+214    	; 0xecea <FMenuMaster+0x5e8>
		       break;
		  }
	      break;
     case mmIsValidRestoreCode:
	      if (ValidateRestoreCode(strKeyStamp,strRestoreCode)==RC_VALID){
    ec14:	82 e5       	ldi	r24, 0x52	; 82
    ec16:	98 e0       	ldi	r25, 0x08	; 8
    ec18:	6d ed       	ldi	r22, 0xDD	; 221
    ec1a:	7c e0       	ldi	r23, 0x0C	; 12
    ec1c:	0e 94 68 47 	call	0x8ed0	; 0x8ed0 <ValidateRestoreCode>
    ec20:	81 30       	cpi	r24, 0x01	; 1
    ec22:	11 f4       	brne	.+4      	; 0xec28 <FMenuMaster+0x526>
		      stMenuMaster=mmRestorePassword;
    ec24:	8c e0       	ldi	r24, 0x0C	; 12
    ec26:	ba cd       	rjmp	.-1164   	; 0xe79c <FMenuMaster+0x9a>
		  }else stMenuMaster=mmDisplayInvalidRestoreCode;
    ec28:	8a e0       	ldi	r24, 0x0A	; 10
    ec2a:	b8 cd       	rjmp	.-1168   	; 0xe79c <FMenuMaster+0x9a>
	      break;
     case mmRestorePassword:
	      sprintf_P(strNewPassword,PSTR(SPV_DEFAULT_PASS));
    ec2c:	00 d0       	rcall	.+0      	; 0xec2e <FMenuMaster+0x52c>
    ec2e:	00 d0       	rcall	.+0      	; 0xec30 <FMenuMaster+0x52e>
    ec30:	8e 01       	movw	r16, r28
    ec32:	0b 5e       	subi	r16, 0xEB	; 235
    ec34:	1f 4f       	sbci	r17, 0xFF	; 255
    ec36:	ad b7       	in	r26, 0x3d	; 61
    ec38:	be b7       	in	r27, 0x3e	; 62
    ec3a:	12 96       	adiw	r26, 0x02	; 2
    ec3c:	1c 93       	st	X, r17
    ec3e:	0e 93       	st	-X, r16
    ec40:	11 97       	sbiw	r26, 0x01	; 1
    ec42:	81 ef       	ldi	r24, 0xF1	; 241
    ec44:	97 e1       	ldi	r25, 0x17	; 23
    ec46:	14 96       	adiw	r26, 0x04	; 4
    ec48:	9c 93       	st	X, r25
    ec4a:	8e 93       	st	-X, r24
    ec4c:	13 97       	sbiw	r26, 0x03	; 3
    ec4e:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
		  eeprom_write_block((const void*) &strNewPassword,(void*) &DefSpvPassword,sizeof(DefSpvPassword));
    ec52:	0f 90       	pop	r0
    ec54:	0f 90       	pop	r0
    ec56:	0f 90       	pop	r0
    ec58:	0f 90       	pop	r0
    ec5a:	c8 01       	movw	r24, r16
    ec5c:	61 e0       	ldi	r22, 0x01	; 1
    ec5e:	70 e0       	ldi	r23, 0x00	; 0
    ec60:	4a e0       	ldi	r20, 0x0A	; 10
    ec62:	50 e0       	ldi	r21, 0x00	; 0
    ec64:	0e 94 33 ad 	call	0x15a66	; 0x15a66 <__eewr_block_m128>
		  sprintf_P(strNewPassword,PSTR(SYS_DEFAULT_PASS));
    ec68:	00 d0       	rcall	.+0      	; 0xec6a <FMenuMaster+0x568>
    ec6a:	00 d0       	rcall	.+0      	; 0xec6c <FMenuMaster+0x56a>
    ec6c:	ed b7       	in	r30, 0x3d	; 61
    ec6e:	fe b7       	in	r31, 0x3e	; 62
    ec70:	12 83       	std	Z+2, r17	; 0x02
    ec72:	01 83       	std	Z+1, r16	; 0x01
    ec74:	8b ee       	ldi	r24, 0xEB	; 235
    ec76:	97 e1       	ldi	r25, 0x17	; 23
    ec78:	94 83       	std	Z+4, r25	; 0x04
    ec7a:	83 83       	std	Z+3, r24	; 0x03
    ec7c:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
		  eeprom_write_block((const void*) &strNewPassword,(void*) &DefSysPassword,sizeof(DefSysPassword));	      		  
    ec80:	0f 90       	pop	r0
    ec82:	0f 90       	pop	r0
    ec84:	0f 90       	pop	r0
    ec86:	0f 90       	pop	r0
    ec88:	c8 01       	movw	r24, r16
    ec8a:	6b e0       	ldi	r22, 0x0B	; 11
    ec8c:	70 e0       	ldi	r23, 0x00	; 0
    ec8e:	4a e0       	ldi	r20, 0x0A	; 10
    ec90:	50 e0       	ldi	r21, 0x00	; 0
    ec92:	0e 94 33 ad 	call	0x15a66	; 0x15a66 <__eewr_block_m128>
	      stMenuMaster=mmDisplaySuccess;
    ec96:	8d e0       	ldi	r24, 0x0D	; 13
    ec98:	81 cd       	rjmp	.-1278   	; 0xe79c <FMenuMaster+0x9a>
	      break;
     case mmDisplayInvalidRestoreCode:
	      lcd_printf(3,1,PSTR("Invalid Restore  "));
    ec9a:	83 e0       	ldi	r24, 0x03	; 3
    ec9c:	61 e0       	ldi	r22, 0x01	; 1
    ec9e:	49 ed       	ldi	r20, 0xD9	; 217
    eca0:	57 e1       	ldi	r21, 0x17	; 23
    eca2:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  TimDisplay=0;
    eca6:	10 92 92 01 	sts	0x0192, r1
          stMenuMaster=mmDelayInvalidRestoreCode;
    ecaa:	8b e0       	ldi	r24, 0x0B	; 11
    ecac:	77 cd       	rjmp	.-1298   	; 0xe79c <FMenuMaster+0x9a>
	      break;
     case mmDelayInvalidRestoreCode:
	      if (TimDisplay>5)stMenuMaster=mmDisplayKeyStamp;
    ecae:	80 91 92 01 	lds	r24, 0x0192
    ecb2:	86 30       	cpi	r24, 0x06	; 6
    ecb4:	d0 f0       	brcs	.+52     	; 0xecea <FMenuMaster+0x5e8>
    ecb6:	87 e0       	ldi	r24, 0x07	; 7
    ecb8:	71 cd       	rjmp	.-1310   	; 0xe79c <FMenuMaster+0x9a>
	      break;
     case mmDisplaySuccess:
	      //lcd_clear();
		  lcd_printf(3,1,PSTR("Password Restored"));
    ecba:	83 e0       	ldi	r24, 0x03	; 3
    ecbc:	61 e0       	ldi	r22, 0x01	; 1
    ecbe:	47 ec       	ldi	r20, 0xC7	; 199
    ecc0:	57 e1       	ldi	r21, 0x17	; 23
    ecc2:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    ecc6:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    ecc8:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    ecca:	81 e0       	ldi	r24, 0x01	; 1
    eccc:	80 93 bc 01 	sts	0x01BC, r24
	      break;
     case mmDisplaySuccess:
	      //lcd_clear();
		  lcd_printf(3,1,PSTR("Password Restored"));
		  system_beep(1);
		  TimDisplay=0;
    ecd0:	10 92 92 01 	sts	0x0192, r1
          stMenuMaster=mmDelayExit;
    ecd4:	8f e0       	ldi	r24, 0x0F	; 15
    ecd6:	62 cd       	rjmp	.-1340   	; 0xe79c <FMenuMaster+0x9a>
	      break;
     case mmDelayExit:
	      if (TimDisplay>=5)stMenuMaster=mmExitMaster;
    ecd8:	80 91 92 01 	lds	r24, 0x0192
    ecdc:	85 30       	cpi	r24, 0x05	; 5
    ecde:	28 f0       	brcs	.+10     	; 0xecea <FMenuMaster+0x5e8>
    ece0:	5c cd       	rjmp	.-1352   	; 0xe79a <FMenuMaster+0x98>
	      break;
     case mmExitMaster:
	      stMenuMaster=mmInitMaster;
    ece2:	10 92 4c 02 	sts	0x024C, r1
    ece6:	81 e0       	ldi	r24, 0x01	; 1
    ece8:	01 c0       	rjmp	.+2      	; 0xecec <FMenuMaster+0x5ea>
    ecea:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
	      break;
	 }
  return Result;

}
    ecec:	e2 96       	adiw	r28, 0x32	; 50
    ecee:	0f b6       	in	r0, 0x3f	; 63
    ecf0:	f8 94       	cli
    ecf2:	de bf       	out	0x3e, r29	; 62
    ecf4:	0f be       	out	0x3f, r0	; 63
    ecf6:	cd bf       	out	0x3d, r28	; 61
    ecf8:	cf 91       	pop	r28
    ecfa:	df 91       	pop	r29
    ecfc:	1f 91       	pop	r17
    ecfe:	0f 91       	pop	r16
    ed00:	ff 90       	pop	r15
    ed02:	ef 90       	pop	r14
    ed04:	df 90       	pop	r13
    ed06:	cf 90       	pop	r12
    ed08:	08 95       	ret

0000ed0a <FMenuPassword>:
   return Result;	 
}



char FMenuPassword(){
    ed0a:	af 92       	push	r10
    ed0c:	bf 92       	push	r11
    ed0e:	cf 92       	push	r12
    ed10:	df 92       	push	r13
    ed12:	ef 92       	push	r14
    ed14:	0f 93       	push	r16
    ed16:	1f 93       	push	r17
    ed18:	df 93       	push	r29
    ed1a:	cf 93       	push	r28
    ed1c:	cd b7       	in	r28, 0x3d	; 61
    ed1e:	de b7       	in	r29, 0x3e	; 62
    ed20:	6e 97       	sbiw	r28, 0x1e	; 30
    ed22:	0f b6       	in	r0, 0x3f	; 63
    ed24:	f8 94       	cli
    ed26:	de bf       	out	0x3e, r29	; 62
    ed28:	0f be       	out	0x3f, r0	; 63
    ed2a:	cd bf       	out	0x3d, r28	; 61
static char stMenuPasword=mpInitPassword,strPassword[10],PassStatus=MP_NONE;;
       char Result=MP_NONE,strMasterPass[10],strSystemPass[10],strAdminPass[10];
       char uiResult;

     Result=MP_NONE;
     switch(stMenuPasword){
    ed2c:	e0 90 58 02 	lds	r14, 0x0258
    ed30:	81 e0       	ldi	r24, 0x01	; 1
    ed32:	e8 16       	cp	r14, r24
    ed34:	01 f1       	breq	.+64     	; 0xed76 <FMenuPassword+0x6c>
    ed36:	e8 16       	cp	r14, r24
    ed38:	40 f0       	brcs	.+16     	; 0xed4a <FMenuPassword+0x40>
    ed3a:	e2 e0       	ldi	r30, 0x02	; 2
    ed3c:	ee 16       	cp	r14, r30
    ed3e:	e9 f1       	breq	.+122    	; 0xedba <FMenuPassword+0xb0>
    ed40:	f3 e0       	ldi	r31, 0x03	; 3
    ed42:	ef 16       	cp	r14, r31
    ed44:	09 f0       	breq	.+2      	; 0xed48 <FMenuPassword+0x3e>
    ed46:	8c c0       	rjmp	.+280    	; 0xee60 <FMenuPassword+0x156>
    ed48:	86 c0       	rjmp	.+268    	; 0xee56 <FMenuPassword+0x14c>
	 case mpInitPassword:
	      lcd_clear();
    ed4a:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
		  lcd_printf(1,1,PSTR("PASSWORD:"));
    ed4e:	81 e0       	ldi	r24, 0x01	; 1
    ed50:	61 e0       	ldi	r22, 0x01	; 1
    ed52:	40 e6       	ldi	r20, 0x60	; 96
    ed54:	5a e1       	ldi	r21, 0x1A	; 26
    ed56:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  lcd_printf(2,1,PSTR("_"));
    ed5a:	82 e0       	ldi	r24, 0x02	; 2
    ed5c:	61 e0       	ldi	r22, 0x01	; 1
    ed5e:	4e e5       	ldi	r20, 0x5E	; 94
    ed60:	5a e1       	ldi	r21, 0x1A	; 26
    ed62:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    ed66:	84 e0       	ldi	r24, 0x04	; 4
    ed68:	61 e0       	ldi	r22, 0x01	; 1
    ed6a:	49 e4       	ldi	r20, 0x49	; 73
    ed6c:	5a e1       	ldi	r21, 0x1A	; 26
    ed6e:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  FillChar(strPassword,0,sizeof(strPassword));
		  stMenuPasword=mpInputPasword;
    ed72:	81 e0       	ldi	r24, 0x01	; 1
    ed74:	6d c0       	rjmp	.+218    	; 0xee50 <FMenuPassword+0x146>
	      break;
     case mpInputPasword:
	 	      uiResult=UserInput(UI_NUM_PASSWORD,2,1,strPassword,0,8);
    ed76:	84 e0       	ldi	r24, 0x04	; 4
    ed78:	62 e0       	ldi	r22, 0x02	; 2
    ed7a:	41 e0       	ldi	r20, 0x01	; 1
    ed7c:	2e e4       	ldi	r18, 0x4E	; 78
    ed7e:	32 e0       	ldi	r19, 0x02	; 2
    ed80:	00 e0       	ldi	r16, 0x00	; 0
    ed82:	10 e0       	ldi	r17, 0x00	; 0
    ed84:	a8 e0       	ldi	r26, 0x08	; 8
    ed86:	ea 2e       	mov	r14, r26
    ed88:	0e 94 a9 67 	call	0xcf52	; 0xcf52 <UserInput>
		  if (uiResult==USER_OK){
    ed8c:	83 30       	cpi	r24, 0x03	; 3
    ed8e:	11 f4       	brne	.+4      	; 0xed94 <FMenuPassword+0x8a>
		      stMenuPasword=mpProcessPassword;
    ed90:	82 e0       	ldi	r24, 0x02	; 2
    ed92:	5e c0       	rjmp	.+188    	; 0xee50 <FMenuPassword+0x146>
			  }
		  else
		  if (uiResult==USER_CANCEL){
    ed94:	81 30       	cpi	r24, 0x01	; 1
    ed96:	09 f4       	brne	.+2      	; 0xed9a <FMenuPassword+0x90>
    ed98:	4c c0       	rjmp	.+152    	; 0xee32 <FMenuPassword+0x128>
		      PassStatus=MP_CANCEL;
		      stMenuPasword=mpExit;
			  }
		  else
		  if (uiResult==USER_ENTRY)lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
    ed9a:	84 30       	cpi	r24, 0x04	; 4
    ed9c:	21 f4       	brne	.+8      	; 0xeda6 <FMenuPassword+0x9c>
    ed9e:	61 e0       	ldi	r22, 0x01	; 1
    eda0:	44 e3       	ldi	r20, 0x34	; 52
    eda2:	5a e1       	ldi	r21, 0x1A	; 26
    eda4:	07 c0       	rjmp	.+14     	; 0xedb4 <FMenuPassword+0xaa>
		  else
		  if (uiResult==USER_NO_DATA)lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    eda6:	85 30       	cpi	r24, 0x05	; 5
    eda8:	09 f0       	breq	.+2      	; 0xedac <FMenuPassword+0xa2>
    edaa:	5a c0       	rjmp	.+180    	; 0xee60 <FMenuPassword+0x156>
    edac:	84 e0       	ldi	r24, 0x04	; 4
    edae:	61 e0       	ldi	r22, 0x01	; 1
    edb0:	4f e1       	ldi	r20, 0x1F	; 31
    edb2:	5a e1       	ldi	r21, 0x1A	; 26
    edb4:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
    edb8:	53 c0       	rjmp	.+166    	; 0xee60 <FMenuPassword+0x156>
          break;	 
	 case mpProcessPassword:
		      
	      sprintf_P(strMasterPass,PSTR(MASTER_PASSWORD)); 
    edba:	00 d0       	rcall	.+0      	; 0xedbc <FMenuPassword+0xb2>
    edbc:	00 d0       	rcall	.+0      	; 0xedbe <FMenuPassword+0xb4>
    edbe:	8e 01       	movw	r16, r28
    edc0:	0f 5f       	subi	r16, 0xFF	; 255
    edc2:	1f 4f       	sbci	r17, 0xFF	; 255
    edc4:	ed b7       	in	r30, 0x3d	; 61
    edc6:	fe b7       	in	r31, 0x3e	; 62
    edc8:	12 83       	std	Z+2, r17	; 0x02
    edca:	01 83       	std	Z+1, r16	; 0x01
    edcc:	87 e1       	ldi	r24, 0x17	; 23
    edce:	9a e1       	ldi	r25, 0x1A	; 26
    edd0:	94 83       	std	Z+4, r25	; 0x04
    edd2:	83 83       	std	Z+3, r24	; 0x03
    edd4:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	      eeprom_read_block((void*) &strAdminPass, (const void*) &DefSpvPassword, 10);
    edd8:	0f 90       	pop	r0
    edda:	0f 90       	pop	r0
    eddc:	0f 90       	pop	r0
    edde:	0f 90       	pop	r0
    ede0:	f5 e1       	ldi	r31, 0x15	; 21
    ede2:	cf 2e       	mov	r12, r31
    ede4:	d1 2c       	mov	r13, r1
    ede6:	cc 0e       	add	r12, r28
    ede8:	dd 1e       	adc	r13, r29
    edea:	c6 01       	movw	r24, r12
    edec:	61 e0       	ldi	r22, 0x01	; 1
    edee:	70 e0       	ldi	r23, 0x00	; 0
    edf0:	4a e0       	ldi	r20, 0x0A	; 10
    edf2:	50 e0       	ldi	r21, 0x00	; 0
    edf4:	0e 94 1b ad 	call	0x15a36	; 0x15a36 <__eerd_block_m128>
	      eeprom_read_block((void*) &strSystemPass, (const void*) &DefSysPassword, 10);
    edf8:	eb e0       	ldi	r30, 0x0B	; 11
    edfa:	ae 2e       	mov	r10, r30
    edfc:	b1 2c       	mov	r11, r1
    edfe:	ac 0e       	add	r10, r28
    ee00:	bd 1e       	adc	r11, r29
    ee02:	c5 01       	movw	r24, r10
    ee04:	6b e0       	ldi	r22, 0x0B	; 11
    ee06:	70 e0       	ldi	r23, 0x00	; 0
    ee08:	4a e0       	ldi	r20, 0x0A	; 10
    ee0a:	50 e0       	ldi	r21, 0x00	; 0
    ee0c:	0e 94 1b ad 	call	0x15a36	; 0x15a36 <__eerd_block_m128>
		  
		  if (strcmp(strMasterPass,strPassword)==0)
    ee10:	c8 01       	movw	r24, r16
    ee12:	6e e4       	ldi	r22, 0x4E	; 78
    ee14:	72 e0       	ldi	r23, 0x02	; 2
    ee16:	0e 94 d3 aa 	call	0x155a6	; 0x155a6 <strcmp>
    ee1a:	00 97       	sbiw	r24, 0x00	; 0
    ee1c:	11 f4       	brne	.+4      	; 0xee22 <FMenuPassword+0x118>
		       PassStatus=MP_VALID_MASTER;
    ee1e:	83 e0       	ldi	r24, 0x03	; 3
    ee20:	08 c0       	rjmp	.+16     	; 0xee32 <FMenuPassword+0x128>
		  else
	      if (strcmp(strAdminPass,strPassword)==0){
    ee22:	c6 01       	movw	r24, r12
    ee24:	6e e4       	ldi	r22, 0x4E	; 78
    ee26:	72 e0       	ldi	r23, 0x02	; 2
    ee28:	0e 94 d3 aa 	call	0x155a6	; 0x155a6 <strcmp>
    ee2c:	00 97       	sbiw	r24, 0x00	; 0
    ee2e:	21 f4       	brne	.+8      	; 0xee38 <FMenuPassword+0x12e>
		       PassStatus=MP_VALID_ADMIN;
    ee30:	84 e0       	ldi	r24, 0x04	; 4
    ee32:	80 93 4d 02 	sts	0x024D, r24
    ee36:	0b c0       	rjmp	.+22     	; 0xee4e <FMenuPassword+0x144>
               //lcd_printf(3,1,PSTR("Admin"));
               //_delay_ms(5000);
			   }
		  else if (strcmp(strSystemPass,strPassword)==0){
    ee38:	c5 01       	movw	r24, r10
    ee3a:	6e e4       	ldi	r22, 0x4E	; 78
    ee3c:	72 e0       	ldi	r23, 0x02	; 2
    ee3e:	0e 94 d3 aa 	call	0x155a6	; 0x155a6 <strcmp>
    ee42:	00 97       	sbiw	r24, 0x00	; 0
    ee44:	11 f4       	brne	.+4      	; 0xee4a <FMenuPassword+0x140>
		       PassStatus=MP_VALID_SYSTEM;
    ee46:	85 e0       	ldi	r24, 0x05	; 5
    ee48:	f4 cf       	rjmp	.-24     	; 0xee32 <FMenuPassword+0x128>
			   //lcd_printf(3,1,PSTR("System"));
               //_delay_ms(5000);
			   }
		  else PassStatus=MP_INVALID;
    ee4a:	e0 92 4d 02 	sts	0x024D, r14
		  stMenuPasword=mpExit;
    ee4e:	83 e0       	ldi	r24, 0x03	; 3
    ee50:	80 93 58 02 	sts	0x0258, r24
    ee54:	05 c0       	rjmp	.+10     	; 0xee60 <FMenuPassword+0x156>
	      break;
	 case mpExit:
	      //lcd_print(3,1,strPassword);
		  //_delay_ms(5000);
	      stMenuPasword=mpInitPassword;
    ee56:	10 92 58 02 	sts	0x0258, r1
	      Result=PassStatus;
    ee5a:	80 91 4d 02 	lds	r24, 0x024D
    ee5e:	01 c0       	rjmp	.+2      	; 0xee62 <FMenuPassword+0x158>
    ee60:	80 e0       	ldi	r24, 0x00	; 0
	      break;
	 }
   return Result;
}
    ee62:	6e 96       	adiw	r28, 0x1e	; 30
    ee64:	0f b6       	in	r0, 0x3f	; 63
    ee66:	f8 94       	cli
    ee68:	de bf       	out	0x3e, r29	; 62
    ee6a:	0f be       	out	0x3f, r0	; 63
    ee6c:	cd bf       	out	0x3d, r28	; 61
    ee6e:	cf 91       	pop	r28
    ee70:	df 91       	pop	r29
    ee72:	1f 91       	pop	r17
    ee74:	0f 91       	pop	r16
    ee76:	ef 90       	pop	r14
    ee78:	df 90       	pop	r13
    ee7a:	cf 90       	pop	r12
    ee7c:	bf 90       	pop	r11
    ee7e:	af 90       	pop	r10
    ee80:	08 95       	ret

0000ee82 <SetBaudRate>:
	 //Spooling HFCx 0000
	 cmdPrint=0b00010000|(1<<PRN_PAPER_CUT);
	 IsFreePrinting=True;
}

void SetBaudRate(char ComAddr,char brMap){//Com1..Com4
    ee82:	1f 93       	push	r17
    ee84:	28 2f       	mov	r18, r24
    ee86:	96 2f       	mov	r25, r22
unsigned int brValue=9600;
char brMessage=0;

     if ((ComAddr>=1)&&(ComAddr<=2)){
    ee88:	18 2f       	mov	r17, r24
    ee8a:	11 50       	subi	r17, 0x01	; 1
    ee8c:	12 30       	cpi	r17, 0x02	; 2
    ee8e:	50 f4       	brcc	.+20     	; 0xeea4 <SetBaudRate+0x22>
	     brValue=GetBaudrate(brMap);
    ee90:	86 2f       	mov	r24, r22
    ee92:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <GetBaudrate>
	      uart_init((ComAddr-1),brValue);
    ee96:	ac 01       	movw	r20, r24
    ee98:	60 e0       	ldi	r22, 0x00	; 0
    ee9a:	70 e0       	ldi	r23, 0x00	; 0
    ee9c:	81 2f       	mov	r24, r17
    ee9e:	0e 94 aa a8 	call	0x15154	; 0x15154 <uart_init>
    eea2:	18 c0       	rjmp	.+48     	; 0xeed4 <SetBaudRate+0x52>
	 }else
     if ((ComAddr>=3)&&(ComAddr<=4)){
    eea4:	83 50       	subi	r24, 0x03	; 3
    eea6:	82 30       	cpi	r24, 0x02	; 2
    eea8:	a8 f4       	brcc	.+42     	; 0xeed4 <SetBaudRate+0x52>
	     //[COM][Baud]
		 brMessage=((ComAddr<<4)|(0x0F&brMap));
    eeaa:	9f 70       	andi	r25, 0x0F	; 15
    eeac:	62 2f       	mov	r22, r18
    eeae:	62 95       	swap	r22
    eeb0:	60 7f       	andi	r22, 0xF0	; 240
    eeb2:	69 2b       	or	r22, r25
		 if (iSequencePooling>0)SendPoolingCommand(SC_BAUDRATE,brMessage);
    eeb4:	80 91 80 01 	lds	r24, 0x0180
    eeb8:	88 23       	and	r24, r24
    eeba:	49 f0       	breq	.+18     	; 0xeece <SetBaudRate+0x4c>
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
    eebc:	86 e0       	ldi	r24, 0x06	; 6
    eebe:	80 93 29 06 	sts	0x0629, r24
	 PoolMsg=plMsg;
    eec2:	60 93 55 0c 	sts	0x0C55, r22
     IsControlPooling=True;
    eec6:	81 e0       	ldi	r24, 0x01	; 1
    eec8:	80 93 84 01 	sts	0x0184, r24
    eecc:	03 c0       	rjmp	.+6      	; 0xeed4 <SetBaudRate+0x52>
	 }else
     if ((ComAddr>=3)&&(ComAddr<=4)){
	     //[COM][Baud]
		 brMessage=((ComAddr<<4)|(0x0F&brMap));
		 if (iSequencePooling>0)SendPoolingCommand(SC_BAUDRATE,brMessage);
		 else SendSlaveCommand(SC_BAUDRATE,brMessage);
    eece:	86 e0       	ldi	r24, 0x06	; 6
    eed0:	0e 94 0a 60 	call	0xc014	; 0xc014 <SendSlaveCommand>
		 
	 }
}
    eed4:	1f 91       	pop	r17
    eed6:	08 95       	ret

0000eed8 <FSettingSystem>:
	      break;
	 }
     return Result;
}

char FSettingSystem(){
    eed8:	af 92       	push	r10
    eeda:	bf 92       	push	r11
    eedc:	cf 92       	push	r12
    eede:	df 92       	push	r13
    eee0:	ef 92       	push	r14
    eee2:	ff 92       	push	r15
    eee4:	0f 93       	push	r16
    eee6:	1f 93       	push	r17
    eee8:	df 93       	push	r29
    eeea:	cf 93       	push	r28
    eeec:	cd b7       	in	r28, 0x3d	; 61
    eeee:	de b7       	in	r29, 0x3e	; 62
    eef0:	64 97       	sbiw	r28, 0x14	; 20
    eef2:	0f b6       	in	r0, 0x3f	; 63
    eef4:	f8 94       	cli
    eef6:	de bf       	out	0x3e, r29	; 62
    eef8:	0f be       	out	0x3f, r0	; 63
    eefa:	cd bf       	out	0x3d, r28	; 61
       char SubMenu,Result=MENU_NONE;
	   char HGMode;
       char lcdteks[20];
	   int bValue;

     switch(stSettingSytem){
    eefc:	80 91 1c 02 	lds	r24, 0x021C
    ef00:	82 30       	cpi	r24, 0x02	; 2
    ef02:	09 f4       	brne	.+2      	; 0xef06 <FSettingSystem+0x2e>
    ef04:	b9 c0       	rjmp	.+370    	; 0xf078 <FSettingSystem+0x1a0>
    ef06:	83 30       	cpi	r24, 0x03	; 3
    ef08:	30 f4       	brcc	.+12     	; 0xef16 <FSettingSystem+0x3e>
    ef0a:	88 23       	and	r24, r24
    ef0c:	71 f0       	breq	.+28     	; 0xef2a <FSettingSystem+0x52>
    ef0e:	81 30       	cpi	r24, 0x01	; 1
    ef10:	09 f0       	breq	.+2      	; 0xef14 <FSettingSystem+0x3c>
    ef12:	44 c1       	rjmp	.+648    	; 0xf19c <FSettingSystem+0x2c4>
    ef14:	79 c0       	rjmp	.+242    	; 0xf008 <FSettingSystem+0x130>
    ef16:	84 30       	cpi	r24, 0x04	; 4
    ef18:	09 f4       	brne	.+2      	; 0xef1c <FSettingSystem+0x44>
    ef1a:	35 c1       	rjmp	.+618    	; 0xf186 <FSettingSystem+0x2ae>
    ef1c:	84 30       	cpi	r24, 0x04	; 4
    ef1e:	08 f4       	brcc	.+2      	; 0xef22 <FSettingSystem+0x4a>
    ef20:	08 c1       	rjmp	.+528    	; 0xf132 <FSettingSystem+0x25a>
    ef22:	85 30       	cpi	r24, 0x05	; 5
    ef24:	09 f0       	breq	.+2      	; 0xef28 <FSettingSystem+0x50>
    ef26:	3a c1       	rjmp	.+628    	; 0xf19c <FSettingSystem+0x2c4>
    ef28:	35 c1       	rjmp	.+618    	; 0xf194 <FSettingSystem+0x2bc>
	 case ssInitSettingSystem:
	      IFType=eeprom_read_byte(&DefInitIFT);
    ef2a:	87 e3       	ldi	r24, 0x37	; 55
    ef2c:	91 e0       	ldi	r25, 0x01	; 1
    ef2e:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
    ef32:	18 2f       	mov	r17, r24
    ef34:	80 93 00 01 	sts	0x0100, r24
		  HGMode=eeprom_read_byte(&DefHGMode);
    ef38:	83 ec       	ldi	r24, 0xC3	; 195
    ef3a:	93 e0       	ldi	r25, 0x03	; 3
    ef3c:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
    ef40:	08 2f       	mov	r16, r24

	      if (IFType==IT_NONE)sprintf_P(lcdteks,PSTR("1.Mode:None"));
    ef42:	11 23       	and	r17, r17
    ef44:	69 f4       	brne	.+26     	; 0xef60 <FSettingSystem+0x88>
    ef46:	00 d0       	rcall	.+0      	; 0xef48 <FSettingSystem+0x70>
    ef48:	00 d0       	rcall	.+0      	; 0xef4a <FSettingSystem+0x72>
    ef4a:	ce 01       	movw	r24, r28
    ef4c:	01 96       	adiw	r24, 0x01	; 1
    ef4e:	ad b7       	in	r26, 0x3d	; 61
    ef50:	be b7       	in	r27, 0x3e	; 62
    ef52:	12 96       	adiw	r26, 0x02	; 2
    ef54:	9c 93       	st	X, r25
    ef56:	8e 93       	st	-X, r24
    ef58:	11 97       	sbiw	r26, 0x01	; 1
    ef5a:	80 ec       	ldi	r24, 0xC0	; 192
    ef5c:	9f e0       	ldi	r25, 0x0F	; 15
    ef5e:	1d c0       	rjmp	.+58     	; 0xef9a <FSettingSystem+0xc2>
		  else
	      if (IFType==IT_SLAVE)sprintf_P(lcdteks,PSTR("1.Mode:Slave"));
    ef60:	11 30       	cpi	r17, 0x01	; 1
    ef62:	69 f4       	brne	.+26     	; 0xef7e <FSettingSystem+0xa6>
    ef64:	00 d0       	rcall	.+0      	; 0xef66 <FSettingSystem+0x8e>
    ef66:	00 d0       	rcall	.+0      	; 0xef68 <FSettingSystem+0x90>
    ef68:	ce 01       	movw	r24, r28
    ef6a:	01 96       	adiw	r24, 0x01	; 1
    ef6c:	ed b7       	in	r30, 0x3d	; 61
    ef6e:	fe b7       	in	r31, 0x3e	; 62
    ef70:	92 83       	std	Z+2, r25	; 0x02
    ef72:	81 83       	std	Z+1, r24	; 0x01
    ef74:	83 eb       	ldi	r24, 0xB3	; 179
    ef76:	9f e0       	ldi	r25, 0x0F	; 15
    ef78:	94 83       	std	Z+4, r25	; 0x04
    ef7a:	83 83       	std	Z+3, r24	; 0x03
    ef7c:	12 c0       	rjmp	.+36     	; 0xefa2 <FSettingSystem+0xca>
		  else
	      if (IFType==IT_STANDALONE)sprintf_P(lcdteks,PSTR("1.Mode:Standalone"));
    ef7e:	12 30       	cpi	r17, 0x02	; 2
    ef80:	b1 f4       	brne	.+44     	; 0xefae <FSettingSystem+0xd6>
    ef82:	00 d0       	rcall	.+0      	; 0xef84 <FSettingSystem+0xac>
    ef84:	00 d0       	rcall	.+0      	; 0xef86 <FSettingSystem+0xae>
    ef86:	ce 01       	movw	r24, r28
    ef88:	01 96       	adiw	r24, 0x01	; 1
    ef8a:	ad b7       	in	r26, 0x3d	; 61
    ef8c:	be b7       	in	r27, 0x3e	; 62
    ef8e:	12 96       	adiw	r26, 0x02	; 2
    ef90:	9c 93       	st	X, r25
    ef92:	8e 93       	st	-X, r24
    ef94:	11 97       	sbiw	r26, 0x01	; 1
    ef96:	81 ea       	ldi	r24, 0xA1	; 161
    ef98:	9f e0       	ldi	r25, 0x0F	; 15
    ef9a:	14 96       	adiw	r26, 0x04	; 4
    ef9c:	9c 93       	st	X, r25
    ef9e:	8e 93       	st	-X, r24
    efa0:	13 97       	sbiw	r26, 0x03	; 3
    efa2:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
    efa6:	0f 90       	pop	r0
    efa8:	0f 90       	pop	r0
    efaa:	0f 90       	pop	r0
    efac:	0f 90       	pop	r0

	      lcd_clear();
    efae:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
		  lcd_print(1,1,lcdteks);
    efb2:	81 e0       	ldi	r24, 0x01	; 1
    efb4:	61 e0       	ldi	r22, 0x01	; 1
    efb6:	ae 01       	movw	r20, r28
    efb8:	4f 5f       	subi	r20, 0xFF	; 255
    efba:	5f 4f       	sbci	r21, 0xFF	; 255
    efbc:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
		  lcd_printf(2,1,PSTR("2.Baudrate"));
    efc0:	82 e0       	ldi	r24, 0x02	; 2
    efc2:	61 e0       	ldi	r22, 0x01	; 1
    efc4:	46 e9       	ldi	r20, 0x96	; 150
    efc6:	5f e0       	ldi	r21, 0x0F	; 15
    efc8:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>

		  if (HGMode==HM_TTL)lcd_printf(3,1,PSTR("3.COM3:TTL"));
    efcc:	00 23       	and	r16, r16
    efce:	29 f4       	brne	.+10     	; 0xefda <FSettingSystem+0x102>
    efd0:	83 e0       	ldi	r24, 0x03	; 3
    efd2:	61 e0       	ldi	r22, 0x01	; 1
    efd4:	4b e8       	ldi	r20, 0x8B	; 139
    efd6:	5f e0       	ldi	r21, 0x0F	; 15
    efd8:	0d c0       	rjmp	.+26     	; 0xeff4 <FSettingSystem+0x11c>
		  else
		  if (HGMode==HM_232)lcd_printf(3,1,PSTR("3.COM3:232"));
    efda:	01 30       	cpi	r16, 0x01	; 1
    efdc:	29 f4       	brne	.+10     	; 0xefe8 <FSettingSystem+0x110>
    efde:	83 e0       	ldi	r24, 0x03	; 3
    efe0:	61 e0       	ldi	r22, 0x01	; 1
    efe2:	40 e8       	ldi	r20, 0x80	; 128
    efe4:	5f e0       	ldi	r21, 0x0F	; 15
    efe6:	06 c0       	rjmp	.+12     	; 0xeff4 <FSettingSystem+0x11c>
		  else
		  if (HGMode==HM_485)lcd_printf(3,1,PSTR("3.COM3:485"));		  
    efe8:	02 30       	cpi	r16, 0x02	; 2
    efea:	31 f4       	brne	.+12     	; 0xeff8 <FSettingSystem+0x120>
    efec:	83 e0       	ldi	r24, 0x03	; 3
    efee:	61 e0       	ldi	r22, 0x01	; 1
    eff0:	45 e7       	ldi	r20, 0x75	; 117
    eff2:	5f e0       	ldi	r21, 0x0F	; 15
    eff4:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  lcd_printf(4,1,PSTR("[*]Back      "));
    eff8:	84 e0       	ldi	r24, 0x04	; 4
    effa:	61 e0       	ldi	r22, 0x01	; 1
    effc:	47 e6       	ldi	r20, 0x67	; 103
    effe:	5f e0       	ldi	r21, 0x0F	; 15
    f000:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  stSettingSytem=ssMenuSelect;
    f004:	81 e0       	ldi	r24, 0x01	; 1
    f006:	bc c0       	rjmp	.+376    	; 0xf180 <FSettingSystem+0x2a8>
	      break;
     case ssMenuSelect:
          KeyPressed=_key_scan(1);
    f008:	81 e0       	ldi	r24, 0x01	; 1
    f00a:	0e 94 58 a6 	call	0x14cb0	; 0x14cb0 <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
    f00e:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <_key_btn>
		  if (KeyChar=='1'){
    f012:	81 33       	cpi	r24, 0x31	; 49
    f014:	99 f4       	brne	.+38     	; 0xf03c <FSettingSystem+0x164>
		      IFType=((IFType+1)%3);
    f016:	80 91 00 01 	lds	r24, 0x0100
    f01a:	90 e0       	ldi	r25, 0x00	; 0
    f01c:	01 96       	adiw	r24, 0x01	; 1
    f01e:	63 e0       	ldi	r22, 0x03	; 3
    f020:	70 e0       	ldi	r23, 0x00	; 0
    f022:	0e 94 79 aa 	call	0x154f2	; 0x154f2 <__divmodhi4>
    f026:	80 93 00 01 	sts	0x0100, r24
			  SendSlaveCommand(IFType,DispenserBrand);
    f02a:	60 91 5e 01 	lds	r22, 0x015E
    f02e:	0e 94 0a 60 	call	0xc014	; 0xc014 <SendSlaveCommand>
			  eeprom_write_byte(&DefInitIFT,IFType);
    f032:	87 e3       	ldi	r24, 0x37	; 55
    f034:	91 e0       	ldi	r25, 0x01	; 1
    f036:	60 91 00 01 	lds	r22, 0x0100
    f03a:	17 c0       	rjmp	.+46     	; 0xf06a <FSettingSystem+0x192>
			  stSettingSytem=ssInitSettingSystem;
		  }
		  else
		  if (KeyChar=='2'){
    f03c:	82 33       	cpi	r24, 0x32	; 50
    f03e:	09 f4       	brne	.+2      	; 0xf042 <FSettingSystem+0x16a>
    f040:	99 c0       	rjmp	.+306    	; 0xf174 <FSettingSystem+0x29c>
		      stSettingSytem=ssComSettings;
		  }
		  else
		  if (KeyChar=='3'){
    f042:	83 33       	cpi	r24, 0x33	; 51
    f044:	a9 f4       	brne	.+42     	; 0xf070 <FSettingSystem+0x198>
		      HGMode=eeprom_read_byte(&DefHGMode);
    f046:	83 ec       	ldi	r24, 0xC3	; 195
    f048:	93 e0       	ldi	r25, 0x03	; 3
    f04a:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
		      HGMode=((HGMode+1)%3);
    f04e:	90 e0       	ldi	r25, 0x00	; 0
    f050:	01 96       	adiw	r24, 0x01	; 1
    f052:	63 e0       	ldi	r22, 0x03	; 3
    f054:	70 e0       	ldi	r23, 0x00	; 0
    f056:	0e 94 79 aa 	call	0x154f2	; 0x154f2 <__divmodhi4>
    f05a:	18 2f       	mov	r17, r24
			  SendSlaveCommand(SC_HGM_MODE,HGMode);
    f05c:	81 e2       	ldi	r24, 0x21	; 33
    f05e:	61 2f       	mov	r22, r17
    f060:	0e 94 0a 60 	call	0xc014	; 0xc014 <SendSlaveCommand>
			  eeprom_write_byte(&DefHGMode,HGMode);
    f064:	83 ec       	ldi	r24, 0xC3	; 195
    f066:	93 e0       	ldi	r25, 0x03	; 3
    f068:	61 2f       	mov	r22, r17
    f06a:	0e 94 3d ad 	call	0x15a7a	; 0x15a7a <__eewr_byte_m128>
    f06e:	8f c0       	rjmp	.+286    	; 0xf18e <FSettingSystem+0x2b6>
			  stSettingSytem=ssInitSettingSystem;
		  }
		  //else
		  if (KeyChar=='*'){
    f070:	8a 32       	cpi	r24, 0x2A	; 42
    f072:	09 f4       	brne	.+2      	; 0xf076 <FSettingSystem+0x19e>
    f074:	84 c0       	rjmp	.+264    	; 0xf17e <FSettingSystem+0x2a6>
    f076:	92 c0       	rjmp	.+292    	; 0xf19c <FSettingSystem+0x2c4>
		      stSettingSytem=ssExitSystemSettings;
		  }		  
		  break;
	 case ssComSettings:
	      lcd_clear();
    f078:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
		  lcd_printf(1,1,PSTR("     -Baudrate-     "));
    f07c:	81 e0       	ldi	r24, 0x01	; 1
    f07e:	61 e0       	ldi	r22, 0x01	; 1
    f080:	42 e5       	ldi	r20, 0x52	; 82
    f082:	5f e0       	ldi	r21, 0x0F	; 15
    f084:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
    f088:	01 e0       	ldi	r16, 0x01	; 1
    f08a:	10 e0       	ldi	r17, 0x00	; 0

		  for (i=0;i<4;i++){
		       bValue=GetBaudrate(eeprom_read_byte(&DefBaudrate[i]));
			   if (bValue==5787)bValue=12213;
		       sprintf_P(lcdteks,PSTR("COM%d:%d"),i+1,bValue);
    f08c:	6e 01       	movw	r12, r28
    f08e:	08 94       	sec
    f090:	c1 1c       	adc	r12, r1
    f092:	d1 1c       	adc	r13, r1
    f094:	89 e4       	ldi	r24, 0x49	; 73
    f096:	a8 2e       	mov	r10, r24
    f098:	8f e0       	ldi	r24, 0x0F	; 15
    f09a:	b8 2e       	mov	r11, r24
			   lcd_print((2+(i%2)),1+(i/2*11),lcdteks);
    f09c:	bb e0       	ldi	r27, 0x0B	; 11
    f09e:	eb 2e       	mov	r14, r27
		      stSettingSytem=ssExitSystemSettings;
		  }		  
		  break;
	 case ssComSettings:
	      lcd_clear();
		  lcd_printf(1,1,PSTR("     -Baudrate-     "));
    f0a0:	f0 2e       	mov	r15, r16
    f0a2:	fa 94       	dec	r15

		  for (i=0;i<4;i++){
		       bValue=GetBaudrate(eeprom_read_byte(&DefBaudrate[i]));
    f0a4:	c8 01       	movw	r24, r16
    f0a6:	80 5c       	subi	r24, 0xC0	; 192
    f0a8:	9e 4f       	sbci	r25, 0xFE	; 254
    f0aa:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
    f0ae:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <GetBaudrate>
			   if (bValue==5787)bValue=12213;
    f0b2:	b6 e1       	ldi	r27, 0x16	; 22
    f0b4:	8b 39       	cpi	r24, 0x9B	; 155
    f0b6:	9b 07       	cpc	r25, r27
    f0b8:	11 f4       	brne	.+4      	; 0xf0be <FSettingSystem+0x1e6>
    f0ba:	85 eb       	ldi	r24, 0xB5	; 181
    f0bc:	9f e2       	ldi	r25, 0x2F	; 47
		       sprintf_P(lcdteks,PSTR("COM%d:%d"),i+1,bValue);
    f0be:	ed b7       	in	r30, 0x3d	; 61
    f0c0:	fe b7       	in	r31, 0x3e	; 62
    f0c2:	38 97       	sbiw	r30, 0x08	; 8
    f0c4:	0f b6       	in	r0, 0x3f	; 63
    f0c6:	f8 94       	cli
    f0c8:	fe bf       	out	0x3e, r31	; 62
    f0ca:	0f be       	out	0x3f, r0	; 63
    f0cc:	ed bf       	out	0x3d, r30	; 61
    f0ce:	31 96       	adiw	r30, 0x01	; 1
    f0d0:	ad b7       	in	r26, 0x3d	; 61
    f0d2:	be b7       	in	r27, 0x3e	; 62
    f0d4:	12 96       	adiw	r26, 0x02	; 2
    f0d6:	dc 92       	st	X, r13
    f0d8:	ce 92       	st	-X, r12
    f0da:	11 97       	sbiw	r26, 0x01	; 1
    f0dc:	b3 82       	std	Z+3, r11	; 0x03
    f0de:	a2 82       	std	Z+2, r10	; 0x02
    f0e0:	15 83       	std	Z+5, r17	; 0x05
    f0e2:	04 83       	std	Z+4, r16	; 0x04
    f0e4:	97 83       	std	Z+7, r25	; 0x07
    f0e6:	86 83       	std	Z+6, r24	; 0x06
    f0e8:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
			   lcd_print((2+(i%2)),1+(i/2*11),lcdteks);
    f0ec:	ed b7       	in	r30, 0x3d	; 61
    f0ee:	fe b7       	in	r31, 0x3e	; 62
    f0f0:	38 96       	adiw	r30, 0x08	; 8
    f0f2:	0f b6       	in	r0, 0x3f	; 63
    f0f4:	f8 94       	cli
    f0f6:	fe bf       	out	0x3e, r31	; 62
    f0f8:	0f be       	out	0x3f, r0	; 63
    f0fa:	ed bf       	out	0x3d, r30	; 61
    f0fc:	6f 2d       	mov	r22, r15
    f0fe:	66 95       	lsr	r22
    f100:	6e 9d       	mul	r22, r14
    f102:	b0 01       	movw	r22, r0
    f104:	11 24       	eor	r1, r1
    f106:	6f 5f       	subi	r22, 0xFF	; 255
    f108:	f1 e0       	ldi	r31, 0x01	; 1
    f10a:	ff 22       	and	r15, r31
    f10c:	8f 2d       	mov	r24, r15
    f10e:	8e 5f       	subi	r24, 0xFE	; 254
    f110:	a6 01       	movw	r20, r12
    f112:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
    f116:	0f 5f       	subi	r16, 0xFF	; 255
    f118:	1f 4f       	sbci	r17, 0xFF	; 255
		  break;
	 case ssComSettings:
	      lcd_clear();
		  lcd_printf(1,1,PSTR("     -Baudrate-     "));

		  for (i=0;i<4;i++){
    f11a:	05 30       	cpi	r16, 0x05	; 5
    f11c:	11 05       	cpc	r17, r1
    f11e:	09 f0       	breq	.+2      	; 0xf122 <FSettingSystem+0x24a>
    f120:	bf cf       	rjmp	.-130    	; 0xf0a0 <FSettingSystem+0x1c8>
		       bValue=GetBaudrate(eeprom_read_byte(&DefBaudrate[i]));
			   if (bValue==5787)bValue=12213;
		       sprintf_P(lcdteks,PSTR("COM%d:%d"),i+1,bValue);
			   lcd_print((2+(i%2)),1+(i/2*11),lcdteks);
		  }
		  lcd_printf(4,1,PSTR("[*]Back     "));
    f122:	84 e0       	ldi	r24, 0x04	; 4
    f124:	61 e0       	ldi	r22, 0x01	; 1
    f126:	4c e3       	ldi	r20, 0x3C	; 60
    f128:	5f e0       	ldi	r21, 0x0F	; 15
    f12a:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  stSettingSytem=ssBaudrateInput;
    f12e:	83 e0       	ldi	r24, 0x03	; 3
    f130:	27 c0       	rjmp	.+78     	; 0xf180 <FSettingSystem+0x2a8>
	      break;
     case ssBaudrateInput:
	      KeyPressed=_key_scan(1);
    f132:	81 e0       	ldi	r24, 0x01	; 1
    f134:	0e 94 58 a6 	call	0x14cb0	; 0x14cb0 <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
    f138:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <_key_btn>
    f13c:	e8 2e       	mov	r14, r24
		  if ((KeyChar>='1')&&(KeyChar<='4')){
    f13e:	81 53       	subi	r24, 0x31	; 49
    f140:	84 30       	cpi	r24, 0x04	; 4
    f142:	d0 f4       	brcc	.+52     	; 0xf178 <FSettingSystem+0x2a0>
		       brVal=eeprom_read_byte(&DefBaudrate[KeyChar-'1']);
    f144:	0e 2d       	mov	r16, r14
    f146:	10 e0       	ldi	r17, 0x00	; 0
    f148:	00 5f       	subi	r16, 0xF0	; 240
    f14a:	1e 4f       	sbci	r17, 0xFE	; 254
    f14c:	c8 01       	movw	r24, r16
    f14e:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
			   brVal=((brVal+1)%3)+1;
    f152:	90 e0       	ldi	r25, 0x00	; 0
    f154:	01 96       	adiw	r24, 0x01	; 1
    f156:	63 e0       	ldi	r22, 0x03	; 3
    f158:	70 e0       	ldi	r23, 0x00	; 0
    f15a:	0e 94 79 aa 	call	0x154f2	; 0x154f2 <__divmodhi4>
    f15e:	f8 2e       	mov	r15, r24
    f160:	f3 94       	inc	r15
			   SetBaudRate(KeyChar-'0',brVal);
    f162:	8e 2d       	mov	r24, r14
    f164:	80 53       	subi	r24, 0x30	; 48
    f166:	6f 2d       	mov	r22, r15
    f168:	0e 94 41 77 	call	0xee82	; 0xee82 <SetBaudRate>
			   eeprom_write_byte(&DefBaudrate[KeyChar-'1'],brVal);
    f16c:	c8 01       	movw	r24, r16
    f16e:	6f 2d       	mov	r22, r15
    f170:	0e 94 3d ad 	call	0x15a7a	; 0x15a7a <__eewr_byte_m128>
               stSettingSytem=ssComSettings;
    f174:	82 e0       	ldi	r24, 0x02	; 2
    f176:	04 c0       	rjmp	.+8      	; 0xf180 <FSettingSystem+0x2a8>
		  }else if (KeyChar=='*')
    f178:	2a e2       	ldi	r18, 0x2A	; 42
    f17a:	e2 16       	cp	r14, r18
    f17c:	79 f4       	brne	.+30     	; 0xf19c <FSettingSystem+0x2c4>
		      stSettingSytem=ssExitSystemSettings;		  	
    f17e:	85 e0       	ldi	r24, 0x05	; 5
    f180:	80 93 1c 02 	sts	0x021C, r24
    f184:	0b c0       	rjmp	.+22     	; 0xf19c <FSettingSystem+0x2c4>
	      break;
	 case ssPumpPoolingSettings:
          SubMenu=FSettingPumpPooling();
    f186:	0e 94 ee 5b 	call	0xb7dc	; 0xb7dc <FSettingPumpPooling>
		  if (SubMenu==MENU_DONE)stSettingSytem=ssInitSettingSystem;
    f18a:	81 30       	cpi	r24, 0x01	; 1
    f18c:	39 f4       	brne	.+14     	; 0xf19c <FSettingSystem+0x2c4>
    f18e:	10 92 1c 02 	sts	0x021C, r1
    f192:	04 c0       	rjmp	.+8      	; 0xf19c <FSettingSystem+0x2c4>
	      break;
     case ssExitSystemSettings:
	      stSettingSytem=ssInitSettingSystem;
    f194:	10 92 1c 02 	sts	0x021C, r1
    f198:	81 e0       	ldi	r24, 0x01	; 1
    f19a:	01 c0       	rjmp	.+2      	; 0xf19e <FSettingSystem+0x2c6>
    f19c:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
	      break;
	 }
     return Result;
}
    f19e:	64 96       	adiw	r28, 0x14	; 20
    f1a0:	0f b6       	in	r0, 0x3f	; 63
    f1a2:	f8 94       	cli
    f1a4:	de bf       	out	0x3e, r29	; 62
    f1a6:	0f be       	out	0x3f, r0	; 63
    f1a8:	cd bf       	out	0x3d, r28	; 61
    f1aa:	cf 91       	pop	r28
    f1ac:	df 91       	pop	r29
    f1ae:	1f 91       	pop	r17
    f1b0:	0f 91       	pop	r16
    f1b2:	ff 90       	pop	r15
    f1b4:	ef 90       	pop	r14
    f1b6:	df 90       	pop	r13
    f1b8:	cf 90       	pop	r12
    f1ba:	bf 90       	pop	r11
    f1bc:	af 90       	pop	r10
    f1be:	08 95       	ret

0000f1c0 <FMenuSettings>:
char FMenuSettings(){
char Result=MENU_NONE;
static char stMenuSettings=msInit,PageSetting=1;
     char KeyPressed,KeyChar,SubMenu;

     switch(stMenuSettings){
    f1c0:	80 91 22 02 	lds	r24, 0x0222
    f1c4:	e8 2f       	mov	r30, r24
    f1c6:	f0 e0       	ldi	r31, 0x00	; 0
    f1c8:	e3 31       	cpi	r30, 0x13	; 19
    f1ca:	f1 05       	cpc	r31, r1
    f1cc:	08 f0       	brcs	.+2      	; 0xf1d0 <FMenuSettings+0x10>
    f1ce:	bf c0       	rjmp	.+382    	; 0xf34e <FMenuSettings+0x18e>
    f1d0:	e3 58       	subi	r30, 0x83	; 131
    f1d2:	ff 4f       	sbci	r31, 0xFF	; 255
    f1d4:	ee 0f       	add	r30, r30
    f1d6:	ff 1f       	adc	r31, r31
    f1d8:	05 90       	lpm	r0, Z+
    f1da:	f4 91       	lpm	r31, Z+
    f1dc:	e0 2d       	mov	r30, r0
    f1de:	09 94       	ijmp
	 case msInit:
		  lcd_clear();
    f1e0:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
		  PageSetting=1;
    f1e4:	81 e0       	ldi	r24, 0x01	; 1
    f1e6:	80 93 57 01 	sts	0x0157, r24
    f1ea:	a9 c0       	rjmp	.+338    	; 0xf33e <FMenuSettings+0x17e>
		  stMenuSettings=msDisplayPage;
		  break;
	 case msDisplayPage:
	      stMenuSettings=msDisplayPage+PageSetting;
    f1ec:	80 91 57 01 	lds	r24, 0x0157
    f1f0:	8f 5f       	subi	r24, 0xFF	; 255
    f1f2:	a5 c0       	rjmp	.+330    	; 0xf33e <FMenuSettings+0x17e>
          break; 	 
	 case msDisplayPage1:
		  lcd_printf(1, 1, PSTR("1)Product  5)Printer"));
    f1f4:	81 e0       	ldi	r24, 0x01	; 1
    f1f6:	61 e0       	ldi	r22, 0x01	; 1
    f1f8:	4f e3       	ldi	r20, 0x3F	; 63
    f1fa:	54 e1       	ldi	r21, 0x14	; 20
    f1fc:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  lcd_printf(2, 1, PSTR("2)Pump     6)Host   "));
    f200:	82 e0       	ldi	r24, 0x02	; 2
    f202:	61 e0       	ldi	r22, 0x01	; 1
    f204:	4a e2       	ldi	r20, 0x2A	; 42
    f206:	54 e1       	ldi	r21, 0x14	; 20
    f208:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  lcd_printf(3, 1, PSTR("3)Decimal  7)Next   "));
    f20c:	83 e0       	ldi	r24, 0x03	; 3
    f20e:	61 e0       	ldi	r22, 0x01	; 1
    f210:	45 e1       	ldi	r20, 0x15	; 21
    f212:	54 e1       	ldi	r21, 0x14	; 20
    f214:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  lcd_printf(4, 1, PSTR("4)Datetime *)Exit   "));
    f218:	84 e0       	ldi	r24, 0x04	; 4
    f21a:	61 e0       	ldi	r22, 0x01	; 1
    f21c:	40 e0       	ldi	r20, 0x00	; 0
    f21e:	54 e1       	ldi	r21, 0x14	; 20
    f220:	16 c0       	rjmp	.+44     	; 0xf24e <FMenuSettings+0x8e>
		  stMenuSettings=msSelection;
	      break;
	 case msDisplayPage2:
		  lcd_printf(1, 1, PSTR("1)Operator          "));
    f222:	81 e0       	ldi	r24, 0x01	; 1
    f224:	61 e0       	ldi	r22, 0x01	; 1
    f226:	4b ee       	ldi	r20, 0xEB	; 235
    f228:	53 e1       	ldi	r21, 0x13	; 19
    f22a:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  lcd_printf(2, 1, PSTR("2)System            "));
    f22e:	82 e0       	ldi	r24, 0x02	; 2
    f230:	61 e0       	ldi	r22, 0x01	; 1
    f232:	46 ed       	ldi	r20, 0xD6	; 214
    f234:	53 e1       	ldi	r21, 0x13	; 19
    f236:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  lcd_printf(3, 1, PSTR("3)PumpPooling       "));
    f23a:	83 e0       	ldi	r24, 0x03	; 3
    f23c:	61 e0       	ldi	r22, 0x01	; 1
    f23e:	41 ec       	ldi	r20, 0xC1	; 193
    f240:	53 e1       	ldi	r21, 0x13	; 19
    f242:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  lcd_printf(4, 1, PSTR("*)Back              "));
    f246:	84 e0       	ldi	r24, 0x04	; 4
    f248:	61 e0       	ldi	r22, 0x01	; 1
    f24a:	4c ea       	ldi	r20, 0xAC	; 172
    f24c:	53 e1       	ldi	r21, 0x13	; 19
    f24e:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  stMenuSettings=msSelection;
    f252:	84 e0       	ldi	r24, 0x04	; 4
    f254:	74 c0       	rjmp	.+232    	; 0xf33e <FMenuSettings+0x17e>
	      break;
	 case msSelection:
	      stMenuSettings=msSelection+PageSetting;
    f256:	80 91 57 01 	lds	r24, 0x0157
    f25a:	8c 5f       	subi	r24, 0xFC	; 252
    f25c:	70 c0       	rjmp	.+224    	; 0xf33e <FMenuSettings+0x17e>
          break;	 
	 case msSelectionPage1:
		  KeyPressed=_key_scan(1);
    f25e:	81 e0       	ldi	r24, 0x01	; 1
    f260:	0e 94 58 a6 	call	0x14cb0	; 0x14cb0 <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
    f264:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <_key_btn>
		  switch(KeyChar){
    f268:	84 33       	cpi	r24, 0x34	; 52
    f26a:	d1 f0       	breq	.+52     	; 0xf2a0 <FMenuSettings+0xe0>
    f26c:	85 33       	cpi	r24, 0x35	; 53
    f26e:	50 f4       	brcc	.+20     	; 0xf284 <FMenuSettings+0xc4>
    f270:	82 33       	cpi	r24, 0x32	; 50
    f272:	91 f0       	breq	.+36     	; 0xf298 <FMenuSettings+0xd8>
    f274:	83 33       	cpi	r24, 0x33	; 51
    f276:	90 f4       	brcc	.+36     	; 0xf29c <FMenuSettings+0xdc>
    f278:	8a 32       	cpi	r24, 0x2A	; 42
    f27a:	d1 f0       	breq	.+52     	; 0xf2b0 <FMenuSettings+0xf0>
    f27c:	81 33       	cpi	r24, 0x31	; 49
    f27e:	09 f0       	breq	.+2      	; 0xf282 <FMenuSettings+0xc2>
    f280:	66 c0       	rjmp	.+204    	; 0xf34e <FMenuSettings+0x18e>
    f282:	08 c0       	rjmp	.+16     	; 0xf294 <FMenuSettings+0xd4>
    f284:	86 33       	cpi	r24, 0x36	; 54
    f286:	81 f0       	breq	.+32     	; 0xf2a8 <FMenuSettings+0xe8>
    f288:	86 33       	cpi	r24, 0x36	; 54
    f28a:	60 f0       	brcs	.+24     	; 0xf2a4 <FMenuSettings+0xe4>
    f28c:	87 33       	cpi	r24, 0x37	; 55
    f28e:	09 f0       	breq	.+2      	; 0xf292 <FMenuSettings+0xd2>
    f290:	5e c0       	rjmp	.+188    	; 0xf34e <FMenuSettings+0x18e>
    f292:	0c c0       	rjmp	.+24     	; 0xf2ac <FMenuSettings+0xec>
		  case '1':
		       stMenuSettings=msMenuSettingProduct;
    f294:	89 e0       	ldi	r24, 0x09	; 9
    f296:	53 c0       	rjmp	.+166    	; 0xf33e <FMenuSettings+0x17e>
		       break;
		  case '2': 
		       stMenuSettings=msMenuSettingPump;
    f298:	8a e0       	ldi	r24, 0x0A	; 10
    f29a:	51 c0       	rjmp	.+162    	; 0xf33e <FMenuSettings+0x17e>
		       break;
		  case '3':
		       stMenuSettings=msMenuSettingDec;
    f29c:	8b e0       	ldi	r24, 0x0B	; 11
    f29e:	4f c0       	rjmp	.+158    	; 0xf33e <FMenuSettings+0x17e>
		       break;
		  case '4':
		       stMenuSettings=msMenuSettingDatetime;
    f2a0:	8c e0       	ldi	r24, 0x0C	; 12
    f2a2:	4d c0       	rjmp	.+154    	; 0xf33e <FMenuSettings+0x17e>
		       break;
		  case '5':
		       stMenuSettings=msMenuSettingPrinter;
    f2a4:	8d e0       	ldi	r24, 0x0D	; 13
    f2a6:	4b c0       	rjmp	.+150    	; 0xf33e <FMenuSettings+0x17e>
		       break;
		  case '6':
		       stMenuSettings=msMenuSettingHost;
    f2a8:	8e e0       	ldi	r24, 0x0E	; 14
    f2aa:	49 c0       	rjmp	.+146    	; 0xf33e <FMenuSettings+0x17e>
		       break;
		  case '7':
		       stMenuSettings=msMenuSettingNextPage;
    f2ac:	87 e0       	ldi	r24, 0x07	; 7
    f2ae:	47 c0       	rjmp	.+142    	; 0xf33e <FMenuSettings+0x17e>
		       break;
		  case '*':
		       stMenuSettings=msMenuSettingExit;
    f2b0:	82 e1       	ldi	r24, 0x12	; 18
    f2b2:	45 c0       	rjmp	.+138    	; 0xf33e <FMenuSettings+0x17e>
		       break;			   
		  }
	      break;
	 case msSelectionPage2:
	 	  KeyPressed=_key_scan(1);
    f2b4:	81 e0       	ldi	r24, 0x01	; 1
    f2b6:	0e 94 58 a6 	call	0x14cb0	; 0x14cb0 <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
    f2ba:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <_key_btn>
		  switch(KeyChar){
    f2be:	82 33       	cpi	r24, 0x32	; 50
    f2c0:	69 f0       	breq	.+26     	; 0xf2dc <FMenuSettings+0x11c>
    f2c2:	83 33       	cpi	r24, 0x33	; 51
    f2c4:	30 f4       	brcc	.+12     	; 0xf2d2 <FMenuSettings+0x112>
    f2c6:	8a 32       	cpi	r24, 0x2A	; 42
    f2c8:	69 f0       	breq	.+26     	; 0xf2e4 <FMenuSettings+0x124>
    f2ca:	81 33       	cpi	r24, 0x31	; 49
    f2cc:	09 f0       	breq	.+2      	; 0xf2d0 <FMenuSettings+0x110>
    f2ce:	3f c0       	rjmp	.+126    	; 0xf34e <FMenuSettings+0x18e>
    f2d0:	03 c0       	rjmp	.+6      	; 0xf2d8 <FMenuSettings+0x118>
    f2d2:	83 33       	cpi	r24, 0x33	; 51
    f2d4:	e1 f5       	brne	.+120    	; 0xf34e <FMenuSettings+0x18e>
    f2d6:	04 c0       	rjmp	.+8      	; 0xf2e0 <FMenuSettings+0x120>
		  case '1':
		       stMenuSettings=msMenuSettingOperator;
    f2d8:	8f e0       	ldi	r24, 0x0F	; 15
    f2da:	31 c0       	rjmp	.+98     	; 0xf33e <FMenuSettings+0x17e>
		       break;
		  case '2':
		       stMenuSettings=msMenuSettingSystem;
    f2dc:	80 e1       	ldi	r24, 0x10	; 16
    f2de:	2f c0       	rjmp	.+94     	; 0xf33e <FMenuSettings+0x17e>
		       break;
		  case '3':
		       stMenuSettings=msMenuSettingPumpPooling;
    f2e0:	81 e1       	ldi	r24, 0x11	; 17
    f2e2:	2d c0       	rjmp	.+90     	; 0xf33e <FMenuSettings+0x17e>
		       break;
		  case '*':
		       stMenuSettings=msMenuSettingBackPage;
    f2e4:	88 e0       	ldi	r24, 0x08	; 8
    f2e6:	2b c0       	rjmp	.+86     	; 0xf33e <FMenuSettings+0x17e>
		       break;		  
		  }
	      break;
		  
	 case msMenuSettingNextPage:
	      if (PageSetting<2)PageSetting++;
    f2e8:	80 91 57 01 	lds	r24, 0x0157
    f2ec:	82 30       	cpi	r24, 0x02	; 2
    f2ee:	d8 f4       	brcc	.+54     	; 0xf326 <FMenuSettings+0x166>
    f2f0:	8f 5f       	subi	r24, 0xFF	; 255
    f2f2:	05 c0       	rjmp	.+10     	; 0xf2fe <FMenuSettings+0x13e>
		  stMenuSettings=msDisplayPage;
	      break;
	 case msMenuSettingBackPage:
	      if (PageSetting>1)PageSetting--;
    f2f4:	80 91 57 01 	lds	r24, 0x0157
    f2f8:	82 30       	cpi	r24, 0x02	; 2
    f2fa:	a8 f0       	brcs	.+42     	; 0xf326 <FMenuSettings+0x166>
    f2fc:	81 50       	subi	r24, 0x01	; 1
    f2fe:	80 93 57 01 	sts	0x0157, r24
    f302:	11 c0       	rjmp	.+34     	; 0xf326 <FMenuSettings+0x166>
		  stMenuSettings=msDisplayPage;
	      break;
//---Sub Menu Operations--------------------------------------------		  
     case msMenuSettingProduct:
	      SubMenu=FSettingProduct();
    f304:	0e 94 b4 6d 	call	0xdb68	; 0xdb68 <FSettingProduct>
    f308:	18 c0       	rjmp	.+48     	; 0xf33a <FMenuSettings+0x17a>
		  if (SubMenu==MENU_DONE)stMenuSettings=msDisplayPage;
	      break;
	 case msMenuSettingPump:
	      SubMenu=FSettingPump();
    f30a:	0e 94 99 63 	call	0xc732	; 0xc732 <FSettingPump>
    f30e:	15 c0       	rjmp	.+42     	; 0xf33a <FMenuSettings+0x17a>
		  if (SubMenu==MENU_DONE)stMenuSettings=msDisplayPage;
	      break;
	 case msMenuSettingDec:
	      SubMenu=FSettingDec();
    f310:	0e 94 45 51 	call	0xa28a	; 0xa28a <FSettingDec>
    f314:	12 c0       	rjmp	.+36     	; 0xf33a <FMenuSettings+0x17a>
	 }
     return Result;
}

char FSettingDatetime(){
     _menu_datetime();
    f316:	0e 94 89 53 	call	0xa712	; 0xa712 <_menu_datetime>
    f31a:	05 c0       	rjmp	.+10     	; 0xf326 <FMenuSettings+0x166>
     return MENU_DONE;
}
char FSettingPrinter(){
     _menu_printer();
    f31c:	0e 94 9a 4d 	call	0x9b34	; 0x9b34 <_menu_printer>
    f320:	02 c0       	rjmp	.+4      	; 0xf326 <FMenuSettings+0x166>
	 return MENU_DONE;
}
char FSettingHost(){
     _menu_host();
    f322:	0e 94 27 4c 	call	0x984e	; 0x984e <_menu_host>
	      SubMenu=FSettingPrinter();
		  if (SubMenu==MENU_DONE)stMenuSettings=msDisplayPage;
	      break;
	 case msMenuSettingHost:
	      SubMenu=FSettingHost();
		  if (SubMenu==MENU_DONE)stMenuSettings=msDisplayPage;
    f326:	81 e0       	ldi	r24, 0x01	; 1
    f328:	0a c0       	rjmp	.+20     	; 0xf33e <FMenuSettings+0x17e>
	      break;
     case msMenuSettingOperator:
          SubMenu=FSettingOperator();
    f32a:	0e 94 cd 6a 	call	0xd59a	; 0xd59a <FSettingOperator>
    f32e:	05 c0       	rjmp	.+10     	; 0xf33a <FMenuSettings+0x17a>
		  if (SubMenu==MENU_DONE)stMenuSettings=msDisplayPage;
	      break;
	 case msMenuSettingSystem:
	      SubMenu=FSettingSystem();
    f330:	0e 94 6c 77 	call	0xeed8	; 0xeed8 <FSettingSystem>
    f334:	02 c0       	rjmp	.+4      	; 0xf33a <FMenuSettings+0x17a>
		  if (SubMenu==MENU_DONE)stMenuSettings=msDisplayPage;
	      break;	 
     case msMenuSettingPumpPooling:
	      SubMenu=FSettingPumpPooling();
    f336:	0e 94 ee 5b 	call	0xb7dc	; 0xb7dc <FSettingPumpPooling>
		  if (SubMenu==MENU_DONE)stMenuSettings=msDisplayPage;
    f33a:	81 30       	cpi	r24, 0x01	; 1
    f33c:	41 f4       	brne	.+16     	; 0xf34e <FMenuSettings+0x18e>
    f33e:	80 93 22 02 	sts	0x0222, r24
    f342:	80 e0       	ldi	r24, 0x00	; 0
    f344:	08 95       	ret
	      break;
//------------------------------------------------------------------
     case msMenuSettingExit:
	      stMenuSettings=msInit;
    f346:	10 92 22 02 	sts	0x0222, r1
    f34a:	81 e0       	ldi	r24, 0x01	; 1
    f34c:	08 95       	ret
    f34e:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
	      break;
	 }
   return Result;
}
    f350:	08 95       	ret

0000f352 <InitComport>:
     	  break;	 
	 }
   return Result;
}

void InitComport(){
    f352:	af 92       	push	r10
    f354:	bf 92       	push	r11
    f356:	cf 92       	push	r12
    f358:	df 92       	push	r13
    f35a:	ff 92       	push	r15
    f35c:	0f 93       	push	r16
    f35e:	1f 93       	push	r17
    f360:	df 93       	push	r29
    f362:	cf 93       	push	r28
    f364:	cd b7       	in	r28, 0x3d	; 61
    f366:	de b7       	in	r29, 0x3e	; 62
    f368:	64 97       	sbiw	r28, 0x14	; 20
    f36a:	0f b6       	in	r0, 0x3f	; 63
    f36c:	f8 94       	cli
    f36e:	de bf       	out	0x3e, r29	; 62
    f370:	0f be       	out	0x3f, r0	; 63
    f372:	cd bf       	out	0x3d, r28	; 61
     char brMap,i=0,lcdteks[20];	 
	 int bValue;
	 lcd_printf(3, 1, PSTR("Initialize COM ..."));
    f374:	83 e0       	ldi	r24, 0x03	; 3
    f376:	61 e0       	ldi	r22, 0x01	; 1
    f378:	4e e0       	ldi	r20, 0x0E	; 14
    f37a:	5f e1       	ldi	r21, 0x1F	; 31
    f37c:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
    f380:	01 e0       	ldi	r16, 0x01	; 1
    f382:	10 e0       	ldi	r17, 0x00	; 0
     for(i=0;i<4;i++){
	     brMap=eeprom_read_byte(&DefBaudrate[i]);
		 bValue=GetBaudrate(brMap);
		 if (bValue==5787)bValue=12213;
		 sprintf_P(lcdteks,PSTR("COM%d:%i           "),i+1,bValue);
    f384:	6e 01       	movw	r12, r28
    f386:	08 94       	sec
    f388:	c1 1c       	adc	r12, r1
    f38a:	d1 1c       	adc	r13, r1
    f38c:	9a ef       	ldi	r25, 0xFA	; 250
    f38e:	a9 2e       	mov	r10, r25
    f390:	9e e1       	ldi	r25, 0x1E	; 30
    f392:	b9 2e       	mov	r11, r25
void InitComport(){
     char brMap,i=0,lcdteks[20];	 
	 int bValue;
	 lcd_printf(3, 1, PSTR("Initialize COM ..."));
     for(i=0;i<4;i++){
	     brMap=eeprom_read_byte(&DefBaudrate[i]);
    f394:	c8 01       	movw	r24, r16
    f396:	80 5c       	subi	r24, 0xC0	; 192
    f398:	9e 4f       	sbci	r25, 0xFE	; 254
    f39a:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
    f39e:	f8 2e       	mov	r15, r24
		 bValue=GetBaudrate(brMap);
    f3a0:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <GetBaudrate>
		 if (bValue==5787)bValue=12213;
    f3a4:	26 e1       	ldi	r18, 0x16	; 22
    f3a6:	8b 39       	cpi	r24, 0x9B	; 155
    f3a8:	92 07       	cpc	r25, r18
    f3aa:	11 f4       	brne	.+4      	; 0xf3b0 <InitComport+0x5e>
    f3ac:	85 eb       	ldi	r24, 0xB5	; 181
    f3ae:	9f e2       	ldi	r25, 0x2F	; 47
		 sprintf_P(lcdteks,PSTR("COM%d:%i           "),i+1,bValue);
    f3b0:	ad b7       	in	r26, 0x3d	; 61
    f3b2:	be b7       	in	r27, 0x3e	; 62
    f3b4:	18 97       	sbiw	r26, 0x08	; 8
    f3b6:	0f b6       	in	r0, 0x3f	; 63
    f3b8:	f8 94       	cli
    f3ba:	be bf       	out	0x3e, r27	; 62
    f3bc:	0f be       	out	0x3f, r0	; 63
    f3be:	ad bf       	out	0x3d, r26	; 61
    f3c0:	ed b7       	in	r30, 0x3d	; 61
    f3c2:	fe b7       	in	r31, 0x3e	; 62
    f3c4:	31 96       	adiw	r30, 0x01	; 1
    f3c6:	12 96       	adiw	r26, 0x02	; 2
    f3c8:	dc 92       	st	X, r13
    f3ca:	ce 92       	st	-X, r12
    f3cc:	11 97       	sbiw	r26, 0x01	; 1
    f3ce:	b3 82       	std	Z+3, r11	; 0x03
    f3d0:	a2 82       	std	Z+2, r10	; 0x02
    f3d2:	15 83       	std	Z+5, r17	; 0x05
    f3d4:	04 83       	std	Z+4, r16	; 0x04
    f3d6:	97 83       	std	Z+7, r25	; 0x07
    f3d8:	86 83       	std	Z+6, r24	; 0x06
    f3da:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
		 lcd_print(4,1,lcdteks);
    f3de:	2d b7       	in	r18, 0x3d	; 61
    f3e0:	3e b7       	in	r19, 0x3e	; 62
    f3e2:	28 5f       	subi	r18, 0xF8	; 248
    f3e4:	3f 4f       	sbci	r19, 0xFF	; 255
    f3e6:	0f b6       	in	r0, 0x3f	; 63
    f3e8:	f8 94       	cli
    f3ea:	3e bf       	out	0x3e, r19	; 62
    f3ec:	0f be       	out	0x3f, r0	; 63
    f3ee:	2d bf       	out	0x3d, r18	; 61
    f3f0:	84 e0       	ldi	r24, 0x04	; 4
    f3f2:	61 e0       	ldi	r22, 0x01	; 1
    f3f4:	a6 01       	movw	r20, r12
    f3f6:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
		 SetBaudRate(i+1,brMap);
    f3fa:	80 2f       	mov	r24, r16
    f3fc:	6f 2d       	mov	r22, r15
    f3fe:	0e 94 41 77 	call	0xee82	; 0xee82 <SetBaudRate>
 	     TimDisplay=0;
    f402:	10 92 92 01 	sts	0x0192, r1
    f406:	04 c0       	rjmp	.+8      	; 0xf410 <InitComport+0xbe>
	     while(TimDisplay<2){
		     if (TimDisplay>1)break;
    f408:	80 91 92 01 	lds	r24, 0x0192
    f40c:	82 30       	cpi	r24, 0x02	; 2
    f40e:	20 f4       	brcc	.+8      	; 0xf418 <InitComport+0xc6>
		 if (bValue==5787)bValue=12213;
		 sprintf_P(lcdteks,PSTR("COM%d:%i           "),i+1,bValue);
		 lcd_print(4,1,lcdteks);
		 SetBaudRate(i+1,brMap);
 	     TimDisplay=0;
	     while(TimDisplay<2){
    f410:	80 91 92 01 	lds	r24, 0x0192
    f414:	82 30       	cpi	r24, 0x02	; 2
    f416:	c0 f3       	brcs	.-16     	; 0xf408 <InitComport+0xb6>
    f418:	0f 5f       	subi	r16, 0xFF	; 255
    f41a:	1f 4f       	sbci	r17, 0xFF	; 255

void InitComport(){
     char brMap,i=0,lcdteks[20];	 
	 int bValue;
	 lcd_printf(3, 1, PSTR("Initialize COM ..."));
     for(i=0;i<4;i++){
    f41c:	05 30       	cpi	r16, 0x05	; 5
    f41e:	11 05       	cpc	r17, r1
    f420:	09 f0       	breq	.+2      	; 0xf424 <InitComport+0xd2>
    f422:	b8 cf       	rjmp	.-144    	; 0xf394 <InitComport+0x42>
	     while(TimDisplay<2){
		     if (TimDisplay>1)break;
		 };

	 }
}
    f424:	64 96       	adiw	r28, 0x14	; 20
    f426:	0f b6       	in	r0, 0x3f	; 63
    f428:	f8 94       	cli
    f42a:	de bf       	out	0x3e, r29	; 62
    f42c:	0f be       	out	0x3f, r0	; 63
    f42e:	cd bf       	out	0x3d, r28	; 61
    f430:	cf 91       	pop	r28
    f432:	df 91       	pop	r29
    f434:	1f 91       	pop	r17
    f436:	0f 91       	pop	r16
    f438:	ff 90       	pop	r15
    f43a:	df 90       	pop	r13
    f43c:	cf 90       	pop	r12
    f43e:	bf 90       	pop	r11
    f440:	af 90       	pop	r10
    f442:	08 95       	ret

0000f444 <IFTSendMessage>:
		else strCardID[i]=strRFID[i-(20-LengthID)];
	 }strCardID[20]=0;

}

void IFTSendMessage(char MsgCode){//<STX>[IFTID][Seq][No][SrceIP][DestIP][MsgCode]
    f444:	af 92       	push	r10
    f446:	bf 92       	push	r11
    f448:	cf 92       	push	r12
    f44a:	df 92       	push	r13
    f44c:	ef 92       	push	r14
    f44e:	ff 92       	push	r15
    f450:	0f 93       	push	r16
    f452:	df 93       	push	r29
    f454:	cf 93       	push	r28
    f456:	cd b7       	in	r28, 0x3d	; 61
    f458:	de b7       	in	r29, 0x3e	; 62
    f45a:	c0 54       	subi	r28, 0x40	; 64
    f45c:	d0 40       	sbci	r29, 0x00	; 0
    f45e:	0f b6       	in	r0, 0x3f	; 63
    f460:	f8 94       	cli
    f462:	de bf       	out	0x3e, r29	; 62
    f464:	0f be       	out	0x3f, r0	; 63
    f466:	cd bf       	out	0x3d, r28	; 61
    f468:	08 2f       	mov	r16, r24
	 char strSeqNum[3];
	 char ReadIP[4];
	 char strSend[60];

     //STX
     uart(1, 1,0x01);
    f46a:	81 e0       	ldi	r24, 0x01	; 1
    f46c:	61 e0       	ldi	r22, 0x01	; 1
    f46e:	41 e0       	ldi	r20, 0x01	; 1
    f470:	0e 94 bd a8 	call	0x1517a	; 0x1517a <uart>
	 //[IFTID]
	 IdIFT=(eeprom_read_byte(&DefIFT_ID)%100);
    f474:	80 e0       	ldi	r24, 0x00	; 0
    f476:	90 e0       	ldi	r25, 0x00	; 0
    f478:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
	 sprintf_P(strSend,PSTR("%.2d"),IdIFT);
    f47c:	00 d0       	rcall	.+0      	; 0xf47e <IFTSendMessage+0x3a>
    f47e:	00 d0       	rcall	.+0      	; 0xf480 <IFTSendMessage+0x3c>
    f480:	00 d0       	rcall	.+0      	; 0xf482 <IFTSendMessage+0x3e>
    f482:	ed b7       	in	r30, 0x3d	; 61
    f484:	fe b7       	in	r31, 0x3e	; 62
    f486:	31 96       	adiw	r30, 0x01	; 1
    f488:	45 e0       	ldi	r20, 0x05	; 5
    f48a:	c4 2e       	mov	r12, r20
    f48c:	d1 2c       	mov	r13, r1
    f48e:	cc 0e       	add	r12, r28
    f490:	dd 1e       	adc	r13, r29
    f492:	ad b7       	in	r26, 0x3d	; 61
    f494:	be b7       	in	r27, 0x3e	; 62
    f496:	12 96       	adiw	r26, 0x02	; 2
    f498:	dc 92       	st	X, r13
    f49a:	ce 92       	st	-X, r12
    f49c:	11 97       	sbiw	r26, 0x01	; 1
    f49e:	22 e8       	ldi	r18, 0x82	; 130
    f4a0:	33 e2       	ldi	r19, 0x23	; 35
    f4a2:	33 83       	std	Z+3, r19	; 0x03
    f4a4:	22 83       	std	Z+2, r18	; 0x02
    f4a6:	64 e6       	ldi	r22, 0x64	; 100
    f4a8:	0e 94 4c aa 	call	0x15498	; 0x15498 <__udivmodqi4>
    f4ac:	94 83       	std	Z+4, r25	; 0x04
    f4ae:	15 82       	std	Z+5, r1	; 0x05
    f4b0:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	 uart_print(1, 0,strSend);
    f4b4:	8d b7       	in	r24, 0x3d	; 61
    f4b6:	9e b7       	in	r25, 0x3e	; 62
    f4b8:	06 96       	adiw	r24, 0x06	; 6
    f4ba:	0f b6       	in	r0, 0x3f	; 63
    f4bc:	f8 94       	cli
    f4be:	9e bf       	out	0x3e, r25	; 62
    f4c0:	0f be       	out	0x3f, r0	; 63
    f4c2:	8d bf       	out	0x3d, r24	; 61
    f4c4:	81 e0       	ldi	r24, 0x01	; 1
    f4c6:	60 e0       	ldi	r22, 0x00	; 0
    f4c8:	a6 01       	movw	r20, r12
    f4ca:	0e 94 da a8 	call	0x151b4	; 0x151b4 <uart_print>
     //[Seq]
	 SeqNum=((SeqNum+1)%100);
    f4ce:	80 91 ae 01 	lds	r24, 0x01AE
    f4d2:	90 e0       	ldi	r25, 0x00	; 0
    f4d4:	01 96       	adiw	r24, 0x01	; 1
    f4d6:	64 e6       	ldi	r22, 0x64	; 100
    f4d8:	70 e0       	ldi	r23, 0x00	; 0
    f4da:	0e 94 79 aa 	call	0x154f2	; 0x154f2 <__divmodhi4>
    f4de:	80 93 ae 01 	sts	0x01AE, r24
	 sprintf_P(strSend,PSTR("%.2d"),SeqNum);	 
    f4e2:	00 d0       	rcall	.+0      	; 0xf4e4 <IFTSendMessage+0xa0>
    f4e4:	00 d0       	rcall	.+0      	; 0xf4e6 <IFTSendMessage+0xa2>
    f4e6:	00 d0       	rcall	.+0      	; 0xf4e8 <IFTSendMessage+0xa4>
    f4e8:	ed b7       	in	r30, 0x3d	; 61
    f4ea:	fe b7       	in	r31, 0x3e	; 62
    f4ec:	31 96       	adiw	r30, 0x01	; 1
    f4ee:	ad b7       	in	r26, 0x3d	; 61
    f4f0:	be b7       	in	r27, 0x3e	; 62
    f4f2:	12 96       	adiw	r26, 0x02	; 2
    f4f4:	dc 92       	st	X, r13
    f4f6:	ce 92       	st	-X, r12
    f4f8:	11 97       	sbiw	r26, 0x01	; 1
    f4fa:	2d e7       	ldi	r18, 0x7D	; 125
    f4fc:	33 e2       	ldi	r19, 0x23	; 35
    f4fe:	33 83       	std	Z+3, r19	; 0x03
    f500:	22 83       	std	Z+2, r18	; 0x02
    f502:	84 83       	std	Z+4, r24	; 0x04
    f504:	15 82       	std	Z+5, r1	; 0x05
    f506:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	 uart_print(1, 0,strSend);
    f50a:	8d b7       	in	r24, 0x3d	; 61
    f50c:	9e b7       	in	r25, 0x3e	; 62
    f50e:	06 96       	adiw	r24, 0x06	; 6
    f510:	0f b6       	in	r0, 0x3f	; 63
    f512:	f8 94       	cli
    f514:	9e bf       	out	0x3e, r25	; 62
    f516:	0f be       	out	0x3f, r0	; 63
    f518:	8d bf       	out	0x3d, r24	; 61
    f51a:	81 e0       	ldi	r24, 0x01	; 1
    f51c:	60 e0       	ldi	r22, 0x00	; 0
    f51e:	a6 01       	movw	r20, r12
    f520:	0e 94 da a8 	call	0x151b4	; 0x151b4 <uart_print>
	 //[ClientIP]
     eeprom_read_block((void*)&ReadIP,(const void*)&DefClientIP,4);
    f524:	7e 01       	movw	r14, r28
    f526:	08 94       	sec
    f528:	e1 1c       	adc	r14, r1
    f52a:	f1 1c       	adc	r15, r1
    f52c:	c7 01       	movw	r24, r14
    f52e:	68 e2       	ldi	r22, 0x28	; 40
    f530:	70 e0       	ldi	r23, 0x00	; 0
    f532:	44 e0       	ldi	r20, 0x04	; 4
    f534:	50 e0       	ldi	r21, 0x00	; 0
    f536:	0e 94 1b ad 	call	0x15a36	; 0x15a36 <__eerd_block_m128>
	 sprintf_P(strSend,PSTR("%.3d.%.3d.%.3d.%.3d"),ReadIP[0],ReadIP[1],ReadIP[2],ReadIP[3]);
    f53a:	ad b7       	in	r26, 0x3d	; 61
    f53c:	be b7       	in	r27, 0x3e	; 62
    f53e:	1c 97       	sbiw	r26, 0x0c	; 12
    f540:	0f b6       	in	r0, 0x3f	; 63
    f542:	f8 94       	cli
    f544:	be bf       	out	0x3e, r27	; 62
    f546:	0f be       	out	0x3f, r0	; 63
    f548:	ad bf       	out	0x3d, r26	; 61
    f54a:	ed b7       	in	r30, 0x3d	; 61
    f54c:	fe b7       	in	r31, 0x3e	; 62
    f54e:	31 96       	adiw	r30, 0x01	; 1
    f550:	12 96       	adiw	r26, 0x02	; 2
    f552:	dc 92       	st	X, r13
    f554:	ce 92       	st	-X, r12
    f556:	11 97       	sbiw	r26, 0x01	; 1
    f558:	89 e6       	ldi	r24, 0x69	; 105
    f55a:	93 e2       	ldi	r25, 0x23	; 35
    f55c:	93 83       	std	Z+3, r25	; 0x03
    f55e:	82 83       	std	Z+2, r24	; 0x02
    f560:	89 81       	ldd	r24, Y+1	; 0x01
    f562:	84 83       	std	Z+4, r24	; 0x04
    f564:	15 82       	std	Z+5, r1	; 0x05
    f566:	8a 81       	ldd	r24, Y+2	; 0x02
    f568:	86 83       	std	Z+6, r24	; 0x06
    f56a:	17 82       	std	Z+7, r1	; 0x07
    f56c:	8b 81       	ldd	r24, Y+3	; 0x03
    f56e:	80 87       	std	Z+8, r24	; 0x08
    f570:	11 86       	std	Z+9, r1	; 0x09
    f572:	8c 81       	ldd	r24, Y+4	; 0x04
    f574:	82 87       	std	Z+10, r24	; 0x0a
    f576:	13 86       	std	Z+11, r1	; 0x0b
    f578:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	 uart_print(1, 0,strSend);
    f57c:	8d b7       	in	r24, 0x3d	; 61
    f57e:	9e b7       	in	r25, 0x3e	; 62
    f580:	0c 96       	adiw	r24, 0x0c	; 12
    f582:	0f b6       	in	r0, 0x3f	; 63
    f584:	f8 94       	cli
    f586:	9e bf       	out	0x3e, r25	; 62
    f588:	0f be       	out	0x3f, r0	; 63
    f58a:	8d bf       	out	0x3d, r24	; 61
    f58c:	81 e0       	ldi	r24, 0x01	; 1
    f58e:	60 e0       	ldi	r22, 0x00	; 0
    f590:	a6 01       	movw	r20, r12
    f592:	0e 94 da a8 	call	0x151b4	; 0x151b4 <uart_print>
	 //[ServerIP]
     eeprom_read_block((void*)&ReadIP,(const void*)&DefServerIP,4);
    f596:	c7 01       	movw	r24, r14
    f598:	6c e2       	ldi	r22, 0x2C	; 44
    f59a:	70 e0       	ldi	r23, 0x00	; 0
    f59c:	44 e0       	ldi	r20, 0x04	; 4
    f59e:	50 e0       	ldi	r21, 0x00	; 0
    f5a0:	0e 94 1b ad 	call	0x15a36	; 0x15a36 <__eerd_block_m128>
	 sprintf_P(strSend,PSTR("%.3d.%.3d.%.3d.%.3d"),ReadIP[0],ReadIP[1],ReadIP[2],ReadIP[3]);
    f5a4:	ad b7       	in	r26, 0x3d	; 61
    f5a6:	be b7       	in	r27, 0x3e	; 62
    f5a8:	1c 97       	sbiw	r26, 0x0c	; 12
    f5aa:	0f b6       	in	r0, 0x3f	; 63
    f5ac:	f8 94       	cli
    f5ae:	be bf       	out	0x3e, r27	; 62
    f5b0:	0f be       	out	0x3f, r0	; 63
    f5b2:	ad bf       	out	0x3d, r26	; 61
    f5b4:	ed b7       	in	r30, 0x3d	; 61
    f5b6:	fe b7       	in	r31, 0x3e	; 62
    f5b8:	31 96       	adiw	r30, 0x01	; 1
    f5ba:	12 96       	adiw	r26, 0x02	; 2
    f5bc:	dc 92       	st	X, r13
    f5be:	ce 92       	st	-X, r12
    f5c0:	11 97       	sbiw	r26, 0x01	; 1
    f5c2:	85 e5       	ldi	r24, 0x55	; 85
    f5c4:	93 e2       	ldi	r25, 0x23	; 35
    f5c6:	93 83       	std	Z+3, r25	; 0x03
    f5c8:	82 83       	std	Z+2, r24	; 0x02
    f5ca:	89 81       	ldd	r24, Y+1	; 0x01
    f5cc:	84 83       	std	Z+4, r24	; 0x04
    f5ce:	15 82       	std	Z+5, r1	; 0x05
    f5d0:	8a 81       	ldd	r24, Y+2	; 0x02
    f5d2:	86 83       	std	Z+6, r24	; 0x06
    f5d4:	17 82       	std	Z+7, r1	; 0x07
    f5d6:	8b 81       	ldd	r24, Y+3	; 0x03
    f5d8:	80 87       	std	Z+8, r24	; 0x08
    f5da:	11 86       	std	Z+9, r1	; 0x09
    f5dc:	8c 81       	ldd	r24, Y+4	; 0x04
    f5de:	82 87       	std	Z+10, r24	; 0x0a
    f5e0:	13 86       	std	Z+11, r1	; 0x0b
    f5e2:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	 uart_print(1, 0,strSend);
    f5e6:	8d b7       	in	r24, 0x3d	; 61
    f5e8:	9e b7       	in	r25, 0x3e	; 62
    f5ea:	0c 96       	adiw	r24, 0x0c	; 12
    f5ec:	0f b6       	in	r0, 0x3f	; 63
    f5ee:	f8 94       	cli
    f5f0:	9e bf       	out	0x3e, r25	; 62
    f5f2:	0f be       	out	0x3f, r0	; 63
    f5f4:	8d bf       	out	0x3d, r24	; 61
    f5f6:	81 e0       	ldi	r24, 0x01	; 1
    f5f8:	60 e0       	ldi	r22, 0x00	; 0
    f5fa:	a6 01       	movw	r20, r12
    f5fc:	0e 94 da a8 	call	0x151b4	; 0x151b4 <uart_print>
	 //[MsgCode]
	 sprintf_P(strSend,PSTR("%.2X"),MsgCode);	 
    f600:	00 d0       	rcall	.+0      	; 0xf602 <IFTSendMessage+0x1be>
    f602:	00 d0       	rcall	.+0      	; 0xf604 <IFTSendMessage+0x1c0>
    f604:	00 d0       	rcall	.+0      	; 0xf606 <IFTSendMessage+0x1c2>
    f606:	ed b7       	in	r30, 0x3d	; 61
    f608:	fe b7       	in	r31, 0x3e	; 62
    f60a:	31 96       	adiw	r30, 0x01	; 1
    f60c:	ad b7       	in	r26, 0x3d	; 61
    f60e:	be b7       	in	r27, 0x3e	; 62
    f610:	12 96       	adiw	r26, 0x02	; 2
    f612:	dc 92       	st	X, r13
    f614:	ce 92       	st	-X, r12
    f616:	11 97       	sbiw	r26, 0x01	; 1
    f618:	80 e5       	ldi	r24, 0x50	; 80
    f61a:	93 e2       	ldi	r25, 0x23	; 35
    f61c:	93 83       	std	Z+3, r25	; 0x03
    f61e:	82 83       	std	Z+2, r24	; 0x02
    f620:	04 83       	std	Z+4, r16	; 0x04
    f622:	15 82       	std	Z+5, r1	; 0x05
    f624:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	 uart_print(1, 0,strSend);
    f628:	8d b7       	in	r24, 0x3d	; 61
    f62a:	9e b7       	in	r25, 0x3e	; 62
    f62c:	06 96       	adiw	r24, 0x06	; 6
    f62e:	0f b6       	in	r0, 0x3f	; 63
    f630:	f8 94       	cli
    f632:	9e bf       	out	0x3e, r25	; 62
    f634:	0f be       	out	0x3f, r0	; 63
    f636:	8d bf       	out	0x3d, r24	; 61
    f638:	81 e0       	ldi	r24, 0x01	; 1
    f63a:	60 e0       	ldi	r22, 0x00	; 0
    f63c:	a6 01       	movw	r20, r12
    f63e:	0e 94 da a8 	call	0x151b4	; 0x151b4 <uart_print>

     switch(MsgCode){
    f642:	02 33       	cpi	r16, 0x32	; 50
    f644:	09 f4       	brne	.+2      	; 0xf648 <IFTSendMessage+0x204>
    f646:	7f c0       	rjmp	.+254    	; 0xf746 <IFTSendMessage+0x302>
    f648:	03 33       	cpi	r16, 0x33	; 51
    f64a:	70 f4       	brcc	.+28     	; 0xf668 <IFTSendMessage+0x224>
    f64c:	02 32       	cpi	r16, 0x22	; 34
    f64e:	91 f1       	breq	.+100    	; 0xf6b4 <IFTSendMessage+0x270>
    f650:	03 32       	cpi	r16, 0x23	; 35
    f652:	20 f4       	brcc	.+8      	; 0xf65c <IFTSendMessage+0x218>
    f654:	04 30       	cpi	r16, 0x04	; 4
    f656:	09 f0       	breq	.+2      	; 0xf65a <IFTSendMessage+0x216>
    f658:	1d c2       	rjmp	.+1082   	; 0xfa94 <IFTSendMessage+0x650>
    f65a:	19 c0       	rjmp	.+50     	; 0xf68e <IFTSendMessage+0x24a>
    f65c:	04 32       	cpi	r16, 0x24	; 36
    f65e:	d9 f1       	breq	.+118    	; 0xf6d6 <IFTSendMessage+0x292>
    f660:	08 32       	cpi	r16, 0x28	; 40
    f662:	09 f0       	breq	.+2      	; 0xf666 <IFTSendMessage+0x222>
    f664:	17 c2       	rjmp	.+1070   	; 0xfa94 <IFTSendMessage+0x650>
    f666:	53 c0       	rjmp	.+166    	; 0xf70e <IFTSendMessage+0x2ca>
    f668:	00 39       	cpi	r16, 0x90	; 144
    f66a:	09 f4       	brne	.+2      	; 0xf66e <IFTSendMessage+0x22a>
    f66c:	78 c1       	rjmp	.+752    	; 0xf95e <IFTSendMessage+0x51a>
    f66e:	01 39       	cpi	r16, 0x91	; 145
    f670:	38 f4       	brcc	.+14     	; 0xf680 <IFTSendMessage+0x23c>
    f672:	06 35       	cpi	r16, 0x56	; 86
    f674:	09 f4       	brne	.+2      	; 0xf678 <IFTSendMessage+0x234>
    f676:	d7 c0       	rjmp	.+430    	; 0xf826 <IFTSendMessage+0x3e2>
    f678:	08 35       	cpi	r16, 0x58	; 88
    f67a:	09 f0       	breq	.+2      	; 0xf67e <IFTSendMessage+0x23a>
    f67c:	0b c2       	rjmp	.+1046   	; 0xfa94 <IFTSendMessage+0x650>
    f67e:	e8 c0       	rjmp	.+464    	; 0xf850 <IFTSendMessage+0x40c>
    f680:	02 39       	cpi	r16, 0x92	; 146
    f682:	09 f4       	brne	.+2      	; 0xf686 <IFTSendMessage+0x242>
    f684:	8d c1       	rjmp	.+794    	; 0xf9a0 <IFTSendMessage+0x55c>
    f686:	08 39       	cpi	r16, 0x98	; 152
    f688:	09 f0       	breq	.+2      	; 0xf68c <IFTSendMessage+0x248>
    f68a:	04 c2       	rjmp	.+1032   	; 0xfa94 <IFTSendMessage+0x650>
    f68c:	e0 c1       	rjmp	.+960    	; 0xfa4e <IFTSendMessage+0x60a>
	 case MSG_04://Transaction Number
	      sprintf_P(strSend,PSTR("%s1"),strTranNo);
    f68e:	00 d0       	rcall	.+0      	; 0xf690 <IFTSendMessage+0x24c>
    f690:	00 d0       	rcall	.+0      	; 0xf692 <IFTSendMessage+0x24e>
    f692:	00 d0       	rcall	.+0      	; 0xf694 <IFTSendMessage+0x250>
    f694:	ed b7       	in	r30, 0x3d	; 61
    f696:	fe b7       	in	r31, 0x3e	; 62
    f698:	31 96       	adiw	r30, 0x01	; 1
    f69a:	ad b7       	in	r26, 0x3d	; 61
    f69c:	be b7       	in	r27, 0x3e	; 62
    f69e:	12 96       	adiw	r26, 0x02	; 2
    f6a0:	dc 92       	st	X, r13
    f6a2:	ce 92       	st	-X, r12
    f6a4:	11 97       	sbiw	r26, 0x01	; 1
    f6a6:	8c e4       	ldi	r24, 0x4C	; 76
    f6a8:	93 e2       	ldi	r25, 0x23	; 35
    f6aa:	93 83       	std	Z+3, r25	; 0x03
    f6ac:	82 83       	std	Z+2, r24	; 0x02
    f6ae:	89 e0       	ldi	r24, 0x09	; 9
    f6b0:	9d e0       	ldi	r25, 0x0D	; 13
    f6b2:	df c1       	rjmp	.+958    	; 0xfa72 <IFTSendMessage+0x62e>
	      uart_print(1, 0,strSend);
	      break;
	 case MSG_10://No Additional Parameter
	      break;
	 case MSG_22://strCardID
	      UpdateCardID();
    f6b4:	0e 94 ce 3e 	call	0x7d9c	; 0x7d9c <UpdateCardID>
	      sprintf_P(strSend,PSTR("%s"),strCardID);
    f6b8:	00 d0       	rcall	.+0      	; 0xf6ba <IFTSendMessage+0x276>
    f6ba:	00 d0       	rcall	.+0      	; 0xf6bc <IFTSendMessage+0x278>
    f6bc:	00 d0       	rcall	.+0      	; 0xf6be <IFTSendMessage+0x27a>
    f6be:	ed b7       	in	r30, 0x3d	; 61
    f6c0:	fe b7       	in	r31, 0x3e	; 62
    f6c2:	31 96       	adiw	r30, 0x01	; 1
    f6c4:	ad b7       	in	r26, 0x3d	; 61
    f6c6:	be b7       	in	r27, 0x3e	; 62
    f6c8:	12 96       	adiw	r26, 0x02	; 2
    f6ca:	dc 92       	st	X, r13
    f6cc:	ce 92       	st	-X, r12
    f6ce:	11 97       	sbiw	r26, 0x01	; 1
    f6d0:	89 e4       	ldi	r24, 0x49	; 73
    f6d2:	93 e2       	ldi	r25, 0x23	; 35
    f6d4:	b8 c0       	rjmp	.+368    	; 0xf846 <IFTSendMessage+0x402>
	      uart_print(1, 0,strSend);
	      break;
	 case MSG_24://strCardID, FIP_ID
	      UpdateCardID();
    f6d6:	0e 94 ce 3e 	call	0x7d9c	; 0x7d9c <UpdateCardID>
	      sprintf_P(strSend,PSTR("%s%s"),strCardID,strFIP_ID);
    f6da:	ad b7       	in	r26, 0x3d	; 61
    f6dc:	be b7       	in	r27, 0x3e	; 62
    f6de:	18 97       	sbiw	r26, 0x08	; 8
    f6e0:	0f b6       	in	r0, 0x3f	; 63
    f6e2:	f8 94       	cli
    f6e4:	be bf       	out	0x3e, r27	; 62
    f6e6:	0f be       	out	0x3f, r0	; 63
    f6e8:	ad bf       	out	0x3d, r26	; 61
    f6ea:	ed b7       	in	r30, 0x3d	; 61
    f6ec:	fe b7       	in	r31, 0x3e	; 62
    f6ee:	31 96       	adiw	r30, 0x01	; 1
    f6f0:	12 96       	adiw	r26, 0x02	; 2
    f6f2:	dc 92       	st	X, r13
    f6f4:	ce 92       	st	-X, r12
    f6f6:	11 97       	sbiw	r26, 0x01	; 1
    f6f8:	84 e4       	ldi	r24, 0x44	; 68
    f6fa:	93 e2       	ldi	r25, 0x23	; 35
    f6fc:	93 83       	std	Z+3, r25	; 0x03
    f6fe:	82 83       	std	Z+2, r24	; 0x02
    f700:	8b e0       	ldi	r24, 0x0B	; 11
    f702:	9c e0       	ldi	r25, 0x0C	; 12
    f704:	95 83       	std	Z+5, r25	; 0x05
    f706:	84 83       	std	Z+4, r24	; 0x04
    f708:	8b e3       	ldi	r24, 0x3B	; 59
    f70a:	98 e0       	ldi	r25, 0x08	; 8
    f70c:	41 c1       	rjmp	.+642    	; 0xf990 <IFTSendMessage+0x54c>
	      uart_print(1, 0,strSend);
	      break;

	 case MSG_28://strCardID, FIP_ID
	      UpdateCardID();
    f70e:	0e 94 ce 3e 	call	0x7d9c	; 0x7d9c <UpdateCardID>
	      sprintf_P(strSend,PSTR("%s%s"),strFIP_ID,strCardID);
    f712:	ad b7       	in	r26, 0x3d	; 61
    f714:	be b7       	in	r27, 0x3e	; 62
    f716:	18 97       	sbiw	r26, 0x08	; 8
    f718:	0f b6       	in	r0, 0x3f	; 63
    f71a:	f8 94       	cli
    f71c:	be bf       	out	0x3e, r27	; 62
    f71e:	0f be       	out	0x3f, r0	; 63
    f720:	ad bf       	out	0x3d, r26	; 61
    f722:	ed b7       	in	r30, 0x3d	; 61
    f724:	fe b7       	in	r31, 0x3e	; 62
    f726:	31 96       	adiw	r30, 0x01	; 1
    f728:	12 96       	adiw	r26, 0x02	; 2
    f72a:	dc 92       	st	X, r13
    f72c:	ce 92       	st	-X, r12
    f72e:	11 97       	sbiw	r26, 0x01	; 1
    f730:	8f e3       	ldi	r24, 0x3F	; 63
    f732:	93 e2       	ldi	r25, 0x23	; 35
    f734:	93 83       	std	Z+3, r25	; 0x03
    f736:	82 83       	std	Z+2, r24	; 0x02
    f738:	8b e3       	ldi	r24, 0x3B	; 59
    f73a:	98 e0       	ldi	r25, 0x08	; 8
    f73c:	95 83       	std	Z+5, r25	; 0x05
    f73e:	84 83       	std	Z+4, r24	; 0x04
    f740:	8b e0       	ldi	r24, 0x0B	; 11
    f742:	9c e0       	ldi	r25, 0x0C	; 12
    f744:	25 c1       	rjmp	.+586    	; 0xf990 <IFTSendMessage+0x54c>
	      uart_print(1, 0,strSend);
	      break;
	 case MSG_32://Change MOP
	      UpdateCardID();
    f746:	0e 94 ce 3e 	call	0x7d9c	; 0x7d9c <UpdateCardID>
	      sprintf_P(strSend,PSTR("%s%s"),strFIP_ID,strPaymentType);
    f74a:	ad b7       	in	r26, 0x3d	; 61
    f74c:	be b7       	in	r27, 0x3e	; 62
    f74e:	18 97       	sbiw	r26, 0x08	; 8
    f750:	0f b6       	in	r0, 0x3f	; 63
    f752:	f8 94       	cli
    f754:	be bf       	out	0x3e, r27	; 62
    f756:	0f be       	out	0x3f, r0	; 63
    f758:	ad bf       	out	0x3d, r26	; 61
    f75a:	ed b7       	in	r30, 0x3d	; 61
    f75c:	fe b7       	in	r31, 0x3e	; 62
    f75e:	31 96       	adiw	r30, 0x01	; 1
    f760:	12 96       	adiw	r26, 0x02	; 2
    f762:	dc 92       	st	X, r13
    f764:	ce 92       	st	-X, r12
    f766:	11 97       	sbiw	r26, 0x01	; 1
    f768:	8a e3       	ldi	r24, 0x3A	; 58
    f76a:	93 e2       	ldi	r25, 0x23	; 35
    f76c:	93 83       	std	Z+3, r25	; 0x03
    f76e:	82 83       	std	Z+2, r24	; 0x02
    f770:	8b e3       	ldi	r24, 0x3B	; 59
    f772:	98 e0       	ldi	r25, 0x08	; 8
    f774:	95 83       	std	Z+5, r25	; 0x05
    f776:	84 83       	std	Z+4, r24	; 0x04
    f778:	82 ed       	ldi	r24, 0xD2	; 210
    f77a:	97 e0       	ldi	r25, 0x07	; 7
    f77c:	97 83       	std	Z+7, r25	; 0x07
    f77e:	86 83       	std	Z+6, r24	; 0x06
    f780:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	      uart_print(1,0,strSend);
    f784:	8d b7       	in	r24, 0x3d	; 61
    f786:	9e b7       	in	r25, 0x3e	; 62
    f788:	08 96       	adiw	r24, 0x08	; 8
    f78a:	0f b6       	in	r0, 0x3f	; 63
    f78c:	f8 94       	cli
    f78e:	9e bf       	out	0x3e, r25	; 62
    f790:	0f be       	out	0x3f, r0	; 63
    f792:	8d bf       	out	0x3d, r24	; 61
    f794:	81 e0       	ldi	r24, 0x01	; 1
    f796:	60 e0       	ldi	r22, 0x00	; 0
    f798:	a6 01       	movw	r20, r12
    f79a:	0e 94 da a8 	call	0x151b4	; 0x151b4 <uart_print>
		  sprintf_P(strSend,PSTR("%s%s"),strRef1,strRef2);
    f79e:	ad b7       	in	r26, 0x3d	; 61
    f7a0:	be b7       	in	r27, 0x3e	; 62
    f7a2:	18 97       	sbiw	r26, 0x08	; 8
    f7a4:	0f b6       	in	r0, 0x3f	; 63
    f7a6:	f8 94       	cli
    f7a8:	be bf       	out	0x3e, r27	; 62
    f7aa:	0f be       	out	0x3f, r0	; 63
    f7ac:	ad bf       	out	0x3d, r26	; 61
    f7ae:	ed b7       	in	r30, 0x3d	; 61
    f7b0:	fe b7       	in	r31, 0x3e	; 62
    f7b2:	31 96       	adiw	r30, 0x01	; 1
    f7b4:	12 96       	adiw	r26, 0x02	; 2
    f7b6:	dc 92       	st	X, r13
    f7b8:	ce 92       	st	-X, r12
    f7ba:	11 97       	sbiw	r26, 0x01	; 1
    f7bc:	85 e3       	ldi	r24, 0x35	; 53
    f7be:	93 e2       	ldi	r25, 0x23	; 35
    f7c0:	93 83       	std	Z+3, r25	; 0x03
    f7c2:	82 83       	std	Z+2, r24	; 0x02
    f7c4:	80 e1       	ldi	r24, 0x10	; 16
    f7c6:	9d e0       	ldi	r25, 0x0D	; 13
    f7c8:	95 83       	std	Z+5, r25	; 0x05
    f7ca:	84 83       	std	Z+4, r24	; 0x04
    f7cc:	80 e2       	ldi	r24, 0x20	; 32
    f7ce:	9c e0       	ldi	r25, 0x0C	; 12
    f7d0:	97 83       	std	Z+7, r25	; 0x07
    f7d2:	86 83       	std	Z+6, r24	; 0x06
    f7d4:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
		  uart_print(1,0,strSend);
    f7d8:	8d b7       	in	r24, 0x3d	; 61
    f7da:	9e b7       	in	r25, 0x3e	; 62
    f7dc:	08 96       	adiw	r24, 0x08	; 8
    f7de:	0f b6       	in	r0, 0x3f	; 63
    f7e0:	f8 94       	cli
    f7e2:	9e bf       	out	0x3e, r25	; 62
    f7e4:	0f be       	out	0x3f, r0	; 63
    f7e6:	8d bf       	out	0x3d, r24	; 61
    f7e8:	81 e0       	ldi	r24, 0x01	; 1
    f7ea:	60 e0       	ldi	r22, 0x00	; 0
    f7ec:	a6 01       	movw	r20, r12
    f7ee:	0e 94 da a8 	call	0x151b4	; 0x151b4 <uart_print>
		  sprintf_P(strSend,PSTR("%s%s"),strRef3,strRef4);
    f7f2:	ad b7       	in	r26, 0x3d	; 61
    f7f4:	be b7       	in	r27, 0x3e	; 62
    f7f6:	18 97       	sbiw	r26, 0x08	; 8
    f7f8:	0f b6       	in	r0, 0x3f	; 63
    f7fa:	f8 94       	cli
    f7fc:	be bf       	out	0x3e, r27	; 62
    f7fe:	0f be       	out	0x3f, r0	; 63
    f800:	ad bf       	out	0x3d, r26	; 61
    f802:	ed b7       	in	r30, 0x3d	; 61
    f804:	fe b7       	in	r31, 0x3e	; 62
    f806:	31 96       	adiw	r30, 0x01	; 1
    f808:	12 96       	adiw	r26, 0x02	; 2
    f80a:	dc 92       	st	X, r13
    f80c:	ce 92       	st	-X, r12
    f80e:	11 97       	sbiw	r26, 0x01	; 1
    f810:	80 e3       	ldi	r24, 0x30	; 48
    f812:	93 e2       	ldi	r25, 0x23	; 35
    f814:	93 83       	std	Z+3, r25	; 0x03
    f816:	82 83       	std	Z+2, r24	; 0x02
    f818:	8f ef       	ldi	r24, 0xFF	; 255
    f81a:	98 e0       	ldi	r25, 0x08	; 8
    f81c:	95 83       	std	Z+5, r25	; 0x05
    f81e:	84 83       	std	Z+4, r24	; 0x04
    f820:	87 e2       	ldi	r24, 0x27	; 39
    f822:	94 e0       	ldi	r25, 0x04	; 4
    f824:	b5 c0       	rjmp	.+362    	; 0xf990 <IFTSendMessage+0x54c>
		  uart_print(1,0,strSend);
	      break;

	 case MSG_56://strCardID, FIP_ID
	      UpdateCardID();
    f826:	0e 94 ce 3e 	call	0x7d9c	; 0x7d9c <UpdateCardID>
	      sprintf_P(strSend,PSTR("%s"),strCardID);
    f82a:	00 d0       	rcall	.+0      	; 0xf82c <IFTSendMessage+0x3e8>
    f82c:	00 d0       	rcall	.+0      	; 0xf82e <IFTSendMessage+0x3ea>
    f82e:	00 d0       	rcall	.+0      	; 0xf830 <IFTSendMessage+0x3ec>
    f830:	ed b7       	in	r30, 0x3d	; 61
    f832:	fe b7       	in	r31, 0x3e	; 62
    f834:	31 96       	adiw	r30, 0x01	; 1
    f836:	ad b7       	in	r26, 0x3d	; 61
    f838:	be b7       	in	r27, 0x3e	; 62
    f83a:	12 96       	adiw	r26, 0x02	; 2
    f83c:	dc 92       	st	X, r13
    f83e:	ce 92       	st	-X, r12
    f840:	11 97       	sbiw	r26, 0x01	; 1
    f842:	8d e2       	ldi	r24, 0x2D	; 45
    f844:	93 e2       	ldi	r25, 0x23	; 35
    f846:	93 83       	std	Z+3, r25	; 0x03
    f848:	82 83       	std	Z+2, r24	; 0x02
    f84a:	8b e0       	ldi	r24, 0x0B	; 11
    f84c:	9c e0       	ldi	r25, 0x0C	; 12
    f84e:	11 c1       	rjmp	.+546    	; 0xfa72 <IFTSendMessage+0x62e>
	      uart_print(1, 0,strSend);
	      break;
	 case MSG_58://Request Local Account Transaction
	      UpdateCardID();
    f850:	0e 94 ce 3e 	call	0x7d9c	; 0x7d9c <UpdateCardID>
		  AddSpaceLead(strBalanceValue,13);
    f854:	31 ea       	ldi	r19, 0xA1	; 161
    f856:	a3 2e       	mov	r10, r19
    f858:	3c e0       	ldi	r19, 0x0C	; 12
    f85a:	b3 2e       	mov	r11, r19
    f85c:	c5 01       	movw	r24, r10
    f85e:	6d e0       	ldi	r22, 0x0D	; 13
    f860:	0e 94 5d 2d 	call	0x5aba	; 0x5aba <AddSpaceLead>
		  AddSpaceLead(strOdometer,10);
    f864:	25 e4       	ldi	r18, 0x45	; 69
    f866:	e2 2e       	mov	r14, r18
    f868:	24 e0       	ldi	r18, 0x04	; 4
    f86a:	f2 2e       	mov	r15, r18
    f86c:	c7 01       	movw	r24, r14
    f86e:	6a e0       	ldi	r22, 0x0A	; 10
    f870:	0e 94 5d 2d 	call	0x5aba	; 0x5aba <AddSpaceLead>
		  CardType=0;
    f874:	10 92 0b 04 	sts	0x040B, r1
		  sprintf_P(strSend,PSTR("%s%s%d"),strCardID,strFIP_ID,NozzleID);
    f878:	ad b7       	in	r26, 0x3d	; 61
    f87a:	be b7       	in	r27, 0x3e	; 62
    f87c:	1a 97       	sbiw	r26, 0x0a	; 10
    f87e:	0f b6       	in	r0, 0x3f	; 63
    f880:	f8 94       	cli
    f882:	be bf       	out	0x3e, r27	; 62
    f884:	0f be       	out	0x3f, r0	; 63
    f886:	ad bf       	out	0x3d, r26	; 61
    f888:	ed b7       	in	r30, 0x3d	; 61
    f88a:	fe b7       	in	r31, 0x3e	; 62
    f88c:	31 96       	adiw	r30, 0x01	; 1
    f88e:	12 96       	adiw	r26, 0x02	; 2
    f890:	dc 92       	st	X, r13
    f892:	ce 92       	st	-X, r12
    f894:	11 97       	sbiw	r26, 0x01	; 1
    f896:	86 e2       	ldi	r24, 0x26	; 38
    f898:	93 e2       	ldi	r25, 0x23	; 35
    f89a:	93 83       	std	Z+3, r25	; 0x03
    f89c:	82 83       	std	Z+2, r24	; 0x02
    f89e:	8b e0       	ldi	r24, 0x0B	; 11
    f8a0:	9c e0       	ldi	r25, 0x0C	; 12
    f8a2:	95 83       	std	Z+5, r25	; 0x05
    f8a4:	84 83       	std	Z+4, r24	; 0x04
    f8a6:	8b e3       	ldi	r24, 0x3B	; 59
    f8a8:	98 e0       	ldi	r25, 0x08	; 8
    f8aa:	97 83       	std	Z+7, r25	; 0x07
    f8ac:	86 83       	std	Z+6, r24	; 0x06
    f8ae:	80 91 ef 07 	lds	r24, 0x07EF
    f8b2:	80 87       	std	Z+8, r24	; 0x08
    f8b4:	11 86       	std	Z+9, r1	; 0x09
    f8b6:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
		  uart_print(1,0,strSend);
    f8ba:	8d b7       	in	r24, 0x3d	; 61
    f8bc:	9e b7       	in	r25, 0x3e	; 62
    f8be:	0a 96       	adiw	r24, 0x0a	; 10
    f8c0:	0f b6       	in	r0, 0x3f	; 63
    f8c2:	f8 94       	cli
    f8c4:	9e bf       	out	0x3e, r25	; 62
    f8c6:	0f be       	out	0x3f, r0	; 63
    f8c8:	8d bf       	out	0x3d, r24	; 61
    f8ca:	81 e0       	ldi	r24, 0x01	; 1
    f8cc:	60 e0       	ldi	r22, 0x00	; 0
    f8ce:	a6 01       	movw	r20, r12
    f8d0:	0e 94 da a8 	call	0x151b4	; 0x151b4 <uart_print>
		  sprintf_P(strSend,PSTR("%s%s%d"),strBalanceType,strBalanceValue,CardType);
    f8d4:	ad b7       	in	r26, 0x3d	; 61
    f8d6:	be b7       	in	r27, 0x3e	; 62
    f8d8:	1a 97       	sbiw	r26, 0x0a	; 10
    f8da:	0f b6       	in	r0, 0x3f	; 63
    f8dc:	f8 94       	cli
    f8de:	be bf       	out	0x3e, r27	; 62
    f8e0:	0f be       	out	0x3f, r0	; 63
    f8e2:	ad bf       	out	0x3d, r26	; 61
    f8e4:	ed b7       	in	r30, 0x3d	; 61
    f8e6:	fe b7       	in	r31, 0x3e	; 62
    f8e8:	31 96       	adiw	r30, 0x01	; 1
    f8ea:	12 96       	adiw	r26, 0x02	; 2
    f8ec:	dc 92       	st	X, r13
    f8ee:	ce 92       	st	-X, r12
    f8f0:	11 97       	sbiw	r26, 0x01	; 1
    f8f2:	8f e1       	ldi	r24, 0x1F	; 31
    f8f4:	93 e2       	ldi	r25, 0x23	; 35
    f8f6:	93 83       	std	Z+3, r25	; 0x03
    f8f8:	82 83       	std	Z+2, r24	; 0x02
    f8fa:	85 e2       	ldi	r24, 0x25	; 37
    f8fc:	94 e0       	ldi	r25, 0x04	; 4
    f8fe:	95 83       	std	Z+5, r25	; 0x05
    f900:	84 83       	std	Z+4, r24	; 0x04
    f902:	b7 82       	std	Z+7, r11	; 0x07
    f904:	a6 82       	std	Z+6, r10	; 0x06
    f906:	80 91 0b 04 	lds	r24, 0x040B
    f90a:	80 87       	std	Z+8, r24	; 0x08
    f90c:	11 86       	std	Z+9, r1	; 0x09
    f90e:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
		  uart_print(1,0,strSend);
    f912:	8d b7       	in	r24, 0x3d	; 61
    f914:	9e b7       	in	r25, 0x3e	; 62
    f916:	0a 96       	adiw	r24, 0x0a	; 10
    f918:	0f b6       	in	r0, 0x3f	; 63
    f91a:	f8 94       	cli
    f91c:	9e bf       	out	0x3e, r25	; 62
    f91e:	0f be       	out	0x3f, r0	; 63
    f920:	8d bf       	out	0x3d, r24	; 61
    f922:	81 e0       	ldi	r24, 0x01	; 1
    f924:	60 e0       	ldi	r22, 0x00	; 0
    f926:	a6 01       	movw	r20, r12
    f928:	0e 94 da a8 	call	0x151b4	; 0x151b4 <uart_print>
		  uart_printf(1,0,PSTR("F0000000E123456FFFFF"));
    f92c:	81 e0       	ldi	r24, 0x01	; 1
    f92e:	60 e0       	ldi	r22, 0x00	; 0
    f930:	4a e0       	ldi	r20, 0x0A	; 10
    f932:	53 e2       	ldi	r21, 0x23	; 35
    f934:	0e 94 02 a9 	call	0x15204	; 0x15204 <uart_printf>
		  sprintf_P(strSend,PSTR("%s"),strOdometer);
    f938:	00 d0       	rcall	.+0      	; 0xf93a <IFTSendMessage+0x4f6>
    f93a:	00 d0       	rcall	.+0      	; 0xf93c <IFTSendMessage+0x4f8>
    f93c:	00 d0       	rcall	.+0      	; 0xf93e <IFTSendMessage+0x4fa>
    f93e:	ed b7       	in	r30, 0x3d	; 61
    f940:	fe b7       	in	r31, 0x3e	; 62
    f942:	31 96       	adiw	r30, 0x01	; 1
    f944:	ad b7       	in	r26, 0x3d	; 61
    f946:	be b7       	in	r27, 0x3e	; 62
    f948:	12 96       	adiw	r26, 0x02	; 2
    f94a:	dc 92       	st	X, r13
    f94c:	ce 92       	st	-X, r12
    f94e:	11 97       	sbiw	r26, 0x01	; 1
    f950:	87 e0       	ldi	r24, 0x07	; 7
    f952:	93 e2       	ldi	r25, 0x23	; 35
    f954:	93 83       	std	Z+3, r25	; 0x03
    f956:	82 83       	std	Z+2, r24	; 0x02
    f958:	f5 82       	std	Z+5, r15	; 0x05
    f95a:	e4 82       	std	Z+4, r14	; 0x04
    f95c:	8c c0       	rjmp	.+280    	; 0xfa76 <IFTSendMessage+0x632>
		  uart_print(1,0,strSend);
		  break;
	 case MSG_90://Request EDC
	      sprintf_P(strSend,PSTR("%s%s"),strFIP_ID,strRef1);
    f95e:	ad b7       	in	r26, 0x3d	; 61
    f960:	be b7       	in	r27, 0x3e	; 62
    f962:	18 97       	sbiw	r26, 0x08	; 8
    f964:	0f b6       	in	r0, 0x3f	; 63
    f966:	f8 94       	cli
    f968:	be bf       	out	0x3e, r27	; 62
    f96a:	0f be       	out	0x3f, r0	; 63
    f96c:	ad bf       	out	0x3d, r26	; 61
    f96e:	ed b7       	in	r30, 0x3d	; 61
    f970:	fe b7       	in	r31, 0x3e	; 62
    f972:	31 96       	adiw	r30, 0x01	; 1
    f974:	12 96       	adiw	r26, 0x02	; 2
    f976:	dc 92       	st	X, r13
    f978:	ce 92       	st	-X, r12
    f97a:	11 97       	sbiw	r26, 0x01	; 1
    f97c:	82 e0       	ldi	r24, 0x02	; 2
    f97e:	93 e2       	ldi	r25, 0x23	; 35
    f980:	93 83       	std	Z+3, r25	; 0x03
    f982:	82 83       	std	Z+2, r24	; 0x02
    f984:	8b e3       	ldi	r24, 0x3B	; 59
    f986:	98 e0       	ldi	r25, 0x08	; 8
    f988:	95 83       	std	Z+5, r25	; 0x05
    f98a:	84 83       	std	Z+4, r24	; 0x04
    f98c:	80 e1       	ldi	r24, 0x10	; 16
    f98e:	9d e0       	ldi	r25, 0x0D	; 13
    f990:	97 83       	std	Z+7, r25	; 0x07
    f992:	86 83       	std	Z+6, r24	; 0x06
    f994:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	      uart_print(1, 0,strSend);
    f998:	8d b7       	in	r24, 0x3d	; 61
    f99a:	9e b7       	in	r25, 0x3e	; 62
    f99c:	08 96       	adiw	r24, 0x08	; 8
    f99e:	70 c0       	rjmp	.+224    	; 0xfa80 <IFTSendMessage+0x63c>
	      break;
	 case MSG_92://EDC Approval
		  sprintf_P(strSend,PSTR("%s%s%s%s"),strTranNo,strFIP_ID,strCardType,strCardID);
    f9a0:	ad b7       	in	r26, 0x3d	; 61
    f9a2:	be b7       	in	r27, 0x3e	; 62
    f9a4:	1c 97       	sbiw	r26, 0x0c	; 12
    f9a6:	0f b6       	in	r0, 0x3f	; 63
    f9a8:	f8 94       	cli
    f9aa:	be bf       	out	0x3e, r27	; 62
    f9ac:	0f be       	out	0x3f, r0	; 63
    f9ae:	ad bf       	out	0x3d, r26	; 61
    f9b0:	ed b7       	in	r30, 0x3d	; 61
    f9b2:	fe b7       	in	r31, 0x3e	; 62
    f9b4:	31 96       	adiw	r30, 0x01	; 1
    f9b6:	12 96       	adiw	r26, 0x02	; 2
    f9b8:	dc 92       	st	X, r13
    f9ba:	ce 92       	st	-X, r12
    f9bc:	11 97       	sbiw	r26, 0x01	; 1
    f9be:	89 ef       	ldi	r24, 0xF9	; 249
    f9c0:	92 e2       	ldi	r25, 0x22	; 34
    f9c2:	93 83       	std	Z+3, r25	; 0x03
    f9c4:	82 83       	std	Z+2, r24	; 0x02
    f9c6:	89 e0       	ldi	r24, 0x09	; 9
    f9c8:	9d e0       	ldi	r25, 0x0D	; 13
    f9ca:	95 83       	std	Z+5, r25	; 0x05
    f9cc:	84 83       	std	Z+4, r24	; 0x04
    f9ce:	8b e3       	ldi	r24, 0x3B	; 59
    f9d0:	98 e0       	ldi	r25, 0x08	; 8
    f9d2:	97 83       	std	Z+7, r25	; 0x07
    f9d4:	86 83       	std	Z+6, r24	; 0x06
    f9d6:	85 e2       	ldi	r24, 0x25	; 37
    f9d8:	9d e0       	ldi	r25, 0x0D	; 13
    f9da:	91 87       	std	Z+9, r25	; 0x09
    f9dc:	80 87       	std	Z+8, r24	; 0x08
    f9de:	8b e0       	ldi	r24, 0x0B	; 11
    f9e0:	9c e0       	ldi	r25, 0x0C	; 12
    f9e2:	93 87       	std	Z+11, r25	; 0x0b
    f9e4:	82 87       	std	Z+10, r24	; 0x0a
    f9e6:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	      uart_print(1,0,strSend);	    
    f9ea:	8d b7       	in	r24, 0x3d	; 61
    f9ec:	9e b7       	in	r25, 0x3e	; 62
    f9ee:	0c 96       	adiw	r24, 0x0c	; 12
    f9f0:	0f b6       	in	r0, 0x3f	; 63
    f9f2:	f8 94       	cli
    f9f4:	9e bf       	out	0x3e, r25	; 62
    f9f6:	0f be       	out	0x3f, r0	; 63
    f9f8:	8d bf       	out	0x3d, r24	; 61
    f9fa:	81 e0       	ldi	r24, 0x01	; 1
    f9fc:	60 e0       	ldi	r22, 0x00	; 0
    f9fe:	a6 01       	movw	r20, r12
    fa00:	0e 94 da a8 	call	0x151b4	; 0x151b4 <uart_print>
		  sprintf_P(strSend,PSTR("%s%s%s"),strApprovalCode,strInvoiceNumber,strDateTime);
    fa04:	ad b7       	in	r26, 0x3d	; 61
    fa06:	be b7       	in	r27, 0x3e	; 62
    fa08:	1a 97       	sbiw	r26, 0x0a	; 10
    fa0a:	0f b6       	in	r0, 0x3f	; 63
    fa0c:	f8 94       	cli
    fa0e:	be bf       	out	0x3e, r27	; 62
    fa10:	0f be       	out	0x3f, r0	; 63
    fa12:	ad bf       	out	0x3d, r26	; 61
    fa14:	ed b7       	in	r30, 0x3d	; 61
    fa16:	fe b7       	in	r31, 0x3e	; 62
    fa18:	31 96       	adiw	r30, 0x01	; 1
    fa1a:	12 96       	adiw	r26, 0x02	; 2
    fa1c:	dc 92       	st	X, r13
    fa1e:	ce 92       	st	-X, r12
    fa20:	11 97       	sbiw	r26, 0x01	; 1
    fa22:	82 ef       	ldi	r24, 0xF2	; 242
    fa24:	92 e2       	ldi	r25, 0x22	; 34
    fa26:	93 83       	std	Z+3, r25	; 0x03
    fa28:	82 83       	std	Z+2, r24	; 0x02
    fa2a:	82 e7       	ldi	r24, 0x72	; 114
    fa2c:	98 e0       	ldi	r25, 0x08	; 8
    fa2e:	95 83       	std	Z+5, r25	; 0x05
    fa30:	84 83       	std	Z+4, r24	; 0x04
    fa32:	85 ed       	ldi	r24, 0xD5	; 213
    fa34:	97 e0       	ldi	r25, 0x07	; 7
    fa36:	97 83       	std	Z+7, r25	; 0x07
    fa38:	86 83       	std	Z+6, r24	; 0x06
    fa3a:	81 e4       	ldi	r24, 0x41	; 65
    fa3c:	9c e0       	ldi	r25, 0x0C	; 12
    fa3e:	91 87       	std	Z+9, r25	; 0x09
    fa40:	80 87       	std	Z+8, r24	; 0x08
    fa42:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	      uart_print(1,0,strSend);
    fa46:	8d b7       	in	r24, 0x3d	; 61
    fa48:	9e b7       	in	r25, 0x3e	; 62
    fa4a:	0a 96       	adiw	r24, 0x0a	; 10
    fa4c:	19 c0       	rjmp	.+50     	; 0xfa80 <IFTSendMessage+0x63c>
	      break;	 
	 case MSG_98://Request Transaction Info
	      sprintf_P(strSend,PSTR("%s"),strFIP_ID);
    fa4e:	00 d0       	rcall	.+0      	; 0xfa50 <IFTSendMessage+0x60c>
    fa50:	00 d0       	rcall	.+0      	; 0xfa52 <IFTSendMessage+0x60e>
    fa52:	00 d0       	rcall	.+0      	; 0xfa54 <IFTSendMessage+0x610>
    fa54:	ed b7       	in	r30, 0x3d	; 61
    fa56:	fe b7       	in	r31, 0x3e	; 62
    fa58:	31 96       	adiw	r30, 0x01	; 1
    fa5a:	ad b7       	in	r26, 0x3d	; 61
    fa5c:	be b7       	in	r27, 0x3e	; 62
    fa5e:	12 96       	adiw	r26, 0x02	; 2
    fa60:	dc 92       	st	X, r13
    fa62:	ce 92       	st	-X, r12
    fa64:	11 97       	sbiw	r26, 0x01	; 1
    fa66:	8f ee       	ldi	r24, 0xEF	; 239
    fa68:	92 e2       	ldi	r25, 0x22	; 34
    fa6a:	93 83       	std	Z+3, r25	; 0x03
    fa6c:	82 83       	std	Z+2, r24	; 0x02
    fa6e:	8b e3       	ldi	r24, 0x3B	; 59
    fa70:	98 e0       	ldi	r25, 0x08	; 8
    fa72:	95 83       	std	Z+5, r25	; 0x05
    fa74:	84 83       	std	Z+4, r24	; 0x04
    fa76:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	      uart_print(1, 0,strSend);
    fa7a:	8d b7       	in	r24, 0x3d	; 61
    fa7c:	9e b7       	in	r25, 0x3e	; 62
    fa7e:	06 96       	adiw	r24, 0x06	; 6
    fa80:	0f b6       	in	r0, 0x3f	; 63
    fa82:	f8 94       	cli
    fa84:	9e bf       	out	0x3e, r25	; 62
    fa86:	0f be       	out	0x3f, r0	; 63
    fa88:	8d bf       	out	0x3d, r24	; 61
    fa8a:	81 e0       	ldi	r24, 0x01	; 1
    fa8c:	60 e0       	ldi	r22, 0x00	; 0
    fa8e:	a6 01       	movw	r20, r12
    fa90:	0e 94 da a8 	call	0x151b4	; 0x151b4 <uart_print>
	      break;

	 }     
     //[Checksum]
	 uart_printf(1,0,PSTR("F968CFFB"));
    fa94:	81 e0       	ldi	r24, 0x01	; 1
    fa96:	60 e0       	ldi	r22, 0x00	; 0
    fa98:	46 ee       	ldi	r20, 0xE6	; 230
    fa9a:	52 e2       	ldi	r21, 0x22	; 34
    fa9c:	0e 94 02 a9 	call	0x15204	; 0x15204 <uart_printf>
	 //ETX
	 uart(1, 1,0x02);
    faa0:	81 e0       	ldi	r24, 0x01	; 1
    faa2:	61 e0       	ldi	r22, 0x01	; 1
    faa4:	42 e0       	ldi	r20, 0x02	; 2
    faa6:	0e 94 bd a8 	call	0x1517a	; 0x1517a <uart>
}
    faaa:	c0 5c       	subi	r28, 0xC0	; 192
    faac:	df 4f       	sbci	r29, 0xFF	; 255
    faae:	0f b6       	in	r0, 0x3f	; 63
    fab0:	f8 94       	cli
    fab2:	de bf       	out	0x3e, r29	; 62
    fab4:	0f be       	out	0x3f, r0	; 63
    fab6:	cd bf       	out	0x3d, r28	; 61
    fab8:	cf 91       	pop	r28
    faba:	df 91       	pop	r29
    fabc:	0f 91       	pop	r16
    fabe:	ff 90       	pop	r15
    fac0:	ef 90       	pop	r14
    fac2:	df 90       	pop	r13
    fac4:	cf 90       	pop	r12
    fac6:	bf 90       	pop	r11
    fac8:	af 90       	pop	r10
    faca:	08 95       	ret

0000facc <sendMessage98>:
	//if (xFIP_ID>16)xFIP_ID=16;
	sprintf_P(strSend,PSTR("%s%s%s%s98%.2dF968CFFB"),strIFT_ID,strSeqNum,strClientIP,strServerIP,xFIP_ID);
	uart_print(1, 0,strSend);
	uart(1, 1,0x02);
*/
    sprintf_P(strFIP_ID,PSTR("%.2d"),GetPumpID(FIPAddr));
    facc:	0e 94 87 20 	call	0x410e	; 0x410e <GetPumpID>
    fad0:	00 d0       	rcall	.+0      	; 0xfad2 <sendMessage98+0x6>
    fad2:	00 d0       	rcall	.+0      	; 0xfad4 <sendMessage98+0x8>
    fad4:	00 d0       	rcall	.+0      	; 0xfad6 <sendMessage98+0xa>
    fad6:	ed b7       	in	r30, 0x3d	; 61
    fad8:	fe b7       	in	r31, 0x3e	; 62
    fada:	31 96       	adiw	r30, 0x01	; 1
    fadc:	2b e3       	ldi	r18, 0x3B	; 59
    fade:	38 e0       	ldi	r19, 0x08	; 8
    fae0:	ad b7       	in	r26, 0x3d	; 61
    fae2:	be b7       	in	r27, 0x3e	; 62
    fae4:	12 96       	adiw	r26, 0x02	; 2
    fae6:	3c 93       	st	X, r19
    fae8:	2e 93       	st	-X, r18
    faea:	11 97       	sbiw	r26, 0x01	; 1
    faec:	21 ee       	ldi	r18, 0xE1	; 225
    faee:	32 e2       	ldi	r19, 0x22	; 34
    faf0:	33 83       	std	Z+3, r19	; 0x03
    faf2:	22 83       	std	Z+2, r18	; 0x02
    faf4:	84 83       	std	Z+4, r24	; 0x04
    faf6:	15 82       	std	Z+5, r1	; 0x05
    faf8:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	IFTSendMessage(MSG_98);
    fafc:	8d b7       	in	r24, 0x3d	; 61
    fafe:	9e b7       	in	r25, 0x3e	; 62
    fb00:	06 96       	adiw	r24, 0x06	; 6
    fb02:	0f b6       	in	r0, 0x3f	; 63
    fb04:	f8 94       	cli
    fb06:	9e bf       	out	0x3e, r25	; 62
    fb08:	0f be       	out	0x3f, r0	; 63
    fb0a:	8d bf       	out	0x3d, r24	; 61
    fb0c:	88 e9       	ldi	r24, 0x98	; 152
    fb0e:	0e 94 22 7a 	call	0xf444	; 0xf444 <IFTSendMessage>
	IsBusyMsg11=True;
    fb12:	81 e0       	ldi	r24, 0x01	; 1
    fb14:	80 93 ad 01 	sts	0x01AD, r24
}
    fb18:	08 95       	ret

0000fb1a <FMenuTicket>:
	    StrResult[2]='0'+Val;
	    StrResult[3]=0;
		}   
}

char FMenuTicket(){
    fb1a:	ef 92       	push	r14
    fb1c:	0f 93       	push	r16
    fb1e:	1f 93       	push	r17
    fb20:	df 93       	push	r29
    fb22:	cf 93       	push	r28
    fb24:	cd b7       	in	r28, 0x3d	; 61
    fb26:	de b7       	in	r29, 0x3e	; 62
    fb28:	64 97       	sbiw	r28, 0x14	; 20
    fb2a:	0f b6       	in	r0, 0x3f	; 63
    fb2c:	f8 94       	cli
    fb2e:	de bf       	out	0x3e, r29	; 62
    fb30:	0f be       	out	0x3f, r0	; 63
    fb32:	cd bf       	out	0x3d, r28	; 61
static unsigned int iLoop=0;
     char uiResult=USER_NONE,KeyPressed,KeyChar;
     char Result=MENU_NONE,lcdteks[20];

    Result=MENU_NONE;   
    switch(stMenuTicket){
    fb34:	80 91 0d 02 	lds	r24, 0x020D
    fb38:	86 30       	cpi	r24, 0x06	; 6
    fb3a:	09 f4       	brne	.+2      	; 0xfb3e <FMenuTicket+0x24>
    fb3c:	bf c0       	rjmp	.+382    	; 0xfcbc <FMenuTicket+0x1a2>
    fb3e:	87 30       	cpi	r24, 0x07	; 7
    fb40:	88 f4       	brcc	.+34     	; 0xfb64 <FMenuTicket+0x4a>
    fb42:	82 30       	cpi	r24, 0x02	; 2
    fb44:	e9 f1       	breq	.+122    	; 0xfbc0 <FMenuTicket+0xa6>
    fb46:	83 30       	cpi	r24, 0x03	; 3
    fb48:	30 f4       	brcc	.+12     	; 0xfb56 <FMenuTicket+0x3c>
    fb4a:	88 23       	and	r24, r24
    fb4c:	09 f1       	breq	.+66     	; 0xfb90 <FMenuTicket+0x76>
    fb4e:	81 30       	cpi	r24, 0x01	; 1
    fb50:	09 f0       	breq	.+2      	; 0xfb54 <FMenuTicket+0x3a>
    fb52:	21 c1       	rjmp	.+578    	; 0xfd96 <FMenuTicket+0x27c>
    fb54:	1f c0       	rjmp	.+62     	; 0xfb94 <FMenuTicket+0x7a>
    fb56:	84 30       	cpi	r24, 0x04	; 4
    fb58:	09 f4       	brne	.+2      	; 0xfb5c <FMenuTicket+0x42>
    fb5a:	87 c0       	rjmp	.+270    	; 0xfc6a <FMenuTicket+0x150>
    fb5c:	85 30       	cpi	r24, 0x05	; 5
    fb5e:	08 f0       	brcs	.+2      	; 0xfb62 <FMenuTicket+0x48>
    fb60:	a7 c0       	rjmp	.+334    	; 0xfcb0 <FMenuTicket+0x196>
    fb62:	4d c0       	rjmp	.+154    	; 0xfbfe <FMenuTicket+0xe4>
    fb64:	89 30       	cpi	r24, 0x09	; 9
    fb66:	09 f4       	brne	.+2      	; 0xfb6a <FMenuTicket+0x50>
    fb68:	f4 c0       	rjmp	.+488    	; 0xfd52 <FMenuTicket+0x238>
    fb6a:	8a 30       	cpi	r24, 0x0A	; 10
    fb6c:	38 f4       	brcc	.+14     	; 0xfb7c <FMenuTicket+0x62>
    fb6e:	87 30       	cpi	r24, 0x07	; 7
    fb70:	09 f4       	brne	.+2      	; 0xfb74 <FMenuTicket+0x5a>
    fb72:	d2 c0       	rjmp	.+420    	; 0xfd18 <FMenuTicket+0x1fe>
    fb74:	88 30       	cpi	r24, 0x08	; 8
    fb76:	09 f0       	breq	.+2      	; 0xfb7a <FMenuTicket+0x60>
    fb78:	0e c1       	rjmp	.+540    	; 0xfd96 <FMenuTicket+0x27c>
    fb7a:	be c0       	rjmp	.+380    	; 0xfcf8 <FMenuTicket+0x1de>
    fb7c:	8b 30       	cpi	r24, 0x0B	; 11
    fb7e:	09 f4       	brne	.+2      	; 0xfb82 <FMenuTicket+0x68>
    fb80:	ee c0       	rjmp	.+476    	; 0xfd5e <FMenuTicket+0x244>
    fb82:	8b 30       	cpi	r24, 0x0B	; 11
    fb84:	08 f4       	brcc	.+2      	; 0xfb88 <FMenuTicket+0x6e>
    fb86:	01 c1       	rjmp	.+514    	; 0xfd8a <FMenuTicket+0x270>
    fb88:	8c 30       	cpi	r24, 0x0C	; 12
    fb8a:	09 f0       	breq	.+2      	; 0xfb8e <FMenuTicket+0x74>
    fb8c:	04 c1       	rjmp	.+520    	; 0xfd96 <FMenuTicket+0x27c>
    fb8e:	ff c0       	rjmp	.+510    	; 0xfd8e <FMenuTicket+0x274>
	case mtInit:
		 stMenuTicket=mtPlatNo;
    fb90:	81 e0       	ldi	r24, 0x01	; 1
    fb92:	79 c0       	rjmp	.+242    	; 0xfc86 <FMenuTicket+0x16c>
	     break;
    case mtPlatNo:
	     lcd_clear();
    fb94:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
	     lcd_printf(1,1,PSTR("Input Plat No: "));
    fb98:	81 e0       	ldi	r24, 0x01	; 1
    fb9a:	61 e0       	ldi	r22, 0x01	; 1
    fb9c:	4f e5       	ldi	r20, 0x5F	; 95
    fb9e:	5c e0       	ldi	r21, 0x0C	; 12
    fba0:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
	     lcd_printf(2,1,PSTR("_"));
    fba4:	82 e0       	ldi	r24, 0x02	; 2
    fba6:	61 e0       	ldi	r22, 0x01	; 1
    fba8:	4d e5       	ldi	r20, 0x5D	; 93
    fbaa:	5c e0       	ldi	r21, 0x0C	; 12
    fbac:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
	     lcd_printf(4,1,PSTR("[*]Cancel  [#]Enter "));
    fbb0:	84 e0       	ldi	r24, 0x04	; 4
    fbb2:	61 e0       	ldi	r22, 0x01	; 1
    fbb4:	48 e4       	ldi	r20, 0x48	; 72
    fbb6:	5c e0       	ldi	r21, 0x0C	; 12
    fbb8:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		 uiResult=USER_NONE;
		 stMenuTicket=mtInputPlatNo;
    fbbc:	82 e0       	ldi	r24, 0x02	; 2
    fbbe:	63 c0       	rjmp	.+198    	; 0xfc86 <FMenuTicket+0x16c>
	     break;
    case mtInputPlatNo:
	     uiResult=UserInput(UI_ALPHANUM_R,2,1,strLicPlate,0,10);
    fbc0:	83 e0       	ldi	r24, 0x03	; 3
    fbc2:	62 e0       	ldi	r22, 0x02	; 2
    fbc4:	41 e0       	ldi	r20, 0x01	; 1
    fbc6:	2c e7       	ldi	r18, 0x7C	; 124
    fbc8:	39 e0       	ldi	r19, 0x09	; 9
    fbca:	00 e0       	ldi	r16, 0x00	; 0
    fbcc:	10 e0       	ldi	r17, 0x00	; 0
    fbce:	7a e0       	ldi	r23, 0x0A	; 10
    fbd0:	e7 2e       	mov	r14, r23
    fbd2:	0e 94 a9 67 	call	0xcf52	; 0xcf52 <UserInput>
		 if (uiResult==USER_OK)stMenuTicket=mtOdometer;
    fbd6:	83 30       	cpi	r24, 0x03	; 3
    fbd8:	09 f4       	brne	.+2      	; 0xfbdc <FMenuTicket+0xc2>
    fbda:	55 c0       	rjmp	.+170    	; 0xfc86 <FMenuTicket+0x16c>
		 else
		 if (uiResult==USER_CANCEL)stMenuTicket=mtExitMenuTicket;
    fbdc:	81 30       	cpi	r24, 0x01	; 1
    fbde:	09 f4       	brne	.+2      	; 0xfbe2 <FMenuTicket+0xc8>
    fbe0:	d4 c0       	rjmp	.+424    	; 0xfd8a <FMenuTicket+0x270>
         else
		 if (uiResult==USER_ENTRY)lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
    fbe2:	84 30       	cpi	r24, 0x04	; 4
    fbe4:	21 f4       	brne	.+8      	; 0xfbee <FMenuTicket+0xd4>
    fbe6:	61 e0       	ldi	r22, 0x01	; 1
    fbe8:	43 e3       	ldi	r20, 0x33	; 51
    fbea:	5c e0       	ldi	r21, 0x0C	; 12
    fbec:	5e c0       	rjmp	.+188    	; 0xfcaa <FMenuTicket+0x190>
		 else
		 if (uiResult==USER_NO_DATA)lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    fbee:	85 30       	cpi	r24, 0x05	; 5
    fbf0:	09 f0       	breq	.+2      	; 0xfbf4 <FMenuTicket+0xda>
    fbf2:	d1 c0       	rjmp	.+418    	; 0xfd96 <FMenuTicket+0x27c>
    fbf4:	84 e0       	ldi	r24, 0x04	; 4
    fbf6:	61 e0       	ldi	r22, 0x01	; 1
    fbf8:	4e e1       	ldi	r20, 0x1E	; 30
    fbfa:	5c e0       	ldi	r21, 0x0C	; 12
    fbfc:	56 c0       	rjmp	.+172    	; 0xfcaa <FMenuTicket+0x190>
	     break;
    case mtOdometer:
	     lcd_clear();
    fbfe:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
		 sprintf_P(lcdteks,PSTR("Plat No: %s "),strLicPlate);
    fc02:	00 d0       	rcall	.+0      	; 0xfc04 <FMenuTicket+0xea>
    fc04:	00 d0       	rcall	.+0      	; 0xfc06 <FMenuTicket+0xec>
    fc06:	00 d0       	rcall	.+0      	; 0xfc08 <FMenuTicket+0xee>
    fc08:	ed b7       	in	r30, 0x3d	; 61
    fc0a:	fe b7       	in	r31, 0x3e	; 62
    fc0c:	31 96       	adiw	r30, 0x01	; 1
    fc0e:	8e 01       	movw	r16, r28
    fc10:	0f 5f       	subi	r16, 0xFF	; 255
    fc12:	1f 4f       	sbci	r17, 0xFF	; 255
    fc14:	ad b7       	in	r26, 0x3d	; 61
    fc16:	be b7       	in	r27, 0x3e	; 62
    fc18:	12 96       	adiw	r26, 0x02	; 2
    fc1a:	1c 93       	st	X, r17
    fc1c:	0e 93       	st	-X, r16
    fc1e:	11 97       	sbiw	r26, 0x01	; 1
    fc20:	81 e1       	ldi	r24, 0x11	; 17
    fc22:	9c e0       	ldi	r25, 0x0C	; 12
    fc24:	93 83       	std	Z+3, r25	; 0x03
    fc26:	82 83       	std	Z+2, r24	; 0x02
    fc28:	8c e7       	ldi	r24, 0x7C	; 124
    fc2a:	99 e0       	ldi	r25, 0x09	; 9
    fc2c:	95 83       	std	Z+5, r25	; 0x05
    fc2e:	84 83       	std	Z+4, r24	; 0x04
    fc30:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	     lcd_print(1,1,lcdteks);
    fc34:	8d b7       	in	r24, 0x3d	; 61
    fc36:	9e b7       	in	r25, 0x3e	; 62
    fc38:	06 96       	adiw	r24, 0x06	; 6
    fc3a:	0f b6       	in	r0, 0x3f	; 63
    fc3c:	f8 94       	cli
    fc3e:	9e bf       	out	0x3e, r25	; 62
    fc40:	0f be       	out	0x3f, r0	; 63
    fc42:	8d bf       	out	0x3d, r24	; 61
    fc44:	81 e0       	ldi	r24, 0x01	; 1
    fc46:	61 e0       	ldi	r22, 0x01	; 1
    fc48:	a8 01       	movw	r20, r16
    fc4a:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
	     lcd_printf(2,1,PSTR("Odometer:_ "));
    fc4e:	82 e0       	ldi	r24, 0x02	; 2
    fc50:	61 e0       	ldi	r22, 0x01	; 1
    fc52:	45 e0       	ldi	r20, 0x05	; 5
    fc54:	5c e0       	ldi	r21, 0x0C	; 12
    fc56:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
	     lcd_printf(4,1,PSTR("[*]Cancel  [#]Enter "));
    fc5a:	84 e0       	ldi	r24, 0x04	; 4
    fc5c:	61 e0       	ldi	r22, 0x01	; 1
    fc5e:	40 ef       	ldi	r20, 0xF0	; 240
    fc60:	5b e0       	ldi	r21, 0x0B	; 11
    fc62:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		 uiResult=USER_NONE;
		 stMenuTicket=mtInputOdometer;
    fc66:	84 e0       	ldi	r24, 0x04	; 4
    fc68:	0e c0       	rjmp	.+28     	; 0xfc86 <FMenuTicket+0x16c>
	     break;
    case mtInputOdometer:
	     uiResult=UserInput(UI_NUMBER_R,2,10,strOdometer,0,10);
    fc6a:	81 e0       	ldi	r24, 0x01	; 1
    fc6c:	62 e0       	ldi	r22, 0x02	; 2
    fc6e:	4a e0       	ldi	r20, 0x0A	; 10
    fc70:	25 e4       	ldi	r18, 0x45	; 69
    fc72:	34 e0       	ldi	r19, 0x04	; 4
    fc74:	00 e0       	ldi	r16, 0x00	; 0
    fc76:	10 e0       	ldi	r17, 0x00	; 0
    fc78:	5a e0       	ldi	r21, 0x0A	; 10
    fc7a:	e5 2e       	mov	r14, r21
    fc7c:	0e 94 a9 67 	call	0xcf52	; 0xcf52 <UserInput>
		 if (uiResult==USER_OK)stMenuTicket=mtFIP;
    fc80:	83 30       	cpi	r24, 0x03	; 3
    fc82:	21 f4       	brne	.+8      	; 0xfc8c <FMenuTicket+0x172>
    fc84:	85 e0       	ldi	r24, 0x05	; 5
    fc86:	80 93 0d 02 	sts	0x020D, r24
    fc8a:	85 c0       	rjmp	.+266    	; 0xfd96 <FMenuTicket+0x27c>
		 else
		 if (uiResult==USER_CANCEL)stMenuTicket=mtPlatNo;
    fc8c:	81 30       	cpi	r24, 0x01	; 1
    fc8e:	d9 f3       	breq	.-10     	; 0xfc86 <FMenuTicket+0x16c>
		 else
		 if (uiResult==USER_ENTRY)lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
    fc90:	84 30       	cpi	r24, 0x04	; 4
    fc92:	21 f4       	brne	.+8      	; 0xfc9c <FMenuTicket+0x182>
    fc94:	61 e0       	ldi	r22, 0x01	; 1
    fc96:	4b ed       	ldi	r20, 0xDB	; 219
    fc98:	5b e0       	ldi	r21, 0x0B	; 11
    fc9a:	07 c0       	rjmp	.+14     	; 0xfcaa <FMenuTicket+0x190>
		 else
		 if (uiResult==USER_NO_DATA)lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
    fc9c:	85 30       	cpi	r24, 0x05	; 5
    fc9e:	09 f0       	breq	.+2      	; 0xfca2 <FMenuTicket+0x188>
    fca0:	7a c0       	rjmp	.+244    	; 0xfd96 <FMenuTicket+0x27c>
    fca2:	84 e0       	ldi	r24, 0x04	; 4
    fca4:	61 e0       	ldi	r22, 0x01	; 1
    fca6:	46 ec       	ldi	r20, 0xC6	; 198
    fca8:	5b e0       	ldi	r21, 0x0B	; 11
    fcaa:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
    fcae:	73 c0       	rjmp	.+230    	; 0xfd96 <FMenuTicket+0x27c>
	     break;
    case mtFIP:
	     lcd_clear();
    fcb0:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
		 _scr_pump();
    fcb4:	0e 94 c1 47 	call	0x8f82	; 0x8f82 <_scr_pump>
		 stMenuTicket=mtInputFIP;
    fcb8:	86 e0       	ldi	r24, 0x06	; 6
    fcba:	e5 cf       	rjmp	.-54     	; 0xfc86 <FMenuTicket+0x16c>
	     break;
    case mtInputFIP:
	     KeyPressed=_key_scan(1);
    fcbc:	81 e0       	ldi	r24, 0x01	; 1
    fcbe:	0e 94 58 a6 	call	0x14cb0	; 0x14cb0 <_key_scan>
    fcc2:	18 2f       	mov	r17, r24
		 KeyChar=_key_btn(KeyPressed);
    fcc4:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <_key_btn>
		 if ((KeyChar>='1')&&(KeyChar<='8')){
    fcc8:	81 53       	subi	r24, 0x31	; 49
    fcca:	88 30       	cpi	r24, 0x08	; 8
    fccc:	40 f4       	brcc	.+16     	; 0xfcde <FMenuTicket+0x1c4>
		     FIP_Used=KeyChar-'0';
    fcce:	8f 5f       	subi	r24, 0xFF	; 255
    fcd0:	80 93 0a 02 	sts	0x020A, r24
			 zFIP_Used=FIP_Used;
    fcd4:	80 93 09 02 	sts	0x0209, r24
		     stMenuTicket=mtSendMsg98;
    fcd8:	87 e0       	ldi	r24, 0x07	; 7
    fcda:	80 93 0d 02 	sts	0x020D, r24
		 }
		 if (KeyPressed==_KEY_CANCEL){
    fcde:	17 3e       	cpi	r17, 0xE7	; 231
    fce0:	11 f4       	brne	.+4      	; 0xfce6 <FMenuTicket+0x1cc>
             stMenuTicket=mtOdometer;
    fce2:	83 e0       	ldi	r24, 0x03	; 3
    fce4:	d0 cf       	rjmp	.-96     	; 0xfc86 <FMenuTicket+0x16c>
		 }else
		 if (KeyPressed==_KEY_ENTER){
    fce6:	17 3b       	cpi	r17, 0xB7	; 183
    fce8:	09 f0       	breq	.+2      	; 0xfcec <FMenuTicket+0x1d2>
    fcea:	55 c0       	rjmp	.+170    	; 0xfd96 <FMenuTicket+0x27c>
		     FIP_Used=zFIP_Used;
    fcec:	80 91 09 02 	lds	r24, 0x0209
    fcf0:	80 93 0a 02 	sts	0x020A, r24
             stMenuTicket=mtInitWaitMessage99;
    fcf4:	88 e0       	ldi	r24, 0x08	; 8
    fcf6:	c7 cf       	rjmp	.-114    	; 0xfc86 <FMenuTicket+0x16c>
		 }
	     break;	
    case mtInitWaitMessage99:
	     lcd_clear();
    fcf8:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
		 lcd_printf(2,1,PSTR("Send Request"));
    fcfc:	82 e0       	ldi	r24, 0x02	; 2
    fcfe:	61 e0       	ldi	r22, 0x01	; 1
    fd00:	49 eb       	ldi	r20, 0xB9	; 185
    fd02:	5b e0       	ldi	r21, 0x0B	; 11
    fd04:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		 lcd_printf(3,1,PSTR("Proses"));
    fd08:	83 e0       	ldi	r24, 0x03	; 3
    fd0a:	61 e0       	ldi	r22, 0x01	; 1
    fd0c:	42 eb       	ldi	r20, 0xB2	; 178
    fd0e:	5b e0       	ldi	r21, 0x0B	; 11
    fd10:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
         stMenuTicket=mtSendMsg98;
    fd14:	87 e0       	ldi	r24, 0x07	; 7
    fd16:	b7 cf       	rjmp	.-146    	; 0xfc86 <FMenuTicket+0x16c>
	     break;
    case mtSendMsg98:
	     iPos=0;
    fd18:	10 92 0c 02 	sts	0x020C, r1
		 iSend=0;
    fd1c:	10 92 0b 02 	sts	0x020B, r1
		 IsMessage99=False;
    fd20:	10 92 9f 01 	sts	0x019F, r1
		 TimSend=0;
    fd24:	10 92 fa 0c 	sts	0x0CFA, r1
		 iLoop=0;
    fd28:	10 92 08 02 	sts	0x0208, r1
    fd2c:	10 92 07 02 	sts	0x0207, r1
		 if (IFType==IT_SLAVE)sendMessage98(FIP_Used);
    fd30:	80 91 00 01 	lds	r24, 0x0100
    fd34:	81 30       	cpi	r24, 0x01	; 1
    fd36:	29 f4       	brne	.+10     	; 0xfd42 <FMenuTicket+0x228>
    fd38:	80 91 0a 02 	lds	r24, 0x020A
    fd3c:	0e 94 66 7d 	call	0xfacc	; 0xfacc <sendMessage98>
    fd40:	24 c0       	rjmp	.+72     	; 0xfd8a <FMenuTicket+0x270>
		 else 
		 if (IFType==IT_STANDALONE)PrintStandalone(FIP_Used,False);
    fd42:	82 30       	cpi	r24, 0x02	; 2
    fd44:	11 f5       	brne	.+68     	; 0xfd8a <FMenuTicket+0x270>
    fd46:	80 91 0a 02 	lds	r24, 0x020A
    fd4a:	60 e0       	ldi	r22, 0x00	; 0
    fd4c:	0e 94 2b 45 	call	0x8a56	; 0x8a56 <PrintStandalone>
    fd50:	1c c0       	rjmp	.+56     	; 0xfd8a <FMenuTicket+0x270>
	                     stMenuTicket=mtSendMsg98;
				  }
			 }
		 }
		 */
		 if (IsMessage99==True){ 
    fd52:	80 91 9f 01 	lds	r24, 0x019F
    fd56:	81 30       	cpi	r24, 0x01	; 1
    fd58:	f1 f4       	brne	.+60     	; 0xfd96 <FMenuTicket+0x27c>
		    stMenuTicket=mtMessage99Received;
    fd5a:	8a e0       	ldi	r24, 0x0A	; 10
    fd5c:	94 cf       	rjmp	.-216    	; 0xfc86 <FMenuTicket+0x16c>
	     break;
    case mtMessage99Received:
	     stMenuTicket=mtExitMenuTicket;
		 break;
    case mtNoConnection:
	     lcd_clear();
    fd5e:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
		 lcd_printf(2,1,PSTR("Error No Connection"));
    fd62:	82 e0       	ldi	r24, 0x02	; 2
    fd64:	61 e0       	ldi	r22, 0x01	; 1
    fd66:	4e e9       	ldi	r20, 0x9E	; 158
    fd68:	5b e0       	ldi	r21, 0x0B	; 11
    fd6a:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
    fd6e:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
    fd70:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
    fd72:	82 e0       	ldi	r24, 0x02	; 2
    fd74:	80 93 bc 01 	sts	0x01BC, r24
    fd78:	80 e2       	ldi	r24, 0x20	; 32
    fd7a:	9e e4       	ldi	r25, 0x4E	; 78
    fd7c:	29 e1       	ldi	r18, 0x19	; 25
    fd7e:	30 e0       	ldi	r19, 0x00	; 0
    fd80:	f9 01       	movw	r30, r18
    fd82:	31 97       	sbiw	r30, 0x01	; 1
    fd84:	f1 f7       	brne	.-4      	; 0xfd82 <FMenuTicket+0x268>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    fd86:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    fd88:	d9 f7       	brne	.-10     	; 0xfd80 <FMenuTicket+0x266>
    case mtNoConnection:
	     lcd_clear();
		 lcd_printf(2,1,PSTR("Error No Connection"));
		 system_beep(2);
		 _delay_ms(2000);
         stMenuTicket=mtExitMenuTicket;
    fd8a:	8c e0       	ldi	r24, 0x0C	; 12
    fd8c:	7c cf       	rjmp	.-264    	; 0xfc86 <FMenuTicket+0x16c>
	     break;
    case mtExitMenuTicket:
	     Result=MENU_DONE;
	     stMenuTicket=mtInit;
    fd8e:	10 92 0d 02 	sts	0x020D, r1
    fd92:	81 e0       	ldi	r24, 0x01	; 1
    fd94:	01 c0       	rjmp	.+2      	; 0xfd98 <FMenuTicket+0x27e>
    fd96:	80 e0       	ldi	r24, 0x00	; 0
	     break;
	}
  return Result;
}
    fd98:	64 96       	adiw	r28, 0x14	; 20
    fd9a:	0f b6       	in	r0, 0x3f	; 63
    fd9c:	f8 94       	cli
    fd9e:	de bf       	out	0x3e, r29	; 62
    fda0:	0f be       	out	0x3f, r0	; 63
    fda2:	cd bf       	out	0x3d, r28	; 61
    fda4:	cf 91       	pop	r28
    fda6:	df 91       	pop	r29
    fda8:	1f 91       	pop	r17
    fdaa:	0f 91       	pop	r16
    fdac:	ef 90       	pop	r14
    fdae:	08 95       	ret

0000fdb0 <sendMessage94>:
	sprintf_P(strSend,PSTR("E9445512"));
    //uart_print(0, 0,strSend);
    uart_print(1, 0,strSend);
	uart(1, 1,0x02);
	*/
	IFTSendMessage(MSG_94);
    fdb0:	84 e9       	ldi	r24, 0x94	; 148
    fdb2:	0e 94 22 7a 	call	0xf444	; 0xf444 <IFTSendMessage>
}
    fdb6:	08 95       	ret

0000fdb8 <sendMessage92>:
	sprintf_P(strSend,PSTR("E9445512"));
    //uart_print(0, 0,strSend);
    uart_print(1, 0,strSend);
	uart(1, 1,0x02);
	*/
	IFTSendMessage(MSG_92);
    fdb8:	82 e9       	ldi	r24, 0x92	; 146
    fdba:	0e 94 22 7a 	call	0xf444	; 0xf444 <IFTSendMessage>
}
    fdbe:	08 95       	ret

0000fdc0 <sendMessage90>:
    uart_print(1, 0,strSend);
	sprintf_P(strSend,PSTR("E9445512"));
    uart_print(1, 0,strSend);
	uart(1, 1,0x02);
	*/
	IFTSendMessage(MSG_90);
    fdc0:	80 e9       	ldi	r24, 0x90	; 144
    fdc2:	0e 94 22 7a 	call	0xf444	; 0xf444 <IFTSendMessage>
}
    fdc6:	08 95       	ret

0000fdc8 <FMenuEDCTransaction>:
	      break;
	 }
	 return Result;
}

char FMenuEDCTransaction(){
    fdc8:	0f 93       	push	r16
    fdca:	1f 93       	push	r17
static char FIP_Used=0;
       char lcdteks[20],Result=MENU_NONE;
       char KeyPressed=0,KeyChar,FIPResult;

     Result=MENU_NONE;
	 switch(stEtransaction){
    fdcc:	80 91 62 02 	lds	r24, 0x0262
    fdd0:	85 30       	cpi	r24, 0x05	; 5
    fdd2:	09 f4       	brne	.+2      	; 0xfdd6 <FMenuEDCTransaction+0xe>
    fdd4:	96 c0       	rjmp	.+300    	; 0xff02 <FMenuEDCTransaction+0x13a>
    fdd6:	86 30       	cpi	r24, 0x06	; 6
    fdd8:	90 f4       	brcc	.+36     	; 0xfdfe <FMenuEDCTransaction+0x36>
    fdda:	82 30       	cpi	r24, 0x02	; 2
    fddc:	09 f4       	brne	.+2      	; 0xfde0 <FMenuEDCTransaction+0x18>
    fdde:	52 c0       	rjmp	.+164    	; 0xfe84 <FMenuEDCTransaction+0xbc>
    fde0:	83 30       	cpi	r24, 0x03	; 3
    fde2:	30 f4       	brcc	.+12     	; 0xfdf0 <FMenuEDCTransaction+0x28>
    fde4:	88 23       	and	r24, r24
    fde6:	f1 f0       	breq	.+60     	; 0xfe24 <FMenuEDCTransaction+0x5c>
    fde8:	81 30       	cpi	r24, 0x01	; 1
    fdea:	09 f0       	breq	.+2      	; 0xfdee <FMenuEDCTransaction+0x26>
    fdec:	d2 c0       	rjmp	.+420    	; 0xff92 <FMenuEDCTransaction+0x1ca>
    fdee:	36 c0       	rjmp	.+108    	; 0xfe5c <FMenuEDCTransaction+0x94>
    fdf0:	83 30       	cpi	r24, 0x03	; 3
    fdf2:	09 f4       	brne	.+2      	; 0xfdf6 <FMenuEDCTransaction+0x2e>
    fdf4:	57 c0       	rjmp	.+174    	; 0xfea4 <FMenuEDCTransaction+0xdc>
    fdf6:	84 30       	cpi	r24, 0x04	; 4
    fdf8:	09 f0       	breq	.+2      	; 0xfdfc <FMenuEDCTransaction+0x34>
    fdfa:	cb c0       	rjmp	.+406    	; 0xff92 <FMenuEDCTransaction+0x1ca>
    fdfc:	7c c0       	rjmp	.+248    	; 0xfef6 <FMenuEDCTransaction+0x12e>
    fdfe:	88 30       	cpi	r24, 0x08	; 8
    fe00:	09 f4       	brne	.+2      	; 0xfe04 <FMenuEDCTransaction+0x3c>
    fe02:	b7 c0       	rjmp	.+366    	; 0xff72 <FMenuEDCTransaction+0x1aa>
    fe04:	89 30       	cpi	r24, 0x09	; 9
    fe06:	38 f4       	brcc	.+14     	; 0xfe16 <FMenuEDCTransaction+0x4e>
    fe08:	86 30       	cpi	r24, 0x06	; 6
    fe0a:	09 f4       	brne	.+2      	; 0xfe0e <FMenuEDCTransaction+0x46>
    fe0c:	8d c0       	rjmp	.+282    	; 0xff28 <FMenuEDCTransaction+0x160>
    fe0e:	87 30       	cpi	r24, 0x07	; 7
    fe10:	09 f0       	breq	.+2      	; 0xfe14 <FMenuEDCTransaction+0x4c>
    fe12:	bf c0       	rjmp	.+382    	; 0xff92 <FMenuEDCTransaction+0x1ca>
    fe14:	8b c0       	rjmp	.+278    	; 0xff2c <FMenuEDCTransaction+0x164>
    fe16:	89 30       	cpi	r24, 0x09	; 9
    fe18:	09 f4       	brne	.+2      	; 0xfe1c <FMenuEDCTransaction+0x54>
    fe1a:	b1 c0       	rjmp	.+354    	; 0xff7e <FMenuEDCTransaction+0x1b6>
    fe1c:	8a 30       	cpi	r24, 0x0A	; 10
    fe1e:	09 f0       	breq	.+2      	; 0xfe22 <FMenuEDCTransaction+0x5a>
    fe20:	b8 c0       	rjmp	.+368    	; 0xff92 <FMenuEDCTransaction+0x1ca>
    fe22:	b3 c0       	rjmp	.+358    	; 0xff8a <FMenuEDCTransaction+0x1c2>
	 case etInit:
	      lcd_clear();
    fe24:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
		  lcd_printf(1,1,PSTR("Select Card Type"));
    fe28:	81 e0       	ldi	r24, 0x01	; 1
    fe2a:	61 e0       	ldi	r22, 0x01	; 1
    fe2c:	44 e6       	ldi	r20, 0x64	; 100
    fe2e:	5c e1       	ldi	r21, 0x1C	; 28
    fe30:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
          lcd_printf(1,1,PSTR("1.Debit/Flash Card  "));
    fe34:	81 e0       	ldi	r24, 0x01	; 1
    fe36:	61 e0       	ldi	r22, 0x01	; 1
    fe38:	4f e4       	ldi	r20, 0x4F	; 79
    fe3a:	5c e1       	ldi	r21, 0x1C	; 28
    fe3c:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  lcd_printf(2,1,PSTR("2.Credit Card       "));
    fe40:	82 e0       	ldi	r24, 0x02	; 2
    fe42:	61 e0       	ldi	r22, 0x01	; 1
    fe44:	4a e3       	ldi	r20, 0x3A	; 58
    fe46:	5c e1       	ldi	r21, 0x1C	; 28
    fe48:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
	      lcd_printf(4,1,PSTR("[*]Back             "));
    fe4c:	84 e0       	ldi	r24, 0x04	; 4
    fe4e:	61 e0       	ldi	r22, 0x01	; 1
    fe50:	45 e2       	ldi	r20, 0x25	; 37
    fe52:	5c e1       	ldi	r21, 0x1C	; 28
    fe54:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  stEtransaction=etInputEDC;
    fe58:	81 e0       	ldi	r24, 0x01	; 1
    fe5a:	63 c0       	rjmp	.+198    	; 0xff22 <FMenuEDCTransaction+0x15a>
	      break;
     case etInputEDC:
	 	  KeyPressed=_key_scan(1);
    fe5c:	81 e0       	ldi	r24, 0x01	; 1
    fe5e:	0e 94 58 a6 	call	0x14cb0	; 0x14cb0 <_key_scan>
    fe62:	08 2f       	mov	r16, r24
		  KeyChar=_key_btn(KeyPressed);
    fe64:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <_key_btn>
    fe68:	98 2f       	mov	r25, r24
		  if ((KeyChar>='1')&&(KeyChar<='2')){
    fe6a:	81 53       	subi	r24, 0x31	; 49
    fe6c:	82 30       	cpi	r24, 0x02	; 2
    fe6e:	30 f4       	brcc	.+12     	; 0xfe7c <FMenuEDCTransaction+0xb4>
		       EDCType=KeyChar-'0';
    fe70:	90 53       	subi	r25, 0x30	; 48
    fe72:	90 93 8d 08 	sts	0x088D, r25
		       stEtransaction=etSelectFIP;
    fe76:	82 e0       	ldi	r24, 0x02	; 2
    fe78:	80 93 62 02 	sts	0x0262, r24
		     }
		  if (KeyPressed==_KEY_CANCEL)stEtransaction=etExitEDCTransaction;
    fe7c:	07 3e       	cpi	r16, 0xE7	; 231
    fe7e:	09 f0       	breq	.+2      	; 0xfe82 <FMenuEDCTransaction+0xba>
    fe80:	88 c0       	rjmp	.+272    	; 0xff92 <FMenuEDCTransaction+0x1ca>
    fe82:	81 c0       	rjmp	.+258    	; 0xff86 <FMenuEDCTransaction+0x1be>
	      break;
	 case etSelectFIP:
	      FIPResult=menu_FIP(FIP_Used,strFIP_ID);
    fe84:	80 e0       	ldi	r24, 0x00	; 0
    fe86:	90 e0       	ldi	r25, 0x00	; 0
    fe88:	6b e3       	ldi	r22, 0x3B	; 59
    fe8a:	78 e0       	ldi	r23, 0x08	; 8
    fe8c:	0e 94 28 55 	call	0xaa50	; 0xaa50 <menu_FIP>
		  if (FIPResult==FIP_DONE)stEtransaction=etInitMessage90;
    fe90:	88 23       	and	r24, r24
    fe92:	11 f4       	brne	.+4      	; 0xfe98 <FMenuEDCTransaction+0xd0>
    fe94:	83 e0       	ldi	r24, 0x03	; 3
    fe96:	45 c0       	rjmp	.+138    	; 0xff22 <FMenuEDCTransaction+0x15a>
		  else
		  if (FIPResult==FIP_CANCEL)stEtransaction=etInit;
    fe98:	82 30       	cpi	r24, 0x02	; 2
    fe9a:	09 f0       	breq	.+2      	; 0xfe9e <FMenuEDCTransaction+0xd6>
    fe9c:	7a c0       	rjmp	.+244    	; 0xff92 <FMenuEDCTransaction+0x1ca>
    fe9e:	10 92 62 02 	sts	0x0262, r1
    fea2:	77 c0       	rjmp	.+238    	; 0xff92 <FMenuEDCTransaction+0x1ca>
    fea4:	e0 e1       	ldi	r30, 0x10	; 16
    fea6:	fd e0       	ldi	r31, 0x0D	; 13
}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
	     strMemory[i]=data;
    fea8:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    feaa:	8d e0       	ldi	r24, 0x0D	; 13
    feac:	e5 32       	cpi	r30, 0x25	; 37
    feae:	f8 07       	cpc	r31, r24
    feb0:	d9 f7       	brne	.-10     	; 0xfea8 <FMenuEDCTransaction+0xe0>
		  else
		  if (FIPResult==FIP_CANCEL)stEtransaction=etInit;
	      break;
     case etInitMessage90:
	      FillChar(strRef1,sizeof(strRef1),0);
	      if (EDCType==1){
    feb2:	80 91 8d 08 	lds	r24, 0x088D
    feb6:	81 30       	cpi	r24, 0x01	; 1
    feb8:	19 f4       	brne	.+6      	; 0xfec0 <FMenuEDCTransaction+0xf8>
		      AddSpaceLag(strRef1,20);
    feba:	cf 01       	movw	r24, r30
    febc:	45 97       	sbiw	r24, 0x15	; 21
    febe:	16 c0       	rjmp	.+44     	; 0xfeec <FMenuEDCTransaction+0x124>
          }
		  else
	      if (EDCType==2){
    fec0:	82 30       	cpi	r24, 0x02	; 2
    fec2:	b9 f4       	brne	.+46     	; 0xfef2 <FMenuEDCTransaction+0x12a>
		      sprintf_P(strRef1,PSTR("CREDITCARD"));
    fec4:	00 d0       	rcall	.+0      	; 0xfec6 <FMenuEDCTransaction+0xfe>
    fec6:	00 d0       	rcall	.+0      	; 0xfec8 <FMenuEDCTransaction+0x100>
    fec8:	8f 01       	movw	r16, r30
    feca:	05 51       	subi	r16, 0x15	; 21
    fecc:	10 40       	sbci	r17, 0x00	; 0
    fece:	ed b7       	in	r30, 0x3d	; 61
    fed0:	fe b7       	in	r31, 0x3e	; 62
    fed2:	12 83       	std	Z+2, r17	; 0x02
    fed4:	01 83       	std	Z+1, r16	; 0x01
    fed6:	8a e1       	ldi	r24, 0x1A	; 26
    fed8:	9c e1       	ldi	r25, 0x1C	; 28
    feda:	94 83       	std	Z+4, r25	; 0x04
    fedc:	83 83       	std	Z+3, r24	; 0x03
    fede:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
			  AddSpaceLag(strRef1,20);
    fee2:	0f 90       	pop	r0
    fee4:	0f 90       	pop	r0
    fee6:	0f 90       	pop	r0
    fee8:	0f 90       	pop	r0
    feea:	c8 01       	movw	r24, r16
    feec:	64 e1       	ldi	r22, 0x14	; 20
    feee:	0e 94 c4 2d 	call	0x5b88	; 0x5b88 <AddSpaceLag>
		  }	 
	      stEtransaction=etSendingMessage90;
    fef2:	84 e0       	ldi	r24, 0x04	; 4
    fef4:	16 c0       	rjmp	.+44     	; 0xff22 <FMenuEDCTransaction+0x15a>
	      break;
     case etSendingMessage90:
          sendMessage90();
    fef6:	0e 94 e0 7e 	call	0xfdc0	; 0xfdc0 <sendMessage90>
		  TimSend=0;
    fefa:	10 92 fa 0c 	sts	0x0CFA, r1
          stEtransaction=etWaitReply;
    fefe:	85 e0       	ldi	r24, 0x05	; 5
    ff00:	10 c0       	rjmp	.+32     	; 0xff22 <FMenuEDCTransaction+0x15a>
	      break;
     case etWaitReply:
	      if (TimSend>TIM_SEND*2)stEtransaction=etNoConnection;
    ff02:	80 91 fa 0c 	lds	r24, 0x0CFA
    ff06:	85 31       	cpi	r24, 0x15	; 21
    ff08:	18 f0       	brcs	.+6      	; 0xff10 <FMenuEDCTransaction+0x148>
    ff0a:	88 e0       	ldi	r24, 0x08	; 8
    ff0c:	80 93 62 02 	sts	0x0262, r24
		  if ((IsMessage91==True)||(IsMessage09==True))
    ff10:	80 91 a7 01 	lds	r24, 0x01A7
    ff14:	81 30       	cpi	r24, 0x01	; 1
    ff16:	21 f0       	breq	.+8      	; 0xff20 <FMenuEDCTransaction+0x158>
    ff18:	80 91 a3 01 	lds	r24, 0x01A3
    ff1c:	81 30       	cpi	r24, 0x01	; 1
    ff1e:	c9 f5       	brne	.+114    	; 0xff92 <FMenuEDCTransaction+0x1ca>
		       stEtransaction=etSuccesEDC;
    ff20:	86 e0       	ldi	r24, 0x06	; 6
    ff22:	80 93 62 02 	sts	0x0262, r24
    ff26:	35 c0       	rjmp	.+106    	; 0xff92 <FMenuEDCTransaction+0x1ca>
	      break;
     case etSuccesEDC:
	      stEtransaction=etDisplayFreeMessage;
    ff28:	87 e0       	ldi	r24, 0x07	; 7
    ff2a:	fb cf       	rjmp	.-10     	; 0xff22 <FMenuEDCTransaction+0x15a>
	      break;
     case etDisplayFreeMessage:
	      if (IsMessage09==True){
    ff2c:	80 91 a3 01 	lds	r24, 0x01A3
    ff30:	81 30       	cpi	r24, 0x01	; 1
    ff32:	19 f5       	brne	.+70     	; 0xff7a <FMenuEDCTransaction+0x1b2>
		      IsMessage09=False;
    ff34:	10 92 a3 01 	sts	0x01A3, r1
	          procMessage09();
    ff38:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <procMessage09>
		      lcd_clear();
    ff3c:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
		      lcd_print(1,1,strFreeMessageLine1);
    ff40:	81 e0       	ldi	r24, 0x01	; 1
    ff42:	61 e0       	ldi	r22, 0x01	; 1
    ff44:	44 e1       	ldi	r20, 0x14	; 20
    ff46:	59 e0       	ldi	r21, 0x09	; 9
    ff48:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
		      lcd_print(2,1,strFreeMessageLine2);
    ff4c:	82 e0       	ldi	r24, 0x02	; 2
    ff4e:	61 e0       	ldi	r22, 0x01	; 1
    ff50:	45 e2       	ldi	r20, 0x25	; 37
    ff52:	58 e0       	ldi	r21, 0x08	; 8
    ff54:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
		      lcd_print(3,1,strFreeMessageLine3);
    ff58:	83 e0       	ldi	r24, 0x03	; 3
    ff5a:	61 e0       	ldi	r22, 0x01	; 1
    ff5c:	4e e9       	ldi	r20, 0x9E	; 158
    ff5e:	58 e0       	ldi	r21, 0x08	; 8
    ff60:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
			  lcd_print(4,1,strFreeMessageLine4);
    ff64:	84 e0       	ldi	r24, 0x04	; 4
    ff66:	61 e0       	ldi	r22, 0x01	; 1
    ff68:	48 e5       	ldi	r20, 0x58	; 88
    ff6a:	5c e0       	ldi	r21, 0x0C	; 12
    ff6c:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
    ff70:	02 c0       	rjmp	.+4      	; 0xff76 <FMenuEDCTransaction+0x1ae>
			  TimDisplay=0;
			  }
		  stEtransaction=etDelayExit;
	      break;
     case etNoConnection:
	      lcd_clear();
    ff72:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
		  TimDisplay=0;
    ff76:	10 92 92 01 	sts	0x0192, r1
		  stEtransaction=etDelayExit;
    ff7a:	89 e0       	ldi	r24, 0x09	; 9
    ff7c:	d2 cf       	rjmp	.-92     	; 0xff22 <FMenuEDCTransaction+0x15a>
	      break;
     case etDelayExit:
	      if (TimDisplay>8)stEtransaction=etExitEDCTransaction;
    ff7e:	80 91 92 01 	lds	r24, 0x0192
    ff82:	89 30       	cpi	r24, 0x09	; 9
    ff84:	30 f0       	brcs	.+12     	; 0xff92 <FMenuEDCTransaction+0x1ca>
    ff86:	8a e0       	ldi	r24, 0x0A	; 10
    ff88:	cc cf       	rjmp	.-104    	; 0xff22 <FMenuEDCTransaction+0x15a>
	      break;
     case etExitEDCTransaction:
	      stEtransaction=etInit;
    ff8a:	10 92 62 02 	sts	0x0262, r1
    ff8e:	81 e0       	ldi	r24, 0x01	; 1
    ff90:	01 c0       	rjmp	.+2      	; 0xff94 <FMenuEDCTransaction+0x1cc>
    ff92:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
	      break;
	 }
   return Result;
}
    ff94:	1f 91       	pop	r17
    ff96:	0f 91       	pop	r16
    ff98:	08 95       	ret

0000ff9a <sendMessage58>:
	CardType=0;
	sprintf_P(strSend,PSTR("%dF0000000E123456FFFFF%sE9445512"),CardType,strOdometer);
    uart_print(1, 0,strSend);
	uart(1, 1,0x02);
	*/
	IFTSendMessage(MSG_58);
    ff9a:	88 e5       	ldi	r24, 0x58	; 88
    ff9c:	0e 94 22 7a 	call	0xf444	; 0xf444 <IFTSendMessage>
}
    ffa0:	08 95       	ret

0000ffa2 <sendMessage56>:
    uart_print(1, 0,strSend);	

	uart_printf(1,0,PSTR("AF968CFFB"));
	uart(1, 1,0x02);
	*/
	IFTSendMessage(MSG_56);
    ffa2:	86 e5       	ldi	r24, 0x56	; 86
    ffa4:	0e 94 22 7a 	call	0xf444	; 0xf444 <IFTSendMessage>
}
    ffa8:	08 95       	ret

0000ffaa <FMenuLocalAccount>:
	 __key_lgtcnt = 0; 
	 PORTG=PORTG&0b11111101;
}


char FMenuLocalAccount(){
    ffaa:	6f 92       	push	r6
    ffac:	7f 92       	push	r7
    ffae:	8f 92       	push	r8
    ffb0:	9f 92       	push	r9
    ffb2:	af 92       	push	r10
    ffb4:	bf 92       	push	r11
    ffb6:	cf 92       	push	r12
    ffb8:	df 92       	push	r13
    ffba:	ef 92       	push	r14
    ffbc:	ff 92       	push	r15
    ffbe:	0f 93       	push	r16
    ffc0:	1f 93       	push	r17
    ffc2:	df 93       	push	r29
    ffc4:	cf 93       	push	r28
    ffc6:	cd b7       	in	r28, 0x3d	; 61
    ffc8:	de b7       	in	r29, 0x3e	; 62
    ffca:	e4 97       	sbiw	r28, 0x34	; 52
    ffcc:	0f b6       	in	r0, 0x3f	; 63
    ffce:	f8 94       	cli
    ffd0:	de bf       	out	0x3e, r29	; 62
    ffd2:	0f be       	out	0x3f, r0	; 63
    ffd4:	cd bf       	out	0x3d, r28	; 61
       char ProductName[11],strName[21];//,strPumpL[3],strPumpR[3];
       char Result;

	   Result=MENU_NONE;
	                                 //|   Local Account   |          
	       switch(stLocalAccount){   //|ID: ACD12345       |
    ffd6:	80 91 5b 01 	lds	r24, 0x015B
    ffda:	90 e0       	ldi	r25, 0x00	; 0
    ffdc:	fc 01       	movw	r30, r24
    ffde:	31 97       	sbiw	r30, 0x01	; 1
    ffe0:	ef 31       	cpi	r30, 0x1F	; 31
    ffe2:	f1 05       	cpc	r31, r1
    ffe4:	10 f0       	brcs	.+4      	; 0xffea <FMenuLocalAccount+0x40>
    ffe6:	0c 94 74 88 	jmp	0x110e8	; 0x110e8 <FMenuLocalAccount+0x113e>
    ffea:	e0 57       	subi	r30, 0x70	; 112
    ffec:	ff 4f       	sbci	r31, 0xFF	; 255
    ffee:	ee 0f       	add	r30, r30
    fff0:	ff 1f       	adc	r31, r31
    fff2:	05 90       	lpm	r0, Z+
    fff4:	f4 91       	lpm	r31, Z+
    fff6:	e0 2d       	mov	r30, r0
    fff8:	09 94       	ijmp
	      }
     }      
}

void BackLightTrig(){    
     __key_light = 1; 
    fffa:	81 e0       	ldi	r24, 0x01	; 1
    fffc:	80 93 ae 02 	sts	0x02AE, r24
	 __key_lgtcnt = 0; 
   10000:	10 92 af 02 	sts	0x02AF, r1
	 PORTG=PORTG&0b11111101;
   10004:	80 91 65 00 	lds	r24, 0x0065
   10008:	8d 7f       	andi	r24, 0xFD	; 253
   1000a:	80 93 65 00 	sts	0x0065, r24
   1000e:	20 e0       	ldi	r18, 0x00	; 0
   10010:	30 e0       	ldi	r19, 0x00	; 0


void ViewCardID(){//+12345678 -->12345678
     char i;
	 for(i=0;i<8;i++){         //00000000000012345678
		strCardID[i]=strRFID[i];
   10012:	f9 01       	movw	r30, r18
   10014:	e5 5f       	subi	r30, 0xF5	; 245
   10016:	f3 4f       	sbci	r31, 0xF3	; 243
   10018:	d9 01       	movw	r26, r18
   1001a:	ad 52       	subi	r26, 0x2D	; 45
   1001c:	b3 4f       	sbci	r27, 0xF3	; 243
   1001e:	8c 91       	ld	r24, X
   10020:	80 83       	st	Z, r24
   10022:	2f 5f       	subi	r18, 0xFF	; 255
   10024:	3f 4f       	sbci	r19, 0xFF	; 255



void ViewCardID(){//+12345678 -->12345678
     char i;
	 for(i=0;i<8;i++){         //00000000000012345678
   10026:	28 30       	cpi	r18, 0x08	; 8
   10028:	31 05       	cpc	r19, r1
   1002a:	99 f7       	brne	.-26     	; 0x10012 <FMenuLocalAccount+0x68>
		strCardID[i]=strRFID[i];
	 }strCardID[8]=0;     
   1002c:	10 92 13 0c 	sts	0x0C13, r1
	       switch(stLocalAccount){   //|ID: ACD12345       |
	       case laInit:              //|Process ...        |
		        //Process RFID Data  //|                   |
				//UpdateCardID();
                BackLightTrig();ViewCardID();
	            lcd_clear();
   10030:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
	            lcd_printf(1,1,PSTR("   Local Account   "));
   10034:	81 e0       	ldi	r24, 0x01	; 1
   10036:	61 e0       	ldi	r22, 0x01	; 1
   10038:	4d ec       	ldi	r20, 0xCD	; 205
   1003a:	52 e2       	ldi	r21, 0x22	; 34
   1003c:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
	            sprintf_P(lcdteks,PSTR("ID:%s"),strCardID);lcd_print(2,1,lcdteks);
   10040:	00 d0       	rcall	.+0      	; 0x10042 <FMenuLocalAccount+0x98>
   10042:	00 d0       	rcall	.+0      	; 0x10044 <FMenuLocalAccount+0x9a>
   10044:	00 d0       	rcall	.+0      	; 0x10046 <FMenuLocalAccount+0x9c>
   10046:	ed b7       	in	r30, 0x3d	; 61
   10048:	fe b7       	in	r31, 0x3e	; 62
   1004a:	31 96       	adiw	r30, 0x01	; 1
   1004c:	8e 01       	movw	r16, r28
   1004e:	04 5f       	subi	r16, 0xF4	; 244
   10050:	1f 4f       	sbci	r17, 0xFF	; 255
   10052:	ad b7       	in	r26, 0x3d	; 61
   10054:	be b7       	in	r27, 0x3e	; 62
   10056:	12 96       	adiw	r26, 0x02	; 2
   10058:	1c 93       	st	X, r17
   1005a:	0e 93       	st	-X, r16
   1005c:	11 97       	sbiw	r26, 0x01	; 1
   1005e:	87 ec       	ldi	r24, 0xC7	; 199
   10060:	92 e2       	ldi	r25, 0x22	; 34
   10062:	93 83       	std	Z+3, r25	; 0x03
   10064:	82 83       	std	Z+2, r24	; 0x02
   10066:	8b e0       	ldi	r24, 0x0B	; 11
   10068:	9c e0       	ldi	r25, 0x0C	; 12
   1006a:	95 83       	std	Z+5, r25	; 0x05
   1006c:	84 83       	std	Z+4, r24	; 0x04
   1006e:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
   10072:	ed b7       	in	r30, 0x3d	; 61
   10074:	fe b7       	in	r31, 0x3e	; 62
   10076:	36 96       	adiw	r30, 0x06	; 6
   10078:	0f b6       	in	r0, 0x3f	; 63
   1007a:	f8 94       	cli
   1007c:	fe bf       	out	0x3e, r31	; 62
   1007e:	0f be       	out	0x3f, r0	; 63
   10080:	ed bf       	out	0x3d, r30	; 61
   10082:	82 e0       	ldi	r24, 0x02	; 2
   10084:	61 e0       	ldi	r22, 0x01	; 1
   10086:	a8 01       	movw	r20, r16
   10088:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
                lcd_printf(3,1,PSTR("Proses"));
   1008c:	83 e0       	ldi	r24, 0x03	; 3
   1008e:	61 e0       	ldi	r22, 0x01	; 1
   10090:	40 ec       	ldi	r20, 0xC0	; 192
   10092:	52 e2       	ldi	r21, 0x22	; 34
   10094:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
				iPos=0;//iLoop=0;
   10098:	10 92 96 02 	sts	0x0296, r1
				IsFullAuthorized=False;
   1009c:	10 92 86 02 	sts	0x0286, r1
		        stLocalAccount=laSendID;
   100a0:	82 e0       	ldi	r24, 0x02	; 2
   100a2:	0b c0       	rjmp	.+22     	; 0x100ba <FMenuLocalAccount+0x110>
				break;         
           case laSendID://sendMessage56 
				IsMessage57=False;
   100a4:	10 92 a5 01 	sts	0x01A5, r1
                sendMessage56();
   100a8:	0e 94 d1 7f 	call	0xffa2	; 0xffa2 <sendMessage56>
				iWait=0;iPos=0;
   100ac:	10 92 95 02 	sts	0x0295, r1
   100b0:	10 92 96 02 	sts	0x0296, r1
				//iLoop=0;
				TimSend=0;
   100b4:	10 92 fa 0c 	sts	0x0CFA, r1
				stLocalAccount=laWaitMessage57;
   100b8:	83 e0       	ldi	r24, 0x03	; 3
   100ba:	80 93 5b 01 	sts	0x015B, r24
   100be:	0c 94 74 88 	jmp	0x110e8	; 0x110e8 <FMenuLocalAccount+0x113e>
						 system_beep(2);
						 stLocalAccount=laConTimout;
				}
				*/
				
		        iLoop++;
   100c2:	80 91 84 02 	lds	r24, 0x0284
   100c6:	90 91 85 02 	lds	r25, 0x0285
   100ca:	01 96       	adiw	r24, 0x01	; 1
   100cc:	90 93 85 02 	sts	0x0285, r25
   100d0:	80 93 84 02 	sts	0x0284, r24
				if ((iLoop%MSG_WAIT_TIMOUT)==0){
   100d4:	68 e9       	ldi	r22, 0x98	; 152
   100d6:	7a e3       	ldi	r23, 0x3A	; 58
   100d8:	0e 94 65 aa 	call	0x154ca	; 0x154ca <__udivmodhi4>
   100dc:	89 2b       	or	r24, r25
   100de:	e1 f4       	brne	.+56     	; 0x10118 <FMenuLocalAccount+0x16e>
				   if (iPos<5){
   100e0:	60 91 96 02 	lds	r22, 0x0296
   100e4:	65 30       	cpi	r22, 0x05	; 5
   100e6:	58 f4       	brcc	.+22     	; 0x100fe <FMenuLocalAccount+0x154>
					   lcd_put(3,(8+iPos),'.');
   100e8:	68 5f       	subi	r22, 0xF8	; 248
   100ea:	83 e0       	ldi	r24, 0x03	; 3
   100ec:	4e e2       	ldi	r20, 0x2E	; 46
   100ee:	0e 94 2c a5 	call	0x14a58	; 0x14a58 <lcd_put>
				       iPos++;
   100f2:	80 91 96 02 	lds	r24, 0x0296
   100f6:	8f 5f       	subi	r24, 0xFF	; 255
   100f8:	80 93 96 02 	sts	0x0296, r24
   100fc:	0d c0       	rjmp	.+26     	; 0x10118 <FMenuLocalAccount+0x16e>
					   }
				   else{
				       iPos=0;
   100fe:	10 92 96 02 	sts	0x0296, r1
					   lcd_printf(3,(9+iPos),PSTR("       "));
   10102:	83 e0       	ldi	r24, 0x03	; 3
   10104:	69 e0       	ldi	r22, 0x09	; 9
   10106:	48 eb       	ldi	r20, 0xB8	; 184
   10108:	52 e2       	ldi	r21, 0x22	; 34
   1010a:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
					   iWait++;
   1010e:	80 91 95 02 	lds	r24, 0x0295
   10112:	8f 5f       	subi	r24, 0xFF	; 255
   10114:	80 93 95 02 	sts	0x0295, r24
					   }
				}
				if (iWait>3){
   10118:	80 91 95 02 	lds	r24, 0x0295
   1011c:	84 30       	cpi	r24, 0x04	; 4
   1011e:	50 f0       	brcs	.+20     	; 0x10134 <FMenuLocalAccount+0x18a>
				    stLocalAccount=laConTimout;
   10120:	84 e0       	ldi	r24, 0x04	; 4
   10122:	80 93 5b 01 	sts	0x015B, r24
					TimLocAcc=0;
   10126:	10 92 ba 01 	sts	0x01BA, r1
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   1012a:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   1012c:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   1012e:	82 e0       	ldi	r24, 0x02	; 2
   10130:	80 93 bc 01 	sts	0x01BC, r24
				    stLocalAccount=laConTimout;
					TimLocAcc=0;
					system_beep(2);
				    }
                 
				if (IsMessage57==True){
   10134:	80 91 a5 01 	lds	r24, 0x01A5
   10138:	81 30       	cpi	r24, 0x01	; 1
   1013a:	09 f0       	breq	.+2      	; 0x1013e <FMenuLocalAccount+0x194>
   1013c:	d5 c7       	rjmp	.+4010   	; 0x110e8 <FMenuLocalAccount+0x113e>
				    IsMessage57=False;
   1013e:	10 92 a5 01 	sts	0x01A5, r1
				    stLocalAccount=laProcMessage57;
   10142:	85 e0       	ldi	r24, 0x05	; 5
   10144:	ba cf       	rjmp	.-140    	; 0x100ba <FMenuLocalAccount+0x110>
					}
		        break;
           case laConTimout:
		        //IsErrorTCPIP=True;
				lcd_printf(3,1,PSTR("Sending Failed      "));
   10146:	83 e0       	ldi	r24, 0x03	; 3
   10148:	61 e0       	ldi	r22, 0x01	; 1
   1014a:	43 ea       	ldi	r20, 0xA3	; 163
   1014c:	52 e2       	ldi	r21, 0x22	; 34
   1014e:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
				lcd_printf(4,1,PSTR("TCP/IP Error        "));
   10152:	84 e0       	ldi	r24, 0x04	; 4
   10154:	61 e0       	ldi	r22, 0x01	; 1
   10156:	4e e8       	ldi	r20, 0x8E	; 142
   10158:	52 e2       	ldi	r21, 0x22	; 34
   1015a:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
                if (TimLocAcc>2)  stLocalAccount=laExitLocAcc;
   1015e:	80 91 ba 01 	lds	r24, 0x01BA
   10162:	83 30       	cpi	r24, 0x03	; 3
   10164:	08 f4       	brcc	.+2      	; 0x10168 <FMenuLocalAccount+0x1be>
   10166:	c0 c7       	rjmp	.+3968   	; 0x110e8 <FMenuLocalAccount+0x113e>
   10168:	ad c7       	rjmp	.+3930   	; 0x110c4 <FMenuLocalAccount+0x111a>
		        break;
           case laProcMessage57://Process Message
				lcd_printf(3,1,PSTR("Data Received       "));
   1016a:	83 e0       	ldi	r24, 0x03	; 3
   1016c:	61 e0       	ldi	r22, 0x01	; 1
   1016e:	49 e7       	ldi	r20, 0x79	; 121
   10170:	52 e2       	ldi	r21, 0x22	; 34
   10172:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
				LocAccStatus=GetLocAccStatus(procMessage57());
   10176:	0e 94 1c 26 	call	0x4c38	; 0x4c38 <procMessage57>


char GetLocAccStatus(char paramMessage57){
     char Result;
	 Result=LA_NONE;
     if (paramMessage57==MSG57_INVALID)Result=LA_INVALID;
   1017a:	81 30       	cpi	r24, 0x01	; 1
   1017c:	29 f0       	breq	.+10     	; 0x10188 <FMenuLocalAccount+0x1de>
	 else
     if (paramMessage57==MSG57_VALID)Result=LA_VALID;
   1017e:	82 30       	cpi	r24, 0x02	; 2
   10180:	19 f0       	breq	.+6      	; 0x10188 <FMenuLocalAccount+0x1de>
	 else
     if (paramMessage57==MSG57_LIMITED)Result=LA_LIMITED;
   10182:	83 30       	cpi	r24, 0x03	; 3
   10184:	09 f0       	breq	.+2      	; 0x10188 <FMenuLocalAccount+0x1de>
   10186:	80 e0       	ldi	r24, 0x00	; 0
				lcd_printf(4,1,PSTR("TCP/IP Error        "));
                if (TimLocAcc>2)  stLocalAccount=laExitLocAcc;
		        break;
           case laProcMessage57://Process Message
				lcd_printf(3,1,PSTR("Data Received       "));
				LocAccStatus=GetLocAccStatus(procMessage57());
   10188:	80 93 97 02 	sts	0x0297, r24
				TimLocAcc=0;
   1018c:	10 92 ba 01 	sts	0x01BA, r1
				stLocalAccount=laDispStatus;
   10190:	86 e0       	ldi	r24, 0x06	; 6
   10192:	93 cf       	rjmp	.-218    	; 0x100ba <FMenuLocalAccount+0x110>
		        break;
           case laDispStatus://Display Status
		        if (LocAccStatus==LA_INVALID){
   10194:	80 91 97 02 	lds	r24, 0x0297
   10198:	81 30       	cpi	r24, 0x01	; 1
   1019a:	29 f4       	brne	.+10     	; 0x101a6 <FMenuLocalAccount+0x1fc>
					lcd_printf(3,1,PSTR("Tidak Terdaftar     "));    
   1019c:	83 e0       	ldi	r24, 0x03	; 3
   1019e:	61 e0       	ldi	r22, 0x01	; 1
   101a0:	44 e6       	ldi	r20, 0x64	; 100
   101a2:	52 e2       	ldi	r21, 0x22	; 34
   101a4:	0d c0       	rjmp	.+26     	; 0x101c0 <FMenuLocalAccount+0x216>
					TimLocAcc=0;
				    stLocalAccount=laDelayExit;
				}
				else
                if (LocAccStatus==LA_VALID) {
   101a6:	82 30       	cpi	r24, 0x02	; 2
   101a8:	31 f4       	brne	.+12     	; 0x101b6 <FMenuLocalAccount+0x20c>
				    stLocalAccount=laDispValid; 
   101aa:	87 e0       	ldi	r24, 0x07	; 7
   101ac:	80 93 5b 01 	sts	0x015B, r24
					lcd_clear();
   101b0:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
   101b4:	0c c0       	rjmp	.+24     	; 0x101ce <FMenuLocalAccount+0x224>
					}
				else
                if (LocAccStatus==LA_LIMITED){
   101b6:	83 30       	cpi	r24, 0x03	; 3
   101b8:	51 f4       	brne	.+20     	; 0x101ce <FMenuLocalAccount+0x224>
					lcd_printf(3,1,PSTR("Kartu Terbatas      "));    
   101ba:	61 e0       	ldi	r22, 0x01	; 1
   101bc:	4f e4       	ldi	r20, 0x4F	; 79
   101be:	52 e2       	ldi	r21, 0x22	; 34
   101c0:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
					TimLocAcc=0;
   101c4:	10 92 ba 01 	sts	0x01BA, r1
				    stLocalAccount=laDelayExit;
   101c8:	8e e1       	ldi	r24, 0x1E	; 30
   101ca:	80 93 5b 01 	sts	0x015B, r24
				}
                if (TimLocAcc>5)stLocalAccount=laExitLocAcc;
   101ce:	80 91 ba 01 	lds	r24, 0x01BA
   101d2:	86 30       	cpi	r24, 0x06	; 6
   101d4:	08 f4       	brcc	.+2      	; 0x101d8 <FMenuLocalAccount+0x22e>
   101d6:	88 c7       	rjmp	.+3856   	; 0x110e8 <FMenuLocalAccount+0x113e>
   101d8:	75 c7       	rjmp	.+3818   	; 0x110c4 <FMenuLocalAccount+0x111a>
		        break;
           case laDispValid://Display VALID ID
		        lcd_clear();
   101da:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
				sprintf_P(strBalanceValue,PSTR("%s"),strBalance);
   101de:	00 d0       	rcall	.+0      	; 0x101e0 <FMenuLocalAccount+0x236>
   101e0:	00 d0       	rcall	.+0      	; 0x101e2 <FMenuLocalAccount+0x238>
   101e2:	00 d0       	rcall	.+0      	; 0x101e4 <FMenuLocalAccount+0x23a>
   101e4:	ed b7       	in	r30, 0x3d	; 61
   101e6:	fe b7       	in	r31, 0x3e	; 62
   101e8:	31 96       	adiw	r30, 0x01	; 1
   101ea:	81 ea       	ldi	r24, 0xA1	; 161
   101ec:	9c e0       	ldi	r25, 0x0C	; 12
   101ee:	ad b7       	in	r26, 0x3d	; 61
   101f0:	be b7       	in	r27, 0x3e	; 62
   101f2:	12 96       	adiw	r26, 0x02	; 2
   101f4:	9c 93       	st	X, r25
   101f6:	8e 93       	st	-X, r24
   101f8:	11 97       	sbiw	r26, 0x01	; 1
   101fa:	8c e4       	ldi	r24, 0x4C	; 76
   101fc:	92 e2       	ldi	r25, 0x22	; 34
   101fe:	93 83       	std	Z+3, r25	; 0x03
   10200:	82 83       	std	Z+2, r24	; 0x02
   10202:	0a e7       	ldi	r16, 0x7A	; 122
   10204:	1c e0       	ldi	r17, 0x0C	; 12
   10206:	15 83       	std	Z+5, r17	; 0x05
   10208:	04 83       	std	Z+4, r16	; 0x04
   1020a:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
				FormatCurrency(strBalance);
   1020e:	ed b7       	in	r30, 0x3d	; 61
   10210:	fe b7       	in	r31, 0x3e	; 62
   10212:	36 96       	adiw	r30, 0x06	; 6
   10214:	0f b6       	in	r0, 0x3f	; 63
   10216:	f8 94       	cli
   10218:	fe bf       	out	0x3e, r31	; 62
   1021a:	0f be       	out	0x3f, r0	; 63
   1021c:	ed bf       	out	0x3d, r30	; 61
   1021e:	c8 01       	movw	r24, r16
   10220:	0e 94 0d 33 	call	0x661a	; 0x661a <FormatCurrency>
   10224:	20 e0       	ldi	r18, 0x00	; 0
   10226:	30 e0       	ldi	r19, 0x00	; 0


void StringCopy(char *Source,char *Dest,char Length){
     char i;
	 for (i=0;i<Length;i++){
	     Dest[i]=Source[i];
   10228:	80 e2       	ldi	r24, 0x20	; 32
   1022a:	e8 2e       	mov	r14, r24
   1022c:	f1 2c       	mov	r15, r1
   1022e:	ec 0e       	add	r14, r28
   10230:	fd 1e       	adc	r15, r29
   10232:	f7 01       	movw	r30, r14
   10234:	e2 0f       	add	r30, r18
   10236:	f3 1f       	adc	r31, r19
   10238:	d9 01       	movw	r26, r18
   1023a:	aa 55       	subi	r26, 0x5A	; 90
   1023c:	bc 4f       	sbci	r27, 0xFC	; 252
   1023e:	8c 91       	ld	r24, X
   10240:	80 83       	st	Z, r24
   10242:	2f 5f       	subi	r18, 0xFF	; 255
   10244:	3f 4f       	sbci	r19, 0xFF	; 255
//Message 56


void StringCopy(char *Source,char *Dest,char Length){
     char i;
	 for (i=0;i<Length;i++){
   10246:	24 31       	cpi	r18, 0x14	; 20
   10248:	31 05       	cpc	r19, r1
   1024a:	99 f7       	brne	.-26     	; 0x10232 <FMenuLocalAccount+0x288>
	     Dest[i]=Source[i];
	 }Dest[Length]=0;
   1024c:	1c aa       	std	Y+52, r1	; 0x34
		        lcd_clear();
				sprintf_P(strBalanceValue,PSTR("%s"),strBalance);
				FormatCurrency(strBalance);

		        StringCopy(strCardHolder,strName,20);  				                                                        
		        sprintf_P(lcdteks,PSTR("%s"),strCompName);               lcd_print(1,1,lcdteks);   //[CompName]
   1024e:	00 d0       	rcall	.+0      	; 0x10250 <FMenuLocalAccount+0x2a6>
   10250:	00 d0       	rcall	.+0      	; 0x10252 <FMenuLocalAccount+0x2a8>
   10252:	00 d0       	rcall	.+0      	; 0x10254 <FMenuLocalAccount+0x2aa>
   10254:	ed b7       	in	r30, 0x3d	; 61
   10256:	fe b7       	in	r31, 0x3e	; 62
   10258:	31 96       	adiw	r30, 0x01	; 1
   1025a:	8e 01       	movw	r16, r28
   1025c:	04 5f       	subi	r16, 0xF4	; 244
   1025e:	1f 4f       	sbci	r17, 0xFF	; 255
   10260:	ad b7       	in	r26, 0x3d	; 61
   10262:	be b7       	in	r27, 0x3e	; 62
   10264:	12 96       	adiw	r26, 0x02	; 2
   10266:	1c 93       	st	X, r17
   10268:	0e 93       	st	-X, r16
   1026a:	11 97       	sbiw	r26, 0x01	; 1
   1026c:	89 e4       	ldi	r24, 0x49	; 73
   1026e:	92 e2       	ldi	r25, 0x22	; 34
   10270:	93 83       	std	Z+3, r25	; 0x03
   10272:	82 83       	std	Z+2, r24	; 0x02
   10274:	8b ef       	ldi	r24, 0xFB	; 251
   10276:	97 e0       	ldi	r25, 0x07	; 7
   10278:	95 83       	std	Z+5, r25	; 0x05
   1027a:	84 83       	std	Z+4, r24	; 0x04
   1027c:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
   10280:	ed b7       	in	r30, 0x3d	; 61
   10282:	fe b7       	in	r31, 0x3e	; 62
   10284:	36 96       	adiw	r30, 0x06	; 6
   10286:	0f b6       	in	r0, 0x3f	; 63
   10288:	f8 94       	cli
   1028a:	fe bf       	out	0x3e, r31	; 62
   1028c:	0f be       	out	0x3f, r0	; 63
   1028e:	ed bf       	out	0x3d, r30	; 61
   10290:	81 e0       	ldi	r24, 0x01	; 1
   10292:	61 e0       	ldi	r22, 0x01	; 1
   10294:	a8 01       	movw	r20, r16
   10296:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
                //sprintf(lcdteks,"%s %s",strCardID,strName);    lcd_print(2,1,lcdteks);   //[Card ID][Card Holder]
				sprintf_P(lcdteks,PSTR("%s"),strName);                   lcd_print(2,1,lcdteks);   //[Card ID][Card Holder]
   1029a:	00 d0       	rcall	.+0      	; 0x1029c <FMenuLocalAccount+0x2f2>
   1029c:	00 d0       	rcall	.+0      	; 0x1029e <FMenuLocalAccount+0x2f4>
   1029e:	00 d0       	rcall	.+0      	; 0x102a0 <FMenuLocalAccount+0x2f6>
   102a0:	ed b7       	in	r30, 0x3d	; 61
   102a2:	fe b7       	in	r31, 0x3e	; 62
   102a4:	31 96       	adiw	r30, 0x01	; 1
   102a6:	ad b7       	in	r26, 0x3d	; 61
   102a8:	be b7       	in	r27, 0x3e	; 62
   102aa:	12 96       	adiw	r26, 0x02	; 2
   102ac:	1c 93       	st	X, r17
   102ae:	0e 93       	st	-X, r16
   102b0:	11 97       	sbiw	r26, 0x01	; 1
   102b2:	86 e4       	ldi	r24, 0x46	; 70
   102b4:	92 e2       	ldi	r25, 0x22	; 34
   102b6:	93 83       	std	Z+3, r25	; 0x03
   102b8:	82 83       	std	Z+2, r24	; 0x02
   102ba:	f5 82       	std	Z+5, r15	; 0x05
   102bc:	e4 82       	std	Z+4, r14	; 0x04
   102be:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
   102c2:	ed b7       	in	r30, 0x3d	; 61
   102c4:	fe b7       	in	r31, 0x3e	; 62
   102c6:	36 96       	adiw	r30, 0x06	; 6
   102c8:	0f b6       	in	r0, 0x3f	; 63
   102ca:	f8 94       	cli
   102cc:	fe bf       	out	0x3e, r31	; 62
   102ce:	0f be       	out	0x3f, r0	; 63
   102d0:	ed bf       	out	0x3d, r30	; 61
   102d2:	82 e0       	ldi	r24, 0x02	; 2
   102d4:	61 e0       	ldi	r22, 0x01	; 1
   102d6:	a8 01       	movw	r20, r16
   102d8:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
				sprintf_P(lcdteks,PSTR("%s %s"),strLicPlate,strBalance); lcd_print(3,1,lcdteks);   //[LicPlate][Balance] 
   102dc:	2d b7       	in	r18, 0x3d	; 61
   102de:	3e b7       	in	r19, 0x3e	; 62
   102e0:	28 50       	subi	r18, 0x08	; 8
   102e2:	30 40       	sbci	r19, 0x00	; 0
   102e4:	0f b6       	in	r0, 0x3f	; 63
   102e6:	f8 94       	cli
   102e8:	3e bf       	out	0x3e, r19	; 62
   102ea:	0f be       	out	0x3f, r0	; 63
   102ec:	2d bf       	out	0x3d, r18	; 61
   102ee:	ed b7       	in	r30, 0x3d	; 61
   102f0:	fe b7       	in	r31, 0x3e	; 62
   102f2:	31 96       	adiw	r30, 0x01	; 1
   102f4:	ad b7       	in	r26, 0x3d	; 61
   102f6:	be b7       	in	r27, 0x3e	; 62
   102f8:	12 96       	adiw	r26, 0x02	; 2
   102fa:	1c 93       	st	X, r17
   102fc:	0e 93       	st	-X, r16
   102fe:	11 97       	sbiw	r26, 0x01	; 1
   10300:	80 e4       	ldi	r24, 0x40	; 64
   10302:	92 e2       	ldi	r25, 0x22	; 34
   10304:	93 83       	std	Z+3, r25	; 0x03
   10306:	82 83       	std	Z+2, r24	; 0x02
   10308:	8c e7       	ldi	r24, 0x7C	; 124
   1030a:	99 e0       	ldi	r25, 0x09	; 9
   1030c:	95 83       	std	Z+5, r25	; 0x05
   1030e:	84 83       	std	Z+4, r24	; 0x04
   10310:	8a e7       	ldi	r24, 0x7A	; 122
   10312:	9c e0       	ldi	r25, 0x0C	; 12
   10314:	97 83       	std	Z+7, r25	; 0x07
   10316:	86 83       	std	Z+6, r24	; 0x06
   10318:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
   1031c:	ed b7       	in	r30, 0x3d	; 61
   1031e:	fe b7       	in	r31, 0x3e	; 62
   10320:	38 96       	adiw	r30, 0x08	; 8
   10322:	0f b6       	in	r0, 0x3f	; 63
   10324:	f8 94       	cli
   10326:	fe bf       	out	0x3e, r31	; 62
   10328:	0f be       	out	0x3f, r0	; 63
   1032a:	ed bf       	out	0x3d, r30	; 61
   1032c:	83 e0       	ldi	r24, 0x03	; 3
   1032e:	61 e0       	ldi	r22, 0x01	; 1
   10330:	a8 01       	movw	r20, r16
   10332:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
	            lcd_printf(4,1,PSTR("[*]Batal       [#]OK"));   //[*]Batal       [#]OK
   10336:	84 e0       	ldi	r24, 0x04	; 4
   10338:	61 e0       	ldi	r22, 0x01	; 1
   1033a:	4b e2       	ldi	r20, 0x2B	; 43
   1033c:	52 e2       	ldi	r21, 0x22	; 34
   1033e:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
				stLocalAccount=laDispValidInput;
   10342:	88 e0       	ldi	r24, 0x08	; 8
   10344:	ba ce       	rjmp	.-652    	; 0x100ba <FMenuLocalAccount+0x110>
		        break;
           case laDispValidInput:
                KeyPressed=_key_scan(1);
   10346:	81 e0       	ldi	r24, 0x01	; 1
   10348:	0e 94 58 a6 	call	0x14cb0	; 0x14cb0 <_key_scan>
				if (KeyPressed==_KEY_ENTER) stLocalAccount=laSelectFIP;
   1034c:	87 3b       	cpi	r24, 0xB7	; 183
   1034e:	09 f4       	brne	.+2      	; 0x10352 <FMenuLocalAccount+0x3a8>
   10350:	b3 c1       	rjmp	.+870    	; 0x106b8 <FMenuLocalAccount+0x70e>
				else
				if (KeyPressed==_KEY_CANCEL)stLocalAccount=laExitLocAcc;
   10352:	87 3e       	cpi	r24, 0xE7	; 231
   10354:	09 f0       	breq	.+2      	; 0x10358 <FMenuLocalAccount+0x3ae>
   10356:	c8 c6       	rjmp	.+3472   	; 0x110e8 <FMenuLocalAccount+0x113e>
   10358:	b5 c6       	rjmp	.+3434   	; 0x110c4 <FMenuLocalAccount+0x111a>
		        break;
           case laSelectFIP:      
			    FIPResult=menu_FIP(&FIP_Used,strFIP);
   1035a:	01 e9       	ldi	r16, 0x91	; 145
   1035c:	12 e0       	ldi	r17, 0x02	; 2
   1035e:	88 e8       	ldi	r24, 0x88	; 136
   10360:	92 e0       	ldi	r25, 0x02	; 2
   10362:	b8 01       	movw	r22, r16
   10364:	0e 94 28 55 	call	0xaa50	; 0xaa50 <menu_FIP>

			    if ((FIPResult==FIP_DONE)&&(FIP_Used>0)){
   10368:	88 23       	and	r24, r24
   1036a:	09 f0       	breq	.+2      	; 0x1036e <FMenuLocalAccount+0x3c4>
   1036c:	4e c0       	rjmp	.+156    	; 0x1040a <FMenuLocalAccount+0x460>
   1036e:	20 91 88 02 	lds	r18, 0x0288
   10372:	22 23       	and	r18, r18
   10374:	09 f4       	brne	.+2      	; 0x10378 <FMenuLocalAccount+0x3ce>
   10376:	b8 c6       	rjmp	.+3440   	; 0x110e8 <FMenuLocalAccount+0x113e>
                    sprintf_P(strFIP,PSTR("%.2d"),FIP_Used);
   10378:	00 d0       	rcall	.+0      	; 0x1037a <FMenuLocalAccount+0x3d0>
   1037a:	00 d0       	rcall	.+0      	; 0x1037c <FMenuLocalAccount+0x3d2>
   1037c:	00 d0       	rcall	.+0      	; 0x1037e <FMenuLocalAccount+0x3d4>
   1037e:	ed b7       	in	r30, 0x3d	; 61
   10380:	fe b7       	in	r31, 0x3e	; 62
   10382:	31 96       	adiw	r30, 0x01	; 1
   10384:	ad b7       	in	r26, 0x3d	; 61
   10386:	be b7       	in	r27, 0x3e	; 62
   10388:	12 96       	adiw	r26, 0x02	; 2
   1038a:	1c 93       	st	X, r17
   1038c:	0e 93       	st	-X, r16
   1038e:	11 97       	sbiw	r26, 0x01	; 1
   10390:	86 e2       	ldi	r24, 0x26	; 38
   10392:	92 e2       	ldi	r25, 0x22	; 34
   10394:	93 83       	std	Z+3, r25	; 0x03
   10396:	82 83       	std	Z+2, r24	; 0x02
   10398:	24 83       	std	Z+4, r18	; 0x04
   1039a:	15 82       	std	Z+5, r1	; 0x05
   1039c:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
					sprintf_P(strFIP_ID,PSTR("%.2d"),FIP_Used);
   103a0:	ed b7       	in	r30, 0x3d	; 61
   103a2:	fe b7       	in	r31, 0x3e	; 62
   103a4:	31 96       	adiw	r30, 0x01	; 1
   103a6:	8b e3       	ldi	r24, 0x3B	; 59
   103a8:	98 e0       	ldi	r25, 0x08	; 8
   103aa:	ad b7       	in	r26, 0x3d	; 61
   103ac:	be b7       	in	r27, 0x3e	; 62
   103ae:	12 96       	adiw	r26, 0x02	; 2
   103b0:	9c 93       	st	X, r25
   103b2:	8e 93       	st	-X, r24
   103b4:	11 97       	sbiw	r26, 0x01	; 1
   103b6:	81 e2       	ldi	r24, 0x21	; 33
   103b8:	92 e2       	ldi	r25, 0x22	; 34
   103ba:	93 83       	std	Z+3, r25	; 0x03
   103bc:	82 83       	std	Z+2, r24	; 0x02
   103be:	80 91 88 02 	lds	r24, 0x0288
   103c2:	84 83       	std	Z+4, r24	; 0x04
   103c4:	15 82       	std	Z+5, r1	; 0x05
   103c6:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
                    //Load Product Info
					if (GetFIPAddr(FIP_Used)>0) 
   103ca:	ed b7       	in	r30, 0x3d	; 61
   103cc:	fe b7       	in	r31, 0x3e	; 62
   103ce:	36 96       	adiw	r30, 0x06	; 6
   103d0:	0f b6       	in	r0, 0x3f	; 63
   103d2:	f8 94       	cli
   103d4:	fe bf       	out	0x3e, r31	; 62
   103d6:	0f be       	out	0x3f, r0	; 63
   103d8:	ed bf       	out	0x3d, r30	; 61
   103da:	80 91 88 02 	lds	r24, 0x0288
   103de:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <GetFIPAddr>
   103e2:	88 23       	and	r24, r24
   103e4:	81 f0       	breq	.+32     	; 0x10406 <FMenuLocalAccount+0x45c>
					    eeprom_read_block((void*) &ProductID, (const void*) &DefNozzleMap[GetFIPAddr(FIP_Used)-1], 6);
   103e6:	80 91 88 02 	lds	r24, 0x0288
   103ea:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <GetFIPAddr>
   103ee:	96 e0       	ldi	r25, 0x06	; 6
   103f0:	89 9f       	mul	r24, r25
   103f2:	b0 01       	movw	r22, r0
   103f4:	11 24       	eor	r1, r1
   103f6:	60 5b       	subi	r22, 0xB0	; 176
   103f8:	7f 4f       	sbci	r23, 0xFF	; 255
   103fa:	89 e8       	ldi	r24, 0x89	; 137
   103fc:	92 e0       	ldi	r25, 0x02	; 2
   103fe:	46 e0       	ldi	r20, 0x06	; 6
   10400:	50 e0       	ldi	r21, 0x00	; 0
   10402:	0e 94 1b ad 	call	0x15a36	; 0x15a36 <__eerd_block_m128>
				    stLocalAccount=laSelectProduct;
   10406:	8b e0       	ldi	r24, 0x0B	; 11
   10408:	58 ce       	rjmp	.-848    	; 0x100ba <FMenuLocalAccount+0x110>
				}
			    else if (FIPResult==FIP_CANCEL){
   1040a:	82 30       	cpi	r24, 0x02	; 2
   1040c:	09 f0       	breq	.+2      	; 0x10410 <FMenuLocalAccount+0x466>
   1040e:	6c c6       	rjmp	.+3288   	; 0x110e8 <FMenuLocalAccount+0x113e>
				    stLocalAccount=laDispValid;
   10410:	87 e0       	ldi	r24, 0x07	; 7
   10412:	53 ce       	rjmp	.-858    	; 0x100ba <FMenuLocalAccount+0x110>
		        break; 
           case laSelectFIPInput:

		        break;
           case laSelectProduct://NozzleID
				lcd_clear();
   10414:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
		        sprintf_P(lcdteks,PSTR("Pompa-%s"),strFIP);lcd_print(1,1,lcdteks);
   10418:	00 d0       	rcall	.+0      	; 0x1041a <FMenuLocalAccount+0x470>
   1041a:	00 d0       	rcall	.+0      	; 0x1041c <FMenuLocalAccount+0x472>
   1041c:	00 d0       	rcall	.+0      	; 0x1041e <FMenuLocalAccount+0x474>
   1041e:	ed b7       	in	r30, 0x3d	; 61
   10420:	fe b7       	in	r31, 0x3e	; 62
   10422:	31 96       	adiw	r30, 0x01	; 1
   10424:	8e 01       	movw	r16, r28
   10426:	04 5f       	subi	r16, 0xF4	; 244
   10428:	1f 4f       	sbci	r17, 0xFF	; 255
   1042a:	ad b7       	in	r26, 0x3d	; 61
   1042c:	be b7       	in	r27, 0x3e	; 62
   1042e:	12 96       	adiw	r26, 0x02	; 2
   10430:	1c 93       	st	X, r17
   10432:	0e 93       	st	-X, r16
   10434:	11 97       	sbiw	r26, 0x01	; 1
   10436:	88 e1       	ldi	r24, 0x18	; 24
   10438:	92 e2       	ldi	r25, 0x22	; 34
   1043a:	93 83       	std	Z+3, r25	; 0x03
   1043c:	82 83       	std	Z+2, r24	; 0x02
   1043e:	81 e9       	ldi	r24, 0x91	; 145
   10440:	92 e0       	ldi	r25, 0x02	; 2
   10442:	95 83       	std	Z+5, r25	; 0x05
   10444:	84 83       	std	Z+4, r24	; 0x04
   10446:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
   1044a:	ed b7       	in	r30, 0x3d	; 61
   1044c:	fe b7       	in	r31, 0x3e	; 62
   1044e:	36 96       	adiw	r30, 0x06	; 6
   10450:	0f b6       	in	r0, 0x3f	; 63
   10452:	f8 94       	cli
   10454:	fe bf       	out	0x3e, r31	; 62
   10456:	0f be       	out	0x3f, r0	; 63
   10458:	ed bf       	out	0x3d, r30	; 61
   1045a:	81 e0       	ldi	r24, 0x01	; 1
   1045c:	61 e0       	ldi	r22, 0x01	; 1
   1045e:	a8 01       	movw	r20, r16
   10460:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
				//Not MPD->Single Product
				if ((ProductID[0]>=1)&&(ProductID[0]<=6)&&
   10464:	90 91 89 02 	lds	r25, 0x0289
   10468:	89 2f       	mov	r24, r25
   1046a:	81 50       	subi	r24, 0x01	; 1
   1046c:	86 30       	cpi	r24, 0x06	; 6
   1046e:	08 f0       	brcs	.+2      	; 0x10472 <FMenuLocalAccount+0x4c8>
   10470:	4b c0       	rjmp	.+150    	; 0x10508 <FMenuLocalAccount+0x55e>
   10472:	80 91 8a 02 	lds	r24, 0x028A
   10476:	88 23       	and	r24, r24
   10478:	09 f0       	breq	.+2      	; 0x1047c <FMenuLocalAccount+0x4d2>
   1047a:	46 c0       	rjmp	.+140    	; 0x10508 <FMenuLocalAccount+0x55e>
   1047c:	80 91 8b 02 	lds	r24, 0x028B
   10480:	88 23       	and	r24, r24
   10482:	09 f0       	breq	.+2      	; 0x10486 <FMenuLocalAccount+0x4dc>
   10484:	41 c0       	rjmp	.+130    	; 0x10508 <FMenuLocalAccount+0x55e>
   10486:	80 91 8c 02 	lds	r24, 0x028C
   1048a:	88 23       	and	r24, r24
   1048c:	e9 f5       	brne	.+122    	; 0x10508 <FMenuLocalAccount+0x55e>
				    (ProductID[1]==0)&&(ProductID[2]==0)&&(ProductID[3]==0)){
                     //Load 1st Product      					 
					 ProdId=ProductID[0];
   1048e:	90 93 87 02 	sts	0x0287, r25
					 eeprom_read_block((void*) &ProductName, (const void*) &DefProductName[ProdId-1],10);
   10492:	6d e0       	ldi	r22, 0x0D	; 13
   10494:	96 9f       	mul	r25, r22
   10496:	b0 01       	movw	r22, r0
   10498:	11 24       	eor	r1, r1
   1049a:	61 55       	subi	r22, 0x51	; 81
   1049c:	7f 4f       	sbci	r23, 0xFF	; 255
   1049e:	8e 01       	movw	r16, r28
   104a0:	0f 5f       	subi	r16, 0xFF	; 255
   104a2:	1f 4f       	sbci	r17, 0xFF	; 255
   104a4:	c8 01       	movw	r24, r16
   104a6:	4a e0       	ldi	r20, 0x0A	; 10
   104a8:	50 e0       	ldi	r21, 0x00	; 0
   104aa:	0e 94 1b ad 	call	0x15a36	; 0x15a36 <__eerd_block_m128>
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   104ae:	ce 01       	movw	r24, r28
   104b0:	09 96       	adiw	r24, 0x09	; 9
	    Dest[i]=Source[IdxSource+i];
   104b2:	0f 5f       	subi	r16, 0xFF	; 255
   104b4:	1f 4f       	sbci	r17, 0xFF	; 255
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   104b6:	08 17       	cp	r16, r24
   104b8:	19 07       	cpc	r17, r25
   104ba:	d9 f7       	brne	.-10     	; 0x104b2 <FMenuLocalAccount+0x508>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
   104bc:	19 86       	std	Y+9, r1	; 0x09
				    (ProductID[1]==0)&&(ProductID[2]==0)&&(ProductID[3]==0)){
                     //Load 1st Product      					 
					 ProdId=ProductID[0];
					 eeprom_read_block((void*) &ProductName, (const void*) &DefProductName[ProdId-1],10);
					 StrPosCopy(ProductName,ProductName,0,8);
					 sprintf_P(strProduct,PSTR("%s"),ProductName);
   104be:	00 d0       	rcall	.+0      	; 0x104c0 <FMenuLocalAccount+0x516>
   104c0:	00 d0       	rcall	.+0      	; 0x104c2 <FMenuLocalAccount+0x518>
   104c2:	00 d0       	rcall	.+0      	; 0x104c4 <FMenuLocalAccount+0x51a>
   104c4:	ed b7       	in	r30, 0x3d	; 61
   104c6:	fe b7       	in	r31, 0x3e	; 62
   104c8:	31 96       	adiw	r30, 0x01	; 1
   104ca:	80 ee       	ldi	r24, 0xE0	; 224
   104cc:	97 e0       	ldi	r25, 0x07	; 7
   104ce:	ad b7       	in	r26, 0x3d	; 61
   104d0:	be b7       	in	r27, 0x3e	; 62
   104d2:	12 96       	adiw	r26, 0x02	; 2
   104d4:	9c 93       	st	X, r25
   104d6:	8e 93       	st	-X, r24
   104d8:	11 97       	sbiw	r26, 0x01	; 1
   104da:	85 e1       	ldi	r24, 0x15	; 21
   104dc:	92 e2       	ldi	r25, 0x22	; 34
   104de:	93 83       	std	Z+3, r25	; 0x03
   104e0:	82 83       	std	Z+2, r24	; 0x02
   104e2:	ce 01       	movw	r24, r28
   104e4:	01 96       	adiw	r24, 0x01	; 1
   104e6:	95 83       	std	Z+5, r25	; 0x05
   104e8:	84 83       	std	Z+4, r24	; 0x04
   104ea:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
                     stLocalAccount=laSelectBalanceType;
   104ee:	8d e0       	ldi	r24, 0x0D	; 13
   104f0:	80 93 5b 01 	sts	0x015B, r24
   104f4:	80 e0       	ldi	r24, 0x00	; 0
   104f6:	ed b7       	in	r30, 0x3d	; 61
   104f8:	fe b7       	in	r31, 0x3e	; 62
   104fa:	36 96       	adiw	r30, 0x06	; 6
   104fc:	0f b6       	in	r0, 0x3f	; 63
   104fe:	f8 94       	cli
   10500:	fe bf       	out	0x3e, r31	; 62
   10502:	0f be       	out	0x3f, r0	; 63
   10504:	ed bf       	out	0x3d, r30	; 61
   10506:	f1 c5       	rjmp	.+3042   	; 0x110ea <FMenuLocalAccount+0x1140>
					}else
                {
				//MultiProductDisplay Select:
				//Load Nozzle Configuration
				for(iNozzle=0;iNozzle<4;iNozzle++){
   10508:	10 92 8f 02 	sts	0x028F, r1
				        eeprom_read_block((void*) &ProductName, (const void*) &DefProductName[ProdId-1],10);
						StrPosCopy(ProductName,ProductName,0,8);
					    sprintf_P(lcdteks,PSTR("%d.%s"),(iNozzle+1),ProductName);
                    }
					else{
					       sprintf_P(lcdteks,PSTR("     "));					
   1050c:	0c e0       	ldi	r16, 0x0C	; 12
   1050e:	e0 2e       	mov	r14, r16
   10510:	f1 2c       	mov	r15, r1
   10512:	ec 0e       	add	r14, r28
   10514:	fd 1e       	adc	r15, r29
   10516:	19 e0       	ldi	r17, 0x09	; 9
   10518:	81 2e       	mov	r8, r17
   1051a:	12 e2       	ldi	r17, 0x22	; 34
   1051c:	91 2e       	mov	r9, r17
				//Load Nozzle Configuration
				for(iNozzle=0;iNozzle<4;iNozzle++){
                    //Masalah 0-->void
				    ProdId=ProductID[iNozzle];
					if ((ProdId>=1)&&(ProdId<=6)){
				        eeprom_read_block((void*) &ProductName, (const void*) &DefProductName[ProdId-1],10);
   1051e:	bd e0       	ldi	r27, 0x0D	; 13
   10520:	6b 2e       	mov	r6, r27
   10522:	8e 01       	movw	r16, r28
   10524:	0f 5f       	subi	r16, 0xFF	; 255
   10526:	1f 4f       	sbci	r17, 0xFF	; 255
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   10528:	a9 e0       	ldi	r26, 0x09	; 9
   1052a:	aa 2e       	mov	r10, r26
   1052c:	b1 2c       	mov	r11, r1
   1052e:	ac 0e       	add	r10, r28
   10530:	bd 1e       	adc	r11, r29
                    //Masalah 0-->void
				    ProdId=ProductID[iNozzle];
					if ((ProdId>=1)&&(ProdId<=6)){
				        eeprom_read_block((void*) &ProductName, (const void*) &DefProductName[ProdId-1],10);
						StrPosCopy(ProductName,ProductName,0,8);
					    sprintf_P(lcdteks,PSTR("%d.%s"),(iNozzle+1),ProductName);
   10532:	ff e0       	ldi	r31, 0x0F	; 15
   10534:	cf 2e       	mov	r12, r31
   10536:	f2 e2       	ldi	r31, 0x22	; 34
   10538:	df 2e       	mov	r13, r31
                    }
					else{
					       sprintf_P(lcdteks,PSTR("     "));					
					}
				    lcd_print(2+(iNozzle%2),1+(iNozzle/2)*11,lcdteks);
   1053a:	eb e0       	ldi	r30, 0x0B	; 11
   1053c:	7e 2e       	mov	r7, r30
   1053e:	65 c0       	rjmp	.+202    	; 0x1060a <FMenuLocalAccount+0x660>
                {
				//MultiProductDisplay Select:
				//Load Nozzle Configuration
				for(iNozzle=0;iNozzle<4;iNozzle++){
                    //Masalah 0-->void
				    ProdId=ProductID[iNozzle];
   10540:	f0 e0       	ldi	r31, 0x00	; 0
   10542:	e7 57       	subi	r30, 0x77	; 119
   10544:	fd 4f       	sbci	r31, 0xFD	; 253
   10546:	e0 81       	ld	r30, Z
   10548:	e0 93 87 02 	sts	0x0287, r30
					if ((ProdId>=1)&&(ProdId<=6)){
   1054c:	8e 2f       	mov	r24, r30
   1054e:	81 50       	subi	r24, 0x01	; 1
   10550:	86 30       	cpi	r24, 0x06	; 6
   10552:	b8 f5       	brcc	.+110    	; 0x105c2 <FMenuLocalAccount+0x618>
				        eeprom_read_block((void*) &ProductName, (const void*) &DefProductName[ProdId-1],10);
   10554:	e6 9d       	mul	r30, r6
   10556:	b0 01       	movw	r22, r0
   10558:	11 24       	eor	r1, r1
   1055a:	61 55       	subi	r22, 0x51	; 81
   1055c:	7f 4f       	sbci	r23, 0xFF	; 255
   1055e:	c8 01       	movw	r24, r16
   10560:	4a e0       	ldi	r20, 0x0A	; 10
   10562:	50 e0       	ldi	r21, 0x00	; 0
   10564:	0e 94 1b ad 	call	0x15a36	; 0x15a36 <__eerd_block_m128>
   10568:	c8 01       	movw	r24, r16
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
   1056a:	01 96       	adiw	r24, 0x01	; 1
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   1056c:	8a 15       	cp	r24, r10
   1056e:	9b 05       	cpc	r25, r11
   10570:	e1 f7       	brne	.-8      	; 0x1056a <FMenuLocalAccount+0x5c0>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
   10572:	19 86       	std	Y+9, r1	; 0x09
                    //Masalah 0-->void
				    ProdId=ProductID[iNozzle];
					if ((ProdId>=1)&&(ProdId<=6)){
				        eeprom_read_block((void*) &ProductName, (const void*) &DefProductName[ProdId-1],10);
						StrPosCopy(ProductName,ProductName,0,8);
					    sprintf_P(lcdteks,PSTR("%d.%s"),(iNozzle+1),ProductName);
   10574:	2d b7       	in	r18, 0x3d	; 61
   10576:	3e b7       	in	r19, 0x3e	; 62
   10578:	28 50       	subi	r18, 0x08	; 8
   1057a:	30 40       	sbci	r19, 0x00	; 0
   1057c:	0f b6       	in	r0, 0x3f	; 63
   1057e:	f8 94       	cli
   10580:	3e bf       	out	0x3e, r19	; 62
   10582:	0f be       	out	0x3f, r0	; 63
   10584:	2d bf       	out	0x3d, r18	; 61
   10586:	ed b7       	in	r30, 0x3d	; 61
   10588:	fe b7       	in	r31, 0x3e	; 62
   1058a:	31 96       	adiw	r30, 0x01	; 1
   1058c:	ad b7       	in	r26, 0x3d	; 61
   1058e:	be b7       	in	r27, 0x3e	; 62
   10590:	12 96       	adiw	r26, 0x02	; 2
   10592:	fc 92       	st	X, r15
   10594:	ee 92       	st	-X, r14
   10596:	11 97       	sbiw	r26, 0x01	; 1
   10598:	d3 82       	std	Z+3, r13	; 0x03
   1059a:	c2 82       	std	Z+2, r12	; 0x02
   1059c:	80 91 8f 02 	lds	r24, 0x028F
   105a0:	90 e0       	ldi	r25, 0x00	; 0
   105a2:	01 96       	adiw	r24, 0x01	; 1
   105a4:	95 83       	std	Z+5, r25	; 0x05
   105a6:	84 83       	std	Z+4, r24	; 0x04
   105a8:	17 83       	std	Z+7, r17	; 0x07
   105aa:	06 83       	std	Z+6, r16	; 0x06
   105ac:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
   105b0:	ed b7       	in	r30, 0x3d	; 61
   105b2:	fe b7       	in	r31, 0x3e	; 62
   105b4:	38 96       	adiw	r30, 0x08	; 8
   105b6:	0f b6       	in	r0, 0x3f	; 63
   105b8:	f8 94       	cli
   105ba:	fe bf       	out	0x3e, r31	; 62
   105bc:	0f be       	out	0x3f, r0	; 63
   105be:	ed bf       	out	0x3d, r30	; 61
   105c0:	12 c0       	rjmp	.+36     	; 0x105e6 <FMenuLocalAccount+0x63c>
                    }
					else{
					       sprintf_P(lcdteks,PSTR("     "));					
   105c2:	00 d0       	rcall	.+0      	; 0x105c4 <FMenuLocalAccount+0x61a>
   105c4:	00 d0       	rcall	.+0      	; 0x105c6 <FMenuLocalAccount+0x61c>
   105c6:	ad b7       	in	r26, 0x3d	; 61
   105c8:	be b7       	in	r27, 0x3e	; 62
   105ca:	12 96       	adiw	r26, 0x02	; 2
   105cc:	fc 92       	st	X, r15
   105ce:	ee 92       	st	-X, r14
   105d0:	11 97       	sbiw	r26, 0x01	; 1
   105d2:	14 96       	adiw	r26, 0x04	; 4
   105d4:	9c 92       	st	X, r9
   105d6:	8e 92       	st	-X, r8
   105d8:	13 97       	sbiw	r26, 0x03	; 3
   105da:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
   105de:	0f 90       	pop	r0
   105e0:	0f 90       	pop	r0
   105e2:	0f 90       	pop	r0
   105e4:	0f 90       	pop	r0
					}
				    lcd_print(2+(iNozzle%2),1+(iNozzle/2)*11,lcdteks);
   105e6:	80 91 8f 02 	lds	r24, 0x028F
   105ea:	68 2f       	mov	r22, r24
   105ec:	66 95       	lsr	r22
   105ee:	67 9d       	mul	r22, r7
   105f0:	b0 01       	movw	r22, r0
   105f2:	11 24       	eor	r1, r1
   105f4:	6f 5f       	subi	r22, 0xFF	; 255
   105f6:	81 70       	andi	r24, 0x01	; 1
   105f8:	8e 5f       	subi	r24, 0xFE	; 254
   105fa:	a7 01       	movw	r20, r14
   105fc:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
                     stLocalAccount=laSelectBalanceType;
					}else
                {
				//MultiProductDisplay Select:
				//Load Nozzle Configuration
				for(iNozzle=0;iNozzle<4;iNozzle++){
   10600:	80 91 8f 02 	lds	r24, 0x028F
   10604:	8f 5f       	subi	r24, 0xFF	; 255
   10606:	80 93 8f 02 	sts	0x028F, r24
   1060a:	e0 91 8f 02 	lds	r30, 0x028F
   1060e:	e4 30       	cpi	r30, 0x04	; 4
   10610:	08 f4       	brcc	.+2      	; 0x10614 <FMenuLocalAccount+0x66a>
   10612:	96 cf       	rjmp	.-212    	; 0x10540 <FMenuLocalAccount+0x596>
					else{
					       sprintf_P(lcdteks,PSTR("     "));					
					}
				    lcd_print(2+(iNozzle%2),1+(iNozzle/2)*11,lcdteks);
				}
	            lcd_printf(4,1,PSTR("[*]Back             "));   //"[*]Back             "				
   10614:	84 e0       	ldi	r24, 0x04	; 4
   10616:	61 e0       	ldi	r22, 0x01	; 1
   10618:	44 ef       	ldi	r20, 0xF4	; 244
   1061a:	51 e2       	ldi	r21, 0x21	; 33
   1061c:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
				stLocalAccount=laSelectProductInput;
   10620:	8c e0       	ldi	r24, 0x0C	; 12
   10622:	4b cd       	rjmp	.-1386   	; 0x100ba <FMenuLocalAccount+0x110>
				}
		        break; 
           case laSelectProductInput:
				KeyPressed=_key_scan(1);
   10624:	81 e0       	ldi	r24, 0x01	; 1
   10626:	0e 94 58 a6 	call	0x14cb0	; 0x14cb0 <_key_scan>
   1062a:	e8 2e       	mov	r14, r24
			    KeyChar=_key_btn(KeyPressed);
   1062c:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <_key_btn>
				if ((KeyChar>='1')&&(KeyChar<='4')){
   10630:	81 53       	subi	r24, 0x31	; 49
   10632:	84 30       	cpi	r24, 0x04	; 4
   10634:	e8 f5       	brcc	.+122    	; 0x106b0 <FMenuLocalAccount+0x706>
				    iNozzle=KeyChar-'1';
   10636:	80 93 8f 02 	sts	0x028F, r24
				    eeprom_read_block((void*) &ProductName, (const void*) &DefProductName[ProductID[iNozzle]-1],10);
   1063a:	e8 2f       	mov	r30, r24
   1063c:	f0 e0       	ldi	r31, 0x00	; 0
   1063e:	e7 57       	subi	r30, 0x77	; 119
   10640:	fd 4f       	sbci	r31, 0xFD	; 253
   10642:	60 81       	ld	r22, Z
   10644:	7d e0       	ldi	r23, 0x0D	; 13
   10646:	f7 2e       	mov	r15, r23
   10648:	6f 9d       	mul	r22, r15
   1064a:	b0 01       	movw	r22, r0
   1064c:	11 24       	eor	r1, r1
   1064e:	61 55       	subi	r22, 0x51	; 81
   10650:	7f 4f       	sbci	r23, 0xFF	; 255
   10652:	8e 01       	movw	r16, r28
   10654:	0f 5f       	subi	r16, 0xFF	; 255
   10656:	1f 4f       	sbci	r17, 0xFF	; 255
   10658:	c8 01       	movw	r24, r16
   1065a:	4a e0       	ldi	r20, 0x0A	; 10
   1065c:	50 e0       	ldi	r21, 0x00	; 0
   1065e:	0e 94 1b ad 	call	0x15a36	; 0x15a36 <__eerd_block_m128>
					sprintf_P(strProduct,PSTR("%s"),ProductName);
   10662:	00 d0       	rcall	.+0      	; 0x10664 <FMenuLocalAccount+0x6ba>
   10664:	00 d0       	rcall	.+0      	; 0x10666 <FMenuLocalAccount+0x6bc>
   10666:	00 d0       	rcall	.+0      	; 0x10668 <FMenuLocalAccount+0x6be>
   10668:	ed b7       	in	r30, 0x3d	; 61
   1066a:	fe b7       	in	r31, 0x3e	; 62
   1066c:	31 96       	adiw	r30, 0x01	; 1
   1066e:	80 ee       	ldi	r24, 0xE0	; 224
   10670:	97 e0       	ldi	r25, 0x07	; 7
   10672:	ad b7       	in	r26, 0x3d	; 61
   10674:	be b7       	in	r27, 0x3e	; 62
   10676:	12 96       	adiw	r26, 0x02	; 2
   10678:	9c 93       	st	X, r25
   1067a:	8e 93       	st	-X, r24
   1067c:	11 97       	sbiw	r26, 0x01	; 1
   1067e:	81 ef       	ldi	r24, 0xF1	; 241
   10680:	91 e2       	ldi	r25, 0x21	; 33
   10682:	93 83       	std	Z+3, r25	; 0x03
   10684:	82 83       	std	Z+2, r24	; 0x02
   10686:	15 83       	std	Z+5, r17	; 0x05
   10688:	04 83       	std	Z+4, r16	; 0x04
   1068a:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
					NozzleID=iNozzle+1;
   1068e:	80 91 8f 02 	lds	r24, 0x028F
   10692:	8f 5f       	subi	r24, 0xFF	; 255
   10694:	80 93 ef 07 	sts	0x07EF, r24
                    stLocalAccount=laSelectBalanceType;
   10698:	f0 92 5b 01 	sts	0x015B, r15
					lcd_clear();
   1069c:	ed b7       	in	r30, 0x3d	; 61
   1069e:	fe b7       	in	r31, 0x3e	; 62
   106a0:	36 96       	adiw	r30, 0x06	; 6
   106a2:	0f b6       	in	r0, 0x3f	; 63
   106a4:	f8 94       	cli
   106a6:	fe bf       	out	0x3e, r31	; 62
   106a8:	0f be       	out	0x3f, r0	; 63
   106aa:	ed bf       	out	0x3d, r30	; 61
   106ac:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
					}                
				if (KeyPressed==_KEY_CANCEL)stLocalAccount=laSelectFIP;//Back To Pump Selection
   106b0:	f7 ee       	ldi	r31, 0xE7	; 231
   106b2:	ef 16       	cp	r14, r31
   106b4:	09 f0       	breq	.+2      	; 0x106b8 <FMenuLocalAccount+0x70e>
   106b6:	18 c5       	rjmp	.+2608   	; 0x110e8 <FMenuLocalAccount+0x113e>
   106b8:	89 e0       	ldi	r24, 0x09	; 9
   106ba:	ff cc       	rjmp	.-1538   	; 0x100ba <FMenuLocalAccount+0x110>
		        break;
           case laSelectBalanceType:
		        lcd_clear();
   106bc:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
		        sprintf_P(lcdteks,PSTR("P%s-%s "),strFIP,strProduct);      
   106c0:	2d b7       	in	r18, 0x3d	; 61
   106c2:	3e b7       	in	r19, 0x3e	; 62
   106c4:	28 50       	subi	r18, 0x08	; 8
   106c6:	30 40       	sbci	r19, 0x00	; 0
   106c8:	0f b6       	in	r0, 0x3f	; 63
   106ca:	f8 94       	cli
   106cc:	3e bf       	out	0x3e, r19	; 62
   106ce:	0f be       	out	0x3f, r0	; 63
   106d0:	2d bf       	out	0x3d, r18	; 61
   106d2:	ed b7       	in	r30, 0x3d	; 61
   106d4:	fe b7       	in	r31, 0x3e	; 62
   106d6:	31 96       	adiw	r30, 0x01	; 1
   106d8:	8e 01       	movw	r16, r28
   106da:	04 5f       	subi	r16, 0xF4	; 244
   106dc:	1f 4f       	sbci	r17, 0xFF	; 255
   106de:	ad b7       	in	r26, 0x3d	; 61
   106e0:	be b7       	in	r27, 0x3e	; 62
   106e2:	12 96       	adiw	r26, 0x02	; 2
   106e4:	1c 93       	st	X, r17
   106e6:	0e 93       	st	-X, r16
   106e8:	11 97       	sbiw	r26, 0x01	; 1
   106ea:	89 ee       	ldi	r24, 0xE9	; 233
   106ec:	91 e2       	ldi	r25, 0x21	; 33
   106ee:	93 83       	std	Z+3, r25	; 0x03
   106f0:	82 83       	std	Z+2, r24	; 0x02
   106f2:	81 e9       	ldi	r24, 0x91	; 145
   106f4:	92 e0       	ldi	r25, 0x02	; 2
   106f6:	95 83       	std	Z+5, r25	; 0x05
   106f8:	84 83       	std	Z+4, r24	; 0x04
   106fa:	80 ee       	ldi	r24, 0xE0	; 224
   106fc:	97 e0       	ldi	r25, 0x07	; 7
   106fe:	97 83       	std	Z+7, r25	; 0x07
   10700:	86 83       	std	Z+6, r24	; 0x06
   10702:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
				 lcd_print(1,1,lcdteks);                        //"P01-Pertamax        "                                                                      
   10706:	ed b7       	in	r30, 0x3d	; 61
   10708:	fe b7       	in	r31, 0x3e	; 62
   1070a:	38 96       	adiw	r30, 0x08	; 8
   1070c:	0f b6       	in	r0, 0x3f	; 63
   1070e:	f8 94       	cli
   10710:	fe bf       	out	0x3e, r31	; 62
   10712:	0f be       	out	0x3f, r0	; 63
   10714:	ed bf       	out	0x3d, r30	; 61
   10716:	81 e0       	ldi	r24, 0x01	; 1
   10718:	61 e0       	ldi	r22, 0x01	; 1
   1071a:	a8 01       	movw	r20, r16
   1071c:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
		        lcd_printf(2,1,PSTR("[1]Volume           "));   //"[1]Premium          "                                                                      
   10720:	82 e0       	ldi	r24, 0x02	; 2
   10722:	61 e0       	ldi	r22, 0x01	; 1
   10724:	44 ed       	ldi	r20, 0xD4	; 212
   10726:	51 e2       	ldi	r21, 0x21	; 33
   10728:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
				lcd_printf(3,1,PSTR("[2]Amount           "));   //"[2]Pertamax         "
   1072c:	83 e0       	ldi	r24, 0x03	; 3
   1072e:	61 e0       	ldi	r22, 0x01	; 1
   10730:	4f eb       	ldi	r20, 0xBF	; 191
   10732:	51 e2       	ldi	r21, 0x21	; 33
   10734:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
				lcd_printf(4,1,PSTR("[*]Back    [#]Next  "));   //"[*]Back             "						        
   10738:	84 e0       	ldi	r24, 0x04	; 4
   1073a:	61 e0       	ldi	r22, 0x01	; 1
   1073c:	4a ea       	ldi	r20, 0xAA	; 170
   1073e:	51 e2       	ldi	r21, 0x21	; 33
   10740:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
	            //lcd_printf(4,1,PSTR("[*]Back    [#]Next  "));   //"[*]Back             "						        
                stLocalAccount=laSelectBalanceTypeInput;   
   10744:	8e e0       	ldi	r24, 0x0E	; 14
   10746:	b9 cc       	rjmp	.-1678   	; 0x100ba <FMenuLocalAccount+0x110>
		        break;
           case laSelectBalanceTypeInput:
				KeyPressed=_key_scan(1);
   10748:	81 e0       	ldi	r24, 0x01	; 1
   1074a:	0e 94 58 a6 	call	0x14cb0	; 0x14cb0 <_key_scan>
   1074e:	18 2f       	mov	r17, r24
			    KeyChar=_key_btn(KeyPressed);
   10750:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <_key_btn>
   10754:	98 2f       	mov	r25, r24
				if ((KeyChar>='1')&&(KeyChar<='2')){
   10756:	81 53       	subi	r24, 0x31	; 49
   10758:	82 30       	cpi	r24, 0x02	; 2
   1075a:	80 f5       	brcc	.+96     	; 0x107bc <FMenuLocalAccount+0x812>
                    if(KeyChar=='1'){
   1075c:	91 33       	cpi	r25, 0x31	; 49
   1075e:	a1 f4       	brne	.+40     	; 0x10788 <FMenuLocalAccount+0x7de>
					   BalanceType=1;
   10760:	81 e0       	ldi	r24, 0x01	; 1
   10762:	80 93 94 02 	sts	0x0294, r24
					   sprintf_P(strBalanceType,PSTR("V"));
   10766:	00 d0       	rcall	.+0      	; 0x10768 <FMenuLocalAccount+0x7be>
   10768:	00 d0       	rcall	.+0      	; 0x1076a <FMenuLocalAccount+0x7c0>
   1076a:	85 e2       	ldi	r24, 0x25	; 37
   1076c:	94 e0       	ldi	r25, 0x04	; 4
   1076e:	ad b7       	in	r26, 0x3d	; 61
   10770:	be b7       	in	r27, 0x3e	; 62
   10772:	12 96       	adiw	r26, 0x02	; 2
   10774:	9c 93       	st	X, r25
   10776:	8e 93       	st	-X, r24
   10778:	11 97       	sbiw	r26, 0x01	; 1
   1077a:	88 ea       	ldi	r24, 0xA8	; 168
   1077c:	91 e2       	ldi	r25, 0x21	; 33
   1077e:	14 96       	adiw	r26, 0x04	; 4
   10780:	9c 93       	st	X, r25
   10782:	8e 93       	st	-X, r24
   10784:	13 97       	sbiw	r26, 0x03	; 3
   10786:	11 c0       	rjmp	.+34     	; 0x107aa <FMenuLocalAccount+0x800>
					   }
					else
                    if(KeyChar=='2'){
   10788:	92 33       	cpi	r25, 0x32	; 50
   1078a:	a9 f4       	brne	.+42     	; 0x107b6 <FMenuLocalAccount+0x80c>
					   BalanceType=2;
   1078c:	82 e0       	ldi	r24, 0x02	; 2
   1078e:	80 93 94 02 	sts	0x0294, r24
                       sprintf_P(strBalanceType,PSTR("A"));
   10792:	00 d0       	rcall	.+0      	; 0x10794 <FMenuLocalAccount+0x7ea>
   10794:	00 d0       	rcall	.+0      	; 0x10796 <FMenuLocalAccount+0x7ec>
   10796:	85 e2       	ldi	r24, 0x25	; 37
   10798:	94 e0       	ldi	r25, 0x04	; 4
   1079a:	ed b7       	in	r30, 0x3d	; 61
   1079c:	fe b7       	in	r31, 0x3e	; 62
   1079e:	92 83       	std	Z+2, r25	; 0x02
   107a0:	81 83       	std	Z+1, r24	; 0x01
   107a2:	86 ea       	ldi	r24, 0xA6	; 166
   107a4:	91 e2       	ldi	r25, 0x21	; 33
   107a6:	94 83       	std	Z+4, r25	; 0x04
   107a8:	83 83       	std	Z+3, r24	; 0x03
   107aa:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
   107ae:	0f 90       	pop	r0
   107b0:	0f 90       	pop	r0
   107b2:	0f 90       	pop	r0
   107b4:	0f 90       	pop	r0
					   }
				    stLocalAccount=laBalanceValue;  
   107b6:	8f e0       	ldi	r24, 0x0F	; 15
   107b8:	80 93 5b 01 	sts	0x015B, r24
					}              
				if (KeyPressed==_KEY_CANCEL){
   107bc:	17 3e       	cpi	r17, 0xE7	; 231
   107be:	c9 f4       	brne	.+50     	; 0x107f2 <FMenuLocalAccount+0x848>
				    if ((ProductID[0]>=1)&&(ProductID[0]<=6)&&(ProductID[1]==0)&&(ProductID[2]==0)&&(ProductID[3]==0))
   107c0:	80 91 89 02 	lds	r24, 0x0289
   107c4:	81 50       	subi	r24, 0x01	; 1
   107c6:	86 30       	cpi	r24, 0x06	; 6
   107c8:	70 f4       	brcc	.+28     	; 0x107e6 <FMenuLocalAccount+0x83c>
   107ca:	80 91 8a 02 	lds	r24, 0x028A
   107ce:	88 23       	and	r24, r24
   107d0:	51 f4       	brne	.+20     	; 0x107e6 <FMenuLocalAccount+0x83c>
   107d2:	80 91 8b 02 	lds	r24, 0x028B
   107d6:	88 23       	and	r24, r24
   107d8:	31 f4       	brne	.+12     	; 0x107e6 <FMenuLocalAccount+0x83c>
   107da:	80 91 8c 02 	lds	r24, 0x028C
   107de:	88 23       	and	r24, r24
   107e0:	11 f4       	brne	.+4      	; 0x107e6 <FMenuLocalAccount+0x83c>
					     stLocalAccount=laSelectFIP;//Back To FIP Select Non MPD
   107e2:	89 e0       	ldi	r24, 0x09	; 9
   107e4:	01 c0       	rjmp	.+2      	; 0x107e8 <FMenuLocalAccount+0x83e>
                    else stLocalAccount=laSelectProduct;//Back To Product Selection MPD
   107e6:	8b e0       	ldi	r24, 0x0B	; 11
   107e8:	80 93 5b 01 	sts	0x015B, r24
					lcd_clear();
   107ec:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
   107f0:	7b c4       	rjmp	.+2294   	; 0x110e8 <FMenuLocalAccount+0x113e>
					}
                else
				if (KeyPressed==_KEY_ENTER){
   107f2:	17 3b       	cpi	r17, 0xB7	; 183
   107f4:	09 f0       	breq	.+2      	; 0x107f8 <FMenuLocalAccount+0x84e>
   107f6:	78 c4       	rjmp	.+2288   	; 0x110e8 <FMenuLocalAccount+0x113e>
				    BalanceType=1;
   107f8:	11 e0       	ldi	r17, 0x01	; 1
   107fa:	10 93 94 02 	sts	0x0294, r17
					sprintf_P(strBalanceType,PSTR("A"));
   107fe:	00 d0       	rcall	.+0      	; 0x10800 <FMenuLocalAccount+0x856>
   10800:	00 d0       	rcall	.+0      	; 0x10802 <FMenuLocalAccount+0x858>
   10802:	85 e2       	ldi	r24, 0x25	; 37
   10804:	94 e0       	ldi	r25, 0x04	; 4
   10806:	ad b7       	in	r26, 0x3d	; 61
   10808:	be b7       	in	r27, 0x3e	; 62
   1080a:	12 96       	adiw	r26, 0x02	; 2
   1080c:	9c 93       	st	X, r25
   1080e:	8e 93       	st	-X, r24
   10810:	11 97       	sbiw	r26, 0x01	; 1
   10812:	84 ea       	ldi	r24, 0xA4	; 164
   10814:	91 e2       	ldi	r25, 0x21	; 33
   10816:	14 96       	adiw	r26, 0x04	; 4
   10818:	9c 93       	st	X, r25
   1081a:	8e 93       	st	-X, r24
   1081c:	13 97       	sbiw	r26, 0x03	; 3
   1081e:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
					//sprintf_P(strBalanceValue,PSTR("999"));
					IsFullAuthorized=True;
   10822:	10 93 86 02 	sts	0x0286, r17
                    stLocalAccount=laOdometer;//FullAuthorized
   10826:	81 e1       	ldi	r24, 0x11	; 17
   10828:	80 93 5b 01 	sts	0x015B, r24
   1082c:	80 e0       	ldi	r24, 0x00	; 0
   1082e:	0f 90       	pop	r0
   10830:	0f 90       	pop	r0
   10832:	0f 90       	pop	r0
   10834:	0f 90       	pop	r0
   10836:	59 c4       	rjmp	.+2226   	; 0x110ea <FMenuLocalAccount+0x1140>
					}

		        break;
           case laBalanceValue:
		        lcd_clear();
   10838:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
		        if(BalanceType==1){
   1083c:	80 91 94 02 	lds	r24, 0x0294
   10840:	81 30       	cpi	r24, 0x01	; 1
   10842:	f1 f5       	brne	.+124    	; 0x108c0 <FMenuLocalAccount+0x916>
		           sprintf_P(lcdteks,PSTR("P%s-%s "),strFIP,strProduct);      
   10844:	ed b7       	in	r30, 0x3d	; 61
   10846:	fe b7       	in	r31, 0x3e	; 62
   10848:	38 97       	sbiw	r30, 0x08	; 8
   1084a:	0f b6       	in	r0, 0x3f	; 63
   1084c:	f8 94       	cli
   1084e:	fe bf       	out	0x3e, r31	; 62
   10850:	0f be       	out	0x3f, r0	; 63
   10852:	ed bf       	out	0x3d, r30	; 61
   10854:	31 96       	adiw	r30, 0x01	; 1
   10856:	8e 01       	movw	r16, r28
   10858:	04 5f       	subi	r16, 0xF4	; 244
   1085a:	1f 4f       	sbci	r17, 0xFF	; 255
   1085c:	ad b7       	in	r26, 0x3d	; 61
   1085e:	be b7       	in	r27, 0x3e	; 62
   10860:	12 96       	adiw	r26, 0x02	; 2
   10862:	1c 93       	st	X, r17
   10864:	0e 93       	st	-X, r16
   10866:	11 97       	sbiw	r26, 0x01	; 1
   10868:	8c e9       	ldi	r24, 0x9C	; 156
   1086a:	91 e2       	ldi	r25, 0x21	; 33
   1086c:	93 83       	std	Z+3, r25	; 0x03
   1086e:	82 83       	std	Z+2, r24	; 0x02
   10870:	81 e9       	ldi	r24, 0x91	; 145
   10872:	92 e0       	ldi	r25, 0x02	; 2
   10874:	95 83       	std	Z+5, r25	; 0x05
   10876:	84 83       	std	Z+4, r24	; 0x04
   10878:	80 ee       	ldi	r24, 0xE0	; 224
   1087a:	97 e0       	ldi	r25, 0x07	; 7
   1087c:	97 83       	std	Z+7, r25	; 0x07
   1087e:	86 83       	std	Z+6, r24	; 0x06
   10880:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
				    lcd_print(1,1,lcdteks);                        //"P01-Pertamax        "                                                                      
   10884:	ed b7       	in	r30, 0x3d	; 61
   10886:	fe b7       	in	r31, 0x3e	; 62
   10888:	38 96       	adiw	r30, 0x08	; 8
   1088a:	0f b6       	in	r0, 0x3f	; 63
   1088c:	f8 94       	cli
   1088e:	fe bf       	out	0x3e, r31	; 62
   10890:	0f be       	out	0x3f, r0	; 63
   10892:	ed bf       	out	0x3d, r30	; 61
   10894:	81 e0       	ldi	r24, 0x01	; 1
   10896:	61 e0       	ldi	r22, 0x01	; 1
   10898:	a8 01       	movw	r20, r16
   1089a:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
		           lcd_printf(2,1,PSTR("[1]Volume:_         "));   //"[1]Volume:_         "                                                                      
   1089e:	82 e0       	ldi	r24, 0x02	; 2
   108a0:	61 e0       	ldi	r22, 0x01	; 1
   108a2:	47 e8       	ldi	r20, 0x87	; 135
   108a4:	51 e2       	ldi	r21, 0x21	; 33
   108a6:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
				   lcd_printf(3,1,PSTR("                    "));   //"                    "
   108aa:	83 e0       	ldi	r24, 0x03	; 3
   108ac:	61 e0       	ldi	r22, 0x01	; 1
   108ae:	42 e7       	ldi	r20, 0x72	; 114
   108b0:	51 e2       	ldi	r21, 0x21	; 33
   108b2:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
	               lcd_printf(4,1,PSTR("[*]Back  [#]OK      "));   //"[*]Back  [#]OK     "						        
   108b6:	84 e0       	ldi	r24, 0x04	; 4
   108b8:	61 e0       	ldi	r22, 0x01	; 1
   108ba:	4d e5       	ldi	r20, 0x5D	; 93
   108bc:	51 e2       	ldi	r21, 0x21	; 33
   108be:	43 c0       	rjmp	.+134    	; 0x10946 <FMenuLocalAccount+0x99c>
				   }
                else
		        if(BalanceType==2){
   108c0:	82 30       	cpi	r24, 0x02	; 2
   108c2:	09 f0       	breq	.+2      	; 0x108c6 <FMenuLocalAccount+0x91c>
   108c4:	42 c0       	rjmp	.+132    	; 0x1094a <FMenuLocalAccount+0x9a0>
		           sprintf_P(lcdteks,PSTR("P%s-%s "),strFIP,strProduct);      
   108c6:	2d b7       	in	r18, 0x3d	; 61
   108c8:	3e b7       	in	r19, 0x3e	; 62
   108ca:	28 50       	subi	r18, 0x08	; 8
   108cc:	30 40       	sbci	r19, 0x00	; 0
   108ce:	0f b6       	in	r0, 0x3f	; 63
   108d0:	f8 94       	cli
   108d2:	3e bf       	out	0x3e, r19	; 62
   108d4:	0f be       	out	0x3f, r0	; 63
   108d6:	2d bf       	out	0x3d, r18	; 61
   108d8:	ed b7       	in	r30, 0x3d	; 61
   108da:	fe b7       	in	r31, 0x3e	; 62
   108dc:	31 96       	adiw	r30, 0x01	; 1
   108de:	8e 01       	movw	r16, r28
   108e0:	04 5f       	subi	r16, 0xF4	; 244
   108e2:	1f 4f       	sbci	r17, 0xFF	; 255
   108e4:	ad b7       	in	r26, 0x3d	; 61
   108e6:	be b7       	in	r27, 0x3e	; 62
   108e8:	12 96       	adiw	r26, 0x02	; 2
   108ea:	1c 93       	st	X, r17
   108ec:	0e 93       	st	-X, r16
   108ee:	11 97       	sbiw	r26, 0x01	; 1
   108f0:	85 e5       	ldi	r24, 0x55	; 85
   108f2:	91 e2       	ldi	r25, 0x21	; 33
   108f4:	93 83       	std	Z+3, r25	; 0x03
   108f6:	82 83       	std	Z+2, r24	; 0x02
   108f8:	81 e9       	ldi	r24, 0x91	; 145
   108fa:	92 e0       	ldi	r25, 0x02	; 2
   108fc:	95 83       	std	Z+5, r25	; 0x05
   108fe:	84 83       	std	Z+4, r24	; 0x04
   10900:	80 ee       	ldi	r24, 0xE0	; 224
   10902:	97 e0       	ldi	r25, 0x07	; 7
   10904:	97 83       	std	Z+7, r25	; 0x07
   10906:	86 83       	std	Z+6, r24	; 0x06
   10908:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
				   lcd_print(1,1,lcdteks);                         //"P01-Pertamax        "                                                                      
   1090c:	ed b7       	in	r30, 0x3d	; 61
   1090e:	fe b7       	in	r31, 0x3e	; 62
   10910:	38 96       	adiw	r30, 0x08	; 8
   10912:	0f b6       	in	r0, 0x3f	; 63
   10914:	f8 94       	cli
   10916:	fe bf       	out	0x3e, r31	; 62
   10918:	0f be       	out	0x3f, r0	; 63
   1091a:	ed bf       	out	0x3d, r30	; 61
   1091c:	81 e0       	ldi	r24, 0x01	; 1
   1091e:	61 e0       	ldi	r22, 0x01	; 1
   10920:	a8 01       	movw	r20, r16
   10922:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
		           lcd_printf(2,1,PSTR("                    "));   //"                    "                                                                      
   10926:	82 e0       	ldi	r24, 0x02	; 2
   10928:	61 e0       	ldi	r22, 0x01	; 1
   1092a:	40 e4       	ldi	r20, 0x40	; 64
   1092c:	51 e2       	ldi	r21, 0x21	; 33
   1092e:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
				   lcd_printf(3,1,PSTR("[2]Amount:_         "));   //"[2]Amount:_         "
   10932:	83 e0       	ldi	r24, 0x03	; 3
   10934:	61 e0       	ldi	r22, 0x01	; 1
   10936:	4b e2       	ldi	r20, 0x2B	; 43
   10938:	51 e2       	ldi	r21, 0x21	; 33
   1093a:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
	               lcd_printf(4,1,PSTR("[*]Back  [#]OK      "));   //"[*]Back  [#]OK      "			        
   1093e:	84 e0       	ldi	r24, 0x04	; 4
   10940:	61 e0       	ldi	r22, 0x01	; 1
   10942:	46 e1       	ldi	r20, 0x16	; 22
   10944:	51 e2       	ldi	r21, 0x21	; 33
   10946:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
				   }
                iLoop=0;
   1094a:	10 92 85 02 	sts	0x0285, r1
   1094e:	10 92 84 02 	sts	0x0284, r1
				iValuePos=0;
   10952:	10 92 90 02 	sts	0x0290, r1
				//ValueChar[iValuePos]=' ';
		        stLocalAccount=laBalanceValueInput;  
   10956:	80 e1       	ldi	r24, 0x10	; 16
   10958:	b0 cb       	rjmp	.-2208   	; 0x100ba <FMenuLocalAccount+0x110>
		        break; 
           case laBalanceValueInput:
		        uiResult=UserInput(UI_NUMBER_R,(1+BalanceType),11,strBalanceValue,0,10); 
   1095a:	60 91 94 02 	lds	r22, 0x0294
   1095e:	6f 5f       	subi	r22, 0xFF	; 255
   10960:	81 e0       	ldi	r24, 0x01	; 1
   10962:	4b e0       	ldi	r20, 0x0B	; 11
   10964:	21 ea       	ldi	r18, 0xA1	; 161
   10966:	3c e0       	ldi	r19, 0x0C	; 12
   10968:	00 e0       	ldi	r16, 0x00	; 0
   1096a:	10 e0       	ldi	r17, 0x00	; 0
   1096c:	5a e0       	ldi	r21, 0x0A	; 10
   1096e:	e5 2e       	mov	r14, r21
   10970:	0e 94 a9 67 	call	0xcf52	; 0xcf52 <UserInput>
				if (uiResult==USER_CANCEL){
   10974:	81 30       	cpi	r24, 0x01	; 1
   10976:	39 f4       	brne	.+14     	; 0x10986 <FMenuLocalAccount+0x9dc>
				    lcd_clear();
   10978:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
   1097c:	88 ea       	ldi	r24, 0xA8	; 168
   1097e:	91 e6       	ldi	r25, 0x61	; 97
   10980:	01 97       	sbiw	r24, 0x01	; 1
   10982:	f1 f7       	brne	.-4      	; 0x10980 <FMenuLocalAccount+0x9d6>
   10984:	f9 c0       	rjmp	.+498    	; 0x10b78 <FMenuLocalAccount+0xbce>
					_delay_ms(100);		        
				    stLocalAccount=laSelectBalanceType;		        
					}
				else
				if (uiResult==USER_OK){				    
   10986:	83 30       	cpi	r24, 0x03	; 3
   10988:	09 f0       	breq	.+2      	; 0x1098c <FMenuLocalAccount+0x9e2>
   1098a:	ae c3       	rjmp	.+1884   	; 0x110e8 <FMenuLocalAccount+0x113e>
				    stLocalAccount=laOdometer;
   1098c:	81 e1       	ldi	r24, 0x11	; 17
   1098e:	80 93 5b 01 	sts	0x015B, r24
					lcd_clear();
   10992:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
   10996:	88 ea       	ldi	r24, 0xA8	; 168
   10998:	91 e6       	ldi	r25, 0x61	; 97
   1099a:	01 97       	sbiw	r24, 0x01	; 1
   1099c:	f1 f7       	brne	.-4      	; 0x1099a <FMenuLocalAccount+0x9f0>
   1099e:	a4 c3       	rjmp	.+1864   	; 0x110e8 <FMenuLocalAccount+0x113e>
					_delay_ms(100);		        
					}
*/
		        break;
           case laOdometer://GetOdometer			
		        lcd_clear();
   109a0:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
				if (IsFullAuthorized==True){
   109a4:	80 91 86 02 	lds	r24, 0x0286
   109a8:	81 30       	cpi	r24, 0x01	; 1
   109aa:	09 f0       	breq	.+2      	; 0x109ae <FMenuLocalAccount+0xa04>
   109ac:	4a c0       	rjmp	.+148    	; 0x10a42 <FMenuLocalAccount+0xa98>
				    lcd_printf(1,1,PSTR("Pump Product   Full"));
   109ae:	61 e0       	ldi	r22, 0x01	; 1
   109b0:	42 e0       	ldi	r20, 0x02	; 2
   109b2:	51 e2       	ldi	r21, 0x21	; 33
   109b4:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
					sprintf_P(lcdteks,PSTR("  %s %s "),strFIP,strProduct);    lcd_print(2,1,lcdteks);    //"P01  Pertamax       "
   109b8:	2d b7       	in	r18, 0x3d	; 61
   109ba:	3e b7       	in	r19, 0x3e	; 62
   109bc:	28 50       	subi	r18, 0x08	; 8
   109be:	30 40       	sbci	r19, 0x00	; 0
   109c0:	0f b6       	in	r0, 0x3f	; 63
   109c2:	f8 94       	cli
   109c4:	3e bf       	out	0x3e, r19	; 62
   109c6:	0f be       	out	0x3f, r0	; 63
   109c8:	2d bf       	out	0x3d, r18	; 61
   109ca:	ed b7       	in	r30, 0x3d	; 61
   109cc:	fe b7       	in	r31, 0x3e	; 62
   109ce:	31 96       	adiw	r30, 0x01	; 1
   109d0:	8e 01       	movw	r16, r28
   109d2:	04 5f       	subi	r16, 0xF4	; 244
   109d4:	1f 4f       	sbci	r17, 0xFF	; 255
   109d6:	ad b7       	in	r26, 0x3d	; 61
   109d8:	be b7       	in	r27, 0x3e	; 62
   109da:	12 96       	adiw	r26, 0x02	; 2
   109dc:	1c 93       	st	X, r17
   109de:	0e 93       	st	-X, r16
   109e0:	11 97       	sbiw	r26, 0x01	; 1
   109e2:	89 ef       	ldi	r24, 0xF9	; 249
   109e4:	90 e2       	ldi	r25, 0x20	; 32
   109e6:	93 83       	std	Z+3, r25	; 0x03
   109e8:	82 83       	std	Z+2, r24	; 0x02
   109ea:	81 e9       	ldi	r24, 0x91	; 145
   109ec:	92 e0       	ldi	r25, 0x02	; 2
   109ee:	95 83       	std	Z+5, r25	; 0x05
   109f0:	84 83       	std	Z+4, r24	; 0x04
   109f2:	80 ee       	ldi	r24, 0xE0	; 224
   109f4:	97 e0       	ldi	r25, 0x07	; 7
   109f6:	97 83       	std	Z+7, r25	; 0x07
   109f8:	86 83       	std	Z+6, r24	; 0x06
   109fa:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
   109fe:	ed b7       	in	r30, 0x3d	; 61
   10a00:	fe b7       	in	r31, 0x3e	; 62
   10a02:	38 96       	adiw	r30, 0x08	; 8
   10a04:	0f b6       	in	r0, 0x3f	; 63
   10a06:	f8 94       	cli
   10a08:	fe bf       	out	0x3e, r31	; 62
   10a0a:	0f be       	out	0x3f, r0	; 63
   10a0c:	ed bf       	out	0x3d, r30	; 61
   10a0e:	82 e0       	ldi	r24, 0x02	; 2
   10a10:	61 e0       	ldi	r22, 0x01	; 1
   10a12:	a8 01       	movw	r20, r16
   10a14:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
		            sprintf_P(lcdteks,PSTR("  Tank"));            lcd_print(2,14,lcdteks);   //"P01  Pertamax 500000"
   10a18:	00 d0       	rcall	.+0      	; 0x10a1a <FMenuLocalAccount+0xa70>
   10a1a:	00 d0       	rcall	.+0      	; 0x10a1c <FMenuLocalAccount+0xa72>
   10a1c:	ad b7       	in	r26, 0x3d	; 61
   10a1e:	be b7       	in	r27, 0x3e	; 62
   10a20:	12 96       	adiw	r26, 0x02	; 2
   10a22:	1c 93       	st	X, r17
   10a24:	0e 93       	st	-X, r16
   10a26:	11 97       	sbiw	r26, 0x01	; 1
   10a28:	82 ef       	ldi	r24, 0xF2	; 242
   10a2a:	90 e2       	ldi	r25, 0x20	; 32
   10a2c:	14 96       	adiw	r26, 0x04	; 4
   10a2e:	9c 93       	st	X, r25
   10a30:	8e 93       	st	-X, r24
   10a32:	13 97       	sbiw	r26, 0x03	; 3
   10a34:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
   10a38:	0f 90       	pop	r0
   10a3a:	0f 90       	pop	r0
   10a3c:	0f 90       	pop	r0
   10a3e:	0f 90       	pop	r0
   10a40:	5e c0       	rjmp	.+188    	; 0x10afe <FMenuLocalAccount+0xb54>
				}
                else{
		            if (BalanceType==1) lcd_printf(1,1,PSTR("Pump Product Volume"));
   10a42:	80 91 94 02 	lds	r24, 0x0294
   10a46:	81 30       	cpi	r24, 0x01	; 1
   10a48:	29 f4       	brne	.+10     	; 0x10a54 <FMenuLocalAccount+0xaaa>
   10a4a:	61 e0       	ldi	r22, 0x01	; 1
   10a4c:	4e ed       	ldi	r20, 0xDE	; 222
   10a4e:	50 e2       	ldi	r21, 0x20	; 32
   10a50:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
                    if (BalanceType==2) lcd_printf(1,1,PSTR("Pump Product Amount"));//"Pump Product  Amount" 
   10a54:	80 91 94 02 	lds	r24, 0x0294
   10a58:	82 30       	cpi	r24, 0x02	; 2
   10a5a:	31 f4       	brne	.+12     	; 0x10a68 <FMenuLocalAccount+0xabe>
   10a5c:	81 e0       	ldi	r24, 0x01	; 1
   10a5e:	61 e0       	ldi	r22, 0x01	; 1
   10a60:	4a ec       	ldi	r20, 0xCA	; 202
   10a62:	50 e2       	ldi	r21, 0x20	; 32
   10a64:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
					sprintf_P(lcdteks,PSTR("  %s %s "),strFIP,strProduct);    lcd_print(2,1,lcdteks);    //"P01  Pertamax       "
   10a68:	ed b7       	in	r30, 0x3d	; 61
   10a6a:	fe b7       	in	r31, 0x3e	; 62
   10a6c:	38 97       	sbiw	r30, 0x08	; 8
   10a6e:	0f b6       	in	r0, 0x3f	; 63
   10a70:	f8 94       	cli
   10a72:	fe bf       	out	0x3e, r31	; 62
   10a74:	0f be       	out	0x3f, r0	; 63
   10a76:	ed bf       	out	0x3d, r30	; 61
   10a78:	31 96       	adiw	r30, 0x01	; 1
   10a7a:	8e 01       	movw	r16, r28
   10a7c:	04 5f       	subi	r16, 0xF4	; 244
   10a7e:	1f 4f       	sbci	r17, 0xFF	; 255
   10a80:	ad b7       	in	r26, 0x3d	; 61
   10a82:	be b7       	in	r27, 0x3e	; 62
   10a84:	12 96       	adiw	r26, 0x02	; 2
   10a86:	1c 93       	st	X, r17
   10a88:	0e 93       	st	-X, r16
   10a8a:	11 97       	sbiw	r26, 0x01	; 1
   10a8c:	81 ec       	ldi	r24, 0xC1	; 193
   10a8e:	90 e2       	ldi	r25, 0x20	; 32
   10a90:	93 83       	std	Z+3, r25	; 0x03
   10a92:	82 83       	std	Z+2, r24	; 0x02
   10a94:	81 e9       	ldi	r24, 0x91	; 145
   10a96:	92 e0       	ldi	r25, 0x02	; 2
   10a98:	95 83       	std	Z+5, r25	; 0x05
   10a9a:	84 83       	std	Z+4, r24	; 0x04
   10a9c:	80 ee       	ldi	r24, 0xE0	; 224
   10a9e:	97 e0       	ldi	r25, 0x07	; 7
   10aa0:	97 83       	std	Z+7, r25	; 0x07
   10aa2:	86 83       	std	Z+6, r24	; 0x06
   10aa4:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
   10aa8:	ed b7       	in	r30, 0x3d	; 61
   10aaa:	fe b7       	in	r31, 0x3e	; 62
   10aac:	38 96       	adiw	r30, 0x08	; 8
   10aae:	0f b6       	in	r0, 0x3f	; 63
   10ab0:	f8 94       	cli
   10ab2:	fe bf       	out	0x3e, r31	; 62
   10ab4:	0f be       	out	0x3f, r0	; 63
   10ab6:	ed bf       	out	0x3d, r30	; 61
   10ab8:	82 e0       	ldi	r24, 0x02	; 2
   10aba:	61 e0       	ldi	r22, 0x01	; 1
   10abc:	a8 01       	movw	r20, r16
   10abe:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
		            sprintf_P(lcdteks,PSTR("%s "),strBalanceValue);            lcd_print(2,14,lcdteks);   //"P01  Pertamax 500000"
   10ac2:	00 d0       	rcall	.+0      	; 0x10ac4 <FMenuLocalAccount+0xb1a>
   10ac4:	00 d0       	rcall	.+0      	; 0x10ac6 <FMenuLocalAccount+0xb1c>
   10ac6:	00 d0       	rcall	.+0      	; 0x10ac8 <FMenuLocalAccount+0xb1e>
   10ac8:	ed b7       	in	r30, 0x3d	; 61
   10aca:	fe b7       	in	r31, 0x3e	; 62
   10acc:	31 96       	adiw	r30, 0x01	; 1
   10ace:	ad b7       	in	r26, 0x3d	; 61
   10ad0:	be b7       	in	r27, 0x3e	; 62
   10ad2:	12 96       	adiw	r26, 0x02	; 2
   10ad4:	1c 93       	st	X, r17
   10ad6:	0e 93       	st	-X, r16
   10ad8:	11 97       	sbiw	r26, 0x01	; 1
   10ada:	8d eb       	ldi	r24, 0xBD	; 189
   10adc:	90 e2       	ldi	r25, 0x20	; 32
   10ade:	93 83       	std	Z+3, r25	; 0x03
   10ae0:	82 83       	std	Z+2, r24	; 0x02
   10ae2:	81 ea       	ldi	r24, 0xA1	; 161
   10ae4:	9c e0       	ldi	r25, 0x0C	; 12
   10ae6:	95 83       	std	Z+5, r25	; 0x05
   10ae8:	84 83       	std	Z+4, r24	; 0x04
   10aea:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
   10aee:	ed b7       	in	r30, 0x3d	; 61
   10af0:	fe b7       	in	r31, 0x3e	; 62
   10af2:	36 96       	adiw	r30, 0x06	; 6
   10af4:	0f b6       	in	r0, 0x3f	; 63
   10af6:	f8 94       	cli
   10af8:	fe bf       	out	0x3e, r31	; 62
   10afa:	0f be       	out	0x3f, r0	; 63
   10afc:	ed bf       	out	0x3d, r30	; 61
   10afe:	82 e0       	ldi	r24, 0x02	; 2
   10b00:	6e e0       	ldi	r22, 0x0E	; 14
   10b02:	a8 01       	movw	r20, r16
   10b04:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>

				}
				lcd_printf(3,1,PSTR("Odometer:_       "));                                //"Odometer:_          "
   10b08:	83 e0       	ldi	r24, 0x03	; 3
   10b0a:	61 e0       	ldi	r22, 0x01	; 1
   10b0c:	4b ea       	ldi	r20, 0xAB	; 171
   10b0e:	50 e2       	ldi	r21, 0x20	; 32
   10b10:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
	            lcd_printf(4,1,PSTR("[*]Back  [#]OK   "));                                //"[*]Back  [#]OK      "						        
   10b14:	84 e0       	ldi	r24, 0x04	; 4
   10b16:	61 e0       	ldi	r22, 0x01	; 1
   10b18:	49 e9       	ldi	r20, 0x99	; 153
   10b1a:	50 e2       	ldi	r21, 0x20	; 32
   10b1c:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
				ClearMem(strOdometer);
   10b20:	85 e4       	ldi	r24, 0x45	; 69
   10b22:	94 e0       	ldi	r25, 0x04	; 4
   10b24:	0e 94 53 a5 	call	0x14aa6	; 0x14aa6 <ClearMem>
		        stLocalAccount=laOdometerInput;
   10b28:	82 e1       	ldi	r24, 0x12	; 18
   10b2a:	c7 ca       	rjmp	.-2674   	; 0x100ba <FMenuLocalAccount+0x110>
		        break;
           case laOdometerInput:
				uiResult=UserInput(UI_NUMBER_R,3,10,strOdometer,0,10);
   10b2c:	25 e4       	ldi	r18, 0x45	; 69
   10b2e:	c2 2e       	mov	r12, r18
   10b30:	24 e0       	ldi	r18, 0x04	; 4
   10b32:	d2 2e       	mov	r13, r18
   10b34:	81 e0       	ldi	r24, 0x01	; 1
   10b36:	63 e0       	ldi	r22, 0x03	; 3
   10b38:	4a e0       	ldi	r20, 0x0A	; 10
   10b3a:	96 01       	movw	r18, r12
   10b3c:	00 e0       	ldi	r16, 0x00	; 0
   10b3e:	10 e0       	ldi	r17, 0x00	; 0
   10b40:	9a e0       	ldi	r25, 0x0A	; 10
   10b42:	e9 2e       	mov	r14, r25
   10b44:	0e 94 a9 67 	call	0xcf52	; 0xcf52 <UserInput>
				if (uiResult==USER_OK){
   10b48:	83 30       	cpi	r24, 0x03	; 3
   10b4a:	79 f4       	brne	.+30     	; 0x10b6a <FMenuLocalAccount+0xbc0>
				    if ((strlen(strOdometer)==1)&&(strOdometer[0]=='0'))
   10b4c:	f6 01       	movw	r30, r12
   10b4e:	01 90       	ld	r0, Z+
   10b50:	00 20       	and	r0, r0
   10b52:	e9 f7       	brne	.-6      	; 0x10b4e <FMenuLocalAccount+0xba4>
   10b54:	e7 54       	subi	r30, 0x47	; 71
   10b56:	f4 40       	sbci	r31, 0x04	; 4
   10b58:	31 f4       	brne	.+12     	; 0x10b66 <FMenuLocalAccount+0xbbc>
   10b5a:	80 91 45 04 	lds	r24, 0x0445
   10b5e:	80 33       	cpi	r24, 0x30	; 48
   10b60:	11 f4       	brne	.+4      	; 0x10b66 <FMenuLocalAccount+0xbbc>
					    strOdometer[0]=0;
   10b62:	10 92 45 04 	sts	0x0445, r1
				    stLocalAccount=laDataConfirm;
   10b66:	83 e1       	ldi	r24, 0x13	; 19
   10b68:	a8 ca       	rjmp	.-2736   	; 0x100ba <FMenuLocalAccount+0x110>
					}
			    else
			    if (uiResult==USER_CANCEL){
   10b6a:	81 30       	cpi	r24, 0x01	; 1
   10b6c:	09 f0       	breq	.+2      	; 0x10b70 <FMenuLocalAccount+0xbc6>
   10b6e:	bc c2       	rjmp	.+1400   	; 0x110e8 <FMenuLocalAccount+0x113e>
				    if (IsFullAuthorized==True)
   10b70:	80 91 86 02 	lds	r24, 0x0286
   10b74:	81 30       	cpi	r24, 0x01	; 1
   10b76:	11 f4       	brne	.+4      	; 0x10b7c <FMenuLocalAccount+0xbd2>
					     stLocalAccount=laSelectBalanceType;
   10b78:	8d e0       	ldi	r24, 0x0D	; 13
   10b7a:	9f ca       	rjmp	.-2754   	; 0x100ba <FMenuLocalAccount+0x110>
					else stLocalAccount=laBalanceValue;		        
   10b7c:	8f e0       	ldi	r24, 0x0F	; 15
   10b7e:	9d ca       	rjmp	.-2758   	; 0x100ba <FMenuLocalAccount+0x110>
				 }
		        break;
           case laDataConfirm: 
		        lcd_clear();
   10b80:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
   10b84:	ef ea       	ldi	r30, 0xAF	; 175
   10b86:	f3 e0       	ldi	r31, 0x03	; 3
   10b88:	de 01       	movw	r26, r28
   10b8a:	90 96       	adiw	r26, 0x20	; 32
	 }Dest[Length]=0;
}
void StringCopyPos(char *Source,char *Dest,char SrcPos,char Length){
     char i;
	 for (i=0;i<Length;i++){
	     Dest[i]=Source[SrcPos+i];
   10b8c:	81 91       	ld	r24, Z+
   10b8e:	8d 93       	st	X+, r24
	     Dest[i]=Source[i];
	 }Dest[Length]=0;
}
void StringCopyPos(char *Source,char *Dest,char SrcPos,char Length){
     char i;
	 for (i=0;i<Length;i++){
   10b90:	33 e0       	ldi	r19, 0x03	; 3
   10b92:	e9 3b       	cpi	r30, 0xB9	; 185
   10b94:	f3 07       	cpc	r31, r19
   10b96:	d1 f7       	brne	.-12     	; 0x10b8c <FMenuLocalAccount+0xbe2>
	     Dest[i]=Source[SrcPos+i];
	 }Dest[Length]=0;
   10b98:	1a a6       	std	Y+42, r1	; 0x2a
				 }
		        break;
           case laDataConfirm: 
		        lcd_clear();
		        StringCopyPos(strCardHolder,strName,9,10);                                          //Data Confirmation   
                sprintf_P(lcdteks,PSTR("%s "),strName);                  lcd_print(1,1,lcdteks);    //"Iyan The Man        "
   10b9a:	00 d0       	rcall	.+0      	; 0x10b9c <FMenuLocalAccount+0xbf2>
   10b9c:	00 d0       	rcall	.+0      	; 0x10b9e <FMenuLocalAccount+0xbf4>
   10b9e:	00 d0       	rcall	.+0      	; 0x10ba0 <FMenuLocalAccount+0xbf6>
   10ba0:	ed b7       	in	r30, 0x3d	; 61
   10ba2:	fe b7       	in	r31, 0x3e	; 62
   10ba4:	31 96       	adiw	r30, 0x01	; 1
   10ba6:	8e 01       	movw	r16, r28
   10ba8:	04 5f       	subi	r16, 0xF4	; 244
   10baa:	1f 4f       	sbci	r17, 0xFF	; 255
   10bac:	ad b7       	in	r26, 0x3d	; 61
   10bae:	be b7       	in	r27, 0x3e	; 62
   10bb0:	12 96       	adiw	r26, 0x02	; 2
   10bb2:	1c 93       	st	X, r17
   10bb4:	0e 93       	st	-X, r16
   10bb6:	11 97       	sbiw	r26, 0x01	; 1
   10bb8:	85 e9       	ldi	r24, 0x95	; 149
   10bba:	90 e2       	ldi	r25, 0x20	; 32
   10bbc:	93 83       	std	Z+3, r25	; 0x03
   10bbe:	82 83       	std	Z+2, r24	; 0x02
   10bc0:	ce 01       	movw	r24, r28
   10bc2:	80 96       	adiw	r24, 0x20	; 32
   10bc4:	95 83       	std	Z+5, r25	; 0x05
   10bc6:	84 83       	std	Z+4, r24	; 0x04
   10bc8:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
   10bcc:	ed b7       	in	r30, 0x3d	; 61
   10bce:	fe b7       	in	r31, 0x3e	; 62
   10bd0:	36 96       	adiw	r30, 0x06	; 6
   10bd2:	0f b6       	in	r0, 0x3f	; 63
   10bd4:	f8 94       	cli
   10bd6:	fe bf       	out	0x3e, r31	; 62
   10bd8:	0f be       	out	0x3f, r0	; 63
   10bda:	ed bf       	out	0x3d, r30	; 61
   10bdc:	81 e0       	ldi	r24, 0x01	; 1
   10bde:	61 e0       	ldi	r22, 0x01	; 1
   10be0:	a8 01       	movw	r20, r16
   10be2:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
		        sprintf_P(lcdteks,PSTR("ID: %s"),strCardID);             lcd_print(2,1,lcdteks);    //"ID1CCDA565 OD:123456"
   10be6:	00 d0       	rcall	.+0      	; 0x10be8 <FMenuLocalAccount+0xc3e>
   10be8:	00 d0       	rcall	.+0      	; 0x10bea <FMenuLocalAccount+0xc40>
   10bea:	00 d0       	rcall	.+0      	; 0x10bec <FMenuLocalAccount+0xc42>
   10bec:	ed b7       	in	r30, 0x3d	; 61
   10bee:	fe b7       	in	r31, 0x3e	; 62
   10bf0:	31 96       	adiw	r30, 0x01	; 1
   10bf2:	ad b7       	in	r26, 0x3d	; 61
   10bf4:	be b7       	in	r27, 0x3e	; 62
   10bf6:	12 96       	adiw	r26, 0x02	; 2
   10bf8:	1c 93       	st	X, r17
   10bfa:	0e 93       	st	-X, r16
   10bfc:	11 97       	sbiw	r26, 0x01	; 1
   10bfe:	8e e8       	ldi	r24, 0x8E	; 142
   10c00:	90 e2       	ldi	r25, 0x20	; 32
   10c02:	93 83       	std	Z+3, r25	; 0x03
   10c04:	82 83       	std	Z+2, r24	; 0x02
   10c06:	8b e0       	ldi	r24, 0x0B	; 11
   10c08:	9c e0       	ldi	r25, 0x0C	; 12
   10c0a:	95 83       	std	Z+5, r25	; 0x05
   10c0c:	84 83       	std	Z+4, r24	; 0x04
   10c0e:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
   10c12:	ed b7       	in	r30, 0x3d	; 61
   10c14:	fe b7       	in	r31, 0x3e	; 62
   10c16:	36 96       	adiw	r30, 0x06	; 6
   10c18:	0f b6       	in	r0, 0x3f	; 63
   10c1a:	f8 94       	cli
   10c1c:	fe bf       	out	0x3e, r31	; 62
   10c1e:	0f be       	out	0x3f, r0	; 63
   10c20:	ed bf       	out	0x3d, r30	; 61
   10c22:	82 e0       	ldi	r24, 0x02	; 2
   10c24:	61 e0       	ldi	r22, 0x01	; 1
   10c26:	a8 01       	movw	r20, r16
   10c28:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
				sprintf_P(lcdteks,PSTR("%s  %s "),strFIP,strProduct);    lcd_print(3,1,lcdteks);    //"P01  Pertamax 500000"
   10c2c:	2d b7       	in	r18, 0x3d	; 61
   10c2e:	3e b7       	in	r19, 0x3e	; 62
   10c30:	28 50       	subi	r18, 0x08	; 8
   10c32:	30 40       	sbci	r19, 0x00	; 0
   10c34:	0f b6       	in	r0, 0x3f	; 63
   10c36:	f8 94       	cli
   10c38:	3e bf       	out	0x3e, r19	; 62
   10c3a:	0f be       	out	0x3f, r0	; 63
   10c3c:	2d bf       	out	0x3d, r18	; 61
   10c3e:	ed b7       	in	r30, 0x3d	; 61
   10c40:	fe b7       	in	r31, 0x3e	; 62
   10c42:	31 96       	adiw	r30, 0x01	; 1
   10c44:	ad b7       	in	r26, 0x3d	; 61
   10c46:	be b7       	in	r27, 0x3e	; 62
   10c48:	12 96       	adiw	r26, 0x02	; 2
   10c4a:	1c 93       	st	X, r17
   10c4c:	0e 93       	st	-X, r16
   10c4e:	11 97       	sbiw	r26, 0x01	; 1
   10c50:	86 e8       	ldi	r24, 0x86	; 134
   10c52:	90 e2       	ldi	r25, 0x20	; 32
   10c54:	93 83       	std	Z+3, r25	; 0x03
   10c56:	82 83       	std	Z+2, r24	; 0x02
   10c58:	81 e9       	ldi	r24, 0x91	; 145
   10c5a:	92 e0       	ldi	r25, 0x02	; 2
   10c5c:	95 83       	std	Z+5, r25	; 0x05
   10c5e:	84 83       	std	Z+4, r24	; 0x04
   10c60:	80 ee       	ldi	r24, 0xE0	; 224
   10c62:	97 e0       	ldi	r25, 0x07	; 7
   10c64:	97 83       	std	Z+7, r25	; 0x07
   10c66:	86 83       	std	Z+6, r24	; 0x06
   10c68:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
   10c6c:	ed b7       	in	r30, 0x3d	; 61
   10c6e:	fe b7       	in	r31, 0x3e	; 62
   10c70:	38 96       	adiw	r30, 0x08	; 8
   10c72:	0f b6       	in	r0, 0x3f	; 63
   10c74:	f8 94       	cli
   10c76:	fe bf       	out	0x3e, r31	; 62
   10c78:	0f be       	out	0x3f, r0	; 63
   10c7a:	ed bf       	out	0x3d, r30	; 61
   10c7c:	83 e0       	ldi	r24, 0x03	; 3
   10c7e:	61 e0       	ldi	r22, 0x01	; 1
   10c80:	a8 01       	movw	r20, r16
   10c82:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
		        if (IsFullAuthorized==True){
   10c86:	80 91 86 02 	lds	r24, 0x0286
   10c8a:	81 30       	cpi	r24, 0x01	; 1
   10c8c:	39 f4       	brne	.+14     	; 0x10c9c <FMenuLocalAccount+0xcf2>
                    lcd_printf(3,15,PSTR(" Full"));
   10c8e:	83 e0       	ldi	r24, 0x03	; 3
   10c90:	6f e0       	ldi	r22, 0x0F	; 15
   10c92:	40 e8       	ldi	r20, 0x80	; 128
   10c94:	50 e2       	ldi	r21, 0x20	; 32
   10c96:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
   10c9a:	23 c0       	rjmp	.+70     	; 0x10ce2 <FMenuLocalAccount+0xd38>
				}
				else {
				    sprintf_P(lcdteks,PSTR("%s "),strBalanceValue);          lcd_print(3,15,lcdteks);   //"[*]Back [0]ESC [#]OK " 
   10c9c:	00 d0       	rcall	.+0      	; 0x10c9e <FMenuLocalAccount+0xcf4>
   10c9e:	00 d0       	rcall	.+0      	; 0x10ca0 <FMenuLocalAccount+0xcf6>
   10ca0:	00 d0       	rcall	.+0      	; 0x10ca2 <FMenuLocalAccount+0xcf8>
   10ca2:	ed b7       	in	r30, 0x3d	; 61
   10ca4:	fe b7       	in	r31, 0x3e	; 62
   10ca6:	31 96       	adiw	r30, 0x01	; 1
   10ca8:	ad b7       	in	r26, 0x3d	; 61
   10caa:	be b7       	in	r27, 0x3e	; 62
   10cac:	12 96       	adiw	r26, 0x02	; 2
   10cae:	1c 93       	st	X, r17
   10cb0:	0e 93       	st	-X, r16
   10cb2:	11 97       	sbiw	r26, 0x01	; 1
   10cb4:	8c e7       	ldi	r24, 0x7C	; 124
   10cb6:	90 e2       	ldi	r25, 0x20	; 32
   10cb8:	93 83       	std	Z+3, r25	; 0x03
   10cba:	82 83       	std	Z+2, r24	; 0x02
   10cbc:	81 ea       	ldi	r24, 0xA1	; 161
   10cbe:	9c e0       	ldi	r25, 0x0C	; 12
   10cc0:	95 83       	std	Z+5, r25	; 0x05
   10cc2:	84 83       	std	Z+4, r24	; 0x04
   10cc4:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
   10cc8:	ed b7       	in	r30, 0x3d	; 61
   10cca:	fe b7       	in	r31, 0x3e	; 62
   10ccc:	36 96       	adiw	r30, 0x06	; 6
   10cce:	0f b6       	in	r0, 0x3f	; 63
   10cd0:	f8 94       	cli
   10cd2:	fe bf       	out	0x3e, r31	; 62
   10cd4:	0f be       	out	0x3f, r0	; 63
   10cd6:	ed bf       	out	0x3d, r30	; 61
   10cd8:	83 e0       	ldi	r24, 0x03	; 3
   10cda:	6f e0       	ldi	r22, 0x0F	; 15
   10cdc:	a8 01       	movw	r20, r16
   10cde:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
					}
	            lcd_printf(4,1,PSTR("[*]Back [0]ESC [#]OK"));    
   10ce2:	84 e0       	ldi	r24, 0x04	; 4
   10ce4:	61 e0       	ldi	r22, 0x01	; 1
   10ce6:	47 e6       	ldi	r20, 0x67	; 103
   10ce8:	50 e2       	ldi	r21, 0x20	; 32
   10cea:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
                stLocalAccount=laDataConfirmInput;
   10cee:	84 e1       	ldi	r24, 0x14	; 20
   10cf0:	e4 c9       	rjmp	.-3128   	; 0x100ba <FMenuLocalAccount+0x110>
                //while(1){};   
		        break;
           case laDataConfirmInput:
                KeyPressed=_key_scan(1);
   10cf2:	81 e0       	ldi	r24, 0x01	; 1
   10cf4:	0e 94 58 a6 	call	0x14cb0	; 0x14cb0 <_key_scan>
                if (KeyPressed==_KEY_CANCEL)stLocalAccount=laOdometer;		        
   10cf8:	87 3e       	cpi	r24, 0xE7	; 231
   10cfa:	11 f4       	brne	.+4      	; 0x10d00 <FMenuLocalAccount+0xd56>
   10cfc:	81 e1       	ldi	r24, 0x11	; 17
   10cfe:	dd c9       	rjmp	.-3142   	; 0x100ba <FMenuLocalAccount+0x110>
				else
				if (KeyPressed==_KEY_ENTER)stLocalAccount=laProceedTransaction;
   10d00:	87 3b       	cpi	r24, 0xB7	; 183
   10d02:	11 f4       	brne	.+4      	; 0x10d08 <FMenuLocalAccount+0xd5e>
   10d04:	85 e1       	ldi	r24, 0x15	; 21
   10d06:	d9 c9       	rjmp	.-3150   	; 0x100ba <FMenuLocalAccount+0x110>
				else
				if (KeyPressed==_KEY_0){
   10d08:	87 3d       	cpi	r24, 0xD7	; 215
   10d0a:	09 f0       	breq	.+2      	; 0x10d0e <FMenuLocalAccount+0xd64>
   10d0c:	ed c1       	rjmp	.+986    	; 0x110e8 <FMenuLocalAccount+0x113e>
				   //ShowCancel
				   TimLocAcc=0;
   10d0e:	10 92 ba 01 	sts	0x01BA, r1
                   lcd_clear();
   10d12:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
				   lcd_printf(1,1,PSTR("Cancel Transaction  "));    //"Cancel Transaction"
   10d16:	81 e0       	ldi	r24, 0x01	; 1
   10d18:	61 e0       	ldi	r22, 0x01	; 1
   10d1a:	42 e5       	ldi	r20, 0x52	; 82
   10d1c:	50 e2       	ldi	r21, 0x20	; 32
   10d1e:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
   10d22:	c9 c1       	rjmp	.+914    	; 0x110b6 <FMenuLocalAccount+0x110c>
				   stLocalAccount=laDelayExit;
				   }
		        break;
           case laProceedTransaction:
		        sendMessage58();
   10d24:	0e 94 cd 7f 	call	0xff9a	; 0xff9a <sendMessage58>
                RemZeroLead(strCardID);
   10d28:	8b e0       	ldi	r24, 0x0B	; 11
   10d2a:	9c e0       	ldi	r25, 0x0C	; 12
   10d2c:	0e 94 3f 25 	call	0x4a7e	; 0x4a7e <RemZeroLead>
                RemZeroLead(strBalanceValue);
   10d30:	b1 ea       	ldi	r27, 0xA1	; 161
   10d32:	eb 2e       	mov	r14, r27
   10d34:	bc e0       	ldi	r27, 0x0C	; 12
   10d36:	fb 2e       	mov	r15, r27
   10d38:	c7 01       	movw	r24, r14
   10d3a:	0e 94 3f 25 	call	0x4a7e	; 0x4a7e <RemZeroLead>
				sprintf_P(lcdteks,PSTR("P%s %s "),strFIP,strProduct);       lcd_print(1,1,lcdteks);    //"P01  Pertamax 500000"
   10d3e:	2d b7       	in	r18, 0x3d	; 61
   10d40:	3e b7       	in	r19, 0x3e	; 62
   10d42:	28 50       	subi	r18, 0x08	; 8
   10d44:	30 40       	sbci	r19, 0x00	; 0
   10d46:	0f b6       	in	r0, 0x3f	; 63
   10d48:	f8 94       	cli
   10d4a:	3e bf       	out	0x3e, r19	; 62
   10d4c:	0f be       	out	0x3f, r0	; 63
   10d4e:	2d bf       	out	0x3d, r18	; 61
   10d50:	ed b7       	in	r30, 0x3d	; 61
   10d52:	fe b7       	in	r31, 0x3e	; 62
   10d54:	31 96       	adiw	r30, 0x01	; 1
   10d56:	8e 01       	movw	r16, r28
   10d58:	04 5f       	subi	r16, 0xF4	; 244
   10d5a:	1f 4f       	sbci	r17, 0xFF	; 255
   10d5c:	ad b7       	in	r26, 0x3d	; 61
   10d5e:	be b7       	in	r27, 0x3e	; 62
   10d60:	12 96       	adiw	r26, 0x02	; 2
   10d62:	1c 93       	st	X, r17
   10d64:	0e 93       	st	-X, r16
   10d66:	11 97       	sbiw	r26, 0x01	; 1
   10d68:	8a e4       	ldi	r24, 0x4A	; 74
   10d6a:	90 e2       	ldi	r25, 0x20	; 32
   10d6c:	93 83       	std	Z+3, r25	; 0x03
   10d6e:	82 83       	std	Z+2, r24	; 0x02
   10d70:	81 e9       	ldi	r24, 0x91	; 145
   10d72:	92 e0       	ldi	r25, 0x02	; 2
   10d74:	95 83       	std	Z+5, r25	; 0x05
   10d76:	84 83       	std	Z+4, r24	; 0x04
   10d78:	80 ee       	ldi	r24, 0xE0	; 224
   10d7a:	97 e0       	ldi	r25, 0x07	; 7
   10d7c:	97 83       	std	Z+7, r25	; 0x07
   10d7e:	86 83       	std	Z+6, r24	; 0x06
   10d80:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
   10d84:	ed b7       	in	r30, 0x3d	; 61
   10d86:	fe b7       	in	r31, 0x3e	; 62
   10d88:	38 96       	adiw	r30, 0x08	; 8
   10d8a:	0f b6       	in	r0, 0x3f	; 63
   10d8c:	f8 94       	cli
   10d8e:	fe bf       	out	0x3e, r31	; 62
   10d90:	0f be       	out	0x3f, r0	; 63
   10d92:	ed bf       	out	0x3d, r30	; 61
   10d94:	81 e0       	ldi	r24, 0x01	; 1
   10d96:	61 e0       	ldi	r22, 0x01	; 1
   10d98:	a8 01       	movw	r20, r16
   10d9a:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
		        sprintf_P(lcdteks,PSTR("%s"),strBalanceValue);              lcd_print(1,15,lcdteks);   //"ID1CCDA565          " 
   10d9e:	00 d0       	rcall	.+0      	; 0x10da0 <FMenuLocalAccount+0xdf6>
   10da0:	00 d0       	rcall	.+0      	; 0x10da2 <FMenuLocalAccount+0xdf8>
   10da2:	00 d0       	rcall	.+0      	; 0x10da4 <FMenuLocalAccount+0xdfa>
   10da4:	ed b7       	in	r30, 0x3d	; 61
   10da6:	fe b7       	in	r31, 0x3e	; 62
   10da8:	31 96       	adiw	r30, 0x01	; 1
   10daa:	ad b7       	in	r26, 0x3d	; 61
   10dac:	be b7       	in	r27, 0x3e	; 62
   10dae:	12 96       	adiw	r26, 0x02	; 2
   10db0:	1c 93       	st	X, r17
   10db2:	0e 93       	st	-X, r16
   10db4:	11 97       	sbiw	r26, 0x01	; 1
   10db6:	87 e4       	ldi	r24, 0x47	; 71
   10db8:	90 e2       	ldi	r25, 0x20	; 32
   10dba:	93 83       	std	Z+3, r25	; 0x03
   10dbc:	82 83       	std	Z+2, r24	; 0x02
   10dbe:	f5 82       	std	Z+5, r15	; 0x05
   10dc0:	e4 82       	std	Z+4, r14	; 0x04
   10dc2:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
   10dc6:	ed b7       	in	r30, 0x3d	; 61
   10dc8:	fe b7       	in	r31, 0x3e	; 62
   10dca:	36 96       	adiw	r30, 0x06	; 6
   10dcc:	0f b6       	in	r0, 0x3f	; 63
   10dce:	f8 94       	cli
   10dd0:	fe bf       	out	0x3e, r31	; 62
   10dd2:	0f be       	out	0x3f, r0	; 63
   10dd4:	ed bf       	out	0x3d, r30	; 61
   10dd6:	81 e0       	ldi	r24, 0x01	; 1
   10dd8:	6f e0       	ldi	r22, 0x0F	; 15
   10dda:	a8 01       	movw	r20, r16
   10ddc:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
                lcd_printf(3,1,PSTR("Mohon Tunggu        "));                                         //"Mohon Tunggu ...    "
   10de0:	83 e0       	ldi	r24, 0x03	; 3
   10de2:	61 e0       	ldi	r22, 0x01	; 1
   10de4:	42 e3       	ldi	r20, 0x32	; 50
   10de6:	50 e2       	ldi	r21, 0x20	; 32
   10de8:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		        lcd_printf(4,1,PSTR("                    "));                                  //"                    "
   10dec:	84 e0       	ldi	r24, 0x04	; 4
   10dee:	61 e0       	ldi	r22, 0x01	; 1
   10df0:	4d e1       	ldi	r20, 0x1D	; 29
   10df2:	50 e2       	ldi	r21, 0x20	; 32
   10df4:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
				IsMessage00=False;
   10df8:	10 92 9e 01 	sts	0x019E, r1
				TimLocAcc=0;
   10dfc:	10 92 ba 01 	sts	0x01BA, r1
				iLoop=0;iPos=0;iWait=0;
   10e00:	10 92 85 02 	sts	0x0285, r1
   10e04:	10 92 84 02 	sts	0x0284, r1
   10e08:	10 92 96 02 	sts	0x0296, r1
   10e0c:	10 92 95 02 	sts	0x0295, r1
				stLocalAccount=laWaitMessage00;
   10e10:	87 e1       	ldi	r24, 0x17	; 23
   10e12:	53 c9       	rjmp	.-3418   	; 0x100ba <FMenuLocalAccount+0x110>
		        break;
           case laWaitMessage00:
                iLoop++;
   10e14:	80 91 84 02 	lds	r24, 0x0284
   10e18:	90 91 85 02 	lds	r25, 0x0285
   10e1c:	01 96       	adiw	r24, 0x01	; 1
   10e1e:	90 93 85 02 	sts	0x0285, r25
   10e22:	80 93 84 02 	sts	0x0284, r24
				if ((iLoop%MSG_WAIT_TIMOUT)==0){
   10e26:	68 e9       	ldi	r22, 0x98	; 152
   10e28:	7a e3       	ldi	r23, 0x3A	; 58
   10e2a:	0e 94 65 aa 	call	0x154ca	; 0x154ca <__udivmodhi4>
   10e2e:	89 2b       	or	r24, r25
   10e30:	e1 f4       	brne	.+56     	; 0x10e6a <FMenuLocalAccount+0xec0>
				   if (iPos<5){
   10e32:	60 91 96 02 	lds	r22, 0x0296
   10e36:	65 30       	cpi	r22, 0x05	; 5
   10e38:	58 f4       	brcc	.+22     	; 0x10e50 <FMenuLocalAccount+0xea6>
				       iPos++;
   10e3a:	6f 5f       	subi	r22, 0xFF	; 255
   10e3c:	60 93 96 02 	sts	0x0296, r22
					   lcd_xy(3,(14+iPos));_lcd('.');
   10e40:	62 5f       	subi	r22, 0xF2	; 242
   10e42:	83 e0       	ldi	r24, 0x03	; 3
   10e44:	0e 94 9e a4 	call	0x1493c	; 0x1493c <lcd_xy>
   10e48:	8e e2       	ldi	r24, 0x2E	; 46
   10e4a:	0e 94 78 a4 	call	0x148f0	; 0x148f0 <_lcd>
   10e4e:	0d c0       	rjmp	.+26     	; 0x10e6a <FMenuLocalAccount+0xec0>
					   }
				   else{
				       iPos=0;
   10e50:	10 92 96 02 	sts	0x0296, r1
					   lcd_printf(3,(14+iPos),PSTR("       "));
   10e54:	83 e0       	ldi	r24, 0x03	; 3
   10e56:	6e e0       	ldi	r22, 0x0E	; 14
   10e58:	45 e1       	ldi	r20, 0x15	; 21
   10e5a:	50 e2       	ldi	r21, 0x20	; 32
   10e5c:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
					   iWait++;
   10e60:	80 91 95 02 	lds	r24, 0x0295
   10e64:	8f 5f       	subi	r24, 0xFF	; 255
   10e66:	80 93 95 02 	sts	0x0295, r24
					   }
				}
				if (iWait>5){
   10e6a:	80 91 95 02 	lds	r24, 0x0295
   10e6e:	86 30       	cpi	r24, 0x06	; 6
   10e70:	50 f0       	brcs	.+20     	; 0x10e86 <FMenuLocalAccount+0xedc>
				    stLocalAccount=laConTimout;
   10e72:	84 e0       	ldi	r24, 0x04	; 4
   10e74:	80 93 5b 01 	sts	0x015B, r24
					TimLocAcc=0;
   10e78:	10 92 ba 01 	sts	0x01BA, r1
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   10e7c:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   10e7e:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   10e80:	82 e0       	ldi	r24, 0x02	; 2
   10e82:	80 93 bc 01 	sts	0x01BC, r24
				if (iWait>5){
				    stLocalAccount=laConTimout;
					TimLocAcc=0;
					system_beep(2);
				    }
				if (IsMessage00==True){
   10e86:	80 91 9e 01 	lds	r24, 0x019E
   10e8a:	81 30       	cpi	r24, 0x01	; 1
   10e8c:	09 f0       	breq	.+2      	; 0x10e90 <FMenuLocalAccount+0xee6>
   10e8e:	2c c1       	rjmp	.+600    	; 0x110e8 <FMenuLocalAccount+0x113e>
                    IsMessage00=False;
   10e90:	10 92 9e 01 	sts	0x019E, r1
				    stLocalAccount=laProcMessage00;
   10e94:	88 e1       	ldi	r24, 0x18	; 24
   10e96:	11 c9       	rjmp	.-3550   	; 0x100ba <FMenuLocalAccount+0x110>
*/
char procMessage00(){
     char Result,strSend[10];
	 Result=MSG00_NACK;
	 //Message57
	 if((rcv_trans[0]==0x01)&&(transLength==MSG00_LENGTH)){
   10e98:	80 91 9f 09 	lds	r24, 0x099F
   10e9c:	81 30       	cpi	r24, 0x01	; 1
   10e9e:	51 f4       	brne	.+20     	; 0x10eb4 <FMenuLocalAccount+0xf0a>
   10ea0:	80 91 8b 01 	lds	r24, 0x018B
   10ea4:	90 91 8c 01 	lds	r25, 0x018C
   10ea8:	8f 97       	sbiw	r24, 0x2f	; 47
   10eaa:	21 f4       	brne	.+8      	; 0x10eb4 <FMenuLocalAccount+0xf0a>
	     //Reply
		 Result=(CharPosCopy(rcv_trans,37)-'0');
   10eac:	80 91 c4 09 	lds	r24, 0x09C4
   10eb0:	80 53       	subi	r24, 0x30	; 48
   10eb2:	01 c0       	rjmp	.+2      	; 0x10eb6 <FMenuLocalAccount+0xf0c>
   10eb4:	80 e0       	ldi	r24, 0x00	; 0
                    IsMessage00=False;
				    stLocalAccount=laProcMessage00;
					}
		        break;
           case laProcMessage00:
		        LocAccStatus=procMessage00();
   10eb6:	80 93 97 02 	sts	0x0297, r24
                lcd_clear();
   10eba:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
		        switch(LocAccStatus){
   10ebe:	10 91 97 02 	lds	r17, 0x0297
   10ec2:	11 30       	cpi	r17, 0x01	; 1
   10ec4:	59 f0       	breq	.+22     	; 0x10edc <FMenuLocalAccount+0xf32>
   10ec6:	11 30       	cpi	r17, 0x01	; 1
   10ec8:	20 f0       	brcs	.+8      	; 0x10ed2 <FMenuLocalAccount+0xf28>
   10eca:	13 30       	cpi	r17, 0x03	; 3
   10ecc:	09 f0       	breq	.+2      	; 0x10ed0 <FMenuLocalAccount+0xf26>
   10ece:	c0 c0       	rjmp	.+384    	; 0x11050 <FMenuLocalAccount+0x10a6>
   10ed0:	1b c0       	rjmp	.+54     	; 0x10f08 <FMenuLocalAccount+0xf5e>
				case MSG00_NACK:
                     lcd_printf(2,1,PSTR("Authorisasi Gagal   "));
   10ed2:	82 e0       	ldi	r24, 0x02	; 2
   10ed4:	61 e0       	ldi	r22, 0x01	; 1
   10ed6:	40 e0       	ldi	r20, 0x00	; 0
   10ed8:	50 e2       	ldi	r21, 0x20	; 32
   10eda:	1a c0       	rjmp	.+52     	; 0x10f10 <FMenuLocalAccount+0xf66>
					 system_beep(2); 
					 stLocalAccount=laDelayExit;
				     break;
                case MSG00_ACK:
				     lcd_printf(2,1,PSTR("Authorisasi Berhasil"));
   10edc:	82 e0       	ldi	r24, 0x02	; 2
   10ede:	61 e0       	ldi	r22, 0x01	; 1
   10ee0:	4b ee       	ldi	r20, 0xEB	; 235
   10ee2:	5f e1       	ldi	r21, 0x1F	; 31
   10ee4:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
				     LocalAccountFIP[nLocalAccount]=FIP_Used;
   10ee8:	90 91 8f 01 	lds	r25, 0x018F
   10eec:	e9 2f       	mov	r30, r25
   10eee:	f0 e0       	ldi	r31, 0x00	; 0
   10ef0:	e8 52       	subi	r30, 0x28	; 40
   10ef2:	fc 4f       	sbci	r31, 0xFC	; 252
   10ef4:	80 91 88 02 	lds	r24, 0x0288
   10ef8:	80 83       	st	Z, r24
					 nLocalAccount++;
   10efa:	9f 5f       	subi	r25, 0xFF	; 255
   10efc:	90 93 8f 01 	sts	0x018F, r25
					 IsViewFillingFIP=True;
   10f00:	10 93 96 01 	sts	0x0196, r17
					 stLocalAccount=laViewStatus;
   10f04:	86 e1       	ldi	r24, 0x16	; 22
   10f06:	a2 c0       	rjmp	.+324    	; 0x1104c <FMenuLocalAccount+0x10a2>
				     break;
                case MSG00_NO_FIP:
                     lcd_printf(2,1,PSTR("FIP Tidak Siap    "));
   10f08:	82 e0       	ldi	r24, 0x02	; 2
   10f0a:	61 e0       	ldi	r22, 0x01	; 1
   10f0c:	48 ed       	ldi	r20, 0xD8	; 216
   10f0e:	5f e1       	ldi	r21, 0x1F	; 31
   10f10:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   10f14:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   10f16:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   10f18:	82 e0       	ldi	r24, 0x02	; 2
   10f1a:	80 93 bc 01 	sts	0x01BC, r24
					 stLocalAccount=laViewStatus;
				     break;
                case MSG00_NO_FIP:
                     lcd_printf(2,1,PSTR("FIP Tidak Siap    "));
					 system_beep(2);
					 stLocalAccount=laDelayExit;
   10f1e:	8e e1       	ldi	r24, 0x1E	; 30
   10f20:	95 c0       	rjmp	.+298    	; 0x1104c <FMenuLocalAccount+0x10a2>
				     break;
				}
				TimLocAcc=0;				
		        break;
           case laViewStatus:
                if (TimLocAcc>20)stLocalAccount=laExitLocAcc;//laDisplayTransaction;
   10f22:	80 91 ba 01 	lds	r24, 0x01BA
   10f26:	85 31       	cpi	r24, 0x15	; 21
   10f28:	08 f4       	brcc	.+2      	; 0x10f2c <FMenuLocalAccount+0xf82>
   10f2a:	de c0       	rjmp	.+444    	; 0x110e8 <FMenuLocalAccount+0x113e>
   10f2c:	cb c0       	rjmp	.+406    	; 0x110c4 <FMenuLocalAccount+0x111a>
		        break; 
           case laDisplayTransaction:
		        lcd_clear();
   10f2e:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
                sprintf_P(lcdteks,PSTR("P%s %s "),strFIP,strProduct); lcd_print(1,1,lcdteks);    //"P01  Pertamax 500000"
   10f32:	2d b7       	in	r18, 0x3d	; 61
   10f34:	3e b7       	in	r19, 0x3e	; 62
   10f36:	28 50       	subi	r18, 0x08	; 8
   10f38:	30 40       	sbci	r19, 0x00	; 0
   10f3a:	0f b6       	in	r0, 0x3f	; 63
   10f3c:	f8 94       	cli
   10f3e:	3e bf       	out	0x3e, r19	; 62
   10f40:	0f be       	out	0x3f, r0	; 63
   10f42:	2d bf       	out	0x3d, r18	; 61
   10f44:	ed b7       	in	r30, 0x3d	; 61
   10f46:	fe b7       	in	r31, 0x3e	; 62
   10f48:	31 96       	adiw	r30, 0x01	; 1
   10f4a:	ac e0       	ldi	r26, 0x0C	; 12
   10f4c:	ea 2e       	mov	r14, r26
   10f4e:	f1 2c       	mov	r15, r1
   10f50:	ec 0e       	add	r14, r28
   10f52:	fd 1e       	adc	r15, r29
   10f54:	ad b7       	in	r26, 0x3d	; 61
   10f56:	be b7       	in	r27, 0x3e	; 62
   10f58:	12 96       	adiw	r26, 0x02	; 2
   10f5a:	fc 92       	st	X, r15
   10f5c:	ee 92       	st	-X, r14
   10f5e:	11 97       	sbiw	r26, 0x01	; 1
   10f60:	80 ed       	ldi	r24, 0xD0	; 208
   10f62:	9f e1       	ldi	r25, 0x1F	; 31
   10f64:	93 83       	std	Z+3, r25	; 0x03
   10f66:	82 83       	std	Z+2, r24	; 0x02
   10f68:	81 e9       	ldi	r24, 0x91	; 145
   10f6a:	92 e0       	ldi	r25, 0x02	; 2
   10f6c:	95 83       	std	Z+5, r25	; 0x05
   10f6e:	84 83       	std	Z+4, r24	; 0x04
   10f70:	80 ee       	ldi	r24, 0xE0	; 224
   10f72:	97 e0       	ldi	r25, 0x07	; 7
   10f74:	97 83       	std	Z+7, r25	; 0x07
   10f76:	86 83       	std	Z+6, r24	; 0x06
   10f78:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
   10f7c:	ed b7       	in	r30, 0x3d	; 61
   10f7e:	fe b7       	in	r31, 0x3e	; 62
   10f80:	38 96       	adiw	r30, 0x08	; 8
   10f82:	0f b6       	in	r0, 0x3f	; 63
   10f84:	f8 94       	cli
   10f86:	fe bf       	out	0x3e, r31	; 62
   10f88:	0f be       	out	0x3f, r0	; 63
   10f8a:	ed bf       	out	0x3d, r30	; 61
   10f8c:	81 e0       	ldi	r24, 0x01	; 1
   10f8e:	61 e0       	ldi	r22, 0x01	; 1
   10f90:	a7 01       	movw	r20, r14
   10f92:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
		        sprintf_P(lcdteks,PSTR("%s"),strBalanceValue);        lcd_print(1,15,lcdteks);   //"ID1CCDA565          " 
   10f96:	00 d0       	rcall	.+0      	; 0x10f98 <FMenuLocalAccount+0xfee>
   10f98:	00 d0       	rcall	.+0      	; 0x10f9a <FMenuLocalAccount+0xff0>
   10f9a:	00 d0       	rcall	.+0      	; 0x10f9c <FMenuLocalAccount+0xff2>
   10f9c:	ed b7       	in	r30, 0x3d	; 61
   10f9e:	fe b7       	in	r31, 0x3e	; 62
   10fa0:	31 96       	adiw	r30, 0x01	; 1
   10fa2:	ad b7       	in	r26, 0x3d	; 61
   10fa4:	be b7       	in	r27, 0x3e	; 62
   10fa6:	12 96       	adiw	r26, 0x02	; 2
   10fa8:	fc 92       	st	X, r15
   10faa:	ee 92       	st	-X, r14
   10fac:	11 97       	sbiw	r26, 0x01	; 1
   10fae:	8d ec       	ldi	r24, 0xCD	; 205
   10fb0:	9f e1       	ldi	r25, 0x1F	; 31
   10fb2:	93 83       	std	Z+3, r25	; 0x03
   10fb4:	82 83       	std	Z+2, r24	; 0x02
   10fb6:	81 ea       	ldi	r24, 0xA1	; 161
   10fb8:	9c e0       	ldi	r25, 0x0C	; 12
   10fba:	95 83       	std	Z+5, r25	; 0x05
   10fbc:	84 83       	std	Z+4, r24	; 0x04
   10fbe:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
   10fc2:	ed b7       	in	r30, 0x3d	; 61
   10fc4:	fe b7       	in	r31, 0x3e	; 62
   10fc6:	36 96       	adiw	r30, 0x06	; 6
   10fc8:	0f b6       	in	r0, 0x3f	; 63
   10fca:	f8 94       	cli
   10fcc:	fe bf       	out	0x3e, r31	; 62
   10fce:	0f be       	out	0x3f, r0	; 63
   10fd0:	ed bf       	out	0x3d, r30	; 61
   10fd2:	81 e0       	ldi	r24, 0x01	; 1
   10fd4:	6f e0       	ldi	r22, 0x0F	; 15
   10fd6:	a7 01       	movw	r20, r14
   10fd8:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
                RemSpaceLead(strCardID);
   10fdc:	0b e0       	ldi	r16, 0x0B	; 11
   10fde:	1c e0       	ldi	r17, 0x0C	; 12
   10fe0:	c8 01       	movw	r24, r16
   10fe2:	0e 94 87 25 	call	0x4b0e	; 0x4b0e <RemSpaceLead>
				sprintf_P(lcdteks,PSTR("ID: %s"),strCardID);          lcd_print(2,1,lcdteks);
   10fe6:	00 d0       	rcall	.+0      	; 0x10fe8 <FMenuLocalAccount+0x103e>
   10fe8:	00 d0       	rcall	.+0      	; 0x10fea <FMenuLocalAccount+0x1040>
   10fea:	00 d0       	rcall	.+0      	; 0x10fec <FMenuLocalAccount+0x1042>
   10fec:	ed b7       	in	r30, 0x3d	; 61
   10fee:	fe b7       	in	r31, 0x3e	; 62
   10ff0:	31 96       	adiw	r30, 0x01	; 1
   10ff2:	ad b7       	in	r26, 0x3d	; 61
   10ff4:	be b7       	in	r27, 0x3e	; 62
   10ff6:	12 96       	adiw	r26, 0x02	; 2
   10ff8:	fc 92       	st	X, r15
   10ffa:	ee 92       	st	-X, r14
   10ffc:	11 97       	sbiw	r26, 0x01	; 1
   10ffe:	86 ec       	ldi	r24, 0xC6	; 198
   11000:	9f e1       	ldi	r25, 0x1F	; 31
   11002:	93 83       	std	Z+3, r25	; 0x03
   11004:	82 83       	std	Z+2, r24	; 0x02
   11006:	15 83       	std	Z+5, r17	; 0x05
   11008:	04 83       	std	Z+4, r16	; 0x04
   1100a:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
   1100e:	ed b7       	in	r30, 0x3d	; 61
   11010:	fe b7       	in	r31, 0x3e	; 62
   11012:	36 96       	adiw	r30, 0x06	; 6
   11014:	0f b6       	in	r0, 0x3f	; 63
   11016:	f8 94       	cli
   11018:	fe bf       	out	0x3e, r31	; 62
   1101a:	0f be       	out	0x3f, r0	; 63
   1101c:	ed bf       	out	0x3d, r30	; 61
   1101e:	82 e0       	ldi	r24, 0x02	; 2
   11020:	61 e0       	ldi	r22, 0x01	; 1
   11022:	a7 01       	movw	r20, r14
   11024:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
				TimLocAcc=0;
   11028:	10 92 ba 01 	sts	0x01BA, r1
		        IsCompleteFilling=False;
   1102c:	10 92 a9 01 	sts	0x01A9, r1
				stLocalAccount=laWaitFilling;
   11030:	8d e1       	ldi	r24, 0x1D	; 29
   11032:	43 c8       	rjmp	.-3962   	; 0x100ba <FMenuLocalAccount+0x110>
		        break; 
           case laWaitFilling:
				if ((IsCompleteFilling==True)||(TimLocAcc>FILLING_TIMOUT)){
   11034:	80 91 a9 01 	lds	r24, 0x01A9
   11038:	81 30       	cpi	r24, 0x01	; 1
   1103a:	29 f0       	breq	.+10     	; 0x11046 <FMenuLocalAccount+0x109c>
   1103c:	80 91 ba 01 	lds	r24, 0x01BA
   11040:	8b 30       	cpi	r24, 0x0B	; 11
   11042:	08 f4       	brcc	.+2      	; 0x11046 <FMenuLocalAccount+0x109c>
   11044:	51 c0       	rjmp	.+162    	; 0x110e8 <FMenuLocalAccount+0x113e>
				    IsCompleteFilling=False;
   11046:	10 92 a9 01 	sts	0x01A9, r1
				    stLocalAccount=laSuccessTransaction;
   1104a:	89 e1       	ldi	r24, 0x19	; 25
   1104c:	80 93 5b 01 	sts	0x015B, r24
					TimLocAcc=0;
   11050:	10 92 ba 01 	sts	0x01BA, r1
   11054:	49 c0       	rjmp	.+146    	; 0x110e8 <FMenuLocalAccount+0x113e>
					}
		        break;
           case laSuccessTransaction:
				lcd_clear();lcd_printf(2,1,PSTR("Transaksi Selesai"));
   11056:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
   1105a:	82 e0       	ldi	r24, 0x02	; 2
   1105c:	61 e0       	ldi	r22, 0x01	; 1
   1105e:	44 eb       	ldi	r20, 0xB4	; 180
   11060:	5f e1       	ldi	r21, 0x1F	; 31
   11062:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
				//Show Status FIP
				sprintf_P(lcdteks,PSTR("Fueling @FIP:#%d"),FIP_Used);
   11066:	00 d0       	rcall	.+0      	; 0x11068 <FMenuLocalAccount+0x10be>
   11068:	00 d0       	rcall	.+0      	; 0x1106a <FMenuLocalAccount+0x10c0>
   1106a:	00 d0       	rcall	.+0      	; 0x1106c <FMenuLocalAccount+0x10c2>
   1106c:	ed b7       	in	r30, 0x3d	; 61
   1106e:	fe b7       	in	r31, 0x3e	; 62
   11070:	31 96       	adiw	r30, 0x01	; 1
   11072:	8e 01       	movw	r16, r28
   11074:	04 5f       	subi	r16, 0xF4	; 244
   11076:	1f 4f       	sbci	r17, 0xFF	; 255
   11078:	ad b7       	in	r26, 0x3d	; 61
   1107a:	be b7       	in	r27, 0x3e	; 62
   1107c:	12 96       	adiw	r26, 0x02	; 2
   1107e:	1c 93       	st	X, r17
   11080:	0e 93       	st	-X, r16
   11082:	11 97       	sbiw	r26, 0x01	; 1
   11084:	83 ea       	ldi	r24, 0xA3	; 163
   11086:	9f e1       	ldi	r25, 0x1F	; 31
   11088:	93 83       	std	Z+3, r25	; 0x03
   1108a:	82 83       	std	Z+2, r24	; 0x02
   1108c:	80 91 88 02 	lds	r24, 0x0288
   11090:	84 83       	std	Z+4, r24	; 0x04
   11092:	15 82       	std	Z+5, r1	; 0x05
   11094:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
				lcd_print(3,1,lcdteks);
   11098:	ed b7       	in	r30, 0x3d	; 61
   1109a:	fe b7       	in	r31, 0x3e	; 62
   1109c:	36 96       	adiw	r30, 0x06	; 6
   1109e:	0f b6       	in	r0, 0x3f	; 63
   110a0:	f8 94       	cli
   110a2:	fe bf       	out	0x3e, r31	; 62
   110a4:	0f be       	out	0x3f, r0	; 63
   110a6:	ed bf       	out	0x3d, r30	; 61
   110a8:	83 e0       	ldi	r24, 0x03	; 3
   110aa:	61 e0       	ldi	r22, 0x01	; 1
   110ac:	a8 01       	movw	r20, r16
   110ae:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>

				TimLocAcc=0;
				stLocalAccount=laDelayExit;
		        break;
           case laFailedTransaction:
		        TimLocAcc=0;
   110b2:	10 92 ba 01 	sts	0x01BA, r1
		        //Show Failed Report
				stLocalAccount=laDelayExit;
   110b6:	8e e1       	ldi	r24, 0x1E	; 30
   110b8:	0c 94 5d 80 	jmp	0x100ba	; 0x100ba <FMenuLocalAccount+0x110>
		        break;
           case laDelayExit:
		        if (TimLocAcc>15)stLocalAccount=laExitLocAcc;
   110bc:	80 91 ba 01 	lds	r24, 0x01BA
   110c0:	80 31       	cpi	r24, 0x10	; 16
   110c2:	90 f0       	brcs	.+36     	; 0x110e8 <FMenuLocalAccount+0x113e>
   110c4:	8f e1       	ldi	r24, 0x1F	; 31
   110c6:	0c 94 5d 80 	jmp	0x100ba	; 0x100ba <FMenuLocalAccount+0x110>
		        break;
           case laExitLocAcc:
		        Result=MENU_DONE;
				ClearMem(strOdometer);
   110ca:	85 e4       	ldi	r24, 0x45	; 69
   110cc:	94 e0       	ldi	r25, 0x04	; 4
   110ce:	0e 94 53 a5 	call	0x14aa6	; 0x14aa6 <ClearMem>
	            ClearMem(strLicPlate);
   110d2:	8c e7       	ldi	r24, 0x7C	; 124
   110d4:	99 e0       	ldi	r25, 0x09	; 9
   110d6:	0e 94 53 a5 	call	0x14aa6	; 0x14aa6 <ClearMem>
				stLocalAccount=laInit;
   110da:	81 e0       	ldi	r24, 0x01	; 1
   110dc:	80 93 5b 01 	sts	0x015B, r24
				lcd_clear();
   110e0:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
   110e4:	81 e0       	ldi	r24, 0x01	; 1
   110e6:	01 c0       	rjmp	.+2      	; 0x110ea <FMenuLocalAccount+0x1140>
   110e8:	80 e0       	ldi	r24, 0x00	; 0
		        break;
	       }//EndSwitch
    return Result;
}
   110ea:	e4 96       	adiw	r28, 0x34	; 52
   110ec:	0f b6       	in	r0, 0x3f	; 63
   110ee:	f8 94       	cli
   110f0:	de bf       	out	0x3e, r29	; 62
   110f2:	0f be       	out	0x3f, r0	; 63
   110f4:	cd bf       	out	0x3d, r28	; 61
   110f6:	cf 91       	pop	r28
   110f8:	df 91       	pop	r29
   110fa:	1f 91       	pop	r17
   110fc:	0f 91       	pop	r16
   110fe:	ff 90       	pop	r15
   11100:	ef 90       	pop	r14
   11102:	df 90       	pop	r13
   11104:	cf 90       	pop	r12
   11106:	bf 90       	pop	r11
   11108:	af 90       	pop	r10
   1110a:	9f 90       	pop	r9
   1110c:	8f 90       	pop	r8
   1110e:	7f 90       	pop	r7
   11110:	6f 90       	pop	r6
   11112:	08 95       	ret

00011114 <sendMessage32>:
	sprintf_P(strSend,PSTR("%s%s"),strRef3,strRef4);
    uart_print(1, 0,strSend);
	sprintf_P(strSend,PSTR("F968CFFB"));
    uart_print(1, 0,strSend);
	uart(1, 1,0x02);
*/IFTSendMessage(MSG_32);
   11114:	82 e3       	ldi	r24, 0x32	; 50
   11116:	0e 94 22 7a 	call	0xf444	; 0xf444 <IFTSendMessage>
}
   1111a:	08 95       	ret

0001111c <FMenuChangeMOP>:
	      break;
	 }
   return Result;
}

char FMenuChangeMOP(){
   1111c:	af 92       	push	r10
   1111e:	bf 92       	push	r11
   11120:	cf 92       	push	r12
   11122:	df 92       	push	r13
   11124:	ef 92       	push	r14
   11126:	ff 92       	push	r15
   11128:	0f 93       	push	r16
   1112a:	1f 93       	push	r17
   1112c:	df 93       	push	r29
   1112e:	cf 93       	push	r28
   11130:	cd b7       	in	r28, 0x3d	; 61
   11132:	de b7       	in	r29, 0x3e	; 62
   11134:	a3 97       	sbiw	r28, 0x23	; 35
   11136:	0f b6       	in	r0, 0x3f	; 63
   11138:	f8 94       	cli
   1113a:	de bf       	out	0x3e, r29	; 62
   1113c:	0f be       	out	0x3f, r0	; 63
   1113e:	cd bf       	out	0x3d, r28	; 61
       char lcdteks[20],i,msgResult;       
	   char strBankName[11],strSurcharge[4],Result;
       char uiResult,KeyPressed=0,KeyChar,FIPResult;

     Result=MENU_NONE; 
	 switch(stChangeMOP){
   11140:	80 91 61 02 	lds	r24, 0x0261
   11144:	e8 2f       	mov	r30, r24
   11146:	f0 e0       	ldi	r31, 0x00	; 0
   11148:	ee 31       	cpi	r30, 0x1E	; 30
   1114a:	f1 05       	cpc	r31, r1
   1114c:	08 f0       	brcs	.+2      	; 0x11150 <FMenuChangeMOP+0x34>
   1114e:	08 c4       	rjmp	.+2064   	; 0x11960 <FMenuChangeMOP+0x844>
   11150:	e1 55       	subi	r30, 0x51	; 81
   11152:	ff 4f       	sbci	r31, 0xFF	; 255
   11154:	ee 0f       	add	r30, r30
   11156:	ff 1f       	adc	r31, r31
   11158:	05 90       	lpm	r0, Z+
   1115a:	f4 91       	lpm	r31, Z+
   1115c:	e0 2d       	mov	r30, r0
   1115e:	09 94       	ijmp
	 case cmInit:
	      MOPType=PAY_NONE;
   11160:	85 e0       	ldi	r24, 0x05	; 5
   11162:	80 93 b8 01 	sts	0x01B8, r24
   11166:	3a c1       	rjmp	.+628    	; 0x113dc <FMenuChangeMOP+0x2c0>
		  stChangeMOP=cmDisplayMOPOption;
	      break;
	 case cmDisplayMOPOption: //12345678901234567890
	      lcd_clear();
   11168:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
	      lcd_printf(1,1,PSTR("   Select Payment   "));
   1116c:	81 e0       	ldi	r24, 0x01	; 1
   1116e:	61 e0       	ldi	r22, 0x01	; 1
   11170:	45 e0       	ldi	r20, 0x05	; 5
   11172:	5c e1       	ldi	r21, 0x1C	; 28
   11174:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
	      lcd_printf(2,1,PSTR("1.Account 3.Voucher "));
   11178:	82 e0       	ldi	r24, 0x02	; 2
   1117a:	61 e0       	ldi	r22, 0x01	; 1
   1117c:	40 ef       	ldi	r20, 0xF0	; 240
   1117e:	5b e1       	ldi	r21, 0x1B	; 27
   11180:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
	      lcd_printf(3,1,PSTR("2.Bank    4.PumpTest"));
   11184:	83 e0       	ldi	r24, 0x03	; 3
   11186:	61 e0       	ldi	r22, 0x01	; 1
   11188:	4b ed       	ldi	r20, 0xDB	; 219
   1118a:	5b e1       	ldi	r21, 0x1B	; 27
   1118c:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
	      lcd_printf(4,1,PSTR("[*]Back             "));
   11190:	84 e0       	ldi	r24, 0x04	; 4
   11192:	61 e0       	ldi	r22, 0x01	; 1
   11194:	46 ec       	ldi	r20, 0xC6	; 198
   11196:	5b e1       	ldi	r21, 0x1B	; 27
   11198:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
          stChangeMOP=cmInputMOP;		 
   1119c:	82 e0       	ldi	r24, 0x02	; 2
   1119e:	9e c1       	rjmp	.+828    	; 0x114dc <FMenuChangeMOP+0x3c0>
		  break;
	 case cmInputMOP:
	      KeyPressed=_key_scan(1);
   111a0:	81 e0       	ldi	r24, 0x01	; 1
   111a2:	0e 94 58 a6 	call	0x14cb0	; 0x14cb0 <_key_scan>
   111a6:	18 2f       	mov	r17, r24
		  KeyChar=_key_btn(KeyPressed);
   111a8:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <_key_btn>
   111ac:	98 2f       	mov	r25, r24
		  if ((KeyChar>='1')&&(KeyChar<='4')){
   111ae:	81 53       	subi	r24, 0x31	; 49
   111b0:	84 30       	cpi	r24, 0x04	; 4
   111b2:	f0 f4       	brcc	.+60     	; 0x111f0 <FMenuChangeMOP+0xd4>
              switch(KeyChar){
   111b4:	92 33       	cpi	r25, 0x32	; 50
   111b6:	61 f0       	breq	.+24     	; 0x111d0 <FMenuChangeMOP+0xb4>
   111b8:	93 33       	cpi	r25, 0x33	; 51
   111ba:	18 f4       	brcc	.+6      	; 0x111c2 <FMenuChangeMOP+0xa6>
   111bc:	91 33       	cpi	r25, 0x31	; 49
   111be:	c1 f4       	brne	.+48     	; 0x111f0 <FMenuChangeMOP+0xd4>
   111c0:	05 c0       	rjmp	.+10     	; 0x111cc <FMenuChangeMOP+0xb0>
   111c2:	93 33       	cpi	r25, 0x33	; 51
   111c4:	51 f0       	breq	.+20     	; 0x111da <FMenuChangeMOP+0xbe>
   111c6:	94 33       	cpi	r25, 0x34	; 52
   111c8:	99 f4       	brne	.+38     	; 0x111f0 <FMenuChangeMOP+0xd4>
   111ca:	0c c0       	rjmp	.+24     	; 0x111e4 <FMenuChangeMOP+0xc8>
		        case '1':MOPType=PAY_ACCOUNT; stChangeMOP=cmSelectFIP;         break;
   111cc:	81 e0       	ldi	r24, 0x01	; 1
   111ce:	0b c0       	rjmp	.+22     	; 0x111e6 <FMenuChangeMOP+0xca>
		        case '2':MOPType=PAY_BANK;    stChangeMOP=cmSelectBankName;    break;
   111d0:	82 e0       	ldi	r24, 0x02	; 2
   111d2:	80 93 b8 01 	sts	0x01B8, r24
   111d6:	8b e0       	ldi	r24, 0x0B	; 11
   111d8:	09 c0       	rjmp	.+18     	; 0x111ec <FMenuChangeMOP+0xd0>
		        case '3':MOPType=PAY_VOUCHER; stChangeMOP=cmDispInputVoucher;  break;
   111da:	83 e0       	ldi	r24, 0x03	; 3
   111dc:	80 93 b8 01 	sts	0x01B8, r24
   111e0:	8f e0       	ldi	r24, 0x0F	; 15
   111e2:	04 c0       	rjmp	.+8      	; 0x111ec <FMenuChangeMOP+0xd0>
		        case '4':MOPType=PAY_PUMPTEST;stChangeMOP=cmSelectFIP;         break;
   111e4:	84 e0       	ldi	r24, 0x04	; 4
   111e6:	80 93 b8 01 	sts	0x01B8, r24
   111ea:	89 e0       	ldi	r24, 0x09	; 9
   111ec:	80 93 61 02 	sts	0x0261, r24
		     }
		  }
		  if (KeyPressed==_KEY_CANCEL) stChangeMOP=cmExitChangeMOP;
   111f0:	17 3e       	cpi	r17, 0xE7	; 231
   111f2:	09 f0       	breq	.+2      	; 0x111f6 <FMenuChangeMOP+0xda>
   111f4:	b5 c3       	rjmp	.+1898   	; 0x11960 <FMenuChangeMOP+0x844>
   111f6:	ac c3       	rjmp	.+1880   	; 0x11950 <FMenuChangeMOP+0x834>
	      break;
	 case cmDispInputVoucher://Enter Voucher number
          lcd_clear();
   111f8:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
		  lcd_printf(1,1,PSTR("Kode Voucher"));
   111fc:	81 e0       	ldi	r24, 0x01	; 1
   111fe:	61 e0       	ldi	r22, 0x01	; 1
   11200:	49 eb       	ldi	r20, 0xB9	; 185
   11202:	5b e1       	ldi	r21, 0x1B	; 27
   11204:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  lcd_printf(2,1,PSTR("_"));
   11208:	82 e0       	ldi	r24, 0x02	; 2
   1120a:	61 e0       	ldi	r22, 0x01	; 1
   1120c:	47 eb       	ldi	r20, 0xB7	; 183
   1120e:	5b e1       	ldi	r21, 0x1B	; 27
   11210:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
   11214:	84 e0       	ldi	r24, 0x04	; 4
   11216:	61 e0       	ldi	r22, 0x01	; 1
   11218:	42 ea       	ldi	r20, 0xA2	; 162
   1121a:	5b e1       	ldi	r21, 0x1B	; 27
   1121c:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
   11220:	ee eb       	ldi	r30, 0xBE	; 190
   11222:	fc e0       	ldi	r31, 0x0C	; 12
}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
	     strMemory[i]=data;
   11224:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
   11226:	8c e0       	ldi	r24, 0x0C	; 12
   11228:	e3 3d       	cpi	r30, 0xD3	; 211
   1122a:	f8 07       	cpc	r31, r24
   1122c:	d9 f7       	brne	.-10     	; 0x11224 <FMenuChangeMOP+0x108>
          lcd_clear();
		  lcd_printf(1,1,PSTR("Kode Voucher"));
		  lcd_printf(2,1,PSTR("_"));
		  lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
		  FillChar(strVoucherNum,sizeof(strVoucherNum),0);
          stChangeMOP=cmInputVoucher;		  
   1122e:	87 e0       	ldi	r24, 0x07	; 7
   11230:	55 c1       	rjmp	.+682    	; 0x114dc <FMenuChangeMOP+0x3c0>
	      break;
     case cmInputVoucher:
          uiResult=UserInput(UI_NUMBER_R,2,1,strVoucherNum,0,13);
   11232:	81 e0       	ldi	r24, 0x01	; 1
   11234:	62 e0       	ldi	r22, 0x02	; 2
   11236:	41 e0       	ldi	r20, 0x01	; 1
   11238:	2e eb       	ldi	r18, 0xBE	; 190
   1123a:	3c e0       	ldi	r19, 0x0C	; 12
   1123c:	00 e0       	ldi	r16, 0x00	; 0
   1123e:	10 e0       	ldi	r17, 0x00	; 0
   11240:	5d e0       	ldi	r21, 0x0D	; 13
   11242:	e5 2e       	mov	r14, r21
   11244:	0e 94 a9 67 	call	0xcf52	; 0xcf52 <UserInput>
	      if (uiResult==USER_OK){
   11248:	83 30       	cpi	r24, 0x03	; 3
   1124a:	11 f4       	brne	.+4      	; 0x11250 <FMenuChangeMOP+0x134>
		     stChangeMOP=cmSelectFIP;
   1124c:	89 e0       	ldi	r24, 0x09	; 9
   1124e:	46 c1       	rjmp	.+652    	; 0x114dc <FMenuChangeMOP+0x3c0>
			 }
		  else
	      if (uiResult==USER_CANCEL)stChangeMOP=cmDisplayMOPOption;
   11250:	81 30       	cpi	r24, 0x01	; 1
   11252:	09 f4       	brne	.+2      	; 0x11256 <FMenuChangeMOP+0x13a>
   11254:	43 c1       	rjmp	.+646    	; 0x114dc <FMenuChangeMOP+0x3c0>
		  else
		  if (uiResult==USER_ENTRY)lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
   11256:	84 30       	cpi	r24, 0x04	; 4
   11258:	21 f4       	brne	.+8      	; 0x11262 <FMenuChangeMOP+0x146>
   1125a:	61 e0       	ldi	r22, 0x01	; 1
   1125c:	4d e8       	ldi	r20, 0x8D	; 141
   1125e:	5b e1       	ldi	r21, 0x1B	; 27
   11260:	25 c1       	rjmp	.+586    	; 0x114ac <FMenuChangeMOP+0x390>
		  else
		  if (uiResult==USER_NO_DATA)lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
   11262:	85 30       	cpi	r24, 0x05	; 5
   11264:	09 f0       	breq	.+2      	; 0x11268 <FMenuChangeMOP+0x14c>
   11266:	7c c3       	rjmp	.+1784   	; 0x11960 <FMenuChangeMOP+0x844>
   11268:	84 e0       	ldi	r24, 0x04	; 4
   1126a:	61 e0       	ldi	r22, 0x01	; 1
   1126c:	48 e7       	ldi	r20, 0x78	; 120
   1126e:	5b e1       	ldi	r21, 0x1B	; 27
   11270:	1d c1       	rjmp	.+570    	; 0x114ac <FMenuChangeMOP+0x390>
	      break;
	 case cmSelectFIP:
	      FIPResult=menu_FIP(&FIP_Used,strFIP_ID);
   11272:	80 e6       	ldi	r24, 0x60	; 96
   11274:	92 e0       	ldi	r25, 0x02	; 2
   11276:	6b e3       	ldi	r22, 0x3B	; 59
   11278:	78 e0       	ldi	r23, 0x08	; 8
   1127a:	0e 94 28 55 	call	0xaa50	; 0xaa50 <menu_FIP>
		  if (FIPResult==FIP_DONE){
   1127e:	88 23       	and	r24, r24
   11280:	11 f4       	brne	.+4      	; 0x11286 <FMenuChangeMOP+0x16a>
		      //sprintf_P(strFIP_ID,PSTR("%.2d"),FIP_Used);
		      stChangeMOP=cmFlowFIP;
   11282:	8e e0       	ldi	r24, 0x0E	; 14
   11284:	2b c1       	rjmp	.+598    	; 0x114dc <FMenuChangeMOP+0x3c0>
		  }
		  else
		  if (FIPResult==FIP_CANCEL){
   11286:	82 30       	cpi	r24, 0x02	; 2
   11288:	09 f0       	breq	.+2      	; 0x1128c <FMenuChangeMOP+0x170>
   1128a:	6a c3       	rjmp	.+1748   	; 0x11960 <FMenuChangeMOP+0x844>
		      if (MOPType==PAY_ACCOUNT)stChangeMOP=cmDisplayMOPOption;
   1128c:	80 91 b8 01 	lds	r24, 0x01B8
   11290:	81 30       	cpi	r24, 0x01	; 1
   11292:	09 f4       	brne	.+2      	; 0x11296 <FMenuChangeMOP+0x17a>
   11294:	23 c1       	rjmp	.+582    	; 0x114dc <FMenuChangeMOP+0x3c0>
		      if (MOPType==PAY_BANK)stChangeMOP=cmSelectBankName;
   11296:	82 30       	cpi	r24, 0x02	; 2
   11298:	09 f4       	brne	.+2      	; 0x1129c <FMenuChangeMOP+0x180>
   1129a:	f9 c0       	rjmp	.+498    	; 0x1148e <FMenuChangeMOP+0x372>
		      if (MOPType==PAY_VOUCHER)stChangeMOP=cmDispInputVoucher;
   1129c:	83 30       	cpi	r24, 0x03	; 3
   1129e:	11 f4       	brne	.+4      	; 0x112a4 <FMenuChangeMOP+0x188>
   112a0:	8f e0       	ldi	r24, 0x0F	; 15
   112a2:	1c c1       	rjmp	.+568    	; 0x114dc <FMenuChangeMOP+0x3c0>
		      if (MOPType==PAY_PUMPTEST)stChangeMOP=cmDisplayMOPOption;		  
   112a4:	84 30       	cpi	r24, 0x04	; 4
   112a6:	09 f4       	brne	.+2      	; 0x112aa <FMenuChangeMOP+0x18e>
   112a8:	99 c0       	rjmp	.+306    	; 0x113dc <FMenuChangeMOP+0x2c0>
   112aa:	5a c3       	rjmp	.+1716   	; 0x11960 <FMenuChangeMOP+0x844>
     case cmSelectFIPInput:
		
	      break;
		  //Load Bank Information
	 case cmSelectBankName:
	      lcd_clear();
   112ac:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
		  lcd_printf(1,1,PSTR("Select Bank"));
   112b0:	81 e0       	ldi	r24, 0x01	; 1
   112b2:	61 e0       	ldi	r22, 0x01	; 1
   112b4:	4c e6       	ldi	r20, 0x6C	; 108
   112b6:	5b e1       	ldi	r21, 0x1B	; 27
   112b8:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  iLoop=0;
	      for(iLoop=0;iLoop<4;iLoop++){
   112bc:	10 92 5c 02 	sts	0x025C, r1
   112c0:	10 92 5b 02 	sts	0x025B, r1
			  eeprom_read_block((void*) &strBankName, (const void*) &DefBankName[iLoop], 11);
   112c4:	8e 01       	movw	r16, r28
   112c6:	0b 5f       	subi	r16, 0xFB	; 251
   112c8:	1f 4f       	sbci	r17, 0xFF	; 255
   112ca:	9b e0       	ldi	r25, 0x0B	; 11
   112cc:	a9 2e       	mov	r10, r25
   112ce:	b1 2c       	mov	r11, r1
			  if (strlen(strBankName<=10)){
			     sprintf_P(lcdteks,PSTR("%d.%s"),(iLoop+1),strBankName);
   112d0:	80 e1       	ldi	r24, 0x10	; 16
   112d2:	e8 2e       	mov	r14, r24
   112d4:	f1 2c       	mov	r15, r1
   112d6:	ec 0e       	add	r14, r28
   112d8:	fd 1e       	adc	r15, r29
   112da:	b6 e6       	ldi	r27, 0x66	; 102
   112dc:	cb 2e       	mov	r12, r27
   112de:	bb e1       	ldi	r27, 0x1B	; 27
   112e0:	db 2e       	mov	r13, r27
   112e2:	5b c0       	rjmp	.+182    	; 0x1139a <FMenuChangeMOP+0x27e>
	 case cmSelectBankName:
	      lcd_clear();
		  lcd_printf(1,1,PSTR("Select Bank"));
		  iLoop=0;
	      for(iLoop=0;iLoop<4;iLoop++){
			  eeprom_read_block((void*) &strBankName, (const void*) &DefBankName[iLoop], 11);
   112e4:	8a 9d       	mul	r24, r10
   112e6:	b0 01       	movw	r22, r0
   112e8:	8b 9d       	mul	r24, r11
   112ea:	70 0d       	add	r23, r0
   112ec:	9a 9d       	mul	r25, r10
   112ee:	70 0d       	add	r23, r0
   112f0:	11 24       	eor	r1, r1
   112f2:	66 5f       	subi	r22, 0xF6	; 246
   112f4:	7e 4f       	sbci	r23, 0xFE	; 254
   112f6:	c8 01       	movw	r24, r16
   112f8:	4b e0       	ldi	r20, 0x0B	; 11
   112fa:	50 e0       	ldi	r21, 0x00	; 0
   112fc:	0e 94 1b ad 	call	0x15a36	; 0x15a36 <__eerd_block_m128>
			  if (strlen(strBankName<=10)){
   11300:	e0 e0       	ldi	r30, 0x00	; 0
   11302:	f0 e0       	ldi	r31, 0x00	; 0
   11304:	0b 30       	cpi	r16, 0x0B	; 11
   11306:	11 05       	cpc	r17, r1
   11308:	10 f4       	brcc	.+4      	; 0x1130e <FMenuChangeMOP+0x1f2>
   1130a:	e1 e0       	ldi	r30, 0x01	; 1
   1130c:	f0 e0       	ldi	r31, 0x00	; 0
   1130e:	80 81       	ld	r24, Z
   11310:	88 23       	and	r24, r24
   11312:	d1 f1       	breq	.+116    	; 0x11388 <FMenuChangeMOP+0x26c>
			     sprintf_P(lcdteks,PSTR("%d.%s"),(iLoop+1),strBankName);
   11314:	ad b7       	in	r26, 0x3d	; 61
   11316:	be b7       	in	r27, 0x3e	; 62
   11318:	18 97       	sbiw	r26, 0x08	; 8
   1131a:	0f b6       	in	r0, 0x3f	; 63
   1131c:	f8 94       	cli
   1131e:	be bf       	out	0x3e, r27	; 62
   11320:	0f be       	out	0x3f, r0	; 63
   11322:	ad bf       	out	0x3d, r26	; 61
   11324:	ed b7       	in	r30, 0x3d	; 61
   11326:	fe b7       	in	r31, 0x3e	; 62
   11328:	31 96       	adiw	r30, 0x01	; 1
   1132a:	12 96       	adiw	r26, 0x02	; 2
   1132c:	fc 92       	st	X, r15
   1132e:	ee 92       	st	-X, r14
   11330:	11 97       	sbiw	r26, 0x01	; 1
   11332:	d3 82       	std	Z+3, r13	; 0x03
   11334:	c2 82       	std	Z+2, r12	; 0x02
   11336:	80 91 5b 02 	lds	r24, 0x025B
   1133a:	90 91 5c 02 	lds	r25, 0x025C
   1133e:	01 96       	adiw	r24, 0x01	; 1
   11340:	95 83       	std	Z+5, r25	; 0x05
   11342:	84 83       	std	Z+4, r24	; 0x04
   11344:	17 83       	std	Z+7, r17	; 0x07
   11346:	06 83       	std	Z+6, r16	; 0x06
   11348:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
			     lcd_print((2+(iLoop%2)),(1+((iLoop/2)*12)),lcdteks);
   1134c:	20 91 5b 02 	lds	r18, 0x025B
   11350:	30 91 5c 02 	lds	r19, 0x025C
   11354:	ed b7       	in	r30, 0x3d	; 61
   11356:	fe b7       	in	r31, 0x3e	; 62
   11358:	38 96       	adiw	r30, 0x08	; 8
   1135a:	0f b6       	in	r0, 0x3f	; 63
   1135c:	f8 94       	cli
   1135e:	fe bf       	out	0x3e, r31	; 62
   11360:	0f be       	out	0x3f, r0	; 63
   11362:	ed bf       	out	0x3d, r30	; 61
   11364:	82 2f       	mov	r24, r18
   11366:	81 70       	andi	r24, 0x01	; 1
   11368:	36 95       	lsr	r19
   1136a:	27 95       	ror	r18
   1136c:	b9 01       	movw	r22, r18
   1136e:	66 0f       	add	r22, r22
   11370:	77 1f       	adc	r23, r23
   11372:	62 0f       	add	r22, r18
   11374:	73 1f       	adc	r23, r19
   11376:	66 0f       	add	r22, r22
   11378:	77 1f       	adc	r23, r23
   1137a:	66 0f       	add	r22, r22
   1137c:	77 1f       	adc	r23, r23
   1137e:	6f 5f       	subi	r22, 0xFF	; 255
   11380:	8e 5f       	subi	r24, 0xFE	; 254
   11382:	a7 01       	movw	r20, r14
   11384:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
		  //Load Bank Information
	 case cmSelectBankName:
	      lcd_clear();
		  lcd_printf(1,1,PSTR("Select Bank"));
		  iLoop=0;
	      for(iLoop=0;iLoop<4;iLoop++){
   11388:	80 91 5b 02 	lds	r24, 0x025B
   1138c:	90 91 5c 02 	lds	r25, 0x025C
   11390:	01 96       	adiw	r24, 0x01	; 1
   11392:	90 93 5c 02 	sts	0x025C, r25
   11396:	80 93 5b 02 	sts	0x025B, r24
   1139a:	80 91 5b 02 	lds	r24, 0x025B
   1139e:	90 91 5c 02 	lds	r25, 0x025C
   113a2:	84 30       	cpi	r24, 0x04	; 4
   113a4:	91 05       	cpc	r25, r1
   113a6:	08 f4       	brcc	.+2      	; 0x113aa <FMenuChangeMOP+0x28e>
   113a8:	9d cf       	rjmp	.-198    	; 0x112e4 <FMenuChangeMOP+0x1c8>
			  if (strlen(strBankName<=10)){
			     sprintf_P(lcdteks,PSTR("%d.%s"),(iLoop+1),strBankName);
			     lcd_print((2+(iLoop%2)),(1+((iLoop/2)*12)),lcdteks);
				 }
		  }
	      lcd_printf(4,1,PSTR("[*]Back"));
   113aa:	84 e0       	ldi	r24, 0x04	; 4
   113ac:	61 e0       	ldi	r22, 0x01	; 1
   113ae:	4e e5       	ldi	r20, 0x5E	; 94
   113b0:	5b e1       	ldi	r21, 0x1B	; 27
   113b2:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  stChangeMOP=cmSelectBankNameInput;
   113b6:	8c e0       	ldi	r24, 0x0C	; 12
   113b8:	91 c0       	rjmp	.+290    	; 0x114dc <FMenuChangeMOP+0x3c0>
	      break;
     case cmSelectBankNameInput:
		  KeyPressed=_key_scan(1);
   113ba:	81 e0       	ldi	r24, 0x01	; 1
   113bc:	0e 94 58 a6 	call	0x14cb0	; 0x14cb0 <_key_scan>
   113c0:	18 2f       	mov	r17, r24
		  KeyChar=_key_btn(KeyPressed);
   113c2:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <_key_btn>
          if ((KeyChar>='1')&&(KeyChar<='4')){
   113c6:	81 53       	subi	r24, 0x31	; 49
   113c8:	84 30       	cpi	r24, 0x04	; 4
   113ca:	28 f4       	brcc	.+10     	; 0x113d6 <FMenuChangeMOP+0x2ba>
		      BankIdx=KeyChar-'1';
   113cc:	80 93 5f 02 	sts	0x025F, r24
			  stChangeMOP=cmSelectFIP;
   113d0:	89 e0       	ldi	r24, 0x09	; 9
   113d2:	80 93 61 02 	sts	0x0261, r24
		  }
		  if (KeyPressed==_KEY_CANCEL) stChangeMOP=cmDisplayMOPOption;
   113d6:	17 3e       	cpi	r17, 0xE7	; 231
   113d8:	09 f0       	breq	.+2      	; 0x113dc <FMenuChangeMOP+0x2c0>
   113da:	c2 c2       	rjmp	.+1412   	; 0x11960 <FMenuChangeMOP+0x844>
   113dc:	81 e0       	ldi	r24, 0x01	; 1
   113de:	7e c0       	rjmp	.+252    	; 0x114dc <FMenuChangeMOP+0x3c0>

	      break;
     case cmDispBankSurcharge:
	      lcd_clear();
   113e0:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
		  eeprom_read_block((void*) &strBankName, (const void*) &DefBankName[BankIdx], 11);
   113e4:	65 e0       	ldi	r22, 0x05	; 5
   113e6:	e6 2e       	mov	r14, r22
   113e8:	f1 2c       	mov	r15, r1
   113ea:	ec 0e       	add	r14, r28
   113ec:	fd 1e       	adc	r15, r29
   113ee:	60 91 5f 02 	lds	r22, 0x025F
   113f2:	8b e0       	ldi	r24, 0x0B	; 11
   113f4:	68 9f       	mul	r22, r24
   113f6:	b0 01       	movw	r22, r0
   113f8:	11 24       	eor	r1, r1
   113fa:	66 5f       	subi	r22, 0xF6	; 246
   113fc:	7e 4f       	sbci	r23, 0xFE	; 254
   113fe:	c7 01       	movw	r24, r14
   11400:	4b e0       	ldi	r20, 0x0B	; 11
   11402:	50 e0       	ldi	r21, 0x00	; 0
   11404:	0e 94 1b ad 	call	0x15a36	; 0x15a36 <__eerd_block_m128>
		  sprintf_P(lcdteks,PSTR("%s"),strBankName);
   11408:	00 d0       	rcall	.+0      	; 0x1140a <FMenuChangeMOP+0x2ee>
   1140a:	00 d0       	rcall	.+0      	; 0x1140c <FMenuChangeMOP+0x2f0>
   1140c:	00 d0       	rcall	.+0      	; 0x1140e <FMenuChangeMOP+0x2f2>
   1140e:	ed b7       	in	r30, 0x3d	; 61
   11410:	fe b7       	in	r31, 0x3e	; 62
   11412:	31 96       	adiw	r30, 0x01	; 1
   11414:	8e 01       	movw	r16, r28
   11416:	00 5f       	subi	r16, 0xF0	; 240
   11418:	1f 4f       	sbci	r17, 0xFF	; 255
   1141a:	ad b7       	in	r26, 0x3d	; 61
   1141c:	be b7       	in	r27, 0x3e	; 62
   1141e:	12 96       	adiw	r26, 0x02	; 2
   11420:	1c 93       	st	X, r17
   11422:	0e 93       	st	-X, r16
   11424:	11 97       	sbiw	r26, 0x01	; 1
   11426:	8b e5       	ldi	r24, 0x5B	; 91
   11428:	9b e1       	ldi	r25, 0x1B	; 27
   1142a:	93 83       	std	Z+3, r25	; 0x03
   1142c:	82 83       	std	Z+2, r24	; 0x02
   1142e:	f5 82       	std	Z+5, r15	; 0x05
   11430:	e4 82       	std	Z+4, r14	; 0x04
   11432:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
		  lcd_print(1,1,lcdteks);
   11436:	ed b7       	in	r30, 0x3d	; 61
   11438:	fe b7       	in	r31, 0x3e	; 62
   1143a:	36 96       	adiw	r30, 0x06	; 6
   1143c:	0f b6       	in	r0, 0x3f	; 63
   1143e:	f8 94       	cli
   11440:	fe bf       	out	0x3e, r31	; 62
   11442:	0f be       	out	0x3f, r0	; 63
   11444:	ed bf       	out	0x3d, r30	; 61
   11446:	81 e0       	ldi	r24, 0x01	; 1
   11448:	61 e0       	ldi	r22, 0x01	; 1
   1144a:	a8 01       	movw	r20, r16
   1144c:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
		  lcd_printf(2,1,PSTR("Surcharge:   _%"));
   11450:	82 e0       	ldi	r24, 0x02	; 2
   11452:	61 e0       	ldi	r22, 0x01	; 1
   11454:	4b e4       	ldi	r20, 0x4B	; 75
   11456:	5b e1       	ldi	r21, 0x1B	; 27
   11458:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
	      lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
   1145c:	84 e0       	ldi	r24, 0x04	; 4
   1145e:	61 e0       	ldi	r22, 0x01	; 1
   11460:	46 e3       	ldi	r20, 0x36	; 54
   11462:	5b e1       	ldi	r21, 0x1B	; 27
   11464:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
          stChangeMOP=cmInputBankSurcharge;
   11468:	8d e0       	ldi	r24, 0x0D	; 13
   1146a:	38 c0       	rjmp	.+112    	; 0x114dc <FMenuChangeMOP+0x3c0>
	      break;
	 case cmInputBankSurcharge:
	      //uiResult=UserInput(UI_NUMBER_L,2,14,ValueChar,100,3);
		  uiResult=UserInput(UI_NUMBER_L,2,14,strSurcharge,100,3);
   1146c:	82 e0       	ldi	r24, 0x02	; 2
   1146e:	62 e0       	ldi	r22, 0x02	; 2
   11470:	4e e0       	ldi	r20, 0x0E	; 14
   11472:	9e 01       	movw	r18, r28
   11474:	2f 5f       	subi	r18, 0xFF	; 255
   11476:	3f 4f       	sbci	r19, 0xFF	; 255
   11478:	04 e6       	ldi	r16, 0x64	; 100
   1147a:	10 e0       	ldi	r17, 0x00	; 0
   1147c:	53 e0       	ldi	r21, 0x03	; 3
   1147e:	e5 2e       	mov	r14, r21
   11480:	0e 94 a9 67 	call	0xcf52	; 0xcf52 <UserInput>
	      if (uiResult==USER_OK)stChangeMOP=cmGenerateData;
   11484:	83 30       	cpi	r24, 0x03	; 3
   11486:	09 f4       	brne	.+2      	; 0x1148a <FMenuChangeMOP+0x36e>
   11488:	c6 c0       	rjmp	.+396    	; 0x11616 <FMenuChangeMOP+0x4fa>
		  else
	      if (uiResult==USER_CANCEL)stChangeMOP=cmSelectBankName;
   1148a:	81 30       	cpi	r24, 0x01	; 1
   1148c:	11 f4       	brne	.+4      	; 0x11492 <FMenuChangeMOP+0x376>
   1148e:	8b e0       	ldi	r24, 0x0B	; 11
   11490:	25 c0       	rjmp	.+74     	; 0x114dc <FMenuChangeMOP+0x3c0>
		  else
		  if (uiResult==USER_ENTRY)lcd_printf(4,1,PSTR("[*]Back     [#]Enter"));
   11492:	84 30       	cpi	r24, 0x04	; 4
   11494:	21 f4       	brne	.+8      	; 0x1149e <FMenuChangeMOP+0x382>
   11496:	61 e0       	ldi	r22, 0x01	; 1
   11498:	41 e2       	ldi	r20, 0x21	; 33
   1149a:	5b e1       	ldi	r21, 0x1B	; 27
   1149c:	07 c0       	rjmp	.+14     	; 0x114ac <FMenuChangeMOP+0x390>
		  else
		  if (uiResult==USER_NO_DATA)lcd_printf(4,1,PSTR("[*]Cancel   [#]Enter"));
   1149e:	85 30       	cpi	r24, 0x05	; 5
   114a0:	09 f0       	breq	.+2      	; 0x114a4 <FMenuChangeMOP+0x388>
   114a2:	5e c2       	rjmp	.+1212   	; 0x11960 <FMenuChangeMOP+0x844>
   114a4:	84 e0       	ldi	r24, 0x04	; 4
   114a6:	61 e0       	ldi	r22, 0x01	; 1
   114a8:	4c e0       	ldi	r20, 0x0C	; 12
   114aa:	5b e1       	ldi	r21, 0x1B	; 27
   114ac:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
   114b0:	57 c2       	rjmp	.+1198   	; 0x11960 <FMenuChangeMOP+0x844>
	      break;
     case cmFlowFIP:
          switch(MOPType){
   114b2:	80 91 b8 01 	lds	r24, 0x01B8
   114b6:	82 30       	cpi	r24, 0x02	; 2
   114b8:	61 f0       	breq	.+24     	; 0x114d2 <FMenuChangeMOP+0x3b6>
   114ba:	83 30       	cpi	r24, 0x03	; 3
   114bc:	20 f4       	brcc	.+8      	; 0x114c6 <FMenuChangeMOP+0x3aa>
   114be:	81 30       	cpi	r24, 0x01	; 1
   114c0:	09 f0       	breq	.+2      	; 0x114c4 <FMenuChangeMOP+0x3a8>
   114c2:	4e c2       	rjmp	.+1180   	; 0x11960 <FMenuChangeMOP+0x844>
   114c4:	0a c0       	rjmp	.+20     	; 0x114da <FMenuChangeMOP+0x3be>
   114c6:	83 30       	cpi	r24, 0x03	; 3
   114c8:	31 f0       	breq	.+12     	; 0x114d6 <FMenuChangeMOP+0x3ba>
   114ca:	84 30       	cpi	r24, 0x04	; 4
   114cc:	09 f0       	breq	.+2      	; 0x114d0 <FMenuChangeMOP+0x3b4>
   114ce:	48 c2       	rjmp	.+1168   	; 0x11960 <FMenuChangeMOP+0x844>
   114d0:	04 c0       	rjmp	.+8      	; 0x114da <FMenuChangeMOP+0x3be>
		  case PAY_ACCOUNT: stChangeMOP=cmDispCardTap;       break;
		  case PAY_BANK:    stChangeMOP=cmDispBankSurcharge; break;
   114d2:	81 e1       	ldi	r24, 0x11	; 17
   114d4:	03 c0       	rjmp	.+6      	; 0x114dc <FMenuChangeMOP+0x3c0>
		  case PAY_VOUCHER: stChangeMOP=cmProsesVoucher;      break;
   114d6:	85 e1       	ldi	r24, 0x15	; 21
   114d8:	01 c0       	rjmp	.+2      	; 0x114dc <FMenuChangeMOP+0x3c0>
		  case PAY_PUMPTEST:stChangeMOP=cmDispCardTap;       break;
   114da:	82 e1       	ldi	r24, 0x12	; 18
   114dc:	80 93 61 02 	sts	0x0261, r24
   114e0:	3f c2       	rjmp	.+1150   	; 0x11960 <FMenuChangeMOP+0x844>
		  }
	      break;
     case cmDispCardTap:
	      lcd_clear();
   114e2:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
	      lcd_printf(1,1,PSTR("Tap Kartu RFID"));
   114e6:	81 e0       	ldi	r24, 0x01	; 1
   114e8:	61 e0       	ldi	r22, 0x01	; 1
   114ea:	4d ef       	ldi	r20, 0xFD	; 253
   114ec:	5a e1       	ldi	r21, 0x1A	; 26
   114ee:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  sprintf_P(lcdteks,PSTR("FIP%s"),strFIP_ID);
   114f2:	00 d0       	rcall	.+0      	; 0x114f4 <FMenuChangeMOP+0x3d8>
   114f4:	00 d0       	rcall	.+0      	; 0x114f6 <FMenuChangeMOP+0x3da>
   114f6:	00 d0       	rcall	.+0      	; 0x114f8 <FMenuChangeMOP+0x3dc>
   114f8:	ed b7       	in	r30, 0x3d	; 61
   114fa:	fe b7       	in	r31, 0x3e	; 62
   114fc:	31 96       	adiw	r30, 0x01	; 1
   114fe:	8e 01       	movw	r16, r28
   11500:	00 5f       	subi	r16, 0xF0	; 240
   11502:	1f 4f       	sbci	r17, 0xFF	; 255
   11504:	ad b7       	in	r26, 0x3d	; 61
   11506:	be b7       	in	r27, 0x3e	; 62
   11508:	12 96       	adiw	r26, 0x02	; 2
   1150a:	1c 93       	st	X, r17
   1150c:	0e 93       	st	-X, r16
   1150e:	11 97       	sbiw	r26, 0x01	; 1
   11510:	87 ef       	ldi	r24, 0xF7	; 247
   11512:	9a e1       	ldi	r25, 0x1A	; 26
   11514:	93 83       	std	Z+3, r25	; 0x03
   11516:	82 83       	std	Z+2, r24	; 0x02
   11518:	8b e3       	ldi	r24, 0x3B	; 59
   1151a:	98 e0       	ldi	r25, 0x08	; 8
   1151c:	95 83       	std	Z+5, r25	; 0x05
   1151e:	84 83       	std	Z+4, r24	; 0x04
   11520:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
		  lcd_print(2,1,lcdteks);
   11524:	ed b7       	in	r30, 0x3d	; 61
   11526:	fe b7       	in	r31, 0x3e	; 62
   11528:	36 96       	adiw	r30, 0x06	; 6
   1152a:	0f b6       	in	r0, 0x3f	; 63
   1152c:	f8 94       	cli
   1152e:	fe bf       	out	0x3e, r31	; 62
   11530:	0f be       	out	0x3f, r0	; 63
   11532:	ed bf       	out	0x3d, r30	; 61
   11534:	82 e0       	ldi	r24, 0x02	; 2
   11536:	61 e0       	ldi	r22, 0x01	; 1
   11538:	a8 01       	movw	r20, r16
   1153a:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
          lcd_printf(4,1,PSTR("[*]Back    [#]Exit"));
   1153e:	84 e0       	ldi	r24, 0x04	; 4
   11540:	61 e0       	ldi	r22, 0x01	; 1
   11542:	44 ee       	ldi	r20, 0xE4	; 228
   11544:	5a e1       	ldi	r21, 0x1A	; 26
   11546:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  IsRFIDDetected=False;
   1154a:	10 92 98 01 	sts	0x0198, r1
          stChangeMOP=cmRFIDCardInput;
   1154e:	83 e1       	ldi	r24, 0x13	; 19
   11550:	c5 cf       	rjmp	.-118    	; 0x114dc <FMenuChangeMOP+0x3c0>
	      break;
	 case cmRFIDCardInput:
		  KeyPressed=_key_scan(1);
   11552:	81 e0       	ldi	r24, 0x01	; 1
   11554:	0e 94 58 a6 	call	0x14cb0	; 0x14cb0 <_key_scan>
   11558:	18 2f       	mov	r17, r24
		  KeyChar=_key_btn(KeyPressed);
   1155a:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <_key_btn>
		  if (KeyPressed==_KEY_ENTER){
   1155e:	17 3b       	cpi	r17, 0xB7	; 183
   11560:	11 f4       	brne	.+4      	; 0x11566 <FMenuChangeMOP+0x44a>
		      stChangeMOP=cmExitChangeMOP;
   11562:	8c e1       	ldi	r24, 0x1C	; 28
   11564:	03 c0       	rjmp	.+6      	; 0x1156c <FMenuChangeMOP+0x450>
		  }
		  else
		  if (KeyPressed==_KEY_CANCEL){
   11566:	17 3e       	cpi	r17, 0xE7	; 231
   11568:	19 f4       	brne	.+6      	; 0x11570 <FMenuChangeMOP+0x454>
   		      stChangeMOP=cmSelectFIP;
   1156a:	89 e0       	ldi	r24, 0x09	; 9
   1156c:	80 93 61 02 	sts	0x0261, r24
			 }
          if (IsRFIDDetected==True){
   11570:	80 91 98 01 	lds	r24, 0x0198
   11574:	81 30       	cpi	r24, 0x01	; 1
   11576:	09 f0       	breq	.+2      	; 0x1157a <FMenuChangeMOP+0x45e>
   11578:	f3 c1       	rjmp	.+998    	; 0x11960 <FMenuChangeMOP+0x844>
		      IsRFIDDetected=False;
   1157a:	10 92 98 01 	sts	0x0198, r1
			   stChangeMOP=cmProsesRFID;
   1157e:	84 e1       	ldi	r24, 0x14	; 20
   11580:	ad cf       	rjmp	.-166    	; 0x114dc <FMenuChangeMOP+0x3c0>
   11582:	20 e0       	ldi	r18, 0x00	; 0
   11584:	30 e0       	ldi	r19, 0x00	; 0


void ViewCardID(){//+12345678 -->12345678
     char i;
	 for(i=0;i<8;i++){         //00000000000012345678
		strCardID[i]=strRFID[i];
   11586:	f9 01       	movw	r30, r18
   11588:	e5 5f       	subi	r30, 0xF5	; 245
   1158a:	f3 4f       	sbci	r31, 0xF3	; 243
   1158c:	d9 01       	movw	r26, r18
   1158e:	ad 52       	subi	r26, 0x2D	; 45
   11590:	b3 4f       	sbci	r27, 0xF3	; 243
   11592:	8c 91       	ld	r24, X
   11594:	80 83       	st	Z, r24
   11596:	2f 5f       	subi	r18, 0xFF	; 255
   11598:	3f 4f       	sbci	r19, 0xFF	; 255



void ViewCardID(){//+12345678 -->12345678
     char i;
	 for(i=0;i<8;i++){         //00000000000012345678
   1159a:	28 30       	cpi	r18, 0x08	; 8
   1159c:	31 05       	cpc	r19, r1
   1159e:	99 f7       	brne	.-26     	; 0x11586 <FMenuChangeMOP+0x46a>
		strCardID[i]=strRFID[i];
	 }strCardID[8]=0;     
   115a0:	10 92 13 0c 	sts	0x0C13, r1
			   stChangeMOP=cmProsesRFID;
			 }
	      break;
     case cmProsesRFID:
	      ViewCardID();
          sprintf_P(lcdteks,PSTR("ID:%s"),strCardID);lcd_print(2,1,lcdteks);
   115a4:	00 d0       	rcall	.+0      	; 0x115a6 <FMenuChangeMOP+0x48a>
   115a6:	00 d0       	rcall	.+0      	; 0x115a8 <FMenuChangeMOP+0x48c>
   115a8:	00 d0       	rcall	.+0      	; 0x115aa <FMenuChangeMOP+0x48e>
   115aa:	ed b7       	in	r30, 0x3d	; 61
   115ac:	fe b7       	in	r31, 0x3e	; 62
   115ae:	31 96       	adiw	r30, 0x01	; 1
   115b0:	8e 01       	movw	r16, r28
   115b2:	00 5f       	subi	r16, 0xF0	; 240
   115b4:	1f 4f       	sbci	r17, 0xFF	; 255
   115b6:	ad b7       	in	r26, 0x3d	; 61
   115b8:	be b7       	in	r27, 0x3e	; 62
   115ba:	12 96       	adiw	r26, 0x02	; 2
   115bc:	1c 93       	st	X, r17
   115be:	0e 93       	st	-X, r16
   115c0:	11 97       	sbiw	r26, 0x01	; 1
   115c2:	8e ed       	ldi	r24, 0xDE	; 222
   115c4:	9a e1       	ldi	r25, 0x1A	; 26
   115c6:	93 83       	std	Z+3, r25	; 0x03
   115c8:	82 83       	std	Z+2, r24	; 0x02
   115ca:	8b e0       	ldi	r24, 0x0B	; 11
   115cc:	9c e0       	ldi	r25, 0x0C	; 12
   115ce:	95 83       	std	Z+5, r25	; 0x05
   115d0:	84 83       	std	Z+4, r24	; 0x04
   115d2:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
   115d6:	ed b7       	in	r30, 0x3d	; 61
   115d8:	fe b7       	in	r31, 0x3e	; 62
   115da:	36 96       	adiw	r30, 0x06	; 6
   115dc:	0f b6       	in	r0, 0x3f	; 63
   115de:	f8 94       	cli
   115e0:	fe bf       	out	0x3e, r31	; 62
   115e2:	0f be       	out	0x3f, r0	; 63
   115e4:	ed bf       	out	0x3d, r30	; 61
   115e6:	82 e0       	ldi	r24, 0x02	; 2
   115e8:	61 e0       	ldi	r22, 0x01	; 1
   115ea:	a8 01       	movw	r20, r16
   115ec:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
          lcd_printf(3,1,PSTR("Proses"));
   115f0:	83 e0       	ldi	r24, 0x03	; 3
   115f2:	61 e0       	ldi	r22, 0x01	; 1
   115f4:	47 ed       	ldi	r20, 0xD7	; 215
   115f6:	5a e1       	ldi	r21, 0x1A	; 26
   115f8:	0c c0       	rjmp	.+24     	; 0x11612 <FMenuChangeMOP+0x4f6>
		  stChangeMOP=cmGenerateData;
	      break;
     case cmProsesVoucher:
          lcd_clear();
   115fa:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
          lcd_printf(1,1,PSTR("-MOP Voucher-")); 
   115fe:	81 e0       	ldi	r24, 0x01	; 1
   11600:	61 e0       	ldi	r22, 0x01	; 1
   11602:	49 ec       	ldi	r20, 0xC9	; 201
   11604:	5a e1       	ldi	r21, 0x1A	; 26
   11606:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
          lcd_printf(3,1,PSTR("Proses"));
   1160a:	83 e0       	ldi	r24, 0x03	; 3
   1160c:	61 e0       	ldi	r22, 0x01	; 1
   1160e:	42 ec       	ldi	r20, 0xC2	; 194
   11610:	5a e1       	ldi	r21, 0x1A	; 26
   11612:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  stChangeMOP=cmGenerateData;
   11616:	86 e1       	ldi	r24, 0x16	; 22
   11618:	61 cf       	rjmp	.-318    	; 0x114dc <FMenuChangeMOP+0x3c0>
	      break;
   1161a:	e0 e1       	ldi	r30, 0x10	; 16
   1161c:	fd e0       	ldi	r31, 0x0D	; 13
}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
	     strMemory[i]=data;
   1161e:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
   11620:	8d e0       	ldi	r24, 0x0D	; 13
   11622:	e5 32       	cpi	r30, 0x25	; 37
   11624:	f8 07       	cpc	r31, r24
   11626:	d9 f7       	brne	.-10     	; 0x1161e <FMenuChangeMOP+0x502>
   11628:	e0 e2       	ldi	r30, 0x20	; 32
   1162a:	fc e0       	ldi	r31, 0x0C	; 12
	     strMemory[i]=data;
   1162c:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
   1162e:	9c e0       	ldi	r25, 0x0C	; 12
   11630:	e5 33       	cpi	r30, 0x35	; 53
   11632:	f9 07       	cpc	r31, r25
   11634:	d9 f7       	brne	.-10     	; 0x1162c <FMenuChangeMOP+0x510>
   11636:	ef ef       	ldi	r30, 0xFF	; 255
   11638:	f8 e0       	ldi	r31, 0x08	; 8
	     strMemory[i]=data;
   1163a:	11 92       	st	Z+, r1

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
   1163c:	a9 e0       	ldi	r26, 0x09	; 9
   1163e:	e4 31       	cpi	r30, 0x14	; 20
   11640:	fa 07       	cpc	r31, r26
   11642:	d9 f7       	brne	.-10     	; 0x1163a <FMenuChangeMOP+0x51e>
   11644:	97 e2       	ldi	r25, 0x27	; 39
   11646:	e9 2e       	mov	r14, r25
   11648:	94 e0       	ldi	r25, 0x04	; 4
   1164a:	f9 2e       	mov	r15, r25
	     strMemory[i]=data;
   1164c:	f7 01       	movw	r30, r14
   1164e:	11 92       	st	Z+, r1
   11650:	7f 01       	movw	r14, r30

}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
   11652:	fc e3       	ldi	r31, 0x3C	; 60
   11654:	ef 16       	cp	r14, r31
   11656:	f4 e0       	ldi	r31, 0x04	; 4
   11658:	ff 06       	cpc	r15, r31
   1165a:	c1 f7       	brne	.-16     	; 0x1164c <FMenuChangeMOP+0x530>
     case cmGenerateData:
	      FillChar(strRef1,sizeof(strRef1),0);
	      FillChar(strRef2,sizeof(strRef2),0);
	      FillChar(strRef3,sizeof(strRef3),0);
	      FillChar(strRef4,sizeof(strRef4),0);
          switch(MOPType){
   1165c:	80 91 b8 01 	lds	r24, 0x01B8
   11660:	82 30       	cpi	r24, 0x02	; 2
   11662:	f1 f0       	breq	.+60     	; 0x116a0 <FMenuChangeMOP+0x584>
   11664:	83 30       	cpi	r24, 0x03	; 3
   11666:	20 f4       	brcc	.+8      	; 0x11670 <FMenuChangeMOP+0x554>
   11668:	81 30       	cpi	r24, 0x01	; 1
   1166a:	09 f0       	breq	.+2      	; 0x1166e <FMenuChangeMOP+0x552>
   1166c:	ab c0       	rjmp	.+342    	; 0x117c4 <FMenuChangeMOP+0x6a8>
   1166e:	07 c0       	rjmp	.+14     	; 0x1167e <FMenuChangeMOP+0x562>
   11670:	83 30       	cpi	r24, 0x03	; 3
   11672:	09 f4       	brne	.+2      	; 0x11676 <FMenuChangeMOP+0x55a>
   11674:	62 c0       	rjmp	.+196    	; 0x1173a <FMenuChangeMOP+0x61e>
   11676:	84 30       	cpi	r24, 0x04	; 4
   11678:	09 f0       	breq	.+2      	; 0x1167c <FMenuChangeMOP+0x560>
   1167a:	a4 c0       	rjmp	.+328    	; 0x117c4 <FMenuChangeMOP+0x6a8>
   1167c:	73 c0       	rjmp	.+230    	; 0x11764 <FMenuChangeMOP+0x648>
		  case PAY_ACCOUNT:
		       sprintf_P(strRef1,PSTR("%s"),strCardID); 
   1167e:	00 d0       	rcall	.+0      	; 0x11680 <FMenuChangeMOP+0x564>
   11680:	00 d0       	rcall	.+0      	; 0x11682 <FMenuChangeMOP+0x566>
   11682:	00 d0       	rcall	.+0      	; 0x11684 <FMenuChangeMOP+0x568>
   11684:	ed b7       	in	r30, 0x3d	; 61
   11686:	fe b7       	in	r31, 0x3e	; 62
   11688:	31 96       	adiw	r30, 0x01	; 1
   1168a:	80 e1       	ldi	r24, 0x10	; 16
   1168c:	9d e0       	ldi	r25, 0x0D	; 13
   1168e:	ad b7       	in	r26, 0x3d	; 61
   11690:	be b7       	in	r27, 0x3e	; 62
   11692:	12 96       	adiw	r26, 0x02	; 2
   11694:	9c 93       	st	X, r25
   11696:	8e 93       	st	-X, r24
   11698:	11 97       	sbiw	r26, 0x01	; 1
   1169a:	8f eb       	ldi	r24, 0xBF	; 191
   1169c:	9a e1       	ldi	r25, 0x1A	; 26
   1169e:	82 c0       	rjmp	.+260    	; 0x117a4 <FMenuChangeMOP+0x688>
		       break;
		  case PAY_BANK:
		  	   eeprom_read_block((void*) &strBankName, (const void*) &DefBankName[BankIdx], 11);
   116a0:	8e 01       	movw	r16, r28
   116a2:	0b 5f       	subi	r16, 0xFB	; 251
   116a4:	1f 4f       	sbci	r17, 0xFF	; 255
   116a6:	60 91 5f 02 	lds	r22, 0x025F
   116aa:	8b e0       	ldi	r24, 0x0B	; 11
   116ac:	68 9f       	mul	r22, r24
   116ae:	b0 01       	movw	r22, r0
   116b0:	11 24       	eor	r1, r1
   116b2:	66 5f       	subi	r22, 0xF6	; 246
   116b4:	7e 4f       	sbci	r23, 0xFE	; 254
   116b6:	c8 01       	movw	r24, r16
   116b8:	4b e0       	ldi	r20, 0x0B	; 11
   116ba:	50 e0       	ldi	r21, 0x00	; 0
   116bc:	0e 94 1b ad 	call	0x15a36	; 0x15a36 <__eerd_block_m128>
		       sprintf_P(lcdteks,PSTR("%s"),strBankName);
   116c0:	00 d0       	rcall	.+0      	; 0x116c2 <FMenuChangeMOP+0x5a6>
   116c2:	00 d0       	rcall	.+0      	; 0x116c4 <FMenuChangeMOP+0x5a8>
   116c4:	00 d0       	rcall	.+0      	; 0x116c6 <FMenuChangeMOP+0x5aa>
   116c6:	ed b7       	in	r30, 0x3d	; 61
   116c8:	fe b7       	in	r31, 0x3e	; 62
   116ca:	31 96       	adiw	r30, 0x01	; 1
   116cc:	ce 01       	movw	r24, r28
   116ce:	40 96       	adiw	r24, 0x10	; 16
   116d0:	ad b7       	in	r26, 0x3d	; 61
   116d2:	be b7       	in	r27, 0x3e	; 62
   116d4:	12 96       	adiw	r26, 0x02	; 2
   116d6:	9c 93       	st	X, r25
   116d8:	8e 93       	st	-X, r24
   116da:	11 97       	sbiw	r26, 0x01	; 1
   116dc:	8c eb       	ldi	r24, 0xBC	; 188
   116de:	9a e1       	ldi	r25, 0x1A	; 26
   116e0:	93 83       	std	Z+3, r25	; 0x03
   116e2:	82 83       	std	Z+2, r24	; 0x02
   116e4:	15 83       	std	Z+5, r17	; 0x05
   116e6:	04 83       	std	Z+4, r16	; 0x04
   116e8:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
		       sprintf_P(strRef1,PSTR("%s"),strBankName); 
   116ec:	ed b7       	in	r30, 0x3d	; 61
   116ee:	fe b7       	in	r31, 0x3e	; 62
   116f0:	31 96       	adiw	r30, 0x01	; 1
   116f2:	80 e1       	ldi	r24, 0x10	; 16
   116f4:	9d e0       	ldi	r25, 0x0D	; 13
   116f6:	ad b7       	in	r26, 0x3d	; 61
   116f8:	be b7       	in	r27, 0x3e	; 62
   116fa:	12 96       	adiw	r26, 0x02	; 2
   116fc:	9c 93       	st	X, r25
   116fe:	8e 93       	st	-X, r24
   11700:	11 97       	sbiw	r26, 0x01	; 1
   11702:	89 eb       	ldi	r24, 0xB9	; 185
   11704:	9a e1       	ldi	r25, 0x1A	; 26
   11706:	93 83       	std	Z+3, r25	; 0x03
   11708:	82 83       	std	Z+2, r24	; 0x02
   1170a:	15 83       	std	Z+5, r17	; 0x05
   1170c:	04 83       	std	Z+4, r16	; 0x04
   1170e:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
		       sprintf_P(strRef4,PSTR("%s"),strSurcharge); 
   11712:	ed b7       	in	r30, 0x3d	; 61
   11714:	fe b7       	in	r31, 0x3e	; 62
   11716:	31 96       	adiw	r30, 0x01	; 1
   11718:	8b ee       	ldi	r24, 0xEB	; 235
   1171a:	9f ef       	ldi	r25, 0xFF	; 255
   1171c:	e8 0e       	add	r14, r24
   1171e:	f9 1e       	adc	r15, r25
   11720:	ad b7       	in	r26, 0x3d	; 61
   11722:	be b7       	in	r27, 0x3e	; 62
   11724:	12 96       	adiw	r26, 0x02	; 2
   11726:	fc 92       	st	X, r15
   11728:	ee 92       	st	-X, r14
   1172a:	11 97       	sbiw	r26, 0x01	; 1
   1172c:	86 eb       	ldi	r24, 0xB6	; 182
   1172e:	9a e1       	ldi	r25, 0x1A	; 26
   11730:	93 83       	std	Z+3, r25	; 0x03
   11732:	82 83       	std	Z+2, r24	; 0x02
   11734:	ce 01       	movw	r24, r28
   11736:	01 96       	adiw	r24, 0x01	; 1
   11738:	39 c0       	rjmp	.+114    	; 0x117ac <FMenuChangeMOP+0x690>
		       break;
		  case PAY_VOUCHER://Load data Ref1=Voucher on cmVoucherInput
		  	   sprintf_P(strRef1,PSTR("%s"),strVoucherNum); 
   1173a:	00 d0       	rcall	.+0      	; 0x1173c <FMenuChangeMOP+0x620>
   1173c:	00 d0       	rcall	.+0      	; 0x1173e <FMenuChangeMOP+0x622>
   1173e:	00 d0       	rcall	.+0      	; 0x11740 <FMenuChangeMOP+0x624>
   11740:	ed b7       	in	r30, 0x3d	; 61
   11742:	fe b7       	in	r31, 0x3e	; 62
   11744:	31 96       	adiw	r30, 0x01	; 1
   11746:	80 e1       	ldi	r24, 0x10	; 16
   11748:	9d e0       	ldi	r25, 0x0D	; 13
   1174a:	ad b7       	in	r26, 0x3d	; 61
   1174c:	be b7       	in	r27, 0x3e	; 62
   1174e:	12 96       	adiw	r26, 0x02	; 2
   11750:	9c 93       	st	X, r25
   11752:	8e 93       	st	-X, r24
   11754:	11 97       	sbiw	r26, 0x01	; 1
   11756:	83 eb       	ldi	r24, 0xB3	; 179
   11758:	9a e1       	ldi	r25, 0x1A	; 26
   1175a:	93 83       	std	Z+3, r25	; 0x03
   1175c:	82 83       	std	Z+2, r24	; 0x02
   1175e:	8e eb       	ldi	r24, 0xBE	; 190
   11760:	9c e0       	ldi	r25, 0x0C	; 12
   11762:	24 c0       	rjmp	.+72     	; 0x117ac <FMenuChangeMOP+0x690>
		       break;
		  case PAY_PUMPTEST:
		  	   sprintf_P(strRef1,PSTR("PUMP TEST")); 
   11764:	00 d0       	rcall	.+0      	; 0x11766 <FMenuChangeMOP+0x64a>
   11766:	00 d0       	rcall	.+0      	; 0x11768 <FMenuChangeMOP+0x64c>
   11768:	80 e1       	ldi	r24, 0x10	; 16
   1176a:	9d e0       	ldi	r25, 0x0D	; 13
   1176c:	ad b7       	in	r26, 0x3d	; 61
   1176e:	be b7       	in	r27, 0x3e	; 62
   11770:	12 96       	adiw	r26, 0x02	; 2
   11772:	9c 93       	st	X, r25
   11774:	8e 93       	st	-X, r24
   11776:	11 97       	sbiw	r26, 0x01	; 1
   11778:	89 ea       	ldi	r24, 0xA9	; 169
   1177a:	9a e1       	ldi	r25, 0x1A	; 26
   1177c:	14 96       	adiw	r26, 0x04	; 4
   1177e:	9c 93       	st	X, r25
   11780:	8e 93       	st	-X, r24
   11782:	13 97       	sbiw	r26, 0x03	; 3
   11784:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
		  	   sprintf_P(strRef2,PSTR("%s"),strCardID); 	       
   11788:	00 d0       	rcall	.+0      	; 0x1178a <FMenuChangeMOP+0x66e>
   1178a:	ed b7       	in	r30, 0x3d	; 61
   1178c:	fe b7       	in	r31, 0x3e	; 62
   1178e:	31 96       	adiw	r30, 0x01	; 1
   11790:	80 e2       	ldi	r24, 0x20	; 32
   11792:	9c e0       	ldi	r25, 0x0C	; 12
   11794:	ad b7       	in	r26, 0x3d	; 61
   11796:	be b7       	in	r27, 0x3e	; 62
   11798:	12 96       	adiw	r26, 0x02	; 2
   1179a:	9c 93       	st	X, r25
   1179c:	8e 93       	st	-X, r24
   1179e:	11 97       	sbiw	r26, 0x01	; 1
   117a0:	86 ea       	ldi	r24, 0xA6	; 166
   117a2:	9a e1       	ldi	r25, 0x1A	; 26
   117a4:	93 83       	std	Z+3, r25	; 0x03
   117a6:	82 83       	std	Z+2, r24	; 0x02
   117a8:	8b e0       	ldi	r24, 0x0B	; 11
   117aa:	9c e0       	ldi	r25, 0x0C	; 12
   117ac:	95 83       	std	Z+5, r25	; 0x05
   117ae:	84 83       	std	Z+4, r24	; 0x04
   117b0:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
   117b4:	ed b7       	in	r30, 0x3d	; 61
   117b6:	fe b7       	in	r31, 0x3e	; 62
   117b8:	36 96       	adiw	r30, 0x06	; 6
   117ba:	0f b6       	in	r0, 0x3f	; 63
   117bc:	f8 94       	cli
   117be:	fe bf       	out	0x3e, r31	; 62
   117c0:	0f be       	out	0x3f, r0	; 63
   117c2:	ed bf       	out	0x3d, r30	; 61
	     }String[Size]=0;
	 }
}

void leadingZero(char Val,char *StrResult){
     sprintf_P(StrResult,PSTR("%.2d"),Val);
   117c4:	00 d0       	rcall	.+0      	; 0x117c6 <FMenuChangeMOP+0x6aa>
   117c6:	00 d0       	rcall	.+0      	; 0x117c8 <FMenuChangeMOP+0x6ac>
   117c8:	00 d0       	rcall	.+0      	; 0x117ca <FMenuChangeMOP+0x6ae>
   117ca:	ed b7       	in	r30, 0x3d	; 61
   117cc:	fe b7       	in	r31, 0x3e	; 62
   117ce:	31 96       	adiw	r30, 0x01	; 1
   117d0:	82 ed       	ldi	r24, 0xD2	; 210
   117d2:	97 e0       	ldi	r25, 0x07	; 7
   117d4:	ad b7       	in	r26, 0x3d	; 61
   117d6:	be b7       	in	r27, 0x3e	; 62
   117d8:	12 96       	adiw	r26, 0x02	; 2
   117da:	9c 93       	st	X, r25
   117dc:	8e 93       	st	-X, r24
   117de:	11 97       	sbiw	r26, 0x01	; 1
   117e0:	89 ee       	ldi	r24, 0xE9	; 233
   117e2:	9e e0       	ldi	r25, 0x0E	; 14
   117e4:	93 83       	std	Z+3, r25	; 0x03
   117e6:	82 83       	std	Z+2, r24	; 0x02
   117e8:	80 91 b8 01 	lds	r24, 0x01B8
   117ec:	84 83       	std	Z+4, r24	; 0x04
   117ee:	15 82       	std	Z+5, r1	; 0x05
   117f0:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
		  	   sprintf_P(strRef1,PSTR("PUMP TEST")); 
		  	   sprintf_P(strRef2,PSTR("%s"),strCardID); 	       
		       break;
		  }
		  leadingZero(MOPType,strPaymentType);
		  AddSpaceLead(strRef1,20);
   117f4:	ed b7       	in	r30, 0x3d	; 61
   117f6:	fe b7       	in	r31, 0x3e	; 62
   117f8:	36 96       	adiw	r30, 0x06	; 6
   117fa:	0f b6       	in	r0, 0x3f	; 63
   117fc:	f8 94       	cli
   117fe:	fe bf       	out	0x3e, r31	; 62
   11800:	0f be       	out	0x3f, r0	; 63
   11802:	ed bf       	out	0x3d, r30	; 61
   11804:	80 e1       	ldi	r24, 0x10	; 16
   11806:	9d e0       	ldi	r25, 0x0D	; 13
   11808:	64 e1       	ldi	r22, 0x14	; 20
   1180a:	0e 94 5d 2d 	call	0x5aba	; 0x5aba <AddSpaceLead>
		  AddSpaceLead(strRef2,20);
   1180e:	80 e2       	ldi	r24, 0x20	; 32
   11810:	9c e0       	ldi	r25, 0x0C	; 12
   11812:	64 e1       	ldi	r22, 0x14	; 20
   11814:	0e 94 5d 2d 	call	0x5aba	; 0x5aba <AddSpaceLead>
		  AddSpaceLead(strRef3,20);
   11818:	8f ef       	ldi	r24, 0xFF	; 255
   1181a:	98 e0       	ldi	r25, 0x08	; 8
   1181c:	64 e1       	ldi	r22, 0x14	; 20
   1181e:	0e 94 5d 2d 	call	0x5aba	; 0x5aba <AddSpaceLead>
		  AddSpaceLead(strRef4,20);
   11822:	87 e2       	ldi	r24, 0x27	; 39
   11824:	94 e0       	ldi	r25, 0x04	; 4
   11826:	64 e1       	ldi	r22, 0x14	; 20
   11828:	0e 94 5d 2d 	call	0x5aba	; 0x5aba <AddSpaceLead>
		  iWait=0;
   1182c:	10 92 5d 02 	sts	0x025D, r1
		  IsMessage09=False;
   11830:	10 92 a3 01 	sts	0x01A3, r1
		  stChangeMOP=cmSendMessage32;	      
   11834:	87 e1       	ldi	r24, 0x17	; 23
   11836:	52 ce       	rjmp	.-860    	; 0x114dc <FMenuChangeMOP+0x3c0>
	      break;
     case cmSendMessage32://SendMessage32
	      sendMessage32();
   11838:	0e 94 8a 88 	call	0x11114	; 0x11114 <sendMessage32>
		  iLoop=0;
   1183c:	10 92 5c 02 	sts	0x025C, r1
   11840:	10 92 5b 02 	sts	0x025B, r1
		  iPos=0;
   11844:	10 92 5e 02 	sts	0x025E, r1
		  lcd_printf(3,1,PSTR("Please Wait"));
   11848:	83 e0       	ldi	r24, 0x03	; 3
   1184a:	61 e0       	ldi	r22, 0x01	; 1
   1184c:	4a e9       	ldi	r20, 0x9A	; 154
   1184e:	5a e1       	ldi	r21, 0x1A	; 26
   11850:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  stChangeMOP=cmWaitReplyMessage;	      
   11854:	88 e1       	ldi	r24, 0x18	; 24
   11856:	42 ce       	rjmp	.-892    	; 0x114dc <FMenuChangeMOP+0x3c0>
	      break;
     case cmWaitReplyMessage:
          iLoop++;
   11858:	80 91 5b 02 	lds	r24, 0x025B
   1185c:	90 91 5c 02 	lds	r25, 0x025C
   11860:	01 96       	adiw	r24, 0x01	; 1
   11862:	90 93 5c 02 	sts	0x025C, r25
   11866:	80 93 5b 02 	sts	0x025B, r24
		  if ((iLoop%MSG_WAIT_TIMOUT)==0){
   1186a:	68 e9       	ldi	r22, 0x98	; 152
   1186c:	7a e3       	ldi	r23, 0x3A	; 58
   1186e:	0e 94 65 aa 	call	0x154ca	; 0x154ca <__udivmodhi4>
   11872:	89 2b       	or	r24, r25
   11874:	29 f5       	brne	.+74     	; 0x118c0 <FMenuChangeMOP+0x7a4>
			 if (iPos<5){
   11876:	60 91 5e 02 	lds	r22, 0x025E
   1187a:	65 30       	cpi	r22, 0x05	; 5
   1187c:	68 f4       	brcc	.+26     	; 0x11898 <FMenuChangeMOP+0x77c>
				 lcd_xy(3,(13+iPos));_lcd('.');
   1187e:	63 5f       	subi	r22, 0xF3	; 243
   11880:	83 e0       	ldi	r24, 0x03	; 3
   11882:	0e 94 9e a4 	call	0x1493c	; 0x1493c <lcd_xy>
   11886:	8e e2       	ldi	r24, 0x2E	; 46
   11888:	0e 94 78 a4 	call	0x148f0	; 0x148f0 <_lcd>
				 iPos++;
   1188c:	80 91 5e 02 	lds	r24, 0x025E
   11890:	8f 5f       	subi	r24, 0xFF	; 255
   11892:	80 93 5e 02 	sts	0x025E, r24
   11896:	14 c0       	rjmp	.+40     	; 0x118c0 <FMenuChangeMOP+0x7a4>
				}
			 else{
				 iPos=0;
   11898:	10 92 5e 02 	sts	0x025E, r1
				 lcd_printf(3,(13+iPos),PSTR("       "));
   1189c:	83 e0       	ldi	r24, 0x03	; 3
   1189e:	6d e0       	ldi	r22, 0x0D	; 13
   118a0:	42 e9       	ldi	r20, 0x92	; 146
   118a2:	5a e1       	ldi	r21, 0x1A	; 26
   118a4:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
				 //Resend Message32
				 if (iWait<5)stChangeMOP=cmSendMessage32;
   118a8:	80 91 5d 02 	lds	r24, 0x025D
   118ac:	85 30       	cpi	r24, 0x05	; 5
   118ae:	18 f4       	brcc	.+6      	; 0x118b6 <FMenuChangeMOP+0x79a>
   118b0:	87 e1       	ldi	r24, 0x17	; 23
   118b2:	80 93 61 02 	sts	0x0261, r24
				iWait++;
   118b6:	80 91 5d 02 	lds	r24, 0x025D
   118ba:	8f 5f       	subi	r24, 0xFF	; 255
   118bc:	80 93 5d 02 	sts	0x025D, r24
				}
		  }
		  if (iWait>5)stChangeMOP=cmNoReply;
   118c0:	80 91 5d 02 	lds	r24, 0x025D
   118c4:	86 30       	cpi	r24, 0x06	; 6
   118c6:	18 f0       	brcs	.+6      	; 0x118ce <FMenuChangeMOP+0x7b2>
   118c8:	8a e1       	ldi	r24, 0x1A	; 26
   118ca:	80 93 61 02 	sts	0x0261, r24
		  if (IsMessage09==True)stChangeMOP=cmDisplayFreeMessage;
   118ce:	80 91 a3 01 	lds	r24, 0x01A3
   118d2:	81 30       	cpi	r24, 0x01	; 1
   118d4:	19 f4       	brne	.+6      	; 0x118dc <FMenuChangeMOP+0x7c0>
   118d6:	89 e1       	ldi	r24, 0x19	; 25
   118d8:	80 93 61 02 	sts	0x0261, r24
		  if (IsMessage99==True)stChangeMOP=cmFinishChangeMOP;
   118dc:	80 91 9f 01 	lds	r24, 0x019F
   118e0:	81 30       	cpi	r24, 0x01	; 1
   118e2:	f1 f5       	brne	.+124    	; 0x11960 <FMenuChangeMOP+0x844>
   118e4:	37 c0       	rjmp	.+110    	; 0x11954 <FMenuChangeMOP+0x838>
		  break;
     case cmDisplayFreeMessage:
	      IsMessage09=False;
   118e6:	10 92 a3 01 	sts	0x01A3, r1
	      msgResult=procMessage09();
   118ea:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <procMessage09>
		  lcd_clear();
   118ee:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
		  lcd_print(1,1,strFreeMessageLine1);
   118f2:	81 e0       	ldi	r24, 0x01	; 1
   118f4:	61 e0       	ldi	r22, 0x01	; 1
   118f6:	44 e1       	ldi	r20, 0x14	; 20
   118f8:	59 e0       	ldi	r21, 0x09	; 9
   118fa:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
		  lcd_print(2,1,strFreeMessageLine2);
   118fe:	82 e0       	ldi	r24, 0x02	; 2
   11900:	61 e0       	ldi	r22, 0x01	; 1
   11902:	45 e2       	ldi	r20, 0x25	; 37
   11904:	58 e0       	ldi	r21, 0x08	; 8
   11906:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
		  lcd_print(3,1,strFreeMessageLine3);
   1190a:	83 e0       	ldi	r24, 0x03	; 3
   1190c:	61 e0       	ldi	r22, 0x01	; 1
   1190e:	4e e9       	ldi	r20, 0x9E	; 158
   11910:	58 e0       	ldi	r21, 0x08	; 8
   11912:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
		  lcd_print(4,1,strFreeMessageLine4);
   11916:	84 e0       	ldi	r24, 0x04	; 4
   11918:	61 e0       	ldi	r22, 0x01	; 1
   1191a:	48 e5       	ldi	r20, 0x58	; 88
   1191c:	5c e0       	ldi	r21, 0x0C	; 12
   1191e:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
   11922:	0e c0       	rjmp	.+28     	; 0x11940 <FMenuChangeMOP+0x824>
		  TimDisplay=0;
          stChangeMOP=cmDelayMOP;
	      break;
     case cmNoReply:
	      lcd_clear();
   11924:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
		  lcd_printf(2,1,PSTR("No Reply    "));
   11928:	82 e0       	ldi	r24, 0x02	; 2
   1192a:	61 e0       	ldi	r22, 0x01	; 1
   1192c:	45 e8       	ldi	r20, 0x85	; 133
   1192e:	5a e1       	ldi	r21, 0x1A	; 26
   11930:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
	      lcd_printf(3,1,PSTR("TCP/IP Error"));
   11934:	83 e0       	ldi	r24, 0x03	; 3
   11936:	61 e0       	ldi	r22, 0x01	; 1
   11938:	48 e7       	ldi	r20, 0x78	; 120
   1193a:	5a e1       	ldi	r21, 0x1A	; 26
   1193c:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  TimDisplay=0;
   11940:	10 92 92 01 	sts	0x0192, r1
          stChangeMOP=cmDelayMOP;
   11944:	8b e1       	ldi	r24, 0x1B	; 27
   11946:	ca cd       	rjmp	.-1132   	; 0x114dc <FMenuChangeMOP+0x3c0>
	      break;
     case cmDelayMOP:
	      if (TimDisplay>9)stChangeMOP=cmExitChangeMOP;
   11948:	80 91 92 01 	lds	r24, 0x0192
   1194c:	8a 30       	cpi	r24, 0x0A	; 10
   1194e:	40 f0       	brcs	.+16     	; 0x11960 <FMenuChangeMOP+0x844>
   11950:	8c e1       	ldi	r24, 0x1C	; 28
   11952:	c4 cd       	rjmp	.-1144   	; 0x114dc <FMenuChangeMOP+0x3c0>
	      break;
     case cmExitChangeMOP:
	      stChangeMOP=cmFinishChangeMOP;
   11954:	8d e1       	ldi	r24, 0x1D	; 29
   11956:	c2 cd       	rjmp	.-1148   	; 0x114dc <FMenuChangeMOP+0x3c0>
	      break;
     case cmFinishChangeMOP:
	      stChangeMOP=cmInit;
   11958:	10 92 61 02 	sts	0x0261, r1
   1195c:	81 e0       	ldi	r24, 0x01	; 1
   1195e:	01 c0       	rjmp	.+2      	; 0x11962 <FMenuChangeMOP+0x846>
   11960:	80 e0       	ldi	r24, 0x00	; 0
		  Result=MENU_DONE;
	      break;
	 }
  return Result;
}
   11962:	a3 96       	adiw	r28, 0x23	; 35
   11964:	0f b6       	in	r0, 0x3f	; 63
   11966:	f8 94       	cli
   11968:	de bf       	out	0x3e, r29	; 62
   1196a:	0f be       	out	0x3f, r0	; 63
   1196c:	cd bf       	out	0x3d, r28	; 61
   1196e:	cf 91       	pop	r28
   11970:	df 91       	pop	r29
   11972:	1f 91       	pop	r17
   11974:	0f 91       	pop	r16
   11976:	ff 90       	pop	r15
   11978:	ef 90       	pop	r14
   1197a:	df 90       	pop	r13
   1197c:	cf 90       	pop	r12
   1197e:	bf 90       	pop	r11
   11980:	af 90       	pop	r10
   11982:	08 95       	ret

00011984 <sendMessage28>:
    uart_print(1, 0,strSend);
	UpdateCardID();
	sprintf_P(strSend,PSTR("%s%sF968CFFB"),strFIP_ID,strCardID);
    uart_print(1, 0,strSend);
	uart(1, 1,0x02);
	*/IFTSendMessage(MSG_28);
   11984:	88 e2       	ldi	r24, 0x28	; 40
   11986:	0e 94 22 7a 	call	0xf444	; 0xf444 <IFTSendMessage>
}
   1198a:	08 95       	ret

0001198c <FMenuReprint>:
	       break;
	 }
return Result;
}

char FMenuReprint(){
   1198c:	0f 93       	push	r16
   1198e:	1f 93       	push	r17
   11990:	df 93       	push	r29
   11992:	cf 93       	push	r28
   11994:	cd b7       	in	r28, 0x3d	; 61
   11996:	de b7       	in	r29, 0x3e	; 62
   11998:	64 97       	sbiw	r28, 0x14	; 20
   1199a:	0f b6       	in	r0, 0x3f	; 63
   1199c:	f8 94       	cli
   1199e:	de bf       	out	0x3e, r29	; 62
   119a0:	0f be       	out	0x3f, r0	; 63
   119a2:	cd bf       	out	0x3d, r28	; 61
static char KeyPressed=0,FIP_Used=0;
       char lcdteks[20],FIPResult,KeyChar;//,FIP_USED;
	   char PassResult,Result=MENU_NONE,ReprintResult;

     Result=MENU_NONE;
	 switch(stReprint){
   119a4:	80 91 68 02 	lds	r24, 0x0268
   119a8:	87 30       	cpi	r24, 0x07	; 7
   119aa:	09 f4       	brne	.+2      	; 0x119ae <FMenuReprint+0x22>
   119ac:	9b c0       	rjmp	.+310    	; 0x11ae4 <FMenuReprint+0x158>
   119ae:	88 30       	cpi	r24, 0x08	; 8
   119b0:	90 f4       	brcc	.+36     	; 0x119d6 <FMenuReprint+0x4a>
   119b2:	83 30       	cpi	r24, 0x03	; 3
   119b4:	09 f4       	brne	.+2      	; 0x119b8 <FMenuReprint+0x2c>
   119b6:	43 c0       	rjmp	.+134    	; 0x11a3e <FMenuReprint+0xb2>
   119b8:	84 30       	cpi	r24, 0x04	; 4
   119ba:	30 f4       	brcc	.+12     	; 0x119c8 <FMenuReprint+0x3c>
   119bc:	81 30       	cpi	r24, 0x01	; 1
   119be:	09 f4       	brne	.+2      	; 0x119c2 <FMenuReprint+0x36>
   119c0:	52 c0       	rjmp	.+164    	; 0x11a66 <FMenuReprint+0xda>
   119c2:	82 30       	cpi	r24, 0x02	; 2
   119c4:	48 f5       	brcc	.+82     	; 0x11a18 <FMenuReprint+0x8c>
   119c6:	1d c0       	rjmp	.+58     	; 0x11a02 <FMenuReprint+0x76>
   119c8:	85 30       	cpi	r24, 0x05	; 5
   119ca:	09 f4       	brne	.+2      	; 0x119ce <FMenuReprint+0x42>
   119cc:	7c c0       	rjmp	.+248    	; 0x11ac6 <FMenuReprint+0x13a>
   119ce:	86 30       	cpi	r24, 0x06	; 6
   119d0:	08 f0       	brcs	.+2      	; 0x119d4 <FMenuReprint+0x48>
   119d2:	4d c0       	rjmp	.+154    	; 0x11a6e <FMenuReprint+0xe2>
   119d4:	42 c0       	rjmp	.+132    	; 0x11a5a <FMenuReprint+0xce>
   119d6:	8b 30       	cpi	r24, 0x0B	; 11
   119d8:	09 f4       	brne	.+2      	; 0x119dc <FMenuReprint+0x50>
   119da:	e5 c0       	rjmp	.+458    	; 0x11ba6 <FMenuReprint+0x21a>
   119dc:	8c 30       	cpi	r24, 0x0C	; 12
   119de:	38 f4       	brcc	.+14     	; 0x119ee <FMenuReprint+0x62>
   119e0:	89 30       	cpi	r24, 0x09	; 9
   119e2:	09 f4       	brne	.+2      	; 0x119e6 <FMenuReprint+0x5a>
   119e4:	c5 c0       	rjmp	.+394    	; 0x11b70 <FMenuReprint+0x1e4>
   119e6:	8a 30       	cpi	r24, 0x0A	; 10
   119e8:	08 f0       	brcs	.+2      	; 0x119ec <FMenuReprint+0x60>
   119ea:	d7 c0       	rjmp	.+430    	; 0x11b9a <FMenuReprint+0x20e>
   119ec:	89 c0       	rjmp	.+274    	; 0x11b00 <FMenuReprint+0x174>
   119ee:	8d 30       	cpi	r24, 0x0D	; 13
   119f0:	09 f4       	brne	.+2      	; 0x119f4 <FMenuReprint+0x68>
   119f2:	f6 c0       	rjmp	.+492    	; 0x11be0 <FMenuReprint+0x254>
   119f4:	8d 30       	cpi	r24, 0x0D	; 13
   119f6:	08 f4       	brcc	.+2      	; 0x119fa <FMenuReprint+0x6e>
   119f8:	e0 c0       	rjmp	.+448    	; 0x11bba <FMenuReprint+0x22e>
   119fa:	8e 30       	cpi	r24, 0x0E	; 14
   119fc:	09 f0       	breq	.+2      	; 0x11a00 <FMenuReprint+0x74>
   119fe:	f9 c0       	rjmp	.+498    	; 0x11bf2 <FMenuReprint+0x266>
   11a00:	f4 c0       	rjmp	.+488    	; 0x11bea <FMenuReprint+0x25e>
	 case rtInit:
	      lcd_clear();
   11a02:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
          if (IFType==IT_SLAVE)stReprint=rtFIP;
   11a06:	80 91 00 01 	lds	r24, 0x0100
   11a0a:	81 30       	cpi	r24, 0x01	; 1
   11a0c:	09 f4       	brne	.+2      	; 0x11a10 <FMenuReprint+0x84>
   11a0e:	c0 c0       	rjmp	.+384    	; 0x11b90 <FMenuReprint+0x204>
		  else
		  if (IFType==IT_STANDALONE)stReprint=rtStandaloneFIP;//rtValidPassword;//rtStandaloneFIP;
   11a10:	82 30       	cpi	r24, 0x02	; 2
   11a12:	09 f0       	breq	.+2      	; 0x11a16 <FMenuReprint+0x8a>
   11a14:	ee c0       	rjmp	.+476    	; 0x11bf2 <FMenuReprint+0x266>
   11a16:	04 c0       	rjmp	.+8      	; 0x11a20 <FMenuReprint+0x94>
	      break;
     case rtValidPassword:
	      PassResult=FMenuPassword();
   11a18:	0e 94 85 76 	call	0xed0a	; 0xed0a <FMenuPassword>
	      if (PassResult==MP_VALID_ADMIN)stReprint=rtStandaloneFIP;
   11a1c:	84 30       	cpi	r24, 0x04	; 4
   11a1e:	11 f4       	brne	.+4      	; 0x11a24 <FMenuReprint+0x98>
   11a20:	81 e0       	ldi	r24, 0x01	; 1
   11a22:	0a c0       	rjmp	.+20     	; 0x11a38 <FMenuReprint+0xac>
		  else
	      if (PassResult==MP_VALID_SYSTEM)stReprint=rtInvalidPassword;
   11a24:	85 30       	cpi	r24, 0x05	; 5
   11a26:	11 f0       	breq	.+4      	; 0x11a2c <FMenuReprint+0xa0>
          else
	      if (PassResult==MP_INVALID)stReprint=rtInvalidPassword;
   11a28:	82 30       	cpi	r24, 0x02	; 2
   11a2a:	11 f4       	brne	.+4      	; 0x11a30 <FMenuReprint+0xa4>
   11a2c:	83 e0       	ldi	r24, 0x03	; 3
   11a2e:	04 c0       	rjmp	.+8      	; 0x11a38 <FMenuReprint+0xac>
		  else
	      if (PassResult==MP_CANCEL)stReprint=rtExitReprint;
   11a30:	81 30       	cpi	r24, 0x01	; 1
   11a32:	09 f0       	breq	.+2      	; 0x11a36 <FMenuReprint+0xaa>
   11a34:	de c0       	rjmp	.+444    	; 0x11bf2 <FMenuReprint+0x266>
   11a36:	8e e0       	ldi	r24, 0x0E	; 14
   11a38:	80 93 68 02 	sts	0x0268, r24
   11a3c:	da c0       	rjmp	.+436    	; 0x11bf2 <FMenuReprint+0x266>
	      break;
     case rtInvalidPassword:
          TimDisplay=0;
   11a3e:	10 92 92 01 	sts	0x0192, r1
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   11a42:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   11a44:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   11a46:	81 e0       	ldi	r24, 0x01	; 1
   11a48:	80 93 bc 01 	sts	0x01BC, r24
	      if (PassResult==MP_CANCEL)stReprint=rtExitReprint;
	      break;
     case rtInvalidPassword:
          TimDisplay=0;
		  system_beep(1);
		  lcd_printf(3,1,PSTR("Access Denied"));
   11a4c:	83 e0       	ldi	r24, 0x03	; 3
   11a4e:	61 e0       	ldi	r22, 0x01	; 1
   11a50:	4b ec       	ldi	r20, 0xCB	; 203
   11a52:	5d e1       	ldi	r21, 0x1D	; 29
   11a54:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
   11a58:	43 c0       	rjmp	.+134    	; 0x11ae0 <FMenuReprint+0x154>
          stReprint=rtTimDisplayInvalid;
	      break;
     case rtTimDisplayInvalid:
	      if (TimDisplay>2)stReprint=rtExitReprint;
   11a5a:	80 91 92 01 	lds	r24, 0x0192
   11a5e:	83 30       	cpi	r24, 0x03	; 3
   11a60:	08 f4       	brcc	.+2      	; 0x11a64 <FMenuReprint+0xd8>
   11a62:	c7 c0       	rjmp	.+398    	; 0x11bf2 <FMenuReprint+0x266>
   11a64:	e8 cf       	rjmp	.-48     	; 0x11a36 <FMenuReprint+0xaa>
	      break;
     case rtStandaloneFIP:
	      _scr_pump();
   11a66:	0e 94 c1 47 	call	0x8f82	; 0x8f82 <_scr_pump>
		  stReprint=rtStandaloneInputFIP;
   11a6a:	86 e0       	ldi	r24, 0x06	; 6
   11a6c:	e5 cf       	rjmp	.-54     	; 0x11a38 <FMenuReprint+0xac>
	      break;
     case rtStandaloneInputFIP:
		  KeyChar=_key_btn(_key_scan(1));
   11a6e:	81 e0       	ldi	r24, 0x01	; 1
   11a70:	0e 94 58 a6 	call	0x14cb0	; 0x14cb0 <_key_scan>
   11a74:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <_key_btn>
   11a78:	98 2f       	mov	r25, r24
		  if ((KeyChar>='1')&&(KeyChar<='8')){
   11a7a:	81 53       	subi	r24, 0x31	; 49
   11a7c:	88 30       	cpi	r24, 0x08	; 8
   11a7e:	f8 f4       	brcc	.+62     	; 0x11abe <FMenuReprint+0x132>
		       SendPoolingCommand(SC_TRANSACTION,GetPumpID(KeyChar-'0'));
   11a80:	09 2f       	mov	r16, r25
   11a82:	00 53       	subi	r16, 0x30	; 48
   11a84:	80 2f       	mov	r24, r16
   11a86:	0e 94 87 20 	call	0x410e	; 0x410e <GetPumpID>
		 }		 
	 }
}

void SendPoolingCommand(char plCmd,char plMsg){
	 PoolCmd=plCmd;
   11a8a:	94 e0       	ldi	r25, 0x04	; 4
   11a8c:	90 93 29 06 	sts	0x0629, r25
	 PoolMsg=plMsg;
   11a90:	80 93 55 0c 	sts	0x0C55, r24
     IsControlPooling=True;
   11a94:	81 e0       	ldi	r24, 0x01	; 1
   11a96:	80 93 84 01 	sts	0x0184, r24
	      break;
     case rtStandaloneInputFIP:
		  KeyChar=_key_btn(_key_scan(1));
		  if ((KeyChar>='1')&&(KeyChar<='8')){
		       SendPoolingCommand(SC_TRANSACTION,GetPumpID(KeyChar-'0'));
			   TimSend=0;
   11a9a:	10 92 fa 0c 	sts	0x0CFA, r1
			   while(TimSend<6){};
   11a9e:	80 91 fa 0c 	lds	r24, 0x0CFA
   11aa2:	86 30       	cpi	r24, 0x06	; 6
   11aa4:	e0 f3       	brcs	.-8      	; 0x11a9e <FMenuReprint+0x112>
		       ReprintResult=PrintStandalone(KeyChar-'0',True);
   11aa6:	80 2f       	mov	r24, r16
   11aa8:	61 e0       	ldi	r22, 0x01	; 1
   11aaa:	0e 94 2b 45 	call	0x8a56	; 0x8a56 <PrintStandalone>
			   if (ReprintResult==PS_NO_DATA)stReprint=rtDisplayNoTransaction;
   11aae:	82 31       	cpi	r24, 0x12	; 18
   11ab0:	11 f4       	brne	.+4      	; 0x11ab6 <FMenuReprint+0x12a>
   11ab2:	85 e0       	ldi	r24, 0x05	; 5
   11ab4:	c1 cf       	rjmp	.-126    	; 0x11a38 <FMenuReprint+0xac>
			   else if (ReprintResult==PS_PRINTED)stReprint=rtExitReprint;               
   11ab6:	81 31       	cpi	r24, 0x11	; 17
   11ab8:	09 f0       	breq	.+2      	; 0x11abc <FMenuReprint+0x130>
   11aba:	9b c0       	rjmp	.+310    	; 0x11bf2 <FMenuReprint+0x266>
   11abc:	bc cf       	rjmp	.-136    	; 0x11a36 <FMenuReprint+0xaa>
			   //stReprint=rtExitReprint;
		  }else if (KeyChar=='*')stReprint=rtExitReprint;
   11abe:	9a 32       	cpi	r25, 0x2A	; 42
   11ac0:	09 f0       	breq	.+2      	; 0x11ac4 <FMenuReprint+0x138>
   11ac2:	97 c0       	rjmp	.+302    	; 0x11bf2 <FMenuReprint+0x266>
   11ac4:	b8 cf       	rjmp	.-144    	; 0x11a36 <FMenuReprint+0xaa>
	      break;
     case rtDisplayNoTransaction:
	      lcd_printf(3, 1,PSTR("Tidak Ada Transaksi "));
   11ac6:	83 e0       	ldi	r24, 0x03	; 3
   11ac8:	61 e0       	ldi	r22, 0x01	; 1
   11aca:	46 eb       	ldi	r20, 0xB6	; 182
   11acc:	5d e1       	ldi	r21, 0x1D	; 29
   11ace:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   11ad2:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   11ad4:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   11ad6:	81 e0       	ldi	r24, 0x01	; 1
   11ad8:	80 93 bc 01 	sts	0x01BC, r24
		  }else if (KeyChar=='*')stReprint=rtExitReprint;
	      break;
     case rtDisplayNoTransaction:
	      lcd_printf(3, 1,PSTR("Tidak Ada Transaksi "));
		  system_beep(1);
          TimDisplay=0;
   11adc:	10 92 92 01 	sts	0x0192, r1
		  stReprint=rtTimDisplayInvalid;
   11ae0:	84 e0       	ldi	r24, 0x04	; 4
   11ae2:	aa cf       	rjmp	.-172    	; 0x11a38 <FMenuReprint+0xac>
	      break;
	 case rtFIP:
	      FIPResult=menu_FIP(&FIP_Used,strFIP_ID);
   11ae4:	86 e6       	ldi	r24, 0x66	; 102
   11ae6:	92 e0       	ldi	r25, 0x02	; 2
   11ae8:	6b e3       	ldi	r22, 0x3B	; 59
   11aea:	78 e0       	ldi	r23, 0x08	; 8
   11aec:	0e 94 28 55 	call	0xaa50	; 0xaa50 <menu_FIP>
		  if (FIPResult==FIP_DONE){
   11af0:	88 23       	and	r24, r24
   11af2:	11 f4       	brne	.+4      	; 0x11af8 <FMenuReprint+0x16c>
		      stReprint=rtRFID;
   11af4:	88 e0       	ldi	r24, 0x08	; 8
   11af6:	a0 cf       	rjmp	.-192    	; 0x11a38 <FMenuReprint+0xac>
			  }
		  else
		  if (FIPResult==FIP_CANCEL)stReprint=rtExitReprint;
   11af8:	82 30       	cpi	r24, 0x02	; 2
   11afa:	09 f0       	breq	.+2      	; 0x11afe <FMenuReprint+0x172>
   11afc:	7a c0       	rjmp	.+244    	; 0x11bf2 <FMenuReprint+0x266>
   11afe:	9b cf       	rjmp	.-202    	; 0x11a36 <FMenuReprint+0xaa>
	      break;
	 case rtRFID:
	      lcd_clear();
   11b00:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
		  sprintf_P(lcdteks,PSTR("RePrint FIP:%s "),strFIP_ID);lcd_print(1,1,lcdteks);
   11b04:	00 d0       	rcall	.+0      	; 0x11b06 <FMenuReprint+0x17a>
   11b06:	00 d0       	rcall	.+0      	; 0x11b08 <FMenuReprint+0x17c>
   11b08:	00 d0       	rcall	.+0      	; 0x11b0a <FMenuReprint+0x17e>
   11b0a:	ed b7       	in	r30, 0x3d	; 61
   11b0c:	fe b7       	in	r31, 0x3e	; 62
   11b0e:	31 96       	adiw	r30, 0x01	; 1
   11b10:	8e 01       	movw	r16, r28
   11b12:	0f 5f       	subi	r16, 0xFF	; 255
   11b14:	1f 4f       	sbci	r17, 0xFF	; 255
   11b16:	ad b7       	in	r26, 0x3d	; 61
   11b18:	be b7       	in	r27, 0x3e	; 62
   11b1a:	12 96       	adiw	r26, 0x02	; 2
   11b1c:	1c 93       	st	X, r17
   11b1e:	0e 93       	st	-X, r16
   11b20:	11 97       	sbiw	r26, 0x01	; 1
   11b22:	86 ea       	ldi	r24, 0xA6	; 166
   11b24:	9d e1       	ldi	r25, 0x1D	; 29
   11b26:	93 83       	std	Z+3, r25	; 0x03
   11b28:	82 83       	std	Z+2, r24	; 0x02
   11b2a:	8b e3       	ldi	r24, 0x3B	; 59
   11b2c:	98 e0       	ldi	r25, 0x08	; 8
   11b2e:	95 83       	std	Z+5, r25	; 0x05
   11b30:	84 83       	std	Z+4, r24	; 0x04
   11b32:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
   11b36:	8d b7       	in	r24, 0x3d	; 61
   11b38:	9e b7       	in	r25, 0x3e	; 62
   11b3a:	06 96       	adiw	r24, 0x06	; 6
   11b3c:	0f b6       	in	r0, 0x3f	; 63
   11b3e:	f8 94       	cli
   11b40:	9e bf       	out	0x3e, r25	; 62
   11b42:	0f be       	out	0x3f, r0	; 63
   11b44:	8d bf       	out	0x3d, r24	; 61
   11b46:	81 e0       	ldi	r24, 0x01	; 1
   11b48:	61 e0       	ldi	r22, 0x01	; 1
   11b4a:	a8 01       	movw	r20, r16
   11b4c:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
		  lcd_printf(2,1,PSTR(  "Tap Supervisor Card"));
   11b50:	82 e0       	ldi	r24, 0x02	; 2
   11b52:	61 e0       	ldi	r22, 0x01	; 1
   11b54:	42 e9       	ldi	r20, 0x92	; 146
   11b56:	5d e1       	ldi	r21, 0x1D	; 29
   11b58:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
          lcd_printf(4,1,PSTR(  "[*]Back    [#]Exit"));
   11b5c:	84 e0       	ldi	r24, 0x04	; 4
   11b5e:	61 e0       	ldi	r22, 0x01	; 1
   11b60:	4f e7       	ldi	r20, 0x7F	; 127
   11b62:	5d e1       	ldi	r21, 0x1D	; 29
   11b64:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  IsRFIDDetected=False;
   11b68:	10 92 98 01 	sts	0x0198, r1
		  stReprint=rtInputRFID;
   11b6c:	89 e0       	ldi	r24, 0x09	; 9
   11b6e:	64 cf       	rjmp	.-312    	; 0x11a38 <FMenuReprint+0xac>
	      break;
	 case rtInputRFID:
	      if (IsRFIDDetected==True){
   11b70:	80 91 98 01 	lds	r24, 0x0198
   11b74:	81 30       	cpi	r24, 0x01	; 1
   11b76:	29 f4       	brne	.+10     	; 0x11b82 <FMenuReprint+0x1f6>
		      IsRFIDDetected=False;
   11b78:	10 92 98 01 	sts	0x0198, r1
		      stReprint=rtSendMessage28;
   11b7c:	8a e0       	ldi	r24, 0x0A	; 10
   11b7e:	80 93 68 02 	sts	0x0268, r24
		  }
	 	  KeyPressed=_key_scan(1);
   11b82:	81 e0       	ldi	r24, 0x01	; 1
   11b84:	0e 94 58 a6 	call	0x14cb0	; 0x14cb0 <_key_scan>
   11b88:	80 93 67 02 	sts	0x0267, r24
		  if (KeyPressed==_KEY_CANCEL){
   11b8c:	87 3e       	cpi	r24, 0xE7	; 231
   11b8e:	11 f4       	brne	.+4      	; 0x11b94 <FMenuReprint+0x208>
		      stReprint=rtFIP;
   11b90:	87 e0       	ldi	r24, 0x07	; 7
   11b92:	52 cf       	rjmp	.-348    	; 0x11a38 <FMenuReprint+0xac>
			  }
		  else
		  if (KeyPressed==_KEY_ENTER)stReprint=rtExitReprint;
   11b94:	87 3b       	cpi	r24, 0xB7	; 183
   11b96:	69 f5       	brne	.+90     	; 0x11bf2 <FMenuReprint+0x266>
   11b98:	4e cf       	rjmp	.-356    	; 0x11a36 <FMenuReprint+0xaa>
	      break;
     case rtSendMessage28:
		  sendMessage28();
   11b9a:	0e 94 c2 8c 	call	0x11984	; 0x11984 <sendMessage28>
		  TimSend=0;
   11b9e:	10 92 fa 0c 	sts	0x0CFA, r1
		  stReprint=rtWaitReply;
   11ba2:	8b e0       	ldi	r24, 0x0B	; 11
   11ba4:	49 cf       	rjmp	.-366    	; 0x11a38 <FMenuReprint+0xac>
		  break;
     case rtWaitReply:
	      if (TimSend>TIM_SEND*3)stReprint=rtNoConnection;
   11ba6:	80 91 fa 0c 	lds	r24, 0x0CFA
   11baa:	8f 31       	cpi	r24, 0x1F	; 31
   11bac:	18 f0       	brcs	.+6      	; 0x11bb4 <FMenuReprint+0x228>
   11bae:	8c e0       	ldi	r24, 0x0C	; 12
   11bb0:	80 93 68 02 	sts	0x0268, r24
	      if (IsMessage99==True){
   11bb4:	80 91 9f 01 	lds	r24, 0x019F
   11bb8:	3b cf       	rjmp	.-394    	; 0x11a30 <FMenuReprint+0xa4>
		      stReprint=rtExitReprint;
		  }
	      break;
     case rtNoConnection:
	      lcd_clear();
   11bba:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
		  lcd_printf(2,1,PSTR("TCP/IP ERROR "));
   11bbe:	82 e0       	ldi	r24, 0x02	; 2
   11bc0:	61 e0       	ldi	r22, 0x01	; 1
   11bc2:	41 e7       	ldi	r20, 0x71	; 113
   11bc4:	5d e1       	ldi	r21, 0x1D	; 29
   11bc6:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  lcd_printf(3,1,PSTR("No Connection"));
   11bca:	83 e0       	ldi	r24, 0x03	; 3
   11bcc:	61 e0       	ldi	r22, 0x01	; 1
   11bce:	43 e6       	ldi	r20, 0x63	; 99
   11bd0:	5d e1       	ldi	r21, 0x1D	; 29
   11bd2:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  TimDisplay=5;
   11bd6:	85 e0       	ldi	r24, 0x05	; 5
   11bd8:	80 93 92 01 	sts	0x0192, r24
		  stReprint=rtDelayExitReprint;
   11bdc:	8d e0       	ldi	r24, 0x0D	; 13
   11bde:	2c cf       	rjmp	.-424    	; 0x11a38 <FMenuReprint+0xac>
	      break;
     case rtDelayExitReprint:
	      if(TimDisplay>=10)stReprint=rtExitReprint;
   11be0:	80 91 92 01 	lds	r24, 0x0192
   11be4:	8a 30       	cpi	r24, 0x0A	; 10
   11be6:	28 f0       	brcs	.+10     	; 0x11bf2 <FMenuReprint+0x266>
   11be8:	26 cf       	rjmp	.-436    	; 0x11a36 <FMenuReprint+0xaa>
	      break;
	 case rtExitReprint:
	      stReprint=rtInit;
   11bea:	10 92 68 02 	sts	0x0268, r1
   11bee:	81 e0       	ldi	r24, 0x01	; 1
   11bf0:	01 c0       	rjmp	.+2      	; 0x11bf4 <FMenuReprint+0x268>
   11bf2:	80 e0       	ldi	r24, 0x00	; 0
		  Result=MENU_DONE;
	      break;
	 }
  return Result;
}
   11bf4:	64 96       	adiw	r28, 0x14	; 20
   11bf6:	0f b6       	in	r0, 0x3f	; 63
   11bf8:	f8 94       	cli
   11bfa:	de bf       	out	0x3e, r29	; 62
   11bfc:	0f be       	out	0x3f, r0	; 63
   11bfe:	cd bf       	out	0x3d, r28	; 61
   11c00:	cf 91       	pop	r28
   11c02:	df 91       	pop	r29
   11c04:	1f 91       	pop	r17
   11c06:	0f 91       	pop	r16
   11c08:	08 95       	ret

00011c0a <FMenuAdmin>:

char FMenuAdmin(){
static char stMenuAdmin=maInitAdmin;
	 char SubMenu,KeyPressed,KeyChar,Result=MENU_NONE;
     
	 switch(stMenuAdmin){
   11c0a:	80 91 4b 02 	lds	r24, 0x024B
   11c0e:	83 30       	cpi	r24, 0x03	; 3
   11c10:	09 f4       	brne	.+2      	; 0x11c14 <FMenuAdmin+0xa>
   11c12:	66 c0       	rjmp	.+204    	; 0x11ce0 <FMenuAdmin+0xd6>
   11c14:	84 30       	cpi	r24, 0x04	; 4
   11c16:	30 f4       	brcc	.+12     	; 0x11c24 <FMenuAdmin+0x1a>
   11c18:	81 30       	cpi	r24, 0x01	; 1
   11c1a:	69 f1       	breq	.+90     	; 0x11c76 <FMenuAdmin+0x6c>
   11c1c:	82 30       	cpi	r24, 0x02	; 2
   11c1e:	08 f0       	brcs	.+2      	; 0x11c22 <FMenuAdmin+0x18>
   11c20:	4d c0       	rjmp	.+154    	; 0x11cbc <FMenuAdmin+0xb2>
   11c22:	0d c0       	rjmp	.+26     	; 0x11c3e <FMenuAdmin+0x34>
   11c24:	85 30       	cpi	r24, 0x05	; 5
   11c26:	09 f4       	brne	.+2      	; 0x11c2a <FMenuAdmin+0x20>
   11c28:	4e c0       	rjmp	.+156    	; 0x11cc6 <FMenuAdmin+0xbc>
   11c2a:	85 30       	cpi	r24, 0x05	; 5
   11c2c:	08 f4       	brcc	.+2      	; 0x11c30 <FMenuAdmin+0x26>
   11c2e:	49 c0       	rjmp	.+146    	; 0x11cc2 <FMenuAdmin+0xb8>
   11c30:	86 30       	cpi	r24, 0x06	; 6
   11c32:	09 f4       	brne	.+2      	; 0x11c36 <FMenuAdmin+0x2c>
   11c34:	51 c0       	rjmp	.+162    	; 0x11cd8 <FMenuAdmin+0xce>
   11c36:	87 30       	cpi	r24, 0x07	; 7
   11c38:	09 f0       	breq	.+2      	; 0x11c3c <FMenuAdmin+0x32>
   11c3a:	5a c0       	rjmp	.+180    	; 0x11cf0 <FMenuAdmin+0xe6>
   11c3c:	55 c0       	rjmp	.+170    	; 0x11ce8 <FMenuAdmin+0xde>
	 case maInitAdmin:
		  lcd_clear();
   11c3e:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
		  lcd_printf(1,1,PSTR("1)RePrint           "));
   11c42:	81 e0       	ldi	r24, 0x01	; 1
   11c44:	61 e0       	ldi	r22, 0x01	; 1
   11c46:	42 eb       	ldi	r20, 0xB2	; 178
   11c48:	57 e1       	ldi	r21, 0x17	; 23
   11c4a:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  lcd_printf(2,1,PSTR("2)CloseShift        "));
   11c4e:	82 e0       	ldi	r24, 0x02	; 2
   11c50:	61 e0       	ldi	r22, 0x01	; 1
   11c52:	4d e9       	ldi	r20, 0x9D	; 157
   11c54:	57 e1       	ldi	r21, 0x17	; 23
   11c56:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  lcd_printf(3,1,PSTR("3)CloseDay          "));		  
   11c5a:	83 e0       	ldi	r24, 0x03	; 3
   11c5c:	61 e0       	ldi	r22, 0x01	; 1
   11c5e:	48 e8       	ldi	r20, 0x88	; 136
   11c60:	57 e1       	ldi	r21, 0x17	; 23
   11c62:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  lcd_printf(4,1,PSTR("4)Settings   *)Exit "));
   11c66:	84 e0       	ldi	r24, 0x04	; 4
   11c68:	61 e0       	ldi	r22, 0x01	; 1
   11c6a:	43 e7       	ldi	r20, 0x73	; 115
   11c6c:	57 e1       	ldi	r21, 0x17	; 23
   11c6e:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
	      stMenuAdmin=maSelectOptions;
   11c72:	81 e0       	ldi	r24, 0x01	; 1
   11c74:	2e c0       	rjmp	.+92     	; 0x11cd2 <FMenuAdmin+0xc8>
	      break;
	 case maSelectOptions:
          KeyPressed=_key_scan(1);
   11c76:	81 e0       	ldi	r24, 0x01	; 1
   11c78:	0e 94 58 a6 	call	0x14cb0	; 0x14cb0 <_key_scan>
		  KeyChar=_key_btn(KeyPressed);
   11c7c:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <_key_btn>
		  switch (KeyChar){
   11c80:	82 33       	cpi	r24, 0x32	; 50
   11c82:	71 f0       	breq	.+28     	; 0x11ca0 <FMenuAdmin+0x96>
   11c84:	83 33       	cpi	r24, 0x33	; 51
   11c86:	28 f4       	brcc	.+10     	; 0x11c92 <FMenuAdmin+0x88>
   11c88:	8a 32       	cpi	r24, 0x2A	; 42
   11c8a:	11 f1       	breq	.+68     	; 0x11cd0 <FMenuAdmin+0xc6>
   11c8c:	81 33       	cpi	r24, 0x31	; 49
   11c8e:	81 f5       	brne	.+96     	; 0x11cf0 <FMenuAdmin+0xe6>
   11c90:	05 c0       	rjmp	.+10     	; 0x11c9c <FMenuAdmin+0x92>
   11c92:	83 33       	cpi	r24, 0x33	; 51
   11c94:	59 f0       	breq	.+22     	; 0x11cac <FMenuAdmin+0xa2>
   11c96:	84 33       	cpi	r24, 0x34	; 52
   11c98:	59 f5       	brne	.+86     	; 0x11cf0 <FMenuAdmin+0xe6>
   11c9a:	0e c0       	rjmp	.+28     	; 0x11cb8 <FMenuAdmin+0xae>
		  case '1':
		       stMenuAdmin=maMenuReprint;//maMenuAdminConfig;
   11c9c:	82 e0       	ldi	r24, 0x02	; 2
   11c9e:	19 c0       	rjmp	.+50     	; 0x11cd2 <FMenuAdmin+0xc8>
		       break;  
		  case '2':
		       if (IFType==IT_STANDALONE)
   11ca0:	80 91 00 01 	lds	r24, 0x0100
   11ca4:	82 30       	cpi	r24, 0x02	; 2
   11ca6:	e1 f4       	brne	.+56     	; 0x11ce0 <FMenuAdmin+0xd6>
			       stMenuAdmin=maMenuCloseShift;
   11ca8:	84 e0       	ldi	r24, 0x04	; 4
   11caa:	13 c0       	rjmp	.+38     	; 0x11cd2 <FMenuAdmin+0xc8>
               else stMenuAdmin=maInitAdmin;
		       break;  
		  case '3':
		       if (IFType==IT_STANDALONE)stMenuAdmin=maMenuCloseDay;
   11cac:	80 91 00 01 	lds	r24, 0x0100
   11cb0:	82 30       	cpi	r24, 0x02	; 2
   11cb2:	b1 f4       	brne	.+44     	; 0x11ce0 <FMenuAdmin+0xd6>
   11cb4:	85 e0       	ldi	r24, 0x05	; 5
   11cb6:	0d c0       	rjmp	.+26     	; 0x11cd2 <FMenuAdmin+0xc8>
               else stMenuAdmin=maInitAdmin;
		       break;  
		  case '4':
		  	   stMenuAdmin=maMenuAdminSettings;
   11cb8:	86 e0       	ldi	r24, 0x06	; 6
   11cba:	0b c0       	rjmp	.+22     	; 0x11cd2 <FMenuAdmin+0xc8>
    		   stMenuAdmin=maExitMenuAdmin;
		       break;  		  
		  }		  
	      break;
     case maMenuReprint:
	      SubMenu=FMenuReprint();
   11cbc:	0e 94 c6 8c 	call	0x1198c	; 0x1198c <FMenuReprint>
   11cc0:	05 c0       	rjmp	.+10     	; 0x11ccc <FMenuAdmin+0xc2>
	 case maMenuAdminConfig://ChangePassword[],RePrint,PumpTest
	      SubMenu=FSubMenuAdmin();
		  if (SubMenu==MENU_DONE)stMenuAdmin=maInitAdmin;
          break;	 
	 case maMenuCloseShift:
	 	  SubMenu=FCloseShift(CONTINUE_SHIFT);
   11cc2:	82 e0       	ldi	r24, 0x02	; 2
   11cc4:	01 c0       	rjmp	.+2      	; 0x11cc8 <FMenuAdmin+0xbe>
		  if (SubMenu==MENU_DONE)stMenuAdmin=maExitMenuAdmin;
	      break;
     case maMenuCloseDay://maMenuCloseShift,maMenuCloseDay
	 	  SubMenu=FCloseShift(NEW_SHIFT);
   11cc6:	81 e0       	ldi	r24, 0x01	; 1
   11cc8:	0e 94 f5 49 	call	0x93ea	; 0x93ea <FCloseShift>
		  if (SubMenu==MENU_DONE)stMenuAdmin=maExitMenuAdmin;
   11ccc:	81 30       	cpi	r24, 0x01	; 1
   11cce:	81 f4       	brne	.+32     	; 0x11cf0 <FMenuAdmin+0xe6>
   11cd0:	87 e0       	ldi	r24, 0x07	; 7
   11cd2:	80 93 4b 02 	sts	0x024B, r24
   11cd6:	06 c0       	rjmp	.+12     	; 0x11ce4 <FMenuAdmin+0xda>
	      break;
     case maMenuAdminSettings:
	      SubMenu=FMenuAdminSettings();
   11cd8:	0e 94 fa 72 	call	0xe5f4	; 0xe5f4 <FMenuAdminSettings>
		  if (SubMenu==MENU_DONE)stMenuAdmin=maInitAdmin;	      
   11cdc:	81 30       	cpi	r24, 0x01	; 1
   11cde:	41 f4       	brne	.+16     	; 0x11cf0 <FMenuAdmin+0xe6>
   11ce0:	10 92 4b 02 	sts	0x024B, r1
   11ce4:	80 e0       	ldi	r24, 0x00	; 0
   11ce6:	08 95       	ret
	      break;
     case maExitMenuAdmin:
	      stMenuAdmin=maInitAdmin;	      
   11ce8:	10 92 4b 02 	sts	0x024B, r1
   11cec:	81 e0       	ldi	r24, 0x01	; 1
   11cee:	08 95       	ret
   11cf0:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
          break;	 
	 }
   return Result;
}
   11cf2:	08 95       	ret

00011cf4 <FMenuAuthorization>:


char FMenuAuthorization(){
char Result=MENU_NONE,PassResult=MP_NONE,SubMenu=MENU_NONE;
static char stMenuAuthorization=maInit,PassTry=0;
     switch(stMenuAuthorization){
   11cf4:	80 91 5a 02 	lds	r24, 0x025A
   11cf8:	83 30       	cpi	r24, 0x03	; 3
   11cfa:	51 f1       	breq	.+84     	; 0x11d50 <FMenuAuthorization+0x5c>
   11cfc:	84 30       	cpi	r24, 0x04	; 4
   11cfe:	28 f4       	brcc	.+10     	; 0x11d0a <FMenuAuthorization+0x16>
   11d00:	81 30       	cpi	r24, 0x01	; 1
   11d02:	81 f0       	breq	.+32     	; 0x11d24 <FMenuAuthorization+0x30>
   11d04:	82 30       	cpi	r24, 0x02	; 2
   11d06:	38 f5       	brcc	.+78     	; 0x11d56 <FMenuAuthorization+0x62>
   11d08:	0a c0       	rjmp	.+20     	; 0x11d1e <FMenuAuthorization+0x2a>
   11d0a:	85 30       	cpi	r24, 0x05	; 5
   11d0c:	61 f1       	breq	.+88     	; 0x11d66 <FMenuAuthorization+0x72>
   11d0e:	85 30       	cpi	r24, 0x05	; 5
   11d10:	28 f1       	brcs	.+74     	; 0x11d5c <FMenuAuthorization+0x68>
   11d12:	86 30       	cpi	r24, 0x06	; 6
   11d14:	e1 f1       	breq	.+120    	; 0x11d8e <FMenuAuthorization+0x9a>
   11d16:	87 30       	cpi	r24, 0x07	; 7
   11d18:	09 f0       	breq	.+2      	; 0x11d1c <FMenuAuthorization+0x28>
   11d1a:	4c c0       	rjmp	.+152    	; 0x11db4 <FMenuAuthorization+0xc0>
   11d1c:	47 c0       	rjmp	.+142    	; 0x11dac <FMenuAuthorization+0xb8>
	 case maInit:
	      PassTry=0;
   11d1e:	10 92 59 02 	sts	0x0259, r1
   11d22:	3d c0       	rjmp	.+122    	; 0x11d9e <FMenuAuthorization+0xaa>
		  stMenuAuthorization=maInputPassword;
	      break;
	 case maInputPassword:
	      PassResult=FMenuPassword();
   11d24:	0e 94 85 76 	call	0xed0a	; 0xed0a <FMenuPassword>
		  switch(PassResult){
   11d28:	83 30       	cpi	r24, 0x03	; 3
   11d2a:	e1 f1       	breq	.+120    	; 0x11da4 <FMenuAuthorization+0xb0>
   11d2c:	84 30       	cpi	r24, 0x04	; 4
   11d2e:	28 f4       	brcc	.+10     	; 0x11d3a <FMenuAuthorization+0x46>
   11d30:	81 30       	cpi	r24, 0x01	; 1
   11d32:	b9 f1       	breq	.+110    	; 0x11da2 <FMenuAuthorization+0xae>
   11d34:	82 30       	cpi	r24, 0x02	; 2
   11d36:	f1 f5       	brne	.+124    	; 0x11db4 <FMenuAuthorization+0xc0>
   11d38:	09 c0       	rjmp	.+18     	; 0x11d4c <FMenuAuthorization+0x58>
   11d3a:	84 30       	cpi	r24, 0x04	; 4
   11d3c:	19 f0       	breq	.+6      	; 0x11d44 <FMenuAuthorization+0x50>
   11d3e:	85 30       	cpi	r24, 0x05	; 5
   11d40:	c9 f5       	brne	.+114    	; 0x11db4 <FMenuAuthorization+0xc0>
   11d42:	02 c0       	rjmp	.+4      	; 0x11d48 <FMenuAuthorization+0x54>
		  case MP_VALID_ADMIN:
		       stMenuAuthorization=maMenuAdmin;
   11d44:	82 e0       	ldi	r24, 0x02	; 2
   11d46:	2e c0       	rjmp	.+92     	; 0x11da4 <FMenuAuthorization+0xb0>
		       break;
		  case MP_VALID_SYSTEM:
		       stMenuAuthorization=maMenuSettings;
   11d48:	84 e0       	ldi	r24, 0x04	; 4
   11d4a:	2c c0       	rjmp	.+88     	; 0x11da4 <FMenuAuthorization+0xb0>
		       break;
		  case MP_INVALID:
		       stMenuAuthorization=maInvalidAuthorization;
   11d4c:	85 e0       	ldi	r24, 0x05	; 5
   11d4e:	2a c0       	rjmp	.+84     	; 0x11da4 <FMenuAuthorization+0xb0>
		  else
	      if (PassResult==MP_CANCEL)stMenuAuthorization=maExitAuthorization;
		  */
	      break;
	 case maMenuMaster:
	      SubMenu=FMenuMaster();
   11d50:	0e 94 81 73 	call	0xe702	; 0xe702 <FMenuMaster>
   11d54:	05 c0       	rjmp	.+10     	; 0x11d60 <FMenuAuthorization+0x6c>
		  if (SubMenu==MENU_DONE)stMenuAuthorization=maExitAuthorization;
	      break;
	 case maMenuAdmin:
          SubMenu=FMenuAdmin();
   11d56:	0e 94 05 8e 	call	0x11c0a	; 0x11c0a <FMenuAdmin>
   11d5a:	02 c0       	rjmp	.+4      	; 0x11d60 <FMenuAuthorization+0x6c>
		  if (SubMenu==MENU_DONE)stMenuAuthorization=maExitAuthorization;          
		  break;
	 case maMenuSettings:
	      SubMenu=FMenuSettings();
   11d5c:	0e 94 e0 78 	call	0xf1c0	; 0xf1c0 <FMenuSettings>
		  if (SubMenu==MENU_DONE)stMenuAuthorization=maExitAuthorization;
   11d60:	81 30       	cpi	r24, 0x01	; 1
   11d62:	41 f5       	brne	.+80     	; 0x11db4 <FMenuAuthorization+0xc0>
   11d64:	1e c0       	rjmp	.+60     	; 0x11da2 <FMenuAuthorization+0xae>
          break;	 
	 case maInvalidAuthorization:
	      PassTry++;
   11d66:	80 91 59 02 	lds	r24, 0x0259
   11d6a:	8f 5f       	subi	r24, 0xFF	; 255
   11d6c:	80 93 59 02 	sts	0x0259, r24
	      TimDisplay=0;
   11d70:	10 92 92 01 	sts	0x0192, r1
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   11d74:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   11d76:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   11d78:	81 e0       	ldi	r24, 0x01	; 1
   11d7a:	80 93 bc 01 	sts	0x01BC, r24
          break;	 
	 case maInvalidAuthorization:
	      PassTry++;
	      TimDisplay=0;
		  system_beep(1);
		  lcd_printf(3,1,PSTR("Access Denied"));
   11d7e:	83 e0       	ldi	r24, 0x03	; 3
   11d80:	61 e0       	ldi	r22, 0x01	; 1
   11d82:	4a e6       	ldi	r20, 0x6A	; 106
   11d84:	5a e1       	ldi	r21, 0x1A	; 26
   11d86:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  stMenuAuthorization=maDelayExitAuthorization;
   11d8a:	86 e0       	ldi	r24, 0x06	; 6
   11d8c:	0b c0       	rjmp	.+22     	; 0x11da4 <FMenuAuthorization+0xb0>
          break;	 
	 case maDelayExitAuthorization:
	      if (TimDisplay>2){
   11d8e:	80 91 92 01 	lds	r24, 0x0192
   11d92:	83 30       	cpi	r24, 0x03	; 3
   11d94:	78 f0       	brcs	.+30     	; 0x11db4 <FMenuAuthorization+0xc0>
		      if (PassTry<3)stMenuAuthorization=maInputPassword;
   11d96:	80 91 59 02 	lds	r24, 0x0259
   11d9a:	83 30       	cpi	r24, 0x03	; 3
   11d9c:	10 f4       	brcc	.+4      	; 0x11da2 <FMenuAuthorization+0xae>
   11d9e:	81 e0       	ldi	r24, 0x01	; 1
   11da0:	01 c0       	rjmp	.+2      	; 0x11da4 <FMenuAuthorization+0xb0>
			  else stMenuAuthorization=maExitAuthorization;
   11da2:	87 e0       	ldi	r24, 0x07	; 7
   11da4:	80 93 5a 02 	sts	0x025A, r24
   11da8:	80 e0       	ldi	r24, 0x00	; 0
   11daa:	08 95       	ret
		  }
	      break;
	 case maExitAuthorization:
	      stMenuAuthorization=maInit;
   11dac:	10 92 5a 02 	sts	0x025A, r1
   11db0:	81 e0       	ldi	r24, 0x01	; 1
   11db2:	08 95       	ret
   11db4:	80 e0       	ldi	r24, 0x00	; 0
	      Result=MENU_DONE;
	      break;
	 }
   return Result;	 
}
   11db6:	08 95       	ret

00011db8 <sendMessage24>:
    uart_print(1, 0,strSend);
	UpdateCardID();
	sprintf_P(strSend,PSTR("%s%sF968CFFB"),strCardID,strFIP_ID);
    uart_print(1, 0,strSend);
	uart(1, 1,0x02);
	*/IFTSendMessage(MSG_24);
   11db8:	84 e2       	ldi	r24, 0x24	; 36
   11dba:	0e 94 22 7a 	call	0xf444	; 0xf444 <IFTSendMessage>
}
   11dbe:	08 95       	ret

00011dc0 <sendMessage22>:
    uart_print(1, 0,strSend);
	UpdateCardID();
	sprintf_P(strSend,PSTR("%sF968CFFB"),strCardID);
    uart_print(1, 0,strSend);
	uart(1, 1,0x02);
	*/IFTSendMessage(MSG_22);
   11dc0:	82 e2       	ldi	r24, 0x22	; 34
   11dc2:	0e 94 22 7a 	call	0xf444	; 0xf444 <IFTSendMessage>
}
   11dc6:	08 95       	ret

00011dc8 <FMenuLoyalty>:
	      break;
	 }
  return Result;
}

char FMenuLoyalty(){
   11dc8:	cf 92       	push	r12
   11dca:	df 92       	push	r13
   11dcc:	ef 92       	push	r14
   11dce:	ff 92       	push	r15
   11dd0:	0f 93       	push	r16
   11dd2:	1f 93       	push	r17
   11dd4:	df 93       	push	r29
   11dd6:	cf 93       	push	r28
   11dd8:	cd b7       	in	r28, 0x3d	; 61
   11dda:	de b7       	in	r29, 0x3e	; 62
   11ddc:	64 97       	sbiw	r28, 0x14	; 20
   11dde:	0f b6       	in	r0, 0x3f	; 63
   11de0:	f8 94       	cli
   11de2:	de bf       	out	0x3e, r29	; 62
   11de4:	0f be       	out	0x3f, r0	; 63
   11de6:	cd bf       	out	0x3d, r28	; 61
       char FIPResult,FIP_USED;
	   char Result=MENU_NONE;
	   char KeyPressed=0,KeyChar;

     Result=MENU_NONE;
	 switch(stLoyalty){
   11de8:	00 91 65 02 	lds	r16, 0x0265
   11dec:	07 30       	cpi	r16, 0x07	; 7
   11dee:	09 f4       	brne	.+2      	; 0x11df2 <FMenuLoyalty+0x2a>
   11df0:	04 c1       	rjmp	.+520    	; 0x11ffa <FMenuLoyalty+0x232>
   11df2:	08 30       	cpi	r16, 0x08	; 8
   11df4:	98 f4       	brcc	.+38     	; 0x11e1c <FMenuLoyalty+0x54>
   11df6:	03 30       	cpi	r16, 0x03	; 3
   11df8:	09 f4       	brne	.+2      	; 0x11dfc <FMenuLoyalty+0x34>
   11dfa:	5b c0       	rjmp	.+182    	; 0x11eb2 <FMenuLoyalty+0xea>
   11dfc:	04 30       	cpi	r16, 0x04	; 4
   11dfe:	38 f4       	brcc	.+14     	; 0x11e0e <FMenuLoyalty+0x46>
   11e00:	01 30       	cpi	r16, 0x01	; 1
   11e02:	09 f4       	brne	.+2      	; 0x11e06 <FMenuLoyalty+0x3e>
   11e04:	42 c0       	rjmp	.+132    	; 0x11e8a <FMenuLoyalty+0xc2>
   11e06:	02 30       	cpi	r16, 0x02	; 2
   11e08:	08 f0       	brcs	.+2      	; 0x11e0c <FMenuLoyalty+0x44>
   11e0a:	61 c0       	rjmp	.+194    	; 0x11ece <FMenuLoyalty+0x106>
   11e0c:	20 c0       	rjmp	.+64     	; 0x11e4e <FMenuLoyalty+0x86>
   11e0e:	05 30       	cpi	r16, 0x05	; 5
   11e10:	09 f4       	brne	.+2      	; 0x11e14 <FMenuLoyalty+0x4c>
   11e12:	a2 c0       	rjmp	.+324    	; 0x11f58 <FMenuLoyalty+0x190>
   11e14:	06 30       	cpi	r16, 0x06	; 6
   11e16:	08 f0       	brcs	.+2      	; 0x11e1a <FMenuLoyalty+0x52>
   11e18:	ba c0       	rjmp	.+372    	; 0x11f8e <FMenuLoyalty+0x1c6>
   11e1a:	8c c0       	rjmp	.+280    	; 0x11f34 <FMenuLoyalty+0x16c>
   11e1c:	0b 30       	cpi	r16, 0x0B	; 11
   11e1e:	09 f4       	brne	.+2      	; 0x11e22 <FMenuLoyalty+0x5a>
   11e20:	36 c1       	rjmp	.+620    	; 0x1208e <FMenuLoyalty+0x2c6>
   11e22:	0c 30       	cpi	r16, 0x0C	; 12
   11e24:	38 f4       	brcc	.+14     	; 0x11e34 <FMenuLoyalty+0x6c>
   11e26:	09 30       	cpi	r16, 0x09	; 9
   11e28:	09 f4       	brne	.+2      	; 0x11e2c <FMenuLoyalty+0x64>
   11e2a:	f0 c0       	rjmp	.+480    	; 0x1200c <FMenuLoyalty+0x244>
   11e2c:	0a 30       	cpi	r16, 0x0A	; 10
   11e2e:	08 f0       	brcs	.+2      	; 0x11e32 <FMenuLoyalty+0x6a>
   11e30:	10 c1       	rjmp	.+544    	; 0x12052 <FMenuLoyalty+0x28a>
   11e32:	e6 c0       	rjmp	.+460    	; 0x12000 <FMenuLoyalty+0x238>
   11e34:	0d 30       	cpi	r16, 0x0D	; 13
   11e36:	09 f4       	brne	.+2      	; 0x11e3a <FMenuLoyalty+0x72>
   11e38:	ea c1       	rjmp	.+980    	; 0x1220e <FMenuLoyalty+0x446>
   11e3a:	0d 30       	cpi	r16, 0x0D	; 13
   11e3c:	08 f4       	brcc	.+2      	; 0x11e40 <FMenuLoyalty+0x78>
   11e3e:	f1 c1       	rjmp	.+994    	; 0x12222 <FMenuLoyalty+0x45a>
   11e40:	0e 30       	cpi	r16, 0x0E	; 14
   11e42:	09 f4       	brne	.+2      	; 0x11e46 <FMenuLoyalty+0x7e>
   11e44:	00 c2       	rjmp	.+1024   	; 0x12246 <FMenuLoyalty+0x47e>
   11e46:	0f 30       	cpi	r16, 0x0F	; 15
   11e48:	09 f0       	breq	.+2      	; 0x11e4c <FMenuLoyalty+0x84>
   11e4a:	09 c2       	rjmp	.+1042   	; 0x1225e <FMenuLoyalty+0x496>
   11e4c:	02 c2       	rjmp	.+1028   	; 0x12252 <FMenuLoyalty+0x48a>
	 case mlInit:
	      lcd_clear();
   11e4e:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
		  lcd_printf(1,1,PSTR("  Menu Loyalty   "));
   11e52:	81 e0       	ldi	r24, 0x01	; 1
   11e54:	61 e0       	ldi	r22, 0x01	; 1
   11e56:	41 e5       	ldi	r20, 0x51	; 81
   11e58:	5d e1       	ldi	r21, 0x1D	; 29
   11e5a:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
          lcd_printf(1,1,PSTR("1.Enquiry        "));
   11e5e:	81 e0       	ldi	r24, 0x01	; 1
   11e60:	61 e0       	ldi	r22, 0x01	; 1
   11e62:	4f e3       	ldi	r20, 0x3F	; 63
   11e64:	5d e1       	ldi	r21, 0x1D	; 29
   11e66:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  lcd_printf(2,1,PSTR("2.Loyalty Update "));
   11e6a:	82 e0       	ldi	r24, 0x02	; 2
   11e6c:	61 e0       	ldi	r22, 0x01	; 1
   11e6e:	4d e2       	ldi	r20, 0x2D	; 45
   11e70:	5d e1       	ldi	r21, 0x1D	; 29
   11e72:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
	      lcd_printf(4,1,PSTR("[*]Back          "));
   11e76:	84 e0       	ldi	r24, 0x04	; 4
   11e78:	61 e0       	ldi	r22, 0x01	; 1
   11e7a:	4b e1       	ldi	r20, 0x1B	; 27
   11e7c:	5d e1       	ldi	r21, 0x1D	; 29
   11e7e:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  IsLoyaltyUpdate=False;
   11e82:	10 92 63 02 	sts	0x0263, r1
		  stLoyalty=mlLoyaltySelect;
   11e86:	81 e0       	ldi	r24, 0x01	; 1
   11e88:	08 c0       	rjmp	.+16     	; 0x11e9a <FMenuLoyalty+0xd2>
	      break;
	 case mlLoyaltySelect:
	 	  KeyPressed=_key_scan(1);
   11e8a:	81 e0       	ldi	r24, 0x01	; 1
   11e8c:	0e 94 58 a6 	call	0x14cb0	; 0x14cb0 <_key_scan>
		  if (KeyPressed==_KEY_1){
   11e90:	8e 3e       	cpi	r24, 0xEE	; 238
   11e92:	31 f4       	brne	.+12     	; 0x11ea0 <FMenuLoyalty+0xd8>
		      IsLoyaltyUpdate=False;
   11e94:	10 92 63 02 	sts	0x0263, r1
		      stLoyalty=mlShowEnquiry;
   11e98:	84 e0       	ldi	r24, 0x04	; 4
   11e9a:	80 93 65 02 	sts	0x0265, r24
   11e9e:	df c1       	rjmp	.+958    	; 0x1225e <FMenuLoyalty+0x496>
			  }
		  else
		  if (KeyPressed==_KEY_2){
   11ea0:	8e 3d       	cpi	r24, 0xDE	; 222
   11ea2:	19 f4       	brne	.+6      	; 0x11eaa <FMenuLoyalty+0xe2>
		      IsLoyaltyUpdate=True;
   11ea4:	00 93 63 02 	sts	0x0263, r16
   11ea8:	69 c0       	rjmp	.+210    	; 0x11f7c <FMenuLoyalty+0x1b4>
			  stLoyalty=mlSelectFIP;
			  }
		  if (KeyPressed==_KEY_CANCEL)stLoyalty=mlExitLoyalty;
   11eaa:	87 3e       	cpi	r24, 0xE7	; 231
   11eac:	09 f4       	brne	.+2      	; 0x11eb0 <FMenuLoyalty+0xe8>
   11eae:	cf c1       	rjmp	.+926    	; 0x1224e <FMenuLoyalty+0x486>
   11eb0:	d6 c1       	rjmp	.+940    	; 0x1225e <FMenuLoyalty+0x496>
	      break;
     case mlSelectFIP:
	      FIPResult=menu_FIP(&FIP_Used,strFIP_ID);
   11eb2:	84 e6       	ldi	r24, 0x64	; 100
   11eb4:	92 e0       	ldi	r25, 0x02	; 2
   11eb6:	6b e3       	ldi	r22, 0x3B	; 59
   11eb8:	78 e0       	ldi	r23, 0x08	; 8
   11eba:	0e 94 28 55 	call	0xaa50	; 0xaa50 <menu_FIP>
		  if (FIPResult==FIP_DONE)stLoyalty=mlUpdateLoyalty;
   11ebe:	88 23       	and	r24, r24
   11ec0:	11 f4       	brne	.+4      	; 0x11ec6 <FMenuLoyalty+0xfe>
   11ec2:	82 e0       	ldi	r24, 0x02	; 2
   11ec4:	ea cf       	rjmp	.-44     	; 0x11e9a <FMenuLoyalty+0xd2>
		  else
		  if (FIPResult==FIP_CANCEL)stLoyalty=mlInit;
   11ec6:	82 30       	cpi	r24, 0x02	; 2
   11ec8:	09 f0       	breq	.+2      	; 0x11ecc <FMenuLoyalty+0x104>
   11eca:	c9 c1       	rjmp	.+914    	; 0x1225e <FMenuLoyalty+0x496>
   11ecc:	59 c0       	rjmp	.+178    	; 0x11f80 <FMenuLoyalty+0x1b8>
	      break;
     case mlUpdateLoyalty: 
	      lcd_clear();
   11ece:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
		  sprintf_P(lcdteks,PSTR("FIP:%s"),strFIP_ID);
   11ed2:	00 d0       	rcall	.+0      	; 0x11ed4 <FMenuLoyalty+0x10c>
   11ed4:	00 d0       	rcall	.+0      	; 0x11ed6 <FMenuLoyalty+0x10e>
   11ed6:	00 d0       	rcall	.+0      	; 0x11ed8 <FMenuLoyalty+0x110>
   11ed8:	ed b7       	in	r30, 0x3d	; 61
   11eda:	fe b7       	in	r31, 0x3e	; 62
   11edc:	31 96       	adiw	r30, 0x01	; 1
   11ede:	8e 01       	movw	r16, r28
   11ee0:	0f 5f       	subi	r16, 0xFF	; 255
   11ee2:	1f 4f       	sbci	r17, 0xFF	; 255
   11ee4:	ad b7       	in	r26, 0x3d	; 61
   11ee6:	be b7       	in	r27, 0x3e	; 62
   11ee8:	12 96       	adiw	r26, 0x02	; 2
   11eea:	1c 93       	st	X, r17
   11eec:	0e 93       	st	-X, r16
   11eee:	11 97       	sbiw	r26, 0x01	; 1
   11ef0:	84 e1       	ldi	r24, 0x14	; 20
   11ef2:	9d e1       	ldi	r25, 0x1D	; 29
   11ef4:	93 83       	std	Z+3, r25	; 0x03
   11ef6:	82 83       	std	Z+2, r24	; 0x02
   11ef8:	8b e3       	ldi	r24, 0x3B	; 59
   11efa:	98 e0       	ldi	r25, 0x08	; 8
   11efc:	95 83       	std	Z+5, r25	; 0x05
   11efe:	84 83       	std	Z+4, r24	; 0x04
   11f00:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
		  lcd_printf(1,1,PSTR("Tap Kartu RFID"));
   11f04:	8d b7       	in	r24, 0x3d	; 61
   11f06:	9e b7       	in	r25, 0x3e	; 62
   11f08:	06 96       	adiw	r24, 0x06	; 6
   11f0a:	0f b6       	in	r0, 0x3f	; 63
   11f0c:	f8 94       	cli
   11f0e:	9e bf       	out	0x3e, r25	; 62
   11f10:	0f be       	out	0x3f, r0	; 63
   11f12:	8d bf       	out	0x3d, r24	; 61
   11f14:	81 e0       	ldi	r24, 0x01	; 1
   11f16:	61 e0       	ldi	r22, 0x01	; 1
   11f18:	45 e0       	ldi	r20, 0x05	; 5
   11f1a:	5d e1       	ldi	r21, 0x1D	; 29
   11f1c:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  lcd_print(2,1,lcdteks);
   11f20:	82 e0       	ldi	r24, 0x02	; 2
   11f22:	61 e0       	ldi	r22, 0x01	; 1
   11f24:	a8 01       	movw	r20, r16
   11f26:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
          lcd_printf(4,1,PSTR("[*]Back    [#]Exit"));
   11f2a:	84 e0       	ldi	r24, 0x04	; 4
   11f2c:	61 e0       	ldi	r22, 0x01	; 1
   11f2e:	42 ef       	ldi	r20, 0xF2	; 242
   11f30:	5c e1       	ldi	r21, 0x1C	; 28
   11f32:	0c c0       	rjmp	.+24     	; 0x11f4c <FMenuLoyalty+0x184>
		  IsRFIDDetected=False;
	      stLoyalty=mlInputRFID;
	      break;
	 case mlShowEnquiry:
	      lcd_clear();
   11f34:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
		  lcd_printf(1,1,PSTR("Tap Kartu RFID"));
   11f38:	81 e0       	ldi	r24, 0x01	; 1
   11f3a:	61 e0       	ldi	r22, 0x01	; 1
   11f3c:	43 ee       	ldi	r20, 0xE3	; 227
   11f3e:	5c e1       	ldi	r21, 0x1C	; 28
   11f40:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
          lcd_printf(4,1,PSTR("[*]Back    [#]Exit"));
   11f44:	84 e0       	ldi	r24, 0x04	; 4
   11f46:	61 e0       	ldi	r22, 0x01	; 1
   11f48:	40 ed       	ldi	r20, 0xD0	; 208
   11f4a:	5c e1       	ldi	r21, 0x1C	; 28
   11f4c:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  IsRFIDDetected=False;
   11f50:	10 92 98 01 	sts	0x0198, r1
		  stLoyalty=mlInputRFID;
   11f54:	85 e0       	ldi	r24, 0x05	; 5
   11f56:	a1 cf       	rjmp	.-190    	; 0x11e9a <FMenuLoyalty+0xd2>
	      break;
     case mlInputRFID:
	      if (IsRFIDDetected==True){
   11f58:	80 91 98 01 	lds	r24, 0x0198
   11f5c:	81 30       	cpi	r24, 0x01	; 1
   11f5e:	29 f4       	brne	.+10     	; 0x11f6a <FMenuLoyalty+0x1a2>
		      IsRFIDDetected=False;
   11f60:	10 92 98 01 	sts	0x0198, r1
		      stLoyalty=mlShowProsesRFID;
   11f64:	86 e0       	ldi	r24, 0x06	; 6
   11f66:	80 93 65 02 	sts	0x0265, r24
		  }
	 	  KeyPressed=_key_scan(1);
   11f6a:	81 e0       	ldi	r24, 0x01	; 1
   11f6c:	0e 94 58 a6 	call	0x14cb0	; 0x14cb0 <_key_scan>
		  if (KeyPressed==_KEY_CANCEL){
   11f70:	87 3e       	cpi	r24, 0xE7	; 231
   11f72:	49 f4       	brne	.+18     	; 0x11f86 <FMenuLoyalty+0x1be>
		      if (IsLoyaltyUpdate==True)
   11f74:	80 91 63 02 	lds	r24, 0x0263
   11f78:	81 30       	cpi	r24, 0x01	; 1
   11f7a:	11 f4       	brne	.+4      	; 0x11f80 <FMenuLoyalty+0x1b8>
			       stLoyalty=mlSelectFIP;
   11f7c:	83 e0       	ldi	r24, 0x03	; 3
   11f7e:	8d cf       	rjmp	.-230    	; 0x11e9a <FMenuLoyalty+0xd2>
			  else stLoyalty=mlInit;
   11f80:	10 92 65 02 	sts	0x0265, r1
   11f84:	6c c1       	rjmp	.+728    	; 0x1225e <FMenuLoyalty+0x496>
			  }
		  else
		  if (KeyPressed==_KEY_ENTER)stLoyalty=mlExitLoyalty;
   11f86:	87 3b       	cpi	r24, 0xB7	; 183
   11f88:	09 f0       	breq	.+2      	; 0x11f8c <FMenuLoyalty+0x1c4>
   11f8a:	69 c1       	rjmp	.+722    	; 0x1225e <FMenuLoyalty+0x496>
   11f8c:	60 c1       	rjmp	.+704    	; 0x1224e <FMenuLoyalty+0x486>
	      break;
     case mlShowProsesRFID:
	      lcd_clear();
   11f8e:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
		  sprintf_P(lcdteks,PSTR("ID:%s"),strRFID);
   11f92:	00 d0       	rcall	.+0      	; 0x11f94 <FMenuLoyalty+0x1cc>
   11f94:	00 d0       	rcall	.+0      	; 0x11f96 <FMenuLoyalty+0x1ce>
   11f96:	00 d0       	rcall	.+0      	; 0x11f98 <FMenuLoyalty+0x1d0>
   11f98:	ed b7       	in	r30, 0x3d	; 61
   11f9a:	fe b7       	in	r31, 0x3e	; 62
   11f9c:	31 96       	adiw	r30, 0x01	; 1
   11f9e:	8e 01       	movw	r16, r28
   11fa0:	0f 5f       	subi	r16, 0xFF	; 255
   11fa2:	1f 4f       	sbci	r17, 0xFF	; 255
   11fa4:	ad b7       	in	r26, 0x3d	; 61
   11fa6:	be b7       	in	r27, 0x3e	; 62
   11fa8:	12 96       	adiw	r26, 0x02	; 2
   11faa:	1c 93       	st	X, r17
   11fac:	0e 93       	st	-X, r16
   11fae:	11 97       	sbiw	r26, 0x01	; 1
   11fb0:	8a ec       	ldi	r24, 0xCA	; 202
   11fb2:	9c e1       	ldi	r25, 0x1C	; 28
   11fb4:	93 83       	std	Z+3, r25	; 0x03
   11fb6:	82 83       	std	Z+2, r24	; 0x02
   11fb8:	83 ed       	ldi	r24, 0xD3	; 211
   11fba:	9c e0       	ldi	r25, 0x0C	; 12
   11fbc:	95 83       	std	Z+5, r25	; 0x05
   11fbe:	84 83       	std	Z+4, r24	; 0x04
   11fc0:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
		  lcd_print (1,1,lcdteks);	      
   11fc4:	8d b7       	in	r24, 0x3d	; 61
   11fc6:	9e b7       	in	r25, 0x3e	; 62
   11fc8:	06 96       	adiw	r24, 0x06	; 6
   11fca:	0f b6       	in	r0, 0x3f	; 63
   11fcc:	f8 94       	cli
   11fce:	9e bf       	out	0x3e, r25	; 62
   11fd0:	0f be       	out	0x3f, r0	; 63
   11fd2:	8d bf       	out	0x3d, r24	; 61
   11fd4:	81 e0       	ldi	r24, 0x01	; 1
   11fd6:	61 e0       	ldi	r22, 0x01	; 1
   11fd8:	a8 01       	movw	r20, r16
   11fda:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
		  lcd_printf(2,1,PSTR("Proses"));	      
   11fde:	82 e0       	ldi	r24, 0x02	; 2
   11fe0:	61 e0       	ldi	r22, 0x01	; 1
   11fe2:	43 ec       	ldi	r20, 0xC3	; 195
   11fe4:	5c e1       	ldi	r21, 0x1C	; 28
   11fe6:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  if (IsLoyaltyUpdate==True)stLoyalty=mlSendMessage24;
   11fea:	80 91 63 02 	lds	r24, 0x0263
   11fee:	81 30       	cpi	r24, 0x01	; 1
   11ff0:	11 f4       	brne	.+4      	; 0x11ff6 <FMenuLoyalty+0x22e>
   11ff2:	88 e0       	ldi	r24, 0x08	; 8
   11ff4:	52 cf       	rjmp	.-348    	; 0x11e9a <FMenuLoyalty+0xd2>
		  else stLoyalty=mlSendMessage22;
   11ff6:	87 e0       	ldi	r24, 0x07	; 7
   11ff8:	50 cf       	rjmp	.-352    	; 0x11e9a <FMenuLoyalty+0xd2>
	      break;
     case mlSendMessage22:
	      sendMessage22();
   11ffa:	0e 94 e0 8e 	call	0x11dc0	; 0x11dc0 <sendMessage22>
   11ffe:	02 c0       	rjmp	.+4      	; 0x12004 <FMenuLoyalty+0x23c>
		  TimSend=0;		  
          stLoyalty=mlWaitReply;
	      break;
     case mlSendMessage24:
	      sendMessage24();
   12000:	0e 94 dc 8e 	call	0x11db8	; 0x11db8 <sendMessage24>
		  TimSend=0;		  
   12004:	10 92 fa 0c 	sts	0x0CFA, r1
          stLoyalty=mlWaitReply;
   12008:	89 e0       	ldi	r24, 0x09	; 9
   1200a:	47 cf       	rjmp	.-370    	; 0x11e9a <FMenuLoyalty+0xd2>
	      break;
     case mlWaitReply:
	      if (TimSend>(TIM_SEND*3))
   1200c:	80 91 fa 0c 	lds	r24, 0x0CFA
   12010:	8f 31       	cpi	r24, 0x1F	; 31
   12012:	18 f0       	brcs	.+6      	; 0x1201a <FMenuLoyalty+0x252>
		      stLoyalty=mlNoConnection;
   12014:	8c e0       	ldi	r24, 0x0C	; 12
   12016:	80 93 65 02 	sts	0x0265, r24
	      if (IsMessage23==True){
   1201a:	80 91 a2 01 	lds	r24, 0x01A2
   1201e:	81 30       	cpi	r24, 0x01	; 1
   12020:	39 f4       	brne	.+14     	; 0x12030 <FMenuLoyalty+0x268>
		      IsMessage23=False;
   12022:	10 92 a2 01 	sts	0x01A2, r1
			  procMessage23();
   12026:	0e 94 15 18 	call	0x302a	; 0x302a <procMessage23>
			  stLoyalty=mlDispEnquiry;
   1202a:	8b e0       	ldi	r24, 0x0B	; 11
   1202c:	80 93 65 02 	sts	0x0265, r24
		  }
	      if (IsMessage09==True){
   12030:	80 91 a3 01 	lds	r24, 0x01A3
   12034:	81 30       	cpi	r24, 0x01	; 1
   12036:	39 f4       	brne	.+14     	; 0x12046 <FMenuLoyalty+0x27e>
		      IsMessage09=False;
   12038:	10 92 a3 01 	sts	0x01A3, r1
	          procMessage09();
   1203c:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <procMessage09>
              stLoyalty=mlDisplayFreeMessage;
   12040:	8a e0       	ldi	r24, 0x0A	; 10
   12042:	80 93 65 02 	sts	0x0265, r24
		  }
	      if (IsMessage99==True){
   12046:	80 91 9f 01 	lds	r24, 0x019F
   1204a:	81 30       	cpi	r24, 0x01	; 1
   1204c:	09 f0       	breq	.+2      	; 0x12050 <FMenuLoyalty+0x288>
   1204e:	07 c1       	rjmp	.+526    	; 0x1225e <FMenuLoyalty+0x496>
   12050:	1c c0       	rjmp	.+56     	; 0x1208a <FMenuLoyalty+0x2c2>
              stLoyalty=mlDelayExitLoyalty;
		  }
	      break;
     case mlDisplayFreeMessage:
		  lcd_clear();
   12052:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
		  lcd_print(1,1,strFreeMessageLine1);
   12056:	81 e0       	ldi	r24, 0x01	; 1
   12058:	61 e0       	ldi	r22, 0x01	; 1
   1205a:	44 e1       	ldi	r20, 0x14	; 20
   1205c:	59 e0       	ldi	r21, 0x09	; 9
   1205e:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
		  lcd_print(2,1,strFreeMessageLine2);
   12062:	82 e0       	ldi	r24, 0x02	; 2
   12064:	61 e0       	ldi	r22, 0x01	; 1
   12066:	45 e2       	ldi	r20, 0x25	; 37
   12068:	58 e0       	ldi	r21, 0x08	; 8
   1206a:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
		  lcd_print(3,1,strFreeMessageLine3);
   1206e:	83 e0       	ldi	r24, 0x03	; 3
   12070:	61 e0       	ldi	r22, 0x01	; 1
   12072:	4e e9       	ldi	r20, 0x9E	; 158
   12074:	58 e0       	ldi	r21, 0x08	; 8
   12076:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
		  lcd_print(4,1,strFreeMessageLine4);
   1207a:	84 e0       	ldi	r24, 0x04	; 4
   1207c:	61 e0       	ldi	r22, 0x01	; 1
   1207e:	48 e5       	ldi	r20, 0x58	; 88
   12080:	5c e0       	ldi	r21, 0x0C	; 12
   12082:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
		  TimDisplay=0;
   12086:	10 92 92 01 	sts	0x0192, r1
		  stLoyalty=mlDelayExitLoyalty;
   1208a:	8e e0       	ldi	r24, 0x0E	; 14
   1208c:	06 cf       	rjmp	.-500    	; 0x11e9a <FMenuLoyalty+0xd2>
	      break;
     case mlDispEnquiry:	      
	      lcd_clear();
   1208e:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
		  RemSpaceLag(strCardID);RemSpaceLag(strCardHolder);
   12092:	eb e0       	ldi	r30, 0x0B	; 11
   12094:	ce 2e       	mov	r12, r30
   12096:	ec e0       	ldi	r30, 0x0C	; 12
   12098:	de 2e       	mov	r13, r30
   1209a:	c6 01       	movw	r24, r12
   1209c:	0e 94 d2 25 	call	0x4ba4	; 0x4ba4 <RemSpaceLag>
   120a0:	76 ea       	ldi	r23, 0xA6	; 166
   120a2:	e7 2e       	mov	r14, r23
   120a4:	73 e0       	ldi	r23, 0x03	; 3
   120a6:	f7 2e       	mov	r15, r23
   120a8:	c7 01       	movw	r24, r14
   120aa:	0e 94 d2 25 	call	0x4ba4	; 0x4ba4 <RemSpaceLag>
		  sprintf_P(lcdteks,PSTR("%s:%s"),strCardID,strCardHolder);
   120ae:	ad b7       	in	r26, 0x3d	; 61
   120b0:	be b7       	in	r27, 0x3e	; 62
   120b2:	18 97       	sbiw	r26, 0x08	; 8
   120b4:	0f b6       	in	r0, 0x3f	; 63
   120b6:	f8 94       	cli
   120b8:	be bf       	out	0x3e, r27	; 62
   120ba:	0f be       	out	0x3f, r0	; 63
   120bc:	ad bf       	out	0x3d, r26	; 61
   120be:	ed b7       	in	r30, 0x3d	; 61
   120c0:	fe b7       	in	r31, 0x3e	; 62
   120c2:	31 96       	adiw	r30, 0x01	; 1
   120c4:	8e 01       	movw	r16, r28
   120c6:	0f 5f       	subi	r16, 0xFF	; 255
   120c8:	1f 4f       	sbci	r17, 0xFF	; 255
   120ca:	12 96       	adiw	r26, 0x02	; 2
   120cc:	1c 93       	st	X, r17
   120ce:	0e 93       	st	-X, r16
   120d0:	11 97       	sbiw	r26, 0x01	; 1
   120d2:	8d eb       	ldi	r24, 0xBD	; 189
   120d4:	9c e1       	ldi	r25, 0x1C	; 28
   120d6:	93 83       	std	Z+3, r25	; 0x03
   120d8:	82 83       	std	Z+2, r24	; 0x02
   120da:	d5 82       	std	Z+5, r13	; 0x05
   120dc:	c4 82       	std	Z+4, r12	; 0x04
   120de:	f7 82       	std	Z+7, r15	; 0x07
   120e0:	e6 82       	std	Z+6, r14	; 0x06
   120e2:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
		  lcd_print(1,1,lcdteks);RemSpaceLag(strLoyCurrentPoints);
   120e6:	8d b7       	in	r24, 0x3d	; 61
   120e8:	9e b7       	in	r25, 0x3e	; 62
   120ea:	08 96       	adiw	r24, 0x08	; 8
   120ec:	0f b6       	in	r0, 0x3f	; 63
   120ee:	f8 94       	cli
   120f0:	9e bf       	out	0x3e, r25	; 62
   120f2:	0f be       	out	0x3f, r0	; 63
   120f4:	8d bf       	out	0x3d, r24	; 61
   120f6:	81 e0       	ldi	r24, 0x01	; 1
   120f8:	61 e0       	ldi	r22, 0x01	; 1
   120fa:	a8 01       	movw	r20, r16
   120fc:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
   12100:	67 eb       	ldi	r22, 0xB7	; 183
   12102:	e6 2e       	mov	r14, r22
   12104:	68 e0       	ldi	r22, 0x08	; 8
   12106:	f6 2e       	mov	r15, r22
   12108:	c7 01       	movw	r24, r14
   1210a:	0e 94 d2 25 	call	0x4ba4	; 0x4ba4 <RemSpaceLag>
		  sprintf_P(lcdteks,PSTR("Points:%s"),strLoyCurrentPoints);
   1210e:	00 d0       	rcall	.+0      	; 0x12110 <FMenuLoyalty+0x348>
   12110:	00 d0       	rcall	.+0      	; 0x12112 <FMenuLoyalty+0x34a>
   12112:	00 d0       	rcall	.+0      	; 0x12114 <FMenuLoyalty+0x34c>
   12114:	ed b7       	in	r30, 0x3d	; 61
   12116:	fe b7       	in	r31, 0x3e	; 62
   12118:	31 96       	adiw	r30, 0x01	; 1
   1211a:	ad b7       	in	r26, 0x3d	; 61
   1211c:	be b7       	in	r27, 0x3e	; 62
   1211e:	12 96       	adiw	r26, 0x02	; 2
   12120:	1c 93       	st	X, r17
   12122:	0e 93       	st	-X, r16
   12124:	11 97       	sbiw	r26, 0x01	; 1
   12126:	83 eb       	ldi	r24, 0xB3	; 179
   12128:	9c e1       	ldi	r25, 0x1C	; 28
   1212a:	93 83       	std	Z+3, r25	; 0x03
   1212c:	82 83       	std	Z+2, r24	; 0x02
   1212e:	f5 82       	std	Z+5, r15	; 0x05
   12130:	e4 82       	std	Z+4, r14	; 0x04
   12132:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
		  lcd_print(2,1,lcdteks);RemSpaceLag(strLoyCurrentPoints);
   12136:	8d b7       	in	r24, 0x3d	; 61
   12138:	9e b7       	in	r25, 0x3e	; 62
   1213a:	06 96       	adiw	r24, 0x06	; 6
   1213c:	0f b6       	in	r0, 0x3f	; 63
   1213e:	f8 94       	cli
   12140:	9e bf       	out	0x3e, r25	; 62
   12142:	0f be       	out	0x3f, r0	; 63
   12144:	8d bf       	out	0x3d, r24	; 61
   12146:	82 e0       	ldi	r24, 0x02	; 2
   12148:	61 e0       	ldi	r22, 0x01	; 1
   1214a:	a8 01       	movw	r20, r16
   1214c:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
   12150:	c7 01       	movw	r24, r14
   12152:	0e 94 d2 25 	call	0x4ba4	; 0x4ba4 <RemSpaceLag>
		  sprintf_P(lcdteks,PSTR("CM Amt:%s"),strLoyCurrMonConsumeA);
   12156:	00 d0       	rcall	.+0      	; 0x12158 <FMenuLoyalty+0x390>
   12158:	00 d0       	rcall	.+0      	; 0x1215a <FMenuLoyalty+0x392>
   1215a:	00 d0       	rcall	.+0      	; 0x1215c <FMenuLoyalty+0x394>
   1215c:	ed b7       	in	r30, 0x3d	; 61
   1215e:	fe b7       	in	r31, 0x3e	; 62
   12160:	31 96       	adiw	r30, 0x01	; 1
   12162:	ad b7       	in	r26, 0x3d	; 61
   12164:	be b7       	in	r27, 0x3e	; 62
   12166:	12 96       	adiw	r26, 0x02	; 2
   12168:	1c 93       	st	X, r17
   1216a:	0e 93       	st	-X, r16
   1216c:	11 97       	sbiw	r26, 0x01	; 1
   1216e:	89 ea       	ldi	r24, 0xA9	; 169
   12170:	9c e1       	ldi	r25, 0x1C	; 28
   12172:	93 83       	std	Z+3, r25	; 0x03
   12174:	82 83       	std	Z+2, r24	; 0x02
   12176:	80 e0       	ldi	r24, 0x00	; 0
   12178:	94 e0       	ldi	r25, 0x04	; 4
   1217a:	95 83       	std	Z+5, r25	; 0x05
   1217c:	84 83       	std	Z+4, r24	; 0x04
   1217e:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
		  lcd_print(3,1,lcdteks);RemSpaceLag(strLoyCurrentPoints);
   12182:	8d b7       	in	r24, 0x3d	; 61
   12184:	9e b7       	in	r25, 0x3e	; 62
   12186:	06 96       	adiw	r24, 0x06	; 6
   12188:	0f b6       	in	r0, 0x3f	; 63
   1218a:	f8 94       	cli
   1218c:	9e bf       	out	0x3e, r25	; 62
   1218e:	0f be       	out	0x3f, r0	; 63
   12190:	8d bf       	out	0x3d, r24	; 61
   12192:	83 e0       	ldi	r24, 0x03	; 3
   12194:	61 e0       	ldi	r22, 0x01	; 1
   12196:	a8 01       	movw	r20, r16
   12198:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
   1219c:	c7 01       	movw	r24, r14
   1219e:	0e 94 d2 25 	call	0x4ba4	; 0x4ba4 <RemSpaceLag>
		  sprintf_P(lcdteks,PSTR("Cm Vol:%s"),strLoyCurrMonConsumeV);
   121a2:	00 d0       	rcall	.+0      	; 0x121a4 <FMenuLoyalty+0x3dc>
   121a4:	00 d0       	rcall	.+0      	; 0x121a6 <FMenuLoyalty+0x3de>
   121a6:	00 d0       	rcall	.+0      	; 0x121a8 <FMenuLoyalty+0x3e0>
   121a8:	ed b7       	in	r30, 0x3d	; 61
   121aa:	fe b7       	in	r31, 0x3e	; 62
   121ac:	31 96       	adiw	r30, 0x01	; 1
   121ae:	ad b7       	in	r26, 0x3d	; 61
   121b0:	be b7       	in	r27, 0x3e	; 62
   121b2:	12 96       	adiw	r26, 0x02	; 2
   121b4:	1c 93       	st	X, r17
   121b6:	0e 93       	st	-X, r16
   121b8:	11 97       	sbiw	r26, 0x01	; 1
   121ba:	8f e9       	ldi	r24, 0x9F	; 159
   121bc:	9c e1       	ldi	r25, 0x1C	; 28
   121be:	93 83       	std	Z+3, r25	; 0x03
   121c0:	82 83       	std	Z+2, r24	; 0x02
   121c2:	8f e6       	ldi	r24, 0x6F	; 111
   121c4:	9c e0       	ldi	r25, 0x0C	; 12
   121c6:	95 83       	std	Z+5, r25	; 0x05
   121c8:	84 83       	std	Z+4, r24	; 0x04
   121ca:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
		  lcd_print(4,1,lcdteks);
   121ce:	8d b7       	in	r24, 0x3d	; 61
   121d0:	9e b7       	in	r25, 0x3e	; 62
   121d2:	06 96       	adiw	r24, 0x06	; 6
   121d4:	0f b6       	in	r0, 0x3f	; 63
   121d6:	f8 94       	cli
   121d8:	9e bf       	out	0x3e, r25	; 62
   121da:	0f be       	out	0x3f, r0	; 63
   121dc:	8d bf       	out	0x3d, r24	; 61
   121de:	84 e0       	ldi	r24, 0x04	; 4
   121e0:	61 e0       	ldi	r22, 0x01	; 1
   121e2:	a8 01       	movw	r20, r16
   121e4:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
		  TimDisplay=0;
   121e8:	10 92 92 01 	sts	0x0192, r1

		  if (eeprom_read_byte(&DefNotifScreen)==1) {
   121ec:	88 e3       	ldi	r24, 0x38	; 56
   121ee:	90 e0       	ldi	r25, 0x00	; 0
   121f0:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
   121f4:	81 30       	cpi	r24, 0x01	; 1
   121f6:	09 f0       	breq	.+2      	; 0x121fa <FMenuLoyalty+0x432>
   121f8:	48 cf       	rjmp	.-368    	; 0x1208a <FMenuLoyalty+0x2c2>
		      stLoyalty=mlPressAnyKey;
   121fa:	8d e0       	ldi	r24, 0x0D	; 13
   121fc:	80 93 65 02 	sts	0x0265, r24
			  lcd_printf(2,1,PSTR("Press Any Key"));
   12200:	82 e0       	ldi	r24, 0x02	; 2
   12202:	61 e0       	ldi	r22, 0x01	; 1
   12204:	41 e9       	ldi	r20, 0x91	; 145
   12206:	5c e1       	ldi	r21, 0x1C	; 28
   12208:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
   1220c:	28 c0       	rjmp	.+80     	; 0x1225e <FMenuLoyalty+0x496>
          } else stLoyalty=mlDelayExitLoyalty;
		  break;
     case mlPressAnyKey:
	      KeyPressed=_key_scan(1);
   1220e:	81 e0       	ldi	r24, 0x01	; 1
   12210:	0e 94 58 a6 	call	0x14cb0	; 0x14cb0 <_key_scan>
	      KeyChar=_key_btn(KeyPressed);
   12214:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <_key_btn>
	      switch(KeyChar){		  
   12218:	83 32       	cpi	r24, 0x23	; 35
   1221a:	c9 f0       	breq	.+50     	; 0x1224e <FMenuLoyalty+0x486>
   1221c:	8a 32       	cpi	r24, 0x2A	; 42
   1221e:	f9 f4       	brne	.+62     	; 0x1225e <FMenuLoyalty+0x496>
   12220:	16 c0       	rjmp	.+44     	; 0x1224e <FMenuLoyalty+0x486>
               stLoyalty=mlExitLoyalty;
		       break;		  
		  }
	      break;
     case mlNoConnection:
	      lcd_clear();
   12222:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
		  lcd_printf(2,1,PSTR("TCP/IP ERROR "));
   12226:	82 e0       	ldi	r24, 0x02	; 2
   12228:	61 e0       	ldi	r22, 0x01	; 1
   1222a:	43 e8       	ldi	r20, 0x83	; 131
   1222c:	5c e1       	ldi	r21, 0x1C	; 28
   1222e:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  lcd_printf(3,1,PSTR("No Connection"));
   12232:	83 e0       	ldi	r24, 0x03	; 3
   12234:	61 e0       	ldi	r22, 0x01	; 1
   12236:	45 e7       	ldi	r20, 0x75	; 117
   12238:	5c e1       	ldi	r21, 0x1C	; 28
   1223a:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		  TimDisplay=5;
   1223e:	85 e0       	ldi	r24, 0x05	; 5
   12240:	80 93 92 01 	sts	0x0192, r24
   12244:	22 cf       	rjmp	.-444    	; 0x1208a <FMenuLoyalty+0x2c2>
		  stLoyalty=mlDelayExitLoyalty;
	      break;
     case mlDelayExitLoyalty:
          if(TimDisplay>=10)stLoyalty=mlExitLoyalty;
   12246:	80 91 92 01 	lds	r24, 0x0192
   1224a:	8a 30       	cpi	r24, 0x0A	; 10
   1224c:	40 f0       	brcs	.+16     	; 0x1225e <FMenuLoyalty+0x496>
   1224e:	8f e0       	ldi	r24, 0x0F	; 15
   12250:	24 ce       	rjmp	.-952    	; 0x11e9a <FMenuLoyalty+0xd2>
	      break;
	 case mlExitLoyalty:
	      lcd_clear();
   12252:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
	      stLoyalty=mlInit;
   12256:	10 92 65 02 	sts	0x0265, r1
   1225a:	81 e0       	ldi	r24, 0x01	; 1
   1225c:	01 c0       	rjmp	.+2      	; 0x12260 <FMenuLoyalty+0x498>
   1225e:	80 e0       	ldi	r24, 0x00	; 0
		  Result=MENU_DONE;
	      break;
	 }
	 return Result;
}
   12260:	64 96       	adiw	r28, 0x14	; 20
   12262:	0f b6       	in	r0, 0x3f	; 63
   12264:	f8 94       	cli
   12266:	de bf       	out	0x3e, r29	; 62
   12268:	0f be       	out	0x3f, r0	; 63
   1226a:	cd bf       	out	0x3d, r28	; 61
   1226c:	cf 91       	pop	r28
   1226e:	df 91       	pop	r29
   12270:	1f 91       	pop	r17
   12272:	0f 91       	pop	r16
   12274:	ff 90       	pop	r15
   12276:	ef 90       	pop	r14
   12278:	df 90       	pop	r13
   1227a:	cf 90       	pop	r12
   1227c:	08 95       	ret

0001227e <sendMessage10>:
	sprintf_P(strSend,PSTR("%s%s%s%s10F968CFFB"),strIFT_ID,strSeqNum,strClientIP,strServerIP);
    uart_print(1, 0,strSend);
	uart(1, 1,0x02);
	IsNewPacket=True;
	*/
	IsNewPacket=True;
   1227e:	81 e0       	ldi	r24, 0x01	; 1
   12280:	80 93 88 01 	sts	0x0188, r24
	IFTSendMessage(MSG_10);
   12284:	80 e1       	ldi	r24, 0x10	; 16
   12286:	0e 94 22 7a 	call	0xf444	; 0xf444 <IFTSendMessage>
}
   1228a:	08 95       	ret

0001228c <InitializeConnection>:
void InitMemory(){
     PumpCountMax=eeprom_read_byte(&DefPoolingPumpMax);
	 ActivePump=eeprom_read_byte(&DefActivePump);
}

void InitializeConnection(){
   1228c:	df 92       	push	r13
   1228e:	ef 92       	push	r14
   12290:	ff 92       	push	r15
   12292:	0f 93       	push	r16
   12294:	1f 93       	push	r17
   12296:	df 93       	push	r29
   12298:	cf 93       	push	r28
   1229a:	cd b7       	in	r28, 0x3d	; 61
   1229c:	de b7       	in	r29, 0x3e	; 62
   1229e:	64 97       	sbiw	r28, 0x14	; 20
   122a0:	0f b6       	in	r0, 0x3f	; 63
   122a2:	f8 94       	cli
   122a4:	de bf       	out	0x3e, r29	; 62
   122a6:	0f be       	out	0x3f, r0	; 63
   122a8:	cd bf       	out	0x3d, r28	; 61
	unsigned int tConnect=0;
	char ForceType=IT_NONE,iCon=0,iTry=0,KeyPressed;
	char lcdteks[20];
	IFType=eeprom_read_byte(&DefInitIFT);
   122aa:	87 e3       	ldi	r24, 0x37	; 55
   122ac:	91 e0       	ldi	r25, 0x01	; 1
   122ae:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
   122b2:	18 2f       	mov	r17, r24
   122b4:	80 93 00 01 	sts	0x0100, r24
	DispenserBrand=eeprom_read_byte(&DefDispenserBrand);
   122b8:	88 e3       	ldi	r24, 0x38	; 56
   122ba:	91 e0       	ldi	r25, 0x01	; 1
   122bc:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
   122c0:	80 93 5e 01 	sts	0x015E, r24

	//SendSlaveCommand(SC_STOP_POOL_SEQUENCE,0);

    //Send Msg10
	if  (IFType==IT_SLAVE){
   122c4:	11 30       	cpi	r17, 0x01	; 1
   122c6:	09 f0       	breq	.+2      	; 0x122ca <InitializeConnection+0x3e>
   122c8:	5f c0       	rjmp	.+190    	; 0x12388 <InitializeConnection+0xfc>
	     SendSlaveCommand(SC_SLAVE,ST_NONE);
   122ca:	81 e0       	ldi	r24, 0x01	; 1
   122cc:	60 e0       	ldi	r22, 0x00	; 0
   122ce:	0e 94 0a 60 	call	0xc014	; 0xc014 <SendSlaveCommand>
		 char_count=0;
   122d2:	10 92 8a 01 	sts	0x018A, r1
   122d6:	10 92 89 01 	sts	0x0189, r1
		 if (IsPowerOn==True){
   122da:	80 91 ba 02 	lds	r24, 0x02BA
   122de:	81 30       	cpi	r24, 0x01	; 1
   122e0:	59 f4       	brne	.+22     	; 0x122f8 <InitializeConnection+0x6c>
		     IsPowerOn=False;
   122e2:	10 92 ba 02 	sts	0x02BA, r1
   122e6:	8f ef       	ldi	r24, 0xFF	; 255
   122e8:	9f ef       	ldi	r25, 0xFF	; 255
   122ea:	29 e1       	ldi	r18, 0x19	; 25
   122ec:	30 e0       	ldi	r19, 0x00	; 0
   122ee:	f9 01       	movw	r30, r18
   122f0:	31 97       	sbiw	r30, 0x01	; 1
   122f2:	f1 f7       	brne	.-4      	; 0x122f0 <InitializeConnection+0x64>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
   122f4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
   122f6:	d9 f7       	brne	.-10     	; 0x122ee <InitializeConnection+0x62>
		     _delay_ms(8000);
			 }
         sendMessage10();
   122f8:	0e 94 3f 91 	call	0x1227e	; 0x1227e <sendMessage10>
         sendMessage10();
   122fc:	0e 94 3f 91 	call	0x1227e	; 0x1227e <sendMessage10>
         sendMessage10();
   12300:	0e 94 3f 91 	call	0x1227e	; 0x1227e <sendMessage10>
         

         lcd_printf(4,1,PSTR("Connect         "));
   12304:	84 e0       	ldi	r24, 0x04	; 4
   12306:	61 e0       	ldi	r22, 0x01	; 1
   12308:	49 ee       	ldi	r20, 0xE9	; 233
   1230a:	5e e1       	ldi	r21, 0x1E	; 30
   1230c:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		 lcd_printf(4,1,PSTR("Connect"));
   12310:	84 e0       	ldi	r24, 0x04	; 4
   12312:	61 e0       	ldi	r22, 0x01	; 1
   12314:	41 ee       	ldi	r20, 0xE1	; 225
   12316:	5e e1       	ldi	r21, 0x1E	; 30
   12318:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		 //EstablishConnection TCP/IP
		 IsMessage11=False;
   1231c:	10 92 a0 01 	sts	0x01A0, r1
   12320:	ee 24       	eor	r14, r14
   12322:	ff 24       	eor	r15, r15
   12324:	10 e0       	ldi	r17, 0x00	; 0
   12326:	00 e0       	ldi	r16, 0x00	; 0
   12328:	2b c0       	rjmp	.+86     	; 0x12380 <InitializeConnection+0xf4>
		  //SlaveIdentification		  
		 while (IsMessage11==False){
		        lcd_put(4,(8+iCon),'.');
   1232a:	61 2f       	mov	r22, r17
   1232c:	68 5f       	subi	r22, 0xF8	; 248
   1232e:	84 e0       	ldi	r24, 0x04	; 4
   12330:	4e e2       	ldi	r20, 0x2E	; 46
   12332:	0e 94 2c a5 	call	0x14a58	; 0x14a58 <lcd_put>
                tConnect++;
   12336:	08 94       	sec
   12338:	e1 1c       	adc	r14, r1
   1233a:	f1 1c       	adc	r15, r1
				__key_lgtcnt=0;
   1233c:	10 92 af 02 	sts	0x02AF, r1
			    if ((tConnect%200)==0)iCon++;
   12340:	c7 01       	movw	r24, r14
   12342:	68 ec       	ldi	r22, 0xC8	; 200
   12344:	70 e0       	ldi	r23, 0x00	; 0
   12346:	0e 94 65 aa 	call	0x154ca	; 0x154ca <__udivmodhi4>
   1234a:	89 2b       	or	r24, r25
   1234c:	09 f4       	brne	.+2      	; 0x12350 <InitializeConnection+0xc4>
   1234e:	1f 5f       	subi	r17, 0xFF	; 255
			    if (iCon>8){
   12350:	19 30       	cpi	r17, 0x09	; 9
   12352:	70 f0       	brcs	.+28     	; 0x12370 <InitializeConnection+0xe4>
			        lcd_printf(4,1,PSTR("Connect         "));
   12354:	84 e0       	ldi	r24, 0x04	; 4
   12356:	61 e0       	ldi	r22, 0x01	; 1
   12358:	40 ed       	ldi	r20, 0xD0	; 208
   1235a:	5e e1       	ldi	r21, 0x1E	; 30
   1235c:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
					
				    sendMessage10();
   12360:	0e 94 3f 91 	call	0x1227e	; 0x1227e <sendMessage10>
				    SendSlaveCommand(SC_SLAVE,ST_NONE);
   12364:	81 e0       	ldi	r24, 0x01	; 1
   12366:	60 e0       	ldi	r22, 0x00	; 0
   12368:	0e 94 0a 60 	call	0xc014	; 0xc014 <SendSlaveCommand>
			        iCon=0;
				    iTry++;}
   1236c:	0f 5f       	subi	r16, 0xFF	; 255
   1236e:	10 e0       	ldi	r17, 0x00	; 0
			    if (iTry>3){
   12370:	04 30       	cpi	r16, 0x04	; 4
   12372:	30 f0       	brcs	.+12     	; 0x12380 <InitializeConnection+0xf4>
			        //IsErrorTCPIP=True;
				    IsAdvanzStartupInfo=False;		
   12374:	10 92 aa 01 	sts	0x01AA, r1
					IFType=IT_STANDALONE;
   12378:	82 e0       	ldi	r24, 0x02	; 2
   1237a:	80 93 00 01 	sts	0x0100, r24
   1237e:	04 c0       	rjmp	.+8      	; 0x12388 <InitializeConnection+0xfc>
         lcd_printf(4,1,PSTR("Connect         "));
		 lcd_printf(4,1,PSTR("Connect"));
		 //EstablishConnection TCP/IP
		 IsMessage11=False;
		  //SlaveIdentification		  
		 while (IsMessage11==False){
   12380:	80 91 a0 01 	lds	r24, 0x01A0
   12384:	88 23       	and	r24, r24
   12386:	89 f2       	breq	.-94     	; 0x1232a <InitializeConnection+0x9e>

			    }
            }//EndWhile
		}

	if (IFType==IT_STANDALONE){
   12388:	80 91 00 01 	lds	r24, 0x0100
   1238c:	82 30       	cpi	r24, 0x02	; 2
   1238e:	09 f0       	breq	.+2      	; 0x12392 <InitializeConnection+0x106>
   12390:	72 c0       	rjmp	.+228    	; 0x12476 <InitializeConnection+0x1ea>
        IsStandAloneDetected=False;		
   12392:	10 92 9c 01 	sts	0x019C, r1
		SendSlaveCommand(SC_STANDALONE,DispenserBrand);
   12396:	60 91 5e 01 	lds	r22, 0x015E
   1239a:	0e 94 0a 60 	call	0xc014	; 0xc014 <SendSlaveCommand>
		tConnect=0,iCon=0,iTry=0;
	    lcd_clear();
   1239e:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <lcd_clear>
	    lcd_printf(1,1,PSTR("Scan Pump"));
   123a2:	81 e0       	ldi	r24, 0x01	; 1
   123a4:	61 e0       	ldi	r22, 0x01	; 1
   123a6:	46 ec       	ldi	r20, 0xC6	; 198
   123a8:	5e e1       	ldi	r21, 0x1E	; 30
   123aa:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		strcpy_P(lcdteks,(PGM_P)pgm_read_word(&(DefListDispenserName[eeprom_read_byte(&DefDispenserBrand)])));
   123ae:	88 e3       	ldi	r24, 0x38	; 56
   123b0:	91 e0       	ldi	r25, 0x01	; 1
   123b2:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
   123b6:	e8 2f       	mov	r30, r24
   123b8:	f0 e0       	ldi	r31, 0x00	; 0
   123ba:	ee 0f       	add	r30, r30
   123bc:	ff 1f       	adc	r31, r31
   123be:	eb 5f       	subi	r30, 0xFB	; 251
   123c0:	fc 4f       	sbci	r31, 0xFC	; 252
   123c2:	65 91       	lpm	r22, Z+
   123c4:	74 91       	lpm	r23, Z+
   123c6:	8e 01       	movw	r16, r28
   123c8:	0f 5f       	subi	r16, 0xFF	; 255
   123ca:	1f 4f       	sbci	r17, 0xFF	; 255
   123cc:	c8 01       	movw	r24, r16
   123ce:	0e 94 cc aa 	call	0x15598	; 0x15598 <strcpy_P>
		sprintf_P(lcdteks,PSTR("%s"),lcdteks);
   123d2:	00 d0       	rcall	.+0      	; 0x123d4 <InitializeConnection+0x148>
   123d4:	00 d0       	rcall	.+0      	; 0x123d6 <InitializeConnection+0x14a>
   123d6:	00 d0       	rcall	.+0      	; 0x123d8 <InitializeConnection+0x14c>
   123d8:	ed b7       	in	r30, 0x3d	; 61
   123da:	fe b7       	in	r31, 0x3e	; 62
   123dc:	31 96       	adiw	r30, 0x01	; 1
   123de:	ad b7       	in	r26, 0x3d	; 61
   123e0:	be b7       	in	r27, 0x3e	; 62
   123e2:	12 96       	adiw	r26, 0x02	; 2
   123e4:	1c 93       	st	X, r17
   123e6:	0e 93       	st	-X, r16
   123e8:	11 97       	sbiw	r26, 0x01	; 1
   123ea:	83 ec       	ldi	r24, 0xC3	; 195
   123ec:	9e e1       	ldi	r25, 0x1E	; 30
   123ee:	93 83       	std	Z+3, r25	; 0x03
   123f0:	82 83       	std	Z+2, r24	; 0x02
   123f2:	15 83       	std	Z+5, r17	; 0x05
   123f4:	04 83       	std	Z+4, r16	; 0x04
   123f6:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	    lcd_print(2,1,lcdteks);
   123fa:	8d b7       	in	r24, 0x3d	; 61
   123fc:	9e b7       	in	r25, 0x3e	; 62
   123fe:	06 96       	adiw	r24, 0x06	; 6
   12400:	0f b6       	in	r0, 0x3f	; 63
   12402:	f8 94       	cli
   12404:	9e bf       	out	0x3e, r25	; 62
   12406:	0f be       	out	0x3f, r0	; 63
   12408:	8d bf       	out	0x3d, r24	; 61
   1240a:	82 e0       	ldi	r24, 0x02	; 2
   1240c:	61 e0       	ldi	r22, 0x01	; 1
   1240e:	a8 01       	movw	r20, r16
   12410:	0e 94 ba a4 	call	0x14974	; 0x14974 <lcd_print>
   12414:	00 e0       	ldi	r16, 0x00	; 0
   12416:	10 e0       	ldi	r17, 0x00	; 0
   12418:	ff 24       	eor	r15, r15
   1241a:	dd 24       	eor	r13, r13
   1241c:	28 c0       	rjmp	.+80     	; 0x1246e <InitializeConnection+0x1e2>

	    while (IsStandAloneDetected==False){
		       lcd_put(4,(1+iCon),'.');
   1241e:	ef 2c       	mov	r14, r15
   12420:	e3 94       	inc	r14
   12422:	84 e0       	ldi	r24, 0x04	; 4
   12424:	6e 2d       	mov	r22, r14
   12426:	4e e2       	ldi	r20, 0x2E	; 46
   12428:	0e 94 2c a5 	call	0x14a58	; 0x14a58 <lcd_put>
		       tConnect++;
   1242c:	0f 5f       	subi	r16, 0xFF	; 255
   1242e:	1f 4f       	sbci	r17, 0xFF	; 255
		       if ((tConnect%100)==0)iCon++;
   12430:	c8 01       	movw	r24, r16
   12432:	64 e6       	ldi	r22, 0x64	; 100
   12434:	70 e0       	ldi	r23, 0x00	; 0
   12436:	0e 94 65 aa 	call	0x154ca	; 0x154ca <__udivmodhi4>
   1243a:	89 2b       	or	r24, r25
   1243c:	09 f4       	brne	.+2      	; 0x12440 <InitializeConnection+0x1b4>
   1243e:	fe 2c       	mov	r15, r14
		       if (iCon>16){
   12440:	90 e1       	ldi	r25, 0x10	; 16
   12442:	9f 15       	cp	r25, r15
   12444:	88 f4       	brcc	.+34     	; 0x12468 <InitializeConnection+0x1dc>
			       __key_lgtcnt=0;
   12446:	10 92 af 02 	sts	0x02AF, r1
			       lcd_printf(4,1,PSTR("                   "));
   1244a:	84 e0       	ldi	r24, 0x04	; 4
   1244c:	61 e0       	ldi	r22, 0x01	; 1
   1244e:	4f ea       	ldi	r20, 0xAF	; 175
   12450:	5e e1       	ldi	r21, 0x1E	; 30
   12452:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
				   //IsStandaloneAcknoledge=False;
		           SendSlaveCommand(SC_STANDALONE,DispenserBrand);
   12456:	82 e0       	ldi	r24, 0x02	; 2
   12458:	60 91 5e 01 	lds	r22, 0x015E
   1245c:	0e 94 0a 60 	call	0xc014	; 0xc014 <SendSlaveCommand>
                   //InitStandalone();

			       DisplayPumpStatus();
   12460:	0e 94 8f 49 	call	0x931e	; 0x931e <DisplayPumpStatus>
			       iCon=0;
			       iTry++;}
   12464:	d3 94       	inc	r13
   12466:	ff 24       	eor	r15, r15
		           if (iTry>3) break; 
   12468:	a3 e0       	ldi	r26, 0x03	; 3
   1246a:	ad 15       	cp	r26, r13
   1246c:	20 f0       	brcs	.+8      	; 0x12476 <InitializeConnection+0x1ea>
	    lcd_printf(1,1,PSTR("Scan Pump"));
		strcpy_P(lcdteks,(PGM_P)pgm_read_word(&(DefListDispenserName[eeprom_read_byte(&DefDispenserBrand)])));
		sprintf_P(lcdteks,PSTR("%s"),lcdteks);
	    lcd_print(2,1,lcdteks);

	    while (IsStandAloneDetected==False){
   1246e:	80 91 9c 01 	lds	r24, 0x019C
   12472:	88 23       	and	r24, r24
   12474:	a1 f2       	breq	.-88     	; 0x1241e <InitializeConnection+0x192>
			       iCon=0;
			       iTry++;}
		           if (iTry>3) break; 
	    }
	}//EndIf
	if(IsMessage11==True){
   12476:	10 91 a0 01 	lds	r17, 0x01A0
   1247a:	11 30       	cpi	r17, 0x01	; 1
   1247c:	d9 f4       	brne	.+54     	; 0x124b4 <InitializeConnection+0x228>
	   lcd_printf(4,1,PSTR("Connected           "));
   1247e:	84 e0       	ldi	r24, 0x04	; 4
   12480:	61 e0       	ldi	r22, 0x01	; 1
   12482:	4a e9       	ldi	r20, 0x9A	; 154
   12484:	5e e1       	ldi	r21, 0x1E	; 30
   12486:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
	   eeprom_write_byte(&DefInitIFT,IT_SLAVE);
   1248a:	87 e3       	ldi	r24, 0x37	; 55
   1248c:	91 e0       	ldi	r25, 0x01	; 1
   1248e:	61 e0       	ldi	r22, 0x01	; 1
   12490:	0e 94 3d ad 	call	0x15a7a	; 0x15a7a <__eewr_byte_m128>
	   IFType=IT_SLAVE;
   12494:	10 93 00 01 	sts	0x0100, r17
   12498:	80 e3       	ldi	r24, 0x30	; 48
   1249a:	95 e7       	ldi	r25, 0x75	; 117
   1249c:	29 e1       	ldi	r18, 0x19	; 25
   1249e:	30 e0       	ldi	r19, 0x00	; 0
   124a0:	f9 01       	movw	r30, r18
   124a2:	31 97       	sbiw	r30, 0x01	; 1
   124a4:	f1 f7       	brne	.-4      	; 0x124a2 <InitializeConnection+0x216>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
   124a6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
   124a8:	d9 f7       	brne	.-10     	; 0x124a0 <InitializeConnection+0x214>
	   _delay_ms(3000);
	   //IsErrorTCPIP=False;
	   procMessage11();
   124aa:	0e 94 4c 46 	call	0x8c98	; 0x8c98 <procMessage11>
	   IsAdvanzStartupInfo=True;
   124ae:	81 e0       	ldi	r24, 0x01	; 1
   124b0:	80 93 aa 01 	sts	0x01AA, r24
	}
	if(IsStandAloneDetected==True){
   124b4:	80 91 9c 01 	lds	r24, 0x019C
   124b8:	81 30       	cpi	r24, 0x01	; 1
   124ba:	71 f4       	brne	.+28     	; 0x124d8 <InitializeConnection+0x24c>
	   lcd_printf(4,1,PSTR("PumpFound"));
   124bc:	84 e0       	ldi	r24, 0x04	; 4
   124be:	61 e0       	ldi	r22, 0x01	; 1
   124c0:	40 e9       	ldi	r20, 0x90	; 144
   124c2:	5e e1       	ldi	r21, 0x1E	; 30
   124c4:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
	   eeprom_write_byte(&DefInitIFT,IT_STANDALONE);
   124c8:	87 e3       	ldi	r24, 0x37	; 55
   124ca:	91 e0       	ldi	r25, 0x01	; 1
   124cc:	62 e0       	ldi	r22, 0x02	; 2
   124ce:	0e 94 3d ad 	call	0x15a7a	; 0x15a7a <__eewr_byte_m128>
	   IFType=IT_STANDALONE;
   124d2:	82 e0       	ldi	r24, 0x02	; 2
   124d4:	80 93 00 01 	sts	0x0100, r24
	}
	//PrintStatus
	if (eeprom_read_byte(&DefPrintInitialize)==True)GeneratePrintInit();
   124d8:	86 e3       	ldi	r24, 0x36	; 54
   124da:	91 e0       	ldi	r25, 0x01	; 1
   124dc:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
   124e0:	81 30       	cpi	r24, 0x01	; 1
   124e2:	11 f4       	brne	.+4      	; 0x124e8 <InitializeConnection+0x25c>
   124e4:	0e 94 96 32 	call	0x652c	; 0x652c <GeneratePrintInit>
	if ((IsStandAloneDetected==False)&&(IsMessage11==False)){		
   124e8:	80 91 9c 01 	lds	r24, 0x019C
   124ec:	88 23       	and	r24, r24
   124ee:	89 f5       	brne	.+98     	; 0x12552 <InitializeConnection+0x2c6>
   124f0:	80 91 a0 01 	lds	r24, 0x01A0
   124f4:	88 23       	and	r24, r24
   124f6:	69 f5       	brne	.+90     	; 0x12552 <InitializeConnection+0x2c6>
		 lcd_printf(2,1,PSTR("TCP/IP Error"));
   124f8:	82 e0       	ldi	r24, 0x02	; 2
   124fa:	61 e0       	ldi	r22, 0x01	; 1
   124fc:	43 e8       	ldi	r20, 0x83	; 131
   124fe:	5e e1       	ldi	r21, 0x1E	; 30
   12500:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		 lcd_printf(3,1,PSTR("No Pump Found"));
   12504:	83 e0       	ldi	r24, 0x03	; 3
   12506:	61 e0       	ldi	r22, 0x01	; 1
   12508:	45 e7       	ldi	r20, 0x75	; 117
   1250a:	5e e1       	ldi	r21, 0x1E	; 30
   1250c:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
   12510:	80 e2       	ldi	r24, 0x20	; 32
   12512:	9e e4       	ldi	r25, 0x4E	; 78
   12514:	29 e1       	ldi	r18, 0x19	; 25
   12516:	30 e0       	ldi	r19, 0x00	; 0
   12518:	f9 01       	movw	r30, r18
   1251a:	31 97       	sbiw	r30, 0x01	; 1
   1251c:	f1 f7       	brne	.-4      	; 0x1251a <InitializeConnection+0x28e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
   1251e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
   12520:	d9 f7       	brne	.-10     	; 0x12518 <InitializeConnection+0x28c>
		 _delay_ms(2000);
		 ForceType=systemForceType();
   12522:	0e 94 6a 53 	call	0xa6d4	; 0xa6d4 <systemForceType>
		 if (ForceType=='1'){
   12526:	81 33       	cpi	r24, 0x31	; 49
   12528:	29 f4       	brne	.+10     	; 0x12534 <InitializeConnection+0x2a8>
		     IFType=IT_SLAVE;
   1252a:	81 e0       	ldi	r24, 0x01	; 1
   1252c:	80 93 00 01 	sts	0x0100, r24
			 SendSlaveCommand(SC_SLAVE,ST_NONE);
   12530:	60 e0       	ldi	r22, 0x00	; 0
   12532:	07 c0       	rjmp	.+14     	; 0x12542 <InitializeConnection+0x2b6>
         }
		 else
		 if (ForceType=='2'){
   12534:	82 33       	cpi	r24, 0x32	; 50
   12536:	39 f4       	brne	.+14     	; 0x12546 <InitializeConnection+0x2ba>
		     IFType=IT_STANDALONE;
   12538:	82 e0       	ldi	r24, 0x02	; 2
   1253a:	80 93 00 01 	sts	0x0100, r24
			 SendSlaveCommand(SC_STANDALONE,DispenserBrand);
   1253e:	60 91 5e 01 	lds	r22, 0x015E
   12542:	0e 94 0a 60 	call	0xc014	; 0xc014 <SendSlaveCommand>

			 //SendPoolingCommand(SC_SET_POOLING_MAX_PUMP,eeprom_read_byte(&DefPoolingPumpMax));

			 //InitStandalone();
         }
		 eeprom_write_byte(&DefInitIFT,IFType);
   12546:	87 e3       	ldi	r24, 0x37	; 55
   12548:	91 e0       	ldi	r25, 0x01	; 1
   1254a:	60 91 00 01 	lds	r22, 0x0100
   1254e:	0e 94 3d ad 	call	0x15a7a	; 0x15a7a <__eewr_byte_m128>
	}
	InitMemory();
   12552:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <InitMemory>
	//SendSlaveCommand(SC_START_POOL_SEQUENCE,0);
	
}
   12556:	64 96       	adiw	r28, 0x14	; 20
   12558:	0f b6       	in	r0, 0x3f	; 63
   1255a:	f8 94       	cli
   1255c:	de bf       	out	0x3e, r29	; 62
   1255e:	0f be       	out	0x3f, r0	; 63
   12560:	cd bf       	out	0x3d, r28	; 61
   12562:	cf 91       	pop	r28
   12564:	df 91       	pop	r29
   12566:	1f 91       	pop	r17
   12568:	0f 91       	pop	r16
   1256a:	ff 90       	pop	r15
   1256c:	ef 90       	pop	r14
   1256e:	df 90       	pop	r13
   12570:	08 95       	ret

00012572 <sendMessage04>:
	 UpdateServerIP();//ReadDestIP
	 //strTranNo = strReceiptNum
	 sprintf_P(strSend,PSTR("%s%s%s%s04%s1F968CFFB"),strIFT_ID,strSeqNum,strClientIP,strServerIP,strTranNo);
     uart_print(1, 0,strSend);
	 uart(1, 1,0x02);
	 */IFTSendMessage(MSG_04);
   12572:	84 e0       	ldi	r24, 0x04	; 4
   12574:	0e 94 22 7a 	call	0xf444	; 0xf444 <IFTSendMessage>
}
   12578:	08 95       	ret

0001257a <FreePrinting>:
	 } 
	 else uart(_COM_PRINTER,1,xSend);
	 zSend=xSend;
}

void FreePrinting(){
   1257a:	0f 93       	push	r16
   1257c:	1f 93       	push	r17
   1257e:	df 93       	push	r29
   12580:	cf 93       	push	r28
   12582:	cd b7       	in	r28, 0x3d	; 61
   12584:	de b7       	in	r29, 0x3e	; 62
   12586:	64 97       	sbiw	r28, 0x14	; 20
   12588:	0f b6       	in	r0, 0x3f	; 63
   1258a:	f8 94       	cli
   1258c:	de bf       	out	0x3e, r29	; 62
   1258e:	0f be       	out	0x3f, r0	; 63
   12590:	cd bf       	out	0x3d, r28	; 61
static char iPrinted=0,iHeader=0,iFooter=0,PrintCopy=0,iMargin=0,iScroll=0,nScroll=0;
static unsigned int iSend=0,LSend=0,iLoop=0;
       char strOperatorName[20];

     //Normalize FreePrintIdleState
     if ((IsFreePrinting==True)&&(stFreePrinting!=fpInit)){
   12592:	20 91 a8 01 	lds	r18, 0x01A8
   12596:	21 30       	cpi	r18, 0x01	; 1
   12598:	31 f4       	brne	.+12     	; 0x125a6 <FreePrinting+0x2c>
   1259a:	80 91 25 01 	lds	r24, 0x0125
   1259e:	81 30       	cpi	r24, 0x01	; 1
   125a0:	11 f0       	breq	.+4      	; 0x125a6 <FreePrinting+0x2c>
	     stFreePrinting=fpInit;
   125a2:	20 93 25 01 	sts	0x0125, r18
	 }
	 switch (stFreePrinting){
   125a6:	80 91 25 01 	lds	r24, 0x0125
   125aa:	90 e0       	ldi	r25, 0x00	; 0
   125ac:	fc 01       	movw	r30, r24
   125ae:	31 97       	sbiw	r30, 0x01	; 1
   125b0:	eb 31       	cpi	r30, 0x1B	; 27
   125b2:	f1 05       	cpc	r31, r1
   125b4:	08 f0       	brcs	.+2      	; 0x125b8 <FreePrinting+0x3e>
   125b6:	7b c3       	rjmp	.+1782   	; 0x12cae <FreePrinting+0x734>
   125b8:	e3 53       	subi	r30, 0x33	; 51
   125ba:	ff 4f       	sbci	r31, 0xFF	; 255
   125bc:	ee 0f       	add	r30, r30
   125be:	ff 1f       	adc	r31, r31
   125c0:	05 90       	lpm	r0, Z+
   125c2:	f4 91       	lpm	r31, Z+
   125c4:	e0 2d       	mov	r30, r0
   125c6:	09 94       	ijmp
     case fpInit:
	      //uart_printf(0,1,PSTR("fpInit"));
	      if (IsFreePrinting==True){
   125c8:	21 30       	cpi	r18, 0x01	; 1
   125ca:	09 f0       	breq	.+2      	; 0x125ce <FreePrinting+0x54>
   125cc:	70 c3       	rjmp	.+1760   	; 0x12cae <FreePrinting+0x734>
		      IsFreePrinting=False;
   125ce:	10 92 a8 01 	sts	0x01A8, r1
			  IsBusyFreePrinting=True;
   125d2:	20 93 b4 01 	sts	0x01B4, r18
			  IsBusyPrint=False;
   125d6:	10 92 b3 01 	sts	0x01B3, r1
			  iPrinted=0,iFooter=0;
   125da:	10 92 f5 01 	sts	0x01F5, r1
   125de:	10 92 f3 01 	sts	0x01F3, r1

			  PrintCopy=(cmdPrint&0x0F);
   125e2:	80 91 b5 01 	lds	r24, 0x01B5
   125e6:	8f 70       	andi	r24, 0x0F	; 15
   125e8:	80 93 f2 01 	sts	0x01F2, r24

			  //cmdPrint=cmdPrint|0b00100000;
			  //PrintCopy=2;

			  stFreePrinting=fpInitHeader;
   125ec:	82 e0       	ldi	r24, 0x02	; 2
   125ee:	80 93 25 01 	sts	0x0125, r24
			  InitPrinter();
   125f2:	0e 94 a2 45 	call	0x8b44	; 0x8b44 <InitPrinter>
   125f6:	5b c3       	rjmp	.+1718   	; 0x12cae <FreePrinting+0x734>
			  }
	      break;
     case fpInitHeader:
	      //uart_printf(0,1,PSTR("fpInitHeader"));
		  iHeader=0;
   125f8:	10 92 f4 01 	sts	0x01F4, r1
	      if (((cmdPrint&0b10000000)>>7)==1){
   125fc:	80 91 b5 01 	lds	r24, 0x01B5
   12600:	88 1f       	adc	r24, r24
   12602:	88 27       	eor	r24, r24
   12604:	88 1f       	adc	r24, r24
   12606:	90 e0       	ldi	r25, 0x00	; 0
   12608:	81 30       	cpi	r24, 0x01	; 1
   1260a:	91 05       	cpc	r25, r1
   1260c:	11 f1       	breq	.+68     	; 0x12652 <FreePrinting+0xd8>
		      stFreePrinting=fpLoadHeader;
			  }
		  else
	      if (((cmdPrint&0b10000000)>>7)==0) stFreePrinting=fpInitMessage;	      
   1260e:	89 2b       	or	r24, r25
   12610:	09 f0       	breq	.+2      	; 0x12614 <FreePrinting+0x9a>
   12612:	4d c3       	rjmp	.+1690   	; 0x12cae <FreePrinting+0x734>
   12614:	85 e0       	ldi	r24, 0x05	; 5
   12616:	80 93 25 01 	sts	0x0125, r24
   1261a:	49 c3       	rjmp	.+1682   	; 0x12cae <FreePrinting+0x734>
	      break;
     case fpLoadHeader:
	      //uart_printf(0,1,PSTR("fpLoadHeader"));
          //Header 1
	      eeprom_read_block((void*) &strPrint, (const void*) &DefHeaderFooter[iHeader], 40);
   1261c:	60 91 f4 01 	lds	r22, 0x01F4
   12620:	89 e2       	ldi	r24, 0x29	; 41
   12622:	68 9f       	mul	r22, r24
   12624:	b0 01       	movw	r22, r0
   12626:	11 24       	eor	r1, r1
   12628:	68 5d       	subi	r22, 0xD8	; 216
   1262a:	7d 4f       	sbci	r23, 0xFD	; 253
   1262c:	8e e3       	ldi	r24, 0x3E	; 62
   1262e:	99 e0       	ldi	r25, 0x09	; 9
   12630:	48 e2       	ldi	r20, 0x28	; 40
   12632:	50 e0       	ldi	r21, 0x00	; 0
   12634:	0e 94 1b ad 	call	0x15a36	; 0x15a36 <__eerd_block_m128>
		  iHeader++;
   12638:	80 91 f4 01 	lds	r24, 0x01F4
   1263c:	8f 5f       	subi	r24, 0xFF	; 255
   1263e:	80 93 f4 01 	sts	0x01F4, r24
		  if (iHeader<6){
   12642:	86 30       	cpi	r24, 0x06	; 6
   12644:	38 f7       	brcc	.-50     	; 0x12614 <FreePrinting+0x9a>
		      if (SpaceOnly(strPrint)==True){
   12646:	8e e3       	ldi	r24, 0x3E	; 62
   12648:	99 e0       	ldi	r25, 0x09	; 9
   1264a:	0e 94 20 24 	call	0x4840	; 0x4840 <SpaceOnly>
   1264e:	81 30       	cpi	r24, 0x01	; 1
   12650:	11 f4       	brne	.+4      	; 0x12656 <FreePrinting+0xdc>
			      stFreePrinting=fpLoadHeader;
   12652:	83 e0       	ldi	r24, 0x03	; 3
   12654:	e0 cf       	rjmp	.-64     	; 0x12616 <FreePrinting+0x9c>
				  }	      
			  else{
			      stFreePrinting=fpPrintHeader;
   12656:	84 e0       	ldi	r24, 0x04	; 4
   12658:	80 93 25 01 	sts	0x0125, r24
			      iSend=0;
   1265c:	10 92 ee 01 	sts	0x01EE, r1
   12660:	10 92 ed 01 	sts	0x01ED, r1
				  iLoop=0;
   12664:	10 92 ea 01 	sts	0x01EA, r1
   12668:	10 92 e9 01 	sts	0x01E9, r1
				  //PrintDoubleHeight on 1st Header
				  if (iHeader==1) PrintDoubleHeight();
   1266c:	80 91 f4 01 	lds	r24, 0x01F4
   12670:	81 30       	cpi	r24, 0x01	; 1
   12672:	19 f4       	brne	.+6      	; 0x1267a <FreePrinting+0x100>
   12674:	0e 94 1c 46 	call	0x8c38	; 0x8c38 <PrintDoubleHeight>
   12678:	1a c3       	rjmp	.+1588   	; 0x12cae <FreePrinting+0x734>
				  else 
				  if (iHeader==2) PrintNormalHeight();
   1267a:	82 30       	cpi	r24, 0x02	; 2
   1267c:	09 f0       	breq	.+2      	; 0x12680 <FreePrinting+0x106>
   1267e:	17 c3       	rjmp	.+1582   	; 0x12cae <FreePrinting+0x734>
   12680:	0e 94 06 46 	call	0x8c0c	; 0x8c0c <PrintNormalHeight>
   12684:	14 c3       	rjmp	.+1576   	; 0x12cae <FreePrinting+0x734>
		  {stFreePrinting=fpInitMessage;
		  }
	      break;
     case fpPrintHeader:
	      //uart_printf(0,1,PSTR("fpPrintHeader"));
		  if (iSend<40){
   12686:	80 91 ed 01 	lds	r24, 0x01ED
   1268a:	90 91 ee 01 	lds	r25, 0x01EE
   1268e:	88 97       	sbiw	r24, 0x28	; 40
   12690:	68 f4       	brcc	.+26     	; 0x126ac <FreePrinting+0x132>
		      iLoop++;
   12692:	80 91 e9 01 	lds	r24, 0x01E9
   12696:	90 91 ea 01 	lds	r25, 0x01EA
   1269a:	01 96       	adiw	r24, 0x01	; 1
   1269c:	90 93 ea 01 	sts	0x01EA, r25
   126a0:	80 93 e9 01 	sts	0x01E9, r24
			  if ((iLoop%PRINT_DELAY)==0){
			     //uart(_COM_PRINTER,1,strPrint[iSend]);
		         //iSend++;
				 TimPrintBusy=0;
   126a4:	10 92 b6 01 	sts	0x01B6, r1
				 stFreePrinting=fpCheckPrintStatusHeader;
   126a8:	82 e1       	ldi	r24, 0x12	; 18
   126aa:	b5 cf       	rjmp	.-150    	; 0x12616 <FreePrinting+0x9c>
				 }
			  }
          else{ 
		     stFreePrinting=fpLoadHeader;
   126ac:	83 e0       	ldi	r24, 0x03	; 3
   126ae:	5c c2       	rjmp	.+1208   	; 0x12b68 <FreePrinting+0x5ee>
			 CarriegeReturn();
		  }
	      break;

     case fpCheckPrintStatusHeader:
	      if (IsBusyPrint==False){
   126b0:	80 91 b3 01 	lds	r24, 0x01B3
   126b4:	88 23       	and	r24, r24
   126b6:	09 f0       	breq	.+2      	; 0x126ba <FreePrinting+0x140>
   126b8:	76 c2       	rjmp	.+1260   	; 0x12ba6 <FreePrinting+0x62c>
		      uart(_COM_PRINTER,1,strPrint[iSend]);
   126ba:	e0 91 ed 01 	lds	r30, 0x01ED
   126be:	f0 91 ee 01 	lds	r31, 0x01EE
   126c2:	e2 5c       	subi	r30, 0xC2	; 194
   126c4:	f6 4f       	sbci	r31, 0xF6	; 246
   126c6:	61 e0       	ldi	r22, 0x01	; 1
   126c8:	40 81       	ld	r20, Z
   126ca:	0e 94 bd a8 	call	0x1517a	; 0x1517a <uart>
		      iSend++;
   126ce:	80 91 ed 01 	lds	r24, 0x01ED
   126d2:	90 91 ee 01 	lds	r25, 0x01EE
   126d6:	01 96       	adiw	r24, 0x01	; 1
   126d8:	90 93 ee 01 	sts	0x01EE, r25
   126dc:	80 93 ed 01 	sts	0x01ED, r24
		      stFreePrinting=fpPrintHeader;
   126e0:	84 e0       	ldi	r24, 0x04	; 4
   126e2:	5f c2       	rjmp	.+1214   	; 0x12ba2 <FreePrinting+0x628>
		      stFreePrinting=fpFinishFreePrinting;
			  }
	      break;
     case fpInitMessage:
	      //uart_printf(0,1,PSTR("fpInitMessage"));
	      iSend=0;iLoop=0;
   126e4:	10 92 ee 01 	sts	0x01EE, r1
   126e8:	10 92 ed 01 	sts	0x01ED, r1
   126ec:	10 92 ea 01 	sts	0x01EA, r1
   126f0:	10 92 e9 01 	sts	0x01E9, r1
          stFreePrinting=fpPrintMessage; 
   126f4:	08 e0       	ldi	r16, 0x08	; 8
   126f6:	00 93 25 01 	sts	0x0125, r16
		  CarriegeReturn();
   126fa:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
		  if (iPrinted>0) stFreePrinting=fpInitDuplicate;
   126fe:	80 91 f5 01 	lds	r24, 0x01F5
   12702:	88 23       	and	r24, r24
   12704:	11 f0       	breq	.+4      	; 0x1270a <FreePrinting+0x190>
   12706:	86 e0       	ldi	r24, 0x06	; 6
   12708:	86 cf       	rjmp	.-244    	; 0x12616 <FreePrinting+0x9c>
		  else stFreePrinting=fpPrintMessage; 
   1270a:	00 93 25 01 	sts	0x0125, r16
   1270e:	cf c2       	rjmp	.+1438   	; 0x12cae <FreePrinting+0x734>
	      break;
     case fpInitDuplicate:
	      //uart_printf(0,1,PSTR("fpInitDuplicate"));
          if (iPrinted>0)sprintf_P(strPrint,PSTR("             DUPLICATE COPY        "));
   12710:	80 91 f5 01 	lds	r24, 0x01F5
   12714:	2e e3       	ldi	r18, 0x3E	; 62
   12716:	39 e0       	ldi	r19, 0x09	; 9
   12718:	88 23       	and	r24, r24
   1271a:	79 f0       	breq	.+30     	; 0x1273a <FreePrinting+0x1c0>
   1271c:	00 d0       	rcall	.+0      	; 0x1271e <FreePrinting+0x1a4>
   1271e:	00 d0       	rcall	.+0      	; 0x12720 <FreePrinting+0x1a6>
   12720:	ad b7       	in	r26, 0x3d	; 61
   12722:	be b7       	in	r27, 0x3e	; 62
   12724:	12 96       	adiw	r26, 0x02	; 2
   12726:	3c 93       	st	X, r19
   12728:	2e 93       	st	-X, r18
   1272a:	11 97       	sbiw	r26, 0x01	; 1
   1272c:	8d e7       	ldi	r24, 0x7D	; 125
   1272e:	97 e0       	ldi	r25, 0x07	; 7
   12730:	14 96       	adiw	r26, 0x04	; 4
   12732:	9c 93       	st	X, r25
   12734:	8e 93       	st	-X, r24
   12736:	13 97       	sbiw	r26, 0x03	; 3
   12738:	0a c0       	rjmp	.+20     	; 0x1274e <FreePrinting+0x1d4>
          else           sprintf_P(strPrint,PSTR("                                   "));
   1273a:	00 d0       	rcall	.+0      	; 0x1273c <FreePrinting+0x1c2>
   1273c:	00 d0       	rcall	.+0      	; 0x1273e <FreePrinting+0x1c4>
   1273e:	ed b7       	in	r30, 0x3d	; 61
   12740:	fe b7       	in	r31, 0x3e	; 62
   12742:	32 83       	std	Z+2, r19	; 0x02
   12744:	21 83       	std	Z+1, r18	; 0x01
   12746:	89 e5       	ldi	r24, 0x59	; 89
   12748:	97 e0       	ldi	r25, 0x07	; 7
   1274a:	94 83       	std	Z+4, r25	; 0x04
   1274c:	83 83       	std	Z+3, r24	; 0x03
   1274e:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
   12752:	0f 90       	pop	r0
   12754:	0f 90       	pop	r0
   12756:	0f 90       	pop	r0
   12758:	0f 90       	pop	r0
		  iSend=0;
   1275a:	10 92 ee 01 	sts	0x01EE, r1
   1275e:	10 92 ed 01 	sts	0x01ED, r1
		  iLoop=0;
   12762:	10 92 ea 01 	sts	0x01EA, r1
   12766:	10 92 e9 01 	sts	0x01E9, r1
		  LSend=strlen(strPrint);
   1276a:	ee e3       	ldi	r30, 0x3E	; 62
   1276c:	f9 e0       	ldi	r31, 0x09	; 9
   1276e:	01 90       	ld	r0, Z+
   12770:	00 20       	and	r0, r0
   12772:	e9 f7       	brne	.-6      	; 0x1276e <FreePrinting+0x1f4>
   12774:	31 97       	sbiw	r30, 0x01	; 1
   12776:	ee 53       	subi	r30, 0x3E	; 62
   12778:	f9 40       	sbci	r31, 0x09	; 9
   1277a:	f0 93 ec 01 	sts	0x01EC, r31
   1277e:	e0 93 eb 01 	sts	0x01EB, r30
          stFreePrinting=fpPrintDuplicate; 
   12782:	87 e0       	ldi	r24, 0x07	; 7
   12784:	48 cf       	rjmp	.-368    	; 0x12616 <FreePrinting+0x9c>
	      break;
     case fpPrintDuplicate:
	      //uart_printf(0,1,PSTR("fpPrintDuplicate"));
		  if (iSend<LSend){
   12786:	20 91 ed 01 	lds	r18, 0x01ED
   1278a:	30 91 ee 01 	lds	r19, 0x01EE
   1278e:	80 91 eb 01 	lds	r24, 0x01EB
   12792:	90 91 ec 01 	lds	r25, 0x01EC
   12796:	28 17       	cp	r18, r24
   12798:	39 07       	cpc	r19, r25
   1279a:	68 f4       	brcc	.+26     	; 0x127b6 <FreePrinting+0x23c>
		      iLoop++;
   1279c:	80 91 e9 01 	lds	r24, 0x01E9
   127a0:	90 91 ea 01 	lds	r25, 0x01EA
   127a4:	01 96       	adiw	r24, 0x01	; 1
   127a6:	90 93 ea 01 	sts	0x01EA, r25
   127aa:	80 93 e9 01 	sts	0x01E9, r24
			  if((iLoop%PRINT_DELAY)==0){
			     //uart(_COM_PRINTER,1,strPrint[iSend]);
				 //iSend++;
				 TimPrintBusy=0;
   127ae:	10 92 b6 01 	sts	0x01B6, r1
                 stFreePrinting=fpCheckPrintStatusDuplicate;
   127b2:	85 e1       	ldi	r24, 0x15	; 21
   127b4:	30 cf       	rjmp	.-416    	; 0x12616 <FreePrinting+0x9c>
				 }
			  }
          else {
		     iSend=0;
   127b6:	10 92 ee 01 	sts	0x01EE, r1
   127ba:	10 92 ed 01 	sts	0x01ED, r1
		     stFreePrinting=fpPrintMessage;
   127be:	88 e0       	ldi	r24, 0x08	; 8
   127c0:	d3 c1       	rjmp	.+934    	; 0x12b68 <FreePrinting+0x5ee>
			 CarriegeReturn();	      
			 }
	      break;
     case fpCheckPrintStatusDuplicate:
	      if (IsBusyPrint==False){
   127c2:	80 91 b3 01 	lds	r24, 0x01B3
   127c6:	88 23       	and	r24, r24
   127c8:	09 f0       	breq	.+2      	; 0x127cc <FreePrinting+0x252>
   127ca:	ed c1       	rjmp	.+986    	; 0x12ba6 <FreePrinting+0x62c>
		      uart(_COM_PRINTER,1,strPrint[iSend]);
   127cc:	e0 91 ed 01 	lds	r30, 0x01ED
   127d0:	f0 91 ee 01 	lds	r31, 0x01EE
   127d4:	e2 5c       	subi	r30, 0xC2	; 194
   127d6:	f6 4f       	sbci	r31, 0xF6	; 246
   127d8:	61 e0       	ldi	r22, 0x01	; 1
   127da:	40 81       	ld	r20, Z
   127dc:	0e 94 bd a8 	call	0x1517a	; 0x1517a <uart>
		      iSend++;
   127e0:	80 91 ed 01 	lds	r24, 0x01ED
   127e4:	90 91 ee 01 	lds	r25, 0x01EE
   127e8:	01 96       	adiw	r24, 0x01	; 1
   127ea:	90 93 ee 01 	sts	0x01EE, r25
   127ee:	80 93 ed 01 	sts	0x01ED, r24
		      stFreePrinting=fpPrintDuplicate;
   127f2:	87 e0       	ldi	r24, 0x07	; 7
   127f4:	d6 c1       	rjmp	.+940    	; 0x12ba2 <FreePrinting+0x628>
		      stFreePrinting=fpFinishFreePrinting;
			  }
	      break;

     case fpPrintMessage:
		  if (iSend<LengthMessage81){
   127f6:	20 91 ed 01 	lds	r18, 0x01ED
   127fa:	30 91 ee 01 	lds	r19, 0x01EE
   127fe:	80 91 8d 01 	lds	r24, 0x018D
   12802:	90 91 8e 01 	lds	r25, 0x018E
   12806:	28 17       	cp	r18, r24
   12808:	39 07       	cpc	r19, r25
   1280a:	68 f4       	brcc	.+26     	; 0x12826 <FreePrinting+0x2ac>
		      iLoop++;
   1280c:	80 91 e9 01 	lds	r24, 0x01E9
   12810:	90 91 ea 01 	lds	r25, 0x01EA
   12814:	01 96       	adiw	r24, 0x01	; 1
   12816:	90 93 ea 01 	sts	0x01EA, r25
   1281a:	80 93 e9 01 	sts	0x01E9, r24
			  if((iLoop%PRINT_DELAY)==0){
			     TimPrintBusy=0;
   1281e:	10 92 b6 01 	sts	0x01B6, r1
				 stFreePrinting=fpCheckPrintStatusMessage;
   12822:	83 e1       	ldi	r24, 0x13	; 19
   12824:	f8 ce       	rjmp	.-528    	; 0x12616 <FreePrinting+0x9c>
				 }
			  }
          else stFreePrinting=fpLoadEndLine;//fpInitFooter;
   12826:	86 e1       	ldi	r24, 0x16	; 22
   12828:	f6 ce       	rjmp	.-532    	; 0x12616 <FreePrinting+0x9c>
	      break;
     
     case fpCheckPrintStatusMessage:
	      if (IsBusyPrint==False){
   1282a:	80 91 b3 01 	lds	r24, 0x01B3
   1282e:	88 23       	and	r24, r24
   12830:	09 f0       	breq	.+2      	; 0x12834 <FreePrinting+0x2ba>
   12832:	b9 c1       	rjmp	.+882    	; 0x12ba6 <FreePrinting+0x62c>
              if ((PrintBuffer[iSend]!=0x0D)||(PrintBuffer[iSend]!=0x0A))
			      SendPrint(PrintBuffer[iSend],PrintBuffer[iSend+1]);
   12834:	e0 91 ed 01 	lds	r30, 0x01ED
   12838:	f0 91 ee 01 	lds	r31, 0x01EE
   1283c:	e2 59       	subi	r30, 0x92	; 146
   1283e:	fb 4f       	sbci	r31, 0xFB	; 251
   12840:	80 81       	ld	r24, Z
   12842:	61 81       	ldd	r22, Z+1	; 0x01
   12844:	0e 94 7f 45 	call	0x8afe	; 0x8afe <SendPrint>
			     // uart(_COM_PRINTER,1,PrintBuffer[iSend]);
              if ((PrintBuffer[iSend]==0x0D)||(PrintBuffer[iSend+1]==0x0A))
   12848:	e0 91 ed 01 	lds	r30, 0x01ED
   1284c:	f0 91 ee 01 	lds	r31, 0x01EE
   12850:	e2 59       	subi	r30, 0x92	; 146
   12852:	fb 4f       	sbci	r31, 0xFB	; 251
   12854:	80 81       	ld	r24, Z
   12856:	8d 30       	cpi	r24, 0x0D	; 13
   12858:	19 f0       	breq	.+6      	; 0x12860 <FreePrinting+0x2e6>
   1285a:	81 81       	ldd	r24, Z+1	; 0x01
   1285c:	8a 30       	cpi	r24, 0x0A	; 10
   1285e:	11 f4       	brne	.+4      	; 0x12864 <FreePrinting+0x2ea>
			     CarriegeReturn();
   12860:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
             iSend++;
   12864:	80 91 ed 01 	lds	r24, 0x01ED
   12868:	90 91 ee 01 	lds	r25, 0x01EE
   1286c:	01 96       	adiw	r24, 0x01	; 1
   1286e:	90 93 ee 01 	sts	0x01EE, r25
   12872:	80 93 ed 01 	sts	0x01ED, r24
		     stFreePrinting=fpPrintMessage;
   12876:	88 e0       	ldi	r24, 0x08	; 8
   12878:	94 c1       	rjmp	.+808    	; 0x12ba2 <FreePrinting+0x628>
		      stFreePrinting=fpFinishFreePrinting;
			  }
	      break;
     //SpaceAdded
	 case fpInitSpace:
	      iLoop=0;
   1287a:	10 92 ea 01 	sts	0x01EA, r1
   1287e:	10 92 e9 01 	sts	0x01E9, r1
		  iMargin=0;
   12882:	10 92 f1 01 	sts	0x01F1, r1
		  stFreePrinting=fpPrintMargin;
   12886:	8a e0       	ldi	r24, 0x0A	; 10
   12888:	c6 ce       	rjmp	.-628    	; 0x12616 <FreePrinting+0x9c>
	      break;
	 case fpPrintMargin:
		  if (iMargin<PRINT_MARGIN){
   1288a:	80 91 f1 01 	lds	r24, 0x01F1
   1288e:	85 30       	cpi	r24, 0x05	; 5
   12890:	90 f4       	brcc	.+36     	; 0x128b6 <FreePrinting+0x33c>
		      iMargin++;
   12892:	8f 5f       	subi	r24, 0xFF	; 255
   12894:	80 93 f1 01 	sts	0x01F1, r24
		      iLoop++;
   12898:	80 91 e9 01 	lds	r24, 0x01E9
   1289c:	90 91 ea 01 	lds	r25, 0x01EA
   128a0:	01 96       	adiw	r24, 0x01	; 1
   128a2:	90 93 ea 01 	sts	0x01EA, r25
   128a6:	80 93 e9 01 	sts	0x01E9, r24
	          if ((iLoop%PRINT_DELAY)==0)uart(_COM_PRINTER,1,' ');
   128aa:	80 e0       	ldi	r24, 0x00	; 0
   128ac:	61 e0       	ldi	r22, 0x01	; 1
   128ae:	40 e2       	ldi	r20, 0x20	; 32
   128b0:	0e 94 bd a8 	call	0x1517a	; 0x1517a <uart>
   128b4:	fc c1       	rjmp	.+1016   	; 0x12cae <FreePrinting+0x734>
			 }
          else stFreePrinting=fpPrintMessage;
   128b6:	88 e0       	ldi	r24, 0x08	; 8
   128b8:	ae ce       	rjmp	.-676    	; 0x12616 <FreePrinting+0x9c>
	      break;
     
     //Added Operator Name:
	 case fpLoadEndLine:
		  eeprom_read_block((void*) &strOperatorName, (const void*) &DefOperatorName,18);
   128ba:	8e 01       	movw	r16, r28
   128bc:	0f 5f       	subi	r16, 0xFF	; 255
   128be:	1f 4f       	sbci	r17, 0xFF	; 255
   128c0:	c8 01       	movw	r24, r16
   128c2:	65 e1       	ldi	r22, 0x15	; 21
   128c4:	70 e0       	ldi	r23, 0x00	; 0
   128c6:	42 e1       	ldi	r20, 0x12	; 18
   128c8:	50 e0       	ldi	r21, 0x00	; 0
   128ca:	0e 94 1b ad 	call	0x15a36	; 0x15a36 <__eerd_block_m128>
   128ce:	c8 01       	movw	r24, r16
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   128d0:	9e 01       	movw	r18, r28
   128d2:	20 5f       	subi	r18, 0xF0	; 240
   128d4:	3f 4f       	sbci	r19, 0xFF	; 255
	    Dest[i]=Source[IdxSource+i];
   128d6:	01 96       	adiw	r24, 0x01	; 1
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   128d8:	82 17       	cp	r24, r18
   128da:	93 07       	cpc	r25, r19
   128dc:	e1 f7       	brne	.-8      	; 0x128d6 <FreePrinting+0x35c>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
   128de:	18 8a       	std	Y+16, r1	; 0x10
     
     //Added Operator Name:
	 case fpLoadEndLine:
		  eeprom_read_block((void*) &strOperatorName, (const void*) &DefOperatorName,18);
          StrPosCopy(strOperatorName,strOperatorName,0,15);
          if (strlen(strOperatorName)>0){
   128e0:	89 81       	ldd	r24, Y+1	; 0x01
   128e2:	88 23       	and	r24, r24
   128e4:	09 f4       	brne	.+2      	; 0x128e8 <FreePrinting+0x36e>
   128e6:	d4 c0       	rjmp	.+424    	; 0x12a90 <FreePrinting+0x516>
		  	  if (SpaceOnly(strOperatorName)!=True){
   128e8:	ce 01       	movw	r24, r28
   128ea:	01 96       	adiw	r24, 0x01	; 1
   128ec:	0e 94 20 24 	call	0x4840	; 0x4840 <SpaceOnly>
   128f0:	81 30       	cpi	r24, 0x01	; 1
   128f2:	09 f4       	brne	.+2      	; 0x128f6 <FreePrinting+0x37c>
   128f4:	cd c0       	rjmp	.+410    	; 0x12a90 <FreePrinting+0x516>
			      sprintf_P(strPrint,PSTR("---------------------------------"));
   128f6:	00 d0       	rcall	.+0      	; 0x128f8 <FreePrinting+0x37e>
   128f8:	00 d0       	rcall	.+0      	; 0x128fa <FreePrinting+0x380>
   128fa:	0e e3       	ldi	r16, 0x3E	; 62
   128fc:	19 e0       	ldi	r17, 0x09	; 9
   128fe:	ad b7       	in	r26, 0x3d	; 61
   12900:	be b7       	in	r27, 0x3e	; 62
   12902:	12 96       	adiw	r26, 0x02	; 2
   12904:	1c 93       	st	X, r17
   12906:	0e 93       	st	-X, r16
   12908:	11 97       	sbiw	r26, 0x01	; 1
   1290a:	87 e3       	ldi	r24, 0x37	; 55
   1290c:	97 e0       	ldi	r25, 0x07	; 7
   1290e:	14 96       	adiw	r26, 0x04	; 4
   12910:	9c 93       	st	X, r25
   12912:	8e 93       	st	-X, r24
   12914:	13 97       	sbiw	r26, 0x03	; 3
   12916:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
			      //AddSpaceLead(strPrint,(strlen(strPrint)+PRINT_MARGIN));
			      iSend=0;
   1291a:	10 92 ee 01 	sts	0x01EE, r1
   1291e:	10 92 ed 01 	sts	0x01ED, r1
				  iLoop=0;
   12922:	10 92 ea 01 	sts	0x01EA, r1
   12926:	10 92 e9 01 	sts	0x01E9, r1
				  LSend=strlen(strPrint);
   1292a:	f8 01       	movw	r30, r16
   1292c:	01 90       	ld	r0, Z+
   1292e:	00 20       	and	r0, r0
   12930:	e9 f7       	brne	.-6      	; 0x1292c <FreePrinting+0x3b2>
   12932:	8f 01       	movw	r16, r30
   12934:	01 50       	subi	r16, 0x01	; 1
   12936:	10 40       	sbci	r17, 0x00	; 0
   12938:	0e 53       	subi	r16, 0x3E	; 62
   1293a:	19 40       	sbci	r17, 0x09	; 9
   1293c:	10 93 ec 01 	sts	0x01EC, r17
   12940:	00 93 eb 01 	sts	0x01EB, r16
				  stFreePrinting=fpPrintEndLine;	
   12944:	87 e1       	ldi	r24, 0x17	; 23
   12946:	80 93 25 01 	sts	0x0125, r24
   1294a:	0f 90       	pop	r0
   1294c:	0f 90       	pop	r0
   1294e:	0f 90       	pop	r0
   12950:	0f 90       	pop	r0
   12952:	ad c1       	rjmp	.+858    	; 0x12cae <FreePrinting+0x734>
			   }else stFreePrinting=fpInitFooter;
		  }else stFreePrinting=fpInitFooter;
	      break;

	 case fpPrintEndLine:
		  if (iSend<LSend){
   12954:	20 91 ed 01 	lds	r18, 0x01ED
   12958:	30 91 ee 01 	lds	r19, 0x01EE
   1295c:	80 91 eb 01 	lds	r24, 0x01EB
   12960:	90 91 ec 01 	lds	r25, 0x01EC
   12964:	28 17       	cp	r18, r24
   12966:	39 07       	cpc	r19, r25
   12968:	68 f4       	brcc	.+26     	; 0x12984 <FreePrinting+0x40a>
		      iLoop++;
   1296a:	80 91 e9 01 	lds	r24, 0x01E9
   1296e:	90 91 ea 01 	lds	r25, 0x01EA
   12972:	01 96       	adiw	r24, 0x01	; 1
   12974:	90 93 ea 01 	sts	0x01EA, r25
   12978:	80 93 e9 01 	sts	0x01E9, r24
			  if((iLoop%PRINT_DELAY)==0){
				  TimPrintBusy=0;
   1297c:	10 92 b6 01 	sts	0x01B6, r1
				  stFreePrinting=fpCheckPrintEndLine;
   12980:	88 e1       	ldi	r24, 0x18	; 24
   12982:	49 ce       	rjmp	.-878    	; 0x12616 <FreePrinting+0x9c>
				}
			  }
          else {
			  CarriegeReturn();
   12984:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
			  stFreePrinting=fpLoadOperatorName;
   12988:	89 e1       	ldi	r24, 0x19	; 25
   1298a:	45 ce       	rjmp	.-886    	; 0x12616 <FreePrinting+0x9c>
			  }
	      break;
	 case fpCheckPrintEndLine:
	      if (IsBusyPrint==False){
   1298c:	80 91 b3 01 	lds	r24, 0x01B3
   12990:	88 23       	and	r24, r24
   12992:	09 f0       	breq	.+2      	; 0x12996 <FreePrinting+0x41c>
   12994:	08 c1       	rjmp	.+528    	; 0x12ba6 <FreePrinting+0x62c>
		      uart(_COM_PRINTER,1,strPrint[iSend]);
   12996:	e0 91 ed 01 	lds	r30, 0x01ED
   1299a:	f0 91 ee 01 	lds	r31, 0x01EE
   1299e:	e2 5c       	subi	r30, 0xC2	; 194
   129a0:	f6 4f       	sbci	r31, 0xF6	; 246
   129a2:	61 e0       	ldi	r22, 0x01	; 1
   129a4:	40 81       	ld	r20, Z
   129a6:	0e 94 bd a8 	call	0x1517a	; 0x1517a <uart>
		      iSend++;
   129aa:	80 91 ed 01 	lds	r24, 0x01ED
   129ae:	90 91 ee 01 	lds	r25, 0x01EE
   129b2:	01 96       	adiw	r24, 0x01	; 1
   129b4:	90 93 ee 01 	sts	0x01EE, r25
   129b8:	80 93 ed 01 	sts	0x01ED, r24
		      stFreePrinting=fpPrintEndLine;
   129bc:	87 e1       	ldi	r24, 0x17	; 23
   129be:	f1 c0       	rjmp	.+482    	; 0x12ba2 <FreePrinting+0x628>
		      stFreePrinting=fpFinishFreePrinting;
			  }
	      break;

	 case fpLoadOperatorName:
		  eeprom_read_block((void*) &strOperatorName, (const void*) &DefOperatorName,18);
   129c0:	8e 01       	movw	r16, r28
   129c2:	0f 5f       	subi	r16, 0xFF	; 255
   129c4:	1f 4f       	sbci	r17, 0xFF	; 255
   129c6:	c8 01       	movw	r24, r16
   129c8:	65 e1       	ldi	r22, 0x15	; 21
   129ca:	70 e0       	ldi	r23, 0x00	; 0
   129cc:	42 e1       	ldi	r20, 0x12	; 18
   129ce:	50 e0       	ldi	r21, 0x00	; 0
   129d0:	0e 94 1b ad 	call	0x15a36	; 0x15a36 <__eerd_block_m128>
   129d4:	c8 01       	movw	r24, r16
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   129d6:	9e 01       	movw	r18, r28
   129d8:	20 5f       	subi	r18, 0xF0	; 240
   129da:	3f 4f       	sbci	r19, 0xFF	; 255
	    Dest[i]=Source[IdxSource+i];
   129dc:	01 96       	adiw	r24, 0x01	; 1
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   129de:	82 17       	cp	r24, r18
   129e0:	93 07       	cpc	r25, r19
   129e2:	e1 f7       	brne	.-8      	; 0x129dc <FreePrinting+0x462>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
   129e4:	18 8a       	std	Y+16, r1	; 0x10
	      break;

	 case fpLoadOperatorName:
		  eeprom_read_block((void*) &strOperatorName, (const void*) &DefOperatorName,18);
		  StrPosCopy(strOperatorName,strOperatorName,0,15);
		  sprintf_P(strPrint,PSTR("Operator: %s"),strOperatorName);
   129e6:	00 d0       	rcall	.+0      	; 0x129e8 <FreePrinting+0x46e>
   129e8:	00 d0       	rcall	.+0      	; 0x129ea <FreePrinting+0x470>
   129ea:	00 d0       	rcall	.+0      	; 0x129ec <FreePrinting+0x472>
   129ec:	ed b7       	in	r30, 0x3d	; 61
   129ee:	fe b7       	in	r31, 0x3e	; 62
   129f0:	31 96       	adiw	r30, 0x01	; 1
   129f2:	0e e3       	ldi	r16, 0x3E	; 62
   129f4:	19 e0       	ldi	r17, 0x09	; 9
   129f6:	ad b7       	in	r26, 0x3d	; 61
   129f8:	be b7       	in	r27, 0x3e	; 62
   129fa:	12 96       	adiw	r26, 0x02	; 2
   129fc:	1c 93       	st	X, r17
   129fe:	0e 93       	st	-X, r16
   12a00:	11 97       	sbiw	r26, 0x01	; 1
   12a02:	8a e2       	ldi	r24, 0x2A	; 42
   12a04:	97 e0       	ldi	r25, 0x07	; 7
   12a06:	93 83       	std	Z+3, r25	; 0x03
   12a08:	82 83       	std	Z+2, r24	; 0x02
   12a0a:	ce 01       	movw	r24, r28
   12a0c:	01 96       	adiw	r24, 0x01	; 1
   12a0e:	95 83       	std	Z+5, r25	; 0x05
   12a10:	84 83       	std	Z+4, r24	; 0x04
   12a12:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	      iSend=0;
   12a16:	10 92 ee 01 	sts	0x01EE, r1
   12a1a:	10 92 ed 01 	sts	0x01ED, r1
		  iLoop=0;
   12a1e:	10 92 ea 01 	sts	0x01EA, r1
   12a22:	10 92 e9 01 	sts	0x01E9, r1
		  LSend=strlen(strPrint);
   12a26:	f8 01       	movw	r30, r16
   12a28:	01 90       	ld	r0, Z+
   12a2a:	00 20       	and	r0, r0
   12a2c:	e9 f7       	brne	.-6      	; 0x12a28 <FreePrinting+0x4ae>
   12a2e:	8f 01       	movw	r16, r30
   12a30:	01 50       	subi	r16, 0x01	; 1
   12a32:	10 40       	sbci	r17, 0x00	; 0
   12a34:	0e 53       	subi	r16, 0x3E	; 62
   12a36:	19 40       	sbci	r17, 0x09	; 9
   12a38:	10 93 ec 01 	sts	0x01EC, r17
   12a3c:	00 93 eb 01 	sts	0x01EB, r16
		  stFreePrinting=fpPrintOperatorName;	
   12a40:	8a e1       	ldi	r24, 0x1A	; 26
   12a42:	80 93 25 01 	sts	0x0125, r24
   12a46:	8d b7       	in	r24, 0x3d	; 61
   12a48:	9e b7       	in	r25, 0x3e	; 62
   12a4a:	06 96       	adiw	r24, 0x06	; 6
   12a4c:	0f b6       	in	r0, 0x3f	; 63
   12a4e:	f8 94       	cli
   12a50:	9e bf       	out	0x3e, r25	; 62
   12a52:	0f be       	out	0x3f, r0	; 63
   12a54:	8d bf       	out	0x3d, r24	; 61
   12a56:	2b c1       	rjmp	.+598    	; 0x12cae <FreePrinting+0x734>
	      break;
	 case fpPrintOperatorName:
		  if (iSend<LSend){
   12a58:	20 91 ed 01 	lds	r18, 0x01ED
   12a5c:	30 91 ee 01 	lds	r19, 0x01EE
   12a60:	80 91 eb 01 	lds	r24, 0x01EB
   12a64:	90 91 ec 01 	lds	r25, 0x01EC
   12a68:	28 17       	cp	r18, r24
   12a6a:	39 07       	cpc	r19, r25
   12a6c:	68 f4       	brcc	.+26     	; 0x12a88 <FreePrinting+0x50e>
		      iLoop++;
   12a6e:	80 91 e9 01 	lds	r24, 0x01E9
   12a72:	90 91 ea 01 	lds	r25, 0x01EA
   12a76:	01 96       	adiw	r24, 0x01	; 1
   12a78:	90 93 ea 01 	sts	0x01EA, r25
   12a7c:	80 93 e9 01 	sts	0x01E9, r24
			  if((iLoop%PRINT_DELAY)==0){
				  TimPrintBusy=0;
   12a80:	10 92 b6 01 	sts	0x01B6, r1
				  stFreePrinting=fpCheckPrintOperatorName;
   12a84:	8b e1       	ldi	r24, 0x1B	; 27
   12a86:	c7 cd       	rjmp	.-1138   	; 0x12616 <FreePrinting+0x9c>
				}
			  }
          else {
			  CarriegeReturn();
   12a88:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
			  CarriegeReturn();
   12a8c:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
			  stFreePrinting=fpInitFooter;
   12a90:	8b e0       	ldi	r24, 0x0B	; 11
   12a92:	c1 cd       	rjmp	.-1150   	; 0x12616 <FreePrinting+0x9c>
			  }
	      break;
	 case fpCheckPrintOperatorName:
	      if (IsBusyPrint==False){
   12a94:	80 91 b3 01 	lds	r24, 0x01B3
   12a98:	88 23       	and	r24, r24
   12a9a:	09 f0       	breq	.+2      	; 0x12a9e <FreePrinting+0x524>
   12a9c:	84 c0       	rjmp	.+264    	; 0x12ba6 <FreePrinting+0x62c>
		      uart(_COM_PRINTER,1,strPrint[iSend]);
   12a9e:	e0 91 ed 01 	lds	r30, 0x01ED
   12aa2:	f0 91 ee 01 	lds	r31, 0x01EE
   12aa6:	e2 5c       	subi	r30, 0xC2	; 194
   12aa8:	f6 4f       	sbci	r31, 0xF6	; 246
   12aaa:	61 e0       	ldi	r22, 0x01	; 1
   12aac:	40 81       	ld	r20, Z
   12aae:	0e 94 bd a8 	call	0x1517a	; 0x1517a <uart>
		      iSend++;
   12ab2:	80 91 ed 01 	lds	r24, 0x01ED
   12ab6:	90 91 ee 01 	lds	r25, 0x01EE
   12aba:	01 96       	adiw	r24, 0x01	; 1
   12abc:	90 93 ee 01 	sts	0x01EE, r25
   12ac0:	80 93 ed 01 	sts	0x01ED, r24
		      stFreePrinting=fpPrintOperatorName;
   12ac4:	8a e1       	ldi	r24, 0x1A	; 26
   12ac6:	6d c0       	rjmp	.+218    	; 0x12ba2 <FreePrinting+0x628>
			  }
	      break;

     case fpInitFooter:
	      //uart_printf(0,1,PSTR("fpInitFooter"));
          if (((cmdPrint&0b01000000)>>6)==1){
   12ac8:	80 91 b5 01 	lds	r24, 0x01B5
   12acc:	86 ff       	sbrs	r24, 6
   12ace:	06 c0       	rjmp	.+12     	; 0x12adc <FreePrinting+0x562>
		      stFreePrinting=fpLoadFooter;
   12ad0:	8c e0       	ldi	r24, 0x0C	; 12
   12ad2:	80 93 25 01 	sts	0x0125, r24
			  iFooter=0;
   12ad6:	10 92 f3 01 	sts	0x01F3, r1
   12ada:	e9 c0       	rjmp	.+466    	; 0x12cae <FreePrinting+0x734>
			  }
		  else
	      if (((cmdPrint&0b01000000)>>6)==0) stFreePrinting=fpPaperCut;//fpInitScroll;	                
   12adc:	80 e1       	ldi	r24, 0x10	; 16
   12ade:	9b cd       	rjmp	.-1226   	; 0x12616 <FreePrinting+0x9c>
	      break;
     case fpLoadFooter:
	 	  //uart_printf(0,1,PSTR("fpLoadFooter"));
          //Footer 1
	      eeprom_read_block((void*) &strPrint, (const void*) &DefHeaderFooter[6+iFooter], 40);
   12ae0:	60 91 f3 01 	lds	r22, 0x01F3
   12ae4:	89 e2       	ldi	r24, 0x29	; 41
   12ae6:	68 9f       	mul	r22, r24
   12ae8:	b0 01       	movw	r22, r0
   12aea:	11 24       	eor	r1, r1
   12aec:	62 5e       	subi	r22, 0xE2	; 226
   12aee:	7c 4f       	sbci	r23, 0xFC	; 252
   12af0:	8e e3       	ldi	r24, 0x3E	; 62
   12af2:	99 e0       	ldi	r25, 0x09	; 9
   12af4:	48 e2       	ldi	r20, 0x28	; 40
   12af6:	50 e0       	ldi	r21, 0x00	; 0
   12af8:	0e 94 1b ad 	call	0x15a36	; 0x15a36 <__eerd_block_m128>
		  iFooter++;
   12afc:	80 91 f3 01 	lds	r24, 0x01F3
   12b00:	8f 5f       	subi	r24, 0xFF	; 255
   12b02:	80 93 f3 01 	sts	0x01F3, r24
		  if (iFooter<=4){
   12b06:	85 30       	cpi	r24, 0x05	; 5
   12b08:	90 f4       	brcc	.+36     	; 0x12b2e <FreePrinting+0x5b4>
		      if (SpaceOnly(strPrint)==True){
   12b0a:	8e e3       	ldi	r24, 0x3E	; 62
   12b0c:	99 e0       	ldi	r25, 0x09	; 9
   12b0e:	0e 94 20 24 	call	0x4840	; 0x4840 <SpaceOnly>
   12b12:	81 30       	cpi	r24, 0x01	; 1
   12b14:	11 f4       	brne	.+4      	; 0x12b1a <FreePrinting+0x5a0>
			      stFreePrinting=fpLoadFooter;
   12b16:	8c e0       	ldi	r24, 0x0C	; 12
   12b18:	7e cd       	rjmp	.-1284   	; 0x12616 <FreePrinting+0x9c>
				  }
			  else{
			      iSend=0;
   12b1a:	10 92 ee 01 	sts	0x01EE, r1
   12b1e:	10 92 ed 01 	sts	0x01ED, r1
				  iLoop=0;
   12b22:	10 92 ea 01 	sts	0x01EA, r1
   12b26:	10 92 e9 01 	sts	0x01E9, r1
				  stFreePrinting=fpPrintFooter;
   12b2a:	8d e0       	ldi	r24, 0x0D	; 13
   12b2c:	74 cd       	rjmp	.-1304   	; 0x12616 <FreePrinting+0x9c>
			      }
		  }else{
		    CarriegeReturn();
   12b2e:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
			iPrinted++;
   12b32:	80 91 f5 01 	lds	r24, 0x01F5
   12b36:	8f 5f       	subi	r24, 0xFF	; 255
   12b38:	80 93 f5 01 	sts	0x01F5, r24

			//if (eeprom_read_byte(&DefPrinterType)==PT_CUSTOM_CUBE){
			    stFreePrinting=fpInitScroll;
   12b3c:	8e e0       	ldi	r24, 0x0E	; 14
   12b3e:	6b cd       	rjmp	.-1322   	; 0x12616 <FreePrinting+0x9c>
			//}else stFreePrinting=fpPaperCut;

			}
	      break;
     case fpPrintFooter:
		  if (iSend<40){
   12b40:	80 91 ed 01 	lds	r24, 0x01ED
   12b44:	90 91 ee 01 	lds	r25, 0x01EE
   12b48:	88 97       	sbiw	r24, 0x28	; 40
   12b4a:	68 f4       	brcc	.+26     	; 0x12b66 <FreePrinting+0x5ec>
		      iLoop++;
   12b4c:	80 91 e9 01 	lds	r24, 0x01E9
   12b50:	90 91 ea 01 	lds	r25, 0x01EA
   12b54:	01 96       	adiw	r24, 0x01	; 1
   12b56:	90 93 ea 01 	sts	0x01EA, r25
   12b5a:	80 93 e9 01 	sts	0x01E9, r24
			  if((iLoop%PRINT_DELAY)==0){
		        //uart(_COM_PRINTER,1,strPrint[iSend]);
		        //iSend++;
				TimPrintBusy=0;
   12b5e:	10 92 b6 01 	sts	0x01B6, r1
				stFreePrinting=fpCheckPrintStatusFooter;
   12b62:	84 e1       	ldi	r24, 0x14	; 20
   12b64:	58 cd       	rjmp	.-1360   	; 0x12616 <FreePrinting+0x9c>
				}
			  }
          else {
		      stFreePrinting=fpLoadFooter;
   12b66:	8c e0       	ldi	r24, 0x0C	; 12
   12b68:	80 93 25 01 	sts	0x0125, r24
			  CarriegeReturn();
   12b6c:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
   12b70:	9e c0       	rjmp	.+316    	; 0x12cae <FreePrinting+0x734>
			  }
	      break;
     
	 case fpCheckPrintStatusFooter:
	      if (IsBusyPrint==False){
   12b72:	80 91 b3 01 	lds	r24, 0x01B3
   12b76:	88 23       	and	r24, r24
   12b78:	b1 f4       	brne	.+44     	; 0x12ba6 <FreePrinting+0x62c>
		      uart(_COM_PRINTER,1,strPrint[iSend]);
   12b7a:	e0 91 ed 01 	lds	r30, 0x01ED
   12b7e:	f0 91 ee 01 	lds	r31, 0x01EE
   12b82:	e2 5c       	subi	r30, 0xC2	; 194
   12b84:	f6 4f       	sbci	r31, 0xF6	; 246
   12b86:	61 e0       	ldi	r22, 0x01	; 1
   12b88:	40 81       	ld	r20, Z
   12b8a:	0e 94 bd a8 	call	0x1517a	; 0x1517a <uart>
		      iSend++;
   12b8e:	80 91 ed 01 	lds	r24, 0x01ED
   12b92:	90 91 ee 01 	lds	r25, 0x01EE
   12b96:	01 96       	adiw	r24, 0x01	; 1
   12b98:	90 93 ee 01 	sts	0x01EE, r25
   12b9c:	80 93 ed 01 	sts	0x01ED, r24
		      stFreePrinting=fpPrintFooter;
   12ba0:	8d e0       	ldi	r24, 0x0D	; 13
   12ba2:	80 93 25 01 	sts	0x0125, r24
		  }
		  if (TimPrintBusy>TIM_BUSY_PRINT){
   12ba6:	80 91 b6 01 	lds	r24, 0x01B6
   12baa:	8b 30       	cpi	r24, 0x0B	; 11
   12bac:	08 f4       	brcc	.+2      	; 0x12bb0 <FreePrinting+0x636>
   12bae:	7f c0       	rjmp	.+254    	; 0x12cae <FreePrinting+0x734>
		      IsPrintERROR=True;
   12bb0:	81 e0       	ldi	r24, 0x01	; 1
   12bb2:	80 93 b1 01 	sts	0x01B1, r24
		      stFreePrinting=fpFinishFreePrinting;
   12bb6:	81 e1       	ldi	r24, 0x11	; 17
   12bb8:	2e cd       	rjmp	.-1444   	; 0x12616 <FreePrinting+0x9c>
			  }
	      break;

     case fpInitScroll:
	      iScroll=0;
   12bba:	10 92 f0 01 	sts	0x01F0, r1
		  iSend=0;
   12bbe:	10 92 ee 01 	sts	0x01EE, r1
   12bc2:	10 92 ed 01 	sts	0x01ED, r1
		  if (iPrinted<PrintCopy)
   12bc6:	90 91 f5 01 	lds	r25, 0x01F5
   12bca:	80 91 f2 01 	lds	r24, 0x01F2
   12bce:	98 17       	cp	r25, r24
   12bd0:	28 f4       	brcc	.+10     	; 0x12bdc <FreePrinting+0x662>
		      nScroll=eeprom_read_byte(&DefPrintScrollSpace);
   12bd2:	82 e3       	ldi	r24, 0x32	; 50
   12bd4:	90 e0       	ldi	r25, 0x00	; 0
   12bd6:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
   12bda:	04 c0       	rjmp	.+8      	; 0x12be4 <FreePrinting+0x66a>
		  else if (iPrinted>=PrintCopy)
		  	  nScroll=eeprom_read_byte(&DefPrintScrollEnd);
   12bdc:	81 e3       	ldi	r24, 0x31	; 49
   12bde:	90 e0       	ldi	r25, 0x00	; 0
   12be0:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
   12be4:	80 93 ef 01 	sts	0x01EF, r24

          stFreePrinting=fpScrollPaper;
   12be8:	8f e0       	ldi	r24, 0x0F	; 15
   12bea:	15 cd       	rjmp	.-1494   	; 0x12616 <FreePrinting+0x9c>
	      break;
     case fpScrollPaper:
	      if (iScroll>nScroll)stFreePrinting=fpPaperCut;
   12bec:	90 91 f0 01 	lds	r25, 0x01F0
   12bf0:	80 91 ef 01 	lds	r24, 0x01EF
   12bf4:	89 17       	cp	r24, r25
   12bf6:	18 f4       	brcc	.+6      	; 0x12bfe <FreePrinting+0x684>
   12bf8:	80 e1       	ldi	r24, 0x10	; 16
   12bfa:	80 93 25 01 	sts	0x0125, r24
		  iSend++;
   12bfe:	80 91 ed 01 	lds	r24, 0x01ED
   12c02:	90 91 ee 01 	lds	r25, 0x01EE
   12c06:	01 96       	adiw	r24, 0x01	; 1
   12c08:	90 93 ee 01 	sts	0x01EE, r25
   12c0c:	80 93 ed 01 	sts	0x01ED, r24
		  if (iSend%PRINT_DELAY==0){
		      CarriegeReturn();
   12c10:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
			  iScroll++;
   12c14:	80 91 f0 01 	lds	r24, 0x01F0
   12c18:	8f 5f       	subi	r24, 0xFF	; 255
   12c1a:	80 93 f0 01 	sts	0x01F0, r24
   12c1e:	47 c0       	rjmp	.+142    	; 0x12cae <FreePrinting+0x734>
			  }
	      break;
     case fpPaperCut:
		  //uart_printf(0,1,PSTR("fpPaperCut"));
		  //iPrinted++;
          if (iPrinted<PrintCopy){
   12c20:	90 91 f5 01 	lds	r25, 0x01F5
   12c24:	80 91 f2 01 	lds	r24, 0x01F2
   12c28:	98 17       	cp	r25, r24
   12c2a:	20 f4       	brcc	.+8      	; 0x12c34 <FreePrinting+0x6ba>
		      CarriegeReturn();
   12c2c:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
              stFreePrinting=fpInitHeader;
   12c30:	82 e0       	ldi	r24, 0x02	; 2
   12c32:	07 c0       	rjmp	.+14     	; 0x12c42 <FreePrinting+0x6c8>
			  }
          else{
		      if (IFType==IT_SLAVE)sendMessage04();
   12c34:	80 91 00 01 	lds	r24, 0x0100
   12c38:	81 30       	cpi	r24, 0x01	; 1
   12c3a:	11 f4       	brne	.+4      	; 0x12c40 <FreePrinting+0x6c6>
   12c3c:	0e 94 b9 92 	call	0x12572	; 0x12572 <sendMessage04>
		      stFreePrinting=fpFinishFreePrinting;
   12c40:	81 e1       	ldi	r24, 0x11	; 17
   12c42:	80 93 25 01 	sts	0x0125, r24
			  }
          
		  if (((cmdPrint&0b00100000)>>5)==1){
   12c46:	80 91 b5 01 	lds	r24, 0x01B5
   12c4a:	85 ff       	sbrs	r24, 5
   12c4c:	30 c0       	rjmp	.+96     	; 0x12cae <FreePrinting+0x734>
		      if (iPrinted==0){
   12c4e:	80 91 f5 01 	lds	r24, 0x01F5
   12c52:	88 23       	and	r24, r24
   12c54:	31 f4       	brne	.+12     	; 0x12c62 <FreePrinting+0x6e8>
			      CarriegeReturn();_delay_ms(50);
   12c56:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
   12c5a:	84 ed       	ldi	r24, 0xD4	; 212
   12c5c:	90 e3       	ldi	r25, 0x30	; 48
   12c5e:	01 97       	sbiw	r24, 0x01	; 1
   12c60:	f1 f7       	brne	.-4      	; 0x12c5e <FreePrinting+0x6e4>
				 }
              //HFCS 0000 : Header, Footer, Copy , Scrool [Copy:16x max]
		      if ((iPrinted==PrintCopy)){
   12c62:	90 91 f5 01 	lds	r25, 0x01F5
   12c66:	80 91 f2 01 	lds	r24, 0x01F2
   12c6a:	98 17       	cp	r25, r24
   12c6c:	b1 f4       	brne	.+44     	; 0x12c9a <FreePrinting+0x720>
			      // if (((cmdPrint&0b00010000)>>4)==1){
				  CarriegeReturn();_delay_ms(50);
   12c6e:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
   12c72:	04 ed       	ldi	r16, 0xD4	; 212
   12c74:	10 e3       	ldi	r17, 0x30	; 48
   12c76:	c8 01       	movw	r24, r16
   12c78:	01 97       	sbiw	r24, 0x01	; 1
   12c7a:	f1 f7       	brne	.-4      	; 0x12c78 <FreePrinting+0x6fe>
				  CarriegeReturn();_delay_ms(50);
   12c7c:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
   12c80:	c8 01       	movw	r24, r16
   12c82:	01 97       	sbiw	r24, 0x01	; 1
   12c84:	f1 f7       	brne	.-4      	; 0x12c82 <FreePrinting+0x708>
				  CarriegeReturn();_delay_ms(50);
   12c86:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
   12c8a:	c8 01       	movw	r24, r16
   12c8c:	01 97       	sbiw	r24, 0x01	; 1
   12c8e:	f1 f7       	brne	.-4      	; 0x12c8c <FreePrinting+0x712>
				  CarriegeReturn();_delay_ms(50);
   12c90:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
   12c94:	c8 01       	movw	r24, r16
   12c96:	01 97       	sbiw	r24, 0x01	; 1
   12c98:	f1 f7       	brne	.-4      	; 0x12c96 <FreePrinting+0x71c>
				   //}
				 }
		      PaperCut();
   12c9a:	0e 94 32 46 	call	0x8c64	; 0x8c64 <PaperCut>
   12c9e:	07 c0       	rjmp	.+14     	; 0x12cae <FreePrinting+0x734>
		   }
	      break;
     case fpFinishFreePrinting:
	 	  //uart_printf(0,1,PSTR("fpFinished"));
		  IsBusyFreePrinting=False;
   12ca0:	10 92 b4 01 	sts	0x01B4, r1
	      stFreePrinting=fpInit;
   12ca4:	81 e0       	ldi	r24, 0x01	; 1
   12ca6:	80 93 25 01 	sts	0x0125, r24
		  iPrinted=0;
   12caa:	10 92 f5 01 	sts	0x01F5, r1
	      break;
	 }//EndCase
}
   12cae:	64 96       	adiw	r28, 0x14	; 20
   12cb0:	0f b6       	in	r0, 0x3f	; 63
   12cb2:	f8 94       	cli
   12cb4:	de bf       	out	0x3e, r29	; 62
   12cb6:	0f be       	out	0x3f, r0	; 63
   12cb8:	cd bf       	out	0x3d, r28	; 61
   12cba:	cf 91       	pop	r28
   12cbc:	df 91       	pop	r29
   12cbe:	1f 91       	pop	r17
   12cc0:	0f 91       	pop	r16
   12cc2:	08 95       	ret

00012cc4 <PrintIdle>:
		//Font Setting: 1D 21 01
		uart(_COM_PRINTER, 1, 0x1D);uart(_COM_PRINTER, 1, 0x21);uart(_COM_PRINTER, 1, 0x00);   
		}
}

void PrintIdle(){
   12cc4:	ef 92       	push	r14
   12cc6:	ff 92       	push	r15
   12cc8:	0f 93       	push	r16
   12cca:	1f 93       	push	r17
   12ccc:	df 93       	push	r29
   12cce:	cf 93       	push	r28
   12cd0:	cd b7       	in	r28, 0x3d	; 61
   12cd2:	de b7       	in	r29, 0x3e	; 62
   12cd4:	64 97       	sbiw	r28, 0x14	; 20
   12cd6:	0f b6       	in	r0, 0x3f	; 63
   12cd8:	f8 94       	cli
   12cda:	de bf       	out	0x3e, r29	; 62
   12cdc:	0f be       	out	0x3f, r0	; 63
   12cde:	cd bf       	out	0x3d, r28	; 61
		uart_print(1,1,strSend);
	 }
	 #endif

     //Normalize PrintIdleState
     if ((IsPrinting==True)&&(stPrintIdle!=piIdle)){
   12ce0:	80 91 ac 01 	lds	r24, 0x01AC
   12ce4:	81 30       	cpi	r24, 0x01	; 1
   12ce6:	31 f4       	brne	.+12     	; 0x12cf4 <PrintIdle+0x30>
   12ce8:	80 91 06 02 	lds	r24, 0x0206
   12cec:	88 23       	and	r24, r24
   12cee:	11 f0       	breq	.+4      	; 0x12cf4 <PrintIdle+0x30>
	     stPrintIdle=piIdle;
   12cf0:	10 92 06 02 	sts	0x0206, r1
	 }

     switch(stPrintIdle){
   12cf4:	80 91 06 02 	lds	r24, 0x0206
   12cf8:	e8 2f       	mov	r30, r24
   12cfa:	f0 e0       	ldi	r31, 0x00	; 0
   12cfc:	e8 31       	cpi	r30, 0x18	; 24
   12cfe:	f1 05       	cpc	r31, r1
   12d00:	08 f0       	brcs	.+2      	; 0x12d04 <PrintIdle+0x40>
   12d02:	5c c7       	rjmp	.+3768   	; 0x13bbc <PrintIdle+0xef8>
   12d04:	e8 51       	subi	r30, 0x18	; 24
   12d06:	ff 4f       	sbci	r31, 0xFF	; 255
   12d08:	ee 0f       	add	r30, r30
   12d0a:	ff 1f       	adc	r31, r31
   12d0c:	05 90       	lpm	r0, Z+
   12d0e:	f4 91       	lpm	r31, Z+
   12d10:	e0 2d       	mov	r30, r0
   12d12:	09 94       	ijmp
	 case piIdle:
	      if (IsPrinting==True){
   12d14:	80 91 ac 01 	lds	r24, 0x01AC
   12d18:	81 30       	cpi	r24, 0x01	; 1
   12d1a:	09 f0       	breq	.+2      	; 0x12d1e <PrintIdle+0x5a>
   12d1c:	4f c7       	rjmp	.+3742   	; 0x13bbc <PrintIdle+0xef8>
		      IsPrinting=False;
   12d1e:	10 92 ac 01 	sts	0x01AC, r1
			  IsBusyIdlePrinting=True;
   12d22:	80 93 b2 01 	sts	0x01B2, r24
			  IsBusyPrint=False;
   12d26:	10 92 b3 01 	sts	0x01B3, r1
			  iPrinted=0;
   12d2a:	10 92 f8 01 	sts	0x01F8, r1
			  PrintCopy=0;
   12d2e:	10 92 f7 01 	sts	0x01F7, r1
		      stPrintIdle=piInit;
   12d32:	80 93 06 02 	sts	0x0206, r24
			  InitPrinter();
   12d36:	0e 94 a2 45 	call	0x8b44	; 0x8b44 <InitPrinter>
			  IsSignedField=False;
   12d3a:	10 92 ff 01 	sts	0x01FF, r1
   12d3e:	3e c7       	rjmp	.+3708   	; 0x13bbc <PrintIdle+0xef8>
			  }
	      break;
	 case piInit:
	      iHeader=0;
   12d40:	10 92 05 02 	sts	0x0205, r1
		  CarriegeReturn();
   12d44:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
   12d48:	1b c0       	rjmp	.+54     	; 0x12d80 <PrintIdle+0xbc>
		  stPrintIdle=piLoadHeader;
	      break;
     case piLoadHeader:
	      eeprom_read_block((void*) &strPrint, (const void*) &DefHeaderFooter[iHeader], sizeof(DefHeaderFooter[iHeader]));
   12d4a:	60 91 05 02 	lds	r22, 0x0205
   12d4e:	89 e2       	ldi	r24, 0x29	; 41
   12d50:	68 9f       	mul	r22, r24
   12d52:	b0 01       	movw	r22, r0
   12d54:	11 24       	eor	r1, r1
   12d56:	68 5d       	subi	r22, 0xD8	; 216
   12d58:	7d 4f       	sbci	r23, 0xFD	; 253
   12d5a:	8e e3       	ldi	r24, 0x3E	; 62
   12d5c:	99 e0       	ldi	r25, 0x09	; 9
   12d5e:	49 e2       	ldi	r20, 0x29	; 41
   12d60:	50 e0       	ldi	r21, 0x00	; 0
   12d62:	0e 94 1b ad 	call	0x15a36	; 0x15a36 <__eerd_block_m128>
		  iHeader++;
   12d66:	80 91 05 02 	lds	r24, 0x0205
   12d6a:	8f 5f       	subi	r24, 0xFF	; 255
   12d6c:	80 93 05 02 	sts	0x0205, r24
		  if (iHeader<6){
   12d70:	86 30       	cpi	r24, 0x06	; 6
   12d72:	00 f5       	brcc	.+64     	; 0x12db4 <PrintIdle+0xf0>
		      if (SpaceOnly(strPrint)==True){
   12d74:	8e e3       	ldi	r24, 0x3E	; 62
   12d76:	99 e0       	ldi	r25, 0x09	; 9
   12d78:	0e 94 20 24 	call	0x4840	; 0x4840 <SpaceOnly>
   12d7c:	81 30       	cpi	r24, 0x01	; 1
   12d7e:	11 f4       	brne	.+4      	; 0x12d84 <PrintIdle+0xc0>
			      stPrintIdle=piLoadHeader;
   12d80:	82 e0       	ldi	r24, 0x02	; 2
   12d82:	f1 c6       	rjmp	.+3554   	; 0x13b66 <PrintIdle+0xea2>
				  }	      
			  else{
			      stPrintIdle=piPrintHeader;
   12d84:	83 e0       	ldi	r24, 0x03	; 3
   12d86:	80 93 06 02 	sts	0x0206, r24
			      iSend=0;
   12d8a:	10 92 fe 01 	sts	0x01FE, r1
   12d8e:	10 92 fd 01 	sts	0x01FD, r1
				  iLoop=0;
   12d92:	10 92 fa 01 	sts	0x01FA, r1
   12d96:	10 92 f9 01 	sts	0x01F9, r1
				  //PrintDoubleHeight on 1st Header
				  if (iHeader==1) PrintDoubleHeight();
   12d9a:	80 91 05 02 	lds	r24, 0x0205
   12d9e:	81 30       	cpi	r24, 0x01	; 1
   12da0:	19 f4       	brne	.+6      	; 0x12da8 <PrintIdle+0xe4>
   12da2:	0e 94 1c 46 	call	0x8c38	; 0x8c38 <PrintDoubleHeight>
   12da6:	0a c7       	rjmp	.+3604   	; 0x13bbc <PrintIdle+0xef8>
				  else 
				  if (iHeader==2) PrintNormalHeight();
   12da8:	82 30       	cpi	r24, 0x02	; 2
   12daa:	09 f0       	breq	.+2      	; 0x12dae <PrintIdle+0xea>
   12dac:	07 c7       	rjmp	.+3598   	; 0x13bbc <PrintIdle+0xef8>
   12dae:	0e 94 06 46 	call	0x8c0c	; 0x8c0c <PrintNormalHeight>
   12db2:	04 c7       	rjmp	.+3592   	; 0x13bbc <PrintIdle+0xef8>
			   }
		  }else{stPrintIdle=piInitDuplicate; //stPrintIdle=piInitMessage;//
   12db4:	84 e0       	ldi	r24, 0x04	; 4
   12db6:	d7 c6       	rjmp	.+3502   	; 0x13b66 <PrintIdle+0xea2>
		        //else stPrintIdle=piInitMessage;
		  }
	      break;
	 case piPrintHeader:
		  if (iSend<40){
   12db8:	80 91 fd 01 	lds	r24, 0x01FD
   12dbc:	90 91 fe 01 	lds	r25, 0x01FE
   12dc0:	88 97       	sbiw	r24, 0x28	; 40
   12dc2:	68 f4       	brcc	.+26     	; 0x12dde <PrintIdle+0x11a>
		      iLoop++;
   12dc4:	80 91 f9 01 	lds	r24, 0x01F9
   12dc8:	90 91 fa 01 	lds	r25, 0x01FA
   12dcc:	01 96       	adiw	r24, 0x01	; 1
   12dce:	90 93 fa 01 	sts	0x01FA, r25
   12dd2:	80 93 f9 01 	sts	0x01F9, r24
			  if ((iLoop%PRINT_DELAY)==0){
				 TimPrintBusy=0;
   12dd6:	10 92 b6 01 	sts	0x01B6, r1
				 stPrintIdle=piCheckPrintStatusHeader;
   12dda:	8b e0       	ldi	r24, 0x0B	; 11
   12ddc:	c4 c6       	rjmp	.+3464   	; 0x13b66 <PrintIdle+0xea2>
				 }
			  }
          else{ 
		     stPrintIdle=piLoadHeader;
   12dde:	82 e0       	ldi	r24, 0x02	; 2
   12de0:	5a c6       	rjmp	.+3252   	; 0x13a96 <PrintIdle+0xdd2>
			 CarriegeReturn();
		  }
	      break;
     case piCheckPrintStatusHeader:
	      if (IsBusyPrint==False){
   12de2:	80 91 b3 01 	lds	r24, 0x01B3
   12de6:	88 23       	and	r24, r24
   12de8:	09 f0       	breq	.+2      	; 0x12dec <PrintIdle+0x128>
   12dea:	b5 c6       	rjmp	.+3434   	; 0x13b56 <PrintIdle+0xe92>
		      uart(_COM_PRINTER,1,strPrint[iSend]);
   12dec:	e0 91 fd 01 	lds	r30, 0x01FD
   12df0:	f0 91 fe 01 	lds	r31, 0x01FE
   12df4:	e2 5c       	subi	r30, 0xC2	; 194
   12df6:	f6 4f       	sbci	r31, 0xF6	; 246
   12df8:	61 e0       	ldi	r22, 0x01	; 1
   12dfa:	40 81       	ld	r20, Z
   12dfc:	0e 94 bd a8 	call	0x1517a	; 0x1517a <uart>
		      iSend++;
   12e00:	80 91 fd 01 	lds	r24, 0x01FD
   12e04:	90 91 fe 01 	lds	r25, 0x01FE
   12e08:	01 96       	adiw	r24, 0x01	; 1
   12e0a:	90 93 fe 01 	sts	0x01FE, r25
   12e0e:	80 93 fd 01 	sts	0x01FD, r24
		      stPrintIdle=piPrintHeader;
   12e12:	83 e0       	ldi	r24, 0x03	; 3
   12e14:	9e c6       	rjmp	.+3388   	; 0x13b52 <PrintIdle+0xe8e>
		      stPrintIdle=piFinishPrintIdle;
			  }
	      break;

     case piInitDuplicate:
          if ((iPrinted>0)||(IsReprintTicket==True)){
   12e16:	80 91 f8 01 	lds	r24, 0x01F8
   12e1a:	88 23       	and	r24, r24
   12e1c:	21 f4       	brne	.+8      	; 0x12e26 <PrintIdle+0x162>
   12e1e:	80 91 7f 01 	lds	r24, 0x017F
   12e22:	81 30       	cpi	r24, 0x01	; 1
   12e24:	a9 f4       	brne	.+42     	; 0x12e50 <PrintIdle+0x18c>
		      IsReprintTicket=False;
   12e26:	10 92 7f 01 	sts	0x017F, r1
		      CarriegeReturn(); 
   12e2a:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
		      sprintf_P(strPrint,PSTR("             DUPLICATE COPY        "));
   12e2e:	00 d0       	rcall	.+0      	; 0x12e30 <PrintIdle+0x16c>
   12e30:	00 d0       	rcall	.+0      	; 0x12e32 <PrintIdle+0x16e>
   12e32:	8e e3       	ldi	r24, 0x3E	; 62
   12e34:	99 e0       	ldi	r25, 0x09	; 9
   12e36:	ad b7       	in	r26, 0x3d	; 61
   12e38:	be b7       	in	r27, 0x3e	; 62
   12e3a:	12 96       	adiw	r26, 0x02	; 2
   12e3c:	9c 93       	st	X, r25
   12e3e:	8e 93       	st	-X, r24
   12e40:	11 97       	sbiw	r26, 0x01	; 1
   12e42:	8a e7       	ldi	r24, 0x7A	; 122
   12e44:	9b e0       	ldi	r25, 0x0B	; 11
   12e46:	14 96       	adiw	r26, 0x04	; 4
   12e48:	9c 93       	st	X, r25
   12e4a:	8e 93       	st	-X, r24
   12e4c:	13 97       	sbiw	r26, 0x03	; 3
   12e4e:	0c c0       	rjmp	.+24     	; 0x12e68 <PrintIdle+0x1a4>
		      }
          else{           sprintf_P(strPrint,PSTR(" "));
   12e50:	00 d0       	rcall	.+0      	; 0x12e52 <PrintIdle+0x18e>
   12e52:	00 d0       	rcall	.+0      	; 0x12e54 <PrintIdle+0x190>
   12e54:	8e e3       	ldi	r24, 0x3E	; 62
   12e56:	99 e0       	ldi	r25, 0x09	; 9
   12e58:	ed b7       	in	r30, 0x3d	; 61
   12e5a:	fe b7       	in	r31, 0x3e	; 62
   12e5c:	92 83       	std	Z+2, r25	; 0x02
   12e5e:	81 83       	std	Z+1, r24	; 0x01
   12e60:	88 e7       	ldi	r24, 0x78	; 120
   12e62:	9b e0       	ldi	r25, 0x0B	; 11
   12e64:	94 83       	std	Z+4, r25	; 0x04
   12e66:	83 83       	std	Z+3, r24	; 0x03
   12e68:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
   12e6c:	0f 90       	pop	r0
   12e6e:	0f 90       	pop	r0
   12e70:	0f 90       	pop	r0
   12e72:	0f 90       	pop	r0
		      }
		  iSend=0;
   12e74:	10 92 fe 01 	sts	0x01FE, r1
   12e78:	10 92 fd 01 	sts	0x01FD, r1
		  iLoop=0;
   12e7c:	10 92 fa 01 	sts	0x01FA, r1
   12e80:	10 92 f9 01 	sts	0x01F9, r1
		  LSend=strlen(strPrint);
   12e84:	ee e3       	ldi	r30, 0x3E	; 62
   12e86:	f9 e0       	ldi	r31, 0x09	; 9
   12e88:	01 90       	ld	r0, Z+
   12e8a:	00 20       	and	r0, r0
   12e8c:	e9 f7       	brne	.-6      	; 0x12e88 <PrintIdle+0x1c4>
   12e8e:	31 97       	sbiw	r30, 0x01	; 1
   12e90:	ee 53       	subi	r30, 0x3E	; 62
   12e92:	f9 40       	sbci	r31, 0x09	; 9
   12e94:	f0 93 fc 01 	sts	0x01FC, r31
   12e98:	e0 93 fb 01 	sts	0x01FB, r30
          stPrintIdle=piPrintDuplicate; 
   12e9c:	85 e0       	ldi	r24, 0x05	; 5
   12e9e:	63 c6       	rjmp	.+3270   	; 0x13b66 <PrintIdle+0xea2>
	      break;
     case piPrintDuplicate:
		  if (iSend<LSend){
   12ea0:	20 91 fd 01 	lds	r18, 0x01FD
   12ea4:	30 91 fe 01 	lds	r19, 0x01FE
   12ea8:	80 91 fb 01 	lds	r24, 0x01FB
   12eac:	90 91 fc 01 	lds	r25, 0x01FC
   12eb0:	28 17       	cp	r18, r24
   12eb2:	39 07       	cpc	r19, r25
   12eb4:	68 f4       	brcc	.+26     	; 0x12ed0 <PrintIdle+0x20c>
		      iLoop++;
   12eb6:	80 91 f9 01 	lds	r24, 0x01F9
   12eba:	90 91 fa 01 	lds	r25, 0x01FA
   12ebe:	01 96       	adiw	r24, 0x01	; 1
   12ec0:	90 93 fa 01 	sts	0x01FA, r25
   12ec4:	80 93 f9 01 	sts	0x01F9, r24
			  if((iLoop%PRINT_DELAY)==0){
				 TimPrintBusy=0;
   12ec8:	10 92 b6 01 	sts	0x01B6, r1
                 stPrintIdle=piCheckPrintStatusDuplicate;
   12ecc:	86 e0       	ldi	r24, 0x06	; 6
   12ece:	4b c6       	rjmp	.+3222   	; 0x13b66 <PrintIdle+0xea2>
				 }
			  }
          else {
		     iSend=0;
   12ed0:	10 92 fe 01 	sts	0x01FE, r1
   12ed4:	10 92 fd 01 	sts	0x01FD, r1
		     stPrintIdle=piInitMessage;
   12ed8:	87 e0       	ldi	r24, 0x07	; 7
   12eda:	45 c6       	rjmp	.+3210   	; 0x13b66 <PrintIdle+0xea2>
			 }
	      break;
     case piCheckPrintStatusDuplicate:
	      if (IsBusyPrint==False){
   12edc:	80 91 b3 01 	lds	r24, 0x01B3
   12ee0:	88 23       	and	r24, r24
   12ee2:	09 f0       	breq	.+2      	; 0x12ee6 <PrintIdle+0x222>
   12ee4:	38 c6       	rjmp	.+3184   	; 0x13b56 <PrintIdle+0xe92>
		      uart(_COM_PRINTER,1,strPrint[iSend]);
   12ee6:	e0 91 fd 01 	lds	r30, 0x01FD
   12eea:	f0 91 fe 01 	lds	r31, 0x01FE
   12eee:	e2 5c       	subi	r30, 0xC2	; 194
   12ef0:	f6 4f       	sbci	r31, 0xF6	; 246
   12ef2:	61 e0       	ldi	r22, 0x01	; 1
   12ef4:	40 81       	ld	r20, Z
   12ef6:	0e 94 bd a8 	call	0x1517a	; 0x1517a <uart>
   12efa:	84 ec       	ldi	r24, 0xC4	; 196
   12efc:	99 e0       	ldi	r25, 0x09	; 9
   12efe:	01 97       	sbiw	r24, 0x01	; 1
   12f00:	f1 f7       	brne	.-4      	; 0x12efe <PrintIdle+0x23a>
			  _delay_ms(10);
		      iSend++;
   12f02:	80 91 fd 01 	lds	r24, 0x01FD
   12f06:	90 91 fe 01 	lds	r25, 0x01FE
   12f0a:	01 96       	adiw	r24, 0x01	; 1
   12f0c:	90 93 fe 01 	sts	0x01FE, r25
   12f10:	80 93 fd 01 	sts	0x01FD, r24
		      stPrintIdle=piPrintDuplicate;
   12f14:	85 e0       	ldi	r24, 0x05	; 5
   12f16:	1d c6       	rjmp	.+3130   	; 0x13b52 <PrintIdle+0xe8e>
		      stPrintIdle=piFinishPrintIdle;
			  }
	      break;

     case piInitMessage:
	      iSend=0;iLoop=0;
   12f18:	10 92 fe 01 	sts	0x01FE, r1
   12f1c:	10 92 fd 01 	sts	0x01FD, r1
   12f20:	10 92 fa 01 	sts	0x01FA, r1
   12f24:	10 92 f9 01 	sts	0x01F9, r1
		  iMessage=0;
   12f28:	10 92 01 02 	sts	0x0201, r1
		  switch(MOPType){
   12f2c:	80 91 b8 01 	lds	r24, 0x01B8
   12f30:	83 30       	cpi	r24, 0x03	; 3
   12f32:	81 f0       	breq	.+32     	; 0x12f54 <PrintIdle+0x290>
   12f34:	84 30       	cpi	r24, 0x04	; 4
   12f36:	28 f4       	brcc	.+10     	; 0x12f42 <PrintIdle+0x27e>
   12f38:	81 30       	cpi	r24, 0x01	; 1
   12f3a:	61 f0       	breq	.+24     	; 0x12f54 <PrintIdle+0x290>
   12f3c:	82 30       	cpi	r24, 0x02	; 2
   12f3e:	40 f4       	brcc	.+16     	; 0x12f50 <PrintIdle+0x28c>
   12f40:	10 c0       	rjmp	.+32     	; 0x12f62 <PrintIdle+0x29e>
   12f42:	88 30       	cpi	r24, 0x08	; 8
   12f44:	49 f0       	breq	.+18     	; 0x12f58 <PrintIdle+0x294>
   12f46:	89 30       	cpi	r24, 0x09	; 9
   12f48:	61 f0       	breq	.+24     	; 0x12f62 <PrintIdle+0x29e>
   12f4a:	87 30       	cpi	r24, 0x07	; 7
   12f4c:	51 f4       	brne	.+20     	; 0x12f62 <PrintIdle+0x29e>
   12f4e:	02 c0       	rjmp	.+4      	; 0x12f54 <PrintIdle+0x290>
		  case MOP_CASH:
		       MessageLine=10;
			   PrintCopy=1;
		       break;
          case MOP_CREDIT_CARD:
		       MessageLine=10;
   12f50:	8a e0       	ldi	r24, 0x0A	; 10
   12f52:	03 c0       	rjmp	.+6      	; 0x12f5a <PrintIdle+0x296>
          case MOP_LOCAL_ACCOUNT:
		       MessageLine=20;
			   PrintCopy=2;
		       break;
          case MOP_VOUCHER:
		       MessageLine=20;
   12f54:	84 e1       	ldi	r24, 0x14	; 20
   12f56:	01 c0       	rjmp	.+2      	; 0x12f5a <PrintIdle+0x296>
			   PrintCopy=2;
		       break;
          case MOP_PUMP_TEST:
		       MessageLine=12;
   12f58:	8c e0       	ldi	r24, 0x0C	; 12
   12f5a:	80 93 00 02 	sts	0x0200, r24
			   PrintCopy=2;
   12f5e:	82 e0       	ldi	r24, 0x02	; 2
   12f60:	04 c0       	rjmp	.+8      	; 0x12f6a <PrintIdle+0x2a6>
          case MOP_VOID_CARD:
		       MessageLine=10;
			   PrintCopy=1;
		       break;          
          default:
		       MessageLine=10;
   12f62:	8a e0       	ldi	r24, 0x0A	; 10
   12f64:	80 93 00 02 	sts	0x0200, r24
			   PrintCopy=1;
   12f68:	81 e0       	ldi	r24, 0x01	; 1
   12f6a:	80 93 f7 01 	sts	0x01F7, r24
		       break; 
		  }
		  //LoyaltyDetection
          if ((strlen(strLoyCardID)>0)&&(SpaceOnly(strLoyCardID)==False)){
   12f6e:	80 91 e7 02 	lds	r24, 0x02E7
   12f72:	88 23       	and	r24, r24
   12f74:	49 f0       	breq	.+18     	; 0x12f88 <PrintIdle+0x2c4>
   12f76:	87 ee       	ldi	r24, 0xE7	; 231
   12f78:	92 e0       	ldi	r25, 0x02	; 2
   12f7a:	0e 94 20 24 	call	0x4840	; 0x4840 <SpaceOnly>
   12f7e:	88 23       	and	r24, r24
   12f80:	19 f4       	brne	.+6      	; 0x12f88 <PrintIdle+0x2c4>
		       MessageLine=33;
   12f82:	81 e2       	ldi	r24, 0x21	; 33
   12f84:	80 93 00 02 	sts	0x0200, r24
		  }
          //stPrintIdle=piLoadMessage;
		  stPrintIdle=piFormatingMessage;
   12f88:	88 e0       	ldi	r24, 0x08	; 8
   12f8a:	ed c5       	rjmp	.+3034   	; 0x13b66 <PrintIdle+0xea2>
	      break;
     case piFormatingMessage:
	      if (iPrinted==0){
   12f8c:	80 91 f8 01 	lds	r24, 0x01F8
   12f90:	88 23       	and	r24, r24
   12f92:	09 f0       	breq	.+2      	; 0x12f96 <PrintIdle+0x2d2>
   12f94:	99 c4       	rjmp	.+2354   	; 0x138c8 <PrintIdle+0xc04>

		      FormatDate(DATE_LONG_YEAR,strDate);
   12f96:	60 ef       	ldi	r22, 0xF0	; 240
   12f98:	77 e0       	ldi	r23, 0x07	; 7
   12f9a:	0e 94 ee 24 	call	0x49dc	; 0x49dc <FormatDate>
              RemZeroLead(strIslandID);
   12f9e:	89 e7       	ldi	r24, 0x79	; 121
   12fa0:	99 e0       	ldi	r25, 0x09	; 9
   12fa2:	0e 94 3f 25 	call	0x4a7e	; 0x4a7e <RemZeroLead>
			  RemZeroLead(strFIP_ID);
   12fa6:	8b e3       	ldi	r24, 0x3B	; 59
   12fa8:	98 e0       	ldi	r25, 0x08	; 8
   12faa:	0e 94 3f 25 	call	0x4a7e	; 0x4a7e <RemZeroLead>
		      RemZeroLead(strPrice);              
   12fae:	80 e2       	ldi	r24, 0x20	; 32
   12fb0:	96 e0       	ldi	r25, 0x06	; 6
   12fb2:	0e 94 3f 25 	call	0x4a7e	; 0x4a7e <RemZeroLead>
              if (IFType==IT_SLAVE)
   12fb6:	80 91 00 01 	lds	r24, 0x0100
   12fba:	81 30       	cpi	r24, 0x01	; 1
   12fbc:	21 f4       	brne	.+8      	; 0x12fc6 <PrintIdle+0x302>
			      RemZeroLead(strVolume);
   12fbe:	87 ef       	ldi	r24, 0xF7	; 247
   12fc0:	93 e0       	ldi	r25, 0x03	; 3
   12fc2:	0e 94 3f 25 	call	0x4a7e	; 0x4a7e <RemZeroLead>
              RemZeroLead(strAmount);
   12fc6:	85 e3       	ldi	r24, 0x35	; 53
   12fc8:	9c e0       	ldi	r25, 0x0C	; 12
   12fca:	0e 94 3f 25 	call	0x4a7e	; 0x4a7e <RemZeroLead>

			  RemDecimal(strPrice);
   12fce:	80 e2       	ldi	r24, 0x20	; 32
   12fd0:	96 e0       	ldi	r25, 0x06	; 6
   12fd2:	0e 94 3d 24 	call	0x487a	; 0x487a <RemDecimal>
			  RemDecimal(strAmount);
   12fd6:	85 e3       	ldi	r24, 0x35	; 53
   12fd8:	9c e0       	ldi	r25, 0x0C	; 12
   12fda:	0e 94 3d 24 	call	0x487a	; 0x487a <RemDecimal>
	  
			  FormatCurrency(strPrice);
   12fde:	80 e2       	ldi	r24, 0x20	; 32
   12fe0:	96 e0       	ldi	r25, 0x06	; 6
   12fe2:	0e 94 0d 33 	call	0x661a	; 0x661a <FormatCurrency>
			  FormatCurrency(strAmount);
   12fe6:	85 e3       	ldi	r24, 0x35	; 53
   12fe8:	9c e0       	ldi	r25, 0x0C	; 12
   12fea:	0e 94 0d 33 	call	0x661a	; 0x661a <FormatCurrency>
              if (IFType==IT_SLAVE){
   12fee:	80 91 00 01 	lds	r24, 0x0100
   12ff2:	81 30       	cpi	r24, 0x01	; 1
   12ff4:	09 f0       	breq	.+2      	; 0x12ff8 <PrintIdle+0x334>
   12ff6:	68 c4       	rjmp	.+2256   	; 0x138c8 <PrintIdle+0xc04>
		          RemSpaceLag(strCardID);
   12ff8:	8b e0       	ldi	r24, 0x0B	; 11
   12ffa:	9c e0       	ldi	r25, 0x0C	; 12
   12ffc:	0e 94 d2 25 	call	0x4ba4	; 0x4ba4 <RemSpaceLag>
		          RemSpaceLag(strCardHolder);
   13000:	86 ea       	ldi	r24, 0xA6	; 166
   13002:	93 e0       	ldi	r25, 0x03	; 3
   13004:	0e 94 d2 25 	call	0x4ba4	; 0x4ba4 <RemSpaceLag>
		          RemSpaceLag(strMOPName);
   13008:	8f ef       	ldi	r24, 0xFF	; 255
   1300a:	95 e0       	ldi	r25, 0x05	; 5
   1300c:	0e 94 d2 25 	call	0x4ba4	; 0x4ba4 <RemSpaceLag>
		          RemSpaceLag(strLoyCardHolder);
   13010:	84 ec       	ldi	r24, 0xC4	; 196
   13012:	92 e0       	ldi	r25, 0x02	; 2
   13014:	0e 94 d2 25 	call	0x4ba4	; 0x4ba4 <RemSpaceLag>
		          RemSpaceLag(strCorporateID);
   13018:	8c e8       	ldi	r24, 0x8C	; 140
   1301a:	9c e0       	ldi	r25, 0x0C	; 12
   1301c:	0e 94 d2 25 	call	0x4ba4	; 0x4ba4 <RemSpaceLag>
		          RemSpaceLag(strCorporateName);
   13020:	8f e4       	ldi	r24, 0x4F	; 79
   13022:	94 e0       	ldi	r25, 0x04	; 4
   13024:	0e 94 d2 25 	call	0x4ba4	; 0x4ba4 <RemSpaceLag>
		          RemSpaceLag(strLoyRedeemPoints);
   13028:	8c e1       	ldi	r24, 0x1C	; 28
   1302a:	94 e0       	ldi	r25, 0x04	; 4
   1302c:	0e 94 d2 25 	call	0x4ba4	; 0x4ba4 <RemSpaceLag>
		          RemSpaceLag(strLoyCurrMonConsumeV);
   13030:	8f e6       	ldi	r24, 0x6F	; 111
   13032:	9c e0       	ldi	r25, 0x0C	; 12
   13034:	0e 94 d2 25 	call	0x4ba4	; 0x4ba4 <RemSpaceLag>
				  RemSpaceLag(strLoyCurrMonConsumeA);
   13038:	80 e0       	ldi	r24, 0x00	; 0
   1303a:	94 e0       	ldi	r25, 0x04	; 4
   1303c:	0e 94 d2 25 	call	0x4ba4	; 0x4ba4 <RemSpaceLag>
		          FormatCurrency(strLoyCurrMonConsumeV);              
   13040:	8f e6       	ldi	r24, 0x6F	; 111
   13042:	9c e0       	ldi	r25, 0x0C	; 12
   13044:	0e 94 0d 33 	call	0x661a	; 0x661a <FormatCurrency>
		          FormatCurrency(strLoyCurrMonConsumeA);
   13048:	80 e0       	ldi	r24, 0x00	; 0
   1304a:	94 e0       	ldi	r25, 0x04	; 4
   1304c:	0e 94 0d 33 	call	0x661a	; 0x661a <FormatCurrency>
   13050:	3b c4       	rjmp	.+2166   	; 0x138c8 <PrintIdle+0xc04>
			   }
		  }
          stPrintIdle=piLoadMessage;
	      break;
     case piLoadMessage:
	      switch(iMessage){
   13052:	80 91 01 02 	lds	r24, 0x0201
   13056:	e8 2f       	mov	r30, r24
   13058:	f0 e0       	ldi	r31, 0x00	; 0
   1305a:	e5 32       	cpi	r30, 0x25	; 37
   1305c:	f1 05       	cpc	r31, r1
   1305e:	08 f0       	brcs	.+2      	; 0x13062 <PrintIdle+0x39e>
   13060:	f6 c3       	rjmp	.+2028   	; 0x1384e <PrintIdle+0xb8a>
   13062:	e0 50       	subi	r30, 0x00	; 0
   13064:	ff 4f       	sbci	r31, 0xFF	; 255
   13066:	0e e3       	ldi	r16, 0x3E	; 62
   13068:	19 e0       	ldi	r17, 0x09	; 9
   1306a:	ee 0f       	add	r30, r30
   1306c:	ff 1f       	adc	r31, r31
   1306e:	05 90       	lpm	r0, Z+
   13070:	f4 91       	lpm	r31, Z+
   13072:	e0 2d       	mov	r30, r0
   13074:	09 94       	ijmp
		  case 0:
		       CarriegeReturn();
   13076:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("      Shift: %s  No.Trans: %s "),strShift,strTranNo);
   1307a:	8d b7       	in	r24, 0x3d	; 61
   1307c:	9e b7       	in	r25, 0x3e	; 62
   1307e:	08 97       	sbiw	r24, 0x08	; 8
   13080:	0f b6       	in	r0, 0x3f	; 63
   13082:	f8 94       	cli
   13084:	9e bf       	out	0x3e, r25	; 62
   13086:	0f be       	out	0x3f, r0	; 63
   13088:	8d bf       	out	0x3d, r24	; 61
   1308a:	ed b7       	in	r30, 0x3d	; 61
   1308c:	fe b7       	in	r31, 0x3e	; 62
   1308e:	31 96       	adiw	r30, 0x01	; 1
   13090:	ad b7       	in	r26, 0x3d	; 61
   13092:	be b7       	in	r27, 0x3e	; 62
   13094:	12 96       	adiw	r26, 0x02	; 2
   13096:	1c 93       	st	X, r17
   13098:	0e 93       	st	-X, r16
   1309a:	11 97       	sbiw	r26, 0x01	; 1
   1309c:	89 e5       	ldi	r24, 0x59	; 89
   1309e:	9b e0       	ldi	r25, 0x0B	; 11
   130a0:	93 83       	std	Z+3, r25	; 0x03
   130a2:	82 83       	std	Z+2, r24	; 0x02
   130a4:	8a ee       	ldi	r24, 0xEA	; 234
   130a6:	9c e0       	ldi	r25, 0x0C	; 12
   130a8:	95 83       	std	Z+5, r25	; 0x05
   130aa:	84 83       	std	Z+4, r24	; 0x04
   130ac:	89 e0       	ldi	r24, 0x09	; 9
   130ae:	9d e0       	ldi	r25, 0x0D	; 13
   130b0:	1d c0       	rjmp	.+58     	; 0x130ec <PrintIdle+0x428>
		       break;
		  case 1:
		       //FormatDate(strDate);
			   CarriegeReturn();
   130b2:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("      Waktu: %s %s "),strDate,strTime);
   130b6:	8d b7       	in	r24, 0x3d	; 61
   130b8:	9e b7       	in	r25, 0x3e	; 62
   130ba:	08 97       	sbiw	r24, 0x08	; 8
   130bc:	0f b6       	in	r0, 0x3f	; 63
   130be:	f8 94       	cli
   130c0:	9e bf       	out	0x3e, r25	; 62
   130c2:	0f be       	out	0x3f, r0	; 63
   130c4:	8d bf       	out	0x3d, r24	; 61
   130c6:	ed b7       	in	r30, 0x3d	; 61
   130c8:	fe b7       	in	r31, 0x3e	; 62
   130ca:	31 96       	adiw	r30, 0x01	; 1
   130cc:	ad b7       	in	r26, 0x3d	; 61
   130ce:	be b7       	in	r27, 0x3e	; 62
   130d0:	12 96       	adiw	r26, 0x02	; 2
   130d2:	1c 93       	st	X, r17
   130d4:	0e 93       	st	-X, r16
   130d6:	11 97       	sbiw	r26, 0x01	; 1
   130d8:	85 e4       	ldi	r24, 0x45	; 69
   130da:	9b e0       	ldi	r25, 0x0B	; 11
   130dc:	93 83       	std	Z+3, r25	; 0x03
   130de:	82 83       	std	Z+2, r24	; 0x02
   130e0:	80 ef       	ldi	r24, 0xF0	; 240
   130e2:	97 e0       	ldi	r25, 0x07	; 7
   130e4:	95 83       	std	Z+5, r25	; 0x05
   130e6:	84 83       	std	Z+4, r24	; 0x04
   130e8:	8f ec       	ldi	r24, 0xCF	; 207
   130ea:	93 e0       	ldi	r25, 0x03	; 3
   130ec:	97 83       	std	Z+7, r25	; 0x07
   130ee:	86 83       	std	Z+6, r24	; 0x06
   130f0:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
   130f4:	ed b7       	in	r30, 0x3d	; 61
   130f6:	fe b7       	in	r31, 0x3e	; 62
   130f8:	38 96       	adiw	r30, 0x08	; 8
   130fa:	8d c3       	rjmp	.+1818   	; 0x13816 <PrintIdle+0xb52>
		       break;
		  case 2:
		       CarriegeReturn();
   130fc:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("    ------------------------------"));
   13100:	00 d0       	rcall	.+0      	; 0x13102 <PrintIdle+0x43e>
   13102:	00 d0       	rcall	.+0      	; 0x13104 <PrintIdle+0x440>
   13104:	ad b7       	in	r26, 0x3d	; 61
   13106:	be b7       	in	r27, 0x3e	; 62
   13108:	12 96       	adiw	r26, 0x02	; 2
   1310a:	1c 93       	st	X, r17
   1310c:	0e 93       	st	-X, r16
   1310e:	11 97       	sbiw	r26, 0x01	; 1
   13110:	82 e2       	ldi	r24, 0x22	; 34
   13112:	9b e0       	ldi	r25, 0x0B	; 11
   13114:	92 c3       	rjmp	.+1828   	; 0x1383a <PrintIdle+0xb76>
		       break;
		  case 3:
		       CarriegeReturn();
   13116:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
			   //RemZeroLead(strIslandID);
			   //RemZeroLead(strFIP_ID);
		       sprintf_P(strPrint,PSTR("      Pulau/Pompa : [%s]-%s"),strIslandID,strFIP_ID);
   1311a:	ed b7       	in	r30, 0x3d	; 61
   1311c:	fe b7       	in	r31, 0x3e	; 62
   1311e:	38 97       	sbiw	r30, 0x08	; 8
   13120:	0f b6       	in	r0, 0x3f	; 63
   13122:	f8 94       	cli
   13124:	fe bf       	out	0x3e, r31	; 62
   13126:	0f be       	out	0x3f, r0	; 63
   13128:	ed bf       	out	0x3d, r30	; 61
   1312a:	31 96       	adiw	r30, 0x01	; 1
   1312c:	ad b7       	in	r26, 0x3d	; 61
   1312e:	be b7       	in	r27, 0x3e	; 62
   13130:	12 96       	adiw	r26, 0x02	; 2
   13132:	1c 93       	st	X, r17
   13134:	0e 93       	st	-X, r16
   13136:	11 97       	sbiw	r26, 0x01	; 1
   13138:	86 e0       	ldi	r24, 0x06	; 6
   1313a:	9b e0       	ldi	r25, 0x0B	; 11
   1313c:	93 83       	std	Z+3, r25	; 0x03
   1313e:	82 83       	std	Z+2, r24	; 0x02
   13140:	89 e7       	ldi	r24, 0x79	; 121
   13142:	99 e0       	ldi	r25, 0x09	; 9
   13144:	95 83       	std	Z+5, r25	; 0x05
   13146:	84 83       	std	Z+4, r24	; 0x04
   13148:	8b e3       	ldi	r24, 0x3B	; 59
   1314a:	98 e0       	ldi	r25, 0x08	; 8
   1314c:	cf cf       	rjmp	.-98     	; 0x130ec <PrintIdle+0x428>
		       break;
		  case 4:
		       CarriegeReturn();
   1314e:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
			   sprintf_P(strPrint,PSTR("      Produk      : %s"),strDescription);
   13152:	00 d0       	rcall	.+0      	; 0x13154 <PrintIdle+0x490>
   13154:	00 d0       	rcall	.+0      	; 0x13156 <PrintIdle+0x492>
   13156:	00 d0       	rcall	.+0      	; 0x13158 <PrintIdle+0x494>
   13158:	ed b7       	in	r30, 0x3d	; 61
   1315a:	fe b7       	in	r31, 0x3e	; 62
   1315c:	31 96       	adiw	r30, 0x01	; 1
   1315e:	ad b7       	in	r26, 0x3d	; 61
   13160:	be b7       	in	r27, 0x3e	; 62
   13162:	12 96       	adiw	r26, 0x02	; 2
   13164:	1c 93       	st	X, r17
   13166:	0e 93       	st	-X, r16
   13168:	11 97       	sbiw	r26, 0x01	; 1
   1316a:	8f ee       	ldi	r24, 0xEF	; 239
   1316c:	9a e0       	ldi	r25, 0x0A	; 10
   1316e:	93 83       	std	Z+3, r25	; 0x03
   13170:	82 83       	std	Z+2, r24	; 0x02
   13172:	8e e8       	ldi	r24, 0x8E	; 142
   13174:	98 e0       	ldi	r25, 0x08	; 8
   13176:	48 c3       	rjmp	.+1680   	; 0x13808 <PrintIdle+0xb44>
		       break;
		  case 5:
		       //RemZeroLead(strPrice);
               //FormatCurrency(strPrice);
               if (eeprom_read_byte(&DefPrintMoney)==True){
   13178:	82 ec       	ldi	r24, 0xC2	; 194
   1317a:	93 e0       	ldi	r25, 0x03	; 3
   1317c:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
   13180:	0e e3       	ldi	r16, 0x3E	; 62
   13182:	19 e0       	ldi	r17, 0x09	; 9
   13184:	81 30       	cpi	r24, 0x01	; 1
   13186:	a9 f4       	brne	.+42     	; 0x131b2 <PrintIdle+0x4ee>
			   	   CarriegeReturn();
   13188:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("      Harga/L     : Rp.%s"),strPrice);
   1318c:	00 d0       	rcall	.+0      	; 0x1318e <PrintIdle+0x4ca>
   1318e:	00 d0       	rcall	.+0      	; 0x13190 <PrintIdle+0x4cc>
   13190:	00 d0       	rcall	.+0      	; 0x13192 <PrintIdle+0x4ce>
   13192:	ed b7       	in	r30, 0x3d	; 61
   13194:	fe b7       	in	r31, 0x3e	; 62
   13196:	31 96       	adiw	r30, 0x01	; 1
   13198:	ad b7       	in	r26, 0x3d	; 61
   1319a:	be b7       	in	r27, 0x3e	; 62
   1319c:	12 96       	adiw	r26, 0x02	; 2
   1319e:	1c 93       	st	X, r17
   131a0:	0e 93       	st	-X, r16
   131a2:	11 97       	sbiw	r26, 0x01	; 1
   131a4:	85 ed       	ldi	r24, 0xD5	; 213
   131a6:	9a e0       	ldi	r25, 0x0A	; 10
   131a8:	93 83       	std	Z+3, r25	; 0x03
   131aa:	82 83       	std	Z+2, r24	; 0x02
   131ac:	80 e2       	ldi	r24, 0x20	; 32
   131ae:	96 e0       	ldi	r25, 0x06	; 6
   131b0:	2b c3       	rjmp	.+1622   	; 0x13808 <PrintIdle+0xb44>
			   }else sprintf_P(strPrint,PSTR(""));
   131b2:	00 d0       	rcall	.+0      	; 0x131b4 <PrintIdle+0x4f0>
   131b4:	00 d0       	rcall	.+0      	; 0x131b6 <PrintIdle+0x4f2>
   131b6:	ad b7       	in	r26, 0x3d	; 61
   131b8:	be b7       	in	r27, 0x3e	; 62
   131ba:	12 96       	adiw	r26, 0x02	; 2
   131bc:	1c 93       	st	X, r17
   131be:	0e 93       	st	-X, r16
   131c0:	11 97       	sbiw	r26, 0x01	; 1
   131c2:	84 ed       	ldi	r24, 0xD4	; 212
   131c4:	9a e0       	ldi	r25, 0x0A	; 10
   131c6:	39 c3       	rjmp	.+1650   	; 0x1383a <PrintIdle+0xb76>

		       break;
		  case 6:
		       //RemZeroLead(strVolume);
		       CarriegeReturn();
   131c8:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
			   sprintf_P(strPrint,PSTR("      Jml Liter   : %s L"),strVolume);
   131cc:	00 d0       	rcall	.+0      	; 0x131ce <PrintIdle+0x50a>
   131ce:	00 d0       	rcall	.+0      	; 0x131d0 <PrintIdle+0x50c>
   131d0:	00 d0       	rcall	.+0      	; 0x131d2 <PrintIdle+0x50e>
   131d2:	ed b7       	in	r30, 0x3d	; 61
   131d4:	fe b7       	in	r31, 0x3e	; 62
   131d6:	31 96       	adiw	r30, 0x01	; 1
   131d8:	ad b7       	in	r26, 0x3d	; 61
   131da:	be b7       	in	r27, 0x3e	; 62
   131dc:	12 96       	adiw	r26, 0x02	; 2
   131de:	1c 93       	st	X, r17
   131e0:	0e 93       	st	-X, r16
   131e2:	11 97       	sbiw	r26, 0x01	; 1
   131e4:	8b eb       	ldi	r24, 0xBB	; 187
   131e6:	9a e0       	ldi	r25, 0x0A	; 10
   131e8:	93 83       	std	Z+3, r25	; 0x03
   131ea:	82 83       	std	Z+2, r24	; 0x02
   131ec:	87 ef       	ldi	r24, 0xF7	; 247
   131ee:	93 e0       	ldi	r25, 0x03	; 3
   131f0:	0b c3       	rjmp	.+1558   	; 0x13808 <PrintIdle+0xb44>
		       break;
		  case 7:
		       //RemZeroLead(strAmount);		       
			   //FormatCurrency(strAmount);
               if (eeprom_read_byte(&DefPrintMoney)==True){
   131f2:	82 ec       	ldi	r24, 0xC2	; 194
   131f4:	93 e0       	ldi	r25, 0x03	; 3
   131f6:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
   131fa:	0e e3       	ldi	r16, 0x3E	; 62
   131fc:	19 e0       	ldi	r17, 0x09	; 9
   131fe:	81 30       	cpi	r24, 0x01	; 1
   13200:	a9 f4       	brne	.+42     	; 0x1322c <PrintIdle+0x568>
			   	   CarriegeReturn();
   13202:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("      Jml Rupiah  : Rp.%s"),strAmount);
   13206:	00 d0       	rcall	.+0      	; 0x13208 <PrintIdle+0x544>
   13208:	00 d0       	rcall	.+0      	; 0x1320a <PrintIdle+0x546>
   1320a:	00 d0       	rcall	.+0      	; 0x1320c <PrintIdle+0x548>
   1320c:	ed b7       	in	r30, 0x3d	; 61
   1320e:	fe b7       	in	r31, 0x3e	; 62
   13210:	31 96       	adiw	r30, 0x01	; 1
   13212:	ad b7       	in	r26, 0x3d	; 61
   13214:	be b7       	in	r27, 0x3e	; 62
   13216:	12 96       	adiw	r26, 0x02	; 2
   13218:	1c 93       	st	X, r17
   1321a:	0e 93       	st	-X, r16
   1321c:	11 97       	sbiw	r26, 0x01	; 1
   1321e:	81 ea       	ldi	r24, 0xA1	; 161
   13220:	9a e0       	ldi	r25, 0x0A	; 10
   13222:	93 83       	std	Z+3, r25	; 0x03
   13224:	82 83       	std	Z+2, r24	; 0x02
   13226:	85 e3       	ldi	r24, 0x35	; 53
   13228:	9c e0       	ldi	r25, 0x0C	; 12
   1322a:	ee c2       	rjmp	.+1500   	; 0x13808 <PrintIdle+0xb44>
			   }else sprintf_P(strPrint,PSTR(""));
   1322c:	00 d0       	rcall	.+0      	; 0x1322e <PrintIdle+0x56a>
   1322e:	00 d0       	rcall	.+0      	; 0x13230 <PrintIdle+0x56c>
   13230:	ad b7       	in	r26, 0x3d	; 61
   13232:	be b7       	in	r27, 0x3e	; 62
   13234:	12 96       	adiw	r26, 0x02	; 2
   13236:	1c 93       	st	X, r17
   13238:	0e 93       	st	-X, r16
   1323a:	11 97       	sbiw	r26, 0x01	; 1
   1323c:	80 ea       	ldi	r24, 0xA0	; 160
   1323e:	9a e0       	ldi	r25, 0x0A	; 10
   13240:	fc c2       	rjmp	.+1528   	; 0x1383a <PrintIdle+0xb76>

		       break;
		  case 8:
		       if ((strlen(strLicPlate)>0)&&(SpaceOnly(strLicPlate)==False)){
   13242:	0c e7       	ldi	r16, 0x7C	; 124
   13244:	19 e0       	ldi	r17, 0x09	; 9
   13246:	80 91 7c 09 	lds	r24, 0x097C
   1324a:	88 23       	and	r24, r24
   1324c:	09 f4       	brne	.+2      	; 0x13250 <PrintIdle+0x58c>
   1324e:	10 c2       	rjmp	.+1056   	; 0x13670 <PrintIdle+0x9ac>
   13250:	c8 01       	movw	r24, r16
   13252:	0e 94 20 24 	call	0x4840	; 0x4840 <SpaceOnly>
   13256:	88 23       	and	r24, r24
   13258:	09 f0       	breq	.+2      	; 0x1325c <PrintIdle+0x598>
   1325a:	0a c2       	rjmp	.+1044   	; 0x13670 <PrintIdle+0x9ac>
			       CarriegeReturn();
   1325c:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("      No.Polisi   : %s"),strLicPlate);
   13260:	00 d0       	rcall	.+0      	; 0x13262 <PrintIdle+0x59e>
   13262:	00 d0       	rcall	.+0      	; 0x13264 <PrintIdle+0x5a0>
   13264:	00 d0       	rcall	.+0      	; 0x13266 <PrintIdle+0x5a2>
   13266:	ed b7       	in	r30, 0x3d	; 61
   13268:	fe b7       	in	r31, 0x3e	; 62
   1326a:	31 96       	adiw	r30, 0x01	; 1
   1326c:	8e e3       	ldi	r24, 0x3E	; 62
   1326e:	99 e0       	ldi	r25, 0x09	; 9
   13270:	ad b7       	in	r26, 0x3d	; 61
   13272:	be b7       	in	r27, 0x3e	; 62
   13274:	12 96       	adiw	r26, 0x02	; 2
   13276:	9c 93       	st	X, r25
   13278:	8e 93       	st	-X, r24
   1327a:	11 97       	sbiw	r26, 0x01	; 1
   1327c:	89 e8       	ldi	r24, 0x89	; 137
   1327e:	9a e0       	ldi	r25, 0x0A	; 10
   13280:	1f c0       	rjmp	.+62     	; 0x132c0 <PrintIdle+0x5fc>
                   ClearMem(strLicPlate);
				   }
               else ClearMem(strPrint);
		       break;
		  case 9:
		       if ((strlen(strOdometer)>0)&&(SpaceOnly(strOdometer)==False)){
   13282:	05 e4       	ldi	r16, 0x45	; 69
   13284:	14 e0       	ldi	r17, 0x04	; 4
   13286:	80 91 45 04 	lds	r24, 0x0445
   1328a:	88 23       	and	r24, r24
   1328c:	09 f4       	brne	.+2      	; 0x13290 <PrintIdle+0x5cc>
   1328e:	f0 c1       	rjmp	.+992    	; 0x13670 <PrintIdle+0x9ac>
   13290:	c8 01       	movw	r24, r16
   13292:	0e 94 20 24 	call	0x4840	; 0x4840 <SpaceOnly>
   13296:	88 23       	and	r24, r24
   13298:	09 f0       	breq	.+2      	; 0x1329c <PrintIdle+0x5d8>
   1329a:	ea c1       	rjmp	.+980    	; 0x13670 <PrintIdle+0x9ac>
			       CarriegeReturn();
   1329c:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
		           sprintf_P(strPrint,PSTR("      Odometer    : %s"),strOdometer);
   132a0:	00 d0       	rcall	.+0      	; 0x132a2 <PrintIdle+0x5de>
   132a2:	00 d0       	rcall	.+0      	; 0x132a4 <PrintIdle+0x5e0>
   132a4:	00 d0       	rcall	.+0      	; 0x132a6 <PrintIdle+0x5e2>
   132a6:	ed b7       	in	r30, 0x3d	; 61
   132a8:	fe b7       	in	r31, 0x3e	; 62
   132aa:	31 96       	adiw	r30, 0x01	; 1
   132ac:	8e e3       	ldi	r24, 0x3E	; 62
   132ae:	99 e0       	ldi	r25, 0x09	; 9
   132b0:	ad b7       	in	r26, 0x3d	; 61
   132b2:	be b7       	in	r27, 0x3e	; 62
   132b4:	12 96       	adiw	r26, 0x02	; 2
   132b6:	9c 93       	st	X, r25
   132b8:	8e 93       	st	-X, r24
   132ba:	11 97       	sbiw	r26, 0x01	; 1
   132bc:	82 e7       	ldi	r24, 0x72	; 114
   132be:	9a e0       	ldi	r25, 0x0A	; 10
   132c0:	93 83       	std	Z+3, r25	; 0x03
   132c2:	82 83       	std	Z+2, r24	; 0x02
   132c4:	15 83       	std	Z+5, r17	; 0x05
   132c6:	04 83       	std	Z+4, r16	; 0x04
   132c8:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
				   ClearMem(strOdometer);
   132cc:	ed b7       	in	r30, 0x3d	; 61
   132ce:	fe b7       	in	r31, 0x3e	; 62
   132d0:	36 96       	adiw	r30, 0x06	; 6
   132d2:	0f b6       	in	r0, 0x3f	; 63
   132d4:	f8 94       	cli
   132d6:	fe bf       	out	0x3e, r31	; 62
   132d8:	0f be       	out	0x3f, r0	; 63
   132da:	ed bf       	out	0x3d, r30	; 61
   132dc:	c8 01       	movw	r24, r16
   132de:	0e 94 53 a5 	call	0x14aa6	; 0x14aa6 <ClearMem>
   132e2:	b5 c2       	rjmp	.+1386   	; 0x1384e <PrintIdle+0xb8a>
			   }else ClearMem(strPrint);
		       break;
		  case 10:
		       CarriegeReturn();
   132e4:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("    ------------------------------"));
   132e8:	00 d0       	rcall	.+0      	; 0x132ea <PrintIdle+0x626>
   132ea:	00 d0       	rcall	.+0      	; 0x132ec <PrintIdle+0x628>
   132ec:	ad b7       	in	r26, 0x3d	; 61
   132ee:	be b7       	in	r27, 0x3e	; 62
   132f0:	12 96       	adiw	r26, 0x02	; 2
   132f2:	1c 93       	st	X, r17
   132f4:	0e 93       	st	-X, r16
   132f6:	11 97       	sbiw	r26, 0x01	; 1
   132f8:	8f e4       	ldi	r24, 0x4F	; 79
   132fa:	9a e0       	ldi	r25, 0x0A	; 10
   132fc:	9e c2       	rjmp	.+1340   	; 0x1383a <PrintIdle+0xb76>
		       break;
          //ChangeMOPPrint
		  case 11:
			   if ((MOPType==MOP_LOCAL_ACCOUNT)||(MOPType==MOP_DEBIT_CARD)||(MOPType==MOP_LOYALTY_LOCAL_ACCOUNT)){
   132fe:	80 91 b8 01 	lds	r24, 0x01B8
   13302:	81 30       	cpi	r24, 0x01	; 1
   13304:	21 f0       	breq	.+8      	; 0x1330e <PrintIdle+0x64a>
   13306:	83 30       	cpi	r24, 0x03	; 3
   13308:	11 f0       	breq	.+4      	; 0x1330e <PrintIdle+0x64a>
   1330a:	86 30       	cpi	r24, 0x06	; 6
   1330c:	b9 f4       	brne	.+46     	; 0x1333c <PrintIdle+0x678>
			       //RemSpaceLag(strCardID);
				   CarriegeReturn();
   1330e:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("    Kartu ID : %s"),strCardID);
   13312:	00 d0       	rcall	.+0      	; 0x13314 <PrintIdle+0x650>
   13314:	00 d0       	rcall	.+0      	; 0x13316 <PrintIdle+0x652>
   13316:	00 d0       	rcall	.+0      	; 0x13318 <PrintIdle+0x654>
   13318:	ed b7       	in	r30, 0x3d	; 61
   1331a:	fe b7       	in	r31, 0x3e	; 62
   1331c:	31 96       	adiw	r30, 0x01	; 1
   1331e:	8e e3       	ldi	r24, 0x3E	; 62
   13320:	99 e0       	ldi	r25, 0x09	; 9
   13322:	ad b7       	in	r26, 0x3d	; 61
   13324:	be b7       	in	r27, 0x3e	; 62
   13326:	12 96       	adiw	r26, 0x02	; 2
   13328:	9c 93       	st	X, r25
   1332a:	8e 93       	st	-X, r24
   1332c:	11 97       	sbiw	r26, 0x01	; 1
   1332e:	8d e3       	ldi	r24, 0x3D	; 61
   13330:	9a e0       	ldi	r25, 0x0A	; 10
   13332:	93 83       	std	Z+3, r25	; 0x03
   13334:	82 83       	std	Z+2, r24	; 0x02
   13336:	8b e0       	ldi	r24, 0x0B	; 11
   13338:	9c e0       	ldi	r25, 0x0C	; 12
   1333a:	18 c0       	rjmp	.+48     	; 0x1336c <PrintIdle+0x6a8>
				   IsSignedField=True;
				   }
	           else
			   if (MOPType==MOP_VOUCHER){
   1333c:	87 30       	cpi	r24, 0x07	; 7
   1333e:	f1 f4       	brne	.+60     	; 0x1337c <PrintIdle+0x6b8>
			       //RemSpaceLag(strCardID);
				   CarriegeReturn();
   13340:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("    Voucher No: %s"),strVoucherNum);
   13344:	00 d0       	rcall	.+0      	; 0x13346 <PrintIdle+0x682>
   13346:	00 d0       	rcall	.+0      	; 0x13348 <PrintIdle+0x684>
   13348:	00 d0       	rcall	.+0      	; 0x1334a <PrintIdle+0x686>
   1334a:	ed b7       	in	r30, 0x3d	; 61
   1334c:	fe b7       	in	r31, 0x3e	; 62
   1334e:	31 96       	adiw	r30, 0x01	; 1
   13350:	8e e3       	ldi	r24, 0x3E	; 62
   13352:	99 e0       	ldi	r25, 0x09	; 9
   13354:	ad b7       	in	r26, 0x3d	; 61
   13356:	be b7       	in	r27, 0x3e	; 62
   13358:	12 96       	adiw	r26, 0x02	; 2
   1335a:	9c 93       	st	X, r25
   1335c:	8e 93       	st	-X, r24
   1335e:	11 97       	sbiw	r26, 0x01	; 1
   13360:	8a e2       	ldi	r24, 0x2A	; 42
   13362:	9a e0       	ldi	r25, 0x0A	; 10
   13364:	93 83       	std	Z+3, r25	; 0x03
   13366:	82 83       	std	Z+2, r24	; 0x02
   13368:	8e eb       	ldi	r24, 0xBE	; 190
   1336a:	9c e0       	ldi	r25, 0x0C	; 12
   1336c:	95 83       	std	Z+5, r25	; 0x05
   1336e:	84 83       	std	Z+4, r24	; 0x04
   13370:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
				   IsSignedField=True;
   13374:	81 e0       	ldi	r24, 0x01	; 1
   13376:	80 93 ff 01 	sts	0x01FF, r24
   1337a:	4a c2       	rjmp	.+1172   	; 0x13810 <PrintIdle+0xb4c>
   1337c:	0e e3       	ldi	r16, 0x3E	; 62
   1337e:	19 e0       	ldi	r17, 0x09	; 9
				   }
			   else
			   if (MOPType==MOP_PUMP_TEST) {
   13380:	88 30       	cpi	r24, 0x08	; 8
   13382:	09 f0       	breq	.+2      	; 0x13386 <PrintIdle+0x6c2>
   13384:	ab cf       	rjmp	.-170    	; 0x132dc <PrintIdle+0x618>
			       CarriegeReturn();
   13386:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("          *** PUMP TEST ***       "));
   1338a:	00 d0       	rcall	.+0      	; 0x1338c <PrintIdle+0x6c8>
   1338c:	00 d0       	rcall	.+0      	; 0x1338e <PrintIdle+0x6ca>
   1338e:	ad b7       	in	r26, 0x3d	; 61
   13390:	be b7       	in	r27, 0x3e	; 62
   13392:	12 96       	adiw	r26, 0x02	; 2
   13394:	1c 93       	st	X, r17
   13396:	0e 93       	st	-X, r16
   13398:	11 97       	sbiw	r26, 0x01	; 1
   1339a:	87 e0       	ldi	r24, 0x07	; 7
   1339c:	9a e0       	ldi	r25, 0x0A	; 10
   1339e:	14 96       	adiw	r26, 0x04	; 4
   133a0:	9c 93       	st	X, r25
   133a2:	8e 93       	st	-X, r24
   133a4:	13 97       	sbiw	r26, 0x03	; 3
   133a6:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
				   IsSignedField=False;
   133aa:	10 92 ff 01 	sts	0x01FF, r1
   133ae:	4b c2       	rjmp	.+1174   	; 0x13846 <PrintIdle+0xb82>
				   }
               else ClearMem(strPrint);
		       break;
          case 12:
			   if (MOPType==MOP_LOCAL_ACCOUNT) {
   133b0:	80 91 b8 01 	lds	r24, 0x01B8
   133b4:	81 30       	cpi	r24, 0x01	; 1
   133b6:	99 f4       	brne	.+38     	; 0x133de <PrintIdle+0x71a>
			       //RemSpaceLag(strCardHolder);
				   CarriegeReturn();
   133b8:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("    Nama     : %s"),strCardHolder);
   133bc:	00 d0       	rcall	.+0      	; 0x133be <PrintIdle+0x6fa>
   133be:	00 d0       	rcall	.+0      	; 0x133c0 <PrintIdle+0x6fc>
   133c0:	00 d0       	rcall	.+0      	; 0x133c2 <PrintIdle+0x6fe>
   133c2:	ed b7       	in	r30, 0x3d	; 61
   133c4:	fe b7       	in	r31, 0x3e	; 62
   133c6:	31 96       	adiw	r30, 0x01	; 1
   133c8:	8e e3       	ldi	r24, 0x3E	; 62
   133ca:	99 e0       	ldi	r25, 0x09	; 9
   133cc:	ad b7       	in	r26, 0x3d	; 61
   133ce:	be b7       	in	r27, 0x3e	; 62
   133d0:	12 96       	adiw	r26, 0x02	; 2
   133d2:	9c 93       	st	X, r25
   133d4:	8e 93       	st	-X, r24
   133d6:	11 97       	sbiw	r26, 0x01	; 1
   133d8:	85 ef       	ldi	r24, 0xF5	; 245
   133da:	99 e0       	ldi	r25, 0x09	; 9
   133dc:	3a c0       	rjmp	.+116    	; 0x13452 <PrintIdle+0x78e>
				   }
               else 
               if (MOPType==MOP_DEBIT_CARD) {//EDCApprovalCode
   133de:	83 30       	cpi	r24, 0x03	; 3
   133e0:	e9 f5       	brne	.+122    	; 0x1345c <PrintIdle+0x798>
			       if (IsPrintApprovalCode==True){
   133e2:	80 91 9a 01 	lds	r24, 0x019A
   133e6:	81 30       	cpi	r24, 0x01	; 1
   133e8:	11 f5       	brne	.+68     	; 0x1342e <PrintIdle+0x76a>
				       IsPrintApprovalCode=False;
   133ea:	10 92 9a 01 	sts	0x019A, r1
					   FillChar(strCardHolder,0,sizeof(strCardHolder));
					   sprintf_P(strCardHolder,PSTR("%s  "),strApprovalCode);
   133ee:	00 d0       	rcall	.+0      	; 0x133f0 <PrintIdle+0x72c>
   133f0:	00 d0       	rcall	.+0      	; 0x133f2 <PrintIdle+0x72e>
   133f2:	00 d0       	rcall	.+0      	; 0x133f4 <PrintIdle+0x730>
   133f4:	ed b7       	in	r30, 0x3d	; 61
   133f6:	fe b7       	in	r31, 0x3e	; 62
   133f8:	31 96       	adiw	r30, 0x01	; 1
   133fa:	86 ea       	ldi	r24, 0xA6	; 166
   133fc:	93 e0       	ldi	r25, 0x03	; 3
   133fe:	ad b7       	in	r26, 0x3d	; 61
   13400:	be b7       	in	r27, 0x3e	; 62
   13402:	12 96       	adiw	r26, 0x02	; 2
   13404:	9c 93       	st	X, r25
   13406:	8e 93       	st	-X, r24
   13408:	11 97       	sbiw	r26, 0x01	; 1
   1340a:	80 ef       	ldi	r24, 0xF0	; 240
   1340c:	99 e0       	ldi	r25, 0x09	; 9
   1340e:	93 83       	std	Z+3, r25	; 0x03
   13410:	82 83       	std	Z+2, r24	; 0x02
   13412:	82 e7       	ldi	r24, 0x72	; 114
   13414:	98 e0       	ldi	r25, 0x08	; 8
   13416:	95 83       	std	Z+5, r25	; 0x05
   13418:	84 83       	std	Z+4, r24	; 0x04
   1341a:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
   1341e:	ed b7       	in	r30, 0x3d	; 61
   13420:	fe b7       	in	r31, 0x3e	; 62
   13422:	36 96       	adiw	r30, 0x06	; 6
   13424:	0f b6       	in	r0, 0x3f	; 63
   13426:	f8 94       	cli
   13428:	fe bf       	out	0x3e, r31	; 62
   1342a:	0f be       	out	0x3f, r0	; 63
   1342c:	ed bf       	out	0x3d, r30	; 61
				   }
			       //RemSpaceLag(strCardHolder);
				   CarriegeReturn();
   1342e:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("    Appr Code: %s"),strCardHolder);
   13432:	00 d0       	rcall	.+0      	; 0x13434 <PrintIdle+0x770>
   13434:	00 d0       	rcall	.+0      	; 0x13436 <PrintIdle+0x772>
   13436:	00 d0       	rcall	.+0      	; 0x13438 <PrintIdle+0x774>
   13438:	ed b7       	in	r30, 0x3d	; 61
   1343a:	fe b7       	in	r31, 0x3e	; 62
   1343c:	31 96       	adiw	r30, 0x01	; 1
   1343e:	8e e3       	ldi	r24, 0x3E	; 62
   13440:	99 e0       	ldi	r25, 0x09	; 9
   13442:	ad b7       	in	r26, 0x3d	; 61
   13444:	be b7       	in	r27, 0x3e	; 62
   13446:	12 96       	adiw	r26, 0x02	; 2
   13448:	9c 93       	st	X, r25
   1344a:	8e 93       	st	-X, r24
   1344c:	11 97       	sbiw	r26, 0x01	; 1
   1344e:	8e ed       	ldi	r24, 0xDE	; 222
   13450:	99 e0       	ldi	r25, 0x09	; 9
   13452:	93 83       	std	Z+3, r25	; 0x03
   13454:	82 83       	std	Z+2, r24	; 0x02
   13456:	86 ea       	ldi	r24, 0xA6	; 166
   13458:	93 e0       	ldi	r25, 0x03	; 3
   1345a:	d6 c1       	rjmp	.+940    	; 0x13808 <PrintIdle+0xb44>
				   }
               else
			   if (MOPType==MOP_VOUCHER){
   1345c:	87 30       	cpi	r24, 0x07	; 7
   1345e:	79 f4       	brne	.+30     	; 0x1347e <PrintIdle+0x7ba>
			       CarriegeReturn();
   13460:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("  "));
   13464:	00 d0       	rcall	.+0      	; 0x13466 <PrintIdle+0x7a2>
   13466:	00 d0       	rcall	.+0      	; 0x13468 <PrintIdle+0x7a4>
   13468:	8e e3       	ldi	r24, 0x3E	; 62
   1346a:	99 e0       	ldi	r25, 0x09	; 9
   1346c:	ad b7       	in	r26, 0x3d	; 61
   1346e:	be b7       	in	r27, 0x3e	; 62
   13470:	12 96       	adiw	r26, 0x02	; 2
   13472:	9c 93       	st	X, r25
   13474:	8e 93       	st	-X, r24
   13476:	11 97       	sbiw	r26, 0x01	; 1
   13478:	8b ed       	ldi	r24, 0xDB	; 219
   1347a:	99 e0       	ldi	r25, 0x09	; 9
   1347c:	de c1       	rjmp	.+956    	; 0x1383a <PrintIdle+0xb76>
   1347e:	0e e3       	ldi	r16, 0x3E	; 62
   13480:	19 e0       	ldi	r17, 0x09	; 9
				   }
			   else
			   if (MOPType==MOP_PUMP_TEST) {
   13482:	88 30       	cpi	r24, 0x08	; 8
   13484:	09 f0       	breq	.+2      	; 0x13488 <PrintIdle+0x7c4>
   13486:	2a cf       	rjmp	.-428    	; 0x132dc <PrintIdle+0x618>
			       CarriegeReturn();
   13488:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("                 "));
   1348c:	00 d0       	rcall	.+0      	; 0x1348e <PrintIdle+0x7ca>
   1348e:	00 d0       	rcall	.+0      	; 0x13490 <PrintIdle+0x7cc>
   13490:	ed b7       	in	r30, 0x3d	; 61
   13492:	fe b7       	in	r31, 0x3e	; 62
   13494:	12 83       	std	Z+2, r17	; 0x02
   13496:	01 83       	std	Z+1, r16	; 0x01
   13498:	89 ec       	ldi	r24, 0xC9	; 201
   1349a:	99 e0       	ldi	r25, 0x09	; 9
   1349c:	25 c0       	rjmp	.+74     	; 0x134e8 <PrintIdle+0x824>
				   }
               else ClearMem(strPrint);
		       break;
          case 13:
		       if (IsSignedField==True){
   1349e:	80 91 ff 01 	lds	r24, 0x01FF
   134a2:	0e e3       	ldi	r16, 0x3E	; 62
   134a4:	19 e0       	ldi	r17, 0x09	; 9
   134a6:	81 30       	cpi	r24, 0x01	; 1
   134a8:	09 f0       	breq	.+2      	; 0x134ac <PrintIdle+0x7e8>
   134aa:	18 cf       	rjmp	.-464    	; 0x132dc <PrintIdle+0x618>
			       CarriegeReturn();
   134ac:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("                      "));
   134b0:	00 d0       	rcall	.+0      	; 0x134b2 <PrintIdle+0x7ee>
   134b2:	00 d0       	rcall	.+0      	; 0x134b4 <PrintIdle+0x7f0>
   134b4:	ad b7       	in	r26, 0x3d	; 61
   134b6:	be b7       	in	r27, 0x3e	; 62
   134b8:	12 96       	adiw	r26, 0x02	; 2
   134ba:	1c 93       	st	X, r17
   134bc:	0e 93       	st	-X, r16
   134be:	11 97       	sbiw	r26, 0x01	; 1
   134c0:	82 eb       	ldi	r24, 0xB2	; 178
   134c2:	99 e0       	ldi	r25, 0x09	; 9
   134c4:	ba c1       	rjmp	.+884    	; 0x1383a <PrintIdle+0xb76>
               }else ClearMem(strPrint);
		       break;
          case 14:
		       if (IsSignedField==True){
   134c6:	80 91 ff 01 	lds	r24, 0x01FF
   134ca:	0e e3       	ldi	r16, 0x3E	; 62
   134cc:	19 e0       	ldi	r17, 0x09	; 9
   134ce:	81 30       	cpi	r24, 0x01	; 1
   134d0:	09 f0       	breq	.+2      	; 0x134d4 <PrintIdle+0x810>
   134d2:	04 cf       	rjmp	.-504    	; 0x132dc <PrintIdle+0x618>
			       CarriegeReturn();
   134d4:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("                      "));
   134d8:	00 d0       	rcall	.+0      	; 0x134da <PrintIdle+0x816>
   134da:	00 d0       	rcall	.+0      	; 0x134dc <PrintIdle+0x818>
   134dc:	ed b7       	in	r30, 0x3d	; 61
   134de:	fe b7       	in	r31, 0x3e	; 62
   134e0:	12 83       	std	Z+2, r17	; 0x02
   134e2:	01 83       	std	Z+1, r16	; 0x01
   134e4:	8b e9       	ldi	r24, 0x9B	; 155
   134e6:	99 e0       	ldi	r25, 0x09	; 9
   134e8:	94 83       	std	Z+4, r25	; 0x04
   134ea:	83 83       	std	Z+3, r24	; 0x03
   134ec:	aa c1       	rjmp	.+852    	; 0x13842 <PrintIdle+0xb7e>
			       //sprintf_P(strPrint,PSTR("                      "));
				   ClearMem(strPrint);
               }else ClearMem(strPrint);
		       break;
          case 17:
		       if (IsSignedField==True){
   134ee:	80 91 ff 01 	lds	r24, 0x01FF
   134f2:	0e e3       	ldi	r16, 0x3E	; 62
   134f4:	19 e0       	ldi	r17, 0x09	; 9
   134f6:	81 30       	cpi	r24, 0x01	; 1
   134f8:	09 f0       	breq	.+2      	; 0x134fc <PrintIdle+0x838>
   134fa:	f0 ce       	rjmp	.-544    	; 0x132dc <PrintIdle+0x618>
			       CarriegeReturn();
   134fc:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
			       sprintf_P(strPrint,PSTR("    Tanda Tangan  (______________)"));
   13500:	00 d0       	rcall	.+0      	; 0x13502 <PrintIdle+0x83e>
   13502:	00 d0       	rcall	.+0      	; 0x13504 <PrintIdle+0x840>
   13504:	ad b7       	in	r26, 0x3d	; 61
   13506:	be b7       	in	r27, 0x3e	; 62
   13508:	12 96       	adiw	r26, 0x02	; 2
   1350a:	1c 93       	st	X, r17
   1350c:	0e 93       	st	-X, r16
   1350e:	11 97       	sbiw	r26, 0x01	; 1
   13510:	88 e7       	ldi	r24, 0x78	; 120
   13512:	99 e0       	ldi	r25, 0x09	; 9
   13514:	92 c1       	rjmp	.+804    	; 0x1383a <PrintIdle+0xb76>
               }else ClearMem(strPrint);
		       break;
          case 18:
		       if (IsSignedField==True){
   13516:	80 91 ff 01 	lds	r24, 0x01FF
   1351a:	81 30       	cpi	r24, 0x01	; 1
   1351c:	09 f0       	breq	.+2      	; 0x13520 <PrintIdle+0x85c>
   1351e:	a8 c0       	rjmp	.+336    	; 0x13670 <PrintIdle+0x9ac>
			       IsSignedField=False;
   13520:	10 92 ff 01 	sts	0x01FF, r1
   13524:	a5 c0       	rjmp	.+330    	; 0x13670 <PrintIdle+0x9ac>
			       //sprintf_P(strPrint,PSTR("                      "));
				   ClearMem(strPrint);
               }else ClearMem(strPrint);
		       break;
          case 19://PrintMOP Name
		       if (MOPType!=MOP_CASH){
   13526:	80 91 b8 01 	lds	r24, 0x01B8
   1352a:	0e e3       	ldi	r16, 0x3E	; 62
   1352c:	19 e0       	ldi	r17, 0x09	; 9
   1352e:	88 23       	and	r24, r24
   13530:	09 f4       	brne	.+2      	; 0x13534 <PrintIdle+0x870>
   13532:	d4 ce       	rjmp	.-600    	; 0x132dc <PrintIdle+0x618>
			       CarriegeReturn();
   13534:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
			       //RemSpaceLag(strMOPName);
			       sprintf_P(strPrint,PSTR("    .%s"),strMOPName);
   13538:	00 d0       	rcall	.+0      	; 0x1353a <PrintIdle+0x876>
   1353a:	00 d0       	rcall	.+0      	; 0x1353c <PrintIdle+0x878>
   1353c:	00 d0       	rcall	.+0      	; 0x1353e <PrintIdle+0x87a>
   1353e:	ed b7       	in	r30, 0x3d	; 61
   13540:	fe b7       	in	r31, 0x3e	; 62
   13542:	31 96       	adiw	r30, 0x01	; 1
   13544:	ad b7       	in	r26, 0x3d	; 61
   13546:	be b7       	in	r27, 0x3e	; 62
   13548:	12 96       	adiw	r26, 0x02	; 2
   1354a:	1c 93       	st	X, r17
   1354c:	0e 93       	st	-X, r16
   1354e:	11 97       	sbiw	r26, 0x01	; 1
   13550:	80 e7       	ldi	r24, 0x70	; 112
   13552:	99 e0       	ldi	r25, 0x09	; 9
   13554:	93 83       	std	Z+3, r25	; 0x03
   13556:	82 83       	std	Z+2, r24	; 0x02
   13558:	8f ef       	ldi	r24, 0xFF	; 255
   1355a:	95 e0       	ldi	r25, 0x05	; 5
   1355c:	55 c1       	rjmp	.+682    	; 0x13808 <PrintIdle+0xb44>
			   }else ClearMem(strPrint);
		       break;
		  case 20:
		       if (MOPType!=MOP_CASH){
   1355e:	80 91 b8 01 	lds	r24, 0x01B8
   13562:	0e e3       	ldi	r16, 0x3E	; 62
   13564:	19 e0       	ldi	r17, 0x09	; 9
   13566:	88 23       	and	r24, r24
   13568:	09 f4       	brne	.+2      	; 0x1356c <PrintIdle+0x8a8>
   1356a:	b8 ce       	rjmp	.-656    	; 0x132dc <PrintIdle+0x618>
			       CarriegeReturn();
   1356c:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
		           sprintf_P(strPrint,PSTR("    ------------------------------"));
   13570:	00 d0       	rcall	.+0      	; 0x13572 <PrintIdle+0x8ae>
   13572:	00 d0       	rcall	.+0      	; 0x13574 <PrintIdle+0x8b0>
   13574:	ad b7       	in	r26, 0x3d	; 61
   13576:	be b7       	in	r27, 0x3e	; 62
   13578:	12 96       	adiw	r26, 0x02	; 2
   1357a:	1c 93       	st	X, r17
   1357c:	0e 93       	st	-X, r16
   1357e:	11 97       	sbiw	r26, 0x01	; 1
   13580:	8d e4       	ldi	r24, 0x4D	; 77
   13582:	99 e0       	ldi	r25, 0x09	; 9
   13584:	5a c1       	rjmp	.+692    	; 0x1383a <PrintIdle+0xb76>
			   }else ClearMem(strPrint);
		       break;          
          //Loyalty
		  case 21:
		       CarriegeReturn();
   13586:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("         LOYALTY INFORMATION      "));
   1358a:	00 d0       	rcall	.+0      	; 0x1358c <PrintIdle+0x8c8>
   1358c:	00 d0       	rcall	.+0      	; 0x1358e <PrintIdle+0x8ca>
   1358e:	ed b7       	in	r30, 0x3d	; 61
   13590:	fe b7       	in	r31, 0x3e	; 62
   13592:	12 83       	std	Z+2, r17	; 0x02
   13594:	01 83       	std	Z+1, r16	; 0x01
   13596:	8a e2       	ldi	r24, 0x2A	; 42
   13598:	99 e0       	ldi	r25, 0x09	; 9
   1359a:	a6 cf       	rjmp	.-180    	; 0x134e8 <PrintIdle+0x824>
		       break; 			            
		  case 22:
		       CarriegeReturn();
   1359c:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("     Card ID      : %s"),strLoyCardID);
   135a0:	00 d0       	rcall	.+0      	; 0x135a2 <PrintIdle+0x8de>
   135a2:	00 d0       	rcall	.+0      	; 0x135a4 <PrintIdle+0x8e0>
   135a4:	00 d0       	rcall	.+0      	; 0x135a6 <PrintIdle+0x8e2>
   135a6:	ed b7       	in	r30, 0x3d	; 61
   135a8:	fe b7       	in	r31, 0x3e	; 62
   135aa:	31 96       	adiw	r30, 0x01	; 1
   135ac:	ad b7       	in	r26, 0x3d	; 61
   135ae:	be b7       	in	r27, 0x3e	; 62
   135b0:	12 96       	adiw	r26, 0x02	; 2
   135b2:	1c 93       	st	X, r17
   135b4:	0e 93       	st	-X, r16
   135b6:	11 97       	sbiw	r26, 0x01	; 1
   135b8:	83 e1       	ldi	r24, 0x13	; 19
   135ba:	99 e0       	ldi	r25, 0x09	; 9
   135bc:	93 83       	std	Z+3, r25	; 0x03
   135be:	82 83       	std	Z+2, r24	; 0x02
   135c0:	87 ee       	ldi	r24, 0xE7	; 231
   135c2:	92 e0       	ldi	r25, 0x02	; 2
   135c4:	21 c1       	rjmp	.+578    	; 0x13808 <PrintIdle+0xb44>
		       break;
		  case 23:
		       CarriegeReturn();
   135c6:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
			   //RemSpaceLag(strLoyCardHolder);
		       sprintf_P(strPrint,PSTR("     Card Holder  : %s "),strLoyCardHolder);
   135ca:	00 d0       	rcall	.+0      	; 0x135cc <PrintIdle+0x908>
   135cc:	00 d0       	rcall	.+0      	; 0x135ce <PrintIdle+0x90a>
   135ce:	00 d0       	rcall	.+0      	; 0x135d0 <PrintIdle+0x90c>
   135d0:	ed b7       	in	r30, 0x3d	; 61
   135d2:	fe b7       	in	r31, 0x3e	; 62
   135d4:	31 96       	adiw	r30, 0x01	; 1
   135d6:	ad b7       	in	r26, 0x3d	; 61
   135d8:	be b7       	in	r27, 0x3e	; 62
   135da:	12 96       	adiw	r26, 0x02	; 2
   135dc:	1c 93       	st	X, r17
   135de:	0e 93       	st	-X, r16
   135e0:	11 97       	sbiw	r26, 0x01	; 1
   135e2:	8b ef       	ldi	r24, 0xFB	; 251
   135e4:	98 e0       	ldi	r25, 0x08	; 8
   135e6:	93 83       	std	Z+3, r25	; 0x03
   135e8:	82 83       	std	Z+2, r24	; 0x02
   135ea:	84 ec       	ldi	r24, 0xC4	; 196
   135ec:	92 e0       	ldi	r25, 0x02	; 2
   135ee:	0c c1       	rjmp	.+536    	; 0x13808 <PrintIdle+0xb44>
		       break;
		  case 24:
		       if ((strlen(strCorporateID)>0)&&(SpaceOnly(strCorporateID)==False)){
   135f0:	0c e8       	ldi	r16, 0x8C	; 140
   135f2:	1c e0       	ldi	r17, 0x0C	; 12
   135f4:	80 91 8c 0c 	lds	r24, 0x0C8C
   135f8:	88 23       	and	r24, r24
   135fa:	d1 f1       	breq	.+116    	; 0x13670 <PrintIdle+0x9ac>
   135fc:	c8 01       	movw	r24, r16
   135fe:	0e 94 20 24 	call	0x4840	; 0x4840 <SpaceOnly>
   13602:	88 23       	and	r24, r24
   13604:	a9 f5       	brne	.+106    	; 0x13670 <PrintIdle+0x9ac>
		           CarriegeReturn();
   13606:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
				   //RemSpaceLag(strCorporateID);
		           sprintf_P(strPrint,PSTR("     Corp ID      : %s"),strCorporateID);
   1360a:	00 d0       	rcall	.+0      	; 0x1360c <PrintIdle+0x948>
   1360c:	00 d0       	rcall	.+0      	; 0x1360e <PrintIdle+0x94a>
   1360e:	00 d0       	rcall	.+0      	; 0x13610 <PrintIdle+0x94c>
   13610:	ed b7       	in	r30, 0x3d	; 61
   13612:	fe b7       	in	r31, 0x3e	; 62
   13614:	31 96       	adiw	r30, 0x01	; 1
   13616:	8e e3       	ldi	r24, 0x3E	; 62
   13618:	99 e0       	ldi	r25, 0x09	; 9
   1361a:	ad b7       	in	r26, 0x3d	; 61
   1361c:	be b7       	in	r27, 0x3e	; 62
   1361e:	12 96       	adiw	r26, 0x02	; 2
   13620:	9c 93       	st	X, r25
   13622:	8e 93       	st	-X, r24
   13624:	11 97       	sbiw	r26, 0x01	; 1
   13626:	84 ee       	ldi	r24, 0xE4	; 228
   13628:	98 e0       	ldi	r25, 0x08	; 8
   1362a:	1d c0       	rjmp	.+58     	; 0x13666 <PrintIdle+0x9a2>
			   }else ClearMem(strPrint);
		       break;
		  case 25:
		       if ((strlen(strCorporateName)>0)&&(SpaceOnly(strCorporateName)==False)){
   1362c:	0f e4       	ldi	r16, 0x4F	; 79
   1362e:	14 e0       	ldi	r17, 0x04	; 4
   13630:	80 91 4f 04 	lds	r24, 0x044F
   13634:	88 23       	and	r24, r24
   13636:	e1 f0       	breq	.+56     	; 0x13670 <PrintIdle+0x9ac>
   13638:	c8 01       	movw	r24, r16
   1363a:	0e 94 20 24 	call	0x4840	; 0x4840 <SpaceOnly>
   1363e:	88 23       	and	r24, r24
   13640:	b9 f4       	brne	.+46     	; 0x13670 <PrintIdle+0x9ac>
		           CarriegeReturn();
   13642:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
				   //RemSpaceLag(strCorporateName);
		           sprintf_P(strPrint,PSTR("     Corp Name    : %s"),strCorporateName);
   13646:	00 d0       	rcall	.+0      	; 0x13648 <PrintIdle+0x984>
   13648:	00 d0       	rcall	.+0      	; 0x1364a <PrintIdle+0x986>
   1364a:	00 d0       	rcall	.+0      	; 0x1364c <PrintIdle+0x988>
   1364c:	ed b7       	in	r30, 0x3d	; 61
   1364e:	fe b7       	in	r31, 0x3e	; 62
   13650:	31 96       	adiw	r30, 0x01	; 1
   13652:	8e e3       	ldi	r24, 0x3E	; 62
   13654:	99 e0       	ldi	r25, 0x09	; 9
   13656:	ad b7       	in	r26, 0x3d	; 61
   13658:	be b7       	in	r27, 0x3e	; 62
   1365a:	12 96       	adiw	r26, 0x02	; 2
   1365c:	9c 93       	st	X, r25
   1365e:	8e 93       	st	-X, r24
   13660:	11 97       	sbiw	r26, 0x01	; 1
   13662:	8d ec       	ldi	r24, 0xCD	; 205
   13664:	98 e0       	ldi	r25, 0x08	; 8
   13666:	93 83       	std	Z+3, r25	; 0x03
   13668:	82 83       	std	Z+2, r24	; 0x02
   1366a:	15 83       	std	Z+5, r17	; 0x05
   1366c:	04 83       	std	Z+4, r16	; 0x04
   1366e:	ce c0       	rjmp	.+412    	; 0x1380c <PrintIdle+0xb48>
			   }else ClearMem(strPrint);
   13670:	8e e3       	ldi	r24, 0x3E	; 62
   13672:	99 e0       	ldi	r25, 0x09	; 9
   13674:	34 ce       	rjmp	.-920    	; 0x132de <PrintIdle+0x61a>
		       break;
		  case 26:
		       CarriegeReturn();
   13676:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("     Gain Points  : %s"),strGainPoints);
   1367a:	00 d0       	rcall	.+0      	; 0x1367c <PrintIdle+0x9b8>
   1367c:	00 d0       	rcall	.+0      	; 0x1367e <PrintIdle+0x9ba>
   1367e:	00 d0       	rcall	.+0      	; 0x13680 <PrintIdle+0x9bc>
   13680:	ed b7       	in	r30, 0x3d	; 61
   13682:	fe b7       	in	r31, 0x3e	; 62
   13684:	31 96       	adiw	r30, 0x01	; 1
   13686:	ad b7       	in	r26, 0x3d	; 61
   13688:	be b7       	in	r27, 0x3e	; 62
   1368a:	12 96       	adiw	r26, 0x02	; 2
   1368c:	1c 93       	st	X, r17
   1368e:	0e 93       	st	-X, r16
   13690:	11 97       	sbiw	r26, 0x01	; 1
   13692:	86 eb       	ldi	r24, 0xB6	; 182
   13694:	98 e0       	ldi	r25, 0x08	; 8
   13696:	93 83       	std	Z+3, r25	; 0x03
   13698:	82 83       	std	Z+2, r24	; 0x02
   1369a:	8b eb       	ldi	r24, 0xBB	; 187
   1369c:	92 e0       	ldi	r25, 0x02	; 2
   1369e:	b4 c0       	rjmp	.+360    	; 0x13808 <PrintIdle+0xb44>
		       break;
		  case 27:
		       CarriegeReturn();
   136a0:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("     Prev Points  : %s"),strPrevPoints);
   136a4:	00 d0       	rcall	.+0      	; 0x136a6 <PrintIdle+0x9e2>
   136a6:	00 d0       	rcall	.+0      	; 0x136a8 <PrintIdle+0x9e4>
   136a8:	00 d0       	rcall	.+0      	; 0x136aa <PrintIdle+0x9e6>
   136aa:	ed b7       	in	r30, 0x3d	; 61
   136ac:	fe b7       	in	r31, 0x3e	; 62
   136ae:	31 96       	adiw	r30, 0x01	; 1
   136b0:	ad b7       	in	r26, 0x3d	; 61
   136b2:	be b7       	in	r27, 0x3e	; 62
   136b4:	12 96       	adiw	r26, 0x02	; 2
   136b6:	1c 93       	st	X, r17
   136b8:	0e 93       	st	-X, r16
   136ba:	11 97       	sbiw	r26, 0x01	; 1
   136bc:	8f e9       	ldi	r24, 0x9F	; 159
   136be:	98 e0       	ldi	r25, 0x08	; 8
   136c0:	93 83       	std	Z+3, r25	; 0x03
   136c2:	82 83       	std	Z+2, r24	; 0x02
   136c4:	86 e9       	ldi	r24, 0x96	; 150
   136c6:	99 e0       	ldi	r25, 0x09	; 9
   136c8:	9f c0       	rjmp	.+318    	; 0x13808 <PrintIdle+0xb44>
		       break;
		  case 28:
		       CarriegeReturn();
   136ca:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("     Curr Points  : %s"),strLoyCurrentPoints);
   136ce:	00 d0       	rcall	.+0      	; 0x136d0 <PrintIdle+0xa0c>
   136d0:	00 d0       	rcall	.+0      	; 0x136d2 <PrintIdle+0xa0e>
   136d2:	00 d0       	rcall	.+0      	; 0x136d4 <PrintIdle+0xa10>
   136d4:	ed b7       	in	r30, 0x3d	; 61
   136d6:	fe b7       	in	r31, 0x3e	; 62
   136d8:	31 96       	adiw	r30, 0x01	; 1
   136da:	ad b7       	in	r26, 0x3d	; 61
   136dc:	be b7       	in	r27, 0x3e	; 62
   136de:	12 96       	adiw	r26, 0x02	; 2
   136e0:	1c 93       	st	X, r17
   136e2:	0e 93       	st	-X, r16
   136e4:	11 97       	sbiw	r26, 0x01	; 1
   136e6:	88 e8       	ldi	r24, 0x88	; 136
   136e8:	98 e0       	ldi	r25, 0x08	; 8
   136ea:	93 83       	std	Z+3, r25	; 0x03
   136ec:	82 83       	std	Z+2, r24	; 0x02
   136ee:	87 eb       	ldi	r24, 0xB7	; 183
   136f0:	98 e0       	ldi	r25, 0x08	; 8
   136f2:	8a c0       	rjmp	.+276    	; 0x13808 <PrintIdle+0xb44>
		       break;
		  case 29:
		       CarriegeReturn();
   136f4:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("     Expiry       : %s"),strLoyExpiry);
   136f8:	00 d0       	rcall	.+0      	; 0x136fa <PrintIdle+0xa36>
   136fa:	00 d0       	rcall	.+0      	; 0x136fc <PrintIdle+0xa38>
   136fc:	00 d0       	rcall	.+0      	; 0x136fe <PrintIdle+0xa3a>
   136fe:	ed b7       	in	r30, 0x3d	; 61
   13700:	fe b7       	in	r31, 0x3e	; 62
   13702:	31 96       	adiw	r30, 0x01	; 1
   13704:	ad b7       	in	r26, 0x3d	; 61
   13706:	be b7       	in	r27, 0x3e	; 62
   13708:	12 96       	adiw	r26, 0x02	; 2
   1370a:	1c 93       	st	X, r17
   1370c:	0e 93       	st	-X, r16
   1370e:	11 97       	sbiw	r26, 0x01	; 1
   13710:	81 e7       	ldi	r24, 0x71	; 113
   13712:	98 e0       	ldi	r25, 0x08	; 8
   13714:	93 83       	std	Z+3, r25	; 0x03
   13716:	82 83       	std	Z+2, r24	; 0x02
   13718:	8b ef       	ldi	r24, 0xFB	; 251
   1371a:	9c e0       	ldi	r25, 0x0C	; 12
   1371c:	75 c0       	rjmp	.+234    	; 0x13808 <PrintIdle+0xb44>
		       break;
		  case 30:
		       CarriegeReturn();
   1371e:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
			   //RemSpaceLag(strLoyRedeemPoints);
		       sprintf_P(strPrint,PSTR("     Total Redeem : %s"),strLoyRedeemPoints);
   13722:	00 d0       	rcall	.+0      	; 0x13724 <PrintIdle+0xa60>
   13724:	00 d0       	rcall	.+0      	; 0x13726 <PrintIdle+0xa62>
   13726:	00 d0       	rcall	.+0      	; 0x13728 <PrintIdle+0xa64>
   13728:	ed b7       	in	r30, 0x3d	; 61
   1372a:	fe b7       	in	r31, 0x3e	; 62
   1372c:	31 96       	adiw	r30, 0x01	; 1
   1372e:	ad b7       	in	r26, 0x3d	; 61
   13730:	be b7       	in	r27, 0x3e	; 62
   13732:	12 96       	adiw	r26, 0x02	; 2
   13734:	1c 93       	st	X, r17
   13736:	0e 93       	st	-X, r16
   13738:	11 97       	sbiw	r26, 0x01	; 1
   1373a:	8a e5       	ldi	r24, 0x5A	; 90
   1373c:	98 e0       	ldi	r25, 0x08	; 8
   1373e:	93 83       	std	Z+3, r25	; 0x03
   13740:	82 83       	std	Z+2, r24	; 0x02
   13742:	8c e1       	ldi	r24, 0x1C	; 28
   13744:	94 e0       	ldi	r25, 0x04	; 4
   13746:	60 c0       	rjmp	.+192    	; 0x13808 <PrintIdle+0xb44>
		       break;
		  case 31:
		       CarriegeReturn();
   13748:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
			   //RemSpaceLag(strLoyCurrMonConsumeV);
			   //FormatCurrency(strLoyCurrMonConsumeV);
		       sprintf_P(strPrint,PSTR("     Month Cons V : %s L"),strLoyCurrMonConsumeV);
   1374c:	00 d0       	rcall	.+0      	; 0x1374e <PrintIdle+0xa8a>
   1374e:	00 d0       	rcall	.+0      	; 0x13750 <PrintIdle+0xa8c>
   13750:	00 d0       	rcall	.+0      	; 0x13752 <PrintIdle+0xa8e>
   13752:	ed b7       	in	r30, 0x3d	; 61
   13754:	fe b7       	in	r31, 0x3e	; 62
   13756:	31 96       	adiw	r30, 0x01	; 1
   13758:	ad b7       	in	r26, 0x3d	; 61
   1375a:	be b7       	in	r27, 0x3e	; 62
   1375c:	12 96       	adiw	r26, 0x02	; 2
   1375e:	1c 93       	st	X, r17
   13760:	0e 93       	st	-X, r16
   13762:	11 97       	sbiw	r26, 0x01	; 1
   13764:	81 e4       	ldi	r24, 0x41	; 65
   13766:	98 e0       	ldi	r25, 0x08	; 8
   13768:	93 83       	std	Z+3, r25	; 0x03
   1376a:	82 83       	std	Z+2, r24	; 0x02
   1376c:	8f e6       	ldi	r24, 0x6F	; 111
   1376e:	9c e0       	ldi	r25, 0x0C	; 12
   13770:	4b c0       	rjmp	.+150    	; 0x13808 <PrintIdle+0xb44>
		       break;
		  case 32:
		       CarriegeReturn();
   13772:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
			   //RemSpaceLag(strLoyCurrMonConsumeA);
			   //FormatCurrency(strLoyCurrMonConsumeA);
		       sprintf_P(strPrint,PSTR("     Month Cons A : Rp.%s"),strLoyCurrMonConsumeA);
   13776:	00 d0       	rcall	.+0      	; 0x13778 <PrintIdle+0xab4>
   13778:	00 d0       	rcall	.+0      	; 0x1377a <PrintIdle+0xab6>
   1377a:	00 d0       	rcall	.+0      	; 0x1377c <PrintIdle+0xab8>
   1377c:	ed b7       	in	r30, 0x3d	; 61
   1377e:	fe b7       	in	r31, 0x3e	; 62
   13780:	31 96       	adiw	r30, 0x01	; 1
   13782:	ad b7       	in	r26, 0x3d	; 61
   13784:	be b7       	in	r27, 0x3e	; 62
   13786:	12 96       	adiw	r26, 0x02	; 2
   13788:	1c 93       	st	X, r17
   1378a:	0e 93       	st	-X, r16
   1378c:	11 97       	sbiw	r26, 0x01	; 1
   1378e:	87 e2       	ldi	r24, 0x27	; 39
   13790:	98 e0       	ldi	r25, 0x08	; 8
   13792:	93 83       	std	Z+3, r25	; 0x03
   13794:	82 83       	std	Z+2, r24	; 0x02
   13796:	80 e0       	ldi	r24, 0x00	; 0
   13798:	94 e0       	ldi	r25, 0x04	; 4
   1379a:	36 c0       	rjmp	.+108    	; 0x13808 <PrintIdle+0xb44>
		       break;
		  case 33://EndOfLoyalty
		       CarriegeReturn();
   1379c:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("    ------------------------------"));
   137a0:	00 d0       	rcall	.+0      	; 0x137a2 <PrintIdle+0xade>
   137a2:	00 d0       	rcall	.+0      	; 0x137a4 <PrintIdle+0xae0>
   137a4:	ad b7       	in	r26, 0x3d	; 61
   137a6:	be b7       	in	r27, 0x3e	; 62
   137a8:	12 96       	adiw	r26, 0x02	; 2
   137aa:	1c 93       	st	X, r17
   137ac:	0e 93       	st	-X, r16
   137ae:	11 97       	sbiw	r26, 0x01	; 1
   137b0:	84 e0       	ldi	r24, 0x04	; 4
   137b2:	98 e0       	ldi	r25, 0x08	; 8
   137b4:	42 c0       	rjmp	.+132    	; 0x1383a <PrintIdle+0xb76>
		       break;
		  case 34:
		       CarriegeReturn();
   137b6:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("     Surcharge Dsc: %s"),strSurchargeDesc);
   137ba:	00 d0       	rcall	.+0      	; 0x137bc <PrintIdle+0xaf8>
   137bc:	00 d0       	rcall	.+0      	; 0x137be <PrintIdle+0xafa>
   137be:	00 d0       	rcall	.+0      	; 0x137c0 <PrintIdle+0xafc>
   137c0:	ed b7       	in	r30, 0x3d	; 61
   137c2:	fe b7       	in	r31, 0x3e	; 62
   137c4:	31 96       	adiw	r30, 0x01	; 1
   137c6:	ad b7       	in	r26, 0x3d	; 61
   137c8:	be b7       	in	r27, 0x3e	; 62
   137ca:	12 96       	adiw	r26, 0x02	; 2
   137cc:	1c 93       	st	X, r17
   137ce:	0e 93       	st	-X, r16
   137d0:	11 97       	sbiw	r26, 0x01	; 1
   137d2:	8d ee       	ldi	r24, 0xED	; 237
   137d4:	97 e0       	ldi	r25, 0x07	; 7
   137d6:	93 83       	std	Z+3, r25	; 0x03
   137d8:	82 83       	std	Z+2, r24	; 0x02
   137da:	8d e5       	ldi	r24, 0x5D	; 93
   137dc:	98 e0       	ldi	r25, 0x08	; 8
   137de:	14 c0       	rjmp	.+40     	; 0x13808 <PrintIdle+0xb44>
		       break;
		  case 35:
		       CarriegeReturn();
   137e0:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("     Surcharge Amt: %s"),strSurchargeAmount);
   137e4:	00 d0       	rcall	.+0      	; 0x137e6 <PrintIdle+0xb22>
   137e6:	00 d0       	rcall	.+0      	; 0x137e8 <PrintIdle+0xb24>
   137e8:	00 d0       	rcall	.+0      	; 0x137ea <PrintIdle+0xb26>
   137ea:	ed b7       	in	r30, 0x3d	; 61
   137ec:	fe b7       	in	r31, 0x3e	; 62
   137ee:	31 96       	adiw	r30, 0x01	; 1
   137f0:	ad b7       	in	r26, 0x3d	; 61
   137f2:	be b7       	in	r27, 0x3e	; 62
   137f4:	12 96       	adiw	r26, 0x02	; 2
   137f6:	1c 93       	st	X, r17
   137f8:	0e 93       	st	-X, r16
   137fa:	11 97       	sbiw	r26, 0x01	; 1
   137fc:	86 ed       	ldi	r24, 0xD6	; 214
   137fe:	97 e0       	ldi	r25, 0x07	; 7
   13800:	93 83       	std	Z+3, r25	; 0x03
   13802:	82 83       	std	Z+2, r24	; 0x02
   13804:	84 ed       	ldi	r24, 0xD4	; 212
   13806:	98 e0       	ldi	r25, 0x08	; 8
   13808:	95 83       	std	Z+5, r25	; 0x05
   1380a:	84 83       	std	Z+4, r24	; 0x04
   1380c:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
   13810:	ed b7       	in	r30, 0x3d	; 61
   13812:	fe b7       	in	r31, 0x3e	; 62
   13814:	36 96       	adiw	r30, 0x06	; 6
   13816:	0f b6       	in	r0, 0x3f	; 63
   13818:	f8 94       	cli
   1381a:	fe bf       	out	0x3e, r31	; 62
   1381c:	0f be       	out	0x3f, r0	; 63
   1381e:	ed bf       	out	0x3d, r30	; 61
   13820:	16 c0       	rjmp	.+44     	; 0x1384e <PrintIdle+0xb8a>
		       break;
		  case 36:
		       CarriegeReturn();
   13822:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
		       sprintf_P(strPrint,PSTR("    ------------------------------"));
   13826:	00 d0       	rcall	.+0      	; 0x13828 <PrintIdle+0xb64>
   13828:	00 d0       	rcall	.+0      	; 0x1382a <PrintIdle+0xb66>
   1382a:	ad b7       	in	r26, 0x3d	; 61
   1382c:	be b7       	in	r27, 0x3e	; 62
   1382e:	12 96       	adiw	r26, 0x02	; 2
   13830:	1c 93       	st	X, r17
   13832:	0e 93       	st	-X, r16
   13834:	11 97       	sbiw	r26, 0x01	; 1
   13836:	83 eb       	ldi	r24, 0xB3	; 179
   13838:	97 e0       	ldi	r25, 0x07	; 7
   1383a:	14 96       	adiw	r26, 0x04	; 4
   1383c:	9c 93       	st	X, r25
   1383e:	8e 93       	st	-X, r24
   13840:	13 97       	sbiw	r26, 0x03	; 3
   13842:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
   13846:	0f 90       	pop	r0
   13848:	0f 90       	pop	r0
   1384a:	0f 90       	pop	r0
   1384c:	0f 90       	pop	r0
		       break;
		  }
		  iLoop=0;iSend=0;LSend=strlen(strPrint);
   1384e:	10 92 fa 01 	sts	0x01FA, r1
   13852:	10 92 f9 01 	sts	0x01F9, r1
   13856:	10 92 fe 01 	sts	0x01FE, r1
   1385a:	10 92 fd 01 	sts	0x01FD, r1
   1385e:	ee e3       	ldi	r30, 0x3E	; 62
   13860:	f9 e0       	ldi	r31, 0x09	; 9
   13862:	01 90       	ld	r0, Z+
   13864:	00 20       	and	r0, r0
   13866:	e9 f7       	brne	.-6      	; 0x13862 <PrintIdle+0xb9e>
   13868:	31 97       	sbiw	r30, 0x01	; 1
   1386a:	ee 53       	subi	r30, 0x3E	; 62
   1386c:	f9 40       	sbci	r31, 0x09	; 9
   1386e:	f0 93 fc 01 	sts	0x01FC, r31
   13872:	e0 93 fb 01 	sts	0x01FB, r30
          stPrintIdle=piPrintMessage;
   13876:	8a e0       	ldi	r24, 0x0A	; 10
   13878:	76 c1       	rjmp	.+748    	; 0x13b66 <PrintIdle+0xea2>
	      break;
     case piPrintMessage:
	      if (iSend<LSend){
   1387a:	20 91 fd 01 	lds	r18, 0x01FD
   1387e:	30 91 fe 01 	lds	r19, 0x01FE
   13882:	80 91 fb 01 	lds	r24, 0x01FB
   13886:	90 91 fc 01 	lds	r25, 0x01FC
   1388a:	28 17       	cp	r18, r24
   1388c:	39 07       	cpc	r19, r25
   1388e:	68 f4       	brcc	.+26     	; 0x138aa <PrintIdle+0xbe6>
		      iLoop++;
   13890:	80 91 f9 01 	lds	r24, 0x01F9
   13894:	90 91 fa 01 	lds	r25, 0x01FA
   13898:	01 96       	adiw	r24, 0x01	; 1
   1389a:	90 93 fa 01 	sts	0x01FA, r25
   1389e:	80 93 f9 01 	sts	0x01F9, r24
			  if((iLoop%PRINT_DELAY)==0){
				 TimPrintBusy=0;
   138a2:	10 92 b6 01 	sts	0x01B6, r1
				 stPrintIdle=piCheckPrintStatusMessage;
   138a6:	8c e0       	ldi	r24, 0x0C	; 12
   138a8:	5e c1       	rjmp	.+700    	; 0x13b66 <PrintIdle+0xea2>
				 }
			  }
          else{iMessage++;
   138aa:	80 91 01 02 	lds	r24, 0x0201
   138ae:	8f 5f       	subi	r24, 0xFF	; 255
   138b0:	80 93 01 02 	sts	0x0201, r24
		      if (iMessage>MessageLine){
   138b4:	90 91 00 02 	lds	r25, 0x0200
   138b8:	98 17       	cp	r25, r24
   138ba:	30 f4       	brcc	.+12     	; 0x138c8 <PrintIdle+0xc04>
			      iFooter=0;				  
   138bc:	10 92 04 02 	sts	0x0204, r1
				  CarriegeReturn();
   138c0:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
				  stPrintIdle=piLoadOperatorName;//piLoadFooter;
   138c4:	85 e1       	ldi	r24, 0x15	; 21
   138c6:	4f c1       	rjmp	.+670    	; 0x13b66 <PrintIdle+0xea2>
			  }
			  else stPrintIdle=piLoadMessage;
   138c8:	89 e0       	ldi	r24, 0x09	; 9
   138ca:	4d c1       	rjmp	.+666    	; 0x13b66 <PrintIdle+0xea2>
			  }
	      break;
     case piCheckPrintStatusMessage:
	      if (IsBusyPrint==False){
   138cc:	80 91 b3 01 	lds	r24, 0x01B3
   138d0:	88 23       	and	r24, r24
   138d2:	09 f0       	breq	.+2      	; 0x138d6 <PrintIdle+0xc12>
   138d4:	40 c1       	rjmp	.+640    	; 0x13b56 <PrintIdle+0xe92>
		      uart(_COM_PRINTER,1,strPrint[iSend]);
   138d6:	e0 91 fd 01 	lds	r30, 0x01FD
   138da:	f0 91 fe 01 	lds	r31, 0x01FE
   138de:	e2 5c       	subi	r30, 0xC2	; 194
   138e0:	f6 4f       	sbci	r31, 0xF6	; 246
   138e2:	61 e0       	ldi	r22, 0x01	; 1
   138e4:	40 81       	ld	r20, Z
   138e6:	0e 94 bd a8 	call	0x1517a	; 0x1517a <uart>
		      iSend++;
   138ea:	80 91 fd 01 	lds	r24, 0x01FD
   138ee:	90 91 fe 01 	lds	r25, 0x01FE
   138f2:	01 96       	adiw	r24, 0x01	; 1
   138f4:	90 93 fe 01 	sts	0x01FE, r25
   138f8:	80 93 fd 01 	sts	0x01FD, r24
		      stPrintIdle=piPrintMessage;
   138fc:	8a e0       	ldi	r24, 0x0A	; 10
   138fe:	29 c1       	rjmp	.+594    	; 0x13b52 <PrintIdle+0xe8e>


	//Added Operator Name:
	 case piLoadOperatorName:
	      //CheckEmpty
		  eeprom_read_block((void*) &strOperatorName, (const void*) &DefOperatorName,18);
   13900:	8e 01       	movw	r16, r28
   13902:	0f 5f       	subi	r16, 0xFF	; 255
   13904:	1f 4f       	sbci	r17, 0xFF	; 255
   13906:	c8 01       	movw	r24, r16
   13908:	65 e1       	ldi	r22, 0x15	; 21
   1390a:	70 e0       	ldi	r23, 0x00	; 0
   1390c:	42 e1       	ldi	r20, 0x12	; 18
   1390e:	50 e0       	ldi	r21, 0x00	; 0
   13910:	0e 94 1b ad 	call	0x15a36	; 0x15a36 <__eerd_block_m128>
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   13914:	ce 01       	movw	r24, r28
   13916:	40 96       	adiw	r24, 0x10	; 16
	    Dest[i]=Source[IdxSource+i];
   13918:	0f 5f       	subi	r16, 0xFF	; 255
   1391a:	1f 4f       	sbci	r17, 0xFF	; 255
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   1391c:	08 17       	cp	r16, r24
   1391e:	19 07       	cpc	r17, r25
   13920:	d9 f7       	brne	.-10     	; 0x13918 <PrintIdle+0xc54>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
   13922:	18 8a       	std	Y+16, r1	; 0x10
	//Added Operator Name:
	 case piLoadOperatorName:
	      //CheckEmpty
		  eeprom_read_block((void*) &strOperatorName, (const void*) &DefOperatorName,18);
		  StrPosCopy(strOperatorName,strOperatorName,0,15);
		  if (strlen(strOperatorName)>0){
   13924:	89 81       	ldd	r24, Y+1	; 0x01
   13926:	88 23       	and	r24, r24
   13928:	09 f4       	brne	.+2      	; 0x1392c <PrintIdle+0xc68>
   1392a:	93 c0       	rjmp	.+294    	; 0x13a52 <PrintIdle+0xd8e>
			  if (SpaceOnly(strOperatorName)!=True){		      				  
   1392c:	7e 01       	movw	r14, r28
   1392e:	08 94       	sec
   13930:	e1 1c       	adc	r14, r1
   13932:	f1 1c       	adc	r15, r1
   13934:	c7 01       	movw	r24, r14
   13936:	0e 94 20 24 	call	0x4840	; 0x4840 <SpaceOnly>
   1393a:	81 30       	cpi	r24, 0x01	; 1
   1393c:	09 f4       	brne	.+2      	; 0x13940 <PrintIdle+0xc7c>
   1393e:	89 c0       	rjmp	.+274    	; 0x13a52 <PrintIdle+0xd8e>
				  sprintf_P(strPrint,PSTR("     Operator: %s"),strOperatorName);			   
   13940:	00 d0       	rcall	.+0      	; 0x13942 <PrintIdle+0xc7e>
   13942:	00 d0       	rcall	.+0      	; 0x13944 <PrintIdle+0xc80>
   13944:	00 d0       	rcall	.+0      	; 0x13946 <PrintIdle+0xc82>
   13946:	ed b7       	in	r30, 0x3d	; 61
   13948:	fe b7       	in	r31, 0x3e	; 62
   1394a:	31 96       	adiw	r30, 0x01	; 1
   1394c:	0e e3       	ldi	r16, 0x3E	; 62
   1394e:	19 e0       	ldi	r17, 0x09	; 9
   13950:	ad b7       	in	r26, 0x3d	; 61
   13952:	be b7       	in	r27, 0x3e	; 62
   13954:	12 96       	adiw	r26, 0x02	; 2
   13956:	1c 93       	st	X, r17
   13958:	0e 93       	st	-X, r16
   1395a:	11 97       	sbiw	r26, 0x01	; 1
   1395c:	81 ea       	ldi	r24, 0xA1	; 161
   1395e:	97 e0       	ldi	r25, 0x07	; 7
   13960:	93 83       	std	Z+3, r25	; 0x03
   13962:	82 83       	std	Z+2, r24	; 0x02
   13964:	f5 82       	std	Z+5, r15	; 0x05
   13966:	e4 82       	std	Z+4, r14	; 0x04
   13968:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
			      iSend=0;iLoop=0;
   1396c:	10 92 fe 01 	sts	0x01FE, r1
   13970:	10 92 fd 01 	sts	0x01FD, r1
   13974:	10 92 fa 01 	sts	0x01FA, r1
   13978:	10 92 f9 01 	sts	0x01F9, r1
				  LSend=strlen(strPrint);
   1397c:	f8 01       	movw	r30, r16
   1397e:	01 90       	ld	r0, Z+
   13980:	00 20       	and	r0, r0
   13982:	e9 f7       	brne	.-6      	; 0x1397e <PrintIdle+0xcba>
   13984:	8f 01       	movw	r16, r30
   13986:	01 50       	subi	r16, 0x01	; 1
   13988:	10 40       	sbci	r17, 0x00	; 0
   1398a:	0e 53       	subi	r16, 0x3E	; 62
   1398c:	19 40       	sbci	r17, 0x09	; 9
   1398e:	10 93 fc 01 	sts	0x01FC, r17
   13992:	00 93 fb 01 	sts	0x01FB, r16
				  stPrintIdle=piPrintOperatorName;
   13996:	86 e1       	ldi	r24, 0x16	; 22
   13998:	80 93 06 02 	sts	0x0206, r24
   1399c:	8d b7       	in	r24, 0x3d	; 61
   1399e:	9e b7       	in	r25, 0x3e	; 62
   139a0:	06 96       	adiw	r24, 0x06	; 6
   139a2:	0f b6       	in	r0, 0x3f	; 63
   139a4:	f8 94       	cli
   139a6:	9e bf       	out	0x3e, r25	; 62
   139a8:	0f be       	out	0x3f, r0	; 63
   139aa:	8d bf       	out	0x3d, r24	; 61
   139ac:	07 c1       	rjmp	.+526    	; 0x13bbc <PrintIdle+0xef8>
			  }else stPrintIdle=piLoadFooter;
          }  
          else stPrintIdle=piLoadFooter;
	      break;
	 case piPrintOperatorName:
		  if (iSend<LSend){
   139ae:	20 91 fd 01 	lds	r18, 0x01FD
   139b2:	30 91 fe 01 	lds	r19, 0x01FE
   139b6:	80 91 fb 01 	lds	r24, 0x01FB
   139ba:	90 91 fc 01 	lds	r25, 0x01FC
   139be:	28 17       	cp	r18, r24
   139c0:	39 07       	cpc	r19, r25
   139c2:	68 f4       	brcc	.+26     	; 0x139de <PrintIdle+0xd1a>
		      iLoop++;
   139c4:	80 91 f9 01 	lds	r24, 0x01F9
   139c8:	90 91 fa 01 	lds	r25, 0x01FA
   139cc:	01 96       	adiw	r24, 0x01	; 1
   139ce:	90 93 fa 01 	sts	0x01FA, r25
   139d2:	80 93 f9 01 	sts	0x01F9, r24
			  if((iLoop%PRINT_DELAY)==0){
				  TimPrintBusy=0;
   139d6:	10 92 b6 01 	sts	0x01B6, r1
				  stPrintIdle=piCheckPrintOperatorName;
   139da:	87 e1       	ldi	r24, 0x17	; 23
   139dc:	c4 c0       	rjmp	.+392    	; 0x13b66 <PrintIdle+0xea2>
				}
			  }
          else {
			  CarriegeReturn();
   139de:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
			  CarriegeReturn();
   139e2:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
   139e6:	35 c0       	rjmp	.+106    	; 0x13a52 <PrintIdle+0xd8e>
			  stPrintIdle=piLoadFooter;
			  }
	      break;
	 case piCheckPrintOperatorName:
	      if (IsBusyPrint==False){
   139e8:	80 91 b3 01 	lds	r24, 0x01B3
   139ec:	88 23       	and	r24, r24
   139ee:	09 f0       	breq	.+2      	; 0x139f2 <PrintIdle+0xd2e>
   139f0:	b2 c0       	rjmp	.+356    	; 0x13b56 <PrintIdle+0xe92>
		      uart(_COM_PRINTER,1,strPrint[iSend]);
   139f2:	e0 91 fd 01 	lds	r30, 0x01FD
   139f6:	f0 91 fe 01 	lds	r31, 0x01FE
   139fa:	e2 5c       	subi	r30, 0xC2	; 194
   139fc:	f6 4f       	sbci	r31, 0xF6	; 246
   139fe:	61 e0       	ldi	r22, 0x01	; 1
   13a00:	40 81       	ld	r20, Z
   13a02:	0e 94 bd a8 	call	0x1517a	; 0x1517a <uart>
		      iSend++;
   13a06:	80 91 fd 01 	lds	r24, 0x01FD
   13a0a:	90 91 fe 01 	lds	r25, 0x01FE
   13a0e:	01 96       	adiw	r24, 0x01	; 1
   13a10:	90 93 fe 01 	sts	0x01FE, r25
   13a14:	80 93 fd 01 	sts	0x01FD, r24
		      stPrintIdle=piPrintOperatorName;
   13a18:	86 e1       	ldi	r24, 0x16	; 22
   13a1a:	9b c0       	rjmp	.+310    	; 0x13b52 <PrintIdle+0xe8e>
	      break;

	 	       
     case piLoadFooter:
	      FillChar(strPrint,0,sizeof(strPrint));
	      eeprom_read_block((void*) &strPrint, (const void*) &DefHeaderFooter[6+iFooter], 40);
   13a1c:	60 91 04 02 	lds	r22, 0x0204
   13a20:	89 e2       	ldi	r24, 0x29	; 41
   13a22:	68 9f       	mul	r22, r24
   13a24:	b0 01       	movw	r22, r0
   13a26:	11 24       	eor	r1, r1
   13a28:	62 5e       	subi	r22, 0xE2	; 226
   13a2a:	7c 4f       	sbci	r23, 0xFC	; 252
   13a2c:	8e e3       	ldi	r24, 0x3E	; 62
   13a2e:	99 e0       	ldi	r25, 0x09	; 9
   13a30:	48 e2       	ldi	r20, 0x28	; 40
   13a32:	50 e0       	ldi	r21, 0x00	; 0
   13a34:	0e 94 1b ad 	call	0x15a36	; 0x15a36 <__eerd_block_m128>
		  iFooter++;
   13a38:	80 91 04 02 	lds	r24, 0x0204
   13a3c:	8f 5f       	subi	r24, 0xFF	; 255
   13a3e:	80 93 04 02 	sts	0x0204, r24
		  if (iFooter<=4){
   13a42:	85 30       	cpi	r24, 0x05	; 5
   13a44:	90 f4       	brcc	.+36     	; 0x13a6a <PrintIdle+0xda6>
		      if (SpaceOnly(strPrint)==True){
   13a46:	8e e3       	ldi	r24, 0x3E	; 62
   13a48:	99 e0       	ldi	r25, 0x09	; 9
   13a4a:	0e 94 20 24 	call	0x4840	; 0x4840 <SpaceOnly>
   13a4e:	81 30       	cpi	r24, 0x01	; 1
   13a50:	11 f4       	brne	.+4      	; 0x13a56 <PrintIdle+0xd92>
			      stPrintIdle=piLoadFooter;
   13a52:	8e e0       	ldi	r24, 0x0E	; 14
   13a54:	88 c0       	rjmp	.+272    	; 0x13b66 <PrintIdle+0xea2>
				  }
			  else{
			      iSend=0;
   13a56:	10 92 fe 01 	sts	0x01FE, r1
   13a5a:	10 92 fd 01 	sts	0x01FD, r1
				  iLoop=0;
   13a5e:	10 92 fa 01 	sts	0x01FA, r1
   13a62:	10 92 f9 01 	sts	0x01F9, r1
				  stPrintIdle=piPrintFooter;
   13a66:	8f e0       	ldi	r24, 0x0F	; 15
   13a68:	7e c0       	rjmp	.+252    	; 0x13b66 <PrintIdle+0xea2>
				  //RemSpaceLag(strPrint);
				  //CarriegeReturn();
			      }
		  }else{stPrintIdle=piInitScroll;
   13a6a:	81 e1       	ldi	r24, 0x11	; 17
   13a6c:	7c c0       	rjmp	.+248    	; 0x13b66 <PrintIdle+0xea2>
		        //iPrinted++;
			}
	      break;
     case piPrintFooter:
		  if (iSend<40){
   13a6e:	80 91 fd 01 	lds	r24, 0x01FD
   13a72:	90 91 fe 01 	lds	r25, 0x01FE
   13a76:	88 97       	sbiw	r24, 0x28	; 40
   13a78:	68 f4       	brcc	.+26     	; 0x13a94 <PrintIdle+0xdd0>
		      iLoop++;
   13a7a:	80 91 f9 01 	lds	r24, 0x01F9
   13a7e:	90 91 fa 01 	lds	r25, 0x01FA
   13a82:	01 96       	adiw	r24, 0x01	; 1
   13a84:	90 93 fa 01 	sts	0x01FA, r25
   13a88:	80 93 f9 01 	sts	0x01F9, r24
			  if((iLoop%PRINT_DELAY)==0){
				TimPrintBusy=0;
   13a8c:	10 92 b6 01 	sts	0x01B6, r1
				stPrintIdle=piCheckPrintStatusFooter;
   13a90:	8d e0       	ldi	r24, 0x0D	; 13
   13a92:	69 c0       	rjmp	.+210    	; 0x13b66 <PrintIdle+0xea2>
				}
			  }
          else {
		      stPrintIdle=piLoadFooter;
   13a94:	8e e0       	ldi	r24, 0x0E	; 14
   13a96:	80 93 06 02 	sts	0x0206, r24
			  CarriegeReturn();
   13a9a:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
   13a9e:	8e c0       	rjmp	.+284    	; 0x13bbc <PrintIdle+0xef8>
			  }
	      break;
     case piCheckPrintStatusFooter:
	      if (IsBusyPrint==False){
   13aa0:	80 91 b3 01 	lds	r24, 0x01B3
   13aa4:	88 23       	and	r24, r24
   13aa6:	09 f0       	breq	.+2      	; 0x13aaa <PrintIdle+0xde6>
   13aa8:	56 c0       	rjmp	.+172    	; 0x13b56 <PrintIdle+0xe92>
		      uart(_COM_PRINTER,1,strPrint[iSend]);
   13aaa:	e0 91 fd 01 	lds	r30, 0x01FD
   13aae:	f0 91 fe 01 	lds	r31, 0x01FE
   13ab2:	e2 5c       	subi	r30, 0xC2	; 194
   13ab4:	f6 4f       	sbci	r31, 0xF6	; 246
   13ab6:	61 e0       	ldi	r22, 0x01	; 1
   13ab8:	40 81       	ld	r20, Z
   13aba:	0e 94 bd a8 	call	0x1517a	; 0x1517a <uart>
		      iSend++;
   13abe:	80 91 fd 01 	lds	r24, 0x01FD
   13ac2:	90 91 fe 01 	lds	r25, 0x01FE
   13ac6:	01 96       	adiw	r24, 0x01	; 1
   13ac8:	90 93 fe 01 	sts	0x01FE, r25
   13acc:	80 93 fd 01 	sts	0x01FD, r24
		      stPrintIdle=piPrintFooter;
   13ad0:	8f e0       	ldi	r24, 0x0F	; 15
   13ad2:	3f c0       	rjmp	.+126    	; 0x13b52 <PrintIdle+0xe8e>
		      stPrintIdle=piFinishPrintIdle;
			  }
	      break;

     case piInitScroll:
	      iPrinted++;
   13ad4:	90 91 f8 01 	lds	r25, 0x01F8
   13ad8:	9f 5f       	subi	r25, 0xFF	; 255
   13ada:	90 93 f8 01 	sts	0x01F8, r25
		  iScroll=0;
   13ade:	10 92 03 02 	sts	0x0203, r1
		  iLoop=0;
   13ae2:	10 92 fa 01 	sts	0x01FA, r1
   13ae6:	10 92 f9 01 	sts	0x01F9, r1
		  if (iPrinted<PrintCopy){
   13aea:	80 91 f7 01 	lds	r24, 0x01F7
   13aee:	98 17       	cp	r25, r24
   13af0:	28 f4       	brcc	.+10     	; 0x13afc <PrintIdle+0xe38>
		      nScroll=eeprom_read_byte(&DefPrintScrollSpace);
   13af2:	82 e3       	ldi	r24, 0x32	; 50
   13af4:	90 e0       	ldi	r25, 0x00	; 0
   13af6:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
   13afa:	04 c0       	rjmp	.+8      	; 0x13b04 <PrintIdle+0xe40>
		  }else if (iPrinted>=PrintCopy){		  	  
		      nScroll=eeprom_read_byte(&DefPrintScrollEnd);
   13afc:	81 e3       	ldi	r24, 0x31	; 49
   13afe:	90 e0       	ldi	r25, 0x00	; 0
   13b00:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
   13b04:	80 93 02 02 	sts	0x0202, r24
		  if (eeprom_read_byte(&DefPrinterType)==PT_CUSTOM_TG02){
		      uart_printf(0,1,PSTR("----Scrolled2-----"));

		      stPrintIdle=piPaperCut;
		  }*/
          stPrintIdle=piScrollPaper;              
   13b08:	80 e1       	ldi	r24, 0x10	; 16
   13b0a:	2d c0       	rjmp	.+90     	; 0x13b66 <PrintIdle+0xea2>
	      break;
     case piScrollPaper:
	      iLoop++;
   13b0c:	80 91 f9 01 	lds	r24, 0x01F9
   13b10:	90 91 fa 01 	lds	r25, 0x01FA
   13b14:	01 96       	adiw	r24, 0x01	; 1
   13b16:	90 93 fa 01 	sts	0x01FA, r25
   13b1a:	80 93 f9 01 	sts	0x01F9, r24
		  if (iLoop%PRINT_DELAY==0){
			  TimPrintBusy=0;
   13b1e:	10 92 b6 01 	sts	0x01B6, r1
			  stPrintIdle=piCheckPrintStatusScroll;
   13b22:	82 e1       	ldi	r24, 0x12	; 18
   13b24:	80 93 06 02 	sts	0x0206, r24
			  }
	      if (iScroll>nScroll)stPrintIdle=piPaperCut;
   13b28:	90 91 03 02 	lds	r25, 0x0203
   13b2c:	80 91 02 02 	lds	r24, 0x0202
   13b30:	89 17       	cp	r24, r25
   13b32:	08 f0       	brcs	.+2      	; 0x13b36 <PrintIdle+0xe72>
   13b34:	43 c0       	rjmp	.+134    	; 0x13bbc <PrintIdle+0xef8>
   13b36:	83 e1       	ldi	r24, 0x13	; 19
   13b38:	16 c0       	rjmp	.+44     	; 0x13b66 <PrintIdle+0xea2>
	      break;
     case piCheckPrintStatusScroll:
	      if (IsBusyPrint==False){
   13b3a:	80 91 b3 01 	lds	r24, 0x01B3
   13b3e:	88 23       	and	r24, r24
   13b40:	51 f4       	brne	.+20     	; 0x13b56 <PrintIdle+0xe92>
		      iScroll++;
   13b42:	80 91 03 02 	lds	r24, 0x0203
   13b46:	8f 5f       	subi	r24, 0xFF	; 255
   13b48:	80 93 03 02 	sts	0x0203, r24
		      CarriegeReturn();
   13b4c:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
		      stPrintIdle=piScrollPaper;
   13b50:	80 e1       	ldi	r24, 0x10	; 16
   13b52:	80 93 06 02 	sts	0x0206, r24
		  }
		  if (TimPrintBusy>TIM_BUSY_PRINT){
   13b56:	80 91 b6 01 	lds	r24, 0x01B6
   13b5a:	8b 30       	cpi	r24, 0x0B	; 11
   13b5c:	78 f1       	brcs	.+94     	; 0x13bbc <PrintIdle+0xef8>
		      IsPrintERROR=True;
   13b5e:	81 e0       	ldi	r24, 0x01	; 1
   13b60:	80 93 b1 01 	sts	0x01B1, r24
		      stPrintIdle=piFinishPrintIdle;
   13b64:	84 e1       	ldi	r24, 0x14	; 20
   13b66:	80 93 06 02 	sts	0x0206, r24
   13b6a:	28 c0       	rjmp	.+80     	; 0x13bbc <PrintIdle+0xef8>
	      break;
     case piPaperCut:
	      //sprintf_P(strSend,PSTR("i:%d Copy:%d"),iPrinted,PrintCopy);
		  //uart_print(0,1,strSend);

          if (iPrinted>=PrintCopy){
   13b6c:	90 91 f8 01 	lds	r25, 0x01F8
   13b70:	80 91 f7 01 	lds	r24, 0x01F7
   13b74:	98 17       	cp	r25, r24
   13b76:	10 f0       	brcs	.+4      	; 0x13b7c <PrintIdle+0xeb8>
		      stPrintIdle=piFinishPrintIdle;
   13b78:	84 e1       	ldi	r24, 0x14	; 20
   13b7a:	05 c0       	rjmp	.+10     	; 0x13b86 <PrintIdle+0xec2>
			  }
		  else {CarriegeReturn();
   13b7c:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
		        CarriegeReturn();
   13b80:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <CarriegeReturn>
		        stPrintIdle=piInit;
   13b84:	81 e0       	ldi	r24, 0x01	; 1
   13b86:	80 93 06 02 	sts	0x0206, r24
		       }
		  PaperCut();
   13b8a:	0e 94 32 46 	call	0x8c64	; 0x8c64 <PaperCut>
   13b8e:	16 c0       	rjmp	.+44     	; 0x13bbc <PrintIdle+0xef8>
	      break;
     case piFinishPrintIdle:	      
	      switch(IFType){
   13b90:	80 91 00 01 	lds	r24, 0x0100
   13b94:	81 30       	cpi	r24, 0x01	; 1
   13b96:	19 f0       	breq	.+6      	; 0x13b9e <PrintIdle+0xeda>
   13b98:	82 30       	cpi	r24, 0x02	; 2
   13b9a:	61 f4       	brne	.+24     	; 0x13bb4 <PrintIdle+0xef0>
   13b9c:	03 c0       	rjmp	.+6      	; 0x13ba4 <PrintIdle+0xee0>
		  case IT_SLAVE:
		       sendMessage04();
   13b9e:	0e 94 b9 92 	call	0x12572	; 0x12572 <sendMessage04>
   13ba2:	08 c0       	rjmp	.+16     	; 0x13bb4 <PrintIdle+0xef0>
		       break;
		  case IT_STANDALONE:		  
		       UpdateStandaloneStatus((atoi(strFIP_ID)&0x0F),PS_PRINTED);
   13ba4:	8b e3       	ldi	r24, 0x3B	; 59
   13ba6:	98 e0       	ldi	r25, 0x08	; 8
   13ba8:	0e 94 ae aa 	call	0x1555c	; 0x1555c <atoi>
   13bac:	8f 70       	andi	r24, 0x0F	; 15
   13bae:	61 e1       	ldi	r22, 0x11	; 17
   13bb0:	0e 94 2d 20 	call	0x405a	; 0x405a <UpdateStandaloneStatus>
			   //CurrentPumpStatus[FIPAddr]=PUMP_OFF;
			   //strPumpStatus[FIPAddr]=GetPumpStatusLabel(PUMP_OFF);			   
			   //IsNewPumpStatus=True;//UpdateDisplay
		       break;
		  }
		  IsBusyIdlePrinting=False;
   13bb4:	10 92 b2 01 	sts	0x01B2, r1
          stPrintIdle=piIdle;
   13bb8:	10 92 06 02 	sts	0x0206, r1
	      break;	 
	 }
}
   13bbc:	64 96       	adiw	r28, 0x14	; 20
   13bbe:	0f b6       	in	r0, 0x3f	; 63
   13bc0:	f8 94       	cli
   13bc2:	de bf       	out	0x3e, r29	; 62
   13bc4:	0f be       	out	0x3f, r0	; 63
   13bc6:	cd bf       	out	0x3d, r28	; 61
   13bc8:	cf 91       	pop	r28
   13bca:	df 91       	pop	r29
   13bcc:	1f 91       	pop	r17
   13bce:	0f 91       	pop	r16
   13bd0:	ff 90       	pop	r15
   13bd2:	ef 90       	pop	r14
   13bd4:	08 95       	ret

00013bd6 <systemPrinting>:
     

}

void systemPrinting(){
	 FreePrinting();
   13bd6:	0e 94 bd 92 	call	0x1257a	; 0x1257a <FreePrinting>
	 PrintIdle();
   13bda:	0e 94 62 96 	call	0x12cc4	; 0x12cc4 <PrintIdle>
}
   13bde:	08 95       	ret

00013be0 <SendConfigParamater>:
          stConfigProtocol=cpWaitSend;
	      break;
	 }
}

void SendConfigParamater(){
   13be0:	8f 92       	push	r8
   13be2:	9f 92       	push	r9
   13be4:	af 92       	push	r10
   13be6:	bf 92       	push	r11
   13be8:	cf 92       	push	r12
   13bea:	df 92       	push	r13
   13bec:	ef 92       	push	r14
   13bee:	ff 92       	push	r15
   13bf0:	0f 93       	push	r16
   13bf2:	1f 93       	push	r17
   13bf4:	df 93       	push	r29
   13bf6:	cf 93       	push	r28
   13bf8:	cd b7       	in	r28, 0x3d	; 61
   13bfa:	de b7       	in	r29, 0x3e	; 62
   13bfc:	c5 56       	subi	r28, 0x65	; 101
   13bfe:	d0 40       	sbci	r29, 0x00	; 0
   13c00:	0f b6       	in	r0, 0x3f	; 63
   13c02:	f8 94       	cli
   13c04:	de bf       	out	0x3e, r29	; 62
   13c06:	0f be       	out	0x3f, r0	; 63
   13c08:	cd bf       	out	0x3d, r28	; 61
char i,j,strSend[60];
char strEEPROM[41],xEEPROM;

     //Start
	 uart_printf(1,0,PSTR("<"));
   13c0a:	81 e0       	ldi	r24, 0x01	; 1
   13c0c:	60 e0       	ldi	r22, 0x00	; 0
   13c0e:	46 ee       	ldi	r20, 0xE6	; 230
   13c10:	53 e2       	ldi	r21, 0x23	; 35
   13c12:	0e 94 02 a9 	call	0x15204	; 0x15204 <uart_printf>
   13c16:	08 e2       	ldi	r16, 0x28	; 40
   13c18:	12 e0       	ldi	r17, 0x02	; 2
     //Header Footer 400
	 for (i=0;i<10;i++){
	      eeprom_read_block((void*) &strEEPROM, (const void*) &DefHeaderFooter[i],sizeof(DefHeaderFooter[i]));
   13c1a:	5e 01       	movw	r10, r28
   13c1c:	08 94       	sec
   13c1e:	a1 1c       	adc	r10, r1
   13c20:	b1 1c       	adc	r11, r1
		  FillChar(strSend,0,sizeof(strSend));
	      sprintf_P(strSend,PSTR("%s"),strEEPROM);
   13c22:	ba e2       	ldi	r27, 0x2A	; 42
   13c24:	eb 2e       	mov	r14, r27
   13c26:	f1 2c       	mov	r15, r1
   13c28:	ec 0e       	add	r14, r28
   13c2a:	fd 1e       	adc	r15, r29
   13c2c:	a3 ee       	ldi	r26, 0xE3	; 227
   13c2e:	ca 2e       	mov	r12, r26
   13c30:	a3 e2       	ldi	r26, 0x23	; 35
   13c32:	da 2e       	mov	r13, r26

     //Start
	 uart_printf(1,0,PSTR("<"));
     //Header Footer 400
	 for (i=0;i<10;i++){
	      eeprom_read_block((void*) &strEEPROM, (const void*) &DefHeaderFooter[i],sizeof(DefHeaderFooter[i]));
   13c34:	c5 01       	movw	r24, r10
   13c36:	b8 01       	movw	r22, r16
   13c38:	49 e2       	ldi	r20, 0x29	; 41
   13c3a:	50 e0       	ldi	r21, 0x00	; 0
   13c3c:	0e 94 1b ad 	call	0x15a36	; 0x15a36 <__eerd_block_m128>
		  FillChar(strSend,0,sizeof(strSend));
	      sprintf_P(strSend,PSTR("%s"),strEEPROM);
   13c40:	00 d0       	rcall	.+0      	; 0x13c42 <SendConfigParamater+0x62>
   13c42:	00 d0       	rcall	.+0      	; 0x13c44 <SendConfigParamater+0x64>
   13c44:	00 d0       	rcall	.+0      	; 0x13c46 <SendConfigParamater+0x66>
   13c46:	ed b7       	in	r30, 0x3d	; 61
   13c48:	fe b7       	in	r31, 0x3e	; 62
   13c4a:	31 96       	adiw	r30, 0x01	; 1
   13c4c:	ad b7       	in	r26, 0x3d	; 61
   13c4e:	be b7       	in	r27, 0x3e	; 62
   13c50:	12 96       	adiw	r26, 0x02	; 2
   13c52:	fc 92       	st	X, r15
   13c54:	ee 92       	st	-X, r14
   13c56:	11 97       	sbiw	r26, 0x01	; 1
   13c58:	d3 82       	std	Z+3, r13	; 0x03
   13c5a:	c2 82       	std	Z+2, r12	; 0x02
   13c5c:	b5 82       	std	Z+5, r11	; 0x05
   13c5e:	a4 82       	std	Z+4, r10	; 0x04
   13c60:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
		  AddSpaceLag(strSend,40);
   13c64:	ed b7       	in	r30, 0x3d	; 61
   13c66:	fe b7       	in	r31, 0x3e	; 62
   13c68:	36 96       	adiw	r30, 0x06	; 6
   13c6a:	0f b6       	in	r0, 0x3f	; 63
   13c6c:	f8 94       	cli
   13c6e:	fe bf       	out	0x3e, r31	; 62
   13c70:	0f be       	out	0x3f, r0	; 63
   13c72:	ed bf       	out	0x3d, r30	; 61
   13c74:	c7 01       	movw	r24, r14
   13c76:	68 e2       	ldi	r22, 0x28	; 40
   13c78:	0e 94 c4 2d 	call	0x5b88	; 0x5b88 <AddSpaceLag>
		  uart_print(1,0,strSend);
   13c7c:	81 e0       	ldi	r24, 0x01	; 1
   13c7e:	60 e0       	ldi	r22, 0x00	; 0
   13c80:	a7 01       	movw	r20, r14
   13c82:	0e 94 da a8 	call	0x151b4	; 0x151b4 <uart_print>
   13c86:	07 5d       	subi	r16, 0xD7	; 215
   13c88:	1f 4f       	sbci	r17, 0xFF	; 255
char strEEPROM[41],xEEPROM;

     //Start
	 uart_printf(1,0,PSTR("<"));
     //Header Footer 400
	 for (i=0;i<10;i++){
   13c8a:	f3 e0       	ldi	r31, 0x03	; 3
   13c8c:	02 3c       	cpi	r16, 0xC2	; 194
   13c8e:	1f 07       	cpc	r17, r31
   13c90:	89 f6       	brne	.-94     	; 0x13c34 <SendConfigParamater+0x54>
   13c92:	0c eb       	ldi	r16, 0xBC	; 188
   13c94:	10 e0       	ldi	r17, 0x00	; 0
		  AddSpaceLag(strSend,40);
		  uart_print(1,0,strSend);
	 }
	 //ProductName 72 
	 for (i=0;i<6;i++){
		 eeprom_read_block((void*) &strEEPROM, (const void*) &DefProductName[i],sizeof(DefProductName[i]));
   13c96:	5e 01       	movw	r10, r28
   13c98:	08 94       	sec
   13c9a:	a1 1c       	adc	r10, r1
   13c9c:	b1 1c       	adc	r11, r1
		 FillChar(strSend,0,sizeof(strSend));
	     sprintf_P(strSend,PSTR("%s"),strEEPROM);
   13c9e:	fa e2       	ldi	r31, 0x2A	; 42
   13ca0:	ef 2e       	mov	r14, r31
   13ca2:	f1 2c       	mov	r15, r1
   13ca4:	ec 0e       	add	r14, r28
   13ca6:	fd 1e       	adc	r15, r29
   13ca8:	e0 ee       	ldi	r30, 0xE0	; 224
   13caa:	ce 2e       	mov	r12, r30
   13cac:	e3 e2       	ldi	r30, 0x23	; 35
   13cae:	de 2e       	mov	r13, r30
		  AddSpaceLag(strSend,40);
		  uart_print(1,0,strSend);
	 }
	 //ProductName 72 
	 for (i=0;i<6;i++){
		 eeprom_read_block((void*) &strEEPROM, (const void*) &DefProductName[i],sizeof(DefProductName[i]));
   13cb0:	c5 01       	movw	r24, r10
   13cb2:	b8 01       	movw	r22, r16
   13cb4:	4d e0       	ldi	r20, 0x0D	; 13
   13cb6:	50 e0       	ldi	r21, 0x00	; 0
   13cb8:	0e 94 1b ad 	call	0x15a36	; 0x15a36 <__eerd_block_m128>
		 FillChar(strSend,0,sizeof(strSend));
	     sprintf_P(strSend,PSTR("%s"),strEEPROM);
   13cbc:	00 d0       	rcall	.+0      	; 0x13cbe <SendConfigParamater+0xde>
   13cbe:	00 d0       	rcall	.+0      	; 0x13cc0 <SendConfigParamater+0xe0>
   13cc0:	00 d0       	rcall	.+0      	; 0x13cc2 <SendConfigParamater+0xe2>
   13cc2:	ed b7       	in	r30, 0x3d	; 61
   13cc4:	fe b7       	in	r31, 0x3e	; 62
   13cc6:	31 96       	adiw	r30, 0x01	; 1
   13cc8:	ad b7       	in	r26, 0x3d	; 61
   13cca:	be b7       	in	r27, 0x3e	; 62
   13ccc:	12 96       	adiw	r26, 0x02	; 2
   13cce:	fc 92       	st	X, r15
   13cd0:	ee 92       	st	-X, r14
   13cd2:	11 97       	sbiw	r26, 0x01	; 1
   13cd4:	d3 82       	std	Z+3, r13	; 0x03
   13cd6:	c2 82       	std	Z+2, r12	; 0x02
   13cd8:	b5 82       	std	Z+5, r11	; 0x05
   13cda:	a4 82       	std	Z+4, r10	; 0x04
   13cdc:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
		 AddSpaceLag(strSend,12);
   13ce0:	ed b7       	in	r30, 0x3d	; 61
   13ce2:	fe b7       	in	r31, 0x3e	; 62
   13ce4:	36 96       	adiw	r30, 0x06	; 6
   13ce6:	0f b6       	in	r0, 0x3f	; 63
   13ce8:	f8 94       	cli
   13cea:	fe bf       	out	0x3e, r31	; 62
   13cec:	0f be       	out	0x3f, r0	; 63
   13cee:	ed bf       	out	0x3d, r30	; 61
   13cf0:	c7 01       	movw	r24, r14
   13cf2:	6c e0       	ldi	r22, 0x0C	; 12
   13cf4:	0e 94 c4 2d 	call	0x5b88	; 0x5b88 <AddSpaceLag>
		 uart_print(1,0,strSend);
   13cf8:	81 e0       	ldi	r24, 0x01	; 1
   13cfa:	60 e0       	ldi	r22, 0x00	; 0
   13cfc:	a7 01       	movw	r20, r14
   13cfe:	0e 94 da a8 	call	0x151b4	; 0x151b4 <uart_print>
   13d02:	03 5f       	subi	r16, 0xF3	; 243
   13d04:	1f 4f       	sbci	r17, 0xFF	; 255
	      sprintf_P(strSend,PSTR("%s"),strEEPROM);
		  AddSpaceLag(strSend,40);
		  uart_print(1,0,strSend);
	 }
	 //ProductName 72 
	 for (i=0;i<6;i++){
   13d06:	f1 e0       	ldi	r31, 0x01	; 1
   13d08:	0a 30       	cpi	r16, 0x0A	; 10
   13d0a:	1f 07       	cpc	r17, r31
   13d0c:	89 f6       	brne	.-94     	; 0x13cb0 <SendConfigParamater+0xd0>
   13d0e:	06 e8       	ldi	r16, 0x86	; 134
   13d10:	10 e0       	ldi	r17, 0x00	; 0
		 AddSpaceLag(strSend,12);
		 uart_print(1,0,strSend);
	 }
	 //ProductPrice 30
	 for (i=0;i<6;i++){
		 eeprom_read_block((void*) &strEEPROM, (const void*) &DefProductPrice[i],sizeof(DefProductPrice[i]));
   13d12:	5e 01       	movw	r10, r28
   13d14:	08 94       	sec
   13d16:	a1 1c       	adc	r10, r1
   13d18:	b1 1c       	adc	r11, r1
		 FillChar(strSend,0,sizeof(strSend));
	     sprintf_P(strSend,PSTR("%s"),strEEPROM);
   13d1a:	7a e2       	ldi	r23, 0x2A	; 42
   13d1c:	e7 2e       	mov	r14, r23
   13d1e:	f1 2c       	mov	r15, r1
   13d20:	ec 0e       	add	r14, r28
   13d22:	fd 1e       	adc	r15, r29
   13d24:	6d ed       	ldi	r22, 0xDD	; 221
   13d26:	c6 2e       	mov	r12, r22
   13d28:	63 e2       	ldi	r22, 0x23	; 35
   13d2a:	d6 2e       	mov	r13, r22
		 AddSpaceLag(strSend,12);
		 uart_print(1,0,strSend);
	 }
	 //ProductPrice 30
	 for (i=0;i<6;i++){
		 eeprom_read_block((void*) &strEEPROM, (const void*) &DefProductPrice[i],sizeof(DefProductPrice[i]));
   13d2c:	c5 01       	movw	r24, r10
   13d2e:	b8 01       	movw	r22, r16
   13d30:	49 e0       	ldi	r20, 0x09	; 9
   13d32:	50 e0       	ldi	r21, 0x00	; 0
   13d34:	0e 94 1b ad 	call	0x15a36	; 0x15a36 <__eerd_block_m128>
		 FillChar(strSend,0,sizeof(strSend));
	     sprintf_P(strSend,PSTR("%s"),strEEPROM);
   13d38:	00 d0       	rcall	.+0      	; 0x13d3a <SendConfigParamater+0x15a>
   13d3a:	00 d0       	rcall	.+0      	; 0x13d3c <SendConfigParamater+0x15c>
   13d3c:	00 d0       	rcall	.+0      	; 0x13d3e <SendConfigParamater+0x15e>
   13d3e:	ed b7       	in	r30, 0x3d	; 61
   13d40:	fe b7       	in	r31, 0x3e	; 62
   13d42:	31 96       	adiw	r30, 0x01	; 1
   13d44:	ad b7       	in	r26, 0x3d	; 61
   13d46:	be b7       	in	r27, 0x3e	; 62
   13d48:	12 96       	adiw	r26, 0x02	; 2
   13d4a:	fc 92       	st	X, r15
   13d4c:	ee 92       	st	-X, r14
   13d4e:	11 97       	sbiw	r26, 0x01	; 1
   13d50:	d3 82       	std	Z+3, r13	; 0x03
   13d52:	c2 82       	std	Z+2, r12	; 0x02
   13d54:	b5 82       	std	Z+5, r11	; 0x05
   13d56:	a4 82       	std	Z+4, r10	; 0x04
   13d58:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
		 AddSpaceLag(strSend,5);
   13d5c:	ed b7       	in	r30, 0x3d	; 61
   13d5e:	fe b7       	in	r31, 0x3e	; 62
   13d60:	36 96       	adiw	r30, 0x06	; 6
   13d62:	0f b6       	in	r0, 0x3f	; 63
   13d64:	f8 94       	cli
   13d66:	fe bf       	out	0x3e, r31	; 62
   13d68:	0f be       	out	0x3f, r0	; 63
   13d6a:	ed bf       	out	0x3d, r30	; 61
   13d6c:	c7 01       	movw	r24, r14
   13d6e:	65 e0       	ldi	r22, 0x05	; 5
   13d70:	0e 94 c4 2d 	call	0x5b88	; 0x5b88 <AddSpaceLag>
		 uart_print(1,0,strSend);
   13d74:	81 e0       	ldi	r24, 0x01	; 1
   13d76:	60 e0       	ldi	r22, 0x00	; 0
   13d78:	a7 01       	movw	r20, r14
   13d7a:	0e 94 da a8 	call	0x151b4	; 0x151b4 <uart_print>
   13d7e:	07 5f       	subi	r16, 0xF7	; 247
   13d80:	1f 4f       	sbci	r17, 0xFF	; 255
	     sprintf_P(strSend,PSTR("%s"),strEEPROM);
		 AddSpaceLag(strSend,12);
		 uart_print(1,0,strSend);
	 }
	 //ProductPrice 30
	 for (i=0;i<6;i++){
   13d82:	f0 e0       	ldi	r31, 0x00	; 0
   13d84:	0c 3b       	cpi	r16, 0xBC	; 188
   13d86:	1f 07       	cpc	r17, r31
   13d88:	89 f6       	brne	.-94     	; 0x13d2c <SendConfigParamater+0x14c>
   13d8a:	06 e4       	ldi	r16, 0x46	; 70
   13d8c:	10 e0       	ldi	r17, 0x00	; 0
	 //PumpID Config 8
	 for (i=0;i<8;i++){
	      xEEPROM=eeprom_read_byte(&DefPumpMap[i]);
		  if (xEEPROM>=100)xEEPROM=0;
		  FillChar(strSend,0,sizeof(strSend));
	      sprintf_P(strSend,PSTR("%.2d"),xEEPROM);
   13d8e:	5a e2       	ldi	r21, 0x2A	; 42
   13d90:	e5 2e       	mov	r14, r21
   13d92:	f1 2c       	mov	r15, r1
   13d94:	ec 0e       	add	r14, r28
   13d96:	fd 1e       	adc	r15, r29
   13d98:	48 ed       	ldi	r20, 0xD8	; 216
   13d9a:	c4 2e       	mov	r12, r20
   13d9c:	43 e2       	ldi	r20, 0x23	; 35
   13d9e:	d4 2e       	mov	r13, r20
		 AddSpaceLag(strSend,5);
		 uart_print(1,0,strSend);
	 }
	 //PumpID Config 8
	 for (i=0;i<8;i++){
	      xEEPROM=eeprom_read_byte(&DefPumpMap[i]);
   13da0:	c8 01       	movw	r24, r16
   13da2:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
		  if (xEEPROM>=100)xEEPROM=0;
   13da6:	84 36       	cpi	r24, 0x64	; 100
   13da8:	08 f0       	brcs	.+2      	; 0x13dac <SendConfigParamater+0x1cc>
   13daa:	80 e0       	ldi	r24, 0x00	; 0
		  FillChar(strSend,0,sizeof(strSend));
	      sprintf_P(strSend,PSTR("%.2d"),xEEPROM);
   13dac:	00 d0       	rcall	.+0      	; 0x13dae <SendConfigParamater+0x1ce>
   13dae:	00 d0       	rcall	.+0      	; 0x13db0 <SendConfigParamater+0x1d0>
   13db0:	00 d0       	rcall	.+0      	; 0x13db2 <SendConfigParamater+0x1d2>
   13db2:	ed b7       	in	r30, 0x3d	; 61
   13db4:	fe b7       	in	r31, 0x3e	; 62
   13db6:	31 96       	adiw	r30, 0x01	; 1
   13db8:	ad b7       	in	r26, 0x3d	; 61
   13dba:	be b7       	in	r27, 0x3e	; 62
   13dbc:	12 96       	adiw	r26, 0x02	; 2
   13dbe:	fc 92       	st	X, r15
   13dc0:	ee 92       	st	-X, r14
   13dc2:	11 97       	sbiw	r26, 0x01	; 1
   13dc4:	d3 82       	std	Z+3, r13	; 0x03
   13dc6:	c2 82       	std	Z+2, r12	; 0x02
   13dc8:	84 83       	std	Z+4, r24	; 0x04
   13dca:	15 82       	std	Z+5, r1	; 0x05
   13dcc:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
		  AddSpaceLag(strSend,2);
   13dd0:	ed b7       	in	r30, 0x3d	; 61
   13dd2:	fe b7       	in	r31, 0x3e	; 62
   13dd4:	36 96       	adiw	r30, 0x06	; 6
   13dd6:	0f b6       	in	r0, 0x3f	; 63
   13dd8:	f8 94       	cli
   13dda:	fe bf       	out	0x3e, r31	; 62
   13ddc:	0f be       	out	0x3f, r0	; 63
   13dde:	ed bf       	out	0x3d, r30	; 61
   13de0:	c7 01       	movw	r24, r14
   13de2:	62 e0       	ldi	r22, 0x02	; 2
   13de4:	0e 94 c4 2d 	call	0x5b88	; 0x5b88 <AddSpaceLag>
		 uart_print(1,0,strSend);
   13de8:	81 e0       	ldi	r24, 0x01	; 1
   13dea:	60 e0       	ldi	r22, 0x00	; 0
   13dec:	a7 01       	movw	r20, r14
   13dee:	0e 94 da a8 	call	0x151b4	; 0x151b4 <uart_print>
   13df2:	0f 5f       	subi	r16, 0xFF	; 255
   13df4:	1f 4f       	sbci	r17, 0xFF	; 255
	     sprintf_P(strSend,PSTR("%s"),strEEPROM);
		 AddSpaceLag(strSend,5);
		 uart_print(1,0,strSend);
	 }
	 //PumpID Config 8
	 for (i=0;i<8;i++){
   13df6:	f0 e0       	ldi	r31, 0x00	; 0
   13df8:	0e 34       	cpi	r16, 0x4E	; 78
   13dfa:	1f 07       	cpc	r17, r31
   13dfc:	89 f6       	brne	.-94     	; 0x13da0 <SendConfigParamater+0x1c0>
   13dfe:	36 e5       	ldi	r19, 0x56	; 86
   13e00:	e3 2e       	mov	r14, r19
   13e02:	30 e0       	ldi	r19, 0x00	; 0
   13e04:	f3 2e       	mov	r15, r19
	 //PumpID NozzleConfig 48
	 for (i=0;i<8;i++){
	      for (j=0;j<6;j++){
		       xEEPROM=eeprom_read_byte(&DefNozzleMap[i][j]);     
			   if (xEEPROM>=10)xEEPROM=0;
			   sprintf_P(strSend,PSTR("%d"),xEEPROM);
   13e06:	2a e2       	ldi	r18, 0x2A	; 42
   13e08:	a2 2e       	mov	r10, r18
   13e0a:	b1 2c       	mov	r11, r1
   13e0c:	ac 0e       	add	r10, r28
   13e0e:	bd 1e       	adc	r11, r29
   13e10:	95 ed       	ldi	r25, 0xD5	; 213
   13e12:	89 2e       	mov	r8, r25
   13e14:	93 e2       	ldi	r25, 0x23	; 35
   13e16:	99 2e       	mov	r9, r25
   13e18:	34 c0       	rjmp	.+104    	; 0x13e82 <SendConfigParamater+0x2a2>
		 uart_print(1,0,strSend);
	 }
	 //PumpID NozzleConfig 48
	 for (i=0;i<8;i++){
	      for (j=0;j<6;j++){
		       xEEPROM=eeprom_read_byte(&DefNozzleMap[i][j]);     
   13e1a:	c8 01       	movw	r24, r16
   13e1c:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
			   if (xEEPROM>=10)xEEPROM=0;
   13e20:	8a 30       	cpi	r24, 0x0A	; 10
   13e22:	08 f0       	brcs	.+2      	; 0x13e26 <SendConfigParamater+0x246>
   13e24:	80 e0       	ldi	r24, 0x00	; 0
			   sprintf_P(strSend,PSTR("%d"),xEEPROM);
   13e26:	00 d0       	rcall	.+0      	; 0x13e28 <SendConfigParamater+0x248>
   13e28:	00 d0       	rcall	.+0      	; 0x13e2a <SendConfigParamater+0x24a>
   13e2a:	00 d0       	rcall	.+0      	; 0x13e2c <SendConfigParamater+0x24c>
   13e2c:	ed b7       	in	r30, 0x3d	; 61
   13e2e:	fe b7       	in	r31, 0x3e	; 62
   13e30:	31 96       	adiw	r30, 0x01	; 1
   13e32:	ad b7       	in	r26, 0x3d	; 61
   13e34:	be b7       	in	r27, 0x3e	; 62
   13e36:	12 96       	adiw	r26, 0x02	; 2
   13e38:	bc 92       	st	X, r11
   13e3a:	ae 92       	st	-X, r10
   13e3c:	11 97       	sbiw	r26, 0x01	; 1
   13e3e:	93 82       	std	Z+3, r9	; 0x03
   13e40:	82 82       	std	Z+2, r8	; 0x02
   13e42:	84 83       	std	Z+4, r24	; 0x04
   13e44:	15 82       	std	Z+5, r1	; 0x05
   13e46:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
			   uart_print(1,0,strSend);
   13e4a:	ed b7       	in	r30, 0x3d	; 61
   13e4c:	fe b7       	in	r31, 0x3e	; 62
   13e4e:	36 96       	adiw	r30, 0x06	; 6
   13e50:	0f b6       	in	r0, 0x3f	; 63
   13e52:	f8 94       	cli
   13e54:	fe bf       	out	0x3e, r31	; 62
   13e56:	0f be       	out	0x3f, r0	; 63
   13e58:	ed bf       	out	0x3d, r30	; 61
   13e5a:	81 e0       	ldi	r24, 0x01	; 1
   13e5c:	60 e0       	ldi	r22, 0x00	; 0
   13e5e:	a5 01       	movw	r20, r10
   13e60:	0e 94 da a8 	call	0x151b4	; 0x151b4 <uart_print>
		  AddSpaceLag(strSend,2);
		 uart_print(1,0,strSend);
	 }
	 //PumpID NozzleConfig 48
	 for (i=0;i<8;i++){
	      for (j=0;j<6;j++){
   13e64:	d3 94       	inc	r13
   13e66:	0f 5f       	subi	r16, 0xFF	; 255
   13e68:	1f 4f       	sbci	r17, 0xFF	; 255
   13e6a:	f6 e0       	ldi	r31, 0x06	; 6
   13e6c:	df 16       	cp	r13, r31
   13e6e:	a9 f6       	brne	.-86     	; 0x13e1a <SendConfigParamater+0x23a>
   13e70:	86 e0       	ldi	r24, 0x06	; 6
   13e72:	90 e0       	ldi	r25, 0x00	; 0
   13e74:	e8 0e       	add	r14, r24
   13e76:	f9 1e       	adc	r15, r25
	      sprintf_P(strSend,PSTR("%.2d"),xEEPROM);
		  AddSpaceLag(strSend,2);
		 uart_print(1,0,strSend);
	 }
	 //PumpID NozzleConfig 48
	 for (i=0;i<8;i++){
   13e78:	96 e8       	ldi	r25, 0x86	; 134
   13e7a:	e9 16       	cp	r14, r25
   13e7c:	90 e0       	ldi	r25, 0x00	; 0
   13e7e:	f9 06       	cpc	r15, r25
   13e80:	19 f0       	breq	.+6      	; 0x13e88 <SendConfigParamater+0x2a8>
   13e82:	87 01       	movw	r16, r14
   13e84:	dd 24       	eor	r13, r13
   13e86:	c9 cf       	rjmp	.-110    	; 0x13e1a <SendConfigParamater+0x23a>
			   sprintf_P(strSend,PSTR("%d"),xEEPROM);
			   uart_print(1,0,strSend);
		  }
	 }
	 //PrintNoMoney
	 xEEPROM=eeprom_read_byte(&DefPrintMoney);
   13e88:	82 ec       	ldi	r24, 0xC2	; 194
   13e8a:	93 e0       	ldi	r25, 0x03	; 3
   13e8c:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
	 if (xEEPROM==True){
   13e90:	81 30       	cpi	r24, 0x01	; 1
   13e92:	79 f4       	brne	.+30     	; 0x13eb2 <SendConfigParamater+0x2d2>
		 sprintf_P(strSend,PSTR("1"));
   13e94:	00 d0       	rcall	.+0      	; 0x13e96 <SendConfigParamater+0x2b6>
   13e96:	00 d0       	rcall	.+0      	; 0x13e98 <SendConfigParamater+0x2b8>
   13e98:	ad b7       	in	r26, 0x3d	; 61
   13e9a:	be b7       	in	r27, 0x3e	; 62
   13e9c:	12 96       	adiw	r26, 0x02	; 2
   13e9e:	bc 92       	st	X, r11
   13ea0:	ae 92       	st	-X, r10
   13ea2:	11 97       	sbiw	r26, 0x01	; 1
   13ea4:	83 ed       	ldi	r24, 0xD3	; 211
   13ea6:	93 e2       	ldi	r25, 0x23	; 35
   13ea8:	14 96       	adiw	r26, 0x04	; 4
   13eaa:	9c 93       	st	X, r25
   13eac:	8e 93       	st	-X, r24
   13eae:	13 97       	sbiw	r26, 0x03	; 3
   13eb0:	0a c0       	rjmp	.+20     	; 0x13ec6 <SendConfigParamater+0x2e6>
	 }else{
	     sprintf_P(strSend,PSTR("0"));
   13eb2:	00 d0       	rcall	.+0      	; 0x13eb4 <SendConfigParamater+0x2d4>
   13eb4:	00 d0       	rcall	.+0      	; 0x13eb6 <SendConfigParamater+0x2d6>
   13eb6:	ed b7       	in	r30, 0x3d	; 61
   13eb8:	fe b7       	in	r31, 0x3e	; 62
   13eba:	b2 82       	std	Z+2, r11	; 0x02
   13ebc:	a1 82       	std	Z+1, r10	; 0x01
   13ebe:	81 ed       	ldi	r24, 0xD1	; 209
   13ec0:	93 e2       	ldi	r25, 0x23	; 35
   13ec2:	94 83       	std	Z+4, r25	; 0x04
   13ec4:	83 83       	std	Z+3, r24	; 0x03
   13ec6:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
   13eca:	0f 90       	pop	r0
   13ecc:	0f 90       	pop	r0
   13ece:	0f 90       	pop	r0
   13ed0:	0f 90       	pop	r0
	 }uart_print(1,0,strSend);
   13ed2:	8e 01       	movw	r16, r28
   13ed4:	06 5d       	subi	r16, 0xD6	; 214
   13ed6:	1f 4f       	sbci	r17, 0xFF	; 255
   13ed8:	81 e0       	ldi	r24, 0x01	; 1
   13eda:	60 e0       	ldi	r22, 0x00	; 0
   13edc:	a8 01       	movw	r20, r16
   13ede:	0e 94 da a8 	call	0x151b4	; 0x151b4 <uart_print>
	 //TermId
     xEEPROM=eeprom_read_byte(&DefIFT_ID);     
   13ee2:	80 e0       	ldi	r24, 0x00	; 0
   13ee4:	90 e0       	ldi	r25, 0x00	; 0
   13ee6:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
     sprintf_P(strSend,PSTR("%.2d"),xEEPROM);
   13eea:	00 d0       	rcall	.+0      	; 0x13eec <SendConfigParamater+0x30c>
   13eec:	00 d0       	rcall	.+0      	; 0x13eee <SendConfigParamater+0x30e>
   13eee:	00 d0       	rcall	.+0      	; 0x13ef0 <SendConfigParamater+0x310>
   13ef0:	ed b7       	in	r30, 0x3d	; 61
   13ef2:	fe b7       	in	r31, 0x3e	; 62
   13ef4:	31 96       	adiw	r30, 0x01	; 1
   13ef6:	ad b7       	in	r26, 0x3d	; 61
   13ef8:	be b7       	in	r27, 0x3e	; 62
   13efa:	12 96       	adiw	r26, 0x02	; 2
   13efc:	1c 93       	st	X, r17
   13efe:	0e 93       	st	-X, r16
   13f00:	11 97       	sbiw	r26, 0x01	; 1
   13f02:	2c ec       	ldi	r18, 0xCC	; 204
   13f04:	33 e2       	ldi	r19, 0x23	; 35
   13f06:	33 83       	std	Z+3, r19	; 0x03
   13f08:	22 83       	std	Z+2, r18	; 0x02
   13f0a:	84 83       	std	Z+4, r24	; 0x04
   13f0c:	15 82       	std	Z+5, r1	; 0x05
   13f0e:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
     uart_print(1,0,strSend);
   13f12:	ed b7       	in	r30, 0x3d	; 61
   13f14:	fe b7       	in	r31, 0x3e	; 62
   13f16:	36 96       	adiw	r30, 0x06	; 6
   13f18:	0f b6       	in	r0, 0x3f	; 63
   13f1a:	f8 94       	cli
   13f1c:	fe bf       	out	0x3e, r31	; 62
   13f1e:	0f be       	out	0x3f, r0	; 63
   13f20:	ed bf       	out	0x3d, r30	; 61
   13f22:	81 e0       	ldi	r24, 0x01	; 1
   13f24:	60 e0       	ldi	r22, 0x00	; 0
   13f26:	a8 01       	movw	r20, r16
   13f28:	0e 94 da a8 	call	0x151b4	; 0x151b4 <uart_print>
   13f2c:	8e e4       	ldi	r24, 0x4E	; 78
   13f2e:	e8 2e       	mov	r14, r24
   13f30:	80 e0       	ldi	r24, 0x00	; 0
   13f32:	f8 2e       	mov	r15, r24
	 //PumpLabel
     for (i=0;i<8;i++){
	      xEEPROM=eeprom_read_byte(&DefPumpLabel[i]);
		  if (xEEPROM>=100)xEEPROM=0;
		  FillChar(strSend,0,sizeof(strSend));
	      sprintf_P(strSend,PSTR("%.2d"),xEEPROM);
   13f34:	d0 2e       	mov	r13, r16
   13f36:	01 2f       	mov	r16, r17
   13f38:	b7 ec       	ldi	r27, 0xC7	; 199
   13f3a:	ab 2e       	mov	r10, r27
   13f3c:	b3 e2       	ldi	r27, 0x23	; 35
   13f3e:	bb 2e       	mov	r11, r27
     xEEPROM=eeprom_read_byte(&DefIFT_ID);     
     sprintf_P(strSend,PSTR("%.2d"),xEEPROM);
     uart_print(1,0,strSend);
	 //PumpLabel
     for (i=0;i<8;i++){
	      xEEPROM=eeprom_read_byte(&DefPumpLabel[i]);
   13f40:	c7 01       	movw	r24, r14
   13f42:	0e 94 2b ad 	call	0x15a56	; 0x15a56 <__eerd_byte_m128>
		  if (xEEPROM>=100)xEEPROM=0;
   13f46:	84 36       	cpi	r24, 0x64	; 100
   13f48:	08 f0       	brcs	.+2      	; 0x13f4c <SendConfigParamater+0x36c>
   13f4a:	80 e0       	ldi	r24, 0x00	; 0
		  FillChar(strSend,0,sizeof(strSend));
	      sprintf_P(strSend,PSTR("%.2d"),xEEPROM);
   13f4c:	00 d0       	rcall	.+0      	; 0x13f4e <SendConfigParamater+0x36e>
   13f4e:	00 d0       	rcall	.+0      	; 0x13f50 <SendConfigParamater+0x370>
   13f50:	00 d0       	rcall	.+0      	; 0x13f52 <SendConfigParamater+0x372>
   13f52:	ed b7       	in	r30, 0x3d	; 61
   13f54:	fe b7       	in	r31, 0x3e	; 62
   13f56:	31 96       	adiw	r30, 0x01	; 1
   13f58:	ad b7       	in	r26, 0x3d	; 61
   13f5a:	be b7       	in	r27, 0x3e	; 62
   13f5c:	11 96       	adiw	r26, 0x01	; 1
   13f5e:	dc 92       	st	X, r13
   13f60:	11 97       	sbiw	r26, 0x01	; 1
   13f62:	12 96       	adiw	r26, 0x02	; 2
   13f64:	0c 93       	st	X, r16
   13f66:	b3 82       	std	Z+3, r11	; 0x03
   13f68:	a2 82       	std	Z+2, r10	; 0x02
   13f6a:	84 83       	std	Z+4, r24	; 0x04
   13f6c:	15 82       	std	Z+5, r1	; 0x05
   13f6e:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
		  AddSpaceLag(strSend,2);
   13f72:	ed b7       	in	r30, 0x3d	; 61
   13f74:	fe b7       	in	r31, 0x3e	; 62
   13f76:	36 96       	adiw	r30, 0x06	; 6
   13f78:	0f b6       	in	r0, 0x3f	; 63
   13f7a:	f8 94       	cli
   13f7c:	fe bf       	out	0x3e, r31	; 62
   13f7e:	0f be       	out	0x3f, r0	; 63
   13f80:	ed bf       	out	0x3d, r30	; 61
   13f82:	8d 2d       	mov	r24, r13
   13f84:	90 2f       	mov	r25, r16
   13f86:	62 e0       	ldi	r22, 0x02	; 2
   13f88:	0e 94 c4 2d 	call	0x5b88	; 0x5b88 <AddSpaceLag>
		 uart_print(1,0,strSend);
   13f8c:	81 e0       	ldi	r24, 0x01	; 1
   13f8e:	60 e0       	ldi	r22, 0x00	; 0
   13f90:	4d 2d       	mov	r20, r13
   13f92:	50 2f       	mov	r21, r16
   13f94:	0e 94 da a8 	call	0x151b4	; 0x151b4 <uart_print>
   13f98:	08 94       	sec
   13f9a:	e1 1c       	adc	r14, r1
   13f9c:	f1 1c       	adc	r15, r1
	 //TermId
     xEEPROM=eeprom_read_byte(&DefIFT_ID);     
     sprintf_P(strSend,PSTR("%.2d"),xEEPROM);
     uart_print(1,0,strSend);
	 //PumpLabel
     for (i=0;i<8;i++){
   13f9e:	f6 e5       	ldi	r31, 0x56	; 86
   13fa0:	ef 16       	cp	r14, r31
   13fa2:	f0 e0       	ldi	r31, 0x00	; 0
   13fa4:	ff 06       	cpc	r15, r31
   13fa6:	61 f6       	brne	.-104    	; 0x13f40 <SendConfigParamater+0x360>
		  FillChar(strSend,0,sizeof(strSend));
	      sprintf_P(strSend,PSTR("%.2d"),xEEPROM);
		  AddSpaceLag(strSend,2);
		 uart_print(1,0,strSend);
	 }
	 uart_printf(1,1,PSTR(">"));
   13fa8:	81 e0       	ldi	r24, 0x01	; 1
   13faa:	61 e0       	ldi	r22, 0x01	; 1
   13fac:	45 ec       	ldi	r20, 0xC5	; 197
   13fae:	53 e2       	ldi	r21, 0x23	; 35
   13fb0:	0e 94 02 a9 	call	0x15204	; 0x15204 <uart_printf>
	 //End
}
   13fb4:	cb 59       	subi	r28, 0x9B	; 155
   13fb6:	df 4f       	sbci	r29, 0xFF	; 255
   13fb8:	0f b6       	in	r0, 0x3f	; 63
   13fba:	f8 94       	cli
   13fbc:	de bf       	out	0x3e, r29	; 62
   13fbe:	0f be       	out	0x3f, r0	; 63
   13fc0:	cd bf       	out	0x3d, r28	; 61
   13fc2:	cf 91       	pop	r28
   13fc4:	df 91       	pop	r29
   13fc6:	1f 91       	pop	r17
   13fc8:	0f 91       	pop	r16
   13fca:	ff 90       	pop	r15
   13fcc:	ef 90       	pop	r14
   13fce:	df 90       	pop	r13
   13fd0:	cf 90       	pop	r12
   13fd2:	bf 90       	pop	r11
   13fd4:	af 90       	pop	r10
   13fd6:	9f 90       	pop	r9
   13fd8:	8f 90       	pop	r8
   13fda:	08 95       	ret

00013fdc <SaveConfigParameter>:
     char Result;
	 Result=False;
   return Result;
}

void SaveConfigParameter(){
   13fdc:	6f 92       	push	r6
   13fde:	7f 92       	push	r7
   13fe0:	8f 92       	push	r8
   13fe2:	9f 92       	push	r9
   13fe4:	af 92       	push	r10
   13fe6:	bf 92       	push	r11
   13fe8:	cf 92       	push	r12
   13fea:	df 92       	push	r13
   13fec:	ef 92       	push	r14
   13fee:	ff 92       	push	r15
   13ff0:	0f 93       	push	r16
   13ff2:	1f 93       	push	r17
   13ff4:	df 93       	push	r29
   13ff6:	cf 93       	push	r28
   13ff8:	cd b7       	in	r28, 0x3d	; 61
   13ffa:	de b7       	in	r29, 0x3e	; 62
   13ffc:	c6 54       	subi	r28, 0x46	; 70
   13ffe:	d0 40       	sbci	r29, 0x00	; 0
   14000:	0f b6       	in	r0, 0x3f	; 63
   14002:	f8 94       	cli
   14004:	de bf       	out	0x3e, r29	; 62
   14006:	0f be       	out	0x3f, r0	; 63
   14008:	cd bf       	out	0x3d, r28	; 61
char i,j;
char strEEPROM[50],xEEPROM;
unsigned int StrPos;
char strSend[20];
     
	 sprintf_P(strSend,PSTR("Length:%d"),transLength);
   1400a:	00 d0       	rcall	.+0      	; 0x1400c <SaveConfigParameter+0x30>
   1400c:	00 d0       	rcall	.+0      	; 0x1400e <SaveConfigParameter+0x32>
   1400e:	00 d0       	rcall	.+0      	; 0x14010 <SaveConfigParameter+0x34>
   14010:	ed b7       	in	r30, 0x3d	; 61
   14012:	fe b7       	in	r31, 0x3e	; 62
   14014:	31 96       	adiw	r30, 0x01	; 1
   14016:	8e 01       	movw	r16, r28
   14018:	0f 5f       	subi	r16, 0xFF	; 255
   1401a:	1f 4f       	sbci	r17, 0xFF	; 255
   1401c:	ad b7       	in	r26, 0x3d	; 61
   1401e:	be b7       	in	r27, 0x3e	; 62
   14020:	12 96       	adiw	r26, 0x02	; 2
   14022:	1c 93       	st	X, r17
   14024:	0e 93       	st	-X, r16
   14026:	11 97       	sbiw	r26, 0x01	; 1
   14028:	8f ef       	ldi	r24, 0xFF	; 255
   1402a:	93 e2       	ldi	r25, 0x23	; 35
   1402c:	93 83       	std	Z+3, r25	; 0x03
   1402e:	82 83       	std	Z+2, r24	; 0x02
   14030:	80 91 8b 01 	lds	r24, 0x018B
   14034:	90 91 8c 01 	lds	r25, 0x018C
   14038:	95 83       	std	Z+5, r25	; 0x05
   1403a:	84 83       	std	Z+4, r24	; 0x04
   1403c:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	 uart_print(1,1,strSend);
   14040:	ed b7       	in	r30, 0x3d	; 61
   14042:	fe b7       	in	r31, 0x3e	; 62
   14044:	36 96       	adiw	r30, 0x06	; 6
   14046:	0f b6       	in	r0, 0x3f	; 63
   14048:	f8 94       	cli
   1404a:	fe bf       	out	0x3e, r31	; 62
   1404c:	0f be       	out	0x3f, r0	; 63
   1404e:	ed bf       	out	0x3d, r30	; 61
   14050:	81 e0       	ldi	r24, 0x01	; 1
   14052:	61 e0       	ldi	r22, 0x01	; 1
   14054:	a8 01       	movw	r20, r16
   14056:	0e 94 da a8 	call	0x151b4	; 0x151b4 <uart_print>

     StrPos=0;
	 uart_printf(1,1,PSTR("<Saving>")); 
   1405a:	81 e0       	ldi	r24, 0x01	; 1
   1405c:	61 e0       	ldi	r22, 0x01	; 1
   1405e:	46 ef       	ldi	r20, 0xF6	; 246
   14060:	53 e2       	ldi	r21, 0x23	; 35
   14062:	0e 94 02 a9 	call	0x15204	; 0x15204 <uart_printf>
   14066:	08 e2       	ldi	r16, 0x28	; 40
   14068:	12 e0       	ldi	r17, 0x02	; 2
   1406a:	4f e9       	ldi	r20, 0x9F	; 159
   1406c:	e4 2e       	mov	r14, r20
   1406e:	49 e0       	ldi	r20, 0x09	; 9
   14070:	f4 2e       	mov	r15, r20
   14072:	35 e1       	ldi	r19, 0x15	; 21
   14074:	a3 2e       	mov	r10, r19
   14076:	b1 2c       	mov	r11, r1
   14078:	ac 0e       	add	r10, r28
   1407a:	bd 1e       	adc	r11, r29
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   1407c:	2d e3       	ldi	r18, 0x3D	; 61
   1407e:	c2 2e       	mov	r12, r18
   14080:	d1 2c       	mov	r13, r1
   14082:	cc 0e       	add	r12, r28
   14084:	dd 1e       	adc	r13, r29
     
	 sprintf_P(strSend,PSTR("Length:%d"),transLength);
	 uart_print(1,1,strSend);

     StrPos=0;
	 uart_printf(1,1,PSTR("<Saving>")); 
   14086:	d7 01       	movw	r26, r14
   14088:	f5 01       	movw	r30, r10
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
   1408a:	8d 91       	ld	r24, X+
   1408c:	81 93       	st	Z+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   1408e:	ec 15       	cp	r30, r12
   14090:	fd 05       	cpc	r31, r13
   14092:	d9 f7       	brne	.-10     	; 0x1408a <SaveConfigParameter+0xae>
	 uart_printf(1,1,PSTR("<Saving>")); 
     //HeaderFooter
	 for(i=0;i<10;i++){
         FillChar(strEEPROM,0,sizeof(strEEPROM));   
		 StrPosCopy(rcv_trans,strEEPROM,(StrPos+(40*i)),40);
		 strEEPROM[40]=0;
   14094:	1d ae       	std	Y+61, r1	; 0x3d
		 eeprom_write_block((const void*) &strEEPROM, (void*) &DefHeaderFooter[i],41);
   14096:	c5 01       	movw	r24, r10
   14098:	b8 01       	movw	r22, r16
   1409a:	49 e2       	ldi	r20, 0x29	; 41
   1409c:	50 e0       	ldi	r21, 0x00	; 0
   1409e:	0e 94 33 ad 	call	0x15a66	; 0x15a66 <__eewr_block_m128>
   140a2:	07 5d       	subi	r16, 0xD7	; 215
   140a4:	1f 4f       	sbci	r17, 0xFF	; 255
   140a6:	88 e2       	ldi	r24, 0x28	; 40
   140a8:	90 e0       	ldi	r25, 0x00	; 0
   140aa:	e8 0e       	add	r14, r24
   140ac:	f9 1e       	adc	r15, r25
	 uart_print(1,1,strSend);

     StrPos=0;
	 uart_printf(1,1,PSTR("<Saving>")); 
     //HeaderFooter
	 for(i=0;i<10;i++){
   140ae:	93 e0       	ldi	r25, 0x03	; 3
   140b0:	02 3c       	cpi	r16, 0xC2	; 194
   140b2:	19 07       	cpc	r17, r25
   140b4:	41 f7       	brne	.-48     	; 0x14086 <SaveConfigParameter+0xaa>
   140b6:	0c eb       	ldi	r16, 0xBC	; 188
   140b8:	10 e0       	ldi	r17, 0x00	; 0
   140ba:	9f e2       	ldi	r25, 0x2F	; 47
   140bc:	e9 2e       	mov	r14, r25
   140be:	9b e0       	ldi	r25, 0x0B	; 11
   140c0:	f9 2e       	mov	r15, r25
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   140c2:	85 e1       	ldi	r24, 0x15	; 21
   140c4:	c8 2e       	mov	r12, r24
   140c6:	d1 2c       	mov	r13, r1
   140c8:	cc 0e       	add	r12, r28
   140ca:	dd 1e       	adc	r13, r29
   140cc:	b1 e2       	ldi	r27, 0x21	; 33
   140ce:	8b 2e       	mov	r8, r27
   140d0:	91 2c       	mov	r9, r1
   140d2:	8c 0e       	add	r8, r28
   140d4:	9d 1e       	adc	r9, r29
	 uart_print(1,1,strSend);

     StrPos=0;
	 uart_printf(1,1,PSTR("<Saving>")); 
     //HeaderFooter
	 for(i=0;i<10;i++){
   140d6:	d7 01       	movw	r26, r14
   140d8:	f5 01       	movw	r30, r10
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
   140da:	8d 91       	ld	r24, X+
   140dc:	81 93       	st	Z+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   140de:	e8 15       	cp	r30, r8
   140e0:	f9 05       	cpc	r31, r9
   140e2:	d9 f7       	brne	.-10     	; 0x140da <SaveConfigParameter+0xfe>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
   140e4:	19 a2       	std	Y+33, r1	; 0x21
	 //ProductName
	 StrPos=(40*10);
	 for(i=0;i<6;i++){
         FillChar(strEEPROM,0,sizeof(strEEPROM));   
		 StrPosCopy(rcv_trans,strEEPROM,(StrPos+(12*i)),12);
		 RemSpaceLag(strEEPROM);
   140e6:	c6 01       	movw	r24, r12
   140e8:	0e 94 d2 25 	call	0x4ba4	; 0x4ba4 <RemSpaceLag>
		 strEEPROM[strlen(strEEPROM)]=0;
   140ec:	f6 01       	movw	r30, r12
   140ee:	01 90       	ld	r0, Z+
   140f0:	00 20       	and	r0, r0
   140f2:	e9 f7       	brne	.-6      	; 0x140ee <SaveConfigParameter+0x112>
   140f4:	31 97       	sbiw	r30, 0x01	; 1
   140f6:	10 82       	st	Z, r1
		 eeprom_write_block((const void*) &strEEPROM, (void*) &DefProductName[i],sizeof(DefProductName[i]));
   140f8:	c6 01       	movw	r24, r12
   140fa:	b8 01       	movw	r22, r16
   140fc:	4d e0       	ldi	r20, 0x0D	; 13
   140fe:	50 e0       	ldi	r21, 0x00	; 0
   14100:	0e 94 33 ad 	call	0x15a66	; 0x15a66 <__eewr_block_m128>
   14104:	03 5f       	subi	r16, 0xF3	; 243
   14106:	1f 4f       	sbci	r17, 0xFF	; 255
   14108:	ac e0       	ldi	r26, 0x0C	; 12
   1410a:	b0 e0       	ldi	r27, 0x00	; 0
   1410c:	ea 0e       	add	r14, r26
   1410e:	fb 1e       	adc	r15, r27
		 eeprom_write_block((const void*) &strEEPROM, (void*) &DefHeaderFooter[i],41);
		 //uart_print(1,1,strEEPROM);
	 }
	 //ProductName
	 StrPos=(40*10);
	 for(i=0;i<6;i++){
   14110:	b1 e0       	ldi	r27, 0x01	; 1
   14112:	0a 30       	cpi	r16, 0x0A	; 10
   14114:	1b 07       	cpc	r17, r27
   14116:	f9 f6       	brne	.-66     	; 0x140d6 <SaveConfigParameter+0xfa>
   14118:	06 e8       	ldi	r16, 0x86	; 134
   1411a:	10 e0       	ldi	r17, 0x00	; 0
   1411c:	a7 e7       	ldi	r26, 0x77	; 119
   1411e:	ea 2e       	mov	r14, r26
   14120:	ab e0       	ldi	r26, 0x0B	; 11
   14122:	fa 2e       	mov	r15, r26
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   14124:	f5 e1       	ldi	r31, 0x15	; 21
   14126:	cf 2e       	mov	r12, r31
   14128:	d1 2c       	mov	r13, r1
   1412a:	cc 0e       	add	r12, r28
   1412c:	dd 1e       	adc	r13, r29
   1412e:	ea e1       	ldi	r30, 0x1A	; 26
   14130:	8e 2e       	mov	r8, r30
   14132:	91 2c       	mov	r9, r1
   14134:	8c 0e       	add	r8, r28
   14136:	9d 1e       	adc	r9, r29
		 eeprom_write_block((const void*) &strEEPROM, (void*) &DefHeaderFooter[i],41);
		 //uart_print(1,1,strEEPROM);
	 }
	 //ProductName
	 StrPos=(40*10);
	 for(i=0;i<6;i++){
   14138:	d7 01       	movw	r26, r14
   1413a:	f5 01       	movw	r30, r10
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
   1413c:	8d 91       	ld	r24, X+
   1413e:	81 93       	st	Z+, r24
	 AddSpaceLag(Source,Length);
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
   14140:	e8 15       	cp	r30, r8
   14142:	f9 05       	cpc	r31, r9
   14144:	d9 f7       	brne	.-10     	; 0x1413c <SaveConfigParameter+0x160>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
   14146:	1a 8e       	std	Y+26, r1	; 0x1a
	 //ProductPrice
	 StrPos=(40*10)+(12*6);
	 for(i=0;i<6;i++){
         FillChar(strEEPROM,0,sizeof(strEEPROM));   
		 StrPosCopy(rcv_trans,strEEPROM,(StrPos+(5*i)),5);
		 RemSpaceLag(strEEPROM);
   14148:	c6 01       	movw	r24, r12
   1414a:	0e 94 d2 25 	call	0x4ba4	; 0x4ba4 <RemSpaceLag>
		 eeprom_write_block((const void*) &strEEPROM, (void*) &DefProductPrice[i],sizeof(DefProductPrice[i]));
   1414e:	c6 01       	movw	r24, r12
   14150:	b8 01       	movw	r22, r16
   14152:	49 e0       	ldi	r20, 0x09	; 9
   14154:	50 e0       	ldi	r21, 0x00	; 0
   14156:	0e 94 33 ad 	call	0x15a66	; 0x15a66 <__eewr_block_m128>
   1415a:	07 5f       	subi	r16, 0xF7	; 247
   1415c:	1f 4f       	sbci	r17, 0xFF	; 255
   1415e:	e5 e0       	ldi	r30, 0x05	; 5
   14160:	f0 e0       	ldi	r31, 0x00	; 0
   14162:	ee 0e       	add	r14, r30
   14164:	ff 1e       	adc	r15, r31
		// uart_print(1,1,strEEPROM);

	 }    
	 //ProductPrice
	 StrPos=(40*10)+(12*6);
	 for(i=0;i<6;i++){
   14166:	f0 e0       	ldi	r31, 0x00	; 0
   14168:	0c 3b       	cpi	r16, 0xBC	; 188
   1416a:	1f 07       	cpc	r17, r31
   1416c:	29 f7       	brne	.-54     	; 0x14138 <SaveConfigParameter+0x15c>
   1416e:	75 e9       	ldi	r23, 0x95	; 149
   14170:	e7 2e       	mov	r14, r23
   14172:	7b e0       	ldi	r23, 0x0B	; 11
   14174:	f7 2e       	mov	r15, r23
   14176:	66 e4       	ldi	r22, 0x46	; 70
   14178:	c6 2e       	mov	r12, r22
   1417a:	60 e0       	ldi	r22, 0x00	; 0
   1417c:	d6 2e       	mov	r13, r22
	 //PumpID Config
	 StrPos=(40*10)+(12*6)+(5*6);
	 for(i=0;i<8;i++){
         FillChar(strEEPROM,0,sizeof(strEEPROM));   
		 StrPosCopy(rcv_trans,strEEPROM,(StrPos+(2*i)),2);
		 RemZeroLead(strEEPROM);
   1417e:	55 e1       	ldi	r21, 0x15	; 21
   14180:	a5 2e       	mov	r10, r21
   14182:	b1 2c       	mov	r11, r1
   14184:	ac 0e       	add	r10, r28
   14186:	bd 1e       	adc	r11, r29
		 xEEPROM=atoi(strEEPROM);
         eeprom_write_byte(&DefPumpMap[i],xEEPROM);
		 sprintf_P(strSend,PSTR("%d"),xEEPROM);
   14188:	3e 01       	movw	r6, r28
   1418a:	08 94       	sec
   1418c:	61 1c       	adc	r6, r1
   1418e:	71 1c       	adc	r7, r1
   14190:	43 ef       	ldi	r20, 0xF3	; 243
   14192:	84 2e       	mov	r8, r20
   14194:	43 e2       	ldi	r20, 0x23	; 35
   14196:	94 2e       	mov	r9, r20
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
   14198:	d7 01       	movw	r26, r14
   1419a:	8c 91       	ld	r24, X
   1419c:	8d 8b       	std	Y+21, r24	; 0x15
   1419e:	11 96       	adiw	r26, 0x01	; 1
   141a0:	8c 91       	ld	r24, X
   141a2:	8e 8b       	std	Y+22, r24	; 0x16
	 }Dest[Length]=0;
   141a4:	1f 8a       	std	Y+23, r1	; 0x17
	 //PumpID Config
	 StrPos=(40*10)+(12*6)+(5*6);
	 for(i=0;i<8;i++){
         FillChar(strEEPROM,0,sizeof(strEEPROM));   
		 StrPosCopy(rcv_trans,strEEPROM,(StrPos+(2*i)),2);
		 RemZeroLead(strEEPROM);
   141a6:	c5 01       	movw	r24, r10
   141a8:	0e 94 3f 25 	call	0x4a7e	; 0x4a7e <RemZeroLead>
		 xEEPROM=atoi(strEEPROM);
   141ac:	c5 01       	movw	r24, r10
   141ae:	0e 94 ae aa 	call	0x1555c	; 0x1555c <atoi>
   141b2:	18 2f       	mov	r17, r24
         eeprom_write_byte(&DefPumpMap[i],xEEPROM);
   141b4:	c6 01       	movw	r24, r12
   141b6:	61 2f       	mov	r22, r17
   141b8:	0e 94 3d ad 	call	0x15a7a	; 0x15a7a <__eewr_byte_m128>
		 sprintf_P(strSend,PSTR("%d"),xEEPROM);
   141bc:	00 d0       	rcall	.+0      	; 0x141be <SaveConfigParameter+0x1e2>
   141be:	00 d0       	rcall	.+0      	; 0x141c0 <SaveConfigParameter+0x1e4>
   141c0:	00 d0       	rcall	.+0      	; 0x141c2 <SaveConfigParameter+0x1e6>
   141c2:	ed b7       	in	r30, 0x3d	; 61
   141c4:	fe b7       	in	r31, 0x3e	; 62
   141c6:	31 96       	adiw	r30, 0x01	; 1
   141c8:	ad b7       	in	r26, 0x3d	; 61
   141ca:	be b7       	in	r27, 0x3e	; 62
   141cc:	12 96       	adiw	r26, 0x02	; 2
   141ce:	7c 92       	st	X, r7
   141d0:	6e 92       	st	-X, r6
   141d2:	11 97       	sbiw	r26, 0x01	; 1
   141d4:	93 82       	std	Z+3, r9	; 0x03
   141d6:	82 82       	std	Z+2, r8	; 0x02
   141d8:	14 83       	std	Z+4, r17	; 0x04
   141da:	15 82       	std	Z+5, r1	; 0x05
   141dc:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
   141e0:	e2 e0       	ldi	r30, 0x02	; 2
   141e2:	f0 e0       	ldi	r31, 0x00	; 0
   141e4:	ee 0e       	add	r14, r30
   141e6:	ff 1e       	adc	r15, r31
   141e8:	08 94       	sec
   141ea:	c1 1c       	adc	r12, r1
   141ec:	d1 1c       	adc	r13, r1
		// uart_print(1,1,strEEPROM);

	 }    
	 //PumpID Config
	 StrPos=(40*10)+(12*6)+(5*6);
	 for(i=0;i<8;i++){
   141ee:	8d b7       	in	r24, 0x3d	; 61
   141f0:	9e b7       	in	r25, 0x3e	; 62
   141f2:	06 96       	adiw	r24, 0x06	; 6
   141f4:	0f b6       	in	r0, 0x3f	; 63
   141f6:	f8 94       	cli
   141f8:	9e bf       	out	0x3e, r25	; 62
   141fa:	0f be       	out	0x3f, r0	; 63
   141fc:	8d bf       	out	0x3d, r24	; 61
   141fe:	95 ea       	ldi	r25, 0xA5	; 165
   14200:	e9 16       	cp	r14, r25
   14202:	9b e0       	ldi	r25, 0x0B	; 11
   14204:	f9 06       	cpc	r15, r25
   14206:	41 f6       	brne	.-112    	; 0x14198 <SaveConfigParameter+0x1bc>
   14208:	36 e5       	ldi	r19, 0x56	; 86
   1420a:	c3 2e       	mov	r12, r19
   1420c:	30 e0       	ldi	r19, 0x00	; 0
   1420e:	d3 2e       	mov	r13, r19
   14210:	57 01       	movw	r10, r14
   14212:	1d c0       	rjmp	.+58     	; 0x1424e <SaveConfigParameter+0x272>
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
   14214:	d7 01       	movw	r26, r14
   14216:	6c 91       	ld	r22, X
   14218:	60 53       	subi	r22, 0x30	; 48
   1421a:	6a 30       	cpi	r22, 0x0A	; 10
   1421c:	08 f0       	brcs	.+2      	; 0x14220 <SaveConfigParameter+0x244>
   1421e:	60 e0       	ldi	r22, 0x00	; 0
	 //PumpNozzle
	 StrPos=(40*10)+(12*6)+(5*6)+(2*8);
	 for (i=0;i<8;i++){
	     for (j=0;j<6;j++){
              xEEPROM=Ord(CharPosCopy(rcv_trans,StrPos+(i*6+j)));
		      eeprom_write_byte(&DefNozzleMap[i][j],xEEPROM);
   14220:	c8 01       	movw	r24, r16
   14222:	0e 94 3d ad 	call	0x15a7a	; 0x15a7a <__eewr_byte_m128>

	 }    
	 //PumpNozzle
	 StrPos=(40*10)+(12*6)+(5*6)+(2*8);
	 for (i=0;i<8;i++){
	     for (j=0;j<6;j++){
   14226:	93 94       	inc	r9
   14228:	08 94       	sec
   1422a:	e1 1c       	adc	r14, r1
   1422c:	f1 1c       	adc	r15, r1
   1422e:	0f 5f       	subi	r16, 0xFF	; 255
   14230:	1f 4f       	sbci	r17, 0xFF	; 255
   14232:	b6 e0       	ldi	r27, 0x06	; 6
   14234:	9b 16       	cp	r9, r27
   14236:	71 f7       	brne	.-36     	; 0x14214 <SaveConfigParameter+0x238>
   14238:	e6 e0       	ldi	r30, 0x06	; 6
   1423a:	f0 e0       	ldi	r31, 0x00	; 0
   1423c:	ce 0e       	add	r12, r30
   1423e:	df 1e       	adc	r13, r31
   14240:	ae 0e       	add	r10, r30
   14242:	bf 1e       	adc	r11, r31
		// uart_print(1,1,strSend); 

	 }    
	 //PumpNozzle
	 StrPos=(40*10)+(12*6)+(5*6)+(2*8);
	 for (i=0;i<8;i++){
   14244:	f6 e8       	ldi	r31, 0x86	; 134
   14246:	cf 16       	cp	r12, r31
   14248:	f0 e0       	ldi	r31, 0x00	; 0
   1424a:	df 06       	cpc	r13, r31
   1424c:	21 f0       	breq	.+8      	; 0x14256 <SaveConfigParameter+0x27a>
   1424e:	75 01       	movw	r14, r10
   14250:	86 01       	movw	r16, r12
   14252:	99 24       	eor	r9, r9
   14254:	df cf       	rjmp	.-66     	; 0x14214 <SaveConfigParameter+0x238>
	 }
	return Result;
}
char Ord(char c){//Return Ordinal Numbers
     char Result=0;
	 if ((c>='0')&&(c<='9')){
   14256:	80 91 d5 0b 	lds	r24, 0x0BD5
   1425a:	80 53       	subi	r24, 0x30	; 48
   1425c:	8a 30       	cpi	r24, 0x0A	; 10
   1425e:	10 f0       	brcs	.+4      	; 0x14264 <SaveConfigParameter+0x288>
   14260:	60 e0       	ldi	r22, 0x00	; 0
   14262:	03 c0       	rjmp	.+6      	; 0x1426a <SaveConfigParameter+0x28e>
   14264:	68 2f       	mov	r22, r24
   14266:	81 11       	cpse	r24, r1
   14268:	61 e0       	ldi	r22, 0x01	; 1
	 //PrintNoMoney
	 StrPos=(40*10)+(12*6)+(5*6)+(2*8)+(6*8);
	 xEEPROM=Ord(CharPosCopy(rcv_trans,StrPos));
	 if (xEEPROM==0)xEEPROM=False;
	 else xEEPROM=True;
	 eeprom_write_byte(&DefPrintMoney,xEEPROM);
   1426a:	82 ec       	ldi	r24, 0xC2	; 194
   1426c:	93 e0       	ldi	r25, 0x03	; 3
   1426e:	0e 94 3d ad 	call	0x15a7a	; 0x15a7a <__eewr_byte_m128>
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
   14272:	80 91 d6 0b 	lds	r24, 0x0BD6
   14276:	8d 8b       	std	Y+21, r24	; 0x15
   14278:	80 91 d7 0b 	lds	r24, 0x0BD7
   1427c:	8e 8b       	std	Y+22, r24	; 0x16
	 }Dest[Length]=0;
   1427e:	1f 8a       	std	Y+23, r1	; 0x17

	 //TermID
	 StrPos=(40*10)+(12*6)+(5*6)+(2*8)+(6*8)+1;
     FillChar(strEEPROM,0,sizeof(strEEPROM));   
	 StrPosCopy(rcv_trans,strEEPROM,StrPos,2);
	 RemZeroLead(strEEPROM);
   14280:	25 e1       	ldi	r18, 0x15	; 21
   14282:	e2 2e       	mov	r14, r18
   14284:	f1 2c       	mov	r15, r1
   14286:	ec 0e       	add	r14, r28
   14288:	fd 1e       	adc	r15, r29
   1428a:	c7 01       	movw	r24, r14
   1428c:	0e 94 3f 25 	call	0x4a7e	; 0x4a7e <RemZeroLead>
	 xEEPROM=atoi(strEEPROM);
   14290:	c7 01       	movw	r24, r14
   14292:	0e 94 ae aa 	call	0x1555c	; 0x1555c <atoi>
   14296:	d8 2e       	mov	r13, r24
	 eeprom_write_byte(&DefIFT_ID,xEEPROM);
   14298:	80 e0       	ldi	r24, 0x00	; 0
   1429a:	90 e0       	ldi	r25, 0x00	; 0
   1429c:	6d 2d       	mov	r22, r13
   1429e:	0e 94 3d ad 	call	0x15a7a	; 0x15a7a <__eewr_byte_m128>
	 sprintf_P(strSend,PSTR("%d"),xEEPROM);
   142a2:	00 d0       	rcall	.+0      	; 0x142a4 <SaveConfigParameter+0x2c8>
   142a4:	00 d0       	rcall	.+0      	; 0x142a6 <SaveConfigParameter+0x2ca>
   142a6:	00 d0       	rcall	.+0      	; 0x142a8 <SaveConfigParameter+0x2cc>
   142a8:	ed b7       	in	r30, 0x3d	; 61
   142aa:	fe b7       	in	r31, 0x3e	; 62
   142ac:	31 96       	adiw	r30, 0x01	; 1
   142ae:	8e 01       	movw	r16, r28
   142b0:	0f 5f       	subi	r16, 0xFF	; 255
   142b2:	1f 4f       	sbci	r17, 0xFF	; 255
   142b4:	ad b7       	in	r26, 0x3d	; 61
   142b6:	be b7       	in	r27, 0x3e	; 62
   142b8:	12 96       	adiw	r26, 0x02	; 2
   142ba:	1c 93       	st	X, r17
   142bc:	0e 93       	st	-X, r16
   142be:	11 97       	sbiw	r26, 0x01	; 1
   142c0:	80 ef       	ldi	r24, 0xF0	; 240
   142c2:	93 e2       	ldi	r25, 0x23	; 35
   142c4:	93 83       	std	Z+3, r25	; 0x03
   142c6:	82 83       	std	Z+2, r24	; 0x02
   142c8:	d4 82       	std	Z+4, r13	; 0x04
   142ca:	15 82       	std	Z+5, r1	; 0x05
   142cc:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
   142d0:	98 ed       	ldi	r25, 0xD8	; 216
   142d2:	c9 2e       	mov	r12, r25
   142d4:	9b e0       	ldi	r25, 0x0B	; 11
   142d6:	d9 2e       	mov	r13, r25
   142d8:	8e e4       	ldi	r24, 0x4E	; 78
   142da:	a8 2e       	mov	r10, r24
   142dc:	80 e0       	ldi	r24, 0x00	; 0
   142de:	b8 2e       	mov	r11, r24
   142e0:	ed b7       	in	r30, 0x3d	; 61
   142e2:	fe b7       	in	r31, 0x3e	; 62
   142e4:	36 96       	adiw	r30, 0x06	; 6
   142e6:	0f b6       	in	r0, 0x3f	; 63
   142e8:	f8 94       	cli
   142ea:	fe bf       	out	0x3e, r31	; 62
   142ec:	0f be       	out	0x3f, r0	; 63
   142ee:	ed bf       	out	0x3d, r30	; 61
	 //PumpLabel
	 StrPos=(40*10)+(12*6)+(5*6)+(2*8)+(6*8)+1+2;
	 for(i=0;i<8;i++){
         FillChar(strEEPROM,0,sizeof(strEEPROM));   
		 StrPosCopy(rcv_trans,strEEPROM,(StrPos+(2*i)),2);
		 RemZeroLead(strEEPROM);
   142f0:	9e 2c       	mov	r9, r14
   142f2:	ef 2c       	mov	r14, r15
		 xEEPROM=atoi(strEEPROM);
         eeprom_write_byte(&DefPumpLabel[i],xEEPROM);
		 sprintf_P(strSend,PSTR("%d"),xEEPROM);
   142f4:	f0 2e       	mov	r15, r16
   142f6:	01 2f       	mov	r16, r17
   142f8:	1d ee       	ldi	r17, 0xED	; 237
   142fa:	61 2e       	mov	r6, r17
   142fc:	13 e2       	ldi	r17, 0x23	; 35
   142fe:	71 2e       	mov	r7, r17
}

void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
   14300:	d6 01       	movw	r26, r12
   14302:	8c 91       	ld	r24, X
   14304:	8d 8b       	std	Y+21, r24	; 0x15
   14306:	11 96       	adiw	r26, 0x01	; 1
   14308:	8c 91       	ld	r24, X
   1430a:	8e 8b       	std	Y+22, r24	; 0x16
	 }Dest[Length]=0;
   1430c:	1f 8a       	std	Y+23, r1	; 0x17
	 //PumpLabel
	 StrPos=(40*10)+(12*6)+(5*6)+(2*8)+(6*8)+1+2;
	 for(i=0;i<8;i++){
         FillChar(strEEPROM,0,sizeof(strEEPROM));   
		 StrPosCopy(rcv_trans,strEEPROM,(StrPos+(2*i)),2);
		 RemZeroLead(strEEPROM);
   1430e:	89 2d       	mov	r24, r9
   14310:	9e 2d       	mov	r25, r14
   14312:	0e 94 3f 25 	call	0x4a7e	; 0x4a7e <RemZeroLead>
		 xEEPROM=atoi(strEEPROM);
   14316:	89 2d       	mov	r24, r9
   14318:	9e 2d       	mov	r25, r14
   1431a:	0e 94 ae aa 	call	0x1555c	; 0x1555c <atoi>
   1431e:	18 2f       	mov	r17, r24
         eeprom_write_byte(&DefPumpLabel[i],xEEPROM);
   14320:	c5 01       	movw	r24, r10
   14322:	61 2f       	mov	r22, r17
   14324:	0e 94 3d ad 	call	0x15a7a	; 0x15a7a <__eewr_byte_m128>
		 sprintf_P(strSend,PSTR("%d"),xEEPROM);
   14328:	00 d0       	rcall	.+0      	; 0x1432a <SaveConfigParameter+0x34e>
   1432a:	00 d0       	rcall	.+0      	; 0x1432c <SaveConfigParameter+0x350>
   1432c:	00 d0       	rcall	.+0      	; 0x1432e <SaveConfigParameter+0x352>
   1432e:	ed b7       	in	r30, 0x3d	; 61
   14330:	fe b7       	in	r31, 0x3e	; 62
   14332:	31 96       	adiw	r30, 0x01	; 1
   14334:	ad b7       	in	r26, 0x3d	; 61
   14336:	be b7       	in	r27, 0x3e	; 62
   14338:	11 96       	adiw	r26, 0x01	; 1
   1433a:	fc 92       	st	X, r15
   1433c:	11 97       	sbiw	r26, 0x01	; 1
   1433e:	12 96       	adiw	r26, 0x02	; 2
   14340:	0c 93       	st	X, r16
   14342:	73 82       	std	Z+3, r7	; 0x03
   14344:	62 82       	std	Z+2, r6	; 0x02
   14346:	14 83       	std	Z+4, r17	; 0x04
   14348:	15 82       	std	Z+5, r1	; 0x05
   1434a:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
   1434e:	e2 e0       	ldi	r30, 0x02	; 2
   14350:	f0 e0       	ldi	r31, 0x00	; 0
   14352:	ce 0e       	add	r12, r30
   14354:	df 1e       	adc	r13, r31
   14356:	08 94       	sec
   14358:	a1 1c       	adc	r10, r1
   1435a:	b1 1c       	adc	r11, r1
	 sprintf_P(strSend,PSTR("%d"),xEEPROM);
//	 uart_print(1,1,strSend); 

	 //PumpLabel
	 StrPos=(40*10)+(12*6)+(5*6)+(2*8)+(6*8)+1+2;
	 for(i=0;i<8;i++){
   1435c:	8d b7       	in	r24, 0x3d	; 61
   1435e:	9e b7       	in	r25, 0x3e	; 62
   14360:	06 96       	adiw	r24, 0x06	; 6
   14362:	0f b6       	in	r0, 0x3f	; 63
   14364:	f8 94       	cli
   14366:	9e bf       	out	0x3e, r25	; 62
   14368:	0f be       	out	0x3f, r0	; 63
   1436a:	8d bf       	out	0x3d, r24	; 61
   1436c:	98 ee       	ldi	r25, 0xE8	; 232
   1436e:	c9 16       	cp	r12, r25
   14370:	9b e0       	ldi	r25, 0x0B	; 11
   14372:	d9 06       	cpc	r13, r25
   14374:	29 f6       	brne	.-118    	; 0x14300 <SaveConfigParameter+0x324>
		 xEEPROM=atoi(strEEPROM);
         eeprom_write_byte(&DefPumpLabel[i],xEEPROM);
		 sprintf_P(strSend,PSTR("%d"),xEEPROM);
//		 uart_print(1,1,strSend); 
	 }    
	 uart_printf(1,1,PSTR("<OK>")); 
   14376:	81 e0       	ldi	r24, 0x01	; 1
   14378:	61 e0       	ldi	r22, 0x01	; 1
   1437a:	48 ee       	ldi	r20, 0xE8	; 232
   1437c:	53 e2       	ldi	r21, 0x23	; 35
   1437e:	0e 94 02 a9 	call	0x15204	; 0x15204 <uart_printf>
}
   14382:	ca 5b       	subi	r28, 0xBA	; 186
   14384:	df 4f       	sbci	r29, 0xFF	; 255
   14386:	0f b6       	in	r0, 0x3f	; 63
   14388:	f8 94       	cli
   1438a:	de bf       	out	0x3e, r29	; 62
   1438c:	0f be       	out	0x3f, r0	; 63
   1438e:	cd bf       	out	0x3d, r28	; 61
   14390:	cf 91       	pop	r28
   14392:	df 91       	pop	r29
   14394:	1f 91       	pop	r17
   14396:	0f 91       	pop	r16
   14398:	ff 90       	pop	r15
   1439a:	ef 90       	pop	r14
   1439c:	df 90       	pop	r13
   1439e:	cf 90       	pop	r12
   143a0:	bf 90       	pop	r11
   143a2:	af 90       	pop	r10
   143a4:	9f 90       	pop	r9
   143a6:	8f 90       	pop	r8
   143a8:	7f 90       	pop	r7
   143aa:	6f 90       	pop	r6
   143ac:	08 95       	ret

000143ae <systemConfigProtocol>:



void systemConfigProtocol(){
     static char stConfigProtocol=cpWaitSend;
	 switch(stConfigProtocol){
   143ae:	80 91 a0 02 	lds	r24, 0x02A0
   143b2:	81 30       	cpi	r24, 0x01	; 1
   143b4:	c1 f0       	breq	.+48     	; 0x143e6 <systemConfigProtocol+0x38>
   143b6:	81 30       	cpi	r24, 0x01	; 1
   143b8:	18 f0       	brcs	.+6      	; 0x143c0 <systemConfigProtocol+0x12>
   143ba:	82 30       	cpi	r24, 0x02	; 2
   143bc:	e9 f4       	brne	.+58     	; 0x143f8 <systemConfigProtocol+0x4a>
   143be:	18 c0       	rjmp	.+48     	; 0x143f0 <systemConfigProtocol+0x42>
	 case cpWaitSend:
	      switch(ConfigCommand){
   143c0:	80 91 b0 01 	lds	r24, 0x01B0
   143c4:	81 30       	cpi	r24, 0x01	; 1
   143c6:	31 f0       	breq	.+12     	; 0x143d4 <systemConfigProtocol+0x26>
   143c8:	82 30       	cpi	r24, 0x02	; 2
   143ca:	51 f4       	brne	.+20     	; 0x143e0 <systemConfigProtocol+0x32>
		  case CC_SEND_CONFIG:
		       ConfigCommand=CC_NONE;
   143cc:	10 92 b0 01 	sts	0x01B0, r1
			   stConfigProtocol=cpSendingParameter;
   143d0:	81 e0       	ldi	r24, 0x01	; 1
   143d2:	03 c0       	rjmp	.+6      	; 0x143da <systemConfigProtocol+0x2c>
		       break;
		  case CC_SAVE_CONFIG:
		       ConfigCommand=CC_NONE;
   143d4:	10 92 b0 01 	sts	0x01B0, r1
			   stConfigProtocol=cpSavingParameter;
   143d8:	82 e0       	ldi	r24, 0x02	; 2
   143da:	80 93 a0 02 	sts	0x02A0, r24
   143de:	08 95       	ret
		       break;
          default:
		       ConfigCommand=CC_NONE;
   143e0:	10 92 b0 01 	sts	0x01B0, r1
   143e4:	08 95       	ret
		       break;
		  }
	      break;
     case cpSendingParameter:
	      SendConfigParamater();
   143e6:	0e 94 f0 9d 	call	0x13be0	; 0x13be0 <SendConfigParamater>
          stConfigProtocol=cpWaitSend;
   143ea:	10 92 a0 02 	sts	0x02A0, r1
   143ee:	08 95       	ret
	      break;
     case cpSavingParameter:
          SaveConfigParameter();
   143f0:	0e 94 ee 9f 	call	0x13fdc	; 0x13fdc <SaveConfigParameter>
          stConfigProtocol=cpWaitSend;
   143f4:	10 92 a0 02 	sts	0x02A0, r1
   143f8:	08 95       	ret

000143fa <FMenuIdle>:
	     ProcTimeOut++;
	}
	TimSend++;
}

void FMenuIdle(){
   143fa:	1f 93       	push	r17
	static char stMenuIdle=miInit,ButtonID=0;
	       char PrintStandaloneResult=PS_NONE;
	       char KeyPressed=0,KeyChar=0;
	       char lcdteks[20];

	switch(stMenuIdle){
   143fc:	80 91 ac 02 	lds	r24, 0x02AC
   14400:	e8 2f       	mov	r30, r24
   14402:	f0 e0       	ldi	r31, 0x00	; 0
   14404:	e9 31       	cpi	r30, 0x19	; 25
   14406:	f1 05       	cpc	r31, r1
   14408:	08 f0       	brcs	.+2      	; 0x1440c <FMenuIdle+0x12>
   1440a:	7e c1       	rjmp	.+764    	; 0x14708 <FMenuIdle+0x30e>
   1440c:	eb 5d       	subi	r30, 0xDB	; 219
   1440e:	fe 4f       	sbci	r31, 0xFE	; 254
   14410:	ee 0f       	add	r30, r30
   14412:	ff 1f       	adc	r31, r31
   14414:	05 90       	lpm	r0, Z+
   14416:	f4 91       	lpm	r31, Z+
   14418:	e0 2d       	mov	r30, r0
   1441a:	09 94       	ijmp
	case miInit:
         DisplayScreenIdle();
   1441c:	0e 94 26 49 	call	0x924c	; 0x924c <DisplayScreenIdle>
   14420:	3a c1       	rjmp	.+628    	; 0x14696 <FMenuIdle+0x29c>
		 stMenuIdle=miScan;		
	     break;
	case miScan:
         //Scan Key Pressed 
		 KeyPressed=_key_scan(1);
   14422:	81 e0       	ldi	r24, 0x01	; 1
   14424:	0e 94 58 a6 	call	0x14cb0	; 0x14cb0 <_key_scan>
   14428:	18 2f       	mov	r17, r24
		 KeyChar= _key_btn(KeyPressed);       
   1442a:	0e 94 b9 a5 	call	0x14b72	; 0x14b72 <_key_btn>

		 switch(KeyPressed){
   1442e:	1b 3b       	cpi	r17, 0xBB	; 187
   14430:	09 f4       	brne	.+2      	; 0x14434 <FMenuIdle+0x3a>
   14432:	7a c0       	rjmp	.+244    	; 0x14528 <FMenuIdle+0x12e>
   14434:	1c 3b       	cpi	r17, 0xBC	; 188
   14436:	70 f4       	brcc	.+28     	; 0x14454 <FMenuIdle+0x5a>
   14438:	1b 37       	cpi	r17, 0x7B	; 123
   1443a:	69 f1       	breq	.+90     	; 0x14496 <FMenuIdle+0x9c>
   1443c:	1c 37       	cpi	r17, 0x7C	; 124
   1443e:	20 f4       	brcc	.+8      	; 0x14448 <FMenuIdle+0x4e>
   14440:	17 37       	cpi	r17, 0x77	; 119
   14442:	09 f0       	breq	.+2      	; 0x14446 <FMenuIdle+0x4c>
   14444:	61 c1       	rjmp	.+706    	; 0x14708 <FMenuIdle+0x30e>
   14446:	2e c0       	rjmp	.+92     	; 0x144a4 <FMenuIdle+0xaa>
   14448:	1d 37       	cpi	r17, 0x7D	; 125
   1444a:	e9 f0       	breq	.+58     	; 0x14486 <FMenuIdle+0x8c>
   1444c:	1e 37       	cpi	r17, 0x7E	; 126
   1444e:	09 f0       	breq	.+2      	; 0x14452 <FMenuIdle+0x58>
   14450:	5b c1       	rjmp	.+694    	; 0x14708 <FMenuIdle+0x30e>
   14452:	12 c0       	rjmp	.+36     	; 0x14478 <FMenuIdle+0x7e>
   14454:	1d 3d       	cpi	r17, 0xDD	; 221
   14456:	09 f4       	brne	.+2      	; 0x1445a <FMenuIdle+0x60>
   14458:	4f c0       	rjmp	.+158    	; 0x144f8 <FMenuIdle+0xfe>
   1445a:	1e 3d       	cpi	r17, 0xDE	; 222
   1445c:	38 f4       	brcc	.+14     	; 0x1446c <FMenuIdle+0x72>
   1445e:	1d 3b       	cpi	r17, 0xBD	; 189
   14460:	09 f4       	brne	.+2      	; 0x14464 <FMenuIdle+0x6a>
   14462:	56 c0       	rjmp	.+172    	; 0x14510 <FMenuIdle+0x116>
   14464:	17 3d       	cpi	r17, 0xD7	; 215
   14466:	09 f0       	breq	.+2      	; 0x1446a <FMenuIdle+0x70>
   14468:	4f c1       	rjmp	.+670    	; 0x14708 <FMenuIdle+0x30e>
   1446a:	27 c0       	rjmp	.+78     	; 0x144ba <FMenuIdle+0xc0>
   1446c:	1e 3d       	cpi	r17, 0xDE	; 222
   1446e:	61 f1       	breq	.+88     	; 0x144c8 <FMenuIdle+0xce>
   14470:	1d 3e       	cpi	r17, 0xED	; 237
   14472:	09 f0       	breq	.+2      	; 0x14476 <FMenuIdle+0x7c>
   14474:	49 c1       	rjmp	.+658    	; 0x14708 <FMenuIdle+0x30e>
   14476:	34 c0       	rjmp	.+104    	; 0x144e0 <FMenuIdle+0xe6>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   14478:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   1447a:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   1447c:	92 e0       	ldi	r25, 0x02	; 2
   1447e:	90 93 bc 01 	sts	0x01BC, r25
         //Scan Key Pressed 
		 KeyPressed=_key_scan(1);
		 KeyChar= _key_btn(KeyPressed);       

		 switch(KeyPressed){
		 case _KEY_TIKET:system_beep(2);ButtonID=1;stMenuIdle=miDisplayProses;break;
   14482:	81 e0       	ldi	r24, 0x01	; 1
   14484:	15 c0       	rjmp	.+42     	; 0x144b0 <FMenuIdle+0xb6>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   14486:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   14488:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   1448a:	82 e0       	ldi	r24, 0x02	; 2
   1448c:	80 93 bc 01 	sts	0x01BC, r24
		 KeyPressed=_key_scan(1);
		 KeyChar= _key_btn(KeyPressed);       

		 switch(KeyPressed){
		 case _KEY_TIKET:system_beep(2);ButtonID=1;stMenuIdle=miDisplayProses;break;
		 case _KEY_MENU: system_beep(2);ButtonID=2;stMenuIdle=miDisplayProses;break;
   14490:	80 93 ab 02 	sts	0x02AB, r24
   14494:	37 c1       	rjmp	.+622    	; 0x14704 <FMenuIdle+0x30a>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   14496:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   14498:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   1449a:	92 e0       	ldi	r25, 0x02	; 2
   1449c:	90 93 bc 01 	sts	0x01BC, r25
		 KeyChar= _key_btn(KeyPressed);       

		 switch(KeyPressed){
		 case _KEY_TIKET:system_beep(2);ButtonID=1;stMenuIdle=miDisplayProses;break;
		 case _KEY_MENU: system_beep(2);ButtonID=2;stMenuIdle=miDisplayProses;break;
		 case _KEY_SHIFT:system_beep(2);ButtonID=3;stMenuIdle=miDisplayProses;break;
   144a0:	83 e0       	ldi	r24, 0x03	; 3
   144a2:	06 c0       	rjmp	.+12     	; 0x144b0 <FMenuIdle+0xb6>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   144a4:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   144a6:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   144a8:	92 e0       	ldi	r25, 0x02	; 2
   144aa:	90 93 bc 01 	sts	0x01BC, r25

		 switch(KeyPressed){
		 case _KEY_TIKET:system_beep(2);ButtonID=1;stMenuIdle=miDisplayProses;break;
		 case _KEY_MENU: system_beep(2);ButtonID=2;stMenuIdle=miDisplayProses;break;
		 case _KEY_SHIFT:system_beep(2);ButtonID=3;stMenuIdle=miDisplayProses;break;
		 case _KEY_CLEAR:system_beep(2);ButtonID=4;stMenuIdle=miDisplayProses;break;//stMenuIdle=miTestMsg56;break;//miDisplayProses;break;
   144ae:	84 e0       	ldi	r24, 0x04	; 4
   144b0:	80 93 ab 02 	sts	0x02AB, r24
   144b4:	90 93 ac 02 	sts	0x02AC, r25
   144b8:	27 c1       	rjmp	.+590    	; 0x14708 <FMenuIdle+0x30e>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   144ba:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   144bc:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   144be:	82 e0       	ldi	r24, 0x02	; 2
   144c0:	80 93 bc 01 	sts	0x01BC, r24
		 switch(KeyPressed){
		 case _KEY_TIKET:system_beep(2);ButtonID=1;stMenuIdle=miDisplayProses;break;
		 case _KEY_MENU: system_beep(2);ButtonID=2;stMenuIdle=miDisplayProses;break;
		 case _KEY_SHIFT:system_beep(2);ButtonID=3;stMenuIdle=miDisplayProses;break;
		 case _KEY_CLEAR:system_beep(2);ButtonID=4;stMenuIdle=miDisplayProses;break;//stMenuIdle=miTestMsg56;break;//miDisplayProses;break;
		 case _KEY_0:    system_beep(2);           stMenuIdle=miRunTicket;    break;
   144c4:	8c e0       	ldi	r24, 0x0C	; 12
   144c6:	1e c1       	rjmp	.+572    	; 0x14704 <FMenuIdle+0x30a>
	   //case _KEY_1:    system_beep(2);           stMenuIdle=miRunTotalizer; break;
		 case _KEY_2: if(IFType==IT_SLAVE) {system_beep(2); stMenuIdle=miRunEDC;}       break;
   144c8:	80 91 00 01 	lds	r24, 0x0100
   144cc:	81 30       	cpi	r24, 0x01	; 1
   144ce:	09 f0       	breq	.+2      	; 0x144d2 <FMenuIdle+0xd8>
   144d0:	1b c1       	rjmp	.+566    	; 0x14708 <FMenuIdle+0x30e>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   144d2:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   144d4:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   144d6:	82 e0       	ldi	r24, 0x02	; 2
   144d8:	80 93 bc 01 	sts	0x01BC, r24
		 case _KEY_MENU: system_beep(2);ButtonID=2;stMenuIdle=miDisplayProses;break;
		 case _KEY_SHIFT:system_beep(2);ButtonID=3;stMenuIdle=miDisplayProses;break;
		 case _KEY_CLEAR:system_beep(2);ButtonID=4;stMenuIdle=miDisplayProses;break;//stMenuIdle=miTestMsg56;break;//miDisplayProses;break;
		 case _KEY_0:    system_beep(2);           stMenuIdle=miRunTicket;    break;
	   //case _KEY_1:    system_beep(2);           stMenuIdle=miRunTotalizer; break;
		 case _KEY_2: if(IFType==IT_SLAVE) {system_beep(2); stMenuIdle=miRunEDC;}       break;
   144dc:	80 e1       	ldi	r24, 0x10	; 16
   144de:	12 c1       	rjmp	.+548    	; 0x14704 <FMenuIdle+0x30a>
	   //case _KEY_3:    system_beep(2);           stMenuIdle=miClearTotalizer;break;
		 case _KEY_4: if(IFType==IT_SLAVE) {system_beep(2);stMenuIdle=miRunReprint;}   break;
   144e0:	80 91 00 01 	lds	r24, 0x0100
   144e4:	81 30       	cpi	r24, 0x01	; 1
   144e6:	09 f0       	breq	.+2      	; 0x144ea <FMenuIdle+0xf0>
   144e8:	0f c1       	rjmp	.+542    	; 0x14708 <FMenuIdle+0x30e>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   144ea:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   144ec:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   144ee:	82 e0       	ldi	r24, 0x02	; 2
   144f0:	80 93 bc 01 	sts	0x01BC, r24
		 case _KEY_CLEAR:system_beep(2);ButtonID=4;stMenuIdle=miDisplayProses;break;//stMenuIdle=miTestMsg56;break;//miDisplayProses;break;
		 case _KEY_0:    system_beep(2);           stMenuIdle=miRunTicket;    break;
	   //case _KEY_1:    system_beep(2);           stMenuIdle=miRunTotalizer; break;
		 case _KEY_2: if(IFType==IT_SLAVE) {system_beep(2); stMenuIdle=miRunEDC;}       break;
	   //case _KEY_3:    system_beep(2);           stMenuIdle=miClearTotalizer;break;
		 case _KEY_4: if(IFType==IT_SLAVE) {system_beep(2);stMenuIdle=miRunReprint;}   break;
   144f4:	82 e1       	ldi	r24, 0x12	; 18
   144f6:	06 c1       	rjmp	.+524    	; 0x14704 <FMenuIdle+0x30a>
		 case _KEY_5: if(IFType==IT_SLAVE) {system_beep(2);stMenuIdle=miRunLoyalty;}   break;
   144f8:	80 91 00 01 	lds	r24, 0x0100
   144fc:	81 30       	cpi	r24, 0x01	; 1
   144fe:	09 f0       	breq	.+2      	; 0x14502 <FMenuIdle+0x108>
   14500:	03 c1       	rjmp	.+518    	; 0x14708 <FMenuIdle+0x30e>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   14502:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   14504:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   14506:	82 e0       	ldi	r24, 0x02	; 2
   14508:	80 93 bc 01 	sts	0x01BC, r24
		 case _KEY_0:    system_beep(2);           stMenuIdle=miRunTicket;    break;
	   //case _KEY_1:    system_beep(2);           stMenuIdle=miRunTotalizer; break;
		 case _KEY_2: if(IFType==IT_SLAVE) {system_beep(2); stMenuIdle=miRunEDC;}       break;
	   //case _KEY_3:    system_beep(2);           stMenuIdle=miClearTotalizer;break;
		 case _KEY_4: if(IFType==IT_SLAVE) {system_beep(2);stMenuIdle=miRunReprint;}   break;
		 case _KEY_5: if(IFType==IT_SLAVE) {system_beep(2);stMenuIdle=miRunLoyalty;}   break;
   1450c:	81 e1       	ldi	r24, 0x11	; 17
   1450e:	fa c0       	rjmp	.+500    	; 0x14704 <FMenuIdle+0x30a>
		 case _KEY_6: if(IFType==IT_SLAVE) {system_beep(2);stMenuIdle=miRunChangeMOP;} break;
   14510:	80 91 00 01 	lds	r24, 0x0100
   14514:	81 30       	cpi	r24, 0x01	; 1
   14516:	09 f0       	breq	.+2      	; 0x1451a <FMenuIdle+0x120>
   14518:	f7 c0       	rjmp	.+494    	; 0x14708 <FMenuIdle+0x30e>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   1451a:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   1451c:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   1451e:	82 e0       	ldi	r24, 0x02	; 2
   14520:	80 93 bc 01 	sts	0x01BC, r24
	   //case _KEY_1:    system_beep(2);           stMenuIdle=miRunTotalizer; break;
		 case _KEY_2: if(IFType==IT_SLAVE) {system_beep(2); stMenuIdle=miRunEDC;}       break;
	   //case _KEY_3:    system_beep(2);           stMenuIdle=miClearTotalizer;break;
		 case _KEY_4: if(IFType==IT_SLAVE) {system_beep(2);stMenuIdle=miRunReprint;}   break;
		 case _KEY_5: if(IFType==IT_SLAVE) {system_beep(2);stMenuIdle=miRunLoyalty;}   break;
		 case _KEY_6: if(IFType==IT_SLAVE) {system_beep(2);stMenuIdle=miRunChangeMOP;} break;
   14524:	8f e0       	ldi	r24, 0x0F	; 15
   14526:	ee c0       	rjmp	.+476    	; 0x14704 <FMenuIdle+0x30a>
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   14528:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   1452a:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   1452c:	82 e0       	ldi	r24, 0x02	; 2
   1452e:	80 93 bc 01 	sts	0x01BC, r24
	   //case _KEY_3:    system_beep(2);           stMenuIdle=miClearTotalizer;break;
		 case _KEY_4: if(IFType==IT_SLAVE) {system_beep(2);stMenuIdle=miRunReprint;}   break;
		 case _KEY_5: if(IFType==IT_SLAVE) {system_beep(2);stMenuIdle=miRunLoyalty;}   break;
		 case _KEY_6: if(IFType==IT_SLAVE) {system_beep(2);stMenuIdle=miRunChangeMOP;} break;
		 //case _KEY_8:    system_beep(2);           stMenuIdle=miRunTestChar;   break;
		 case _KEY_9:    system_beep(2);stMenuIdle=miRunAuth;      break;
   14532:	8d e0       	ldi	r24, 0x0D	; 13
   14534:	e7 c0       	rjmp	.+462    	; 0x14704 <FMenuIdle+0x30a>
		 }
	     break;
    case miTestMsg56:
	     sprintf_P(strCardID,PSTR("4356A31A"));
   14536:	00 d0       	rcall	.+0      	; 0x14538 <FMenuIdle+0x13e>
   14538:	00 d0       	rcall	.+0      	; 0x1453a <FMenuIdle+0x140>
   1453a:	8b e0       	ldi	r24, 0x0B	; 11
   1453c:	9c e0       	ldi	r25, 0x0C	; 12
   1453e:	ed b7       	in	r30, 0x3d	; 61
   14540:	fe b7       	in	r31, 0x3e	; 62
   14542:	92 83       	std	Z+2, r25	; 0x02
   14544:	81 83       	std	Z+1, r24	; 0x01
   14546:	87 e1       	ldi	r24, 0x17	; 23
   14548:	95 e2       	ldi	r25, 0x25	; 37
   1454a:	94 83       	std	Z+4, r25	; 0x04
   1454c:	83 83       	std	Z+3, r24	; 0x03
   1454e:	0e 94 e4 aa 	call	0x155c8	; 0x155c8 <sprintf_P>
	     sendMessage56();
   14552:	0f 90       	pop	r0
   14554:	0f 90       	pop	r0
   14556:	0f 90       	pop	r0
   14558:	0f 90       	pop	r0
   1455a:	0e 94 d1 7f 	call	0xffa2	; 0xffa2 <sendMessage56>
         stMenuIdle=miDisplayProses;
   1455e:	82 e0       	ldi	r24, 0x02	; 2
   14560:	d1 c0       	rjmp	.+418    	; 0x14704 <FMenuIdle+0x30a>
	     break;
	case miDisplayProses:
	     if (IsBusyIdlePrinting==False){
   14562:	80 91 b2 01 	lds	r24, 0x01B2
   14566:	88 23       	and	r24, r24
   14568:	09 f0       	breq	.+2      	; 0x1456c <FMenuIdle+0x172>
   1456a:	95 c0       	rjmp	.+298    	; 0x14696 <FMenuIdle+0x29c>
		     lcd_printf(3,1,PSTR("SedangProses"));
   1456c:	83 e0       	ldi	r24, 0x03	; 3
   1456e:	61 e0       	ldi	r22, 0x01	; 1
   14570:	4a e0       	ldi	r20, 0x0A	; 10
   14572:	55 e2       	ldi	r21, 0x25	; 37
   14574:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
	         TimDisplay=0;
   14578:	10 92 92 01 	sts	0x0192, r1
			 stMenuIdle=miWaitProses;
   1457c:	83 e0       	ldi	r24, 0x03	; 3
   1457e:	c2 c0       	rjmp	.+388    	; 0x14704 <FMenuIdle+0x30a>
         }else stMenuIdle=miScan;
	     break;
    case miWaitProses:
	     if (TimDisplay>1){
   14580:	80 91 92 01 	lds	r24, 0x0192
   14584:	82 30       	cpi	r24, 0x02	; 2
   14586:	08 f4       	brcc	.+2      	; 0x1458a <FMenuIdle+0x190>
   14588:	bf c0       	rjmp	.+382    	; 0x14708 <FMenuIdle+0x30e>
		     if (IFType==IT_SLAVE)stMenuIdle=miSendMessage98;
   1458a:	80 91 00 01 	lds	r24, 0x0100
   1458e:	81 30       	cpi	r24, 0x01	; 1
   14590:	11 f4       	brne	.+4      	; 0x14596 <FMenuIdle+0x19c>
   14592:	84 e0       	ldi	r24, 0x04	; 4
   14594:	b7 c0       	rjmp	.+366    	; 0x14704 <FMenuIdle+0x30a>
			 else
		     if (IFType==IT_STANDALONE)stMenuIdle=miPrintStandalone;
   14596:	82 30       	cpi	r24, 0x02	; 2
   14598:	09 f0       	breq	.+2      	; 0x1459c <FMenuIdle+0x1a2>
   1459a:	b6 c0       	rjmp	.+364    	; 0x14708 <FMenuIdle+0x30e>
   1459c:	87 e0       	ldi	r24, 0x07	; 7
   1459e:	b2 c0       	rjmp	.+356    	; 0x14704 <FMenuIdle+0x30a>
		 }
	     break;
    case miPrintStandalone:
	     PrintStandaloneResult=PrintStandalone(ButtonID,False);
   145a0:	80 91 ab 02 	lds	r24, 0x02AB
   145a4:	60 e0       	ldi	r22, 0x00	; 0
   145a6:	0e 94 2b 45 	call	0x8a56	; 0x8a56 <PrintStandalone>
	     if (PrintStandaloneResult==PS_PRINTED)stMenuIdle=miReady;
   145aa:	81 31       	cpi	r24, 0x11	; 17
   145ac:	09 f4       	brne	.+2      	; 0x145b0 <FMenuIdle+0x1b6>
   145ae:	a9 c0       	rjmp	.+338    	; 0x14702 <FMenuIdle+0x308>
		 else
		 if (PrintStandaloneResult==PS_NO_DATA)stMenuIdle=miDisplayNoTransaction;
   145b0:	82 31       	cpi	r24, 0x12	; 18
   145b2:	09 f0       	breq	.+2      	; 0x145b6 <FMenuIdle+0x1bc>
   145b4:	a9 c0       	rjmp	.+338    	; 0x14708 <FMenuIdle+0x30e>
   145b6:	88 e0       	ldi	r24, 0x08	; 8
   145b8:	a5 c0       	rjmp	.+330    	; 0x14704 <FMenuIdle+0x30a>
	     break;
    case miDisplayNoTransaction:
	     lcd_printf(3, 1,PSTR("Tidak Ada Transaksi "));
   145ba:	83 e0       	ldi	r24, 0x03	; 3
   145bc:	61 e0       	ldi	r22, 0x01	; 1
   145be:	45 ef       	ldi	r20, 0xF5	; 245
   145c0:	54 e2       	ldi	r21, 0x24	; 36
   145c2:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
         TimDisplay=0;
   145c6:	10 92 92 01 	sts	0x0192, r1
		 stMenuIdle=miWaitDisplayNoTransaction;
   145ca:	89 e0       	ldi	r24, 0x09	; 9
   145cc:	9b c0       	rjmp	.+310    	; 0x14704 <FMenuIdle+0x30a>
	     break;
    case miWaitDisplayNoTransaction:
	     if (TimDisplay>1){
   145ce:	80 91 92 01 	lds	r24, 0x0192
   145d2:	82 30       	cpi	r24, 0x02	; 2
   145d4:	08 f4       	brcc	.+2      	; 0x145d8 <FMenuIdle+0x1de>
   145d6:	98 c0       	rjmp	.+304    	; 0x14708 <FMenuIdle+0x30e>
	         lcd_printf(3,1,PSTR("Ready...            "));
   145d8:	83 e0       	ldi	r24, 0x03	; 3
   145da:	61 e0       	ldi	r22, 0x01	; 1
   145dc:	40 ee       	ldi	r20, 0xE0	; 224
   145de:	54 e2       	ldi	r21, 0x24	; 36
   145e0:	32 c0       	rjmp	.+100    	; 0x14646 <FMenuIdle+0x24c>
		     stMenuIdle=miWaitReady;
			 TimDisplay=0;
		 }
	     break;
    case miSendMessage98:
	     lcd_printf(3,1,PSTR("Please Wait..       "));
   145e2:	83 e0       	ldi	r24, 0x03	; 3
   145e4:	61 e0       	ldi	r22, 0x01	; 1
   145e6:	4b ec       	ldi	r20, 0xCB	; 203
   145e8:	54 e2       	ldi	r21, 0x24	; 36
   145ea:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
	     sendMessage98(ButtonID);
   145ee:	80 91 ab 02 	lds	r24, 0x02AB
   145f2:	0e 94 66 7d 	call	0xfacc	; 0xfacc <sendMessage98>
		 ProcTimeOut=0;
   145f6:	10 92 bb 01 	sts	0x01BB, r1
		 stMenuIdle=miWaitPlease;
   145fa:	85 e0       	ldi	r24, 0x05	; 5
   145fc:	83 c0       	rjmp	.+262    	; 0x14704 <FMenuIdle+0x30a>
	     break;
    case miWaitPlease:	     
         if (ProcTimeOut>TIM_NO_RESPONSE){
   145fe:	80 91 bb 01 	lds	r24, 0x01BB
   14602:	8f 30       	cpi	r24, 0x0F	; 15
   14604:	58 f0       	brcs	.+22     	; 0x1461c <FMenuIdle+0x222>
	         lcd_printf(3,1,PSTR("No Response..       "));
   14606:	83 e0       	ldi	r24, 0x03	; 3
   14608:	61 e0       	ldi	r22, 0x01	; 1
   1460a:	46 eb       	ldi	r20, 0xB6	; 182
   1460c:	54 e2       	ldi	r21, 0x24	; 36
   1460e:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		     stMenuIdle=miNoResponse;
   14612:	86 e0       	ldi	r24, 0x06	; 6
   14614:	80 93 ac 02 	sts	0x02AC, r24
			 TimDisplay=0;		 
   14618:	10 92 92 01 	sts	0x0192, r1
		 }
		 if ((IsMessage99==True)||(IsMessage00==True)){
   1461c:	80 91 9f 01 	lds	r24, 0x019F
   14620:	81 30       	cpi	r24, 0x01	; 1
   14622:	29 f0       	breq	.+10     	; 0x1462e <FMenuIdle+0x234>
   14624:	80 91 9e 01 	lds	r24, 0x019E
   14628:	81 30       	cpi	r24, 0x01	; 1
   1462a:	09 f0       	breq	.+2      	; 0x1462e <FMenuIdle+0x234>
   1462c:	6d c0       	rjmp	.+218    	; 0x14708 <FMenuIdle+0x30e>
		     ClearMem(strOdometer);
   1462e:	85 e4       	ldi	r24, 0x45	; 69
   14630:	94 e0       	ldi	r25, 0x04	; 4
   14632:	0e 94 53 a5 	call	0x14aa6	; 0x14aa6 <ClearMem>
		     ClearMem(strLicPlate);
   14636:	8c e7       	ldi	r24, 0x7C	; 124
   14638:	99 e0       	ldi	r25, 0x09	; 9
   1463a:	0e 94 53 a5 	call	0x14aa6	; 0x14aa6 <ClearMem>
	         lcd_printf(3,1,PSTR("Ready...            "));
   1463e:	83 e0       	ldi	r24, 0x03	; 3
   14640:	61 e0       	ldi	r22, 0x01	; 1
   14642:	41 ea       	ldi	r20, 0xA1	; 161
   14644:	54 e2       	ldi	r21, 0x24	; 36
   14646:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		     stMenuIdle=miWaitReady;
   1464a:	8a e0       	ldi	r24, 0x0A	; 10
   1464c:	80 93 ac 02 	sts	0x02AC, r24
			 TimDisplay=0;
   14650:	10 92 92 01 	sts	0x0192, r1
   14654:	59 c0       	rjmp	.+178    	; 0x14708 <FMenuIdle+0x30e>
			 }
	     break;
    case miNoResponse:
         if (TimDisplay>1){
   14656:	80 91 92 01 	lds	r24, 0x0192
   1465a:	82 30       	cpi	r24, 0x02	; 2
   1465c:	08 f4       	brcc	.+2      	; 0x14660 <FMenuIdle+0x266>
   1465e:	54 c0       	rjmp	.+168    	; 0x14708 <FMenuIdle+0x30e>
	         lcd_printf(3,1,PSTR("Ready...            "));
   14660:	83 e0       	ldi	r24, 0x03	; 3
   14662:	61 e0       	ldi	r22, 0x01	; 1
   14664:	4c e8       	ldi	r20, 0x8C	; 140
   14666:	54 e2       	ldi	r21, 0x24	; 36
   14668:	ee cf       	rjmp	.-36     	; 0x14646 <FMenuIdle+0x24c>
		     stMenuIdle=miWaitReady;
			 TimDisplay=0;
			 }	     
	     break;
    case miWaitReady:
         if (TimDisplay>1){
   1466a:	80 91 92 01 	lds	r24, 0x0192
   1466e:	82 30       	cpi	r24, 0x02	; 2
   14670:	08 f4       	brcc	.+2      	; 0x14674 <FMenuIdle+0x27a>
   14672:	4a c0       	rjmp	.+148    	; 0x14708 <FMenuIdle+0x30e>
	         lcd_printf(3,1,PSTR("                "));
   14674:	83 e0       	ldi	r24, 0x03	; 3
   14676:	61 e0       	ldi	r22, 0x01	; 1
   14678:	4b e7       	ldi	r20, 0x7B	; 123
   1467a:	54 e2       	ldi	r21, 0x24	; 36
   1467c:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		     stMenuIdle=miReady;
   14680:	8b e0       	ldi	r24, 0x0B	; 11
   14682:	e4 cf       	rjmp	.-56     	; 0x1464c <FMenuIdle+0x252>
			 TimDisplay=0;
			 }	     
	     break;
    case miReady:
	     DisplayScreenIdle();
   14684:	0e 94 26 49 	call	0x924c	; 0x924c <DisplayScreenIdle>
		 if (IFType==IT_STANDALONE)IsNewPumpStatus=True;
   14688:	80 91 00 01 	lds	r24, 0x0100
   1468c:	82 30       	cpi	r24, 0x02	; 2
   1468e:	19 f4       	brne	.+6      	; 0x14696 <FMenuIdle+0x29c>
   14690:	81 e0       	ldi	r24, 0x01	; 1
   14692:	80 93 01 01 	sts	0x0101, r24
		 stMenuIdle=miScan;
   14696:	81 e0       	ldi	r24, 0x01	; 1
   14698:	35 c0       	rjmp	.+106    	; 0x14704 <FMenuIdle+0x30a>
	     break;
	case miRunTicket://Slave,Standalone
		 if (FMenuTicket()==MENU_DONE)
   1469a:	0e 94 8d 7d 	call	0xfb1a	; 0xfb1a <FMenuTicket>
   1469e:	2f c0       	rjmp	.+94     	; 0x146fe <FMenuIdle+0x304>
		     stMenuIdle=miReady;
	     break;
	case miRunAuth://Slave,Standalone
		 if (FMenuAuthorization()==MENU_DONE)
   146a0:	0e 94 7a 8e 	call	0x11cf4	; 0x11cf4 <FMenuAuthorization>
   146a4:	2c c0       	rjmp	.+88     	; 0x146fe <FMenuIdle+0x304>
		     stMenuIdle=miReady;
	     break;
		 
    case miRunLocalAccount://Slave
		 if (FMenuLocalAccount()==MENU_DONE)
   146a6:	0e 94 d5 7f 	call	0xffaa	; 0xffaa <FMenuLocalAccount>
   146aa:	29 c0       	rjmp	.+82     	; 0x146fe <FMenuIdle+0x304>
		     stMenuIdle=miReady;
	     break;  
    case miRunChangeMOP://Slave
	     if (FMenuChangeMOP()==MENU_DONE)
   146ac:	0e 94 8e 88 	call	0x1111c	; 0x1111c <FMenuChangeMOP>
   146b0:	26 c0       	rjmp	.+76     	; 0x146fe <FMenuIdle+0x304>
		     stMenuIdle=miReady;
	     break;
    case miRunEDC://Slave
	     if (FMenuEDCTransaction()==MENU_DONE)
   146b2:	0e 94 e4 7e 	call	0xfdc8	; 0xfdc8 <FMenuEDCTransaction>
   146b6:	23 c0       	rjmp	.+70     	; 0x146fe <FMenuIdle+0x304>
		     stMenuIdle=miReady;
         break;
    case miRunLoyalty://Slave
	     if (FMenuLoyalty()==MENU_DONE)
   146b8:	0e 94 e4 8e 	call	0x11dc8	; 0x11dc8 <FMenuLoyalty>
   146bc:	20 c0       	rjmp	.+64     	; 0x146fe <FMenuIdle+0x304>
		     stMenuIdle=miReady;
	     break;
    case miRunReprint://Slave,Standalone
	     if (FMenuReprint()==MENU_DONE)
   146be:	0e 94 c6 8c 	call	0x1198c	; 0x1198c <FMenuReprint>
   146c2:	1d c0       	rjmp	.+58     	; 0x146fe <FMenuIdle+0x304>
		     stMenuIdle=miReady;
	     break;
    case miRunViewFreeMessage://Slave
	     if (FViewFreeMessage()==MENU_DONE)
   146c4:	0e 94 49 48 	call	0x9092	; 0x9092 <FViewFreeMessage>
   146c8:	1a c0       	rjmp	.+52     	; 0x146fe <FMenuIdle+0x304>
		     stMenuIdle=miReady;
	     break;
    case miClearTotalizer://Standalone
	     lcd_printf(3,1,PSTR("Clear Data Totalizer"));
   146ca:	83 e0       	ldi	r24, 0x03	; 3
   146cc:	61 e0       	ldi	r22, 0x01	; 1
   146ce:	46 e6       	ldi	r20, 0x66	; 102
   146d0:	54 e2       	ldi	r21, 0x24	; 36
   146d2:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
	     ResetTotalizer(TOTALIZER_LAST);
   146d6:	80 e0       	ldi	r24, 0x00	; 0
   146d8:	0e 94 04 29 	call	0x5208	; 0x5208 <ResetTotalizer>
         ResetTotalizer(TOTALIZER_NOW);
   146dc:	81 e0       	ldi	r24, 0x01	; 1
   146de:	0e 94 04 29 	call	0x5208	; 0x5208 <ResetTotalizer>
   146e2:	0f c0       	rjmp	.+30     	; 0x14702 <FMenuIdle+0x308>
         stMenuIdle=miReady;	      
	     break;
    case miRunTotalizer://Standalone
	     lcd_printf(3,1,PSTR("TotalizerAll     "));
   146e4:	83 e0       	ldi	r24, 0x03	; 3
   146e6:	61 e0       	ldi	r22, 0x01	; 1
   146e8:	44 e5       	ldi	r20, 0x54	; 84
   146ea:	54 e2       	ldi	r21, 0x24	; 36
   146ec:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
	     SendSlaveCommand(SC_TOTALIZER,PUMP_ALL);
   146f0:	85 e0       	ldi	r24, 0x05	; 5
   146f2:	62 e1       	ldi	r22, 0x12	; 18
   146f4:	0e 94 0a 60 	call	0xc014	; 0xc014 <SendSlaveCommand>
   146f8:	04 c0       	rjmp	.+8      	; 0x14702 <FMenuIdle+0x308>
		 stMenuIdle=miReady;	      
	     break;
    case miRunTestChar:	     
 	     if (FTestChar()==MENU_DONE)
   146fa:	0e 94 83 48 	call	0x9106	; 0x9106 <FTestChar>
   146fe:	81 30       	cpi	r24, 0x01	; 1
   14700:	19 f4       	brne	.+6      	; 0x14708 <FMenuIdle+0x30e>
         stMenuIdle=miReady;
   14702:	8b e0       	ldi	r24, 0x0B	; 11
   14704:	80 93 ac 02 	sts	0x02AC, r24
	     break;
	}
//----------SYSTEM_PROC--------------------------------

        //Bank InfoUpdated
        if (IsMessage21==True){
   14708:	80 91 a1 01 	lds	r24, 0x01A1
   1470c:	81 30       	cpi	r24, 0x01	; 1
   1470e:	21 f4       	brne	.+8      	; 0x14718 <FMenuIdle+0x31e>
		    IsMessage21=False;
   14710:	10 92 a1 01 	sts	0x01A1, r1
			procMessage21();
   14714:	0e 94 96 1b 	call	0x372c	; 0x372c <procMessage21>

        }
        //Transaction Status
        if (IsMessage00==True){
   14718:	80 91 9e 01 	lds	r24, 0x019E
   1471c:	81 30       	cpi	r24, 0x01	; 1
   1471e:	91 f4       	brne	.+36     	; 0x14744 <FMenuIdle+0x34a>
		    IsMessage00=False;
   14720:	10 92 9e 01 	sts	0x019E, r1
*/
char procMessage00(){
     char Result,strSend[10];
	 Result=MSG00_NACK;
	 //Message57
	 if((rcv_trans[0]==0x01)&&(transLength==MSG00_LENGTH)){
   14724:	20 91 9f 09 	lds	r18, 0x099F
   14728:	21 30       	cpi	r18, 0x01	; 1
   1472a:	61 f4       	brne	.+24     	; 0x14744 <FMenuIdle+0x34a>
   1472c:	80 91 8b 01 	lds	r24, 0x018B
   14730:	90 91 8c 01 	lds	r25, 0x018C
   14734:	8f 97       	sbiw	r24, 0x2f	; 47
   14736:	31 f4       	brne	.+12     	; 0x14744 <FMenuIdle+0x34a>

        }
        //Transaction Status
        if (IsMessage00==True){
		    IsMessage00=False;
			if (procMessage00()==MSG00_NO_PRINT){
   14738:	80 91 c4 09 	lds	r24, 0x09C4
   1473c:	84 33       	cpi	r24, 0x34	; 52
   1473e:	11 f4       	brne	.+4      	; 0x14744 <FMenuIdle+0x34a>
			    IsNoTransaction=True;
   14740:	20 93 ab 01 	sts	0x01AB, r18
				}
		}
  
		//Send EDC Message Information;
		if (IsSendMessageEDC==True){
   14744:	80 91 97 01 	lds	r24, 0x0197
   14748:	81 30       	cpi	r24, 0x01	; 1
   1474a:	21 f4       	brne	.+8      	; 0x14754 <FMenuIdle+0x35a>
		    IsSendMessageEDC=False;
   1474c:	10 92 97 01 	sts	0x0197, r1
			SendEDCMessage();
   14750:	0e 94 85 5f 	call	0xbf0a	; 0xbf0a <SendEDCMessage>
		}
		if (IsEDCApproved==True){
   14754:	80 91 99 01 	lds	r24, 0x0199
   14758:	81 30       	cpi	r24, 0x01	; 1
   1475a:	21 f4       	brne	.+8      	; 0x14764 <FMenuIdle+0x36a>
		    IsEDCApproved=False;
   1475c:	10 92 99 01 	sts	0x0199, r1
            sendMessage92();
   14760:	0e 94 dc 7e 	call	0xfdb8	; 0xfdb8 <sendMessage92>
		}
		if (IsVoidTransaction==True){
   14764:	80 91 9b 01 	lds	r24, 0x019B
   14768:	81 30       	cpi	r24, 0x01	; 1
   1476a:	21 f4       	brne	.+8      	; 0x14774 <FMenuIdle+0x37a>
		    IsVoidTransaction=False;
   1476c:	10 92 9b 01 	sts	0x019B, r1
            sendMessage94();
   14770:	0e 94 d8 7e 	call	0xfdb0	; 0xfdb0 <sendMessage94>
		}


        //Message99 Detection 
        if (IsMessage99==True){
   14774:	10 91 9f 01 	lds	r17, 0x019F
   14778:	11 30       	cpi	r17, 0x01	; 1
   1477a:	31 f4       	brne	.+12     	; 0x14788 <FMenuIdle+0x38e>
	        IsMessage99=False;
   1477c:	10 92 9f 01 	sts	0x019F, r1
		    procMessage99();
   14780:	0e 94 0f 41 	call	0x821e	; 0x821e <procMessage99>
		    IsPrinting=True;
   14784:	10 93 ac 01 	sts	0x01AC, r17
		}
		//No Transaction
		if (IsNoTransaction==True){
   14788:	80 91 ab 01 	lds	r24, 0x01AB
   1478c:	81 30       	cpi	r24, 0x01	; 1
   1478e:	41 f4       	brne	.+16     	; 0x147a0 <FMenuIdle+0x3a6>
			IsNoTransaction=False;
   14790:	10 92 ab 01 	sts	0x01AB, r1
			lcd_printf(3, 1,PSTR("Tidak Ada Transaksi "));
   14794:	83 e0       	ldi	r24, 0x03	; 3
   14796:	61 e0       	ldi	r22, 0x01	; 1
   14798:	4f e3       	ldi	r20, 0x3F	; 63
   1479a:	54 e2       	ldi	r21, 0x24	; 36
   1479c:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
		}
        
		//Display Idle
		if (stMenuIdle==miScan){//||(stMenuIdle=miWaitPlease)){ 
   147a0:	80 91 ac 02 	lds	r24, 0x02AC
   147a4:	81 30       	cpi	r24, 0x01	; 1
   147a6:	11 f4       	brne	.+4      	; 0x147ac <FMenuIdle+0x3b2>
		    DisplayIdle();			
   147a8:	0e 94 1d 5e 	call	0xbc3a	; 0xbc3a <DisplayIdle>
			}        

        //Display FreeMessage
		if (stMenuIdle==miScan){ 
   147ac:	80 91 ac 02 	lds	r24, 0x02AC
   147b0:	81 30       	cpi	r24, 0x01	; 1
   147b2:	59 f4       	brne	.+22     	; 0x147ca <FMenuIdle+0x3d0>
		    if (IsMessage09==True){
   147b4:	80 91 a3 01 	lds	r24, 0x01A3
   147b8:	81 30       	cpi	r24, 0x01	; 1
   147ba:	39 f4       	brne	.+14     	; 0x147ca <FMenuIdle+0x3d0>
			    IsMessage09=False;
   147bc:	10 92 a3 01 	sts	0x01A3, r1
				procMessage09();
   147c0:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <procMessage09>
				stMenuIdle=miRunViewFreeMessage;
   147c4:	83 e1       	ldi	r24, 0x13	; 19
   147c6:	80 93 ac 02 	sts	0x02AC, r24
			   }
			}

        //LocalAccount Scanning
		if ((stMenuIdle==miScan)&&(IsRFIDDetected==True)){
   147ca:	80 91 ac 02 	lds	r24, 0x02AC
   147ce:	81 30       	cpi	r24, 0x01	; 1
   147d0:	71 f4       	brne	.+28     	; 0x147ee <FMenuIdle+0x3f4>
   147d2:	80 91 98 01 	lds	r24, 0x0198
   147d6:	81 30       	cpi	r24, 0x01	; 1
   147d8:	51 f4       	brne	.+20     	; 0x147ee <FMenuIdle+0x3f4>
		    IsRFIDDetected=False;
   147da:	10 92 98 01 	sts	0x0198, r1
	//uart(1,1,_spi(dataTX1)); //Testing SPI
}


void system_beep(unsigned int tBeep){
      DDRB= (DDRB|0b00100000);
   147de:	bd 9a       	sbi	0x17, 5	; 23
	 PORTB=(PORTB&0b11011111);
   147e0:	c5 98       	cbi	0x18, 5	; 24
	 TimBeep=tBeep;
   147e2:	82 e0       	ldi	r24, 0x02	; 2
   147e4:	80 93 bc 01 	sts	0x01BC, r24

        //LocalAccount Scanning
		if ((stMenuIdle==miScan)&&(IsRFIDDetected==True)){
		    IsRFIDDetected=False;
		    system_beep(2);           
			stMenuIdle=miRunLocalAccount;
   147e8:	8e e0       	ldi	r24, 0x0E	; 14
   147ea:	80 93 ac 02 	sts	0x02AC, r24
		}
        //Print Spooling
		if (IsMessage81==True){
   147ee:	10 91 a6 01 	lds	r17, 0x01A6
   147f2:	11 30       	cpi	r17, 0x01	; 1
   147f4:	41 f4       	brne	.+16     	; 0x14806 <FMenuIdle+0x40c>
		    IsMessage81=False;
   147f6:	10 92 a6 01 	sts	0x01A6, r1
			//Spooling HFCS 0000 : Header, Footer, Copy , Scrool [Copy:16x max]
			cmdPrint=procMessage81();
   147fa:	0e 94 a7 18 	call	0x314e	; 0x314e <procMessage81>
   147fe:	80 93 b5 01 	sts	0x01B5, r24
			IsFreePrinting=True;
   14802:	10 93 a8 01 	sts	0x01A8, r17
         }

    //SystemService
      systemGenerateReport();
   14806:	0e 94 7d 34 	call	0x68fa	; 0x68fa <systemGenerateReport>
      systemPrinting();
   1480a:	0e 94 eb 9d 	call	0x13bd6	; 0x13bd6 <systemPrinting>
	  systemEDC();
	  systemConfigProtocol();
   1480e:	0e 94 d7 a1 	call	0x143ae	; 0x143ae <systemConfigProtocol>
	  //systemGeniusProtocol(); //AKR-->Protocol disabled
}
   14812:	1f 91       	pop	r17
   14814:	08 95       	ret

00014816 <lcd_command>:
	lcd_command(0x0c);
	lcd_command(0x06);
}

void lcd_command(unsigned char __chr){
	_LCD_PORT = __chr & 0xF0;
   14816:	98 2f       	mov	r25, r24
   14818:	90 7f       	andi	r25, 0xF0	; 240
   1481a:	95 bb       	out	0x15, r25	; 21
	cbi(_LCD_PORT, _LCD_RS);
   1481c:	ab 98       	cbi	0x15, 3	; 21
	sbi(_LCD_PORT, _LCD_E);
   1481e:	a9 9a       	sbi	0x15, 1	; 21
   14820:	48 ee       	ldi	r20, 0xE8	; 232
   14822:	53 e0       	ldi	r21, 0x03	; 3
   14824:	fa 01       	movw	r30, r20
   14826:	31 97       	sbiw	r30, 0x01	; 1
   14828:	f1 f7       	brne	.-4      	; 0x14826 <lcd_command+0x10>
	_LCD_BUSY;
	cbi(_LCD_PORT, _LCD_E);
   1482a:	a9 98       	cbi	0x15, 1	; 21
   1482c:	fa 01       	movw	r30, r20
   1482e:	31 97       	sbiw	r30, 0x01	; 1
   14830:	f1 f7       	brne	.-4      	; 0x1482e <lcd_command+0x18>
	_LCD_BUSY;

	_LCD_PORT = (__chr & 0x0F) << 4;
   14832:	28 2f       	mov	r18, r24
   14834:	30 e0       	ldi	r19, 0x00	; 0
   14836:	94 e0       	ldi	r25, 0x04	; 4
   14838:	22 0f       	add	r18, r18
   1483a:	33 1f       	adc	r19, r19
   1483c:	9a 95       	dec	r25
   1483e:	e1 f7       	brne	.-8      	; 0x14838 <lcd_command+0x22>
   14840:	25 bb       	out	0x15, r18	; 21
	cbi(_LCD_PORT, _LCD_RS);
   14842:	ab 98       	cbi	0x15, 3	; 21
	sbi(_LCD_PORT, _LCD_E);
   14844:	a9 9a       	sbi	0x15, 1	; 21
   14846:	fa 01       	movw	r30, r20
   14848:	31 97       	sbiw	r30, 0x01	; 1
   1484a:	f1 f7       	brne	.-4      	; 0x14848 <lcd_command+0x32>
	_LCD_BUSY;
	cbi(_LCD_PORT, _LCD_E);
   1484c:	a9 98       	cbi	0x15, 1	; 21
   1484e:	fa 01       	movw	r30, r20
   14850:	31 97       	sbiw	r30, 0x01	; 1
   14852:	f1 f7       	brne	.-4      	; 0x14850 <lcd_command+0x3a>
	_LCD_BUSY;
	_LCD_BUSY;
	if (__chr==0x01) _delay_ms(50);
   14854:	fa 01       	movw	r30, r20
   14856:	31 97       	sbiw	r30, 0x01	; 1
   14858:	f1 f7       	brne	.-4      	; 0x14856 <lcd_command+0x40>
   1485a:	81 30       	cpi	r24, 0x01	; 1
   1485c:	21 f4       	brne	.+8      	; 0x14866 <lcd_command+0x50>
   1485e:	84 ed       	ldi	r24, 0xD4	; 212
   14860:	90 e3       	ldi	r25, 0x30	; 48
   14862:	01 97       	sbiw	r24, 0x01	; 1
   14864:	f1 f7       	brne	.-4      	; 0x14862 <lcd_command+0x4c>
   14866:	08 95       	ret

00014868 <lcd_init>:
   14868:	86 ea       	ldi	r24, 0xA6	; 166
   1486a:	9e e0       	ldi	r25, 0x0E	; 14
   1486c:	01 97       	sbiw	r24, 0x01	; 1
   1486e:	f1 f7       	brne	.-4      	; 0x1486c <lcd_init+0x4>

#define _LCD_BUSY	_delay_ms(4);

void lcd_init(void){
	_delay_ms(15);
	_LCD_PORT = 0x00;
   14870:	15 ba       	out	0x15, r1	; 21
	_LCD_DDR |= (1 << _LCD_D7) | (1 << _LCD_D6) | (1 << _LCD_D5) | (1 << _LCD_D4);
   14872:	84 b3       	in	r24, 0x14	; 20
   14874:	80 6f       	ori	r24, 0xF0	; 240
   14876:	84 bb       	out	0x14, r24	; 20
	_LCD_DDR |= (1 << _LCD_E) | (1 << _LCD_RW) | (1 << _LCD_RS);
   14878:	84 b3       	in	r24, 0x14	; 20
   1487a:	8e 60       	ori	r24, 0x0E	; 14
   1487c:	84 bb       	out	0x14, r24	; 20

	_LCD_PORT = 0x30;
   1487e:	20 e3       	ldi	r18, 0x30	; 48
   14880:	25 bb       	out	0x15, r18	; 21
	sbi(_LCD_PORT, _LCD_E);
   14882:	a9 9a       	sbi	0x15, 1	; 21
   14884:	88 ee       	ldi	r24, 0xE8	; 232
   14886:	93 e0       	ldi	r25, 0x03	; 3
   14888:	fc 01       	movw	r30, r24
   1488a:	31 97       	sbiw	r30, 0x01	; 1
   1488c:	f1 f7       	brne	.-4      	; 0x1488a <lcd_init+0x22>
	_LCD_BUSY;
	cbi(_LCD_PORT, _LCD_E);
   1488e:	a9 98       	cbi	0x15, 1	; 21
   14890:	fc 01       	movw	r30, r24
   14892:	31 97       	sbiw	r30, 0x01	; 1
   14894:	f1 f7       	brne	.-4      	; 0x14892 <lcd_init+0x2a>
	_LCD_BUSY;

	_LCD_PORT = 0x30;
   14896:	25 bb       	out	0x15, r18	; 21
	sbi(_LCD_PORT, _LCD_E);
   14898:	a9 9a       	sbi	0x15, 1	; 21
   1489a:	fc 01       	movw	r30, r24
   1489c:	31 97       	sbiw	r30, 0x01	; 1
   1489e:	f1 f7       	brne	.-4      	; 0x1489c <lcd_init+0x34>
	_LCD_BUSY;
	cbi(_LCD_PORT, _LCD_E);
   148a0:	a9 98       	cbi	0x15, 1	; 21
   148a2:	fc 01       	movw	r30, r24
   148a4:	31 97       	sbiw	r30, 0x01	; 1
   148a6:	f1 f7       	brne	.-4      	; 0x148a4 <lcd_init+0x3c>
	_LCD_BUSY;

	_LCD_PORT = 0x30;
   148a8:	25 bb       	out	0x15, r18	; 21
	sbi(_LCD_PORT, _LCD_E);
   148aa:	a9 9a       	sbi	0x15, 1	; 21
   148ac:	fc 01       	movw	r30, r24
   148ae:	31 97       	sbiw	r30, 0x01	; 1
   148b0:	f1 f7       	brne	.-4      	; 0x148ae <lcd_init+0x46>
	_LCD_BUSY;
	cbi(_LCD_PORT, _LCD_E);
   148b2:	a9 98       	cbi	0x15, 1	; 21
   148b4:	fc 01       	movw	r30, r24
   148b6:	31 97       	sbiw	r30, 0x01	; 1
   148b8:	f1 f7       	brne	.-4      	; 0x148b6 <lcd_init+0x4e>
	_LCD_BUSY;

	_LCD_PORT = 0x20;
   148ba:	20 e2       	ldi	r18, 0x20	; 32
   148bc:	25 bb       	out	0x15, r18	; 21
	sbi(_LCD_PORT, _LCD_E);
   148be:	a9 9a       	sbi	0x15, 1	; 21
   148c0:	fc 01       	movw	r30, r24
   148c2:	31 97       	sbiw	r30, 0x01	; 1
   148c4:	f1 f7       	brne	.-4      	; 0x148c2 <lcd_init+0x5a>
	_LCD_BUSY;
	cbi(_LCD_PORT, _LCD_E);
   148c6:	a9 98       	cbi	0x15, 1	; 21
   148c8:	01 97       	sbiw	r24, 0x01	; 1
   148ca:	f1 f7       	brne	.-4      	; 0x148c8 <lcd_init+0x60>
	_LCD_BUSY;

	_LIGHT_PORT = 0x01;
   148cc:	81 e0       	ldi	r24, 0x01	; 1
   148ce:	80 93 65 00 	sts	0x0065, r24
	_LIGHT_DDR |= (1 << _LIGHT_PIN);
   148d2:	e4 e6       	ldi	r30, 0x64	; 100
   148d4:	f0 e0       	ldi	r31, 0x00	; 0
   148d6:	80 81       	ld	r24, Z
   148d8:	82 60       	ori	r24, 0x02	; 2
   148da:	80 83       	st	Z, r24

	lcd_command(0x28);
   148dc:	88 e2       	ldi	r24, 0x28	; 40
   148de:	0e 94 0b a4 	call	0x14816	; 0x14816 <lcd_command>
	lcd_command(0x0c);
   148e2:	8c e0       	ldi	r24, 0x0C	; 12
   148e4:	0e 94 0b a4 	call	0x14816	; 0x14816 <lcd_command>
	lcd_command(0x06);
   148e8:	86 e0       	ldi	r24, 0x06	; 6
   148ea:	0e 94 0b a4 	call	0x14816	; 0x14816 <lcd_command>
}
   148ee:	08 95       	ret

000148f0 <_lcd>:
	if (__chr==0x01) _delay_ms(50);

}

void _lcd(unsigned char __chr){
	_LCD_PORT =((__chr & 0xF0));
   148f0:	28 2f       	mov	r18, r24
   148f2:	20 7f       	andi	r18, 0xF0	; 240
   148f4:	25 bb       	out	0x15, r18	; 21
	sbi(_LCD_PORT, _LCD_RS);
   148f6:	ab 9a       	sbi	0x15, 3	; 21
	sbi(_LCD_PORT, _LCD_E);
   148f8:	a9 9a       	sbi	0x15, 1	; 21
	cbi(_LCD_PORT, _LCD_E);
   148fa:	a9 98       	cbi	0x15, 1	; 21

	_LCD_PORT = (((__chr & 0x0F) << 4));
   148fc:	90 e0       	ldi	r25, 0x00	; 0
   148fe:	24 e0       	ldi	r18, 0x04	; 4
   14900:	88 0f       	add	r24, r24
   14902:	99 1f       	adc	r25, r25
   14904:	2a 95       	dec	r18
   14906:	e1 f7       	brne	.-8      	; 0x14900 <_lcd+0x10>
   14908:	85 bb       	out	0x15, r24	; 21
	sbi(_LCD_PORT, _LCD_RS);
   1490a:	ab 9a       	sbi	0x15, 3	; 21
	sbi(_LCD_PORT, _LCD_E);
   1490c:	a9 9a       	sbi	0x15, 1	; 21
	cbi(_LCD_PORT, _LCD_E);
   1490e:	a9 98       	cbi	0x15, 1	; 21
   14910:	88 ee       	ldi	r24, 0xE8	; 232
   14912:	93 e0       	ldi	r25, 0x03	; 3
   14914:	01 97       	sbiw	r24, 0x01	; 1
   14916:	f1 f7       	brne	.-4      	; 0x14914 <_lcd+0x24>
	_LCD_BUSY;
	_delay_ms(1);
}
   14918:	8a ef       	ldi	r24, 0xFA	; 250
   1491a:	90 e0       	ldi	r25, 0x00	; 0
   1491c:	01 97       	sbiw	r24, 0x01	; 1
   1491e:	f1 f7       	brne	.-4      	; 0x1491c <_lcd+0x2c>
   14920:	08 95       	ret

00014922 <lcd_string>:
     lcd_printf(2,1,PSTR("                    "));
     lcd_printf(3,1,PSTR("                    "));
     lcd_printf(4,1,PSTR("                    "));
}

void lcd_string(char *__string){
   14922:	cf 93       	push	r28
   14924:	df 93       	push	r29
   14926:	ec 01       	movw	r28, r24
   14928:	03 c0       	rjmp	.+6      	; 0x14930 <lcd_string+0xe>
	while(*__string)
		_lcd(*__string++);
   1492a:	21 96       	adiw	r28, 0x01	; 1
   1492c:	0e 94 78 a4 	call	0x148f0	; 0x148f0 <_lcd>
     lcd_printf(3,1,PSTR("                    "));
     lcd_printf(4,1,PSTR("                    "));
}

void lcd_string(char *__string){
	while(*__string)
   14930:	88 81       	ld	r24, Y
   14932:	88 23       	and	r24, r24
   14934:	d1 f7       	brne	.-12     	; 0x1492a <lcd_string+0x8>
		_lcd(*__string++);
}
   14936:	df 91       	pop	r29
   14938:	cf 91       	pop	r28
   1493a:	08 95       	ret

0001493c <lcd_xy>:

void lcd_xy(unsigned char __x, unsigned char __y){
	switch(__x){
   1493c:	82 30       	cpi	r24, 0x02	; 2
   1493e:	69 f0       	breq	.+26     	; 0x1495a <lcd_xy+0x1e>
   14940:	83 30       	cpi	r24, 0x03	; 3
   14942:	18 f4       	brcc	.+6      	; 0x1494a <lcd_xy+0xe>
   14944:	81 30       	cpi	r24, 0x01	; 1
   14946:	a9 f4       	brne	.+42     	; 0x14972 <lcd_xy+0x36>
   14948:	05 c0       	rjmp	.+10     	; 0x14954 <lcd_xy+0x18>
   1494a:	83 30       	cpi	r24, 0x03	; 3
   1494c:	49 f0       	breq	.+18     	; 0x14960 <lcd_xy+0x24>
   1494e:	84 30       	cpi	r24, 0x04	; 4
   14950:	81 f4       	brne	.+32     	; 0x14972 <lcd_xy+0x36>
   14952:	0b c0       	rjmp	.+22     	; 0x1496a <lcd_xy+0x2e>
		case 1:
			lcd_command(0x80 + __y - 1);
   14954:	86 2f       	mov	r24, r22
   14956:	81 58       	subi	r24, 0x81	; 129
   14958:	05 c0       	rjmp	.+10     	; 0x14964 <lcd_xy+0x28>
			break;
		case 2:
			lcd_command(0xC0 + __y - 1);
   1495a:	86 2f       	mov	r24, r22
   1495c:	81 54       	subi	r24, 0x41	; 65
   1495e:	02 c0       	rjmp	.+4      	; 0x14964 <lcd_xy+0x28>
			break;
		case 3:
			lcd_command(0x94 + __y - 1);
   14960:	86 2f       	mov	r24, r22
   14962:	8d 56       	subi	r24, 0x6D	; 109
   14964:	0e 94 0b a4 	call	0x14816	; 0x14816 <lcd_command>
   14968:	08 95       	ret
			break;
		case 4:
			lcd_command(0xD4 + __y - 1);
   1496a:	86 2f       	mov	r24, r22
   1496c:	8d 52       	subi	r24, 0x2D	; 45
   1496e:	0e 94 0b a4 	call	0x14816	; 0x14816 <lcd_command>
   14972:	08 95       	ret

00014974 <lcd_print>:
	 for (i=0;i<strlen(string);i++){
          string[i]=0;
	 }     
}

void lcd_print(unsigned char __x, unsigned char __y, char *__string){
   14974:	df 92       	push	r13
   14976:	ef 92       	push	r14
   14978:	ff 92       	push	r15
   1497a:	0f 93       	push	r16
   1497c:	1f 93       	push	r17
   1497e:	cf 93       	push	r28
   14980:	df 93       	push	r29
   14982:	06 2f       	mov	r16, r22
   14984:	d4 2e       	mov	r13, r20
   14986:	15 2f       	mov	r17, r21
    char yPos,iPos=0;//Modified by Iyan string [20] maks
	lcd_xy(__x, __y);
   14988:	0e 94 9e a4 	call	0x1493c	; 0x1493c <lcd_xy>
   1498c:	2d 2d       	mov	r18, r13
   1498e:	31 2f       	mov	r19, r17
   14990:	c9 01       	movw	r24, r18
   14992:	ec 01       	movw	r28, r24
	iPos=0;
	while((*__string)&&(iPos<=(20-__y))){
   14994:	34 e1       	ldi	r19, 0x14	; 20
   14996:	e3 2e       	mov	r14, r19
   14998:	f1 2c       	mov	r15, r1
   1499a:	e0 1a       	sub	r14, r16
   1499c:	f1 08       	sbc	r15, r1
   1499e:	04 c0       	rjmp	.+8      	; 0x149a8 <lcd_print+0x34>
		_lcd(*__string);__string++;
   149a0:	82 2f       	mov	r24, r18
   149a2:	0e 94 78 a4 	call	0x148f0	; 0x148f0 <_lcd>
   149a6:	21 96       	adiw	r28, 0x01	; 1
   149a8:	9e 01       	movw	r18, r28
   149aa:	2d 19       	sub	r18, r13
   149ac:	82 2f       	mov	r24, r18

void lcd_print(unsigned char __x, unsigned char __y, char *__string){
    char yPos,iPos=0;//Modified by Iyan string [20] maks
	lcd_xy(__x, __y);
	iPos=0;
	while((*__string)&&(iPos<=(20-__y))){
   149ae:	28 81       	ld	r18, Y
   149b0:	22 23       	and	r18, r18
   149b2:	21 f0       	breq	.+8      	; 0x149bc <lcd_print+0x48>
   149b4:	90 e0       	ldi	r25, 0x00	; 0
   149b6:	e8 16       	cp	r14, r24
   149b8:	f9 06       	cpc	r15, r25
   149ba:	94 f7       	brge	.-28     	; 0x149a0 <lcd_print+0x2c>
		_lcd(*__string);__string++;
		iPos++;
		}    
}
   149bc:	df 91       	pop	r29
   149be:	cf 91       	pop	r28
   149c0:	1f 91       	pop	r17
   149c2:	0f 91       	pop	r16
   149c4:	ff 90       	pop	r15
   149c6:	ef 90       	pop	r14
   149c8:	df 90       	pop	r13
   149ca:	08 95       	ret

000149cc <lcd_printf>:

void lcd_printf(unsigned char __x, unsigned char __y, char *__string){
   149cc:	df 92       	push	r13
   149ce:	ef 92       	push	r14
   149d0:	ff 92       	push	r15
   149d2:	0f 93       	push	r16
   149d4:	1f 93       	push	r17
   149d6:	cf 93       	push	r28
   149d8:	df 93       	push	r29
   149da:	06 2f       	mov	r16, r22
   149dc:	d4 2e       	mov	r13, r20
   149de:	15 2f       	mov	r17, r21
    char iPos=0;
	lcd_xy(__x, __y);
   149e0:	0e 94 9e a4 	call	0x1493c	; 0x1493c <lcd_xy>
   149e4:	8d 2d       	mov	r24, r13
   149e6:	91 2f       	mov	r25, r17
   149e8:	fc 01       	movw	r30, r24
   149ea:	ef 01       	movw	r28, r30
	iPos=0;
	while((pgm_read_byte(&(*__string)))&&(iPos<=(20-__y))){
   149ec:	44 e1       	ldi	r20, 0x14	; 20
   149ee:	e4 2e       	mov	r14, r20
   149f0:	f1 2c       	mov	r15, r1
   149f2:	e0 1a       	sub	r14, r16
   149f4:	f1 08       	sbc	r15, r1
   149f6:	04 c0       	rjmp	.+8      	; 0x14a00 <lcd_printf+0x34>
		_lcd(pgm_read_byte(&(*__string)));
   149f8:	82 2f       	mov	r24, r18
   149fa:	0e 94 78 a4 	call	0x148f0	; 0x148f0 <_lcd>
		__string++;
   149fe:	21 96       	adiw	r28, 0x01	; 1
   14a00:	9e 01       	movw	r18, r28
   14a02:	2d 19       	sub	r18, r13
   14a04:	82 2f       	mov	r24, r18

void lcd_printf(unsigned char __x, unsigned char __y, char *__string){
    char iPos=0;
	lcd_xy(__x, __y);
	iPos=0;
	while((pgm_read_byte(&(*__string)))&&(iPos<=(20-__y))){
   14a06:	fe 01       	movw	r30, r28
   14a08:	24 91       	lpm	r18, Z+
   14a0a:	22 23       	and	r18, r18
   14a0c:	21 f0       	breq	.+8      	; 0x14a16 <lcd_printf+0x4a>
   14a0e:	90 e0       	ldi	r25, 0x00	; 0
   14a10:	e8 16       	cp	r14, r24
   14a12:	f9 06       	cpc	r15, r25
   14a14:	8c f7       	brge	.-30     	; 0x149f8 <lcd_printf+0x2c>
		_lcd(pgm_read_byte(&(*__string)));
		__string++;
		iPos++;
		}
}
   14a16:	df 91       	pop	r29
   14a18:	cf 91       	pop	r28
   14a1a:	1f 91       	pop	r17
   14a1c:	0f 91       	pop	r16
   14a1e:	ff 90       	pop	r15
   14a20:	ef 90       	pop	r14
   14a22:	df 90       	pop	r13
   14a24:	08 95       	ret

00014a26 <lcd_clear>:
	_LCD_BUSY;
	_delay_ms(1);
}

void lcd_clear(){
     lcd_printf(1,1,PSTR("                    "));
   14a26:	81 e0       	ldi	r24, 0x01	; 1
   14a28:	61 e0       	ldi	r22, 0x01	; 1
   14a2a:	4f e5       	ldi	r20, 0x5F	; 95
   14a2c:	55 e2       	ldi	r21, 0x25	; 37
   14a2e:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
     lcd_printf(2,1,PSTR("                    "));
   14a32:	82 e0       	ldi	r24, 0x02	; 2
   14a34:	61 e0       	ldi	r22, 0x01	; 1
   14a36:	4a e4       	ldi	r20, 0x4A	; 74
   14a38:	55 e2       	ldi	r21, 0x25	; 37
   14a3a:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
     lcd_printf(3,1,PSTR("                    "));
   14a3e:	83 e0       	ldi	r24, 0x03	; 3
   14a40:	61 e0       	ldi	r22, 0x01	; 1
   14a42:	45 e3       	ldi	r20, 0x35	; 53
   14a44:	55 e2       	ldi	r21, 0x25	; 37
   14a46:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
     lcd_printf(4,1,PSTR("                    "));
   14a4a:	84 e0       	ldi	r24, 0x04	; 4
   14a4c:	61 e0       	ldi	r22, 0x01	; 1
   14a4e:	40 e2       	ldi	r20, 0x20	; 32
   14a50:	55 e2       	ldi	r21, 0x25	; 37
   14a52:	0e 94 e6 a4 	call	0x149cc	; 0x149cc <lcd_printf>
}
   14a56:	08 95       	ret

00014a58 <lcd_put>:
		__string++;
		iPos++;
		}
}

void lcd_put(unsigned char __x, unsigned char __y, unsigned char __chr){
   14a58:	1f 93       	push	r17
   14a5a:	14 2f       	mov	r17, r20
	lcd_xy(__x, __y);
   14a5c:	0e 94 9e a4 	call	0x1493c	; 0x1493c <lcd_xy>
	_lcd(__chr);
   14a60:	81 2f       	mov	r24, r17
   14a62:	0e 94 78 a4 	call	0x148f0	; 0x148f0 <_lcd>
}
   14a66:	1f 91       	pop	r17
   14a68:	08 95       	ret

00014a6a <lcd_cgram>:

void lcd_cgram(unsigned char location, char *ptr){
   14a6a:	0f 93       	push	r16
   14a6c:	1f 93       	push	r17
   14a6e:	cf 93       	push	r28
   14a70:	df 93       	push	r29
   14a72:	8b 01       	movw	r16, r22
	unsigned char i;
    if(location < 8){
   14a74:	88 30       	cpi	r24, 0x08	; 8
   14a76:	90 f4       	brcc	.+36     	; 0x14a9c <lcd_cgram+0x32>
		lcd_command(0x40 + (location * 8));
   14a78:	88 0f       	add	r24, r24
   14a7a:	88 0f       	add	r24, r24
   14a7c:	88 0f       	add	r24, r24
   14a7e:	80 5c       	subi	r24, 0xC0	; 192
   14a80:	0e 94 0b a4 	call	0x14816	; 0x14816 <lcd_command>
   14a84:	c0 e0       	ldi	r28, 0x00	; 0
   14a86:	d0 e0       	ldi	r29, 0x00	; 0
		for(i = 0; i < 8; i++)
			_lcd(ptr[i]);
   14a88:	f8 01       	movw	r30, r16
   14a8a:	ec 0f       	add	r30, r28
   14a8c:	fd 1f       	adc	r31, r29
   14a8e:	80 81       	ld	r24, Z
   14a90:	0e 94 78 a4 	call	0x148f0	; 0x148f0 <_lcd>
   14a94:	21 96       	adiw	r28, 0x01	; 1

void lcd_cgram(unsigned char location, char *ptr){
	unsigned char i;
    if(location < 8){
		lcd_command(0x40 + (location * 8));
		for(i = 0; i < 8; i++)
   14a96:	c8 30       	cpi	r28, 0x08	; 8
   14a98:	d1 05       	cpc	r29, r1
   14a9a:	b1 f7       	brne	.-20     	; 0x14a88 <lcd_cgram+0x1e>
			_lcd(ptr[i]);
	}
}
   14a9c:	df 91       	pop	r29
   14a9e:	cf 91       	pop	r28
   14aa0:	1f 91       	pop	r17
   14aa2:	0f 91       	pop	r16
   14aa4:	08 95       	ret

00014aa6 <ClearMem>:
			lcd_command(0xD4 + __y - 1);
			break;
	}
}

void ClearMem(char *string){
   14aa6:	cf 93       	push	r28
   14aa8:	df 93       	push	r29
   14aaa:	20 e0       	ldi	r18, 0x00	; 0
   14aac:	04 c0       	rjmp	.+8      	; 0x14ab6 <ClearMem+0x10>
     char i;
	 for (i=0;i<strlen(string);i++){
          string[i]=0;
   14aae:	c8 0f       	add	r28, r24
   14ab0:	d9 1f       	adc	r29, r25
   14ab2:	18 82       	st	Y, r1
	}
}

void ClearMem(char *string){
     char i;
	 for (i=0;i<strlen(string);i++){
   14ab4:	2f 5f       	subi	r18, 0xFF	; 255
   14ab6:	c2 2f       	mov	r28, r18
   14ab8:	d0 e0       	ldi	r29, 0x00	; 0
   14aba:	fc 01       	movw	r30, r24
   14abc:	01 90       	ld	r0, Z+
   14abe:	00 20       	and	r0, r0
   14ac0:	e9 f7       	brne	.-6      	; 0x14abc <ClearMem+0x16>
   14ac2:	31 97       	sbiw	r30, 0x01	; 1
   14ac4:	e8 1b       	sub	r30, r24
   14ac6:	f9 0b       	sbc	r31, r25
   14ac8:	ce 17       	cp	r28, r30
   14aca:	df 07       	cpc	r29, r31
   14acc:	80 f3       	brcs	.-32     	; 0x14aae <ClearMem+0x8>
          string[i]=0;
	 }     
}
   14ace:	df 91       	pop	r29
   14ad0:	cf 91       	pop	r28
   14ad2:	08 95       	ret

00014ad4 <_key_hit>:
													 {'7', 'P', 'Q', 'R', 'S', '\0'},
											         {'8', 'T', 'U', 'V', '\0'}, 
													 {'9', 'W', 'X', 'Y', 'Z', '\0'}}};
const unsigned char __maxchar[10] PROGMEM = {2, 4, 3, 3, 3, 3, 3, 4, 3, 4};

char _key_hit(void){
   14ad4:	df 93       	push	r29
   14ad6:	cf 93       	push	r28
   14ad8:	00 d0       	rcall	.+0      	; 0x14ada <_key_hit+0x6>
   14ada:	00 d0       	rcall	.+0      	; 0x14adc <_key_hit+0x8>
   14adc:	cd b7       	in	r28, 0x3d	; 61
   14ade:	de b7       	in	r29, 0x3e	; 62
	unsigned char	i, keyhit=0x00;
	unsigned char	outmap[4] = {0xef, 0xdf, 0xbf, 0x7f};
   14ae0:	8f ee       	ldi	r24, 0xEF	; 239
   14ae2:	89 83       	std	Y+1, r24	; 0x01
   14ae4:	8f ed       	ldi	r24, 0xDF	; 223
   14ae6:	8a 83       	std	Y+2, r24	; 0x02
   14ae8:	8f eb       	ldi	r24, 0xBF	; 191
   14aea:	8b 83       	std	Y+3, r24	; 0x03
   14aec:	8f e7       	ldi	r24, 0x7F	; 127
   14aee:	8c 83       	std	Y+4, r24	; 0x04
   14af0:	de 01       	movw	r26, r28
   14af2:	11 96       	adiw	r26, 0x01	; 1
   14af4:	2a ef       	ldi	r18, 0xFA	; 250
   14af6:	30 e0       	ldi	r19, 0x00	; 0

	for(i=0; i<4; i++){
   14af8:	ae 01       	movw	r20, r28
   14afa:	4b 5f       	subi	r20, 0xFB	; 251
   14afc:	5f 4f       	sbci	r21, 0xFF	; 255
   14afe:	c9 01       	movw	r24, r18
   14b00:	01 97       	sbiw	r24, 0x01	; 1
   14b02:	f1 f7       	brne	.-4      	; 0x14b00 <_key_hit+0x2c>
		_delay_ms(1);
		_KEY_PORT = outmap[i];
   14b04:	8c 91       	ld	r24, X
   14b06:	80 93 62 00 	sts	0x0062, r24
   14b0a:	f9 01       	movw	r30, r18
   14b0c:	31 97       	sbiw	r30, 0x01	; 1
   14b0e:	f1 f7       	brne	.-4      	; 0x14b0c <_key_hit+0x38>
		_delay_ms(1);
		keyhit = _KEY_MATRIX;
   14b10:	90 b1       	in	r25, 0x00	; 0
		if (keyhit!=outmap[i]) 
   14b12:	98 17       	cp	r25, r24
   14b14:	21 f4       	brne	.+8      	; 0x14b1e <_key_hit+0x4a>
		    break;
   14b16:	11 96       	adiw	r26, 0x01	; 1

char _key_hit(void){
	unsigned char	i, keyhit=0x00;
	unsigned char	outmap[4] = {0xef, 0xdf, 0xbf, 0x7f};

	for(i=0; i<4; i++){
   14b18:	a4 17       	cp	r26, r20
   14b1a:	b5 07       	cpc	r27, r21
   14b1c:	81 f7       	brne	.-32     	; 0x14afe <_key_hit+0x2a>
		keyhit = _KEY_MATRIX;
		if (keyhit!=outmap[i]) 
		    break;
	}
	return keyhit;
}
   14b1e:	89 2f       	mov	r24, r25
   14b20:	0f 90       	pop	r0
   14b22:	0f 90       	pop	r0
   14b24:	0f 90       	pop	r0
   14b26:	0f 90       	pop	r0
   14b28:	cf 91       	pop	r28
   14b2a:	df 91       	pop	r29
   14b2c:	08 95       	ret

00014b2e <_key_crr>:

char _key_crr(char __key){
	if(	__key != _KEY_1 && __key != _KEY_2 &&
   14b2e:	8e 3e       	cpi	r24, 0xEE	; 238
   14b30:	f9 f0       	breq	.+62     	; 0x14b70 <_key_crr+0x42>
   14b32:	8e 3d       	cpi	r24, 0xDE	; 222
   14b34:	e9 f0       	breq	.+58     	; 0x14b70 <_key_crr+0x42>
   14b36:	8e 3b       	cpi	r24, 0xBE	; 190
   14b38:	d9 f0       	breq	.+54     	; 0x14b70 <_key_crr+0x42>
   14b3a:	8d 3e       	cpi	r24, 0xED	; 237
   14b3c:	c9 f0       	breq	.+50     	; 0x14b70 <_key_crr+0x42>
   14b3e:	8d 3d       	cpi	r24, 0xDD	; 221
   14b40:	b9 f0       	breq	.+46     	; 0x14b70 <_key_crr+0x42>
   14b42:	8d 3b       	cpi	r24, 0xBD	; 189
   14b44:	a9 f0       	breq	.+42     	; 0x14b70 <_key_crr+0x42>
   14b46:	8b 3e       	cpi	r24, 0xEB	; 235
   14b48:	99 f0       	breq	.+38     	; 0x14b70 <_key_crr+0x42>
   14b4a:	8b 3d       	cpi	r24, 0xDB	; 219
   14b4c:	89 f0       	breq	.+34     	; 0x14b70 <_key_crr+0x42>
   14b4e:	8b 3b       	cpi	r24, 0xBB	; 187
   14b50:	79 f0       	breq	.+30     	; 0x14b70 <_key_crr+0x42>
   14b52:	87 3d       	cpi	r24, 0xD7	; 215
   14b54:	69 f0       	breq	.+26     	; 0x14b70 <_key_crr+0x42>
   14b56:	87 3e       	cpi	r24, 0xE7	; 231
   14b58:	59 f0       	breq	.+22     	; 0x14b70 <_key_crr+0x42>
   14b5a:	87 3b       	cpi	r24, 0xB7	; 183
   14b5c:	49 f0       	breq	.+18     	; 0x14b70 <_key_crr+0x42>
   14b5e:	8e 37       	cpi	r24, 0x7E	; 126
   14b60:	39 f0       	breq	.+14     	; 0x14b70 <_key_crr+0x42>
   14b62:	8d 37       	cpi	r24, 0x7D	; 125
   14b64:	29 f0       	breq	.+10     	; 0x14b70 <_key_crr+0x42>
   14b66:	8b 37       	cpi	r24, 0x7B	; 123
   14b68:	19 f0       	breq	.+6      	; 0x14b70 <_key_crr+0x42>
   14b6a:	87 37       	cpi	r24, 0x77	; 119
   14b6c:	09 f0       	breq	.+2      	; 0x14b70 <_key_crr+0x42>
   14b6e:	80 e0       	ldi	r24, 0x00	; 0
		__key != _KEY_CANCEL && __key != _KEY_ENTER &&
		__key != _KEY_TIKET && __key != _KEY_MENU &&
		__key != _KEY_SHIFT && __key != _KEY_CLEAR)
		return _KEY_NULL;
	return __key;
}
   14b70:	08 95       	ret

00014b72 <_key_btn>:

char _key_btn(char __key){
	char __keychar = 0;
	
	switch (__key){
   14b72:	8e 3b       	cpi	r24, 0xBE	; 190
   14b74:	91 f1       	breq	.+100    	; 0x14bda <_key_btn+0x68>
   14b76:	8f 3b       	cpi	r24, 0xBF	; 191
   14b78:	a8 f4       	brcc	.+42     	; 0x14ba4 <_key_btn+0x32>
   14b7a:	8e 37       	cpi	r24, 0x7E	; 126
   14b7c:	09 f4       	brne	.+2      	; 0x14b80 <_key_btn+0xe>
   14b7e:	41 c0       	rjmp	.+130    	; 0x14c02 <_key_btn+0x90>
   14b80:	8f 37       	cpi	r24, 0x7F	; 127
   14b82:	48 f4       	brcc	.+18     	; 0x14b96 <_key_btn+0x24>
   14b84:	8b 37       	cpi	r24, 0x7B	; 123
   14b86:	09 f4       	brne	.+2      	; 0x14b8a <_key_btn+0x18>
   14b88:	40 c0       	rjmp	.+128    	; 0x14c0a <_key_btn+0x98>
   14b8a:	8d 37       	cpi	r24, 0x7D	; 125
   14b8c:	e1 f1       	breq	.+120    	; 0x14c06 <_key_btn+0x94>
   14b8e:	87 37       	cpi	r24, 0x77	; 119
   14b90:	09 f0       	breq	.+2      	; 0x14b94 <_key_btn+0x22>
   14b92:	3f c0       	rjmp	.+126    	; 0x14c12 <_key_btn+0xa0>
   14b94:	3c c0       	rjmp	.+120    	; 0x14c0e <_key_btn+0x9c>
   14b96:	8b 3b       	cpi	r24, 0xBB	; 187
   14b98:	61 f1       	breq	.+88     	; 0x14bf2 <_key_btn+0x80>
   14b9a:	8d 3b       	cpi	r24, 0xBD	; 189
   14b9c:	21 f1       	breq	.+72     	; 0x14be6 <_key_btn+0x74>
   14b9e:	87 3b       	cpi	r24, 0xB7	; 183
   14ba0:	c1 f5       	brne	.+112    	; 0x14c12 <_key_btn+0xa0>
   14ba2:	2d c0       	rjmp	.+90     	; 0x14bfe <_key_btn+0x8c>
   14ba4:	8e 3d       	cpi	r24, 0xDE	; 222
   14ba6:	a9 f0       	breq	.+42     	; 0x14bd2 <_key_btn+0x60>
   14ba8:	8f 3d       	cpi	r24, 0xDF	; 223
   14baa:	38 f4       	brcc	.+14     	; 0x14bba <_key_btn+0x48>
   14bac:	8b 3d       	cpi	r24, 0xDB	; 219
   14bae:	f9 f0       	breq	.+62     	; 0x14bee <_key_btn+0x7c>
   14bb0:	8d 3d       	cpi	r24, 0xDD	; 221
   14bb2:	b9 f0       	breq	.+46     	; 0x14be2 <_key_btn+0x70>
   14bb4:	87 3d       	cpi	r24, 0xD7	; 215
   14bb6:	69 f5       	brne	.+90     	; 0x14c12 <_key_btn+0xa0>
   14bb8:	1e c0       	rjmp	.+60     	; 0x14bf6 <_key_btn+0x84>
   14bba:	8b 3e       	cpi	r24, 0xEB	; 235
   14bbc:	b1 f0       	breq	.+44     	; 0x14bea <_key_btn+0x78>
   14bbe:	8c 3e       	cpi	r24, 0xEC	; 236
   14bc0:	18 f4       	brcc	.+6      	; 0x14bc8 <_key_btn+0x56>
   14bc2:	87 3e       	cpi	r24, 0xE7	; 231
   14bc4:	31 f5       	brne	.+76     	; 0x14c12 <_key_btn+0xa0>
   14bc6:	19 c0       	rjmp	.+50     	; 0x14bfa <_key_btn+0x88>
   14bc8:	8d 3e       	cpi	r24, 0xED	; 237
   14bca:	49 f0       	breq	.+18     	; 0x14bde <_key_btn+0x6c>
   14bcc:	8e 3e       	cpi	r24, 0xEE	; 238
   14bce:	09 f5       	brne	.+66     	; 0x14c12 <_key_btn+0xa0>
   14bd0:	02 c0       	rjmp	.+4      	; 0x14bd6 <_key_btn+0x64>
   14bd2:	82 e3       	ldi	r24, 0x32	; 50
   14bd4:	08 95       	ret
   14bd6:	81 e3       	ldi	r24, 0x31	; 49
   14bd8:	08 95       	ret
   14bda:	83 e3       	ldi	r24, 0x33	; 51
   14bdc:	08 95       	ret
		case 0xDE:
			__keychar = 0x32; //2
			break;
		case 0xBE:
			__keychar = 0x33; //3
			break;
   14bde:	84 e3       	ldi	r24, 0x34	; 52
   14be0:	08 95       	ret
		case 0xED:
			__keychar = 0x34; //4
			break;
   14be2:	85 e3       	ldi	r24, 0x35	; 53
   14be4:	08 95       	ret
		case 0xDD:
			__keychar = 0x35; //5
			break;
   14be6:	86 e3       	ldi	r24, 0x36	; 54
   14be8:	08 95       	ret
		case 0xBD:
			__keychar = 0x36; //6
			break;
   14bea:	87 e3       	ldi	r24, 0x37	; 55
   14bec:	08 95       	ret
		case 0xEB:
			__keychar = 0x37; //7
			break;
   14bee:	88 e3       	ldi	r24, 0x38	; 56
   14bf0:	08 95       	ret
		case 0xDB:
			__keychar = 0x38; //8
			break;
   14bf2:	89 e3       	ldi	r24, 0x39	; 57
   14bf4:	08 95       	ret
		case 0xBB:
			__keychar = 0x39; //9
			break;
   14bf6:	80 e3       	ldi	r24, 0x30	; 48
   14bf8:	08 95       	ret
		case 0xD7:
			__keychar = 0x30; //0
			break;
   14bfa:	8a e2       	ldi	r24, 0x2A	; 42
   14bfc:	08 95       	ret
		case 0xE7:
			__keychar = 0x2a; //*
			break;
   14bfe:	83 e2       	ldi	r24, 0x23	; 35
   14c00:	08 95       	ret
		case 0xB7:
			__keychar = 0x23; //#
			break;
   14c02:	81 ef       	ldi	r24, 0xF1	; 241
   14c04:	08 95       	ret
		case 0x7E:
			__keychar = 0xF1; //Menu 1
			break;
   14c06:	82 ef       	ldi	r24, 0xF2	; 242
   14c08:	08 95       	ret
		case 0x7D:
			__keychar = 0xF2; //Menu 2
			break;
   14c0a:	83 ef       	ldi	r24, 0xF3	; 243
   14c0c:	08 95       	ret
		case 0x7B:
			__keychar = 0xF3; //Menu 3
			break;
   14c0e:	84 ef       	ldi	r24, 0xF4	; 244
   14c10:	08 95       	ret
		case 0x77:
			__keychar = 0xF4; //Menu 4
			break;
   14c12:	80 e0       	ldi	r24, 0x00	; 0
			__keychar = 0x00;
			break;

	}
	return __keychar;
}
   14c14:	08 95       	ret

00014c16 <_table_alphanum>:
	}
	_PAD_1st;
	return __key;
}

char _table_alphanum(char __caps, char __key, char __hit){
   14c16:	98 2f       	mov	r25, r24
unsigned char __retchar = 0;

	switch(__key){
   14c18:	6d 3d       	cpi	r22, 0xDD	; 221
   14c1a:	11 f1       	breq	.+68     	; 0x14c60 <_table_alphanum+0x4a>
   14c1c:	6e 3d       	cpi	r22, 0xDE	; 222
   14c1e:	60 f4       	brcc	.+24     	; 0x14c38 <_table_alphanum+0x22>
   14c20:	6d 3b       	cpi	r22, 0xBD	; 189
   14c22:	01 f1       	breq	.+64     	; 0x14c64 <_table_alphanum+0x4e>
   14c24:	6e 3b       	cpi	r22, 0xBE	; 190
   14c26:	18 f4       	brcc	.+6      	; 0x14c2e <_table_alphanum+0x18>
   14c28:	6b 3b       	cpi	r22, 0xBB	; 187
   14c2a:	21 f5       	brne	.+72     	; 0x14c74 <_table_alphanum+0x5e>
   14c2c:	21 c0       	rjmp	.+66     	; 0x14c70 <_table_alphanum+0x5a>
   14c2e:	6e 3b       	cpi	r22, 0xBE	; 190
   14c30:	99 f0       	breq	.+38     	; 0x14c58 <_table_alphanum+0x42>
   14c32:	6b 3d       	cpi	r22, 0xDB	; 219
   14c34:	f9 f4       	brne	.+62     	; 0x14c74 <_table_alphanum+0x5e>
   14c36:	1a c0       	rjmp	.+52     	; 0x14c6c <_table_alphanum+0x56>
   14c38:	6b 3e       	cpi	r22, 0xEB	; 235
   14c3a:	b1 f0       	breq	.+44     	; 0x14c68 <_table_alphanum+0x52>
   14c3c:	6c 3e       	cpi	r22, 0xEC	; 236
   14c3e:	18 f4       	brcc	.+6      	; 0x14c46 <_table_alphanum+0x30>
   14c40:	6e 3d       	cpi	r22, 0xDE	; 222
   14c42:	c1 f4       	brne	.+48     	; 0x14c74 <_table_alphanum+0x5e>
   14c44:	05 c0       	rjmp	.+10     	; 0x14c50 <_table_alphanum+0x3a>
   14c46:	6d 3e       	cpi	r22, 0xED	; 237
   14c48:	49 f0       	breq	.+18     	; 0x14c5c <_table_alphanum+0x46>
   14c4a:	6e 3e       	cpi	r22, 0xEE	; 238
   14c4c:	99 f4       	brne	.+38     	; 0x14c74 <_table_alphanum+0x5e>
   14c4e:	02 c0       	rjmp	.+4      	; 0x14c54 <_table_alphanum+0x3e>
   14c50:	82 e0       	ldi	r24, 0x02	; 2
   14c52:	11 c0       	rjmp	.+34     	; 0x14c76 <_table_alphanum+0x60>
   14c54:	81 e0       	ldi	r24, 0x01	; 1
   14c56:	0f c0       	rjmp	.+30     	; 0x14c76 <_table_alphanum+0x60>
   14c58:	83 e0       	ldi	r24, 0x03	; 3
   14c5a:	0d c0       	rjmp	.+26     	; 0x14c76 <_table_alphanum+0x60>
		case 0xDE:
			__key = 2; //2
			break;
		case 0xBE:
			__key = 3; //3
			break;
   14c5c:	84 e0       	ldi	r24, 0x04	; 4
   14c5e:	0b c0       	rjmp	.+22     	; 0x14c76 <_table_alphanum+0x60>
		case 0xED:
			__key = 4; //4
			break;
   14c60:	85 e0       	ldi	r24, 0x05	; 5
   14c62:	09 c0       	rjmp	.+18     	; 0x14c76 <_table_alphanum+0x60>
		case 0xDD:
			__key = 5; //5
			break;
   14c64:	86 e0       	ldi	r24, 0x06	; 6
   14c66:	07 c0       	rjmp	.+14     	; 0x14c76 <_table_alphanum+0x60>
		case 0xBD:
			__key = 6; //6
			break;
   14c68:	87 e0       	ldi	r24, 0x07	; 7
   14c6a:	05 c0       	rjmp	.+10     	; 0x14c76 <_table_alphanum+0x60>
		case 0xEB:
			__key = 7; //7
			break;
   14c6c:	88 e0       	ldi	r24, 0x08	; 8
   14c6e:	03 c0       	rjmp	.+6      	; 0x14c76 <_table_alphanum+0x60>
		case 0xDB:
			__key = 8; //8
			break;
   14c70:	89 e0       	ldi	r24, 0x09	; 9
   14c72:	01 c0       	rjmp	.+2      	; 0x14c76 <_table_alphanum+0x60>
		case 0xBB:
			__key = 9; //9
			break;
   14c74:	80 e0       	ldi	r24, 0x00	; 0
		default:
			__key = 0;
			break;	
	}

	if(__hit <= pgm_read_byte(&__maxchar[__key]))
   14c76:	28 2f       	mov	r18, r24
   14c78:	30 e0       	ldi	r19, 0x00	; 0
   14c7a:	f9 01       	movw	r30, r18
   14c7c:	e4 51       	subi	r30, 0x14	; 20
   14c7e:	fa 4d       	sbci	r31, 0xDA	; 218
   14c80:	e4 91       	lpm	r30, Z+
   14c82:	e4 17       	cp	r30, r20
   14c84:	10 f4       	brcc	.+4      	; 0x14c8a <_table_alphanum+0x74>
   14c86:	80 e0       	ldi	r24, 0x00	; 0
   14c88:	08 95       	ret
		__retchar = pgm_read_byte(&__alphanum[__caps][__key][__hit]);
   14c8a:	ec e3       	ldi	r30, 0x3C	; 60
   14c8c:	9e 9f       	mul	r25, r30
   14c8e:	f0 01       	movw	r30, r0
   14c90:	11 24       	eor	r1, r1
   14c92:	e4 0f       	add	r30, r20
   14c94:	f1 1d       	adc	r31, r1
   14c96:	c9 01       	movw	r24, r18
   14c98:	88 0f       	add	r24, r24
   14c9a:	99 1f       	adc	r25, r25
   14c9c:	82 0f       	add	r24, r18
   14c9e:	93 1f       	adc	r25, r19
   14ca0:	88 0f       	add	r24, r24
   14ca2:	99 1f       	adc	r25, r25
   14ca4:	e8 0f       	add	r30, r24
   14ca6:	f9 1f       	adc	r31, r25
   14ca8:	ec 58       	subi	r30, 0x8C	; 140
   14caa:	fa 4d       	sbci	r31, 0xDA	; 218
   14cac:	84 91       	lpm	r24, Z+
	else __retchar = '\0';

	return __retchar;
}
   14cae:	08 95       	ret

00014cb0 <_key_scan>:





char _key_scan(char __select){
   14cb0:	1f 93       	push	r17
   14cb2:	18 2f       	mov	r17, r24
	char	__key = 0;

	if(__select==_PAD_SINGLE || __select==_PAD_MULTI){
   14cb4:	81 50       	subi	r24, 0x01	; 1
   14cb6:	82 30       	cpi	r24, 0x02	; 2
   14cb8:	08 f0       	brcs	.+2      	; 0x14cbc <_key_scan+0xc>
   14cba:	64 c0       	rjmp	.+200    	; 0x14d84 <_key_scan+0xd4>
		__key = _key_hit();
   14cbc:	0e 94 6a a5 	call	0x14ad4	; 0x14ad4 <_key_hit>
		__key = _key_crr(__key);
   14cc0:	0e 94 97 a5 	call	0x14b2e	; 0x14b2e <_key_crr>
   14cc4:	28 2f       	mov	r18, r24

		if(__key!=_KEY_NULL){
   14cc6:	88 23       	and	r24, r24
   14cc8:	09 f4       	brne	.+2      	; 0x14ccc <_key_scan+0x1c>
   14cca:	5d c0       	rjmp	.+186    	; 0x14d86 <_key_scan+0xd6>
			_LIGHT_SET;
   14ccc:	91 e0       	ldi	r25, 0x01	; 1
   14cce:	90 93 ae 02 	sts	0x02AE, r25
   14cd2:	10 92 af 02 	sts	0x02AF, r1
   14cd6:	80 91 65 00 	lds	r24, 0x0065
   14cda:	8d 7f       	andi	r24, 0xFD	; 253
   14cdc:	80 93 65 00 	sts	0x0065, r24
			if(__sec_par)
   14ce0:	80 91 b9 02 	lds	r24, 0x02B9
   14ce4:	88 23       	and	r24, r24
   14ce6:	31 f0       	breq	.+12     	; 0x14cf4 <_key_scan+0x44>
				_SEC_ON;
   14ce8:	90 93 b4 02 	sts	0x02B4, r25
   14cec:	10 92 b6 02 	sts	0x02B6, r1
   14cf0:	10 92 b5 02 	sts	0x02B5, r1

			if(_IS1st){
   14cf4:	80 91 b0 02 	lds	r24, 0x02B0
   14cf8:	88 23       	and	r24, r24
   14cfa:	71 f4       	brne	.+28     	; 0x14d18 <_key_scan+0x68>
				if(	__key == _KEY_CANCEL || __key == _KEY_ENTER)
   14cfc:	27 3e       	cpi	r18, 0xE7	; 231
   14cfe:	11 f0       	breq	.+4      	; 0x14d04 <_key_scan+0x54>
   14d00:	27 3b       	cpi	r18, 0xB7	; 183
   14d02:	31 f4       	brne	.+12     	; 0x14d10 <_key_scan+0x60>
					if(__lock_num)
   14d04:	80 91 ad 02 	lds	r24, 0x02AD
   14d08:	88 23       	and	r24, r24
   14d0a:	11 f0       	breq	.+4      	; 0x14d10 <_key_scan+0x60>
						__lock_num = 0;
   14d0c:	10 92 ad 02 	sts	0x02AD, r1
				_PAD_2nd;
   14d10:	81 e0       	ldi	r24, 0x01	; 1
   14d12:	80 93 b0 02 	sts	0x02B0, r24
   14d16:	31 c0       	rjmp	.+98     	; 0x14d7a <_key_scan+0xca>
				_delay_ms(5);
				return __key;
			}
			if(_IS2nd){
   14d18:	81 30       	cpi	r24, 0x01	; 1
   14d1a:	a9 f5       	brne	.+106    	; 0x14d86 <_key_scan+0xd6>
				if(__select==_PAD_MULTI){
   14d1c:	12 30       	cpi	r17, 0x02	; 2
   14d1e:	21 f5       	brne	.+72     	; 0x14d68 <_key_scan+0xb8>
					if(	__key==_KEY_0 || __key==_KEY_1 || __key==_KEY_2 || __key==_KEY_3||
   14d20:	27 3d       	cpi	r18, 0xD7	; 215
   14d22:	91 f0       	breq	.+36     	; 0x14d48 <_key_scan+0x98>
   14d24:	2e 3e       	cpi	r18, 0xEE	; 238
   14d26:	81 f0       	breq	.+32     	; 0x14d48 <_key_scan+0x98>
   14d28:	2e 3d       	cpi	r18, 0xDE	; 222
   14d2a:	71 f0       	breq	.+28     	; 0x14d48 <_key_scan+0x98>
   14d2c:	2e 3b       	cpi	r18, 0xBE	; 190
   14d2e:	61 f0       	breq	.+24     	; 0x14d48 <_key_scan+0x98>
   14d30:	2d 3e       	cpi	r18, 0xED	; 237
   14d32:	51 f0       	breq	.+20     	; 0x14d48 <_key_scan+0x98>
   14d34:	2d 3d       	cpi	r18, 0xDD	; 221
   14d36:	41 f0       	breq	.+16     	; 0x14d48 <_key_scan+0x98>
   14d38:	2d 3b       	cpi	r18, 0xBD	; 189
   14d3a:	31 f0       	breq	.+12     	; 0x14d48 <_key_scan+0x98>
   14d3c:	2b 3e       	cpi	r18, 0xEB	; 235
   14d3e:	21 f0       	breq	.+8      	; 0x14d48 <_key_scan+0x98>
   14d40:	2b 3d       	cpi	r18, 0xDB	; 219
   14d42:	11 f0       	breq	.+4      	; 0x14d48 <_key_scan+0x98>
   14d44:	2b 3b       	cpi	r18, 0xBB	; 187
   14d46:	81 f4       	brne	.+32     	; 0x14d68 <_key_scan+0xb8>
						__key==_KEY_4 || __key==_KEY_5 || __key==_KEY_6 ||
						__key==_KEY_7 || __key==_KEY_8 || __key==_KEY_9){
						if(__lock_num){
   14d48:	80 91 ad 02 	lds	r24, 0x02AD
   14d4c:	88 23       	and	r24, r24
   14d4e:	49 f0       	breq	.+18     	; 0x14d62 <_key_scan+0xb2>
							_SHIFT_SET;
   14d50:	81 e0       	ldi	r24, 0x01	; 1
   14d52:	80 93 b1 02 	sts	0x02B1, r24
   14d56:	10 92 b2 02 	sts	0x02B2, r1
							CURSOR_HIDE;
   14d5a:	8c e0       	ldi	r24, 0x0C	; 12
   14d5c:	0e 94 0b a4 	call	0x14816	; 0x14816 <lcd_command>
   14d60:	03 c0       	rjmp	.+6      	; 0x14d68 <_key_scan+0xb8>
						}
						else
							__lock_num = 1;
   14d62:	81 e0       	ldi	r24, 0x01	; 1
   14d64:	80 93 ad 02 	sts	0x02AD, r24
					}
				}
				do{
					__key = _key_hit();
   14d68:	0e 94 6a a5 	call	0x14ad4	; 0x14ad4 <_key_hit>
					__key = _key_crr(__key);
   14d6c:	0e 94 97 a5 	call	0x14b2e	; 0x14b2e <_key_crr>
   14d70:	28 2f       	mov	r18, r24
				}while(__key!=_KEY_NULL);
   14d72:	88 23       	and	r24, r24
   14d74:	c9 f7       	brne	.-14     	; 0x14d68 <_key_scan+0xb8>
				_PAD_1st;
   14d76:	10 92 b0 02 	sts	0x02B0, r1
   14d7a:	82 ee       	ldi	r24, 0xE2	; 226
   14d7c:	94 e0       	ldi	r25, 0x04	; 4
   14d7e:	01 97       	sbiw	r24, 0x01	; 1
   14d80:	f1 f7       	brne	.-4      	; 0x14d7e <_key_scan+0xce>
   14d82:	03 c0       	rjmp	.+6      	; 0x14d8a <_key_scan+0xda>
				_delay_ms(5);
				return _KEY_NULL;
   14d84:	20 e0       	ldi	r18, 0x00	; 0
			}
		}
	}
	_PAD_1st;
   14d86:	10 92 b0 02 	sts	0x02B0, r1
	return __key;
}
   14d8a:	82 2f       	mov	r24, r18
   14d8c:	1f 91       	pop	r17
   14d8e:	08 95       	ret

00014d90 <_spi_init>:
#include <util/delay.h>
#include <compat/deprecated.h>

#include "SPI.h"
void _spi_init(unsigned char __mode, unsigned char __interrupt){
	if(__mode){
   14d90:	88 23       	and	r24, r24
   14d92:	41 f0       	breq	.+16     	; 0x14da4 <_spi_init+0x14>
		_SPI_DDR = (1 << _SPI_MOSI) | (1 << _SPI_SCK);
   14d94:	86 e0       	ldi	r24, 0x06	; 6
   14d96:	87 bb       	out	0x17, r24	; 23
		if(__interrupt)
   14d98:	66 23       	and	r22, r22
   14d9a:	11 f0       	breq	.+4      	; 0x14da0 <_spi_init+0x10>
			SPCR = (1 << SPIE) | (1 << SPE) | (1 << MSTR) | (1 << SPR1);
   14d9c:	82 ed       	ldi	r24, 0xD2	; 210
   14d9e:	09 c0       	rjmp	.+18     	; 0x14db2 <_spi_init+0x22>
		else
			SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR1);
   14da0:	82 e5       	ldi	r24, 0x52	; 82
   14da2:	07 c0       	rjmp	.+14     	; 0x14db2 <_spi_init+0x22>
	}
	else{
		_SPI_DDR = (1 << _SPI_MISO);
   14da4:	88 e0       	ldi	r24, 0x08	; 8
   14da6:	87 bb       	out	0x17, r24	; 23
		if(__interrupt)
   14da8:	66 23       	and	r22, r22
   14daa:	11 f0       	breq	.+4      	; 0x14db0 <_spi_init+0x20>
			SPCR = (1 << SPIE) | (1 << SPE);
   14dac:	80 ec       	ldi	r24, 0xC0	; 192
   14dae:	01 c0       	rjmp	.+2      	; 0x14db2 <_spi_init+0x22>
		else
			SPCR = (1 << SPE);
   14db0:	80 e4       	ldi	r24, 0x40	; 64
   14db2:	8d b9       	out	0x0d, r24	; 13
   14db4:	08 95       	ret

00014db6 <_spi_enable>:
	}
}

void _spi_enable(unsigned char __select){
	if(__select == 0){
   14db6:	88 23       	and	r24, r24
   14db8:	19 f4       	brne	.+6      	; 0x14dc0 <_spi_enable+0xa>
		sbi(_SLAVE_PORT, _SLAVE_PIN);
   14dba:	db 9a       	sbi	0x1b, 3	; 27
		sbi(_MMC_PORT, _MMC_PIN);
   14dbc:	1b 9a       	sbi	0x03, 3	; 3
   14dbe:	08 95       	ret
	}
	if(__select == 1){
   14dc0:	81 30       	cpi	r24, 0x01	; 1
   14dc2:	39 f4       	brne	.+14     	; 0x14dd2 <_spi_enable+0x1c>
		sbi(_MMC_PORT, _MMC_PIN);
   14dc4:	1b 9a       	sbi	0x03, 3	; 3
   14dc6:	82 ee       	ldi	r24, 0xE2	; 226
   14dc8:	94 e0       	ldi	r25, 0x04	; 4
   14dca:	01 97       	sbiw	r24, 0x01	; 1
   14dcc:	f1 f7       	brne	.-4      	; 0x14dca <_spi_enable+0x14>
		_delay_ms(5);
		cbi(_SLAVE_PORT, _SLAVE_PIN);
   14dce:	db 98       	cbi	0x1b, 3	; 27
   14dd0:	08 95       	ret
	}
	if(__select == 2){
   14dd2:	82 30       	cpi	r24, 0x02	; 2
   14dd4:	31 f4       	brne	.+12     	; 0x14de2 <_spi_enable+0x2c>
		sbi(_SLAVE_PORT, _SLAVE_PIN);
   14dd6:	db 9a       	sbi	0x1b, 3	; 27
   14dd8:	82 ee       	ldi	r24, 0xE2	; 226
   14dda:	94 e0       	ldi	r25, 0x04	; 4
   14ddc:	01 97       	sbiw	r24, 0x01	; 1
   14dde:	f1 f7       	brne	.-4      	; 0x14ddc <_spi_enable+0x26>
		_delay_ms(5);
		cbi(_MMC_PORT, _MMC_PIN);
   14de0:	1b 98       	cbi	0x03, 3	; 3
   14de2:	08 95       	ret

00014de4 <_spi>:
	}
}

unsigned char _spi(unsigned char __data){
	SPDR = __data;
   14de4:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1 << SPIF)));
   14de6:	77 9b       	sbis	0x0e, 7	; 14
   14de8:	fe cf       	rjmp	.-4      	; 0x14de6 <_spi+0x2>
	return SPDR;
   14dea:	8f b1       	in	r24, 0x0f	; 15
}
   14dec:	08 95       	ret

00014dee <_rtc>:

#include <compat/twi.h>

#include "RTC.h"

unsigned char _rtc(int __addr, int __len, char* __datetime, unsigned char __dir){
   14dee:	98 2f       	mov	r25, r24
	int				__twcr;
	unsigned char	__i = 0;
	
	if(__dir){
   14df0:	22 23       	and	r18, r18
   14df2:	09 f4       	brne	.+2      	; 0x14df6 <_rtc+0x8>
   14df4:	49 c0       	rjmp	.+146    	; 0x14e88 <_rtc+0x9a>
		TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
   14df6:	84 ea       	ldi	r24, 0xA4	; 164
   14df8:	80 93 74 00 	sts	0x0074, r24
		_rtc_response;
   14dfc:	80 91 74 00 	lds	r24, 0x0074
   14e00:	87 ff       	sbrs	r24, 7
   14e02:	fc cf       	rjmp	.-8      	; 0x14dfc <_rtc+0xe>
		if(TW_STATUS != TW_START)
   14e04:	80 91 71 00 	lds	r24, 0x0071
   14e08:	88 7f       	andi	r24, 0xF8	; 248
   14e0a:	88 30       	cpi	r24, 0x08	; 8
   14e0c:	09 f0       	breq	.+2      	; 0x14e10 <_rtc+0x22>
   14e0e:	af c0       	rjmp	.+350    	; 0x14f6e <_rtc+0x180>
			return 1;

		TWDR = _DS1307W;
   14e10:	80 ed       	ldi	r24, 0xD0	; 208
   14e12:	80 93 73 00 	sts	0x0073, r24
		TWCR = _BV(TWINT) | _BV(TWEN);
   14e16:	84 e8       	ldi	r24, 0x84	; 132
   14e18:	80 93 74 00 	sts	0x0074, r24
		_rtc_response;
   14e1c:	80 91 74 00 	lds	r24, 0x0074
   14e20:	87 ff       	sbrs	r24, 7
   14e22:	fc cf       	rjmp	.-8      	; 0x14e1c <_rtc+0x2e>
		if(TW_STATUS != TW_MT_SLA_ACK)
   14e24:	80 91 71 00 	lds	r24, 0x0071
   14e28:	88 7f       	andi	r24, 0xF8	; 248
   14e2a:	88 31       	cpi	r24, 0x18	; 24
   14e2c:	09 f0       	breq	.+2      	; 0x14e30 <_rtc+0x42>
   14e2e:	9f c0       	rjmp	.+318    	; 0x14f6e <_rtc+0x180>
			return 1;

		TWDR = __addr;
   14e30:	90 93 73 00 	sts	0x0073, r25
		TWCR = _BV(TWINT) | _BV(TWEN);
   14e34:	84 e8       	ldi	r24, 0x84	; 132
   14e36:	80 93 74 00 	sts	0x0074, r24
		_rtc_response;
   14e3a:	80 91 74 00 	lds	r24, 0x0074
   14e3e:	87 ff       	sbrs	r24, 7
   14e40:	fc cf       	rjmp	.-8      	; 0x14e3a <_rtc+0x4c>
		if(TW_STATUS != TW_MT_DATA_ACK)
   14e42:	80 91 71 00 	lds	r24, 0x0071
   14e46:	88 7f       	andi	r24, 0xF8	; 248
   14e48:	88 32       	cpi	r24, 0x28	; 40
   14e4a:	09 f0       	breq	.+2      	; 0x14e4e <_rtc+0x60>
   14e4c:	90 c0       	rjmp	.+288    	; 0x14f6e <_rtc+0x180>
   14e4e:	9b 01       	movw	r18, r22
			return 1;

		for(; __len > 0; __len--){
			TWDR = __datetime[__i++];
			TWCR = _BV(TWINT) | _BV(TWEN);
   14e50:	94 e8       	ldi	r25, 0x84	; 132
   14e52:	14 c0       	rjmp	.+40     	; 0x14e7c <_rtc+0x8e>
		_rtc_response;
		if(TW_STATUS != TW_MT_DATA_ACK)
			return 1;

		for(; __len > 0; __len--){
			TWDR = __datetime[__i++];
   14e54:	fa 01       	movw	r30, r20
   14e56:	e8 0f       	add	r30, r24
   14e58:	f1 1d       	adc	r31, r1
   14e5a:	80 81       	ld	r24, Z
   14e5c:	80 93 73 00 	sts	0x0073, r24
			TWCR = _BV(TWINT) | _BV(TWEN);
   14e60:	90 93 74 00 	sts	0x0074, r25
			_rtc_response;
   14e64:	80 91 74 00 	lds	r24, 0x0074
   14e68:	87 ff       	sbrs	r24, 7
   14e6a:	fc cf       	rjmp	.-8      	; 0x14e64 <_rtc+0x76>
			if(TW_STATUS == TW_MT_DATA_NACK)
   14e6c:	80 91 71 00 	lds	r24, 0x0071
   14e70:	88 7f       	andi	r24, 0xF8	; 248
   14e72:	80 33       	cpi	r24, 0x30	; 48
   14e74:	09 f4       	brne	.+2      	; 0x14e78 <_rtc+0x8a>
   14e76:	7b c0       	rjmp	.+246    	; 0x14f6e <_rtc+0x180>
		TWCR = _BV(TWINT) | _BV(TWEN);
		_rtc_response;
		if(TW_STATUS != TW_MT_DATA_ACK)
			return 1;

		for(; __len > 0; __len--){
   14e78:	21 50       	subi	r18, 0x01	; 1
   14e7a:	30 40       	sbci	r19, 0x00	; 0
   14e7c:	86 2f       	mov	r24, r22
   14e7e:	82 1b       	sub	r24, r18
   14e80:	12 16       	cp	r1, r18
   14e82:	13 06       	cpc	r1, r19
   14e84:	3c f3       	brlt	.-50     	; 0x14e54 <_rtc+0x66>
   14e86:	6e c0       	rjmp	.+220    	; 0x14f64 <_rtc+0x176>
		}

		TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
	}
	else{
		TWCR =_BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
   14e88:	84 ea       	ldi	r24, 0xA4	; 164
   14e8a:	80 93 74 00 	sts	0x0074, r24
		_rtc_response;
   14e8e:	80 91 74 00 	lds	r24, 0x0074
   14e92:	87 ff       	sbrs	r24, 7
   14e94:	fc cf       	rjmp	.-8      	; 0x14e8e <_rtc+0xa0>
		if(TW_STATUS != TW_START)
   14e96:	80 91 71 00 	lds	r24, 0x0071
   14e9a:	88 7f       	andi	r24, 0xF8	; 248
   14e9c:	88 30       	cpi	r24, 0x08	; 8
   14e9e:	09 f0       	breq	.+2      	; 0x14ea2 <_rtc+0xb4>
   14ea0:	66 c0       	rjmp	.+204    	; 0x14f6e <_rtc+0x180>
			return 1;

		TWDR = _DS1307W;
   14ea2:	80 ed       	ldi	r24, 0xD0	; 208
   14ea4:	80 93 73 00 	sts	0x0073, r24
		TWCR = _BV(TWINT) | _BV(TWEN);
   14ea8:	84 e8       	ldi	r24, 0x84	; 132
   14eaa:	80 93 74 00 	sts	0x0074, r24
		_rtc_response;
   14eae:	80 91 74 00 	lds	r24, 0x0074
   14eb2:	87 ff       	sbrs	r24, 7
   14eb4:	fc cf       	rjmp	.-8      	; 0x14eae <_rtc+0xc0>
		if(TW_STATUS != TW_MT_SLA_ACK)
   14eb6:	80 91 71 00 	lds	r24, 0x0071
   14eba:	88 7f       	andi	r24, 0xF8	; 248
   14ebc:	88 31       	cpi	r24, 0x18	; 24
   14ebe:	09 f0       	breq	.+2      	; 0x14ec2 <_rtc+0xd4>
   14ec0:	56 c0       	rjmp	.+172    	; 0x14f6e <_rtc+0x180>
			return 1;

		TWDR = __addr;
   14ec2:	90 93 73 00 	sts	0x0073, r25
		TWCR = _BV(TWINT) | _BV(TWEN);
   14ec6:	84 e8       	ldi	r24, 0x84	; 132
   14ec8:	80 93 74 00 	sts	0x0074, r24
		_rtc_response;
   14ecc:	80 91 74 00 	lds	r24, 0x0074
   14ed0:	87 ff       	sbrs	r24, 7
   14ed2:	fc cf       	rjmp	.-8      	; 0x14ecc <_rtc+0xde>
		if(TW_STATUS != TW_MT_DATA_ACK)
   14ed4:	80 91 71 00 	lds	r24, 0x0071
   14ed8:	88 7f       	andi	r24, 0xF8	; 248
   14eda:	88 32       	cpi	r24, 0x28	; 40
   14edc:	09 f0       	breq	.+2      	; 0x14ee0 <_rtc+0xf2>
   14ede:	47 c0       	rjmp	.+142    	; 0x14f6e <_rtc+0x180>
			return 1;

		TWCR =_BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
   14ee0:	84 ea       	ldi	r24, 0xA4	; 164
   14ee2:	80 93 74 00 	sts	0x0074, r24
		_rtc_response;
   14ee6:	80 91 74 00 	lds	r24, 0x0074
   14eea:	87 ff       	sbrs	r24, 7
   14eec:	fc cf       	rjmp	.-8      	; 0x14ee6 <_rtc+0xf8>
		if(TW_STATUS != TW_REP_START)
   14eee:	80 91 71 00 	lds	r24, 0x0071
   14ef2:	88 7f       	andi	r24, 0xF8	; 248
   14ef4:	80 31       	cpi	r24, 0x10	; 16
   14ef6:	d9 f5       	brne	.+118    	; 0x14f6e <_rtc+0x180>
			return 1;

		TWDR = _DS1307R;
   14ef8:	81 ed       	ldi	r24, 0xD1	; 209
   14efa:	80 93 73 00 	sts	0x0073, r24
		TWCR =_BV(TWINT) | _BV(TWEN);
   14efe:	84 e8       	ldi	r24, 0x84	; 132
   14f00:	80 93 74 00 	sts	0x0074, r24
		_rtc_response;
   14f04:	80 91 74 00 	lds	r24, 0x0074
   14f08:	87 ff       	sbrs	r24, 7
   14f0a:	fc cf       	rjmp	.-8      	; 0x14f04 <_rtc+0x116>
		if(TW_STATUS != TW_MR_SLA_ACK)
   14f0c:	80 91 71 00 	lds	r24, 0x0071
   14f10:	88 7f       	andi	r24, 0xF8	; 248
   14f12:	80 34       	cpi	r24, 0x40	; 64
   14f14:	61 f5       	brne	.+88     	; 0x14f6e <_rtc+0x180>
   14f16:	24 ec       	ldi	r18, 0xC4	; 196
   14f18:	30 e0       	ldi	r19, 0x00	; 0
   14f1a:	90 e0       	ldi	r25, 0x00	; 0
   14f1c:	20 c0       	rjmp	.+64     	; 0x14f5e <_rtc+0x170>
			return 1;

		for(__twcr = _BV(TWINT) | _BV(TWEN) | _BV(TWEA); __len > 0; __len--){
			if(__len == 1)
   14f1e:	61 30       	cpi	r22, 0x01	; 1
   14f20:	71 05       	cpc	r23, r1
   14f22:	11 f4       	brne	.+4      	; 0x14f28 <_rtc+0x13a>
   14f24:	24 e8       	ldi	r18, 0x84	; 132
   14f26:	30 e0       	ldi	r19, 0x00	; 0
				__twcr = _BV(TWINT) | _BV(TWEN);
			TWCR = __twcr;
   14f28:	20 93 74 00 	sts	0x0074, r18
			_rtc_response;
   14f2c:	80 91 74 00 	lds	r24, 0x0074
   14f30:	87 ff       	sbrs	r24, 7
   14f32:	fc cf       	rjmp	.-8      	; 0x14f2c <_rtc+0x13e>
			if(TW_STATUS == TW_MR_DATA_NACK)
   14f34:	80 91 71 00 	lds	r24, 0x0071
   14f38:	88 7f       	andi	r24, 0xF8	; 248
   14f3a:	88 35       	cpi	r24, 0x58	; 88
   14f3c:	11 f4       	brne	.+4      	; 0x14f42 <_rtc+0x154>
   14f3e:	60 e0       	ldi	r22, 0x00	; 0
   14f40:	70 e0       	ldi	r23, 0x00	; 0
				__len = 0;
			if(TW_STATUS == TW_MR_DATA_ACK)
   14f42:	80 91 71 00 	lds	r24, 0x0071
   14f46:	88 7f       	andi	r24, 0xF8	; 248
   14f48:	80 35       	cpi	r24, 0x50	; 80
   14f4a:	39 f4       	brne	.+14     	; 0x14f5a <_rtc+0x16c>
				__datetime[__i++] = TWDR;
   14f4c:	80 91 73 00 	lds	r24, 0x0073
   14f50:	fa 01       	movw	r30, r20
   14f52:	e9 0f       	add	r30, r25
   14f54:	f1 1d       	adc	r31, r1
   14f56:	80 83       	st	Z, r24
   14f58:	9f 5f       	subi	r25, 0xFF	; 255
		TWCR =_BV(TWINT) | _BV(TWEN);
		_rtc_response;
		if(TW_STATUS != TW_MR_SLA_ACK)
			return 1;

		for(__twcr = _BV(TWINT) | _BV(TWEN) | _BV(TWEA); __len > 0; __len--){
   14f5a:	61 50       	subi	r22, 0x01	; 1
   14f5c:	70 40       	sbci	r23, 0x00	; 0
   14f5e:	16 16       	cp	r1, r22
   14f60:	17 06       	cpc	r1, r23
   14f62:	ec f2       	brlt	.-70     	; 0x14f1e <_rtc+0x130>
			if(TW_STATUS == TW_MR_DATA_NACK)
				__len = 0;
			if(TW_STATUS == TW_MR_DATA_ACK)
				__datetime[__i++] = TWDR;
		}
		TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
   14f64:	84 e9       	ldi	r24, 0x94	; 148
   14f66:	80 93 74 00 	sts	0x0074, r24
   14f6a:	80 e0       	ldi	r24, 0x00	; 0
   14f6c:	08 95       	ret
   14f6e:	81 e0       	ldi	r24, 0x01	; 1
	}

    return 0;
}
   14f70:	08 95       	ret

00014f72 <_datetime>:

void _datetime(unsigned char __mode, char* __date, char* __time){
   14f72:	ef 92       	push	r14
   14f74:	ff 92       	push	r15
   14f76:	0f 93       	push	r16
   14f78:	1f 93       	push	r17
   14f7a:	df 93       	push	r29
   14f7c:	cf 93       	push	r28
   14f7e:	cd b7       	in	r28, 0x3d	; 61
   14f80:	de b7       	in	r29, 0x3e	; 62
   14f82:	64 97       	sbiw	r28, 0x14	; 20
   14f84:	0f b6       	in	r0, 0x3f	; 63
   14f86:	f8 94       	cli
   14f88:	de bf       	out	0x3e, r29	; 62
   14f8a:	0f be       	out	0x3f, r0	; 63
   14f8c:	cd bf       	out	0x3d, r28	; 61
   14f8e:	28 2f       	mov	r18, r24
   14f90:	8b 01       	movw	r16, r22
   14f92:	7a 01       	movw	r14, r20
   14f94:	ae 01       	movw	r20, r28
   14f96:	4f 5f       	subi	r20, 0xFF	; 255
   14f98:	5f 4f       	sbci	r21, 0xFF	; 255
	char	__datetime[20];

	if(__mode){
   14f9a:	88 23       	and	r24, r24
   14f9c:	99 f1       	breq	.+102    	; 0x15004 <_datetime+0x92>
		__datetime[4] = (((__date[0] - 0x30) & 0x0F) << 4) + ((__date[1] - 0x30) & 0x0F);
   14f9e:	fb 01       	movw	r30, r22
   14fa0:	90 81       	ld	r25, Z
   14fa2:	92 95       	swap	r25
   14fa4:	90 7f       	andi	r25, 0xF0	; 240
   14fa6:	81 81       	ldd	r24, Z+1	; 0x01
   14fa8:	8f 70       	andi	r24, 0x0F	; 15
   14faa:	98 0f       	add	r25, r24
   14fac:	9d 83       	std	Y+5, r25	; 0x05
		__datetime[5] = (((__date[3] - 0x30) & 0x0F) << 4) + ((__date[4] - 0x30) & 0x0F);
   14fae:	93 81       	ldd	r25, Z+3	; 0x03
   14fb0:	92 95       	swap	r25
   14fb2:	90 7f       	andi	r25, 0xF0	; 240
   14fb4:	84 81       	ldd	r24, Z+4	; 0x04
   14fb6:	8f 70       	andi	r24, 0x0F	; 15
   14fb8:	98 0f       	add	r25, r24
   14fba:	9e 83       	std	Y+6, r25	; 0x06
		__datetime[6] = (((__date[6] - 0x30) & 0x0F) << 4) + ((__date[7] - 0x30) & 0x0F);
   14fbc:	96 81       	ldd	r25, Z+6	; 0x06
   14fbe:	92 95       	swap	r25
   14fc0:	90 7f       	andi	r25, 0xF0	; 240
   14fc2:	87 81       	ldd	r24, Z+7	; 0x07
   14fc4:	8f 70       	andi	r24, 0x0F	; 15
   14fc6:	98 0f       	add	r25, r24
   14fc8:	9f 83       	std	Y+7, r25	; 0x07

		__datetime[2] = (((__time[0] - 0x30) & 0x0F) << 4) + ((__time[1] - 0x30) & 0x0F);
   14fca:	f7 01       	movw	r30, r14
   14fcc:	90 81       	ld	r25, Z
   14fce:	92 95       	swap	r25
   14fd0:	90 7f       	andi	r25, 0xF0	; 240
   14fd2:	81 81       	ldd	r24, Z+1	; 0x01
   14fd4:	8f 70       	andi	r24, 0x0F	; 15
   14fd6:	98 0f       	add	r25, r24
   14fd8:	9b 83       	std	Y+3, r25	; 0x03
		__datetime[1] = (((__time[3] - 0x30) & 0x0F) << 4) + ((__time[4] - 0x30) & 0x0F);
   14fda:	93 81       	ldd	r25, Z+3	; 0x03
   14fdc:	92 95       	swap	r25
   14fde:	90 7f       	andi	r25, 0xF0	; 240
   14fe0:	84 81       	ldd	r24, Z+4	; 0x04
   14fe2:	8f 70       	andi	r24, 0x0F	; 15
   14fe4:	98 0f       	add	r25, r24
   14fe6:	9a 83       	std	Y+2, r25	; 0x02
		__datetime[0] = (((__time[6] - 0x30) & 0x0F) << 4) + ((__time[7] - 0x30) & 0x0F);
   14fe8:	96 81       	ldd	r25, Z+6	; 0x06
   14fea:	92 95       	swap	r25
   14fec:	90 7f       	andi	r25, 0xF0	; 240
   14fee:	87 81       	ldd	r24, Z+7	; 0x07
   14ff0:	8f 70       	andi	r24, 0x0F	; 15
   14ff2:	98 0f       	add	r25, r24
   14ff4:	99 83       	std	Y+1, r25	; 0x01
		_rtc(0, 8, __datetime, __mode);
   14ff6:	80 e0       	ldi	r24, 0x00	; 0
   14ff8:	90 e0       	ldi	r25, 0x00	; 0
   14ffa:	68 e0       	ldi	r22, 0x08	; 8
   14ffc:	70 e0       	ldi	r23, 0x00	; 0
   14ffe:	0e 94 f7 a6 	call	0x14dee	; 0x14dee <_rtc>
   15002:	4a c0       	rjmp	.+148    	; 0x15098 <_datetime+0x126>
	}
	else
		if(_rtc(0, 8, __datetime, __mode) != 1){
   15004:	80 e0       	ldi	r24, 0x00	; 0
   15006:	90 e0       	ldi	r25, 0x00	; 0
   15008:	68 e0       	ldi	r22, 0x08	; 8
   1500a:	70 e0       	ldi	r23, 0x00	; 0
   1500c:	20 e0       	ldi	r18, 0x00	; 0
   1500e:	0e 94 f7 a6 	call	0x14dee	; 0x14dee <_rtc>
   15012:	81 30       	cpi	r24, 0x01	; 1
   15014:	09 f4       	brne	.+2      	; 0x15018 <_datetime+0xa6>
   15016:	40 c0       	rjmp	.+128    	; 0x15098 <_datetime+0x126>
			__date[0] = (__datetime[4] >> 4) + 0x30;
   15018:	9d 81       	ldd	r25, Y+5	; 0x05
   1501a:	89 2f       	mov	r24, r25
   1501c:	82 95       	swap	r24
   1501e:	8f 70       	andi	r24, 0x0F	; 15
   15020:	80 5d       	subi	r24, 0xD0	; 208
   15022:	f8 01       	movw	r30, r16
   15024:	80 83       	st	Z, r24
			__date[1] = (__datetime[4] & 0x0F) + 0x30;
   15026:	9f 70       	andi	r25, 0x0F	; 15
   15028:	90 5d       	subi	r25, 0xD0	; 208
   1502a:	91 83       	std	Z+1, r25	; 0x01
			__date[2] = '/';
   1502c:	2f e2       	ldi	r18, 0x2F	; 47
   1502e:	22 83       	std	Z+2, r18	; 0x02
			__date[3] = (__datetime[5] >> 4) + 0x30;
   15030:	9e 81       	ldd	r25, Y+6	; 0x06
   15032:	89 2f       	mov	r24, r25
   15034:	82 95       	swap	r24
   15036:	8f 70       	andi	r24, 0x0F	; 15
   15038:	80 5d       	subi	r24, 0xD0	; 208
   1503a:	83 83       	std	Z+3, r24	; 0x03
			__date[4] = (__datetime[5] & 0x0F) + 0x30;
   1503c:	9f 70       	andi	r25, 0x0F	; 15
   1503e:	90 5d       	subi	r25, 0xD0	; 208
   15040:	94 83       	std	Z+4, r25	; 0x04
			__date[5] = '/';
   15042:	25 83       	std	Z+5, r18	; 0x05
			__date[6] = (__datetime[6] >> 4) + 0x30;
   15044:	9f 81       	ldd	r25, Y+7	; 0x07
   15046:	89 2f       	mov	r24, r25
   15048:	82 95       	swap	r24
   1504a:	8f 70       	andi	r24, 0x0F	; 15
   1504c:	80 5d       	subi	r24, 0xD0	; 208
   1504e:	86 83       	std	Z+6, r24	; 0x06
			__date[7] = (__datetime[6] & 0x0F) + 0x30;
   15050:	9f 70       	andi	r25, 0x0F	; 15
   15052:	90 5d       	subi	r25, 0xD0	; 208
   15054:	97 83       	std	Z+7, r25	; 0x07
			__date[8] = '\0';
   15056:	10 86       	std	Z+8, r1	; 0x08

			__time[0] = (__datetime[2] >> 4) + 0x30;
   15058:	9b 81       	ldd	r25, Y+3	; 0x03
   1505a:	89 2f       	mov	r24, r25
   1505c:	82 95       	swap	r24
   1505e:	8f 70       	andi	r24, 0x0F	; 15
   15060:	80 5d       	subi	r24, 0xD0	; 208
   15062:	f7 01       	movw	r30, r14
   15064:	80 83       	st	Z, r24
			__time[1] = (__datetime[2] & 0x0F) + 0x30;
   15066:	9f 70       	andi	r25, 0x0F	; 15
   15068:	90 5d       	subi	r25, 0xD0	; 208
   1506a:	91 83       	std	Z+1, r25	; 0x01
			__time[2] = ':';
   1506c:	2a e3       	ldi	r18, 0x3A	; 58
   1506e:	22 83       	std	Z+2, r18	; 0x02
			__time[3] = (__datetime[1] >> 4) + 0x30;
   15070:	9a 81       	ldd	r25, Y+2	; 0x02
   15072:	89 2f       	mov	r24, r25
   15074:	82 95       	swap	r24
   15076:	8f 70       	andi	r24, 0x0F	; 15
   15078:	80 5d       	subi	r24, 0xD0	; 208
   1507a:	83 83       	std	Z+3, r24	; 0x03
			__time[4] = (__datetime[1] & 0x0F) + 0x30;
   1507c:	9f 70       	andi	r25, 0x0F	; 15
   1507e:	90 5d       	subi	r25, 0xD0	; 208
   15080:	94 83       	std	Z+4, r25	; 0x04
			__time[5] = ':';
   15082:	25 83       	std	Z+5, r18	; 0x05
			__time[6] = (__datetime[0] >> 4) + 0x30;
   15084:	99 81       	ldd	r25, Y+1	; 0x01
   15086:	89 2f       	mov	r24, r25
   15088:	82 95       	swap	r24
   1508a:	8f 70       	andi	r24, 0x0F	; 15
   1508c:	80 5d       	subi	r24, 0xD0	; 208
   1508e:	86 83       	std	Z+6, r24	; 0x06
			__time[7] = (__datetime[0] & 0x0F) + 0x30;
   15090:	9f 70       	andi	r25, 0x0F	; 15
   15092:	90 5d       	subi	r25, 0xD0	; 208
   15094:	97 83       	std	Z+7, r25	; 0x07
			__time[8] = '\0';
   15096:	10 86       	std	Z+8, r1	; 0x08
		}
}
   15098:	64 96       	adiw	r28, 0x14	; 20
   1509a:	0f b6       	in	r0, 0x3f	; 63
   1509c:	f8 94       	cli
   1509e:	de bf       	out	0x3e, r29	; 62
   150a0:	0f be       	out	0x3f, r0	; 63
   150a2:	cd bf       	out	0x3d, r28	; 61
   150a4:	cf 91       	pop	r28
   150a6:	df 91       	pop	r29
   150a8:	1f 91       	pop	r17
   150aa:	0f 91       	pop	r16
   150ac:	ff 90       	pop	r15
   150ae:	ef 90       	pop	r14
   150b0:	08 95       	ret

000150b2 <_day>:

unsigned char _day(void){
   150b2:	df 93       	push	r29
   150b4:	cf 93       	push	r28
   150b6:	cd b7       	in	r28, 0x3d	; 61
   150b8:	de b7       	in	r29, 0x3e	; 62
   150ba:	64 97       	sbiw	r28, 0x14	; 20
   150bc:	0f b6       	in	r0, 0x3f	; 63
   150be:	f8 94       	cli
   150c0:	de bf       	out	0x3e, r29	; 62
   150c2:	0f be       	out	0x3f, r0	; 63
   150c4:	cd bf       	out	0x3d, r28	; 61
	char	__datetime[20];

	if(_rtc(0, 8, __datetime, 0) != 1)
   150c6:	80 e0       	ldi	r24, 0x00	; 0
   150c8:	90 e0       	ldi	r25, 0x00	; 0
   150ca:	68 e0       	ldi	r22, 0x08	; 8
   150cc:	70 e0       	ldi	r23, 0x00	; 0
   150ce:	ae 01       	movw	r20, r28
   150d0:	4f 5f       	subi	r20, 0xFF	; 255
   150d2:	5f 4f       	sbci	r21, 0xFF	; 255
   150d4:	20 e0       	ldi	r18, 0x00	; 0
   150d6:	0e 94 f7 a6 	call	0x14dee	; 0x14dee <_rtc>
   150da:	81 30       	cpi	r24, 0x01	; 1
   150dc:	11 f4       	brne	.+4      	; 0x150e2 <_day+0x30>
   150de:	80 e0       	ldi	r24, 0x00	; 0
   150e0:	02 c0       	rjmp	.+4      	; 0x150e6 <_day+0x34>
		return __datetime[3] & 0x0F;
   150e2:	8c 81       	ldd	r24, Y+4	; 0x04
   150e4:	8f 70       	andi	r24, 0x0F	; 15
	return 0;
   150e6:	64 96       	adiw	r28, 0x14	; 20
   150e8:	0f b6       	in	r0, 0x3f	; 63
   150ea:	f8 94       	cli
   150ec:	de bf       	out	0x3e, r29	; 62
   150ee:	0f be       	out	0x3f, r0	; 63
   150f0:	cd bf       	out	0x3d, r28	; 61
   150f2:	cf 91       	pop	r28
   150f4:	df 91       	pop	r29
   150f6:	08 95       	ret

000150f8 <uart_baudrate>:
	}

	uart_baudrate(__com, __baudrate);
}

void uart_baudrate(unsigned char __com, unsigned long __baudrate){
   150f8:	1f 93       	push	r17
   150fa:	18 2f       	mov	r17, r24
   150fc:	9a 01       	movw	r18, r20
   150fe:	ab 01       	movw	r20, r22
	unsigned long __br;

	__br = (unsigned long)((_CPU_DEFAULT + (__baudrate * 8)) / (__baudrate * 16) - 1);
   15100:	ca 01       	movw	r24, r20
   15102:	b9 01       	movw	r22, r18
   15104:	60 50       	subi	r22, 0x00	; 0
   15106:	70 4e       	sbci	r23, 0xE0	; 224
   15108:	83 4e       	sbci	r24, 0xE3	; 227
   1510a:	9f 4f       	sbci	r25, 0xFF	; 255
   1510c:	f3 e0       	ldi	r31, 0x03	; 3
   1510e:	66 0f       	add	r22, r22
   15110:	77 1f       	adc	r23, r23
   15112:	88 1f       	adc	r24, r24
   15114:	99 1f       	adc	r25, r25
   15116:	fa 95       	dec	r31
   15118:	d1 f7       	brne	.-12     	; 0x1510e <uart_baudrate+0x16>
   1511a:	e4 e0       	ldi	r30, 0x04	; 4
   1511c:	22 0f       	add	r18, r18
   1511e:	33 1f       	adc	r19, r19
   15120:	44 1f       	adc	r20, r20
   15122:	55 1f       	adc	r21, r21
   15124:	ea 95       	dec	r30
   15126:	d1 f7       	brne	.-12     	; 0x1511c <uart_baudrate+0x24>
   15128:	0e 94 8c aa 	call	0x15518	; 0x15518 <__udivmodsi4>
   1512c:	21 50       	subi	r18, 0x01	; 1
   1512e:	30 40       	sbci	r19, 0x00	; 0
   15130:	40 40       	sbci	r20, 0x00	; 0
   15132:	50 40       	sbci	r21, 0x00	; 0
   15134:	bb 27       	eor	r27, r27
   15136:	a5 2f       	mov	r26, r21
   15138:	94 2f       	mov	r25, r20
   1513a:	83 2f       	mov	r24, r19

	if(__com){
   1513c:	11 23       	and	r17, r17
   1513e:	29 f0       	breq	.+10     	; 0x1514a <uart_baudrate+0x52>
		UBRR1L = __br;
   15140:	20 93 99 00 	sts	0x0099, r18
		UBRR1H = __br >> 8;
   15144:	80 93 98 00 	sts	0x0098, r24
   15148:	03 c0       	rjmp	.+6      	; 0x15150 <uart_baudrate+0x58>
	}
	else{
		UBRR0L = __br;
   1514a:	29 b9       	out	0x09, r18	; 9
		UBRR0H = __br >> 8;
   1514c:	80 93 90 00 	sts	0x0090, r24
	}
}
   15150:	1f 91       	pop	r17
   15152:	08 95       	ret

00015154 <uart_init>:
#include <util/delay.h>
#include <string.h>

#include "UART.h"

void uart_init(unsigned char __com, unsigned long __baudrate){
   15154:	98 2f       	mov	r25, r24
	if(__com){
   15156:	88 23       	and	r24, r24
   15158:	39 f0       	breq	.+14     	; 0x15168 <uart_init+0x14>
		UCSR1B = _BV(RXCIE1) | _BV(RXEN1) | _BV(TXEN1);
   1515a:	88 e9       	ldi	r24, 0x98	; 152
   1515c:	80 93 9a 00 	sts	0x009A, r24
		UCSR1C = _BV(UCSZ11) | _BV(UCSZ10);
   15160:	86 e0       	ldi	r24, 0x06	; 6
   15162:	80 93 9d 00 	sts	0x009D, r24
   15166:	05 c0       	rjmp	.+10     	; 0x15172 <uart_init+0x1e>
	}
	else{
		UCSR0B = _BV(RXCIE0) | _BV(RXEN0) | _BV(TXEN0);
   15168:	88 e9       	ldi	r24, 0x98	; 152
   1516a:	8a b9       	out	0x0a, r24	; 10
		UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
   1516c:	86 e0       	ldi	r24, 0x06	; 6
   1516e:	80 93 95 00 	sts	0x0095, r24
	}

	uart_baudrate(__com, __baudrate);
   15172:	89 2f       	mov	r24, r25
   15174:	0e 94 7c a8 	call	0x150f8	; 0x150f8 <uart_baudrate>
}
   15178:	08 95       	ret

0001517a <uart>:
		UBRR0H = __br >> 8;
	}
}

unsigned char uart(unsigned char __com, unsigned char __dir, unsigned char __chr){
	if(__com){
   1517a:	88 23       	and	r24, r24
   1517c:	81 f0       	breq	.+32     	; 0x1519e <uart+0x24>
		if(__dir){
   1517e:	66 23       	and	r22, r22
   15180:	39 f0       	breq	.+14     	; 0x15190 <uart+0x16>
			loop_until_bit_is_set(UCSR1A, UDRE1);
   15182:	80 91 9b 00 	lds	r24, 0x009B
   15186:	85 ff       	sbrs	r24, 5
   15188:	fc cf       	rjmp	.-8      	; 0x15182 <uart+0x8>
			UDR1 = __chr;
   1518a:	40 93 9c 00 	sts	0x009C, r20
   1518e:	0c c0       	rjmp	.+24     	; 0x151a8 <uart+0x2e>
		}
		else{
			loop_until_bit_is_set(UCSR1A, RXC);
   15190:	80 91 9b 00 	lds	r24, 0x009B
   15194:	87 ff       	sbrs	r24, 7
   15196:	fc cf       	rjmp	.-8      	; 0x15190 <uart+0x16>
			return UDR1;
   15198:	80 91 9c 00 	lds	r24, 0x009C
   1519c:	08 95       	ret
		}
	}
	else{
		if(__dir){
   1519e:	66 23       	and	r22, r22
   151a0:	29 f0       	breq	.+10     	; 0x151ac <uart+0x32>
			loop_until_bit_is_set(UCSR0A, UDRE0);
   151a2:	5d 9b       	sbis	0x0b, 5	; 11
   151a4:	fe cf       	rjmp	.-4      	; 0x151a2 <uart+0x28>
			UDR0 = __chr;
   151a6:	4c b9       	out	0x0c, r20	; 12
   151a8:	81 e0       	ldi	r24, 0x01	; 1
   151aa:	08 95       	ret
		}
		else{
			loop_until_bit_is_set(UCSR0A,  RXC);
   151ac:	5f 9b       	sbis	0x0b, 7	; 11
   151ae:	fe cf       	rjmp	.-4      	; 0x151ac <uart+0x32>
			return UDR0;
   151b0:	8c b1       	in	r24, 0x0c	; 12
		}

	}

	return 1;
}
   151b2:	08 95       	ret

000151b4 <uart_print>:

void uart_print(unsigned char __com, unsigned char __ret, char *__str){
   151b4:	0f 93       	push	r16
   151b6:	1f 93       	push	r17
   151b8:	cf 93       	push	r28
   151ba:	df 93       	push	r29
   151bc:	18 2f       	mov	r17, r24
   151be:	06 2f       	mov	r16, r22
   151c0:	ea 01       	movw	r28, r20
	if(strlen(__str)>0)
   151c2:	88 81       	ld	r24, Y
   151c4:	88 23       	and	r24, r24
   151c6:	31 f4       	brne	.+12     	; 0x151d4 <uart_print+0x20>
   151c8:	08 c0       	rjmp	.+16     	; 0x151da <uart_print+0x26>
		while(*__str)
		     uart(__com, 1, *__str++);
   151ca:	21 96       	adiw	r28, 0x01	; 1
   151cc:	81 2f       	mov	r24, r17
   151ce:	61 e0       	ldi	r22, 0x01	; 1
   151d0:	0e 94 bd a8 	call	0x1517a	; 0x1517a <uart>
	return 1;
}

void uart_print(unsigned char __com, unsigned char __ret, char *__str){
	if(strlen(__str)>0)
		while(*__str)
   151d4:	48 81       	ld	r20, Y
   151d6:	44 23       	and	r20, r20
   151d8:	c1 f7       	brne	.-16     	; 0x151ca <uart_print+0x16>
		     uart(__com, 1, *__str++);

	if(__ret){
   151da:	00 23       	and	r16, r16
   151dc:	51 f0       	breq	.+20     	; 0x151f2 <uart_print+0x3e>
		uart(__com, 1, 0x0D);
   151de:	81 2f       	mov	r24, r17
   151e0:	61 e0       	ldi	r22, 0x01	; 1
   151e2:	4d e0       	ldi	r20, 0x0D	; 13
   151e4:	0e 94 bd a8 	call	0x1517a	; 0x1517a <uart>
		uart(__com, 1, 0x0A);
   151e8:	81 2f       	mov	r24, r17
   151ea:	61 e0       	ldi	r22, 0x01	; 1
   151ec:	4a e0       	ldi	r20, 0x0A	; 10
   151ee:	0e 94 bd a8 	call	0x1517a	; 0x1517a <uart>
   151f2:	82 ee       	ldi	r24, 0xE2	; 226
   151f4:	94 e0       	ldi	r25, 0x04	; 4
   151f6:	01 97       	sbiw	r24, 0x01	; 1
   151f8:	f1 f7       	brne	.-4      	; 0x151f6 <uart_print+0x42>
	}
	_delay_ms(5);
}
   151fa:	df 91       	pop	r29
   151fc:	cf 91       	pop	r28
   151fe:	1f 91       	pop	r17
   15200:	0f 91       	pop	r16
   15202:	08 95       	ret

00015204 <uart_printf>:

void uart_printf(unsigned char __com, unsigned char __ret, char *__str){
   15204:	0f 93       	push	r16
   15206:	1f 93       	push	r17
   15208:	cf 93       	push	r28
   1520a:	df 93       	push	r29
   1520c:	18 2f       	mov	r17, r24
   1520e:	06 2f       	mov	r16, r22
   15210:	ea 01       	movw	r28, r20
   15212:	07 c0       	rjmp	.+14     	; 0x15222 <uart_printf+0x1e>
	while(pgm_read_byte(&(*__str)))
		uart(__com, 1, pgm_read_byte(&(*__str++)));
   15214:	21 96       	adiw	r28, 0x01	; 1
   15216:	f9 01       	movw	r30, r18
   15218:	44 91       	lpm	r20, Z+
   1521a:	81 2f       	mov	r24, r17
   1521c:	61 e0       	ldi	r22, 0x01	; 1
   1521e:	0e 94 bd a8 	call	0x1517a	; 0x1517a <uart>
   15222:	9e 01       	movw	r18, r28
	}
	_delay_ms(5);
}

void uart_printf(unsigned char __com, unsigned char __ret, char *__str){
	while(pgm_read_byte(&(*__str)))
   15224:	fe 01       	movw	r30, r28
   15226:	84 91       	lpm	r24, Z+
   15228:	88 23       	and	r24, r24
   1522a:	a1 f7       	brne	.-24     	; 0x15214 <uart_printf+0x10>
		uart(__com, 1, pgm_read_byte(&(*__str++)));

	if(__ret){
   1522c:	00 23       	and	r16, r16
   1522e:	51 f0       	breq	.+20     	; 0x15244 <uart_printf+0x40>
		uart(__com, 1, 0x0D);
   15230:	81 2f       	mov	r24, r17
   15232:	61 e0       	ldi	r22, 0x01	; 1
   15234:	4d e0       	ldi	r20, 0x0D	; 13
   15236:	0e 94 bd a8 	call	0x1517a	; 0x1517a <uart>
		uart(__com, 1, 0x0A);
   1523a:	81 2f       	mov	r24, r17
   1523c:	61 e0       	ldi	r22, 0x01	; 1
   1523e:	4a e0       	ldi	r20, 0x0A	; 10
   15240:	0e 94 bd a8 	call	0x1517a	; 0x1517a <uart>
   15244:	86 ea       	ldi	r24, 0xA6	; 166
   15246:	9e e0       	ldi	r25, 0x0E	; 14
   15248:	01 97       	sbiw	r24, 0x01	; 1
   1524a:	f1 f7       	brne	.-4      	; 0x15248 <uart_printf+0x44>
	}
	_delay_ms(15);
}
   1524c:	df 91       	pop	r29
   1524e:	cf 91       	pop	r28
   15250:	1f 91       	pop	r17
   15252:	0f 91       	pop	r16
   15254:	08 95       	ret

00015256 <Int2Str>:

void Int2Str(char* __string, unsigned long __value){
   15256:	6f 92       	push	r6
   15258:	7f 92       	push	r7
   1525a:	8f 92       	push	r8
   1525c:	9f 92       	push	r9
   1525e:	af 92       	push	r10
   15260:	bf 92       	push	r11
   15262:	cf 92       	push	r12
   15264:	df 92       	push	r13
   15266:	ef 92       	push	r14
   15268:	ff 92       	push	r15
   1526a:	0f 93       	push	r16
   1526c:	1f 93       	push	r17
   1526e:	cf 93       	push	r28
   15270:	df 93       	push	r29
   15272:	ec 01       	movw	r28, r24
	char			__flag = 0, __i = 0, __count;
	unsigned long	__num, __devider = 1000000000;
	int				__tmp;

	if(__value == 0){
   15274:	41 15       	cp	r20, r1
   15276:	51 05       	cpc	r21, r1
   15278:	61 05       	cpc	r22, r1
   1527a:	71 05       	cpc	r23, r1
   1527c:	21 f4       	brne	.+8      	; 0x15286 <Int2Str+0x30>
		__string[0] = '0';
   1527e:	80 e3       	ldi	r24, 0x30	; 48
   15280:	88 83       	st	Y, r24
		__string[1] = '\0';
   15282:	19 82       	std	Y+1, r1	; 0x01
   15284:	48 c0       	rjmp	.+144    	; 0x15316 <Int2Str+0xc0>
		return;
   15286:	4a 01       	movw	r8, r20
   15288:	5b 01       	movw	r10, r22
   1528a:	c1 2c       	mov	r12, r1
   1528c:	ba ec       	ldi	r27, 0xCA	; 202
   1528e:	db 2e       	mov	r13, r27
   15290:	ba e9       	ldi	r27, 0x9A	; 154
   15292:	eb 2e       	mov	r14, r27
   15294:	bb e3       	ldi	r27, 0x3B	; 59
   15296:	fb 2e       	mov	r15, r27
   15298:	10 e0       	ldi	r17, 0x00	; 0
   1529a:	00 e0       	ldi	r16, 0x00	; 0
   1529c:	77 24       	eor	r7, r7
			if(!__flag)
				__flag = 1;
		}
		else
			if(__flag)
				__string[__i++] = 0x30;
   1529e:	a0 e3       	ldi	r26, 0x30	; 48
   152a0:	6a 2e       	mov	r6, r26
		return;
	}

	__num = __value;
	for(__count = 0; __count < 10; __count++){
		if(__num >= __devider){
   152a2:	8c 14       	cp	r8, r12
   152a4:	9d 04       	cpc	r9, r13
   152a6:	ae 04       	cpc	r10, r14
   152a8:	bf 04       	cpc	r11, r15
   152aa:	d0 f0       	brcs	.+52     	; 0x152e0 <Int2Str+0x8a>
			__tmp = (int)(__num / __devider);
   152ac:	c5 01       	movw	r24, r10
   152ae:	b4 01       	movw	r22, r8
   152b0:	a7 01       	movw	r20, r14
   152b2:	96 01       	movw	r18, r12
   152b4:	0e 94 8c aa 	call	0x15518	; 0x15518 <__udivmodsi4>
   152b8:	12 2f       	mov	r17, r18
			__num = __num % __devider;
   152ba:	c5 01       	movw	r24, r10
   152bc:	b4 01       	movw	r22, r8
   152be:	a7 01       	movw	r20, r14
   152c0:	96 01       	movw	r18, r12
   152c2:	0e 94 8c aa 	call	0x15518	; 0x15518 <__udivmodsi4>
   152c6:	ac 01       	movw	r20, r24
   152c8:	cb 01       	movw	r24, r22
   152ca:	da 01       	movw	r26, r20
   152cc:	4c 01       	movw	r8, r24
   152ce:	5d 01       	movw	r10, r26
			__string[__i++] = __tmp + 0x30;
   152d0:	fe 01       	movw	r30, r28
   152d2:	e0 0f       	add	r30, r16
   152d4:	f1 1d       	adc	r31, r1
   152d6:	10 5d       	subi	r17, 0xD0	; 208
   152d8:	10 83       	st	Z, r17
   152da:	0f 5f       	subi	r16, 0xFF	; 255
   152dc:	11 e0       	ldi	r17, 0x01	; 1
   152de:	07 c0       	rjmp	.+14     	; 0x152ee <Int2Str+0x98>
			if(!__flag)
				__flag = 1;
		}
		else
			if(__flag)
   152e0:	11 23       	and	r17, r17
   152e2:	29 f0       	breq	.+10     	; 0x152ee <Int2Str+0x98>
				__string[__i++] = 0x30;
   152e4:	fe 01       	movw	r30, r28
   152e6:	e0 0f       	add	r30, r16
   152e8:	f1 1d       	adc	r31, r1
   152ea:	60 82       	st	Z, r6
   152ec:	0f 5f       	subi	r16, 0xFF	; 255
		__string[1] = '\0';
		return;
	}

	__num = __value;
	for(__count = 0; __count < 10; __count++){
   152ee:	73 94       	inc	r7
   152f0:	8a e0       	ldi	r24, 0x0A	; 10
   152f2:	78 16       	cp	r7, r24
   152f4:	69 f0       	breq	.+26     	; 0x15310 <Int2Str+0xba>
				__flag = 1;
		}
		else
			if(__flag)
				__string[__i++] = 0x30;
		__devider = __devider / 10;
   152f6:	c7 01       	movw	r24, r14
   152f8:	b6 01       	movw	r22, r12
   152fa:	2a e0       	ldi	r18, 0x0A	; 10
   152fc:	30 e0       	ldi	r19, 0x00	; 0
   152fe:	40 e0       	ldi	r20, 0x00	; 0
   15300:	50 e0       	ldi	r21, 0x00	; 0
   15302:	0e 94 8c aa 	call	0x15518	; 0x15518 <__udivmodsi4>
   15306:	c9 01       	movw	r24, r18
   15308:	da 01       	movw	r26, r20
   1530a:	6c 01       	movw	r12, r24
   1530c:	7d 01       	movw	r14, r26
   1530e:	c9 cf       	rjmp	.-110    	; 0x152a2 <Int2Str+0x4c>
	}
	__string[__i] = '\0';
   15310:	c0 0f       	add	r28, r16
   15312:	d1 1d       	adc	r29, r1
   15314:	18 82       	st	Y, r1
}
   15316:	df 91       	pop	r29
   15318:	cf 91       	pop	r28
   1531a:	1f 91       	pop	r17
   1531c:	0f 91       	pop	r16
   1531e:	ff 90       	pop	r15
   15320:	ef 90       	pop	r14
   15322:	df 90       	pop	r13
   15324:	cf 90       	pop	r12
   15326:	bf 90       	pop	r11
   15328:	af 90       	pop	r10
   1532a:	9f 90       	pop	r9
   1532c:	8f 90       	pop	r8
   1532e:	7f 90       	pop	r7
   15330:	6f 90       	pop	r6
   15332:	08 95       	ret

00015334 <Str2Int>:

unsigned long Str2Int(char* __string){
   15334:	6f 92       	push	r6
   15336:	7f 92       	push	r7
   15338:	8f 92       	push	r8
   1533a:	9f 92       	push	r9
   1533c:	af 92       	push	r10
   1533e:	bf 92       	push	r11
   15340:	cf 92       	push	r12
   15342:	df 92       	push	r13
   15344:	ef 92       	push	r14
   15346:	ff 92       	push	r15
   15348:	0f 93       	push	r16
   1534a:	1f 93       	push	r17
   1534c:	cf 93       	push	r28
   1534e:	df 93       	push	r29
   15350:	ec 01       	movw	r28, r24
	unsigned char	__i, __len;
	unsigned long	__multiplier = 1, __retval = 0;

	__len = strlen(__string);
   15352:	dc 01       	movw	r26, r24
   15354:	0d 90       	ld	r0, X+
   15356:	00 20       	and	r0, r0
   15358:	e9 f7       	brne	.-6      	; 0x15354 <Str2Int+0x20>
   1535a:	11 97       	sbiw	r26, 0x01	; 1
   1535c:	7a 2e       	mov	r7, r26
   1535e:	78 1a       	sub	r7, r24

	if(__len > 0 && __len < 11){
   15360:	87 2d       	mov	r24, r7
   15362:	81 50       	subi	r24, 0x01	; 1
   15364:	8a 30       	cpi	r24, 0x0A	; 10
   15366:	08 f0       	brcs	.+2      	; 0x1536a <Str2Int+0x36>
   15368:	64 c0       	rjmp	.+200    	; 0x15432 <Str2Int+0xfe>
   1536a:	4e 01       	movw	r8, r28
   1536c:	fe 01       	movw	r30, r28
		__devider = __devider / 10;
	}
	__string[__i] = '\0';
}

unsigned long Str2Int(char* __string){
   1536e:	6c 2e       	mov	r6, r28
   15370:	05 c0       	rjmp	.+10     	; 0x1537c <Str2Int+0x48>

	__len = strlen(__string);

	if(__len > 0 && __len < 11){
		for(__i = 0; __i < __len; __i++)
			if(__string[__i] < 0x30 || __string[__i] > 0x39)
   15372:	81 91       	ld	r24, Z+
   15374:	80 53       	subi	r24, 0x30	; 48
   15376:	8a 30       	cpi	r24, 0x0A	; 10
   15378:	08 f0       	brcs	.+2      	; 0x1537c <Str2Int+0x48>
   1537a:	5b c0       	rjmp	.+182    	; 0x15432 <Str2Int+0xfe>
	unsigned long	__multiplier = 1, __retval = 0;

	__len = strlen(__string);

	if(__len > 0 && __len < 11){
		for(__i = 0; __i < __len; __i++)
   1537c:	8e 2f       	mov	r24, r30
   1537e:	86 19       	sub	r24, r6
   15380:	87 15       	cp	r24, r7
   15382:	b8 f3       	brcs	.-18     	; 0x15372 <Str2Int+0x3e>
			if(__string[__i] < 0x30 || __string[__i] > 0x39)
				return 0;
		if(__len == 10){
   15384:	8a e0       	ldi	r24, 0x0A	; 10
   15386:	78 16       	cp	r7, r24
   15388:	f9 f4       	brne	.+62     	; 0x153c8 <Str2Int+0x94>
			if(__string[0] < 0x30 || __string[0] > 0x32)
   1538a:	98 81       	ld	r25, Y
   1538c:	89 2f       	mov	r24, r25
   1538e:	80 53       	subi	r24, 0x30	; 48
   15390:	83 30       	cpi	r24, 0x03	; 3
   15392:	08 f0       	brcs	.+2      	; 0x15396 <Str2Int+0x62>
   15394:	4e c0       	rjmp	.+156    	; 0x15432 <Str2Int+0xfe>
				return 0;
			if(__string[0] == 0x32){
   15396:	92 33       	cpi	r25, 0x32	; 50
   15398:	b9 f4       	brne	.+46     	; 0x153c8 <Str2Int+0x94>
   1539a:	fe 01       	movw	r30, r28
   1539c:	91 e0       	ldi	r25, 0x01	; 1
				for(__i = 1; __i < __len; __i++)
					if(__string[__i] < 0x30 || __string[__i] > 0x30)
   1539e:	81 81       	ldd	r24, Z+1	; 0x01
   153a0:	80 33       	cpi	r24, 0x30	; 48
   153a2:	09 f0       	breq	.+2      	; 0x153a6 <Str2Int+0x72>
   153a4:	46 c0       	rjmp	.+140    	; 0x15432 <Str2Int+0xfe>
				return 0;
		if(__len == 10){
			if(__string[0] < 0x30 || __string[0] > 0x32)
				return 0;
			if(__string[0] == 0x32){
				for(__i = 1; __i < __len; __i++)
   153a6:	9f 5f       	subi	r25, 0xFF	; 255
   153a8:	31 96       	adiw	r30, 0x01	; 1
   153aa:	9a 30       	cpi	r25, 0x0A	; 10
   153ac:	c1 f7       	brne	.-16     	; 0x1539e <Str2Int+0x6a>
   153ae:	0c c0       	rjmp	.+24     	; 0x153c8 <Str2Int+0x94>
					if(__string[__i] < 0x30 || __string[__i] > 0x30)
						return 0;
			}
		}
		for(__i = 0; __i < __len - 1; __i++)
			__multiplier *= 10;
   153b0:	c6 01       	movw	r24, r12
   153b2:	b5 01       	movw	r22, r10
   153b4:	2a e0       	ldi	r18, 0x0A	; 10
   153b6:	30 e0       	ldi	r19, 0x00	; 0
   153b8:	40 e0       	ldi	r20, 0x00	; 0
   153ba:	50 e0       	ldi	r21, 0x00	; 0
   153bc:	0e 94 2d aa 	call	0x1545a	; 0x1545a <__mulsi3>
   153c0:	5b 01       	movw	r10, r22
   153c2:	6c 01       	movw	r12, r24
				for(__i = 1; __i < __len; __i++)
					if(__string[__i] < 0x30 || __string[__i] > 0x30)
						return 0;
			}
		}
		for(__i = 0; __i < __len - 1; __i++)
   153c4:	1f 5f       	subi	r17, 0xFF	; 255
   153c6:	09 c0       	rjmp	.+18     	; 0x153da <Str2Int+0xa6>
   153c8:	10 e0       	ldi	r17, 0x00	; 0
   153ca:	01 e0       	ldi	r16, 0x01	; 1
   153cc:	a0 2e       	mov	r10, r16
   153ce:	b1 2c       	mov	r11, r1
   153d0:	c1 2c       	mov	r12, r1
   153d2:	d1 2c       	mov	r13, r1
   153d4:	c7 2d       	mov	r28, r7
   153d6:	d0 e0       	ldi	r29, 0x00	; 0
   153d8:	21 97       	sbiw	r28, 0x01	; 1
   153da:	81 2f       	mov	r24, r17
   153dc:	90 e0       	ldi	r25, 0x00	; 0
   153de:	8c 17       	cp	r24, r28
   153e0:	9d 07       	cpc	r25, r29
   153e2:	34 f3       	brlt	.-52     	; 0x153b0 <Str2Int+0x7c>
   153e4:	ee 24       	eor	r14, r14
   153e6:	ff 24       	eor	r15, r15
   153e8:	87 01       	movw	r16, r14
   153ea:	1e c0       	rjmp	.+60     	; 0x15428 <Str2Int+0xf4>
			__multiplier *= 10;
		for(__i = 0; __i < __len; __i++, __multiplier /= 10)
			__retval += ((unsigned long)(__string[__i] - 0x30) * __multiplier);
   153ec:	f4 01       	movw	r30, r8
   153ee:	21 91       	ld	r18, Z+
   153f0:	4f 01       	movw	r8, r30
   153f2:	30 e0       	ldi	r19, 0x00	; 0
   153f4:	20 53       	subi	r18, 0x30	; 48
   153f6:	30 40       	sbci	r19, 0x00	; 0
   153f8:	44 27       	eor	r20, r20
   153fa:	37 fd       	sbrc	r19, 7
   153fc:	40 95       	com	r20
   153fe:	54 2f       	mov	r21, r20
   15400:	c6 01       	movw	r24, r12
   15402:	b5 01       	movw	r22, r10
   15404:	0e 94 2d aa 	call	0x1545a	; 0x1545a <__mulsi3>
   15408:	e6 0e       	add	r14, r22
   1540a:	f7 1e       	adc	r15, r23
   1540c:	08 1f       	adc	r16, r24
   1540e:	19 1f       	adc	r17, r25
						return 0;
			}
		}
		for(__i = 0; __i < __len - 1; __i++)
			__multiplier *= 10;
		for(__i = 0; __i < __len; __i++, __multiplier /= 10)
   15410:	c6 01       	movw	r24, r12
   15412:	b5 01       	movw	r22, r10
   15414:	2a e0       	ldi	r18, 0x0A	; 10
   15416:	30 e0       	ldi	r19, 0x00	; 0
   15418:	40 e0       	ldi	r20, 0x00	; 0
   1541a:	50 e0       	ldi	r21, 0x00	; 0
   1541c:	0e 94 8c aa 	call	0x15518	; 0x15518 <__udivmodsi4>
   15420:	c9 01       	movw	r24, r18
   15422:	da 01       	movw	r26, r20
   15424:	5c 01       	movw	r10, r24
   15426:	6d 01       	movw	r12, r26
   15428:	88 2d       	mov	r24, r8
   1542a:	86 19       	sub	r24, r6
   1542c:	87 15       	cp	r24, r7
   1542e:	f0 f2       	brcs	.-68     	; 0x153ec <Str2Int+0xb8>
   15430:	03 c0       	rjmp	.+6      	; 0x15438 <Str2Int+0x104>
   15432:	ee 24       	eor	r14, r14
   15434:	ff 24       	eor	r15, r15
   15436:	87 01       	movw	r16, r14
			__retval += ((unsigned long)(__string[__i] - 0x30) * __multiplier);
	}
	return __retval;
}
   15438:	b7 01       	movw	r22, r14
   1543a:	c8 01       	movw	r24, r16
   1543c:	df 91       	pop	r29
   1543e:	cf 91       	pop	r28
   15440:	1f 91       	pop	r17
   15442:	0f 91       	pop	r16
   15444:	ff 90       	pop	r15
   15446:	ef 90       	pop	r14
   15448:	df 90       	pop	r13
   1544a:	cf 90       	pop	r12
   1544c:	bf 90       	pop	r11
   1544e:	af 90       	pop	r10
   15450:	9f 90       	pop	r9
   15452:	8f 90       	pop	r8
   15454:	7f 90       	pop	r7
   15456:	6f 90       	pop	r6
   15458:	08 95       	ret

0001545a <__mulsi3>:
   1545a:	62 9f       	mul	r22, r18
   1545c:	d0 01       	movw	r26, r0
   1545e:	73 9f       	mul	r23, r19
   15460:	f0 01       	movw	r30, r0
   15462:	82 9f       	mul	r24, r18
   15464:	e0 0d       	add	r30, r0
   15466:	f1 1d       	adc	r31, r1
   15468:	64 9f       	mul	r22, r20
   1546a:	e0 0d       	add	r30, r0
   1546c:	f1 1d       	adc	r31, r1
   1546e:	92 9f       	mul	r25, r18
   15470:	f0 0d       	add	r31, r0
   15472:	83 9f       	mul	r24, r19
   15474:	f0 0d       	add	r31, r0
   15476:	74 9f       	mul	r23, r20
   15478:	f0 0d       	add	r31, r0
   1547a:	65 9f       	mul	r22, r21
   1547c:	f0 0d       	add	r31, r0
   1547e:	99 27       	eor	r25, r25
   15480:	72 9f       	mul	r23, r18
   15482:	b0 0d       	add	r27, r0
   15484:	e1 1d       	adc	r30, r1
   15486:	f9 1f       	adc	r31, r25
   15488:	63 9f       	mul	r22, r19
   1548a:	b0 0d       	add	r27, r0
   1548c:	e1 1d       	adc	r30, r1
   1548e:	f9 1f       	adc	r31, r25
   15490:	bd 01       	movw	r22, r26
   15492:	cf 01       	movw	r24, r30
   15494:	11 24       	eor	r1, r1
   15496:	08 95       	ret

00015498 <__udivmodqi4>:
   15498:	99 1b       	sub	r25, r25
   1549a:	79 e0       	ldi	r23, 0x09	; 9
   1549c:	04 c0       	rjmp	.+8      	; 0x154a6 <__udivmodqi4_ep>

0001549e <__udivmodqi4_loop>:
   1549e:	99 1f       	adc	r25, r25
   154a0:	96 17       	cp	r25, r22
   154a2:	08 f0       	brcs	.+2      	; 0x154a6 <__udivmodqi4_ep>
   154a4:	96 1b       	sub	r25, r22

000154a6 <__udivmodqi4_ep>:
   154a6:	88 1f       	adc	r24, r24
   154a8:	7a 95       	dec	r23
   154aa:	c9 f7       	brne	.-14     	; 0x1549e <__udivmodqi4_loop>
   154ac:	80 95       	com	r24
   154ae:	08 95       	ret

000154b0 <__divmodqi4>:
   154b0:	87 fb       	bst	r24, 7
   154b2:	08 2e       	mov	r0, r24
   154b4:	06 26       	eor	r0, r22
   154b6:	87 fd       	sbrc	r24, 7
   154b8:	81 95       	neg	r24
   154ba:	67 fd       	sbrc	r22, 7
   154bc:	61 95       	neg	r22
   154be:	ec df       	rcall	.-40     	; 0x15498 <__udivmodqi4>
   154c0:	0e f4       	brtc	.+2      	; 0x154c4 <__divmodqi4_1>
   154c2:	91 95       	neg	r25

000154c4 <__divmodqi4_1>:
   154c4:	07 fc       	sbrc	r0, 7
   154c6:	81 95       	neg	r24

000154c8 <__divmodqi4_exit>:
   154c8:	08 95       	ret

000154ca <__udivmodhi4>:
   154ca:	aa 1b       	sub	r26, r26
   154cc:	bb 1b       	sub	r27, r27
   154ce:	51 e1       	ldi	r21, 0x11	; 17
   154d0:	07 c0       	rjmp	.+14     	; 0x154e0 <__udivmodhi4_ep>

000154d2 <__udivmodhi4_loop>:
   154d2:	aa 1f       	adc	r26, r26
   154d4:	bb 1f       	adc	r27, r27
   154d6:	a6 17       	cp	r26, r22
   154d8:	b7 07       	cpc	r27, r23
   154da:	10 f0       	brcs	.+4      	; 0x154e0 <__udivmodhi4_ep>
   154dc:	a6 1b       	sub	r26, r22
   154de:	b7 0b       	sbc	r27, r23

000154e0 <__udivmodhi4_ep>:
   154e0:	88 1f       	adc	r24, r24
   154e2:	99 1f       	adc	r25, r25
   154e4:	5a 95       	dec	r21
   154e6:	a9 f7       	brne	.-22     	; 0x154d2 <__udivmodhi4_loop>
   154e8:	80 95       	com	r24
   154ea:	90 95       	com	r25
   154ec:	bc 01       	movw	r22, r24
   154ee:	cd 01       	movw	r24, r26
   154f0:	08 95       	ret

000154f2 <__divmodhi4>:
   154f2:	97 fb       	bst	r25, 7
   154f4:	09 2e       	mov	r0, r25
   154f6:	07 26       	eor	r0, r23
   154f8:	0a d0       	rcall	.+20     	; 0x1550e <__divmodhi4_neg1>
   154fa:	77 fd       	sbrc	r23, 7
   154fc:	04 d0       	rcall	.+8      	; 0x15506 <__divmodhi4_neg2>
   154fe:	e5 df       	rcall	.-54     	; 0x154ca <__udivmodhi4>
   15500:	06 d0       	rcall	.+12     	; 0x1550e <__divmodhi4_neg1>
   15502:	00 20       	and	r0, r0
   15504:	1a f4       	brpl	.+6      	; 0x1550c <__divmodhi4_exit>

00015506 <__divmodhi4_neg2>:
   15506:	70 95       	com	r23
   15508:	61 95       	neg	r22
   1550a:	7f 4f       	sbci	r23, 0xFF	; 255

0001550c <__divmodhi4_exit>:
   1550c:	08 95       	ret

0001550e <__divmodhi4_neg1>:
   1550e:	f6 f7       	brtc	.-4      	; 0x1550c <__divmodhi4_exit>
   15510:	90 95       	com	r25
   15512:	81 95       	neg	r24
   15514:	9f 4f       	sbci	r25, 0xFF	; 255
   15516:	08 95       	ret

00015518 <__udivmodsi4>:
   15518:	a1 e2       	ldi	r26, 0x21	; 33
   1551a:	1a 2e       	mov	r1, r26
   1551c:	aa 1b       	sub	r26, r26
   1551e:	bb 1b       	sub	r27, r27
   15520:	fd 01       	movw	r30, r26
   15522:	0d c0       	rjmp	.+26     	; 0x1553e <__udivmodsi4_ep>

00015524 <__udivmodsi4_loop>:
   15524:	aa 1f       	adc	r26, r26
   15526:	bb 1f       	adc	r27, r27
   15528:	ee 1f       	adc	r30, r30
   1552a:	ff 1f       	adc	r31, r31
   1552c:	a2 17       	cp	r26, r18
   1552e:	b3 07       	cpc	r27, r19
   15530:	e4 07       	cpc	r30, r20
   15532:	f5 07       	cpc	r31, r21
   15534:	20 f0       	brcs	.+8      	; 0x1553e <__udivmodsi4_ep>
   15536:	a2 1b       	sub	r26, r18
   15538:	b3 0b       	sbc	r27, r19
   1553a:	e4 0b       	sbc	r30, r20
   1553c:	f5 0b       	sbc	r31, r21

0001553e <__udivmodsi4_ep>:
   1553e:	66 1f       	adc	r22, r22
   15540:	77 1f       	adc	r23, r23
   15542:	88 1f       	adc	r24, r24
   15544:	99 1f       	adc	r25, r25
   15546:	1a 94       	dec	r1
   15548:	69 f7       	brne	.-38     	; 0x15524 <__udivmodsi4_loop>
   1554a:	60 95       	com	r22
   1554c:	70 95       	com	r23
   1554e:	80 95       	com	r24
   15550:	90 95       	com	r25
   15552:	9b 01       	movw	r18, r22
   15554:	ac 01       	movw	r20, r24
   15556:	bd 01       	movw	r22, r26
   15558:	cf 01       	movw	r24, r30
   1555a:	08 95       	ret

0001555c <atoi>:
   1555c:	fc 01       	movw	r30, r24
   1555e:	88 27       	eor	r24, r24
   15560:	99 27       	eor	r25, r25
   15562:	e8 94       	clt
   15564:	21 91       	ld	r18, Z+
   15566:	20 32       	cpi	r18, 0x20	; 32
   15568:	e9 f3       	breq	.-6      	; 0x15564 <atoi+0x8>
   1556a:	29 30       	cpi	r18, 0x09	; 9
   1556c:	10 f0       	brcs	.+4      	; 0x15572 <atoi+0x16>
   1556e:	2e 30       	cpi	r18, 0x0E	; 14
   15570:	c8 f3       	brcs	.-14     	; 0x15564 <atoi+0x8>
   15572:	2b 32       	cpi	r18, 0x2B	; 43
   15574:	41 f0       	breq	.+16     	; 0x15586 <atoi+0x2a>
   15576:	2d 32       	cpi	r18, 0x2D	; 45
   15578:	39 f4       	brne	.+14     	; 0x15588 <atoi+0x2c>
   1557a:	68 94       	set
   1557c:	04 c0       	rjmp	.+8      	; 0x15586 <atoi+0x2a>
   1557e:	0e 94 dc aa 	call	0x155b8	; 0x155b8 <__mulhi_const_10>
   15582:	82 0f       	add	r24, r18
   15584:	91 1d       	adc	r25, r1
   15586:	21 91       	ld	r18, Z+
   15588:	20 53       	subi	r18, 0x30	; 48
   1558a:	2a 30       	cpi	r18, 0x0A	; 10
   1558c:	c0 f3       	brcs	.-16     	; 0x1557e <atoi+0x22>
   1558e:	1e f4       	brtc	.+6      	; 0x15596 <atoi+0x3a>
   15590:	90 95       	com	r25
   15592:	81 95       	neg	r24
   15594:	9f 4f       	sbci	r25, 0xFF	; 255
   15596:	08 95       	ret

00015598 <strcpy_P>:
   15598:	fb 01       	movw	r30, r22
   1559a:	dc 01       	movw	r26, r24
   1559c:	05 90       	lpm	r0, Z+
   1559e:	0d 92       	st	X+, r0
   155a0:	00 20       	and	r0, r0
   155a2:	e1 f7       	brne	.-8      	; 0x1559c <strcpy_P+0x4>
   155a4:	08 95       	ret

000155a6 <strcmp>:
   155a6:	fb 01       	movw	r30, r22
   155a8:	dc 01       	movw	r26, r24
   155aa:	8d 91       	ld	r24, X+
   155ac:	01 90       	ld	r0, Z+
   155ae:	80 19       	sub	r24, r0
   155b0:	01 10       	cpse	r0, r1
   155b2:	d9 f3       	breq	.-10     	; 0x155aa <strcmp+0x4>
   155b4:	99 0b       	sbc	r25, r25
   155b6:	08 95       	ret

000155b8 <__mulhi_const_10>:
   155b8:	7a e0       	ldi	r23, 0x0A	; 10
   155ba:	97 9f       	mul	r25, r23
   155bc:	90 2d       	mov	r25, r0
   155be:	87 9f       	mul	r24, r23
   155c0:	80 2d       	mov	r24, r0
   155c2:	91 0d       	add	r25, r1
   155c4:	11 24       	eor	r1, r1
   155c6:	08 95       	ret

000155c8 <sprintf_P>:
   155c8:	0f 93       	push	r16
   155ca:	1f 93       	push	r17
   155cc:	df 93       	push	r29
   155ce:	cf 93       	push	r28
   155d0:	cd b7       	in	r28, 0x3d	; 61
   155d2:	de b7       	in	r29, 0x3e	; 62
   155d4:	2e 97       	sbiw	r28, 0x0e	; 14
   155d6:	0f b6       	in	r0, 0x3f	; 63
   155d8:	f8 94       	cli
   155da:	de bf       	out	0x3e, r29	; 62
   155dc:	0f be       	out	0x3f, r0	; 63
   155de:	cd bf       	out	0x3d, r28	; 61
   155e0:	0d 89       	ldd	r16, Y+21	; 0x15
   155e2:	1e 89       	ldd	r17, Y+22	; 0x16
   155e4:	8e e0       	ldi	r24, 0x0E	; 14
   155e6:	8c 83       	std	Y+4, r24	; 0x04
   155e8:	1a 83       	std	Y+2, r17	; 0x02
   155ea:	09 83       	std	Y+1, r16	; 0x01
   155ec:	8f ef       	ldi	r24, 0xFF	; 255
   155ee:	9f e7       	ldi	r25, 0x7F	; 127
   155f0:	9e 83       	std	Y+6, r25	; 0x06
   155f2:	8d 83       	std	Y+5, r24	; 0x05
   155f4:	9e 01       	movw	r18, r28
   155f6:	27 5e       	subi	r18, 0xE7	; 231
   155f8:	3f 4f       	sbci	r19, 0xFF	; 255
   155fa:	ce 01       	movw	r24, r28
   155fc:	01 96       	adiw	r24, 0x01	; 1
   155fe:	6f 89       	ldd	r22, Y+23	; 0x17
   15600:	78 8d       	ldd	r23, Y+24	; 0x18
   15602:	a9 01       	movw	r20, r18
   15604:	0e 94 15 ab 	call	0x1562a	; 0x1562a <vfprintf>
   15608:	2f 81       	ldd	r18, Y+7	; 0x07
   1560a:	38 85       	ldd	r19, Y+8	; 0x08
   1560c:	02 0f       	add	r16, r18
   1560e:	13 1f       	adc	r17, r19
   15610:	f8 01       	movw	r30, r16
   15612:	10 82       	st	Z, r1
   15614:	2e 96       	adiw	r28, 0x0e	; 14
   15616:	0f b6       	in	r0, 0x3f	; 63
   15618:	f8 94       	cli
   1561a:	de bf       	out	0x3e, r29	; 62
   1561c:	0f be       	out	0x3f, r0	; 63
   1561e:	cd bf       	out	0x3d, r28	; 61
   15620:	cf 91       	pop	r28
   15622:	df 91       	pop	r29
   15624:	1f 91       	pop	r17
   15626:	0f 91       	pop	r16
   15628:	08 95       	ret

0001562a <vfprintf>:
   1562a:	2f 92       	push	r2
   1562c:	3f 92       	push	r3
   1562e:	4f 92       	push	r4
   15630:	5f 92       	push	r5
   15632:	6f 92       	push	r6
   15634:	7f 92       	push	r7
   15636:	8f 92       	push	r8
   15638:	9f 92       	push	r9
   1563a:	af 92       	push	r10
   1563c:	bf 92       	push	r11
   1563e:	cf 92       	push	r12
   15640:	df 92       	push	r13
   15642:	ef 92       	push	r14
   15644:	ff 92       	push	r15
   15646:	0f 93       	push	r16
   15648:	1f 93       	push	r17
   1564a:	df 93       	push	r29
   1564c:	cf 93       	push	r28
   1564e:	cd b7       	in	r28, 0x3d	; 61
   15650:	de b7       	in	r29, 0x3e	; 62
   15652:	2b 97       	sbiw	r28, 0x0b	; 11
   15654:	0f b6       	in	r0, 0x3f	; 63
   15656:	f8 94       	cli
   15658:	de bf       	out	0x3e, r29	; 62
   1565a:	0f be       	out	0x3f, r0	; 63
   1565c:	cd bf       	out	0x3d, r28	; 61
   1565e:	3c 01       	movw	r6, r24
   15660:	2b 01       	movw	r4, r22
   15662:	5a 01       	movw	r10, r20
   15664:	fc 01       	movw	r30, r24
   15666:	17 82       	std	Z+7, r1	; 0x07
   15668:	16 82       	std	Z+6, r1	; 0x06
   1566a:	83 81       	ldd	r24, Z+3	; 0x03
   1566c:	81 fd       	sbrc	r24, 1
   1566e:	03 c0       	rjmp	.+6      	; 0x15676 <vfprintf+0x4c>
   15670:	6f ef       	ldi	r22, 0xFF	; 255
   15672:	7f ef       	ldi	r23, 0xFF	; 255
   15674:	c6 c1       	rjmp	.+908    	; 0x15a02 <vfprintf+0x3d8>
   15676:	9a e0       	ldi	r25, 0x0A	; 10
   15678:	89 2e       	mov	r8, r25
   1567a:	1e 01       	movw	r2, r28
   1567c:	08 94       	sec
   1567e:	21 1c       	adc	r2, r1
   15680:	31 1c       	adc	r3, r1
   15682:	f3 01       	movw	r30, r6
   15684:	23 81       	ldd	r18, Z+3	; 0x03
   15686:	f2 01       	movw	r30, r4
   15688:	23 fd       	sbrc	r18, 3
   1568a:	85 91       	lpm	r24, Z+
   1568c:	23 ff       	sbrs	r18, 3
   1568e:	81 91       	ld	r24, Z+
   15690:	2f 01       	movw	r4, r30
   15692:	88 23       	and	r24, r24
   15694:	09 f4       	brne	.+2      	; 0x15698 <vfprintf+0x6e>
   15696:	b2 c1       	rjmp	.+868    	; 0x159fc <vfprintf+0x3d2>
   15698:	85 32       	cpi	r24, 0x25	; 37
   1569a:	39 f4       	brne	.+14     	; 0x156aa <vfprintf+0x80>
   1569c:	23 fd       	sbrc	r18, 3
   1569e:	85 91       	lpm	r24, Z+
   156a0:	23 ff       	sbrs	r18, 3
   156a2:	81 91       	ld	r24, Z+
   156a4:	2f 01       	movw	r4, r30
   156a6:	85 32       	cpi	r24, 0x25	; 37
   156a8:	29 f4       	brne	.+10     	; 0x156b4 <vfprintf+0x8a>
   156aa:	90 e0       	ldi	r25, 0x00	; 0
   156ac:	b3 01       	movw	r22, r6
   156ae:	0e 94 60 ad 	call	0x15ac0	; 0x15ac0 <fputc>
   156b2:	e7 cf       	rjmp	.-50     	; 0x15682 <vfprintf+0x58>
   156b4:	98 2f       	mov	r25, r24
   156b6:	ff 24       	eor	r15, r15
   156b8:	ee 24       	eor	r14, r14
   156ba:	99 24       	eor	r9, r9
   156bc:	ff e1       	ldi	r31, 0x1F	; 31
   156be:	ff 15       	cp	r31, r15
   156c0:	d0 f0       	brcs	.+52     	; 0x156f6 <vfprintf+0xcc>
   156c2:	9b 32       	cpi	r25, 0x2B	; 43
   156c4:	69 f0       	breq	.+26     	; 0x156e0 <vfprintf+0xb6>
   156c6:	9c 32       	cpi	r25, 0x2C	; 44
   156c8:	28 f4       	brcc	.+10     	; 0x156d4 <vfprintf+0xaa>
   156ca:	90 32       	cpi	r25, 0x20	; 32
   156cc:	59 f0       	breq	.+22     	; 0x156e4 <vfprintf+0xba>
   156ce:	93 32       	cpi	r25, 0x23	; 35
   156d0:	91 f4       	brne	.+36     	; 0x156f6 <vfprintf+0xcc>
   156d2:	0e c0       	rjmp	.+28     	; 0x156f0 <vfprintf+0xc6>
   156d4:	9d 32       	cpi	r25, 0x2D	; 45
   156d6:	49 f0       	breq	.+18     	; 0x156ea <vfprintf+0xc0>
   156d8:	90 33       	cpi	r25, 0x30	; 48
   156da:	69 f4       	brne	.+26     	; 0x156f6 <vfprintf+0xcc>
   156dc:	41 e0       	ldi	r20, 0x01	; 1
   156de:	24 c0       	rjmp	.+72     	; 0x15728 <vfprintf+0xfe>
   156e0:	52 e0       	ldi	r21, 0x02	; 2
   156e2:	f5 2a       	or	r15, r21
   156e4:	84 e0       	ldi	r24, 0x04	; 4
   156e6:	f8 2a       	or	r15, r24
   156e8:	28 c0       	rjmp	.+80     	; 0x1573a <vfprintf+0x110>
   156ea:	98 e0       	ldi	r25, 0x08	; 8
   156ec:	f9 2a       	or	r15, r25
   156ee:	25 c0       	rjmp	.+74     	; 0x1573a <vfprintf+0x110>
   156f0:	e0 e1       	ldi	r30, 0x10	; 16
   156f2:	fe 2a       	or	r15, r30
   156f4:	22 c0       	rjmp	.+68     	; 0x1573a <vfprintf+0x110>
   156f6:	f7 fc       	sbrc	r15, 7
   156f8:	29 c0       	rjmp	.+82     	; 0x1574c <vfprintf+0x122>
   156fa:	89 2f       	mov	r24, r25
   156fc:	80 53       	subi	r24, 0x30	; 48
   156fe:	8a 30       	cpi	r24, 0x0A	; 10
   15700:	70 f4       	brcc	.+28     	; 0x1571e <vfprintf+0xf4>
   15702:	f6 fe       	sbrs	r15, 6
   15704:	05 c0       	rjmp	.+10     	; 0x15710 <vfprintf+0xe6>
   15706:	98 9c       	mul	r9, r8
   15708:	90 2c       	mov	r9, r0
   1570a:	11 24       	eor	r1, r1
   1570c:	98 0e       	add	r9, r24
   1570e:	15 c0       	rjmp	.+42     	; 0x1573a <vfprintf+0x110>
   15710:	e8 9c       	mul	r14, r8
   15712:	e0 2c       	mov	r14, r0
   15714:	11 24       	eor	r1, r1
   15716:	e8 0e       	add	r14, r24
   15718:	f0 e2       	ldi	r31, 0x20	; 32
   1571a:	ff 2a       	or	r15, r31
   1571c:	0e c0       	rjmp	.+28     	; 0x1573a <vfprintf+0x110>
   1571e:	9e 32       	cpi	r25, 0x2E	; 46
   15720:	29 f4       	brne	.+10     	; 0x1572c <vfprintf+0x102>
   15722:	f6 fc       	sbrc	r15, 6
   15724:	6b c1       	rjmp	.+726    	; 0x159fc <vfprintf+0x3d2>
   15726:	40 e4       	ldi	r20, 0x40	; 64
   15728:	f4 2a       	or	r15, r20
   1572a:	07 c0       	rjmp	.+14     	; 0x1573a <vfprintf+0x110>
   1572c:	9c 36       	cpi	r25, 0x6C	; 108
   1572e:	19 f4       	brne	.+6      	; 0x15736 <vfprintf+0x10c>
   15730:	50 e8       	ldi	r21, 0x80	; 128
   15732:	f5 2a       	or	r15, r21
   15734:	02 c0       	rjmp	.+4      	; 0x1573a <vfprintf+0x110>
   15736:	98 36       	cpi	r25, 0x68	; 104
   15738:	49 f4       	brne	.+18     	; 0x1574c <vfprintf+0x122>
   1573a:	f2 01       	movw	r30, r4
   1573c:	23 fd       	sbrc	r18, 3
   1573e:	95 91       	lpm	r25, Z+
   15740:	23 ff       	sbrs	r18, 3
   15742:	91 91       	ld	r25, Z+
   15744:	2f 01       	movw	r4, r30
   15746:	99 23       	and	r25, r25
   15748:	09 f0       	breq	.+2      	; 0x1574c <vfprintf+0x122>
   1574a:	b8 cf       	rjmp	.-144    	; 0x156bc <vfprintf+0x92>
   1574c:	89 2f       	mov	r24, r25
   1574e:	85 54       	subi	r24, 0x45	; 69
   15750:	83 30       	cpi	r24, 0x03	; 3
   15752:	18 f0       	brcs	.+6      	; 0x1575a <vfprintf+0x130>
   15754:	80 52       	subi	r24, 0x20	; 32
   15756:	83 30       	cpi	r24, 0x03	; 3
   15758:	38 f4       	brcc	.+14     	; 0x15768 <vfprintf+0x13e>
   1575a:	44 e0       	ldi	r20, 0x04	; 4
   1575c:	50 e0       	ldi	r21, 0x00	; 0
   1575e:	a4 0e       	add	r10, r20
   15760:	b5 1e       	adc	r11, r21
   15762:	5f e3       	ldi	r21, 0x3F	; 63
   15764:	59 83       	std	Y+1, r21	; 0x01
   15766:	0f c0       	rjmp	.+30     	; 0x15786 <vfprintf+0x15c>
   15768:	93 36       	cpi	r25, 0x63	; 99
   1576a:	31 f0       	breq	.+12     	; 0x15778 <vfprintf+0x14e>
   1576c:	93 37       	cpi	r25, 0x73	; 115
   1576e:	79 f0       	breq	.+30     	; 0x1578e <vfprintf+0x164>
   15770:	93 35       	cpi	r25, 0x53	; 83
   15772:	09 f0       	breq	.+2      	; 0x15776 <vfprintf+0x14c>
   15774:	56 c0       	rjmp	.+172    	; 0x15822 <vfprintf+0x1f8>
   15776:	20 c0       	rjmp	.+64     	; 0x157b8 <vfprintf+0x18e>
   15778:	f5 01       	movw	r30, r10
   1577a:	80 81       	ld	r24, Z
   1577c:	89 83       	std	Y+1, r24	; 0x01
   1577e:	42 e0       	ldi	r20, 0x02	; 2
   15780:	50 e0       	ldi	r21, 0x00	; 0
   15782:	a4 0e       	add	r10, r20
   15784:	b5 1e       	adc	r11, r21
   15786:	61 01       	movw	r12, r2
   15788:	01 e0       	ldi	r16, 0x01	; 1
   1578a:	10 e0       	ldi	r17, 0x00	; 0
   1578c:	12 c0       	rjmp	.+36     	; 0x157b2 <vfprintf+0x188>
   1578e:	f5 01       	movw	r30, r10
   15790:	c0 80       	ld	r12, Z
   15792:	d1 80       	ldd	r13, Z+1	; 0x01
   15794:	f6 fc       	sbrc	r15, 6
   15796:	03 c0       	rjmp	.+6      	; 0x1579e <vfprintf+0x174>
   15798:	6f ef       	ldi	r22, 0xFF	; 255
   1579a:	7f ef       	ldi	r23, 0xFF	; 255
   1579c:	02 c0       	rjmp	.+4      	; 0x157a2 <vfprintf+0x178>
   1579e:	69 2d       	mov	r22, r9
   157a0:	70 e0       	ldi	r23, 0x00	; 0
   157a2:	42 e0       	ldi	r20, 0x02	; 2
   157a4:	50 e0       	ldi	r21, 0x00	; 0
   157a6:	a4 0e       	add	r10, r20
   157a8:	b5 1e       	adc	r11, r21
   157aa:	c6 01       	movw	r24, r12
   157ac:	0e 94 55 ad 	call	0x15aaa	; 0x15aaa <strnlen>
   157b0:	8c 01       	movw	r16, r24
   157b2:	5f e7       	ldi	r21, 0x7F	; 127
   157b4:	f5 22       	and	r15, r21
   157b6:	14 c0       	rjmp	.+40     	; 0x157e0 <vfprintf+0x1b6>
   157b8:	f5 01       	movw	r30, r10
   157ba:	c0 80       	ld	r12, Z
   157bc:	d1 80       	ldd	r13, Z+1	; 0x01
   157be:	f6 fc       	sbrc	r15, 6
   157c0:	03 c0       	rjmp	.+6      	; 0x157c8 <vfprintf+0x19e>
   157c2:	6f ef       	ldi	r22, 0xFF	; 255
   157c4:	7f ef       	ldi	r23, 0xFF	; 255
   157c6:	02 c0       	rjmp	.+4      	; 0x157cc <vfprintf+0x1a2>
   157c8:	69 2d       	mov	r22, r9
   157ca:	70 e0       	ldi	r23, 0x00	; 0
   157cc:	42 e0       	ldi	r20, 0x02	; 2
   157ce:	50 e0       	ldi	r21, 0x00	; 0
   157d0:	a4 0e       	add	r10, r20
   157d2:	b5 1e       	adc	r11, r21
   157d4:	c6 01       	movw	r24, r12
   157d6:	0e 94 4a ad 	call	0x15a94	; 0x15a94 <strnlen_P>
   157da:	8c 01       	movw	r16, r24
   157dc:	50 e8       	ldi	r21, 0x80	; 128
   157de:	f5 2a       	or	r15, r21
   157e0:	f3 fe       	sbrs	r15, 3
   157e2:	07 c0       	rjmp	.+14     	; 0x157f2 <vfprintf+0x1c8>
   157e4:	1a c0       	rjmp	.+52     	; 0x1581a <vfprintf+0x1f0>
   157e6:	80 e2       	ldi	r24, 0x20	; 32
   157e8:	90 e0       	ldi	r25, 0x00	; 0
   157ea:	b3 01       	movw	r22, r6
   157ec:	0e 94 60 ad 	call	0x15ac0	; 0x15ac0 <fputc>
   157f0:	ea 94       	dec	r14
   157f2:	8e 2d       	mov	r24, r14
   157f4:	90 e0       	ldi	r25, 0x00	; 0
   157f6:	08 17       	cp	r16, r24
   157f8:	19 07       	cpc	r17, r25
   157fa:	a8 f3       	brcs	.-22     	; 0x157e6 <vfprintf+0x1bc>
   157fc:	0e c0       	rjmp	.+28     	; 0x1581a <vfprintf+0x1f0>
   157fe:	f6 01       	movw	r30, r12
   15800:	f7 fc       	sbrc	r15, 7
   15802:	85 91       	lpm	r24, Z+
   15804:	f7 fe       	sbrs	r15, 7
   15806:	81 91       	ld	r24, Z+
   15808:	6f 01       	movw	r12, r30
   1580a:	90 e0       	ldi	r25, 0x00	; 0
   1580c:	b3 01       	movw	r22, r6
   1580e:	0e 94 60 ad 	call	0x15ac0	; 0x15ac0 <fputc>
   15812:	e1 10       	cpse	r14, r1
   15814:	ea 94       	dec	r14
   15816:	01 50       	subi	r16, 0x01	; 1
   15818:	10 40       	sbci	r17, 0x00	; 0
   1581a:	01 15       	cp	r16, r1
   1581c:	11 05       	cpc	r17, r1
   1581e:	79 f7       	brne	.-34     	; 0x157fe <vfprintf+0x1d4>
   15820:	ea c0       	rjmp	.+468    	; 0x159f6 <vfprintf+0x3cc>
   15822:	94 36       	cpi	r25, 0x64	; 100
   15824:	11 f0       	breq	.+4      	; 0x1582a <vfprintf+0x200>
   15826:	99 36       	cpi	r25, 0x69	; 105
   15828:	69 f5       	brne	.+90     	; 0x15884 <vfprintf+0x25a>
   1582a:	f7 fe       	sbrs	r15, 7
   1582c:	08 c0       	rjmp	.+16     	; 0x1583e <vfprintf+0x214>
   1582e:	f5 01       	movw	r30, r10
   15830:	20 81       	ld	r18, Z
   15832:	31 81       	ldd	r19, Z+1	; 0x01
   15834:	42 81       	ldd	r20, Z+2	; 0x02
   15836:	53 81       	ldd	r21, Z+3	; 0x03
   15838:	84 e0       	ldi	r24, 0x04	; 4
   1583a:	90 e0       	ldi	r25, 0x00	; 0
   1583c:	0a c0       	rjmp	.+20     	; 0x15852 <vfprintf+0x228>
   1583e:	f5 01       	movw	r30, r10
   15840:	80 81       	ld	r24, Z
   15842:	91 81       	ldd	r25, Z+1	; 0x01
   15844:	9c 01       	movw	r18, r24
   15846:	44 27       	eor	r20, r20
   15848:	37 fd       	sbrc	r19, 7
   1584a:	40 95       	com	r20
   1584c:	54 2f       	mov	r21, r20
   1584e:	82 e0       	ldi	r24, 0x02	; 2
   15850:	90 e0       	ldi	r25, 0x00	; 0
   15852:	a8 0e       	add	r10, r24
   15854:	b9 1e       	adc	r11, r25
   15856:	9f e6       	ldi	r25, 0x6F	; 111
   15858:	f9 22       	and	r15, r25
   1585a:	57 ff       	sbrs	r21, 7
   1585c:	09 c0       	rjmp	.+18     	; 0x15870 <vfprintf+0x246>
   1585e:	50 95       	com	r21
   15860:	40 95       	com	r20
   15862:	30 95       	com	r19
   15864:	21 95       	neg	r18
   15866:	3f 4f       	sbci	r19, 0xFF	; 255
   15868:	4f 4f       	sbci	r20, 0xFF	; 255
   1586a:	5f 4f       	sbci	r21, 0xFF	; 255
   1586c:	e0 e8       	ldi	r30, 0x80	; 128
   1586e:	fe 2a       	or	r15, r30
   15870:	ca 01       	movw	r24, r20
   15872:	b9 01       	movw	r22, r18
   15874:	a1 01       	movw	r20, r2
   15876:	2a e0       	ldi	r18, 0x0A	; 10
   15878:	30 e0       	ldi	r19, 0x00	; 0
   1587a:	0e 94 8c ad 	call	0x15b18	; 0x15b18 <__ultoa_invert>
   1587e:	d8 2e       	mov	r13, r24
   15880:	d2 18       	sub	r13, r2
   15882:	40 c0       	rjmp	.+128    	; 0x15904 <vfprintf+0x2da>
   15884:	95 37       	cpi	r25, 0x75	; 117
   15886:	29 f4       	brne	.+10     	; 0x15892 <vfprintf+0x268>
   15888:	1f 2d       	mov	r17, r15
   1588a:	1f 7e       	andi	r17, 0xEF	; 239
   1588c:	2a e0       	ldi	r18, 0x0A	; 10
   1588e:	30 e0       	ldi	r19, 0x00	; 0
   15890:	1d c0       	rjmp	.+58     	; 0x158cc <vfprintf+0x2a2>
   15892:	1f 2d       	mov	r17, r15
   15894:	19 7f       	andi	r17, 0xF9	; 249
   15896:	9f 36       	cpi	r25, 0x6F	; 111
   15898:	61 f0       	breq	.+24     	; 0x158b2 <vfprintf+0x288>
   1589a:	90 37       	cpi	r25, 0x70	; 112
   1589c:	20 f4       	brcc	.+8      	; 0x158a6 <vfprintf+0x27c>
   1589e:	98 35       	cpi	r25, 0x58	; 88
   158a0:	09 f0       	breq	.+2      	; 0x158a4 <vfprintf+0x27a>
   158a2:	ac c0       	rjmp	.+344    	; 0x159fc <vfprintf+0x3d2>
   158a4:	0f c0       	rjmp	.+30     	; 0x158c4 <vfprintf+0x29a>
   158a6:	90 37       	cpi	r25, 0x70	; 112
   158a8:	39 f0       	breq	.+14     	; 0x158b8 <vfprintf+0x28e>
   158aa:	98 37       	cpi	r25, 0x78	; 120
   158ac:	09 f0       	breq	.+2      	; 0x158b0 <vfprintf+0x286>
   158ae:	a6 c0       	rjmp	.+332    	; 0x159fc <vfprintf+0x3d2>
   158b0:	04 c0       	rjmp	.+8      	; 0x158ba <vfprintf+0x290>
   158b2:	28 e0       	ldi	r18, 0x08	; 8
   158b4:	30 e0       	ldi	r19, 0x00	; 0
   158b6:	0a c0       	rjmp	.+20     	; 0x158cc <vfprintf+0x2a2>
   158b8:	10 61       	ori	r17, 0x10	; 16
   158ba:	14 fd       	sbrc	r17, 4
   158bc:	14 60       	ori	r17, 0x04	; 4
   158be:	20 e1       	ldi	r18, 0x10	; 16
   158c0:	30 e0       	ldi	r19, 0x00	; 0
   158c2:	04 c0       	rjmp	.+8      	; 0x158cc <vfprintf+0x2a2>
   158c4:	14 fd       	sbrc	r17, 4
   158c6:	16 60       	ori	r17, 0x06	; 6
   158c8:	20 e1       	ldi	r18, 0x10	; 16
   158ca:	32 e0       	ldi	r19, 0x02	; 2
   158cc:	17 ff       	sbrs	r17, 7
   158ce:	08 c0       	rjmp	.+16     	; 0x158e0 <vfprintf+0x2b6>
   158d0:	f5 01       	movw	r30, r10
   158d2:	60 81       	ld	r22, Z
   158d4:	71 81       	ldd	r23, Z+1	; 0x01
   158d6:	82 81       	ldd	r24, Z+2	; 0x02
   158d8:	93 81       	ldd	r25, Z+3	; 0x03
   158da:	44 e0       	ldi	r20, 0x04	; 4
   158dc:	50 e0       	ldi	r21, 0x00	; 0
   158de:	08 c0       	rjmp	.+16     	; 0x158f0 <vfprintf+0x2c6>
   158e0:	f5 01       	movw	r30, r10
   158e2:	80 81       	ld	r24, Z
   158e4:	91 81       	ldd	r25, Z+1	; 0x01
   158e6:	bc 01       	movw	r22, r24
   158e8:	80 e0       	ldi	r24, 0x00	; 0
   158ea:	90 e0       	ldi	r25, 0x00	; 0
   158ec:	42 e0       	ldi	r20, 0x02	; 2
   158ee:	50 e0       	ldi	r21, 0x00	; 0
   158f0:	a4 0e       	add	r10, r20
   158f2:	b5 1e       	adc	r11, r21
   158f4:	a1 01       	movw	r20, r2
   158f6:	0e 94 8c ad 	call	0x15b18	; 0x15b18 <__ultoa_invert>
   158fa:	d8 2e       	mov	r13, r24
   158fc:	d2 18       	sub	r13, r2
   158fe:	8f e7       	ldi	r24, 0x7F	; 127
   15900:	f8 2e       	mov	r15, r24
   15902:	f1 22       	and	r15, r17
   15904:	f6 fe       	sbrs	r15, 6
   15906:	0b c0       	rjmp	.+22     	; 0x1591e <vfprintf+0x2f4>
   15908:	5e ef       	ldi	r21, 0xFE	; 254
   1590a:	f5 22       	and	r15, r21
   1590c:	d9 14       	cp	r13, r9
   1590e:	38 f4       	brcc	.+14     	; 0x1591e <vfprintf+0x2f4>
   15910:	f4 fe       	sbrs	r15, 4
   15912:	07 c0       	rjmp	.+14     	; 0x15922 <vfprintf+0x2f8>
   15914:	f2 fc       	sbrc	r15, 2
   15916:	05 c0       	rjmp	.+10     	; 0x15922 <vfprintf+0x2f8>
   15918:	8f ee       	ldi	r24, 0xEF	; 239
   1591a:	f8 22       	and	r15, r24
   1591c:	02 c0       	rjmp	.+4      	; 0x15922 <vfprintf+0x2f8>
   1591e:	1d 2d       	mov	r17, r13
   15920:	01 c0       	rjmp	.+2      	; 0x15924 <vfprintf+0x2fa>
   15922:	19 2d       	mov	r17, r9
   15924:	f4 fe       	sbrs	r15, 4
   15926:	0d c0       	rjmp	.+26     	; 0x15942 <vfprintf+0x318>
   15928:	fe 01       	movw	r30, r28
   1592a:	ed 0d       	add	r30, r13
   1592c:	f1 1d       	adc	r31, r1
   1592e:	80 81       	ld	r24, Z
   15930:	80 33       	cpi	r24, 0x30	; 48
   15932:	19 f4       	brne	.+6      	; 0x1593a <vfprintf+0x310>
   15934:	99 ee       	ldi	r25, 0xE9	; 233
   15936:	f9 22       	and	r15, r25
   15938:	08 c0       	rjmp	.+16     	; 0x1594a <vfprintf+0x320>
   1593a:	1f 5f       	subi	r17, 0xFF	; 255
   1593c:	f2 fe       	sbrs	r15, 2
   1593e:	05 c0       	rjmp	.+10     	; 0x1594a <vfprintf+0x320>
   15940:	03 c0       	rjmp	.+6      	; 0x15948 <vfprintf+0x31e>
   15942:	8f 2d       	mov	r24, r15
   15944:	86 78       	andi	r24, 0x86	; 134
   15946:	09 f0       	breq	.+2      	; 0x1594a <vfprintf+0x320>
   15948:	1f 5f       	subi	r17, 0xFF	; 255
   1594a:	0f 2d       	mov	r16, r15
   1594c:	f3 fc       	sbrc	r15, 3
   1594e:	14 c0       	rjmp	.+40     	; 0x15978 <vfprintf+0x34e>
   15950:	f0 fe       	sbrs	r15, 0
   15952:	0f c0       	rjmp	.+30     	; 0x15972 <vfprintf+0x348>
   15954:	1e 15       	cp	r17, r14
   15956:	10 f0       	brcs	.+4      	; 0x1595c <vfprintf+0x332>
   15958:	9d 2c       	mov	r9, r13
   1595a:	0b c0       	rjmp	.+22     	; 0x15972 <vfprintf+0x348>
   1595c:	9d 2c       	mov	r9, r13
   1595e:	9e 0c       	add	r9, r14
   15960:	91 1a       	sub	r9, r17
   15962:	1e 2d       	mov	r17, r14
   15964:	06 c0       	rjmp	.+12     	; 0x15972 <vfprintf+0x348>
   15966:	80 e2       	ldi	r24, 0x20	; 32
   15968:	90 e0       	ldi	r25, 0x00	; 0
   1596a:	b3 01       	movw	r22, r6
   1596c:	0e 94 60 ad 	call	0x15ac0	; 0x15ac0 <fputc>
   15970:	1f 5f       	subi	r17, 0xFF	; 255
   15972:	1e 15       	cp	r17, r14
   15974:	c0 f3       	brcs	.-16     	; 0x15966 <vfprintf+0x33c>
   15976:	04 c0       	rjmp	.+8      	; 0x15980 <vfprintf+0x356>
   15978:	1e 15       	cp	r17, r14
   1597a:	10 f4       	brcc	.+4      	; 0x15980 <vfprintf+0x356>
   1597c:	e1 1a       	sub	r14, r17
   1597e:	01 c0       	rjmp	.+2      	; 0x15982 <vfprintf+0x358>
   15980:	ee 24       	eor	r14, r14
   15982:	04 ff       	sbrs	r16, 4
   15984:	0f c0       	rjmp	.+30     	; 0x159a4 <vfprintf+0x37a>
   15986:	80 e3       	ldi	r24, 0x30	; 48
   15988:	90 e0       	ldi	r25, 0x00	; 0
   1598a:	b3 01       	movw	r22, r6
   1598c:	0e 94 60 ad 	call	0x15ac0	; 0x15ac0 <fputc>
   15990:	02 ff       	sbrs	r16, 2
   15992:	1d c0       	rjmp	.+58     	; 0x159ce <vfprintf+0x3a4>
   15994:	01 fd       	sbrc	r16, 1
   15996:	03 c0       	rjmp	.+6      	; 0x1599e <vfprintf+0x374>
   15998:	88 e7       	ldi	r24, 0x78	; 120
   1599a:	90 e0       	ldi	r25, 0x00	; 0
   1599c:	0e c0       	rjmp	.+28     	; 0x159ba <vfprintf+0x390>
   1599e:	88 e5       	ldi	r24, 0x58	; 88
   159a0:	90 e0       	ldi	r25, 0x00	; 0
   159a2:	0b c0       	rjmp	.+22     	; 0x159ba <vfprintf+0x390>
   159a4:	80 2f       	mov	r24, r16
   159a6:	86 78       	andi	r24, 0x86	; 134
   159a8:	91 f0       	breq	.+36     	; 0x159ce <vfprintf+0x3a4>
   159aa:	01 ff       	sbrs	r16, 1
   159ac:	02 c0       	rjmp	.+4      	; 0x159b2 <vfprintf+0x388>
   159ae:	8b e2       	ldi	r24, 0x2B	; 43
   159b0:	01 c0       	rjmp	.+2      	; 0x159b4 <vfprintf+0x38a>
   159b2:	80 e2       	ldi	r24, 0x20	; 32
   159b4:	f7 fc       	sbrc	r15, 7
   159b6:	8d e2       	ldi	r24, 0x2D	; 45
   159b8:	90 e0       	ldi	r25, 0x00	; 0
   159ba:	b3 01       	movw	r22, r6
   159bc:	0e 94 60 ad 	call	0x15ac0	; 0x15ac0 <fputc>
   159c0:	06 c0       	rjmp	.+12     	; 0x159ce <vfprintf+0x3a4>
   159c2:	80 e3       	ldi	r24, 0x30	; 48
   159c4:	90 e0       	ldi	r25, 0x00	; 0
   159c6:	b3 01       	movw	r22, r6
   159c8:	0e 94 60 ad 	call	0x15ac0	; 0x15ac0 <fputc>
   159cc:	9a 94       	dec	r9
   159ce:	d9 14       	cp	r13, r9
   159d0:	c0 f3       	brcs	.-16     	; 0x159c2 <vfprintf+0x398>
   159d2:	da 94       	dec	r13
   159d4:	f1 01       	movw	r30, r2
   159d6:	ed 0d       	add	r30, r13
   159d8:	f1 1d       	adc	r31, r1
   159da:	80 81       	ld	r24, Z
   159dc:	90 e0       	ldi	r25, 0x00	; 0
   159de:	b3 01       	movw	r22, r6
   159e0:	0e 94 60 ad 	call	0x15ac0	; 0x15ac0 <fputc>
   159e4:	dd 20       	and	r13, r13
   159e6:	a9 f7       	brne	.-22     	; 0x159d2 <vfprintf+0x3a8>
   159e8:	06 c0       	rjmp	.+12     	; 0x159f6 <vfprintf+0x3cc>
   159ea:	80 e2       	ldi	r24, 0x20	; 32
   159ec:	90 e0       	ldi	r25, 0x00	; 0
   159ee:	b3 01       	movw	r22, r6
   159f0:	0e 94 60 ad 	call	0x15ac0	; 0x15ac0 <fputc>
   159f4:	ea 94       	dec	r14
   159f6:	ee 20       	and	r14, r14
   159f8:	c1 f7       	brne	.-16     	; 0x159ea <vfprintf+0x3c0>
   159fa:	43 ce       	rjmp	.-890    	; 0x15682 <vfprintf+0x58>
   159fc:	f3 01       	movw	r30, r6
   159fe:	66 81       	ldd	r22, Z+6	; 0x06
   15a00:	77 81       	ldd	r23, Z+7	; 0x07
   15a02:	cb 01       	movw	r24, r22
   15a04:	2b 96       	adiw	r28, 0x0b	; 11
   15a06:	0f b6       	in	r0, 0x3f	; 63
   15a08:	f8 94       	cli
   15a0a:	de bf       	out	0x3e, r29	; 62
   15a0c:	0f be       	out	0x3f, r0	; 63
   15a0e:	cd bf       	out	0x3d, r28	; 61
   15a10:	cf 91       	pop	r28
   15a12:	df 91       	pop	r29
   15a14:	1f 91       	pop	r17
   15a16:	0f 91       	pop	r16
   15a18:	ff 90       	pop	r15
   15a1a:	ef 90       	pop	r14
   15a1c:	df 90       	pop	r13
   15a1e:	cf 90       	pop	r12
   15a20:	bf 90       	pop	r11
   15a22:	af 90       	pop	r10
   15a24:	9f 90       	pop	r9
   15a26:	8f 90       	pop	r8
   15a28:	7f 90       	pop	r7
   15a2a:	6f 90       	pop	r6
   15a2c:	5f 90       	pop	r5
   15a2e:	4f 90       	pop	r4
   15a30:	3f 90       	pop	r3
   15a32:	2f 90       	pop	r2
   15a34:	08 95       	ret

00015a36 <__eerd_block_m128>:
   15a36:	dc 01       	movw	r26, r24
   15a38:	cb 01       	movw	r24, r22

00015a3a <__eerd_blraw_m128>:
   15a3a:	fc 01       	movw	r30, r24
   15a3c:	e1 99       	sbic	0x1c, 1	; 28
   15a3e:	fe cf       	rjmp	.-4      	; 0x15a3c <__eerd_blraw_m128+0x2>
   15a40:	06 c0       	rjmp	.+12     	; 0x15a4e <__eerd_blraw_m128+0x14>
   15a42:	ff bb       	out	0x1f, r31	; 31
   15a44:	ee bb       	out	0x1e, r30	; 30
   15a46:	e0 9a       	sbi	0x1c, 0	; 28
   15a48:	31 96       	adiw	r30, 0x01	; 1
   15a4a:	0d b2       	in	r0, 0x1d	; 29
   15a4c:	0d 92       	st	X+, r0
   15a4e:	41 50       	subi	r20, 0x01	; 1
   15a50:	50 40       	sbci	r21, 0x00	; 0
   15a52:	b8 f7       	brcc	.-18     	; 0x15a42 <__eerd_blraw_m128+0x8>
   15a54:	08 95       	ret

00015a56 <__eerd_byte_m128>:
   15a56:	e1 99       	sbic	0x1c, 1	; 28
   15a58:	fe cf       	rjmp	.-4      	; 0x15a56 <__eerd_byte_m128>
   15a5a:	9f bb       	out	0x1f, r25	; 31
   15a5c:	8e bb       	out	0x1e, r24	; 30
   15a5e:	e0 9a       	sbi	0x1c, 0	; 28
   15a60:	99 27       	eor	r25, r25
   15a62:	8d b3       	in	r24, 0x1d	; 29
   15a64:	08 95       	ret

00015a66 <__eewr_block_m128>:
   15a66:	dc 01       	movw	r26, r24
   15a68:	cb 01       	movw	r24, r22
   15a6a:	03 c0       	rjmp	.+6      	; 0x15a72 <__eewr_block_m128+0xc>
   15a6c:	2d 91       	ld	r18, X+
   15a6e:	0e 94 3e ad 	call	0x15a7c	; 0x15a7c <__eewr_r18_m128>
   15a72:	41 50       	subi	r20, 0x01	; 1
   15a74:	50 40       	sbci	r21, 0x00	; 0
   15a76:	d0 f7       	brcc	.-12     	; 0x15a6c <__eewr_block_m128+0x6>
   15a78:	08 95       	ret

00015a7a <__eewr_byte_m128>:
   15a7a:	26 2f       	mov	r18, r22

00015a7c <__eewr_r18_m128>:
   15a7c:	e1 99       	sbic	0x1c, 1	; 28
   15a7e:	fe cf       	rjmp	.-4      	; 0x15a7c <__eewr_r18_m128>
   15a80:	9f bb       	out	0x1f, r25	; 31
   15a82:	8e bb       	out	0x1e, r24	; 30
   15a84:	2d bb       	out	0x1d, r18	; 29
   15a86:	0f b6       	in	r0, 0x3f	; 63
   15a88:	f8 94       	cli
   15a8a:	e2 9a       	sbi	0x1c, 2	; 28
   15a8c:	e1 9a       	sbi	0x1c, 1	; 28
   15a8e:	0f be       	out	0x3f, r0	; 63
   15a90:	01 96       	adiw	r24, 0x01	; 1
   15a92:	08 95       	ret

00015a94 <strnlen_P>:
   15a94:	fc 01       	movw	r30, r24
   15a96:	05 90       	lpm	r0, Z+
   15a98:	61 50       	subi	r22, 0x01	; 1
   15a9a:	70 40       	sbci	r23, 0x00	; 0
   15a9c:	01 10       	cpse	r0, r1
   15a9e:	d8 f7       	brcc	.-10     	; 0x15a96 <strnlen_P+0x2>
   15aa0:	80 95       	com	r24
   15aa2:	90 95       	com	r25
   15aa4:	8e 0f       	add	r24, r30
   15aa6:	9f 1f       	adc	r25, r31
   15aa8:	08 95       	ret

00015aaa <strnlen>:
   15aaa:	fc 01       	movw	r30, r24
   15aac:	61 50       	subi	r22, 0x01	; 1
   15aae:	70 40       	sbci	r23, 0x00	; 0
   15ab0:	01 90       	ld	r0, Z+
   15ab2:	01 10       	cpse	r0, r1
   15ab4:	d8 f7       	brcc	.-10     	; 0x15aac <strnlen+0x2>
   15ab6:	80 95       	com	r24
   15ab8:	90 95       	com	r25
   15aba:	8e 0f       	add	r24, r30
   15abc:	9f 1f       	adc	r25, r31
   15abe:	08 95       	ret

00015ac0 <fputc>:
   15ac0:	0f 93       	push	r16
   15ac2:	1f 93       	push	r17
   15ac4:	cf 93       	push	r28
   15ac6:	df 93       	push	r29
   15ac8:	8c 01       	movw	r16, r24
   15aca:	eb 01       	movw	r28, r22
   15acc:	8b 81       	ldd	r24, Y+3	; 0x03
   15ace:	81 ff       	sbrs	r24, 1
   15ad0:	1b c0       	rjmp	.+54     	; 0x15b08 <fputc+0x48>
   15ad2:	82 ff       	sbrs	r24, 2
   15ad4:	0d c0       	rjmp	.+26     	; 0x15af0 <fputc+0x30>
   15ad6:	2e 81       	ldd	r18, Y+6	; 0x06
   15ad8:	3f 81       	ldd	r19, Y+7	; 0x07
   15ada:	8c 81       	ldd	r24, Y+4	; 0x04
   15adc:	9d 81       	ldd	r25, Y+5	; 0x05
   15ade:	28 17       	cp	r18, r24
   15ae0:	39 07       	cpc	r19, r25
   15ae2:	64 f4       	brge	.+24     	; 0x15afc <fputc+0x3c>
   15ae4:	e8 81       	ld	r30, Y
   15ae6:	f9 81       	ldd	r31, Y+1	; 0x01
   15ae8:	01 93       	st	Z+, r16
   15aea:	f9 83       	std	Y+1, r31	; 0x01
   15aec:	e8 83       	st	Y, r30
   15aee:	06 c0       	rjmp	.+12     	; 0x15afc <fputc+0x3c>
   15af0:	e8 85       	ldd	r30, Y+8	; 0x08
   15af2:	f9 85       	ldd	r31, Y+9	; 0x09
   15af4:	80 2f       	mov	r24, r16
   15af6:	09 95       	icall
   15af8:	89 2b       	or	r24, r25
   15afa:	31 f4       	brne	.+12     	; 0x15b08 <fputc+0x48>
   15afc:	8e 81       	ldd	r24, Y+6	; 0x06
   15afe:	9f 81       	ldd	r25, Y+7	; 0x07
   15b00:	01 96       	adiw	r24, 0x01	; 1
   15b02:	9f 83       	std	Y+7, r25	; 0x07
   15b04:	8e 83       	std	Y+6, r24	; 0x06
   15b06:	02 c0       	rjmp	.+4      	; 0x15b0c <fputc+0x4c>
   15b08:	0f ef       	ldi	r16, 0xFF	; 255
   15b0a:	1f ef       	ldi	r17, 0xFF	; 255
   15b0c:	c8 01       	movw	r24, r16
   15b0e:	df 91       	pop	r29
   15b10:	cf 91       	pop	r28
   15b12:	1f 91       	pop	r17
   15b14:	0f 91       	pop	r16
   15b16:	08 95       	ret

00015b18 <__ultoa_invert>:
   15b18:	fa 01       	movw	r30, r20
   15b1a:	aa 27       	eor	r26, r26
   15b1c:	28 30       	cpi	r18, 0x08	; 8
   15b1e:	51 f1       	breq	.+84     	; 0x15b74 <__ultoa_invert+0x5c>
   15b20:	20 31       	cpi	r18, 0x10	; 16
   15b22:	81 f1       	breq	.+96     	; 0x15b84 <__ultoa_invert+0x6c>
   15b24:	e8 94       	clt
   15b26:	6f 93       	push	r22
   15b28:	6e 7f       	andi	r22, 0xFE	; 254
   15b2a:	6e 5f       	subi	r22, 0xFE	; 254
   15b2c:	7f 4f       	sbci	r23, 0xFF	; 255
   15b2e:	8f 4f       	sbci	r24, 0xFF	; 255
   15b30:	9f 4f       	sbci	r25, 0xFF	; 255
   15b32:	af 4f       	sbci	r26, 0xFF	; 255
   15b34:	b1 e0       	ldi	r27, 0x01	; 1
   15b36:	3e d0       	rcall	.+124    	; 0x15bb4 <__ultoa_invert+0x9c>
   15b38:	b4 e0       	ldi	r27, 0x04	; 4
   15b3a:	3c d0       	rcall	.+120    	; 0x15bb4 <__ultoa_invert+0x9c>
   15b3c:	67 0f       	add	r22, r23
   15b3e:	78 1f       	adc	r23, r24
   15b40:	89 1f       	adc	r24, r25
   15b42:	9a 1f       	adc	r25, r26
   15b44:	a1 1d       	adc	r26, r1
   15b46:	68 0f       	add	r22, r24
   15b48:	79 1f       	adc	r23, r25
   15b4a:	8a 1f       	adc	r24, r26
   15b4c:	91 1d       	adc	r25, r1
   15b4e:	a1 1d       	adc	r26, r1
   15b50:	6a 0f       	add	r22, r26
   15b52:	71 1d       	adc	r23, r1
   15b54:	81 1d       	adc	r24, r1
   15b56:	91 1d       	adc	r25, r1
   15b58:	a1 1d       	adc	r26, r1
   15b5a:	20 d0       	rcall	.+64     	; 0x15b9c <__ultoa_invert+0x84>
   15b5c:	09 f4       	brne	.+2      	; 0x15b60 <__ultoa_invert+0x48>
   15b5e:	68 94       	set
   15b60:	3f 91       	pop	r19
   15b62:	2a e0       	ldi	r18, 0x0A	; 10
   15b64:	26 9f       	mul	r18, r22
   15b66:	11 24       	eor	r1, r1
   15b68:	30 19       	sub	r19, r0
   15b6a:	30 5d       	subi	r19, 0xD0	; 208
   15b6c:	31 93       	st	Z+, r19
   15b6e:	de f6       	brtc	.-74     	; 0x15b26 <__ultoa_invert+0xe>
   15b70:	cf 01       	movw	r24, r30
   15b72:	08 95       	ret
   15b74:	46 2f       	mov	r20, r22
   15b76:	47 70       	andi	r20, 0x07	; 7
   15b78:	40 5d       	subi	r20, 0xD0	; 208
   15b7a:	41 93       	st	Z+, r20
   15b7c:	b3 e0       	ldi	r27, 0x03	; 3
   15b7e:	0f d0       	rcall	.+30     	; 0x15b9e <__ultoa_invert+0x86>
   15b80:	c9 f7       	brne	.-14     	; 0x15b74 <__ultoa_invert+0x5c>
   15b82:	f6 cf       	rjmp	.-20     	; 0x15b70 <__ultoa_invert+0x58>
   15b84:	46 2f       	mov	r20, r22
   15b86:	4f 70       	andi	r20, 0x0F	; 15
   15b88:	40 5d       	subi	r20, 0xD0	; 208
   15b8a:	4a 33       	cpi	r20, 0x3A	; 58
   15b8c:	18 f0       	brcs	.+6      	; 0x15b94 <__ultoa_invert+0x7c>
   15b8e:	49 5d       	subi	r20, 0xD9	; 217
   15b90:	31 fd       	sbrc	r19, 1
   15b92:	40 52       	subi	r20, 0x20	; 32
   15b94:	41 93       	st	Z+, r20
   15b96:	02 d0       	rcall	.+4      	; 0x15b9c <__ultoa_invert+0x84>
   15b98:	a9 f7       	brne	.-22     	; 0x15b84 <__ultoa_invert+0x6c>
   15b9a:	ea cf       	rjmp	.-44     	; 0x15b70 <__ultoa_invert+0x58>
   15b9c:	b4 e0       	ldi	r27, 0x04	; 4
   15b9e:	a6 95       	lsr	r26
   15ba0:	97 95       	ror	r25
   15ba2:	87 95       	ror	r24
   15ba4:	77 95       	ror	r23
   15ba6:	67 95       	ror	r22
   15ba8:	ba 95       	dec	r27
   15baa:	c9 f7       	brne	.-14     	; 0x15b9e <__ultoa_invert+0x86>
   15bac:	00 97       	sbiw	r24, 0x00	; 0
   15bae:	61 05       	cpc	r22, r1
   15bb0:	71 05       	cpc	r23, r1
   15bb2:	08 95       	ret
   15bb4:	9b 01       	movw	r18, r22
   15bb6:	ac 01       	movw	r20, r24
   15bb8:	0a 2e       	mov	r0, r26
   15bba:	06 94       	lsr	r0
   15bbc:	57 95       	ror	r21
   15bbe:	47 95       	ror	r20
   15bc0:	37 95       	ror	r19
   15bc2:	27 95       	ror	r18
   15bc4:	ba 95       	dec	r27
   15bc6:	c9 f7       	brne	.-14     	; 0x15bba <__ultoa_invert+0xa2>
   15bc8:	62 0f       	add	r22, r18
   15bca:	73 1f       	adc	r23, r19
   15bcc:	84 1f       	adc	r24, r20
   15bce:	95 1f       	adc	r25, r21
   15bd0:	a0 1d       	adc	r26, r0
   15bd2:	08 95       	ret

00015bd4 <_exit>:
   15bd4:	f8 94       	cli

00015bd6 <__stop_program>:
   15bd6:	ff cf       	rjmp	.-2      	; 0x15bd6 <__stop_program>
