
no6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00003794  00003848  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003794  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000329  0080010e  0080010e  00003856  2**0
                  ALLOC
  3 .eeprom       0000001f  00810000  00810000  00003856  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000060  00000000  00000000  00003875  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000bf9  00000000  00000000  000038d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003fa2  00000000  00000000  000044ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000059c  00000000  00000000  00008470  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000304f  00000000  00000000  00008a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000510  00000000  00000000  0000ba5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000019a4  00000000  00000000  0000bf6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000022f8  00000000  00000000  0000d910  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000420  00000000  00000000  0000fc08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cc 00 	jmp	0x198	; 0x198 <__ctors_end>
       4:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
       8:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
       c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      10:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      14:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      18:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      1c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      20:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      24:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      28:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      2c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      30:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      34:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      38:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      3c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      40:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      44:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <__vector_17>
      48:	0c 94 29 17 	jmp	0x2e52	; 0x2e52 <__vector_18>
      4c:	0c 94 27 07 	jmp	0xe4e	; 0xe4e <__vector_19>
      50:	0c 94 f7 06 	jmp	0xdee	; 0xdee <__vector_20>
      54:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      58:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      5c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      60:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      64:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      68:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      6c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
      70:	a1 0d       	add	r26, r1
      72:	f4 0d       	add	r31, r4
      74:	17 0e       	add	r1, r23
      76:	1e 0e       	add	r1, r30
      78:	24 0e       	add	r2, r20
      7a:	2f 0e       	add	r2, r31
      7c:	44 0e       	add	r4, r20
      7e:	84 0e       	add	r8, r20
      80:	06 0f       	add	r16, r22
      82:	81 0f       	add	r24, r17
      84:	aa 0f       	add	r26, r26
      86:	4f 0f       	add	r20, r31
      88:	0d 0f       	add	r16, r29
      8a:	1a 0f       	add	r17, r26
      8c:	57 0f       	add	r21, r23
      8e:	64 0f       	add	r22, r20
      90:	66 10       	cpse	r6, r6
      92:	b0 0f       	add	r27, r16
      94:	bd 0f       	add	r27, r29
      96:	e2 0f       	add	r30, r18
      98:	66 10       	cpse	r6, r6
      9a:	8f 0f       	add	r24, r31
      9c:	e4 0f       	add	r30, r20
      9e:	ab 0e       	add	r10, r27
      a0:	b9 0e       	add	r11, r25
      a2:	9b 0f       	add	r25, r27
      a4:	04 10       	cpse	r0, r4
      a6:	17 10       	cpse	r1, r7
      a8:	1d 10       	cpse	r1, r13
      aa:	2a 10       	cpse	r2, r10
      ac:	4e 10       	cpse	r4, r14
      ae:	50 10       	cpse	r5, r0
      b0:	5c 10       	cpse	r5, r12
      b2:	d5 10       	cpse	r13, r5
      b4:	25 11       	cpse	r18, r5
      b6:	3b 11       	cpse	r19, r11
      b8:	4a 11       	cpse	r20, r10
      ba:	81 11       	cpse	r24, r1
      bc:	98 11       	cpse	r25, r8
      be:	aa 11       	cpse	r26, r10
      c0:	b8 11       	cpse	r27, r8
      c2:	c7 13       	cpse	r28, r23
      c4:	ab 12       	cpse	r10, r27
      c6:	bd 12       	cpse	r11, r29
      c8:	e5 12       	cpse	r14, r21
      ca:	f1 12       	cpse	r15, r17
      cc:	fd 12       	cpse	r15, r29
      ce:	4a 12       	cpse	r4, r26
      d0:	5c 12       	cpse	r5, r28
      d2:	7a 12       	cpse	r7, r26
      d4:	86 12       	cpse	r8, r22
      d6:	0e 13       	cpse	r16, r30
      d8:	22 13       	cpse	r18, r18
      da:	61 13       	cpse	r22, r17
      dc:	6e 13       	cpse	r22, r30
      de:	70 13       	cpse	r23, r16
      e0:	77 13       	cpse	r23, r23
      e2:	81 13       	cpse	r24, r17
      e4:	8e 13       	cpse	r24, r30
      e6:	94 13       	cpse	r25, r20
      e8:	9f 13       	cpse	r25, r31
      ea:	88 15       	cp	r24, r8
      ec:	9f 15       	cp	r25, r15
      ee:	1a 17       	cp	r17, r26
      f0:	45 16       	cp	r4, r21
      f2:	fe 15       	cp	r31, r14
      f4:	1a 16       	cp	r1, r26
      f6:	1a 17       	cp	r17, r26
      f8:	1a 17       	cp	r17, r26
      fa:	5f 16       	cp	r5, r31
      fc:	7b 16       	cp	r7, r27
      fe:	1a 17       	cp	r17, r26
     100:	1a 17       	cp	r17, r26
     102:	95 16       	cp	r9, r21
     104:	1a 17       	cp	r17, r26
     106:	bf 16       	cp	r11, r31
     108:	c4 16       	cp	r12, r20
     10a:	cd 16       	cp	r12, r29
     10c:	1a 17       	cp	r17, r26
     10e:	1a 17       	cp	r17, r26
     110:	9b 16       	cp	r9, r27
     112:	ab 16       	cp	r10, r27
     114:	b0 16       	cp	r11, r16
     116:	b5 16       	cp	r11, r21
     118:	ba 16       	cp	r11, r26
     11a:	1a 17       	cp	r17, r26
     11c:	1a 17       	cp	r17, r26
     11e:	d2 16       	cp	r13, r18
     120:	c2 15       	cp	r28, r2
     122:	e7 16       	cp	r14, r23
     124:	f5 16       	cp	r15, r21
     126:	ff 16       	cp	r15, r31
     128:	03 17       	cp	r16, r19
     12a:	06 17       	cp	r16, r22

0000012c <__c.3484>:
     12c:	49 6e 69 74 69 61 6c 69 7a 65 64 00                 Initialized.

00000138 <__c.3121>:
     138:	25 64 00                                            %d.

0000013b <__c.3116>:
     13b:	25 73 25 73 00                                      %s%s.

00000140 <__c.3114>:
     140:	30 32 25 2e 32 64 00                                02%.2d.

00000147 <__c.3084>:
     147:	25 64 00                                            %d.

0000014a <__c.3079>:
     14a:	30 31 25 2e 32 64 25 2e 31 64 25 2e 31 64 25 73     01%.2d%.1d%.1d%s
     15a:	25 73 25 73 00                                      %s%s.

0000015f <__c.2951>:
     15f:	41 75 74 68 6f 72 69 7a 65 64 00                    Authorized.

0000016a <__c.2927>:
     16a:	50 6f 6f 6c 52 65 73 74 61 72 74 65 64 00           PoolRestarted.

00000178 <__c.2781>:
     178:	50 6f 6f 6c 52 65 73 74 61 72 74 65 64 00           PoolRestarted.

00000186 <__c.2779>:
     186:	57 50 6f 6f 6c 3a 25 64 00                          WPool:%d.

0000018f <__c.2379>:
     18f:	50 75 6d 70 3a 25 64 00 00                          Pump:%d..

00000198 <__ctors_end>:
     198:	11 24       	eor	r1, r1
     19a:	1f be       	out	0x3f, r1	; 63
     19c:	cf ef       	ldi	r28, 0xFF	; 255
     19e:	d4 e0       	ldi	r29, 0x04	; 4
     1a0:	de bf       	out	0x3e, r29	; 62
     1a2:	cd bf       	out	0x3d, r28	; 61

000001a4 <__do_copy_data>:
     1a4:	11 e0       	ldi	r17, 0x01	; 1
     1a6:	a0 e0       	ldi	r26, 0x00	; 0
     1a8:	b1 e0       	ldi	r27, 0x01	; 1
     1aa:	e4 e9       	ldi	r30, 0x94	; 148
     1ac:	f7 e3       	ldi	r31, 0x37	; 55
     1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <.do_copy_data_start>

000001b0 <.do_copy_data_loop>:
     1b0:	05 90       	lpm	r0, Z+
     1b2:	0d 92       	st	X+, r0

000001b4 <.do_copy_data_start>:
     1b4:	ae 30       	cpi	r26, 0x0E	; 14
     1b6:	b1 07       	cpc	r27, r17
     1b8:	d9 f7       	brne	.-10     	; 0x1b0 <.do_copy_data_loop>

000001ba <__do_clear_bss>:
     1ba:	14 e0       	ldi	r17, 0x04	; 4
     1bc:	ae e0       	ldi	r26, 0x0E	; 14
     1be:	b1 e0       	ldi	r27, 0x01	; 1
     1c0:	01 c0       	rjmp	.+2      	; 0x1c4 <.do_clear_bss_start>

000001c2 <.do_clear_bss_loop>:
     1c2:	1d 92       	st	X+, r1

000001c4 <.do_clear_bss_start>:
     1c4:	a7 33       	cpi	r26, 0x37	; 55
     1c6:	b1 07       	cpc	r27, r17
     1c8:	e1 f7       	brne	.-8      	; 0x1c2 <.do_clear_bss_loop>
     1ca:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <main>
     1ce:	0c 94 c8 1b 	jmp	0x3790	; 0x3790 <_exit>

000001d2 <__bad_interrupt>:
     1d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001d6 <__vector_17>:

char SequencePool=0;//LivePooling Detection
char TimWatchSequence,SequenceTimeout;
char PumpTransDigit=6,PumpTotalDigit=8;

ISR(TIMER0_OVF_vect) {
     1d6:	1f 92       	push	r1
     1d8:	0f 92       	push	r0
     1da:	0f b6       	in	r0, 0x3f	; 63
     1dc:	0f 92       	push	r0
     1de:	11 24       	eor	r1, r1
     1e0:	2f 93       	push	r18
     1e2:	3f 93       	push	r19
     1e4:	5f 93       	push	r21
     1e6:	6f 93       	push	r22
     1e8:	7f 93       	push	r23
     1ea:	8f 93       	push	r24
     1ec:	9f 93       	push	r25
     1ee:	af 93       	push	r26
     1f0:	bf 93       	push	r27
    //TCNT1H=0xFD;//Ov:10ms
	//TCNT1L=0xC0;
    static char TimerExp=0;	     
    TimerExp++;
     1f2:	80 91 3a 01 	lds	r24, 0x013A
     1f6:	8f 5f       	subi	r24, 0xFF	; 255
     1f8:	80 93 3a 01 	sts	0x013A, r24
	if ((TimerExp%BlinkRate)==0){
     1fc:	60 91 11 04 	lds	r22, 0x0411
     200:	0e 94 4f 1b 	call	0x369e	; 0x369e <__udivmodqi4>
     204:	99 23       	and	r25, r25
     206:	21 f4       	brne	.+8      	; 0x210 <__vector_17+0x3a>
		PORTE ^= 0x04;
     208:	87 b1       	in	r24, 0x07	; 7
     20a:	94 e0       	ldi	r25, 0x04	; 4
     20c:	89 27       	eor	r24, r25
     20e:	87 b9       	out	0x07, r24	; 7
	}
	TimExp++;
     210:	20 91 1f 01 	lds	r18, 0x011F
     214:	30 91 20 01 	lds	r19, 0x0120
     218:	2f 5f       	subi	r18, 0xFF	; 255
     21a:	3f 4f       	sbci	r19, 0xFF	; 255
     21c:	30 93 20 01 	sts	0x0120, r19
     220:	20 93 1f 01 	sts	0x011F, r18
	if ((TimExp%2)==0) TimSend++;
     224:	20 fd       	sbrc	r18, 0
     226:	09 c0       	rjmp	.+18     	; 0x23a <__vector_17+0x64>
     228:	80 91 23 04 	lds	r24, 0x0423
     22c:	90 91 24 04 	lds	r25, 0x0424
     230:	01 96       	adiw	r24, 0x01	; 1
     232:	90 93 24 04 	sts	0x0424, r25
     236:	80 93 23 04 	sts	0x0423, r24
	if ((TimExp%100)==0) TimWatchSequence++;
     23a:	c9 01       	movw	r24, r18
     23c:	64 e6       	ldi	r22, 0x64	; 100
     23e:	70 e0       	ldi	r23, 0x00	; 0
     240:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <__udivmodhi4>
     244:	89 2b       	or	r24, r25
     246:	29 f4       	brne	.+10     	; 0x252 <__vector_17+0x7c>
     248:	80 91 de 02 	lds	r24, 0x02DE
     24c:	8f 5f       	subi	r24, 0xFF	; 255
     24e:	80 93 de 02 	sts	0x02DE, r24
	TimReceive++;
     252:	80 91 0f 04 	lds	r24, 0x040F
     256:	90 91 10 04 	lds	r25, 0x0410
     25a:	01 96       	adiw	r24, 0x01	; 1
     25c:	90 93 10 04 	sts	0x0410, r25
     260:	80 93 0f 04 	sts	0x040F, r24
	TimDelayNextPump++;
     264:	80 91 21 01 	lds	r24, 0x0121
     268:	90 91 22 01 	lds	r25, 0x0122
     26c:	01 96       	adiw	r24, 0x01	; 1
     26e:	90 93 22 01 	sts	0x0122, r25
     272:	80 93 21 01 	sts	0x0121, r24
}
     276:	bf 91       	pop	r27
     278:	af 91       	pop	r26
     27a:	9f 91       	pop	r25
     27c:	8f 91       	pop	r24
     27e:	7f 91       	pop	r23
     280:	6f 91       	pop	r22
     282:	5f 91       	pop	r21
     284:	3f 91       	pop	r19
     286:	2f 91       	pop	r18
     288:	0f 90       	pop	r0
     28a:	0f be       	out	0x3f, r0	; 63
     28c:	0f 90       	pop	r0
     28e:	1f 90       	pop	r1
     290:	18 95       	reti

00000292 <DoNothing>:
	}
}

void DoNothing(){

}
     292:	08 95       	ret

00000294 <InitMem>:

void InitMem(){
     //IFType=IT_SLAVE;
}
     294:	08 95       	ret

00000296 <GetBaudrate>:

int GetBaudrate(char brSetting){
int Result=0;
     switch(brSetting){
     296:	82 30       	cpi	r24, 0x02	; 2
     298:	59 f0       	breq	.+22     	; 0x2b0 <GetBaudrate+0x1a>
     29a:	82 30       	cpi	r24, 0x02	; 2
     29c:	18 f0       	brcs	.+6      	; 0x2a4 <GetBaudrate+0xe>
     29e:	83 30       	cpi	r24, 0x03	; 3
     2a0:	21 f4       	brne	.+8      	; 0x2aa <GetBaudrate+0x14>
     2a2:	09 c0       	rjmp	.+18     	; 0x2b6 <GetBaudrate+0x20>
     2a4:	20 e8       	ldi	r18, 0x80	; 128
     2a6:	35 e2       	ldi	r19, 0x25	; 37
     2a8:	08 c0       	rjmp	.+16     	; 0x2ba <GetBaudrate+0x24>
     2aa:	20 e0       	ldi	r18, 0x00	; 0
     2ac:	30 e0       	ldi	r19, 0x00	; 0
     2ae:	05 c0       	rjmp	.+10     	; 0x2ba <GetBaudrate+0x24>
     2b0:	20 e0       	ldi	r18, 0x00	; 0
     2b2:	3b e4       	ldi	r19, 0x4B	; 75
     2b4:	02 c0       	rjmp	.+4      	; 0x2ba <GetBaudrate+0x24>
	 case br9600: 
	      Result=9600;
	      break;
	 case br19200:
	      Result=19200;
	      break;
     2b6:	2b e9       	ldi	r18, 0x9B	; 155
     2b8:	36 e1       	ldi	r19, 0x16	; 22
	 case br5787:
	      Result=5787;
     	  break;	 
	 }
   return Result;
}
     2ba:	c9 01       	movw	r24, r18
     2bc:	08 95       	ret

000002be <GetIFType>:
char GetIFType(){
char Result=IT_NONE;
     

return Result;
}
     2be:	80 e0       	ldi	r24, 0x00	; 0
     2c0:	08 95       	ret

000002c2 <SystemComLevel>:
}



void SystemComLevel(char ComLevel){
	 sbi(PORTA,0);  // rs232 off
     2c2:	d8 9a       	sbi	0x1b, 0	; 27
	 sbi(PORTA,3);  // rs485 off
     2c4:	db 9a       	sbi	0x1b, 3	; 27
	 switch(ComLevel){
     2c6:	81 30       	cpi	r24, 0x01	; 1
     2c8:	21 f0       	breq	.+8      	; 0x2d2 <SystemComLevel+0x10>
     2ca:	82 30       	cpi	r24, 0x02	; 2
     2cc:	19 f4       	brne	.+6      	; 0x2d4 <SystemComLevel+0x12>
	 case CL_485:
		  //sbi(PORTA,0);  // rs232 off
		  cbi(PORTA,3);  // rs485 on	 
     2ce:	db 98       	cbi	0x1b, 3	; 27
     2d0:	08 95       	ret
	      break;
     case CL_232:
		  cbi(PORTA,0);  // rs232 on
     2d2:	d8 98       	cbi	0x1b, 0	; 27
     2d4:	08 95       	ret

000002d6 <StatePrintf>:
	System485(DIR_RX);//ReceiveMode
}

void StatePrintf(char *strState){
     //TerminalSendf(1,strState);
}
     2d6:	08 95       	ret

000002d8 <systemAntiFreeze>:
//15694 95.8% -> 14746 90.0%

void systemAntiFreeze(){
static char zSequence=0;

	if (IFType==IT_STANDALONE){
     2d8:	80 91 00 01 	lds	r24, 0x0100
     2dc:	82 30       	cpi	r24, 0x02	; 2
     2de:	a9 f4       	brne	.+42     	; 0x30a <systemAntiFreeze+0x32>
	    if (SequencePool>zSequence){
     2e0:	20 91 26 01 	lds	r18, 0x0126
     2e4:	80 91 35 01 	lds	r24, 0x0135
     2e8:	82 17       	cp	r24, r18
     2ea:	10 f4       	brcc	.+4      	; 0x2f0 <systemAntiFreeze+0x18>
		    TimWatchSequence=0;
     2ec:	10 92 de 02 	sts	0x02DE, r1
		}
        if (TimWatchSequence>SequenceTimeout){
     2f0:	90 91 de 02 	lds	r25, 0x02DE
     2f4:	80 91 36 04 	lds	r24, 0x0436
     2f8:	89 17       	cp	r24, r25
     2fa:	28 f4       	brcc	.+10     	; 0x306 <systemAntiFreeze+0x2e>
		    TimWatchSequence=0; 
     2fc:	10 92 de 02 	sts	0x02DE, r1
		    //SendAcknoledge(SC_FREEZE,SequenceTimeout);
		    IsRestartPooling=True;
     300:	81 e0       	ldi	r24, 0x01	; 1
     302:	80 93 03 01 	sts	0x0103, r24
		}
		zSequence=SequencePool;
     306:	20 93 35 01 	sts	0x0135, r18
     30a:	08 95       	ret

0000030c <CRC_Wayne>:

unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
     30c:	70 e0       	ldi	r23, 0x00	; 0
     30e:	68 27       	eor	r22, r24
     310:	79 27       	eor	r23, r25
     312:	20 e0       	ldi	r18, 0x00	; 0
    for (i = 0; i < 8; i++){//++i){
        if (xCRC& 1) xCRC= (xCRC >> 1) ^ 0xA001;//1010 0000 0000 0001
     314:	41 e0       	ldi	r20, 0x01	; 1
     316:	50 ea       	ldi	r21, 0xA0	; 160
     318:	cb 01       	movw	r24, r22
     31a:	96 95       	lsr	r25
     31c:	87 95       	ror	r24
     31e:	60 ff       	sbrs	r22, 0
     320:	04 c0       	rjmp	.+8      	; 0x32a <CRC_Wayne+0x1e>
     322:	bc 01       	movw	r22, r24
     324:	64 27       	eor	r22, r20
     326:	75 27       	eor	r23, r21
     328:	01 c0       	rjmp	.+2      	; 0x32c <CRC_Wayne+0x20>
        else xCRC= (xCRC>> 1);
     32a:	bc 01       	movw	r22, r24
unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    for (i = 0; i < 8; i++){//++i){
     32c:	2f 5f       	subi	r18, 0xFF	; 255
     32e:	28 30       	cpi	r18, 0x08	; 8
     330:	99 f7       	brne	.-26     	; 0x318 <CRC_Wayne+0xc>
        if (xCRC& 1) xCRC= (xCRC >> 1) ^ 0xA001;//1010 0000 0000 0001
        else xCRC= (xCRC>> 1);
    }
    return xCRC;
}
     332:	cb 01       	movw	r24, r22
     334:	08 95       	ret

00000336 <sys_delay>:

void sys_delay(unsigned int dV){
}
     336:	08 95       	ret

00000338 <System485>:

void System485(char Dir){//DIR_TX, DIR_RX	 
     switch(Dir){
     338:	81 30       	cpi	r24, 0x01	; 1
     33a:	19 f0       	breq	.+6      	; 0x342 <System485+0xa>
     33c:	82 30       	cpi	r24, 0x02	; 2
     33e:	71 f4       	brne	.+28     	; 0x35c <System485+0x24>
     340:	07 c0       	rjmp	.+14     	; 0x350 <System485+0x18>
	 case DIR_TX:
	      sbi(PORTB,1);
     342:	c1 9a       	sbi	0x18, 1	; 24
		  sbi(DDRB,1);
     344:	b9 9a       	sbi	0x17, 1	; 23
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     346:	84 ec       	ldi	r24, 0xC4	; 196
     348:	99 e0       	ldi	r25, 0x09	; 9
     34a:	01 97       	sbiw	r24, 0x01	; 1
     34c:	f1 f7       	brne	.-4      	; 0x34a <System485+0x12>
     34e:	08 95       	ret
		  _delay_ms(10);
	      break;
	 case DIR_RX:
          _delay_ms(7);
		  sbi(DDRB,1);
     350:	86 ed       	ldi	r24, 0xD6	; 214
     352:	96 e0       	ldi	r25, 0x06	; 6
     354:	01 97       	sbiw	r24, 0x01	; 1
     356:	f1 f7       	brne	.-4      	; 0x354 <System485+0x1c>
     358:	b9 9a       	sbi	0x17, 1	; 23
		  cbi(PORTB,1);		  
     35a:	c1 98       	cbi	0x18, 1	; 24
     35c:	08 95       	ret

0000035e <WayneTestSend>:
	 _uart(0,1,xData);
	 System485(DIR_RX);//ReceiveMode
}

void WayneTestSend(){
}
     35e:	08 95       	ret

00000360 <ExtractValue>:
     case CMD_REQ_GLOBAL_STATUS_2:
  	      break;
	 }	 
}

void ExtractValue(char *Source,char FirstPos,char nCount,char*Dest){//WayneRxBuffer,13,16-13,strVolume);
     360:	fc 01       	movw	r30, r24
     362:	e6 0f       	add	r30, r22
     364:	f1 1d       	adc	r31, r1
     366:	d9 01       	movw	r26, r18
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	0d c0       	rjmp	.+26     	; 0x386 <ExtractValue+0x26>
     char i;
	 for(i=0;i<nCount;i++){
	     Dest[2*i]=(Source[FirstPos+i]>>4)+'0';
     36c:	80 81       	ld	r24, Z
     36e:	82 95       	swap	r24
     370:	8f 70       	andi	r24, 0x0F	; 15
     372:	80 5d       	subi	r24, 0xD0	; 208
     374:	8c 93       	st	X, r24
	     Dest[(2*i)+1]=(Source[FirstPos+i]&0x0F)+'0';	 
     376:	81 91       	ld	r24, Z+
     378:	8f 70       	andi	r24, 0x0F	; 15
     37a:	80 5d       	subi	r24, 0xD0	; 208
     37c:	11 96       	adiw	r26, 0x01	; 1
     37e:	8c 93       	st	X, r24
     380:	11 97       	sbiw	r26, 0x01	; 1
	 }	 
}

void ExtractValue(char *Source,char FirstPos,char nCount,char*Dest){//WayneRxBuffer,13,16-13,strVolume);
     char i;
	 for(i=0;i<nCount;i++){
     382:	9f 5f       	subi	r25, 0xFF	; 255
     384:	12 96       	adiw	r26, 0x02	; 2
     386:	94 17       	cp	r25, r20
     388:	88 f3       	brcs	.-30     	; 0x36c <ExtractValue+0xc>
	     Dest[2*i]=(Source[FirstPos+i]>>4)+'0';
	     Dest[(2*i)+1]=(Source[FirstPos+i]&0x0F)+'0';	 
	 }Dest[2*nCount]=0;
     38a:	e4 2f       	mov	r30, r20
     38c:	f0 e0       	ldi	r31, 0x00	; 0
     38e:	ee 0f       	add	r30, r30
     390:	ff 1f       	adc	r31, r31
     392:	e2 0f       	add	r30, r18
     394:	f3 1f       	adc	r31, r19
     396:	10 82       	st	Z, r1
}
     398:	08 95       	ret

0000039a <InitPumpData>:
}

void InitPumpData(){
char i;
char strSerial[20];
     if (StandaloneType==ST_GILBARCO){
     39a:	80 91 01 01 	lds	r24, 0x0101
     39e:	81 30       	cpi	r24, 0x01	; 1
     3a0:	01 f5       	brne	.+64     	; 0x3e2 <InitPumpData+0x48>
     3a2:	80 e0       	ldi	r24, 0x00	; 0
     3a4:	90 e0       	ldi	r25, 0x00	; 0
	     for(i=0;i<16;i++){
		     IsRequestTransInfo[i]=False;
			 IsRequestTotalizerInfo[i]=False;
			 zPumpStatus[i]=PUMP_NONE;
     3a6:	2e e0       	ldi	r18, 0x0E	; 14
void InitPumpData(){
char i;
char strSerial[20];
     if (StandaloneType==ST_GILBARCO){
	     for(i=0;i<16;i++){
		     IsRequestTransInfo[i]=False;
     3a8:	fc 01       	movw	r30, r24
     3aa:	e6 57       	subi	r30, 0x76	; 118
     3ac:	fd 4f       	sbci	r31, 0xFD	; 253
     3ae:	10 82       	st	Z, r1
			 IsRequestTotalizerInfo[i]=False;
     3b0:	fc 01       	movw	r30, r24
     3b2:	ed 5e       	subi	r30, 0xED	; 237
     3b4:	fb 4f       	sbci	r31, 0xFB	; 251
     3b6:	10 82       	st	Z, r1
			 zPumpStatus[i]=PUMP_NONE;
     3b8:	fc 01       	movw	r30, r24
     3ba:	e5 56       	subi	r30, 0x65	; 101
     3bc:	fd 4f       	sbci	r31, 0xFD	; 253
     3be:	20 83       	st	Z, r18
			 PumpStatus[i]=PUMP_NONE;
     3c0:	fc 01       	movw	r30, r24
     3c2:	eb 54       	subi	r30, 0x4B	; 75
     3c4:	fc 4f       	sbci	r31, 0xFC	; 252
     3c6:	20 83       	st	Z, r18
			 NoPumpCount[i]=0;
     3c8:	fc 01       	movw	r30, r24
     3ca:	eb 5d       	subi	r30, 0xDB	; 219
     3cc:	fb 4f       	sbci	r31, 0xFB	; 251
     3ce:	10 82       	st	Z, r1
			 PumpLock[i]=False;
     3d0:	fc 01       	movw	r30, r24
     3d2:	e4 53       	subi	r30, 0x34	; 52
     3d4:	fd 4f       	sbci	r31, 0xFD	; 253
     3d6:	10 82       	st	Z, r1
     3d8:	01 96       	adiw	r24, 0x01	; 1

void InitPumpData(){
char i;
char strSerial[20];
     if (StandaloneType==ST_GILBARCO){
	     for(i=0;i<16;i++){
     3da:	80 31       	cpi	r24, 0x10	; 16
     3dc:	91 05       	cpc	r25, r1
     3de:	21 f7       	brne	.-56     	; 0x3a8 <InitPumpData+0xe>
     3e0:	08 95       	ret
			 zPumpStatus[i]=PUMP_NONE;
			 PumpStatus[i]=PUMP_NONE;
			 NoPumpCount[i]=0;
			 PumpLock[i]=False;
		 }
     }else if (StandaloneType==ST_WAYNE_DART){
     3e2:	80 91 01 01 	lds	r24, 0x0101
     3e6:	82 30       	cpi	r24, 0x02	; 2
     3e8:	f1 f4       	brne	.+60     	; 0x426 <InitPumpData+0x8c>
     3ea:	80 e0       	ldi	r24, 0x00	; 0
     3ec:	90 e0       	ldi	r25, 0x00	; 0
	     for(i=0;i<16;i++){
		     IsRequestTransInfo[i]=False;
     3ee:	fc 01       	movw	r30, r24
     3f0:	e6 57       	subi	r30, 0x76	; 118
     3f2:	fd 4f       	sbci	r31, 0xFD	; 253
     3f4:	10 82       	st	Z, r1
			 IsRequestTotalizerInfo[i]=False;
     3f6:	fc 01       	movw	r30, r24
     3f8:	ed 5e       	subi	r30, 0xED	; 237
     3fa:	fb 4f       	sbci	r31, 0xFB	; 251
     3fc:	10 82       	st	Z, r1
			 zPumpStatus[i]=PW_NONE;
     3fe:	fc 01       	movw	r30, r24
     400:	e5 56       	subi	r30, 0x65	; 101
     402:	fd 4f       	sbci	r31, 0xFD	; 253
     404:	10 82       	st	Z, r1
			 PumpStatus[i]=PW_NONE;
     406:	fc 01       	movw	r30, r24
     408:	eb 54       	subi	r30, 0x4B	; 75
     40a:	fc 4f       	sbci	r31, 0xFC	; 252
     40c:	10 82       	st	Z, r1
			 NoPumpCount[i]=0;
     40e:	fc 01       	movw	r30, r24
     410:	eb 5d       	subi	r30, 0xDB	; 219
     412:	fb 4f       	sbci	r31, 0xFB	; 251
     414:	10 82       	st	Z, r1
			 PumpLock[i]=False;
     416:	fc 01       	movw	r30, r24
     418:	e4 53       	subi	r30, 0x34	; 52
     41a:	fd 4f       	sbci	r31, 0xFD	; 253
     41c:	10 82       	st	Z, r1
     41e:	01 96       	adiw	r24, 0x01	; 1
			 PumpStatus[i]=PUMP_NONE;
			 NoPumpCount[i]=0;
			 PumpLock[i]=False;
		 }
     }else if (StandaloneType==ST_WAYNE_DART){
	     for(i=0;i<16;i++){
     420:	80 31       	cpi	r24, 0x10	; 16
     422:	91 05       	cpc	r25, r1
     424:	21 f7       	brne	.-56     	; 0x3ee <InitPumpData+0x54>
     426:	08 95       	ret

00000428 <uart_init>:
     UBRR0H=0;
     UBRR0L=158;// baud 5787
     UCSR0C=(1<<URSEL0) | (1<<UPM01) | (1<<UCSZ01) | (1<<UCSZ00); // UPM01 untuk set even parity
     sei();
	 */
}
     428:	08 95       	ret

0000042a <InitSystemTimer>:

void InitSystemTimer(){
	TCCR0 |= (1 << CS02) | (1 << CS00);
     42a:	83 b7       	in	r24, 0x33	; 51
     42c:	85 60       	ori	r24, 0x05	; 5
     42e:	83 bf       	out	0x33, r24	; 51
	TIMSK |= _BV(TOIE0);
     430:	89 b7       	in	r24, 0x39	; 57
     432:	82 60       	ori	r24, 0x02	; 2
     434:	89 bf       	out	0x39, r24	; 57
}
     436:	08 95       	ret

00000438 <GetPumpID>:

char GetPumpID(char data){
     char xPumpID=0;
	 xPumpID=(data&0x0F);
	 return xPumpID;
}
     438:	8f 70       	andi	r24, 0x0F	; 15
     43a:	08 95       	ret

0000043c <GetResponse>:

char GetResponse(char data){
     char Response=0;
	 Response=((data&0xF0)>>4);
	 return Response;
}
     43c:	82 95       	swap	r24
     43e:	8f 70       	andi	r24, 0x0F	; 15
     440:	08 95       	ret

00000442 <ShiftArray>:
	 //_delay_ms(10);
}

void ShiftArray(char *strShifted, unsigned int nCount){

}
     442:	08 95       	ret

00000444 <systemServiceSPI>:

void systemServiceSPI(){
}
     444:	08 95       	ret

00000446 <SaveTransactionData>:
	    strSource[i]=strResult[i];
	    strSource[i+1]=0;
	 }
}

void SaveTransactionData(char data){
     446:	28 2f       	mov	r18, r24
     static char SavePipeline=spNone;
	 static char IdxData=0;
	 switch(SavePipeline){
     448:	80 91 2b 01 	lds	r24, 0x012B
     44c:	86 30       	cpi	r24, 0x06	; 6
     44e:	41 f1       	breq	.+80     	; 0x4a0 <SaveTransactionData+0x5a>
     450:	87 30       	cpi	r24, 0x07	; 7
     452:	30 f4       	brcc	.+12     	; 0x460 <SaveTransactionData+0x1a>
     454:	84 30       	cpi	r24, 0x04	; 4
     456:	51 f0       	breq	.+20     	; 0x46c <SaveTransactionData+0x26>
     458:	85 30       	cpi	r24, 0x05	; 5
     45a:	09 f0       	breq	.+2      	; 0x45e <SaveTransactionData+0x18>
     45c:	56 c0       	rjmp	.+172    	; 0x50a <__stack+0xb>
     45e:	17 c0       	rjmp	.+46     	; 0x48e <SaveTransactionData+0x48>
     460:	87 30       	cpi	r24, 0x07	; 7
     462:	79 f1       	breq	.+94     	; 0x4c2 <SaveTransactionData+0x7c>
     464:	8a 30       	cpi	r24, 0x0A	; 10
     466:	09 f0       	breq	.+2      	; 0x46a <SaveTransactionData+0x24>
     468:	50 c0       	rjmp	.+160    	; 0x50a <__stack+0xb>
     46a:	3b c0       	rjmp	.+118    	; 0x4e2 <SaveTransactionData+0x9c>
     case spPumpIdentifier:
	      if (IdxData==1)rxPumpId=FilterBCD(data);
     46c:	90 91 2a 01 	lds	r25, 0x012A
     470:	91 30       	cpi	r25, 0x01	; 1
     472:	29 f4       	brne	.+10     	; 0x47e <SaveTransactionData+0x38>
     474:	82 2f       	mov	r24, r18
     476:	8f 70       	andi	r24, 0x0F	; 15
     478:	80 93 3b 01 	sts	0x013B, r24
     47c:	43 c0       	rjmp	.+134    	; 0x504 <__stack+0x5>
		  else
	      if (IdxData==2)NozzleId=FilterBCD(data);
     47e:	92 30       	cpi	r25, 0x02	; 2
     480:	09 f0       	breq	.+2      	; 0x484 <SaveTransactionData+0x3e>
     482:	40 c0       	rjmp	.+128    	; 0x504 <__stack+0x5>
     484:	82 2f       	mov	r24, r18
     486:	8f 70       	andi	r24, 0x0F	; 15
     488:	80 93 e0 02 	sts	0x02E0, r24
     48c:	3b c0       	rjmp	.+118    	; 0x504 <__stack+0x5>
          IdxData++;
      	  break;
     case spProductGrade:
	      if (IdxData==0)GradeId=FilterBCD(data);
     48e:	90 91 2a 01 	lds	r25, 0x012A
     492:	99 23       	and	r25, r25
     494:	b9 f5       	brne	.+110    	; 0x504 <__stack+0x5>
     496:	82 2f       	mov	r24, r18
     498:	8f 70       	andi	r24, 0x0F	; 15
     49a:	80 93 f6 02 	sts	0x02F6, r24
     49e:	32 c0       	rjmp	.+100    	; 0x504 <__stack+0x5>
		  IdxData++;
      	  break;
     case spProductPrice:	       
          if (data!=0xF9){		      
     4a0:	29 3f       	cpi	r18, 0xF9	; 249
     4a2:	09 f4       	brne	.+2      	; 0x4a6 <SaveTransactionData+0x60>
     4a4:	40 c0       	rjmp	.+128    	; 0x526 <__stack+0x27>
		      strUnitPrice[IdxData]=BCD2Char(FilterBCD(data));
     4a6:	90 91 2a 01 	lds	r25, 0x012A
     4aa:	e9 2f       	mov	r30, r25
     4ac:	f0 e0       	ldi	r31, 0x00	; 0
	 Dest[Length]=0;
}

char FilterBCD(char data){
     char Result;
	 Result=(data&0x0F);
     4ae:	82 2f       	mov	r24, r18
     4b0:	8f 70       	andi	r24, 0x0F	; 15
}

char BCD2Char(char data){
     char Result;
	 Result=0;
	 if ((data>=0)&&(data<=9)) 
     4b2:	8a 30       	cpi	r24, 0x0A	; 10
     4b4:	10 f0       	brcs	.+4      	; 0x4ba <SaveTransactionData+0x74>
     4b6:	80 e3       	ldi	r24, 0x30	; 48
     4b8:	01 c0       	rjmp	.+2      	; 0x4bc <SaveTransactionData+0x76>
	     Result='0'+data;
     4ba:	80 5d       	subi	r24, 0xD0	; 208
	      if (IdxData==0)GradeId=FilterBCD(data);
		  IdxData++;
      	  break;
     case spProductPrice:	       
          if (data!=0xF9){		      
		      strUnitPrice[IdxData]=BCD2Char(FilterBCD(data));
     4bc:	e4 55       	subi	r30, 0x54	; 84
     4be:	fd 4f       	sbci	r31, 0xFD	; 253
     4c0:	1f c0       	rjmp	.+62     	; 0x500 <__stack+0x1>
              strUnitPrice[IdxData+1]=0;
	          IdxData++;
			  }
	  	  break;
     case spProductVolume:
          if (data!=0xFA){//Maks 7 Digit 0000123
     4c2:	2a 3f       	cpi	r18, 0xFA	; 250
     4c4:	91 f1       	breq	.+100    	; 0x52a <__stack+0x2b>
              strVolume[IdxData]=BCD2Char(FilterBCD(data));
     4c6:	90 91 2a 01 	lds	r25, 0x012A
     4ca:	e9 2f       	mov	r30, r25
     4cc:	f0 e0       	ldi	r31, 0x00	; 0
	 Dest[Length]=0;
}

char FilterBCD(char data){
     char Result;
	 Result=(data&0x0F);
     4ce:	82 2f       	mov	r24, r18
     4d0:	8f 70       	andi	r24, 0x0F	; 15
}

char BCD2Char(char data){
     char Result;
	 Result=0;
	 if ((data>=0)&&(data<=9)) 
     4d2:	8a 30       	cpi	r24, 0x0A	; 10
     4d4:	10 f0       	brcs	.+4      	; 0x4da <SaveTransactionData+0x94>
     4d6:	80 e3       	ldi	r24, 0x30	; 48
     4d8:	01 c0       	rjmp	.+2      	; 0x4dc <SaveTransactionData+0x96>
	     Result='0'+data;
     4da:	80 5d       	subi	r24, 0xD0	; 208
	          IdxData++;
			  }
	  	  break;
     case spProductVolume:
          if (data!=0xFA){//Maks 7 Digit 0000123
              strVolume[IdxData]=BCD2Char(FilterBCD(data));
     4dc:	e9 5a       	subi	r30, 0xA9	; 169
     4de:	fd 4f       	sbci	r31, 0xFD	; 253
     4e0:	0f c0       	rjmp	.+30     	; 0x500 <__stack+0x1>
              strVolume[IdxData+1]=0;
	          IdxData++;
		      }
	  	  break;
     case spProductMoney:
          if (data!=0xFB){
     4e2:	2b 3f       	cpi	r18, 0xFB	; 251
     4e4:	f1 f0       	breq	.+60     	; 0x522 <__stack+0x23>
              strAmount[IdxData]=BCD2Char(FilterBCD(data));
     4e6:	90 91 2a 01 	lds	r25, 0x012A
     4ea:	e9 2f       	mov	r30, r25
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
	 Dest[Length]=0;
}

char FilterBCD(char data){
     char Result;
	 Result=(data&0x0F);
     4ee:	82 2f       	mov	r24, r18
     4f0:	8f 70       	andi	r24, 0x0F	; 15
}

char BCD2Char(char data){
     char Result;
	 Result=0;
	 if ((data>=0)&&(data<=9)) 
     4f2:	8a 30       	cpi	r24, 0x0A	; 10
     4f4:	10 f0       	brcs	.+4      	; 0x4fa <SaveTransactionData+0xb4>
     4f6:	80 e3       	ldi	r24, 0x30	; 48
     4f8:	01 c0       	rjmp	.+2      	; 0x4fc <SaveTransactionData+0xb6>
	     Result='0'+data;
     4fa:	80 5d       	subi	r24, 0xD0	; 208
	          IdxData++;
		      }
	  	  break;
     case spProductMoney:
          if (data!=0xFB){
              strAmount[IdxData]=BCD2Char(FilterBCD(data));
     4fc:	e5 55       	subi	r30, 0x55	; 85
     4fe:	fc 4f       	sbci	r31, 0xFC	; 252
     500:	80 83       	st	Z, r24
              strAmount[IdxData+1]=0;
     502:	11 82       	std	Z+1, r1	; 0x01
              IdxData++;
     504:	9f 5f       	subi	r25, 0xFF	; 255
     506:	90 93 2a 01 	sts	0x012A, r25
     case spLRC:
	  	  break;	 
	 }

	 //Pipeline detection
	 if (data==0xF8){
     50a:	28 3f       	cpi	r18, 0xF8	; 248
     50c:	11 f4       	brne	.+4      	; 0x512 <__stack+0x13>
	     SavePipeline=spPumpIdentifier;
     50e:	84 e0       	ldi	r24, 0x04	; 4
     510:	0f c0       	rjmp	.+30     	; 0x530 <__stack+0x31>
		 IdxData=0;
	 }else if (data==0xF6){
     512:	26 3f       	cpi	r18, 0xF6	; 246
     514:	11 f4       	brne	.+4      	; 0x51a <__stack+0x1b>
	     SavePipeline=spProductGrade;
     516:	85 e0       	ldi	r24, 0x05	; 5
     518:	0b c0       	rjmp	.+22     	; 0x530 <__stack+0x31>
		 IdxData=0;
	 }else if (data==0xF7){
     51a:	27 3f       	cpi	r18, 0xF7	; 247
     51c:	11 f4       	brne	.+4      	; 0x522 <__stack+0x23>
	     SavePipeline=spProductPrice;
     51e:	86 e0       	ldi	r24, 0x06	; 6
     520:	07 c0       	rjmp	.+14     	; 0x530 <__stack+0x31>
		 IdxData=0;
	 }else if (data==0xF9){
     522:	29 3f       	cpi	r18, 0xF9	; 249
     524:	11 f4       	brne	.+4      	; 0x52a <__stack+0x2b>
	     SavePipeline=spProductVolume;
     526:	87 e0       	ldi	r24, 0x07	; 7
     528:	03 c0       	rjmp	.+6      	; 0x530 <__stack+0x31>
		 IdxData=0;
	 }else if (data==0xFA){
     52a:	2a 3f       	cpi	r18, 0xFA	; 250
     52c:	31 f4       	brne	.+12     	; 0x53a <__stack+0x3b>
	     SavePipeline=spProductMoney;
     52e:	8a e0       	ldi	r24, 0x0A	; 10
     530:	80 93 2b 01 	sts	0x012B, r24
		 IdxData=0;
     534:	10 92 2a 01 	sts	0x012A, r1
     538:	08 95       	ret
	 }else if (data==0xFB){
     53a:	2b 3f       	cpi	r18, 0xFB	; 251
     53c:	49 f4       	brne	.+18     	; 0x550 <__stack+0x51>
	     PumpTransDigit=IdxData;
     53e:	80 91 2a 01 	lds	r24, 0x012A
     542:	80 93 0b 01 	sts	0x010B, r24
	     SavePipeline=spLRC;
     546:	8b e0       	ldi	r24, 0x0B	; 11
     548:	80 93 2b 01 	sts	0x012B, r24
		 IdxData=0;
     54c:	10 92 2a 01 	sts	0x012A, r1
     550:	08 95       	ret

00000552 <SaveTotalizerData>:
	 }
}

void SaveTotalizerData(char data){
     552:	28 2f       	mov	r18, r24
     static char SavePipeline=spNone;
	 static char IdxData=0;

	 switch(SavePipeline){
     554:	80 91 29 01 	lds	r24, 0x0129
     558:	82 30       	cpi	r24, 0x02	; 2
     55a:	b9 f0       	breq	.+46     	; 0x58a <SaveTotalizerData+0x38>
     55c:	83 30       	cpi	r24, 0x03	; 3
     55e:	09 f4       	brne	.+2      	; 0x562 <SaveTotalizerData+0x10>
     560:	4a c0       	rjmp	.+148    	; 0x5f6 <SaveTotalizerData+0xa4>
     562:	81 30       	cpi	r24, 0x01	; 1
     564:	09 f0       	breq	.+2      	; 0x568 <SaveTotalizerData+0x16>
     566:	7e c0       	rjmp	.+252    	; 0x664 <SaveTotalizerData+0x112>
	 case spTotalizerGrade:
	      if (IdxData==0){
     568:	90 91 28 01 	lds	r25, 0x0128
     56c:	99 23       	and	r25, r25
     56e:	49 f4       	brne	.+18     	; 0x582 <SaveTotalizerData+0x30>
	 Dest[Length]=0;
}

char FilterBCD(char data){
     char Result;
	 Result=(data&0x0F);
     570:	82 2f       	mov	r24, r18
     572:	8f 70       	andi	r24, 0x0F	; 15
	 static char IdxData=0;

	 switch(SavePipeline){
	 case spTotalizerGrade:
	      if (IdxData==0){
		      TGradeId=FilterBCD(data);
     574:	80 93 dc 02 	sts	0x02DC, r24
			  //_uart(1,1,BCD2Char(TGradeId));
			  if (TGradeId>=5)TGradeId=5;
     578:	85 30       	cpi	r24, 0x05	; 5
     57a:	18 f0       	brcs	.+6      	; 0x582 <SaveTotalizerData+0x30>
     57c:	85 e0       	ldi	r24, 0x05	; 5
     57e:	80 93 dc 02 	sts	0x02DC, r24
			  }
          IdxData++; 
     582:	9f 5f       	subi	r25, 0xFF	; 255
     584:	90 93 28 01 	sts	0x0128, r25
     588:	6d c0       	rjmp	.+218    	; 0x664 <SaveTotalizerData+0x112>
	      break;
	 case spTotalizerVolume:
          if ((data&0xF0)==0xE0){
     58a:	82 2f       	mov	r24, r18
     58c:	80 7f       	andi	r24, 0xF0	; 240
     58e:	80 3e       	cpi	r24, 0xE0	; 224
     590:	09 f0       	breq	.+2      	; 0x594 <SaveTotalizerData+0x42>
     592:	68 c0       	rjmp	.+208    	; 0x664 <SaveTotalizerData+0x112>
		      PumpTotalizer.TotalGrade[TGradeId].strVolume[IdxData]=BCD2Char(FilterBCD(data));
     594:	50 91 dc 02 	lds	r21, 0x02DC
     598:	30 91 28 01 	lds	r19, 0x0128
     59c:	63 2f       	mov	r22, r19
     59e:	70 e0       	ldi	r23, 0x00	; 0
	 Dest[Length]=0;
}

char FilterBCD(char data){
     char Result;
	 Result=(data&0x0F);
     5a0:	82 2f       	mov	r24, r18
     5a2:	8f 70       	andi	r24, 0x0F	; 15
}

char BCD2Char(char data){
     char Result;
	 Result=0;
	 if ((data>=0)&&(data<=9)) 
     5a4:	8a 30       	cpi	r24, 0x0A	; 10
     5a6:	10 f0       	brcs	.+4      	; 0x5ac <SaveTotalizerData+0x5a>
     5a8:	40 e3       	ldi	r20, 0x30	; 48
     5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <SaveTotalizerData+0x5e>
	     Result='0'+data;
     5ac:	48 2f       	mov	r20, r24
     5ae:	40 5d       	subi	r20, 0xD0	; 208
			  }
          IdxData++; 
	      break;
	 case spTotalizerVolume:
          if ((data&0xF0)==0xE0){
		      PumpTotalizer.TotalGrade[TGradeId].strVolume[IdxData]=BCD2Char(FilterBCD(data));
     5b0:	85 2f       	mov	r24, r21
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	fc 01       	movw	r30, r24
     5b6:	b5 e0       	ldi	r27, 0x05	; 5
     5b8:	ee 0f       	add	r30, r30
     5ba:	ff 1f       	adc	r31, r31
     5bc:	ba 95       	dec	r27
     5be:	e1 f7       	brne	.-8      	; 0x5b8 <SaveTotalizerData+0x66>
     5c0:	88 0f       	add	r24, r24
     5c2:	99 1f       	adc	r25, r25
     5c4:	e8 1b       	sub	r30, r24
     5c6:	f9 0b       	sbc	r31, r25
     5c8:	e6 0f       	add	r30, r22
     5ca:	f7 1f       	adc	r31, r23
     5cc:	e9 50       	subi	r30, 0x09	; 9
     5ce:	fd 4f       	sbci	r31, 0xFD	; 253
     5d0:	40 83       	st	Z, r20
			  //_uart(1,1,PumpTotalizer.TotalGrade[TGradeId].strVolume[IdxData]);

		      PumpTotalizer.TotalGrade[TGradeId].strVolume[IdxData+1]=0;
     5d2:	85 2f       	mov	r24, r21
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	fc 01       	movw	r30, r24
     5d8:	55 e0       	ldi	r21, 0x05	; 5
     5da:	ee 0f       	add	r30, r30
     5dc:	ff 1f       	adc	r31, r31
     5de:	5a 95       	dec	r21
     5e0:	e1 f7       	brne	.-8      	; 0x5da <SaveTotalizerData+0x88>
     5e2:	88 0f       	add	r24, r24
     5e4:	99 1f       	adc	r25, r25
     5e6:	e8 1b       	sub	r30, r24
     5e8:	f9 0b       	sbc	r31, r25
     5ea:	e9 50       	subi	r30, 0x09	; 9
     5ec:	fd 4f       	sbci	r31, 0xFD	; 253
     5ee:	e6 0f       	add	r30, r22
     5f0:	f7 1f       	adc	r31, r23
     5f2:	11 82       	std	Z+1, r1	; 0x01
     5f4:	34 c0       	rjmp	.+104    	; 0x65e <SaveTotalizerData+0x10c>
		      //TVolume[TGradeId][IdxData+1]=0;
		      IdxData++;
		  }
	      break;
	 case spTotalizerMoney:
          if ((data&0xF0)==0xE0){
     5f6:	82 2f       	mov	r24, r18
     5f8:	80 7f       	andi	r24, 0xF0	; 240
     5fa:	80 3e       	cpi	r24, 0xE0	; 224
     5fc:	99 f5       	brne	.+102    	; 0x664 <SaveTotalizerData+0x112>
	          //TMoney[TGradeId][IdxData]=BCD2Char(FilterBCD(data));
		      //TMoney[TGradeId][IdxData+1]=0;
		      PumpTotalizer.TotalGrade[TGradeId].strMoney[IdxData]=BCD2Char(FilterBCD(data));
     5fe:	70 91 dc 02 	lds	r23, 0x02DC
     602:	30 91 28 01 	lds	r19, 0x0128
     606:	43 2f       	mov	r20, r19
     608:	50 e0       	ldi	r21, 0x00	; 0
	 Dest[Length]=0;
}

char FilterBCD(char data){
     char Result;
	 Result=(data&0x0F);
     60a:	82 2f       	mov	r24, r18
     60c:	8f 70       	andi	r24, 0x0F	; 15
}

char BCD2Char(char data){
     char Result;
	 Result=0;
	 if ((data>=0)&&(data<=9)) 
     60e:	8a 30       	cpi	r24, 0x0A	; 10
     610:	10 f0       	brcs	.+4      	; 0x616 <SaveTotalizerData+0xc4>
     612:	60 e3       	ldi	r22, 0x30	; 48
     614:	02 c0       	rjmp	.+4      	; 0x61a <SaveTotalizerData+0xc8>
	     Result='0'+data;
     616:	68 2f       	mov	r22, r24
     618:	60 5d       	subi	r22, 0xD0	; 208
	      break;
	 case spTotalizerMoney:
          if ((data&0xF0)==0xE0){
	          //TMoney[TGradeId][IdxData]=BCD2Char(FilterBCD(data));
		      //TMoney[TGradeId][IdxData+1]=0;
		      PumpTotalizer.TotalGrade[TGradeId].strMoney[IdxData]=BCD2Char(FilterBCD(data));
     61a:	87 2f       	mov	r24, r23
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	fc 01       	movw	r30, r24
     620:	b5 e0       	ldi	r27, 0x05	; 5
     622:	ee 0f       	add	r30, r30
     624:	ff 1f       	adc	r31, r31
     626:	ba 95       	dec	r27
     628:	e1 f7       	brne	.-8      	; 0x622 <SaveTotalizerData+0xd0>
     62a:	88 0f       	add	r24, r24
     62c:	99 1f       	adc	r25, r25
     62e:	e8 1b       	sub	r30, r24
     630:	f9 0b       	sbc	r31, r25
     632:	e9 50       	subi	r30, 0x09	; 9
     634:	fd 4f       	sbci	r31, 0xFD	; 253
     636:	e4 0f       	add	r30, r20
     638:	f5 1f       	adc	r31, r21
     63a:	67 87       	std	Z+15, r22	; 0x0f
			  //_uart(1,1,PumpTotalizer.TotalGrade[TGradeId].strMoney[IdxData]);
		      PumpTotalizer.TotalGrade[TGradeId].strMoney[IdxData+1]=0;
     63c:	87 2f       	mov	r24, r23
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	fc 01       	movw	r30, r24
     642:	75 e0       	ldi	r23, 0x05	; 5
     644:	ee 0f       	add	r30, r30
     646:	ff 1f       	adc	r31, r31
     648:	7a 95       	dec	r23
     64a:	e1 f7       	brne	.-8      	; 0x644 <SaveTotalizerData+0xf2>
     64c:	88 0f       	add	r24, r24
     64e:	99 1f       	adc	r25, r25
     650:	e8 1b       	sub	r30, r24
     652:	f9 0b       	sbc	r31, r25
     654:	e9 50       	subi	r30, 0x09	; 9
     656:	fd 4f       	sbci	r31, 0xFD	; 253
     658:	e4 0f       	add	r30, r20
     65a:	f5 1f       	adc	r31, r21
     65c:	10 8a       	std	Z+16, r1	; 0x10
  		      IdxData++;
     65e:	3f 5f       	subi	r19, 0xFF	; 255
     660:	30 93 28 01 	sts	0x0128, r19
          }
	      break;		  
	 }	 
	//Grade Data Next Select 
	if (data==0xF6){
     664:	26 3f       	cpi	r18, 0xF6	; 246
     666:	21 f4       	brne	.+8      	; 0x670 <SaveTotalizerData+0x11e>
	    IdxData=0;
     668:	10 92 28 01 	sts	0x0128, r1
	    SavePipeline=spTotalizerGrade;
     66c:	81 e0       	ldi	r24, 0x01	; 1
     66e:	13 c0       	rjmp	.+38     	; 0x696 <SaveTotalizerData+0x144>
		//_uart(1,1,0x0D);
		}
    else
	if (data==0xF9){
     670:	29 3f       	cpi	r18, 0xF9	; 249
     672:	11 f4       	brne	.+4      	; 0x678 <SaveTotalizerData+0x126>
	    SavePipeline=spTotalizerVolume;
     674:	82 e0       	ldi	r24, 0x02	; 2
     676:	07 c0       	rjmp	.+14     	; 0x686 <SaveTotalizerData+0x134>
		IdxData=0;
		//_uart(1,1,0x0D);
		//_uart(1,1,'V');
		}
	else
	if (data==0xFA){
     678:	2a 3f       	cpi	r18, 0xFA	; 250
     67a:	51 f4       	brne	.+20     	; 0x690 <SaveTotalizerData+0x13e>
	    PumpTotalDigit=IdxData;
     67c:	80 91 28 01 	lds	r24, 0x0128
     680:	80 93 0c 01 	sts	0x010C, r24
	    SavePipeline=spTotalizerMoney;
     684:	83 e0       	ldi	r24, 0x03	; 3
     686:	80 93 29 01 	sts	0x0129, r24
		IdxData=0;
     68a:	10 92 28 01 	sts	0x0128, r1
     68e:	08 95       	ret
		//_uart(1,1,0x0D);
		//_uart(1,1,'M');
		}
    else
	if (data==0xF4)SavePipeline=spTotalizerPPU1;
     690:	24 3f       	cpi	r18, 0xF4	; 244
     692:	21 f4       	brne	.+8      	; 0x69c <SaveTotalizerData+0x14a>
     694:	88 e0       	ldi	r24, 0x08	; 8
     696:	80 93 29 01 	sts	0x0129, r24
     69a:	08 95       	ret
	else
	if (data==0xF5)SavePipeline=spTotalizerPPU2;
     69c:	25 3f       	cpi	r18, 0xF5	; 245
     69e:	19 f4       	brne	.+6      	; 0x6a6 <SaveTotalizerData+0x154>
     6a0:	89 e0       	ldi	r24, 0x09	; 9
     6a2:	80 93 29 01 	sts	0x0129, r24
     6a6:	08 95       	ret

000006a8 <OnReceive1>:
            strRFID[8]=0;
     sprintf_P(strSerial,PSTR("RFID:%s"),strRFID);
     _uart_print(1,0,strSerial);
	 }
	 */
}
     6a8:	08 95       	ret

000006aa <UpdateMoney>:

void UpdateMoney(char *Dest, char *Src , unsigned int Length){
     6aa:	cf 93       	push	r28
     6ac:	df 93       	push	r29
     6ae:	ec 01       	movw	r28, r24
     6b0:	20 e0       	ldi	r18, 0x00	; 0
     6b2:	0b c0       	rjmp	.+22     	; 0x6ca <UpdateMoney+0x20>
     unsigned char i;
	 for(i=0;i<Length;i++){
	     Dest[i]=Src[Length-i];
     6b4:	fe 01       	movw	r30, r28
     6b6:	e8 0f       	add	r30, r24
     6b8:	f9 1f       	adc	r31, r25
     6ba:	da 01       	movw	r26, r20
     6bc:	a8 1b       	sub	r26, r24
     6be:	b9 0b       	sbc	r27, r25
     6c0:	a6 0f       	add	r26, r22
     6c2:	b7 1f       	adc	r27, r23
     6c4:	8c 91       	ld	r24, X
     6c6:	80 83       	st	Z, r24
	 */
}

void UpdateMoney(char *Dest, char *Src , unsigned int Length){
     unsigned char i;
	 for(i=0;i<Length;i++){
     6c8:	2f 5f       	subi	r18, 0xFF	; 255
     6ca:	82 2f       	mov	r24, r18
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	84 17       	cp	r24, r20
     6d0:	95 07       	cpc	r25, r21
     6d2:	80 f3       	brcs	.-32     	; 0x6b4 <UpdateMoney+0xa>
	     Dest[i]=Src[Length-i];
	 }
	 Dest[Length]=0;
     6d4:	c4 0f       	add	r28, r20
     6d6:	d5 1f       	adc	r29, r21
     6d8:	18 82       	st	Y, r1
}
     6da:	df 91       	pop	r29
     6dc:	cf 91       	pop	r28
     6de:	08 95       	ret

000006e0 <FilterBCD>:

char FilterBCD(char data){
     char Result;
	 Result=(data&0x0F);
	 return Result;
}
     6e0:	8f 70       	andi	r24, 0x0F	; 15
     6e2:	08 95       	ret

000006e4 <BCD2Char>:

char BCD2Char(char data){
     char Result;
	 Result=0;
	 if ((data>=0)&&(data<=9)) 
     6e4:	8a 30       	cpi	r24, 0x0A	; 10
     6e6:	10 f0       	brcs	.+4      	; 0x6ec <BCD2Char+0x8>
     6e8:	80 e3       	ldi	r24, 0x30	; 48
     6ea:	08 95       	ret
	     Result='0'+data;
     6ec:	80 5d       	subi	r24, 0xD0	; 208
     else Result='0';
	 return Result;
}
     6ee:	08 95       	ret

000006f0 <ShiftData>:

void ShiftData(char data){//data [0]..[10]
     6f0:	98 2f       	mov	r25, r24
     6f2:	ed e0       	ldi	r30, 0x0D	; 13
     6f4:	f4 e0       	ldi	r31, 0x04	; 4
     char i;
	 for(i=11;i>0;i--){//0..10
	    zDataBuffer[i]=zDataBuffer[i-1];
     6f6:	80 81       	ld	r24, Z
     6f8:	81 83       	std	Z+1, r24	; 0x01
     6fa:	31 97       	sbiw	r30, 0x01	; 1
	 return Result;
}

void ShiftData(char data){//data [0]..[10]
     char i;
	 for(i=11;i>0;i--){//0..10
     6fc:	84 e0       	ldi	r24, 0x04	; 4
     6fe:	e2 30       	cpi	r30, 0x02	; 2
     700:	f8 07       	cpc	r31, r24
     702:	c9 f7       	brne	.-14     	; 0x6f6 <ShiftData+0x6>
	    zDataBuffer[i]=zDataBuffer[i-1];
	 }
	 zDataBuffer[0]=data;
     704:	91 83       	std	Z+1, r25	; 0x01
}
     706:	08 95       	ret

00000708 <SetReceiveLine>:

void SetReceiveLine(char RecLine){
     stReceiveCom0=RecLine;
     708:	80 93 04 01 	sts	0x0104, r24
}
     70c:	08 95       	ret

0000070e <GetReceiveLine>:

char GetReceiveLine(){
     return stReceiveCom0;
}
     70e:	80 91 04 01 	lds	r24, 0x0104
     712:	08 95       	ret

00000714 <StrPosCopy>:



void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
     714:	cf 93       	push	r28
     716:	df 93       	push	r29
     718:	eb 01       	movw	r28, r22
     71a:	da 01       	movw	r26, r20
     71c:	a8 0f       	add	r26, r24
     71e:	b9 1f       	adc	r27, r25
     720:	40 e0       	ldi	r20, 0x00	; 0
     722:	50 e0       	ldi	r21, 0x00	; 0
     724:	07 c0       	rjmp	.+14     	; 0x734 <StrPosCopy+0x20>
unsigned int i;
     for(i=0;i<Length;i++){
	    Dest[i]=Source[IdxSource+i];
     726:	fe 01       	movw	r30, r28
     728:	e4 0f       	add	r30, r20
     72a:	f5 1f       	adc	r31, r21
     72c:	8d 91       	ld	r24, X+
     72e:	80 83       	st	Z, r24



void StrPosCopy(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
unsigned int i;
     for(i=0;i<Length;i++){
     730:	4f 5f       	subi	r20, 0xFF	; 255
     732:	5f 4f       	sbci	r21, 0xFF	; 255
     734:	42 17       	cp	r20, r18
     736:	53 07       	cpc	r21, r19
     738:	b0 f3       	brcs	.-20     	; 0x726 <StrPosCopy+0x12>
	    Dest[i]=Source[IdxSource+i];
	 }Dest[Length]=0;
     73a:	c2 0f       	add	r28, r18
     73c:	d3 1f       	adc	r29, r19
     73e:	18 82       	st	Y, r1
}
     740:	df 91       	pop	r29
     742:	cf 91       	pop	r28
     744:	08 95       	ret

00000746 <CharPosCopy>:

char CharPosCopy(char *Source, unsigned int IdxSource){
     746:	fb 01       	movw	r30, r22
     748:	e8 0f       	add	r30, r24
     74a:	f9 1f       	adc	r31, r25
     char Result;
          Result=Source[IdxSource];
	 return Result;
}
     74c:	80 81       	ld	r24, Z
     74e:	08 95       	ret

00000750 <HexToChar>:
	 }
}

char HexToChar(char xHex){
char Result='0';
     if (xHex<10) Result='0'+xHex;
     750:	8a 30       	cpi	r24, 0x0A	; 10
     752:	10 f4       	brcc	.+4      	; 0x758 <HexToChar+0x8>
     754:	80 5d       	subi	r24, 0xD0	; 208
     756:	08 95       	ret
	 else 
	 if (xHex<16) Result='A'+(xHex-10); 
     758:	80 31       	cpi	r24, 0x10	; 16
     75a:	10 f0       	brcs	.+4      	; 0x760 <HexToChar+0x10>
     75c:	80 e3       	ldi	r24, 0x30	; 48
     75e:	08 95       	ret
     760:	89 5c       	subi	r24, 0xC9	; 201
	 else Result='0';
     return Result;
}
     762:	08 95       	ret

00000764 <StrPosCopyReverse>:

//Copy Reverse Filtered BCD String
void StrPosCopyReverse(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
     764:	cf 93       	push	r28
     766:	df 93       	push	r29
     768:	eb 01       	movw	r28, r22
     76a:	da 01       	movw	r26, r20
     76c:	a8 0f       	add	r26, r24
     76e:	b9 1f       	adc	r27, r25
     770:	40 e0       	ldi	r20, 0x00	; 0
     772:	50 e0       	ldi	r21, 0x00	; 0
     774:	0e c0       	rjmp	.+28     	; 0x792 <StrPosCopyReverse+0x2e>
	 Dest[Length]=0;
}

char FilterBCD(char data){
     char Result;
	 Result=(data&0x0F);
     776:	8c 91       	ld	r24, X
     778:	8f 70       	andi	r24, 0x0F	; 15
}

char BCD2Char(char data){
     char Result;
	 Result=0;
	 if ((data>=0)&&(data<=9)) 
     77a:	8a 30       	cpi	r24, 0x0A	; 10
     77c:	10 f0       	brcs	.+4      	; 0x782 <StrPosCopyReverse+0x1e>
     77e:	80 e3       	ldi	r24, 0x30	; 48
     780:	01 c0       	rjmp	.+2      	; 0x784 <StrPosCopyReverse+0x20>
	     Result='0'+data;
     782:	80 5d       	subi	r24, 0xD0	; 208

//Copy Reverse Filtered BCD String
void StrPosCopyReverse(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
     unsigned int i;
	 for (i=0;i<Length;i++){
	      Dest[i]=BCD2Char(FilterBCD(Source[IdxSource-i]));
     784:	fe 01       	movw	r30, r28
     786:	e4 0f       	add	r30, r20
     788:	f5 1f       	adc	r31, r21
     78a:	80 83       	st	Z, r24
}

//Copy Reverse Filtered BCD String
void StrPosCopyReverse(char *Source, char *Dest,unsigned int IdxSource, unsigned int Length){
     unsigned int i;
	 for (i=0;i<Length;i++){
     78c:	4f 5f       	subi	r20, 0xFF	; 255
     78e:	5f 4f       	sbci	r21, 0xFF	; 255
     790:	11 97       	sbiw	r26, 0x01	; 1
     792:	42 17       	cp	r20, r18
     794:	53 07       	cpc	r21, r19
     796:	78 f3       	brcs	.-34     	; 0x776 <StrPosCopyReverse+0x12>
	      Dest[i]=BCD2Char(FilterBCD(Source[IdxSource-i]));
	 }Dest[Length]=0;
     798:	c2 0f       	add	r28, r18
     79a:	d3 1f       	adc	r29, r19
     79c:	18 82       	st	Y, r1
}
     79e:	df 91       	pop	r29
     7a0:	cf 91       	pop	r28
     7a2:	08 95       	ret

000007a4 <uartGilbarco>:
void StartupInfo(){
    _uart_printf(1,1,PSTR("Initialized"));
}

void uartGilbarco(){
}
     7a4:	08 95       	ret

000007a6 <FillChar>:

void FillChar(char *strMemory, unsigned int Length,char data){
     7a6:	20 e0       	ldi	r18, 0x00	; 0
     7a8:	30 e0       	ldi	r19, 0x00	; 0
     7aa:	06 c0       	rjmp	.+12     	; 0x7b8 <FillChar+0x12>
     unsigned int i;
	 for (i=0;i<Length;i++){
	     strMemory[i]=data;
     7ac:	fc 01       	movw	r30, r24
     7ae:	e2 0f       	add	r30, r18
     7b0:	f3 1f       	adc	r31, r19
     7b2:	40 83       	st	Z, r20
void uartGilbarco(){
}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
     7b4:	2f 5f       	subi	r18, 0xFF	; 255
     7b6:	3f 4f       	sbci	r19, 0xFF	; 255
     7b8:	26 17       	cp	r18, r22
     7ba:	37 07       	cpc	r19, r23
     7bc:	b8 f3       	brcs	.-18     	; 0x7ac <FillChar+0x6>
	     strMemory[i]=data;
	 }
}
     7be:	08 95       	ret

000007c0 <StartupInfo>:
	 }Dest[Length]=0;
}


void StartupInfo(){
    _uart_printf(1,1,PSTR("Initialized"));
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	61 e0       	ldi	r22, 0x01	; 1
     7c4:	4c e2       	ldi	r20, 0x2C	; 44
     7c6:	51 e0       	ldi	r21, 0x01	; 1
     7c8:	0e 94 85 18 	call	0x310a	; 0x310a <_uart_printf>
}
     7cc:	08 95       	ret

000007ce <AddZeroLead>:
	   }//Zeroed[Length-ZeroPos]=0;
	 }     
   }
}

void AddZeroLead(char *String,unsigned char Size){// 1234 ->0000001234
     7ce:	bf 92       	push	r11
     7d0:	cf 92       	push	r12
     7d2:	df 92       	push	r13
     7d4:	ef 92       	push	r14
     7d6:	ff 92       	push	r15
     7d8:	0f 93       	push	r16
     7da:	1f 93       	push	r17
     7dc:	df 93       	push	r29
     7de:	cf 93       	push	r28
     7e0:	cd b7       	in	r28, 0x3d	; 61
     7e2:	de b7       	in	r29, 0x3e	; 62
     7e4:	64 97       	sbiw	r28, 0x14	; 20
     7e6:	0f b6       	in	r0, 0x3f	; 63
     7e8:	f8 94       	cli
     7ea:	de bf       	out	0x3e, r29	; 62
     7ec:	0f be       	out	0x3f, r0	; 63
     7ee:	cd bf       	out	0x3d, r28	; 61
     7f0:	8c 01       	movw	r16, r24
     char i,Length,strAdded[20];
     Length=strlen(String);
     7f2:	fc 01       	movw	r30, r24
     7f4:	01 90       	ld	r0, Z+
     7f6:	00 20       	and	r0, r0
     7f8:	e9 f7       	brne	.-6      	; 0x7f4 <AddZeroLead+0x26>
     7fa:	31 97       	sbiw	r30, 0x01	; 1
     7fc:	2e 2f       	mov	r18, r30
     7fe:	28 1b       	sub	r18, r24

	 if (Size>Length){
     800:	26 17       	cp	r18, r22
     802:	e0 f5       	brcc	.+120    	; 0x87c <AddZeroLead+0xae>
     804:	7e 01       	movw	r14, r28
     806:	08 94       	sec
     808:	e1 1c       	adc	r14, r1
     80a:	f1 1c       	adc	r15, r1
     80c:	f7 01       	movw	r30, r14
	   }//Zeroed[Length-ZeroPos]=0;
	 }     
   }
}

void AddZeroLead(char *String,unsigned char Size){// 1234 ->0000001234
     80e:	be 2c       	mov	r11, r14
     char i,Length,strAdded[20];
     Length=strlen(String);

	 if (Size>Length){
         for(i=0;i<Size;i++){
	         strAdded[i]='0';
     810:	90 e3       	ldi	r25, 0x30	; 48
     812:	01 c0       	rjmp	.+2      	; 0x816 <AddZeroLead+0x48>
     814:	91 93       	st	Z+, r25
void AddZeroLead(char *String,unsigned char Size){// 1234 ->0000001234
     char i,Length,strAdded[20];
     Length=strlen(String);

	 if (Size>Length){
         for(i=0;i<Size;i++){
     816:	8e 2f       	mov	r24, r30
     818:	8b 19       	sub	r24, r11
     81a:	86 17       	cp	r24, r22
     81c:	d8 f3       	brcs	.-10     	; 0x814 <AddZeroLead+0x46>
	         strAdded[i]='0';
	     }strAdded[Size]=0;
     81e:	46 2f       	mov	r20, r22
     820:	50 e0       	ldi	r21, 0x00	; 0
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	fc 01       	movw	r30, r24
     828:	e4 0f       	add	r30, r20
     82a:	f5 1f       	adc	r31, r21
     82c:	10 82       	st	Z, r1
	     //Copy
         for(i=(Size-Length);i<Size;i++){
     82e:	76 2f       	mov	r23, r22
     830:	72 1b       	sub	r23, r18
     832:	6c 01       	movw	r12, r24
	         strAdded[i]=String[i-(Size-Length)];
     834:	30 e0       	ldi	r19, 0x00	; 0
     836:	24 1b       	sub	r18, r20
     838:	35 0b       	sbc	r19, r21
     83a:	0c c0       	rjmp	.+24     	; 0x854 <AddZeroLead+0x86>
     83c:	e7 2f       	mov	r30, r23
     83e:	f0 e0       	ldi	r31, 0x00	; 0
     840:	d6 01       	movw	r26, r12
     842:	ae 0f       	add	r26, r30
     844:	bf 1f       	adc	r27, r31
     846:	e0 0f       	add	r30, r16
     848:	f1 1f       	adc	r31, r17
     84a:	e2 0f       	add	r30, r18
     84c:	f3 1f       	adc	r31, r19
     84e:	80 81       	ld	r24, Z
     850:	8c 93       	st	X, r24
	 if (Size>Length){
         for(i=0;i<Size;i++){
	         strAdded[i]='0';
	     }strAdded[Size]=0;
	     //Copy
         for(i=(Size-Length);i<Size;i++){
     852:	7f 5f       	subi	r23, 0xFF	; 255
     854:	76 17       	cp	r23, r22
     856:	90 f3       	brcs	.-28     	; 0x83c <AddZeroLead+0x6e>
	         strAdded[i]=String[i-(Size-Length)];
	     }strAdded[Size]=0;
     858:	4c 0d       	add	r20, r12
     85a:	5d 1d       	adc	r21, r13
     85c:	da 01       	movw	r26, r20
     85e:	1c 92       	st	X, r1
     860:	f8 01       	movw	r30, r16
     862:	04 c0       	rjmp	.+8      	; 0x86c <AddZeroLead+0x9e>
	     //Zeroed
         for(i=0;i<Size;i++){
	         String[i]=strAdded[i];
     864:	d7 01       	movw	r26, r14
     866:	8d 91       	ld	r24, X+
     868:	7d 01       	movw	r14, r26
     86a:	81 93       	st	Z+, r24
	     //Copy
         for(i=(Size-Length);i<Size;i++){
	         strAdded[i]=String[i-(Size-Length)];
	     }strAdded[Size]=0;
	     //Zeroed
         for(i=0;i<Size;i++){
     86c:	8e 2d       	mov	r24, r14
     86e:	8b 19       	sub	r24, r11
     870:	86 17       	cp	r24, r22
     872:	c0 f3       	brcs	.-16     	; 0x864 <AddZeroLead+0x96>
	         String[i]=strAdded[i];
	     }String[Size]=0;
     874:	06 0f       	add	r16, r22
     876:	11 1d       	adc	r17, r1
     878:	f8 01       	movw	r30, r16
     87a:	10 82       	st	Z, r1
	 }
}
     87c:	64 96       	adiw	r28, 0x14	; 20
     87e:	0f b6       	in	r0, 0x3f	; 63
     880:	f8 94       	cli
     882:	de bf       	out	0x3e, r29	; 62
     884:	0f be       	out	0x3f, r0	; 63
     886:	cd bf       	out	0x3d, r28	; 61
     888:	cf 91       	pop	r28
     88a:	df 91       	pop	r29
     88c:	1f 91       	pop	r17
     88e:	0f 91       	pop	r16
     890:	ff 90       	pop	r15
     892:	ef 90       	pop	r14
     894:	df 90       	pop	r13
     896:	cf 90       	pop	r12
     898:	bf 90       	pop	r11
     89a:	08 95       	ret

0000089c <RemZeroLead>:
     char Result;
          Result=Source[IdxSource];
	 return Result;
}

void RemZeroLead(char *Zeroed){//Remove Zero Character 00001004 000050000 0 
     89c:	cf 93       	push	r28
     89e:	df 93       	push	r29
     8a0:	ec 01       	movw	r28, r24
unsigned char i=0,Length=0,ZeroPos=0,IsFound=False;;
     IsFound=False;
     ZeroPos=0;Length=strlen(Zeroed);
     8a2:	fc 01       	movw	r30, r24
     8a4:	01 90       	ld	r0, Z+
     8a6:	00 20       	and	r0, r0
     8a8:	e9 f7       	brne	.-6      	; 0x8a4 <RemZeroLead+0x8>
     8aa:	31 97       	sbiw	r30, 0x01	; 1
     8ac:	e8 1b       	sub	r30, r24
  if ((Length>1)&&(Zeroed[0]=='0')){
     8ae:	e2 30       	cpi	r30, 0x02	; 2
     8b0:	d0 f1       	brcs	.+116    	; 0x926 <RemZeroLead+0x8a>
     8b2:	88 81       	ld	r24, Y
     8b4:	80 33       	cpi	r24, 0x30	; 48
     8b6:	b9 f5       	brne	.+110    	; 0x926 <RemZeroLead+0x8a>
     8b8:	4c 2f       	mov	r20, r28
     8ba:	de 01       	movw	r26, r28
     8bc:	90 e0       	ldi	r25, 0x00	; 0
	 if (Zeroed[0]=='0'){
         for(i=0;i<Length;i++){//00000000->0
	         if ((Zeroed[i]=='0')&&(Zeroed[i+1]=='0')&&(IsFound==False)) ZeroPos++;
     8be:	8c 91       	ld	r24, X
     8c0:	80 33       	cpi	r24, 0x30	; 48
     8c2:	69 f4       	brne	.+26     	; 0x8de <RemZeroLead+0x42>
     8c4:	11 96       	adiw	r26, 0x01	; 1
     8c6:	8c 91       	ld	r24, X
     8c8:	11 97       	sbiw	r26, 0x01	; 1
     8ca:	80 33       	cpi	r24, 0x30	; 48
     8cc:	11 f4       	brne	.+4      	; 0x8d2 <RemZeroLead+0x36>
     8ce:	9f 5f       	subi	r25, 0xFF	; 255
     8d0:	06 c0       	rjmp	.+12     	; 0x8de <RemZeroLead+0x42>
             if ((Zeroed[i]=='0')&&(Zeroed[i+1]!='0')){
			     if ((Zeroed[i+1]=='.')||(Zeroed[i+1]==','))ZeroPos--;
     8d2:	8e 32       	cpi	r24, 0x2E	; 46
     8d4:	11 f0       	breq	.+4      	; 0x8da <RemZeroLead+0x3e>
     8d6:	8c 32       	cpi	r24, 0x2C	; 44
     8d8:	41 f4       	brne	.+16     	; 0x8ea <RemZeroLead+0x4e>
     8da:	91 50       	subi	r25, 0x01	; 1
     8dc:	06 c0       	rjmp	.+12     	; 0x8ea <RemZeroLead+0x4e>
     8de:	11 96       	adiw	r26, 0x01	; 1
unsigned char i=0,Length=0,ZeroPos=0,IsFound=False;;
     IsFound=False;
     ZeroPos=0;Length=strlen(Zeroed);
  if ((Length>1)&&(Zeroed[0]=='0')){
	 if (Zeroed[0]=='0'){
         for(i=0;i<Length;i++){//00000000->0
     8e0:	8a 2f       	mov	r24, r26
     8e2:	84 1b       	sub	r24, r20
     8e4:	8e 17       	cp	r24, r30
     8e6:	58 f3       	brcs	.-42     	; 0x8be <RemZeroLead+0x22>
     8e8:	01 c0       	rjmp	.+2      	; 0x8ec <RemZeroLead+0x50>
		         IsFound=True;
			     break;			  
			     }
	      }

		  if (IsFound==True)ZeroPos++;
     8ea:	9f 5f       	subi	r25, 0xFF	; 255
		  if (ZeroPos>=Length)ZeroPos=Length-1;
     8ec:	9e 17       	cp	r25, r30
     8ee:	10 f0       	brcs	.+4      	; 0x8f4 <RemZeroLead+0x58>
     8f0:	9e 2f       	mov	r25, r30
     8f2:	91 50       	subi	r25, 0x01	; 1
     8f4:	40 e0       	ldi	r20, 0x00	; 0
          for(i=0;i<(Length-ZeroPos);i++){
     8f6:	89 2f       	mov	r24, r25
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	2e 2f       	mov	r18, r30
     8fc:	30 e0       	ldi	r19, 0x00	; 0
     8fe:	28 1b       	sub	r18, r24
     900:	39 0b       	sbc	r19, r25
	          Zeroed[i]=Zeroed[i+ZeroPos];
     902:	be 01       	movw	r22, r28
     904:	68 0f       	add	r22, r24
     906:	79 1f       	adc	r23, r25
     908:	09 c0       	rjmp	.+18     	; 0x91c <RemZeroLead+0x80>
     90a:	fe 01       	movw	r30, r28
     90c:	ea 0f       	add	r30, r26
     90e:	fb 1f       	adc	r31, r27
     910:	a6 0f       	add	r26, r22
     912:	b7 1f       	adc	r27, r23
     914:	8c 91       	ld	r24, X
     916:	80 83       	st	Z, r24
		      Zeroed[i+1]=0;
     918:	11 82       	std	Z+1, r1	; 0x01
			     }
	      }

		  if (IsFound==True)ZeroPos++;
		  if (ZeroPos>=Length)ZeroPos=Length-1;
          for(i=0;i<(Length-ZeroPos);i++){
     91a:	4f 5f       	subi	r20, 0xFF	; 255
     91c:	a4 2f       	mov	r26, r20
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	a2 17       	cp	r26, r18
     922:	b3 07       	cpc	r27, r19
     924:	94 f3       	brlt	.-28     	; 0x90a <RemZeroLead+0x6e>
	          Zeroed[i]=Zeroed[i+ZeroPos];
		      Zeroed[i+1]=0;
	   }//Zeroed[Length-ZeroPos]=0;
	 }     
   }
}
     926:	df 91       	pop	r29
     928:	cf 91       	pop	r28
     92a:	08 95       	ret

0000092c <WayneOnReceive>:
	     Dest[2*i]=(Source[FirstPos+i]>>4)+'0';
	     Dest[(2*i)+1]=(Source[FirstPos+i]&0x0F)+'0';	 
	 }Dest[2*nCount]=0;
}

void WayneOnReceive(char WayneDataIn){
     92c:	0f 93       	push	r16
     92e:	1f 93       	push	r17
     static unsigned int tCRC=0xFFFF;
     char i,strSend[40],rxNozzleID=0;
     static char zReceive=wrWaitSTX;
     static rcvBuffer[11];

		WayneRxBuffer[rxBufferLength]=WayneDataIn;// 03 FA
     930:	90 91 15 01 	lds	r25, 0x0115
     934:	e9 2f       	mov	r30, r25
     936:	f0 e0       	ldi	r31, 0x00	; 0
     938:	e3 5c       	subi	r30, 0xC3	; 195
     93a:	fe 4f       	sbci	r31, 0xFE	; 254
     93c:	80 83       	st	Z, r24
		if (rxBufferLength<70)
     93e:	96 34       	cpi	r25, 0x46	; 70
     940:	18 f4       	brcc	.+6      	; 0x948 <WayneOnReceive+0x1c>
		    rxBufferLength++;
     942:	9f 5f       	subi	r25, 0xFF	; 255
     944:	90 93 15 01 	sts	0x0115, r25
        
		if ((WayneRxBuffer[rxBufferLength-2]==0x03)&&(WayneDataIn==0xFA)){
     948:	20 91 15 01 	lds	r18, 0x0115
     94c:	e2 2f       	mov	r30, r18
     94e:	f0 e0       	ldi	r31, 0x00	; 0
     950:	e3 5c       	subi	r30, 0xC3	; 195
     952:	fe 4f       	sbci	r31, 0xFE	; 254
     954:	32 97       	sbiw	r30, 0x02	; 2
     956:	90 81       	ld	r25, Z
     958:	32 96       	adiw	r30, 0x02	; 2
     95a:	93 30       	cpi	r25, 0x03	; 3
     95c:	09 f0       	breq	.+2      	; 0x960 <WayneOnReceive+0x34>
     95e:	a3 c0       	rjmp	.+326    	; 0xaa6 <WayneOnReceive+0x17a>
     960:	8a 3f       	cpi	r24, 0xFA	; 250
     962:	09 f0       	breq	.+2      	; 0x966 <WayneOnReceive+0x3a>
     964:	ab c0       	rjmp	.+342    	; 0xabc <WayneOnReceive+0x190>
			WayneRxSequence=WayneRxBuffer[1]&0x0F;
     966:	80 91 3e 01 	lds	r24, 0x013E
     96a:	8f 70       	andi	r24, 0x0F	; 15
     96c:	80 93 18 01 	sts	0x0118, r24
			//Message Identification
			MsgID[0]=WayneRxBuffer[2];
     970:	00 91 3f 01 	lds	r16, 0x013F
     974:	00 93 33 01 	sts	0x0133, r16
			MsgID[1]=WayneRxBuffer[3];
     978:	90 91 40 01 	lds	r25, 0x0140
     97c:	90 93 34 01 	sts	0x0134, r25
			  0 51 3E 01 01 00 03 04 00 46 00 
			  1 02 02 08 00 00 01 54 00 00 70 
			  2 84 03 04 00 46 00 02 09 05 00 
			  3 00 02 00 00 53 66 03 FA 
			*/
            MsgInfo=MI_UNKNOWN;
     980:	87 e0       	ldi	r24, 0x07	; 7
     982:	80 93 19 01 	sts	0x0119, r24
            if ((MsgID[0]==0x06)&&(MsgID[1]==0x1F)&&(rxBufferLength>=57)){
     986:	06 30       	cpi	r16, 0x06	; 6
     988:	71 f5       	brne	.+92     	; 0x9e6 <WayneOnReceive+0xba>
     98a:	9f 31       	cpi	r25, 0x1F	; 31
     98c:	09 f0       	breq	.+2      	; 0x990 <WayneOnReceive+0x64>
     98e:	89 c0       	rjmp	.+274    	; 0xaa2 <WayneOnReceive+0x176>
     990:	29 33       	cpi	r18, 0x39	; 57
     992:	08 f4       	brcc	.+2      	; 0x996 <WayneOnReceive+0x6a>
     994:	86 c0       	rjmp	.+268    	; 0xaa2 <WayneOnReceive+0x176>
			     MsgInfo=MI_TOTALIZER;
     996:	88 e0       	ldi	r24, 0x08	; 8
     998:	80 93 19 01 	sts	0x0119, r24
			     rxNozzleID=(WayneRxBuffer[37]&0x0F);
				 ExtractValue(WayneRxBuffer,38,5,PumpTotalizer.TotalGrade[rxNozzleID-1].strVolume);		
     99c:	00 91 62 01 	lds	r16, 0x0162
     9a0:	0f 70       	andi	r16, 0x0F	; 15
     9a2:	10 e0       	ldi	r17, 0x00	; 0
     9a4:	c8 01       	movw	r24, r16
     9a6:	01 97       	sbiw	r24, 0x01	; 1
     9a8:	9c 01       	movw	r18, r24
     9aa:	55 e0       	ldi	r21, 0x05	; 5
     9ac:	22 0f       	add	r18, r18
     9ae:	33 1f       	adc	r19, r19
     9b0:	5a 95       	dec	r21
     9b2:	e1 f7       	brne	.-8      	; 0x9ac <WayneOnReceive+0x80>
     9b4:	88 0f       	add	r24, r24
     9b6:	99 1f       	adc	r25, r25
     9b8:	28 1b       	sub	r18, r24
     9ba:	39 0b       	sbc	r19, r25
     9bc:	29 50       	subi	r18, 0x09	; 9
     9be:	3d 4f       	sbci	r19, 0xFD	; 253
     9c0:	8d e3       	ldi	r24, 0x3D	; 61
     9c2:	91 e0       	ldi	r25, 0x01	; 1
     9c4:	66 e2       	ldi	r22, 0x26	; 38
     9c6:	45 e0       	ldi	r20, 0x05	; 5
     9c8:	0e 94 b0 01 	call	0x360	; 0x360 <ExtractValue>
				 RemZeroLead(PumpTotalizer.TotalGrade[rxNozzleID].strVolume);
     9cc:	c8 01       	movw	r24, r16
     9ce:	35 e0       	ldi	r19, 0x05	; 5
     9d0:	88 0f       	add	r24, r24
     9d2:	99 1f       	adc	r25, r25
     9d4:	3a 95       	dec	r19
     9d6:	e1 f7       	brne	.-8      	; 0x9d0 <WayneOnReceive+0xa4>
     9d8:	00 0f       	add	r16, r16
     9da:	11 1f       	adc	r17, r17
     9dc:	80 1b       	sub	r24, r16
     9de:	91 0b       	sbc	r25, r17
     9e0:	89 50       	subi	r24, 0x09	; 9
     9e2:	9d 4f       	sbci	r25, 0xFD	; 253
     9e4:	38 c0       	rjmp	.+112    	; 0xa56 <WayneOnReceive+0x12a>
			     sprintf_P(strSend,PSTR("Totalizer%d:[V:%s]"),rxNozzleID,PumpTotalizer.TotalGrade[rxNozzleID].strVolume);
			     _uart_print(1,1,strSend);
				 #endif

			}
            if ((MsgID[0]==0x01)&&(MsgID[1]==0x01)&&(rxBufferLength>=38)){//Last Transaction
     9e6:	01 30       	cpi	r16, 0x01	; 1
     9e8:	a9 f4       	brne	.+42     	; 0xa14 <WayneOnReceive+0xe8>
     9ea:	91 30       	cpi	r25, 0x01	; 1
     9ec:	09 f0       	breq	.+2      	; 0x9f0 <WayneOnReceive+0xc4>
     9ee:	59 c0       	rjmp	.+178    	; 0xaa2 <WayneOnReceive+0x176>
     9f0:	26 32       	cpi	r18, 0x26	; 38
     9f2:	08 f4       	brcc	.+2      	; 0x9f6 <WayneOnReceive+0xca>
     9f4:	56 c0       	rjmp	.+172    	; 0xaa2 <WayneOnReceive+0x176>
			     //Vol:13-16 Amount:17-20
				 MsgInfo=MI_LAST_TRANSACTION;
     9f6:	86 e0       	ldi	r24, 0x06	; 6
     9f8:	80 93 19 01 	sts	0x0119, r24
				 ExtractValue(WayneRxBuffer,13,4,strVolume);
     9fc:	8d e3       	ldi	r24, 0x3D	; 61
     9fe:	91 e0       	ldi	r25, 0x01	; 1
     a00:	6d e0       	ldi	r22, 0x0D	; 13
     a02:	44 e0       	ldi	r20, 0x04	; 4
     a04:	27 e5       	ldi	r18, 0x57	; 87
     a06:	32 e0       	ldi	r19, 0x02	; 2
     a08:	0e 94 b0 01 	call	0x360	; 0x360 <ExtractValue>
				 ExtractValue(WayneRxBuffer,17,4,strAmount);
     a0c:	8d e3       	ldi	r24, 0x3D	; 61
     a0e:	91 e0       	ldi	r25, 0x01	; 1
     a10:	61 e1       	ldi	r22, 0x11	; 17
     a12:	16 c0       	rjmp	.+44     	; 0xa40 <WayneOnReceive+0x114>
			     _uart_print(1,1,strSend);
				 #endif

			}   // 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18
			    //51 34 02 08 00 00 01 88 00 00 84 60 01 01 05 38 4E 03 FA 
			if ((MsgID[0]==0x02)&&(MsgID[1]==0x08)&&(rxBufferLength>=19)){//Last Transaction
     a14:	02 30       	cpi	r16, 0x02	; 2
     a16:	11 f5       	brne	.+68     	; 0xa5c <WayneOnReceive+0x130>
     a18:	98 30       	cpi	r25, 0x08	; 8
     a1a:	09 f0       	breq	.+2      	; 0xa1e <WayneOnReceive+0xf2>
     a1c:	42 c0       	rjmp	.+132    	; 0xaa2 <WayneOnReceive+0x176>
     a1e:	23 31       	cpi	r18, 0x13	; 19
     a20:	08 f4       	brcc	.+2      	; 0xa24 <WayneOnReceive+0xf8>
     a22:	3f c0       	rjmp	.+126    	; 0xaa2 <WayneOnReceive+0x176>
			     //Vol:13-16 Amount:17-20
				 MsgInfo=MI_LAST_TRANSACTION;
     a24:	86 e0       	ldi	r24, 0x06	; 6
     a26:	80 93 19 01 	sts	0x0119, r24
				 ExtractValue(WayneRxBuffer,4,4,strVolume);
     a2a:	8d e3       	ldi	r24, 0x3D	; 61
     a2c:	91 e0       	ldi	r25, 0x01	; 1
     a2e:	64 e0       	ldi	r22, 0x04	; 4
     a30:	44 e0       	ldi	r20, 0x04	; 4
     a32:	27 e5       	ldi	r18, 0x57	; 87
     a34:	32 e0       	ldi	r19, 0x02	; 2
     a36:	0e 94 b0 01 	call	0x360	; 0x360 <ExtractValue>
				 ExtractValue(WayneRxBuffer,8,4,strAmount);
     a3a:	8d e3       	ldi	r24, 0x3D	; 61
     a3c:	91 e0       	ldi	r25, 0x01	; 1
     a3e:	68 e0       	ldi	r22, 0x08	; 8
     a40:	44 e0       	ldi	r20, 0x04	; 4
     a42:	2b ea       	ldi	r18, 0xAB	; 171
     a44:	33 e0       	ldi	r19, 0x03	; 3
     a46:	0e 94 b0 01 	call	0x360	; 0x360 <ExtractValue>
				 RemZeroLead(strVolume);
     a4a:	87 e5       	ldi	r24, 0x57	; 87
     a4c:	92 e0       	ldi	r25, 0x02	; 2
     a4e:	0e 94 4e 04 	call	0x89c	; 0x89c <RemZeroLead>
				 RemZeroLead(strAmount);
     a52:	8b ea       	ldi	r24, 0xAB	; 171
     a54:	93 e0       	ldi	r25, 0x03	; 3
     a56:	0e 94 4e 04 	call	0x89c	; 0x89c <RemZeroLead>
     a5a:	23 c0       	rjmp	.+70     	; 0xaa2 <WayneOnReceive+0x176>
			     sprintf_P(strSend,PSTR("Trans:[V:%s][A:%s]"),strVolume,strAmount);
			     _uart_print(1,1,strSend);
				 #endif
			}			

            if ((MsgID[0]==0x03)&&(MsgID[1]==0x04)){//PriceNozzleInfo
     a5c:	03 30       	cpi	r16, 0x03	; 3
     a5e:	09 f5       	brne	.+66     	; 0xaa2 <WayneOnReceive+0x176>
     a60:	94 30       	cpi	r25, 0x04	; 4
     a62:	f9 f4       	brne	.+62     	; 0xaa2 <WayneOnReceive+0x176>
			     if ((WayneRxBuffer[7]>>4)==0x01){
     a64:	80 91 44 01 	lds	r24, 0x0144
     a68:	82 95       	swap	r24
     a6a:	8f 70       	andi	r24, 0x0F	; 15
     a6c:	81 30       	cpi	r24, 0x01	; 1
     a6e:	21 f4       	brne	.+8      	; 0xa78 <WayneOnReceive+0x14c>
				      MsgInfo=MI_NOZZLE_UP;
     a70:	82 e0       	ldi	r24, 0x02	; 2
     a72:	80 93 19 01 	sts	0x0119, r24
     a76:	10 c0       	rjmp	.+32     	; 0xa98 <WayneOnReceive+0x16c>
					  #ifdef DEBUG_WAYNE_RECEIVE 
					  _uart_printf(1,1,PSTR("-WR_MESSAGE Nozzle Up-"));
					  #endif
					  }
                 else
			     if ((WayneRxBuffer[7]>>4)==0x00){
     a78:	88 23       	and	r24, r24
     a7a:	71 f4       	brne	.+28     	; 0xa98 <WayneOnReceive+0x16c>
				      //Price
					  ExtractValue(WayneRxBuffer,4,3,strUnitPrice);
     a7c:	8d e3       	ldi	r24, 0x3D	; 61
     a7e:	91 e0       	ldi	r25, 0x01	; 1
     a80:	64 e0       	ldi	r22, 0x04	; 4
     a82:	43 e0       	ldi	r20, 0x03	; 3
     a84:	2c ea       	ldi	r18, 0xAC	; 172
     a86:	32 e0       	ldi	r19, 0x02	; 2
     a88:	0e 94 b0 01 	call	0x360	; 0x360 <ExtractValue>
					  RemZeroLead(strUnitPrice);
     a8c:	8c ea       	ldi	r24, 0xAC	; 172
     a8e:	92 e0       	ldi	r25, 0x02	; 2
     a90:	0e 94 4e 04 	call	0x89c	; 0x89c <RemZeroLead>
					  #ifdef DEBUG_WAYNE_RECEIVE
			          sprintf_P(strSend,PSTR("Price%s"),strUnitPrice);
			          _uart_print(1,1,strSend);
					  #endif
				      MsgInfo=MI_NOZZLE_DOWN;
     a94:	00 93 19 01 	sts	0x0119, r16
					  #ifdef DEBUG_WAYNE_RECEIVE 
					  _uart_printf(1,1,PSTR("-WR_MESSAGE Nozzle Down-"));
					  #endif
					  }
            ActiveNozzle=WayneRxBuffer[7]&0x0F;
     a98:	80 91 44 01 	lds	r24, 0x0144
     a9c:	8f 70       	andi	r24, 0x0F	; 15
     a9e:	80 93 1c 01 	sts	0x011C, r24
            }
        WayneReply=WR_MESSAGE;
     aa2:	84 e0       	ldi	r24, 0x04	; 4
     aa4:	07 c0       	rjmp	.+14     	; 0xab4 <WayneOnReceive+0x188>
		rxBufferLength=0;	
		}else
		if ((WayneRxBuffer[rxBufferLength-2]==0x70)&&(WayneRxBuffer[rxBufferLength-1]==0xFA)){
     aa6:	90 37       	cpi	r25, 0x70	; 112
     aa8:	49 f4       	brne	.+18     	; 0xabc <WayneOnReceive+0x190>
     aaa:	31 97       	sbiw	r30, 0x01	; 1
     aac:	80 81       	ld	r24, Z
     aae:	8a 3f       	cpi	r24, 0xFA	; 250
     ab0:	29 f4       	brne	.+10     	; 0xabc <WayneOnReceive+0x190>
		
		    #ifdef DEBUG_WAYNE_RECEIVE 
			_uart_printf(1,1,PSTR("-WR_READY-"));
			#endif
		    WayneReply=WR_READY;
     ab2:	81 e0       	ldi	r24, 0x01	; 1
     ab4:	80 93 1a 01 	sts	0x011A, r24
		    rxBufferLength=0;
     ab8:	10 92 15 01 	sts	0x0115, r1
		}
		if (((WayneRxBuffer[rxBufferLength-3]&0xF0)==0x50)&&(WayneRxBuffer[rxBufferLength-1]==0xFA)){
     abc:	80 91 15 01 	lds	r24, 0x0115
     ac0:	a8 2f       	mov	r26, r24
     ac2:	b0 e0       	ldi	r27, 0x00	; 0
     ac4:	a3 5c       	subi	r26, 0xC3	; 195
     ac6:	be 4f       	sbci	r27, 0xFE	; 254
     ac8:	13 97       	sbiw	r26, 0x03	; 3
     aca:	8c 91       	ld	r24, X
     acc:	13 96       	adiw	r26, 0x03	; 3
     ace:	80 7f       	andi	r24, 0xF0	; 240
     ad0:	80 35       	cpi	r24, 0x50	; 80
     ad2:	c1 f4       	brne	.+48     	; 0xb04 <WayneOnReceive+0x1d8>
     ad4:	fd 01       	movw	r30, r26
     ad6:	31 97       	sbiw	r30, 0x01	; 1
     ad8:	80 81       	ld	r24, Z
     ada:	8a 3f       	cpi	r24, 0xFA	; 250
     adc:	99 f4       	brne	.+38     	; 0xb04 <WayneOnReceive+0x1d8>
              if ((WayneRxBuffer[rxBufferLength-2]&0xF0)==0xC0){
     ade:	fd 01       	movw	r30, r26
     ae0:	32 97       	sbiw	r30, 0x02	; 2
     ae2:	80 81       	ld	r24, Z
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	80 7f       	andi	r24, 0xF0	; 240
     ae8:	90 70       	andi	r25, 0x00	; 0
     aea:	80 3c       	cpi	r24, 0xC0	; 192
     aec:	91 05       	cpc	r25, r1
     aee:	11 f4       	brne	.+4      	; 0xaf4 <WayneOnReceive+0x1c8>
		         #ifdef DEBUG_WAYNE_RECEIVE 
				 _uart_printf(1,1,PSTR("-WR_ACK-"));
				 #endif
		         WayneReply=WR_ACK;
     af0:	82 e0       	ldi	r24, 0x02	; 2
     af2:	04 c0       	rjmp	.+8      	; 0xafc <WayneOnReceive+0x1d0>
			 }else if ((WayneRxBuffer[rxBufferLength-2]&0xF0)==0x50){
     af4:	80 35       	cpi	r24, 0x50	; 80
     af6:	91 05       	cpc	r25, r1
     af8:	19 f4       	brne	.+6      	; 0xb00 <WayneOnReceive+0x1d4>
		         #ifdef DEBUG_WAYNE_RECEIVE 
				 _uart_printf(1,1,PSTR("-WR_NACK-"));
				 #endif
		         WayneReply=WR_NACK;
     afa:	83 e0       	ldi	r24, 0x03	; 3
     afc:	80 93 1a 01 	sts	0x011A, r24
			 }
             rxBufferLength=0;
     b00:	10 92 15 01 	sts	0x0115, r1
		}
}
     b04:	1f 91       	pop	r17
     b06:	0f 91       	pop	r16
     b08:	08 95       	ret

00000b0a <StrReverse>:
}

void systemServiceSPI(){
}

void StrReverse(char *strSource){// 0054->4500
     b0a:	df 93       	push	r29
     b0c:	cf 93       	push	r28
     b0e:	cd b7       	in	r28, 0x3d	; 61
     b10:	de b7       	in	r29, 0x3e	; 62
     b12:	64 97       	sbiw	r28, 0x14	; 20
     b14:	0f b6       	in	r0, 0x3f	; 63
     b16:	f8 94       	cli
     b18:	de bf       	out	0x3e, r29	; 62
     b1a:	0f be       	out	0x3f, r0	; 63
     b1c:	cd bf       	out	0x3d, r28	; 61
     b1e:	ac 01       	movw	r20, r24
     char i,Length,strResult[20];
	 Length=strlen(strSource);
     b20:	fc 01       	movw	r30, r24
     b22:	01 90       	ld	r0, Z+
     b24:	00 20       	and	r0, r0
     b26:	e9 f7       	brne	.-6      	; 0xb22 <StrReverse+0x18>
     b28:	31 97       	sbiw	r30, 0x01	; 1
     b2a:	2e 2f       	mov	r18, r30
     b2c:	28 1b       	sub	r18, r24
     b2e:	a2 2f       	mov	r26, r18
     b30:	b0 e0       	ldi	r27, 0x00	; 0
     b32:	11 97       	sbiw	r26, 0x01	; 1
     b34:	a8 0f       	add	r26, r24
     b36:	b9 1f       	adc	r27, r25
     b38:	be 01       	movw	r22, r28
     b3a:	6f 5f       	subi	r22, 0xFF	; 255
     b3c:	7f 4f       	sbci	r23, 0xFF	; 255
     b3e:	fb 01       	movw	r30, r22
     b40:	03 c0       	rjmp	.+6      	; 0xb48 <StrReverse+0x3e>
	 for(i=0;i<Length;i++){
	    strResult[i]=strSource[Length-i-1];
     b42:	8c 91       	ld	r24, X
     b44:	81 93       	st	Z+, r24
     b46:	11 97       	sbiw	r26, 0x01	; 1
}

void StrReverse(char *strSource){// 0054->4500
     char i,Length,strResult[20];
	 Length=strlen(strSource);
	 for(i=0;i<Length;i++){
     b48:	8e 2f       	mov	r24, r30
     b4a:	86 1b       	sub	r24, r22
     b4c:	82 17       	cp	r24, r18
     b4e:	c8 f3       	brcs	.-14     	; 0xb42 <StrReverse+0x38>
	    strResult[i]=strSource[Length-i-1];
	 }strResult[Length]=0;
     b50:	ce 01       	movw	r24, r28
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	fc 01       	movw	r30, r24
     b56:	e2 0f       	add	r30, r18
     b58:	f1 1d       	adc	r31, r1
     b5a:	10 82       	st	Z, r1
     b5c:	60 e0       	ldi	r22, 0x00	; 0
	 //CopyResult
	 for(i=0;i<strlen(strResult);i++){
     b5e:	9c 01       	movw	r18, r24
     b60:	09 c0       	rjmp	.+18     	; 0xb74 <StrReverse+0x6a>
	    strSource[i]=strResult[i];
     b62:	fa 01       	movw	r30, r20
     b64:	ea 0f       	add	r30, r26
     b66:	fb 1f       	adc	r31, r27
     b68:	a2 0f       	add	r26, r18
     b6a:	b3 1f       	adc	r27, r19
     b6c:	8c 91       	ld	r24, X
     b6e:	80 83       	st	Z, r24
	    strSource[i+1]=0;
     b70:	11 82       	std	Z+1, r1	; 0x01
	 Length=strlen(strSource);
	 for(i=0;i<Length;i++){
	    strResult[i]=strSource[Length-i-1];
	 }strResult[Length]=0;
	 //CopyResult
	 for(i=0;i<strlen(strResult);i++){
     b72:	6f 5f       	subi	r22, 0xFF	; 255
     b74:	a6 2f       	mov	r26, r22
     b76:	b0 e0       	ldi	r27, 0x00	; 0
     b78:	f9 01       	movw	r30, r18
     b7a:	01 90       	ld	r0, Z+
     b7c:	00 20       	and	r0, r0
     b7e:	e9 f7       	brne	.-6      	; 0xb7a <StrReverse+0x70>
     b80:	31 97       	sbiw	r30, 0x01	; 1
     b82:	e2 1b       	sub	r30, r18
     b84:	f3 0b       	sbc	r31, r19
     b86:	ae 17       	cp	r26, r30
     b88:	bf 07       	cpc	r27, r31
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <StrReverse+0x58>
	    strSource[i]=strResult[i];
	    strSource[i+1]=0;
	 }
}
     b8c:	64 96       	adiw	r28, 0x14	; 20
     b8e:	0f b6       	in	r0, 0x3f	; 63
     b90:	f8 94       	cli
     b92:	de bf       	out	0x3e, r29	; 62
     b94:	0f be       	out	0x3f, r0	; 63
     b96:	cd bf       	out	0x3d, r28	; 61
     b98:	cf 91       	pop	r28
     b9a:	df 91       	pop	r29
     b9c:	08 95       	ret

00000b9e <GilbarcoOnReceive>:
	else
	if (data==0xF5)SavePipeline=spTotalizerPPU2;
	
}

void GilbarcoOnReceive(char data){
     b9e:	1f 93       	push	r17
     ba0:	cf 93       	push	r28
     ba2:	df 93       	push	r29
     ba4:	18 2f       	mov	r17, r24
     ba6:	ed e0       	ldi	r30, 0x0D	; 13
     ba8:	f4 e0       	ldi	r31, 0x04	; 4
}

void ShiftData(char data){//data [0]..[10]
     char i;
	 for(i=11;i>0;i--){//0..10
	    zDataBuffer[i]=zDataBuffer[i-1];
     baa:	80 81       	ld	r24, Z
     bac:	81 83       	std	Z+1, r24	; 0x01
     bae:	31 97       	sbiw	r30, 0x01	; 1
	 return Result;
}

void ShiftData(char data){//data [0]..[10]
     char i;
	 for(i=11;i>0;i--){//0..10
     bb0:	84 e0       	ldi	r24, 0x04	; 4
     bb2:	e2 30       	cpi	r30, 0x02	; 2
     bb4:	f8 07       	cpc	r31, r24
     bb6:	c9 f7       	brne	.-14     	; 0xbaa <GilbarcoOnReceive+0xc>
	    zDataBuffer[i]=zDataBuffer[i-1];
	 }
	 zDataBuffer[0]=data;
     bb8:	11 83       	std	Z+1, r17	; 0x01
void GilbarcoOnReceive(char data){
char strSend[30],chrData,i;
static char iReceive=0;
    ShiftData(data);
	 
    switch(stReceiveCom0){
     bba:	90 91 04 01 	lds	r25, 0x0104
     bbe:	93 30       	cpi	r25, 0x03	; 3
     bc0:	d1 f1       	breq	.+116    	; 0xc36 <GilbarcoOnReceive+0x98>
     bc2:	94 30       	cpi	r25, 0x04	; 4
     bc4:	30 f4       	brcc	.+12     	; 0xbd2 <GilbarcoOnReceive+0x34>
     bc6:	91 30       	cpi	r25, 0x01	; 1
     bc8:	69 f0       	breq	.+26     	; 0xbe4 <GilbarcoOnReceive+0x46>
     bca:	92 30       	cpi	r25, 0x02	; 2
     bcc:	09 f0       	breq	.+2      	; 0xbd0 <GilbarcoOnReceive+0x32>
     bce:	9f c0       	rjmp	.+318    	; 0xd0e <GilbarcoOnReceive+0x170>
     bd0:	14 c0       	rjmp	.+40     	; 0xbfa <GilbarcoOnReceive+0x5c>
     bd2:	95 30       	cpi	r25, 0x05	; 5
     bd4:	09 f4       	brne	.+2      	; 0xbd8 <GilbarcoOnReceive+0x3a>
     bd6:	47 c0       	rjmp	.+142    	; 0xc66 <GilbarcoOnReceive+0xc8>
     bd8:	95 30       	cpi	r25, 0x05	; 5
     bda:	c0 f1       	brcs	.+112    	; 0xc4c <GilbarcoOnReceive+0xae>
     bdc:	96 30       	cpi	r25, 0x06	; 6
     bde:	09 f0       	breq	.+2      	; 0xbe2 <GilbarcoOnReceive+0x44>
     be0:	96 c0       	rjmp	.+300    	; 0xd0e <GilbarcoOnReceive+0x170>
     be2:	78 c0       	rjmp	.+240    	; 0xcd4 <GilbarcoOnReceive+0x136>
	case rcIdle:
	     CMDResponse=GetResponse(data);
     be4:	81 2f       	mov	r24, r17
     be6:	82 95       	swap	r24
     be8:	8f 70       	andi	r24, 0x0F	; 15
     bea:	80 93 8d 01 	sts	0x018D, r24
		 PumpID=GetPumpID(data);
     bee:	1f 70       	andi	r17, 0x0F	; 15
     bf0:	10 93 0e 01 	sts	0x010E, r17
		 #ifdef DEBUG_GILBARCO_RESPONSE
		 sprintf_P(strSend,PSTR("Response:%.2X"),data);
		 _uart_print(1,1,strSend);
		 #endif
		 IsStatusReceived=True;
     bf4:	90 93 0f 01 	sts	0x010F, r25
     bf8:	8a c0       	rjmp	.+276    	; 0xd0e <GilbarcoOnReceive+0x170>

	     break;	
	case rcRealTimeMoney:	     
	     strCurrentMoney[Com0ReceiveCount]=BCD2Char(FilterBCD(data));
     bfa:	90 91 23 01 	lds	r25, 0x0123
     bfe:	e9 2f       	mov	r30, r25
     c00:	f0 e0       	ldi	r31, 0x00	; 0
	 Dest[Length]=0;
}

char FilterBCD(char data){
     char Result;
	 Result=(data&0x0F);
     c02:	81 2f       	mov	r24, r17
     c04:	8f 70       	andi	r24, 0x0F	; 15
}

char BCD2Char(char data){
     char Result;
	 Result=0;
	 if ((data>=0)&&(data<=9)) 
     c06:	8a 30       	cpi	r24, 0x0A	; 10
     c08:	10 f0       	brcs	.+4      	; 0xc0e <GilbarcoOnReceive+0x70>
     c0a:	80 e3       	ldi	r24, 0x30	; 48
     c0c:	01 c0       	rjmp	.+2      	; 0xc10 <GilbarcoOnReceive+0x72>
	     Result='0'+data;
     c0e:	80 5d       	subi	r24, 0xD0	; 208
		 #endif
		 IsStatusReceived=True;

	     break;	
	case rcRealTimeMoney:	     
	     strCurrentMoney[Com0ReceiveCount]=BCD2Char(FilterBCD(data));
     c10:	e8 58       	subi	r30, 0x88	; 136
     c12:	fd 4f       	sbci	r31, 0xFD	; 253
     c14:	80 83       	st	Z, r24
	     strCurrentMoney[Com0ReceiveCount+1]=0;
     c16:	11 82       	std	Z+1, r1	; 0x01
		 TimReceive=0;
     c18:	10 92 10 04 	sts	0x0410, r1
     c1c:	10 92 0f 04 	sts	0x040F, r1
		 Com0ReceiveCount++;
     c20:	89 2f       	mov	r24, r25
     c22:	8f 5f       	subi	r24, 0xFF	; 255
     c24:	80 93 23 01 	sts	0x0123, r24
	     if ((Com0ReceiveCount>6)||(TimReceive>MSG_TRANSACTION_TIMEOUT))
     c28:	87 30       	cpi	r24, 0x07	; 7
     c2a:	08 f4       	brcc	.+2      	; 0xc2e <GilbarcoOnReceive+0x90>
     c2c:	70 c0       	rjmp	.+224    	; 0xd0e <GilbarcoOnReceive+0x170>
		     IsMoneyReceived=True;
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	80 93 10 01 	sts	0x0110, r24
     c34:	6c c0       	rjmp	.+216    	; 0xd0e <GilbarcoOnReceive+0x170>
	     break;	
    case rcInitTransaction://<STX>
	     if (data==0xFF){
     c36:	1f 3f       	cpi	r17, 0xFF	; 255
     c38:	09 f0       	breq	.+2      	; 0xc3c <GilbarcoOnReceive+0x9e>
     c3a:	69 c0       	rjmp	.+210    	; 0xd0e <GilbarcoOnReceive+0x170>
		    iReceive=0;
     c3c:	10 92 27 01 	sts	0x0127, r1
			TimReceive=0;
     c40:	10 92 10 04 	sts	0x0410, r1
     c44:	10 92 0f 04 	sts	0x040F, r1
		    stReceiveCom0=rcSaveTransactionMessage;
     c48:	86 e0       	ldi	r24, 0x06	; 6
     c4a:	0a c0       	rjmp	.+20     	; 0xc60 <GilbarcoOnReceive+0xc2>
		 }
	     break;
    case rcInitTotalizer://<STX>
	     if (data==0xFF){
     c4c:	1f 3f       	cpi	r17, 0xFF	; 255
     c4e:	09 f0       	breq	.+2      	; 0xc52 <GilbarcoOnReceive+0xb4>
     c50:	5e c0       	rjmp	.+188    	; 0xd0e <GilbarcoOnReceive+0x170>
		    iReceive=0;
     c52:	10 92 27 01 	sts	0x0127, r1
			TimReceive=0;
     c56:	10 92 10 04 	sts	0x0410, r1
     c5a:	10 92 0f 04 	sts	0x040F, r1
		    stReceiveCom0=rcSaveTotalizerMessage;
     c5e:	85 e0       	ldi	r24, 0x05	; 5
     c60:	80 93 04 01 	sts	0x0104, r24
     c64:	54 c0       	rjmp	.+168    	; 0xd0e <GilbarcoOnReceive+0x170>
		 }
	     break;
    case rcSaveTotalizerMessage:
	     //_uart(1,1,data);
	     SaveTotalizerData(data);
     c66:	81 2f       	mov	r24, r17
     c68:	0e 94 a9 02 	call	0x552	; 0x552 <SaveTotalizerData>
	     if ((data==0xF0)||(TimReceive>MSG_TRANSACTION_TIMEOUT)){//Proses
     c6c:	10 3f       	cpi	r17, 0xF0	; 240
     c6e:	41 f0       	breq	.+16     	; 0xc80 <GilbarcoOnReceive+0xe2>
     c70:	80 91 0f 04 	lds	r24, 0x040F
     c74:	90 91 10 04 	lds	r25, 0x0410
     c78:	89 3c       	cpi	r24, 0xC9	; 201
     c7a:	91 05       	cpc	r25, r1
     c7c:	08 f4       	brcc	.+2      	; 0xc80 <GilbarcoOnReceive+0xe2>
     c7e:	47 c0       	rjmp	.+142    	; 0xd0e <GilbarcoOnReceive+0x170>
     c80:	c0 e0       	ldi	r28, 0x00	; 0
     c82:	d0 e0       	ldi	r29, 0x00	; 0
             //ReverseData
			 //_uart_printf(1,1,PSTR("Totalizer: "));
			 for (i=0;i<6;i++){
			 	  StrReverse(PumpTotalizer.TotalGrade[i].strMoney);
     c84:	9e 01       	movw	r18, r28
     c86:	ce 01       	movw	r24, r28
     c88:	f5 e0       	ldi	r31, 0x05	; 5
     c8a:	88 0f       	add	r24, r24
     c8c:	99 1f       	adc	r25, r25
     c8e:	fa 95       	dec	r31
     c90:	e1 f7       	brne	.-8      	; 0xc8a <GilbarcoOnReceive+0xec>
     c92:	22 0f       	add	r18, r18
     c94:	33 1f       	adc	r19, r19
     c96:	82 1b       	sub	r24, r18
     c98:	93 0b       	sbc	r25, r19
     c9a:	8a 5f       	subi	r24, 0xFA	; 250
     c9c:	9c 4f       	sbci	r25, 0xFC	; 252
     c9e:	0e 94 85 05 	call	0xb0a	; 0xb0a <StrReverse>
				  StrReverse(PumpTotalizer.TotalGrade[i].strVolume);
     ca2:	9e 01       	movw	r18, r28
     ca4:	ce 01       	movw	r24, r28
     ca6:	75 e0       	ldi	r23, 0x05	; 5
     ca8:	88 0f       	add	r24, r24
     caa:	99 1f       	adc	r25, r25
     cac:	7a 95       	dec	r23
     cae:	e1 f7       	brne	.-8      	; 0xca8 <GilbarcoOnReceive+0x10a>
     cb0:	22 0f       	add	r18, r18
     cb2:	33 1f       	adc	r19, r19
     cb4:	82 1b       	sub	r24, r18
     cb6:	93 0b       	sbc	r25, r19
     cb8:	89 50       	subi	r24, 0x09	; 9
     cba:	9d 4f       	sbci	r25, 0xFD	; 253
     cbc:	0e 94 85 05 	call	0xb0a	; 0xb0a <StrReverse>
     cc0:	21 96       	adiw	r28, 0x01	; 1
	     //_uart(1,1,data);
	     SaveTotalizerData(data);
	     if ((data==0xF0)||(TimReceive>MSG_TRANSACTION_TIMEOUT)){//Proses
             //ReverseData
			 //_uart_printf(1,1,PSTR("Totalizer: "));
			 for (i=0;i<6;i++){
     cc2:	c6 30       	cpi	r28, 0x06	; 6
     cc4:	d1 05       	cpc	r29, r1
     cc6:	f1 f6       	brne	.-68     	; 0xc84 <GilbarcoOnReceive+0xe6>
			 	  StrReverse(PumpTotalizer.TotalGrade[i].strMoney);
				  StrReverse(PumpTotalizer.TotalGrade[i].strVolume);
				  //_uart_print(1,1,PumpTotalizer.TotalGrade[i].strMoney);
				  //_uart_print(1,1,PumpTotalizer.TotalGrade[i].strVolume);
             }
		     stReceiveCom0=rcIdle;
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	80 93 04 01 	sts	0x0104, r24
			 IsTotalizer=True;
     cce:	80 93 12 01 	sts	0x0112, r24
     cd2:	1d c0       	rjmp	.+58     	; 0xd0e <GilbarcoOnReceive+0x170>
			 }		 
         break;	
    case rcSaveTransactionMessage:
	     //_uart(1,1,data);
	     SaveTransactionData(data);
     cd4:	81 2f       	mov	r24, r17
     cd6:	0e 94 23 02 	call	0x446	; 0x446 <SaveTransactionData>
	     if ((data==0xF0)||(TimReceive>MSG_TRANSACTION_TIMEOUT)){//Proses
     cda:	10 3f       	cpi	r17, 0xF0	; 240
     cdc:	39 f0       	breq	.+14     	; 0xcec <GilbarcoOnReceive+0x14e>
     cde:	80 91 0f 04 	lds	r24, 0x040F
     ce2:	90 91 10 04 	lds	r25, 0x0410
     ce6:	89 3c       	cpi	r24, 0xC9	; 201
     ce8:	91 05       	cpc	r25, r1
     cea:	88 f0       	brcs	.+34     	; 0xd0e <GilbarcoOnReceive+0x170>
			  StrReverse(strUnitPrice);
     cec:	8c ea       	ldi	r24, 0xAC	; 172
     cee:	92 e0       	ldi	r25, 0x02	; 2
     cf0:	0e 94 85 05 	call	0xb0a	; 0xb0a <StrReverse>
			  StrReverse(strVolume);
     cf4:	87 e5       	ldi	r24, 0x57	; 87
     cf6:	92 e0       	ldi	r25, 0x02	; 2
     cf8:	0e 94 85 05 	call	0xb0a	; 0xb0a <StrReverse>
			  StrReverse(strAmount);
     cfc:	8b ea       	ldi	r24, 0xAB	; 171
     cfe:	93 e0       	ldi	r25, 0x03	; 3
     d00:	0e 94 85 05 	call	0xb0a	; 0xb0a <StrReverse>

			  //sprintf_P(strSend,PSTR("%s"),strAmount);
			  //_uart_print(1,1,strSend);

              stReceiveCom0=rcIdle;
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	80 93 04 01 	sts	0x0104, r24
			  IsTransaction=True;
     d0a:	80 93 11 01 	sts	0x0111, r24
			 }
	     break;
	}
}
     d0e:	df 91       	pop	r29
     d10:	cf 91       	pop	r28
     d12:	1f 91       	pop	r17
     d14:	08 95       	ret

00000d16 <SendSPI>:
	sbi(DDRD,2);sbi(PORTD,2);//128-SS HIGH
	//_delay_ms(10);
}

void SendSPI(char xSPI){
     _spi(xSPI);
     d16:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <_spi>
	 //_delay_ms(10);
}
     d1a:	08 95       	ret

00000d1c <SendStrSPI>:
	 SendSPI(0x06);//ETX
	 SendSPI(0x60);//ETX
	 systemSlave();
}

void SendStrSPI(char *strSendSPI){
     d1c:	ff 92       	push	r15
     d1e:	0f 93       	push	r16
     d20:	1f 93       	push	r17
     d22:	cf 93       	push	r28
     d24:	df 93       	push	r29
     d26:	8c 01       	movw	r16, r24
     d28:	ff 24       	eor	r15, r15
     d2a:	06 c0       	rjmp	.+12     	; 0xd38 <SendStrSPI+0x1c>
	sbi(DDRD,2);sbi(PORTD,2);//128-SS HIGH
	//_delay_ms(10);
}

void SendSPI(char xSPI){
     _spi(xSPI);
     d2c:	c0 0f       	add	r28, r16
     d2e:	d1 1f       	adc	r29, r17
     d30:	88 81       	ld	r24, Y
     d32:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <_spi>
	 systemSlave();
}

void SendStrSPI(char *strSendSPI){
char i;
     for(i=0;i<strlen(strSendSPI);i++){
     d36:	f3 94       	inc	r15
     d38:	cf 2d       	mov	r28, r15
     d3a:	d0 e0       	ldi	r29, 0x00	; 0
     d3c:	f8 01       	movw	r30, r16
     d3e:	01 90       	ld	r0, Z+
     d40:	00 20       	and	r0, r0
     d42:	e9 f7       	brne	.-6      	; 0xd3e <SendStrSPI+0x22>
     d44:	31 97       	sbiw	r30, 0x01	; 1
     d46:	e0 1b       	sub	r30, r16
     d48:	f1 0b       	sbc	r31, r17
     d4a:	ce 17       	cp	r28, r30
     d4c:	df 07       	cpc	r29, r31
     d4e:	70 f3       	brcs	.-36     	; 0xd2c <SendStrSPI+0x10>
	    SendSPI(strSendSPI[i]);
        //_uart(1,1,strSendSPI[i]);
	 } 
}
     d50:	df 91       	pop	r29
     d52:	cf 91       	pop	r28
     d54:	1f 91       	pop	r17
     d56:	0f 91       	pop	r16
     d58:	ff 90       	pop	r15
     d5a:	08 95       	ret

00000d5c <systemSlave>:
	//_delay_ms(10);
}


void systemSlave(){
	_spi_init(0, 1);         //SPI Slave
     d5c:	80 e0       	ldi	r24, 0x00	; 0
     d5e:	61 e0       	ldi	r22, 0x01	; 1
     d60:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <_spi_init>
	sbi(DDRB,6);sbi(PORTB,6);//MISO Output
     d64:	be 9a       	sbi	0x17, 6	; 23
     d66:	c6 9a       	sbi	0x18, 6	; 24
    cbi(DDRB,5);sbi(PORTB,5);//MOSI Input
     d68:	bd 98       	cbi	0x17, 5	; 23
     d6a:	c5 9a       	sbi	0x18, 5	; 24
	cbi(DDRB,7);sbi(PORTB,7);//SCK  Input
     d6c:	bf 98       	cbi	0x17, 7	; 23
     d6e:	c7 9a       	sbi	0x18, 7	; 24
	sbi(DDRD,2);sbi(PORTD,2);//128-SS HIGH
     d70:	8a 9a       	sbi	0x11, 2	; 17
     d72:	92 9a       	sbi	0x12, 2	; 18
	//_delay_ms(10);
}
     d74:	08 95       	ret

00000d76 <systemMaster>:
     _uart(0,1,DataSend);	 
     //_uart(1,1,DataSend);
}

void systemMaster(){
    _spi_init(1, 0);         //SPI Master
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	60 e0       	ldi	r22, 0x00	; 0
     d7a:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <_spi_init>
	cbi(DDRB,6);sbi(PORTB,6);//MISO Input
     d7e:	be 98       	cbi	0x17, 6	; 23
     d80:	c6 9a       	sbi	0x18, 6	; 24
    sbi(DDRB,4);sbi(DDRB,5); //MOSI Output
     d82:	bc 9a       	sbi	0x17, 4	; 23
     d84:	bd 9a       	sbi	0x17, 5	; 23
	sbi(DDRB,7);sbi(PORTB,7);//SCK  Output    
     d86:	bf 9a       	sbi	0x17, 7	; 23
     d88:	c7 9a       	sbi	0x18, 7	; 24
	sbi(DDRD,2);cbi(PORTD,2);//128-SS LOW
     d8a:	8a 9a       	sbi	0x11, 2	; 17
     d8c:	92 98       	cbi	0x12, 2	; 18
	//_delay_ms(10);
}
     d8e:	08 95       	ret

00000d90 <SendPumpStatusFlow>:
			 PumpLock[i]=False;
		 }
     }    	 
}

void SendPumpStatusFlow(char xPumpID,char xPumpStatus){//
     d90:	0f 93       	push	r16
     d92:	1f 93       	push	r17
     d94:	08 2f       	mov	r16, r24
     d96:	16 2f       	mov	r17, r22
	 #ifdef DEBUG_PUMP_STATUS_FLOW 
	  sprintf_P(strSend,PSTR("P:%d,S:%d"),xPumpID,xPumpStatus);
	 _uart_print(1,1,strSend);
	 #endif

	 systemMaster();
     d98:	0e 94 bb 06 	call	0xd76	; 0xd76 <systemMaster>
	sbi(DDRD,2);sbi(PORTD,2);//128-SS HIGH
	//_delay_ms(10);
}

void SendSPI(char xSPI){
     _spi(xSPI);
     d9c:	87 e0       	ldi	r24, 0x07	; 7
     d9e:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <_spi>
	 systemMaster();
     SendSPI(0x07);//STX
     SendSPI(tmpStatus);//xIDPump
	 SendSPI(0x08);//ETX

	 systemSlave();
     da2:	1f 70       	andi	r17, 0x0F	; 15
     da4:	02 95       	swap	r16
     da6:	00 7f       	andi	r16, 0xF0	; 240
     da8:	80 2f       	mov	r24, r16
     daa:	81 2b       	or	r24, r17
     dac:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <_spi>
     db0:	88 e0       	ldi	r24, 0x08	; 8
     db2:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <_spi>
     db6:	0e 94 ae 06 	call	0xd5c	; 0xd5c <systemSlave>
}
     dba:	1f 91       	pop	r17
     dbc:	0f 91       	pop	r16
     dbe:	08 95       	ret

00000dc0 <SendCommandAcknoledge>:
       //AcknoledgeCommand
       SendCommandAcknoledge(slaveCmd,slaveMsg);
	 }//EndIf	 
}

void SendCommandAcknoledge(char AckCommand,char AckData){
     dc0:	0f 93       	push	r16
     dc2:	1f 93       	push	r17
     dc4:	18 2f       	mov	r17, r24
     dc6:	06 2f       	mov	r16, r22
	 systemMaster();
     dc8:	0e 94 bb 06 	call	0xd76	; 0xd76 <systemMaster>
	sbi(DDRD,2);sbi(PORTD,2);//128-SS HIGH
	//_delay_ms(10);
}

void SendSPI(char xSPI){
     _spi(xSPI);
     dcc:	89 e0       	ldi	r24, 0x09	; 9
     dce:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <_spi>
	 systemMaster();
	 SendSPI(0x09);
	 SendSPI(AckCommand);
	 SendSPI(AckData);
	 SendSPI(0x0A);
	 systemSlave();
     dd2:	81 2f       	mov	r24, r17
     dd4:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <_spi>
     dd8:	80 2f       	mov	r24, r16
     dda:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <_spi>
     dde:	8a e0       	ldi	r24, 0x0A	; 10
     de0:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <_spi>
     de4:	0e 94 ae 06 	call	0xd5c	; 0xd5c <systemSlave>
}
     de8:	1f 91       	pop	r17
     dea:	0f 91       	pop	r16
     dec:	08 95       	ret

00000dee <__vector_20>:
		 }
     }
	 */		 
}

ISR(USART1_RXC_vect){
     dee:	1f 92       	push	r1
     df0:	0f 92       	push	r0
     df2:	0f b6       	in	r0, 0x3f	; 63
     df4:	0f 92       	push	r0
     df6:	11 24       	eor	r1, r1
     df8:	1f 93       	push	r17
     dfa:	2f 93       	push	r18
     dfc:	3f 93       	push	r19
     dfe:	4f 93       	push	r20
     e00:	5f 93       	push	r21
     e02:	6f 93       	push	r22
     e04:	7f 93       	push	r23
     e06:	8f 93       	push	r24
     e08:	9f 93       	push	r25
     e0a:	af 93       	push	r26
     e0c:	bf 93       	push	r27
     e0e:	ef 93       	push	r30
     e10:	ff 93       	push	r31
	char dataRX1;
    dataRX1=UDR1;
     e12:	13 b1       	in	r17, 0x03	; 3


   if (IFType==IT_SLAVE){
     e14:	80 91 00 01 	lds	r24, 0x0100
     e18:	81 30       	cpi	r24, 0x01	; 1
     e1a:	39 f4       	brne	.+14     	; 0xe2a <__vector_20+0x3c>
	   systemMaster();
     e1c:	0e 94 bb 06 	call	0xd76	; 0xd76 <systemMaster>
	   _spi(dataRX1);
     e20:	81 2f       	mov	r24, r17
     e22:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <_spi>
	   systemSlave();
     e26:	0e 94 ae 06 	call	0xd5c	; 0xd5c <systemSlave>
	   }
	   
	//_uart(1,1,dataRX1);
	//OnReceive1(dataRX1);
}
     e2a:	ff 91       	pop	r31
     e2c:	ef 91       	pop	r30
     e2e:	bf 91       	pop	r27
     e30:	af 91       	pop	r26
     e32:	9f 91       	pop	r25
     e34:	8f 91       	pop	r24
     e36:	7f 91       	pop	r23
     e38:	6f 91       	pop	r22
     e3a:	5f 91       	pop	r21
     e3c:	4f 91       	pop	r20
     e3e:	3f 91       	pop	r19
     e40:	2f 91       	pop	r18
     e42:	1f 91       	pop	r17
     e44:	0f 90       	pop	r0
     e46:	0f be       	out	0x3f, r0	; 63
     e48:	0f 90       	pop	r0
     e4a:	1f 90       	pop	r1
     e4c:	18 95       	reti

00000e4e <__vector_19>:
	if ((TimExp%100)==0) TimWatchSequence++;
	TimReceive++;
	TimDelayNextPump++;
}

ISR(USART0_RXC_vect){
     e4e:	1f 92       	push	r1
     e50:	0f 92       	push	r0
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	0f 92       	push	r0
     e56:	11 24       	eor	r1, r1
     e58:	1f 93       	push	r17
     e5a:	2f 93       	push	r18
     e5c:	3f 93       	push	r19
     e5e:	4f 93       	push	r20
     e60:	5f 93       	push	r21
     e62:	6f 93       	push	r22
     e64:	7f 93       	push	r23
     e66:	8f 93       	push	r24
     e68:	9f 93       	push	r25
     e6a:	af 93       	push	r26
     e6c:	bf 93       	push	r27
     e6e:	ef 93       	push	r30
     e70:	ff 93       	push	r31
    char dataRX0;
	char strSend[20];
	dataRX0=UDR0;
     e72:	1c b1       	in	r17, 0x0c	; 12
    //_uart(1,1,dataRX0);
    //15702 15588 15694
	switch(IFType){
     e74:	80 91 00 01 	lds	r24, 0x0100
     e78:	81 30       	cpi	r24, 0x01	; 1
     e7a:	19 f0       	breq	.+6      	; 0xe82 <__vector_19+0x34>
     e7c:	82 30       	cpi	r24, 0x02	; 2
     e7e:	b9 f4       	brne	.+46     	; 0xeae <__vector_19+0x60>
     e80:	08 c0       	rjmp	.+16     	; 0xe92 <__vector_19+0x44>
	case IT_SLAVE:
	     systemMaster();
     e82:	0e 94 bb 06 	call	0xd76	; 0xd76 <systemMaster>
	     _spi(dataRX0);
     e86:	81 2f       	mov	r24, r17
     e88:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <_spi>

         //_uart(0,1,dataRX0);
		 //_uart(1,1,dataRX0);

	     systemSlave();
     e8c:	0e 94 ae 06 	call	0xd5c	; 0xd5c <systemSlave>
     e90:	0e c0       	rjmp	.+28     	; 0xeae <__vector_19+0x60>
	     break;
    case IT_STANDALONE:
	     switch(StandaloneType){
     e92:	80 91 01 01 	lds	r24, 0x0101
     e96:	81 30       	cpi	r24, 0x01	; 1
     e98:	19 f0       	breq	.+6      	; 0xea0 <__vector_19+0x52>
     e9a:	82 30       	cpi	r24, 0x02	; 2
     e9c:	41 f4       	brne	.+16     	; 0xeae <__vector_19+0x60>
     e9e:	04 c0       	rjmp	.+8      	; 0xea8 <__vector_19+0x5a>
		 case ST_GILBARCO:
		      GilbarcoOnReceive(dataRX0);	
     ea0:	81 2f       	mov	r24, r17
     ea2:	0e 94 cf 05 	call	0xb9e	; 0xb9e <GilbarcoOnReceive>
     ea6:	03 c0       	rjmp	.+6      	; 0xeae <__vector_19+0x60>
			  break;
		 case ST_WAYNE_DART:
		      WayneOnReceive(dataRX0);	              
     ea8:	81 2f       	mov	r24, r17
     eaa:	0e 94 96 04 	call	0x92c	; 0x92c <WayneOnReceive>
			  //_uart_print(1,1,strSend);
			  break;
		 }
     }
	 */		 
}
     eae:	ff 91       	pop	r31
     eb0:	ef 91       	pop	r30
     eb2:	bf 91       	pop	r27
     eb4:	af 91       	pop	r26
     eb6:	9f 91       	pop	r25
     eb8:	8f 91       	pop	r24
     eba:	7f 91       	pop	r23
     ebc:	6f 91       	pop	r22
     ebe:	5f 91       	pop	r21
     ec0:	4f 91       	pop	r20
     ec2:	3f 91       	pop	r19
     ec4:	2f 91       	pop	r18
     ec6:	1f 91       	pop	r17
     ec8:	0f 90       	pop	r0
     eca:	0f be       	out	0x3f, r0	; 63
     ecc:	0f 90       	pop	r0
     ece:	1f 90       	pop	r1
     ed0:	18 95       	reti

00000ed2 <PumpCommand>:
	 sprintf_P(strSend,PSTR("PumpCmd:%.2X"),DataSend);
	 _uart_print(1,1,strSend);
	 #endif


     _uart(0,1,DataSend);	 
     ed2:	62 95       	swap	r22
     ed4:	60 7f       	andi	r22, 0xF0	; 240
     ed6:	48 2f       	mov	r20, r24
     ed8:	4f 70       	andi	r20, 0x0F	; 15
     eda:	46 2b       	or	r20, r22
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	61 e0       	ldi	r22, 0x01	; 1
     ee0:	0e 94 46 18 	call	0x308c	; 0x308c <_uart>
     //_uart(1,1,DataSend);
}
     ee4:	08 95       	ret

00000ee6 <WayneSendChar>:
	      break;	 
	 }
}

//enum eLineStatus{LS_NONE,LS_RX,LS_TX};
void WayneSendChar(char xData){
     ee6:	1f 93       	push	r17
     ee8:	18 2f       	mov	r17, r24
     System485(DIR_TX);//TransmitMode
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	0e 94 9c 01 	call	0x338	; 0x338 <System485>
	 _uart(0,1,xData);
     ef0:	80 e0       	ldi	r24, 0x00	; 0
     ef2:	61 e0       	ldi	r22, 0x01	; 1
     ef4:	41 2f       	mov	r20, r17
     ef6:	0e 94 46 18 	call	0x308c	; 0x308c <_uart>
	 System485(DIR_RX);//ReceiveMode
     efa:	82 e0       	ldi	r24, 0x02	; 2
     efc:	0e 94 9c 01 	call	0x338	; 0x338 <System485>
}
     f00:	1f 91       	pop	r17
     f02:	08 95       	ret

00000f04 <FWayneSendBuffer>:

void WayneTestSend(){
}

void FWayneSendBuffer(char *Buffer, char nLength){
     f04:	0f 93       	push	r16
     f06:	1f 93       	push	r17
     f08:	cf 93       	push	r28
     f0a:	df 93       	push	r29
     f0c:	06 2f       	mov	r16, r22
     f0e:	ec 01       	movw	r28, r24
     f10:	10 e0       	ldi	r17, 0x00	; 0
     f12:	04 c0       	rjmp	.+8      	; 0xf1c <FWayneSendBuffer+0x18>
char i;
     for(i=0;i<nLength;i++){
	     WayneSendChar(Buffer[i]);
     f14:	89 91       	ld	r24, Y+
     f16:	0e 94 73 07 	call	0xee6	; 0xee6 <WayneSendChar>
void WayneTestSend(){
}

void FWayneSendBuffer(char *Buffer, char nLength){
char i;
     for(i=0;i<nLength;i++){
     f1a:	1f 5f       	subi	r17, 0xFF	; 255
     f1c:	10 17       	cp	r17, r16
     f1e:	d0 f3       	brcs	.-12     	; 0xf14 <FWayneSendBuffer+0x10>
	     WayneSendChar(Buffer[i]);
	 }
}
     f20:	df 91       	pop	r29
     f22:	cf 91       	pop	r28
     f24:	1f 91       	pop	r17
     f26:	0f 91       	pop	r16
     f28:	08 95       	ret

00000f2a <FWayneSendCommand>:

void FWayneSendCommand(char Command, char SequenceCmd, char xPumpID, char NozzleID){
     f2a:	0f 93       	push	r16
     f2c:	1f 93       	push	r17
     f2e:	df 93       	push	r29
     f30:	cf 93       	push	r28
     f32:	cd b7       	in	r28, 0x3d	; 61
     f34:	de b7       	in	r29, 0x3e	; 62
     f36:	6e 97       	sbiw	r28, 0x1e	; 30
     f38:	0f b6       	in	r0, 0x3f	; 63
     f3a:	f8 94       	cli
     f3c:	de bf       	out	0x3e, r29	; 62
     f3e:	0f be       	out	0x3f, r0	; 63
     f40:	cd bf       	out	0x3d, r28	; 61
char STX_ID,SEQ,MSG_ID[2],NOZZLE_ID,VALUE[6];
int tCRC16;
char strSend[30];
char CmdBuffer[30];
     
	 rxBufferLength=0;
     f42:	10 92 15 01 	sts	0x0115, r1
     switch(Command){
     f46:	8a 30       	cpi	r24, 0x0A	; 10
     f48:	49 f1       	breq	.+82     	; 0xf9c <FWayneSendCommand+0x72>
     f4a:	8b 30       	cpi	r24, 0x0B	; 11
     f4c:	40 f4       	brcc	.+16     	; 0xf5e <FWayneSendCommand+0x34>
     f4e:	85 30       	cpi	r24, 0x05	; 5
     f50:	09 f4       	brne	.+2      	; 0xf54 <FWayneSendCommand+0x2a>
     f52:	75 c2       	rjmp	.+1258   	; 0x143e <FWayneSendCommand+0x514>
     f54:	87 30       	cpi	r24, 0x07	; 7
     f56:	b1 f0       	breq	.+44     	; 0xf84 <FWayneSendCommand+0x5a>
     f58:	88 23       	and	r24, r24
     f5a:	71 f0       	breq	.+28     	; 0xf78 <FWayneSendCommand+0x4e>
     f5c:	e1 c3       	rjmp	.+1986   	; 0x1720 <FWayneSendCommand+0x7f6>
     f5e:	8c 30       	cpi	r24, 0x0C	; 12
     f60:	09 f4       	brne	.+2      	; 0xf64 <FWayneSendCommand+0x3a>
     f62:	f8 c0       	rjmp	.+496    	; 0x1154 <FWayneSendCommand+0x22a>
     f64:	8c 30       	cpi	r24, 0x0C	; 12
     f66:	08 f4       	brcc	.+2      	; 0xf6a <FWayneSendCommand+0x40>
     f68:	87 c0       	rjmp	.+270    	; 0x1078 <FWayneSendCommand+0x14e>
     f6a:	8d 30       	cpi	r24, 0x0D	; 13
     f6c:	09 f4       	brne	.+2      	; 0xf70 <FWayneSendCommand+0x46>
     f6e:	ab c1       	rjmp	.+854    	; 0x12c6 <FWayneSendCommand+0x39c>
     f70:	8e 30       	cpi	r24, 0x0E	; 14
     f72:	09 f0       	breq	.+2      	; 0xf76 <FWayneSendCommand+0x4c>
     f74:	d5 c3       	rjmp	.+1962   	; 0x1720 <FWayneSendCommand+0x7f6>
     f76:	de c2       	rjmp	.+1468   	; 0x1534 <FWayneSendCommand+0x60a>
	      STX_ID=0x50|(0x0F&(xPumpID));
		  WayneSendChar(STX_ID);
	      WayneSendChar(0x20);
	      WayneSendChar(0xFA);
		  */
		  CmdBuffer[0]=0x50|(0x0F&(xPumpID));
     f78:	4f 70       	andi	r20, 0x0F	; 15
     f7a:	40 65       	ori	r20, 0x50	; 80
     f7c:	49 83       	std	Y+1, r20	; 0x01
		  CmdBuffer[1]=0x20;
     f7e:	80 e2       	ldi	r24, 0x20	; 32
     f80:	8a 83       	std	Y+2, r24	; 0x02
     f82:	06 c0       	rjmp	.+12     	; 0xf90 <FWayneSendCommand+0x66>
	      WayneSendChar(SEQ);
	      WayneSendChar(0xFA);
		  */
		  //sprintf_P(strSend,PSTR("[%.2X %.2X %.2X ]"),STX_ID,SEQ,0xFA);
          //_uart_print(1,1,strSend);
		  CmdBuffer[0]=0x50|(0x0F&(xPumpID));
     f84:	4f 70       	andi	r20, 0x0F	; 15
     f86:	40 65       	ori	r20, 0x50	; 80
     f88:	49 83       	std	Y+1, r20	; 0x01
		  CmdBuffer[1]=0xC0|(0x0F&SequenceCmd);
     f8a:	6f 70       	andi	r22, 0x0F	; 15
     f8c:	60 6c       	ori	r22, 0xC0	; 192
     f8e:	6a 83       	std	Y+2, r22	; 0x02
		  CmdBuffer[2]=0xFA;
     f90:	8a ef       	ldi	r24, 0xFA	; 250
     f92:	8b 83       	std	Y+3, r24	; 0x03
		  FWayneSendBuffer(CmdBuffer,3);
     f94:	ce 01       	movw	r24, r28
     f96:	01 96       	adiw	r24, 0x01	; 1
     f98:	63 e0       	ldi	r22, 0x03	; 3
     f9a:	c0 c3       	rjmp	.+1920   	; 0x171c <FWayneSendCommand+0x7f2>
	      break;
     case CMD_AUTH_1://[51 31 01 01 05 63 63 03 FA]//Auth1 ->9
          tCRC16=0;
		  CmdBuffer[0]=0x50|(0x0F&xPumpID);tCRC16=CRC_Wayne(tCRC16,CmdBuffer[0]);
     f9c:	4f 70       	andi	r20, 0x0F	; 15
     f9e:	40 65       	ori	r20, 0x50	; 80

unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
     fa0:	84 2f       	mov	r24, r20
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	50 e0       	ldi	r21, 0x00	; 0
    for (i = 0; i < 8; i++){//++i){
        if (xCRC& 1) xCRC= (xCRC >> 1) ^ 0xA001;//1010 0000 0000 0001
     fa6:	e1 e0       	ldi	r30, 0x01	; 1
     fa8:	f0 ea       	ldi	r31, 0xA0	; 160
     faa:	9c 01       	movw	r18, r24
     fac:	36 95       	lsr	r19
     fae:	27 95       	ror	r18
     fb0:	80 ff       	sbrs	r24, 0
     fb2:	04 c0       	rjmp	.+8      	; 0xfbc <FWayneSendCommand+0x92>
     fb4:	c9 01       	movw	r24, r18
     fb6:	8e 27       	eor	r24, r30
     fb8:	9f 27       	eor	r25, r31
     fba:	01 c0       	rjmp	.+2      	; 0xfbe <FWayneSendCommand+0x94>
        else xCRC= (xCRC>> 1);
     fbc:	c9 01       	movw	r24, r18
unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    for (i = 0; i < 8; i++){//++i){
     fbe:	5f 5f       	subi	r21, 0xFF	; 255
     fc0:	58 30       	cpi	r21, 0x08	; 8
     fc2:	99 f7       	brne	.-26     	; 0xfaa <FWayneSendCommand+0x80>
		  FWayneSendBuffer(CmdBuffer,3);
	      break;
     case CMD_AUTH_1://[51 31 01 01 05 63 63 03 FA]//Auth1 ->9
          tCRC16=0;
		  CmdBuffer[0]=0x50|(0x0F&xPumpID);tCRC16=CRC_Wayne(tCRC16,CmdBuffer[0]);
		  CmdBuffer[1]=0x30|(0x0F&SequenceCmd);tCRC16=CRC_Wayne(tCRC16,CmdBuffer[1]);
     fc4:	6f 70       	andi	r22, 0x0F	; 15
     fc6:	60 63       	ori	r22, 0x30	; 48

unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
     fc8:	26 2f       	mov	r18, r22
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	28 27       	eor	r18, r24
     fce:	39 27       	eor	r19, r25
     fd0:	50 e0       	ldi	r21, 0x00	; 0
    for (i = 0; i < 8; i++){//++i){
        if (xCRC& 1) xCRC= (xCRC >> 1) ^ 0xA001;//1010 0000 0000 0001
     fd2:	e1 e0       	ldi	r30, 0x01	; 1
     fd4:	f0 ea       	ldi	r31, 0xA0	; 160
     fd6:	c9 01       	movw	r24, r18
     fd8:	96 95       	lsr	r25
     fda:	87 95       	ror	r24
     fdc:	20 ff       	sbrs	r18, 0
     fde:	04 c0       	rjmp	.+8      	; 0xfe8 <FWayneSendCommand+0xbe>
     fe0:	9c 01       	movw	r18, r24
     fe2:	2e 27       	eor	r18, r30
     fe4:	3f 27       	eor	r19, r31
     fe6:	01 c0       	rjmp	.+2      	; 0xfea <FWayneSendCommand+0xc0>
        else xCRC= (xCRC>> 1);
     fe8:	9c 01       	movw	r18, r24
unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    for (i = 0; i < 8; i++){//++i){
     fea:	5f 5f       	subi	r21, 0xFF	; 255
     fec:	58 30       	cpi	r21, 0x08	; 8
     fee:	99 f7       	brne	.-26     	; 0xfd6 <FWayneSendCommand+0xac>

unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	82 27       	eor	r24, r18
     ff6:	93 27       	eor	r25, r19
     ff8:	50 e0       	ldi	r21, 0x00	; 0
    for (i = 0; i < 8; i++){//++i){
        if (xCRC& 1) xCRC= (xCRC >> 1) ^ 0xA001;//1010 0000 0000 0001
     ffa:	e1 e0       	ldi	r30, 0x01	; 1
     ffc:	f0 ea       	ldi	r31, 0xA0	; 160
     ffe:	9c 01       	movw	r18, r24
    1000:	36 95       	lsr	r19
    1002:	27 95       	ror	r18
    1004:	80 ff       	sbrs	r24, 0
    1006:	04 c0       	rjmp	.+8      	; 0x1010 <FWayneSendCommand+0xe6>
    1008:	c9 01       	movw	r24, r18
    100a:	8e 27       	eor	r24, r30
    100c:	9f 27       	eor	r25, r31
    100e:	01 c0       	rjmp	.+2      	; 0x1012 <FWayneSendCommand+0xe8>
        else xCRC= (xCRC>> 1);
    1010:	c9 01       	movw	r24, r18
unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    for (i = 0; i < 8; i++){//++i){
    1012:	5f 5f       	subi	r21, 0xFF	; 255
    1014:	58 30       	cpi	r21, 0x08	; 8
    1016:	99 f7       	brne	.-26     	; 0xffe <FWayneSendCommand+0xd4>

unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    1018:	21 e0       	ldi	r18, 0x01	; 1
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	28 27       	eor	r18, r24
    101e:	39 27       	eor	r19, r25
    1020:	50 e0       	ldi	r21, 0x00	; 0
    for (i = 0; i < 8; i++){//++i){
        if (xCRC& 1) xCRC= (xCRC >> 1) ^ 0xA001;//1010 0000 0000 0001
    1022:	e1 e0       	ldi	r30, 0x01	; 1
    1024:	f0 ea       	ldi	r31, 0xA0	; 160
    1026:	c9 01       	movw	r24, r18
    1028:	96 95       	lsr	r25
    102a:	87 95       	ror	r24
    102c:	20 ff       	sbrs	r18, 0
    102e:	04 c0       	rjmp	.+8      	; 0x1038 <FWayneSendCommand+0x10e>
    1030:	9c 01       	movw	r18, r24
    1032:	2e 27       	eor	r18, r30
    1034:	3f 27       	eor	r19, r31
    1036:	01 c0       	rjmp	.+2      	; 0x103a <FWayneSendCommand+0x110>
        else xCRC= (xCRC>> 1);
    1038:	9c 01       	movw	r18, r24
unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    for (i = 0; i < 8; i++){//++i){
    103a:	5f 5f       	subi	r21, 0xFF	; 255
    103c:	58 30       	cpi	r21, 0x08	; 8
    103e:	99 f7       	brne	.-26     	; 0x1026 <FWayneSendCommand+0xfc>

unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    1040:	e5 e0       	ldi	r30, 0x05	; 5
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	e2 27       	eor	r30, r18
    1046:	f3 27       	eor	r31, r19
    1048:	20 e0       	ldi	r18, 0x00	; 0
    for (i = 0; i < 8; i++){//++i){
        if (xCRC& 1) xCRC= (xCRC >> 1) ^ 0xA001;//1010 0000 0000 0001
    104a:	a1 e0       	ldi	r26, 0x01	; 1
    104c:	b0 ea       	ldi	r27, 0xA0	; 160
    104e:	cf 01       	movw	r24, r30
    1050:	96 95       	lsr	r25
    1052:	87 95       	ror	r24
    1054:	e0 ff       	sbrs	r30, 0
    1056:	04 c0       	rjmp	.+8      	; 0x1060 <FWayneSendCommand+0x136>
    1058:	fc 01       	movw	r30, r24
    105a:	ea 27       	eor	r30, r26
    105c:	fb 27       	eor	r31, r27
    105e:	01 c0       	rjmp	.+2      	; 0x1062 <FWayneSendCommand+0x138>
        else xCRC= (xCRC>> 1);
    1060:	fc 01       	movw	r30, r24
unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    for (i = 0; i < 8; i++){//++i){
    1062:	2f 5f       	subi	r18, 0xFF	; 255
    1064:	28 30       	cpi	r18, 0x08	; 8
    1066:	99 f7       	brne	.-26     	; 0x104e <FWayneSendCommand+0x124>
		  CmdBuffer[2]=0xFA;
		  FWayneSendBuffer(CmdBuffer,3);
	      break;
     case CMD_AUTH_1://[51 31 01 01 05 63 63 03 FA]//Auth1 ->9
          tCRC16=0;
		  CmdBuffer[0]=0x50|(0x0F&xPumpID);tCRC16=CRC_Wayne(tCRC16,CmdBuffer[0]);
    1068:	49 83       	std	Y+1, r20	; 0x01
		  CmdBuffer[1]=0x30|(0x0F&SequenceCmd);tCRC16=CRC_Wayne(tCRC16,CmdBuffer[1]);
    106a:	6a 83       	std	Y+2, r22	; 0x02
		  CmdBuffer[2]=0x01;tCRC16=CRC_Wayne(tCRC16,CmdBuffer[2]);
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	8b 83       	std	Y+3, r24	; 0x03
		  CmdBuffer[3]=0x01;tCRC16=CRC_Wayne(tCRC16,CmdBuffer[3]);
    1070:	8c 83       	std	Y+4, r24	; 0x04
		  CmdBuffer[4]=0x05;tCRC16=CRC_Wayne(tCRC16,CmdBuffer[4]);
    1072:	85 e0       	ldi	r24, 0x05	; 5
    1074:	8d 83       	std	Y+5, r24	; 0x05
    1076:	68 c0       	rjmp	.+208    	; 0x1148 <FWayneSendCommand+0x21e>
		  CmdBuffer[8]=0xFA;
          FWayneSendBuffer(CmdBuffer,9);
	      break;
     case CMD_AUTH_2://[51 32 01 01 00 A3 24 03 FA]//Auth2 ->9
          tCRC16=0;
		  CmdBuffer[0]=0x50|(0x0F&xPumpID);tCRC16=CRC_Wayne(tCRC16,CmdBuffer[0]);
    1078:	4f 70       	andi	r20, 0x0F	; 15
    107a:	40 65       	ori	r20, 0x50	; 80

unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    107c:	24 2f       	mov	r18, r20
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	50 e0       	ldi	r21, 0x00	; 0
    for (i = 0; i < 8; i++){//++i){
        if (xCRC& 1) xCRC= (xCRC >> 1) ^ 0xA001;//1010 0000 0000 0001
    1082:	e1 e0       	ldi	r30, 0x01	; 1
    1084:	f0 ea       	ldi	r31, 0xA0	; 160
    1086:	c9 01       	movw	r24, r18
    1088:	96 95       	lsr	r25
    108a:	87 95       	ror	r24
    108c:	20 ff       	sbrs	r18, 0
    108e:	04 c0       	rjmp	.+8      	; 0x1098 <FWayneSendCommand+0x16e>
    1090:	9c 01       	movw	r18, r24
    1092:	2e 27       	eor	r18, r30
    1094:	3f 27       	eor	r19, r31
    1096:	01 c0       	rjmp	.+2      	; 0x109a <FWayneSendCommand+0x170>
        else xCRC= (xCRC>> 1);
    1098:	9c 01       	movw	r18, r24
unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    for (i = 0; i < 8; i++){//++i){
    109a:	5f 5f       	subi	r21, 0xFF	; 255
    109c:	58 30       	cpi	r21, 0x08	; 8
    109e:	99 f7       	brne	.-26     	; 0x1086 <FWayneSendCommand+0x15c>
          FWayneSendBuffer(CmdBuffer,9);
	      break;
     case CMD_AUTH_2://[51 32 01 01 00 A3 24 03 FA]//Auth2 ->9
          tCRC16=0;
		  CmdBuffer[0]=0x50|(0x0F&xPumpID);tCRC16=CRC_Wayne(tCRC16,CmdBuffer[0]);
		  CmdBuffer[1]=0x30|(0x0F&SequenceCmd);tCRC16=CRC_Wayne(tCRC16,CmdBuffer[1]);
    10a0:	6f 70       	andi	r22, 0x0F	; 15
    10a2:	60 63       	ori	r22, 0x30	; 48

unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    10a4:	86 2f       	mov	r24, r22
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	82 27       	eor	r24, r18
    10aa:	93 27       	eor	r25, r19
    10ac:	50 e0       	ldi	r21, 0x00	; 0
    for (i = 0; i < 8; i++){//++i){
        if (xCRC& 1) xCRC= (xCRC >> 1) ^ 0xA001;//1010 0000 0000 0001
    10ae:	e1 e0       	ldi	r30, 0x01	; 1
    10b0:	f0 ea       	ldi	r31, 0xA0	; 160
    10b2:	9c 01       	movw	r18, r24
    10b4:	36 95       	lsr	r19
    10b6:	27 95       	ror	r18
    10b8:	80 ff       	sbrs	r24, 0
    10ba:	04 c0       	rjmp	.+8      	; 0x10c4 <FWayneSendCommand+0x19a>
    10bc:	c9 01       	movw	r24, r18
    10be:	8e 27       	eor	r24, r30
    10c0:	9f 27       	eor	r25, r31
    10c2:	01 c0       	rjmp	.+2      	; 0x10c6 <FWayneSendCommand+0x19c>
        else xCRC= (xCRC>> 1);
    10c4:	c9 01       	movw	r24, r18
unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    for (i = 0; i < 8; i++){//++i){
    10c6:	5f 5f       	subi	r21, 0xFF	; 255
    10c8:	58 30       	cpi	r21, 0x08	; 8
    10ca:	99 f7       	brne	.-26     	; 0x10b2 <FWayneSendCommand+0x188>

unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    10cc:	21 e0       	ldi	r18, 0x01	; 1
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	28 27       	eor	r18, r24
    10d2:	39 27       	eor	r19, r25
    10d4:	50 e0       	ldi	r21, 0x00	; 0
    for (i = 0; i < 8; i++){//++i){
        if (xCRC& 1) xCRC= (xCRC >> 1) ^ 0xA001;//1010 0000 0000 0001
    10d6:	e1 e0       	ldi	r30, 0x01	; 1
    10d8:	f0 ea       	ldi	r31, 0xA0	; 160
    10da:	c9 01       	movw	r24, r18
    10dc:	96 95       	lsr	r25
    10de:	87 95       	ror	r24
    10e0:	20 ff       	sbrs	r18, 0
    10e2:	04 c0       	rjmp	.+8      	; 0x10ec <FWayneSendCommand+0x1c2>
    10e4:	9c 01       	movw	r18, r24
    10e6:	2e 27       	eor	r18, r30
    10e8:	3f 27       	eor	r19, r31
    10ea:	01 c0       	rjmp	.+2      	; 0x10ee <FWayneSendCommand+0x1c4>
        else xCRC= (xCRC>> 1);
    10ec:	9c 01       	movw	r18, r24
unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    for (i = 0; i < 8; i++){//++i){
    10ee:	5f 5f       	subi	r21, 0xFF	; 255
    10f0:	58 30       	cpi	r21, 0x08	; 8
    10f2:	99 f7       	brne	.-26     	; 0x10da <FWayneSendCommand+0x1b0>

unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    10f4:	e1 e0       	ldi	r30, 0x01	; 1
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	e2 27       	eor	r30, r18
    10fa:	f3 27       	eor	r31, r19
    10fc:	80 e0       	ldi	r24, 0x00	; 0
    for (i = 0; i < 8; i++){//++i){
        if (xCRC& 1) xCRC= (xCRC >> 1) ^ 0xA001;//1010 0000 0000 0001
    10fe:	a1 e0       	ldi	r26, 0x01	; 1
    1100:	b0 ea       	ldi	r27, 0xA0	; 160
    1102:	9f 01       	movw	r18, r30
    1104:	36 95       	lsr	r19
    1106:	27 95       	ror	r18
    1108:	e0 ff       	sbrs	r30, 0
    110a:	04 c0       	rjmp	.+8      	; 0x1114 <FWayneSendCommand+0x1ea>
    110c:	f9 01       	movw	r30, r18
    110e:	ea 27       	eor	r30, r26
    1110:	fb 27       	eor	r31, r27
    1112:	01 c0       	rjmp	.+2      	; 0x1116 <FWayneSendCommand+0x1ec>
        else xCRC= (xCRC>> 1);
    1114:	f9 01       	movw	r30, r18
unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    for (i = 0; i < 8; i++){//++i){
    1116:	8f 5f       	subi	r24, 0xFF	; 255
    1118:	88 30       	cpi	r24, 0x08	; 8
    111a:	99 f7       	brne	.-26     	; 0x1102 <FWayneSendCommand+0x1d8>
    111c:	80 e0       	ldi	r24, 0x00	; 0
        if (xCRC& 1) xCRC= (xCRC >> 1) ^ 0xA001;//1010 0000 0000 0001
    111e:	a1 e0       	ldi	r26, 0x01	; 1
    1120:	b0 ea       	ldi	r27, 0xA0	; 160
    1122:	9f 01       	movw	r18, r30
    1124:	36 95       	lsr	r19
    1126:	27 95       	ror	r18
    1128:	e0 ff       	sbrs	r30, 0
    112a:	04 c0       	rjmp	.+8      	; 0x1134 <FWayneSendCommand+0x20a>
    112c:	f9 01       	movw	r30, r18
    112e:	ea 27       	eor	r30, r26
    1130:	fb 27       	eor	r31, r27
    1132:	01 c0       	rjmp	.+2      	; 0x1136 <FWayneSendCommand+0x20c>
        else xCRC= (xCRC>> 1);
    1134:	f9 01       	movw	r30, r18
unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    for (i = 0; i < 8; i++){//++i){
    1136:	8f 5f       	subi	r24, 0xFF	; 255
    1138:	88 30       	cpi	r24, 0x08	; 8
    113a:	99 f7       	brne	.-26     	; 0x1122 <FWayneSendCommand+0x1f8>
		  CmdBuffer[8]=0xFA;
          FWayneSendBuffer(CmdBuffer,9);
	      break;
     case CMD_AUTH_2://[51 32 01 01 00 A3 24 03 FA]//Auth2 ->9
          tCRC16=0;
		  CmdBuffer[0]=0x50|(0x0F&xPumpID);tCRC16=CRC_Wayne(tCRC16,CmdBuffer[0]);
    113c:	49 83       	std	Y+1, r20	; 0x01
		  CmdBuffer[1]=0x30|(0x0F&SequenceCmd);tCRC16=CRC_Wayne(tCRC16,CmdBuffer[1]);
    113e:	6a 83       	std	Y+2, r22	; 0x02
		  CmdBuffer[2]=0x01;tCRC16=CRC_Wayne(tCRC16,CmdBuffer[2]);
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	8b 83       	std	Y+3, r24	; 0x03
		  CmdBuffer[3]=0x01;tCRC16=CRC_Wayne(tCRC16,CmdBuffer[3]);
    1144:	8c 83       	std	Y+4, r24	; 0x04
		  CmdBuffer[4]=0x00;tCRC16=CRC_Wayne(tCRC16,CmdBuffer[4]);
    1146:	1d 82       	std	Y+5, r1	; 0x05
		  CmdBuffer[5]=tCRC16;
    1148:	ee 83       	std	Y+6, r30	; 0x06
		  CmdBuffer[6]=tCRC16>>8;
    114a:	8f 2f       	mov	r24, r31
    114c:	99 27       	eor	r25, r25
    114e:	87 fd       	sbrc	r24, 7
    1150:	9a 95       	dec	r25
    1152:	e7 c1       	rjmp	.+974    	; 0x1522 <FWayneSendCommand+0x5f8>
		  CmdBuffer[8]=0xFA;
          FWayneSendBuffer(CmdBuffer,9);
	      break;
     case CMD_AUTH_3://Preset Auth Max Volume
          tCRC16=0;//[51 33 04 04 99 99 99 99 63 3E 03 FA]//Auth3 ->12
		  CmdBuffer[0]=0x50|(0x0F&xPumpID);tCRC16=CRC_Wayne(tCRC16,CmdBuffer[0]);
    1154:	4f 70       	andi	r20, 0x0F	; 15
    1156:	40 65       	ori	r20, 0x50	; 80

unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    1158:	84 2f       	mov	r24, r20
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	50 e0       	ldi	r21, 0x00	; 0
    for (i = 0; i < 8; i++){//++i){
        if (xCRC& 1) xCRC= (xCRC >> 1) ^ 0xA001;//1010 0000 0000 0001
    115e:	e1 e0       	ldi	r30, 0x01	; 1
    1160:	f0 ea       	ldi	r31, 0xA0	; 160
    1162:	9c 01       	movw	r18, r24
    1164:	36 95       	lsr	r19
    1166:	27 95       	ror	r18
    1168:	80 ff       	sbrs	r24, 0
    116a:	04 c0       	rjmp	.+8      	; 0x1174 <FWayneSendCommand+0x24a>
    116c:	c9 01       	movw	r24, r18
    116e:	8e 27       	eor	r24, r30
    1170:	9f 27       	eor	r25, r31
    1172:	01 c0       	rjmp	.+2      	; 0x1176 <FWayneSendCommand+0x24c>
        else xCRC= (xCRC>> 1);
    1174:	c9 01       	movw	r24, r18
unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    for (i = 0; i < 8; i++){//++i){
    1176:	5f 5f       	subi	r21, 0xFF	; 255
    1178:	58 30       	cpi	r21, 0x08	; 8
    117a:	99 f7       	brne	.-26     	; 0x1162 <FWayneSendCommand+0x238>
          FWayneSendBuffer(CmdBuffer,9);
	      break;
     case CMD_AUTH_3://Preset Auth Max Volume
          tCRC16=0;//[51 33 04 04 99 99 99 99 63 3E 03 FA]//Auth3 ->12
		  CmdBuffer[0]=0x50|(0x0F&xPumpID);tCRC16=CRC_Wayne(tCRC16,CmdBuffer[0]);
		  CmdBuffer[1]=0x30|(0x0F&SequenceCmd);tCRC16=CRC_Wayne(tCRC16,CmdBuffer[1]);
    117c:	6f 70       	andi	r22, 0x0F	; 15
    117e:	60 63       	ori	r22, 0x30	; 48

unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    1180:	26 2f       	mov	r18, r22
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	28 27       	eor	r18, r24
    1186:	39 27       	eor	r19, r25
    1188:	50 e0       	ldi	r21, 0x00	; 0
    for (i = 0; i < 8; i++){//++i){
        if (xCRC& 1) xCRC= (xCRC >> 1) ^ 0xA001;//1010 0000 0000 0001
    118a:	e1 e0       	ldi	r30, 0x01	; 1
    118c:	f0 ea       	ldi	r31, 0xA0	; 160
    118e:	c9 01       	movw	r24, r18
    1190:	96 95       	lsr	r25
    1192:	87 95       	ror	r24
    1194:	20 ff       	sbrs	r18, 0
    1196:	04 c0       	rjmp	.+8      	; 0x11a0 <FWayneSendCommand+0x276>
    1198:	9c 01       	movw	r18, r24
    119a:	2e 27       	eor	r18, r30
    119c:	3f 27       	eor	r19, r31
    119e:	01 c0       	rjmp	.+2      	; 0x11a2 <FWayneSendCommand+0x278>
        else xCRC= (xCRC>> 1);
    11a0:	9c 01       	movw	r18, r24
unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    for (i = 0; i < 8; i++){//++i){
    11a2:	5f 5f       	subi	r21, 0xFF	; 255
    11a4:	58 30       	cpi	r21, 0x08	; 8
    11a6:	99 f7       	brne	.-26     	; 0x118e <FWayneSendCommand+0x264>

unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    11a8:	84 e0       	ldi	r24, 0x04	; 4
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	82 27       	eor	r24, r18
    11ae:	93 27       	eor	r25, r19
    11b0:	50 e0       	ldi	r21, 0x00	; 0
    for (i = 0; i < 8; i++){//++i){
        if (xCRC& 1) xCRC= (xCRC >> 1) ^ 0xA001;//1010 0000 0000 0001
    11b2:	e1 e0       	ldi	r30, 0x01	; 1
    11b4:	f0 ea       	ldi	r31, 0xA0	; 160
    11b6:	9c 01       	movw	r18, r24
    11b8:	36 95       	lsr	r19
    11ba:	27 95       	ror	r18
    11bc:	80 ff       	sbrs	r24, 0
    11be:	04 c0       	rjmp	.+8      	; 0x11c8 <FWayneSendCommand+0x29e>
    11c0:	c9 01       	movw	r24, r18
    11c2:	8e 27       	eor	r24, r30
    11c4:	9f 27       	eor	r25, r31
    11c6:	01 c0       	rjmp	.+2      	; 0x11ca <FWayneSendCommand+0x2a0>
        else xCRC= (xCRC>> 1);
    11c8:	c9 01       	movw	r24, r18
unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    for (i = 0; i < 8; i++){//++i){
    11ca:	5f 5f       	subi	r21, 0xFF	; 255
    11cc:	58 30       	cpi	r21, 0x08	; 8
    11ce:	99 f7       	brne	.-26     	; 0x11b6 <FWayneSendCommand+0x28c>

unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    11d0:	e4 e0       	ldi	r30, 0x04	; 4
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	e8 27       	eor	r30, r24
    11d6:	f9 27       	eor	r31, r25
    11d8:	20 e0       	ldi	r18, 0x00	; 0
    for (i = 0; i < 8; i++){//++i){
        if (xCRC& 1) xCRC= (xCRC >> 1) ^ 0xA001;//1010 0000 0000 0001
    11da:	a1 e0       	ldi	r26, 0x01	; 1
    11dc:	b0 ea       	ldi	r27, 0xA0	; 160
    11de:	cf 01       	movw	r24, r30
    11e0:	96 95       	lsr	r25
    11e2:	87 95       	ror	r24
    11e4:	e0 ff       	sbrs	r30, 0
    11e6:	04 c0       	rjmp	.+8      	; 0x11f0 <FWayneSendCommand+0x2c6>
    11e8:	fc 01       	movw	r30, r24
    11ea:	ea 27       	eor	r30, r26
    11ec:	fb 27       	eor	r31, r27
    11ee:	01 c0       	rjmp	.+2      	; 0x11f2 <FWayneSendCommand+0x2c8>
        else xCRC= (xCRC>> 1);
    11f0:	fc 01       	movw	r30, r24
unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    for (i = 0; i < 8; i++){//++i){
    11f2:	2f 5f       	subi	r18, 0xFF	; 255
    11f4:	28 30       	cpi	r18, 0x08	; 8
    11f6:	99 f7       	brne	.-26     	; 0x11de <FWayneSendCommand+0x2b4>
          tCRC16=0;//[51 33 04 04 99 99 99 99 63 3E 03 FA]//Auth3 ->12
		  CmdBuffer[0]=0x50|(0x0F&xPumpID);tCRC16=CRC_Wayne(tCRC16,CmdBuffer[0]);
		  CmdBuffer[1]=0x30|(0x0F&SequenceCmd);tCRC16=CRC_Wayne(tCRC16,CmdBuffer[1]);
		  CmdBuffer[2]=0x04;tCRC16=CRC_Wayne(tCRC16,CmdBuffer[2]);
		  CmdBuffer[3]=0x04;tCRC16=CRC_Wayne(tCRC16,CmdBuffer[3]);
		  CmdBuffer[4]=MaxAuthVolume[0];tCRC16=CRC_Wayne(tCRC16,CmdBuffer[4]);
    11f8:	00 91 07 01 	lds	r16, 0x0107

unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    11fc:	20 2f       	mov	r18, r16
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	2e 27       	eor	r18, r30
    1202:	3f 27       	eor	r19, r31
    1204:	50 e0       	ldi	r21, 0x00	; 0
    for (i = 0; i < 8; i++){//++i){
        if (xCRC& 1) xCRC= (xCRC >> 1) ^ 0xA001;//1010 0000 0000 0001
    1206:	e1 e0       	ldi	r30, 0x01	; 1
    1208:	f0 ea       	ldi	r31, 0xA0	; 160
    120a:	c9 01       	movw	r24, r18
    120c:	96 95       	lsr	r25
    120e:	87 95       	ror	r24
    1210:	20 ff       	sbrs	r18, 0
    1212:	04 c0       	rjmp	.+8      	; 0x121c <FWayneSendCommand+0x2f2>
    1214:	9c 01       	movw	r18, r24
    1216:	2e 27       	eor	r18, r30
    1218:	3f 27       	eor	r19, r31
    121a:	01 c0       	rjmp	.+2      	; 0x121e <FWayneSendCommand+0x2f4>
        else xCRC= (xCRC>> 1);
    121c:	9c 01       	movw	r18, r24
unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    for (i = 0; i < 8; i++){//++i){
    121e:	5f 5f       	subi	r21, 0xFF	; 255
    1220:	58 30       	cpi	r21, 0x08	; 8
    1222:	99 f7       	brne	.-26     	; 0x120a <FWayneSendCommand+0x2e0>
		  CmdBuffer[0]=0x50|(0x0F&xPumpID);tCRC16=CRC_Wayne(tCRC16,CmdBuffer[0]);
		  CmdBuffer[1]=0x30|(0x0F&SequenceCmd);tCRC16=CRC_Wayne(tCRC16,CmdBuffer[1]);
		  CmdBuffer[2]=0x04;tCRC16=CRC_Wayne(tCRC16,CmdBuffer[2]);
		  CmdBuffer[3]=0x04;tCRC16=CRC_Wayne(tCRC16,CmdBuffer[3]);
		  CmdBuffer[4]=MaxAuthVolume[0];tCRC16=CRC_Wayne(tCRC16,CmdBuffer[4]);
		  CmdBuffer[5]=MaxAuthVolume[1];tCRC16=CRC_Wayne(tCRC16,CmdBuffer[5]);
    1224:	10 91 08 01 	lds	r17, 0x0108

unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    1228:	81 2f       	mov	r24, r17
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	82 27       	eor	r24, r18
    122e:	93 27       	eor	r25, r19
    1230:	50 e0       	ldi	r21, 0x00	; 0
    for (i = 0; i < 8; i++){//++i){
        if (xCRC& 1) xCRC= (xCRC >> 1) ^ 0xA001;//1010 0000 0000 0001
    1232:	e1 e0       	ldi	r30, 0x01	; 1
    1234:	f0 ea       	ldi	r31, 0xA0	; 160
    1236:	9c 01       	movw	r18, r24
    1238:	36 95       	lsr	r19
    123a:	27 95       	ror	r18
    123c:	80 ff       	sbrs	r24, 0
    123e:	04 c0       	rjmp	.+8      	; 0x1248 <FWayneSendCommand+0x31e>
    1240:	c9 01       	movw	r24, r18
    1242:	8e 27       	eor	r24, r30
    1244:	9f 27       	eor	r25, r31
    1246:	01 c0       	rjmp	.+2      	; 0x124a <FWayneSendCommand+0x320>
        else xCRC= (xCRC>> 1);
    1248:	c9 01       	movw	r24, r18
unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    for (i = 0; i < 8; i++){//++i){
    124a:	5f 5f       	subi	r21, 0xFF	; 255
    124c:	58 30       	cpi	r21, 0x08	; 8
    124e:	99 f7       	brne	.-26     	; 0x1236 <FWayneSendCommand+0x30c>
		  CmdBuffer[1]=0x30|(0x0F&SequenceCmd);tCRC16=CRC_Wayne(tCRC16,CmdBuffer[1]);
		  CmdBuffer[2]=0x04;tCRC16=CRC_Wayne(tCRC16,CmdBuffer[2]);
		  CmdBuffer[3]=0x04;tCRC16=CRC_Wayne(tCRC16,CmdBuffer[3]);
		  CmdBuffer[4]=MaxAuthVolume[0];tCRC16=CRC_Wayne(tCRC16,CmdBuffer[4]);
		  CmdBuffer[5]=MaxAuthVolume[1];tCRC16=CRC_Wayne(tCRC16,CmdBuffer[5]);
		  CmdBuffer[6]=MaxAuthVolume[2];tCRC16=CRC_Wayne(tCRC16,CmdBuffer[6]);
    1250:	70 91 09 01 	lds	r23, 0x0109

unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    1254:	27 2f       	mov	r18, r23
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	28 27       	eor	r18, r24
    125a:	39 27       	eor	r19, r25
    125c:	50 e0       	ldi	r21, 0x00	; 0
    for (i = 0; i < 8; i++){//++i){
        if (xCRC& 1) xCRC= (xCRC >> 1) ^ 0xA001;//1010 0000 0000 0001
    125e:	e1 e0       	ldi	r30, 0x01	; 1
    1260:	f0 ea       	ldi	r31, 0xA0	; 160
    1262:	c9 01       	movw	r24, r18
    1264:	96 95       	lsr	r25
    1266:	87 95       	ror	r24
    1268:	20 ff       	sbrs	r18, 0
    126a:	04 c0       	rjmp	.+8      	; 0x1274 <FWayneSendCommand+0x34a>
    126c:	9c 01       	movw	r18, r24
    126e:	2e 27       	eor	r18, r30
    1270:	3f 27       	eor	r19, r31
    1272:	01 c0       	rjmp	.+2      	; 0x1276 <FWayneSendCommand+0x34c>
        else xCRC= (xCRC>> 1);
    1274:	9c 01       	movw	r18, r24
unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    for (i = 0; i < 8; i++){//++i){
    1276:	5f 5f       	subi	r21, 0xFF	; 255
    1278:	58 30       	cpi	r21, 0x08	; 8
    127a:	99 f7       	brne	.-26     	; 0x1262 <FWayneSendCommand+0x338>
		  CmdBuffer[2]=0x04;tCRC16=CRC_Wayne(tCRC16,CmdBuffer[2]);
		  CmdBuffer[3]=0x04;tCRC16=CRC_Wayne(tCRC16,CmdBuffer[3]);
		  CmdBuffer[4]=MaxAuthVolume[0];tCRC16=CRC_Wayne(tCRC16,CmdBuffer[4]);
		  CmdBuffer[5]=MaxAuthVolume[1];tCRC16=CRC_Wayne(tCRC16,CmdBuffer[5]);
		  CmdBuffer[6]=MaxAuthVolume[2];tCRC16=CRC_Wayne(tCRC16,CmdBuffer[6]);
		  CmdBuffer[7]=MaxAuthVolume[3];tCRC16=CRC_Wayne(tCRC16,CmdBuffer[7]);
    127c:	50 91 0a 01 	lds	r21, 0x010A

unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    1280:	e5 2f       	mov	r30, r21
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	e2 27       	eor	r30, r18
    1286:	f3 27       	eor	r31, r19
    1288:	20 e0       	ldi	r18, 0x00	; 0
    for (i = 0; i < 8; i++){//++i){
        if (xCRC& 1) xCRC= (xCRC >> 1) ^ 0xA001;//1010 0000 0000 0001
    128a:	a1 e0       	ldi	r26, 0x01	; 1
    128c:	b0 ea       	ldi	r27, 0xA0	; 160
    128e:	cf 01       	movw	r24, r30
    1290:	96 95       	lsr	r25
    1292:	87 95       	ror	r24
    1294:	e0 ff       	sbrs	r30, 0
    1296:	04 c0       	rjmp	.+8      	; 0x12a0 <FWayneSendCommand+0x376>
    1298:	fc 01       	movw	r30, r24
    129a:	ea 27       	eor	r30, r26
    129c:	fb 27       	eor	r31, r27
    129e:	01 c0       	rjmp	.+2      	; 0x12a2 <FWayneSendCommand+0x378>
        else xCRC= (xCRC>> 1);
    12a0:	fc 01       	movw	r30, r24
unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    for (i = 0; i < 8; i++){//++i){
    12a2:	2f 5f       	subi	r18, 0xFF	; 255
    12a4:	28 30       	cpi	r18, 0x08	; 8
    12a6:	99 f7       	brne	.-26     	; 0x128e <FWayneSendCommand+0x364>
		  CmdBuffer[8]=0xFA;
          FWayneSendBuffer(CmdBuffer,9);
	      break;
     case CMD_AUTH_3://Preset Auth Max Volume
          tCRC16=0;//[51 33 04 04 99 99 99 99 63 3E 03 FA]//Auth3 ->12
		  CmdBuffer[0]=0x50|(0x0F&xPumpID);tCRC16=CRC_Wayne(tCRC16,CmdBuffer[0]);
    12a8:	49 83       	std	Y+1, r20	; 0x01
		  CmdBuffer[1]=0x30|(0x0F&SequenceCmd);tCRC16=CRC_Wayne(tCRC16,CmdBuffer[1]);
    12aa:	6a 83       	std	Y+2, r22	; 0x02
		  CmdBuffer[2]=0x04;tCRC16=CRC_Wayne(tCRC16,CmdBuffer[2]);
    12ac:	84 e0       	ldi	r24, 0x04	; 4
    12ae:	8b 83       	std	Y+3, r24	; 0x03
		  CmdBuffer[3]=0x04;tCRC16=CRC_Wayne(tCRC16,CmdBuffer[3]);
    12b0:	8c 83       	std	Y+4, r24	; 0x04
		  CmdBuffer[4]=MaxAuthVolume[0];tCRC16=CRC_Wayne(tCRC16,CmdBuffer[4]);
    12b2:	0d 83       	std	Y+5, r16	; 0x05
		  CmdBuffer[5]=MaxAuthVolume[1];tCRC16=CRC_Wayne(tCRC16,CmdBuffer[5]);
    12b4:	1e 83       	std	Y+6, r17	; 0x06
		  CmdBuffer[6]=MaxAuthVolume[2];tCRC16=CRC_Wayne(tCRC16,CmdBuffer[6]);
    12b6:	7f 83       	std	Y+7, r23	; 0x07
		  CmdBuffer[7]=MaxAuthVolume[3];tCRC16=CRC_Wayne(tCRC16,CmdBuffer[7]);
    12b8:	58 87       	std	Y+8, r21	; 0x08
		  CmdBuffer[8]=tCRC16;
    12ba:	e9 87       	std	Y+9, r30	; 0x09
		  CmdBuffer[9]=tCRC16>>8;
    12bc:	8f 2f       	mov	r24, r31
    12be:	99 27       	eor	r25, r25
    12c0:	87 fd       	sbrc	r24, 7
    12c2:	9a 95       	dec	r25
    12c4:	b3 c0       	rjmp	.+358    	; 0x142c <FWayneSendCommand+0x502>
	 [51 34 02 01 01 01 01 06 5C BF 03 FA]//Auth4 Nozzle1
     [51 34 02 01 02 01 01 06 5C FB 03 FA]//Auth4 Nozzle2

	 */
          tCRC16=0;
		  CmdBuffer[0]=0x50|(0x0F&xPumpID);tCRC16=CRC_Wayne(tCRC16,CmdBuffer[0]);
    12c6:	4f 70       	andi	r20, 0x0F	; 15
    12c8:	40 65       	ori	r20, 0x50	; 80

unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    12ca:	84 2f       	mov	r24, r20
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    for (i = 0; i < 8; i++){//++i){
        if (xCRC& 1) xCRC= (xCRC >> 1) ^ 0xA001;//1010 0000 0000 0001
    12d0:	a1 e0       	ldi	r26, 0x01	; 1
    12d2:	b0 ea       	ldi	r27, 0xA0	; 160
    12d4:	fc 01       	movw	r30, r24
    12d6:	f6 95       	lsr	r31
    12d8:	e7 95       	ror	r30
    12da:	80 ff       	sbrs	r24, 0
    12dc:	04 c0       	rjmp	.+8      	; 0x12e6 <FWayneSendCommand+0x3bc>
    12de:	cf 01       	movw	r24, r30
    12e0:	8a 27       	eor	r24, r26
    12e2:	9b 27       	eor	r25, r27
    12e4:	01 c0       	rjmp	.+2      	; 0x12e8 <FWayneSendCommand+0x3be>
        else xCRC= (xCRC>> 1);
    12e6:	cf 01       	movw	r24, r30
unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    for (i = 0; i < 8; i++){//++i){
    12e8:	3f 5f       	subi	r19, 0xFF	; 255
    12ea:	38 30       	cpi	r19, 0x08	; 8
    12ec:	99 f7       	brne	.-26     	; 0x12d4 <FWayneSendCommand+0x3aa>
     [51 34 02 01 02 01 01 06 5C FB 03 FA]//Auth4 Nozzle2

	 */
          tCRC16=0;
		  CmdBuffer[0]=0x50|(0x0F&xPumpID);tCRC16=CRC_Wayne(tCRC16,CmdBuffer[0]);
		  CmdBuffer[1]=0x30|(0x0F&SequenceCmd);tCRC16=CRC_Wayne(tCRC16,CmdBuffer[1]);
    12ee:	6f 70       	andi	r22, 0x0F	; 15
    12f0:	60 63       	ori	r22, 0x30	; 48

unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    12f2:	e6 2f       	mov	r30, r22
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	e8 27       	eor	r30, r24
    12f8:	f9 27       	eor	r31, r25
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    for (i = 0; i < 8; i++){//++i){
        if (xCRC& 1) xCRC= (xCRC >> 1) ^ 0xA001;//1010 0000 0000 0001
    12fc:	a1 e0       	ldi	r26, 0x01	; 1
    12fe:	b0 ea       	ldi	r27, 0xA0	; 160
    1300:	cf 01       	movw	r24, r30
    1302:	96 95       	lsr	r25
    1304:	87 95       	ror	r24
    1306:	e0 ff       	sbrs	r30, 0
    1308:	04 c0       	rjmp	.+8      	; 0x1312 <FWayneSendCommand+0x3e8>
    130a:	fc 01       	movw	r30, r24
    130c:	ea 27       	eor	r30, r26
    130e:	fb 27       	eor	r31, r27
    1310:	01 c0       	rjmp	.+2      	; 0x1314 <FWayneSendCommand+0x3ea>
        else xCRC= (xCRC>> 1);
    1312:	fc 01       	movw	r30, r24
unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    for (i = 0; i < 8; i++){//++i){
    1314:	3f 5f       	subi	r19, 0xFF	; 255
    1316:	38 30       	cpi	r19, 0x08	; 8
    1318:	99 f7       	brne	.-26     	; 0x1300 <FWayneSendCommand+0x3d6>

unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    131a:	82 e0       	ldi	r24, 0x02	; 2
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	8e 27       	eor	r24, r30
    1320:	9f 27       	eor	r25, r31
    1322:	30 e0       	ldi	r19, 0x00	; 0
    for (i = 0; i < 8; i++){//++i){
        if (xCRC& 1) xCRC= (xCRC >> 1) ^ 0xA001;//1010 0000 0000 0001
    1324:	a1 e0       	ldi	r26, 0x01	; 1
    1326:	b0 ea       	ldi	r27, 0xA0	; 160
    1328:	fc 01       	movw	r30, r24
    132a:	f6 95       	lsr	r31
    132c:	e7 95       	ror	r30
    132e:	80 ff       	sbrs	r24, 0
    1330:	04 c0       	rjmp	.+8      	; 0x133a <FWayneSendCommand+0x410>
    1332:	cf 01       	movw	r24, r30
    1334:	8a 27       	eor	r24, r26
    1336:	9b 27       	eor	r25, r27
    1338:	01 c0       	rjmp	.+2      	; 0x133c <FWayneSendCommand+0x412>
        else xCRC= (xCRC>> 1);
    133a:	cf 01       	movw	r24, r30
unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    for (i = 0; i < 8; i++){//++i){
    133c:	3f 5f       	subi	r19, 0xFF	; 255
    133e:	38 30       	cpi	r19, 0x08	; 8
    1340:	99 f7       	brne	.-26     	; 0x1328 <FWayneSendCommand+0x3fe>

unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    1342:	a1 e0       	ldi	r26, 0x01	; 1
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	a8 27       	eor	r26, r24
    1348:	b9 27       	eor	r27, r25
    134a:	30 e0       	ldi	r19, 0x00	; 0
    for (i = 0; i < 8; i++){//++i){
        if (xCRC& 1) xCRC= (xCRC >> 1) ^ 0xA001;//1010 0000 0000 0001
    134c:	e1 e0       	ldi	r30, 0x01	; 1
    134e:	f0 ea       	ldi	r31, 0xA0	; 160
    1350:	cd 01       	movw	r24, r26
    1352:	96 95       	lsr	r25
    1354:	87 95       	ror	r24
    1356:	a0 ff       	sbrs	r26, 0
    1358:	04 c0       	rjmp	.+8      	; 0x1362 <FWayneSendCommand+0x438>
    135a:	dc 01       	movw	r26, r24
    135c:	ae 27       	eor	r26, r30
    135e:	bf 27       	eor	r27, r31
    1360:	01 c0       	rjmp	.+2      	; 0x1364 <FWayneSendCommand+0x43a>
        else xCRC= (xCRC>> 1);
    1362:	dc 01       	movw	r26, r24
unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    for (i = 0; i < 8; i++){//++i){
    1364:	3f 5f       	subi	r19, 0xFF	; 255
    1366:	38 30       	cpi	r19, 0x08	; 8
    1368:	99 f7       	brne	.-26     	; 0x1350 <FWayneSendCommand+0x426>
          tCRC16=0;
		  CmdBuffer[0]=0x50|(0x0F&xPumpID);tCRC16=CRC_Wayne(tCRC16,CmdBuffer[0]);
		  CmdBuffer[1]=0x30|(0x0F&SequenceCmd);tCRC16=CRC_Wayne(tCRC16,CmdBuffer[1]);
		  CmdBuffer[2]=0x02;tCRC16=CRC_Wayne(tCRC16,CmdBuffer[2]);
		  CmdBuffer[3]=0x01;tCRC16=CRC_Wayne(tCRC16,CmdBuffer[3]);
		  CmdBuffer[4]=(NozzleID&0x0F);tCRC16=CRC_Wayne(tCRC16,CmdBuffer[4]);
    136a:	2f 70       	andi	r18, 0x0F	; 15

unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    136c:	e2 2f       	mov	r30, r18
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	ea 27       	eor	r30, r26
    1372:	fb 27       	eor	r31, r27
    1374:	30 e0       	ldi	r19, 0x00	; 0
    for (i = 0; i < 8; i++){//++i){
        if (xCRC& 1) xCRC= (xCRC >> 1) ^ 0xA001;//1010 0000 0000 0001
    1376:	a1 e0       	ldi	r26, 0x01	; 1
    1378:	b0 ea       	ldi	r27, 0xA0	; 160
    137a:	cf 01       	movw	r24, r30
    137c:	96 95       	lsr	r25
    137e:	87 95       	ror	r24
    1380:	e0 ff       	sbrs	r30, 0
    1382:	04 c0       	rjmp	.+8      	; 0x138c <FWayneSendCommand+0x462>
    1384:	fc 01       	movw	r30, r24
    1386:	ea 27       	eor	r30, r26
    1388:	fb 27       	eor	r31, r27
    138a:	01 c0       	rjmp	.+2      	; 0x138e <FWayneSendCommand+0x464>
        else xCRC= (xCRC>> 1);
    138c:	fc 01       	movw	r30, r24
unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    for (i = 0; i < 8; i++){//++i){
    138e:	3f 5f       	subi	r19, 0xFF	; 255
    1390:	38 30       	cpi	r19, 0x08	; 8
    1392:	99 f7       	brne	.-26     	; 0x137a <FWayneSendCommand+0x450>

unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	8e 27       	eor	r24, r30
    139a:	9f 27       	eor	r25, r31
    139c:	30 e0       	ldi	r19, 0x00	; 0
    for (i = 0; i < 8; i++){//++i){
        if (xCRC& 1) xCRC= (xCRC >> 1) ^ 0xA001;//1010 0000 0000 0001
    139e:	a1 e0       	ldi	r26, 0x01	; 1
    13a0:	b0 ea       	ldi	r27, 0xA0	; 160
    13a2:	fc 01       	movw	r30, r24
    13a4:	f6 95       	lsr	r31
    13a6:	e7 95       	ror	r30
    13a8:	80 ff       	sbrs	r24, 0
    13aa:	04 c0       	rjmp	.+8      	; 0x13b4 <FWayneSendCommand+0x48a>
    13ac:	cf 01       	movw	r24, r30
    13ae:	8a 27       	eor	r24, r26
    13b0:	9b 27       	eor	r25, r27
    13b2:	01 c0       	rjmp	.+2      	; 0x13b6 <FWayneSendCommand+0x48c>
        else xCRC= (xCRC>> 1);
    13b4:	cf 01       	movw	r24, r30
unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    for (i = 0; i < 8; i++){//++i){
    13b6:	3f 5f       	subi	r19, 0xFF	; 255
    13b8:	38 30       	cpi	r19, 0x08	; 8
    13ba:	99 f7       	brne	.-26     	; 0x13a2 <FWayneSendCommand+0x478>

unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    13bc:	e1 e0       	ldi	r30, 0x01	; 1
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	e8 27       	eor	r30, r24
    13c2:	f9 27       	eor	r31, r25
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    for (i = 0; i < 8; i++){//++i){
        if (xCRC& 1) xCRC= (xCRC >> 1) ^ 0xA001;//1010 0000 0000 0001
    13c6:	a1 e0       	ldi	r26, 0x01	; 1
    13c8:	b0 ea       	ldi	r27, 0xA0	; 160
    13ca:	cf 01       	movw	r24, r30
    13cc:	96 95       	lsr	r25
    13ce:	87 95       	ror	r24
    13d0:	e0 ff       	sbrs	r30, 0
    13d2:	04 c0       	rjmp	.+8      	; 0x13dc <FWayneSendCommand+0x4b2>
    13d4:	fc 01       	movw	r30, r24
    13d6:	ea 27       	eor	r30, r26
    13d8:	fb 27       	eor	r31, r27
    13da:	01 c0       	rjmp	.+2      	; 0x13de <FWayneSendCommand+0x4b4>
        else xCRC= (xCRC>> 1);
    13dc:	fc 01       	movw	r30, r24
unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    for (i = 0; i < 8; i++){//++i){
    13de:	3f 5f       	subi	r19, 0xFF	; 255
    13e0:	38 30       	cpi	r19, 0x08	; 8
    13e2:	99 f7       	brne	.-26     	; 0x13ca <FWayneSendCommand+0x4a0>

unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    13e4:	a6 e0       	ldi	r26, 0x06	; 6
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	ae 27       	eor	r26, r30
    13ea:	bf 27       	eor	r27, r31
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    for (i = 0; i < 8; i++){//++i){
        if (xCRC& 1) xCRC= (xCRC >> 1) ^ 0xA001;//1010 0000 0000 0001
    13ee:	e1 e0       	ldi	r30, 0x01	; 1
    13f0:	f0 ea       	ldi	r31, 0xA0	; 160
    13f2:	cd 01       	movw	r24, r26
    13f4:	96 95       	lsr	r25
    13f6:	87 95       	ror	r24
    13f8:	a0 ff       	sbrs	r26, 0
    13fa:	04 c0       	rjmp	.+8      	; 0x1404 <FWayneSendCommand+0x4da>
    13fc:	dc 01       	movw	r26, r24
    13fe:	ae 27       	eor	r26, r30
    1400:	bf 27       	eor	r27, r31
    1402:	01 c0       	rjmp	.+2      	; 0x1406 <FWayneSendCommand+0x4dc>
        else xCRC= (xCRC>> 1);
    1404:	dc 01       	movw	r26, r24
unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    for (i = 0; i < 8; i++){//++i){
    1406:	3f 5f       	subi	r19, 0xFF	; 255
    1408:	38 30       	cpi	r19, 0x08	; 8
    140a:	99 f7       	brne	.-26     	; 0x13f2 <FWayneSendCommand+0x4c8>
	 [51 34 02 01 01 01 01 06 5C BF 03 FA]//Auth4 Nozzle1
     [51 34 02 01 02 01 01 06 5C FB 03 FA]//Auth4 Nozzle2

	 */
          tCRC16=0;
		  CmdBuffer[0]=0x50|(0x0F&xPumpID);tCRC16=CRC_Wayne(tCRC16,CmdBuffer[0]);
    140c:	49 83       	std	Y+1, r20	; 0x01
		  CmdBuffer[1]=0x30|(0x0F&SequenceCmd);tCRC16=CRC_Wayne(tCRC16,CmdBuffer[1]);
    140e:	6a 83       	std	Y+2, r22	; 0x02
		  CmdBuffer[2]=0x02;tCRC16=CRC_Wayne(tCRC16,CmdBuffer[2]);
    1410:	82 e0       	ldi	r24, 0x02	; 2
    1412:	8b 83       	std	Y+3, r24	; 0x03
		  CmdBuffer[3]=0x01;tCRC16=CRC_Wayne(tCRC16,CmdBuffer[3]);
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	8c 83       	std	Y+4, r24	; 0x04
		  CmdBuffer[4]=(NozzleID&0x0F);tCRC16=CRC_Wayne(tCRC16,CmdBuffer[4]);
    1418:	2d 83       	std	Y+5, r18	; 0x05
		  CmdBuffer[5]=0x01;tCRC16=CRC_Wayne(tCRC16,CmdBuffer[5]);
    141a:	8e 83       	std	Y+6, r24	; 0x06
		  CmdBuffer[6]=0x01;tCRC16=CRC_Wayne(tCRC16,CmdBuffer[6]);
    141c:	8f 83       	std	Y+7, r24	; 0x07
		  CmdBuffer[7]=0x06;tCRC16=CRC_Wayne(tCRC16,CmdBuffer[7]);
    141e:	86 e0       	ldi	r24, 0x06	; 6
    1420:	88 87       	std	Y+8, r24	; 0x08
		  CmdBuffer[8]=tCRC16;
    1422:	a9 87       	std	Y+9, r26	; 0x09
		  CmdBuffer[9]=tCRC16>>8;
    1424:	8b 2f       	mov	r24, r27
    1426:	99 27       	eor	r25, r25
    1428:	87 fd       	sbrc	r24, 7
    142a:	9a 95       	dec	r25
    142c:	8a 87       	std	Y+10, r24	; 0x0a
		  CmdBuffer[10]=0x03;
    142e:	83 e0       	ldi	r24, 0x03	; 3
    1430:	8b 87       	std	Y+11, r24	; 0x0b
		  CmdBuffer[11]=0xFA;
    1432:	8a ef       	ldi	r24, 0xFA	; 250
    1434:	8c 87       	std	Y+12, r24	; 0x0c
          FWayneSendBuffer(CmdBuffer,12);
    1436:	ce 01       	movw	r24, r28
    1438:	01 96       	adiw	r24, 0x01	; 1
    143a:	6c e0       	ldi	r22, 0x0C	; 12
    143c:	6f c1       	rjmp	.+734    	; 0x171c <FWayneSendCommand+0x7f2>
	      break;     
     case CMD_TOTALIZER://[51] [37] [08 01] [02] [F2 2B] [03 FA] 
          tCRC16=0;     //[51   30   08 01   01   B3 5E   03 FA] //Total N1
		  CmdBuffer[0]=0x50|(0x0F&xPumpID);tCRC16=CRC_Wayne(tCRC16,CmdBuffer[0]);
    143e:	4f 70       	andi	r20, 0x0F	; 15
    1440:	40 65       	ori	r20, 0x50	; 80

unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    1442:	84 2f       	mov	r24, r20
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	30 e0       	ldi	r19, 0x00	; 0
    for (i = 0; i < 8; i++){//++i){
        if (xCRC& 1) xCRC= (xCRC >> 1) ^ 0xA001;//1010 0000 0000 0001
    1448:	a1 e0       	ldi	r26, 0x01	; 1
    144a:	b0 ea       	ldi	r27, 0xA0	; 160
    144c:	fc 01       	movw	r30, r24
    144e:	f6 95       	lsr	r31
    1450:	e7 95       	ror	r30
    1452:	80 ff       	sbrs	r24, 0
    1454:	04 c0       	rjmp	.+8      	; 0x145e <FWayneSendCommand+0x534>
    1456:	cf 01       	movw	r24, r30
    1458:	8a 27       	eor	r24, r26
    145a:	9b 27       	eor	r25, r27
    145c:	01 c0       	rjmp	.+2      	; 0x1460 <FWayneSendCommand+0x536>
        else xCRC= (xCRC>> 1);
    145e:	cf 01       	movw	r24, r30
unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    for (i = 0; i < 8; i++){//++i){
    1460:	3f 5f       	subi	r19, 0xFF	; 255
    1462:	38 30       	cpi	r19, 0x08	; 8
    1464:	99 f7       	brne	.-26     	; 0x144c <FWayneSendCommand+0x522>
          FWayneSendBuffer(CmdBuffer,12);
	      break;     
     case CMD_TOTALIZER://[51] [37] [08 01] [02] [F2 2B] [03 FA] 
          tCRC16=0;     //[51   30   08 01   01   B3 5E   03 FA] //Total N1
		  CmdBuffer[0]=0x50|(0x0F&xPumpID);tCRC16=CRC_Wayne(tCRC16,CmdBuffer[0]);
		  CmdBuffer[1]=0x30|(0x0F&SequenceCmd);tCRC16=CRC_Wayne(tCRC16,CmdBuffer[1]);
    1466:	6f 70       	andi	r22, 0x0F	; 15
    1468:	60 63       	ori	r22, 0x30	; 48

unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    146a:	e6 2f       	mov	r30, r22
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	e8 27       	eor	r30, r24
    1470:	f9 27       	eor	r31, r25
    1472:	30 e0       	ldi	r19, 0x00	; 0
    for (i = 0; i < 8; i++){//++i){
        if (xCRC& 1) xCRC= (xCRC >> 1) ^ 0xA001;//1010 0000 0000 0001
    1474:	a1 e0       	ldi	r26, 0x01	; 1
    1476:	b0 ea       	ldi	r27, 0xA0	; 160
    1478:	cf 01       	movw	r24, r30
    147a:	96 95       	lsr	r25
    147c:	87 95       	ror	r24
    147e:	e0 ff       	sbrs	r30, 0
    1480:	04 c0       	rjmp	.+8      	; 0x148a <FWayneSendCommand+0x560>
    1482:	fc 01       	movw	r30, r24
    1484:	ea 27       	eor	r30, r26
    1486:	fb 27       	eor	r31, r27
    1488:	01 c0       	rjmp	.+2      	; 0x148c <FWayneSendCommand+0x562>
        else xCRC= (xCRC>> 1);
    148a:	fc 01       	movw	r30, r24
unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    for (i = 0; i < 8; i++){//++i){
    148c:	3f 5f       	subi	r19, 0xFF	; 255
    148e:	38 30       	cpi	r19, 0x08	; 8
    1490:	99 f7       	brne	.-26     	; 0x1478 <FWayneSendCommand+0x54e>

unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    1492:	88 e0       	ldi	r24, 0x08	; 8
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	8e 27       	eor	r24, r30
    1498:	9f 27       	eor	r25, r31
    149a:	30 e0       	ldi	r19, 0x00	; 0
    for (i = 0; i < 8; i++){//++i){
        if (xCRC& 1) xCRC= (xCRC >> 1) ^ 0xA001;//1010 0000 0000 0001
    149c:	a1 e0       	ldi	r26, 0x01	; 1
    149e:	b0 ea       	ldi	r27, 0xA0	; 160
    14a0:	fc 01       	movw	r30, r24
    14a2:	f6 95       	lsr	r31
    14a4:	e7 95       	ror	r30
    14a6:	80 ff       	sbrs	r24, 0
    14a8:	04 c0       	rjmp	.+8      	; 0x14b2 <FWayneSendCommand+0x588>
    14aa:	cf 01       	movw	r24, r30
    14ac:	8a 27       	eor	r24, r26
    14ae:	9b 27       	eor	r25, r27
    14b0:	01 c0       	rjmp	.+2      	; 0x14b4 <FWayneSendCommand+0x58a>
        else xCRC= (xCRC>> 1);
    14b2:	cf 01       	movw	r24, r30
unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    for (i = 0; i < 8; i++){//++i){
    14b4:	3f 5f       	subi	r19, 0xFF	; 255
    14b6:	38 30       	cpi	r19, 0x08	; 8
    14b8:	99 f7       	brne	.-26     	; 0x14a0 <FWayneSendCommand+0x576>

unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    14ba:	e1 e0       	ldi	r30, 0x01	; 1
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	e8 27       	eor	r30, r24
    14c0:	f9 27       	eor	r31, r25
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    for (i = 0; i < 8; i++){//++i){
        if (xCRC& 1) xCRC= (xCRC >> 1) ^ 0xA001;//1010 0000 0000 0001
    14c4:	a1 e0       	ldi	r26, 0x01	; 1
    14c6:	b0 ea       	ldi	r27, 0xA0	; 160
    14c8:	cf 01       	movw	r24, r30
    14ca:	96 95       	lsr	r25
    14cc:	87 95       	ror	r24
    14ce:	e0 ff       	sbrs	r30, 0
    14d0:	04 c0       	rjmp	.+8      	; 0x14da <FWayneSendCommand+0x5b0>
    14d2:	fc 01       	movw	r30, r24
    14d4:	ea 27       	eor	r30, r26
    14d6:	fb 27       	eor	r31, r27
    14d8:	01 c0       	rjmp	.+2      	; 0x14dc <FWayneSendCommand+0x5b2>
        else xCRC= (xCRC>> 1);
    14da:	fc 01       	movw	r30, r24
unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    for (i = 0; i < 8; i++){//++i){
    14dc:	3f 5f       	subi	r19, 0xFF	; 255
    14de:	38 30       	cpi	r19, 0x08	; 8
    14e0:	99 f7       	brne	.-26     	; 0x14c8 <FWayneSendCommand+0x59e>
          tCRC16=0;     //[51   30   08 01   01   B3 5E   03 FA] //Total N1
		  CmdBuffer[0]=0x50|(0x0F&xPumpID);tCRC16=CRC_Wayne(tCRC16,CmdBuffer[0]);
		  CmdBuffer[1]=0x30|(0x0F&SequenceCmd);tCRC16=CRC_Wayne(tCRC16,CmdBuffer[1]);
		  CmdBuffer[2]=0x08;tCRC16=CRC_Wayne(tCRC16,CmdBuffer[2]);
		  CmdBuffer[3]=0x01;tCRC16=CRC_Wayne(tCRC16,CmdBuffer[3]);
		  CmdBuffer[4]=(NozzleID&0x0F);tCRC16=CRC_Wayne(tCRC16,CmdBuffer[4]);
    14e2:	2f 70       	andi	r18, 0x0F	; 15

unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    14e4:	a2 2f       	mov	r26, r18
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	ae 27       	eor	r26, r30
    14ea:	bf 27       	eor	r27, r31
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    for (i = 0; i < 8; i++){//++i){
        if (xCRC& 1) xCRC= (xCRC >> 1) ^ 0xA001;//1010 0000 0000 0001
    14ee:	e1 e0       	ldi	r30, 0x01	; 1
    14f0:	f0 ea       	ldi	r31, 0xA0	; 160
    14f2:	cd 01       	movw	r24, r26
    14f4:	96 95       	lsr	r25
    14f6:	87 95       	ror	r24
    14f8:	a0 ff       	sbrs	r26, 0
    14fa:	04 c0       	rjmp	.+8      	; 0x1504 <FWayneSendCommand+0x5da>
    14fc:	dc 01       	movw	r26, r24
    14fe:	ae 27       	eor	r26, r30
    1500:	bf 27       	eor	r27, r31
    1502:	01 c0       	rjmp	.+2      	; 0x1506 <FWayneSendCommand+0x5dc>
        else xCRC= (xCRC>> 1);
    1504:	dc 01       	movw	r26, r24
unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    for (i = 0; i < 8; i++){//++i){
    1506:	3f 5f       	subi	r19, 0xFF	; 255
    1508:	38 30       	cpi	r19, 0x08	; 8
    150a:	99 f7       	brne	.-26     	; 0x14f2 <FWayneSendCommand+0x5c8>
		  CmdBuffer[11]=0xFA;
          FWayneSendBuffer(CmdBuffer,12);
	      break;     
     case CMD_TOTALIZER://[51] [37] [08 01] [02] [F2 2B] [03 FA] 
          tCRC16=0;     //[51   30   08 01   01   B3 5E   03 FA] //Total N1
		  CmdBuffer[0]=0x50|(0x0F&xPumpID);tCRC16=CRC_Wayne(tCRC16,CmdBuffer[0]);
    150c:	49 83       	std	Y+1, r20	; 0x01
		  CmdBuffer[1]=0x30|(0x0F&SequenceCmd);tCRC16=CRC_Wayne(tCRC16,CmdBuffer[1]);
    150e:	6a 83       	std	Y+2, r22	; 0x02
		  CmdBuffer[2]=0x08;tCRC16=CRC_Wayne(tCRC16,CmdBuffer[2]);
    1510:	3b 83       	std	Y+3, r19	; 0x03
		  CmdBuffer[3]=0x01;tCRC16=CRC_Wayne(tCRC16,CmdBuffer[3]);
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	8c 83       	std	Y+4, r24	; 0x04
		  CmdBuffer[4]=(NozzleID&0x0F);tCRC16=CRC_Wayne(tCRC16,CmdBuffer[4]);
    1516:	2d 83       	std	Y+5, r18	; 0x05
		  CmdBuffer[5]=tCRC16;
    1518:	ae 83       	std	Y+6, r26	; 0x06
		  CmdBuffer[6]=tCRC16>>8;
    151a:	8b 2f       	mov	r24, r27
    151c:	99 27       	eor	r25, r25
    151e:	87 fd       	sbrc	r24, 7
    1520:	9a 95       	dec	r25
    1522:	8f 83       	std	Y+7, r24	; 0x07
		  CmdBuffer[7]=0x03;
    1524:	83 e0       	ldi	r24, 0x03	; 3
    1526:	88 87       	std	Y+8, r24	; 0x08
		  CmdBuffer[8]=0xFA;
    1528:	8a ef       	ldi	r24, 0xFA	; 250
    152a:	89 87       	std	Y+9, r24	; 0x09
          FWayneSendBuffer(CmdBuffer,9);
    152c:	ce 01       	movw	r24, r28
    152e:	01 96       	adiw	r24, 0x01	; 1
    1530:	69 e0       	ldi	r22, 0x09	; 9
    1532:	f4 c0       	rjmp	.+488    	; 0x171c <FWayneSendCommand+0x7f2>
	 /*
  	   [51 30 [01 01] 00 01 01 04 01 01 03 E4 2E [03 FA] //Get Last Status

	 */
          tCRC16=0;
		  CmdBuffer[0]=0x50|(0x0F&xPumpID);tCRC16=CRC_Wayne(tCRC16,CmdBuffer[0]);
    1534:	4f 70       	andi	r20, 0x0F	; 15
    1536:	40 65       	ori	r20, 0x50	; 80

unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    1538:	84 2f       	mov	r24, r20
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	50 e0       	ldi	r21, 0x00	; 0
    for (i = 0; i < 8; i++){//++i){
        if (xCRC& 1) xCRC= (xCRC >> 1) ^ 0xA001;//1010 0000 0000 0001
    153e:	e1 e0       	ldi	r30, 0x01	; 1
    1540:	f0 ea       	ldi	r31, 0xA0	; 160
    1542:	9c 01       	movw	r18, r24
    1544:	36 95       	lsr	r19
    1546:	27 95       	ror	r18
    1548:	80 ff       	sbrs	r24, 0
    154a:	04 c0       	rjmp	.+8      	; 0x1554 <FWayneSendCommand+0x62a>
    154c:	c9 01       	movw	r24, r18
    154e:	8e 27       	eor	r24, r30
    1550:	9f 27       	eor	r25, r31
    1552:	01 c0       	rjmp	.+2      	; 0x1556 <FWayneSendCommand+0x62c>
        else xCRC= (xCRC>> 1);
    1554:	c9 01       	movw	r24, r18
unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    for (i = 0; i < 8; i++){//++i){
    1556:	5f 5f       	subi	r21, 0xFF	; 255
    1558:	58 30       	cpi	r21, 0x08	; 8
    155a:	99 f7       	brne	.-26     	; 0x1542 <FWayneSendCommand+0x618>
  	   [51 30 [01 01] 00 01 01 04 01 01 03 E4 2E [03 FA] //Get Last Status

	 */
          tCRC16=0;
		  CmdBuffer[0]=0x50|(0x0F&xPumpID);tCRC16=CRC_Wayne(tCRC16,CmdBuffer[0]);
		  CmdBuffer[1]=0x30|(0x0F&SequenceCmd);tCRC16=CRC_Wayne(tCRC16,CmdBuffer[1]);
    155c:	6f 70       	andi	r22, 0x0F	; 15
    155e:	60 63       	ori	r22, 0x30	; 48

unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    1560:	26 2f       	mov	r18, r22
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	28 27       	eor	r18, r24
    1566:	39 27       	eor	r19, r25
    1568:	50 e0       	ldi	r21, 0x00	; 0
    for (i = 0; i < 8; i++){//++i){
        if (xCRC& 1) xCRC= (xCRC >> 1) ^ 0xA001;//1010 0000 0000 0001
    156a:	e1 e0       	ldi	r30, 0x01	; 1
    156c:	f0 ea       	ldi	r31, 0xA0	; 160
    156e:	c9 01       	movw	r24, r18
    1570:	96 95       	lsr	r25
    1572:	87 95       	ror	r24
    1574:	20 ff       	sbrs	r18, 0
    1576:	04 c0       	rjmp	.+8      	; 0x1580 <FWayneSendCommand+0x656>
    1578:	9c 01       	movw	r18, r24
    157a:	2e 27       	eor	r18, r30
    157c:	3f 27       	eor	r19, r31
    157e:	01 c0       	rjmp	.+2      	; 0x1582 <FWayneSendCommand+0x658>
        else xCRC= (xCRC>> 1);
    1580:	9c 01       	movw	r18, r24
unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    for (i = 0; i < 8; i++){//++i){
    1582:	5f 5f       	subi	r21, 0xFF	; 255
    1584:	58 30       	cpi	r21, 0x08	; 8
    1586:	99 f7       	brne	.-26     	; 0x156e <FWayneSendCommand+0x644>

unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	82 27       	eor	r24, r18
    158e:	93 27       	eor	r25, r19
    1590:	50 e0       	ldi	r21, 0x00	; 0
    for (i = 0; i < 8; i++){//++i){
        if (xCRC& 1) xCRC= (xCRC >> 1) ^ 0xA001;//1010 0000 0000 0001
    1592:	e1 e0       	ldi	r30, 0x01	; 1
    1594:	f0 ea       	ldi	r31, 0xA0	; 160
    1596:	9c 01       	movw	r18, r24
    1598:	36 95       	lsr	r19
    159a:	27 95       	ror	r18
    159c:	80 ff       	sbrs	r24, 0
    159e:	04 c0       	rjmp	.+8      	; 0x15a8 <FWayneSendCommand+0x67e>
    15a0:	c9 01       	movw	r24, r18
    15a2:	8e 27       	eor	r24, r30
    15a4:	9f 27       	eor	r25, r31
    15a6:	01 c0       	rjmp	.+2      	; 0x15aa <FWayneSendCommand+0x680>
        else xCRC= (xCRC>> 1);
    15a8:	c9 01       	movw	r24, r18
unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    for (i = 0; i < 8; i++){//++i){
    15aa:	5f 5f       	subi	r21, 0xFF	; 255
    15ac:	58 30       	cpi	r21, 0x08	; 8
    15ae:	99 f7       	brne	.-26     	; 0x1596 <FWayneSendCommand+0x66c>

unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    15b0:	21 e0       	ldi	r18, 0x01	; 1
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	28 27       	eor	r18, r24
    15b6:	39 27       	eor	r19, r25
    15b8:	50 e0       	ldi	r21, 0x00	; 0
    for (i = 0; i < 8; i++){//++i){
        if (xCRC& 1) xCRC= (xCRC >> 1) ^ 0xA001;//1010 0000 0000 0001
    15ba:	e1 e0       	ldi	r30, 0x01	; 1
    15bc:	f0 ea       	ldi	r31, 0xA0	; 160
    15be:	c9 01       	movw	r24, r18
    15c0:	96 95       	lsr	r25
    15c2:	87 95       	ror	r24
    15c4:	20 ff       	sbrs	r18, 0
    15c6:	04 c0       	rjmp	.+8      	; 0x15d0 <FWayneSendCommand+0x6a6>
    15c8:	9c 01       	movw	r18, r24
    15ca:	2e 27       	eor	r18, r30
    15cc:	3f 27       	eor	r19, r31
    15ce:	01 c0       	rjmp	.+2      	; 0x15d2 <FWayneSendCommand+0x6a8>
        else xCRC= (xCRC>> 1);
    15d0:	9c 01       	movw	r18, r24
unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    for (i = 0; i < 8; i++){//++i){
    15d2:	5f 5f       	subi	r21, 0xFF	; 255
    15d4:	58 30       	cpi	r21, 0x08	; 8
    15d6:	99 f7       	brne	.-26     	; 0x15be <FWayneSendCommand+0x694>
    15d8:	50 e0       	ldi	r21, 0x00	; 0
        if (xCRC& 1) xCRC= (xCRC >> 1) ^ 0xA001;//1010 0000 0000 0001
    15da:	e1 e0       	ldi	r30, 0x01	; 1
    15dc:	f0 ea       	ldi	r31, 0xA0	; 160
    15de:	c9 01       	movw	r24, r18
    15e0:	96 95       	lsr	r25
    15e2:	87 95       	ror	r24
    15e4:	20 ff       	sbrs	r18, 0
    15e6:	04 c0       	rjmp	.+8      	; 0x15f0 <FWayneSendCommand+0x6c6>
    15e8:	9c 01       	movw	r18, r24
    15ea:	2e 27       	eor	r18, r30
    15ec:	3f 27       	eor	r19, r31
    15ee:	01 c0       	rjmp	.+2      	; 0x15f2 <FWayneSendCommand+0x6c8>
        else xCRC= (xCRC>> 1);
    15f0:	9c 01       	movw	r18, r24
unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    for (i = 0; i < 8; i++){//++i){
    15f2:	5f 5f       	subi	r21, 0xFF	; 255
    15f4:	58 30       	cpi	r21, 0x08	; 8
    15f6:	99 f7       	brne	.-26     	; 0x15de <FWayneSendCommand+0x6b4>

unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	82 27       	eor	r24, r18
    15fe:	93 27       	eor	r25, r19
    1600:	50 e0       	ldi	r21, 0x00	; 0
    for (i = 0; i < 8; i++){//++i){
        if (xCRC& 1) xCRC= (xCRC >> 1) ^ 0xA001;//1010 0000 0000 0001
    1602:	e1 e0       	ldi	r30, 0x01	; 1
    1604:	f0 ea       	ldi	r31, 0xA0	; 160
    1606:	9c 01       	movw	r18, r24
    1608:	36 95       	lsr	r19
    160a:	27 95       	ror	r18
    160c:	80 ff       	sbrs	r24, 0
    160e:	04 c0       	rjmp	.+8      	; 0x1618 <FWayneSendCommand+0x6ee>
    1610:	c9 01       	movw	r24, r18
    1612:	8e 27       	eor	r24, r30
    1614:	9f 27       	eor	r25, r31
    1616:	01 c0       	rjmp	.+2      	; 0x161a <FWayneSendCommand+0x6f0>
        else xCRC= (xCRC>> 1);
    1618:	c9 01       	movw	r24, r18
unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    for (i = 0; i < 8; i++){//++i){
    161a:	5f 5f       	subi	r21, 0xFF	; 255
    161c:	58 30       	cpi	r21, 0x08	; 8
    161e:	99 f7       	brne	.-26     	; 0x1606 <FWayneSendCommand+0x6dc>

unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    1620:	21 e0       	ldi	r18, 0x01	; 1
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	28 27       	eor	r18, r24
    1626:	39 27       	eor	r19, r25
    1628:	50 e0       	ldi	r21, 0x00	; 0
    for (i = 0; i < 8; i++){//++i){
        if (xCRC& 1) xCRC= (xCRC >> 1) ^ 0xA001;//1010 0000 0000 0001
    162a:	e1 e0       	ldi	r30, 0x01	; 1
    162c:	f0 ea       	ldi	r31, 0xA0	; 160
    162e:	c9 01       	movw	r24, r18
    1630:	96 95       	lsr	r25
    1632:	87 95       	ror	r24
    1634:	20 ff       	sbrs	r18, 0
    1636:	04 c0       	rjmp	.+8      	; 0x1640 <FWayneSendCommand+0x716>
    1638:	9c 01       	movw	r18, r24
    163a:	2e 27       	eor	r18, r30
    163c:	3f 27       	eor	r19, r31
    163e:	01 c0       	rjmp	.+2      	; 0x1642 <FWayneSendCommand+0x718>
        else xCRC= (xCRC>> 1);
    1640:	9c 01       	movw	r18, r24
unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    for (i = 0; i < 8; i++){//++i){
    1642:	5f 5f       	subi	r21, 0xFF	; 255
    1644:	58 30       	cpi	r21, 0x08	; 8
    1646:	99 f7       	brne	.-26     	; 0x162e <FWayneSendCommand+0x704>

unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    1648:	84 e0       	ldi	r24, 0x04	; 4
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	82 27       	eor	r24, r18
    164e:	93 27       	eor	r25, r19
    1650:	50 e0       	ldi	r21, 0x00	; 0
    for (i = 0; i < 8; i++){//++i){
        if (xCRC& 1) xCRC= (xCRC >> 1) ^ 0xA001;//1010 0000 0000 0001
    1652:	e1 e0       	ldi	r30, 0x01	; 1
    1654:	f0 ea       	ldi	r31, 0xA0	; 160
    1656:	9c 01       	movw	r18, r24
    1658:	36 95       	lsr	r19
    165a:	27 95       	ror	r18
    165c:	80 ff       	sbrs	r24, 0
    165e:	04 c0       	rjmp	.+8      	; 0x1668 <FWayneSendCommand+0x73e>
    1660:	c9 01       	movw	r24, r18
    1662:	8e 27       	eor	r24, r30
    1664:	9f 27       	eor	r25, r31
    1666:	01 c0       	rjmp	.+2      	; 0x166a <FWayneSendCommand+0x740>
        else xCRC= (xCRC>> 1);
    1668:	c9 01       	movw	r24, r18
unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    for (i = 0; i < 8; i++){//++i){
    166a:	5f 5f       	subi	r21, 0xFF	; 255
    166c:	58 30       	cpi	r21, 0x08	; 8
    166e:	99 f7       	brne	.-26     	; 0x1656 <FWayneSendCommand+0x72c>

unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    1670:	21 e0       	ldi	r18, 0x01	; 1
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	28 27       	eor	r18, r24
    1676:	39 27       	eor	r19, r25
    1678:	50 e0       	ldi	r21, 0x00	; 0
    for (i = 0; i < 8; i++){//++i){
        if (xCRC& 1) xCRC= (xCRC >> 1) ^ 0xA001;//1010 0000 0000 0001
    167a:	e1 e0       	ldi	r30, 0x01	; 1
    167c:	f0 ea       	ldi	r31, 0xA0	; 160
    167e:	c9 01       	movw	r24, r18
    1680:	96 95       	lsr	r25
    1682:	87 95       	ror	r24
    1684:	20 ff       	sbrs	r18, 0
    1686:	04 c0       	rjmp	.+8      	; 0x1690 <FWayneSendCommand+0x766>
    1688:	9c 01       	movw	r18, r24
    168a:	2e 27       	eor	r18, r30
    168c:	3f 27       	eor	r19, r31
    168e:	01 c0       	rjmp	.+2      	; 0x1692 <FWayneSendCommand+0x768>
        else xCRC= (xCRC>> 1);
    1690:	9c 01       	movw	r18, r24
unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    for (i = 0; i < 8; i++){//++i){
    1692:	5f 5f       	subi	r21, 0xFF	; 255
    1694:	58 30       	cpi	r21, 0x08	; 8
    1696:	99 f7       	brne	.-26     	; 0x167e <FWayneSendCommand+0x754>

unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	82 27       	eor	r24, r18
    169e:	93 27       	eor	r25, r19
    16a0:	50 e0       	ldi	r21, 0x00	; 0
    for (i = 0; i < 8; i++){//++i){
        if (xCRC& 1) xCRC= (xCRC >> 1) ^ 0xA001;//1010 0000 0000 0001
    16a2:	e1 e0       	ldi	r30, 0x01	; 1
    16a4:	f0 ea       	ldi	r31, 0xA0	; 160
    16a6:	9c 01       	movw	r18, r24
    16a8:	36 95       	lsr	r19
    16aa:	27 95       	ror	r18
    16ac:	80 ff       	sbrs	r24, 0
    16ae:	04 c0       	rjmp	.+8      	; 0x16b8 <FWayneSendCommand+0x78e>
    16b0:	c9 01       	movw	r24, r18
    16b2:	8e 27       	eor	r24, r30
    16b4:	9f 27       	eor	r25, r31
    16b6:	01 c0       	rjmp	.+2      	; 0x16ba <FWayneSendCommand+0x790>
        else xCRC= (xCRC>> 1);
    16b8:	c9 01       	movw	r24, r18
unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    for (i = 0; i < 8; i++){//++i){
    16ba:	5f 5f       	subi	r21, 0xFF	; 255
    16bc:	58 30       	cpi	r21, 0x08	; 8
    16be:	99 f7       	brne	.-26     	; 0x16a6 <FWayneSendCommand+0x77c>

unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    16c0:	e3 e0       	ldi	r30, 0x03	; 3
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	e8 27       	eor	r30, r24
    16c6:	f9 27       	eor	r31, r25
    16c8:	20 e0       	ldi	r18, 0x00	; 0
    for (i = 0; i < 8; i++){//++i){
        if (xCRC& 1) xCRC= (xCRC >> 1) ^ 0xA001;//1010 0000 0000 0001
    16ca:	a1 e0       	ldi	r26, 0x01	; 1
    16cc:	b0 ea       	ldi	r27, 0xA0	; 160
    16ce:	cf 01       	movw	r24, r30
    16d0:	96 95       	lsr	r25
    16d2:	87 95       	ror	r24
    16d4:	e0 ff       	sbrs	r30, 0
    16d6:	04 c0       	rjmp	.+8      	; 0x16e0 <FWayneSendCommand+0x7b6>
    16d8:	fc 01       	movw	r30, r24
    16da:	ea 27       	eor	r30, r26
    16dc:	fb 27       	eor	r31, r27
    16de:	01 c0       	rjmp	.+2      	; 0x16e2 <FWayneSendCommand+0x7b8>
        else xCRC= (xCRC>> 1);
    16e0:	fc 01       	movw	r30, r24
unsigned int CRC_Wayne(unsigned int crc, char a){
    char i;
unsigned int xCRC;
    xCRC=crc;
    xCRC ^= a;
    for (i = 0; i < 8; i++){//++i){
    16e2:	2f 5f       	subi	r18, 0xFF	; 255
    16e4:	28 30       	cpi	r18, 0x08	; 8
    16e6:	99 f7       	brne	.-26     	; 0x16ce <FWayneSendCommand+0x7a4>
	 /*
  	   [51 30 [01 01] 00 01 01 04 01 01 03 E4 2E [03 FA] //Get Last Status

	 */
          tCRC16=0;
		  CmdBuffer[0]=0x50|(0x0F&xPumpID);tCRC16=CRC_Wayne(tCRC16,CmdBuffer[0]);
    16e8:	49 83       	std	Y+1, r20	; 0x01
		  CmdBuffer[1]=0x30|(0x0F&SequenceCmd);tCRC16=CRC_Wayne(tCRC16,CmdBuffer[1]);
    16ea:	6a 83       	std	Y+2, r22	; 0x02
		  CmdBuffer[2]=0x01;tCRC16=CRC_Wayne(tCRC16,CmdBuffer[2]);
    16ec:	91 e0       	ldi	r25, 0x01	; 1
    16ee:	9b 83       	std	Y+3, r25	; 0x03
		  CmdBuffer[3]=0x01;tCRC16=CRC_Wayne(tCRC16,CmdBuffer[3]);
    16f0:	9c 83       	std	Y+4, r25	; 0x04
		  CmdBuffer[4]=0x00;tCRC16=CRC_Wayne(tCRC16,CmdBuffer[4]);
    16f2:	1d 82       	std	Y+5, r1	; 0x05
		  CmdBuffer[5]=0x01;tCRC16=CRC_Wayne(tCRC16,CmdBuffer[5]);
    16f4:	9e 83       	std	Y+6, r25	; 0x06
		  CmdBuffer[6]=0x01;tCRC16=CRC_Wayne(tCRC16,CmdBuffer[6]);
    16f6:	9f 83       	std	Y+7, r25	; 0x07
		  CmdBuffer[7]=0x04;tCRC16=CRC_Wayne(tCRC16,CmdBuffer[7]);
    16f8:	84 e0       	ldi	r24, 0x04	; 4
    16fa:	88 87       	std	Y+8, r24	; 0x08
		  CmdBuffer[8]=0x01;tCRC16=CRC_Wayne(tCRC16,CmdBuffer[8]);
    16fc:	99 87       	std	Y+9, r25	; 0x09
		  CmdBuffer[9]=0x01;tCRC16=CRC_Wayne(tCRC16,CmdBuffer[9]);
    16fe:	9a 87       	std	Y+10, r25	; 0x0a
		  CmdBuffer[10]=0x03;tCRC16=CRC_Wayne(tCRC16,CmdBuffer[10]);
    1700:	23 e0       	ldi	r18, 0x03	; 3
    1702:	2b 87       	std	Y+11, r18	; 0x0b
		  CmdBuffer[11]=tCRC16;
    1704:	ec 87       	std	Y+12, r30	; 0x0c
		  CmdBuffer[12]=tCRC16>>8;
    1706:	8f 2f       	mov	r24, r31
    1708:	99 27       	eor	r25, r25
    170a:	87 fd       	sbrc	r24, 7
    170c:	9a 95       	dec	r25
    170e:	8d 87       	std	Y+13, r24	; 0x0d
		  CmdBuffer[13]=0x03;
    1710:	2e 87       	std	Y+14, r18	; 0x0e
		  CmdBuffer[14]=0xFA;
    1712:	8a ef       	ldi	r24, 0xFA	; 250
    1714:	8f 87       	std	Y+15, r24	; 0x0f
          FWayneSendBuffer(CmdBuffer,15);
    1716:	ce 01       	movw	r24, r28
    1718:	01 96       	adiw	r24, 0x01	; 1
    171a:	6f e0       	ldi	r22, 0x0F	; 15
    171c:	0e 94 82 07 	call	0xf04	; 0xf04 <FWayneSendBuffer>
	      break;
     case CMD_REQ_GLOBAL_STATUS_2:
  	      break;
	 }	 
}
    1720:	6e 96       	adiw	r28, 0x1e	; 30
    1722:	0f b6       	in	r0, 0x3f	; 63
    1724:	f8 94       	cli
    1726:	de bf       	out	0x3e, r29	; 62
    1728:	0f be       	out	0x3f, r0	; 63
    172a:	cd bf       	out	0x3d, r28	; 61
    172c:	cf 91       	pop	r28
    172e:	df 91       	pop	r29
    1730:	1f 91       	pop	r17
    1732:	0f 91       	pop	r16
    1734:	08 95       	ret

00001736 <TerminalSendf>:
	 SendSPI(AckData);
	 SendSPI(0x0A);
	 systemSlave();
}

void TerminalSendf(char Com,char *strSendf){
    1736:	1f 93       	push	r17
    1738:	cf 93       	push	r28
    173a:	df 93       	push	r29
    173c:	18 2f       	mov	r17, r24
    173e:	eb 01       	movw	r28, r22
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1740:	e1 99       	sbic	0x1c, 1	; 28
    1742:	fe cf       	rjmp	.-4      	; 0x1740 <TerminalSendf+0xa>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    1744:	84 e0       	ldi	r24, 0x04	; 4
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	9f bb       	out	0x1f, r25	; 31
    174a:	8e bb       	out	0x1e, r24	; 30
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
    174c:	e0 9a       	sbi	0x1c, 0	; 28
    174e:	8d b3       	in	r24, 0x1d	; 29
   if (eeprom_read_byte(&DefTerminalDebug)){
    1750:	88 23       	and	r24, r24
    1752:	41 f4       	brne	.+16     	; 0x1764 <TerminalSendf+0x2e>
    1754:	0c c0       	rjmp	.+24     	; 0x176e <TerminalSendf+0x38>
       while(pgm_read_byte(&(*strSendf)))
	         _uart(Com, 1, pgm_read_byte(&(*strSendf++)));
    1756:	21 96       	adiw	r28, 0x01	; 1
    1758:	f9 01       	movw	r30, r18
    175a:	44 91       	lpm	r20, Z+
    175c:	81 2f       	mov	r24, r17
    175e:	61 e0       	ldi	r22, 0x01	; 1
    1760:	0e 94 46 18 	call	0x308c	; 0x308c <_uart>
    1764:	9e 01       	movw	r18, r28
	 systemSlave();
}

void TerminalSendf(char Com,char *strSendf){
   if (eeprom_read_byte(&DefTerminalDebug)){
       while(pgm_read_byte(&(*strSendf)))
    1766:	fe 01       	movw	r30, r28
    1768:	84 91       	lpm	r24, Z+
    176a:	88 23       	and	r24, r24
    176c:	a1 f7       	brne	.-24     	; 0x1756 <TerminalSendf+0x20>
	         _uart(Com, 1, pgm_read_byte(&(*strSendf++)));
	}
}
    176e:	df 91       	pop	r29
    1770:	cf 91       	pop	r28
    1772:	1f 91       	pop	r17
    1774:	08 95       	ret

00001776 <SendTotalizerFlow>:
	    SendSPI(strSendSPI[i]);
        //_uart(1,1,strSendSPI[i]);
	 } 
}

void SendTotalizerFlow(char xPumpID){
    1776:	4f 92       	push	r4
    1778:	5f 92       	push	r5
    177a:	6f 92       	push	r6
    177c:	7f 92       	push	r7
    177e:	8f 92       	push	r8
    1780:	9f 92       	push	r9
    1782:	af 92       	push	r10
    1784:	bf 92       	push	r11
    1786:	cf 92       	push	r12
    1788:	df 92       	push	r13
    178a:	ef 92       	push	r14
    178c:	ff 92       	push	r15
    178e:	0f 93       	push	r16
    1790:	1f 93       	push	r17
    1792:	df 93       	push	r29
    1794:	cf 93       	push	r28
    1796:	cd b7       	in	r28, 0x3d	; 61
    1798:	de b7       	in	r29, 0x3e	; 62
    179a:	a8 97       	sbiw	r28, 0x28	; 40
    179c:	0f b6       	in	r0, 0x3f	; 63
    179e:	f8 94       	cli
    17a0:	de bf       	out	0x3e, r29	; 62
    17a2:	0f be       	out	0x3f, r0	; 63
    17a4:	cd bf       	out	0x3d, r28	; 61
char i,xPump,strSend[40];
char strVol[10],strMon[10];
	 //                           [0x50,0x05]  02     01    0000000  0000000  0000000  0000000  0000200  0000000  0000200  0000000  0000000  0000000 [0x06,0x60] = 4+8*2*6=76
	 //Sending FlowSPI_Protocol     <STX>   [MsgID][PumpID][Volume1][Amount1][Volume2][Amount2][Volume3][Amount3][Volume4][Amount4][Volume5][Amount5][Volume6][Amount6]<ETX>
	 if (xPumpID>=16)xPump=16;
    17a6:	80 31       	cpi	r24, 0x10	; 16
    17a8:	10 f4       	brcc	.+4      	; 0x17ae <SendTotalizerFlow+0x38>
    17aa:	f8 2e       	mov	r15, r24
    17ac:	02 c0       	rjmp	.+4      	; 0x17b2 <SendTotalizerFlow+0x3c>
    17ae:	00 e1       	ldi	r16, 0x10	; 16
    17b0:	f0 2e       	mov	r15, r16
	 else xPump=xPumpID;
                                                
	 systemMaster();
    17b2:	0e 94 bb 06 	call	0xd76	; 0xd76 <systemMaster>
	sbi(DDRD,2);sbi(PORTD,2);//128-SS HIGH
	//_delay_ms(10);
}

void SendSPI(char xSPI){
     _spi(xSPI);
    17b6:	85 e0       	ldi	r24, 0x05	; 5
    17b8:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <_spi>
void uartGilbarco(){
}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    17bc:	80 e5       	ldi	r24, 0x50	; 80
    17be:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <_spi>
    17c2:	2e 01       	movw	r4, r28
    17c4:	08 94       	sec
    17c6:	41 1c       	adc	r4, r1
    17c8:	51 1c       	adc	r5, r1
    17ca:	52 01       	movw	r10, r4
    17cc:	ce 01       	movw	r24, r28
    17ce:	89 96       	adiw	r24, 0x29	; 41
	     strMemory[i]=data;
    17d0:	d5 01       	movw	r26, r10
    17d2:	1d 92       	st	X+, r1
    17d4:	5d 01       	movw	r10, r26
void uartGilbarco(){
}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    17d6:	a8 17       	cp	r26, r24
    17d8:	b9 07       	cpc	r27, r25
    17da:	d1 f7       	brne	.-12     	; 0x17d0 <SendTotalizerFlow+0x5a>
	 systemMaster();
	 SendSPI(0x05);//STX
	 SendSPI(0x50);//STX
	 FillChar(strSend,sizeof(strSend),0);
	
	 sprintf_P(strSend,PSTR("02%.2d"),xPump);
    17dc:	00 d0       	rcall	.+0      	; 0x17de <SendTotalizerFlow+0x68>
    17de:	00 d0       	rcall	.+0      	; 0x17e0 <SendTotalizerFlow+0x6a>
    17e0:	00 d0       	rcall	.+0      	; 0x17e2 <SendTotalizerFlow+0x6c>
    17e2:	ed b7       	in	r30, 0x3d	; 61
    17e4:	fe b7       	in	r31, 0x3e	; 62
    17e6:	31 96       	adiw	r30, 0x01	; 1
    17e8:	8e 01       	movw	r16, r28
    17ea:	0f 5f       	subi	r16, 0xFF	; 255
    17ec:	1f 4f       	sbci	r17, 0xFF	; 255
    17ee:	ad b7       	in	r26, 0x3d	; 61
    17f0:	be b7       	in	r27, 0x3e	; 62
    17f2:	12 96       	adiw	r26, 0x02	; 2
    17f4:	1c 93       	st	X, r17
    17f6:	0e 93       	st	-X, r16
    17f8:	11 97       	sbiw	r26, 0x01	; 1
    17fa:	80 e4       	ldi	r24, 0x40	; 64
    17fc:	91 e0       	ldi	r25, 0x01	; 1
    17fe:	93 83       	std	Z+3, r25	; 0x03
    1800:	82 83       	std	Z+2, r24	; 0x02
    1802:	f4 82       	std	Z+4, r15	; 0x04
    1804:	15 82       	std	Z+5, r1	; 0x05
    1806:	0e 94 ae 18 	call	0x315c	; 0x315c <sprintf_P>
     SendStrSPI(strSend);
    180a:	ed b7       	in	r30, 0x3d	; 61
    180c:	fe b7       	in	r31, 0x3e	; 62
    180e:	36 96       	adiw	r30, 0x06	; 6
    1810:	0f b6       	in	r0, 0x3f	; 63
    1812:	f8 94       	cli
    1814:	fe bf       	out	0x3e, r31	; 62
    1816:	0f be       	out	0x3f, r0	; 63
    1818:	ed bf       	out	0x3d, r30	; 61
    181a:	c8 01       	movw	r24, r16
    181c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <SendStrSPI>
    1820:	ee 24       	eor	r14, r14
    1822:	ff 24       	eor	r15, r15
     for (i=0;i<6;i++){
	      //FixingData V:[00000000] M:[00000000]
		  AddZeroLead(PumpTotalizer.TotalGrade[i].strMoney,12);
		  AddZeroLead(PumpTotalizer.TotalGrade[i].strVolume,12);
		  FillChar(strSend,sizeof(strSend),0);
		  sprintf_P(strSend,PSTR("%s%s"),PumpTotalizer.TotalGrade[i].strVolume,PumpTotalizer.TotalGrade[i].strMoney);
    1824:	90 2e       	mov	r9, r16
    1826:	81 2e       	mov	r8, r17
    1828:	1b e3       	ldi	r17, 0x3B	; 59
    182a:	61 2e       	mov	r6, r17
    182c:	11 e0       	ldi	r17, 0x01	; 1
    182e:	71 2e       	mov	r7, r17
	 sprintf_P(strSend,PSTR("02%.2d"),xPump);
     SendStrSPI(strSend);

     for (i=0;i<6;i++){
	      //FixingData V:[00000000] M:[00000000]
		  AddZeroLead(PumpTotalizer.TotalGrade[i].strMoney,12);
    1830:	c7 01       	movw	r24, r14
    1832:	67 01       	movw	r12, r14
    1834:	b5 e0       	ldi	r27, 0x05	; 5
    1836:	cc 0c       	add	r12, r12
    1838:	dd 1c       	adc	r13, r13
    183a:	ba 95       	dec	r27
    183c:	e1 f7       	brne	.-8      	; 0x1836 <SendTotalizerFlow+0xc0>
    183e:	88 0f       	add	r24, r24
    1840:	99 1f       	adc	r25, r25
    1842:	c8 1a       	sub	r12, r24
    1844:	d9 0a       	sbc	r13, r25
    1846:	86 e0       	ldi	r24, 0x06	; 6
    1848:	93 e0       	ldi	r25, 0x03	; 3
    184a:	c8 0e       	add	r12, r24
    184c:	d9 1e       	adc	r13, r25
    184e:	c6 01       	movw	r24, r12
    1850:	6c e0       	ldi	r22, 0x0C	; 12
    1852:	0e 94 e7 03 	call	0x7ce	; 0x7ce <AddZeroLead>
		  AddZeroLead(PumpTotalizer.TotalGrade[i].strVolume,12);
    1856:	c7 01       	movw	r24, r14
    1858:	87 01       	movw	r16, r14
    185a:	f5 e0       	ldi	r31, 0x05	; 5
    185c:	00 0f       	add	r16, r16
    185e:	11 1f       	adc	r17, r17
    1860:	fa 95       	dec	r31
    1862:	e1 f7       	brne	.-8      	; 0x185c <SendTotalizerFlow+0xe6>
    1864:	88 0f       	add	r24, r24
    1866:	99 1f       	adc	r25, r25
    1868:	08 1b       	sub	r16, r24
    186a:	19 0b       	sbc	r17, r25
    186c:	09 50       	subi	r16, 0x09	; 9
    186e:	1d 4f       	sbci	r17, 0xFD	; 253
    1870:	c8 01       	movw	r24, r16
    1872:	6c e0       	ldi	r22, 0x0C	; 12
    1874:	0e 94 e7 03 	call	0x7ce	; 0x7ce <AddZeroLead>
    1878:	f2 01       	movw	r30, r4
}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
	     strMemory[i]=data;
    187a:	11 92       	st	Z+, r1
void uartGilbarco(){
}

void FillChar(char *strMemory, unsigned int Length,char data){
     unsigned int i;
	 for (i=0;i<Length;i++){
    187c:	ea 15       	cp	r30, r10
    187e:	fb 05       	cpc	r31, r11
    1880:	e1 f7       	brne	.-8      	; 0x187a <SendTotalizerFlow+0x104>
     for (i=0;i<6;i++){
	      //FixingData V:[00000000] M:[00000000]
		  AddZeroLead(PumpTotalizer.TotalGrade[i].strMoney,12);
		  AddZeroLead(PumpTotalizer.TotalGrade[i].strVolume,12);
		  FillChar(strSend,sizeof(strSend),0);
		  sprintf_P(strSend,PSTR("%s%s"),PumpTotalizer.TotalGrade[i].strVolume,PumpTotalizer.TotalGrade[i].strMoney);
    1882:	ad b7       	in	r26, 0x3d	; 61
    1884:	be b7       	in	r27, 0x3e	; 62
    1886:	18 97       	sbiw	r26, 0x08	; 8
    1888:	0f b6       	in	r0, 0x3f	; 63
    188a:	f8 94       	cli
    188c:	be bf       	out	0x3e, r27	; 62
    188e:	0f be       	out	0x3f, r0	; 63
    1890:	ad bf       	out	0x3d, r26	; 61
    1892:	ed b7       	in	r30, 0x3d	; 61
    1894:	fe b7       	in	r31, 0x3e	; 62
    1896:	31 96       	adiw	r30, 0x01	; 1
    1898:	11 96       	adiw	r26, 0x01	; 1
    189a:	9c 92       	st	X, r9
    189c:	11 97       	sbiw	r26, 0x01	; 1
    189e:	12 96       	adiw	r26, 0x02	; 2
    18a0:	8c 92       	st	X, r8
    18a2:	73 82       	std	Z+3, r7	; 0x03
    18a4:	62 82       	std	Z+2, r6	; 0x02
    18a6:	15 83       	std	Z+5, r17	; 0x05
    18a8:	04 83       	std	Z+4, r16	; 0x04
    18aa:	d7 82       	std	Z+7, r13	; 0x07
    18ac:	c6 82       	std	Z+6, r12	; 0x06
    18ae:	0e 94 ae 18 	call	0x315c	; 0x315c <sprintf_P>
          SendStrSPI(strSend);
    18b2:	ed b7       	in	r30, 0x3d	; 61
    18b4:	fe b7       	in	r31, 0x3e	; 62
    18b6:	38 96       	adiw	r30, 0x08	; 8
    18b8:	0f b6       	in	r0, 0x3f	; 63
    18ba:	f8 94       	cli
    18bc:	fe bf       	out	0x3e, r31	; 62
    18be:	0f be       	out	0x3f, r0	; 63
    18c0:	ed bf       	out	0x3d, r30	; 61
    18c2:	89 2d       	mov	r24, r9
    18c4:	98 2d       	mov	r25, r8
    18c6:	0e 94 8e 06 	call	0xd1c	; 0xd1c <SendStrSPI>
    18ca:	08 94       	sec
    18cc:	e1 1c       	adc	r14, r1
    18ce:	f1 1c       	adc	r15, r1
	 FillChar(strSend,sizeof(strSend),0);
	
	 sprintf_P(strSend,PSTR("02%.2d"),xPump);
     SendStrSPI(strSend);

     for (i=0;i<6;i++){
    18d0:	f6 e0       	ldi	r31, 0x06	; 6
    18d2:	ef 16       	cp	r14, r31
    18d4:	f1 04       	cpc	r15, r1
    18d6:	09 f0       	breq	.+2      	; 0x18da <SendTotalizerFlow+0x164>
    18d8:	ab cf       	rjmp	.-170    	; 0x1830 <SendTotalizerFlow+0xba>
		  #ifdef DEBUG_TOTAL_FLOW 
		  _uart_print(1,1,strSend);
		  #endif
	 }
	 //TotalizerDigit
	 sprintf_P(strSend,PSTR("%d"),PumpTotalDigit);
    18da:	00 d0       	rcall	.+0      	; 0x18dc <SendTotalizerFlow+0x166>
    18dc:	00 d0       	rcall	.+0      	; 0x18de <SendTotalizerFlow+0x168>
    18de:	00 d0       	rcall	.+0      	; 0x18e0 <SendTotalizerFlow+0x16a>
    18e0:	ed b7       	in	r30, 0x3d	; 61
    18e2:	fe b7       	in	r31, 0x3e	; 62
    18e4:	31 96       	adiw	r30, 0x01	; 1
    18e6:	ad b7       	in	r26, 0x3d	; 61
    18e8:	be b7       	in	r27, 0x3e	; 62
    18ea:	11 96       	adiw	r26, 0x01	; 1
    18ec:	9c 92       	st	X, r9
    18ee:	11 97       	sbiw	r26, 0x01	; 1
    18f0:	12 96       	adiw	r26, 0x02	; 2
    18f2:	8c 92       	st	X, r8
    18f4:	88 e3       	ldi	r24, 0x38	; 56
    18f6:	91 e0       	ldi	r25, 0x01	; 1
    18f8:	93 83       	std	Z+3, r25	; 0x03
    18fa:	82 83       	std	Z+2, r24	; 0x02
    18fc:	80 91 0c 01 	lds	r24, 0x010C
    1900:	84 83       	std	Z+4, r24	; 0x04
    1902:	15 82       	std	Z+5, r1	; 0x05
    1904:	0e 94 ae 18 	call	0x315c	; 0x315c <sprintf_P>
     SendStrSPI(strSend);
    1908:	ed b7       	in	r30, 0x3d	; 61
    190a:	fe b7       	in	r31, 0x3e	; 62
    190c:	36 96       	adiw	r30, 0x06	; 6
    190e:	0f b6       	in	r0, 0x3f	; 63
    1910:	f8 94       	cli
    1912:	fe bf       	out	0x3e, r31	; 62
    1914:	0f be       	out	0x3f, r0	; 63
    1916:	ed bf       	out	0x3d, r30	; 61
    1918:	89 2d       	mov	r24, r9
    191a:	98 2d       	mov	r25, r8
    191c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <SendStrSPI>
	sbi(DDRD,2);sbi(PORTD,2);//128-SS HIGH
	//_delay_ms(10);
}

void SendSPI(char xSPI){
     _spi(xSPI);
    1920:	86 e0       	ldi	r24, 0x06	; 6
    1922:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <_spi>
	 sprintf_P(strSend,PSTR("%d"),PumpTotalDigit);
     SendStrSPI(strSend);

	 SendSPI(0x06);//ETX
	 SendSPI(0x60);//ETX
	 systemSlave();
    1926:	80 e6       	ldi	r24, 0x60	; 96
    1928:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <_spi>
    192c:	0e 94 ae 06 	call	0xd5c	; 0xd5c <systemSlave>
    1930:	8a ef       	ldi	r24, 0xFA	; 250
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	01 97       	sbiw	r24, 0x01	; 1
    1936:	f1 f7       	brne	.-4      	; 0x1934 <SendTotalizerFlow+0x1be>
	 _delay_ms(1);//DelayProses
}
    1938:	a8 96       	adiw	r28, 0x28	; 40
    193a:	0f b6       	in	r0, 0x3f	; 63
    193c:	f8 94       	cli
    193e:	de bf       	out	0x3e, r29	; 62
    1940:	0f be       	out	0x3f, r0	; 63
    1942:	cd bf       	out	0x3d, r28	; 61
    1944:	cf 91       	pop	r28
    1946:	df 91       	pop	r29
    1948:	1f 91       	pop	r17
    194a:	0f 91       	pop	r16
    194c:	ff 90       	pop	r15
    194e:	ef 90       	pop	r14
    1950:	df 90       	pop	r13
    1952:	cf 90       	pop	r12
    1954:	bf 90       	pop	r11
    1956:	af 90       	pop	r10
    1958:	9f 90       	pop	r9
    195a:	8f 90       	pop	r8
    195c:	7f 90       	pop	r7
    195e:	6f 90       	pop	r6
    1960:	5f 90       	pop	r5
    1962:	4f 90       	pop	r4
    1964:	08 95       	ret

00001966 <SendTransFlow>:
	 SendSPI(0x08);//ETX

	 systemSlave();
}

void SendTransFlow(char xPumpID, char rxPumpId,char xNozzleID,char xProductID, char *sUnitPrice, char *sVolume,char * sAmount,char TransDigit){
    1966:	6f 92       	push	r6
    1968:	7f 92       	push	r7
    196a:	8f 92       	push	r8
    196c:	9f 92       	push	r9
    196e:	af 92       	push	r10
    1970:	bf 92       	push	r11
    1972:	cf 92       	push	r12
    1974:	df 92       	push	r13
    1976:	ef 92       	push	r14
    1978:	ff 92       	push	r15
    197a:	0f 93       	push	r16
    197c:	1f 93       	push	r17
    197e:	df 93       	push	r29
    1980:	cf 93       	push	r28
    1982:	cd b7       	in	r28, 0x3d	; 61
    1984:	de b7       	in	r29, 0x3e	; 62
    1986:	6e 97       	sbiw	r28, 0x1e	; 30
    1988:	0f b6       	in	r0, 0x3f	; 63
    198a:	f8 94       	cli
    198c:	de bf       	out	0x3e, r29	; 62
    198e:	0f be       	out	0x3f, r0	; 63
    1990:	cd bf       	out	0x3d, r28	; 61
    1992:	68 2e       	mov	r6, r24
    1994:	b4 2e       	mov	r11, r20
    1996:	72 2e       	mov	r7, r18
    1998:	48 01       	movw	r8, r16
     char i,xNozzle,xPrd,xPump,strSend[30];

	                         //  [0x50,0x05]  01       01       1        3       004500   00000200  00000000 [0x06,0x60] = 24
	 //Sending FlowSPI_Protocol     <STX>   [MsgID][PumpID][Nozzle][ProductID][UnitPrice][Volume][Amount] <ETX>
	 AddZeroLead(sUnitPrice,6);//         Wyne    01 02 2 0 004600 00000254 00011684
    199a:	c8 01       	movw	r24, r16
    199c:	66 e0       	ldi	r22, 0x06	; 6
    199e:	0e 94 e7 03 	call	0x7ce	; 0x7ce <AddZeroLead>
     AddZeroLead(sVolume,8);
    19a2:	c7 01       	movw	r24, r14
    19a4:	68 e0       	ldi	r22, 0x08	; 8
    19a6:	0e 94 e7 03 	call	0x7ce	; 0x7ce <AddZeroLead>
     AddZeroLead(sAmount,8);
    19aa:	c6 01       	movw	r24, r12
    19ac:	68 e0       	ldi	r22, 0x08	; 8
    19ae:	0e 94 e7 03 	call	0x7ce	; 0x7ce <AddZeroLead>
	 
	 if (xNozzleID>=4)xNozzle=4;
    19b2:	83 e0       	ldi	r24, 0x03	; 3
    19b4:	8b 15       	cp	r24, r11
    19b6:	10 f0       	brcs	.+4      	; 0x19bc <SendTransFlow+0x56>
    19b8:	4b 2d       	mov	r20, r11
    19ba:	01 c0       	rjmp	.+2      	; 0x19be <SendTransFlow+0x58>
    19bc:	44 e0       	ldi	r20, 0x04	; 4
	 else xNozzle=xNozzleID;
	 
	 if (xProductID>=4)xPrd=4;
    19be:	93 e0       	ldi	r25, 0x03	; 3
    19c0:	97 15       	cp	r25, r7
    19c2:	10 f0       	brcs	.+4      	; 0x19c8 <SendTransFlow+0x62>
    19c4:	27 2d       	mov	r18, r7
    19c6:	01 c0       	rjmp	.+2      	; 0x19ca <SendTransFlow+0x64>
    19c8:	24 e0       	ldi	r18, 0x04	; 4
	 else xPrd=xProductID;

	 if (xPumpID>=16)xPump=16;
    19ca:	af e0       	ldi	r26, 0x0F	; 15
    19cc:	a6 15       	cp	r26, r6
    19ce:	10 f0       	brcs	.+4      	; 0x19d4 <SendTransFlow+0x6e>
    19d0:	36 2d       	mov	r19, r6
    19d2:	01 c0       	rjmp	.+2      	; 0x19d6 <SendTransFlow+0x70>
    19d4:	30 e1       	ldi	r19, 0x10	; 16
	 else xPump=xPumpID;

	 sprintf_P(strSend,PSTR("01%.2d%.1d%.1d%s%s%s"),xPump,xNozzle,xPrd,sUnitPrice,sVolume,sAmount);
    19d6:	8d b7       	in	r24, 0x3d	; 61
    19d8:	9e b7       	in	r25, 0x3e	; 62
    19da:	40 97       	sbiw	r24, 0x10	; 16
    19dc:	0f b6       	in	r0, 0x3f	; 63
    19de:	f8 94       	cli
    19e0:	9e bf       	out	0x3e, r25	; 62
    19e2:	0f be       	out	0x3f, r0	; 63
    19e4:	8d bf       	out	0x3d, r24	; 61
    19e6:	ed b7       	in	r30, 0x3d	; 61
    19e8:	fe b7       	in	r31, 0x3e	; 62
    19ea:	31 96       	adiw	r30, 0x01	; 1
    19ec:	8e 01       	movw	r16, r28
    19ee:	0f 5f       	subi	r16, 0xFF	; 255
    19f0:	1f 4f       	sbci	r17, 0xFF	; 255
    19f2:	ad b7       	in	r26, 0x3d	; 61
    19f4:	be b7       	in	r27, 0x3e	; 62
    19f6:	12 96       	adiw	r26, 0x02	; 2
    19f8:	1c 93       	st	X, r17
    19fa:	0e 93       	st	-X, r16
    19fc:	11 97       	sbiw	r26, 0x01	; 1
    19fe:	8a e4       	ldi	r24, 0x4A	; 74
    1a00:	91 e0       	ldi	r25, 0x01	; 1
    1a02:	93 83       	std	Z+3, r25	; 0x03
    1a04:	82 83       	std	Z+2, r24	; 0x02
    1a06:	34 83       	std	Z+4, r19	; 0x04
    1a08:	15 82       	std	Z+5, r1	; 0x05
    1a0a:	46 83       	std	Z+6, r20	; 0x06
    1a0c:	17 82       	std	Z+7, r1	; 0x07
    1a0e:	20 87       	std	Z+8, r18	; 0x08
    1a10:	11 86       	std	Z+9, r1	; 0x09
    1a12:	93 86       	std	Z+11, r9	; 0x0b
    1a14:	82 86       	std	Z+10, r8	; 0x0a
    1a16:	f5 86       	std	Z+13, r15	; 0x0d
    1a18:	e4 86       	std	Z+12, r14	; 0x0c
    1a1a:	d7 86       	std	Z+15, r13	; 0x0f
    1a1c:	c6 86       	std	Z+14, r12	; 0x0e
    1a1e:	0e 94 ae 18 	call	0x315c	; 0x315c <sprintf_P>
	 systemMaster();
    1a22:	8d b7       	in	r24, 0x3d	; 61
    1a24:	9e b7       	in	r25, 0x3e	; 62
    1a26:	40 96       	adiw	r24, 0x10	; 16
    1a28:	0f b6       	in	r0, 0x3f	; 63
    1a2a:	f8 94       	cli
    1a2c:	9e bf       	out	0x3e, r25	; 62
    1a2e:	0f be       	out	0x3f, r0	; 63
    1a30:	8d bf       	out	0x3d, r24	; 61
    1a32:	0e 94 bb 06 	call	0xd76	; 0xd76 <systemMaster>
	sbi(DDRD,2);sbi(PORTD,2);//128-SS HIGH
	//_delay_ms(10);
}

void SendSPI(char xSPI){
     _spi(xSPI);
    1a36:	85 e0       	ldi	r24, 0x05	; 5
    1a38:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <_spi>

	 sprintf_P(strSend,PSTR("01%.2d%.1d%.1d%s%s%s"),xPump,xNozzle,xPrd,sUnitPrice,sVolume,sAmount);
	 systemMaster();
	 SendSPI(0x05);//STX
	 SendSPI(0x50);//STX
	 for(i=0;i<strlen(strSend);i++){
    1a3c:	80 e5       	ldi	r24, 0x50	; 80
    1a3e:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <_spi>
    1a42:	ff 24       	eor	r15, r15
    1a44:	06 c0       	rjmp	.+12     	; 0x1a52 <SendTransFlow+0xec>
    1a46:	a0 0f       	add	r26, r16
    1a48:	b1 1f       	adc	r27, r17
    1a4a:	8c 91       	ld	r24, X
    1a4c:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <_spi>
    1a50:	f3 94       	inc	r15
    1a52:	f8 01       	movw	r30, r16
    1a54:	01 90       	ld	r0, Z+
    1a56:	00 20       	and	r0, r0
    1a58:	e9 f7       	brne	.-6      	; 0x1a54 <SendTransFlow+0xee>
    1a5a:	31 97       	sbiw	r30, 0x01	; 1
    1a5c:	e0 1b       	sub	r30, r16
    1a5e:	f1 0b       	sbc	r31, r17
    1a60:	af 2d       	mov	r26, r15
    1a62:	b0 e0       	ldi	r27, 0x00	; 0
    1a64:	ae 17       	cp	r26, r30
    1a66:	bf 07       	cpc	r27, r31
    1a68:	70 f3       	brcs	.-36     	; 0x1a46 <SendTransFlow+0xe0>
		 #ifdef DEBUG_TRANS_FLOW 
		 _uart(1,1,strSend[i]);
		 #endif
	 }
	 //TransDigit
	 sprintf_P(strSend,PSTR("%d"),TransDigit);
    1a6a:	00 d0       	rcall	.+0      	; 0x1a6c <SendTransFlow+0x106>
    1a6c:	00 d0       	rcall	.+0      	; 0x1a6e <SendTransFlow+0x108>
    1a6e:	00 d0       	rcall	.+0      	; 0x1a70 <SendTransFlow+0x10a>
    1a70:	ed b7       	in	r30, 0x3d	; 61
    1a72:	fe b7       	in	r31, 0x3e	; 62
    1a74:	31 96       	adiw	r30, 0x01	; 1
    1a76:	ad b7       	in	r26, 0x3d	; 61
    1a78:	be b7       	in	r27, 0x3e	; 62
    1a7a:	12 96       	adiw	r26, 0x02	; 2
    1a7c:	1c 93       	st	X, r17
    1a7e:	0e 93       	st	-X, r16
    1a80:	11 97       	sbiw	r26, 0x01	; 1
    1a82:	87 e4       	ldi	r24, 0x47	; 71
    1a84:	91 e0       	ldi	r25, 0x01	; 1
    1a86:	93 83       	std	Z+3, r25	; 0x03
    1a88:	82 83       	std	Z+2, r24	; 0x02
    1a8a:	a4 82       	std	Z+4, r10	; 0x04
    1a8c:	15 82       	std	Z+5, r1	; 0x05
    1a8e:	0e 94 ae 18 	call	0x315c	; 0x315c <sprintf_P>
     SendStrSPI(strSend);
    1a92:	8d b7       	in	r24, 0x3d	; 61
    1a94:	9e b7       	in	r25, 0x3e	; 62
    1a96:	06 96       	adiw	r24, 0x06	; 6
    1a98:	0f b6       	in	r0, 0x3f	; 63
    1a9a:	f8 94       	cli
    1a9c:	9e bf       	out	0x3e, r25	; 62
    1a9e:	0f be       	out	0x3f, r0	; 63
    1aa0:	8d bf       	out	0x3d, r24	; 61
    1aa2:	c8 01       	movw	r24, r16
    1aa4:	0e 94 8e 06 	call	0xd1c	; 0xd1c <SendStrSPI>
	sbi(DDRD,2);sbi(PORTD,2);//128-SS HIGH
	//_delay_ms(10);
}

void SendSPI(char xSPI){
     _spi(xSPI);
    1aa8:	86 e0       	ldi	r24, 0x06	; 6
    1aaa:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <_spi>
	 sprintf_P(strSend,PSTR("%d"),TransDigit);
     SendStrSPI(strSend);

	 SendSPI(0x06);//ETX
	 SendSPI(0x60);//ETX
	 systemSlave();
    1aae:	80 e6       	ldi	r24, 0x60	; 96
    1ab0:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <_spi>
    1ab4:	0e 94 ae 06 	call	0xd5c	; 0xd5c <systemSlave>
}
    1ab8:	6e 96       	adiw	r28, 0x1e	; 30
    1aba:	0f b6       	in	r0, 0x3f	; 63
    1abc:	f8 94       	cli
    1abe:	de bf       	out	0x3e, r29	; 62
    1ac0:	0f be       	out	0x3f, r0	; 63
    1ac2:	cd bf       	out	0x3d, r28	; 61
    1ac4:	cf 91       	pop	r28
    1ac6:	df 91       	pop	r29
    1ac8:	1f 91       	pop	r17
    1aca:	0f 91       	pop	r16
    1acc:	ff 90       	pop	r15
    1ace:	ef 90       	pop	r14
    1ad0:	df 90       	pop	r13
    1ad2:	cf 90       	pop	r12
    1ad4:	bf 90       	pop	r11
    1ad6:	af 90       	pop	r10
    1ad8:	9f 90       	pop	r9
    1ada:	8f 90       	pop	r8
    1adc:	7f 90       	pop	r7
    1ade:	6f 90       	pop	r6
    1ae0:	08 95       	ret

00001ae2 <FPoolingPump>:
		  //stPoolingPump=pwInitPumpAddr;
	      break;
	 }
}

void FPoolingPump(){//DefPoolTimeout,DefDelayNextPump
    1ae2:	af 92       	push	r10
    1ae4:	cf 92       	push	r12
    1ae6:	df 92       	push	r13
    1ae8:	ef 92       	push	r14
    1aea:	ff 92       	push	r15
    1aec:	0f 93       	push	r16
    1aee:	1f 93       	push	r17
//static char txPumpID=0,StatusPump,iSend,nSend,PumpAddr=1,nNoPump,ScanPumpMax,IsNoPump=True,TPoolTimeout,TDelayNextPump;
       char CurrentAmount[15];
	   char strSend[20];

     //Monitoring
	 if (zPooling!=stPoolingPump){
    1af0:	60 91 2c 01 	lds	r22, 0x012C
    1af4:	80 91 2d 01 	lds	r24, 0x012D
    1af8:	86 17       	cp	r24, r22
    1afa:	11 f0       	breq	.+4      	; 0x1b00 <FPoolingPump+0x1e>
	     zPooling=stPoolingPump;
    1afc:	60 93 2d 01 	sts	0x012D, r22
         sprintf_P(strSend,PSTR("GPool:%d"),stPoolingPump);
	 	 _uart_print(1,1,strSend);
		 #endif
	 }
     
	 if (IsRestartPooling==True){
    1b00:	80 91 03 01 	lds	r24, 0x0103
    1b04:	81 30       	cpi	r24, 0x01	; 1
    1b06:	69 f4       	brne	.+26     	; 0x1b22 <FPoolingPump+0x40>
	     IsRestartPooling=False;
    1b08:	10 92 03 01 	sts	0x0103, r1
		 SendCommandAcknoledge(SC_POOL_RESTARTED,stPoolingPump);
    1b0c:	8a e1       	ldi	r24, 0x1A	; 26
    1b0e:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <SendCommandAcknoledge>
		 _uart_printf(1,1,PSTR("PoolRestarted"));
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	61 e0       	ldi	r22, 0x01	; 1
    1b16:	4a e6       	ldi	r20, 0x6A	; 106
    1b18:	51 e0       	ldi	r21, 0x01	; 1
    1b1a:	0e 94 85 18 	call	0x310a	; 0x310a <_uart_printf>
	     stPoolingPump=ppInit;
    1b1e:	10 92 2c 01 	sts	0x012C, r1
	 }
	 switch(stPoolingPump){
    1b22:	80 91 2c 01 	lds	r24, 0x012C
    1b26:	e8 2f       	mov	r30, r24
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	e1 32       	cpi	r30, 0x21	; 33
    1b2c:	f1 05       	cpc	r31, r1
    1b2e:	08 f0       	brcs	.+2      	; 0x1b32 <FPoolingPump+0x50>
    1b30:	d4 c2       	rjmp	.+1448   	; 0x20da <FPoolingPump+0x5f8>
    1b32:	e8 5c       	subi	r30, 0xC8	; 200
    1b34:	ff 4f       	sbci	r31, 0xFF	; 255
    1b36:	ee 0f       	add	r30, r30
    1b38:	ff 1f       	adc	r31, r31
    1b3a:	05 90       	lpm	r0, Z+
    1b3c:	f4 91       	lpm	r31, Z+
    1b3e:	e0 2d       	mov	r30, r0
    1b40:	09 94       	ijmp
	 case ppInit:
	      //StatePrintf(PSTR("1"));
	      //txPumpID=1;
		  iPoolingID=0;
    1b42:	10 92 16 01 	sts	0x0116, r1
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1b46:	e1 99       	sbic	0x1c, 1	; 28
    1b48:	fe cf       	rjmp	.-4      	; 0x1b46 <FPoolingPump+0x64>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    1b4a:	8d e0       	ldi	r24, 0x0D	; 13
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	9f bb       	out	0x1f, r25	; 31
    1b50:	8e bb       	out	0x1e, r24	; 30
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
    1b52:	e0 9a       	sbi	0x1c, 0	; 28
    1b54:	8d b3       	in	r24, 0x1d	; 29
		  txPumpID=eeprom_read_byte(&DefPumpID[iPoolingID]);
    1b56:	80 93 17 01 	sts	0x0117, r24

		  iSend=0;
    1b5a:	10 92 f9 03 	sts	0x03F9, r1
		  TimSend=0;          
    1b5e:	10 92 24 04 	sts	0x0424, r1
    1b62:	10 92 23 04 	sts	0x0423, r1
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1b66:	e1 99       	sbic	0x1c, 1	; 28
    1b68:	fe cf       	rjmp	.-4      	; 0x1b66 <FPoolingPump+0x84>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    1b6a:	88 e0       	ldi	r24, 0x08	; 8
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	9f bb       	out	0x1f, r25	; 31
    1b70:	8e bb       	out	0x1e, r24	; 30
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
    1b72:	e0 9a       	sbi	0x1c, 0	; 28
    1b74:	8d b3       	in	r24, 0x1d	; 29
		  nNoPump=eeprom_read_byte(&DefNoPumpCountMax);
    1b76:	80 93 35 04 	sts	0x0435, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1b7a:	e1 99       	sbic	0x1c, 1	; 28
    1b7c:	fe cf       	rjmp	.-4      	; 0x1b7a <FPoolingPump+0x98>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    1b7e:	87 e0       	ldi	r24, 0x07	; 7
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	9f bb       	out	0x1f, r25	; 31
    1b84:	8e bb       	out	0x1e, r24	; 30
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
    1b86:	e0 9a       	sbi	0x1c, 0	; 28
    1b88:	8d b3       	in	r24, 0x1d	; 29
		  ScanPumpMax=eeprom_read_byte(&DefMaxPumpPooling);
    1b8a:	80 93 61 02 	sts	0x0261, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1b8e:	e1 99       	sbic	0x1c, 1	; 28
    1b90:	fe cf       	rjmp	.-4      	; 0x1b8e <FPoolingPump+0xac>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    1b92:	89 e0       	ldi	r24, 0x09	; 9
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	9f bb       	out	0x1f, r25	; 31
    1b98:	8e bb       	out	0x1e, r24	; 30
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
    1b9a:	e0 9a       	sbi	0x1c, 0	; 28
    1b9c:	8d b3       	in	r24, 0x1d	; 29
		  nSend=eeprom_read_byte(&DefSendCount);
    1b9e:	80 93 77 02 	sts	0x0277, r24
		  if (IsStopPoolSequence!=True)
    1ba2:	80 91 13 01 	lds	r24, 0x0113
    1ba6:	81 30       	cpi	r24, 0x01	; 1
    1ba8:	29 f0       	breq	.+10     	; 0x1bb4 <FPoolingPump+0xd2>
              SendCommandAcknoledge(SC_LIVE_SEQUENCE,SequencePool);
    1baa:	89 e1       	ldi	r24, 0x19	; 25
    1bac:	60 91 26 01 	lds	r22, 0x0126
    1bb0:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <SendCommandAcknoledge>
          SequencePool++;
    1bb4:	80 91 26 01 	lds	r24, 0x0126
    1bb8:	8f 5f       	subi	r24, 0xFF	; 255
    1bba:	80 93 26 01 	sts	0x0126, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1bbe:	e1 99       	sbic	0x1c, 1	; 28
    1bc0:	fe cf       	rjmp	.-4      	; 0x1bbe <FPoolingPump+0xdc>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    1bc2:	8a e0       	ldi	r24, 0x0A	; 10
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	9f bb       	out	0x1f, r25	; 31
    1bc8:	8e bb       	out	0x1e, r24	; 30
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
    1bca:	e0 9a       	sbi	0x1c, 0	; 28
    1bcc:	8d b3       	in	r24, 0x1d	; 29
		  TPoolTimeout=eeprom_read_byte(&DefPoolTimeout);
    1bce:	80 93 b6 02 	sts	0x02B6, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1bd2:	e1 99       	sbic	0x1c, 1	; 28
    1bd4:	fe cf       	rjmp	.-4      	; 0x1bd2 <FPoolingPump+0xf0>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    1bd6:	8b e0       	ldi	r24, 0x0B	; 11
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	9f bb       	out	0x1f, r25	; 31
    1bdc:	8e bb       	out	0x1e, r24	; 30
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
    1bde:	e0 9a       	sbi	0x1c, 0	; 28
    1be0:	8d b3       	in	r24, 0x1d	; 29
		  TDelayNextPump=eeprom_read_byte(&DefDelayNextPump);		  
    1be2:	80 93 3c 01 	sts	0x013C, r24
    1be6:	1e c0       	rjmp	.+60     	; 0x1c24 <FPoolingPump+0x142>
		  stPoolingPump=ppGetStatus;
	      break;
     case ppNextPump:
          iPoolingID++;
    1be8:	90 91 16 01 	lds	r25, 0x0116
    1bec:	9f 5f       	subi	r25, 0xFF	; 255
    1bee:	90 93 16 01 	sts	0x0116, r25
	      if (iPoolingID<ScanPumpMax){
    1bf2:	80 91 61 02 	lds	r24, 0x0261
    1bf6:	98 17       	cp	r25, r24
    1bf8:	b8 f4       	brcc	.+46     	; 0x1c28 <FPoolingPump+0x146>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    1bfa:	e1 99       	sbic	0x1c, 1	; 28
    1bfc:	fe cf       	rjmp	.-4      	; 0x1bfa <FPoolingPump+0x118>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    1bfe:	89 2f       	mov	r24, r25
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	83 5f       	subi	r24, 0xF3	; 243
    1c04:	9f 4f       	sbci	r25, 0xFF	; 255
    1c06:	9f bb       	out	0x1f, r25	; 31
    1c08:	8e bb       	out	0x1e, r24	; 30
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
    1c0a:	e0 9a       	sbi	0x1c, 0	; 28
    1c0c:	8d b3       	in	r24, 0x1d	; 29
			  txPumpID=eeprom_read_byte(&DefPumpID[iPoolingID]);
    1c0e:	80 93 17 01 	sts	0x0117, r24
			  if (txPumpID>0){			      
    1c12:	88 23       	and	r24, r24
    1c14:	09 f4       	brne	.+2      	; 0x1c18 <FPoolingPump+0x136>
    1c16:	09 c2       	rjmp	.+1042   	; 0x202a <FPoolingPump+0x548>
			      iSend=0;TimSend=0;
    1c18:	10 92 f9 03 	sts	0x03F9, r1
    1c1c:	10 92 24 04 	sts	0x0424, r1
    1c20:	10 92 23 04 	sts	0x0423, r1
			      stPoolingPump=ppGetStatus;
    1c24:	82 e0       	ldi	r24, 0x02	; 2
    1c26:	57 c2       	rjmp	.+1198   	; 0x20d6 <FPoolingPump+0x5f4>
			   }else stPoolingPump=ppNextPump;
		  }else stPoolingPump=ppInit;
    1c28:	10 92 2c 01 	sts	0x012C, r1
    1c2c:	56 c2       	rjmp	.+1196   	; 0x20da <FPoolingPump+0x5f8>
           sprintf_P(strSend,PSTR("TxPumpID:%d"),txPumpID);
	 	   _uart_print(1,1,strSend);
		  #endif

          //StatePrintf(PSTR("3"));
	      IsStatusReceived=False;
    1c2e:	10 92 0f 01 	sts	0x010F, r1
		  IsNoPump=False;
    1c32:	10 92 06 01 	sts	0x0106, r1
	 }
	 zDataBuffer[0]=data;
}

void SetReceiveLine(char RecLine){
     stReceiveCom0=RecLine;
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	80 93 04 01 	sts	0x0104, r24
		  IsNoPump=False;
		  SetReceiveLine(rcIdle);
		  stPoolingPump=ppWaitIdle;
     case ppWaitIdle:
          //StatePrintf(PSTR("4"));
	      if (GetReceiveLine()==rcIdle)
    1c3c:	80 91 04 01 	lds	r24, 0x0104
    1c40:	81 30       	cpi	r24, 0x01	; 1
    1c42:	81 f7       	brne	.-32     	; 0x1c24 <FPoolingPump+0x142>
		      stPoolingPump=ppSendStatusRequest;
    1c44:	84 e0       	ldi	r24, 0x04	; 4
    1c46:	47 c2       	rjmp	.+1166   	; 0x20d6 <FPoolingPump+0x5f4>
          else stPoolingPump=ppGetStatus;
	      break;
     case ppSendStatusRequest:
          //StatePrintf(PSTR("5"));
	      PumpCommand(txPumpID,CMD_STATUS);
    1c48:	80 91 17 01 	lds	r24, 0x0117
    1c4c:	60 e0       	ldi	r22, 0x00	; 0
    1c4e:	0e 94 69 07 	call	0xed2	; 0xed2 <PumpCommand>
		  TimSend=0;
    1c52:	10 92 24 04 	sts	0x0424, r1
    1c56:	10 92 23 04 	sts	0x0423, r1
          stPoolingPump=ppWaitReplyStatus;
    1c5a:	86 e0       	ldi	r24, 0x06	; 6
    1c5c:	3c c2       	rjmp	.+1144   	; 0x20d6 <FPoolingPump+0x5f4>
	      break;
     case ppNoPump:
          NoPumpCount[txPumpID&0x0F]++;
    1c5e:	80 91 17 01 	lds	r24, 0x0117
    1c62:	e8 2f       	mov	r30, r24
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	ef 70       	andi	r30, 0x0F	; 15
    1c68:	f0 70       	andi	r31, 0x00	; 0
    1c6a:	eb 5d       	subi	r30, 0xDB	; 219
    1c6c:	fb 4f       	sbci	r31, 0xFB	; 251
    1c6e:	80 81       	ld	r24, Z
    1c70:	8f 5f       	subi	r24, 0xFF	; 255
    1c72:	80 83       	st	Z, r24
		  if (NoPumpCount[txPumpID&0x0F]>nNoPump){
    1c74:	90 91 35 04 	lds	r25, 0x0435
    1c78:	98 17       	cp	r25, r24
    1c7a:	08 f0       	brcs	.+2      	; 0x1c7e <FPoolingPump+0x19c>
    1c7c:	c5 c0       	rjmp	.+394    	; 0x1e08 <FPoolingPump+0x326>
		      NoPumpCount[txPumpID&0x0F]=0;
    1c7e:	10 82       	st	Z, r1
	          IsNoPump=True;
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	80 93 06 01 	sts	0x0106, r24
    1c86:	07 c1       	rjmp	.+526    	; 0x1e96 <FPoolingPump+0x3b4>
			  }
          else stPoolingPump=ppInitDelayNextPump;
	      break;
     case ppWaitReplyStatus:	      
          //StatePrintf(PSTR("7"));
          if (TimSend>TPoolTimeout){//TPoolTimeout
    1c88:	80 91 b6 02 	lds	r24, 0x02B6
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	20 91 23 04 	lds	r18, 0x0423
    1c92:	30 91 24 04 	lds	r19, 0x0424
    1c96:	82 17       	cp	r24, r18
    1c98:	93 07       	cpc	r25, r19
    1c9a:	80 f4       	brcc	.+32     	; 0x1cbc <FPoolingPump+0x1da>
		      iSend++;
    1c9c:	80 91 f9 03 	lds	r24, 0x03F9
    1ca0:	8f 5f       	subi	r24, 0xFF	; 255
    1ca2:	80 93 f9 03 	sts	0x03F9, r24
		      if (iSend<nSend)stPoolingPump=ppGetStatus;
    1ca6:	90 91 77 02 	lds	r25, 0x0277
    1caa:	89 17       	cp	r24, r25
    1cac:	10 f4       	brcc	.+4      	; 0x1cb2 <FPoolingPump+0x1d0>
    1cae:	82 e0       	ldi	r24, 0x02	; 2
    1cb0:	03 c0       	rjmp	.+6      	; 0x1cb8 <FPoolingPump+0x1d6>
			  else
		      if (iSend>nSend)stPoolingPump=ppNoPump;//Pump Not Available
    1cb2:	98 17       	cp	r25, r24
    1cb4:	18 f4       	brcc	.+6      	; 0x1cbc <FPoolingPump+0x1da>
    1cb6:	85 e0       	ldi	r24, 0x05	; 5
    1cb8:	80 93 2c 01 	sts	0x012C, r24
		  }
          if (IsStatusReceived==True){
    1cbc:	80 91 0f 01 	lds	r24, 0x010F
    1cc0:	81 30       	cpi	r24, 0x01	; 1
    1cc2:	09 f0       	breq	.+2      	; 0x1cc6 <FPoolingPump+0x1e4>
    1cc4:	0a c2       	rjmp	.+1044   	; 0x20da <FPoolingPump+0x5f8>
		      if ((txPumpID&0x0F)==PumpID){
    1cc6:	40 91 0e 01 	lds	r20, 0x010E
    1cca:	80 91 17 01 	lds	r24, 0x0117
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	8f 70       	andi	r24, 0x0F	; 15
    1cd2:	90 70       	andi	r25, 0x00	; 0
    1cd4:	24 2f       	mov	r18, r20
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	82 17       	cp	r24, r18
    1cda:	93 07       	cpc	r25, r19
    1cdc:	11 f4       	brne	.+4      	; 0x1ce2 <FPoolingPump+0x200>
			      stPoolingPump=ppUpdatePumpStatus;
    1cde:	87 e0       	ldi	r24, 0x07	; 7
    1ce0:	01 c0       	rjmp	.+2      	; 0x1ce4 <FPoolingPump+0x202>
			  }else stPoolingPump=ppDifferentPumpID;
    1ce2:	89 e0       	ldi	r24, 0x09	; 9
    1ce4:	80 93 2c 01 	sts	0x012C, r24

			  if ((CMDResponse==0x0F)&&(PumpID==0x0F)&&(iSend<nSend)){
    1ce8:	80 91 8d 01 	lds	r24, 0x018D
    1cec:	8f 30       	cpi	r24, 0x0F	; 15
    1cee:	09 f0       	breq	.+2      	; 0x1cf2 <FPoolingPump+0x210>
    1cf0:	f4 c1       	rjmp	.+1000   	; 0x20da <FPoolingPump+0x5f8>
    1cf2:	4f 30       	cpi	r20, 0x0F	; 15
    1cf4:	09 f0       	breq	.+2      	; 0x1cf8 <FPoolingPump+0x216>
    1cf6:	f1 c1       	rjmp	.+994    	; 0x20da <FPoolingPump+0x5f8>
    1cf8:	90 91 f9 03 	lds	r25, 0x03F9
    1cfc:	80 91 77 02 	lds	r24, 0x0277
    1d00:	98 17       	cp	r25, r24
    1d02:	08 f0       	brcs	.+2      	; 0x1d06 <FPoolingPump+0x224>
    1d04:	ea c1       	rjmp	.+980    	; 0x20da <FPoolingPump+0x5f8>
    1d06:	8e cf       	rjmp	.-228    	; 0x1c24 <FPoolingPump+0x142>
          stPoolingPump=ppNoPump;
	      break;
		                     //PumpStatus[1..0]= FEDCBA98 76543210
     case ppUpdatePumpStatus://                = 
          //StatePrintf(PSTR("9"));
	      PumpAddr=(txPumpID&0x0F);
    1d08:	90 91 17 01 	lds	r25, 0x0117
    1d0c:	9f 70       	andi	r25, 0x0F	; 15
    1d0e:	90 93 05 01 	sts	0x0105, r25
		  if (IsNoPump==False)PumpStatus[PumpAddr]=CMDResponse;
    1d12:	80 91 06 01 	lds	r24, 0x0106
    1d16:	88 23       	and	r24, r24
    1d18:	39 f4       	brne	.+14     	; 0x1d28 <FPoolingPump+0x246>
    1d1a:	e9 2f       	mov	r30, r25
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	eb 54       	subi	r30, 0x4B	; 75
    1d20:	fc 4f       	sbci	r31, 0xFC	; 252
    1d22:	80 91 8d 01 	lds	r24, 0x018D
    1d26:	07 c0       	rjmp	.+14     	; 0x1d36 <FPoolingPump+0x254>
		  else 
		  if (IsNoPump==True)PumpStatus[PumpAddr]=PUMP_NONE;
    1d28:	81 30       	cpi	r24, 0x01	; 1
    1d2a:	31 f4       	brne	.+12     	; 0x1d38 <FPoolingPump+0x256>
    1d2c:	e9 2f       	mov	r30, r25
    1d2e:	f0 e0       	ldi	r31, 0x00	; 0
    1d30:	eb 54       	subi	r30, 0x4B	; 75
    1d32:	fc 4f       	sbci	r31, 0xFC	; 252
    1d34:	8e e0       	ldi	r24, 0x0E	; 14
    1d36:	80 83       	st	Z, r24
          
		  //SendIfUpdated
		  if (PumpStatus[PumpAddr]!=zPumpStatus[PumpAddr]){
    1d38:	89 2f       	mov	r24, r25
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	fc 01       	movw	r30, r24
    1d3e:	eb 54       	subi	r30, 0x4B	; 75
    1d40:	fc 4f       	sbci	r31, 0xFC	; 252
    1d42:	20 81       	ld	r18, Z
    1d44:	fc 01       	movw	r30, r24
    1d46:	e5 56       	subi	r30, 0x65	; 101
    1d48:	fd 4f       	sbci	r31, 0xFD	; 253
    1d4a:	80 81       	ld	r24, Z
    1d4c:	28 17       	cp	r18, r24
    1d4e:	79 f0       	breq	.+30     	; 0x1d6e <FPoolingPump+0x28c>
		      zPumpStatus[PumpAddr]=PumpStatus[PumpAddr];
    1d50:	20 83       	st	Z, r18
		      stPoolingPump=ppSendPumpStatus;
    1d52:	87 e1       	ldi	r24, 0x17	; 23
    1d54:	c0 c1       	rjmp	.+896    	; 0x20d6 <FPoolingPump+0x5f4>
		  }else stPoolingPump=ppScanResponse;
          break;
     case ppSendPumpStatus://UpdatePumpStatusToMaster;
          //StatePrintf(PSTR("10"));
	      PumpAddr=(txPumpID&0x0F);
    1d56:	80 91 17 01 	lds	r24, 0x0117
    1d5a:	e8 2f       	mov	r30, r24
    1d5c:	ef 70       	andi	r30, 0x0F	; 15
    1d5e:	e0 93 05 01 	sts	0x0105, r30
	      SendPumpStatusFlow(txPumpID,PumpStatus[PumpAddr]);
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	eb 54       	subi	r30, 0x4B	; 75
    1d66:	fc 4f       	sbci	r31, 0xFC	; 252
    1d68:	60 81       	ld	r22, Z
    1d6a:	0e 94 c8 06 	call	0xd90	; 0xd90 <SendPumpStatusFlow>
	      stPoolingPump=ppScanResponse;
    1d6e:	88 e1       	ldi	r24, 0x18	; 24
    1d70:	b2 c1       	rjmp	.+868    	; 0x20d6 <FPoolingPump+0x5f4>
	      break;
     case ppScanResponse:
          //StatePrintf(PSTR("11"));
		  PumpAddr=(txPumpID&0x0F);
    1d72:	80 91 17 01 	lds	r24, 0x0117
    1d76:	8f 70       	andi	r24, 0x0F	; 15
    1d78:	80 93 05 01 	sts	0x0105, r24
		  switch(CMDResponse){
    1d7c:	90 91 8d 01 	lds	r25, 0x018D
    1d80:	98 30       	cpi	r25, 0x08	; 8
    1d82:	c1 f1       	breq	.+112    	; 0x1df4 <FPoolingPump+0x312>
    1d84:	99 30       	cpi	r25, 0x09	; 9
    1d86:	28 f4       	brcc	.+10     	; 0x1d92 <FPoolingPump+0x2b0>
    1d88:	96 30       	cpi	r25, 0x06	; 6
    1d8a:	41 f0       	breq	.+16     	; 0x1d9c <FPoolingPump+0x2ba>
    1d8c:	97 30       	cpi	r25, 0x07	; 7
    1d8e:	91 f5       	brne	.+100    	; 0x1df4 <FPoolingPump+0x312>
    1d90:	16 c0       	rjmp	.+44     	; 0x1dbe <FPoolingPump+0x2dc>
    1d92:	99 30       	cpi	r25, 0x09	; 9
    1d94:	31 f1       	breq	.+76     	; 0x1de2 <FPoolingPump+0x300>
    1d96:	9b 30       	cpi	r25, 0x0B	; 11
    1d98:	69 f5       	brne	.+90     	; 0x1df4 <FPoolingPump+0x312>
    1d9a:	1a c0       	rjmp	.+52     	; 0x1dd0 <FPoolingPump+0x2ee>
		  case PUMP_OFF:               
		       if (IsRequestTransInfo[PumpAddr]==True)
    1d9c:	a8 2f       	mov	r26, r24
    1d9e:	b0 e0       	ldi	r27, 0x00	; 0
    1da0:	fd 01       	movw	r30, r26
    1da2:	e6 57       	subi	r30, 0x76	; 118
    1da4:	fd 4f       	sbci	r31, 0xFD	; 253
    1da6:	80 81       	ld	r24, Z
    1da8:	81 30       	cpi	r24, 0x01	; 1
    1daa:	c9 f0       	breq	.+50     	; 0x1dde <FPoolingPump+0x2fc>
			       stPoolingPump=ppRequestTransData;
               else 
		       if (IsRequestTotalizerInfo[PumpAddr]==True){
    1dac:	ad 5e       	subi	r26, 0xED	; 237
    1dae:	bb 4f       	sbci	r27, 0xFB	; 251
    1db0:	8c 91       	ld	r24, X
    1db2:	81 30       	cpi	r24, 0x01	; 1
    1db4:	11 f4       	brne	.+4      	; 0x1dba <FPoolingPump+0x2d8>
			        stPoolingPump=ppRequestTotalizerData;
    1db6:	8b e1       	ldi	r24, 0x1B	; 27
    1db8:	1e c0       	rjmp	.+60     	; 0x1df6 <FPoolingPump+0x314>
				}	
               else stPoolingPump=ppNextPump;
    1dba:	81 e0       	ldi	r24, 0x01	; 1
    1dbc:	1c c0       	rjmp	.+56     	; 0x1df6 <FPoolingPump+0x314>
		       break;
          case PUMP_CALL:
 			   if (PumpLock[PumpAddr]==False){
    1dbe:	e8 2f       	mov	r30, r24
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	e4 53       	subi	r30, 0x34	; 52
    1dc4:	fd 4f       	sbci	r31, 0xFD	; 253
    1dc6:	80 81       	ld	r24, Z
    1dc8:	88 23       	and	r24, r24
    1dca:	b9 f4       	brne	.+46     	; 0x1dfa <FPoolingPump+0x318>
			   	 //  if (IsRequestTransInfo[PumpAddr]==False) 
				 //      IsRequestTransInfo[PumpAddr]=True;
			       stPoolingPump=ppReplyAuth;               
    1dcc:	88 e0       	ldi	r24, 0x08	; 8
    1dce:	13 c0       	rjmp	.+38     	; 0x1df6 <FPoolingPump+0x314>
			   } 
		       break;
		  case PUMP_FEOT:
		       if (IsRequestTransInfo[PumpAddr]==True)
    1dd0:	e8 2f       	mov	r30, r24
    1dd2:	f0 e0       	ldi	r31, 0x00	; 0
    1dd4:	e6 57       	subi	r30, 0x76	; 118
    1dd6:	fd 4f       	sbci	r31, 0xFD	; 253
    1dd8:	80 81       	ld	r24, Z
    1dda:	81 30       	cpi	r24, 0x01	; 1
    1ddc:	59 f4       	brne	.+22     	; 0x1df4 <FPoolingPump+0x312>
			       stPoolingPump=ppRequestTransData;
    1dde:	8a e0       	ldi	r24, 0x0A	; 10
    1de0:	0a c0       	rjmp	.+20     	; 0x1df6 <FPoolingPump+0x314>
               else stPoolingPump=ppInitDelayNextPump;
		       break;
		  case PUMP_BUSY:
               if (IsRequestTransInfo[PumpAddr]==False)
    1de2:	e8 2f       	mov	r30, r24
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	e6 57       	subi	r30, 0x76	; 118
    1de8:	fd 4f       	sbci	r31, 0xFD	; 253
    1dea:	80 81       	ld	r24, Z
    1dec:	88 23       	and	r24, r24
    1dee:	11 f4       	brne	.+4      	; 0x1df4 <FPoolingPump+0x312>
			       IsRequestTransInfo[PumpAddr]=True;
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	80 83       	st	Z, r24
		       break;
		  case PUMP_AUTH:
               stPoolingPump=ppInitDelayNextPump;
		       break;		  
          default:
               stPoolingPump=ppInitDelayNextPump;
    1df4:	84 e1       	ldi	r24, 0x14	; 20
    1df6:	80 93 2c 01 	sts	0x012C, r24
		       break;
		  }
		  //Existing Pump
		  if (IsNoPump==True){
    1dfa:	80 91 06 01 	lds	r24, 0x0106
    1dfe:	81 30       	cpi	r24, 0x01	; 1
    1e00:	09 f0       	breq	.+2      	; 0x1e04 <FPoolingPump+0x322>
    1e02:	6b c1       	rjmp	.+726    	; 0x20da <FPoolingPump+0x5f8>
		      IsNoPump=False;
    1e04:	10 92 06 01 	sts	0x0106, r1
			  stPoolingPump=ppInitDelayNextPump;
    1e08:	84 e1       	ldi	r24, 0x14	; 20
    1e0a:	65 c1       	rjmp	.+714    	; 0x20d6 <FPoolingPump+0x5f4>
	 }
	 zDataBuffer[0]=data;
}

void SetReceiveLine(char RecLine){
     stReceiveCom0=RecLine;
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
    1e0e:	80 93 04 01 	sts	0x0104, r24
	      break;
     case ppReplyAuth:
          //StatePrintf(PSTR("11"));
	      SetReceiveLine(rcIdle);
	      if (GetReceiveLine()==rcIdle){
			  iSend=0;
    1e12:	10 92 f9 03 	sts	0x03F9, r1
		      stPoolingPump=ppSendAuthorize;
    1e16:	8c e0       	ldi	r24, 0x0C	; 12
    1e18:	5e c1       	rjmp	.+700    	; 0x20d6 <FPoolingPump+0x5f4>
			  }
		  else stPoolingPump=ppReplyAuth;
	      break;
     case ppSendAuthorize:
          //StatePrintf(PSTR("12"));
	      TimSend=0;
    1e1a:	10 92 24 04 	sts	0x0424, r1
    1e1e:	10 92 23 04 	sts	0x0423, r1
		  IsStatusReceived=False;
    1e22:	10 92 0f 01 	sts	0x010F, r1
	      PumpCommand(txPumpID,CMD_AUTHORIZE);
    1e26:	80 91 17 01 	lds	r24, 0x0117
    1e2a:	61 e0       	ldi	r22, 0x01	; 1
    1e2c:	0e 94 69 07 	call	0xed2	; 0xed2 <PumpCommand>
		  stPoolingPump=ppWaitAuthorized;
    1e30:	8d e0       	ldi	r24, 0x0D	; 13
    1e32:	51 c1       	rjmp	.+674    	; 0x20d6 <FPoolingPump+0x5f4>
	      break;
     case ppWaitAuthorized:
          //StatePrintf(PSTR("13"));
	      if (TimSend>TPoolTimeout){
    1e34:	80 91 b6 02 	lds	r24, 0x02B6
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	20 91 23 04 	lds	r18, 0x0423
    1e3e:	30 91 24 04 	lds	r19, 0x0424
    1e42:	82 17       	cp	r24, r18
    1e44:	93 07       	cpc	r25, r19
    1e46:	80 f4       	brcc	.+32     	; 0x1e68 <FPoolingPump+0x386>
		  	  iSend++;
    1e48:	80 91 f9 03 	lds	r24, 0x03F9
    1e4c:	8f 5f       	subi	r24, 0xFF	; 255
    1e4e:	80 93 f9 03 	sts	0x03F9, r24
		      if (iSend<nSend)stPoolingPump=ppSendAuthorize;
    1e52:	90 91 77 02 	lds	r25, 0x0277
    1e56:	89 17       	cp	r24, r25
    1e58:	10 f4       	brcc	.+4      	; 0x1e5e <FPoolingPump+0x37c>
    1e5a:	8c e0       	ldi	r24, 0x0C	; 12
    1e5c:	03 c0       	rjmp	.+6      	; 0x1e64 <FPoolingPump+0x382>
			  else
		      if (iSend>nSend)stPoolingPump=ppNoPump;//Pump Not Available
    1e5e:	98 17       	cp	r25, r24
    1e60:	18 f4       	brcc	.+6      	; 0x1e68 <FPoolingPump+0x386>
    1e62:	85 e0       	ldi	r24, 0x05	; 5
    1e64:	80 93 2c 01 	sts	0x012C, r24
		  }
	      if (IsStatusReceived==True){
    1e68:	80 91 0f 01 	lds	r24, 0x010F
    1e6c:	81 30       	cpi	r24, 0x01	; 1
    1e6e:	09 f0       	breq	.+2      	; 0x1e72 <FPoolingPump+0x390>
    1e70:	34 c1       	rjmp	.+616    	; 0x20da <FPoolingPump+0x5f8>
		      IsStatusReceived=False;
    1e72:	10 92 0f 01 	sts	0x010F, r1
			  //Authorized
			  _uart_printf(1,1,PSTR("Authorized"));
    1e76:	61 e0       	ldi	r22, 0x01	; 1
    1e78:	4f e5       	ldi	r20, 0x5F	; 95
    1e7a:	51 e0       	ldi	r21, 0x01	; 1
    1e7c:	0e 94 85 18 	call	0x310a	; 0x310a <_uart_printf>

		      if ((txPumpID&0x0F)==PumpID)stPoolingPump=ppUpdatePumpStatus;
    1e80:	20 91 17 01 	lds	r18, 0x0117
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	2f 70       	andi	r18, 0x0F	; 15
    1e88:	30 70       	andi	r19, 0x00	; 0
    1e8a:	80 91 0e 01 	lds	r24, 0x010E
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	28 17       	cp	r18, r24
    1e92:	39 07       	cpc	r19, r25
    1e94:	11 f4       	brne	.+4      	; 0x1e9a <FPoolingPump+0x3b8>
    1e96:	87 e0       	ldi	r24, 0x07	; 7
    1e98:	1e c1       	rjmp	.+572    	; 0x20d6 <FPoolingPump+0x5f4>
			  else stPoolingPump=ppDifferentPumpID;
    1e9a:	89 e0       	ldi	r24, 0x09	; 9
    1e9c:	1c c1       	rjmp	.+568    	; 0x20d6 <FPoolingPump+0x5f4>
		  }
	      break;
     case ppRequestRealTimeMoney:
          //StatePrintf(PSTR("14"));
		  Com0ReceiveCount=0;
    1e9e:	10 92 23 01 	sts	0x0123, r1
	 }
	 zDataBuffer[0]=data;
}

void SetReceiveLine(char RecLine){
     stReceiveCom0=RecLine;
    1ea2:	82 e0       	ldi	r24, 0x02	; 2
    1ea4:	80 93 04 01 	sts	0x0104, r24
     case ppRequestRealTimeMoney:
          //StatePrintf(PSTR("14"));
		  Com0ReceiveCount=0;
	      SetReceiveLine(rcRealTimeMoney);
	      if (GetReceiveLine()==rcRealTimeMoney){
			  iSend=0;
    1ea8:	10 92 f9 03 	sts	0x03F9, r1
    1eac:	25 c0       	rjmp	.+74     	; 0x1ef8 <FPoolingPump+0x416>
			  }
		  else stPoolingPump=ppRequestRealTimeMoney;
	      break;
     case ppSendMoneyReq:
          //StatePrintf(PSTR("15"));
	 	  TimSend=0;
    1eae:	10 92 24 04 	sts	0x0424, r1
    1eb2:	10 92 23 04 	sts	0x0423, r1
	      IsMoneyReceived=False;
    1eb6:	10 92 10 01 	sts	0x0110, r1
	      PumpCommand(txPumpID,CMD_REALTIME_MONEY);
    1eba:	80 91 17 01 	lds	r24, 0x0117
    1ebe:	66 e0       	ldi	r22, 0x06	; 6
    1ec0:	0e 94 69 07 	call	0xed2	; 0xed2 <PumpCommand>
		  stPoolingPump=ppWaitMoneyReq;
    1ec4:	8f e0       	ldi	r24, 0x0F	; 15
    1ec6:	07 c1       	rjmp	.+526    	; 0x20d6 <FPoolingPump+0x5f4>
	      break;
     case ppWaitMoneyReq:
          //StatePrintf(PSTR("16"));
	      if (IsMoneyReceived==False){
    1ec8:	80 91 10 01 	lds	r24, 0x0110
    1ecc:	88 23       	and	r24, r24
    1ece:	d9 f4       	brne	.+54     	; 0x1f06 <FPoolingPump+0x424>
		  	  if (TimSend>TPoolTimeout){
    1ed0:	80 91 b6 02 	lds	r24, 0x02B6
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	20 91 23 04 	lds	r18, 0x0423
    1eda:	30 91 24 04 	lds	r19, 0x0424
    1ede:	82 17       	cp	r24, r18
    1ee0:	93 07       	cpc	r25, r19
    1ee2:	08 f0       	brcs	.+2      	; 0x1ee6 <FPoolingPump+0x404>
    1ee4:	fa c0       	rjmp	.+500    	; 0x20da <FPoolingPump+0x5f8>
			      iSend++;
    1ee6:	80 91 f9 03 	lds	r24, 0x03F9
    1eea:	8f 5f       	subi	r24, 0xFF	; 255
    1eec:	80 93 f9 03 	sts	0x03F9, r24
		          if (iSend<nSend)stPoolingPump=ppSendMoneyReq;
    1ef0:	90 91 77 02 	lds	r25, 0x0277
    1ef4:	89 17       	cp	r24, r25
    1ef6:	10 f4       	brcc	.+4      	; 0x1efc <FPoolingPump+0x41a>
    1ef8:	8e e0       	ldi	r24, 0x0E	; 14
    1efa:	ed c0       	rjmp	.+474    	; 0x20d6 <FPoolingPump+0x5f4>
			      else
		          if (iSend>nSend)stPoolingPump=ppNoPump;//Pump Not Available
    1efc:	98 17       	cp	r25, r24
    1efe:	08 f0       	brcs	.+2      	; 0x1f02 <FPoolingPump+0x420>
    1f00:	ec c0       	rjmp	.+472    	; 0x20da <FPoolingPump+0x5f8>
    1f02:	85 e0       	ldi	r24, 0x05	; 5
    1f04:	e8 c0       	rjmp	.+464    	; 0x20d6 <FPoolingPump+0x5f4>
			  }
		  }else
	      if (IsMoneyReceived==True){
    1f06:	81 30       	cpi	r24, 0x01	; 1
    1f08:	09 f0       	breq	.+2      	; 0x1f0c <FPoolingPump+0x42a>
    1f0a:	e7 c0       	rjmp	.+462    	; 0x20da <FPoolingPump+0x5f8>
		      IsMoneyReceived=False;
    1f0c:	10 92 10 01 	sts	0x0110, r1
			  PumpAddr=(txPumpID&0x0F);
    1f10:	80 91 17 01 	lds	r24, 0x0117
    1f14:	8f 70       	andi	r24, 0x0F	; 15
    1f16:	80 93 05 01 	sts	0x0105, r24
			  //SendCurrentMoney(txPumpID,strCurrentMoney);
			  stPoolingPump=ppMoneyRequestCompleted;
    1f1a:	80 e1       	ldi	r24, 0x10	; 16
    1f1c:	dc c0       	rjmp	.+440    	; 0x20d6 <FPoolingPump+0x5f4>
	      TimDelayNextPump=0;
		  stPoolingPump=ppDelayNextPump;
	      break;
     case ppDelayNextPump:
          //StatePrintf(PSTR("18"));
	      if (TimDelayNextPump>=TDelayNextPump)
    1f1e:	80 91 3c 01 	lds	r24, 0x013C
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	20 91 21 01 	lds	r18, 0x0121
    1f28:	30 91 22 01 	lds	r19, 0x0122
    1f2c:	28 17       	cp	r18, r24
    1f2e:	39 07       	cpc	r19, r25
    1f30:	08 f4       	brcc	.+2      	; 0x1f34 <FPoolingPump+0x452>
    1f32:	d3 c0       	rjmp	.+422    	; 0x20da <FPoolingPump+0x5f8>
    1f34:	7a c0       	rjmp	.+244    	; 0x202a <FPoolingPump+0x548>
		      stPoolingPump=ppNextPump;	      
	      break;
     case ppIsRequestTransInfo:
          PumpAddr=(txPumpID&0x0F);
    1f36:	e0 91 17 01 	lds	r30, 0x0117
    1f3a:	ef 70       	andi	r30, 0x0F	; 15
    1f3c:	e0 93 05 01 	sts	0x0105, r30
	      if (IsRequestTransInfo[PumpAddr]!=False){
    1f40:	f0 e0       	ldi	r31, 0x00	; 0
    1f42:	e6 57       	subi	r30, 0x76	; 118
    1f44:	fd 4f       	sbci	r31, 0xFD	; 253
    1f46:	80 81       	ld	r24, Z
    1f48:	88 23       	and	r24, r24
    1f4a:	11 f0       	breq	.+4      	; 0x1f50 <FPoolingPump+0x46e>
		      stPoolingPump=ppRequestTransData;		  
    1f4c:	8a e0       	ldi	r24, 0x0A	; 10
    1f4e:	c3 c0       	rjmp	.+390    	; 0x20d6 <FPoolingPump+0x5f4>
		  }else{
		  stPoolingPump=ppIsRequestTotalizerInfo;
    1f50:	8a e1       	ldi	r24, 0x1A	; 26
    1f52:	c1 c0       	rjmp	.+386    	; 0x20d6 <FPoolingPump+0x5f4>
	 }
	 zDataBuffer[0]=data;
}

void SetReceiveLine(char RecLine){
     stReceiveCom0=RecLine;
    1f54:	83 e0       	ldi	r24, 0x03	; 3
    1f56:	80 93 04 01 	sts	0x0104, r24
	      break;
     case ppRequestTransData:
          //StatePrintf(PSTR("19"));
	      SetReceiveLine(rcInitTransaction);
	      if (GetReceiveLine()==rcInitTransaction){
			  iSend=0;
    1f5a:	10 92 f9 03 	sts	0x03F9, r1
    1f5e:	30 c0       	rjmp	.+96     	; 0x1fc0 <FPoolingPump+0x4de>
			  }
		  else stPoolingPump=ppRequestTransData;
	      break;
     case ppSendTransReq:
          //StatePrintf(PSTR("20"));
	 	  TimSend=0;
    1f60:	10 92 24 04 	sts	0x0424, r1
    1f64:	10 92 23 04 	sts	0x0423, r1
	      IsTransaction=False;
    1f68:	10 92 11 01 	sts	0x0111, r1
	      PumpCommand(txPumpID,CMD_TRANSACTION_DATA);		  
    1f6c:	80 91 17 01 	lds	r24, 0x0117
    1f70:	64 e0       	ldi	r22, 0x04	; 4
    1f72:	0e 94 69 07 	call	0xed2	; 0xed2 <PumpCommand>
		  stPoolingPump=ppWaitTransReq;
    1f76:	82 e1       	ldi	r24, 0x12	; 18
    1f78:	ae c0       	rjmp	.+348    	; 0x20d6 <FPoolingPump+0x5f4>
	      break;
	 case ppWaitTransReq:
          //StatePrintf(PSTR("21"));
		  if (IsTransaction==True){
    1f7a:	80 91 11 01 	lds	r24, 0x0111
    1f7e:	81 30       	cpi	r24, 0x01	; 1
    1f80:	41 f4       	brne	.+16     	; 0x1f92 <FPoolingPump+0x4b0>
		      PumpAddr=(txPumpID&0x0F);
    1f82:	80 91 17 01 	lds	r24, 0x0117
    1f86:	8f 70       	andi	r24, 0x0F	; 15
    1f88:	80 93 05 01 	sts	0x0105, r24
		      stPoolingPump=ppTransRequestCompleted;
    1f8c:	83 e1       	ldi	r24, 0x13	; 19
    1f8e:	80 93 2c 01 	sts	0x012C, r24
			  }
		  if (TimSend>(TPoolTimeout*2)){
    1f92:	80 91 b6 02 	lds	r24, 0x02B6
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	88 0f       	add	r24, r24
    1f9a:	99 1f       	adc	r25, r25
    1f9c:	20 91 23 04 	lds	r18, 0x0423
    1fa0:	30 91 24 04 	lds	r19, 0x0424
    1fa4:	82 17       	cp	r24, r18
    1fa6:	93 07       	cpc	r25, r19
    1fa8:	08 f0       	brcs	.+2      	; 0x1fac <FPoolingPump+0x4ca>
    1faa:	97 c0       	rjmp	.+302    	; 0x20da <FPoolingPump+0x5f8>
		  	  iSend++;
    1fac:	80 91 f9 03 	lds	r24, 0x03F9
    1fb0:	8f 5f       	subi	r24, 0xFF	; 255
    1fb2:	80 93 f9 03 	sts	0x03F9, r24
		      if (iSend<nSend)stPoolingPump=ppSendTransReq;
    1fb6:	90 91 77 02 	lds	r25, 0x0277
    1fba:	89 17       	cp	r24, r25
    1fbc:	08 f0       	brcs	.+2      	; 0x1fc0 <FPoolingPump+0x4de>
    1fbe:	6b c0       	rjmp	.+214    	; 0x2096 <FPoolingPump+0x5b4>
    1fc0:	81 e1       	ldi	r24, 0x11	; 17
    1fc2:	89 c0       	rjmp	.+274    	; 0x20d6 <FPoolingPump+0x5f4>
		      if (iSend>nSend)stPoolingPump=ppDelayNextPump;	      
		  }
	      break;
	 case ppTransRequestCompleted:
          //StatePrintf(PSTR("21"));
		  stPoolingPump=ppSendTransInfo;
    1fc4:	86 e1       	ldi	r24, 0x16	; 22
    1fc6:	87 c0       	rjmp	.+270    	; 0x20d6 <FPoolingPump+0x5f4>
	      break;
     case ppSendTransInfo:
	      PumpAddr=(txPumpID&0x0F);	      
    1fc8:	80 91 17 01 	lds	r24, 0x0117
    1fcc:	98 2f       	mov	r25, r24
    1fce:	9f 70       	andi	r25, 0x0F	; 15
    1fd0:	90 93 05 01 	sts	0x0105, r25
		  SendTransFlow(txPumpID,rxPumpId,NozzleId,GradeId,strUnitPrice,strVolume,strAmount,PumpTransDigit);
    1fd4:	60 91 3b 01 	lds	r22, 0x013B
    1fd8:	40 91 e0 02 	lds	r20, 0x02E0
    1fdc:	20 91 f6 02 	lds	r18, 0x02F6
    1fe0:	0c ea       	ldi	r16, 0xAC	; 172
    1fe2:	12 e0       	ldi	r17, 0x02	; 2
    1fe4:	37 e5       	ldi	r19, 0x57	; 87
    1fe6:	e3 2e       	mov	r14, r19
    1fe8:	32 e0       	ldi	r19, 0x02	; 2
    1fea:	f3 2e       	mov	r15, r19
    1fec:	9b ea       	ldi	r25, 0xAB	; 171
    1fee:	c9 2e       	mov	r12, r25
    1ff0:	93 e0       	ldi	r25, 0x03	; 3
    1ff2:	d9 2e       	mov	r13, r25
    1ff4:	a0 90 0b 01 	lds	r10, 0x010B
    1ff8:	0e 94 b3 0c 	call	0x1966	; 0x1966 <SendTransFlow>
		  IsRequestTransInfo[PumpAddr]=False;
    1ffc:	e0 91 05 01 	lds	r30, 0x0105
    2000:	f0 e0       	ldi	r31, 0x00	; 0
    2002:	e6 57       	subi	r30, 0x76	; 118
    2004:	fd 4f       	sbci	r31, 0xFD	; 253
    2006:	61 c0       	rjmp	.+194    	; 0x20ca <FPoolingPump+0x5e8>
	      TimDelayNextPump=0;		  
		  stPoolingPump=ppDelayNextPump;
	      break;     
     case ppIsRequestTotalizerInfo:
          //StatePrintf(PSTR("23"));
	      PumpAddr=(txPumpID&0x0F);
    2008:	e0 91 17 01 	lds	r30, 0x0117
    200c:	ef 70       	andi	r30, 0x0F	; 15
    200e:	e0 93 05 01 	sts	0x0105, r30
	      if (IsRequestTotalizerInfo[PumpAddr]==True){
    2012:	f0 e0       	ldi	r31, 0x00	; 0
    2014:	ed 5e       	subi	r30, 0xED	; 237
    2016:	fb 4f       	sbci	r31, 0xFB	; 251
    2018:	80 81       	ld	r24, Z
    201a:	81 30       	cpi	r24, 0x01	; 1
    201c:	11 f4       	brne	.+4      	; 0x2022 <FPoolingPump+0x540>
		      stPoolingPump=ppRequestTotalizerData;		  
    201e:	8b e1       	ldi	r24, 0x1B	; 27
    2020:	5a c0       	rjmp	.+180    	; 0x20d6 <FPoolingPump+0x5f4>
		  }else{
		  TimDelayNextPump=0; 
    2022:	10 92 22 01 	sts	0x0122, r1
    2026:	10 92 21 01 	sts	0x0121, r1
		  stPoolingPump=ppNextPump;
    202a:	81 e0       	ldi	r24, 0x01	; 1
    202c:	54 c0       	rjmp	.+168    	; 0x20d6 <FPoolingPump+0x5f4>
	 }
	 zDataBuffer[0]=data;
}

void SetReceiveLine(char RecLine){
     stReceiveCom0=RecLine;
    202e:	84 e0       	ldi	r24, 0x04	; 4
    2030:	80 93 04 01 	sts	0x0104, r24

     case ppRequestTotalizerData:
          //StatePrintf(PSTR("24"));
	      SetReceiveLine(rcInitTotalizer);
	      if (GetReceiveLine()==rcInitTotalizer){
			  iSend=0;
    2034:	10 92 f9 03 	sts	0x03F9, r1
    2038:	2c c0       	rjmp	.+88     	; 0x2092 <FPoolingPump+0x5b0>
			  }
		  else stPoolingPump=ppRequestTotalizerData;
	      break;
     case ppSendTotalizerReq:
          //StatePrintf(PSTR("25"));
	 	  TimSend=0;
    203a:	10 92 24 04 	sts	0x0424, r1
    203e:	10 92 23 04 	sts	0x0423, r1
	      IsTotalizer=False;
    2042:	10 92 12 01 	sts	0x0112, r1
	      PumpCommand(txPumpID,CMD_TOTALIZER);
    2046:	80 91 17 01 	lds	r24, 0x0117
    204a:	65 e0       	ldi	r22, 0x05	; 5
    204c:	0e 94 69 07 	call	0xed2	; 0xed2 <PumpCommand>
		  stPoolingPump=ppWaitTotalizerReq;
    2050:	8d e1       	ldi	r24, 0x1D	; 29
    2052:	41 c0       	rjmp	.+130    	; 0x20d6 <FPoolingPump+0x5f4>
	      break;
	 case ppWaitTotalizerReq:
          //StatePrintf(PSTR("26"));
		  if (IsTotalizer==True){
    2054:	80 91 12 01 	lds	r24, 0x0112
    2058:	81 30       	cpi	r24, 0x01	; 1
    205a:	29 f4       	brne	.+10     	; 0x2066 <FPoolingPump+0x584>
		  	  IsTotalizer=False;
    205c:	10 92 12 01 	sts	0x0112, r1
			  stPoolingPump=ppTotalizerRequestCompleted;
    2060:	8e e1       	ldi	r24, 0x1E	; 30
    2062:	80 93 2c 01 	sts	0x012C, r24
		  }
          //if (TimSend>WAIT_TOTALIZER_TIMEOUT){
		  //    stPoolingPump=ppDelayNextPump;
		  //}
		  if (TimSend>(TPoolTimeout*5)){
    2066:	80 91 b6 02 	lds	r24, 0x02B6
    206a:	25 e0       	ldi	r18, 0x05	; 5
    206c:	82 9f       	mul	r24, r18
    206e:	c0 01       	movw	r24, r0
    2070:	11 24       	eor	r1, r1
    2072:	20 91 23 04 	lds	r18, 0x0423
    2076:	30 91 24 04 	lds	r19, 0x0424
    207a:	82 17       	cp	r24, r18
    207c:	93 07       	cpc	r25, r19
    207e:	68 f5       	brcc	.+90     	; 0x20da <FPoolingPump+0x5f8>
		  	  iSend++;
    2080:	80 91 f9 03 	lds	r24, 0x03F9
    2084:	8f 5f       	subi	r24, 0xFF	; 255
    2086:	80 93 f9 03 	sts	0x03F9, r24
		      if (iSend<nSend)stPoolingPump=ppSendTotalizerReq;
    208a:	90 91 77 02 	lds	r25, 0x0277
    208e:	89 17       	cp	r24, r25
    2090:	10 f4       	brcc	.+4      	; 0x2096 <FPoolingPump+0x5b4>
    2092:	8c e1       	ldi	r24, 0x1C	; 28
    2094:	20 c0       	rjmp	.+64     	; 0x20d6 <FPoolingPump+0x5f4>
			  else
		      if (iSend>nSend)stPoolingPump=ppDelayNextPump;	      
    2096:	98 17       	cp	r25, r24
    2098:	00 f5       	brcc	.+64     	; 0x20da <FPoolingPump+0x5f8>
    209a:	1c c0       	rjmp	.+56     	; 0x20d4 <FPoolingPump+0x5f2>
		  }
	      break;
	 case ppTotalizerRequestCompleted:
          //StatePrintf(PSTR("27"));																																																																																																																																		
		  stPoolingPump=ppSendTotalizerInfo;
    209c:	8f e1       	ldi	r24, 0x1F	; 31
    209e:	1b c0       	rjmp	.+54     	; 0x20d6 <FPoolingPump+0x5f4>
	      break;
     case ppSendTotalizerInfo:
          //StatePrintf(PSTR("28"));
	      PumpAddr=(txPumpID&0x0F);
    20a0:	80 91 17 01 	lds	r24, 0x0117
    20a4:	98 2f       	mov	r25, r24
    20a6:	9f 70       	andi	r25, 0x0F	; 15
    20a8:	90 93 05 01 	sts	0x0105, r25
		  SendTotalizerFlow(txPumpID);
    20ac:	0e 94 bb 0b 	call	0x1776	; 0x1776 <SendTotalizerFlow>
		  IsTotalizerACK=False;
    20b0:	10 92 14 01 	sts	0x0114, r1
		  //IsRequestTotalizerInfo[PumpAddr]=False;
	      //TimDelayNextPump=0;
		  stPoolingPump=ppWaitTotalizerACK;
    20b4:	80 e2       	ldi	r24, 0x20	; 32
    20b6:	0f c0       	rjmp	.+30     	; 0x20d6 <FPoolingPump+0x5f4>
	      break;
     case ppWaitTotalizerACK:
	      if (IsTotalizerACK==True){//SC_TOTALIZER_ACK
    20b8:	80 91 14 01 	lds	r24, 0x0114
    20bc:	81 30       	cpi	r24, 0x01	; 1
    20be:	69 f4       	brne	.+26     	; 0x20da <FPoolingPump+0x5f8>
              IsRequestTotalizerInfo[PumpAddr]=False;
    20c0:	e0 91 05 01 	lds	r30, 0x0105
    20c4:	f0 e0       	ldi	r31, 0x00	; 0
    20c6:	ed 5e       	subi	r30, 0xED	; 237
    20c8:	fb 4f       	sbci	r31, 0xFB	; 251
    20ca:	10 82       	st	Z, r1
	          TimDelayNextPump=0;
    20cc:	10 92 22 01 	sts	0x0122, r1
    20d0:	10 92 21 01 	sts	0x0121, r1
		      stPoolingPump=ppDelayNextPump;               
    20d4:	85 e1       	ldi	r24, 0x15	; 21
    20d6:	80 93 2c 01 	sts	0x012C, r24
		  }
	      break;
	 }
}
    20da:	1f 91       	pop	r17
    20dc:	0f 91       	pop	r16
    20de:	ff 90       	pop	r15
    20e0:	ef 90       	pop	r14
    20e2:	df 90       	pop	r13
    20e4:	cf 90       	pop	r12
    20e6:	af 90       	pop	r10
    20e8:	08 95       	ret

000020ea <FPoolingPump2>:
			 }
             rxBufferLength=0;
		}
}

void FPoolingPump2(){
    20ea:	af 92       	push	r10
    20ec:	cf 92       	push	r12
    20ee:	df 92       	push	r13
    20f0:	ef 92       	push	r14
    20f2:	ff 92       	push	r15
    20f4:	0f 93       	push	r16
    20f6:	1f 93       	push	r17
    20f8:	df 93       	push	r29
    20fa:	cf 93       	push	r28
    20fc:	cd b7       	in	r28, 0x3d	; 61
    20fe:	de b7       	in	r29, 0x3e	; 62
    2100:	6e 97       	sbiw	r28, 0x1e	; 30
    2102:	0f b6       	in	r0, 0x3f	; 63
    2104:	f8 94       	cli
    2106:	de bf       	out	0x3e, r29	; 62
    2108:	0f be       	out	0x3f, r0	; 63
    210a:	cd bf       	out	0x3d, r28	; 61
     static char zPooling,stPoolingPump=pwInit,nPoolTotalizer=0,IsTotalizerBusy=False,iAuthCmd=0;
	 char strSend[30];

	 //Monitoring
	 if (zPooling!=stPoolingPump){
    210c:	20 91 31 01 	lds	r18, 0x0131
    2110:	80 91 32 01 	lds	r24, 0x0132
    2114:	82 17       	cp	r24, r18
    2116:	31 f1       	breq	.+76     	; 0x2164 <FPoolingPump2+0x7a>
	     zPooling=stPoolingPump;
    2118:	20 93 32 01 	sts	0x0132, r18
		 #ifdef DEBUG_WAYNE_POOLING
         sprintf_P(strSend,PSTR("WPool:%d"),stPoolingPump);
    211c:	00 d0       	rcall	.+0      	; 0x211e <FPoolingPump2+0x34>
    211e:	00 d0       	rcall	.+0      	; 0x2120 <FPoolingPump2+0x36>
    2120:	00 d0       	rcall	.+0      	; 0x2122 <FPoolingPump2+0x38>
    2122:	ed b7       	in	r30, 0x3d	; 61
    2124:	fe b7       	in	r31, 0x3e	; 62
    2126:	31 96       	adiw	r30, 0x01	; 1
    2128:	8e 01       	movw	r16, r28
    212a:	0f 5f       	subi	r16, 0xFF	; 255
    212c:	1f 4f       	sbci	r17, 0xFF	; 255
    212e:	ad b7       	in	r26, 0x3d	; 61
    2130:	be b7       	in	r27, 0x3e	; 62
    2132:	12 96       	adiw	r26, 0x02	; 2
    2134:	1c 93       	st	X, r17
    2136:	0e 93       	st	-X, r16
    2138:	11 97       	sbiw	r26, 0x01	; 1
    213a:	86 e8       	ldi	r24, 0x86	; 134
    213c:	91 e0       	ldi	r25, 0x01	; 1
    213e:	93 83       	std	Z+3, r25	; 0x03
    2140:	82 83       	std	Z+2, r24	; 0x02
    2142:	24 83       	std	Z+4, r18	; 0x04
    2144:	15 82       	std	Z+5, r1	; 0x05
    2146:	0e 94 ae 18 	call	0x315c	; 0x315c <sprintf_P>
	 	 _uart_print(1,1,strSend);
    214a:	8d b7       	in	r24, 0x3d	; 61
    214c:	9e b7       	in	r25, 0x3e	; 62
    214e:	06 96       	adiw	r24, 0x06	; 6
    2150:	0f b6       	in	r0, 0x3f	; 63
    2152:	f8 94       	cli
    2154:	9e bf       	out	0x3e, r25	; 62
    2156:	0f be       	out	0x3f, r0	; 63
    2158:	8d bf       	out	0x3d, r24	; 61
    215a:	81 e0       	ldi	r24, 0x01	; 1
    215c:	61 e0       	ldi	r22, 0x01	; 1
    215e:	a8 01       	movw	r20, r16
    2160:	0e 94 5d 18 	call	0x30ba	; 0x30ba <_uart_print>
		 #endif
	 }
     //Restarting
	 if (IsRestartPooling==True){
    2164:	80 91 03 01 	lds	r24, 0x0103
    2168:	81 30       	cpi	r24, 0x01	; 1
    216a:	79 f4       	brne	.+30     	; 0x218a <FPoolingPump2+0xa0>
	     IsRestartPooling=False;
    216c:	10 92 03 01 	sts	0x0103, r1
		 SendCommandAcknoledge(SC_POOL_RESTARTED,stPoolingPump);
    2170:	8a e1       	ldi	r24, 0x1A	; 26
    2172:	60 91 31 01 	lds	r22, 0x0131
    2176:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <SendCommandAcknoledge>
		 _uart_printf(1,1,PSTR("PoolRestarted"));
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	61 e0       	ldi	r22, 0x01	; 1
    217e:	48 e7       	ldi	r20, 0x78	; 120
    2180:	51 e0       	ldi	r21, 0x01	; 1
    2182:	0e 94 85 18 	call	0x310a	; 0x310a <_uart_printf>
	     stPoolingPump=pwInit;
    2186:	10 92 31 01 	sts	0x0131, r1
	 }
	 switch(stPoolingPump){
    218a:	80 91 31 01 	lds	r24, 0x0131
    218e:	e8 2f       	mov	r30, r24
    2190:	f0 e0       	ldi	r31, 0x00	; 0
    2192:	ec 31       	cpi	r30, 0x1C	; 28
    2194:	f1 05       	cpc	r31, r1
    2196:	08 f0       	brcs	.+2      	; 0x219a <FPoolingPump2+0xb0>
    2198:	fa c2       	rjmp	.+1524   	; 0x278e <FPoolingPump2+0x6a4>
    219a:	e7 5a       	subi	r30, 0xA7	; 167
    219c:	ff 4f       	sbci	r31, 0xFF	; 255
    219e:	ee 0f       	add	r30, r30
    21a0:	ff 1f       	adc	r31, r31
    21a2:	05 90       	lpm	r0, Z+
    21a4:	f4 91       	lpm	r31, Z+
    21a6:	e0 2d       	mov	r30, r0
    21a8:	09 94       	ijmp
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    21aa:	e1 99       	sbic	0x1c, 1	; 28
    21ac:	fe cf       	rjmp	.-4      	; 0x21aa <FPoolingPump2+0xc0>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    21ae:	88 e0       	ldi	r24, 0x08	; 8
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	9f bb       	out	0x1f, r25	; 31
    21b4:	8e bb       	out	0x1e, r24	; 30
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
    21b6:	e0 9a       	sbi	0x1c, 0	; 28
    21b8:	8d b3       	in	r24, 0x1d	; 29
	 case pwInit:
		  nNoPump=eeprom_read_byte(&DefNoPumpCountMax);
    21ba:	80 93 35 04 	sts	0x0435, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    21be:	e1 99       	sbic	0x1c, 1	; 28
    21c0:	fe cf       	rjmp	.-4      	; 0x21be <FPoolingPump2+0xd4>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    21c2:	87 e0       	ldi	r24, 0x07	; 7
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	9f bb       	out	0x1f, r25	; 31
    21c8:	8e bb       	out	0x1e, r24	; 30
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
    21ca:	e0 9a       	sbi	0x1c, 0	; 28
    21cc:	8d b3       	in	r24, 0x1d	; 29
		  ScanPumpMax=eeprom_read_byte(&DefMaxPumpPooling);
    21ce:	80 93 61 02 	sts	0x0261, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    21d2:	e1 99       	sbic	0x1c, 1	; 28
    21d4:	fe cf       	rjmp	.-4      	; 0x21d2 <FPoolingPump2+0xe8>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    21d6:	89 e0       	ldi	r24, 0x09	; 9
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	9f bb       	out	0x1f, r25	; 31
    21dc:	8e bb       	out	0x1e, r24	; 30
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
    21de:	e0 9a       	sbi	0x1c, 0	; 28
    21e0:	8d b3       	in	r24, 0x1d	; 29
		  nSend=eeprom_read_byte(&DefSendCount);
    21e2:	80 93 77 02 	sts	0x0277, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    21e6:	e1 99       	sbic	0x1c, 1	; 28
    21e8:	fe cf       	rjmp	.-4      	; 0x21e6 <FPoolingPump2+0xfc>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    21ea:	8d e1       	ldi	r24, 0x1D	; 29
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	9f bb       	out	0x1f, r25	; 31
    21f0:	8e bb       	out	0x1e, r24	; 30
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
    21f2:	e0 9a       	sbi	0x1c, 0	; 28
    21f4:	8d b3       	in	r24, 0x1d	; 29
		  nPoolTotalizer=eeprom_read_byte(&DefNozzleCount);
    21f6:	80 93 30 01 	sts	0x0130, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    21fa:	e1 99       	sbic	0x1c, 1	; 28
    21fc:	fe cf       	rjmp	.-4      	; 0x21fa <FPoolingPump2+0x110>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    21fe:	8a e0       	ldi	r24, 0x0A	; 10
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	9f bb       	out	0x1f, r25	; 31
    2204:	8e bb       	out	0x1e, r24	; 30
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
    2206:	e0 9a       	sbi	0x1c, 0	; 28
    2208:	8d b3       	in	r24, 0x1d	; 29
		  TPoolTimeout=eeprom_read_byte(&DefPoolTimeout);
    220a:	80 93 b6 02 	sts	0x02B6, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    220e:	e1 99       	sbic	0x1c, 1	; 28
    2210:	fe cf       	rjmp	.-4      	; 0x220e <FPoolingPump2+0x124>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    2212:	8b e0       	ldi	r24, 0x0B	; 11
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	9f bb       	out	0x1f, r25	; 31
    2218:	8e bb       	out	0x1e, r24	; 30
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
    221a:	e0 9a       	sbi	0x1c, 0	; 28
    221c:	8d b3       	in	r24, 0x1d	; 29
		  TDelayNextPump=eeprom_read_byte(&DefDelayNextPump);
    221e:	80 93 3c 01 	sts	0x013C, r24
		  
		  if (IsStopPoolSequence!=True)
    2222:	80 91 13 01 	lds	r24, 0x0113
    2226:	81 30       	cpi	r24, 0x01	; 1
    2228:	29 f0       	breq	.+10     	; 0x2234 <FPoolingPump2+0x14a>
		      SendCommandAcknoledge(SC_LIVE_SEQUENCE,SequencePool);
    222a:	89 e1       	ldi	r24, 0x19	; 25
    222c:	60 91 26 01 	lds	r22, 0x0126
    2230:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <SendCommandAcknoledge>
		  SequencePool++;
    2234:	80 91 26 01 	lds	r24, 0x0126
    2238:	8f 5f       	subi	r24, 0xFF	; 255
    223a:	80 93 26 01 	sts	0x0126, r24
		  iPoolingID=0;		  
    223e:	10 92 16 01 	sts	0x0116, r1
		  IsTotalizerBusy=False;
    2242:	10 92 2f 01 	sts	0x012F, r1
		  stPoolingPump=pwInitPumpAddr;
    2246:	81 e0       	ldi	r24, 0x01	; 1
    2248:	9d c2       	rjmp	.+1338   	; 0x2784 <FPoolingPump2+0x69a>
		  break;
     case pwInitPumpAddr:
		  txPumpID=eeprom_read_byte(&DefPumpID[iPoolingID]);
    224a:	80 91 16 01 	lds	r24, 0x0116
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    224e:	e1 99       	sbic	0x1c, 1	; 28
    2250:	fe cf       	rjmp	.-4      	; 0x224e <FPoolingPump2+0x164>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	83 5f       	subi	r24, 0xF3	; 243
    2256:	9f 4f       	sbci	r25, 0xFF	; 255
    2258:	9f bb       	out	0x1f, r25	; 31
    225a:	8e bb       	out	0x1e, r24	; 30
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
    225c:	e0 9a       	sbi	0x1c, 0	; 28
    225e:	8d b3       	in	r24, 0x1d	; 29
          txPumpID=txPumpID-1; 
    2260:	81 50       	subi	r24, 0x01	; 1
    2262:	80 93 17 01 	sts	0x0117, r24
		   _uart_print(1,1,strSend);
		  #endif

		  //txPumpID=2-1; 
		  //SendCommandAcknoledge(SC_LIVE_SEQUENCE,SequencePool);
		  SequencePool++;
    2266:	80 91 26 01 	lds	r24, 0x0126
    226a:	8f 5f       	subi	r24, 0xFF	; 255
    226c:	80 93 26 01 	sts	0x0126, r24
          iSend=0;		  
    2270:	10 92 f9 03 	sts	0x03F9, r1
    2274:	84 c2       	rjmp	.+1288   	; 0x277e <FPoolingPump2+0x694>
	      stPoolingPump=pwScanStatus;
          break;	 
     case pwScanStatus:
	      WayneReply=WR_NONE;
    2276:	10 92 1a 01 	sts	0x011A, r1
	      FWayneSendCommand(CMD_STATUS,0,txPumpID,0);
    227a:	80 e0       	ldi	r24, 0x00	; 0
    227c:	60 e0       	ldi	r22, 0x00	; 0
    227e:	40 91 17 01 	lds	r20, 0x0117
    2282:	20 e0       	ldi	r18, 0x00	; 0
    2284:	0e 94 95 07 	call	0xf2a	; 0xf2a <FWayneSendCommand>
		  TimSend=0;
    2288:	10 92 24 04 	sts	0x0424, r1
    228c:	10 92 23 04 	sts	0x0423, r1
		  stPoolingPump=pwWaitScanReply;
    2290:	83 e0       	ldi	r24, 0x03	; 3
    2292:	78 c2       	rjmp	.+1264   	; 0x2784 <FPoolingPump2+0x69a>
	      break;
     case pwWaitScanReply:
	      //Timeout->NoPump		  
          if (TimSend>TPoolTimeout){
    2294:	80 91 b6 02 	lds	r24, 0x02B6
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	20 91 23 04 	lds	r18, 0x0423
    229e:	30 91 24 04 	lds	r19, 0x0424
    22a2:	82 17       	cp	r24, r18
    22a4:	93 07       	cpc	r25, r19
    22a6:	70 f4       	brcc	.+28     	; 0x22c4 <FPoolingPump2+0x1da>
		      iSend++;
    22a8:	80 91 f9 03 	lds	r24, 0x03F9
    22ac:	8f 5f       	subi	r24, 0xFF	; 255
    22ae:	80 93 f9 03 	sts	0x03F9, r24
			  if (iSend<nSend)stPoolingPump=pwScanStatus;//Retry
    22b2:	90 91 77 02 	lds	r25, 0x0277
    22b6:	89 17       	cp	r24, r25
    22b8:	10 f4       	brcc	.+4      	; 0x22be <FPoolingPump2+0x1d4>
    22ba:	82 e0       	ldi	r24, 0x02	; 2
    22bc:	01 c0       	rjmp	.+2      	; 0x22c0 <FPoolingPump2+0x1d6>
			  else
			  if (iSend>=nSend)stPoolingPump=pwNoPump;//Pump Not Available
    22be:	84 e0       	ldi	r24, 0x04	; 4
    22c0:	80 93 31 01 	sts	0x0131, r24
		  }		  
	      
		  switch(WayneReply){
    22c4:	80 91 1a 01 	lds	r24, 0x011A
    22c8:	81 30       	cpi	r24, 0x01	; 1
    22ca:	21 f0       	breq	.+8      	; 0x22d4 <FPoolingPump2+0x1ea>
    22cc:	84 30       	cpi	r24, 0x04	; 4
    22ce:	09 f0       	breq	.+2      	; 0x22d2 <FPoolingPump2+0x1e8>
    22d0:	5e c2       	rjmp	.+1212   	; 0x278e <FPoolingPump2+0x6a4>
    22d2:	15 c0       	rjmp	.+42     	; 0x22fe <FPoolingPump2+0x214>
		  case WR_READY:
			   if ((PumpStatus[txPumpID]==PW_NONE)||(PumpStatus[txPumpID]==PW_DISCONNECT)){
    22d4:	80 91 17 01 	lds	r24, 0x0117
    22d8:	a8 2f       	mov	r26, r24
    22da:	b0 e0       	ldi	r27, 0x00	; 0
    22dc:	fd 01       	movw	r30, r26
    22de:	eb 54       	subi	r30, 0x4B	; 75
    22e0:	fc 4f       	sbci	r31, 0xFC	; 252
    22e2:	e0 81       	ld	r30, Z
    22e4:	ee 23       	and	r30, r30
    22e6:	19 f0       	breq	.+6      	; 0x22ee <FPoolingPump2+0x204>
    22e8:	ee 30       	cpi	r30, 0x0E	; 14
    22ea:	09 f0       	breq	.+2      	; 0x22ee <FPoolingPump2+0x204>
    22ec:	15 c2       	rjmp	.+1066   	; 0x2718 <FPoolingPump2+0x62e>
			        IsRequestTransInfo[txPumpID]=False;
    22ee:	fd 01       	movw	r30, r26
    22f0:	e6 57       	subi	r30, 0x76	; 118
    22f2:	fd 4f       	sbci	r31, 0xFD	; 253
    22f4:	10 82       	st	Z, r1
			        PumpStatus[txPumpID]=PW_ONLINE;
    22f6:	ab 54       	subi	r26, 0x4B	; 75
    22f8:	bc 4f       	sbci	r27, 0xFC	; 252
    22fa:	86 e0       	ldi	r24, 0x06	; 6
    22fc:	17 c0       	rjmp	.+46     	; 0x232c <FPoolingPump2+0x242>
				  }
               //_uart_printf(1,1,PSTR("WR_READY"));
               stPoolingPump=pwUpdatePumpStatus;
		       break;
          case WR_MESSAGE:
		       stPoolingPump=pwReplyACK;
    22fe:	87 e1       	ldi	r24, 0x17	; 23
    2300:	41 c2       	rjmp	.+1154   	; 0x2784 <FPoolingPump2+0x69a>
		       break;
		  }
	      break;
	 case pwNoPump:
	      NoPumpCount[txPumpID&0x0F]++;
    2302:	80 91 17 01 	lds	r24, 0x0117
    2306:	a8 2f       	mov	r26, r24
    2308:	b0 e0       	ldi	r27, 0x00	; 0
    230a:	fd 01       	movw	r30, r26
    230c:	ef 70       	andi	r30, 0x0F	; 15
    230e:	f0 70       	andi	r31, 0x00	; 0
    2310:	eb 5d       	subi	r30, 0xDB	; 219
    2312:	fb 4f       	sbci	r31, 0xFB	; 251
    2314:	80 81       	ld	r24, Z
    2316:	8f 5f       	subi	r24, 0xFF	; 255
    2318:	80 83       	st	Z, r24
		  if (NoPumpCount[txPumpID&0x0F]>nNoPump){
    231a:	90 91 35 04 	lds	r25, 0x0435
    231e:	98 17       	cp	r25, r24
    2320:	08 f0       	brcs	.+2      	; 0x2324 <FPoolingPump2+0x23a>
    2322:	7a c1       	rjmp	.+756    	; 0x2618 <FPoolingPump2+0x52e>
		      NoPumpCount[txPumpID&0x0F]=0;
    2324:	10 82       	st	Z, r1
	          PumpStatus[txPumpID]=PW_DISCONNECT;
    2326:	ab 54       	subi	r26, 0x4B	; 75
    2328:	bc 4f       	sbci	r27, 0xFC	; 252
    232a:	8e e0       	ldi	r24, 0x0E	; 14
    232c:	8c 93       	st	X, r24
    232e:	f4 c1       	rjmp	.+1000   	; 0x2718 <FPoolingPump2+0x62e>
              stPoolingPump=pwUpdatePumpStatus;
			  }
          else stPoolingPump=pwInitDelayNextPump;
	      break;
     case pwUpdatePumpStatus:
	      PumpAddr=txPumpID;
    2330:	80 91 17 01 	lds	r24, 0x0117
    2334:	80 93 05 01 	sts	0x0105, r24
	 	  if (PumpStatus[PumpAddr]!=zPumpStatus[PumpAddr]){
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	fc 01       	movw	r30, r24
    233c:	eb 54       	subi	r30, 0x4B	; 75
    233e:	fc 4f       	sbci	r31, 0xFC	; 252
    2340:	e0 81       	ld	r30, Z
    2342:	dc 01       	movw	r26, r24
    2344:	a5 56       	subi	r26, 0x65	; 101
    2346:	bd 4f       	sbci	r27, 0xFD	; 253
    2348:	8c 91       	ld	r24, X
    234a:	e8 17       	cp	r30, r24
    234c:	79 f0       	breq	.+30     	; 0x236c <FPoolingPump2+0x282>
		      zPumpStatus[PumpAddr]=PumpStatus[PumpAddr];
    234e:	ec 93       	st	X, r30
		      stPoolingPump=pwSendPumpStatus;
    2350:	86 e0       	ldi	r24, 0x06	; 6
    2352:	18 c2       	rjmp	.+1072   	; 0x2784 <FPoolingPump2+0x69a>
		  }else stPoolingPump=pwNextAction;
	      break;
     case pwSendPumpStatus:
          PumpAddr=txPumpID;
    2354:	80 91 17 01 	lds	r24, 0x0117
    2358:	80 93 05 01 	sts	0x0105, r24
	      SendPumpStatusFlow(txPumpID+1,PumpStatus[PumpAddr]);
    235c:	e8 2f       	mov	r30, r24
    235e:	f0 e0       	ldi	r31, 0x00	; 0
    2360:	eb 54       	subi	r30, 0x4B	; 75
    2362:	fc 4f       	sbci	r31, 0xFC	; 252
    2364:	8f 5f       	subi	r24, 0xFF	; 255
    2366:	60 81       	ld	r22, Z
    2368:	0e 94 c8 06 	call	0xd90	; 0xd90 <SendPumpStatusFlow>
		  //sprintf_P(strSend,PSTR("WR:%d MI:%d"),WayneReply,MsgInfo);
		  //_uart_print(1,1,strSend);
	      stPoolingPump=pwNextAction;
    236c:	87 e0       	ldi	r24, 0x07	; 7
    236e:	0a c2       	rjmp	.+1044   	; 0x2784 <FPoolingPump2+0x69a>
	      break;
     case pwNextAction:
	      //Switch Action Based Pump State
		  PumpAddr=txPumpID;
    2370:	80 91 17 01 	lds	r24, 0x0117
    2374:	80 93 05 01 	sts	0x0105, r24
		  switch(PumpStatus[PumpAddr]){
    2378:	a8 2f       	mov	r26, r24
    237a:	b0 e0       	ldi	r27, 0x00	; 0
    237c:	fd 01       	movw	r30, r26
    237e:	eb 54       	subi	r30, 0x4B	; 75
    2380:	fc 4f       	sbci	r31, 0xFC	; 252
    2382:	80 81       	ld	r24, Z
    2384:	87 30       	cpi	r24, 0x07	; 7
    2386:	09 f4       	brne	.+2      	; 0x238a <FPoolingPump2+0x2a0>
    2388:	6e c0       	rjmp	.+220    	; 0x2466 <FPoolingPump2+0x37c>
    238a:	88 30       	cpi	r24, 0x08	; 8
    238c:	20 f4       	brcc	.+8      	; 0x2396 <FPoolingPump2+0x2ac>
    238e:	86 30       	cpi	r24, 0x06	; 6
    2390:	09 f0       	breq	.+2      	; 0x2394 <FPoolingPump2+0x2aa>
    2392:	fd c1       	rjmp	.+1018   	; 0x278e <FPoolingPump2+0x6a4>
    2394:	1e c0       	rjmp	.+60     	; 0x23d2 <FPoolingPump2+0x2e8>
    2396:	89 30       	cpi	r24, 0x09	; 9
    2398:	09 f4       	brne	.+2      	; 0x239c <FPoolingPump2+0x2b2>
    239a:	68 c0       	rjmp	.+208    	; 0x246c <FPoolingPump2+0x382>
    239c:	8e 30       	cpi	r24, 0x0E	; 14
    239e:	09 f0       	breq	.+2      	; 0x23a2 <FPoolingPump2+0x2b8>
    23a0:	f6 c1       	rjmp	.+1004   	; 0x278e <FPoolingPump2+0x6a4>
		  case PW_DISCONNECT:
		       switch(WayneReply){
    23a2:	80 91 1a 01 	lds	r24, 0x011A
    23a6:	88 23       	and	r24, r24
    23a8:	09 f4       	brne	.+2      	; 0x23ac <FPoolingPump2+0x2c2>
    23aa:	36 c1       	rjmp	.+620    	; 0x2618 <FPoolingPump2+0x52e>
    23ac:	84 30       	cpi	r24, 0x04	; 4
    23ae:	09 f0       	breq	.+2      	; 0x23b2 <FPoolingPump2+0x2c8>
    23b0:	ee c1       	rjmp	.+988    	; 0x278e <FPoolingPump2+0x6a4>
			   case WR_MESSAGE:
			        switch(MsgInfo){
    23b2:	80 91 19 01 	lds	r24, 0x0119
    23b6:	83 30       	cpi	r24, 0x03	; 3
    23b8:	39 f0       	breq	.+14     	; 0x23c8 <FPoolingPump2+0x2de>
    23ba:	88 30       	cpi	r24, 0x08	; 8
    23bc:	09 f4       	brne	.+2      	; 0x23c0 <FPoolingPump2+0x2d6>
    23be:	aa c1       	rjmp	.+852    	; 0x2714 <FPoolingPump2+0x62a>
    23c0:	82 30       	cpi	r24, 0x02	; 2
    23c2:	09 f0       	breq	.+2      	; 0x23c6 <FPoolingPump2+0x2dc>
    23c4:	a7 c1       	rjmp	.+846    	; 0x2714 <FPoolingPump2+0x62a>
    23c6:	31 c0       	rjmp	.+98     	; 0x242a <FPoolingPump2+0x340>
					case MI_NOZZLE_DOWN:
						 IsRequestTransInfo[txPumpID]=True;
    23c8:	a6 57       	subi	r26, 0x76	; 118
    23ca:	bd 4f       	sbci	r27, 0xFD	; 253
    23cc:	81 e0       	ldi	r24, 0x01	; 1
    23ce:	8c 93       	st	X, r24
    23d0:	a1 c1       	rjmp	.+834    	; 0x2714 <FPoolingPump2+0x62a>
			   }
		       break;
          case PW_ONLINE:
		       //sprintf_P(strSend,PSTR("ONLine:%d"),WayneReply);
			   //_uart_print(1,1,strSend);
		       switch(WayneReply){
    23d2:	80 91 1a 01 	lds	r24, 0x011A
    23d6:	81 30       	cpi	r24, 0x01	; 1
    23d8:	21 f0       	breq	.+8      	; 0x23e2 <FPoolingPump2+0x2f8>
    23da:	84 30       	cpi	r24, 0x04	; 4
    23dc:	09 f0       	breq	.+2      	; 0x23e0 <FPoolingPump2+0x2f6>
    23de:	d7 c1       	rjmp	.+942    	; 0x278e <FPoolingPump2+0x6a4>
    23e0:	14 c0       	rjmp	.+40     	; 0x240a <FPoolingPump2+0x320>
			   case WR_READY:
			        if (IsRequestTransInfo[txPumpID]==True){
    23e2:	fd 01       	movw	r30, r26
    23e4:	e6 57       	subi	r30, 0x76	; 118
    23e6:	fd 4f       	sbci	r31, 0xFD	; 253
    23e8:	80 81       	ld	r24, Z
    23ea:	81 30       	cpi	r24, 0x01	; 1
    23ec:	29 f4       	brne	.+10     	; 0x23f8 <FPoolingPump2+0x30e>
					    iSend=0;
    23ee:	10 92 f9 03 	sts	0x03F9, r1
					    stPoolingPump=pwSendTransactionRequest;
    23f2:	8e e0       	ldi	r24, 0x0E	; 14
    23f4:	80 93 31 01 	sts	0x0131, r24
					}if (IsRequestTotalizerInfo[txPumpID]==True){
    23f8:	ad 5e       	subi	r26, 0xED	; 237
    23fa:	bb 4f       	sbci	r27, 0xFB	; 251
    23fc:	8c 91       	ld	r24, X
    23fe:	81 30       	cpi	r24, 0x01	; 1
    2400:	09 f0       	breq	.+2      	; 0x2404 <FPoolingPump2+0x31a>
    2402:	0a c1       	rjmp	.+532    	; 0x2618 <FPoolingPump2+0x52e>
					    iSend=0;
    2404:	10 92 f9 03 	sts	0x03F9, r1
    2408:	29 c0       	rjmp	.+82     	; 0x245c <FPoolingPump2+0x372>
						stPoolingPump=pwSendTotalizerRequest;
					}else stPoolingPump=pwInitDelayNextPump;

			        break;
			   case WR_MESSAGE:
			        switch(MsgInfo){
    240a:	80 91 19 01 	lds	r24, 0x0119
    240e:	83 30       	cpi	r24, 0x03	; 3
    2410:	c9 f0       	breq	.+50     	; 0x2444 <FPoolingPump2+0x35a>
    2412:	84 30       	cpi	r24, 0x04	; 4
    2414:	20 f4       	brcc	.+8      	; 0x241e <FPoolingPump2+0x334>
    2416:	82 30       	cpi	r24, 0x02	; 2
    2418:	09 f0       	breq	.+2      	; 0x241c <FPoolingPump2+0x332>
    241a:	b9 c1       	rjmp	.+882    	; 0x278e <FPoolingPump2+0x6a4>
    241c:	06 c0       	rjmp	.+12     	; 0x242a <FPoolingPump2+0x340>
    241e:	86 30       	cpi	r24, 0x06	; 6
    2420:	49 f0       	breq	.+18     	; 0x2434 <FPoolingPump2+0x34a>
    2422:	88 30       	cpi	r24, 0x08	; 8
    2424:	09 f0       	breq	.+2      	; 0x2428 <FPoolingPump2+0x33e>
    2426:	b3 c1       	rjmp	.+870    	; 0x278e <FPoolingPump2+0x6a4>
    2428:	12 c0       	rjmp	.+36     	; 0x244e <FPoolingPump2+0x364>
					case MI_NOZZLE_UP:
					     PumpStatus[PumpAddr]=PW_CALL;
    242a:	87 e0       	ldi	r24, 0x07	; 7
    242c:	80 83       	st	Z, r24
						 iAuthCmd=0;
    242e:	10 92 2e 01 	sts	0x012E, r1
    2432:	72 c1       	rjmp	.+740    	; 0x2718 <FPoolingPump2+0x62e>
						 stPoolingPump=pwUpdatePumpStatus;
					     break;
					case MI_LAST_TRANSACTION:
                         if (IsRequestTransInfo[txPumpID]==True)
    2434:	a6 57       	subi	r26, 0x76	; 118
    2436:	bd 4f       	sbci	r27, 0xFD	; 253
    2438:	8c 91       	ld	r24, X
    243a:	81 30       	cpi	r24, 0x01	; 1
    243c:	09 f0       	breq	.+2      	; 0x2440 <FPoolingPump2+0x356>
    243e:	ec c0       	rjmp	.+472    	; 0x2618 <FPoolingPump2+0x52e>
						     stPoolingPump=pwSendTransMessage;
    2440:	81 e1       	ldi	r24, 0x11	; 17
    2442:	a0 c1       	rjmp	.+832    	; 0x2784 <FPoolingPump2+0x69a>
                         else stPoolingPump=pwInitDelayNextPump;
					     break;
					case MI_NOZZLE_DOWN:
                         IsRequestTransInfo[txPumpID]=True;
    2444:	a6 57       	subi	r26, 0x76	; 118
    2446:	bd 4f       	sbci	r27, 0xFD	; 253
    2448:	81 e0       	ldi	r24, 0x01	; 1
    244a:	8c 93       	st	X, r24
    244c:	e5 c0       	rjmp	.+458    	; 0x2618 <FPoolingPump2+0x52e>
						 stPoolingPump=pwInitDelayNextPump;
					     break;
                    case MI_TOTALIZER:
					     if (ActiveNozzle<4){
    244e:	80 91 1c 01 	lds	r24, 0x011C
    2452:	84 30       	cpi	r24, 0x04	; 4
    2454:	30 f4       	brcc	.+12     	; 0x2462 <FPoolingPump2+0x378>
						     iSend=0;
    2456:	10 92 f9 03 	sts	0x03F9, r1
						     ActiveNozzle++;
    245a:	8f 5f       	subi	r24, 0xFF	; 255
    245c:	80 93 1c 01 	sts	0x011C, r24
    2460:	be c0       	rjmp	.+380    	; 0x25de <FPoolingPump2+0x4f4>
						     stPoolingPump=pwSendTotalizerRequest;
						 }else stPoolingPump=pwSendTotalizerInfo;
    2462:	8c e0       	ldi	r24, 0x0C	; 12
    2464:	8f c1       	rjmp	.+798    	; 0x2784 <FPoolingPump2+0x69a>
			   case WR_NACK:
			        break;
			   }
		       break;
          case PW_CALL:
		       iSend=0; 
    2466:	10 92 f9 03 	sts	0x03F9, r1
    246a:	34 c1       	rjmp	.+616    	; 0x26d4 <FPoolingPump2+0x5ea>
			   stPoolingPump=pwSendAuthorizeCommand;               			   
		       break;
           
          case PW_AUTHORIZED:
               if (WayneReply==WR_READY){
    246c:	80 91 1a 01 	lds	r24, 0x011A
    2470:	81 30       	cpi	r24, 0x01	; 1
    2472:	09 f4       	brne	.+2      	; 0x2476 <FPoolingPump2+0x38c>
    2474:	d1 c0       	rjmp	.+418    	; 0x2618 <FPoolingPump2+0x52e>
			           stPoolingPump=pwInitDelayNextPump;
			   }else if (WayneReply==WR_MESSAGE){
    2476:	80 91 1a 01 	lds	r24, 0x011A
    247a:	84 30       	cpi	r24, 0x04	; 4
    247c:	09 f0       	breq	.+2      	; 0x2480 <FPoolingPump2+0x396>
    247e:	87 c1       	rjmp	.+782    	; 0x278e <FPoolingPump2+0x6a4>
			       if (MsgInfo==MI_NOZZLE_DOWN){
    2480:	80 91 19 01 	lds	r24, 0x0119
    2484:	83 30       	cpi	r24, 0x03	; 3
    2486:	09 f0       	breq	.+2      	; 0x248a <FPoolingPump2+0x3a0>
    2488:	7a c1       	rjmp	.+756    	; 0x277e <FPoolingPump2+0x694>
				       PumpStatus[PumpAddr]=PW_ONLINE;
    248a:	86 e0       	ldi	r24, 0x06	; 6
    248c:	80 83       	st	Z, r24
					   iSend=0;
    248e:	10 92 f9 03 	sts	0x03F9, r1
    2492:	3a c0       	rjmp	.+116    	; 0x2508 <FPoolingPump2+0x41e>
	      break;
     //Request last Transaction
	 case pwSendTransactionRequest:	 
	      //sprintf_P(strSend,PSTR("Last Transcation"));
		  //_uart_print(1,1,strSend);
		  FWayneSendCommand(CMD_TRANSACTION,CommandSeqID[txPumpID],txPumpID,ActiveNozzle);          
    2494:	40 91 17 01 	lds	r20, 0x0117
    2498:	e4 2f       	mov	r30, r20
    249a:	f0 e0       	ldi	r31, 0x00	; 0
    249c:	ee 57       	subi	r30, 0x7E	; 126
    249e:	fd 4f       	sbci	r31, 0xFD	; 253
    24a0:	8e e0       	ldi	r24, 0x0E	; 14
    24a2:	60 81       	ld	r22, Z
    24a4:	20 91 1c 01 	lds	r18, 0x011C
    24a8:	0e 94 95 07 	call	0xf2a	; 0xf2a <FWayneSendCommand>
		  TimSend=0;
    24ac:	10 92 24 04 	sts	0x0424, r1
    24b0:	10 92 23 04 	sts	0x0423, r1
          stPoolingPump=pwWaitTransACK;
    24b4:	8f e0       	ldi	r24, 0x0F	; 15
    24b6:	66 c1       	rjmp	.+716    	; 0x2784 <FPoolingPump2+0x69a>
	      break;
     case pwWaitTransACK:
	 	  //Timeout->NoPump		  
          if (TimSend>TPoolTimeout){
    24b8:	80 91 b6 02 	lds	r24, 0x02B6
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	20 91 23 04 	lds	r18, 0x0423
    24c2:	30 91 24 04 	lds	r19, 0x0424
    24c6:	82 17       	cp	r24, r18
    24c8:	93 07       	cpc	r25, r19
    24ca:	18 f4       	brcc	.+6      	; 0x24d2 <FPoolingPump2+0x3e8>
		      stPoolingPump=pwRetrySendTransRequest;
    24cc:	80 e1       	ldi	r24, 0x10	; 16
    24ce:	80 93 31 01 	sts	0x0131, r24
		  }
          //Acknowledge
	      if (WayneReply==WR_ACK){
    24d2:	90 91 1a 01 	lds	r25, 0x011A
    24d6:	92 30       	cpi	r25, 0x02	; 2
    24d8:	09 f4       	brne	.+2      	; 0x24dc <FPoolingPump2+0x3f2>
    24da:	60 c0       	rjmp	.+192    	; 0x259c <FPoolingPump2+0x4b2>
		      CommandSeqID[txPumpID]++;
			  //stPoolingPump=pwSendTransMessage;
			  stPoolingPump=pwScanStatus;
		  }else if (WayneReply==WR_NACK){
    24dc:	80 91 1a 01 	lds	r24, 0x011A
    24e0:	83 30       	cpi	r24, 0x03	; 3
    24e2:	09 f0       	breq	.+2      	; 0x24e6 <FPoolingPump2+0x3fc>
    24e4:	54 c1       	rjmp	.+680    	; 0x278e <FPoolingPump2+0x6a4>
		      CommandSeqID[txPumpID]=0;
    24e6:	e0 91 17 01 	lds	r30, 0x0117
    24ea:	f0 e0       	ldi	r31, 0x00	; 0
    24ec:	ee 57       	subi	r30, 0x7E	; 126
    24ee:	fd 4f       	sbci	r31, 0xFD	; 253
    24f0:	10 82       	st	Z, r1
    24f2:	0a c0       	rjmp	.+20     	; 0x2508 <FPoolingPump2+0x41e>
              stPoolingPump=pwSendTransactionRequest;
		  }
	      break;
     case pwRetrySendTransRequest:
	      iSend++;
    24f4:	80 91 f9 03 	lds	r24, 0x03F9
    24f8:	8f 5f       	subi	r24, 0xFF	; 255
    24fa:	80 93 f9 03 	sts	0x03F9, r24
		  if (iSend<nSend)stPoolingPump=pwSendTransactionRequest;
    24fe:	90 91 77 02 	lds	r25, 0x0277
    2502:	89 17       	cp	r24, r25
    2504:	08 f0       	brcs	.+2      	; 0x2508 <FPoolingPump2+0x41e>
    2506:	e8 c0       	rjmp	.+464    	; 0x26d8 <FPoolingPump2+0x5ee>
    2508:	8e e0       	ldi	r24, 0x0E	; 14
    250a:	3c c1       	rjmp	.+632    	; 0x2784 <FPoolingPump2+0x69a>
		  else
		  if (iSend>=nSend)stPoolingPump=pwNoPump;
	      break;

     case pwSendTransMessage:
          rxPumpId=txPumpID;
    250c:	60 91 17 01 	lds	r22, 0x0117
    2510:	60 93 3b 01 	sts	0x013B, r22
		  NozzleId=ActiveNozzle;
    2514:	20 91 1c 01 	lds	r18, 0x011C
    2518:	20 93 e0 02 	sts	0x02E0, r18
		  GradeId=ActiveNozzle;
    251c:	20 93 f6 02 	sts	0x02F6, r18
		  PumpTransDigit=6;
    2520:	86 e0       	ldi	r24, 0x06	; 6
    2522:	80 93 0b 01 	sts	0x010B, r24
	      SendTransFlow(txPumpID+1,rxPumpId+1,NozzleId,GradeId,strUnitPrice,strVolume,strAmount,PumpTransDigit);
    2526:	6f 5f       	subi	r22, 0xFF	; 255
    2528:	86 2f       	mov	r24, r22
    252a:	42 2f       	mov	r20, r18
    252c:	0c ea       	ldi	r16, 0xAC	; 172
    252e:	12 e0       	ldi	r17, 0x02	; 2
    2530:	e7 e5       	ldi	r30, 0x57	; 87
    2532:	ee 2e       	mov	r14, r30
    2534:	e2 e0       	ldi	r30, 0x02	; 2
    2536:	fe 2e       	mov	r15, r30
    2538:	7b ea       	ldi	r23, 0xAB	; 171
    253a:	c7 2e       	mov	r12, r23
    253c:	73 e0       	ldi	r23, 0x03	; 3
    253e:	d7 2e       	mov	r13, r23
    2540:	56 e0       	ldi	r21, 0x06	; 6
    2542:	a5 2e       	mov	r10, r21
    2544:	0e 94 b3 0c 	call	0x1966	; 0x1966 <SendTransFlow>
		  IsRequestTransInfo[txPumpID]=False;
    2548:	e0 91 17 01 	lds	r30, 0x0117
    254c:	f0 e0       	ldi	r31, 0x00	; 0
    254e:	e6 57       	subi	r30, 0x76	; 118
    2550:	fd 4f       	sbci	r31, 0xFD	; 253
    2552:	10 82       	st	Z, r1
    2554:	61 c0       	rjmp	.+194    	; 0x2618 <FPoolingPump2+0x52e>
		  //IsRequestTotalizerInfo[txPumpID]=True;
          stPoolingPump=pwInitDelayNextPump;
	      break; 
	 //Totalizer
	 case pwSendTotalizerRequest:
	      FWayneSendCommand(CMD_TOTALIZER,CommandSeqID[txPumpID],txPumpID,ActiveNozzle);          
    2556:	40 91 17 01 	lds	r20, 0x0117
    255a:	e4 2f       	mov	r30, r20
    255c:	f0 e0       	ldi	r31, 0x00	; 0
    255e:	ee 57       	subi	r30, 0x7E	; 126
    2560:	fd 4f       	sbci	r31, 0xFD	; 253
    2562:	85 e0       	ldi	r24, 0x05	; 5
    2564:	60 81       	ld	r22, Z
    2566:	20 91 1c 01 	lds	r18, 0x011C
    256a:	0e 94 95 07 	call	0xf2a	; 0xf2a <FWayneSendCommand>
		  TimSend=0;
    256e:	10 92 24 04 	sts	0x0424, r1
    2572:	10 92 23 04 	sts	0x0423, r1
          stPoolingPump=pwWaitTotalizerACK;
    2576:	8a e0       	ldi	r24, 0x0A	; 10
    2578:	05 c1       	rjmp	.+522    	; 0x2784 <FPoolingPump2+0x69a>
	      break;
     case pwWaitTotalizerACK:
	       //Timeout->NoPump		  
          if (TimSend>TPoolTimeout){
    257a:	80 91 b6 02 	lds	r24, 0x02B6
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	20 91 23 04 	lds	r18, 0x0423
    2584:	30 91 24 04 	lds	r19, 0x0424
    2588:	82 17       	cp	r24, r18
    258a:	93 07       	cpc	r25, r19
    258c:	18 f4       	brcc	.+6      	; 0x2594 <FPoolingPump2+0x4aa>
		      stPoolingPump=pwRetrySendTotalizerRequest;
    258e:	8b e0       	ldi	r24, 0x0B	; 11
    2590:	80 93 31 01 	sts	0x0131, r24
		  }
          //Acknowledge
	      if (WayneReply==WR_ACK){
    2594:	90 91 1a 01 	lds	r25, 0x011A
    2598:	92 30       	cpi	r25, 0x02	; 2
    259a:	59 f4       	brne	.+22     	; 0x25b2 <FPoolingPump2+0x4c8>
		      CommandSeqID[txPumpID]++;
    259c:	e0 91 17 01 	lds	r30, 0x0117
    25a0:	f0 e0       	ldi	r31, 0x00	; 0
    25a2:	ee 57       	subi	r30, 0x7E	; 126
    25a4:	fd 4f       	sbci	r31, 0xFD	; 253
    25a6:	80 81       	ld	r24, Z
    25a8:	8f 5f       	subi	r24, 0xFF	; 255
    25aa:	80 83       	st	Z, r24
			  stPoolingPump=pwScanStatus;
    25ac:	90 93 31 01 	sts	0x0131, r25
    25b0:	ee c0       	rjmp	.+476    	; 0x278e <FPoolingPump2+0x6a4>
		  }else if (WayneReply==WR_NACK){
    25b2:	80 91 1a 01 	lds	r24, 0x011A
    25b6:	83 30       	cpi	r24, 0x03	; 3
    25b8:	09 f0       	breq	.+2      	; 0x25bc <FPoolingPump2+0x4d2>
    25ba:	e9 c0       	rjmp	.+466    	; 0x278e <FPoolingPump2+0x6a4>
		      CommandSeqID[txPumpID]=0;
    25bc:	e0 91 17 01 	lds	r30, 0x0117
    25c0:	f0 e0       	ldi	r31, 0x00	; 0
    25c2:	ee 57       	subi	r30, 0x7E	; 126
    25c4:	fd 4f       	sbci	r31, 0xFD	; 253
    25c6:	10 82       	st	Z, r1
    25c8:	0a c0       	rjmp	.+20     	; 0x25de <FPoolingPump2+0x4f4>
              stPoolingPump=pwSendTotalizerRequest;
		  }
	      break;
     case pwRetrySendTotalizerRequest:
	      iSend++;
    25ca:	80 91 f9 03 	lds	r24, 0x03F9
    25ce:	8f 5f       	subi	r24, 0xFF	; 255
    25d0:	80 93 f9 03 	sts	0x03F9, r24
		  if (iSend<nSend)stPoolingPump=pwSendTotalizerRequest;
    25d4:	90 91 77 02 	lds	r25, 0x0277
    25d8:	89 17       	cp	r24, r25
    25da:	08 f0       	brcs	.+2      	; 0x25de <FPoolingPump2+0x4f4>
    25dc:	7d c0       	rjmp	.+250    	; 0x26d8 <FPoolingPump2+0x5ee>
    25de:	89 e0       	ldi	r24, 0x09	; 9
    25e0:	d1 c0       	rjmp	.+418    	; 0x2784 <FPoolingPump2+0x69a>
		  else
		  if (iSend>=nSend)stPoolingPump=pwNoPump;
	      break;
     case pwSendTotalizerInfo:
	      PumpTotalDigit=10;
    25e2:	8a e0       	ldi	r24, 0x0A	; 10
    25e4:	80 93 0c 01 	sts	0x010C, r24
	      SendTotalizerFlow(txPumpID+1);
    25e8:	80 91 17 01 	lds	r24, 0x0117
    25ec:	8f 5f       	subi	r24, 0xFF	; 255
    25ee:	0e 94 bb 0b 	call	0x1776	; 0x1776 <SendTotalizerFlow>
		  IsTotalizerACK=False;//True;//
    25f2:	10 92 14 01 	sts	0x0114, r1
		  stPoolingPump=pwWaitTotalizerInfoACK;
    25f6:	8d e0       	ldi	r24, 0x0D	; 13
    25f8:	c5 c0       	rjmp	.+394    	; 0x2784 <FPoolingPump2+0x69a>
	      break;
     case pwWaitTotalizerInfoACK:
	      if (IsTotalizerACK==True){//SC_TOTALIZER_ACK
    25fa:	80 91 14 01 	lds	r24, 0x0114
    25fe:	81 30       	cpi	r24, 0x01	; 1
    2600:	09 f0       	breq	.+2      	; 0x2604 <FPoolingPump2+0x51a>
    2602:	c5 c0       	rjmp	.+394    	; 0x278e <FPoolingPump2+0x6a4>
              IsRequestTotalizerInfo[PumpAddr]=False;
    2604:	e0 91 05 01 	lds	r30, 0x0105
    2608:	f0 e0       	ldi	r31, 0x00	; 0
    260a:	ed 5e       	subi	r30, 0xED	; 237
    260c:	fb 4f       	sbci	r31, 0xFB	; 251
    260e:	10 82       	st	Z, r1
	          TimDelayNextPump=0;
    2610:	10 92 22 01 	sts	0x0122, r1
    2614:	10 92 21 01 	sts	0x0121, r1
		      stPoolingPump=pwInitDelayNextPump;
    2618:	89 e1       	ldi	r24, 0x19	; 25
    261a:	b4 c0       	rjmp	.+360    	; 0x2784 <FPoolingPump2+0x69a>
     case pwSendAuthorizeCommand:
	      #ifdef DEBUG_WAYNE_STATE 
		  sprintf_P(strSend,PSTR("Authorize%d"),iAuthCmd+1);
		  _uart_print(1,1,strSend);
		  #endif
		  FWayneSendCommand((CMD_AUTH_1+iAuthCmd),CommandSeqID[txPumpID],txPumpID,ActiveNozzle);          
    261c:	40 91 17 01 	lds	r20, 0x0117
    2620:	80 91 2e 01 	lds	r24, 0x012E
    2624:	e4 2f       	mov	r30, r20
    2626:	f0 e0       	ldi	r31, 0x00	; 0
    2628:	ee 57       	subi	r30, 0x7E	; 126
    262a:	fd 4f       	sbci	r31, 0xFD	; 253
    262c:	86 5f       	subi	r24, 0xF6	; 246
    262e:	60 81       	ld	r22, Z
    2630:	20 91 1c 01 	lds	r18, 0x011C
    2634:	0e 94 95 07 	call	0xf2a	; 0xf2a <FWayneSendCommand>
		  TimSend=0;
    2638:	10 92 24 04 	sts	0x0424, r1
    263c:	10 92 23 04 	sts	0x0423, r1
          stPoolingPump=pwWaitAuthACK;
    2640:	83 e1       	ldi	r24, 0x13	; 19
    2642:	a0 c0       	rjmp	.+320    	; 0x2784 <FPoolingPump2+0x69a>
	      break;
     case pwWaitAuthACK:
	 	  //Timeout->NoPump		  
          if (TimSend>TPoolTimeout){
    2644:	80 91 b6 02 	lds	r24, 0x02B6
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	20 91 23 04 	lds	r18, 0x0423
    264e:	30 91 24 04 	lds	r19, 0x0424
    2652:	82 17       	cp	r24, r18
    2654:	93 07       	cpc	r25, r19
    2656:	18 f4       	brcc	.+6      	; 0x265e <FPoolingPump2+0x574>
		      stPoolingPump=pwRetrySendAuthorizeCommand;
    2658:	84 e1       	ldi	r24, 0x14	; 20
    265a:	80 93 31 01 	sts	0x0131, r24
		  }		  
	      //Acknowledge
	      if (WayneReply==WR_ACK){
    265e:	20 91 1a 01 	lds	r18, 0x011A
    2662:	22 30       	cpi	r18, 0x02	; 2
    2664:	09 f5       	brne	.+66     	; 0x26a8 <FPoolingPump2+0x5be>
		      iAuthCmd++;
    2666:	80 91 2e 01 	lds	r24, 0x012E
    266a:	8f 5f       	subi	r24, 0xFF	; 255
    266c:	80 93 2e 01 	sts	0x012E, r24
    2670:	90 91 17 01 	lds	r25, 0x0117
			  if (iAuthCmd>=4){//Complete ACK
    2674:	84 30       	cpi	r24, 0x04	; 4
    2676:	80 f0       	brcs	.+32     	; 0x2698 <FPoolingPump2+0x5ae>
			      PumpStatus[PumpAddr]=PW_AUTHORIZED;
    2678:	e0 91 05 01 	lds	r30, 0x0105
    267c:	f0 e0       	ldi	r31, 0x00	; 0
    267e:	eb 54       	subi	r30, 0x4B	; 75
    2680:	fc 4f       	sbci	r31, 0xFC	; 252
    2682:	89 e0       	ldi	r24, 0x09	; 9
    2684:	80 83       	st	Z, r24
				  IsRequestTransInfo[txPumpID]=True;
    2686:	e9 2f       	mov	r30, r25
    2688:	f0 e0       	ldi	r31, 0x00	; 0
    268a:	e6 57       	subi	r30, 0x76	; 118
    268c:	fd 4f       	sbci	r31, 0xFD	; 253
    268e:	81 e0       	ldi	r24, 0x01	; 1
    2690:	80 83       	st	Z, r24
			      stPoolingPump=pwScanStatus;
    2692:	20 93 31 01 	sts	0x0131, r18
    2696:	7b c0       	rjmp	.+246    	; 0x278e <FPoolingPump2+0x6a4>
			  }else {
			   CommandSeqID[txPumpID]++;
    2698:	e9 2f       	mov	r30, r25
    269a:	f0 e0       	ldi	r31, 0x00	; 0
    269c:	ee 57       	subi	r30, 0x7E	; 126
    269e:	fd 4f       	sbci	r31, 0xFD	; 253
    26a0:	80 81       	ld	r24, Z
    26a2:	8f 5f       	subi	r24, 0xFF	; 255
    26a4:	80 83       	st	Z, r24
    26a6:	16 c0       	rjmp	.+44     	; 0x26d4 <FPoolingPump2+0x5ea>
			   stPoolingPump=pwSendAuthorizeCommand;
			   }
		  }else if (WayneReply==WR_NACK){
    26a8:	80 91 1a 01 	lds	r24, 0x011A
    26ac:	83 30       	cpi	r24, 0x03	; 3
    26ae:	09 f0       	breq	.+2      	; 0x26b2 <FPoolingPump2+0x5c8>
    26b0:	6e c0       	rjmp	.+220    	; 0x278e <FPoolingPump2+0x6a4>
		      CommandSeqID[txPumpID]=0;
    26b2:	e0 91 17 01 	lds	r30, 0x0117
    26b6:	f0 e0       	ldi	r31, 0x00	; 0
    26b8:	ee 57       	subi	r30, 0x7E	; 126
    26ba:	fd 4f       	sbci	r31, 0xFD	; 253
    26bc:	10 82       	st	Z, r1
              stPoolingPump=pwRetrySendAuthorizeCommand;
    26be:	84 e1       	ldi	r24, 0x14	; 20
    26c0:	61 c0       	rjmp	.+194    	; 0x2784 <FPoolingPump2+0x69a>
		  }
	      break;
     case pwRetrySendAuthorizeCommand:
	      iSend++;
    26c2:	80 91 f9 03 	lds	r24, 0x03F9
    26c6:	8f 5f       	subi	r24, 0xFF	; 255
    26c8:	80 93 f9 03 	sts	0x03F9, r24
		  if (iSend<nSend)stPoolingPump=pwSendAuthorizeCommand;
    26cc:	90 91 77 02 	lds	r25, 0x0277
    26d0:	89 17       	cp	r24, r25
    26d2:	10 f4       	brcc	.+4      	; 0x26d8 <FPoolingPump2+0x5ee>
    26d4:	82 e1       	ldi	r24, 0x12	; 18
    26d6:	56 c0       	rjmp	.+172    	; 0x2784 <FPoolingPump2+0x69a>
		  else
		  if (iSend>=nSend)stPoolingPump=pwNoPump;
    26d8:	84 e0       	ldi	r24, 0x04	; 4
    26da:	54 c0       	rjmp	.+168    	; 0x2784 <FPoolingPump2+0x69a>
	 case pwSendGeneralStatus:
	      
	      break;
	 //Price Config	  
	 case pwSendPriceConfig:
	      stPoolingPump=pwWaitACK; 
    26dc:	86 e1       	ldi	r24, 0x16	; 22
    26de:	52 c0       	rjmp	.+164    	; 0x2784 <FPoolingPump2+0x69a>
	      break;
	 case pwWaitACK:
	      PumpStatus[PumpAddr]=PW_PRICE_UPDATED;
    26e0:	e0 91 05 01 	lds	r30, 0x0105
    26e4:	f0 e0       	ldi	r31, 0x00	; 0
    26e6:	eb 54       	subi	r30, 0x4B	; 75
    26e8:	fc 4f       	sbci	r31, 0xFC	; 252
    26ea:	8f e0       	ldi	r24, 0x0F	; 15
    26ec:	14 c0       	rjmp	.+40     	; 0x2716 <FPoolingPump2+0x62c>
		  stPoolingPump=pwUpdatePumpStatus;
          break;	 
	 //Acknowledge--------------
	 case pwReplyACK:
	      FWayneSendCommand(CMD_ACK,WayneRxSequence,txPumpID,0);
    26ee:	87 e0       	ldi	r24, 0x07	; 7
    26f0:	60 91 18 01 	lds	r22, 0x0118
    26f4:	40 91 17 01 	lds	r20, 0x0117
    26f8:	20 e0       	ldi	r18, 0x00	; 0
    26fa:	0e 94 95 07 	call	0xf2a	; 0xf2a <FWayneSendCommand>
		  stPoolingPump=pwScanMessage;
    26fe:	88 e1       	ldi	r24, 0x18	; 24
    2700:	41 c0       	rjmp	.+130    	; 0x2784 <FPoolingPump2+0x69a>
	      break;	 
	 case pwScanMessage:
	      if (PumpStatus[txPumpID]==PW_NONE){
    2702:	80 91 17 01 	lds	r24, 0x0117
    2706:	e8 2f       	mov	r30, r24
    2708:	f0 e0       	ldi	r31, 0x00	; 0
    270a:	eb 54       	subi	r30, 0x4B	; 75
    270c:	fc 4f       	sbci	r31, 0xFC	; 252
    270e:	80 81       	ld	r24, Z
    2710:	88 23       	and	r24, r24
    2712:	11 f4       	brne	.+4      	; 0x2718 <FPoolingPump2+0x62e>
			  PumpStatus[txPumpID]=PW_ONLINE;
    2714:	86 e0       	ldi	r24, 0x06	; 6
    2716:	80 83       	st	Z, r24
		  }		  
	      stPoolingPump=pwUpdatePumpStatus;
    2718:	85 e0       	ldi	r24, 0x05	; 5
    271a:	34 c0       	rjmp	.+104    	; 0x2784 <FPoolingPump2+0x69a>
	      break;		  
		  		 		  
     //Next Pump----------------
     case pwInitDelayNextPump:
	      TimDelayNextPump=0;
    271c:	10 92 22 01 	sts	0x0122, r1
    2720:	10 92 21 01 	sts	0x0121, r1
          stPoolingPump=pwDelayNextPump;
    2724:	8a e1       	ldi	r24, 0x1A	; 26
    2726:	2e c0       	rjmp	.+92     	; 0x2784 <FPoolingPump2+0x69a>
	      break;
     case pwDelayNextPump:
	      if (TimDelayNextPump>=TDelayNextPump)//20
    2728:	80 91 3c 01 	lds	r24, 0x013C
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	20 91 21 01 	lds	r18, 0x0121
    2732:	30 91 22 01 	lds	r19, 0x0122
    2736:	28 17       	cp	r18, r24
    2738:	39 07       	cpc	r19, r25
    273a:	48 f1       	brcs	.+82     	; 0x278e <FPoolingPump2+0x6a4>
    273c:	22 c0       	rjmp	.+68     	; 0x2782 <FPoolingPump2+0x698>
		      stPoolingPump=pwNextPump;
	      break;
     case pwNextPump:	      
          iPoolingID++;
    273e:	90 91 16 01 	lds	r25, 0x0116
    2742:	9f 5f       	subi	r25, 0xFF	; 255
    2744:	90 93 16 01 	sts	0x0116, r25
	      if (iPoolingID<ScanPumpMax){
    2748:	80 91 61 02 	lds	r24, 0x0261
    274c:	98 17       	cp	r25, r24
    274e:	e8 f4       	brcc	.+58     	; 0x278a <FPoolingPump2+0x6a0>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2750:	e1 99       	sbic	0x1c, 1	; 28
    2752:	fe cf       	rjmp	.-4      	; 0x2750 <FPoolingPump2+0x666>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    2754:	89 2f       	mov	r24, r25
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	83 5f       	subi	r24, 0xF3	; 243
    275a:	9f 4f       	sbci	r25, 0xFF	; 255
    275c:	9f bb       	out	0x1f, r25	; 31
    275e:	8e bb       	out	0x1e, r24	; 30
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
    2760:	e0 9a       	sbi	0x1c, 0	; 28
    2762:	8d b3       	in	r24, 0x1d	; 29
			  txPumpID=eeprom_read_byte(&DefPumpID[iPoolingID]);
    2764:	80 93 17 01 	sts	0x0117, r24
			  if (txPumpID>0){
    2768:	88 23       	and	r24, r24
    276a:	59 f0       	breq	.+22     	; 0x2782 <FPoolingPump2+0x698>
			      txPumpID=txPumpID-1;
    276c:	81 50       	subi	r24, 0x01	; 1
    276e:	80 93 17 01 	sts	0x0117, r24
			      iSend=0;TimSend=0;
    2772:	10 92 f9 03 	sts	0x03F9, r1
    2776:	10 92 24 04 	sts	0x0424, r1
    277a:	10 92 23 04 	sts	0x0423, r1
			      stPoolingPump=pwScanStatus;
    277e:	82 e0       	ldi	r24, 0x02	; 2
    2780:	01 c0       	rjmp	.+2      	; 0x2784 <FPoolingPump2+0x69a>
			   }else stPoolingPump=pwNextPump;
    2782:	8b e1       	ldi	r24, 0x1B	; 27
    2784:	80 93 31 01 	sts	0x0131, r24
    2788:	02 c0       	rjmp	.+4      	; 0x278e <FPoolingPump2+0x6a4>
		  } else stPoolingPump=pwInit;//pwInitPumpAddr;
    278a:	10 92 31 01 	sts	0x0131, r1
		  #endif
		  
		  //stPoolingPump=pwInitPumpAddr;
	      break;
	 }
}
    278e:	6e 96       	adiw	r28, 0x1e	; 30
    2790:	0f b6       	in	r0, 0x3f	; 63
    2792:	f8 94       	cli
    2794:	de bf       	out	0x3e, r29	; 62
    2796:	0f be       	out	0x3f, r0	; 63
    2798:	cd bf       	out	0x3d, r28	; 61
    279a:	cf 91       	pop	r28
    279c:	df 91       	pop	r29
    279e:	1f 91       	pop	r17
    27a0:	0f 91       	pop	r16
    27a2:	ff 90       	pop	r15
    27a4:	ef 90       	pop	r14
    27a6:	df 90       	pop	r13
    27a8:	cf 90       	pop	r12
    27aa:	af 90       	pop	r10
    27ac:	08 95       	ret

000027ae <TerminalSend>:
       while(pgm_read_byte(&(*strSendf)))
	         _uart(Com, 1, pgm_read_byte(&(*strSendf++)));
	}
}

void TerminalSend(char Com,char *strSend){
    27ae:	28 2f       	mov	r18, r24
    27b0:	ab 01       	movw	r20, r22
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    27b2:	e1 99       	sbic	0x1c, 1	; 28
    27b4:	fe cf       	rjmp	.-4      	; 0x27b2 <TerminalSend+0x4>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    27b6:	84 e0       	ldi	r24, 0x04	; 4
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	9f bb       	out	0x1f, r25	; 31
    27bc:	8e bb       	out	0x1e, r24	; 30
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
    27be:	e0 9a       	sbi	0x1c, 0	; 28
    27c0:	8d b3       	in	r24, 0x1d	; 29
   if (eeprom_read_byte(&DefTerminalDebug)){
    27c2:	88 23       	and	r24, r24
    27c4:	21 f0       	breq	.+8      	; 0x27ce <TerminalSend+0x20>
       _uart_print(Com,1,strSend);
    27c6:	82 2f       	mov	r24, r18
    27c8:	61 e0       	ldi	r22, 0x01	; 1
    27ca:	0e 94 5d 18 	call	0x30ba	; 0x30ba <_uart_print>
    27ce:	08 95       	ret

000027d0 <SystemSetSlave>:

return Result;
}

void SystemSetSlave(){
     SystemComLevel(CL_232);
    27d0:	81 e0       	ldi	r24, 0x01	; 1
    27d2:	0e 94 61 01 	call	0x2c2	; 0x2c2 <SystemComLevel>
     //_uart_setting(1,GetBaudrate(eeprom_read_byte(&DefBaudrate[1])),8,P_NONE,1);
	 //_uart_init(0,GetBaudrate(eeprom_read_byte(&DefBaudrate[0])));	

	 _uart_init(0,9600);	
    27d6:	80 e0       	ldi	r24, 0x00	; 0
    27d8:	40 e8       	ldi	r20, 0x80	; 128
    27da:	55 e2       	ldi	r21, 0x25	; 37
    27dc:	60 e0       	ldi	r22, 0x00	; 0
    27de:	70 e0       	ldi	r23, 0x00	; 0
    27e0:	0e 94 1a 18 	call	0x3034	; 0x3034 <_uart_init>
	 _uart_init(1,9600);	
    27e4:	81 e0       	ldi	r24, 0x01	; 1
    27e6:	40 e8       	ldi	r20, 0x80	; 128
    27e8:	55 e2       	ldi	r21, 0x25	; 37
    27ea:	60 e0       	ldi	r22, 0x00	; 0
    27ec:	70 e0       	ldi	r23, 0x00	; 0
    27ee:	0e 94 1a 18 	call	0x3034	; 0x3034 <_uart_init>
}
    27f2:	08 95       	ret

000027f4 <SystemSetDispenser>:

//enum eBaudRateValue{brNone,br9600,br19200,br5787};

void SystemSetDispenser(char TDispenserBrand){
    27f4:	ef 92       	push	r14
    27f6:	0f 93       	push	r16
     unsigned int brValue;

	 switch(TDispenserBrand){
    27f8:	81 30       	cpi	r24, 0x01	; 1
    27fa:	d9 f0       	breq	.+54     	; 0x2832 <SystemSetDispenser+0x3e>
    27fc:	81 30       	cpi	r24, 0x01	; 1
    27fe:	38 f0       	brcs	.+14     	; 0x280e <SystemSetDispenser+0x1a>
    2800:	82 30       	cpi	r24, 0x02	; 2
    2802:	09 f4       	brne	.+2      	; 0x2806 <SystemSetDispenser+0x12>
    2804:	3d c0       	rjmp	.+122    	; 0x2880 <SystemSetDispenser+0x8c>
    2806:	83 30       	cpi	r24, 0x03	; 3
    2808:	09 f0       	breq	.+2      	; 0x280c <SystemSetDispenser+0x18>
    280a:	99 c0       	rjmp	.+306    	; 0x293e <SystemSetDispenser+0x14a>
    280c:	67 c0       	rjmp	.+206    	; 0x28dc <SystemSetDispenser+0xe8>
	 case ST_NONE:
	      //_uart_setting(0,GetBaudrate(eeprom_read_byte(&DefBaudrate[0])),8,P_NONE,1);
		  _uart_init(0,9600);
    280e:	80 e0       	ldi	r24, 0x00	; 0
    2810:	40 e8       	ldi	r20, 0x80	; 128
    2812:	55 e2       	ldi	r21, 0x25	; 37
    2814:	60 e0       	ldi	r22, 0x00	; 0
    2816:	70 e0       	ldi	r23, 0x00	; 0
    2818:	0e 94 1a 18 	call	0x3034	; 0x3034 <_uart_init>
		  _uart_init(1,9600);
    281c:	81 e0       	ldi	r24, 0x01	; 1
    281e:	40 e8       	ldi	r20, 0x80	; 128
    2820:	55 e2       	ldi	r21, 0x25	; 37
    2822:	60 e0       	ldi	r22, 0x00	; 0
    2824:	70 e0       	ldi	r23, 0x00	; 0
    2826:	0e 94 1a 18 	call	0x3034	; 0x3034 <_uart_init>
          SystemComLevel(CL_232);
    282a:	81 e0       	ldi	r24, 0x01	; 1
    282c:	0e 94 61 01 	call	0x2c2	; 0x2c2 <SystemComLevel>
    2830:	86 c0       	rjmp	.+268    	; 0x293e <SystemSetDispenser+0x14a>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2832:	e1 99       	sbic	0x1c, 1	; 28
    2834:	fe cf       	rjmp	.-4      	; 0x2832 <SystemSetDispenser+0x3e>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    2836:	8e e1       	ldi	r24, 0x1E	; 30
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	9f bb       	out	0x1f, r25	; 31
    283c:	8e bb       	out	0x1e, r24	; 30
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
    283e:	e0 9a       	sbi	0x1c, 0	; 28
    2840:	8d b3       	in	r24, 0x1d	; 29
	      break;
	 case ST_GILBARCO:
	      if (eeprom_read_byte(&DefHGMode)==HM_TTL)
    2842:	81 11       	cpse	r24, r1
		       SystemComLevel(CL_TTL);
		  else SystemComLevel(CL_232);
    2844:	81 e0       	ldi	r24, 0x01	; 1
    2846:	0e 94 61 01 	call	0x2c2	; 0x2c2 <SystemComLevel>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    284a:	e1 99       	sbic	0x1c, 1	; 28
    284c:	fe cf       	rjmp	.-4      	; 0x284a <SystemSetDispenser+0x56>
#endif

#if	E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    284e:	25 e0       	ldi	r18, 0x05	; 5
    2850:	30 e0       	ldi	r19, 0x00	; 0
    2852:	3f bb       	out	0x1f, r19	; 31
    2854:	2e bb       	out	0x1e, r18	; 30
#endif
    EEDR = __value;
    2856:	83 e0       	ldi	r24, 0x03	; 3
    2858:	8d bb       	out	0x1d, r24	; 29

    __asm__ __volatile__ (
    285a:	0f b6       	in	r0, 0x3f	; 63
    285c:	f8 94       	cli
    285e:	e2 9a       	sbi	0x1c, 2	; 28
    2860:	e1 9a       	sbi	0x1c, 1	; 28
    2862:	0f be       	out	0x3f, r0	; 63
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2864:	e1 99       	sbic	0x1c, 1	; 28
    2866:	fe cf       	rjmp	.-4      	; 0x2864 <SystemSetDispenser+0x70>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    2868:	3f bb       	out	0x1f, r19	; 31
    286a:	2e bb       	out	0x1e, r18	; 30
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
    286c:	e0 9a       	sbi	0x1c, 0	; 28
    286e:	8d b3       	in	r24, 0x1d	; 29
	      
		  eeprom_write_byte(&DefBaudrate[0],br5787);
		  brValue=GetBaudrate(eeprom_read_byte(&DefBaudrate[0]));
	      //_uart_setting(0,brValue,8,P_NONE,1);
		  
          _uart_init(0,5787);
    2870:	80 e0       	ldi	r24, 0x00	; 0
    2872:	4b e9       	ldi	r20, 0x9B	; 155
    2874:	56 e1       	ldi	r21, 0x16	; 22
    2876:	60 e0       	ldi	r22, 0x00	; 0
    2878:	70 e0       	ldi	r23, 0x00	; 0
    287a:	0e 94 1a 18 	call	0x3034	; 0x3034 <_uart_init>
    287e:	5f c0       	rjmp	.+190    	; 0x293e <SystemSetDispenser+0x14a>
	      break;
	 case ST_WAYNE_DART:		       
	 	  SystemComLevel(CL_485);
    2880:	82 e0       	ldi	r24, 0x02	; 2
    2882:	0e 94 61 01 	call	0x2c2	; 0x2c2 <SystemComLevel>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2886:	e1 99       	sbic	0x1c, 1	; 28
    2888:	fe cf       	rjmp	.-4      	; 0x2886 <SystemSetDispenser+0x92>
#endif

#if	E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    288a:	25 e0       	ldi	r18, 0x05	; 5
    288c:	30 e0       	ldi	r19, 0x00	; 0
    288e:	3f bb       	out	0x1f, r19	; 31
    2890:	2e bb       	out	0x1e, r18	; 30
#endif
    EEDR = __value;
    2892:	81 e0       	ldi	r24, 0x01	; 1
    2894:	8d bb       	out	0x1d, r24	; 29

    __asm__ __volatile__ (
    2896:	0f b6       	in	r0, 0x3f	; 63
    2898:	f8 94       	cli
    289a:	e2 9a       	sbi	0x1c, 2	; 28
    289c:	e1 9a       	sbi	0x1c, 1	; 28
    289e:	0f be       	out	0x3f, r0	; 63
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    28a0:	e1 99       	sbic	0x1c, 1	; 28
    28a2:	fe cf       	rjmp	.-4      	; 0x28a0 <SystemSetDispenser+0xac>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    28a4:	3f bb       	out	0x1f, r19	; 31
    28a6:	2e bb       	out	0x1e, r18	; 30
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
    28a8:	e0 9a       	sbi	0x1c, 0	; 28
    28aa:	8d b3       	in	r24, 0x1d	; 29
     //IFType=IT_SLAVE;
}

int GetBaudrate(char brSetting){
int Result=0;
     switch(brSetting){
    28ac:	82 30       	cpi	r24, 0x02	; 2
    28ae:	59 f0       	breq	.+22     	; 0x28c6 <SystemSetDispenser+0xd2>
    28b0:	82 30       	cpi	r24, 0x02	; 2
    28b2:	18 f0       	brcs	.+6      	; 0x28ba <SystemSetDispenser+0xc6>
    28b4:	83 30       	cpi	r24, 0x03	; 3
    28b6:	21 f4       	brne	.+8      	; 0x28c0 <SystemSetDispenser+0xcc>
    28b8:	09 c0       	rjmp	.+18     	; 0x28cc <SystemSetDispenser+0xd8>
    28ba:	40 e8       	ldi	r20, 0x80	; 128
    28bc:	55 e2       	ldi	r21, 0x25	; 37
    28be:	08 c0       	rjmp	.+16     	; 0x28d0 <SystemSetDispenser+0xdc>
    28c0:	40 e0       	ldi	r20, 0x00	; 0
    28c2:	50 e0       	ldi	r21, 0x00	; 0
    28c4:	05 c0       	rjmp	.+10     	; 0x28d0 <SystemSetDispenser+0xdc>
    28c6:	40 e0       	ldi	r20, 0x00	; 0
    28c8:	5b e4       	ldi	r21, 0x4B	; 75
    28ca:	02 c0       	rjmp	.+4      	; 0x28d0 <SystemSetDispenser+0xdc>
    28cc:	4b e9       	ldi	r20, 0x9B	; 155
    28ce:	56 e1       	ldi	r21, 0x16	; 22
	      break;
	 case ST_WAYNE_DART:		       
	 	  SystemComLevel(CL_485);
          eeprom_write_byte(&DefBaudrate[0],br9600);
		  brValue=GetBaudrate(eeprom_read_byte(&DefBaudrate[0]));
	      _uart_setting(0,brValue,8,P_ODD,1);
    28d0:	60 e0       	ldi	r22, 0x00	; 0
    28d2:	70 e0       	ldi	r23, 0x00	; 0
    28d4:	80 e0       	ldi	r24, 0x00	; 0
    28d6:	28 e0       	ldi	r18, 0x08	; 8
    28d8:	01 e0       	ldi	r16, 0x01	; 1
    28da:	2d c0       	rjmp	.+90     	; 0x2936 <SystemSetDispenser+0x142>
	      break;
	 case ST_TATSUNO:
	 	  SystemComLevel(CL_485);
    28dc:	82 e0       	ldi	r24, 0x02	; 2
    28de:	0e 94 61 01 	call	0x2c2	; 0x2c2 <SystemComLevel>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    28e2:	e1 99       	sbic	0x1c, 1	; 28
    28e4:	fe cf       	rjmp	.-4      	; 0x28e2 <SystemSetDispenser+0xee>
#endif

#if	E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    28e6:	25 e0       	ldi	r18, 0x05	; 5
    28e8:	30 e0       	ldi	r19, 0x00	; 0
    28ea:	3f bb       	out	0x1f, r19	; 31
    28ec:	2e bb       	out	0x1e, r18	; 30
#endif
    EEDR = __value;
    28ee:	81 e0       	ldi	r24, 0x01	; 1
    28f0:	8d bb       	out	0x1d, r24	; 29

    __asm__ __volatile__ (
    28f2:	0f b6       	in	r0, 0x3f	; 63
    28f4:	f8 94       	cli
    28f6:	e2 9a       	sbi	0x1c, 2	; 28
    28f8:	e1 9a       	sbi	0x1c, 1	; 28
    28fa:	0f be       	out	0x3f, r0	; 63
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    28fc:	e1 99       	sbic	0x1c, 1	; 28
    28fe:	fe cf       	rjmp	.-4      	; 0x28fc <SystemSetDispenser+0x108>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    2900:	3f bb       	out	0x1f, r19	; 31
    2902:	2e bb       	out	0x1e, r18	; 30
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
    2904:	e0 9a       	sbi	0x1c, 0	; 28
    2906:	8d b3       	in	r24, 0x1d	; 29
     //IFType=IT_SLAVE;
}

int GetBaudrate(char brSetting){
int Result=0;
     switch(brSetting){
    2908:	82 30       	cpi	r24, 0x02	; 2
    290a:	59 f0       	breq	.+22     	; 0x2922 <SystemSetDispenser+0x12e>
    290c:	82 30       	cpi	r24, 0x02	; 2
    290e:	18 f0       	brcs	.+6      	; 0x2916 <SystemSetDispenser+0x122>
    2910:	83 30       	cpi	r24, 0x03	; 3
    2912:	21 f4       	brne	.+8      	; 0x291c <SystemSetDispenser+0x128>
    2914:	09 c0       	rjmp	.+18     	; 0x2928 <SystemSetDispenser+0x134>
    2916:	40 e8       	ldi	r20, 0x80	; 128
    2918:	55 e2       	ldi	r21, 0x25	; 37
    291a:	08 c0       	rjmp	.+16     	; 0x292c <SystemSetDispenser+0x138>
    291c:	40 e0       	ldi	r20, 0x00	; 0
    291e:	50 e0       	ldi	r21, 0x00	; 0
    2920:	05 c0       	rjmp	.+10     	; 0x292c <SystemSetDispenser+0x138>
    2922:	40 e0       	ldi	r20, 0x00	; 0
    2924:	5b e4       	ldi	r21, 0x4B	; 75
    2926:	02 c0       	rjmp	.+4      	; 0x292c <SystemSetDispenser+0x138>
    2928:	4b e9       	ldi	r20, 0x9B	; 155
    292a:	56 e1       	ldi	r21, 0x16	; 22
	      break;
	 case ST_TATSUNO:
	 	  SystemComLevel(CL_485);
          eeprom_write_byte(&DefBaudrate[0],br9600);
		  brValue=GetBaudrate(eeprom_read_byte(&DefBaudrate[0]));
	      _uart_setting(0,brValue,8,P_EVEN,1);
    292c:	60 e0       	ldi	r22, 0x00	; 0
    292e:	70 e0       	ldi	r23, 0x00	; 0
    2930:	80 e0       	ldi	r24, 0x00	; 0
    2932:	28 e0       	ldi	r18, 0x08	; 8
    2934:	02 e0       	ldi	r16, 0x02	; 2
    2936:	ee 24       	eor	r14, r14
    2938:	e3 94       	inc	r14
    293a:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <_uart_setting>
	      break;
	 case ST_LG:
	      break;			  
	 }
	 InitPumpData();
    293e:	0e 94 cd 01 	call	0x39a	; 0x39a <InitPumpData>
}
    2942:	0f 91       	pop	r16
    2944:	ef 90       	pop	r14
    2946:	08 95       	ret

00002948 <SystemInit>:
	      break;	 
	 }
}

void SystemInit(){
	PORTA=0xFF;	DDRA=0xFF;
    2948:	9f ef       	ldi	r25, 0xFF	; 255
    294a:	9b bb       	out	0x1b, r25	; 27
    294c:	9a bb       	out	0x1a, r25	; 26
	PORTE=0xFF;	DDRE=0xFF;
    294e:	97 b9       	out	0x07, r25	; 7
    2950:	96 b9       	out	0x06, r25	; 6
	DDRB= 0b01001111;//SPI Slave Input Pin-->SCK,MOSI
    2952:	8f e4       	ldi	r24, 0x4F	; 79
    2954:	87 bb       	out	0x17, r24	; 23
	PORTB=0b11111111;
    2956:	98 bb       	out	0x18, r25	; 24
	DDRD=0x00;PORTD=0b11111111;
    2958:	11 ba       	out	0x11, r1	; 17
    295a:	92 bb       	out	0x12, r25	; 18
	//Slave 128_SS_High
    sbi(DDRD,2);sbi(PORTD,2);
    295c:	8a 9a       	sbi	0x11, 2	; 17
    295e:	92 9a       	sbi	0x12, 2	; 18
	_spi_init(0,1);
    2960:	80 e0       	ldi	r24, 0x00	; 0
    2962:	61 e0       	ldi	r22, 0x01	; 1
    2964:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <_spi_init>
     sei();
	 */
}

void InitSystemTimer(){
	TCCR0 |= (1 << CS02) | (1 << CS00);
    2968:	83 b7       	in	r24, 0x33	; 51
    296a:	85 60       	ori	r24, 0x05	; 5
    296c:	83 bf       	out	0x33, r24	; 51
	TIMSK |= _BV(TOIE0);
    296e:	89 b7       	in	r24, 0x39	; 57
    2970:	82 60       	ori	r24, 0x02	; 2
    2972:	89 bf       	out	0x39, r24	; 57
	DDRD=0x00;PORTD=0b11111111;
	//Slave 128_SS_High
    sbi(DDRD,2);sbi(PORTD,2);
	_spi_init(0,1);
	InitSystemTimer();
	sei();
    2974:	78 94       	sei
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2976:	e1 99       	sbic	0x1c, 1	; 28
    2978:	fe cf       	rjmp	.-4      	; 0x2976 <SystemInit+0x2e>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    297a:	86 e0       	ldi	r24, 0x06	; 6
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	9f bb       	out	0x1f, r25	; 31
    2980:	8e bb       	out	0x1e, r24	; 30
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
    2982:	e0 9a       	sbi	0x1c, 0	; 28
    2984:	8d b3       	in	r24, 0x1d	; 29
     //IFType=IT_SLAVE;
}

int GetBaudrate(char brSetting){
int Result=0;
     switch(brSetting){
    2986:	82 30       	cpi	r24, 0x02	; 2
    2988:	59 f0       	breq	.+22     	; 0x29a0 <SystemInit+0x58>
    298a:	82 30       	cpi	r24, 0x02	; 2
    298c:	18 f0       	brcs	.+6      	; 0x2994 <SystemInit+0x4c>
    298e:	83 30       	cpi	r24, 0x03	; 3
    2990:	21 f4       	brne	.+8      	; 0x299a <SystemInit+0x52>
    2992:	09 c0       	rjmp	.+18     	; 0x29a6 <SystemInit+0x5e>
    2994:	80 e8       	ldi	r24, 0x80	; 128
    2996:	95 e2       	ldi	r25, 0x25	; 37
    2998:	08 c0       	rjmp	.+16     	; 0x29aa <SystemInit+0x62>
    299a:	80 e0       	ldi	r24, 0x00	; 0
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	05 c0       	rjmp	.+10     	; 0x29aa <SystemInit+0x62>
    29a0:	80 e0       	ldi	r24, 0x00	; 0
    29a2:	9b e4       	ldi	r25, 0x4B	; 75
    29a4:	02 c0       	rjmp	.+4      	; 0x29aa <SystemInit+0x62>
    29a6:	8b e9       	ldi	r24, 0x9B	; 155
    29a8:	96 e1       	ldi	r25, 0x16	; 22
	//Slave 128_SS_High
    sbi(DDRD,2);sbi(PORTD,2);
	_spi_init(0,1);
	InitSystemTimer();
	sei();
	_uart_init(1,GetBaudrate(eeprom_read_byte(&DefBaudrate[1])));
    29aa:	ac 01       	movw	r20, r24
    29ac:	66 27       	eor	r22, r22
    29ae:	57 fd       	sbrc	r21, 7
    29b0:	60 95       	com	r22
    29b2:	76 2f       	mov	r23, r22
    29b4:	81 e0       	ldi	r24, 0x01	; 1
    29b6:	0e 94 1a 18 	call	0x3034	; 0x3034 <_uart_init>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    29ba:	e1 99       	sbic	0x1c, 1	; 28
    29bc:	fe cf       	rjmp	.-4      	; 0x29ba <SystemInit+0x72>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    29be:	80 e0       	ldi	r24, 0x00	; 0
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	9f bb       	out	0x1f, r25	; 31
    29c4:	8e bb       	out	0x1e, r24	; 30
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
    29c6:	e0 9a       	sbi	0x1c, 0	; 28
    29c8:	8d b3       	in	r24, 0x1d	; 29
    IFType=eeprom_read_byte(&DefIFType);
    29ca:	80 93 00 01 	sts	0x0100, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    29ce:	e1 99       	sbic	0x1c, 1	; 28
    29d0:	fe cf       	rjmp	.-4      	; 0x29ce <SystemInit+0x86>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    29d2:	8c e0       	ldi	r24, 0x0C	; 12
    29d4:	90 e0       	ldi	r25, 0x00	; 0
    29d6:	9f bb       	out	0x1f, r25	; 31
    29d8:	8e bb       	out	0x1e, r24	; 30
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
    29da:	e0 9a       	sbi	0x1c, 0	; 28
    29dc:	8d b3       	in	r24, 0x1d	; 29
    SequenceTimeout=eeprom_read_byte(&DefSequenceTimeout);
    29de:	80 93 36 04 	sts	0x0436, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    29e2:	e1 99       	sbic	0x1c, 1	; 28
    29e4:	fe cf       	rjmp	.-4      	; 0x29e2 <SystemInit+0x9a>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    29e6:	83 e0       	ldi	r24, 0x03	; 3
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	9f bb       	out	0x1f, r25	; 31
    29ec:	8e bb       	out	0x1e, r24	; 30
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
    29ee:	e0 9a       	sbi	0x1c, 0	; 28
    29f0:	8d b3       	in	r24, 0x1d	; 29
	MaxPumpScanned=eeprom_read_byte(&DefPumpMaxCount);		
    29f2:	80 93 25 01 	sts	0x0125, r24

	switch(IFType){
    29f6:	80 91 00 01 	lds	r24, 0x0100
    29fa:	81 30       	cpi	r24, 0x01	; 1
    29fc:	19 f0       	breq	.+6      	; 0x2a04 <SystemInit+0xbc>
    29fe:	82 30       	cpi	r24, 0x02	; 2
    2a00:	c1 f4       	brne	.+48     	; 0x2a32 <SystemInit+0xea>
    2a02:	06 c0       	rjmp	.+12     	; 0x2a10 <SystemInit+0xc8>
	case IT_SLAVE:
	     BlinkRate=20;
    2a04:	84 e1       	ldi	r24, 0x14	; 20
    2a06:	80 93 11 04 	sts	0x0411, r24
	     SystemSetSlave();
    2a0a:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <SystemSetSlave>
    2a0e:	11 c0       	rjmp	.+34     	; 0x2a32 <SystemInit+0xea>
	     break;
	case IT_STANDALONE:
	     BlinkRate=5;
    2a10:	85 e0       	ldi	r24, 0x05	; 5
    2a12:	80 93 11 04 	sts	0x0411, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2a16:	e1 99       	sbic	0x1c, 1	; 28
    2a18:	fe cf       	rjmp	.-4      	; 0x2a16 <SystemInit+0xce>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    2a1a:	81 e0       	ldi	r24, 0x01	; 1
    2a1c:	90 e0       	ldi	r25, 0x00	; 0
    2a1e:	9f bb       	out	0x1f, r25	; 31
    2a20:	8e bb       	out	0x1e, r24	; 30
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
    2a22:	e0 9a       	sbi	0x1c, 0	; 28
    2a24:	8d b3       	in	r24, 0x1d	; 29
		 StandaloneType=eeprom_read_byte(&DefStandaloneType);
    2a26:	80 93 01 01 	sts	0x0101, r24
         SystemSetDispenser(StandaloneType);
    2a2a:	80 91 01 01 	lds	r24, 0x0101
    2a2e:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <SystemSetDispenser>
	     break;	
	}
	InitPumpData();
    2a32:	0e 94 cd 01 	call	0x39a	; 0x39a <InitPumpData>
	IsStopPoolSequence=False;
    2a36:	10 92 13 01 	sts	0x0113, r1
	 }Dest[Length]=0;
}


void StartupInfo(){
    _uart_printf(1,1,PSTR("Initialized"));
    2a3a:	81 e0       	ldi	r24, 0x01	; 1
    2a3c:	61 e0       	ldi	r22, 0x01	; 1
    2a3e:	4c e2       	ldi	r20, 0x2C	; 44
    2a40:	51 e0       	ldi	r21, 0x01	; 1
    2a42:	0e 94 85 18 	call	0x310a	; 0x310a <_uart_printf>
	     break;	
	}
	InitPumpData();
	IsStopPoolSequence=False;
	StartupInfo();
	System485(DIR_RX);//ReceiveMode
    2a46:	82 e0       	ldi	r24, 0x02	; 2
    2a48:	0e 94 9c 01 	call	0x338	; 0x338 <System485>
}
    2a4c:	08 95       	ret

00002a4e <main>:
	 if (IFType==IT_SLAVE)//EDC Line Protocol
	    _uart(0,1,dataSPI);
	 ScanStandaloneFlow(dataSPI);	 
}

void main (){
    2a4e:	1f 93       	push	r17
	SystemInit();
    2a50:	0e 94 a4 14 	call	0x2948	; 0x2948 <SystemInit>
		    TimWatchSequence=0;
		}
        if (TimWatchSequence>SequenceTimeout){
		    TimWatchSequence=0; 
		    //SendAcknoledge(SC_FREEZE,SequenceTimeout);
		    IsRestartPooling=True;
    2a54:	11 e0       	ldi	r17, 0x01	; 1

void systemAntiFreeze(){
static char zSequence=0;

	if (IFType==IT_STANDALONE){
	    if (SequencePool>zSequence){
    2a56:	30 91 26 01 	lds	r19, 0x0126
		    TimWatchSequence=0;
		}
        if (TimWatchSequence>SequenceTimeout){
    2a5a:	40 91 36 04 	lds	r20, 0x0436
    2a5e:	20 91 de 02 	lds	r18, 0x02DE
    2a62:	90 91 35 01 	lds	r25, 0x0135
	SystemInit();

   // SystemComLevel(CL_232);
	//_uart_init(0,5787);
	while(1){	   
	   switch(IFType){
    2a66:	80 91 00 01 	lds	r24, 0x0100
    2a6a:	82 30       	cpi	r24, 0x02	; 2
    2a6c:	e1 f7       	brne	.-8      	; 0x2a66 <main+0x18>
//15694 95.8% -> 14746 90.0%

void systemAntiFreeze(){
static char zSequence=0;

	if (IFType==IT_STANDALONE){
    2a6e:	80 91 00 01 	lds	r24, 0x0100
    2a72:	82 30       	cpi	r24, 0x02	; 2
    2a74:	41 f4       	brne	.+16     	; 0x2a86 <main+0x38>
	    if (SequencePool>zSequence){
    2a76:	93 17       	cp	r25, r19
    2a78:	20 f0       	brcs	.+8      	; 0x2a82 <main+0x34>
		    TimWatchSequence=0;
		}
        if (TimWatchSequence>SequenceTimeout){
    2a7a:	42 17       	cp	r20, r18
    2a7c:	18 f4       	brcc	.+6      	; 0x2a84 <main+0x36>
		    TimWatchSequence=0; 
		    //SendAcknoledge(SC_FREEZE,SequenceTimeout);
		    IsRestartPooling=True;
    2a7e:	10 93 03 01 	sts	0x0103, r17
    2a82:	20 e0       	ldi	r18, 0x00	; 0
    2a84:	93 2f       	mov	r25, r19
	   switch(IFType){
	   case IT_SLAVE:
	        break;
	   case IT_STANDALONE:
	        systemAntiFreeze();//15714 15724			
			switch(StandaloneType){
    2a86:	80 91 01 01 	lds	r24, 0x0101
    2a8a:	81 30       	cpi	r24, 0x01	; 1
    2a8c:	19 f0       	breq	.+6      	; 0x2a94 <main+0x46>
    2a8e:	82 30       	cpi	r24, 0x02	; 2
    2a90:	51 f7       	brne	.-44     	; 0x2a66 <main+0x18>
    2a92:	07 c0       	rjmp	.+14     	; 0x2aa2 <main+0x54>
    2a94:	20 93 de 02 	sts	0x02DE, r18
    2a98:	90 93 35 01 	sts	0x0135, r25
			case ST_GILBARCO:
			     FPoolingPump();
    2a9c:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <FPoolingPump>
    2aa0:	da cf       	rjmp	.-76     	; 0x2a56 <main+0x8>
			     break;
    2aa2:	20 93 de 02 	sts	0x02DE, r18
    2aa6:	90 93 35 01 	sts	0x0135, r25
            case ST_WAYNE_DART:
                 FPoolingPump2(); 
    2aaa:	0e 94 75 10 	call	0x20ea	; 0x20ea <FPoolingPump2>
    2aae:	d3 cf       	rjmp	.-90     	; 0x2a56 <main+0x8>

00002ab0 <ScanStandaloneFlow>:
     	  break;	 
	 }
   return Result;
}

void ScanStandaloneFlow(char xData){//<STX>[CMD][MSG]<ETX>: 0x05 0x06
    2ab0:	0f 93       	push	r16
    2ab2:	1f 93       	push	r17
    2ab4:	df 93       	push	r29
    2ab6:	cf 93       	push	r28
    2ab8:	cd b7       	in	r28, 0x3d	; 61
    2aba:	de b7       	in	r29, 0x3e	; 62
    2abc:	64 97       	sbiw	r28, 0x14	; 20
    2abe:	0f b6       	in	r0, 0x3f	; 63
    2ac0:	f8 94       	cli
    2ac2:	de bf       	out	0x3e, r29	; 62
    2ac4:	0f be       	out	0x3f, r0	; 63
    2ac6:	cd bf       	out	0x3d, r28	; 61
     char slaveCmd,slaveMsg;        //            0x02:STANDALONE  		 0x00:NONE 0x01:GILBARCO 0x02:TATSUNO 0x03:LG 0x04:WYNE
     char ComPort,ComBaud,i;          //          0x03:DIAGNOSTIC
	 unsigned int brValue;
	 char strSend[20];
     slaveCmd=0;slaveMsg=0;         //            0x04:Totalizer
	 zFlowData[3]=zFlowData[2];     //            0x05:Baudrate
    2ac8:	90 91 38 01 	lds	r25, 0x0138
    2acc:	90 93 39 01 	sts	0x0139, r25
	 zFlowData[2]=zFlowData[1];     //            0x06:DebugTerminal:-->dtOn/dtOff
    2ad0:	00 91 37 01 	lds	r16, 0x0137
    2ad4:	00 93 38 01 	sts	0x0138, r16
	 zFlowData[1]=zFlowData[0];
    2ad8:	10 91 36 01 	lds	r17, 0x0136
    2adc:	10 93 37 01 	sts	0x0137, r17
	 zFlowData[0]=xData;
    2ae0:	80 93 36 01 	sts	0x0136, r24
	 //Scan SatndaloneMode Switch Command
	 if((zFlowData[0]==0x06)&(zFlowData[3]==0x05)){
    2ae4:	86 30       	cpi	r24, 0x06	; 6
    2ae6:	09 f0       	breq	.+2      	; 0x2aea <ScanStandaloneFlow+0x3a>
    2ae8:	a9 c1       	rjmp	.+850    	; 0x2e3c <ScanStandaloneFlow+0x38c>
    2aea:	95 30       	cpi	r25, 0x05	; 5
    2aec:	09 f0       	breq	.+2      	; 0x2af0 <ScanStandaloneFlow+0x40>
    2aee:	a6 c1       	rjmp	.+844    	; 0x2e3c <ScanStandaloneFlow+0x38c>
         slaveCmd=zFlowData[2];
         slaveMsg=zFlowData[1];

		 switch(slaveCmd){
    2af0:	80 2f       	mov	r24, r16
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	fc 01       	movw	r30, r24
    2af6:	31 97       	sbiw	r30, 0x01	; 1
    2af8:	e1 32       	cpi	r30, 0x21	; 33
    2afa:	f1 05       	cpc	r31, r1
    2afc:	08 f0       	brcs	.+2      	; 0x2b00 <ScanStandaloneFlow+0x50>
    2afe:	9a c1       	rjmp	.+820    	; 0x2e34 <ScanStandaloneFlow+0x384>
    2b00:	eb 58       	subi	r30, 0x8B	; 139
    2b02:	ff 4f       	sbci	r31, 0xFF	; 255
    2b04:	ee 0f       	add	r30, r30
    2b06:	ff 1f       	adc	r31, r31
    2b08:	05 90       	lpm	r0, Z+
    2b0a:	f4 91       	lpm	r31, Z+
    2b0c:	e0 2d       	mov	r30, r0
    2b0e:	09 94       	ijmp
		 case SC_SLAVE:		      
		      IFType=IT_SLAVE;
    2b10:	81 e0       	ldi	r24, 0x01	; 1
    2b12:	80 93 00 01 	sts	0x0100, r24
			  BlinkRate=20;
    2b16:	84 e1       	ldi	r24, 0x14	; 20
    2b18:	80 93 11 04 	sts	0x0411, r24
			  eeprom_write_byte(&DefIFType,IFType);
    2b1c:	20 91 00 01 	lds	r18, 0x0100
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2b20:	e1 99       	sbic	0x1c, 1	; 28
    2b22:	fe cf       	rjmp	.-4      	; 0x2b20 <ScanStandaloneFlow+0x70>
#endif

#if	E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    2b24:	80 e0       	ldi	r24, 0x00	; 0
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	9f bb       	out	0x1f, r25	; 31
    2b2a:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
    2b2c:	2d bb       	out	0x1d, r18	; 29

    __asm__ __volatile__ (
    2b2e:	0f b6       	in	r0, 0x3f	; 63
    2b30:	f8 94       	cli
    2b32:	e2 9a       	sbi	0x1c, 2	; 28
    2b34:	e1 9a       	sbi	0x1c, 1	; 28
    2b36:	0f be       	out	0x3f, r0	; 63
			  #ifdef DEBUG_CMD_TERM 
			  TerminalSendf(1,PSTR("Slave"));		
			  #endif
			  SystemSetSlave();			  		 
    2b38:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <SystemSetSlave>
    2b3c:	7b c1       	rjmp	.+758    	; 0x2e34 <ScanStandaloneFlow+0x384>
		      break;
         case SC_STANDALONE:
		      InitPumpData();		      
    2b3e:	0e 94 cd 01 	call	0x39a	; 0x39a <InitPumpData>
		      IFType=IT_STANDALONE;
    2b42:	82 e0       	ldi	r24, 0x02	; 2
    2b44:	80 93 00 01 	sts	0x0100, r24
			  BlinkRate=5;
    2b48:	85 e0       	ldi	r24, 0x05	; 5
    2b4a:	80 93 11 04 	sts	0x0411, r24
			  eeprom_write_byte(&DefIFType,IFType);
    2b4e:	20 91 00 01 	lds	r18, 0x0100
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2b52:	e1 99       	sbic	0x1c, 1	; 28
    2b54:	fe cf       	rjmp	.-4      	; 0x2b52 <ScanStandaloneFlow+0xa2>
#endif

#if	E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    2b56:	80 e0       	ldi	r24, 0x00	; 0
    2b58:	90 e0       	ldi	r25, 0x00	; 0
    2b5a:	9f bb       	out	0x1f, r25	; 31
    2b5c:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
    2b5e:	2d bb       	out	0x1d, r18	; 29

    __asm__ __volatile__ (
    2b60:	0f b6       	in	r0, 0x3f	; 63
    2b62:	f8 94       	cli
    2b64:	e2 9a       	sbi	0x1c, 2	; 28
    2b66:	e1 9a       	sbi	0x1c, 1	; 28
    2b68:	0f be       	out	0x3f, r0	; 63
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2b6a:	e1 99       	sbic	0x1c, 1	; 28
    2b6c:	fe cf       	rjmp	.-4      	; 0x2b6a <ScanStandaloneFlow+0xba>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    2b6e:	81 e0       	ldi	r24, 0x01	; 1
    2b70:	90 e0       	ldi	r25, 0x00	; 0
    2b72:	9f bb       	out	0x1f, r25	; 31
    2b74:	8e bb       	out	0x1e, r24	; 30
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
    2b76:	e0 9a       	sbi	0x1c, 0	; 28
    2b78:	8d b3       	in	r24, 0x1d	; 29
			  #ifdef DEBUG_CMD_TERM 
			  TerminalSendf(1,PSTR("Standalone"));
			  #endif
			  StandaloneType=eeprom_read_byte(&DefStandaloneType);
    2b7a:	80 93 01 01 	sts	0x0101, r24
              //StandaloneType=ST_WAYNE_DART;
              SystemSetDispenser(StandaloneType);
    2b7e:	80 91 01 01 	lds	r24, 0x0101
    2b82:	39 c0       	rjmp	.+114    	; 0x2bf6 <ScanStandaloneFlow+0x146>
			  //_uart_init(0,GetBaudrate(eeprom_read_byte(&DefBaudrate[0])));
			  //if (slaveMsg<=0x04)StandaloneType=slaveMsg;

		      break;
         case SC_SET_PUMP_TYPE:
		      IFType=IT_STANDALONE;
    2b84:	82 e0       	ldi	r24, 0x02	; 2
    2b86:	80 93 00 01 	sts	0x0100, r24
			  BlinkRate=5;
    2b8a:	85 e0       	ldi	r24, 0x05	; 5
    2b8c:	80 93 11 04 	sts	0x0411, r24
              StandaloneType=slaveMsg;
    2b90:	10 93 01 01 	sts	0x0101, r17
		      eeprom_write_byte(&DefStandaloneType,StandaloneType);			  		      
    2b94:	20 91 01 01 	lds	r18, 0x0101
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2b98:	e1 99       	sbic	0x1c, 1	; 28
    2b9a:	fe cf       	rjmp	.-4      	; 0x2b98 <ScanStandaloneFlow+0xe8>
#endif

#if	E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    2b9c:	81 e0       	ldi	r24, 0x01	; 1
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	9f bb       	out	0x1f, r25	; 31
    2ba2:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
    2ba4:	2d bb       	out	0x1d, r18	; 29

    __asm__ __volatile__ (
    2ba6:	0f b6       	in	r0, 0x3f	; 63
    2ba8:	f8 94       	cli
    2baa:	e2 9a       	sbi	0x1c, 2	; 28
    2bac:	e1 9a       	sbi	0x1c, 1	; 28
    2bae:	0f be       	out	0x3f, r0	; 63
			  sprintf_P(strSend,PSTR("Pump:%d"),StandaloneType);
    2bb0:	20 91 01 01 	lds	r18, 0x0101
    2bb4:	00 d0       	rcall	.+0      	; 0x2bb6 <ScanStandaloneFlow+0x106>
    2bb6:	00 d0       	rcall	.+0      	; 0x2bb8 <ScanStandaloneFlow+0x108>
    2bb8:	00 d0       	rcall	.+0      	; 0x2bba <ScanStandaloneFlow+0x10a>
    2bba:	ed b7       	in	r30, 0x3d	; 61
    2bbc:	fe b7       	in	r31, 0x3e	; 62
    2bbe:	31 96       	adiw	r30, 0x01	; 1
    2bc0:	ce 01       	movw	r24, r28
    2bc2:	01 96       	adiw	r24, 0x01	; 1
    2bc4:	ad b7       	in	r26, 0x3d	; 61
    2bc6:	be b7       	in	r27, 0x3e	; 62
    2bc8:	12 96       	adiw	r26, 0x02	; 2
    2bca:	9c 93       	st	X, r25
    2bcc:	8e 93       	st	-X, r24
    2bce:	11 97       	sbiw	r26, 0x01	; 1
    2bd0:	8f e8       	ldi	r24, 0x8F	; 143
    2bd2:	91 e0       	ldi	r25, 0x01	; 1
    2bd4:	93 83       	std	Z+3, r25	; 0x03
    2bd6:	82 83       	std	Z+2, r24	; 0x02
    2bd8:	24 83       	std	Z+4, r18	; 0x04
    2bda:	15 82       	std	Z+5, r1	; 0x05
    2bdc:	0e 94 ae 18 	call	0x315c	; 0x315c <sprintf_P>
              SystemSetDispenser(StandaloneType);
    2be0:	80 91 01 01 	lds	r24, 0x0101
    2be4:	2d b7       	in	r18, 0x3d	; 61
    2be6:	3e b7       	in	r19, 0x3e	; 62
    2be8:	2a 5f       	subi	r18, 0xFA	; 250
    2bea:	3f 4f       	sbci	r19, 0xFF	; 255
    2bec:	0f b6       	in	r0, 0x3f	; 63
    2bee:	f8 94       	cli
    2bf0:	3e bf       	out	0x3e, r19	; 62
    2bf2:	0f be       	out	0x3f, r0	; 63
    2bf4:	2d bf       	out	0x3d, r18	; 61
    2bf6:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <SystemSetDispenser>
    2bfa:	a9 c0       	rjmp	.+338    	; 0x2d4e <ScanStandaloneFlow+0x29e>
		      break;
         case SC_TOTALIZER:
		      #ifdef DEBUG_CMD_TERM 
		      _uart_printf(1,1,PSTR("SC_TOTALIZER"));
			  #endif
		      if ((slaveMsg>=1)&&(slaveMsg<=16)){
    2bfc:	81 2f       	mov	r24, r17
    2bfe:	81 50       	subi	r24, 0x01	; 1
    2c00:	80 31       	cpi	r24, 0x10	; 16
    2c02:	38 f4       	brcc	.+14     	; 0x2c12 <ScanStandaloneFlow+0x162>
		           IsRequestTotalizerInfo[(slaveMsg&0x0F)]=True;
    2c04:	e1 2f       	mov	r30, r17
    2c06:	f0 e0       	ldi	r31, 0x00	; 0
    2c08:	ef 70       	andi	r30, 0x0F	; 15
    2c0a:	f0 70       	andi	r31, 0x00	; 0
    2c0c:	ed 5e       	subi	r30, 0xED	; 237
    2c0e:	fb 4f       	sbci	r31, 0xFB	; 251
    2c10:	5e c0       	rjmp	.+188    	; 0x2cce <ScanStandaloneFlow+0x21e>
				  }
			  else if (slaveMsg==PUMP_ALL){
    2c12:	12 31       	cpi	r17, 0x12	; 18
    2c14:	09 f0       	breq	.+2      	; 0x2c18 <ScanStandaloneFlow+0x168>
    2c16:	0e c1       	rjmp	.+540    	; 0x2e34 <ScanStandaloneFlow+0x384>
    2c18:	81 e0       	ldi	r24, 0x01	; 1
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
		           #ifdef DEBUG_CMD_TERM 
				   _uart_printf(1,1,PSTR("PUMPALL"));
				   #endif
				   for (i=1;i<=16;i++)IsRequestTotalizerInfo[(i&0x0F)]=True;
    2c1c:	21 e0       	ldi	r18, 0x01	; 1
    2c1e:	fc 01       	movw	r30, r24
    2c20:	ef 70       	andi	r30, 0x0F	; 15
    2c22:	f0 70       	andi	r31, 0x00	; 0
    2c24:	ed 5e       	subi	r30, 0xED	; 237
    2c26:	fb 4f       	sbci	r31, 0xFB	; 251
    2c28:	20 83       	st	Z, r18
    2c2a:	01 96       	adiw	r24, 0x01	; 1
    2c2c:	81 31       	cpi	r24, 0x11	; 17
    2c2e:	91 05       	cpc	r25, r1
    2c30:	b1 f7       	brne	.-20     	; 0x2c1e <ScanStandaloneFlow+0x16e>
    2c32:	00 c1       	rjmp	.+512    	; 0x2e34 <ScanStandaloneFlow+0x384>
				  }				  	     
		      break; 
         case SC_BAUDRATE:
		      ComPort=(slaveMsg>>4)-3;//3..4
    2c34:	31 2f       	mov	r19, r17
    2c36:	32 95       	swap	r19
    2c38:	3f 70       	andi	r19, 0x0F	; 15
    2c3a:	33 50       	subi	r19, 0x03	; 3
			  ComBaud=(slaveMsg&0x0F);//0,1,2,3
    2c3c:	21 2f       	mov	r18, r17
    2c3e:	2f 70       	andi	r18, 0x0F	; 15
     //IFType=IT_SLAVE;
}

int GetBaudrate(char brSetting){
int Result=0;
     switch(brSetting){
    2c40:	22 30       	cpi	r18, 0x02	; 2
    2c42:	51 f0       	breq	.+20     	; 0x2c58 <ScanStandaloneFlow+0x1a8>
    2c44:	22 30       	cpi	r18, 0x02	; 2
    2c46:	28 f0       	brcs	.+10     	; 0x2c52 <ScanStandaloneFlow+0x1a2>
    2c48:	23 30       	cpi	r18, 0x03	; 3
    2c4a:	49 f0       	breq	.+18     	; 0x2c5e <ScanStandaloneFlow+0x1ae>
    2c4c:	40 e0       	ldi	r20, 0x00	; 0
    2c4e:	50 e0       	ldi	r21, 0x00	; 0
    2c50:	08 c0       	rjmp	.+16     	; 0x2c62 <ScanStandaloneFlow+0x1b2>
    2c52:	40 e8       	ldi	r20, 0x80	; 128
    2c54:	55 e2       	ldi	r21, 0x25	; 37
    2c56:	05 c0       	rjmp	.+10     	; 0x2c62 <ScanStandaloneFlow+0x1b2>
    2c58:	40 e0       	ldi	r20, 0x00	; 0
    2c5a:	5b e4       	ldi	r21, 0x4B	; 75
    2c5c:	02 c0       	rjmp	.+4      	; 0x2c62 <ScanStandaloneFlow+0x1b2>
    2c5e:	4b e9       	ldi	r20, 0x9B	; 155
    2c60:	56 e1       	ldi	r21, 0x16	; 22
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2c62:	e1 99       	sbic	0x1c, 1	; 28
    2c64:	fe cf       	rjmp	.-4      	; 0x2c62 <ScanStandaloneFlow+0x1b2>
#endif

#if	E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    2c66:	83 2f       	mov	r24, r19
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	8b 5f       	subi	r24, 0xFB	; 251
    2c6c:	9f 4f       	sbci	r25, 0xFF	; 255
    2c6e:	9f bb       	out	0x1f, r25	; 31
    2c70:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
    2c72:	2d bb       	out	0x1d, r18	; 29

    __asm__ __volatile__ (
    2c74:	0f b6       	in	r0, 0x3f	; 63
    2c76:	f8 94       	cli
    2c78:	e2 9a       	sbi	0x1c, 2	; 28
    2c7a:	e1 9a       	sbi	0x1c, 1	; 28
    2c7c:	0f be       	out	0x3f, r0	; 63
			  eeprom_write_byte(&DefBaudrate[ComPort],ComBaud);
			  #ifdef DEBUG_CMD_TERM 
 			  sprintf_P(strSend,PSTR("COM:%d,%i"),ComPort,brValue);
			  TerminalSend(1,strSend);
			  #endif
			  _uart_init(ComPort,brValue);
    2c7e:	60 e0       	ldi	r22, 0x00	; 0
    2c80:	70 e0       	ldi	r23, 0x00	; 0
    2c82:	83 2f       	mov	r24, r19
    2c84:	0e 94 1a 18 	call	0x3034	; 0x3034 <_uart_init>
    2c88:	d5 c0       	rjmp	.+426    	; 0x2e34 <ScanStandaloneFlow+0x384>
		      break;
		 case SC_TRANSACTION:
		          if (slaveMsg<=16)IsRequestTransInfo[slaveMsg&0x0F]=True;
    2c8a:	11 31       	cpi	r17, 0x11	; 17
    2c8c:	38 f4       	brcc	.+14     	; 0x2c9c <ScanStandaloneFlow+0x1ec>
    2c8e:	e1 2f       	mov	r30, r17
    2c90:	f0 e0       	ldi	r31, 0x00	; 0
    2c92:	ef 70       	andi	r30, 0x0F	; 15
    2c94:	f0 70       	andi	r31, 0x00	; 0
    2c96:	e6 57       	subi	r30, 0x76	; 118
    2c98:	fd 4f       	sbci	r31, 0xFD	; 253
    2c9a:	19 c0       	rjmp	.+50     	; 0x2cce <ScanStandaloneFlow+0x21e>
				  else 
				  if (slaveMsg==PUMP_ALL){
    2c9c:	12 31       	cpi	r17, 0x12	; 18
    2c9e:	09 f0       	breq	.+2      	; 0x2ca2 <ScanStandaloneFlow+0x1f2>
    2ca0:	c9 c0       	rjmp	.+402    	; 0x2e34 <ScanStandaloneFlow+0x384>
    2ca2:	81 e0       	ldi	r24, 0x01	; 1
    2ca4:	90 e0       	ldi	r25, 0x00	; 0
				      for(i=1;i<=16;i++){
					      IsRequestTransInfo[i&0x0F]=True;
    2ca6:	21 e0       	ldi	r18, 0x01	; 1
    2ca8:	fc 01       	movw	r30, r24
    2caa:	ef 70       	andi	r30, 0x0F	; 15
    2cac:	f0 70       	andi	r31, 0x00	; 0
    2cae:	e6 57       	subi	r30, 0x76	; 118
    2cb0:	fd 4f       	sbci	r31, 0xFD	; 253
    2cb2:	20 83       	st	Z, r18
    2cb4:	01 96       	adiw	r24, 0x01	; 1
		      break;
		 case SC_TRANSACTION:
		          if (slaveMsg<=16)IsRequestTransInfo[slaveMsg&0x0F]=True;
				  else 
				  if (slaveMsg==PUMP_ALL){
				      for(i=1;i<=16;i++){
    2cb6:	81 31       	cpi	r24, 0x11	; 17
    2cb8:	91 05       	cpc	r25, r1
    2cba:	b1 f7       	brne	.-20     	; 0x2ca8 <ScanStandaloneFlow+0x1f8>
    2cbc:	bb c0       	rjmp	.+374    	; 0x2e34 <ScanStandaloneFlow+0x384>
				 sprintf_P(strSend,PSTR("ReqTrans:%d"),slaveMsg);
				 TerminalSend(1,strSend);
              #endif
		      break;     
         case SC_PUMP_LOCK:
		          if (slaveMsg<=16)PumpLock[slaveMsg&0x0F]=True;
    2cbe:	11 31       	cpi	r17, 0x11	; 17
    2cc0:	48 f4       	brcc	.+18     	; 0x2cd4 <ScanStandaloneFlow+0x224>
    2cc2:	e1 2f       	mov	r30, r17
    2cc4:	f0 e0       	ldi	r31, 0x00	; 0
    2cc6:	ef 70       	andi	r30, 0x0F	; 15
    2cc8:	f0 70       	andi	r31, 0x00	; 0
    2cca:	e4 53       	subi	r30, 0x34	; 52
    2ccc:	fd 4f       	sbci	r31, 0xFD	; 253
    2cce:	81 e0       	ldi	r24, 0x01	; 1
    2cd0:	80 83       	st	Z, r24
    2cd2:	b0 c0       	rjmp	.+352    	; 0x2e34 <ScanStandaloneFlow+0x384>
				  else 
				  if (slaveMsg==PUMP_ALL){
    2cd4:	12 31       	cpi	r17, 0x12	; 18
    2cd6:	09 f0       	breq	.+2      	; 0x2cda <ScanStandaloneFlow+0x22a>
    2cd8:	ad c0       	rjmp	.+346    	; 0x2e34 <ScanStandaloneFlow+0x384>
    2cda:	81 e0       	ldi	r24, 0x01	; 1
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
				      for(i=1;i<=16;i++){
					      PumpLock[i&0x0F]=True;
    2cde:	21 e0       	ldi	r18, 0x01	; 1
    2ce0:	fc 01       	movw	r30, r24
    2ce2:	ef 70       	andi	r30, 0x0F	; 15
    2ce4:	f0 70       	andi	r31, 0x00	; 0
    2ce6:	e4 53       	subi	r30, 0x34	; 52
    2ce8:	fd 4f       	sbci	r31, 0xFD	; 253
    2cea:	20 83       	st	Z, r18
    2cec:	01 96       	adiw	r24, 0x01	; 1
		      break;     
         case SC_PUMP_LOCK:
		          if (slaveMsg<=16)PumpLock[slaveMsg&0x0F]=True;
				  else 
				  if (slaveMsg==PUMP_ALL){
				      for(i=1;i<=16;i++){
    2cee:	81 31       	cpi	r24, 0x11	; 17
    2cf0:	91 05       	cpc	r25, r1
    2cf2:	b1 f7       	brne	.-20     	; 0x2ce0 <ScanStandaloneFlow+0x230>
    2cf4:	9f c0       	rjmp	.+318    	; 0x2e34 <ScanStandaloneFlow+0x384>
				 sprintf_P(strSend,PSTR("PumpLock:%d"),slaveMsg);
				 TerminalSend(1,strSend);
              #endif
		      break;
         case SC_PUMP_UNLOCK:
		          if (slaveMsg<=16)PumpLock[slaveMsg&0x0F]=False;
    2cf6:	11 31       	cpi	r17, 0x11	; 17
    2cf8:	40 f4       	brcc	.+16     	; 0x2d0a <ScanStandaloneFlow+0x25a>
    2cfa:	e1 2f       	mov	r30, r17
    2cfc:	f0 e0       	ldi	r31, 0x00	; 0
    2cfe:	ef 70       	andi	r30, 0x0F	; 15
    2d00:	f0 70       	andi	r31, 0x00	; 0
    2d02:	e4 53       	subi	r30, 0x34	; 52
    2d04:	fd 4f       	sbci	r31, 0xFD	; 253
    2d06:	10 82       	st	Z, r1
    2d08:	95 c0       	rjmp	.+298    	; 0x2e34 <ScanStandaloneFlow+0x384>
			   	  else 
			   	  if (slaveMsg==PUMP_ALL){
    2d0a:	12 31       	cpi	r17, 0x12	; 18
    2d0c:	09 f0       	breq	.+2      	; 0x2d10 <ScanStandaloneFlow+0x260>
    2d0e:	92 c0       	rjmp	.+292    	; 0x2e34 <ScanStandaloneFlow+0x384>
    2d10:	81 e0       	ldi	r24, 0x01	; 1
    2d12:	90 e0       	ldi	r25, 0x00	; 0
			   	      for(i=1;i<=16;i++){
			   		      PumpLock[i&0x0F]=False;
    2d14:	fc 01       	movw	r30, r24
    2d16:	ef 70       	andi	r30, 0x0F	; 15
    2d18:	f0 70       	andi	r31, 0x00	; 0
    2d1a:	e4 53       	subi	r30, 0x34	; 52
    2d1c:	fd 4f       	sbci	r31, 0xFD	; 253
    2d1e:	10 82       	st	Z, r1
    2d20:	01 96       	adiw	r24, 0x01	; 1
		      break;
         case SC_PUMP_UNLOCK:
		          if (slaveMsg<=16)PumpLock[slaveMsg&0x0F]=False;
			   	  else 
			   	  if (slaveMsg==PUMP_ALL){
			   	      for(i=1;i<=16;i++){
    2d22:	81 31       	cpi	r24, 0x11	; 17
    2d24:	91 05       	cpc	r25, r1
    2d26:	b1 f7       	brne	.-20     	; 0x2d14 <ScanStandaloneFlow+0x264>
    2d28:	85 c0       	rjmp	.+266    	; 0x2e34 <ScanStandaloneFlow+0x384>
			   	 sprintf_P(strSend,PSTR("PumpUnLock:%d"),slaveMsg);
				 TerminalSend(1,strSend);			 
               #endif
		       break;
          case SC_TOTALIZER_ACK:
		       IsTotalizerACK=True;
    2d2a:	81 e0       	ldi	r24, 0x01	; 1
    2d2c:	80 93 14 01 	sts	0x0114, r24
			   PumpAck=slaveMsg;
    2d30:	10 93 df 02 	sts	0x02DF, r17
    2d34:	7f c0       	rjmp	.+254    	; 0x2e34 <ScanStandaloneFlow+0x384>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2d36:	e1 99       	sbic	0x1c, 1	; 28
    2d38:	fe cf       	rjmp	.-4      	; 0x2d36 <ScanStandaloneFlow+0x286>
#endif

#if	E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    2d3a:	88 e0       	ldi	r24, 0x08	; 8
    2d3c:	90 e0       	ldi	r25, 0x00	; 0
    2d3e:	9f bb       	out	0x1f, r25	; 31
    2d40:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
    2d42:	1d bb       	out	0x1d, r17	; 29

    __asm__ __volatile__ (
    2d44:	0f b6       	in	r0, 0x3f	; 63
    2d46:	f8 94       	cli
    2d48:	e2 9a       	sbi	0x1c, 2	; 28
    2d4a:	e1 9a       	sbi	0x1c, 1	; 28
    2d4c:	0f be       	out	0x3f, r0	; 63
		       #ifdef DEBUG_CMD_TERM 
			   sprintf_P(strSend,PSTR("NoPumpCount:%d"),slaveMsg);
			   TerminalSend(1,strSend);			 
			   #endif
		       eeprom_write_byte(&DefNoPumpCountMax,slaveMsg);
			   IsRestartPooling=True;
    2d4e:	81 e0       	ldi	r24, 0x01	; 1
    2d50:	80 93 03 01 	sts	0x0103, r24
    2d54:	6f c0       	rjmp	.+222    	; 0x2e34 <ScanStandaloneFlow+0x384>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2d56:	e1 99       	sbic	0x1c, 1	; 28
    2d58:	fe cf       	rjmp	.-4      	; 0x2d56 <ScanStandaloneFlow+0x2a6>
#endif

#if	E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    2d5a:	87 e0       	ldi	r24, 0x07	; 7
    2d5c:	90 e0       	ldi	r25, 0x00	; 0
    2d5e:	ef cf       	rjmp	.-34     	; 0x2d3e <ScanStandaloneFlow+0x28e>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2d60:	e1 99       	sbic	0x1c, 1	; 28
    2d62:	fe cf       	rjmp	.-4      	; 0x2d60 <ScanStandaloneFlow+0x2b0>
#endif

#if	E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    2d64:	89 e0       	ldi	r24, 0x09	; 9
    2d66:	90 e0       	ldi	r25, 0x00	; 0
    2d68:	ea cf       	rjmp	.-44     	; 0x2d3e <ScanStandaloneFlow+0x28e>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2d6a:	e1 99       	sbic	0x1c, 1	; 28
    2d6c:	fe cf       	rjmp	.-4      	; 0x2d6a <ScanStandaloneFlow+0x2ba>
#endif

#if	E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    2d6e:	8a e0       	ldi	r24, 0x0A	; 10
    2d70:	90 e0       	ldi	r25, 0x00	; 0
    2d72:	e5 cf       	rjmp	.-54     	; 0x2d3e <ScanStandaloneFlow+0x28e>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2d74:	e1 99       	sbic	0x1c, 1	; 28
    2d76:	fe cf       	rjmp	.-4      	; 0x2d74 <ScanStandaloneFlow+0x2c4>
#endif

#if	E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    2d78:	8b e0       	ldi	r24, 0x0B	; 11
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	e0 cf       	rjmp	.-64     	; 0x2d3e <ScanStandaloneFlow+0x28e>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2d7e:	e1 99       	sbic	0x1c, 1	; 28
    2d80:	fe cf       	rjmp	.-4      	; 0x2d7e <ScanStandaloneFlow+0x2ce>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    2d82:	88 e0       	ldi	r24, 0x08	; 8
    2d84:	90 e0       	ldi	r25, 0x00	; 0
    2d86:	04 c0       	rjmp	.+8      	; 0x2d90 <ScanStandaloneFlow+0x2e0>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2d88:	e1 99       	sbic	0x1c, 1	; 28
    2d8a:	fe cf       	rjmp	.-4      	; 0x2d88 <ScanStandaloneFlow+0x2d8>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    2d8c:	87 e0       	ldi	r24, 0x07	; 7
    2d8e:	90 e0       	ldi	r25, 0x00	; 0
    2d90:	9f bb       	out	0x1f, r25	; 31
    2d92:	8e bb       	out	0x1e, r24	; 30
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
    2d94:	e0 9a       	sbi	0x1c, 0	; 28
    2d96:	1d b3       	in	r17, 0x1d	; 29
    2d98:	4d c0       	rjmp	.+154    	; 0x2e34 <ScanStandaloneFlow+0x384>
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2d9a:	e1 99       	sbic	0x1c, 1	; 28
    2d9c:	fe cf       	rjmp	.-4      	; 0x2d9a <ScanStandaloneFlow+0x2ea>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    2d9e:	89 e0       	ldi	r24, 0x09	; 9
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	f6 cf       	rjmp	.-20     	; 0x2d90 <ScanStandaloneFlow+0x2e0>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2da4:	e1 99       	sbic	0x1c, 1	; 28
    2da6:	fe cf       	rjmp	.-4      	; 0x2da4 <ScanStandaloneFlow+0x2f4>
#endif

#if	E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    2da8:	8c e0       	ldi	r24, 0x0C	; 12
    2daa:	90 e0       	ldi	r25, 0x00	; 0
    2dac:	9f bb       	out	0x1f, r25	; 31
    2dae:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
    2db0:	1d bb       	out	0x1d, r17	; 29

    __asm__ __volatile__ (
    2db2:	0f b6       	in	r0, 0x3f	; 63
    2db4:	f8 94       	cli
    2db6:	e2 9a       	sbi	0x1c, 2	; 28
    2db8:	e1 9a       	sbi	0x1c, 1	; 28
    2dba:	0f be       	out	0x3f, r0	; 63
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2dbc:	e1 99       	sbic	0x1c, 1	; 28
    2dbe:	fe cf       	rjmp	.-4      	; 0x2dbc <ScanStandaloneFlow+0x30c>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    2dc0:	9f bb       	out	0x1f, r25	; 31
    2dc2:	8e bb       	out	0x1e, r24	; 30
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
    2dc4:	e0 9a       	sbi	0x1c, 0	; 28
    2dc6:	8d b3       	in	r24, 0x1d	; 29
		       #ifdef DEBUG_CMD_TERM 
			   sprintf_P(strSend,PSTR("PoolTrySend:%d"),slaveMsg);
			   TerminalSend(1,strSend);			 		        
			   #endif 
		       eeprom_write_byte(&DefSequenceTimeout,slaveMsg);
			   SequenceTimeout=eeprom_read_byte(&DefSequenceTimeout);
    2dc8:	80 93 36 04 	sts	0x0436, r24
    2dcc:	c0 cf       	rjmp	.-128    	; 0x2d4e <ScanStandaloneFlow+0x29e>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2dce:	e1 99       	sbic	0x1c, 1	; 28
    2dd0:	fe cf       	rjmp	.-4      	; 0x2dce <ScanStandaloneFlow+0x31e>
#endif

#if	E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    2dd2:	81 2f       	mov	r24, r17
    2dd4:	82 95       	swap	r24
    2dd6:	8f 70       	andi	r24, 0x0F	; 15
    2dd8:	90 e0       	ldi	r25, 0x00	; 0
    2dda:	83 5f       	subi	r24, 0xF3	; 243
    2ddc:	9f 4f       	sbci	r25, 0xFF	; 255
    2dde:	9f bb       	out	0x1f, r25	; 31
    2de0:	8e bb       	out	0x1e, r24	; 30
			   IsRestartPooling=True;		       
		       break;
          case SC_SET_PUMPID:
		       eeprom_write_byte(&DefPumpID[slaveMsg>>4],(slaveMsg&0x0F));		       
    2de2:	81 2f       	mov	r24, r17
    2de4:	8f 70       	andi	r24, 0x0F	; 15
#endif
    EEDR = __value;
    2de6:	8d bb       	out	0x1d, r24	; 29
    2de8:	ad cf       	rjmp	.-166    	; 0x2d44 <ScanStandaloneFlow+0x294>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2dea:	e1 99       	sbic	0x1c, 1	; 28
    2dec:	fe cf       	rjmp	.-4      	; 0x2dea <ScanStandaloneFlow+0x33a>
#endif

#if	E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    2dee:	81 2f       	mov	r24, r17
    2df0:	90 e0       	ldi	r25, 0x00	; 0
    2df2:	83 5f       	subi	r24, 0xF3	; 243
    2df4:	9f 4f       	sbci	r25, 0xFF	; 255
    2df6:	9f bb       	out	0x1f, r25	; 31
    2df8:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
    2dfa:	1d ba       	out	0x1d, r1	; 29
    2dfc:	a3 cf       	rjmp	.-186    	; 0x2d44 <ScanStandaloneFlow+0x294>
			   TerminalSend(1,strSend);			 		        
			   #endif
               IsRestartPooling=True;
		       break;
          case SC_STOP_POOL_SEQUENCE:
		       IsStopPoolSequence=True;
    2dfe:	81 e0       	ldi	r24, 0x01	; 1
    2e00:	80 93 13 01 	sts	0x0113, r24
    2e04:	17 c0       	rjmp	.+46     	; 0x2e34 <ScanStandaloneFlow+0x384>
		       break; 
          case SC_START_POOL_SEQUENCE:
		       IsStopPoolSequence=False;
    2e06:	10 92 13 01 	sts	0x0113, r1
    2e0a:	14 c0       	rjmp	.+40     	; 0x2e34 <ScanStandaloneFlow+0x384>
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    2e0c:	e1 99       	sbic	0x1c, 1	; 28
    2e0e:	fe cf       	rjmp	.-4      	; 0x2e0c <ScanStandaloneFlow+0x35c>
#endif

#if	E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    2e10:	8e e1       	ldi	r24, 0x1E	; 30
    2e12:	90 e0       	ldi	r25, 0x00	; 0
    2e14:	9f bb       	out	0x1f, r25	; 31
    2e16:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
    2e18:	1d bb       	out	0x1d, r17	; 29

    __asm__ __volatile__ (
    2e1a:	0f b6       	in	r0, 0x3f	; 63
    2e1c:	f8 94       	cli
    2e1e:	e2 9a       	sbi	0x1c, 2	; 28
    2e20:	e1 9a       	sbi	0x1c, 1	; 28
    2e22:	0f be       	out	0x3f, r0	; 63
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    2e24:	e1 99       	sbic	0x1c, 1	; 28
    2e26:	fe cf       	rjmp	.-4      	; 0x2e24 <ScanStandaloneFlow+0x374>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    2e28:	9f bb       	out	0x1f, r25	; 31
    2e2a:	8e bb       	out	0x1e, r24	; 30
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
    2e2c:	e0 9a       	sbi	0x1c, 0	; 28
    2e2e:	8d b3       	in	r24, 0x1d	; 29
		       break; 
          case SC_HGM_MODE:
		       eeprom_write_byte(&DefHGMode,slaveMsg);
			   SystemComLevel(eeprom_read_byte(&DefHGMode));
    2e30:	0e 94 61 01 	call	0x2c2	; 0x2c2 <SystemComLevel>
			   
		       break;
		 }
       //AcknoledgeCommand
       SendCommandAcknoledge(slaveCmd,slaveMsg);
    2e34:	80 2f       	mov	r24, r16
    2e36:	61 2f       	mov	r22, r17
    2e38:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <SendCommandAcknoledge>
	 }//EndIf	 
}
    2e3c:	64 96       	adiw	r28, 0x14	; 20
    2e3e:	0f b6       	in	r0, 0x3f	; 63
    2e40:	f8 94       	cli
    2e42:	de bf       	out	0x3e, r29	; 62
    2e44:	0f be       	out	0x3f, r0	; 63
    2e46:	cd bf       	out	0x3d, r28	; 61
    2e48:	cf 91       	pop	r28
    2e4a:	df 91       	pop	r29
    2e4c:	1f 91       	pop	r17
    2e4e:	0f 91       	pop	r16
    2e50:	08 95       	ret

00002e52 <__vector_18>:
	   
	//_uart(1,1,dataRX1);
	//OnReceive1(dataRX1);
}

ISR(SPI_STC_vect){
    2e52:	1f 92       	push	r1
    2e54:	0f 92       	push	r0
    2e56:	0f b6       	in	r0, 0x3f	; 63
    2e58:	0f 92       	push	r0
    2e5a:	11 24       	eor	r1, r1
    2e5c:	1f 93       	push	r17
    2e5e:	2f 93       	push	r18
    2e60:	3f 93       	push	r19
    2e62:	4f 93       	push	r20
    2e64:	5f 93       	push	r21
    2e66:	6f 93       	push	r22
    2e68:	7f 93       	push	r23
    2e6a:	8f 93       	push	r24
    2e6c:	9f 93       	push	r25
    2e6e:	af 93       	push	r26
    2e70:	bf 93       	push	r27
    2e72:	ef 93       	push	r30
    2e74:	ff 93       	push	r31
char dataSPI;
     dataSPI=SPDR;
    2e76:	1f b1       	in	r17, 0x0f	; 15
          ScanStandaloneFlow(dataSPI);
	      break;
	 }
	 */
	 
	 if (IFType==IT_SLAVE)//EDC Line Protocol
    2e78:	80 91 00 01 	lds	r24, 0x0100
    2e7c:	81 30       	cpi	r24, 0x01	; 1
    2e7e:	29 f4       	brne	.+10     	; 0x2e8a <__vector_18+0x38>
	    _uart(0,1,dataSPI);
    2e80:	80 e0       	ldi	r24, 0x00	; 0
    2e82:	61 e0       	ldi	r22, 0x01	; 1
    2e84:	41 2f       	mov	r20, r17
    2e86:	0e 94 46 18 	call	0x308c	; 0x308c <_uart>
	 ScanStandaloneFlow(dataSPI);	 
    2e8a:	81 2f       	mov	r24, r17
    2e8c:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <ScanStandaloneFlow>
}
    2e90:	ff 91       	pop	r31
    2e92:	ef 91       	pop	r30
    2e94:	bf 91       	pop	r27
    2e96:	af 91       	pop	r26
    2e98:	9f 91       	pop	r25
    2e9a:	8f 91       	pop	r24
    2e9c:	7f 91       	pop	r23
    2e9e:	6f 91       	pop	r22
    2ea0:	5f 91       	pop	r21
    2ea2:	4f 91       	pop	r20
    2ea4:	3f 91       	pop	r19
    2ea6:	2f 91       	pop	r18
    2ea8:	1f 91       	pop	r17
    2eaa:	0f 90       	pop	r0
    2eac:	0f be       	out	0x3f, r0	; 63
    2eae:	0f 90       	pop	r0
    2eb0:	1f 90       	pop	r1
    2eb2:	18 95       	reti

00002eb4 <_spi_init>:
enum SPI_TYPE{SLAVE,MASTER};
enum SPI_MODE{POOLING,INTERUPT};


void _spi_init(unsigned char __mode, unsigned char __interrupt){
	if(__mode){
    2eb4:	88 23       	and	r24, r24
    2eb6:	41 f0       	breq	.+16     	; 0x2ec8 <_spi_init+0x14>
		_SPI_DDR = (1 << _SPI_MOSI) | (1 << _SPI_SCK);
    2eb8:	80 ea       	ldi	r24, 0xA0	; 160
    2eba:	87 bb       	out	0x17, r24	; 23
		if(__interrupt)
    2ebc:	66 23       	and	r22, r22
    2ebe:	11 f0       	breq	.+4      	; 0x2ec4 <_spi_init+0x10>
			SPCR = (1 << SPIE) | (1 << SPE) | (1 << MSTR) | (1 << SPR1);
    2ec0:	82 ed       	ldi	r24, 0xD2	; 210
    2ec2:	0a c0       	rjmp	.+20     	; 0x2ed8 <_spi_init+0x24>
		else
			SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR1);
    2ec4:	82 e5       	ldi	r24, 0x52	; 82
    2ec6:	08 c0       	rjmp	.+16     	; 0x2ed8 <_spi_init+0x24>
	}
	else{

		_SPI_DDR = (1 << _SPI_MISO);
    2ec8:	80 e4       	ldi	r24, 0x40	; 64
    2eca:	87 bb       	out	0x17, r24	; 23
		if(__interrupt)
    2ecc:	66 23       	and	r22, r22
    2ece:	21 f0       	breq	.+8      	; 0x2ed8 <_spi_init+0x24>
			{SPCR = (1 << SPIE) | (1 << SPE);sei();}
    2ed0:	80 ec       	ldi	r24, 0xC0	; 192
    2ed2:	8d b9       	out	0x0d, r24	; 13
    2ed4:	78 94       	sei
    2ed6:	08 95       	ret
		else
			SPCR = (1 << SPE);
    2ed8:	8d b9       	out	0x0d, r24	; 13
    2eda:	08 95       	ret

00002edc <_spi_enable>:
			
	}
}

void _spi_enable(unsigned char __status, unsigned char __select){
	if(__status){
    2edc:	88 23       	and	r24, r24
    2ede:	31 f0       	breq	.+12     	; 0x2eec <_spi_enable+0x10>
		if(__select)
    2ee0:	66 23       	and	r22, r22
    2ee2:	11 f0       	breq	.+4      	; 0x2ee8 <_spi_enable+0xc>
			cbi(_MMC_PORT, _MMC_PIN);
    2ee4:	3b 98       	cbi	0x07, 3	; 7
    2ee6:	08 95       	ret
		else
			cbi(_SLAVE_PORT, _SLAVE_PIN);
    2ee8:	92 98       	cbi	0x12, 2	; 18
    2eea:	08 95       	ret
	}
	else{
		if(__select)
    2eec:	66 23       	and	r22, r22
    2eee:	11 f0       	breq	.+4      	; 0x2ef4 <_spi_enable+0x18>
			sbi(_MMC_PORT, _MMC_PIN);
    2ef0:	3b 9a       	sbi	0x07, 3	; 7
    2ef2:	08 95       	ret
		else
			sbi(_SLAVE_PORT, _SLAVE_PIN);
    2ef4:	92 9a       	sbi	0x12, 2	; 18
    2ef6:	08 95       	ret

00002ef8 <_spi>:
	}
}

unsigned char _spi(unsigned char __data){   
	SPDR = __data;
    2ef8:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1 << SPIF)));
    2efa:	77 9b       	sbis	0x0e, 7	; 14
    2efc:	fe cf       	rjmp	.-4      	; 0x2efa <_spi+0x2>
	return SPDR;
    2efe:	8f b1       	in	r24, 0x0f	; 15
}
    2f00:	08 95       	ret

00002f02 <_spi_rx>:

unsigned char _spi_rx(unsigned char __select){
//	return 1;
}
    2f02:	08 95       	ret

00002f04 <_spi_tx>:

unsigned char _spi_tx(unsigned char __command, unsigned char __select, char *__message){
//	_spi_enable(_SPI_ENABLE, __select);
//	_spi_enable(_SPI_DISABLE, __select);
//	return 0;
}
    2f04:	08 95       	ret

00002f06 <_spi_interrupt>:

unsigned char _spi_interrupt(void){
	//return 0;
}
    2f06:	08 95       	ret

00002f08 <_spi_command>:
	}

	__command[__i++] = 0x7D;
	__command[__i++] = '\0';
	*/
}
    2f08:	08 95       	ret

00002f0a <_uart_setting>:

#include "UART.h"

//_uart_setting(0,GetBaudrate(eeprom_read_byte(&DefBaudrate[0])),8,P_EVEN,1);

void _uart_setting(char Port,unsigned long Baudrate,char DataSet,char ParitySet, char StopBitSet){
    2f0a:	af 92       	push	r10
    2f0c:	bf 92       	push	r11
    2f0e:	cf 92       	push	r12
    2f10:	df 92       	push	r13
    2f12:	ef 92       	push	r14
    2f14:	ff 92       	push	r15
    2f16:	0f 93       	push	r16
    2f18:	1f 93       	push	r17
    2f1a:	f8 2e       	mov	r15, r24
    2f1c:	5a 01       	movw	r10, r20
    2f1e:	6b 01       	movw	r12, r22
    2f20:	12 2f       	mov	r17, r18
unsigned long BaudrateValue;
     char RegB,RegC;
	 BaudrateValue= (unsigned long)((_CPU_DEFAULT + (Baudrate* 8)) / (Baudrate* 16) - 1);
    2f22:	cb 01       	movw	r24, r22
    2f24:	ba 01       	movw	r22, r20
    2f26:	60 50       	subi	r22, 0x00	; 0
    2f28:	70 4e       	sbci	r23, 0xE0	; 224
    2f2a:	83 4e       	sbci	r24, 0xE3	; 227
    2f2c:	9f 4f       	sbci	r25, 0xFF	; 255
    2f2e:	33 e0       	ldi	r19, 0x03	; 3
    2f30:	66 0f       	add	r22, r22
    2f32:	77 1f       	adc	r23, r23
    2f34:	88 1f       	adc	r24, r24
    2f36:	99 1f       	adc	r25, r25
    2f38:	3a 95       	dec	r19
    2f3a:	d1 f7       	brne	.-12     	; 0x2f30 <_uart_setting+0x26>
    2f3c:	24 e0       	ldi	r18, 0x04	; 4
    2f3e:	aa 0c       	add	r10, r10
    2f40:	bb 1c       	adc	r11, r11
    2f42:	cc 1c       	adc	r12, r12
    2f44:	dd 1c       	adc	r13, r13
    2f46:	2a 95       	dec	r18
    2f48:	d1 f7       	brne	.-12     	; 0x2f3e <_uart_setting+0x34>
    2f4a:	a6 01       	movw	r20, r12
    2f4c:	95 01       	movw	r18, r10
    2f4e:	0e 94 6f 1b 	call	0x36de	; 0x36de <__udivmodsi4>
    2f52:	21 50       	subi	r18, 0x01	; 1
    2f54:	30 40       	sbci	r19, 0x00	; 0
    2f56:	40 40       	sbci	r20, 0x00	; 0
    2f58:	50 40       	sbci	r21, 0x00	; 0
     RegB=0;RegC=0;
	 RegB = (1<<RXCIE0) | (1<<RXEN0) | (1<<TXEN0);
     RegC = (1<<URSEL0);
   
     //ParitySet
	 switch(ParitySet){
    2f5a:	01 30       	cpi	r16, 0x01	; 1
    2f5c:	31 f0       	breq	.+12     	; 0x2f6a <_uart_setting+0x60>
    2f5e:	02 30       	cpi	r16, 0x02	; 2
    2f60:	11 f4       	brne	.+4      	; 0x2f66 <_uart_setting+0x5c>
    2f62:	60 ea       	ldi	r22, 0xA0	; 160
    2f64:	03 c0       	rjmp	.+6      	; 0x2f6c <_uart_setting+0x62>
    2f66:	60 e8       	ldi	r22, 0x80	; 128
    2f68:	01 c0       	rjmp	.+2      	; 0x2f6c <_uart_setting+0x62>
    2f6a:	60 eb       	ldi	r22, 0xB0	; 176
     case P_ODD:
	      RegC=RegC|(1<<UPM00)|(1<<UPM01);
	      break;	 
	 }
     //StopBit
      if (StopBitSet==2)
    2f6c:	82 e0       	ldi	r24, 0x02	; 2
    2f6e:	e8 16       	cp	r14, r24
    2f70:	09 f4       	brne	.+2      	; 0x2f74 <_uart_setting+0x6a>
	      RegC=RegC|(1<<USBS0);
    2f72:	68 60       	ori	r22, 0x08	; 8

		  //DataSet
		  switch (DataSet){
    2f74:	17 30       	cpi	r17, 0x07	; 7
    2f76:	61 f0       	breq	.+24     	; 0x2f90 <_uart_setting+0x86>
    2f78:	18 30       	cpi	r17, 0x08	; 8
    2f7a:	18 f4       	brcc	.+6      	; 0x2f82 <_uart_setting+0x78>
    2f7c:	16 30       	cpi	r17, 0x06	; 6
    2f7e:	59 f4       	brne	.+22     	; 0x2f96 <_uart_setting+0x8c>
    2f80:	05 c0       	rjmp	.+10     	; 0x2f8c <_uart_setting+0x82>
    2f82:	18 30       	cpi	r17, 0x08	; 8
    2f84:	39 f0       	breq	.+14     	; 0x2f94 <_uart_setting+0x8a>
    2f86:	19 30       	cpi	r17, 0x09	; 9
    2f88:	31 f4       	brne	.+12     	; 0x2f96 <_uart_setting+0x8c>
    2f8a:	07 c0       	rjmp	.+14     	; 0x2f9a <_uart_setting+0x90>
		  case 5:
		       break;
		  case 6:
		       RegC=RegC|(1<<UCSZ00);
    2f8c:	62 60       	ori	r22, 0x02	; 2
    2f8e:	03 c0       	rjmp	.+6      	; 0x2f96 <_uart_setting+0x8c>
		       break;
		  case 7:
		       RegC=RegC|(1<<UCSZ01);
    2f90:	64 60       	ori	r22, 0x04	; 4
    2f92:	01 c0       	rjmp	.+2      	; 0x2f96 <_uart_setting+0x8c>
		       break;
		  case 8:
		       RegC=RegC|(1<<UCSZ00)|(1<<UCSZ01);
    2f94:	66 60       	ori	r22, 0x06	; 6
    2f96:	78 e9       	ldi	r23, 0x98	; 152
    2f98:	02 c0       	rjmp	.+4      	; 0x2f9e <_uart_setting+0x94>
		       break;
		  case 9:
               RegB=RegB| (1<<UCSZ02);
		       RegC=RegC| (1<<UCSZ00)|(1<<UCSZ01);
    2f9a:	66 60       	ori	r22, 0x06	; 6
    2f9c:	7c e9       	ldi	r23, 0x9C	; 156
		       break;
		  }

	 switch (Port){
    2f9e:	ff 20       	and	r15, r15
    2fa0:	21 f0       	breq	.+8      	; 0x2faa <_uart_setting+0xa0>
    2fa2:	81 e0       	ldi	r24, 0x01	; 1
    2fa4:	f8 16       	cp	r15, r24
    2fa6:	91 f4       	brne	.+36     	; 0x2fcc <_uart_setting+0xc2>
    2fa8:	09 c0       	rjmp	.+18     	; 0x2fbc <_uart_setting+0xb2>
	 case 0:		  
		  //Write
		  //Register

	      //BaudrateSetting
          UBRR0H=BaudrateValue>>8;
    2faa:	bb 27       	eor	r27, r27
    2fac:	a5 2f       	mov	r26, r21
    2fae:	94 2f       	mov	r25, r20
    2fb0:	83 2f       	mov	r24, r19
    2fb2:	80 bd       	out	0x20, r24	; 32
		  UBRR0L=BaudrateValue;		
    2fb4:	29 b9       	out	0x09, r18	; 9
		  //Register
		  UCSR0B=RegB; 
    2fb6:	7a b9       	out	0x0a, r23	; 10
		  UCSR0C=RegC; 
    2fb8:	60 bd       	out	0x20, r22	; 32
    2fba:	08 c0       	rjmp	.+16     	; 0x2fcc <_uart_setting+0xc2>
	      break;
     case 1:
		  //Write
		  //BaudrateSetting
          UBRR1H=BaudrateValue>>8;
    2fbc:	bb 27       	eor	r27, r27
    2fbe:	a5 2f       	mov	r26, r21
    2fc0:	94 2f       	mov	r25, r20
    2fc2:	83 2f       	mov	r24, r19
    2fc4:	8c bf       	out	0x3c, r24	; 60
		  UBRR1L=BaudrateValue;		
    2fc6:	20 b9       	out	0x00, r18	; 0

		  //Register
		  UCSR1B=RegB; 
    2fc8:	71 b9       	out	0x01, r23	; 1
		  UCSR1C=RegC;
    2fca:	6c bf       	out	0x3c, r22	; 60
	      break;
	 }  
}
    2fcc:	1f 91       	pop	r17
    2fce:	0f 91       	pop	r16
    2fd0:	ff 90       	pop	r15
    2fd2:	ef 90       	pop	r14
    2fd4:	df 90       	pop	r13
    2fd6:	cf 90       	pop	r12
    2fd8:	bf 90       	pop	r11
    2fda:	af 90       	pop	r10
    2fdc:	08 95       	ret

00002fde <_uart_baudrate>:
	    UCSR0C=(1<<URSEL0) | (1<<UPM01) | (1<<UCSZ01) | (1<<UCSZ00); // UPM01 untuk set even parity
	    UBRR0H=0;UBRR0L=158;// baud 5787       
	}
}

void _uart_baudrate(unsigned char __com, unsigned long __baudrate){
    2fde:	1f 93       	push	r17
    2fe0:	18 2f       	mov	r17, r24
    2fe2:	9a 01       	movw	r18, r20
    2fe4:	ab 01       	movw	r20, r22
	unsigned long __br;

	__br = (unsigned long)((_CPU_DEFAULT + (__baudrate * 8)) / (__baudrate * 16) - 1);
    2fe6:	ca 01       	movw	r24, r20
    2fe8:	b9 01       	movw	r22, r18
    2fea:	60 50       	subi	r22, 0x00	; 0
    2fec:	70 4e       	sbci	r23, 0xE0	; 224
    2fee:	83 4e       	sbci	r24, 0xE3	; 227
    2ff0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ff2:	f3 e0       	ldi	r31, 0x03	; 3
    2ff4:	66 0f       	add	r22, r22
    2ff6:	77 1f       	adc	r23, r23
    2ff8:	88 1f       	adc	r24, r24
    2ffa:	99 1f       	adc	r25, r25
    2ffc:	fa 95       	dec	r31
    2ffe:	d1 f7       	brne	.-12     	; 0x2ff4 <_uart_baudrate+0x16>
    3000:	e4 e0       	ldi	r30, 0x04	; 4
    3002:	22 0f       	add	r18, r18
    3004:	33 1f       	adc	r19, r19
    3006:	44 1f       	adc	r20, r20
    3008:	55 1f       	adc	r21, r21
    300a:	ea 95       	dec	r30
    300c:	d1 f7       	brne	.-12     	; 0x3002 <_uart_baudrate+0x24>
    300e:	0e 94 6f 1b 	call	0x36de	; 0x36de <__udivmodsi4>
    3012:	21 50       	subi	r18, 0x01	; 1
    3014:	30 40       	sbci	r19, 0x00	; 0
    3016:	40 40       	sbci	r20, 0x00	; 0
    3018:	50 40       	sbci	r21, 0x00	; 0
    301a:	bb 27       	eor	r27, r27
    301c:	a5 2f       	mov	r26, r21
    301e:	94 2f       	mov	r25, r20
    3020:	83 2f       	mov	r24, r19

	if(__com){
    3022:	11 23       	and	r17, r17
    3024:	19 f0       	breq	.+6      	; 0x302c <_uart_baudrate+0x4e>
		UBRR1L = __br;
    3026:	20 b9       	out	0x00, r18	; 0
		UBRR1H = __br >> 8;
    3028:	8c bf       	out	0x3c, r24	; 60
    302a:	02 c0       	rjmp	.+4      	; 0x3030 <_uart_baudrate+0x52>
	}
	else{
		UBRR0L = __br;
    302c:	29 b9       	out	0x09, r18	; 9
		UBRR0H = __br >> 8;
    302e:	80 bd       	out	0x20, r24	; 32
	}
}
    3030:	1f 91       	pop	r17
    3032:	08 95       	ret

00003034 <_uart_init>:
		  UCSR1C=RegC;
	      break;
	 }  
}

void _uart_init(unsigned char __com, unsigned long __baudrate){
    3034:	ef 92       	push	r14
    3036:	ff 92       	push	r15
    3038:	0f 93       	push	r16
    303a:	1f 93       	push	r17
    303c:	98 2f       	mov	r25, r24
    303e:	7a 01       	movw	r14, r20
    3040:	8b 01       	movw	r16, r22
	if(__com){
    3042:	88 23       	and	r24, r24
    3044:	29 f0       	breq	.+10     	; 0x3050 <_uart_init+0x1c>
		UCSR1B = _BV(RXCIE1) | _BV(RXEN1) | _BV(TXEN1);
    3046:	88 e9       	ldi	r24, 0x98	; 152
    3048:	81 b9       	out	0x01, r24	; 1
		UCSR1C = _BV(UCSZ11) | _BV(UCSZ10);
    304a:	86 e0       	ldi	r24, 0x06	; 6
    304c:	8c bf       	out	0x3c, r24	; 60
    304e:	04 c0       	rjmp	.+8      	; 0x3058 <_uart_init+0x24>
	}
	else{
		UCSR0B = _BV(RXCIE0) | _BV(RXEN0) | _BV(TXEN0);
    3050:	88 e9       	ldi	r24, 0x98	; 152
    3052:	8a b9       	out	0x0a, r24	; 10
		UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
    3054:	86 e0       	ldi	r24, 0x06	; 6
    3056:	80 bd       	out	0x20, r24	; 32
	}
    

	_uart_baudrate(__com, __baudrate);
    3058:	89 2f       	mov	r24, r25
    305a:	b8 01       	movw	r22, r16
    305c:	a7 01       	movw	r20, r14
    305e:	0e 94 ef 17 	call	0x2fde	; 0x2fde <_uart_baudrate>

	if (__baudrate==5787){
    3062:	8b e9       	ldi	r24, 0x9B	; 155
    3064:	e8 16       	cp	r14, r24
    3066:	86 e1       	ldi	r24, 0x16	; 22
    3068:	f8 06       	cpc	r15, r24
    306a:	80 e0       	ldi	r24, 0x00	; 0
    306c:	08 07       	cpc	r16, r24
    306e:	80 e0       	ldi	r24, 0x00	; 0
    3070:	18 07       	cpc	r17, r24
    3072:	39 f4       	brne	.+14     	; 0x3082 <_uart_init+0x4e>
	    UCSR0B=_BV(RXCIE0) | _BV(RXEN0) | _BV(TXEN0);
    3074:	88 e9       	ldi	r24, 0x98	; 152
    3076:	8a b9       	out	0x0a, r24	; 10
	    UCSR0C=(1<<URSEL0) | (1<<UPM01) | (1<<UCSZ01) | (1<<UCSZ00); // UPM01 untuk set even parity
    3078:	86 ea       	ldi	r24, 0xA6	; 166
    307a:	80 bd       	out	0x20, r24	; 32
	    UBRR0H=0;UBRR0L=158;// baud 5787       
    307c:	10 bc       	out	0x20, r1	; 32
    307e:	8e e9       	ldi	r24, 0x9E	; 158
    3080:	89 b9       	out	0x09, r24	; 9
	}
}
    3082:	1f 91       	pop	r17
    3084:	0f 91       	pop	r16
    3086:	ff 90       	pop	r15
    3088:	ef 90       	pop	r14
    308a:	08 95       	ret

0000308c <_uart>:
		UBRR0H = __br >> 8;
	}
}

unsigned char _uart(unsigned char __com, unsigned char __dir, unsigned char __chr){
	if(__com){
    308c:	88 23       	and	r24, r24
    308e:	51 f0       	breq	.+20     	; 0x30a4 <_uart+0x18>
		if(__dir){
    3090:	66 23       	and	r22, r22
    3092:	21 f0       	breq	.+8      	; 0x309c <_uart+0x10>
			loop_until_bit_is_set(UCSR1A, UDRE1);
    3094:	15 9b       	sbis	0x02, 5	; 2
    3096:	fe cf       	rjmp	.-4      	; 0x3094 <_uart+0x8>
			UDR1 = __chr;
    3098:	43 b9       	out	0x03, r20	; 3
    309a:	09 c0       	rjmp	.+18     	; 0x30ae <_uart+0x22>
		}
		else{
			loop_until_bit_is_set(UCSR1A, RXC1);
    309c:	17 9b       	sbis	0x02, 7	; 2
    309e:	fe cf       	rjmp	.-4      	; 0x309c <_uart+0x10>
			return UDR1;
    30a0:	83 b1       	in	r24, 0x03	; 3
    30a2:	08 95       	ret
		}
	}
	else{
		if(__dir){
    30a4:	66 23       	and	r22, r22
    30a6:	29 f0       	breq	.+10     	; 0x30b2 <_uart+0x26>
			loop_until_bit_is_set(UCSR0A, UDRE0);
    30a8:	5d 9b       	sbis	0x0b, 5	; 11
    30aa:	fe cf       	rjmp	.-4      	; 0x30a8 <_uart+0x1c>
			UDR0 = __chr;
    30ac:	4c b9       	out	0x0c, r20	; 12
    30ae:	81 e0       	ldi	r24, 0x01	; 1
    30b0:	08 95       	ret
		}
		else{
			loop_until_bit_is_set(UCSR0A,  RXC0);
    30b2:	5f 9b       	sbis	0x0b, 7	; 11
    30b4:	fe cf       	rjmp	.-4      	; 0x30b2 <_uart+0x26>
			return UDR0;
    30b6:	8c b1       	in	r24, 0x0c	; 12
		}

	}

	return 1;
}
    30b8:	08 95       	ret

000030ba <_uart_print>:

void _uart_print(unsigned char __com, unsigned char __ret, char *__str){
    30ba:	0f 93       	push	r16
    30bc:	1f 93       	push	r17
    30be:	cf 93       	push	r28
    30c0:	df 93       	push	r29
    30c2:	18 2f       	mov	r17, r24
    30c4:	06 2f       	mov	r16, r22
    30c6:	ea 01       	movw	r28, r20
	if(strlen(__str)>0)
    30c8:	88 81       	ld	r24, Y
    30ca:	88 23       	and	r24, r24
    30cc:	31 f4       	brne	.+12     	; 0x30da <_uart_print+0x20>
    30ce:	08 c0       	rjmp	.+16     	; 0x30e0 <_uart_print+0x26>
		while(*__str) _uart(__com, 1, *__str++);
    30d0:	21 96       	adiw	r28, 0x01	; 1
    30d2:	81 2f       	mov	r24, r17
    30d4:	61 e0       	ldi	r22, 0x01	; 1
    30d6:	0e 94 46 18 	call	0x308c	; 0x308c <_uart>
    30da:	48 81       	ld	r20, Y
    30dc:	44 23       	and	r20, r20
    30de:	c1 f7       	brne	.-16     	; 0x30d0 <_uart_print+0x16>

	if(__ret){
    30e0:	00 23       	and	r16, r16
    30e2:	51 f0       	breq	.+20     	; 0x30f8 <_uart_print+0x3e>
		_uart(__com, 1, 0x0D);
    30e4:	81 2f       	mov	r24, r17
    30e6:	61 e0       	ldi	r22, 0x01	; 1
    30e8:	4d e0       	ldi	r20, 0x0D	; 13
    30ea:	0e 94 46 18 	call	0x308c	; 0x308c <_uart>
		_uart(__com, 1, 0x0A);
    30ee:	81 2f       	mov	r24, r17
    30f0:	61 e0       	ldi	r22, 0x01	; 1
    30f2:	4a e0       	ldi	r20, 0x0A	; 10
    30f4:	0e 94 46 18 	call	0x308c	; 0x308c <_uart>
    30f8:	82 ee       	ldi	r24, 0xE2	; 226
    30fa:	94 e0       	ldi	r25, 0x04	; 4
    30fc:	01 97       	sbiw	r24, 0x01	; 1
    30fe:	f1 f7       	brne	.-4      	; 0x30fc <_uart_print+0x42>
	}
	_delay_ms(5);
}
    3100:	df 91       	pop	r29
    3102:	cf 91       	pop	r28
    3104:	1f 91       	pop	r17
    3106:	0f 91       	pop	r16
    3108:	08 95       	ret

0000310a <_uart_printf>:

void _uart_printf(unsigned char __com, unsigned char __ret, char *__str){
    310a:	0f 93       	push	r16
    310c:	1f 93       	push	r17
    310e:	cf 93       	push	r28
    3110:	df 93       	push	r29
    3112:	18 2f       	mov	r17, r24
    3114:	06 2f       	mov	r16, r22
    3116:	ea 01       	movw	r28, r20
    3118:	07 c0       	rjmp	.+14     	; 0x3128 <_uart_printf+0x1e>
	while(pgm_read_byte(&(*__str)))
		_uart(__com, 1, pgm_read_byte(&(*__str++)));
    311a:	21 96       	adiw	r28, 0x01	; 1
    311c:	f9 01       	movw	r30, r18
    311e:	44 91       	lpm	r20, Z+
    3120:	81 2f       	mov	r24, r17
    3122:	61 e0       	ldi	r22, 0x01	; 1
    3124:	0e 94 46 18 	call	0x308c	; 0x308c <_uart>
    3128:	9e 01       	movw	r18, r28
	}
	_delay_ms(5);
}

void _uart_printf(unsigned char __com, unsigned char __ret, char *__str){
	while(pgm_read_byte(&(*__str)))
    312a:	fe 01       	movw	r30, r28
    312c:	84 91       	lpm	r24, Z+
    312e:	88 23       	and	r24, r24
    3130:	a1 f7       	brne	.-24     	; 0x311a <_uart_printf+0x10>
		_uart(__com, 1, pgm_read_byte(&(*__str++)));

	if(__ret){
    3132:	00 23       	and	r16, r16
    3134:	51 f0       	breq	.+20     	; 0x314a <_uart_printf+0x40>
		_uart(__com, 1, 0x0D);
    3136:	81 2f       	mov	r24, r17
    3138:	61 e0       	ldi	r22, 0x01	; 1
    313a:	4d e0       	ldi	r20, 0x0D	; 13
    313c:	0e 94 46 18 	call	0x308c	; 0x308c <_uart>
		_uart(__com, 1, 0x0A);
    3140:	81 2f       	mov	r24, r17
    3142:	61 e0       	ldi	r22, 0x01	; 1
    3144:	4a e0       	ldi	r20, 0x0A	; 10
    3146:	0e 94 46 18 	call	0x308c	; 0x308c <_uart>
    314a:	86 ea       	ldi	r24, 0xA6	; 166
    314c:	9e e0       	ldi	r25, 0x0E	; 14
    314e:	01 97       	sbiw	r24, 0x01	; 1
    3150:	f1 f7       	brne	.-4      	; 0x314e <_uart_printf+0x44>
	}
	_delay_ms(15);
}
    3152:	df 91       	pop	r29
    3154:	cf 91       	pop	r28
    3156:	1f 91       	pop	r17
    3158:	0f 91       	pop	r16
    315a:	08 95       	ret

0000315c <sprintf_P>:
    315c:	ae e0       	ldi	r26, 0x0E	; 14
    315e:	b0 e0       	ldi	r27, 0x00	; 0
    3160:	e4 eb       	ldi	r30, 0xB4	; 180
    3162:	f8 e1       	ldi	r31, 0x18	; 24
    3164:	0c 94 9f 1b 	jmp	0x373e	; 0x373e <__prologue_saves__+0x1c>
    3168:	0d 89       	ldd	r16, Y+21	; 0x15
    316a:	1e 89       	ldd	r17, Y+22	; 0x16
    316c:	8e e0       	ldi	r24, 0x0E	; 14
    316e:	8c 83       	std	Y+4, r24	; 0x04
    3170:	1a 83       	std	Y+2, r17	; 0x02
    3172:	09 83       	std	Y+1, r16	; 0x01
    3174:	8f ef       	ldi	r24, 0xFF	; 255
    3176:	9f e7       	ldi	r25, 0x7F	; 127
    3178:	9e 83       	std	Y+6, r25	; 0x06
    317a:	8d 83       	std	Y+5, r24	; 0x05
    317c:	9e 01       	movw	r18, r28
    317e:	27 5e       	subi	r18, 0xE7	; 231
    3180:	3f 4f       	sbci	r19, 0xFF	; 255
    3182:	ce 01       	movw	r24, r28
    3184:	01 96       	adiw	r24, 0x01	; 1
    3186:	6f 89       	ldd	r22, Y+23	; 0x17
    3188:	78 8d       	ldd	r23, Y+24	; 0x18
    318a:	a9 01       	movw	r20, r18
    318c:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <vfprintf>
    3190:	2f 81       	ldd	r18, Y+7	; 0x07
    3192:	38 85       	ldd	r19, Y+8	; 0x08
    3194:	02 0f       	add	r16, r18
    3196:	13 1f       	adc	r17, r19
    3198:	f8 01       	movw	r30, r16
    319a:	10 82       	st	Z, r1
    319c:	2e 96       	adiw	r28, 0x0e	; 14
    319e:	e4 e0       	ldi	r30, 0x04	; 4
    31a0:	0c 94 bb 1b 	jmp	0x3776	; 0x3776 <__epilogue_restores__+0x1c>

000031a4 <vfprintf>:
    31a4:	ab e0       	ldi	r26, 0x0B	; 11
    31a6:	b0 e0       	ldi	r27, 0x00	; 0
    31a8:	e8 ed       	ldi	r30, 0xD8	; 216
    31aa:	f8 e1       	ldi	r31, 0x18	; 24
    31ac:	0c 94 91 1b 	jmp	0x3722	; 0x3722 <__prologue_saves__>
    31b0:	3c 01       	movw	r6, r24
    31b2:	2b 01       	movw	r4, r22
    31b4:	5a 01       	movw	r10, r20
    31b6:	fc 01       	movw	r30, r24
    31b8:	17 82       	std	Z+7, r1	; 0x07
    31ba:	16 82       	std	Z+6, r1	; 0x06
    31bc:	83 81       	ldd	r24, Z+3	; 0x03
    31be:	81 fd       	sbrc	r24, 1
    31c0:	03 c0       	rjmp	.+6      	; 0x31c8 <vfprintf+0x24>
    31c2:	6f ef       	ldi	r22, 0xFF	; 255
    31c4:	7f ef       	ldi	r23, 0xFF	; 255
    31c6:	c6 c1       	rjmp	.+908    	; 0x3554 <vfprintf+0x3b0>
    31c8:	9a e0       	ldi	r25, 0x0A	; 10
    31ca:	89 2e       	mov	r8, r25
    31cc:	1e 01       	movw	r2, r28
    31ce:	08 94       	sec
    31d0:	21 1c       	adc	r2, r1
    31d2:	31 1c       	adc	r3, r1
    31d4:	f3 01       	movw	r30, r6
    31d6:	23 81       	ldd	r18, Z+3	; 0x03
    31d8:	f2 01       	movw	r30, r4
    31da:	23 fd       	sbrc	r18, 3
    31dc:	85 91       	lpm	r24, Z+
    31de:	23 ff       	sbrs	r18, 3
    31e0:	81 91       	ld	r24, Z+
    31e2:	2f 01       	movw	r4, r30
    31e4:	88 23       	and	r24, r24
    31e6:	09 f4       	brne	.+2      	; 0x31ea <vfprintf+0x46>
    31e8:	b2 c1       	rjmp	.+868    	; 0x354e <vfprintf+0x3aa>
    31ea:	85 32       	cpi	r24, 0x25	; 37
    31ec:	39 f4       	brne	.+14     	; 0x31fc <vfprintf+0x58>
    31ee:	23 fd       	sbrc	r18, 3
    31f0:	85 91       	lpm	r24, Z+
    31f2:	23 ff       	sbrs	r18, 3
    31f4:	81 91       	ld	r24, Z+
    31f6:	2f 01       	movw	r4, r30
    31f8:	85 32       	cpi	r24, 0x25	; 37
    31fa:	29 f4       	brne	.+10     	; 0x3206 <vfprintf+0x62>
    31fc:	90 e0       	ldi	r25, 0x00	; 0
    31fe:	b3 01       	movw	r22, r6
    3200:	0e 94 c5 1a 	call	0x358a	; 0x358a <fputc>
    3204:	e7 cf       	rjmp	.-50     	; 0x31d4 <vfprintf+0x30>
    3206:	98 2f       	mov	r25, r24
    3208:	ff 24       	eor	r15, r15
    320a:	ee 24       	eor	r14, r14
    320c:	99 24       	eor	r9, r9
    320e:	ff e1       	ldi	r31, 0x1F	; 31
    3210:	ff 15       	cp	r31, r15
    3212:	d0 f0       	brcs	.+52     	; 0x3248 <vfprintf+0xa4>
    3214:	9b 32       	cpi	r25, 0x2B	; 43
    3216:	69 f0       	breq	.+26     	; 0x3232 <vfprintf+0x8e>
    3218:	9c 32       	cpi	r25, 0x2C	; 44
    321a:	28 f4       	brcc	.+10     	; 0x3226 <vfprintf+0x82>
    321c:	90 32       	cpi	r25, 0x20	; 32
    321e:	59 f0       	breq	.+22     	; 0x3236 <vfprintf+0x92>
    3220:	93 32       	cpi	r25, 0x23	; 35
    3222:	91 f4       	brne	.+36     	; 0x3248 <vfprintf+0xa4>
    3224:	0e c0       	rjmp	.+28     	; 0x3242 <vfprintf+0x9e>
    3226:	9d 32       	cpi	r25, 0x2D	; 45
    3228:	49 f0       	breq	.+18     	; 0x323c <vfprintf+0x98>
    322a:	90 33       	cpi	r25, 0x30	; 48
    322c:	69 f4       	brne	.+26     	; 0x3248 <vfprintf+0xa4>
    322e:	41 e0       	ldi	r20, 0x01	; 1
    3230:	24 c0       	rjmp	.+72     	; 0x327a <vfprintf+0xd6>
    3232:	52 e0       	ldi	r21, 0x02	; 2
    3234:	f5 2a       	or	r15, r21
    3236:	84 e0       	ldi	r24, 0x04	; 4
    3238:	f8 2a       	or	r15, r24
    323a:	28 c0       	rjmp	.+80     	; 0x328c <vfprintf+0xe8>
    323c:	98 e0       	ldi	r25, 0x08	; 8
    323e:	f9 2a       	or	r15, r25
    3240:	25 c0       	rjmp	.+74     	; 0x328c <vfprintf+0xe8>
    3242:	e0 e1       	ldi	r30, 0x10	; 16
    3244:	fe 2a       	or	r15, r30
    3246:	22 c0       	rjmp	.+68     	; 0x328c <vfprintf+0xe8>
    3248:	f7 fc       	sbrc	r15, 7
    324a:	29 c0       	rjmp	.+82     	; 0x329e <vfprintf+0xfa>
    324c:	89 2f       	mov	r24, r25
    324e:	80 53       	subi	r24, 0x30	; 48
    3250:	8a 30       	cpi	r24, 0x0A	; 10
    3252:	70 f4       	brcc	.+28     	; 0x3270 <vfprintf+0xcc>
    3254:	f6 fe       	sbrs	r15, 6
    3256:	05 c0       	rjmp	.+10     	; 0x3262 <vfprintf+0xbe>
    3258:	98 9c       	mul	r9, r8
    325a:	90 2c       	mov	r9, r0
    325c:	11 24       	eor	r1, r1
    325e:	98 0e       	add	r9, r24
    3260:	15 c0       	rjmp	.+42     	; 0x328c <vfprintf+0xe8>
    3262:	e8 9c       	mul	r14, r8
    3264:	e0 2c       	mov	r14, r0
    3266:	11 24       	eor	r1, r1
    3268:	e8 0e       	add	r14, r24
    326a:	f0 e2       	ldi	r31, 0x20	; 32
    326c:	ff 2a       	or	r15, r31
    326e:	0e c0       	rjmp	.+28     	; 0x328c <vfprintf+0xe8>
    3270:	9e 32       	cpi	r25, 0x2E	; 46
    3272:	29 f4       	brne	.+10     	; 0x327e <vfprintf+0xda>
    3274:	f6 fc       	sbrc	r15, 6
    3276:	6b c1       	rjmp	.+726    	; 0x354e <vfprintf+0x3aa>
    3278:	40 e4       	ldi	r20, 0x40	; 64
    327a:	f4 2a       	or	r15, r20
    327c:	07 c0       	rjmp	.+14     	; 0x328c <vfprintf+0xe8>
    327e:	9c 36       	cpi	r25, 0x6C	; 108
    3280:	19 f4       	brne	.+6      	; 0x3288 <vfprintf+0xe4>
    3282:	50 e8       	ldi	r21, 0x80	; 128
    3284:	f5 2a       	or	r15, r21
    3286:	02 c0       	rjmp	.+4      	; 0x328c <vfprintf+0xe8>
    3288:	98 36       	cpi	r25, 0x68	; 104
    328a:	49 f4       	brne	.+18     	; 0x329e <vfprintf+0xfa>
    328c:	f2 01       	movw	r30, r4
    328e:	23 fd       	sbrc	r18, 3
    3290:	95 91       	lpm	r25, Z+
    3292:	23 ff       	sbrs	r18, 3
    3294:	91 91       	ld	r25, Z+
    3296:	2f 01       	movw	r4, r30
    3298:	99 23       	and	r25, r25
    329a:	09 f0       	breq	.+2      	; 0x329e <vfprintf+0xfa>
    329c:	b8 cf       	rjmp	.-144    	; 0x320e <vfprintf+0x6a>
    329e:	89 2f       	mov	r24, r25
    32a0:	85 54       	subi	r24, 0x45	; 69
    32a2:	83 30       	cpi	r24, 0x03	; 3
    32a4:	18 f0       	brcs	.+6      	; 0x32ac <vfprintf+0x108>
    32a6:	80 52       	subi	r24, 0x20	; 32
    32a8:	83 30       	cpi	r24, 0x03	; 3
    32aa:	38 f4       	brcc	.+14     	; 0x32ba <vfprintf+0x116>
    32ac:	44 e0       	ldi	r20, 0x04	; 4
    32ae:	50 e0       	ldi	r21, 0x00	; 0
    32b0:	a4 0e       	add	r10, r20
    32b2:	b5 1e       	adc	r11, r21
    32b4:	5f e3       	ldi	r21, 0x3F	; 63
    32b6:	59 83       	std	Y+1, r21	; 0x01
    32b8:	0f c0       	rjmp	.+30     	; 0x32d8 <vfprintf+0x134>
    32ba:	93 36       	cpi	r25, 0x63	; 99
    32bc:	31 f0       	breq	.+12     	; 0x32ca <vfprintf+0x126>
    32be:	93 37       	cpi	r25, 0x73	; 115
    32c0:	79 f0       	breq	.+30     	; 0x32e0 <vfprintf+0x13c>
    32c2:	93 35       	cpi	r25, 0x53	; 83
    32c4:	09 f0       	breq	.+2      	; 0x32c8 <vfprintf+0x124>
    32c6:	56 c0       	rjmp	.+172    	; 0x3374 <vfprintf+0x1d0>
    32c8:	20 c0       	rjmp	.+64     	; 0x330a <vfprintf+0x166>
    32ca:	f5 01       	movw	r30, r10
    32cc:	80 81       	ld	r24, Z
    32ce:	89 83       	std	Y+1, r24	; 0x01
    32d0:	42 e0       	ldi	r20, 0x02	; 2
    32d2:	50 e0       	ldi	r21, 0x00	; 0
    32d4:	a4 0e       	add	r10, r20
    32d6:	b5 1e       	adc	r11, r21
    32d8:	61 01       	movw	r12, r2
    32da:	01 e0       	ldi	r16, 0x01	; 1
    32dc:	10 e0       	ldi	r17, 0x00	; 0
    32de:	12 c0       	rjmp	.+36     	; 0x3304 <vfprintf+0x160>
    32e0:	f5 01       	movw	r30, r10
    32e2:	c0 80       	ld	r12, Z
    32e4:	d1 80       	ldd	r13, Z+1	; 0x01
    32e6:	f6 fc       	sbrc	r15, 6
    32e8:	03 c0       	rjmp	.+6      	; 0x32f0 <vfprintf+0x14c>
    32ea:	6f ef       	ldi	r22, 0xFF	; 255
    32ec:	7f ef       	ldi	r23, 0xFF	; 255
    32ee:	02 c0       	rjmp	.+4      	; 0x32f4 <vfprintf+0x150>
    32f0:	69 2d       	mov	r22, r9
    32f2:	70 e0       	ldi	r23, 0x00	; 0
    32f4:	42 e0       	ldi	r20, 0x02	; 2
    32f6:	50 e0       	ldi	r21, 0x00	; 0
    32f8:	a4 0e       	add	r10, r20
    32fa:	b5 1e       	adc	r11, r21
    32fc:	c6 01       	movw	r24, r12
    32fe:	0e 94 ba 1a 	call	0x3574	; 0x3574 <strnlen>
    3302:	8c 01       	movw	r16, r24
    3304:	5f e7       	ldi	r21, 0x7F	; 127
    3306:	f5 22       	and	r15, r21
    3308:	14 c0       	rjmp	.+40     	; 0x3332 <vfprintf+0x18e>
    330a:	f5 01       	movw	r30, r10
    330c:	c0 80       	ld	r12, Z
    330e:	d1 80       	ldd	r13, Z+1	; 0x01
    3310:	f6 fc       	sbrc	r15, 6
    3312:	03 c0       	rjmp	.+6      	; 0x331a <vfprintf+0x176>
    3314:	6f ef       	ldi	r22, 0xFF	; 255
    3316:	7f ef       	ldi	r23, 0xFF	; 255
    3318:	02 c0       	rjmp	.+4      	; 0x331e <vfprintf+0x17a>
    331a:	69 2d       	mov	r22, r9
    331c:	70 e0       	ldi	r23, 0x00	; 0
    331e:	42 e0       	ldi	r20, 0x02	; 2
    3320:	50 e0       	ldi	r21, 0x00	; 0
    3322:	a4 0e       	add	r10, r20
    3324:	b5 1e       	adc	r11, r21
    3326:	c6 01       	movw	r24, r12
    3328:	0e 94 af 1a 	call	0x355e	; 0x355e <strnlen_P>
    332c:	8c 01       	movw	r16, r24
    332e:	50 e8       	ldi	r21, 0x80	; 128
    3330:	f5 2a       	or	r15, r21
    3332:	f3 fe       	sbrs	r15, 3
    3334:	07 c0       	rjmp	.+14     	; 0x3344 <vfprintf+0x1a0>
    3336:	1a c0       	rjmp	.+52     	; 0x336c <vfprintf+0x1c8>
    3338:	80 e2       	ldi	r24, 0x20	; 32
    333a:	90 e0       	ldi	r25, 0x00	; 0
    333c:	b3 01       	movw	r22, r6
    333e:	0e 94 c5 1a 	call	0x358a	; 0x358a <fputc>
    3342:	ea 94       	dec	r14
    3344:	8e 2d       	mov	r24, r14
    3346:	90 e0       	ldi	r25, 0x00	; 0
    3348:	08 17       	cp	r16, r24
    334a:	19 07       	cpc	r17, r25
    334c:	a8 f3       	brcs	.-22     	; 0x3338 <vfprintf+0x194>
    334e:	0e c0       	rjmp	.+28     	; 0x336c <vfprintf+0x1c8>
    3350:	f6 01       	movw	r30, r12
    3352:	f7 fc       	sbrc	r15, 7
    3354:	85 91       	lpm	r24, Z+
    3356:	f7 fe       	sbrs	r15, 7
    3358:	81 91       	ld	r24, Z+
    335a:	6f 01       	movw	r12, r30
    335c:	90 e0       	ldi	r25, 0x00	; 0
    335e:	b3 01       	movw	r22, r6
    3360:	0e 94 c5 1a 	call	0x358a	; 0x358a <fputc>
    3364:	e1 10       	cpse	r14, r1
    3366:	ea 94       	dec	r14
    3368:	01 50       	subi	r16, 0x01	; 1
    336a:	10 40       	sbci	r17, 0x00	; 0
    336c:	01 15       	cp	r16, r1
    336e:	11 05       	cpc	r17, r1
    3370:	79 f7       	brne	.-34     	; 0x3350 <vfprintf+0x1ac>
    3372:	ea c0       	rjmp	.+468    	; 0x3548 <vfprintf+0x3a4>
    3374:	94 36       	cpi	r25, 0x64	; 100
    3376:	11 f0       	breq	.+4      	; 0x337c <vfprintf+0x1d8>
    3378:	99 36       	cpi	r25, 0x69	; 105
    337a:	69 f5       	brne	.+90     	; 0x33d6 <vfprintf+0x232>
    337c:	f7 fe       	sbrs	r15, 7
    337e:	08 c0       	rjmp	.+16     	; 0x3390 <vfprintf+0x1ec>
    3380:	f5 01       	movw	r30, r10
    3382:	20 81       	ld	r18, Z
    3384:	31 81       	ldd	r19, Z+1	; 0x01
    3386:	42 81       	ldd	r20, Z+2	; 0x02
    3388:	53 81       	ldd	r21, Z+3	; 0x03
    338a:	84 e0       	ldi	r24, 0x04	; 4
    338c:	90 e0       	ldi	r25, 0x00	; 0
    338e:	0a c0       	rjmp	.+20     	; 0x33a4 <vfprintf+0x200>
    3390:	f5 01       	movw	r30, r10
    3392:	80 81       	ld	r24, Z
    3394:	91 81       	ldd	r25, Z+1	; 0x01
    3396:	9c 01       	movw	r18, r24
    3398:	44 27       	eor	r20, r20
    339a:	37 fd       	sbrc	r19, 7
    339c:	40 95       	com	r20
    339e:	54 2f       	mov	r21, r20
    33a0:	82 e0       	ldi	r24, 0x02	; 2
    33a2:	90 e0       	ldi	r25, 0x00	; 0
    33a4:	a8 0e       	add	r10, r24
    33a6:	b9 1e       	adc	r11, r25
    33a8:	9f e6       	ldi	r25, 0x6F	; 111
    33aa:	f9 22       	and	r15, r25
    33ac:	57 ff       	sbrs	r21, 7
    33ae:	09 c0       	rjmp	.+18     	; 0x33c2 <vfprintf+0x21e>
    33b0:	50 95       	com	r21
    33b2:	40 95       	com	r20
    33b4:	30 95       	com	r19
    33b6:	21 95       	neg	r18
    33b8:	3f 4f       	sbci	r19, 0xFF	; 255
    33ba:	4f 4f       	sbci	r20, 0xFF	; 255
    33bc:	5f 4f       	sbci	r21, 0xFF	; 255
    33be:	e0 e8       	ldi	r30, 0x80	; 128
    33c0:	fe 2a       	or	r15, r30
    33c2:	ca 01       	movw	r24, r20
    33c4:	b9 01       	movw	r22, r18
    33c6:	a1 01       	movw	r20, r2
    33c8:	2a e0       	ldi	r18, 0x0A	; 10
    33ca:	30 e0       	ldi	r19, 0x00	; 0
    33cc:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__ultoa_invert>
    33d0:	d8 2e       	mov	r13, r24
    33d2:	d2 18       	sub	r13, r2
    33d4:	40 c0       	rjmp	.+128    	; 0x3456 <vfprintf+0x2b2>
    33d6:	95 37       	cpi	r25, 0x75	; 117
    33d8:	29 f4       	brne	.+10     	; 0x33e4 <vfprintf+0x240>
    33da:	1f 2d       	mov	r17, r15
    33dc:	1f 7e       	andi	r17, 0xEF	; 239
    33de:	2a e0       	ldi	r18, 0x0A	; 10
    33e0:	30 e0       	ldi	r19, 0x00	; 0
    33e2:	1d c0       	rjmp	.+58     	; 0x341e <vfprintf+0x27a>
    33e4:	1f 2d       	mov	r17, r15
    33e6:	19 7f       	andi	r17, 0xF9	; 249
    33e8:	9f 36       	cpi	r25, 0x6F	; 111
    33ea:	61 f0       	breq	.+24     	; 0x3404 <vfprintf+0x260>
    33ec:	90 37       	cpi	r25, 0x70	; 112
    33ee:	20 f4       	brcc	.+8      	; 0x33f8 <vfprintf+0x254>
    33f0:	98 35       	cpi	r25, 0x58	; 88
    33f2:	09 f0       	breq	.+2      	; 0x33f6 <vfprintf+0x252>
    33f4:	ac c0       	rjmp	.+344    	; 0x354e <vfprintf+0x3aa>
    33f6:	0f c0       	rjmp	.+30     	; 0x3416 <vfprintf+0x272>
    33f8:	90 37       	cpi	r25, 0x70	; 112
    33fa:	39 f0       	breq	.+14     	; 0x340a <vfprintf+0x266>
    33fc:	98 37       	cpi	r25, 0x78	; 120
    33fe:	09 f0       	breq	.+2      	; 0x3402 <vfprintf+0x25e>
    3400:	a6 c0       	rjmp	.+332    	; 0x354e <vfprintf+0x3aa>
    3402:	04 c0       	rjmp	.+8      	; 0x340c <vfprintf+0x268>
    3404:	28 e0       	ldi	r18, 0x08	; 8
    3406:	30 e0       	ldi	r19, 0x00	; 0
    3408:	0a c0       	rjmp	.+20     	; 0x341e <vfprintf+0x27a>
    340a:	10 61       	ori	r17, 0x10	; 16
    340c:	14 fd       	sbrc	r17, 4
    340e:	14 60       	ori	r17, 0x04	; 4
    3410:	20 e1       	ldi	r18, 0x10	; 16
    3412:	30 e0       	ldi	r19, 0x00	; 0
    3414:	04 c0       	rjmp	.+8      	; 0x341e <vfprintf+0x27a>
    3416:	14 fd       	sbrc	r17, 4
    3418:	16 60       	ori	r17, 0x06	; 6
    341a:	20 e1       	ldi	r18, 0x10	; 16
    341c:	32 e0       	ldi	r19, 0x02	; 2
    341e:	17 ff       	sbrs	r17, 7
    3420:	08 c0       	rjmp	.+16     	; 0x3432 <vfprintf+0x28e>
    3422:	f5 01       	movw	r30, r10
    3424:	60 81       	ld	r22, Z
    3426:	71 81       	ldd	r23, Z+1	; 0x01
    3428:	82 81       	ldd	r24, Z+2	; 0x02
    342a:	93 81       	ldd	r25, Z+3	; 0x03
    342c:	44 e0       	ldi	r20, 0x04	; 4
    342e:	50 e0       	ldi	r21, 0x00	; 0
    3430:	08 c0       	rjmp	.+16     	; 0x3442 <vfprintf+0x29e>
    3432:	f5 01       	movw	r30, r10
    3434:	80 81       	ld	r24, Z
    3436:	91 81       	ldd	r25, Z+1	; 0x01
    3438:	bc 01       	movw	r22, r24
    343a:	80 e0       	ldi	r24, 0x00	; 0
    343c:	90 e0       	ldi	r25, 0x00	; 0
    343e:	42 e0       	ldi	r20, 0x02	; 2
    3440:	50 e0       	ldi	r21, 0x00	; 0
    3442:	a4 0e       	add	r10, r20
    3444:	b5 1e       	adc	r11, r21
    3446:	a1 01       	movw	r20, r2
    3448:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__ultoa_invert>
    344c:	d8 2e       	mov	r13, r24
    344e:	d2 18       	sub	r13, r2
    3450:	8f e7       	ldi	r24, 0x7F	; 127
    3452:	f8 2e       	mov	r15, r24
    3454:	f1 22       	and	r15, r17
    3456:	f6 fe       	sbrs	r15, 6
    3458:	0b c0       	rjmp	.+22     	; 0x3470 <vfprintf+0x2cc>
    345a:	5e ef       	ldi	r21, 0xFE	; 254
    345c:	f5 22       	and	r15, r21
    345e:	d9 14       	cp	r13, r9
    3460:	38 f4       	brcc	.+14     	; 0x3470 <vfprintf+0x2cc>
    3462:	f4 fe       	sbrs	r15, 4
    3464:	07 c0       	rjmp	.+14     	; 0x3474 <vfprintf+0x2d0>
    3466:	f2 fc       	sbrc	r15, 2
    3468:	05 c0       	rjmp	.+10     	; 0x3474 <vfprintf+0x2d0>
    346a:	8f ee       	ldi	r24, 0xEF	; 239
    346c:	f8 22       	and	r15, r24
    346e:	02 c0       	rjmp	.+4      	; 0x3474 <vfprintf+0x2d0>
    3470:	1d 2d       	mov	r17, r13
    3472:	01 c0       	rjmp	.+2      	; 0x3476 <vfprintf+0x2d2>
    3474:	19 2d       	mov	r17, r9
    3476:	f4 fe       	sbrs	r15, 4
    3478:	0d c0       	rjmp	.+26     	; 0x3494 <vfprintf+0x2f0>
    347a:	fe 01       	movw	r30, r28
    347c:	ed 0d       	add	r30, r13
    347e:	f1 1d       	adc	r31, r1
    3480:	80 81       	ld	r24, Z
    3482:	80 33       	cpi	r24, 0x30	; 48
    3484:	19 f4       	brne	.+6      	; 0x348c <vfprintf+0x2e8>
    3486:	99 ee       	ldi	r25, 0xE9	; 233
    3488:	f9 22       	and	r15, r25
    348a:	08 c0       	rjmp	.+16     	; 0x349c <vfprintf+0x2f8>
    348c:	1f 5f       	subi	r17, 0xFF	; 255
    348e:	f2 fe       	sbrs	r15, 2
    3490:	05 c0       	rjmp	.+10     	; 0x349c <vfprintf+0x2f8>
    3492:	03 c0       	rjmp	.+6      	; 0x349a <vfprintf+0x2f6>
    3494:	8f 2d       	mov	r24, r15
    3496:	86 78       	andi	r24, 0x86	; 134
    3498:	09 f0       	breq	.+2      	; 0x349c <vfprintf+0x2f8>
    349a:	1f 5f       	subi	r17, 0xFF	; 255
    349c:	0f 2d       	mov	r16, r15
    349e:	f3 fc       	sbrc	r15, 3
    34a0:	14 c0       	rjmp	.+40     	; 0x34ca <vfprintf+0x326>
    34a2:	f0 fe       	sbrs	r15, 0
    34a4:	0f c0       	rjmp	.+30     	; 0x34c4 <vfprintf+0x320>
    34a6:	1e 15       	cp	r17, r14
    34a8:	10 f0       	brcs	.+4      	; 0x34ae <vfprintf+0x30a>
    34aa:	9d 2c       	mov	r9, r13
    34ac:	0b c0       	rjmp	.+22     	; 0x34c4 <vfprintf+0x320>
    34ae:	9d 2c       	mov	r9, r13
    34b0:	9e 0c       	add	r9, r14
    34b2:	91 1a       	sub	r9, r17
    34b4:	1e 2d       	mov	r17, r14
    34b6:	06 c0       	rjmp	.+12     	; 0x34c4 <vfprintf+0x320>
    34b8:	80 e2       	ldi	r24, 0x20	; 32
    34ba:	90 e0       	ldi	r25, 0x00	; 0
    34bc:	b3 01       	movw	r22, r6
    34be:	0e 94 c5 1a 	call	0x358a	; 0x358a <fputc>
    34c2:	1f 5f       	subi	r17, 0xFF	; 255
    34c4:	1e 15       	cp	r17, r14
    34c6:	c0 f3       	brcs	.-16     	; 0x34b8 <vfprintf+0x314>
    34c8:	04 c0       	rjmp	.+8      	; 0x34d2 <vfprintf+0x32e>
    34ca:	1e 15       	cp	r17, r14
    34cc:	10 f4       	brcc	.+4      	; 0x34d2 <vfprintf+0x32e>
    34ce:	e1 1a       	sub	r14, r17
    34d0:	01 c0       	rjmp	.+2      	; 0x34d4 <vfprintf+0x330>
    34d2:	ee 24       	eor	r14, r14
    34d4:	04 ff       	sbrs	r16, 4
    34d6:	0f c0       	rjmp	.+30     	; 0x34f6 <vfprintf+0x352>
    34d8:	80 e3       	ldi	r24, 0x30	; 48
    34da:	90 e0       	ldi	r25, 0x00	; 0
    34dc:	b3 01       	movw	r22, r6
    34de:	0e 94 c5 1a 	call	0x358a	; 0x358a <fputc>
    34e2:	02 ff       	sbrs	r16, 2
    34e4:	1d c0       	rjmp	.+58     	; 0x3520 <vfprintf+0x37c>
    34e6:	01 fd       	sbrc	r16, 1
    34e8:	03 c0       	rjmp	.+6      	; 0x34f0 <vfprintf+0x34c>
    34ea:	88 e7       	ldi	r24, 0x78	; 120
    34ec:	90 e0       	ldi	r25, 0x00	; 0
    34ee:	0e c0       	rjmp	.+28     	; 0x350c <vfprintf+0x368>
    34f0:	88 e5       	ldi	r24, 0x58	; 88
    34f2:	90 e0       	ldi	r25, 0x00	; 0
    34f4:	0b c0       	rjmp	.+22     	; 0x350c <vfprintf+0x368>
    34f6:	80 2f       	mov	r24, r16
    34f8:	86 78       	andi	r24, 0x86	; 134
    34fa:	91 f0       	breq	.+36     	; 0x3520 <vfprintf+0x37c>
    34fc:	01 ff       	sbrs	r16, 1
    34fe:	02 c0       	rjmp	.+4      	; 0x3504 <vfprintf+0x360>
    3500:	8b e2       	ldi	r24, 0x2B	; 43
    3502:	01 c0       	rjmp	.+2      	; 0x3506 <vfprintf+0x362>
    3504:	80 e2       	ldi	r24, 0x20	; 32
    3506:	f7 fc       	sbrc	r15, 7
    3508:	8d e2       	ldi	r24, 0x2D	; 45
    350a:	90 e0       	ldi	r25, 0x00	; 0
    350c:	b3 01       	movw	r22, r6
    350e:	0e 94 c5 1a 	call	0x358a	; 0x358a <fputc>
    3512:	06 c0       	rjmp	.+12     	; 0x3520 <vfprintf+0x37c>
    3514:	80 e3       	ldi	r24, 0x30	; 48
    3516:	90 e0       	ldi	r25, 0x00	; 0
    3518:	b3 01       	movw	r22, r6
    351a:	0e 94 c5 1a 	call	0x358a	; 0x358a <fputc>
    351e:	9a 94       	dec	r9
    3520:	d9 14       	cp	r13, r9
    3522:	c0 f3       	brcs	.-16     	; 0x3514 <vfprintf+0x370>
    3524:	da 94       	dec	r13
    3526:	f1 01       	movw	r30, r2
    3528:	ed 0d       	add	r30, r13
    352a:	f1 1d       	adc	r31, r1
    352c:	80 81       	ld	r24, Z
    352e:	90 e0       	ldi	r25, 0x00	; 0
    3530:	b3 01       	movw	r22, r6
    3532:	0e 94 c5 1a 	call	0x358a	; 0x358a <fputc>
    3536:	dd 20       	and	r13, r13
    3538:	a9 f7       	brne	.-22     	; 0x3524 <vfprintf+0x380>
    353a:	06 c0       	rjmp	.+12     	; 0x3548 <vfprintf+0x3a4>
    353c:	80 e2       	ldi	r24, 0x20	; 32
    353e:	90 e0       	ldi	r25, 0x00	; 0
    3540:	b3 01       	movw	r22, r6
    3542:	0e 94 c5 1a 	call	0x358a	; 0x358a <fputc>
    3546:	ea 94       	dec	r14
    3548:	ee 20       	and	r14, r14
    354a:	c1 f7       	brne	.-16     	; 0x353c <vfprintf+0x398>
    354c:	43 ce       	rjmp	.-890    	; 0x31d4 <vfprintf+0x30>
    354e:	f3 01       	movw	r30, r6
    3550:	66 81       	ldd	r22, Z+6	; 0x06
    3552:	77 81       	ldd	r23, Z+7	; 0x07
    3554:	cb 01       	movw	r24, r22
    3556:	2b 96       	adiw	r28, 0x0b	; 11
    3558:	e2 e1       	ldi	r30, 0x12	; 18
    355a:	0c 94 ad 1b 	jmp	0x375a	; 0x375a <__epilogue_restores__>

0000355e <strnlen_P>:
    355e:	fc 01       	movw	r30, r24
    3560:	05 90       	lpm	r0, Z+
    3562:	61 50       	subi	r22, 0x01	; 1
    3564:	70 40       	sbci	r23, 0x00	; 0
    3566:	01 10       	cpse	r0, r1
    3568:	d8 f7       	brcc	.-10     	; 0x3560 <strnlen_P+0x2>
    356a:	80 95       	com	r24
    356c:	90 95       	com	r25
    356e:	8e 0f       	add	r24, r30
    3570:	9f 1f       	adc	r25, r31
    3572:	08 95       	ret

00003574 <strnlen>:
    3574:	fc 01       	movw	r30, r24
    3576:	61 50       	subi	r22, 0x01	; 1
    3578:	70 40       	sbci	r23, 0x00	; 0
    357a:	01 90       	ld	r0, Z+
    357c:	01 10       	cpse	r0, r1
    357e:	d8 f7       	brcc	.-10     	; 0x3576 <strnlen+0x2>
    3580:	80 95       	com	r24
    3582:	90 95       	com	r25
    3584:	8e 0f       	add	r24, r30
    3586:	9f 1f       	adc	r25, r31
    3588:	08 95       	ret

0000358a <fputc>:
    358a:	0f 93       	push	r16
    358c:	1f 93       	push	r17
    358e:	cf 93       	push	r28
    3590:	df 93       	push	r29
    3592:	8c 01       	movw	r16, r24
    3594:	eb 01       	movw	r28, r22
    3596:	8b 81       	ldd	r24, Y+3	; 0x03
    3598:	81 ff       	sbrs	r24, 1
    359a:	1b c0       	rjmp	.+54     	; 0x35d2 <fputc+0x48>
    359c:	82 ff       	sbrs	r24, 2
    359e:	0d c0       	rjmp	.+26     	; 0x35ba <fputc+0x30>
    35a0:	2e 81       	ldd	r18, Y+6	; 0x06
    35a2:	3f 81       	ldd	r19, Y+7	; 0x07
    35a4:	8c 81       	ldd	r24, Y+4	; 0x04
    35a6:	9d 81       	ldd	r25, Y+5	; 0x05
    35a8:	28 17       	cp	r18, r24
    35aa:	39 07       	cpc	r19, r25
    35ac:	64 f4       	brge	.+24     	; 0x35c6 <fputc+0x3c>
    35ae:	e8 81       	ld	r30, Y
    35b0:	f9 81       	ldd	r31, Y+1	; 0x01
    35b2:	01 93       	st	Z+, r16
    35b4:	f9 83       	std	Y+1, r31	; 0x01
    35b6:	e8 83       	st	Y, r30
    35b8:	06 c0       	rjmp	.+12     	; 0x35c6 <fputc+0x3c>
    35ba:	e8 85       	ldd	r30, Y+8	; 0x08
    35bc:	f9 85       	ldd	r31, Y+9	; 0x09
    35be:	80 2f       	mov	r24, r16
    35c0:	09 95       	icall
    35c2:	89 2b       	or	r24, r25
    35c4:	31 f4       	brne	.+12     	; 0x35d2 <fputc+0x48>
    35c6:	8e 81       	ldd	r24, Y+6	; 0x06
    35c8:	9f 81       	ldd	r25, Y+7	; 0x07
    35ca:	01 96       	adiw	r24, 0x01	; 1
    35cc:	9f 83       	std	Y+7, r25	; 0x07
    35ce:	8e 83       	std	Y+6, r24	; 0x06
    35d0:	02 c0       	rjmp	.+4      	; 0x35d6 <fputc+0x4c>
    35d2:	0f ef       	ldi	r16, 0xFF	; 255
    35d4:	1f ef       	ldi	r17, 0xFF	; 255
    35d6:	c8 01       	movw	r24, r16
    35d8:	df 91       	pop	r29
    35da:	cf 91       	pop	r28
    35dc:	1f 91       	pop	r17
    35de:	0f 91       	pop	r16
    35e0:	08 95       	ret

000035e2 <__ultoa_invert>:
    35e2:	fa 01       	movw	r30, r20
    35e4:	aa 27       	eor	r26, r26
    35e6:	28 30       	cpi	r18, 0x08	; 8
    35e8:	51 f1       	breq	.+84     	; 0x363e <__ultoa_invert+0x5c>
    35ea:	20 31       	cpi	r18, 0x10	; 16
    35ec:	81 f1       	breq	.+96     	; 0x364e <__ultoa_invert+0x6c>
    35ee:	e8 94       	clt
    35f0:	6f 93       	push	r22
    35f2:	6e 7f       	andi	r22, 0xFE	; 254
    35f4:	6e 5f       	subi	r22, 0xFE	; 254
    35f6:	7f 4f       	sbci	r23, 0xFF	; 255
    35f8:	8f 4f       	sbci	r24, 0xFF	; 255
    35fa:	9f 4f       	sbci	r25, 0xFF	; 255
    35fc:	af 4f       	sbci	r26, 0xFF	; 255
    35fe:	b1 e0       	ldi	r27, 0x01	; 1
    3600:	3e d0       	rcall	.+124    	; 0x367e <__ultoa_invert+0x9c>
    3602:	b4 e0       	ldi	r27, 0x04	; 4
    3604:	3c d0       	rcall	.+120    	; 0x367e <__ultoa_invert+0x9c>
    3606:	67 0f       	add	r22, r23
    3608:	78 1f       	adc	r23, r24
    360a:	89 1f       	adc	r24, r25
    360c:	9a 1f       	adc	r25, r26
    360e:	a1 1d       	adc	r26, r1
    3610:	68 0f       	add	r22, r24
    3612:	79 1f       	adc	r23, r25
    3614:	8a 1f       	adc	r24, r26
    3616:	91 1d       	adc	r25, r1
    3618:	a1 1d       	adc	r26, r1
    361a:	6a 0f       	add	r22, r26
    361c:	71 1d       	adc	r23, r1
    361e:	81 1d       	adc	r24, r1
    3620:	91 1d       	adc	r25, r1
    3622:	a1 1d       	adc	r26, r1
    3624:	20 d0       	rcall	.+64     	; 0x3666 <__ultoa_invert+0x84>
    3626:	09 f4       	brne	.+2      	; 0x362a <__ultoa_invert+0x48>
    3628:	68 94       	set
    362a:	3f 91       	pop	r19
    362c:	2a e0       	ldi	r18, 0x0A	; 10
    362e:	26 9f       	mul	r18, r22
    3630:	11 24       	eor	r1, r1
    3632:	30 19       	sub	r19, r0
    3634:	30 5d       	subi	r19, 0xD0	; 208
    3636:	31 93       	st	Z+, r19
    3638:	de f6       	brtc	.-74     	; 0x35f0 <__ultoa_invert+0xe>
    363a:	cf 01       	movw	r24, r30
    363c:	08 95       	ret
    363e:	46 2f       	mov	r20, r22
    3640:	47 70       	andi	r20, 0x07	; 7
    3642:	40 5d       	subi	r20, 0xD0	; 208
    3644:	41 93       	st	Z+, r20
    3646:	b3 e0       	ldi	r27, 0x03	; 3
    3648:	0f d0       	rcall	.+30     	; 0x3668 <__ultoa_invert+0x86>
    364a:	c9 f7       	brne	.-14     	; 0x363e <__ultoa_invert+0x5c>
    364c:	f6 cf       	rjmp	.-20     	; 0x363a <__ultoa_invert+0x58>
    364e:	46 2f       	mov	r20, r22
    3650:	4f 70       	andi	r20, 0x0F	; 15
    3652:	40 5d       	subi	r20, 0xD0	; 208
    3654:	4a 33       	cpi	r20, 0x3A	; 58
    3656:	18 f0       	brcs	.+6      	; 0x365e <__ultoa_invert+0x7c>
    3658:	49 5d       	subi	r20, 0xD9	; 217
    365a:	31 fd       	sbrc	r19, 1
    365c:	40 52       	subi	r20, 0x20	; 32
    365e:	41 93       	st	Z+, r20
    3660:	02 d0       	rcall	.+4      	; 0x3666 <__ultoa_invert+0x84>
    3662:	a9 f7       	brne	.-22     	; 0x364e <__ultoa_invert+0x6c>
    3664:	ea cf       	rjmp	.-44     	; 0x363a <__ultoa_invert+0x58>
    3666:	b4 e0       	ldi	r27, 0x04	; 4
    3668:	a6 95       	lsr	r26
    366a:	97 95       	ror	r25
    366c:	87 95       	ror	r24
    366e:	77 95       	ror	r23
    3670:	67 95       	ror	r22
    3672:	ba 95       	dec	r27
    3674:	c9 f7       	brne	.-14     	; 0x3668 <__ultoa_invert+0x86>
    3676:	00 97       	sbiw	r24, 0x00	; 0
    3678:	61 05       	cpc	r22, r1
    367a:	71 05       	cpc	r23, r1
    367c:	08 95       	ret
    367e:	9b 01       	movw	r18, r22
    3680:	ac 01       	movw	r20, r24
    3682:	0a 2e       	mov	r0, r26
    3684:	06 94       	lsr	r0
    3686:	57 95       	ror	r21
    3688:	47 95       	ror	r20
    368a:	37 95       	ror	r19
    368c:	27 95       	ror	r18
    368e:	ba 95       	dec	r27
    3690:	c9 f7       	brne	.-14     	; 0x3684 <__ultoa_invert+0xa2>
    3692:	62 0f       	add	r22, r18
    3694:	73 1f       	adc	r23, r19
    3696:	84 1f       	adc	r24, r20
    3698:	95 1f       	adc	r25, r21
    369a:	a0 1d       	adc	r26, r0
    369c:	08 95       	ret

0000369e <__udivmodqi4>:
    369e:	99 1b       	sub	r25, r25
    36a0:	79 e0       	ldi	r23, 0x09	; 9
    36a2:	04 c0       	rjmp	.+8      	; 0x36ac <__udivmodqi4_ep>

000036a4 <__udivmodqi4_loop>:
    36a4:	99 1f       	adc	r25, r25
    36a6:	96 17       	cp	r25, r22
    36a8:	08 f0       	brcs	.+2      	; 0x36ac <__udivmodqi4_ep>
    36aa:	96 1b       	sub	r25, r22

000036ac <__udivmodqi4_ep>:
    36ac:	88 1f       	adc	r24, r24
    36ae:	7a 95       	dec	r23
    36b0:	c9 f7       	brne	.-14     	; 0x36a4 <__udivmodqi4_loop>
    36b2:	80 95       	com	r24
    36b4:	08 95       	ret

000036b6 <__udivmodhi4>:
    36b6:	aa 1b       	sub	r26, r26
    36b8:	bb 1b       	sub	r27, r27
    36ba:	51 e1       	ldi	r21, 0x11	; 17
    36bc:	07 c0       	rjmp	.+14     	; 0x36cc <__udivmodhi4_ep>

000036be <__udivmodhi4_loop>:
    36be:	aa 1f       	adc	r26, r26
    36c0:	bb 1f       	adc	r27, r27
    36c2:	a6 17       	cp	r26, r22
    36c4:	b7 07       	cpc	r27, r23
    36c6:	10 f0       	brcs	.+4      	; 0x36cc <__udivmodhi4_ep>
    36c8:	a6 1b       	sub	r26, r22
    36ca:	b7 0b       	sbc	r27, r23

000036cc <__udivmodhi4_ep>:
    36cc:	88 1f       	adc	r24, r24
    36ce:	99 1f       	adc	r25, r25
    36d0:	5a 95       	dec	r21
    36d2:	a9 f7       	brne	.-22     	; 0x36be <__udivmodhi4_loop>
    36d4:	80 95       	com	r24
    36d6:	90 95       	com	r25
    36d8:	bc 01       	movw	r22, r24
    36da:	cd 01       	movw	r24, r26
    36dc:	08 95       	ret

000036de <__udivmodsi4>:
    36de:	a1 e2       	ldi	r26, 0x21	; 33
    36e0:	1a 2e       	mov	r1, r26
    36e2:	aa 1b       	sub	r26, r26
    36e4:	bb 1b       	sub	r27, r27
    36e6:	fd 01       	movw	r30, r26
    36e8:	0d c0       	rjmp	.+26     	; 0x3704 <__udivmodsi4_ep>

000036ea <__udivmodsi4_loop>:
    36ea:	aa 1f       	adc	r26, r26
    36ec:	bb 1f       	adc	r27, r27
    36ee:	ee 1f       	adc	r30, r30
    36f0:	ff 1f       	adc	r31, r31
    36f2:	a2 17       	cp	r26, r18
    36f4:	b3 07       	cpc	r27, r19
    36f6:	e4 07       	cpc	r30, r20
    36f8:	f5 07       	cpc	r31, r21
    36fa:	20 f0       	brcs	.+8      	; 0x3704 <__udivmodsi4_ep>
    36fc:	a2 1b       	sub	r26, r18
    36fe:	b3 0b       	sbc	r27, r19
    3700:	e4 0b       	sbc	r30, r20
    3702:	f5 0b       	sbc	r31, r21

00003704 <__udivmodsi4_ep>:
    3704:	66 1f       	adc	r22, r22
    3706:	77 1f       	adc	r23, r23
    3708:	88 1f       	adc	r24, r24
    370a:	99 1f       	adc	r25, r25
    370c:	1a 94       	dec	r1
    370e:	69 f7       	brne	.-38     	; 0x36ea <__udivmodsi4_loop>
    3710:	60 95       	com	r22
    3712:	70 95       	com	r23
    3714:	80 95       	com	r24
    3716:	90 95       	com	r25
    3718:	9b 01       	movw	r18, r22
    371a:	ac 01       	movw	r20, r24
    371c:	bd 01       	movw	r22, r26
    371e:	cf 01       	movw	r24, r30
    3720:	08 95       	ret

00003722 <__prologue_saves__>:
    3722:	2f 92       	push	r2
    3724:	3f 92       	push	r3
    3726:	4f 92       	push	r4
    3728:	5f 92       	push	r5
    372a:	6f 92       	push	r6
    372c:	7f 92       	push	r7
    372e:	8f 92       	push	r8
    3730:	9f 92       	push	r9
    3732:	af 92       	push	r10
    3734:	bf 92       	push	r11
    3736:	cf 92       	push	r12
    3738:	df 92       	push	r13
    373a:	ef 92       	push	r14
    373c:	ff 92       	push	r15
    373e:	0f 93       	push	r16
    3740:	1f 93       	push	r17
    3742:	cf 93       	push	r28
    3744:	df 93       	push	r29
    3746:	cd b7       	in	r28, 0x3d	; 61
    3748:	de b7       	in	r29, 0x3e	; 62
    374a:	ca 1b       	sub	r28, r26
    374c:	db 0b       	sbc	r29, r27
    374e:	0f b6       	in	r0, 0x3f	; 63
    3750:	f8 94       	cli
    3752:	de bf       	out	0x3e, r29	; 62
    3754:	0f be       	out	0x3f, r0	; 63
    3756:	cd bf       	out	0x3d, r28	; 61
    3758:	09 94       	ijmp

0000375a <__epilogue_restores__>:
    375a:	2a 88       	ldd	r2, Y+18	; 0x12
    375c:	39 88       	ldd	r3, Y+17	; 0x11
    375e:	48 88       	ldd	r4, Y+16	; 0x10
    3760:	5f 84       	ldd	r5, Y+15	; 0x0f
    3762:	6e 84       	ldd	r6, Y+14	; 0x0e
    3764:	7d 84       	ldd	r7, Y+13	; 0x0d
    3766:	8c 84       	ldd	r8, Y+12	; 0x0c
    3768:	9b 84       	ldd	r9, Y+11	; 0x0b
    376a:	aa 84       	ldd	r10, Y+10	; 0x0a
    376c:	b9 84       	ldd	r11, Y+9	; 0x09
    376e:	c8 84       	ldd	r12, Y+8	; 0x08
    3770:	df 80       	ldd	r13, Y+7	; 0x07
    3772:	ee 80       	ldd	r14, Y+6	; 0x06
    3774:	fd 80       	ldd	r15, Y+5	; 0x05
    3776:	0c 81       	ldd	r16, Y+4	; 0x04
    3778:	1b 81       	ldd	r17, Y+3	; 0x03
    377a:	aa 81       	ldd	r26, Y+2	; 0x02
    377c:	b9 81       	ldd	r27, Y+1	; 0x01
    377e:	ce 0f       	add	r28, r30
    3780:	d1 1d       	adc	r29, r1
    3782:	0f b6       	in	r0, 0x3f	; 63
    3784:	f8 94       	cli
    3786:	de bf       	out	0x3e, r29	; 62
    3788:	0f be       	out	0x3f, r0	; 63
    378a:	cd bf       	out	0x3d, r28	; 61
    378c:	ed 01       	movw	r28, r26
    378e:	08 95       	ret

00003790 <_exit>:
    3790:	f8 94       	cli

00003792 <__stop_program>:
    3792:	ff cf       	rjmp	.-2      	; 0x3792 <__stop_program>
